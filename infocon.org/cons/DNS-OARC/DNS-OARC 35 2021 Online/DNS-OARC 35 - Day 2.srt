1
00:00:00,360 --> 00:00:13,200
[Music]

2
00:00:13,200 --> 00:00:14,920
da

3
00:00:14,920 --> 00:00:17,920
da

4
00:00:28,840 --> 00:00:30,490
foreign

5
00:00:30,490 --> 00:00:33,589
[Music]

6
00:00:36,890 --> 00:00:40,009
[Music]

7
00:00:42,840 --> 00:00:45,840
day

8
00:00:52,880 --> 00:00:55,979
[Music]

9
00:00:56,840 --> 00:00:58,470
do

10
00:00:58,470 --> 00:01:01,640
[Music]

11
00:01:10,840 --> 00:01:13,840
data

12
00:01:24,840 --> 00:01:27,840
data

13
00:01:31,730 --> 00:01:34,909
[Music]

14
00:01:38,840 --> 00:01:41,840
day

15
00:01:47,710 --> 00:01:50,809
[Music]

16
00:01:52,840 --> 00:01:55,840
so

17
00:02:01,280 --> 00:02:04,479
hello everyone uh welcome back to uh

18
00:02:04,479 --> 00:02:09,520
day two of or 35 on the on behalf of the

19
00:02:09,520 --> 00:02:10,959
program committee i'd like to welcome

20
00:02:10,959 --> 00:02:12,720
you uh

21
00:02:12,720 --> 00:02:14,959
i will be the session chair and the qa

22
00:02:14,959 --> 00:02:17,599
monitor for the first two sessions today

23
00:02:17,599 --> 00:02:20,879
up until a long break and palaviras

24
00:02:20,879 --> 00:02:23,760
will be the timekeeper we would like to

25
00:02:23,760 --> 00:02:24,319
thank

26
00:02:24,319 --> 00:02:26,959
both farsight security and verisign as

27
00:02:26,959 --> 00:02:28,879
our workshop sponsors

28
00:02:28,879 --> 00:02:32,000
and uh without further ado i'd like to

29
00:02:32,000 --> 00:02:33,120
welcome

30
00:02:33,120 --> 00:02:35,440
dwayne vessels his presentation on

31
00:02:35,440 --> 00:02:36,400
botnet traffic

32
00:02:36,400 --> 00:02:38,640
observed at various levels of the dns

33
00:02:38,640 --> 00:02:39,920
hierarchy

34
00:02:39,920 --> 00:02:41,280
duane if you'd like to start sharing

35
00:02:41,280 --> 00:02:43,040
your screen

36
00:02:43,040 --> 00:02:46,640
all right so uh thanks jake it's great

37
00:02:46,640 --> 00:02:47,280
to be here

38
00:02:47,280 --> 00:02:49,519
and be able to interact with all of you

39
00:02:49,519 --> 00:02:51,360
even if it's sort of virtually

40
00:02:51,360 --> 00:02:55,120
um my name is dwayne wessels and uh

41
00:02:55,120 --> 00:02:57,680
this is a joint joint effort with my

42
00:02:57,680 --> 00:02:59,680
co-worker matt thomas who's

43
00:02:59,680 --> 00:03:01,519
listening in today the titleist

44
00:03:01,519 --> 00:03:03,760
presentation is

45
00:03:03,760 --> 00:03:05,599
traffic at various levels of the dns

46
00:03:05,599 --> 00:03:08,079
hierarchy

47
00:03:08,800 --> 00:03:12,319
so this will be all about um this this

48
00:03:12,319 --> 00:03:14,400
dns traffic that we see coming from a

49
00:03:14,400 --> 00:03:15,519
particular

50
00:03:15,519 --> 00:03:17,599
botnet and here's a little bit of

51
00:03:17,599 --> 00:03:19,200
information about about the botnet

52
00:03:19,200 --> 00:03:20,159
itself

53
00:03:20,159 --> 00:03:23,519
um it has uh thousands of second level

54
00:03:23,519 --> 00:03:24,159
domains

55
00:03:24,159 --> 00:03:26,319
and a large it uses the thousands of

56
00:03:26,319 --> 00:03:27,840
thousands of second level domains and a

57
00:03:27,840 --> 00:03:29,519
large subset of those are in

58
00:03:29,519 --> 00:03:32,799
common.net it has consistent and easily

59
00:03:32,799 --> 00:03:34,319
identifiable third level

60
00:03:34,319 --> 00:03:37,360
labels there's a very obfuscated example

61
00:03:37,360 --> 00:03:38,799
there

62
00:03:38,799 --> 00:03:40,879
we see a really even distribution of

63
00:03:40,879 --> 00:03:42,480
queries coming from

64
00:03:42,480 --> 00:03:45,599
recursive clients most of the queries

65
00:03:45,599 --> 00:03:47,840
are of type a and a very small percent

66
00:03:47,840 --> 00:03:48,319
are of

67
00:03:48,319 --> 00:03:50,799
quad a and then there's a smattering of

68
00:03:50,799 --> 00:03:52,560
other types that you would uh usually

69
00:03:52,560 --> 00:03:54,080
expect

70
00:03:54,080 --> 00:03:56,400
um you'll find that some of the some of

71
00:03:56,400 --> 00:03:58,080
the things in this talk are

72
00:03:58,080 --> 00:03:59,599
unfortunately a little bit vague and we

73
00:03:59,599 --> 00:04:01,920
can't share the botnet's name here yet

74
00:04:01,920 --> 00:04:02,720
because

75
00:04:02,720 --> 00:04:04,319
there's still some remediation going on

76
00:04:04,319 --> 00:04:07,599
at other registries

77
00:04:09,360 --> 00:04:12,480
so we we decided to uh sinkhole these

78
00:04:12,480 --> 00:04:14,000
domains and

79
00:04:14,000 --> 00:04:15,439
i want to show a little bit of what

80
00:04:15,439 --> 00:04:17,680
things looked like prior to

81
00:04:17,680 --> 00:04:21,120
the sinkhole so um this

82
00:04:21,120 --> 00:04:23,600
this query traffic generated about 370

83
00:04:23,600 --> 00:04:24,400
thousand

84
00:04:24,400 --> 00:04:27,600
375 000 queries per second at the peak

85
00:04:27,600 --> 00:04:28,160
of the day

86
00:04:28,160 --> 00:04:31,840
to to our common.net name servers

87
00:04:31,840 --> 00:04:33,759
most of the domains that the button is

88
00:04:33,759 --> 00:04:35,680
using uh hadn't been registered at that

89
00:04:35,680 --> 00:04:38,080
time and so most of the responses were

90
00:04:38,080 --> 00:04:41,520
nx domain a small number of the domains

91
00:04:41,520 --> 00:04:44,240
were previously registered and delegated

92
00:04:44,240 --> 00:04:44,560
and

93
00:04:44,560 --> 00:04:46,400
some of those we include here but but

94
00:04:46,400 --> 00:04:48,240
most not

95
00:04:48,240 --> 00:04:49,840
and as i said we see a we see a really

96
00:04:49,840 --> 00:04:51,360
even distribution of queries

97
00:04:51,360 --> 00:04:53,919
uh in particular all the domains receive

98
00:04:53,919 --> 00:04:55,440
essentially the same

99
00:04:55,440 --> 00:04:58,320
rate of queries

100
00:04:59,280 --> 00:05:00,880
so here's what the traffic looked like

101
00:05:00,880 --> 00:05:04,160
over the course of a week

102
00:05:04,160 --> 00:05:06,000
we've got saturday and sunday on the

103
00:05:06,000 --> 00:05:07,440
ends of this graph and the weekdays in

104
00:05:07,440 --> 00:05:08,400
the middle

105
00:05:08,400 --> 00:05:10,800
and um you can see that you know it

106
00:05:10,800 --> 00:05:12,080
varies of course throughout the day

107
00:05:12,080 --> 00:05:13,360
throughout each day

108
00:05:13,360 --> 00:05:16,400
um the the left axis here shows the

109
00:05:16,400 --> 00:05:16,880
total

110
00:05:16,880 --> 00:05:20,639
qps which is that uh 375 000 number and

111
00:05:20,639 --> 00:05:21,039
then

112
00:05:21,039 --> 00:05:24,240
the right shows the query rate per

113
00:05:24,240 --> 00:05:26,720
domain name so like at the peak we see

114
00:05:26,720 --> 00:05:28,960
about 225

115
00:05:28,960 --> 00:05:32,239
qps per domain

116
00:05:33,280 --> 00:05:35,520
this is what a typical response you know

117
00:05:35,520 --> 00:05:38,000
look like um

118
00:05:38,000 --> 00:05:41,199
the r code was nx domain and the only

119
00:05:41,199 --> 00:05:44,240
data in the response was the the

120
00:05:44,240 --> 00:05:46,160
dot com or the soa record which has a

121
00:05:46,160 --> 00:05:49,600
ttl of 900 seconds

122
00:05:51,360 --> 00:05:52,960
so when we first started looking at this

123
00:05:52,960 --> 00:05:53,919
uh you know we were a little bit

124
00:05:53,919 --> 00:05:55,280
surprised and we thought that

125
00:05:55,280 --> 00:05:57,280
there must be something wrong like in

126
00:05:57,280 --> 00:05:58,080
particular we thought there was

127
00:05:58,080 --> 00:05:58,800
something wrong with

128
00:05:58,800 --> 00:06:00,240
negative caching you know we did we

129
00:06:00,240 --> 00:06:02,639
didn't uh we weren't expecting this

130
00:06:02,639 --> 00:06:06,639
this uh level of of queries and so

131
00:06:06,639 --> 00:06:08,720
you know some some sort of quick

132
00:06:08,720 --> 00:06:10,240
calculations we said well what's

133
00:06:10,240 --> 00:06:12,800
what's the what query what query rate

134
00:06:12,800 --> 00:06:14,000
might we expect

135
00:06:14,000 --> 00:06:17,440
if you know uh if all these recursive uh

136
00:06:17,440 --> 00:06:18,720
sources were

137
00:06:18,720 --> 00:06:21,280
properly obeying negative caching ttls

138
00:06:21,280 --> 00:06:22,319
of 900 seconds

139
00:06:22,319 --> 00:06:25,440
and that came out to be

140
00:06:25,440 --> 00:06:28,720
79 quarters per second per

141
00:06:28,720 --> 00:06:31,680
resolver source which is represented by

142
00:06:31,680 --> 00:06:32,080
this

143
00:06:32,080 --> 00:06:34,479
green vertical line in the graph and so

144
00:06:34,479 --> 00:06:35,919
the data actually shows that

145
00:06:35,919 --> 00:06:38,400
um you know 99 of the clients are below

146
00:06:38,400 --> 00:06:39,759
that threshold

147
00:06:39,759 --> 00:06:41,759
and so that tells us that you know the

148
00:06:41,759 --> 00:06:43,360
negative caching is

149
00:06:43,360 --> 00:06:46,400
working um as expected here

150
00:06:46,400 --> 00:06:47,919
you'll see that in the in the scatter

151
00:06:47,919 --> 00:06:49,759
plot there's sort of two

152
00:06:49,759 --> 00:06:51,840
shapes or two groups and that's actually

153
00:06:51,840 --> 00:06:52,800
because there are

154
00:06:52,800 --> 00:06:55,759
um sort of two variants of this botnet

155
00:06:55,759 --> 00:06:57,440
and they're they're slightly different

156
00:06:57,440 --> 00:06:59,520
uh one of them you know uses more uh

157
00:06:59,520 --> 00:07:03,440
query names than the other

158
00:07:03,440 --> 00:07:06,240
okay so now let's look at uh the you

159
00:07:06,240 --> 00:07:08,080
know when we decided to sync all this

160
00:07:08,080 --> 00:07:11,360
traffic um

161
00:07:11,360 --> 00:07:14,000
we chose to to delegate most of the

162
00:07:14,000 --> 00:07:14,800
botnet's

163
00:07:14,800 --> 00:07:16,639
domain names to our sinkhole name

164
00:07:16,639 --> 00:07:19,199
servers although there was a

165
00:07:19,199 --> 00:07:21,520
a small group that left undelegated sort

166
00:07:21,520 --> 00:07:22,960
of as a control

167
00:07:22,960 --> 00:07:26,560
in our data analysis we used four

168
00:07:26,560 --> 00:07:29,759
different dedicated single name servers

169
00:07:29,759 --> 00:07:32,080
at three geographically distributed

170
00:07:32,080 --> 00:07:32,880
sites

171
00:07:32,880 --> 00:07:35,759
uh the machines details are there it was

172
00:07:35,759 --> 00:07:36,160
uh

173
00:07:36,160 --> 00:07:38,800
you know a recent version of ubuntu and

174
00:07:38,800 --> 00:07:40,720
bind 916

175
00:07:40,720 --> 00:07:42,880
and that was configured with minimal

176
00:07:42,880 --> 00:07:44,160
responses

177
00:07:44,160 --> 00:07:47,919
and we used uh the good old uh dns

178
00:07:47,919 --> 00:07:49,919
statistics collector software for our

179
00:07:49,919 --> 00:07:52,639
data collection

180
00:07:54,080 --> 00:07:56,000
so this graph shows what things looked

181
00:07:56,000 --> 00:07:58,000
like um

182
00:07:58,000 --> 00:08:00,319
you know when we switched domains from

183
00:08:00,319 --> 00:08:01,280
uh

184
00:08:01,280 --> 00:08:04,160
from from the initial state to the to

185
00:08:04,160 --> 00:08:05,599
the sinkhole state

186
00:08:05,599 --> 00:08:08,000
the the purple line in this graph is the

187
00:08:08,000 --> 00:08:10,319
rate of queries per domain

188
00:08:10,319 --> 00:08:12,960
seen at the tld name servers and again

189
00:08:12,960 --> 00:08:13,840
there's there's that

190
00:08:13,840 --> 00:08:17,520
uh 225 qps peak and then you can see on

191
00:08:17,520 --> 00:08:18,319
wednesday

192
00:08:18,319 --> 00:08:22,080
uh these got delegated to the sinkhole

193
00:08:22,080 --> 00:08:25,039
and the tld traffic dropped from from

194
00:08:25,039 --> 00:08:26,240
that high rate

195
00:08:26,240 --> 00:08:28,879
down to about six quarters per second

196
00:08:28,879 --> 00:08:30,560
per domain

197
00:08:30,560 --> 00:08:33,120
and then the green line the it's labeled

198
00:08:33,120 --> 00:08:35,120
sld that's the traffic seen at the

199
00:08:35,120 --> 00:08:36,719
sinkhole name servers

200
00:08:36,719 --> 00:08:39,279
and it peaks at uh sort of just under 50

201
00:08:39,279 --> 00:08:41,838
queries per second

202
00:08:44,640 --> 00:08:47,440
so we felt that this um this was a

203
00:08:47,440 --> 00:08:48,480
really good opportunity

204
00:08:48,480 --> 00:08:50,399
with this with this ds traffic to do

205
00:08:50,399 --> 00:08:52,240
some different experiments and

206
00:08:52,240 --> 00:08:55,440
and some research so

207
00:08:55,440 --> 00:08:57,360
we ran a bunch of different things and

208
00:08:57,360 --> 00:08:59,040
uh one of them we did was

209
00:08:59,040 --> 00:09:01,600
to understand how the response code

210
00:09:01,600 --> 00:09:04,800
affects caching and query rates

211
00:09:04,800 --> 00:09:07,040
and how does the presence or absence of

212
00:09:07,040 --> 00:09:08,000
the requested data

213
00:09:08,000 --> 00:09:10,480
effect caching and query rates how do

214
00:09:10,480 --> 00:09:11,839
ttls

215
00:09:11,839 --> 00:09:15,040
affect those things for the most part

216
00:09:15,040 --> 00:09:16,959
our experiments would run

217
00:09:16,959 --> 00:09:20,080
for uh during the weekdays the the five

218
00:09:20,080 --> 00:09:21,760
days of the week and we use the weekends

219
00:09:21,760 --> 00:09:23,600
to reset things

220
00:09:23,600 --> 00:09:27,200
and change to a new experiment

221
00:09:28,880 --> 00:09:31,760
uh so here's here's sort of five types

222
00:09:31,760 --> 00:09:32,880
of

223
00:09:32,880 --> 00:09:35,600
experiments or or groups that we did

224
00:09:35,600 --> 00:09:36,080
first

225
00:09:36,080 --> 00:09:39,360
is when the response is no error

226
00:09:39,360 --> 00:09:41,519
and there is uh the requested data in

227
00:09:41,519 --> 00:09:43,040
the response so

228
00:09:43,040 --> 00:09:45,680
no error data the response go to zero

229
00:09:45,680 --> 00:09:46,959
there is a

230
00:09:46,959 --> 00:09:48,320
resource record in the answer section

231
00:09:48,320 --> 00:09:50,080
and the ttl comes from

232
00:09:50,080 --> 00:09:53,839
from that data next is no error no data

233
00:09:53,839 --> 00:09:56,080
and in that case the ttl this is a

234
00:09:56,080 --> 00:09:57,680
negative response and the ttl comes from

235
00:09:57,680 --> 00:09:58,000
the

236
00:09:58,000 --> 00:10:01,680
soa record similarly we have nx domain

237
00:10:01,680 --> 00:10:03,680
where now the response code is 3 and

238
00:10:03,680 --> 00:10:06,480
there's also an soa record with a ttl

239
00:10:06,480 --> 00:10:08,800
and then lastly we studied um what

240
00:10:08,800 --> 00:10:09,519
happens when

241
00:10:09,519 --> 00:10:12,000
the sinkhole returns sir fail and

242
00:10:12,000 --> 00:10:14,560
refused

243
00:10:16,079 --> 00:10:18,560
so this this graph shows uh throughout

244
00:10:18,560 --> 00:10:19,519
the course of a week

245
00:10:19,519 --> 00:10:22,480
um these three different cases of when

246
00:10:22,480 --> 00:10:24,160
there's when there's data

247
00:10:24,160 --> 00:10:26,320
when there's uh no error no data and

248
00:10:26,320 --> 00:10:28,079
when there's an x domain

249
00:10:28,079 --> 00:10:29,279
uh it kind of looks like there's two

250
00:10:29,279 --> 00:10:30,560
lines on this graph but there's really

251
00:10:30,560 --> 00:10:31,440
three the

252
00:10:31,440 --> 00:10:33,920
the two negative cases the no data and

253
00:10:33,920 --> 00:10:35,279
the nx domain

254
00:10:35,279 --> 00:10:37,360
are essentially identical they receive

255
00:10:37,360 --> 00:10:39,360
the same rate of queries

256
00:10:39,360 --> 00:10:41,200
throughout the course of the day uh each

257
00:10:41,200 --> 00:10:43,440
day and over the week

258
00:10:43,440 --> 00:10:46,160
in this in this case all of the ttls

259
00:10:46,160 --> 00:10:47,680
that we had were set to

260
00:10:47,680 --> 00:10:51,360
24 hours so that's ttls on the a records

261
00:10:51,360 --> 00:10:55,440
and on the soa records and so on

262
00:10:58,000 --> 00:10:59,680
so looking a little bit more closely at

263
00:10:59,680 --> 00:11:01,519
some of these cases um

264
00:11:01,519 --> 00:11:05,200
here we we studied the no error

265
00:11:05,200 --> 00:11:08,480
with data case with varying

266
00:11:08,480 --> 00:11:12,800
ttls um and by the way we were able to

267
00:11:12,800 --> 00:11:15,279
run an experiment with these all these

268
00:11:15,279 --> 00:11:17,519
different ttls at the same time by

269
00:11:17,519 --> 00:11:21,279
dividing up the um the domain names into

270
00:11:21,279 --> 00:11:23,600
groups and and you know so all the

271
00:11:23,600 --> 00:11:24,399
queries came

272
00:11:24,399 --> 00:11:25,839
at the same time and we just analyzed

273
00:11:25,839 --> 00:11:29,839
the different uh groupings

274
00:11:30,160 --> 00:11:32,079
so in these in these graphs the shaded

275
00:11:32,079 --> 00:11:34,480
area represents the the daily range and

276
00:11:34,480 --> 00:11:36,480
the points represent the average over

277
00:11:36,480 --> 00:11:39,120
the course of the whole week

278
00:11:39,120 --> 00:11:42,160
note that here the x-axis

279
00:11:42,160 --> 00:11:45,680
is the different ttls represented

280
00:11:45,680 --> 00:11:46,959
logarithmically

281
00:11:46,959 --> 00:11:49,040
right so they basically each tick mark

282
00:11:49,040 --> 00:11:51,200
basically doubles

283
00:11:51,200 --> 00:11:55,279
the ttl time and the top graph shows the

284
00:11:55,279 --> 00:11:58,399
query rates seen at the sinkhole servers

285
00:11:58,399 --> 00:12:01,519
so for the lowest dtl of one minute

286
00:12:01,519 --> 00:12:04,639
um the query rate was about

287
00:12:04,639 --> 00:12:07,440
a little under 300 qps and then as the

288
00:12:07,440 --> 00:12:09,200
ttl increases the query rate

289
00:12:09,200 --> 00:12:11,680
also the query rate decreases and it

290
00:12:11,680 --> 00:12:13,360
sort of plateaus

291
00:12:13,360 --> 00:12:15,279
and you can see here that after about

292
00:12:15,279 --> 00:12:16,399
two hours

293
00:12:16,399 --> 00:12:18,160
um you know it's it's pretty flat

294
00:12:18,160 --> 00:12:20,000
there's not a lot of difference between

295
00:12:20,000 --> 00:12:25,839
say two hours and a day or 32 hours

296
00:12:25,839 --> 00:12:27,440
one thing that's kind of interesting is

297
00:12:27,440 --> 00:12:29,519
that the choice of ttl

298
00:12:29,519 --> 00:12:32,399
at the second level domain uh affects

299
00:12:32,399 --> 00:12:33,680
the query rates seen

300
00:12:33,680 --> 00:12:36,399
at the top level domain shown here in

301
00:12:36,399 --> 00:12:37,440
the middle in green

302
00:12:37,440 --> 00:12:39,680
and also at the root servers shown in

303
00:12:39,680 --> 00:12:42,479
blue on the bottom

304
00:12:42,560 --> 00:12:45,040
so verison obviously operates uh some

305
00:12:45,040 --> 00:12:46,800
some root name servers

306
00:12:46,800 --> 00:12:48,639
but this data is has been sort of

307
00:12:48,639 --> 00:12:50,000
extrapolated

308
00:12:50,000 --> 00:12:52,720
to what the numbers would be for for the

309
00:12:52,720 --> 00:12:54,480
whole root servers system for all all

310
00:12:54,480 --> 00:12:56,959
13.

311
00:12:57,279 --> 00:13:01,200
so that's the uh no error with data case

312
00:13:01,200 --> 00:13:04,720
um here's the no error no data case

313
00:13:04,720 --> 00:13:08,560
things look a little bit similar but um

314
00:13:08,560 --> 00:13:10,720
uh the sld graph in particular is is a

315
00:13:10,720 --> 00:13:12,000
little bit higher

316
00:13:12,000 --> 00:13:13,920
and that'll you can see that better in

317
00:13:13,920 --> 00:13:15,920
an upcoming slide

318
00:13:15,920 --> 00:13:17,680
but but again at the one minute level

319
00:13:17,680 --> 00:13:19,440
you know it's it's right around 300

320
00:13:19,440 --> 00:13:20,320
still

321
00:13:20,320 --> 00:13:23,440
but it plateaus slightly higher

322
00:13:23,440 --> 00:13:25,760
the tld and root graphs look pretty

323
00:13:25,760 --> 00:13:29,040
similar to the previous one

324
00:13:29,680 --> 00:13:32,240
and here's the nx domain case which

325
00:13:32,240 --> 00:13:32,959
again looks

326
00:13:32,959 --> 00:13:35,519
this looks a lot like uh the no data

327
00:13:35,519 --> 00:13:36,959
case because

328
00:13:36,959 --> 00:13:39,199
you know as you already said these these

329
00:13:39,199 --> 00:13:40,959
two cases of negative cache of

330
00:13:40,959 --> 00:13:43,120
negative responses are essentially

331
00:13:43,120 --> 00:13:45,600
equivalent

332
00:13:47,040 --> 00:13:50,399
um this graph shows those three cases

333
00:13:50,399 --> 00:13:51,040
those three

334
00:13:51,040 --> 00:13:53,680
experiments overlaid with each other and

335
00:13:53,680 --> 00:13:55,440
so here you can more clearly see

336
00:13:55,440 --> 00:13:58,480
that the um the the negative response

337
00:13:58,480 --> 00:14:01,600
cases um plateau at a higher level above

338
00:14:01,600 --> 00:14:02,320
100

339
00:14:02,320 --> 00:14:05,279
or just under 100 qps whereas the the

340
00:14:05,279 --> 00:14:06,480
positive responses

341
00:14:06,480 --> 00:14:09,279
um you know flatten out around uh 50 or

342
00:14:09,279 --> 00:14:11,519
so

343
00:14:12,240 --> 00:14:14,720
so one thing to take away from this is

344
00:14:14,720 --> 00:14:17,440
of course that the relationship between

345
00:14:17,440 --> 00:14:19,519
query rates and ttls is is far from

346
00:14:19,519 --> 00:14:21,199
linear right doubling

347
00:14:21,199 --> 00:14:24,720
or having the the ttl does not double or

348
00:14:24,720 --> 00:14:30,800
half the uh the query rate by any means

349
00:14:30,800 --> 00:14:33,120
so next we studied um what happens when

350
00:14:33,120 --> 00:14:34,639
you configure the sinkholes

351
00:14:34,639 --> 00:14:37,920
to return refused and surf fail and

352
00:14:37,920 --> 00:14:40,480
this was uh particularly interesting

353
00:14:40,480 --> 00:14:41,199
because the

354
00:14:41,199 --> 00:14:44,000
the first time we did this uh we were

355
00:14:44,000 --> 00:14:44,560
sort of

356
00:14:44,560 --> 00:14:47,839
um optimistic and we we configured a

357
00:14:47,839 --> 00:14:48,720
large group of

358
00:14:48,720 --> 00:14:52,320
uh domains to to be like this and

359
00:14:52,320 --> 00:14:56,079
uh very nearly uh essentially ddosed

360
00:14:56,079 --> 00:14:57,600
ourselves out of access to our sinkhole

361
00:14:57,600 --> 00:14:58,480
servers uh

362
00:14:58,480 --> 00:15:00,639
there was so much traffic that we

363
00:15:00,639 --> 00:15:02,000
couldn't we couldn't log in

364
00:15:02,000 --> 00:15:04,639
and the boxes were almost unresponsive

365
00:15:04,639 --> 00:15:05,360
we didn't have

366
00:15:05,360 --> 00:15:06,959
out-of-bound access to them

367
00:15:06,959 --> 00:15:08,959
unfortunately but we were able to

368
00:15:08,959 --> 00:15:10,399
recover and then later on we

369
00:15:10,399 --> 00:15:12,480
did these experiments with much smaller

370
00:15:12,480 --> 00:15:13,920
sets i think i think this is

371
00:15:13,920 --> 00:15:16,800
actually with just three domain names

372
00:15:16,800 --> 00:15:17,120
but

373
00:15:17,120 --> 00:15:19,199
the the numbers here are queries per

374
00:15:19,199 --> 00:15:21,199
second per domain

375
00:15:21,199 --> 00:15:23,839
so um for for those domains that return

376
00:15:23,839 --> 00:15:25,120
refused

377
00:15:25,120 --> 00:15:27,839
uh you know whereas with with like an nx

378
00:15:27,839 --> 00:15:30,000
domain we're seeing 300 qps

379
00:15:30,000 --> 00:15:34,079
here we're seeing 40 000 qps so a a huge

380
00:15:34,079 --> 00:15:37,199
a huge uh increase and uh

381
00:15:37,199 --> 00:15:39,920
also you know very noticeable effects at

382
00:15:39,920 --> 00:15:40,399
the

383
00:15:40,399 --> 00:15:42,880
top level domains and in the root server

384
00:15:42,880 --> 00:15:45,519
data as well

385
00:15:46,880 --> 00:15:49,279
similarly this is the the surfail case

386
00:15:49,279 --> 00:15:50,079
and it's

387
00:15:50,079 --> 00:15:52,079
a little bit higher than the refused

388
00:15:52,079 --> 00:15:55,199
case but otherwise looks looks the same

389
00:15:55,199 --> 00:15:57,360
one thing to notice about these you know

390
00:15:57,360 --> 00:15:58,800
these experiments ran over

391
00:15:58,800 --> 00:16:02,079
two days and the first day is lower than

392
00:16:02,079 --> 00:16:03,680
the second that that's not because it

393
00:16:03,680 --> 00:16:05,279
was a weekend versus a weekday or

394
00:16:05,279 --> 00:16:06,240
anything like that

395
00:16:06,240 --> 00:16:09,279
it's just because uh previously these

396
00:16:09,279 --> 00:16:11,360
names were configured um you know with

397
00:16:11,360 --> 00:16:13,199
with like one day ttls and it

398
00:16:13,199 --> 00:16:15,199
took a while for the um you know for

399
00:16:15,199 --> 00:16:16,639
that data to expire from from all the

400
00:16:16,639 --> 00:16:19,360
caches out there

401
00:16:20,839 --> 00:16:24,399
um so this graph shows the effects

402
00:16:24,399 --> 00:16:26,639
of minimal responses some of you may

403
00:16:26,639 --> 00:16:28,240
have already you know

404
00:16:28,240 --> 00:16:30,480
experimented with this a little bit um

405
00:16:30,480 --> 00:16:31,440
but when

406
00:16:31,440 --> 00:16:34,160
uh when when the minimal responses are

407
00:16:34,160 --> 00:16:35,040
on which i

408
00:16:35,040 --> 00:16:38,399
i think maybe the default um the

409
00:16:38,399 --> 00:16:42,240
the amount of uh that they received

410
00:16:42,240 --> 00:16:44,160
uh or sorry the transmitted bandwidth is

411
00:16:44,160 --> 00:16:45,519
pretty close to the

412
00:16:45,519 --> 00:16:47,360
uh received bandwidth there those you

413
00:16:47,360 --> 00:16:48,800
know queries and responses are about the

414
00:16:48,800 --> 00:16:50,000
same size but

415
00:16:50,000 --> 00:16:52,320
when we disabled minimal responses the

416
00:16:52,320 --> 00:16:53,440
uh the bandwidth

417
00:16:53,440 --> 00:16:56,560
usage um you know doubled approximately

418
00:16:56,560 --> 00:16:59,599
maybe even a little bit more

419
00:17:01,920 --> 00:17:05,039
so a few you know key uh observations

420
00:17:05,039 --> 00:17:05,760
from all of this

421
00:17:05,760 --> 00:17:08,240
um there's there's really no difference

422
00:17:08,240 --> 00:17:09,520
in caching

423
00:17:09,520 --> 00:17:12,400
uh of nx domain or or no data negative

424
00:17:12,400 --> 00:17:13,119
responses

425
00:17:13,119 --> 00:17:15,199
it seems like you know the population of

426
00:17:15,199 --> 00:17:16,839
recursive name servers treats those

427
00:17:16,839 --> 00:17:18,640
equivalently

428
00:17:18,640 --> 00:17:21,599
for negative responses uh ttls longer

429
00:17:21,599 --> 00:17:22,559
than an hour

430
00:17:22,559 --> 00:17:25,359
don't make much difference in terms of

431
00:17:25,359 --> 00:17:28,640
query rates and for positive responses

432
00:17:28,640 --> 00:17:30,799
that that's about two to four hours

433
00:17:30,799 --> 00:17:32,080
where you don't see

434
00:17:32,080 --> 00:17:35,919
much more difference the refused and

435
00:17:35,919 --> 00:17:36,640
surf fail

436
00:17:36,640 --> 00:17:39,280
significantly amplify rather than reduce

437
00:17:39,280 --> 00:17:40,960
the query rates

438
00:17:40,960 --> 00:17:43,200
and i realized that i forgot to mention

439
00:17:43,200 --> 00:17:45,520
uh previously that

440
00:17:45,520 --> 00:17:47,919
the the traffic that we saw from from

441
00:17:47,919 --> 00:17:49,679
the reserve the refuse and surf fail

442
00:17:49,679 --> 00:17:50,799
cases

443
00:17:50,799 --> 00:17:53,280
um you know we later were able to

444
00:17:53,280 --> 00:17:54,240
attribute that to

445
00:17:54,240 --> 00:17:57,760
a real small number of recursive um

446
00:17:57,760 --> 00:18:00,480
recursive operators and we were in touch

447
00:18:00,480 --> 00:18:02,240
with them to explain the problem

448
00:18:02,240 --> 00:18:04,640
and uh have been told that that

449
00:18:04,640 --> 00:18:06,880
remediation for that is in progress

450
00:18:06,880 --> 00:18:10,000
so hopefully that will not be a an

451
00:18:10,000 --> 00:18:14,160
ongoing problem

452
00:18:14,160 --> 00:18:16,960
um we hope to be able to do some future

453
00:18:16,960 --> 00:18:17,919
experiments

454
00:18:17,919 --> 00:18:20,080
using um you know this the sinkhole

455
00:18:20,080 --> 00:18:21,760
traffic such as

456
00:18:21,760 --> 00:18:24,799
measuring the effects of aggressive dns

457
00:18:24,799 --> 00:18:28,640
caching understanding or measuring how

458
00:18:28,640 --> 00:18:29,280
quickly

459
00:18:29,280 --> 00:18:31,200
chain when when a change is made to the

460
00:18:31,200 --> 00:18:32,960
parent or tld zone how quickly does that

461
00:18:32,960 --> 00:18:35,520
change propagate throughout the system

462
00:18:35,520 --> 00:18:38,559
and also uh to measure you know what are

463
00:18:38,559 --> 00:18:39,679
the effects

464
00:18:39,679 --> 00:18:41,520
of having a different set of name

465
00:18:41,520 --> 00:18:43,600
servers between the parent zone and the

466
00:18:43,600 --> 00:18:46,240
child zone

467
00:18:47,360 --> 00:18:49,120
that's the end of the presentation and i

468
00:18:49,120 --> 00:18:52,960
think we have some time for questions

469
00:18:52,960 --> 00:18:54,960
thank you dwayne i'd like to remind

470
00:18:54,960 --> 00:18:56,880
everyone that questions can be asked

471
00:18:56,880 --> 00:18:58,799
using the q and a panel

472
00:18:58,799 --> 00:19:01,600
they'll be read out loud by me also you

473
00:19:01,600 --> 00:19:03,120
can raise your hand if you would like to

474
00:19:03,120 --> 00:19:04,720
ask your question verbally

475
00:19:04,720 --> 00:19:06,880
and please remember to rate the talk you

476
00:19:06,880 --> 00:19:08,160
should see

477
00:19:08,160 --> 00:19:10,320
very shortly a pool pop-up thank you

478
00:19:10,320 --> 00:19:11,679
very much for that

479
00:19:11,679 --> 00:19:14,640
uh all right so our first question is

480
00:19:14,640 --> 00:19:14,960
from

481
00:19:14,960 --> 00:19:17,520
jeff houston did you experiment with no

482
00:19:17,520 --> 00:19:21,360
response at all from the sinkholes

483
00:19:21,360 --> 00:19:24,080
um we thought about that jeff but we did

484
00:19:24,080 --> 00:19:24,799
not

485
00:19:24,799 --> 00:19:27,840
do that um and one

486
00:19:27,840 --> 00:19:29,520
one reason that would be a little bit

487
00:19:29,520 --> 00:19:31,360
difficult for us is because

488
00:19:31,360 --> 00:19:34,640
um i i don't know of a way to tell

489
00:19:34,640 --> 00:19:37,280
bind to just not respond to a particular

490
00:19:37,280 --> 00:19:38,240
name

491
00:19:38,240 --> 00:19:39,679
so we would have to you know find some

492
00:19:39,679 --> 00:19:41,280
other way to do that with some fancy

493
00:19:41,280 --> 00:19:43,840
um you know iptables rules or something

494
00:19:43,840 --> 00:19:45,360
like that but we didn't we didn't

495
00:19:45,360 --> 00:19:48,159
pursue that no

496
00:19:49,200 --> 00:19:50,640
all right the next question from paul

497
00:19:50,640 --> 00:19:53,039
hoffman did you have an estimate of how

498
00:19:53,039 --> 00:19:53,840
many client

499
00:19:53,840 --> 00:19:57,440
sources there were yes

500
00:19:57,440 --> 00:20:00,960
um i believe that

501
00:20:00,960 --> 00:20:06,960
in this graph um

502
00:20:06,960 --> 00:20:08,320
oh i guess i guess the number's not in

503
00:20:08,320 --> 00:20:10,400
here um

504
00:20:10,400 --> 00:20:12,480
so it i mean the if you can count up all

505
00:20:12,480 --> 00:20:13,679
those dots you can

506
00:20:13,679 --> 00:20:14,880
you can figure it out but i don't i

507
00:20:14,880 --> 00:20:16,799
don't remember what the exact number is

508
00:20:16,799 --> 00:20:18,880
but you can see that it's it's quite a

509
00:20:18,880 --> 00:20:20,480
few maybe maybe on the order of ten

510
00:20:20,480 --> 00:20:22,400
thousand

511
00:20:22,400 --> 00:20:23,919
maybe more i don't know i'll have to get

512
00:20:23,919 --> 00:20:25,280
back to you on that paul thanks for the

513
00:20:25,280 --> 00:20:27,600
question

514
00:20:29,360 --> 00:20:31,760
uh well okay we'll quickly go to audrey

515
00:20:31,760 --> 00:20:33,280
randall uh can you tell us what the

516
00:20:33,280 --> 00:20:34,000
purpose of this

517
00:20:34,000 --> 00:20:38,000
botnet is is it sending spam or what

518
00:20:38,000 --> 00:20:41,840
um it's it's it's not it's not a spam

519
00:20:41,840 --> 00:20:42,880
sending botnet

520
00:20:42,880 --> 00:20:46,320
as far as i know um

521
00:20:46,320 --> 00:20:48,880
i i don't i actually don't know a lot

522
00:20:48,880 --> 00:20:50,480
about the botnet

523
00:20:50,480 --> 00:20:53,280
um like i said we unfortunately can't

524
00:20:53,280 --> 00:20:55,520
can't mention the name at this point

525
00:20:55,520 --> 00:20:58,080
um but i would say that if there are any

526
00:20:58,080 --> 00:20:59,679
um

527
00:20:59,679 --> 00:21:01,039
are there any registry operators that

528
00:21:01,039 --> 00:21:03,520
are out there that are interested in

529
00:21:03,520 --> 00:21:05,440
in this you know you can get in touch

530
00:21:05,440 --> 00:21:07,440
with us and we can work with you

531
00:21:07,440 --> 00:21:09,200
and and you know provide more details to

532
00:21:09,200 --> 00:21:10,640
you but at this point we can't

533
00:21:10,640 --> 00:21:13,520
uh say more

534
00:21:14,840 --> 00:21:18,159
okay uh

535
00:21:18,159 --> 00:21:20,320
wes hartaker has commented uh excellent

536
00:21:20,320 --> 00:21:21,440
talk thank you

537
00:21:21,440 --> 00:21:23,360
my analysis has shown that botnets are

538
00:21:23,360 --> 00:21:25,919
now spreading dga traffic over hundreds

539
00:21:25,919 --> 00:21:27,280
of tlds

540
00:21:27,280 --> 00:21:29,039
do you know if your sinkhole link for

541
00:21:29,039 --> 00:21:30,400
just two tlds

542
00:21:30,400 --> 00:21:32,960
has actually helped the root dns abuse

543
00:21:32,960 --> 00:21:34,400
cause of the

544
00:21:34,400 --> 00:21:35,919
problem versus just helping your

545
00:21:35,919 --> 00:21:38,320
particular tldr

546
00:21:38,320 --> 00:21:41,520
operation um

547
00:21:41,520 --> 00:21:43,280
yeah that's an interesting question wes

548
00:21:43,280 --> 00:21:44,640
i

549
00:21:44,640 --> 00:21:48,400
i don't know i mean i i think that um

550
00:21:48,400 --> 00:21:50,880
so we we were able to sync all this for

551
00:21:50,880 --> 00:21:51,840
um

552
00:21:51,840 --> 00:21:55,280
for the the tlds that the body uses um

553
00:21:55,280 --> 00:21:58,480
you know that verisign also operates um

554
00:21:58,480 --> 00:22:02,240
but i we didn't look at uh

555
00:22:02,240 --> 00:22:04,320
sort of the overall effect that it may

556
00:22:04,320 --> 00:22:05,840
have had on root traffic and that would

557
00:22:05,840 --> 00:22:07,440
be a good thing to do

558
00:22:07,440 --> 00:22:08,960
we should be able i think with our data

559
00:22:08,960 --> 00:22:11,200
we could go back and and do that

560
00:22:11,200 --> 00:22:13,520
to look at uh query query rates for all

561
00:22:13,520 --> 00:22:15,039
tlds if we wanted to

562
00:22:15,039 --> 00:22:18,080
alter these affected

563
00:22:18,720 --> 00:22:21,360
okay um all right uh jeff houston has

564
00:22:21,360 --> 00:22:23,440
his hand raised i'll allow

565
00:22:23,440 --> 00:22:26,799
you to talk jeff ahead

566
00:22:26,799 --> 00:22:28,080
yeah it's a little bit quicker to

567
00:22:28,080 --> 00:22:29,520
actually ask this one because it's not

568
00:22:29,520 --> 00:22:31,280
so easy to type dwayne

569
00:22:31,280 --> 00:22:33,360
we have found in the work we've done

570
00:22:33,360 --> 00:22:35,360
that on some days up to 90

571
00:22:35,360 --> 00:22:36,799
of the queries we get on our

572
00:22:36,799 --> 00:22:38,559
authoritative servers for a very small

573
00:22:38,559 --> 00:22:39,360
domain

574
00:22:39,360 --> 00:22:42,080
actually come from replays that out

575
00:22:42,080 --> 00:22:43,760
there someone someone is capturing

576
00:22:43,760 --> 00:22:46,080
some essence of dns queries and playing

577
00:22:46,080 --> 00:22:48,320
it back at very very high speed

578
00:22:48,320 --> 00:22:50,960
do you have any feeling of what

579
00:22:50,960 --> 00:22:53,600
proportion of queries you're seeing

580
00:22:53,600 --> 00:22:56,080
are synthetic and have actually been

581
00:22:56,080 --> 00:22:56,880
generated

582
00:22:56,880 --> 00:22:59,200
from something other than the original

583
00:22:59,200 --> 00:23:00,320
botnet

584
00:23:00,320 --> 00:23:03,440
versus original botnet in our case the

585
00:23:03,440 --> 00:23:04,159
average

586
00:23:04,159 --> 00:23:06,960
kicks around long term 40 percent of

587
00:23:06,960 --> 00:23:09,039
queries are what i would call synthetic

588
00:23:09,039 --> 00:23:11,039
in the long term do you have any feel

589
00:23:11,039 --> 00:23:13,840
for that in this case

590
00:23:13,840 --> 00:23:16,480
i don't and i i think that would be

591
00:23:16,480 --> 00:23:18,400
pretty hard to do

592
00:23:18,400 --> 00:23:21,679
with this particular botnet because

593
00:23:21,679 --> 00:23:23,760
it doesn't it doesn't have like a lot of

594
00:23:23,760 --> 00:23:25,679
randomness or uniqueness in its

595
00:23:25,679 --> 00:23:28,159
in its names right it uses a very fixed

596
00:23:28,159 --> 00:23:29,520
set of

597
00:23:29,520 --> 00:23:32,720
both um you know top level domains and

598
00:23:32,720 --> 00:23:34,640
i mean second level and third level

599
00:23:34,640 --> 00:23:36,960
domains so i don't know how i would go

600
00:23:36,960 --> 00:23:37,520
about

601
00:23:37,520 --> 00:23:40,640
detecting replays actually

602
00:23:40,640 --> 00:23:44,640
okay thanks uh from petercock

603
00:23:44,640 --> 00:23:47,200
uh assume you wanted to sync away

604
00:23:47,200 --> 00:23:50,559
non-botnet domain do you think the

605
00:23:50,559 --> 00:23:53,840
resu it's would be com the results would

606
00:23:53,840 --> 00:23:54,640
be comparable

607
00:23:54,640 --> 00:23:56,960
i.e how much is induced by the client

608
00:23:56,960 --> 00:23:57,760
how much by

609
00:23:57,760 --> 00:24:00,879
resolver behavior

610
00:24:01,440 --> 00:24:02,880
yeah that's a that's a good question

611
00:24:02,880 --> 00:24:05,360
peter i i think that um

612
00:24:05,360 --> 00:24:07,200
you know i think that it would be

613
00:24:07,200 --> 00:24:08,960
comparable if

614
00:24:08,960 --> 00:24:10,720
uh if you're talking about sort of

615
00:24:10,720 --> 00:24:12,320
comparable

616
00:24:12,320 --> 00:24:15,060
traffic levels right i think um

617
00:24:15,060 --> 00:24:16,480
[Music]

618
00:24:16,480 --> 00:24:19,360
like like for example uh i'm not sure

619
00:24:19,360 --> 00:24:20,559
this is exactly what you're getting at

620
00:24:20,559 --> 00:24:21,200
but

621
00:24:21,200 --> 00:24:24,080
i'm a little bit hesitant to say that um

622
00:24:24,080 --> 00:24:25,440
you know you you could apply these

623
00:24:25,440 --> 00:24:27,279
results of how the query

624
00:24:27,279 --> 00:24:29,200
varies based on ttl i don't know if you

625
00:24:29,200 --> 00:24:30,320
could apply that

626
00:24:30,320 --> 00:24:32,640
more widely to for example domain names

627
00:24:32,640 --> 00:24:33,760
that

628
00:24:33,760 --> 00:24:36,799
don't get you know these many queries

629
00:24:36,799 --> 00:24:40,240
um i'm not if that wasn't

630
00:24:40,240 --> 00:24:42,559
the question you wanted me to answer um

631
00:24:42,559 --> 00:24:47,039
maybe you could try again

632
00:24:47,039 --> 00:24:49,039
all right a question from uh gavin

633
00:24:49,039 --> 00:24:51,279
mccullough we've seen the difference

634
00:24:51,279 --> 00:24:53,279
between negative and refused a lot have

635
00:24:53,279 --> 00:24:54,240
you come across

636
00:24:54,240 --> 00:24:56,640
authorities which when delegated to

637
00:24:56,640 --> 00:24:57,679
incorrectly

638
00:24:57,679 --> 00:25:01,840
insert an authoritative nx domain

639
00:25:02,080 --> 00:25:06,159
i i haven't but um

640
00:25:06,159 --> 00:25:09,200
you know certainly i think that one

641
00:25:09,200 --> 00:25:11,679
thing this shows is that

642
00:25:11,679 --> 00:25:13,760
there's there's a little bit of a danger

643
00:25:13,760 --> 00:25:16,080
to refused which is

644
00:25:16,080 --> 00:25:17,760
kind of the you know it's kind of the

645
00:25:17,760 --> 00:25:19,200
default

646
00:25:19,200 --> 00:25:21,520
for a name server that gets a query for

647
00:25:21,520 --> 00:25:22,960
a name that it doesn't know about

648
00:25:22,960 --> 00:25:24,559
um you know in the old days you would

649
00:25:24,559 --> 00:25:26,559
get these um

650
00:25:26,559 --> 00:25:30,000
upward referrals and i wanted to

651
00:25:30,000 --> 00:25:31,919
to test that but we sort of ran out of

652
00:25:31,919 --> 00:25:33,039
time and

653
00:25:33,039 --> 00:25:36,080
um uh yeah i don't i

654
00:25:36,080 --> 00:25:38,000
i don't i'm a little bit skeptical that

655
00:25:38,000 --> 00:25:40,000
refused is the is the best thing

656
00:25:40,000 --> 00:25:43,760
you know in terms of uh

657
00:25:43,760 --> 00:25:45,919
high levels of traffic i'm concerned

658
00:25:45,919 --> 00:25:47,200
about that as well

659
00:25:47,200 --> 00:25:48,720
but i haven't i haven't seen anybody

660
00:25:48,720 --> 00:25:52,880
insert fake uh authorities either

661
00:25:52,880 --> 00:25:55,440
okay and we'll close the question q uh

662
00:25:55,440 --> 00:25:57,039
robert edmonds has asked

663
00:25:57,039 --> 00:25:59,679
was this spot next a lot of traffic to

664
00:25:59,679 --> 00:26:00,880
the roots tlds

665
00:26:00,880 --> 00:26:02,559
or did it get sinkhole just because it

666
00:26:02,559 --> 00:26:05,200
was interesting

667
00:26:05,200 --> 00:26:08,559
um it was sending um enough tr

668
00:26:08,559 --> 00:26:10,159
so i don't i don't actually know about

669
00:26:10,159 --> 00:26:13,600
the the well so for the rtlds4.coma.net

670
00:26:13,600 --> 00:26:16,720
it was sending enough traffic that uh

671
00:26:16,720 --> 00:26:19,039
we found it kind of annoying and wanted

672
00:26:19,039 --> 00:26:20,799
to move it off of those servers we

673
00:26:20,799 --> 00:26:21,760
wanted to you know

674
00:26:21,760 --> 00:26:24,799
take some of that traffic away so

675
00:26:24,799 --> 00:26:26,159
yeah it was it was it was not just

676
00:26:26,159 --> 00:26:27,440
because it was interesting it was

677
00:26:27,440 --> 00:26:28,400
because it was also

678
00:26:28,400 --> 00:26:31,679
an annoying amount of traffic okay and

679
00:26:31,679 --> 00:26:33,840
the last question from han zhang

680
00:26:33,840 --> 00:26:35,760
do you think these two botnets may

681
00:26:35,760 --> 00:26:39,840
belong to existing botnet families

682
00:26:40,159 --> 00:26:42,640
as far as i know no i think this is sort

683
00:26:42,640 --> 00:26:43,760
of a standalone

684
00:26:43,760 --> 00:26:47,919
uh botnet with just two variants

685
00:26:48,640 --> 00:26:52,240
perfect all right uh

686
00:26:52,240 --> 00:26:53,520
thank you very much train for your

687
00:26:53,520 --> 00:26:56,799
presentation my pleasure

688
00:26:56,799 --> 00:27:00,159
and um we will move on to uh casey

689
00:27:00,159 --> 00:27:00,880
decchio

690
00:27:00,880 --> 00:27:03,919
uh presentation is uh behind closed

691
00:27:03,919 --> 00:27:06,000
doors a network tale of spoofing

692
00:27:06,000 --> 00:27:09,600
intrusion and false dns security

693
00:27:09,600 --> 00:27:12,480
i'd just like to remind everyone that

694
00:27:12,480 --> 00:27:15,360
you can use our mattermost workshop chat

695
00:27:15,360 --> 00:27:18,799
for discussions and our

696
00:27:18,799 --> 00:27:21,200
as you saw for question asking the q and

697
00:27:21,200 --> 00:27:22,159
a pull

698
00:27:22,159 --> 00:27:24,799
and or the uh raising of hands to ask

699
00:27:24,799 --> 00:27:26,799
questions

700
00:27:26,799 --> 00:27:29,200
well everyone uh my name is casey decio

701
00:27:29,200 --> 00:27:30,640
and um

702
00:27:30,640 --> 00:27:32,320
my type my talk is entitled behind

703
00:27:32,320 --> 00:27:33,919
closed doors

704
00:27:33,919 --> 00:27:36,480
this was done in collaboration with

705
00:27:36,480 --> 00:27:37,520
students and

706
00:27:37,520 --> 00:27:40,320
colleagues at brigham young university

707
00:27:40,320 --> 00:27:41,760
so first of all

708
00:27:41,760 --> 00:27:44,000
we often think about access control on

709
00:27:44,000 --> 00:27:45,279
the internet

710
00:27:45,279 --> 00:27:47,279
the idea that with the firewall we might

711
00:27:47,279 --> 00:27:48,960
allow traffic from

712
00:27:48,960 --> 00:27:50,880
one source but we might deny traffic

713
00:27:50,880 --> 00:27:52,320
from another source because we don't

714
00:27:52,320 --> 00:27:54,080
trust that other source

715
00:27:54,080 --> 00:27:55,760
but of course the big problem on the

716
00:27:55,760 --> 00:27:57,760
internet is that identity is not really

717
00:27:57,760 --> 00:27:59,200
what we think it is

718
00:27:59,200 --> 00:28:02,240
when some packet is received by bob bob

719
00:28:02,240 --> 00:28:03,679
and it looks like it's from alice

720
00:28:03,679 --> 00:28:06,080
bob oftentimes has to simply trust us

721
00:28:06,080 --> 00:28:07,440
from alice now of course there are some

722
00:28:07,440 --> 00:28:08,320
higher level

723
00:28:08,320 --> 00:28:10,720
higher level protocols which help with

724
00:28:10,720 --> 00:28:11,360
that

725
00:28:11,360 --> 00:28:12,799
but at least at the packet level

726
00:28:12,799 --> 00:28:14,880
initially bob has to

727
00:28:14,880 --> 00:28:17,919
to assume that it's from alice um but

728
00:28:17,919 --> 00:28:18,640
what if

729
00:28:18,640 --> 00:28:20,159
that packet actually originated from

730
00:28:20,159 --> 00:28:21,840
mallory instead

731
00:28:21,840 --> 00:28:24,799
and um came with where mallory spoofed

732
00:28:24,799 --> 00:28:26,720
alice's source and so when it arrived at

733
00:28:26,720 --> 00:28:27,520
bob

734
00:28:27,520 --> 00:28:30,559
bob had no other choice but to to accept

735
00:28:30,559 --> 00:28:31,679
that packet

736
00:28:31,679 --> 00:28:33,440
and of course when the response goes

737
00:28:33,440 --> 00:28:34,880
back it goes to alice we call this

738
00:28:34,880 --> 00:28:36,320
reflection

739
00:28:36,320 --> 00:28:38,799
okay now we can extend this model and

740
00:28:38,799 --> 00:28:40,880
talk about insider trust of course when

741
00:28:40,880 --> 00:28:42,880
you think about inside a network

742
00:28:42,880 --> 00:28:45,679
where bob is a server alice is a client

743
00:28:45,679 --> 00:28:47,279
in this model you'd think bob would

744
00:28:47,279 --> 00:28:48,080
inherently trust

745
00:28:48,080 --> 00:28:50,799
clients including alice that are within

746
00:28:50,799 --> 00:28:52,399
his own network

747
00:28:52,399 --> 00:28:54,320
and um they're more inclined to trust

748
00:28:54,320 --> 00:28:56,000
those those insiders

749
00:28:56,000 --> 00:28:57,919
but what if the same thing happened

750
00:28:57,919 --> 00:28:59,919
where mallory some from some outside

751
00:28:59,919 --> 00:29:00,799
network

752
00:29:00,799 --> 00:29:03,279
now spoofed a packet claiming to be from

753
00:29:03,279 --> 00:29:04,080
alice

754
00:29:04,080 --> 00:29:06,080
which then crossed the internet entered

755
00:29:06,080 --> 00:29:08,640
that network boundary and arrived at bob

756
00:29:08,640 --> 00:29:10,880
that would be problematic now there are

757
00:29:10,880 --> 00:29:12,080
two places

758
00:29:12,080 --> 00:29:15,200
where you can guard against this type of

759
00:29:15,200 --> 00:29:17,840
uh attack and intrusion and the first

760
00:29:17,840 --> 00:29:18,960
site is uh

761
00:29:18,960 --> 00:29:20,720
and both of these have to do with source

762
00:29:20,720 --> 00:29:22,320
address validation

763
00:29:22,320 --> 00:29:24,720
the first aspect and perspective of

764
00:29:24,720 --> 00:29:26,000
source address validation

765
00:29:26,000 --> 00:29:27,520
is that which is found at the origin

766
00:29:27,520 --> 00:29:29,039
where the packet originates

767
00:29:29,039 --> 00:29:31,200
and so we're we'll refer to this as

768
00:29:31,200 --> 00:29:32,480
origin side source

769
00:29:32,480 --> 00:29:36,159
address uh validation or osav

770
00:29:36,159 --> 00:29:39,200
and this is covered by bcp38 the idea is

771
00:29:39,200 --> 00:29:40,399
that you shouldn't let it packet out of

772
00:29:40,399 --> 00:29:41,200
your network

773
00:29:41,200 --> 00:29:43,120
if the source address does not originate

774
00:29:43,120 --> 00:29:44,720
from within your network

775
00:29:44,720 --> 00:29:47,679
but the other aspect is destination side

776
00:29:47,679 --> 00:29:49,440
source address validation the idea is

777
00:29:49,440 --> 00:29:51,200
when a packet is coming in

778
00:29:51,200 --> 00:29:53,039
that claims to have originated from

779
00:29:53,039 --> 00:29:54,559
within your network you also shouldn't

780
00:29:54,559 --> 00:29:55,600
let that packet in

781
00:29:55,600 --> 00:29:58,399
because it obviously came from outside

782
00:29:58,399 --> 00:30:00,640
and there are some safeguards

783
00:30:00,640 --> 00:30:05,279
against this type of thing within bcp84

784
00:30:05,279 --> 00:30:08,320
and by the way a key aspect here is that

785
00:30:08,320 --> 00:30:11,039
bcp38 and osav really is meant to

786
00:30:11,039 --> 00:30:11,600
protect

787
00:30:11,600 --> 00:30:13,600
others from traffic that originates from

788
00:30:13,600 --> 00:30:14,720
within your network

789
00:30:14,720 --> 00:30:17,760
whereas dsav

790
00:30:17,760 --> 00:30:20,960
on the destination side any safeguards

791
00:30:20,960 --> 00:30:23,039
you take there really protect yourself

792
00:30:23,039 --> 00:30:24,320
and so there is sort of this

793
00:30:24,320 --> 00:30:26,559
incentive model of as to what actually

794
00:30:26,559 --> 00:30:27,919
protects self

795
00:30:27,919 --> 00:30:31,200
and the stronger um incentive is on the

796
00:30:31,200 --> 00:30:32,799
destination side source address

797
00:30:32,799 --> 00:30:33,600
validation

798
00:30:33,600 --> 00:30:35,360
so our research question is how

799
00:30:35,360 --> 00:30:37,840
prevalent is the practice of destination

800
00:30:37,840 --> 00:30:38,480
side source

801
00:30:38,480 --> 00:30:41,520
address validation now of course the the

802
00:30:41,520 --> 00:30:43,120
way the dns works it really

803
00:30:43,120 --> 00:30:45,120
facilitates an experiment like this to

804
00:30:45,120 --> 00:30:47,279
better understand what sorts of

805
00:30:47,279 --> 00:30:49,520
safeguards are being deployed out there

806
00:30:49,520 --> 00:30:50,559
because

807
00:30:50,559 --> 00:30:52,559
it operates over udp and it really just

808
00:30:52,559 --> 00:30:54,240
takes a single packet

809
00:30:54,240 --> 00:30:57,200
being received by a recursive resolver

810
00:30:57,200 --> 00:30:57,919
for it to

811
00:30:57,919 --> 00:31:00,480
go and do its work in terms of

812
00:31:00,480 --> 00:31:02,080
resolution by contacting authoritative

813
00:31:02,080 --> 00:31:02,720
servers

814
00:31:02,720 --> 00:31:04,720
and then of course the response come

815
00:31:04,720 --> 00:31:06,720
back comes back but only takes that one

816
00:31:06,720 --> 00:31:07,200
packet

817
00:31:07,200 --> 00:31:09,760
one trusted packet a recursive resolver

818
00:31:09,760 --> 00:31:11,919
to make all that happen

819
00:31:11,919 --> 00:31:14,559
so here's how we set up our experiment

820
00:31:14,559 --> 00:31:17,039
we had over on the left hand side

821
00:31:17,039 --> 00:31:20,080
our experiment architecture okay with

822
00:31:20,080 --> 00:31:21,440
our sending client

823
00:31:21,440 --> 00:31:23,679
and then a target network on the right

824
00:31:23,679 --> 00:31:24,960
hand side

825
00:31:24,960 --> 00:31:27,679
with a destination recursive resolver

826
00:31:27,679 --> 00:31:28,960
with some address

827
00:31:28,960 --> 00:31:30,640
and then we also had an authoritative

828
00:31:30,640 --> 00:31:32,720
server for a domain that we controlled

829
00:31:32,720 --> 00:31:35,760
over in our experiment infrastructure

830
00:31:35,760 --> 00:31:38,720
so the idea then is that we would take

831
00:31:38,720 --> 00:31:39,360
we would send

832
00:31:39,360 --> 00:31:42,960
issue some query to a given

833
00:31:42,960 --> 00:31:44,640
recursive resolver and some foreign

834
00:31:44,640 --> 00:31:47,600
network with a spoof source address

835
00:31:47,600 --> 00:31:49,440
such that when the packet arrived it

836
00:31:49,440 --> 00:31:51,519
looked like it would look like it came

837
00:31:51,519 --> 00:31:52,799
from something within

838
00:31:52,799 --> 00:31:54,640
the same network as the recursive

839
00:31:54,640 --> 00:31:56,240
resolver now

840
00:31:56,240 --> 00:31:58,399
if that actually passed the access

841
00:31:58,399 --> 00:31:59,440
control list

842
00:31:59,440 --> 00:32:01,840
and the recursive resolver operated on

843
00:32:01,840 --> 00:32:03,760
that

844
00:32:03,760 --> 00:32:05,919
that query that came in then it would

845
00:32:05,919 --> 00:32:07,760
issue a query to our authoritative dns

846
00:32:07,760 --> 00:32:08,480
server

847
00:32:08,480 --> 00:32:11,039
and we would issue a response back and

848
00:32:11,039 --> 00:32:12,399
then at that point the recursive

849
00:32:12,399 --> 00:32:14,000
resolver will return a response to

850
00:32:14,000 --> 00:32:16,960
the falsified source we have we wouldn't

851
00:32:16,960 --> 00:32:18,559
see that or know anything about it but

852
00:32:18,559 --> 00:32:20,399
at that point it wouldn't matter

853
00:32:20,399 --> 00:32:22,320
we would know it had been reached by the

854
00:32:22,320 --> 00:32:23,919
fact that we saw a query

855
00:32:23,919 --> 00:32:26,880
at our authoritative server okay so

856
00:32:26,880 --> 00:32:28,000
that's the gist of of

857
00:32:28,000 --> 00:32:31,440
the experiment okay

858
00:32:31,440 --> 00:32:34,720
and um so in terms of identifying uh the

859
00:32:34,720 --> 00:32:35,519
targets

860
00:32:35,519 --> 00:32:37,360
uh the target destinations and then the

861
00:32:37,360 --> 00:32:39,120
sources we used first of all

862
00:32:39,120 --> 00:32:42,480
um so we used um dns clients that were

863
00:32:42,480 --> 00:32:44,240
extracted from 48 hours of

864
00:32:44,240 --> 00:32:48,080
root server queries in april 2019

865
00:32:48,080 --> 00:32:50,480
and from these queries we extracted

866
00:32:50,480 --> 00:32:51,200
about

867
00:32:51,200 --> 00:32:55,039
11 million ipv4 addresses from about 54

868
00:32:55,039 --> 00:32:56,640
000 autonomous systems

869
00:32:56,640 --> 00:32:59,200
and about 800 000 ipv6 addresses from

870
00:32:59,200 --> 00:32:59,840
about 8

871
00:32:59,840 --> 00:33:03,120
000 ipv6 um autonomous systems

872
00:33:03,120 --> 00:33:05,039
okay but in terms of sources what we

873
00:33:05,039 --> 00:33:06,399
used um

874
00:33:06,399 --> 00:33:08,799
so we used five categories of sources

875
00:33:08,799 --> 00:33:09,679
that we sent

876
00:33:09,679 --> 00:33:12,799
source ip addresses um that we

877
00:33:12,799 --> 00:33:15,519
uh from which we crafted queries to go

878
00:33:15,519 --> 00:33:17,039
to these destinations

879
00:33:17,039 --> 00:33:19,039
and so the first category is what we

880
00:33:19,039 --> 00:33:20,080
called

881
00:33:20,080 --> 00:33:22,640
other prefix and and that was the idea

882
00:33:22,640 --> 00:33:23,200
that

883
00:33:23,200 --> 00:33:25,760
within that asn it was announcing a

884
00:33:25,760 --> 00:33:27,360
bunch of prefix

885
00:33:27,360 --> 00:33:29,919
address space and so we selected about

886
00:33:29,919 --> 00:33:31,840
97 addresses

887
00:33:31,840 --> 00:33:35,360
from different slash 24 or for ipv64

888
00:33:35,360 --> 00:33:36,240
prefixes

889
00:33:36,240 --> 00:33:38,320
within that same um that were announced

890
00:33:38,320 --> 00:33:40,640
by that same asn but weren't the same

891
00:33:40,640 --> 00:33:44,159
slash 24 or same 64

892
00:33:44,159 --> 00:33:47,760
as the target ip address itself

893
00:33:47,760 --> 00:33:49,919
we did also announce um in the same

894
00:33:49,919 --> 00:33:51,600
prefix category one or sorry not

895
00:33:51,600 --> 00:33:52,320
announced

896
00:33:52,320 --> 00:33:55,120
we sent um a query claiming to be from

897
00:33:55,120 --> 00:33:56,799
one address within the same

898
00:33:56,799 --> 00:34:00,159
24 or same 64 prefix um

899
00:34:00,159 --> 00:34:02,640
and then we also sent a packet claiming

900
00:34:02,640 --> 00:34:03,279
to be

901
00:34:03,279 --> 00:34:07,120
from private address space so 192 168

902
00:34:07,120 --> 00:34:08,879
and fc00 that actually should have been

903
00:34:08,879 --> 00:34:10,480
fd00

904
00:34:10,480 --> 00:34:12,879
from from that address space and then uh

905
00:34:12,879 --> 00:34:14,560
we also sent a packet

906
00:34:14,560 --> 00:34:16,879
uh from using a source address that was

907
00:34:16,879 --> 00:34:18,719
the same as the destination address so

908
00:34:18,719 --> 00:34:19,760
that's sort of like

909
00:34:19,760 --> 00:34:22,960
receiving a letter from yourself um and

910
00:34:22,960 --> 00:34:23,440
uh

911
00:34:23,440 --> 00:34:25,520
and actually processing it and then uh

912
00:34:25,520 --> 00:34:26,879
finally we sent queries

913
00:34:26,879 --> 00:34:30,320
uh from the loopback ip address just

914
00:34:30,320 --> 00:34:31,839
sort of to see if if anything would

915
00:34:31,839 --> 00:34:34,000
actually pass at that point

916
00:34:34,000 --> 00:34:36,079
and um so let's let's take a look at the

917
00:34:36,079 --> 00:34:39,440
some of the results that we got

918
00:34:39,839 --> 00:34:41,760
so first of all in terms of reachability

919
00:34:41,760 --> 00:34:44,000
we we looked at two things uh both on

920
00:34:44,000 --> 00:34:46,480
the ipv4 side and the ipv6 side and and

921
00:34:46,480 --> 00:34:46,800
so

922
00:34:46,800 --> 00:34:50,639
did our query even make it there and

923
00:34:50,639 --> 00:34:52,639
we saw in terms of addresses and in

924
00:34:52,639 --> 00:34:53,679
terms of networks

925
00:34:53,679 --> 00:34:55,359
uh we measured these things so we saw

926
00:34:55,359 --> 00:34:57,680
about you know close to five percent of

927
00:34:57,680 --> 00:34:59,599
of destination addresses received to

928
00:34:59,599 --> 00:35:00,720
query

929
00:35:00,720 --> 00:35:04,800
but about half of um destination

930
00:35:04,800 --> 00:35:07,440
autonomous systems included at least one

931
00:35:07,440 --> 00:35:09,920
responsive ipv4 address which was

932
00:35:09,920 --> 00:35:11,359
actually really surprising that was very

933
00:35:11,359 --> 00:35:14,560
high to us um and then on the ipv6 side

934
00:35:14,560 --> 00:35:16,160
it was very similar it's right at 50

935
00:35:16,160 --> 00:35:18,480
percent of asn's that included a

936
00:35:18,480 --> 00:35:19,599
responsive

937
00:35:19,599 --> 00:35:21,760
ipv6 address in other words one that was

938
00:35:21,760 --> 00:35:24,160
reached uh by one of our spoof source

939
00:35:24,160 --> 00:35:25,200
queries

940
00:35:25,200 --> 00:35:27,280
by the fact that it gave a query to our

941
00:35:27,280 --> 00:35:29,200
authoritative servers

942
00:35:29,200 --> 00:35:31,119
we also broke down broke this down just

943
00:35:31,119 --> 00:35:32,560
a little bit to see sort of

944
00:35:32,560 --> 00:35:34,000
the effectiveness of the different

945
00:35:34,000 --> 00:35:35,839
sources that were used that we were

946
00:35:35,839 --> 00:35:36,960
guessing because we had these

947
00:35:36,960 --> 00:35:39,680
these five categories um one of the ones

948
00:35:39,680 --> 00:35:41,599
that stood out was the fact that

949
00:35:41,599 --> 00:35:45,920
um 70 of the reachable ipv6 addresses

950
00:35:45,920 --> 00:35:48,400
um were reachable so in other words when

951
00:35:48,400 --> 00:35:49,200
we reached

952
00:35:49,200 --> 00:35:51,599
uh all out of all the ipv6 addresses

953
00:35:51,599 --> 00:35:52,560
that we reached

954
00:35:52,560 --> 00:35:55,760
70 of those were reached reachable by

955
00:35:55,760 --> 00:35:57,760
that destination a source where we had

956
00:35:57,760 --> 00:35:59,040
the same um

957
00:35:59,040 --> 00:36:00,560
source address as the destination

958
00:36:00,560 --> 00:36:02,320
address which was really surprising

959
00:36:02,320 --> 00:36:03,920
but you'll see why that was as i get a

960
00:36:03,920 --> 00:36:06,160
little bit later in the presentation

961
00:36:06,160 --> 00:36:08,400
um also interesting when we broke down

962
00:36:08,400 --> 00:36:09,920
now some of the details are in our

963
00:36:09,920 --> 00:36:12,880
our paper um so just to show you some of

964
00:36:12,880 --> 00:36:13,680
this here

965
00:36:13,680 --> 00:36:17,040
um so in terms of exclusive reach

966
00:36:17,040 --> 00:36:17,760
meaning

967
00:36:17,760 --> 00:36:22,240
if if if you were only using this like

968
00:36:22,240 --> 00:36:24,160
if you excluded all their sources and

969
00:36:24,160 --> 00:36:25,200
and this was

970
00:36:25,200 --> 00:36:27,200
this would be the category that helped

971
00:36:27,200 --> 00:36:29,440
uh bring in some of these these sources

972
00:36:29,440 --> 00:36:30,240
we found that

973
00:36:30,240 --> 00:36:33,200
uh 33 of ipv4 addresses were only there

974
00:36:33,200 --> 00:36:34,960
because we used this other prefix

975
00:36:34,960 --> 00:36:36,079
category

976
00:36:36,079 --> 00:36:39,040
um and interestingly um the destination

977
00:36:39,040 --> 00:36:41,040
is source category in the ipv6 side

978
00:36:41,040 --> 00:36:42,160
which i just mentioned

979
00:36:42,160 --> 00:36:44,880
uh almost 10 of those uh they were only

980
00:36:44,880 --> 00:36:45,839
reachable

981
00:36:45,839 --> 00:36:48,160
um because we used the destination

982
00:36:48,160 --> 00:36:49,920
destination as source

983
00:36:49,920 --> 00:36:52,480
um uh because they didn't those 10

984
00:36:52,480 --> 00:36:53,920
percent didn't get hit by the other

985
00:36:53,920 --> 00:36:54,720
prefix

986
00:36:54,720 --> 00:36:56,960
or the same prefix sources uh it was

987
00:36:56,960 --> 00:36:57,760
just because

988
00:36:57,760 --> 00:36:59,119
somebody allowed something in from a

989
00:36:59,119 --> 00:37:01,359
loopback address okay

990
00:37:01,359 --> 00:37:03,680
um let's see loopback address uh there

991
00:37:03,680 --> 00:37:04,560
were 22

992
00:37:04,560 --> 00:37:07,200
loopback excuse me 22 addresses that we

993
00:37:07,200 --> 00:37:07,839
found

994
00:37:07,839 --> 00:37:11,440
simply because um because we sent

995
00:37:11,440 --> 00:37:13,920
uh sources queries from the loopback

996
00:37:13,920 --> 00:37:14,800
address

997
00:37:14,800 --> 00:37:16,079
okay we wanted to learn a little bit

998
00:37:16,079 --> 00:37:18,320
more about these resolvers

999
00:37:18,320 --> 00:37:20,320
that we were actually hitting and so

1000
00:37:20,320 --> 00:37:22,160
after we determined that a resolver was

1001
00:37:22,160 --> 00:37:23,280
reachable through our

1002
00:37:23,280 --> 00:37:25,280
source queries we sent 10 follow-up

1003
00:37:25,280 --> 00:37:28,079
queries uh to each of these and um that

1004
00:37:28,079 --> 00:37:29,599
resulted in 10

1005
00:37:29,599 --> 00:37:31,280
recursive to authoritative queries to

1006
00:37:31,280 --> 00:37:32,720
our authoritative server

1007
00:37:32,720 --> 00:37:34,800
so what we did with those we took the

1008
00:37:34,800 --> 00:37:36,000
the raw list of source

1009
00:37:36,000 --> 00:37:38,400
ports um that came from those queries

1010
00:37:38,400 --> 00:37:40,320
and then we sorted those now this is a

1011
00:37:40,320 --> 00:37:42,400
simplified version we're using just five

1012
00:37:42,400 --> 00:37:44,400
uh ports here instead of the 10 that we

1013
00:37:44,400 --> 00:37:45,920
did we sorted those

1014
00:37:45,920 --> 00:37:48,160
ports and then we took the maximum minus

1015
00:37:48,160 --> 00:37:49,040
the minimum

1016
00:37:49,040 --> 00:37:52,320
and that gave us a range okay and so we

1017
00:37:52,320 --> 00:37:53,599
just wanted to sort of look at this

1018
00:37:53,599 --> 00:37:55,280
range that was being used um

1019
00:37:55,280 --> 00:37:56,960
and and plot this out and here's what we

1020
00:37:56,960 --> 00:37:59,839
got when we plotted this

1021
00:37:59,839 --> 00:38:03,280
you have only four more minutes to qna

1022
00:38:03,280 --> 00:38:06,160
thank you okay so so you can see there's

1023
00:38:06,160 --> 00:38:06,720
a few

1024
00:38:06,720 --> 00:38:08,960
uh modes within these graphs that sort

1025
00:38:08,960 --> 00:38:10,320
of jumped out at us

1026
00:38:10,320 --> 00:38:12,160
um and and i'm going to focus first of

1027
00:38:12,160 --> 00:38:13,440
all on on this

1028
00:38:13,440 --> 00:38:15,760
um you know this aspect over here where

1029
00:38:15,760 --> 00:38:17,200
we had a zero port range

1030
00:38:17,200 --> 00:38:18,960
now if you see a port range of zero that

1031
00:38:18,960 --> 00:38:20,480
means they answered from

1032
00:38:20,480 --> 00:38:23,280
the same port every single time which of

1033
00:38:23,280 --> 00:38:24,800
course means that there is no source

1034
00:38:24,800 --> 00:38:25,280
port

1035
00:38:25,280 --> 00:38:27,280
randomization at all because there is no

1036
00:38:27,280 --> 00:38:29,520
uh change in source ports at all

1037
00:38:29,520 --> 00:38:32,480
okay this affected uh almost 4 000

1038
00:38:32,480 --> 00:38:34,160
resolvers and of course these are

1039
00:38:34,160 --> 00:38:35,839
uh more vulnerable to cash poisoning

1040
00:38:35,839 --> 00:38:37,599
because of that and in part because

1041
00:38:37,599 --> 00:38:38,880
they're reachable through this

1042
00:38:38,880 --> 00:38:42,160
spoof source um uh

1043
00:38:42,160 --> 00:38:45,200
vulnerability um and and let's see um

1044
00:38:45,200 --> 00:38:46,320
i'm not going to go through the rest of

1045
00:38:46,320 --> 00:38:48,079
this for the sake of time but i'm happy

1046
00:38:48,079 --> 00:38:50,079
to answer questions about that later

1047
00:38:50,079 --> 00:38:53,440
okay um so let's

1048
00:38:53,440 --> 00:38:54,880
move along then we wanted to learn

1049
00:38:54,880 --> 00:38:56,800
something else about these uh these

1050
00:38:56,800 --> 00:38:57,440
other

1051
00:38:57,440 --> 00:39:00,720
um sort of high frequency modes that we

1052
00:39:00,720 --> 00:39:01,520
saw in this

1053
00:39:01,520 --> 00:39:03,520
in this plot and by the way this lower

1054
00:39:03,520 --> 00:39:04,800
plot here is a

1055
00:39:04,800 --> 00:39:06,320
actually a zoomed in version of the

1056
00:39:06,320 --> 00:39:08,160
upper plot but what we found was

1057
00:39:08,160 --> 00:39:08,720
different

1058
00:39:08,720 --> 00:39:10,880
um operating systems when the dns

1059
00:39:10,880 --> 00:39:12,000
software

1060
00:39:12,000 --> 00:39:14,160
uses the the femoral source port range

1061
00:39:14,160 --> 00:39:16,400
of a given operating system

1062
00:39:16,400 --> 00:39:20,079
then um there's a probability

1063
00:39:20,079 --> 00:39:21,520
a high probability that it'll fall

1064
00:39:21,520 --> 00:39:23,760
within a certain range so for example

1065
00:39:23,760 --> 00:39:25,119
linux will fall within this range

1066
00:39:25,119 --> 00:39:29,040
because it has a certain um

1067
00:39:29,040 --> 00:39:31,520
what's the word certain size a certain

1068
00:39:31,520 --> 00:39:32,560
pool of ephemeral

1069
00:39:32,560 --> 00:39:34,640
source ports and same thing with freebsd

1070
00:39:34,640 --> 00:39:36,000
this is the range that you would expect

1071
00:39:36,000 --> 00:39:36,960
to see

1072
00:39:36,960 --> 00:39:39,359
windows is down here it has about a

1073
00:39:39,359 --> 00:39:41,119
source port range of about

1074
00:39:41,119 --> 00:39:43,760
uh 2500 by default and then there's some

1075
00:39:43,760 --> 00:39:44,640
systems that

1076
00:39:44,640 --> 00:39:47,280
uh some software that don't actually use

1077
00:39:47,280 --> 00:39:48,640
the os source port

1078
00:39:48,640 --> 00:39:50,560
ephemeral source port range and so those

1079
00:39:50,560 --> 00:39:52,720
would be they use the full range instead

1080
00:39:52,720 --> 00:39:54,079
and they would be down here and of

1081
00:39:54,079 --> 00:39:55,520
course for those we can't identify

1082
00:39:55,520 --> 00:39:56,480
operating system

1083
00:39:56,480 --> 00:39:58,160
but the cool thing is then we can

1084
00:39:58,160 --> 00:39:59,599
actually look back at these

1085
00:39:59,599 --> 00:40:02,880
uh queries that we got and we can see

1086
00:40:02,880 --> 00:40:05,200
um sorry the the follow-up queries from

1087
00:40:05,200 --> 00:40:06,319
the different resolvers and we can

1088
00:40:06,319 --> 00:40:07,839
actually identify different operating

1089
00:40:07,839 --> 00:40:08,560
systems

1090
00:40:08,560 --> 00:40:10,400
so we can see the the number of windows

1091
00:40:10,400 --> 00:40:12,079
systems that showed up here

1092
00:40:12,079 --> 00:40:13,920
um the different uh linux systems the

1093
00:40:13,920 --> 00:40:15,599
number of linux systems and freebsd that

1094
00:40:15,599 --> 00:40:16,480
showed up here

1095
00:40:16,480 --> 00:40:18,160
and of course these ones uh because

1096
00:40:18,160 --> 00:40:19,359
they're using the full source printer

1097
00:40:19,359 --> 00:40:19,599
and

1098
00:40:19,599 --> 00:40:23,119
we can't um uh identify a given

1099
00:40:23,119 --> 00:40:24,000
operating system

1100
00:40:24,000 --> 00:40:25,359
but it was sort of interesting to break

1101
00:40:25,359 --> 00:40:26,720
that down and the full numbers are in

1102
00:40:26,720 --> 00:40:28,000
our paper

1103
00:40:28,000 --> 00:40:29,280
um and then the last thing that i'll

1104
00:40:29,280 --> 00:40:31,599
mention here uh is that we did some lab

1105
00:40:31,599 --> 00:40:32,800
testing to

1106
00:40:32,800 --> 00:40:35,119
understand these last behaviors of hey

1107
00:40:35,119 --> 00:40:37,040
what happens when a packet is received

1108
00:40:37,040 --> 00:40:38,319
by a given system

1109
00:40:38,319 --> 00:40:41,119
and it has an address that claims to

1110
00:40:41,119 --> 00:40:41,760
have come

1111
00:40:41,760 --> 00:40:44,560
from that system like on an individual

1112
00:40:44,560 --> 00:40:45,440
computer

1113
00:40:45,440 --> 00:40:47,520
and um or or it claims to come from the

1114
00:40:47,520 --> 00:40:49,359
loopback so loop x interesting windows

1115
00:40:49,359 --> 00:40:50,000
server

1116
00:40:50,000 --> 00:40:52,960
2003 and 2003 r2 allow things in from

1117
00:40:52,960 --> 00:40:53,839
the loopback

1118
00:40:53,839 --> 00:40:57,680
on ipv4 um and linux earlier kernels um

1119
00:40:57,680 --> 00:40:58,640
so 2.6

1120
00:40:58,640 --> 00:41:01,680
3.3 and 4.4 um allow in

1121
00:41:01,680 --> 00:41:03,200
uh packets claiming to be front to

1122
00:41:03,200 --> 00:41:04,800
loopback ipv6

1123
00:41:04,800 --> 00:41:06,560
ipv6 loopback so that's super

1124
00:41:06,560 --> 00:41:08,400
interesting um and also

1125
00:41:08,400 --> 00:41:11,200
uh of note here all of the operating

1126
00:41:11,200 --> 00:41:13,200
systems on the ipv6 side

1127
00:41:13,200 --> 00:41:16,160
allow in a packet that has the same

1128
00:41:16,160 --> 00:41:17,920
source address as the destination

1129
00:41:17,920 --> 00:41:18,640
address

1130
00:41:18,640 --> 00:41:20,240
um and and so the kernel is actually

1131
00:41:20,240 --> 00:41:22,560
allowing those in and passing them up

1132
00:41:22,560 --> 00:41:25,119
to the uh application layer which was

1133
00:41:25,119 --> 00:41:27,839
actually really surprising to us

1134
00:41:27,839 --> 00:41:30,240
freebsd windows server uh and all

1135
00:41:30,240 --> 00:41:31,200
windows server

1136
00:41:31,200 --> 00:41:34,079
also did that on the ipv4 side okay so

1137
00:41:34,079 --> 00:41:35,599
just in summary

1138
00:41:35,599 --> 00:41:37,119
the source address of network packets

1139
00:41:37,119 --> 00:41:40,480
can't be trusted we tested uh

1140
00:41:40,480 --> 00:41:42,560
dsav and found it to be lacking in half

1141
00:41:42,560 --> 00:41:44,160
of measured networks

1142
00:41:44,160 --> 00:41:46,880
uh and and just in in summary we have

1143
00:41:46,880 --> 00:41:48,880
done some reach out and uh there's also

1144
00:41:48,880 --> 00:41:50,160
a self-test tool

1145
00:41:50,160 --> 00:41:52,000
that you can visit right here that's

1146
00:41:52,000 --> 00:41:53,280
live it's sort of

1147
00:41:53,280 --> 00:41:55,040
beta we're trying it out and you're

1148
00:41:55,040 --> 00:41:56,800
welcome to go there um

1149
00:41:56,800 --> 00:41:58,480
thanks so much and i'm happy to take any

1150
00:41:58,480 --> 00:42:00,880
questions

1151
00:42:01,520 --> 00:42:04,079
thank you casey uh at this time i'd like

1152
00:42:04,079 --> 00:42:05,920
to remind everyone that you can

1153
00:42:05,920 --> 00:42:09,200
rate this talk uh a poll will pop up

1154
00:42:09,200 --> 00:42:10,160
shortly

1155
00:42:10,160 --> 00:42:12,560
and uh if you'd like to ask questions of

1156
00:42:12,560 --> 00:42:15,280
casey uh please do so in the q a panel

1157
00:42:15,280 --> 00:42:18,720
and or by raising your hand

1158
00:42:19,920 --> 00:42:21,839
i don't see any questions yet so casey

1159
00:42:21,839 --> 00:42:22,960
um have we

1160
00:42:22,960 --> 00:42:26,400
reached out to the maintainers of those

1161
00:42:26,400 --> 00:42:28,800
operating systems to try to understand

1162
00:42:28,800 --> 00:42:32,000
why the uh there are differences both

1163
00:42:32,000 --> 00:42:32,800
between

1164
00:42:32,800 --> 00:42:36,480
i guess v4 and v6 uh origin routes

1165
00:42:36,480 --> 00:42:40,079
or or um uh you know destination as

1166
00:42:40,079 --> 00:42:41,680
source routes

1167
00:42:41,680 --> 00:42:43,359
yes are you talking about this slide

1168
00:42:43,359 --> 00:42:44,880
right here correct yes

1169
00:42:44,880 --> 00:42:48,160
yeah um so that is still underway

1170
00:42:48,160 --> 00:42:50,800
um but uh but we have not gotten to the

1171
00:42:50,800 --> 00:42:52,400
point of actually making contact with

1172
00:42:52,400 --> 00:42:53,920
the kernel operators

1173
00:42:53,920 --> 00:42:55,359
we did have some reach out to network

1174
00:42:55,359 --> 00:42:57,440
operators um to to talk about some of

1175
00:42:57,440 --> 00:43:00,000
the behaviors that we found

1176
00:43:00,000 --> 00:43:03,599
interesting okay we have a question from

1177
00:43:03,599 --> 00:43:07,040
roland dobbins can you typify the types

1178
00:43:07,040 --> 00:43:08,880
of networks where these resolvers were

1179
00:43:08,880 --> 00:43:10,480
located and reachable

1180
00:43:10,480 --> 00:43:12,720
broadband access networks enterprises

1181
00:43:12,720 --> 00:43:17,119
idc's on large transit providers etc

1182
00:43:17,119 --> 00:43:19,839
yeah that's a great question um we

1183
00:43:19,839 --> 00:43:21,119
started going down that

1184
00:43:21,119 --> 00:43:23,200
that route and we we actually to be

1185
00:43:23,200 --> 00:43:25,359
honest we ran out of space for the

1186
00:43:25,359 --> 00:43:27,599
the um the part of the the analysis we

1187
00:43:27,599 --> 00:43:30,000
were doing and and i should say time

1188
00:43:30,000 --> 00:43:32,319
um and so we don't have anything

1189
00:43:32,319 --> 00:43:33,760
definitive there but we also wanted to

1190
00:43:33,760 --> 00:43:36,000
be careful about how we were

1191
00:43:36,000 --> 00:43:37,920
uh classifying things since this was

1192
00:43:37,920 --> 00:43:39,200
going out um

1193
00:43:39,200 --> 00:43:41,680
for a publication but the other thing

1194
00:43:41,680 --> 00:43:42,480
all

1195
00:43:42,480 --> 00:43:44,720
i will say one of the tricky parts of

1196
00:43:44,720 --> 00:43:46,480
this is isps

1197
00:43:46,480 --> 00:43:48,000
we're still finding that they don't have

1198
00:43:48,000 --> 00:43:50,720
an easy solution based on

1199
00:43:50,720 --> 00:43:52,079
some of the access control lists and

1200
00:43:52,079 --> 00:43:54,720
some of the ways that they have um

1201
00:43:54,720 --> 00:43:56,400
sort of third parties announce their

1202
00:43:56,400 --> 00:43:57,920
address space it makes it really tricky

1203
00:43:57,920 --> 00:43:59,280
to do traditional

1204
00:43:59,280 --> 00:44:03,040
um like bcp 84 type

1205
00:44:03,040 --> 00:44:04,560
fixes for this and that's that's

1206
00:44:04,560 --> 00:44:06,319
something that's ongoing as to how to

1207
00:44:06,319 --> 00:44:09,440
reach out and help them with this

1208
00:44:09,440 --> 00:44:11,839
okay our next uh question or an

1209
00:44:11,839 --> 00:44:14,000
observation from matthew lucky

1210
00:44:14,000 --> 00:44:16,720
uh freebsd has urpf that would solve

1211
00:44:16,720 --> 00:44:19,359
this but you have to turn it off

1212
00:44:19,359 --> 00:44:20,960
yeah like a number of things you do have

1213
00:44:20,960 --> 00:44:22,720
to turn that on that's right

1214
00:44:22,720 --> 00:44:26,480
yeah great great point thanks matthew

1215
00:44:26,960 --> 00:44:30,880
all right any other questions for casey

1216
00:44:31,599 --> 00:44:34,000
okay well thank you very much casey nope

1217
00:44:34,000 --> 00:44:36,480
i'm sorry one more question uh from han

1218
00:44:36,480 --> 00:44:37,359
zhang

1219
00:44:37,359 --> 00:44:41,359
uh in the spoofed uh ohar prefix

1220
00:44:41,359 --> 00:44:44,000
do you have some of these ips so you can

1221
00:44:44,000 --> 00:44:45,839
measure how many major

1222
00:44:45,839 --> 00:44:48,800
how many reachable resolvers sent to you

1223
00:44:48,800 --> 00:44:49,599
how many

1224
00:44:49,599 --> 00:44:53,760
reachable resolvers sent to you um

1225
00:44:53,760 --> 00:44:55,680
like i think you're asking did you did

1226
00:44:55,680 --> 00:44:57,680
we save what we did

1227
00:44:57,680 --> 00:44:59,839
is that what you're asking oh i'm sorry

1228
00:44:59,839 --> 00:45:01,440
so in the the spoofed

1229
00:45:01,440 --> 00:45:04,640
uh other prefixes right right

1230
00:45:04,640 --> 00:45:06,240
yeah i see what you're asking you're

1231
00:45:06,240 --> 00:45:07,839
getting back to some of our sources that

1232
00:45:07,839 --> 00:45:08,640
we use and i

1233
00:45:08,640 --> 00:45:10,319
i think are you asking did we save those

1234
00:45:10,319 --> 00:45:12,319
away is that right hon i'm not sure if

1235
00:45:12,319 --> 00:45:13,680
that's what you're asking or not

1236
00:45:13,680 --> 00:45:15,200
we did save all those we saved

1237
00:45:15,200 --> 00:45:17,040
everything that we that we did i'm not

1238
00:45:17,040 --> 00:45:18,240
sure if i'm answering your question

1239
00:45:18,240 --> 00:45:19,040
properly

1240
00:45:19,040 --> 00:45:21,040
because uh we wanted when we did some

1241
00:45:21,040 --> 00:45:22,400
reach out we wanted people to be able to

1242
00:45:22,400 --> 00:45:24,000
test and see if it was still

1243
00:45:24,000 --> 00:45:25,520
happening and so we we basically said

1244
00:45:25,520 --> 00:45:27,200
here's everything that triggered it

1245
00:45:27,200 --> 00:45:28,000
before

1246
00:45:28,000 --> 00:45:31,280
try it again um but maybe ask me offline

1247
00:45:31,280 --> 00:45:33,119
han if i didn't answer your question if

1248
00:45:33,119 --> 00:45:35,359
i didn't quite understand it

1249
00:45:35,359 --> 00:45:38,800
okay uh well close the the question line

1250
00:45:38,800 --> 00:45:41,440
uh brian dixon asked is anything about

1251
00:45:41,440 --> 00:45:43,599
this possible to test via white batlist

1252
00:45:43,599 --> 00:45:46,079
probes just wondering

1253
00:45:46,079 --> 00:45:48,319
uh i'm not a ripe atlas expert but i did

1254
00:45:48,319 --> 00:45:49,839
ask this a few years ago of

1255
00:45:49,839 --> 00:45:52,800
someone at ripe and i believe they told

1256
00:45:52,800 --> 00:45:55,680
me that spoofing sources was not

1257
00:45:55,680 --> 00:45:57,839
um a thing back then plus you have to

1258
00:45:57,839 --> 00:45:59,200
have to network they would do it right

1259
00:45:59,200 --> 00:46:00,240
so

1260
00:46:00,240 --> 00:46:02,640
my as a non-authoritative right person i

1261
00:46:02,640 --> 00:46:03,280
would say no

1262
00:46:03,280 --> 00:46:06,720
but i i don't know i i'd ask them

1263
00:46:06,720 --> 00:46:09,280
and matthew lucky asked uh curious if

1264
00:46:09,280 --> 00:46:11,280
you got any comments complaints about

1265
00:46:11,280 --> 00:46:12,880
moving mac addresses

1266
00:46:12,880 --> 00:46:15,200
log messages when you happen to use an

1267
00:46:15,200 --> 00:46:17,440
address in their network that is live

1268
00:46:17,440 --> 00:46:21,040
ooh uh no we didn't

1269
00:46:21,040 --> 00:46:22,640
in fact okay i'll i'm gonna answer this

1270
00:46:22,640 --> 00:46:25,920
more generically though we got very few

1271
00:46:25,920 --> 00:46:28,720
people that even noticed this at all

1272
00:46:28,720 --> 00:46:30,240
some people asked about the experiment

1273
00:46:30,240 --> 00:46:31,040
some people

1274
00:46:31,040 --> 00:46:33,280
asked to be opted out which we did one

1275
00:46:33,280 --> 00:46:35,119
person the most interesting when we

1276
00:46:35,119 --> 00:46:37,440
when we explained to this individual uh

1277
00:46:37,440 --> 00:46:38,720
what we were doing in the nature of the

1278
00:46:38,720 --> 00:46:40,240
experiment and the reason why

1279
00:46:40,240 --> 00:46:43,359
he said okay i want back in

1280
00:46:43,359 --> 00:46:45,760
which which we sort of loved so um not

1281
00:46:45,760 --> 00:46:47,280
everyone was like that but we only got

1282
00:46:47,280 --> 00:46:48,079
about five

1283
00:46:48,079 --> 00:46:50,720
uh five people that even noticed we were

1284
00:46:50,720 --> 00:46:52,160
doing it to be honest and this ran for

1285
00:46:52,160 --> 00:46:54,160
about four weeks to completion

1286
00:46:54,160 --> 00:46:57,280
um so

1287
00:46:57,280 --> 00:46:59,200
great questions thank you very much well

1288
00:46:59,200 --> 00:47:00,640
thank you very much

1289
00:47:00,640 --> 00:47:03,520
all right uh with this i'd like to uh

1290
00:47:03,520 --> 00:47:04,640
let you know of the

1291
00:47:04,640 --> 00:47:07,280
15-minute break we will restart again at

1292
00:47:07,280 --> 00:47:09,119
uh two o'clock am

1293
00:47:09,119 --> 00:47:13,280
utc um you should be reminded that

1294
00:47:13,280 --> 00:47:16,720
the uh the participants can use the

1295
00:47:16,720 --> 00:47:19,040
breakout rooms for face-to-face chat

1296
00:47:19,040 --> 00:47:22,000
uh this is enabled by spatial chat you

1297
00:47:22,000 --> 00:47:24,240
should have received a link

1298
00:47:24,240 --> 00:47:27,839
to access that

1299
00:47:28,079 --> 00:47:30,079
do not share your spatial chat link with

1300
00:47:30,079 --> 00:47:32,480
anyone else this is specific to you

1301
00:47:32,480 --> 00:47:34,160
and once again we'd like to thank the

1302
00:47:34,160 --> 00:47:35,680
workshop sponsors of

1303
00:47:35,680 --> 00:47:38,559
foresight security and verisign thank

1304
00:47:38,559 --> 00:47:40,000
you very much and see you in

1305
00:47:40,000 --> 00:47:43,599
approximately 14 minutes now

1306
00:47:45,440 --> 00:47:48,280
all right everyone uh welcome back to

1307
00:47:48,280 --> 00:47:49,440
orc35

1308
00:47:49,440 --> 00:47:53,839
day two session two i'd like to welcome

1309
00:47:53,839 --> 00:47:56,400
chris michelson to give his presentation

1310
00:47:56,400 --> 00:47:57,200
on dns

1311
00:47:57,200 --> 00:48:00,240
tab updates hello

1312
00:48:00,240 --> 00:48:02,800
i'm here today to talk about some recent

1313
00:48:02,800 --> 00:48:07,359
changes and some open work in dns tab

1314
00:48:09,520 --> 00:48:10,640
for those of you who aren't familiar

1315
00:48:10,640 --> 00:48:12,559
with the dns tab a quick recap of what

1316
00:48:12,559 --> 00:48:14,400
dns tap is all about

1317
00:48:14,400 --> 00:48:16,800
dns tap is a flexible structured binary

1318
00:48:16,800 --> 00:48:19,119
log format for dns software

1319
00:48:19,119 --> 00:48:22,240
um it is it supports both real-time

1320
00:48:22,240 --> 00:48:22,720
stream

1321
00:48:22,720 --> 00:48:24,800
and file-based processing workflows uh

1322
00:48:24,800 --> 00:48:26,400
fairly equally well with a lot of shared

1323
00:48:26,400 --> 00:48:27,760
code between the two

1324
00:48:27,760 --> 00:48:30,160
uh and we designed it for minimal

1325
00:48:30,160 --> 00:48:31,040
overhead on

1326
00:48:31,040 --> 00:48:32,640
the instrumental software the reference

1327
00:48:32,640 --> 00:48:34,400
and the early reference implementations

1328
00:48:34,400 --> 00:48:35,200
were

1329
00:48:35,200 --> 00:48:38,240
uh non-blocking so if the uh

1330
00:48:38,240 --> 00:48:40,960
if the reader wasn't keeping up the the

1331
00:48:40,960 --> 00:48:42,160
server would keep

1332
00:48:42,160 --> 00:48:45,200
keep on going um as such is not really

1333
00:48:45,200 --> 00:48:46,960
really good oriented towards uh like

1334
00:48:46,960 --> 00:48:48,480
audit vlogging and support

1335
00:48:48,480 --> 00:48:51,119
but more for like stats collection and

1336
00:48:51,119 --> 00:48:52,960
telemetry and other observations more

1337
00:48:52,960 --> 00:48:55,440
operational

1338
00:48:55,440 --> 00:48:58,400
uh the binary format is defined by a

1339
00:48:58,400 --> 00:49:00,160
protobuf definition at the

1340
00:49:00,160 --> 00:49:03,119
link url here uh the streaming and file

1341
00:49:03,119 --> 00:49:04,240
format is a

1342
00:49:04,240 --> 00:49:06,000
library that's that farsight developed

1343
00:49:06,000 --> 00:49:07,680
uh called frame streams uh

1344
00:49:07,680 --> 00:49:10,400
which is uh a lightweight streaming

1345
00:49:10,400 --> 00:49:11,119
protocol

1346
00:49:11,119 --> 00:49:14,000
uh system negotiation when done over a

1347
00:49:14,000 --> 00:49:15,599
network connection but the file format

1348
00:49:15,599 --> 00:49:16,720
is basically the

1349
00:49:16,720 --> 00:49:20,319
unidirectional stream that is negotiated

1350
00:49:20,319 --> 00:49:22,559
um we have two we support two

1351
00:49:22,559 --> 00:49:23,359
implementations

1352
00:49:23,359 --> 00:49:25,119
one in c the reference implementation

1353
00:49:25,119 --> 00:49:27,280
and goaling notation

1354
00:49:27,280 --> 00:49:30,319
uh at those sites

1355
00:49:30,319 --> 00:49:32,480
the primary focus of dnstab is exporting

1356
00:49:32,480 --> 00:49:34,400
the dns message as it is

1357
00:49:34,400 --> 00:49:36,559
seen by the instrumented server it can

1358
00:49:36,559 --> 00:49:37,760
export other things but we haven't

1359
00:49:37,760 --> 00:49:40,480
defined those yet

1360
00:49:40,480 --> 00:49:42,400
along with the message it exports

1361
00:49:42,400 --> 00:49:45,040
relevant context uh such as you know the

1362
00:49:45,040 --> 00:49:47,599
ip address that it came from and similar

1363
00:49:47,599 --> 00:49:48,480
uh and of course

1364
00:49:48,480 --> 00:49:50,800
the definition of relevant evolves over

1365
00:49:50,800 --> 00:49:52,000
time um

1366
00:49:52,000 --> 00:49:54,240
so we maintained we maintained this

1367
00:49:54,240 --> 00:49:55,520
specification

1368
00:49:55,520 --> 00:49:57,440
by a primary discussion on our mailing

1369
00:49:57,440 --> 00:49:59,440
list which is uh

1370
00:49:59,440 --> 00:50:01,839
information about which is available at

1371
00:50:01,839 --> 00:50:04,720
dnstep and info

1372
00:50:05,200 --> 00:50:07,040
the first update we've done recently is

1373
00:50:07,040 --> 00:50:10,319
adding some new adding support for

1374
00:50:10,319 --> 00:50:13,440
new protocols so the context

1375
00:50:13,440 --> 00:50:15,599
has always included some protocol info a

1376
00:50:15,599 --> 00:50:17,200
a bunch of uh in

1377
00:50:17,200 --> 00:50:20,319
enum type fields so whether it's uh

1378
00:50:20,319 --> 00:50:23,280
ipv4 or ipv6 uh and the query port and

1379
00:50:23,280 --> 00:50:24,319
response ports

1380
00:50:24,319 --> 00:50:26,960
supports and in order to make the ports

1381
00:50:26,960 --> 00:50:27,680
make sense

1382
00:50:27,680 --> 00:50:31,520
a protocol udp or tcp uh this did not

1383
00:50:31,520 --> 00:50:32,640
leave out

1384
00:50:32,640 --> 00:50:35,359
does not include dns over tls or dns

1385
00:50:35,359 --> 00:50:37,599
over https which are coming into

1386
00:50:37,599 --> 00:50:40,640
more wide use um because those are

1387
00:50:40,640 --> 00:50:41,280
definitely not

1388
00:50:41,280 --> 00:50:44,880
uh adequately captured by tcp because

1389
00:50:44,880 --> 00:50:45,280
you know

1390
00:50:45,280 --> 00:50:47,680
dns over tls and dns of https are quite

1391
00:50:47,680 --> 00:50:48,880
a bit different from just playing dns

1392
00:50:48,880 --> 00:50:50,400
over tcp

1393
00:50:50,400 --> 00:50:54,400
um after a after a short discussion

1394
00:50:54,400 --> 00:50:55,200
about a uh

1395
00:50:55,200 --> 00:50:57,599
old suggestion late last year we added

1396
00:50:57,599 --> 00:50:59,839
uh values to the socket protocol

1397
00:50:59,839 --> 00:51:05,599
um for dns over tls and dns over https

1398
00:51:05,680 --> 00:51:08,319
uh that led to a few open issues which

1399
00:51:08,319 --> 00:51:10,559
are still open uh which we might

1400
00:51:10,559 --> 00:51:14,000
want to close at some point uh so doh is

1401
00:51:14,000 --> 00:51:15,520
definitely not just a trivial thing on

1402
00:51:15,520 --> 00:51:16,000
top of

1403
00:51:16,000 --> 00:51:19,040
dns over tcp uh so

1404
00:51:19,040 --> 00:51:21,119
because we have so we're blurring some

1405
00:51:21,119 --> 00:51:24,079
protocol layering here

1406
00:51:24,079 --> 00:51:27,359
in particular dns over https uh

1407
00:51:27,359 --> 00:51:30,480
uses uh zero for the query id or

1408
00:51:30,480 --> 00:51:31,359
recommends that

1409
00:51:31,359 --> 00:51:34,480
strongly which means that if you're

1410
00:51:34,480 --> 00:51:35,920
writing an application that's that's

1411
00:51:35,920 --> 00:51:37,520
trying to match up uh

1412
00:51:37,520 --> 00:51:39,920
queries and responses with uh with the

1413
00:51:39,920 --> 00:51:41,040
query id you need

1414
00:51:41,040 --> 00:51:44,079
access to the http 2 or http 3

1415
00:51:44,079 --> 00:51:46,480
stream id which is not included in dns

1416
00:51:46,480 --> 00:51:47,280
tap

1417
00:51:47,280 --> 00:51:50,880
yet and similarly like you might want to

1418
00:51:50,880 --> 00:51:51,680
know whether what

1419
00:51:51,680 --> 00:51:54,800
http version is is there uh so we might

1420
00:51:54,800 --> 00:51:55,839
need some more features and

1421
00:51:55,839 --> 00:51:57,920
fields to capture these details um and

1422
00:51:57,920 --> 00:51:59,119
that of course leaves out

1423
00:51:59,119 --> 00:52:01,280
uh other protocols like data server

1424
00:52:01,280 --> 00:52:02,720
quick or genoscript or other

1425
00:52:02,720 --> 00:52:04,800
experimental protocols uh do we

1426
00:52:04,800 --> 00:52:07,280
want to include those in socket protocol

1427
00:52:07,280 --> 00:52:08,319
yeah that's

1428
00:52:08,319 --> 00:52:09,520
that is something that is open for

1429
00:52:09,520 --> 00:52:12,000
discussion

1430
00:52:12,079 --> 00:52:14,400
uh the most significant update was

1431
00:52:14,400 --> 00:52:15,839
adding policy reporting

1432
00:52:15,839 --> 00:52:19,200
to the uh to dns tab

1433
00:52:19,200 --> 00:52:21,200
so uh it's been a while since you can

1434
00:52:21,200 --> 00:52:23,119
safely run a

1435
00:52:23,119 --> 00:52:24,960
recursive dns server for a community of

1436
00:52:24,960 --> 00:52:26,319
users and

1437
00:52:26,319 --> 00:52:29,680
you know just let it

1438
00:52:30,480 --> 00:52:32,160
let it blindly resolve everything

1439
00:52:32,160 --> 00:52:34,160
without exposing your users to

1440
00:52:34,160 --> 00:52:37,200
various uh bad actors and other and

1441
00:52:37,200 --> 00:52:38,800
other madness on the internet

1442
00:52:38,800 --> 00:52:41,359
um in the old days it was fairly

1443
00:52:41,359 --> 00:52:42,240
customary to

1444
00:52:42,240 --> 00:52:44,240
just publish an empty zone that your

1445
00:52:44,240 --> 00:52:46,400
recursive dns server uh

1446
00:52:46,400 --> 00:52:48,240
but you know that does not that's a

1447
00:52:48,240 --> 00:52:49,920
fairly pretty course mechanism

1448
00:52:49,920 --> 00:52:52,960
and it's obviously advanced since then

1449
00:52:52,960 --> 00:52:56,720
um so there have been a number of uh

1450
00:52:56,720 --> 00:52:58,720
a number of efforts one of which is uh

1451
00:52:58,720 --> 00:53:00,000
response policy zones

1452
00:53:00,000 --> 00:53:03,440
um that

1453
00:53:03,440 --> 00:53:06,720
are a non-trivial mechanism for

1454
00:53:06,720 --> 00:53:08,880
uh for enforcing policies and processing

1455
00:53:08,880 --> 00:53:10,079
the dns messages so

1456
00:53:10,079 --> 00:53:12,480
we wanted some visibility into this so

1457
00:53:12,480 --> 00:53:14,319
earlier this year we added a policy

1458
00:53:14,319 --> 00:53:15,920
field which is a

1459
00:53:15,920 --> 00:53:17,599
compound type uh which includes

1460
00:53:17,599 --> 00:53:19,040
information about what rules were

1461
00:53:19,040 --> 00:53:19,599
triggered

1462
00:53:19,599 --> 00:53:22,079
uh what identifier the packet matched

1463
00:53:22,079 --> 00:53:23,119
the rule

1464
00:53:23,119 --> 00:53:25,200
whether it was a client ip nor the query

1465
00:53:25,200 --> 00:53:26,240
name or what

1466
00:53:26,240 --> 00:53:28,800
or any number of things and what action

1467
00:53:28,800 --> 00:53:32,079
was taken in response to that

1468
00:53:32,800 --> 00:53:35,040
this was written primarily to cover the

1469
00:53:35,040 --> 00:53:36,559
the rpc use cases

1470
00:53:36,559 --> 00:53:39,200
that we had

1471
00:53:39,760 --> 00:53:42,720
we made sure we covered the rpc actions

1472
00:53:42,720 --> 00:53:44,240
and the rpg

1473
00:53:44,240 --> 00:53:47,119
identifiers and part of that because rpg

1474
00:53:47,119 --> 00:53:48,000
is a well-known

1475
00:53:48,000 --> 00:53:50,880
uh mechanism with rich functionality as

1476
00:53:50,880 --> 00:53:52,240
well documented

1477
00:53:52,240 --> 00:53:55,680
uh and covers many if not most use cases

1478
00:53:55,680 --> 00:53:56,559
for

1479
00:53:56,559 --> 00:53:59,599
uh for policy filtering

1480
00:53:59,599 --> 00:54:02,240
uh we've made it not to support the

1481
00:54:02,240 --> 00:54:03,359
other mechanisms with a

1482
00:54:03,359 --> 00:54:06,800
policy type string and if

1483
00:54:06,800 --> 00:54:08,800
there are actions or identifiers that

1484
00:54:08,800 --> 00:54:10,240
the other possibility that other

1485
00:54:10,240 --> 00:54:12,079
policy engines use that we want to

1486
00:54:12,079 --> 00:54:14,079
report through united's tap

1487
00:54:14,079 --> 00:54:17,119
we just need to add those

1488
00:54:17,440 --> 00:54:19,680
um i'll finish up with some general

1489
00:54:19,680 --> 00:54:22,720
housekeeping notes about other

1490
00:54:22,880 --> 00:54:25,680
other open projects so we have a couple

1491
00:54:25,680 --> 00:54:27,920
open issues on the dnstapp.pb

1492
00:54:27,920 --> 00:54:30,960
github from a while back uh for adding

1493
00:54:30,960 --> 00:54:34,000
cache status for what's uh

1494
00:54:34,000 --> 00:54:37,280
what information or what whether a query

1495
00:54:37,280 --> 00:54:39,440
is answered out of cache or out of uh

1496
00:54:39,440 --> 00:54:42,720
authoritative zones or out of uh out of

1497
00:54:42,720 --> 00:54:44,880
cache missed iterative queries

1498
00:54:44,880 --> 00:54:48,240
um and then also a generic message tag

1499
00:54:48,240 --> 00:54:49,119
for tying

1500
00:54:49,119 --> 00:54:53,040
multiple dns tap messages together

1501
00:54:53,040 --> 00:54:54,880
these as i mentioned has been open for a

1502
00:54:54,880 --> 00:54:56,079
while

1503
00:54:56,079 --> 00:54:59,040
there were some open discussions now

1504
00:54:59,040 --> 00:55:00,480
stalled for a while

1505
00:55:00,480 --> 00:55:03,520
uh that didn't really

1506
00:55:03,520 --> 00:55:04,480
propose multiple different

1507
00:55:04,480 --> 00:55:06,240
implementations with no clear consensus

1508
00:55:06,240 --> 00:55:08,640
on which to adopt if any

1509
00:55:08,640 --> 00:55:11,040
i would like to reopen those or close

1510
00:55:11,040 --> 00:55:11,839
these issues

1511
00:55:11,839 --> 00:55:15,200
at some point another

1512
00:55:15,200 --> 00:55:18,960
open issue is a json format for

1513
00:55:18,960 --> 00:55:21,920
for dns tap uh the pro portable binary

1514
00:55:21,920 --> 00:55:22,480
format

1515
00:55:22,480 --> 00:55:24,799
is a bit of a barrier to entry for for a

1516
00:55:24,799 --> 00:55:26,640
number of users it's not

1517
00:55:26,640 --> 00:55:27,599
it's not something that there are a lot

1518
00:55:27,599 --> 00:55:29,440
of command line tools to slice and dice

1519
00:55:29,440 --> 00:55:30,079
and

1520
00:55:30,079 --> 00:55:33,280
and process and we've had a few

1521
00:55:33,280 --> 00:55:34,079
submissions

1522
00:55:34,079 --> 00:55:37,040
of json output to various dns tab tools

1523
00:55:37,040 --> 00:55:37,599
and

1524
00:55:37,599 --> 00:55:40,799
those uh submitted um

1525
00:55:40,799 --> 00:55:42,319
so submitted json formats are not

1526
00:55:42,319 --> 00:55:44,000
necessarily uh

1527
00:55:44,000 --> 00:55:46,160
compatibly compatible with each other uh

1528
00:55:46,160 --> 00:55:47,200
so i think there

1529
00:55:47,200 --> 00:55:48,640
there would be a good use for standard

1530
00:55:48,640 --> 00:55:50,160
json binding for tool independent

1531
00:55:50,160 --> 00:55:51,359
workflows

1532
00:55:51,359 --> 00:55:53,119
uh if any of this sounds interesting to

1533
00:55:53,119 --> 00:55:55,440
anybody uh listening uh

1534
00:55:55,440 --> 00:55:56,720
i would like to hear from you uh

1535
00:55:56,720 --> 00:55:59,040
preferably by the file ebay list or

1536
00:55:59,040 --> 00:56:02,400
unicast or in the break group so with

1537
00:56:02,400 --> 00:56:03,280
that

1538
00:56:03,280 --> 00:56:07,280
um i will open the floor to questions

1539
00:56:08,400 --> 00:56:11,280
thank you very much uh our first

1540
00:56:11,280 --> 00:56:11,760
question

1541
00:56:11,760 --> 00:56:14,640
is from roland bobbins has thought been

1542
00:56:14,640 --> 00:56:16,640
given to implementing dns tap

1543
00:56:16,640 --> 00:56:19,359
as an ipfix interface extension or

1544
00:56:19,359 --> 00:56:22,160
full-fledged

1545
00:56:22,640 --> 00:56:26,559
uh standardized format like psa mp

1546
00:56:26,559 --> 00:56:28,400
this would make dns tap much more

1547
00:56:28,400 --> 00:56:30,240
accessible and allow for much

1548
00:56:30,240 --> 00:56:33,359
easier com combinatorial analysis

1549
00:56:33,359 --> 00:56:35,760
with other forms of flow-based telematic

1550
00:56:35,760 --> 00:56:36,799
telemetry

1551
00:56:36,799 --> 00:56:38,799
and open up greater possibilities in

1552
00:56:38,799 --> 00:56:42,480
terms of analysis tools

1553
00:56:43,119 --> 00:56:44,799
so if i understand the question it's uh

1554
00:56:44,799 --> 00:56:46,640
about implementing dns tap

1555
00:56:46,640 --> 00:56:49,119
uh with a different source from the

1556
00:56:49,119 --> 00:56:49,680
actual

1557
00:56:49,680 --> 00:56:53,040
like internals of dna software if that

1558
00:56:53,040 --> 00:56:56,160
can i can go and confirm or deny that or

1559
00:56:56,160 --> 00:56:57,359
confirm this or

1560
00:56:57,359 --> 00:57:01,119
correct me on that yeah as an ipv ipfix

1561
00:57:01,119 --> 00:57:02,559
or ipfix

1562
00:57:02,559 --> 00:57:05,520
extension enterprise extension or

1563
00:57:05,520 --> 00:57:07,680
full-fledged standardized format like

1564
00:57:07,680 --> 00:57:13,040
psa mp

1565
00:57:13,040 --> 00:57:15,920
uh the focus of dns tab is definitely uh

1566
00:57:15,920 --> 00:57:16,400
as a

1567
00:57:16,400 --> 00:57:19,440
plug-in for the dns software itself um

1568
00:57:19,440 --> 00:57:22,400
and as its own as its own thing rather

1569
00:57:22,400 --> 00:57:23,040
than as a

1570
00:57:23,040 --> 00:57:26,160
uh rather than as like

1571
00:57:26,160 --> 00:57:28,559
part of a overall ecosystem like that so

1572
00:57:28,559 --> 00:57:30,400
i i would say that's not on our radar

1573
00:57:30,400 --> 00:57:30,880
but i would

1574
00:57:30,880 --> 00:57:34,480
be willing to discuss that more

1575
00:57:36,559 --> 00:57:39,680
okay um follow up to that from also

1576
00:57:39,680 --> 00:57:41,839
roland uh the question is whether

1577
00:57:41,839 --> 00:57:43,680
thought has been given to implementing

1578
00:57:43,680 --> 00:57:46,559
dns tap the top ipfix

1579
00:57:46,559 --> 00:57:50,559
dns software could export it via ipfix

1580
00:57:50,559 --> 00:57:52,559
um confess i'm not really very familiar

1581
00:57:52,559 --> 00:57:54,000
with ipfix

1582
00:57:54,000 --> 00:57:57,280
um so that is

1583
00:57:57,280 --> 00:58:00,880
all right casey dco has raised his hand

1584
00:58:00,880 --> 00:58:04,720
um casey you should be

1585
00:58:04,720 --> 00:58:08,079
good to unmute yourself

1586
00:58:08,079 --> 00:58:10,400
uh yeah i'll make it quick so one thing

1587
00:58:10,400 --> 00:58:12,160
you asked about if there was

1588
00:58:12,160 --> 00:58:15,280
um you know interest in in making the

1589
00:58:15,280 --> 00:58:16,319
json

1590
00:58:16,319 --> 00:58:19,200
available and and the answer is yes here

1591
00:58:19,200 --> 00:58:20,960
because i know i've

1592
00:58:20,960 --> 00:58:22,960
written some parser you know parsers

1593
00:58:22,960 --> 00:58:24,480
that take the frame buffer and

1594
00:58:24,480 --> 00:58:27,119
and put it out a different way um but my

1595
00:58:27,119 --> 00:58:28,720
my other question is

1596
00:58:28,720 --> 00:58:31,040
is whether there's any way to and if

1597
00:58:31,040 --> 00:58:32,799
this is ongoing work

1598
00:58:32,799 --> 00:58:35,920
um a way to take the what is it the

1599
00:58:35,920 --> 00:58:36,720
buffering

1600
00:58:36,720 --> 00:58:38,960
and decrease the time delay like when

1601
00:58:38,960 --> 00:58:40,240
you don't have a full buffer to putting

1602
00:58:40,240 --> 00:58:41,040
something out

1603
00:58:41,040 --> 00:58:42,960
from your f-string capture i don't know

1604
00:58:42,960 --> 00:58:44,240
if that's the same

1605
00:58:44,240 --> 00:58:45,599
as what you're talking about in just the

1606
00:58:45,599 --> 00:58:47,760
protocol buffer or not um but i thought

1607
00:58:47,760 --> 00:58:48,880
i'd ask about that

1608
00:58:48,880 --> 00:58:50,559
we can take it offline if it's not

1609
00:58:50,559 --> 00:58:52,160
applicable uh

1610
00:58:52,160 --> 00:58:54,400
the in in general the uh the

1611
00:58:54,400 --> 00:58:57,040
implementations uh that we support uh or

1612
00:58:57,040 --> 00:58:59,440
that we were familiar with uh try to get

1613
00:58:59,440 --> 00:59:00,160
the data

1614
00:59:00,160 --> 00:59:02,319
out of the out of the instrumented

1615
00:59:02,319 --> 00:59:04,000
server as quickly as possible

1616
00:59:04,000 --> 00:59:05,839
so there's a ring buffer primarily to

1617
00:59:05,839 --> 00:59:07,359
absorb back pressure from

1618
00:59:07,359 --> 00:59:09,760
the consumer not uh not keeping up with

1619
00:59:09,760 --> 00:59:12,000
the fast

1620
00:59:12,000 --> 00:59:15,280
we're not not keeping up with the

1621
00:59:16,839 --> 00:59:19,839
processing

1622
00:59:20,000 --> 00:59:23,200
okay uh another question from willem

1623
00:59:23,200 --> 00:59:25,440
are there any plans to standardize this

1624
00:59:25,440 --> 00:59:27,839
work in the ietf

1625
00:59:27,839 --> 00:59:29,599
uh there there are they're more than

1626
00:59:29,599 --> 00:59:31,119
there were there were more than plans

1627
00:59:31,119 --> 00:59:32,000
there was actually

1628
00:59:32,000 --> 00:59:34,720
a a effort to make an internet draft of

1629
00:59:34,720 --> 00:59:35,119
this

1630
00:59:35,119 --> 00:59:38,240
um some of the complications of this uh

1631
00:59:38,240 --> 00:59:42,400
that were uh it being based on protobuf

1632
00:59:42,400 --> 00:59:44,160
which is not an ietf standard

1633
00:59:44,160 --> 00:59:46,400
standardized protocol and we have an

1634
00:59:46,400 --> 00:59:48,720
installed base so switching to cbore or

1635
00:59:48,720 --> 00:59:49,599
similar

1636
00:59:49,599 --> 00:59:52,960
was not very practical

1637
00:59:53,920 --> 00:59:57,040
okay it looks like that

1638
00:59:57,040 --> 00:59:59,119
is it for questions uh thank you very

1639
00:59:59,119 --> 01:00:00,559
much chris

1640
01:00:00,559 --> 01:00:02,799
all right

1641
01:00:05,280 --> 01:00:08,160
all right our next presentation is from

1642
01:00:08,160 --> 01:00:08,960
uh

1643
01:00:08,960 --> 01:00:12,640
siva cassava presentation

1644
01:00:12,640 --> 01:00:14,559
is so you think your name servers are

1645
01:00:14,559 --> 01:00:17,040
correct finding errors automatically in

1646
01:00:17,040 --> 01:00:19,119
name server implementations

1647
01:00:19,119 --> 01:00:22,400
siva if you want to share your screen

1648
01:00:22,400 --> 01:00:24,960
hello everyone i am shiva kakar a fourth

1649
01:00:24,960 --> 01:00:27,680
year phd student at ucla

1650
01:00:27,680 --> 01:00:29,280
today i'm going to describe you a way to

1651
01:00:29,280 --> 01:00:31,440
find errors automatically in names of

1652
01:00:31,440 --> 01:00:32,799
implementations

1653
01:00:32,799 --> 01:00:34,480
and this is a joint work with ryan

1654
01:00:34,480 --> 01:00:36,480
beckett from microsoft with madwes todd

1655
01:00:36,480 --> 01:00:39,599
and george from ucla

1656
01:00:41,520 --> 01:00:43,040
so we all know how hard it is to

1657
01:00:43,040 --> 01:00:44,559
implement a name server that is

1658
01:00:44,559 --> 01:00:45,359
efficient

1659
01:00:45,359 --> 01:00:48,480
has high throughput and is correct

1660
01:00:48,480 --> 01:00:50,400
dns name resolution seems simple at high

1661
01:00:50,400 --> 01:00:52,240
level but over the time it has evolved

1662
01:00:52,240 --> 01:00:53,119
into a complex

1663
01:00:53,119 --> 01:00:56,240
and intricate protocol as jeff houston

1664
01:00:56,240 --> 01:00:58,000
said in his ethnic blog post

1665
01:00:58,000 --> 01:01:00,079
the dns is a remarkably simple system

1666
01:01:00,079 --> 01:01:01,200
using it queries

1667
01:01:01,200 --> 01:01:04,240
you get back answers however the dns is

1668
01:01:04,240 --> 01:01:05,760
simple in the same way that chess

1669
01:01:05,760 --> 01:01:07,599
are good or simple they all have

1670
01:01:07,599 --> 01:01:09,119
constrained environments governed by a

1671
01:01:09,119 --> 01:01:10,640
set of rigid rules

1672
01:01:10,640 --> 01:01:12,319
but they all possess astonishing

1673
01:01:12,319 --> 01:01:14,160
complexity

1674
01:01:14,160 --> 01:01:16,000
those rules are embedded in english

1675
01:01:16,000 --> 01:01:18,000
documents called rfcs

1676
01:01:18,000 --> 01:01:19,599
the developers must understand these

1677
01:01:19,599 --> 01:01:22,160
rfcs first and then transform into

1678
01:01:22,160 --> 01:01:25,440
a working code this whole process

1679
01:01:25,440 --> 01:01:27,920
is delicate and errors can happen and

1680
01:01:27,920 --> 01:01:29,440
has happened in the past

1681
01:01:29,440 --> 01:01:32,640
like any software system

1682
01:01:33,839 --> 01:01:35,920
but the errors in dns have far reaching

1683
01:01:35,920 --> 01:01:38,160
effects due to its global presence which

1684
01:01:38,160 --> 01:01:39,599
puts the developer

1685
01:01:39,599 --> 01:01:41,359
under a lot of pleasure to ensure that

1686
01:01:41,359 --> 01:01:43,520
there are no exploitable crashes

1687
01:01:43,520 --> 01:01:45,359
or no wrong answers are written by the

1688
01:01:45,359 --> 01:01:46,720
software

1689
01:01:46,720 --> 01:01:49,359
similarly they also wants to ensure that

1690
01:01:49,359 --> 01:01:50,720
they are doing what most others are

1691
01:01:50,720 --> 01:01:51,280
doing

1692
01:01:51,280 --> 01:01:53,119
so as not to have any interoperability

1693
01:01:53,119 --> 01:01:55,280
issues

1694
01:01:55,280 --> 01:01:58,079
perhaps the most interesting the most

1695
01:01:58,079 --> 01:01:59,280
important requirement is

1696
01:01:59,280 --> 01:02:01,280
ensuring that the develop software is

1697
01:02:01,280 --> 01:02:02,799
compliant with the rfcs

1698
01:02:02,799 --> 01:02:05,839
that is functional compliance does the

1699
01:02:05,839 --> 01:02:07,440
develop name server software follow the

1700
01:02:07,440 --> 01:02:08,000
logic

1701
01:02:08,000 --> 01:02:10,400
and procedure as indicated by the rfcs

1702
01:02:10,400 --> 01:02:12,319
are there any cases on which they differ

1703
01:02:12,319 --> 01:02:14,640
and why do they differ

1704
01:02:14,640 --> 01:02:16,319
to check all these issues each

1705
01:02:16,319 --> 01:02:18,000
implementation currently has its own

1706
01:02:18,000 --> 01:02:20,079
test suite

1707
01:02:20,079 --> 01:02:22,240
each implementation developer manually

1708
01:02:22,240 --> 01:02:23,920
writes some tests to check the lookup

1709
01:02:23,920 --> 01:02:24,400
logic

1710
01:02:24,400 --> 01:02:26,400
rfc compliance and whether the response

1711
01:02:26,400 --> 01:02:29,200
return is expected response

1712
01:02:29,200 --> 01:02:31,200
this is all good and has got a lot of

1713
01:02:31,200 --> 01:02:33,359
errors in the name servers

1714
01:02:33,359 --> 01:02:35,599
but it is an honors task which puts a

1715
01:02:35,599 --> 01:02:36,960
lot of burden on developers

1716
01:02:36,960 --> 01:02:38,480
to come up with a good test that

1717
01:02:38,480 --> 01:02:40,480
stresses many corner cases of the dns

1718
01:02:40,480 --> 01:02:42,960
rfcs

1719
01:02:43,200 --> 01:02:44,640
i have recently started working and

1720
01:02:44,640 --> 01:02:46,400
researching on dns topics

1721
01:02:46,400 --> 01:02:48,000
and after seeing this current testing

1722
01:02:48,000 --> 01:02:50,240
scenario i and my collaborators thought

1723
01:02:50,240 --> 01:02:52,400
can we do better and reduce burden on

1724
01:02:52,400 --> 01:02:54,799
the developers

1725
01:02:54,799 --> 01:03:00,000
the short answer is yes and but how

1726
01:03:00,160 --> 01:03:02,480
our key idea is to generate tests

1727
01:03:02,480 --> 01:03:03,680
automatically

1728
01:03:03,680 --> 01:03:05,359
thus avoiding the laborious and manual

1729
01:03:05,359 --> 01:03:07,680
way of writing tests

1730
01:03:07,680 --> 01:03:09,280
to know what is the expected answer for

1731
01:03:09,280 --> 01:03:11,280
a generated test we can simply compare

1732
01:03:11,280 --> 01:03:12,319
the response from multiple

1733
01:03:12,319 --> 01:03:13,440
implementations

1734
01:03:13,440 --> 01:03:15,119
but one or more dns implementations

1735
01:03:15,119 --> 01:03:16,480
disagree with others

1736
01:03:16,480 --> 01:03:19,440
we flag this as a potential bug our tool

1737
01:03:19,440 --> 01:03:21,039
which automatically generates us

1738
01:03:21,039 --> 01:03:23,039
compares the response from multiple

1739
01:03:23,039 --> 01:03:26,640
implementation is called ferret

1740
01:03:27,359 --> 01:03:30,400
but how to generate high but how to

1741
01:03:30,400 --> 01:03:32,000
generate high coverage stress that

1742
01:03:32,000 --> 01:03:35,440
identify functional correctness errors

1743
01:03:35,440 --> 01:03:37,280
so to note that first i'll give an

1744
01:03:37,280 --> 01:03:38,799
overview of the end-to-end design of the

1745
01:03:38,799 --> 01:03:40,720
system before delving into deeper of how

1746
01:03:40,720 --> 01:03:45,520
we generate the test automatically

1747
01:03:45,520 --> 01:03:49,039
so we have rfcs and we leverage rfcs

1748
01:03:49,039 --> 01:03:51,440
to drive test generation a technique

1749
01:03:51,440 --> 01:03:53,039
called specification based test

1750
01:03:53,039 --> 01:03:54,640
generation

1751
01:03:54,640 --> 01:03:56,960
using this technique we produce tests

1752
01:03:56,960 --> 01:03:58,880
that cover many distinct dns names of

1753
01:03:58,880 --> 01:04:01,280
our behaviors

1754
01:04:01,280 --> 01:04:04,000
while the end-to-end behavior so the

1755
01:04:04,000 --> 01:04:05,680
tests are basically like a zone file

1756
01:04:05,680 --> 01:04:08,640
and a query so for example this is one

1757
01:04:08,640 --> 01:04:09,200
example

1758
01:04:09,200 --> 01:04:11,280
test is that the tool generated so

1759
01:04:11,280 --> 01:04:12,559
there's a small zone file of three

1760
01:04:12,559 --> 01:04:14,079
records and this is the query that is

1761
01:04:14,079 --> 01:04:15,280
supposed to be sent to that

1762
01:04:15,280 --> 01:04:19,280
zone file while the end-to-end behavior

1763
01:04:19,280 --> 01:04:20,000
of dns

1764
01:04:20,000 --> 01:04:22,319
query lookup can require contacting many

1765
01:04:22,319 --> 01:04:23,280
name servers

1766
01:04:23,280 --> 01:04:25,200
we employ a modular approach that only

1767
01:04:25,200 --> 01:04:26,880
generates tests for a single name server

1768
01:04:26,880 --> 01:04:28,880
in isolation

1769
01:04:28,880 --> 01:04:31,119
in the case of dns name servers keep no

1770
01:04:31,119 --> 01:04:32,240
internal state

1771
01:04:32,240 --> 01:04:34,240
the response they provide is based

1772
01:04:34,240 --> 01:04:35,359
solely on the

1773
01:04:35,359 --> 01:04:36,960
zone files that they have and the input

1774
01:04:36,960 --> 01:04:39,039
query

1775
01:04:39,039 --> 01:04:41,200
and the tests are not tied to any source

1776
01:04:41,200 --> 01:04:42,400
code so

1777
01:04:42,400 --> 01:04:43,680
ferret can generate tests for any

1778
01:04:43,680 --> 01:04:44,640
implementation because these are

1779
01:04:44,640 --> 01:04:46,079
basically zone file and query they can

1780
01:04:46,079 --> 01:04:46,799
be used to

1781
01:04:46,799 --> 01:04:51,520
generate a test and test any names of

1782
01:04:52,839 --> 01:04:55,280
implementation

1783
01:04:55,280 --> 01:04:59,280
okay so now we have the test generated

1784
01:04:59,280 --> 01:05:01,920
and we want to test them uh you and we

1785
01:05:01,920 --> 01:05:03,599
want to test multiple immigrations using

1786
01:05:03,599 --> 01:05:05,520
them

1787
01:05:05,520 --> 01:05:07,760
as many parts of the dns rfc are either

1788
01:05:07,760 --> 01:05:08,640
underspecified

1789
01:05:08,640 --> 01:05:11,039
or not specified and there is not always

1790
01:05:11,039 --> 01:05:12,880
a definite right or wrong answer for

1791
01:05:12,880 --> 01:05:14,160
these cases

1792
01:05:14,160 --> 01:05:15,680
we instead of comparing the responses

1793
01:05:15,680 --> 01:05:17,039
from different implementations to the

1794
01:05:17,039 --> 01:05:18,000
rfcs

1795
01:05:18,000 --> 01:05:19,119
we compare the results from the

1796
01:05:19,119 --> 01:05:21,680
implementations to one another

1797
01:05:21,680 --> 01:05:23,839
when one or more implementations uh

1798
01:05:23,839 --> 01:05:24,880
disagree

1799
01:05:24,880 --> 01:05:26,960
with others we flag it as a potential

1800
01:05:26,960 --> 01:05:28,960
bug and we look into it why there was a

1801
01:05:28,960 --> 01:05:31,359
difference

1802
01:05:33,039 --> 01:05:34,480
and this module we call it as

1803
01:05:34,480 --> 01:05:36,079
differential testing module an idea

1804
01:05:36,079 --> 01:05:39,760
commonly used in compiler testing

1805
01:05:40,079 --> 01:05:41,520
so now first we look at into

1806
01:05:41,520 --> 01:05:42,559
differential testing modules some

1807
01:05:42,559 --> 01:05:44,079
details and then we will look at some

1808
01:05:44,079 --> 01:05:45,680
examples of the bugs that we found and

1809
01:05:45,680 --> 01:05:50,079
then into test generation module

1810
01:05:50,079 --> 01:05:51,520
we compared the behavior of eight

1811
01:05:51,520 --> 01:05:52,880
popular open source authoritative

1812
01:05:52,880 --> 01:05:54,480
implementations of dns

1813
01:05:54,480 --> 01:05:55,599
and the table shows the eight

1814
01:05:55,599 --> 01:05:57,280
implementations the language they are

1815
01:05:57,280 --> 01:05:58,799
implemented in and the brief description

1816
01:05:58,799 --> 01:06:01,680
of their focus or how they are used

1817
01:06:01,680 --> 01:06:03,520
for testing implementations for that

1818
01:06:03,520 --> 01:06:05,359
uses docker to construct a working

1819
01:06:05,359 --> 01:06:07,599
container image of each implementation

1820
01:06:07,599 --> 01:06:09,280
to generate the image we clone the

1821
01:06:09,280 --> 01:06:11,359
implementations code as of october 1st

1822
01:06:11,359 --> 01:06:13,520
2020 from their open source repositories

1823
01:06:13,520 --> 01:06:16,240
available on beta about kit lab

1824
01:06:16,240 --> 01:06:18,480
fedex starts a container for each image

1825
01:06:18,480 --> 01:06:20,559
and each container serves one zone file

1826
01:06:20,559 --> 01:06:22,799
at a time as an authoritative zone

1827
01:06:22,799 --> 01:06:25,440
the containers expose the dns port 53 to

1828
01:06:25,440 --> 01:06:27,359
the host system by mapping an unused

1829
01:06:27,359 --> 01:06:28,079
host port

1830
01:06:28,079 --> 01:06:29,760
and enable the host to send queries and

1831
01:06:29,760 --> 01:06:31,680
resume responses from the dns server

1832
01:06:31,680 --> 01:06:33,760
running in that container

1833
01:06:33,760 --> 01:06:36,160
this way each implementation is given a

1834
01:06:36,160 --> 01:06:38,160
unique port that maps to the container's

1835
01:06:38,160 --> 01:06:40,640
dns port 53

1836
01:06:40,640 --> 01:06:43,039
finally fedex uses python library dns

1837
01:06:43,039 --> 01:06:45,280
python to send queries and

1838
01:06:45,280 --> 01:06:50,240
receive responses from the containers

1839
01:06:50,720 --> 01:06:52,160
and these are all the lists of the bugs

1840
01:06:52,160 --> 01:06:54,400
that we found we found around 30 bucks

1841
01:06:54,400 --> 01:06:56,559
and most of them have been confirmed and

1842
01:06:56,559 --> 01:06:58,000
a lot of them have already been also

1843
01:06:58,000 --> 01:07:00,799
fixed by the developers

1844
01:07:00,799 --> 01:07:02,640
and i'll give you some of the examples

1845
01:07:02,640 --> 01:07:05,598
of the bugs that we found

1846
01:07:06,720 --> 01:07:09,119
so consider this uh example where this

1847
01:07:09,119 --> 01:07:10,640
is the test case that the tool generated

1848
01:07:10,640 --> 01:07:12,000
both the zone file and the query was

1849
01:07:12,000 --> 01:07:14,720
generated from the tool

1850
01:07:14,720 --> 01:07:17,200
for this query it is first rewritten

1851
01:07:17,200 --> 01:07:18,640
using the dna

1852
01:07:18,640 --> 01:07:21,680
to the cname to the to the new query

1853
01:07:21,680 --> 01:07:22,880
shown as above

1854
01:07:22,880 --> 01:07:24,960
and the new query will match exactly the

1855
01:07:24,960 --> 01:07:26,720
name record

1856
01:07:26,720 --> 01:07:29,760
now when this test case is used to test

1857
01:07:29,760 --> 01:07:32,319
bind and others all the others responded

1858
01:07:32,319 --> 01:07:34,240
with a synthesized cname and a dname as

1859
01:07:34,240 --> 01:07:35,680
a response

1860
01:07:35,680 --> 01:07:37,039
but we found that bind was not

1861
01:07:37,039 --> 01:07:39,920
responding and the query timed out

1862
01:07:39,920 --> 01:07:44,000
we inspected the logs and found that

1863
01:07:44,000 --> 01:07:46,319
the server has crashed by giving this

1864
01:07:46,319 --> 01:07:48,720
message

1865
01:07:49,280 --> 01:07:51,359
and we reported the crash and we noticed

1866
01:07:51,359 --> 01:07:53,119
that it was an easily recognizable deal

1867
01:07:53,119 --> 01:07:54,319
of service vector

1868
01:07:54,319 --> 01:07:56,480
and it can be remotely exploitable it

1869
01:07:56,480 --> 01:07:58,240
can be used to crash both the resolvers

1870
01:07:58,240 --> 01:08:00,319
and the authoritative servers

1871
01:08:00,319 --> 01:08:02,079
and it also affected all currently

1872
01:08:02,079 --> 01:08:05,280
maintained uh bind branches

1873
01:08:05,280 --> 01:08:07,760
so we initiated a responsible disclosure

1874
01:08:07,760 --> 01:08:10,319
and recently just a few days back a

1875
01:08:10,319 --> 01:08:11,920
cv was released with a high severe

1876
01:08:11,920 --> 01:08:13,520
article

1877
01:08:13,520 --> 01:08:15,599
to again emphasize this is the test case

1878
01:08:15,599 --> 01:08:17,198
that the tool automatically generated

1879
01:08:17,198 --> 01:08:17,920
and

1880
01:08:17,920 --> 01:08:20,080
we just knew that uh because of the

1881
01:08:20,080 --> 01:08:21,198
crash we know that there was something

1882
01:08:21,198 --> 01:08:22,640
wrong in the bank and there was no

1883
01:08:22,640 --> 01:08:25,839
manual process in any of this

1884
01:08:26,158 --> 01:08:29,600
okay as a next example consider this one

1885
01:08:29,600 --> 01:08:31,279
more test case

1886
01:08:31,279 --> 01:08:34,719
where there is a wildcard c name and the

1887
01:08:34,719 --> 01:08:36,640
target of the c name is also can be

1888
01:08:36,640 --> 01:08:39,839
matched by the wildcard again

1889
01:08:40,000 --> 01:08:41,839
so the query is firstly written using

1890
01:08:41,839 --> 01:08:43,759
cname to foo dot example

1891
01:08:43,759 --> 01:08:46,238
and four dot example will match the wild

1892
01:08:46,238 --> 01:08:47,439
card again

1893
01:08:47,439 --> 01:08:49,359
if k is not taken then you will just go

1894
01:08:49,359 --> 01:08:50,719
into infinite loop of matching the c

1895
01:08:50,719 --> 01:08:53,839
name over and over

1896
01:08:54,000 --> 01:08:56,399
so we tested it with core dns and all

1897
01:08:56,399 --> 01:08:57,600
the remaining seven

1898
01:08:57,600 --> 01:08:59,600
all the remaining codiness is a popular

1899
01:08:59,600 --> 01:09:00,640
open source server

1900
01:09:00,640 --> 01:09:02,479
in google and it's a recommended server

1901
01:09:02,479 --> 01:09:05,359
for kubernetes also

1902
01:09:05,359 --> 01:09:06,479
all the others responded with this

1903
01:09:06,479 --> 01:09:08,080
synthesized cname as a response and

1904
01:09:08,080 --> 01:09:09,839
detected the loop and stopped

1905
01:09:09,839 --> 01:09:13,520
i'm sorry but code dns did not give us

1906
01:09:13,520 --> 01:09:15,759
any response

1907
01:09:15,759 --> 01:09:17,439
we again noticed the logs and what we

1908
01:09:17,439 --> 01:09:19,839
saw was that

1909
01:09:19,839 --> 01:09:21,759
uh codiness keeps looping and looping

1910
01:09:21,759 --> 01:09:22,960
looping and

1911
01:09:22,960 --> 01:09:25,040
almost takes the all the resources

1912
01:09:25,040 --> 01:09:26,399
available on the system and finally

1913
01:09:26,399 --> 01:09:29,519
crashes with this message

1914
01:09:29,839 --> 01:09:32,640
if there is any uh hosting services that

1915
01:09:32,640 --> 01:09:34,080
use code dns as

1916
01:09:34,080 --> 01:09:36,399
the dns software then this is a serious

1917
01:09:36,399 --> 01:09:38,000
secutable empty an attacker could

1918
01:09:38,000 --> 01:09:39,679
potentially upload its own files that

1919
01:09:39,679 --> 01:09:41,520
upload a vulnerability like this one

1920
01:09:41,520 --> 01:09:43,279
compromising the service by crashing the

1921
01:09:43,279 --> 01:09:45,439
provider service

1922
01:09:45,439 --> 01:09:47,839
we inform the coordinates and they add

1923
01:09:47,839 --> 01:09:50,000
fixed it by adding a loop counter

1924
01:09:50,000 --> 01:09:51,439
they also mention that it's for now it's

1925
01:09:51,439 --> 01:09:53,040
important to protect the server

1926
01:09:53,040 --> 01:09:54,640
rather than to give client a valid

1927
01:09:54,640 --> 01:09:56,960
answer

1928
01:09:59,199 --> 01:10:01,360
as next example let's consider

1929
01:10:01,360 --> 01:10:03,040
performance bug in bind

1930
01:10:03,040 --> 01:10:05,199
so this is another test case where there

1931
01:10:05,199 --> 01:10:08,880
is a delegation for foo to ns1.campus.tv

1932
01:10:08,880 --> 01:10:12,640
but ns1.campus.edu is also under campus

1933
01:10:12,640 --> 01:10:15,440
but is a sibling domain to foo and there

1934
01:10:15,440 --> 01:10:16,400
is a glue

1935
01:10:16,400 --> 01:10:20,320
sibling blue record for ns1 first full

1936
01:10:20,320 --> 01:10:22,960
so for this query the response from

1937
01:10:22,960 --> 01:10:24,880
powerdn is not in energy was that they

1938
01:10:24,880 --> 01:10:27,120
responded with the ns record and also

1939
01:10:27,120 --> 01:10:28,880
gave the glue record in the additional

1940
01:10:28,880 --> 01:10:31,280
section

1941
01:10:31,280 --> 01:10:34,800
bind did not return the glue record

1942
01:10:34,800 --> 01:10:37,280
and when we asked bang the first

1943
01:10:37,280 --> 01:10:38,800
response that we got was that this

1944
01:10:38,800 --> 01:10:40,400
report turns out to be very interesting

1945
01:10:40,400 --> 01:10:42,840
and here is what they managed to find

1946
01:10:42,840 --> 01:10:45,840
out bind uses a glue cache to speed up

1947
01:10:45,840 --> 01:10:47,840
the identification of blue records

1948
01:10:47,840 --> 01:10:51,120
but it had two unrelated errors if the

1949
01:10:51,120 --> 01:10:52,480
cache lookup fails

1950
01:10:52,480 --> 01:10:53,920
then glue records are supposed to be

1951
01:10:53,920 --> 01:10:55,760
searched for in the zone file but they

1952
01:10:55,760 --> 01:10:58,640
were never searched and

1953
01:10:58,640 --> 01:11:00,159
blue records for sibling domain name

1954
01:11:00,159 --> 01:11:01,760
servers were accidentally never searched

1955
01:11:01,760 --> 01:11:02,320
at all

1956
01:11:02,320 --> 01:11:04,080
so there was no chance that this a

1957
01:11:04,080 --> 01:11:05,280
record would have been written by the

1958
01:11:05,280 --> 01:11:07,440
bind

1959
01:11:07,440 --> 01:11:10,880
and it's an open issue on that git club

1960
01:11:10,880 --> 01:11:15,040
and it's on the june 2021 milestone

1961
01:11:17,600 --> 01:11:20,000
next let's look at one more example in

1962
01:11:20,000 --> 01:11:21,600
energy where we found a data structure

1963
01:11:21,600 --> 01:11:23,440
bug

1964
01:11:23,440 --> 01:11:24,960
this is another test case that the tool

1965
01:11:24,960 --> 01:11:27,120
generated where it inserted a wildcard

1966
01:11:27,120 --> 01:11:28,880
character in the r data side of the

1967
01:11:28,880 --> 01:11:31,120
scene

1968
01:11:31,679 --> 01:11:35,120
response from nsg was no error and

1969
01:11:35,120 --> 01:11:38,560
the cname was given out but the expected

1970
01:11:38,560 --> 01:11:40,239
response was supposed to be

1971
01:11:40,239 --> 01:11:43,679
nx domain because ww dot star

1972
01:11:43,679 --> 01:11:46,000
is also under bookstore online and that

1973
01:11:46,000 --> 01:11:47,520
domain name does not exist so the

1974
01:11:47,520 --> 01:11:51,280
expected r code is in extremely

1975
01:11:51,280 --> 01:11:53,199
mine not empowered in is written with nx

1976
01:11:53,199 --> 01:11:56,159
domain as cdna target does not exist

1977
01:11:56,159 --> 01:11:58,400
and our code is important as we all know

1978
01:11:58,400 --> 01:12:00,000
like resolvers can use to determine

1979
01:12:00,000 --> 01:12:03,360
whether domains exist or not

1980
01:12:03,760 --> 01:12:05,280
and when you file the bug report and as

1981
01:12:05,280 --> 01:12:06,880
it responded that it has to do something

1982
01:12:06,880 --> 01:12:08,400
with the internal data structure

1983
01:12:08,400 --> 01:12:11,679
and there was some flag missing out

1984
01:12:11,679 --> 01:12:13,600
and they have fixed it and it's all

1985
01:12:13,600 --> 01:12:17,280
available on the github issues

1986
01:12:19,840 --> 01:12:22,640
as a final example let's consider this

1987
01:12:22,640 --> 01:12:24,880
zone file and the test case

1988
01:12:24,880 --> 01:12:26,880
so there is a green name and the dname

1989
01:12:26,880 --> 01:12:28,640
causes an infinite loop because

1990
01:12:28,640 --> 01:12:31,520
it rewrites to something which is

1991
01:12:31,520 --> 01:12:33,520
actually the prefix of the virtual

1992
01:12:33,520 --> 01:12:37,280
domain name so query is written using

1993
01:12:37,280 --> 01:12:38,600
the name to

1994
01:12:38,600 --> 01:12:41,360
www.ubs.com and this new related query

1995
01:12:41,360 --> 01:12:43,040
will again match the dna and the length

1996
01:12:43,040 --> 01:12:45,600
keeps increasing

1997
01:12:45,600 --> 01:12:48,000
and this leads to an infinite recursion

1998
01:12:48,000 --> 01:12:49,679
in this case the implementations are

1999
01:12:49,679 --> 01:12:52,000
free to choose how they will respond

2000
01:12:52,000 --> 01:12:53,679
it is important that implementation

2001
01:12:53,679 --> 01:12:55,280
guard against these cases which can

2002
01:12:55,280 --> 01:12:56,719
otherwise lead to heavy resource

2003
01:12:56,719 --> 01:12:59,520
consumption by the name server

2004
01:12:59,520 --> 01:13:01,520
bind applies dna multiple times and

2005
01:13:01,520 --> 01:13:04,000
stops when limit reaches 17.

2006
01:13:04,000 --> 01:13:05,679
power dna has just returned surface in

2007
01:13:05,679 --> 01:13:07,280
this case

2008
01:13:07,280 --> 01:13:10,960
not and nsg applied dna only once

2009
01:13:10,960 --> 01:13:12,960
works here but had to be applied

2010
01:13:12,960 --> 01:13:15,040
multiple times when there is no loop

2011
01:13:15,040 --> 01:13:17,199
and we reported those cases and both

2012
01:13:17,199 --> 01:13:21,040
energy and not fix those issues

2013
01:13:22,640 --> 01:13:24,480
an interesting byproduct was that we

2014
01:13:24,480 --> 01:13:26,640
found an error in the not test suit

2015
01:13:26,640 --> 01:13:28,640
not had a test suit that compares the

2016
01:13:28,640 --> 01:13:30,719
responses with bind to follow bind and

2017
01:13:30,719 --> 01:13:31,520
they had a

2018
01:13:31,520 --> 01:13:33,120
comment mentioning that one of the tests

2019
01:13:33,120 --> 01:13:37,040
is for dmd name loop like the one above

2020
01:13:37,040 --> 01:13:39,120
unfortunately they did not construct the

2021
01:13:39,120 --> 01:13:40,239
zone file correctly

2022
01:13:40,239 --> 01:13:41,920
and the other led to having no loops at

2023
01:13:41,920 --> 01:13:43,760
all so

2024
01:13:43,760 --> 01:13:46,560
that was either they had of increasing

2025
01:13:46,560 --> 01:13:47,170
the uh

2026
01:13:47,170 --> 01:13:48,719
[Music]

2027
01:13:48,719 --> 01:13:50,960
target they decreased it so there was no

2028
01:13:50,960 --> 01:13:53,679
loop found because of that

2029
01:13:53,679 --> 01:13:55,600
when reported the developers agreed and

2030
01:13:55,600 --> 01:13:58,080
fixed it and the fix was they

2031
01:13:58,080 --> 01:14:00,080
went with a single response like they

2032
01:14:00,080 --> 01:14:03,199
use the name only once unlike the 173 uh

2033
01:14:03,199 --> 01:14:06,000
as the binders

2034
01:14:10,000 --> 01:14:12,719
so we have seen all the examples and

2035
01:14:12,719 --> 01:14:13,040
what

2036
01:14:13,040 --> 01:14:15,440
can be done so what is lurking in this

2037
01:14:15,440 --> 01:14:16,400
generation module

2038
01:14:16,400 --> 01:14:18,560
and how do we generate those test cases

2039
01:14:18,560 --> 01:14:21,280
automatically

2040
01:14:25,280 --> 01:14:28,159
so we use the rfcs and from the rfcs we

2041
01:14:28,159 --> 01:14:30,080
have earlier built a formal model of the

2042
01:14:30,080 --> 01:14:32,000
name server semantics

2043
01:14:32,000 --> 01:14:34,239
it's like a mathematical specification

2044
01:14:34,239 --> 01:14:35,199
of the lookup

2045
01:14:35,199 --> 01:14:38,400
logic like it's

2046
01:14:38,400 --> 01:14:40,159
it's a declarative model of how the

2047
01:14:40,159 --> 01:14:42,000
lookup has to happen and we built it

2048
01:14:42,000 --> 01:14:43,920
from the rfc mainly the one two three

2049
01:14:43,920 --> 01:14:45,120
four four five eight one double six

2050
01:14:45,120 --> 01:14:47,360
seven

2051
01:14:48,719 --> 01:14:51,120
now we perform symbolic execution on the

2052
01:14:51,120 --> 01:14:51,920
model

2053
01:14:51,920 --> 01:14:54,000
symbolic execution is a static analysis

2054
01:14:54,000 --> 01:14:55,920
technique that animates execution paths

2055
01:14:55,920 --> 01:14:56,640
in a program

2056
01:14:56,640 --> 01:14:59,679
and uses so this is a path

2057
01:14:59,679 --> 01:15:01,679
so for the query and zone to end up at

2058
01:15:01,679 --> 01:15:03,440
even branch you need an exact match

2059
01:15:03,440 --> 01:15:04,719
followed by whether the records are

2060
01:15:04,719 --> 01:15:06,400
authoritative and if there is an exact

2061
01:15:06,400 --> 01:15:07,280
type then you

2062
01:15:07,280 --> 01:15:10,320
take this branch

2063
01:15:10,320 --> 01:15:11,760
so these are the four constraints that

2064
01:15:11,760 --> 01:15:13,760
need to be satisfied if you want to take

2065
01:15:13,760 --> 01:15:15,440
that branch

2066
01:15:15,440 --> 01:15:17,280
and now we put these constraints in an

2067
01:15:17,280 --> 01:15:19,120
automatic constraint solver to produce

2068
01:15:19,120 --> 01:15:19,840
an input

2069
01:15:19,840 --> 01:15:21,760
that will take each eliminated path

2070
01:15:21,760 --> 01:15:23,600
thereby generating tests that cover many

2071
01:15:23,600 --> 01:15:26,800
different program behaviors

2072
01:15:29,840 --> 01:15:31,920
to actually do the symbolic execution on

2073
01:15:31,920 --> 01:15:33,120
the mathematical model

2074
01:15:33,120 --> 01:15:34,800
we made an executable version of the

2075
01:15:34,800 --> 01:15:37,679
formal model and it is implemented in

2076
01:15:37,679 --> 01:15:39,600
a domain specific modeling language

2077
01:15:39,600 --> 01:15:40,960
embedded in c sharp

2078
01:15:40,960 --> 01:15:42,400
with built-in support for symbolic

2079
01:15:42,400 --> 01:15:44,239
execution so

2080
01:15:44,239 --> 01:15:46,320
we took the rfcs built a mathematical

2081
01:15:46,320 --> 01:15:47,840
model first and then converted an

2082
01:15:47,840 --> 01:15:50,000
executable model

2083
01:15:50,000 --> 01:15:52,080
now we symbolically execute the model to

2084
01:15:52,080 --> 01:15:54,000
generate the test cases

2085
01:15:54,000 --> 01:15:56,000
the test cases are basically a pair of

2086
01:15:56,000 --> 01:15:59,040
zone file and a query

2087
01:15:59,040 --> 01:16:02,080
and after the test cases are generated

2088
01:16:02,080 --> 01:16:03,840
we use it in the diffusion testing model

2089
01:16:03,840 --> 01:16:05,360
and these are the statistics of the

2090
01:16:05,360 --> 01:16:06,960
number of tests generated for each

2091
01:16:06,960 --> 01:16:09,120
branch

2092
01:16:09,120 --> 01:16:10,880
because symbolic execution does not

2093
01:16:10,880 --> 01:16:13,840
scale for large uh

2094
01:16:13,840 --> 01:16:15,520
for large sizes of the domain names we

2095
01:16:15,520 --> 01:16:17,600
consider that the zone file will have

2096
01:16:17,600 --> 01:16:19,280
not less not more than four records and

2097
01:16:19,280 --> 01:16:20,640
the length of the domain names are also

2098
01:16:20,640 --> 01:16:23,120
less than four

2099
01:16:23,120 --> 01:16:25,280
so there are around uh 10 branches that

2100
01:16:25,280 --> 01:16:27,199
we found in the lookup logic and these

2101
01:16:27,199 --> 01:16:28,480
are the total number of test cases

2102
01:16:28,480 --> 01:16:31,440
generated for each

2103
01:16:32,840 --> 01:16:34,800
branch

2104
01:16:34,800 --> 01:16:36,800
and now we have the test and then we put

2105
01:16:36,800 --> 01:16:38,000
it through all the

2106
01:16:38,000 --> 01:16:39,440
one test case at a time through all the

2107
01:16:39,440 --> 01:16:41,440
implementations get the response from

2108
01:16:41,440 --> 01:16:43,280
all eight implementations compare them

2109
01:16:43,280 --> 01:16:44,480
and group them

2110
01:16:44,480 --> 01:16:46,159
if there is a single group then there

2111
01:16:46,159 --> 01:16:48,560
are no issues like all is good

2112
01:16:48,560 --> 01:16:50,960
but if there is more than one group then

2113
01:16:50,960 --> 01:16:52,640
there is a likely chance that one of

2114
01:16:52,640 --> 01:16:55,760
them is misbehaving

2115
01:16:56,560 --> 01:16:59,760
so we had 12 000 tests and out of them

2116
01:16:59,760 --> 01:17:00,480
only 4

2117
01:17:00,480 --> 01:17:03,440
400 had response out of them fourteen

2118
01:17:03,440 --> 01:17:05,760
four hundred made a single guru

2119
01:17:05,760 --> 01:17:07,840
there were eight thousand tests in which

2120
01:17:07,840 --> 01:17:09,199
at least there was one implementation

2121
01:17:09,199 --> 01:17:10,480
which differed from the rest of the

2122
01:17:10,480 --> 01:17:12,640
others

2123
01:17:12,640 --> 01:17:15,760
but that's too many to check manually

2124
01:17:15,760 --> 01:17:17,679
and there are generally typically orders

2125
01:17:17,679 --> 01:17:19,440
of magnitude fewer root causes for these

2126
01:17:19,440 --> 01:17:21,920
deviations

2127
01:17:21,920 --> 01:17:24,400
so we do a kind of fingerprinting we

2128
01:17:24,400 --> 01:17:25,040
fingerprint

2129
01:17:25,040 --> 01:17:27,840
each of the failed tests to group and so

2130
01:17:27,840 --> 01:17:29,679
that we reduce the number of

2131
01:17:29,679 --> 01:17:33,199
test cases that we need to inspect

2132
01:17:35,120 --> 01:17:36,239
so these are the statistics of the

2133
01:17:36,239 --> 01:17:37,679
number of tests for each model and the

2134
01:17:37,679 --> 01:17:39,440
number of tests failing for that

2135
01:17:39,440 --> 01:17:41,920
model case model case is basically the

2136
01:17:41,920 --> 01:17:43,360
branch in the formal model

2137
01:17:43,360 --> 01:17:45,520
and even basically like exact match when

2138
01:17:45,520 --> 01:17:48,880
there is an exact type also

2139
01:17:49,600 --> 01:17:52,320
we fingerprint the failed test and a

2140
01:17:52,320 --> 01:17:54,000
fingerprint for each test leverages both

2141
01:17:54,000 --> 01:17:55,600
the specification based and the

2142
01:17:55,600 --> 01:17:57,360
differential testing and then groups

2143
01:17:57,360 --> 01:17:59,199
test by fingerprint

2144
01:17:59,199 --> 01:18:01,440
so for each failed test we use the model

2145
01:18:01,440 --> 01:18:03,360
case due to which it was generated

2146
01:18:03,360 --> 01:18:04,800
and the unique implementations in each

2147
01:18:04,800 --> 01:18:07,040
group from the responses

2148
01:18:07,040 --> 01:18:10,080
for example this is one example of a

2149
01:18:10,080 --> 01:18:10,960
fingerprint

2150
01:18:10,960 --> 01:18:12,800
this in this test case the test case was

2151
01:18:12,800 --> 01:18:14,000
generated because of

2152
01:18:14,000 --> 01:18:17,040
r1 branch and on this test case

2153
01:18:17,040 --> 01:18:19,760
nsd not power dns and edifica had one

2154
01:18:19,760 --> 01:18:20,480
response

2155
01:18:20,480 --> 01:18:22,239
binding codiness had one response trust

2156
01:18:22,239 --> 01:18:24,000
genius and millionaire server reference

2157
01:18:24,000 --> 01:18:25,199
and there's three dif and the three

2158
01:18:25,199 --> 01:18:28,639
responses were different from each other

2159
01:18:30,239 --> 01:18:32,640
and the reasoning behind all of this is

2160
01:18:32,640 --> 01:18:34,480
it's unlikely for different unique bugs

2161
01:18:34,480 --> 01:18:37,199
to have the same fingerprint

2162
01:18:37,199 --> 01:18:39,760
now after we do the fingerprinting we

2163
01:18:39,760 --> 01:18:40,640
end up with

2164
01:18:40,640 --> 01:18:43,679
almost 70 uh fingerprints a reduction of

2165
01:18:43,679 --> 01:18:46,400
more than two orders of magnitude

2166
01:18:46,400 --> 01:18:49,040
and some fingerprints had only one test

2167
01:18:49,040 --> 01:18:50,560
somehow four and some higher more than

2168
01:18:50,560 --> 01:18:53,199
ten test cases

2169
01:18:53,199 --> 01:18:55,199
and we inspected all the number all the

2170
01:18:55,199 --> 01:18:56,640
fingerprints that had four or fewer

2171
01:18:56,640 --> 01:18:57,600
number of tests

2172
01:18:57,600 --> 01:18:59,440
and for the other ones we randomly

2173
01:18:59,440 --> 01:19:03,360
sampled the test from each fingerprint

2174
01:19:03,360 --> 01:19:05,440
once again this is the total list of the

2175
01:19:05,440 --> 01:19:07,040
bugs that we found by inspecting the

2176
01:19:07,040 --> 01:19:08,000
failed test cases

2177
01:19:08,000 --> 01:19:11,360
using the fingerprinting technique

2178
01:19:11,600 --> 01:19:14,239
out of the 30 almost 20 almost all of

2179
01:19:14,239 --> 01:19:15,760
them are confirmed except two in code

2180
01:19:15,760 --> 01:19:16,640
dns

2181
01:19:16,640 --> 01:19:19,199
which are which i filed and they haven't

2182
01:19:19,199 --> 01:19:20,960
responded yet but there are also

2183
01:19:20,960 --> 01:19:24,239
some issues recording this

2184
01:19:24,239 --> 01:19:25,840
and in the mara danis and trust genius

2185
01:19:25,840 --> 01:19:27,040
there are a lot more issues that we've

2186
01:19:27,040 --> 01:19:27,679
found

2187
01:19:27,679 --> 01:19:29,679
but we haven't reported them because

2188
01:19:29,679 --> 01:19:31,120
they have they are missing out some

2189
01:19:31,120 --> 01:19:32,320
features or they don't have

2190
01:19:32,320 --> 01:19:34,840
something some of the features

2191
01:19:34,840 --> 01:19:37,840
implemented

2192
01:19:38,640 --> 01:19:41,760
now this is all good and now how do

2193
01:19:41,760 --> 01:19:43,679
as a if you're developing a new dna

2194
01:19:43,679 --> 01:19:45,679
software how do you test using this

2195
01:19:45,679 --> 01:19:48,960
framework so all you need is first

2196
01:19:48,960 --> 01:19:50,800
generate a docker image for your

2197
01:19:50,800 --> 01:19:53,600
implementation start a container with

2198
01:19:53,600 --> 01:19:55,600
the host port mapped to port 53 of the

2199
01:19:55,600 --> 01:19:57,280
container

2200
01:19:57,280 --> 01:20:00,320
and you need a small script to stop the

2201
01:20:00,320 --> 01:20:03,360
server running in the container

2202
01:20:03,360 --> 01:20:05,280
modify the configuration files that you

2203
01:20:05,280 --> 01:20:07,360
need to for example for bind you need to

2204
01:20:07,360 --> 01:20:08,719
change the name dot config

2205
01:20:08,719 --> 01:20:11,360
for uh not you need to change the lever

2206
01:20:11,360 --> 01:20:12,000
script so

2207
01:20:12,000 --> 01:20:13,600
you need a small script to change this

2208
01:20:13,600 --> 01:20:16,080
and restart the circle

2209
01:20:16,080 --> 01:20:17,920
and then now it's your choice to pick

2210
01:20:17,920 --> 01:20:18,960
from the 18th condition that we

2211
01:20:18,960 --> 01:20:20,239
currently have

2212
01:20:20,239 --> 01:20:21,679
are the ones that you want to compare

2213
01:20:21,679 --> 01:20:24,400
your implementation with

2214
01:20:24,400 --> 01:20:26,400
the docker makes it quite simple to test

2215
01:20:26,400 --> 01:20:27,440
new implementations and

2216
01:20:27,440 --> 01:20:29,360
also add any existing implementations

2217
01:20:29,360 --> 01:20:30,719
that currently

2218
01:20:30,719 --> 01:20:34,880
support dns authoritative logic

2219
01:20:41,920 --> 01:20:45,440
and so now the fedex model as of now is

2220
01:20:45,440 --> 01:20:46,880
there is a test generation module and

2221
01:20:46,880 --> 01:20:48,080
then there is a differential testing

2222
01:20:48,080 --> 01:20:49,679
module

2223
01:20:49,679 --> 01:20:52,080
but what if you want to test a custom

2224
01:20:52,080 --> 01:20:53,120
test

2225
01:20:53,120 --> 01:20:54,719
it's simply you need to just plug in

2226
01:20:54,719 --> 01:20:56,080
before the differential testing module

2227
01:20:56,080 --> 01:20:59,040
and it will all work

2228
01:20:59,040 --> 01:21:01,760
but the more interesting case is how

2229
01:21:01,760 --> 01:21:02,400
about

2230
01:21:02,400 --> 01:21:04,560
uh how do we test or any implementation

2231
01:21:04,560 --> 01:21:06,880
specific behaviors on our zone files

2232
01:21:06,880 --> 01:21:08,719
let's say i have used the resound files

2233
01:21:08,719 --> 01:21:09,920
i want to know is there any

2234
01:21:09,920 --> 01:21:11,760
implementation on which

2235
01:21:11,760 --> 01:21:14,800
these zone files will cause a difference

2236
01:21:14,800 --> 01:21:17,840
so you have zone files and to test any

2237
01:21:17,840 --> 01:21:18,960
uh to test them

2238
01:21:18,960 --> 01:21:21,600
you need to use grooth groot is the tool

2239
01:21:21,600 --> 01:21:23,040
we built earlier which can generate

2240
01:21:23,040 --> 01:21:24,880
query equivalence classes

2241
01:21:24,880 --> 01:21:26,719
and i won't go more details please see

2242
01:21:26,719 --> 01:21:29,600
our paper or two for those details

2243
01:21:29,600 --> 01:21:31,520
now you can pick one query from each

2244
01:21:31,520 --> 01:21:33,120
equance class and then test

2245
01:21:33,120 --> 01:21:35,440
using the zone files this way you can

2246
01:21:35,440 --> 01:21:37,040
also check your zone files to see if

2247
01:21:37,040 --> 01:21:38,000
there are any

2248
01:21:38,000 --> 01:21:43,040
differences among the implementations

2249
01:21:43,040 --> 01:21:45,920
finally from all of this uh these are

2250
01:21:45,920 --> 01:21:47,520
the lessons that we learned like

2251
01:21:47,520 --> 01:21:49,679
no two name servers agree completely on

2252
01:21:49,679 --> 01:21:52,480
all the test cases

2253
01:21:52,480 --> 01:21:55,120
and nobody agrees with the rfcs also

2254
01:21:55,120 --> 01:21:56,320
perfectly like there is no hundred

2255
01:21:56,320 --> 01:21:58,960
percent match

2256
01:21:59,520 --> 01:22:01,600
rsvs do the job well but there are some

2257
01:22:01,600 --> 01:22:02,960
gaps and ambiguities

2258
01:22:02,960 --> 01:22:06,159
for example it's in rfc 103 for exactly

2259
01:22:06,159 --> 01:22:08,000
that cname loop should be signaled as

2260
01:22:08,000 --> 01:22:08,639
errors

2261
01:22:08,639 --> 01:22:10,639
but at what point our whether it should

2262
01:22:10,639 --> 01:22:11,920
be unrolled at all

2263
01:22:11,920 --> 01:22:15,360
should the loop rrs be returned at all

2264
01:22:15,360 --> 01:22:17,440
for another example is any synthesizer

2265
01:22:17,440 --> 01:22:19,440
name from dname is a perfect response to

2266
01:22:19,440 --> 01:22:22,320
a cname query

2267
01:22:22,560 --> 01:22:24,400
when rfcs are open to interpretation

2268
01:22:24,400 --> 01:22:26,159
implementations make choice based on

2269
01:22:26,159 --> 01:22:27,760
performance resource constraints and

2270
01:22:27,760 --> 01:22:28,560
safety

2271
01:22:28,560 --> 01:22:30,719
for example in the cname loop case

2272
01:22:30,719 --> 01:22:32,560
powered dns regions are fail otherwise

2273
01:22:32,560 --> 01:22:34,080
under the blue up to some point and

2274
01:22:34,080 --> 01:22:37,120
written under loop

2275
01:22:37,679 --> 01:22:40,000
so the interesting point here is like

2276
01:22:40,000 --> 01:22:41,440
should the resolvers account for these

2277
01:22:41,440 --> 01:22:42,880
different choices

2278
01:22:42,880 --> 01:22:44,239
which will make the reservoirs more

2279
01:22:44,239 --> 01:22:46,719
complex and lead to interactivity issues

2280
01:22:46,719 --> 01:22:49,520
or should the rfcs be more verbose and

2281
01:22:49,520 --> 01:22:51,280
stringent and mention all the cases

2282
01:22:51,280 --> 01:22:53,840
perfectly well

2283
01:22:55,440 --> 01:22:58,159
to conclude we've i presented our tool

2284
01:22:58,159 --> 01:22:59,760
for it which can automatically generate

2285
01:22:59,760 --> 01:23:01,440
tests for names of implementations

2286
01:23:01,440 --> 01:23:03,040
and it generates high coverage test

2287
01:23:03,040 --> 01:23:04,880
suits stress testing many corner cases

2288
01:23:04,880 --> 01:23:06,639
of rfcs

2289
01:23:06,639 --> 01:23:08,400
and we use differential testing to

2290
01:23:08,400 --> 01:23:10,080
compare multiple implementations

2291
01:23:10,080 --> 01:23:11,840
and we tested eight implementations

2292
01:23:11,840 --> 01:23:13,360
found 13 new books

2293
01:23:13,360 --> 01:23:15,199
and both the ferret and group are

2294
01:23:15,199 --> 01:23:16,400
available on github

2295
01:23:16,400 --> 01:23:18,840
and you can reach me at this email thank

2296
01:23:18,840 --> 01:23:21,840
you

2297
01:23:22,400 --> 01:23:25,679
fantastic uh very impactful work

2298
01:23:25,679 --> 01:23:28,080
okay we have i want to remind everybody

2299
01:23:28,080 --> 01:23:30,000
uh that you can ask questions in

2300
01:23:30,000 --> 01:23:32,960
the q a panel and or raise your hand if

2301
01:23:32,960 --> 01:23:34,400
you would like to ask your question

2302
01:23:34,400 --> 01:23:35,679
verbally

2303
01:23:35,679 --> 01:23:39,199
our first comment from peter van dyke

2304
01:23:39,199 --> 01:23:42,320
this is awesome thank you for this work

2305
01:23:42,320 --> 01:23:45,360
and thank you for

2306
01:23:45,360 --> 01:23:48,000
your very clear bug reports both to us

2307
01:23:48,000 --> 01:23:48,960
power dns

2308
01:23:48,960 --> 01:23:52,159
and to other projects

2309
01:23:52,400 --> 01:23:55,840
uh joe abele is asking a question

2310
01:23:55,840 --> 01:23:59,120
uh i'm sorry not a question this is

2311
01:23:59,120 --> 01:24:00,159
insanely great

2312
01:24:00,159 --> 01:24:03,760
i agree really comprehensive and useful

2313
01:24:03,760 --> 01:24:06,960
thank you jacques is saying

2314
01:24:06,960 --> 01:24:09,040
did you say you generate the tests by

2315
01:24:09,040 --> 01:24:12,080
parsing the rfcs automatically

2316
01:24:12,080 --> 01:24:15,280
yes interesting

2317
01:24:15,280 --> 01:24:18,400
okay uh vicky risk has asked uh i

2318
01:24:18,400 --> 01:24:21,040
said uh i was skeptical skeptical at the

2319
01:24:21,040 --> 01:24:21,840
beginning

2320
01:24:21,840 --> 01:24:24,239
but i agree this is great i love the

2321
01:24:24,239 --> 01:24:26,639
comparison between the implementations

2322
01:24:26,639 --> 01:24:28,639
is there a list of which rfcs you

2323
01:24:28,639 --> 01:24:32,560
analyze to create your test cases

2324
01:24:33,040 --> 01:24:36,400
um we mostly analyzed cname

2325
01:24:36,400 --> 01:24:40,880
the name a quad a and soa ns record type

2326
01:24:40,880 --> 01:24:41,520
so

2327
01:24:41,520 --> 01:24:43,360
that basically is one zero three four

2328
01:24:43,360 --> 01:24:44,719
double six seven two

2329
01:24:44,719 --> 01:24:47,760
and the white cards is four five nine

2330
01:24:47,760 --> 01:24:48,080
two

2331
01:24:48,080 --> 01:24:49,520
as far as i remember so these are the

2332
01:24:49,520 --> 01:24:53,040
three offers that we took into account

2333
01:24:53,040 --> 01:24:55,040
okay we have a follow-up question from

2334
01:24:55,040 --> 01:24:56,560
jacques latorre he asked a question

2335
01:24:56,560 --> 01:24:58,480
about uh

2336
01:24:58,480 --> 01:25:02,159
how you are he's asking how did you uh

2337
01:25:02,159 --> 01:25:05,280
parse the rfcs to to do that

2338
01:25:05,280 --> 01:25:06,800
automatically

2339
01:25:06,800 --> 01:25:09,199
okay i think probably it's but i we

2340
01:25:09,199 --> 01:25:12,000
didn't pass the rfc so we read the rfcs

2341
01:25:12,000 --> 01:25:13,840
and then i manually we manually

2342
01:25:13,840 --> 01:25:15,840
converted them into formal model

2343
01:25:15,840 --> 01:25:17,360
and then we encourage the form of model

2344
01:25:17,360 --> 01:25:19,440
in the zen language so we didn't

2345
01:25:19,440 --> 01:25:21,120
automatically pass the office we just

2346
01:25:21,120 --> 01:25:22,960
read it through understood and then

2347
01:25:22,960 --> 01:25:24,840
converted into a mathematical form

2348
01:25:24,840 --> 01:25:27,520
operation

2349
01:25:27,520 --> 01:25:29,760
okay uh we have a couple raised hands

2350
01:25:29,760 --> 01:25:30,800
we'll go force

2351
01:25:30,800 --> 01:25:33,760
first to uh siobhan sahib siobhan if you

2352
01:25:33,760 --> 01:25:35,600
want to unmute yourself

2353
01:25:35,600 --> 01:25:38,000
sure yeah this is this is fantastic just

2354
01:25:38,000 --> 01:25:39,280
a quick question

2355
01:25:39,280 --> 01:25:41,520
um i tried looking on github for some

2356
01:25:41,520 --> 01:25:42,320
sample

2357
01:25:42,320 --> 01:25:44,000
test cases that you generate i couldn't

2358
01:25:44,000 --> 01:25:46,480
really find any do you have like a

2359
01:25:46,480 --> 01:25:49,760
like a dump of what a test suite would

2360
01:25:49,760 --> 01:25:51,520
look like somewhere

2361
01:25:51,520 --> 01:25:54,639
oh i i just made the code public but i

2362
01:25:54,639 --> 01:25:55,679
did not make the

2363
01:25:55,679 --> 01:25:58,560
test cases public yet i can do that i

2364
01:25:58,560 --> 01:25:59,840
think this is just working

2365
01:25:59,840 --> 01:26:01,199
we are submitting to a conference i did

2366
01:26:01,199 --> 01:26:03,840
not make everything public yet

2367
01:26:03,840 --> 01:26:05,760
okay yeah i just wanted to take a look

2368
01:26:05,760 --> 01:26:07,040
at what the test case

2369
01:26:07,040 --> 01:26:09,600
format looks like um and you know yeah

2370
01:26:09,600 --> 01:26:11,120
that's an example one

2371
01:26:11,120 --> 01:26:14,000
yeah but otherwise this is great thanks

2372
01:26:14,000 --> 01:26:15,760
thank you

2373
01:26:15,760 --> 01:26:20,400
all right uh brian dixon asks

2374
01:26:20,400 --> 01:26:22,560
do you have employment lined up yet he's

2375
01:26:22,560 --> 01:26:24,480
half joking and wants to say awesome

2376
01:26:24,480 --> 01:26:25,600
work

2377
01:26:25,600 --> 01:26:27,760
thank you i'm still in fourth year it'll

2378
01:26:27,760 --> 01:26:29,199
probably take one or two more years to

2379
01:26:29,199 --> 01:26:31,599
graduate

2380
01:26:32,159 --> 01:26:34,840
all right uh any other questions for

2381
01:26:34,840 --> 01:26:37,840
siva

2382
01:26:39,679 --> 01:26:42,000
okay uh well thank you very much siva

2383
01:26:42,000 --> 01:26:44,639
again this is amazing not just as uh

2384
01:26:44,639 --> 01:26:47,280
as a tool for quality assurance and

2385
01:26:47,280 --> 01:26:48,960
finding differences in the software but

2386
01:26:48,960 --> 01:26:49,600
it's

2387
01:26:49,600 --> 01:26:51,760
as far as i know uh one of the better

2388
01:26:51,760 --> 01:26:53,679
tools out there for the fingerprinting

2389
01:26:53,679 --> 01:26:55,120
of dns servers which

2390
01:26:55,120 --> 01:26:57,920
we used to be able to do well and over

2391
01:26:57,920 --> 01:26:59,520
the last few years not so much so it's

2392
01:26:59,520 --> 01:27:00,719
super great that you were able to

2393
01:27:00,719 --> 01:27:02,320
achieve this

2394
01:27:02,320 --> 01:27:03,840
thank you thank you thanks for all the

2395
01:27:03,840 --> 01:27:05,679
good comments

2396
01:27:05,679 --> 01:27:09,440
okay our next presentation uh will be

2397
01:27:09,440 --> 01:27:13,280
from alison mankin and siobhan sahib

2398
01:27:13,280 --> 01:27:16,400
uh siobhan will be on the screen first

2399
01:27:16,400 --> 01:27:17,679
and the presentation

2400
01:27:17,679 --> 01:27:20,800
is planning and deployment of dns zone

2401
01:27:20,800 --> 01:27:21,760
transfers over

2402
01:27:21,760 --> 01:27:24,480
tls siobhan if you'd like to share your

2403
01:27:24,480 --> 01:27:25,520
screen

2404
01:27:25,520 --> 01:27:28,400
yes hello everyone my name is siobhan

2405
01:27:28,400 --> 01:27:29,280
and

2406
01:27:29,280 --> 01:27:32,000
i work at brave software and but this

2407
01:27:32,000 --> 01:27:33,040
work

2408
01:27:33,040 --> 01:27:35,679
was done at salesforce i'm here today

2409
01:27:35,679 --> 01:27:37,120
with addison mankin

2410
01:27:37,120 --> 01:27:39,600
um and we'll be talking about planning

2411
01:27:39,600 --> 01:27:41,360
and deployment of dns zone transfers

2412
01:27:41,360 --> 01:27:42,560
over tls

2413
01:27:42,560 --> 01:27:44,560
um i also wanted to give a shout out to

2414
01:27:44,560 --> 01:27:45,600
our co-authors

2415
01:27:45,600 --> 01:27:48,080
william pallavi and especially sarah for

2416
01:27:48,080 --> 01:27:49,120
whom right now

2417
01:27:49,120 --> 01:27:51,280
is an ungodly hour so she couldn't be

2418
01:27:51,280 --> 01:27:52,400
here but

2419
01:27:52,400 --> 01:27:54,800
thanks to her especially for driving

2420
01:27:54,800 --> 01:27:55,520
this work

2421
01:27:55,520 --> 01:28:00,080
over the past little while and ray and

2422
01:28:00,080 --> 01:28:01,440
i'll be giving the first part of the

2423
01:28:01,440 --> 01:28:03,520
talk and alison will be

2424
01:28:03,520 --> 01:28:06,800
giving the second part okay

2425
01:28:06,800 --> 01:28:09,520
so for a little bit of background why do

2426
01:28:09,520 --> 01:28:10,159
we need

2427
01:28:10,159 --> 01:28:13,679
xfr over tls um so currently like many

2428
01:28:13,679 --> 01:28:14,480
parts

2429
01:28:14,480 --> 01:28:18,080
of the dns protocol or at least uh until

2430
01:28:18,080 --> 01:28:19,520
like until recently

2431
01:28:19,520 --> 01:28:22,800
um the zone data transfers were um

2432
01:28:22,800 --> 01:28:24,560
unencrypted so zone data could be

2433
01:28:24,560 --> 01:28:26,320
collected we have passive monitoring on

2434
01:28:26,320 --> 01:28:27,920
the wire

2435
01:28:27,920 --> 01:28:31,199
and zone data can be

2436
01:28:31,199 --> 01:28:33,440
sensitive data and especially for larger

2437
01:28:33,440 --> 01:28:34,719
organizations

2438
01:28:34,719 --> 01:28:38,960
so for several reasons policy regulatory

2439
01:28:38,960 --> 01:28:40,639
you might want to keep these

2440
01:28:40,639 --> 01:28:43,199
your own contents as a transfer between

2441
01:28:43,199 --> 01:28:45,199
primary and secondary private

2442
01:28:45,199 --> 01:28:47,679
um so that is the main motivation for

2443
01:28:47,679 --> 01:28:49,679
xfr over tls to prevent its own data

2444
01:28:49,679 --> 01:28:51,840
collection during transfer

2445
01:28:51,840 --> 01:28:54,719
and our proposed our proposal for this

2446
01:28:54,719 --> 01:28:55,520
is

2447
01:28:55,520 --> 01:28:57,600
encrypting dns zone transfers so both

2448
01:28:57,600 --> 01:28:59,440
axfr and ixfr

2449
01:28:59,440 --> 01:29:03,040
using tls as a transport

2450
01:29:03,040 --> 01:29:06,800
and the use cases are confidentiality so

2451
01:29:06,800 --> 01:29:09,040
putting it over tls would encrypt would

2452
01:29:09,040 --> 01:29:10,560
defeat the zone content

2453
01:29:10,560 --> 01:29:13,120
zone content leakage problem um

2454
01:29:13,120 --> 01:29:14,000
authentication

2455
01:29:14,000 --> 01:29:16,719
is a big one so we can use single or

2456
01:29:16,719 --> 01:29:18,719
mutual tls authentication

2457
01:29:18,719 --> 01:29:21,120
between the client and the server the

2458
01:29:21,120 --> 01:29:22,639
primary and the secondary which can

2459
01:29:22,639 --> 01:29:23,280
complement

2460
01:29:23,280 --> 01:29:26,400
keysig and access control lists

2461
01:29:26,400 --> 01:29:29,040
and also performance because the current

2462
01:29:29,040 --> 01:29:29,920
usage of

2463
01:29:29,920 --> 01:29:33,600
usage of tcp for x so far is often

2464
01:29:33,600 --> 01:29:36,320
not great and we'll be going into that a

2465
01:29:36,320 --> 01:29:38,080
little bit more detail

2466
01:29:38,080 --> 01:29:40,880
and just to give a quick status update

2467
01:29:40,880 --> 01:29:41,199
um

2468
01:29:41,199 --> 01:29:44,639
it is a it is an iatf draft and it is

2469
01:29:44,639 --> 01:29:47,760
now in the later stages of review before

2470
01:29:47,760 --> 01:29:49,760
publication as an rfc

2471
01:29:49,760 --> 01:29:51,760
uh and there are multiple

2472
01:29:51,760 --> 01:29:53,280
implementations and

2473
01:29:53,280 --> 01:29:55,120
deployments are being planned and

2474
01:29:55,120 --> 01:29:56,800
allison will be talking more about that

2475
01:29:56,800 --> 01:29:58,880
later on

2476
01:29:58,880 --> 01:30:02,239
so just to give a quick description of

2477
01:30:02,239 --> 01:30:03,040
what

2478
01:30:03,040 --> 01:30:04,480
this would look like so on the left hand

2479
01:30:04,480 --> 01:30:07,120
side you can see

2480
01:30:07,120 --> 01:30:10,320
there is the the ix of our request from

2481
01:30:10,320 --> 01:30:11,280
response

2482
01:30:11,280 --> 01:30:14,400
happens over udp or dcp and this kind of

2483
01:30:14,400 --> 01:30:15,679
happens in clear text

2484
01:30:15,679 --> 01:30:18,480
and we are proposing that you put the ix

2485
01:30:18,480 --> 01:30:19,600
of our

2486
01:30:19,600 --> 01:30:22,159
request and response which constitutes a

2487
01:30:22,159 --> 01:30:23,199
zone data

2488
01:30:23,199 --> 01:30:26,400
transfer in uh in a taylor session uh in

2489
01:30:26,400 --> 01:30:28,480
a long-lived tls session

2490
01:30:28,480 --> 01:30:31,840
and you we optionally also

2491
01:30:31,840 --> 01:30:33,440
suggest that you can use that you can

2492
01:30:33,440 --> 01:30:35,360
put the soa request and response

2493
01:30:35,360 --> 01:30:37,520
but um we did a threat analysis and we

2494
01:30:37,520 --> 01:30:38,480
consider

2495
01:30:38,480 --> 01:30:41,280
um for the purposes of this traffic the

2496
01:30:41,280 --> 01:30:42,880
really sensitive data is really the zone

2497
01:30:42,880 --> 01:30:43,679
data so that's

2498
01:30:43,679 --> 01:30:45,920
crucial and optionally you can also add

2499
01:30:45,920 --> 01:30:47,040
the seo request

2500
01:30:47,040 --> 01:30:51,360
response we mandate that all exoquire

2501
01:30:51,360 --> 01:30:54,560
messages must use tls 1.3

2502
01:30:54,560 --> 01:30:57,840
or later and

2503
01:30:57,840 --> 01:31:01,280
we have port 853

2504
01:31:01,280 --> 01:31:03,280
we manage the usage of that just like

2505
01:31:03,280 --> 01:31:05,600
dns over tls although you can

2506
01:31:05,600 --> 01:31:09,120
negotiate a different part and uh

2507
01:31:09,120 --> 01:31:10,159
servers are pre-trip

2508
01:31:10,159 --> 01:31:12,400
use other queries on azure connection so

2509
01:31:12,400 --> 01:31:13,280
we are not

2510
01:31:13,280 --> 01:31:15,679
in any way mandating the authoritative

2511
01:31:15,679 --> 01:31:18,480
dns over tls support

2512
01:31:18,480 --> 01:31:21,920
and to do this you can use extended dns

2513
01:31:21,920 --> 01:31:22,560
error code

2514
01:31:22,560 --> 01:31:25,600
not supported which is

2515
01:31:25,600 --> 01:31:28,480
now a published rfc and we also go into

2516
01:31:28,480 --> 01:31:30,480
some detail in the draft

2517
01:31:30,480 --> 01:31:32,719
around the various different operational

2518
01:31:32,719 --> 01:31:34,719
and policy options you have

2519
01:31:34,719 --> 01:31:38,400
for managing dot connections

2520
01:31:38,400 --> 01:31:41,600
um and historically xfr has been

2521
01:31:41,600 --> 01:31:43,199
somewhat basic when it comes to tcp

2522
01:31:43,199 --> 01:31:45,760
usage so earlier specifications

2523
01:31:45,760 --> 01:31:47,280
actually had implications about using

2524
01:31:47,280 --> 01:31:49,199
just one connection per

2525
01:31:49,199 --> 01:31:51,600
xfr message um and this was updated

2526
01:31:51,600 --> 01:31:52,400
somewhat for

2527
01:31:52,400 --> 01:31:56,480
axfr later on but the zod draft

2528
01:31:56,480 --> 01:32:00,320
updates specs for both ixfr and axfr

2529
01:32:00,320 --> 01:32:03,120
to recommend efficient usage of tcp so

2530
01:32:03,120 --> 01:32:03,600
we

2531
01:32:03,600 --> 01:32:06,639
recommend um multiplexing xfrs

2532
01:32:06,639 --> 01:32:08,639
or even for even for different zones on

2533
01:32:08,639 --> 01:32:10,000
the same connection

2534
01:32:10,000 --> 01:32:12,000
uh pipelining queries and out of order

2535
01:32:12,000 --> 01:32:13,120
responses

2536
01:32:13,120 --> 01:32:15,440
um and we also recommend you the usage

2537
01:32:15,440 --> 01:32:16,159
of

2538
01:32:16,159 --> 01:32:18,960
edn s0 keeper live to keep the

2539
01:32:18,960 --> 01:32:19,679
connections

2540
01:32:19,679 --> 01:32:24,480
um open for reuse to improve performance

2541
01:32:24,719 --> 01:32:26,400
and we went into some detail in the

2542
01:32:26,400 --> 01:32:28,080
draft talking about the authentication

2543
01:32:28,080 --> 01:32:29,360
mechanisms

2544
01:32:29,360 --> 01:32:32,000
and um here you can see that we kind of

2545
01:32:32,000 --> 01:32:33,280
uh try to see

2546
01:32:33,280 --> 01:32:34,480
what are the properties that you would

2547
01:32:34,480 --> 01:32:36,159
like so if you like data original

2548
01:32:36,159 --> 01:32:36,960
authentication

2549
01:32:36,960 --> 01:32:39,120
channel confident neutrality and channel

2550
01:32:39,120 --> 01:32:41,040
authentication for both the secondary

2551
01:32:41,040 --> 01:32:43,840
and the primary um and the security

2552
01:32:43,840 --> 01:32:45,440
mechanisms that we have for that for

2553
01:32:45,440 --> 01:32:47,360
that are tsig tls

2554
01:32:47,360 --> 01:32:49,280
and there's a few different options for

2555
01:32:49,280 --> 01:32:50,480
tls and

2556
01:32:50,480 --> 01:32:54,239
and then acls on primary and the draft

2557
01:32:54,239 --> 01:32:55,199
recommends that

2558
01:32:55,199 --> 01:32:57,920
uh or mandates that the secondary must

2559
01:32:57,920 --> 01:32:58,960
always use

2560
01:32:58,960 --> 01:33:01,600
strict tls so you get for you so you get

2561
01:33:01,600 --> 01:33:03,360
channel confidentiality and

2562
01:33:03,360 --> 01:33:05,040
authentication because the server is

2563
01:33:05,040 --> 01:33:06,480
authenticated

2564
01:33:06,480 --> 01:33:10,560
but the primary um can use um

2565
01:33:10,560 --> 01:33:12,320
mtls which is preferred so in that case

2566
01:33:12,320 --> 01:33:13,840
the client is also

2567
01:33:13,840 --> 01:33:15,520
authenticated and you get the

2568
01:33:15,520 --> 01:33:18,000
confidentiality from the tls session

2569
01:33:18,000 --> 01:33:21,520
but you can also use ip

2570
01:33:21,520 --> 01:33:26,159
acl along with strict tls

2571
01:33:27,120 --> 01:33:29,760
and i'll be handing it over to allison

2572
01:33:29,760 --> 01:33:30,960
now to talk about

2573
01:33:30,960 --> 01:33:36,000
implementation and deployment status

2574
01:33:36,000 --> 01:33:38,719
so uh this is about the implementation

2575
01:33:38,719 --> 01:33:40,560
and deployment status

2576
01:33:40,560 --> 01:33:43,760
the um the key thing for us is that

2577
01:33:43,760 --> 01:33:47,120
um that protocols

2578
01:33:47,120 --> 01:33:50,000
uh sometimes we expect them to kind of

2579
01:33:50,000 --> 01:33:51,360
deploy themselves

2580
01:33:51,360 --> 01:33:54,239
we have spent a fair amount of time

2581
01:33:54,239 --> 01:33:55,600
during this whole process

2582
01:33:55,600 --> 01:33:57,760
as part of the itf's more hands-on and

2583
01:33:57,760 --> 01:33:59,280
hackathon process

2584
01:33:59,280 --> 01:34:01,520
working hard with implementations

2585
01:34:01,520 --> 01:34:02,800
working hard with

2586
01:34:02,800 --> 01:34:04,400
operators asking them how they might

2587
01:34:04,400 --> 01:34:06,239
deploy this getting a sense of the

2588
01:34:06,239 --> 01:34:08,239
the realities of trying to use this in

2589
01:34:08,239 --> 01:34:10,080
the field

2590
01:34:10,080 --> 01:34:12,239
this has allowed us to be able to say at

2591
01:34:12,239 --> 01:34:13,199
the time of

2592
01:34:13,199 --> 01:34:15,600
near publication the isg is nearly

2593
01:34:15,600 --> 01:34:16,719
finished with approved

2594
01:34:16,719 --> 01:34:18,480
proving this there's just a couple of

2595
01:34:18,480 --> 01:34:20,239
revisions to make

2596
01:34:20,239 --> 01:34:22,800
that um we have a lot of a lot of like

2597
01:34:22,800 --> 01:34:23,520
uh

2598
01:34:23,520 --> 01:34:26,480
preparation for both for deployment so

2599
01:34:26,480 --> 01:34:29,040
first of all on the implementation front

2600
01:34:29,040 --> 01:34:32,480
um bind worked with the team

2601
01:34:32,480 --> 01:34:34,960
with the the author team uh at

2602
01:34:34,960 --> 01:34:36,560
hackathons and other

2603
01:34:36,560 --> 01:34:38,159
ways sarah worked with them on helping

2604
01:34:38,159 --> 01:34:41,679
to provide some some

2605
01:34:42,000 --> 01:34:45,520
some um requirements

2606
01:34:45,520 --> 01:34:48,880
uh to uh provide every uh support for

2607
01:34:48,880 --> 01:34:49,199
the

2608
01:34:49,199 --> 01:34:52,400
the uh zot in um

2609
01:34:52,400 --> 01:34:54,719
a good form in 917 which is a

2610
01:34:54,719 --> 01:34:55,520
development

2611
01:34:55,520 --> 01:34:58,639
branch we are in discussion with when it

2612
01:34:58,639 --> 01:35:01,119
will be back ported to 916

2613
01:35:01,119 --> 01:35:04,560
we expect it to be um tested

2614
01:35:04,560 --> 01:35:06,080
there's some more work to do but we

2615
01:35:06,080 --> 01:35:07,760
expect it to be available in a

2616
01:35:07,760 --> 01:35:11,199
in a in a production capability

2617
01:35:11,199 --> 01:35:13,199
uh in a time frame that is pretty

2618
01:35:13,199 --> 01:35:15,600
practical pretty pragmatic

2619
01:35:15,600 --> 01:35:19,440
uh unbound has uh been involved and

2620
01:35:19,440 --> 01:35:21,360
and then labs unbond has been involved

2621
01:35:21,360 --> 01:35:23,600
in this work for the whole time willem

2622
01:35:23,600 --> 01:35:25,360
is one of our co-authors

2623
01:35:25,360 --> 01:35:27,840
and unbound itself has the ability to do

2624
01:35:27,840 --> 01:35:30,239
part of zot which is the secondaries

2625
01:35:30,239 --> 01:35:34,000
ax of rsi we have also worked with the

2626
01:35:34,000 --> 01:35:35,199
nlnet labs

2627
01:35:35,199 --> 01:35:38,320
to prepare prs against nsd

2628
01:35:38,320 --> 01:35:42,320
which is which are more complete which

2629
01:35:42,320 --> 01:35:44,480
include client-side and server-side

2630
01:35:44,480 --> 01:35:47,520
zod support connection reuse as well uh

2631
01:35:47,520 --> 01:35:47,920
the

2632
01:35:47,920 --> 01:35:50,560
prs are planned for inclusion in our

2633
01:35:50,560 --> 01:35:52,159
latest discussion with willem

2634
01:35:52,159 --> 01:35:54,480
in the 437 release so there's a very

2635
01:35:54,480 --> 01:35:56,400
concrete plan there as well

2636
01:35:56,400 --> 01:35:58,800
we expect to have we did a lot of drop

2637
01:35:58,800 --> 01:35:59,679
testing

2638
01:35:59,679 --> 01:36:01,760
at the itf 110 hackathon and we'll be

2639
01:36:01,760 --> 01:36:05,040
doing it again at the 111 hackathon

2640
01:36:05,040 --> 01:36:08,719
uh in um sorry in

2641
01:36:08,719 --> 01:36:11,760
uh with bind and msd and power dns

2642
01:36:11,760 --> 01:36:14,400
and also with some other of the operator

2643
01:36:14,400 --> 01:36:15,119
players

2644
01:36:15,119 --> 01:36:19,600
next slide please in terms of operations

2645
01:36:19,600 --> 01:36:22,400
diverse managed dns server operators are

2646
01:36:22,400 --> 01:36:24,159
important for zot because as

2647
01:36:24,159 --> 01:36:25,520
people arranged to have some

2648
01:36:25,520 --> 01:36:27,280
heterogeneity in their

2649
01:36:27,280 --> 01:36:30,560
their xfr's bond and nsd were featured

2650
01:36:30,560 --> 01:36:32,080
in particular in the work

2651
01:36:32,080 --> 01:36:35,600
that that my part of the team did

2652
01:36:35,600 --> 01:36:38,880
because operators had had a use of those

2653
01:36:38,880 --> 01:36:40,480
particular stacks

2654
01:36:40,480 --> 01:36:43,520
so ultra dns the new start company

2655
01:36:43,520 --> 01:36:46,320
has a service which is oriented towards

2656
01:36:46,320 --> 01:36:48,880
tlds called xtld which is based on

2657
01:36:48,880 --> 01:36:52,400
very plain bind servers pch which

2658
01:36:52,400 --> 01:36:53,280
provides a

2659
01:36:53,280 --> 01:36:55,679
very large number of secondary services

2660
01:36:55,679 --> 01:36:57,600
uses bind nsd

2661
01:36:57,600 --> 01:36:59,679
so we get a lot of practical clout from

2662
01:36:59,679 --> 01:37:01,199
making a fairly complete

2663
01:37:01,199 --> 01:37:02,719
service in those two deploy

2664
01:37:02,719 --> 01:37:04,320
implementations

2665
01:37:04,320 --> 01:37:06,400
both of those vendors have been open

2666
01:37:06,400 --> 01:37:08,000
both of those operators have been open

2667
01:37:08,000 --> 01:37:08,960
with a commitment

2668
01:37:08,960 --> 01:37:11,440
that they will offer zot in a product

2669
01:37:11,440 --> 01:37:12,320
form

2670
01:37:12,320 --> 01:37:14,239
when the implementations have reached

2671
01:37:14,239 --> 01:37:15,520
product level

2672
01:37:15,520 --> 01:37:18,960
and we want to especially flag that pch

2673
01:37:18,960 --> 01:37:21,119
has a very strong set of privacy first

2674
01:37:21,119 --> 01:37:22,239
policies

2675
01:37:22,239 --> 01:37:23,920
and that when they get to the point that

2676
01:37:23,920 --> 01:37:25,360
zot can be a product

2677
01:37:25,360 --> 01:37:27,600
they expect to make the default offering

2678
01:37:27,600 --> 01:37:29,280
for secondary service

2679
01:37:29,280 --> 01:37:31,280
eventually as customers get more

2680
01:37:31,280 --> 01:37:33,440
interested and express more interest

2681
01:37:33,440 --> 01:37:34,800
it might even be something they would

2682
01:37:34,800 --> 01:37:36,880
consider making mandatory

2683
01:37:36,880 --> 01:37:39,199
as a way of emphasizing their their

2684
01:37:39,199 --> 01:37:41,199
privacy first approaches to

2685
01:37:41,199 --> 01:37:44,560
operations next side please siobhan

2686
01:37:44,560 --> 01:37:47,119
there's some challenges when you deploy

2687
01:37:47,119 --> 01:37:47,840
we define

2688
01:37:47,840 --> 01:37:50,480
a transfer group as all the servers

2689
01:37:50,480 --> 01:37:51,119
involved

2690
01:37:51,119 --> 01:37:54,159
for transfers in a given zone um there's

2691
01:37:54,159 --> 01:37:56,080
could be multiple primaries there can be

2692
01:37:56,080 --> 01:37:57,679
multiple secondaries from multiple

2693
01:37:57,679 --> 01:38:00,400
operators different implementations

2694
01:38:00,400 --> 01:38:02,480
it's quite important from a security

2695
01:38:02,480 --> 01:38:04,800
standpoint that you not have a weakest

2696
01:38:04,800 --> 01:38:05,280
link

2697
01:38:05,280 --> 01:38:08,480
no weak point there tcig tls

2698
01:38:08,480 --> 01:38:11,600
uh decisions single or mutual

2699
01:38:11,600 --> 01:38:14,880
um ipacls those things should be

2700
01:38:14,880 --> 01:38:17,760
consistent across the transfer group in

2701
01:38:17,760 --> 01:38:19,760
order to make sure that there isn't one

2702
01:38:19,760 --> 01:38:23,040
particular server that that uh transfer

2703
01:38:23,040 --> 01:38:25,119
which is more visible or easy to catch

2704
01:38:25,119 --> 01:38:25,520
from

2705
01:38:25,520 --> 01:38:28,159
from an adversary so the challenge is

2706
01:38:28,159 --> 01:38:28,880
how would you

2707
01:38:28,880 --> 01:38:31,679
configure and enforce and test all that

2708
01:38:31,679 --> 01:38:32,080
um

2709
01:38:32,080 --> 01:38:34,880
we expect to spend time in the hackathon

2710
01:38:34,880 --> 01:38:36,159
working on that

2711
01:38:36,159 --> 01:38:38,320
um there's there's a lot of interesting

2712
01:38:38,320 --> 01:38:40,320
approach issues and that's one of the

2713
01:38:40,320 --> 01:38:42,080
things that we hope to do from this talk

2714
01:38:42,080 --> 01:38:43,840
is attract more attention and interest

2715
01:38:43,840 --> 01:38:45,199
because we'd like for people to work

2716
01:38:45,199 --> 01:38:45,920
with us

2717
01:38:45,920 --> 01:38:48,800
next slide please

2718
01:38:49,760 --> 01:38:52,239
the further deployment challenges are

2719
01:38:52,239 --> 01:38:52,960
that

2720
01:38:52,960 --> 01:38:56,000
um that you can't expect

2721
01:38:56,000 --> 01:38:57,840
an all or nothing rollout but we are

2722
01:38:57,840 --> 01:38:59,280
actually pretty strict about what's

2723
01:38:59,280 --> 01:39:01,920
required in order to have secure result

2724
01:39:01,920 --> 01:39:05,040
so you can expect that

2725
01:39:05,040 --> 01:39:08,239
uh there are three more minutes

2726
01:39:08,239 --> 01:39:11,119
you can expect to have a incremental

2727
01:39:11,119 --> 01:39:12,800
experience for a while

2728
01:39:12,800 --> 01:39:14,080
and then say at some point you've

2729
01:39:14,080 --> 01:39:16,239
reached full zot um

2730
01:39:16,239 --> 01:39:18,400
we need to have all secondaries having a

2731
01:39:18,400 --> 01:39:20,560
client inside implementation that's one

2732
01:39:20,560 --> 01:39:23,440
reason we focused on that

2733
01:39:23,440 --> 01:39:25,840
not all dns operators have a lot of

2734
01:39:25,840 --> 01:39:27,360
experience with certificate management

2735
01:39:27,360 --> 01:39:28,560
but we think that's actually

2736
01:39:28,560 --> 01:39:31,679
a a feature not a bug and

2737
01:39:31,679 --> 01:39:33,440
there's some other paths such as dynamic

2738
01:39:33,440 --> 01:39:35,199
updates next slide please

2739
01:39:35,199 --> 01:39:38,639
uh siobhan uh in breaking news the

2740
01:39:38,639 --> 01:39:42,480
the isg uh uh pointed out to us that

2741
01:39:42,480 --> 01:39:44,480
there's a recent ietf directive for

2742
01:39:44,480 --> 01:39:46,400
alpine to be required

2743
01:39:46,400 --> 01:39:48,639
alpin is the application layered

2744
01:39:48,639 --> 01:39:49,840
protocol

2745
01:39:49,840 --> 01:39:52,880
uh identifier in tls

2746
01:39:52,880 --> 01:39:55,920
and so we'll use outpen equals dot we

2747
01:39:55,920 --> 01:39:58,080
don't think this applies to

2748
01:39:58,080 --> 01:40:01,520
to old stub to recursive dot um

2749
01:40:01,520 --> 01:40:04,000
because it was before it predated that

2750
01:40:04,000 --> 01:40:04,800
um

2751
01:40:04,800 --> 01:40:06,560
i think we're short of time so let's uh

2752
01:40:06,560 --> 01:40:08,159
skip over this talk

2753
01:40:08,159 --> 01:40:11,840
this particular bullet so in summary

2754
01:40:11,840 --> 01:40:14,320
zot will soon be a new itf standard

2755
01:40:14,320 --> 01:40:15,840
there are implementations

2756
01:40:15,840 --> 01:40:17,679
people are planning offerings there's

2757
01:40:17,679 --> 01:40:19,199
ongoing work including the

2758
01:40:19,199 --> 01:40:22,239
upcoming hackathon we didn't mention but

2759
01:40:22,239 --> 01:40:24,000
padding is an important feature for

2760
01:40:24,000 --> 01:40:26,000
getting really good privacy and so

2761
01:40:26,000 --> 01:40:28,480
new work is starting up on that and also

2762
01:40:28,480 --> 01:40:29,040
on

2763
01:40:29,040 --> 01:40:30,480
the encryption that you would do for

2764
01:40:30,480 --> 01:40:32,159
dynamic dns update

2765
01:40:32,159 --> 01:40:34,560
and peel please uh contact us in the zot

2766
01:40:34,560 --> 01:40:36,639
channel and work mattermost and feel

2767
01:40:36,639 --> 01:40:37,360
free to

2768
01:40:37,360 --> 01:40:41,520
join us in the hackathon upcoming at itf

2769
01:40:41,520 --> 01:40:45,119
and now i think it's time for questions

2770
01:40:45,199 --> 01:40:47,440
wonderful thank you siobhan and allison

2771
01:40:47,440 --> 01:40:49,520
uh our first question comes from joe

2772
01:40:49,520 --> 01:40:50,400
ably

2773
01:40:50,400 --> 01:40:51,760
and the comparison of different

2774
01:40:51,760 --> 01:40:53,840
authentication mechanisms

2775
01:40:53,840 --> 01:40:57,520
doesn't t6 provide channel off

2776
01:40:57,520 --> 01:41:01,440
and not origin off a t6 secret is

2777
01:41:01,440 --> 01:41:03,679
specified to a single edge

2778
01:41:03,679 --> 01:41:05,760
in the transfer graph but that edge is

2779
01:41:05,760 --> 01:41:08,320
not necessarily bound to the origin

2780
01:41:08,320 --> 01:41:10,239
unless i misunderstand what you mean by

2781
01:41:10,239 --> 01:41:12,719
the word origin

2782
01:41:12,719 --> 01:41:16,000
right um yeah so t-sig is not i guess

2783
01:41:16,000 --> 01:41:17,840
we were trying to say that it is bound

2784
01:41:17,840 --> 01:41:20,239
to more um like the data side of things

2785
01:41:20,239 --> 01:41:20,639
so

2786
01:41:20,639 --> 01:41:23,360
one one party is saying that you know

2787
01:41:23,360 --> 01:41:24,080
this is

2788
01:41:24,080 --> 01:41:26,320
it's a pre-shared key in a sense um so

2789
01:41:26,320 --> 01:41:27,920
that is what we were saying it's not

2790
01:41:27,920 --> 01:41:30,560
it's not like an endpoint and like a tls

2791
01:41:30,560 --> 01:41:31,360
connection where

2792
01:41:31,360 --> 01:41:32,960
you're saying that this particular

2793
01:41:32,960 --> 01:41:34,400
endpoint is

2794
01:41:34,400 --> 01:41:37,760
uh is making is making the um

2795
01:41:37,760 --> 01:41:39,679
making the connection and and you if you

2796
01:41:39,679 --> 01:41:41,360
know that that is verified

2797
01:41:41,360 --> 01:41:43,360
uh is then you can authenticate against

2798
01:41:43,360 --> 01:41:45,600
that um but i think i missed

2799
01:41:45,600 --> 01:41:49,440
the first part of the question

2800
01:41:49,440 --> 01:41:51,600
uh the first part of the question was in

2801
01:41:51,600 --> 01:41:52,800
the comparison of different

2802
01:41:52,800 --> 01:41:54,639
authentication mechanisms

2803
01:41:54,639 --> 01:41:57,760
doesn't t-sig provide channel off not

2804
01:41:57,760 --> 01:42:00,880
origin off well

2805
01:42:00,880 --> 01:42:02,560
so we consider channelout as in like

2806
01:42:02,560 --> 01:42:04,239
literally being the channel between

2807
01:42:04,239 --> 01:42:06,639
um the two parties like the server and

2808
01:42:06,639 --> 01:42:07,440
the

2809
01:42:07,440 --> 01:42:08,880
uh the client or the primary and the

2810
01:42:08,880 --> 01:42:10,800
secondary so um

2811
01:42:10,800 --> 01:42:12,480
yeah in that sense uh we were

2812
01:42:12,480 --> 01:42:15,040
considering that to be providing that

2813
01:42:15,040 --> 01:42:18,239
not uh per se i could speak to a little

2814
01:42:18,239 --> 01:42:19,920
bit further that actually came up in the

2815
01:42:19,920 --> 01:42:21,760
isg review i don't know if you

2816
01:42:21,760 --> 01:42:24,000
if you've caught up with all of that in

2817
01:42:24,000 --> 01:42:25,840
fact uh we

2818
01:42:25,840 --> 01:42:28,400
uh there isn't origin off because the

2819
01:42:28,400 --> 01:42:29,040
the um

2820
01:42:29,040 --> 01:42:32,080
the ip address is not covered by the

2821
01:42:32,080 --> 01:42:33,520
authentication

2822
01:42:33,520 --> 01:42:36,480
um and so it is possible it's actually i

2823
01:42:36,480 --> 01:42:36,800
think

2824
01:42:36,800 --> 01:42:40,159
intended that you could have multiple uh

2825
01:42:40,159 --> 01:42:43,920
multiple channels as joe said so um

2826
01:42:43,920 --> 01:42:47,440
tsig is not uh t6 combined with

2827
01:42:47,440 --> 01:42:51,119
with um tls

2828
01:42:51,119 --> 01:42:53,040
provides you a better situation in terms

2829
01:42:53,040 --> 01:42:55,520
of with a form of tls authentication

2830
01:42:55,520 --> 01:42:57,600
but that's why we require a form of tls

2831
01:42:57,600 --> 01:42:59,119
authentication we actually

2832
01:42:59,119 --> 01:43:02,320
require strict authentication and then

2833
01:43:02,320 --> 01:43:04,239
if you have the strict authentication in

2834
01:43:04,239 --> 01:43:06,560
place you actually will also be covering

2835
01:43:06,560 --> 01:43:07,440
the origin

2836
01:43:07,440 --> 01:43:10,320
the the ip address origin um but we

2837
01:43:10,320 --> 01:43:11,280
actually uh

2838
01:43:11,280 --> 01:43:12,880
mutual author will be better for this

2839
01:43:12,880 --> 01:43:14,719
purpose um

2840
01:43:14,719 --> 01:43:16,800
so i i hope that's clear enough the the

2841
01:43:16,800 --> 01:43:18,320
spec is actually

2842
01:43:18,320 --> 01:43:20,960
uh has a lot of material on that topic

2843
01:43:20,960 --> 01:43:22,840
so you can read up a little bit more on

2844
01:43:22,840 --> 01:43:24,719
it

2845
01:43:24,719 --> 01:43:27,040
okay uh paul hoffman has a question paul

2846
01:43:27,040 --> 01:43:30,320
if you wanted to unmute yourself

2847
01:43:31,920 --> 01:43:35,440
thank you um so allison great however

2848
01:43:35,440 --> 01:43:37,520
you skipped over the one slide i wanted

2849
01:43:37,520 --> 01:43:39,280
to hear most about which was the last

2850
01:43:39,280 --> 01:43:40,320
one

2851
01:43:40,320 --> 01:43:43,600
on alpn simply because i'm wondering

2852
01:43:43,600 --> 01:43:47,119
how much is like i could not keep up

2853
01:43:47,119 --> 01:43:49,119
with the traffic on the list of what was

2854
01:43:49,119 --> 01:43:50,480
going to change

2855
01:43:50,480 --> 01:43:53,199
in the draft with respect to alpn and

2856
01:43:53,199 --> 01:43:54,719
how much is this going to affect

2857
01:43:54,719 --> 01:43:56,320
implementations

2858
01:43:56,320 --> 01:43:58,960
um if we're if you're changing what the

2859
01:43:58,960 --> 01:44:01,040
alpn is so if you can

2860
01:44:01,040 --> 01:44:02,960
go back and give a bit more detail that

2861
01:44:02,960 --> 01:44:04,800
would be great could you roll that slide

2862
01:44:04,800 --> 01:44:06,320
back for us thank you

2863
01:44:06,320 --> 01:44:09,520
um so we think that it's a few lines of

2864
01:44:09,520 --> 01:44:11,280
code to say in the tls

2865
01:44:11,280 --> 01:44:14,320
that alpine equals dot um we are

2866
01:44:14,320 --> 01:44:15,760
expected to use

2867
01:44:15,760 --> 01:44:18,800
the same alpen as any other dot

2868
01:44:18,800 --> 01:44:22,880
in particular a dot um we won't have a

2869
01:44:22,880 --> 01:44:25,840
an issue and so then the question is do

2870
01:44:25,840 --> 01:44:27,520
you how do you distinguish if you're if

2871
01:44:27,520 --> 01:44:28,880
you're running both

2872
01:44:28,880 --> 01:44:32,239
and um the hidden primaries which is

2873
01:44:32,239 --> 01:44:34,080
often what you're using in the case

2874
01:44:34,080 --> 01:44:37,760
of second of uh xfr uh will not have

2875
01:44:37,760 --> 01:44:39,199
that problem because they won't actually

2876
01:44:39,199 --> 01:44:40,480
be serving a dot

2877
01:44:40,480 --> 01:44:43,679
they won't be serving a uh um

2878
01:44:43,679 --> 01:44:47,119
uh queries but uh you also have the

2879
01:44:47,119 --> 01:44:49,040
option of running zot on

2880
01:44:49,040 --> 01:44:52,159
its own specific ip address report

2881
01:44:52,159 --> 01:44:53,760
which is something that you can agree on

2882
01:44:53,760 --> 01:44:55,360
in that transfer group which gives you

2883
01:44:55,360 --> 01:44:57,520
some flexibility about this as well

2884
01:44:57,520 --> 01:45:00,080
but bottom line the uh this discussion

2885
01:45:00,080 --> 01:45:02,320
which was all public on the itf list and

2886
01:45:02,320 --> 01:45:04,080
on the dns privacy list

2887
01:45:04,080 --> 01:45:07,199
sorry on the dns privacy email list is

2888
01:45:07,199 --> 01:45:08,159
that

2889
01:45:08,159 --> 01:45:11,440
alpine equals dot for all the dot

2890
01:45:11,440 --> 01:45:15,199
families and uh definitely is going to

2891
01:45:15,199 --> 01:45:16,880
be there for za and we don't think it's

2892
01:45:16,880 --> 01:45:18,800
a lot of extra code to do that part of

2893
01:45:18,800 --> 01:45:20,000
the work

2894
01:45:20,000 --> 01:45:21,360
and we also spoke to a couple of

2895
01:45:21,360 --> 01:45:23,920
implementations and they seem to be

2896
01:45:23,920 --> 01:45:26,239
fine with that as well yeah okay so and

2897
01:45:26,239 --> 01:45:28,000
this won't this won't have a negative

2898
01:45:28,000 --> 01:45:29,199
effect on

2899
01:45:29,199 --> 01:45:30,960
the fact that as you had showed in

2900
01:45:30,960 --> 01:45:33,199
earlier slides there's already a lot of

2901
01:45:33,199 --> 01:45:34,320
implementation

2902
01:45:34,320 --> 01:45:36,000
you're not concerned about this late

2903
01:45:36,000 --> 01:45:37,679
change um

2904
01:45:37,679 --> 01:45:40,880
causing incompatibilities and such if if

2905
01:45:40,880 --> 01:45:42,480
i'd been a little if it wasn't quite as

2906
01:45:42,480 --> 01:45:43,760
late at night i would have mentioned

2907
01:45:43,760 --> 01:45:45,360
what siobhan just said which was we went

2908
01:45:45,360 --> 01:45:46,239
back to all

2909
01:45:46,239 --> 01:45:48,719
of the implementation teams and asked

2910
01:45:48,719 --> 01:45:50,239
them about it and also

2911
01:45:50,239 --> 01:45:53,119
including uh including um peter from

2912
01:45:53,119 --> 01:45:54,400
powerdns

2913
01:45:54,400 --> 01:45:56,719
and that was not a big concern to add

2914
01:45:56,719 --> 01:45:58,000
this particular capab

2915
01:45:58,000 --> 01:46:00,320
uh to add up an equal dot and and use

2916
01:46:00,320 --> 01:46:01,920
that part of tls

2917
01:46:01,920 --> 01:46:05,600
very good thank you yeah

2918
01:46:07,600 --> 01:46:10,239
all right i've seen no additional

2919
01:46:10,239 --> 01:46:12,239
questions or hand raised so i would like

2920
01:46:12,239 --> 01:46:12,800
to

2921
01:46:12,800 --> 01:46:15,520
thank you both siobhan and allison for

2922
01:46:15,520 --> 01:46:16,960
your presentation

2923
01:46:16,960 --> 01:46:19,360
and with that we'll pass things over to

2924
01:46:19,360 --> 01:46:20,560
keith mitchell

2925
01:46:20,560 --> 01:46:23,600
keith yeah thank you jake for your um

2926
01:46:23,600 --> 01:46:24,719
session sharing for the last two

2927
01:46:24,719 --> 01:46:25,600
sessions and also

2928
01:46:25,600 --> 01:46:27,440
pallavi for timekeeping and thank you to

2929
01:46:27,440 --> 01:46:29,199
all of our speakers uh we're once again

2930
01:46:29,199 --> 01:46:30,880
absolutely spot on time with some really

2931
01:46:30,880 --> 01:46:31,520
good talks

2932
01:46:31,520 --> 01:46:33,440
um for the first first first half of

2933
01:46:33,440 --> 01:46:35,119
today um

2934
01:46:35,119 --> 01:46:36,560
additional thank you i'd like to thank

2935
01:46:36,560 --> 01:46:40,560
our sponsors farsight and verisign um

2936
01:46:40,560 --> 01:46:41,920
and we're now going to take a break for

2937
01:46:41,920 --> 01:46:43,840
90 minutes um so

2938
01:46:43,840 --> 01:46:45,679
chance for you to eat whatever meal is

2939
01:46:45,679 --> 01:46:47,600
appropriate in your time zone

2940
01:46:47,600 --> 01:46:50,320
uh which is a midnight snack in my case

2941
01:46:50,320 --> 01:46:50,800
um

2942
01:46:50,800 --> 01:46:53,679
and you can hang out in the spatial chat

2943
01:46:53,679 --> 01:46:54,000
so

2944
01:46:54,000 --> 01:46:57,760
there's um that's the

2945
01:46:57,760 --> 01:47:00,000
platform you used yesterday um you will

2946
01:47:00,000 --> 01:47:01,840
see instructions for how to join that if

2947
01:47:01,840 --> 01:47:03,679
you didn't get them already in the um

2948
01:47:03,679 --> 01:47:04,960
the rolling slides

2949
01:47:04,960 --> 01:47:09,840
so we will be restarting at

2950
01:47:10,159 --> 01:47:14,960
4 30 utc in 90 minutes times you there

2951
01:47:18,239 --> 01:47:21,679
hello everybody my name is

2952
01:47:21,679 --> 01:47:25,119
dylan thorpe and welcome back to this

2953
01:47:25,119 --> 01:47:29,679
third session of orc35

2954
01:47:29,679 --> 01:47:32,639
first of all i'd like to thank our

2955
01:47:32,639 --> 01:47:33,520
sponsors

2956
01:47:33,520 --> 01:47:38,400
for our site security and very shine

2957
01:47:38,560 --> 01:47:41,600
i also like to point out that the time

2958
01:47:41,600 --> 01:47:43,280
keeper of today will be

2959
01:47:43,280 --> 01:47:47,360
huyien and then without further ado

2960
01:47:47,360 --> 01:47:49,840
i would like to welcome our first

2961
01:47:49,840 --> 01:47:50,719
speaker

2962
01:47:50,719 --> 01:47:54,400
which is benner overreiner who will

2963
01:47:54,400 --> 01:47:57,920
present on keeping up with the itf

2964
01:47:57,920 --> 01:48:02,000
in the dns hop working group

2965
01:48:02,880 --> 01:48:06,080
welcome my name is bello overhead and i

2966
01:48:06,080 --> 01:48:07,520
will keep

2967
01:48:07,520 --> 01:48:10,239
keep you up to date with activities in

2968
01:48:10,239 --> 01:48:10,719
the

2969
01:48:10,719 --> 01:48:14,320
itf dynastar working group

2970
01:48:14,320 --> 01:48:16,960
it's covering quite a span of recent

2971
01:48:16,960 --> 01:48:18,080
proposals

2972
01:48:18,080 --> 01:48:20,960
progress and current working group

2973
01:48:20,960 --> 01:48:22,719
charts and finnish works

2974
01:48:22,719 --> 01:48:25,920
so given the time i will not go into

2975
01:48:25,920 --> 01:48:27,040
details but

2976
01:48:27,040 --> 01:48:30,719
just will bet your appetite for more

2977
01:48:30,719 --> 01:48:35,199
good this is the dns universe in the itf

2978
01:48:35,199 --> 01:48:39,360
um you see some faint stars you see some

2979
01:48:39,360 --> 01:48:42,560
bright stars but the activities in igf

2980
01:48:42,560 --> 01:48:46,719
are here in the stars with a red circle

2981
01:48:46,719 --> 01:48:49,840
i will mainly primarily touch upon

2982
01:48:49,840 --> 01:48:50,800
dinosaur

2983
01:48:50,800 --> 01:48:55,840
and also mention some deprive work

2984
01:48:55,840 --> 01:48:58,080
good

2985
01:48:59,280 --> 01:49:02,480
let's go to business finish work so work

2986
01:49:02,480 --> 01:49:03,840
that has been finished

2987
01:49:03,840 --> 01:49:07,840
during the last dinosaur uh

2988
01:49:07,840 --> 01:49:12,719
working group meeting at the igf-110

2989
01:49:13,280 --> 01:49:16,960
what was finished is the message diocese

2990
01:49:16,960 --> 01:49:18,000
for dinner sounds

2991
01:49:18,000 --> 01:49:21,199
zone mt so zone md

2992
01:49:21,199 --> 01:49:24,719
is uh securing a zone transfers

2993
01:49:24,719 --> 01:49:27,440
think of dinosaur protects resource

2994
01:49:27,440 --> 01:49:29,119
record sets

2995
01:49:29,119 --> 01:49:33,598
zone and the protect zone as a whole

2996
01:49:34,639 --> 01:49:38,159
think of well you can

2997
01:49:38,159 --> 01:49:39,730
validate the zone

2998
01:49:39,730 --> 01:49:41,199
[Music]

2999
01:49:41,199 --> 01:49:43,440
the file in its origin wanted to be

3000
01:49:43,440 --> 01:49:44,880
authenticity

3001
01:49:44,880 --> 01:49:48,000
uh typical use cases are for example

3002
01:49:48,000 --> 01:49:51,199
small zones being transferred

3003
01:49:51,199 --> 01:49:56,159
to resolvers for example

3004
01:49:56,159 --> 01:49:59,920
this root zone or a response policy zone

3005
01:49:59,920 --> 01:50:03,840
so for large and dynamic zones

3006
01:50:03,840 --> 01:50:07,040
this scheme is not yet suitable because

3007
01:50:07,040 --> 01:50:07,520
of

3008
01:50:07,520 --> 01:50:09,760
full validation or verification of the

3009
01:50:09,760 --> 01:50:11,599
zone

3010
01:50:11,599 --> 01:50:13,840
other work that has been finished

3011
01:50:13,840 --> 01:50:14,639
recently

3012
01:50:14,639 --> 01:50:18,000
in the digital dinosaur working group is

3013
01:50:18,000 --> 01:50:21,679
the server cookies it's

3014
01:50:21,679 --> 01:50:24,560
actually an update of an already

3015
01:50:24,560 --> 01:50:27,520
existing rfc

3016
01:50:27,719 --> 01:50:30,400
778-73

3017
01:50:30,400 --> 01:50:33,679
but it updates actually for this

3018
01:50:33,679 --> 01:50:36,400
rfc for interoperability in any car

3019
01:50:36,400 --> 01:50:38,719
setup so in any car setup with multiple

3020
01:50:38,719 --> 01:50:41,679
implementations

3021
01:50:41,679 --> 01:50:44,239
there were some operational issues that

3022
01:50:44,239 --> 01:50:45,040
some of the

3023
01:50:45,040 --> 01:50:47,199
cookies generated by one implementation

3024
01:50:47,199 --> 01:50:48,560
could not be

3025
01:50:48,560 --> 01:50:51,520
interpreted were not the algorithms the

3026
01:50:51,520 --> 01:50:53,040
hash alternatives were not

3027
01:50:53,040 --> 01:50:56,080
supported by the other implementation

3028
01:50:56,080 --> 01:51:00,719
so rfc 1918

3029
01:51:00,719 --> 01:51:04,000
corrected this to the server cookies

3030
01:51:04,000 --> 01:51:05,840
gives

3031
01:51:05,840 --> 01:51:08,719
protection against detox attacks or cash

3032
01:51:08,719 --> 01:51:10,560
poisoning

3033
01:51:10,560 --> 01:51:12,880
and it gives you a lightweight genesis

3034
01:51:12,880 --> 01:51:14,400
guinness transaction

3035
01:51:14,400 --> 01:51:18,400
mechanism good so this is work that is

3036
01:51:18,400 --> 01:51:19,040
just

3037
01:51:19,040 --> 01:51:21,840
recently finished

3038
01:51:22,960 --> 01:51:26,480
work almost finished in dinosaur

3039
01:51:26,480 --> 01:51:30,000
in working group last call is the svcp

3040
01:51:30,000 --> 01:51:34,320
hps draft or the service binding

3041
01:51:34,320 --> 01:51:38,480
parameter specification indians

3042
01:51:40,880 --> 01:51:44,480
this has been already presented by

3043
01:51:44,480 --> 01:51:47,199
ben schwartz in the previous award

3044
01:51:47,199 --> 01:51:49,520
meeting

3045
01:51:49,520 --> 01:51:54,239
it gives you a new family of uh

3046
01:51:54,239 --> 01:51:57,599
types of records that allows a client to

3047
01:51:57,599 --> 01:51:58,480
learn more about

3048
01:51:58,480 --> 01:52:00,880
the endpoint and the service provided

3049
01:52:00,880 --> 01:52:01,679
think of

3050
01:52:01,679 --> 01:52:05,760
dls or https in that it also improves

3051
01:52:05,760 --> 01:52:06,800
security

3052
01:52:06,800 --> 01:52:09,440
and performance and think also because

3053
01:52:09,440 --> 01:52:10,239
the other

3054
01:52:10,239 --> 01:52:13,599
endpoint and the service provides some

3055
01:52:13,599 --> 01:52:15,440
information about the endpoint

3056
01:52:15,440 --> 01:52:18,000
this also enables the license of the

3057
01:52:18,000 --> 01:52:19,760
apex domains i think of the

3058
01:52:19,760 --> 01:52:22,159
long standing discussion of cname in

3059
01:52:22,159 --> 01:52:23,119
apex

3060
01:52:23,119 --> 01:52:27,920
with svcp hps resource records

3061
01:52:27,920 --> 01:52:31,199
service binding and

3062
01:52:31,199 --> 01:52:35,280
draft this can be

3063
01:52:35,280 --> 01:52:38,400
specified and enabled so that's this

3064
01:52:38,400 --> 01:52:39,840
very nice

3065
01:52:39,840 --> 01:52:43,040
result here of the working group other

3066
01:52:43,040 --> 01:52:44,719
work

3067
01:52:44,719 --> 01:52:48,000
that's for working group last call is a

3068
01:52:48,000 --> 01:52:50,239
dns transport of tcp operational

3069
01:52:50,239 --> 01:52:51,679
requirements

3070
01:52:51,679 --> 01:52:55,280
uh this is both for an encrypted tcp

3071
01:52:55,280 --> 01:52:59,840
as well for encrypted tls sessions

3072
01:53:00,239 --> 01:53:03,440
this is an this this document also asks

3073
01:53:03,440 --> 01:53:04,000
for

3074
01:53:04,000 --> 01:53:07,679
feedback i i'm sure that john kristoff

3075
01:53:07,679 --> 01:53:09,119
asked for feedback on the genius

3076
01:53:09,119 --> 01:53:10,800
operations mailing list

3077
01:53:10,800 --> 01:53:13,920
so please well it's already it's

3078
01:53:13,920 --> 01:53:14,800
invoking

3079
01:53:14,800 --> 01:53:17,040
group last call so please give some

3080
01:53:17,040 --> 01:53:18,480
feedback here

3081
01:53:18,480 --> 01:53:22,239
um and it's still very valid thing here

3082
01:53:22,239 --> 01:53:24,960
because recently we had a discussion on

3083
01:53:24,960 --> 01:53:26,159
our mailing list

3084
01:53:26,159 --> 01:53:29,040
that an inbound user couldn't resolve

3085
01:53:29,040 --> 01:53:29,440
his

3086
01:53:29,440 --> 01:53:32,719
domain um and he thought there was some

3087
01:53:32,719 --> 01:53:34,080
error here

3088
01:53:34,080 --> 01:53:38,000
no but it's it's it

3089
01:53:38,639 --> 01:53:41,040
it was actually the case that he i don't

3090
01:53:41,040 --> 01:53:41,840
know why

3091
01:53:41,840 --> 01:53:44,080
he thought it was not necessary he

3092
01:53:44,080 --> 01:53:46,480
disabled uh tcp support in the

3093
01:53:46,480 --> 01:53:49,679
mount and his answers were well

3094
01:53:49,679 --> 01:53:51,360
his own was signed answers were too

3095
01:53:51,360 --> 01:53:54,159
large and he get the time out

3096
01:53:54,159 --> 01:53:56,159
instead of so he didn't expect this

3097
01:53:56,159 --> 01:53:58,400
behavior uh joe ably also

3098
01:53:58,400 --> 01:54:01,599
uh reacted on the mailing list

3099
01:54:01,599 --> 01:54:03,679
that this is also good feedback probably

3100
01:54:03,679 --> 01:54:04,719
for the draft

3101
01:54:04,719 --> 01:54:07,760
and the people are tcp is really

3102
01:54:07,760 --> 01:54:08,719
required for

3103
01:54:08,719 --> 01:54:11,679
proper operation of your precursor and

3104
01:54:11,679 --> 01:54:13,920
name server

3105
01:54:13,920 --> 01:54:18,320
good uh i have to speed up a bit

3106
01:54:18,320 --> 01:54:21,360
closer working group last call is the

3107
01:54:21,360 --> 01:54:24,159
well the revised ielts race for demon

3108
01:54:24,159 --> 01:54:24,960
sec

3109
01:54:24,960 --> 01:54:28,320
so historically it's kind of an

3110
01:54:28,320 --> 01:54:31,440
administrative rectification so

3111
01:54:31,440 --> 01:54:34,800
previous rfc's mentioned about

3112
01:54:34,800 --> 01:54:36,400
what give some requirements for the

3113
01:54:36,400 --> 01:54:38,719
insect algorithm but forgot to mention

3114
01:54:38,719 --> 01:54:40,639
to say something about the ds hash

3115
01:54:40,639 --> 01:54:42,880
algorithms

3116
01:54:42,880 --> 01:54:45,920
so this is in this draft

3117
01:54:45,920 --> 01:54:49,599
corrected rectified and the motivation

3118
01:54:49,599 --> 01:54:50,239
was that

3119
01:54:50,239 --> 01:54:52,159
uh with the introduction of national

3120
01:54:52,159 --> 01:54:54,719
crypto algorithms like bost

3121
01:54:54,719 --> 01:54:56,560
it doesn't know doesn't need to go

3122
01:54:56,560 --> 01:54:58,239
through the igf standards

3123
01:54:58,239 --> 01:55:02,239
track um right

3124
01:55:02,239 --> 01:55:05,280
close to working group last call is

3125
01:55:05,280 --> 01:55:08,320
closed sorry close not close to

3126
01:55:08,320 --> 01:55:10,719
close is the dinner screen name

3127
01:55:10,719 --> 01:55:12,960
minimization

3128
01:55:12,960 --> 01:55:16,719
it's the um sorry it's the

3129
01:55:16,719 --> 01:55:22,800
it's a base document of rfc 7816

3130
01:55:22,800 --> 01:55:25,679
even the practical experience uh and

3131
01:55:25,679 --> 01:55:26,560
deployment

3132
01:55:26,560 --> 01:55:30,000
of uh dynastream name immunization

3133
01:55:30,000 --> 01:55:31,599
this document has been rewritten and

3134
01:55:31,599 --> 01:55:33,040
updated so

3135
01:55:33,040 --> 01:55:36,400
that's this will be submitted to

3136
01:55:36,400 --> 01:55:39,440
to the isg and

3137
01:55:39,440 --> 01:55:43,360
other documents that has been closed

3138
01:55:43,360 --> 01:55:46,880
for the group is nsec nsac nsx3 ttl

3139
01:55:46,880 --> 01:55:49,360
and anzac aggressive use due to

3140
01:55:49,360 --> 01:55:50,239
combination of

3141
01:55:50,239 --> 01:55:51,840
unfortunate reporting or in earlier

3142
01:55:51,840 --> 01:55:54,400
documents the aggressive use of insect

3143
01:55:54,400 --> 01:55:57,280
and nsx3

3144
01:55:57,520 --> 01:56:01,360
records may deny names intended

3145
01:56:01,360 --> 01:56:04,000
longer than

3146
01:56:05,520 --> 01:56:08,400
has a longer intended lifetime of a

3147
01:56:08,400 --> 01:56:09,440
denial than

3148
01:56:09,440 --> 01:56:12,800
intended so this document changes the

3149
01:56:12,800 --> 01:56:13,599
definitions of

3150
01:56:13,599 --> 01:56:19,280
insect and nc3 to correct that situation

3151
01:56:19,840 --> 01:56:23,119
more work of active drafts in the

3152
01:56:23,119 --> 01:56:25,759
working group

3153
01:56:26,320 --> 01:56:29,520
so we have ginasec of sorry dns catalog

3154
01:56:29,520 --> 01:56:32,000
sales

3155
01:56:32,159 --> 01:56:35,360
it's it's provides it's an

3156
01:56:35,360 --> 01:56:39,199
uh provisioning mechanism by

3157
01:56:39,199 --> 01:56:41,920
giving syncing configurations from

3158
01:56:41,920 --> 01:56:43,440
primary to secondary

3159
01:56:43,440 --> 01:56:46,560
and it does so by

3160
01:56:46,560 --> 01:56:50,320
transferring a list of zones

3161
01:56:50,560 --> 01:56:54,080
run administrated by the primary

3162
01:56:54,080 --> 01:56:57,760
and sent to the secondary instead of

3163
01:56:57,760 --> 01:57:00,480
having uh changes at the primary and

3164
01:57:00,480 --> 01:57:00,880
also

3165
01:57:00,880 --> 01:57:03,199
manually changes at the secondary

3166
01:57:03,199 --> 01:57:04,560
because it's not

3167
01:57:04,560 --> 01:57:07,040
the zones that run at the primaries are

3168
01:57:07,040 --> 01:57:07,760
not

3169
01:57:07,760 --> 01:57:10,080
necessarily directly automatically

3170
01:57:10,080 --> 01:57:11,520
changed at the secondary

3171
01:57:11,520 --> 01:57:15,599
with the zac of dns catalog sounds

3172
01:57:15,599 --> 01:57:20,159
this can be automatically kept in sync

3173
01:57:20,159 --> 01:57:22,800
the authors ask for operators for use

3174
01:57:22,800 --> 01:57:24,239
cases and feedback

3175
01:57:24,239 --> 01:57:28,000
this at the mattermost our instance

3176
01:57:28,000 --> 01:57:30,560
a channel on this work so if you're

3177
01:57:30,560 --> 01:57:32,159
interested please join

3178
01:57:32,159 --> 01:57:36,000
the channel at the metamode server

3179
01:57:36,000 --> 01:57:39,040
another draft needs work

3180
01:57:39,040 --> 01:57:42,080
in the in the dinosaur working group is

3181
01:57:42,080 --> 01:57:43,040
uh dinosaur

3182
01:57:43,040 --> 01:57:46,880
dns avoid fragmentation so what's

3183
01:57:46,880 --> 01:57:51,119
the max size interval of gdp packets

3184
01:57:51,119 --> 01:57:55,199
so there are a number of sources so

3185
01:57:55,199 --> 01:58:00,400
uh rfc 4035 defines well ipv4

3186
01:58:00,400 --> 01:58:03,760
shoot mustang shoot at 1220

3187
01:58:03,760 --> 01:58:08,159
for ipv ip4 ipv6

3188
01:58:08,159 --> 01:58:11,920
a 4000 shoot but dns flag day last year

3189
01:58:11,920 --> 01:58:12,719
introduced

3190
01:58:12,719 --> 01:58:16,000
a recommendation of 1232

3191
01:58:16,000 --> 01:58:21,520
this was really an operational kind of

3192
01:58:21,520 --> 01:58:24,960
this was a value that worked very well

3193
01:58:24,960 --> 01:58:27,220
in operational environments

3194
01:58:27,220 --> 01:58:28,480
[Music]

3195
01:58:28,480 --> 01:58:31,119
jeff hewson did a number of measurements

3196
01:58:31,119 --> 01:58:32,800
ex

3197
01:58:32,800 --> 01:58:37,199
measuring the dfd the guinness flag day

3198
01:58:37,199 --> 01:58:40,320
and he came to some other values as a

3199
01:58:40,320 --> 01:58:41,920
recommendation

3200
01:58:41,920 --> 01:58:44,159
so it doesn't seem that the genus work

3201
01:58:44,159 --> 01:58:45,199
group comes to

3202
01:58:45,199 --> 01:58:48,560
one specific film but to arrange

3203
01:58:48,560 --> 01:58:52,239
to the interval valid of reasonable

3204
01:58:52,239 --> 01:58:56,880
values this discussion will also be

3205
01:58:56,880 --> 01:58:58,960
kicked off at the dean's homework group

3206
01:58:58,960 --> 01:59:00,000
mailing list

3207
01:59:00,000 --> 01:59:03,599
to settle on a sensible range

3208
01:59:03,599 --> 01:59:06,719
and uh i will also send emails to the

3209
01:59:06,719 --> 01:59:08,000
dns operations

3210
01:59:08,000 --> 01:59:10,560
medic list of the over and the right

3211
01:59:10,560 --> 01:59:12,000
mailing list for

3212
01:59:12,000 --> 01:59:15,119
input from operators good

3213
01:59:15,119 --> 01:59:20,159
uh speeding up a bit here

3214
01:59:20,320 --> 01:59:22,320
but you have three minutes remaining

3215
01:59:22,320 --> 01:59:23,840
until the q a

3216
01:59:23,840 --> 01:59:26,880
okay three minutes yes yeah

3217
01:59:26,880 --> 01:59:29,280
okay i really really want to speed up

3218
01:59:29,280 --> 01:59:31,040
here

3219
01:59:31,040 --> 01:59:33,760
this is also a discussion that nc3

3220
01:59:33,760 --> 01:59:34,560
iterations

3221
01:59:34,560 --> 01:59:37,520
consideration also discussion uh kicked

3222
01:59:37,520 --> 01:59:37,920
off

3223
01:59:37,920 --> 01:59:40,480
by victor de kofn on dinosaur perez's

3224
01:59:40,480 --> 01:59:43,119
mailing list and it's also

3225
01:59:43,119 --> 01:59:45,840
have a look at it there are well typical

3226
01:59:45,840 --> 01:59:46,480
values

3227
01:59:46,480 --> 01:59:49,760
very very high number of iterations

3228
01:59:49,760 --> 01:59:52,719
these are not necessary so there's a

3229
01:59:52,719 --> 01:59:53,920
proposal for lower

3230
01:59:53,920 --> 01:59:56,840
iterations also by the draft of west

3231
01:59:56,840 --> 01:59:58,320
harter

3232
01:59:58,320 --> 02:00:00,480
insect automation has been presented

3233
02:00:00,480 --> 02:00:02,400
yesterday

3234
02:00:02,400 --> 02:00:07,119
by ulrich visser next slide moving to

3235
02:00:07,119 --> 02:00:09,599
deep bright work this also has been

3236
02:00:09,599 --> 02:00:11,599
presented

3237
02:00:11,599 --> 02:00:14,960
zone transfers over tls it's

3238
02:00:14,960 --> 02:00:19,440
submitted to the ist for publication

3239
02:00:19,520 --> 02:00:21,920
other i find very interesting work here

3240
02:00:21,920 --> 02:00:23,679
at the d prime work group is

3241
02:00:23,679 --> 02:00:26,880
dns over quick so again this is not

3242
02:00:26,880 --> 02:00:30,080
same as doh with hp3

3243
02:00:30,080 --> 02:00:33,040
so here's quick to transport layer so

3244
02:00:33,040 --> 02:00:36,159
you don't have the http headers

3245
02:00:36,159 --> 02:00:40,239
and cookies

3246
02:00:40,239 --> 02:00:42,800
so there i'm just i have copied here the

3247
02:00:42,800 --> 02:00:44,480
table

3248
02:00:44,480 --> 02:00:47,119
of the implementation status of dennis

3249
02:00:47,119 --> 02:00:48,080
over quick

3250
02:00:48,080 --> 02:00:51,679
i won't go into detail this is a table

3251
02:00:51,679 --> 02:00:54,000
from a presentation by sarah dickinson

3252
02:00:54,000 --> 02:00:55,280
so there's a good

3253
02:00:55,280 --> 02:00:58,560
work going on already here i'm looking

3254
02:00:58,560 --> 02:00:59,040
forward

3255
02:00:59,040 --> 02:01:02,639
to more results and progress of the

3256
02:01:02,639 --> 02:01:05,119
document

3257
02:01:05,840 --> 02:01:10,000
right existing work more existing work

3258
02:01:10,000 --> 02:01:12,639
is of course at the deep drive a lot of

3259
02:01:12,639 --> 02:01:15,599
attention is going into

3260
02:01:15,599 --> 02:01:19,199
encrypted dns from recursion to

3261
02:01:19,199 --> 02:01:20,840
authoritative

3262
02:01:20,840 --> 02:01:24,080
so um it started in february march we

3263
02:01:24,080 --> 02:01:24,480
had

3264
02:01:24,480 --> 02:01:27,360
one document specific on this recursive

3265
02:01:27,360 --> 02:01:29,599
authority of dns with encryption

3266
02:01:29,599 --> 02:01:32,560
and today this document there was

3267
02:01:32,560 --> 02:01:34,159
already another document but

3268
02:01:34,159 --> 02:01:37,440
today this document has been refocused

3269
02:01:37,440 --> 02:01:40,159
to recursive alter the recursive

3270
02:01:40,159 --> 02:01:40,960
alternative

3271
02:01:40,960 --> 02:01:44,080
with an authentic encryption and two new

3272
02:01:44,080 --> 02:01:44,880
documents

3273
02:01:44,880 --> 02:01:48,560
actually working all together

3274
02:01:48,560 --> 02:01:50,400
defining the common features of

3275
02:01:50,400 --> 02:01:52,320
encrypted and unencrypted

3276
02:01:52,320 --> 02:01:54,159
uh of encrypted precursors to

3277
02:01:54,159 --> 02:01:56,080
authoritative genius

3278
02:01:56,080 --> 02:02:00,080
uh authoritative authenticated sorry or

3279
02:02:00,080 --> 02:02:05,760
unauthenticated and addressed by

3280
02:02:05,760 --> 02:02:08,960
ecker eric pescola and others about

3281
02:02:08,960 --> 02:02:09,520
signaling

3282
02:02:09,520 --> 02:02:12,239
authoritative dds encryption and here

3283
02:02:12,239 --> 02:02:13,199
svcb

3284
02:02:13,199 --> 02:02:15,360
can be used to discover whether the name

3285
02:02:15,360 --> 02:02:17,040
server supports encryption so that's

3286
02:02:17,040 --> 02:02:18,639
also a nice

3287
02:02:18,639 --> 02:02:21,760
result of the dinus of the svcb

3288
02:02:21,760 --> 02:02:25,599
draft in denisov i will skip this one

3289
02:02:25,599 --> 02:02:28,239
it was long time discussed oblivious

3290
02:02:28,239 --> 02:02:29,599
though

3291
02:02:29,599 --> 02:02:32,880
in deprived but it's now concluded that

3292
02:02:32,880 --> 02:02:33,199
it's

3293
02:02:33,199 --> 02:02:36,480
uh it's for now uh going uh in the

3294
02:02:36,480 --> 02:02:39,040
individual track in the individual

3295
02:02:39,040 --> 02:02:40,639
submission

3296
02:02:40,639 --> 02:02:44,159
um oh not too bad

3297
02:02:44,159 --> 02:02:47,360
here that's one this is uh this is

3298
02:02:47,360 --> 02:02:49,119
interesting

3299
02:02:49,119 --> 02:02:51,679
uh confidential computing to protect the

3300
02:02:51,679 --> 02:02:53,520
next resolution so

3301
02:02:53,520 --> 02:02:55,280
this was a present presentation at

3302
02:02:55,280 --> 02:02:56,800
dinosaur

3303
02:02:56,800 --> 02:03:00,800
by yari and it's not was

3304
02:03:00,800 --> 02:03:04,560
not dinosaur work actually but it

3305
02:03:04,560 --> 02:03:08,000
it it needed a platform

3306
02:03:08,000 --> 02:03:11,199
and a dinosaur working group

3307
02:03:11,199 --> 02:03:15,360
we provided some time to present his

3308
02:03:15,360 --> 02:03:18,320
ideas about well confidential computing

3309
02:03:18,320 --> 02:03:20,000
to protect dns

3310
02:03:20,000 --> 02:03:23,360
so we always discuss things about

3311
02:03:23,360 --> 02:03:28,560
securing dns queries over the network

3312
02:03:28,560 --> 02:03:32,320
but dns data at rest should also protect

3313
02:03:32,320 --> 02:03:33,040
it

3314
02:03:33,040 --> 02:03:36,080
so here i just copied the slide from

3315
02:03:36,080 --> 02:03:39,360
from yardy so the dns resolver

3316
02:03:39,360 --> 02:03:42,800
is executed in a trusted execution

3317
02:03:42,800 --> 02:03:43,920
environment

3318
02:03:43,920 --> 02:03:45,920
so that the hardware or the platform

3319
02:03:45,920 --> 02:03:48,320
owner cannot access

3320
02:03:48,320 --> 02:03:53,280
dns data at rest at the server

3321
02:03:53,280 --> 02:03:54,639
there was quite some interest in the

3322
02:03:54,639 --> 02:03:57,199
working group but also

3323
02:03:57,199 --> 02:04:00,800
it was it's not in charge of the unisop

3324
02:04:00,800 --> 02:04:03,520
so for now if there's some progress

3325
02:04:03,520 --> 02:04:04,320
something to

3326
02:04:04,320 --> 02:04:07,440
present there will be room but

3327
02:04:07,440 --> 02:04:09,520
probably it will need to find another

3328
02:04:09,520 --> 02:04:10,719
working group or

3329
02:04:10,719 --> 02:04:13,520
another place to be worked upon maybe in

3330
02:04:13,520 --> 02:04:14,719
the irtf

3331
02:04:14,719 --> 02:04:18,239
or in one of the other or well

3332
02:04:18,239 --> 02:04:20,800
somewhere in the dns or somewhere in the

3333
02:04:20,800 --> 02:04:22,400
dns ecosys

3334
02:04:22,400 --> 02:04:25,839
universe in the itf

3335
02:04:26,560 --> 02:04:29,760
that's it that was really

3336
02:04:29,760 --> 02:04:33,920
very brief in time but also

3337
02:04:33,920 --> 02:04:37,679
it was extended in a number of topics

3338
02:04:37,679 --> 02:04:40,800
i hope you have well learned about

3339
02:04:40,800 --> 02:04:44,000
activities the dns activities in the itf

3340
02:04:44,000 --> 02:04:46,560
um i'm open for questions for more

3341
02:04:46,560 --> 02:04:47,760
details

3342
02:04:47,760 --> 02:04:51,040
for more pointers and i also invite you

3343
02:04:51,040 --> 02:04:51,760
all

3344
02:04:51,760 --> 02:04:53,520
to join the discussions on the dinosaur

3345
02:04:53,520 --> 02:04:55,040
mailing list or

3346
02:04:55,040 --> 02:04:56,800
when we spin off some of the discussions

3347
02:04:56,800 --> 02:04:58,880
at the genus operations mailing list of

3348
02:04:58,880 --> 02:05:00,159
darwin

3349
02:05:00,159 --> 02:05:03,280
thank you all thank you bye now

3350
02:05:03,280 --> 02:05:05,920
i think we have one and a half minutes

3351
02:05:05,920 --> 02:05:08,400
for questions

3352
02:05:08,400 --> 02:05:10,880
i also would like to remind the audience

3353
02:05:10,880 --> 02:05:12,639
that during the q a

3354
02:05:12,639 --> 02:05:16,000
section a

3355
02:05:17,280 --> 02:05:20,719
poll will show up and this is the

3356
02:05:20,719 --> 02:05:23,760
only time you have the opportunity to

3357
02:05:23,760 --> 02:05:26,480
rate the talk and this is quite

3358
02:05:26,480 --> 02:05:27,599
important to

3359
02:05:27,599 --> 02:05:30,639
the pc and

3360
02:05:30,639 --> 02:05:34,719
the speakers to do this so please

3361
02:05:34,719 --> 02:05:38,000
take that opportunity i see

3362
02:05:38,000 --> 02:05:41,440
one question in the q a

3363
02:05:41,440 --> 02:05:46,719
facility of zoom from anvil kempling

3364
02:05:46,719 --> 02:05:49,760
he says i'd also mentioned the a

3365
02:05:49,760 --> 02:05:52,639
day working group has adopted two drafts

3366
02:05:52,639 --> 02:05:54,639
on dna's discovery

3367
02:05:54,639 --> 02:05:56,960
with a further draft in development that

3368
02:05:56,960 --> 02:05:58,000
covers split

3369
02:05:58,000 --> 02:06:01,840
horizon dns and the tls working group

3370
02:06:01,840 --> 02:06:03,119
continues to work

3371
02:06:03,119 --> 02:06:07,840
on the ech encrypted client hello draft

3372
02:06:07,840 --> 02:06:10,400
which may provide a longer term solution

3373
02:06:10,400 --> 02:06:10,960
for

3374
02:06:10,960 --> 02:06:14,880
esni encrypted server name indication

3375
02:06:14,880 --> 02:06:16,800
it has implications for content

3376
02:06:16,800 --> 02:06:18,400
filtering

3377
02:06:18,400 --> 02:06:21,119
finally the concept consensus on

3378
02:06:21,119 --> 02:06:23,199
oblivious dough in deep thrive

3379
02:06:23,199 --> 02:06:26,400
seems to be to keep it experimental and

3380
02:06:26,400 --> 02:06:31,839
focus instead on oblivious http

3381
02:06:32,560 --> 02:06:35,040
yeah thank you for the additional

3382
02:06:35,040 --> 02:06:35,920
comments uh

3383
02:06:35,920 --> 02:06:39,199
yeah that's correct

3384
02:06:39,199 --> 02:06:42,400
yeah i

3385
02:06:42,400 --> 02:06:45,679
have another

3386
02:06:45,679 --> 02:06:49,679
question remarked from ralph weber

3387
02:06:49,679 --> 02:06:51,920
what about the camel given that you

3388
02:06:51,920 --> 02:06:53,280
barely could fit

3389
02:06:53,280 --> 02:06:59,119
naming all the drafts in presentation

3390
02:06:59,119 --> 02:07:02,960
that is true yeah yeah so uh

3391
02:07:02,960 --> 02:07:06,000
what about the camel uh it's

3392
02:07:06,000 --> 02:07:06,380
uh

3393
02:07:06,380 --> 02:07:09,489
[Music]

3394
02:07:09,679 --> 02:07:13,280
so dinosaur is actually

3395
02:07:13,280 --> 02:07:16,480
of course uh not per se extending it it

3396
02:07:16,480 --> 02:07:18,000
is

3397
02:07:18,000 --> 02:07:22,159
working on drafts for operational uh

3398
02:07:22,159 --> 02:07:26,480
foreign operations and we we

3399
02:07:26,480 --> 02:07:29,840
run into operational problems that has

3400
02:07:29,840 --> 02:07:30,800
to be solved

3401
02:07:30,800 --> 02:07:33,840
think of the the rfc

3402
02:07:33,840 --> 02:07:37,040
the dns server cookies uh these are

3403
02:07:37,040 --> 02:07:38,000
really

3404
02:07:38,000 --> 02:07:41,840
these were really uh not useful uh

3405
02:07:41,840 --> 02:07:45,280
with the old draft of the alt rc we

3406
02:07:45,280 --> 02:07:45,760
needed

3407
02:07:45,760 --> 02:07:48,800
to update rfc and the same for the queue

3408
02:07:48,800 --> 02:07:49,760
name

3409
02:07:49,760 --> 02:07:53,360
again that these are the biz documents

3410
02:07:53,360 --> 02:07:58,400
but for svcp uh for example this is uh

3411
02:07:58,400 --> 02:08:00,960
it might be part of another straw on the

3412
02:08:00,960 --> 02:08:02,239
cable's back

3413
02:08:02,239 --> 02:08:05,199
but it does solve a lot of uh well

3414
02:08:05,199 --> 02:08:06,239
operational

3415
02:08:06,239 --> 02:08:07,840
and i wouldn't say problems the

3416
02:08:07,840 --> 02:08:10,639
challenges that's better

3417
02:08:10,639 --> 02:08:12,719
we really needed this and this this

3418
02:08:12,719 --> 02:08:13,840
draft opens up

3419
02:08:13,840 --> 02:08:17,520
a lot of uh well possibility of

3420
02:08:17,520 --> 02:08:20,560
solutions where we had a lot

3421
02:08:20,560 --> 02:08:22,639
long long discussions before in the

3422
02:08:22,639 --> 02:08:24,159
dinosaur working group

3423
02:08:24,159 --> 02:08:27,199
before that yeah okay so it's

3424
02:08:27,199 --> 02:08:30,239
it's it's always a balance between is

3425
02:08:30,239 --> 02:08:31,599
this not another

3426
02:08:31,599 --> 02:08:33,760
is it not the final straw on the back of

3427
02:08:33,760 --> 02:08:35,040
the camera or do we

3428
02:08:35,040 --> 02:08:38,000
really need to examine he's still

3429
02:08:38,000 --> 02:08:39,280
standing

3430
02:08:39,280 --> 02:08:42,320
yeah yeah good yeah

3431
02:08:42,320 --> 02:08:45,360
okay thank you we know you're welcome

3432
02:08:45,360 --> 02:08:48,239
thank you yeah could you stop sharing

3433
02:08:48,239 --> 02:08:49,040
the

3434
02:08:49,040 --> 02:08:51,599
slide deck

3435
02:08:52,400 --> 02:08:55,920
and then i would like to welcome

3436
02:08:55,920 --> 02:08:59,199
another dutch guy actually

3437
02:08:59,199 --> 02:09:01,920
most of this the complete session is

3438
02:09:01,920 --> 02:09:02,560
dutch

3439
02:09:02,560 --> 02:09:06,800
luckily except for our time keeper

3440
02:09:06,800 --> 02:09:11,440
so otto mooreberg welcome

3441
02:09:11,440 --> 02:09:15,360
hello thanks

3442
02:09:15,360 --> 02:09:18,639
we'll be presenting tcp fast open

3443
02:09:18,639 --> 02:09:21,840
not so fast okay thank you for your

3444
02:09:21,840 --> 02:09:22,960
introduction i was

3445
02:09:22,960 --> 02:09:26,159
uh well having some trouble here but uh

3446
02:09:26,159 --> 02:09:28,159
i can start now so my name is uh otto

3447
02:09:28,159 --> 02:09:29,199
burbank and

3448
02:09:29,199 --> 02:09:32,719
uh i'm going to talk about tcp fast open

3449
02:09:32,719 --> 02:09:37,760
with the subtitle not so fast um

3450
02:09:38,800 --> 02:09:41,280
so today i'm what i will be discussing

3451
02:09:41,280 --> 02:09:42,639
is is how i

3452
02:09:42,639 --> 02:09:45,760
added the tcp fast open to the power dns

3453
02:09:45,760 --> 02:09:49,440
recurser i'm a powderiness

3454
02:09:49,440 --> 02:09:52,079
developer and mostly working on the

3455
02:09:52,079 --> 02:09:53,280
recursor

3456
02:09:53,280 --> 02:09:56,400
so we're going to look a bit at

3457
02:09:56,400 --> 02:10:00,719
some programming issues but also mostly

3458
02:10:00,719 --> 02:10:04,079
practical issues with the tcp fast open

3459
02:10:04,079 --> 02:10:04,719
and

3460
02:10:04,719 --> 02:10:08,800
i hope to show that tcp fast open is

3461
02:10:08,800 --> 02:10:10,800
indeed fast at least faster than

3462
02:10:10,800 --> 02:10:14,079
no tcp fast open but it is not fast in

3463
02:10:14,079 --> 02:10:16,239
all aspects there are some issues with

3464
02:10:16,239 --> 02:10:18,400
it

3465
02:10:18,719 --> 02:10:22,400
so to start i'm talking about why tfo

3466
02:10:22,400 --> 02:10:23,599
why is it relevant

3467
02:10:23,599 --> 02:10:26,320
to bns

3468
02:10:26,960 --> 02:10:30,159
uh and then i would like to tell

3469
02:10:30,159 --> 02:10:33,760
something how it works uh and

3470
02:10:33,760 --> 02:10:36,880
then look into the default uh

3471
02:10:36,880 --> 02:10:39,599
from both a server point of view and a

3472
02:10:39,599 --> 02:10:40,480
client

3473
02:10:40,480 --> 02:10:42,960
point of view of course authoritative

3474
02:10:42,960 --> 02:10:44,079
servers are

3475
02:10:44,079 --> 02:10:48,400
only servers with respect to

3476
02:10:48,400 --> 02:10:51,119
connections but recursors are both

3477
02:10:51,119 --> 02:10:53,040
servers and clients

3478
02:10:53,040 --> 02:10:55,199
they are clients that do their if

3479
02:10:55,199 --> 02:10:57,839
servers

3480
02:10:58,800 --> 02:11:02,400
and then look at the practical issues

3481
02:11:02,400 --> 02:11:05,520
encountered while using

3482
02:11:05,520 --> 02:11:08,560
php fast open and then

3483
02:11:08,560 --> 02:11:10,320
some conclusions i see there's a typo

3484
02:11:10,320 --> 02:11:12,079
there

3485
02:11:12,079 --> 02:11:13,760
i'm going to also try to do some

3486
02:11:13,760 --> 02:11:16,159
suggestions how to improve the current

3487
02:11:16,159 --> 02:11:19,599
situation so first

3488
02:11:19,599 --> 02:11:23,360
i'm going to discuss why

3489
02:11:23,360 --> 02:11:26,480
tfo and especially why

3490
02:11:26,480 --> 02:11:30,800
tcp is relevant in the dns world

3491
02:11:30,800 --> 02:11:34,079
well as you all know vns queries or

3492
02:11:34,079 --> 02:11:36,960
other dns answers are getting larger and

3493
02:11:36,960 --> 02:11:38,800
larger we have text

3494
02:11:38,800 --> 02:11:40,639
records we have the unsec records we

3495
02:11:40,639 --> 02:11:42,320
have edens options

3496
02:11:42,320 --> 02:11:44,960
all added to the payload of the dns

3497
02:11:44,960 --> 02:11:45,920
answer

3498
02:11:45,920 --> 02:11:50,000
and that will uh

3499
02:11:50,560 --> 02:11:54,239
so the ins uh cases where a answer does

3500
02:11:54,239 --> 02:11:55,280
not fit

3501
02:11:55,280 --> 02:11:59,280
a udp perfect size will increase

3502
02:11:59,280 --> 02:12:02,800
and especially since

3503
02:12:02,800 --> 02:12:05,119
current situation is is that to avoid

3504
02:12:05,119 --> 02:12:06,000
fragmentation

3505
02:12:06,000 --> 02:12:09,760
in the udp world the prophesizers

3506
02:12:09,760 --> 02:12:13,280
uh redskins suggested are now suggested

3507
02:12:13,280 --> 02:12:13,840
to be

3508
02:12:13,840 --> 02:12:17,199
much smaller than before so

3509
02:12:17,199 --> 02:12:20,320
the tc the dns protocol has to switch to

3510
02:12:20,320 --> 02:12:22,159
tcp

3511
02:12:22,159 --> 02:12:24,079
to get the answer to the client in more

3512
02:12:24,079 --> 02:12:25,679
cases

3513
02:12:25,679 --> 02:12:29,760
and that's already

3514
02:12:29,760 --> 02:12:32,840
being seen by operation operators of

3515
02:12:32,840 --> 02:12:34,079
recursive

3516
02:12:34,079 --> 02:12:39,280
much more connections are using tcp

3517
02:12:39,280 --> 02:12:42,800
now the overhead of tcp is an issue

3518
02:12:42,800 --> 02:12:44,880
it consumes more resources both on the

3519
02:12:44,880 --> 02:12:47,280
client side and the server side

3520
02:12:47,280 --> 02:12:49,760
in terms of computational effort and

3521
02:12:49,760 --> 02:12:50,960
memory

3522
02:12:50,960 --> 02:12:53,599
things like client both client and

3523
02:12:53,599 --> 02:12:54,800
server have to keep

3524
02:12:54,800 --> 02:12:59,280
track of uh state of the dcp connection

3525
02:12:59,280 --> 02:13:02,560
and also to actually transfer

3526
02:13:02,560 --> 02:13:05,679
data from the server to the client and

3527
02:13:05,679 --> 02:13:08,079
vice versa more packets have to be

3528
02:13:08,079 --> 02:13:10,079
exchanged so the

3529
02:13:10,079 --> 02:13:13,440
pcp a typical tcp

3530
02:13:13,440 --> 02:13:17,520
answer retrieved over tcp will have a

3531
02:13:17,520 --> 02:13:22,079
larger latency than a answer over udp

3532
02:13:22,320 --> 02:13:25,440
now tf o needs to be fast open

3533
02:13:25,440 --> 02:13:27,679
does solve some of those problems

3534
02:13:27,679 --> 02:13:29,040
especially it solves

3535
02:13:29,040 --> 02:13:32,480
some of the latency issues at the cost

3536
02:13:32,480 --> 02:13:33,199
of

3537
02:13:33,199 --> 02:13:36,800
using even more resources a bit of a bit

3538
02:13:36,800 --> 02:13:39,280
it's not that much but it does consume

3539
02:13:39,280 --> 02:13:40,880
more resources than just

3540
02:13:40,880 --> 02:13:45,840
doing regular tcp

3541
02:13:46,239 --> 02:13:49,360
so before we look into tfo

3542
02:13:49,360 --> 02:13:52,480
let's have a brief overview of probably

3543
02:13:52,480 --> 02:13:53,679
something you have

3544
02:13:53,679 --> 02:13:56,719
already seen in other places that this

3545
02:13:56,719 --> 02:13:58,320
is the classical tcp

3546
02:13:58,320 --> 02:14:00,480
connection setup data exchange and

3547
02:14:00,480 --> 02:14:01,840
connection tear down

3548
02:14:01,840 --> 02:14:07,040
sequences shown by uh wireshark

3549
02:14:08,800 --> 02:14:12,400
so the through a handshake sims in

3550
02:14:12,400 --> 02:14:15,520
an ack followed by

3551
02:14:15,520 --> 02:14:18,800
a query sent to the server

3552
02:14:18,800 --> 02:14:21,920
that query is act by the server

3553
02:14:21,920 --> 02:14:24,880
and then followed by a response this is

3554
02:14:24,880 --> 02:14:26,079
actually the response

3555
02:14:26,079 --> 02:14:29,599
the data that is the client

3556
02:14:29,599 --> 02:14:32,560
requested then we get an act from the

3557
02:14:32,560 --> 02:14:33,760
client to the server

3558
02:14:33,760 --> 02:14:37,199
to acknowledge the receive reception of

3559
02:14:37,199 --> 02:14:39,280
the

3560
02:14:39,280 --> 02:14:42,560
query the response and then we get a

3561
02:14:42,560 --> 02:14:43,280
teardown

3562
02:14:43,280 --> 02:14:47,280
of the dcp connection so in total

3563
02:14:47,280 --> 02:14:50,960
10 packets are exchanged to

3564
02:14:51,520 --> 02:14:55,280
get the query and the answer transferred

3565
02:14:55,280 --> 02:14:58,880
and compare that to a typical udp

3566
02:14:58,880 --> 02:15:02,719
or the iudp curve response which

3567
02:15:02,719 --> 02:15:06,800
takes two packets it takes four packets

3568
02:15:06,800 --> 02:15:08,800
for the actual query to arrive

3569
02:15:08,800 --> 02:15:13,040
at the server and two more query

3570
02:15:13,040 --> 02:15:16,159
two two more uh packets so

3571
02:15:16,159 --> 02:15:18,719
it takes four packets to for the query

3572
02:15:18,719 --> 02:15:19,599
to arrive

3573
02:15:19,599 --> 02:15:21,760
two more packets to get the response

3574
02:15:21,760 --> 02:15:23,199
back and then

3575
02:15:23,199 --> 02:15:26,800
some maintenance packets to tear down

3576
02:15:26,800 --> 02:15:28,239
the connection so

3577
02:15:28,239 --> 02:15:30,480
that is the reason why the tcp

3578
02:15:30,480 --> 02:15:32,239
connections has a

3579
02:15:32,239 --> 02:15:35,360
larger latency more packets

3580
02:15:35,360 --> 02:15:37,760
are exchanged to keep track of the state

3581
02:15:37,760 --> 02:15:39,840
of the connection

3582
02:15:39,840 --> 02:15:44,560
so in the tfo setting

3583
02:15:45,119 --> 02:15:48,320
the initial data exchange isn't that

3584
02:15:48,320 --> 02:15:50,159
much different

3585
02:15:50,159 --> 02:15:52,159
if the client has never seen the server

3586
02:15:52,159 --> 02:15:53,840
before and the server has never seen

3587
02:15:53,840 --> 02:15:57,360
that particular client before

3588
02:15:58,159 --> 02:16:00,239
the initial packet of the client will

3589
02:16:00,239 --> 02:16:01,920
contain a

3590
02:16:01,920 --> 02:16:05,199
extra tcp option it says well i am i do

3591
02:16:05,199 --> 02:16:06,159
support and i

3592
02:16:06,159 --> 02:16:09,360
request from you that you send me a

3593
02:16:09,360 --> 02:16:12,400
fast open cookie that

3594
02:16:12,400 --> 02:16:15,840
tcp option is embedded in the first sin

3595
02:16:15,840 --> 02:16:17,840
and in the reply to the synthesis in

3596
02:16:17,840 --> 02:16:20,400
hack the

3597
02:16:20,480 --> 02:16:23,599
server will respond with okay i do also

3598
02:16:23,599 --> 02:16:25,119
do support

3599
02:16:25,119 --> 02:16:30,000
fast open and i'm sending you a cookie

3600
02:16:30,000 --> 02:16:33,040
that cookie is a secret

3601
02:16:33,040 --> 02:16:36,638
based on some client properties

3602
02:16:36,638 --> 02:16:39,840
uh like particularly the client's ip and

3603
02:16:39,840 --> 02:16:41,359
the local

3604
02:16:41,359 --> 02:16:45,599
but also on local server

3605
02:16:45,599 --> 02:16:47,920
data like the local ip of the server and

3606
02:16:47,920 --> 02:16:48,638
port and

3607
02:16:48,638 --> 02:16:51,920
and also most importantly a secret

3608
02:16:51,920 --> 02:16:54,959
that you could as you could

3609
02:16:54,959 --> 02:16:57,439
the server uses to compute a hash of the

3610
02:16:57,439 --> 02:16:59,359
data i mentioned

3611
02:16:59,359 --> 02:17:02,638
and that computes to a value

3612
02:17:02,638 --> 02:17:04,799
of the cookie and that cookie is sent

3613
02:17:04,799 --> 02:17:05,679
back in

3614
02:17:05,679 --> 02:17:10,240
response to the sin so after this

3615
02:17:10,240 --> 02:17:14,478
the client has a

3616
02:17:14,478 --> 02:17:17,519
extra data and it will use that for

3617
02:17:17,519 --> 02:17:20,318
step 2 in the default that is a second

3618
02:17:20,318 --> 02:17:20,718
or

3619
02:17:20,718 --> 02:17:23,760
further connection to the same server

3620
02:17:23,760 --> 02:17:26,000
the client will send with the initial

3621
02:17:26,000 --> 02:17:27,040
request

3622
02:17:27,040 --> 02:17:30,240
initial sin immediately

3623
02:17:30,240 --> 02:17:34,080
the data and the cookie

3624
02:17:36,478 --> 02:17:38,638
that cookie will be used by the server

3625
02:17:38,638 --> 02:17:39,920
to validate that

3626
02:17:39,920 --> 02:17:42,398
indeed this client i've seen this client

3627
02:17:42,398 --> 02:17:44,318
before it has done a proper three-way

3628
02:17:44,318 --> 02:17:45,679
handshake before so

3629
02:17:45,679 --> 02:17:49,200
now i'm going to accept that the client

3630
02:17:49,200 --> 02:17:52,558
sends data immediately with the first

3631
02:17:52,558 --> 02:17:53,519
sin

3632
02:17:53,519 --> 02:17:56,240
and not only is that data accepted but

3633
02:17:56,240 --> 02:17:58,160
we will see that also that data is

3634
02:17:58,160 --> 02:17:59,760
immediately

3635
02:17:59,760 --> 02:18:03,599
transferred to the application so

3636
02:18:03,599 --> 02:18:07,599
normally data in the initial data from

3637
02:18:07,599 --> 02:18:09,439
the query is only

3638
02:18:09,439 --> 02:18:12,160
sent to the application after a

3639
02:18:12,160 --> 02:18:13,679
three-way handshake

3640
02:18:13,679 --> 02:18:16,558
completes now it can be sent to the

3641
02:18:16,558 --> 02:18:17,760
application

3642
02:18:17,760 --> 02:18:19,519
immediately on the receipt of the first

3643
02:18:19,519 --> 02:18:20,879
packet

3644
02:18:20,879 --> 02:18:24,000
and you see that we have now total

3645
02:18:24,000 --> 02:18:27,599
eight packets and the query

3646
02:18:27,599 --> 02:18:30,000
arrives at the server immediately with

3647
02:18:30,000 --> 02:18:31,679
the first packet

3648
02:18:31,679 --> 02:18:35,120
and the answer is contained in the

3649
02:18:35,120 --> 02:18:35,679
fourth

3650
02:18:35,679 --> 02:18:38,638
packet so we have effectively reduced

3651
02:18:38,638 --> 02:18:40,080
the latency

3652
02:18:40,080 --> 02:18:43,760
quite a bit now

3653
02:18:43,760 --> 02:18:47,359
why is that cookie important to be

3654
02:18:47,359 --> 02:18:48,718
cryptographically

3655
02:18:48,718 --> 02:18:51,679
secured i'm going to briefly mention

3656
02:18:51,679 --> 02:18:52,398
that

3657
02:18:52,398 --> 02:18:54,240
it is important because otherwise there

3658
02:18:54,240 --> 02:18:55,679
would be a possibility that

3659
02:18:55,679 --> 02:18:57,920
for a sin flood attack a new type of

3660
02:18:57,920 --> 02:18:59,760
sinful attack

3661
02:18:59,760 --> 02:19:02,080
the rfc goes into more detail but

3662
02:19:02,080 --> 02:19:03,519
effectively

3663
02:19:03,519 --> 02:19:06,718
what you want to know is that the client

3664
02:19:06,718 --> 02:19:09,760
did a proper three-way handshake before

3665
02:19:09,760 --> 02:19:13,760
and if it does so if it has done so the

3666
02:19:13,760 --> 02:19:14,959
server will send that

3667
02:19:14,959 --> 02:19:16,718
cookie as an acknowledgement of that

3668
02:19:16,718 --> 02:19:18,959
fact and the client

3669
02:19:18,959 --> 02:19:22,000
can present that later on to say well

3670
02:19:22,000 --> 02:19:24,080
i've been here before you know me

3671
02:19:24,080 --> 02:19:25,200
already i've done

3672
02:19:25,200 --> 02:19:27,840
and i'm a proper client because i'm able

3673
02:19:27,840 --> 02:19:29,519
and willing to participate in a proper

3674
02:19:29,519 --> 02:19:31,200
three-way handshake

3675
02:19:31,200 --> 02:19:34,080
and actually that's all the cookie says

3676
02:19:34,080 --> 02:19:35,040
it doesn't say

3677
02:19:35,040 --> 02:19:37,280
a lot more that's of course there's a

3678
02:19:37,280 --> 02:19:38,160
pretty weak

3679
02:19:38,160 --> 02:19:40,959
form of authentication so the cookie

3680
02:19:40,959 --> 02:19:42,160
itself is no

3681
02:19:42,160 --> 02:19:45,679
actual proof that the client is is the

3682
02:19:45,679 --> 02:19:46,959
one you're talking to

3683
02:19:46,959 --> 02:19:50,080
it only proves that you have seen that

3684
02:19:50,080 --> 02:19:53,200
particular client before

3685
02:19:53,200 --> 02:19:56,080
if you want to know more about it by how

3686
02:19:56,080 --> 02:19:56,560
this is

3687
02:19:56,560 --> 02:20:00,640
important please consult the rfc

3688
02:20:00,640 --> 02:20:03,840
so the sketch of the implementation uh

3689
02:20:03,840 --> 02:20:07,680
of of a uh of a tfo supporting this key

3690
02:20:07,680 --> 02:20:08,720
stack is pretty

3691
02:20:08,720 --> 02:20:12,880
simple and the nice thing is uh

3692
02:20:12,880 --> 02:20:14,479
the server doesn't work the client

3693
02:20:14,479 --> 02:20:15,920
doesn't work it's all not very

3694
02:20:15,920 --> 02:20:17,280
complicated it

3695
02:20:17,280 --> 02:20:20,000
becomes a bit more complicated because

3696
02:20:20,000 --> 02:20:22,080
you also want to have of course graceful

3697
02:20:22,080 --> 02:20:23,920
degradation in the sense that if one of

3698
02:20:23,920 --> 02:20:25,280
the sites does not

3699
02:20:25,280 --> 02:20:29,520
support cookies things go right

3700
02:20:29,680 --> 02:20:32,319
so there is some complication there but

3701
02:20:32,319 --> 02:20:34,080
the nice thing from an application

3702
02:20:34,080 --> 02:20:36,080
point of view is that the os does all

3703
02:20:36,080 --> 02:20:38,399
the real work

3704
02:20:38,399 --> 02:20:40,800
generating the cookie storing the cookie

3705
02:20:40,800 --> 02:20:42,319
for later use

3706
02:20:42,319 --> 02:20:45,280
in the client and on the server side

3707
02:20:45,280 --> 02:20:46,560
validating the cookie

3708
02:20:46,560 --> 02:20:49,840
and generating one if it's needed so

3709
02:20:49,840 --> 02:20:52,880
uh for a for my application point of

3710
02:20:52,880 --> 02:20:53,439
view

3711
02:20:53,439 --> 02:20:55,200
application writer point of view things

3712
02:20:55,200 --> 02:20:57,600
are simply simple

3713
02:20:57,600 --> 02:21:00,960
so let's see how does

3714
02:21:00,960 --> 02:21:06,160
that work out for for various uh

3715
02:21:06,160 --> 02:21:09,439
open source dns servers both the

3716
02:21:09,439 --> 02:21:11,439
authoritative and recursives and

3717
02:21:11,439 --> 02:21:16,399
what we see is is that both that most

3718
02:21:16,399 --> 02:21:19,920
most of them mention a tfo supporting

3719
02:21:19,920 --> 02:21:21,280
release notes

3720
02:21:21,280 --> 02:21:23,280
but if you look into the details it

3721
02:21:23,280 --> 02:21:25,040
becomes a bit fake

3722
02:21:25,040 --> 02:21:27,200
is it always enabled do you have to set

3723
02:21:27,200 --> 02:21:28,080
a

3724
02:21:28,080 --> 02:21:31,359
option um how does

3725
02:21:31,359 --> 02:21:34,880
the for recursor is there any

3726
02:21:34,880 --> 02:21:36,479
are we talking about the server side of

3727
02:21:36,479 --> 02:21:38,319
things or the client side of things

3728
02:21:38,319 --> 02:21:40,560
of course the recursive acts you know

3729
02:21:40,560 --> 02:21:41,680
often in a way

3730
02:21:41,680 --> 02:21:43,840
as a of a client to authoritative

3731
02:21:43,840 --> 02:21:45,040
servers so

3732
02:21:45,040 --> 02:21:49,040
there is support but things are a bit

3733
02:21:49,040 --> 02:21:53,439
fake um

3734
02:21:53,439 --> 02:21:56,479
i will we'll see that later

3735
02:21:56,479 --> 02:21:58,560
uh i'll also illustrate that with

3736
02:21:58,560 --> 02:22:00,160
another example

3737
02:22:00,160 --> 02:22:02,880
so i'm going to talk mostly about the

3738
02:22:02,880 --> 02:22:04,160
client side because that's

3739
02:22:04,160 --> 02:22:06,399
the thing i'm working on worked on in

3740
02:22:06,399 --> 02:22:07,600
recursive but

3741
02:22:07,600 --> 02:22:10,319
a quick look at the server side if you

3742
02:22:10,319 --> 02:22:10,960
wanted to

3743
02:22:10,960 --> 02:22:13,200
support tfo there's only one actually

3744
02:22:13,200 --> 02:22:14,800
one thing you have to do

3745
02:22:14,800 --> 02:22:17,920
on the on in the code and that is to

3746
02:22:17,920 --> 02:22:21,040
set a option on the socket on the listen

3747
02:22:21,040 --> 02:22:23,120
listening socket and that's enough you

3748
02:22:23,120 --> 02:22:24,640
would assume that

3749
02:22:24,640 --> 02:22:27,920
there's more to it one

3750
02:22:27,920 --> 02:22:30,399
is you have to also enable it in the os

3751
02:22:30,399 --> 02:22:32,240
if we're talking linux

3752
02:22:32,240 --> 02:22:36,000
and the thing is

3753
02:22:36,000 --> 02:22:39,920
even the socket option call does not

3754
02:22:39,920 --> 02:22:40,640
fail if

3755
02:22:40,640 --> 02:22:43,840
it's not enabled in the os

3756
02:22:43,840 --> 02:22:47,359
so you can think that

3757
02:22:47,359 --> 02:22:49,359
fast open is enabled but actually it

3758
02:22:49,359 --> 02:22:51,520
won't be until you set the process

3759
02:22:51,520 --> 02:22:52,399
control

3760
02:22:52,399 --> 02:22:55,840
on os level this is documented

3761
02:22:55,840 --> 02:22:58,960
properly in in kernel.org

3762
02:22:58,960 --> 02:23:02,840
but remember if you want to

3763
02:23:02,840 --> 02:23:07,120
serve enabled dfo as a server

3764
02:23:07,120 --> 02:23:09,600
you have to also set the access control

3765
02:23:09,600 --> 02:23:11,280
in linux

3766
02:23:11,280 --> 02:23:14,800
and i would recommend

3767
02:23:14,800 --> 02:23:18,479
that server warn that

3768
02:23:18,479 --> 02:23:22,479
dfo is enabled for the application

3769
02:23:22,479 --> 02:23:25,200
but not on the os side if that's the

3770
02:23:25,200 --> 02:23:27,200
case

3771
02:23:27,200 --> 02:23:29,840
otherwise system administrators might

3772
02:23:29,840 --> 02:23:31,920
think dfo is enabled but it is actually

3773
02:23:31,920 --> 02:23:32,560
not

3774
02:23:32,560 --> 02:23:35,359
because the actual set socket operation

3775
02:23:35,359 --> 02:23:37,040
call does not

3776
02:23:37,040 --> 02:23:40,960
return an error if the os disallows it

3777
02:23:40,960 --> 02:23:43,760
so that's the server side one single sec

3778
02:23:43,760 --> 02:23:45,359
set second option call

3779
02:23:45,359 --> 02:23:48,479
there's a small detail and

3780
02:23:48,479 --> 02:23:52,479
that is not

3781
02:23:52,479 --> 02:23:55,520
very pretty uh it's not

3782
02:23:55,520 --> 02:23:58,160
well documented is the set socket option

3783
02:23:58,160 --> 02:24:00,560
call is not a boolean but a number and

3784
02:24:00,560 --> 02:24:01,280
that

3785
02:24:01,280 --> 02:24:03,760
number reflects the queue size of the

3786
02:24:03,760 --> 02:24:04,479
work

3787
02:24:04,479 --> 02:24:07,920
incoming tfl requests and there is

3788
02:24:07,920 --> 02:24:09,920
actually no i found no guidance in

3789
02:24:09,920 --> 02:24:12,240
the proper value of that value of that

3790
02:24:12,240 --> 02:24:14,720
queue size

3791
02:24:14,720 --> 02:24:17,840
so that is something which

3792
02:24:17,840 --> 02:24:19,840
i think the documentation documentation

3793
02:24:19,840 --> 02:24:22,720
should improve on

3794
02:24:22,720 --> 02:24:24,640
now look at the client side client side

3795
02:24:24,640 --> 02:24:28,000
is also pretty simple um

3796
02:24:28,000 --> 02:24:31,680
when i was looking at this reverser

3797
02:24:31,680 --> 02:24:33,680
priority network already had the

3798
02:24:33,680 --> 02:24:35,920
server-side thing uh

3799
02:24:35,920 --> 02:24:38,960
sort of thing so we're looking into the

3800
02:24:38,960 --> 02:24:40,720
client side of things and

3801
02:24:40,720 --> 02:24:45,199
luckily it is also pretty simple

3802
02:24:46,640 --> 02:24:49,040
there are actually two methods of doing

3803
02:24:49,040 --> 02:24:49,760
tfo

3804
02:24:49,760 --> 02:24:53,760
as a tcp client one is

3805
02:24:53,760 --> 02:24:58,000
to not do a connect at all but

3806
02:24:58,000 --> 02:25:01,120
use a specific socket option in sense

3807
02:25:01,120 --> 02:25:04,080
so very specific flag in send system

3808
02:25:04,080 --> 02:25:04,640
call

3809
02:25:04,640 --> 02:25:07,600
alternatively you can also enable it

3810
02:25:07,600 --> 02:25:09,680
before you directly do the connect

3811
02:25:09,680 --> 02:25:13,520
to a server and then if your code

3812
02:25:13,520 --> 02:25:17,840
is doing

3813
02:25:17,840 --> 02:25:20,880
non-blocking io which i think most

3814
02:25:20,880 --> 02:25:24,560
recursive servers do then there are

3815
02:25:24,560 --> 02:25:28,160
actually no real other code changes

3816
02:25:28,160 --> 02:25:31,439
needed it does not sound difficult at

3817
02:25:31,439 --> 02:25:31,840
all

3818
02:25:31,840 --> 02:25:36,880
and but there's also

3819
02:25:36,880 --> 02:25:39,439
and there is a drawback and that is the

3820
02:25:39,439 --> 02:25:40,720
this particular set

3821
02:25:40,720 --> 02:25:44,240
circuit call is not documented at all

3822
02:25:44,240 --> 02:25:46,240
if you want to know how it works and how

3823
02:25:46,240 --> 02:25:47,760
to use it you have to

3824
02:25:47,760 --> 02:25:50,479
look up the pull request into linux

3825
02:25:50,479 --> 02:25:53,120
where it was introduced

3826
02:25:53,120 --> 02:25:55,439
and which explains how to use it so that

3827
02:25:55,439 --> 02:25:57,920
is a bit of a drawback

3828
02:25:57,920 --> 02:26:01,359
it seems that tcp

3829
02:26:01,359 --> 02:26:05,040
or other network socket options are

3830
02:26:05,040 --> 02:26:08,399
generally not documented

3831
02:26:08,399 --> 02:26:10,720
at all or very sparsely if they are

3832
02:26:10,720 --> 02:26:11,439
newer than

3833
02:26:11,439 --> 02:26:13,840
what is mentioned in let's say stephen's

3834
02:26:13,840 --> 02:26:15,920
or so

3835
02:26:15,920 --> 02:26:18,160
if it's too new you have to go ahead

3836
02:26:18,160 --> 02:26:20,560
sometimes for the documentation or even

3837
02:26:20,560 --> 02:26:23,760
look at the source code to actually find

3838
02:26:23,760 --> 02:26:24,640
out

3839
02:26:24,640 --> 02:26:27,680
what it is doing but actually

3840
02:26:27,680 --> 02:26:30,080
once you've found that out it is not

3841
02:26:30,080 --> 02:26:31,040
that hard

3842
02:26:31,040 --> 02:26:34,399
so next comes testing

3843
02:26:34,399 --> 02:26:38,319
and i was a bit surprised that

3844
02:26:38,319 --> 02:26:41,680
the code wasn't working as i was

3845
02:26:41,680 --> 02:26:44,319
expecting i looked at the wireshark

3846
02:26:44,319 --> 02:26:46,160
diagrams and i saw

3847
02:26:46,160 --> 02:26:49,760
strange things and well one of the

3848
02:26:49,760 --> 02:26:52,560
reasons was that i was using a dcp

3849
02:26:52,560 --> 02:26:53,439
forward

3850
02:26:53,439 --> 02:26:56,479
to quad eight and

3851
02:26:56,479 --> 02:26:59,840
what you have two minutes remaining

3852
02:26:59,840 --> 02:27:02,000
until the q a

3853
02:27:02,000 --> 02:27:05,120
okay uh quote 8 uses

3854
02:27:05,120 --> 02:27:08,240
is this 20 minutes

3855
02:27:11,040 --> 02:27:12,710
so the q and a

3856
02:27:12,710 --> 02:27:14,399
[Music]

3857
02:27:14,399 --> 02:27:16,640
sorry you have 5 minutes for q a but you

3858
02:27:16,640 --> 02:27:18,000
have two minutes five minutes okay yeah

3859
02:27:18,000 --> 02:27:19,520
yeah yeah

3860
02:27:19,520 --> 02:27:22,800
okay uh so the uh

3861
02:27:22,800 --> 02:27:26,240
the the problem is is that called a

3862
02:27:26,240 --> 02:27:29,600
uh does accept cookie requests

3863
02:27:29,600 --> 02:27:32,479
it does send back a cookie so here you

3864
02:27:32,479 --> 02:27:34,479
see in this diagram that the

3865
02:27:34,479 --> 02:27:37,040
tcpfs open was presenting a cookie it

3866
02:27:37,040 --> 02:27:38,240
received earlier

3867
02:27:38,240 --> 02:27:43,039
earlier but then what a

3868
02:27:43,120 --> 02:27:46,000
refuses the cookie sends a new cookie

3869
02:27:46,000 --> 02:27:48,640
and the client does a retransmission

3870
02:27:48,640 --> 02:27:53,359
after that so uh

3871
02:27:53,359 --> 02:27:57,200
quad a is supposedly

3872
02:27:57,200 --> 02:28:00,720
doing tfo but in practice it does not do

3873
02:28:00,720 --> 02:28:03,920
it properly and this is

3874
02:28:03,920 --> 02:28:09,040
uh some caused some head scratching and

3875
02:28:09,040 --> 02:28:12,319
i looked a bit into this and um

3876
02:28:12,319 --> 02:28:14,880
the summary is 4.8 is not the right dns

3877
02:28:14,880 --> 02:28:16,080
server to check

3878
02:28:16,080 --> 02:28:20,240
your tfo operations it does send cookies

3879
02:28:20,240 --> 02:28:21,280
it doesn't

3880
02:28:21,280 --> 02:28:23,920
but it does not accept the same cookie

3881
02:28:23,920 --> 02:28:24,399
it

3882
02:28:24,399 --> 02:28:26,640
in very rare cases it does accept it but

3883
02:28:26,640 --> 02:28:27,840
only if you

3884
02:28:27,840 --> 02:28:32,560
hit the same anycast server by accident

3885
02:28:34,000 --> 02:28:35,760
and the strange thing is there are

3886
02:28:35,760 --> 02:28:38,240
solutions to this problem

3887
02:28:38,240 --> 02:28:41,359
which google did not implement and you

3888
02:28:41,359 --> 02:28:42,080
can have two

3889
02:28:42,080 --> 02:28:46,479
ways of solving this issue either by

3890
02:28:46,479 --> 02:28:50,560
uh setting a the tfo secret used to

3891
02:28:50,560 --> 02:28:51,920
generate cookies

3892
02:28:51,920 --> 02:28:55,520
on a system or os level you can also do

3893
02:28:55,520 --> 02:28:57,760
it on a specific

3894
02:28:57,760 --> 02:29:00,560
listening socket from the server side

3895
02:29:00,560 --> 02:29:00,880
but

3896
02:29:00,880 --> 02:29:04,160
both are not implemented at 8.

3897
02:29:04,160 --> 02:29:07,920
so it advertises ufo support but does

3898
02:29:07,920 --> 02:29:08,319
not

3899
02:29:08,319 --> 02:29:10,880
implement it properly this is known at

3900
02:29:10,880 --> 02:29:12,640
google

3901
02:29:12,640 --> 02:29:17,199
for a long time already since 2017 and

3902
02:29:17,439 --> 02:29:20,800
what is a bit said is that both the

3903
02:29:20,800 --> 02:29:24,160
tfo rfc and the linux implementation

3904
02:29:24,160 --> 02:29:25,280
originate from

3905
02:29:25,280 --> 02:29:27,840
google so they have all the knowledge i

3906
02:29:27,840 --> 02:29:29,359
would assume they also have the

3907
02:29:29,359 --> 02:29:30,640
resources

3908
02:29:30,640 --> 02:29:33,600
but for some reason they do not support

3909
02:29:33,600 --> 02:29:35,520
it properly

3910
02:29:35,520 --> 02:29:38,160
this is also observed at google's

3911
02:29:38,160 --> 02:29:39,920
authoritative servers of course that is

3912
02:29:39,920 --> 02:29:41,280
the issue i was

3913
02:29:41,280 --> 02:29:44,000
most concerned with because i was doing

3914
02:29:44,000 --> 02:29:45,200
the

3915
02:29:45,200 --> 02:29:48,840
recursion to authoritative part of the

3916
02:29:48,840 --> 02:29:51,840
problem

3917
02:29:52,720 --> 02:29:56,560
for the dot and the doh offering at the

3918
02:29:56,560 --> 02:29:58,960
quarter eight they do that correctly so

3919
02:29:58,960 --> 02:29:59,840
they don't

3920
02:29:59,840 --> 02:30:01,840
know how to do it but for some reason

3921
02:30:01,840 --> 02:30:04,720
they have not implemented that for

3922
02:30:04,720 --> 02:30:06,560
both the authoritative servers and the

3923
02:30:06,560 --> 02:30:08,240
their recursive servers

3924
02:30:08,240 --> 02:30:12,720
for a clear text tcp

3925
02:30:13,280 --> 02:30:18,399
other public uh

3926
02:30:18,399 --> 02:30:21,439
precursors do support it but only for

3927
02:30:21,439 --> 02:30:22,560
doh

3928
02:30:22,560 --> 02:30:24,880
and the nice thing is if you do a dot or

3929
02:30:24,880 --> 02:30:26,880
the oh connection is that tfo allows you

3930
02:30:26,880 --> 02:30:27,280
to

3931
02:30:27,280 --> 02:30:29,760
send the client hello immediately

3932
02:30:29,760 --> 02:30:31,359
included in the first

3933
02:30:31,359 --> 02:30:34,399
packet so that is nice authoritative

3934
02:30:34,399 --> 02:30:36,319
servers are very rare

3935
02:30:36,319 --> 02:30:38,240
their support there's more detail in

3936
02:30:38,240 --> 02:30:40,960
this in the paper paper i mentioned

3937
02:30:40,960 --> 02:30:44,000
and i

3938
02:30:44,000 --> 02:30:46,399
since there is now already quite some

3939
02:30:46,399 --> 02:30:47,680
years it has been

3940
02:30:47,680 --> 02:30:50,800
available in the linux kernel it's it

3941
02:30:50,800 --> 02:30:53,040
seems a bit uh

3942
02:30:53,040 --> 02:30:54,960
low that number is presented so it would

3943
02:30:54,960 --> 02:30:57,200
be really nice to do that study again

3944
02:30:57,200 --> 02:30:57,840
and

3945
02:30:57,840 --> 02:31:00,640
see if more authoritative servers do

3946
02:31:00,640 --> 02:31:01,439
support

3947
02:31:01,439 --> 02:31:04,880
tfo but

3948
02:31:04,880 --> 02:31:06,640
this is not the only issue there's also

3949
02:31:06,640 --> 02:31:10,080
an issue on the client side

3950
02:31:10,479 --> 02:31:15,280
the linux kernel is

3951
02:31:15,280 --> 02:31:17,520
doing all the work but it's not doing

3952
02:31:17,520 --> 02:31:18,319
all the work

3953
02:31:18,319 --> 02:31:21,359
always uh

3954
02:31:21,359 --> 02:31:22,850
if you look at

3955
02:31:22,850 --> 02:31:24,399
[Music]

3956
02:31:24,399 --> 02:31:27,760
packet captures and in data reported by

3957
02:31:27,760 --> 02:31:28,640
netstat

3958
02:31:28,640 --> 02:31:31,040
you see that you see a lot of open

3959
02:31:31,040 --> 02:31:31,680
active

3960
02:31:31,680 --> 02:31:35,040
fails but also open

3961
02:31:35,040 --> 02:31:39,520
black hole counters increase

3962
02:31:40,080 --> 02:31:42,640
these counters are not documented as far

3963
02:31:42,640 --> 02:31:43,760
as

3964
02:31:43,760 --> 02:31:46,960
as i know but looking at the source code

3965
02:31:46,960 --> 02:31:48,720
in the linux kernel

3966
02:31:48,720 --> 02:31:51,520
and some descriptions or found by

3967
02:31:51,520 --> 02:31:52,479
googling

3968
02:31:52,479 --> 02:31:56,160
it turns out that the linux kernel

3969
02:31:56,160 --> 02:31:59,359
is extremely conservative

3970
02:31:59,359 --> 02:32:02,560
effectively if a single

3971
02:32:02,560 --> 02:32:05,439
tfo connection times out for whatever

3972
02:32:05,439 --> 02:32:06,080
reason

3973
02:32:06,080 --> 02:32:07,760
just maybe because the particular

3974
02:32:07,760 --> 02:32:09,520
authoritative server is not

3975
02:32:09,520 --> 02:32:13,680
available it will stop using tfo

3976
02:32:13,680 --> 02:32:16,960
for all connections for an hour

3977
02:32:16,960 --> 02:32:19,600
by default so that means that if you

3978
02:32:19,600 --> 02:32:20,399
have one

3979
02:32:20,399 --> 02:32:22,080
authoritative server which does not

3980
02:32:22,080 --> 02:32:24,800
respond over gcp

3981
02:32:24,800 --> 02:32:27,090
even

3982
02:32:27,090 --> 02:32:28,640
[Music]

3983
02:32:28,640 --> 02:32:30,960
authoritative servers you can try to

3984
02:32:30,960 --> 02:32:31,840
connect to

3985
02:32:31,840 --> 02:32:35,200
and that worked before will not

3986
02:32:35,200 --> 02:32:38,080
stop using pfo for one hour and if it

3987
02:32:38,080 --> 02:32:38,960
happens again

3988
02:32:38,960 --> 02:32:42,399
the period is even longer

3989
02:32:42,399 --> 02:32:45,280
so there's next explanation back off

3990
02:32:45,280 --> 02:32:47,439
well in practice

3991
02:32:47,439 --> 02:32:50,479
hitting authoritative servers with

3992
02:32:50,479 --> 02:32:53,680
issues happens a lot and

3993
02:32:53,680 --> 02:32:56,240
is not rare at all so that means in

3994
02:32:56,240 --> 02:32:57,680
practice we

3995
02:32:57,680 --> 02:33:00,319
are seeing that even if you have ufo

3996
02:33:00,319 --> 02:33:01,200
enabled

3997
02:33:01,200 --> 02:33:04,560
you practice the

3998
02:33:04,560 --> 02:33:06,640
protection mechanism so to speak kicks

3999
02:33:06,640 --> 02:33:07,600
in

4000
02:33:07,600 --> 02:33:10,640
and tifo is disabled by the colonel

4001
02:33:10,640 --> 02:33:14,000
why would it be so conservative and i

4002
02:33:14,000 --> 02:33:16,640
guess that is because well maybe you are

4003
02:33:16,640 --> 02:33:18,080
in a situation where

4004
02:33:18,080 --> 02:33:20,000
a middle some middle box does not allow

4005
02:33:20,000 --> 02:33:22,160
tfo because it does not

4006
02:33:22,160 --> 02:33:23,920
like this particular option it does not

4007
02:33:23,920 --> 02:33:25,840
know that particular option and some

4008
02:33:25,840 --> 02:33:28,640
little boxes are very strict in that so

4009
02:33:28,640 --> 02:33:29,120
it will

4010
02:33:29,120 --> 02:33:31,040
kill the connection kill drop the

4011
02:33:31,040 --> 02:33:32,160
packets

4012
02:33:32,160 --> 02:33:35,200
and that has the effect that

4013
02:33:35,200 --> 02:33:38,640
it just stops working

4014
02:33:39,680 --> 02:33:43,439
so i think we can come to

4015
02:33:43,439 --> 02:33:45,680
the conclusion that tfo as a technical

4016
02:33:45,680 --> 02:33:47,600
measure does work

4017
02:33:47,600 --> 02:33:50,880
it is faster than no tfo

4018
02:33:50,880 --> 02:33:54,080
but the abduction is very slow even if

4019
02:33:54,080 --> 02:33:55,680
the kernel does all the work and the

4020
02:33:55,680 --> 02:33:57,439
introduction into an application is

4021
02:33:57,439 --> 02:33:58,720
pretty simple

4022
02:33:58,720 --> 02:34:02,399
so the adaption is slow because of the

4023
02:34:02,399 --> 02:34:07,599
conservative client approach

4024
02:34:08,080 --> 02:34:10,800
lack of documentation on the server side

4025
02:34:10,800 --> 02:34:11,920
both in the kernel

4026
02:34:11,920 --> 02:34:14,960
and in dns servers

4027
02:34:14,960 --> 02:34:18,880
so it's uh all the

4028
02:34:18,880 --> 02:34:21,280
nice things are there simple

4029
02:34:21,280 --> 02:34:22,560
implementation

4030
02:34:22,560 --> 02:34:24,399
completely done by the os almost

4031
02:34:24,399 --> 02:34:25,840
completely done by the west

4032
02:34:25,840 --> 02:34:28,160
but still adoption is very slow and

4033
02:34:28,160 --> 02:34:29,040
that's a bit of

4034
02:34:29,040 --> 02:34:32,479
pity because i think well it could

4035
02:34:32,479 --> 02:34:35,280
at least lighten some of the drawbacks

4036
02:34:35,280 --> 02:34:36,000
of

4037
02:34:36,000 --> 02:34:39,359
pcp and

4038
02:34:39,359 --> 02:34:42,960
i would say that the aggressive non-use

4039
02:34:42,960 --> 02:34:44,640
of

4040
02:34:44,640 --> 02:34:47,680
dfo in the linux kernels could change

4041
02:34:47,680 --> 02:34:49,920
within that respect and also the

4042
02:34:49,920 --> 02:34:50,800
documentation

4043
02:34:50,800 --> 02:34:53,359
on how to set it up properly but the

4044
02:34:53,359 --> 02:34:56,000
assist controls etc should also improve

4045
02:34:56,000 --> 02:34:58,000
and then it maybe has a chance to get

4046
02:34:58,000 --> 02:34:59,760
some traction

4047
02:34:59,760 --> 02:35:03,840
so that is i think the conclusion

4048
02:35:03,840 --> 02:35:06,640
thank you i'll thank you

4049
02:35:06,960 --> 02:35:10,080
um i'm afraid we are now also

4050
02:35:10,080 --> 02:35:13,439
out of question and answer time

4051
02:35:13,439 --> 02:35:18,240
uh maybe sorry about it i i had a yeah

4052
02:35:18,240 --> 02:35:20,160
i made a mistake in my head with the

4053
02:35:20,160 --> 02:35:21,840
time allotted so

4054
02:35:21,840 --> 02:35:24,399
i i know i know time flies when you're

4055
02:35:24,399 --> 02:35:25,680
having fun

4056
02:35:25,680 --> 02:35:28,000
but maybe even ash you can put up the

4057
02:35:28,000 --> 02:35:29,439
pool

4058
02:35:29,439 --> 02:35:33,359
window very quickly to wait the talk

4059
02:35:33,359 --> 02:35:36,240
because it's the only opportunity to do

4060
02:35:36,240 --> 02:35:37,439
so

4061
02:35:37,439 --> 02:35:41,280
and then i

4062
02:35:41,280 --> 02:35:45,120
take this opportunity to just read out a

4063
02:35:45,120 --> 02:35:48,960
remark from punit suit

4064
02:35:48,960 --> 02:35:52,160
from google google public dns the tcp

4065
02:35:52,160 --> 02:35:54,080
fast open feature felt through the

4066
02:35:54,080 --> 02:35:54,640
cracks

4067
02:35:54,640 --> 02:35:58,160
not intentional also

4068
02:35:58,160 --> 02:36:01,680
otto i invite you to

4069
02:36:01,680 --> 02:36:04,160
answer the remaining questions from

4070
02:36:04,160 --> 02:36:05,120
brian dixon

4071
02:36:05,120 --> 02:36:09,120
in the q a feature in zoom

4072
02:36:09,120 --> 02:36:12,880
so we can continue

4073
02:36:13,200 --> 02:36:16,880
with the next talk which will be from

4074
02:36:16,880 --> 02:36:20,080
giovanna maura

4075
02:36:20,080 --> 02:36:21,920
and giovanna will talk about

4076
02:36:21,920 --> 02:36:23,840
fragmentation truncation

4077
02:36:23,840 --> 02:36:27,840
and timeouts are large dns messages

4078
02:36:27,840 --> 02:36:31,200
failing to bits falling to bits

4079
02:36:31,200 --> 02:36:34,000
all right all right good morning evening

4080
02:36:34,000 --> 02:36:34,399
or

4081
02:36:34,399 --> 02:36:36,960
afternoon water depending on where you

4082
02:36:36,960 --> 02:36:38,080
are

4083
02:36:38,080 --> 02:36:40,319
thanks willem um so yeah this is work

4084
02:36:40,319 --> 02:36:42,880
we've done in sidne labs

4085
02:36:42,880 --> 02:36:45,439
me and moritz and marco martinez

4086
02:36:45,439 --> 02:36:47,120
christian who's also at the university

4087
02:36:47,120 --> 02:36:49,359
of twente also in the netherlands

4088
02:36:49,359 --> 02:36:51,359
uh we're we're going to look today into

4089
02:36:51,359 --> 02:36:53,200
fragmentation truncation and

4090
02:36:53,200 --> 02:36:54,720
times out and while we didn't as

4091
02:36:54,720 --> 02:36:56,640
messages are falling to bits

4092
02:36:56,640 --> 02:36:58,960
i mean jeff houston has been doing like

4093
02:36:58,960 --> 02:36:59,680
lots

4094
02:36:59,680 --> 02:37:01,520
lots of work in this field and this was

4095
02:37:01,520 --> 02:37:03,439
actually inspired by his work

4096
02:37:03,439 --> 02:37:05,760
and also by the well i started the dns

4097
02:37:05,760 --> 02:37:07,600
flight they was coming along

4098
02:37:07,600 --> 02:37:08,960
and i thought it was a good opportunity

4099
02:37:08,960 --> 02:37:10,960
to uh have

4100
02:37:10,960 --> 02:37:14,080
data from a different vantage point on

4101
02:37:14,080 --> 02:37:15,280
the same issue

4102
02:37:15,280 --> 02:37:17,439
so that's the actually the start of this

4103
02:37:17,439 --> 02:37:18,319
this this is

4104
02:37:18,319 --> 02:37:20,800
uh this presentation and actually it was

4105
02:37:20,800 --> 02:37:22,080
a paper that we published at

4106
02:37:22,080 --> 02:37:24,319
pump 2021 and if you folks are

4107
02:37:24,319 --> 02:37:25,120
interested

4108
02:37:25,120 --> 02:37:26,720
you can actually download them in this

4109
02:37:26,720 --> 02:37:28,640
link so

4110
02:37:28,640 --> 02:37:31,920
uh this i don't really have to cover

4111
02:37:31,920 --> 02:37:32,880
much because everyone

4112
02:37:32,880 --> 02:37:35,359
knows all these things here is genesis

4113
02:37:35,359 --> 02:37:37,680
and the car protocols in the internet

4114
02:37:37,680 --> 02:37:40,800
but if udp fails due to

4115
02:37:40,800 --> 02:37:42,560
the message is too large if it gets

4116
02:37:42,560 --> 02:37:44,160
truncated um

4117
02:37:44,160 --> 02:37:46,319
what happens is resolvers should retry

4118
02:37:46,319 --> 02:37:48,960
using tcp

4119
02:37:48,960 --> 02:37:51,120
but the problem is there it's with large

4120
02:37:51,120 --> 02:37:52,560
messages over dns

4121
02:37:52,560 --> 02:37:55,840
udp over udp well vanilla

4122
02:37:55,840 --> 02:37:59,680
dns over edp supports maximum 512 bytes

4123
02:37:59,680 --> 02:38:02,240
uh over dcp there is no strict limit

4124
02:38:02,240 --> 02:38:04,880
but eg and s0 extend this limit to much

4125
02:38:04,880 --> 02:38:07,920
upper higher levels for udp

4126
02:38:07,920 --> 02:38:09,680
but if the response is too large what

4127
02:38:09,680 --> 02:38:11,600
can happen is

4128
02:38:11,600 --> 02:38:13,280
you know for the network if it's true

4129
02:38:13,280 --> 02:38:15,200
arduino network mtu

4130
02:38:15,200 --> 02:38:17,439
the packets can be either fragmented or

4131
02:38:17,439 --> 02:38:18,240
discarded

4132
02:38:18,240 --> 02:38:20,080
and well traffic has been covered this

4133
02:38:20,080 --> 02:38:21,520
for a long time it can

4134
02:38:21,520 --> 02:38:23,680
lead for unreachability and actually

4135
02:38:23,680 --> 02:38:25,359
there was also a study from and now that

4136
02:38:25,359 --> 02:38:27,200
labs on that i think over v6

4137
02:38:27,200 --> 02:38:30,960
specifically um we also cite that uh

4138
02:38:30,960 --> 02:38:32,560
and the server body can do if you just

4139
02:38:32,560 --> 02:38:34,640
response is too large you can truncate

4140
02:38:34,640 --> 02:38:37,680
and the client can ask it via tcp uh but

4141
02:38:37,680 --> 02:38:39,040
the question you analyze very

4142
02:38:39,040 --> 02:38:40,960
interesting here is how big is this of a

4143
02:38:40,960 --> 02:38:43,040
problem on dns based on the data that we

4144
02:38:43,040 --> 02:38:44,080
have

4145
02:38:44,080 --> 02:38:47,280
and we have data from a ctod uh

4146
02:38:47,280 --> 02:38:50,160
the netherlands dot nl we're gonna look

4147
02:38:50,160 --> 02:38:51,760
what he did in his research is

4148
02:38:51,760 --> 02:38:54,880
look into three different months of data

4149
02:38:54,880 --> 02:38:57,520
uh from two of our authoritative name

4150
02:38:57,520 --> 02:38:58,560
servers

4151
02:38:58,560 --> 02:39:02,960
um july 19 july 20 october 2020

4152
02:39:02,960 --> 02:39:04,479
and here in the state we have entire

4153
02:39:04,479 --> 02:39:06,240
breakdown you see that

4154
02:39:06,240 --> 02:39:10,160
like roughly 2.93 to up 7.15

4155
02:39:10,160 --> 02:39:13,359
of the queries actually udp truncated um

4156
02:39:13,359 --> 02:39:14,560
you see here the

4157
02:39:14,560 --> 02:39:17,439
ratio of tcp ideally they should be

4158
02:39:17,439 --> 02:39:18,160
similar

4159
02:39:18,160 --> 02:39:20,720
uh but you i'm gonna get later into that

4160
02:39:20,720 --> 02:39:21,439
why

4161
02:39:21,439 --> 02:39:23,520
some tc udp carriers are not being

4162
02:39:23,520 --> 02:39:24,880
followed up

4163
02:39:24,880 --> 02:39:28,560
um so in total we get 169 billion queers

4164
02:39:28,560 --> 02:39:28,800
and

4165
02:39:28,800 --> 02:39:32,640
responses i mean queers and 164 billion

4166
02:39:32,640 --> 02:39:35,040
responses from unique 3 million ip

4167
02:39:35,040 --> 02:39:35,840
addresses

4168
02:39:35,840 --> 02:39:39,040
and 46 thousand antenna systems uh

4169
02:39:39,040 --> 02:39:40,479
and these are the questions we're going

4170
02:39:40,479 --> 02:39:42,720
to analyze how come on are large dns

4171
02:39:42,720 --> 02:39:44,000
responses

4172
02:39:44,000 --> 02:39:45,840
how come is truncation on our server

4173
02:39:45,840 --> 02:39:47,840
side if resolvers

4174
02:39:47,840 --> 02:39:50,960
also fall back to tcp and what is the

4175
02:39:50,960 --> 02:39:53,920
impact of flag day 2020

4176
02:39:53,920 --> 02:39:56,160
so the first question that we analyzed

4177
02:39:56,160 --> 02:39:57,040
when

4178
02:39:57,040 --> 02:39:58,479
analyzing this data is to analyze the

4179
02:39:58,479 --> 02:40:00,000
response sizes that came out of our

4180
02:40:00,000 --> 02:40:00,720
servers

4181
02:40:00,720 --> 02:40:03,040
for the data and now zone and we found

4182
02:40:03,040 --> 02:40:04,399
it 99 well

4183
02:40:04,399 --> 02:40:05,760
virtually all the queries pretty much

4184
02:40:05,760 --> 02:40:07,359
you can see here in the cdf are smaller

4185
02:40:07,359 --> 02:40:08,800
than 12 32

4186
02:40:08,800 --> 02:40:10,399
they'll after they choose right here so

4187
02:40:10,399 --> 02:40:11,920
you see like pretty much you everybody

4188
02:40:11,920 --> 02:40:12,880
here is a cdf

4189
02:40:12,880 --> 02:40:15,359
in regardless of udp of of the server or

4190
02:40:15,359 --> 02:40:17,200
tcp are smaller than

4191
02:40:17,200 --> 02:40:21,120
um 12 32

4192
02:40:21,120 --> 02:40:22,800
and that's the limit that was chosen by

4193
02:40:22,800 --> 02:40:24,880
the the dns flag day

4194
02:40:24,880 --> 02:40:27,120
and even we say well that's because it's

4195
02:40:27,120 --> 02:40:28,800
starting out it's once the cctv you

4196
02:40:28,800 --> 02:40:30,479
cannot generalize that

4197
02:40:30,479 --> 02:40:32,880
well a resolver server service from

4198
02:40:32,880 --> 02:40:35,760
google report that 99.7 percent of their

4199
02:40:35,760 --> 02:40:38,560
own queries are smaller than 1232 too

4200
02:40:38,560 --> 02:40:41,439
so it kind of confirms mo our view as

4201
02:40:41,439 --> 02:40:42,240
well

4202
02:40:42,240 --> 02:40:46,240
and over both v4 and v6

4203
02:40:46,240 --> 02:40:49,279
um the other question we look at it's

4204
02:40:49,279 --> 02:40:49,760
like

4205
02:40:49,760 --> 02:40:51,600
how often service server side

4206
02:40:51,600 --> 02:40:53,439
fragmentation occurs

4207
02:40:53,439 --> 02:40:55,760
so since our vantage point is passive

4208
02:40:55,760 --> 02:40:57,439
alternative to server we cannot really

4209
02:40:57,439 --> 02:40:59,040
know what happens in the network between

4210
02:40:59,040 --> 02:41:00,960
us and the client

4211
02:41:00,960 --> 02:41:03,600
we just look at what gets fragmented by

4212
02:41:03,600 --> 02:41:04,720
us uh

4213
02:41:04,720 --> 02:41:06,800
and we see that on the server side

4214
02:41:06,800 --> 02:41:08,800
there's very little fragmentation if

4215
02:41:08,800 --> 02:41:10,560
there is any fragmentation going on is

4216
02:41:10,560 --> 02:41:12,240
on the network but we cannot really see

4217
02:41:12,240 --> 02:41:14,840
that very easily

4218
02:41:14,840 --> 02:41:17,600
um and we get less than 10 000 queries a

4219
02:41:17,600 --> 02:41:19,920
day from 2.2 billion daily on that so

4220
02:41:19,920 --> 02:41:20,640
it's not

4221
02:41:20,640 --> 02:41:22,640
like a lot of cures being fragmented on

4222
02:41:22,640 --> 02:41:24,880
the server side

4223
02:41:24,880 --> 02:41:27,520
uh what about in-network fragmentation

4224
02:41:27,520 --> 02:41:29,359
so since our vantage point does not

4225
02:41:29,359 --> 02:41:30,000
allow us to

4226
02:41:30,000 --> 02:41:32,960
see that we ran two measurements with

4227
02:41:32,960 --> 02:41:33,840
ripe atlas

4228
02:41:33,840 --> 02:41:36,560
and we had like in this in this

4229
02:41:36,560 --> 02:41:38,160
measurements we have this number of

4230
02:41:38,160 --> 02:41:40,160
active probes on both measurements

4231
02:41:40,160 --> 02:41:41,920
sending this number of queries

4232
02:41:41,920 --> 02:41:43,439
and the difference between the large

4233
02:41:43,439 --> 02:41:45,120
measurement and the small is this

4234
02:41:45,120 --> 02:41:46,560
response size

4235
02:41:46,560 --> 02:41:49,520
one has 1744. these are responses that

4236
02:41:49,520 --> 02:41:51,600
run on the dns of that nl

4237
02:41:51,600 --> 02:41:53,439
on the data nails on and the one had a

4238
02:41:53,439 --> 02:41:54,960
very small response size

4239
02:41:54,960 --> 02:41:56,880
and what he wanted to know it's like

4240
02:41:56,880 --> 02:41:58,399
what is the

4241
02:41:58,399 --> 02:42:00,080
percentage of queries that time out when

4242
02:42:00,080 --> 02:42:02,160
you retrieve smaller answers

4243
02:42:02,160 --> 02:42:04,560
about this size from ripe atlas and is

4244
02:42:04,560 --> 02:42:05,520
this number

4245
02:42:05,520 --> 02:42:07,600
and i mean like using ripe atlas

4246
02:42:07,600 --> 02:42:09,279
directly to query

4247
02:42:09,279 --> 02:42:12,080
our authoritative server and s3 and not

4248
02:42:12,080 --> 02:42:13,520
using resolvers

4249
02:42:13,520 --> 02:42:16,399
so for some reason 2.5 and a half

4250
02:42:16,399 --> 02:42:17,279
percent

4251
02:42:17,279 --> 02:42:19,279
of all the queries that go to ns3 from

4252
02:42:19,279 --> 02:42:20,399
this eight

4253
02:42:20,399 --> 02:42:22,880
five eight thousand five hundred probes

4254
02:42:22,880 --> 02:42:24,160
get lost

4255
02:42:24,160 --> 02:42:26,800
but if you amplify that to this uh use a

4256
02:42:26,800 --> 02:42:28,880
larger response size

4257
02:42:28,880 --> 02:42:30,800
you see an increase to up up to seven

4258
02:42:30,800 --> 02:42:31,920
percent so

4259
02:42:31,920 --> 02:42:33,920
the difference should give an indication

4260
02:42:33,920 --> 02:42:35,359
of what's being uh

4261
02:42:35,359 --> 02:42:38,560
fragmented and lost in the network um

4262
02:42:38,560 --> 02:42:40,319
but it cannot be used to be 100 sure

4263
02:42:40,319 --> 02:42:41,600
because you don't have the full view of

4264
02:42:41,600 --> 02:42:43,200
the network

4265
02:42:43,200 --> 02:42:45,279
um so what about the network

4266
02:42:45,279 --> 02:42:47,040
fragmentation um

4267
02:42:47,040 --> 02:42:48,880
uh well that's our just pretty much what

4268
02:42:48,880 --> 02:42:50,319
i just repeated there

4269
02:42:50,319 --> 02:42:52,000
we we just see the responses of the

4270
02:42:52,000 --> 02:42:54,960
clients but uh the figures that we found

4271
02:42:54,960 --> 02:42:56,560
as numbers here confirms periodic

4272
02:42:56,560 --> 02:42:58,399
studies

4273
02:42:58,399 --> 02:43:01,520
and the next question we analyze over

4274
02:43:01,520 --> 02:43:02,000
this

4275
02:43:02,000 --> 02:43:04,880
uh research is how common is dns

4276
02:43:04,880 --> 02:43:06,160
truncation

4277
02:43:06,160 --> 02:43:08,399
well truncation occurs when the response

4278
02:43:08,399 --> 02:43:10,240
is too large to be sent by the server to

4279
02:43:10,240 --> 02:43:11,279
the client

4280
02:43:11,279 --> 02:43:14,479
and the server just truncates it to a

4281
02:43:14,479 --> 02:43:16,720
certain limit and flags with a tc flag

4282
02:43:16,720 --> 02:43:17,439
on

4283
02:43:17,439 --> 02:43:19,920
and i as i said here that depends on the

4284
02:43:19,920 --> 02:43:21,920
data set we're looking at but it's

4285
02:43:21,920 --> 02:43:22,960
between

4286
02:43:22,960 --> 02:43:24,720
roughly three percent to up seven

4287
02:43:24,720 --> 02:43:26,479
percent depending on the p version of

4288
02:43:26,479 --> 02:43:28,399
the data set you're looking at

4289
02:43:28,399 --> 02:43:30,319
uh in the course we're looking at the

4290
02:43:30,319 --> 02:43:32,640
requiring and truncated this value

4291
02:43:32,640 --> 02:43:34,880
and we also identify the paper that

4292
02:43:34,880 --> 02:43:37,279
large gns0 buffers do not prevent

4293
02:43:37,279 --> 02:43:40,000
temptation either

4294
02:43:40,000 --> 02:43:43,279
and so we also wanted to know how many

4295
02:43:43,279 --> 02:43:45,040
queries that are truncated

4296
02:43:45,040 --> 02:43:46,319
how many of them are actually followed

4297
02:43:46,319 --> 02:43:48,399
up by tcp queries

4298
02:43:48,399 --> 02:43:51,840
and um we found that the details are in

4299
02:43:51,840 --> 02:43:53,359
the paper but we found out that

4300
02:43:53,359 --> 02:43:55,920
roughly 7 80 to 85 percent of the

4301
02:43:55,920 --> 02:43:57,359
queries depending on

4302
02:43:57,359 --> 02:43:59,520
uh where you're looking at they're

4303
02:43:59,520 --> 02:44:01,520
actually being followed by tcp

4304
02:44:01,520 --> 02:44:03,359
but we all know that there's a lot of

4305
02:44:03,359 --> 02:44:05,600
strange behavior on dns so maybe some

4306
02:44:05,600 --> 02:44:07,520
reservers are not standard

4307
02:44:07,520 --> 02:44:11,680
but the details are in the paper and

4308
02:44:11,680 --> 02:44:13,680
we also look at where the most common

4309
02:44:13,680 --> 02:44:15,920
advertised egns values

4310
02:44:15,920 --> 02:44:19,040
by clients uh this is the data set of

4311
02:44:19,040 --> 02:44:21,040
july 2020 so we've got all the queries

4312
02:44:21,040 --> 02:44:21,760
for that month

4313
02:44:21,760 --> 02:44:23,680
and we get all the dns zero values that

4314
02:44:23,680 --> 02:44:25,200
they plot

4315
02:44:25,200 --> 02:44:27,120
and you see that most resolvers here are

4316
02:44:27,120 --> 02:44:28,319
using

4317
02:44:28,319 --> 02:44:31,439
the ford uh 26 uh dns zero

4318
02:44:31,439 --> 02:44:34,640
value um some they're just using 12 uh

4319
02:44:34,640 --> 02:44:38,479
512 and there's a large distribution

4320
02:44:38,479 --> 02:44:39,600
over here

4321
02:44:39,600 --> 02:44:41,680
so and here distribution pair autonomous

4322
02:44:41,680 --> 02:44:43,120
systems so fort

4323
02:44:43,120 --> 02:44:45,680
4096 is still pretty popular that's the

4324
02:44:45,680 --> 02:44:47,359
conclusion you can get here

4325
02:44:47,359 --> 02:44:49,920
um and bind and i think maybe other

4326
02:44:49,920 --> 02:44:50,800
resolvers too

4327
02:44:50,800 --> 02:44:54,160
i'm not quite positive they don't use a

4328
02:44:54,160 --> 02:44:54,640
fixed

4329
02:44:54,640 --> 02:44:57,359
18 as zero value they use one and they

4330
02:44:57,359 --> 02:44:58,399
keep on

4331
02:44:58,399 --> 02:45:00,640
changing that value depending on the

4332
02:45:00,640 --> 02:45:02,479
server increment and increasing

4333
02:45:02,479 --> 02:45:04,000
depending on if they get an answer

4334
02:45:04,000 --> 02:45:06,319
without truncation or not so this figure

4335
02:45:06,319 --> 02:45:08,080
here shows the number of unique

4336
02:45:08,080 --> 02:45:10,880
dns values per resolver and you see like

4337
02:45:10,880 --> 02:45:11,840
roughly 70

4338
02:45:11,840 --> 02:45:13,760
of other resolvers just announced one

4339
02:45:13,760 --> 02:45:15,279
dns value to us

4340
02:45:15,279 --> 02:45:18,640
but uh but we see like um

4341
02:45:18,640 --> 02:45:20,319
the other the others actually like no

4342
02:45:20,319 --> 02:45:22,640
above here they send at least two

4343
02:45:22,640 --> 02:45:24,880
engines value so the same ip address is

4344
02:45:24,880 --> 02:45:25,600
using different

4345
02:45:25,600 --> 02:45:30,080
values but most just an advertised one

4346
02:45:30,080 --> 02:45:33,479
um so cns flag day uh

4347
02:45:33,479 --> 02:45:36,479
2020 that was a project

4348
02:45:36,479 --> 02:45:39,120
initiated by the community and the idea

4349
02:45:39,120 --> 02:45:40,880
was to get like

4350
02:45:40,880 --> 02:45:44,240
folks to avoid any cause fragmentation

4351
02:45:44,240 --> 02:45:46,800
and one way to do that was decided was

4352
02:45:46,800 --> 02:45:47,680
to use the

4353
02:45:47,680 --> 02:45:52,160
edns buffer size it would actually limit

4354
02:45:52,160 --> 02:45:54,240
the change it would reduce the chances

4355
02:45:54,240 --> 02:45:56,960
of truncation and the value of 1232 was

4356
02:45:56,960 --> 02:45:59,040
chosen for that there's a lot of

4357
02:45:59,040 --> 02:46:00,399
reasonings for that

4358
02:46:00,399 --> 02:46:03,120
and the idea is so if you would

4359
02:46:03,120 --> 02:46:05,520
advertise use your resolvers to

4360
02:46:05,520 --> 02:46:07,680
advertise that value you could like uh

4361
02:46:07,680 --> 02:46:09,279
eliminate problem fragmentation and

4362
02:46:09,279 --> 02:46:11,120
reduce truncation

4363
02:46:11,120 --> 02:46:14,880
and that is like what was that take

4364
02:46:14,880 --> 02:46:16,720
we wanted to see that using our data and

4365
02:46:16,720 --> 02:46:17,920
to identify that

4366
02:46:17,920 --> 02:46:19,600
we compared the data that we had from

4367
02:46:19,600 --> 02:46:21,520
july 2020

4368
02:46:21,520 --> 02:46:24,399
that was before the flag day and the

4369
02:46:24,399 --> 02:46:26,319
entire month of october 2020

4370
02:46:26,319 --> 02:46:29,120
right after the flag day and we plot the

4371
02:46:29,120 --> 02:46:31,359
cds here the distribution

4372
02:46:31,359 --> 02:46:34,560
of all the responses that we get based

4373
02:46:34,560 --> 02:46:35,840
on that

4374
02:46:35,840 --> 02:46:39,040
and you see that the curves they

4375
02:46:39,040 --> 02:46:42,000
pretty much overlap to each other and

4376
02:46:42,000 --> 02:46:44,720
that's a sign

4377
02:46:46,640 --> 02:46:50,080
apologies this is a sign that has

4378
02:46:50,080 --> 02:46:51,040
nothing has been

4379
02:46:51,040 --> 02:46:53,200
there's no there has been no significant

4380
02:46:53,200 --> 02:46:55,600
changes up to october 2020

4381
02:46:55,600 --> 02:46:58,960
and we actually look into the data

4382
02:46:58,960 --> 02:47:02,800
and we found uh that

4383
02:47:02,800 --> 02:47:06,240
11 000 resolve was pretty much uh

4384
02:47:06,240 --> 02:47:09,520
changed from whatever values they had to

4385
02:47:09,520 --> 02:47:12,800
12 15 12 32 actually

4386
02:47:12,800 --> 02:47:15,520
that's that was the value recommended by

4387
02:47:15,520 --> 02:47:16,399
the flag day

4388
02:47:16,399 --> 02:47:17,840
and you see that the values that where

4389
02:47:17,840 --> 02:47:19,600
they came from so it's not a large a

4390
02:47:19,600 --> 02:47:21,520
large number of resolvers that actually

4391
02:47:21,520 --> 02:47:24,240
change that

4392
02:47:24,560 --> 02:47:28,080
so we see that maybe we need to measure

4393
02:47:28,080 --> 02:47:29,359
more often maybe

4394
02:47:29,359 --> 02:47:32,080
maybe to measure like now or in a couple

4395
02:47:32,080 --> 02:47:33,359
of months from now

4396
02:47:33,359 --> 02:47:36,399
to see the uptake but right after the

4397
02:47:36,399 --> 02:47:37,120
adoption

4398
02:47:37,120 --> 02:47:40,240
of uh right after the flag day we didn't

4399
02:47:40,240 --> 02:47:40,800
see

4400
02:47:40,800 --> 02:47:43,040
much uptake we described some networks

4401
02:47:43,040 --> 02:47:44,560
that actually did that we could

4402
02:47:44,560 --> 02:47:47,600
clearly see that in our data but

4403
02:47:47,600 --> 02:47:49,600
still you know there hasn't been that

4404
02:47:49,600 --> 02:47:53,040
many as we could would have hoped for

4405
02:47:53,040 --> 02:47:56,080
um and

4406
02:47:56,080 --> 02:47:57,600
to summarize what you see here this is

4407
02:47:57,600 --> 02:47:58,880
pretty much a summary of what we've seen

4408
02:47:58,880 --> 02:48:00,160
in the paper

4409
02:48:00,160 --> 02:48:03,200
um the question is are dns responses

4410
02:48:03,200 --> 02:48:04,399
fall into bits

4411
02:48:04,399 --> 02:48:06,800
well for now our vantage point we found

4412
02:48:06,800 --> 02:48:07,439
that most

4413
02:48:07,439 --> 02:48:09,279
ns responses are actually small so

4414
02:48:09,279 --> 02:48:10,960
there's a little fragmentation risk

4415
02:48:10,960 --> 02:48:14,160
for our vantage point but we

4416
02:48:14,160 --> 02:48:16,240
i see that could happen as well and the

4417
02:48:16,240 --> 02:48:18,399
server side fragmentation is minimum but

4418
02:48:18,399 --> 02:48:19,359
in the network we

4419
02:48:19,359 --> 02:48:20,880
measure using rapid hazards that

4420
02:48:20,880 --> 02:48:22,560
actually happens

4421
02:48:22,560 --> 02:48:25,279
uh two to seven percent of the data now

4422
02:48:25,279 --> 02:48:25,760
udp

4423
02:48:25,760 --> 02:48:29,359
responses get truncated and out of those

4424
02:48:29,359 --> 02:48:32,800
80 to 879 25 percent are followed by a

4425
02:48:32,800 --> 02:48:33,279
tcp

4426
02:48:33,279 --> 02:48:36,240
query and the flag the update was not

4427
02:48:36,240 --> 02:48:37,439
very noticeable uh

4428
02:48:37,439 --> 02:48:39,359
yet but again you may probably measure

4429
02:48:39,359 --> 02:48:41,279
this again and more detail

4430
02:48:41,279 --> 02:48:45,279
to see that uh yeah and i think

4431
02:48:45,279 --> 02:48:47,760
that's what i have to say here there are

4432
02:48:47,760 --> 02:48:50,080
any questions i'll be happy to take them

4433
02:48:50,080 --> 02:48:53,680
thanks sir thank you giovanni

4434
02:48:53,680 --> 02:48:58,000
uh that was really quick

4435
02:48:58,000 --> 02:49:01,200
thank you for that uh yeah we do have

4436
02:49:01,200 --> 02:49:05,200
uh a bit more time for uh questions

4437
02:49:05,200 --> 02:49:08,080
so i'd like to point out again that

4438
02:49:08,080 --> 02:49:09,520
during the

4439
02:49:09,520 --> 02:49:12,560
q a section the poll will show up

4440
02:49:12,560 --> 02:49:15,200
where you will be able to read the talk

4441
02:49:15,200 --> 02:49:17,520
and this will be the only opportunity to

4442
02:49:17,520 --> 02:49:20,240
rate the talk

4443
02:49:20,960 --> 02:49:22,960
so please fill in your questions in the

4444
02:49:22,960 --> 02:49:24,080
q a section

4445
02:49:24,080 --> 02:49:27,760
or raise your hand if you want to

4446
02:49:27,760 --> 02:49:30,880
ask a question live i can see

4447
02:49:30,880 --> 02:49:33,839
one raised hand

4448
02:49:36,240 --> 02:49:40,000
but i'm not really sure oh jeff houston

4449
02:49:40,000 --> 02:49:42,240
okay

4450
02:49:43,200 --> 02:49:46,479
uh jeff if you can

4451
02:49:46,479 --> 02:49:49,439
mute yourself yes i have uh great

4452
02:49:49,439 --> 02:49:51,920
presentation thanks a lot for giving it

4453
02:49:51,920 --> 02:49:55,279
um we also looked at the flag day and

4454
02:49:55,279 --> 02:49:56,399
what actually happened

4455
02:49:56,399 --> 02:49:59,760
with resolver behavior and i think

4456
02:49:59,760 --> 02:50:02,080
like you uh we're looking at the

4457
02:50:02,080 --> 02:50:04,319
interaction between recursive resolvers

4458
02:50:04,319 --> 02:50:04,640
and

4459
02:50:04,640 --> 02:50:07,359
the authoritative servers in our case of

4460
02:50:07,359 --> 02:50:08,720
course we were seeding

4461
02:50:08,720 --> 02:50:11,279
this environment with our own queries so

4462
02:50:11,279 --> 02:50:12,960
we kind of understood

4463
02:50:12,960 --> 02:50:14,880
why our authoritatives were receiving

4464
02:50:14,880 --> 02:50:17,200
queries the point i would like to like

4465
02:50:17,200 --> 02:50:19,600
to make is that we did see

4466
02:50:19,600 --> 02:50:23,040
quite a visible change of the

4467
02:50:23,040 --> 02:50:26,399
average behavior of queries

4468
02:50:26,399 --> 02:50:29,279
now presumably if say the google public

4469
02:50:29,279 --> 02:50:30,160
dns

4470
02:50:30,160 --> 02:50:33,200
recursive resolver changed its behavior

4471
02:50:33,200 --> 02:50:34,560
then all of a sudden a whole bunch of

4472
02:50:34,560 --> 02:50:36,240
queries are going to change because a

4473
02:50:36,240 --> 02:50:37,680
lot of folk use it

4474
02:50:37,680 --> 02:50:39,760
but i am just going to focus on user

4475
02:50:39,760 --> 02:50:41,600
counts not resolve accounts because it's

4476
02:50:41,600 --> 02:50:43,120
easier to think about

4477
02:50:43,120 --> 02:50:45,920
what we found was that actually the big

4478
02:50:45,920 --> 02:50:46,880
uptick

4479
02:50:46,880 --> 02:50:50,160
was not 1232 that was a

4480
02:50:50,160 --> 02:50:52,240
relatively small but still visible

4481
02:50:52,240 --> 02:50:53,680
uptake uptake

4482
02:50:53,680 --> 02:50:55,760
the big uptake was a bunch of resolvers

4483
02:50:55,760 --> 02:50:58,160
that went to 1400

4484
02:50:58,160 --> 02:51:00,880
and it's sort of okay i can see that

4485
02:51:00,880 --> 02:51:02,800
you're taking flag data heart

4486
02:51:02,800 --> 02:51:05,359
but where did 1400 come from it's sort

4487
02:51:05,359 --> 02:51:05,920
of

4488
02:51:05,920 --> 02:51:07,520
well you could have gone even higher if

4489
02:51:07,520 --> 02:51:08,960
you wanted but

4490
02:51:08,960 --> 02:51:11,600
why 1400 so i just wanted to point out

4491
02:51:11,600 --> 02:51:12,399
that

4492
02:51:12,399 --> 02:51:14,479
recursive resolvers did make a change

4493
02:51:14,479 --> 02:51:15,760
but the change was

4494
02:51:15,760 --> 02:51:18,319
almost unanticipated but as i said great

4495
02:51:18,319 --> 02:51:19,359
talk thanks

4496
02:51:19,359 --> 02:51:21,439
thanks and thanks jeff for pioneering

4497
02:51:21,439 --> 02:51:22,960
this work uh we

4498
02:51:22,960 --> 02:51:25,040
see the cdf here can see the green line

4499
02:51:25,040 --> 02:51:27,200
of october we see no spikes around

4500
02:51:27,200 --> 02:51:29,520
1400 but i can look clear in the data

4501
02:51:29,520 --> 02:51:30,880
and let you know if

4502
02:51:30,880 --> 02:51:33,760
we actually can't identify that um but

4503
02:51:33,760 --> 02:51:35,200
yeah

4504
02:51:35,200 --> 02:51:36,560
i agree with you we haven't seen much

4505
02:51:36,560 --> 02:51:38,319
uptake but i i will look at the 1400 let

4506
02:51:38,319 --> 02:51:39,040
you know but

4507
02:51:39,040 --> 02:51:40,880
from the graph here i cannot really

4508
02:51:40,880 --> 02:51:43,519
clearly see that

4509
02:51:44,720 --> 02:51:46,720
don't forget that i'm measuring what i

4510
02:51:46,720 --> 02:51:48,240
would call users

4511
02:51:48,240 --> 02:51:50,399
and i'm not sure but i think you might

4512
02:51:50,399 --> 02:51:52,319
be measuring resolvers

4513
02:51:52,319 --> 02:51:54,399
yeah we are uh we're getting like

4514
02:51:54,399 --> 02:51:56,240
resolvers that talk to us and

4515
02:51:56,240 --> 02:51:58,560
you are getting the correct me from

4516
02:51:58,560 --> 02:51:59,359
wrong

4517
02:51:59,359 --> 02:52:01,120
you're doing the ad networks and you're

4518
02:52:01,120 --> 02:52:02,640
getting the resolvers

4519
02:52:02,640 --> 02:52:05,840
from those networks of the users right

4520
02:52:05,840 --> 02:52:07,760
right but the issue is when we talk

4521
02:52:07,760 --> 02:52:09,760
about resolvers we're never quite sure

4522
02:52:09,760 --> 02:52:11,120
if we're talking about

4523
02:52:11,120 --> 02:52:12,800
jeff's favorite resolver sitting

4524
02:52:12,800 --> 02:52:14,960
underneath the desk here in front of me

4525
02:52:14,960 --> 02:52:17,920
or google's public dns resolver you know

4526
02:52:17,920 --> 02:52:18,720
handling

4527
02:52:18,720 --> 02:52:21,200
gazillion of queries per second and when

4528
02:52:21,200 --> 02:52:23,359
we talk about resolvers

4529
02:52:23,359 --> 02:52:25,920
the small numbers the small resolvers

4530
02:52:25,920 --> 02:52:28,160
tend to overwhelm the large ones

4531
02:52:28,160 --> 02:52:31,279
if they all get a waiting one and this

4532
02:52:31,279 --> 02:52:32,880
is why what we saw

4533
02:52:32,880 --> 02:52:35,439
is that 1400 is now used by seven

4534
02:52:35,439 --> 02:52:36,240
percent of

4535
02:52:36,240 --> 02:52:39,359
users as distinct from

4536
02:52:39,359 --> 02:52:41,359
you know resolve accounts which is kind

4537
02:52:41,359 --> 02:52:42,800
of different yeah

4538
02:52:42,800 --> 02:52:45,840
so i think we did announce mostly uh

4539
02:52:45,840 --> 02:52:48,080
for 12 22 but i i can't look into that

4540
02:52:48,080 --> 02:52:49,279
exactly yeah

4541
02:52:49,279 --> 02:52:51,680
be right yeah so and for that now i

4542
02:52:51,680 --> 02:52:52,560
think

4543
02:52:52,560 --> 02:52:54,240
we run another research with folks from

4544
02:52:54,240 --> 02:52:57,200
new zealand and they confirmed the same

4545
02:52:57,200 --> 02:52:59,359
one-third of our queries come from

4546
02:52:59,359 --> 02:53:00,720
google's and facebook google and

4547
02:53:00,720 --> 02:53:02,080
facebook and other

4548
02:53:02,080 --> 02:53:04,000
facebook and three other two systems

4549
02:53:04,000 --> 02:53:05,840
microsoft and

4550
02:53:05,840 --> 02:53:08,880
amazon and i forgot the other

4551
02:53:08,880 --> 02:53:11,040
but google public dns is our biggest

4552
02:53:11,040 --> 02:53:12,319
client by far and

4553
02:53:12,319 --> 02:53:15,680
this is public information as well um

4554
02:53:15,680 --> 02:53:17,760
but all together these five networks

4555
02:53:17,760 --> 02:53:19,439
they account for one-third of our

4556
02:53:19,439 --> 02:53:21,920
traffic but the other one third is not

4557
02:53:21,920 --> 02:53:24,319
but yeah um i have to look at that in

4558
02:53:24,319 --> 02:53:25,600
the 1400s

4559
02:53:25,600 --> 02:53:28,160
it's just it's just this major challenge

4560
02:53:28,160 --> 02:53:30,720
when any of us try to measure the dns

4561
02:53:30,720 --> 02:53:32,720
of trying to actually understand how to

4562
02:53:32,720 --> 02:53:34,880
make the results meaningful

4563
02:53:34,880 --> 02:53:36,640
because as i said there are massive

4564
02:53:36,640 --> 02:53:38,319
resolvers and there are kinsey whimsy

4565
02:53:38,319 --> 02:53:39,600
resolvers

4566
02:53:39,600 --> 02:53:41,200
and equally when we even try to think

4567
02:53:41,200 --> 02:53:43,840
about users caching gets in the way and

4568
02:53:43,840 --> 02:53:46,160
we we have a very dim view

4569
02:53:46,160 --> 02:53:48,240
and so you know i think we're both down

4570
02:53:48,240 --> 02:53:49,600
the same path of

4571
02:53:49,600 --> 02:53:51,520
trying to understand how to get a decent

4572
02:53:51,520 --> 02:53:53,840
picture from what i would tend to say

4573
02:53:53,840 --> 02:53:57,279
is cloudy data thanks anyway great work

4574
02:53:57,279 --> 02:54:00,800
thanks thanks thank you jeff i see we

4575
02:54:00,800 --> 02:54:01,439
have another

4576
02:54:01,439 --> 02:54:05,040
raised hand from uh which is brunit

4577
02:54:05,040 --> 02:54:10,160
suit from google please go ahead

4578
02:54:11,520 --> 02:54:14,319
hi giovanni so thanks for running this

4579
02:54:14,319 --> 02:54:17,120
experiment in the presentation this is

4580
02:54:17,120 --> 02:54:20,240
good to see uh

4581
02:54:20,240 --> 02:54:22,560
just to ris also to respond to jeff

4582
02:54:22,560 --> 02:54:24,319
houston so yes

4583
02:54:24,319 --> 02:54:27,680
google public dns was running with 1400

4584
02:54:27,680 --> 02:54:30,960
the the main point i would make is that

4585
02:54:30,960 --> 02:54:33,120
this was not so much a flag day it was

4586
02:54:33,120 --> 02:54:34,319
more a

4587
02:54:34,319 --> 02:54:36,640
slow change in behavior for us as well

4588
02:54:36,640 --> 02:54:37,359
as i assume

4589
02:54:37,359 --> 02:54:40,080
a bunch of other operators so it will be

4590
02:54:40,080 --> 02:54:41,600
good if you could repeat

4591
02:54:41,600 --> 02:54:44,720
this experiment now and see how the data

4592
02:54:44,720 --> 02:54:46,960
looks

4593
02:54:46,960 --> 02:54:49,279
you can't do that yeah so this is like

4594
02:54:49,279 --> 02:54:51,200
well this is for the paper but i can re

4595
02:54:51,200 --> 02:54:53,040
reasonably rerun the queries and post

4596
02:54:53,040 --> 02:54:56,000
them on materials

4597
02:54:58,640 --> 02:55:01,680
so i have a question in the q a facility

4598
02:55:01,680 --> 02:55:04,960
from peter koch

4599
02:55:04,960 --> 02:55:07,680
something i would like to ask as well

4600
02:55:07,680 --> 02:55:08,080
some

4601
02:55:08,080 --> 02:55:11,200
rr sets are riskier than others

4602
02:55:11,200 --> 02:55:14,399
do your data allow an assessment for dns

4603
02:55:14,399 --> 02:55:16,240
key in particular

4604
02:55:16,240 --> 02:55:19,200
so we're taking we are analyzing

4605
02:55:19,200 --> 02:55:20,240
anything that came out

4606
02:55:20,240 --> 02:55:22,399
comes out of our servers like all the

4607
02:55:22,399 --> 02:55:23,439
responses

4608
02:55:23,439 --> 02:55:26,080
in regardless of the query type whatever

4609
02:55:26,080 --> 02:55:27,040
comes out we

4610
02:55:27,040 --> 02:55:29,439
take that into account so put it all

4611
02:55:29,439 --> 02:55:30,880
together in the same bucket

4612
02:55:30,880 --> 02:55:34,080
if that's what he's asking

4613
02:55:34,080 --> 02:55:35,520
we don't discriminate to get all the

4614
02:55:35,520 --> 02:55:37,680
traffic all the traffic

4615
02:55:37,680 --> 02:55:41,359
yes we can go back here the table and

4616
02:55:41,359 --> 02:55:44,479
see that so for example in july

4617
02:55:44,479 --> 02:55:47,200
2020 we had this number of queries 45

4618
02:55:47,200 --> 02:55:48,479
billion and 45

4619
02:55:48,479 --> 02:55:51,439
billion responses yes whatever it is we

4620
02:55:51,439 --> 02:55:52,800
analyze

4621
02:55:52,800 --> 02:55:56,880
yeah yeah uh yeah but

4622
02:55:56,880 --> 02:55:59,439
i mean your slides suggest that it

4623
02:55:59,439 --> 02:56:01,120
doesn't occur that often

4624
02:56:01,120 --> 02:56:04,160
fragmented data that for some records

4625
02:56:04,160 --> 02:56:06,240
it's more important than for others

4626
02:56:06,240 --> 02:56:07,920
right yeah um

4627
02:56:07,920 --> 02:56:10,240
yeah so when you take a bulk of uh

4628
02:56:10,240 --> 02:56:11,520
queries that we said that are now it

4629
02:56:11,520 --> 02:56:14,479
doesn't happen very often now

4630
02:56:14,479 --> 02:56:17,359
but uh i think it's in the paper if i'm

4631
02:56:17,359 --> 02:56:18,720
not mistaken

4632
02:56:18,720 --> 02:56:20,800
the query generates more the larger

4633
02:56:20,800 --> 02:56:22,560
response for that and now that we

4634
02:56:22,560 --> 02:56:25,600
look like analyzing our passive data

4635
02:56:25,600 --> 02:56:28,240
i think was any i think it was any or

4636
02:56:28,240 --> 02:56:29,520
i'm not quite positive i would have to

4637
02:56:29,520 --> 02:56:31,279
look into that but it's in the paper

4638
02:56:31,279 --> 02:56:33,760
there are far more videos of the paper

4639
02:56:33,760 --> 02:56:35,840
thanks

4640
02:56:35,840 --> 02:56:38,080
thank you giovanna uh there are a few

4641
02:56:38,080 --> 02:56:39,359
more remarks

4642
02:56:39,359 --> 02:56:43,040
in the queue and a from stefan

4643
02:56:43,040 --> 02:56:46,960
ubink he says the dns flag day only is

4644
02:56:46,960 --> 02:56:50,000
the the software uses the new setting as

4645
02:56:50,000 --> 02:56:51,040
a default

4646
02:56:51,040 --> 02:56:53,040
as far as i know today does not mean it

4647
02:56:53,040 --> 02:56:55,200
has changed on systems

4648
02:56:55,200 --> 02:56:58,960
that's right yeah and i i think like we

4649
02:56:58,960 --> 02:57:00,240
documented the paper

4650
02:57:00,240 --> 02:57:02,160
uh whereby when buying started using

4651
02:57:02,160 --> 02:57:03,840
that but they have this dynamic value

4652
02:57:03,840 --> 02:57:04,399
too

4653
02:57:04,399 --> 02:57:07,359
so they kind of try to assess yeah about

4654
02:57:07,359 --> 02:57:08,720
to probably do something similar with

4655
02:57:08,720 --> 02:57:10,080
gas

4656
02:57:10,080 --> 02:57:13,680
uh yes yes we changed it on the day

4657
02:57:13,680 --> 02:57:16,080
but you know it takes a little while

4658
02:57:16,080 --> 02:57:17,359
until people are

4659
02:57:17,359 --> 02:57:20,640
uh installing this software and the

4660
02:57:20,640 --> 02:57:22,080
final remark from

4661
02:57:22,080 --> 02:57:25,359
uh brian summers for the record albert

4662
02:57:25,359 --> 02:57:26,080
dns

4663
02:57:26,080 --> 02:57:29,760
sets the best size to 1410 and has done

4664
02:57:29,760 --> 02:57:31,439
so for many years

4665
02:57:31,439 --> 02:57:33,279
so that's kind of nice getting now we

4666
02:57:33,279 --> 02:57:37,040
can fingerprint all these resolvers

4667
02:57:40,240 --> 02:57:42,800
thank you very much steven that was very

4668
02:57:42,800 --> 02:57:43,520
interesting

4669
02:57:43,520 --> 02:57:46,880
thanks everybody so

4670
02:57:46,880 --> 02:57:51,279
we will now have a break for 15 minutes

4671
02:57:51,279 --> 02:57:56,800
and start again at six o'clock utc

4672
02:57:57,520 --> 02:57:59,840
i would like to remind you that there

4673
02:57:59,840 --> 02:58:01,439
are the breakout rooms

4674
02:58:01,439 --> 02:58:05,200
for face-to-face chat spatial chat

4675
02:58:05,200 --> 02:58:07,359
you have received details in how to

4676
02:58:07,359 --> 02:58:08,720
enter that in the

4677
02:58:08,720 --> 02:58:12,240
email in advance or you can see the

4678
02:58:12,240 --> 02:58:14,160
details on the rolling slides which

4679
02:58:14,160 --> 02:58:16,640
we'll follow shortly

4680
02:58:16,640 --> 02:58:19,200
please do not share the special chat

4681
02:58:19,200 --> 02:58:19,680
link

4682
02:58:19,680 --> 02:58:22,800
with anyone else and i'd

4683
02:58:22,800 --> 02:58:25,520
also like to thank our sponsors again

4684
02:58:25,520 --> 02:58:28,240
for site security and very sign

4685
02:58:28,240 --> 02:58:33,840
and i see you at six o'clock

4686
02:58:34,800 --> 02:58:37,439
okay welcome back to the final session

4687
02:58:37,439 --> 02:58:38,800
of warp 35.

4688
02:58:38,800 --> 02:58:40,560
uh thank you if you've stuck with us

4689
02:58:40,560 --> 02:58:41,840
this long

4690
02:58:41,840 --> 02:58:44,160
uh we try not to take up too much time

4691
02:58:44,160 --> 02:58:45,680
but um we

4692
02:58:45,680 --> 02:58:47,359
like to spend a little bit of time with

4693
02:58:47,359 --> 02:58:48,880
every other workshop or so

4694
02:58:48,880 --> 02:58:50,960
letting you know how things are going or

4695
02:58:50,960 --> 02:58:52,479
what we've been up to

4696
02:58:52,479 --> 02:58:54,319
um i did a brief introduction for

4697
02:58:54,319 --> 02:58:55,920
non-members yesterday

4698
02:58:55,920 --> 02:58:57,680
um here's a bit more content that's

4699
02:58:57,680 --> 02:59:00,479
hopefully relevant to members

4700
02:59:00,479 --> 02:59:04,720
um basically it will be myself

4701
02:59:04,720 --> 02:59:06,960
um standing in for jerry i'm jerry

4702
02:59:06,960 --> 02:59:08,319
unfortunately um

4703
02:59:08,319 --> 02:59:10,399
hasn't managed to stand the pace of the

4704
02:59:10,399 --> 02:59:12,080
weird time zone

4705
02:59:12,080 --> 02:59:15,680
um and then matt will be giving a

4706
02:59:15,680 --> 02:59:18,240
systems engineering update and um and

4707
02:59:18,240 --> 02:59:19,520
then finally i'll give you a little bit

4708
02:59:19,520 --> 02:59:21,120
of overview and organizational

4709
02:59:21,120 --> 02:59:22,560
information

4710
02:59:22,560 --> 02:59:25,279
um so hopefully 45 more minutes and then

4711
02:59:25,279 --> 02:59:26,960
um you can all go off and enjoy your

4712
02:59:26,960 --> 02:59:28,080
fridays or your

4713
02:59:28,080 --> 02:59:30,560
or your weekends before i start i'd like

4714
02:59:30,560 --> 02:59:31,760
one more time to thank

4715
02:59:31,760 --> 02:59:34,319
verisign and farsight security as our

4716
02:59:34,319 --> 02:59:36,240
sponsors this time and also a big thank

4717
02:59:36,240 --> 02:59:37,760
you to all the speakers

4718
02:59:37,760 --> 02:59:41,520
who have um been speaking this far

4719
02:59:41,520 --> 02:59:43,760
so um i know you'd all much rather

4720
02:59:43,760 --> 02:59:45,120
listen to jerry than me

4721
02:59:45,120 --> 02:59:48,319
um the important thing here is that um

4722
02:59:48,319 --> 02:59:51,520
when we do our regular quarterly reports

4723
02:59:51,520 --> 02:59:53,760
to the members we also do them in

4724
02:59:53,760 --> 02:59:56,160
written version for the workshops

4725
02:59:56,160 --> 02:59:58,800
so um you will be able to find jerry's

4726
02:59:58,800 --> 02:59:59,760
written report

4727
02:59:59,760 --> 03:00:02,560
linked to this particular item sorry

4728
03:00:02,560 --> 03:00:05,519
about helicopter

4729
03:00:05,760 --> 03:00:08,000
and

4730
03:00:08,880 --> 03:00:11,279
any mistakes that you see in the

4731
03:00:11,279 --> 03:00:12,160
following are

4732
03:00:12,160 --> 03:00:14,720
mine and not jerry's so what we knocked

4733
03:00:14,720 --> 03:00:16,800
in the software front

4734
03:00:16,800 --> 03:00:20,399
um there's funded projects um

4735
03:00:20,399 --> 03:00:22,479
there are some highlights and updates

4736
03:00:22,479 --> 03:00:24,560
about the software and the other thing

4737
03:00:24,560 --> 03:00:26,560
is the in the written report is that we

4738
03:00:26,560 --> 03:00:28,399
always ask um the members what they've

4739
03:00:28,399 --> 03:00:30,240
been up to with their uh mostly open

4740
03:00:30,240 --> 03:00:30,560
source

4741
03:00:30,560 --> 03:00:32,560
software projects so there's a thank you

4742
03:00:32,560 --> 03:00:34,160
all the members that contributed to that

4743
03:00:34,160 --> 03:00:36,000
there's there's news about that in their

4744
03:00:36,000 --> 03:00:38,800
report as well you can find all the

4745
03:00:38,800 --> 03:00:40,160
software that we have

4746
03:00:40,160 --> 03:00:42,640
um at the um the web page that's listed

4747
03:00:42,640 --> 03:00:43,359
there

4748
03:00:43,359 --> 03:00:45,040
um shows all the software you can see

4749
03:00:45,040 --> 03:00:46,640
there's a big list of tools which we

4750
03:00:46,640 --> 03:00:48,399
have taken on board and or developed

4751
03:00:48,399 --> 03:00:49,760
ourselves

4752
03:00:49,760 --> 03:00:51,120
there's also information about funding

4753
03:00:51,120 --> 03:00:53,520
development work or licensing policy

4754
03:00:53,520 --> 03:00:55,439
and links to the the various github

4755
03:00:55,439 --> 03:00:58,560
projects and mailing lists that we have

4756
03:00:58,560 --> 03:01:01,279
um 18 releases have been done since the

4757
03:01:01,279 --> 03:01:02,160
work 33

4758
03:01:02,160 --> 03:01:04,160
so you know just maintaining the the

4759
03:01:04,160 --> 03:01:06,160
regular releases is is becoming an

4760
03:01:06,160 --> 03:01:06,960
increasingly

4761
03:01:06,960 --> 03:01:09,279
big part of of what we do and more about

4762
03:01:09,279 --> 03:01:11,279
that later in terms of increasing our

4763
03:01:11,279 --> 03:01:13,439
software engineering outcome

4764
03:01:13,439 --> 03:01:15,279
um there's been 160 issues and pull

4765
03:01:15,279 --> 03:01:17,040
requests that have been

4766
03:01:17,040 --> 03:01:20,080
resolved and or merged in

4767
03:01:20,080 --> 03:01:21,920
you can see the um the activity level

4768
03:01:21,920 --> 03:01:25,040
here um which is pretty steady

4769
03:01:25,040 --> 03:01:26,560
but it's you know it's good that we get

4770
03:01:26,560 --> 03:01:29,120
the engagement and the support

4771
03:01:29,120 --> 03:01:34,960
to the various tools from the community

4772
03:01:34,960 --> 03:01:37,680
funded projects um two important ones

4773
03:01:37,680 --> 03:01:38,399
here for

4774
03:01:38,399 --> 03:01:41,840
for 2021 um there is the dns

4775
03:01:41,840 --> 03:01:45,200
dns perf dns over https project which

4776
03:01:45,200 --> 03:01:46,240
has been funded by

4777
03:01:46,240 --> 03:01:48,640
mozilla and comcast the first phase of

4778
03:01:48,640 --> 03:01:50,720
that was to remove dependencies

4779
03:01:50,720 --> 03:01:53,680
from the entire some internal libraries

4780
03:01:53,680 --> 03:01:54,399
of bind

4781
03:01:54,399 --> 03:01:57,200
um that were that were used by dns perf

4782
03:01:57,200 --> 03:01:59,920
originally and now uses entirely

4783
03:01:59,920 --> 03:02:02,399
open and public libraries and library

4784
03:02:02,399 --> 03:02:04,640
interfaces to various pieces of code

4785
03:02:04,640 --> 03:02:06,240
that was the first phase the second

4786
03:02:06,240 --> 03:02:07,680
phase was to add

4787
03:02:07,680 --> 03:02:10,160
improved support for stateful transports

4788
03:02:10,160 --> 03:02:11,600
so it works better for

4789
03:02:11,600 --> 03:02:15,279
connection oriented dns over tcp in

4790
03:02:15,279 --> 03:02:17,120
various forms

4791
03:02:17,120 --> 03:02:19,760
um and then the um the third part and

4792
03:02:19,760 --> 03:02:21,040
and the third part

4793
03:02:21,040 --> 03:02:22,960
we'll see a little bit more in a minute

4794
03:02:22,960 --> 03:02:24,960
um check my dns is a tool that's been

4795
03:02:24,960 --> 03:02:26,640
around for a while or

4796
03:02:26,640 --> 03:02:29,279
our modern dns tester um there were some

4797
03:02:29,279 --> 03:02:31,680
rpti features added to it and i thought

4798
03:02:31,680 --> 03:02:33,040
basis some time ago

4799
03:02:33,040 --> 03:02:35,200
i'm pleased to say that we got a second

4800
03:02:35,200 --> 03:02:38,080
year of iron community grant funding

4801
03:02:38,080 --> 03:02:41,359
and we were able to use this to add

4802
03:02:41,359 --> 03:02:44,000
the user interface for the rpi rpki

4803
03:02:44,000 --> 03:02:45,520
origin validation

4804
03:02:45,520 --> 03:02:48,240
um in the form of um achievements and

4805
03:02:48,240 --> 03:02:49,600
achievements or

4806
03:02:49,600 --> 03:02:52,080
a badge which has been added to our to

4807
03:02:52,080 --> 03:02:54,000
checkmate dns which we can potentially

4808
03:02:54,000 --> 03:02:55,840
use for for other

4809
03:02:55,840 --> 03:02:59,439
test results as well um

4810
03:02:59,439 --> 03:03:00,960
other highlights and there's no

4811
03:03:00,960 --> 03:03:02,479
dedicated software channel on the

4812
03:03:02,479 --> 03:03:03,840
mattermore server which seems to be

4813
03:03:03,840 --> 03:03:05,760
getting a lot of activity and engagement

4814
03:03:05,760 --> 03:03:07,120
so um you'll certainly

4815
03:03:07,120 --> 03:03:10,080
um find that useful discussion and also

4816
03:03:10,080 --> 03:03:10,479
um

4817
03:03:10,479 --> 03:03:12,240
get some help with your use of a work

4818
03:03:12,240 --> 03:03:15,279
software um dns cap this version two

4819
03:03:15,279 --> 03:03:16,960
zero zero releases come out

4820
03:03:16,960 --> 03:03:20,080
um dum dum d is one of the components

4821
03:03:20,080 --> 03:03:22,560
of our software suite it's had some

4822
03:03:22,560 --> 03:03:24,319
additional features added to it to help

4823
03:03:24,319 --> 03:03:25,200
it work better

4824
03:03:25,200 --> 03:03:28,640
with the dns perform that's been done

4825
03:03:28,640 --> 03:03:32,000
um and yes the dsc graffana tools the

4826
03:03:32,000 --> 03:03:33,600
example graphs have been updated and

4827
03:03:33,600 --> 03:03:35,359
fixed

4828
03:03:35,359 --> 03:03:37,200
what's what we're going to be working on

4829
03:03:37,200 --> 03:03:38,399
in the future uh

4830
03:03:38,399 --> 03:03:41,120
phase 3 dns over https support it's

4831
03:03:41,120 --> 03:03:42,800
going to be added to the dns perf

4832
03:03:42,800 --> 03:03:46,160
um between now and the end of august um

4833
03:03:46,160 --> 03:03:47,840
jerry is thinking about doing a crash

4834
03:03:47,840 --> 03:03:50,000
course on how to use dsc in graffana

4835
03:03:50,000 --> 03:03:51,200
and that would be something that we

4836
03:03:51,200 --> 03:03:54,160
could add on to or 35a so please do let

4837
03:03:54,160 --> 03:03:55,520
us know if you're interested in that

4838
03:03:55,520 --> 03:03:57,359
obviously be a tutorial

4839
03:03:57,359 --> 03:04:00,319
on setting up um from scratch to

4840
03:04:00,319 --> 03:04:01,520
generate the graphs

4841
03:04:01,520 --> 03:04:03,439
and if you've got ideas for things that

4842
03:04:03,439 --> 03:04:05,200
the gerry could be working on then then

4843
03:04:05,200 --> 03:04:06,240
please let them know

4844
03:04:06,240 --> 03:04:09,600
and we'll be done happy to take that on

4845
03:04:09,600 --> 03:04:10,800
board

4846
03:04:10,800 --> 03:04:12,880
um so um this is the point which we

4847
03:04:12,880 --> 03:04:14,479
usually get questions i have a strong

4848
03:04:14,479 --> 03:04:15,840
suspicion that if there are any

4849
03:04:15,840 --> 03:04:17,359
questions they'd be probably better

4850
03:04:17,359 --> 03:04:19,600
answered by jerry than me but i'll also

4851
03:04:19,600 --> 03:04:22,640
do my best i also apologize that my uh

4852
03:04:22,640 --> 03:04:24,240
my voice is starting to give out

4853
03:04:24,240 --> 03:04:27,600
after uh staying up half the night

4854
03:04:27,600 --> 03:04:32,000
um okay um if there are no questions

4855
03:04:32,000 --> 03:04:35,120
which they do not appear to be um i will

4856
03:04:35,120 --> 03:04:35,600
now

4857
03:04:35,600 --> 03:04:38,720
um hand you over to matt and matt will

4858
03:04:38,720 --> 03:04:39,520
give you the

4859
03:04:39,520 --> 03:04:43,439
update on the systems engineering

4860
03:04:45,359 --> 03:04:48,399
hi everyone um uh yes i'm

4861
03:04:48,399 --> 03:04:50,319
matt townsett i'm a work systems

4862
03:04:50,319 --> 03:04:52,800
engineer

4863
03:04:53,200 --> 03:04:58,000
so let's get uh

4864
03:04:59,120 --> 03:05:05,840
slides going

4865
03:05:06,880 --> 03:05:09,600
um all right so as keith mentioned

4866
03:05:09,600 --> 03:05:11,520
there's uh there's a written report

4867
03:05:11,520 --> 03:05:14,720
um for uh um that sort of accompanies

4868
03:05:14,720 --> 03:05:15,359
this

4869
03:05:15,359 --> 03:05:18,399
um the the url for where to find out an

4870
03:05:18,399 --> 03:05:19,600
indigo is there as

4871
03:05:19,600 --> 03:05:21,520
as well as qr code that will that will

4872
03:05:21,520 --> 03:05:22,720
take you to it

4873
03:05:22,720 --> 03:05:25,279
um so the report in addition to the

4874
03:05:25,279 --> 03:05:27,040
stuff i'm talking about here the report

4875
03:05:27,040 --> 03:05:28,399
goes into some more detail

4876
03:05:28,399 --> 03:05:31,600
uh about those things um but also uh

4877
03:05:31,600 --> 03:05:32,640
includes a bunch of things like

4878
03:05:32,640 --> 03:05:35,120
overviews of the services that oreck has

4879
03:05:35,120 --> 03:05:39,040
and um the the um data that we

4880
03:05:39,040 --> 03:05:42,640
store um and and sort of how to uh

4881
03:05:42,640 --> 03:05:44,640
a little bit about um how to get at that

4882
03:05:44,640 --> 03:05:46,800
stuff and and uh

4883
03:05:46,800 --> 03:05:50,240
what you can do with it um so as we've

4884
03:05:50,240 --> 03:05:51,680
mentioned at a couple of previous

4885
03:05:51,680 --> 03:05:54,800
uh workshops um we're on the lookout for

4886
03:05:54,800 --> 03:05:56,800
uh a bit of head count related to

4887
03:05:56,800 --> 03:05:58,319
systems engine systems and network

4888
03:05:58,319 --> 03:05:59,840
engineering

4889
03:05:59,840 --> 03:06:01,920
we were looking for somebody to sort of

4890
03:06:01,920 --> 03:06:02,960
be an on-call

4891
03:06:02,960 --> 03:06:06,319
person on site where in in fremont where

4892
03:06:06,319 --> 03:06:07,439
the bulk of our

4893
03:06:07,439 --> 03:06:10,720
systems and network is

4894
03:06:10,720 --> 03:06:12,479
now that the sort of pandemic travel

4895
03:06:12,479 --> 03:06:14,000
restrictions are look like they're

4896
03:06:14,000 --> 03:06:16,560
probably coming to an end in the next

4897
03:06:16,560 --> 03:06:20,319
few few months um

4898
03:06:20,319 --> 03:06:22,240
we're finding that to be a little less

4899
03:06:22,240 --> 03:06:23,680
urgent although we would like to still

4900
03:06:23,680 --> 03:06:24,640
have somebody

4901
03:06:24,640 --> 03:06:27,040
um that we can go to for uh for

4902
03:06:27,040 --> 03:06:28,399
emergency type work

4903
03:06:28,399 --> 03:06:31,040
um so that we're not constantly bugging

4904
03:06:31,040 --> 03:06:33,279
uh volunteers in the area

4905
03:06:33,279 --> 03:06:36,640
but we're also still looking for

4906
03:06:36,640 --> 03:06:37,600
somebody to do

4907
03:06:37,600 --> 03:06:39,439
uh some specific short-term network

4908
03:06:39,439 --> 03:06:41,920
engineering work um throughout around

4909
03:06:41,920 --> 03:06:43,040
cleaning up the configs

4910
03:06:43,040 --> 03:06:47,439
on our fremont and ottawa routers

4911
03:06:47,439 --> 03:06:51,120
but we're also looking to replace those

4912
03:06:51,120 --> 03:06:51,680
routers

4913
03:06:51,680 --> 03:06:55,920
um this year and just to sort of um

4914
03:06:55,920 --> 03:06:58,399
get some of the time-consuming stuff off

4915
03:06:58,399 --> 03:06:59,600
my plate we're we're looking for

4916
03:06:59,600 --> 03:07:01,840
somebody who can help out with the

4917
03:07:01,840 --> 03:07:04,000
um taking our requirements and and

4918
03:07:04,000 --> 03:07:05,279
budget information and

4919
03:07:05,279 --> 03:07:07,439
and you know convert that into some not

4920
03:07:07,439 --> 03:07:09,040
only some procurement

4921
03:07:09,040 --> 03:07:11,600
suggestions but also to take care of the

4922
03:07:11,600 --> 03:07:13,439
initial implementation and conversion of

4923
03:07:13,439 --> 03:07:14,080
the

4924
03:07:14,080 --> 03:07:17,359
existing configs over um over to

4925
03:07:17,359 --> 03:07:20,800
a new platform um

4926
03:07:20,800 --> 03:07:22,160
so there's more information about that

4927
03:07:22,160 --> 03:07:24,399
stuff on our works careers page

4928
03:07:24,399 --> 03:07:27,680
and you can also talk to me or keith um

4929
03:07:27,680 --> 03:07:30,800
about that um so

4930
03:07:30,800 --> 03:07:33,600
uh in terms of new systems and systems

4931
03:07:33,600 --> 03:07:34,160
and

4932
03:07:34,160 --> 03:07:36,240
networking work that's gone on um we

4933
03:07:36,240 --> 03:07:38,640
have i've been working on some new dns

4934
03:07:38,640 --> 03:07:39,840
infrastructure

4935
03:07:39,840 --> 03:07:42,880
um orc uh i made the joke in the written

4936
03:07:42,880 --> 03:07:45,279
report that orc really uh has been

4937
03:07:45,279 --> 03:07:47,600
you know the the absolute epitome of the

4938
03:07:47,600 --> 03:07:48,880
english adage

4939
03:07:48,880 --> 03:07:50,800
about uh the cobbler's children having

4940
03:07:50,800 --> 03:07:52,399
no shoes

4941
03:07:52,399 --> 03:07:54,880
our own dns infrastructure has been

4942
03:07:54,880 --> 03:07:56,240
really falling behind

4943
03:07:56,240 --> 03:07:58,399
um for a long time we've we've basically

4944
03:07:58,399 --> 03:07:59,359
been running

4945
03:07:59,359 --> 03:08:01,840
um shell scripts that were written um

4946
03:08:01,840 --> 03:08:02,720
many years ago

4947
03:08:02,720 --> 03:08:05,120
in order to do all of our zone signing

4948
03:08:05,120 --> 03:08:06,319
and um and

4949
03:08:06,319 --> 03:08:09,439
no key management whatsoever so um i've

4950
03:08:09,439 --> 03:08:10,160
got a new

4951
03:08:10,160 --> 03:08:13,200
uh hidden master in place there which we

4952
03:08:13,200 --> 03:08:15,439
um have started migrating zones over to

4953
03:08:15,439 --> 03:08:16,880
uh the first one to go on that

4954
03:08:16,880 --> 03:08:19,920
though was uh the zone for dnsbiz.net

4955
03:08:19,920 --> 03:08:21,279
which we finally

4956
03:08:21,279 --> 03:08:23,439
migrated authority for from sandy

4957
03:08:23,439 --> 03:08:26,479
national labs over to oarc

4958
03:08:26,479 --> 03:08:28,000
that was sort of in response to some

4959
03:08:28,000 --> 03:08:30,080
issues we had trying to do some

4960
03:08:30,080 --> 03:08:31,760
migration on dna or

4961
03:08:31,760 --> 03:08:34,399
some maintenance on the dns vis site uh

4962
03:08:34,399 --> 03:08:35,840
a few months ago

4963
03:08:35,840 --> 03:08:37,359
where we found it was it was really

4964
03:08:37,359 --> 03:08:39,200
difficult to make short-term changes to

4965
03:08:39,200 --> 03:08:40,080
the zone

4966
03:08:40,080 --> 03:08:42,720
um uh in order to do things like

4967
03:08:42,720 --> 03:08:44,240
redirect the website to a

4968
03:08:44,240 --> 03:08:46,880
a maintenance page that sort of thing so

4969
03:08:46,880 --> 03:08:48,160
um

4970
03:08:48,160 --> 03:08:49,520
so we got that zone moved over it was

4971
03:08:49,520 --> 03:08:50,960
the first one to be imported into the

4972
03:08:50,960 --> 03:08:51,520
new

4973
03:08:51,520 --> 03:08:54,080
uh dns server uh and i'm beginning to

4974
03:08:54,080 --> 03:08:56,160
migrate orrick's other zones over to it

4975
03:08:56,160 --> 03:08:59,840
um and uh the big thing that's gonna

4976
03:08:59,840 --> 03:09:01,120
come out of this once it's done is i'm

4977
03:09:01,120 --> 03:09:02,479
finally gonna be able to do

4978
03:09:02,479 --> 03:09:05,600
um algorithm roles for uh for oar zones

4979
03:09:05,600 --> 03:09:07,200
to get off of the uh

4980
03:09:07,200 --> 03:09:11,520
the old algorithms that we're using um

4981
03:09:11,520 --> 03:09:13,359
the uh we also have obviously we have a

4982
03:09:13,359 --> 03:09:16,080
new bit of infrastructure for doing um

4983
03:09:16,080 --> 03:09:18,479
server installs um so this is something

4984
03:09:18,479 --> 03:09:20,239
i was already kind of looking at

4985
03:09:20,239 --> 03:09:23,279
for the ceph storage cluster which is uh

4986
03:09:23,279 --> 03:09:23,840
coming up

4987
03:09:23,840 --> 03:09:26,880
later in the presentation um but

4988
03:09:26,880 --> 03:09:29,359
um we had an issue which i'm also going

4989
03:09:29,359 --> 03:09:30,960
to talk about in just a moment with the

4990
03:09:30,960 --> 03:09:34,319
analysis servers um this year earlier

4991
03:09:34,319 --> 03:09:36,560
earlier this year um which kind of

4992
03:09:36,560 --> 03:09:37,600
brought this

4993
03:09:37,600 --> 03:09:39,279
made this a bit more urgent so

4994
03:09:39,279 --> 03:09:41,600
essentially what this is it's a it's a

4995
03:09:41,600 --> 03:09:43,680
tool that's very similar to older things

4996
03:09:43,680 --> 03:09:45,359
like kickstart and jumpstart

4997
03:09:45,359 --> 03:09:49,040
for for doing um sort of rules-based

4998
03:09:49,040 --> 03:09:52,880
uh installation of os's on

4999
03:09:52,880 --> 03:09:55,920
systems um using you know tftp and

5000
03:09:55,920 --> 03:09:58,000
and things like that in order to uh to

5001
03:09:58,000 --> 03:10:00,000
get an installer and kernels running and

5002
03:10:00,000 --> 03:10:00,640
stuff

5003
03:10:00,640 --> 03:10:03,600
but it um uh it's really neat in that it

5004
03:10:03,600 --> 03:10:04,880
allows us to sort of

5005
03:10:04,880 --> 03:10:07,359
define classes of things that can be

5006
03:10:07,359 --> 03:10:09,200
combined in different ways in order to

5007
03:10:09,200 --> 03:10:09,520
set

5008
03:10:09,520 --> 03:10:12,080
in order to create a rule set for any

5009
03:10:12,080 --> 03:10:13,439
given server

5010
03:10:13,439 --> 03:10:15,680
so i can define classes that relate to

5011
03:10:15,680 --> 03:10:17,120
the different types of hardware we have

5012
03:10:17,120 --> 03:10:18,800
and the different types of services that

5013
03:10:18,800 --> 03:10:19,760
are provided and

5014
03:10:19,760 --> 03:10:21,840
sort of the combination of those of

5015
03:10:21,840 --> 03:10:23,200
those two

5016
03:10:23,200 --> 03:10:26,399
types of classes produce a rule set for

5017
03:10:26,399 --> 03:10:28,720
for the given server for how to divide

5018
03:10:28,720 --> 03:10:29,680
up the disks and

5019
03:10:29,680 --> 03:10:30,800
what things need to be installed

5020
03:10:30,800 --> 03:10:32,960
initially and and that sort of thing

5021
03:10:32,960 --> 03:10:35,520
um so we have this up and running which

5022
03:10:35,520 --> 03:10:37,279
is which is now going to be

5023
03:10:37,279 --> 03:10:38,399
going to make things a lot easier for

5024
03:10:38,399 --> 03:10:40,800
when we need to do server replacements

5025
03:10:40,800 --> 03:10:41,200
and

5026
03:10:41,200 --> 03:10:44,880
and large uh significant upgrades to

5027
03:10:44,880 --> 03:10:46,239
operating systems and that sort of thing

5028
03:10:46,239 --> 03:10:46,560
that

5029
03:10:46,560 --> 03:10:48,160
that sort of can't easily be done just

5030
03:10:48,160 --> 03:10:51,359
through a normal upgrade process

5031
03:10:51,359 --> 03:10:53,359
um so the analysis server thing which i

5032
03:10:53,359 --> 03:10:54,880
mentioned um

5033
03:10:54,880 --> 03:10:57,040
the they've been due for an os update

5034
03:10:57,040 --> 03:10:58,479
for a really long time

5035
03:10:58,479 --> 03:11:01,040
but it's been really hard to get time to

5036
03:11:01,040 --> 03:11:02,160
do that

5037
03:11:02,160 --> 03:11:05,200
um partly because they're pretty much

5038
03:11:05,200 --> 03:11:07,359
constantly in use

5039
03:11:07,359 --> 03:11:09,840
but also that hardware is aging and it's

5040
03:11:09,840 --> 03:11:11,279
making it very difficult to use sort of

5041
03:11:11,279 --> 03:11:12,319
the more standard os

5042
03:11:12,319 --> 03:11:15,520
install techniques particularly remotely

5043
03:11:15,520 --> 03:11:19,040
in order to get os's on them so the

5044
03:11:19,040 --> 03:11:22,800
very old java-based um remote console

5045
03:11:22,800 --> 03:11:25,600
um which has always which has been a

5046
03:11:25,600 --> 03:11:27,200
problem for the last couple of years

5047
03:11:27,200 --> 03:11:28,960
because the plug-ins that it depend on

5048
03:11:28,960 --> 03:11:29,520
have been

5049
03:11:29,520 --> 03:11:31,279
deprecated in web browsers for a very

5050
03:11:31,279 --> 03:11:32,880
long time um

5051
03:11:32,880 --> 03:11:34,560
but we've even started running into new

5052
03:11:34,560 --> 03:11:36,560
problems lately because

5053
03:11:36,560 --> 03:11:38,080
believe it or not they are so old that

5054
03:11:38,080 --> 03:11:40,800
the standards for transmitting keyboard

5055
03:11:40,800 --> 03:11:43,040
keystrokes across that kind of

5056
03:11:43,040 --> 03:11:44,399
connection had changed

5057
03:11:44,399 --> 03:11:46,560
and so even just getting through the os

5058
03:11:46,560 --> 03:11:48,160
installer was really hard

5059
03:11:48,160 --> 03:11:49,600
and even impossible in a couple of

5060
03:11:49,600 --> 03:11:52,000
places we're also running into problems

5061
03:11:52,000 --> 03:11:54,239
where current os's no longer have

5062
03:11:54,239 --> 03:11:57,120
um the drivers necessary to run things

5063
03:11:57,120 --> 03:11:58,640
like the old network cards on those

5064
03:11:58,640 --> 03:11:59,600
machines

5065
03:11:59,600 --> 03:12:02,880
um so having this fai fully automated

5066
03:12:02,880 --> 03:12:04,560
installer up and running in order to

5067
03:12:04,560 --> 03:12:07,200
do this was was really important and

5068
03:12:07,200 --> 03:12:08,479
really helpful

5069
03:12:08,479 --> 03:12:10,720
um so now that we have those machines on

5070
03:12:10,720 --> 03:12:12,960
newest new os's that can actually be

5071
03:12:12,960 --> 03:12:13,840
maintained

5072
03:12:13,840 --> 03:12:16,720
um we've instituted a new uh maintenance

5073
03:12:16,720 --> 03:12:17,359
window

5074
03:12:17,359 --> 03:12:19,200
on the first and third tuesday of every

5075
03:12:19,200 --> 03:12:20,640
month uh between

5076
03:12:20,640 --> 03:12:23,840
uh three and seven pm utc um

5077
03:12:23,840 --> 03:12:25,439
so that so if we need to reboot the

5078
03:12:25,439 --> 03:12:27,680
servers for any reason um

5079
03:12:27,680 --> 03:12:29,359
that's when we'll be doing it uh new

5080
03:12:29,359 --> 03:12:31,279
kernels that sort of thing

5081
03:12:31,279 --> 03:12:34,399
um and uh we won't be announcing those

5082
03:12:34,399 --> 03:12:35,279
reboots but

5083
03:12:35,279 --> 03:12:37,600
um but we will be using um these sort of

5084
03:12:37,600 --> 03:12:39,680
on system facilities to notify anyone

5085
03:12:39,680 --> 03:12:40,960
who's currently logged in that

5086
03:12:40,960 --> 03:12:44,399
the reboot will be coming

5087
03:12:44,880 --> 03:12:47,439
so we recently completed the 2021 day in

5088
03:12:47,439 --> 03:12:48,640
the life collection

5089
03:12:48,640 --> 03:12:52,080
um so uh when i put together the report

5090
03:12:52,080 --> 03:12:52,479
and

5091
03:12:52,479 --> 03:12:54,880
and these slides we were still receiving

5092
03:12:54,880 --> 03:12:56,399
the last sort of long tail

5093
03:12:56,399 --> 03:12:59,200
of uh uploads from some contributors i

5094
03:12:59,200 --> 03:13:00,000
think that's all done

5095
03:13:00,000 --> 03:13:02,720
now the last time i looked which was

5096
03:13:02,720 --> 03:13:04,239
earlier this week we had about 13

5097
03:13:04,239 --> 03:13:06,560
terabytes in from about 22

5098
03:13:06,560 --> 03:13:08,640
contributors so it's down a little bit

5099
03:13:08,640 --> 03:13:11,520
from last year

5100
03:13:11,520 --> 03:13:13,760
in terms of the volume of data although

5101
03:13:13,760 --> 03:13:15,680
we have one additional contributor

5102
03:13:15,680 --> 03:13:19,040
i sort of suspect that's just due to um

5103
03:13:19,040 --> 03:13:20,399
different usage patterns now that we're

5104
03:13:20,399 --> 03:13:22,960
sort of you know stabilized in

5105
03:13:22,960 --> 03:13:26,479
in the pandemic but

5106
03:13:26,479 --> 03:13:27,680
yeah it'll be interesting to see what

5107
03:13:27,680 --> 03:13:29,120
comes out of that once researchers get a

5108
03:13:29,120 --> 03:13:29,520
look

5109
03:13:29,520 --> 03:13:31,680
at that data uh so we'll start

5110
03:13:31,680 --> 03:13:33,200
post-processing for that soon

5111
03:13:33,200 --> 03:13:36,479
and and um we expect that the

5112
03:13:36,479 --> 03:13:38,479
data will be available for researchers

5113
03:13:38,479 --> 03:13:39,920
probably in about a month

5114
03:13:39,920 --> 03:13:42,640
um there's a bit of pre-work that needs

5115
03:13:42,640 --> 03:13:43,760
to be done before uh

5116
03:13:43,760 --> 03:13:46,880
before we can start that processing

5117
03:13:46,880 --> 03:13:48,479
uh something i've brought up a few times

5118
03:13:48,479 --> 03:13:50,239
in the last few workshops um

5119
03:13:50,239 --> 03:13:52,800
is the shared dsc platform for a long

5120
03:13:52,800 --> 03:13:55,040
time marc has been collecting dsc data

5121
03:13:55,040 --> 03:13:56,479
from members and

5122
03:13:56,479 --> 03:13:59,439
um and putting it up in a way and sort

5123
03:13:59,439 --> 03:14:00,479
of a shared

5124
03:14:00,479 --> 03:14:02,960
dsc viewer so that people could sort of

5125
03:14:02,960 --> 03:14:03,840
compare

5126
03:14:03,840 --> 03:14:07,359
dns traffic among members

5127
03:14:07,359 --> 03:14:09,359
but with the new our portal that we put

5128
03:14:09,359 --> 03:14:10,640
in place um

5129
03:14:10,640 --> 03:14:12,319
about a year and a half ago now i guess

5130
03:14:12,319 --> 03:14:14,000
a little more than a year and a half ago

5131
03:14:14,000 --> 03:14:15,520
um there hasn't actually been a way to

5132
03:14:15,520 --> 03:14:17,200
view that data and we've asked for

5133
03:14:17,200 --> 03:14:19,439
feedback from members a few times about

5134
03:14:19,439 --> 03:14:20,560
what we should do with that and haven't

5135
03:14:20,560 --> 03:14:22,880
really heard anything so um

5136
03:14:22,880 --> 03:14:25,760
we are planning now to to discontinue

5137
03:14:25,760 --> 03:14:26,800
collecting that data

5138
03:14:26,800 --> 03:14:29,600
uh ripencc is now last member um other

5139
03:14:29,600 --> 03:14:31,920
than orc to be contributing data to it

5140
03:14:31,920 --> 03:14:34,080
uh so we'll be in touch about uh about

5141
03:14:34,080 --> 03:14:34,960
shutting that down

5142
03:14:34,960 --> 03:14:38,720
uh sometime soon i think

5143
03:14:38,720 --> 03:14:42,080
um as i mentioned um uh

5144
03:14:42,080 --> 03:14:45,359
the our orcs routers um we

5145
03:14:45,359 --> 03:14:47,680
uh the rotors that oreck is using are

5146
03:14:47,680 --> 03:14:49,279
now uh beyond

5147
03:14:49,279 --> 03:14:52,080
uh end of support um it's it's quite old

5148
03:14:52,080 --> 03:14:53,279
hardware that we've got

5149
03:14:53,279 --> 03:14:55,520
um the very last os update to ever be

5150
03:14:55,520 --> 03:14:56,319
released for this

5151
03:14:56,319 --> 03:14:58,080
platform uh came out at the end of the

5152
03:14:58,080 --> 03:15:00,800
year and uh and it has been applied

5153
03:15:00,800 --> 03:15:02,640
um this unfortunately didn't fix an

5154
03:15:02,640 --> 03:15:04,479
ongoing routing issue we've been having

5155
03:15:04,479 --> 03:15:06,399
in fremont where we seem to be

5156
03:15:06,399 --> 03:15:09,520
randomly losing individual v6 routes

5157
03:15:09,520 --> 03:15:11,680
um so we're really going to be relying

5158
03:15:11,680 --> 03:15:13,600
on on getting new

5159
03:15:13,600 --> 03:15:16,239
routing platform in there in order to in

5160
03:15:16,239 --> 03:15:18,080
order to fix that up

5161
03:15:18,080 --> 03:15:21,359
we are also planning on expanding uh her

5162
03:15:21,359 --> 03:15:24,479
um network infrastructure a bit um

5163
03:15:24,479 --> 03:15:26,960
uh namely we've we've had an offer for a

5164
03:15:26,960 --> 03:15:28,479
very reasonably priced

5165
03:15:28,479 --> 03:15:30,080
second transit connection which we would

5166
03:15:30,080 --> 03:15:31,920
like to bring up but uh but of course we

5167
03:15:31,920 --> 03:15:32,560
need

5168
03:15:32,560 --> 03:15:34,080
we need new writing hardware to to

5169
03:15:34,080 --> 03:15:37,520
manage that um

5170
03:15:37,520 --> 03:15:41,120
so i'm out of time here so a very quick

5171
03:15:41,120 --> 03:15:45,040
um rundown on um our new cef storage

5172
03:15:45,040 --> 03:15:46,080
cluster

5173
03:15:46,080 --> 03:15:49,040
um there's um the original plan for this

5174
03:15:49,040 --> 03:15:52,000
uh was documented at or 31.

5175
03:15:52,000 --> 03:15:54,640
um so there's the the report there that

5176
03:15:54,640 --> 03:15:56,000
uh that talks about sort of the

5177
03:15:56,000 --> 03:15:57,439
justification and the issues we were

5178
03:15:57,439 --> 03:15:57,920
having

5179
03:15:57,920 --> 03:16:00,239
and um and the ideas i had at the time

5180
03:16:00,239 --> 03:16:01,439
about

5181
03:16:01,439 --> 03:16:03,600
how moving to a clustered storage uh

5182
03:16:03,600 --> 03:16:05,600
infrastructure would help us

5183
03:16:05,600 --> 03:16:08,239
um so we're sort of in the last stages

5184
03:16:08,239 --> 03:16:09,120
of that now

5185
03:16:09,120 --> 03:16:12,080
um we it took us a long time to deal

5186
03:16:12,080 --> 03:16:12,560
with

5187
03:16:12,560 --> 03:16:15,359
with um getting funding and getting the

5188
03:16:15,359 --> 03:16:17,120
hardware ordered and actually delivered

5189
03:16:17,120 --> 03:16:17,840
but the

5190
03:16:17,840 --> 03:16:19,120
final hardware actually showed up in

5191
03:16:19,120 --> 03:16:21,359
very late november um

5192
03:16:21,359 --> 03:16:24,399
we had a contractor on site who

5193
03:16:24,399 --> 03:16:26,560
dealt with uh racking and cabling the

5194
03:16:26,560 --> 03:16:27,920
bulk of that

5195
03:16:27,920 --> 03:16:31,279
unfortunately our fiber switches for the

5196
03:16:31,279 --> 03:16:32,560
10 gig

5197
03:16:32,560 --> 03:16:35,200
cluster network didn't show up until

5198
03:16:35,200 --> 03:16:36,160
after

5199
03:16:36,160 --> 03:16:39,040
that work was complete so we did finally

5200
03:16:39,040 --> 03:16:40,399
get them

5201
03:16:40,399 --> 03:16:43,600
racked up in q1 thanks to the help of

5202
03:16:43,600 --> 03:16:44,399
the uh

5203
03:16:44,399 --> 03:16:47,120
the remote hands um in the knock at the

5204
03:16:47,120 --> 03:16:48,479
data center

5205
03:16:48,479 --> 03:16:50,960
um cabling for that we'll we're going to

5206
03:16:50,960 --> 03:16:51,760
do uh

5207
03:16:51,760 --> 03:16:54,479
due pretty soon um and we're expecting

5208
03:16:54,479 --> 03:16:54,880
um

5209
03:16:54,880 --> 03:16:56,479
to basically have this in production by

5210
03:16:56,479 --> 03:16:58,080
the end of q2 so

5211
03:16:58,080 --> 03:17:00,560
um that should be really nice to have

5212
03:17:00,560 --> 03:17:01,120
it'll

5213
03:17:01,120 --> 03:17:03,920
improve life for a lot of people uh who

5214
03:17:03,920 --> 03:17:06,560
are doing work on our analysis servers

5215
03:17:06,560 --> 03:17:13,840
um so um questions for anyone

5216
03:17:19,520 --> 03:17:23,439
so i'm not hearing anything from keith

5217
03:17:23,840 --> 03:17:27,840
any questions sorry

5218
03:17:28,880 --> 03:17:32,560
there don't seem to be any questions and

5219
03:17:32,880 --> 03:17:36,239
no raised hands either

5220
03:17:36,479 --> 03:17:38,560
so over to you keith all right thanks

5221
03:17:38,560 --> 03:17:41,840
very much

5222
03:17:47,920 --> 03:17:51,040
okay so last presentation of the day

5223
03:17:51,040 --> 03:17:53,520
um just want to give you a brief off day

5224
03:17:53,520 --> 03:17:54,880
of what we've been up to

5225
03:17:54,880 --> 03:17:57,920
since work 34 um

5226
03:17:57,920 --> 03:18:00,560
in the past three months or so um i

5227
03:18:00,560 --> 03:18:02,479
commend you to the written reports apart

5228
03:18:02,479 --> 03:18:02,960
from

5229
03:18:02,960 --> 03:18:05,600
being not being delivered by half awake

5230
03:18:05,600 --> 03:18:06,160
people

5231
03:18:06,160 --> 03:18:08,880
um you'll find a lot of detail in matt's

5232
03:18:08,880 --> 03:18:10,319
and jerry's report and

5233
03:18:10,319 --> 03:18:12,080
um sort of general overview in my

5234
03:18:12,080 --> 03:18:14,080
written report these are all accessible

5235
03:18:14,080 --> 03:18:14,960
from indico

5236
03:18:14,960 --> 03:18:17,439
um so uh if you've got any you want to

5237
03:18:17,439 --> 03:18:18,239
read it

5238
03:18:18,239 --> 03:18:20,880
in time and digest it and ask us any

5239
03:18:20,880 --> 03:18:23,120
questions we'll be happy to do that

5240
03:18:23,120 --> 03:18:25,600
so uh president's quarterly report on

5241
03:18:25,600 --> 03:18:27,200
where we're at with the work what have

5242
03:18:27,200 --> 03:18:27,520
you

5243
03:18:27,520 --> 03:18:31,359
been doing while the world has been

5244
03:18:31,359 --> 03:18:34,479
twiddling its thumbs in pandemic mode um

5245
03:18:34,479 --> 03:18:38,000
or 35 was very well attended um

5246
03:18:38,000 --> 03:18:41,359
sorry 30 yep 34 i should say sorry about

5247
03:18:41,359 --> 03:18:41,920
that

5248
03:18:41,920 --> 03:18:44,319
last workshop was very well attended 180

5249
03:18:44,319 --> 03:18:45,040
attendees

5250
03:18:45,040 --> 03:18:46,800
um so that was great it was really good

5251
03:18:46,800 --> 03:18:48,880
to get that level of engagement

5252
03:18:48,880 --> 03:18:51,359
um as matt said we completed the digital

5253
03:18:51,359 --> 03:18:52,399
2021

5254
03:18:52,399 --> 03:18:54,880
collect collection pretty much um still

5255
03:18:54,880 --> 03:18:55,600
waiting for

5256
03:18:55,600 --> 03:18:57,600
on on a few more uploads but it looks

5257
03:18:57,600 --> 03:18:58,720
like a decent

5258
03:18:58,720 --> 03:19:01,439
update um software front major updates

5259
03:19:01,439 --> 03:19:04,319
to dns perform dns cap

5260
03:19:04,319 --> 03:19:06,399
not only did matt do major software

5261
03:19:06,399 --> 03:19:08,399
upgrades to the analysis servers but you

5262
03:19:08,399 --> 03:19:10,000
build maintenance automation which we

5263
03:19:10,000 --> 03:19:11,840
will use to complete new data store

5264
03:19:11,840 --> 03:19:13,120
installation and and

5265
03:19:13,120 --> 03:19:16,000
also make um a lot of our systems

5266
03:19:16,000 --> 03:19:17,439
management better

5267
03:19:17,439 --> 03:19:19,120
already talked i mean already mentioned

5268
03:19:19,120 --> 03:19:20,720
they checked my dns tester

5269
03:19:20,720 --> 03:19:23,120
improvements um and the other thing is

5270
03:19:23,120 --> 03:19:25,600
the 2020 was a tough year to get through

5271
03:19:25,600 --> 03:19:27,359
um in many ways but we actually finished

5272
03:19:27,359 --> 03:19:28,640
up in a very strong

5273
03:19:28,640 --> 03:19:30,319
position financially we got a lot of

5274
03:19:30,319 --> 03:19:32,720
good support from members

5275
03:19:32,720 --> 03:19:35,680
um donors grants um so i'm pleased to

5276
03:19:35,680 --> 03:19:37,439
say that that lets us do more things

5277
03:19:37,439 --> 03:19:38,880
going forward

5278
03:19:38,880 --> 03:19:41,840
um and you know i i also think that the

5279
03:19:41,840 --> 03:19:42,560
fact that we

5280
03:19:42,560 --> 03:19:45,120
kept things running and um the industry

5281
03:19:45,120 --> 03:19:46,880
kept the internet running and that we

5282
03:19:46,880 --> 03:19:48,640
were able to do some successful

5283
03:19:48,640 --> 03:19:50,560
online events through europe pandemic is

5284
03:19:50,560 --> 03:19:53,279
is is no short achievement and i'm very

5285
03:19:53,279 --> 03:19:54,880
proud of her staff and very

5286
03:19:54,880 --> 03:19:56,640
grateful to her community for letting us

5287
03:19:56,640 --> 03:19:58,800
do that

5288
03:19:58,800 --> 03:20:01,680
um about a year ago um we came up with a

5289
03:20:01,680 --> 03:20:03,439
strategy for here's how we're going to

5290
03:20:03,439 --> 03:20:04,720
cope with the pandemic

5291
03:20:04,720 --> 03:20:07,200
um and um the strategy is still pretty

5292
03:20:07,200 --> 03:20:09,040
much in place and and you know we'll be

5293
03:20:09,040 --> 03:20:09,359
there

5294
03:20:09,359 --> 03:20:11,439
until we come out the other side really

5295
03:20:11,439 --> 03:20:12,880
the main change is that

5296
03:20:12,880 --> 03:20:14,640
while we were figuring out how to run

5297
03:20:14,640 --> 03:20:16,880
our events for everyone stuck at home

5298
03:20:16,880 --> 03:20:19,040
a year ago now we're starting to think

5299
03:20:19,040 --> 03:20:20,800
about you know at some point there will

5300
03:20:20,800 --> 03:20:22,479
be physical events again

5301
03:20:22,479 --> 03:20:25,040
how do we get back to these how do we

5302
03:20:25,040 --> 03:20:27,120
run them in a hybrid fashion so

5303
03:20:27,120 --> 03:20:28,800
when some people can participate and

5304
03:20:28,800 --> 03:20:30,560
others cannot that everyone's there on

5305
03:20:30,560 --> 03:20:32,160
an equitable basis so that that's the

5306
03:20:32,160 --> 03:20:33,520
main thing that we're thinking about

5307
03:20:33,520 --> 03:20:36,080
is also the next step of the pandemic

5308
03:20:36,080 --> 03:20:37,760
strategy

5309
03:20:37,760 --> 03:20:39,520
um but yeah i mean going into this

5310
03:20:39,520 --> 03:20:41,200
workshop i kind of felt

5311
03:20:41,200 --> 03:20:44,640
you know we finally got the hang of this

5312
03:20:44,640 --> 03:20:46,640
thing this pandemic thing they're

5313
03:20:46,640 --> 03:20:48,399
running the fully online workshops i

5314
03:20:48,399 --> 03:20:50,319
think everything is is going really very

5315
03:20:50,319 --> 03:20:52,319
smoothly over the past couple of days

5316
03:20:52,319 --> 03:20:54,479
and that's because

5317
03:20:54,479 --> 03:20:56,560
a lot of work has gone in um to

5318
03:20:56,560 --> 03:20:57,760
preparing everything and

5319
03:20:57,760 --> 03:20:59,600
and running things to how we figured out

5320
03:20:59,600 --> 03:21:00,800
doing it

5321
03:21:00,800 --> 03:21:03,200
um and you know even though as a team

5322
03:21:03,200 --> 03:21:04,560
remote work from home

5323
03:21:04,560 --> 03:21:05,760
stuff was something that we've been

5324
03:21:05,760 --> 03:21:07,600
doing for a long time before we

5325
03:21:07,600 --> 03:21:09,359
all were forced to do it we still miss

5326
03:21:09,359 --> 03:21:10,960
everyone we really miss seeing you

5327
03:21:10,960 --> 03:21:14,239
and engaging with our community and

5328
03:21:14,239 --> 03:21:17,920
and everyone um i think that

5329
03:21:17,920 --> 03:21:20,080
we have gathered for posterity a couple

5330
03:21:20,080 --> 03:21:21,359
of um interesting

5331
03:21:21,359 --> 03:21:23,200
day in the life of the internet annual

5332
03:21:23,200 --> 03:21:24,880
data sets which should provide

5333
03:21:24,880 --> 03:21:26,479
interesting context on

5334
03:21:26,479 --> 03:21:29,920
all of this events over the past year or

5335
03:21:29,920 --> 03:21:30,640
more

5336
03:21:30,640 --> 03:21:34,000
um and the other thing is well

5337
03:21:34,000 --> 03:21:35,279
one thing i don't think we completely

5338
03:21:35,279 --> 03:21:36,720
got the hang of is taking care of

5339
03:21:36,720 --> 03:21:37,359
ourselves

5340
03:21:37,359 --> 03:21:40,319
um and uh yeah staying up to weird time

5341
03:21:40,319 --> 03:21:42,160
zones like this is perhaps not the best

5342
03:21:42,160 --> 03:21:43,680
way of doing that

5343
03:21:43,680 --> 03:21:46,560
um but it's a learning journey you know

5344
03:21:46,560 --> 03:21:48,319
i i think i think i think we all know

5345
03:21:48,319 --> 03:21:49,359
that it's it's

5346
03:21:49,359 --> 03:21:51,120
you know just the art team that has had

5347
03:21:51,120 --> 03:21:52,720
to learn that

5348
03:21:52,720 --> 03:21:56,239
um support has been strong thank you to

5349
03:21:56,239 --> 03:21:58,160
everybody who has contributed to org

5350
03:21:58,160 --> 03:22:00,319
both financially and materially and with

5351
03:22:00,319 --> 03:22:02,880
your time and moral support

5352
03:22:02,880 --> 03:22:05,359
uh and yeah jet lag without your miles

5353
03:22:05,359 --> 03:22:07,520
um the mirror idiosyncrasies of zoom

5354
03:22:07,520 --> 03:22:09,200
which still managed to catch all of us

5355
03:22:09,200 --> 03:22:10,800
out despite the amount of time that we

5356
03:22:10,800 --> 03:22:11,920
spent on it and

5357
03:22:11,920 --> 03:22:14,000
um and yeah yeah we kind of start fun

5358
03:22:14,000 --> 03:22:15,760
stuff like space penguins and

5359
03:22:15,760 --> 03:22:19,359
other mascots so um we're still signing

5360
03:22:19,359 --> 03:22:20,239
up new members

5361
03:22:20,239 --> 03:22:22,399
uh very pleased um since the last

5362
03:22:22,399 --> 03:22:24,399
worktop to sign up dutch telecom as a

5363
03:22:24,399 --> 03:22:25,680
bronze member one of the biggest

5364
03:22:25,680 --> 03:22:26,720
carriers in europe

5365
03:22:26,720 --> 03:22:29,760
um netsky arbor also is a bronze member

5366
03:22:29,760 --> 03:22:31,680
very pleased that godaddy have upgraded

5367
03:22:31,680 --> 03:22:33,680
their membership from bronze to gold

5368
03:22:33,680 --> 03:22:35,520
and kaido i've been able to upgrade from

5369
03:22:35,520 --> 03:22:37,200
supporter to blue level

5370
03:22:37,200 --> 03:22:40,479
um and like i said strong support nobody

5371
03:22:40,479 --> 03:22:42,160
who's a paying member has terminated

5372
03:22:42,160 --> 03:22:43,600
their membership or downgraded their

5373
03:22:43,600 --> 03:22:45,359
membership so that that's really awesome

5374
03:22:45,359 --> 03:22:48,399
we really appreciate that

5375
03:22:48,399 --> 03:22:52,080
um we did very well with grants last

5376
03:22:52,080 --> 03:22:52,479
year

5377
03:22:52,479 --> 03:22:54,000
the grants that are still running in

5378
03:22:54,000 --> 03:22:56,479
2021 are the ones we've mentioned

5379
03:22:56,479 --> 03:22:58,560
already so a big thank you to

5380
03:22:58,560 --> 03:23:01,040
missile open source support and the

5381
03:23:01,040 --> 03:23:02,080
comcast innovation

5382
03:23:02,080 --> 03:23:04,960
fund for making the dns perf doh work

5383
03:23:04,960 --> 03:23:05,760
possible

5384
03:23:05,760 --> 03:23:08,800
and to iron community grants program um

5385
03:23:08,800 --> 03:23:10,640
we've listed all of the grants that we

5386
03:23:10,640 --> 03:23:12,560
received and donations that we received

5387
03:23:12,560 --> 03:23:14,000
over the past couple of years

5388
03:23:14,000 --> 03:23:17,279
um at this grants page so you can see

5389
03:23:17,279 --> 03:23:18,960
there's good support there and i mean

5390
03:23:18,960 --> 03:23:20,479
you know if you're interested in

5391
03:23:20,479 --> 03:23:23,200
um funding us to do a specific work or

5392
03:23:23,200 --> 03:23:24,800
to make a donation we

5393
03:23:24,800 --> 03:23:27,279
would love that but um thank you to

5394
03:23:27,279 --> 03:23:30,720
everyone that supported us um

5395
03:23:30,720 --> 03:23:33,600
and i mentioned yesterday that um

5396
03:23:33,600 --> 03:23:34,880
there's a couple of people that we want

5397
03:23:34,880 --> 03:23:36,800
to show special appreciation for

5398
03:23:36,800 --> 03:23:40,160
and um for um schumann um we did that

5399
03:23:40,160 --> 03:23:41,200
yesterday

5400
03:23:41,200 --> 03:23:43,600
um i don't think george is out there um

5401
03:23:43,600 --> 03:23:45,200
but hopefully he will get the

5402
03:23:45,200 --> 03:23:49,279
the vibes um and um george served on the

5403
03:23:49,279 --> 03:23:50,880
art board for six years

5404
03:23:50,880 --> 03:23:53,600
uh between 2014 and 2020 and then for

5405
03:23:53,600 --> 03:23:55,200
the latter part of that is the other

5406
03:23:55,200 --> 03:23:56,160
chair

5407
03:23:56,160 --> 03:23:59,200
so um hopefully we cannot present him in

5408
03:23:59,200 --> 03:24:01,120
person but here is the award that we

5409
03:24:01,120 --> 03:24:03,520
sent him and here is his fine self

5410
03:24:03,520 --> 03:24:06,239
so um and we're in his time zone so i

5411
03:24:06,239 --> 03:24:07,840
said thank you george it was a pleasure

5412
03:24:07,840 --> 03:24:10,319
to work with you

5413
03:24:10,319 --> 03:24:13,200
um so um back to some more

5414
03:24:13,200 --> 03:24:14,479
administrative stuff

5415
03:24:14,479 --> 03:24:17,840
um i'm afraid the the the past year um

5416
03:24:17,840 --> 03:24:19,600
some people some businesses in the

5417
03:24:19,600 --> 03:24:21,279
service um

5418
03:24:21,279 --> 03:24:23,040
office-based business haven't done so

5419
03:24:23,040 --> 03:24:24,720
well others see it as

5420
03:24:24,720 --> 03:24:27,520
an opportunity for the future so um we

5421
03:24:27,520 --> 03:24:29,200
have this little office in indianapolis

5422
03:24:29,200 --> 03:24:30,640
because banks and

5423
03:24:30,640 --> 03:24:32,319
government agencies want us to have a

5424
03:24:32,319 --> 03:24:34,319
physical location um

5425
03:24:34,319 --> 03:24:36,800
and we may have some some of the old

5426
03:24:36,800 --> 03:24:38,560
paperwork that we still need to store

5427
03:24:38,560 --> 03:24:40,880
so i found a new location then from the

5428
03:24:40,880 --> 03:24:42,160
14th of may

5429
03:24:42,160 --> 03:24:44,640
um we'll be moving into that it does not

5430
03:24:44,640 --> 03:24:46,319
really have any material effect on how

5431
03:24:46,319 --> 03:24:47,760
you deal with the work um

5432
03:24:47,760 --> 03:24:50,080
we have a separate po box in california

5433
03:24:50,080 --> 03:24:52,160
if you need to send checks or invoices

5434
03:24:52,160 --> 03:24:52,479
to

5435
03:24:52,479 --> 03:24:55,040
that stays the same um really this is

5436
03:24:55,040 --> 03:24:56,880
just for for the record to let you know

5437
03:24:56,880 --> 03:24:58,080
if you see this address

5438
03:24:58,080 --> 03:25:00,720
um that you know you're not blindsided

5439
03:25:00,720 --> 03:25:02,160
by it

5440
03:25:02,160 --> 03:25:04,000
um the other thing as i mentioned we're

5441
03:25:04,000 --> 03:25:05,920
a strong financial position we have far

5442
03:25:05,920 --> 03:25:07,040
too much to do

5443
03:25:07,040 --> 03:25:09,920
um i really feel for jerry and matt with

5444
03:25:09,920 --> 03:25:12,160
all the stuff that they need to support

5445
03:25:12,160 --> 03:25:14,239
um so we're hiring um the way that we're

5446
03:25:14,239 --> 03:25:15,840
doing this is that we have a couple of

5447
03:25:15,840 --> 03:25:17,120
specific projects

5448
03:25:17,120 --> 03:25:19,920
um matt mentioned the um the network the

5449
03:25:19,920 --> 03:25:22,080
richard config cleanup project

5450
03:25:22,080 --> 03:25:25,520
and um we want to get the third phase

5451
03:25:25,520 --> 03:25:27,680
of the doh for dns per project

5452
03:25:27,680 --> 03:25:29,920
preferably finished off by somebody who

5453
03:25:29,920 --> 03:25:34,000
enjoys and um is as you know as good

5454
03:25:34,000 --> 03:25:37,279
good abilities with https um

5455
03:25:37,279 --> 03:25:39,040
so these are the two short-term projects

5456
03:25:39,040 --> 03:25:40,640
that are mentioned there

5457
03:25:40,640 --> 03:25:42,800
but we have budget for both of these

5458
03:25:42,800 --> 03:25:44,880
positions essentially duplicating jerry

5459
03:25:44,880 --> 03:25:47,040
and matt on a long-term basis as well

5460
03:25:47,040 --> 03:25:49,120
and um we're interested both in

5461
03:25:49,120 --> 03:25:50,880
applications for the long-term position

5462
03:25:50,880 --> 03:25:51,600
but you know

5463
03:25:51,600 --> 03:25:54,160
it's possible if people are the right

5464
03:25:54,160 --> 03:25:55,840
candidates for the short-term projects

5465
03:25:55,840 --> 03:25:58,399
we may engage them on a long-term basis

5466
03:25:58,399 --> 03:26:00,239
we also have two non-technical positions

5467
03:26:00,239 --> 03:26:02,720
to fill um membership coordinator

5468
03:26:02,720 --> 03:26:06,560
um so again um sue's role there

5469
03:26:06,560 --> 03:26:09,439
um beefing up that um and an

5470
03:26:09,439 --> 03:26:10,479
administrator

5471
03:26:10,479 --> 03:26:12,560
um somebody you can you can help with

5472
03:26:12,560 --> 03:26:13,520
with some of the more

5473
03:26:13,520 --> 03:26:16,239
routine paperwork and other

5474
03:26:16,239 --> 03:26:18,000
administrative tasks that

5475
03:26:18,000 --> 03:26:21,040
keep the organization working um all

5476
03:26:21,040 --> 03:26:22,640
these roles are remote work from home

5477
03:26:22,640 --> 03:26:23,520
basis

5478
03:26:23,520 --> 03:26:25,920
um you can find more background about

5479
03:26:25,920 --> 03:26:27,520
them there

5480
03:26:27,520 --> 03:26:30,399
and um that's where applications go so

5481
03:26:30,399 --> 03:26:32,000
if you know anybody that might be a good

5482
03:26:32,000 --> 03:26:34,239
candidate um you know please please

5483
03:26:34,239 --> 03:26:37,439
encourage them to apply

5484
03:26:37,600 --> 03:26:41,120
um the team has worked really hard

5485
03:26:41,120 --> 03:26:43,439
over the past year it's been challenging

5486
03:26:43,439 --> 03:26:45,120
um one of the things that we did last

5487
03:26:45,120 --> 03:26:46,160
year um

5488
03:26:46,160 --> 03:26:48,640
was we gave them some some down time you

5489
03:26:48,640 --> 03:26:49,439
know so you can

5490
03:26:49,439 --> 03:26:51,680
nobody's getting any vacation much at

5491
03:26:51,680 --> 03:26:53,279
the moment but at least

5492
03:26:53,279 --> 03:26:55,120
if we can all shut off at the same time

5493
03:26:55,120 --> 03:26:57,200
we can we can give everyone a break

5494
03:26:57,200 --> 03:26:58,880
so for next week we'll be doing a one a

5495
03:26:58,880 --> 03:27:00,560
one week shutdown i mean obviously all

5496
03:27:00,560 --> 03:27:02,319
the online services will continue to

5497
03:27:02,319 --> 03:27:03,439
operate

5498
03:27:03,439 --> 03:27:05,200
um i will be monitoring email and

5499
03:27:05,200 --> 03:27:06,560
voicemail just in case anything

5500
03:27:06,560 --> 03:27:07,279
emergency

5501
03:27:07,279 --> 03:27:10,560
comes up urgent requiring escalation um

5502
03:27:10,560 --> 03:27:14,479
but um if you can all grant us that time

5503
03:27:14,479 --> 03:27:16,160
off with our families and

5504
03:27:16,160 --> 03:27:17,600
and just to switch off a bit we

5505
03:27:17,600 --> 03:27:19,359
appreciate it i mean thank you for your

5506
03:27:19,359 --> 03:27:20,800
understanding of the sorry what

5507
03:27:20,800 --> 03:27:22,479
circumstances i've been working under

5508
03:27:22,479 --> 03:27:23,840
for the past year

5509
03:27:23,840 --> 03:27:25,760
um all the supporting patients is very

5510
03:27:25,760 --> 03:27:27,040
much appreciated

5511
03:27:27,040 --> 03:27:29,200
and i really appreciate the team i mean

5512
03:27:29,200 --> 03:27:30,160
everybody has

5513
03:27:30,160 --> 03:27:33,279
has stuck to it and um um you know done

5514
03:27:33,279 --> 03:27:35,120
some some tricky things and pitched in

5515
03:27:35,120 --> 03:27:36,720
for things that may not necessarily have

5516
03:27:36,720 --> 03:27:38,479
been their ideal choice

5517
03:27:38,479 --> 03:27:40,239
um and we're here and we're in a strong

5518
03:27:40,239 --> 03:27:42,239
position and we intend to

5519
03:27:42,239 --> 03:27:45,359
look after our precious team resource

5520
03:27:45,359 --> 03:27:45,760
and

5521
03:27:45,760 --> 03:27:48,800
and keep it functioning

5522
03:27:49,120 --> 03:27:51,840
so um next workshops i sincerely hope

5523
03:27:51,840 --> 03:27:53,840
the next time that we do a workshop

5524
03:27:53,840 --> 03:27:56,160
um that there will be at least some of

5525
03:27:56,160 --> 03:27:58,160
us meeting in person

5526
03:27:58,160 --> 03:27:59,840
we set the plan for the first nine

5527
03:27:59,840 --> 03:28:02,399
months of 2021 that we would not do any

5528
03:28:02,399 --> 03:28:05,200
physical workshops

5529
03:28:05,200 --> 03:28:08,800
um but um we

5530
03:28:08,800 --> 03:28:10,560
expect that probably over the summer

5531
03:28:10,560 --> 03:28:12,640
we'll do a short online event the

5532
03:28:12,640 --> 03:28:14,160
sort of format that we did for short

5533
03:28:14,160 --> 03:28:16,880
events last year maybe around august

5534
03:28:16,880 --> 03:28:19,840
um the plan for quarter four is the um

5535
03:28:19,840 --> 03:28:22,080
the agm we will be doing on a hybrid

5536
03:28:22,080 --> 03:28:22,800
basis

5537
03:28:22,800 --> 03:28:25,359
um ideally we do that in october and

5538
03:28:25,359 --> 03:28:27,439
i'll make it too late in the year

5539
03:28:27,439 --> 03:28:29,359
um and then all the good opportunities

5540
03:28:29,359 --> 03:28:30,960
for doing um

5541
03:28:30,960 --> 03:28:34,960
the um work 36 come up in november

5542
03:28:34,960 --> 03:28:38,720
for various reasons um a lot of

5543
03:28:38,720 --> 03:28:40,399
september and october is very difficult

5544
03:28:40,399 --> 03:28:42,080
to get space anywhere

5545
03:28:42,080 --> 03:28:45,120
um in november we may co-locate with

5546
03:28:45,120 --> 03:28:48,239
um nanook or uk or

5547
03:28:48,239 --> 03:28:51,040
ripe um possibly even itf just depending

5548
03:28:51,040 --> 03:28:52,399
on how it goes

5549
03:28:52,399 --> 03:28:55,200
um we're confident that by february next

5550
03:28:55,200 --> 03:28:57,279
year we will be able to to do a physical

5551
03:28:57,279 --> 03:28:59,200
meeting and we have a

5552
03:28:59,200 --> 03:29:02,000
deposit and conf confirmed booking in

5553
03:29:02,000 --> 03:29:04,319
austin texas to collocate with nanook in

5554
03:29:04,319 --> 03:29:06,080
february again

5555
03:29:06,080 --> 03:29:09,920
um anyway i mean we know that

5556
03:29:09,920 --> 03:29:11,439
what you want to do and what you're able

5557
03:29:11,439 --> 03:29:13,920
to do are not necessarily the same thing

5558
03:29:13,920 --> 03:29:16,160
so um in this survey for this event

5559
03:29:16,160 --> 03:29:17,520
there's a bunch of questions

5560
03:29:17,520 --> 03:29:19,600
about what you think you might be able

5561
03:29:19,600 --> 03:29:21,520
to do or what you might be able to do

5562
03:29:21,520 --> 03:29:24,720
what you want to do um so if you can

5563
03:29:24,720 --> 03:29:26,000
give us feedback even if you don't have

5564
03:29:26,000 --> 03:29:27,840
any feedback on on this event which we

5565
03:29:27,840 --> 03:29:29,040
would very much welcome

5566
03:29:29,040 --> 03:29:30,640
um we'd still really like to hear your

5567
03:29:30,640 --> 03:29:32,160
feedback on um

5568
03:29:32,160 --> 03:29:34,479
you know what what what the options are

5569
03:29:34,479 --> 03:29:35,279
for meeting

5570
03:29:35,279 --> 03:29:38,160
frequency duration online versus offline

5571
03:29:38,160 --> 03:29:39,439
and and then when we might

5572
03:29:39,439 --> 03:29:42,800
when we might make that transition

5573
03:29:42,800 --> 03:29:45,760
um so it just really falls on me to wrap

5574
03:29:45,760 --> 03:29:47,279
things up with the usual pleasure of

5575
03:29:47,279 --> 03:29:48,399
thanking everybody

5576
03:29:48,399 --> 03:29:50,000
i'd particularly like to thank various

5577
03:29:50,000 --> 03:29:52,319
zion and farsight security for being our

5578
03:29:52,319 --> 03:29:54,239
meeting sponsors this time

5579
03:29:54,239 --> 03:29:56,000
all of the old members and supporters

5580
03:29:56,000 --> 03:29:57,680
for supporting us through this all the

5581
03:29:57,680 --> 03:29:59,520
grant and donor funding that i already

5582
03:29:59,520 --> 03:30:00,160
mentioned

5583
03:30:00,160 --> 03:30:02,239
the program committee have been awesome

5584
03:30:02,239 --> 03:30:04,399
um we have a smooth meeting

5585
03:30:04,399 --> 03:30:06,080
um they spend a lot of time in

5586
03:30:06,080 --> 03:30:08,000
rehearsals and putting together the

5587
03:30:08,000 --> 03:30:09,040
program

5588
03:30:09,040 --> 03:30:10,880
so i you know i particularly like to

5589
03:30:10,880 --> 03:30:12,319
thank um

5590
03:30:12,319 --> 03:30:14,399
the program committee members that have

5591
03:30:14,399 --> 03:30:16,319
volunteered this time

5592
03:30:16,319 --> 03:30:19,439
um so jake

5593
03:30:19,439 --> 03:30:23,680
um pallavi willem um

5594
03:30:23,680 --> 03:30:27,520
manor for their um

5595
03:30:27,520 --> 03:30:30,319
session sharing and q a monitoring um

5596
03:30:30,319 --> 03:30:31,200
and also

5597
03:30:31,200 --> 03:30:34,720
um huayian as our guest timekeeper

5598
03:30:34,720 --> 03:30:37,920
um and um

5599
03:30:37,920 --> 03:30:40,800
mauricio who's been working hard with um

5600
03:30:40,800 --> 03:30:42,239
keeping the twitter feed and the social

5601
03:30:42,239 --> 03:30:43,680
media stuff running throughout

5602
03:30:43,680 --> 03:30:45,200
throughout the meeting

5603
03:30:45,200 --> 03:30:48,560
um and um

5604
03:30:48,560 --> 03:30:51,040
big thank you to all of our speakers um

5605
03:30:51,040 --> 03:30:52,080
who have um

5606
03:30:52,080 --> 03:30:53,840
you know they do this all their time

5607
03:30:53,840 --> 03:30:55,200
with their own time and they've been

5608
03:30:55,200 --> 03:30:56,080
doing this

5609
03:30:56,080 --> 03:30:58,319
like strange times of day this time

5610
03:30:58,319 --> 03:31:00,000
around it was great to see that we

5611
03:31:00,000 --> 03:31:02,479
got some some good um contributions from

5612
03:31:02,479 --> 03:31:03,920
the asia pacific region

5613
03:31:03,920 --> 03:31:06,000
of our members and speakers so thank you

5614
03:31:06,000 --> 03:31:07,600
all for that

5615
03:31:07,600 --> 03:31:13,200
um and um

5616
03:31:13,200 --> 03:31:14,880
just making sure i don't forget anybody

5617
03:31:14,880 --> 03:31:18,399
but um yeah i just like to thank matt

5618
03:31:18,399 --> 03:31:21,439
and dinesh for all the logistic work

5619
03:31:21,439 --> 03:31:22,399
that they have done

5620
03:31:22,399 --> 03:31:24,239
for this meeting and jerry and sue for

5621
03:31:24,239 --> 03:31:26,319
the uh the the support behind the scenes

5622
03:31:26,319 --> 03:31:26,800
and

5623
03:31:26,800 --> 03:31:28,000
and all the prep that they've been

5624
03:31:28,000 --> 03:31:29,840
engaged in as well

5625
03:31:29,840 --> 03:31:32,000
so um if you like workshops as an

5626
03:31:32,000 --> 03:31:33,279
opportunity to sponsor them

5627
03:31:33,279 --> 03:31:35,680
even when we're doing them online um or

5628
03:31:35,680 --> 03:31:37,040
maybe you would like to engage in

5629
03:31:37,040 --> 03:31:38,880
patronage for for all our workshops for

5630
03:31:38,880 --> 03:31:40,640
a year or just to donation there's this

5631
03:31:40,640 --> 03:31:42,399
various ways that you can do that

5632
03:31:42,399 --> 03:31:45,760
but again big thank you to everybody um

5633
03:31:45,760 --> 03:31:49,120
and with that um that is basically um

5634
03:31:49,120 --> 03:31:51,040
the end of what i have to say i'll be

5635
03:31:51,040 --> 03:31:53,040
happy to take some questions if my voice

5636
03:31:53,040 --> 03:31:54,319
holds out

5637
03:31:54,319 --> 03:31:57,439
um if not we will

5638
03:31:57,439 --> 03:31:59,760
as i say i hope that next time we will

5639
03:31:59,760 --> 03:32:03,359
see at least some of you in person

5640
03:32:03,359 --> 03:32:06,000
i can't see any questions submitted and

5641
03:32:06,000 --> 03:32:07,600
no one's raised everybody's gone to

5642
03:32:07,600 --> 03:32:08,160
sleep

5643
03:32:08,160 --> 03:32:10,830
there's no questions

5644
03:32:10,830 --> 03:32:14,160
[Music]

5645
03:32:14,160 --> 03:32:18,720
so any questions anyone now's the time

5646
03:32:19,840 --> 03:32:24,000
oh we have a raised hand so um

5647
03:32:24,000 --> 03:32:27,520
it's mark andrews and uh mark um you may

5648
03:32:27,520 --> 03:32:28,399
mute yourself

5649
03:32:28,399 --> 03:32:31,840
please go ahead yeah just uh

5650
03:32:31,840 --> 03:32:35,439
thank you um yeah

5651
03:32:35,439 --> 03:32:38,000
it's nice to nice to not being up in the

5652
03:32:38,000 --> 03:32:40,479
middle of the night

5653
03:32:40,479 --> 03:32:42,720
trying to have one of these meetings

5654
03:32:42,720 --> 03:32:44,479
yeah now we feel your pain thank you

5655
03:32:44,479 --> 03:32:46,960
thank you mark it's a pleasure

5656
03:32:46,960 --> 03:32:49,279
thank you uh we actually have one more

5657
03:32:49,279 --> 03:32:50,720
um hold on

5658
03:32:50,720 --> 03:32:53,920
and we have benno okay

5659
03:32:53,920 --> 03:32:57,359
ben oh please yeah not a question

5660
03:32:57,359 --> 03:33:00,319
just a word of appreciation oh as keith

5661
03:33:00,319 --> 03:33:02,080
presented

5662
03:33:02,080 --> 03:33:04,239
that's been a difficult year for all of

5663
03:33:04,239 --> 03:33:05,439
us but uh

5664
03:33:05,439 --> 03:33:08,080
i want to specifically address the

5665
03:33:08,080 --> 03:33:08,960
dinosaur

5666
03:33:08,960 --> 03:33:12,160
team uh you did a great job

5667
03:33:12,160 --> 03:33:14,479
and i think i can speak for the other

5668
03:33:14,479 --> 03:33:17,359
board members also we are very happy

5669
03:33:17,359 --> 03:33:21,040
how you managed to work through the year

5670
03:33:21,040 --> 03:33:24,960
and well achieved great results

5671
03:33:24,960 --> 03:33:29,040
a good online attendance of the

5672
03:33:29,040 --> 03:33:32,000
of the award meetings and also as a

5673
03:33:32,000 --> 03:33:33,359
board you also look

5674
03:33:33,359 --> 03:33:35,840
a little bit to the finances and indeed

5675
03:33:35,840 --> 03:33:37,840
we had a very good

5676
03:33:37,840 --> 03:33:41,680
healthy financial year so keith

5677
03:33:41,680 --> 03:33:46,080
dinesh matt jerry all the teams soon

5678
03:33:46,080 --> 03:33:49,040
thank you very much thank you bennett

5679
03:33:49,040 --> 03:33:49,840
thank you

5680
03:33:49,840 --> 03:33:52,239
pleasure thank you very much we do have

5681
03:33:52,239 --> 03:33:52,960
some more

5682
03:33:52,960 --> 03:33:56,239
so um let me have a look there's some

5683
03:33:56,239 --> 03:33:57,680
comments that came through and there's

5684
03:33:57,680 --> 03:33:57,920
so

5685
03:33:57,920 --> 03:33:59,760
there's another raised hand so i'll come

5686
03:33:59,760 --> 03:34:02,239
to that shortly uh there's uh comments

5687
03:34:02,239 --> 03:34:04,080
um all of them actually saying thank you

5688
03:34:04,080 --> 03:34:05,760
same from me great to be in daylight

5689
03:34:05,760 --> 03:34:07,520
hours so seems like we've done something

5690
03:34:07,520 --> 03:34:08,319
right here

5691
03:34:08,319 --> 03:34:11,359
for a section of the world um also davey

5692
03:34:11,359 --> 03:34:12,800
song says thanks for organizing the

5693
03:34:12,800 --> 03:34:14,000
online meeting especially

5694
03:34:14,000 --> 03:34:16,319
for asia people marco diaz thank you

5695
03:34:16,319 --> 03:34:17,840
guys great work

5696
03:34:17,840 --> 03:34:22,319
um and i'll go to ali reza saleh who

5697
03:34:22,319 --> 03:34:25,359
wants to talk so you may

5698
03:34:25,359 --> 03:34:29,120
talk and meet yourself ali rosa

5699
03:34:29,120 --> 03:34:31,279
yep i just want to say thank you i mean

5700
03:34:31,279 --> 03:34:32,800
that to everyone to out now and that's

5701
03:34:32,800 --> 03:34:33,760
good

5702
03:34:33,760 --> 03:34:36,399
and the dns or i'm having a great work

5703
03:34:36,399 --> 03:34:36,880
and

5704
03:34:36,880 --> 03:34:38,560
i just also have another question i'm

5705
03:34:38,560 --> 03:34:40,640
never i'm i'm original from

5706
03:34:40,640 --> 03:34:42,239
i'm originally from iran i just wanted

5707
03:34:42,239 --> 03:34:44,319
to know that is it anywhere is it any

5708
03:34:44,319 --> 03:34:46,640
possibilities that actually dns or can

5709
03:34:46,640 --> 03:34:47,760
support something that

5710
03:34:47,760 --> 03:34:49,680
on that dot ir or the con i'm on that

5711
03:34:49,680 --> 03:34:51,600
iran this is i'm that

5712
03:34:51,600 --> 03:34:53,439
most i'm the more like i'm that

5713
03:34:53,439 --> 03:34:56,160
administrative question

5714
03:34:56,160 --> 03:34:58,319
thank you yeah i thank thank you for

5715
03:34:58,319 --> 03:34:59,200
your kind words

5716
03:34:59,200 --> 03:35:00,960
i appreciate it and i also understand

5717
03:35:00,960 --> 03:35:02,560
the uh the challenges

5718
03:35:02,560 --> 03:35:05,040
i the short answer is i don't know um

5719
03:35:05,040 --> 03:35:05,600
you know

5720
03:35:05,600 --> 03:35:07,040
we all live in a geopolitical

5721
03:35:07,040 --> 03:35:08,960
environment that we would it would be

5722
03:35:08,960 --> 03:35:10,319
nice if everyone

5723
03:35:10,319 --> 03:35:12,319
was nicer to each other and we didn't

5724
03:35:12,319 --> 03:35:14,560
have to live with all the challenges but

5725
03:35:14,560 --> 03:35:16,720
but yeah you know we we can take that

5726
03:35:16,720 --> 03:35:18,080
discussion offline and we can

5727
03:35:18,080 --> 03:35:19,200
investigate it and

5728
03:35:19,200 --> 03:35:24,160
see what's possible

5729
03:35:24,160 --> 03:35:28,160
thank you thank you

5730
03:35:28,160 --> 03:35:30,720
um okay it doesn't seem that there are

5731
03:35:30,720 --> 03:35:31,680
any more they were all

5732
03:35:31,680 --> 03:35:33,680
comments rather than uh generally they

5733
03:35:33,680 --> 03:35:35,600
were all comments rather than

5734
03:35:35,600 --> 03:35:38,080
questions um but thank you everyone and

5735
03:35:38,080 --> 03:35:39,840
back to you keith

5736
03:35:39,840 --> 03:35:42,640
yeah no thanks daresh um and uh thank

5737
03:35:42,640 --> 03:35:44,160
you everyone for your kind words

5738
03:35:44,160 --> 03:35:47,200
and um i think that we will we will wrap

5739
03:35:47,200 --> 03:35:49,200
things up just just to remind everyone

5740
03:35:49,200 --> 03:35:50,720
we'll be closing the spatial chat room

5741
03:35:50,720 --> 03:35:53,680
is at the same time as his own room so

5742
03:35:53,680 --> 03:35:56,399
i wish you all a good weekend and we

5743
03:35:56,399 --> 03:35:58,640
will

5744
03:35:58,640 --> 03:36:01,519
see you online

5745
03:36:04,840 --> 03:36:07,840
thanks

5746
03:36:26,590 --> 03:36:29,709
[Music]

5747
03:36:31,319 --> 03:36:34,319
uh

