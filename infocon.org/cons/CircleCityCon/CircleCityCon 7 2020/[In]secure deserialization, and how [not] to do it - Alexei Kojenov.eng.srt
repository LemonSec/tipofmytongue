1
00:01:08,280 --> 00:01:12,870
did I get to this particular topic a

2
00:01:10,830 --> 00:01:18,150
couple years ago with one of my previous

3
00:01:12,870 --> 00:01:21,930
employers we were working on a set of

4
00:01:18,150 --> 00:01:25,410
classes online classes and materials on

5
00:01:21,930 --> 00:01:28,740
secure coding and issues with the code

6
00:01:25,410 --> 00:01:31,080
and how to make your code secure and

7
00:01:28,740 --> 00:01:34,320
stuff so they gave me this this

8
00:01:31,080 --> 00:01:36,870
religious the civilization topic to

9
00:01:34,320 --> 00:01:39,630
research and prepare some material and

10
00:01:36,870 --> 00:01:41,550
first I thought well that's kind of I

11
00:01:39,630 --> 00:01:45,089
don't know this organization is not that

12
00:01:41,550 --> 00:01:48,560
exciting IQ is pretty straight forward

13
00:01:45,090 --> 00:01:51,900
but when I started looking into that I

14
00:01:48,560 --> 00:01:54,510
realized that not only this is a very

15
00:01:51,900 --> 00:01:59,280
interesting topic but also it's very

16
00:01:54,510 --> 00:02:01,380
broad and very deep topic and there's a

17
00:01:59,280 --> 00:02:05,670
lot of stuff out there and on the

18
00:02:01,380 --> 00:02:07,949
internet and we if you just want to try

19
00:02:05,670 --> 00:02:11,760
research in yourself you might find

20
00:02:07,950 --> 00:02:14,340
yourself that'd be like you named in a

21
00:02:11,760 --> 00:02:17,370
rabbit hole basically there's just too

22
00:02:14,340 --> 00:02:20,280
much I would say and one of the reasons

23
00:02:17,370 --> 00:02:22,680
big is because this realization is quite

24
00:02:20,280 --> 00:02:25,500
specific to a particular language to a

25
00:02:22,680 --> 00:02:29,640
particular format that you are dealing

26
00:02:25,500 --> 00:02:31,680
with and of course the remediations are

27
00:02:29,640 --> 00:02:35,010
also specific to that particular

28
00:02:31,680 --> 00:02:37,769
language or format a framework that you

29
00:02:35,010 --> 00:02:39,739
were working with so you cannot say that

30
00:02:37,769 --> 00:02:44,580
this realization is very standard topic

31
00:02:39,739 --> 00:02:46,350
that and we and and as soon as you learn

32
00:02:44,580 --> 00:02:50,940
it you know everything about it no I

33
00:02:46,350 --> 00:02:52,500
mean there are common things but there

34
00:02:50,940 --> 00:02:55,290
are also many things that are very

35
00:02:52,500 --> 00:02:57,330
different from one platform to another

36
00:02:55,290 --> 00:03:02,489
from one application to another from one

37
00:02:57,330 --> 00:03:06,050
language to another so today we we're

38
00:03:02,489 --> 00:03:11,370
gonna talk about a couple of really

39
00:03:06,050 --> 00:03:13,320
basic and common things but we're not

40
00:03:11,370 --> 00:03:16,230
gonna go very deep into this subject

41
00:03:13,320 --> 00:03:19,500
the goal of this presentation is kind of

42
00:03:16,230 --> 00:03:21,380
give you a preview of how things can go

43
00:03:19,500 --> 00:03:25,400
really really bad

44
00:03:21,380 --> 00:03:29,000
if the civilization is done wrong so I'm

45
00:03:25,400 --> 00:03:30,910
gonna give you a few demos and I'm I'm

46
00:03:29,000 --> 00:03:34,100
counting on the wow factor

47
00:03:30,910 --> 00:03:36,620
that you'll see them and you will be

48
00:03:34,100 --> 00:03:39,200
like wow that's pretty cool

49
00:03:36,620 --> 00:03:42,410
I'm interested I'm motivated I want to

50
00:03:39,200 --> 00:03:45,880
look more into this so I'm just here to

51
00:03:42,410 --> 00:03:49,220
encourage you to do more with this

52
00:03:45,880 --> 00:03:50,720
material that I'm giving you today of

53
00:03:49,220 --> 00:03:56,270
course we'll talk about how to avoid

54
00:03:50,720 --> 00:03:59,720
issues but yeah so first of all what is

55
00:03:56,270 --> 00:04:04,010
this realisation well imagine you have

56
00:03:59,720 --> 00:04:07,609
two programs that need to exchange data

57
00:04:04,010 --> 00:04:10,429
and this program a on the Left has an

58
00:04:07,610 --> 00:04:12,830
object class memory and it really

59
00:04:10,430 --> 00:04:17,120
depends on that program how that object

60
00:04:12,830 --> 00:04:20,540
is presented in the memory but how can I

61
00:04:17,120 --> 00:04:22,310
give that data to the other program and

62
00:04:20,540 --> 00:04:24,050
the way it's normally done is that

63
00:04:22,310 --> 00:04:26,870
object is converted itself to some kind

64
00:04:24,050 --> 00:04:29,540
of byte stream that can be sent over any

65
00:04:26,870 --> 00:04:32,600
kind of medium could be a network REST

66
00:04:29,540 --> 00:04:34,520
API call some endpoint parameters it

67
00:04:32,600 --> 00:04:36,110
could even be persistent storage so you

68
00:04:34,520 --> 00:04:39,469
send message to yourself you store it

69
00:04:36,110 --> 00:04:41,510
and you retrieve it later so okay the

70
00:04:39,470 --> 00:04:44,600
the program be retrieves that byte

71
00:04:41,510 --> 00:04:48,080
stream and then converts it back to

72
00:04:44,600 --> 00:04:54,290
internal representation of that object

73
00:04:48,080 --> 00:04:56,780
and that's pretty much it the red are on

74
00:04:54,290 --> 00:04:59,450
the left is called serialization in the

75
00:04:56,780 --> 00:05:03,109
red arrow on the right is called this

76
00:04:59,450 --> 00:05:07,130
realization it's a very very simple

77
00:05:03,110 --> 00:05:11,330
concept now in terms of formats and

78
00:05:07,130 --> 00:05:14,030
languages we can say that there are some

79
00:05:11,330 --> 00:05:18,710
binary formats if you do native Java

80
00:05:14,030 --> 00:05:21,849
or.net serialization or Python 3 then it

81
00:05:18,710 --> 00:05:24,320
would not necessarily be human readable

82
00:05:21,850 --> 00:05:29,270
but you also have some human readable

83
00:05:24,320 --> 00:05:32,659
formats and these are like XML JSON I

84
00:05:29,270 --> 00:05:35,029
mean if you think about it XML is some

85
00:05:32,660 --> 00:05:37,819
kind of a structured data

86
00:05:35,029 --> 00:05:40,099
it is human-readable right but you can

87
00:05:37,819 --> 00:05:42,589
imagine that it represents some kind of

88
00:05:40,099 --> 00:05:45,679
an object and you can convert back and

89
00:05:42,589 --> 00:05:48,949
forth if you have the right library the

90
00:05:45,679 --> 00:05:51,789
right software same applies to these

91
00:05:48,949 --> 00:05:56,299
other formats like JSON or any xml-based

92
00:05:51,789 --> 00:05:58,308
formats like like so for example google

93
00:05:56,299 --> 00:06:02,659
protobuf is another good example of

94
00:05:58,309 --> 00:06:04,189
human readable theorization format of

95
00:06:02,659 --> 00:06:07,519
course this is just a very short list

96
00:06:04,189 --> 00:06:12,019
and a bunch of others and you can read

97
00:06:07,519 --> 00:06:14,899
about all of them this Wikipedia page so

98
00:06:12,019 --> 00:06:21,499
let's let's just go and see how these

99
00:06:14,899 --> 00:06:24,169
things work in real life though I have a

100
00:06:21,499 --> 00:06:26,089
very simple java program so this is a

101
00:06:24,169 --> 00:06:29,109
very simple class it's called just a

102
00:06:26,089 --> 00:06:33,079
class it has two members ID and name and

103
00:06:29,110 --> 00:06:36,319
I have a serializer in this réaliser

104
00:06:33,079 --> 00:06:38,929
all in one in one program so to

105
00:06:36,319 --> 00:06:40,610
serialize an object I first of course

106
00:06:38,929 --> 00:06:43,489
need to instantiate that object and then

107
00:06:40,610 --> 00:06:46,429
I do a couple of weird things I create

108
00:06:43,489 --> 00:06:48,078
upstream and another output stream these

109
00:06:46,429 --> 00:06:50,899
different kinds of output streams but

110
00:06:48,079 --> 00:06:53,719
the important thing here for Java is

111
00:06:50,899 --> 00:06:56,509
that object output stream is the one

112
00:06:53,719 --> 00:06:59,479
that you use to serialize natively and

113
00:06:56,509 --> 00:07:02,179
this write object method is the one that

114
00:06:59,479 --> 00:07:05,748
sexual deviancy realization when

115
00:07:02,179 --> 00:07:09,558
idealize I create object input stream

116
00:07:05,749 --> 00:07:13,429
and I call the read object method of

117
00:07:09,559 --> 00:07:17,119
that and that's actually actually

118
00:07:13,429 --> 00:07:20,839
serialization and then I need to cast

119
00:07:17,119 --> 00:07:24,909
the result into the class that I'm

120
00:07:20,839 --> 00:07:24,909
expecting so let's see how it works

121
00:07:25,119 --> 00:07:31,420
we're going to compile it first and then

122
00:07:30,829 --> 00:07:34,060
I ran

123
00:07:31,420 --> 00:07:37,180
Ram it says that the object was

124
00:07:34,060 --> 00:07:42,250
serialized and written to this object

125
00:07:37,180 --> 00:07:44,800
that ser file and then it read the

126
00:07:42,250 --> 00:07:51,220
object from the from that file

127
00:07:44,800 --> 00:07:56,500
what is this file this file is pretty

128
00:07:51,220 --> 00:07:58,960
small but Linux knows about it the file

129
00:07:56,500 --> 00:08:00,850
utility tells me that this is serialized

130
00:07:58,960 --> 00:08:05,080
Java data cool

131
00:08:00,850 --> 00:08:07,900
how does look well it looks like binary

132
00:08:05,080 --> 00:08:11,050
right it's not necessarily a text file

133
00:08:07,900 --> 00:08:13,150
but you can see some things that look

134
00:08:11,050 --> 00:08:15,960
like text you can see the name of the

135
00:08:13,150 --> 00:08:19,479
class here you can see one of the types

136
00:08:15,960 --> 00:08:24,549
string you you can even see the data the

137
00:08:19,480 --> 00:08:28,750
answer string is here the first four

138
00:08:24,550 --> 00:08:29,380
bytes read a CD is your zero zero five

139
00:08:28,750 --> 00:08:32,710
in hex

140
00:08:29,380 --> 00:08:34,299
and if you see that kind of thing in the

141
00:08:32,710 --> 00:08:39,520
wild you can guess that this is

142
00:08:34,299 --> 00:08:43,539
serialized Java data if we base64 this

143
00:08:39,520 --> 00:08:48,750
thing the first five characters read our

144
00:08:43,539 --> 00:08:53,050
o 0 a B I'm highlighting them here and

145
00:08:48,750 --> 00:08:56,380
that's the Java civilised data signature

146
00:08:53,050 --> 00:08:59,229
in in base64 so if you see these things

147
00:08:56,380 --> 00:09:02,530
you can probably guess that you didn't

148
00:08:59,230 --> 00:09:06,370
visualize Java data and that may be

149
00:09:02,530 --> 00:09:12,010
useful now there is a utility it's the

150
00:09:06,370 --> 00:09:16,030
free tool called JD serialize that that

151
00:09:12,010 --> 00:09:20,290
can interpret this binary object so if I

152
00:09:16,030 --> 00:09:23,920
run that it dumps everything it can

153
00:09:20,290 --> 00:09:27,400
gather from this little file so first of

154
00:09:23,920 --> 00:09:31,599
all it gives me the declaration of the

155
00:09:27,400 --> 00:09:34,090
class so it is able to understand what

156
00:09:31,600 --> 00:09:37,630
this classes it has two members as we

157
00:09:34,090 --> 00:09:42,690
saw right integer and a string and then

158
00:09:37,630 --> 00:09:42,689
it dumps the instance of that class

159
00:09:43,380 --> 00:09:50,250
there is ID set to 42 and there is the

160
00:09:46,890 --> 00:09:52,319
name is set to the answer awesome so you

161
00:09:50,250 --> 00:09:54,270
can use this tool to interpret this

162
00:09:52,320 --> 00:09:58,350
binary sterilized data even if you don't

163
00:09:54,270 --> 00:10:01,819
have the source code and you don't

164
00:09:58,350 --> 00:10:04,290
really know how that class was built

165
00:10:01,820 --> 00:10:11,570
okay that's enough with Java let's move

166
00:10:04,290 --> 00:10:17,760
to Python Python is has a native

167
00:10:11,570 --> 00:10:19,500
serializer called pickle and it can

168
00:10:17,760 --> 00:10:22,020
basically sterilize any kinds of any

169
00:10:19,500 --> 00:10:23,910
kind of Python object I believe but in

170
00:10:22,020 --> 00:10:27,750
this case I'm using a simple dictionary

171
00:10:23,910 --> 00:10:29,670
with a couple of items a net name an ID

172
00:10:27,750 --> 00:10:30,960
again but it doesn't have to be a string

173
00:10:29,670 --> 00:10:33,689
doesn't have to be an integer it could

174
00:10:30,960 --> 00:10:36,890
be just an array of bytes I I commented

175
00:10:33,690 --> 00:10:40,590
out for for now but you can just do that

176
00:10:36,890 --> 00:10:44,580
you call pickle dump and it dumps that

177
00:10:40,590 --> 00:10:48,000
data into civilized format you can save

178
00:10:44,580 --> 00:10:49,890
it and then when you read it you just

179
00:10:48,000 --> 00:10:53,960
read from the file and you call pickle

180
00:10:49,890 --> 00:10:53,960
that load let's see how it works

181
00:10:56,450 --> 00:11:08,660
save and read expect these results let's

182
00:11:04,140 --> 00:11:11,340
take a look at this object is your final

183
00:11:08,660 --> 00:11:16,589
well again it's some kind of binary data

184
00:11:11,340 --> 00:11:19,700
but again you can see the familiar stuff

185
00:11:16,590 --> 00:11:22,290
like you know text if if there was a

186
00:11:19,700 --> 00:11:24,390
some text data it will be present in

187
00:11:22,290 --> 00:11:27,209
this file in other words neither Java

188
00:11:24,390 --> 00:11:30,060
nor Python even even though they use

189
00:11:27,210 --> 00:11:33,380
binary formats they don't really do much

190
00:11:30,060 --> 00:11:38,310
with the data itself it's there in those

191
00:11:33,380 --> 00:11:40,189
files as is and you can guess it that

192
00:11:38,310 --> 00:11:48,260
you can probably modify the data and

193
00:11:40,190 --> 00:11:48,260
change it and do whatever you want okay

194
00:11:48,980 --> 00:11:54,470
that's basic stuff let's move to a more

195
00:11:52,700 --> 00:12:02,060
exciting thing and see an actual

196
00:11:54,470 --> 00:12:05,570
application I have a very simple web

197
00:12:02,060 --> 00:12:07,609
application here which has two sections

198
00:12:05,570 --> 00:12:10,310
one is called insecure and the other is

199
00:12:07,610 --> 00:12:12,890
secure and that's for reason so let's go

200
00:12:10,310 --> 00:12:17,239
into the insecure session and I'm I'm

201
00:12:12,890 --> 00:12:19,010
greeted as a guest how does this

202
00:12:17,240 --> 00:12:22,040
application know that I am a guest and

203
00:12:19,010 --> 00:12:24,170
not the administrator well eat the first

204
00:12:22,040 --> 00:12:27,439
time I get into this app it gives me a

205
00:12:24,170 --> 00:12:29,510
session cookie called user and it's set

206
00:12:27,440 --> 00:12:32,270
to this value let's take a look at the

207
00:12:29,510 --> 00:12:41,210
source code this application is written

208
00:12:32,270 --> 00:12:47,600
in nodejs and the session cookie is very

209
00:12:41,210 --> 00:12:51,650
simple object that has a name and a role

210
00:12:47,600 --> 00:12:55,850
and the guest could the guest cookie is

211
00:12:51,650 --> 00:12:58,730
set to guest guest obviously right so

212
00:12:55,850 --> 00:13:02,330
what is this well this looks to me like

213
00:12:58,730 --> 00:13:05,540
base64 encoded JSON object right if you

214
00:13:02,330 --> 00:13:08,890
see the the characters UI at the

215
00:13:05,540 --> 00:13:12,740
beginning of the data in base64 that's

216
00:13:08,890 --> 00:13:15,710
opening brace most of the time and you

217
00:13:12,740 --> 00:13:22,190
can pretty much guess that this is JSON

218
00:13:15,710 --> 00:13:23,990
data let's take a look at that I need to

219
00:13:22,190 --> 00:13:28,310
replace these build characters with the

220
00:13:23,990 --> 00:13:34,870
actual characters and decode it and yep

221
00:13:28,310 --> 00:13:38,119
expectedly it decoded to JSON cool now

222
00:13:34,870 --> 00:13:40,640
well the role says guest if I look at

223
00:13:38,120 --> 00:13:44,000
the source code I see that the source

224
00:13:40,640 --> 00:13:47,439
code is checking whether the role is

225
00:13:44,000 --> 00:13:47,440
admin so can I just

226
00:13:52,660 --> 00:13:54,719
you

227
00:15:07,300 --> 00:15:15,740
I'd Alexi you're going to continue yeah

228
00:15:11,230 --> 00:15:17,630
okay good thank you all right so we send

229
00:15:15,740 --> 00:15:19,970
this new cookie to the application and

230
00:15:17,630 --> 00:15:23,240
now we agreed it as administrator and

231
00:15:19,970 --> 00:15:26,450
that was like this was really simple

232
00:15:23,240 --> 00:15:29,029
right and you might be wondering who who

233
00:15:26,450 --> 00:15:33,380
is doing this but you will be surprised

234
00:15:29,029 --> 00:15:36,380
and if you have a career in security you

235
00:15:33,380 --> 00:15:38,209
see all kinds of weird things and stuff

236
00:15:36,380 --> 00:15:41,689
like that is not that uncommon

237
00:15:38,209 --> 00:15:44,420
so people basically just trust on what

238
00:15:41,690 --> 00:15:47,180
they sent to the user and expect you to

239
00:15:44,420 --> 00:15:52,459
get it back without any changes right

240
00:15:47,180 --> 00:15:53,870
and that's because they we don't a lot

241
00:15:52,459 --> 00:15:56,029
of times we don't care about integrity

242
00:15:53,870 --> 00:16:00,290
and when there is no integrity there's

243
00:15:56,029 --> 00:16:03,080
no security many times so how can we

244
00:16:00,290 --> 00:16:05,870
need how can we make sure that the data

245
00:16:03,080 --> 00:16:07,070
that we get back is valid it has not

246
00:16:05,870 --> 00:16:08,570
been changed has not been tampered with

247
00:16:07,070 --> 00:16:10,190
well there are ways to do it

248
00:16:08,570 --> 00:16:13,430
like for example digital signature or

249
00:16:10,190 --> 00:16:16,250
HVAC now let's see let's take a look at

250
00:16:13,430 --> 00:16:20,479
the secure set section of this

251
00:16:16,250 --> 00:16:22,790
application and I'm sorry my neighbor

252
00:16:20,480 --> 00:16:27,440
decided to mow the lawn I hope it's not

253
00:16:22,790 --> 00:16:31,420
too noisy but let me let me go and shut

254
00:16:27,440 --> 00:16:31,420
the window sorry for the interruption

255
00:16:43,839 --> 00:16:51,640
okay I'm back so let's go to the secure

256
00:16:48,589 --> 00:16:55,399
session section and we've got another

257
00:16:51,640 --> 00:16:57,529
user session cookie and this time it

258
00:16:55,399 --> 00:17:00,860
kind of looks the same but it's much

259
00:16:57,529 --> 00:17:03,620
longer so why is this so long and if we

260
00:17:00,860 --> 00:17:05,959
look at the source code we see that we

261
00:17:03,620 --> 00:17:08,900
do some special thing here when we

262
00:17:05,959 --> 00:17:12,350
generate our cookie not only we put the

263
00:17:08,900 --> 00:17:14,600
JSON in it but we also add a mesh Mac

264
00:17:12,349 --> 00:17:17,209
and H Mac is a cryptographic thing that

265
00:17:14,599 --> 00:17:20,659
that's based on

266
00:17:17,210 --> 00:17:23,090
a key a symmetric key and here is my key

267
00:17:20,660 --> 00:17:24,620
which is super secret and super secure

268
00:17:23,089 --> 00:17:27,459
no not really

269
00:17:24,619 --> 00:17:31,729
it's it's been expelled so don't use it

270
00:17:27,460 --> 00:17:34,030
but we rely on this well we assume that

271
00:17:31,730 --> 00:17:36,530
this key is not known right it's only

272
00:17:34,030 --> 00:17:38,480
well and the other thing it should not

273
00:17:36,530 --> 00:17:40,520
be stored in the source code like it is

274
00:17:38,480 --> 00:17:41,690
here this is not a very good practice it

275
00:17:40,520 --> 00:17:43,460
should be stored in like maybe

276
00:17:41,690 --> 00:17:47,560
environment variable or some kind of

277
00:17:43,460 --> 00:17:51,020
secret storage but that's a different

278
00:17:47,560 --> 00:17:54,169
that's a subject for a different talk so

279
00:17:51,020 --> 00:17:55,730
anyway we add that H Mac and when we

280
00:17:54,170 --> 00:18:00,680
receive the cookie back we've verified

281
00:17:55,730 --> 00:18:04,900
and validated now if I try to hack this

282
00:18:00,680 --> 00:18:09,980
and and replace that cookie value with

283
00:18:04,900 --> 00:18:12,530
my first one and try to send it well I

284
00:18:09,980 --> 00:18:16,730
get unauthorized because that HTML does

285
00:18:12,530 --> 00:18:19,370
not validate so that's the kind of rule

286
00:18:16,730 --> 00:18:21,590
of thumb that you need to validate the

287
00:18:19,370 --> 00:18:23,419
integrity of your serialized data I mean

288
00:18:21,590 --> 00:18:25,760
this is very very important with this

289
00:18:23,420 --> 00:18:28,220
civilization because a lot of times you

290
00:18:25,760 --> 00:18:31,129
do not expect your users to tamper with

291
00:18:28,220 --> 00:18:33,800
sterilized data and you need to ensure

292
00:18:31,130 --> 00:18:36,080
that they did not well unless your

293
00:18:33,800 --> 00:18:39,320
application is designed to accept

294
00:18:36,080 --> 00:18:40,970
untrusted input in which case yeah you

295
00:18:39,320 --> 00:18:45,080
have to accept that but in most cases

296
00:18:40,970 --> 00:18:47,210
you don't alright let's take a look at

297
00:18:45,080 --> 00:18:53,000
another example and this time we're

298
00:18:47,210 --> 00:18:56,230
gonna see a java application I have my

299
00:18:53,000 --> 00:19:01,580
mcat server here and a trans this

300
00:18:56,230 --> 00:19:05,180
application that that deals with

301
00:19:01,580 --> 00:19:11,389
sterilized data well let's say your

302
00:19:05,180 --> 00:19:14,900
interpreter and you you you designed a

303
00:19:11,390 --> 00:19:16,730
cool device and you want them you want

304
00:19:14,900 --> 00:19:21,680
that desire to be manufactured and sold

305
00:19:16,730 --> 00:19:25,190
so you go and find a factory that that

306
00:19:21,680 --> 00:19:27,380
makes anything that you want let's say

307
00:19:25,190 --> 00:19:30,230
you designed an iPhone that's a new

308
00:19:27,380 --> 00:19:30,890
invention and you order a million

309
00:19:30,230 --> 00:19:34,400
iPhones

310
00:19:30,890 --> 00:19:38,660
that factory they they manufactured them

311
00:19:34,400 --> 00:19:41,360
and they sent the package to you in this

312
00:19:38,660 --> 00:19:45,500
file well let's let's imagine this real

313
00:19:41,360 --> 00:19:48,709
package anyway so you you got that

314
00:19:45,500 --> 00:19:51,650
package and then you need to give it to

315
00:19:48,710 --> 00:19:54,650
the store you you send those devices to

316
00:19:51,650 --> 00:19:57,470
the store so they could be sold all

317
00:19:54,650 --> 00:20:00,110
right you give it to the store and they

318
00:19:57,470 --> 00:20:04,400
have just sold your 1 million iPhones

319
00:20:00,110 --> 00:20:07,219
and you got the profit cool how does

320
00:20:04,400 --> 00:20:14,710
this application work well first of all

321
00:20:07,220 --> 00:20:17,090
we have this the class called items and

322
00:20:14,710 --> 00:20:19,280
it's well of course it's a proof of

323
00:20:17,090 --> 00:20:21,020
concept so it only has 9 min Kuantan a

324
00:20:19,280 --> 00:20:23,480
min quantity and nothing else

325
00:20:21,020 --> 00:20:26,090
it's all right and our store is

326
00:20:23,480 --> 00:20:28,100
receiving that object and is

327
00:20:26,090 --> 00:20:31,399
deserializing it you could have guessed

328
00:20:28,100 --> 00:20:34,040
that we generally sterilize data we just

329
00:20:31,400 --> 00:20:37,820
call this read object on whatever we

330
00:20:34,040 --> 00:20:40,809
receive through that web interface okay

331
00:20:37,820 --> 00:20:45,500
and this is super safe of course well no

332
00:20:40,809 --> 00:20:48,830
let's see how it is not safe let's say

333
00:20:45,500 --> 00:20:52,669
the factory that we contacted is a

334
00:20:48,830 --> 00:20:56,689
malicious one and instead of our items

335
00:20:52,669 --> 00:21:00,530
it gives us some various things and I'm

336
00:20:56,690 --> 00:21:03,230
gonna save them all on my drive and try

337
00:21:00,530 --> 00:21:05,750
one after another so first one is string

338
00:21:03,230 --> 00:21:07,940
the second one is some kind of 64 you

339
00:21:05,750 --> 00:21:10,340
buy stuff I'm not sure I got 64

340
00:21:07,940 --> 00:21:14,750
gigabytes but you'll see and the third

341
00:21:10,340 --> 00:21:19,418
one is CPU bomb well first of all let's

342
00:21:14,750 --> 00:21:22,130
take a look at those files on the disk

343
00:21:19,419 --> 00:21:24,380
all of them are serialized Java data

344
00:21:22,130 --> 00:21:28,160
including our original iPhones that I

345
00:21:24,380 --> 00:21:32,720
see are the legit package and we also

346
00:21:28,160 --> 00:21:36,220
have some other things so let's take a

347
00:21:32,720 --> 00:21:39,080
look and try to sell this string well

348
00:21:36,220 --> 00:21:41,210
string does not sell

349
00:21:39,080 --> 00:21:44,269
and we got an exception and the

350
00:21:41,210 --> 00:21:47,240
exception says that java.lang strain

351
00:21:44,269 --> 00:21:49,399
cannot be cast to class items well of

352
00:21:47,240 --> 00:21:54,289
course we expect items and we get a

353
00:21:49,399 --> 00:21:58,158
string that's not good and well we don't

354
00:21:54,289 --> 00:22:00,919
handle the exception well but on the

355
00:21:58,159 --> 00:22:05,000
other hand we don't sell it which is

356
00:22:00,919 --> 00:22:08,330
good ok but now let's take a look at

357
00:22:05,000 --> 00:22:11,600
this exception message one more time it

358
00:22:08,330 --> 00:22:16,549
says cannot be cast well what does it

359
00:22:11,600 --> 00:22:19,279
mean well that means that tells me that

360
00:22:16,549 --> 00:22:20,210
I guess the object was actually

361
00:22:19,279 --> 00:22:23,000
deserialized

362
00:22:20,210 --> 00:22:25,250
and then it failed on the next step

363
00:22:23,000 --> 00:22:31,730
which was casting so let's take a look

364
00:22:25,250 --> 00:22:35,990
at this line 27 line 27 is our read

365
00:22:31,730 --> 00:22:39,529
object so read object actually does

366
00:22:35,990 --> 00:22:42,620
return despite the fact that the object

367
00:22:39,529 --> 00:22:46,240
that we got is not something that we

368
00:22:42,620 --> 00:22:49,489
expect and then it is cast to this

369
00:22:46,240 --> 00:22:52,220
object that we did expect and this is

370
00:22:49,490 --> 00:22:54,500
where it fails so the bottom line is

371
00:22:52,220 --> 00:22:58,700
this serialization did happen did occur

372
00:22:54,500 --> 00:23:01,639
and we felt somewhere else well if

373
00:22:58,700 --> 00:23:04,220
things can go really wrong during the

374
00:23:01,639 --> 00:23:07,639
serialization itself then there is

375
00:23:04,220 --> 00:23:09,799
nothing here that will prevent it now

376
00:23:07,639 --> 00:23:13,580
let's try a couple of these other things

377
00:23:09,799 --> 00:23:16,389
that we got the other the next one I'm

378
00:23:13,580 --> 00:23:19,580
going to try is this 64 gigabyte object

379
00:23:16,389 --> 00:23:22,870
as you can see on the desk it's not

380
00:23:19,580 --> 00:23:27,168
really 64 gigabyte it's only 114 bytes

381
00:23:22,870 --> 00:23:29,658
but what happens is when I try to sell

382
00:23:27,169 --> 00:23:32,960
it I get this connection was reset which

383
00:23:29,659 --> 00:23:34,610
kind of suggests that the thread that

384
00:23:32,960 --> 00:23:38,269
was handling this request

385
00:23:34,610 --> 00:23:40,279
died and it did die because this

386
00:23:38,269 --> 00:23:43,340
particular object causes the Java

387
00:23:40,279 --> 00:23:45,620
Virtual Machine when this realized when

388
00:23:43,340 --> 00:23:47,600
the object is a sterilised to allocate

389
00:23:45,620 --> 00:23:50,059
64 gigabytes of ram and i don't have

390
00:23:47,600 --> 00:23:53,419
that much memory on this little virtual

391
00:23:50,059 --> 00:23:57,450
machine where this application is run

392
00:23:53,420 --> 00:24:00,960
all right that's the denial of service

393
00:23:57,450 --> 00:24:05,730
of some kind let's try this other thing

394
00:24:00,960 --> 00:24:10,380
CPU bomb well this one is interesting

395
00:24:05,730 --> 00:24:14,210
I pushed the cell button and it doesn't

396
00:24:10,380 --> 00:24:18,240
return and it's sitting here spinning

397
00:24:14,210 --> 00:24:21,540
this little thingy and never comes back

398
00:24:18,240 --> 00:24:23,940
what so what's happening well if I go to

399
00:24:21,540 --> 00:24:26,700
this virtual machine where this Tomcat

400
00:24:23,940 --> 00:24:30,410
server is running and I look at the

401
00:24:26,700 --> 00:24:33,480
processes I see that on the very top

402
00:24:30,410 --> 00:24:36,950
with hundred percent CPU utilization is

403
00:24:33,480 --> 00:24:39,950
a java application so what is this

404
00:24:36,950 --> 00:24:39,950
process

405
00:24:52,950 --> 00:24:55,010
you

406
00:27:08,889 --> 00:27:16,149
so I have to really get rid of this

407
00:27:12,080 --> 00:27:16,149
process and restart the entire a tomcat

408
00:27:26,980 --> 00:27:38,870
here it is let's wait a second for it to

409
00:27:33,409 --> 00:27:42,769
come back and its back well the lesson

410
00:27:38,870 --> 00:27:45,729
here is you can die by this utilization

411
00:27:42,769 --> 00:27:48,919
this little object on the right is

412
00:27:45,730 --> 00:27:52,700
trying to consume 64 gigabyte of of RAM

413
00:27:48,919 --> 00:27:55,610
and that's not good and the one that we

414
00:27:52,700 --> 00:27:57,950
just saw this is the source code for it

415
00:27:55,610 --> 00:28:00,168
and I borrowed it I didn't write not

416
00:27:57,950 --> 00:28:02,809
write it so I don't take credit but it's

417
00:28:00,169 --> 00:28:05,510
it's some kind of a tree structure it's

418
00:28:02,809 --> 00:28:08,928
finite it's 100 levels deep it's using

419
00:28:05,510 --> 00:28:14,210
hash sets creates two hash sets at each

420
00:28:08,929 --> 00:28:16,279
iteration and for some reason Java

421
00:28:14,210 --> 00:28:18,350
Virtual Machine is having a big issue

422
00:28:16,279 --> 00:28:21,320
with this when it's trying this to dis

423
00:28:18,350 --> 00:28:24,289
relies this kind of structure it never

424
00:28:21,320 --> 00:28:25,668
returns and it's a known issue and I

425
00:28:24,289 --> 00:28:30,019
don't believe it's gonna be fixed it's

426
00:28:25,669 --> 00:28:31,460
just the way it is but it'll be like I

427
00:28:30,019 --> 00:28:33,679
said it's gonna be sitting there and

428
00:28:31,460 --> 00:28:39,830
spinning all your CPU and never

429
00:28:33,679 --> 00:28:43,010
returning okay how do we protect from

430
00:28:39,830 --> 00:28:47,480
these kind of things well the answer in

431
00:28:43,010 --> 00:28:52,460
Java is class whitelisting now let's

432
00:28:47,480 --> 00:28:56,419
take a look how that's done we have our

433
00:28:52,460 --> 00:28:59,809
secure store now let's try to sell this

434
00:28:56,419 --> 00:29:02,539
64 gigabyte object and we get an

435
00:28:59,809 --> 00:29:05,289
exception we get a nice error message

436
00:29:02,539 --> 00:29:10,250
saying that the store does not accept

437
00:29:05,289 --> 00:29:11,960
this whatever right the stores normally

438
00:29:10,250 --> 00:29:13,580
say we don't accept Visa or American

439
00:29:11,960 --> 00:29:16,399
Express but this does not accept this

440
00:29:13,580 --> 00:29:20,269
object well let's try it just sell

441
00:29:16,399 --> 00:29:21,830
CPU bomb and expectedly it was able to

442
00:29:20,269 --> 00:29:25,190
detect that it's a hash

443
00:29:21,830 --> 00:29:27,470
not the items and was not able to sell

444
00:29:25,190 --> 00:29:30,410
how is that implemented let's take a

445
00:29:27,470 --> 00:29:33,830
look at the Sakura star instead of the

446
00:29:30,410 --> 00:29:36,980
regular object input stream we use our

447
00:29:33,830 --> 00:29:40,220
own method our own class save object

448
00:29:36,980 --> 00:29:43,700
input stream which is a subclass of the

449
00:29:40,220 --> 00:29:46,280
standard class the only thing that's

450
00:29:43,700 --> 00:29:48,220
different here is we override

451
00:29:46,280 --> 00:29:51,440
one of the methods called result class

452
00:29:48,220 --> 00:29:55,460
the resolved class method is called

453
00:29:51,440 --> 00:29:58,040
every time the the Java deserialize err

454
00:29:55,460 --> 00:30:00,470
is seen an object that it needs to dis

455
00:29:58,040 --> 00:30:03,050
realize and it's called before the

456
00:30:00,470 --> 00:30:05,990
actual distillation and in this method

457
00:30:03,050 --> 00:30:08,740
you can put all your checks in in this

458
00:30:05,990 --> 00:30:15,320
particular case I'm checking whether the

459
00:30:08,740 --> 00:30:18,320
the name of the name of the input of the

460
00:30:15,320 --> 00:30:22,040
of the class in the input matches the

461
00:30:18,320 --> 00:30:24,919
name of the class that I expect and if

462
00:30:22,040 --> 00:30:27,530
it's not matching then I just throw a

463
00:30:24,920 --> 00:30:32,210
nice exception and then I catch it and I

464
00:30:27,530 --> 00:30:34,070
print that error message but the the

465
00:30:32,210 --> 00:30:36,320
cool thing here is this realization

466
00:30:34,070 --> 00:30:37,340
never happens for the things that I do

467
00:30:36,320 --> 00:30:41,300
not expect I

468
00:30:37,340 --> 00:30:52,129
this will only dis realize the class

469
00:30:41,300 --> 00:30:53,870
that I want all right yeah we saw my

470
00:30:52,130 --> 00:30:55,640
still knowledge service stuff but how

471
00:30:53,870 --> 00:30:58,389
about code execution well apparently

472
00:30:55,640 --> 00:31:01,790
this realization can ultimately lead to

473
00:30:58,390 --> 00:31:04,220
remote code execution and you might have

474
00:31:01,790 --> 00:31:08,360
seen that in the news and let's see it

475
00:31:04,220 --> 00:31:11,510
in practice I have another application

476
00:31:08,360 --> 00:31:16,010
here this time it's written Python it's

477
00:31:11,510 --> 00:31:18,260
a very simple example with visualization

478
00:31:16,010 --> 00:31:20,810
in Python achievement remote code

479
00:31:18,260 --> 00:31:26,030
execution is trivial with the

480
00:31:20,810 --> 00:31:29,950
serialization the this is my application

481
00:31:26,030 --> 00:31:33,879
it's flask app gives me a session cookie

482
00:31:29,950 --> 00:31:33,880
called hi session

483
00:31:34,190 --> 00:31:41,600
this is basically serialized by some

484
00:31:36,800 --> 00:31:43,280
object it has a couple of items user and

485
00:31:41,600 --> 00:31:46,790
access similar to what we saw before

486
00:31:43,280 --> 00:31:48,920
with that nodejs app I mean almost I

487
00:31:46,790 --> 00:31:51,590
don't have any access whatever I'm not

488
00:31:48,920 --> 00:31:54,260
interested in escalating my privileges

489
00:31:51,590 --> 00:31:56,209
at this point I am interested at running

490
00:31:54,260 --> 00:32:01,700
the code all right

491
00:31:56,210 --> 00:32:05,420
so apparently with pickle if you

492
00:32:01,700 --> 00:32:11,060
serialize any object that has a method

493
00:32:05,420 --> 00:32:12,830
called that well it's a class and that

494
00:32:11,060 --> 00:32:15,669
class has a method called underscore

495
00:32:12,830 --> 00:32:19,449
score reduce underscore score this

496
00:32:15,670 --> 00:32:22,610
method and it's code will be packed with

497
00:32:19,450 --> 00:32:26,210
the or serialized data and it will get

498
00:32:22,610 --> 00:32:28,129
executed during this realization Wow

499
00:32:26,210 --> 00:32:31,610
that's pretty awesome so we can just

500
00:32:28,130 --> 00:32:34,550
send our payload to the DC réaliser in

501
00:32:31,610 --> 00:32:39,439
this case I am going to run a net cat

502
00:32:34,550 --> 00:32:43,669
command with the reverse shell before I

503
00:32:39,440 --> 00:32:48,560
do that let me start netcat listener and

504
00:32:43,670 --> 00:32:50,540
then I need to generate my payload here

505
00:32:48,560 --> 00:32:54,470
is my payload which is basically four

506
00:32:50,540 --> 00:32:58,670
encoded Python object I replace my

507
00:32:54,470 --> 00:33:01,340
cookie and now I need to refresh so that

508
00:32:58,670 --> 00:33:03,020
cookie is sent to the server and I

509
00:33:01,340 --> 00:33:09,679
immediately got the connection in my

510
00:33:03,020 --> 00:33:14,090
netcat listener and I'm route where am I

511
00:33:09,680 --> 00:33:16,790
I mean this is this is a reverse shell

512
00:33:14,090 --> 00:33:23,750
to this machine and I can do whatever I

513
00:33:16,790 --> 00:33:27,379
want the lesson here is don't really use

514
00:33:23,750 --> 00:33:30,050
Python native sterilizer unless you just

515
00:33:27,380 --> 00:33:32,170
deal with your own data if you ever

516
00:33:30,050 --> 00:33:34,840
accept something that you don't trust

517
00:33:32,170 --> 00:33:40,430
this is not the right thing to do

518
00:33:34,840 --> 00:33:42,000
because bad things can happen

519
00:33:40,430 --> 00:33:44,710
really

520
00:33:42,000 --> 00:33:46,510
all right let's switch gears a little

521
00:33:44,710 --> 00:33:48,220
bit and take a look at some prominent

522
00:33:46,510 --> 00:33:50,799
dissertation vulnerabilities over the

523
00:33:48,220 --> 00:33:52,960
last few years first one I'd like to

524
00:33:50,799 --> 00:33:55,360
talk about is the punchy Commons

525
00:33:52,960 --> 00:34:00,269
collections remote code execution let's

526
00:33:55,360 --> 00:34:05,049
say you have a web application that

527
00:34:00,269 --> 00:34:08,168
accepts serialized data okay and this

528
00:34:05,049 --> 00:34:09,879
application normally any application

529
00:34:08,168 --> 00:34:11,408
would use some kind of libraries you

530
00:34:09,879 --> 00:34:13,980
don't write all the code yourself you

531
00:34:11,409 --> 00:34:17,649
would probably reuse some of the code

532
00:34:13,980 --> 00:34:19,690
and you can use library X library Y Z

533
00:34:17,649 --> 00:34:22,230
whatever and one of those libraries

534
00:34:19,690 --> 00:34:26,290
happens to be Apache Commons library

535
00:34:22,230 --> 00:34:28,719
namely Apache Commons collections but

536
00:34:26,290 --> 00:34:31,060
the interesting thing here is you don't

537
00:34:28,719 --> 00:34:34,049
even have to use anything from the

538
00:34:31,060 --> 00:34:38,379
Apache Commons it just has to be on your

539
00:34:34,050 --> 00:34:40,839
class path meaning it's it's seen and

540
00:34:38,379 --> 00:34:43,330
resolvable from this web application

541
00:34:40,839 --> 00:34:45,369
okay so it's on your class path alright

542
00:34:43,330 --> 00:34:48,819
and your web application accepts

543
00:34:45,369 --> 00:34:52,089
serialized data cool what what can

544
00:34:48,820 --> 00:34:54,940
happen is an attacker can send you a

545
00:34:52,089 --> 00:34:59,070
serialized object with so-called Apache

546
00:34:54,940 --> 00:35:02,500
Commons gadgets and this is a very

547
00:34:59,070 --> 00:35:04,000
interesting a deep topic subject for a

548
00:35:02,500 --> 00:35:05,560
whole different talk and there are and

549
00:35:04,000 --> 00:35:08,440
there are talks on the Internet if

550
00:35:05,560 --> 00:35:11,049
you're interested in articles we won't

551
00:35:08,440 --> 00:35:16,000
go into any details but these gadgets

552
00:35:11,050 --> 00:35:21,550
would ultimately get you into trouble

553
00:35:16,000 --> 00:35:25,180
and on the only on this left-hand side

554
00:35:21,550 --> 00:35:26,349
is kind of like a sample call stack for

555
00:35:25,180 --> 00:35:28,690
one of these gadgets

556
00:35:26,349 --> 00:35:30,910
you can see that initially we call this

557
00:35:28,690 --> 00:35:33,130
familiar read object and then it calls

558
00:35:30,910 --> 00:35:36,819
the read object of a particular class

559
00:35:33,130 --> 00:35:40,390
and then it goes into some weird stuff

560
00:35:36,820 --> 00:35:41,980
like involved get transform the ones

561
00:35:40,390 --> 00:35:44,859
that are highlighted in bold are the

562
00:35:41,980 --> 00:35:47,890
ones from the Apache Commons library but

563
00:35:44,859 --> 00:35:50,470
ultimately it gets runtime and

564
00:35:47,890 --> 00:35:53,560
ultimately it gets runtime that exact

565
00:35:50,470 --> 00:35:55,359
meaning it executes some code and in

566
00:35:53,560 --> 00:36:00,580
this case it will execute code with you

567
00:35:55,360 --> 00:36:10,230
supplied data really really dangerous

568
00:36:00,580 --> 00:36:13,660
stuff now again is the problem here with

569
00:36:10,230 --> 00:36:17,110
the Apache Commons library that can do

570
00:36:13,660 --> 00:36:22,359
this kind of stuff well many people

571
00:36:17,110 --> 00:36:24,340
think it is but most people think and I

572
00:36:22,360 --> 00:36:26,620
agree with them that the problem is with

573
00:36:24,340 --> 00:36:30,190
your web application that does not

574
00:36:26,620 --> 00:36:33,790
whitelist so Apache Commons do whatever

575
00:36:30,190 --> 00:36:38,170
it wants to do but it is your

576
00:36:33,790 --> 00:36:42,490
responsibility not to pass bad things to

577
00:36:38,170 --> 00:36:45,280
that library so that five years ago when

578
00:36:42,490 --> 00:36:48,100
this was huge in the news and many big

579
00:36:45,280 --> 00:36:50,680
vendors and their applications got

580
00:36:48,100 --> 00:36:54,759
affected by this the Apache Commons

581
00:36:50,680 --> 00:36:58,359
project did make effects or a few fixes

582
00:36:54,760 --> 00:37:01,830
in the library that would prevent things

583
00:36:58,360 --> 00:37:06,430
like this but the issue was not solved

584
00:37:01,830 --> 00:37:08,590
if your web application continues to do

585
00:37:06,430 --> 00:37:11,379
the dangerous stuff like accepting input

586
00:37:08,590 --> 00:37:14,770
that you should not accept that things

587
00:37:11,380 --> 00:37:18,130
can happen because guess what any one of

588
00:37:14,770 --> 00:37:20,350
these libraries even though maybe Apache

589
00:37:18,130 --> 00:37:21,790
Commons is completely fixed but as a

590
00:37:20,350 --> 00:37:24,250
matter of fact it's not there are still

591
00:37:21,790 --> 00:37:29,770
some methods that you can build the

592
00:37:24,250 --> 00:37:31,210
gadget chains on but it could be any

593
00:37:29,770 --> 00:37:33,160
other library with those dangerous

594
00:37:31,210 --> 00:37:35,980
methods while dangerous I'm saying in

595
00:37:33,160 --> 00:37:38,259
courts because I mean they're not it's

596
00:37:35,980 --> 00:37:42,460
dangerous only if you invoke them

597
00:37:38,260 --> 00:37:45,990
incorrectly so the bottom line is to fix

598
00:37:42,460 --> 00:37:52,420
your application well I want to give you

599
00:37:45,990 --> 00:37:57,459
a demo on that so let's go back to your

600
00:37:52,420 --> 00:38:00,510
factory right and see if we can get

601
00:37:57,460 --> 00:38:00,510
remote core exact

602
00:38:02,089 --> 00:38:07,740
I'm on this so this is the box where

603
00:38:05,280 --> 00:38:12,030
this application is running or my comm

604
00:38:07,740 --> 00:38:15,290
cat is running this is my application

605
00:38:12,030 --> 00:38:18,089
stuff and it also has this live

606
00:38:15,290 --> 00:38:22,380
directory and in the live directory I

607
00:38:18,089 --> 00:38:24,540
have a few Apache Commons jars now again

608
00:38:22,380 --> 00:38:26,640
my application is not using any of these

609
00:38:24,540 --> 00:38:30,839
they just happen to be there for

610
00:38:26,640 --> 00:38:34,109
whatever reason right but the light is

611
00:38:30,839 --> 00:38:36,990
on the class path by default so my

612
00:38:34,109 --> 00:38:49,259
application can resolve all the symbols

613
00:38:36,990 --> 00:38:51,240
from from these libraries now of course

614
00:38:49,260 --> 00:38:53,369
I'm not gonna write my own exploit I'm

615
00:38:51,240 --> 00:38:56,250
gonna use a tool called Weiss or serial

616
00:38:53,369 --> 00:39:00,990
it's awesome awesome awesome tool that

617
00:38:56,250 --> 00:39:03,390
has a bunch of exploits that you can use

618
00:39:00,990 --> 00:39:07,200
and one of them is called common beam

619
00:39:03,390 --> 00:39:11,700
utils one so it's using this beam utils

620
00:39:07,200 --> 00:39:14,578
library and I'm gonna give it a command

621
00:39:11,700 --> 00:39:17,868
to execute a reverse shell and store the

622
00:39:14,579 --> 00:39:24,140
result in this ref shell that s er again

623
00:39:17,869 --> 00:39:33,300
this is just serialized data right now

624
00:39:24,140 --> 00:39:36,839
let's go and run our listener and try to

625
00:39:33,300 --> 00:39:38,970
sir try to sell the reverse shell that

626
00:39:36,839 --> 00:39:41,970
sounds awesome whoo we got a huge

627
00:39:38,970 --> 00:39:44,910
exception right which is kind of good

628
00:39:41,970 --> 00:39:48,598
thing but that's too late we already

629
00:39:44,910 --> 00:39:53,810
have our reverse shell we are route

630
00:39:48,599 --> 00:39:56,880
again and we can do whatever we want

631
00:39:53,810 --> 00:39:59,460
now what's that difficult to do no I

632
00:39:56,880 --> 00:40:02,430
mean I just had to run this one command

633
00:39:59,460 --> 00:40:05,160
to generate the exploit and I had to go

634
00:40:02,430 --> 00:40:07,500
to this web interface to send it so

635
00:40:05,160 --> 00:40:13,020
anybody can do it any script Kitty can

636
00:40:07,500 --> 00:40:15,460
do it okay another vulnerability a few

637
00:40:13,020 --> 00:40:20,200
years ago was an Apache Stratos plug

638
00:40:15,460 --> 00:40:25,160
this time it's XML format not native

639
00:40:20,200 --> 00:40:27,859
Java serializer but in this this is this

640
00:40:25,160 --> 00:40:31,038
is an actual exploit this is from a post

641
00:40:27,859 --> 00:40:36,140
request that sends the payload in

642
00:40:31,039 --> 00:40:38,990
wrapped and that civilized XML file and

643
00:40:36,140 --> 00:40:40,578
you can see some weird stuff here like

644
00:40:38,990 --> 00:40:42,828
you can see some shells and whatever

645
00:40:40,579 --> 00:40:47,869
this looks like a river shell and a

646
00:40:42,829 --> 00:40:49,700
matter of fact it is well basically we

647
00:40:47,869 --> 00:40:51,769
have some flour plain Java code with an

648
00:40:49,700 --> 00:40:54,410
XML that's get interpreted and your

649
00:40:51,769 --> 00:40:56,990
initialization it gets built into and

650
00:40:54,410 --> 00:41:01,460
execute it as Java code another one

651
00:40:56,990 --> 00:41:04,008
Oracle WebLogic WebLogic same kind of

652
00:41:01,460 --> 00:41:06,799
stuff this time it's soap which is

653
00:41:04,009 --> 00:41:10,400
another xml-based formats and we also

654
00:41:06,799 --> 00:41:12,769
see some plain Java stuff like process

655
00:41:10,400 --> 00:41:16,180
builder and string that we passed you

656
00:41:12,769 --> 00:41:19,640
executed well what can go wrong right

657
00:41:16,180 --> 00:41:22,339
okay I when I when I was looking at this

658
00:41:19,640 --> 00:41:24,230
I wanted to try it myself and see how

659
00:41:22,339 --> 00:41:27,170
the actual exploit looks to take this

660
00:41:24,230 --> 00:41:29,450
screenshot and I looked at a Metasploit

661
00:41:27,170 --> 00:41:34,190
framework and I noticed that starring

662
00:41:29,450 --> 00:41:40,189
with 2015 Oracle WebLogic has a

663
00:41:34,190 --> 00:41:44,420
dissertation RC once a year 15 16 17 18

664
00:41:40,190 --> 00:41:45,859
and 19 so if you can see me the trend

665
00:41:44,420 --> 00:41:49,490
that we should see another one based

666
00:41:45,859 --> 00:41:49,880
here but I hope that Oracle finally got

667
00:41:49,490 --> 00:41:53,660
it right

668
00:41:49,880 --> 00:41:55,460
and fixed all these kind of issues but

669
00:41:53,660 --> 00:41:57,379
what it tells me is that these

670
00:41:55,460 --> 00:42:00,200
dissertation issues are really difficult

671
00:41:57,380 --> 00:42:04,359
to deal with and you can miss a lot of

672
00:42:00,200 --> 00:42:04,359
stuff and some of these were actually

673
00:42:04,720 --> 00:42:13,700
well there were partial fixes that could

674
00:42:08,960 --> 00:42:16,190
then be bypassed well again this

675
00:42:13,700 --> 00:42:18,410
difficult stuff okay no more Java let's

676
00:42:16,190 --> 00:42:21,890
take a look at that net well dotnet

677
00:42:18,410 --> 00:42:23,629
apparently is can be vulnerable

678
00:42:21,890 --> 00:42:29,558
Oh dotnet applications can be vulnerable

679
00:42:23,630 --> 00:42:32,739
to dis realized too bad this realization

680
00:42:29,559 --> 00:42:36,549
couple years ago there was an issue in

681
00:42:32,739 --> 00:42:39,549
cyber-ark password vault the the

682
00:42:36,549 --> 00:42:42,759
cyber-ark product password vault is if

683
00:42:39,549 --> 00:42:45,400
you will your enterprise level password

684
00:42:42,759 --> 00:42:48,309
manager that keeps credentials for all

685
00:42:45,400 --> 00:42:51,239
your privileged accounts we're a very

686
00:42:48,309 --> 00:42:54,180
very cool stuff very very important and

687
00:42:51,239 --> 00:42:59,249
something that we really need to protect

688
00:42:54,180 --> 00:43:02,730
well this this application had REST API

689
00:42:59,249 --> 00:43:05,558
cool for automation and whatever and

690
00:43:02,730 --> 00:43:08,440
this REST API is of course authenticated

691
00:43:05,559 --> 00:43:10,059
with authentication token this

692
00:43:08,440 --> 00:43:13,059
authentication token happens to be a

693
00:43:10,059 --> 00:43:15,160
serialized net object and again there's

694
00:43:13,059 --> 00:43:17,799
nothing wrong with that as long as you

695
00:43:15,160 --> 00:43:20,379
do things correctly well apparently they

696
00:43:17,799 --> 00:43:24,009
did not so first of all there was no

697
00:43:20,380 --> 00:43:27,309
integrity protection me which means that

698
00:43:24,009 --> 00:43:30,700
anybody could tamper with that token and

699
00:43:27,309 --> 00:43:32,499
replace things in it and maybe get a

700
00:43:30,700 --> 00:43:35,710
little bit of privileges I'm not sure

701
00:43:32,499 --> 00:43:38,049
but no integrity protection bad the

702
00:43:35,710 --> 00:43:40,390
other thing was there was no class type

703
00:43:38,049 --> 00:43:45,099
validation in other words no white

704
00:43:40,390 --> 00:43:47,799
listing so you could just send it any

705
00:43:45,099 --> 00:43:50,410
dotnet object notic not necessarily this

706
00:43:47,799 --> 00:43:51,099
authentication token and it will just

707
00:43:50,410 --> 00:43:55,118
swallow it

708
00:43:51,099 --> 00:43:57,670
as a result dr. gadget chain was

709
00:43:55,119 --> 00:43:59,460
possible we should let you an

710
00:43:57,670 --> 00:44:03,670
authenticated remote code execution and

711
00:43:59,460 --> 00:44:05,349
the dotnet carry chains are similar to

712
00:44:03,670 --> 00:44:07,900
those Gary chains that we talked before

713
00:44:05,349 --> 00:44:10,480
in Java they're not the same of course

714
00:44:07,900 --> 00:44:13,630
it's totally different language

715
00:44:10,480 --> 00:44:17,140
framework format but the idea is the

716
00:44:13,630 --> 00:44:20,519
same you kind of go one step at a time

717
00:44:17,140 --> 00:44:22,960
and and pull pull the string and

718
00:44:20,519 --> 00:44:25,689
ultimately get to remote code execution

719
00:44:22,960 --> 00:44:28,509
well one when the researchers who found

720
00:44:25,690 --> 00:44:30,279
it well first of all they they did

721
00:44:28,509 --> 00:44:33,789
responsible disclosure of course they

722
00:44:30,279 --> 00:44:36,249
reported it cyber-ark cyber-ark turned

723
00:44:33,789 --> 00:44:38,369
it around they fixed it good job and

724
00:44:36,249 --> 00:44:41,779
then researchers published it and

725
00:44:38,369 --> 00:44:44,570
basically this is how

726
00:44:41,780 --> 00:44:46,970
this is they exploit you run to commands

727
00:44:44,570 --> 00:44:51,260
well you just need one command really

728
00:44:46,970 --> 00:44:55,430
the first one to generate the payload

729
00:44:51,260 --> 00:44:58,130
and Yi you do it by using Y so serial

730
00:44:55,430 --> 00:45:00,919
data tool which is similar to the Java

731
00:44:58,130 --> 00:45:02,480
tool that I've used before and this

732
00:45:00,920 --> 00:45:05,540
other command is just to send that

733
00:45:02,480 --> 00:45:06,770
payload to the server and you get your

734
00:45:05,540 --> 00:45:10,730
code exact

735
00:45:06,770 --> 00:45:15,320
I mean how difficult is this again

736
00:45:10,730 --> 00:45:17,900
anybody can do it so let's do it now and

737
00:45:15,320 --> 00:45:18,410
for that I of course need even Windows

738
00:45:17,900 --> 00:45:21,470
machine

739
00:45:18,410 --> 00:45:23,330
I do not have a cyber-ark but I have a

740
00:45:21,470 --> 00:45:26,660
similar application called cyber Park

741
00:45:23,330 --> 00:45:30,259
which has an API rest point and it's a

742
00:45:26,660 --> 00:45:32,779
very simple API okay that just returns

743
00:45:30,260 --> 00:45:35,750
something to me if I don't give it

744
00:45:32,780 --> 00:45:37,490
anything it gives me a simple

745
00:45:35,750 --> 00:45:40,880
authorization value I need to authorize

746
00:45:37,490 --> 00:45:46,279
myself to this API so here it is in

747
00:45:40,880 --> 00:45:48,230
command line I can just cause without

748
00:45:46,280 --> 00:45:50,330
parameters or I can call it with the

749
00:45:48,230 --> 00:45:53,089
authorization header so if I give it

750
00:45:50,330 --> 00:45:59,869
that simple value back I get full bar

751
00:45:53,089 --> 00:46:03,770
this is just an example but if I want to

752
00:45:59,869 --> 00:46:06,320
do some real thing I would definitely

753
00:46:03,770 --> 00:46:08,270
want to run a calculator so I would

754
00:46:06,320 --> 00:46:11,599
generate a payload using wite-out serial

755
00:46:08,270 --> 00:46:14,030
dotnet tool which i precompiled on this

756
00:46:11,599 --> 00:46:16,880
machine and I'm just using the few

757
00:46:14,030 --> 00:46:19,190
parameters exactly pretty much like and

758
00:46:16,880 --> 00:46:26,480
that exploit that I showed on the slide

759
00:46:19,190 --> 00:46:29,630
and now I'm given that file I'm sending

760
00:46:26,480 --> 00:46:33,800
that far that's payload in authorization

761
00:46:29,630 --> 00:46:34,430
header to the application and I get my

762
00:46:33,800 --> 00:46:37,190
calculator

763
00:46:34,430 --> 00:46:39,339
of course again like I saw in Java I got

764
00:46:37,190 --> 00:46:43,849
my exception the type doesn't match

765
00:46:39,339 --> 00:46:46,180
whatever but it's too late I got what I

766
00:46:43,849 --> 00:46:46,180
wanted

767
00:46:50,160 --> 00:46:57,569
all right if you were an attacker who

768
00:46:53,700 --> 00:47:00,720
wants to maybe pen test an application

769
00:46:57,569 --> 00:47:03,779
or do whatever you need to do reverse

770
00:47:00,720 --> 00:47:05,250
engineering is a friend you you can use

771
00:47:03,779 --> 00:47:07,259
any tool a method you like anything

772
00:47:05,250 --> 00:47:09,180
you're comfortable with but a lot of

773
00:47:07,259 --> 00:47:11,789
times you would have to do some kind of

774
00:47:09,180 --> 00:47:14,149
reverse and unless all the source code

775
00:47:11,789 --> 00:47:16,529
is open and there is a lot of

776
00:47:14,150 --> 00:47:18,779
documentation or you can talk to people

777
00:47:16,529 --> 00:47:20,400
who know about this but most of the time

778
00:47:18,779 --> 00:47:23,490
you need to understand what's going on

779
00:47:20,400 --> 00:47:25,079
what formats are used what the

780
00:47:23,490 --> 00:47:28,578
application is doing how it sends the

781
00:47:25,079 --> 00:47:31,349
data how it receives the data and so on

782
00:47:28,579 --> 00:47:34,859
in terms of generate generating payload

783
00:47:31,349 --> 00:47:37,859
there are cool tools wise of serial the

784
00:47:34,859 --> 00:47:41,029
the one that we used in this demo in

785
00:47:37,859 --> 00:47:44,098
this presentation a very very cool tool

786
00:47:41,029 --> 00:47:47,640
it and it still I mean it was written a

787
00:47:44,099 --> 00:47:51,539
few years ago originally but it's still

788
00:47:47,640 --> 00:47:54,150
valid today and these issues do not go

789
00:47:51,539 --> 00:47:57,779
away you can you can use it and you can

790
00:47:54,150 --> 00:47:59,730
use it for for fun and profit why so

791
00:47:57,779 --> 00:48:02,039
serial dotnet the one that we use just a

792
00:47:59,730 --> 00:48:04,109
couple of minutes ago for dotnet similar

793
00:48:02,039 --> 00:48:07,160
tool for payload generation there are

794
00:48:04,109 --> 00:48:09,900
some burp extensions to analyze

795
00:48:07,160 --> 00:48:13,500
serialize data in your web application

796
00:48:09,900 --> 00:48:16,079
traffic you can sturgeon be in the derp

797
00:48:13,500 --> 00:48:21,240
App Store I think there is about five or

798
00:48:16,079 --> 00:48:22,849
six of them and a lot of times you will

799
00:48:21,240 --> 00:48:25,680
probably need to write your own code

800
00:48:22,849 --> 00:48:27,960
maybe you want to do something

801
00:48:25,680 --> 00:48:32,759
interesting like in one of the exploits

802
00:48:27,960 --> 00:48:36,990
that I had to do for proof of concept

803
00:48:32,759 --> 00:48:40,049
with dissertation I had to come like use

804
00:48:36,990 --> 00:48:43,348
part of why so serial for Java and then

805
00:48:40,049 --> 00:48:47,400
wrap it in my own code to disguise the

806
00:48:43,349 --> 00:48:51,059
payload as another object and it was

807
00:48:47,400 --> 00:48:53,759
pretty cool it worked but you might have

808
00:48:51,059 --> 00:48:57,000
to write your own code and you need to

809
00:48:53,759 --> 00:49:01,890
be to some extent comfortable with doing

810
00:48:57,000 --> 00:49:06,180
that so takeaways this realization

811
00:49:01,890 --> 00:49:09,210
is it's cool but it can be dangerous it

812
00:49:06,180 --> 00:49:12,299
has its place but you can't put it

813
00:49:09,210 --> 00:49:15,240
everywhere you need to understand what

814
00:49:12,300 --> 00:49:23,370
the dangers are I would say don't use it

815
00:49:15,240 --> 00:49:26,759
at all I don't well but we have to we

816
00:49:23,370 --> 00:49:28,140
have to use it right even like like at

817
00:49:26,760 --> 00:49:31,050
the beginning of the presentation I said

818
00:49:28,140 --> 00:49:34,080
that Jason is really sensation format

819
00:49:31,050 --> 00:49:38,220
like everything is JSON these days or

820
00:49:34,080 --> 00:49:40,259
XML so yeah we have to use it but we

821
00:49:38,220 --> 00:49:43,290
need to validate all the input you

822
00:49:40,260 --> 00:49:45,990
consider it untrusted everything is

823
00:49:43,290 --> 00:49:49,680
untrusted unless you can authenticate

824
00:49:45,990 --> 00:49:51,689
the data so if you do H Mac digital

825
00:49:49,680 --> 00:49:55,589
signature or some other kind of

826
00:49:51,690 --> 00:49:58,500
cryptographic thing that would make sure

827
00:49:55,590 --> 00:50:01,380
that data has not been tampered with

828
00:49:58,500 --> 00:50:06,450
that's what you need to do because as we

829
00:50:01,380 --> 00:50:08,940
just saw bad visualization can get you

830
00:50:06,450 --> 00:50:11,009
in real trouble like broken

831
00:50:08,940 --> 00:50:13,770
authentication authorization privilege

832
00:50:11,010 --> 00:50:17,970
escalation and even remote code

833
00:50:13,770 --> 00:50:19,820
execution and last but not least the

834
00:50:17,970 --> 00:50:23,069
third party components can be vulnerable

835
00:50:19,820 --> 00:50:27,660
and you need to have your patching

836
00:50:23,070 --> 00:50:29,490
program up and running all this code

837
00:50:27,660 --> 00:50:34,049
that I showed you today is on github

838
00:50:29,490 --> 00:50:35,729
feel free to download it and it's very

839
00:50:34,050 --> 00:50:38,790
simple to use you just need to have

840
00:50:35,730 --> 00:50:40,740
VirtualBox and vagrant you just run a

841
00:50:38,790 --> 00:50:43,350
vagrant up and creates a virtual machine

842
00:50:40,740 --> 00:50:45,959
for you with all this code running

843
00:50:43,350 --> 00:50:47,310
except for the windows example you need

844
00:50:45,960 --> 00:50:48,420
a separate machine for that that you

845
00:50:47,310 --> 00:50:54,660
need to build yourself

846
00:50:48,420 --> 00:50:58,110
but everything else Java Python what

847
00:50:54,660 --> 00:51:00,359
else today is no js' right it all runs

848
00:50:58,110 --> 00:51:03,480
on that Linux vagrant Shin you can

849
00:51:00,360 --> 00:51:05,400
contact me on Twitter or LinkedIn and

850
00:51:03,480 --> 00:51:10,100
thank you very much for attending

851
00:51:05,400 --> 00:51:10,100
today's talk and good luck

