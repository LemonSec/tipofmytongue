1
00:00:52,190 --> 00:01:00,328
all right I still see some sponsored

2
00:00:56,789 --> 00:01:02,609
things on the video stream but RL is

3
00:01:00,329 --> 00:01:04,320
your entire IT staff outsourced

4
00:01:02,609 --> 00:01:06,060
twenty-somethings is your cloud

5
00:01:04,319 --> 00:01:08,039
environment architected by a thought

6
00:01:06,060 --> 00:01:10,290
leaders fever dream have you swallowed

7
00:01:08,040 --> 00:01:12,240
heaping gallons of the DevOps kool-aid

8
00:01:10,290 --> 00:01:14,369
only to find out that your one miss can

9
00:01:12,240 --> 00:01:17,070
take away from losing everything

10
00:01:14,369 --> 00:01:20,850
Oh Shawn Marshall here to invite you to

11
00:01:17,070 --> 00:01:23,520
flex seal your CI CD pipeline if you're

12
00:01:20,850 --> 00:01:25,860
interested in diving deeper into this

13
00:01:23,520 --> 00:01:28,619
topic my slide deck is hosted at tiny

14
00:01:25,860 --> 00:01:30,390
acai slash flight skill and also feel

15
00:01:28,619 --> 00:01:35,790
free to ask questions during the talk

16
00:01:30,390 --> 00:01:37,619
I've got discord and mixer open so I'll

17
00:01:35,790 --> 00:01:40,470
be glancing over from time to time

18
00:01:37,619 --> 00:01:42,689
checking and see what sort of questions

19
00:01:40,470 --> 00:01:45,960
you have for me and feedback get this

20
00:01:42,689 --> 00:01:49,020
dialog going but to introduce myself and

21
00:01:45,960 --> 00:01:51,658
who I am and what I do I code I teach I

22
00:01:49,020 --> 00:01:53,850
hack I'm a full-time developer and

23
00:01:51,659 --> 00:01:56,990
DevOps engineer the things that I'm

24
00:01:53,850 --> 00:01:59,880
talking to you about today are about

25
00:01:56,990 --> 00:02:02,548
implementing security best practices in

26
00:01:59,880 --> 00:02:06,360
production facing systems this comes

27
00:02:02,549 --> 00:02:08,640
from experience of actually trying to do

28
00:02:06,360 --> 00:02:10,860
this in the real world I also have

29
00:02:08,639 --> 00:02:13,200
experience explaining how to do things

30
00:02:10,860 --> 00:02:16,080
like videos blogs

31
00:02:13,200 --> 00:02:18,359
and live classes not only in my

32
00:02:16,080 --> 00:02:21,269
developer and an instructor I'm also a

33
00:02:18,360 --> 00:02:24,629
full-time offensive security Red Team

34
00:02:21,269 --> 00:02:26,280
consultant so I've seen organizations

35
00:02:24,629 --> 00:02:28,829
who've architected cloud native web

36
00:02:26,280 --> 00:02:33,349
applications well and I've seen them do

37
00:02:28,830 --> 00:02:35,190
not so well so that's enough about me

38
00:02:33,349 --> 00:02:37,980
here's the ground that we're going to

39
00:02:35,190 --> 00:02:39,750
cover first I'll define what a CI CD

40
00:02:37,980 --> 00:02:41,880
pipeline is so we're all on the same

41
00:02:39,750 --> 00:02:44,940
page and then we'll focus on four

42
00:02:41,880 --> 00:02:47,549
strategies inspired by the flex seal

43
00:02:44,940 --> 00:02:50,940
family of products the beautiful thing

44
00:02:47,549 --> 00:02:54,209
about those commercials is the demos so

45
00:02:50,940 --> 00:02:57,030
every concept that I'm going to talk to

46
00:02:54,209 --> 00:03:00,209
you about today has its own demo in it

47
00:02:57,030 --> 00:03:03,299
first we'll come cover some foundational

48
00:03:00,209 --> 00:03:06,360
knowledge on I am and s3 bucket policies

49
00:03:03,299 --> 00:03:07,950
then we'll jump into flex gluing

50
00:03:06,360 --> 00:03:11,069
infrastructure together with cloud

51
00:03:07,950 --> 00:03:13,530
formation then we'll talk about node and

52
00:03:11,069 --> 00:03:17,220
the horrendous dumpster fire it is and

53
00:03:13,530 --> 00:03:19,889
how you can flex tape leaks and broken

54
00:03:17,220 --> 00:03:23,190
dependencies in your pipeline then we'll

55
00:03:19,889 --> 00:03:31,230
follow up with some final tips on just

56
00:03:23,190 --> 00:03:33,359
some basic container security so ACI CD

57
00:03:31,230 --> 00:03:35,429
pipeline is a system that allows

58
00:03:33,359 --> 00:03:38,670
integrated versions of the source code

59
00:03:35,430 --> 00:03:42,690
to be deployed into production facing

60
00:03:38,670 --> 00:03:45,420
systems in a perfect perfect world we

61
00:03:42,690 --> 00:03:48,090
get something from repo to production in

62
00:03:45,420 --> 00:03:52,319
seconds in the real world we either end

63
00:03:48,090 --> 00:03:55,109
up with something painfully slow or

64
00:03:52,319 --> 00:03:57,599
something that leaks way too much

65
00:03:55,109 --> 00:04:00,389
information and way too much data at

66
00:03:57,599 --> 00:04:03,000
once so the focus of this talk is to

67
00:04:00,389 --> 00:04:05,639
bacon as much security as we can and the

68
00:04:03,000 --> 00:04:07,910
building testing and deployment phases

69
00:04:05,639 --> 00:04:14,760
of the pipeline without sacrificing

70
00:04:07,910 --> 00:04:17,849
efficiency or availability all right

71
00:04:14,760 --> 00:04:20,849
there is a lot of tooling in this space

72
00:04:17,849 --> 00:04:23,729
like a lot a lot of tooling in the space

73
00:04:20,849 --> 00:04:25,710
so you've got Travis you got Jenkins you

74
00:04:23,729 --> 00:04:26,270
know get lab and a whole bunch of other

75
00:04:25,710 --> 00:04:29,359
players

76
00:04:26,270 --> 00:04:31,729
and this talk I'll be just keeping it

77
00:04:29,360 --> 00:04:34,819
simple and centering it around code

78
00:04:31,729 --> 00:04:35,930
pipeline why because it's a tool I'm

79
00:04:34,819 --> 00:04:40,159
most familiar with

80
00:04:35,930 --> 00:04:42,080
therefore it is perfect but no it's a

81
00:04:40,159 --> 00:04:45,349
decent tool because it's relatively easy

82
00:04:42,080 --> 00:04:49,128
to set up and it allows you to automate

83
00:04:45,349 --> 00:04:52,039
build and deployment processes in AWS so

84
00:04:49,129 --> 00:04:55,039
this process can be as simple as a

85
00:04:52,039 --> 00:04:57,349
two-step deployment all right taking a

86
00:04:55,039 --> 00:05:01,009
static website and throw it in an S 3

87
00:04:57,349 --> 00:05:03,139
bucket or it could be as convoluted as

88
00:05:01,009 --> 00:05:05,419
you would like with unit testing

89
00:05:03,139 --> 00:05:08,030
automated deployments to cloud formation

90
00:05:05,419 --> 00:05:12,799
stacks and even manual approval

91
00:05:08,030 --> 00:05:16,369
processes so of course use a lot of

92
00:05:12,800 --> 00:05:19,130
flexibility with this tool and GCP and

93
00:05:16,370 --> 00:05:22,460
azure of course have their own versions

94
00:05:19,130 --> 00:05:25,400
of the service when you get code

95
00:05:22,460 --> 00:05:27,710
pipeline you are given temporary access

96
00:05:25,400 --> 00:05:31,219
to a build container that will have the

97
00:05:27,710 --> 00:05:33,620
AWS CLI bash and outgoing internet

98
00:05:31,219 --> 00:05:36,020
access the other tools will fit neatly

99
00:05:33,620 --> 00:05:39,469
in this but first we need a more

100
00:05:36,020 --> 00:05:41,690
concrete example so imagine for a second

101
00:05:39,469 --> 00:05:46,789
you're building an online portal but you

102
00:05:41,690 --> 00:05:48,740
decide it's going to be server less the

103
00:05:46,789 --> 00:05:51,560
client-side application will be deployed

104
00:05:48,740 --> 00:05:54,050
to an s3 bucket all the requests will be

105
00:05:51,560 --> 00:05:57,080
handled by lambda functions grouped unto

106
00:05:54,050 --> 00:06:00,529
a REST API and defined an API gateway

107
00:05:57,080 --> 00:06:03,349
and user information and user groups

108
00:06:00,529 --> 00:06:05,930
will be stored and dynamodb now each of

109
00:06:03,349 --> 00:06:08,690
those lambdas will access different the

110
00:06:05,930 --> 00:06:10,819
eyes and other AWS services at different

111
00:06:08,690 --> 00:06:13,659
levels of authorization depending on the

112
00:06:10,819 --> 00:06:15,139
user now does that sound convoluted

113
00:06:13,659 --> 00:06:20,060
trust me

114
00:06:15,139 --> 00:06:22,400
you have no idea but these are the types

115
00:06:20,060 --> 00:06:25,039
of applications people are actually

116
00:06:22,400 --> 00:06:27,380
building it's normal to create cloud

117
00:06:25,039 --> 00:06:29,630
native applications that speak to dozens

118
00:06:27,380 --> 00:06:33,590
of services and not only do you have to

119
00:06:29,630 --> 00:06:36,529
manage multiple resources and multiple

120
00:06:33,590 --> 00:06:39,380
different services you also have to

121
00:06:36,529 --> 00:06:41,570
manage the identity and access man

122
00:06:39,380 --> 00:06:44,180
of those services and how they talk to

123
00:06:41,570 --> 00:06:48,469
each other as well within the entire

124
00:06:44,180 --> 00:06:51,020
tech stack so in order to figure that

125
00:06:48,470 --> 00:06:54,110
out we need a quick crash course on I am

126
00:06:51,020 --> 00:06:56,659
an AWS so I am or Identity and Access

127
00:06:54,110 --> 00:06:59,030
Management has to do with users or

128
00:06:56,660 --> 00:07:01,310
entities acting on users behalf

129
00:06:59,030 --> 00:07:03,169
there are hours of content that can go

130
00:07:01,310 --> 00:07:07,220
into each element discussed here but

131
00:07:03,170 --> 00:07:11,590
will stick to an overview for now users

132
00:07:07,220 --> 00:07:14,780
and groups are pretty self-explanatory

133
00:07:11,590 --> 00:07:17,359
to this audience so we won't get into

134
00:07:14,780 --> 00:07:21,500
that what we'll focus on is I am

135
00:07:17,360 --> 00:07:24,440
policies and I am roles and I am policy

136
00:07:21,500 --> 00:07:27,320
is just a JSON document as specifies

137
00:07:24,440 --> 00:07:29,840
what a user can and cannot access and a

138
00:07:27,320 --> 00:07:32,330
rule is just a set of one or more

139
00:07:29,840 --> 00:07:35,179
policies so let's start with an example

140
00:07:32,330 --> 00:07:38,000
I'm a user in my company's AWS

141
00:07:35,180 --> 00:07:39,920
environment and I have two roles I am a

142
00:07:38,000 --> 00:07:43,640
developer and that gives me access to

143
00:07:39,920 --> 00:07:45,620
scripts and company's source code and as

144
00:07:43,640 --> 00:07:47,930
a consultant I also have permission to

145
00:07:45,620 --> 00:07:52,490
spin up an ec2 instance for cracking

146
00:07:47,930 --> 00:07:56,200
passwords not all entities are users and

147
00:07:52,490 --> 00:07:59,630
groups however in AWS you see the

148
00:07:56,200 --> 00:08:04,099
resources AWS resources like code

149
00:07:59,630 --> 00:08:06,830
pipeline are their own sort of entity

150
00:08:04,100 --> 00:08:08,390
the eight have roles and they can also

151
00:08:06,830 --> 00:08:10,580
have policies attached to them

152
00:08:08,390 --> 00:08:14,570
delineating what they can and can't

153
00:08:10,580 --> 00:08:16,580
access so understanding the fundamentals

154
00:08:14,570 --> 00:08:20,719
of I am is important to actually making

155
00:08:16,580 --> 00:08:23,240
a functional production system this this

156
00:08:20,720 --> 00:08:25,090
is necessary for not only just the SEC

157
00:08:23,240 --> 00:08:31,250
teams with the devasting o as well

158
00:08:25,090 --> 00:08:32,209
because by default AWS services do not

159
00:08:31,250 --> 00:08:35,210
talk to each other

160
00:08:32,210 --> 00:08:38,870
nothing talks to anything and nothing

161
00:08:35,210 --> 00:08:42,140
works its ultimate security so you have

162
00:08:38,870 --> 00:08:43,969
to start by opening up a little bit by a

163
00:08:42,140 --> 00:08:46,640
little bit to actually have some

164
00:08:43,969 --> 00:08:50,240
functionality and access there however

165
00:08:46,640 --> 00:08:52,020
if you open up things too much you can

166
00:08:50,240 --> 00:08:53,880
mess up your IM roles and pause

167
00:08:52,020 --> 00:08:58,140
and make your entire environment

168
00:08:53,880 --> 00:09:00,840
insecure oh and there's just one more

169
00:08:58,140 --> 00:09:03,810
thing s3 bucket policies

170
00:09:00,840 --> 00:09:06,480
there's the like I am policies but

171
00:09:03,810 --> 00:09:09,290
they're slightly different so I am your

172
00:09:06,480 --> 00:09:12,150
focus on the focus is sort of egress

173
00:09:09,290 --> 00:09:15,050
what service is communicating with what

174
00:09:12,150 --> 00:09:18,180
and what permissions are involved there

175
00:09:15,050 --> 00:09:21,089
s3 bucket policies are more

176
00:09:18,180 --> 00:09:23,640
Ingres you have this attribute called

177
00:09:21,090 --> 00:09:26,250
the principle that defines what is

178
00:09:23,640 --> 00:09:28,640
allowed to come in and how is it allowed

179
00:09:26,250 --> 00:09:32,130
to access resources within the bucket

180
00:09:28,640 --> 00:09:36,600
but more honest three bucket policies

181
00:09:32,130 --> 00:09:39,870
later back to I am so when you mess up

182
00:09:36,600 --> 00:09:41,820
when you mess up either an I am or s3

183
00:09:39,870 --> 00:09:43,920
bucket policies you're just spelling out

184
00:09:41,820 --> 00:09:46,410
disaster and you're opening up thing and

185
00:09:43,920 --> 00:09:50,250
you're opening up yourself to exposure

186
00:09:46,410 --> 00:09:52,829
the capital one breach wasn't simple oh

187
00:09:50,250 --> 00:09:55,290
they left an open s3 bucket in the

188
00:09:52,830 --> 00:09:57,210
Internet the attacker was able to

189
00:09:55,290 --> 00:10:00,300
compromise the web app that was running

190
00:09:57,210 --> 00:10:02,730
on an ec2 and was able to navigate

191
00:10:00,300 --> 00:10:06,449
through a Web Application Firewall

192
00:10:02,730 --> 00:10:09,870
so once the attacker got onto the

193
00:10:06,450 --> 00:10:12,750
underlying system that was the point

194
00:10:09,870 --> 00:10:15,390
where it on that easy to she was able to

195
00:10:12,750 --> 00:10:18,510
query what sort of access permissions

196
00:10:15,390 --> 00:10:21,240
does this particular ec2 instance have

197
00:10:18,510 --> 00:10:23,670
oh I can access over three hundred

198
00:10:21,240 --> 00:10:26,850
buckets let's dump the data and see

199
00:10:23,670 --> 00:10:28,589
what's going on there so if capital an

200
00:10:26,850 --> 00:10:32,190
exercise of principle of least privilege

201
00:10:28,590 --> 00:10:34,850
and only gave that ec2 instance access

202
00:10:32,190 --> 00:10:38,250
to specific buckets as specific files

203
00:10:34,850 --> 00:10:42,380
then the damage cost by that breach

204
00:10:38,250 --> 00:10:47,490
wouldn't have been nearly as significant

205
00:10:42,380 --> 00:10:51,030
so secure use involves flex using a

206
00:10:47,490 --> 00:10:54,420
little bit of flex paste to connect i.m

207
00:10:51,030 --> 00:10:57,120
policies with s3 bucket policies and of

208
00:10:54,420 --> 00:11:01,199
course as promised demos so we're going

209
00:10:57,120 --> 00:11:03,690
to run through three quick demos one of

210
00:11:01,200 --> 00:11:05,460
the eight abuse policy generator which

211
00:11:03,690 --> 00:11:08,130
will help us right

212
00:11:05,460 --> 00:11:11,399
which will help us write the JSON for

213
00:11:08,130 --> 00:11:14,550
both I am and s3 bucket policies there's

214
00:11:11,399 --> 00:11:18,210
the I AWS policy simulator which does an

215
00:11:14,550 --> 00:11:20,849
important rule of just fat just simple

216
00:11:18,210 --> 00:11:22,860
access permission checking so we don't

217
00:11:20,850 --> 00:11:24,899
have to bash our heads against the CLI

218
00:11:22,860 --> 00:11:27,360
of the console and then there's power

219
00:11:24,899 --> 00:11:31,350
limit which was open source tool that

220
00:11:27,360 --> 00:11:34,410
allows you to do some linting and some

221
00:11:31,350 --> 00:11:36,990
static analysis of policy JSON and

222
00:11:34,410 --> 00:11:41,630
figure out thing when you're opening up

223
00:11:36,990 --> 00:11:52,470
things that you really shouldn't be and

224
00:11:41,630 --> 00:11:55,320
we transition to the browser so this is

225
00:11:52,470 --> 00:11:58,830
the iam policy simulator here you can

226
00:11:55,320 --> 00:12:02,490
run simulations for pretty much every

227
00:11:58,830 --> 00:12:05,550
AWS service and you can do so and you

228
00:12:02,490 --> 00:12:08,040
can do so as any user in your

229
00:12:05,550 --> 00:12:12,390
environment groups or roles unless of

230
00:12:08,040 --> 00:12:14,219
course your OPSEC team your security

231
00:12:12,390 --> 00:12:17,189
team has locked this down in any way

232
00:12:14,220 --> 00:12:21,690
this service is absolutely free and I do

233
00:12:17,190 --> 00:12:25,709
not mean free as in free now and a $400

234
00:12:21,690 --> 00:12:27,810
charge later I mean absolutely free to

235
00:12:25,709 --> 00:12:30,630
use you're not spinning up or using any

236
00:12:27,810 --> 00:12:32,609
of the resources this here so we jump

237
00:12:30,630 --> 00:12:37,010
into rules and I'm going to demonstrate

238
00:12:32,610 --> 00:12:42,180
quick quick instance of a horrible

239
00:12:37,010 --> 00:12:45,870
horribly written s3 rule so a badass 3

240
00:12:42,180 --> 00:12:48,540
demo rule involves this built-in policy

241
00:12:45,870 --> 00:12:53,160
called the Amazon s3 full access policy

242
00:12:48,540 --> 00:12:57,089
and as you can tell right it allows you

243
00:12:53,160 --> 00:13:00,360
to do whatever you want in s3 so we

244
00:12:57,089 --> 00:13:02,730
scroll down to services select all the

245
00:13:00,360 --> 00:13:07,110
actions and then just quit run to the

246
00:13:02,730 --> 00:13:10,130
simulation green means go right but

247
00:13:07,110 --> 00:13:13,200
green means go for you and any

248
00:13:10,130 --> 00:13:15,720
illegitimate user that happens to have

249
00:13:13,200 --> 00:13:18,020
access to this rule can assume this rule

250
00:13:15,720 --> 00:13:20,810
or any entity that's attached

251
00:13:18,020 --> 00:13:23,870
this role and most of the time you don't

252
00:13:20,810 --> 00:13:26,599
even need this much access like what is

253
00:13:23,870 --> 00:13:28,910
described job and what and what is

254
00:13:26,600 --> 00:13:32,060
described jobs and get object torrent

255
00:13:28,910 --> 00:13:35,930
you don't most of the time when you're

256
00:13:32,060 --> 00:13:37,729
using s3 your use case is simple I would

257
00:13:35,930 --> 00:13:40,430
like to view a list of files

258
00:13:37,730 --> 00:13:43,459
I'd like to download files I'd like to

259
00:13:40,430 --> 00:13:45,920
upload files and maybe depending on

260
00:13:43,459 --> 00:13:47,869
permission model and conditions I would

261
00:13:45,920 --> 00:13:48,410
like to delete files every once in a

262
00:13:47,870 --> 00:13:52,300
while

263
00:13:48,410 --> 00:13:58,040
so can we sit can we run a simulation of

264
00:13:52,300 --> 00:14:00,500
better s3 bucket policy all right so

265
00:13:58,040 --> 00:14:04,300
here's an example of a secure s3 bucket

266
00:14:00,500 --> 00:14:09,200
policy if not bucket policy I am policy

267
00:14:04,300 --> 00:14:12,380
so when we run this simulation BAM

268
00:14:09,200 --> 00:14:15,320
access denied and this is a good thing

269
00:14:12,380 --> 00:14:18,140
because the simulation resource that we

270
00:14:15,320 --> 00:14:22,550
have designated here is wild card or

271
00:14:18,140 --> 00:14:25,670
everything so let's narrow it down and

272
00:14:22,550 --> 00:14:31,130
let's run these simulations based on all

273
00:14:25,670 --> 00:14:37,510
objects in an s3 bucket in an s3 bucket

274
00:14:31,130 --> 00:14:41,029
and change the specific bucket actions

275
00:14:37,510 --> 00:14:43,730
to a specific bucket now the beautiful

276
00:14:41,029 --> 00:14:46,910
thing about this simulator is that you

277
00:14:43,730 --> 00:14:49,579
could run simulations on entities that

278
00:14:46,910 --> 00:14:51,740
don't even exist so long as you have the

279
00:14:49,579 --> 00:14:53,689
AR n so if something hasn't been

280
00:14:51,740 --> 00:14:55,970
deployed yet or you just want to test

281
00:14:53,690 --> 00:14:58,100
out the permission structure you can do

282
00:14:55,970 --> 00:15:01,399
so in the simulator without having to

283
00:14:58,100 --> 00:15:06,020
worry about it actually needing to exist

284
00:15:01,399 --> 00:15:09,440
so we run the simulation and you see the

285
00:15:06,020 --> 00:15:11,360
tiny green you see the tiny green well

286
00:15:09,440 --> 00:15:13,579
you're allowed to list bucket meaning

287
00:15:11,360 --> 00:15:18,010
refer to this bucket by name we are

288
00:15:13,579 --> 00:15:21,469
allowed to put object meaning you can

289
00:15:18,010 --> 00:15:25,279
upload objects which is a fancy way of

290
00:15:21,470 --> 00:15:28,310
saying file you can upload objects to

291
00:15:25,279 --> 00:15:30,060
this bucket and you can also get object

292
00:15:28,310 --> 00:15:32,849
meaning you can download Reece

293
00:15:30,060 --> 00:15:36,000
from this bucket so anyone that has the

294
00:15:32,850 --> 00:15:38,880
ability to assume this rule only has

295
00:15:36,000 --> 00:15:39,480
access to one bucket has access to all

296
00:15:38,880 --> 00:15:42,060
files

297
00:15:39,480 --> 00:15:45,060
hence the star here but that's okay it

298
00:15:42,060 --> 00:15:47,160
can access all files in this one bucket

299
00:15:45,060 --> 00:15:51,869
if you want to be really granular you

300
00:15:47,160 --> 00:15:56,339
can add even you can add slashes and to

301
00:15:51,870 --> 00:15:59,970
denote subdirectories so that's good

302
00:15:56,340 --> 00:16:02,130
na but let's say alright I really need

303
00:15:59,970 --> 00:16:04,620
to work on I really need to open this up

304
00:16:02,130 --> 00:16:07,140
to illustrate that action I discussed

305
00:16:04,620 --> 00:16:10,650
earlier when we talking about deleting

306
00:16:07,140 --> 00:16:12,750
objects so let's say this ec2 instance

307
00:16:10,650 --> 00:16:16,380
is attached to a web app and users need

308
00:16:12,750 --> 00:16:19,770
to delete files for example so how do I

309
00:16:16,380 --> 00:16:21,660
end up writing the policy so the

310
00:16:19,770 --> 00:16:24,000
beautiful thing about AWS policy

311
00:16:21,660 --> 00:16:25,860
simulator is that not only can you test

312
00:16:24,000 --> 00:16:28,950
existing policies within your

313
00:16:25,860 --> 00:16:37,760
environment you can also do create new

314
00:16:28,950 --> 00:16:41,310
policies right here so with here you can

315
00:16:37,760 --> 00:16:43,800
you can just it's like any other text

316
00:16:41,310 --> 00:16:46,229
editor you can just write in the policy

317
00:16:43,800 --> 00:16:48,959
and the difference is when we can reset

318
00:16:46,230 --> 00:16:51,300
the context and rerun the simulation you

319
00:16:48,960 --> 00:16:53,520
can run it based on this temporary

320
00:16:51,300 --> 00:16:56,430
policy that you're working on so you can

321
00:16:53,520 --> 00:16:58,680
draft and you can edit and you can you

322
00:16:56,430 --> 00:17:11,909
have sort of it's like coding with a

323
00:16:58,680 --> 00:17:15,659
compiler in a way so s3 delete now we

324
00:17:11,910 --> 00:17:21,420
rerun the simulation and let's see did

325
00:17:15,660 --> 00:17:23,640
you do delete object is allowed and it

326
00:17:21,420 --> 00:17:27,120
has a matching state and it has one

327
00:17:23,640 --> 00:17:31,680
matching statement also for matching

328
00:17:27,119 --> 00:17:34,860
statements you can click for details to

329
00:17:31,680 --> 00:17:39,180
find out which statement specifically

330
00:17:34,860 --> 00:17:41,639
now if you have a huge policy with a

331
00:17:39,180 --> 00:17:42,490
whole bunch of different statements this

332
00:17:41,640 --> 00:17:45,670
won't be

333
00:17:42,490 --> 00:17:49,300
this this will this part will actually

334
00:17:45,670 --> 00:17:52,990
be useful for you so there you go

335
00:17:49,300 --> 00:17:56,260
the I on policy simulator but I don't

336
00:17:52,990 --> 00:17:59,590
know writing JSON the curly braces is

337
00:17:56,260 --> 00:18:01,570
weird especially because I'm nervous I

338
00:17:59,590 --> 00:18:03,699
might have missed a quote or curly brace

339
00:18:01,570 --> 00:18:06,879
that this could have been a complete

340
00:18:03,700 --> 00:18:09,070
dumpster fire of a demo so how do we

341
00:18:06,880 --> 00:18:12,070
generate kana we generate policies how

342
00:18:09,070 --> 00:18:12,879
do we generate I am policies from from

343
00:18:12,070 --> 00:18:16,629
scratch

344
00:18:12,880 --> 00:18:19,059
there's no excuse there's no shortcut to

345
00:18:16,630 --> 00:18:21,670
knowing what these actions are and what

346
00:18:19,059 --> 00:18:25,330
they do however if you do know the

347
00:18:21,670 --> 00:18:28,090
actions you can just generate the policy

348
00:18:25,330 --> 00:18:30,939
through here so you don't and this tool

349
00:18:28,090 --> 00:18:33,370
will spit out the JSON automatically so

350
00:18:30,940 --> 00:18:36,490
we're going into an IM policy the

351
00:18:33,370 --> 00:18:40,000
service that we're specifying as Amazon

352
00:18:36,490 --> 00:18:52,559
s3 and we can do the same thing really

353
00:18:40,000 --> 00:18:52,559
quickly so get object get object put

354
00:18:52,740 --> 00:19:02,170
delete and lists and lists buckets and

355
00:18:58,929 --> 00:19:05,890
the list bucket remember is just being

356
00:19:02,170 --> 00:19:09,550
able to refer to the bucket by name and

357
00:19:05,890 --> 00:19:13,750
look at its file contents so for action

358
00:19:09,550 --> 00:19:18,220
and there's the there's a little useful

359
00:19:13,750 --> 00:19:20,800
hint here for the amazon resource name

360
00:19:18,220 --> 00:19:25,900
so we can just change that real quick to

361
00:19:20,800 --> 00:19:29,800
some bucket and we can designate that to

362
00:19:25,900 --> 00:19:32,610
star and we just comma delimited ADA to

363
00:19:29,800 --> 00:19:35,879
that same thing again

364
00:19:32,610 --> 00:19:35,879
not that

365
00:19:38,640 --> 00:19:50,830
to eliminate it the same thing again now

366
00:19:47,980 --> 00:19:53,890
the reason why I'm adding two statements

367
00:19:50,830 --> 00:19:56,830
one with bucket and one slash star is

368
00:19:53,890 --> 00:20:00,160
because you meet if you were opening up

369
00:19:56,830 --> 00:20:02,740
if you have a bucket permission you need

370
00:20:00,160 --> 00:20:05,920
to open it up to the bucket specifically

371
00:20:02,740 --> 00:20:09,130
so buckets and objects are separate

372
00:20:05,920 --> 00:20:11,950
entities in terms of I am in if you have

373
00:20:09,130 --> 00:20:14,650
actions that refer to both you need to

374
00:20:11,950 --> 00:20:17,260
specify the Ries you say disgusted by

375
00:20:14,650 --> 00:20:22,810
the bucket and the objects within that

376
00:20:17,260 --> 00:20:25,240
bucket as separate resources so we add

377
00:20:22,810 --> 00:20:28,450
the statement together and generate the

378
00:20:25,240 --> 00:20:32,470
policy Dada

379
00:20:28,450 --> 00:20:34,510
JSON so back to what I was sucking about

380
00:20:32,470 --> 00:20:37,800
before there's also another type of

381
00:20:34,510 --> 00:20:41,379
policy called an s3 bucket policy and

382
00:20:37,800 --> 00:20:43,030
those are two options you can use there

383
00:20:41,380 --> 00:20:45,730
are two options you can use to manage

384
00:20:43,030 --> 00:20:50,379
access to s3 buckets and files to them

385
00:20:45,730 --> 00:20:52,720
you can use I am or you can use s3 and I

386
00:20:50,380 --> 00:20:55,000
say options in the same way that David

387
00:20:52,720 --> 00:20:58,450
and Lenore earlier in the presentation

388
00:20:55,000 --> 00:21:01,420
said seatbelts and airbags are options

389
00:20:58,450 --> 00:21:06,040
you really should use both in order to

390
00:21:01,420 --> 00:21:08,830
dilemonade access so this demo wouldn't

391
00:21:06,040 --> 00:21:12,909
be complete if I didn't do a brief

392
00:21:08,830 --> 00:21:17,800
exercise and s3 bucket policies and no

393
00:21:12,910 --> 00:21:20,880
one cares so s3 bucket policies we're

394
00:21:17,800 --> 00:21:24,340
going to start with some deny statements

395
00:21:20,880 --> 00:21:27,430
our goal is with this s3 bucket let's

396
00:21:24,340 --> 00:21:32,830
say it's some it's tolls payroll and

397
00:21:27,430 --> 00:21:36,730
account data the goal is is that no part

398
00:21:32,830 --> 00:21:37,929
no part of no file within this bucket

399
00:21:36,730 --> 00:21:40,630
needs to be

400
00:21:37,930 --> 00:21:44,590
unencrypted and anyway we need to force

401
00:21:40,630 --> 00:21:49,450
encryption access on on all files and

402
00:21:44,590 --> 00:21:52,720
all objects uploaded to s3 so

403
00:21:49,450 --> 00:21:55,390
we're going to do principle star now in

404
00:21:52,720 --> 00:21:58,240
an allow action this could be very

405
00:21:55,390 --> 00:22:00,450
dangerous but this is a denying action

406
00:21:58,240 --> 00:22:03,580
so we're just saying we're denying

407
00:22:00,450 --> 00:22:08,260
everybody and we're denying everybody in

408
00:22:03,580 --> 00:22:11,770
a certain sin certain conditions so the

409
00:22:08,260 --> 00:22:20,640
up the action to upload files is put

410
00:22:11,770 --> 00:22:26,620
object so we just drop down to here and

411
00:22:20,640 --> 00:22:29,410
then we'll just say for this AR N and

412
00:22:26,620 --> 00:22:40,030
we'll just call this bucket payroll

413
00:22:29,410 --> 00:22:44,530
bucket because why not and then we will

414
00:22:40,030 --> 00:22:48,310
denote it slash star because again this

415
00:22:44,530 --> 00:22:50,590
isn't this action specified isn't on a

416
00:22:48,310 --> 00:22:58,990
bucket it is on objects within that

417
00:22:50,590 --> 00:23:01,419
bucket and so we are specifying and

418
00:22:58,990 --> 00:23:05,020
we're going to say alright we're denying

419
00:23:01,420 --> 00:23:09,430
all put object operations under these

420
00:23:05,020 --> 00:23:12,910
specific conditions we will deny every

421
00:23:09,430 --> 00:23:14,860
unencrypted upload as possible so the

422
00:23:12,910 --> 00:23:24,150
bait you do that is that with you

423
00:23:14,860 --> 00:23:27,040
condition null and then with the s3x amz

424
00:23:24,150 --> 00:23:30,160
server-side encryption and you just set

425
00:23:27,040 --> 00:23:33,730
that to true and you just add that as a

426
00:23:30,160 --> 00:23:36,370
condition now this isn't the only

427
00:23:33,730 --> 00:23:39,130
statement we need in this so we'll just

428
00:23:36,370 --> 00:23:41,260
continually use and you continually be

429
00:23:39,130 --> 00:23:45,310
using the tool to add more statements

430
00:23:41,260 --> 00:23:47,710
now we're going to make sure that hey it

431
00:23:45,310 --> 00:23:55,090
just can't be any encryption we need to

432
00:23:47,710 --> 00:24:00,490
make sure it's a s 2:56 always so we for

433
00:23:55,090 --> 00:24:03,250
that you do string not equals and then

434
00:24:00,490 --> 00:24:06,039
the same header MZ

435
00:24:03,250 --> 00:24:11,470
amz server-side encryption and then you

436
00:24:06,039 --> 00:24:14,530
specify the value to aes-256 yes the

437
00:24:11,470 --> 00:24:16,809
string is K since so be careful with

438
00:24:14,530 --> 00:24:21,480
that and you add the statement and

439
00:24:16,809 --> 00:24:25,000
that's good but we're not complete so

440
00:24:21,480 --> 00:24:28,390
this morning we can't actually generate

441
00:24:25,000 --> 00:24:30,270
the policy because is you can't just

442
00:24:28,390 --> 00:24:33,580
talk about things that you're denying

443
00:24:30,270 --> 00:24:35,860
most AWS services are locked down and

444
00:24:33,580 --> 00:24:41,139
closed up by default so you need to

445
00:24:35,860 --> 00:24:48,520
specify any condition for allowing so in

446
00:24:41,140 --> 00:24:51,990
this case what I'm going to do is I'm

447
00:24:48,520 --> 00:24:56,530
going to open this bucket up to a

448
00:24:51,990 --> 00:25:00,220
principal entity and instead of being an

449
00:24:56,530 --> 00:25:03,520
AR n for s3 we'll just do an I am you'll

450
00:25:00,220 --> 00:25:10,150
just do a quick I am a RN and in this

451
00:25:03,520 --> 00:25:17,889
case we do user slash of Sean B and so

452
00:25:10,150 --> 00:25:19,960
we hide this and in this case what we

453
00:25:17,890 --> 00:25:23,049
are what actions are reeling

454
00:25:19,960 --> 00:25:28,090
we're just allowing me just a basic file

455
00:25:23,049 --> 00:25:31,418
access download upload delete and list

456
00:25:28,090 --> 00:25:47,158
and list the contents of a single bucket

457
00:25:31,419 --> 00:25:47,159
so get so delete object get object

458
00:25:49,470 --> 00:26:02,710
put object yes and list bucket for

459
00:25:57,609 --> 00:26:04,570
simple actions so let's say I'm an

460
00:26:02,710 --> 00:26:07,659
accountant now I have access to the

461
00:26:04,570 --> 00:26:12,369
payroll bucket but only simple file

462
00:26:07,659 --> 00:26:15,369
access so we had the statement and now

463
00:26:12,369 --> 00:26:20,019
we can generate now we can generate the

464
00:26:15,369 --> 00:26:21,908
policy so this policy is a stripe s3

465
00:26:20,019 --> 00:26:25,649
bucket policy that you could just copy

466
00:26:21,909 --> 00:26:30,249
and paste from here into an s3 bucket

467
00:26:25,649 --> 00:26:34,209
into an s3 bucket policy a option in the

468
00:26:30,249 --> 00:26:37,809
menu and it's generated for you it's an

469
00:26:34,210 --> 00:26:40,779
easy way to write things things alright

470
00:26:37,809 --> 00:26:44,049
and so that's I am policy simulator

471
00:26:40,779 --> 00:26:46,899
that's I that's the AIA AWS policy

472
00:26:44,049 --> 00:26:51,700
generator now we're jumping in the

473
00:26:46,899 --> 00:26:54,879
virtual machine so quick virtual machine

474
00:26:51,700 --> 00:26:56,979
that I spun up we're going to be

475
00:26:54,879 --> 00:26:58,899
previewing a tool called Parliament and

476
00:26:56,979 --> 00:27:01,869
what Parliament is really good for is

477
00:26:58,899 --> 00:27:05,529
linting and security analysis of I am

478
00:27:01,869 --> 00:27:10,178
policies if we jump into what the test

479
00:27:05,529 --> 00:27:17,649
file if we look at our test files we'll

480
00:27:10,179 --> 00:27:22,419
see alright hey this is an s3 SS and I

481
00:27:17,649 --> 00:27:25,719
am policy but hey it's open it's opening

482
00:27:22,419 --> 00:27:29,859
up the bucket and all objects within a

483
00:27:25,720 --> 00:27:34,149
bucket it allows you to download objects

484
00:27:29,859 --> 00:27:38,949
and also to modify and have write access

485
00:27:34,149 --> 00:27:42,158
to the put bucket object policy now this

486
00:27:38,950 --> 00:27:44,499
the simulator nor the generator will

487
00:27:42,159 --> 00:27:48,070
tell you why this is bad

488
00:27:44,499 --> 00:27:52,929
this is where the stool comes in so when

489
00:27:48,070 --> 00:27:55,178
we run Parliament we see the reason why

490
00:27:52,929 --> 00:27:58,869
this is bad it allows privilege

491
00:27:55,179 --> 00:28:02,860
escalation if I have write access to the

492
00:27:58,869 --> 00:28:07,389
bucket policy for an s3 by

493
00:28:02,860 --> 00:28:10,479
and it's a good policy I can make it do

494
00:28:07,390 --> 00:28:12,880
whatever I want I can open up access

495
00:28:10,480 --> 00:28:15,040
even though I wouldn't be I can open it

496
00:28:12,880 --> 00:28:17,470
up to the Internet or I can just take

497
00:28:15,040 --> 00:28:19,720
over the bucket encrypt every and then

498
00:28:17,470 --> 00:28:24,429
encrypt everything and make it so that

499
00:28:19,720 --> 00:28:26,440
no user can access the bucket so the

500
00:28:24,429 --> 00:28:28,120
reason why this policy is bad is

501
00:28:26,440 --> 00:28:31,059
privilege escalation and of course

502
00:28:28,120 --> 00:28:34,120
thanks to Parliament we were able to we

503
00:28:31,059 --> 00:28:38,799
were able to see that we are able to do

504
00:28:34,120 --> 00:28:50,290
some stack analysis and see that now

505
00:28:38,799 --> 00:28:52,240
back over to the slides here's the we're

506
00:28:50,290 --> 00:28:55,200
going to jump into cloud formation here

507
00:28:52,240 --> 00:28:59,260
and I hate to break it to you but

508
00:28:55,200 --> 00:29:02,669
everything and I do mean everything is a

509
00:28:59,260 --> 00:29:06,640
loose collection of parts stuck together

510
00:29:02,669 --> 00:29:08,980
so api's microservices libraries open

511
00:29:06,640 --> 00:29:11,350
source and legacy code cloud native

512
00:29:08,980 --> 00:29:13,600
applications are just that glued

513
00:29:11,350 --> 00:29:16,330
together pieces of a dozen or so cloud

514
00:29:13,600 --> 00:29:18,428
services now the question is how do we

515
00:29:16,330 --> 00:29:21,639
tie this stuff together we could have

516
00:29:18,429 --> 00:29:24,130
engineer's creating things each in the

517
00:29:21,640 --> 00:29:29,320
console by clicking and going through

518
00:29:24,130 --> 00:29:31,840
but the horrible thing about that is who

519
00:29:29,320 --> 00:29:35,139
documents what changes are being made

520
00:29:31,840 --> 00:29:38,168
and what needs to be changed like this

521
00:29:35,140 --> 00:29:40,510
if you're changing an entity in your AWS

522
00:29:38,169 --> 00:29:42,820
environment you could have dozens of

523
00:29:40,510 --> 00:29:45,309
different web applications and

524
00:29:42,820 --> 00:29:48,370
microservices dependent on that resource

525
00:29:45,309 --> 00:29:50,559
and once you change it to and if you

526
00:29:48,370 --> 00:29:53,530
change that you've now reduced the

527
00:29:50,559 --> 00:29:56,830
understandability of that one particular

528
00:29:53,530 --> 00:30:01,600
resource to one person or one engineer

529
00:29:56,830 --> 00:30:02,350
and so this is just a disaster waiting

530
00:30:01,600 --> 00:30:04,689
to happen

531
00:30:02,350 --> 00:30:07,809
in which you're scripting and doing

532
00:30:04,690 --> 00:30:10,630
things and gluing things together this

533
00:30:07,809 --> 00:30:12,760
is where CloudFormation comes in so

534
00:30:10,630 --> 00:30:14,950
cloud formation is a template for

535
00:30:12,760 --> 00:30:16,330
blueprinting cloud services think of it

536
00:30:14,950 --> 00:30:19,630
like a human diagram

537
00:30:16,330 --> 00:30:24,490
except this document actually helps you

538
00:30:19,630 --> 00:30:26,590
make working software you could pause

539
00:30:24,490 --> 00:30:28,390
them to pull you can push a button and

540
00:30:26,590 --> 00:30:30,610
deploy the entire text stack for an

541
00:30:28,390 --> 00:30:34,080
application based on a single JSON file

542
00:30:30,610 --> 00:30:37,299
and you can provision most AWS services

543
00:30:34,080 --> 00:30:39,699
including I am roles and policies using

544
00:30:37,299 --> 00:30:42,700
cloud formation templates you can even

545
00:30:39,700 --> 00:30:45,309
provision an entire and the entire

546
00:30:42,700 --> 00:30:48,130
pipeline for the stack within

547
00:30:45,309 --> 00:30:50,590
CloudFormation template so if you

548
00:30:48,130 --> 00:30:52,750
template your entire tech stack not only

549
00:30:50,590 --> 00:30:55,418
can you just replicate the entire thing

550
00:30:52,750 --> 00:30:58,600
easily you can modify it you conversion

551
00:30:55,419 --> 00:31:01,059
control it so instead of cobbling things

552
00:30:58,600 --> 00:31:03,209
together you get something more

553
00:31:01,059 --> 00:31:08,230
streamlined and something more elegant

554
00:31:03,210 --> 00:31:11,320
but what but what is the actual value

555
00:31:08,230 --> 00:31:13,750
that's added here what's the value for

556
00:31:11,320 --> 00:31:16,120
security teams well if your

557
00:31:13,750 --> 00:31:18,250
infrastructure is in the codebase you

558
00:31:16,120 --> 00:31:21,340
can analyze the code for vulnerabilities

559
00:31:18,250 --> 00:31:25,149
before the code is deployed now this

560
00:31:21,340 --> 00:31:28,600
demo is using a tool called CFM nak

561
00:31:25,149 --> 00:31:31,539
that's CFN underscore nak it looks for

562
00:31:28,600 --> 00:31:34,719
patterns and CloudFormation templates so

563
00:31:31,539 --> 00:31:38,250
that you can identify insecure

564
00:31:34,720 --> 00:31:41,169
infrastructure in the in the codebase

565
00:31:38,250 --> 00:31:43,360
before it is automatically deployed so

566
00:31:41,169 --> 00:31:45,880
in a previous version of the portal who

567
00:31:43,360 --> 00:31:49,149
ensures active development we were able

568
00:31:45,880 --> 00:31:51,909
to scan the CloudFormation template and

569
00:31:49,149 --> 00:31:56,739
then have another set pair of eyes on

570
00:31:51,909 --> 00:32:00,190
various resources as well as the as well

571
00:31:56,740 --> 00:32:02,950
as the IAM rules and ion policies built

572
00:32:00,190 --> 00:32:05,019
in within that text stack so if you're

573
00:32:02,950 --> 00:32:07,330
going to be gluing things together if

574
00:32:05,019 --> 00:32:13,000
you're going to be building let's flex

575
00:32:07,330 --> 00:32:14,799
glue it together now here's a bit of

576
00:32:13,000 --> 00:32:17,200
homework for anyone that has node in

577
00:32:14,799 --> 00:32:19,779
their stack you can use the package

578
00:32:17,200 --> 00:32:24,159
manager to audit all your dependencies

579
00:32:19,779 --> 00:32:25,929
for vulnerabilities Alyssa Miller did an

580
00:32:24,159 --> 00:32:28,280
excellent keynote earlier in the day

581
00:32:25,929 --> 00:32:31,430
when she was talking about

582
00:32:28,280 --> 00:32:34,820
600 vulnerabilities and the official

583
00:32:31,430 --> 00:32:38,720
node package and the official docker

584
00:32:34,820 --> 00:32:43,450
images for that I'm surprised it's only

585
00:32:38,720 --> 00:32:48,890
600 and you'll see and you'll see why

586
00:32:43,450 --> 00:32:50,810
you can use simple NPM on it - odd -

587
00:32:48,890 --> 00:32:52,880
just audit your dependencies and take a

588
00:32:50,810 --> 00:32:54,590
look at your entire supply chain if your

589
00:32:52,880 --> 00:32:56,600
stack happens to be running note and

590
00:32:54,590 --> 00:32:59,600
there are other tools that do this like

591
00:32:56,600 --> 00:33:03,439
sneak and github dependant spots but a

592
00:32:59,600 --> 00:33:05,000
this is free and B you don't have to

593
00:33:03,440 --> 00:33:08,080
install anything extra

594
00:33:05,000 --> 00:33:12,130
so you'll find these tests often produce

595
00:33:08,080 --> 00:33:18,290
nothing but sometimes you will get a

596
00:33:12,130 --> 00:33:20,630
laundry list of vulnerabilities so how

597
00:33:18,290 --> 00:33:22,399
do we address this problem how do we

598
00:33:20,630 --> 00:33:29,270
secure our software supply chain and

599
00:33:22,400 --> 00:33:32,180
node three words in the command line not

600
00:33:29,270 --> 00:33:37,639
every patch will be this easy but a lot

601
00:33:32,180 --> 00:33:39,470
of them are so some of them I mean come

602
00:33:37,640 --> 00:33:41,960
on they have breaking changes and things

603
00:33:39,470 --> 00:33:46,670
like that but a lot of these patches are

604
00:33:41,960 --> 00:33:49,250
just three lines so if you do have

605
00:33:46,670 --> 00:33:52,910
baking changes you may have one engineer

606
00:33:49,250 --> 00:33:56,630
in an app an active development focusing

607
00:33:52,910 --> 00:34:00,140
on running through those patches in one

608
00:33:56,630 --> 00:34:02,060
afternoon or if it's a production large

609
00:34:00,140 --> 00:34:05,680
scale enterprise app you could get a

610
00:34:02,060 --> 00:34:09,409
couple people allocated to a week but a

611
00:34:05,680 --> 00:34:12,470
lot of patches a lot of upgrades if it's

612
00:34:09,409 --> 00:34:14,860
been reported and node chances are there

613
00:34:12,469 --> 00:34:18,560
is a patch that probably applies ever

614
00:34:14,860 --> 00:34:21,860
there's similar tooling for this is in

615
00:34:18,560 --> 00:34:24,380
c-sharp Java go and many other languages

616
00:34:21,860 --> 00:34:26,510
a lot of tooling a lot of that tooling

617
00:34:24,380 --> 00:34:29,540
is open source so big names this

618
00:34:26,510 --> 00:34:33,679
basically the OS dependency check OSS

619
00:34:29,540 --> 00:34:36,980
index and retired AAS so rather than

620
00:34:33,679 --> 00:34:39,940
taking your top I'm taking the red team

621
00:34:36,980 --> 00:34:41,560
to spin up the SAS and - tools and

622
00:34:39,940 --> 00:34:44,409
throwing them at

623
00:34:41,560 --> 00:34:47,020
rather than running up burp suite and

624
00:34:44,409 --> 00:34:50,320
just hammering at the web app you can

625
00:34:47,020 --> 00:34:53,560
eliminate a lot of this easy low-hanging

626
00:34:50,320 --> 00:34:57,250
fruit in the pipeline before the code is

627
00:34:53,560 --> 00:35:00,130
even deployed so fix leaks in your

628
00:34:57,250 --> 00:35:05,050
pipeline by just flex taping your

629
00:35:00,130 --> 00:35:07,330
dependencies and here is live deployment

630
00:35:05,050 --> 00:35:09,100
so here's a brief demo of the portal

631
00:35:07,330 --> 00:35:11,799
that we discussed at the beginning of

632
00:35:09,100 --> 00:35:14,680
the talk as we go through we notice that

633
00:35:11,800 --> 00:35:17,290
hey the build execution failed and after

634
00:35:14,680 --> 00:35:19,629
investigation we find that all the other

635
00:35:17,290 --> 00:35:22,000
services work with the cloud formation

636
00:35:19,630 --> 00:35:24,160
stacked unit tests work the API was

637
00:35:22,000 --> 00:35:25,870
deployed correctly but we noticed that

638
00:35:24,160 --> 00:35:28,810
there is a moderate level of

639
00:35:25,870 --> 00:35:32,250
vulnerability now I don't know about you

640
00:35:28,810 --> 00:35:35,110
but my boss will not let me ship

641
00:35:32,250 --> 00:35:37,690
client-side code with cross-site

642
00:35:35,110 --> 00:35:40,380
scripting in it in your environment

643
00:35:37,690 --> 00:35:43,180
however this may be a high availability

644
00:35:40,380 --> 00:35:46,210
system in which you need to focus and

645
00:35:43,180 --> 00:35:48,899
concentrate on high or critical issues

646
00:35:46,210 --> 00:35:51,910
so you can set the audit level to there

647
00:35:48,900 --> 00:35:54,310
not only that but since this is in the

648
00:35:51,910 --> 00:35:59,140
pipeline and this can be expressed as

649
00:35:54,310 --> 00:36:00,790
not just ascii text but json you can set

650
00:35:59,140 --> 00:36:03,339
up an alert to trigger a patch

651
00:36:00,790 --> 00:36:10,920
management and for intervention on the

652
00:36:03,340 --> 00:36:14,230
tool or you can in fact do the NPM NPM

653
00:36:10,920 --> 00:36:17,400
audit fix like we've discussed earlier

654
00:36:14,230 --> 00:36:20,080
and patched these and then patch the

655
00:36:17,400 --> 00:36:23,100
dependencies automatically if certain

656
00:36:20,080 --> 00:36:25,810
unit tests pass with the patch applied

657
00:36:23,100 --> 00:36:28,660
then just run it through without any

658
00:36:25,810 --> 00:36:30,220
human intervention so what you do in

659
00:36:28,660 --> 00:36:32,259
your environment depends on your

660
00:36:30,220 --> 00:36:38,529
tolerance or risks and your processes

661
00:36:32,260 --> 00:36:40,600
for vulnerability management now we on

662
00:36:38,530 --> 00:36:45,880
to the good stuff so flex sealing

663
00:36:40,600 --> 00:36:48,100
containers so with AWS code pipeline you

664
00:36:45,880 --> 00:36:50,290
get a provision container with basic

665
00:36:48,100 --> 00:36:52,960
deployment tools and its own sort of

666
00:36:50,290 --> 00:36:54,250
tool chain but they allow you to use

667
00:36:52,960 --> 00:36:57,220
your own containers

668
00:36:54,250 --> 00:36:59,290
some of you have custom the docker or

669
00:36:57,220 --> 00:37:01,000
multiple containers and kubernetes

670
00:36:59,290 --> 00:37:02,700
cluster that aid in building and

671
00:37:01,000 --> 00:37:05,320
deployment of your products and services

672
00:37:02,700 --> 00:37:10,180
now the world of container hardening is

673
00:37:05,320 --> 00:37:12,880
vast and growing and there is a lot that

674
00:37:10,180 --> 00:37:17,379
I can cover but here are some basic

675
00:37:12,880 --> 00:37:23,260
security hygiene 101 tips 1 don't run

676
00:37:17,380 --> 00:37:26,170
any more surfaces than you needed limit

677
00:37:23,260 --> 00:37:29,050
access to orchestration tools limit

678
00:37:26,170 --> 00:37:33,070
access to administrative dashboards even

679
00:37:29,050 --> 00:37:34,930
by even eliminating some basic tools you

680
00:37:33,070 --> 00:37:39,730
would think oh this container needs it

681
00:37:34,930 --> 00:37:42,669
if you room if your container if I pop a

682
00:37:39,730 --> 00:37:46,000
container I'm on that machine and it

683
00:37:42,670 --> 00:37:49,000
doesn't have curl that makes my life a

684
00:37:46,000 --> 00:37:52,150
whole lot harder than pulling and other

685
00:37:49,000 --> 00:37:56,340
tooling - in order to pivot to other to

686
00:37:52,150 --> 00:37:59,770
other nodes when cost within the cluster

687
00:37:56,340 --> 00:38:02,740
so least privileged and the principle of

688
00:37:59,770 --> 00:38:07,000
least / is not just I am it's also into

689
00:38:02,740 --> 00:38:10,810
what is installed in the container - you

690
00:38:07,000 --> 00:38:14,410
have to understand that docker access is

691
00:38:10,810 --> 00:38:16,960
root access the docker daemon runs has

692
00:38:14,410 --> 00:38:20,770
root in the system so if a user is added

693
00:38:16,960 --> 00:38:24,820
to that docker group they can do a quick

694
00:38:20,770 --> 00:38:27,490
privilege escalation and and get root

695
00:38:24,820 --> 00:38:29,530
with just one command line with one

696
00:38:27,490 --> 00:38:34,540
command and we'll go over that in the

697
00:38:29,530 --> 00:38:39,250
demo 3 make sure that your host systems

698
00:38:34,540 --> 00:38:42,100
kernel is patch so containers are not as

699
00:38:39,250 --> 00:38:44,320
a sort of a misnomer you don't have that

700
00:38:42,100 --> 00:38:49,299
level of isolation that you would have

701
00:38:44,320 --> 00:38:51,970
in a VM so if you need to secure your

702
00:38:49,300 --> 00:38:54,130
containers start at the host make sure

703
00:38:51,970 --> 00:38:56,980
that the host systems kernel is patched

704
00:38:54,130 --> 00:38:59,350
and if you take sure that you protect

705
00:38:56,980 --> 00:39:01,600
the integrity of the host you also

706
00:38:59,350 --> 00:39:03,490
protect some of you you also add some

707
00:39:01,600 --> 00:39:08,290
security into the containers that we are

708
00:39:03,490 --> 00:39:10,479
using so here is a

709
00:39:08,290 --> 00:39:13,300
demo of the trivial and I do mean

710
00:39:10,480 --> 00:39:16,690
trivial privilege escalation with dr.

711
00:39:13,300 --> 00:39:21,520
permissions so let's say we popped a

712
00:39:16,690 --> 00:39:23,620
user called quill and we got access what

713
00:39:21,520 --> 00:39:28,240
can we do from what can we do from here

714
00:39:23,620 --> 00:39:32,109
well let's see what group quill is added

715
00:39:28,240 --> 00:39:32,709
to all right he's added to he has the

716
00:39:32,110 --> 00:39:36,580
docker

717
00:39:32,710 --> 00:39:43,030
he has docker permissions so let's see

718
00:39:36,580 --> 00:39:48,790
if I run this command you know and we

719
00:39:43,030 --> 00:39:51,720
root so that happened fast so let's

720
00:39:48,790 --> 00:39:51,720
break that down a bit

721
00:39:52,860 --> 00:40:00,160
so when you when you're doing this sort

722
00:39:57,040 --> 00:40:02,050
of privilege escalation attack what

723
00:40:00,160 --> 00:40:05,259
you're doing is that you're taking each

724
00:40:02,050 --> 00:40:06,610
element of isolation from that the

725
00:40:05,260 --> 00:40:09,100
container house from the house and

726
00:40:06,610 --> 00:40:12,490
you're just setting it to the host

727
00:40:09,100 --> 00:40:15,180
machine so privileged access to the host

728
00:40:12,490 --> 00:40:18,430
devices kernel functions and other

729
00:40:15,180 --> 00:40:21,370
functionality you're just making sure

730
00:40:18,430 --> 00:40:24,160
that you're setting the net and IPC to

731
00:40:21,370 --> 00:40:27,310
the host and the ball you mount that you

732
00:40:24,160 --> 00:40:29,740
see here is just mounting the root

733
00:40:27,310 --> 00:40:32,590
directory of the host so you're opening

734
00:40:29,740 --> 00:40:35,890
up so your goal is is pull in an entire

735
00:40:32,590 --> 00:40:38,560
file system and open it up to and open

736
00:40:35,890 --> 00:40:42,009
it up to the container and then apply

737
00:40:38,560 --> 00:40:45,640
and Cheer sure root host is that you run

738
00:40:42,010 --> 00:40:48,460
that in the app line container now the

739
00:40:45,640 --> 00:40:51,400
best way to prevent this is just to

740
00:40:48,460 --> 00:40:54,150
control who is allowed to run docker in

741
00:40:51,400 --> 00:40:57,370
a given system now there is some

742
00:40:54,150 --> 00:40:59,590
experimentation with rootless docker but

743
00:40:57,370 --> 00:41:01,810
that's not production if you're talking

744
00:40:59,590 --> 00:41:04,330
about stable if you're talking about

745
00:41:01,810 --> 00:41:06,670
stable what's currently out there in the

746
00:41:04,330 --> 00:41:12,750
docker space make sure you'd eliminate

747
00:41:06,670 --> 00:41:16,810
access and who has access to one and so

748
00:41:12,750 --> 00:41:18,930
you may ask now right now where's the

749
00:41:16,810 --> 00:41:21,529
tool that automates all this work and

750
00:41:18,930 --> 00:41:23,839
I'm sorry I don't happen

751
00:41:21,530 --> 00:41:25,970
I've shown you tools tactics and

752
00:41:23,840 --> 00:41:28,790
strategies to help builders and security

753
00:41:25,970 --> 00:41:32,209
teams be more effective but tools don't

754
00:41:28,790 --> 00:41:35,029
build the tech teams built attack and

755
00:41:32,210 --> 00:41:37,580
there's no handyman in the can here none

756
00:41:35,030 --> 00:41:39,800
of these tools replaces the people that

757
00:41:37,580 --> 00:41:41,960
must use them and the communication that

758
00:41:39,800 --> 00:41:45,260
needs to take place between the security

759
00:41:41,960 --> 00:41:49,520
and between security operations and

760
00:41:45,260 --> 00:41:53,810
development so whether you are a builder

761
00:41:49,520 --> 00:41:56,480
or you're in InfoSec you're a plumber

762
00:41:53,810 --> 00:41:59,779
you're either laying down pipes checking

763
00:41:56,480 --> 00:42:03,350
for leaks checking for leaks or fixing

764
00:41:59,780 --> 00:42:06,050
them so by strengthening the connection

765
00:42:03,350 --> 00:42:08,660
between parts by analyzing your building

766
00:42:06,050 --> 00:42:10,460
materials and by preventing data leaks

767
00:42:08,660 --> 00:42:16,310
you can keep the flow of information

768
00:42:10,460 --> 00:42:23,690
going for your organization thank you

769
00:42:16,310 --> 00:42:24,740
for your time and attention didn't see

770
00:42:23,690 --> 00:42:27,830
much wallet

771
00:42:24,740 --> 00:42:33,350
didn't see much in the track or chat I

772
00:42:27,830 --> 00:42:36,860
see a taco and kids chapman but yeah if

773
00:42:33,350 --> 00:42:38,630
I have to hop off and to give room for

774
00:42:36,860 --> 00:42:41,240
the next speaker feel free to hit me up

775
00:42:38,630 --> 00:42:44,390
a feel free to hit me up ask me

776
00:42:41,240 --> 00:42:45,890
questions about how for nitty gritty and

777
00:42:44,390 --> 00:42:48,470
more details on how I do this

778
00:42:45,890 --> 00:42:50,930
more than willing to help and yet by the

779
00:42:48,470 --> 00:42:53,390
way the slide deck every resource that

780
00:42:50,930 --> 00:43:01,450
I'm going to is that tiny si slash flex

781
00:42:53,390 --> 00:43:01,450
seal yep

782
00:43:04,770 --> 00:43:10,050
so um yeah thank you for your time and

783
00:43:07,810 --> 00:43:10,049
attention

784
00:43:21,110 --> 00:43:23,170
you

