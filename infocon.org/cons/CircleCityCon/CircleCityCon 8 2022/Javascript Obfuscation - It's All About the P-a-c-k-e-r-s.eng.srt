1
00:00:00,540 --> 00:00:11,599
[Music]

2
00:00:11,599 --> 00:00:13,040
hi everybody

3
00:00:13,040 --> 00:00:15,360
my name

4
00:00:15,519 --> 00:00:16,160
and is

5
00:00:16,160 --> 00:00:18,880
or is my name it's not a nickname and

6
00:00:18,880 --> 00:00:20,640
i'm here to talk to you about javascript

7
00:00:20,640 --> 00:00:23,199
obfuscation it's all about the packers

8
00:00:23,199 --> 00:00:24,480
um

9
00:00:24,480 --> 00:00:26,960
and as we move forward uh toward the end

10
00:00:26,960 --> 00:00:29,279
of the presentation hopefully uh the

11
00:00:29,279 --> 00:00:30,480
meaning of

12
00:00:30,480 --> 00:00:32,079
of the name of the presentation would

13
00:00:32,079 --> 00:00:34,239
make much more sense

14
00:00:34,239 --> 00:00:36,399
um and maybe we will decide to change

15
00:00:36,399 --> 00:00:38,320
the name of the presentation we will see

16
00:00:38,320 --> 00:00:39,680
as we move forward

17
00:00:39,680 --> 00:00:42,079
um

18
00:00:42,840 --> 00:00:46,399
so let's start from the beginning right

19
00:00:46,399 --> 00:00:49,680
uh i will introduce myself shortly um as

20
00:00:49,680 --> 00:00:51,600
i mentioned my name is orikatz i'm from

21
00:00:51,600 --> 00:00:53,440
aust israel chapter lead i work for

22
00:00:53,440 --> 00:00:54,559
akamai

23
00:00:54,559 --> 00:00:58,719
um i'm a data driven security researcher

24
00:00:58,719 --> 00:01:00,000
which means

25
00:01:00,000 --> 00:01:00,800
well

26
00:01:00,800 --> 00:01:02,559
at least at my eyes that i'm really

27
00:01:02,559 --> 00:01:04,559
really focused on data but i'm really

28
00:01:04,559 --> 00:01:07,439
focused with data to get security

29
00:01:07,439 --> 00:01:09,680
insights and and

30
00:01:09,680 --> 00:01:11,760
and more to that

31
00:01:11,760 --> 00:01:15,280
when i try to classify what i do my well

32
00:01:15,280 --> 00:01:18,000
always my goal my objective is to to to

33
00:01:18,000 --> 00:01:20,080
take security challenges and turn them

34
00:01:20,080 --> 00:01:22,400
into science and solutions to move them

35
00:01:22,400 --> 00:01:24,840
into the science and the solution space

36
00:01:24,840 --> 00:01:26,400
um

37
00:01:26,400 --> 00:01:28,080
and last but not least i have very

38
00:01:28,080 --> 00:01:30,240
boring social network persona therefore

39
00:01:30,240 --> 00:01:32,640
i will not encourage you to follow me on

40
00:01:32,640 --> 00:01:35,119
my twitter account or underscore cats

41
00:01:35,119 --> 00:01:37,360
really boring i'm tweeting once every

42
00:01:37,360 --> 00:01:39,680
few weeks and it's boring don't do that

43
00:01:39,680 --> 00:01:42,079
i encourage you not to do that

44
00:01:42,079 --> 00:01:43,119
um

45
00:01:43,119 --> 00:01:45,439
so let's start the presentation so

46
00:01:45,439 --> 00:01:48,240
in a sense well my presence started um

47
00:01:48,240 --> 00:01:50,079
over a year ago in a sense i was doing

48
00:01:50,079 --> 00:01:51,920
some research research about javascript

49
00:01:51,920 --> 00:01:53,280
obfuscation

50
00:01:53,280 --> 00:01:55,040
and i published three different blog

51
00:01:55,040 --> 00:01:58,079
posts on in that context um

52
00:01:58,079 --> 00:02:00,320
the first one was more into

53
00:02:00,320 --> 00:02:01,840
different techniques being used to

54
00:02:01,840 --> 00:02:04,399
obviously javascript code

55
00:02:04,399 --> 00:02:08,878
the second one was taking one very um

56
00:02:08,878 --> 00:02:11,120
relevant example for office kd

57
00:02:11,120 --> 00:02:13,040
javascript and trying to de-obfuscate

58
00:02:13,040 --> 00:02:15,120
that given code which is the picture

59
00:02:15,120 --> 00:02:17,040
that you see on the right on the screen

60
00:02:17,040 --> 00:02:18,720
and the third one was to try to do some

61
00:02:18,720 --> 00:02:20,800
more statistical point of view on the of

62
00:02:20,800 --> 00:02:23,200
javascript foscation on the landscape

63
00:02:23,200 --> 00:02:25,040
and and and when i was doing that

64
00:02:25,040 --> 00:02:27,520
research and publishing that um looking

65
00:02:27,520 --> 00:02:28,959
at that given an example that you can

66
00:02:28,959 --> 00:02:31,440
see on the right it took quite some time

67
00:02:31,440 --> 00:02:33,519
to do that it took me you know

68
00:02:33,519 --> 00:02:36,000
a matter of skill set and a matter of

69
00:02:36,000 --> 00:02:38,080
resources and time to do the obfuscation

70
00:02:38,080 --> 00:02:40,000
and i asked myself the question can i do

71
00:02:40,000 --> 00:02:41,120
that

72
00:02:41,120 --> 00:02:43,519
in a much better way can i do that on

73
00:02:43,519 --> 00:02:46,560
very high scale kind of execution of

74
00:02:46,560 --> 00:02:49,120
that same thing or very similar to that

75
00:02:49,120 --> 00:02:52,480
um so that was my first objective uh and

76
00:02:52,480 --> 00:02:54,000
the second objective in that content was

77
00:02:54,000 --> 00:02:55,840
to be able to take a javascript code and

78
00:02:55,840 --> 00:02:58,159
being able to identify that as being

79
00:02:58,159 --> 00:03:01,599
javascript code being obfuscated um

80
00:03:01,599 --> 00:03:02,640
with a

81
00:03:02,640 --> 00:03:04,640
with a preferable kind of result that

82
00:03:04,640 --> 00:03:06,560
can enable me to say if that giving

83
00:03:06,560 --> 00:03:08,640
javascript code is actually malicious

84
00:03:08,640 --> 00:03:10,720
right or physician well and we will talk

85
00:03:10,720 --> 00:03:13,360
about it obfuscation is not always means

86
00:03:13,360 --> 00:03:14,720
something bad

87
00:03:14,720 --> 00:03:16,480
and we'll try to explain that a bit more

88
00:03:16,480 --> 00:03:19,040
uh during the presentation now

89
00:03:19,040 --> 00:03:20,319
the third

90
00:03:20,319 --> 00:03:23,440
objective that i had

91
00:03:27,360 --> 00:03:29,280
the third objective that i had was to do

92
00:03:29,280 --> 00:03:30,720
that on

93
00:03:30,720 --> 00:03:33,360
static analysis kind of you know and um

94
00:03:33,360 --> 00:03:34,400
you know

95
00:03:34,400 --> 00:03:36,720
looking into the data and what that mean

96
00:03:36,720 --> 00:03:39,040
you can take javascript and do rendering

97
00:03:39,040 --> 00:03:41,280
for the javascript and then try to

98
00:03:41,280 --> 00:03:42,400
understand what the javascript is

99
00:03:42,400 --> 00:03:43,920
actually doing but i

100
00:03:43,920 --> 00:03:46,319
one of my objectives is not to do that

101
00:03:46,319 --> 00:03:48,319
for many reasons and some of them are

102
00:03:48,319 --> 00:03:49,840
related to performance and we will talk

103
00:03:49,840 --> 00:03:52,080
about that and and try to better explain

104
00:03:52,080 --> 00:03:53,599
that later on

105
00:03:53,599 --> 00:03:56,319
and my final objective you know at the

106
00:03:56,319 --> 00:03:58,560
beginning of that research was to try to

107
00:03:58,560 --> 00:04:00,480
assume the pareto principle

108
00:04:00,480 --> 00:04:01,840
and priority principles say the

109
00:04:01,840 --> 00:04:03,040
following thing

110
00:04:03,040 --> 00:04:06,239
80 of the outcome is a result of 20

111
00:04:06,239 --> 00:04:08,720
percent of the causes

112
00:04:08,720 --> 00:04:09,760
and and

113
00:04:09,760 --> 00:04:12,159
in our context is

114
00:04:12,159 --> 00:04:13,200
well i

115
00:04:13,200 --> 00:04:14,480
don't

116
00:04:14,480 --> 00:04:17,440
uh try to solve the entire uh javascript

117
00:04:17,440 --> 00:04:19,839
fuscation um um

118
00:04:19,839 --> 00:04:22,160
phenomena or the detection javascript

119
00:04:22,160 --> 00:04:24,000
confiscation phenomena i'm trying to

120
00:04:24,000 --> 00:04:27,120
detect 80 of the cases that i consider

121
00:04:27,120 --> 00:04:29,360
them creating being created by twenty

122
00:04:29,360 --> 00:04:31,600
percent of the javascript obfuscation

123
00:04:31,600 --> 00:04:33,840
packers all right packers are the the

124
00:04:33,840 --> 00:04:36,320
software that will uh take a uh a

125
00:04:36,320 --> 00:04:38,320
javascript code and do a deal

126
00:04:38,320 --> 00:04:40,800
sorry obfuscation of that given code so

127
00:04:40,800 --> 00:04:42,880
that's my assumption i'm not trying to

128
00:04:42,880 --> 00:04:45,360
detect all the the coverage that we have

129
00:04:45,360 --> 00:04:47,600
out there for javascription only part of

130
00:04:47,600 --> 00:04:48,880
that

131
00:04:48,880 --> 00:04:50,960
with that in mind a few questions that

132
00:04:50,960 --> 00:04:52,320
cross my mind

133
00:04:52,320 --> 00:04:54,800
uh first question was uh why and how

134
00:04:54,800 --> 00:04:56,800
javascript is being office game

135
00:04:56,800 --> 00:04:57,759
um

136
00:04:57,759 --> 00:04:59,120
and we'll address that in the in the

137
00:04:59,120 --> 00:05:02,800
following um um slide

138
00:05:03,039 --> 00:05:04,880
the second question that came to mind is

139
00:05:04,880 --> 00:05:07,039
what are the numbers out there right so

140
00:05:07,039 --> 00:05:08,479
i'm into the

141
00:05:08,479 --> 00:05:12,479
um you know um goal of trying to detect

142
00:05:12,479 --> 00:05:14,400
a javascript being obfuscated in the

143
00:05:14,400 --> 00:05:16,720
wild in in scale kind of

144
00:05:16,720 --> 00:05:19,759
uh capabilities but the question is how

145
00:05:19,759 --> 00:05:20,720
that

146
00:05:20,720 --> 00:05:22,880
javascript frustration phenomena

147
00:05:22,880 --> 00:05:24,720
is widely used in the

148
00:05:24,720 --> 00:05:27,039
in the wild right so that's a question

149
00:05:27,039 --> 00:05:28,560
that i have in mind that i wanted to

150
00:05:28,560 --> 00:05:30,800
address and we will answer that

151
00:05:30,800 --> 00:05:32,560
uh the third question that crossed my

152
00:05:32,560 --> 00:05:35,039
mind was so jeopardy confiscation does

153
00:05:35,039 --> 00:05:37,520
it always mean malicious or not so so

154
00:05:37,520 --> 00:05:39,680
the spoiler for that it's and i assume

155
00:05:39,680 --> 00:05:41,840
that most of you or some of you are are

156
00:05:41,840 --> 00:05:43,680
familiar with that is that affiliation

157
00:05:43,680 --> 00:05:46,000
doesn't mean a bad thing right but we'll

158
00:05:46,000 --> 00:05:47,680
go over that and see some example and

159
00:05:47,680 --> 00:05:50,400
try to better understand once javascript

160
00:05:50,400 --> 00:05:52,000
is being used in a while and it's not

161
00:05:52,000 --> 00:05:53,600
malicious what are the use cases and

162
00:05:53,600 --> 00:05:56,160
what we're seeing out there

163
00:05:56,160 --> 00:05:57,759
and the final question was is it

164
00:05:57,759 --> 00:05:59,280
possible to detect javascript for

165
00:05:59,280 --> 00:06:02,160
sketching right uh and we will go over

166
00:06:02,160 --> 00:06:04,240
that and try to figure out how to do

167
00:06:04,240 --> 00:06:06,800
that uh from a technical point of view

168
00:06:06,800 --> 00:06:08,720
and following to that we will also try

169
00:06:08,720 --> 00:06:10,479
to address you know some of the

170
00:06:10,479 --> 00:06:12,560
questions that we well as i said i

171
00:06:12,560 --> 00:06:14,479
appear some spoiler for that we know

172
00:06:14,479 --> 00:06:16,319
that not always javascript being

173
00:06:16,319 --> 00:06:18,800
obfuscated means something bad therefore

174
00:06:18,800 --> 00:06:21,120
can we differentiate be between

175
00:06:21,120 --> 00:06:24,000
javascript that was obfuscated

176
00:06:24,000 --> 00:06:25,680
and means something good versus

177
00:06:25,680 --> 00:06:27,840
something that mean something bad mean

178
00:06:27,840 --> 00:06:30,080
malicious in that context

179
00:06:30,080 --> 00:06:31,520
so this is part of the thing we're going

180
00:06:31,520 --> 00:06:32,840
to cover

181
00:06:32,840 --> 00:06:35,199
today um so let's start from the first

182
00:06:35,199 --> 00:06:37,039
question right why and how javascript is

183
00:06:37,039 --> 00:06:38,639
being obscured and to try to better

184
00:06:38,639 --> 00:06:40,240
understand the why

185
00:06:40,240 --> 00:06:42,800
we need to discuss javascript right

186
00:06:42,800 --> 00:06:45,199
javascript is a client-side uh code

187
00:06:45,199 --> 00:06:47,440
right it's a code that is being exposed

188
00:06:47,440 --> 00:06:49,440
to the end users being

189
00:06:49,440 --> 00:06:52,080
executed most cases on our browser

190
00:06:52,080 --> 00:06:54,240
and once being executed we actually know

191
00:06:54,240 --> 00:06:56,080
what the code is supposed to do before

192
00:06:56,080 --> 00:06:58,000
it's been executed because it's it's

193
00:06:58,000 --> 00:07:00,319
visible to us as opposed to server-side

194
00:07:00,319 --> 00:07:04,560
code right and in that context

195
00:07:04,560 --> 00:07:06,639
that can explain why javascript is being

196
00:07:06,639 --> 00:07:09,360
obfuscated and regardless if it's for a

197
00:07:09,360 --> 00:07:12,000
good reason or a bad reason right

198
00:07:12,000 --> 00:07:13,199
regardless if you are trying to

199
00:07:13,199 --> 00:07:15,919
obfuscate a legit kind of code or you're

200
00:07:15,919 --> 00:07:18,479
trying to obfuscate the malicious code

201
00:07:18,479 --> 00:07:20,400
because if someone wants

202
00:07:20,400 --> 00:07:22,479
to make sure that it will be hard for

203
00:07:22,479 --> 00:07:24,160
you to understand

204
00:07:24,160 --> 00:07:26,720
what that code being executed on your

205
00:07:26,720 --> 00:07:28,800
browser is doing you will try to

206
00:07:28,800 --> 00:07:30,800
auto-escape the code and try to make it

207
00:07:30,800 --> 00:07:33,120
much harder for you to try to understand

208
00:07:33,120 --> 00:07:34,639
the context of the code the

209
00:07:34,639 --> 00:07:36,000
functionality of the code and once the

210
00:07:36,000 --> 00:07:37,840
code is actually executing right it's

211
00:07:37,840 --> 00:07:40,160
not impossible but it makes your your

212
00:07:40,160 --> 00:07:41,680
life much harder to understand when

213
00:07:41,680 --> 00:07:43,520
someone is doing that

214
00:07:43,520 --> 00:07:44,960
now

215
00:07:44,960 --> 00:07:46,560
in order to do that it will probably

216
00:07:46,560 --> 00:07:48,560
create a code that is unreadable and

217
00:07:48,560 --> 00:07:50,000
debuggable

218
00:07:50,000 --> 00:07:52,000
and when you think about it in the

219
00:07:52,000 --> 00:07:54,560
context of malicious code

220
00:07:54,560 --> 00:07:57,120
or even a benign code in many cases it

221
00:07:57,120 --> 00:07:59,120
will create a code that is obfuscated

222
00:07:59,120 --> 00:08:01,440
because it will invade the variety of

223
00:08:01,440 --> 00:08:03,280
detection techniques that are using

224
00:08:03,280 --> 00:08:06,240
text-based or hash-based detection

225
00:08:06,240 --> 00:08:07,599
capabilities

226
00:08:07,599 --> 00:08:09,840
so it could be someone that

227
00:08:09,840 --> 00:08:13,919
created a code that it doesn't want um

228
00:08:13,919 --> 00:08:16,800
for example search engines to see what

229
00:08:16,800 --> 00:08:17,520
uh

230
00:08:17,520 --> 00:08:19,680
this code really represent from a

231
00:08:19,680 --> 00:08:21,360
texture point of view so we will do an

232
00:08:21,360 --> 00:08:22,879
obfuscation for that

233
00:08:22,879 --> 00:08:25,120
uh you can imagine for example we see

234
00:08:25,120 --> 00:08:26,479
one of those examples

235
00:08:26,479 --> 00:08:28,960
an email address if someone created

236
00:08:28,960 --> 00:08:31,520
um contain an email address in the

237
00:08:31,520 --> 00:08:32,958
content of the page and you want to

238
00:08:32,958 --> 00:08:35,039
obfuscate that you might use javascript

239
00:08:35,039 --> 00:08:37,039
frustration to try to hide in that

240
00:08:37,039 --> 00:08:39,200
context because you don't want search

241
00:08:39,200 --> 00:08:40,719
engine to find that

242
00:08:40,719 --> 00:08:43,360
kind of information or just you know uh

243
00:08:43,360 --> 00:08:45,440
scanner internet scanners or variety of

244
00:08:45,440 --> 00:08:48,000
you know bots that scan the internet now

245
00:08:48,000 --> 00:08:49,920
from malicious point of view if someone

246
00:08:49,920 --> 00:08:53,040
created a polymorphism kind of code that

247
00:08:53,040 --> 00:08:55,360
constantly change if you try to unders

248
00:08:55,360 --> 00:08:56,800
if you try to

249
00:08:56,800 --> 00:08:59,040
track that code by creating signatures

250
00:08:59,040 --> 00:09:01,440
that are text based or hash based

251
00:09:01,440 --> 00:09:03,200
obviously detection will not work

252
00:09:03,200 --> 00:09:05,760
because the code is the well

253
00:09:05,760 --> 00:09:08,320
the representation of the malicious code

254
00:09:08,320 --> 00:09:11,519
continuously changing as we create new

255
00:09:11,519 --> 00:09:14,080
samples of an obfuscated code of that

256
00:09:14,080 --> 00:09:16,720
same malicious uh

257
00:09:16,720 --> 00:09:19,440
originally malicious code so this is the

258
00:09:19,440 --> 00:09:22,160
why right and how well there are a

259
00:09:22,160 --> 00:09:24,160
variety of techniques and i will go over

260
00:09:24,160 --> 00:09:25,839
three of those that are well the most

261
00:09:25,839 --> 00:09:27,760
popular and the most you know

262
00:09:27,760 --> 00:09:30,720
um common being used so you can create

263
00:09:30,720 --> 00:09:32,959
an app you know to create an obvious key

264
00:09:32,959 --> 00:09:34,560
code you can create a code that is

265
00:09:34,560 --> 00:09:36,480
repetitive or meaningless

266
00:09:36,480 --> 00:09:38,240
in the context of the function names in

267
00:09:38,240 --> 00:09:39,839
the context of the variables that are

268
00:09:39,839 --> 00:09:41,200
being used

269
00:09:41,200 --> 00:09:42,959
and once you are doing that that makes

270
00:09:42,959 --> 00:09:44,880
the code unreadable and in a way

271
00:09:44,880 --> 00:09:46,080
undebugable

272
00:09:46,080 --> 00:09:48,240
you can use an anti-debugging code

273
00:09:48,240 --> 00:09:49,920
techniques in order to make sure that if

274
00:09:49,920 --> 00:09:52,959
someone will try to debug your code it

275
00:09:52,959 --> 00:09:55,040
will be harder for him to do that right

276
00:09:55,040 --> 00:09:58,160
um it's not impossible again uh at the

277
00:09:58,160 --> 00:10:00,320
end of the day it's code that is being

278
00:10:00,320 --> 00:10:01,839
executed on the client and therefore

279
00:10:01,839 --> 00:10:03,519
it's always possible to do that but it

280
00:10:03,519 --> 00:10:05,360
might make your life much harder to do

281
00:10:05,360 --> 00:10:07,920
this once someone is putting more traps

282
00:10:07,920 --> 00:10:09,600
in that code

283
00:10:09,600 --> 00:10:12,079
and finally well using a code that is

284
00:10:12,079 --> 00:10:13,600
doing um

285
00:10:13,600 --> 00:10:17,120
um computer kind of resources and time

286
00:10:17,120 --> 00:10:20,079
exhausting meaning running dead code

287
00:10:20,079 --> 00:10:22,240
that just being you know executed

288
00:10:22,240 --> 00:10:24,399
without any meaning which will create

289
00:10:24,399 --> 00:10:26,560
much more time for the page to be

290
00:10:26,560 --> 00:10:27,839
rendered

291
00:10:27,839 --> 00:10:30,560
or pointing putting timers into the code

292
00:10:30,560 --> 00:10:32,959
being executed we'll create a situation

293
00:10:32,959 --> 00:10:35,120
where a given code will take much more

294
00:10:35,120 --> 00:10:37,920
time to be executed to be rendered and

295
00:10:37,920 --> 00:10:39,680
as a result of that will create some

296
00:10:39,680 --> 00:10:42,240
issues from a performance point of view

297
00:10:42,240 --> 00:10:43,760
and this will

298
00:10:43,760 --> 00:10:46,079
and this given item is actually related

299
00:10:46,079 --> 00:10:47,120
to

300
00:10:47,120 --> 00:10:48,560
to one of my objectives from the

301
00:10:48,560 --> 00:10:50,480
beginning when i said that i don't want

302
00:10:50,480 --> 00:10:51,839
to create a

303
00:10:51,839 --> 00:10:54,160
solution that has a performance issue

304
00:10:54,160 --> 00:10:56,079
therefore i'm not rendering the page so

305
00:10:56,079 --> 00:10:58,839
that was my incentive from the

306
00:10:58,839 --> 00:11:01,920
beginning now how the story start right

307
00:11:01,920 --> 00:11:05,760
uh so i told you at the beginning

308
00:11:07,040 --> 00:11:09,440
that a year ago i was looking into some

309
00:11:09,440 --> 00:11:11,279
javascript code and was doing some

310
00:11:11,279 --> 00:11:13,680
publication around that and while i was

311
00:11:13,680 --> 00:11:15,760
doing that i was

312
00:11:15,760 --> 00:11:18,320
seeing four different examples for

313
00:11:18,320 --> 00:11:20,720
javascript coding office cadence right

314
00:11:20,720 --> 00:11:22,640
the for example that you see on the

315
00:11:22,640 --> 00:11:24,560
screen so this is a part of the code

316
00:11:24,560 --> 00:11:27,120
this is a one function being taken from

317
00:11:27,120 --> 00:11:28,959
different samples of code

318
00:11:28,959 --> 00:11:30,800
and when you look at that at first

319
00:11:30,800 --> 00:11:32,959
glance you can say hey it's it's not the

320
00:11:32,959 --> 00:11:34,480
same right it's different

321
00:11:34,480 --> 00:11:36,959
but if you take a second glance on on on

322
00:11:36,959 --> 00:11:39,200
that given code you do zoom out

323
00:11:39,200 --> 00:11:41,200
you will see that actually there is some

324
00:11:41,200 --> 00:11:43,839
pattern here that repeats itself in a

325
00:11:43,839 --> 00:11:45,040
sense right

326
00:11:45,040 --> 00:11:47,200
but i will tell you hey it's a different

327
00:11:47,200 --> 00:11:48,800
it's a different

328
00:11:48,800 --> 00:11:51,279
code in the context of well the meaning

329
00:11:51,279 --> 00:11:52,560
and the context of the code being

330
00:11:52,560 --> 00:11:54,800
executed because those four different

331
00:11:54,800 --> 00:11:57,279
examples representing the the

332
00:11:57,279 --> 00:11:59,519
the two upper examples are representing

333
00:11:59,519 --> 00:12:02,560
phishing examples one for a bank and one

334
00:12:02,560 --> 00:12:04,480
for some social networks

335
00:12:04,480 --> 00:12:05,839
and on the bottom you can see on the

336
00:12:05,839 --> 00:12:07,839
left side it's mage card kind of

337
00:12:07,839 --> 00:12:09,920
javascript being obfuscated on on the

338
00:12:09,920 --> 00:12:12,160
right side it's a mellow dropper being

339
00:12:12,160 --> 00:12:13,440
off escape

340
00:12:13,440 --> 00:12:14,560
so wait

341
00:12:14,560 --> 00:12:16,480
it's different samples of code that we

342
00:12:16,480 --> 00:12:18,399
say that they look a bit different but

343
00:12:18,399 --> 00:12:20,160
we said that they look

344
00:12:20,160 --> 00:12:22,320
look a bit the same right the same

345
00:12:22,320 --> 00:12:24,240
pattern but they're actually different

346
00:12:24,240 --> 00:12:26,720
because they are actually executing a

347
00:12:26,720 --> 00:12:28,720
different kind of threat using different

348
00:12:28,720 --> 00:12:31,040
kind of functionality of javascript to

349
00:12:31,040 --> 00:12:32,560
execute you know

350
00:12:32,560 --> 00:12:34,320
different kind of you know

351
00:12:34,320 --> 00:12:36,880
threats to to the clients

352
00:12:36,880 --> 00:12:38,560
but what we're actually what we're

353
00:12:38,560 --> 00:12:41,120
seeing is it's an obfuscated function

354
00:12:41,120 --> 00:12:43,760
being used by the same packer

355
00:12:43,760 --> 00:12:45,680
on those four different examples and

356
00:12:45,680 --> 00:12:47,200
this is the pattern that i was looking

357
00:12:47,200 --> 00:12:49,519
for right it's an anomalous javascript

358
00:12:49,519 --> 00:12:51,600
function that has a variable that that

359
00:12:51,600 --> 00:12:54,079
variable contains a name of the function

360
00:12:54,079 --> 00:12:56,639
well a function in a sense and that

361
00:12:56,639 --> 00:12:58,399
function is doing a while with in a

362
00:12:58,399 --> 00:13:00,480
decreasing kind of uh

363
00:13:00,480 --> 00:13:01,360
um

364
00:13:01,360 --> 00:13:03,760
way on an integer that was applied to

365
00:13:03,760 --> 00:13:06,000
the original function

366
00:13:06,000 --> 00:13:08,399
and inside that while we are doing some

367
00:13:08,399 --> 00:13:10,399
reshuffling of

368
00:13:10,399 --> 00:13:11,680
one

369
00:13:11,680 --> 00:13:13,519
of the parameters that was originally

370
00:13:13,519 --> 00:13:16,160
supplied to the upper function doing

371
00:13:16,160 --> 00:13:17,040
some

372
00:13:17,040 --> 00:13:20,399
um shifting and pushing meaning doing

373
00:13:20,399 --> 00:13:21,200
some

374
00:13:21,200 --> 00:13:23,839
changes of that given array being

375
00:13:23,839 --> 00:13:24,959
supplied

376
00:13:24,959 --> 00:13:26,639
the elements of the order of the

377
00:13:26,639 --> 00:13:28,639
elements of that array

378
00:13:28,639 --> 00:13:30,880
and that is actually the return value of

379
00:13:30,880 --> 00:13:33,279
that function so that's a classic

380
00:13:33,279 --> 00:13:35,600
obfuscated function being executed by a

381
00:13:35,600 --> 00:13:38,720
given packer right

382
00:13:38,720 --> 00:13:41,040
so now comes the question

383
00:13:41,040 --> 00:13:43,279
so we understand that there are the same

384
00:13:43,279 --> 00:13:45,760
threats or well different threats being

385
00:13:45,760 --> 00:13:48,240
used using the same packer to do the

386
00:13:48,240 --> 00:13:50,880
same functionality of obfuscation

387
00:13:50,880 --> 00:13:53,040
now the question comes so

388
00:13:53,040 --> 00:13:55,680
can we actually detect that pattern

389
00:13:55,680 --> 00:13:57,279
right we don't want to detect the name

390
00:13:57,279 --> 00:13:59,040
of the variable we don't want to take

391
00:13:59,040 --> 00:14:01,040
things that are constantly changing as

392
00:14:01,040 --> 00:14:03,920
we saw before but we want to detect that

393
00:14:03,920 --> 00:14:05,920
given pattern of the functionality being

394
00:14:05,920 --> 00:14:08,320
executed so in order to do that what i

395
00:14:08,320 --> 00:14:10,240
was doing i created a proof of concept

396
00:14:10,240 --> 00:14:12,880
for that uh in in that proof of concept

397
00:14:12,880 --> 00:14:16,480
what i was using is an ast kind of um

398
00:14:16,480 --> 00:14:19,120
representation of javascript code ast is

399
00:14:19,120 --> 00:14:22,000
an abstract syntax tree it takes the the

400
00:14:22,000 --> 00:14:23,920
given code it will create a structure

401
00:14:23,920 --> 00:14:26,000
for that code and if you can see on the

402
00:14:26,000 --> 00:14:27,040
left side

403
00:14:27,040 --> 00:14:28,560
that's one of the example that we see

404
00:14:28,560 --> 00:14:31,199
the page before this is the on the right

405
00:14:31,199 --> 00:14:32,399
side now you can see that the

406
00:14:32,399 --> 00:14:36,079
representation of that in ast right

407
00:14:36,079 --> 00:14:38,160
uh so it's a structured kind of way to

408
00:14:38,160 --> 00:14:39,760
represent some of the code being

409
00:14:39,760 --> 00:14:41,120
executed

410
00:14:41,120 --> 00:14:43,440
now if we will try to think on the

411
00:14:43,440 --> 00:14:45,440
pattern that we were looking before

412
00:14:45,440 --> 00:14:47,519
right without the verbal name without

413
00:14:47,519 --> 00:14:50,000
things that might change from

414
00:14:50,000 --> 00:14:52,240
one implementation to the other

415
00:14:52,240 --> 00:14:54,320
just the functionality so when we look

416
00:14:54,320 --> 00:14:56,480
on the ast tree and we will look on

417
00:14:56,480 --> 00:14:58,959
specific places we might ask ourselves a

418
00:14:58,959 --> 00:15:00,959
question do we see a structure that has

419
00:15:00,959 --> 00:15:03,279
a function and that function has a y

420
00:15:03,279 --> 00:15:04,560
statement

421
00:15:04,560 --> 00:15:06,800
and it's a decreasing kind of while

422
00:15:06,800 --> 00:15:08,160
statement

423
00:15:08,160 --> 00:15:11,040
on an integer and can we see some

424
00:15:11,040 --> 00:15:13,600
pushing and shifting of a given element

425
00:15:13,600 --> 00:15:16,800
in an array so that's the way for me to

426
00:15:16,800 --> 00:15:18,720
that that was the way for me to take the

427
00:15:18,720 --> 00:15:21,760
concept of trying to find patterns

428
00:15:21,760 --> 00:15:22,480
of

429
00:15:22,480 --> 00:15:24,959
obfuscated functions or obfuscated

430
00:15:24,959 --> 00:15:28,079
packers and try to implement that and

431
00:15:28,079 --> 00:15:29,279
that's the proof of concept that i

432
00:15:29,279 --> 00:15:31,839
created i'm taking a javascript code i'm

433
00:15:31,839 --> 00:15:34,800
doing an astr presentation for that i'm

434
00:15:34,800 --> 00:15:36,959
running on that looking into the for the

435
00:15:36,959 --> 00:15:39,120
pattern that i you know was able to

436
00:15:39,120 --> 00:15:41,600
create and if i am seeing that i'm

437
00:15:41,600 --> 00:15:43,199
actually matching the detection and i

438
00:15:43,199 --> 00:15:45,279
was doing that in python

439
00:15:45,279 --> 00:15:46,880
so that's the concept and that the

440
00:15:46,880 --> 00:15:48,959
technique for me to detect those kind of

441
00:15:48,959 --> 00:15:51,199
signatures right the those pattern-based

442
00:15:51,199 --> 00:15:54,320
signatures of obfuscated code and i was

443
00:15:54,320 --> 00:15:56,560
doing that for five different packers

444
00:15:56,560 --> 00:15:59,199
obviously packers right um and here are

445
00:15:59,199 --> 00:16:01,040
the five well you can see three the the

446
00:16:01,040 --> 00:16:03,519
other page has another two so the first

447
00:16:03,519 --> 00:16:06,959
two are actually a basic ones um

448
00:16:06,959 --> 00:16:10,160
both of them are doing uh decryption or

449
00:16:10,160 --> 00:16:12,320
unescaping of values which are really

450
00:16:12,320 --> 00:16:16,480
really well basic from uh um

451
00:16:16,480 --> 00:16:18,079
from a fuscation point of view they are

452
00:16:18,079 --> 00:16:20,320
not really complex um

453
00:16:20,320 --> 00:16:22,160
and most of the well at least it's the

454
00:16:22,160 --> 00:16:24,800
second one i i knew that it's an old one

455
00:16:24,800 --> 00:16:26,320
that mostly been used for fishing

456
00:16:26,320 --> 00:16:27,519
websites

457
00:16:27,519 --> 00:16:30,079
uh the third one and and well the third

458
00:16:30,079 --> 00:16:31,839
and fourth and the fifth are actually

459
00:16:31,839 --> 00:16:33,680
well they are different but they are the

460
00:16:33,680 --> 00:16:34,480
same

461
00:16:34,480 --> 00:16:35,680
they are different because it's a

462
00:16:35,680 --> 00:16:37,759
different implementation but there's

463
00:16:37,759 --> 00:16:39,600
they are the same because all of them

464
00:16:39,600 --> 00:16:41,120
are actually doing some sort of a

465
00:16:41,120 --> 00:16:43,440
manipulation of a given payload

466
00:16:43,440 --> 00:16:45,759
someone is providing a payload and those

467
00:16:45,759 --> 00:16:48,240
functions will try to do some splitting

468
00:16:48,240 --> 00:16:50,720
of the data doing rent while doing

469
00:16:50,720 --> 00:16:53,839
reshifting or um changing the order of

470
00:16:53,839 --> 00:16:54,800
the data

471
00:16:54,800 --> 00:16:56,959
doing some padding or adding you know

472
00:16:56,959 --> 00:17:00,240
some um encoding mechanism on the given

473
00:17:00,240 --> 00:17:04,640
data base64 or your url encoding kind of

474
00:17:04,640 --> 00:17:06,160
uh decryption

475
00:17:06,160 --> 00:17:08,559
so that's the first those are the five

476
00:17:08,559 --> 00:17:10,799
different examples five different

477
00:17:10,799 --> 00:17:12,559
examples that represent five different

478
00:17:12,559 --> 00:17:15,280
packers then i decided that i want to

479
00:17:15,280 --> 00:17:17,679
focus my research on those examples and

480
00:17:17,679 --> 00:17:19,760
all those examples only

481
00:17:19,760 --> 00:17:22,000
and i gave each of those different uh

482
00:17:22,000 --> 00:17:24,880
packers a name uh actually i was doing

483
00:17:24,880 --> 00:17:26,880
that a bit randomly

484
00:17:26,880 --> 00:17:28,720
as you can see on example number four

485
00:17:28,720 --> 00:17:31,440
which is called packer right with a dash

486
00:17:31,440 --> 00:17:33,919
between the the letters so i decided to

487
00:17:33,919 --> 00:17:35,360
do that because

488
00:17:35,360 --> 00:17:38,559
once you call that function the name of

489
00:17:38,559 --> 00:17:41,440
the variables or the parameters being uh

490
00:17:41,440 --> 00:17:44,320
delivered to that function are p a c

491
00:17:44,320 --> 00:17:46,799
k e r which represent becker

492
00:17:46,799 --> 00:17:50,160
and that's how i named that given um

493
00:17:50,160 --> 00:17:52,720
um pecker that i'm that i'm trying to

494
00:17:52,720 --> 00:17:55,360
find a way to detect it in the world

495
00:17:55,360 --> 00:17:57,840
so we have that functionality

496
00:17:57,840 --> 00:17:59,840
we have you know the proof of concept of

497
00:17:59,840 --> 00:18:01,760
taking a javascript page being able to

498
00:18:01,760 --> 00:18:02,880
do some

499
00:18:02,880 --> 00:18:05,360
uh parsing of the page being able to run

500
00:18:05,360 --> 00:18:06,880
on that parsing and match some

501
00:18:06,880 --> 00:18:08,559
signatures that i created for five

502
00:18:08,559 --> 00:18:11,200
different uh packers uh javascript

503
00:18:11,200 --> 00:18:12,640
frustration packers

504
00:18:12,640 --> 00:18:14,320
here's some of the results right we need

505
00:18:14,320 --> 00:18:16,400
to verify that we're doing the right

506
00:18:16,400 --> 00:18:18,240
work here so

507
00:18:18,240 --> 00:18:19,600
on the left you can see the five

508
00:18:19,600 --> 00:18:21,679
different packers and you can see that i

509
00:18:21,679 --> 00:18:23,440
the first data set that i used was a

510
00:18:23,440 --> 00:18:24,640
fishing web

511
00:18:24,640 --> 00:18:26,720
phishing data set

512
00:18:26,720 --> 00:18:30,640
uh of over 100 000 urls and i was able

513
00:18:30,640 --> 00:18:32,640
to see there's really decent result for

514
00:18:32,640 --> 00:18:34,799
that meaning the the assumption that i

515
00:18:34,799 --> 00:18:39,360
created a pattern based detection for

516
00:18:39,360 --> 00:18:40,840
office skating

517
00:18:40,840 --> 00:18:43,919
um functionality representing different

518
00:18:43,919 --> 00:18:45,440
javascript packers

519
00:18:45,440 --> 00:18:47,760
uh created some result nice result from

520
00:18:47,760 --> 00:18:49,120
from my point of view and i was doing

521
00:18:49,120 --> 00:18:52,160
that on a malware data set as well with

522
00:18:52,160 --> 00:18:54,559
even better results in terms of

523
00:18:54,559 --> 00:18:56,400
of the number of hits that i was able to

524
00:18:56,400 --> 00:18:58,880
see but it's more than that because that

525
00:18:58,880 --> 00:19:00,720
those two data set represents something

526
00:19:00,720 --> 00:19:03,360
malicious i wanted to do on also the

527
00:19:03,360 --> 00:19:06,400
other side which try to see if those

528
00:19:06,400 --> 00:19:08,799
same function well that same

529
00:19:08,799 --> 00:19:11,440
proof of concept can also be executed on

530
00:19:11,440 --> 00:19:13,200
data that is supposed to be legitimate

531
00:19:13,200 --> 00:19:15,200
right in order to do that

532
00:19:15,200 --> 00:19:17,760
i used alexa ranking

533
00:19:17,760 --> 00:19:18,799
um

534
00:19:18,799 --> 00:19:22,080
18 000 top most ranked website in the

535
00:19:22,080 --> 00:19:23,039
world

536
00:19:23,039 --> 00:19:25,200
and the interesting part is that i start

537
00:19:25,200 --> 00:19:26,960
to see hits

538
00:19:26,960 --> 00:19:29,039
on those websites as well

539
00:19:29,039 --> 00:19:31,679
and i was doing that also on a random

540
00:19:31,679 --> 00:19:34,720
data set of of domains that in that

541
00:19:34,720 --> 00:19:36,640
context they are not represent well they

542
00:19:36,640 --> 00:19:38,880
are not highly ranked as opposed to

543
00:19:38,880 --> 00:19:40,559
alexa and they are representing

544
00:19:40,559 --> 00:19:42,000
something more spreaded from a

545
00:19:42,000 --> 00:19:44,240
popularity point of view and i was able

546
00:19:44,240 --> 00:19:47,280
to see um very similar hits to alexa

547
00:19:47,280 --> 00:19:48,320
being

548
00:19:48,320 --> 00:19:52,000
done on that data set as well

549
00:19:52,000 --> 00:19:53,600
so these are the numbers right the

550
00:19:53,600 --> 00:19:56,240
percentage of detection of each of those

551
00:19:56,240 --> 00:19:58,480
data sets and you can see obviously that

552
00:19:58,480 --> 00:20:00,160
those that are classified as malicious

553
00:20:00,160 --> 00:20:03,120
had will hit rate much higher in terms

554
00:20:03,120 --> 00:20:04,480
of percents

555
00:20:04,480 --> 00:20:05,520
um

556
00:20:05,520 --> 00:20:07,679
versus those that represent benign

557
00:20:07,679 --> 00:20:09,520
benign data sets

558
00:20:09,520 --> 00:20:11,440
and i was doing some you know trying to

559
00:20:11,440 --> 00:20:12,799
figure out what are the insights that i

560
00:20:12,799 --> 00:20:14,159
can take from this data what's the

561
00:20:14,159 --> 00:20:15,520
interesting part

562
00:20:15,520 --> 00:20:17,039
and i was doing some you know uh

563
00:20:17,039 --> 00:20:18,640
analysis of that

564
00:20:18,640 --> 00:20:20,159
and what i was able to see the first

565
00:20:20,159 --> 00:20:22,400
conclusion which is a good one which

566
00:20:22,400 --> 00:20:23,840
means that

567
00:20:23,840 --> 00:20:25,360
the technique that i was using the

568
00:20:25,360 --> 00:20:27,679
javascript function and detection is

569
00:20:27,679 --> 00:20:29,039
accurate

570
00:20:29,039 --> 00:20:31,679
or in other words i was going into the

571
00:20:31,679 --> 00:20:34,320
alexa and the random data set and try to

572
00:20:34,320 --> 00:20:36,480
see if there is for example

573
00:20:36,480 --> 00:20:38,559
matching there for the

574
00:20:38,559 --> 00:20:40,799
pattern that i was looking for

575
00:20:40,799 --> 00:20:43,200
that that pattern is for

576
00:20:43,200 --> 00:20:45,120
you know reason that i cannot explain

577
00:20:45,120 --> 00:20:47,200
represents something that is not that

578
00:20:47,200 --> 00:20:49,679
given obfuscation techniques that i was

579
00:20:49,679 --> 00:20:51,039
looking for

580
00:20:51,039 --> 00:20:53,440
okay uh and in that sense when once

581
00:20:53,440 --> 00:20:55,440
looking into those i was able to see

582
00:20:55,440 --> 00:20:57,280
that those hits were actually

583
00:20:57,280 --> 00:20:58,480
representing

584
00:20:58,480 --> 00:21:00,480
and obfuscation techniques the same

585
00:21:00,480 --> 00:21:02,080
foscation technique that i was looking

586
00:21:02,080 --> 00:21:05,120
for but they were hits on the benign

587
00:21:05,120 --> 00:21:07,520
data set that i was using or in other

588
00:21:07,520 --> 00:21:09,440
words what we can learn from that

589
00:21:09,440 --> 00:21:12,799
is that obfuscation is obviously um not

590
00:21:12,799 --> 00:21:15,120
being used only for malicious content

591
00:21:15,120 --> 00:21:16,400
it's also been

592
00:21:16,400 --> 00:21:18,960
used for a benign content which is an

593
00:21:18,960 --> 00:21:20,880
interesting thing

594
00:21:20,880 --> 00:21:22,880
now the second part that the the second

595
00:21:22,880 --> 00:21:25,200
insight that those who was able to see

596
00:21:25,200 --> 00:21:27,200
is that i had really good result right i

597
00:21:27,200 --> 00:21:29,520
have over 4 000 different new phishing

598
00:21:29,520 --> 00:21:31,919
and malware urls or domains in the

599
00:21:31,919 --> 00:21:34,080
context of this exam

600
00:21:34,080 --> 00:21:36,000
that are actually

601
00:21:36,000 --> 00:21:37,600
being detected

602
00:21:37,600 --> 00:21:40,720
as the running obfuscated code and in

603
00:21:40,720 --> 00:21:43,440
that sense it gave me an advantage

604
00:21:43,440 --> 00:21:45,840
because one of my goals to be able to do

605
00:21:45,840 --> 00:21:47,280
that on scale to do that kind of

606
00:21:47,280 --> 00:21:48,400
detection

607
00:21:48,400 --> 00:21:50,960
and it's important to say that well once

608
00:21:50,960 --> 00:21:53,200
you try to do that you know techniques

609
00:21:53,200 --> 00:21:54,720
as i mentioned before

610
00:21:54,720 --> 00:21:57,520
those that are using text based or hash

611
00:21:57,520 --> 00:22:00,720
based detection that were obviously

612
00:22:00,720 --> 00:22:01,679
failing

613
00:22:01,679 --> 00:22:03,520
in the context of javascript being

614
00:22:03,520 --> 00:22:04,880
obfuscated

615
00:22:04,880 --> 00:22:06,480
in the new technique that i just

616
00:22:06,480 --> 00:22:07,600
introduced

617
00:22:07,600 --> 00:22:09,360
they are actually being detected

618
00:22:09,360 --> 00:22:11,600
correctly and i can see those hits and i

619
00:22:11,600 --> 00:22:13,919
can actually create some detection that

620
00:22:13,919 --> 00:22:16,640
i didn't have before

621
00:22:16,640 --> 00:22:18,720
now few more interesting thing we can

622
00:22:18,720 --> 00:22:20,640
see that some of those packers are

623
00:22:20,640 --> 00:22:22,080
actually associated with malicious

624
00:22:22,080 --> 00:22:24,400
activity for example the aes decrypt

625
00:22:24,400 --> 00:22:26,640
function or the cactus

626
00:22:26,640 --> 00:22:28,799
which are mostly being used for phishing

627
00:22:28,799 --> 00:22:30,000
attacks

628
00:22:30,000 --> 00:22:31,360
um

629
00:22:31,360 --> 00:22:32,880
and that's interesting because that

630
00:22:32,880 --> 00:22:35,440
means that if i will detect that kind of

631
00:22:35,440 --> 00:22:37,840
activity that kind of an obfuscation

632
00:22:37,840 --> 00:22:39,039
activity

633
00:22:39,039 --> 00:22:41,440
according to this this data set i can

634
00:22:41,440 --> 00:22:43,440
assume that it's malicious right it

635
00:22:43,440 --> 00:22:45,440
doesn't has implication on benign kind

636
00:22:45,440 --> 00:22:47,520
of data set therefore

637
00:22:47,520 --> 00:22:49,520
it can be indicated so a strong

638
00:22:49,520 --> 00:22:51,440
indicator for uh javascript being

639
00:22:51,440 --> 00:22:53,120
observed but more than that it's

640
00:22:53,120 --> 00:22:55,200
malicious

641
00:22:55,200 --> 00:22:58,240
and finally as as i said before um

642
00:22:58,240 --> 00:23:00,559
what we learned from here is that

643
00:23:00,559 --> 00:23:02,960
obfuscation is different than malicious

644
00:23:02,960 --> 00:23:05,679
right there's also benign usage

645
00:23:05,679 --> 00:23:08,400
for javascript being obfuscated so

646
00:23:08,400 --> 00:23:11,760
that's interesting right um

647
00:23:12,559 --> 00:23:14,559
so a few questions that come after that

648
00:23:14,559 --> 00:23:16,240
right um

649
00:23:16,240 --> 00:23:20,080
the first question is so we talked about

650
00:23:20,080 --> 00:23:22,960
benign website well legitimate website

651
00:23:22,960 --> 00:23:25,120
that are being obfuscated so the first

652
00:23:25,120 --> 00:23:27,760
question come to my mind is so what does

653
00:23:27,760 --> 00:23:29,679
it mean why those websites are actually

654
00:23:29,679 --> 00:23:32,080
trying to obfuscate some of their code

655
00:23:32,080 --> 00:23:33,840
and i look into that so that's the first

656
00:23:33,840 --> 00:23:36,000
question and soon we'll see the answers

657
00:23:36,000 --> 00:23:38,799
the second question was okay so

658
00:23:38,799 --> 00:23:40,799
well we understand that obfuscation is

659
00:23:40,799 --> 00:23:42,720
different than malicious well meaning

660
00:23:42,720 --> 00:23:44,640
frustration can also

661
00:23:44,640 --> 00:23:46,159
represent benign

662
00:23:46,159 --> 00:23:48,480
so how can we differentiate between

663
00:23:48,480 --> 00:23:50,720
something that is obfuscated

664
00:23:50,720 --> 00:23:52,559
uh and it's benign versus something

665
00:23:52,559 --> 00:23:55,200
obfuscated that is malicious and that's

666
00:23:55,200 --> 00:23:57,440
the next step for us to do

667
00:23:57,440 --> 00:23:59,919
so as i mentioned so we know that some

668
00:23:59,919 --> 00:24:03,600
of those benign examples of domains that

669
00:24:03,600 --> 00:24:05,840
were sampled uh are actually

670
00:24:05,840 --> 00:24:08,320
representing inaudible using obfuscation

671
00:24:08,320 --> 00:24:10,320
technique and i asked myself so

672
00:24:10,320 --> 00:24:12,640
why it's being done so here are a few of

673
00:24:12,640 --> 00:24:14,880
the answers for that first of all as i

674
00:24:14,880 --> 00:24:15,919
mentioned at the beginning of the

675
00:24:15,919 --> 00:24:18,799
presentation uh email addresses for some

676
00:24:18,799 --> 00:24:20,000
reason

677
00:24:20,000 --> 00:24:21,840
some website decide to do some

678
00:24:21,840 --> 00:24:23,919
confiscation for that and make those

679
00:24:23,919 --> 00:24:25,440
email addresses

680
00:24:25,440 --> 00:24:28,799
not being visible if you look into that

681
00:24:28,799 --> 00:24:31,679
um without doing rendering to the page

682
00:24:31,679 --> 00:24:34,000
and that there this is their way to try

683
00:24:34,000 --> 00:24:35,279
to evade

684
00:24:35,279 --> 00:24:36,880
um you know

685
00:24:36,880 --> 00:24:40,080
variety of scanners or

686
00:24:40,080 --> 00:24:43,200
search engines or you know whatever bot

687
00:24:43,200 --> 00:24:45,200
we see out there trying to harvest those

688
00:24:45,200 --> 00:24:46,880
kind of email addresses

689
00:24:46,880 --> 00:24:48,480
again i don't agree that that's the

690
00:24:48,480 --> 00:24:51,440
right approach but that what they were

691
00:24:51,440 --> 00:24:52,559
doing

692
00:24:52,559 --> 00:24:55,200
i was able to see a variety of

693
00:24:55,200 --> 00:24:57,360
cookie clients and functionality being

694
00:24:57,360 --> 00:25:00,159
obfuscated again i'm not sure it's too

695
00:25:00,159 --> 00:25:02,400
right and or the relevant thing to do

696
00:25:02,400 --> 00:25:04,320
but that what those website are doing

697
00:25:04,320 --> 00:25:05,919
trying to obviously they're called

698
00:25:05,919 --> 00:25:07,360
trying to make it

699
00:25:07,360 --> 00:25:09,840
um to create some security by obscurity

700
00:25:09,840 --> 00:25:11,360
in that context

701
00:25:11,360 --> 00:25:14,159
um many examples for third-party scripts

702
00:25:14,159 --> 00:25:16,720
being obfuscated uh scripts for

703
00:25:16,720 --> 00:25:19,039
advertisements scripts for doing

704
00:25:19,039 --> 00:25:21,279
translation of services you can think

705
00:25:21,279 --> 00:25:23,760
about it like that let's say that on a

706
00:25:23,760 --> 00:25:25,520
third party i create some javascript

707
00:25:25,520 --> 00:25:27,520
code that is supposed to be integrated

708
00:25:27,520 --> 00:25:29,600
into a variety of website

709
00:25:29,600 --> 00:25:31,919
i might decide to do some obfuscation

710
00:25:31,919 --> 00:25:35,600
for that code to make it unreadable or

711
00:25:35,600 --> 00:25:37,679
not well understood to those that will

712
00:25:37,679 --> 00:25:40,559
look at first glance into that code

713
00:25:40,559 --> 00:25:42,320
and again it's security by obscurity in

714
00:25:42,320 --> 00:25:43,679
that context but that's something that

715
00:25:43,679 --> 00:25:45,279
happens in the world and that's what we

716
00:25:45,279 --> 00:25:46,720
are seeing here

717
00:25:46,720 --> 00:25:49,760
and last well was uh adult content that

718
00:25:49,760 --> 00:25:51,279
is well

719
00:25:51,279 --> 00:25:53,039
in a sense uh

720
00:25:53,039 --> 00:25:55,440
a grayish area kind of you know websites

721
00:25:55,440 --> 00:25:58,000
that has a lot of you know issues with

722
00:25:58,000 --> 00:26:00,320
them that related to security and

723
00:26:00,320 --> 00:26:01,360
obviously

724
00:26:01,360 --> 00:26:03,200
for some reason well not obviously but

725
00:26:03,200 --> 00:26:05,600
for some reason there are more using

726
00:26:05,600 --> 00:26:07,120
those kind of affiliation into their

727
00:26:07,120 --> 00:26:09,120
code

728
00:26:09,120 --> 00:26:10,880
so we talked about what are the example

729
00:26:10,880 --> 00:26:12,880
that we see out there then comes the

730
00:26:12,880 --> 00:26:15,039
question so how can we differentiate it

731
00:26:15,039 --> 00:26:18,320
how can we take a given javascript code

732
00:26:18,320 --> 00:26:21,520
that was identified as being obfuscated

733
00:26:21,520 --> 00:26:23,120
and try to differentiate between the

734
00:26:23,120 --> 00:26:25,120
benign use case and the malicious use

735
00:26:25,120 --> 00:26:27,200
case in order to do this i will use a

736
00:26:27,200 --> 00:26:28,880
technique that has two approaches

737
00:26:28,880 --> 00:26:30,799
approach a and approach b approach a

738
00:26:30,799 --> 00:26:33,200
will try to do a loudly approach b will

739
00:26:33,200 --> 00:26:35,039
try to do the blocking

740
00:26:35,039 --> 00:26:36,880
now what does it mean let's talk about

741
00:26:36,880 --> 00:26:39,440
the allow list so what i was doing i was

742
00:26:39,440 --> 00:26:41,600
saying okay so let's take all the benign

743
00:26:41,600 --> 00:26:43,760
data that i have which means the random

744
00:26:43,760 --> 00:26:45,600
and alexa data set

745
00:26:45,600 --> 00:26:47,840
and i was doing some sort of a pivoting

746
00:26:47,840 --> 00:26:50,640
around few well three different elements

747
00:26:50,640 --> 00:26:52,640
the blue element the blue circles that

748
00:26:52,640 --> 00:26:54,799
you can see here the domain names

749
00:26:54,799 --> 00:26:57,039
the orange one is actually the hash

750
00:26:57,039 --> 00:26:59,760
value of those

751
00:26:59,760 --> 00:27:02,799
javascript code being obfuscated right

752
00:27:02,799 --> 00:27:05,039
and the greyish one the bigger one are

753
00:27:05,039 --> 00:27:07,279
representing alexa and random so in a

754
00:27:07,279 --> 00:27:09,279
sense what i'm showing here is very

755
00:27:09,279 --> 00:27:11,600
similar to the third party example that

756
00:27:11,600 --> 00:27:13,279
that i mentioned

757
00:27:13,279 --> 00:27:15,840
is that once the same code that was

758
00:27:15,840 --> 00:27:17,520
supposed to be integrated to many

759
00:27:17,520 --> 00:27:18,960
different third party code that is

760
00:27:18,960 --> 00:27:20,399
supposed to be integrated to many

761
00:27:20,399 --> 00:27:22,720
different websites is being used in the

762
00:27:22,720 --> 00:27:24,640
wild we are starting to see some

763
00:27:24,640 --> 00:27:26,799
relationship between them and that

764
00:27:26,799 --> 00:27:29,120
relationship can help us to take it to

765
00:27:29,120 --> 00:27:31,919
the next level and say let's try let's

766
00:27:31,919 --> 00:27:34,080
try to create allow list allow list that

767
00:27:34,080 --> 00:27:36,399
will tell us that yes if we see that

768
00:27:36,399 --> 00:27:39,200
given code that it's an obfuscated code

769
00:27:39,200 --> 00:27:41,039
but we are familiar with that with that

770
00:27:41,039 --> 00:27:42,720
code because we were able to profile

771
00:27:42,720 --> 00:27:44,399
that code as being used by many

772
00:27:44,399 --> 00:27:47,200
different websites out there that has

773
00:27:47,200 --> 00:27:48,480
really great

774
00:27:48,480 --> 00:27:51,840
popularity ranks or something like that

775
00:27:51,840 --> 00:27:54,080
that by itself can reduce 20 of the

776
00:27:54,080 --> 00:27:56,799
problem meaning out of the

777
00:27:56,799 --> 00:27:59,279
nearly 240

778
00:27:59,279 --> 00:28:01,440
domains that i was able to see that our

779
00:28:01,440 --> 00:28:04,000
hosting with our benign domain that our

780
00:28:04,000 --> 00:28:06,559
hosting uh obviously the javascript

781
00:28:06,559 --> 00:28:08,640
twenty percent of them were actually

782
00:28:08,640 --> 00:28:10,640
solved like was we're able to solve them

783
00:28:10,640 --> 00:28:14,320
and try to classify them as allow list

784
00:28:14,320 --> 00:28:16,320
because they can see a reuse of the same

785
00:28:16,320 --> 00:28:17,600
functionality

786
00:28:17,600 --> 00:28:19,440
same javascript functionality being used

787
00:28:19,440 --> 00:28:21,760
by those different domains so that was

788
00:28:21,760 --> 00:28:23,760
the first step of the approach which we

789
00:28:23,760 --> 00:28:25,520
called it the allow list

790
00:28:25,520 --> 00:28:27,360
the second part of the approach that i'm

791
00:28:27,360 --> 00:28:29,360
trying to suggest is that the project is

792
00:28:29,360 --> 00:28:31,120
based on machine learning

793
00:28:31,120 --> 00:28:32,799
and the basic concept is the following

794
00:28:32,799 --> 00:28:34,720
right let's say that i can see a

795
00:28:34,720 --> 00:28:37,440
javascript that is being obfuscated in

796
00:28:37,440 --> 00:28:38,799
that context

797
00:28:38,799 --> 00:28:41,039
now come the question can we retrieve

798
00:28:41,039 --> 00:28:43,760
can we pull up some um

799
00:28:43,760 --> 00:28:46,480
features out of that javascript code

800
00:28:46,480 --> 00:28:48,240
that will enable us to make more

801
00:28:48,240 --> 00:28:50,559
decision based on those features maybe

802
00:28:50,559 --> 00:28:52,880
those feature will enable us to

803
00:28:52,880 --> 00:28:55,279
differentiate between b9

804
00:28:55,279 --> 00:28:57,760
javascript being obfuscated versus

805
00:28:57,760 --> 00:29:00,080
malicious javascript being off scheme so

806
00:29:00,080 --> 00:29:02,960
first example for such um feature would

807
00:29:02,960 --> 00:29:05,470
be um array kind of um

808
00:29:05,470 --> 00:29:06,559
[Music]

809
00:29:06,559 --> 00:29:08,960
object being used in javascript

810
00:29:08,960 --> 00:29:10,960
and many of those functions are actually

811
00:29:10,960 --> 00:29:12,880
taking a raise and put the payload

812
00:29:12,880 --> 00:29:15,200
inside that array so feature would be

813
00:29:15,200 --> 00:29:17,279
for example number of elements in the

814
00:29:17,279 --> 00:29:18,159
array

815
00:29:18,159 --> 00:29:19,600
the length of the

816
00:29:19,600 --> 00:29:22,159
elements uh what kind of characters are

817
00:29:22,159 --> 00:29:23,440
being used

818
00:29:23,440 --> 00:29:25,360
as part of those

819
00:29:25,360 --> 00:29:30,159
elements um can we see some prefix of

820
00:29:30,159 --> 00:29:32,799
encoded kind of values being used so

821
00:29:32,799 --> 00:29:34,960
these are for example some example for

822
00:29:34,960 --> 00:29:36,080
features

823
00:29:36,080 --> 00:29:37,840
different kind of feature could be for

824
00:29:37,840 --> 00:29:39,799
example the

825
00:29:39,799 --> 00:29:43,520
identifiers or well um identifiers

826
00:29:43,520 --> 00:29:45,039
that are being used as part of that

827
00:29:45,039 --> 00:29:47,440
javascript code right identify could be

828
00:29:47,440 --> 00:29:49,919
variable name function name

829
00:29:49,919 --> 00:29:51,760
any name convention that happened in

830
00:29:51,760 --> 00:29:52,960
that page

831
00:29:52,960 --> 00:29:55,120
so if we can for example count the

832
00:29:55,120 --> 00:29:57,279
amount the amount of identifiers being

833
00:29:57,279 --> 00:30:00,080
used or maybe we can say hey if we see

834
00:30:00,080 --> 00:30:02,559
identifiers that start with underscore

835
00:30:02,559 --> 00:30:03,919
zero x

836
00:30:03,919 --> 00:30:06,080
which you can see on screen that's an a

837
00:30:06,080 --> 00:30:08,240
very common kind of technique being used

838
00:30:08,240 --> 00:30:09,840
to try to create the code that is not

839
00:30:09,840 --> 00:30:12,399
readable uh maybe that's an indicator

840
00:30:12,399 --> 00:30:14,799
maybe we can count those numbers and

841
00:30:14,799 --> 00:30:16,799
those numbers will enable us to make a

842
00:30:16,799 --> 00:30:18,799
better decision again between benign and

843
00:30:18,799 --> 00:30:21,039
malicious

844
00:30:21,039 --> 00:30:24,720
so here is example of plotting uh of two

845
00:30:24,720 --> 00:30:26,399
of those um

846
00:30:26,399 --> 00:30:29,120
features that i decided to use right

847
00:30:29,120 --> 00:30:31,919
and in order to better understand i was

848
00:30:31,919 --> 00:30:34,240
deciding to focus on a very specific

849
00:30:34,240 --> 00:30:35,279
packer the

850
00:30:35,279 --> 00:30:37,760
the push shift packer because i was able

851
00:30:37,760 --> 00:30:39,520
to see that that given packer is being

852
00:30:39,520 --> 00:30:41,679
used for both benign and both malicious

853
00:30:41,679 --> 00:30:44,080
kind of um use cases

854
00:30:44,080 --> 00:30:47,120
and i plotted two of those features

855
00:30:47,120 --> 00:30:49,600
under on on the left on the y's you can

856
00:30:49,600 --> 00:30:52,480
see the number of unique identifiers

857
00:30:52,480 --> 00:30:54,000
number of verb well

858
00:30:54,000 --> 00:30:56,399
as i imagine identifiers would be

859
00:30:56,399 --> 00:30:59,440
a variable's name functions name array

860
00:30:59,440 --> 00:31:00,640
names

861
00:31:00,640 --> 00:31:02,720
those kind of you know those things

862
00:31:02,720 --> 00:31:04,480
those objects are representing

863
00:31:04,480 --> 00:31:07,440
identifiers in that context

864
00:31:07,440 --> 00:31:10,240
and on the x's what you can see is the

865
00:31:10,240 --> 00:31:12,720
number of elements in in array that i

866
00:31:12,720 --> 00:31:14,000
was able to see

867
00:31:14,000 --> 00:31:16,480
and first look on that graph give us

868
00:31:16,480 --> 00:31:18,480
pretty good answers and why

869
00:31:18,480 --> 00:31:19,919
because we can see that they're

870
00:31:19,919 --> 00:31:21,919
different classification very easy

871
00:31:21,919 --> 00:31:23,760
classification that can enable us to

872
00:31:23,760 --> 00:31:25,679
make decision

873
00:31:25,679 --> 00:31:28,559
the most right uh um rectangle and the

874
00:31:28,559 --> 00:31:30,799
most upper left one actually

875
00:31:30,799 --> 00:31:33,679
representing two groups that represent

876
00:31:33,679 --> 00:31:35,760
just malware activity

877
00:31:35,760 --> 00:31:37,440
and as a result of that if we can use

878
00:31:37,440 --> 00:31:38,799
those features

879
00:31:38,799 --> 00:31:42,480
we can easily be able to identify

880
00:31:42,480 --> 00:31:44,640
javascript code that is being used and

881
00:31:44,640 --> 00:31:47,200
has the relevant numbers

882
00:31:47,200 --> 00:31:49,039
associated with those features as

883
00:31:49,039 --> 00:31:51,200
something being classified as malicious

884
00:31:51,200 --> 00:31:52,799
but we're still having some problem

885
00:31:52,799 --> 00:31:55,360
because we can see that in the in the

886
00:31:55,360 --> 00:31:56,880
center of the graph

887
00:31:56,880 --> 00:32:01,039
we have um values for both b9

888
00:32:01,039 --> 00:32:03,679
in other words alexa um

889
00:32:03,679 --> 00:32:06,399
uh random and malware being mixed

890
00:32:06,399 --> 00:32:08,240
together so we want to better look into

891
00:32:08,240 --> 00:32:09,919
that so i

892
00:32:09,919 --> 00:32:11,919
zoom into that and what we can see here

893
00:32:11,919 --> 00:32:14,159
is we still have some ability to do

894
00:32:14,159 --> 00:32:16,320
something here because we see still see

895
00:32:16,320 --> 00:32:17,919
that there is some differentiation here

896
00:32:17,919 --> 00:32:20,399
when it comes to the values for those

897
00:32:20,399 --> 00:32:23,039
features in the context of benign versus

898
00:32:23,039 --> 00:32:24,240
malicious

899
00:32:24,240 --> 00:32:25,440
so

900
00:32:25,440 --> 00:32:27,679
this is only this is the graph

901
00:32:27,679 --> 00:32:29,840
this is a graph with two

902
00:32:29,840 --> 00:32:30,799
um

903
00:32:30,799 --> 00:32:33,039
features being used think about it from

904
00:32:33,039 --> 00:32:35,360
a machine learning point of view you use

905
00:32:35,360 --> 00:32:36,799
many features

906
00:32:36,799 --> 00:32:39,279
that will enable you to take even that

907
00:32:39,279 --> 00:32:41,760
small group and try to differentiate it

908
00:32:41,760 --> 00:32:44,240
between benign malicious

909
00:32:44,240 --> 00:32:45,840
and this is what i was doing i was doing

910
00:32:45,840 --> 00:32:48,720
for the sake of of experiment the usage

911
00:32:48,720 --> 00:32:51,279
of three different features uh the first

912
00:32:51,279 --> 00:32:53,519
one is number of

913
00:32:53,519 --> 00:32:56,480
identifiers uh starting with underscore

914
00:32:56,480 --> 00:32:57,760
0x

915
00:32:57,760 --> 00:33:01,039
the second feature was the number of

916
00:33:01,039 --> 00:33:03,600
elements in an array and the third one

917
00:33:03,600 --> 00:33:06,640
was the number of unique identifiers i

918
00:33:06,640 --> 00:33:08,720
was able to see on a given script

919
00:33:08,720 --> 00:33:11,039
and i created the decision tree based on

920
00:33:11,039 --> 00:33:12,880
a random forest algorithm that was

921
00:33:12,880 --> 00:33:14,399
running

922
00:33:14,399 --> 00:33:16,960
and when i was looking into the only the

923
00:33:16,960 --> 00:33:18,000
right

924
00:33:18,000 --> 00:33:20,559
most um

925
00:33:20,559 --> 00:33:23,360
the right path on that tree

926
00:33:23,360 --> 00:33:26,559
and try to better understand what that

927
00:33:26,559 --> 00:33:29,360
this tree can help me in the context of

928
00:33:29,360 --> 00:33:31,919
being able to identify between something

929
00:33:31,919 --> 00:33:34,240
that is benign versus malicious

930
00:33:34,240 --> 00:33:36,960
what you can see is that if we will take

931
00:33:36,960 --> 00:33:39,840
those three features we'll ask number of

932
00:33:39,840 --> 00:33:42,159
underscore zero x identifier bigger than

933
00:33:42,159 --> 00:33:43,360
20

934
00:33:43,360 --> 00:33:45,840
and well on a given script and on that

935
00:33:45,840 --> 00:33:47,760
given script we can also see that there

936
00:33:47,760 --> 00:33:50,159
is an array with over 17 different

937
00:33:50,159 --> 00:33:51,200
elements

938
00:33:51,200 --> 00:33:52,880
and more to that there are unique

939
00:33:52,880 --> 00:33:55,360
identifiers greater than

940
00:33:55,360 --> 00:33:56,480
92

941
00:33:56,480 --> 00:33:59,279
only that path on the tree will enable

942
00:33:59,279 --> 00:34:00,720
me to solve

943
00:34:00,720 --> 00:34:01,799
over

944
00:34:01,799 --> 00:34:04,559
750 of the samples that i was able to

945
00:34:04,559 --> 00:34:07,679
see and classified them as malicious and

946
00:34:07,679 --> 00:34:09,760
by that eliminate some of the problem

947
00:34:09,760 --> 00:34:12,320
that i was having was having and in in

948
00:34:12,320 --> 00:34:14,960
that concept try to better explain and

949
00:34:14,960 --> 00:34:16,000
understand

950
00:34:16,000 --> 00:34:18,239
how a machine learning module can help

951
00:34:18,239 --> 00:34:21,520
me make a decision based on you know

952
00:34:21,520 --> 00:34:23,119
some of those features that we were able

953
00:34:23,119 --> 00:34:25,679
to classify

954
00:34:26,399 --> 00:34:28,879
so in that context we have an approach

955
00:34:28,879 --> 00:34:30,639
we built something that we can do some

956
00:34:30,639 --> 00:34:32,839
detection we know how to detect

957
00:34:32,839 --> 00:34:35,119
javascript that is being used in the

958
00:34:35,119 --> 00:34:37,119
while and represents something that is

959
00:34:37,119 --> 00:34:39,040
office k javascript officially being

960
00:34:39,040 --> 00:34:39,918
used

961
00:34:39,918 --> 00:34:42,399
uh we were using some technique to try

962
00:34:42,399 --> 00:34:44,320
to differentiate between benign and

963
00:34:44,320 --> 00:34:46,639
malicious now how can we use it in a

964
00:34:46,639 --> 00:34:48,719
more practical kind of way

965
00:34:48,719 --> 00:34:50,239
so our first approach would be to

966
00:34:50,239 --> 00:34:52,239
implement well the technique that i was

967
00:34:52,239 --> 00:34:54,800
just showing you right um

968
00:34:54,800 --> 00:34:56,639
the core functionality of detecting

969
00:34:56,639 --> 00:34:58,720
javascript being obfuscated and then

970
00:34:58,720 --> 00:35:00,480
building some module that is based on

971
00:35:00,480 --> 00:35:02,400
the allow list and the block list and

972
00:35:02,400 --> 00:35:04,400
try to better understand if we look into

973
00:35:04,400 --> 00:35:06,079
a given javascript whether it's

974
00:35:06,079 --> 00:35:09,040
malicious or not that's one thing to do

975
00:35:09,040 --> 00:35:10,640
a different thing that we might want to

976
00:35:10,640 --> 00:35:12,880
do is we'll try to use the core

977
00:35:12,880 --> 00:35:14,160
functionality of

978
00:35:14,160 --> 00:35:16,960
identify well identifying javascript

979
00:35:16,960 --> 00:35:18,560
being obfuscated

980
00:35:18,560 --> 00:35:21,440
and use it in the context of our website

981
00:35:21,440 --> 00:35:23,599
for example if we look into our website

982
00:35:23,599 --> 00:35:25,200
and scan the website and see that there

983
00:35:25,200 --> 00:35:27,839
is no javascript office data javascript

984
00:35:27,839 --> 00:35:29,200
being

985
00:35:29,200 --> 00:35:31,440
used on the website and suddenly we're

986
00:35:31,440 --> 00:35:33,440
doing another scan of that kind of

987
00:35:33,440 --> 00:35:35,839
website and find an example of something

988
00:35:35,839 --> 00:35:37,520
being obfuscated

989
00:35:37,520 --> 00:35:40,320
that by itself should you know

990
00:35:40,320 --> 00:35:42,560
alarm us and they should take us to the

991
00:35:42,560 --> 00:35:45,040
next step of trying to better understand

992
00:35:45,040 --> 00:35:47,359
what's the reason the code is there is a

993
00:35:47,359 --> 00:35:49,680
legit third-party feed it was integrated

994
00:35:49,680 --> 00:35:52,000
is it something uh that was injected to

995
00:35:52,000 --> 00:35:54,720
the website uh major kind of scam so

996
00:35:54,720 --> 00:35:56,800
that's another use case that we might

997
00:35:56,800 --> 00:35:59,200
want to use a different approach would

998
00:35:59,200 --> 00:36:01,119
be to enrich some of the data that we

999
00:36:01,119 --> 00:36:03,839
have with other indicators for example

1000
00:36:03,839 --> 00:36:05,920
if you can see javascript code being

1001
00:36:05,920 --> 00:36:08,560
obfuscated we can also ask ourselves

1002
00:36:08,560 --> 00:36:10,720
what's the age of the domain is it the

1003
00:36:10,720 --> 00:36:12,960
newly registered domain or is it an old

1004
00:36:12,960 --> 00:36:15,440
domain newly registered domain that has

1005
00:36:15,440 --> 00:36:18,320
javascript being obfuscated in it

1006
00:36:18,320 --> 00:36:20,960
my assumption is that most likely right

1007
00:36:20,960 --> 00:36:22,000
it's not

1008
00:36:22,000 --> 00:36:24,480
it's not a boolean decision most likely

1009
00:36:24,480 --> 00:36:26,480
the chances that that website contains

1010
00:36:26,480 --> 00:36:28,720
something malicious is much higher than

1011
00:36:28,720 --> 00:36:29,920
expected

1012
00:36:29,920 --> 00:36:32,240
a different kind of indicator can be a

1013
00:36:32,240 --> 00:36:34,480
popularity of the website if a website

1014
00:36:34,480 --> 00:36:36,240
that is highly popular has some

1015
00:36:36,240 --> 00:36:38,640
javascript been obfuscated well it could

1016
00:36:38,640 --> 00:36:41,520
be nice on our if it's well website that

1017
00:36:41,520 --> 00:36:43,359
it's not highly popular

1018
00:36:43,359 --> 00:36:44,880
maybe we can make a decision based on

1019
00:36:44,880 --> 00:36:46,480
that maybe it's not the right decision

1020
00:36:46,480 --> 00:36:48,160
but maybe it's a decision that we can't

1021
00:36:48,160 --> 00:36:51,040
take meaning if some website is not

1022
00:36:51,040 --> 00:36:53,119
really popular and i can see javascript

1023
00:36:53,119 --> 00:36:54,640
being obfuscated if

1024
00:36:54,640 --> 00:36:56,720
even if it's not malicious blocking that

1025
00:36:56,720 --> 00:36:58,560
website will not

1026
00:36:58,560 --> 00:37:00,640
be something so dramatic from a

1027
00:37:00,640 --> 00:37:02,079
defensive point

1028
00:37:02,079 --> 00:37:02,960
right

1029
00:37:02,960 --> 00:37:05,359
so this is some of the approaches from a

1030
00:37:05,359 --> 00:37:08,160
uh realistic or practical point of view

1031
00:37:08,160 --> 00:37:09,920
um

1032
00:37:09,920 --> 00:37:11,520
a few of the questions that we have in

1033
00:37:11,520 --> 00:37:12,880
the beginning right we had four

1034
00:37:12,880 --> 00:37:14,400
questions why and how javascript has

1035
00:37:14,400 --> 00:37:16,640
been obfuscated and we covered that

1036
00:37:16,640 --> 00:37:18,960
uh what are the numbers behind uh the

1037
00:37:18,960 --> 00:37:20,960
usage of jobs within the wild you

1038
00:37:20,960 --> 00:37:22,560
absolutely obscure in the why we saw

1039
00:37:22,560 --> 00:37:24,720
numbers related to that as well

1040
00:37:24,720 --> 00:37:26,240
uh we answered the question that we

1041
00:37:26,240 --> 00:37:27,599
actually answered at the beginning but

1042
00:37:27,599 --> 00:37:30,079
we actually explained that a bit uh more

1043
00:37:30,079 --> 00:37:32,320
in depth around javascript obfuscation

1044
00:37:32,320 --> 00:37:33,760
and whether that represents something

1045
00:37:33,760 --> 00:37:36,079
malicious or not

1046
00:37:36,079 --> 00:37:38,480
and last we actually talked about the

1047
00:37:38,480 --> 00:37:40,720
different techniques that we can use in

1048
00:37:40,720 --> 00:37:43,440
order to identify javascript being

1049
00:37:43,440 --> 00:37:45,839
obfuscated and more to that we took into

1050
00:37:45,839 --> 00:37:47,200
the next level of trying to

1051
00:37:47,200 --> 00:37:49,440
differentiate between benign and

1052
00:37:49,440 --> 00:37:52,240
malicious javascript

1053
00:37:52,240 --> 00:37:54,320
so what are the next steps for me right

1054
00:37:54,320 --> 00:37:57,119
um because i'm not done yet um

1055
00:37:57,119 --> 00:37:59,359
i want to release the code i'm not there

1056
00:37:59,359 --> 00:38:01,760
yet uh i need to still work on that

1057
00:38:01,760 --> 00:38:02,720
hopefully i will do that in the

1058
00:38:02,720 --> 00:38:05,599
following month um

1059
00:38:05,599 --> 00:38:07,599
maybe add another signature for

1060
00:38:07,599 --> 00:38:09,760
additional packers i use only five in

1061
00:38:09,760 --> 00:38:12,800
this experiment uh while doing that i

1062
00:38:12,800 --> 00:38:14,880
i was able to see more

1063
00:38:14,880 --> 00:38:17,200
packers uh like looking into the data

1064
00:38:17,200 --> 00:38:18,880
and was able to see something that was

1065
00:38:18,880 --> 00:38:20,079
able to miss

1066
00:38:20,079 --> 00:38:22,640
and i acknowledge that those are

1067
00:38:22,640 --> 00:38:25,040
packers that i was that i didn't created

1068
00:38:25,040 --> 00:38:26,640
the signature for those package from the

1069
00:38:26,640 --> 00:38:27,760
beginning

1070
00:38:27,760 --> 00:38:30,480
uh so maybe i'm adding those uh refining

1071
00:38:30,480 --> 00:38:32,560
some of the data that i was doing uh

1072
00:38:32,560 --> 00:38:34,640
more rich data more

1073
00:38:34,640 --> 00:38:37,520
um you know if more volumetic data will

1074
00:38:37,520 --> 00:38:38,400
might

1075
00:38:38,400 --> 00:38:41,599
result with a bit different um insights

1076
00:38:41,599 --> 00:38:43,200
that i want to do

1077
00:38:43,200 --> 00:38:46,000
that i want to have in that context

1078
00:38:46,000 --> 00:38:48,800
add more feature to the machine learning

1079
00:38:48,800 --> 00:38:50,000
algorithm

1080
00:38:50,000 --> 00:38:51,119
in order to

1081
00:38:51,119 --> 00:38:54,640
better to have better decisions

1082
00:38:54,640 --> 00:38:56,160
based on

1083
00:38:56,160 --> 00:38:57,599
um

1084
00:38:57,599 --> 00:39:00,240
well to have better detection in the

1085
00:39:00,240 --> 00:39:01,680
context of

1086
00:39:01,680 --> 00:39:03,839
looking into javascript code

1087
00:39:03,839 --> 00:39:05,920
being obfuscated and we want to make

1088
00:39:05,920 --> 00:39:07,200
sure that we are making the right

1089
00:39:07,200 --> 00:39:08,880
decision know how to differentiate

1090
00:39:08,880 --> 00:39:10,960
between malicious and benign and as much

1091
00:39:10,960 --> 00:39:13,040
feature as you take well it's not always

1092
00:39:13,040 --> 00:39:14,400
that but

1093
00:39:14,400 --> 00:39:16,960
taking the right features to represent

1094
00:39:16,960 --> 00:39:19,280
uh the ability to better detect is

1095
00:39:19,280 --> 00:39:21,760
something that i need to um

1096
00:39:21,760 --> 00:39:24,960
do some more work around that

1097
00:39:24,960 --> 00:39:28,240
and last ability to create uh maybe the

1098
00:39:28,240 --> 00:39:30,320
capability of actually detecting those

1099
00:39:30,320 --> 00:39:32,560
patterns right um those five different

1100
00:39:32,560 --> 00:39:34,079
packers that i

1101
00:39:34,079 --> 00:39:35,599
uh used i

1102
00:39:35,599 --> 00:39:36,400
did

1103
00:39:36,400 --> 00:39:38,480
well i was discovering the pattern

1104
00:39:38,480 --> 00:39:39,680
manually

1105
00:39:39,680 --> 00:39:41,520
now comes the question can we do that

1106
00:39:41,520 --> 00:39:44,079
automatically can we go over some code

1107
00:39:44,079 --> 00:39:45,680
and try to figure out if there are some

1108
00:39:45,680 --> 00:39:47,599
patterns on that code

1109
00:39:47,599 --> 00:39:50,000
representing something very unique to

1110
00:39:50,000 --> 00:39:52,960
javascript obfuscation packers that can

1111
00:39:52,960 --> 00:39:56,240
be used in that context

1112
00:39:56,240 --> 00:39:58,240
um so at the beginning i told you that

1113
00:39:58,240 --> 00:40:00,000
the name of the presentation it's all

1114
00:40:00,000 --> 00:40:01,440
about the packers

1115
00:40:01,440 --> 00:40:03,839
uh with the dashes between the letters

1116
00:40:03,839 --> 00:40:06,079
and i during the presentation explain

1117
00:40:06,079 --> 00:40:08,400
what's the reason for that uh it's one

1118
00:40:08,400 --> 00:40:10,079
of the functions that i was able to see

1119
00:40:10,079 --> 00:40:13,119
right and you can see that example here

1120
00:40:13,119 --> 00:40:14,880
and and the interesting part is that

1121
00:40:14,880 --> 00:40:17,760
while i was doing that uh i was at well

1122
00:40:17,760 --> 00:40:19,839
i was telling myself hey i cannot use

1123
00:40:19,839 --> 00:40:23,440
those fireballs as an indicator for that

1124
00:40:23,440 --> 00:40:25,760
given functionality that obfuscation

1125
00:40:25,760 --> 00:40:27,839
functionality being used in the while

1126
00:40:27,839 --> 00:40:29,760
i i want to ignore them they are not

1127
00:40:29,760 --> 00:40:31,440
relevant and i was doing the right

1128
00:40:31,440 --> 00:40:33,520
decision because as i was doing that uh

1129
00:40:33,520 --> 00:40:36,400
suddenly i was able to detect another

1130
00:40:36,400 --> 00:40:38,640
variation of that same functionality of

1131
00:40:38,640 --> 00:40:40,880
the same obfuscation functionality but

1132
00:40:40,880 --> 00:40:42,400
this time using

1133
00:40:42,400 --> 00:40:45,040
instead of packer using the

1134
00:40:45,040 --> 00:40:48,400
the letters representing pect right

1135
00:40:48,400 --> 00:40:49,440
good for me

1136
00:40:49,440 --> 00:40:51,440
but as i continue i was able to see

1137
00:40:51,440 --> 00:40:53,680
another example using something entirely

1138
00:40:53,680 --> 00:40:55,920
different again using the same

1139
00:40:55,920 --> 00:40:58,000
functionality from an obfuscation point

1140
00:40:58,000 --> 00:41:01,520
of view by using different variables

1141
00:41:01,520 --> 00:41:03,839
to that functionality

1142
00:41:03,839 --> 00:41:05,680
representing something that starts with

1143
00:41:05,680 --> 00:41:07,760
underscore 0x right

1144
00:41:07,760 --> 00:41:09,760
and therefore i thought to myself maybe

1145
00:41:09,760 --> 00:41:11,040
i should change the name of the

1146
00:41:11,040 --> 00:41:12,960
presentation to something that you can

1147
00:41:12,960 --> 00:41:14,400
read at home and i don't want to read it

1148
00:41:14,400 --> 00:41:16,240
now um

1149
00:41:16,240 --> 00:41:19,440
that's just hopefully a funny anecdote

1150
00:41:19,440 --> 00:41:23,359
i think we're i'm done for today

1151
00:41:23,359 --> 00:41:26,319
um and i'm

1152
00:41:26,319 --> 00:41:28,240
available for

1153
00:41:28,240 --> 00:41:30,799
questions

1154
00:41:31,040 --> 00:41:35,240
so let me just

1155
00:41:35,680 --> 00:41:40,078
go to the relevant place

1156
00:41:43,680 --> 00:41:47,640
looking for some questions

1157
00:41:51,680 --> 00:41:54,400
i don't see any given uh

1158
00:41:54,400 --> 00:41:56,880
questions out though out there

1159
00:41:56,880 --> 00:42:01,800
if there are any please let me know

1160
00:42:10,160 --> 00:42:12,000
and we wait few minutes and we will

1161
00:42:12,000 --> 00:42:13,440
drink some water

1162
00:42:13,440 --> 00:42:16,640
because i need it

1163
00:42:16,640 --> 00:42:18,800
if no question comes in

1164
00:42:18,800 --> 00:42:21,680
so um feel free to reach out to me uh

1165
00:42:21,680 --> 00:42:24,640
the emmy uh i'm here to answer your

1166
00:42:24,640 --> 00:42:26,000
questions

1167
00:42:26,000 --> 00:42:26,370
um

1168
00:42:26,370 --> 00:42:27,599
[Music]

1169
00:42:27,599 --> 00:42:31,839
i think we are done for today

1170
00:42:32,319 --> 00:42:36,040
thank you very much everybody

