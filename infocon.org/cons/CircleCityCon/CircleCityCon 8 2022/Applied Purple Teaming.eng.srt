1
00:00:00,290 --> 00:00:09,280
[Music]

2
00:00:10,320 --> 00:00:13,120
all right guys hello everybody welcome

3
00:00:13,120 --> 00:00:14,880
thank you for joining for our today talk

4
00:00:14,880 --> 00:00:16,960
regarding applied purple teaming my name

5
00:00:16,960 --> 00:00:19,520
is pavo and today with my friend patrick

6
00:00:19,520 --> 00:00:21,439
who will try to dive with you

7
00:00:21,439 --> 00:00:23,680
into a world of purple teaming i will

8
00:00:23,680 --> 00:00:24,800
try to

9
00:00:24,800 --> 00:00:27,439
show you how a purple drink works what's

10
00:00:27,439 --> 00:00:28,960
the difference between purple teaming

11
00:00:28,960 --> 00:00:32,079
and red and blue and how actually does

12
00:00:32,079 --> 00:00:34,480
it work and what it can gives you it

13
00:00:34,480 --> 00:00:36,160
gives you to your organization

14
00:00:36,160 --> 00:00:37,200
and

15
00:00:37,200 --> 00:00:38,960
just not to make a boring powerpoint

16
00:00:38,960 --> 00:00:41,200
powerpoint slides we had a couple of

17
00:00:41,200 --> 00:00:44,079
great examples a more practical one so

18
00:00:44,079 --> 00:00:45,840
you can you can

19
00:00:45,840 --> 00:00:47,600
also try it in

20
00:00:47,600 --> 00:00:48,960
your company

21
00:00:48,960 --> 00:00:51,360
hi this is patrick so hope you enjoy our

22
00:00:51,360 --> 00:00:53,840
presentation so yeah we've been working

23
00:00:53,840 --> 00:00:55,920
for a couple of years together doing

24
00:00:55,920 --> 00:00:57,680
summer teaming projects because yeah

25
00:00:57,680 --> 00:00:59,840
everybody loves red teaming it's it's

26
00:00:59,840 --> 00:01:02,480
always cool a company orders red team

27
00:01:02,480 --> 00:01:05,119
and they have a basically pretty good

28
00:01:05,119 --> 00:01:06,799
amount of information regarding the

29
00:01:06,799 --> 00:01:09,200
current security setup and what are the

30
00:01:09,200 --> 00:01:12,240
issues and what they can actually or

31
00:01:12,240 --> 00:01:14,320
correct and but

32
00:01:14,320 --> 00:01:16,880
most of these these projects they have

33
00:01:16,880 --> 00:01:19,200
one common thing uh and this one common

34
00:01:19,200 --> 00:01:23,040
thing was a report yeah so boring report

35
00:01:23,040 --> 00:01:25,920
like uh hundreds of pages after routine

36
00:01:25,920 --> 00:01:28,320
projects what does it give to a company

37
00:01:28,320 --> 00:01:30,320
well a bunch of things a bunch of

38
00:01:30,320 --> 00:01:32,000
vulnerabilities that you can actually

39
00:01:32,000 --> 00:01:35,360
fix but they they are great of course uh

40
00:01:35,360 --> 00:01:38,000
why not because they can be exploited by

41
00:01:38,000 --> 00:01:41,360
some productor but actually we are

42
00:01:41,360 --> 00:01:44,320
always curious does it really improve

43
00:01:44,320 --> 00:01:47,280
the security of a company because you

44
00:01:47,280 --> 00:01:48,560
know

45
00:01:48,560 --> 00:01:50,799
the idea environment

46
00:01:50,799 --> 00:01:52,320
it change

47
00:01:52,320 --> 00:01:54,000
from there from time to time there are

48
00:01:54,000 --> 00:01:55,920
some new systems and new products and

49
00:01:55,920 --> 00:01:58,880
there's there are some new people so the

50
00:01:58,880 --> 00:02:00,880
teaming this is like a current state of

51
00:02:00,880 --> 00:02:03,520
the security and of course in in during

52
00:02:03,520 --> 00:02:05,759
the red team you may not have all of the

53
00:02:05,759 --> 00:02:07,439
issues because usually the report

54
00:02:07,439 --> 00:02:09,280
consists of like the one kill chain used

55
00:02:09,280 --> 00:02:10,959
by an attacker it's not like

56
00:02:10,959 --> 00:02:12,959
comprehensive report this this and this

57
00:02:12,959 --> 00:02:15,120
needs to be corrected it's just the way

58
00:02:15,120 --> 00:02:17,840
that your system has been exploited

59
00:02:17,840 --> 00:02:19,040
uh so

60
00:02:19,040 --> 00:02:21,280
yeah usually you go to

61
00:02:21,280 --> 00:02:23,599
the fancy graph uh enter where the

62
00:02:23,599 --> 00:02:25,760
attacker just entered the organization

63
00:02:25,760 --> 00:02:29,520
or what was the uh escalation method and

64
00:02:29,520 --> 00:02:32,800
if the goals were achieved or not

65
00:02:32,800 --> 00:02:35,519
but where is the blue team well usually

66
00:02:35,519 --> 00:02:37,760
blue team is hunting and lurking trying

67
00:02:37,760 --> 00:02:41,120
to catch uh red team guys but

68
00:02:41,120 --> 00:02:43,280
officially blue team they shouldn't know

69
00:02:43,280 --> 00:02:45,040
anything about the attack unofficially

70
00:02:45,040 --> 00:02:48,000
you know how it is but

71
00:02:48,000 --> 00:02:50,720
yeah the success of a of a red team is

72
00:02:50,720 --> 00:02:52,879
definitely another success of a blue

73
00:02:52,879 --> 00:02:56,239
team and also sometimes red teamers they

74
00:02:56,239 --> 00:03:00,000
try to be as quiet as possible sometimes

75
00:03:00,000 --> 00:03:01,760
it means that you cannot use some

76
00:03:01,760 --> 00:03:03,920
certain tools or you maybe don't want to

77
00:03:03,920 --> 00:03:05,840
use this set of credentials because you

78
00:03:05,840 --> 00:03:08,000
may be captured this is definitely a

79
00:03:08,000 --> 00:03:10,159
good approach but some products who

80
00:03:10,159 --> 00:03:13,200
don't care about the your industry and

81
00:03:13,200 --> 00:03:14,720
who don't care about your data being

82
00:03:14,720 --> 00:03:17,440
destroyed they may not be

83
00:03:17,440 --> 00:03:20,480
so uh so great and they actually may

84
00:03:20,480 --> 00:03:23,200
follow follow this path but

85
00:03:23,200 --> 00:03:25,440
if the blue team is there and they don't

86
00:03:25,440 --> 00:03:27,599
detect you like they don't detect most

87
00:03:27,599 --> 00:03:29,440
of the ethnic projects or at least they

88
00:03:29,440 --> 00:03:32,720
have some let's say uh very small amount

89
00:03:32,720 --> 00:03:35,599
of information why actually they can

90
00:03:35,599 --> 00:03:38,560
just simply plug the network because

91
00:03:38,560 --> 00:03:41,360
detection detection is not so simple and

92
00:03:41,360 --> 00:03:44,319
everybody who has seen like a windows

93
00:03:44,319 --> 00:03:46,319
log and any other monitoring tools from

94
00:03:46,319 --> 00:03:48,159
a big production domain

95
00:03:48,159 --> 00:03:50,400
probably will agree with me here that

96
00:03:50,400 --> 00:03:52,640
this detection isn't that simple even if

97
00:03:52,640 --> 00:03:54,159
you look at the microsoft official

98
00:03:54,159 --> 00:03:56,159
documentation you may see that some of

99
00:03:56,159 --> 00:03:57,200
the

100
00:03:57,200 --> 00:03:59,120
recommendations they have they are

101
00:03:59,120 --> 00:04:01,680
probably not the straightforward and the

102
00:04:01,680 --> 00:04:04,239
tools they are trying to help people

103
00:04:04,239 --> 00:04:06,879
they are trying to uh assign like a

104
00:04:06,879 --> 00:04:09,439
severity and what is the risk associated

105
00:04:09,439 --> 00:04:11,439
with a different kind of uh

106
00:04:11,439 --> 00:04:13,840
issues but most of the people they don't

107
00:04:13,840 --> 00:04:15,920
make like the deep dive into the log and

108
00:04:15,920 --> 00:04:18,959
see why actually this popped up and some

109
00:04:18,959 --> 00:04:21,040
of the logs are just closed and that's

110
00:04:21,040 --> 00:04:23,280
false positive probably but why exactly

111
00:04:23,280 --> 00:04:24,400
some of the official microsoft

112
00:04:24,400 --> 00:04:27,520
documentation even says that uh if uh

113
00:04:27,520 --> 00:04:29,280
past the harsh has been triggered from a

114
00:04:29,280 --> 00:04:31,120
regular user workstation then you can

115
00:04:31,120 --> 00:04:32,880
just ignore it just without deep diving

116
00:04:32,880 --> 00:04:34,639
into it well

117
00:04:34,639 --> 00:04:36,720
this probably will be a false positive

118
00:04:36,720 --> 00:04:39,680
but having that it's a it's a false

119
00:04:39,680 --> 00:04:42,400
positive approach probably won't

120
00:04:42,400 --> 00:04:44,160
won't help you and this is this

121
00:04:44,160 --> 00:04:46,479
particular example that if the hash was

122
00:04:46,479 --> 00:04:48,080
used from a computer that is used

123
00:04:48,080 --> 00:04:50,400
regularly just close it don't don't look

124
00:04:50,400 --> 00:04:51,360
at it

125
00:04:51,360 --> 00:04:53,680
yeah so that's why the detection isn't

126
00:04:53,680 --> 00:04:55,840
that simple and of course the amount of

127
00:04:55,840 --> 00:04:58,240
log and amount of information inside of

128
00:04:58,240 --> 00:05:01,440
a big organization it doesn't help you

129
00:05:01,440 --> 00:05:04,160
got a lot of different sources and

130
00:05:04,160 --> 00:05:06,960
we've seen those kind of examples that

131
00:05:06,960 --> 00:05:09,039
organizations were implementing new and

132
00:05:09,039 --> 00:05:11,919
new systems more and more feeds to

133
00:05:11,919 --> 00:05:15,360
kibana or any other monitoring tools but

134
00:05:15,360 --> 00:05:17,840
more doesn't necessarily mean better of

135
00:05:17,840 --> 00:05:20,240
course it's it's it's great that you can

136
00:05:20,240 --> 00:05:23,039
see more but it's even better if you see

137
00:05:23,039 --> 00:05:25,280
less but you understand what you see

138
00:05:25,280 --> 00:05:26,560
and

139
00:05:26,560 --> 00:05:30,080
so we get this blue team which tries to

140
00:05:30,080 --> 00:05:32,320
to shoot you you got a red team who

141
00:05:32,320 --> 00:05:35,840
tries to hack you and they are the their

142
00:05:35,840 --> 00:05:37,440
successes are not definitely your

143
00:05:37,440 --> 00:05:39,280
company's success because red team

144
00:05:39,280 --> 00:05:41,600
compromised organization great so the

145
00:05:41,600 --> 00:05:44,960
blue team doesn't work and

146
00:05:44,960 --> 00:05:47,600
blue team's success is definitely not a

147
00:05:47,600 --> 00:05:48,560
way

148
00:05:48,560 --> 00:05:50,960
not a company success so what's the

149
00:05:50,960 --> 00:05:53,199
what's the company's success actually

150
00:05:53,199 --> 00:05:55,600
and this is this is the the thing that

151
00:05:55,600 --> 00:05:58,160
we call a purple teaming so this is like

152
00:05:58,160 --> 00:06:01,360
a combination of red and blue though are

153
00:06:01,360 --> 00:06:04,000
those hybrid solutions they are popular

154
00:06:04,000 --> 00:06:06,000
these days like hybrid cars and you also

155
00:06:06,000 --> 00:06:07,280
got this in a cyber so you've got a

156
00:06:07,280 --> 00:06:09,600
hybrid between the red and blue you take

157
00:06:09,600 --> 00:06:10,319
the

158
00:06:10,319 --> 00:06:12,639
the best from those two colors try to

159
00:06:12,639 --> 00:06:16,000
combine it mix it and have this

160
00:06:16,000 --> 00:06:18,880
implemented in your organization but

161
00:06:18,880 --> 00:06:21,520
what does it really mean and how does it

162
00:06:21,520 --> 00:06:24,800
work in a in a practical so

163
00:06:24,800 --> 00:06:27,199
during this this regular purple teaming

164
00:06:27,199 --> 00:06:30,160
exercise you try to

165
00:06:30,160 --> 00:06:33,199
simulate some kind of attack like

166
00:06:33,199 --> 00:06:35,520
some kind of abc group or well known

167
00:06:35,520 --> 00:06:36,639
malware

168
00:06:36,639 --> 00:06:39,039
or or something what you probably are

169
00:06:39,039 --> 00:06:41,360
afraid of you try to run it but not

170
00:06:41,360 --> 00:06:42,960
necessarily

171
00:06:42,960 --> 00:06:45,520
as signed as possible you work with the

172
00:06:45,520 --> 00:06:48,479
blue team you run it together to see

173
00:06:48,479 --> 00:06:50,479
a can you actually run it will be

174
00:06:50,479 --> 00:06:52,560
blocked and b what

175
00:06:52,560 --> 00:06:53,919
is

176
00:06:53,919 --> 00:06:56,319
that the blue team can see whether they

177
00:06:56,319 --> 00:06:58,960
actually see some

178
00:06:58,960 --> 00:07:01,360
some iocs in your domain

179
00:07:01,360 --> 00:07:04,880
but how to make it as efficient so

180
00:07:04,880 --> 00:07:06,880
when doing a purple teaming project you

181
00:07:06,880 --> 00:07:08,000
try to

182
00:07:08,000 --> 00:07:10,400
like divide those

183
00:07:10,400 --> 00:07:12,960
those risks into as small pieces as

184
00:07:12,960 --> 00:07:15,919
possible and try to divide it first by

185
00:07:15,919 --> 00:07:18,960
the phrase so you can actually uh check

186
00:07:18,960 --> 00:07:20,160
each phrase

187
00:07:20,160 --> 00:07:22,639
so for instance in in this case we got a

188
00:07:22,639 --> 00:07:24,720
discovery phrase which is port scanning

189
00:07:24,720 --> 00:07:27,680
and we do not detect that but what we

190
00:07:27,680 --> 00:07:29,840
detect is the code execution of lucky

191
00:07:29,840 --> 00:07:32,479
strike which is great but actually only

192
00:07:32,479 --> 00:07:34,560
when dividing it into a smaller pieces

193
00:07:34,560 --> 00:07:37,360
we are actually able to see what phrase

194
00:07:37,360 --> 00:07:39,360
do we see and where is the improvement

195
00:07:39,360 --> 00:07:40,960
that we need to do

196
00:07:40,960 --> 00:07:43,360
that we need to do right and for some of

197
00:07:43,360 --> 00:07:45,360
the phrases they may actually be blocked

198
00:07:45,360 --> 00:07:47,120
like this powershell inward macro it's

199
00:07:47,120 --> 00:07:48,400
been blocked so

200
00:07:48,400 --> 00:07:49,680
uh we

201
00:07:49,680 --> 00:07:52,479
get we get this attacker's method all

202
00:07:52,479 --> 00:07:56,000
malware working method and apply it into

203
00:07:56,000 --> 00:07:58,639
our organization but what so what's the

204
00:07:58,639 --> 00:08:00,400
difference between this and the teaming

205
00:08:00,400 --> 00:08:03,120
or just regular teaming so first from

206
00:08:03,120 --> 00:08:04,720
the red perspective you launch the

207
00:08:04,720 --> 00:08:07,280
attack and from the blue perspective you

208
00:08:07,280 --> 00:08:09,360
try to see whether the attack is

209
00:08:09,360 --> 00:08:11,280
actually visible and do you have

210
00:08:11,280 --> 00:08:14,000
sufficient data to analyze it and if not

211
00:08:14,000 --> 00:08:15,919
what can actually be do

212
00:08:15,919 --> 00:08:17,280
be done to

213
00:08:17,280 --> 00:08:19,840
to have it detected

214
00:08:19,840 --> 00:08:21,440
and uh

215
00:08:21,440 --> 00:08:24,160
to support yourself you can use

216
00:08:24,160 --> 00:08:26,319
a couple of a couple of different

217
00:08:26,319 --> 00:08:29,039
metrics one of the most popular uh is

218
00:08:29,039 --> 00:08:32,240
the mitral matrix that divides the whole

219
00:08:32,240 --> 00:08:35,279
attack into a smaller smaller pieces and

220
00:08:35,279 --> 00:08:37,440
once per doing purple teaming you can

221
00:08:37,440 --> 00:08:39,200
actually make for example such a great

222
00:08:39,200 --> 00:08:41,839
heat map and try to

223
00:08:41,839 --> 00:08:45,040
see what kind of techniques are you able

224
00:08:45,040 --> 00:08:47,839
to see and what actually you need to

225
00:08:47,839 --> 00:08:48,800
work on

226
00:08:48,800 --> 00:08:50,000
a little more

227
00:08:50,000 --> 00:08:53,200
doing that gives you not only a wider

228
00:08:53,200 --> 00:08:54,399
weather perspective

229
00:08:54,399 --> 00:08:55,120
to

230
00:08:55,120 --> 00:08:57,600
what your system is capable of but you

231
00:08:57,600 --> 00:09:01,200
also have a great idea uh how the attack

232
00:09:01,200 --> 00:09:03,920
may work and how and each at which step

233
00:09:03,920 --> 00:09:05,519
you can actually block it so for

234
00:09:05,519 --> 00:09:07,279
instance you may not block a regular

235
00:09:07,279 --> 00:09:09,200
fishing because it's pretty much pretty

236
00:09:09,200 --> 00:09:10,720
pretty hard

237
00:09:10,720 --> 00:09:12,959
job to to block like a regular fishing

238
00:09:12,959 --> 00:09:14,880
but what you can do you can first for

239
00:09:14,880 --> 00:09:17,760
instance uh detect something on the

240
00:09:17,760 --> 00:09:20,000
exploitation phrase or discovery phase

241
00:09:20,000 --> 00:09:22,160
which will be also great but it's only

242
00:09:22,160 --> 00:09:24,640
possible when you will just cut it into

243
00:09:24,640 --> 00:09:27,839
a smaller pieces and for those of you

244
00:09:27,839 --> 00:09:30,640
who like the kpis or any other success

245
00:09:30,640 --> 00:09:32,560
measures how we grow up and what's the

246
00:09:32,560 --> 00:09:34,880
better from the quarter to recorder yeah

247
00:09:34,880 --> 00:09:36,160
so you can measure also the

248
00:09:36,160 --> 00:09:39,519
effectiveness so you get a uh scale is

249
00:09:39,519 --> 00:09:42,160
the company actually improving better or

250
00:09:42,160 --> 00:09:44,480
worse is the improvement in the

251
00:09:44,480 --> 00:09:46,640
structural level or maybe do we need

252
00:09:46,640 --> 00:09:49,839
some additional uh job to be to be done

253
00:09:49,839 --> 00:09:52,800
and we can also have this trend and this

254
00:09:52,800 --> 00:09:55,680
actually we believe is the real

255
00:09:55,680 --> 00:09:59,040
company's success that you are actually

256
00:09:59,040 --> 00:10:01,120
proving the company's power to detect

257
00:10:01,120 --> 00:10:04,640
and to block malicious actions uh but

258
00:10:04,640 --> 00:10:06,800
yeah this is the the theory how does it

259
00:10:06,800 --> 00:10:09,200
work in practical

260
00:10:09,200 --> 00:10:12,079
yeah so let's consider uh

261
00:10:12,079 --> 00:10:15,040
an example uh work workflow of a purple

262
00:10:15,040 --> 00:10:17,040
team so

263
00:10:17,040 --> 00:10:18,720
this usually begins with with some

264
00:10:18,720 --> 00:10:20,480
threat intelligence report for example

265
00:10:20,480 --> 00:10:23,279
we have a kill chain of mounted here

266
00:10:23,279 --> 00:10:26,640
fermented malware and as we can see

267
00:10:26,640 --> 00:10:27,920
the compromise started with some

268
00:10:27,920 --> 00:10:29,680
malicious document

269
00:10:29,680 --> 00:10:31,920
delivered for user then there was some

270
00:10:31,920 --> 00:10:34,800
code execution persistence then the

271
00:10:34,800 --> 00:10:37,120
demand will try to uh escalate

272
00:10:37,120 --> 00:10:38,880
privileges in the domain move laterally

273
00:10:38,880 --> 00:10:41,680
to in fact other servers

274
00:10:41,680 --> 00:10:44,560
and from our workstations and from there

275
00:10:44,560 --> 00:10:46,640
still still some sensitive data like

276
00:10:46,640 --> 00:10:49,120
user passwords mails or wherever there

277
00:10:49,120 --> 00:10:51,839
is to to be stolen from from users from

278
00:10:51,839 --> 00:10:53,200
the domain

279
00:10:53,200 --> 00:10:55,680
and then we can map this

280
00:10:55,680 --> 00:10:58,959
to uh guild chain to split into phases

281
00:10:58,959 --> 00:11:01,120
as i mentioned so uh

282
00:11:01,120 --> 00:11:03,440
weaponization motion documents delivery

283
00:11:03,440 --> 00:11:04,720
via phishing

284
00:11:04,720 --> 00:11:07,120
execution by user establishing comment

285
00:11:07,120 --> 00:11:09,440
and control

286
00:11:09,440 --> 00:11:12,160
activities in inside

287
00:11:12,160 --> 00:11:15,440
compromising the the environment

288
00:11:15,440 --> 00:11:17,360
both exploitation activities action

289
00:11:17,360 --> 00:11:19,279
objectives which is in this case uh

290
00:11:19,279 --> 00:11:21,279
stealing sensitive data

291
00:11:21,279 --> 00:11:23,760
and taking this further

292
00:11:23,760 --> 00:11:26,399
we can just map

293
00:11:26,399 --> 00:11:28,399
those specific techniques

294
00:11:28,399 --> 00:11:30,800
that were used by a threat actor for

295
00:11:30,800 --> 00:11:32,560
example two mitral attack matrix and

296
00:11:32,560 --> 00:11:34,880
this is a great resource for

297
00:11:34,880 --> 00:11:35,760
uh

298
00:11:35,760 --> 00:11:37,920
adversary related techniques tactics

299
00:11:37,920 --> 00:11:39,839
procedures and

300
00:11:39,839 --> 00:11:43,120
actually the purple teaming approach

301
00:11:43,120 --> 00:11:45,040
usually revolves around around this

302
00:11:45,040 --> 00:11:47,680
mitral attack framework so

303
00:11:47,680 --> 00:11:50,480
having analyzed a piece of malware

304
00:11:50,480 --> 00:11:52,560
for example by threat intelligence we we

305
00:11:52,560 --> 00:11:53,440
can

306
00:11:53,440 --> 00:11:55,760
map actually specific

307
00:11:55,760 --> 00:11:58,959
techniques that the threat actor uses

308
00:11:58,959 --> 00:12:01,040
for example in in specific phase for

309
00:12:01,040 --> 00:12:03,600
execution they could use some commands

310
00:12:03,600 --> 00:12:05,279
some macros

311
00:12:05,279 --> 00:12:09,120
windows api for discovery they use

312
00:12:09,120 --> 00:12:11,200
network share discovery so so they are

313
00:12:11,200 --> 00:12:13,120
targeting network shares and et cetera

314
00:12:13,120 --> 00:12:16,480
et cetera and we can just get those

315
00:12:16,480 --> 00:12:19,200
specific techniques that are used by by

316
00:12:19,200 --> 00:12:20,959
thread actor and then

317
00:12:20,959 --> 00:12:23,120
simulate them so we are not treating uh

318
00:12:23,120 --> 00:12:25,920
a pieces of malware or or like patrick

319
00:12:25,920 --> 00:12:28,399
said a mod as one single object rather

320
00:12:28,399 --> 00:12:31,279
as a sequence of actions and

321
00:12:31,279 --> 00:12:33,120
each of it we can actually address and

322
00:12:33,120 --> 00:12:35,519
this gives us a great ability to tune

323
00:12:35,519 --> 00:12:37,920
our devices and not treat like a oh with

324
00:12:37,920 --> 00:12:40,000
a malware that's great but we've got

325
00:12:40,000 --> 00:12:42,480
this uh sequence of actions like first

326
00:12:42,480 --> 00:12:44,720
is the delivery execution later of

327
00:12:44,720 --> 00:12:46,639
movement and so on and so on and we can

328
00:12:46,639 --> 00:12:49,600
address those each phases each is easier

329
00:12:49,600 --> 00:12:52,079
to address smaller one than one address

330
00:12:52,079 --> 00:12:54,320
one big object

331
00:12:54,320 --> 00:12:56,320
yes and we we can then tune our

332
00:12:56,320 --> 00:12:58,399
protections defenses to to those

333
00:12:58,399 --> 00:13:01,120
specifications and and see if we would

334
00:13:01,120 --> 00:13:02,800
be able to protect ourselves

335
00:13:02,800 --> 00:13:04,880
automatically or at least defend this

336
00:13:04,880 --> 00:13:07,279
kind of malicious code

337
00:13:07,279 --> 00:13:08,880
malware running

338
00:13:08,880 --> 00:13:11,040
in our environment so yeah so let's

339
00:13:11,040 --> 00:13:13,279
discuss it on a one particular example

340
00:13:13,279 --> 00:13:14,800
so let's say we got the fred intel

341
00:13:14,800 --> 00:13:16,560
report that some malicious actions is

342
00:13:16,560 --> 00:13:20,560
going is is going on and in our case we

343
00:13:20,560 --> 00:13:22,880
got in eport says that there is a

344
00:13:22,880 --> 00:13:24,800
malicious doc file with some kind of

345
00:13:24,800 --> 00:13:27,440
malicious macros and you know macros can

346
00:13:27,440 --> 00:13:29,519
can be very insecure

347
00:13:29,519 --> 00:13:32,320
and first we will try to map those ttps

348
00:13:32,320 --> 00:13:34,800
into this mitral matrix then we'll try

349
00:13:34,800 --> 00:13:37,120
to plan a simulation scenario develop

350
00:13:37,120 --> 00:13:39,760
those tdps and consider how we can

351
00:13:39,760 --> 00:13:41,839
actually detect those malicious let's

352
00:13:41,839 --> 00:13:44,560
say malicious smaller activities in our

353
00:13:44,560 --> 00:13:46,639
monitoring tool

354
00:13:46,639 --> 00:13:49,519
yeah so let's say we have this this some

355
00:13:49,519 --> 00:13:52,240
kind of of macro which which is uh

356
00:13:52,240 --> 00:13:54,959
obfuscated and executes some some

357
00:13:54,959 --> 00:13:57,360
malicious actions here so at first look

358
00:13:57,360 --> 00:13:59,600
we don't know actually what's going on

359
00:13:59,600 --> 00:14:02,480
here we can see some base64 or hex

360
00:14:02,480 --> 00:14:05,760
encoded data and some object creation so

361
00:14:05,760 --> 00:14:08,880
that's that's how uh

362
00:14:08,880 --> 00:14:10,639
visual basic for application works and

363
00:14:10,639 --> 00:14:13,519
it can instantiate object objects using

364
00:14:13,519 --> 00:14:16,480
a component object model interoperation

365
00:14:16,480 --> 00:14:17,519
so

366
00:14:17,519 --> 00:14:18,720
those objects can be used for

367
00:14:18,720 --> 00:14:20,800
downloading data starting some external

368
00:14:20,800 --> 00:14:22,800
processes so uh

369
00:14:22,800 --> 00:14:24,079
well

370
00:14:24,079 --> 00:14:25,760
such macros can be

371
00:14:25,760 --> 00:14:27,199
detected by

372
00:14:27,199 --> 00:14:29,600
anti-malware solutions like antivirus or

373
00:14:29,600 --> 00:14:32,959
some male gateway protection but

374
00:14:32,959 --> 00:14:36,560
let's uh focus on on the specific ttps

375
00:14:36,560 --> 00:14:39,600
that are used here so we have a

376
00:14:39,600 --> 00:14:42,000
piece of of malicious code and we would

377
00:14:42,000 --> 00:14:44,880
will try to extract specific techniques

378
00:14:44,880 --> 00:14:47,360
and tactics from this to

379
00:14:47,360 --> 00:14:48,240
then

380
00:14:48,240 --> 00:14:50,480
develop a simulation and simulate them

381
00:14:50,480 --> 00:14:55,199
against our environment and then uh

382
00:14:55,519 --> 00:14:58,639
just see if we can uh

383
00:14:58,639 --> 00:15:00,959
detect this so this would be a this will

384
00:15:00,959 --> 00:15:03,600
be a theoretical exercise but let's

385
00:15:03,600 --> 00:15:06,399
let's dig into this macro can we go back

386
00:15:06,399 --> 00:15:09,600
yeah so we have some

387
00:15:09,600 --> 00:15:12,079
encoded stuff here concatenation then

388
00:15:12,079 --> 00:15:14,240
zorin coding hex

389
00:15:14,240 --> 00:15:16,880
sword decryption hex decoding

390
00:15:16,880 --> 00:15:19,519
some secret key here and uh

391
00:15:19,519 --> 00:15:21,839
going further

392
00:15:21,839 --> 00:15:23,839
do obfuscating this so let's start with

393
00:15:23,839 --> 00:15:25,440
with uh

394
00:15:25,440 --> 00:15:28,959
the the first long piece of of data so

395
00:15:28,959 --> 00:15:30,240
this is some

396
00:15:30,240 --> 00:15:33,040
url pointing to powershell script invoke

397
00:15:33,040 --> 00:15:35,920
kerberos so it's it's a indicator here

398
00:15:35,920 --> 00:15:37,600
that

399
00:15:37,600 --> 00:15:40,000
this right actor this piece of malware

400
00:15:40,000 --> 00:15:42,800
is using kerberos attack and

401
00:15:42,800 --> 00:15:44,959
so that's one one specific technique

402
00:15:44,959 --> 00:15:47,120
other techniques are

403
00:15:47,120 --> 00:15:48,880
actually

404
00:15:48,880 --> 00:15:53,120
powerful execution vba execution

405
00:15:53,120 --> 00:15:54,959
malicious document execution by user

406
00:15:54,959 --> 00:15:57,360
data obfuscation and then

407
00:15:57,360 --> 00:15:59,279
after defuscating

408
00:15:59,279 --> 00:16:00,959
those

409
00:16:00,959 --> 00:16:03,199
this piece of code we can see that

410
00:16:03,199 --> 00:16:04,480
this

411
00:16:04,480 --> 00:16:07,519
piece of macro just creates a http

412
00:16:07,519 --> 00:16:08,399
request

413
00:16:08,399 --> 00:16:10,959
to download the data this this script

414
00:16:10,959 --> 00:16:12,560
and save this to disk so that's very

415
00:16:12,560 --> 00:16:15,279
simple very simplified example but to

416
00:16:15,279 --> 00:16:17,199
show show you what's going on so we have

417
00:16:17,199 --> 00:16:18,720
a piece of code that downloads the

418
00:16:18,720 --> 00:16:22,399
kerberos tool and then saves this to to

419
00:16:22,399 --> 00:16:24,000
some folder

420
00:16:24,000 --> 00:16:26,639
on the workstation and there's the

421
00:16:26,639 --> 00:16:28,800
second part of macro

422
00:16:28,800 --> 00:16:31,199
so there's also some com object

423
00:16:31,199 --> 00:16:32,720
instantiation but

424
00:16:32,720 --> 00:16:36,880
there's some obfuscated script here and

425
00:16:36,880 --> 00:16:39,199
then

426
00:16:39,279 --> 00:16:42,000
this the parts of obfuscated code are

427
00:16:42,000 --> 00:16:45,199
concatenated and executed so let's let's

428
00:16:45,199 --> 00:16:46,959
see how this would look like after

429
00:16:46,959 --> 00:16:48,399
decoding so

430
00:16:48,399 --> 00:16:49,759
uh

431
00:16:49,759 --> 00:16:52,480
having base64 decoded this and minding

432
00:16:52,480 --> 00:16:56,800
that the powershell uses utf-16

433
00:16:56,800 --> 00:16:59,839
text encoding we can get the actual

434
00:16:59,839 --> 00:17:03,040
content of of the script that would be

435
00:17:03,040 --> 00:17:04,559
executed

436
00:17:04,559 --> 00:17:07,039
in powershell via this

437
00:17:07,039 --> 00:17:09,760
shell browser window object and a shell

438
00:17:09,760 --> 00:17:11,760
execute method so this is a specific

439
00:17:11,760 --> 00:17:13,280
technique that

440
00:17:13,280 --> 00:17:14,959
helps you evade

441
00:17:14,959 --> 00:17:16,400
power and child process detection

442
00:17:16,400 --> 00:17:19,119
because normally when you would start a

443
00:17:19,119 --> 00:17:22,799
process from office from from macro for

444
00:17:22,799 --> 00:17:24,880
example the powershell in logs you would

445
00:17:24,880 --> 00:17:26,720
see that the powershell parent process

446
00:17:26,720 --> 00:17:29,039
was was the office process of winward or

447
00:17:29,039 --> 00:17:32,080
excel.txc and but using this uh

448
00:17:32,080 --> 00:17:35,200
technique we can uh we'll see later that

449
00:17:35,200 --> 00:17:37,919
the the parent process is explorer for

450
00:17:37,919 --> 00:17:41,760
that but anyway also we have uh

451
00:17:41,760 --> 00:17:44,160
some some piece of uh

452
00:17:44,160 --> 00:17:46,799
anti-malware scripting interface so msi

453
00:17:46,799 --> 00:17:49,280
bypass here and it's split into some

454
00:17:49,280 --> 00:17:51,360
parts to to bypass some kind of

455
00:17:51,360 --> 00:17:54,160
detections and then the script executed

456
00:17:54,160 --> 00:17:57,120
in powershell would just bypass mc to

457
00:17:57,120 --> 00:17:59,600
invoke kerberos successfully because

458
00:17:59,600 --> 00:18:00,480
when

459
00:18:00,480 --> 00:18:01,919
mc is

460
00:18:01,919 --> 00:18:04,880
not disabled it's working right this

461
00:18:04,880 --> 00:18:06,559
simply blocks

462
00:18:06,559 --> 00:18:09,760
default invoke kerberos scripts so that

463
00:18:09,760 --> 00:18:11,520
that's just some some technique to

464
00:18:11,520 --> 00:18:13,760
bypass detections also another ttp to

465
00:18:13,760 --> 00:18:16,720
node and successfully execute kebrostic

466
00:18:16,720 --> 00:18:18,880
attack so this this was a simple macro

467
00:18:18,880 --> 00:18:22,240
that did just that downloaded file

468
00:18:22,240 --> 00:18:24,240
with some objection obfuscated commands

469
00:18:24,240 --> 00:18:26,720
and then executed this while bypassing

470
00:18:26,720 --> 00:18:28,559
anti-malware cryptic interface

471
00:18:28,559 --> 00:18:30,960
and uh

472
00:18:30,960 --> 00:18:33,360
so so yeah so just just just overlap so

473
00:18:33,360 --> 00:18:35,440
previously before splitting that we got

474
00:18:35,440 --> 00:18:38,080
once one malicious macro and that was it

475
00:18:38,080 --> 00:18:41,440
and see how many different techniques we

476
00:18:41,440 --> 00:18:44,400
do see in this this particular macro

477
00:18:44,400 --> 00:18:46,000
like the first one it has to be somehow

478
00:18:46,000 --> 00:18:47,760
delivered so probably a phishing course

479
00:18:47,760 --> 00:18:50,480
perfection then it has to be executed so

480
00:18:50,480 --> 00:18:52,720
user execution malicious file and those

481
00:18:52,720 --> 00:18:55,600
ids those those t something those are

482
00:18:55,600 --> 00:18:57,919
directly from from the mitral matrix so

483
00:18:57,919 --> 00:18:59,760
you can look at that you could

484
00:18:59,760 --> 00:19:02,320
look at this matrix and see it yourself

485
00:19:02,320 --> 00:19:04,960
then you got those two command scripting

486
00:19:04,960 --> 00:19:05,840
uh

487
00:19:05,840 --> 00:19:08,799
dtps powershell and visual basic also

488
00:19:08,799 --> 00:19:10,960
this obfuscation this is not so tribal

489
00:19:10,960 --> 00:19:14,240
so yeah it's also a gtp why not uh then

490
00:19:14,240 --> 00:19:16,960
we got this com model and we try to

491
00:19:16,960 --> 00:19:19,520
disable something some uh

492
00:19:19,520 --> 00:19:21,280
anti-malware service interface yeah so

493
00:19:21,280 --> 00:19:23,280
if it blocks us just disable it the

494
00:19:23,280 --> 00:19:24,559
whole microsoft

495
00:19:24,559 --> 00:19:27,039
uh and then we will try to of course run

496
00:19:27,039 --> 00:19:28,799
kerberos thing because everybody loves

497
00:19:28,799 --> 00:19:31,520
kerberos think

498
00:19:31,600 --> 00:19:33,360
all right

499
00:19:33,360 --> 00:19:36,000
okay so we have identified specific ttps

500
00:19:36,000 --> 00:19:38,400
used in this piece of malware by this

501
00:19:38,400 --> 00:19:41,039
theoretical threat actor of others and

502
00:19:41,039 --> 00:19:43,120
then let's let's think about developing

503
00:19:43,120 --> 00:19:46,240
some actual simulations to emulate those

504
00:19:46,240 --> 00:19:48,559
techniques those most activities in our

505
00:19:48,559 --> 00:19:52,000
environment then to see then if this

506
00:19:52,000 --> 00:19:54,480
could be prevented or detected so the

507
00:19:54,480 --> 00:19:55,840
thing about

508
00:19:55,840 --> 00:19:58,080
my tray and and all the techniques

509
00:19:58,080 --> 00:19:59,120
described

510
00:19:59,120 --> 00:20:00,720
and actually

511
00:20:00,720 --> 00:20:03,440
attacking active directory and corporate

512
00:20:03,440 --> 00:20:05,120
environments in general most of the

513
00:20:05,120 --> 00:20:08,480
techniques just can't be blocked because

514
00:20:08,480 --> 00:20:11,039
they rely on system features like

515
00:20:11,039 --> 00:20:15,200
kerberos think like some code injection

516
00:20:15,200 --> 00:20:17,280
i don't know network scanning

517
00:20:17,280 --> 00:20:18,720
maybe network time could be blocked but

518
00:20:18,720 --> 00:20:20,400
but there are a lot of techniques that

519
00:20:20,400 --> 00:20:22,799
just can be blocked can't because that's

520
00:20:22,799 --> 00:20:24,880
how systems work and attackers those are

521
00:20:24,880 --> 00:20:26,640
features right yeah those are features

522
00:20:26,640 --> 00:20:29,039
but the features are often abused by

523
00:20:29,039 --> 00:20:31,440
attackers to to perform some

524
00:20:31,440 --> 00:20:34,480
malicious activities and that's the job

525
00:20:34,480 --> 00:20:36,000
for for the blue team guys for the

526
00:20:36,000 --> 00:20:38,559
defensive teams to detect the malicious

527
00:20:38,559 --> 00:20:40,240
activity to distinguish the malicious

528
00:20:40,240 --> 00:20:41,679
activity from normal activity for

529
00:20:41,679 --> 00:20:43,679
example to distinguish password brute

530
00:20:43,679 --> 00:20:46,840
forcing passwords spraying from

531
00:20:46,840 --> 00:20:49,200
normal from the user that forgot his

532
00:20:49,200 --> 00:20:51,120
password right yes right because when

533
00:20:51,120 --> 00:20:52,960
user forgot his password he would try to

534
00:20:52,960 --> 00:20:54,880
log in a few times not few hundred right

535
00:20:54,880 --> 00:20:57,840
right so anyway going back to those ttps

536
00:20:57,840 --> 00:20:59,120
for example to

537
00:20:59,120 --> 00:21:01,679
simulate spear phishing attachments sent

538
00:21:01,679 --> 00:21:06,080
via email we can use some uh

539
00:21:06,640 --> 00:21:09,120
open source tools like evil clippy lucky

540
00:21:09,120 --> 00:21:10,960
strike microsoft or

541
00:21:10,960 --> 00:21:12,799
there are a lot lots of tools available

542
00:21:12,799 --> 00:21:14,720
on github and you can use them to

543
00:21:14,720 --> 00:21:17,440
generate some malicious documents and

544
00:21:17,440 --> 00:21:20,480
bump your mail gateway

545
00:21:20,480 --> 00:21:23,520
mail server with with them to see if

546
00:21:23,520 --> 00:21:25,440
this would be

547
00:21:25,440 --> 00:21:28,400
detected or blocked on the

548
00:21:28,400 --> 00:21:31,600
my server ever level before reaching the

549
00:21:31,600 --> 00:21:33,520
user's uh

550
00:21:33,520 --> 00:21:34,799
mailbox

551
00:21:34,799 --> 00:21:36,720
but anyway uh

552
00:21:36,720 --> 00:21:38,799
next one is user execution so assuming

553
00:21:38,799 --> 00:21:42,320
that user uh downloaded this

554
00:21:42,320 --> 00:21:43,919
got this email with with some malicious

555
00:21:43,919 --> 00:21:44,960
document

556
00:21:44,960 --> 00:21:46,880
then the user would probably save this

557
00:21:46,880 --> 00:21:48,320
on the disk or this would be

558
00:21:48,320 --> 00:21:50,080
automatically saved in some temporary

559
00:21:50,080 --> 00:21:52,400
directory by outlook or another my

560
00:21:52,400 --> 00:21:54,559
client so to simulate this activity we

561
00:21:54,559 --> 00:21:56,640
would just drop some malicious document

562
00:21:56,640 --> 00:22:00,400
on disk and see if this would be

563
00:22:00,400 --> 00:22:03,360
deleted by antivirus or if not

564
00:22:03,360 --> 00:22:04,320
there's

565
00:22:04,320 --> 00:22:07,840
there should be some maybe logging of

566
00:22:07,840 --> 00:22:10,080
file right activity on the disk to to

567
00:22:10,080 --> 00:22:12,880
have this information for for example

568
00:22:12,880 --> 00:22:15,280
incident response process or

569
00:22:15,280 --> 00:22:17,360
something like that but that's another

570
00:22:17,360 --> 00:22:19,520
topic because this would give us a large

571
00:22:19,520 --> 00:22:22,159
amount of data if we locked or all the

572
00:22:22,159 --> 00:22:24,080
files on disk

573
00:22:24,080 --> 00:22:25,120
but

574
00:22:25,120 --> 00:22:28,240
second third first sorry third uh

575
00:22:28,240 --> 00:22:30,400
technique is is powershell so this is

576
00:22:30,400 --> 00:22:32,159
part of command and scripting

577
00:22:32,159 --> 00:22:33,919
independent and micro matrix is now

578
00:22:33,919 --> 00:22:36,159
separated into techniques and sub

579
00:22:36,159 --> 00:22:38,000
techniques so the technique is command

580
00:22:38,000 --> 00:22:40,880
and cryptic interpreter and multiple sub

581
00:22:40,880 --> 00:22:42,559
techniques fall into that category so

582
00:22:42,559 --> 00:22:44,960
for example powershell visual basics

583
00:22:44,960 --> 00:22:46,320
command line

584
00:22:46,320 --> 00:22:49,679
or windows scripting hosts so

585
00:22:49,679 --> 00:22:53,360
hta macros hda scripts and and stuff

586
00:22:53,360 --> 00:22:57,039
like that so to simulate this we we have

587
00:22:57,039 --> 00:22:58,559
two ideas to simulate malicious

588
00:22:58,559 --> 00:23:00,720
activities from this piece of code we

589
00:23:00,720 --> 00:23:03,600
have analyzed so first of all

590
00:23:03,600 --> 00:23:06,000
is simple uh

591
00:23:06,000 --> 00:23:07,600
can we go back so yeah

592
00:23:07,600 --> 00:23:09,360
so powershell with it

593
00:23:09,360 --> 00:23:12,240
encoded commands that's a typical

594
00:23:12,240 --> 00:23:15,280
way of executing

595
00:23:15,280 --> 00:23:17,840
also normal but but also malicious

596
00:23:17,840 --> 00:23:20,559
commands with powershell so

597
00:23:20,559 --> 00:23:23,039
we can simply simulate this and see if

598
00:23:23,039 --> 00:23:27,520
this would be detected and another

599
00:23:27,520 --> 00:23:30,000
idea for simulation is to

600
00:23:30,000 --> 00:23:32,799
execute file download from powershell so

601
00:23:32,799 --> 00:23:33,600
we

602
00:23:33,600 --> 00:23:35,760
then would see some some logs indicating

603
00:23:35,760 --> 00:23:38,640
that powerful process access network and

604
00:23:38,640 --> 00:23:40,799
uh downloaded the file and saved it to

605
00:23:40,799 --> 00:23:42,960
disk and

606
00:23:42,960 --> 00:23:44,080
next one

607
00:23:44,080 --> 00:23:45,600
command is cryptic interpreter as i

608
00:23:45,600 --> 00:23:46,640
mentioned

609
00:23:46,640 --> 00:23:50,000
also visual basics of vbs and vba follow

610
00:23:50,000 --> 00:23:52,960
under that category and uh

611
00:23:52,960 --> 00:23:54,240
to simulate

612
00:23:54,240 --> 00:23:57,360
so much activity originating from uh

613
00:23:57,360 --> 00:24:00,000
visual basic macro we can for example

614
00:24:00,000 --> 00:24:02,000
spawn powershell process

615
00:24:02,000 --> 00:24:04,480
uh from from the windward so as i

616
00:24:04,480 --> 00:24:05,760
mentioned before there are multiple

617
00:24:05,760 --> 00:24:08,720
techniques to spawn a process from world

618
00:24:08,720 --> 00:24:11,840
or axle macro and not always the parent

619
00:24:11,840 --> 00:24:14,640
for powershell would be the office

620
00:24:14,640 --> 00:24:17,039
process

621
00:24:17,120 --> 00:24:18,480
going further

622
00:24:18,480 --> 00:24:20,400
obfuscated

623
00:24:20,400 --> 00:24:22,320
this technique for obfuscated files

624
00:24:22,320 --> 00:24:24,400
information this can be simply simulated

625
00:24:24,400 --> 00:24:26,799
by the simulation we mentioned before so

626
00:24:26,799 --> 00:24:28,880
power spell with encoded commands so

627
00:24:28,880 --> 00:24:29,840
that's

628
00:24:29,840 --> 00:24:33,039
the simplest type of obfuscation to see

629
00:24:33,039 --> 00:24:35,840
if we can detect some some

630
00:24:35,840 --> 00:24:40,000
application activity in our logs

631
00:24:40,080 --> 00:24:42,240
ipc communication so using

632
00:24:42,240 --> 00:24:44,080
com objects component object model we

633
00:24:44,080 --> 00:24:45,120
can

634
00:24:45,120 --> 00:24:46,880
do the same that the macro did so

635
00:24:46,880 --> 00:24:49,600
instantiate some com objects and use

636
00:24:49,600 --> 00:24:51,279
them for example for command execution

637
00:24:51,279 --> 00:24:53,520
we will focus on com objects later

638
00:24:53,520 --> 00:24:55,120
and

639
00:24:55,120 --> 00:24:57,679
i can say now that this is not

640
00:24:57,679 --> 00:25:00,000
that easy to detect but we will try to

641
00:25:00,000 --> 00:25:02,640
simulate this and see what we would

642
00:25:02,640 --> 00:25:05,600
see in in our sim system for example

643
00:25:05,600 --> 00:25:06,799
uh

644
00:25:06,799 --> 00:25:08,720
empiric defenses

645
00:25:08,720 --> 00:25:11,200
so uh

646
00:25:11,200 --> 00:25:14,880
mc bypass is is a kind of security tool

647
00:25:14,880 --> 00:25:16,080
disablement

648
00:25:16,080 --> 00:25:18,720
so we can simulate the same behavior as

649
00:25:18,720 --> 00:25:20,480
in the macro there are multiple ways to

650
00:25:20,480 --> 00:25:22,400
to disable

651
00:25:22,400 --> 00:25:23,360
so

652
00:25:23,360 --> 00:25:24,960
just one technique there are a couple of

653
00:25:24,960 --> 00:25:26,720
more techniques but we decided yes we

654
00:25:26,720 --> 00:25:28,799
will stick with this i think it's the

655
00:25:28,799 --> 00:25:31,679
simplest one and and simulate this

656
00:25:31,679 --> 00:25:33,520
activity right in our theoretical

657
00:25:33,520 --> 00:25:36,960
exercise and the last one is uh

658
00:25:36,960 --> 00:25:38,720
there's

659
00:25:38,720 --> 00:25:40,640
a separate

660
00:25:40,640 --> 00:25:44,000
technique for kerberos abuse and this

661
00:25:44,000 --> 00:25:46,000
includes silver golden tickets and and

662
00:25:46,000 --> 00:25:48,080
also kerberos roasting so to simulate

663
00:25:48,080 --> 00:25:49,919
cover roasting we could

664
00:25:49,919 --> 00:25:52,400
use the invokers tool but that's too

665
00:25:52,400 --> 00:25:54,320
simple we can

666
00:25:54,320 --> 00:25:57,919
just dive into the invoke kerberos tool

667
00:25:57,919 --> 00:26:00,559
script how does it work and see that

668
00:26:00,559 --> 00:26:03,360
this uses some dotnet

669
00:26:03,360 --> 00:26:05,200
class called kerberos request a security

670
00:26:05,200 --> 00:26:07,360
token and we can

671
00:26:07,360 --> 00:26:09,600
implement some simple script that uses

672
00:26:09,600 --> 00:26:12,240
just this class not the whole vocabulary

673
00:26:12,240 --> 00:26:14,880
script to see if we could detect the

674
00:26:14,880 --> 00:26:18,480
actual kerberos connectivity

675
00:26:18,720 --> 00:26:20,640
and

676
00:26:20,640 --> 00:26:22,799
developing the simulation so

677
00:26:22,799 --> 00:26:25,840
we'll show you example of of commands

678
00:26:25,840 --> 00:26:28,159
that can be executed to to simulate the

679
00:26:28,159 --> 00:26:30,080
specific stuff so for for the first

680
00:26:30,080 --> 00:26:32,159
simulation dropping a document on the

681
00:26:32,159 --> 00:26:33,279
disk

682
00:26:33,279 --> 00:26:34,799
it couldn't be simpler right just drop

683
00:26:34,799 --> 00:26:37,200
some some file on disk some for example

684
00:26:37,200 --> 00:26:39,360
monitors file and see if this would be

685
00:26:39,360 --> 00:26:40,960
detected you can for example drop those

686
00:26:40,960 --> 00:26:43,520
files generated by will clear pv bad or

687
00:26:43,520 --> 00:26:45,840
some tools like that that generate

688
00:26:45,840 --> 00:26:48,799
malicious macros and test the antivirus

689
00:26:48,799 --> 00:26:50,320
prevention for example in your

690
00:26:50,320 --> 00:26:53,360
environment uh second simulation encode

691
00:26:53,360 --> 00:26:55,520
it and complete command so this is

692
00:26:55,520 --> 00:26:56,559
actually

693
00:26:56,559 --> 00:27:00,799
who am i command encoded with base64 and

694
00:27:00,799 --> 00:27:03,600
you could just run this sim simple one

695
00:27:03,600 --> 00:27:06,640
liner to to see what's what's visible in

696
00:27:06,640 --> 00:27:09,200
your logs if you have alerts that you

697
00:27:09,200 --> 00:27:10,799
should probably pick pick up this

698
00:27:10,799 --> 00:27:12,960
activity

699
00:27:12,960 --> 00:27:16,080
uh downloading file it's also very

700
00:27:16,080 --> 00:27:18,320
simple to perform from powershell we

701
00:27:18,320 --> 00:27:20,799
have this command let invoke web request

702
00:27:20,799 --> 00:27:22,640
and one

703
00:27:22,640 --> 00:27:25,039
interesting thing about this when you

704
00:27:25,039 --> 00:27:27,200
issue this command let

705
00:27:27,200 --> 00:27:30,000
without any switches this tries to

706
00:27:30,000 --> 00:27:32,720
instantiate internet explorer uh

707
00:27:32,720 --> 00:27:35,279
process or maybe just the

708
00:27:35,279 --> 00:27:38,480
com server to use this for file download

709
00:27:38,480 --> 00:27:40,320
but when you use this use basic parsing

710
00:27:40,320 --> 00:27:43,360
switch the the

711
00:27:43,360 --> 00:27:45,200
the request comes from powershell and

712
00:27:45,200 --> 00:27:46,000
this

713
00:27:46,000 --> 00:27:47,600
just works because the thing with

714
00:27:47,600 --> 00:27:51,120
internet explorer requires some some

715
00:27:51,120 --> 00:27:53,760
preliminary checks or

716
00:27:53,760 --> 00:27:56,240
some something and that doesn't work

717
00:27:56,240 --> 00:27:57,279
always so

718
00:27:57,279 --> 00:27:58,640
i think that occurs

719
00:27:58,640 --> 00:28:00,559
when using invoke requestor or

720
00:28:00,559 --> 00:28:03,039
administrator so everybody just use this

721
00:28:03,039 --> 00:28:04,960
use basic parsing switch

722
00:28:04,960 --> 00:28:07,200
so this works

723
00:28:07,200 --> 00:28:08,880
uh

724
00:28:08,880 --> 00:28:12,159
another simulation to simulate

725
00:28:12,159 --> 00:28:15,679
world spawning powershell process we can

726
00:28:15,679 --> 00:28:18,080
just use the the simplest command for

727
00:28:18,080 --> 00:28:21,039
that available in vba so the the

728
00:28:21,039 --> 00:28:23,360
function is shell

729
00:28:23,360 --> 00:28:26,559
and fifth simulation is

730
00:28:26,559 --> 00:28:29,600
com object instantiation so we can

731
00:28:29,600 --> 00:28:32,080
use the same thing that was

732
00:28:32,080 --> 00:28:34,240
used by the macro but in powershell so

733
00:28:34,240 --> 00:28:36,399
this works like that we are

734
00:28:36,399 --> 00:28:38,640
getting com object type from

735
00:28:38,640 --> 00:28:41,279
class id because com objects are

736
00:28:41,279 --> 00:28:43,360
distinguished by those

737
00:28:43,360 --> 00:28:46,880
grids those cls ids and then we from

738
00:28:46,880 --> 00:28:48,559
powershell we create instance of this

739
00:28:48,559 --> 00:28:51,039
comma object and then

740
00:28:51,039 --> 00:28:53,760
this com object has some

741
00:28:53,760 --> 00:28:55,600
like

742
00:28:55,600 --> 00:28:59,200
methods and fields and field document as

743
00:28:59,200 --> 00:29:01,840
field application and then this field

744
00:29:01,840 --> 00:29:04,320
application has a method shall execute

745
00:29:04,320 --> 00:29:06,640
and this can be used actually to execute

746
00:29:06,640 --> 00:29:08,799
some commands so this is a

747
00:29:08,799 --> 00:29:11,440
example of simulating

748
00:29:11,440 --> 00:29:13,600
usage of of common objects for for

749
00:29:13,600 --> 00:29:15,520
command execution and please note here

750
00:29:15,520 --> 00:29:16,240
that

751
00:29:16,240 --> 00:29:18,720
uh after running this the parameter for

752
00:29:18,720 --> 00:29:20,159
cmd would be

753
00:29:20,159 --> 00:29:22,399
explorer but parent for for notepad

754
00:29:22,399 --> 00:29:24,480
would would be cmd then so just an

755
00:29:24,480 --> 00:29:26,799
example too to understand this this

756
00:29:26,799 --> 00:29:29,279
activity and and to simulate another

757
00:29:29,279 --> 00:29:30,799
environment

758
00:29:30,799 --> 00:29:32,480
in this command you probably seen in

759
00:29:32,480 --> 00:29:35,520
previous slides but obfuscated

760
00:29:35,520 --> 00:29:38,720
yes and the thing is that this needed to

761
00:29:38,720 --> 00:29:40,799
be obfuscated because this one liner

762
00:29:40,799 --> 00:29:44,559
that bypasses mc is blocked by mc itself

763
00:29:44,559 --> 00:29:45,760
because uh

764
00:29:45,760 --> 00:29:47,279
this pretty much shows this right yeah

765
00:29:47,279 --> 00:29:49,279
obviously tries to protect itself from

766
00:29:49,279 --> 00:29:51,679
disabling because the strings with mci

767
00:29:51,679 --> 00:29:54,080
utils and it felt and stuff like that

768
00:29:54,080 --> 00:29:57,200
are are triggering uh msi response and

769
00:29:57,200 --> 00:30:00,080
saying that this is malicious so if

770
00:30:00,080 --> 00:30:02,399
on the slides before you maybe mentioned

771
00:30:02,399 --> 00:30:04,880
that maybe notice that this was split in

772
00:30:04,880 --> 00:30:07,520
some some lines so this was just to

773
00:30:07,520 --> 00:30:09,360
bypass

774
00:30:09,360 --> 00:30:12,080
mc scanning of this mc bypass and then

775
00:30:12,080 --> 00:30:14,159
after executing this

776
00:30:14,159 --> 00:30:16,399
mc wasn't working this in the current

777
00:30:16,399 --> 00:30:18,799
process and powerful would be able to

778
00:30:18,799 --> 00:30:22,399
execute the invoke kerberos tool but

779
00:30:22,399 --> 00:30:23,279
we

780
00:30:23,279 --> 00:30:26,559
would simulate a kerberos

781
00:30:26,559 --> 00:30:29,679
by just issuing some tgs requests

782
00:30:29,679 --> 00:30:32,240
to to gather ticket

783
00:30:32,240 --> 00:30:34,399
tickets for services

784
00:30:34,399 --> 00:30:35,600
and

785
00:30:35,600 --> 00:30:38,158
there's a

786
00:30:38,240 --> 00:30:42,399
not very complicated one-liner to uh

787
00:30:42,399 --> 00:30:45,200
gather a tgs ticket and then

788
00:30:45,200 --> 00:30:48,399
uh print this on on screen so uh to

789
00:30:48,399 --> 00:30:50,720
simulate kaburos we would invoke this a

790
00:30:50,720 --> 00:30:52,799
few times for four different services

791
00:30:52,799 --> 00:30:55,440
but this just gives an idea how to

792
00:30:55,440 --> 00:30:57,360
manually simulate

793
00:30:57,360 --> 00:31:01,039
a kerberos neck activity

794
00:31:02,320 --> 00:31:05,120
okay so now uh

795
00:31:05,120 --> 00:31:07,519
dropping so how we can detect the

796
00:31:07,519 --> 00:31:09,919
exactly we have triggered those specific

797
00:31:09,919 --> 00:31:12,799
ttps now the way we can we can detect

798
00:31:12,799 --> 00:31:15,760
those all right so just just uh

799
00:31:15,760 --> 00:31:18,799
as as a reminder previously patrick said

800
00:31:18,799 --> 00:31:21,279
that logging all of the file activity

801
00:31:21,279 --> 00:31:22,880
probably maybe

802
00:31:22,880 --> 00:31:23,600
uh

803
00:31:23,600 --> 00:31:24,640
some

804
00:31:24,640 --> 00:31:27,120
require uh plenty of space to to log

805
00:31:27,120 --> 00:31:29,840
everything especially in a wider domain

806
00:31:29,840 --> 00:31:32,559
but actually uh it it's great to have

807
00:31:32,559 --> 00:31:35,200
those data for uh intel then to analyze

808
00:31:35,200 --> 00:31:38,000
what actually what actually happened

809
00:31:38,000 --> 00:31:39,919
all right in the second the second step

810
00:31:39,919 --> 00:31:41,039
was

811
00:31:41,039 --> 00:31:43,279
we run this powershell encode command so

812
00:31:43,279 --> 00:31:44,799
we can uh

813
00:31:44,799 --> 00:31:47,039
just put some simple regular expression

814
00:31:47,039 --> 00:31:49,760
just to verify if there's uh this this

815
00:31:49,760 --> 00:31:53,279
encoder command phrase in the uh in the

816
00:31:53,279 --> 00:31:55,679
command which is just launched

817
00:31:55,679 --> 00:31:58,080
and for the network activity we can look

818
00:31:58,080 --> 00:31:59,840
for the network connection but keep in

819
00:31:59,840 --> 00:32:03,600
mind that there are a couple of ways to

820
00:32:04,000 --> 00:32:05,919
implement network connection so they may

821
00:32:05,919 --> 00:32:07,679
have like a different results so make

822
00:32:07,679 --> 00:32:09,919
sure that if you would like to just test

823
00:32:09,919 --> 00:32:12,080
to test everything and especially

824
00:32:12,080 --> 00:32:15,600
without free t in https uh right there

825
00:32:15,600 --> 00:32:18,080
because it won't it won't work but yeah

826
00:32:18,080 --> 00:32:20,000
in this case we can look for in using uh

827
00:32:20,000 --> 00:32:22,559
sysmon for event id free and we will

828
00:32:22,559 --> 00:32:24,159
probably see this network network

829
00:32:24,159 --> 00:32:25,279
activity

830
00:32:25,279 --> 00:32:27,919
uh for uh for this powering process

831
00:32:27,919 --> 00:32:31,600
discovery we can use event 4688 or

832
00:32:31,600 --> 00:32:34,000
sysmon event one probably with some

833
00:32:34,000 --> 00:32:36,799
additional uh remarks just to

834
00:32:36,799 --> 00:32:38,559
make sure it's not not false positive

835
00:32:38,559 --> 00:32:40,720
but this is one one way of doing that

836
00:32:40,720 --> 00:32:42,480
and one thing to note about those events

837
00:32:42,480 --> 00:32:44,640
so sysmon event one gives the parent

838
00:32:44,640 --> 00:32:46,159
process name

839
00:32:46,159 --> 00:32:49,519
but windows event uh for new newer

840
00:32:49,519 --> 00:32:51,039
windows versions this also gives the

841
00:32:51,039 --> 00:32:53,120
parent process name but for older

842
00:32:53,120 --> 00:32:55,519
versions i think this gives just parent

843
00:32:55,519 --> 00:32:57,360
process id so you would need to have

844
00:32:57,360 --> 00:32:59,679
additional information to correlate this

845
00:32:59,679 --> 00:33:02,399
id with the specific process name that

846
00:33:02,399 --> 00:33:04,159
spawned this

847
00:33:04,159 --> 00:33:07,039
in this example powershell process

848
00:33:07,039 --> 00:33:09,360
yeah in this call object script

849
00:33:09,360 --> 00:33:10,880
block logging

850
00:33:10,880 --> 00:33:12,640
yeah so so

851
00:33:12,640 --> 00:33:14,480
that's not

852
00:33:14,480 --> 00:33:17,039
easy to to detect

853
00:33:17,039 --> 00:33:20,000
this common internal operations maybe

854
00:33:20,000 --> 00:33:23,120
by analyzing loaded libraries or some

855
00:33:23,120 --> 00:33:24,960
something on

856
00:33:24,960 --> 00:33:28,480
api called level so not that simple but

857
00:33:28,480 --> 00:33:29,840
for

858
00:33:29,840 --> 00:33:32,559
one thing we could do is just enable

859
00:33:32,559 --> 00:33:36,159
powershell script block logging and

860
00:33:36,159 --> 00:33:37,760
grab those logs

861
00:33:37,760 --> 00:33:40,000
let's say for those specific cls ids

862
00:33:40,000 --> 00:33:41,440
maybe we could

863
00:33:41,440 --> 00:33:44,000
find some a mark of this malicious

864
00:33:44,000 --> 00:33:45,760
activity but

865
00:33:45,760 --> 00:33:46,880
that that

866
00:33:46,880 --> 00:33:48,880
this case is more difficult than the

867
00:33:48,880 --> 00:33:50,159
others

868
00:33:50,159 --> 00:33:51,919
also the same in the same way with the

869
00:33:51,919 --> 00:33:55,279
same side bypass so uh

870
00:33:55,279 --> 00:33:56,159
here

871
00:33:56,159 --> 00:33:58,320
we could also try try detecting this by

872
00:33:58,320 --> 00:34:00,000
by grapping through

873
00:34:00,000 --> 00:34:01,679
script block

874
00:34:01,679 --> 00:34:02,640
locks

875
00:34:02,640 --> 00:34:06,320
originating from powershell

876
00:34:06,320 --> 00:34:08,159
yeah and regarding this kerberos thing

877
00:34:08,159 --> 00:34:09,520
for those of you who are familiar with

878
00:34:09,520 --> 00:34:11,119
kerberos think those are the two event

879
00:34:11,119 --> 00:34:13,520
ids which you will be worth to observe

880
00:34:13,520 --> 00:34:15,599
and especially if you look in the into

881
00:34:15,599 --> 00:34:17,199
the details there are a couple of more

882
00:34:17,199 --> 00:34:19,520
remarks to watch on like the ticket

883
00:34:19,520 --> 00:34:21,280
encryption time because they they are

884
00:34:21,280 --> 00:34:23,280
kind of different for the legitimate use

885
00:34:23,280 --> 00:34:25,520
and for the attacker's perspective and

886
00:34:25,520 --> 00:34:26,800
of course make sure to use the time

887
00:34:26,800 --> 00:34:28,719
correlation especially between all those

888
00:34:28,719 --> 00:34:31,280
activities maybe in the next step of the

889
00:34:31,280 --> 00:34:33,760
on the simulation

890
00:34:33,760 --> 00:34:36,320
all right uh if you find it interesting

891
00:34:36,320 --> 00:34:38,399
we got a couple of extra resources for

892
00:34:38,399 --> 00:34:40,560
you just to just leave

893
00:34:40,560 --> 00:34:42,000
it somewhere so

894
00:34:42,000 --> 00:34:44,320
uh so so yeah that's so that's that's

895
00:34:44,320 --> 00:34:47,280
that's basically the list uh one word as

896
00:34:47,280 --> 00:34:49,520
a final comment from us is that actually

897
00:34:49,520 --> 00:34:51,679
uh when you do this purple teaming this

898
00:34:51,679 --> 00:34:54,079
is not like one week job this project

899
00:34:54,079 --> 00:34:57,760
could take uh take a longer time it's uh

900
00:34:57,760 --> 00:34:59,760
it's a constant project so your company

901
00:34:59,760 --> 00:35:01,599
is developing you is growing you're

902
00:35:01,599 --> 00:35:04,480
making some tests then you redo those

903
00:35:04,480 --> 00:35:06,640
repeat and may try to

904
00:35:06,640 --> 00:35:09,280
just just just grow right and a lot of

905
00:35:09,280 --> 00:35:11,680
people also uh

906
00:35:11,680 --> 00:35:13,680
ask whether the purple has to be a

907
00:35:13,680 --> 00:35:17,599
separate team or if that also can be

908
00:35:17,599 --> 00:35:19,359
like a co-working between red and blue

909
00:35:19,359 --> 00:35:21,440
patrick you are the technical director

910
00:35:21,440 --> 00:35:22,720
of such a team

911
00:35:22,720 --> 00:35:23,920
yeah so

912
00:35:23,920 --> 00:35:26,160
i work in a global bank and i'm a

913
00:35:26,160 --> 00:35:28,320
technical director in purple team so

914
00:35:28,320 --> 00:35:30,320
from my perspective we have a separate

915
00:35:30,320 --> 00:35:31,680
purple team

916
00:35:31,680 --> 00:35:32,560
which

917
00:35:32,560 --> 00:35:36,079
acts a little bit as a red team because

918
00:35:36,079 --> 00:35:37,359
we

919
00:35:37,359 --> 00:35:40,960
develop and execute simulations so with

920
00:35:40,960 --> 00:35:43,200
me having this offensive returning

921
00:35:43,200 --> 00:35:45,359
background it's it's it's very cool cool

922
00:35:45,359 --> 00:35:47,599
job and i can bring some value to the

923
00:35:47,599 --> 00:35:50,320
proper teaming approach and we cooperate

924
00:35:50,320 --> 00:35:52,720
closely with with the blue team there

925
00:35:52,720 --> 00:35:53,680
and

926
00:35:53,680 --> 00:35:56,000
just

927
00:35:56,400 --> 00:35:58,240
we have taken the retiming approach to

928
00:35:58,240 --> 00:36:00,640
the next level so this is a kind of

929
00:36:00,640 --> 00:36:03,119
threatening evolution to not just

930
00:36:03,119 --> 00:36:05,520
perform testing once or twice a year but

931
00:36:05,520 --> 00:36:07,119
to simulate

932
00:36:07,119 --> 00:36:09,839
those known ttps continuously and

933
00:36:09,839 --> 00:36:12,800
continuously validate

934
00:36:12,800 --> 00:36:14,320
our

935
00:36:14,320 --> 00:36:16,240
prevention and detection capabilities to

936
00:36:16,240 --> 00:36:18,480
enhance to create for example new use

937
00:36:18,480 --> 00:36:21,599
cases for monitoring to implement some

938
00:36:21,599 --> 00:36:24,000
new data sources to detect those attacks

939
00:36:24,000 --> 00:36:25,200
so

940
00:36:25,200 --> 00:36:28,720
purple teaming is is uh

941
00:36:28,720 --> 00:36:30,320
some some step

942
00:36:30,320 --> 00:36:32,800
not the first step of security journey

943
00:36:32,800 --> 00:36:34,720
so that's not for everybody right you

944
00:36:34,720 --> 00:36:37,200
you would need to first

945
00:36:37,200 --> 00:36:39,359
have a

946
00:36:39,359 --> 00:36:41,440
somehow secured environment you need

947
00:36:41,440 --> 00:36:42,880
some detection right also you have to

948
00:36:42,880 --> 00:36:44,480
here yes

949
00:36:44,480 --> 00:36:45,920
of course you need to

950
00:36:45,920 --> 00:36:47,680
for example this starts with some

951
00:36:47,680 --> 00:36:49,200
security configurations then you

952
00:36:49,200 --> 00:36:51,040
implement some pen testing vulnerability

953
00:36:51,040 --> 00:36:52,800
scanning then

954
00:36:52,800 --> 00:36:54,800
when you need to uh

955
00:36:54,800 --> 00:36:57,280
simulate actual attacker rather than do

956
00:36:57,280 --> 00:36:59,119
do pen test you

957
00:36:59,119 --> 00:37:00,960
hire a red team or

958
00:37:00,960 --> 00:37:03,200
external or create an internal red team

959
00:37:03,200 --> 00:37:06,320
to simulate those attacks and then

960
00:37:06,320 --> 00:37:07,920
when you have some detection

961
00:37:07,920 --> 00:37:10,000
capabilities some response capabilities

962
00:37:10,000 --> 00:37:12,320
you can

963
00:37:13,119 --> 00:37:16,160
gain from those writing exercises or

964
00:37:16,160 --> 00:37:18,480
create for example a purple team in your

965
00:37:18,480 --> 00:37:20,400
organization to

966
00:37:20,400 --> 00:37:22,240
run run this continuously so that's

967
00:37:22,240 --> 00:37:23,599
nothing

968
00:37:23,599 --> 00:37:24,880
that's not a

969
00:37:24,880 --> 00:37:26,880
single task that's even another project

970
00:37:26,880 --> 00:37:29,200
that just kind of job right the purple

971
00:37:29,200 --> 00:37:31,839
teaming at least for me so uh

972
00:37:31,839 --> 00:37:34,240
for example i'm working on a daily basis

973
00:37:34,240 --> 00:37:36,640
on that so so developing testing

974
00:37:36,640 --> 00:37:38,720
developing looking for for new

975
00:37:38,720 --> 00:37:40,640
techniques for

976
00:37:40,640 --> 00:37:42,560
gathering some input from threat

977
00:37:42,560 --> 00:37:45,599
intelligence guys to to

978
00:37:45,599 --> 00:37:48,079
know what's what's trendy now what we

979
00:37:48,079 --> 00:37:49,040
should

980
00:37:49,040 --> 00:37:51,440
test and check the detections if we

981
00:37:51,440 --> 00:37:54,000
would be ready for some apt group if

982
00:37:54,000 --> 00:37:57,040
they attack us so that that's a long

983
00:37:57,040 --> 00:37:59,359
journey and and to sum up the purple

984
00:37:59,359 --> 00:38:01,440
team is great approach but

985
00:38:01,440 --> 00:38:04,160
this requires some some security

986
00:38:04,160 --> 00:38:06,640
maturity in your organization but

987
00:38:06,640 --> 00:38:08,079
if you have

988
00:38:08,079 --> 00:38:10,800
some detection response capabilities you

989
00:38:10,800 --> 00:38:13,920
can uh surely

990
00:38:16,240 --> 00:38:18,720
benefit from from this approach yeah so

991
00:38:18,720 --> 00:38:20,640
uh so definitely the biggest advantage

992
00:38:20,640 --> 00:38:22,800
against just doing the regular teaming

993
00:38:22,800 --> 00:38:24,240
of course we are not saying that red

994
00:38:24,240 --> 00:38:26,880
teams are not good they are great but

995
00:38:26,880 --> 00:38:30,480
they each have uh everything has its own

996
00:38:30,480 --> 00:38:32,720
pros and cons right so uh the biggest

997
00:38:32,720 --> 00:38:34,880
advantage is that this state of security

998
00:38:34,880 --> 00:38:37,440
is like more constant one you can easily

999
00:38:37,440 --> 00:38:40,400
grow and improve not just oh here it is

1000
00:38:40,400 --> 00:38:42,400
here was there let's say let's say some

1001
00:38:42,400 --> 00:38:45,119
kind of broken delegation or some

1002
00:38:45,119 --> 00:38:46,800
simple passwords yeah so we are fixing

1003
00:38:46,800 --> 00:38:48,800
that and that's it so

1004
00:38:48,800 --> 00:38:50,079
this is not the case in the purple

1005
00:38:50,079 --> 00:38:51,920
teaming it's much like a constant one

1006
00:38:51,920 --> 00:38:54,079
and one more repository on my one more

1007
00:38:54,079 --> 00:38:56,000
great resource where i think

1008
00:38:56,000 --> 00:38:58,880
you are really welcome to to see is the

1009
00:38:58,880 --> 00:39:01,760
atomic red team a repository uh because

1010
00:39:01,760 --> 00:39:04,640
it's like uh let's say industry industry

1011
00:39:04,640 --> 00:39:06,720
known as the good works right everybody

1012
00:39:06,720 --> 00:39:10,079
knows it this uh yes this is the first

1013
00:39:10,079 --> 00:39:12,079
go-to point for purple teaming i think

1014
00:39:12,079 --> 00:39:14,880
so this is just taking atomic attacking

1015
00:39:14,880 --> 00:39:18,079
rhetoric approach atomizing it's also

1016
00:39:18,079 --> 00:39:19,359
splitting

1017
00:39:19,359 --> 00:39:22,720
attacks into those ttps into

1018
00:39:22,720 --> 00:39:24,960
non-dividable parts hence the name

1019
00:39:24,960 --> 00:39:27,680
atomic right and and executing them so

1020
00:39:27,680 --> 00:39:28,800
so

1021
00:39:28,800 --> 00:39:31,280
when you want to start to

1022
00:39:31,280 --> 00:39:33,599
with the purple teaming approach you can

1023
00:39:33,599 --> 00:39:35,440
visit this repository download the tool

1024
00:39:35,440 --> 00:39:38,240
and there are there's a

1025
00:39:38,240 --> 00:39:41,280
large library of implemented ttps just

1026
00:39:41,280 --> 00:39:43,839
how we walked through them before and

1027
00:39:43,839 --> 00:39:45,119
you can

1028
00:39:45,119 --> 00:39:47,839
repeatedly regularly simulate

1029
00:39:47,839 --> 00:39:49,839
those ctps on your environment to check

1030
00:39:49,839 --> 00:39:52,000
your preventions and mainly detections

1031
00:39:52,000 --> 00:39:53,680
yeah and of course those tests can be as

1032
00:39:53,680 --> 00:39:55,760
simple as just dropping a files as

1033
00:39:55,760 --> 00:39:58,640
complicated as implemented some uh

1034
00:39:58,640 --> 00:40:00,000
implementing some common objects and

1035
00:40:00,000 --> 00:40:02,880
trying to actually uh spot them so yeah

1036
00:40:02,880 --> 00:40:05,920
uh so that's basically it we uh

1037
00:40:05,920 --> 00:40:08,160
uh we really have we really encourage

1038
00:40:08,160 --> 00:40:10,480
you to take more look than that and this

1039
00:40:10,480 --> 00:40:12,400
was pretty much everything that we have

1040
00:40:12,400 --> 00:40:15,599
prepared uh for you for today and i know

1041
00:40:15,599 --> 00:40:17,760
if we have any questions

1042
00:40:17,760 --> 00:40:18,880
but

1043
00:40:18,880 --> 00:40:20,720
if not it's been great to speak to you

1044
00:40:20,720 --> 00:40:23,119
guys today simply let's check the

1045
00:40:23,119 --> 00:40:25,200
questions on the chat and also

1046
00:40:25,200 --> 00:40:27,760
uh we are hosting a purple teaming

1047
00:40:27,760 --> 00:40:29,839
workshop tomorrow so

1048
00:40:29,839 --> 00:40:32,240
probably some some of you have

1049
00:40:32,240 --> 00:40:35,359
are joining tomorrow so

1050
00:40:35,359 --> 00:40:37,119
we're waiting for you and

1051
00:40:37,119 --> 00:40:39,520
we will do

1052
00:40:39,520 --> 00:40:41,440
this kind of exercise but practically

1053
00:40:41,440 --> 00:40:44,079
implement some some

1054
00:40:44,079 --> 00:40:46,400
develop some simulations and then

1055
00:40:46,400 --> 00:40:47,520
see

1056
00:40:47,520 --> 00:40:50,800
about the detections in in system logs

1057
00:40:50,800 --> 00:40:54,160
just checking the questions

1058
00:40:55,359 --> 00:40:57,280
uh there was a question if we plan to

1059
00:40:57,280 --> 00:40:59,760
post those slides somewhere

1060
00:40:59,760 --> 00:41:01,040
uh

1061
00:41:01,040 --> 00:41:02,960
yes i think i think we can share them

1062
00:41:02,960 --> 00:41:05,359
either via yeah we will post a link on

1063
00:41:05,359 --> 00:41:07,280
our twitter so so watch our twitter and

1064
00:41:07,280 --> 00:41:09,920
yeah and we will post the slides then i

1065
00:41:09,920 --> 00:41:11,520
think it will be much useful because

1066
00:41:11,520 --> 00:41:13,760
copying and pasting those comments pro

1067
00:41:13,760 --> 00:41:15,359
especially those links could be a tough

1068
00:41:15,359 --> 00:41:18,160
job yeah but okay we will try to upload

1069
00:41:18,160 --> 00:41:19,520
it later today and post a link on

1070
00:41:19,520 --> 00:41:22,960
twitter so follow us on twitter and

1071
00:41:22,960 --> 00:41:24,960
if there are no other questions then

1072
00:41:24,960 --> 00:41:27,440
thank you so much for uh

1073
00:41:27,440 --> 00:41:29,599
for your time and

1074
00:41:29,599 --> 00:41:31,839
hope see you see you later

1075
00:41:31,839 --> 00:41:35,839
thanks hope you enjoyed the presentation

