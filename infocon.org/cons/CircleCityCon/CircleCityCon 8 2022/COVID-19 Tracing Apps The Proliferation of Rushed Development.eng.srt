1
00:00:00,680 --> 00:00:10,800
[Music]

2
00:00:10,800 --> 00:00:13,280
hello everyone thanks for coming

3
00:00:13,280 --> 00:00:15,679
i'm alex freelos and i'm joined by my

4
00:00:15,679 --> 00:00:17,760
colleague here jack butler

5
00:00:17,760 --> 00:00:20,400
and we're presenting on covet 19 tracing

6
00:00:20,400 --> 00:00:22,480
apps the proliferation of rush

7
00:00:22,480 --> 00:00:25,039
development

8
00:00:25,199 --> 00:00:27,599
now a little bit about ourselves

9
00:00:27,599 --> 00:00:29,679
i'm uh currently a director at fortune

10
00:00:29,679 --> 00:00:31,439
500 company

11
00:00:31,439 --> 00:00:34,079
directing a penetration testing team

12
00:00:34,079 --> 00:00:35,840
i'd like to consider myself technical as

13
00:00:35,840 --> 00:00:38,000
well as managerial

14
00:00:38,000 --> 00:00:39,360
some of my interests lie in web

15
00:00:39,360 --> 00:00:42,559
application testing aviation testing and

16
00:00:42,559 --> 00:00:45,120
just enjoying the outdoors

17
00:00:45,120 --> 00:00:47,680
and my name is john butler i'm a mobile

18
00:00:47,680 --> 00:00:50,160
application security specialist and i

19
00:00:50,160 --> 00:00:51,520
have a strong background in the

20
00:00:51,520 --> 00:00:53,680
prevention of reverse engineering of

21
00:00:53,680 --> 00:00:56,239
mobile applications i currently work as

22
00:00:56,239 --> 00:00:58,480
a security specialist for a leading firm

23
00:00:58,480 --> 00:01:00,559
in the mobile application security space

24
00:01:00,559 --> 00:01:03,120
named guard square and much of the

25
00:01:03,120 --> 00:01:04,400
research

26
00:01:04,400 --> 00:01:06,000
and the takeaways that we're presenting

27
00:01:06,000 --> 00:01:08,000
on here today were conducted alongside

28
00:01:08,000 --> 00:01:10,560
my peers uh and as part of my daily

29
00:01:10,560 --> 00:01:13,840
duties at guard square

30
00:01:14,320 --> 00:01:16,080
now to get things kicked off we're going

31
00:01:16,080 --> 00:01:18,080
to provide a brief overview of what we

32
00:01:18,080 --> 00:01:19,600
hope to accomplish during today's

33
00:01:19,600 --> 00:01:21,759
conversation and to give you a bit more

34
00:01:21,759 --> 00:01:23,759
context regarding the analysis we

35
00:01:23,759 --> 00:01:25,680
performed and the findings we've made as

36
00:01:25,680 --> 00:01:27,280
a result

37
00:01:27,280 --> 00:01:28,560
to do this

38
00:01:28,560 --> 00:01:29,920
i would like to give you a little bit

39
00:01:29,920 --> 00:01:31,360
more of a backdrop

40
00:01:31,360 --> 00:01:32,960
starting with the purpose of today's

41
00:01:32,960 --> 00:01:35,520
conversation which is kobit 19 contact

42
00:01:35,520 --> 00:01:37,840
tracing applications now for anybody

43
00:01:37,840 --> 00:01:40,159
unfamiliar with what a contact tracing

44
00:01:40,159 --> 00:01:42,240
application does or what the purpose of

45
00:01:42,240 --> 00:01:44,560
a contact tracing app is it's very

46
00:01:44,560 --> 00:01:47,040
simple a contact tracing application is

47
00:01:47,040 --> 00:01:49,439
simply designed in order to trace

48
00:01:49,439 --> 00:01:51,759
individuals using the application

49
00:01:51,759 --> 00:01:53,680
and alert individuals of potential

50
00:01:53,680 --> 00:01:56,719
exposures to cobit 19 virus so if i come

51
00:01:56,719 --> 00:01:58,719
in the proximity of another user who has

52
00:01:58,719 --> 00:02:01,600
tested positive for covet 19 i will then

53
00:02:01,600 --> 00:02:04,240
receive a notification so that i can go

54
00:02:04,240 --> 00:02:06,479
get tested myself as well

55
00:02:06,479 --> 00:02:07,200
now

56
00:02:07,200 --> 00:02:08,800
as part of today's conversation we're

57
00:02:08,800 --> 00:02:10,318
going to provide a clear timeline of

58
00:02:10,318 --> 00:02:12,160
events so that you can understand not

59
00:02:12,160 --> 00:02:14,720
only the analysis that we performed but

60
00:02:14,720 --> 00:02:15,599
also

61
00:02:15,599 --> 00:02:17,280
the time in which we performed that

62
00:02:17,280 --> 00:02:19,440
analysis we're also going to be

63
00:02:19,440 --> 00:02:21,520
discussing the importance of a trust

64
00:02:21,520 --> 00:02:23,520
especially as it relates to contact

65
00:02:23,520 --> 00:02:25,680
tracing applications and effectively

66
00:02:25,680 --> 00:02:27,920
fighting the pandemic

67
00:02:27,920 --> 00:02:29,440
and we're going to be going over our

68
00:02:29,440 --> 00:02:31,519
analysis so our testing approach and our

69
00:02:31,519 --> 00:02:34,239
methodology the body of applications and

70
00:02:34,239 --> 00:02:36,560
scope as well as our findings that were

71
00:02:36,560 --> 00:02:38,640
derived from analyzing all of the data

72
00:02:38,640 --> 00:02:39,840
that we found

73
00:02:39,840 --> 00:02:41,680
and lastly we are going to be providing

74
00:02:41,680 --> 00:02:43,760
recommendations as well as key takeaways

75
00:02:43,760 --> 00:02:45,440
when it comes to

76
00:02:45,440 --> 00:02:47,599
any contact tracing application not just

77
00:02:47,599 --> 00:02:50,160
that of covid19 but potentially future

78
00:02:50,160 --> 00:02:52,480
contact tracing applications as well

79
00:02:52,480 --> 00:02:53,519
and

80
00:02:53,519 --> 00:02:55,680
other rushed development scenarios which

81
00:02:55,680 --> 00:02:58,720
might equally apply

82
00:03:00,000 --> 00:03:01,920
so now that we've provided a general

83
00:03:01,920 --> 00:03:03,519
overview of what we'll be discussing

84
00:03:03,519 --> 00:03:05,519
today we can move on to providing an

85
00:03:05,519 --> 00:03:07,280
overview of both our testing approach

86
00:03:07,280 --> 00:03:09,760
and our methodology and in order to do

87
00:03:09,760 --> 00:03:11,680
that i would like to cover these three

88
00:03:11,680 --> 00:03:13,519
main points regarding our testing

89
00:03:13,519 --> 00:03:14,480
approach

90
00:03:14,480 --> 00:03:16,319
so that's going to be the body of

91
00:03:16,319 --> 00:03:18,879
applications that actually were in the

92
00:03:18,879 --> 00:03:21,040
scope of our analysis

93
00:03:21,040 --> 00:03:22,879
it's also going to cover the individual

94
00:03:22,879 --> 00:03:24,959
controls that we were looking for inside

95
00:03:24,959 --> 00:03:26,720
of each of the applications that we

96
00:03:26,720 --> 00:03:29,680
analyzed and finally it's going to cover

97
00:03:29,680 --> 00:03:31,280
a summary of findings based on the

98
00:03:31,280 --> 00:03:35,120
analysis that was actually performed

99
00:03:35,680 --> 00:03:37,440
now in order to give you better line of

100
00:03:37,440 --> 00:03:39,840
sight into not only the analysis that we

101
00:03:39,840 --> 00:03:41,840
performed but when we performed that

102
00:03:41,840 --> 00:03:45,040
analysis i created a slide here in order

103
00:03:45,040 --> 00:03:47,920
to provide a general timeline so you can

104
00:03:47,920 --> 00:03:49,840
see in june of 2020 i had the

105
00:03:49,840 --> 00:03:52,640
opportunity of analyzing 14 of the

106
00:03:52,640 --> 00:03:55,519
original android covid 19 contact

107
00:03:55,519 --> 00:03:58,640
tracing applications at the time the

108
00:03:58,640 --> 00:04:00,480
data was limited to android these were

109
00:04:00,480 --> 00:04:03,200
only apks and so i cannot uh evaluate

110
00:04:03,200 --> 00:04:04,879
and investigate the ios side of the

111
00:04:04,879 --> 00:04:07,840
house but um at that time the privacy

112
00:04:07,840 --> 00:04:10,879
and security concerns were certainly

113
00:04:10,879 --> 00:04:12,560
enough in order to spark an interest in

114
00:04:12,560 --> 00:04:13,920
performing a second round of

115
00:04:13,920 --> 00:04:16,000
investigation in order to expand that

116
00:04:16,000 --> 00:04:18,720
data set perhaps and also uh take a look

117
00:04:18,720 --> 00:04:20,238
at how

118
00:04:20,238 --> 00:04:22,000
new applications have progressed over

119
00:04:22,000 --> 00:04:24,320
time and so that's exactly what we did

120
00:04:24,320 --> 00:04:26,880
in december of 2020 as you can see

121
00:04:26,880 --> 00:04:29,120
not only did we

122
00:04:29,120 --> 00:04:32,160
reanalyze the original 14 uh

123
00:04:32,160 --> 00:04:34,400
android kovid19 contact tracing

124
00:04:34,400 --> 00:04:36,639
applications that we looked at initially

125
00:04:36,639 --> 00:04:38,639
but we expanded that data set by adding

126
00:04:38,639 --> 00:04:41,840
another 38 unique android kovid 19

127
00:04:41,840 --> 00:04:44,080
contact tracing applications

128
00:04:44,080 --> 00:04:45,840
totaling 52

129
00:04:45,840 --> 00:04:47,919
android applications on the android side

130
00:04:47,919 --> 00:04:50,080
of the house and we also extended that

131
00:04:50,080 --> 00:04:53,360
data set by adding 43 unique ios covid

132
00:04:53,360 --> 00:04:56,080
19 contact tracing applications in order

133
00:04:56,080 --> 00:04:57,840
to get a better

134
00:04:57,840 --> 00:04:59,120
uh

135
00:04:59,120 --> 00:05:01,440
look at what we actually see on the ios

136
00:05:01,440 --> 00:05:03,440
front as well

137
00:05:03,440 --> 00:05:05,680
so in order to provide a 30 000 foot

138
00:05:05,680 --> 00:05:07,600
view and a breakdown you can see that we

139
00:05:07,600 --> 00:05:10,400
analyzed 95 applications in total the

140
00:05:10,400 --> 00:05:12,639
majority of these were created by public

141
00:05:12,639 --> 00:05:15,440
health authorities around the world

142
00:05:15,440 --> 00:05:16,960
something that's interesting is that not

143
00:05:16,960 --> 00:05:18,639
all of these applications were created

144
00:05:18,639 --> 00:05:20,240
by individual countries but you can

145
00:05:20,240 --> 00:05:22,000
actually see that some of these were

146
00:05:22,000 --> 00:05:23,280
produced by

147
00:05:23,280 --> 00:05:26,160
states and u.s territories of which we

148
00:05:26,160 --> 00:05:28,000
had the opportunity to analyze some of

149
00:05:28,000 --> 00:05:30,639
these as well

150
00:05:31,680 --> 00:05:33,440
now i would also like to introduce

151
00:05:33,440 --> 00:05:35,600
what's called the exposure notifications

152
00:05:35,600 --> 00:05:36,800
api

153
00:05:36,800 --> 00:05:38,800
the exposure notifications api was

154
00:05:38,800 --> 00:05:41,680
created by apple and by google back in

155
00:05:41,680 --> 00:05:43,520
may of 20 of 20

156
00:05:43,520 --> 00:05:45,600
2020 excuse me and

157
00:05:45,600 --> 00:05:47,919
the main goal here was to unify the way

158
00:05:47,919 --> 00:05:50,240
in which developers create both safe and

159
00:05:50,240 --> 00:05:52,960
secure contact tracing applications

160
00:05:52,960 --> 00:05:55,120
and it is quite simple it works on a

161
00:05:55,120 --> 00:05:57,199
very simple but secure bluetooth

162
00:05:57,199 --> 00:05:59,199
implementation

163
00:05:59,199 --> 00:06:01,919
so if i am using the application and i

164
00:06:01,919 --> 00:06:03,600
come in contact with another user who

165
00:06:03,600 --> 00:06:06,080
has tested positive i will be alerted of

166
00:06:06,080 --> 00:06:09,120
that potential exposure so that i myself

167
00:06:09,120 --> 00:06:12,240
can go ahead and get tested myself

168
00:06:12,240 --> 00:06:14,560
now once again this does not rely on any

169
00:06:14,560 --> 00:06:17,039
form of gps tracking information and it

170
00:06:17,039 --> 00:06:19,680
also does not request any other forms of

171
00:06:19,680 --> 00:06:22,319
potentially sensitive user data such as

172
00:06:22,319 --> 00:06:25,520
a passport number or a phone number or

173
00:06:25,520 --> 00:06:27,600
other pieces of information which simply

174
00:06:27,600 --> 00:06:30,080
aren't required to anonymously safely

175
00:06:30,080 --> 00:06:32,800
and securely notify users of potential

176
00:06:32,800 --> 00:06:35,600
exposures to the virus

177
00:06:35,600 --> 00:06:37,600
now i've also provided some developer

178
00:06:37,600 --> 00:06:39,520
documentation here for anybody that's

179
00:06:39,520 --> 00:06:41,680
interested in taking a closer look

180
00:06:41,680 --> 00:06:43,759
regarding the implementation and the api

181
00:06:43,759 --> 00:06:45,600
itself you can also see that it provided

182
00:06:45,600 --> 00:06:47,520
some some links below

183
00:06:47,520 --> 00:06:49,120
in order to give you

184
00:06:49,120 --> 00:06:51,520
more information surrounding the api but

185
00:06:51,520 --> 00:06:52,960
that won't be the main portion of

186
00:06:52,960 --> 00:06:55,039
today's conversation

187
00:06:55,039 --> 00:06:58,000
you know there were two primary goals uh

188
00:06:58,000 --> 00:07:00,639
when creating the exposure notification

189
00:07:00,639 --> 00:07:01,840
api

190
00:07:01,840 --> 00:07:04,319
that being safety privacy and of course

191
00:07:04,319 --> 00:07:06,160
security as a whole

192
00:07:06,160 --> 00:07:08,560
so safely and securely

193
00:07:08,560 --> 00:07:11,599
notify users of potential exposures

194
00:07:11,599 --> 00:07:14,319
goes about this by using bluetooth

195
00:07:14,319 --> 00:07:16,800
and not gps data but also to limit the

196
00:07:16,800 --> 00:07:18,319
amount of information that's actually

197
00:07:18,319 --> 00:07:21,280
collected uh so that it is not

198
00:07:21,280 --> 00:07:23,680
left unsecured and unencrypted for

199
00:07:23,680 --> 00:07:25,520
attackers to find later

200
00:07:25,520 --> 00:07:27,919
um and so the way it does this by is by

201
00:07:27,919 --> 00:07:29,680
actually not collecting any additional

202
00:07:29,680 --> 00:07:31,520
pieces of information at all and

203
00:07:31,520 --> 00:07:33,759
therefore it doesn't need to be secured

204
00:07:33,759 --> 00:07:35,280
now the real key thing to understand

205
00:07:35,280 --> 00:07:37,759
about the exposure notification api that

206
00:07:37,759 --> 00:07:39,599
differentiates it from other solutions

207
00:07:39,599 --> 00:07:42,319
or other options is that the first it

208
00:07:42,319 --> 00:07:44,240
doesn't rely on gps data which is a

209
00:07:44,240 --> 00:07:46,080
privacy concern

210
00:07:46,080 --> 00:07:47,440
in of itself

211
00:07:47,440 --> 00:07:49,120
the second thing is that it also does

212
00:07:49,120 --> 00:07:51,360
not request any additional pieces of

213
00:07:51,360 --> 00:07:54,400
user information which would otherwise

214
00:07:54,400 --> 00:07:56,879
need to be secured but in

215
00:07:56,879 --> 00:07:59,360
some of our analysis we noticed um you

216
00:07:59,360 --> 00:08:00,960
know there were applications that are

217
00:08:00,960 --> 00:08:03,520
using gps data um collecting other

218
00:08:03,520 --> 00:08:05,440
pieces of information and not securing

219
00:08:05,440 --> 00:08:07,360
that um

220
00:08:07,360 --> 00:08:09,039
so

221
00:08:09,039 --> 00:08:10,800
with this in mind you know there were

222
00:08:10,800 --> 00:08:13,759
certainly many expectations and many um

223
00:08:13,759 --> 00:08:16,080
many outcomes of

224
00:08:16,080 --> 00:08:18,400
of receiving this key innovation and so

225
00:08:18,400 --> 00:08:20,879
that brings us to the next slide

226
00:08:20,879 --> 00:08:22,319
one of the things that we want to do is

227
00:08:22,319 --> 00:08:23,680
really discuss some of the key

228
00:08:23,680 --> 00:08:25,520
expectations

229
00:08:25,520 --> 00:08:26,639
that

230
00:08:26,639 --> 00:08:28,560
that prompted the creation of the

231
00:08:28,560 --> 00:08:31,199
exposure notification api as mentioned

232
00:08:31,199 --> 00:08:33,919
the api's primary goal was to provide

233
00:08:33,919 --> 00:08:37,279
core functionality for developers who

234
00:08:37,279 --> 00:08:39,120
wanted in public health authorities who

235
00:08:39,120 --> 00:08:40,799
wanted to

236
00:08:40,799 --> 00:08:42,640
create secure contact tracing

237
00:08:42,640 --> 00:08:44,720
applications

238
00:08:44,720 --> 00:08:48,399
and as part of this the goal was that if

239
00:08:48,399 --> 00:08:50,560
you know google and apple

240
00:08:50,560 --> 00:08:51,839
thought that if

241
00:08:51,839 --> 00:08:54,720
developers create safe and secure

242
00:08:54,720 --> 00:08:56,959
applications and then people are bound

243
00:08:56,959 --> 00:08:59,120
to trust those applications and as a

244
00:08:59,120 --> 00:09:01,360
result they'll use them whereas in

245
00:09:01,360 --> 00:09:04,080
contrary if users do not trust the

246
00:09:04,080 --> 00:09:05,760
application then they're not going to

247
00:09:05,760 --> 00:09:08,399
use it and if the masses of people

248
00:09:08,399 --> 00:09:11,519
choose not to use kobit 19 contact

249
00:09:11,519 --> 00:09:13,680
tracing apps because they don't trust it

250
00:09:13,680 --> 00:09:15,040
then it's not going to be a very

251
00:09:15,040 --> 00:09:16,560
effective utility in fighting the

252
00:09:16,560 --> 00:09:18,399
pandemic so it's very important that

253
00:09:18,399 --> 00:09:20,240
people trust them and in order for

254
00:09:20,240 --> 00:09:21,839
people to trust them they need to be

255
00:09:21,839 --> 00:09:24,000
built both safely and securely with

256
00:09:24,000 --> 00:09:26,560
privacy in mind so apple and google came

257
00:09:26,560 --> 00:09:29,200
together they produced this api to do

258
00:09:29,200 --> 00:09:32,959
just that and naturally as part of this

259
00:09:32,959 --> 00:09:34,640
the expectation was that health

260
00:09:34,640 --> 00:09:36,640
authorities around the world would adopt

261
00:09:36,640 --> 00:09:39,360
this very convenient tool in order to do

262
00:09:39,360 --> 00:09:40,480
just that

263
00:09:40,480 --> 00:09:42,320
now the results themselves were

264
00:09:42,320 --> 00:09:43,760
something different and this is

265
00:09:43,760 --> 00:09:46,320
something that we'll take a look at here

266
00:09:46,320 --> 00:09:48,000
as you can see in our analysis what we

267
00:09:48,000 --> 00:09:49,440
found is that sixty percent of the

268
00:09:49,440 --> 00:09:52,320
applications overall uh adopted the

269
00:09:52,320 --> 00:09:55,200
exposure notification api so 62 on the

270
00:09:55,200 --> 00:09:58,080
android side of the house and 58 on the

271
00:09:58,080 --> 00:10:00,480
ios side of the house

272
00:10:00,480 --> 00:10:03,279
however 40 of applications

273
00:10:03,279 --> 00:10:04,560
did not

274
00:10:04,560 --> 00:10:07,600
elect to use the exposure notification

275
00:10:07,600 --> 00:10:09,040
api and

276
00:10:09,040 --> 00:10:11,279
as a result they took a do-it-yourself

277
00:10:11,279 --> 00:10:13,040
approach to security

278
00:10:13,040 --> 00:10:14,560
uh by instead

279
00:10:14,560 --> 00:10:16,320
doing it themselves so

280
00:10:16,320 --> 00:10:18,800
for example we we noticed applications

281
00:10:18,800 --> 00:10:20,560
that were using gps data collecting

282
00:10:20,560 --> 00:10:22,399
other pieces of information these tie

283
00:10:22,399 --> 00:10:23,920
into some of the security and privacy

284
00:10:23,920 --> 00:10:26,640
concerns that we'll discuss later and um

285
00:10:26,640 --> 00:10:28,720
some of the unnecessary

286
00:10:28,720 --> 00:10:30,720
pieces of data that they collect and

287
00:10:30,720 --> 00:10:32,959
fail to secure properly

288
00:10:32,959 --> 00:10:33,760
now

289
00:10:33,760 --> 00:10:35,360
something that's very important to

290
00:10:35,360 --> 00:10:37,360
understand about all of the information

291
00:10:37,360 --> 00:10:38,800
and all of the data that we're going to

292
00:10:38,800 --> 00:10:40,320
discuss today

293
00:10:40,320 --> 00:10:43,680
is that we're not focusing on the 60 of

294
00:10:43,680 --> 00:10:46,399
applications which did in fact use the

295
00:10:46,399 --> 00:10:48,880
exposure notification api and therefore

296
00:10:48,880 --> 00:10:51,680
do have a good security posture we're

297
00:10:51,680 --> 00:10:53,680
focusing on the 40 and that's really

298
00:10:53,680 --> 00:10:55,600
where we're going to zoom in in order to

299
00:10:55,600 --> 00:10:58,480
take a closer look at the 40 percent of

300
00:10:58,480 --> 00:11:00,880
applications which deliberately elected

301
00:11:00,880 --> 00:11:04,079
to not use the exposure notification api

302
00:11:04,079 --> 00:11:06,240
and in many cases actually collect

303
00:11:06,240 --> 00:11:08,640
additional pieces of information

304
00:11:08,640 --> 00:11:09,680
which

305
00:11:09,680 --> 00:11:12,320
in many cases were also not secured

306
00:11:12,320 --> 00:11:14,160
so this is going to be our main focus

307
00:11:14,160 --> 00:11:16,560
today the 40 of apps that did not use

308
00:11:16,560 --> 00:11:20,319
the exposure notification api

309
00:11:21,920 --> 00:11:23,760
now finally we would like to introduce

310
00:11:23,760 --> 00:11:25,920
the individual controls studied so for

311
00:11:25,920 --> 00:11:28,240
each of the applications inside of the

312
00:11:28,240 --> 00:11:29,200
body

313
00:11:29,200 --> 00:11:30,880
or each of the applications inside of

314
00:11:30,880 --> 00:11:33,120
the scope that we were looking at uh so

315
00:11:33,120 --> 00:11:35,920
the 40 of applications that did not use

316
00:11:35,920 --> 00:11:37,760
the exposure notification api but

317
00:11:37,760 --> 00:11:39,760
instead took it do it yourself approach

318
00:11:39,760 --> 00:11:41,040
to security

319
00:11:41,040 --> 00:11:43,040
these were the individual security

320
00:11:43,040 --> 00:11:45,120
mechanisms that we were looking for now

321
00:11:45,120 --> 00:11:46,959
as opposed to reading them all off i'll

322
00:11:46,959 --> 00:11:48,640
let all of the viewers here take a look

323
00:11:48,640 --> 00:11:50,959
at these individual controls

324
00:11:50,959 --> 00:11:52,959
but each of these are aimed at removing

325
00:11:52,959 --> 00:11:55,839
context from a binary and make it hard

326
00:11:55,839 --> 00:11:57,200
and making it harder for reverse

327
00:11:57,200 --> 00:11:58,880
engineers to understand how the

328
00:11:58,880 --> 00:12:01,279
application works and therefore how to

329
00:12:01,279 --> 00:12:03,839
exploit it

330
00:12:09,279 --> 00:12:10,560
so now that we've

331
00:12:10,560 --> 00:12:12,959
explained our testing approach and our

332
00:12:12,959 --> 00:12:15,519
methodology we're going to go into a

333
00:12:15,519 --> 00:12:17,279
full overview of the

334
00:12:17,279 --> 00:12:19,600
data and the analysis that we actually

335
00:12:19,600 --> 00:12:22,079
performed as well as the takeaways that

336
00:12:22,079 --> 00:12:24,240
we were able to derive from analyzing

337
00:12:24,240 --> 00:12:26,720
that data

338
00:12:27,120 --> 00:12:28,880
so hopping directly into the data you

339
00:12:28,880 --> 00:12:31,600
can actually see um here on our first

340
00:12:31,600 --> 00:12:33,279
slide we are taking a look at the

341
00:12:33,279 --> 00:12:35,760
android applications now of all of the

342
00:12:35,760 --> 00:12:39,120
uh 40 of applications that fell into the

343
00:12:39,120 --> 00:12:41,519
category which did not use the exposure

344
00:12:41,519 --> 00:12:44,079
notification api uh we did take a look

345
00:12:44,079 --> 00:12:46,160
at 20 do-it-yourself android

346
00:12:46,160 --> 00:12:48,399
applications and of them we have

347
00:12:48,399 --> 00:12:50,160
actually mapped the different percentage

348
00:12:50,160 --> 00:12:52,000
of those applications that adhered to

349
00:12:52,000 --> 00:12:54,320
the controls that we were looking for

350
00:12:54,320 --> 00:12:55,920
and possessed these different protection

351
00:12:55,920 --> 00:12:59,680
mechanisms and it's very clear that

352
00:12:59,680 --> 00:13:01,519
on the android side of the house most

353
00:13:01,519 --> 00:13:03,040
applications don't possess these

354
00:13:03,040 --> 00:13:05,440
protections and therefore additionally

355
00:13:05,440 --> 00:13:08,959
possess weak security posture

356
00:13:10,560 --> 00:13:12,880
piggy backing off the last slide you can

357
00:13:12,880 --> 00:13:14,639
see on this slide that we've provided a

358
00:13:14,639 --> 00:13:16,560
number of applications and a percentage

359
00:13:16,560 --> 00:13:19,040
of applications which adhere to the

360
00:13:19,040 --> 00:13:20,800
control mechanisms that we took a look

361
00:13:20,800 --> 00:13:23,440
at on the previous slide

362
00:13:23,440 --> 00:13:26,240
so for example you can actually see that

363
00:13:26,240 --> 00:13:29,120
95 of these applications possess

364
00:13:29,120 --> 00:13:31,200
two or fewer

365
00:13:31,200 --> 00:13:32,399
of the

366
00:13:32,399 --> 00:13:34,240
protections that we were looking at now

367
00:13:34,240 --> 00:13:36,000
please do bear in mind that the slide

368
00:13:36,000 --> 00:13:37,440
that we're reviewing right now is just

369
00:13:37,440 --> 00:13:39,519
the android portion of the applications

370
00:13:39,519 --> 00:13:41,360
that we looked at but

371
00:13:41,360 --> 00:13:44,240
just from a 30 000 foot view of the 40

372
00:13:44,240 --> 00:13:46,560
of applications that we analyzed which

373
00:13:46,560 --> 00:13:48,639
did not use the exposure notification

374
00:13:48,639 --> 00:13:50,959
api 95

375
00:13:50,959 --> 00:13:53,760
of those applications used

376
00:13:53,760 --> 00:13:54,639
um

377
00:13:54,639 --> 00:13:56,320
two or fewer protections meaning they're

378
00:13:56,320 --> 00:13:57,760
not building these applications with

379
00:13:57,760 --> 00:14:00,320
security or privacy in mind and actually

380
00:14:00,320 --> 00:14:02,240
zero of them had five or more of these

381
00:14:02,240 --> 00:14:04,800
protections

382
00:14:05,839 --> 00:14:08,240
so now taking a look at the ios side of

383
00:14:08,240 --> 00:14:09,760
the house you can see that we have

384
00:14:09,760 --> 00:14:12,000
equivalently provided the same control

385
00:14:12,000 --> 00:14:13,760
mechanisms that we looked at for the

386
00:14:13,760 --> 00:14:16,399
android side and in the top right hand

387
00:14:16,399 --> 00:14:18,880
corner you're gonna see that uh for the

388
00:14:18,880 --> 00:14:20,399
ios side of the house we actually

389
00:14:20,399 --> 00:14:23,199
analyzed 18 do-it-yourself ios

390
00:14:23,199 --> 00:14:26,160
applications by do-it-yourself we mean

391
00:14:26,160 --> 00:14:28,720
these applications deliberately elected

392
00:14:28,720 --> 00:14:31,680
not to use the exposure notification api

393
00:14:31,680 --> 00:14:34,079
and instead elected to implement uh

394
00:14:34,079 --> 00:14:36,240
controls themselves

395
00:14:36,240 --> 00:14:38,639
now what you can see is that most of

396
00:14:38,639 --> 00:14:40,000
these features

397
00:14:40,000 --> 00:14:41,680
are actually implemented very

398
00:14:41,680 --> 00:14:43,600
conservatively across the applications

399
00:14:43,600 --> 00:14:45,440
that we analyzed and actually app

400
00:14:45,440 --> 00:14:47,040
attestation and name obfuscation just

401
00:14:47,040 --> 00:14:49,519
simply don't appear at all

402
00:14:49,519 --> 00:14:50,480
so

403
00:14:50,480 --> 00:14:52,720
once again on the ios side of the house

404
00:14:52,720 --> 00:14:56,000
we are very quickly realizing that

405
00:14:56,000 --> 00:14:58,720
robust security does not seem to exist

406
00:14:58,720 --> 00:15:02,320
inside of the majority of these

407
00:15:02,320 --> 00:15:05,760
contact racing applications

408
00:15:07,680 --> 00:15:11,600
and now once again you can see

409
00:15:11,600 --> 00:15:13,519
that we have provided the same chart

410
00:15:13,519 --> 00:15:16,000
that we did for android

411
00:15:16,000 --> 00:15:18,240
in order to display the number of

412
00:15:18,240 --> 00:15:19,920
applications and the percentage of

413
00:15:19,920 --> 00:15:22,079
applications which actually adhered to a

414
00:15:22,079 --> 00:15:24,000
certain number of the controls that we

415
00:15:24,000 --> 00:15:26,320
were looking for so in this case we can

416
00:15:26,320 --> 00:15:28,480
actually see that 61

417
00:15:28,480 --> 00:15:30,800
of the ios applications that we looked

418
00:15:30,800 --> 00:15:33,440
at so 11 of the 18

419
00:15:33,440 --> 00:15:36,399
actually possessed two or fewer controls

420
00:15:36,399 --> 00:15:37,360
and

421
00:15:37,360 --> 00:15:40,399
in general 94 of these applications

422
00:15:40,399 --> 00:15:42,959
possessed two or less so on the android

423
00:15:42,959 --> 00:15:43,759
side

424
00:15:43,759 --> 00:15:46,480
we can see that 95 of those applications

425
00:15:46,480 --> 00:15:49,360
and on the ios side we can see that 94

426
00:15:49,360 --> 00:15:51,440
of those applications possess two or

427
00:15:51,440 --> 00:15:53,279
fewer of the controls that we were

428
00:15:53,279 --> 00:15:56,240
looking for once again representing that

429
00:15:56,240 --> 00:15:58,480
these covid app contact tracing

430
00:15:58,480 --> 00:16:00,240
applications are not being built with

431
00:16:00,240 --> 00:16:03,360
security in mind

432
00:16:05,680 --> 00:16:08,320
now beyond the lack of security controls

433
00:16:08,320 --> 00:16:10,639
which we were able to highlight in

434
00:16:10,639 --> 00:16:13,839
previous slides we also believe that uh

435
00:16:13,839 --> 00:16:15,440
privacy concerns should be a large

436
00:16:15,440 --> 00:16:16,880
portion of today's conversation and

437
00:16:16,880 --> 00:16:18,720
should be eliminated so we're going to

438
00:16:18,720 --> 00:16:20,639
take a look at gps privacy concerns

439
00:16:20,639 --> 00:16:22,880
which we observed in a number of these

440
00:16:22,880 --> 00:16:25,519
different contact tracing applications

441
00:16:25,519 --> 00:16:27,360
and we're going to start by calling out

442
00:16:27,360 --> 00:16:29,440
the fact that

443
00:16:29,440 --> 00:16:32,240
many gps apps or a number of the gps

444
00:16:32,240 --> 00:16:34,639
apps that we observed actually collect

445
00:16:34,639 --> 00:16:36,480
additional user information which is not

446
00:16:36,480 --> 00:16:38,720
necessary such as a passport number

447
00:16:38,720 --> 00:16:41,759
phone number a device id

448
00:16:41,759 --> 00:16:43,759
or other pieces of valuable information

449
00:16:43,759 --> 00:16:45,680
which aren't required

450
00:16:45,680 --> 00:16:48,480
to anonymously notify users of potential

451
00:16:48,480 --> 00:16:51,279
exposure additionally those sensitive

452
00:16:51,279 --> 00:16:53,199
pieces of information were

453
00:16:53,199 --> 00:16:55,920
in some cases stored insecurely such as

454
00:16:55,920 --> 00:16:59,120
in unencrypted sqlite databases

455
00:16:59,120 --> 00:17:00,160
or

456
00:17:00,160 --> 00:17:02,720
potentially leaked in other ways

457
00:17:02,720 --> 00:17:04,880
making them uneffectively or effectively

458
00:17:04,880 --> 00:17:07,039
unencrypted rather

459
00:17:07,039 --> 00:17:08,240
so

460
00:17:08,240 --> 00:17:11,199
it's very safe to say that

461
00:17:11,199 --> 00:17:13,199
this is definitely a privacy concern

462
00:17:13,199 --> 00:17:14,720
these applications actually don't need

463
00:17:14,720 --> 00:17:16,240
to collect additional information which

464
00:17:16,240 --> 00:17:17,439
is the point of the exposure

465
00:17:17,439 --> 00:17:18,559
notification

466
00:17:18,559 --> 00:17:20,880
api which only relies on bluetooth and

467
00:17:20,880 --> 00:17:22,880
does not collect any other sensitive

468
00:17:22,880 --> 00:17:24,799
pieces of user information

469
00:17:24,799 --> 00:17:25,919
um

470
00:17:25,919 --> 00:17:27,520
and with that being said this can

471
00:17:27,520 --> 00:17:29,360
actually call into question

472
00:17:29,360 --> 00:17:31,679
uh the safety of these applications and

473
00:17:31,679 --> 00:17:34,000
potentially hinder the value of contact

474
00:17:34,000 --> 00:17:35,840
tracing applications when it comes to

475
00:17:35,840 --> 00:17:40,080
combating uh the pandemic itself

476
00:17:40,960 --> 00:17:42,640
so now we would like to summarize the

477
00:17:42,640 --> 00:17:44,880
results and on the bright side starting

478
00:17:44,880 --> 00:17:46,960
with the good news sixty percent of

479
00:17:46,960 --> 00:17:48,880
applications did indeed adopt the

480
00:17:48,880 --> 00:17:51,120
exposure notification api and that's

481
00:17:51,120 --> 00:17:52,400
really good news

482
00:17:52,400 --> 00:17:54,400
but what we really focused on during

483
00:17:54,400 --> 00:17:56,080
this conversation was the forty percent

484
00:17:56,080 --> 00:17:58,320
of applications that uh in some

485
00:17:58,320 --> 00:18:01,919
negligent way elected not to implement

486
00:18:01,919 --> 00:18:04,480
the exposure notification api and and

487
00:18:04,480 --> 00:18:06,559
many other examples actually uh

488
00:18:06,559 --> 00:18:08,400
performed other pieces of unnecessary

489
00:18:08,400 --> 00:18:11,440
and unsafe um forms of data collection

490
00:18:11,440 --> 00:18:14,559
like gps tracking information passport

491
00:18:14,559 --> 00:18:17,039
numbers phone numbers and more

492
00:18:17,039 --> 00:18:18,400
on top of this we notice that many

493
00:18:18,400 --> 00:18:20,080
applications again we're leaking that

494
00:18:20,080 --> 00:18:23,280
information through unencrypted

495
00:18:23,280 --> 00:18:26,720
sqlite databases http cache so on and so

496
00:18:26,720 --> 00:18:29,200
forth and this is a big concern

497
00:18:29,200 --> 00:18:31,760
so that brings us to our second point um

498
00:18:31,760 --> 00:18:34,720
reliance on gps tracking data um i think

499
00:18:34,720 --> 00:18:37,840
has been proven to be um an inferior

500
00:18:37,840 --> 00:18:40,160
method than bluetooth when it comes to

501
00:18:40,160 --> 00:18:41,919
contact tracing applications that need

502
00:18:41,919 --> 00:18:43,520
to be built with privacy in mind and

503
00:18:43,520 --> 00:18:45,679
bluetooth does a great job it gives you

504
00:18:45,679 --> 00:18:47,840
all the tools that you need uh to both

505
00:18:47,840 --> 00:18:49,200
detect with your when you're in the

506
00:18:49,200 --> 00:18:51,679
proximity of somebody who has been

507
00:18:51,679 --> 00:18:54,080
exposed to covid and therefore alert you

508
00:18:54,080 --> 00:18:55,600
to the fact that you yourself should go

509
00:18:55,600 --> 00:18:58,080
get tested as well so don't use gps

510
00:18:58,080 --> 00:19:00,559
tracking data use bluetooth use a common

511
00:19:00,559 --> 00:19:03,840
api like the exposure notification api

512
00:19:03,840 --> 00:19:04,799
and

513
00:19:04,799 --> 00:19:06,799
again don't collect other unnecessary

514
00:19:06,799 --> 00:19:09,120
pieces of data which just very simply

515
00:19:09,120 --> 00:19:10,799
aren't needed in order to notify

516
00:19:10,799 --> 00:19:12,799
individuals of exposures

517
00:19:12,799 --> 00:19:14,240
and finally

518
00:19:14,240 --> 00:19:17,120
in summarizing results uh i think it was

519
00:19:17,120 --> 00:19:18,960
very clear based on the previous slides

520
00:19:18,960 --> 00:19:21,520
that there was a gross lack of static

521
00:19:21,520 --> 00:19:23,440
and dynamic protection

522
00:19:23,440 --> 00:19:25,679
when it comes to the applications that

523
00:19:25,679 --> 00:19:28,080
we really dug into and took a look at

524
00:19:28,080 --> 00:19:30,880
all these individual security controls

525
00:19:30,880 --> 00:19:35,520
what we found is that due to these um

526
00:19:35,520 --> 00:19:37,280
the lack of obfuscation the lack of

527
00:19:37,280 --> 00:19:38,799
encryption and the lack of runtime

528
00:19:38,799 --> 00:19:40,640
protections that were embedded inside of

529
00:19:40,640 --> 00:19:42,080
these applications

530
00:19:42,080 --> 00:19:44,320
it would be very easy for

531
00:19:44,320 --> 00:19:46,880
reverse engineers to tamper with and

532
00:19:46,880 --> 00:19:50,080
change and exploit these applications

533
00:19:50,080 --> 00:19:53,840
in in different nefarious ways

534
00:19:55,919 --> 00:19:57,679
some other observations that we made

535
00:19:57,679 --> 00:19:59,840
throughout our testing and research

536
00:19:59,840 --> 00:20:01,919
was first of all that application

537
00:20:01,919 --> 00:20:03,039
security

538
00:20:03,039 --> 00:20:05,360
is not determined by nation's wealth

539
00:20:05,360 --> 00:20:07,280
so for example if we look at israel

540
00:20:07,280 --> 00:20:11,360
who's number 32 out of 196 in terms of

541
00:20:11,360 --> 00:20:12,559
gdp

542
00:20:12,559 --> 00:20:15,360
in the year 2020 they had significantly

543
00:20:15,360 --> 00:20:17,679
worse application security than some of

544
00:20:17,679 --> 00:20:19,440
the countries in africa who had their

545
00:20:19,440 --> 00:20:21,280
own contact tracing app

546
00:20:21,280 --> 00:20:22,960
now that's contrary to what we thought

547
00:20:22,960 --> 00:20:24,480
we thought that a country who had high

548
00:20:24,480 --> 00:20:27,600
gdp had a lot of money for developing a

549
00:20:27,600 --> 00:20:29,120
contact tracing app

550
00:20:29,120 --> 00:20:30,240
securely

551
00:20:30,240 --> 00:20:32,559
but that's not the case

552
00:20:32,559 --> 00:20:35,760
second of all gdpr and hipaa violations

553
00:20:35,760 --> 00:20:39,440
were noticed especially in the diy apps

554
00:20:39,440 --> 00:20:41,760
england's was one their test and trace

555
00:20:41,760 --> 00:20:44,559
program broke gdpr data laws because

556
00:20:44,559 --> 00:20:47,360
they weren't adhering to

557
00:20:47,360 --> 00:20:50,159
to gdpr regulations when it as it

558
00:20:50,159 --> 00:20:52,559
pertained to the storage and processing

559
00:20:52,559 --> 00:20:54,000
of data

560
00:20:54,000 --> 00:20:56,640
now thirdly there's the encouragement of

561
00:20:56,640 --> 00:20:58,799
waiving data privacy rights there are

562
00:20:58,799 --> 00:21:00,159
users who are downloading these

563
00:21:00,159 --> 00:21:02,320
applications thinking that they're

564
00:21:02,320 --> 00:21:05,200
robust with security and privacy in mind

565
00:21:05,200 --> 00:21:06,799
but that's not the case

566
00:21:06,799 --> 00:21:08,400
so there needed there needs to be

567
00:21:08,400 --> 00:21:10,400
transparency and there wasn't in terms

568
00:21:10,400 --> 00:21:11,039
of

569
00:21:11,039 --> 00:21:13,919
how privacy was being handled

570
00:21:13,919 --> 00:21:15,919
let's move on to flawed development and

571
00:21:15,919 --> 00:21:18,480
integration

572
00:21:18,960 --> 00:21:20,960
we clearly noticed that development

573
00:21:20,960 --> 00:21:22,799
teams were having difficulties in a

574
00:21:22,799 --> 00:21:24,960
variety of areas

575
00:21:24,960 --> 00:21:28,000
first of them being timeline sensitivity

576
00:21:28,000 --> 00:21:30,320
with the pandemic picking up in pace

577
00:21:30,320 --> 00:21:32,320
development had to be rushed to get a

578
00:21:32,320 --> 00:21:34,640
working application out as soon as

579
00:21:34,640 --> 00:21:36,000
possible

580
00:21:36,000 --> 00:21:38,960
the sprints as a result were focused on

581
00:21:38,960 --> 00:21:40,480
fixing functionality or creating that

582
00:21:40,480 --> 00:21:41,840
functionality

583
00:21:41,840 --> 00:21:43,360
leaving little consideration for

584
00:21:43,360 --> 00:21:45,679
security in that time

585
00:21:45,679 --> 00:21:47,520
the second thing we noticed was that the

586
00:21:47,520 --> 00:21:50,240
development team had to choose between

587
00:21:50,240 --> 00:21:52,960
you know their approach to constraints

588
00:21:52,960 --> 00:21:54,960
whether they wanted quality

589
00:21:54,960 --> 00:21:56,480
which would require a long development

590
00:21:56,480 --> 00:21:58,960
time or if they wanted

591
00:21:58,960 --> 00:22:01,600
short release time but as a result

592
00:22:01,600 --> 00:22:03,919
control the spread and potentially save

593
00:22:03,919 --> 00:22:06,559
human lives

594
00:22:06,559 --> 00:22:08,320
the third difficulty that we saw these

595
00:22:08,320 --> 00:22:10,559
development teams have was

596
00:22:10,559 --> 00:22:12,080
the fact that this was such a unique

597
00:22:12,080 --> 00:22:14,159
solution there hadn't been a contact

598
00:22:14,159 --> 00:22:16,000
tracing app before that

599
00:22:16,000 --> 00:22:18,000
was that had to be released on such a

600
00:22:18,000 --> 00:22:19,360
large scale

601
00:22:19,360 --> 00:22:22,000
there was no previous poster child

602
00:22:22,000 --> 00:22:23,679
i don't think that a developer could go

603
00:22:23,679 --> 00:22:24,559
on to

604
00:22:24,559 --> 00:22:26,400
stack overflow and get the necessary

605
00:22:26,400 --> 00:22:28,960
code and call it a day

606
00:22:28,960 --> 00:22:31,200
so that wasn't really possible there

607
00:22:31,200 --> 00:22:33,679
and the fact that these applications

608
00:22:33,679 --> 00:22:34,960
were handling

609
00:22:34,960 --> 00:22:37,440
sensitive data this had to be looked at

610
00:22:37,440 --> 00:22:39,360
in terms of privacy

611
00:22:39,360 --> 00:22:41,679
some some applications of course uh

612
00:22:41,679 --> 00:22:43,679
considered privacy and security very

613
00:22:43,679 --> 00:22:45,360
well others didn't but either way there

614
00:22:45,360 --> 00:22:48,159
had to be some sort of uh consideration

615
00:22:48,159 --> 00:22:50,400
for that sensitive data data even at

616
00:22:50,400 --> 00:22:53,440
that minimum

617
00:22:53,440 --> 00:22:55,360
the rush to development of these contact

618
00:22:55,360 --> 00:22:57,360
tracing applications didn't come without

619
00:22:57,360 --> 00:22:58,559
any effects

620
00:22:58,559 --> 00:22:59,919
there's actually quite a few effects

621
00:22:59,919 --> 00:23:02,320
that came about as a result

622
00:23:02,320 --> 00:23:04,240
as i mentioned in the last slide there

623
00:23:04,240 --> 00:23:06,640
is a main focus on functionality of the

624
00:23:06,640 --> 00:23:09,280
applications and a limited regard for

625
00:23:09,280 --> 00:23:12,000
security and privacy as a result

626
00:23:12,000 --> 00:23:13,520
just mainly because the goal was to

627
00:23:13,520 --> 00:23:15,360
develop an application as soon as

628
00:23:15,360 --> 00:23:18,240
possible and release it to the public

629
00:23:18,240 --> 00:23:20,000
furthermore there is a lacking of

630
00:23:20,000 --> 00:23:21,280
features that would allow for

631
00:23:21,280 --> 00:23:23,280
integration with other apps or covet

632
00:23:23,280 --> 00:23:26,240
apps let's say the european union wanted

633
00:23:26,240 --> 00:23:28,720
all of europe's countries to integrate

634
00:23:28,720 --> 00:23:30,480
into one application

635
00:23:30,480 --> 00:23:32,320
this wouldn't be possible

636
00:23:32,320 --> 00:23:35,039
because this integration feature wasn't

637
00:23:35,039 --> 00:23:38,159
built in however as a result less time

638
00:23:38,159 --> 00:23:39,679
was spent on development which means

639
00:23:39,679 --> 00:23:40,640
that

640
00:23:40,640 --> 00:23:42,720
getting to the controlling of the spread

641
00:23:42,720 --> 00:23:45,120
happened sooner so you can claim that as

642
00:23:45,120 --> 00:23:47,279
a benefit

643
00:23:47,279 --> 00:23:48,720
lastly there's you know an ethical

644
00:23:48,720 --> 00:23:51,520
dilemma these developers know that

645
00:23:51,520 --> 00:23:53,039
there is there's a known risk of

646
00:23:53,039 --> 00:23:55,039
security in these applications yet

647
00:23:55,039 --> 00:23:57,039
they're still releasing it well

648
00:23:57,039 --> 00:23:59,120
the question is do you release an app

649
00:23:59,120 --> 00:24:01,360
that is unhardened due to lack of time

650
00:24:01,360 --> 00:24:02,400
and money

651
00:24:02,400 --> 00:24:04,960
on one hand the spread might be thwarted

652
00:24:04,960 --> 00:24:06,720
but at the same time it's opening doors

653
00:24:06,720 --> 00:24:08,640
for for a long-term headache if these if

654
00:24:08,640 --> 00:24:10,960
these people's data gets stolen and you

655
00:24:10,960 --> 00:24:12,960
have to weigh the long-term effects

656
00:24:12,960 --> 00:24:16,480
against the short-term in that case

657
00:24:16,960 --> 00:24:18,640
let's move on to recommendations for

658
00:24:18,640 --> 00:24:22,080
timebox development

659
00:24:23,120 --> 00:24:25,039
so the first recommendation is to unify

660
00:24:25,039 --> 00:24:27,200
apps and that can be done in one of two

661
00:24:27,200 --> 00:24:28,960
ways or both

662
00:24:28,960 --> 00:24:31,600
the first being using a common api and

663
00:24:31,600 --> 00:24:34,080
the second being consolidating apps so

664
00:24:34,080 --> 00:24:36,720
the first way is you know using one of

665
00:24:36,720 --> 00:24:38,559
google's or apple's

666
00:24:38,559 --> 00:24:40,080
apis

667
00:24:40,080 --> 00:24:41,760
also known as the notification exposure

668
00:24:41,760 --> 00:24:42,880
api

669
00:24:42,880 --> 00:24:46,320
or similar now i put an asterisk there

670
00:24:46,320 --> 00:24:48,320
because i believe that it doesn't

671
00:24:48,320 --> 00:24:50,159
necessarily have to be a private company

672
00:24:50,159 --> 00:24:52,559
solution it could be a you know public

673
00:24:52,559 --> 00:24:53,600
government

674
00:24:53,600 --> 00:24:56,080
created solution but either way you know

675
00:24:56,080 --> 00:24:57,440
global issues should be fought on a

676
00:24:57,440 --> 00:24:59,120
global scale

677
00:24:59,120 --> 00:25:01,200
there should be that common api that

678
00:25:01,200 --> 00:25:03,440
should be utilized when it's there

679
00:25:03,440 --> 00:25:04,799
the second as i've mentioned is

680
00:25:04,799 --> 00:25:06,960
consolidating apps there's way too many

681
00:25:06,960 --> 00:25:08,640
apps on the app stores

682
00:25:08,640 --> 00:25:11,120
users have trouble knowing which one's

683
00:25:11,120 --> 00:25:13,279
legitimate which one's not

684
00:25:13,279 --> 00:25:16,000
and the fact that there's so many state

685
00:25:16,000 --> 00:25:18,080
level apps that's just contributing to

686
00:25:18,080 --> 00:25:19,760
the issue and to that

687
00:25:19,760 --> 00:25:21,840
we're just saying no let's let's skip

688
00:25:21,840 --> 00:25:23,279
not having

689
00:25:23,279 --> 00:25:25,200
these state level apps

690
00:25:25,200 --> 00:25:27,600
you know country countries fine but

691
00:25:27,600 --> 00:25:29,760
making sure that it's uh you know

692
00:25:29,760 --> 00:25:32,720
utilizing the the common api and not

693
00:25:32,720 --> 00:25:34,559
a do-it-yourself one

694
00:25:34,559 --> 00:25:37,840
uh anybody who's not complying with this

695
00:25:37,840 --> 00:25:39,600
you know our thoughts are that they

696
00:25:39,600 --> 00:25:41,360
should be fined there's going to be

697
00:25:41,360 --> 00:25:42,720
proposed

698
00:25:42,720 --> 00:25:44,640
contact tracing app requirements and

699
00:25:44,640 --> 00:25:46,559
anybody who's not adhering to them

700
00:25:46,559 --> 00:25:49,039
should be fined

701
00:25:49,039 --> 00:25:50,799
the second thing we'd like to recommend

702
00:25:50,799 --> 00:25:53,840
is a security focused sdlc

703
00:25:53,840 --> 00:25:55,279
now for those of you who aren't familiar

704
00:25:55,279 --> 00:25:57,760
with what an sdlc is it's a software

705
00:25:57,760 --> 00:25:59,440
development life cycle

706
00:25:59,440 --> 00:26:01,840
and it's typically found in

707
00:26:01,840 --> 00:26:04,240
companies and pertains to how

708
00:26:04,240 --> 00:26:05,679
development

709
00:26:05,679 --> 00:26:08,400
goes from start to finish

710
00:26:08,400 --> 00:26:10,159
we're particularly recommending a

711
00:26:10,159 --> 00:26:11,679
shift-left approach

712
00:26:11,679 --> 00:26:13,919
which means uh including security

713
00:26:13,919 --> 00:26:16,720
earlier and at every phase meaning that

714
00:26:16,720 --> 00:26:18,159
it's everywhere and that is a

715
00:26:18,159 --> 00:26:20,799
forethought not an afterthought

716
00:26:20,799 --> 00:26:22,320
we're recommending that teams aren't

717
00:26:22,320 --> 00:26:24,799
siloed so if there's a security team

718
00:26:24,799 --> 00:26:26,720
that we want them to work with a

719
00:26:26,720 --> 00:26:29,279
development team and for communicate

720
00:26:29,279 --> 00:26:31,360
communication to be facilitated

721
00:26:31,360 --> 00:26:32,960
there doesn't have to be a pick one

722
00:26:32,960 --> 00:26:33,919
approach

723
00:26:33,919 --> 00:26:35,760
to choosing either functionality or

724
00:26:35,760 --> 00:26:38,720
security you can have both uh and that's

725
00:26:38,720 --> 00:26:40,559
you know the fact that these development

726
00:26:40,559 --> 00:26:43,360
and security teams can work in parallel

727
00:26:43,360 --> 00:26:44,559
together

728
00:26:44,559 --> 00:26:46,400
especially when new features are being

729
00:26:46,400 --> 00:26:47,679
released

730
00:26:47,679 --> 00:26:48,880
you know there could be an iterative

731
00:26:48,880 --> 00:26:51,200
approach where security is constantly

732
00:26:51,200 --> 00:26:52,640
being checked

733
00:26:52,640 --> 00:26:54,159
in these features

734
00:26:54,159 --> 00:26:56,080
one thing that would allow for you know

735
00:26:56,080 --> 00:26:58,640
security tests in these types of

736
00:26:58,640 --> 00:27:00,720
feature releases is something called a

737
00:27:00,720 --> 00:27:02,720
technical security review which

738
00:27:02,720 --> 00:27:04,159
documents

739
00:27:04,159 --> 00:27:06,159
that you know that there's been scanning

740
00:27:06,159 --> 00:27:08,720
in the code that's been performed

741
00:27:08,720 --> 00:27:11,600
documents the inter inter-service

742
00:27:11,600 --> 00:27:14,000
communication let's say the service has

743
00:27:14,000 --> 00:27:15,600
to communicate with another service that

744
00:27:15,600 --> 00:27:17,440
will be documented there

745
00:27:17,440 --> 00:27:20,240
along with any any scanning results

746
00:27:20,240 --> 00:27:21,919
testing that had been done

747
00:27:21,919 --> 00:27:24,240
if there is no software development uh

748
00:27:24,240 --> 00:27:26,960
life cycle uh in the case that a company

749
00:27:26,960 --> 00:27:28,559
doesn't have to adhere to

750
00:27:28,559 --> 00:27:32,720
let's say pci regulations or hip uh what

751
00:27:32,720 --> 00:27:33,760
have you

752
00:27:33,760 --> 00:27:36,000
then typically you can hook it into an

753
00:27:36,000 --> 00:27:38,399
existing change management process

754
00:27:38,399 --> 00:27:40,880
you can hook security processes into

755
00:27:40,880 --> 00:27:42,880
that because whenever there's an

756
00:27:42,880 --> 00:27:44,399
application that gets added to an

757
00:27:44,399 --> 00:27:46,399
inventory let's say typically there's a

758
00:27:46,399 --> 00:27:49,200
change management process for that and

759
00:27:49,200 --> 00:27:50,799
very similarly you can just include

760
00:27:50,799 --> 00:27:53,279
security aspects to to be included in

761
00:27:53,279 --> 00:27:55,520
that

762
00:27:55,600 --> 00:27:57,039
now we would like to go over some

763
00:27:57,039 --> 00:27:59,120
development recommendations for current

764
00:27:59,120 --> 00:28:00,720
and for future contact tracing

765
00:28:00,720 --> 00:28:02,960
applications alike starting with use a

766
00:28:02,960 --> 00:28:05,039
common api if tech giants like google

767
00:28:05,039 --> 00:28:06,559
and apple are going to give you all the

768
00:28:06,559 --> 00:28:08,480
tools that you need to succeed in

769
00:28:08,480 --> 00:28:10,320
creating a

770
00:28:10,320 --> 00:28:12,799
a contact tracing application built with

771
00:28:12,799 --> 00:28:15,200
both security and privacy in mind use it

772
00:28:15,200 --> 00:28:17,520
implement it and benefit from it not

773
00:28:17,520 --> 00:28:19,760
only are you going to benefit from it

774
00:28:19,760 --> 00:28:21,679
but your users are going to benefit from

775
00:28:21,679 --> 00:28:22,480
it

776
00:28:22,480 --> 00:28:24,640
they're going to know that

777
00:28:24,640 --> 00:28:26,399
as a result that their

778
00:28:26,399 --> 00:28:28,559
their information is safe that they

779
00:28:28,559 --> 00:28:30,240
don't have to worry about that

780
00:28:30,240 --> 00:28:31,679
information being leaked due to

781
00:28:31,679 --> 00:28:33,840
negligence when it comes to security and

782
00:28:33,840 --> 00:28:35,840
as a result of being able to trust the

783
00:28:35,840 --> 00:28:37,440
fact that those applications are indeed

784
00:28:37,440 --> 00:28:40,159
built with both security and privacy in

785
00:28:40,159 --> 00:28:42,240
mind they're more likely to use those

786
00:28:42,240 --> 00:28:44,080
applications which is going to make them

787
00:28:44,080 --> 00:28:45,520
a much more effective utility in

788
00:28:45,520 --> 00:28:47,200
fighting a pandemic like the one we've

789
00:28:47,200 --> 00:28:49,039
gone through or any other potential

790
00:28:49,039 --> 00:28:51,360
future pandemic in the future

791
00:28:51,360 --> 00:28:53,039
as part of this don't collect or store

792
00:28:53,039 --> 00:28:54,880
any other pieces of user information

793
00:28:54,880 --> 00:28:56,720
which are not required

794
00:28:56,720 --> 00:28:57,600
to

795
00:28:57,600 --> 00:28:58,399
alert

796
00:28:58,399 --> 00:29:00,880
users of potential exposures so again

797
00:29:00,880 --> 00:29:02,640
going back to the exposure notification

798
00:29:02,640 --> 00:29:04,320
api collect and use as little as

799
00:29:04,320 --> 00:29:06,159
possible don't collect gps tracking

800
00:29:06,159 --> 00:29:07,600
information

801
00:29:07,600 --> 00:29:09,039
don't collect other

802
00:29:09,039 --> 00:29:12,159
pieces of user information

803
00:29:12,159 --> 00:29:14,640
again try to try to use something like

804
00:29:14,640 --> 00:29:16,320
bluetooth don't collect other pieces of

805
00:29:16,320 --> 00:29:18,080
information one of the key benefits to

806
00:29:18,080 --> 00:29:19,679
not collecting other pieces of

807
00:29:19,679 --> 00:29:21,760
information is of course then there is

808
00:29:21,760 --> 00:29:24,080
no risk of that information being leaked

809
00:29:24,080 --> 00:29:25,600
and therefore you don't need to secure

810
00:29:25,600 --> 00:29:27,360
it at all

811
00:29:27,360 --> 00:29:29,039
the second recommendation that we have

812
00:29:29,039 --> 00:29:31,120
is to adhere to um

813
00:29:31,120 --> 00:29:33,840
uh security standard or framework like

814
00:29:33,840 --> 00:29:35,679
oauths uh

815
00:29:35,679 --> 00:29:37,760
mobile application security verification

816
00:29:37,760 --> 00:29:40,240
standard um which as it sounds acts as a

817
00:29:40,240 --> 00:29:42,320
blueprint for security architects or

818
00:29:42,320 --> 00:29:44,480
mobile developers alike who are looking

819
00:29:44,480 --> 00:29:46,399
to build applications with both security

820
00:29:46,399 --> 00:29:48,799
and privacy in mind

821
00:29:48,799 --> 00:29:51,600
and we would also recommend that if for

822
00:29:51,600 --> 00:29:53,039
any reason

823
00:29:53,039 --> 00:29:55,440
you do or public health

824
00:29:55,440 --> 00:29:57,440
authorities do decide to build contact

825
00:29:57,440 --> 00:29:59,600
tracing applications they do not decide

826
00:29:59,600 --> 00:30:01,679
to adopt the common tools that are given

827
00:30:01,679 --> 00:30:03,440
to them like the exposure notification

828
00:30:03,440 --> 00:30:06,399
api in future use cases um to actually

829
00:30:06,399 --> 00:30:08,000
utilize code hardening solutions if

830
00:30:08,000 --> 00:30:10,080
needed so if you do decide to collect

831
00:30:10,080 --> 00:30:13,120
additional pieces of user data

832
00:30:13,120 --> 00:30:15,120
of any kind then it becomes your

833
00:30:15,120 --> 00:30:17,120
obligation uh to

834
00:30:17,120 --> 00:30:19,120
in in your liability to secure that

835
00:30:19,120 --> 00:30:21,520
information otherwise if it does get

836
00:30:21,520 --> 00:30:23,279
leaked um

837
00:30:23,279 --> 00:30:26,320
it's your fault so ultimately what we've

838
00:30:26,320 --> 00:30:28,000
found is that while many teams do have

839
00:30:28,000 --> 00:30:29,520
what it takes to build perfectly

840
00:30:29,520 --> 00:30:32,000
functional applications um baking in

841
00:30:32,000 --> 00:30:33,279
security is something completely

842
00:30:33,279 --> 00:30:35,760
different and especially on such a

843
00:30:35,760 --> 00:30:38,080
rushed timeline this can be a very large

844
00:30:38,080 --> 00:30:38,960
task

845
00:30:38,960 --> 00:30:40,720
so for that there are code hardening

846
00:30:40,720 --> 00:30:42,320
solutions that will allow you to

847
00:30:42,320 --> 00:30:44,240
implement multi-layered

848
00:30:44,240 --> 00:30:46,640
protections both static and dynamic to

849
00:30:46,640 --> 00:30:48,559
provide robust security inside of

850
00:30:48,559 --> 00:30:50,399
applications that will ward attackers

851
00:30:50,399 --> 00:30:52,159
and make it infeasible to reverse

852
00:30:52,159 --> 00:30:53,760
engineer those applications in a very

853
00:30:53,760 --> 00:30:56,240
short amount of time

854
00:30:56,240 --> 00:30:58,240
so those would certainly be recommendat

855
00:30:58,240 --> 00:31:02,480
recommended by us if for any reason

856
00:31:02,720 --> 00:31:04,559
public health authorities decide not to

857
00:31:04,559 --> 00:31:07,760
adopt a common api and to actually go

858
00:31:07,760 --> 00:31:09,919
ahead and collect additional pieces of

859
00:31:09,919 --> 00:31:12,799
unnecessary data

860
00:31:12,799 --> 00:31:16,080
and the final product we hope is that uh

861
00:31:16,080 --> 00:31:18,320
more safe secure and privacy focused

862
00:31:18,320 --> 00:31:20,799
contact tracing applications by creating

863
00:31:20,799 --> 00:31:22,640
applications with security and privacy

864
00:31:22,640 --> 00:31:25,360
in mind the ultimate goal as it always

865
00:31:25,360 --> 00:31:26,880
was is that

866
00:31:26,880 --> 00:31:28,720
users will trust those applications

867
00:31:28,720 --> 00:31:30,799
they'll use those applications and by

868
00:31:30,799 --> 00:31:32,559
using those applications we'll all be

869
00:31:32,559 --> 00:31:33,919
safer

870
00:31:33,919 --> 00:31:35,679
we can make a difference we can make an

871
00:31:35,679 --> 00:31:38,080
impact and hopefully

872
00:31:38,080 --> 00:31:40,480
find a way to more effectively fight the

873
00:31:40,480 --> 00:31:42,720
pandemic

874
00:31:42,720 --> 00:31:44,559
now with this we'd like to move on to

875
00:31:44,559 --> 00:31:46,320
some general agnostic recommendations

876
00:31:46,320 --> 00:31:48,559
for code hardening solutions

877
00:31:48,559 --> 00:31:50,880
just so that we can be most helpful

878
00:31:50,880 --> 00:31:52,960
again going back to the main point a

879
00:31:52,960 --> 00:31:54,399
code hardening solution shouldn't be

880
00:31:54,399 --> 00:31:56,399
needed when it comes to contact tracing

881
00:31:56,399 --> 00:31:58,000
applications these applications should

882
00:31:58,000 --> 00:32:01,279
essentially be shells which really only

883
00:32:01,279 --> 00:32:02,240
alert

884
00:32:02,240 --> 00:32:04,240
users of potential exposures based on

885
00:32:04,240 --> 00:32:06,000
bluetooth activity

886
00:32:06,000 --> 00:32:09,039
but if for any reason you

887
00:32:09,039 --> 00:32:11,360
stray from that

888
00:32:11,360 --> 00:32:13,279
recommendation and you do decide to

889
00:32:13,279 --> 00:32:15,200
again collect additional pieces of

890
00:32:15,200 --> 00:32:16,640
information it does become your

891
00:32:16,640 --> 00:32:19,279
liability your obligations to secure it

892
00:32:19,279 --> 00:32:22,159
and if you don't have time to do that um

893
00:32:22,159 --> 00:32:23,919
you don't have the the in-house skill or

894
00:32:23,919 --> 00:32:26,000
specialization to do that then i would

895
00:32:26,000 --> 00:32:28,240
have to say that this is very common and

896
00:32:28,240 --> 00:32:30,159
we'll discuss this uh

897
00:32:30,159 --> 00:32:33,039
in in following slides as well

898
00:32:33,039 --> 00:32:34,799
in order to make

899
00:32:34,799 --> 00:32:37,919
life easier faster and more secure for

900
00:32:37,919 --> 00:32:39,679
everybody you can adopt a code hardening

901
00:32:39,679 --> 00:32:41,039
solution

902
00:32:41,039 --> 00:32:42,399
and so we're going to run over a couple

903
00:32:42,399 --> 00:32:44,000
different code hardening solutions which

904
00:32:44,000 --> 00:32:45,679
can help

905
00:32:45,679 --> 00:32:48,240
vastly improve the security posture of

906
00:32:48,240 --> 00:32:49,840
applications both statically and

907
00:32:49,840 --> 00:32:52,000
dynamically by applying multi-layered

908
00:32:52,000 --> 00:32:53,679
protection in a very short amount of

909
00:32:53,679 --> 00:32:56,159
time so a number of weeks

910
00:32:56,159 --> 00:32:58,880
so starting with dexguard dexguard is a

911
00:32:58,880 --> 00:33:01,279
android hardening solution once again it

912
00:33:01,279 --> 00:33:02,080
is

913
00:33:02,080 --> 00:33:04,000
a fully encompassing suite of tools

914
00:33:04,000 --> 00:33:06,559
which is designed to specifically harden

915
00:33:06,559 --> 00:33:08,799
android applications against both

916
00:33:08,799 --> 00:33:10,559
hackers and reverse engineers it does

917
00:33:10,559 --> 00:33:12,000
this by again

918
00:33:12,000 --> 00:33:15,279
applying multi-layered protection um

919
00:33:15,279 --> 00:33:17,919
both static and dynamic the same is true

920
00:33:17,919 --> 00:33:20,480
of ix card which is its ios counterpart

921
00:33:20,480 --> 00:33:22,480
it's designed to provide an equivalent

922
00:33:22,480 --> 00:33:24,399
level of protection but for ios

923
00:33:24,399 --> 00:33:26,559
applications

924
00:33:26,559 --> 00:33:29,039
and so if you are building an ios

925
00:33:29,039 --> 00:33:30,960
contact tracing application it does

926
00:33:30,960 --> 00:33:32,080
collect

927
00:33:32,080 --> 00:33:33,840
additional pieces of sensitive user

928
00:33:33,840 --> 00:33:35,840
information it would be a good idea in

929
00:33:35,840 --> 00:33:38,559
order to secure that using a solution

930
00:33:38,559 --> 00:33:40,000
like ix guard

931
00:33:40,000 --> 00:33:41,200
and finally there's threatcast

932
00:33:41,200 --> 00:33:43,519
threatcast will provide real-time threat

933
00:33:43,519 --> 00:33:45,360
event information so that you can

934
00:33:45,360 --> 00:33:46,960
actually monitor what's happening and

935
00:33:46,960 --> 00:33:48,559
how that application is being attacked

936
00:33:48,559 --> 00:33:51,360
in real time and then respond to that

937
00:33:51,360 --> 00:33:54,158
proactively

938
00:33:54,960 --> 00:33:57,360
now finally we would like to move on to

939
00:33:57,360 --> 00:33:59,039
the triple constraint and the importance

940
00:33:59,039 --> 00:34:00,320
of actually adopting the triple

941
00:34:00,320 --> 00:34:02,080
constraint

942
00:34:02,080 --> 00:34:04,080
now the triple constraint is the idea

943
00:34:04,080 --> 00:34:06,559
that in any project management scenario

944
00:34:06,559 --> 00:34:08,399
you really have to choose between time

945
00:34:08,399 --> 00:34:10,639
cost and quality and oftentimes you can

946
00:34:10,639 --> 00:34:12,960
only pick two now in this case what we

947
00:34:12,960 --> 00:34:15,679
found is that you know many teams did

948
00:34:15,679 --> 00:34:18,079
you know have a very short amount of

949
00:34:18,079 --> 00:34:21,040
time to develop applications

950
00:34:21,040 --> 00:34:23,119
and they weren't willing to put money

951
00:34:23,119 --> 00:34:26,159
into securing these applications either

952
00:34:26,159 --> 00:34:28,879
as a result the quality really suffered

953
00:34:28,879 --> 00:34:30,879
what they could have done is they could

954
00:34:30,879 --> 00:34:32,719
have put in

955
00:34:32,719 --> 00:34:34,960
some more money in order to employ a

956
00:34:34,960 --> 00:34:36,960
code hardening solution that actually

957
00:34:36,960 --> 00:34:38,639
encrypted and secured all of the

958
00:34:38,639 --> 00:34:41,760
additional information um

959
00:34:41,760 --> 00:34:43,520
that they collected and and this would

960
00:34:43,520 --> 00:34:45,280
have been a much more

961
00:34:45,280 --> 00:34:47,839
responsible

962
00:34:47,839 --> 00:34:49,119
the second thing that we would like to

963
00:34:49,119 --> 00:34:51,199
cover is you know resource allocation

964
00:34:51,199 --> 00:34:53,359
what we find is that professionally

965
00:34:53,359 --> 00:34:55,918
speaking most teams certainly do have

966
00:34:55,918 --> 00:34:57,520
the in-house specialization needed to

967
00:34:57,520 --> 00:34:59,440
create very functional and performant

968
00:34:59,440 --> 00:35:01,359
applications but what they don't have is

969
00:35:01,359 --> 00:35:03,280
the in-house specialization needed in

970
00:35:03,280 --> 00:35:06,160
order to bake in robust multi-layered

971
00:35:06,160 --> 00:35:08,880
security that is truly capable um of

972
00:35:08,880 --> 00:35:11,760
warding and making it infeasible for um

973
00:35:11,760 --> 00:35:14,480
very skilled reverse engineers uh to do

974
00:35:14,480 --> 00:35:16,160
just that reverse engineer and tamper

975
00:35:16,160 --> 00:35:18,800
with those applications um so if you

976
00:35:18,800 --> 00:35:20,560
happen to fall into the majority of

977
00:35:20,560 --> 00:35:23,280
teams like that then our recommendation

978
00:35:23,280 --> 00:35:24,000
is

979
00:35:24,000 --> 00:35:26,960
don't try to reinvent the wheel um

980
00:35:26,960 --> 00:35:29,119
utilize a code hardening solution in

981
00:35:29,119 --> 00:35:31,599
order to very quickly

982
00:35:31,599 --> 00:35:34,000
and conveniently build in security to

983
00:35:34,000 --> 00:35:35,920
your application so that you can protect

984
00:35:35,920 --> 00:35:37,920
the user base

985
00:35:37,920 --> 00:35:39,520
and ultimately

986
00:35:39,520 --> 00:35:41,359
as part of this it bleeds it bleeds

987
00:35:41,359 --> 00:35:43,680
right into the rest avoid do it yourself

988
00:35:43,680 --> 00:35:46,000
security implementations

989
00:35:46,000 --> 00:35:48,000
like we observed

990
00:35:48,000 --> 00:35:50,960
here in this data set so again adopt the

991
00:35:50,960 --> 00:35:52,960
tools that are given to you benefit from

992
00:35:52,960 --> 00:35:55,040
the tools that are given to you if tech

993
00:35:55,040 --> 00:35:56,400
giants like google and apple are going

994
00:35:56,400 --> 00:35:59,920
to give you a common api which is

995
00:35:59,920 --> 00:36:01,119
designed to

996
00:36:01,119 --> 00:36:03,520
help you build core functionalities into

997
00:36:03,520 --> 00:36:05,920
applications in a safe and secure way

998
00:36:05,920 --> 00:36:07,359
certainly use them

999
00:36:07,359 --> 00:36:09,119
but don't expect you know high quality

1000
00:36:09,119 --> 00:36:11,119
low cost and you know low time

1001
00:36:11,119 --> 00:36:12,880
commitment when it comes to really

1002
00:36:12,880 --> 00:36:14,640
anything in life

1003
00:36:14,640 --> 00:36:16,000
if you enjoyed the topic of this

1004
00:36:16,000 --> 00:36:18,160
presentation we'd like to recommend some

1005
00:36:18,160 --> 00:36:19,760
ideas for future projects that you can

1006
00:36:19,760 --> 00:36:21,680
take on yourself

1007
00:36:21,680 --> 00:36:23,839
quite simply vaccine passport

1008
00:36:23,839 --> 00:36:26,000
applications they're very similar to

1009
00:36:26,000 --> 00:36:28,320
contact tracing applications but they've

1010
00:36:28,320 --> 00:36:30,079
had more development time as they're not

1011
00:36:30,079 --> 00:36:32,720
time pressed in terms of development as

1012
00:36:32,720 --> 00:36:34,160
they're racing against the surging

1013
00:36:34,160 --> 00:36:35,440
pandemic

1014
00:36:35,440 --> 00:36:37,680
they're also more unified meaning that a

1015
00:36:37,680 --> 00:36:39,760
whole region such as the european union

1016
00:36:39,760 --> 00:36:41,760
is only relying on one

1017
00:36:41,760 --> 00:36:44,400
one application versus a multitude but

1018
00:36:44,400 --> 00:36:46,079
there's still a reason to be skeptical

1019
00:36:46,079 --> 00:36:46,960
because

1020
00:36:46,960 --> 00:36:48,800
we've seen the way that the development

1021
00:36:48,800 --> 00:36:51,119
approach has been for the contact

1022
00:36:51,119 --> 00:36:52,800
tracing applications

1023
00:36:52,800 --> 00:36:54,640
despite there being more time it doesn't

1024
00:36:54,640 --> 00:36:56,800
necessarily mean that development has

1025
00:36:56,800 --> 00:36:58,079
included

1026
00:36:58,079 --> 00:37:01,440
security practices and processes

1027
00:37:01,440 --> 00:37:03,040
some test cases we'd like to recommend

1028
00:37:03,040 --> 00:37:05,119
there is seeing if you can change the

1029
00:37:05,119 --> 00:37:08,400
approval status of uploaded covid tests

1030
00:37:08,400 --> 00:37:10,800
and also seeing if you can bypass

1031
00:37:10,800 --> 00:37:12,640
the proof of vaccination validation

1032
00:37:12,640 --> 00:37:15,280
where i believe you upload a picture of

1033
00:37:15,280 --> 00:37:18,160
your vaccination card

1034
00:37:18,160 --> 00:37:19,680
and with that we'd like to open it up to

1035
00:37:19,680 --> 00:37:21,040
any questions

1036
00:37:21,040 --> 00:37:23,839
thank you

1037
00:42:54,400 --> 00:42:56,480
you

