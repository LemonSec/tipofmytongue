1
00:00:00,470 --> 00:00:08,580
[Music]

2
00:00:12,650 --> 00:00:14,639
[Music]

3
00:00:14,639 --> 00:00:16,880
all right everyone so i'm rebecca deck

4
00:00:16,880 --> 00:00:18,800
and today i'm going to talk about my aws

5
00:00:18,800 --> 00:00:20,960
waft deployment odyssey or let's put a

6
00:00:20,960 --> 00:00:23,439
happy little laugh right there as i got

7
00:00:23,439 --> 00:00:26,000
roped in yet again to deploying another

8
00:00:26,000 --> 00:00:30,640
type of waff in my uh long career

9
00:00:30,640 --> 00:00:32,320
so today i'm going to go into a couple

10
00:00:32,320 --> 00:00:33,760
of different things i'll start off with

11
00:00:33,760 --> 00:00:35,760
some general information about different

12
00:00:35,760 --> 00:00:37,920
types of waff that you might see and

13
00:00:37,920 --> 00:00:39,600
we'll talk about infrastructure as code

14
00:00:39,600 --> 00:00:41,680
to try to level set up because it comes

15
00:00:41,680 --> 00:00:43,520
important later on

16
00:00:43,520 --> 00:00:44,800
and then we'll talk about why i went

17
00:00:44,800 --> 00:00:47,760
with aws waff why the aws graph sucks

18
00:00:47,760 --> 00:00:50,719
sometimes the waff roll out process how

19
00:00:50,719 --> 00:00:52,879
i compensated for some of the issues

20
00:00:52,879 --> 00:00:55,280
that we had with aws waff and then how

21
00:00:55,280 --> 00:00:59,359
we went through tuning aws waff

22
00:00:59,359 --> 00:01:02,239
so first my bio i'm a lover of all

23
00:01:02,239 --> 00:01:04,559
software developers so that's one thing

24
00:01:04,559 --> 00:01:06,400
that i love about being a product

25
00:01:06,400 --> 00:01:09,119
security engineer is i get to work with

26
00:01:09,119 --> 00:01:10,960
developers all the time and i think it's

27
00:01:10,960 --> 00:01:12,960
really important to remember that

28
00:01:12,960 --> 00:01:14,880
developers are the ones who

29
00:01:14,880 --> 00:01:16,560
really run a lot of the company

30
00:01:16,560 --> 00:01:18,720
especially when you're in like fintech

31
00:01:18,720 --> 00:01:22,080
type industries any tech because

32
00:01:22,080 --> 00:01:23,600
they're the ones actually producing the

33
00:01:23,600 --> 00:01:25,680
product that the customers want to buy

34
00:01:25,680 --> 00:01:26,479
so

35
00:01:26,479 --> 00:01:28,159
being in product security gives me a

36
00:01:28,159 --> 00:01:30,240
good chance to try to make sure that

37
00:01:30,240 --> 00:01:33,040
they do their jobs just in a secure way

38
00:01:33,040 --> 00:01:34,479
and not sit there and be the big

39
00:01:34,479 --> 00:01:36,240
department of no that we used to have a

40
00:01:36,240 --> 00:01:37,520
long time ago

41
00:01:37,520 --> 00:01:40,000
i've deployed more wafts in my career

42
00:01:40,000 --> 00:01:42,320
than i would like to admit

43
00:01:42,320 --> 00:01:43,280
um

44
00:01:43,280 --> 00:01:44,720
pretty much every type of waff that

45
00:01:44,720 --> 00:01:46,560
we'll discuss today is one that i have

46
00:01:46,560 --> 00:01:48,159
deployed in somebody's production

47
00:01:48,159 --> 00:01:49,280
environment

48
00:01:49,280 --> 00:01:52,320
i've been in tech since like 1995

49
00:01:52,320 --> 00:01:54,320
i worked in qa i was a software

50
00:01:54,320 --> 00:01:56,960
developer i worked incident response i

51
00:01:56,960 --> 00:01:59,200
was a systems engineer for things like

52
00:01:59,200 --> 00:02:02,079
wafs and web proxies

53
00:02:02,079 --> 00:02:04,479
i was a penetration tester for a few

54
00:02:04,479 --> 00:02:06,399
years and then i did application

55
00:02:06,399 --> 00:02:08,479
security i've been doing that

56
00:02:08,479 --> 00:02:10,800
for six or seven years now i also

57
00:02:10,800 --> 00:02:13,040
graduated from the sands masters program

58
00:02:13,040 --> 00:02:14,319
with my

59
00:02:14,319 --> 00:02:15,760
masters of science in information

60
00:02:15,760 --> 00:02:17,920
security engineering i'm not a very good

61
00:02:17,920 --> 00:02:19,040
artist

62
00:02:19,040 --> 00:02:22,160
but i have fun drawing and i had never

63
00:02:22,160 --> 00:02:23,440
drawn before

64
00:02:23,440 --> 00:02:25,280
like a month ago it had been since i was

65
00:02:25,280 --> 00:02:27,200
in like maybe fourth grade and it was

66
00:02:27,200 --> 00:02:28,480
something that i decided that i want to

67
00:02:28,480 --> 00:02:30,319
try to do so i illustrated a lot of the

68
00:02:30,319 --> 00:02:32,560
stuff in this presentation myself

69
00:02:32,560 --> 00:02:34,879
kind of badly but it's okay because i

70
00:02:34,879 --> 00:02:36,879
enjoyed it and you don't have to be

71
00:02:36,879 --> 00:02:39,599
great at something to have fun with it

72
00:02:39,599 --> 00:02:41,519
i'm based out of raleigh north carolina

73
00:02:41,519 --> 00:02:43,519
where i live with my wife and my two

74
00:02:43,519 --> 00:02:45,280
kids and two cats

75
00:02:45,280 --> 00:02:49,200
so happy pride month everybody

76
00:02:49,200 --> 00:02:50,400
all right so let's talk about the

77
00:02:50,400 --> 00:02:52,239
different types of waff

78
00:02:52,239 --> 00:02:53,440
so first

79
00:02:53,440 --> 00:02:55,200
i'll kind of go and what i consider

80
00:02:55,200 --> 00:02:57,599
chronological order for most waffs so

81
00:02:57,599 --> 00:02:59,680
first we have the inline web application

82
00:02:59,680 --> 00:03:00,959
firewall

83
00:03:00,959 --> 00:03:03,120
the inline web application firewall is

84
00:03:03,120 --> 00:03:05,519
one that's traditionally deployed inside

85
00:03:05,519 --> 00:03:08,400
a network that you own

86
00:03:08,400 --> 00:03:11,599
the traffic comes into your network

87
00:03:11,599 --> 00:03:13,519
and then you get to

88
00:03:13,519 --> 00:03:15,519
see everything that goes in as it flows

89
00:03:15,519 --> 00:03:17,200
through the network before it gets to

90
00:03:17,200 --> 00:03:19,040
the web servers oftentimes you'll

91
00:03:19,040 --> 00:03:22,080
terminate tls on any waf

92
00:03:22,080 --> 00:03:23,760
so that you can get inside that traffic

93
00:03:23,760 --> 00:03:25,680
and look at it for for certain types of

94
00:03:25,680 --> 00:03:27,440
attacks

95
00:03:27,440 --> 00:03:29,280
but the key with inline is that's going

96
00:03:29,280 --> 00:03:31,920
to sit like in that network path and

97
00:03:31,920 --> 00:03:34,720
these are really good because they are

98
00:03:34,720 --> 00:03:37,519
very highly customizable

99
00:03:37,519 --> 00:03:38,319
so

100
00:03:38,319 --> 00:03:39,200
the

101
00:03:39,200 --> 00:03:41,760
you have great control over which rules

102
00:03:41,760 --> 00:03:43,760
you deploy what the rules look like what

103
00:03:43,760 --> 00:03:45,599
the regular expressions are and your

104
00:03:45,599 --> 00:03:50,720
caps are really like your ability to um

105
00:03:50,720 --> 00:03:53,360
or your systems bandwidth right when you

106
00:03:53,360 --> 00:03:55,360
exceed that system's processing power

107
00:03:55,360 --> 00:03:57,920
and memory that's when you start having

108
00:03:57,920 --> 00:04:00,560
issues with applying rules which gives

109
00:04:00,560 --> 00:04:02,720
you generally the most of any of these

110
00:04:02,720 --> 00:04:04,560
types of deployment

111
00:04:04,560 --> 00:04:06,480
deployment methods

112
00:04:06,480 --> 00:04:08,239
now it's also a potential point of

113
00:04:08,239 --> 00:04:09,760
failure so that's one of the things i

114
00:04:09,760 --> 00:04:11,040
hate about this

115
00:04:11,040 --> 00:04:13,120
most of my job is not dealing with

116
00:04:13,120 --> 00:04:15,280
laughs i don't like being that person

117
00:04:15,280 --> 00:04:17,358
that sits there and watches for things

118
00:04:17,358 --> 00:04:20,880
and gets called at 2 am um by the by the

119
00:04:20,880 --> 00:04:22,800
knock or something saying hey the swath

120
00:04:22,800 --> 00:04:24,560
is down and traffic is stopped to our

121
00:04:24,560 --> 00:04:26,479
main line of business that's not a place

122
00:04:26,479 --> 00:04:28,639
i like to be

123
00:04:28,639 --> 00:04:29,360
and

124
00:04:29,360 --> 00:04:32,080
when you have this piece of hardware if

125
00:04:32,080 --> 00:04:34,479
it goes down oftentimes that results in

126
00:04:34,479 --> 00:04:36,080
your web traffic going down sometimes

127
00:04:36,080 --> 00:04:38,080
it's just for a few seconds

128
00:04:38,080 --> 00:04:39,759
we used to run when i ran physical

129
00:04:39,759 --> 00:04:42,160
hardware we had what's called the zpha

130
00:04:42,160 --> 00:04:44,240
zero power high availability so if the

131
00:04:44,240 --> 00:04:45,600
laugh went down it would switch over to

132
00:04:45,600 --> 00:04:47,680
the backup waff if that one went down it

133
00:04:47,680 --> 00:04:49,440
would switch over and just pass traffic

134
00:04:49,440 --> 00:04:51,199
through

135
00:04:51,199 --> 00:04:52,000
but

136
00:04:52,000 --> 00:04:54,320
it wasn't fun to manage that you always

137
00:04:54,320 --> 00:04:56,560
had these upgrade windows that happened

138
00:04:56,560 --> 00:04:58,000
one or two in the morning when you were

139
00:04:58,000 --> 00:05:00,560
allowed to mess with network traffic it

140
00:05:00,560 --> 00:05:03,680
was not so easy to scale because scaling

141
00:05:03,680 --> 00:05:06,400
meant buying bigger hardware or more

142
00:05:06,400 --> 00:05:08,320
hardware and splitting the load between

143
00:05:08,320 --> 00:05:11,759
these different systems you ran into

144
00:05:11,759 --> 00:05:14,080
some weird issues with

145
00:05:14,080 --> 00:05:15,759
how the network traffic flowed if you

146
00:05:15,759 --> 00:05:17,360
were seeing responses and stuff like

147
00:05:17,360 --> 00:05:19,039
that

148
00:05:19,039 --> 00:05:20,800
that made it not a pleasant thing to

149
00:05:20,800 --> 00:05:22,960
deal with so something i think a lot of

150
00:05:22,960 --> 00:05:25,840
companies were glad to get away from so

151
00:05:25,840 --> 00:05:27,759
you had these things dns based wafts

152
00:05:27,759 --> 00:05:29,520
start coming out and these i first

153
00:05:29,520 --> 00:05:32,080
started running into in like 2014 2015

154
00:05:32,080 --> 00:05:33,440
time frame

155
00:05:33,440 --> 00:05:35,520
and these cloud-based

156
00:05:35,520 --> 00:05:37,199
wafts they're generally some kind of

157
00:05:37,199 --> 00:05:39,039
like sas solution that sits in somebody

158
00:05:39,039 --> 00:05:41,440
else's network and then

159
00:05:41,440 --> 00:05:44,479
a customer wants to know where is your

160
00:05:44,479 --> 00:05:46,479
ip address

161
00:05:46,479 --> 00:05:49,199
and the dns entry they get points them

162
00:05:49,199 --> 00:05:51,680
to this cloud provider the cloud wav

163
00:05:51,680 --> 00:05:54,400
provider then terminates the seller tls

164
00:05:54,400 --> 00:05:56,319
connection looks inside it looks for

165
00:05:56,319 --> 00:05:58,479
attacks and then forwards that traffic

166
00:05:58,479 --> 00:06:00,720
onto your servers and you have to go

167
00:06:00,720 --> 00:06:02,960
configure firewall rules on your servers

168
00:06:02,960 --> 00:06:05,120
to make sure people don't directly hit

169
00:06:05,120 --> 00:06:06,720
your systems and that they always go

170
00:06:06,720 --> 00:06:08,560
through this cloud-based web and that

171
00:06:08,560 --> 00:06:10,639
buys you some stuff like you can do ddos

172
00:06:10,639 --> 00:06:12,400
protection very easily because you're

173
00:06:12,400 --> 00:06:15,039
terminating in somebody else's network

174
00:06:15,039 --> 00:06:18,080
you can and in like 2015 you didn't have

175
00:06:18,080 --> 00:06:19,520
a lot of customization that you could do

176
00:06:19,520 --> 00:06:20,960
with that but it's really improved in

177
00:06:20,960 --> 00:06:23,199
the last six years

178
00:06:23,199 --> 00:06:24,960
so if you find yourself looking into

179
00:06:24,960 --> 00:06:26,639
these kinds of solutions odds are

180
00:06:26,639 --> 00:06:28,400
they've changed if you haven't looked at

181
00:06:28,400 --> 00:06:30,720
them in a while

182
00:06:30,720 --> 00:06:33,039
they now provide pretty good ability to

183
00:06:33,039 --> 00:06:35,600
customize i have

184
00:06:35,600 --> 00:06:38,160
this specific regular expression that i

185
00:06:38,160 --> 00:06:40,479
want to apply to this one parameter on

186
00:06:40,479 --> 00:06:43,360
this site or i want to exclude this one

187
00:06:43,360 --> 00:06:45,840
parameter on this one site

188
00:06:45,840 --> 00:06:47,919
and that kind of makes a big difference

189
00:06:47,919 --> 00:06:49,039
i think

190
00:06:49,039 --> 00:06:51,199
so

191
00:06:52,160 --> 00:06:53,120
when you

192
00:06:53,120 --> 00:06:55,199
look at problems with these with modern

193
00:06:55,199 --> 00:06:57,120
deployment situations

194
00:06:57,120 --> 00:06:58,880
before in like 2015 when i was like hey

195
00:06:58,880 --> 00:07:00,639
these things are amazing it was really

196
00:07:00,639 --> 00:07:02,479
good because i owned

197
00:07:02,479 --> 00:07:06,000
you know two 24s and a separate slash 23

198
00:07:06,000 --> 00:07:08,639
uh cider block space and when we made

199
00:07:08,639 --> 00:07:11,120
systems we had hardware behind it they

200
00:07:11,120 --> 00:07:14,160
hit a specific ip the ip address never

201
00:07:14,160 --> 00:07:16,880
changed because we were stuck bound to

202
00:07:16,880 --> 00:07:18,560
that static ip

203
00:07:18,560 --> 00:07:20,240
but that's not the case with a lot of

204
00:07:20,240 --> 00:07:21,840
modern systems

205
00:07:21,840 --> 00:07:23,520
i see things with blue green deployments

206
00:07:23,520 --> 00:07:25,360
you're like bringing things up taking

207
00:07:25,360 --> 00:07:28,000
things down switching traffic over

208
00:07:28,000 --> 00:07:30,000
and it doesn't work quite so well

209
00:07:30,000 --> 00:07:32,319
anymore when i don't control the ip

210
00:07:32,319 --> 00:07:34,319
space aws does

211
00:07:34,319 --> 00:07:36,880
if that ip changes you're going to have

212
00:07:36,880 --> 00:07:39,440
a bad time because the cloud-based

213
00:07:39,440 --> 00:07:41,199
provider a lot of them even if you

214
00:07:41,199 --> 00:07:43,520
provide like a cname record that points

215
00:07:43,520 --> 00:07:45,120
to your system

216
00:07:45,120 --> 00:07:47,440
they will not update if anything changes

217
00:07:47,440 --> 00:07:49,120
in the background they still want to go

218
00:07:49,120 --> 00:07:51,680
to the specific ip address

219
00:07:51,680 --> 00:07:54,800
they also can have latency issues

220
00:07:54,800 --> 00:07:57,120
so you're going to be sending traffic

221
00:07:57,120 --> 00:07:58,879
out to somebody else's system it's going

222
00:07:58,879 --> 00:08:00,879
to be looked at and then sent onto yours

223
00:08:00,879 --> 00:08:03,199
that is probably going to increase your

224
00:08:03,199 --> 00:08:05,440
latency somewhat now a lot of these

225
00:08:05,440 --> 00:08:07,280
providers say well we can actually make

226
00:08:07,280 --> 00:08:09,520
your site faster and that's really great

227
00:08:09,520 --> 00:08:11,199
right they'll focus on the load time of

228
00:08:11,199 --> 00:08:12,800
your website

229
00:08:12,800 --> 00:08:15,360
but websites are not where you really

230
00:08:15,360 --> 00:08:17,599
care that much about latency most of the

231
00:08:17,599 --> 00:08:19,759
time that's an apis where i really feel

232
00:08:19,759 --> 00:08:21,919
strongly that latency is important and

233
00:08:21,919 --> 00:08:24,639
customers do as well because

234
00:08:24,639 --> 00:08:26,800
you'll have an sla that you have to meet

235
00:08:26,800 --> 00:08:28,960
i have to respond in 100 milliseconds to

236
00:08:28,960 --> 00:08:30,319
this request

237
00:08:30,319 --> 00:08:32,479
now with your website adds 100

238
00:08:32,479 --> 00:08:34,320
milliseconds nobody cares but if you

239
00:08:34,320 --> 00:08:36,240
only had 100 milliseconds to respond to

240
00:08:36,240 --> 00:08:39,360
that api and you add 30 or 40 that's a

241
00:08:39,360 --> 00:08:41,760
significant penalty that your engineers

242
00:08:41,760 --> 00:08:43,519
are going to have to deal with and it

243
00:08:43,519 --> 00:08:45,120
might not be easy because it's going to

244
00:08:45,120 --> 00:08:47,040
be written into contracts and they will

245
00:08:47,040 --> 00:08:48,240
have to make their systems more

246
00:08:48,240 --> 00:08:50,160
efficient and if it was easy to make

247
00:08:50,160 --> 00:08:51,519
their systems more efficient to meet

248
00:08:51,519 --> 00:08:52,880
those requirements they would have

249
00:08:52,880 --> 00:08:54,640
already done it and your sla would

250
00:08:54,640 --> 00:08:56,959
probably be even lower so you've got to

251
00:08:56,959 --> 00:08:59,200
keep latency in mind

252
00:08:59,200 --> 00:09:00,399
they also

253
00:09:00,399 --> 00:09:03,440
love to own your network the cloud-based

254
00:09:03,440 --> 00:09:05,680
providers want to own all certificate

255
00:09:05,680 --> 00:09:09,360
issuing and all dns so if you want to

256
00:09:09,360 --> 00:09:11,839
stand up a new website you would do it

257
00:09:11,839 --> 00:09:14,000
at this provider which is something that

258
00:09:14,000 --> 00:09:16,000
i'm not super comfortable with

259
00:09:16,000 --> 00:09:18,640
because these sites don't always work

260
00:09:18,640 --> 00:09:21,200
if i think it was just a week or two ago

261
00:09:21,200 --> 00:09:23,200
a very large cloud-based web provider

262
00:09:23,200 --> 00:09:25,440
went down and when they go down your

263
00:09:25,440 --> 00:09:28,800
site just dies nobody can get to it

264
00:09:28,800 --> 00:09:30,800
the management panels for them you have

265
00:09:30,800 --> 00:09:32,480
to be able to access the management

266
00:09:32,480 --> 00:09:34,880
panel so if that ever is gone you can't

267
00:09:34,880 --> 00:09:37,200
go in there and change these rules you

268
00:09:37,200 --> 00:09:40,320
can't claw it back if they own your dns

269
00:09:40,320 --> 00:09:42,399
and if you don't let them own their your

270
00:09:42,399 --> 00:09:44,320
dns then you're going to have other

271
00:09:44,320 --> 00:09:46,959
integration problems because as your ips

272
00:09:46,959 --> 00:09:48,560
change you won't be able to update them

273
00:09:48,560 --> 00:09:50,880
quite as easily and so now we have the

274
00:09:50,880 --> 00:09:52,320
aws swap

275
00:09:52,320 --> 00:09:54,880
this is yet another aws based service so

276
00:09:54,880 --> 00:09:57,279
aws is really great they're coming out

277
00:09:57,279 --> 00:09:59,040
with brand new things that they can sell

278
00:09:59,040 --> 00:10:00,320
you

279
00:10:00,320 --> 00:10:02,399
and it's really easy to deploy if your

280
00:10:02,399 --> 00:10:05,440
engineers work in aws they probably will

281
00:10:05,440 --> 00:10:08,959
have no issues using the aws swap

282
00:10:08,959 --> 00:10:11,839
the latency is fantastic because it's

283
00:10:11,839 --> 00:10:14,079
sitting right in there right you don't

284
00:10:14,079 --> 00:10:15,920
have to worry about what that latency is

285
00:10:15,920 --> 00:10:18,320
going to be it's not it was negligible

286
00:10:18,320 --> 00:10:21,120
in all of our testing

287
00:10:21,120 --> 00:10:24,160
the problem is their rule sets are not

288
00:10:24,160 --> 00:10:26,160
what you see with other cloud providers

289
00:10:26,160 --> 00:10:28,399
you can certainly make your own rules

290
00:10:28,399 --> 00:10:29,600
and i think

291
00:10:29,600 --> 00:10:31,920
maybe if you haven't worked with aws ref

292
00:10:31,920 --> 00:10:34,480
in a few years you know three years ago

293
00:10:34,480 --> 00:10:35,360
they

294
00:10:35,360 --> 00:10:37,279
don't even think they had managed rule

295
00:10:37,279 --> 00:10:39,680
sets you had to specify all the rules

296
00:10:39,680 --> 00:10:41,600
yourself so it was very much a box of

297
00:10:41,600 --> 00:10:43,040
nails and you had a hammer and you had

298
00:10:43,040 --> 00:10:45,200
to go find some wood and build all your

299
00:10:45,200 --> 00:10:47,360
rule set yourself

300
00:10:47,360 --> 00:10:50,240
these also contribute to vendor lock-in

301
00:10:50,240 --> 00:10:51,680
which is something we always want to be

302
00:10:51,680 --> 00:10:54,079
wary of because the more stuff that we

303
00:10:54,079 --> 00:10:56,079
put in a single cloud provider the more

304
00:10:56,079 --> 00:10:57,839
difficult it is to change away later and

305
00:10:57,839 --> 00:10:59,279
that's where things like kubernetes and

306
00:10:59,279 --> 00:11:00,880
stuff are very useful

307
00:11:00,880 --> 00:11:03,360
but if you go with aws waff

308
00:11:03,360 --> 00:11:04,480
you probably aren't going to want to

309
00:11:04,480 --> 00:11:06,320
port this to gcp or something because

310
00:11:06,320 --> 00:11:08,160
now you're you're paying the same kind

311
00:11:08,160 --> 00:11:10,000
of penalty where you do traffic routing

312
00:11:10,000 --> 00:11:13,440
to the wrong provider so not super great

313
00:11:13,440 --> 00:11:15,760
also billing when you have something

314
00:11:15,760 --> 00:11:17,040
like

315
00:11:17,040 --> 00:11:19,600
anything that's these like rate-based

316
00:11:19,600 --> 00:11:21,680
types of billing models like cloud-based

317
00:11:21,680 --> 00:11:24,000
tns is usually also has like a

318
00:11:24,000 --> 00:11:26,240
rate-based component and when you exceed

319
00:11:26,240 --> 00:11:27,839
this threshold then they're like oh

320
00:11:27,839 --> 00:11:29,920
you're bumping up to the next tier and

321
00:11:29,920 --> 00:11:31,360
when you bump up the next year we'll

322
00:11:31,360 --> 00:11:32,959
talk to you and charge you more money

323
00:11:32,959 --> 00:11:34,959
and if you have these weird spikes

324
00:11:34,959 --> 00:11:36,240
they're like hey you know what that's

325
00:11:36,240 --> 00:11:38,399
fine we'll float you this month it was

326
00:11:38,399 --> 00:11:39,760
not a big deal

327
00:11:39,760 --> 00:11:41,839
aws is not that especially if you're a

328
00:11:41,839 --> 00:11:44,800
small shop aws is not someone that's

329
00:11:44,800 --> 00:11:47,279
super easy to negotiate with

330
00:11:47,279 --> 00:11:48,959
and if you don't even have like your own

331
00:11:48,959 --> 00:11:50,079
if you're not big enough to have your

332
00:11:50,079 --> 00:11:52,880
own dedicated aws support team

333
00:11:52,880 --> 00:11:54,480
you probably don't even know who to talk

334
00:11:54,480 --> 00:11:56,880
to you just have to pay it you see these

335
00:11:56,880 --> 00:11:58,480
things online if somebody ran a

336
00:11:58,480 --> 00:12:00,800
sagemaker tutorial and they ended up

337
00:12:00,800 --> 00:12:02,480
with a thousand dollar bill because they

338
00:12:02,480 --> 00:12:04,800
didn't shut everything down

339
00:12:04,800 --> 00:12:06,000
and you can have the same kind of

340
00:12:06,000 --> 00:12:07,839
problems with the waff and we'll talk

341
00:12:07,839 --> 00:12:09,760
about why that billing became so

342
00:12:09,760 --> 00:12:12,639
problematic during the deployment

343
00:12:12,639 --> 00:12:14,240
there's a couple of things that i didn't

344
00:12:14,240 --> 00:12:15,839
consider that a lot of people do when

345
00:12:15,839 --> 00:12:17,760
they're talking about laughs these days

346
00:12:17,760 --> 00:12:20,480
so i asked and rasp

347
00:12:20,480 --> 00:12:22,399
those i didn't really look at one i

348
00:12:22,399 --> 00:12:24,800
don't like owning agents remember i

349
00:12:24,800 --> 00:12:26,880
don't want to be the one responsible for

350
00:12:26,880 --> 00:12:29,279
breaking things the more i can shift

351
00:12:29,279 --> 00:12:31,680
away from me the more work i can do

352
00:12:31,680 --> 00:12:33,600
actually working with developers to do

353
00:12:33,600 --> 00:12:35,279
good product security work instead of

354
00:12:35,279 --> 00:12:37,040
babysitting some system

355
00:12:37,040 --> 00:12:39,040
but some of our requirements where we

356
00:12:39,040 --> 00:12:40,959
had to be able to block attacks and we

357
00:12:40,959 --> 00:12:42,160
weren't going to put agents on

358
00:12:42,160 --> 00:12:44,079
everybody's system these agents get

359
00:12:44,079 --> 00:12:45,600
super weird when you're talking about

360
00:12:45,600 --> 00:12:48,639
containers and you're talking about

361
00:12:48,639 --> 00:12:50,480
ec2 hosts and all these other types of

362
00:12:50,480 --> 00:12:52,560
things you have these various situations

363
00:12:52,560 --> 00:12:54,160
that you're going to have to deal with

364
00:12:54,160 --> 00:12:57,120
and the burden for implementing these as

365
00:12:57,120 --> 00:12:59,040
soon as you have an agent goes on to

366
00:12:59,040 --> 00:13:01,120
your engineering teams it's very hard

367
00:13:01,120 --> 00:13:03,519
for me as a security team to absorb that

368
00:13:03,519 --> 00:13:06,079
and a lot of times when we talk about

369
00:13:06,079 --> 00:13:08,880
work that security causes teams one of

370
00:13:08,880 --> 00:13:10,320
the things that we strive to do as

371
00:13:10,320 --> 00:13:13,200
product security is be this barrier

372
00:13:13,200 --> 00:13:15,600
right stopping all this extra work from

373
00:13:15,600 --> 00:13:16,800
raining down

374
00:13:16,800 --> 00:13:19,200
on this the actual engineering team so

375
00:13:19,200 --> 00:13:22,000
they can keep doing their jobs

376
00:13:22,000 --> 00:13:23,600
so those were

377
00:13:23,600 --> 00:13:25,120
kind of contraindications of these

378
00:13:25,120 --> 00:13:27,760
specific technologies

379
00:13:27,760 --> 00:13:28,880
all right so those are the types of

380
00:13:28,880 --> 00:13:32,480
waves moving into infrastructure as code

381
00:13:32,480 --> 00:13:34,079
infrastructure as code is nothing more

382
00:13:34,079 --> 00:13:35,920
than we can programmatically define the

383
00:13:35,920 --> 00:13:37,360
various computer systems that we're

384
00:13:37,360 --> 00:13:40,160
using so i can use a tool like terraform

385
00:13:40,160 --> 00:13:42,160
i can use cloud formation

386
00:13:42,160 --> 00:13:44,959
and i can burn down my environment and

387
00:13:44,959 --> 00:13:46,880
make it again i can take this

388
00:13:46,880 --> 00:13:49,120
environment that's in us west too make

389
00:13:49,120 --> 00:13:51,920
it in us east one and it just happens

390
00:13:51,920 --> 00:13:54,160
it's something that i love as somebody

391
00:13:54,160 --> 00:13:56,639
who used to do software engineering work

392
00:13:56,639 --> 00:13:58,480
that's a thing that i'm very comfortable

393
00:13:58,480 --> 00:14:00,720
with right i like the idea that i can

394
00:14:00,720 --> 00:14:02,720
write some code i don't like to be in

395
00:14:02,720 --> 00:14:05,680
consoles clicking around on things

396
00:14:05,680 --> 00:14:08,320
because that's how mistakes happen when

397
00:14:08,320 --> 00:14:11,040
i used to do deploys of an old.net

398
00:14:11,040 --> 00:14:14,000
application i would compile the app on

399
00:14:14,000 --> 00:14:16,320
my developer workstation and i would

400
00:14:16,320 --> 00:14:18,399
copy the binaries to the development

401
00:14:18,399 --> 00:14:19,600
environment if the development

402
00:14:19,600 --> 00:14:21,519
environment was fine i copied the

403
00:14:21,519 --> 00:14:23,760
binaries from development to production

404
00:14:23,760 --> 00:14:25,839
and that was our deployment process

405
00:14:25,839 --> 00:14:28,000
that's a bad deployment process the

406
00:14:28,000 --> 00:14:29,760
number of times i screwed things up

407
00:14:29,760 --> 00:14:32,800
doing that was staggering so these are

408
00:14:32,800 --> 00:14:35,120
the reasons that we don't enjoy that we

409
00:14:35,120 --> 00:14:37,120
like to have code and the code deploys

410
00:14:37,120 --> 00:14:39,040
the code doesn't make mistakes it's the

411
00:14:39,040 --> 00:14:41,360
same unless you've changed it it's going

412
00:14:41,360 --> 00:14:43,839
to operate the same

413
00:14:43,839 --> 00:14:46,240
and you have to like intervene to screw

414
00:14:46,240 --> 00:14:48,480
these things up

415
00:14:48,480 --> 00:14:49,680
another thing i like about

416
00:14:49,680 --> 00:14:52,079
infrastructure is code

417
00:14:52,079 --> 00:14:54,880
remember we try to avoid throwing a

418
00:14:54,880 --> 00:14:57,199
bunch of work onto the engineering teams

419
00:14:57,199 --> 00:14:59,040
the more work that i as a security

420
00:14:59,040 --> 00:15:01,440
person can absorb the better the company

421
00:15:01,440 --> 00:15:03,519
is going to do so one of the things that

422
00:15:03,519 --> 00:15:05,600
we can do is create these secure

423
00:15:05,600 --> 00:15:07,839
templates that are infrastructures code

424
00:15:07,839 --> 00:15:10,480
we can say look if you want to deploy an

425
00:15:10,480 --> 00:15:12,880
s3 bucket and you have to do these like

426
00:15:12,880 --> 00:15:15,600
10 steps on an s3 bucket here's a module

427
00:15:15,600 --> 00:15:17,519
that does all these 10 steps

428
00:15:17,519 --> 00:15:19,600
if instead of just directly referencing

429
00:15:19,600 --> 00:15:22,800
s3 you reference my s3 module it will do

430
00:15:22,800 --> 00:15:24,800
all 10 steps for you you don't have to

431
00:15:24,800 --> 00:15:26,399
do anything wrong

432
00:15:26,399 --> 00:15:28,320
or anything different and if you find

433
00:15:28,320 --> 00:15:30,800
yourself changing any of these um

434
00:15:30,800 --> 00:15:32,800
defaults that we've set that probably

435
00:15:32,800 --> 00:15:34,000
means you're out of compliance with a

436
00:15:34,000 --> 00:15:36,000
standard and you need an exception so

437
00:15:36,000 --> 00:15:38,079
it's very easy to draw that line of

438
00:15:38,079 --> 00:15:40,000
telling people what they're supposed to

439
00:15:40,000 --> 00:15:42,000
do and i don't have to hunt them down

440
00:15:42,000 --> 00:15:43,600
they don't have to guess at it and they

441
00:15:43,600 --> 00:15:44,480
don't even have to write their own

442
00:15:44,480 --> 00:15:45,759
module they just say give me the

443
00:15:45,759 --> 00:15:47,519
approved s3 bucket or the approved load

444
00:15:47,519 --> 00:15:50,880
balancer and what this looks like

445
00:15:50,880 --> 00:15:52,880
it gives you an audit trail so all your

446
00:15:52,880 --> 00:15:54,560
infrastructure is code hopefully it's

447
00:15:54,560 --> 00:15:56,320
not just sitting on your workstation

448
00:15:56,320 --> 00:15:57,920
hopefully it gets checked into a code

449
00:15:57,920 --> 00:16:00,240
repository like gitlab and then when it

450
00:16:00,240 --> 00:16:02,079
goes to gitlab that lets us do a bunch

451
00:16:02,079 --> 00:16:04,079
of things i can do a get blame and

452
00:16:04,079 --> 00:16:06,639
figure out who did this thing right who

453
00:16:06,639 --> 00:16:08,880
i can check these merge requests and see

454
00:16:08,880 --> 00:16:10,720
who merged in a change that broke my

455
00:16:10,720 --> 00:16:11,680
stuff

456
00:16:11,680 --> 00:16:14,160
i can also approve things so it makes it

457
00:16:14,160 --> 00:16:16,800
easier for me as kind of a upper level

458
00:16:16,800 --> 00:16:19,759
individual contributor to farm some work

459
00:16:19,759 --> 00:16:22,160
out to my analysts so if i have a new

460
00:16:22,160 --> 00:16:24,240
analyst and i want them to get used to

461
00:16:24,240 --> 00:16:26,160
working in the aws waff

462
00:16:26,160 --> 00:16:28,959
i can have them go do merge requests to

463
00:16:28,959 --> 00:16:32,399
my library or my repository in gitlab

464
00:16:32,399 --> 00:16:34,160
and when they do those

465
00:16:34,160 --> 00:16:35,920
i have to be the approver on their merge

466
00:16:35,920 --> 00:16:38,000
requests so i can say yeah that's an

467
00:16:38,000 --> 00:16:40,079
okay thing to do you haven't compromised

468
00:16:40,079 --> 00:16:41,279
the security you've done something

469
00:16:41,279 --> 00:16:43,519
sensible i can also use terraform plan

470
00:16:43,519 --> 00:16:46,160
and say what changes will go in here i

471
00:16:46,160 --> 00:16:48,160
don't have to have them in a console

472
00:16:48,160 --> 00:16:49,920
with me like shoulder surfing telling

473
00:16:49,920 --> 00:16:52,320
them what to do i don't like doing that

474
00:16:52,320 --> 00:16:54,240
this is a much more convenient solution

475
00:16:54,240 --> 00:16:55,279
for me

476
00:16:55,279 --> 00:16:57,199
and then i can stay consistent through

477
00:16:57,199 --> 00:16:59,360
the regions if i have something built in

478
00:16:59,360 --> 00:17:02,079
us west 2 and i want it to be in us west

479
00:17:02,079 --> 00:17:06,319
1 or u.s east one i can just do that

480
00:17:06,319 --> 00:17:07,199
and

481
00:17:07,199 --> 00:17:09,599
that's also that's going to become very

482
00:17:09,599 --> 00:17:12,400
valuable later on when we talk about the

483
00:17:12,400 --> 00:17:14,880
how you deploy firewall manager policies

484
00:17:14,880 --> 00:17:16,480
in aws

485
00:17:16,480 --> 00:17:18,480
same thing if your engineers are doing

486
00:17:18,480 --> 00:17:20,240
they have a penetration test coming up

487
00:17:20,240 --> 00:17:21,839
they can just stand up a penetration

488
00:17:21,839 --> 00:17:23,280
test environment

489
00:17:23,280 --> 00:17:25,119
very easily

490
00:17:25,119 --> 00:17:27,359
so even if your engineers don't do this

491
00:17:27,359 --> 00:17:29,600
you should do it we often pilot things

492
00:17:29,600 --> 00:17:31,280
in our security team and then roll them

493
00:17:31,280 --> 00:17:33,280
out to the rest of the organization that

494
00:17:33,280 --> 00:17:35,200
way we can check these things and

495
00:17:35,200 --> 00:17:36,960
there's a reason that engineers in my

496
00:17:36,960 --> 00:17:39,039
job title

497
00:17:39,039 --> 00:17:40,799
but if your engineers already do it then

498
00:17:40,799 --> 00:17:42,799
great this is you supporting them you

499
00:17:42,799 --> 00:17:44,480
can help them build

500
00:17:44,480 --> 00:17:46,400
better systems that are more reliable

501
00:17:46,400 --> 00:17:49,120
more scalable more secure that meet your

502
00:17:49,120 --> 00:17:51,280
standards another good side effect to

503
00:17:51,280 --> 00:17:53,280
this when you write these modules to

504
00:17:53,280 --> 00:17:55,360
give to other teams that they need to

505
00:17:55,360 --> 00:17:57,520
incorporate in their

506
00:17:57,520 --> 00:17:59,280
into their applications

507
00:17:59,280 --> 00:18:01,679
you don't write stupid standards if you

508
00:18:01,679 --> 00:18:03,360
have something that's not physically

509
00:18:03,360 --> 00:18:05,120
possible to do

510
00:18:05,120 --> 00:18:06,480
i think most people have been on product

511
00:18:06,480 --> 00:18:08,799
security at some point have sent out a

512
00:18:08,799 --> 00:18:10,640
standard and then teams look at it

513
00:18:10,640 --> 00:18:12,799
they're like this isn't even possible

514
00:18:12,799 --> 00:18:15,120
what in the world are you talking about

515
00:18:15,120 --> 00:18:16,960
this can prevent us from doing that

516
00:18:16,960 --> 00:18:18,559
because if i give you two mutually

517
00:18:18,559 --> 00:18:21,120
exclusive settings to set on something

518
00:18:21,120 --> 00:18:23,280
and i go to try to build that myself and

519
00:18:23,280 --> 00:18:25,120
it doesn't work that's pretty good

520
00:18:25,120 --> 00:18:27,600
indicator that this is not a workable

521
00:18:27,600 --> 00:18:30,080
thing for my engineering teams

522
00:18:30,080 --> 00:18:31,919
you can still write dumb standards we

523
00:18:31,919 --> 00:18:33,760
still run everything by all by our

524
00:18:33,760 --> 00:18:35,600
security champions

525
00:18:35,600 --> 00:18:37,360
to try to prevent that but

526
00:18:37,360 --> 00:18:40,160
this is just another layer of helping

527
00:18:40,160 --> 00:18:42,720
next what have i done i picked the aws

528
00:18:42,720 --> 00:18:43,760
waff

529
00:18:43,760 --> 00:18:46,000
mainly because of engineering concerns

530
00:18:46,000 --> 00:18:48,240
it's very important to me not to screw

531
00:18:48,240 --> 00:18:49,760
up latencies you may have guessed from

532
00:18:49,760 --> 00:18:52,000
what i said earlier

533
00:18:52,000 --> 00:18:53,679
some of the dns based ones we were

534
00:18:53,679 --> 00:18:56,320
seeing up to 100 millisecond increase

535
00:18:56,320 --> 00:18:58,799
which was a large portion of our sla to

536
00:18:58,799 --> 00:19:01,200
respond to customer requests

537
00:19:01,200 --> 00:19:02,320
because

538
00:19:02,320 --> 00:19:03,919
remember they're like oh we can speed up

539
00:19:03,919 --> 00:19:06,559
your site but that's mainly caching and

540
00:19:06,559 --> 00:19:09,360
caching is going to work by

541
00:19:09,360 --> 00:19:11,520
they have like some edge location your

542
00:19:11,520 --> 00:19:13,360
content gets cached there and when

543
00:19:13,360 --> 00:19:14,720
somebody requests the same piece of

544
00:19:14,720 --> 00:19:16,559
content that's already been requested it

545
00:19:16,559 --> 00:19:18,160
doesn't have to go back to your server

546
00:19:18,160 --> 00:19:20,480
which is great for static content but

547
00:19:20,480 --> 00:19:23,840
it's terrible for dynamic apis first off

548
00:19:23,840 --> 00:19:25,200
you can have security problems when you

549
00:19:25,200 --> 00:19:28,000
start caching dynamic api content

550
00:19:28,000 --> 00:19:29,440
you can have availability problems where

551
00:19:29,440 --> 00:19:30,559
you're giving somebody the wrong

552
00:19:30,559 --> 00:19:33,120
information because it's cached that's a

553
00:19:33,120 --> 00:19:34,720
scary thing

554
00:19:34,720 --> 00:19:36,620
i've seen people get somebody else's

555
00:19:36,620 --> 00:19:37,760
[Music]

556
00:19:37,760 --> 00:19:40,000
some kind of like enrollment statement

557
00:19:40,000 --> 00:19:42,480
when they enrolled doing something and

558
00:19:42,480 --> 00:19:44,640
it was just called this pdf and the pdf

559
00:19:44,640 --> 00:19:46,880
was cached in a proxy somewhere and they

560
00:19:46,880 --> 00:19:49,760
pulled down somebody else's pdf so be

561
00:19:49,760 --> 00:19:51,440
very careful with

562
00:19:51,440 --> 00:19:54,320
those kinds of things and i don't i

563
00:19:54,320 --> 00:19:56,080
might make a thousand requests in a

564
00:19:56,080 --> 00:19:58,160
second to this web api

565
00:19:58,160 --> 00:19:59,919
and they're all going to be different

566
00:19:59,919 --> 00:20:02,640
things so you're better off not relying

567
00:20:02,640 --> 00:20:05,520
on that on those kinds of caching things

568
00:20:05,520 --> 00:20:07,600
as like a

569
00:20:07,600 --> 00:20:09,840
speed savings

570
00:20:09,840 --> 00:20:11,760
these are way easier to use than

571
00:20:11,760 --> 00:20:13,600
anything else that we looked at so we

572
00:20:13,600 --> 00:20:16,080
looked at trying to deploy these

573
00:20:16,080 --> 00:20:18,080
dns based wafts

574
00:20:18,080 --> 00:20:20,080
or an inline weft that's not always a

575
00:20:20,080 --> 00:20:21,679
trivial thing for the engineering teams

576
00:20:21,679 --> 00:20:23,600
to pick up

577
00:20:23,600 --> 00:20:25,840
i can use terraform and that's kind of a

578
00:20:25,840 --> 00:20:28,240
requirement for our team we terraform

579
00:20:28,240 --> 00:20:30,080
everything

580
00:20:30,080 --> 00:20:32,559
and i don't like somebody else

581
00:20:32,559 --> 00:20:35,200
having a system where if it goes down i

582
00:20:35,200 --> 00:20:37,520
can't control it because i've been in

583
00:20:37,520 --> 00:20:39,600
that situation before and it always ends

584
00:20:39,600 --> 00:20:41,600
with me sitting there by a computer with

585
00:20:41,600 --> 00:20:43,440
executives standing right behind me

586
00:20:43,440 --> 00:20:45,280
hitting like refresh on something just

587
00:20:45,280 --> 00:20:47,200
praying that a site comes back up and

588
00:20:47,200 --> 00:20:49,520
that's very uncomfortable for me i don't

589
00:20:49,520 --> 00:20:52,080
like being that person

590
00:20:52,080 --> 00:20:55,440
and the alias record for cname so alias

591
00:20:55,440 --> 00:20:57,440
is something is a type of dns record

592
00:20:57,440 --> 00:20:59,919
that aws is the only one who understands

593
00:20:59,919 --> 00:21:01,679
and they automatically update these

594
00:21:01,679 --> 00:21:03,840
records in route 53

595
00:21:03,840 --> 00:21:06,480
and if you're not aware of these updates

596
00:21:06,480 --> 00:21:08,799
you can break the site because if the ip

597
00:21:08,799 --> 00:21:11,679
addresses change if these um

598
00:21:11,679 --> 00:21:14,159
names behind their system change even if

599
00:21:14,159 --> 00:21:16,400
you try to abstract them by a layer

600
00:21:16,400 --> 00:21:19,280
it broke most of the dns based wafts so

601
00:21:19,280 --> 00:21:21,280
that was something i didn't want to have

602
00:21:21,280 --> 00:21:22,960
to deal with the engineers would be the

603
00:21:22,960 --> 00:21:25,039
ones experiencing the fallout and they

604
00:21:25,039 --> 00:21:26,240
would be calling me at two in the

605
00:21:26,240 --> 00:21:28,240
morning trying to fix these things i

606
00:21:28,240 --> 00:21:31,600
don't want to do that

607
00:21:31,600 --> 00:21:33,200
now

608
00:21:33,200 --> 00:21:35,840
the aws waff is kind of an interesting

609
00:21:35,840 --> 00:21:37,760
beast so you have these things called

610
00:21:37,760 --> 00:21:40,320
web access control lists and each web

611
00:21:40,320 --> 00:21:42,080
access control list has rules and rule

612
00:21:42,080 --> 00:21:45,760
groups attached to it

613
00:21:45,760 --> 00:21:48,799
aws supplies some managed rule sets now

614
00:21:48,799 --> 00:21:50,960
that they didn't use to supply so you

615
00:21:50,960 --> 00:21:52,559
can go in and say give me the core rule

616
00:21:52,559 --> 00:21:56,159
set give me the sql injection rule set

617
00:21:56,159 --> 00:21:58,799
and bring those in

618
00:21:58,799 --> 00:22:01,039
then you can apply web acls to certain

619
00:22:01,039 --> 00:22:02,960
types of resources

620
00:22:02,960 --> 00:22:05,120
uh application load balancers api

621
00:22:05,120 --> 00:22:08,000
gateway only version one supports

622
00:22:08,000 --> 00:22:11,360
web acls at this time so if you are if

623
00:22:11,360 --> 00:22:12,960
you have engineers trying to use version

624
00:22:12,960 --> 00:22:15,520
two that kind of sucks some of it makes

625
00:22:15,520 --> 00:22:16,720
a little bit of sense because version

626
00:22:16,720 --> 00:22:18,960
two can support things like web sockets

627
00:22:18,960 --> 00:22:21,200
but you can just have like a normal json

628
00:22:21,200 --> 00:22:22,720
based api

629
00:22:22,720 --> 00:22:25,120
and you are unable right now to apply

630
00:22:25,120 --> 00:22:27,520
web acls to it of any kind

631
00:22:27,520 --> 00:22:30,240
you also have cloudfront and the first

632
00:22:30,240 --> 00:22:31,679
two kind of go together they're what's

633
00:22:31,679 --> 00:22:33,760
called the regional policies cloudfront

634
00:22:33,760 --> 00:22:35,440
is a global policy because the way

635
00:22:35,440 --> 00:22:37,520
cloudfront is deployed to try to

636
00:22:37,520 --> 00:22:39,600
accelerate things

637
00:22:39,600 --> 00:22:41,600
so cloudfront gets its own type of

638
00:22:41,600 --> 00:22:44,000
firewall manager policy incompatible

639
00:22:44,000 --> 00:22:45,840
with the other two

640
00:22:45,840 --> 00:22:47,520
firewall manager

641
00:22:47,520 --> 00:22:50,080
gives you control of this if you've ever

642
00:22:50,080 --> 00:22:52,799
worked in in aws enterprise it's an

643
00:22:52,799 --> 00:22:54,880
interesting beast trying to manage all

644
00:22:54,880 --> 00:22:56,480
these different aws accounts they've

645
00:22:56,480 --> 00:23:00,400
given you some tools to do it but it's

646
00:23:00,400 --> 00:23:02,320
it's not simple

647
00:23:02,320 --> 00:23:04,240
firewall manager is a great tool that

648
00:23:04,240 --> 00:23:06,799
they've added to let you do that

649
00:23:06,799 --> 00:23:09,039
terraform when you go to run something

650
00:23:09,039 --> 00:23:10,960
across multiple accounts generally

651
00:23:10,960 --> 00:23:12,960
you're gonna have to get credentials to

652
00:23:12,960 --> 00:23:14,960
manipulate one account get credentials

653
00:23:14,960 --> 00:23:16,480
to manipulate another account get

654
00:23:16,480 --> 00:23:18,559
credentials to manipulate another and if

655
00:23:18,559 --> 00:23:20,880
you have a hundred aws accounts that's a

656
00:23:20,880 --> 00:23:23,120
lot of work it takes forever to roll

657
00:23:23,120 --> 00:23:26,400
these things out in a manual way

658
00:23:26,400 --> 00:23:29,280
but firewall manager lets you say i'm

659
00:23:29,280 --> 00:23:31,919
going to deploy this policy into this

660
00:23:31,919 --> 00:23:35,039
security aws account this policy will

661
00:23:35,039 --> 00:23:38,799
then create web acls in all my other aws

662
00:23:38,799 --> 00:23:39,919
accounts

663
00:23:39,919 --> 00:23:41,520
and one of the really cool things that

664
00:23:41,520 --> 00:23:43,760
firewall manager lets you do is supply

665
00:23:43,760 --> 00:23:48,000
tags so i can say find any of any

666
00:23:48,000 --> 00:23:50,320
applicable resource so i can say any alb

667
00:23:50,320 --> 00:23:54,480
or api gateway stage that has a tag of

668
00:23:54,480 --> 00:23:55,440
waff

669
00:23:55,440 --> 00:23:58,400
and the value can be a certain value

670
00:23:58,400 --> 00:24:00,159
that's based on the rule set so you can

671
00:24:00,159 --> 00:24:02,640
say all right put blocking

672
00:24:02,640 --> 00:24:04,720
in there and it will pick up a rule set

673
00:24:04,720 --> 00:24:07,039
that's called blocking and attach it

674
00:24:07,039 --> 00:24:08,640
automatically

675
00:24:08,640 --> 00:24:11,200
so that whole or sorry a web acl called

676
00:24:11,200 --> 00:24:13,520
blocking and attach it immediately which

677
00:24:13,520 --> 00:24:16,159
is really handy because your engineers

678
00:24:16,159 --> 00:24:17,919
probably work with tags if you work in

679
00:24:17,919 --> 00:24:20,720
aws and you're not using tagging i have

680
00:24:20,720 --> 00:24:22,720
i'd like to talk to you about how you're

681
00:24:22,720 --> 00:24:24,000
actually

682
00:24:24,000 --> 00:24:26,640
managing these resources because i can't

683
00:24:26,640 --> 00:24:29,279
even imagine running aws without looking

684
00:24:29,279 --> 00:24:30,960
at people's tags to figure out who owns

685
00:24:30,960 --> 00:24:33,679
this system what part of

686
00:24:33,679 --> 00:24:35,919
where this container belongs like what

687
00:24:35,919 --> 00:24:37,760
system does even support

688
00:24:37,760 --> 00:24:39,440
these questions are very difficult to

689
00:24:39,440 --> 00:24:42,000
answer if you don't have tags so odds

690
00:24:42,000 --> 00:24:44,640
are they're using it for that anyway and

691
00:24:44,640 --> 00:24:46,720
you can just have them add a tag and it

692
00:24:46,720 --> 00:24:49,120
will pick up and add the web acl so you

693
00:24:49,120 --> 00:24:51,520
don't have to manually associate to it

694
00:24:51,520 --> 00:24:53,440
so the engineering left on this is

695
00:24:53,440 --> 00:24:56,640
extremely low with firewall manager

696
00:24:56,640 --> 00:24:58,559
but it kind of looks like this i

697
00:24:58,559 --> 00:25:00,480
maintain a security account

698
00:25:00,480 --> 00:25:02,720
i have different policies and these

699
00:25:02,720 --> 00:25:03,919
policies

700
00:25:03,919 --> 00:25:06,400
say all right you need to log to this

701
00:25:06,400 --> 00:25:09,520
this s3 bucket so this policy

702
00:25:09,520 --> 00:25:12,559
goes out and it's a us west 2 policy and

703
00:25:12,559 --> 00:25:15,520
it will create one web acl in that

704
00:25:15,520 --> 00:25:18,720
account that web acl could apply to

705
00:25:18,720 --> 00:25:21,600
no load balancers one load balancer many

706
00:25:21,600 --> 00:25:23,600
load balancers

707
00:25:23,600 --> 00:25:24,640
um

708
00:25:24,640 --> 00:25:26,720
and then you have a separate one these

709
00:25:26,720 --> 00:25:29,279
are the usc one policies the u.s east

710
00:25:29,279 --> 00:25:32,320
one policies go out to usc 1 and all the

711
00:25:32,320 --> 00:25:33,840
accounts that you specify so you can

712
00:25:33,840 --> 00:25:35,279
give it a list and say all right all

713
00:25:35,279 --> 00:25:36,960
these accounts or you can just say put

714
00:25:36,960 --> 00:25:38,880
in every account that i own

715
00:25:38,880 --> 00:25:42,480
now all of these web acls will send logs

716
00:25:42,480 --> 00:25:44,799
to these buckets in the security account

717
00:25:44,799 --> 00:25:47,039
and the security account will then send

718
00:25:47,039 --> 00:25:48,799
that to a

719
00:25:48,799 --> 00:25:51,279
bucket in like a centralized logging

720
00:25:51,279 --> 00:25:53,520
account and so then you can from the

721
00:25:53,520 --> 00:25:55,200
centralized logging account you can farm

722
00:25:55,200 --> 00:25:58,159
that off to whatever sim you're using or

723
00:25:58,159 --> 00:26:00,480
wherever you want to stick your logs to

724
00:26:00,480 --> 00:26:02,640
actually look at them in a sensible way

725
00:26:02,640 --> 00:26:04,159
now you could use aurora or something

726
00:26:04,159 --> 00:26:06,720
but i wouldn't recommend it

727
00:26:06,720 --> 00:26:08,480
so that's kind of how the waff

728
00:26:08,480 --> 00:26:12,000
architecture looks

729
00:26:12,240 --> 00:26:14,400
but sometimes it kind of sucks just like

730
00:26:14,400 --> 00:26:15,679
mega man

731
00:26:15,679 --> 00:26:17,840
so the policies that you build are per

732
00:26:17,840 --> 00:26:19,679
region right so i in that picture i had

733
00:26:19,679 --> 00:26:22,960
us west 2 and usc 1 policies

734
00:26:22,960 --> 00:26:25,360
so this firewall manager system policy

735
00:26:25,360 --> 00:26:29,679
will make one acl per account per region

736
00:26:29,679 --> 00:26:30,640
and so

737
00:26:30,640 --> 00:26:32,159
if i had

738
00:26:32,159 --> 00:26:33,840
multiple

739
00:26:33,840 --> 00:26:37,279
albs pointing to a single rule set one

740
00:26:37,279 --> 00:26:38,640
of the cool things that teams are

741
00:26:38,640 --> 00:26:41,440
allowed to do is teams are allowed to

742
00:26:41,440 --> 00:26:42,240
make

743
00:26:42,240 --> 00:26:45,760
their own rules and attach them to my

744
00:26:45,760 --> 00:26:48,720
rule or to my web acls and then those

745
00:26:48,720 --> 00:26:51,039
will apply to anything in that region in

746
00:26:51,039 --> 00:26:53,679
that account which is a double-edged

747
00:26:53,679 --> 00:26:56,159
sword it's cool because teams can say

748
00:26:56,159 --> 00:26:58,240
look i have this one endpoint that

749
00:26:58,240 --> 00:27:00,240
nobody should be getting to because it's

750
00:27:00,240 --> 00:27:02,400
for some internal process or we have a

751
00:27:02,400 --> 00:27:04,320
vulnerability and we want to block

752
00:27:04,320 --> 00:27:05,919
requests that look like this going to

753
00:27:05,919 --> 00:27:09,120
this end point this is great except now

754
00:27:09,120 --> 00:27:10,720
you have to coordinate with any other

755
00:27:10,720 --> 00:27:13,200
teams so if you have the kind of aws

756
00:27:13,200 --> 00:27:15,360
account build out where you say one team

757
00:27:15,360 --> 00:27:18,080
gets one rule or one team gets one aws

758
00:27:18,080 --> 00:27:19,200
account

759
00:27:19,200 --> 00:27:20,480
then that's probably not going to be an

760
00:27:20,480 --> 00:27:22,720
issue for you but if you have these big

761
00:27:22,720 --> 00:27:25,200
like this is my prod aws account

762
00:27:25,200 --> 00:27:27,279
everything prod lives there

763
00:27:27,279 --> 00:27:29,520
you are unable to roll out very specific

764
00:27:29,520 --> 00:27:32,320
rules without rolling out extra firewall

765
00:27:32,320 --> 00:27:35,120
manager policies which gets expensive as

766
00:27:35,120 --> 00:27:38,000
we'll discuss later

767
00:27:38,000 --> 00:27:40,720
but the specific rules become complex

768
00:27:40,720 --> 00:27:42,799
and we'll talk about what a complex rule

769
00:27:42,799 --> 00:27:45,279
looks like a little bit later and why

770
00:27:45,279 --> 00:27:47,600
it's confusing

771
00:27:47,600 --> 00:27:49,279
i never got logging

772
00:27:49,279 --> 00:27:52,000
direct logging to work across account so

773
00:27:52,000 --> 00:27:53,360
that's why i have

774
00:27:53,360 --> 00:27:56,000
replication set up to move logs from one

775
00:27:56,000 --> 00:27:57,760
bucket to another

776
00:27:57,760 --> 00:27:59,760
this uses kinesis fire hose in the

777
00:27:59,760 --> 00:28:03,279
background and nothing worked for

778
00:28:03,279 --> 00:28:05,840
logging using kinesis fire hose as soon

779
00:28:05,840 --> 00:28:07,600
as you turned on at rest encryption on

780
00:28:07,600 --> 00:28:10,320
your s3 buckets which probably if it's

781
00:28:10,320 --> 00:28:12,080
not a requirement that your s3 pockets

782
00:28:12,080 --> 00:28:14,159
are encrypted at rest it probably should

783
00:28:14,159 --> 00:28:16,880
be because most customers ask about that

784
00:28:16,880 --> 00:28:19,039
kind of thing

785
00:28:19,039 --> 00:28:21,120
so i ended up having to use cross

786
00:28:21,120 --> 00:28:23,279
account replication to get the logs to

787
00:28:23,279 --> 00:28:24,960
where i needed them to be

788
00:28:24,960 --> 00:28:26,159
which

789
00:28:26,159 --> 00:28:28,399
there's some definitely going to be some

790
00:28:28,399 --> 00:28:30,320
costs associated with moving those logs

791
00:28:30,320 --> 00:28:31,760
around

792
00:28:31,760 --> 00:28:33,679
you can't see inside these managed rule

793
00:28:33,679 --> 00:28:35,600
groups very well you know when we talk

794
00:28:35,600 --> 00:28:36,799
about managed rule groups in a little

795
00:28:36,799 --> 00:28:37,919
bit

796
00:28:37,919 --> 00:28:39,360
you'll see where these are kind of

797
00:28:39,360 --> 00:28:42,080
lacking sometimes in information

798
00:28:42,080 --> 00:28:43,760
disabling rules doesn't reduce the

799
00:28:43,760 --> 00:28:45,919
amount of web content units you use so

800
00:28:45,919 --> 00:28:49,919
every web acl gets 1500 web content

801
00:28:49,919 --> 00:28:51,840
units that you can put on it i think you

802
00:28:51,840 --> 00:28:55,679
can increase it by contacting aws but

803
00:28:55,679 --> 00:28:57,840
if you have a managed rule group that

804
00:28:57,840 --> 00:29:01,279
has 700 web content units it consumes

805
00:29:01,279 --> 00:29:02,960
and then you take that managed rule

806
00:29:02,960 --> 00:29:04,720
group and you say well look this rule

807
00:29:04,720 --> 00:29:06,000
false positives all the time i'm going

808
00:29:06,000 --> 00:29:07,760
to disable it

809
00:29:07,760 --> 00:29:10,880
then you don't recoup those web content

810
00:29:10,880 --> 00:29:12,399
units from those rules you turned off

811
00:29:12,399 --> 00:29:14,320
they're just gone

812
00:29:14,320 --> 00:29:16,720
so then if you go to implement that

813
00:29:16,720 --> 00:29:18,080
similar rule

814
00:29:18,080 --> 00:29:21,279
you will run yourself out of um

815
00:29:21,279 --> 00:29:23,919
out of web content units which is kind

816
00:29:23,919 --> 00:29:27,279
of sucky right and oftentimes you're

817
00:29:27,279 --> 00:29:28,960
going to turn off a lot of rules when

818
00:29:28,960 --> 00:29:30,960
you're doing tuning with the aws waff

819
00:29:30,960 --> 00:29:32,559
and we'll talk about that in just a

820
00:29:32,559 --> 00:29:34,159
second

821
00:29:34,159 --> 00:29:35,440
and then you have the cloudfront versus

822
00:29:35,440 --> 00:29:36,720
regional policies we already talked

823
00:29:36,720 --> 00:29:37,919
about

824
00:29:37,919 --> 00:29:40,640
the rules are super aggressive super

825
00:29:40,640 --> 00:29:42,799
aggressive um

826
00:29:42,799 --> 00:29:44,880
we got false positives on just about

827
00:29:44,880 --> 00:29:47,200
everything um for specifically like

828
00:29:47,200 --> 00:29:50,000
cross-site scripting and sql injection

829
00:29:50,000 --> 00:29:52,159
anything if it was a post request with a

830
00:29:52,159 --> 00:29:54,480
pdf somebody was uploading a pdf

831
00:29:54,480 --> 00:29:56,080
there was no way that was going through

832
00:29:56,080 --> 00:29:58,240
it always blocked it

833
00:29:58,240 --> 00:30:00,960
xml and html tags

834
00:30:00,960 --> 00:30:02,720
came across as cross-site scripting

835
00:30:02,720 --> 00:30:04,880
almost all the time and yeah it does

836
00:30:04,880 --> 00:30:06,640
look kind of questionable i could see

837
00:30:06,640 --> 00:30:08,320
where it matched cross-state scripting

838
00:30:08,320 --> 00:30:10,799
but there's no way to say here's a rule

839
00:30:10,799 --> 00:30:13,039
for cross-aid scripting in this xml

840
00:30:13,039 --> 00:30:15,760
document it's not going to happen

841
00:30:15,760 --> 00:30:18,480
you'd have to write some custom

842
00:30:18,480 --> 00:30:21,840
regular expressions that you do

843
00:30:21,840 --> 00:30:24,799
base64 encoded stuff tripped all kinds

844
00:30:24,799 --> 00:30:26,960
of rules and so if you have a lot of

845
00:30:26,960 --> 00:30:29,760
base64 encoded content those default

846
00:30:29,760 --> 00:30:31,760
rules will probably give you uh some

847
00:30:31,760 --> 00:30:33,200
heartburn

848
00:30:33,200 --> 00:30:35,679
you they block things like no user agent

849
00:30:35,679 --> 00:30:37,279
header i was like well that's kind of a

850
00:30:37,279 --> 00:30:39,120
silly one right i don't want to i don't

851
00:30:39,120 --> 00:30:41,600
want to be responsible for doing that

852
00:30:41,600 --> 00:30:44,559
because we have a lot of

853
00:30:44,640 --> 00:30:47,200
we have a lot of apis and when people

854
00:30:47,200 --> 00:30:49,200
request apis maybe they don't send a

855
00:30:49,200 --> 00:30:50,640
user agent header that's okay they're

856
00:30:50,640 --> 00:30:52,720
not using a web browser

857
00:30:52,720 --> 00:30:54,720
and then we have size restrictions

858
00:30:54,720 --> 00:30:56,559
that's impossible to know across your

859
00:30:56,559 --> 00:30:58,240
organization i don't ever want to be in

860
00:30:58,240 --> 00:31:00,000
the position where i'm managing size of

861
00:31:00,000 --> 00:31:03,600
requests coming across to my engineers

862
00:31:03,600 --> 00:31:05,760
that's something that they should own i

863
00:31:05,760 --> 00:31:07,200
don't want to be there for them breaking

864
00:31:07,200 --> 00:31:09,200
it because even if i'm right today they

865
00:31:09,200 --> 00:31:11,200
would have to coordinate with me if they

866
00:31:11,200 --> 00:31:13,039
want to increase their request size in

867
00:31:13,039 --> 00:31:14,240
the future

868
00:31:14,240 --> 00:31:18,080
you don't want to be in that business

869
00:31:18,080 --> 00:31:19,840
me making this

870
00:31:19,840 --> 00:31:22,799
it was not a fun experience for me um

871
00:31:22,799 --> 00:31:24,559
our team always uses infrastructure as

872
00:31:24,559 --> 00:31:26,880
code so we use terraform to build this

873
00:31:26,880 --> 00:31:29,840
out to match what engineering does

874
00:31:29,840 --> 00:31:31,760
we definitely want the aws firewall

875
00:31:31,760 --> 00:31:32,880
manager

876
00:31:32,880 --> 00:31:35,600
it was so much easier for engineers to

877
00:31:35,600 --> 00:31:37,760
onboard with firewall manager and so

878
00:31:37,760 --> 00:31:41,200
much easier for me to manage these rules

879
00:31:41,200 --> 00:31:44,159
then i can't imagine trying to do this

880
00:31:44,159 --> 00:31:45,679
without it

881
00:31:45,679 --> 00:31:47,919
it would not go well

882
00:31:47,919 --> 00:31:51,600
and i like the idea that i could run

883
00:31:51,600 --> 00:31:54,480
all my rules for one region in one place

884
00:31:54,480 --> 00:31:56,000
and then it went out to every account

885
00:31:56,000 --> 00:31:57,760
and i didn't sit there and micromanage

886
00:31:57,760 --> 00:31:58,559
it

887
00:31:58,559 --> 00:32:00,000
so

888
00:32:00,000 --> 00:32:01,840
this gets kind of expensive though it

889
00:32:01,840 --> 00:32:03,919
was a hundred dollars per policy per

890
00:32:03,919 --> 00:32:05,919
month talk about where that got a little

891
00:32:05,919 --> 00:32:07,440
ridiculous

892
00:32:07,440 --> 00:32:09,200
but i like the idea that teams could

893
00:32:09,200 --> 00:32:11,039
make their own rule sets and then attach

894
00:32:11,039 --> 00:32:14,000
them to that web acl without overriding

895
00:32:14,000 --> 00:32:15,679
central policy so there is no way for

896
00:32:15,679 --> 00:32:18,240
them to say oh except for this request

897
00:32:18,240 --> 00:32:19,840
allow this request

898
00:32:19,840 --> 00:32:20,880
because then you have to worry about

899
00:32:20,880 --> 00:32:23,120
teams punching holes in in your rules

900
00:32:23,120 --> 00:32:25,440
side so i liked the idea that i didn't

901
00:32:25,440 --> 00:32:28,880
have to worry about that

902
00:32:28,880 --> 00:32:31,360
with any aws policy like aws is great

903
00:32:31,360 --> 00:32:33,600
because it's always making new things

904
00:32:33,600 --> 00:32:35,440
but when you try to use a new thing that

905
00:32:35,440 --> 00:32:38,480
aws puts out like version one of things

906
00:32:38,480 --> 00:32:40,640
is sometimes rough

907
00:32:40,640 --> 00:32:42,720
it's not going to be fully supported and

908
00:32:42,720 --> 00:32:44,559
fully baked by the time you start

909
00:32:44,559 --> 00:32:46,159
working on it if you're like oh hey this

910
00:32:46,159 --> 00:32:47,679
new thing just dropped let me start

911
00:32:47,679 --> 00:32:49,760
using it in production it may not go

912
00:32:49,760 --> 00:32:52,159
super great for you

913
00:32:52,159 --> 00:32:54,880
and firewall manager was too new for

914
00:32:54,880 --> 00:32:57,120
good support for infrastructure as code

915
00:32:57,120 --> 00:32:59,440
so terraform had zero support for

916
00:32:59,440 --> 00:33:01,279
firewall manager policies when i started

917
00:33:01,279 --> 00:33:04,080
doing this project they do now

918
00:33:04,080 --> 00:33:05,679
so instead i was like well let me use

919
00:33:05,679 --> 00:33:07,840
cloud formation aws makes cloud

920
00:33:07,840 --> 00:33:11,600
formation surely this will work properly

921
00:33:11,600 --> 00:33:13,840
and it worked perfect for

922
00:33:13,840 --> 00:33:16,480
albs but as soon as i tried to add api

923
00:33:16,480 --> 00:33:19,039
gateway support it did not work

924
00:33:19,039 --> 00:33:21,039
so that specific it would just say

925
00:33:21,039 --> 00:33:23,039
that's an invalid

926
00:33:23,039 --> 00:33:25,279
target so you couldn't do that

927
00:33:25,279 --> 00:33:28,000
the aws command line did work so i could

928
00:33:28,000 --> 00:33:30,720
take the same json that i would have put

929
00:33:30,720 --> 00:33:32,559
in there through cloud formation and i

930
00:33:32,559 --> 00:33:34,320
could run that from the command line and

931
00:33:34,320 --> 00:33:36,559
that worked just fine so what i did was

932
00:33:36,559 --> 00:33:39,200
use i had to phone a friend my friend io

933
00:33:39,200 --> 00:33:41,679
came and helped me and wrote the

934
00:33:41,679 --> 00:33:43,200
help me write some terraform that

935
00:33:43,200 --> 00:33:45,760
generated the json that then i could use

936
00:33:45,760 --> 00:33:49,600
aws cli to push up to um

937
00:33:49,600 --> 00:33:51,679
to push up to aws and push my rule sets

938
00:33:51,679 --> 00:33:52,960
that way

939
00:33:52,960 --> 00:33:54,320
but

940
00:33:54,320 --> 00:33:59,200
it generated one json file per policy

941
00:33:59,200 --> 00:34:02,880
per region so if you had 10 policies and

942
00:34:02,880 --> 00:34:06,240
10 regions you had to go run 100 clis

943
00:34:06,240 --> 00:34:08,719
cli commands to push that out

944
00:34:08,719 --> 00:34:10,719
so i started working on a go script to

945
00:34:10,719 --> 00:34:13,599
do it but when i was working in go

946
00:34:13,599 --> 00:34:15,760
a go go program to do it when i started

947
00:34:15,760 --> 00:34:17,918
working in go

948
00:34:17,918 --> 00:34:19,199
they actually came out with terraform

949
00:34:19,199 --> 00:34:21,359
support and completely obviated the need

950
00:34:21,359 --> 00:34:22,719
for it so

951
00:34:22,719 --> 00:34:23,839
that's something to keep in mind when

952
00:34:23,839 --> 00:34:25,440
you're working with these brand new

953
00:34:25,440 --> 00:34:27,440
solutions you might go off on this

954
00:34:27,440 --> 00:34:29,280
tangent automating this stuff because

955
00:34:29,280 --> 00:34:30,480
you're like oh well it doesn't do this

956
00:34:30,480 --> 00:34:33,040
thing and aws knows it doesn't do that

957
00:34:33,040 --> 00:34:34,719
thing or terraform somebody's got like a

958
00:34:34,719 --> 00:34:36,800
merge request in to the main terraform

959
00:34:36,800 --> 00:34:39,440
line to get support for that in the in

960
00:34:39,440 --> 00:34:42,239
the provider so keep in mind before you

961
00:34:42,239 --> 00:34:43,760
go down a rabbit hole doing a ton of

962
00:34:43,760 --> 00:34:45,520
automation in aws

963
00:34:45,520 --> 00:34:47,760
you may not need to do that if it's

964
00:34:47,760 --> 00:34:48,800
going to take you three months to

965
00:34:48,800 --> 00:34:49,839
implement

966
00:34:49,839 --> 00:34:51,839
and roll this out and aws is gonna have

967
00:34:51,839 --> 00:34:53,359
support and two

968
00:34:53,359 --> 00:34:56,079
well then you just wasted your time

969
00:34:56,079 --> 00:34:57,920
we also ran into a weird bug with orphan

970
00:34:57,920 --> 00:35:00,560
policies so the policies would get

971
00:35:00,560 --> 00:35:02,320
created and then when you went to go

972
00:35:02,320 --> 00:35:04,720
push a new version of the policy it

973
00:35:04,720 --> 00:35:06,000
would

974
00:35:06,000 --> 00:35:07,920
delete the policy but none of the

975
00:35:07,920 --> 00:35:09,920
associated web acls and you would keep

976
00:35:09,920 --> 00:35:11,920
getting charged for those web acls which

977
00:35:11,920 --> 00:35:14,079
no longer had rules and could never be

978
00:35:14,079 --> 00:35:16,720
deleted so we had to contact aws and

979
00:35:16,720 --> 00:35:18,960
have aws delete those i don't know what

980
00:35:18,960 --> 00:35:20,960
you do if you don't have like high tier

981
00:35:20,960 --> 00:35:23,599
aws support with your people helping you

982
00:35:23,599 --> 00:35:25,280
out you'll probably never be able to do

983
00:35:25,280 --> 00:35:26,560
it

984
00:35:26,560 --> 00:35:29,440
so something to be cognizant of

985
00:35:29,440 --> 00:35:31,920
hopefully they fixed that by now but i

986
00:35:31,920 --> 00:35:33,280
really like the ability to apply

987
00:35:33,280 --> 00:35:35,839
firewall manager policies using tags it

988
00:35:35,839 --> 00:35:37,359
was so easy and i didn't have to worry

989
00:35:37,359 --> 00:35:39,200
about drift with people modifying my

990
00:35:39,200 --> 00:35:42,400
stuff i could control it all myself

991
00:35:42,400 --> 00:35:44,400
if i wanted to i could have built that

992
00:35:44,400 --> 00:35:46,480
myself using terraform and lambda

993
00:35:46,480 --> 00:35:48,720
functions trying to save money but that

994
00:35:48,720 --> 00:35:50,000
would have been a very unpleasant

995
00:35:50,000 --> 00:35:52,640
experience

996
00:35:53,040 --> 00:35:55,280
so next we have complex rules so when

997
00:35:55,280 --> 00:35:58,320
you look at aws rules

998
00:35:58,320 --> 00:36:00,320
the gui for them is not great if you

999
00:36:00,320 --> 00:36:02,480
want to do something very specific you

1000
00:36:02,480 --> 00:36:05,040
can make these rules and you can use and

1001
00:36:05,040 --> 00:36:08,960
or and not well you can use and or or

1002
00:36:08,960 --> 00:36:11,839
not you cannot use multiples of these at

1003
00:36:11,839 --> 00:36:14,160
the same time in the same rule it will

1004
00:36:14,160 --> 00:36:15,200
not work

1005
00:36:15,200 --> 00:36:16,560
in the gui

1006
00:36:16,560 --> 00:36:18,720
but if you want to hand jam out some

1007
00:36:18,720 --> 00:36:20,960
json you can do that

1008
00:36:20,960 --> 00:36:22,640
so that's what i ended up doing because

1009
00:36:22,640 --> 00:36:25,280
it's all json to me anyway because i'm

1010
00:36:25,280 --> 00:36:27,440
gonna have to put it into terraform

1011
00:36:27,440 --> 00:36:29,440
but you can go in and start building out

1012
00:36:29,440 --> 00:36:32,400
your rule in the um

1013
00:36:32,400 --> 00:36:34,640
in the gui and then

1014
00:36:34,640 --> 00:36:36,960
switch over and look at the json in the

1015
00:36:36,960 --> 00:36:39,680
gui and copy that out and then add in

1016
00:36:39,680 --> 00:36:42,000
your nested statements and then you can

1017
00:36:42,000 --> 00:36:45,280
write more complex rules

1018
00:36:45,920 --> 00:36:47,920
but some of the examples for these would

1019
00:36:47,920 --> 00:36:48,800
be

1020
00:36:48,800 --> 00:36:51,839
source ip is not in this ip list

1021
00:36:51,839 --> 00:36:55,040
and the body has some kind of text in it

1022
00:36:55,040 --> 00:36:57,119
that might be something that we want to

1023
00:36:57,119 --> 00:36:59,520
block so only certain ips are allowed to

1024
00:36:59,520 --> 00:37:01,680
send these kinds of requests to this

1025
00:37:01,680 --> 00:37:02,960
system

1026
00:37:02,960 --> 00:37:04,800
and that is not something you can do in

1027
00:37:04,800 --> 00:37:07,280
the gui you have to do that

1028
00:37:07,280 --> 00:37:09,760
with json

1029
00:37:09,760 --> 00:37:13,119
and that really became common with not

1030
00:37:13,119 --> 00:37:15,359
where you wanted to exempt a specific

1031
00:37:15,359 --> 00:37:18,480
parameter or a specific type of request

1032
00:37:18,480 --> 00:37:19,680
from that

1033
00:37:19,680 --> 00:37:22,240
specific endpoint

1034
00:37:22,240 --> 00:37:24,079
so this is what the other part was so

1035
00:37:24,079 --> 00:37:26,160
the this was like one continuation so

1036
00:37:26,160 --> 00:37:28,640
you can do that first part you pick and

1037
00:37:28,640 --> 00:37:30,000
and then you get the second part but

1038
00:37:30,000 --> 00:37:32,079
there's no way to pick a not on the

1039
00:37:32,079 --> 00:37:34,800
second part

1040
00:37:34,800 --> 00:37:36,960
but if you pick json this is what it

1041
00:37:36,960 --> 00:37:39,440
transforms into you can take that out

1042
00:37:39,440 --> 00:37:41,280
and then maybe i want to stick a knot in

1043
00:37:41,280 --> 00:37:42,800
front of the statement and i can

1044
00:37:42,800 --> 00:37:44,640
certainly go do that and nest these all

1045
00:37:44,640 --> 00:37:47,440
i want once you're in the well i haven't

1046
00:37:47,440 --> 00:37:50,000
done a limit yet of nesting inside the

1047
00:37:50,000 --> 00:37:51,040
json

1048
00:37:51,040 --> 00:37:53,599
but then your hand is artisanally

1049
00:37:53,599 --> 00:37:56,640
handcrafted json and that's uh

1050
00:37:56,640 --> 00:37:59,920
that's not fun for some people

1051
00:38:00,079 --> 00:38:02,160
we have to do some billing hacks on this

1052
00:38:02,160 --> 00:38:03,839
so if you have like 10 policies you want

1053
00:38:03,839 --> 00:38:05,920
to push out and you have five regions

1054
00:38:05,920 --> 00:38:07,440
that you're using in all your aws

1055
00:38:07,440 --> 00:38:08,400
accounts

1056
00:38:08,400 --> 00:38:10,160
and each one of those is going to be a

1057
00:38:10,160 --> 00:38:12,000
hundred dollars that's five grand a

1058
00:38:12,000 --> 00:38:14,640
month just in the fms policies not data

1059
00:38:14,640 --> 00:38:17,359
transfer or web acl costs

1060
00:38:17,359 --> 00:38:20,720
now if you have 10 non-blocking and 10

1061
00:38:20,720 --> 00:38:23,599
blocking rules and 10 regions now you're

1062
00:38:23,599 --> 00:38:26,640
looking at like 20 grand a month just in

1063
00:38:26,640 --> 00:38:29,440
the firewall manager costs

1064
00:38:29,440 --> 00:38:32,480
which is brutal right and some of these

1065
00:38:32,480 --> 00:38:34,079
like people may not even be using

1066
00:38:34,079 --> 00:38:35,680
certain regions and if you push stuff

1067
00:38:35,680 --> 00:38:38,000
out there now you're paying this so if

1068
00:38:38,000 --> 00:38:39,520
only certain teams are using certain

1069
00:38:39,520 --> 00:38:41,280
regions you can't get a lot of cost

1070
00:38:41,280 --> 00:38:44,000
savings there

1071
00:38:44,400 --> 00:38:47,680
so that got really expensive really fast

1072
00:38:47,680 --> 00:38:49,920
but shield advanced so if you subscribe

1073
00:38:49,920 --> 00:38:52,079
to shield advanced their ddos mitigation

1074
00:38:52,079 --> 00:38:52,960
thing

1075
00:38:52,960 --> 00:38:53,760
um

1076
00:38:53,760 --> 00:38:55,680
then the licensing because or the cost

1077
00:38:55,680 --> 00:38:58,400
becomes a little more friendly because

1078
00:38:58,400 --> 00:39:00,560
yeah you'll get transfer costs by

1079
00:39:00,560 --> 00:39:02,800
applying shield but you save on these

1080
00:39:02,800 --> 00:39:04,880
kind of waffle costs you can

1081
00:39:04,880 --> 00:39:07,200
associate these fms policies and web

1082
00:39:07,200 --> 00:39:10,160
acls with shield advanced and when you

1083
00:39:10,160 --> 00:39:15,200
do that they're supposedly free right or

1084
00:39:15,200 --> 00:39:18,480
you aren't paying for that specific uh

1085
00:39:18,480 --> 00:39:21,040
firewall manager policy

1086
00:39:21,040 --> 00:39:22,720
i'm still validating that one but that

1087
00:39:22,720 --> 00:39:25,040
is the word that i got from the aws team

1088
00:39:25,040 --> 00:39:27,599
and you can go look they have an amazon

1089
00:39:27,599 --> 00:39:29,200
blog that they put out

1090
00:39:29,200 --> 00:39:30,880
on how to estimate this stuff that would

1091
00:39:30,880 --> 00:39:32,560
have been super helpful if it had

1092
00:39:32,560 --> 00:39:36,240
existed when i started doing this

1093
00:39:36,480 --> 00:39:39,040
and then waft tuning so all wafts are

1094
00:39:39,040 --> 00:39:40,960
going to be garbage when you first turn

1095
00:39:40,960 --> 00:39:42,960
them on everything

1096
00:39:42,960 --> 00:39:45,280
when you start rolling these out i

1097
00:39:45,280 --> 00:39:47,920
highly advise doing

1098
00:39:47,920 --> 00:39:50,079
non-blocking on your production systems

1099
00:39:50,079 --> 00:39:51,920
so what i had teams do was roll out a

1100
00:39:51,920 --> 00:39:53,440
blocking rule set

1101
00:39:53,440 --> 00:39:55,760
for their lower environments and then

1102
00:39:55,760 --> 00:39:57,359
all teams hopefully have good

1103
00:39:57,359 --> 00:40:00,560
integration tests so they will

1104
00:40:00,560 --> 00:40:02,160
turn on blocking in a lower environment

1105
00:40:02,160 --> 00:40:04,000
run their integration tests see what

1106
00:40:04,000 --> 00:40:06,400
gets blocked if they block something

1107
00:40:06,400 --> 00:40:07,280
then

1108
00:40:07,280 --> 00:40:08,960
i have to go look it's probably going to

1109
00:40:08,960 --> 00:40:11,520
be a false positive because it's from

1110
00:40:11,520 --> 00:40:13,599
their functional integration tests i

1111
00:40:13,599 --> 00:40:14,960
need to go and figure out what to do

1112
00:40:14,960 --> 00:40:17,359
about that

1113
00:40:17,520 --> 00:40:18,960
some things to keep in mind make sure

1114
00:40:18,960 --> 00:40:21,040
you know who owns what apps that's

1115
00:40:21,040 --> 00:40:23,200
critical control number one on the cis

1116
00:40:23,200 --> 00:40:25,119
critical controls for a reason

1117
00:40:25,119 --> 00:40:27,760
so then you go and look at prod once you

1118
00:40:27,760 --> 00:40:30,960
get through and your all their

1119
00:40:30,960 --> 00:40:32,560
integration tests pass in the lower

1120
00:40:32,560 --> 00:40:34,480
environment with blocking rules

1121
00:40:34,480 --> 00:40:36,720
put non-blocking in production then look

1122
00:40:36,720 --> 00:40:39,040
at what production does see what's

1123
00:40:39,040 --> 00:40:41,280
happening don't block in production yet

1124
00:40:41,280 --> 00:40:43,280
because sometimes integration tests are

1125
00:40:43,280 --> 00:40:45,200
not complete

1126
00:40:45,200 --> 00:40:47,040
so you want to see what customers are

1127
00:40:47,040 --> 00:40:49,040
doing that's different from what's

1128
00:40:49,040 --> 00:40:50,480
actually happening on your integration

1129
00:40:50,480 --> 00:40:52,240
test is a good opportunity to improve

1130
00:40:52,240 --> 00:40:54,319
your integration test too

1131
00:40:54,319 --> 00:40:55,680
but then i would take like the top

1132
00:40:55,680 --> 00:40:57,920
events and the bottom event so top ones

1133
00:40:57,920 --> 00:40:59,280
by volume

1134
00:40:59,280 --> 00:41:01,200
and say look i've got like a ton of

1135
00:41:01,200 --> 00:41:03,440
these coming in all the time these are

1136
00:41:03,440 --> 00:41:04,880
probably going to be false positives

1137
00:41:04,880 --> 00:41:06,480
because there's so many of them unless i

1138
00:41:06,480 --> 00:41:08,560
got like a scan or something

1139
00:41:08,560 --> 00:41:11,200
and then bottom events

1140
00:41:11,200 --> 00:41:12,960
go and do like long tail analysis you

1141
00:41:12,960 --> 00:41:14,319
say well this is like a weird thing

1142
00:41:14,319 --> 00:41:15,839
that's happening on the site so i picked

1143
00:41:15,839 --> 00:41:18,160
a couple a day and go through those then

1144
00:41:18,160 --> 00:41:20,480
you either disable that rule and come up

1145
00:41:20,480 --> 00:41:22,240
with a compensating rule

1146
00:41:22,240 --> 00:41:25,759
or you take that rule and tune it

1147
00:41:26,720 --> 00:41:28,640
some metrics that i found to be helpful

1148
00:41:28,640 --> 00:41:30,480
for waff adoption

1149
00:41:30,480 --> 00:41:33,280
so or waffs i have two phases for any

1150
00:41:33,280 --> 00:41:35,200
time i roll out something adoption and

1151
00:41:35,200 --> 00:41:37,520
efficacy so we want to make sure people

1152
00:41:37,520 --> 00:41:39,119
are using the thing then we want to make

1153
00:41:39,119 --> 00:41:41,200
sure the thing is working so the

1154
00:41:41,200 --> 00:41:43,200
adoption ones are all around is somebody

1155
00:41:43,200 --> 00:41:44,560
using this are they blocking are they

1156
00:41:44,560 --> 00:41:46,560
doing whatever traffic flow i want to

1157
00:41:46,560 --> 00:41:48,800
know because if my traffic flow just

1158
00:41:48,800 --> 00:41:52,160
drops off odds are something is broken

1159
00:41:52,160 --> 00:41:54,079
if my traffic flow goes way up maybe

1160
00:41:54,079 --> 00:41:56,240
somebody on board a new site right so

1161
00:41:56,240 --> 00:41:57,440
you've got to look at that though and

1162
00:41:57,440 --> 00:41:59,599
figure out what's going on here

1163
00:41:59,599 --> 00:42:01,839
efficacy so then you want to make sure

1164
00:42:01,839 --> 00:42:03,760
this thing is actually working and you

1165
00:42:03,760 --> 00:42:05,280
might say rebecca how do i know if

1166
00:42:05,280 --> 00:42:06,480
something's false positive or too

1167
00:42:06,480 --> 00:42:08,240
positive or it's false negative how am i

1168
00:42:08,240 --> 00:42:09,520
going to know a false negative because i

1169
00:42:09,520 --> 00:42:12,400
didn't alert well this data should come

1170
00:42:12,400 --> 00:42:14,720
from your cert right when your incident

1171
00:42:14,720 --> 00:42:16,560
response team goes to respond to

1172
00:42:16,560 --> 00:42:17,760
something

1173
00:42:17,760 --> 00:42:19,040
and they're like oh this was a false

1174
00:42:19,040 --> 00:42:21,680
positive now you have normalized that

1175
00:42:21,680 --> 00:42:23,440
data if there were a hundred thousand

1176
00:42:23,440 --> 00:42:25,440
requests that were all false positive

1177
00:42:25,440 --> 00:42:27,280
that becomes one incident they

1178
00:42:27,280 --> 00:42:29,599
investigated that was a false positive

1179
00:42:29,599 --> 00:42:31,280
if they investigated it and it was a

1180
00:42:31,280 --> 00:42:32,960
true positive that becomes one true

1181
00:42:32,960 --> 00:42:34,560
positive great

1182
00:42:34,560 --> 00:42:36,640
if it was a false negative so if they

1183
00:42:36,640 --> 00:42:38,720
were handling an incident and they said

1184
00:42:38,720 --> 00:42:40,960
gosh if the waff had only been tuned

1185
00:42:40,960 --> 00:42:42,000
right

1186
00:42:42,000 --> 00:42:44,160
this would not have happened we wouldn't

1187
00:42:44,160 --> 00:42:46,160
have had this incident and that's super

1188
00:42:46,160 --> 00:42:47,680
valuable because now you roll that in

1189
00:42:47,680 --> 00:42:49,680
continuous improvement build a new rule

1190
00:42:49,680 --> 00:42:50,880
and make sure you don't make that

1191
00:42:50,880 --> 00:42:53,119
mistake again and then you should see

1192
00:42:53,119 --> 00:42:55,440
false negatives and false positives

1193
00:42:55,440 --> 00:42:57,680
dropping off over time and two positives

1194
00:42:57,680 --> 00:42:59,280
going up

1195
00:42:59,280 --> 00:43:00,160
so

1196
00:43:00,160 --> 00:43:02,400
that's what your metric should look like

1197
00:43:02,400 --> 00:43:04,720
some example logs that we have here

1198
00:43:04,720 --> 00:43:06,960
so this is what an aws log looks like

1199
00:43:06,960 --> 00:43:09,200
it's horribly unfriendly

1200
00:43:09,200 --> 00:43:11,680
but you have something like in this case

1201
00:43:11,680 --> 00:43:13,520
we had to disable the sql injection and

1202
00:43:13,520 --> 00:43:16,400
that's why this argument didn't trip it

1203
00:43:16,400 --> 00:43:18,000
but you can see here it made it through

1204
00:43:18,000 --> 00:43:20,560
the default action and that was to allow

1205
00:43:20,560 --> 00:43:23,440
this request

1206
00:43:23,440 --> 00:43:25,119
if we go over here

1207
00:43:25,119 --> 00:43:29,359
we have action of blocking so here this

1208
00:43:29,359 --> 00:43:30,960
means that that request was not

1209
00:43:30,960 --> 00:43:32,000
permitted

1210
00:43:32,000 --> 00:43:33,599
then you have to look for terminating

1211
00:43:33,599 --> 00:43:36,319
rule then you look for the rule id it's

1212
00:43:36,319 --> 00:43:38,480
this bad bot's header so that's the way

1213
00:43:38,480 --> 00:43:40,880
we that way we know what rule tripped it

1214
00:43:40,880 --> 00:43:43,440
and the bad bot header i can go look at

1215
00:43:43,440 --> 00:43:44,150
the um

1216
00:43:44,150 --> 00:43:45,760
[Music]

1217
00:43:45,760 --> 00:43:48,160
user agent header and see what it was

1218
00:43:48,160 --> 00:43:50,240
and they were using z grab so that's

1219
00:43:50,240 --> 00:43:51,520
probably a true positive that should

1220
00:43:51,520 --> 00:43:54,079
have been blocked

1221
00:43:54,079 --> 00:43:56,160
for cross-site scripting blocking

1222
00:43:56,160 --> 00:43:59,280
this is what it looks like

1223
00:43:59,280 --> 00:44:01,119
and sql injection is going to look kind

1224
00:44:01,119 --> 00:44:02,400
of similar

1225
00:44:02,400 --> 00:44:04,960
so you get a terminating rule with a

1226
00:44:04,960 --> 00:44:06,000
block

1227
00:44:06,000 --> 00:44:08,400
terminating rule match details so this

1228
00:44:08,400 --> 00:44:10,160
is why did this

1229
00:44:10,160 --> 00:44:13,280
block this request it says i found xss

1230
00:44:13,280 --> 00:44:15,520
in the body of this request and this is

1231
00:44:15,520 --> 00:44:18,640
the specific string that made me upset

1232
00:44:18,640 --> 00:44:20,079
you can't see what the regular

1233
00:44:20,079 --> 00:44:22,400
expression was to trip this you cannot

1234
00:44:22,400 --> 00:44:23,839
disable this

1235
00:44:23,839 --> 00:44:25,440
or you can't manipulate that regular

1236
00:44:25,440 --> 00:44:28,800
expression all you know is aws decided

1237
00:44:28,800 --> 00:44:32,480
this had cross-site scripting there

1238
00:44:32,480 --> 00:44:34,240
and you can see that it specifically

1239
00:44:34,240 --> 00:44:36,480
trip cross-site scripting body so if you

1240
00:44:36,480 --> 00:44:37,599
wanted to

1241
00:44:37,599 --> 00:44:38,800
permit this

1242
00:44:38,800 --> 00:44:40,720
then you would have to go in and disable

1243
00:44:40,720 --> 00:44:42,800
cross-site scripting in the body which

1244
00:44:42,800 --> 00:44:44,079
is something that made me very

1245
00:44:44,079 --> 00:44:46,160
uncomfortable as a security person

1246
00:44:46,160 --> 00:44:47,359
saying all right i'm not going to check

1247
00:44:47,359 --> 00:44:48,800
for cross-site scripting in the body of

1248
00:44:48,800 --> 00:44:50,400
any request going there

1249
00:44:50,400 --> 00:44:52,960
because it tripped on this one pdf or

1250
00:44:52,960 --> 00:44:56,319
this one xml request that went up

1251
00:44:56,319 --> 00:44:57,760
that's something that's really tough to

1252
00:44:57,760 --> 00:45:00,240
swallow so then you kind of have to go

1253
00:45:00,240 --> 00:45:02,160
and gen write your own rules that are

1254
00:45:02,160 --> 00:45:04,160
specific to that and this is where your

1255
00:45:04,160 --> 00:45:05,920
costs really start ballooning because

1256
00:45:05,920 --> 00:45:07,520
you're like well these other sites seem

1257
00:45:07,520 --> 00:45:09,920
okay with this rule so i won't disable

1258
00:45:09,920 --> 00:45:11,920
it there but now i have to have a second

1259
00:45:11,920 --> 00:45:14,400
fms policy i have to have that policy in

1260
00:45:14,400 --> 00:45:16,240
non-blocking and in blocking so people

1261
00:45:16,240 --> 00:45:18,880
can test their stuff and that's where

1262
00:45:18,880 --> 00:45:21,359
your cost really starts stacking up

1263
00:45:21,359 --> 00:45:22,880
because you end up with 20 different

1264
00:45:22,880 --> 00:45:25,119
policies with blocking and non-blocking

1265
00:45:25,119 --> 00:45:26,880
now you're spending a tens of thousands

1266
00:45:26,880 --> 00:45:29,200
of dollars every month on this so that's

1267
00:45:29,200 --> 00:45:30,880
why you have to kind of use that shield

1268
00:45:30,880 --> 00:45:34,000
advanced trick to get through it

1269
00:45:34,000 --> 00:45:36,319
and you can also see here it tripped the

1270
00:45:36,319 --> 00:45:37,599
excluded

1271
00:45:37,599 --> 00:45:40,480
i had excluded this as count the generic

1272
00:45:40,480 --> 00:45:42,720
rfi so this was also listed as remote

1273
00:45:42,720 --> 00:45:45,440
file inclusion

1274
00:45:45,440 --> 00:45:47,440
it did not like that string one little

1275
00:45:47,440 --> 00:45:49,599
bit

1276
00:45:50,560 --> 00:45:51,920
but that's kind of how it goes with

1277
00:45:51,920 --> 00:45:53,520
tuning you got to go through those logs

1278
00:45:53,520 --> 00:45:54,800
figure out what happened figure out

1279
00:45:54,800 --> 00:45:56,560
false positive true positive

1280
00:45:56,560 --> 00:45:58,240
and then um

1281
00:45:58,240 --> 00:46:00,160
tune the rules appropriately and then

1282
00:46:00,160 --> 00:46:02,480
get all that a lot of that information

1283
00:46:02,480 --> 00:46:05,040
should be coming from your cert team so

1284
00:46:05,040 --> 00:46:07,280
here's my happy little tree but uh

1285
00:46:07,280 --> 00:46:08,240
remember

1286
00:46:08,240 --> 00:46:10,000
engineering is more important than you

1287
00:46:10,000 --> 00:46:12,880
as a security person uh it is

1288
00:46:12,880 --> 00:46:14,640
one of the fundamental tenets i think of

1289
00:46:14,640 --> 00:46:17,119
product security you need to be helping

1290
00:46:17,119 --> 00:46:19,520
them we shouldn't just be a cost center

1291
00:46:19,520 --> 00:46:22,480
or our only value is in like marketing

1292
00:46:22,480 --> 00:46:24,240
that we're the most secure

1293
00:46:24,240 --> 00:46:26,960
or that um

1294
00:46:26,960 --> 00:46:29,119
or that we're going to like stop the bad

1295
00:46:29,119 --> 00:46:30,960
guys right we can actually help the

1296
00:46:30,960 --> 00:46:32,720
business we can write modules we can

1297
00:46:32,720 --> 00:46:35,200
make things that are easy for engineers

1298
00:46:35,200 --> 00:46:37,599
we want to make it easy to do the right

1299
00:46:37,599 --> 00:46:40,560
thing with security so keep that in mind

1300
00:46:40,560 --> 00:46:42,319
when you're looking at how you run

1301
00:46:42,319 --> 00:46:45,599
product security in your organization

1302
00:46:45,599 --> 00:46:47,760
wafts can be useful i've stopped a lot

1303
00:46:47,760 --> 00:46:49,920
of really good attacks from coming in

1304
00:46:49,920 --> 00:46:51,839
you say oh we know that we have this

1305
00:46:51,839 --> 00:46:53,440
vulnerable software component this is

1306
00:46:53,440 --> 00:46:54,960
what the exploit looks like i'm going to

1307
00:46:54,960 --> 00:46:57,359
go in write a waff rule to block it on

1308
00:46:57,359 --> 00:46:58,800
this system

1309
00:46:58,800 --> 00:47:01,040
or i want to start doing detection when

1310
00:47:01,040 --> 00:47:04,000
this is being used against me

1311
00:47:04,000 --> 00:47:06,720
when you start automating stuff in aws

1312
00:47:06,720 --> 00:47:07,839
stuff gets

1313
00:47:07,839 --> 00:47:10,640
super weird

1314
00:47:12,480 --> 00:47:14,079
yeah so stuff gets super weird when you

1315
00:47:14,079 --> 00:47:16,319
start automating stuff in aws because

1316
00:47:16,319 --> 00:47:18,319
aws might come along and take that away

1317
00:47:18,319 --> 00:47:20,559
from you like they might

1318
00:47:20,559 --> 00:47:23,119
do this for you in a much better way

1319
00:47:23,119 --> 00:47:24,559
granted they'll probably charge you for

1320
00:47:24,559 --> 00:47:26,559
it but you may not need this huge like

1321
00:47:26,559 --> 00:47:28,720
rube goldberg machine of stuff that you

1322
00:47:28,720 --> 00:47:30,400
just like strung together to get stuff

1323
00:47:30,400 --> 00:47:31,680
done

1324
00:47:31,680 --> 00:47:33,520
watch out for costs anytime you're using

1325
00:47:33,520 --> 00:47:34,640
aws

1326
00:47:34,640 --> 00:47:37,520
be super careful about your cost and

1327
00:47:37,520 --> 00:47:39,839
make your decisions deliberately people

1328
00:47:39,839 --> 00:47:41,119
should be going into this their eyes

1329
00:47:41,119 --> 00:47:42,559
wide open for how much money they're

1330
00:47:42,559 --> 00:47:44,880
going to spend

1331
00:47:44,880 --> 00:47:46,960
and then also i had fun doing my art

1332
00:47:46,960 --> 00:47:48,720
even though i'm not good at it

1333
00:47:48,720 --> 00:47:50,800
but you can enjoy things that you're not

1334
00:47:50,800 --> 00:47:52,640
great at so keep that in mind with the

1335
00:47:52,640 --> 00:47:54,880
pandemic right things are winding down

1336
00:47:54,880 --> 00:47:56,640
but you don't have to be amazing at

1337
00:47:56,640 --> 00:47:59,760
something to have have a good time

1338
00:47:59,760 --> 00:48:00,880
and

1339
00:48:00,880 --> 00:48:03,520
that's pretty much it um i can stay in

1340
00:48:03,520 --> 00:48:06,240
and look for questions in just a second

1341
00:48:06,240 --> 00:48:10,079
i don't see any in the track one

1342
00:48:10,079 --> 00:48:11,520
discord channel

1343
00:48:11,520 --> 00:48:12,559
but

1344
00:48:12,559 --> 00:48:15,040
i'll be on there if anybody has further

1345
00:48:15,040 --> 00:48:16,720
questions

1346
00:48:16,720 --> 00:48:20,399
so thanks everyone for your time

