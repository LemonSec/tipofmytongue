1
00:00:01,760 --> 00:00:13,840
[Music]

2
00:00:13,840 --> 00:00:16,640
all right how's it going everyone so my

3
00:00:16,640 --> 00:00:18,800
name is aaron katz and we're here to

4
00:00:18,800 --> 00:00:22,800
talk about powershell for security nerds

5
00:00:22,800 --> 00:00:23,840
and i'll wait for a little bit of

6
00:00:23,840 --> 00:00:26,320
applause

7
00:00:27,119 --> 00:00:28,560
and give you a little bit of information

8
00:00:28,560 --> 00:00:31,199
about me before we dive in

9
00:00:31,199 --> 00:00:33,600
i promise to keep this very quick but i

10
00:00:33,600 --> 00:00:35,760
am a reformed red teamer so i got my

11
00:00:35,760 --> 00:00:38,160
start in cyber security

12
00:00:38,160 --> 00:00:39,920
doing pen testing a lot of active

13
00:00:39,920 --> 00:00:42,000
directory focus and web application

14
00:00:42,000 --> 00:00:44,000
focus and naturally that involve

15
00:00:44,000 --> 00:00:46,000
learning quite a bit of powershell in

16
00:00:46,000 --> 00:00:47,600
order to

17
00:00:47,600 --> 00:00:49,680
go after different systems

18
00:00:49,680 --> 00:00:52,719
i am a very proud slytherin

19
00:00:52,719 --> 00:00:54,079
and i have

20
00:00:54,079 --> 00:00:56,800
recently joined as the head of security

21
00:00:56,800 --> 00:00:58,879
at an investment firm

22
00:00:58,879 --> 00:01:00,399
coming from another large financial

23
00:01:00,399 --> 00:01:02,079
company so i've been in the financial

24
00:01:02,079 --> 00:01:04,080
space for quite some time

25
00:01:04,080 --> 00:01:05,680
seeing a lot of fun dealing with

26
00:01:05,680 --> 00:01:08,479
security on legacy systems systems that

27
00:01:08,479 --> 00:01:09,840
don't get patched since they were

28
00:01:09,840 --> 00:01:12,720
installed 10 15 years ago and trying to

29
00:01:12,720 --> 00:01:14,560
figure out how do i secure it so i keep

30
00:01:14,560 --> 00:01:17,040
my job

31
00:01:17,520 --> 00:01:19,439
so we'll talk a little bit today about

32
00:01:19,439 --> 00:01:21,280
what powershell is what are the

33
00:01:21,280 --> 00:01:24,479
offensive techniques that attackers use

34
00:01:24,479 --> 00:01:26,080
what are some defensive techniques you

35
00:01:26,080 --> 00:01:28,000
can use to try to predict what will

36
00:01:28,000 --> 00:01:30,320
happen to monitor to even prevent some

37
00:01:30,320 --> 00:01:31,600
bad actions

38
00:01:31,600 --> 00:01:33,759
and go through a very quick case study

39
00:01:33,759 --> 00:01:36,720
of how apt actors abuse powershell and

40
00:01:36,720 --> 00:01:38,320
how you would be able to detect the

41
00:01:38,320 --> 00:01:41,839
badness when it happens

42
00:01:43,360 --> 00:01:44,640
so first

43
00:01:44,640 --> 00:01:47,280
what is powershell

44
00:01:47,280 --> 00:01:49,119
essentially it's an automation platform

45
00:01:49,119 --> 00:01:51,520
for system administration tasks

46
00:01:51,520 --> 00:01:53,040
at the end of the day

47
00:01:53,040 --> 00:01:55,680
it lets sys admins run windows better

48
00:01:55,680 --> 00:01:58,320
without having to use a gui the entire

49
00:01:58,320 --> 00:01:59,280
time

50
00:01:59,280 --> 00:02:01,040
it's an object-oriented scripting

51
00:02:01,040 --> 00:02:02,320
language

52
00:02:02,320 --> 00:02:03,680
and you could kind of think of it as the

53
00:02:03,680 --> 00:02:06,240
command line on steroids for windows you

54
00:02:06,240 --> 00:02:08,878
can call.net directly you have access to

55
00:02:08,878 --> 00:02:11,920
windows resources like the registry wmi

56
00:02:11,920 --> 00:02:15,280
winrm rpc etc

57
00:02:15,280 --> 00:02:16,560
and one of the best parts about

58
00:02:16,560 --> 00:02:19,120
powershell is that it's modular you can

59
00:02:19,120 --> 00:02:21,599
build different modules to repeat tasks

60
00:02:21,599 --> 00:02:23,680
you can leverage modules other people

61
00:02:23,680 --> 00:02:25,360
created in your scripting and it makes

62
00:02:25,360 --> 00:02:26,319
just much

63
00:02:26,319 --> 00:02:28,720
easier to perform administration

64
00:02:28,720 --> 00:02:30,160
rather than trying to navigate

65
00:02:30,160 --> 00:02:33,360
microsoft's windows and microsoft's

66
00:02:33,360 --> 00:02:34,959
different versions of their ui where

67
00:02:34,959 --> 00:02:37,840
they move things around

68
00:02:38,480 --> 00:02:40,879
so there's been several versions of

69
00:02:40,879 --> 00:02:42,800
powershell that have been released

70
00:02:42,800 --> 00:02:44,160
throughout the years

71
00:02:44,160 --> 00:02:46,879
starting in windows 7 with version 2

72
00:02:46,879 --> 00:02:50,319
going through 5.1 with windows 10. there

73
00:02:50,319 --> 00:02:51,920
are if you'll notice two versions

74
00:02:51,920 --> 00:02:53,840
missing six and seven

75
00:02:53,840 --> 00:02:55,680
those are slightly different we're not

76
00:02:55,680 --> 00:02:58,239
really going to cover them in this talk

77
00:02:58,239 --> 00:03:00,159
but essentially they use

78
00:03:00,159 --> 00:03:02,400
net core instead of normal.net and

79
00:03:02,400 --> 00:03:03,680
there's slight differences in how they

80
00:03:03,680 --> 00:03:04,560
operate

81
00:03:04,560 --> 00:03:06,080
but a lot of the security techniques

82
00:03:06,080 --> 00:03:08,319
you'll lose you'll learn here you'll be

83
00:03:08,319 --> 00:03:12,319
able to apply to those versions as well

84
00:03:13,760 --> 00:03:16,560
the first thing i want to talk about is

85
00:03:16,560 --> 00:03:20,080
get you familiar with what a profile is

86
00:03:20,080 --> 00:03:22,720
in powershell you have kind of a profile

87
00:03:22,720 --> 00:03:24,640
similar in linux when you can set

88
00:03:24,640 --> 00:03:26,799
profiles per user you have something

89
00:03:26,799 --> 00:03:28,799
like that for powershell

90
00:03:28,799 --> 00:03:31,280
and there's multiple different profiles

91
00:03:31,280 --> 00:03:32,799
because there's different powershell

92
00:03:32,799 --> 00:03:35,040
hosts there's the interactive script

93
00:03:35,040 --> 00:03:37,599
editor the ise and there's regular

94
00:03:37,599 --> 00:03:38,959
powershell

95
00:03:38,959 --> 00:03:41,120
and you could create a profile

96
00:03:41,120 --> 00:03:43,440
for all users of the machine or just the

97
00:03:43,440 --> 00:03:46,560
current user of the machine

98
00:03:46,560 --> 00:03:48,720
and why is this important

99
00:03:48,720 --> 00:03:51,440
well these are loaded in order

100
00:03:51,440 --> 00:03:54,080
and no one checks these

101
00:03:54,080 --> 00:03:57,120
i have yet to see a single edr tool a

102
00:03:57,120 --> 00:04:00,400
single endpoint agent really look at

103
00:04:00,400 --> 00:04:03,040
people modifying the profiles

104
00:04:03,040 --> 00:04:04,480
and what happens is when you load a

105
00:04:04,480 --> 00:04:06,799
profile it loads all of the commands in

106
00:04:06,799 --> 00:04:08,640
that file it's essentially a script that

107
00:04:08,640 --> 00:04:12,239
gets run once you open up the shell

108
00:04:12,239 --> 00:04:15,519
and because of that you can add a lot of

109
00:04:15,519 --> 00:04:16,880
fun malware

110
00:04:16,880 --> 00:04:19,040
and establish some persistence beacon

111
00:04:19,040 --> 00:04:20,959
out establish a tunnel

112
00:04:20,959 --> 00:04:23,680
because almost no one checks these

113
00:04:23,680 --> 00:04:25,520
so it's a really great persistence

114
00:04:25,520 --> 00:04:28,000
mechanism and it's something that if you

115
00:04:28,000 --> 00:04:29,759
don't use or if you don't anticipate

116
00:04:29,759 --> 00:04:32,080
your users using put in some rules that

117
00:04:32,080 --> 00:04:33,360
actually monitor

118
00:04:33,360 --> 00:04:35,040
this usage and we'll talk about that a

119
00:04:35,040 --> 00:04:36,479
little more later

120
00:04:36,479 --> 00:04:38,160
but it's important to realize that these

121
00:04:38,160 --> 00:04:40,000
types of profiles

122
00:04:40,000 --> 00:04:42,000
can really mess up your system and

123
00:04:42,000 --> 00:04:44,240
provide almost no evidence of anything

124
00:04:44,240 --> 00:04:46,720
happening

125
00:04:47,440 --> 00:04:48,240
so

126
00:04:48,240 --> 00:04:50,400
let's talk a little bit about

127
00:04:50,400 --> 00:04:52,960
who loves powershell and why

128
00:04:52,960 --> 00:04:56,720
so obviously attackers love powershell

129
00:04:56,720 --> 00:04:59,360
and the first item in this bullet is in

130
00:04:59,360 --> 00:05:01,600
memory execution

131
00:05:01,600 --> 00:05:03,520
that means that they can execute all of

132
00:05:03,520 --> 00:05:05,039
their malware

133
00:05:05,039 --> 00:05:06,960
without actually

134
00:05:06,960 --> 00:05:08,800
dropping anything to disk

135
00:05:08,800 --> 00:05:10,560
so your antivirus that's constantly

136
00:05:10,560 --> 00:05:12,639
scanning for signatures on disk is not

137
00:05:12,639 --> 00:05:14,479
going to see anything

138
00:05:14,479 --> 00:05:16,800
everything runs in memory

139
00:05:16,800 --> 00:05:18,880
you can also use powershell to remotely

140
00:05:18,880 --> 00:05:21,360
access different systems

141
00:05:21,360 --> 00:05:23,360
you could interact with tons of

142
00:05:23,360 --> 00:05:27,039
different components rpc wmi.net com

143
00:05:27,039 --> 00:05:28,400
objects

144
00:05:28,400 --> 00:05:30,400
and you don't even need powershell.exe

145
00:05:30,400 --> 00:05:32,400
to run powershell which is one of my

146
00:05:32,400 --> 00:05:34,000
favorite techniques and something i've

147
00:05:34,000 --> 00:05:36,160
used in a lot of pen tests to bypass

148
00:05:36,160 --> 00:05:38,800
either endpoint control signatures

149
00:05:38,800 --> 00:05:41,199
and even application allow listing

150
00:05:41,199 --> 00:05:42,479
because i didn't have to use

151
00:05:42,479 --> 00:05:46,240
powershell.exe to run powershell

152
00:05:46,240 --> 00:05:47,440
and last

153
00:05:47,440 --> 00:05:50,639
no one really logs powershell

154
00:05:50,639 --> 00:05:53,199
no one really monitors powershell it's

155
00:05:53,199 --> 00:05:55,440
very convoluted to figure out what logs

156
00:05:55,440 --> 00:05:58,160
are valuable or even how to enable them

157
00:05:58,160 --> 00:05:59,199
and you have to make sure you're on the

158
00:05:59,199 --> 00:06:01,440
right versions to get the right logs

159
00:06:01,440 --> 00:06:03,360
so most companies just haven't really

160
00:06:03,360 --> 00:06:05,600
done this

161
00:06:05,600 --> 00:06:07,600
and because of that attackers know it's

162
00:06:07,600 --> 00:06:10,160
very tough to actually catch them to see

163
00:06:10,160 --> 00:06:12,560
what happens to actually do forensics

164
00:06:12,560 --> 00:06:15,360
after the fact

165
00:06:15,840 --> 00:06:18,160
and this is an example of some of the i

166
00:06:18,160 --> 00:06:20,639
call it like evil powershell that is out

167
00:06:20,639 --> 00:06:23,440
there and these are modular frameworks

168
00:06:23,440 --> 00:06:25,120
and you've probably seen a lot of these

169
00:06:25,120 --> 00:06:27,360
throughout the news throughout your own

170
00:06:27,360 --> 00:06:30,240
careers any investigations you've done

171
00:06:30,240 --> 00:06:32,000
one of my favorites is if you look at

172
00:06:32,000 --> 00:06:35,280
the bottom you'll see invoke me cats

173
00:06:35,280 --> 00:06:37,120
so for those who aren't familiar mimics

174
00:06:37,120 --> 00:06:38,560
is one of the most popular tools out

175
00:06:38,560 --> 00:06:40,479
there that people use to

176
00:06:40,479 --> 00:06:42,560
basically dump credentials from a system

177
00:06:42,560 --> 00:06:44,080
to get credentials that are stored in

178
00:06:44,080 --> 00:06:45,360
memory

179
00:06:45,360 --> 00:06:46,400
and

180
00:06:46,400 --> 00:06:48,639
move around your network so now there's

181
00:06:48,639 --> 00:06:50,880
a powershell version of that

182
00:06:50,880 --> 00:06:53,280
and it usually doesn't get caught

183
00:06:53,280 --> 00:06:55,120
you have other frameworks here that will

184
00:06:55,120 --> 00:06:57,759
actually show you using powershell

185
00:06:57,759 --> 00:06:59,039
what are the different techniques you

186
00:06:59,039 --> 00:07:01,120
can use to move throughout the network

187
00:07:01,120 --> 00:07:03,280
what can you actually do on the system

188
00:07:03,280 --> 00:07:04,319
itself

189
00:07:04,319 --> 00:07:06,639
and a lot of it again just doesn't get

190
00:07:06,639 --> 00:07:08,880
caught

191
00:07:09,759 --> 00:07:11,599
so this is a fun example of something i

192
00:07:11,599 --> 00:07:14,400
put together recently i tried this out

193
00:07:14,400 --> 00:07:16,639
with at least four different edr

194
00:07:16,639 --> 00:07:18,400
solutions as well as several av

195
00:07:18,400 --> 00:07:20,639
providers and not one of them alerted on

196
00:07:20,639 --> 00:07:21,840
this

197
00:07:21,840 --> 00:07:24,240
essentially what this does is very

198
00:07:24,240 --> 00:07:26,800
simply it gets me the list of every user

199
00:07:26,800 --> 00:07:28,960
in the local administrators group

200
00:07:28,960 --> 00:07:30,639
and it'll send out an email giving me

201
00:07:30,639 --> 00:07:32,880
that information

202
00:07:32,880 --> 00:07:34,639
and it does this by creating a com

203
00:07:34,639 --> 00:07:37,360
object to connect to outlook

204
00:07:37,360 --> 00:07:39,120
so in this case

205
00:07:39,120 --> 00:07:41,280
i get i connect to outlook i have my com

206
00:07:41,280 --> 00:07:43,680
object ready i'm waiting to see an email

207
00:07:43,680 --> 00:07:45,840
that says innocent subject line and once

208
00:07:45,840 --> 00:07:47,120
i see it

209
00:07:47,120 --> 00:07:49,039
i'm collecting that information sending

210
00:07:49,039 --> 00:07:50,560
it out

211
00:07:50,560 --> 00:07:53,120
all of this runs as the user there's no

212
00:07:53,120 --> 00:07:54,879
privilege elevation there's really not

213
00:07:54,879 --> 00:07:57,199
much going on

214
00:07:57,199 --> 00:07:59,440
and none of those tools detected it and

215
00:07:59,440 --> 00:08:01,599
in fact a couple of those edr providers

216
00:08:01,599 --> 00:08:03,599
have told me that this is not considered

217
00:08:03,599 --> 00:08:05,759
bullish malicious behavior

218
00:08:05,759 --> 00:08:07,759
so if you have a macro if you have a

219
00:08:07,759 --> 00:08:09,680
malicious script that creates a com

220
00:08:09,680 --> 00:08:11,840
object connects to outlook and just

221
00:08:11,840 --> 00:08:12,960
sends over

222
00:08:12,960 --> 00:08:15,280
someone's entire mailbox

223
00:08:15,280 --> 00:08:17,199
it's not going to get caught and this is

224
00:08:17,199 --> 00:08:20,800
not a lot of lines of code

225
00:08:22,479 --> 00:08:24,960
so com objects are one area that

226
00:08:24,960 --> 00:08:27,599
attackers love but there's a few other

227
00:08:27,599 --> 00:08:29,120
vectors too

228
00:08:29,120 --> 00:08:31,440
obviously there's office macros you can

229
00:08:31,440 --> 00:08:33,039
use scripting so instead of just using

230
00:08:33,039 --> 00:08:35,839
vba you are able to use powershell

231
00:08:35,839 --> 00:08:38,799
you're able to use hta files chm files

232
00:08:38,799 --> 00:08:41,839
wmi there's a whole range of attack

233
00:08:41,839 --> 00:08:43,440
vectors that you're able to take

234
00:08:43,440 --> 00:08:44,800
advantage of

235
00:08:44,800 --> 00:08:47,519
and execute powershell

236
00:08:47,519 --> 00:08:49,279
if you have low level script kitties

237
00:08:49,279 --> 00:08:51,040
that are kind of breaking in or just

238
00:08:51,040 --> 00:08:53,200
some kind of mass cyber criminals i've

239
00:08:53,200 --> 00:08:55,040
seen in a few investigations they'll

240
00:08:55,040 --> 00:08:56,720
just create a schedule task which calls

241
00:08:56,720 --> 00:08:58,800
powershell which pulls down a script and

242
00:08:58,800 --> 00:09:00,959
runs powershell again

243
00:09:00,959 --> 00:09:03,839
easy to look for but it's just one area

244
00:09:03,839 --> 00:09:05,839
of how they'll attack

245
00:09:05,839 --> 00:09:07,279
and i think it's interesting to talk

246
00:09:07,279 --> 00:09:10,800
about how those com objects work

247
00:09:10,800 --> 00:09:13,440
com was created in the 1990s

248
00:09:13,440 --> 00:09:16,080
and in windows 7 there were about 8 000

249
00:09:16,080 --> 00:09:18,640
com objects windows 10 there's over 10

250
00:09:18,640 --> 00:09:20,720
000.

251
00:09:20,720 --> 00:09:22,720
no tool really monitors these because no

252
00:09:22,720 --> 00:09:24,880
one really knows what they are what gets

253
00:09:24,880 --> 00:09:27,120
created so many systems create different

254
00:09:27,120 --> 00:09:28,720
com objects

255
00:09:28,720 --> 00:09:30,240
so no one really knows what to do with

256
00:09:30,240 --> 00:09:32,240
them and because they operate at such a

257
00:09:32,240 --> 00:09:34,000
low level a lot of those tools just

258
00:09:34,000 --> 00:09:36,560
ignore it completely

259
00:09:36,560 --> 00:09:38,399
what i find really interesting is that

260
00:09:38,399 --> 00:09:40,640
you can actually create com scriptlets

261
00:09:40,640 --> 00:09:45,120
and pass those to files like run dll32

262
00:09:45,120 --> 00:09:47,200
so an attacker can use that they know

263
00:09:47,200 --> 00:09:49,839
rundle of 32 will never be denied on a

264
00:09:49,839 --> 00:09:52,000
system it's always going to be available

265
00:09:52,000 --> 00:09:54,000
and i'll just pass in a scriptlet to

266
00:09:54,000 --> 00:09:56,399
that actually just runs powershell

267
00:09:56,399 --> 00:09:58,800
and most of your endpoint tools are not

268
00:09:58,800 --> 00:10:01,680
going to catch it

269
00:10:03,279 --> 00:10:05,279
so let's talk a little bit about what

270
00:10:05,279 --> 00:10:07,680
are the suspicious parameters

271
00:10:07,680 --> 00:10:08,720
that you're going to kind of see

272
00:10:08,720 --> 00:10:11,839
attackers use more often than not

273
00:10:11,839 --> 00:10:13,920
the first one is windows style hidden

274
00:10:13,920 --> 00:10:16,800
and that is pretty self-explanatory

275
00:10:16,800 --> 00:10:18,480
that hides the window so you don't

276
00:10:18,480 --> 00:10:20,640
actually see a pop-up

277
00:10:20,640 --> 00:10:22,880
i remember a lot of times when malware

278
00:10:22,880 --> 00:10:24,560
was coming in years ago you would get

279
00:10:24,560 --> 00:10:26,240
that pop-up of the command prompt for a

280
00:10:26,240 --> 00:10:27,440
while while it runs and does their

281
00:10:27,440 --> 00:10:29,440
malicious thing and then disappears and

282
00:10:29,440 --> 00:10:32,160
most users never bothered reporting it

283
00:10:32,160 --> 00:10:33,440
in this case the window just doesn't

284
00:10:33,440 --> 00:10:36,240
show up no one knows it's running

285
00:10:36,240 --> 00:10:38,560
by adding no profile

286
00:10:38,560 --> 00:10:40,720
we talked about profiles earlier this

287
00:10:40,720 --> 00:10:43,519
actually says don't load any profiles

288
00:10:43,519 --> 00:10:45,600
when you launch powershell

289
00:10:45,600 --> 00:10:47,279
because if you try to put monitoring

290
00:10:47,279 --> 00:10:49,440
tools into those profiles so that every

291
00:10:49,440 --> 00:10:51,279
user that

292
00:10:51,279 --> 00:10:53,120
opened up powershell would run certain

293
00:10:53,120 --> 00:10:54,800
code and telemetry

294
00:10:54,800 --> 00:10:58,079
well this bypass that whole thing

295
00:10:58,160 --> 00:11:00,480
then we have the execution policy

296
00:11:00,480 --> 00:11:03,279
so the execution policy is

297
00:11:03,279 --> 00:11:05,920
not really a security control the way i

298
00:11:05,920 --> 00:11:07,360
view it is

299
00:11:07,360 --> 00:11:09,519
it's a way to stop a script from

300
00:11:09,519 --> 00:11:11,760
accidentally being run by a legitimate

301
00:11:11,760 --> 00:11:12,800
user

302
00:11:12,800 --> 00:11:16,240
and it does not stop any malicious users

303
00:11:16,240 --> 00:11:18,560
there's four values for that policy

304
00:11:18,560 --> 00:11:20,560
you can have remote signed restricted

305
00:11:20,560 --> 00:11:22,079
you can bypass

306
00:11:22,079 --> 00:11:24,880
it's not really something that

307
00:11:24,880 --> 00:11:26,880
you want to rely on because you could

308
00:11:26,880 --> 00:11:29,200
just pass in a flag and change it

309
00:11:29,200 --> 00:11:30,880
and i'll talk about a few other bypasses

310
00:11:30,880 --> 00:11:33,360
for it later

311
00:11:33,360 --> 00:11:35,200
if you see anyone using the file or

312
00:11:35,200 --> 00:11:37,519
command switches if they're not a system

313
00:11:37,519 --> 00:11:40,640
administrator if it's not a logon script

314
00:11:40,640 --> 00:11:42,399
that your company uses

315
00:11:42,399 --> 00:11:44,160
odds are

316
00:11:44,160 --> 00:11:45,440
probably something you're going to need

317
00:11:45,440 --> 00:11:46,560
to look at

318
00:11:46,560 --> 00:11:49,519
or potentially even block from running

319
00:11:49,519 --> 00:11:51,600
the same with encoded command the way

320
00:11:51,600 --> 00:11:53,200
the attackers run a lot of their

321
00:11:53,200 --> 00:11:55,760
ransomware campaigns now is they can't

322
00:11:55,760 --> 00:11:58,160
fit that huge command in every single

323
00:11:58,160 --> 00:11:59,920
script that they want to do in one

324
00:11:59,920 --> 00:12:01,279
command

325
00:12:01,279 --> 00:12:03,120
but powershell very handily lets you

326
00:12:03,120 --> 00:12:05,600
base64 encode your command

327
00:12:05,600 --> 00:12:08,079
and pass that along

328
00:12:08,079 --> 00:12:10,639
and next is invoke expression

329
00:12:10,639 --> 00:12:12,880
what that does is you could pass in a

330
00:12:12,880 --> 00:12:14,639
script that will get parsed by

331
00:12:14,639 --> 00:12:15,839
powershell

332
00:12:15,839 --> 00:12:18,560
and it also lets you use net objects so

333
00:12:18,560 --> 00:12:20,480
you'll most commonly see this with an

334
00:12:20,480 --> 00:12:23,519
attacker that wants to use net to

335
00:12:23,519 --> 00:12:24,800
download

336
00:12:24,800 --> 00:12:26,560
the next stage

337
00:12:26,560 --> 00:12:28,639
so typical ransomware attack can be you

338
00:12:28,639 --> 00:12:30,480
open up the phishing email

339
00:12:30,480 --> 00:12:32,480
you execute that powershell script from

340
00:12:32,480 --> 00:12:34,079
the attachment

341
00:12:34,079 --> 00:12:35,839
and what that does is it uses invoke

342
00:12:35,839 --> 00:12:38,000
expression to download the next stage of

343
00:12:38,000 --> 00:12:39,920
the attack

344
00:12:39,920 --> 00:12:42,800
and then last is dash version

345
00:12:42,800 --> 00:12:45,440
you should almost never ever see this in

346
00:12:45,440 --> 00:12:47,040
your environment

347
00:12:47,040 --> 00:12:48,720
the only times people will really use

348
00:12:48,720 --> 00:12:50,880
this is to downgrade your powershell

349
00:12:50,880 --> 00:12:52,959
version which also means

350
00:12:52,959 --> 00:12:54,720
you lose a lot of the security

351
00:12:54,720 --> 00:12:56,160
enhancements

352
00:12:56,160 --> 00:12:58,000
and we'll talk about later

353
00:12:58,000 --> 00:12:59,839
powershell version 2 which was one of

354
00:12:59,839 --> 00:13:01,839
the first versions does not actually

355
00:13:01,839 --> 00:13:04,320
really have any monitoring or logging

356
00:13:04,320 --> 00:13:06,959
so if an attacker does dash v2

357
00:13:06,959 --> 00:13:08,880
that suddenly means

358
00:13:08,880 --> 00:13:12,240
you're not going to get anything from it

359
00:13:12,320 --> 00:13:13,839
and the interesting thing here is you

360
00:13:13,839 --> 00:13:15,920
can't build a signature just based on

361
00:13:15,920 --> 00:13:17,680
what these parameters are

362
00:13:17,680 --> 00:13:19,440
because powershell will actually use a

363
00:13:19,440 --> 00:13:20,720
wildcard

364
00:13:20,720 --> 00:13:21,440
it's

365
00:13:21,440 --> 00:13:23,200
it's fun it's convenient but it does

366
00:13:23,200 --> 00:13:25,519
make it a little harder when you detect

367
00:13:25,519 --> 00:13:29,279
for example dash version can be v v e v

368
00:13:29,279 --> 00:13:32,560
e r v e r s etc

369
00:13:32,560 --> 00:13:34,000
so it's important to just understand

370
00:13:34,000 --> 00:13:36,880
what the values can potentially be

371
00:13:36,880 --> 00:13:39,199
or even search for

372
00:13:39,199 --> 00:13:42,639
all those possible letters

373
00:13:43,519 --> 00:13:44,639
so

374
00:13:44,639 --> 00:13:46,560
let's talk about how an attacker is

375
00:13:46,560 --> 00:13:49,360
going to bypass your execution policy

376
00:13:49,360 --> 00:13:50,880
so this is the first command that can be

377
00:13:50,880 --> 00:13:53,120
run pretty basic

378
00:13:53,120 --> 00:13:55,680
it says all right i'm not an admin i

379
00:13:55,680 --> 00:13:57,040
don't have permission to change the

380
00:13:57,040 --> 00:13:59,680
execution policy for every user

381
00:13:59,680 --> 00:14:00,880
i'm just going to change the scope to

382
00:14:00,880 --> 00:14:03,040
the current user and i'm going to set my

383
00:14:03,040 --> 00:14:05,920
execution policy and force it

384
00:14:05,920 --> 00:14:08,399
odds are that's going to work

385
00:14:08,399 --> 00:14:10,320
but if that doesn't work because let's

386
00:14:10,320 --> 00:14:11,839
say you have a group policy object

387
00:14:11,839 --> 00:14:14,560
that's forcing the policy

388
00:14:14,560 --> 00:14:16,560
run this instead

389
00:14:16,560 --> 00:14:18,480
uh these three lines at the end of the

390
00:14:18,480 --> 00:14:20,959
day replaces powershell's authorization

391
00:14:20,959 --> 00:14:22,959
manager within your session

392
00:14:22,959 --> 00:14:25,360
so even if gpo is in there saying hey

393
00:14:25,360 --> 00:14:27,680
you're not allowed to run this

394
00:14:27,680 --> 00:14:31,560
this just removes that restriction

395
00:14:32,240 --> 00:14:34,560
and here's another example that i was

396
00:14:34,560 --> 00:14:36,480
putting together the other day

397
00:14:36,480 --> 00:14:38,880
and this shows my execution policy is

398
00:14:38,880 --> 00:14:41,600
set as restricted i try to run the file

399
00:14:41,600 --> 00:14:43,360
and you see it can't be loaded because

400
00:14:43,360 --> 00:14:45,600
it's disabled

401
00:14:45,600 --> 00:14:47,920
but now there's two ways to run it

402
00:14:47,920 --> 00:14:49,600
you just read the file

403
00:14:49,600 --> 00:14:51,839
pipe it to powershell.exe with no

404
00:14:51,839 --> 00:14:53,279
profile

405
00:14:53,279 --> 00:14:55,120
and it executes

406
00:14:55,120 --> 00:14:55,920
or

407
00:14:55,920 --> 00:14:57,760
you can just read it and pass it to

408
00:14:57,760 --> 00:14:59,839
invoke expression

409
00:14:59,839 --> 00:15:01,680
which will then parse out and execute

410
00:15:01,680 --> 00:15:03,519
everything within that file

411
00:15:03,519 --> 00:15:05,680
and the verse the execution policy is

412
00:15:05,680 --> 00:15:09,279
still restricted we never changed it

413
00:15:09,279 --> 00:15:11,440
so the moral of the story here is never

414
00:15:11,440 --> 00:15:13,920
ever ever ever ever rely on the

415
00:15:13,920 --> 00:15:18,319
execution policy as a security control

416
00:15:20,240 --> 00:15:22,320
another attack that is really fun to

417
00:15:22,320 --> 00:15:23,760
play with and i highly recommend messing

418
00:15:23,760 --> 00:15:25,519
around with this it's called invoke

419
00:15:25,519 --> 00:15:28,000
obfuscation and it's a variety of

420
00:15:28,000 --> 00:15:30,240
different techniques that you can use

421
00:15:30,240 --> 00:15:32,399
to obfuscate your powershell potentially

422
00:15:32,399 --> 00:15:34,800
bypass different types of alerting

423
00:15:34,800 --> 00:15:36,240
make it harder for people to hunt

424
00:15:36,240 --> 00:15:38,399
through to see what you did

425
00:15:38,399 --> 00:15:39,600
it lets you

426
00:15:39,600 --> 00:15:41,600
create a powershell script that runs

427
00:15:41,600 --> 00:15:44,160
without using powershell it encodes and

428
00:15:44,160 --> 00:15:47,040
compresses your script at b64 encodes it

429
00:15:47,040 --> 00:15:48,399
it gives you a lot of different options

430
00:15:48,399 --> 00:15:50,639
to launch that script and try to evade

431
00:15:50,639 --> 00:15:52,800
detection

432
00:15:52,800 --> 00:15:55,440
and just a little tip if you ever want

433
00:15:55,440 --> 00:15:57,279
to detect if someone was trying to do

434
00:15:57,279 --> 00:15:59,920
something like this there's a dll we'll

435
00:15:59,920 --> 00:16:00,880
talk about it later

436
00:16:00,880 --> 00:16:03,880
system.management.automation.dll

437
00:16:04,480 --> 00:16:06,800
that is really powershell if you see

438
00:16:06,800 --> 00:16:09,360
that being loaded by a process odds are

439
00:16:09,360 --> 00:16:11,759
it is doing some type of automation that

440
00:16:11,759 --> 00:16:14,880
can involve powershell

441
00:16:16,079 --> 00:16:17,920
and we talked about here the downgrade

442
00:16:17,920 --> 00:16:19,120
attack

443
00:16:19,120 --> 00:16:21,839
if you just add dash v2 if you just

444
00:16:21,839 --> 00:16:23,519
change the version

445
00:16:23,519 --> 00:16:25,519
of the script

446
00:16:25,519 --> 00:16:27,279
you're going to downgrade that all the

447
00:16:27,279 --> 00:16:29,519
protections available just by adding

448
00:16:29,519 --> 00:16:31,519
dash v2

449
00:16:31,519 --> 00:16:33,279
and if you're at a large company if

450
00:16:33,279 --> 00:16:34,399
you're at a company that started off

451
00:16:34,399 --> 00:16:36,160
with windows 7 and they went through an

452
00:16:36,160 --> 00:16:38,480
upgrade to windows 10

453
00:16:38,480 --> 00:16:39,839
powershell version 2 is still going to

454
00:16:39,839 --> 00:16:41,839
be enabled it does not get disabled by

455
00:16:41,839 --> 00:16:43,759
default unless you're on one of the

456
00:16:43,759 --> 00:16:48,440
later builds of windows 10 fresh

457
00:16:50,480 --> 00:16:53,600
so i talked about this before about how

458
00:16:53,600 --> 00:16:55,680
do you get powershell without even using

459
00:16:55,680 --> 00:16:57,519
powershell

460
00:16:57,519 --> 00:17:00,079
so one answer is to use c-sharp

461
00:17:00,079 --> 00:17:02,399
you're able to use a powershell run

462
00:17:02,399 --> 00:17:05,760
space within c sharp and execute

463
00:17:05,760 --> 00:17:07,359
all these powershell commands without

464
00:17:07,359 --> 00:17:08,480
being caught

465
00:17:08,480 --> 00:17:10,000
and there's several tools out there that

466
00:17:10,000 --> 00:17:11,119
do this

467
00:17:11,119 --> 00:17:12,959
because all you need to do is just

468
00:17:12,959 --> 00:17:15,919
reference that dll that we talked about

469
00:17:15,919 --> 00:17:17,760
so two examples one of them is called

470
00:17:17,760 --> 00:17:19,359
unmanaged powershell you could find it

471
00:17:19,359 --> 00:17:20,480
on github

472
00:17:20,480 --> 00:17:22,959
it starts.net loads a custom assembly

473
00:17:22,959 --> 00:17:25,439
that executes powershell and even allows

474
00:17:25,439 --> 00:17:27,439
you to inject that into any running

475
00:17:27,439 --> 00:17:28,559
process

476
00:17:28,559 --> 00:17:31,200
and if you don't have the right runtime

477
00:17:31,200 --> 00:17:34,080
it loads the dot net 2.0 runtime

478
00:17:34,080 --> 00:17:35,760
and that's important because as we

479
00:17:35,760 --> 00:17:37,840
talked about here

480
00:17:37,840 --> 00:17:40,640
v2 is dot net version 2

481
00:17:40,640 --> 00:17:42,960
and that is missing a lot of those

482
00:17:42,960 --> 00:17:44,559
logging and monitoring controls so this

483
00:17:44,559 --> 00:17:46,080
actually loads that run time and make

484
00:17:46,080 --> 00:17:47,120
sure that

485
00:17:47,120 --> 00:17:49,360
the login controls that the enterprise

486
00:17:49,360 --> 00:17:50,240
wants

487
00:17:50,240 --> 00:17:53,039
doesn't really work

488
00:17:54,480 --> 00:17:56,720
um okay so i do see a question

489
00:17:56,720 --> 00:17:58,720
uh the group policy be set to prevent

490
00:17:58,720 --> 00:18:00,640
downgrades

491
00:18:00,640 --> 00:18:02,799
you would need to use group policy to

492
00:18:02,799 --> 00:18:06,720
actually remove powershell 2.0 and it is

493
00:18:06,720 --> 00:18:08,000
now a feature

494
00:18:08,000 --> 00:18:09,280
it used to be something where you had to

495
00:18:09,280 --> 00:18:11,039
uninstall now on the later versions of

496
00:18:11,039 --> 00:18:12,240
windows 10

497
00:18:12,240 --> 00:18:14,160
it's just a windows feature you could

498
00:18:14,160 --> 00:18:17,120
turn on and off easily with gpo but you

499
00:18:17,120 --> 00:18:18,720
have to make sure you do apply it across

500
00:18:18,720 --> 00:18:21,120
the board

501
00:18:22,240 --> 00:18:23,440
good question and if you have any other

502
00:18:23,440 --> 00:18:25,200
questions definitely feel free pipe them

503
00:18:25,200 --> 00:18:28,960
in i'll make sure to bring them up

504
00:18:28,960 --> 00:18:30,480
so what do we do now

505
00:18:30,480 --> 00:18:32,160
we're terrified we know the attackers

506
00:18:32,160 --> 00:18:33,760
have our entire network at their

507
00:18:33,760 --> 00:18:35,919
fingertips we can't do anything about

508
00:18:35,919 --> 00:18:37,280
powershell

509
00:18:37,280 --> 00:18:39,440
what do we do

510
00:18:39,440 --> 00:18:43,720
the answer is a little bit of powershell

511
00:18:44,320 --> 00:18:47,520
just the obligatory disclaimer

512
00:18:47,520 --> 00:18:50,160
signatures are good signatures are nice

513
00:18:50,160 --> 00:18:52,240
signatures are for the lowest lowest

514
00:18:52,240 --> 00:18:54,799
hanging fruit that fell off the tree

515
00:18:54,799 --> 00:18:56,559
it's really not

516
00:18:56,559 --> 00:18:59,440
the best at detecting

517
00:18:59,440 --> 00:19:01,520
the behavior that an attacker will go

518
00:19:01,520 --> 00:19:02,720
through

519
00:19:02,720 --> 00:19:04,559
so make sure that when you build those

520
00:19:04,559 --> 00:19:06,880
signatures it's just part of your

521
00:19:06,880 --> 00:19:09,600
process and part of your approach

522
00:19:09,600 --> 00:19:12,080
i've seen a lot of cases when i was

523
00:19:12,080 --> 00:19:13,840
consulting and going through for certain

524
00:19:13,840 --> 00:19:16,080
incidents and seeing

525
00:19:16,080 --> 00:19:17,600
well we had the signature and we were

526
00:19:17,600 --> 00:19:19,440
trying to detect it and

527
00:19:19,440 --> 00:19:21,840
we shouldn't be compromised and this is

528
00:19:21,840 --> 00:19:23,120
not fair

529
00:19:23,120 --> 00:19:24,720
and then we look

530
00:19:24,720 --> 00:19:26,160
and all they did was put in the

531
00:19:26,160 --> 00:19:27,840
detection

532
00:19:27,840 --> 00:19:29,360
the entire command string with

533
00:19:29,360 --> 00:19:31,600
parameters and as we talked about an

534
00:19:31,600 --> 00:19:34,240
attacker doesn't have to do dash v2 they

535
00:19:34,240 --> 00:19:36,400
could do dash ve2

536
00:19:36,400 --> 00:19:39,760
and suddenly that breaks the signature

537
00:19:39,760 --> 00:19:41,280
so

538
00:19:41,280 --> 00:19:43,840
keep that disclaimer in mind

539
00:19:43,840 --> 00:19:45,360
well we'll talk a little bit about what

540
00:19:45,360 --> 00:19:47,280
the detections are and what we can put

541
00:19:47,280 --> 00:19:49,600
in place to really

542
00:19:49,600 --> 00:19:52,160
help detect and help prevent these

543
00:19:52,160 --> 00:19:53,600
issues

544
00:19:53,600 --> 00:19:55,360
the first thing is look at your network

545
00:19:55,360 --> 00:19:56,720
make sure you're getting some type of

546
00:19:56,720 --> 00:19:58,559
network telemetry

547
00:19:58,559 --> 00:20:00,000
and if you're seeing a lot of high

548
00:20:00,000 --> 00:20:02,240
entropy byte strings

549
00:20:02,240 --> 00:20:04,640
a lot of randomness there you want to

550
00:20:04,640 --> 00:20:05,440
see

551
00:20:05,440 --> 00:20:06,880
there could be a lot of encryption

552
00:20:06,880 --> 00:20:08,880
traffic going on a lot of times the way

553
00:20:08,880 --> 00:20:10,559
powershell especially the lazy

554
00:20:10,559 --> 00:20:12,000
ransomware works

555
00:20:12,000 --> 00:20:15,039
is it's trying to encrypt remotely

556
00:20:15,039 --> 00:20:17,200
you'll see something on the network so

557
00:20:17,200 --> 00:20:19,280
you want to do some type of analysis and

558
00:20:19,280 --> 00:20:21,600
see hey are we connecting to hosts that

559
00:20:21,600 --> 00:20:24,240
we normally don't do do we normally see

560
00:20:24,240 --> 00:20:26,480
powershell trying to actually create

561
00:20:26,480 --> 00:20:28,559
network connections

562
00:20:28,559 --> 00:20:30,080
on most people's systems you're not

563
00:20:30,080 --> 00:20:32,720
usually supposed to see that

564
00:20:32,720 --> 00:20:34,799
and then look at the end point

565
00:20:34,799 --> 00:20:36,480
are you expecting to see invoke

566
00:20:36,480 --> 00:20:38,640
expression or encoded command

567
00:20:38,640 --> 00:20:40,080
are you expecting to see that on your

568
00:20:40,080 --> 00:20:43,200
cfo's machine probably not

569
00:20:43,200 --> 00:20:45,919
is the bits activity normal uh bits

570
00:20:45,919 --> 00:20:47,280
stands for the background intelligent

571
00:20:47,280 --> 00:20:48,720
transfer service

572
00:20:48,720 --> 00:20:50,240
it's a way that microsoft lets you

573
00:20:50,240 --> 00:20:53,280
transfer large files quickly

574
00:20:53,280 --> 00:20:54,880
but should you be seeing a computer to

575
00:20:54,880 --> 00:20:57,440
computer as often as

576
00:20:57,440 --> 00:20:59,919
you may see in your logs

577
00:20:59,919 --> 00:21:02,080
and then really look and this is the one

578
00:21:02,080 --> 00:21:03,039
that i think is one of the most

579
00:21:03,039 --> 00:21:04,320
important

580
00:21:04,320 --> 00:21:07,320
system.management.automation.dll

581
00:21:07,679 --> 00:21:09,280
do you really

582
00:21:09,280 --> 00:21:11,120
see that normally being loaded into

583
00:21:11,120 --> 00:21:12,960
processes being spawned by something

584
00:21:12,960 --> 00:21:14,960
that's not powershell

585
00:21:14,960 --> 00:21:16,480
you might have some custom tools your

586
00:21:16,480 --> 00:21:18,240
dev team has built

587
00:21:18,240 --> 00:21:20,000
make sure those are signed

588
00:21:20,000 --> 00:21:21,600
but you really shouldn't be seeing these

589
00:21:21,600 --> 00:21:25,439
assemblies loaded into odd processes

590
00:21:26,720 --> 00:21:28,799
so how do we not panic what do we need

591
00:21:28,799 --> 00:21:31,440
to do to actually breathe know that what

592
00:21:31,440 --> 00:21:34,000
we're doing is detecting the attacker

593
00:21:34,000 --> 00:21:35,679
activity

594
00:21:35,679 --> 00:21:37,520
and we'll go into all of these in a bit

595
00:21:37,520 --> 00:21:39,520
but at the end of the day a lot of this

596
00:21:39,520 --> 00:21:41,600
does rely on logging

597
00:21:41,600 --> 00:21:43,200
and monitoring making sure you know what

598
00:21:43,200 --> 00:21:44,559
you're looking for and you can weed out

599
00:21:44,559 --> 00:21:45,760
the noise

600
00:21:45,760 --> 00:21:48,159
and then a few preventive controls

601
00:21:48,159 --> 00:21:50,000
such as just enough administration which

602
00:21:50,000 --> 00:21:51,200
is one of my favorites that we're

603
00:21:51,200 --> 00:21:54,640
working on implementing right now

604
00:21:55,760 --> 00:21:57,280
so the first we'll talk about is a

605
00:21:57,280 --> 00:21:59,440
system-wide transcript

606
00:21:59,440 --> 00:22:00,799
and this works

607
00:22:00,799 --> 00:22:02,559
even if you're using powershell without

608
00:22:02,559 --> 00:22:04,640
powershell so we talked about using

609
00:22:04,640 --> 00:22:06,400
c-sharp or something else to run

610
00:22:06,400 --> 00:22:09,039
powershell commands this will still work

611
00:22:09,039 --> 00:22:10,880
and this can be easily configured

612
00:22:10,880 --> 00:22:13,679
through the gpo or the registry

613
00:22:13,679 --> 00:22:16,320
and by default all of your transcripts

614
00:22:16,320 --> 00:22:18,480
are going to be saved in my documents so

615
00:22:18,480 --> 00:22:20,960
when you configure this via gpo you

616
00:22:20,960 --> 00:22:22,799
really kind of want to make sure that

617
00:22:22,799 --> 00:22:26,000
you create a separate mounted drive that

618
00:22:26,000 --> 00:22:27,760
it's right only where you can store

619
00:22:27,760 --> 00:22:29,840
those transcripts because they'll grow

620
00:22:29,840 --> 00:22:31,440
in size and you really don't want

621
00:22:31,440 --> 00:22:33,120
someone's computer to crash because of

622
00:22:33,120 --> 00:22:34,400
that

623
00:22:34,400 --> 00:22:36,720
and i would highly recommend do not

624
00:22:36,720 --> 00:22:39,039
enable this on a domain controller it

625
00:22:39,039 --> 00:22:41,440
will break the active directory gui i

626
00:22:41,440 --> 00:22:43,600
have no idea why but i've yet to have

627
00:22:43,600 --> 00:22:46,080
that work

628
00:22:47,440 --> 00:22:48,960
so i see a question about is this using

629
00:22:48,960 --> 00:22:51,520
just the windows security log so yes so

630
00:22:51,520 --> 00:22:54,240
this basically what this does in general

631
00:22:54,240 --> 00:22:56,159
with powershell you'll be using the

632
00:22:56,159 --> 00:22:58,400
windows log to find everything in this

633
00:22:58,400 --> 00:23:00,240
specific case though these transcripts

634
00:23:00,240 --> 00:23:02,480
don't use the log they actually output

635
00:23:02,480 --> 00:23:05,120
everything to a text file

636
00:23:05,120 --> 00:23:06,640
and i'll have this deck available to

637
00:23:06,640 --> 00:23:08,159
share as well which will include in the

638
00:23:08,159 --> 00:23:10,400
notes some of the uh the actual gpo

639
00:23:10,400 --> 00:23:13,200
locations where you can enable this

640
00:23:13,200 --> 00:23:15,120
so this case i actually like these

641
00:23:15,120 --> 00:23:17,039
transcripts because it's decoupled from

642
00:23:17,039 --> 00:23:19,120
the event log so you can actually write

643
00:23:19,120 --> 00:23:21,039
this to a separate folder immediately

644
00:23:21,039 --> 00:23:24,158
that's right protected

645
00:23:25,760 --> 00:23:28,159
and then one of the important ones here

646
00:23:28,159 --> 00:23:28,960
is

647
00:23:28,960 --> 00:23:31,919
script block logging and this provides

648
00:23:31,919 --> 00:23:33,679
module logging script blocks

649
00:23:33,679 --> 00:23:35,440
de-obfuscation suspicious script

650
00:23:35,440 --> 00:23:36,799
detection

651
00:23:36,799 --> 00:23:38,400
and the de-obfuscation is the most

652
00:23:38,400 --> 00:23:39,760
important

653
00:23:39,760 --> 00:23:41,600
what really really makes it difficult

654
00:23:41,600 --> 00:23:43,600
when you're investigating an incident is

655
00:23:43,600 --> 00:23:45,679
understanding what scripts the attackers

656
00:23:45,679 --> 00:23:47,039
ran

657
00:23:47,039 --> 00:23:48,799
by default the windows event log they

658
00:23:48,799 --> 00:23:50,640
have a character limit so a lot of times

659
00:23:50,640 --> 00:23:52,880
long scripts used to just get cut off

660
00:23:52,880 --> 00:23:55,120
after 255 characters

661
00:23:55,120 --> 00:23:57,520
or you'll see a bunch of nonsense when

662
00:23:57,520 --> 00:23:59,679
you have script lock logging turn on

663
00:23:59,679 --> 00:24:01,120
you'll be able to see the full script

664
00:24:01,120 --> 00:24:02,799
that gets executed and if it was

665
00:24:02,799 --> 00:24:05,679
obfuscated microsoft de-obfuscates it

666
00:24:05,679 --> 00:24:08,159
and basically shows you the script that

667
00:24:08,159 --> 00:24:10,159
it actually ran

668
00:24:10,159 --> 00:24:12,320
it's extremely important

669
00:24:12,320 --> 00:24:14,799
and it starts with in the verbose logs

670
00:24:14,799 --> 00:24:16,799
4104 so we talked about that of windows

671
00:24:16,799 --> 00:24:20,080
event log you'll be able to see that

672
00:24:20,080 --> 00:24:22,320
you'll have to do some fun correlation

673
00:24:22,320 --> 00:24:23,360
there

674
00:24:23,360 --> 00:24:25,039
so you'll see the script lock log in

675
00:24:25,039 --> 00:24:29,279
vacation start and stop 40 105 4106

676
00:24:29,279 --> 00:24:31,200
everything in between there is typically

677
00:24:31,200 --> 00:24:34,159
going to be part of that script

678
00:24:34,159 --> 00:24:37,039
it also checks for suspicious keywords

679
00:24:37,039 --> 00:24:39,120
so automatically invoke expression or

680
00:24:39,120 --> 00:24:42,000
iex any of those types of keywords are

681
00:24:42,000 --> 00:24:44,240
going to get caught and flagged this

682
00:24:44,240 --> 00:24:46,400
won't stop anything but this will at

683
00:24:46,400 --> 00:24:48,400
least tell you if something needs to be

684
00:24:48,400 --> 00:24:50,880
looked at

685
00:24:54,159 --> 00:24:56,640
and then we have the module logging

686
00:24:56,640 --> 00:24:58,880
so this records all of the pipeline

687
00:24:58,880 --> 00:25:00,640
execution details

688
00:25:00,640 --> 00:25:02,880
but it records a portion of scripts

689
00:25:02,880 --> 00:25:05,840
de-obfuscates some of the code

690
00:25:05,840 --> 00:25:07,360
not really reliable if you want

691
00:25:07,360 --> 00:25:09,200
everything but it's been available since

692
00:25:09,200 --> 00:25:10,640
powershell 3.

693
00:25:10,640 --> 00:25:12,960
so if you're not yet on powershell 5 if

694
00:25:12,960 --> 00:25:14,799
you can't turn on script lock logging at

695
00:25:14,799 --> 00:25:17,039
least make sure the module logging is on

696
00:25:17,039 --> 00:25:19,120
and use a wild card so you record all

697
00:25:19,120 --> 00:25:21,039
possible modules

698
00:25:21,039 --> 00:25:22,880
every single event gets written to one

699
00:25:22,880 --> 00:25:25,760
event id so if you are hunting if you

700
00:25:25,760 --> 00:25:27,760
are looking for something

701
00:25:27,760 --> 00:25:29,520
that's the event id you should be going

702
00:25:29,520 --> 00:25:30,480
for

703
00:25:30,480 --> 00:25:32,880
and again this can be set via gpo or the

704
00:25:32,880 --> 00:25:34,799
registry

705
00:25:34,799 --> 00:25:36,240
and then i didn't have room to put it

706
00:25:36,240 --> 00:25:38,320
here but i did do a little bit of a test

707
00:25:38,320 --> 00:25:41,360
on what happens if you run mimi cats

708
00:25:41,360 --> 00:25:45,200
and that generates over 2 000 events

709
00:25:45,200 --> 00:25:47,039
because the module logging includes

710
00:25:47,039 --> 00:25:48,880
variable initialization command

711
00:25:48,880 --> 00:25:51,520
invocations everything

712
00:25:51,520 --> 00:25:54,320
so it's going to take a lot of tweaking

713
00:25:54,320 --> 00:25:55,760
but it's really good to have for

714
00:25:55,760 --> 00:25:59,279
forensics just in case

715
00:26:02,880 --> 00:26:04,799
then we have something called amsi which

716
00:26:04,799 --> 00:26:06,720
is microsoft's anti-malware scan

717
00:26:06,720 --> 00:26:08,080
interface

718
00:26:08,080 --> 00:26:10,480
and that allows any registered antivirus

719
00:26:10,480 --> 00:26:11,840
provider if you're not using windows

720
00:26:11,840 --> 00:26:14,240
defender to also access it

721
00:26:14,240 --> 00:26:16,960
and what amsi does is it lets you access

722
00:26:16,960 --> 00:26:19,679
the contents of every powershell script

723
00:26:19,679 --> 00:26:22,080
before it gets executed

724
00:26:22,080 --> 00:26:24,240
there is no detection mechanisms they

725
00:26:24,240 --> 00:26:25,919
don't try to say hey it's weird you're

726
00:26:25,919 --> 00:26:28,000
injecting into this process

727
00:26:28,000 --> 00:26:29,520
but it gives you the contents of the

728
00:26:29,520 --> 00:26:30,559
script

729
00:26:30,559 --> 00:26:32,960
and it relies on your av signature based

730
00:26:32,960 --> 00:26:34,080
detection

731
00:26:34,080 --> 00:26:35,840
there's been a couple of bypasses

732
00:26:35,840 --> 00:26:38,400
microsoft then fixes them right now i'm

733
00:26:38,400 --> 00:26:41,279
not aware of any bypasses for this

734
00:26:41,279 --> 00:26:43,120
but it's important to keep in mind that

735
00:26:43,120 --> 00:26:45,279
this just evaluates and i highly

736
00:26:45,279 --> 00:26:47,200
recommend going to your antivirus

737
00:26:47,200 --> 00:26:49,600
provider and actually asking them

738
00:26:49,600 --> 00:26:53,120
do you hook into amsi and what do you do

739
00:26:53,120 --> 00:26:55,039
because i have had the unfortunate

740
00:26:55,039 --> 00:26:58,000
surprise of talking to my av provider at

741
00:26:58,000 --> 00:27:00,480
one company and finding out that

742
00:27:00,480 --> 00:27:02,720
they relied on their proprietary machine

743
00:27:02,720 --> 00:27:04,559
learning ai

744
00:27:04,559 --> 00:27:07,440
solution and didn't use amsi

745
00:27:07,440 --> 00:27:09,200
and then that script that i showed you

746
00:27:09,200 --> 00:27:11,120
way earlier in this presentation

747
00:27:11,120 --> 00:27:12,720
worked perfectly because they weren't

748
00:27:12,720 --> 00:27:14,480
able to see it

749
00:27:14,480 --> 00:27:17,679
so it's always worth asking

750
00:27:17,679 --> 00:27:20,000
and i do see a question here about the

751
00:27:20,000 --> 00:27:22,240
evil powershell frameworks and what i

752
00:27:22,240 --> 00:27:24,159
recommend to test

753
00:27:24,159 --> 00:27:26,640
to see if these the logging works

754
00:27:26,640 --> 00:27:29,039
um i would honestly say powersploit is

755
00:27:29,039 --> 00:27:30,799
one of my favorites that i use to test

756
00:27:30,799 --> 00:27:32,799
but invoke mimikatz is probably going to

757
00:27:32,799 --> 00:27:34,799
be one of the easiest ones you may want

758
00:27:34,799 --> 00:27:36,320
to disable your av while you're doing

759
00:27:36,320 --> 00:27:38,320
the test and obviously do it on an

760
00:27:38,320 --> 00:27:40,000
isolated system

761
00:27:40,000 --> 00:27:42,159
but that will generate a whole lot of

762
00:27:42,159 --> 00:27:43,919
noise and it'll let you run it a few

763
00:27:43,919 --> 00:27:45,520
different ways so you can actually test

764
00:27:45,520 --> 00:27:47,760
what logs are being created what do they

765
00:27:47,760 --> 00:27:49,200
look like

766
00:27:49,200 --> 00:27:50,880
and then build some of your rules and

767
00:27:50,880 --> 00:27:53,200
correlations that way

768
00:27:53,200 --> 00:27:56,159
but a really good question

769
00:27:58,000 --> 00:28:00,080
and then for organizations that don't

770
00:28:00,080 --> 00:28:02,640
really use powershell often you want to

771
00:28:02,640 --> 00:28:04,559
look at something called the constrained

772
00:28:04,559 --> 00:28:07,600
language mode it's not a panacea it's a

773
00:28:07,600 --> 00:28:10,000
kind of an interim step

774
00:28:10,000 --> 00:28:12,399
but it lets you limit the allowed types

775
00:28:12,399 --> 00:28:14,720
of commandlets so for example

776
00:28:14,720 --> 00:28:16,480
that script i ran earlier

777
00:28:16,480 --> 00:28:18,320
would not work because i wouldn't be

778
00:28:18,320 --> 00:28:20,240
allowed to create a com object

779
00:28:20,240 --> 00:28:22,799
i wouldn't be allowed to add an assembly

780
00:28:22,799 --> 00:28:24,480
i wouldn't be able to connect to the

781
00:28:24,480 --> 00:28:27,360
windows 32 apis

782
00:28:27,360 --> 00:28:31,200
it works with app blocker but if anyone

783
00:28:31,200 --> 00:28:32,640
who may have touched app blocker in the

784
00:28:32,640 --> 00:28:35,120
past it's not very user friendly it's

785
00:28:35,120 --> 00:28:37,440
very finicky so it's great for small

786
00:28:37,440 --> 00:28:39,679
organizations that don't really use it

787
00:28:39,679 --> 00:28:41,440
or even a large organization where you

788
00:28:41,440 --> 00:28:42,320
know

789
00:28:42,320 --> 00:28:43,760
people really shouldn't be using

790
00:28:43,760 --> 00:28:45,760
powershell

791
00:28:45,760 --> 00:28:48,320
and it can unfortunately be bypassed by

792
00:28:48,320 --> 00:28:50,480
a determined attacker

793
00:28:50,480 --> 00:28:53,039
i've actually not seen any thread actors

794
00:28:53,039 --> 00:28:54,720
trying to run these in the malware that

795
00:28:54,720 --> 00:28:55,919
i've seen

796
00:28:55,919 --> 00:28:56,720
but

797
00:28:56,720 --> 00:28:58,640
if you had a human-operated attacker

798
00:28:58,640 --> 00:29:00,399
attack they just need to remove an

799
00:29:00,399 --> 00:29:02,000
environment variable and they've gotten

800
00:29:02,000 --> 00:29:04,640
rid of constrained language mode

801
00:29:04,640 --> 00:29:05,919
good idea

802
00:29:05,919 --> 00:29:07,600
kind of shoddy implementation by

803
00:29:07,600 --> 00:29:10,240
microsoft

804
00:29:11,200 --> 00:29:13,200
and then the next is kind of somewhat

805
00:29:13,200 --> 00:29:15,120
tangential but it's protected event

806
00:29:15,120 --> 00:29:16,159
logging

807
00:29:16,159 --> 00:29:18,559
and one of the problems you'll notice if

808
00:29:18,559 --> 00:29:22,000
you're really logging everything

809
00:29:22,000 --> 00:29:23,279
you're going to end up with credentials

810
00:29:23,279 --> 00:29:24,559
you're going to end up with sensitive

811
00:29:24,559 --> 00:29:26,960
data in those logs whether an attacker

812
00:29:26,960 --> 00:29:28,480
ends up being able to view those logs

813
00:29:28,480 --> 00:29:29,919
because they're on the system directly

814
00:29:29,919 --> 00:29:32,399
or you're putting it into your sim

815
00:29:32,399 --> 00:29:33,600
you want to turn on something called

816
00:29:33,600 --> 00:29:36,399
protected event login that will actually

817
00:29:36,399 --> 00:29:38,399
encrypt sensitive data when it's written

818
00:29:38,399 --> 00:29:39,520
to the log

819
00:29:39,520 --> 00:29:41,279
and you can decrypt it once it's moved

820
00:29:41,279 --> 00:29:43,760
to a more secure location

821
00:29:43,760 --> 00:29:46,480
it's only exists in windows 10

822
00:29:46,480 --> 00:29:48,240
it's supported by powershell but you

823
00:29:48,240 --> 00:29:50,480
have to have powershell version 5 and a

824
00:29:50,480 --> 00:29:53,279
specific kb installed

825
00:29:53,279 --> 00:29:55,919
and you could just enable it through gpo

826
00:29:55,919 --> 00:29:57,600
but again i highly recommend if you're

827
00:29:57,600 --> 00:30:00,959
able to to enable this

828
00:30:02,240 --> 00:30:03,600
all right and then i have a question

829
00:30:03,600 --> 00:30:05,600
here about have we seen or currently use

830
00:30:05,600 --> 00:30:07,600
a sim to capture these logs and check

831
00:30:07,600 --> 00:30:08,720
them

832
00:30:08,720 --> 00:30:11,440
so i'm in the process right now of of

833
00:30:11,440 --> 00:30:13,200
doing that we've been doing some testing

834
00:30:13,200 --> 00:30:14,960
to find the right event logs that work

835
00:30:14,960 --> 00:30:16,399
in the right volume

836
00:30:16,399 --> 00:30:18,640
but yes i have used this in the past

837
00:30:18,640 --> 00:30:20,799
where we've sent this to a sim you could

838
00:30:20,799 --> 00:30:22,880
send this to pretty much anything

839
00:30:22,880 --> 00:30:24,240
because they are mostly windows event

840
00:30:24,240 --> 00:30:25,520
logs

841
00:30:25,520 --> 00:30:27,279
and then use those to kind of search

842
00:30:27,279 --> 00:30:29,760
through and do some correlations

843
00:30:29,760 --> 00:30:32,640
for instance any user that wasn't in it

844
00:30:32,640 --> 00:30:34,080
and we started seeing activity from

845
00:30:34,080 --> 00:30:35,440
powershell

846
00:30:35,440 --> 00:30:37,440
that was an immediate red flag for us so

847
00:30:37,440 --> 00:30:39,279
we had to build a lot of these use cases

848
00:30:39,279 --> 00:30:41,760
ourselves i haven't seen many sims that

849
00:30:41,760 --> 00:30:43,600
have out of the box give us all the

850
00:30:43,600 --> 00:30:45,120
powershell logs and we know what to do

851
00:30:45,120 --> 00:30:46,000
with them

852
00:30:46,000 --> 00:30:47,679
so you'll have to think of those use

853
00:30:47,679 --> 00:30:49,520
cases on your own

854
00:30:49,520 --> 00:30:51,679
but you are most sims should be able to

855
00:30:51,679 --> 00:30:54,640
import those logs pretty easily

856
00:30:54,640 --> 00:30:56,240
the only exception are going to be those

857
00:30:56,240 --> 00:30:57,840
transcripts

858
00:30:57,840 --> 00:30:59,519
and to be honest putting those into

859
00:30:59,519 --> 00:31:01,200
something like elk or splunk is

860
00:31:01,200 --> 00:31:02,320
something that just lets you search

861
00:31:02,320 --> 00:31:03,600
through that text

862
00:31:03,600 --> 00:31:04,799
will help because those are going to be

863
00:31:04,799 --> 00:31:08,158
mostly used for forensics

864
00:31:11,200 --> 00:31:12,960
and then another area that i would

865
00:31:12,960 --> 00:31:16,080
recommend you look at is winrm so it's

866
00:31:16,080 --> 00:31:18,799
the windows remoting

867
00:31:18,799 --> 00:31:20,799
you want to limit that scope only to

868
00:31:20,799 --> 00:31:23,600
administration networks if you have them

869
00:31:23,600 --> 00:31:25,679
or disable it where it's not necessary

870
00:31:25,679 --> 00:31:27,760
because powershell will a lot of the

871
00:31:27,760 --> 00:31:30,080
times use winrm to remote and move

872
00:31:30,080 --> 00:31:32,080
through the environment you're not going

873
00:31:32,080 --> 00:31:33,840
to see the type of activity you normally

874
00:31:33,840 --> 00:31:37,519
see for rdp or even just smb connections

875
00:31:37,519 --> 00:31:39,519
so you want to really monitor usage for

876
00:31:39,519 --> 00:31:41,679
winram logs and network activity and if

877
00:31:41,679 --> 00:31:43,279
you see that

878
00:31:43,279 --> 00:31:47,320
you may have an issue

879
00:31:48,880 --> 00:31:50,960
so the next item i want to spend some

880
00:31:50,960 --> 00:31:53,360
time on is something called just enough

881
00:31:53,360 --> 00:31:56,000
administration or jea

882
00:31:56,000 --> 00:31:58,080
and it's essentially role based access

883
00:31:58,080 --> 00:32:00,240
control using powershell

884
00:32:00,240 --> 00:32:02,640
so one of the biggest challenges in most

885
00:32:02,640 --> 00:32:05,039
organizations i've been to is

886
00:32:05,039 --> 00:32:07,120
the people in the domain admins group

887
00:32:07,120 --> 00:32:09,039
you have a lot of people in there but

888
00:32:09,039 --> 00:32:11,360
they don't necessarily need to be

889
00:32:11,360 --> 00:32:12,799
and when i've asked why do you got 20

890
00:32:12,799 --> 00:32:15,120
people here the answers are something

891
00:32:15,120 --> 00:32:16,799
well he has to manage the dns and in

892
00:32:16,799 --> 00:32:19,200
order to manage dns you have to be an

893
00:32:19,200 --> 00:32:21,200
admin on a domain controller

894
00:32:21,200 --> 00:32:23,519
and this person needs to join systems to

895
00:32:23,519 --> 00:32:25,519
the domain so he has to have these

896
00:32:25,519 --> 00:32:27,760
permissions

897
00:32:27,760 --> 00:32:29,919
instead of giving them just exactly what

898
00:32:29,919 --> 00:32:32,080
they need to do their jobs they're given

899
00:32:32,080 --> 00:32:34,320
a blanket domain admin role

900
00:32:34,320 --> 00:32:36,399
so just enough administration actually

901
00:32:36,399 --> 00:32:38,679
lets you create roles that lets

902
00:32:38,679 --> 00:32:41,519
non-administrators perform very specific

903
00:32:41,519 --> 00:32:43,120
administrative tasks

904
00:32:43,120 --> 00:32:45,679
so i can let someone manage the active

905
00:32:45,679 --> 00:32:48,159
directory dns service

906
00:32:48,159 --> 00:32:49,360
but he's not going to have the ability

907
00:32:49,360 --> 00:32:51,279
to remove machines or people from the

908
00:32:51,279 --> 00:32:53,279
domain

909
00:32:53,279 --> 00:32:54,559
this is something i would highly

910
00:32:54,559 --> 00:32:56,080
recommend working with your teams on

911
00:32:56,080 --> 00:32:58,399
it's one of my favorite remediations it

912
00:32:58,399 --> 00:33:00,240
takes some time to implement

913
00:33:00,240 --> 00:33:01,679
but it's probably the best bang for your

914
00:33:01,679 --> 00:33:05,360
bucket reducing privileged access

915
00:33:05,360 --> 00:33:07,440
every single one of the end points that

916
00:33:07,440 --> 00:33:09,120
just that just enough administration is

917
00:33:09,120 --> 00:33:11,760
on also has transcription and logging

918
00:33:11,760 --> 00:33:13,200
enabled

919
00:33:13,200 --> 00:33:15,840
but it does require windows 10

920
00:33:15,840 --> 00:33:19,279
the earliest server it supports is 2016

921
00:33:19,279 --> 00:33:22,480
and it requires powershell version 5.

922
00:33:22,480 --> 00:33:24,399
and again this is going to be to me if

923
00:33:24,399 --> 00:33:27,600
there's one takeaway this is one of the

924
00:33:27,600 --> 00:33:30,000
best approaches you can take to limit

925
00:33:30,000 --> 00:33:31,760
what someone can do maliciously with

926
00:33:31,760 --> 00:33:34,399
powershell

927
00:33:37,679 --> 00:33:39,200
and let's talk a little bit about some

928
00:33:39,200 --> 00:33:41,279
of the interesting activity

929
00:33:41,279 --> 00:33:43,360
that you can see

930
00:33:43,360 --> 00:33:44,320
so

931
00:33:44,320 --> 00:33:47,200
we talked about invoke expression

932
00:33:47,200 --> 00:33:50,399
what you'll nine times 9.9 times out of

933
00:33:50,399 --> 00:33:52,559
10c is when you see invoke expression

934
00:33:52,559 --> 00:33:53,679
you're going to see

935
00:33:53,679 --> 00:33:56,679
system.net.webclientactivity

936
00:33:56,880 --> 00:33:59,519
and that is the c-sharp object that is

937
00:33:59,519 --> 00:34:02,799
used to download files that's used to

938
00:34:02,799 --> 00:34:05,600
pretty much download a file into memory

939
00:34:05,600 --> 00:34:07,600
run it powershell and now you have

940
00:34:07,600 --> 00:34:10,320
ransomware that's running in memory not

941
00:34:10,320 --> 00:34:13,679
touching the disk itself

942
00:34:13,679 --> 00:34:16,079
if you see encoded command and the word

943
00:34:16,079 --> 00:34:18,079
or the word bypass

944
00:34:18,079 --> 00:34:19,918
if you see any bits activity that you're

945
00:34:19,918 --> 00:34:21,918
not really expecting

946
00:34:21,918 --> 00:34:23,359
you want to investigate that pretty

947
00:34:23,359 --> 00:34:24,800
quickly because that can mean your data

948
00:34:24,800 --> 00:34:25,918
is leaving

949
00:34:25,918 --> 00:34:27,359
before the criminals are getting ready

950
00:34:27,359 --> 00:34:29,119
to actually trash the systems on the way

951
00:34:29,119 --> 00:34:30,800
out

952
00:34:30,800 --> 00:34:32,639
if you actually see any manipulation of

953
00:34:32,639 --> 00:34:34,239
schedule tasks this is actually an

954
00:34:34,239 --> 00:34:36,079
interesting tactic i've observed from a

955
00:34:36,079 --> 00:34:37,679
couple thread actors where rather than

956
00:34:37,679 --> 00:34:40,320
creating a new schedule task

957
00:34:40,320 --> 00:34:42,239
most users have google chrome on their

958
00:34:42,239 --> 00:34:44,480
system google chrome typically creates a

959
00:34:44,480 --> 00:34:46,839
schedule task to manage their

960
00:34:46,839 --> 00:34:48,639
updater well

961
00:34:48,639 --> 00:34:50,079
no one really looks at that everyone's

962
00:34:50,079 --> 00:34:52,320
used to seeing that so what happens if

963
00:34:52,320 --> 00:34:54,480
an attacker just modifies that lets the

964
00:34:54,480 --> 00:34:56,560
update work but then just tacks on a few

965
00:34:56,560 --> 00:34:58,079
extra commands

966
00:34:58,079 --> 00:35:01,280
very few people take a look at that

967
00:35:01,280 --> 00:35:02,960
you'll want to look for any activity for

968
00:35:02,960 --> 00:35:06,800
win rm which is powershell remoting

969
00:35:06,800 --> 00:35:08,640
and if you want to look at the amsi

970
00:35:08,640 --> 00:35:10,320
results the anti-malware scanner

971
00:35:10,320 --> 00:35:11,520
interface

972
00:35:11,520 --> 00:35:13,760
these two powershell commands can be run

973
00:35:13,760 --> 00:35:15,280
and it'll show you by the initial

974
00:35:15,280 --> 00:35:17,359
detection time or the last time the

975
00:35:17,359 --> 00:35:19,680
threat status changed any threats that

976
00:35:19,680 --> 00:35:23,200
it saw on the on the machine

977
00:35:23,200 --> 00:35:25,520
and then lastly

978
00:35:25,520 --> 00:35:28,079
please no more local administrators just

979
00:35:28,079 --> 00:35:29,520
stop doing it

980
00:35:29,520 --> 00:35:31,920
the default local admin protect it using

981
00:35:31,920 --> 00:35:33,680
microsoft lapse

982
00:35:33,680 --> 00:35:35,680
but that's it

983
00:35:35,680 --> 00:35:37,839
and don't interactively remote into

984
00:35:37,839 --> 00:35:40,160
systems it's very common i've seen for a

985
00:35:40,160 --> 00:35:42,079
lot of system administration activities

986
00:35:42,079 --> 00:35:43,760
it's sometimes easier

987
00:35:43,760 --> 00:35:47,119
remote desktop go into someone's system

988
00:35:47,119 --> 00:35:49,200
and do what you need to do the problem

989
00:35:49,200 --> 00:35:50,640
with that is it not only creates a

990
00:35:50,640 --> 00:35:53,040
profile on their system for your account

991
00:35:53,040 --> 00:35:55,280
your credentials are getting cached

992
00:35:55,280 --> 00:35:57,599
and even though we've seen every talk at

993
00:35:57,599 --> 00:35:59,440
black hat for the last probably 10 years

994
00:35:59,440 --> 00:36:01,760
or so that mentioned to restrict cash

995
00:36:01,760 --> 00:36:03,680
log on credentials

996
00:36:03,680 --> 00:36:05,359
i've yet to really see a company that

997
00:36:05,359 --> 00:36:07,040
has restricted the cash log on

998
00:36:07,040 --> 00:36:09,440
credentials to one or zero

999
00:36:09,440 --> 00:36:10,480
and that means every time you're

1000
00:36:10,480 --> 00:36:12,480
interactively logging on they're caching

1001
00:36:12,480 --> 00:36:14,000
credentials

1002
00:36:14,000 --> 00:36:15,920
so again please don't use your admin

1003
00:36:15,920 --> 00:36:18,560
account for that

1004
00:36:19,520 --> 00:36:22,240
and then get some usage statistics

1005
00:36:22,240 --> 00:36:24,720
try to audit all script execution that

1006
00:36:24,720 --> 00:36:26,720
happens in your environment because odds

1007
00:36:26,720 --> 00:36:29,440
are outside of it and outside of known

1008
00:36:29,440 --> 00:36:31,599
scripts such as your logon scripts your

1009
00:36:31,599 --> 00:36:33,520
vulnerability scanning scripts you

1010
00:36:33,520 --> 00:36:36,000
shouldn't be seeing too much

1011
00:36:36,000 --> 00:36:38,240
and then do a trend analysis

1012
00:36:38,240 --> 00:36:40,880
if i ran powershell on 40 computers

1013
00:36:40,880 --> 00:36:42,400
today

1014
00:36:42,400 --> 00:36:44,640
but until today i've only ever run it on

1015
00:36:44,640 --> 00:36:46,000
one

1016
00:36:46,000 --> 00:36:48,000
might want to report on that

1017
00:36:48,000 --> 00:36:49,280
and you don't have to pay money for this

1018
00:36:49,280 --> 00:36:51,760
type of activity if you for instance use

1019
00:36:51,760 --> 00:36:54,079
sccm their software metering can report

1020
00:36:54,079 --> 00:36:55,760
on it

1021
00:36:55,760 --> 00:36:57,760
track the powershell remoting usage and

1022
00:36:57,760 --> 00:36:59,839
trends there are going to be times where

1023
00:36:59,839 --> 00:37:01,040
system administrators will use

1024
00:37:01,040 --> 00:37:02,560
powershell remoting

1025
00:37:02,560 --> 00:37:03,839
but make sure that's part of their

1026
00:37:03,839 --> 00:37:06,320
normal playbook and if it is

1027
00:37:06,320 --> 00:37:07,760
what are the trends and how is it

1028
00:37:07,760 --> 00:37:10,800
typically used

1029
00:37:12,240 --> 00:37:13,119
so

1030
00:37:13,119 --> 00:37:14,800
let's pivot and talk a little bit about

1031
00:37:14,800 --> 00:37:17,680
some of the event ids that you'll see

1032
00:37:17,680 --> 00:37:21,520
and just note this is not everything

1033
00:37:21,520 --> 00:37:23,599
but you'll see a few here that i highly

1034
00:37:23,599 --> 00:37:25,200
recommend taking a look at and making

1035
00:37:25,200 --> 00:37:28,640
sure your sim is capturing these

1036
00:37:28,640 --> 00:37:31,520
for instance in an 800 pipeline

1037
00:37:31,520 --> 00:37:33,359
execution detail

1038
00:37:33,359 --> 00:37:35,040
check that host application field

1039
00:37:35,040 --> 00:37:37,200
because it shows what executed

1040
00:37:37,200 --> 00:37:39,200
if you see a version mismatch between

1041
00:37:39,200 --> 00:37:41,760
the host version and the engine version

1042
00:37:41,760 --> 00:37:42,880
something is going to be a little

1043
00:37:42,880 --> 00:37:44,160
finicky

1044
00:37:44,160 --> 00:37:46,000
and the host application should almost

1045
00:37:46,000 --> 00:37:49,880
always be a standard microsoft service

1046
00:37:49,880 --> 00:37:52,400
4688 is one of the best ones that you

1047
00:37:52,400 --> 00:37:54,480
can use to see if powershell is being

1048
00:37:54,480 --> 00:37:55,680
launched from something else because

1049
00:37:55,680 --> 00:37:56,880
what it does

1050
00:37:56,880 --> 00:37:58,960
is it shows you what process

1051
00:37:58,960 --> 00:38:00,560
launches other processes from the

1052
00:38:00,560 --> 00:38:03,960
command line

1053
00:38:04,800 --> 00:38:07,200
again to get some of these you have to

1054
00:38:07,200 --> 00:38:10,880
be on powershell version five

1055
00:38:10,880 --> 00:38:14,079
please make sure you do that

1056
00:38:14,320 --> 00:38:17,359
onenote over here for event id 500 the

1057
00:38:17,359 --> 00:38:19,520
command life cycle

1058
00:38:19,520 --> 00:38:22,000
if an attacker just does no profile as a

1059
00:38:22,000 --> 00:38:23,440
parameter

1060
00:38:23,440 --> 00:38:26,320
nothing is going to appear here

1061
00:38:26,320 --> 00:38:30,160
so it's a nice to have but definitely

1062
00:38:30,160 --> 00:38:31,760
you're not going to see much

1063
00:38:31,760 --> 00:38:33,520
but when you're correlated in your sim

1064
00:38:33,520 --> 00:38:35,119
and you see hey i see powershell

1065
00:38:35,119 --> 00:38:36,960
executed

1066
00:38:36,960 --> 00:38:39,200
but then i see no event 500 i see

1067
00:38:39,200 --> 00:38:40,400
nothing

1068
00:38:40,400 --> 00:38:41,760
that's typically an indicator that

1069
00:38:41,760 --> 00:38:43,520
someone ran powershell without a profile

1070
00:38:43,520 --> 00:38:47,240
and you need to take a look

1071
00:38:47,839 --> 00:38:49,920
and some additional tips to talk about

1072
00:38:49,920 --> 00:38:50,960
is

1073
00:38:50,960 --> 00:38:53,599
require digitally signed macros i know

1074
00:38:53,599 --> 00:38:55,280
it's very hard to do this i've been

1075
00:38:55,280 --> 00:38:56,720
working the financial industry for

1076
00:38:56,720 --> 00:38:59,359
pretty much my entire career and trying

1077
00:38:59,359 --> 00:39:01,440
to convince people that financial

1078
00:39:01,440 --> 00:39:04,160
analysts or quants need to

1079
00:39:04,160 --> 00:39:06,400
digitally sign all their macros or make

1080
00:39:06,400 --> 00:39:07,599
sure that the macros they get from

1081
00:39:07,599 --> 00:39:10,800
vendors are signed it's tough

1082
00:39:10,800 --> 00:39:11,520
but

1083
00:39:11,520 --> 00:39:13,599
disable macros then and only allow

1084
00:39:13,599 --> 00:39:15,680
specific groups to use them what we've

1085
00:39:15,680 --> 00:39:17,680
started doing pretty successfully is

1086
00:39:17,680 --> 00:39:19,280
they know there's this very specific

1087
00:39:19,280 --> 00:39:20,800
folder on their computer where they're

1088
00:39:20,800 --> 00:39:23,599
allowed to run macros and that's it if

1089
00:39:23,599 --> 00:39:25,680
the macro runs directly from outlook if

1090
00:39:25,680 --> 00:39:27,119
it runs from the downloads folder from

1091
00:39:27,119 --> 00:39:29,760
anywhere else it doesn't run

1092
00:39:29,760 --> 00:39:31,200
so you want to really take a look at

1093
00:39:31,200 --> 00:39:32,960
that and make sure that

1094
00:39:32,960 --> 00:39:35,520
you're limiting macros where you can

1095
00:39:35,520 --> 00:39:37,280
allow lists by role

1096
00:39:37,280 --> 00:39:39,520
and then baseline usage

1097
00:39:39,520 --> 00:39:41,040
an it administrator's usage of

1098
00:39:41,040 --> 00:39:43,119
powershell is going to be very different

1099
00:39:43,119 --> 00:39:45,920
from the cfos

1100
00:39:48,560 --> 00:39:50,880
so let's talk a little bit case study is

1101
00:39:50,880 --> 00:39:52,480
a strong word here but i wanted to sound

1102
00:39:52,480 --> 00:39:54,320
fancy

1103
00:39:54,320 --> 00:39:55,599
let's talk about just a report that

1104
00:39:55,599 --> 00:39:58,240
fireeye put out some time back about

1105
00:39:58,240 --> 00:40:00,320
kind of a ransomware attack called head

1106
00:40:00,320 --> 00:40:01,680
fake

1107
00:40:01,680 --> 00:40:03,599
and in the flow here

1108
00:40:03,599 --> 00:40:06,240
we see that the attackers redirected a

1109
00:40:06,240 --> 00:40:08,000
user to one of those fake updates your

1110
00:40:08,000 --> 00:40:09,680
adobe's out of date your browser's out

1111
00:40:09,680 --> 00:40:11,119
of date

1112
00:40:11,119 --> 00:40:13,760
the drydex malware was installed

1113
00:40:13,760 --> 00:40:16,240
and once it and then x on execution it

1114
00:40:16,240 --> 00:40:18,560
used powershell empire and kodiak to

1115
00:40:18,560 --> 00:40:20,800
move laterally throughout the network to

1116
00:40:20,800 --> 00:40:22,400
perform reconnaissance to learn about

1117
00:40:22,400 --> 00:40:25,280
what else was there gather information

1118
00:40:25,280 --> 00:40:28,880
and then move throughout the environment

1119
00:40:29,040 --> 00:40:30,160
so

1120
00:40:30,160 --> 00:40:32,000
what do we actually learn from that

1121
00:40:32,000 --> 00:40:33,839
they're using ps remoting they're using

1122
00:40:33,839 --> 00:40:36,560
rdp they're using a powershell framework

1123
00:40:36,560 --> 00:40:39,119
as a c2

1124
00:40:39,119 --> 00:40:40,880
what could we have looked for

1125
00:40:40,880 --> 00:40:42,880
well here's some interesting event logs

1126
00:40:42,880 --> 00:40:44,960
that i would highly recommend seeing so

1127
00:40:44,960 --> 00:40:46,960
event id 600

1128
00:40:46,960 --> 00:40:49,200
you see the powershell logs the host

1129
00:40:49,200 --> 00:40:52,319
application was powershell.exe

1130
00:40:52,319 --> 00:40:54,160
and it was setting

1131
00:40:54,160 --> 00:40:56,560
to disable monitoring

1132
00:40:56,560 --> 00:40:58,160
the next command

1133
00:40:58,160 --> 00:41:00,079
was to uninstall defender

1134
00:41:00,079 --> 00:41:01,599
and then we see when we correlate it

1135
00:41:01,599 --> 00:41:04,319
with event id 1034

1136
00:41:04,319 --> 00:41:08,079
that windows successfully removed it

1137
00:41:08,319 --> 00:41:10,079
so it's always important that you make

1138
00:41:10,079 --> 00:41:12,720
sure that you have these event ids in

1139
00:41:12,720 --> 00:41:15,119
place that you're understanding what

1140
00:41:15,119 --> 00:41:16,560
they can show

1141
00:41:16,560 --> 00:41:17,839
and test it out someone asked the

1142
00:41:17,839 --> 00:41:20,240
question earlier about using these types

1143
00:41:20,240 --> 00:41:20,960
of

1144
00:41:20,960 --> 00:41:22,800
evil power shell to test logging and

1145
00:41:22,800 --> 00:41:25,440
that's a really great idea

1146
00:41:25,440 --> 00:41:27,040
there's actually a project an open

1147
00:41:27,040 --> 00:41:29,200
source project called atomic red team

1148
00:41:29,200 --> 00:41:31,200
i'd highly recommend taking a look at it

1149
00:41:31,200 --> 00:41:34,079
they use these atomic very narrow

1150
00:41:34,079 --> 00:41:36,240
focused tests that you could run in

1151
00:41:36,240 --> 00:41:37,359
powershell

1152
00:41:37,359 --> 00:41:39,280
and the goal is to see all right did my

1153
00:41:39,280 --> 00:41:42,640
edr detected did my av detect it

1154
00:41:42,640 --> 00:41:46,000
do the logs show me anything interesting

1155
00:41:46,000 --> 00:41:48,160
because each of these types of cases can

1156
00:41:48,160 --> 00:41:50,160
trigger different logs but you'll start

1157
00:41:50,160 --> 00:41:51,760
seeing a pattern

1158
00:41:51,760 --> 00:41:53,839
if you start seeing for example disable

1159
00:41:53,839 --> 00:41:55,760
real-time monitoring

1160
00:41:55,760 --> 00:41:57,359
that's actually a useful signature

1161
00:41:57,359 --> 00:41:59,040
because you should almost never see that

1162
00:41:59,040 --> 00:42:02,599
in an event log

1163
00:42:05,119 --> 00:42:07,040
so just a little bit of a wrap up and

1164
00:42:07,040 --> 00:42:08,400
then we'll have some time for some

1165
00:42:08,400 --> 00:42:10,160
questions but

1166
00:42:10,160 --> 00:42:11,760
what's really important here is make

1167
00:42:11,760 --> 00:42:13,760
sure you're using powershell version 5

1168
00:42:13,760 --> 00:42:16,720
and remove all other versions you do not

1169
00:42:16,720 --> 00:42:18,400
need to have powershell 2.0 in your

1170
00:42:18,400 --> 00:42:22,560
environment there is no need whatsoever

1171
00:42:22,560 --> 00:42:24,640
and just like all microsoft products

1172
00:42:24,640 --> 00:42:27,119
security is not enabled out of the box

1173
00:42:27,119 --> 00:42:29,040
it would be great if the gpo settings

1174
00:42:29,040 --> 00:42:31,200
for powershell logging were turned on if

1175
00:42:31,200 --> 00:42:32,880
it was just another

1176
00:42:32,880 --> 00:42:34,720
event log folder

1177
00:42:34,720 --> 00:42:36,640
unfortunately it's not

1178
00:42:36,640 --> 00:42:38,240
so there's a lot of gpos you're gonna

1179
00:42:38,240 --> 00:42:39,680
have to go through to turn on there's

1180
00:42:39,680 --> 00:42:41,839
gonna be some trial and error

1181
00:42:41,839 --> 00:42:43,760
but it's worth it

1182
00:42:43,760 --> 00:42:46,400
make sure you layer your defenses

1183
00:42:46,400 --> 00:42:48,640
we talked a little bit about

1184
00:42:48,640 --> 00:42:49,920
kind of going through looking at your

1185
00:42:49,920 --> 00:42:52,240
network logs your endpoint logs you're

1186
00:42:52,240 --> 00:42:53,760
gonna have to correlate between all of

1187
00:42:53,760 --> 00:42:55,680
them to find that badness

1188
00:42:55,680 --> 00:42:57,280
if you have powershell that runs and

1189
00:42:57,280 --> 00:42:58,560
starts trying to encrypt files

1190
00:42:58,560 --> 00:43:00,240
throughout the network that communicates

1191
00:43:00,240 --> 00:43:03,040
with a c2 server

1192
00:43:03,040 --> 00:43:04,960
you're going to need to detect that

1193
00:43:04,960 --> 00:43:06,560
there's been some tactics i've seen

1194
00:43:06,560 --> 00:43:09,040
where attackers would use dns text

1195
00:43:09,040 --> 00:43:11,040
records as a way to communicate with c2

1196
00:43:11,040 --> 00:43:13,599
servers where they would use

1197
00:43:13,599 --> 00:43:16,480
social media to communicate

1198
00:43:16,480 --> 00:43:18,160
but if you can use powershell to see

1199
00:43:18,160 --> 00:43:20,079
what is happening or what processes it's

1200
00:43:20,079 --> 00:43:22,960
spawning it's really helpful

1201
00:43:22,960 --> 00:43:25,680
and remember that powershell.exe is not

1202
00:43:25,680 --> 00:43:28,400
the same as just powershell you can have

1203
00:43:28,400 --> 00:43:30,960
unsharper you can have sharp pick

1204
00:43:30,960 --> 00:43:32,480
there's tons of different ways to

1205
00:43:32,480 --> 00:43:34,480
execute powershell so make sure you look

1206
00:43:34,480 --> 00:43:36,000
a little broader than just

1207
00:43:36,000 --> 00:43:38,800
powershell.exe

1208
00:43:38,800 --> 00:43:40,560
and remember that allow listing and

1209
00:43:40,560 --> 00:43:42,560
baselining is your friend

1210
00:43:42,560 --> 00:43:44,480
baseline the usage of powershell in your

1211
00:43:44,480 --> 00:43:46,960
environment understand who uses it how

1212
00:43:46,960 --> 00:43:49,200
they use it why they use it

1213
00:43:49,200 --> 00:43:50,960
and then if you can start looking at

1214
00:43:50,960 --> 00:43:53,040
allow listings so make sure certain

1215
00:43:53,040 --> 00:43:55,040
users can use it others who may not need

1216
00:43:55,040 --> 00:43:57,040
to shouldn't use it

1217
00:43:57,040 --> 00:43:59,200
there's the windows defender application

1218
00:43:59,200 --> 00:44:02,880
control feature which just came out

1219
00:44:02,880 --> 00:44:04,640
last couple years i think

1220
00:44:04,640 --> 00:44:06,560
and it's kind of a hybrid of credential

1221
00:44:06,560 --> 00:44:08,240
guard and applocker

1222
00:44:08,240 --> 00:44:10,160
take a look at using that and combining

1223
00:44:10,160 --> 00:44:12,880
it with app blocker so that you can

1224
00:44:12,880 --> 00:44:15,200
block the bad guys from using powershell

1225
00:44:15,200 --> 00:44:16,880
but making sure that your own scripts

1226
00:44:16,880 --> 00:44:18,880
your it administrators are still able to

1227
00:44:18,880 --> 00:44:21,880
function

1228
00:44:22,240 --> 00:44:25,760
and if you had to prioritize

1229
00:44:25,760 --> 00:44:27,520
absolute first thing you should do

1230
00:44:27,520 --> 00:44:30,640
absolute right now please do this today

1231
00:44:30,640 --> 00:44:33,440
is disable powershell version two

1232
00:44:33,440 --> 00:44:35,760
that's number one the easiest thing you

1233
00:44:35,760 --> 00:44:37,520
can do you can do it through gpu you

1234
00:44:37,520 --> 00:44:39,040
could do it through a log on script the

1235
00:44:39,040 --> 00:44:41,359
minute someone joins the domain or logs

1236
00:44:41,359 --> 00:44:42,640
on

1237
00:44:42,640 --> 00:44:44,880
next turn on script block logging make

1238
00:44:44,880 --> 00:44:46,480
sure you're logging all of the commands

1239
00:44:46,480 --> 00:44:49,040
that you're logging everything people do

1240
00:44:49,040 --> 00:44:50,240
and then turn on just enough

1241
00:44:50,240 --> 00:44:51,920
administration

1242
00:44:51,920 --> 00:44:53,839
you don't need that many domain admins

1243
00:44:53,839 --> 00:44:55,280
you don't need that many people logging

1244
00:44:55,280 --> 00:44:57,599
on to a system give them the permissions

1245
00:44:57,599 --> 00:44:59,119
they need to do their job without

1246
00:44:59,119 --> 00:45:00,800
causing friction

1247
00:45:00,800 --> 00:45:02,240
but if they were compromised that they

1248
00:45:02,240 --> 00:45:04,480
couldn't take down the network and then

1249
00:45:04,480 --> 00:45:05,839
later implement the rest of those

1250
00:45:05,839 --> 00:45:09,040
controls that we talked about

1251
00:45:13,680 --> 00:45:15,599
so here's some references and again i

1252
00:45:15,599 --> 00:45:17,440
will have this available just ping me

1253
00:45:17,440 --> 00:45:19,440
after i'll be able to send this over

1254
00:45:19,440 --> 00:45:22,000
there's as you can see a lot of fun red

1255
00:45:22,000 --> 00:45:24,160
team tools out there

1256
00:45:24,160 --> 00:45:26,319
there's a few blue team tools as well as

1257
00:45:26,319 --> 00:45:28,000
some purple team tools

1258
00:45:28,000 --> 00:45:29,680
i highly recommend taking a look at

1259
00:45:29,680 --> 00:45:30,480
these

1260
00:45:30,480 --> 00:45:32,319
they'll help you get an idea of how the

1261
00:45:32,319 --> 00:45:34,480
attackers function a lot of these tools

1262
00:45:34,480 --> 00:45:36,960
are not necessarily evil but they have

1263
00:45:36,960 --> 00:45:38,720
the potential for evil it's how you use

1264
00:45:38,720 --> 00:45:40,000
it

1265
00:45:40,000 --> 00:45:42,000
so play around in your environment and

1266
00:45:42,000 --> 00:45:43,599
see

1267
00:45:43,599 --> 00:45:45,599
what gets picked up what doesn't

1268
00:45:45,599 --> 00:45:47,040
make sure if you are doing testing on

1269
00:45:47,040 --> 00:45:48,880
your work systems make sure the security

1270
00:45:48,880 --> 00:45:50,720
team actually knows about it so they

1271
00:45:50,720 --> 00:45:54,720
don't go all crazy if they see anything

1272
00:45:54,800 --> 00:45:57,119
but take a look and see what you can do

1273
00:45:57,119 --> 00:45:59,040
the logging cheat sheet over here is

1274
00:45:59,040 --> 00:46:00,560
going to be one of your

1275
00:46:00,560 --> 00:46:02,720
favorite resources i still refer to it a

1276
00:46:02,720 --> 00:46:04,480
lot it shows you some of the event ids

1277
00:46:04,480 --> 00:46:06,480
that are valuable and the gpo settings

1278
00:46:06,480 --> 00:46:09,280
to enable them

1279
00:46:10,160 --> 00:46:11,920
and with that

1280
00:46:11,920 --> 00:46:15,160
any questions

1281
00:46:20,160 --> 00:46:22,000
all right well at that point i'll still

1282
00:46:22,000 --> 00:46:26,760
be here thank you so much for your time

1283
00:46:27,450 --> 00:46:31,379
[Music]

