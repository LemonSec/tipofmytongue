1
00:00:00,030 --> 00:00:09,569
hi morning<font color="#E5E5E5"> everybody</font>

2
00:00:06,230 --> 00:00:12,750
so this is offensive retooling in.net

3
00:00:09,570 --> 00:00:16,190
for red<font color="#CCCCCC"> team's</font><font color="#E5E5E5"> my name is Demetrius Nash</font>

4
00:00:12,750 --> 00:00:22,100
Cove<font color="#E5E5E5"> and security consultant</font><font color="#CCCCCC"> 4x4 shred</font>

5
00:00:16,190 --> 00:00:25,580
IBM<font color="#E5E5E5"> corporation</font><font color="#CCCCCC"> shout-out to</font><font color="#E5E5E5"> expert team</font>

6
00:00:22,100 --> 00:00:28,109
current<font color="#CCCCCC"> focuses on offensive</font><font color="#E5E5E5"> security</font>

7
00:00:25,580 --> 00:00:30,479
assurance testing<font color="#CCCCCC"> I think I need to</font><font color="#E5E5E5"> move</font>

8
00:00:28,109 --> 00:00:34,469
this up<font color="#E5E5E5"> a little bit</font>

9
00:00:30,480 --> 00:00:36,630
tools code<font color="#CCCCCC"> and</font><font color="#E5E5E5"> I like to do the operator</font>

10
00:00:34,469 --> 00:00:40,260
stuff<font color="#E5E5E5"> or at least try</font><font color="#CCCCCC"> to do a little</font><font color="#E5E5E5"> bit</font>

11
00:00:36,630 --> 00:00:43,320
<font color="#E5E5E5">more of that</font><font color="#CCCCCC"> and I'm from Chicago</font><font color="#E5E5E5"> but</font>

12
00:00:40,260 --> 00:00:45,510
<font color="#E5E5E5">I'm born I was</font><font color="#CCCCCC"> born in Ukraine</font><font color="#E5E5E5"> and there</font>

13
00:00:43,320 --> 00:00:49,800
is no that in Ukraine<font color="#CCCCCC"> just so you know</font>

14
00:00:45,510 --> 00:00:53,099
<font color="#CCCCCC">okay so let's talk offensive things</font>

15
00:00:49,800 --> 00:00:55,440
<font color="#E5E5E5">right things that basically</font><font color="#CCCCCC"> make other</font>

16
00:00:53,100 --> 00:00:58,320
things go under the detection<font color="#E5E5E5"> radar on</font>

17
00:00:55,440 --> 00:01:00,209
<font color="#CCCCCC">Windows</font><font color="#E5E5E5"> we're gonna look at it from the</font>

18
00:00:58,320 --> 00:01:04,049
offensive operator right team<font color="#E5E5E5"> operating</font>

19
00:01:00,210 --> 00:01:06,780
perspective and let's<font color="#E5E5E5"> look at the the</font>

20
00:01:04,049 --> 00:01:10,490
<font color="#CCCCCC">system of and some of the pain points</font>

21
00:01:06,780 --> 00:01:14,430
that<font color="#E5E5E5"> we have as a red team operator to</font>

22
00:01:10,490 --> 00:01:19,380
to overcome defenses<font color="#E5E5E5"> right so we'll talk</font>

23
00:01:14,430 --> 00:01:21,869
<font color="#CCCCCC">about some</font><font color="#E5E5E5"> ideas</font><font color="#CCCCCC"> will build things</font><font color="#E5E5E5"> right</font>

24
00:01:19,380 --> 00:01:24,658
or at<font color="#CCCCCC"> least attempt to build things with</font>

25
00:01:21,869 --> 00:01:29,990
code blocks and we're gonna do this<font color="#E5E5E5"> on</font>

26
00:01:24,659 --> 00:01:32,220
live system<font color="#E5E5E5"> and so the idea is that</font>

27
00:01:29,990 --> 00:01:34,380
we're<font color="#E5E5E5"> gonna have a couple</font><font color="#CCCCCC"> of concepts</font>

28
00:01:32,220 --> 00:01:36,720
one<font color="#E5E5E5"> is a CODIS data data is code we're</font>

29
00:01:34,380 --> 00:01:39,420
gonna go<font color="#E5E5E5"> over</font><font color="#CCCCCC"> that and also</font><font color="#E5E5E5"> the other</font>

30
00:01:36,720 --> 00:01:44,298
concept is slim cradles and<font color="#E5E5E5"> dynamic</font>

31
00:01:39,420 --> 00:01:47,220
payloads so if you<font color="#E5E5E5"> think about how the</font>

32
00:01:44,299 --> 00:01:51,420
offensive recon happens while you're<font color="#E5E5E5"> on</font>

33
00:01:47,220 --> 00:01:53,220
the machine<font color="#CCCCCC"> the the the issue for the</font>

34
00:01:51,420 --> 00:01:54,960
red team<font color="#E5E5E5"> operator is the first mover</font>

35
00:01:53,220 --> 00:01:57,030
advantage<font color="#E5E5E5"> right you have to move first</font>

36
00:01:54,960 --> 00:01:58,439
<font color="#E5E5E5">you drop down the</font><font color="#CCCCCC"> Machine you're in the</font>

37
00:01:57,030 --> 00:02:00,570
<font color="#E5E5E5">operating system</font><font color="#CCCCCC"> and you have to</font><font color="#E5E5E5"> start</font>

38
00:01:58,439 --> 00:02:03,298
<font color="#E5E5E5">discovering that so the first move kills</font>

39
00:02:00,570 --> 00:02:06,929
you<font color="#E5E5E5"> okay so the better you</font><font color="#CCCCCC"> can actually</font>

40
00:02:03,299 --> 00:02:08,160
<font color="#E5E5E5">prepare to or you know at least discover</font>

41
00:02:06,930 --> 00:02:11,250
some of<font color="#CCCCCC"> the things and</font><font color="#E5E5E5"> your surroundings</font>

42
00:02:08,160 --> 00:02:13,079
<font color="#CCCCCC">the better</font><font color="#E5E5E5"> it is</font><font color="#CCCCCC"> for you and so the</font>

43
00:02:11,250 --> 00:02:13,610
first stages of recon on the operating

44
00:02:13,080 --> 00:02:15,320
<font color="#E5E5E5">system is</font>

45
00:02:13,610 --> 00:02:16,490
important because you<font color="#CCCCCC"> have</font><font color="#E5E5E5"> to move first</font>

46
00:02:15,320 --> 00:02:21,769
and<font color="#CCCCCC"> you have to collect</font><font color="#E5E5E5"> the information</font>

47
00:02:16,490 --> 00:02:23,750
<font color="#E5E5E5">and the issues that you face are</font>

48
00:02:21,770 --> 00:02:26,800
multitude right you've got logging on

49
00:02:23,750 --> 00:02:29,720
<font color="#CCCCCC">shells</font><font color="#E5E5E5"> you've got hook instrumented</font>

50
00:02:26,800 --> 00:02:33,050
<font color="#CCCCCC">wineries</font><font color="#E5E5E5"> sometimes you have sandbox</font>

51
00:02:29,720 --> 00:02:35,180
execution<font color="#E5E5E5"> and and sometimes sometimes</font>

52
00:02:33,050 --> 00:02:39,709
<font color="#CCCCCC">you</font><font color="#E5E5E5"> have quiet systems that when you</font>

53
00:02:35,180 --> 00:02:42,560
move you reveal<font color="#CCCCCC"> yourself right and so</font>

54
00:02:39,709 --> 00:02:44,420
the idea here<font color="#CCCCCC"> is that</font><font color="#E5E5E5"> known static</font>

55
00:02:42,560 --> 00:02:46,400
<font color="#E5E5E5">offensive tools that you bring into</font><font color="#CCCCCC"> the</font>

56
00:02:44,420 --> 00:02:48,589
<font color="#CCCCCC">environment to do your</font><font color="#E5E5E5"> recon or</font>

57
00:02:46,400 --> 00:02:50,420
discovery<font color="#E5E5E5"> get flagged because they're</font>

58
00:02:48,590 --> 00:02:52,250
known right you've got the network

59
00:02:50,420 --> 00:02:55,429
<font color="#E5E5E5">effect because they've been</font><font color="#CCCCCC"> used</font>

60
00:02:52,250 --> 00:02:57,260
everywhere<font color="#E5E5E5"> so the idea is that</font><font color="#CCCCCC"> why don't</font>

61
00:02:55,430 --> 00:02:59,150
<font color="#E5E5E5">we approach</font><font color="#CCCCCC"> it from a perspective of</font>

62
00:02:57,260 --> 00:03:01,070
retooling right when we drop on the

63
00:02:59,150 --> 00:03:02,989
machine<font color="#E5E5E5"> can we retool can we create</font>

64
00:03:01,070 --> 00:03:06,160
custom stuff can we create building

65
00:03:02,989 --> 00:03:09,230
blocks<font color="#E5E5E5"> right on the live system</font><font color="#CCCCCC"> and so</font>

66
00:03:06,160 --> 00:03:12,859
sometimes those blocks may be better in

67
00:03:09,230 --> 00:03:14,329
aesthetic tools<font color="#E5E5E5"> right we can still</font>

68
00:03:12,860 --> 00:03:16,310
utilize some<font color="#CCCCCC"> of the things</font><font color="#E5E5E5"> some</font>

69
00:03:14,330 --> 00:03:19,070
facilities of the operating system<font color="#CCCCCC"> to do</font>

70
00:03:16,310 --> 00:03:22,640
<font color="#E5E5E5">our coding there but the problem becomes</font>

71
00:03:19,070 --> 00:03:24,950
<font color="#E5E5E5">that you know it's just that it's live</font>

72
00:03:22,640 --> 00:03:27,109
right<font color="#CCCCCC"> live retooling when you code a</font>

73
00:03:24,950 --> 00:03:28,929
<font color="#CCCCCC">live on a system it has a bunch</font><font color="#E5E5E5"> of</font>

74
00:03:27,110 --> 00:03:33,830
advantages<font color="#E5E5E5"> as we discussed</font><font color="#CCCCCC"> it's</font>

75
00:03:28,930 --> 00:03:36,530
minimized<font color="#CCCCCC"> fingerprinting</font><font color="#E5E5E5"> right but it</font>

76
00:03:33,830 --> 00:03:39,890
has<font color="#CCCCCC"> disadvantages first time the first</font>

77
00:03:36,530 --> 00:03:41,690
<font color="#CCCCCC">thing is def time is very high</font><font color="#E5E5E5"> right you</font>

78
00:03:39,890 --> 00:03:44,779
you're doing<font color="#E5E5E5"> it on live system you have</font>

79
00:03:41,690 --> 00:03:47,209
bugs<font color="#E5E5E5"> you will be able to reveal</font><font color="#CCCCCC"> yourself</font>

80
00:03:44,780 --> 00:03:51,799
right there<font color="#E5E5E5"> so your operational security</font>

81
00:03:47,209 --> 00:03:53,540
min is minimized<font color="#E5E5E5"> and so you also have to</font>

82
00:03:51,799 --> 00:03:56,180
get to the point where you can<font color="#CCCCCC"> actually</font>

83
00:03:53,540 --> 00:03:58,760
code well on the system without<font color="#CCCCCC"> being</font>

84
00:03:56,180 --> 00:04:02,360
discovered<font color="#E5E5E5"> so the idea here</font><font color="#CCCCCC"> is for our</font>

85
00:03:58,760 --> 00:04:04,130
<font color="#CCCCCC">strategic purpose is that</font><font color="#E5E5E5"> we</font><font color="#CCCCCC"> need</font><font color="#E5E5E5"> to be</font>

86
00:04:02,360 --> 00:04:05,840
able to recon under the radar<font color="#E5E5E5"> for a long</font>

87
00:04:04,130 --> 00:04:08,630
<font color="#E5E5E5">time and not be loud enough to get</font>

88
00:04:05,840 --> 00:04:10,160
<font color="#E5E5E5">discovered we also need to be able</font><font color="#CCCCCC"> to</font>

89
00:04:08,630 --> 00:04:12,079
quickly retool for<font color="#E5E5E5"> things that we</font>

90
00:04:10,160 --> 00:04:17,450
discover on the system things that are

91
00:04:12,079 --> 00:04:20,690
unknown<font color="#E5E5E5"> and essentially we want to</font>

92
00:04:17,450 --> 00:04:23,330
deliver<font color="#CCCCCC"> something into the</font><font color="#E5E5E5"> environment</font>

93
00:04:20,690 --> 00:04:26,170
that we can operate<font color="#E5E5E5"> on as far</font><font color="#CCCCCC"> as tools</font>

94
00:04:23,330 --> 00:04:28,030
and<font color="#E5E5E5"> other building blocks so</font>

95
00:04:26,170 --> 00:04:30,400
from the tactical perspective<font color="#E5E5E5"> what do we</font>

96
00:04:28,030 --> 00:04:33,150
want<font color="#CCCCCC"> well at least we want</font><font color="#E5E5E5"> support and</font>

97
00:04:30,400 --> 00:04:35,409
transfer of payloads<font color="#CCCCCC"> right into</font>

98
00:04:33,150 --> 00:04:36,820
executing cradles<font color="#CCCCCC"> right so we have a</font>

99
00:04:35,410 --> 00:04:39,820
small cradle we're going to talk<font color="#E5E5E5"> about</font>

100
00:04:36,820 --> 00:04:42,909
this<font color="#CCCCCC"> and then we're</font><font color="#E5E5E5"> gonna drop some</font>

101
00:04:39,820 --> 00:04:45,430
payloads in it we want to<font color="#E5E5E5"> build</font><font color="#CCCCCC"> those</font>

102
00:04:42,910 --> 00:04:47,760
payloads and execute the<font color="#CCCCCC"> Morea real time</font>

103
00:04:45,430 --> 00:04:50,170
and<font color="#E5E5E5"> we also want</font><font color="#CCCCCC"> to support</font><font color="#E5E5E5"> the vision</font>

104
00:04:47,760 --> 00:04:52,719
when we go and start thinking about

105
00:04:50,170 --> 00:04:55,720
properties<font color="#E5E5E5"> of things that we want</font><font color="#CCCCCC"> we</font>

106
00:04:52,720 --> 00:04:58,300
also want to<font color="#E5E5E5"> minimize artifacts right we</font>

107
00:04:55,720 --> 00:05:01,420
want to do the best<font color="#CCCCCC"> possible way</font>

108
00:04:58,300 --> 00:05:04,480
<font color="#E5E5E5">minimize some things that might</font>

109
00:05:01,420 --> 00:05:06,730
potentially use for forensics later<font color="#CCCCCC"> we</font>

110
00:05:04,480 --> 00:05:09,100
want to have reasonable interface with

111
00:05:06,730 --> 00:05:11,230
legacy tools or operating<font color="#CCCCCC"> system</font><font color="#E5E5E5"> because</font>

112
00:05:09,100 --> 00:05:13,630
we cannot do<font color="#E5E5E5"> everything on</font><font color="#CCCCCC"> our own</font><font color="#E5E5E5"> we</font>

113
00:05:11,230 --> 00:05:17,680
<font color="#CCCCCC">have to drop down to</font><font color="#E5E5E5"> possibly low level</font>

114
00:05:13,630 --> 00:05:19,469
and we<font color="#E5E5E5"> have to have</font><font color="#CCCCCC"> embrasure improved</font>

115
00:05:17,680 --> 00:05:23,200
operational security<font color="#E5E5E5"> from</font><font color="#CCCCCC"> the get-go</font>

116
00:05:19,470 --> 00:05:25,180
<font color="#CCCCCC">okay so this</font><font color="#E5E5E5"> this idea of a slim payload</font>

117
00:05:23,200 --> 00:05:28,810
delivery cradle where you have<font color="#CCCCCC"> a very</font>

118
00:05:25,180 --> 00:05:32,820
small footprint of a<font color="#CCCCCC"> cradle that</font><font color="#E5E5E5"> still</font>

119
00:05:28,810 --> 00:05:36,250
<font color="#E5E5E5">allows you to enhance</font><font color="#CCCCCC"> your capability</font>

120
00:05:32,820 --> 00:05:38,469
iteratively<font color="#CCCCCC"> right so you start treating</font>

121
00:05:36,250 --> 00:05:41,260
code that<font color="#CCCCCC"> you're bringing</font><font color="#E5E5E5"> as data and</font>

122
00:05:38,470 --> 00:05:44,350
you treat data as code okay<font color="#E5E5E5"> we're gonna</font>

123
00:05:41,260 --> 00:05:46,750
see how that<font color="#E5E5E5"> works</font><font color="#CCCCCC"> and</font><font color="#E5E5E5"> then along those</font>

124
00:05:44,350 --> 00:05:48,730
lines we're going to look at decoupling

125
00:05:46,750 --> 00:05:51,640
compilation<font color="#E5E5E5"> of your building</font><font color="#CCCCCC"> blocks with</font>

126
00:05:48,730 --> 00:05:54,250
<font color="#CCCCCC">executions so</font><font color="#E5E5E5"> when defense looks at it</font>

127
00:05:51,640 --> 00:05:55,810
they see<font color="#CCCCCC"> either</font><font color="#E5E5E5"> or compilation or</font>

128
00:05:54,250 --> 00:05:58,930
execution but<font color="#E5E5E5"> they can't actually make</font>

129
00:05:55,810 --> 00:06:01,120
the two<font color="#CCCCCC"> together</font><font color="#E5E5E5"> okay so what</font><font color="#CCCCCC"> are the</font>

130
00:05:58,930 --> 00:06:04,260
current mechanisms for retooling<font color="#CCCCCC"> well</font>

131
00:06:01,120 --> 00:06:07,870
we've got PowerShell<font color="#E5E5E5"> great</font><font color="#CCCCCC"> we've got WMI</font>

132
00:06:04,260 --> 00:06:10,990
<font color="#CCCCCC">we also have unmanaged code and also</font>

133
00:06:07,870 --> 00:06:12,910
<font color="#CCCCCC">managed code on the machine</font><font color="#E5E5E5"> all of them</font>

134
00:06:10,990 --> 00:06:15,390
have pros<font color="#CCCCCC"> and cons right it's</font><font color="#E5E5E5"> it's sort</font>

135
00:06:12,910 --> 00:06:17,980
of like pick<font color="#CCCCCC"> your poison and so for our</font>

136
00:06:15,390 --> 00:06:20,919
discussion we're gonna actually work at

137
00:06:17,980 --> 00:06:23,440
<font color="#E5E5E5">the dotnet so there are</font><font color="#CCCCCC"> there different</font>

138
00:06:20,920 --> 00:06:27,370
pros and cons<font color="#E5E5E5"> for every every method</font>

139
00:06:23,440 --> 00:06:29,050
<font color="#E5E5E5">here</font><font color="#CCCCCC"> but our biggest concern here</font><font color="#E5E5E5"> if</font>

140
00:06:27,370 --> 00:06:31,030
we're working<font color="#E5E5E5"> in</font><font color="#CCCCCC"> the PowerShell we need</font>

141
00:06:29,050 --> 00:06:33,700
to remove the<font color="#CCCCCC"> logging</font><font color="#E5E5E5"> right right now</font>

142
00:06:31,030 --> 00:06:38,270
everything is logged<font color="#CCCCCC"> we also need to</font>

143
00:06:33,700 --> 00:06:41,210
<font color="#CCCCCC">maximize the ease of use for our tools</font>

144
00:06:38,270 --> 00:06:43,909
so dotnet is an interesting<font color="#CCCCCC"> serve layer</font>

145
00:06:41,210 --> 00:06:47,270
that we want<font color="#E5E5E5"> to concentrate on it has</font>

146
00:06:43,910 --> 00:06:50,210
<font color="#CCCCCC">tons</font><font color="#E5E5E5"> of advantages it has been around</font>

147
00:06:47,270 --> 00:06:52,729
for a while<font color="#E5E5E5"> has a lot of api's right it</font>

148
00:06:50,210 --> 00:06:56,719
has great utilization properties meaning

149
00:06:52,729 --> 00:06:59,690
you<font color="#E5E5E5"> have</font><font color="#CCCCCC"> Network</font><font color="#E5E5E5"> API you have you know</font>

150
00:06:56,720 --> 00:07:01,250
<font color="#E5E5E5">operating system access API and dotnet</font>

151
00:06:59,690 --> 00:07:03,860
<font color="#CCCCCC">is actually not logged</font><font color="#E5E5E5"> right</font><font color="#CCCCCC"> worst</font>

152
00:07:01,250 --> 00:07:06,919
partial is that not is not<font color="#E5E5E5"> but there are</font>

153
00:07:03,860 --> 00:07:09,940
disadvantages<font color="#E5E5E5"> slower</font><font color="#CCCCCC"> development time</font>

154
00:07:06,919 --> 00:07:12,889
<font color="#E5E5E5">it's it is it is a statically</font><font color="#CCCCCC"> typed</font>

155
00:07:09,940 --> 00:07:14,180
environment right we have to have to<font color="#E5E5E5"> be</font>

156
00:07:12,889 --> 00:07:16,460
able<font color="#E5E5E5"> to</font><font color="#CCCCCC"> develop</font><font color="#E5E5E5"> really fast</font>

157
00:07:14,180 --> 00:07:18,259
there<font color="#E5E5E5"> is no</font><font color="#CCCCCC"> rebel in it right</font><font color="#E5E5E5"> you can't</font>

158
00:07:16,460 --> 00:07:20,359
<font color="#E5E5E5">really evaluate your expressions right</font>

159
00:07:18,259 --> 00:07:21,740
off the bat<font color="#E5E5E5"> or at least you need</font><font color="#CCCCCC"> to be</font>

160
00:07:20,360 --> 00:07:24,349
able<font color="#E5E5E5"> to build the environments so you</font>

161
00:07:21,740 --> 00:07:29,120
<font color="#CCCCCC">can actually</font><font color="#E5E5E5"> do this and compilation is</font>

162
00:07:24,349 --> 00:07:31,400
is a big big<font color="#CCCCCC"> issue as we will see</font><font color="#E5E5E5"> okay</font>

163
00:07:29,120 --> 00:07:33,860
so how do<font color="#CCCCCC"> we solve that right we need to</font>

164
00:07:31,400 --> 00:07:36,979
keep our advantages<font color="#E5E5E5"> but we also need to</font>

165
00:07:33,860 --> 00:07:40,720
<font color="#E5E5E5">remove all the disadvantages from</font><font color="#CCCCCC"> it</font><font color="#E5E5E5"> so</font>

166
00:07:36,979 --> 00:07:44,780
let's try to can we even build that<font color="#E5E5E5"> out</font>

167
00:07:40,720 --> 00:07:47,060
so let's iteratively try to build this

168
00:07:44,780 --> 00:07:51,530
<font color="#E5E5E5">managed execution toolkit right that</font>

169
00:07:47,060 --> 00:07:54,380
will allow<font color="#CCCCCC"> us to do so going</font><font color="#E5E5E5"> back</font><font color="#CCCCCC"> to</font>

170
00:07:51,530 --> 00:07:57,979
<font color="#E5E5E5">dotnet</font><font color="#CCCCCC"> would is</font><font color="#E5E5E5"> that not right dotnet is</font>

171
00:07:54,380 --> 00:08:00,139
API<font color="#CCCCCC"> a wealth</font><font color="#E5E5E5"> of api's it's common</font>

172
00:07:57,979 --> 00:08:03,258
language<font color="#CCCCCC"> runtime that actually runs your</font>

173
00:08:00,139 --> 00:08:07,039
code and it's also compilers<font color="#E5E5E5"> write</font>

174
00:08:03,259 --> 00:08:09,139
compilers on the<font color="#E5E5E5"> box now there are</font>

175
00:08:07,039 --> 00:08:11,240
cousins to that<font color="#CCCCCC"> first-degree relatives</font>

176
00:08:09,139 --> 00:08:11,770
right there is a code<font color="#E5E5E5"> Dom which we'll</font>

177
00:08:11,240 --> 00:08:15,020
talk

178
00:08:11,770 --> 00:08:17,180
shortly about<font color="#E5E5E5"> and there's also a DLR</font>

179
00:08:15,020 --> 00:08:18,710
that we're<font color="#E5E5E5"> going to talk as well it's</font>

180
00:08:17,180 --> 00:08:21,349
<font color="#CCCCCC">really</font><font color="#E5E5E5"> easy right conceptually its</font>

181
00:08:18,710 --> 00:08:25,190
source<font color="#CCCCCC"> code compiler executable the</font>

182
00:08:21,349 --> 00:08:27,940
problem becomes<font color="#E5E5E5"> is that well how do you</font>

183
00:08:25,190 --> 00:08:30,650
compile<font color="#E5E5E5"> in.net well</font><font color="#CCCCCC"> it turns out</font><font color="#E5E5E5"> that</font>

184
00:08:27,940 --> 00:08:32,899
<font color="#E5E5E5">CSC dot exe or</font><font color="#CCCCCC"> msbuild</font>

185
00:08:30,650 --> 00:08:34,610
well to the lesser degree<font color="#CCCCCC"> m is</font><font color="#E5E5E5"> build</font><font color="#CCCCCC"> CSE</font>

186
00:08:32,899 --> 00:08:36,789
that<font color="#E5E5E5"> the FC is pretty much always</font>

187
00:08:34,610 --> 00:08:39,950
guaranteed to<font color="#E5E5E5"> be available because</font>

188
00:08:36,789 --> 00:08:42,890
dotnet itself<font color="#CCCCCC"> actually relies on it for</font>

189
00:08:39,950 --> 00:08:47,720
<font color="#E5E5E5">example</font><font color="#CCCCCC"> xml processing compilation</font><font color="#E5E5E5"> or</font>

190
00:08:42,890 --> 00:08:50,150
whatnot so<font color="#CCCCCC"> CSE is available</font><font color="#E5E5E5"> let's look</font>

191
00:08:47,720 --> 00:08:51,770
<font color="#E5E5E5">at the code</font><font color="#CCCCCC"> dom code dom is the code</font>

192
00:08:50,150 --> 00:08:54,410
document object

193
00:08:51,770 --> 00:08:56,329
just like in say HTML right in the

194
00:08:54,410 --> 00:09:00,890
browser<font color="#E5E5E5"> you have some model that your</font>

195
00:08:56,330 --> 00:09:02,810
code<font color="#CCCCCC"> is or adheres to right some some</font>

196
00:09:00,890 --> 00:09:05,449
tree that<font color="#CCCCCC"> your that you're building</font><font color="#E5E5E5"> in</font>

197
00:09:02,810 --> 00:09:08,089
dotnet<font color="#E5E5E5"> it is code</font><font color="#CCCCCC"> dumb code dumb</font>

198
00:09:05,450 --> 00:09:10,850
basically means that<font color="#E5E5E5"> okay your source</font>

199
00:09:08,090 --> 00:09:13,340
code<font color="#E5E5E5"> when compiles it has this</font><font color="#CCCCCC"> ast tree</font>

200
00:09:10,850 --> 00:09:14,630
and then<font color="#E5E5E5"> you can do whatever you want</font>

201
00:09:13,340 --> 00:09:16,160
with it you<font color="#E5E5E5"> can compile it</font><font color="#CCCCCC"> to</font>

202
00:09:14,630 --> 00:09:19,189
intermediate language you can compile it

203
00:09:16,160 --> 00:09:21,380
<font color="#CCCCCC">to you can merge</font><font color="#E5E5E5"> other source code in it</font>

204
00:09:19,190 --> 00:09:25,130
in<font color="#E5E5E5"> an compile it and so for</font><font color="#CCCCCC"> example</font>

205
00:09:21,380 --> 00:09:27,230
asp.net<font color="#E5E5E5"> XML Web Services you know code</font>

206
00:09:25,130 --> 00:09:31,040
<font color="#CCCCCC">wizards and Visual Studio all use code</font>

207
00:09:27,230 --> 00:09:33,370
<font color="#E5E5E5">dumb</font><font color="#CCCCCC"> okay so</font><font color="#E5E5E5"> source code on</font><font color="#CCCCCC"> top of</font>

208
00:09:31,040 --> 00:09:36,380
source code with code Dom API

209
00:09:33,370 --> 00:09:41,450
<font color="#E5E5E5">compilation into either more source code</font>

210
00:09:36,380 --> 00:09:42,800
or<font color="#E5E5E5"> and end result is</font><font color="#CCCCCC"> the executable</font><font color="#E5E5E5"> so</font>

211
00:09:41,450 --> 00:09:47,180
we're<font color="#E5E5E5"> talking about code emitting</font>

212
00:09:42,800 --> 00:09:49,339
mechanisms here<font color="#E5E5E5"> okay so</font><font color="#CCCCCC"> why not apply</font>

213
00:09:47,180 --> 00:09:52,400
code<font color="#E5E5E5"> Dom to building our first</font><font color="#CCCCCC"> rabble</font>

214
00:09:49,340 --> 00:09:54,950
here<font color="#E5E5E5"> okay so we need to be able to</font>

215
00:09:52,400 --> 00:09:57,560
dynamically compile C sharp or VB or

216
00:09:54,950 --> 00:10:00,130
<font color="#CCCCCC">JavaScript whatever or jscript brother</font>

217
00:09:57,560 --> 00:10:03,319
<font color="#CCCCCC">or whatever you're most comfortable</font><font color="#E5E5E5"> with</font>

218
00:10:00,130 --> 00:10:05,960
and<font color="#E5E5E5"> we're gonna use that</font><font color="#CCCCCC"> trample to</font>

219
00:10:03,320 --> 00:10:07,880
evade the actual discovery<font color="#E5E5E5"> of a payload</font>

220
00:10:05,960 --> 00:10:10,100
<font color="#CCCCCC">that we're bringing we're</font><font color="#E5E5E5"> just gonna</font>

221
00:10:07,880 --> 00:10:14,689
paste our code<font color="#E5E5E5"> interrupt and execute it</font>

222
00:10:10,100 --> 00:10:16,940
<font color="#CCCCCC">okay so the way we're gonna do this</font>

223
00:10:14,690 --> 00:10:19,430
we're gonna use the API for<font color="#E5E5E5"> compiling</font>

224
00:10:16,940 --> 00:10:21,920
your code<font color="#E5E5E5"> right from the dotnet cradle</font>

225
00:10:19,430 --> 00:10:25,370
<font color="#E5E5E5">okay</font><font color="#CCCCCC"> you're cradling SMO</font><font color="#E5E5E5"> is very small</font>

226
00:10:21,920 --> 00:10:28,459
<font color="#E5E5E5">but it has dotnet right so dot not</font>

227
00:10:25,370 --> 00:10:31,910
always have c-sharp code provider<font color="#E5E5E5"> and so</font>

228
00:10:28,460 --> 00:10:33,920
we can<font color="#CCCCCC"> actually introduce various you</font>

229
00:10:31,910 --> 00:10:36,290
know<font color="#E5E5E5"> options into compilation right into</font>

230
00:10:33,920 --> 00:10:37,910
the code<font color="#E5E5E5"> there are some evasion</font>

231
00:10:36,290 --> 00:10:40,540
mechanisms that<font color="#E5E5E5"> can actually happen for</font>

232
00:10:37,910 --> 00:10:42,709
defense guys out here<font color="#E5E5E5"> that doesn't</font>

233
00:10:40,540 --> 00:10:45,199
<font color="#CCCCCC">necessarily need to compile to dll</font><font color="#E5E5E5"> you</font>

234
00:10:42,710 --> 00:10:46,670
can compile<font color="#E5E5E5"> into temp so that if you're</font>

235
00:10:45,200 --> 00:10:50,210
<font color="#CCCCCC">watching for DLL it's not going to</font>

236
00:10:46,670 --> 00:10:52,729
happen<font color="#CCCCCC"> and so let's look at this feature</font>

237
00:10:50,210 --> 00:10:54,710
of<font color="#E5E5E5"> this</font><font color="#CCCCCC"> managed execution code called</font>

238
00:10:52,730 --> 00:10:57,710
seesaw<font color="#CCCCCC"> right our goals will be to</font>

239
00:10:54,710 --> 00:11:00,830
<font color="#E5E5E5">dynamically compile the code</font><font color="#CCCCCC"> do the</font>

240
00:10:57,710 --> 00:11:04,220
<font color="#CCCCCC">repple and then try</font><font color="#E5E5E5"> to load assemblies</font>

241
00:11:00,830 --> 00:11:05,870
in memory try to increase

242
00:11:04,220 --> 00:11:08,750
utilization while decreasing<font color="#CCCCCC"> the</font>

243
00:11:05,870 --> 00:11:11,090
<font color="#E5E5E5">footprint okay so how do we do this we</font>

244
00:11:08,750 --> 00:11:13,010
do<font color="#CCCCCC"> this with contracts</font><font color="#E5E5E5"> so what is</font>

245
00:11:11,090 --> 00:11:15,680
dynamic<font color="#E5E5E5"> compilation</font><font color="#CCCCCC"> well it's just a</font>

246
00:11:13,010 --> 00:11:18,110
string<font color="#E5E5E5"> of code it's your code it's my</font>

247
00:11:15,680 --> 00:11:21,170
code is somebody else's<font color="#E5E5E5"> code so why not</font>

248
00:11:18,110 --> 00:11:24,110
<font color="#CCCCCC">weep retool</font><font color="#E5E5E5"> some of that pipeline and</font>

249
00:11:21,170 --> 00:11:26,060
<font color="#E5E5E5">say okay well two out of three of the</font>

250
00:11:24,110 --> 00:11:28,670
string of<font color="#CCCCCC"> the</font><font color="#E5E5E5"> code right is going</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> be</font>

251
00:11:26,060 --> 00:11:29,959
ours and then you know one third is

252
00:11:28,670 --> 00:11:32,479
going<font color="#E5E5E5"> to be yours whatever you're gonna</font>

253
00:11:29,960 --> 00:11:34,190
paste and<font color="#CCCCCC"> rattle</font><font color="#E5E5E5"> okay</font><font color="#CCCCCC"> so we're gonna mix</font>

254
00:11:32,480 --> 00:11:36,440
and match<font color="#E5E5E5"> something that we pre tool to</font>

255
00:11:34,190 --> 00:11:37,670
what<font color="#E5E5E5"> you</font><font color="#CCCCCC"> are gonna paste and</font><font color="#E5E5E5"> rebel okay</font>

256
00:11:36,440 --> 00:11:39,260
so half<font color="#E5E5E5"> of it is going to be</font>

257
00:11:37,670 --> 00:11:41,599
<font color="#CCCCCC">user-submitted</font><font color="#E5E5E5"> half of it is going to be</font>

258
00:11:39,260 --> 00:11:43,790
tool generated again evasion because

259
00:11:41,600 --> 00:11:45,350
<font color="#CCCCCC">you're pasted</font><font color="#E5E5E5"> in half of the code of the</font>

260
00:11:43,790 --> 00:11:48,770
generating binary

261
00:11:45,350 --> 00:11:52,250
<font color="#E5E5E5">okay so</font><font color="#CCCCCC"> defense is</font><font color="#E5E5E5"> not gonna see the</font>

262
00:11:48,770 --> 00:11:55,460
full picture here<font color="#CCCCCC"> so we're dynamically</font>

263
00:11:52,250 --> 00:11:59,420
compiling<font color="#E5E5E5"> we're creating so we talked</font>

264
00:11:55,460 --> 00:12:02,780
<font color="#E5E5E5">about a contract right so in order for</font>

265
00:11:59,420 --> 00:12:04,250
<font color="#CCCCCC">us to do rattle</font><font color="#E5E5E5"> we should be able to get</font>

266
00:12:02,780 --> 00:12:08,380
some results<font color="#CCCCCC"> out of</font><font color="#E5E5E5"> things that we</font>

267
00:12:04,250 --> 00:12:10,670
<font color="#CCCCCC">compiled</font><font color="#E5E5E5"> so our code adheres to just two</font>

268
00:12:08,380 --> 00:12:13,040
<font color="#E5E5E5">API two functions get results and</font>

269
00:12:10,670 --> 00:12:14,300
dispose dispose is there so we don't

270
00:12:13,040 --> 00:12:19,040
leak memory<font color="#E5E5E5"> and we can actually</font>

271
00:12:14,300 --> 00:12:21,829
iteratively<font color="#E5E5E5"> do for Apple</font><font color="#CCCCCC"> and so what you</font>

272
00:12:19,040 --> 00:12:24,680
get<font color="#E5E5E5"> is a rebel</font><font color="#CCCCCC"> that</font><font color="#E5E5E5"> you paste your</font>

273
00:12:21,830 --> 00:12:26,360
directives using system<font color="#CCCCCC"> IO whatever the</font>

274
00:12:24,680 --> 00:12:28,069
case may be<font color="#CCCCCC"> that you're trying to to</font>

275
00:12:26,360 --> 00:12:30,200
invoke<font color="#E5E5E5"> and then the actual code</font><font color="#CCCCCC"> that</font>

276
00:12:28,070 --> 00:12:31,910
you're executing<font color="#E5E5E5"> in this example you're</font>

277
00:12:30,200 --> 00:12:34,730
just<font color="#CCCCCC"> listening</font><font color="#E5E5E5"> providers on</font><font color="#CCCCCC"> the system</font>

278
00:12:31,910 --> 00:12:38,630
<font color="#E5E5E5">all of that is interactive right and so</font>

279
00:12:34,730 --> 00:12:43,820
what you come out<font color="#CCCCCC"> with is that you've</font>

280
00:12:38,630 --> 00:12:46,490
preserved<font color="#E5E5E5"> the script ability and of your</font>

281
00:12:43,820 --> 00:12:48,290
dynamic<font color="#E5E5E5"> languages sort of right and you</font>

282
00:12:46,490 --> 00:12:50,960
also<font color="#E5E5E5"> evaded some of the defenses for the</font>

283
00:12:48,290 --> 00:12:53,380
code that<font color="#CCCCCC"> you</font><font color="#E5E5E5"> execute but there are</font>

284
00:12:50,960 --> 00:12:56,810
<font color="#E5E5E5">disadvantages in it it's sequential</font>

285
00:12:53,380 --> 00:12:59,540
<font color="#CCCCCC">there is no abstraction</font><font color="#E5E5E5"> it's it's there</font>

286
00:12:56,810 --> 00:13:01,400
is<font color="#E5E5E5"> no reusability and</font><font color="#CCCCCC"> it's really</font><font color="#E5E5E5"> really</font>

287
00:12:59,540 --> 00:13:02,560
quick<font color="#CCCCCC"> and</font><font color="#E5E5E5"> dirty</font><font color="#CCCCCC"> okay so we should be</font>

288
00:13:01,400 --> 00:13:06,439
able to do<font color="#E5E5E5"> better</font>

289
00:13:02,560 --> 00:13:08,510
<font color="#CCCCCC">okay so let's build CSX extensions CSS</font>

290
00:13:06,440 --> 00:13:10,850
extensions<font color="#E5E5E5"> are built on the previous</font>

291
00:13:08,510 --> 00:13:13,670
contract but they improve on it<font color="#E5E5E5"> so to</font>

292
00:13:10,850 --> 00:13:16,550
give you<font color="#E5E5E5"> an example is</font><font color="#CCCCCC"> that now</font><font color="#E5E5E5"> instead</font>

293
00:13:13,670 --> 00:13:17,209
of having<font color="#E5E5E5"> get results and</font><font color="#CCCCCC"> dispose we're</font>

294
00:13:16,550 --> 00:13:19,550
gonna do

295
00:13:17,210 --> 00:13:21,560
<font color="#CCCCCC">pre-launch</font><font color="#E5E5E5"> wrong code and</font><font color="#CCCCCC"> post-launch so</font>

296
00:13:19,550 --> 00:13:23,750
you can actually create<font color="#E5E5E5"> hooks into what</font>

297
00:13:21,560 --> 00:13:27,859
you do when you're when you run in the

298
00:13:23,750 --> 00:13:33,890
code and to illustrate<font color="#E5E5E5"> this for example</font>

299
00:13:27,860 --> 00:13:36,620
<font color="#CCCCCC">you want to invoke a functionality</font><font color="#E5E5E5"> right</font>

300
00:13:33,890 --> 00:13:38,980
you create a sliver of code<font color="#E5E5E5"> your c-sharp</font>

301
00:13:36,620 --> 00:13:42,980
code that is<font color="#E5E5E5"> going to be dynamically</font>

302
00:13:38,980 --> 00:13:45,230
evaluated<font color="#E5E5E5"> and you just need to define</font>

303
00:13:42,980 --> 00:13:48,770
<font color="#E5E5E5">run code which is going to get</font><font color="#CCCCCC"> taxed out</font>

304
00:13:45,230 --> 00:13:52,040
<font color="#E5E5E5">of the clipboard and then you</font><font color="#CCCCCC"> need a</font>

305
00:13:48,770 --> 00:13:54,110
<font color="#E5E5E5">disposition so this is your meat of the</font>

306
00:13:52,040 --> 00:13:57,110
code<font color="#CCCCCC"> that</font><font color="#E5E5E5"> gets</font><font color="#CCCCCC"> involved by</font><font color="#E5E5E5"> the by the</font>

307
00:13:54,110 --> 00:14:00,080
rapid itself not per Apple but the the

308
00:13:57,110 --> 00:14:01,850
seesaw<font color="#E5E5E5"> itself and then in this case I</font>

309
00:14:00,080 --> 00:14:04,340
left my pre-launch and<font color="#CCCCCC"> post-launch</font>

310
00:14:01,850 --> 00:14:07,280
<font color="#E5E5E5">functions empty because I do not want to</font>

311
00:14:04,340 --> 00:14:10,130
do any<font color="#CCCCCC"> additional processing</font><font color="#E5E5E5"> and so this</font>

312
00:14:07,280 --> 00:14:13,699
is<font color="#E5E5E5"> a text</font><font color="#CCCCCC"> write code</font><font color="#E5E5E5"> this data data is</font>

313
00:14:10,130 --> 00:14:16,760
code and so this<font color="#E5E5E5"> text gets executed on</font>

314
00:14:13,700 --> 00:14:19,880
the<font color="#E5E5E5"> within the cradle so you're not</font>

315
00:14:16,760 --> 00:14:22,100
bringing<font color="#E5E5E5"> in dll's</font><font color="#CCCCCC"> or executables in the</font>

316
00:14:19,880 --> 00:14:25,400
environment you bring text<font color="#CCCCCC"> okay and once</font>

317
00:14:22,100 --> 00:14:29,180
you bring text<font color="#E5E5E5"> you should</font><font color="#CCCCCC"> be able to</font>

318
00:14:25,400 --> 00:14:31,699
<font color="#E5E5E5">compile it so for example typhoon is the</font>

319
00:14:29,180 --> 00:14:33,020
<font color="#CCCCCC">manish prototype that we have and</font><font color="#E5E5E5"> seesaw</font>

320
00:14:31,700 --> 00:14:36,200
is just<font color="#CCCCCC"> the part</font><font color="#E5E5E5"> of the deals with</font>

321
00:14:33,020 --> 00:14:38,120
c-sharp<font color="#CCCCCC"> and so as you can see</font><font color="#E5E5E5"> here a</font>

322
00:14:36,200 --> 00:14:40,550
word paste in clipboard manager<font color="#CCCCCC"> dot CS</font>

323
00:14:38,120 --> 00:14:44,030
it's our sliver<font color="#CCCCCC"> of code into it so we</font>

324
00:14:40,550 --> 00:14:47,660
compile it<font color="#E5E5E5"> okay and then we run it and</font>

325
00:14:44,030 --> 00:14:49,550
<font color="#E5E5E5">so we get the results of our</font><font color="#CCCCCC"> our</font>

326
00:14:47,660 --> 00:14:52,850
clipboard<font color="#E5E5E5"> and for example if we want to</font>

327
00:14:49,550 --> 00:14:54,829
copy master you<font color="#E5E5E5"> know we do exactly</font><font color="#CCCCCC"> the</font>

328
00:14:52,850 --> 00:14:58,310
<font color="#CCCCCC">same we get master from it</font><font color="#E5E5E5"> so we</font>

329
00:14:54,830 --> 00:14:59,360
decouple compilation from execution<font color="#CCCCCC"> from</font>

330
00:14:58,310 --> 00:15:01,459
<font color="#E5E5E5">the fact</font><font color="#CCCCCC"> that we're not actually</font>

331
00:14:59,360 --> 00:15:04,070
<font color="#E5E5E5">bringing in any DLL or executable we're</font>

332
00:15:01,460 --> 00:15:07,670
doing it live on<font color="#E5E5E5"> the system here</font><font color="#CCCCCC"> but</font>

333
00:15:04,070 --> 00:15:09,980
there lies a problem<font color="#CCCCCC"> okay and the</font>

334
00:15:07,670 --> 00:15:12,079
problem the<font color="#E5E5E5"> problem is</font><font color="#CCCCCC"> that we're first</font>

335
00:15:09,980 --> 00:15:14,540
<font color="#E5E5E5">we're dropping some temporary DLL on the</font>

336
00:15:12,080 --> 00:15:16,010
box which is not going to be malicious

337
00:15:14,540 --> 00:15:17,750
<font color="#E5E5E5">because it's going to be just part of</font>

338
00:15:16,010 --> 00:15:20,540
the part of<font color="#E5E5E5"> the code</font><font color="#CCCCCC"> that we're</font>

339
00:15:17,750 --> 00:15:25,610
<font color="#CCCCCC">executing right</font><font color="#E5E5E5"> but it's still a yellow</font>

340
00:15:20,540 --> 00:15:27,860
<font color="#CCCCCC">okay</font><font color="#E5E5E5"> and so we're not invoking</font><font color="#CCCCCC"> CSE that</font>

341
00:15:25,610 --> 00:15:30,470
exe so for defense that are watching<font color="#CCCCCC"> for</font>

342
00:15:27,860 --> 00:15:32,570
<font color="#CCCCCC">CSC CSC that</font><font color="#E5E5E5"> exe invocation</font>

343
00:15:30,470 --> 00:15:34,160
we're not playing<font color="#CCCCCC"> enough</font><font color="#E5E5E5"> right we're not</font>

344
00:15:32,570 --> 00:15:36,190
directly<font color="#CCCCCC"> going to command-line and</font>

345
00:15:34,160 --> 00:15:38,540
invoking CSC that the exceed therefore

346
00:15:36,190 --> 00:15:40,880
you will<font color="#E5E5E5"> never see this in your logs</font>

347
00:15:38,540 --> 00:15:42,589
<font color="#CCCCCC">however</font><font color="#E5E5E5"> see I see that the</font><font color="#CCCCCC"> XE is</font>

348
00:15:40,880 --> 00:15:45,260
actually still invoked on the<font color="#E5E5E5"> back end</font>

349
00:15:42,590 --> 00:15:47,600
<font color="#CCCCCC">okay through code Dom it's still it's</font>

350
00:15:45,260 --> 00:15:49,640
<font color="#E5E5E5">still done so that's really bad</font><font color="#CCCCCC"> for us</font>

351
00:15:47,600 --> 00:15:53,090
<font color="#CCCCCC">as red team operators because</font><font color="#E5E5E5"> we're</font>

352
00:15:49,640 --> 00:15:54,710
leaving<font color="#CCCCCC"> artifacts in the okay part is</font>

353
00:15:53,090 --> 00:15:56,930
the presence<font color="#E5E5E5"> of the temp files we're</font>

354
00:15:54,710 --> 00:16:01,280
<font color="#CCCCCC">gonna</font><font color="#E5E5E5"> solve</font><font color="#CCCCCC"> that later</font><font color="#E5E5E5"> the okay part</font><font color="#CCCCCC"> is</font>

355
00:15:56,930 --> 00:16:03,349
that we cannot delete the<font color="#E5E5E5"> dll while</font>

356
00:16:01,280 --> 00:16:05,540
we're using it because<font color="#E5E5E5"> of the way</font>

357
00:16:03,350 --> 00:16:06,980
<font color="#E5E5E5">Windows works the way dotnet actually</font>

358
00:16:05,540 --> 00:16:08,360
<font color="#CCCCCC">logs the file and</font><font color="#E5E5E5"> you can't really</font>

359
00:16:06,980 --> 00:16:10,850
delete<font color="#E5E5E5"> it</font>

360
00:16:08,360 --> 00:16:13,610
naming of temp files is<font color="#CCCCCC"> not</font><font color="#E5E5E5"> also under</font>

361
00:16:10,850 --> 00:16:16,190
your control which is<font color="#E5E5E5"> also</font><font color="#CCCCCC"> okay ish and</font>

362
00:16:13,610 --> 00:16:17,330
you can't unload the<font color="#E5E5E5"> dll</font><font color="#CCCCCC"> one to load</font><font color="#E5E5E5"> it</font>

363
00:16:16,190 --> 00:16:18,950
up<font color="#E5E5E5"> okay</font>

364
00:16:17,330 --> 00:16:22,100
those<font color="#E5E5E5"> are the real issues</font><font color="#CCCCCC"> that we need</font>

365
00:16:18,950 --> 00:16:24,560
to<font color="#E5E5E5"> contend with okay so and and</font><font color="#CCCCCC"> so when</font>

366
00:16:22,100 --> 00:16:27,170
we do compilation dotnet<font color="#E5E5E5"> we have an</font>

367
00:16:24,560 --> 00:16:28,760
<font color="#E5E5E5">option to generate in memory</font><font color="#CCCCCC"> a bunch of</font>

368
00:16:27,170 --> 00:16:30,319
<font color="#E5E5E5">people</font><font color="#CCCCCC"> actually take it as okay well</font>

369
00:16:28,760 --> 00:16:32,900
<font color="#E5E5E5">we'll generate in the memory and</font><font color="#CCCCCC"> then</font>

370
00:16:30,320 --> 00:16:34,400
we're we're<font color="#E5E5E5"> gonna forego all</font><font color="#CCCCCC"> the</font><font color="#E5E5E5"> DLL on</font>

371
00:16:32,900 --> 00:16:36,560
the<font color="#E5E5E5"> box</font><font color="#CCCCCC"> we're</font><font color="#E5E5E5"> not gonna drop any</font>

372
00:16:34,400 --> 00:16:39,350
artifacts we<font color="#E5E5E5"> this is a misnomer</font><font color="#CCCCCC"> right</font>

373
00:16:36,560 --> 00:16:41,180
you still generate memory means for

374
00:16:39,350 --> 00:16:44,240
<font color="#E5E5E5">dotnet for some reason it means in temp</font>

375
00:16:41,180 --> 00:16:45,650
folder<font color="#E5E5E5"> right so you still have artifacts</font>

376
00:16:44,240 --> 00:16:48,680
here's your source code that you're

377
00:16:45,650 --> 00:16:51,380
dropping<font color="#CCCCCC"> for for</font><font color="#E5E5E5"> your defense</font>

378
00:16:48,680 --> 00:16:56,180
here is the temporary files that you're

379
00:16:51,380 --> 00:16:57,980
also<font color="#E5E5E5"> dropping there and so if</font><font color="#CCCCCC"> you're if</font>

380
00:16:56,180 --> 00:16:59,959
don't be fooled by generate in memory

381
00:16:57,980 --> 00:17:02,780
right so we have to be able<font color="#CCCCCC"> to solve</font>

382
00:16:59,960 --> 00:17:06,410
<font color="#CCCCCC">that and also</font><font color="#E5E5E5"> if we look</font><font color="#CCCCCC"> at the process</font>

383
00:17:02,780 --> 00:17:09,050
<font color="#E5E5E5">monitor you see all</font><font color="#CCCCCC"> these intermediaries</font>

384
00:17:06,410 --> 00:17:11,270
smaller dll's that are being<font color="#E5E5E5"> compiled in</font>

385
00:17:09,050 --> 00:17:13,430
when you do<font color="#E5E5E5"> CSC that the X see you've</font>

386
00:17:11,270 --> 00:17:14,810
got your code you've got pretty large

387
00:17:13,430 --> 00:17:19,400
footprint<font color="#CCCCCC"> even though you're not</font>

388
00:17:14,810 --> 00:17:23,089
invoking<font color="#E5E5E5"> CSC directly okay how do we</font>

389
00:17:19,400 --> 00:17:25,069
<font color="#E5E5E5">remove artifacts well we want to delete</font>

390
00:17:23,089 --> 00:17:27,109
<font color="#CCCCCC">our</font><font color="#E5E5E5"> loaded assemblies for example we're</font>

391
00:17:25,069 --> 00:17:31,730
on the long-running<font color="#E5E5E5"> gig and we've</font>

392
00:17:27,109 --> 00:17:34,250
created<font color="#E5E5E5"> our payload and it's a</font><font color="#CCCCCC"> CS C or C</font>

393
00:17:31,730 --> 00:17:36,620
<font color="#CCCCCC">- C agent that needs to be long-living</font>

394
00:17:34,250 --> 00:17:38,510
<font color="#CCCCCC">it needs to connect</font><font color="#E5E5E5"> out</font><font color="#CCCCCC"> it runs in</font>

395
00:17:36,620 --> 00:17:41,928
memory for hours maybe days maybe weeks

396
00:17:38,510 --> 00:17:43,770
<font color="#E5E5E5">and yet all the DLLs</font><font color="#CCCCCC"> that we're</font><font color="#E5E5E5"> sourcing</font>

397
00:17:41,929 --> 00:17:46,560
will be temporary dll's there's

398
00:17:43,770 --> 00:17:48,510
present on the box<font color="#CCCCCC"> so</font><font color="#E5E5E5"> defense has big</font>

399
00:17:46,560 --> 00:17:50,429
chance<font color="#E5E5E5"> of discovering us we need to be</font>

400
00:17:48,510 --> 00:17:53,310
able to<font color="#E5E5E5"> delete them we need to be able</font>

401
00:17:50,430 --> 00:17:55,200
to<font color="#E5E5E5"> unload them for example</font><font color="#CCCCCC"> we've loaded</font>

402
00:17:53,310 --> 00:17:57,179
<font color="#E5E5E5">some functionality we're done with it we</font>

403
00:17:55,200 --> 00:17:59,820
want<font color="#CCCCCC"> to</font><font color="#E5E5E5"> unload</font><font color="#CCCCCC"> it also</font><font color="#E5E5E5"> not possible we</font>

404
00:17:57,180 --> 00:18:02,340
want to do that and then<font color="#E5E5E5"> as you saw</font>

405
00:17:59,820 --> 00:18:04,980
there are a bunch<font color="#E5E5E5"> of artifacts like temp</font>

406
00:18:02,340 --> 00:18:07,620
directory<font color="#E5E5E5"> CMD</font><font color="#CCCCCC"> file CSC files or</font><font color="#E5E5E5"> whatever</font>

407
00:18:04,980 --> 00:18:11,090
the case may be<font color="#E5E5E5"> however</font><font color="#CCCCCC"> the</font><font color="#E5E5E5"> problem is</font>

408
00:18:07,620 --> 00:18:15,719
<font color="#CCCCCC">that none of</font><font color="#E5E5E5"> that is achievable but by</font>

409
00:18:11,090 --> 00:18:18,990
dotnet at least in classic net<font color="#CCCCCC"> directly</font>

410
00:18:15,720 --> 00:18:21,300
how do we deal with<font color="#E5E5E5"> this well for</font>

411
00:18:18,990 --> 00:18:23,340
example<font color="#E5E5E5"> in this code you can't delete a</font>

412
00:18:21,300 --> 00:18:25,860
file<font color="#E5E5E5"> so for example you've compiled an</font>

413
00:18:23,340 --> 00:18:28,080
assembly through our methods right we

414
00:18:25,860 --> 00:18:30,990
brought in<font color="#CCCCCC"> cool code we've compiled it</font>

415
00:18:28,080 --> 00:18:32,610
we ran it<font color="#E5E5E5"> and perhaps it runs for hours</font>

416
00:18:30,990 --> 00:18:34,610
<font color="#E5E5E5">but we can't relieve the assembly that</font>

417
00:18:32,610 --> 00:18:36,629
<font color="#CCCCCC">we've</font><font color="#E5E5E5"> just</font><font color="#CCCCCC"> loaded okay it's locked</font>

418
00:18:34,610 --> 00:18:39,330
well turns<font color="#E5E5E5"> out that we can use</font>

419
00:18:36,630 --> 00:18:41,070
application domains right like for<font color="#CCCCCC"> you</font>

420
00:18:39,330 --> 00:18:42,419
to code this block<font color="#CCCCCC"> you just</font><font color="#E5E5E5"> need to</font>

421
00:18:41,070 --> 00:18:44,879
<font color="#CCCCCC">introduce that into a</font><font color="#E5E5E5"> different</font>

422
00:18:42,420 --> 00:18:46,770
application<font color="#E5E5E5"> domain and then application</font>

423
00:18:44,880 --> 00:18:49,380
domain has<font color="#CCCCCC"> a separate channel for</font>

424
00:18:46,770 --> 00:18:50,910
<font color="#CCCCCC">loading your DLL and once you're done</font>

425
00:18:49,380 --> 00:18:53,940
<font color="#CCCCCC">with</font><font color="#E5E5E5"> it you</font><font color="#CCCCCC"> just remove the entire</font>

426
00:18:50,910 --> 00:18:56,280
<font color="#E5E5E5">application domain which unloads all of</font>

427
00:18:53,940 --> 00:18:56,760
your dll's<font color="#CCCCCC"> and then you you can deal</font>

428
00:18:56,280 --> 00:18:58,740
with<font color="#E5E5E5"> that</font>

429
00:18:56,760 --> 00:19:01,440
that's also an<font color="#CCCCCC"> evasion</font><font color="#E5E5E5"> right so if</font>

430
00:18:58,740 --> 00:19:03,390
you're watching<font color="#E5E5E5"> for</font><font color="#CCCCCC"> four things if</font>

431
00:19:01,440 --> 00:19:05,070
you're<font color="#E5E5E5"> trying to program it that way</font>

432
00:19:03,390 --> 00:19:09,870
you're using it if<font color="#E5E5E5"> you're a defense then</font>

433
00:19:05,070 --> 00:19:11,490
you're watching for it<font color="#E5E5E5"> okay we kind of</font>

434
00:19:09,870 --> 00:19:14,310
start<font color="#E5E5E5"> solving these issues</font><font color="#CCCCCC"> the</font><font color="#E5E5E5"> other</font>

435
00:19:11,490 --> 00:19:16,770
issue that<font color="#E5E5E5"> we have as an operator how do</font>

436
00:19:14,310 --> 00:19:20,060
<font color="#E5E5E5">we use operating system facilities</font><font color="#CCCCCC"> how</font>

437
00:19:16,770 --> 00:19:22,980
do we use<font color="#E5E5E5"> Interop well what is interrupt</font>

438
00:19:20,060 --> 00:19:25,409
you have investment in your unmanaged

439
00:19:22,980 --> 00:19:28,950
code you've got your<font color="#E5E5E5"> com you've got your</font>

440
00:19:25,410 --> 00:19:30,990
<font color="#E5E5E5">ActiveX you've got your C++ programs</font>

441
00:19:28,950 --> 00:19:33,300
that you<font color="#CCCCCC"> have on the Box that</font><font color="#E5E5E5"> you</font><font color="#CCCCCC"> may</font>

442
00:19:30,990 --> 00:19:35,490
potentially want to use so<font color="#E5E5E5"> you</font><font color="#CCCCCC"> don't</font>

443
00:19:33,300 --> 00:19:41,940
have to create them from<font color="#CCCCCC"> scratch</font><font color="#E5E5E5"> right</font>

444
00:19:35,490 --> 00:19:44,670
<font color="#CCCCCC">and so for dotnet</font><font color="#E5E5E5"> it's a little bit hard</font>

445
00:19:41,940 --> 00:19:47,340
to do<font color="#E5E5E5"> because it's managed code so</font>

446
00:19:44,670 --> 00:19:49,740
<font color="#E5E5E5">interrupting dotnet is is is achieved by</font>

447
00:19:47,340 --> 00:19:52,350
<font color="#CCCCCC">a process invoke or platform and walk</font>

448
00:19:49,740 --> 00:19:54,450
rather<font color="#CCCCCC"> right it's a system</font><font color="#E5E5E5"> runtime</font>

449
00:19:52,350 --> 00:19:57,250
runtime<font color="#CCCCCC"> interrupt services that says</font>

450
00:19:54,450 --> 00:20:00,910
<font color="#CCCCCC">okay well how do we</font><font color="#E5E5E5"> map a</font>

451
00:19:57,250 --> 00:20:02,920
LP void pointer<font color="#E5E5E5"> - I</font><font color="#CCCCCC"> don't know maybe</font><font color="#E5E5E5"> an</font>

452
00:20:00,910 --> 00:20:04,720
<font color="#CCCCCC">int</font><font color="#E5E5E5"> in a dotnet</font><font color="#CCCCCC"> right and so</font><font color="#E5E5E5"> they</font>

453
00:20:02,920 --> 00:20:06,100
interrupt basically says<font color="#E5E5E5"> okay well</font>

454
00:20:04,720 --> 00:20:08,500
<font color="#E5E5E5">that's how you do it and</font><font color="#CCCCCC"> that's how</font><font color="#E5E5E5"> you</font>

455
00:20:06,100 --> 00:20:12,820
invoke your operating system facilities

456
00:20:08,500 --> 00:20:14,410
from dotnet<font color="#E5E5E5"> okay so also evasion right</font>

457
00:20:12,820 --> 00:20:16,149
because we're not strictly<font color="#CCCCCC"> working that</font>

458
00:20:14,410 --> 00:20:18,730
<font color="#E5E5E5">dotnet anymore we're</font><font color="#CCCCCC"> actually reaching</font>

459
00:20:16,150 --> 00:20:20,650
<font color="#E5E5E5">out for calm for ActiveX and whatnot</font><font color="#CCCCCC"> and</font>

460
00:20:18,730 --> 00:20:22,870
<font color="#CCCCCC">so from defense perspective you should</font>

461
00:20:20,650 --> 00:20:25,350
<font color="#CCCCCC">be able to</font><font color="#E5E5E5"> trace</font><font color="#CCCCCC"> that path right</font><font color="#E5E5E5"> from</font>

462
00:20:22,870 --> 00:20:30,909
the<font color="#E5E5E5"> offensive perspective we want that</font>

463
00:20:25,350 --> 00:20:33,370
how do<font color="#E5E5E5"> we do this</font><font color="#CCCCCC"> in code well the way</font>

464
00:20:30,910 --> 00:20:38,110
to use<font color="#CCCCCC"> interrupt services is that we are</font>

465
00:20:33,370 --> 00:20:40,629
<font color="#E5E5E5">creating a attribute right for let's say</font>

466
00:20:38,110 --> 00:20:43,689
we want to<font color="#E5E5E5"> load user 32 that</font><font color="#CCCCCC"> DLL we want</font>

467
00:20:40,630 --> 00:20:46,500
to find window X for a function and we

468
00:20:43,690 --> 00:20:49,530
<font color="#CCCCCC">want</font><font color="#E5E5E5"> to invoke invoke something in it</font>

469
00:20:46,500 --> 00:20:51,970
unfortunately<font color="#E5E5E5"> this is a compile time</font>

470
00:20:49,530 --> 00:20:55,810
<font color="#E5E5E5">lock right you need to</font><font color="#CCCCCC"> be able to</font>

471
00:20:51,970 --> 00:20:58,450
<font color="#E5E5E5">resolve attributes like DLL import and</font>

472
00:20:55,810 --> 00:21:01,780
files or other<font color="#E5E5E5"> functions that you find</font>

473
00:20:58,450 --> 00:21:04,480
at a compile time you can do this but

474
00:21:01,780 --> 00:21:05,560
and you can<font color="#CCCCCC"> actually use that in a</font>

475
00:21:04,480 --> 00:21:08,710
<font color="#E5E5E5">different code so you can actually</font>

476
00:21:05,560 --> 00:21:12,370
compile<font color="#E5E5E5"> DLL with you are just the</font>

477
00:21:08,710 --> 00:21:15,250
prototype<font color="#E5E5E5"> or a stub that loads the DLL</font>

478
00:21:12,370 --> 00:21:18,699
import<font color="#E5E5E5"> and then you use</font><font color="#CCCCCC"> that little</font><font color="#E5E5E5"> DLL</font>

479
00:21:15,250 --> 00:21:22,780
<font color="#CCCCCC">enter in the third-party code and so the</font>

480
00:21:18,700 --> 00:21:25,090
way it looks in the encode is like this

481
00:21:22,780 --> 00:21:29,440
right you you for<font color="#E5E5E5"> example for clipboard</font>

482
00:21:25,090 --> 00:21:33,040
manager that we've been<font color="#E5E5E5"> using you bring</font>

483
00:21:29,440 --> 00:21:36,130
in user<font color="#CCCCCC"> 32</font><font color="#E5E5E5"> the DLL</font><font color="#CCCCCC"> a bunch of</font><font color="#E5E5E5"> other</font>

484
00:21:33,040 --> 00:21:39,010
dependencies and you know you you

485
00:21:36,130 --> 00:21:40,990
execute<font color="#CCCCCC"> your code by using you know all</font>

486
00:21:39,010 --> 00:21:42,940
those linking<font color="#E5E5E5"> but like I was saying it's</font>

487
00:21:40,990 --> 00:21:46,210
a<font color="#CCCCCC"> compiled dependency so you actually</font>

488
00:21:42,940 --> 00:21:48,580
<font color="#CCCCCC">need to know upfront what</font><font color="#E5E5E5"> DLL you're</font>

489
00:21:46,210 --> 00:21:52,020
loading<font color="#CCCCCC"> okay</font><font color="#E5E5E5"> and will function you're</font>

490
00:21:48,580 --> 00:21:55,990
looking for and<font color="#E5E5E5"> how you're invoking this</font>

491
00:21:52,020 --> 00:21:58,870
it's bad bad because we're aiming and

492
00:21:55,990 --> 00:22:01,180
striving for dynamic retool<font color="#E5E5E5"> and so if we</font>

493
00:21:58,870 --> 00:22:04,419
start<font color="#E5E5E5"> being more dynamic we should be</font>

494
00:22:01,180 --> 00:22:06,400
able<font color="#E5E5E5"> to be agnostic from what DLL we're</font>

495
00:22:04,420 --> 00:22:08,770
<font color="#CCCCCC">actually loading at runtime for example</font>

496
00:22:06,400 --> 00:22:10,799
I may<font color="#E5E5E5"> have some logic in my code</font><font color="#CCCCCC"> that</font>

497
00:22:08,770 --> 00:22:13,620
says<font color="#CCCCCC"> okay</font>

498
00:22:10,799 --> 00:22:15,850
you know<font color="#E5E5E5"> on the system I discovered</font>

499
00:22:13,620 --> 00:22:20,080
<font color="#E5E5E5">Oracle right</font><font color="#CCCCCC"> I want</font><font color="#E5E5E5"> to be able to</font>

500
00:22:15,850 --> 00:22:22,480
dynamically load<font color="#E5E5E5"> Oracle</font><font color="#CCCCCC"> DLL</font><font color="#E5E5E5"> into my code</font>

501
00:22:20,080 --> 00:22:24,129
and<font color="#E5E5E5"> work with it currently I don't have</font>

502
00:22:22,480 --> 00:22:27,100
a way to do this because<font color="#E5E5E5"> I have</font><font color="#CCCCCC"> to be</font>

503
00:22:24,129 --> 00:22:30,158
able to know<font color="#CCCCCC"> the interface for it and</font>

504
00:22:27,100 --> 00:22:33,219
the functions that<font color="#E5E5E5"> I that I use so let's</font>

505
00:22:30,159 --> 00:22:35,409
do a better dynamic<font color="#CCCCCC"> interrupt</font><font color="#E5E5E5"> right so</font>

506
00:22:33,220 --> 00:22:37,389
there is this code at Google<font color="#CCCCCC"> right the</font>

507
00:22:35,409 --> 00:22:39,789
sliver of code<font color="#CCCCCC"> that I stole that allows</font>

508
00:22:37,389 --> 00:22:42,008
you<font color="#CCCCCC"> to do dynamic</font><font color="#E5E5E5"> data all imports</font>

509
00:22:39,789 --> 00:22:45,490
<font color="#E5E5E5">essentially</font><font color="#CCCCCC"> all you have to do is pour</font>

510
00:22:42,009 --> 00:22:47,289
<font color="#E5E5E5">into</font><font color="#CCCCCC"> two exists in DL on the box and if</font>

511
00:22:45,490 --> 00:22:49,269
you know what functions exist<font color="#E5E5E5"> in it you</font>

512
00:22:47,289 --> 00:22:53,259
can actually<font color="#E5E5E5"> dynamically load it at the</font>

513
00:22:49,269 --> 00:22:55,419
<font color="#E5E5E5">wrong time dotnet 4.0 supports dynamic</font>

514
00:22:53,259 --> 00:22:57,970
keywords<font color="#E5E5E5"> right and so those dynamic</font>

515
00:22:55,419 --> 00:23:00,279
keywords allow you to do so<font color="#CCCCCC"> a bunch of</font>

516
00:22:57,970 --> 00:23:01,960
reflection<font color="#E5E5E5"> a bunch of emission API that</font>

517
00:23:00,279 --> 00:23:04,149
<font color="#CCCCCC">your you're</font><font color="#E5E5E5"> dealing with here but that's</font>

518
00:23:01,960 --> 00:23:07,840
good<font color="#E5E5E5"> for offense because you're evading</font>

519
00:23:04,149 --> 00:23:10,620
<font color="#E5E5E5">right no tools walk</font><font color="#CCCCCC"> directly to the</font>

520
00:23:07,840 --> 00:23:12,779
<font color="#E5E5E5">bottom of the dynamic well at least not</font>

521
00:23:10,620 --> 00:23:16,600
<font color="#CCCCCC">that I've seen</font>

522
00:23:12,779 --> 00:23:18,370
<font color="#E5E5E5">okay so now we can use this concept</font><font color="#CCCCCC"> and</font>

523
00:23:16,600 --> 00:23:20,709
<font color="#CCCCCC">actually bring back into rubble</font><font color="#E5E5E5"> right</font>

524
00:23:18,370 --> 00:23:25,258
and so we can actually<font color="#E5E5E5"> say okay we'll</font>

525
00:23:20,710 --> 00:23:28,419
wrap<font color="#CCCCCC"> 'l why don't we go into our little</font>

526
00:23:25,259 --> 00:23:30,279
<font color="#CCCCCC">apple and say dynamic user 32</font><font color="#E5E5E5"> and from</font>

527
00:23:28,419 --> 00:23:33,519
<font color="#E5E5E5">that dynamic user 32</font><font color="#CCCCCC"> i'm gonna get a</font>

528
00:23:30,279 --> 00:23:36,220
message box if you think about<font color="#E5E5E5"> what just</font>

529
00:23:33,519 --> 00:23:40,389
happened<font color="#CCCCCC"> you're</font><font color="#E5E5E5"> actually creating</font><font color="#CCCCCC"> a full</font>

530
00:23:36,220 --> 00:23:42,399
scriptable dotnet<font color="#CCCCCC"> inter abridge</font><font color="#E5E5E5"> okay for</font>

531
00:23:40,389 --> 00:23:46,779
<font color="#E5E5E5">things that you want</font><font color="#CCCCCC"> to do on the system</font>

532
00:23:42,399 --> 00:23:48,518
no more<font color="#E5E5E5"> knowing what what what well you</font>

533
00:23:46,779 --> 00:23:50,139
<font color="#E5E5E5">you still</font><font color="#CCCCCC"> obviously can bring your your</font>

534
00:23:48,519 --> 00:23:54,309
own code but it's it gets<font color="#E5E5E5"> a little bit</font>

535
00:23:50,139 --> 00:23:56,469
more<font color="#E5E5E5"> dynamic here okay so we mostly met</font>

536
00:23:54,309 --> 00:23:58,600
our seesaw<font color="#CCCCCC"> goal goals right that we're</font>

537
00:23:56,470 --> 00:24:01,990
dynamically<font color="#E5E5E5"> compiling c-sharp code we're</font>

538
00:23:58,600 --> 00:24:03,428
doing<font color="#CCCCCC"> r apple we're loading assemblies</font>

539
00:24:01,990 --> 00:24:06,429
we're unloading assemblies we're

540
00:24:03,429 --> 00:24:12,519
deleting<font color="#E5E5E5"> files</font><font color="#CCCCCC"> we're taking</font><font color="#E5E5E5"> care of some</font>

541
00:24:06,429 --> 00:24:14,320
of the<font color="#CCCCCC"> interrupt things okay</font><font color="#E5E5E5"> well if you</font>

542
00:24:12,519 --> 00:24:18,970
saw in the process<font color="#CCCCCC"> Explorer we're still</font>

543
00:24:14,320 --> 00:24:21,009
leaving<font color="#E5E5E5"> a lot of artifacts</font><font color="#CCCCCC"> it is not</font>

544
00:24:18,970 --> 00:24:22,960
good<font color="#CCCCCC"> for us and</font><font color="#E5E5E5"> we want to do better</font>

545
00:24:21,009 --> 00:24:23,650
well can we<font color="#E5E5E5"> achieve a better script</font>

546
00:24:22,960 --> 00:24:25,650
ability

547
00:24:23,650 --> 00:24:28,030
can we actually forego<font color="#E5E5E5"> ab domains</font>

548
00:24:25,650 --> 00:24:30,100
<font color="#CCCCCC">altogether</font><font color="#E5E5E5"> because</font><font color="#CCCCCC"> there</font><font color="#E5E5E5"> are pain to</font>

549
00:24:28,030 --> 00:24:31,990
work<font color="#E5E5E5"> with right and it has a lot of code</font>

550
00:24:30,100 --> 00:24:35,290
that<font color="#E5E5E5"> you</font><font color="#CCCCCC"> need to you need</font><font color="#E5E5E5"> to supervise</font>

551
00:24:31,990 --> 00:24:39,640
right it's it's<font color="#CCCCCC"> a it's very much</font>

552
00:24:35,290 --> 00:24:43,570
assisted execution crazy idea right<font color="#E5E5E5"> why</font>

553
00:24:39,640 --> 00:24:45,970
don't<font color="#CCCCCC"> we not compile</font><font color="#E5E5E5"> anything well you</font>

554
00:24:43,570 --> 00:24:47,409
<font color="#CCCCCC">asked how do you</font><font color="#E5E5E5"> actually</font><font color="#CCCCCC"> execute</font><font color="#E5E5E5"> code</font>

555
00:24:45,970 --> 00:24:49,260
if you don't compile anything<font color="#E5E5E5"> in</font>

556
00:24:47,410 --> 00:24:51,580
environment that<font color="#E5E5E5"> actually a lot of</font>

557
00:24:49,260 --> 00:24:54,820
forces you<font color="#CCCCCC"> to compile something</font><font color="#E5E5E5"> into</font>

558
00:24:51,580 --> 00:24:57,850
some intermediate language<font color="#CCCCCC"> okay well</font>

559
00:24:54,820 --> 00:25:01,780
let's review<font color="#CCCCCC"> that okay so we're bring in</font>

560
00:24:57,850 --> 00:25:05,139
a different<font color="#E5E5E5"> set of you know code or</font>

561
00:25:01,780 --> 00:25:08,530
<font color="#E5E5E5">api's and call it delirium right what</font>

562
00:25:05,140 --> 00:25:10,750
that means is we're banking on dynamic

563
00:25:08,530 --> 00:25:13,809
linking<font color="#E5E5E5"> runtime so we work with CLR</font>

564
00:25:10,750 --> 00:25:16,990
before now we're working<font color="#E5E5E5"> with DLR so</font>

565
00:25:13,809 --> 00:25:20,940
what is DLR<font color="#CCCCCC"> all right DLR is a dotnet</font>

566
00:25:16,990 --> 00:25:23,350
set it's a set of<font color="#CCCCCC"> API is in dotnet that</font>

567
00:25:20,940 --> 00:25:26,200
allows<font color="#E5E5E5"> developers to</font><font color="#CCCCCC"> create dynamic</font>

568
00:25:23,350 --> 00:25:29,290
<font color="#E5E5E5">languages on top of dotnet plain and</font>

569
00:25:26,200 --> 00:25:31,179
simple when<font color="#E5E5E5"> Java wanted to wanted</font><font color="#CCCCCC"> the</font>

570
00:25:29,290 --> 00:25:33,399
<font color="#E5E5E5">whole world that</font><font color="#CCCCCC"> net said</font><font color="#E5E5E5"> okay well why</font>

571
00:25:31,179 --> 00:25:34,929
don't<font color="#E5E5E5"> we move developers over to to us</font>

572
00:25:33,400 --> 00:25:36,670
and how do we<font color="#E5E5E5"> do this well we need to</font>

573
00:25:34,929 --> 00:25:39,309
create an interrupt way of creating

574
00:25:36,670 --> 00:25:43,300
<font color="#E5E5E5">let's say you know porting uh I don't</font>

575
00:25:39,309 --> 00:25:45,280
<font color="#E5E5E5">know</font><font color="#CCCCCC"> Java Python Ruby whatever the case</font>

576
00:25:43,300 --> 00:25:45,639
may be right on<font color="#E5E5E5"> the dotnet how do we do</font>

577
00:25:45,280 --> 00:25:49,120
this

578
00:25:45,640 --> 00:25:51,850
dynamic<font color="#E5E5E5"> link in runtime</font><font color="#CCCCCC"> okay</font><font color="#E5E5E5"> so it sits</font>

579
00:25:49,120 --> 00:25:53,439
in between<font color="#CCCCCC"> the common</font><font color="#E5E5E5"> link in a common</font>

580
00:25:51,850 --> 00:25:57,040
language<font color="#E5E5E5"> runtime that you're</font><font color="#CCCCCC"> executing</font>

581
00:25:53,440 --> 00:25:58,510
in static types dotnet and<font color="#E5E5E5"> then the</font>

582
00:25:57,040 --> 00:26:00,940
<font color="#CCCCCC">actual language</font><font color="#E5E5E5"> that you're trying</font><font color="#CCCCCC"> to</font>

583
00:25:58,510 --> 00:26:04,090
<font color="#E5E5E5">create so essentially what we're doing</font>

584
00:26:00,940 --> 00:26:08,980
we're creating a<font color="#E5E5E5"> dynamic</font><font color="#CCCCCC"> language on top</font>

585
00:26:04,090 --> 00:26:10,780
of dotnet we want to move away<font color="#CCCCCC"> from in</font>

586
00:26:08,980 --> 00:26:12,970
plain terms we want<font color="#E5E5E5"> to move away from</font>

587
00:26:10,780 --> 00:26:15,190
strongly<font color="#CCCCCC"> typed language</font><font color="#E5E5E5"> that we have</font><font color="#CCCCCC"> to</font>

588
00:26:12,970 --> 00:26:17,020
supervise<font color="#E5E5E5"> and be assisted to something</font>

589
00:26:15,190 --> 00:26:19,720
that<font color="#E5E5E5"> is</font><font color="#CCCCCC"> very simple right</font><font color="#E5E5E5"> that we were</font>

590
00:26:17,020 --> 00:26:23,559
<font color="#CCCCCC">doing</font><font color="#E5E5E5"> in Python right we're doing script</font>

591
00:26:19,720 --> 00:26:27,400
object<font color="#CCCCCC"> comm</font><font color="#E5E5E5"> plus equals one done okay</font>

592
00:26:23,559 --> 00:26:29,559
so it<font color="#E5E5E5"> brings a lot of advantages it</font>

593
00:26:27,400 --> 00:26:32,320
brings some disadvantages let's review

594
00:26:29,559 --> 00:26:35,950
<font color="#E5E5E5">so first of all you need</font><font color="#CCCCCC"> to there are</font>

595
00:26:32,320 --> 00:26:37,780
two there are two namespaces<font color="#CCCCCC"> that source</font>

596
00:26:35,950 --> 00:26:39,880
in DLR and

597
00:26:37,780 --> 00:26:44,530
it's Microsoft scripting and Microsoft

598
00:26:39,880 --> 00:26:45,640
Dynamics this is the serve the middle

599
00:26:44,530 --> 00:26:48,580
layer that allows<font color="#CCCCCC"> you to</font><font color="#E5E5E5"> create</font>

600
00:26:45,640 --> 00:26:51,490
languages and then you create languages

601
00:26:48,580 --> 00:26:54,159
and so it so happens<font color="#CCCCCC"> that a lot of</font>

602
00:26:51,490 --> 00:26:55,510
<font color="#E5E5E5">languages have</font><font color="#CCCCCC"> been already created for</font>

603
00:26:54,160 --> 00:26:58,120
<font color="#CCCCCC">example ironpython</font>

604
00:26:55,510 --> 00:27:00,820
<font color="#E5E5E5">and so</font><font color="#CCCCCC"> ayran</font><font color="#E5E5E5"> python is nothing more than</font>

605
00:26:58,120 --> 00:27:03,250
<font color="#E5E5E5">just an overlay of</font><font color="#CCCCCC"> Python language</font><font color="#E5E5E5"> on</font>

606
00:27:00,820 --> 00:27:05,470
top of the DLR<font color="#E5E5E5"> we move away from</font>

607
00:27:03,250 --> 00:27:08,410
strongly<font color="#CCCCCC"> typed dynamic types which means</font>

608
00:27:05,470 --> 00:27:10,570
speed of executed of<font color="#CCCCCC"> comp speed of</font>

609
00:27:08,410 --> 00:27:14,020
development<font color="#CCCCCC"> on systems</font><font color="#E5E5E5"> Python is much</font>

610
00:27:10,570 --> 00:27:17,439
faster<font color="#E5E5E5"> to develop them</font><font color="#CCCCCC"> c-sharp ok for</font>

611
00:27:14,020 --> 00:27:20,980
many<font color="#E5E5E5"> reasons</font><font color="#CCCCCC"> and and so we hide</font>

612
00:27:17,440 --> 00:27:23,200
complexity on top<font color="#CCCCCC"> of it</font><font color="#E5E5E5"> we escape a lot</font>

613
00:27:20,980 --> 00:27:26,950
of things that you<font color="#E5E5E5"> know defense is doing</font>

614
00:27:23,200 --> 00:27:28,630
<font color="#CCCCCC">to to prototype</font><font color="#E5E5E5"> us here's a difference</font>

615
00:27:26,950 --> 00:27:31,270
right the you've<font color="#CCCCCC"> got the</font><font color="#E5E5E5"> c-sharp</font>

616
00:27:28,630 --> 00:27:34,180
aesthetic types what that code<font color="#E5E5E5"> does it's</font>

617
00:27:31,270 --> 00:27:36,460
it's<font color="#CCCCCC"> basically it goes out</font><font color="#E5E5E5"> to google.com</font>

618
00:27:34,180 --> 00:27:39,010
<font color="#E5E5E5">and fetches a page but it does it in the</font>

619
00:27:36,460 --> 00:27:42,400
c-sharp<font color="#E5E5E5"> counter shell in the</font><font color="#CCCCCC"> powershell</font>

620
00:27:39,010 --> 00:27:46,720
is dynamic way of<font color="#CCCCCC"> doing so</font><font color="#E5E5E5"> but</font><font color="#CCCCCC"> we know</font>

621
00:27:42,400 --> 00:27:48,760
we want<font color="#CCCCCC"> to contain</font><font color="#E5E5E5"> we want to assume the</font>

622
00:27:46,720 --> 00:27:51,850
dynamic nature of<font color="#CCCCCC"> powershell but without</font>

623
00:27:48,760 --> 00:27:54,040
our<font color="#CCCCCC"> shell so we do not get logged and</font>

624
00:27:51,850 --> 00:27:55,899
flagged and so you can see the

625
00:27:54,040 --> 00:27:59,649
difference<font color="#E5E5E5"> between how easy it is to do</font>

626
00:27:55,900 --> 00:28:02,170
in<font color="#CCCCCC"> powershell well in a c python</font><font color="#E5E5E5"> you</font>

627
00:27:59,650 --> 00:28:04,360
would import your<font color="#E5E5E5"> URL library you would</font>

628
00:28:02,170 --> 00:28:06,730
<font color="#E5E5E5">go to google directly you would print</font>

629
00:28:04,360 --> 00:28:09,340
content<font color="#E5E5E5"> it's comparable to partial it's</font>

630
00:28:06,730 --> 00:28:11,500
very easy<font color="#E5E5E5"> it's very dynamic</font><font color="#CCCCCC"> and so is in</font>

631
00:28:09,340 --> 00:28:13,419
<font color="#CCCCCC">DLR write all you do is you bring</font>

632
00:28:11,500 --> 00:28:15,940
exactly the same web client as you would

633
00:28:13,420 --> 00:28:18,880
in c-sharp or<font color="#E5E5E5"> partial and you go to that</font>

634
00:28:15,940 --> 00:28:20,500
<font color="#CCCCCC">google.com and bring that page so if you</font>

635
00:28:18,880 --> 00:28:23,140
think<font color="#E5E5E5"> about that what just happened here</font>

636
00:28:20,500 --> 00:28:26,170
we just started coding<font color="#E5E5E5"> in Python which</font>

637
00:28:23,140 --> 00:28:29,080
is<font color="#CCCCCC"> ten times</font><font color="#E5E5E5"> faster to develop in for</font>

638
00:28:26,170 --> 00:28:31,180
many people right<font color="#E5E5E5"> and we also maintain</font>

639
00:28:29,080 --> 00:28:33,159
<font color="#CCCCCC">the flexibility of the powershell and</font>

640
00:28:31,180 --> 00:28:38,740
yet we're<font color="#CCCCCC"> actually directly</font><font color="#E5E5E5"> interfacing</font>

641
00:28:33,160 --> 00:28:43,180
with dotnet<font color="#CCCCCC"> okay this is what</font><font color="#E5E5E5"> DLR gets</font>

642
00:28:38,740 --> 00:28:47,040
you<font color="#E5E5E5"> okay no compilation no artifacts on</font>

643
00:28:43,180 --> 00:28:50,880
<font color="#CCCCCC">the system no temporary files</font><font color="#E5E5E5"> no code</font>

644
00:28:47,040 --> 00:28:53,370
<font color="#E5E5E5">nothing so for defense if you</font>

645
00:28:50,880 --> 00:28:56,070
the offense moves<font color="#E5E5E5"> into DLR and start</font>

646
00:28:53,370 --> 00:28:58,080
creating code in ironpython for example

647
00:28:56,070 --> 00:29:00,030
properly instrumented you lose

648
00:28:58,080 --> 00:29:03,379
<font color="#CCCCCC">absolutely visibility into what they're</font>

649
00:29:00,030 --> 00:29:06,920
doing<font color="#E5E5E5"> which is</font><font color="#CCCCCC"> good</font><font color="#E5E5E5"> for us develop</font>

650
00:29:03,380 --> 00:29:12,200
defense<font color="#E5E5E5"> needs to look at that further</font>

651
00:29:06,920 --> 00:29:19,320
<font color="#CCCCCC">okay so let's</font><font color="#E5E5E5"> look at the example here</font>

652
00:29:12,200 --> 00:29:20,790
what are we doing<font color="#CCCCCC"> if this was</font><font color="#E5E5E5"> our rebel</font>

653
00:29:19,320 --> 00:29:24,200
and we're actually<font color="#CCCCCC"> we were actually</font>

654
00:29:20,790 --> 00:29:24,200
<font color="#CCCCCC">using</font><font color="#E5E5E5"> the the web client through</font>

655
00:29:25,190 --> 00:29:29,940
interactive means if this was our

656
00:29:27,840 --> 00:29:36,060
c-sharp code that were actually sourcing

657
00:29:29,940 --> 00:29:38,490
for compilation then DLR is just a just

658
00:29:36,060 --> 00:29:40,230
<font color="#E5E5E5">you import the CLR you add reference to</font>

659
00:29:38,490 --> 00:29:43,710
system then you<font color="#E5E5E5"> know port system</font><font color="#CCCCCC"> and</font>

660
00:29:40,230 --> 00:29:46,110
then you execute Python code<font color="#E5E5E5"> and so we</font>

661
00:29:43,710 --> 00:29:48,480
can<font color="#E5E5E5"> start doing compilation if we did</font>

662
00:29:46,110 --> 00:29:51,030
that<font color="#CCCCCC"> in c-sharp before</font><font color="#E5E5E5"> we can do</font>

663
00:29:48,480 --> 00:29:56,670
compilation of your c-sharp code<font color="#E5E5E5"> right</font>

664
00:29:51,030 --> 00:30:00,480
from the from the<font color="#E5E5E5"> Python okay so you get</font>

665
00:29:56,670 --> 00:30:02,580
into even<font color="#CCCCCC"> more stealth this way and</font>

666
00:30:00,480 --> 00:30:11,820
we're actually gonna see how how we do

667
00:30:02,580 --> 00:30:15,800
this here if I can find it<font color="#E5E5E5"> okay this is</font>

668
00:30:11,820 --> 00:30:18,870
a<font color="#E5E5E5"> little bit more</font><font color="#CCCCCC"> okay here it is</font>

669
00:30:15,800 --> 00:30:23,210
okay<font color="#E5E5E5"> so what just happened here</font><font color="#CCCCCC"> if you</font>

670
00:30:18,870 --> 00:30:26,639
look<font color="#E5E5E5"> at</font><font color="#CCCCCC"> DL our example</font><font color="#E5E5E5"> we're using</font>

671
00:30:23,210 --> 00:30:29,910
<font color="#E5E5E5">interrupted pop a box or pop a message</font>

672
00:30:26,640 --> 00:30:32,340
box<font color="#E5E5E5"> well a little pop-up box</font><font color="#CCCCCC"> too</font><font color="#E5E5E5"> but a</font>

673
00:30:29,910 --> 00:30:36,930
message box<font color="#E5E5E5"> right</font><font color="#CCCCCC"> we're but the way</font>

674
00:30:32,340 --> 00:30:38,669
we're bringing<font color="#E5E5E5"> it bring the attribute in</font>

675
00:30:36,930 --> 00:30:41,090
is no longer<font color="#E5E5E5"> we compile the c-sharp</font>

676
00:30:38,670 --> 00:30:43,770
we're actually doing a Python string

677
00:30:41,090 --> 00:30:46,949
that<font color="#E5E5E5"> is</font><font color="#CCCCCC"> also dynamic we can bring from</font>

678
00:30:43,770 --> 00:30:48,900
outside or type it out and and then

679
00:30:46,950 --> 00:30:54,120
<font color="#CCCCCC">we're actually doing compilation</font><font color="#E5E5E5"> of our</font>

680
00:30:48,900 --> 00:30:58,770
code in Python and<font color="#E5E5E5"> and then we're we're</font>

681
00:30:54,120 --> 00:31:01,850
<font color="#CCCCCC">doing we're bringing user 32 from within</font>

682
00:30:58,770 --> 00:31:04,200
our plight<font color="#E5E5E5"> and then we do some setup for</font>

683
00:31:01,850 --> 00:31:06,689
pointers or whatnot<font color="#E5E5E5"> and then we're</font>

684
00:31:04,200 --> 00:31:09,470
calling it dynamically<font color="#CCCCCC"> on a</font><font color="#E5E5E5"> message</font>

685
00:31:06,690 --> 00:31:12,779
<font color="#CCCCCC">boxin and so on</font><font color="#E5E5E5"> this command right here</font>

686
00:31:09,470 --> 00:31:16,889
<font color="#CCCCCC">first you bring in</font><font color="#E5E5E5"> Python right</font>

687
00:31:12,779 --> 00:31:20,850
ironpython<font color="#E5E5E5"> code not executable into the</font>

688
00:31:16,889 --> 00:31:23,899
cradle itself compiles itself<font color="#E5E5E5"> with</font>

689
00:31:20,850 --> 00:31:27,299
dynamic<font color="#CCCCCC"> interrupts</font><font color="#E5E5E5"> and then calls</font><font color="#CCCCCC"> a</font>

690
00:31:23,899 --> 00:31:28,529
system<font color="#E5E5E5"> function on the</font><font color="#CCCCCC"> interrupt and so</font>

691
00:31:27,299 --> 00:31:32,720
you get this<font color="#CCCCCC"> alright</font>

692
00:31:28,529 --> 00:31:35,489
you're<font color="#E5E5E5"> getting way out of</font><font color="#CCCCCC"> the</font><font color="#E5E5E5"> defense</font>

693
00:31:32,720 --> 00:31:40,190
introspection path<font color="#E5E5E5"> completely right and</font>

694
00:31:35,489 --> 00:31:42,749
if you look<font color="#CCCCCC"> at how those dynamic</font>

695
00:31:40,190 --> 00:31:45,659
binaries are constructed<font color="#E5E5E5"> they're very</font>

696
00:31:42,749 --> 00:31:47,369
<font color="#E5E5E5">much</font><font color="#CCCCCC"> emit dynamic and a lot of</font>

697
00:31:45,659 --> 00:31:50,159
<font color="#E5E5E5">reflection in there and so there's gonna</font>

698
00:31:47,369 --> 00:31:52,408
take an analyst to<font color="#E5E5E5"> actually go in</font><font color="#CCCCCC"> and</font>

699
00:31:50,159 --> 00:31:54,960
see well what does<font color="#E5E5E5"> this Python code is</font>

700
00:31:52,409 --> 00:31:57,869
<font color="#E5E5E5">doing actually actually it's not even</font>

701
00:31:54,960 --> 00:32:02,039
<font color="#E5E5E5">Python code it's your</font><font color="#CCCCCC"> MSI elko great</font>

702
00:31:57,869 --> 00:32:06,449
like intermediate<font color="#CCCCCC"> language</font><font color="#E5E5E5"> okay so our</font>

703
00:32:02,039 --> 00:32:09,299
goals<font color="#E5E5E5"> again leverage</font><font color="#CCCCCC"> LR we saw that then</font>

704
00:32:06,450 --> 00:32:11,279
we can compile Python<font color="#CCCCCC"> 2xc</font><font color="#E5E5E5"> without</font>

705
00:32:09,299 --> 00:32:13,590
bringing any Python<font color="#E5E5E5"> runtime except for a</font>

706
00:32:11,279 --> 00:32:16,309
small<font color="#CCCCCC"> DLL 4-iron Python which sits on</font>

707
00:32:13,590 --> 00:32:20,488
top of<font color="#CCCCCC"> the Microsoft dynamic language</font>

708
00:32:16,309 --> 00:32:23,129
<font color="#CCCCCC">and so you get a lot</font><font color="#E5E5E5"> of sort of good</font>

709
00:32:20,489 --> 00:32:24,869
things with Python<font color="#E5E5E5"> right you get you get</font>

710
00:32:23,129 --> 00:32:29,158
standard library sometimes<font color="#E5E5E5"> you can</font>

711
00:32:24,869 --> 00:32:31,799
actually bring<font color="#E5E5E5"> it in um and so you can</font>

712
00:32:29,159 --> 00:32:33,679
even code<font color="#E5E5E5"> without dropping in directly</font>

713
00:32:31,799 --> 00:32:37,168
into dotnet contract you can<font color="#CCCCCC"> actually</font>

714
00:32:33,679 --> 00:32:41,609
work with Python code itself like<font color="#CCCCCC"> python</font>

715
00:32:37,169 --> 00:32:43,440
based you know coding<font color="#E5E5E5"> right</font><font color="#CCCCCC"> there are</font>

716
00:32:41,609 --> 00:32:45,359
certain evasions that you can do because

717
00:32:43,440 --> 00:32:50,070
<font color="#CCCCCC">python for example to</font><font color="#E5E5E5"> bring in standard</font>

718
00:32:45,359 --> 00:32:53,158
library it doesn't need a<font color="#E5E5E5"> DLL right it</font>

719
00:32:50,070 --> 00:32:55,439
just<font color="#CCCCCC"> needs well it is a zip file with a</font>

720
00:32:53,159 --> 00:32:58,169
standard<font color="#CCCCCC"> library</font><font color="#E5E5E5"> eating this</font><font color="#CCCCCC"> guys</font><font color="#E5E5E5"> that</font>

721
00:32:55,440 --> 00:33:00,239
this<font color="#E5E5E5"> dot dot</font><font color="#CCCCCC"> X right which is also zip</font>

722
00:32:58,169 --> 00:33:02,549
so a lot<font color="#CCCCCC"> of time you</font><font color="#E5E5E5"> know a lot of</font>

723
00:33:00,239 --> 00:33:07,259
<font color="#E5E5E5">things that</font><font color="#CCCCCC"> you can do with it and move</font>

724
00:33:02,549 --> 00:33:10,440
<font color="#CCCCCC">forward with your evasion so easy</font><font color="#E5E5E5"> right</font>

725
00:33:07,259 --> 00:33:12,929
it's DLR<font color="#E5E5E5"> is just dotnet technique you</font>

726
00:33:10,440 --> 00:33:16,200
can call<font color="#CCCCCC"> WinForms you</font><font color="#E5E5E5"> can call operating</font>

727
00:33:12,929 --> 00:33:17,639
system facilities you<font color="#CCCCCC"> can call threading</font>

728
00:33:16,200 --> 00:33:21,179
you can call whatever<font color="#E5E5E5"> you want</font>

729
00:33:17,639 --> 00:33:24,329
on it<font color="#CCCCCC"> you can</font><font color="#E5E5E5"> even compile your Python</font>

730
00:33:21,179 --> 00:33:26,309
<font color="#CCCCCC">cone code into DL</font><font color="#E5E5E5"> into assembly DLL</font><font color="#CCCCCC"> that</font>

731
00:33:24,329 --> 00:33:29,249
you load from your c-sharp<font color="#E5E5E5"> or any other</font>

732
00:33:26,309 --> 00:33:32,609
language<font color="#CCCCCC"> and so you're</font><font color="#E5E5E5"> moving into the</font>

733
00:33:29,249 --> 00:33:35,729
<font color="#CCCCCC">space of handing off regular</font><font color="#E5E5E5"> generated</font>

734
00:33:32,609 --> 00:33:37,379
libraries and assemblies to a<font color="#CCCCCC"> third</font>

735
00:33:35,729 --> 00:33:40,440
<font color="#CCCCCC">party process</font><font color="#E5E5E5"> potential in different</font>

736
00:33:37,379 --> 00:33:42,269
<font color="#E5E5E5">machine compilation happens here</font>

737
00:33:40,440 --> 00:33:44,339
invocation happens in a<font color="#E5E5E5"> different way</font>

738
00:33:42,269 --> 00:33:47,909
you<font color="#E5E5E5"> can serialize things you can call</font>

739
00:33:44,339 --> 00:33:52,739
<font color="#E5E5E5">them in different way here you can even</font>

740
00:33:47,909 --> 00:33:57,179
compile Python Python r<font color="#CCCCCC"> Apple itself in</font>

741
00:33:52,739 --> 00:33:59,639
<font color="#CCCCCC">Python</font><font color="#E5E5E5"> and generate a x64 executable on</font>

742
00:33:57,179 --> 00:34:04,469
the machine<font color="#E5E5E5"> so</font><font color="#CCCCCC"> you don't</font><font color="#E5E5E5"> need to bring</font>

743
00:33:59,639 --> 00:34:07,649
in your your Python 2.7 or 3.6 for

744
00:34:04,469 --> 00:34:13,139
<font color="#CCCCCC">Windows and have this huge distribution</font>

745
00:34:07,649 --> 00:34:17,629
<font color="#CCCCCC">there you can actually</font><font color="#E5E5E5"> compile it</font><font color="#CCCCCC"> ok you</font>

746
00:34:13,139 --> 00:34:24,839
<font color="#CCCCCC">can work with</font><font color="#E5E5E5"> C types if you want to but</font>

747
00:34:17,629 --> 00:34:28,618
the<font color="#E5E5E5"> problem with the the problem that</font>

748
00:34:24,839 --> 00:34:31,109
<font color="#E5E5E5">we're facing is how</font><font color="#CCCCCC"> do we</font><font color="#E5E5E5"> actually bring</font>

749
00:34:28,619 --> 00:34:33,599
<font color="#CCCCCC">that ironpython</font><font color="#E5E5E5"> dll in the first place</font>

750
00:34:31,109 --> 00:34:36,899
right but<font color="#CCCCCC"> that's also challenge you</font>

751
00:34:33,599 --> 00:34:38,490
could<font color="#CCCCCC"> potentially</font><font color="#E5E5E5"> well first of all</font>

752
00:34:36,899 --> 00:34:40,288
we're bringing code<font color="#CCCCCC"> as payload</font><font color="#E5E5E5"> right</font>

753
00:34:38,489 --> 00:34:42,598
that's that's clear here we're<font color="#E5E5E5"> bringing</font>

754
00:34:40,289 --> 00:34:44,369
Python code nothing else but we need

755
00:34:42,599 --> 00:34:47,250
just<font color="#CCCCCC"> one dependency we need that</font>

756
00:34:44,369 --> 00:34:49,349
ironpython the<font color="#CCCCCC"> dll we</font><font color="#E5E5E5"> somehow we need</font><font color="#CCCCCC"> to</font>

757
00:34:47,250 --> 00:34:52,079
bring it<font color="#E5E5E5"> into</font><font color="#CCCCCC"> the environment</font><font color="#E5E5E5"> we can</font>

758
00:34:49,349 --> 00:34:55,649
<font color="#E5E5E5">bring it</font><font color="#CCCCCC"> as fight as part of the typhoon</font>

759
00:34:52,079 --> 00:34:59,099
dot exe<font color="#E5E5E5"> as an embedded resource we can</font>

760
00:34:55,649 --> 00:35:01,618
<font color="#CCCCCC">bring</font><font color="#E5E5E5"> it an app config instruction as a</font>

761
00:34:59,099 --> 00:35:03,390
fetch and we can actually do other crazy

762
00:35:01,619 --> 00:35:07,859
things like<font color="#CCCCCC"> nap modules and let's</font><font color="#E5E5E5"> look</font>

763
00:35:03,390 --> 00:35:09,868
at those<font color="#CCCCCC"> ok so the first</font><font color="#E5E5E5"> is where we can</font>

764
00:35:07,859 --> 00:35:12,480
<font color="#E5E5E5">bring the arm part and the</font><font color="#CCCCCC"> dll is</font>

765
00:35:09,869 --> 00:35:15,329
<font color="#E5E5E5">invalid</font><font color="#CCCCCC"> dll dependency</font><font color="#E5E5E5"> what that means</font>

766
00:35:12,480 --> 00:35:20,009
is that you are statically compiled a

767
00:35:15,329 --> 00:35:22,619
<font color="#E5E5E5">dll as a resource</font><font color="#CCCCCC"> into typhoon and then</font>

768
00:35:20,009 --> 00:35:26,940
you are hooking your assembly<font color="#CCCCCC"> resolution</font>

769
00:35:22,619 --> 00:35:29,609
for when it tries to find<font color="#E5E5E5"> ironpython DLL</font>

770
00:35:26,940 --> 00:35:30,900
into itself<font color="#E5E5E5"> and say well go look</font><font color="#CCCCCC"> in my</font>

771
00:35:29,609 --> 00:35:32,490
resources

772
00:35:30,900 --> 00:35:34,680
<font color="#E5E5E5">okay don't look in the up on</font><font color="#CCCCCC"> the file</font>

773
00:35:32,490 --> 00:35:39,538
<font color="#E5E5E5">system don't look on the network go look</font>

774
00:35:34,680 --> 00:35:41,669
in my in my resources<font color="#E5E5E5"> so I load</font><font color="#CCCCCC"> item</font>

775
00:35:39,539 --> 00:35:43,319
<font color="#CCCCCC">pardon</font><font color="#E5E5E5"> DLL from my resources within the</font>

776
00:35:41,670 --> 00:35:46,589
executable which is really powerful

777
00:35:43,319 --> 00:35:48,869
<font color="#E5E5E5">right because if defense is looking for</font>

778
00:35:46,589 --> 00:35:50,640
a specific<font color="#E5E5E5"> hiring Python DLL they will</font>

779
00:35:48,869 --> 00:35:53,640
not find<font color="#E5E5E5"> because it's going to be inside</font>

780
00:35:50,640 --> 00:35:55,650
a typhoon that exe and and as long as

781
00:35:53,640 --> 00:35:59,430
<font color="#CCCCCC">you don't</font><font color="#E5E5E5"> have white listing for typhoon</font>

782
00:35:55,650 --> 00:36:01,710
<font color="#CCCCCC">that exe then you should be good</font><font color="#E5E5E5"> other</font>

783
00:35:59,430 --> 00:36:03,180
ways are<font color="#E5E5E5"> there building block ideas</font>

784
00:36:01,710 --> 00:36:05,549
because we're we're we're basically

785
00:36:03,180 --> 00:36:07,618
doing ideas like how do<font color="#E5E5E5"> we compile how</font>

786
00:36:05,549 --> 00:36:11,369
do we move away from from detection<font color="#E5E5E5"> here</font>

787
00:36:07,619 --> 00:36:14,819
you can actually use CSC itself to come

788
00:36:11,369 --> 00:36:17,849
to to compile your<font color="#E5E5E5"> typhoon right on the</font>

789
00:36:14,819 --> 00:36:19,829
system<font color="#CCCCCC"> if you choose to do so and then</font>

790
00:36:17,849 --> 00:36:23,099
you can<font color="#CCCCCC"> link</font><font color="#E5E5E5"> it to ironpython the</font><font color="#CCCCCC"> DLL</font>

791
00:36:19,829 --> 00:36:26,130
<font color="#E5E5E5">and you can actually do you know</font><font color="#CCCCCC"> you can</font>

792
00:36:23,099 --> 00:36:30,289
<font color="#E5E5E5">actually bring code as</font><font color="#CCCCCC"> nap</font><font color="#E5E5E5"> module so</font>

793
00:36:26,130 --> 00:36:33,930
let's see what<font color="#E5E5E5"> net modules are okay in</font>

794
00:36:30,289 --> 00:36:36,809
dotnet<font color="#CCCCCC"> assembler linking there is this</font>

795
00:36:33,930 --> 00:36:40,740
thing<font color="#E5E5E5"> called net module and that module</font>

796
00:36:36,809 --> 00:36:43,109
is a incomplete<font color="#E5E5E5"> assembly that is not</font>

797
00:36:40,740 --> 00:36:46,669
loadable<font color="#CCCCCC"> and is not in vocal</font><font color="#E5E5E5"> but it's a</font>

798
00:36:43,109 --> 00:36:49,470
sliver of code<font color="#E5E5E5"> sliver of</font><font color="#CCCCCC"> MS sliver of</font>

799
00:36:46,670 --> 00:36:51,720
<font color="#E5E5E5">what well it's a half a binary DLL</font>

800
00:36:49,470 --> 00:36:55,169
without a metadata<font color="#CCCCCC"> right</font><font color="#E5E5E5"> so you can have</font>

801
00:36:51,720 --> 00:36:57,808
<font color="#E5E5E5">just a blob of data sitting on the box</font>

802
00:36:55,170 --> 00:37:00,270
<font color="#E5E5E5">and unless you add metadata to it that</font>

803
00:36:57,809 --> 00:37:02,190
says<font color="#CCCCCC"> okay well that's an assembly no</font>

804
00:37:00,270 --> 00:37:05,400
one's gonna know what it is<font color="#E5E5E5"> right it's</font>

805
00:37:02,190 --> 00:37:09,000
<font color="#E5E5E5">not even you can't D compile it so net</font>

806
00:37:05,400 --> 00:37:10,829
module is just<font color="#CCCCCC"> that like for example you</font>

807
00:37:09,000 --> 00:37:13,589
can compile different pieces of<font color="#E5E5E5"> code</font>

808
00:37:10,829 --> 00:37:16,079
into<font color="#E5E5E5"> their own nut modules drop them on</font>

809
00:37:13,589 --> 00:37:18,210
<font color="#E5E5E5">the box they will</font><font color="#CCCCCC"> not get flagged by</font>

810
00:37:16,079 --> 00:37:19,950
anything<font color="#E5E5E5"> because it's not executable</font>

811
00:37:18,210 --> 00:37:23,010
code and then you basically link them

812
00:37:19,950 --> 00:37:28,098
through metadata<font color="#E5E5E5"> okay and the way we can</font>

813
00:37:23,010 --> 00:37:28,099
do this take a look at it here

814
00:37:28,910 --> 00:37:34,670
<font color="#E5E5E5">okay so again we're operating within</font>

815
00:37:35,849 --> 00:37:43,099
I don't<font color="#E5E5E5"> Python here so for example we</font>

816
00:37:37,979 --> 00:37:46,259
want to<font color="#E5E5E5"> do screen capture and let's say</font>

817
00:37:43,099 --> 00:37:49,049
this is our<font color="#E5E5E5"> first module we're bringing</font>

818
00:37:46,259 --> 00:37:51,869
user 32 as we did before<font color="#E5E5E5"> this is our</font>

819
00:37:49,049 --> 00:37:56,599
<font color="#CCCCCC">second module</font><font color="#E5E5E5"> which is</font><font color="#CCCCCC"> GDI 32 that does</font>

820
00:37:51,869 --> 00:37:59,669
the<font color="#E5E5E5"> actual capture then what we do we</font>

821
00:37:56,599 --> 00:38:02,309
generate an app module<font color="#CCCCCC"> and put it in a</font>

822
00:37:59,669 --> 00:38:05,638
path it's a it's an assembly without

823
00:38:02,309 --> 00:38:07,319
metadata<font color="#E5E5E5"> when we generate another net</font>

824
00:38:05,639 --> 00:38:11,279
module<font color="#CCCCCC"> it's another assembly without</font>

825
00:38:07,319 --> 00:38:13,979
metadata<font color="#E5E5E5"> and then we link them together</font>

826
00:38:11,279 --> 00:38:15,809
<font color="#CCCCCC">those steps</font><font color="#E5E5E5"> are done in parallel</font><font color="#CCCCCC"> here</font>

827
00:38:13,979 --> 00:38:18,419
<font color="#E5E5E5">but they can</font><font color="#CCCCCC"> be done</font><font color="#E5E5E5"> in</font><font color="#CCCCCC"> different ways I</font>

828
00:38:15,809 --> 00:38:20,309
can<font color="#E5E5E5"> drop my</font><font color="#CCCCCC"> net modules</font><font color="#E5E5E5"> today and then</font>

829
00:38:18,419 --> 00:38:23,489
come back<font color="#CCCCCC"> and look</font><font color="#E5E5E5"> at them tomorrow for</font>

830
00:38:20,309 --> 00:38:28,769
execution<font color="#E5E5E5"> and so</font><font color="#CCCCCC"> what you what</font><font color="#E5E5E5"> you get</font>

831
00:38:23,489 --> 00:38:31,769
is<font color="#CCCCCC"> another layer of abstraction right</font>

832
00:38:28,769 --> 00:38:35,328
unless you link those net modules

833
00:38:31,769 --> 00:38:40,049
<font color="#CCCCCC">together</font><font color="#E5E5E5"> into metadata is not a</font><font color="#CCCCCC"> dll</font>

834
00:38:35,329 --> 00:38:42,929
crazy<font color="#E5E5E5"> another thing is that you can</font>

835
00:38:40,049 --> 00:38:44,939
actually instrument you<font color="#CCCCCC"> UFC that</font><font color="#E5E5E5"> you</font><font color="#CCCCCC"> you</font>

836
00:38:42,929 --> 00:38:47,399
<font color="#E5E5E5">are executable config to say okay well I</font>

837
00:38:44,939 --> 00:38:50,549
<font color="#E5E5E5">have a dependency on my code my c-sharp</font>

838
00:38:47,399 --> 00:38:53,519
code or<font color="#E5E5E5"> whatever and here's where</font>

839
00:38:50,549 --> 00:38:55,499
ironpython<font color="#E5E5E5"> resides it's on the network</font>

840
00:38:53,519 --> 00:38:57,959
<font color="#CCCCCC">somewhere as you execute</font><font color="#E5E5E5"> as you</font>

841
00:38:55,499 --> 00:38:58,979
bootstrap bring it in<font color="#CCCCCC"> okay that's a</font>

842
00:38:57,959 --> 00:39:02,069
third way of<font color="#E5E5E5"> doing it</font>

843
00:38:58,979 --> 00:39:04,259
<font color="#E5E5E5">and then you can get crazy with this</font>

844
00:39:02,069 --> 00:39:06,509
right like you do reflection calling<font color="#E5E5E5"> a</font>

845
00:39:04,259 --> 00:39:08,339
c-sharp from within<font color="#CCCCCC"> python calling</font>

846
00:39:06,509 --> 00:39:09,259
python from<font color="#E5E5E5"> within c-sharp training</font>

847
00:39:08,339 --> 00:39:12,269
engines

848
00:39:09,259 --> 00:39:14,819
you know<font color="#E5E5E5"> bunch of evasion going on here</font>

849
00:39:12,269 --> 00:39:17,488
you<font color="#E5E5E5"> can achieve more stealth if you for</font>

850
00:39:14,819 --> 00:39:20,549
example<font color="#CCCCCC"> create</font><font color="#E5E5E5"> different files and you</font>

851
00:39:17,489 --> 00:39:24,719
load dynamically<font color="#E5E5E5"> from one to another</font><font color="#CCCCCC"> but</font>

852
00:39:20,549 --> 00:39:26,639
all in all is the more reflection you

853
00:39:24,719 --> 00:39:29,249
can<font color="#E5E5E5"> get the better it is for you as an</font>

854
00:39:26,639 --> 00:39:31,729
offender<font color="#E5E5E5"> and the worse it is for defense</font>

855
00:39:29,249 --> 00:39:35,788
<font color="#E5E5E5">to actually flag</font>

856
00:39:31,729 --> 00:39:39,868
<font color="#E5E5E5">okay so recon executing it's all good</font>

857
00:39:35,789 --> 00:39:41,419
and well can<font color="#E5E5E5"> we exploit things with this</font>

858
00:39:39,869 --> 00:39:45,179
whole concept<font color="#E5E5E5"> that we just talked about</font>

859
00:39:41,419 --> 00:39:46,859
well yeah I<font color="#CCCCCC"> mean</font><font color="#E5E5E5"> your code is data in</font>

860
00:39:45,179 --> 00:39:48,950
<font color="#E5E5E5">your</font><font color="#CCCCCC"> data's code so your shellcode</font><font color="#E5E5E5"> is</font>

861
00:39:46,859 --> 00:39:53,240
<font color="#CCCCCC">data that gets</font><font color="#E5E5E5"> dropped into either</font>

862
00:39:48,950 --> 00:39:55,460
Rumpel or extension CSX extension<font color="#E5E5E5"> or you</font>

863
00:39:53,240 --> 00:39:58,129
can actually<font color="#E5E5E5"> compile it into</font><font color="#CCCCCC"> a DLL</font><font color="#E5E5E5"> or</font>

864
00:39:55,460 --> 00:40:01,520
you can compile it<font color="#E5E5E5"> into module and then</font>

865
00:39:58,130 --> 00:40:04,220
you can<font color="#E5E5E5"> call it right so the way you can</font>

866
00:40:01,520 --> 00:40:06,890
do this<font color="#E5E5E5"> you can</font><font color="#CCCCCC"> actually hide shellcode</font>

867
00:40:04,220 --> 00:40:10,549
into a memory map<font color="#E5E5E5"> file and then you can</font>

868
00:40:06,890 --> 00:40:13,569
<font color="#E5E5E5">point</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> that memory map file and</font>

869
00:40:10,550 --> 00:40:16,070
execute<font color="#CCCCCC"> that so again you have this</font>

870
00:40:13,570 --> 00:40:19,700
division<font color="#CCCCCC"> of responsibilities</font><font color="#E5E5E5"> your</font>

871
00:40:16,070 --> 00:40:22,070
compilation your code is not executable

872
00:40:19,700 --> 00:40:23,689
you're just<font color="#E5E5E5"> bringing in as text and then</font>

873
00:40:22,070 --> 00:40:26,660
<font color="#E5E5E5">you create memory map files for example</font>

874
00:40:23,690 --> 00:40:28,790
that live and act as storage<font color="#CCCCCC"> for your</font>

875
00:40:26,660 --> 00:40:31,190
<font color="#E5E5E5">shellcode</font><font color="#CCCCCC"> that you're actually pointing</font>

876
00:40:28,790 --> 00:40:33,440
to pretty powerful<font color="#CCCCCC"> you can add other</font>

877
00:40:31,190 --> 00:40:35,780
<font color="#CCCCCC">things like you can bring code there's a</font>

878
00:40:33,440 --> 00:40:38,720
zip archive and<font color="#CCCCCC"> you know</font><font color="#E5E5E5"> the story goes</font>

879
00:40:35,780 --> 00:40:40,460
from<font color="#E5E5E5"> there</font><font color="#CCCCCC"> like</font><font color="#E5E5E5"> however</font><font color="#CCCCCC"> many however</font>

880
00:40:38,720 --> 00:40:43,069
many layers you<font color="#CCCCCC"> can</font><font color="#E5E5E5"> add on top</font><font color="#CCCCCC"> of it</font>

881
00:40:40,460 --> 00:40:45,530
that<font color="#E5E5E5"> many that</font><font color="#CCCCCC"> much</font><font color="#E5E5E5"> the defenders</font><font color="#CCCCCC"> have</font>

882
00:40:43,070 --> 00:40:48,070
to work right and as we know tools can

883
00:40:45,530 --> 00:40:51,560
only go maybe one or two<font color="#E5E5E5"> steps beyond</font>

884
00:40:48,070 --> 00:40:53,170
<font color="#CCCCCC">and then you know the more things</font><font color="#E5E5E5"> you</font>

885
00:40:51,560 --> 00:40:55,670
can obfuscate the<font color="#E5E5E5"> better it is</font><font color="#CCCCCC"> for you</font>

886
00:40:53,170 --> 00:40:58,849
<font color="#E5E5E5">and here's an example of for example</font>

887
00:40:55,670 --> 00:41:04,010
<font color="#CCCCCC">you're you creating your c-sharp a load</font>

888
00:40:58,849 --> 00:41:05,540
for<font color="#CCCCCC"> Metasploit</font><font color="#E5E5E5"> right and so it's a</font>

889
00:41:04,010 --> 00:41:08,210
sliver code that you dump into shell

890
00:41:05,540 --> 00:41:09,829
code into into your<font color="#CCCCCC"> C sharp or C</font><font color="#E5E5E5"> saw in</font>

891
00:41:08,210 --> 00:41:14,000
this<font color="#E5E5E5"> case and you dynamically execute</font>

892
00:41:09,829 --> 00:41:17,359
this same way as you did C sharp it can

893
00:41:14,000 --> 00:41:19,700
do<font color="#CCCCCC"> a</font><font color="#E5E5E5"> Python</font><font color="#CCCCCC"> version of it right</font><font color="#E5E5E5"> but in</font>

894
00:41:17,359 --> 00:41:21,650
this<font color="#E5E5E5"> case look we're actually not in a</font>

895
00:41:19,700 --> 00:41:23,899
real Python we're in ironpython<font color="#CCCCCC"> we're</font>

896
00:41:21,650 --> 00:41:27,530
actually bringing system threading<font color="#CCCCCC"> for</font>

897
00:41:23,900 --> 00:41:29,599
from from from dotnet we're doing we're

898
00:41:27,530 --> 00:41:32,390
dropping the<font color="#E5E5E5"> shell code into a buffer</font>

899
00:41:29,599 --> 00:41:35,500
<font color="#E5E5E5">and then we're sending it off to</font><font color="#CCCCCC"> meta</font>

900
00:41:32,390 --> 00:41:38,450
<font color="#E5E5E5">sports or whatever</font><font color="#CCCCCC"> the case may be and</font>

901
00:41:35,500 --> 00:41:40,430
<font color="#CCCCCC">then if you lack every</font><font color="#E5E5E5"> single thing that</font>

902
00:41:38,450 --> 00:41:42,890
you<font color="#E5E5E5"> need and</font><font color="#CCCCCC"> you actually want</font>

903
00:41:40,430 --> 00:41:45,410
<font color="#E5E5E5">PowerShell you can invoke</font><font color="#CCCCCC"> it right from</font>

904
00:41:42,890 --> 00:41:47,210
<font color="#E5E5E5">within your seesaw or delirium</font><font color="#CCCCCC"> right you</font>

905
00:41:45,410 --> 00:41:49,819
can<font color="#CCCCCC"> actually invoke it from</font><font color="#E5E5E5"> Python or C</font>

906
00:41:47,210 --> 00:41:52,520
sharp by creating<font color="#E5E5E5"> your regular process</font>

907
00:41:49,819 --> 00:41:55,190
and then<font color="#E5E5E5"> you can you know encode your</font>

908
00:41:52,520 --> 00:41:58,009
you know to<font color="#E5E5E5"> your heart's content that's</font>

909
00:41:55,190 --> 00:42:00,530
<font color="#E5E5E5">also</font><font color="#CCCCCC"> innovation so</font><font color="#E5E5E5"> your PowerShell is</font>

910
00:41:58,010 --> 00:42:02,240
not executed<font color="#CCCCCC"> from</font><font color="#E5E5E5"> command line it's</font>

911
00:42:00,530 --> 00:42:02,660
executed from<font color="#CCCCCC"> a third party that may</font>

912
00:42:02,240 --> 00:42:06,709
<font color="#CCCCCC">call</font>

913
00:42:02,660 --> 00:42:09,319
a third party and you get the idea okay

914
00:42:06,710 --> 00:42:11,300
so<font color="#CCCCCC"> development with delirium well</font>

915
00:42:09,320 --> 00:42:14,150
development with ironpython<font color="#E5E5E5"> is also</font>

916
00:42:11,300 --> 00:42:17,210
really<font color="#E5E5E5"> fast because we're what we're</font>

917
00:42:14,150 --> 00:42:18,950
after is<font color="#E5E5E5"> fast retooling right like we</font>

918
00:42:17,210 --> 00:42:20,360
need to<font color="#CCCCCC"> be able to develop</font><font color="#E5E5E5"> first faster</font>

919
00:42:18,950 --> 00:42:22,520
so<font color="#CCCCCC"> we have to have facilities in</font><font color="#E5E5E5"> the</font>

920
00:42:20,360 --> 00:42:25,310
language to be<font color="#E5E5E5"> able to do what we did in</font>

921
00:42:22,520 --> 00:42:28,250
<font color="#E5E5E5">PowerShell</font><font color="#CCCCCC"> or what we</font><font color="#E5E5E5"> want from c-sharp</font>

922
00:42:25,310 --> 00:42:30,620
so you've got lists you've got

923
00:42:28,250 --> 00:42:34,900
dictionaries<font color="#E5E5E5"> I've got the entire</font><font color="#CCCCCC"> battery</font>

924
00:42:30,620 --> 00:42:38,180
of<font color="#E5E5E5"> things that come from Python right in</font>

925
00:42:34,900 --> 00:42:40,210
in here so you can<font color="#E5E5E5"> you</font><font color="#CCCCCC"> can go pretty</font><font color="#E5E5E5"> far</font>

926
00:42:38,180 --> 00:42:44,149
with<font color="#E5E5E5"> this</font>

927
00:42:40,210 --> 00:42:46,760
so delirium<font color="#E5E5E5"> also achieving its goal</font><font color="#CCCCCC"> it's</font>

928
00:42:44,150 --> 00:42:51,550
leveraging<font color="#CCCCCC"> dlr avoiding PowerShell</font>

929
00:42:46,760 --> 00:42:55,220
logging while maintaining script ability

930
00:42:51,550 --> 00:42:58,640
<font color="#E5E5E5">into rock and drop down into into direct</font>

931
00:42:55,220 --> 00:43:02,330
net you do and achieve<font color="#E5E5E5"> a bunch of</font>

932
00:42:58,640 --> 00:43:05,000
stealth<font color="#E5E5E5"> benefits by toggling</font><font color="#CCCCCC"> python from</font>

933
00:43:02,330 --> 00:43:08,690
<font color="#E5E5E5">standard</font><font color="#CCCCCC"> form c-sharp</font><font color="#E5E5E5"> c-sharp from</font>

934
00:43:05,000 --> 00:43:12,230
<font color="#CCCCCC">python and so yeah i mean you can</font>

935
00:43:08,690 --> 00:43:14,330
basically<font color="#E5E5E5"> start coding in this so this</font>

936
00:43:12,230 --> 00:43:17,300
whole idea<font color="#CCCCCC"> would seesaw and delirium</font><font color="#E5E5E5"> is</font>

937
00:43:14,330 --> 00:43:22,960
that<font color="#CCCCCC"> managed execution toolkit right</font>

938
00:43:17,300 --> 00:43:27,770
it's the is the execution<font color="#E5E5E5"> compilation</font>

939
00:43:22,960 --> 00:43:31,040
invocation<font color="#E5E5E5"> of your code dynamically on</font>

940
00:43:27,770 --> 00:43:35,000
your<font color="#E5E5E5"> windows box with the help of just</font>

941
00:43:31,040 --> 00:43:37,580
<font color="#CCCCCC">net</font><font color="#E5E5E5"> with the help of Interop from dotnet</font>

942
00:43:35,000 --> 00:43:40,160
<font color="#E5E5E5">into anything</font><font color="#CCCCCC"> that you want</font><font color="#E5E5E5"> from loading</font>

943
00:43:37,580 --> 00:43:43,430
your assemblies to<font color="#E5E5E5"> loading your</font><font color="#CCCCCC"> data you</font>

944
00:43:40,160 --> 00:43:46,819
know unmanaged<font color="#CCCCCC"> Kham Kham</font><font color="#E5E5E5"> plus ActiveX it</font>

945
00:43:43,430 --> 00:43:48,680
is<font color="#CCCCCC"> also a fair number of stealth</font>

946
00:43:46,820 --> 00:43:54,500
techniques that you can actually do to

947
00:43:48,680 --> 00:43:57,140
to avoid<font color="#CCCCCC"> defenses and what do</font><font color="#E5E5E5"> we learn</font>

948
00:43:54,500 --> 00:44:01,220
from<font color="#E5E5E5"> this well application whitelisting</font>

949
00:43:57,140 --> 00:44:03,740
<font color="#CCCCCC">is key</font><font color="#E5E5E5"> every time</font><font color="#CCCCCC"> you get any executable</font>

950
00:44:01,220 --> 00:44:05,930
<font color="#CCCCCC">it may be a slim cradle like</font><font color="#E5E5E5"> we talked</font>

951
00:44:03,740 --> 00:44:08,509
about<font color="#E5E5E5"> right</font><font color="#CCCCCC"> it's a cradle</font><font color="#E5E5E5"> that</font><font color="#CCCCCC"> is not</font>

952
00:44:05,930 --> 00:44:09,230
fingerprint<font color="#CCCCCC"> Emmel</font><font color="#E5E5E5"> it's new no one's</font>

953
00:44:08,510 --> 00:44:12,080
using it

954
00:44:09,230 --> 00:44:14,210
we're dynamically building our offensive

955
00:44:12,080 --> 00:44:16,700
tools on top<font color="#CCCCCC"> of it by bringing payloads</font>

956
00:44:14,210 --> 00:44:20,060
<font color="#E5E5E5">as code right</font>

957
00:44:16,700 --> 00:44:23,569
and so even<font color="#E5E5E5"> though the small cradle may</font>

958
00:44:20,060 --> 00:44:25,310
not be malicious<font color="#CCCCCC"> it is a huge</font><font color="#E5E5E5"> stepping</font>

959
00:44:23,570 --> 00:44:28,099
stone for some things that<font color="#CCCCCC"> you're doing</font>

960
00:44:25,310 --> 00:44:31,460
<font color="#E5E5E5">on a box so application whitelisting is</font>

961
00:44:28,099 --> 00:44:34,640
key<font color="#E5E5E5"> beyond that if you are not able to</font>

962
00:44:31,460 --> 00:44:37,040
<font color="#E5E5E5">do so then for seesaw part of it you</font>

963
00:44:34,640 --> 00:44:39,529
need<font color="#CCCCCC"> to watch for</font><font color="#E5E5E5"> CSC that</font><font color="#CCCCCC"> exe execution</font>

964
00:44:37,040 --> 00:44:43,240
or<font color="#E5E5E5"> artifacts okay because they will get</font>

965
00:44:39,530 --> 00:44:45,560
code gets compiled and leaves artifacts

966
00:44:43,240 --> 00:44:48,169
<font color="#CCCCCC">so you watch for those ephemeral</font>

967
00:44:45,560 --> 00:44:50,029
artifacts<font color="#E5E5E5"> and some directories you</font><font color="#CCCCCC"> do</font>

968
00:44:48,170 --> 00:44:52,430
<font color="#E5E5E5">not rely on</font><font color="#CCCCCC"> the</font><font color="#E5E5E5"> allows being dll's</font>

969
00:44:50,030 --> 00:44:54,320
you also need to understand<font color="#CCCCCC"> that they</font>

970
00:44:52,430 --> 00:44:57,859
can be net<font color="#CCCCCC"> modules so you</font><font color="#E5E5E5"> can actually</font>

971
00:44:54,320 --> 00:45:00,410
<font color="#E5E5E5">somehow fingerprint them dll's doesn't</font>

972
00:44:57,859 --> 00:45:02,480
<font color="#CCCCCC">for dotnet</font><font color="#E5E5E5"> don't have to be dot</font><font color="#CCCCCC"> dll they</font>

973
00:45:00,410 --> 00:45:06,500
can be that<font color="#E5E5E5"> tab right so don't rely</font><font color="#CCCCCC"> on</font>

974
00:45:02,480 --> 00:45:08,270
<font color="#E5E5E5">your</font><font color="#CCCCCC"> fingerprinting by names</font><font color="#E5E5E5"> collect</font>

975
00:45:06,500 --> 00:45:09,890
code and command lines from<font color="#CCCCCC"> traces of</font>

976
00:45:08,270 --> 00:45:11,990
<font color="#E5E5E5">CSC that they</font><font color="#CCCCCC"> accede to</font><font color="#E5E5E5"> see what</font>

977
00:45:09,890 --> 00:45:15,098
actually<font color="#E5E5E5"> is</font><font color="#CCCCCC"> being compiled</font><font color="#E5E5E5"> and what the</font>

978
00:45:11,990 --> 00:45:19,189
attacker is trying to do<font color="#E5E5E5"> for delirium</font>

979
00:45:15,099 --> 00:45:21,109
<font color="#E5E5E5">dynamic</font><font color="#CCCCCC"> python</font><font color="#E5E5E5"> it's harder I will admit</font>

980
00:45:19,190 --> 00:45:24,079
that you need to watch<font color="#CCCCCC"> for loading</font><font color="#E5E5E5"> of</font>

981
00:45:21,109 --> 00:45:26,029
embedded<font color="#E5E5E5"> DLL as resources</font><font color="#CCCCCC"> which is a non</font>

982
00:45:24,079 --> 00:45:29,900
instrumented system it's very very hard

983
00:45:26,030 --> 00:45:32,240
<font color="#E5E5E5">to do you need to right now it's not</font>

984
00:45:29,900 --> 00:45:33,740
hooked but it may<font color="#E5E5E5"> be in the future right</font>

985
00:45:32,240 --> 00:45:36,410
<font color="#E5E5E5">now somehow you need to watch for</font>

986
00:45:33,740 --> 00:45:40,540
<font color="#E5E5E5">invocation of Microsoft dot scripting</font>

987
00:45:36,410 --> 00:45:40,540
and Microsoft dynamic namespaces

988
00:45:40,930 --> 00:45:47,240
probably even<font color="#CCCCCC"> though it's it's used in a</font>

989
00:45:45,200 --> 00:45:49,759
<font color="#E5E5E5">lot of places it's a valid DLL</font>

990
00:45:47,240 --> 00:45:52,430
<font color="#CCCCCC">ironpython the DLL uses used for</font>

991
00:45:49,760 --> 00:45:55,550
development<font color="#E5E5E5"> everywhere somehow you need</font>

992
00:45:52,430 --> 00:45:59,060
<font color="#E5E5E5">to put a marker on it and say am i</font>

993
00:45:55,550 --> 00:46:02,030
allowing this or not<font color="#E5E5E5"> right and so your</font>

994
00:45:59,060 --> 00:46:04,040
mileage<font color="#CCCCCC"> may vary so this whole thing is</font>

995
00:46:02,030 --> 00:46:06,220
that application whitelisting is key

996
00:46:04,040 --> 00:46:10,579
<font color="#E5E5E5">you're slim cradles will become</font>

997
00:46:06,220 --> 00:46:12,319
weaponized<font color="#CCCCCC"> they will get to the to the</font>

998
00:46:10,579 --> 00:46:13,640
<font color="#CCCCCC">point where you can</font><font color="#E5E5E5"> actually get a cheat</font>

999
00:46:12,319 --> 00:46:17,990
a lot more strength and<font color="#E5E5E5"> you will just</font>

1000
00:46:13,640 --> 00:46:19,940
lose them in<font color="#E5E5E5"> the ether right and so the</font>

1001
00:46:17,990 --> 00:46:24,279
code is<font color="#E5E5E5"> there this proof of concept code</font>

1002
00:46:19,940 --> 00:46:26,329
is there on the github<font color="#E5E5E5"> play with it</font>

1003
00:46:24,280 --> 00:46:29,329
<font color="#CCCCCC">contribute to it</font><font color="#E5E5E5"> it's a work in</font><font color="#CCCCCC"> progress</font>

1004
00:46:26,329 --> 00:46:30,799
<font color="#CCCCCC">it</font><font color="#E5E5E5"> is really is</font><font color="#CCCCCC"> just work in progress</font>

1005
00:46:29,329 --> 00:46:33,079
but hopefully

1006
00:46:30,799 --> 00:46:35,799
<font color="#E5E5E5">that gave you some ideas of</font><font color="#CCCCCC"> how offense</font>

1007
00:46:33,079 --> 00:46:39,140
moves<font color="#E5E5E5"> if you're an offensive side then</font>

1008
00:46:35,799 --> 00:46:42,079
you may enhance or grab some ideas from

1009
00:46:39,140 --> 00:46:43,989
<font color="#E5E5E5">it if you're</font><font color="#CCCCCC"> in defensive side also know</font>

1010
00:46:42,079 --> 00:46:59,029
<font color="#E5E5E5">that these things are happening and</font>

1011
00:46:43,989 --> 00:47:01,119
they're being used questions<font color="#E5E5E5"> okay thank</font>

1012
00:46:59,029 --> 00:47:01,119
you

1013
00:47:01,210 --> 00:47:06,999
[Applause]

