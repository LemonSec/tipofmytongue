1
00:00:00,000 --> 00:00:09,540
think how much had overrun so days talk
is about hiking the republicans browsers

2
00:00:09,540 --> 00:00:18,619
technical talk let me briefly introduce
myself what's my background and

3
00:00:18,619 --> 00:00:23,930
experience and founder and senior
citizen security laboratory basically do

4
00:00:23,930 --> 00:00:29,570
is pay this testing and specialized
security training my background he's

5
00:00:29,570 --> 00:00:35,739
very much related to buy county car was
fortunate enough to find buxom Google

6
00:00:35,739 --> 00:00:43,769
Yahoo Microsoft Twitter medications or
running backs I am sharing my accounting

7
00:00:43,770 --> 00:00:49,399
experience I have a training
publications case studies of award

8
00:00:49,399 --> 00:00:53,449
winning boxing Google Yahoo was a lot
more I just shared his knowledge a

9
00:00:53,449 --> 00:00:56,980
different conference oil on the world
including deep SEC in the last two days

10
00:00:56,980 --> 00:01:03,010
we had time yet another edition for the
second time in a row and here's my email

11
00:01:03,010 --> 00:01:07,740
twitter if you want to ask me anything
shortfall of my research what counsel's

12
00:01:07,740 --> 00:01:17,119
for so what's the motivation to bring
the stock first of all cookies store

13
00:01:17,119 --> 00:01:19,159
says so

14
00:01:19,159 --> 00:01:24,200
societies they like SessionID cross-site
request forgery documents also for some

15
00:01:24,200 --> 00:01:28,650
nature of the as they store census data
there are interesting from other guys

16
00:01:28,650 --> 00:01:36,000
point of view really good motivation and
other motivation many people are focused

17
00:01:36,000 --> 00:01:42,049
on multi-factor authentication and this
is very good because we know that we

18
00:01:42,049 --> 00:01:46,049
need struggled occasion to fight or flee
factor authentication is perfectly fine

19
00:01:46,049 --> 00:01:51,899
but many people tend to forget what I do
and testing or security of the thing is

20
00:01:51,899 --> 00:01:57,049
that they focus very much on offer
strong authentication but they forget

21
00:01:57,049 --> 00:02:02,829
the simple rule that security is a
strong as the weakest point we need to

22
00:02:02,829 --> 00:02:08,318
keep in mind that once the user result
indicated that the security is dependent

23
00:02:08,318 --> 00:02:11,780
on the security of of user's account

24
00:02:12,290 --> 00:02:17,670
pendant on security of processing
authentication cookie right user

25
00:02:17,670 --> 00:02:22,230
authenticates and then when the user is
successfully authenticated the only

26
00:02:22,230 --> 00:02:26,569
piece of data that is used by the Web
server to recognize the user is such an

27
00:02:26,569 --> 00:02:31,268
idea that is starting the cookie so if
we have after successful struggle

28
00:02:31,269 --> 00:02:37,109
dedication and kind of weakness in
processing of authentication cookie then

29
00:02:37,109 --> 00:02:41,519
we may end up with very severe problems
right so we need to keep in mind and use

30
00:02:41,519 --> 00:02:45,659
the good very very good example people
often forget about it we have to factor

31
00:02:45,659 --> 00:02:49,470
into the equation so so so so so so
everything is final definitely not I

32
00:02:49,470 --> 00:02:55,680
will show you for example so I was all
examples so this is yet another good

33
00:02:55,680 --> 00:03:03,859
motivation and other one is that
security evaluators many people here we

34
00:03:03,859 --> 00:03:09,139
do security evaluation of products and
what I've noticed is that many people

35
00:03:09,139 --> 00:03:14,510
underestimate created problems that why
it was yet another good motivation for

36
00:03:14,510 --> 00:03:21,090
me to bring the stock to proclaim were
often that for example cuba ask for XSS

37
00:03:21,090 --> 00:03:26,799
maybe it's interesting but from a
practical point of view you need access

38
00:03:26,799 --> 00:03:32,930
to the machine of the victims so it is
only exploitable locally so it's not

39
00:03:32,930 --> 00:03:38,489
interesting right to the risk is low so
people very often think that related

40
00:03:38,489 --> 00:03:45,799
problems or exploitation of curated
vulnerabilities is related to local

41
00:03:45,799 --> 00:03:50,569
exploitation it is absolutely not true
and I will show you examples

42
00:03:53,250 --> 00:03:59,470
and now another perspective so far I
have been talking about web application

43
00:03:59,470 --> 00:04:06,210
security related problems that we
process cookies so naturally we have web

44
00:04:06,210 --> 00:04:12,980
application and we have a browser and he
turns out that we have also problems

45
00:04:12,980 --> 00:04:18,789
related to security processing on
browser level very nice from a tigress

46
00:04:18,790 --> 00:04:25,400
point of view because now that I carries
much more powerful Shane vulnerabilities

47
00:04:25,400 --> 00:04:29,520
in web application to get there with
their abilities in browser to have

48
00:04:29,520 --> 00:04:35,340
something very powerful idea so this is
yet another perspective so I'll show you

49
00:04:35,340 --> 00:04:40,840
a couple of problems in modern browsers
we secure processing and what are the

50
00:04:40,840 --> 00:04:41,659
consequences

51
00:04:41,660 --> 00:04:46,620
insecure because we are interested in
consequences

52
00:04:47,210 --> 00:04:53,260
mad about consequences like alteration
bypasses impersonation access SQL

53
00:04:53,260 --> 00:04:57,460
injection has also force of really
really bad consequences can happen as a

54
00:04:57,460 --> 00:05:04,799
result of his belief I convince you that
this subject is interesting and worth

55
00:05:04,800 --> 00:05:06,490
discussing

56
00:05:06,490 --> 00:05:13,919
so what's the what's the agenda three
perspectives of insecurity processing

57
00:05:13,919 --> 00:05:19,460
will be discussed where publication I
already mentioned this browser I already

58
00:05:19,460 --> 00:05:22,280
mentioned it in yet another one

59
00:05:22,280 --> 00:05:29,650
RSC 6265 this is the document this r/c
266 fighters of the document this

60
00:05:29,650 --> 00:05:32,479
describes how to process

61
00:05:32,479 --> 00:05:39,630
houses so we kind of a receipt to to go
to know how to do it or or vendors

62
00:05:39,630 --> 00:05:47,969
information all browsers rely on this
RFC so you can imagine it if we find a

63
00:05:47,970 --> 00:05:53,020
weakness in the sourc data we have to
the impact of this weakness is will it

64
00:05:53,020 --> 00:05:57,789
affect all browsers would be cool right
from my point of view so I want to cover

65
00:05:57,790 --> 00:06:02,729
everything not only application that
this this is the first thing that comes

66
00:06:02,729 --> 00:06:03,900
to our mind winner

67
00:06:03,900 --> 00:06:10,150
think about greater vulnerabilities but
also a browser and also receive so you

68
00:06:10,150 --> 00:06:14,229
can study it carefully and see if there
are any weaknesses that there are

69
00:06:14,229 --> 00:06:24,320
weaknesses so it is really nice to win
50

70
00:06:24,820 --> 00:06:41,380
ok so the first subject secure flack and
H St S for those who are not very

71
00:06:41,380 --> 00:06:46,260
familiar with with this when you make a
sign of flax

72
00:06:46,260 --> 00:06:54,539
when a cookie has secured flags set then
this will be only sent over secure

73
00:06:54,539 --> 00:06:58,860
channels so over HTTPS this is very
desire because we don't want our

74
00:06:58,860 --> 00:07:04,449
sensitive cookies to be disclosed over
insecurity that's the reason why we have

75
00:07:04,449 --> 00:07:12,039
secured flag so it is really desire so
it's related with confidentiality we

76
00:07:12,039 --> 00:07:16,150
want to protect the confidentiality of
our sense difficulties what's the

77
00:07:16,150 --> 00:07:23,280
problem when you go and read this ric
rac 6265 you'll see that something

78
00:07:23,280 --> 00:07:28,309
strange is outer what strange keep in
mind that secure strike is used to

79
00:07:28,310 --> 00:07:31,310
protect the confidentiality of the

80
00:07:31,849 --> 00:07:39,690
ok but let's imagine that we can send
requests over HTTP HTTPS insecure ok

81
00:07:39,690 --> 00:07:44,210
when this cookie has secure flak that
this will not be appended to this

82
00:07:44,210 --> 00:07:50,510
request so far so cute but then the
response cows over HTTP this is insecure

83
00:07:50,510 --> 00:07:58,409
because HTPC security checks and now
very interesting part comes to you can

84
00:07:58,409 --> 00:08:02,830
you can play with this HTTP response
right because this is plain text there

85
00:08:02,830 --> 00:08:06,500
is no security here and you can embed
you're set

86
00:08:06,500 --> 00:08:15,370
and overwrite security in the Cedar
riskier from insecure HttpResponse you

87
00:08:15,370 --> 00:08:23,770
overwrite a group of security black and
security will be used only in HTTPS

88
00:08:23,770 --> 00:08:29,719
secure connections right so what's the
impact actually feel secure HTTP

89
00:08:29,720 --> 00:08:36,530
response has an impact on HTTPS protect
the traffic light on the right because

90
00:08:36,530 --> 00:08:40,199
from HTTPS secure HTTP response we could
overwrite

91
00:08:40,200 --> 00:08:46,920
which secures like that will be used
only in HTTPS protected connections so

92
00:08:46,920 --> 00:08:53,130
furious that this is designed mister the
mistake from design point of view is

93
00:08:53,130 --> 00:08:59,340
secure HTTP should never have impact on
a secure HTTPS

94
00:09:00,390 --> 00:09:05,480
the core of the problem here is that
people focus very much on protecting the

95
00:09:05,480 --> 00:09:12,010
confidentiality of the cookie that's why
I dislike was introduced but there is

96
00:09:12,010 --> 00:09:19,300
nothing about integrity right we protect
confidentiality but we don't do anything

97
00:09:19,300 --> 00:09:29,209
in terms of integrity so secure HTTP web
we might impact impact secure HTTPS

98
00:09:29,210 --> 00:09:35,760
right so this is really significant
problem and it affects all browsers

99
00:09:35,760 --> 00:09:43,740
because browsers rely on this r/c 60 65
now and not the subject or subtropical

100
00:09:43,740 --> 00:09:46,780
HST yes there is another way

101
00:09:47,339 --> 00:09:53,040
well if you don't question I don't have
security truck for my cookie doesn't

102
00:09:53,040 --> 00:09:57,620
automatically mean that I am NOT secure
not necessarily because there is

103
00:09:57,620 --> 00:10:05,670
something very powerful technology like
a chest yes HTTP strict security this is

104
00:10:05,670 --> 00:10:10,120
very powerful because once it is
implemented and only one single response

105
00:10:10,120 --> 00:10:15,190
header is either for this purpose and
the whole traffic from the browser will

106
00:10:15,190 --> 00:10:19,059
be over HTTPS even if you try to
manually conexion hd2

107
00:10:19,059 --> 00:10:24,679
to your application though the browser
would take care of us and the only HTTPS

108
00:10:24,679 --> 00:10:30,149
requests very good from security point
of view

109
00:10:30,149 --> 00:10:35,679
HTTPS in the forest on the browser level
so you might have a chest yes implement

110
00:10:35,679 --> 00:10:41,009
that and then you don't need Secure
Flight right because all actually all

111
00:10:41,009 --> 00:10:50,449
requests are going out over secure HTTPS
looks good but in practice it's not so

112
00:10:50,449 --> 00:10:56,419
easy or we have some some problems the
problem is that it works fine

113
00:10:57,559 --> 00:11:04,279
technology provided that it is really
supported by all major browsers in case

114
00:11:04,279 --> 00:11:10,629
of for example Internet Explorer attempt
deal still support that still operated

115
00:11:10,629 --> 00:11:15,689
by microsoft used by this number of
people each STS is not supported and we

116
00:11:15,689 --> 00:11:22,919
need to know about this stuff because if
this is not support that that strict

117
00:11:22,919 --> 00:11:27,718
security is not effective in a leader
that sport and so you need actually

118
00:11:27,719 --> 00:11:33,989
secure flack to be protected right so in
practice to know the details about

119
00:11:33,989 --> 00:11:39,319
different browsers how they how they
process different security features so

120
00:11:39,319 --> 00:11:44,218
in practice we need to see each sts and
secure slack in fury HST is would be

121
00:11:44,219 --> 00:11:51,799
enough but not all browsers are
supporting is so in case of Internet

122
00:11:51,799 --> 00:11:56,059
Explorer the only thing that will make
you protect that is secure slack so in

123
00:11:56,059 --> 00:12:04,108
reality what we should do is use aged
STS together with security lock ok now

124
00:12:04,109 --> 00:12:07,439
the next topic

125
00:12:08,149 --> 00:12:11,499
over a generation has the story

126
00:12:12,449 --> 00:12:18,389
user or a long drought and attacker is
able to learn user skewer SessionID

127
00:12:18,389 --> 00:12:24,629
different ways of doing this user is
logged out so it looks like something

128
00:12:24,629 --> 00:12:29,239
completely that dangerous user is logged
out sourced reason of learning user

129
00:12:29,239 --> 00:12:29,830
school

130
00:12:29,830 --> 00:12:34,660
SessionID what's the point different
ways again access disclosure of a secure

131
00:12:34,660 --> 00:12:39,949
HTTP so it looks like something stretch
something not profitable from our point

132
00:12:39,950 --> 00:12:46,960
of view but what the problem might be
very often this is a problem is that's

133
00:12:46,960 --> 00:12:52,810
this session idea or the decision is not
regenerated after successful application

134
00:12:52,810 --> 00:12:58,920
in other words is still the same you are
in the northern state it has some value

135
00:12:58,920 --> 00:13:06,160
then the you walk into the app you are
logged in successfully but it still has

136
00:13:06,160 --> 00:13:10,959
the same value do you see now what is
risky why was that occur in this

137
00:13:10,960 --> 00:13:16,820
scenario was able to read this user is
locked out it looks like something

138
00:13:16,820 --> 00:13:23,630
useless the school but then user becomes
outdated and it is still the same value

139
00:13:23,630 --> 00:13:29,070
so we learn something useless and later
on when the user authenticate this is

140
00:13:29,070 --> 00:13:33,940
very very valuable for us because now we
could both the user and the root cause

141
00:13:33,940 --> 00:13:39,860
is the weakness in processing of this
kooky because we should regenerate this

142
00:13:39,860 --> 00:13:44,620
cookie in other words we should assign
value to the scoop you when we go from

143
00:13:44,620 --> 00:13:49,550
normal dedicated state to authenticate
state right otherwise we can always

144
00:13:49,550 --> 00:13:53,990
learn something useless what user is
logged out and use it later on when user

145
00:13:53,990 --> 00:13:59,790
without knowing user's credentials very
nice so the consequences user base a

146
00:13:59,790 --> 00:14:08,420
nation we should not only regenerate
SessionID all cookies with sensitive

147
00:14:08,420 --> 00:14:15,370
data like CSRF token might be in the
cookie persistent talking or whatever as

148
00:14:15,370 --> 00:14:24,580
that is sensitive should be regenerated
after successful login otherwise we may

149
00:14:24,580 --> 00:14:33,160
end up in problems the next week on the
web application level the story

150
00:14:33,160 --> 00:14:34,529
user looks out

151
00:14:34,529 --> 00:14:42,860
SessionID is deleted in user's browser
and we see that we are looked out we I

152
00:14:42,860 --> 00:14:48,939
mean users of the web application what
the problem might be no service citing

153
00:14:48,939 --> 00:14:54,899
valuation quite often dealt indication
after logging out is deleted in user's

154
00:14:54,899 --> 00:15:03,860
browser but this is not enough he needs
to be involved on the server side why is

155
00:15:03,860 --> 00:15:08,059
the problem why the consequences
impersonation because when you only

156
00:15:08,059 --> 00:15:14,959
delete the scoop browser level that the
user looks like he is locked out but in

157
00:15:14,959 --> 00:15:19,949
reality is not locked out there was no
server-side validation so from the

158
00:15:19,949 --> 00:15:26,878
service light point of view the user is
logged in so the user seems to be locked

159
00:15:26,879 --> 00:15:33,910
out but actually is not locked out so
once you are able to get this user is

160
00:15:33,910 --> 00:15:40,910
logged in classical access then you may
log out many times but it looks like he

161
00:15:40,910 --> 00:15:46,410
can still access his account even if you
look like

162
00:15:46,410 --> 00:15:51,480
logged out users right so this is it we
need to remember about several sources

163
00:15:51,480 --> 00:15:56,149
cited validation of course the
assumption is as I mentioned that the

164
00:15:56,149 --> 00:16:00,829
attacker or learn SessionID of the user
1 user was logged right this is a

165
00:16:00,829 --> 00:16:04,930
question that this is a problem of
classical access users lock locked in

166
00:16:04,930 --> 00:16:12,969
with the SessionID and then it doesn't
matter whether user looks out or not

167
00:16:12,970 --> 00:16:16,589
because on the server side user is
logged in all the time as a person I did

168
00:16:16,589 --> 00:16:21,679
you realize now something different

169
00:16:22,679 --> 00:16:30,250
HttpOnly flag I have already mentioned
security black what's the point of HDB

170
00:16:30,250 --> 00:16:34,089
always like this is yet another flag
that we can assigned to a crooked to

171
00:16:34,089 --> 00:16:39,360
make processing more secure when we have
this flag set

172
00:16:39,879 --> 00:16:44,680
JavaScript cannot reach across the slack
was the logic behind

173
00:16:44,680 --> 00:16:51,910
this the classical exercise attack is
like this we have access so what we want

174
00:16:51,910 --> 00:16:58,680
to do is read the old indication cookie
of the users access and then we can

175
00:16:58,680 --> 00:17:03,250
easily personalized user because the
only piece of paper that we need to

176
00:17:03,250 --> 00:17:04,980
mitigate the risk

177
00:17:04,980 --> 00:17:13,929
HDPE if like was introduced so that in
case of job when the strike is set that

178
00:17:13,929 --> 00:17:21,000
well when exercise attackers JavaScript
cannot read a quickie with us luck so

179
00:17:21,000 --> 00:17:26,520
from exercise point of view the most
classical we cannot read this so the

180
00:17:26,520 --> 00:17:31,860
risk is mitigated in general when HDB
only flag is set

181
00:17:34,240 --> 00:17:43,830
HTTP API cannot ridiculous like so as
you can see it is logical to to to have

182
00:17:43,830 --> 00:17:51,070
this like a plan what's the problem
because different problems at different

183
00:17:51,070 --> 00:17:59,080
levels it looks fine but when you go
against the Saracens 6265 you'll see

184
00:17:59,080 --> 00:18:07,290
that this document says about HTTP I
cannot reach equity with HttpOnly flag

185
00:18:07,290 --> 00:18:15,428
the question is what about writing
permission right because now it reading

186
00:18:15,429 --> 00:18:20,710
permissions but what about writing
writing permissions or overwrite the

187
00:18:20,710 --> 00:18:26,290
right are not clearly specified in this
era si and we love it as security guys

188
00:18:26,290 --> 00:18:30,309
ambiguity is really a security or
attackers loves

189
00:18:31,809 --> 00:18:39,230
security because security is related to
problems and this is yet another example

190
00:18:39,230 --> 00:18:44,220
showing that this is the case writing
permissions are not specified ok I

191
00:18:44,220 --> 00:18:50,150
cannot read it and i overwrite this
question yes I

192
00:18:50,150 --> 00:19:00,120
do it in the most up-to-date one nice I
can overwrite it the question is what I

193
00:19:00,120 --> 00:19:07,159
can do with this stuff now in case of
exercise Astoria different dots let's

194
00:19:07,160 --> 00:19:10,630
say you're different small problems try
to figure out interesting attack

195
00:19:10,630 --> 00:19:21,710
scenario now we can we can overwrite a
nice weekend so this way we can switch

196
00:19:21,710 --> 00:19:27,690
user to attack right by overwriting
SessionID of the user was such an idea

197
00:19:27,690 --> 00:19:34,140
of what's the point of doing this you
mentioned that we've got very popular

198
00:19:34,140 --> 00:19:39,880
credit card processing in every single
account of the web application right now

199
00:19:39,880 --> 00:19:45,760
if I switch you are a victim I am a
tackle it's a nice treat you to my

200
00:19:45,760 --> 00:19:50,910
account and if you don't notice that you
have been switched that you interpret

201
00:19:50,910 --> 00:19:59,360
that my account very profitable alright
so here is that profit so there is a

202
00:19:59,360 --> 00:20:05,959
real risk related to this vulnerability
dismal durability is like this we we

203
00:20:05,960 --> 00:20:11,210
should we should prevent any kind of a
variety of writing because it is not

204
00:20:11,210 --> 00:20:17,200
needed but there's ambiguity Safari 8
implemented in a way that it allows the

205
00:20:17,200 --> 00:20:22,730
school to be overwritten and here you
have the attack scenario interesting I'm

206
00:20:22,730 --> 00:20:28,660
for real what let's let's let's let's
let's continue our process of picking

207
00:20:28,660 --> 00:20:34,520
what might yet another consequence
vulnerability user investigation I am

208
00:20:34,520 --> 00:20:40,330
back on terra I love connecting simple
box to her something powerful I see some

209
00:20:40,330 --> 00:20:44,040
of my students from previous days and
they don't already know about this we

210
00:20:44,040 --> 00:20:49,300
need to connect simple bucks to have
something for a powerful and now ok

211
00:20:49,300 --> 00:20:54,379
let's override session idea of the user
I can't I can do it because I can write

212
00:20:54,380 --> 00:21:00,600
for tonight let's over right to Skokie
another session aidid my sunshine

213
00:21:00,600 --> 00:21:06,580
a doctor so now do you remember about
the problems I mention five minutes ago

214
00:21:06,580 --> 00:21:12,409
lack of regeneration of SessionID after
successful application lets connect the

215
00:21:12,410 --> 00:21:17,320
dots let's all right decision idea of
the user recession idea that if we have

216
00:21:17,320 --> 00:21:23,030
yet another vulnerability such an idea
of the user does not change after

217
00:21:23,030 --> 00:21:30,590
successful application to see now what's
the risk the user will be using our

218
00:21:30,590 --> 00:21:36,270
SessionID so we change to different
vulnerabilities right we are so once

219
00:21:36,270 --> 00:21:42,280
again we override such an idea of the
user with arbitrary SessionID user is

220
00:21:42,280 --> 00:21:47,990
locked out using a lot in this still the
same session IDs being used by the user

221
00:21:47,990 --> 00:21:54,190
but we attackers nobody SessionID so now
we can impersonate user beautiful so

222
00:21:54,190 --> 00:21:58,930
let's change different porno pete has to
have something more powerful ok domain

223
00:21:58,930 --> 00:22:05,870
attribute the next topic if you go to
the IRA C 66 fire again I'm referring to

224
00:22:05,870 --> 00:22:08,669
the foundation

225
00:22:08,670 --> 00:22:18,170
you can specify the domain attribute
this is this is an information how to

226
00:22:18,170 --> 00:22:24,820
handle the scope of this cookie right
and you can read something like this

227
00:22:24,820 --> 00:22:29,889
when the main attribute is not specified
then this cookie should be only sent to

228
00:22:29,890 --> 00:22:36,680
the domain from which it originated so
it's really only limited to demand from

229
00:22:36,680 --> 00:22:41,940
it from which it originated solely to
limit the scope of this cookie looks

230
00:22:41,940 --> 00:22:48,000
good and you can read it in ROC in other
words you don't want this to be

231
00:22:48,000 --> 00:22:52,900
disclosed to any other subdomain right
it's it's it's illogical what the

232
00:22:52,900 --> 00:22:59,780
problem was adopted a internist roar 11
will send the spooky additionally all

233
00:22:59,780 --> 00:23:06,420
subdomains of this domain so let's say
you can completely bypass day's high of

234
00:23:06,420 --> 00:23:07,450
protection

235
00:23:07,450 --> 00:23:13,059
Explorer alone or in other words its
Internet Explorer 11 completely does not

236
00:23:13,059 --> 00:23:20,320
support this stuff and this is she so if
even if you are first smart developer

237
00:23:20,320 --> 00:23:24,730
you very carefully read this RFC because
this is the foundation and you know that

238
00:23:24,730 --> 00:23:29,740
it should be processed this way sorry
explore 11 will be processing different

239
00:23:29,740 --> 00:23:33,850
way and you may end up in problems what
about

240
00:23:34,779 --> 00:23:38,120
attack scenarios the first one

241
00:23:38,120 --> 00:23:45,510
origin calculate cage so just to show
you why this is risky and why using

242
00:23:45,510 --> 00:23:50,570
Internet Explorer 11 in terms of the may
not stupid processing might be really

243
00:23:50,570 --> 00:23:58,250
not a good idea so let's assume that we
have the main example calm and on this

244
00:23:58,250 --> 00:24:05,929
domain there is sensitive application
like wallet this is this is very

245
00:24:05,929 --> 00:24:12,899
sensitive application so we want the
kooky altercation cookie limit only to

246
00:24:12,899 --> 00:24:18,340
the domain example.com right this is
very logical so we don't specify the

247
00:24:18,340 --> 00:24:25,269
main attribute when we don't specified
amount attributable to this domain but

248
00:24:25,269 --> 00:24:30,080
the society want to protect it as much
as possible but what's interesting is

249
00:24:30,080 --> 00:24:37,769
that you might have so insensitive
sub-domain like Axtell example call

250
00:24:37,769 --> 00:24:43,490
insensitive in practice it means
insensitive means no time spent on

251
00:24:43,490 --> 00:24:50,559
security evaluation at this point of
view it was tested for all the front

252
00:24:50,559 --> 00:24:58,110
security point of view is good from her
point of view because exercise on this

253
00:24:58,110 --> 00:25:02,678
subdomain from business point of view
this is insensitive so I don't care very

254
00:25:02,679 --> 00:25:14,230
much but exercise on this domain can
reach a kooky without the main attribute

255
00:25:14,230 --> 00:25:15,309
on example to

256
00:25:15,309 --> 00:25:23,168
case of 11 in all other browsers this
cookie will be only limited right to

257
00:25:23,169 --> 00:25:26,019
demand from which it originated

258
00:25:26,019 --> 00:25:29,120
Internet Explorer it will be also

259
00:25:29,120 --> 00:25:34,289
or it can be accessed from expert
example.com because this cookie will be

260
00:25:34,289 --> 00:25:41,269
sent to all subdomains to exercise
extreme example right now that it's

261
00:25:41,269 --> 00:25:47,080
really good to take a look into
insensitive demands irrelevant from a

262
00:25:47,080 --> 00:25:51,009
business point of view and to cross
origin interaction and read very

263
00:25:51,009 --> 00:25:55,460
sensitive piece of data and i'm taking
advantage of a vulnerability in interest

264
00:25:55,460 --> 00:26:00,240
for eleven to do this from my point of
view I'm by Qatar it's really nice

265
00:26:00,240 --> 00:26:06,490
another attack scenario externally
managed to make very

266
00:26:09,410 --> 00:26:15,150
the story here is very similar let's
assume that there is short costs hosting

267
00:26:15,150 --> 00:26:16,880
company again

268
00:26:16,880 --> 00:26:23,650
example.com a for example / clients and
then you can buy a sub-domain why .

269
00:26:23,650 --> 00:26:28,850
example.com this story is very similar
if you apply the sub-domain you don't

270
00:26:28,850 --> 00:26:35,169
need right now any kind of success
because you own this domain so you have

271
00:26:35,170 --> 00:26:40,670
control over JavaScript on the subdomain
so you can read the cookie from the

272
00:26:40,670 --> 00:26:47,270
hostel hosting application right because
they use the court subdomain examples

273
00:26:47,270 --> 00:26:58,750
right clear so very very very similar
attack scenario but something different

274
00:26:58,750 --> 00:27:02,570
than you don't need actually exercised
in case of hosting to do this because

275
00:27:02,570 --> 00:27:07,889
you already own this subdomain and can
read a kooky to related to the

276
00:27:07,890 --> 00:27:13,290
quarter-mile example ok the next the
next topic

277
00:27:13,910 --> 00:27:21,410
there is another problem in Safari 9 the
most up-to-date is that 49 support

278
00:27:21,410 --> 00:27:24,490
so-called comma-separated list of
Cougars inset

279
00:27:25,070 --> 00:27:33,780
Heather what's interesting is that this
this is no longer I see as you can see

280
00:27:33,780 --> 00:27:43,860
this is no longer I C 62 65 or 66 fight
is the most up-to-date on this one

281
00:27:45,110 --> 00:27:53,709
RFC 2109 is obsoleted well absolutely
absolutely means that and the kind of

282
00:27:53,710 --> 00:27:57,460
risky future obsolete are all to see

283
00:27:57,980 --> 00:28:04,930
should no longer be supported in most
up-to-date more security 6265 should not

284
00:28:04,930 --> 00:28:12,070
be but the reality is different that's
why I love RFC some obsolete it's also

285
00:28:12,070 --> 00:28:16,939
because on the life skills on some risk
officials are still out there

286
00:28:19,770 --> 00:28:22,770
how does it look like this

287
00:28:23,660 --> 00:28:28,400
let's assume that you've got something
like this index PHP and you can normally

288
00:28:28,400 --> 00:28:31,550
specify the parameter lang

289
00:28:31,550 --> 00:28:38,010
language and the value in the responses
very very typical scenario for every

290
00:28:38,010 --> 00:28:47,570
single website is that response you will
see that cookie with the name lang and

291
00:28:47,570 --> 00:28:48,260
value d

292
00:28:48,260 --> 00:28:54,470
right well you don't see any kind of
sorts cross-site request forgery talking

293
00:28:54,470 --> 00:28:59,280
so you can remotely changed the language
of the user either publication well the

294
00:28:59,280 --> 00:29:03,710
boxes but over all right even if you
change it to yet another language it can

295
00:29:03,710 --> 00:29:07,930
be very easily reversed it does not
change anything in the profile to write

296
00:29:07,930 --> 00:29:13,660
this is clear but what's interesting is
acute in mind that this is taken from

297
00:29:13,660 --> 00:29:21,250
request and put into the city had a
response in Suffern nine what you can do

298
00:29:21,250 --> 00:29:26,620
is you can do you can specify
comma-separated list of cookies so

299
00:29:26,620 --> 00:29:32,169
common that space character and other
cookie you with another value as a

300
00:29:32,170 --> 00:29:39,990
consequence can fully multi tampering of
the user remotely tamper with the cookie

301
00:29:39,990 --> 00:29:46,280
jar of these are so powerful so what we
can do if we can fully remote to tamper

302
00:29:46,280 --> 00:29:50,670
with majority user we can switch user to
our account we already know about it we

303
00:29:50,670 --> 00:29:56,260
know why it is interesting because we
can in a second reach sorry learn

304
00:29:56,260 --> 00:30:03,070
critical detailed user user
impersonation of another consequence I

305
00:30:03,070 --> 00:30:06,250
have already mentioned lack of social
regeneration after successful

306
00:30:06,250 --> 00:30:14,200
application so we used to set up a
chance to set authentication cookie of

307
00:30:14,200 --> 00:30:18,530
the user in user's browser if there is
additional vulnerability lack of social

308
00:30:18,530 --> 00:30:21,530
regeneration that we can impersonate

309
00:30:22,550 --> 00:30:27,590
remote temporary and lack of social
regeneration combined together

310
00:30:29,299 --> 00:30:36,710
and yet another attack scenario is
exercised by many people claim that well

311
00:30:36,710 --> 00:30:42,919
exercise requires look well it's related
to local exploitation no longer

312
00:30:44,230 --> 00:30:51,080
arbitrary arbitrary early so you flew
multiset arbitrary cookie with your

313
00:30:51,080 --> 00:30:58,519
exercise pelo then the victim visits
another page of the web application and

314
00:30:58,519 --> 00:31:02,340
this this is automatically this exercise
bike peace automatically triggered

315
00:31:02,340 --> 00:31:04,320
because we set arbitrate

316
00:31:04,320 --> 00:31:09,609
arbitrary value the cookie jar of the
user full multi and then this is truly a

317
00:31:09,609 --> 00:31:19,019
remote access of attack but we used to
read write and now my experience that

318
00:31:19,019 --> 00:31:22,399
many people see something like this

319
00:31:22,399 --> 00:31:26,748
the status of the back those directly
from low to high right because people

320
00:31:26,749 --> 00:31:33,100
see that exercise bike so this is an
example of more powerful attack browser

321
00:31:33,100 --> 00:31:40,340
depended exploitation so this is what I
do but counting I'll always try to know

322
00:31:40,340 --> 00:31:44,889
the details about different browsers
details in the browser and how those

323
00:31:44,889 --> 00:31:52,369
problems on the browser level can't help
me to you know find more severe box so I

324
00:31:52,369 --> 00:32:01,389
am big fan of exploitation of my
training I have a couple of ideas are

325
00:32:01,389 --> 00:32:06,758
very good cases right to browser the
public expectation and how it might be

326
00:32:06,759 --> 00:32:14,109
very helpful 222 back after penetration
tester the next topic underestimated

327
00:32:14,109 --> 00:32:21,249
exercise wacky I have already present
you approve the slide that we can get

328
00:32:21,249 --> 00:32:28,200
the most updates 49 good market share of
this we could remotely access but let's

329
00:32:28,200 --> 00:32:33,480
discuss it even farber because this is
one of the most underestimated subjects

330
00:32:33,480 --> 00:32:34,150
in my

331
00:32:34,150 --> 00:32:39,810
so what we already alexis is not related
to local exploitation

332
00:32:39,810 --> 00:32:46,350
represent your remote attacker one cross
origin exploitation let's assume that

333
00:32:46,350 --> 00:32:54,659
we've got first sensitive domain very
sensitive domain why not example first

334
00:32:54,660 --> 00:33:01,330
it was well tested from security point
of view that we have also insensitive

335
00:33:01,330 --> 00:33:07,220
domain access example com we'll practice
means not for a well-tested from

336
00:33:07,220 --> 00:33:11,900
security point of view you depend
testing of this our publication it was

337
00:33:11,900 --> 00:33:15,570
test maritimes by many guys you only
five exercise

338
00:33:15,570 --> 00:33:22,020
well many people will just assigned the
risk low because it requires local

339
00:33:22,020 --> 00:33:28,260
exploitation are now let's pull my way
of thinking how to launch this attack

340
00:33:28,260 --> 00:33:35,090
remotely right how to make an impression
on your boss a client go to insensitive

341
00:33:35,090 --> 00:33:41,879
totally insensitive X example the
probability of finding access here is

342
00:33:41,880 --> 00:33:48,610
greater than here because it says it has
been many times but tested you find

343
00:33:48,610 --> 00:33:54,060
exercise expert example now what you
have exercised

344
00:33:54,060 --> 00:34:00,110
example that would you can do from The
Exorcist point of view is you can set a

345
00:34:00,110 --> 00:34:07,129
quickie with domain attribute
example.com yes you can do it I discuss

346
00:34:07,130 --> 00:34:11,600
the problem with domain attribute
previously it was related to the main

347
00:34:11,600 --> 00:34:17,500
attribute not specified whether but you
if you have access here you can specify

348
00:34:17,500 --> 00:34:25,070
a cookie sorry you can set a cookie with
a domain example yes you can do it you

349
00:34:25,070 --> 00:34:30,820
are on the main excellent example calm
but you can set a coochie related to the

350
00:34:30,820 --> 00:34:36,480
core domain and that means to the
browser process cookies when the main

351
00:34:36,480 --> 00:34:43,699
attribute is specified this will be sent
to this court and all subdomains do you

352
00:34:43,699 --> 00:34:46,069
see what I'm talking about this

353
00:34:46,070 --> 00:34:51,110
because now I have exercised on in
society expects Apple com I set a cookie

354
00:34:51,110 --> 00:34:56,390
with domain attribute example it means
that this cookie will be sent to all

355
00:34:56,389 --> 00:35:03,379
subdomains of this domain so also to
wider example so I have so what I have

356
00:35:03,380 --> 00:35:13,180
huge IRA Moultrie trigger example this
is a very nice beautiful combination of

357
00:35:13,180 --> 00:35:14,120
different problems

358
00:35:14,120 --> 00:35:19,009
okay just to convince you that this is
reality

359
00:35:20,200 --> 00:35:25,870
responsible eating well response
splitting behind his vulnerabilities

360
00:35:25,870 --> 00:35:30,930
like this we use special characters like
current return newline carriage return

361
00:35:30,930 --> 00:35:39,359
newline we split the head nurse escaped
from the head of the body exercise time

362
00:35:39,360 --> 00:35:44,610
to go deeper into this this attack but
it is to split the headers and and go

363
00:35:44,610 --> 00:35:51,380
into the body because when we are in the
body that our excess can be working and

364
00:35:51,380 --> 00:35:56,700
then the story is exactly the same as
here but the point was a bit different

365
00:35:56,700 --> 00:35:57,140
now

366
00:35:57,140 --> 00:36:03,830
not a classical actress from our
responsibility responsibility to access

367
00:36:03,830 --> 00:36:10,569
the story is yet another example
dumplings I have already discussed just

368
00:36:10,570 --> 00:36:15,340
three examples I believe that now you
are convinced that yes exercised by a

369
00:36:15,340 --> 00:36:19,550
cookie is not local exploitation we
could really do it remotely so the risk

370
00:36:19,550 --> 00:36:26,150
is higher if you are backed by the
participants more money for four bucks

371
00:36:26,150 --> 00:36:32,290
that are exploitable right okay so what
are the conclusions

372
00:36:33,609 --> 00:36:41,799
I decided to discuss on selected topics
is a talker not the train or something

373
00:36:41,799 --> 00:36:48,259
so what we should do security people
engineers consultants are such as

374
00:36:48,259 --> 00:36:55,289
whatever we should educate development
teams I took belief that this is not

375
00:36:55,289 --> 00:37:01,619
only because I'm trainer I love to teach
people but this is the prerequisite many

376
00:37:01,619 --> 00:37:07,960
security people blame developers day
that the basics of secure secure

377
00:37:07,960 --> 00:37:14,400
applications they don't know the basics
of web application security and this is

378
00:37:14,400 --> 00:37:19,460
very strong because we should blame
ourselves if we don't teach this stuff

379
00:37:19,460 --> 00:37:24,509
to the development teams because they
know a lot of different stuff a lot of

380
00:37:24,509 --> 00:37:28,710
technologies we are not aware of and
it's our responsibility to keep this

381
00:37:28,710 --> 00:37:35,099
knowledge and if we do it in a good way
that we will have less work actually and

382
00:37:35,099 --> 00:37:39,089
our applications will be much more
secure and this is also the prerequisite

383
00:37:39,089 --> 00:37:46,160
of any security development lifecycle
process is training to the people that I

384
00:37:46,160 --> 00:37:50,489
was told the first 10 was related with
web application security vulnerabilities

385
00:37:50,489 --> 00:37:56,390
because almost everyone is developing
web apps right but the level after the

386
00:37:56,390 --> 00:38:03,598
couple of problems in the browser level
so what we need to do we operate it does

387
00:38:03,599 --> 00:38:08,299
if we find all of our ability to
cooperate with them to fix the stuff

388
00:38:08,299 --> 00:38:15,109
because well the impact if there's an
iPhone or ability because many people

389
00:38:15,109 --> 00:38:18,109
are using the core processors writer
assaults the ballpark

390
00:38:19,119 --> 00:38:25,759
345 most popular browsers and
affordability every single browser will

391
00:38:25,759 --> 00:38:28,369
be back issues because many people are
using

392
00:38:28,369 --> 00:38:36,609
sweet cooperative damn they operator $5
solution and then finally I presented

393
00:38:36,609 --> 00:38:43,460
proposal web app level of arousal level
and our sea level the foundation so we

394
00:38:43,460 --> 00:38:48,569
really need to discuss improve literacy
because this is the foundation for every

395
00:38:48,569 --> 00:38:54,240
single brothers everyone we rely on
users browsing many times during the day

396
00:38:54,240 --> 00:38:58,508
this is the foundation so it needs to be
really carefully analyzed disgusting

397
00:38:58,509 --> 00:39:06,049
proposals ok thank you very much for
attention of course I will be now it's

398
00:39:06,049 --> 00:39:10,160
time for a question of course I would be
also available doing this

399
00:39:10,160 --> 00:39:14,598
lunch break coffee break then lunch
break so no worries I'm very happy to

400
00:39:14,599 --> 00:39:18,650
discuss different subject with people
because this day dr figure out not only

401
00:39:18,650 --> 00:39:23,130
to give a talk but talk to you answer
your questions for you if you're afraid

402
00:39:23,130 --> 00:39:30,380
now has been recorded since you have a
protected talk to me later no worries I

403
00:39:30,380 --> 00:39:33,380
for you thank you thank you

404
00:39:46,920 --> 00:40:20,990
problem is that why example.com you have
found exercise for sure so many many

405
00:40:20,990 --> 00:40:29,979
people think that it can be exploited
only locally so the problem or issue

406
00:40:30,569 --> 00:40:38,910
well if you find excess is this is an
issue Publication right that's right for

407
00:40:38,910 --> 00:40:40,910
you

408
00:40:40,910 --> 00:40:46,390
I believe that if I get you correctly
you are asking whether if I have excess

409
00:40:46,390 --> 00:40:52,629
X example com I can set a cookie that
will be sent to example all subdomains

410
00:40:53,299 --> 00:40:57,549
your questions whether this is a problem
in the super single browser or it works

411
00:40:57,549 --> 00:41:02,440
this way right it works this way all
browsers for this is the functionality

412
00:41:02,440 --> 00:41:12,250
ride so I used the functionality or how
to help myself to exploit the stuff

413
00:41:12,250 --> 00:41:20,510
remotely so I have knowledge about X
example com then I can set a cookie when

414
00:41:20,510 --> 00:41:25,750
I specified attribute with a domain
example calm and then it means that it

415
00:41:25,750 --> 00:41:32,380
will be sent to example.com and also so
I have a vulnerability unchanged this

416
00:41:32,380 --> 00:41:40,859
vulnerability functionality of cookie
processing because this works just

417
00:41:40,859 --> 00:41:42,569
described five seconds ago

418
00:41:42,569 --> 00:41:49,660
works this way your browser process so I
just using this knowledge to two law to

419
00:41:49,660 --> 00:41:54,368
know to make it looking at this is a
question

420
00:41:55,050 --> 00:42:01,460
any other questions questions

