1
00:00:00,000 --> 00:00:05,980
thank you guys for attending this
presentation I me to go seek c/o extra

2
00:00:05,980 --> 00:00:11,050
security been here before four years ago
for binary planting talk and we are

3
00:00:11,050 --> 00:00:16,960
breaking into banks and presenting all
such stuff and today I will show you how

4
00:00:16,960 --> 00:00:23,310
we can break the monopoly of big vendors
who seem to be the only ones who can

5
00:00:23,310 --> 00:00:29,279
match their applications now we're going
to do that to the current situation

6
00:00:29,279 --> 00:00:35,420
you're probably aware of we've been and
probably many of you have been finding

7
00:00:35,420 --> 00:00:40,340
vulnerabilities in software for a long
time and reporting that vendors one way

8
00:00:40,340 --> 00:00:45,180
or the other and what we see and what
you probably see as well is that the

9
00:00:45,180 --> 00:00:47,600
same types of bugs are being found over
and over again

10
00:00:47,600 --> 00:00:53,160
buffer overflows double for use and use
after free and so on so same same types

11
00:00:53,160 --> 00:00:57,610
of bugs and they're being fixed and
they're being found again and the clever

12
00:00:57,610 --> 00:01:03,570
people find expert medications that make
explaining these vulnerabilities harder

13
00:01:03,570 --> 00:01:08,820
and then clever people on the other side
trying to find bypasses would expect me

14
00:01:08,820 --> 00:01:13,330
to get just as just an endless game it
doesn't seem to solve anything because

15
00:01:13,330 --> 00:01:18,710
basically we are security wise were in
the same state where we were fifteen

16
00:01:18,710 --> 00:01:24,149
years ago on top of that few vendors
just the big ones are proactively

17
00:01:24,150 --> 00:01:27,560
looking for vulnerabilities because
that's a costly process and it costs

18
00:01:27,560 --> 00:01:30,680
money to find vulnerabilities cost them
money to fix them and to deploy the

19
00:01:30,680 --> 00:01:35,210
fixes and they would rather be doing
something else and if you're reading and

20
00:01:35,210 --> 00:01:39,339
of course you are about breaches you see
that the vulnerabilities that are being

21
00:01:39,340 --> 00:01:45,090
exploited to break into big banks are
not some fancy 0 days they are very very

22
00:01:45,090 --> 00:01:49,009
old vulnerabilities that have been
patched long time ago it just crashes

23
00:01:49,009 --> 00:01:55,070
have not been applied to see why now if
you're a security researcher and you

24
00:01:55,070 --> 00:01:59,829
find a vulnerability try to do something
with that you learn very quickly that

25
00:01:59,829 --> 00:02:03,219
you are perceived to be part of the
problem instead of part of the solution

26
00:02:03,219 --> 00:02:06,390
and to sum it all up

27
00:02:06,390 --> 00:02:12,000
nobody's really happy except for those
who are trying to bring him know too

28
00:02:12,000 --> 00:02:15,990
short stories the first one short story
about an attacker this is how it

29
00:02:15,990 --> 00:02:22,200
accuracies his objective a lot of
vulnerability for abilities to pick from

30
00:02:22,200 --> 00:02:28,280
because the updates are not being
applied and wire up its not being

31
00:02:28,280 --> 00:02:33,600
applied well because if you were home
user of course you just click OK

32
00:02:33,600 --> 00:02:38,459
try and wait till your broker dealer
curious restarted but if you're in an

33
00:02:38,459 --> 00:02:44,680
enterprise you don't simply do that you
have to test those updates up to the

34
00:02:44,680 --> 00:02:51,250
point for Europe confident with applying
them to across the network so that they

35
00:02:51,250 --> 00:02:58,250
don't break your production that they
don't break your business model and this

36
00:02:58,250 --> 00:03:03,400
kind of house and we know that its
current undermount anti-malware

37
00:03:03,400 --> 00:03:10,250
solutions are not effective I mean if
you want to bypass those just need to

38
00:03:10,250 --> 00:03:17,120
take some time and do some testing and
you can always bypass anti-malware now

39
00:03:17,120 --> 00:03:22,340
this is what we've been doing for
fifteen years and to do this and we're

40
00:03:22,340 --> 00:03:26,690
kind of frustrated that this still works
and it's just not getting any harder if

41
00:03:26,690 --> 00:03:33,010
you are tired to penetrator target you
find a vulnerability in a software that

42
00:03:33,010 --> 00:03:37,810
they're using which is usually windows
because large corporations that's

43
00:03:37,810 --> 00:03:41,959
usually windows that are using and you
find a vulnerability that's not too old

44
00:03:41,959 --> 00:03:46,239
so let's say up to two months old which
is which means that you have a lot of

45
00:03:46,239 --> 00:03:50,630
vulnerabilities vulnerabilities to pick
from and prepared next point for that

46
00:03:50,630 --> 00:03:55,420
phone ability and finally you mutate
that exploit and send it to keep sending

47
00:03:55,420 --> 00:04:00,660
it to virustotal until are still does
not to take it anymore so you know that

48
00:04:00,660 --> 00:04:04,850
basically whatever protection they're
they're using whatever section of our

49
00:04:04,850 --> 00:04:09,940
experts still using its not going to
protect you and then you fish will

50
00:04:09,940 --> 00:04:12,950
arrange to keep keep sending users in
there

51
00:04:13,730 --> 00:04:17,570
that organization links to malicious
website which is not to exploit the

52
00:04:17,570 --> 00:04:23,120
vulnerability it's it's really simple
come to think of it and the fact that

53
00:04:23,120 --> 00:04:29,100
this has not changed in 15 years in
spite of all the new technology that's

54
00:04:29,100 --> 00:04:34,229
been invented and is being sold for
millions worldwide this is kind of

55
00:04:34,229 --> 00:04:38,099
frustrating the second story the story
of a security researcher

56
00:04:39,310 --> 00:04:46,130
security researchers here ok some of
them not wanting to admit it publicly if

57
00:04:46,130 --> 00:04:52,500
you find a nice day in some applications
popular application what do you do it's

58
00:04:52,500 --> 00:04:56,820
a dilemma there are actually no good
options for you and these are the other

59
00:04:56,820 --> 00:04:57,449
options

60
00:04:57,449 --> 00:05:03,669
well apart from applying for a buck bony
these are really popular but they don't

61
00:05:03,669 --> 00:05:08,948
really pay very much easier option
number one you can responsibly disclosed

62
00:05:08,949 --> 00:05:13,810
to the vendor so what happens there is
basically somewhere in the spectrum from

63
00:05:13,810 --> 00:05:19,410
complete silence no resupply to thank
you very much

64
00:05:19,410 --> 00:05:26,530
will tend to this when the time is right
to basically on on the other extreme you

65
00:05:26,530 --> 00:05:32,289
have a meeting with their lawyers just
not very nice so you can you can get any

66
00:05:32,289 --> 00:05:36,979
of these second you can publish just go
to a conference like this and say I

67
00:05:36,979 --> 00:05:40,789
would drop to zero day here so for your
amusement right I will not do this today

68
00:05:40,789 --> 00:05:45,510
but you have to do that for exposure and
well you might want to do then we like

69
00:05:45,510 --> 00:05:51,320
it or not you can get someone angry
doing this up to the point of them

70
00:05:51,320 --> 00:05:56,409
wanting to talk to you you know first
more room and number three you can sell

71
00:05:56,410 --> 00:06:00,770
them or ability they could your days
goes for a lot of money these days but

72
00:06:00,770 --> 00:06:05,950
there's always a problem of trusting
whoever you're selling to and the bigger

73
00:06:05,950 --> 00:06:08,229
problem of

74
00:06:08,230 --> 00:06:14,930
well if you don't have ethical
reservations bigger problem that you may

75
00:06:14,930 --> 00:06:19,470
be found guilty of helping someone
commits a crime that's not a nice option

76
00:06:19,470 --> 00:06:25,240
number four is just to forget about it
put in drawer shelf if you want and then

77
00:06:25,240 --> 00:06:29,290
what's the point of your exercise so no
good options for the researchers today

78
00:06:29,290 --> 00:06:36,110
and weisel that this is the reason
patching security vulnerabilities is a

79
00:06:36,110 --> 00:06:42,770
heart problem and it's never been really
sold so why is it hard problem with

80
00:06:42,770 --> 00:06:48,490
these three players users and security
researchers just don't seem to have a

81
00:06:48,490 --> 00:06:54,420
way of really living together working
together in a very very constructive way

82
00:06:54,420 --> 00:06:59,460
some vendors have and want to keep the
monopoly for patching and patching their

83
00:06:59,460 --> 00:07:03,729
own software and they're the only ones
who can decide whether to patch went to

84
00:07:03,730 --> 00:07:09,030
patch halt patch and when and how to
deploy and for how much money to deploy

85
00:07:09,030 --> 00:07:14,140
that patch to end users so a lot of
things going on and they would rather be

86
00:07:14,140 --> 00:07:18,349
doing something else because this is
just a cost for them they would rather

87
00:07:18,350 --> 00:07:23,400
be earning money somewhere else let
users how many of you like Patch Tuesday

88
00:07:23,400 --> 00:07:28,510
no hands right nobody likes best uses
right nobody likes

89
00:07:28,510 --> 00:07:34,890
down time even if you're not some huge
production that would like he would lose

90
00:07:34,890 --> 00:07:39,020
millions of dollars for for that we
would you know like that now for the

91
00:07:39,020 --> 00:07:45,260
large networks it's really a lose lose
situation if you if you do update

92
00:07:45,260 --> 00:07:50,370
immediately then you risk bricking your
production if you don't update

93
00:07:50,370 --> 00:07:56,400
immediately or risk being broken into
because as you probably know just a few

94
00:07:56,400 --> 00:08:02,000
days after official updates are out some
interesting exploits come up in exploit

95
00:08:02,000 --> 00:08:07,720
kits so if you have a couple of thousand
dollars extra you can just wait for a

96
00:08:07,720 --> 00:08:11,550
couple of days after the patch Tuesday
and you will get to fresh working

97
00:08:11,550 --> 00:08:18,620
quality assurance tested exploits for
some of these vulnerabilities and

98
00:08:18,620 --> 00:08:23,390
security researchers aren't really happy
as well because let me tell you every

99
00:08:23,390 --> 00:08:29,490
security vendor ever stopped to render
in this world would rather see the world

100
00:08:29,490 --> 00:08:33,789
without security researchers because
they are just causing problems to them

101
00:08:33,789 --> 00:08:37,980
if we did not exist they were there
would not be any vulnerabilities in the

102
00:08:37,980 --> 00:08:43,010
world so right now we are being
considered part of the problem and this

103
00:08:43,010 --> 00:08:51,260
is why those stones are very heart to
extend up and out of that frustration

104
00:08:51,260 --> 00:08:56,819
came our idea we want to reinvent
software packaging where packaging as it

105
00:08:56,820 --> 00:09:03,410
is today it doesn't work it works in
that slow glacier Speedway but it

106
00:09:03,410 --> 00:09:05,900
doesn't work for critical
vulnerabilities that need to be

107
00:09:05,900 --> 00:09:13,550
addressed right away now RDR idea is
that everyone should be able to just use

108
00:09:13,550 --> 00:09:17,280
a couple of minutes to install a small
piece of software we call it

109
00:09:17,280 --> 00:09:23,540
00 agent that will apply tiny security
patches I'm talking tiny I'm talking in

110
00:09:23,540 --> 00:09:25,980
a couple of machine instructions

111
00:09:25,980 --> 00:09:32,240
gigabytes of code which usually get
every Tuesday and that agent will apply

112
00:09:32,240 --> 00:09:38,210
time security patches in the same way
and in the same way I mean this but just

113
00:09:38,210 --> 00:09:41,210
in memory just wonder processes running

114
00:09:41,880 --> 00:09:46,250
patching in memory which means also
unpacking in memory and it can be done

115
00:09:46,250 --> 00:09:52,340
instantly in the same way for all
applications wouldn't that be nice and

116
00:09:52,340 --> 00:09:56,120
then you could apply and remove those
patches instantly without rebooting the

117
00:09:56,120 --> 00:10:00,210
computer without restarting applications
and without any enterprise without

118
00:10:00,210 --> 00:10:05,780
disturbing the users and without even
disturbing the admits so if someone

119
00:10:05,780 --> 00:10:09,569
notices their something's wrong with
that micro patch it can be instantly

120
00:10:09,570 --> 00:10:13,350
removed now compare that to anyone
anyone being in that mean in the

121
00:10:13,350 --> 00:10:22,590
large enterprise ok you guys know do you
dare just applying patches you do how do

122
00:10:22,590 --> 00:10:26,460
you like when someone says I want this
page removed at this guys on a laptop

123
00:10:26,460 --> 00:10:37,430
500 miles away that's really nice task
for you so yeah that's alright and I'm

124
00:10:37,430 --> 00:10:46,140
going to show you how it works ok I have
a computer here with a very low

125
00:10:46,140 --> 00:10:52,030
resolution is good and he has a zero
budget agent in store this is a console

126
00:10:52,030 --> 00:10:58,220
and it's currently disabled which means
it's not applying any patches anywhere I

127
00:10:58,220 --> 00:11:01,510
also have a couple of vulnerable
applications installed in a couple of

128
00:11:01,510 --> 00:11:05,650
explains so let me just start with
something that you will immediately left

129
00:11:05,650 --> 00:11:10,550
eye opening a fake

130
00:11:10,550 --> 00:11:18,750
time speech that's using Java
vulnerability to run the calculator as

131
00:11:18,750 --> 00:11:22,100
we all know that captured a leader is
the most malicious application along

132
00:11:22,100 --> 00:11:27,810
Windows computers should immediately
remove it but this was an example of

133
00:11:27,810 --> 00:11:33,380
this webpage exploiting a vulnerability
on your computer immediately as you as

134
00:11:33,380 --> 00:11:41,970
you drop by basically now this is
without this Europe Russia another

135
00:11:41,970 --> 00:11:47,610
example of Foxit Reader I just open for
reader

136
00:11:50,320 --> 00:11:59,440
of course vulnerable person and drop
exploited just crashed here we did not

137
00:11:59,440 --> 00:12:04,050
count limit let me tell you this is a
vulnerability a buffer overflow that

138
00:12:04,050 --> 00:12:10,099
were explaining care now I want to show
we fighting neighbors who may change and

139
00:12:10,100 --> 00:12:15,260
things are going to be a little bit
different I just go through that fake

140
00:12:15,260 --> 00:12:18,260
here to the militias York Times speech
again

141
00:12:26,610 --> 00:12:36,050
this time as soon as job was launched in
the background it was immediately passed

142
00:12:36,050 --> 00:12:42,300
by our agent so that vulnerability was
no longer there and apart from that the

143
00:12:42,300 --> 00:12:48,120
patch did not just plug the hole it also
detected that someone tried to exploit

144
00:12:48,120 --> 00:12:52,390
the vulnerability and was able to alert
the user that exploit attempt was

145
00:12:52,390 --> 00:12:56,850
blocked now this is shown five times
because this new exploit that we have

146
00:12:56,850 --> 00:13:02,250
tried to exploit the vulnerability five
times those of you familiar with you

147
00:13:02,250 --> 00:13:11,730
know that some experts are not very very
you sometimes they don't work and you

148
00:13:11,730 --> 00:13:14,320
have to try a couple of times now

149
00:13:14,320 --> 00:13:20,579
same thing with the Foxit Reader and I
will be something else so you can

150
00:13:20,579 --> 00:13:26,609
understand what I'm talking about I will
change the settings to inform me about

151
00:13:26,610 --> 00:13:31,490
all patching events which means that as
soon it will tell me when whenever a

152
00:13:31,490 --> 00:13:34,660
patch is applied to any running
application so as soon as I launched

153
00:13:34,660 --> 00:13:41,339
Foxit you will see in the top right
corner a pop-up the patch was applied

154
00:13:41,339 --> 00:13:48,050
for Foxit Reader just a memory we have
not changed the single by on the disc

155
00:13:48,050 --> 00:13:51,250
now when I drop the exploit here

156
00:13:55,130 --> 00:14:02,550
attempt was blocked and importantly
again it was twice and importantly Fox

157
00:14:02,550 --> 00:14:08,709
it keeps one right and let's try
something else now we know that Fox it

158
00:14:08,709 --> 00:14:15,599
is despatched currently let some patches
we go to applications find Fox it on

159
00:14:15,600 --> 00:14:19,970
Patch Foxit Reader as soon as I do that
sucks it is running in the background

160
00:14:19,970 --> 00:14:25,300
and you see patch has been removed while
it's running so this is what we're

161
00:14:25,300 --> 00:14:30,719
talking about patching being applied and
unemployed in memory nothing stored on

162
00:14:30,720 --> 00:14:36,350
the disc this is what allows us to do it
instantly and this is what allows admins

163
00:14:36,350 --> 00:14:41,149
to do it remotely also instantly without
even a laptop's 500 miles away

164
00:14:42,339 --> 00:14:48,839
ok let's go back to the presentation now
how does it work

165
00:14:49,670 --> 00:14:57,860
anyone familiar with function ok so the
concept is pretty much the same here

166
00:14:57,860 --> 00:15:02,170
the difference is that we do not only
patch at the beginning of the functions

167
00:15:02,170 --> 00:15:06,810
but anywhere in the code now suppose
this is code don't be afraid this is

168
00:15:06,810 --> 00:15:12,369
machine code the problem goes any other
code and let's say that we've done our

169
00:15:12,370 --> 00:15:16,009
analysis of the vulnerability and we've
come to the conclusion that we want to

170
00:15:16,009 --> 00:15:22,209
inject some patch code that will do some
correction after this call now so we

171
00:15:22,209 --> 00:15:26,459
need to inject code after this call and
we see that these the following three

172
00:15:26,459 --> 00:15:30,239
instructions are suitable for relocation
what does that mean that means that

173
00:15:30,240 --> 00:15:33,879
these structures can execute just as
well here as anywhere in the memory

174
00:15:33,879 --> 00:15:37,389
because they don't are not using any
relative offset and what's important

175
00:15:37,389 --> 00:15:42,709
also that no no execution branches
actually come back into these

176
00:15:42,709 --> 00:15:47,479
instructions because if you move such
instructions he will break something now

177
00:15:47,480 --> 00:15:54,540
if we know that these are this is a
suitable location for patch which is

178
00:15:54,540 --> 00:15:58,759
going to take these three structures out
with them somewhere else in the memory

179
00:15:58,759 --> 00:16:05,670
but our patch code before that these
original instructions just make a simple

180
00:16:05,670 --> 00:16:10,050
jump from that location where the
original code used to be jumped to the

181
00:16:10,050 --> 00:16:17,979
bad code and then back where we used to
be so effectively we just added some

182
00:16:17,980 --> 00:16:22,600
code to the original code and that is
the idea of patching basically most

183
00:16:22,600 --> 00:16:28,590
books can be purchased by adding some
Coast like if some programs that causes

184
00:16:28,590 --> 00:16:33,000
cause the buffer overflow vulnerability
forgot to to check for the length of the

185
00:16:33,000 --> 00:16:39,040
input buffer no we do this checking for
him so what do we need to define a patch

186
00:16:39,040 --> 00:16:45,390
basically we need to know which module
two applied to buy module I mean exit

187
00:16:45,390 --> 00:16:52,250
file or DLL file or assault following an
axe and we need to know the hash of that

188
00:16:52,250 --> 00:16:58,040
model so that we don't accidentally
patch something else right so we know

189
00:16:58,040 --> 00:17:01,439
that the model has been loaded so our
agent knows that the model has been

190
00:17:01,440 --> 00:17:05,990
loaded and he also needs to know where
exactly inside that module the patch

191
00:17:05,990 --> 00:17:11,870
should be rejected and also obviously
what code should be injected it's really

192
00:17:11,869 --> 00:17:13,869
as simple as that

193
00:17:13,869 --> 00:17:19,919
now this is a sample batch code source
code right we need to define the model

194
00:17:19,920 --> 00:17:24,000
passed in this case would have apt on
exit which is vulnerable and its

195
00:17:24,000 --> 00:17:30,640
vulnerable we want to pageant at this
location this offset and this is the

196
00:17:30,640 --> 00:17:37,350
code that we're going to inject so we're
just putting 02 yaks register because we

197
00:17:37,350 --> 00:17:41,179
know this that it was not initialize
correctly so someone found a way to

198
00:17:41,180 --> 00:17:47,520
exploit this and this is a very simple
batch code and they all look like this

199
00:17:47,520 --> 00:17:54,680
they will only have maybe more
instructions them just one now the

200
00:17:54,680 --> 00:17:58,600
question what can be passed this way
obviously not every portability can be

201
00:17:58,600 --> 00:18:02,520
patched but what can be bashed
fortunately it turns out that this way

202
00:18:02,520 --> 00:18:09,560
of patching be suitable for almost every
remotely exploitable former ability but

203
00:18:09,560 --> 00:18:14,220
let's go first through those
vulnerabilities does that a typical

204
00:18:14,220 --> 00:18:19,690
vulnerability types which we're all
familiar with you have to redouble freed

205
00:18:19,690 --> 00:18:27,090
american flows under flows offer for my
strings and initialize variables for

206
00:18:27,090 --> 00:18:28,949
instance that

207
00:18:28,950 --> 00:18:34,980
previous example this is an example of
initializing variable that the

208
00:18:34,980 --> 00:18:35,760
programmer

209
00:18:35,760 --> 00:18:41,510
initialize for instance minored planting
bucks just don't seem to be going we're

210
00:18:41,510 --> 00:18:44,990
dealing fiction books don't seem to be
going the way we can do a lot of things

211
00:18:44,990 --> 00:18:50,770
with these patches you can basically do
anything with these patches but if you

212
00:18:50,770 --> 00:18:56,020
want to keep them small you are kind of
constraint what you can do know very

213
00:18:56,020 --> 00:19:01,040
unsuitable for this kind of patching are
scripted code for instance on the

214
00:19:01,040 --> 00:19:07,980
servers PHP Ruby you can easily this way
this would have to be done on the way

215
00:19:07,980 --> 00:19:13,610
another way design flaws if if there's a
vulnerability that exploit some really

216
00:19:13,610 --> 00:19:19,899
incorrect design of an application you
probably was just a few bites got

217
00:19:19,900 --> 00:19:25,720
Windows kernel because windows are
actively defending against add credit

218
00:19:25,720 --> 00:19:30,720
card and you also have abs we have come
across just one so far which is like

219
00:19:30,720 --> 00:19:35,960
that that hates patching itself he hates
to be passed so detective has been

220
00:19:35,960 --> 00:19:37,580
modified in crashes

221
00:19:37,580 --> 00:19:42,280
well they have reasons for that but just
one out of hundreds of hours that we've

222
00:19:42,280 --> 00:19:47,770
seen no we referred to their badges
being microscopic cure for big security

223
00:19:47,770 --> 00:19:54,440
also remember that we are patching just
just any a few machine instructions to

224
00:19:54,440 --> 00:20:01,240
the original code and a lot of benefits
and that as you will see now let's

225
00:20:01,240 --> 00:20:09,270
create a patch for an integer overflow
let's see how that works we have an old

226
00:20:09,270 --> 00:20:15,139
Firefox's with an overall ability in the
reduce right function reduce right

227
00:20:15,140 --> 00:20:21,110
function works on an array and the
problem is that if an array is really

228
00:20:21,110 --> 00:20:24,209
long which means there is more than

229
00:20:24,210 --> 00:20:35,230
80 000 000 I know if I put their
elements in the array or its length is

230
00:20:35,230 --> 00:20:40,120
larger than that then we get an integer
overflow and the integer overflow

231
00:20:40,120 --> 00:20:47,149
basically comes from the fact that we
have an unsigned integer used for the

232
00:20:47,150 --> 00:20:53,320
let the rain and the signed integer
start which is then later a sign that

233
00:20:53,320 --> 00:20:59,179
limits minus one so what happens in the
following case will go back to the

234
00:20:59,180 --> 00:21:05,240
source code this is a simple proof of
concept that crashes Firefox we created

235
00:21:05,240 --> 00:21:11,410
array we given the length of a 2010 just
has to be more than eight and seven

236
00:21:11,410 --> 00:21:17,630
zeros just to make sure that as the
signed and unsigned into representation

237
00:21:17,630 --> 00:21:22,190
of that number is not going to be the
same and then we could reduce right on

238
00:21:22,190 --> 00:21:36,380
that let's see what happens and we're
not currently having any patches for

239
00:21:36,380 --> 00:21:45,860
Firefox here so I want to Firefox for
you to see and I have dropped this HTML

240
00:21:45,860 --> 00:21:52,729
which is that simple concept of the show
and it's a crash right

241
00:21:55,500 --> 00:22:02,040
so what happens here in the code is
basically that this length of the array

242
00:22:02,040 --> 00:22:10,409
which was determined by this call was a
very huge number but that's ok for the

243
00:22:10,410 --> 00:22:15,890
unsigned integer however when it was
converted to a signed integer it became

244
00:22:15,890 --> 00:22:23,440
a huge negative number and then all hell
breaks lose so our question was how do

245
00:22:23,440 --> 00:22:29,460
we passed this typical way to patch
numerical overflows is to make sure that

246
00:22:29,460 --> 00:22:35,990
the number that is that should not be
too large is reduced to legitimate size

247
00:22:35,990 --> 00:22:44,600
so what do we do here we find in the
machine code where this call gets

248
00:22:44,600 --> 00:22:55,040
executed so we found the call which is
here right after that call with little

249
00:22:55,040 --> 00:22:59,230
bit of debugging you see that the length
of the array which is determined by this

250
00:22:59,230 --> 00:23:06,050
call is stored in memory at the location
pointed to by the Irish sir sounds

251
00:23:06,050 --> 00:23:12,490
complex but it's really not now right
after this call very conveniently we

252
00:23:12,490 --> 00:23:18,620
have five bites to instructions which
can be easily relocate know what we want

253
00:23:18,620 --> 00:23:24,000
to do I just put a part the code here to
make sure to make room for additional

254
00:23:24,000 --> 00:23:31,470
code and the additional code is justice
so that length of the array which was

255
00:23:31,470 --> 00:23:37,630
just established by the Court of that
function is now logically ended with

256
00:23:37,630 --> 00:23:38,759
seven

257
00:23:38,759 --> 00:23:46,179
which means the highest its highest bid
is being reset the result of this is

258
00:23:46,179 --> 00:23:49,929
that this number is always going to be
small enough to have the same

259
00:23:49,929 --> 00:23:57,479
representation as it has signed and
unsigned integer now let's see how that

260
00:23:57,479 --> 00:24:04,759
works in real life I have this patch
source code conveniently prepared for

261
00:24:04,759 --> 00:24:15,299
you and it's here so this is actually
that has the vulnerability and we can

262
00:24:15,299 --> 00:24:21,129
skip the use an interesting parts and
this is the offset in the model we want

263
00:24:21,129 --> 00:24:28,658
to add are patching code and the single
line here is the patch cold so this is

264
00:24:28,659 --> 00:24:35,940
the code that we want to add to Firefox
actually at that caused the fire also I

265
00:24:35,940 --> 00:24:42,559
have it in this file so I will launch
patch lawyer

266
00:24:48,940 --> 00:24:51,940
fire

267
00:24:53,450 --> 00:24:54,780
ok

268
00:24:54,780 --> 00:24:59,620
it's just going to compile that source
code into an actual match the actual

269
00:24:59,620 --> 00:25:04,399
currently is stored in the registry
because it's so small that it can

270
00:25:04,400 --> 00:25:09,370
actually be stored in Regency even if
you have tens of thousands to purchase I

271
00:25:09,370 --> 00:25:15,250
know if we look at the registry these
are the patches is used to be the

272
00:25:15,250 --> 00:25:20,620
patches just before my operation and I
if I refresh year we'll see you on here

273
00:25:21,150 --> 00:25:31,670
new patch for this hatch of the module
this is the idea of the patch and this

274
00:25:31,670 --> 00:25:39,560
is the code we're just injecting 6 bytes
of code and this location now let's see

275
00:25:39,560 --> 00:25:48,840
how that works so we have your budget
and we're going to relaunch Firefox and

276
00:25:48,840 --> 00:25:54,560
as you can see immediately it says that
patch was applied to Firefox now let's

277
00:25:54,560 --> 00:25:57,560
drop that exploit in there

278
00:26:02,230 --> 00:26:12,390
it did not crash but it also did not pop
up the exploit alert right and why

279
00:26:12,390 --> 00:26:16,250
because we did not put that all in the
code it's not automatically have to put

280
00:26:16,250 --> 00:26:20,860
it in because you may want to have
minimal patches without those course ok

281
00:26:20,860 --> 00:26:30,770
let's do that let's change that so ok
let's make some room for some more code

282
00:26:30,770 --> 00:26:39,190
and but this instead of just simply
largely pending arraignment we first

283
00:26:39,190 --> 00:26:47,559
compare that to see whether it's too
long and if it's not too long we are

284
00:26:47,559 --> 00:26:53,440
done but if it is too long we're going
to reset it stop it and we're also going

285
00:26:53,440 --> 00:27:03,679
to call exploit blocked now let's do
this I have this prepared this second

286
00:27:03,679 --> 00:27:10,549
fire so this is the only changes that I
put this code in now let's compilers

287
00:27:10,549 --> 00:27:16,990
it's just going to overwrite the patch
that it's all of that is already in

288
00:27:16,990 --> 00:27:28,049
there and now let's launch Firefox
patches again applied as you can see I

289
00:27:28,049 --> 00:27:31,049
dropped the exploit the Firefox

290
00:27:33,230 --> 00:27:37,510
before abilities no longer there and
besides we were able to detect that

291
00:27:37,510 --> 00:27:39,710
someone tried to exploit this
vulnerability could be useful

292
00:27:39,710 --> 00:27:48,720
information right so we patched
numerical flow here now let's make sure

293
00:27:48,720 --> 00:27:53,260
it's going to be more difficult because
we don't have the source code here

294
00:27:53,260 --> 00:27:57,180
Firefox is nice to patch nicer to
parents because

295
00:27:57,180 --> 00:28:02,670
while oftentimes you do not have the
source code for patching third-party

296
00:28:02,670 --> 00:28:09,550
applications but will still try to do it
let's say I took all player for ability

297
00:28:09,550 --> 00:28:17,810
it's a media player it's it's a
vulnerability in parsing the playlist m3

298
00:28:17,810 --> 00:28:25,520
you file in that file you have
individual lines of you are Alice URLs

299
00:28:25,520 --> 00:28:31,110
22 media resources so what all there
does is it goes through each individual

300
00:28:31,110 --> 00:28:37,129
individual line and starts to process a
process it but first thing it does it

301
00:28:37,130 --> 00:28:43,720
copies that line to offer on a stack
which has a fixed size of two hundred

302
00:28:43,720 --> 00:28:49,300
and sixty bites and obviously this is a
very simple proof of concept because

303
00:28:49,300 --> 00:28:53,480
there are more than two hundred and
sixty eight here let's see what happens

304
00:28:54,670 --> 00:29:04,330
let's go back to all player I've been
nicer exploits here for you so yeah we

305
00:29:04,330 --> 00:29:09,960
get back out here so it's a very simple
vulnerability of someone has all Player

306
00:29:09,960 --> 00:29:14,920
installed and you sending this file and
he opined that there is a running

307
00:29:14,920 --> 00:29:25,450
machine we know what that means ok no I
won't bore you with all of this code you

308
00:29:25,450 --> 00:29:30,770
need to understand here is the second
instruction from the top is a cold to

309
00:29:30,770 --> 00:29:37,650
drink left right and this is the call
that returns the length of the of the of

310
00:29:37,650 --> 00:29:42,810
an individual line in that fire and this
line is exactly what we are exploiting

311
00:29:42,810 --> 00:29:47,639
we're creating much too long line at the
end

312
00:29:47,640 --> 00:29:53,810
recalling stream copy which means there
is a fixed fixed size buffer on the

313
00:29:53,810 --> 00:30:01,030
stack of 265 space and we're just simply
stream copy that too

314
00:30:01,030 --> 00:30:07,410
that that the line to that basra know
our problem obviously the problem

315
00:30:07,410 --> 00:30:13,740
horrible to hear that the line can be
too long now what do we want to do we

316
00:30:13,740 --> 00:30:19,420
want to shorten the source buffer before
that string copy call so we make sure

317
00:30:19,420 --> 00:30:23,710
that even if the line is too long we're
going to cut it short but putting his

318
00:30:23,710 --> 00:30:32,980
zero at the very end of what would be
allowed now we see that these birds are

319
00:30:32,980 --> 00:30:34,310
suitable for overriding

320
00:30:34,310 --> 00:30:39,620
we know that have to do something nice
for overriding

321
00:30:40,770 --> 00:30:46,720
just moved this go to the top put it
apart and this is the code that we want

322
00:30:46,720 --> 00:30:48,970
to inject

323
00:30:48,970 --> 00:30:54,330
if you saw in the previous slide yes I
rich so happens to have the length of

324
00:30:54,330 --> 00:30:55,860
the line toward

325
00:30:55,860 --> 00:31:02,129
+1 so we can use that information to see
whether the line in the file is too long

326
00:31:02,130 --> 00:31:09,040
so we just compared to yes I 2104 age
which is two hundred and sixty which is

327
00:31:09,040 --> 00:31:12,670
which means we are checking whether the
original line is too long for the

328
00:31:12,670 --> 00:31:20,610
destination buffer and if it's not too
long we just say we're done so if if if

329
00:31:20,610 --> 00:31:25,199
it's if it's exactly two hundred and
sixty or less than its ok but if it's

330
00:31:25,200 --> 00:31:30,810
not just going to put a zero in the
source buffer so when this stream copies

331
00:31:30,810 --> 00:31:36,240
cold it's not going to overwrite it's
really that simple and also calling

332
00:31:36,240 --> 00:31:41,790
exploit blocked so we know that someone
tried to exploit this right and we

333
00:31:41,790 --> 00:31:49,550
determined that the module is altered
accent and we know where exactly in the

334
00:31:49,550 --> 00:31:57,649
code we want to put the patch now let's
actually do this again is the source

335
00:31:57,650 --> 00:32:06,010
code of the patch this is the module or
player this is the offset the house is

336
00:32:06,010 --> 00:32:09,190
being automatically calculated by by our

337
00:32:09,190 --> 00:32:14,010
to this is called you want to inject
it's really very simple and most of the

338
00:32:14,010 --> 00:32:22,850
patches look like this very short small
amount of code you just have to correct

339
00:32:22,850 --> 00:32:31,409
small oversights from the original
programmer right that

340
00:32:36,519 --> 00:32:45,039
so it's in the database and whatever all
players launched its going to be patched

341
00:32:45,039 --> 00:32:51,820
so let's just launched launch player
here and we'll see ok a patch is not

342
00:32:51,820 --> 00:33:02,439
applied now I'm going to open it with an
axe point and instead of the calculator

343
00:33:02,440 --> 00:33:11,769
it was explained attempt log we have
just patched a buffer overflow with a

344
00:33:11,769 --> 00:33:16,379
patch that can be instantly applied to
an application while it's running and

345
00:33:16,379 --> 00:33:19,678
can be removed from the application
while it's running the reboots and

346
00:33:19,679 --> 00:33:27,839
restarts now in experiment with these
patches in this technique we have

347
00:33:27,839 --> 00:33:33,529
created a couple of guidelines couple of
rules that we need to adhere to in order

348
00:33:33,529 --> 00:33:42,329
to to make this all work and users and
these are the five patching guidelines

349
00:33:42,329 --> 00:33:48,259
first place for patching not all you
obviously have a selection of places

350
00:33:48,259 --> 00:33:52,259
once you understand the possibility you
can pitch here or here or here or here

351
00:33:52,259 --> 00:33:58,570
you have to decide which which of these
locations is the best because you want

352
00:33:58,570 --> 00:34:04,649
to cover all of the possible exploit
pass but you don't want to cover

353
00:34:04,649 --> 00:34:07,988
anything else you don't want your code
to be executed unless absolutely

354
00:34:07,989 --> 00:34:14,789
necessary and of course you have to find
a place where you can actually where

355
00:34:14,789 --> 00:34:19,279
there is some relocatable coat in the
vicinity that you can use for rejecting

356
00:34:19,279 --> 00:34:24,409
your coat your patch go and obviously
the original code that is going to be

357
00:34:24,409 --> 00:34:30,809
relocated has to be relocatable it's a
big problem if if it contains any

358
00:34:30,809 --> 00:34:35,069
relative jumps because you have to
recalculate everything and if it's moved

359
00:34:35,069 --> 00:34:36,179
too far then you can

360
00:34:36,179 --> 00:34:41,460
jump back and so on not really very
important for right now the second rule

361
00:34:41,460 --> 00:34:47,668
is you don't want to break anything i
mean who's going to want a patch if it

362
00:34:47,668 --> 00:34:51,460
catches more ability but creates a
problem elsewhere may not create a

363
00:34:51,460 --> 00:34:54,559
vulnerability but if your application is
going to start crashing that you don't

364
00:34:54,559 --> 00:34:58,559
want the best like that you're ok with
solution that you have right now so you

365
00:34:58,559 --> 00:35:02,430
should make those assumptions about how
the code that you patching is is is

366
00:35:02,430 --> 00:35:06,799
working and we're all the execution
paths could lead to Eurocode you

367
00:35:06,800 --> 00:35:11,640
actually have to do the analysis and do
the debugging and technical analysis to

368
00:35:11,640 --> 00:35:19,160
see all the inbound and outbound pass
and obviously you have to preserve the

369
00:35:19,160 --> 00:35:24,149
original functionality sometimes you
find a bug that you can only patch by

370
00:35:24,150 --> 00:35:29,980
Konami patch by actually cutting off
some functionality we've seen for

371
00:35:29,980 --> 00:35:35,730
instance shellshock bash bash for
ability well no one was actually 101

372
00:35:35,730 --> 00:35:40,880
almost no one in the world was actually
using the functionality that was being

373
00:35:40,880 --> 00:35:46,780
exploited shell-shocked so the initial
patch from the original batch developers

374
00:35:46,780 --> 00:35:53,200
was actually actually that functionality
which is ok you can you can do a patch

375
00:35:53,200 --> 00:35:58,700
like this if it works for you but
usually you want to try to avoid making

376
00:35:58,700 --> 00:36:02,720
any functional changes and you also have
to make sure that there are no side

377
00:36:02,720 --> 00:36:07,839
effects so if you're using if you're
changing any ferry and registers or

378
00:36:07,839 --> 00:36:12,369
flags with your passing operations here
to make sure that that does not have any

379
00:36:12,369 --> 00:36:17,329
negative effects on the code on the
original code that continues executing

380
00:36:17,329 --> 00:36:23,680
afterwards room number three the patch
should be as small as possible

381
00:36:24,250 --> 00:36:32,609
why what's a crash Tuesday you get six
hundred megabytes of code right

382
00:36:32,609 --> 00:36:36,710
downloaded to your computer which
replaces well a big chunk

383
00:36:36,710 --> 00:36:42,349
of whatever is running on your computer
it's impossible to review its impossible

384
00:36:42,349 --> 00:36:49,800
to make sure there are no errors in
there and if we make a patch very small

385
00:36:49,800 --> 00:36:54,810
then it's possible actually to review
that I can review your patch you send me

386
00:36:54,810 --> 00:36:59,720
your patch with for instructions I would
be able to review that anyone will be

387
00:36:59,720 --> 00:37:04,500
able to review that if they had over the
peacoat so you were coach you realize

388
00:37:04,500 --> 00:37:09,630
the code fewer errors easier reviewing
any easier testing so we want to

389
00:37:09,630 --> 00:37:14,220
contrast this to the Patch Tuesday
updates right want to keep it really

390
00:37:14,220 --> 00:37:19,779
small so that even the admin can take a
look at the pageant said ok this looks

391
00:37:19,780 --> 00:37:25,170
legit includes normal over that's really
important as well and less code is less

392
00:37:25,170 --> 00:37:31,810
execution overhead we all know how much
users like security products that slowed

393
00:37:31,810 --> 00:37:36,890
down their computers ya know this does
not have to slow down your computer in a

394
00:37:36,890 --> 00:37:45,129
way and less code is less possibility of
introducing a race condition that

395
00:37:45,130 --> 00:37:47,680
previously wasn't there now

396
00:37:47,680 --> 00:37:54,000
number four coaches execute as rarely as
possible so the location of the code of

397
00:37:54,000 --> 00:37:58,700
the petticoat must be chosen very
carefully to make sure that it's just

398
00:37:58,700 --> 00:38:06,629
executed when it's necessary and not not
when possible not in a very long loop so

399
00:38:06,630 --> 00:38:15,520
it doesn't get if you have you have an
algorithm and implementation of lab does

400
00:38:15,520 --> 00:38:17,720
some heavy frost single

401
00:38:17,720 --> 00:38:22,359
very large chunk of data you might want
to put your patch cold outside look

402
00:38:22,359 --> 00:38:25,450
because then it's going to be executed
just wants if you put it inside the loop

403
00:38:25,450 --> 00:38:30,379
is going to be executed a lot of times
it may slow down your computer and not

404
00:38:30,380 --> 00:38:34,170
real number five you have to test for
security and functionality so when the

405
00:38:34,170 --> 00:38:38,680
patches deployed its first has to
resolve the problem obviously that's why

406
00:38:38,680 --> 00:38:45,009
it's there and it has to it has to keep
the original functionality

407
00:38:45,010 --> 00:38:52,860
now the point of this presentation is to
change this guy who was not sure what to

408
00:38:52,860 --> 00:38:57,850
do with the vulnerability found into
someone who will decide to create it

409
00:38:57,850 --> 00:39:05,089
0 patch for it because that would be
arguably on a very ethical thing to do

410
00:39:05,090 --> 00:39:12,010
and also it will be a possibility in
some time to actually make a living out

411
00:39:12,010 --> 00:39:19,810
of patching someone else's code and that
is actually our our our goal and we like

412
00:39:19,810 --> 00:39:30,880
to change this now if you guys want to
try playing with zero patch and creating

413
00:39:30,880 --> 00:39:35,520
your own patches just contact us send us
your email will create your account is

414
00:39:35,520 --> 00:39:39,340
still a closed beta but you guys are
here we are privileged and you can get

415
00:39:39,340 --> 00:39:44,270
the accounts that people outside this
room cannot and will if you want to

416
00:39:44,270 --> 00:39:47,670
create patches will send you the tools
that you need to create patches as well

417
00:39:47,670 --> 00:39:54,050
thank you very much thank you for your
attention I hope I will I have turned at

418
00:39:54,050 --> 00:40:00,370
least one of you exploit developers who
don't admit being on into patch

419
00:40:00,370 --> 00:40:03,370
developers thank you

420
00:40:59,089 --> 00:41:09,160
part of the problem

421
00:41:09,759 --> 00:41:13,700
well that's a very good question well
first of all when it comes to being

422
00:41:13,700 --> 00:41:17,989
security product running on a computer
we were in basically in the very similar

423
00:41:17,989 --> 00:41:22,839
situation to two other security product
that are also looking into application

424
00:41:22,839 --> 00:41:27,759
that's true these days security products
are being a very interesting target for

425
00:41:27,759 --> 00:41:31,219
security researchers and a lot of
vulnerability by being found there

426
00:41:31,219 --> 00:41:36,170
obviously we need to do what everyone
else does we need to make sure that our

427
00:41:36,170 --> 00:41:39,029
attack service is is very small

428
00:41:39,029 --> 00:41:44,779
well we come from a security company and
we're hoping that that was a reflect at

429
00:41:44,779 --> 00:41:49,569
least a little bit on the development of
are all our own code although we're not

430
00:41:49,569 --> 00:41:54,869
fooling ourselves there will be four
abilities in articles as well what we're

431
00:41:54,869 --> 00:42:02,539
focusing on mostly is to make sure that
all abilities and malware cannot be

432
00:42:02,539 --> 00:42:07,969
cannot be introduced to your computer
through the patches that is the most

433
00:42:07,969 --> 00:42:14,609
interesting attack victory someone
trying to trick us into into the point

434
00:42:14,609 --> 00:42:19,210
Mallard all the computers although the
problem is against similar to let's say

435
00:42:19,210 --> 00:42:23,969
in an antivirus product if you break
into their network and and change their

436
00:42:23,969 --> 00:42:30,789
the next update of their of their agent
is going to do everything but very good

437
00:42:30,789 --> 00:42:35,440
question and thanks for thanks for
explaining that it actually obviously

438
00:42:35,440 --> 00:42:43,710
have the wrong information thanks to
replace completely

439
00:42:47,610 --> 00:42:53,170
actually very good question again so
obviously this cannot replace what we

440
00:42:53,170 --> 00:42:58,860
currently have but this can be a very
good solution for two things before

441
00:42:58,860 --> 00:43:05,470
abilities for products that don't have
anymore so I don't have support anymore

442
00:43:05,470 --> 00:43:11,419
like Windows XP for instance and to
bridge the gap between the official

443
00:43:11,420 --> 00:43:16,080
update and corporations applying that
official update which can be months

444
00:43:16,080 --> 00:43:21,600
months after that so this is a huge gap
which always gives a lot of ammunition

445
00:43:21,600 --> 00:43:27,580
to attackers right and if you put a zero
patch here on day one and keep it until

446
00:43:27,580 --> 00:43:31,830
you can apply the actual update then
you're you're kind of covered and that

447
00:43:31,830 --> 00:43:34,830
that's really the point

448
00:43:42,930 --> 00:43:51,730
question again since it's doing the
patching is doing the things that look

449
00:43:51,730 --> 00:43:56,190
like but we're not doing anything
different than other security products

450
00:43:56,190 --> 00:44:01,910
every antivirus product is doing right
and it's the same kind of looking just

451
00:44:01,910 --> 00:44:07,319
at the beginning of functions so it's
really not a big problem we were worried

452
00:44:07,320 --> 00:44:10,990
about that but it turns out that
wherever co-existing ok

453
00:44:17,010 --> 00:45:01,360
I'm sorry there is no but it's never
been detected top 20

454
00:45:03,310 --> 00:45:16,710
there are compatibility issues of course
but thank you

455
00:45:27,820 --> 00:46:09,650
we have not tested against

456
00:46:09,650 --> 00:46:17,240
but we are confident that security
product all other security products will

457
00:46:17,240 --> 00:46:23,390
be able to live with control card then
we will be able to but actually we can

458
00:46:23,390 --> 00:46:27,940
talk about it later cuz I'll be happy to
get something that that's on our list of

459
00:46:27,940 --> 00:46:32,310
to do's but I'm sure it's going to be a
problem but again a very good question

