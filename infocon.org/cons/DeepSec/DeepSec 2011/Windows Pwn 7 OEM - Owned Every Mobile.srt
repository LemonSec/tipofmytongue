1
00:00:05,649 --> 00:00:06,880
with that with an introduction

2
00:00:06,880 --> 00:00:10,930
the Windows Phone 7 its price new fine
OS

3
00:00:10,930 --> 00:00:14,990
s so for those you out familiar with I
try to provide an overview

4
00:00:14,990 --> 00:00:18,610
and outside about ask you to model the
stage features

5
00:00:18,610 --> 00:00:22,509
men finally add perhaps the most
interesting bit vulnerabilities

6
00:00:22,510 --> 00:00:26,960
and I I want Peter

7
00:00:26,960 --> 00:00:30,200
I won't be covering admonished
application security

8
00:00:30,200 --> 00:00:35,010
cloud storage are you I X native
applications really this talk focuses on

9
00:00:35,010 --> 00:00:37,970
the platform security the OS level
security

10
00:00:37,970 --> 00:00:41,830
offered by the platform and

11
00:00:41,830 --> 00:00:46,019
so Windows Windows Phone 7 fines day and

12
00:00:46,020 --> 00:00:50,520
currently there's this multiple
different OEM's its it's the same base

13
00:00:50,520 --> 00:00:52,290
operating system but the hand

14
00:00:52,290 --> 00:00:56,290
this different a handset manufacturers
out there the original equipment

15
00:00:56,290 --> 00:00:57,430
manufacturers

16
00:00:57,430 --> 00:01:02,030
day and with updates the same

17
00:01:02,030 --> 00:01:05,579
the same base operating system buy
microsoft across

18
00:01:05,579 --> 00:01:09,520
all at the OEM fines however the OEM's
are allowed to make

19
00:01:09,520 --> 00:01:15,399
customizations to the base OS they're
allowed to write their own applications

20
00:01:15,399 --> 00:01:19,469
device drivers and so on to actually
support the platform

21
00:01:19,469 --> 00:01:24,219
and this actually gives the Iams an
elevated level have access to the

22
00:01:24,219 --> 00:01:26,219
platform which normal develop as well

23
00:01:26,219 --> 00:01:29,789
don't act at and then finally

24
00:01:29,789 --> 00:01:33,909
well its it's a closed platform that
you're not meant to be tinkering around

25
00:01:33,909 --> 00:01:34,560
with the

26
00:01:34,560 --> 00:01:38,069
with the operating system and any from
the uses that

27
00:01:38,069 --> 00:01:41,810
perspective all I can do is really
configure the settings

28
00:01:41,810 --> 00:01:46,859
which are exposed and but they cop make
changes to the underlying OS

29
00:01:46,859 --> 00:01:50,499
and this is a and how the undocumented
as well

30
00:01:50,499 --> 00:01:54,639
so this all this research is purely from
a reverse engineering

31
00:01:54,639 --> 00:01:58,130
perspective said

32
00:01:58,130 --> 00:02:02,119
the the OS well the OS based on Windows
CE

33
00:02:02,119 --> 00:02:06,599
it somewhere between six and 7i think
where the code base his fault

34
00:02:06,599 --> 00:02:10,149
on Dec customizations were made for
Windows Phone

35
00:02:10,149 --> 00:02:14,370
axis paw to Sabah in you the newfound up
on

36
00:02:14,370 --> 00:02:17,640
and all the funds in the market
currently the run

37
00:02:17,640 --> 00:02:21,280
arm architecture CP is and with that

38
00:02:21,280 --> 00:02:25,490
like tibet address space process

39
00:02:25,490 --> 00:02:28,990
so I can see fogging a by virtual
address space which divide

40
00:02:28,990 --> 00:02:33,600
to take bites by the for the Connell I'm
see gigabytes for the

41
00:02:33,600 --> 00:02:37,160
use a lot and at

42
00:02:37,160 --> 00:02:40,880
when when you play updates the moment as
well to Windows Phone 7

43
00:02:40,880 --> 00:02:45,460
well that pushed out by out by the
Windows Update Service

44
00:02:45,460 --> 00:02:48,880
they required to tell the of I am with
seeing

45
00:02:48,880 --> 00:02:52,609
there is soup of over-the-air updates in
future

46
00:02:52,610 --> 00:02:55,710
but currently it's not at not
implemented

47
00:02:55,710 --> 00:02:59,540
all updates as well cost the need to be
digit code sign

48
00:02:59,540 --> 00:03:04,540
to actually execute on the device and

49
00:03:04,540 --> 00:03:07,790
so I think it's really important to
understand the application model

50
00:03:07,790 --> 00:03:12,920
how how applications are developed for
the platform what functionality

51
00:03:12,920 --> 00:03:17,360
application developers get to normal
normal developers

52
00:03:17,360 --> 00:03:20,660
at which not not the OEM's

53
00:03:20,660 --> 00:03:24,210
that they restricted to writing managed
code

54
00:03:24,210 --> 00:03:28,730
they restricted writing see shop on on a
customized theirselves life

55
00:03:28,730 --> 00:03:32,780
X in a framework I'm select you see the
additional

56
00:03:32,780 --> 00:03:37,390
security of the a the dot net se la

57
00:03:37,390 --> 00:03:41,350
all types safety in so there's no actual
native code

58
00:03:41,350 --> 00:03:45,120
allowed farrah third-party developers
its

59
00:03:45,120 --> 00:03:48,920
it's a little different from the mobile
operators and i'm noah adams

60
00:03:48,920 --> 00:03:53,880
they're actually like to write netted at
for device drives and so on

61
00:03:53,880 --> 00:03:57,019
sectors in an elevated level access to
the platform

62
00:03:57,020 --> 00:04:01,120
and there's also no no side loading

63
00:04:01,120 --> 00:04:05,440
out load applications directly to you to
Windows Phone 7

64
00:04:05,440 --> 00:04:09,190
fans unless that developer lot at

65
00:04:09,190 --> 00:04:13,230
so for testing purposes you can pop
occasions on that if they develop

66
00:04:13,230 --> 00:04:17,299
lot but otherwise all all applications
developed for the pokémon

67
00:04:17,298 --> 00:04:20,500
they need to go fight by the marketplace

68
00:04:20,500 --> 00:04:24,410
to go through a market marketplace
verification process

69
00:04:24,410 --> 00:04:28,520
I know if the verification process
passes than

70
00:04:28,520 --> 00:04:31,979
the code is signed and it's allowed to
be deployed to the device

71
00:04:31,980 --> 00:04:35,120
so the

72
00:04:35,120 --> 00:04:39,720
the security features well there's a
number of different subsystems

73
00:04:39,720 --> 00:04:44,200
at which work together to really
maintain the security of the

74
00:04:44,200 --> 00:04:48,849
up fine and days the systems that

75
00:04:48,850 --> 00:04:52,820
worked with this with this concept if

76
00:04:52,820 --> 00:04:57,349
this this overall concept a chamber
based security model

77
00:04:57,350 --> 00:05:01,630
its it quite and novel idea where
basically processes

78
00:05:01,630 --> 00:05:06,370
us on boxed and respected by the level
of trust

79
00:05:06,370 --> 00:05:09,630
required on on the device so for example

80
00:05:09,630 --> 00:05:12,990
at the top of the AM at the top for this
model you have

81
00:05:12,990 --> 00:05:17,360
they trusted computing base the trusted
computing base is where

82
00:05:17,360 --> 00:05:20,389
the Connell the condom device drivers

83
00:05:20,389 --> 00:05:23,600
all security critical functionality
actually

84
00:05:23,600 --> 00:05:27,280
and is is implemented in the truck
computing base

85
00:05:27,280 --> 00:05:31,169
so is as an attack at to compromise the
security folly

86
00:05:31,169 --> 00:05:36,580
you really have to have your code
executing in the trusted computing base

87
00:05:36,580 --> 00:05:40,050
and then you have the the elevated
rights chamber

88
00:05:40,050 --> 00:05:43,310
elevated rights is for use in

89
00:05:43,310 --> 00:05:46,800
device drivers ones which on and
McConnell

90
00:05:46,800 --> 00:05:51,530
so drivers which need to provide
globally accessible services across the

91
00:05:51,530 --> 00:05:52,780
am

92
00:05:52,780 --> 00:05:55,940
across across the device

93
00:05:55,940 --> 00:05:59,960
and then below that you have a stein
rights which is for

94
00:05:59,960 --> 00:06:04,169
it's for native code on the device which
doesn't need to provide

95
00:06:04,169 --> 00:06:07,960
globally accessible services but still
needs

96
00:06:07,960 --> 00:06:11,799
still needs met code Axis two to the
device

97
00:06:11,800 --> 00:06:14,870
and finally pop probably the most
interesting chamber

98
00:06:14,870 --> 00:06:18,980
fall for developers and security
professionals

99
00:06:18,980 --> 00:06:22,380
because the the first three are actually

100
00:06:22,380 --> 00:06:25,760
that fixed permissions sets the the OS

101
00:06:25,760 --> 00:06:30,560
the poll the security policy the OS
basic controls what

102
00:06:30,560 --> 00:06:35,600
commissions processes which I executing
in these different chambers

103
00:06:35,600 --> 00:06:38,680
have got and so these

104
00:06:38,680 --> 00:06:42,210
that fast 3 the top three stocktake

105
00:06:42,210 --> 00:06:45,970
the nation's and the the bottom on the

106
00:06:45,970 --> 00:06:49,980
the least privilege chamber LPC is
basically

107
00:06:49,980 --> 00:06:53,610
it controlled by an dynamic capabilities

108
00:06:53,610 --> 00:06:56,970
so when you develop an application for
Windows Phone 7

109
00:06:56,970 --> 00:07:00,360
you specify what capabilities the
application should

110
00:07:00,360 --> 00:07:03,690
should have these things which I
security

111
00:07:03,690 --> 00:07:07,590
critical our Privacy critical
functionality

112
00:07:07,590 --> 00:07:11,550
such as access to the camera accessed
the microphone

113
00:07:11,550 --> 00:07:15,580
networking in sao and and what these do
up

114
00:07:15,580 --> 00:07:19,400
when when the application is deployed
onto the device

115
00:07:19,400 --> 00:07:24,010
then the capabilities the past on the
Chamber's provisioned

116
00:07:24,010 --> 00:07:27,780
with that that the LPC chambers
provisioned

117
00:07:27,780 --> 00:07:31,710
with with access to this their
additional functionality

118
00:07:31,710 --> 00:07:35,820
but by default the LPC chambers really
lockdown

119
00:07:35,820 --> 00:07:42,360
and you can access any this
functionality without the capabilities

120
00:07:42,360 --> 00:07:46,630
so this this works together is well with
the AM with the code signing Michael

121
00:07:46,630 --> 00:07:50,510
on the device so binaries which shipped
in the wrong

122
00:07:50,510 --> 00:07:54,080
in the operating system at build time
there

123
00:07:54,080 --> 00:07:58,550
there in place the trusted because they
got built into the OS

124
00:07:58,550 --> 00:08:03,919
and but they still require the policy
entries to actually execute on on the

125
00:08:03,919 --> 00:08:05,419
device

126
00:08:05,419 --> 00:08:08,430
and any the bindings which he parks on
the fine

127
00:08:08,430 --> 00:08:12,900
after their the wrong is being built
then these required to be carried signs

128
00:08:12,900 --> 00:08:13,720
with about

129
00:08:13,720 --> 00:08:19,139
holiday code signing certificates so it
means if you keep up byron fine

130
00:08:19,139 --> 00:08:22,270
than while execute because a it's not
had signed

131
00:08:22,270 --> 00:08:25,310
I'm be there's no policy and you that

132
00:08:25,310 --> 00:08:28,660
specifically allowing it to execute on
fun

133
00:08:28,660 --> 00:08:31,870
and there is an exception to this which
is develop

134
00:08:31,870 --> 00:08:35,490
lot devices for testing purposes then

135
00:08:35,490 --> 00:08:38,509
they they have the ability to run LPC

136
00:08:38,509 --> 00:08:43,349
unsigned unsigned code

137
00:08:43,349 --> 00:08:49,089
so this actually maps to you the
certificate star on the device

138
00:08:49,089 --> 00:08:52,380
and so if you take a look at the this

139
00:08:52,380 --> 00:08:56,670
this CA hat which is for the trusted
computing base

140
00:08:56,670 --> 00:08:59,719
Sep code which signed with the
certificate which is

141
00:08:59,720 --> 00:09:03,360
at which chance to the TCB

142
00:09:03,360 --> 00:09:07,920
subsea a is on in to load into the
trusted computing base

143
00:09:07,920 --> 00:09:11,149
chamber there's also one

144
00:09:11,149 --> 00:09:14,660
so I'll these map to the different
chambers I'm from the chain

145
00:09:14,660 --> 00:09:19,209
base model I showed previously and the
bottom line is fall

146
00:09:19,210 --> 00:09:22,790
the least privilege chamber which is
where when you submit

147
00:09:22,790 --> 00:09:26,750
submit your applications to the
marketplace the side with this

148
00:09:26,750 --> 00:09:30,730
code signing stuff and

149
00:09:30,730 --> 00:09:35,180
this is all controlled by policy files
as well so in the policy files

150
00:09:35,180 --> 00:09:39,250
you have haha hash fingerprints

151
00:09:39,250 --> 00:09:42,250
are up the code signing certificates

152
00:09:42,250 --> 00:09:45,680
and is basically states that's if Cody
signed with the

153
00:09:45,680 --> 00:09:49,250
stiff sky shallot hash in the paint that
value

154
00:09:49,250 --> 00:09:52,350
then is authorized to you to have

155
00:09:52,350 --> 00:09:55,550
execute access into the at

156
00:09:55,550 --> 00:10:01,060
that that's a window said for that for
the TCB chamber

157
00:10:01,060 --> 00:10:06,279
so that's may be similar to you system
on normal Windows

158
00:10:06,279 --> 00:10:10,220
an unauthorized that code to loading
that the TCB chamber

159
00:10:10,220 --> 00:10:15,959
side so this is controlled in the
Connell is a module in the country

160
00:10:15,959 --> 00:10:21,190
in the Connell and its this budget
although the fire fire modular

161
00:10:21,190 --> 00:10:25,990
controls all the authentication and
authorization on the device

162
00:10:25,990 --> 00:10:30,380
it's the centralized pine centralized
gatekeeper for security

163
00:10:30,380 --> 00:10:33,920
on the phone itself and

164
00:10:33,920 --> 00:10:37,899
so uses the uses the policy framework
policy entries

165
00:10:37,899 --> 00:10:41,910
which I'll at talk about in a second to
determine

166
00:10:41,910 --> 00:10:46,410
whether determine the authentication and
authorization

167
00:10:46,410 --> 00:10:49,839
on the fire I'm uses the code signing as
well

168
00:10:49,839 --> 00:10:55,279
there's a this to critical data bases
which is used by the light the fire fire

169
00:10:55,279 --> 00:10:59,420
the county be don't fall I which is
where the accounts

170
00:10:59,420 --> 00:11:04,079
use names group at so an assignment
start

171
00:11:04,080 --> 00:11:08,290
on the policy database which is where
the policy and cheese

172
00:11:08,290 --> 00:11:11,849
and the poll the security policy for the
device start

173
00:11:11,850 --> 00:11:15,630
this is a obviously this is protected by
the test computing bases well it's in

174
00:11:15,630 --> 00:11:16,510
the Kyle

175
00:11:16,510 --> 00:11:21,350
sewn attack ads to bypass this are
compromised this to actually

176
00:11:21,350 --> 00:11:24,560
helpful controllers advice and

177
00:11:24,560 --> 00:11:28,490
there's three this three function three
functions which you use to

178
00:11:28,490 --> 00:11:32,529
loaded verify or authenticate file that
basically just checked the code is

179
00:11:32,529 --> 00:11:35,830
signed with a valid code signing
certificates

180
00:11:35,830 --> 00:11:39,020
and if Kurt sign with a valid code
signing certificates

181
00:11:39,020 --> 00:11:43,449
than and authorize a should check is
performed to ensure that the code is

182
00:11:43,450 --> 00:11:49,190
authorized load from the target from the
college and back to the target jam

183
00:11:49,190 --> 00:11:52,410
the requested target time and

184
00:11:52,410 --> 00:11:56,399
finally have the load the fire fire
provision cutie fucked occasion

185
00:11:56,399 --> 00:12:00,019
this is called when in your application
is installed to define

186
00:12:00,019 --> 00:12:05,730
all the capabilities apart the Chamber's
created the user group assignment

187
00:12:05,730 --> 00:12:09,630
is is performed I'm policy entries

188
00:12:09,630 --> 00:12:14,910
are actually am created to allow it to
run

189
00:12:14,910 --> 00:12:18,380
so this this policy framework rejected
referring to you

190
00:12:18,380 --> 00:12:22,560
and this is essential I security policy
for the fact

191
00:12:22,560 --> 00:12:26,160
there's just one security policy on on
the have

192
00:12:26,160 --> 00:12:30,120
find itself it's basically at it's
controlled

193
00:12:30,120 --> 00:12:33,870
its net it's a xml-based so the modulus
it

194
00:12:33,870 --> 00:12:37,550
when you ca when you have bills the
operating system

195
00:12:37,550 --> 00:12:40,649
there's axe about policy documents which

196
00:12:40,649 --> 00:12:43,820
database specify what and

197
00:12:43,820 --> 00:12:49,060
what security critical functionality
should be exposed from that module

198
00:12:49,060 --> 00:12:52,630
on the fact and these policy exe files

199
00:12:52,630 --> 00:12:55,820
they're all combined into one big policy
XML

200
00:12:55,820 --> 00:12:58,890
and then finally it's compiled into s

201
00:12:58,890 --> 00:13:02,360
at this centralized policy debate
database

202
00:13:02,360 --> 00:13:06,230
and this is this is for ICM for fast
lookups on the device

203
00:13:06,230 --> 00:13:10,310
said doesn't impact the performance by
at by performing all these

204
00:13:10,310 --> 00:13:14,540
are authorization and authentication

205
00:13:14,540 --> 00:13:20,209
methods and this cause protected by that
the trusted computing base as well

206
00:13:20,209 --> 00:13:26,620
said to come from my sis pH policy units
comprise the trusted computing base

207
00:13:26,620 --> 00:13:31,230
and policy entries themselves well their
work with these things called

208
00:13:31,230 --> 00:13:35,300
at international results identifies

209
00:13:35,300 --> 00:13:41,560
at irri's basically identify things like
the registry the filesystem

210
00:13:41,560 --> 00:13:45,670
resources on the five it's quite dry
nearly unspecified

211
00:13:45,670 --> 00:13:49,790
single resources I can specify

212
00:13:49,790 --> 00:13:52,829
wild-card matches so everything for
example and

213
00:13:52,829 --> 00:13:56,690
registry subkey will be matched by these

214
00:13:56,690 --> 00:14:00,060
by these irri's and

215
00:14:00,060 --> 00:14:04,050
these used in the in the policy the
policy files

216
00:14:04,050 --> 00:14:08,209
so this policy for basic states that

217
00:14:08,209 --> 00:14:14,300
that the load the fire fire and

218
00:14:14,300 --> 00:14:18,920
for slash window slash past sexy so
that's the filesystem

219
00:14:18,920 --> 00:14:21,950
of in the and

220
00:14:21,950 --> 00:14:26,910
on the five up binary it basically
states that the

221
00:14:26,910 --> 00:14:30,800
that stop buying a house execute access

222
00:14:30,800 --> 00:14:34,529
I'm I'm load access

223
00:14:34,529 --> 00:14:38,550
see the see that target chambers said

224
00:14:38,550 --> 00:14:42,300
and said so the fault for that user
account

225
00:14:42,300 --> 00:14:45,329
and for every every binary which is on
the fact

226
00:14:45,329 --> 00:14:49,660
there needs to be an Associated policy
entry stating what chamber can

227
00:14:49,660 --> 00:14:52,939
execute and I'm wats what rights

228
00:14:52,940 --> 00:14:57,829
house

229
00:14:57,829 --> 00:15:02,690
there's also an went known leon when
does he call Craig processed crap and

230
00:15:02,690 --> 00:15:04,390
you prices as well

231
00:15:04,390 --> 00:15:09,579
but septra processed rations also
protected by the security policy

232
00:15:09,579 --> 00:15:14,920
and at one process cards on a new
process by calling track process

233
00:15:14,920 --> 00:15:19,560
unless there's and security policy and
stating that it can

234
00:15:19,560 --> 00:15:22,630
so X in this example

235
00:15:22,630 --> 00:15:25,709
the Cup basically states that

236
00:15:25,709 --> 00:15:29,870
the account

237
00:15:29,870 --> 00:15:36,510
can lodge slash when does

238
00:15:36,510 --> 00:15:40,209
slashed the prague so that's the fund
our basically states that

239
00:15:40,209 --> 00:15:43,300
TM this is a capability in fact

240
00:15:43,300 --> 00:15:48,450
Laura I'd be capped by a base States
Internet Explorer icon

241
00:15:48,450 --> 00:15:52,450
spawn the phone dialer from from the
browser itself

242
00:15:52,450 --> 00:15:56,860
by any the calls from it's a great
process from the web browser

243
00:15:56,860 --> 00:16:03,540
will be signed books and be restricted
by the policy changes

244
00:16:03,540 --> 00:16:06,790
and then of course as I mentioned
resources are

245
00:16:06,790 --> 00:16:10,839
protected by the policy entries as well
so any access

246
00:16:10,839 --> 00:16:15,350
when request is made to access the
registry

247
00:16:15,350 --> 00:16:18,940
all the filesystem than a policy
decision needs to be made to determine

248
00:16:18,940 --> 00:16:20,079
whether this

249
00:16:20,079 --> 00:16:25,490
going to you sexy Donna

250
00:16:25,490 --> 00:16:30,899
so the this also I'm a number of exploit
mitigation techniques as well which is

251
00:16:30,899 --> 00:16:31,709
built into

252
00:16:31,709 --> 00:16:35,060
Windows Phone 7 he's address pay

253
00:16:35,060 --> 00:16:39,560
address space layout randomization so if
it does you are familiar with the ass a

254
00:16:39,560 --> 00:16:40,500
lot

255
00:16:40,500 --> 00:16:44,370
basic randomized the memory address
space up that process

256
00:16:44,370 --> 00:16:48,100
so that data is not predictable
locations

257
00:16:48,100 --> 00:16:51,519
and so for example if an attacker
injects

258
00:16:51,519 --> 00:16:55,880
shellcode than they won't know where
boxes in memory

259
00:16:55,880 --> 00:16:59,720
whether start back that kinda thing

260
00:16:59,720 --> 00:17:04,309
and it may just basic increases the the
difficulty far knit sock it to perform

261
00:17:04,309 --> 00:17:07,609
attack against the platform also has a

262
00:17:07,610 --> 00:17:11,770
execute never this is that not excuse
for memory protection

263
00:17:11,770 --> 00:17:15,160
so many pages are mocked us i right

264
00:17:15,160 --> 00:17:19,530
ball then they won't be executed well as
well and this is enforced by the harder

265
00:17:19,530 --> 00:17:20,549
tyres well

266
00:17:20,549 --> 00:17:23,970
and the CPU so

267
00:17:23,970 --> 00:17:28,169
as an attack ad then that that was
basically it from the security model

268
00:17:28,169 --> 00:17:31,410
I'm not going to speak about how how to
that

269
00:17:31,410 --> 00:17:35,330
what bypass the security model how to
perform a tax on the platform

270
00:17:35,330 --> 00:17:40,178
there's a number of different stages
which you need to go through to actually

271
00:17:40,179 --> 00:17:44,000
compromise platform because of all the
security protections

272
00:17:44,000 --> 00:17:47,200
and so the first thing I really want to
do to

273
00:17:47,200 --> 00:17:50,370
with to enable our parting and

274
00:17:50,370 --> 00:17:54,919
there's no way at the moment see to do
any kind debugging on the device

275
00:17:54,919 --> 00:17:59,270
ketzel all I kinda normal stuff for
debugging has been stripped out

276
00:17:59,270 --> 00:18:03,000
device and so

277
00:18:03,000 --> 00:18:06,890
day the only way I father security
researcher care

278
00:18:06,890 --> 00:18:10,059
actually find a way of enabling

279
00:18:10,059 --> 00:18:14,620
crusher fighting that's a if you've ever
seen Doctor Watson pop-up

280
00:18:14,620 --> 00:18:19,470
windows when a process crashes its
equivalent if that's a post-mortem trash

281
00:18:19,470 --> 00:18:23,380
trash them the problem is you've got 128
K

282
00:18:23,380 --> 00:18:28,040
information is trash dumps you have the
registers you have the stock frame

283
00:18:28,040 --> 00:18:32,570
you have a few bites around instruction
pointer the program counter in this case

284
00:18:32,570 --> 00:18:35,770
I am makes it quite tricky to exploit

285
00:18:35,770 --> 00:18:39,190
just working from crackdowns signs with
this restricted him out

286
00:18:39,190 --> 00:18:42,590
nation I'm the pro

287
00:18:42,590 --> 00:18:46,080
this in the problem is well is if even

288
00:18:46,080 --> 00:18:49,549
trash dumpster enables are you well even
taken it

289
00:18:49,549 --> 00:18:53,100
I you can enable crash them being and

290
00:18:53,100 --> 00:18:56,510
you can actually access the crash times
because

291
00:18:56,510 --> 00:18:59,660
in your application you're respected you
the least

292
00:18:59,660 --> 00:19:03,080
deadlock privileged chamber at least for
this chamber

293
00:19:03,080 --> 00:19:06,530
so the sandbox stops you from accessing
me and

294
00:19:06,530 --> 00:19:10,950
axis in the crash dumps it's necessary
to find a way of actually breaking out

295
00:19:10,950 --> 00:19:12,309
the sign books

296
00:19:12,309 --> 00:19:15,540
to access this file system path to get
the trash dumps

297
00:19:15,540 --> 00:19:20,309
of I'm say camp farm see can load them
up and windy BG

298
00:19:20,309 --> 00:19:23,660
start looking at why why prices crashed

299
00:19:23,660 --> 00:19:27,490
iraq iraq's like fart and so this

300
00:19:27,490 --> 00:19:31,799
this involved abusing a capability a
totally undocumented capability

301
00:19:31,799 --> 00:19:33,570
differences the

302
00:19:33,570 --> 00:19:36,678
to the OEM's to the handset
manufacturers

303
00:19:36,679 --> 00:19:40,240
called ID captain drop services and

304
00:19:40,240 --> 00:19:44,200
this is actually available in the public
development STK

305
00:19:44,200 --> 00:19:47,570
you can you can use this functionality
I'm

306
00:19:47,570 --> 00:19:51,240
by using reflection dotnet reflection an
instantiation

307
00:19:51,240 --> 00:19:56,090
objects on the fine a name based abusing
this capability

308
00:19:56,090 --> 00:20:00,918
and REM device drivers to access the
file system

309
00:20:00,919 --> 00:20:04,390
so that stage you've got you've got
crushed them thing working

310
00:20:04,390 --> 00:20:08,650
where you really want to I you really
want to be able to you

311
00:20:08,650 --> 00:20:12,330
do static reverse reverse engineering of
the binaries

312
00:20:12,330 --> 00:20:15,799
to look at the assembly language code
I'm fine for me abilities

313
00:20:15,799 --> 00:20:19,280
any assembly by reading and sir

314
00:20:19,280 --> 00:20:23,700
in order to do that well Windows CE
modules that not normal P

315
00:20:23,700 --> 00:20:28,419
file formats basically requires
combining the sections

316
00:20:28,419 --> 00:20:31,760
together adding a PE header to that

317
00:20:31,760 --> 00:20:35,760
and then went when it's in the correct
format you can load the code section

318
00:20:35,760 --> 00:20:37,120
sign up in

319
00:20:37,120 --> 00:20:40,289
and I the Pro and you can start reverse
engineering and looking for

320
00:20:40,289 --> 00:20:43,350
better sir

321
00:20:43,350 --> 00:20:47,650
at this stage and you what you really
want an initial vulnerability some

322
00:20:47,650 --> 00:20:48,669
weights guess

323
00:20:48,669 --> 00:20:52,410
code execution on by say you might find

324
00:20:52,410 --> 00:20:56,059
you might find vulnerabilities for
example in the web browser

325
00:20:56,059 --> 00:21:00,220
but even if you gain control over the
the program can set and

326
00:21:00,220 --> 00:21:04,929
the instruction pie what the inspection
which is going to be a

327
00:21:04,929 --> 00:21:08,169
next executed than the

328
00:21:08,169 --> 00:21:11,910
the problem is that you still have to
bypass the hassle %ah

329
00:21:11,910 --> 00:21:15,070
I'm not excuse for memory protection
well

330
00:21:15,070 --> 00:21:19,020
because you don't know where your data
is in memory cuz yes a lot

331
00:21:19,020 --> 00:21:23,340
you also even if you can find your data
shellcode which injected

332
00:21:23,340 --> 00:21:26,928
then you still wouldn't be able to
executed because you the memory paging

333
00:21:26,929 --> 00:21:27,660
mocked is

334
00:21:27,660 --> 00:21:32,200
not executed see you need a
vulnerability to actually I'm

335
00:21:32,200 --> 00:21:37,110
to get around that and unfortunately
that vulnerability is not patched

336
00:21:37,110 --> 00:21:41,299
the moment by Microsoft so I cannot
disclose their Salah

337
00:21:41,299 --> 00:21:44,620
at Daz lax and ability at the moment

338
00:21:44,620 --> 00:21:48,169
but since that's that fix that now
publishing

339
00:21:48,169 --> 00:21:52,510
visor that so at that point you've
gained code execution in the least

340
00:21:52,510 --> 00:21:53,030
privilege

341
00:21:53,030 --> 00:21:56,309
chamber but the less privileged same is
not a great pic is

342
00:21:56,309 --> 00:21:59,410
you basically restricted to what the
functionality

343
00:21:59,410 --> 00:22:02,730
at which the application you exploited
Haas

344
00:22:02,730 --> 00:22:06,370
its sign books you really want to break
out that sandbox

345
00:22:06,370 --> 00:22:09,890
maxis the sensitive mation on the fact

346
00:22:09,890 --> 00:22:15,210
and so outside outside a Tucson Boxwell

347
00:22:15,210 --> 00:22:19,090
you have the things like that amassed
database the

348
00:22:19,090 --> 00:22:23,730
the sensitive information see me some
kinda privilege escalation as well

349
00:22:23,730 --> 00:22:28,289
to to break out at the sign books and
give you either Tzvi

350
00:22:28,289 --> 00:22:33,510
elevated access to the active device

351
00:22:33,510 --> 00:22:38,190
and so just a little TCI I had a feeling
that set

352
00:22:38,190 --> 00:22:41,440
doan's for introducing variabilities on

353
00:22:41,440 --> 00:22:44,440
on the platform because a previous

354
00:22:44,440 --> 00:22:49,700
big for two reasons really one that they
have elevated access to the popcorn

355
00:22:49,700 --> 00:22:53,740
and and secondly that we perform though
the research on

356
00:22:53,740 --> 00:22:57,240
on and ride for example where

357
00:22:57,240 --> 00:23:00,530
where the OEM's hide interviews fund
abilities

358
00:23:00,530 --> 00:23:03,710
on the platform father for their
handsets

359
00:23:03,710 --> 00:23:06,789
so an Android we we discovered that
there was I am

360
00:23:06,789 --> 00:23:09,799
hasty said implemented this

361
00:23:09,799 --> 00:23:13,150
install Commission on the web browser
for some reason

362
00:23:13,150 --> 00:23:17,059
I think to do flash dates and but

363
00:23:17,059 --> 00:23:20,780
the its it's basically a case in
bypassing miss

364
00:23:20,780 --> 00:23:24,490
Katie modeled see to provide additional
functionality

365
00:23:24,490 --> 00:23:28,690
but also weakens the scary model on the
device

366
00:23:28,690 --> 00:23:31,970
there's also the case if sound recorder
them

367
00:23:31,970 --> 00:23:35,150
HTC implementing their own sound
recorder

368
00:23:35,150 --> 00:23:38,890
and now on Android I think that you need
a

369
00:23:38,890 --> 00:23:42,340
you need the permission to actually hot
to

370
00:23:42,340 --> 00:23:45,379
access sound recording functionality
it's a scary

371
00:23:45,380 --> 00:23:48,390
critical at think

372
00:23:48,390 --> 00:23:51,740
but page to see it implemented their own
sound recorder

373
00:23:51,740 --> 00:23:55,630
which did just that if you had a
malicious application Android

374
00:23:55,630 --> 00:24:00,000
the naked issue cuts on using mass and
using it sa PC

375
00:24:00,000 --> 00:24:04,169
and points and finally the HTC loggers
well

376
00:24:04,169 --> 00:24:07,669
this made news recently where they've
been tracking quite

377
00:24:07,669 --> 00:24:12,250
am a large amount mation from from the
end-user

378
00:24:12,250 --> 00:24:15,840
privacy critical information so

379
00:24:15,840 --> 00:24:19,299
I thought about applying this to you to
Windows Phone 7

380
00:24:19,299 --> 00:24:24,760
seawall REM and abilities were actually
introduced

381
00:24:24,760 --> 00:24:29,919
and so I really wanted to stop by

382
00:24:29,919 --> 00:24:33,049
and looking at way affected fingerprint
devices

383
00:24:33,049 --> 00:24:36,450
time what oh yeah I'm what hun said they
actually were

384
00:24:36,450 --> 00:24:40,710
and then that way you could deployed
device-specific payload

385
00:24:40,710 --> 00:24:45,940
it wouldn't require writing next flight
to talk to all the different devices

386
00:24:45,940 --> 00:24:49,190
depending on what device fingerprint
then you can at

387
00:24:49,190 --> 00:24:52,289
deploy payload for that device

388
00:24:52,289 --> 00:24:56,510
and the way i'd thought but in this was

389
00:24:56,510 --> 00:25:00,990
it turns out that the user agents the
israeli actually exposed what the

390
00:25:00,990 --> 00:25:02,159
devices

391
00:25:02,159 --> 00:25:07,840
I'm so this one for example is a hedge
HTC hd7

392
00:25:07,840 --> 00:25:11,530
at this one something on the a

393
00:25:11,530 --> 00:25:15,580
sevens an attacker can targets can
perform all

394
00:25:15,580 --> 00:25:19,799
targeted attacks against uses are of
these devices

395
00:25:19,799 --> 00:25:26,799
for some reason also dispose that
running on picture

396
00:25:29,120 --> 00:25:32,340
so I explained a web browser
vulnerability at

397
00:25:32,340 --> 00:25:36,030
game today an initial code execution on
the device

398
00:25:36,030 --> 00:25:39,280
and say he can say the program

399
00:25:39,280 --> 00:25:42,320
says here said there's a just as that

400
00:25:42,320 --> 00:25:45,850
a value to demonstrate controllers s and

401
00:25:45,850 --> 00:25:49,990
but down after this you really need to
bypass the ass a lot the non executed

402
00:25:49,990 --> 00:25:51,669
memory protection

403
00:25:51,669 --> 00:25:55,640
at you to get to get your initial code
execution

404
00:25:55,640 --> 00:26:00,830
as I mentioned and that some parts to
the moment side

405
00:26:00,830 --> 00:26:05,370
Chur

406
00:26:05,370 --> 00:26:08,390
yet sewed up that's the dots a crush
them

407
00:26:08,390 --> 00:26:13,070
which I took of the device I and and
transferred it to my piece a

408
00:26:13,070 --> 00:26:17,899
so I used them I used business no
sockets afar either and

409
00:26:17,900 --> 00:26:21,190
I'm and Windows Phone 7 nama sockets up

410
00:26:21,190 --> 00:26:27,010
you but you can do hedge hedge yet

411
00:26:27,010 --> 00:26:30,090
yet yet

412
00:26:30,090 --> 00:26:34,159
yet I'm this research is well was
performed before manga

413
00:26:34,159 --> 00:26:37,929
I'm so this is like no to Anzac and

414
00:26:37,929 --> 00:26:41,419
but yet in my case I used HTTP

415
00:26:41,419 --> 00:26:44,610
it is transferred the crash dumps from
from the device

416
00:26:44,610 --> 00:26:47,929
I post them back to my webserver and
then west

417
00:26:47,929 --> 00:26:51,340
once I downloaded them from that and
then using that

418
00:26:51,340 --> 00:26:54,510
and I you can load them up and win DVD

419
00:26:54,510 --> 00:26:58,520
on on a normal desktop PC and start
looking at these

420
00:26:58,520 --> 00:27:01,799
these times so lucky times a bus

421
00:27:01,799 --> 00:27:05,280
as mentioned as well as the context and
so

422
00:27:05,280 --> 00:27:09,418
days you've got no access to any
information the heap

423
00:27:09,419 --> 00:27:14,760
at a and most the memory pages 128
kilobytes in this done

424
00:27:14,760 --> 00:27:18,590
so you've got the Reg this stock frame
quite tricky to write an exploit with

425
00:27:18,590 --> 00:27:20,120
just the registers

426
00:27:20,120 --> 00:27:23,159
a stack frame where and where track and
sometimes have any

427
00:27:23,159 --> 00:27:27,120
halfway track as well

428
00:27:27,120 --> 00:27:30,419
and sir the

429
00:27:30,419 --> 00:27:34,400
the OEM capabilities am I started exact
examining what

430
00:27:34,400 --> 00:27:37,710
REM's getting and they had the specific
at

431
00:27:37,710 --> 00:27:41,179
capability called ID capping drop
services

432
00:27:41,179 --> 00:27:46,539
its it's used for novel applications to
access device drivers

433
00:27:46,539 --> 00:27:50,879
and additional services on the device
it's telling documented

434
00:27:50,880 --> 00:27:55,370
in the public at the public STK there's
no code for this

435
00:27:55,370 --> 00:27:59,809
but you can use a reflection are you can
take the Assembly's

436
00:27:59,809 --> 00:28:03,250
of the phone I'm use those link yes
those

437
00:28:03,250 --> 00:28:06,990
name caller functionality and

438
00:28:06,990 --> 00:28:10,470
so this is the case really instantiating
the right objects

439
00:28:10,470 --> 00:28:15,250
using the comp bridge and I'm I'm
creating this manifest file

440
00:28:15,250 --> 00:28:18,330
WP interrupt manifest

441
00:28:18,330 --> 00:28:22,110
in the archive this pace and this allows
you to

442
00:28:22,110 --> 00:28:27,870
see right native code and so I started
examining the device drivers which

443
00:28:27,870 --> 00:28:31,500
which were implemented on my hd7 fine

444
00:28:31,500 --> 00:28:35,200
and turns out that something had
implemented

445
00:28:35,200 --> 00:28:39,220
device driver which gives you average
reading now between

446
00:28:39,220 --> 00:28:42,620
by access you the entire memory space in
the Pro

447
00:28:42,620 --> 00:28:46,960
process that includes the condo memory
space as well

448
00:28:46,960 --> 00:28:50,289
sir you remember the yet day

449
00:28:50,289 --> 00:28:53,640
Connell that trusted computing base is
mcconnell

450
00:28:53,640 --> 00:28:57,559
so if you've got to read an opportune
right excessive kind of memory

451
00:28:57,559 --> 00:29:02,110
then there's a there's a high chance
that you can at Gate code execution and

452
00:29:02,110 --> 00:29:02,820
the context

453
00:29:02,820 --> 00:29:06,770
the Cardinal as well and bypass the that

454
00:29:06,770 --> 00:29:11,139
the protections implemented in the
trusted computing base

455
00:29:11,140 --> 00:29:14,570
so the way I did it was to you schiesser
so it

456
00:29:14,570 --> 00:29:17,760
this is the case Yvonne opening applied
device

457
00:29:17,760 --> 00:29:20,980
hun dil Caesarea to the device driver

458
00:29:20,980 --> 00:29:24,940
and crate instructed me

459
00:29:24,940 --> 00:29:27,940
to instruct with the with the road

460
00:29:27,940 --> 00:29:31,510
with the read or write access specifying
the address

461
00:29:31,510 --> 00:29:35,500
and specify what you want to write
address an incall in the device i/o

462
00:29:35,500 --> 00:29:36,270
control

463
00:29:36,270 --> 00:29:39,360
and analyzed do followed by rights

464
00:29:39,360 --> 00:29:43,260
anyway anywhere in memory space

465
00:29:43,260 --> 00:29:48,580
and site up how can you turn out you
read and write access and see you

466
00:29:48,580 --> 00:29:51,809
code execution the context the Kyle

467
00:29:51,809 --> 00:29:54,990
and on on Windows that you have

468
00:29:54,990 --> 00:29:59,340
on normal I went to it so you have to
pee there's a similar structure on when

469
00:29:59,340 --> 00:29:59,799
this

470
00:29:59,799 --> 00:30:02,970
it's called the K data struct and every
sides

471
00:30:02,970 --> 00:30:06,190
its affects memory address every act

472
00:30:06,190 --> 00:30:09,340
and every process so

473
00:30:09,340 --> 00:30:12,970
this is quite an old-school method you
can basically

474
00:30:12,970 --> 00:30:16,669
you can basically patch system call
handlers so that point

475
00:30:16,669 --> 00:30:20,240
an attack controlled bit cud and then

476
00:30:20,240 --> 00:30:23,370
when the system polish made then that
the

477
00:30:23,370 --> 00:30:27,090
code to be executed in the context to
the Kyle I'm your privilege escalation

478
00:30:27,090 --> 00:30:28,880
will succeed

479
00:30:28,880 --> 00:30:32,919
so and this is the case using the read

480
00:30:32,919 --> 00:30:35,990
the opportunity method to dump out data

481
00:30:35,990 --> 00:30:40,450
in its heyday struct locate the
necessary function pointers

482
00:30:40,450 --> 00:30:45,559
the point is to the system call table
and

483
00:30:45,559 --> 00:30:49,070
yeah and then patch those pointers

484
00:30:49,070 --> 00:30:53,049
these are implemented using API set as
well

485
00:30:53,049 --> 00:30:56,668
and so it's just a case a patch in the
function pointers

486
00:30:56,669 --> 00:31:01,419
I'm teacher in them the attack country
shellcode then you have code execution

487
00:31:01,419 --> 00:31:04,700
and have

488
00:31:04,700 --> 00:31:08,270
so I was when you release on abilities
were which is

489
00:31:08,270 --> 00:31:12,120
limited to you a hasty 7 devices

490
00:31:12,120 --> 00:31:15,299
it turns out that some sand had
implemented in abet

491
00:31:15,299 --> 00:31:18,970
functionality themselves 5 device
provisioning those devices

492
00:31:18,970 --> 00:31:22,779
allowing them to make configuration
changes to the device

493
00:31:22,779 --> 00:31:26,470
and so I added to the binaries fault the
something as well

494
00:31:26,470 --> 00:31:30,590
I located a direct you to a bustling
wanna something binaries

495
00:31:30,590 --> 00:31:35,289
at which it's meant to be a device
position x amount bytes

496
00:31:35,289 --> 00:31:39,129
and d but the problem is

497
00:31:39,130 --> 00:31:43,190
Kat you have a job younger right access
to this directory the Sun but

498
00:31:43,190 --> 00:31:46,630
that prevents you from having access to
this directory

499
00:31:46,630 --> 00:31:50,520
so you need to I'm

500
00:31:50,520 --> 00:31:54,070
you need to be able to you rights the
yet to

501
00:31:54,070 --> 00:31:58,120
to write see see you can use the direct
you to us and ability to write to a

502
00:31:58,120 --> 00:32:01,450
directory which you have control up

503
00:32:01,450 --> 00:32:04,940
so this is a case if constructing a
posture director you

504
00:32:04,940 --> 00:32:08,190
right axis deer and writing

505
00:32:08,190 --> 00:32:11,340
that XML problem is you don't have

506
00:32:11,340 --> 00:32:15,649
you cock traits new processes because
that policy restrictions

507
00:32:15,649 --> 00:32:19,429
turns out something is up actually
implemented a

508
00:32:19,429 --> 00:32:23,779
a device driver training processes

509
00:32:23,779 --> 00:32:27,360
so this case what to do well you can
extract sensitive information and use

510
00:32:27,360 --> 00:32:27,809
drop

511
00:32:27,809 --> 00:32:32,918
Rick for example maybe disable the
policies are certificate checking

512
00:32:32,919 --> 00:32:36,840
if you are my rights and maybe you want
your application deployed later

513
00:32:36,840 --> 00:32:40,789
and would've been nice if the US Code

514
00:32:40,789 --> 00:32:45,090
that together on this policy fake and
certificate

515
00:32:45,090 --> 00:32:48,210
fake a that since I like the gym
functionality

516
00:32:48,210 --> 00:32:51,460
me license Baker

517
00:32:51,460 --> 00:32:55,029
they are on

518
00:32:55,029 --> 00:32:59,279
popped off fixing develop law

519
00:32:59,279 --> 00:33:03,919
I'll with

520
00:33:03,919 --> 00:33:07,309
and you know is that these functions
have the same name the gem

521
00:33:07,309 --> 00:33:12,279
functions controlling yet the there

522
00:33:12,279 --> 00:33:19,279
so did to pick

523
00:33:35,269 --> 00:33:39,009
okay so this is me loading the web
browser going to a

524
00:33:39,009 --> 00:33:42,249
going to a page which is good exploit
Manalang I'm

525
00:33:42,249 --> 00:33:45,769
which my malicious website the web
server

526
00:33:45,769 --> 00:33:49,669
tops delivering the exploit payload on
the bottom there's

527
00:33:49,669 --> 00:33:52,999
Explorer on that I'm

528
00:33:52,999 --> 00:33:57,549
the Explorer handler receive a file from
the phone with good excuse for

529
00:33:57,549 --> 00:34:00,609
I'm tet that transferred but the

530
00:34:00,609 --> 00:34:04,149
back to the attack over the wifi link
I'm

531
00:34:04,149 --> 00:34:11,149
and a second missions the you should see
this never have

532
00:34:11,470 --> 00:34:18,470
the browser transferred back to the
attack so

533
00:34:24,349 --> 00:34:27,460
mango well nine goes the the latest
version

534
00:34:27,460 --> 00:34:31,599
it restricts the method I used to write
debug and about the exploits

535
00:34:31,599 --> 00:34:35,139
but ultimately the designs still allows
the Iams to make

536
00:34:35,139 --> 00:34:38,839
to implement these these security

537
00:34:38,839 --> 00:34:42,730
and these that risky functionality

538
00:34:42,730 --> 00:34:47,589
am so it's really up to Microsoft to
make sure the Iams code is

539
00:34:47,589 --> 00:34:50,909
same code quality out as the base
operating system

540
00:34:50,909 --> 00:34:54,049
my conclusions on this really like

541
00:34:54,049 --> 00:34:57,880
it's a strong triangular security model
it it clear that a lot of thought has

542
00:34:57,880 --> 00:34:58,650
been putting

543
00:34:58,650 --> 00:35:02,410
this security model requires an attack
it to go through multiple different

544
00:35:02,410 --> 00:35:04,049
stages before they came

545
00:35:04,049 --> 00:35:07,359
exploit the platform also that

546
00:35:07,359 --> 00:35:11,069
shows an attack in these multiple
vulnerabilities I'm exploit mitigation

547
00:35:11,069 --> 00:35:12,220
bypasses to attack

548
00:35:12,220 --> 00:35:15,309
on at shows that

549
00:35:15,309 --> 00:35:19,099
an attack can use oh yeah I'm fine
abilities if say

550
00:35:19,099 --> 00:35:23,339
specifically want to talk handset they
can go far the lowest hanging fruit

551
00:35:23,339 --> 00:35:26,680
they don't need to go Microsoft code
base they can go far

552
00:35:26,680 --> 00:35:30,220
REM's code if it's less echoed quality
standard

553
00:35:30,220 --> 00:35:33,670
and letter there any questions

