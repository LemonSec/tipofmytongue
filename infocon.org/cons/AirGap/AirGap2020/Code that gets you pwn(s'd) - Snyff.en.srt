1
00:00:00,030 --> 00:00:13,290
next up we have sniff from Ventus table

2
00:00:03,240 --> 00:00:15,210
and and so pentose elaborate talk we've

3
00:00:13,290 --> 00:00:18,330
heard sniff on the third crab podcast

4
00:00:15,210 --> 00:00:22,650
I've done a bunch of pen tester lab I

5
00:00:18,330 --> 00:00:25,049
highly recommend it some free stuff you

6
00:00:22,650 --> 00:00:28,198
can try and then if you liked it you can

7
00:00:25,050 --> 00:00:33,019
you can go on but let's get on the way

8
00:00:28,199 --> 00:00:33,019
with the pen testing ninja one sniff

9
00:00:33,079 --> 00:00:40,290
hello everyone

10
00:00:35,180 --> 00:00:43,320
ok that's outfit DNZ you look very

11
00:00:40,290 --> 00:00:45,480
pretty so for people who don't know

12
00:00:43,320 --> 00:00:49,530
what's behind me it's like an old TV

13
00:00:45,480 --> 00:00:50,209
show Dark Angel part of it so my name is

14
00:00:49,530 --> 00:00:53,430
Louie

15
00:00:50,210 --> 00:00:55,289
I work I do like this thing named Penta

16
00:00:53,430 --> 00:00:57,989
Sara but you may have heard of it but

17
00:00:55,289 --> 00:01:02,520
the ends I recommend and today I'm gonna

18
00:00:57,989 --> 00:01:05,780
talk about code that gets you poor so

19
00:01:02,520 --> 00:01:08,850
basically my job is to teach people

20
00:01:05,780 --> 00:01:12,510
where bad security or OPSEC basically

21
00:01:08,850 --> 00:01:16,408
and by doing that I'll come across a lot

22
00:01:12,510 --> 00:01:18,390
of bugs and how people find them our

23
00:01:16,409 --> 00:01:21,390
people fix them and our people exploit

24
00:01:18,390 --> 00:01:22,950
them and I also do like especially

25
00:01:21,390 --> 00:01:24,770
during lockdown I do a lot of code

26
00:01:22,950 --> 00:01:28,350
review because that's something that

27
00:01:24,770 --> 00:01:30,030
helped me relax weirdly enough so I do a

28
00:01:28,350 --> 00:01:33,869
lot of contributors

29
00:01:30,030 --> 00:01:36,119
some interesting patterns and I wanted

30
00:01:33,869 --> 00:01:41,340
to share them so that's where these

31
00:01:36,119 --> 00:01:46,049
talks come from so the first one is in

32
00:01:41,340 --> 00:01:48,630
golang and that's handler to manage when

33
00:01:46,049 --> 00:01:52,530
someone is uploading a file so basically

34
00:01:48,630 --> 00:01:54,619
what you do is you upload a file we've

35
00:01:52,530 --> 00:01:57,299
you get the file from form file and

36
00:01:54,619 --> 00:01:59,280
that's the parameter file if you don't

37
00:01:57,299 --> 00:02:02,790
get anything you print you get an error

38
00:01:59,280 --> 00:02:05,159
message with print and then then you cry

39
00:02:02,790 --> 00:02:07,469
to defer to close the file so that's the

40
00:02:05,159 --> 00:02:10,050
way in going to say like Oh after

41
00:02:07,469 --> 00:02:12,940
everything is done just clean up called

42
00:02:10,050 --> 00:02:16,210
colvett closed method when

43
00:02:12,940 --> 00:02:19,180
call IOU TL temp file and pass to

44
00:02:16,210 --> 00:02:21,460
argument / 10 and that's where we want

45
00:02:19,180 --> 00:02:24,610
the file to go and handler dot file name

46
00:02:21,460 --> 00:02:27,190
but the name but we got from the HTTP

47
00:02:24,610 --> 00:02:30,400
request if we get an error we return

48
00:02:27,190 --> 00:02:33,850
when we read everything from the file

49
00:02:30,400 --> 00:02:36,700
and we copy that in the file we got from

50
00:02:33,850 --> 00:02:39,130
10 5 and if everything goes well we

51
00:02:36,700 --> 00:02:42,820
close the 10 file and we successfully

52
00:02:39,130 --> 00:02:44,620
uploaded the file so what looks pretty

53
00:02:42,820 --> 00:02:46,170
safe right there's nothing like really

54
00:02:44,620 --> 00:02:50,650
really bad about it

55
00:02:46,170 --> 00:02:53,019
however if you look at 10 file you can

56
00:02:50,650 --> 00:02:55,300
see that in the documentation the 10

57
00:02:53,020 --> 00:02:58,120
file is gonna cry the file in the first

58
00:02:55,300 --> 00:02:59,890
arguments dear and it's gonna and you

59
00:02:58,120 --> 00:03:02,380
can pass a string to say like ok I want

60
00:02:59,890 --> 00:03:07,329
this new 10 fight to look something like

61
00:03:02,380 --> 00:03:12,370
I don't know file - 1 2 3 4 - gee peg or

62
00:03:07,330 --> 00:03:16,060
file - some random number but a 10-5

63
00:03:12,370 --> 00:03:17,590
will pick for you - something else and

64
00:03:16,060 --> 00:03:20,200
you can use the start for the wild-card

65
00:03:17,590 --> 00:03:22,150
to decide like ow where the random

66
00:03:20,200 --> 00:03:24,720
number will be put so it looks pretty

67
00:03:22,150 --> 00:03:28,870
sad if and when you can use F dot name

68
00:03:24,720 --> 00:03:31,870
to get a path of the file the problem

69
00:03:28,870 --> 00:03:33,310
comes from the fact that if you use 10

70
00:03:31,870 --> 00:03:36,340
file and you see like oh I want my file

71
00:03:33,310 --> 00:03:38,110
to be created in / 10 but as far as the

72
00:03:36,340 --> 00:03:40,480
file name you put like a directory

73
00:03:38,110 --> 00:03:42,910
traversal and you put like dot star

74
00:03:40,480 --> 00:03:44,980
slash dot dot slash dot dot slash root

75
00:03:42,910 --> 00:03:47,560
slash food at startup specifics for

76
00:03:44,980 --> 00:03:49,600
example the file will be created in

77
00:03:47,560 --> 00:03:53,200
slash fruit slash through that something

78
00:03:49,600 --> 00:03:54,700
and that's pretty surprising is as a

79
00:03:53,200 --> 00:03:56,980
developer you for like also file you are

80
00:03:54,700 --> 00:03:58,570
gonna go in slash temp right so I got

81
00:03:56,980 --> 00:04:00,790
something you need to be aware of when

82
00:03:58,570 --> 00:04:02,880
you're developing going application and

83
00:04:00,790 --> 00:04:06,579
using temp file so of a problem is that

84
00:04:02,880 --> 00:04:09,130
in golang in most let's say in most

85
00:04:06,580 --> 00:04:09,580
frameworks like Express or rails or

86
00:04:09,130 --> 00:04:12,670
things like that

87
00:04:09,580 --> 00:04:16,330
when you have a directory traversal in

88
00:04:12,670 --> 00:04:18,399
the file name like we have here the

89
00:04:16,329 --> 00:04:20,079
framework will just give you base name

90
00:04:18,399 --> 00:04:21,880
of the file name that was provided so

91
00:04:20,079 --> 00:04:22,990
you can do dot slash your way out of

92
00:04:21,880 --> 00:04:25,630
that

93
00:04:22,990 --> 00:04:26,470
but in golang it's not a framework is

94
00:04:25,630 --> 00:04:27,670
just program

95
00:04:26,470 --> 00:04:31,180
language so they give you like the

96
00:04:27,670 --> 00:04:34,510
finance trader as it was sent by the

97
00:04:31,180 --> 00:04:36,490
user so that's why this kind of issue

98
00:04:34,510 --> 00:04:38,620
come can happen

99
00:04:36,490 --> 00:04:40,870
and you need to be aware of that because

100
00:04:38,620 --> 00:04:42,340
if you use Express and move to Golan you

101
00:04:40,870 --> 00:04:44,170
may be surprised by this behavior

102
00:04:42,340 --> 00:04:46,599
because you have never seen that kind of

103
00:04:44,170 --> 00:04:49,930
bugs before and saying if you come from

104
00:04:46,600 --> 00:04:52,870
like a writing background so here yep

105
00:04:49,930 --> 00:04:55,030
and so I reported that and it's fixed in

106
00:04:52,870 --> 00:04:58,210
recent version of golang so they were

107
00:04:55,030 --> 00:04:59,619
like a bit of back and forth with going

108
00:04:58,210 --> 00:05:01,510
development team because if are like oh

109
00:04:59,620 --> 00:05:03,940
that's not the pattern that we see often

110
00:05:01,510 --> 00:05:07,180
that's not a big issue inside but at the

111
00:05:03,940 --> 00:05:09,010
end they still manage to agree and

112
00:05:07,180 --> 00:05:10,630
change fees behavior to say like ok

113
00:05:09,010 --> 00:05:14,140
avais the dot slash we should probably

114
00:05:10,630 --> 00:05:17,050
like that's not a bad pattern but that's

115
00:05:14,140 --> 00:05:19,870
very surprising if we look at other

116
00:05:17,050 --> 00:05:22,330
languages like Python descent bad

117
00:05:19,870 --> 00:05:24,460
behavior I didn't report this one yet

118
00:05:22,330 --> 00:05:27,400
but I should probably do it so if you do

119
00:05:24,460 --> 00:05:29,289
10 5.9 temporary file and you want it in

120
00:05:27,400 --> 00:05:32,229
slash temp and you pass a prefix of the

121
00:05:29,290 --> 00:05:34,990
dot slash route your file will end up in

122
00:05:32,230 --> 00:05:36,460
slash route so if you think of thing

123
00:05:34,990 --> 00:05:39,820
like uploading a web shell somewhere

124
00:05:36,460 --> 00:05:42,039
that's pretty handy if we look at will

125
00:05:39,820 --> 00:05:44,380
be will be when you pass so the first

126
00:05:42,040 --> 00:05:46,750
argument is pattern and the second one

127
00:05:44,380 --> 00:05:48,820
is a directory if you pass a directory

128
00:05:46,750 --> 00:05:50,290
traversal as part of the pattern it's

129
00:05:48,820 --> 00:05:54,040
gonna remove the slash and create your

130
00:05:50,290 --> 00:05:56,130
file in /tmp where you wanted it so yeah

131
00:05:54,040 --> 00:05:58,240
so that's kind of like surprising

132
00:05:56,130 --> 00:05:59,860
behaviors that I really enjoy when doing

133
00:05:58,240 --> 00:06:02,470
code review and that's something where

134
00:05:59,860 --> 00:06:05,440
you just like fire like a nya B shell or

135
00:06:02,470 --> 00:06:07,450
Python shell and you start like trying

136
00:06:05,440 --> 00:06:09,160
and see what works and what doesn't and

137
00:06:07,450 --> 00:06:10,719
first one are pretty interesting because

138
00:06:09,160 --> 00:06:12,100
that's kind of tricky bugs and if you

139
00:06:10,720 --> 00:06:15,150
quickly read the code you can't find

140
00:06:12,100 --> 00:06:19,660
them you just need to go into deep

141
00:06:15,150 --> 00:06:22,390
understanding of the code another one so

142
00:06:19,660 --> 00:06:24,280
that's really command so here we have a

143
00:06:22,390 --> 00:06:27,039
Python application but that could work

144
00:06:24,280 --> 00:06:29,770
in any language so we're gonna get a

145
00:06:27,040 --> 00:06:32,650
endpoint named fetch and we're gonna get

146
00:06:29,770 --> 00:06:34,960
a URL parameter named e to you hell and

147
00:06:32,650 --> 00:06:37,539
if you use a URL starts with pandas

148
00:06:34,960 --> 00:06:40,120
Telecom we're gonna fetch that data so

149
00:06:37,539 --> 00:06:42,340
you can think of these as

150
00:06:40,120 --> 00:06:45,250
Paul wanted to avoid server-side request

151
00:06:42,340 --> 00:06:47,460
forgeries of they put this jackass UFL

152
00:06:45,250 --> 00:06:49,720
that starts with when desolate that car

153
00:06:47,460 --> 00:06:51,729
most of the time when you doing coverage

154
00:06:49,720 --> 00:06:53,350
it's not as obvious like that you need

155
00:06:51,729 --> 00:06:54,729
to look in the configuration file to

156
00:06:53,350 --> 00:06:56,500
know like what's the actual value of

157
00:06:54,729 --> 00:06:58,000
Pentastar that kameez because you're

158
00:06:56,500 --> 00:07:00,460
gonna have like a global variable or

159
00:06:58,000 --> 00:07:03,280
something like that but the promise that

160
00:07:00,460 --> 00:07:07,989
starts with is a really bad way to

161
00:07:03,280 --> 00:07:10,059
validate you FL because HTTP colon slash

162
00:07:07,990 --> 00:07:12,580
slash trusted that pentacel a becomes

163
00:07:10,060 --> 00:07:14,650
starts with trusted because you don't

164
00:07:12,580 --> 00:07:17,650
have a slash at the end of trusted same

165
00:07:14,650 --> 00:07:19,510
with HTTP colon slash slash trusted ads

166
00:07:17,650 --> 00:07:21,929
Venter celibate combatants will start

167
00:07:19,510 --> 00:07:25,030
with trusted and you can imagine

168
00:07:21,930 --> 00:07:27,400
chaining bug to get bugs together so if

169
00:07:25,030 --> 00:07:30,580
you for example have a URL but is

170
00:07:27,400 --> 00:07:33,520
trusted and which generic is you can do

171
00:07:30,580 --> 00:07:35,770
trusted /zw case dot slash file upload

172
00:07:33,520 --> 00:07:37,270
or link to an app an already right to go

173
00:07:35,770 --> 00:07:39,849
to another server so you link to the

174
00:07:37,270 --> 00:07:42,698
open redirect under trusted server but

175
00:07:39,850 --> 00:07:45,760
so how can redirect allows you to go to

176
00:07:42,699 --> 00:07:48,700
a mattress or an hour malicious web

177
00:07:45,760 --> 00:07:51,250
server and that's why you shouldn't burn

178
00:07:48,700 --> 00:07:53,080
open already right and same for header

179
00:07:51,250 --> 00:07:54,849
injection you can use that because you

180
00:07:53,080 --> 00:07:56,889
can potentially create a response with

181
00:07:54,849 --> 00:07:59,500
whatever you want in it so that's why

182
00:07:56,889 --> 00:08:02,139
before doing starts weave you should at

183
00:07:59,500 --> 00:08:05,560
least make sure that you can you can

184
00:08:02,139 --> 00:08:07,870
even equalize the path the URL to remove

185
00:08:05,560 --> 00:08:12,729
or the dot slash to make sure that it

186
00:08:07,870 --> 00:08:15,010
starts with something sign start with it

187
00:08:12,729 --> 00:08:17,650
but in Ruby or each body's any language

188
00:08:15,010 --> 00:08:22,180
but sometime it can even get nuts so

189
00:08:17,650 --> 00:08:23,830
that's C sharp so what's on so when

190
00:08:22,180 --> 00:08:26,590
you're using dotnet and here we have a

191
00:08:23,830 --> 00:08:29,139
string and s and we want to make sure

192
00:08:26,590 --> 00:08:30,460
that the UFL starts with HTTP current

193
00:08:29,139 --> 00:08:33,039
starts because we want things to be

194
00:08:30,460 --> 00:08:36,130
secure right and when we using the

195
00:08:33,039 --> 00:08:38,319
default web client class and we call it

196
00:08:36,130 --> 00:08:40,990
a new web trial and we download string

197
00:08:38,320 --> 00:08:43,419
based on the URL so we just fetching

198
00:08:40,990 --> 00:08:45,520
content so that looks pretty good like

199
00:08:43,419 --> 00:08:48,250
you can potentially have server-side

200
00:08:45,520 --> 00:08:50,020
request forgery but you don't have

201
00:08:48,250 --> 00:08:52,510
anything worse than that right if you

202
00:08:50,020 --> 00:08:53,920
look at this code and actually that's

203
00:08:52,510 --> 00:09:00,550
kind of surprising but you do

204
00:08:53,920 --> 00:09:03,010
so if you pass HTTP s : sudo service -

205
00:09:00,550 --> 00:09:06,040
UTC possibility you're gonna get the

206
00:09:03,010 --> 00:09:08,620
content of makisi passwd but for a Linux

207
00:09:06,040 --> 00:09:11,019
on dotnet and something if you pass

208
00:09:08,620 --> 00:09:13,750
another file on Windows that night both

209
00:09:11,019 --> 00:09:15,790
what the crazy thing is that when you

210
00:09:13,750 --> 00:09:18,880
exploit a directory traversal on Linux

211
00:09:15,790 --> 00:09:20,889
you have this limitation but all the

212
00:09:18,880 --> 00:09:23,980
directory in your travels all need to

213
00:09:20,889 --> 00:09:25,360
exist and you don't have this limit in

214
00:09:23,980 --> 00:09:29,380
Windows it when you're exploiting

215
00:09:25,360 --> 00:09:32,199
windows and dotnet mimic the windows

216
00:09:29,380 --> 00:09:34,089
behavior even on Linux so even if you

217
00:09:32,199 --> 00:09:38,079
have a directory that does not exist in

218
00:09:34,089 --> 00:09:39,970
the chain of your directory traversal it

219
00:09:38,079 --> 00:09:42,040
will work if you're using dotnet on

220
00:09:39,970 --> 00:09:43,720
Linux where with any other programming

221
00:09:42,040 --> 00:09:46,019
language on Linux it won't work because

222
00:09:43,720 --> 00:09:49,180
that's not all supposed to work right

223
00:09:46,019 --> 00:09:50,670
and yeah so that's pretty surprising and

224
00:09:49,180 --> 00:09:54,790
I love this part

225
00:09:50,670 --> 00:09:56,769
now another one is her handler that's

226
00:09:54,790 --> 00:09:59,740
gonna take a file name from the URL

227
00:09:56,769 --> 00:10:02,740
again in golang and it's gonna open that

228
00:09:59,740 --> 00:10:05,110
file name and differ FD dot close so

229
00:10:02,740 --> 00:10:07,660
this way so five will be closed on to

230
00:10:05,110 --> 00:10:09,730
the requests is on the response it's

231
00:10:07,660 --> 00:10:11,680
sent back if there is an error it's

232
00:10:09,730 --> 00:10:14,680
gonna return like a four four five not

233
00:10:11,680 --> 00:10:18,399
file and otherwise it's gonna copy the

234
00:10:14,680 --> 00:10:21,069
content of the file as a content of the

235
00:10:18,399 --> 00:10:22,660
file FD to the HTTP response so

236
00:10:21,070 --> 00:10:24,579
basically it's just starting a fire and

237
00:10:22,660 --> 00:10:27,760
here we can see that we making things

238
00:10:24,579 --> 00:10:31,599
secure by using path that clean because

239
00:10:27,760 --> 00:10:34,029
pub that kink in right things so if you

240
00:10:31,600 --> 00:10:37,000
look at path dot clean documentation we

241
00:10:34,029 --> 00:10:39,910
can see that a /e we have a lot of

242
00:10:37,000 --> 00:10:43,569
examples and how they're gonna go for

243
00:10:39,910 --> 00:10:46,810
path third key so we can see that ace

244
00:10:43,569 --> 00:10:49,599
she become a slushee a slash she

245
00:10:46,810 --> 00:10:53,649
becoming a /e the dot slash a be the dot

246
00:10:49,600 --> 00:10:55,750
slash slash slash C so the one before

247
00:10:53,649 --> 00:10:56,889
the last one become a slushee so the

248
00:10:55,750 --> 00:10:58,630
developer you look at right and select

249
00:10:56,889 --> 00:11:01,449
that's exactly what I want

250
00:10:58,630 --> 00:11:03,399
that's exactly what the security guy

251
00:11:01,449 --> 00:11:06,550
told me about dot dot slash those are

252
00:11:03,399 --> 00:11:07,840
bad after clean remove dot dot slash so

253
00:11:06,550 --> 00:11:10,810
that's what you get if you

254
00:11:07,840 --> 00:11:13,870
read the documentation and actually it's

255
00:11:10,810 --> 00:11:16,449
not actually the case what part the King

256
00:11:13,870 --> 00:11:18,880
does it cleans a path he doesn't remove

257
00:11:16,450 --> 00:11:20,740
like dot slash magically he just tried

258
00:11:18,880 --> 00:11:22,960
to canonicalize the path as much as it

259
00:11:20,740 --> 00:11:26,200
can so if you do dot dot slash dot dot

260
00:11:22,960 --> 00:11:27,730
slash dot dot slash a slash B you still

261
00:11:26,200 --> 00:11:30,850
end up with dot slash dot dot slash dot

262
00:11:27,730 --> 00:11:34,390
dot slash a slash B because these paths

263
00:11:30,850 --> 00:11:38,620
are as clean as we can be for pastor

264
00:11:34,390 --> 00:11:40,090
King so that's something said in a

265
00:11:38,620 --> 00:11:44,950
previous talk and someone tweet about it

266
00:11:40,090 --> 00:11:47,470
and fee Depot is looking at getting this

267
00:11:44,950 --> 00:11:49,360
example added to the documentation and I

268
00:11:47,470 --> 00:11:52,330
did like some notes around security but

269
00:11:49,360 --> 00:11:54,460
again like so golang development Timmy's

270
00:11:52,330 --> 00:11:57,190
B is pushing back saying like that's

271
00:11:54,460 --> 00:11:58,390
probably not the right thing we probably

272
00:11:57,190 --> 00:12:00,460
don't want to put like security

273
00:11:58,390 --> 00:12:02,050
implication of every function so you

274
00:12:00,460 --> 00:12:08,040
probably got a bit of time before that

275
00:12:02,050 --> 00:12:10,599
gets fixed everywhere another one is

276
00:12:08,040 --> 00:12:12,910
regular expression people get regular

277
00:12:10,600 --> 00:12:14,680
expression wrong all the time so let's

278
00:12:12,910 --> 00:12:18,400
say you have like an event listener in

279
00:12:14,680 --> 00:12:21,339
HTTP in an HTML web page and you want to

280
00:12:18,400 --> 00:12:24,010
make sure but the origin of the message

281
00:12:21,340 --> 00:12:25,210
come from Pinterest about.com and you

282
00:12:24,010 --> 00:12:26,950
want to do that because that's the first

283
00:12:25,210 --> 00:12:29,440
thing when you look at how to create an

284
00:12:26,950 --> 00:12:30,910
event fist a nice check the origin so

285
00:12:29,440 --> 00:12:33,100
you create a new reg i've swift dot

286
00:12:30,910 --> 00:12:35,560
pentacel Abdallah because you want to do

287
00:12:33,100 --> 00:12:38,560
to make sure that the origin ends we've

288
00:12:35,560 --> 00:12:40,750
come and nothing else so otherwise the

289
00:12:38,560 --> 00:12:44,020
bad guy will be print a solid col dot

290
00:12:40,750 --> 00:12:46,780
bad guys dot net and its origin matches

291
00:12:44,020 --> 00:12:49,060
you do something sensitive so here's the

292
00:12:46,780 --> 00:12:50,650
problem comes from host name and a

293
00:12:49,060 --> 00:12:52,060
regular expression works really well

294
00:12:50,650 --> 00:12:56,220
together when you want to find bugs

295
00:12:52,060 --> 00:12:59,650
because here the ray guys will match the

296
00:12:56,220 --> 00:13:03,010
www.pmtasetup.com any subdomain dot

297
00:12:59,650 --> 00:13:05,590
pantyzoo.com but also wwsz pentester lab

298
00:13:03,010 --> 00:13:07,630
dot-com and wwz went to STAR Labs econ

299
00:13:05,590 --> 00:13:10,630
because the dot ins a regular expression

300
00:13:07,630 --> 00:13:14,250
our wildcard and here they have not been

301
00:13:10,630 --> 00:13:16,720
expect so but something people already

302
00:13:14,250 --> 00:13:18,190
failed to understand or fail to the

303
00:13:16,720 --> 00:13:20,080
property is that if you have dots in

304
00:13:18,190 --> 00:13:21,520
your regular expression you need to

305
00:13:20,080 --> 00:13:23,500
escape there

306
00:13:21,520 --> 00:13:25,120
and sometimes you have this regular

307
00:13:23,500 --> 00:13:26,320
expression in a configuration file so

308
00:13:25,120 --> 00:13:27,790
it's not escape properly so that's

309
00:13:26,320 --> 00:13:30,100
something you should really look into

310
00:13:27,790 --> 00:13:37,270
like that's a good way to find really

311
00:13:30,100 --> 00:13:40,420
cool box another one is around this

312
00:13:37,270 --> 00:13:41,980
little snippet but does okay it's an

313
00:13:40,420 --> 00:13:44,800
Express application but it works in

314
00:13:41,980 --> 00:13:47,080
another lot of over language you have a

315
00:13:44,800 --> 00:13:50,979
list of a low domain example.org

316
00:13:47,080 --> 00:13:53,310
gmail.com google.com and when you fetch

317
00:13:50,980 --> 00:13:55,690
content from the domain you have this

318
00:13:53,310 --> 00:13:58,839
handler but we say okay if you access

319
00:13:55,690 --> 00:14:01,870
slash fetch and but the value of domain

320
00:13:58,840 --> 00:14:04,180
to uppercase in using the list of your

321
00:14:01,870 --> 00:14:07,270
allowed domains we're gonna fetch a

322
00:14:04,180 --> 00:14:11,500
content otherwise we send you a for free

323
00:14:07,270 --> 00:14:13,949
and that looks pretty saying nothing to

324
00:14:11,500 --> 00:14:16,930
be worried about right so bring that

325
00:14:13,950 --> 00:14:19,030
there was various really good blog post

326
00:14:16,930 --> 00:14:22,239
about someone who found a bug in github

327
00:14:19,030 --> 00:14:25,360
and you have characters when you

328
00:14:22,240 --> 00:14:28,390
uppercase them change so for example the

329
00:14:25,360 --> 00:14:32,140
Turkish dot lest I become an uppercase I

330
00:14:28,390 --> 00:14:34,420
and gmail.com if you register a domain

331
00:14:32,140 --> 00:14:37,180
and you do to uppercase on it becomes

332
00:14:34,420 --> 00:14:40,150
gmail.com so here you just need to

333
00:14:37,180 --> 00:14:43,239
register gmail.com with I without the

334
00:14:40,150 --> 00:14:46,600
dot and you're in the white list and you

335
00:14:43,240 --> 00:14:49,410
can get your content fetched so if

336
00:14:46,600 --> 00:14:52,000
you're doing bhagwanti it may be worth

337
00:14:49,410 --> 00:14:55,060
registering domain that kind of match

338
00:14:52,000 --> 00:14:58,000
the domain that you are targeting with

339
00:14:55,060 --> 00:15:01,719
just this kind of weird characters so

340
00:14:58,000 --> 00:15:04,450
this is a list again from the same blog

341
00:15:01,720 --> 00:15:06,760
post and that's this blog post got me

342
00:15:04,450 --> 00:15:08,470
thinking like oh this is interesting I

343
00:15:06,760 --> 00:15:09,790
need to look in more depth on that like

344
00:15:08,470 --> 00:15:13,210
that's really really interesting so I

345
00:15:09,790 --> 00:15:14,770
start digging and digging and digging so

346
00:15:13,210 --> 00:15:16,360
first you need to know that that's an

347
00:15:14,770 --> 00:15:20,079
expected behavior that's the most

348
00:15:16,360 --> 00:15:22,860
surprising thing for me so if you look

349
00:15:20,080 --> 00:15:26,670
at the Unicode documentation or our

350
00:15:22,860 --> 00:15:27,910
implementation guidelines like if you're

351
00:15:26,670 --> 00:15:30,760
normal

352
00:15:27,910 --> 00:15:34,959
you should get from like I to uppercase

353
00:15:30,760 --> 00:15:38,080
I and dot less I here become uppercase

354
00:15:34,960 --> 00:15:41,529
as well and then you have like other

355
00:15:38,080 --> 00:15:43,510
weird behavior but if you oh if your

356
00:15:41,529 --> 00:15:48,399
local are configured to be in Turkish

357
00:15:43,510 --> 00:15:52,120
lowercase I become uppercase I with a

358
00:15:48,399 --> 00:15:56,470
dot and lowercase I with no doubt became

359
00:15:52,120 --> 00:16:00,790
uppercase I with no dot so even if your

360
00:15:56,470 --> 00:16:02,170
system even like this behavior will be

361
00:16:00,790 --> 00:16:04,569
different between two system with

362
00:16:02,170 --> 00:16:06,699
different locals between like u TF n

363
00:16:04,570 --> 00:16:09,040
Turkish of course so that's really

364
00:16:06,700 --> 00:16:10,450
really weird and but good bugs like

365
00:16:09,040 --> 00:16:12,880
really interesting facts to look into

366
00:16:10,450 --> 00:16:16,690
and if you want to play with words you

367
00:16:12,880 --> 00:16:19,390
can check these two ull captures of Ag

368
00:16:16,690 --> 00:16:21,550
one two three four and captures of Ag

369
00:16:19,390 --> 00:16:23,830
five six seven eight so that's two

370
00:16:21,550 --> 00:16:26,949
challenges you can play with if you want

371
00:16:23,830 --> 00:16:29,740
to like get a better understanding of

372
00:16:26,950 --> 00:16:33,070
these kind of bugs I'm gonna keep them

373
00:16:29,740 --> 00:16:35,020
running for like two days maybe so we

374
00:16:33,070 --> 00:16:38,350
talked about regular expression we

375
00:16:35,020 --> 00:16:43,839
talked about Unicode what if we mix the

376
00:16:38,350 --> 00:16:46,330
two what happened so if we do a compiled

377
00:16:43,839 --> 00:16:49,360
very light version I and we try to match

378
00:16:46,330 --> 00:16:56,620
the less I it doesn't match so I kind of

379
00:16:49,360 --> 00:17:00,070
expected so that's in Python 3.8 for now

380
00:16:56,620 --> 00:17:02,589
let's add to this regular expression R Y

381
00:17:00,070 --> 00:17:06,120
dot ignore case so basically match

382
00:17:02,589 --> 00:17:08,470
without taking into account the case and

383
00:17:06,119 --> 00:17:11,109
we sang we can see that dhoklas I

384
00:17:08,470 --> 00:17:13,809
matches I so what's interesting that's

385
00:17:11,109 --> 00:17:16,809
an expected or kind of expected behavior

386
00:17:13,809 --> 00:17:19,899
but that's certain now we look at other

387
00:17:16,809 --> 00:17:23,740
things so if we look at upper case s

388
00:17:19,900 --> 00:17:27,520
will match the long Latin s if we use

389
00:17:23,740 --> 00:17:30,760
our either ignore case and upper case K

390
00:17:27,520 --> 00:17:32,920
will match the Calvin sign if we using

391
00:17:30,760 --> 00:17:35,980
our Y dot ignore case so that could be a

392
00:17:32,920 --> 00:17:38,320
good way to bypass a regular expression

393
00:17:35,980 --> 00:17:41,940
if the regular expression is using our Y

394
00:17:38,320 --> 00:17:47,960
dot ignore case now we move to Ruby and

395
00:17:41,940 --> 00:17:50,060
Ruby so if you want to match so I

396
00:17:47,960 --> 00:17:52,670
the real expression I if you ignore case

397
00:17:50,060 --> 00:17:55,730
doesn't match that less I same thing if

398
00:17:52,670 --> 00:17:58,930
you using an upper case I but Douglas I

399
00:17:55,730 --> 00:18:02,330
as we saw when we capitalized it become

400
00:17:58,930 --> 00:18:06,200
upper case I so what's kind of weird and

401
00:18:02,330 --> 00:18:08,810
it gets weirder is that even if that

402
00:18:06,200 --> 00:18:12,500
less I doesn't match I if using in okay

403
00:18:08,810 --> 00:18:16,100
so the /i at the end here so Calvin side

404
00:18:12,500 --> 00:18:17,750
will match uppercase K and lower case k

405
00:18:16,100 --> 00:18:22,610
as well as long as you ignore the case

406
00:18:17,750 --> 00:18:24,860
and same thing for the Latin long s it

407
00:18:22,610 --> 00:18:28,280
will match upper case s and lowercase s

408
00:18:24,860 --> 00:18:30,169
as long as you ignores okay so you have

409
00:18:28,280 --> 00:18:34,040
different behavior between different

410
00:18:30,170 --> 00:18:36,650
characters so that's pretty odd now if

411
00:18:34,040 --> 00:18:39,200
we look at golang I'm good and we do

412
00:18:36,650 --> 00:18:40,940
exactly the same as Ruby so I will not

413
00:18:39,200 --> 00:18:42,080
match that as I so in golang if you're

414
00:18:40,940 --> 00:18:43,820
using a regular expression you need to

415
00:18:42,080 --> 00:18:46,699
put them at the front like that so

416
00:18:43,820 --> 00:18:49,730
bracket question mark is for ignore case

417
00:18:46,700 --> 00:18:54,590
so we can see that dot less I does not

418
00:18:49,730 --> 00:18:58,640
match I but K but Calvin sign match is K

419
00:18:54,590 --> 00:19:01,310
and Latin long as match is s so again

420
00:18:58,640 --> 00:19:03,080
some interesting behavior that can

421
00:19:01,310 --> 00:19:08,720
create pretty interested pretty cool

422
00:19:03,080 --> 00:19:10,399
bugs in c-sharp we have again a

423
00:19:08,720 --> 00:19:11,810
different behavior so that's really a

424
00:19:10,400 --> 00:19:14,300
good weight maybe to fingerprint

425
00:19:11,810 --> 00:19:17,840
applications so we can see that dot less

426
00:19:14,300 --> 00:19:21,200
I match doesn't match I but Kevin sign

427
00:19:17,840 --> 00:19:23,959
much is K and the la la Latin long ass

428
00:19:21,200 --> 00:19:26,870
doesn't match s if we're using in your

429
00:19:23,960 --> 00:19:29,600
case and another interesting thing is

430
00:19:26,870 --> 00:19:31,820
that you can use in C sharp is ends with

431
00:19:29,600 --> 00:19:33,439
and there are a lot of ways to check if

432
00:19:31,820 --> 00:19:35,389
something ends with something else so

433
00:19:33,440 --> 00:19:39,260
you can use the default one but we say

434
00:19:35,390 --> 00:19:42,620
so test that dot less i NC doesn't end

435
00:19:39,260 --> 00:19:44,150
with i NC but you can use environment

436
00:19:42,620 --> 00:19:46,879
creature in no case what would give you

437
00:19:44,150 --> 00:19:49,640
the same and you can use ordinal ignore

438
00:19:46,880 --> 00:19:51,380
case that gives you true and current

439
00:19:49,640 --> 00:19:54,950
culture ignore case that give you false

440
00:19:51,380 --> 00:19:58,010
unless I will say you're in Turkish I

441
00:19:54,950 --> 00:19:59,990
haven't checked that and as a friend

442
00:19:58,010 --> 00:20:01,190
said like it's what we come back from

443
00:19:59,990 --> 00:20:03,170
all the bugs fat

444
00:20:01,190 --> 00:20:08,150
were found in Unicode in windows back in

445
00:20:03,170 --> 00:20:11,990
the day so if we look at Java now so we

446
00:20:08,150 --> 00:20:14,120
see that all these characters are equals

447
00:20:11,990 --> 00:20:17,780
if you in okay so that less is equal to

448
00:20:14,120 --> 00:20:20,659
I is equal to or less I and KKK curve in

449
00:20:17,780 --> 00:20:22,850
sign or equal to each other but if we're

450
00:20:20,660 --> 00:20:25,160
using patterned encode pile and we're

451
00:20:22,850 --> 00:20:28,909
using regular expression the dot less I

452
00:20:25,160 --> 00:20:31,490
will not match I so long Latin s will

453
00:20:28,910 --> 00:20:34,790
not match s and the Kelvin sign will not

454
00:20:31,490 --> 00:20:37,550
match okay so again like moving just

455
00:20:34,790 --> 00:20:39,800
from like string comparison with ignore

456
00:20:37,550 --> 00:20:44,389
case to a regular expression may change

457
00:20:39,800 --> 00:20:45,350
a behavior between two applications the

458
00:20:44,390 --> 00:20:46,220
code looks the same

459
00:20:45,350 --> 00:20:48,050
I'm just going to move to a regular

460
00:20:46,220 --> 00:20:49,580
expression it's more efficient but when

461
00:20:48,050 --> 00:20:53,090
you change the behavior of how it works

462
00:20:49,580 --> 00:20:55,520
and why does it matter let's say you

463
00:20:53,090 --> 00:20:57,679
have somewhere in your application that

464
00:20:55,520 --> 00:20:59,240
checks for but a domain match is

465
00:20:57,680 --> 00:21:02,630
something with your eyes something with

466
00:20:59,240 --> 00:21:04,370
a s and you ignore case potentially you

467
00:21:02,630 --> 00:21:06,610
can use it but you can bypass this by

468
00:21:04,370 --> 00:21:09,229
registering the right domain or

469
00:21:06,610 --> 00:21:12,800
something fleeing with a k but it's less

470
00:21:09,230 --> 00:21:15,200
likely because it's pretty as far as I

471
00:21:12,800 --> 00:21:18,800
can tell really hard to get to domain

472
00:21:15,200 --> 00:21:20,390
with a Kelvin sign in it and simply for

473
00:21:18,800 --> 00:21:22,760
an email address you can think of

474
00:21:20,390 --> 00:21:25,250
company that say like okay if your email

475
00:21:22,760 --> 00:21:28,490
address ends with Pentastar calm you are

476
00:21:25,250 --> 00:21:30,650
an admin in this application and if you

477
00:21:28,490 --> 00:21:32,600
do that you need to make sure that

478
00:21:30,650 --> 00:21:35,170
you're not gonna get use ignore case

479
00:21:32,600 --> 00:21:37,850
because you can use this bypass to

480
00:21:35,170 --> 00:21:39,860
bypass this check and register for

481
00:21:37,850 --> 00:21:42,620
example github.com with a lot less eye

482
00:21:39,860 --> 00:21:47,360
or gmail.com with less i or things like

483
00:21:42,620 --> 00:21:50,149
that and that's it for me so conclusion

484
00:21:47,360 --> 00:21:50,750
computers are hard devil is in the

485
00:21:50,150 --> 00:21:53,330
details

486
00:21:50,750 --> 00:21:54,530
don't make assumption i think it's

487
00:21:53,330 --> 00:21:57,199
really important to do code review

488
00:21:54,530 --> 00:21:59,710
that's for sure and to try to build upon

489
00:21:57,200 --> 00:22:01,760
people's research or like for example i

490
00:21:59,710 --> 00:22:05,990
start looking at this unicode because

491
00:22:01,760 --> 00:22:08,300
someone sure like did a write-up or a

492
00:22:05,990 --> 00:22:10,130
cool bath and then you get deeper and

493
00:22:08,300 --> 00:22:11,720
deeper and deeper and you find new

494
00:22:10,130 --> 00:22:13,820
things that are interesting and you find

495
00:22:11,720 --> 00:22:14,480
new but and you talks about you talk

496
00:22:13,820 --> 00:22:16,820
about this new

497
00:22:14,480 --> 00:22:18,620
bugs and then someone else we keep

498
00:22:16,820 --> 00:22:21,530
digging digging digging and find new

499
00:22:18,620 --> 00:22:26,090
bugs and that's how you keep finding

500
00:22:21,530 --> 00:22:28,610
bugs and yep I think I'm a bit early I

501
00:22:26,090 --> 00:22:30,439
got five minutes to go

502
00:22:28,610 --> 00:22:36,168
yeah and don't make assumption because

503
00:22:30,440 --> 00:22:38,929
the snippet I show during restore kind

504
00:22:36,169 --> 00:22:41,299
of pretty safe if you like just read

505
00:22:38,929 --> 00:22:44,450
them quickly but again you need to look

506
00:22:41,299 --> 00:22:45,290
in the F and see like okay this looks

507
00:22:44,450 --> 00:22:48,110
suspicious

508
00:22:45,290 --> 00:22:51,200
maybe I should like start an IRB shell a

509
00:22:48,110 --> 00:22:54,290
Python shell or write some golang and

510
00:22:51,200 --> 00:22:57,049
see like okay how does vast function

511
00:22:54,290 --> 00:23:00,080
really really work like what are the

512
00:22:57,049 --> 00:23:02,720
boundaries what can i push it forever

513
00:23:00,080 --> 00:23:05,330
okay this part clean seems to clean but

514
00:23:02,720 --> 00:23:07,100
how well does it clean we did clean if

515
00:23:05,330 --> 00:23:11,149
something is encoded will it clean

516
00:23:07,100 --> 00:23:13,010
unicode really do something else like

517
00:23:11,150 --> 00:23:14,270
yeah so you need to make sure when

518
00:23:13,010 --> 00:23:15,770
you're doing code review but you go into

519
00:23:14,270 --> 00:23:18,049
all of these details

520
00:23:15,770 --> 00:23:20,600
otherwise you're missing like really

521
00:23:18,049 --> 00:23:23,510
cool bugs as we saw in this talk and

522
00:23:20,600 --> 00:23:25,850
yeah thanks for your time and you shove

523
00:23:23,510 --> 00:23:27,830
any question I'm gonna keep like hanging

524
00:23:25,850 --> 00:23:28,699
around for few minutes after the talk

525
00:23:27,830 --> 00:23:30,559
and yeah

526
00:23:28,700 --> 00:23:32,990
don't hesitate or shoot me an email or

527
00:23:30,559 --> 00:23:36,740
add me on Twitter and I would be more

528
00:23:32,990 --> 00:23:38,660
than happy to answer your questions and

529
00:23:36,740 --> 00:23:41,720
that's it for me thank you so much that

530
00:23:38,660 --> 00:23:53,110
was awesome I'm never in a chair have

531
00:23:41,720 --> 00:23:58,040
any questions here on the chart because

532
00:23:53,110 --> 00:23:59,240
was I didn't want to have both running

533
00:23:58,040 --> 00:24:02,059
at the same time because I'm in

534
00:23:59,240 --> 00:24:04,840
Australia and Internet is terrible here

535
00:24:02,059 --> 00:24:14,240
yeah

536
00:24:04,840 --> 00:24:16,100
no yeah oh thanks so yeah yeah I think

537
00:24:14,240 --> 00:24:17,660
there is a good comment about the good

538
00:24:16,100 --> 00:24:19,760
thing is that yeah a lot of people are

539
00:24:17,660 --> 00:24:24,500
moving to it I think the interesting

540
00:24:19,760 --> 00:24:26,270
part is what people are they are used to

541
00:24:24,500 --> 00:24:27,410
develop with frameworks and then they

542
00:24:26,270 --> 00:24:29,570
move to go and

543
00:24:27,410 --> 00:24:31,390
have a framework anymore interests of

544
00:24:29,570 --> 00:24:34,820
like a programming language so it's like

545
00:24:31,390 --> 00:24:36,980
everyone moved to like smart PHP

546
00:24:34,820 --> 00:24:42,710
framework and you can't find as many

547
00:24:36,980 --> 00:24:44,060
like tear about PHP bars and now we've

548
00:24:42,710 --> 00:24:46,520
go we go back to a programming language

549
00:24:44,060 --> 00:24:48,770
without using a framework and you can

550
00:24:46,520 --> 00:24:50,389
find all those bugs because people are

551
00:24:48,770 --> 00:24:52,300
back to not having a framework to

552
00:24:50,390 --> 00:24:55,070
protect them yeah

553
00:24:52,300 --> 00:24:56,750
now as definitely as well it's it's

554
00:24:55,070 --> 00:24:59,270
tough with the new languages it's just

555
00:24:56,750 --> 00:25:01,160
it's harder for for people who's just

556
00:24:59,270 --> 00:25:02,990
starting from scratch basically so like

557
00:25:01,160 --> 00:25:04,940
you're given the toolset that it's given

558
00:25:02,990 --> 00:25:06,200
and then it's difficult to you know

559
00:25:04,940 --> 00:25:08,060
really know where to go from there

560
00:25:06,200 --> 00:25:09,140
because so many things in so many

561
00:25:08,060 --> 00:25:10,460
different frameworks that are already

562
00:25:09,140 --> 00:25:12,440
taking care of all like they're really

563
00:25:10,460 --> 00:25:15,020
benign sort of things that are security

564
00:25:12,440 --> 00:25:16,910
testing and it's you know whether or not

565
00:25:15,020 --> 00:25:19,430
it's incorporated into the full overall

566
00:25:16,910 --> 00:25:21,110
you know like structure of a language

567
00:25:19,430 --> 00:25:22,550
it's like there's stuff you can still

568
00:25:21,110 --> 00:25:24,590
important easily

569
00:25:22,550 --> 00:25:26,030
important looks like jQuery versus like

570
00:25:24,590 --> 00:25:31,429
trying to implement all that yourself is

571
00:25:26,030 --> 00:25:34,730
like you know yeah yeah that was awesome

572
00:25:31,430 --> 00:25:37,250
though so thanks very much for coming

573
00:25:34,730 --> 00:25:39,560
out here and and giving our our final

574
00:25:37,250 --> 00:25:41,330
presentation of the day it's what I

575
00:25:39,560 --> 00:25:43,510
think me yeah of course

576
00:25:41,330 --> 00:25:43,510
so

