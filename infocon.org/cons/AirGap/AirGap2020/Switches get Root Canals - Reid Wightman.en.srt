1
00:00:00,000 --> 00:00:17,000
just wait alright so I will jump in let

2
00:00:04,980 --> 00:00:19,020
me get this going so this is uh

3
00:00:17,000 --> 00:00:20,779
originally this talk is called networks

4
00:00:19,020 --> 00:00:23,130
which inception so it's a look at

5
00:00:20,779 --> 00:00:26,130
network switches to see what cool stuff

6
00:00:23,130 --> 00:00:28,799
we can do with networks which is once we

7
00:00:26,130 --> 00:00:30,720
compromise them so this is not a talk

8
00:00:28,800 --> 00:00:32,250
about vulnerabilities that it's kind of

9
00:00:30,720 --> 00:00:34,260
inspired by a bunch of talks about

10
00:00:32,250 --> 00:00:36,480
networks which vulnerabilities there was

11
00:00:34,260 --> 00:00:38,489
a series of talks called switches get

12
00:00:36,480 --> 00:00:41,370
stitches a couple of years ago that

13
00:00:38,489 --> 00:00:43,739
happened at black hat and DEF CON and a

14
00:00:41,370 --> 00:00:44,760
couple of ICS security conferences they

15
00:00:43,739 --> 00:00:46,640
found a whole bunch of different

16
00:00:44,760 --> 00:00:48,920
vulnerabilities in networks which is

17
00:00:46,640 --> 00:00:51,840
specifically in the industrial space

18
00:00:48,920 --> 00:00:54,120
there have been a lot of other you know

19
00:00:51,840 --> 00:00:56,100
vulnerabilities and backdoors and Cisco

20
00:00:54,120 --> 00:00:57,959
and juniper equipment lately

21
00:00:56,100 --> 00:01:00,359
that was so post one that was exploited

22
00:00:57,960 --> 00:01:04,290
in the wild last month and two years ago

23
00:01:00,359 --> 00:01:06,540
there was this big ICS or actually I

24
00:01:04,290 --> 00:01:08,990
guess this was a DHS advisory or alert

25
00:01:06,540 --> 00:01:11,729
that came out saying that a lot of

26
00:01:08,990 --> 00:01:14,310
network equipment was being targeted by

27
00:01:11,729 --> 00:01:17,580
you know bad guys trying to get into

28
00:01:14,310 --> 00:01:19,049
different networks so this is not a talk

29
00:01:17,580 --> 00:01:21,090
about those vulnerabilities though this

30
00:01:19,049 --> 00:01:23,070
is a talk about post exploitation right

31
00:01:21,090 --> 00:01:25,439
in other words let's say we have a

32
00:01:23,070 --> 00:01:27,539
typical layer to manage networks which

33
00:01:25,439 --> 00:01:29,990
that's got like very little in terms of

34
00:01:27,540 --> 00:01:33,180
capabilities it's really just meant to

35
00:01:29,990 --> 00:01:35,610
do packet matching from port a to port B

36
00:01:33,180 --> 00:01:37,439
and deliver packets from one port to the

37
00:01:35,610 --> 00:01:39,689
other might have a few neat features

38
00:01:37,439 --> 00:01:43,949
usually these things have network port

39
00:01:39,689 --> 00:01:45,570
mirroring as well as VLAN tagging and

40
00:01:43,950 --> 00:01:47,100
all that sort of stuff but this is

41
00:01:45,570 --> 00:01:48,658
really a question of like let's say we

42
00:01:47,100 --> 00:01:50,520
find a vulnerability of a network switch

43
00:01:48,659 --> 00:01:53,850
what can we actually do with it that's

44
00:01:50,520 --> 00:01:55,530
useful to an attacker from that point on

45
00:01:53,850 --> 00:01:57,899
the network so the victim that we're

46
00:01:55,530 --> 00:02:00,360
gonna look at for this talk is this

47
00:01:57,899 --> 00:02:04,740
industrial Ethernet switch called the

48
00:02:00,360 --> 00:02:08,220
six net ether track et 9ms it's a nine

49
00:02:04,740 --> 00:02:11,160
port 10100 managed network switch it's a

50
00:02:08,220 --> 00:02:13,560
couple of years old but although 10100

51
00:02:11,160 --> 00:02:13,940
switches sound slow in the industrial

52
00:02:13,560 --> 00:02:16,040
space

53
00:02:13,940 --> 00:02:18,079
you don't find too much gigabit ethernet

54
00:02:16,040 --> 00:02:20,630
still because most of these like

55
00:02:18,080 --> 00:02:23,150
industrial controllers don't even have

56
00:02:20,630 --> 00:02:25,030
gigabit ethernet in them so you know

57
00:02:23,150 --> 00:02:28,070
people use these old tried-and-true

58
00:02:25,030 --> 00:02:30,110
slower network switches I chose this

59
00:02:28,070 --> 00:02:32,780
switch mostly because it has this little

60
00:02:30,110 --> 00:02:34,640
penguin logo on the front which you know

61
00:02:32,780 --> 00:02:36,740
suggests that it runs embedded Linux

62
00:02:34,640 --> 00:02:37,250
under the hood which turns out to be

63
00:02:36,740 --> 00:02:39,440
true

64
00:02:37,250 --> 00:02:41,450
so we popped open the switch just to

65
00:02:39,440 --> 00:02:43,550
kind of get a feel for what we were

66
00:02:41,450 --> 00:02:46,519
working with in terms of hardware and

67
00:02:43,550 --> 00:02:50,060
software this thing has a little atmega

68
00:02:46,520 --> 00:02:51,200
or Atmel sorry arm9 cpu that thing runs

69
00:02:50,060 --> 00:02:54,950
at 200 megahertz

70
00:02:51,200 --> 00:02:56,899
it's got 128 megabits of flash to you

71
00:02:54,950 --> 00:03:00,440
know hold the flash file system for the

72
00:02:56,900 --> 00:03:04,130
embedded Linux and it has this Marvel 88

73
00:03:00,440 --> 00:03:06,710
e 60 83 switch chip it's also known as

74
00:03:04,130 --> 00:03:09,350
the easy street switch chip so again

75
00:03:06,710 --> 00:03:11,150
this is a 9 port Ethernet switch it's

76
00:03:09,350 --> 00:03:13,670
meant to have eight normal ports that

77
00:03:11,150 --> 00:03:15,500
you plug field equipment into and then

78
00:03:13,670 --> 00:03:17,899
one uplink port that would be connected

79
00:03:15,500 --> 00:03:20,209
upstream to you know probably some

80
00:03:17,900 --> 00:03:22,370
upstream data center or something

81
00:03:20,209 --> 00:03:24,350
so the actual vulnerability that we use

82
00:03:22,370 --> 00:03:25,700
to get into the switch is nothing super

83
00:03:24,350 --> 00:03:27,049
special and I said this wouldn't be a

84
00:03:25,700 --> 00:03:28,010
talked about vulnerabilities well at

85
00:03:27,050 --> 00:03:30,080
least touch on it

86
00:03:28,010 --> 00:03:32,780
it's a directory traversal bug if you

87
00:03:30,080 --> 00:03:34,459
backup the configuration of a switch and

88
00:03:32,780 --> 00:03:37,340
then and look at it it's actually a

89
00:03:34,459 --> 00:03:38,480
tarball you can see you know it's

90
00:03:37,340 --> 00:03:41,120
backing up a bunch of different

91
00:03:38,480 --> 00:03:42,890
directories on the switch we were able

92
00:03:41,120 --> 00:03:45,560
to use another little directory

93
00:03:42,890 --> 00:03:47,988
traversal bug to read some of the

94
00:03:45,560 --> 00:03:50,180
configuration files and then upload a

95
00:03:47,989 --> 00:03:51,860
backed up configuration that happened to

96
00:03:50,180 --> 00:03:53,780
have a new Etsy password and that's each

97
00:03:51,860 --> 00:03:56,709
shadow file in it so then we could you

98
00:03:53,780 --> 00:03:58,970
know also enable the embedded SSH server

99
00:03:56,709 --> 00:04:01,040
login to the switch and have a root

100
00:03:58,970 --> 00:04:02,720
shell we did report it to the vendor

101
00:04:01,040 --> 00:04:04,489
they really didn't care they were like

102
00:04:02,720 --> 00:04:06,950
well switches end-of-life so we're not

103
00:04:04,489 --> 00:04:09,230
going to patch it but this is again this

104
00:04:06,950 --> 00:04:12,140
is a talk about post exploitation right

105
00:04:09,230 --> 00:04:14,510
so let's say that we've got admin access

106
00:04:12,140 --> 00:04:16,159
on this switch or it could be anything

107
00:04:14,510 --> 00:04:17,839
really it could be a VPN gateway

108
00:04:16,160 --> 00:04:19,820
whatever but the question is you know

109
00:04:17,839 --> 00:04:22,159
now what what's an attacker gonna do

110
00:04:19,820 --> 00:04:24,650
with that vulnerability once they

111
00:04:22,160 --> 00:04:26,539
actually use it and get access to the

112
00:04:24,650 --> 00:04:27,679
network hardware there's a bunch of

113
00:04:26,539 --> 00:04:30,229
boring attacks you can

114
00:04:27,680 --> 00:04:31,430
on a network switch you know there's

115
00:04:30,229 --> 00:04:33,620
like you could disable network

116
00:04:31,430 --> 00:04:34,430
interfaces you could disable the mirror

117
00:04:33,620 --> 00:04:35,600
port

118
00:04:34,430 --> 00:04:37,460
you could probably lock the

119
00:04:35,600 --> 00:04:39,289
administrators out I view those is all

120
00:04:37,460 --> 00:04:40,280
pretty boring because you're probably

121
00:04:39,289 --> 00:04:41,750
that's probably gonna be something to

122
00:04:40,280 --> 00:04:44,479
get some jitter you'll be a lot more

123
00:04:41,750 --> 00:04:45,979
interesting to do some attacks that are

124
00:04:44,479 --> 00:04:49,310
a little bit more nefarious a little bit

125
00:04:45,979 --> 00:04:51,710
trickier to detect and then maybe have

126
00:04:49,310 --> 00:04:53,930
some more interesting outcomes and

127
00:04:51,710 --> 00:04:56,239
impacts against the people who happen to

128
00:04:53,930 --> 00:04:58,250
JIT emilion the equipment but the

129
00:04:56,240 --> 00:05:00,320
official story is you know this layer 2

130
00:04:58,250 --> 00:05:02,180
networks which is really it's just a

131
00:05:00,320 --> 00:05:05,210
packet matching engine right it says

132
00:05:02,180 --> 00:05:08,090
like okay I have this MAC address table

133
00:05:05,210 --> 00:05:11,030
I know that MAC address foo is on port 1

134
00:05:08,090 --> 00:05:12,469
I know MAC address bar is on port 2 when

135
00:05:11,030 --> 00:05:15,109
a packet comes in and it's supposed to

136
00:05:12,470 --> 00:05:17,210
go to you know MAC address bar I send it

137
00:05:15,110 --> 00:05:19,039
out port 2 and vice versa

138
00:05:17,210 --> 00:05:21,349
so it's really just supposed to be doing

139
00:05:19,039 --> 00:05:24,349
this you know addressing based on MAC

140
00:05:21,349 --> 00:05:26,360
address so but that's actually not

141
00:05:24,349 --> 00:05:28,099
really all that true we if we look a

142
00:05:26,360 --> 00:05:29,930
little bit more deeply at network

143
00:05:28,099 --> 00:05:32,330
switches so we need to look a little

144
00:05:29,930 --> 00:05:35,990
more deeply at this actual easy street

145
00:05:32,330 --> 00:05:37,550
chip so the kind of official story is

146
00:05:35,990 --> 00:05:38,990
that it's just a packet matching engine

147
00:05:37,550 --> 00:05:41,479
but you know these things are really

148
00:05:38,990 --> 00:05:43,220
configurable in fact most network

149
00:05:41,479 --> 00:05:44,960
switches if you can find the data sheets

150
00:05:43,220 --> 00:05:47,659
for them you'll find out that they're

151
00:05:44,960 --> 00:05:49,489
not just meant to be used in a switch

152
00:05:47,659 --> 00:05:51,650
they're usually meant to be used in a

153
00:05:49,490 --> 00:05:53,930
variety of equipment like the same

154
00:05:51,650 --> 00:05:55,190
switch chip can be used in switches and

155
00:05:53,930 --> 00:05:58,220
routers and they have a lot of

156
00:05:55,190 --> 00:06:00,289
provisions for routing packets to an

157
00:05:58,220 --> 00:06:03,139
internal CPU and we'll we'll look at

158
00:06:00,289 --> 00:06:05,120
some of that in this talk but really the

159
00:06:03,139 --> 00:06:06,740
the key thing here they said I wanted to

160
00:06:05,120 --> 00:06:08,720
avoid like chip isms

161
00:06:06,740 --> 00:06:11,990
so I wanted to avoid any techniques that

162
00:06:08,720 --> 00:06:14,510
were specific to one type of Ethernet

163
00:06:11,990 --> 00:06:16,010
switch chip and I wanted to look at more

164
00:06:14,510 --> 00:06:18,080
generic techniques for manipulating

165
00:06:16,010 --> 00:06:20,180
packets and it turns out that there's

166
00:06:18,080 --> 00:06:22,359
two interesting features VLAN tagging

167
00:06:20,180 --> 00:06:25,389
and port mirroring can be pretty harmful

168
00:06:22,360 --> 00:06:28,190
when you know put in the wrong hands

169
00:06:25,389 --> 00:06:30,409
switch chips as a little background our

170
00:06:28,190 --> 00:06:32,240
configured via this protocol called MB

171
00:06:30,409 --> 00:06:33,560
i/o I think it stands for multi data in

172
00:06:32,240 --> 00:06:36,139
out I have to look at the Wikipedia page

173
00:06:33,560 --> 00:06:37,820
again I don't even remember but it's

174
00:06:36,139 --> 00:06:39,979
best to think of it as a little serial

175
00:06:37,820 --> 00:06:41,479
protocol that lets you read and write

176
00:06:39,979 --> 00:06:44,120
the configuration register

177
00:06:41,479 --> 00:06:46,938
of the switch fabric in the case of the

178
00:06:44,120 --> 00:06:48,949
six net eg 9ms there's not a whole lot

179
00:06:46,939 --> 00:06:50,839
to it but we'll look at it anyway the

180
00:06:48,949 --> 00:06:54,050
operating system it turns out can do a

181
00:06:50,839 --> 00:06:56,089
lot of the the gory details for us so

182
00:06:54,050 --> 00:06:58,490
this is the marvel

183
00:06:56,089 --> 00:07:01,039
Easy Street switch fabric that lives

184
00:06:58,490 --> 00:07:03,770
inside of this 89 m/s Ethernet switch

185
00:07:01,039 --> 00:07:06,020
and remember this is an 89 m/s right

186
00:07:03,770 --> 00:07:08,539
it's got nine network ports but kind of

187
00:07:06,020 --> 00:07:10,998
a pop quiz how many ports are actually

188
00:07:08,539 --> 00:07:13,580
on the switch chip that's inside of it

189
00:07:10,999 --> 00:07:16,189
and if you count they start at zero and

190
00:07:13,580 --> 00:07:18,349
end at nine and there are actually ten

191
00:07:16,189 --> 00:07:20,150
ports that's kind of interesting right

192
00:07:18,349 --> 00:07:21,949
you're thinking to yourself like why are

193
00:07:20,150 --> 00:07:23,719
there ten ports on this nine port

194
00:07:21,949 --> 00:07:25,400
Ethernet switch and this is kind of a

195
00:07:23,719 --> 00:07:27,770
dirty secret of all managed network

196
00:07:25,400 --> 00:07:30,560
switches right if they have a management

197
00:07:27,770 --> 00:07:33,469
service like a web service or an SSH or

198
00:07:30,560 --> 00:07:35,120
telnet service that lets you manage the

199
00:07:33,469 --> 00:07:37,189
Ethernet switch there's kind of an

200
00:07:35,120 --> 00:07:39,529
invisible switch port inside and that's

201
00:07:37,189 --> 00:07:42,499
connected to the little micro controller

202
00:07:39,529 --> 00:07:45,409
in this case is is that arm9 CPU that

203
00:07:42,499 --> 00:07:48,259
runs at 200 megahertz then usually

204
00:07:45,409 --> 00:07:52,639
switch makers the switch fabric makers

205
00:07:48,259 --> 00:07:55,099
will leave a couple of their ports not

206
00:07:52,639 --> 00:08:00,560
connected to any and the reading

207
00:07:55,099 --> 00:08:03,390
would be of you blob those can what are

208
00:08:00,560 --> 00:08:05,780
they called GB iced tea

209
00:08:03,390 --> 00:08:11,000
you can plug in maybe like a fiber

210
00:08:05,780 --> 00:08:11,000
connector for an uplink as well as

211
00:08:12,060 --> 00:08:15,060
now

212
00:08:15,320 --> 00:08:21,270
so for all of these layer 2 switches

213
00:08:19,250 --> 00:08:23,460
they

214
00:08:21,270 --> 00:08:25,229
actually become routers and even packet

215
00:08:23,460 --> 00:08:28,289
filters and will look exactly at how

216
00:08:25,230 --> 00:08:30,420
that works so the steps to actually turn

217
00:08:28,290 --> 00:08:33,090
a regular old network switch into a

218
00:08:30,420 --> 00:08:37,190
packet filter are learning what switch

219
00:08:33,090 --> 00:08:39,530
port matches to that in a little CPU

220
00:08:37,190 --> 00:08:41,599
the i/o commands to reconfigure the

221
00:08:39,530 --> 00:08:44,390
switch fabric and then you have to come

222
00:08:41,599 --> 00:08:46,400
up with some neat attacks to change the

223
00:08:44,390 --> 00:08:47,689
configuration and we still don't really

224
00:08:46,400 --> 00:08:51,199
know how to profit off of this but

225
00:08:47,690 --> 00:08:53,540
that's that's okay so step one this is

226
00:08:51,200 --> 00:08:57,200
the you know figuring out what ports

227
00:08:53,540 --> 00:08:59,000
match to the internal CPU there's a

228
00:08:57,200 --> 00:09:00,440
couple of ways to go about this one is

229
00:08:59,000 --> 00:09:03,230
if you've got the hardware on your desk

230
00:09:00,440 --> 00:09:05,630
you could take it apart and start no

231
00:09:03,230 --> 00:09:08,030
tracing out leads and seeing what's

232
00:09:05,630 --> 00:09:10,520
connected to what this switch turns out

233
00:09:08,030 --> 00:09:12,980
there is a nice way to cheat in the SC

234
00:09:10,520 --> 00:09:15,740
directory on the switch firmware there

235
00:09:12,980 --> 00:09:19,120
is this little swm config file that

236
00:09:15,740 --> 00:09:23,600
actually maps out the case port to

237
00:09:19,120 --> 00:09:26,990
internal port on the switch fabric and

238
00:09:23,600 --> 00:09:29,270
in this case the case port 0 which is

239
00:09:26,990 --> 00:09:34,190
the a sport that does not exist connects

240
00:09:29,270 --> 00:09:36,980
up to port 9 on the switch fabric and so

241
00:09:34,190 --> 00:09:39,590
we knew it would probably be port 8 or 9

242
00:09:36,980 --> 00:09:41,750
if we go back to this datasheet port 8

243
00:09:39,590 --> 00:09:45,350
and 4/9 are the two that don't have a

244
00:09:41,750 --> 00:09:46,610
Phi attached to the switch so it would

245
00:09:45,350 --> 00:09:50,420
probably be one of those two and it

246
00:09:46,610 --> 00:09:51,830
turns out to be port 9 so next up we

247
00:09:50,420 --> 00:09:54,290
need to kind of figure out how to

248
00:09:51,830 --> 00:09:57,050
manipulate the switch configuration so

249
00:09:54,290 --> 00:09:59,510
this is a couple of different steps the

250
00:09:57,050 --> 00:10:01,370
easy part quote-unquote was to start

251
00:09:59,510 --> 00:10:04,040
looking around the actual switch

252
00:10:01,370 --> 00:10:05,720
firmware and seeing how the web

253
00:10:04,040 --> 00:10:08,630
interface did it and the web interface

254
00:10:05,720 --> 00:10:10,880
does the switch chip configuration using

255
00:10:08,630 --> 00:10:14,360
this library file called Lib estelle

256
00:10:10,880 --> 00:10:16,820
umso and this is the library because we

257
00:10:14,360 --> 00:10:19,010
saw that that swm config being the thing

258
00:10:16,820 --> 00:10:23,060
that defines what port connects up to

259
00:10:19,010 --> 00:10:25,040
what switch channel this Lib SW ASO

260
00:10:23,060 --> 00:10:26,540
turns out to be the library responsible

261
00:10:25,040 --> 00:10:29,120
for issuing commands to the switch

262
00:10:26,540 --> 00:10:31,790
fabric and then once we you know kind of

263
00:10:29,120 --> 00:10:33,080
have that lib SW MSO shared library

264
00:10:31,790 --> 00:10:35,510
figured out we'll have to start

265
00:10:33,080 --> 00:10:36,530
compiling our own code of course we're

266
00:10:35,510 --> 00:10:39,560
going to need to generate a little

267
00:10:36,530 --> 00:10:42,770
header file for that Lib swm in order to

268
00:10:39,560 --> 00:10:45,890
write some of our own code and use a

269
00:10:42,770 --> 00:10:47,600
compatible cross compiler to do it so

270
00:10:45,890 --> 00:10:49,960
let's take a look at what's all involved

271
00:10:47,600 --> 00:10:51,080
in this well we start loading this Lib

272
00:10:49,960 --> 00:10:52,610
SWS

273
00:10:51,080 --> 00:10:54,920
while you know we put it into our

274
00:10:52,610 --> 00:10:56,570
favorite disassembler and we find that

275
00:10:54,920 --> 00:10:58,010
hey there's a bunch of you know this

276
00:10:56,570 --> 00:11:00,350
thing is actually compiled with debug

277
00:10:58,010 --> 00:11:03,110
symbols first off all the exports of

278
00:11:00,350 --> 00:11:05,630
course are named there's a lot of useful

279
00:11:03,110 --> 00:11:08,180
functions one of the useful functions is

280
00:11:05,630 --> 00:11:10,100
this function called registered dump and

281
00:11:08,180 --> 00:11:11,989
register dump when we start looking

282
00:11:10,100 --> 00:11:14,480
through it looks like it reads out all

283
00:11:11,990 --> 00:11:16,880
of the configuration registers from the

284
00:11:14,480 --> 00:11:18,680
switch fabric and prints them out to

285
00:11:16,880 --> 00:11:20,030
standard out so that's cool

286
00:11:18,680 --> 00:11:22,489
now we need to figure out how to

287
00:11:20,030 --> 00:11:24,380
actually use this register dump thing so

288
00:11:22,490 --> 00:11:27,620
we can see that it takes an argument on

289
00:11:24,380 --> 00:11:29,630
register r0 and then starts treating it

290
00:11:27,620 --> 00:11:32,420
as a data structure that it passes to

291
00:11:29,630 --> 00:11:35,450
the jmd i/o read function down at the

292
00:11:32,420 --> 00:11:38,360
bottom of this block of assembly code so

293
00:11:35,450 --> 00:11:40,100
we know that it takes 1 arguments this

294
00:11:38,360 --> 00:11:42,110
register dump function apparently it's

295
00:11:40,100 --> 00:11:43,940
some kind of big data structure if we

296
00:11:42,110 --> 00:11:45,980
start like really looking through the

297
00:11:43,940 --> 00:11:48,530
code it looks kind of like this data

298
00:11:45,980 --> 00:11:52,370
structure that's published in the Linux

299
00:11:48,530 --> 00:11:54,579
kernel source called an MI I bus struct

300
00:11:52,370 --> 00:11:58,220
which is usually used for configuring

301
00:11:54,580 --> 00:12:00,380
ethernet phy but it's some fields in it

302
00:11:58,220 --> 00:12:01,580
don't quite line up so we just thought

303
00:12:00,380 --> 00:12:03,200
you know go back to looking at the

304
00:12:01,580 --> 00:12:04,940
shared library and saying you know what

305
00:12:03,200 --> 00:12:07,160
other interesting functions are there

306
00:12:04,940 --> 00:12:10,130
here well it turns out to be a function

307
00:12:07,160 --> 00:12:13,699
called find SW m that takes no arguments

308
00:12:10,130 --> 00:12:15,620
and returns a pointer to a weird data

309
00:12:13,700 --> 00:12:18,890
structure that looks also a lot like an

310
00:12:15,620 --> 00:12:22,490
mi IBUs struct so maybe we just call

311
00:12:18,890 --> 00:12:25,040
this function and see if it works so we

312
00:12:22,490 --> 00:12:28,490
write our own little C file that you

313
00:12:25,040 --> 00:12:32,150
know calls voids out find SW M so it

314
00:12:28,490 --> 00:12:34,280
returns a void pointer we call find SW m

315
00:12:32,150 --> 00:12:36,260
and assign it to our void pointer thing

316
00:12:34,280 --> 00:12:38,030
and then we call a register dump with

317
00:12:36,260 --> 00:12:40,310
the parameter thing and see what happens

318
00:12:38,030 --> 00:12:43,089
and it turns out that we get the output

319
00:12:40,310 --> 00:12:46,010
that's valid so we get the tool that

320
00:12:43,090 --> 00:12:48,920
outputs our global registers when we

321
00:12:46,010 --> 00:12:51,710
start looking through the Marvel Easy

322
00:12:48,920 --> 00:12:53,780
Street datasheet we find out that all of

323
00:12:51,710 --> 00:12:55,160
these register configurations match up

324
00:12:53,780 --> 00:12:57,530
to what we expect you know they match up

325
00:12:55,160 --> 00:12:59,390
to okay this thing is the target me

326
00:12:57,530 --> 00:13:01,280
report you know this port is the target

327
00:12:59,390 --> 00:13:03,410
me report this port is the source me

328
00:13:01,280 --> 00:13:04,880
report all these bits work if I change

329
00:13:03,410 --> 00:13:06,709
the configuration

330
00:13:04,880 --> 00:13:09,199
using the web application and then run

331
00:13:06,709 --> 00:13:12,018
this register dump tool again again we

332
00:13:09,199 --> 00:13:14,810
get the information we expect from the

333
00:13:12,019 --> 00:13:16,519
switches configuration registers so

334
00:13:14,810 --> 00:13:19,910
awesome so we've solved our first

335
00:13:16,519 --> 00:13:23,149
challenge so that's kind of a nut with

336
00:13:19,910 --> 00:13:26,420
the engineering of the the actual ndio

337
00:13:23,149 --> 00:13:28,399
protocol actually there are two

338
00:13:26,420 --> 00:13:31,819
functions that are most important in

339
00:13:28,399 --> 00:13:36,319
this live swm those are the MD IO read

340
00:13:31,819 --> 00:13:39,410
and MT IO write functions they take the

341
00:13:36,319 --> 00:13:41,540
you know weird mi I bus looking struct

342
00:13:39,410 --> 00:13:43,579
thing as a parameter and then they also

343
00:13:41,540 --> 00:13:46,459
take you know a register number and a

344
00:13:43,579 --> 00:13:48,170
new value to set in the case of read and

345
00:13:46,459 --> 00:13:50,149
they also take the actual you know

346
00:13:48,170 --> 00:13:52,160
channel number parameter so that's like

347
00:13:50,149 --> 00:13:55,250
which port or is it that we're

348
00:13:52,160 --> 00:13:57,910
reconfiguring so we need to make our own

349
00:13:55,250 --> 00:14:00,290
little header file that has these

350
00:13:57,910 --> 00:14:02,389
entries in the header file so that we

351
00:14:00,290 --> 00:14:06,349
can actually use MB i/o read and MDI oh

352
00:14:02,389 --> 00:14:07,579
right and that's cool and then we start

353
00:14:06,350 --> 00:14:09,350
looking through the data sheets and

354
00:14:07,579 --> 00:14:11,719
seeing okay what exactly can we

355
00:14:09,350 --> 00:14:14,509
configure you know here is the ingress

356
00:14:11,720 --> 00:14:17,600
monitor bit you know if you set this bit

357
00:14:14,509 --> 00:14:19,759
then the monitor or mirror mode is going

358
00:14:17,600 --> 00:14:22,910
to be looking into this particular port

359
00:14:19,759 --> 00:14:25,610
and you know giving its output to the

360
00:14:22,910 --> 00:14:27,350
destination me report so we just need to

361
00:14:25,610 --> 00:14:29,990
start figuring out how some of this

362
00:14:27,350 --> 00:14:32,300
stuff works and you know how we're going

363
00:14:29,990 --> 00:14:33,920
to use those register write functions

364
00:14:32,300 --> 00:14:37,069
specifically to overwrite the values

365
00:14:33,920 --> 00:14:39,050
here so we built our own little

366
00:14:37,069 --> 00:14:41,149
application to use the library you can

367
00:14:39,050 --> 00:14:43,849
grab the source code if you want to play

368
00:14:41,149 --> 00:14:48,740
along at home sunday it's on github

369
00:14:43,850 --> 00:14:50,329
under readme first / 6 net 9 NS and the

370
00:14:48,740 --> 00:14:53,300
cross build environment which I didn't

371
00:14:50,329 --> 00:14:54,949
talk about is it's pretty easy to figure

372
00:14:53,300 --> 00:15:01,149
out because if you start looking through

373
00:14:54,949 --> 00:15:01,149
all the shared libraries on the MA

374
00:15:02,989 --> 00:15:11,249
right-oh them as their cross build

375
00:15:07,980 --> 00:15:13,800
environment and you can go to the eld

376
00:15:11,249 --> 00:15:15,449
cave there a german-based company

377
00:15:13,800 --> 00:15:19,758
it made a whole bunch of cross-compiler

378
00:15:15,449 --> 00:15:19,758
that's for linux you can actually Oh

379
00:15:28,890 --> 00:15:34,380
things work beautiful really what I

380
00:15:31,620 --> 00:15:38,120
would have been doing like you want play

381
00:15:34,380 --> 00:15:38,120
up and biller networks with

382
00:15:38,320 --> 00:15:43,180
wanted to a cop

383
00:15:40,990 --> 00:15:45,550
and every time defenders are like oh I

384
00:15:43,180 --> 00:15:47,680
could write an IDs rule to detect your

385
00:15:45,550 --> 00:15:50,229
attack I always want to like one-up them

386
00:15:47,680 --> 00:15:52,149
or whatever so the first goal that I

387
00:15:50,230 --> 00:15:54,130
really had was like hey could I do

388
00:15:52,149 --> 00:15:56,170
something where I could manipulate near

389
00:15:54,130 --> 00:15:58,270
port traffic in other words make a fake

390
00:15:56,170 --> 00:16:00,250
fake mirror basically where it mirrors

391
00:15:58,270 --> 00:16:02,709
most of the traffic to the mirror ports

392
00:16:00,250 --> 00:16:05,320
your IBS sees what looks like normal

393
00:16:02,709 --> 00:16:07,390
network traffic but then hide stuff like

394
00:16:05,320 --> 00:16:10,660
hey maybe there's a particular you know

395
00:16:07,390 --> 00:16:13,959
source MAC address that I don't want the

396
00:16:10,660 --> 00:16:15,850
IDS to see something special and then

397
00:16:13,959 --> 00:16:17,680
the other question that I had was can we

398
00:16:15,850 --> 00:16:19,120
do any kind of like advanced packet

399
00:16:17,680 --> 00:16:23,529
filtering you know like hey can we take

400
00:16:19,120 --> 00:16:27,370
a network switch and either modify data

401
00:16:23,529 --> 00:16:29,770
between two hosts or you know just drop

402
00:16:27,370 --> 00:16:31,480
data between two hosts and like I said

403
00:16:29,770 --> 00:16:33,720
earlier we kind of want to avoid chip

404
00:16:31,480 --> 00:16:36,580
isms so this particular easy street chip

405
00:16:33,720 --> 00:16:39,490
it's really meant to be used and either

406
00:16:36,580 --> 00:16:41,170
a network switch or a router so it has a

407
00:16:39,490 --> 00:16:43,870
lot of features that you know let you

408
00:16:41,170 --> 00:16:45,310
say okay these two ports can talk to

409
00:16:43,870 --> 00:16:47,890
each other but they actually have to

410
00:16:45,310 --> 00:16:50,500
route through the CPU in order to do

411
00:16:47,890 --> 00:16:52,510
that we wanted to avoid doing that we

412
00:16:50,500 --> 00:16:55,060
wanted to look at more generic attacks

413
00:16:52,510 --> 00:16:56,620
that could be used against an Ethernet

414
00:16:55,060 --> 00:17:00,609
switch that maybe had a less capable

415
00:16:56,620 --> 00:17:02,020
switch fabric inside so normal port

416
00:17:00,610 --> 00:17:03,640
mirroring this is kind of what you do

417
00:17:02,020 --> 00:17:05,949
and again I'm an industrial guy so I

418
00:17:03,640 --> 00:17:07,900
have kind of an industrial focus like

419
00:17:05,949 --> 00:17:10,329
normally you would have you know let's

420
00:17:07,900 --> 00:17:12,939
say a hoax connected to one chord and an

421
00:17:10,329 --> 00:17:14,409
upstream LAN connected to another port

422
00:17:12,939 --> 00:17:16,240
and you would probably want to like

423
00:17:14,410 --> 00:17:18,040
mirror all the traffic to and from that

424
00:17:16,240 --> 00:17:20,050
upstream port since that's gonna

425
00:17:18,040 --> 00:17:22,449
probably represent you know at least the

426
00:17:20,050 --> 00:17:25,059
initial phases of an attack on your

427
00:17:22,449 --> 00:17:27,520
network and you want to put those over

428
00:17:25,059 --> 00:17:30,340
to a dedicated me report that your IDs

429
00:17:27,520 --> 00:17:33,280
is then hooked up to and monitoring so

430
00:17:30,340 --> 00:17:36,428
that's how normally how you know Mir

431
00:17:33,280 --> 00:17:38,050
ports work but in this case we're naming

432
00:17:36,429 --> 00:17:40,300
this attack the levirate attack after

433
00:17:38,050 --> 00:17:43,270
one of the switches get stitches crew

434
00:17:40,300 --> 00:17:45,309
Aaron Leverett he's a really cool guy we

435
00:17:43,270 --> 00:17:47,080
want to first find the port that the

436
00:17:45,309 --> 00:17:50,620
user is mirroring to and we do that

437
00:17:47,080 --> 00:17:52,899
using those you know those read MD IO

438
00:17:50,620 --> 00:17:53,939
commands to the switch chip and then

439
00:17:52,900 --> 00:17:56,850
doing some comparison

440
00:17:53,940 --> 00:17:58,860
of bits then we want to reconfigure the

441
00:17:56,850 --> 00:18:00,809
switch chip to redirect that port mirror

442
00:17:58,860 --> 00:18:02,729
and instead of directing it to the

443
00:18:00,809 --> 00:18:04,710
outside facing port we're gonna redirect

444
00:18:02,730 --> 00:18:06,659
the port mirror to the microcontroller

445
00:18:04,710 --> 00:18:11,250
that sits inside of the switch itself

446
00:18:06,659 --> 00:18:13,289
and then using the chip our processor

447
00:18:11,250 --> 00:18:15,539
that's on the switch itself will sniff

448
00:18:13,289 --> 00:18:17,039
the traffic will decide if the incoming

449
00:18:15,539 --> 00:18:19,710
packet is one that should actually be

450
00:18:17,039 --> 00:18:21,629
seen by the IDs or not and if it's

451
00:18:19,710 --> 00:18:23,370
supposed to be seen by the IDs meaning

452
00:18:21,629 --> 00:18:26,219
it's a benign packet I will just

453
00:18:23,370 --> 00:18:28,110
temporarily enable another mirror port

454
00:18:26,220 --> 00:18:32,340
but this time we'll define the be

455
00:18:28,110 --> 00:18:34,199
internal microcontrollers port on the

456
00:18:32,340 --> 00:18:36,870
switch fabric to be the source port

457
00:18:34,200 --> 00:18:38,789
we'll send to the packet then we'll

458
00:18:36,870 --> 00:18:41,699
disable the beer port on the

459
00:18:38,789 --> 00:18:44,370
microcontroller so what that looks like

460
00:18:41,700 --> 00:18:46,279
graphically is instead of mirroring our

461
00:18:44,370 --> 00:18:49,199
traffic from port 2 to our Mir port

462
00:18:46,279 --> 00:18:51,720
we're mirroring it to the internal CPU

463
00:18:49,200 --> 00:18:53,429
port and again you know the CPU is

464
00:18:51,720 --> 00:18:55,529
making some decision on whether or not

465
00:18:53,429 --> 00:18:57,919
the package should be seen and if the

466
00:18:55,529 --> 00:19:00,179
package should be seen it's replaying it

467
00:18:57,919 --> 00:19:02,279
so there's actually not a whole lot of

468
00:19:00,179 --> 00:19:04,350
code you need to pull off this attack so

469
00:19:02,279 --> 00:19:07,049
at 6 net the vendor in this case was

470
00:19:04,350 --> 00:19:09,570
kind enough to include Lib P cap on

471
00:19:07,049 --> 00:19:11,629
their switch already so all we had to do

472
00:19:09,570 --> 00:19:14,158
is grab the Lib key cab header files

473
00:19:11,629 --> 00:19:16,949
toss them into our you know cross

474
00:19:14,159 --> 00:19:20,580
compile environment and then write code

475
00:19:16,950 --> 00:19:23,429
that uses the MB IO read MBI oh right

476
00:19:20,580 --> 00:19:27,658
and fires up its own little peak app

477
00:19:23,429 --> 00:19:29,580
sniffer it turns out a fully linked fake

478
00:19:27,659 --> 00:19:32,220
mirror binary here that does this whole

479
00:19:29,580 --> 00:19:34,678
attack is under 12 kilobytes in size the

480
00:19:32,220 --> 00:19:37,350
flash file system on this is I remember

481
00:19:34,679 --> 00:19:39,840
it's 128 megabit flash chip I want to

482
00:19:37,350 --> 00:19:42,090
say there are like 3 maybe 4 megabytes

483
00:19:39,840 --> 00:19:44,490
free of flash based there's plenty more

484
00:19:42,090 --> 00:19:48,120
room to do other weird stuff and add

485
00:19:44,490 --> 00:19:50,070
your own utilities to this so there's

486
00:19:48,120 --> 00:19:53,428
two problems with this attack technique

487
00:19:50,070 --> 00:19:55,889
the first is that the real hosts are the

488
00:19:53,429 --> 00:19:58,740
real target will see duplicate packets

489
00:19:55,889 --> 00:20:01,439
it's not really a big deal you know most

490
00:19:58,740 --> 00:20:04,379
hosts if they see a duplicate transmit

491
00:20:01,440 --> 00:20:06,779
they don't really care the other problem

492
00:20:04,379 --> 00:20:07,689
is latency and this is a weird problem

493
00:20:06,779 --> 00:20:11,200
that

494
00:20:07,690 --> 00:20:13,990
it isn't easy to solve but also it seems

495
00:20:11,200 --> 00:20:16,149
like it's hard for normal intrusion

496
00:20:13,990 --> 00:20:18,389
detection systems to detect the extra

497
00:20:16,149 --> 00:20:22,539
latency that's introduced so normally

498
00:20:18,389 --> 00:20:29,129
there's about 1.2 milliseconds of trip

499
00:20:22,539 --> 00:20:29,129
time for you know typical wool ethic

500
00:20:33,730 --> 00:20:36,730
low-five

501
00:20:37,290 --> 00:20:41,610
so

502
00:20:39,180 --> 00:20:43,890
uh if somebody might notice that that

503
00:20:41,610 --> 00:20:46,050
they probably want another problem is

504
00:20:43,890 --> 00:20:47,880
that if somebody happens to log into

505
00:20:46,050 --> 00:20:50,669
this which is admin interface while

506
00:20:47,880 --> 00:20:53,640
we're doing this big gig could be up it

507
00:20:50,670 --> 00:20:55,350
depends on the specific situation and

508
00:20:53,640 --> 00:20:57,630
how the original port mirroring was

509
00:20:55,350 --> 00:20:59,520
working it can get a little bit dicey

510
00:20:57,630 --> 00:21:01,410
and something that we'd have to think

511
00:20:59,520 --> 00:21:03,180
about down the road I'm not gonna

512
00:21:01,410 --> 00:21:05,010
release the lever to tack code publicly

513
00:21:03,180 --> 00:21:09,540
but I did put those header files again

514
00:21:05,010 --> 00:21:11,760
on github to you know give you at least

515
00:21:09,540 --> 00:21:14,370
the tools to think about developing this

516
00:21:11,760 --> 00:21:16,890
on your own but it's pretty reliable IDs

517
00:21:14,370 --> 00:21:18,810
invasion or are you Bayesian and and one

518
00:21:16,890 --> 00:21:20,700
of the neat things is that the GUI is

519
00:21:18,810 --> 00:21:23,159
all filed that file space in other words

520
00:21:20,700 --> 00:21:27,210
if you log in to the switch admin

521
00:21:23,160 --> 00:21:29,880
interface and you know reconfigure the

522
00:21:27,210 --> 00:21:31,830
switch it looks only two files it

523
00:21:29,880 --> 00:21:33,360
doesn't actually pull the switch fabric

524
00:21:31,830 --> 00:21:35,699
to see what the configuration of the

525
00:21:33,360 --> 00:21:38,520
switch fabric is so by routing the

526
00:21:35,700 --> 00:21:40,770
switch you get stealth for free and

527
00:21:38,520 --> 00:21:42,510
probably most switches work this way

528
00:21:40,770 --> 00:21:45,180
although you know we've only looked at

529
00:21:42,510 --> 00:21:46,970
this one specifically the next attack

530
00:21:45,180 --> 00:21:49,950
we'll look at I call the client attack

531
00:21:46,970 --> 00:21:52,170
so mirroring you know all that mirror

532
00:21:49,950 --> 00:21:54,300
manipulation was really fun but another

533
00:21:52,170 --> 00:21:56,880
question came up was can we filtered

534
00:21:54,300 --> 00:21:58,440
network traffic and can we you know

535
00:21:56,880 --> 00:22:00,420
manipulate network traffic in other

536
00:21:58,440 --> 00:22:03,030
words go into the application layer of a

537
00:22:00,420 --> 00:22:05,850
packet and modify it on a network switch

538
00:22:03,030 --> 00:22:07,920
and we would do this without using you

539
00:22:05,850 --> 00:22:10,980
know something stupid like are poisoning

540
00:22:07,920 --> 00:22:12,810
where we kind of use the internal CPU to

541
00:22:10,980 --> 00:22:15,600
man-in-the-middle because you know our

542
00:22:12,810 --> 00:22:16,919
poisoning is noisy and everybody has our

543
00:22:15,600 --> 00:22:20,250
poison detection enabled on their

544
00:22:16,920 --> 00:22:21,630
network at this point right right I've

545
00:22:20,250 --> 00:22:23,490
asked this question at conferences

546
00:22:21,630 --> 00:22:24,690
before it been like show me or you know

547
00:22:23,490 --> 00:22:27,240
give me a show of hands and nobody

548
00:22:24,690 --> 00:22:29,070
raises their head but you can probably

549
00:22:27,240 --> 00:22:30,750
guess that the answer is yes we can do

550
00:22:29,070 --> 00:22:32,850
this kind of filtering because why would

551
00:22:30,750 --> 00:22:35,010
I be mentioning it talks light if they

552
00:22:32,850 --> 00:22:36,810
the answer weren't yes there's a lot of

553
00:22:35,010 --> 00:22:40,470
ways to pull it off of course the the

554
00:22:36,810 --> 00:22:42,570
most generic is to mirror the to target

555
00:22:40,470 --> 00:22:45,060
ports in other words the the host a and

556
00:22:42,570 --> 00:22:47,490
host B that you want to get between to

557
00:22:45,060 --> 00:22:49,440
the internal micro controller you can

558
00:22:47,490 --> 00:22:51,990
add VLAN tagging to make sure that those

559
00:22:49,440 --> 00:22:53,060
two ports are on separate VLANs so that

560
00:22:51,990 --> 00:22:55,490
they can't possibly

561
00:22:53,060 --> 00:22:57,050
directly with each other except through

562
00:22:55,490 --> 00:23:00,620
the microcontroller inside of the

563
00:22:57,050 --> 00:23:04,129
network switch so we what we're gonna do

564
00:23:00,620 --> 00:23:07,310
is use the me report and use the VLAN

565
00:23:04,130 --> 00:23:09,350
tagging to swap the internal

566
00:23:07,310 --> 00:23:12,889
microcontroller between the two of em

567
00:23:09,350 --> 00:23:16,310
VLANs during receipt and transmission of

568
00:23:12,890 --> 00:23:18,920
the packets that way we can effectively

569
00:23:16,310 --> 00:23:20,870
man in the middle without doing anything

570
00:23:18,920 --> 00:23:23,930
that actually introduces traffic on the

571
00:23:20,870 --> 00:23:26,570
network so the cool thing about

572
00:23:23,930 --> 00:23:29,000
industrial is that it's almost all pol

573
00:23:26,570 --> 00:23:32,030
response so we can actually kind of

574
00:23:29,000 --> 00:23:34,520
preemptively switch B lands with each

575
00:23:32,030 --> 00:23:36,740
request so that we're ready to transmit

576
00:23:34,520 --> 00:23:39,500
to the right port without having to

577
00:23:36,740 --> 00:23:42,050
issue another ndio command you know kind

578
00:23:39,500 --> 00:23:45,320
of in-between our packet manipulation

579
00:23:42,050 --> 00:23:46,610
it's already done for us so graphically

580
00:23:45,320 --> 00:23:48,500
this is what it looks like we've

581
00:23:46,610 --> 00:23:51,889
assigned our two systems to two separate

582
00:23:48,500 --> 00:23:55,040
VLANs the mirrored packet goes into the

583
00:23:51,890 --> 00:23:58,040
internal CPU the internal CPU modifies

584
00:23:55,040 --> 00:24:01,250
the packet switches itself over to VLAN

585
00:23:58,040 --> 00:24:04,149
2 and then transmits the packet as it

586
00:24:01,250 --> 00:24:04,150
looked originally

587
00:24:05,389 --> 00:24:11,899
all right so you know the the step four

588
00:24:09,829 --> 00:24:14,959
here is how do we profit right so

589
00:24:11,899 --> 00:24:17,149
consider that we can do this packet

590
00:24:14,959 --> 00:24:20,119
manipulation with DNS of course we have

591
00:24:17,149 --> 00:24:22,428
IDs to Beijing and consider also that

592
00:24:20,119 --> 00:24:24,649
this is an industrial network switch in

593
00:24:22,429 --> 00:24:26,749
the industrial space there's no TLS

594
00:24:24,649 --> 00:24:28,549
rapping on protocols for the most part I

595
00:24:26,749 --> 00:24:30,259
mean it's starting to get there but not

596
00:24:28,549 --> 00:24:32,929
usually most of these industrial

597
00:24:30,259 --> 00:24:35,659
protocols have no encryption they have

598
00:24:32,929 --> 00:24:37,969
no data integrity mechanism so you can

599
00:24:35,659 --> 00:24:39,559
modify traffic and do some some pretty

600
00:24:37,969 --> 00:24:43,159
terrible things with typical industrial

601
00:24:39,559 --> 00:24:44,719
protocol so who's vulnerable well almost

602
00:24:43,159 --> 00:24:46,429
any network switch that doesn't do

603
00:24:44,719 --> 00:24:48,619
firmware signing is gonna be vulnerable

604
00:24:46,429 --> 00:24:51,289
to this and a lot that do have it

605
00:24:48,619 --> 00:24:52,999
because remember that when you know

606
00:24:51,289 --> 00:24:55,759
network appliance like this has signed

607
00:24:52,999 --> 00:24:58,519
firmware most of the time they're only

608
00:24:55,759 --> 00:25:00,320
signing firmware updates but they never

609
00:24:58,519 --> 00:25:02,209
actually verify the integrity of a

610
00:25:00,320 --> 00:25:05,389
firmware that's already running so if

611
00:25:02,209 --> 00:25:07,219
you find you know an RTE or some kind of

612
00:25:05,389 --> 00:25:08,899
you know shell level vulnerability in a

613
00:25:07,219 --> 00:25:10,579
network switch you can modify the

614
00:25:08,899 --> 00:25:14,359
currently running firmware and there's

615
00:25:10,579 --> 00:25:15,918
no like detection of that and so this

616
00:25:14,359 --> 00:25:18,259
can really affect any network switch

617
00:25:15,919 --> 00:25:20,179
with a hidden CPU interface and that to

618
00:25:18,259 --> 00:25:22,309
tell if you have this I mean you could

619
00:25:20,179 --> 00:25:24,469
look up data sheets but basically if you

620
00:25:22,309 --> 00:25:27,918
plug the network switch in and you can

621
00:25:24,469 --> 00:25:31,039
access the switch via web or telnet or

622
00:25:27,919 --> 00:25:33,139
SSH and it has SNMP and all that sort of

623
00:25:31,039 --> 00:25:36,679
stuff then it has this hidden CPU

624
00:25:33,139 --> 00:25:39,289
interface inside so really think of

625
00:25:36,679 --> 00:25:41,809
these layer 2 switches as routers for

626
00:25:39,289 --> 00:25:43,908
the purposes of data integrity these

627
00:25:41,809 --> 00:25:45,799
switch rootkits probably already exist

628
00:25:43,909 --> 00:25:48,169
for popular switches would be my guest

629
00:25:45,799 --> 00:25:50,059
it's doubtful that a lot of the years

630
00:25:48,169 --> 00:25:51,589
patch these things and it's really

631
00:25:50,059 --> 00:25:53,299
impossible to audit these network

632
00:25:51,589 --> 00:25:55,759
switches without destroying them right

633
00:25:53,299 --> 00:25:58,579
this particular network switch I mean it

634
00:25:55,759 --> 00:26:00,889
happens to have you know JTAG pins and

635
00:25:58,579 --> 00:26:02,359
an internal serial console labeled but

636
00:26:00,889 --> 00:26:04,339
you'd have to go you know soldering

637
00:26:02,359 --> 00:26:07,039
stuff or at least connecting stuff

638
00:26:04,339 --> 00:26:08,479
inside and you might destroy the switch

639
00:26:07,039 --> 00:26:11,658
or at least you wouldn't want to use the

640
00:26:08,479 --> 00:26:13,909
switch after you do that really the only

641
00:26:11,659 --> 00:26:15,799
way to verify the integrity of this

642
00:26:13,909 --> 00:26:17,929
network switch is to modify the firmware

643
00:26:15,799 --> 00:26:19,350
to give yourself route access to it and

644
00:26:17,929 --> 00:26:21,740
by doing that your actual

645
00:26:19,350 --> 00:26:24,449
destroying evidence which kind of stinks

646
00:26:21,740 --> 00:26:27,450
so always manage your networks which is

647
00:26:24,450 --> 00:26:29,190
from dedicated management land monitor

648
00:26:27,450 --> 00:26:32,610
you should be monitoring network traffic

649
00:26:29,190 --> 00:26:34,679
to these admin interfaces you know make

650
00:26:32,610 --> 00:26:36,840
sure that your network management land

651
00:26:34,679 --> 00:26:38,850
is connected up to an IDs itself and

652
00:26:36,840 --> 00:26:40,470
you're preserving some peat caps and

653
00:26:38,850 --> 00:26:42,178
check out your network equipment you

654
00:26:40,470 --> 00:26:44,700
know check out to see if this Cisco

655
00:26:42,179 --> 00:26:46,980
smart install service is running on your

656
00:26:44,700 --> 00:26:49,260
Cisco switches and make sure that your

657
00:26:46,980 --> 00:26:51,059
met your your management interfaces

658
00:26:49,260 --> 00:26:54,809
aren't exposed on a network that you

659
00:26:51,059 --> 00:26:56,460
think that that is untrusted and that is

660
00:26:54,809 --> 00:26:58,590
the end so I'll take some questions I

661
00:26:56,460 --> 00:27:00,150
think we have like a minute or two if

662
00:26:58,590 --> 00:27:03,809
anybody's got them otherwise you can hit

663
00:27:00,150 --> 00:27:06,390
me up on the Twitter's as reverse ICS or

664
00:27:03,809 --> 00:27:09,350
cyber pacifists and I'll be around on

665
00:27:06,390 --> 00:27:09,350
the discord for a bit too

666
00:27:09,779 --> 00:27:19,299
cool awesome let's see do we have any

667
00:27:13,450 --> 00:27:24,600
questions from the I'm looking around

668
00:27:19,299 --> 00:27:24,600
here must be any questions but

