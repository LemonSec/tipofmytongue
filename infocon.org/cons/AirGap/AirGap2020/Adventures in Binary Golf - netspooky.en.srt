1
00:00:00,030 --> 00:00:04,650
that's spooky you can take it away hell

2
00:00:03,179 --> 00:00:08,580
yeah awesome yeah and thanks y'all for

3
00:00:04,650 --> 00:00:11,940
everything so yeah this is um this is my

4
00:00:08,580 --> 00:00:14,309
talk this is called adventures in binary

5
00:00:11,940 --> 00:00:17,340
golf so if you've seen some stuff that

6
00:00:14,309 --> 00:00:25,289
I've done I'm gonna power off this

7
00:00:17,340 --> 00:00:27,390
machine real quick anyways okay so if

8
00:00:25,289 --> 00:00:32,840
you see my stuff before I mean you know

9
00:00:27,390 --> 00:00:37,380
that I really love really small little

10
00:00:32,840 --> 00:00:39,510
old fineries so I like to make really

11
00:00:37,380 --> 00:00:43,730
tiny things and just do generally weird

12
00:00:39,510 --> 00:00:46,980
stuff with computers so and files so

13
00:00:43,730 --> 00:00:48,449
just I don't know how to use this too I

14
00:00:46,980 --> 00:00:53,610
never use slide that I use command line

15
00:00:48,450 --> 00:00:53,760
first up so yeah so alright let's go do

16
00:00:53,610 --> 00:00:57,809
it

17
00:00:53,760 --> 00:01:00,449
so Who am I this is a view or net spooky

18
00:00:57,809 --> 00:01:03,419
on Twitter and github my website is in

19
00:01:00,449 --> 00:01:08,429
zero lol and I do a lot of things with

20
00:01:03,420 --> 00:01:10,950
bugcrowd next slide here so talk outline

21
00:01:08,430 --> 00:01:12,479
it's real simple we are just going to be

22
00:01:10,950 --> 00:01:16,080
going over some file format hacking

23
00:01:12,479 --> 00:01:18,929
stuff some various case studies abuse

24
00:01:16,080 --> 00:01:21,658
use and abuse cases and different

25
00:01:18,930 --> 00:01:24,390
approaches to elf PE files and then some

26
00:01:21,659 --> 00:01:25,740
further reading resources so let's just

27
00:01:24,390 --> 00:01:27,509
do a little brief overview on file

28
00:01:25,740 --> 00:01:30,329
format hacking so there's been extensive

29
00:01:27,509 --> 00:01:32,400
research done into file format hacking

30
00:01:30,329 --> 00:01:34,399
different people doing stuff since files

31
00:01:32,400 --> 00:01:37,170
have been a thing people be messing with

32
00:01:34,400 --> 00:01:39,060
you know putting making tiny files

33
00:01:37,170 --> 00:01:40,979
putting files and other files we got

34
00:01:39,060 --> 00:01:42,030
it's awesome repo but the smallest

35
00:01:40,979 --> 00:01:45,090
possible files

36
00:01:42,030 --> 00:01:48,329
mims small anything is like a valid file

37
00:01:45,090 --> 00:01:50,130
is um you know catalog here the smallest

38
00:01:48,329 --> 00:01:51,389
possible versions of it there's also a

39
00:01:50,130 --> 00:01:53,329
lot of cool research and stuff like

40
00:01:51,390 --> 00:01:56,909
polyglot files you may have heard of

41
00:01:53,329 --> 00:01:58,469
chimeras it's a phrenic files tons of

42
00:01:56,909 --> 00:02:00,180
stuff like that you name it those kind

43
00:01:58,469 --> 00:02:01,500
of things have been endlessly research

44
00:02:00,180 --> 00:02:04,229
there's a lot of really great research

45
00:02:01,500 --> 00:02:06,689
especially by and Albertini posted a lot

46
00:02:04,229 --> 00:02:09,538
of stuff in POC or GTFO if you want to

47
00:02:06,689 --> 00:02:11,370
see issue 7 article 6 abusing file

48
00:02:09,538 --> 00:02:14,100
formats is a really good primer on a lot

49
00:02:11,370 --> 00:02:15,870
of that and then also this really

50
00:02:14,100 --> 00:02:18,150
I just threw it here cuz VI great text

51
00:02:15,870 --> 00:02:21,420
in the chat VA great tech made a game

52
00:02:18,150 --> 00:02:23,730
boy ROM NES PDF HTML and zip file

53
00:02:21,420 --> 00:02:30,329
polyglot which is like I think the most

54
00:02:23,730 --> 00:02:33,480
I've ever seen is really awesome so once

55
00:02:30,330 --> 00:02:36,780
again keep clicking out of the way

56
00:02:33,480 --> 00:02:39,149
window so if you've done a thug crow

57
00:02:36,780 --> 00:02:41,130
challenge before one of our chat

58
00:02:39,150 --> 00:02:43,260
challenges or one of our just general

59
00:02:41,130 --> 00:02:46,590
CTF challenges you may have seen

60
00:02:43,260 --> 00:02:47,760
polyglot files before so this is an

61
00:02:46,590 --> 00:02:49,440
example I just wanted to throw in here

62
00:02:47,760 --> 00:02:50,660
for file format hacking this is the

63
00:02:49,440 --> 00:02:52,950
background if you've never done before

64
00:02:50,660 --> 00:02:55,740
this is bad gif

65
00:02:52,950 --> 00:02:59,609
so in Kuni 18 we did a challenge for Def

66
00:02:55,740 --> 00:03:03,540
Con for a custom Def Con badge and so it

67
00:02:59,610 --> 00:03:05,400
was a gif file where there's a polygon

68
00:03:03,540 --> 00:03:08,040
file was a bunch of stuff in it so there

69
00:03:05,400 --> 00:03:10,020
is a you know gif a gameboy ROM and a

70
00:03:08,040 --> 00:03:11,519
zip archive or the main ones to actually

71
00:03:10,020 --> 00:03:14,150
look at but there was like an elf

72
00:03:11,520 --> 00:03:17,250
there's like a Commodore 64

73
00:03:14,150 --> 00:03:20,190
demo there's some like Jas hook there

74
00:03:17,250 --> 00:03:22,530
was like a bunch of ASCII art so I've

75
00:03:20,190 --> 00:03:24,920
never been in scenes before it's a lot

76
00:03:22,530 --> 00:03:26,970
of files in there and they're all valid

77
00:03:24,920 --> 00:03:29,070
so if you want to see other ones to

78
00:03:26,970 --> 00:03:30,960
others an example I'll top of my head is

79
00:03:29,070 --> 00:03:33,480
the spider-man frozen elsa challenge

80
00:03:30,960 --> 00:03:35,580
from last year which is a polyglot that

81
00:03:33,480 --> 00:03:38,070
was used it's a youtube subtitle file

82
00:03:35,580 --> 00:03:39,570
with a hidden JPEG in it you could only

83
00:03:38,070 --> 00:03:41,940
see if you downloaded the subtitle file

84
00:03:39,570 --> 00:03:43,019
and so for stuff like the Pogo file you

85
00:03:41,940 --> 00:03:44,790
can create with a hex editor

86
00:03:43,020 --> 00:03:47,100
some people use assemblers there's other

87
00:03:44,790 --> 00:03:48,600
tools you can use I generally use a hex

88
00:03:47,100 --> 00:03:51,960
editor just because it's easier for me

89
00:03:48,600 --> 00:03:54,060
to come app things out so the internals

90
00:03:51,960 --> 00:03:56,490
of this file just for curiosity's sake

91
00:03:54,060 --> 00:04:00,060
so we have a gift at the top of the of

92
00:03:56,490 --> 00:04:01,140
the file as offset 0 0 0 it's like a

93
00:04:00,060 --> 00:04:03,930
very tiny gift

94
00:04:01,140 --> 00:04:06,239
there are 28 bytes there's some random

95
00:04:03,930 --> 00:04:11,520
asking yard and then there's Ana Gameboy

96
00:04:06,240 --> 00:04:13,860
header 0 X 100 and then a very end of

97
00:04:11,520 --> 00:04:17,040
the file is a zip file that contains a

98
00:04:13,860 --> 00:04:18,420
text file and so basically he goes in

99
00:04:17,040 --> 00:04:21,510
the process of it if you go back to this

100
00:04:18,420 --> 00:04:23,970
sucker DICOM slash Chau slash bad shop

101
00:04:21,510 --> 00:04:25,140
gif you can go through it yourself but

102
00:04:23,970 --> 00:04:27,570
picking it apart and dude in the file

103
00:04:25,140 --> 00:04:29,640
forensics you see that there's a valid

104
00:04:27,570 --> 00:04:31,469
give at the top there all the rest of

105
00:04:29,640 --> 00:04:33,599
the bytes are ignored and then there's a

106
00:04:31,470 --> 00:04:35,880
zip file at the end of this Gameboy ROM

107
00:04:33,600 --> 00:04:37,590
which is really the base file because

108
00:04:35,880 --> 00:04:40,770
the Gameboy ROM itself doesn't care

109
00:04:37,590 --> 00:04:44,580
about anything it happens that above 0 X

110
00:04:40,770 --> 00:04:46,560
100 so that's just a basic primer on on

111
00:04:44,580 --> 00:04:48,780
being able to stuff files into

112
00:04:46,560 --> 00:04:53,220
themselves and stuff random you know put

113
00:04:48,780 --> 00:04:55,890
her in filed around so when I talk about

114
00:04:53,220 --> 00:04:57,960
this this leads into binary Gulf so

115
00:04:55,890 --> 00:04:59,760
binary Gulf is the practice of crafting

116
00:04:57,960 --> 00:05:03,330
the smallest possible mock binary that

117
00:04:59,760 --> 00:05:05,340
still performs a given function so you

118
00:05:03,330 --> 00:05:07,409
know any file that is is you know super

119
00:05:05,340 --> 00:05:09,960
duper tiny but it still actually works

120
00:05:07,410 --> 00:05:11,700
whether or not any other tools or

121
00:05:09,960 --> 00:05:13,919
software can understand it all it really

122
00:05:11,700 --> 00:05:16,530
matters is the operating systems running

123
00:05:13,920 --> 00:05:18,630
it can understand it and execute it so

124
00:05:16,530 --> 00:05:20,880
these can be created with or a lot of

125
00:05:18,630 --> 00:05:23,880
compiler I generally don't use a

126
00:05:20,880 --> 00:05:25,950
compiler to do these I basically just

127
00:05:23,880 --> 00:05:28,140
use NASM and a hex editor if I have to

128
00:05:25,950 --> 00:05:29,490
do any any mistakes you can you can use

129
00:05:28,140 --> 00:05:32,310
like phazon or any other sort of

130
00:05:29,490 --> 00:05:34,820
assembler if you want to I have seen

131
00:05:32,310 --> 00:05:38,510
people do binary golfing with GCC

132
00:05:34,820 --> 00:05:40,980
anonymous if you're listening he's

133
00:05:38,510 --> 00:05:43,530
definitely made some very tiny things

134
00:05:40,980 --> 00:05:45,840
with GCC and some crazy linker scripts

135
00:05:43,530 --> 00:05:47,219
but it's a lot of work to do that and

136
00:05:45,840 --> 00:05:48,359
it's generally a lot easier if you're

137
00:05:47,220 --> 00:05:52,410
going to play around with this to use

138
00:05:48,360 --> 00:05:56,160
NASM so what are the use cases for a

139
00:05:52,410 --> 00:05:58,230
kind binary so there's a lot you can do

140
00:05:56,160 --> 00:06:00,540
basically anything on here there's anti

141
00:05:58,230 --> 00:06:03,600
debug anti forensics you can prototype

142
00:06:00,540 --> 00:06:06,620
exploits and shellcode AV and detection

143
00:06:03,600 --> 00:06:10,920
bypasses file upload filter bypasses

144
00:06:06,620 --> 00:06:13,860
fuzzing malware loaders and fun and do

145
00:06:10,920 --> 00:06:16,410
it's all the above is pretty fun so

146
00:06:13,860 --> 00:06:18,720
here's some examples here the top one is

147
00:06:16,410 --> 00:06:20,640
a GUID drah not being able to read an

148
00:06:18,720 --> 00:06:22,680
elf file that I made

149
00:06:20,640 --> 00:06:24,960
there's also s trace that I was using to

150
00:06:22,680 --> 00:06:27,330
analyze an elf file but seg faulted

151
00:06:24,960 --> 00:06:31,049
because I ran it trying to trace this

152
00:06:27,330 --> 00:06:33,810
calls there's also some like borked

153
00:06:31,050 --> 00:06:38,669
output from Reno and the very bottom is

154
00:06:33,810 --> 00:06:41,550
a completely crashed so called VM on an

155
00:06:38,669 --> 00:06:44,479
ESX host because of a file that I

156
00:06:41,550 --> 00:06:48,210
I had Rome that corrupted the VM image

157
00:06:44,480 --> 00:06:50,820
so approaches to binary golf similar to

158
00:06:48,210 --> 00:06:52,979
polygon files but basically we start off

159
00:06:50,820 --> 00:06:54,870
by examining the binaries file structure

160
00:06:52,980 --> 00:06:57,690
so every binary is going to have headers

161
00:06:54,870 --> 00:07:00,060
gonna have sections you know different

162
00:06:57,690 --> 00:07:02,010
parts where data is stored so you want

163
00:07:00,060 --> 00:07:03,540
to really like understand what the

164
00:07:02,010 --> 00:07:05,219
actual binary structure looks like and

165
00:07:03,540 --> 00:07:07,440
there's tons of tools for them there's

166
00:07:05,220 --> 00:07:10,080
read elf there's tons of things for you

167
00:07:07,440 --> 00:07:10,830
know pease basically just being able to

168
00:07:10,080 --> 00:07:18,300
understand what are the different

169
00:07:10,830 --> 00:07:19,680
components of a binary and being able to

170
00:07:18,300 --> 00:07:21,810
like understand how they all fit

171
00:07:19,680 --> 00:07:23,820
together so you can do a lot of this by

172
00:07:21,810 --> 00:07:26,220
also analyzing specifications of the

173
00:07:23,820 --> 00:07:28,680
binaries or if there's an RFC or some

174
00:07:26,220 --> 00:07:30,350
dev notes I'm gonna be able to get a bit

175
00:07:28,680 --> 00:07:32,640
more understanding about the format

176
00:07:30,350 --> 00:07:34,320
there's also and like you know open

177
00:07:32,640 --> 00:07:36,210
source parsers for files that you can

178
00:07:34,320 --> 00:07:37,560
analyze that will you know allow you to

179
00:07:36,210 --> 00:07:40,770
get a little bit more insight into how

180
00:07:37,560 --> 00:07:43,530
those actual parsers look at and

181
00:07:40,770 --> 00:07:45,419
understand in the file and so once you

182
00:07:43,530 --> 00:07:47,070
get a good handle on that you can start

183
00:07:45,420 --> 00:07:49,140
slowly removing things that you don't

184
00:07:47,070 --> 00:07:51,510
need and so whether that's zeroing out

185
00:07:49,140 --> 00:07:53,640
sections or patching you know specific

186
00:07:51,510 --> 00:07:55,920
parts of the binary that are pointing to

187
00:07:53,640 --> 00:07:57,690
different structures or seeing if you

188
00:07:55,920 --> 00:08:01,440
can override certain things you know

189
00:07:57,690 --> 00:08:04,800
what happens you can also use a fuzzer

190
00:08:01,440 --> 00:08:06,480
to generate small binaries or you know

191
00:08:04,800 --> 00:08:08,520
binaries in general that that have

192
00:08:06,480 --> 00:08:10,080
certain sections fuzz and try to run

193
00:08:08,520 --> 00:08:12,690
them seen a lot of cool tests with that

194
00:08:10,080 --> 00:08:15,599
too and you can also use binary dipping

195
00:08:12,690 --> 00:08:18,090
so if you say you get a regular compiled

196
00:08:15,600 --> 00:08:19,440
binary and a stripped binary you can

197
00:08:18,090 --> 00:08:20,909
look at the differences between those

198
00:08:19,440 --> 00:08:23,310
and see where the extra sections are

199
00:08:20,910 --> 00:08:25,200
that were taken away and so it's there's

200
00:08:23,310 --> 00:08:26,970
a lot of different tools that come come

201
00:08:25,200 --> 00:08:29,550
into play and there's no one right way

202
00:08:26,970 --> 00:08:31,230
to do it but whatever works for you and

203
00:08:29,550 --> 00:08:34,080
your workflow is you know all that

204
00:08:31,230 --> 00:08:36,240
really matters so let's start off with

205
00:08:34,080 --> 00:08:40,200
the ones that you may have seen the most

206
00:08:36,240 --> 00:08:41,669
these are elf 64 so elf files are

207
00:08:40,200 --> 00:08:43,710
binaries that run on Linux they're

208
00:08:41,669 --> 00:08:46,800
executables so if you run Linux and say

209
00:08:43,710 --> 00:08:49,410
have zoom you know zooms gonna be

210
00:08:46,800 --> 00:08:53,250
compiled as an elf file when it runs on

211
00:08:49,410 --> 00:08:56,209
Linux which notoriously cos I have a SLR

212
00:08:53,250 --> 00:09:03,540
or a bunch of other things there

213
00:08:56,210 --> 00:09:05,550
so before they have a lot of so these

214
00:09:03,540 --> 00:09:07,860
include debug symbols all those things

215
00:09:05,550 --> 00:09:09,359
that a debugger might use to understand

216
00:09:07,860 --> 00:09:12,560
more about the file you know it could be

217
00:09:09,360 --> 00:09:14,580
everything from you know certain

218
00:09:12,560 --> 00:09:16,319
function names and variable names all

219
00:09:14,580 --> 00:09:18,080
the way to like the path and the

220
00:09:16,320 --> 00:09:20,370
compiler that you use to make the binary

221
00:09:18,080 --> 00:09:22,170
there's a lot of unnecessary sections

222
00:09:20,370 --> 00:09:23,940
and headers GCC likes to put a lot of

223
00:09:22,170 --> 00:09:25,439
those in there they can ruin your day if

224
00:09:23,940 --> 00:09:27,630
you you know weren't aren't doing it

225
00:09:25,440 --> 00:09:30,750
right there's a lot of padding in the

226
00:09:27,630 --> 00:09:32,550
binary to just lots of zeros that there

227
00:09:30,750 --> 00:09:34,050
could be stuff you know stuffed into if

228
00:09:32,550 --> 00:09:38,729
you ever saw the tick-tock that I made

229
00:09:34,050 --> 00:09:41,189
of the docker run C you know finding

230
00:09:38,730 --> 00:09:43,290
code caves in capes where you can put

231
00:09:41,190 --> 00:09:46,170
data there's padding but it's still

232
00:09:43,290 --> 00:09:48,839
executable I do that with a docker run C

233
00:09:46,170 --> 00:09:51,180
binary and backdoor billet docker image

234
00:09:48,840 --> 00:09:54,660
was a tik-tok would be a hit or miss

235
00:09:51,180 --> 00:09:57,180
song there's also a lot of other extra

236
00:09:54,660 --> 00:10:00,630
info that's needed by parsing tools like

237
00:09:57,180 --> 00:10:02,969
retail for Rob's dump so all you really

238
00:10:00,630 --> 00:10:05,400
need for a standard elf binary is an elf

239
00:10:02,970 --> 00:10:07,800
header a program header and then code to

240
00:10:05,400 --> 00:10:09,329
execute and so the big important note

241
00:10:07,800 --> 00:10:11,400
here is that shared objects and kernel

242
00:10:09,330 --> 00:10:13,730
modules require additional parts and

243
00:10:11,400 --> 00:10:16,530
I'll get into those later

244
00:10:13,730 --> 00:10:19,470
so County elf files so there's there's

245
00:10:16,530 --> 00:10:21,930
been prior arcanist so there's a muppet

246
00:10:19,470 --> 00:10:25,500
labs.com this one here the teensy elf

247
00:10:21,930 --> 00:10:27,540
it's a very small elf file but it's 32

248
00:10:25,500 --> 00:10:29,250
bits and so it doesn't run exiting for

249
00:10:27,540 --> 00:10:30,599
Linux Cisco interface is different now

250
00:10:29,250 --> 00:10:34,170
so the code doesn't even work the right

251
00:10:30,600 --> 00:10:35,880
way and it's really cool I love the way

252
00:10:34,170 --> 00:10:36,780
that it was done but it doesn't work

253
00:10:35,880 --> 00:10:38,660
nowadays

254
00:10:36,780 --> 00:10:41,910
so when trying to do something in in

255
00:10:38,660 --> 00:10:44,400
2020 this is you have to look at it from

256
00:10:41,910 --> 00:10:46,709
from modern perspective so I have a

257
00:10:44,400 --> 00:10:49,350
bunch of 64 bit tiny elf examples so if

258
00:10:46,710 --> 00:10:51,300
you go to github.com slash nets golf

259
00:10:49,350 --> 00:10:53,340
club I have a lot of my tests in there

260
00:10:51,300 --> 00:10:55,109
ah you can take a look at the source of

261
00:10:53,340 --> 00:10:56,880
and see how I did it

262
00:10:55,110 --> 00:10:58,920
so I updated a lot of them for modern

263
00:10:56,880 --> 00:11:01,110
systems some of the payloads and other

264
00:10:58,920 --> 00:11:02,939
things that are interesting you know

265
00:11:01,110 --> 00:11:05,250
they they also wear you know older shell

266
00:11:02,940 --> 00:11:07,320
code or are there little snippets and so

267
00:11:05,250 --> 00:11:08,940
I updated those as well for modern

268
00:11:07,320 --> 00:11:11,280
systems though you are interested in

269
00:11:08,940 --> 00:11:13,320
and how to make shellcode - that is

270
00:11:11,280 --> 00:11:15,660
another big part of this and you can

271
00:11:13,320 --> 00:11:17,910
look at that repo for it as well and I

272
00:11:15,660 --> 00:11:20,310
wrote three parts of a blog on binary

273
00:11:17,910 --> 00:11:22,319
mangling as I called it of how to

274
00:11:20,310 --> 00:11:31,079
actually go through the process of this

275
00:11:22,320 --> 00:11:33,840
and what I did for the research so when

276
00:11:31,080 --> 00:11:35,520
you're doing elf golfing basically

277
00:11:33,840 --> 00:11:37,560
you're going to need to do a few

278
00:11:35,520 --> 00:11:39,000
different steps and so a lot of my

279
00:11:37,560 --> 00:11:41,310
Berryman figured out this is kind of a

280
00:11:39,000 --> 00:11:42,720
workflow that I did so I went started by

281
00:11:41,310 --> 00:11:45,569
stripping the necessary headers and

282
00:11:42,720 --> 00:11:47,070
sections which is a you know it's only

283
00:11:45,570 --> 00:11:48,600
one bullet point that's a very very

284
00:11:47,070 --> 00:11:49,530
large part of it is figuring out what

285
00:11:48,600 --> 00:11:51,630
isn't needed

286
00:11:49,530 --> 00:11:53,550
the other big thing here which you

287
00:11:51,630 --> 00:11:54,840
didn't go and look at my my blog post if

288
00:11:53,550 --> 00:11:57,300
you want more information about it but

289
00:11:54,840 --> 00:11:59,640
overlaying program headers with elf

290
00:11:57,300 --> 00:12:02,670
headers or overlaying any sort of

291
00:11:59,640 --> 00:12:04,980
headers in general significantly makes

292
00:12:02,670 --> 00:12:06,959
the code or the header smaller but what

293
00:12:04,980 --> 00:12:09,330
you're doing is reusing certain values

294
00:12:06,960 --> 00:12:11,730
from other headers at the same time so

295
00:12:09,330 --> 00:12:13,800
there's this specific binary here there

296
00:12:11,730 --> 00:12:16,080
are parts of it in the thing that's

297
00:12:13,800 --> 00:12:19,550
called SIA and the little label that's

298
00:12:16,080 --> 00:12:23,370
used my mouth like almost halfway down

299
00:12:19,550 --> 00:12:25,260
this is not only is it code it's part of

300
00:12:23,370 --> 00:12:26,640
the elf header and the program header at

301
00:12:25,260 --> 00:12:28,020
the same time so it's parsed three

302
00:12:26,640 --> 00:12:30,390
different times for the kernel when this

303
00:12:28,020 --> 00:12:32,340
executes so this is a very very

304
00:12:30,390 --> 00:12:34,620
important piece of this too is if you

305
00:12:32,340 --> 00:12:37,110
can figure out ways to point headers

306
00:12:34,620 --> 00:12:39,870
elsewhere into the file and move them

307
00:12:37,110 --> 00:12:43,800
around then you can overlay them and

308
00:12:39,870 --> 00:12:45,150
create you know put multiple values and

309
00:12:43,800 --> 00:12:47,310
use them for the same purposes so this

310
00:12:45,150 --> 00:12:49,829
is takes a lot of time and energy to do

311
00:12:47,310 --> 00:12:55,140
to figure out but once you do you have a

312
00:12:49,830 --> 00:12:57,450
really tiny way to go or tiny template

313
00:12:55,140 --> 00:12:59,760
to work with so the other big thing

314
00:12:57,450 --> 00:13:01,710
about this too for binaries is storing

315
00:12:59,760 --> 00:13:03,480
code and other data in unused sections

316
00:13:01,710 --> 00:13:05,250
of the header so headers even though

317
00:13:03,480 --> 00:13:06,780
they have these structures that might

318
00:13:05,250 --> 00:13:08,670
need to be a certain length or whatever

319
00:13:06,780 --> 00:13:10,290
they might still not actually care about

320
00:13:08,670 --> 00:13:12,420
some of the values there's some of the

321
00:13:10,290 --> 00:13:15,209
things like flags are only using the

322
00:13:12,420 --> 00:13:17,729
last three bits of the byte writer or

323
00:13:15,210 --> 00:13:18,960
however big the size of it is and so

324
00:13:17,730 --> 00:13:20,880
that means that you can as long as those

325
00:13:18,960 --> 00:13:22,019
three bits are set correctly for

326
00:13:20,880 --> 00:13:24,660
executable

327
00:13:22,019 --> 00:13:26,579
you know read/write permissions those

328
00:13:24,660 --> 00:13:29,279
you're still able to execute it but you

329
00:13:26,579 --> 00:13:32,459
can also use the first let's say you

330
00:13:29,279 --> 00:13:36,660
know like five bits of it first some

331
00:13:32,459 --> 00:13:38,128
other piece of code or data so that part

332
00:13:36,660 --> 00:13:41,160
is also pretty complicated that you can

333
00:13:38,129 --> 00:13:43,319
read my blog and more about it too but

334
00:13:41,160 --> 00:13:45,029
we're using values from the header and

335
00:13:43,319 --> 00:13:47,998
those are all you know parts of it that

336
00:13:45,029 --> 00:13:49,619
are really important short jumps to

337
00:13:47,999 --> 00:13:52,949
locations in the header so if you see

338
00:13:49,619 --> 00:13:54,869
SIA and Reeb and start as labels in here

339
00:13:52,949 --> 00:13:56,429
these are all all these little jumps

340
00:13:54,869 --> 00:13:58,199
here are just jumping around the header

341
00:13:56,429 --> 00:14:00,238
because I don't have enough space to put

342
00:13:58,199 --> 00:14:02,008
all the code that I want but I have a

343
00:14:00,239 --> 00:14:04,290
little bit of space and short jumps are

344
00:14:02,009 --> 00:14:06,209
only two bytes and you can use those if

345
00:14:04,290 --> 00:14:09,209
you have four bytes you can still do

346
00:14:06,209 --> 00:14:13,498
something like the Cisco command or move

347
00:14:09,209 --> 00:14:15,540
a l0x a nine and then jump somewhere so

348
00:14:13,499 --> 00:14:17,149
being able to do that kind of math and

349
00:14:15,540 --> 00:14:19,529
figuring out where you can actually put

350
00:14:17,149 --> 00:14:21,869
code and how you can jump to and from it

351
00:14:19,529 --> 00:14:23,429
is important but there's a lot of cool

352
00:14:21,869 --> 00:14:25,709
resources that I have in some my blogs

353
00:14:23,429 --> 00:14:28,170
the other big one is loading the binary

354
00:14:25,709 --> 00:14:30,719
yet 0x1 I'm in a bunch of zeros

355
00:14:28,170 --> 00:14:33,029
basically that's used so let the e entry

356
00:14:30,720 --> 00:14:36,689
for elf header and P type for program

357
00:14:33,029 --> 00:14:39,299
header matches and it's loading at a

358
00:14:36,689 --> 00:14:41,040
very it's still within the 64-bit

359
00:14:39,299 --> 00:14:45,389
address space but it's um it's pretty

360
00:14:41,040 --> 00:14:47,849
high so next is okay so I saw obviously

361
00:14:45,389 --> 00:14:49,860
have a day golf thought so so there's a

362
00:14:47,850 --> 00:14:53,069
recent CTF challenge to create a shared

363
00:14:49,860 --> 00:14:55,920
object that's under a hunt 24 bytes it

364
00:14:53,069 --> 00:14:57,889
also pops a shell so there's a link here

365
00:14:55,920 --> 00:15:00,660
I want to make the slides available um

366
00:14:57,889 --> 00:15:03,360
shortly after my talk but so shared

367
00:15:00,660 --> 00:15:04,589
objects are really cool they're

368
00:15:03,360 --> 00:15:06,720
interesting because they they have a lot

369
00:15:04,589 --> 00:15:08,249
more strict checking so if you do

370
00:15:06,720 --> 00:15:11,610
something like say what I did up here

371
00:15:08,249 --> 00:15:13,829
where the start is that 0 X 0 floor in

372
00:15:11,610 --> 00:15:16,980
the health header you'll get messages

373
00:15:13,829 --> 00:15:18,419
like this and say that you can't load

374
00:15:16,980 --> 00:15:22,019
something because it actually checks

375
00:15:18,419 --> 00:15:23,929
whether or not these values of where all

376
00:15:22,019 --> 00:15:26,639
the other jumps and stuff are in start

377
00:15:23,929 --> 00:15:28,919
actually are so it's actually invalid if

378
00:15:26,639 --> 00:15:30,299
this whole thing is varies a lot it's a

379
00:15:28,919 --> 00:15:31,829
lot more difficult to do the techniques

380
00:15:30,299 --> 00:15:33,840
that I had so shout out so the people

381
00:15:31,829 --> 00:15:36,989
who actually solve this this is really

382
00:15:33,840 --> 00:15:39,630
small shared objects also yeah I was

383
00:15:36,990 --> 00:15:43,320
invoked using le pre-loaded so golf

384
00:15:39,630 --> 00:15:45,750
thought so II so what this is this is

385
00:15:43,320 --> 00:15:47,460
the source code for it and you know what

386
00:15:45,750 --> 00:15:49,190
they did basically here was determining

387
00:15:47,460 --> 00:15:52,290
the needed section so they have the

388
00:15:49,190 --> 00:15:54,510
dynamic sections with BP string tab in

389
00:15:52,290 --> 00:15:56,910
it and some tab and they put these in

390
00:15:54,510 --> 00:15:58,830
here and it's still overlaid with the

391
00:15:56,910 --> 00:16:00,900
program header and the elf header and

392
00:15:58,830 --> 00:16:02,880
the dynamic section is also overlaid

393
00:16:00,900 --> 00:16:04,980
within the program editor too and then

394
00:16:02,880 --> 00:16:08,250
their code is right there I tried to

395
00:16:04,980 --> 00:16:11,040
make this smaller and but it's it's very

396
00:16:08,250 --> 00:16:14,520
packed this is a very very good version

397
00:16:11,040 --> 00:16:16,199
of this code here they use NASM though

398
00:16:14,520 --> 00:16:17,970
the same degree at the final binary and

399
00:16:16,200 --> 00:16:22,860
the resulting file was a hundred eighty

400
00:16:17,970 --> 00:16:25,890
five so look a lot of elf here elf is on

401
00:16:22,860 --> 00:16:29,460
you know more of my specialty but I

402
00:16:25,890 --> 00:16:33,000
started to work with PE files and they

403
00:16:29,460 --> 00:16:33,630
were a bit different than what I was

404
00:16:33,000 --> 00:16:36,960
used to

405
00:16:33,630 --> 00:16:39,510
I'm similar sort of I guess techniques

406
00:16:36,960 --> 00:16:43,200
but I'm not a windows person at all so

407
00:16:39,510 --> 00:16:47,189
if anybody who is one in here forgive me

408
00:16:43,200 --> 00:16:48,660
but this the exciting piece because

409
00:16:47,190 --> 00:16:51,240
there's there's different versions of

410
00:16:48,660 --> 00:16:54,120
Windows so each version of it may change

411
00:16:51,240 --> 00:16:56,310
the spec slightly so there's there is

412
00:16:54,120 --> 00:16:59,400
been prior work on this and there was

413
00:16:56,310 --> 00:17:02,250
you know changes between Windows 2000 to

414
00:16:59,400 --> 00:17:05,119
XP to Vista cetera and so none of those

415
00:17:02,250 --> 00:17:08,010
work in Windows 10 so I had looked for

416
00:17:05,119 --> 00:17:10,560
resources for you know modern Windows

417
00:17:08,010 --> 00:17:13,200
systems and I found the PE files must be

418
00:17:10,560 --> 00:17:15,270
greater than or equal to two hundred and

419
00:17:13,200 --> 00:17:18,270
sixty eight bytes for whatever reason on

420
00:17:15,270 --> 00:17:21,240
Windows 7 and 10 and so I saw some

421
00:17:18,270 --> 00:17:24,180
examples cork ami or endeavor teeny had

422
00:17:21,240 --> 00:17:27,089
done a lot of work with PE files this

423
00:17:24,180 --> 00:17:29,460
hour RCX flush tiny PE repo is really

424
00:17:27,089 --> 00:17:31,080
cool actually gave me a framework to

425
00:17:29,460 --> 00:17:33,600
look at first to see how somebody

426
00:17:31,080 --> 00:17:35,340
actually would make up tiny PE because I

427
00:17:33,600 --> 00:17:37,889
think they use Visual Studio which I

428
00:17:35,340 --> 00:17:39,270
don't know how to use so I don't know

429
00:17:37,890 --> 00:17:43,680
how they did it but I I had translated

430
00:17:39,270 --> 00:17:47,600
to NASM and work from there and so but I

431
00:17:43,680 --> 00:17:50,030
had come up with was a tiny PE

432
00:17:47,600 --> 00:17:53,240
you know had done similar work to what

433
00:17:50,030 --> 00:17:54,889
like my ELF files did but I used some

434
00:17:53,240 --> 00:17:58,309
more techniques but there's a slightly

435
00:17:54,890 --> 00:18:00,820
different thing with PD files so this

436
00:17:58,309 --> 00:18:02,960
for encode cave is really important so

437
00:18:00,820 --> 00:18:05,570
the same things to do before we're

438
00:18:02,960 --> 00:18:07,669
putting little bits of code in like a

439
00:18:05,570 --> 00:18:09,139
couple of bites and values in the header

440
00:18:07,669 --> 00:18:11,120
is really useful

441
00:18:09,140 --> 00:18:12,770
so I identified some different caves

442
00:18:11,120 --> 00:18:17,379
that I can put stuff in so there's like

443
00:18:12,770 --> 00:18:20,629
you know 12 bytes that zero exceed 2 0 X

444
00:18:17,380 --> 00:18:21,950
1 8 and stuff like that so identified a

445
00:18:20,630 --> 00:18:24,230
bunch of them by analyzing all the

446
00:18:21,950 --> 00:18:26,570
different headers and figuring out which

447
00:18:24,230 --> 00:18:28,640
ones weren't used and then put my code

448
00:18:26,570 --> 00:18:30,980
in there after the overlay and so I use

449
00:18:28,640 --> 00:18:35,150
short jumps again to hop around the

450
00:18:30,980 --> 00:18:36,830
header and you can use a buzzer to to

451
00:18:35,150 --> 00:18:38,059
check for these but my process is really

452
00:18:36,830 --> 00:18:41,360
manual because I was trying to figure it

453
00:18:38,059 --> 00:18:42,770
out myself so a lot of these headers

454
00:18:41,360 --> 00:18:45,379
that are in here I'm actually used it

455
00:18:42,770 --> 00:18:47,299
just pretty cool so you can even though

456
00:18:45,380 --> 00:18:49,780
they're big and they're annoying looking

457
00:18:47,299 --> 00:18:53,960
you can still put you know code in them

458
00:18:49,780 --> 00:18:57,408
so what my my you know POC buyer I did

459
00:18:53,960 --> 00:19:00,590
was launch calc XE so I used the peb to

460
00:18:57,409 --> 00:19:03,140
win exec technique to launch calculate

461
00:19:00,590 --> 00:19:05,299
XE but the shell code for it that I

462
00:19:03,140 --> 00:19:08,059
found was a bit longer than could fit

463
00:19:05,299 --> 00:19:10,820
into the actual binary it was like 310

464
00:19:08,059 --> 00:19:13,070
bytes rather than 268 so I was like all

465
00:19:10,820 --> 00:19:14,870
right I'm gonna shrink this payload down

466
00:19:13,070 --> 00:19:17,629
even more so I optimized more of the

467
00:19:14,870 --> 00:19:20,530
shell code by writing it like you know a

468
00:19:17,630 --> 00:19:24,650
little bit a little more optimization

469
00:19:20,530 --> 00:19:25,789
and then I manually patched and put

470
00:19:24,650 --> 00:19:29,630
stuff in the header so if you see the

471
00:19:25,789 --> 00:19:31,720
side here this is all the header being

472
00:19:29,630 --> 00:19:34,039
created so you can read the PG mangle

473
00:19:31,720 --> 00:19:36,590
write-up that I did explains it a bit

474
00:19:34,039 --> 00:19:40,309
better but these are a ton of jumps

475
00:19:36,590 --> 00:19:41,840
within the PE header so there's it looks

476
00:19:40,309 --> 00:19:44,720
really really crazy now that I'm looking

477
00:19:41,840 --> 00:19:46,490
at it trying to explain it but there's a

478
00:19:44,720 --> 00:19:48,740
there's a lot of these things are

479
00:19:46,490 --> 00:19:50,450
overlaid and there's like multiple times

480
00:19:48,740 --> 00:19:53,480
where it's parsed like three or four

481
00:19:50,450 --> 00:19:55,640
different ways while executing so I

482
00:19:53,480 --> 00:19:57,200
basically done no it took these caves

483
00:19:55,640 --> 00:19:59,809
here and basically just put all these

484
00:19:57,200 --> 00:20:00,570
jump labels into here and put a code in

485
00:19:59,809 --> 00:20:02,940
there and work

486
00:20:00,570 --> 00:20:06,179
the actual flow before I get to the very

487
00:20:02,940 --> 00:20:09,480
last line of this thing on the side jump

488
00:20:06,180 --> 00:20:11,580
six that is the actual start of the code

489
00:20:09,480 --> 00:20:15,150
section so there's a ton of code that

490
00:20:11,580 --> 00:20:18,659
happens to set up reading the PDB to

491
00:20:15,150 --> 00:20:19,980
read kernel32.dll in this but if you

492
00:20:18,660 --> 00:20:23,040
want to read more about this there's a

493
00:20:19,980 --> 00:20:25,290
big write-up I did it recently and yeah

494
00:20:23,040 --> 00:20:27,780
so cool thing about this dose so you see

495
00:20:25,290 --> 00:20:32,700
all this you see all these different you

496
00:20:27,780 --> 00:20:36,180
know pieces of code and you are able to

497
00:20:32,700 --> 00:20:40,110
pick where each individual byte is and

498
00:20:36,180 --> 00:20:42,270
so what you can do with it is defeat

499
00:20:40,110 --> 00:20:44,250
detection so there's a lot of detections

500
00:20:42,270 --> 00:20:46,560
for for small binaries and weird

501
00:20:44,250 --> 00:20:48,840
payloads and stuff like that and so tiny

502
00:20:46,560 --> 00:20:50,820
PE is very very well known this

503
00:20:48,840 --> 00:20:52,830
technique is not me

504
00:20:50,820 --> 00:20:54,600
and so there's detections for them that

505
00:20:52,830 --> 00:20:57,300
are on virustotal there's tons of them

506
00:20:54,600 --> 00:21:00,300
that run yarra rules for them and so I

507
00:20:57,300 --> 00:21:02,879
was made aware of one of them that was

508
00:21:00,300 --> 00:21:04,770
put out there because I'm gonna chair de

509
00:21:02,880 --> 00:21:06,480
yarro' rule they had written about it

510
00:21:04,770 --> 00:21:07,200
that I thought had caught this on

511
00:21:06,480 --> 00:21:10,080
virustotal

512
00:21:07,200 --> 00:21:12,450
and so what I tried to do is see if I

513
00:21:10,080 --> 00:21:13,860
could actually defeat this so what I

514
00:21:12,450 --> 00:21:17,070
ended up doing was if you see the little

515
00:21:13,860 --> 00:21:17,969
circle red red circle there I changed

516
00:21:17,070 --> 00:21:20,639
one bit

517
00:21:17,970 --> 00:21:23,370
within this to be a zero and now it's

518
00:21:20,640 --> 00:21:25,950
just a zero one so one bit and I was

519
00:21:23,370 --> 00:21:27,389
able to actually bypass the yard rule

520
00:21:25,950 --> 00:21:29,010
because it would have checked because

521
00:21:27,390 --> 00:21:30,030
even though it's very small and there's

522
00:21:29,010 --> 00:21:32,040
a lot of stuff is going to be in the

523
00:21:30,030 --> 00:21:34,610
same places they're still extra data

524
00:21:32,040 --> 00:21:36,840
that you can put in there and so I

525
00:21:34,610 --> 00:21:38,429
rewrote the outer rule to actually make

526
00:21:36,840 --> 00:21:40,830
it catch this but this is an example of

527
00:21:38,430 --> 00:21:43,200
actually invading this detection so if

528
00:21:40,830 --> 00:21:45,990
this detection has been in place for a

529
00:21:43,200 --> 00:21:47,580
long time um this would have still been

530
00:21:45,990 --> 00:21:49,110
able to you know defeat it and there are

531
00:21:47,580 --> 00:21:53,280
still ways to actually get around this

532
00:21:49,110 --> 00:21:55,530
detection but yeah this was the this is

533
00:21:53,280 --> 00:21:57,810
like an example of being able to control

534
00:21:55,530 --> 00:21:59,220
each individual byte and also showed us

535
00:21:57,810 --> 00:22:01,230
his shell because he had actually done a

536
00:21:59,220 --> 00:22:03,720
ton of work on fuzzing Vitti detection

537
00:22:01,230 --> 00:22:05,480
engines which are really funny I don't

538
00:22:03,720 --> 00:22:07,410
have a link to it directly right now

539
00:22:05,480 --> 00:22:10,550
she'll probably can post it in the chat

540
00:22:07,410 --> 00:22:13,690
but very good write-up on on how fragile

541
00:22:10,550 --> 00:22:16,060
you know antivirus stuff still is

542
00:22:13,690 --> 00:22:18,340
and so I'm getting towards the end of

543
00:22:16,060 --> 00:22:20,379
the talk here so lessons learned

544
00:22:18,340 --> 00:22:23,439
you don't need huge blow to the software

545
00:22:20,380 --> 00:22:25,240
to run binary programs in 2025 parsers

546
00:22:23,440 --> 00:22:27,310
are generally pretty lazy and they only

547
00:22:25,240 --> 00:22:29,140
really care about a few things to

548
00:22:27,310 --> 00:22:31,690
consider a file file whether it's a tool

549
00:22:29,140 --> 00:22:35,050
that parts of stuff or you know your

550
00:22:31,690 --> 00:22:37,510
operating systems kernel mostly buggers

551
00:22:35,050 --> 00:22:39,310
and binary parsers really do suck at

552
00:22:37,510 --> 00:22:41,050
understanding minified binaries like

553
00:22:39,310 --> 00:22:43,000
there's a couple of minor areas that

554
00:22:41,050 --> 00:22:45,280
i've found that it can be open in

555
00:22:43,000 --> 00:22:48,250
anything but when re2 and red are a true

556
00:22:45,280 --> 00:22:50,139
struggles to open it I've also gotten

557
00:22:48,250 --> 00:22:52,630
passive so not even but all right you

558
00:22:50,140 --> 00:22:53,890
can open it but yeah you can move you

559
00:22:52,630 --> 00:22:56,680
make files that basically like no

560
00:22:53,890 --> 00:22:58,540
program can read the only the operating

561
00:22:56,680 --> 00:22:59,920
system can understand which is pretty

562
00:22:58,540 --> 00:23:03,310
cool because if you're writing anything

563
00:22:59,920 --> 00:23:04,390
that's wants to be secret you might want

564
00:23:03,310 --> 00:23:07,750
to have me something really small and

565
00:23:04,390 --> 00:23:10,000
nobody can read but even with a tiny

566
00:23:07,750 --> 00:23:11,860
binary even with a very small surface

567
00:23:10,000 --> 00:23:14,500
area to actually move by surround if you

568
00:23:11,860 --> 00:23:17,169
want to throw in extra bytes to defeat

569
00:23:14,500 --> 00:23:19,350
hash now something you can still bypass

570
00:23:17,170 --> 00:23:22,120
detection it's definitely possible

571
00:23:19,350 --> 00:23:25,149
you've got to be creative and see you

572
00:23:22,120 --> 00:23:28,060
know where you can can move data around

573
00:23:25,150 --> 00:23:29,770
and binary golfing can give you complete

574
00:23:28,060 --> 00:23:31,690
control over every single byte in your

575
00:23:29,770 --> 00:23:34,510
file so if you like that kind of control

576
00:23:31,690 --> 00:23:37,030
over something definitely a fun thing to

577
00:23:34,510 --> 00:23:37,620
play with and you too can add a hole in

578
00:23:37,030 --> 00:23:41,470
one

579
00:23:37,620 --> 00:23:43,689
so last is other resources so burn re2

580
00:23:41,470 --> 00:23:44,890
is a great for debugging weird stuff

581
00:23:43,690 --> 00:23:46,480
it's probably the best thing in my

582
00:23:44,890 --> 00:23:48,280
opinion for debugging weird stuff

583
00:23:46,480 --> 00:23:51,370
there's still issues with you know how

584
00:23:48,280 --> 00:23:52,690
it actually works but as far as being

585
00:23:51,370 --> 00:23:55,300
able to understand certain things that's

586
00:23:52,690 --> 00:23:57,580
my go-to for you know biases file weird

587
00:23:55,300 --> 00:24:00,730
and what's wrong with it if you want to

588
00:23:57,580 --> 00:24:04,120
look up court commies stuff amazing work

589
00:24:00,730 --> 00:24:07,840
and opportunity has done you know making

590
00:24:04,120 --> 00:24:09,639
files more accessible to people file

591
00:24:07,840 --> 00:24:11,860
formats archive team.org

592
00:24:09,640 --> 00:24:14,080
is another amazing site where they have

593
00:24:11,860 --> 00:24:15,850
catalog tons of file formats because

594
00:24:14,080 --> 00:24:19,449
there are kind of team for archive.org

595
00:24:15,850 --> 00:24:22,240
and they are trying to you know save all

596
00:24:19,450 --> 00:24:24,790
the files and lastly I did a stream a

597
00:24:22,240 --> 00:24:27,040
few months ago called intro to assembly

598
00:24:24,790 --> 00:24:29,399
optimization and it talks a lot about

599
00:24:27,040 --> 00:24:32,020
this sort of techniques for actually

600
00:24:29,400 --> 00:24:34,300
optimizing your assembly code and making

601
00:24:32,020 --> 00:24:37,240
it even smaller and smaller you know

602
00:24:34,300 --> 00:24:40,030
Shoko basically and so yeah that's

603
00:24:37,240 --> 00:24:42,520
pretty much it for for this I'm gonna

604
00:24:40,030 --> 00:24:44,350
stop sharing them quick kind of briefs

605
00:24:42,520 --> 00:24:49,379
do it really fast cuz I was started a

606
00:24:44,350 --> 00:24:49,379
bit late but like yeah

