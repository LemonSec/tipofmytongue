1
00:00:00,030 --> 00:00:06,930
cool so we're gonna be talking today

2
00:00:03,570 --> 00:00:09,690
about emulating IOT firmware and some

3
00:00:06,930 --> 00:00:12,269
IOT malware as well using daughter and

4
00:00:09,690 --> 00:00:15,540
quim you a lot of this is stuff that you

5
00:00:12,269 --> 00:00:17,400
can do easily with old tools but we're

6
00:00:15,540 --> 00:00:22,349
gonna be checking out some new

7
00:00:17,400 --> 00:00:24,150
techniques so just an overall view of

8
00:00:22,350 --> 00:00:26,789
what we're gonna talk about and how it's

9
00:00:24,150 --> 00:00:29,220
going to look first I'm going to cover

10
00:00:26,789 --> 00:00:31,500
just some of the basics of emulation and

11
00:00:29,220 --> 00:00:35,640
containers and stuff to make sure that

12
00:00:31,500 --> 00:00:37,950
anybody who's not really that in the

13
00:00:35,640 --> 00:00:42,809
know on that other side of technology

14
00:00:37,950 --> 00:00:44,430
isn't left completely dangling we're

15
00:00:42,809 --> 00:00:46,260
gonna talk about the mold a architecture

16
00:00:44,430 --> 00:00:49,350
container images that you can build

17
00:00:46,260 --> 00:00:52,739
using docker and clem you that's going

18
00:00:49,350 --> 00:00:54,690
to be the main focus and they're gonna

19
00:00:52,739 --> 00:00:57,209
do a couple of case studies of using

20
00:00:54,690 --> 00:00:59,910
these multi architecture container image

21
00:00:57,210 --> 00:01:06,619
concepts to emulate some router firmware

22
00:00:59,910 --> 00:01:09,149
and also to emulate some IOT malware so

23
00:01:06,619 --> 00:01:11,430
this is useful techniques for

24
00:01:09,150 --> 00:01:14,670
vulnerability researchers exploit

25
00:01:11,430 --> 00:01:16,920
development reverse engineering is also

26
00:01:14,670 --> 00:01:18,570
important for malware research so that

27
00:01:16,920 --> 00:01:22,799
you can actually study the runtime

28
00:01:18,570 --> 00:01:25,080
behavior of of this of some kinds of

29
00:01:22,799 --> 00:01:27,720
botnets or whatever else is coming

30
00:01:25,080 --> 00:01:30,900
around out there and finally we're gonna

31
00:01:27,720 --> 00:01:33,270
talk about the limitations of these

32
00:01:30,900 --> 00:01:36,180
techniques but also the advantages that

33
00:01:33,270 --> 00:01:40,408
they carry along with them and some

34
00:01:36,180 --> 00:01:45,630
ideas that I have for directors to go on

35
00:01:40,409 --> 00:01:49,320
more work in research so what motivates

36
00:01:45,630 --> 00:01:53,220
this work the main thing is that docker

37
00:01:49,320 --> 00:01:57,119
is a really easy way to build and

38
00:01:53,220 --> 00:01:59,189
isolate processes and it makes it also

39
00:01:57,119 --> 00:02:01,530
easy to share these images through

40
00:01:59,189 --> 00:02:04,350
registries so you can build something on

41
00:02:01,530 --> 00:02:06,990
your workstation and get it figured out

42
00:02:04,350 --> 00:02:09,119
and then put it to some registry then

43
00:02:06,990 --> 00:02:12,299
your friends or other users people who

44
00:02:09,119 --> 00:02:13,620
might want to take a look at your

45
00:02:12,300 --> 00:02:15,330
software

46
00:02:13,620 --> 00:02:17,129
just pull it down and they don't need to

47
00:02:15,330 --> 00:02:18,870
configure their system or install any

48
00:02:17,129 --> 00:02:21,359
packages really they just need to have

49
00:02:18,870 --> 00:02:26,909
docker installed they pull the image and

50
00:02:21,360 --> 00:02:29,700
they have your application and if you've

51
00:02:26,909 --> 00:02:33,390
ever done work on like embedded firmware

52
00:02:29,700 --> 00:02:37,560
and and emulating weird stuff like

53
00:02:33,390 --> 00:02:38,940
routers with with quim you before you

54
00:02:37,560 --> 00:02:41,430
know that it can be really

55
00:02:38,940 --> 00:02:43,230
time-consuming there's a lot of tools

56
00:02:41,430 --> 00:02:44,640
out there that kind of help you along

57
00:02:43,230 --> 00:02:46,379
with it but a lot of those tools are

58
00:02:44,640 --> 00:02:50,730
also unmaintained of broken in some

59
00:02:46,379 --> 00:02:52,739
pretty important ways there's a lot of

60
00:02:50,730 --> 00:02:54,720
overhead college both in terms of the

61
00:02:52,739 --> 00:02:57,900
computational resources it takes on your

62
00:02:54,720 --> 00:03:00,049
system to it to run a full virtualized

63
00:02:57,900 --> 00:03:02,760
system like if you're imagining to

64
00:03:00,049 --> 00:03:04,140
actually run a whole bonnet on a system

65
00:03:02,760 --> 00:03:05,399
and you have a bunch of VM so those are

66
00:03:04,140 --> 00:03:11,480
going to consume a lot more resources

67
00:03:05,400 --> 00:03:11,480
than the same number of containers so

68
00:03:11,599 --> 00:03:16,858
there's a lot less overhead with when we

69
00:03:14,579 --> 00:03:19,139
were working with containers and we can

70
00:03:16,859 --> 00:03:24,239
get a lot of valuable information out

71
00:03:19,139 --> 00:03:26,459
out of firmware dumps or malware samples

72
00:03:24,239 --> 00:03:28,859
but looking at them in containers

73
00:03:26,459 --> 00:03:32,010
without going through any of the

74
00:03:28,859 --> 00:03:34,620
necessary complicated steps for setting

75
00:03:32,010 --> 00:03:39,149
up a virtualization lab with quim you

76
00:03:34,620 --> 00:03:40,620
and KVM and livered or whatever and we

77
00:03:39,150 --> 00:03:43,260
can also get quite a lot of useful

78
00:03:40,620 --> 00:03:47,639
information out of the samples that we

79
00:03:43,260 --> 00:03:50,970
have why are we particularly interested

80
00:03:47,639 --> 00:03:53,910
in the multi arch images for IOT stuff

81
00:03:50,970 --> 00:03:57,540
because his iot devices run on usually

82
00:03:53,910 --> 00:03:58,049
non x86 platforms routers are usually

83
00:03:57,540 --> 00:04:00,239
mips

84
00:03:58,049 --> 00:04:07,010
a lot of embedded devices out there arm

85
00:04:00,239 --> 00:04:09,389
so um we need to be able to easily run

86
00:04:07,010 --> 00:04:12,269
malware that is going to be targeting

87
00:04:09,389 --> 00:04:17,150
these kinds of devices in an environment

88
00:04:12,269 --> 00:04:17,149
that will natively execute them and

89
00:04:19,220 --> 00:04:23,669
basically attackers have a lot of

90
00:04:21,209 --> 00:04:25,469
advantage in this domain because there's

91
00:04:23,669 --> 00:04:26,969
a lot of vulnerable I have T devices out

92
00:04:25,469 --> 00:04:28,530
there

93
00:04:26,970 --> 00:04:30,420
in order to research them you have to do

94
00:04:28,530 --> 00:04:33,539
quite a lot of legwork to even get a lot

95
00:04:30,420 --> 00:04:35,340
of environment set up so not a lot of

96
00:04:33,540 --> 00:04:39,360
people are paying enough attention to

97
00:04:35,340 --> 00:04:40,979
IOT security and the vendors generally

98
00:04:39,360 --> 00:04:43,470
don't really care that much about

99
00:04:40,980 --> 00:04:45,810
security and even if they did users

100
00:04:43,470 --> 00:04:47,790
rarely update the firmware like there's

101
00:04:45,810 --> 00:04:52,700
so many devices whoo-hoo-hoo updates or

102
00:04:47,790 --> 00:04:55,650
smart TV right so there's there's just a

103
00:04:52,700 --> 00:05:00,180
lot more a lot of room for improvement

104
00:04:55,650 --> 00:05:02,760
in this domain so quick overview on

105
00:05:00,180 --> 00:05:05,550
docker containers are basically a way

106
00:05:02,760 --> 00:05:07,680
for applications to be shipped in such a

107
00:05:05,550 --> 00:05:09,630
way that their entire runtime

108
00:05:07,680 --> 00:05:12,960
environment library dependencies

109
00:05:09,630 --> 00:05:16,680
configuration etc are bundled within the

110
00:05:12,960 --> 00:05:18,659
application itself although people call

111
00:05:16,680 --> 00:05:19,980
them lightweight VMs that it's kind of

112
00:05:18,660 --> 00:05:21,870
misleading because there's there's not

113
00:05:19,980 --> 00:05:24,300
really any virtualization they're using

114
00:05:21,870 --> 00:05:27,510
kernel features like namespaces and C

115
00:05:24,300 --> 00:05:30,450
groups to to implement the functionality

116
00:05:27,510 --> 00:05:34,320
of process isolation and and resource

117
00:05:30,450 --> 00:05:35,820
constraints you if you look at a lot of

118
00:05:34,320 --> 00:05:38,159
github projects you probably docker

119
00:05:35,820 --> 00:05:41,040
files around out there I assume most

120
00:05:38,160 --> 00:05:43,950
people who are listening or worked with

121
00:05:41,040 --> 00:05:47,130
docker before but basically the image is

122
00:05:43,950 --> 00:05:48,539
built from a docker file and we're going

123
00:05:47,130 --> 00:05:49,919
to be seeing a few examples of docker

124
00:05:48,540 --> 00:05:52,860
files later on so that's why I'm

125
00:05:49,919 --> 00:05:55,950
bringing it up this is basically just a

126
00:05:52,860 --> 00:06:01,229
set of instructions that docker executes

127
00:05:55,950 --> 00:06:04,080
to build a file system image for your

128
00:06:01,229 --> 00:06:05,760
for your container so this is how you

129
00:06:04,080 --> 00:06:07,950
specify all the steps that are necessary

130
00:06:05,760 --> 00:06:11,099
to build your container and then once

131
00:06:07,950 --> 00:06:12,450
once it's built its built and the

132
00:06:11,100 --> 00:06:16,919
container is just a stateful

133
00:06:12,450 --> 00:06:19,080
instantiation of a container image and

134
00:06:16,919 --> 00:06:23,700
these container images are composed in

135
00:06:19,080 --> 00:06:25,320
layers so you can easily customize and

136
00:06:23,700 --> 00:06:27,539
you can think you can imagine a base

137
00:06:25,320 --> 00:06:29,400
layer that is just like Debian and then

138
00:06:27,540 --> 00:06:31,440
you may be installed engine X and

139
00:06:29,400 --> 00:06:33,539
configures to be hosts on it then you

140
00:06:31,440 --> 00:06:35,789
can publish that as your own image which

141
00:06:33,540 --> 00:06:37,890
it's your Debian web server and so in

142
00:06:35,789 --> 00:06:40,050
olive oil you have a custom Debian web

143
00:06:37,890 --> 00:06:45,030
server image

144
00:06:40,050 --> 00:06:47,550
so this is a basic invocation of using a

145
00:06:45,030 --> 00:06:51,299
docker image and this first one I'm just

146
00:06:47,550 --> 00:06:54,930
saying start a bash show on debian

147
00:06:51,300 --> 00:06:56,430
stable and ikat the FC debian version

148
00:06:54,930 --> 00:06:58,919
9.1 great okay

149
00:06:56,430 --> 00:07:02,610
that's that's not my dad being version

150
00:06:58,919 --> 00:07:04,740
on the live willows and this one it's a

151
00:07:02,610 --> 00:07:07,650
sneak peek with the multi our trim

152
00:07:04,740 --> 00:07:09,479
measures are capable of I'm doing this

153
00:07:07,650 --> 00:07:15,568
basically the same thing running the you

154
00:07:09,479 --> 00:07:19,080
name dashing command on the MIPS version

155
00:07:15,569 --> 00:07:21,690
of Debian like minimal Debian chroot and

156
00:07:19,080 --> 00:07:24,630
voila it prints me MIPS

157
00:07:21,690 --> 00:07:26,969
so this container thinks that it's got a

158
00:07:24,630 --> 00:07:31,560
nips processor even though really is an

159
00:07:26,970 --> 00:07:34,409
x86 machine so how does it do that well

160
00:07:31,560 --> 00:07:38,159
it's because of quite new and quick view

161
00:07:34,409 --> 00:07:41,729
is a generic open-source machine

162
00:07:38,159 --> 00:07:43,020
emulator so you've probably seen or were

163
00:07:41,729 --> 00:07:45,240
close to me before if you've done any

164
00:07:43,020 --> 00:07:49,109
kind of work on firmware embedded

165
00:07:45,240 --> 00:07:50,819
devices typically this is going to run

166
00:07:49,110 --> 00:07:53,099
and environments where it is on top of

167
00:07:50,819 --> 00:07:55,259
like k vm and it's being managed rooted

168
00:07:53,099 --> 00:07:57,659
for again like if you've worked on an

169
00:07:55,259 --> 00:07:59,430
open stack cluster or any kind of cloud

170
00:07:57,659 --> 00:08:06,659
really most of those things under the

171
00:07:59,430 --> 00:08:09,389
hood it's just a mu k vm so this this is

172
00:08:06,659 --> 00:08:10,889
the full system emulation mode which

173
00:08:09,389 --> 00:08:13,349
emulates the entire operating system

174
00:08:10,889 --> 00:08:14,430
from the kernel up and this is the use

175
00:08:13,349 --> 00:08:16,919
case that I think most people would

176
00:08:14,430 --> 00:08:20,430
probably be familiar with but when you

177
00:08:16,919 --> 00:08:22,318
has also a completely separate mode that

178
00:08:20,430 --> 00:08:26,310
it runs in where it is completely user

179
00:08:22,319 --> 00:08:28,919
land tools and this user space

180
00:08:26,310 --> 00:08:31,590
simulation is really useful for our

181
00:08:28,919 --> 00:08:34,110
purposes because one of the things we're

182
00:08:31,590 --> 00:08:37,348
trying to avoid in this work is the the

183
00:08:34,110 --> 00:08:39,390
overhead involved with having to boot

184
00:08:37,349 --> 00:08:42,500
the whole kernel having to also know

185
00:08:39,390 --> 00:08:46,470
details about the kernel from the

186
00:08:42,500 --> 00:08:48,020
firmware that we've extracted and we we

187
00:08:46,470 --> 00:08:50,670
just want a quick and easy way to ship

188
00:08:48,020 --> 00:08:52,350
that that file system and anything in

189
00:08:50,670 --> 00:08:53,170
any binaries are going to be running on

190
00:08:52,350 --> 00:08:56,450
it

191
00:08:53,170 --> 00:08:58,219
so this actually fix our use case

192
00:08:56,450 --> 00:09:02,000
beautifully and it goes along with

193
00:08:58,220 --> 00:09:05,180
docker incredibly well so how does this

194
00:09:02,000 --> 00:09:08,900
work basically it is translating the CPU

195
00:09:05,180 --> 00:09:10,609
instructions on the fly there's and and

196
00:09:08,900 --> 00:09:13,819
it will also emulate the syscalls on the

197
00:09:10,610 --> 00:09:19,900
fly so you can imagine how this works

198
00:09:13,820 --> 00:09:23,240
it's inside the container there is a

199
00:09:19,900 --> 00:09:25,939
mips instruction and but this snips

200
00:09:23,240 --> 00:09:33,290
instruction is being run underneath a

201
00:09:25,940 --> 00:09:36,800
shim of quim u and this quim U is able

202
00:09:33,290 --> 00:09:39,560
to take that MIPS instruction translate

203
00:09:36,800 --> 00:09:43,240
to the x86 instruction or take it from

204
00:09:39,560 --> 00:09:46,130
the guest Cisco into the hostess go but

205
00:09:43,240 --> 00:09:48,830
it is important to note though that not

206
00:09:46,130 --> 00:09:52,580
every system call can be translated or

207
00:09:48,830 --> 00:09:57,770
easy or is implemented and in one of the

208
00:09:52,580 --> 00:09:59,500
quim u interpreters there there if you

209
00:09:57,770 --> 00:10:01,970
run through any of these on your own

210
00:09:59,500 --> 00:10:06,440
you'll see when you run the init scripts

211
00:10:01,970 --> 00:10:08,180
for example a lot of failed Cisco errors

212
00:10:06,440 --> 00:10:11,120
come out it doesn't actually end up

213
00:10:08,180 --> 00:10:12,709
seemingly it affecting any change on how

214
00:10:11,120 --> 00:10:15,530
things are honest we'll see you later

215
00:10:12,710 --> 00:10:17,300
but there are some sis calls that either

216
00:10:15,530 --> 00:10:22,010
the container isn't going to have enough

217
00:10:17,300 --> 00:10:24,079
privilege to invoke on the host or that

218
00:10:22,010 --> 00:10:26,689
quim you just simply doesn't emulate for

219
00:10:24,080 --> 00:10:29,120
one reason or another a lot of that is

220
00:10:26,690 --> 00:10:32,810
revolves around signal trapping and

221
00:10:29,120 --> 00:10:33,800
signal handling because since the since

222
00:10:32,810 --> 00:10:35,329
the container doesn't have its own

223
00:10:33,800 --> 00:10:40,430
kernel it is relying on the O's kernel

224
00:10:35,330 --> 00:10:46,690
to to do stuff like signal trapping so

225
00:10:40,430 --> 00:10:49,370
anyway long story short you are able to

226
00:10:46,690 --> 00:10:54,650
use these commute emulators to

227
00:10:49,370 --> 00:10:58,070
seamlessly run a to seamlessly run a non

228
00:10:54,650 --> 00:11:02,420
native binary on your on your x86

229
00:10:58,070 --> 00:11:06,050
workstation how does this work

230
00:11:02,420 --> 00:11:10,160
there is under your file system

231
00:11:06,050 --> 00:11:14,719
sis FS been format misc I guess that

232
00:11:10,160 --> 00:11:17,300
we're gonna pronounce this there's a way

233
00:11:14,720 --> 00:11:21,320
to register interpreters for a

234
00:11:17,300 --> 00:11:24,500
particular elf signature so what this

235
00:11:21,320 --> 00:11:26,870
means is when the operating system is

236
00:11:24,500 --> 00:11:28,610
looking at a that strength that you're

237
00:11:26,870 --> 00:11:30,769
trying to execute it's going to read

238
00:11:28,610 --> 00:11:33,260
this magic number it's going to consult

239
00:11:30,769 --> 00:11:36,829
this thin format table

240
00:11:33,260 --> 00:11:39,069
do I have some particular interpreter

241
00:11:36,829 --> 00:11:42,649
that is registered for invoking this and

242
00:11:39,070 --> 00:11:45,920
if it does then it will use that

243
00:11:42,649 --> 00:11:48,110
interpreter and like that's going to

244
00:11:45,920 --> 00:11:51,769
seamlessly do this like if you're if you

245
00:11:48,110 --> 00:11:54,769
have just on your local host like a crop

246
00:11:51,769 --> 00:11:57,920
a dot out and that's compiled for MIPS

247
00:11:54,769 --> 00:12:01,250
and you've registered on your local host

248
00:11:57,920 --> 00:12:05,439
a MIPS interpreter for that elf

249
00:12:01,250 --> 00:12:08,750
signature then when you execute that

250
00:12:05,440 --> 00:12:12,579
that file just at like thought slash

251
00:12:08,750 --> 00:12:16,339
laid out it'll it'll run because the

252
00:12:12,579 --> 00:12:19,790
quim u interpreter is just sort of

253
00:12:16,339 --> 00:12:21,589
silently and being invokes when you run

254
00:12:19,790 --> 00:12:24,410
that and you'll see how this looks

255
00:12:21,589 --> 00:12:27,880
actually on the and the PS output that's

256
00:12:24,410 --> 00:12:30,980
going to be in some of the slides later

257
00:12:27,880 --> 00:12:32,480
so now we're ready to talk fully I think

258
00:12:30,980 --> 00:12:35,209
about those multi architecture

259
00:12:32,480 --> 00:12:39,620
containers content container images for

260
00:12:35,209 --> 00:12:41,209
docker include me so the first thing

261
00:12:39,620 --> 00:12:44,510
that you have to do and this is sort of

262
00:12:41,209 --> 00:12:46,939
unusual for for docker containers to

263
00:12:44,510 --> 00:12:50,569
have to require any other software being

264
00:12:46,940 --> 00:12:53,810
installed on the host system or to run a

265
00:12:50,570 --> 00:12:55,820
command and privilege mode before you

266
00:12:53,810 --> 00:13:00,380
can actually use it so I know this is a

267
00:12:55,820 --> 00:13:03,350
bit weird but it's it's actually

268
00:13:00,380 --> 00:13:06,680
necessary and it it works surprisingly

269
00:13:03,350 --> 00:13:08,690
well you could you could do this on your

270
00:13:06,680 --> 00:13:10,939
own if you freaked out about running

271
00:13:08,690 --> 00:13:13,220
someone's code and privilege mode but if

272
00:13:10,940 --> 00:13:16,070
you if you look at how that stuff works

273
00:13:13,220 --> 00:13:18,140
it's um both really enlightening us to

274
00:13:16,070 --> 00:13:27,080
how this whole

275
00:13:18,140 --> 00:13:27,080
in format registry works as a whole but

276
00:13:27,840 --> 00:13:33,870
basically to do this we need to install

277
00:13:30,750 --> 00:13:41,730
clay me on the whole system and then we

278
00:13:33,870 --> 00:13:45,120
will run this privileged quim you user

279
00:13:41,730 --> 00:13:48,210
static command so this is pulling an

280
00:13:45,120 --> 00:13:52,980
image from the multi arch repository on

281
00:13:48,210 --> 00:13:55,770
get on docker hub it's gonna delete it

282
00:13:52,980 --> 00:13:57,960
when it's done running it's passing the

283
00:13:55,770 --> 00:14:01,890
reset flag and the persistent flag and

284
00:13:57,960 --> 00:14:05,550
so what this does is it populates all of

285
00:14:01,890 --> 00:14:07,740
these interpreters and that directory

286
00:14:05,550 --> 00:14:10,859
there and the contents of those look

287
00:14:07,740 --> 00:14:14,310
like and if it's enabled or not what the

288
00:14:10,860 --> 00:14:16,770
interpreter is any flags to put in any

289
00:14:14,310 --> 00:14:18,750
offsets to take into consideration and

290
00:14:16,770 --> 00:14:22,550
the magic number is registered for and

291
00:14:18,750 --> 00:14:25,500
I'm not sure the mask value does but

292
00:14:22,550 --> 00:14:27,630
this command is what gives you that and

293
00:14:25,500 --> 00:14:29,880
it has to run in privileged mode because

294
00:14:27,630 --> 00:14:32,580
it has to change these files on the host

295
00:14:29,880 --> 00:14:34,470
operating system and that's all it does

296
00:14:32,580 --> 00:14:37,080
so like I said you could just run that

297
00:14:34,470 --> 00:14:39,870
script actually on your own o system but

298
00:14:37,080 --> 00:14:43,170
this is important for the containers to

299
00:14:39,870 --> 00:14:44,640
know it's important for this container

300
00:14:43,170 --> 00:14:46,170
to be on the system because you you have

301
00:14:44,640 --> 00:14:49,110
to be able to copy binaries out of it

302
00:14:46,170 --> 00:14:51,689
later on and so once we've executed this

303
00:14:49,110 --> 00:14:53,160
command we can test it out

304
00:14:51,690 --> 00:14:55,620
so here's real quick it needs two

305
00:14:53,160 --> 00:14:59,640
commands to test it out if you just pull

306
00:14:55,620 --> 00:15:01,470
that arm rv-8 go to the image and check

307
00:14:59,640 --> 00:15:05,580
the new name and indeed it thinks that

308
00:15:01,470 --> 00:15:08,910
it's a ARM processor so the basic use

309
00:15:05,580 --> 00:15:14,580
cases for this is seamlessly executing

310
00:15:08,910 --> 00:15:16,680
our MIPS PowerPC any other random on x86

311
00:15:14,580 --> 00:15:20,209
binary you can think of you saw that

312
00:15:16,680 --> 00:15:23,040
list it's is pretty huge the number of

313
00:15:20,209 --> 00:15:28,500
emulators that exists in the the commute

314
00:15:23,040 --> 00:15:31,050
universe if you were interested in say

315
00:15:28,500 --> 00:15:34,020
reverse engineering malware or even

316
00:15:31,050 --> 00:15:36,890
reverse engineering like a binary blob

317
00:15:34,020 --> 00:15:40,290
component of a router or an IOT device

318
00:15:36,890 --> 00:15:41,279
you could set up your container image to

319
00:15:40,290 --> 00:15:44,879
also

320
00:15:41,279 --> 00:15:47,069
run a gdb server so then you could do

321
00:15:44,879 --> 00:15:49,550
remote debugging on whatever programs

322
00:15:47,069 --> 00:15:53,519
are running inside that container you

323
00:15:49,550 --> 00:15:56,729
can also feasibly connect it to like Ida

324
00:15:53,519 --> 00:16:01,019
to decompile and patch binaries on the

325
00:15:56,730 --> 00:16:04,110
fly just keeping in mind that once once

326
00:16:01,019 --> 00:16:05,579
you've modified binaries and I think in

327
00:16:04,110 --> 00:16:07,620
a lot of cases is going to be necessary

328
00:16:05,579 --> 00:16:11,550
to get them to actually work but there

329
00:16:07,620 --> 00:16:13,379
are some parts of binaries and the init

330
00:16:11,550 --> 00:16:17,339
scripts of these routers that I've

331
00:16:13,379 --> 00:16:19,889
looked at where definitely if you want

332
00:16:17,339 --> 00:16:24,170
to avoid some serious errors you will

333
00:16:19,889 --> 00:16:29,220
probably have to take out some bits of

334
00:16:24,170 --> 00:16:30,628
some some instructions but then you're

335
00:16:29,220 --> 00:16:32,790
not really studying the same system

336
00:16:30,629 --> 00:16:35,459
you're studying a distance a different

337
00:16:32,790 --> 00:16:37,769
system so that's one limitation to keep

338
00:16:35,459 --> 00:16:41,758
in mind we're doing a lot of things that

339
00:16:37,769 --> 00:16:44,279
are changing the complete environment of

340
00:16:41,759 --> 00:16:47,160
how these systems are intended to run

341
00:16:44,279 --> 00:16:49,019
and we have to always keep that in mind

342
00:16:47,160 --> 00:16:52,290
that we're not really working on two

343
00:16:49,019 --> 00:16:55,379
devices over working on a really packed

344
00:16:52,290 --> 00:16:59,040
up emulator version of how that device

345
00:16:55,379 --> 00:17:02,370
is going to work there's also a good way

346
00:16:59,040 --> 00:17:04,799
to quickly test out given payloads so if

347
00:17:02,370 --> 00:17:06,689
you're doing some kind of global exploit

348
00:17:04,799 --> 00:17:09,359
development and you're tired like

349
00:17:06,689 --> 00:17:12,510
writing some assembly forearm or MIPS

350
00:17:09,359 --> 00:17:15,688
and need to test it out well you can use

351
00:17:12,510 --> 00:17:19,439
this container to seamlessly execute

352
00:17:15,689 --> 00:17:20,760
that kind of that but that binary just

353
00:17:19,439 --> 00:17:26,939
like we did with the you name data

354
00:17:20,760 --> 00:17:28,109
fashion command earlier excuse me this

355
00:17:26,939 --> 00:17:28,980
is also particularly useful if you're

356
00:17:28,109 --> 00:17:33,600
porting something from a different

357
00:17:28,980 --> 00:17:36,659
architecture if you want to make sure

358
00:17:33,600 --> 00:17:39,570
that so you have a nice piece of shell

359
00:17:36,659 --> 00:17:43,020
code for arm and you want to as an

360
00:17:39,570 --> 00:17:46,770
exercise poured into MIPS and you have a

361
00:17:43,020 --> 00:17:50,820
pretty quick development cycle where you

362
00:17:46,770 --> 00:17:52,770
can test it out right away so now we'll

363
00:17:50,820 --> 00:17:55,080
talk about how we can use these

364
00:17:52,770 --> 00:17:57,570
multi-edge containers to emulate the IOT

365
00:17:55,080 --> 00:17:59,129
firmware and biote firmware the only

366
00:17:57,570 --> 00:18:03,480
ones we're going to talk about are just

367
00:17:59,130 --> 00:18:05,340
a couple of routers well you could you

368
00:18:03,480 --> 00:18:08,340
could feasibly do this with other IOT

369
00:18:05,340 --> 00:18:11,039
devices I just haven't had much of an

370
00:18:08,340 --> 00:18:12,689
opportunity to either get anything

371
00:18:11,039 --> 00:18:16,950
that's an interesting one or find one

372
00:18:12,690 --> 00:18:18,539
that has the right kind of squash file

373
00:18:16,950 --> 00:18:22,470
system that thermodyne knows not to

374
00:18:18,539 --> 00:18:24,690
extract so um if anybody wants to try

375
00:18:22,470 --> 00:18:26,730
this at home and has a more interesting

376
00:18:24,690 --> 00:18:28,289
device than a router and gets it to work

377
00:18:26,730 --> 00:18:32,330
I'd be really interested to hear about

378
00:18:28,289 --> 00:18:35,780
that nevertheless

379
00:18:32,330 --> 00:18:38,220
getting firmware can prove a challenge a

380
00:18:35,780 --> 00:18:40,600
lot of the times when you're lucky and

381
00:18:38,220 --> 00:18:42,130
for these guys is the case

382
00:18:40,600 --> 00:18:47,289
it's a simple matter of just downloading

383
00:18:42,130 --> 00:18:48,820
from the vendor's website in thermodyne

384
00:18:47,289 --> 00:18:52,570
which there's a tool we'll take a look

385
00:18:48,820 --> 00:18:56,350
at in a minute is contains its own

386
00:18:52,570 --> 00:19:01,000
scraper module that that will just pull

387
00:18:56,350 --> 00:19:05,049
down a ton of zip files from all kinds

388
00:19:01,000 --> 00:19:07,139
of different hardware providers not all

389
00:19:05,049 --> 00:19:11,860
of the files that it pulls down are

390
00:19:07,139 --> 00:19:13,860
useful in any kind of way so and it and

391
00:19:11,860 --> 00:19:16,870
so there's a lot of signal-to-noise

392
00:19:13,860 --> 00:19:21,008
ratio error that was yeah noise to

393
00:19:16,870 --> 00:19:26,168
signal ratio is very high but those

394
00:19:21,009 --> 00:19:28,870
scrapers are pretty cool and if there's

395
00:19:26,169 --> 00:19:30,190
some kind of exotic device that you're

396
00:19:28,870 --> 00:19:32,080
looking for and you can't find the

397
00:19:30,190 --> 00:19:34,200
firmware publicly you'll have to get

398
00:19:32,080 --> 00:19:39,970
creative I think there's other talks

399
00:19:34,200 --> 00:19:42,730
about that but for our case we're going

400
00:19:39,970 --> 00:19:44,860
to look at this this kind of popular

401
00:19:42,730 --> 00:19:50,289
Netgear router that has a lot of denoted

402
00:19:44,860 --> 00:19:52,330
vulnerabilities and and d-link dir eight

403
00:19:50,289 --> 00:19:55,029
six six which also has some

404
00:19:52,330 --> 00:19:58,928
vulnerabilities and I just simply

405
00:19:55,029 --> 00:20:01,120
download these guys from the vendor so

406
00:19:58,929 --> 00:20:04,629
fer medina is a tool that I use for

407
00:20:01,120 --> 00:20:06,129
extracting filesystem contents from the

408
00:20:04,629 --> 00:20:08,469
firmware blogs that I download in the

409
00:20:06,129 --> 00:20:10,870
case of the nut gear want it was a zip

410
00:20:08,470 --> 00:20:14,019
file that I downloaded and in the case

411
00:20:10,870 --> 00:20:18,039
of the d-link one it was a bin file that

412
00:20:14,019 --> 00:20:21,519
I downloaded firma diagnose how to deal

413
00:20:18,039 --> 00:20:25,269
with both I just pass it in there and it

414
00:20:21,519 --> 00:20:28,779
extracts me the route FS you could keep

415
00:20:25,269 --> 00:20:30,789
going down like using only the FIR

416
00:20:28,779 --> 00:20:35,799
Medina tools if to emulate this device

417
00:20:30,789 --> 00:20:39,309
if you wanted to it has that capacity

418
00:20:35,799 --> 00:20:40,990
but that's not our goal so that would be

419
00:20:39,309 --> 00:20:42,549
a completely different talk there's good

420
00:20:40,990 --> 00:20:44,309
tutorials out there if you want to do

421
00:20:42,549 --> 00:20:47,200
that there are some advantages to

422
00:20:44,309 --> 00:20:51,580
emulating the firmware with full system

423
00:20:47,200 --> 00:20:54,130
emulation but we wanna

424
00:20:51,580 --> 00:20:57,070
we want to do something else so all

425
00:20:54,130 --> 00:20:58,950
we've ever done here for to do with

426
00:20:57,070 --> 00:21:03,760
Ramadan here is extract the root of s

427
00:20:58,950 --> 00:21:05,830
and you can see like this is this is all

428
00:21:03,760 --> 00:21:07,690
this necessary to do I'm running this

429
00:21:05,830 --> 00:21:14,370
inside of a firm Adan container because

430
00:21:07,690 --> 00:21:18,940
even for a baton has a container very

431
00:21:14,370 --> 00:21:20,830
very straight forward command here you

432
00:21:18,940 --> 00:21:23,710
just passes the filename and tell it to

433
00:21:20,830 --> 00:21:25,770
unzip to the images file you can see it

434
00:21:23,710 --> 00:21:29,500
doesn't it does some work and then voila

435
00:21:25,770 --> 00:21:32,500
we have in this images directory one

436
00:21:29,500 --> 00:21:39,090
tar.gz which I read innate which I'll

437
00:21:32,500 --> 00:21:44,620
rename back to Netgear W now 3:25 easy

438
00:21:39,090 --> 00:21:47,949
then this is the docker file for turning

439
00:21:44,620 --> 00:21:51,100
that that tarball that we just got out

440
00:21:47,950 --> 00:21:58,450
of Rama dine into a docker container

441
00:21:51,100 --> 00:22:02,560
image so this first stanza is is just

442
00:21:58,450 --> 00:22:04,750
instantiating that we want to call multi

443
00:22:02,560 --> 00:22:07,120
arch debian Ted bootstrap nips Buster

444
00:22:04,750 --> 00:22:11,080
slim so that this is just a minimal

445
00:22:07,120 --> 00:22:14,080
Debian image that has the MIPS emulators

446
00:22:11,080 --> 00:22:16,389
on it and we're importing this as clinic

447
00:22:14,080 --> 00:22:18,399
this is like a Python in for statement

448
00:22:16,390 --> 00:22:22,300
basically we do absolutely nothing with

449
00:22:18,400 --> 00:22:23,590
it then our next step is a completely

450
00:22:22,300 --> 00:22:25,570
new container that we're talking about

451
00:22:23,590 --> 00:22:28,030
that is starting from scratch and

452
00:22:25,570 --> 00:22:31,629
scratch means nothing it is just the

453
00:22:28,030 --> 00:22:33,940
bare minimum like process file system

454
00:22:31,630 --> 00:22:37,540
there's stuff that amounts from from the

455
00:22:33,940 --> 00:22:40,600
host operating system we add the

456
00:22:37,540 --> 00:22:42,220
contents of this firmware tar.gz which

457
00:22:40,600 --> 00:22:46,300
is the bundle we downloaded and

458
00:22:42,220 --> 00:22:51,400
extracted for armadyne we copy from this

459
00:22:46,300 --> 00:22:54,730
quim you template just the file when you

460
00:22:51,400 --> 00:23:01,960
MIPS static and we throw into user dot

461
00:22:54,730 --> 00:23:02,370
bin then we tell docker that you prefix

462
00:23:01,960 --> 00:23:06,270
command

463
00:23:02,370 --> 00:23:10,080
with quinium ecstatic den dizzy box then

464
00:23:06,270 --> 00:23:12,420
we export the environment architecture

465
00:23:10,080 --> 00:23:16,949
to nips and we're done that's it very

466
00:23:12,420 --> 00:23:21,030
very simple this is the build

467
00:23:16,950 --> 00:23:26,550
looks like happens really fast just copy

468
00:23:21,030 --> 00:23:28,530
a route that binary if anyone is gonna

469
00:23:26,550 --> 00:23:31,980
follow along with this I has a tutorial

470
00:23:28,530 --> 00:23:37,710
or whatever one thing to keep in mind

471
00:23:31,980 --> 00:23:40,400
this is a bug and in the registrations

472
00:23:37,710 --> 00:23:44,520
and the multi art registration scripts

473
00:23:40,400 --> 00:23:50,040
where it registers both the Quinny nips

474
00:23:44,520 --> 00:23:52,290
and cluny nips in 32 and in 32 e/l which

475
00:23:50,040 --> 00:23:55,440
are just like slightly different

476
00:23:52,290 --> 00:23:57,870
variations but they will segfault if you

477
00:23:55,440 --> 00:24:00,000
try to execute a regular mips binary on

478
00:23:57,870 --> 00:24:03,840
them but they have the same magic number

479
00:24:00,000 --> 00:24:05,790
so there's the one Clemmy you mips and

480
00:24:03,840 --> 00:24:07,320
then clips in 32 or register the same

481
00:24:05,790 --> 00:24:10,320
thing so you just disable those by

482
00:24:07,320 --> 00:24:14,010
echoing -1 into the best route and they

483
00:24:10,320 --> 00:24:16,830
go away and then all of your mips all of

484
00:24:14,010 --> 00:24:18,629
you mips images will run fine this is

485
00:24:16,830 --> 00:24:20,580
this was a major stumbling block and

486
00:24:18,630 --> 00:24:22,320
it's not very not very easy to find out

487
00:24:20,580 --> 00:24:24,199
about so i thought it would be good to

488
00:24:22,320 --> 00:24:28,169
include it here

489
00:24:24,200 --> 00:24:31,620
so now let's explore the new shells so i

490
00:24:28,170 --> 00:24:34,830
did the exact same build process for

491
00:24:31,620 --> 00:24:38,580
both the Netgear and a d-link router

492
00:24:34,830 --> 00:24:40,260
they were gonna be looking at the only

493
00:24:38,580 --> 00:24:43,139
difference was the contents of the

494
00:24:40,260 --> 00:24:44,640
firmware tarball so they had the exact

495
00:24:43,140 --> 00:24:47,250
same docker file they just live in

496
00:24:44,640 --> 00:24:49,050
different directories and and those

497
00:24:47,250 --> 00:24:53,550
directories is two different different

498
00:24:49,050 --> 00:24:56,399
content and and firmware target easy so

499
00:24:53,550 --> 00:24:59,940
let's let's run this and see what's up

500
00:24:56,400 --> 00:25:02,940
in the show we see there's this linux RC

501
00:24:59,940 --> 00:25:04,530
file in the root directory that's that

502
00:25:02,940 --> 00:25:07,550
looks interesting but it actually just

503
00:25:04,530 --> 00:25:10,910
points back to bindus box kind of weird

504
00:25:07,550 --> 00:25:13,020
we can see what binaries there are

505
00:25:10,910 --> 00:25:14,730
there's some kinda interesting looking

506
00:25:13,020 --> 00:25:18,320
ones

507
00:25:14,730 --> 00:25:20,970
some interesting stuff in the SD folder

508
00:25:18,320 --> 00:25:26,309
they're just weird and non there's this

509
00:25:20,970 --> 00:25:28,200
weird admin user it has its own show and

510
00:25:26,309 --> 00:25:31,230
the shelves got some weird stuff in the

511
00:25:28,200 --> 00:25:32,850
past be interesting to look at some of

512
00:25:31,230 --> 00:25:35,790
these things former upgrade password

513
00:25:32,850 --> 00:25:37,980
etcetera and we can also see all of the

514
00:25:35,790 --> 00:25:40,440
init scripts that it goes through and

515
00:25:37,980 --> 00:25:43,470
and that tells us a lot about how the

516
00:25:40,440 --> 00:25:48,120
system comes up and that also tells us a

517
00:25:43,470 --> 00:25:50,160
lot about how to improve this image such

518
00:25:48,120 --> 00:25:52,199
that when you start it instead of just

519
00:25:50,160 --> 00:25:55,250
spawning a shell it actually starts the

520
00:25:52,200 --> 00:25:58,130
whole in its service without failing

521
00:25:55,250 --> 00:26:00,150
it'll talk more about that later

522
00:25:58,130 --> 00:26:02,549
and that list explore the web interface

523
00:26:00,150 --> 00:26:05,760
now like this works to where we're

524
00:26:02,549 --> 00:26:09,960
exposing my local host port 8080 on to

525
00:26:05,760 --> 00:26:12,510
the container port 80 so if I just pull

526
00:26:09,960 --> 00:26:15,720
up my browser pointed at the server that

527
00:26:12,510 --> 00:26:19,379
this is running on I see this beautiful

528
00:26:15,720 --> 00:26:22,950
net cure router page that most mostly

529
00:26:19,380 --> 00:26:25,650
functions and this is after all the init

530
00:26:22,950 --> 00:26:27,600
scripts have run like I said these new

531
00:26:25,650 --> 00:26:29,880
scripts contain a ton of air it's just

532
00:26:27,600 --> 00:26:32,668
because of the limitations that will

533
00:26:29,880 --> 00:26:34,860
discuss some detail at the end but

534
00:26:32,669 --> 00:26:38,880
really most of the important services

535
00:26:34,860 --> 00:26:40,199
are running and you can do C so if you

536
00:26:38,880 --> 00:26:41,910
get a good idea of what's going on

537
00:26:40,200 --> 00:26:44,520
inside that router without having to

538
00:26:41,910 --> 00:26:48,450
really do much work if you just pull

539
00:26:44,520 --> 00:26:50,040
this management running locally so this

540
00:26:48,450 --> 00:26:53,340
is the d-link router we can take a look

541
00:26:50,040 --> 00:26:55,500
at that too and I have shelves open all

542
00:26:53,340 --> 00:26:57,360
these in another tab so if there's time

543
00:26:55,500 --> 00:26:59,730
left over at the end and anyone wants to

544
00:26:57,360 --> 00:27:02,428
take a look at what's in those things we

545
00:26:59,730 --> 00:27:09,360
could you could take a dig in more

546
00:27:02,429 --> 00:27:10,799
detail so this is the d-link router it's

547
00:27:09,360 --> 00:27:14,909
actually quite a bit different to such a

548
00:27:10,799 --> 00:27:18,720
Scott and in the s-band and you can see

549
00:27:14,910 --> 00:27:21,240
that as a service is just a ton of PHP

550
00:27:18,720 --> 00:27:23,610
files some of them have kind of same

551
00:27:21,240 --> 00:27:25,530
sounding names there's just there's a

552
00:27:23,610 --> 00:27:27,699
lot of interesting stuff on inside these

553
00:27:25,530 --> 00:27:32,639
file systems I really wonder what

554
00:27:27,700 --> 00:27:36,370
f/w sign builder an image sign there's

555
00:27:32,640 --> 00:27:38,950
random 10 files in here there's so many

556
00:27:36,370 --> 00:27:41,350
things to explore in here that are

557
00:27:38,950 --> 00:27:43,150
inaccessible unless you're willing to go

558
00:27:41,350 --> 00:27:45,840
through the full process of setting up a

559
00:27:43,150 --> 00:27:48,340
Columbia environment to emulate it and

560
00:27:45,840 --> 00:27:50,470
since this process is more or less just

561
00:27:48,340 --> 00:27:52,330
the same for each one as long as we were

562
00:27:50,470 --> 00:27:56,080
able to extract the tarball from

563
00:27:52,330 --> 00:27:58,210
thermodyne you'd be able to feasibly use

564
00:27:56,080 --> 00:28:02,980
this process to build a ton of images

565
00:27:58,210 --> 00:28:04,300
with complete automation and final kinds

566
00:28:02,980 --> 00:28:05,860
of crazy shoot inside of routers that

567
00:28:04,300 --> 00:28:10,570
probably nobody's even looked at or

568
00:28:05,860 --> 00:28:14,050
liked properly given a full full audit

569
00:28:10,570 --> 00:28:16,870
on at least so now we're gonna move on

570
00:28:14,050 --> 00:28:25,710
to the next topic which is emulating the

571
00:28:16,870 --> 00:28:25,709
IOT malware with docker and so

572
00:28:25,960 --> 00:28:31,809
the case study here is going to be the

573
00:28:29,169 --> 00:28:35,049
mayor I bought net and there's a variety

574
00:28:31,809 --> 00:28:38,649
of reasons why this planet is of

575
00:28:35,049 --> 00:28:44,309
particular interest for for these

576
00:28:38,649 --> 00:28:48,189
techniques because it primarily targets

577
00:28:44,309 --> 00:28:53,860
IOT devices like smart TVs security

578
00:28:48,190 --> 00:28:55,720
cameras personal like home routers you

579
00:28:53,860 --> 00:28:58,029
name it all kinds of things that are

580
00:28:55,720 --> 00:29:01,509
just out there running Linux and

581
00:28:58,029 --> 00:29:07,690
probably never seeing a patch-over also

582
00:29:01,509 --> 00:29:09,970
usually with default settings the at

583
00:29:07,690 --> 00:29:13,149
some point in 2016

584
00:29:09,970 --> 00:29:15,190
some researchers finally like discovered

585
00:29:13,149 --> 00:29:17,678
it and and made it release about it a

586
00:29:15,190 --> 00:29:20,860
few months later some person claiming to

587
00:29:17,679 --> 00:29:25,749
be the author releases the full source

588
00:29:20,860 --> 00:29:28,178
code on pac forums and as a result a lot

589
00:29:25,749 --> 00:29:31,119
more people are using it many new

590
00:29:28,179 --> 00:29:32,590
different variants of it emerged most of

591
00:29:31,119 --> 00:29:34,749
them I'm gonna guess are just people

592
00:29:32,590 --> 00:29:37,330
like rebranding the splash and you're

593
00:29:34,749 --> 00:29:38,259
doing something stupid but some of them

594
00:29:37,330 --> 00:29:39,990
might actually have a completely

595
00:29:38,259 --> 00:29:42,549
different functionality or capabilities

596
00:29:39,990 --> 00:29:45,360
there's I think there's archives around

597
00:29:42,549 --> 00:29:48,490
of quite a lot of different samples and

598
00:29:45,360 --> 00:29:51,428
again with these techniques I've only

599
00:29:48,490 --> 00:29:55,029
built one mirror i variant but it's

600
00:29:51,429 --> 00:29:57,220
feasible that with a few scripts you

601
00:29:55,029 --> 00:29:59,950
could again set up an automated pipeline

602
00:29:57,220 --> 00:30:04,019
for getting docker images that have all

603
00:29:59,950 --> 00:30:04,019
of these Mirai various at least compiled

604
00:30:04,080 --> 00:30:10,059
and most as most of the devices of

605
00:30:07,749 --> 00:30:13,480
course are not going to be running x86

606
00:30:10,059 --> 00:30:15,399
processors routers and these other Smart

607
00:30:13,480 --> 00:30:22,419
TVs usually MIPS or arm

608
00:30:15,399 --> 00:30:23,860
and since this hack for is the source

609
00:30:22,419 --> 00:30:26,470
code is in the public domain so we can

610
00:30:23,860 --> 00:30:29,080
just build this ourselves and change

611
00:30:26,470 --> 00:30:31,330
there we need to change to make it safe

612
00:30:29,080 --> 00:30:33,759
and sane to them to use and here's a

613
00:30:31,330 --> 00:30:36,970
quote from the hack Forbes pose with

614
00:30:33,759 --> 00:30:38,920
Mariah usually pull max 380 K box from

615
00:30:36,970 --> 00:30:42,850
telnet alone

616
00:30:38,920 --> 00:30:45,670
this is a this is how they talk is kind

617
00:30:42,850 --> 00:30:48,129
of funny but it's also it sounds it

618
00:30:45,670 --> 00:30:50,350
tells the extent of how crazy this is

619
00:30:48,130 --> 00:30:52,540
because there's so many things out there

620
00:30:50,350 --> 00:30:57,240
with open telnet and default credentials

621
00:30:52,540 --> 00:31:00,040
and I I believe this crazy brag because

622
00:30:57,240 --> 00:31:01,870
three hundred eight thousand and October

623
00:31:00,040 --> 00:31:04,060
2016 things have improved a little bit

624
00:31:01,870 --> 00:31:07,090
since then the best seems feasible and

625
00:31:04,060 --> 00:31:08,980
like that's a lot of thoughts that's the

626
00:31:07,090 --> 00:31:11,590
best that's a lot of things out there

627
00:31:08,980 --> 00:31:13,930
running this malware that that can

628
00:31:11,590 --> 00:31:15,879
potentially be pretty destructive and it

629
00:31:13,930 --> 00:31:19,300
was and it was responsible for some of

630
00:31:15,880 --> 00:31:23,680
the large service attacks that we've

631
00:31:19,300 --> 00:31:27,010
seen so so this is to highlight the

632
00:31:23,680 --> 00:31:29,080
severity of of why these why this IOT

633
00:31:27,010 --> 00:31:31,840
malware is so important to research and

634
00:31:29,080 --> 00:31:36,909
understand and also why is sort of like

635
00:31:31,840 --> 00:31:39,030
I've also a quite a job so how is this

636
00:31:36,910 --> 00:31:41,770
botnet structured in terms of the source

637
00:31:39,030 --> 00:31:46,540
so basically divided up between the

638
00:31:41,770 --> 00:31:49,300
command and control server and the bots

639
00:31:46,540 --> 00:31:54,639
which are the clients the the command

640
00:31:49,300 --> 00:31:59,110
control control is written in go and the

641
00:31:54,640 --> 00:32:02,140
bots are written in C if and if you look

642
00:31:59,110 --> 00:32:05,969
at the stupid hack forums Errol they're

643
00:32:02,140 --> 00:32:10,510
like places where skids talk about

644
00:32:05,970 --> 00:32:12,640
booting and stuff one of the recurring

645
00:32:10,510 --> 00:32:15,970
themes among them is not knowing how to

646
00:32:12,640 --> 00:32:19,390
use GCC the build instructions for the

647
00:32:15,970 --> 00:32:22,230
stuff that comes with it is pretty Lisa

648
00:32:19,390 --> 00:32:24,730
leaves a lot to be desired there's no

649
00:32:22,230 --> 00:32:29,290
there's no make file there's no oto

650
00:32:24,730 --> 00:32:31,660
there's no effort was made to ensure

651
00:32:29,290 --> 00:32:33,510
that the stuff compiles or builds in any

652
00:32:31,660 --> 00:32:36,730
kind of way that's reproducible or

653
00:32:33,510 --> 00:32:39,160
reliable because their malware authors

654
00:32:36,730 --> 00:32:41,800
in third trying to make a buck and I

655
00:32:39,160 --> 00:32:44,730
really make a beautiful build pipeline

656
00:32:41,800 --> 00:32:47,290
for their for their software but um

657
00:32:44,730 --> 00:32:49,630
through process of trial and error I was

658
00:32:47,290 --> 00:32:51,670
able to figure out how all of these

659
00:32:49,630 --> 00:32:56,760
stuff is supposed to be configured

660
00:32:51,670 --> 00:32:56,760
and figure out which of the variety of

661
00:32:58,470 --> 00:33:04,090
like hard-coded values you need to

662
00:33:01,720 --> 00:33:06,520
override that are not described in the

663
00:33:04,090 --> 00:33:08,699
original blog post or the hack forum

664
00:33:06,520 --> 00:33:11,200
suppose that came along with it

665
00:33:08,700 --> 00:33:14,710
figuring out how this stuff is actually

666
00:33:11,200 --> 00:33:16,540
meant to be compiled and then being able

667
00:33:14,710 --> 00:33:19,000
to build it in a way that's reproducible

668
00:33:16,540 --> 00:33:20,649
when you're trying to modify it or see

669
00:33:19,000 --> 00:33:24,520
what certain pieces of code are really

670
00:33:20,650 --> 00:33:26,740
supposed to do would be kind of a pain

671
00:33:24,520 --> 00:33:30,610
without these docker built containers so

672
00:33:26,740 --> 00:33:34,210
this is why I think this technique has

673
00:33:30,610 --> 00:33:36,370
proven really valuable for um for

674
00:33:34,210 --> 00:33:39,340
researching this button in particular

675
00:33:36,370 --> 00:33:42,939
and in this code base is really just

676
00:33:39,340 --> 00:33:46,120
like it's infuriating to follow so so

677
00:33:42,940 --> 00:33:48,190
much of it is just extremely sloppy and

678
00:33:46,120 --> 00:33:51,310
confusing there's some of this really

679
00:33:48,190 --> 00:33:53,760
funny like this anti gdb entry thing I

680
00:33:51,310 --> 00:33:56,260
have no idea what as supposed to do but

681
00:33:53,760 --> 00:33:57,910
some lame attempt to anti forensics for

682
00:33:56,260 --> 00:33:59,770
me is just a joke I don't know but

683
00:33:57,910 --> 00:34:03,490
there's there's oh there's a lot of just

684
00:33:59,770 --> 00:34:06,700
bizarre stuff in there which which makes

685
00:34:03,490 --> 00:34:09,940
it kind of a nightmare to to modify this

686
00:34:06,700 --> 00:34:11,590
stuff because and you do have to modify

687
00:34:09,940 --> 00:34:14,380
in order to get it to run for you

688
00:34:11,590 --> 00:34:17,530
because the IP address that is going to

689
00:34:14,380 --> 00:34:19,929
be listening on and the the IP address

690
00:34:17,530 --> 00:34:22,870
that the bot thanks that the situ is

691
00:34:19,929 --> 00:34:26,470
going to be on these are all compiled in

692
00:34:22,870 --> 00:34:28,540
at these are all determined at compile

693
00:34:26,469 --> 00:34:29,529
time for the bottom so you have to go

694
00:34:28,540 --> 00:34:30,639
digging through the source you have to

695
00:34:29,530 --> 00:34:32,440
find out where these things are defined

696
00:34:30,639 --> 00:34:34,270
you guys have to see what else it is

697
00:34:32,440 --> 00:34:35,860
doing so when I ran this for the first

698
00:34:34,270 --> 00:34:37,570
time and actually got it running I was

699
00:34:35,860 --> 00:34:41,230
so excited and then I started singing

700
00:34:37,570 --> 00:34:44,080
like target IP addresses some IP

701
00:34:41,230 --> 00:34:45,310
addresses on my local network and I'm

702
00:34:44,080 --> 00:34:47,889
like holy this thing is actually

703
00:34:45,310 --> 00:34:50,650
going to start trying to brute-force

704
00:34:47,889 --> 00:34:54,668
tell my seven I'm gonna be pulling 300

705
00:34:50,650 --> 00:34:58,390
ATK box a day so um so I shut it off and

706
00:34:54,668 --> 00:35:01,830
then dug around the source finds out

707
00:34:58,390 --> 00:35:04,339
that as this gift random IP function

708
00:35:01,830 --> 00:35:07,038
which

709
00:35:04,339 --> 00:35:09,828
seriously just generates a random IP

710
00:35:07,039 --> 00:35:11,630
address and then make sure that the

711
00:35:09,829 --> 00:35:13,999
octal values are not contained in any

712
00:35:11,630 --> 00:35:17,180
Rangers belonging to like the US Postal

713
00:35:13,999 --> 00:35:20,089
Service or the Department of Defense so

714
00:35:17,180 --> 00:35:25,098
it has some of these sitter blocks that

715
00:35:20,089 --> 00:35:27,200
it that it ignores and but then what it

716
00:35:25,099 --> 00:35:29,569
just gets a random IP and scans it so

717
00:35:27,200 --> 00:35:31,279
once this bot starts running it's going

718
00:35:29,569 --> 00:35:34,038
to start scanning and attacking anything

719
00:35:31,279 --> 00:35:37,249
that's got a brute forcible telnet or

720
00:35:34,039 --> 00:35:39,109
whatever else it's looking for and this

721
00:35:37,249 --> 00:35:41,359
is one of the valuable things about

722
00:35:39,109 --> 00:35:44,140
running it is you get to see exactly

723
00:35:41,359 --> 00:35:45,828
what it's rep what it's looking for and

724
00:35:44,140 --> 00:35:47,719
you get to see you

725
00:35:45,829 --> 00:35:56,539
what it does want to find something that

726
00:35:47,719 --> 00:35:59,719
it thinks it might be able to attack so

727
00:35:56,539 --> 00:36:02,450
a lot of customizations had to go into

728
00:35:59,719 --> 00:36:03,309
the Moriah source to really get this

729
00:36:02,450 --> 00:36:07,098
working

730
00:36:03,309 --> 00:36:10,309
and I basically neutered the thing by

731
00:36:07,099 --> 00:36:12,979
making sure that the only subnet that's

732
00:36:10,309 --> 00:36:16,279
going to scan is in this one seven to

733
00:36:12,979 --> 00:36:18,468
thirty thirty sitter block which we'll

734
00:36:16,279 --> 00:36:21,499
see later is the sitter block for

735
00:36:18,469 --> 00:36:24,950
targets and diem and my daugher network

736
00:36:21,499 --> 00:36:29,089
that I set up and this is just another

737
00:36:24,950 --> 00:36:33,140
look at the Mirai source code so this is

738
00:36:29,089 --> 00:36:35,719
how the whole tree looks not super

739
00:36:33,140 --> 00:36:38,719
surprising there's the bot has a few

740
00:36:35,719 --> 00:36:44,259
files main dot C is obviously enter it

741
00:36:38,719 --> 00:36:48,259
is the entry point then this the C -

742
00:36:44,259 --> 00:36:51,380
there's the go files for it the thing

743
00:36:48,259 --> 00:36:55,759
that I did to make this easy to build is

744
00:36:51,380 --> 00:36:58,809
I wrote a little shell scripts that just

745
00:36:55,759 --> 00:37:01,969
compiles the bots and in a you know

746
00:36:58,809 --> 00:37:04,099
reliable reproducible way and then I

747
00:37:01,969 --> 00:37:06,440
added a make file so that I can just

748
00:37:04,099 --> 00:37:07,910
issue a simple command that will build

749
00:37:06,440 --> 00:37:09,680
all those things and put them in the

750
00:37:07,910 --> 00:37:13,308
directory that that I want them to go

751
00:37:09,680 --> 00:37:16,328
into for the for the container to build

752
00:37:13,309 --> 00:37:17,839
so the important thing to understand is

753
00:37:16,329 --> 00:37:20,479
the source

754
00:37:17,839 --> 00:37:22,459
for the absolutely most part except for

755
00:37:20,479 --> 00:37:24,859
the couple of files that I had to make

756
00:37:22,459 --> 00:37:28,308
changes in is the same as the original

757
00:37:24,859 --> 00:37:30,109
source and all I've added is just a

758
00:37:28,309 --> 00:37:32,689
couple of scripts to make my life easier

759
00:37:30,109 --> 00:37:36,739
that will be executed inside of the

760
00:37:32,689 --> 00:37:39,499
docker container the build container so

761
00:37:36,739 --> 00:37:42,319
this make file is not executed like on

762
00:37:39,499 --> 00:37:43,999
your on your localhost this is supposed

763
00:37:42,319 --> 00:37:46,459
to be executed inside the container this

764
00:37:43,999 --> 00:37:50,598
is for building Mirai in a way that is

765
00:37:46,459 --> 00:37:54,739
not running a bunch of long one line

766
00:37:50,599 --> 00:37:59,930
commands and this is just an example of

767
00:37:54,739 --> 00:38:01,249
my fixed up get random IP function the

768
00:37:59,930 --> 00:38:06,410
original thing that they had in here was

769
00:38:01,249 --> 00:38:09,288
absolutely shameful so this is how it

770
00:38:06,410 --> 00:38:10,848
was this is basically the most

771
00:38:09,289 --> 00:38:12,920
significant modification that was made

772
00:38:10,849 --> 00:38:20,689
to the source almost everything else is

773
00:38:12,920 --> 00:38:21,170
the same so now this is the how them

774
00:38:20,689 --> 00:38:26,598
Erised

775
00:38:21,170 --> 00:38:29,779
interface looks once it is up and

776
00:38:26,599 --> 00:38:32,739
running you just tell them that to the

777
00:38:29,779 --> 00:38:36,450
localhost it's listening on sound port

778
00:38:32,739 --> 00:38:39,940
it's usually something stupid

779
00:38:36,450 --> 00:38:42,250
so username/password you you said in the

780
00:38:39,940 --> 00:38:44,860
database has roots you get the stupid

781
00:38:42,250 --> 00:38:49,990
splash screen and then you count your

782
00:38:44,860 --> 00:38:52,720
BOTS so this it gives you a whole

783
00:38:49,990 --> 00:38:57,040
variety of attacks that you can send to

784
00:38:52,720 --> 00:38:59,919
your Minecraft enemies and a bunch of

785
00:38:57,040 --> 00:39:02,529
flags that frankly I don't I'm I've just

786
00:38:59,920 --> 00:39:07,780
looked at this briefly but it seems kind

787
00:39:02,530 --> 00:39:10,450
of seems kind of interesting but I'm not

788
00:39:07,780 --> 00:39:12,430
really sure who what the use for all

789
00:39:10,450 --> 00:39:14,290
this crazy stuff is anyway all that

790
00:39:12,430 --> 00:39:15,970
stuff has implemented an attack tossie

791
00:39:14,290 --> 00:39:18,279
so if you're interested in all these

792
00:39:15,970 --> 00:39:21,040
different DDoS techniques that are built

793
00:39:18,280 --> 00:39:23,520
into more I attacked I'll see is the

794
00:39:21,040 --> 00:39:23,520
place to look

795
00:39:24,460 --> 00:39:32,630
so here's our build image stalker file

796
00:39:29,950 --> 00:39:34,279
like I said the the tool train for

797
00:39:32,630 --> 00:39:36,440
building this whole thing is kind of

798
00:39:34,280 --> 00:39:39,320
complex you have to have go installed I

799
00:39:36,440 --> 00:39:41,720
think a particular version you have to

800
00:39:39,320 --> 00:39:43,880
have a bunch of cross compilers

801
00:39:41,720 --> 00:39:47,660
installed on your system and and in a

802
00:39:43,880 --> 00:39:50,870
particular file system path you have to

803
00:39:47,660 --> 00:39:52,910
have basically a lot of setup on your

804
00:39:50,870 --> 00:39:54,799
local machine that maybe you don't want

805
00:39:52,910 --> 00:39:56,509
to bother with or maybe you just you

806
00:39:54,800 --> 00:39:58,400
don't want to pollute all your local

807
00:39:56,510 --> 00:40:01,250
machine with a bunch of cross compilers

808
00:39:58,400 --> 00:40:02,420
just to to build this malware and also

809
00:40:01,250 --> 00:40:04,250
you probably want to run the malware

810
00:40:02,420 --> 00:40:06,020
directly on the local machine some kind

811
00:40:04,250 --> 00:40:11,390
of process isolation is nice even though

812
00:40:06,020 --> 00:40:19,400
Dockers and super secure for it's

813
00:40:11,390 --> 00:40:22,790
possible to escape a container so we can

814
00:40:19,400 --> 00:40:26,600
see basically it installs go crazy user

815
00:40:22,790 --> 00:40:28,130
from where I copies over some scripts

816
00:40:26,600 --> 00:40:31,120
that just download the cross compilers

817
00:40:28,130 --> 00:40:36,410
inside the container execute is a

818
00:40:31,120 --> 00:40:40,900
execute these cross compilers runs runs

819
00:40:36,410 --> 00:40:43,190
I make command and then spawn to show so

820
00:40:40,900 --> 00:40:46,490
most important thing is I guess that

821
00:40:43,190 --> 00:40:49,880
it's putting all the stuff that it

822
00:40:46,490 --> 00:40:51,740
builds into the slash bill such memorize

823
00:40:49,880 --> 00:40:54,470
slash a release directory because we

824
00:40:51,740 --> 00:40:56,299
copy we want to be able to copy all

825
00:40:54,470 --> 00:41:00,410
those compiled files that we get out of

826
00:40:56,300 --> 00:41:01,700
this container into the container images

827
00:41:00,410 --> 00:41:04,250
that we're going to use for actually

828
00:41:01,700 --> 00:41:09,460
running the situ and actually running a

829
00:41:04,250 --> 00:41:15,200
test bot so this is the docker file for

830
00:41:09,460 --> 00:41:19,910
building the situ image basically it is

831
00:41:15,200 --> 00:41:24,350
going to this one is but based again on

832
00:41:19,910 --> 00:41:27,770
just Debian stable minimalistic installs

833
00:41:24,350 --> 00:41:31,700
and configures a MySQL server create

834
00:41:27,770 --> 00:41:34,220
some directories for for serving those

835
00:41:31,700 --> 00:41:37,410
those BOTS so whatever it scans

836
00:41:34,220 --> 00:41:40,649
something that needs to be

837
00:41:37,410 --> 00:41:42,810
tact and that and the payload is

838
00:41:40,650 --> 00:41:44,790
supposed to actually download the bot so

839
00:41:42,810 --> 00:41:48,240
that the new machine is recruited the

840
00:41:44,790 --> 00:41:50,759
botnet it's it's getting them from a web

841
00:41:48,240 --> 00:41:53,540
server or an FTP server that is running

842
00:41:50,760 --> 00:41:53,540
on the c2

843
00:41:56,820 --> 00:42:01,530
and so yeah just basically we just copy

844
00:41:59,250 --> 00:42:03,000
over all of the bots into those

845
00:42:01,530 --> 00:42:06,750
directories where we're going to serve

846
00:42:03,000 --> 00:42:10,670
them from and we copy over the compiled

847
00:42:06,750 --> 00:42:13,710
binaries for the build box to the c2 box

848
00:42:10,670 --> 00:42:16,410
we also add a little script for

849
00:42:13,710 --> 00:42:20,280
provisioning the database we expose port

850
00:42:16,410 --> 00:42:24,690
22 so we can SSH to it and we expose the

851
00:42:20,280 --> 00:42:28,410
drill port that the that c2 is listening

852
00:42:24,690 --> 00:42:31,260
on for telnet the bottom edge is pretty

853
00:42:28,410 --> 00:42:37,049
much the same that this just provisions

854
00:42:31,260 --> 00:42:39,930
a minimal debian a minimal debian

855
00:42:37,050 --> 00:42:43,410
container that has the bot already on it

856
00:42:39,930 --> 00:42:44,430
so we can test you know that the c2 and

857
00:42:43,410 --> 00:42:47,640
the bots are actually making a

858
00:42:44,430 --> 00:42:49,859
connection and we can also study the

859
00:42:47,640 --> 00:42:51,270
behavior of the Bob when it's running on

860
00:42:49,860 --> 00:42:52,800
the system so you see what kind of

861
00:42:51,270 --> 00:42:57,810
things it does we could attach a

862
00:42:52,800 --> 00:43:00,480
debugger we could S trace it any Debian

863
00:42:57,810 --> 00:43:02,549
package we want to install we could just

864
00:43:00,480 --> 00:43:04,290
install right in that container to to do

865
00:43:02,550 --> 00:43:07,410
whatever kind of debugging or analysis

866
00:43:04,290 --> 00:43:11,700
on that bot while it's running just like

867
00:43:07,410 --> 00:43:13,170
on the same machine um so this ansible

868
00:43:11,700 --> 00:43:14,609
stuff completely ignored that's or

869
00:43:13,170 --> 00:43:18,860
something else that's or something

870
00:43:14,610 --> 00:43:18,860
completely unrelated to this talk and

871
00:43:20,510 --> 00:43:26,720
yeah basically we are building here just

872
00:43:23,810 --> 00:43:29,869
a minimal Debian machine with the Mirai

873
00:43:26,720 --> 00:43:33,680
bot on it that is on the ARM processor

874
00:43:29,869 --> 00:43:35,690
and this is what it looks like when we

875
00:43:33,680 --> 00:43:38,930
have our minimal proof of cost that put

876
00:43:35,690 --> 00:43:40,910
together this is inside the c2 container

877
00:43:38,930 --> 00:43:46,609
I start the control

878
00:43:40,910 --> 00:43:49,940
I see the splash screen I'm just sitting

879
00:43:46,609 --> 00:43:52,970
here now reading the STD at a CD air and

880
00:43:49,940 --> 00:43:54,980
I see hey a bot connected gives me s IP

881
00:43:52,970 --> 00:43:57,680
address and the remote pours listening

882
00:43:54,980 --> 00:44:00,079
on crates and inside the bot container

883
00:43:57,680 --> 00:44:02,930
I'm seeing yep it's attempting to

884
00:44:00,079 --> 00:44:06,980
connect it tells me the CMC's IP address

885
00:44:02,930 --> 00:44:10,730
and we have some connected so voila we

886
00:44:06,980 --> 00:44:12,440
have a variety - and a mirai bot that

887
00:44:10,730 --> 00:44:20,030
are talking to each other through docker

888
00:44:12,440 --> 00:44:23,420
containers now we can put all of this

889
00:44:20,030 --> 00:44:27,170
together to build a botnet in a box we

890
00:44:23,420 --> 00:44:31,670
can set up a docker compose scripts that

891
00:44:27,170 --> 00:44:34,010
will bring up our c2 bring up our test

892
00:44:31,670 --> 00:44:38,260
bots if we want them to it can bring up

893
00:44:34,010 --> 00:44:41,599
any of the vulnerable targets that we've

894
00:44:38,260 --> 00:44:43,490
built and configured so you can see I'm

895
00:44:41,599 --> 00:44:46,310
just running here make start on the

896
00:44:43,490 --> 00:44:48,529
docker compose file that just exposes

897
00:44:46,310 --> 00:44:53,630
the services and statically assigns IP

898
00:44:48,530 --> 00:44:56,930
addresses and we can see the c2 is

899
00:44:53,630 --> 00:44:58,369
running the bot is up there the

900
00:44:56,930 --> 00:45:00,230
vulnerable targets are up and running

901
00:44:58,369 --> 00:45:02,359
and I have an answerable control node

902
00:45:00,230 --> 00:45:09,980
that I can use to change configuration

903
00:45:02,359 --> 00:45:13,339
any things on the fly so the advantages

904
00:45:09,980 --> 00:45:16,130
for these techniques are that we can

905
00:45:13,339 --> 00:45:19,099
easily explore the contents of a wide

906
00:45:16,130 --> 00:45:22,270
variety of IOT devices with relatively

907
00:45:19,099 --> 00:45:26,119
low overhead we can rapidly prototype

908
00:45:22,270 --> 00:45:28,670
exploits for a variety of CPU

909
00:45:26,119 --> 00:45:30,619
architectures and we can see how that

910
00:45:28,670 --> 00:45:32,310
you can see the runtime behavior inside

911
00:45:30,619 --> 00:45:35,280
of an isolated

912
00:45:32,310 --> 00:45:38,400
process environments we have a lot of

913
00:45:35,280 --> 00:45:40,770
opportunities for automation because one

914
00:45:38,400 --> 00:45:44,280
of the big advantages of using stuff

915
00:45:40,770 --> 00:45:47,370
like docker and containers is that these

916
00:45:44,280 --> 00:45:50,850
these tools fit and nicely with overall

917
00:45:47,370 --> 00:45:52,950
like bigger automation pipelines and

918
00:45:50,850 --> 00:45:55,860
deployment pipelines so you could even

919
00:45:52,950 --> 00:45:58,500
for example conceivably do a botnet test

920
00:45:55,860 --> 00:45:59,520
lab as a service if for example you

921
00:45:58,500 --> 00:46:03,420
could figure out how to get this stuff

922
00:45:59,520 --> 00:46:05,490
running on communities most importantly

923
00:46:03,420 --> 00:46:07,770
though we can share these images so

924
00:46:05,490 --> 00:46:11,970
instead of having to follow through some

925
00:46:07,770 --> 00:46:14,160
old blog posts or or rely on old notes

926
00:46:11,970 --> 00:46:17,009
that unless you're somebody who is

927
00:46:14,160 --> 00:46:20,370
emulating new firmwares every day and no

928
00:46:17,010 --> 00:46:24,990
quim use obscure command line flags by

929
00:46:20,370 --> 00:46:28,190
hearts it's a painful process to start

930
00:46:24,990 --> 00:46:30,930
digging into something like this whereas

931
00:46:28,190 --> 00:46:32,940
what we have here you can talk or pull

932
00:46:30,930 --> 00:46:35,940
whatever router I'm interested in and

933
00:46:32,940 --> 00:46:38,550
then you have a shell on it and you can

934
00:46:35,940 --> 00:46:42,330
even get it running a good running a web

935
00:46:38,550 --> 00:46:46,350
server so the ultimate goal of this work

936
00:46:42,330 --> 00:46:52,910
is to make IOT research more accessible

937
00:46:46,350 --> 00:46:58,529
and more more efficient so drawbacks are

938
00:46:52,910 --> 00:47:02,009
pretty significant as well though one of

939
00:46:58,530 --> 00:47:05,160
the problems like estimation before we

940
00:47:02,010 --> 00:47:07,740
we can't emulate a lot of Cisco's this

941
00:47:05,160 --> 00:47:12,420
causes sometimes I expected behavior and

942
00:47:07,740 --> 00:47:14,910
it it makes it such that we're not

943
00:47:12,420 --> 00:47:17,160
really we're working on a different

944
00:47:14,910 --> 00:47:22,049
system than the vendor real system

945
00:47:17,160 --> 00:47:24,420
that's running on the hardware and that

946
00:47:22,050 --> 00:47:25,770
back in that can or that can be

947
00:47:24,420 --> 00:47:27,330
meaningful to some kinds of research

948
00:47:25,770 --> 00:47:29,009
into other kinds of research citizen so

949
00:47:27,330 --> 00:47:30,390
it's just something to always be aware

950
00:47:29,010 --> 00:47:32,370
of and to always keep in your mind when

951
00:47:30,390 --> 00:47:34,740
you're changing the state of a system or

952
00:47:32,370 --> 00:47:36,509
when your mind of modifying the contents

953
00:47:34,740 --> 00:47:38,810
of a binary it's no longer the same

954
00:47:36,510 --> 00:47:41,670
thing that it was before you modify it

955
00:47:38,810 --> 00:47:44,160
so things may be completely different

956
00:47:41,670 --> 00:47:45,770
most small things small changes can make

957
00:47:44,160 --> 00:47:49,920
big

958
00:47:45,770 --> 00:47:53,100
ramifications I know the big another big

959
00:47:49,920 --> 00:47:55,110
problem is a lot of these routers store

960
00:47:53,100 --> 00:47:58,230
important configuration data and their

961
00:47:55,110 --> 00:48:00,090
nvram which obviously the container

962
00:47:58,230 --> 00:48:04,620
doesn't have and your host kernel

963
00:48:00,090 --> 00:48:06,210
doesn't have so so this makes some

964
00:48:04,620 --> 00:48:08,310
router and it scripts completely fail

965
00:48:06,210 --> 00:48:10,680
and do B no wait there's a cache well

966
00:48:08,310 --> 00:48:13,110
wait rather I was looking at and if it

967
00:48:10,680 --> 00:48:14,580
can't read anything from DRAM it doesn't

968
00:48:13,110 --> 00:48:17,670
even know what it's like P addresses and

969
00:48:14,580 --> 00:48:19,500
it just dies immediately so that that's

970
00:48:17,670 --> 00:48:21,510
an example of a router that if you

971
00:48:19,500 --> 00:48:23,940
wanted to get it fully working under

972
00:48:21,510 --> 00:48:27,090
this technique you would need to do some

973
00:48:23,940 --> 00:48:29,160
kind of binary mangling on the on the

974
00:48:27,090 --> 00:48:32,100
init script itself so that it doesn't

975
00:48:29,160 --> 00:48:35,220
try to look at these NVRAM values or

976
00:48:32,100 --> 00:48:42,000
alternatively you could do an LD preload

977
00:48:35,220 --> 00:48:47,009
trick with and make your own little get

978
00:48:42,000 --> 00:48:50,970
nvram utility library this is something

979
00:48:47,010 --> 00:48:53,070
that NVRAM faker is a project on github

980
00:48:50,970 --> 00:48:55,830
does for arm i don't think there's a

981
00:48:53,070 --> 00:49:01,320
mitzvah of it but uh may be the other

982
00:48:55,830 --> 00:49:04,620
way around but anyway you could do an LD

983
00:49:01,320 --> 00:49:06,510
preload technique to fake calls to NVRAM

984
00:49:04,620 --> 00:49:08,580
but you would still need to know the

985
00:49:06,510 --> 00:49:10,800
values of things that it expects to get

986
00:49:08,580 --> 00:49:14,850
from NVRAM and you would need to know

987
00:49:10,800 --> 00:49:16,950
what fake values to put in that store to

988
00:49:14,850 --> 00:49:19,200
to return when the router actually wants

989
00:49:16,950 --> 00:49:20,700
it so there's a lot of guesswork

990
00:49:19,200 --> 00:49:23,040
involved in a lot of trial and error

991
00:49:20,700 --> 00:49:25,319
involved with getting certain kinds of

992
00:49:23,040 --> 00:49:28,080
devices to work especially when they're

993
00:49:25,320 --> 00:49:29,580
relying on other peripherals that are

994
00:49:28,080 --> 00:49:33,330
hardware that you don't have and that

995
00:49:29,580 --> 00:49:34,620
you're not emulating also kernel x place

996
00:49:33,330 --> 00:49:37,140
they're not gonna work so if you're

997
00:49:34,620 --> 00:49:39,870
hoping to do something on a router and

998
00:49:37,140 --> 00:49:41,879
part of your train is a kernel exploit

999
00:49:39,870 --> 00:49:44,100
then you're at a block because your app

1000
00:49:41,880 --> 00:49:46,020
you're going to be exploiting the host

1001
00:49:44,100 --> 00:49:47,220
kernel and it's probably going to not be

1002
00:49:46,020 --> 00:49:49,830
the version of the kernel you're hoping

1003
00:49:47,220 --> 00:49:51,120
it is so if you want to test kernel I

1004
00:49:49,830 --> 00:49:53,360
switch on these things you need to use

1005
00:49:51,120 --> 00:49:53,359
cloning

1006
00:49:55,290 --> 00:49:59,500
but for the most part we're interested

1007
00:49:57,670 --> 00:50:01,600
in just examining the structure and the

1008
00:49:59,500 --> 00:50:05,140
contents of these things doing binary

1009
00:50:01,600 --> 00:50:07,930
analysis on these things seeing how they

1010
00:50:05,140 --> 00:50:10,540
run seeing opportunities for

1011
00:50:07,930 --> 00:50:12,430
authentication bypasses you know you can

1012
00:50:10,540 --> 00:50:14,529
find out a lot of information just by

1013
00:50:12,430 --> 00:50:17,379
reading the file seeing what the

1014
00:50:14,530 --> 00:50:19,180
contents are and and running through

1015
00:50:17,380 --> 00:50:23,400
some things like a firmware update and

1016
00:50:19,180 --> 00:50:25,779
just watching exactly what it does and

1017
00:50:23,400 --> 00:50:27,070
one of the other final drawbacks worth

1018
00:50:25,780 --> 00:50:29,650
mentioning is that a lot of the tools

1019
00:50:27,070 --> 00:50:31,060
that we depend on here are have major

1020
00:50:29,650 --> 00:50:35,170
bugs and they're not very actively

1021
00:50:31,060 --> 00:50:36,460
maintained like forbidden scrapers some

1022
00:50:35,170 --> 00:50:38,140
of them are great and some of them don't

1023
00:50:36,460 --> 00:50:39,910
work at all like the the domains have

1024
00:50:38,140 --> 00:50:42,430
changed completely and they haven't seen

1025
00:50:39,910 --> 00:50:44,440
an update a long time and also there was

1026
00:50:42,430 --> 00:50:46,000
that registration bug with with the

1027
00:50:44,440 --> 00:50:48,190
multi arch container that I mentioned

1028
00:50:46,000 --> 00:50:49,780
earlier and there's that there's an open

1029
00:50:48,190 --> 00:50:51,250
issue on getting up forward for like two

1030
00:50:49,780 --> 00:50:56,710
years so that hasn't been addressed

1031
00:50:51,250 --> 00:50:59,050
either some ideas for further research I

1032
00:50:56,710 --> 00:51:03,130
mentioned the LD pre-loaded tricks for

1033
00:50:59,050 --> 00:51:04,990
working on the NVRAM limitations I would

1034
00:51:03,130 --> 00:51:07,180
love to see this applied to other kinds

1035
00:51:04,990 --> 00:51:11,290
of IOT devices I'd like to get my hands

1036
00:51:07,180 --> 00:51:13,690
on some firmware that I can emulate and

1037
00:51:11,290 --> 00:51:18,580
also building debug versions of these

1038
00:51:13,690 --> 00:51:22,890
container images so that we can get a

1039
00:51:18,580 --> 00:51:25,779
gbb server running on them and finally

1040
00:51:22,890 --> 00:51:29,319
like making a completely automated

1041
00:51:25,780 --> 00:51:31,150
workflow on these things so that we can

1042
00:51:29,320 --> 00:51:32,650
go from a scraper to the root of s

1043
00:51:31,150 --> 00:51:35,230
that's record to the image build and

1044
00:51:32,650 --> 00:51:39,010
just having a massive pipeline on it so

1045
00:51:35,230 --> 00:51:41,100
um thank you and I'm ready to answer any

1046
00:51:39,010 --> 00:51:41,100
questions

1047
00:51:42,820 --> 00:51:46,630
also if you have any thing that you want

1048
00:51:44,980 --> 00:51:51,420
emailed the email me about that's my

1049
00:51:46,630 --> 00:51:54,490
email address that was sick

1050
00:51:51,420 --> 00:51:58,450
thanks yeah that was a really awesome

1051
00:51:54,490 --> 00:52:01,569
talk I'm very happy to see how that came

1052
00:51:58,450 --> 00:52:02,560
together I only put my window here yeah

1053
00:52:01,570 --> 00:52:07,840
that came together really well

1054
00:52:02,560 --> 00:52:09,910
oh thanks so yeah I guess like oh you

1055
00:52:07,840 --> 00:52:13,690
have any question how long did it take

1056
00:52:09,910 --> 00:52:17,640
you to figure all this out yeah so this

1057
00:52:13,690 --> 00:52:17,640
is a few months of work in my free time

1058
00:52:22,530 --> 00:52:27,940
yeah and and also I have shelves open

1059
00:52:25,960 --> 00:52:29,950
with all this stuff so what anybody

1060
00:52:27,940 --> 00:52:33,340
wants to see you look at anything I've

1061
00:52:29,950 --> 00:52:36,779
got right here this is the c2 I've got

1062
00:52:33,340 --> 00:52:39,910
it connected this is my d-link router

1063
00:52:36,780 --> 00:52:45,280
this is my Netgear router that's running

1064
00:52:39,910 --> 00:52:47,319
the whole running the whole system that

1065
00:52:45,280 --> 00:52:51,880
went through the whole init process yeah

1066
00:52:47,320 --> 00:52:54,100
and I also have the web UI up on my

1067
00:52:51,880 --> 00:52:58,810
Amazon server I might drop the link to

1068
00:52:54,100 --> 00:53:02,200
that later so there's anything they want

1069
00:52:58,810 --> 00:53:10,060
to see let me know how have you sailed

1070
00:53:02,200 --> 00:53:13,629
it like how many so I mean I could feed

1071
00:53:10,060 --> 00:53:16,299
I could feasibly do as many as like the

1072
00:53:13,630 --> 00:53:19,360
machine that is running on would be able

1073
00:53:16,300 --> 00:53:22,050
to to tolerate I haven't got anywhere

1074
00:53:19,360 --> 00:53:24,820
near 300 ATK if that's how you're asking

1075
00:53:22,050 --> 00:53:26,080
the the main thing I'm interested in is

1076
00:53:24,820 --> 00:53:29,860
just getting these things to communicate

1077
00:53:26,080 --> 00:53:31,900
so adding the scale would be you know

1078
00:53:29,860 --> 00:53:33,100
just a matter of adding more things to

1079
00:53:31,900 --> 00:53:36,850
the docker compose or add any more

1080
00:53:33,100 --> 00:53:39,730
replicas this has a question in the chat

1081
00:53:36,850 --> 00:53:41,890
is - have you considered setting up a

1082
00:53:39,730 --> 00:53:45,430
mirai honeypot to catch fresh versions

1083
00:53:41,890 --> 00:53:47,170
of stuff and then building on that have

1084
00:53:45,430 --> 00:53:49,540
you considered creating a honeypot for

1085
00:53:47,170 --> 00:53:52,630
doing botnet takeovers you don't have to

1086
00:53:49,540 --> 00:53:55,770
answer no I have not cuz there to that

1087
00:53:52,630 --> 00:54:00,460
but now the omission in maybe ohh

1088
00:53:55,770 --> 00:54:05,250
you've seen there's a very funny this -

1089
00:54:00,460 --> 00:54:08,410
called buffer overflow in the sea - port

1090
00:54:05,250 --> 00:54:16,680
oh yeah I know about that we can test

1091
00:54:08,410 --> 00:54:21,399
that here that's an out of index right

1092
00:54:16,680 --> 00:54:28,690
there's a very small buffer for what's

1093
00:54:21,400 --> 00:54:31,210
it called long import I got it I just

1094
00:54:28,690 --> 00:54:32,980
made the boss start scanning so you can

1095
00:54:31,210 --> 00:54:34,599
see it's going over mammal subnet

1096
00:54:32,980 --> 00:54:38,770
there's nothing there for right now

1097
00:54:34,599 --> 00:54:40,240
because um I I hadn't I got this

1098
00:54:38,770 --> 00:54:42,520
together really quickly basically I put

1099
00:54:40,240 --> 00:54:43,598
this hold together last night the server

1100
00:54:42,520 --> 00:54:45,250
that I had all this research on

1101
00:54:43,599 --> 00:54:50,010
originally was destroy so I had to start

1102
00:54:45,250 --> 00:54:52,480
over basically scratch but yeah box one

1103
00:54:50,010 --> 00:54:54,130
let's say yeah that's that's

1104
00:54:52,480 --> 00:54:57,130
impressively but you can spin up and

1105
00:54:54,130 --> 00:55:03,040
down so quickly like now that it's no

1106
00:54:57,130 --> 00:55:04,990
more yeah um so another question to any

1107
00:55:03,040 --> 00:55:08,259
is really good hub repo to download any

1108
00:55:04,990 --> 00:55:10,149
of your code I know but I think some of

1109
00:55:08,260 --> 00:55:13,359
it I'll try to release in the near

1110
00:55:10,150 --> 00:55:15,310
future like a lot of the stuff with

1111
00:55:13,359 --> 00:55:17,049
especially with the Mirai stuff I was

1112
00:55:15,310 --> 00:55:19,480
hesitant to release because I don't

1113
00:55:17,050 --> 00:55:21,730
really want to give like a blueprint out

1114
00:55:19,480 --> 00:55:24,430
for making your own doctor mirror I see

1115
00:55:21,730 --> 00:55:26,470
twos but the stuff on des on the router

1116
00:55:24,430 --> 00:55:29,109
firmwares I feel comfortable sharing

1117
00:55:26,470 --> 00:55:32,618
because that's just building the router

1118
00:55:29,109 --> 00:55:33,880
firmware yeah so yeah I'll probably make

1119
00:55:32,619 --> 00:55:36,250
I'll probably release something and

1120
00:55:33,880 --> 00:55:38,319
maybe we can get that that link out on

1121
00:55:36,250 --> 00:55:40,000
Twitter or something and in the future

1122
00:55:38,319 --> 00:55:41,650
if that's done I would like to release

1123
00:55:40,000 --> 00:55:43,180
the stuff on that as much as this as

1124
00:55:41,650 --> 00:55:55,960
possible I would like to release yeah oh

1125
00:55:43,180 --> 00:56:00,310
yeah you haven't we didn't share any of

1126
00:55:55,960 --> 00:56:02,859
your contact details previously he you

1127
00:56:00,310 --> 00:56:06,460
didn't fill them out yeah that was very

1128
00:56:02,859 --> 00:56:07,640
sorry he yeah sure I understand but if

1129
00:56:06,460 --> 00:56:12,320
there was any

1130
00:56:07,640 --> 00:56:14,629
you want to share with anyone to go yeah

1131
00:56:12,320 --> 00:56:17,150
well they're my email addresses in the

1132
00:56:14,630 --> 00:56:19,970
end here you can hit me up there I'm on

1133
00:56:17,150 --> 00:56:23,060
majoring so I'm on IRC drop me a line

1134
00:56:19,970 --> 00:56:26,029
and and I'll find a way to get in touch

1135
00:56:23,060 --> 00:56:29,660
with you and and also there's there's a

1136
00:56:26,030 --> 00:56:30,400
I will make someone's available and get

1137
00:56:29,660 --> 00:56:32,569
up soon

1138
00:56:30,400 --> 00:56:35,120
all right yeah we'll make sure that we

1139
00:56:32,570 --> 00:56:38,900
can well if you guys follow at air gap

1140
00:56:35,120 --> 00:56:41,810
in on Twitter any sort of um slides or

1141
00:56:38,900 --> 00:56:42,740
anything you are looking for any code if

1142
00:56:41,810 --> 00:56:45,080
we do get it

1143
00:56:42,740 --> 00:56:54,109
we will tweet it out from there so at

1144
00:56:45,080 --> 00:56:58,810
air gap in on Twitter yeah yeah that's

1145
00:56:54,110 --> 00:57:01,070
just easy the fastest way to do it right

1146
00:56:58,810 --> 00:57:11,120
I'll suggest for your full name and

1147
00:57:01,070 --> 00:57:13,570
address so yeah thanks Ilya for coming

1148
00:57:11,120 --> 00:57:15,500
on and talking with us this is awesome

1149
00:57:13,570 --> 00:57:21,170
we have up next

1150
00:57:15,500 --> 00:57:22,940
mg all right thanks guys and thanks to

1151
00:57:21,170 --> 00:57:25,340
everyone who contributed to this as well

1152
00:57:22,940 --> 00:57:27,650
I love you guys we were involved with

1153
00:57:25,340 --> 00:57:31,760
this a lot of gilfer majors are involved

1154
00:57:27,650 --> 00:57:35,030
so yeah thanks to everyone and and take

1155
00:57:31,760 --> 00:57:38,350
care thank you we'll see you on the

1156
00:57:35,030 --> 00:57:38,350
matrix yes

1157
00:57:42,160 --> 00:57:49,000
see ya mg will be on here he is going to

1158
00:57:44,810 --> 00:57:49,000
be talking about rapid prototype

