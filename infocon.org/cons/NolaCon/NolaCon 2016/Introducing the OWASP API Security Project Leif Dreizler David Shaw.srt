1
00:00:00,000 --> 00:00:05,509
and I'll go ahead and skip school so
welcome to our talk this is the

2
00:00:05,509 --> 00:00:09,110
introduction to the Elias baby I
security project which is a project that

3
00:00:09,110 --> 00:00:12,469
leave and I've been working on for
probably about the last eight months or

4
00:00:12,469 --> 00:00:18,210
so we're really happy to finally be
unveiling that and hopefully giving some

5
00:00:18,210 --> 00:00:22,760
of the people involved should be pretty
good this talk is a little bit different

6
00:00:22,760 --> 00:00:26,050
than some of the other talks at this
conference and something out of talks

7
00:00:26,050 --> 00:00:30,279
that even I have given in the past will
display some research that we've done

8
00:00:30,279 --> 00:00:35,570
but really what we did as our research
for this project is what we consider

9
00:00:35,570 --> 00:00:39,489
somewhere preliminary we basically took
the day that we could find in the

10
00:00:39,489 --> 00:00:43,218
statistics that we could find compiled
that into what we think is a pretty good

11
00:00:43,219 --> 00:00:47,800
first step for this project but really
more than anything else is a call for

12
00:00:47,800 --> 00:00:49,019
participation

13
00:00:49,020 --> 00:00:55,120
we're not saying that this is done in
perfect but we like to get the products

14
00:00:55,120 --> 00:01:02,589
and exposure and hopefully our guys is
injurious so the agenda for today is

15
00:01:02,590 --> 00:01:06,740
pretty straightforward I'm gonna do the
general introduction stuff you know who

16
00:01:06,740 --> 00:01:07,530
are we

17
00:01:07,530 --> 00:01:11,159
what's a lot you know why are we even
doing this project in the first place

18
00:01:12,080 --> 00:01:17,960
will give some real-world examples both
that we've seen in the media has seen

19
00:01:17,960 --> 00:01:23,979
through working for background gives him
some visibility there will go through

20
00:01:23,979 --> 00:01:29,369
the top 10 Apr security risks or at
least what we have of those so far about

21
00:01:29,369 --> 00:01:32,320
how you can help I can join the project
how you can

22
00:01:32,320 --> 00:01:38,789
be involved in one way or another to
start off for those of you that don't

23
00:01:38,790 --> 00:01:41,270
know me I don't think I know too many
people here

24
00:01:41,270 --> 00:01:48,190
my name's David job I'm on tour de sha
underscore the other guy is not me I'm

25
00:01:48,190 --> 00:01:52,399
chief information security officer at a
software company called holio based in

26
00:01:52,400 --> 00:01:56,820
Santa Barbara California it was a pretty
rough travel to get here we got here

27
00:01:56,820 --> 00:02:01,800
early this morning after several cancel
flights I was a former CTO Reds in which

28
00:02:01,800 --> 00:02:06,660
is an application security consultancy
until it was acquired last year I

29
00:02:06,660 --> 00:02:11,700
presented no con twice before on more
in-depth technical security research

30
00:02:11,700 --> 00:02:16,310
again that's not really the point of
this talk today and I will drink with

31
00:02:16,310 --> 00:02:20,290
you either with our selection of busy
air war hopefully the bars are open at

32
00:02:20,290 --> 00:02:24,060
which point we can just go do that i'm
happy to talk about these ideas are just

33
00:02:24,060 --> 00:02:28,700
security in general with anyone at any
time or not with a drink if you don't

34
00:02:28,700 --> 00:02:32,200
drink that's fine but I'll be here
throughout the weekend so hopefully you

35
00:02:32,200 --> 00:02:39,880
guys and have some good conversations
leaves Chrysler I have a much more you

36
00:02:39,880 --> 00:02:46,260
need twitter handle considering that
there's only one with Chrysler security

37
00:02:46,260 --> 00:02:52,170
engineer for bug crowd and I used to
work with David Reds been given

38
00:02:52,170 --> 00:02:55,458
conference presentations at a couple
different besides and things like that

39
00:02:55,459 --> 00:03:04,100
and I'm the Indiana Jones it means so
hopefully find some enjoyment as a as a

40
00:03:04,100 --> 00:03:08,049
side now I mention our flight was
canceled so I got in this morning really

41
00:03:08,049 --> 00:03:12,400
tired about 90 minutes of sleep and I
finally feel like I did you get this

42
00:03:12,400 --> 00:03:17,790
time he's like yeah I made a lot of cool
editions for you and I might what do you

43
00:03:17,790 --> 00:03:22,640
mean by that we finalized it like we had
to slide back everything's going to be a

44
00:03:22,640 --> 00:03:31,700
good idea to just added a mean and into
means an image so we can probably 45

45
00:03:31,700 --> 00:03:39,988
minutes going through and removing me
from the top after so many of you just

46
00:03:39,989 --> 00:03:43,660
so I can get sore like a quick survey
how many people are familiar with a lot

47
00:03:43,660 --> 00:03:55,070
that's most people probably like half
two-thirds that's good so now is the

48
00:03:55,070 --> 00:03:58,780
open web application security project
which is just a nice acronym sounds

49
00:04:00,120 --> 00:04:05,959
huge repository of information on the
ice but or if you've never been there

50
00:04:05,959 --> 00:04:09,680
and you work in security I strongly
recommended a lot of cheat sheets

51
00:04:09,680 --> 00:04:14,239
argumentation things like that they
really some tools that are bad

52
00:04:14,239 --> 00:04:18,570
zappa's that attack proxies basically a
free and open source intercepting proxy

53
00:04:18,570 --> 00:04:23,840
they have some tools that are bad but we
won't talk about that probably not good

54
00:04:23,840 --> 00:04:27,810
for the talk when they also organize
some pretty high profile conferences

55
00:04:27,810 --> 00:04:32,000
that the most high profile it is
probably being upset USA every year most

56
00:04:32,000 --> 00:04:37,850
of the absentee you are staff at Absa
California so you know they're pretty

57
00:04:37,850 --> 00:04:42,030
reputable organization they really try
to give back to the community which is

58
00:04:42,030 --> 00:04:47,049
why we're trying to purchase with them
to sort of you know move move things

59
00:04:47,050 --> 00:04:54,780
forward so in addition to their tools
and their projects and conferences also

60
00:04:54,780 --> 00:04:57,770
has documentation project and some of
these are actually pretty famous right

61
00:04:57,770 --> 00:05:02,570
so the top 10 guides are pretty much
like a like water some web security

62
00:05:02,570 --> 00:05:08,000
vulnerabilities its gonna come up a
bunch of pentacene firms use web

63
00:05:08,000 --> 00:05:11,620
application top 10 is like security
categories are finding categories

64
00:05:11,620 --> 00:05:15,880
it's very common you can't really avoid
it but they also have you know like the

65
00:05:15,880 --> 00:05:17,370
mobile security top 10

66
00:05:17,370 --> 00:05:21,590
the Internet of Things top 10 scariest
that sort of like their flagship

67
00:05:21,590 --> 00:05:26,320
documents that people using it so I
exposure and they are big fans of that

68
00:05:26,320 --> 00:05:34,180
API Security Project sort of the seeking
to document the pitfalls and mitigations

69
00:05:34,180 --> 00:05:40,490
those pitfalls in deploying API's and
also assessing this API if you try to

70
00:05:40,490 --> 00:05:44,639
say hey I'm a pen tester I'm trying to
assess Apr security will probably knows

71
00:05:44,639 --> 00:05:48,080
there isn't really that much
documentation probably because in

72
00:05:48,080 --> 00:05:53,349
general it's harder than assessing a web
application so we're trying also seek to

73
00:05:53,350 --> 00:05:57,250
address for that shortage there but
after I just told you all this

74
00:05:57,250 --> 00:06:02,550
documentation that's on the oscillating
how great it is like you know you might

75
00:06:02,550 --> 00:06:07,199
be wondering you know okay well why do
you actually need to create you know

76
00:06:07,199 --> 00:06:10,300
this document this project

77
00:06:10,300 --> 00:06:14,430
security is really important into its
growing in importance pretty much every

78
00:06:14,430 --> 00:06:17,930
month to rate at which companies are
deploying API's is is increasing very

79
00:06:17,930 --> 00:06:22,599
rapidly and there's sort of a couple
reasons for that right to public API is

80
00:06:22,599 --> 00:06:29,320
meaning a user or a client can connect
and do things via public API very

81
00:06:29,320 --> 00:06:34,630
widespread also internal API's and micro
services are continuing to grow in an

82
00:06:34,630 --> 00:06:39,570
adoption all the time so the company
where I work we sort of have one

83
00:06:39,570 --> 00:06:43,860
monolithic rails out that the primary
flagship product but when we add on to

84
00:06:43,860 --> 00:06:47,970
that if we had treasury services to that
those are deported marker services and

85
00:06:47,970 --> 00:06:48,570
we just right

86
00:06:48,570 --> 00:06:53,180
API's we can have both the application
or other applications clear each other

87
00:06:53,180 --> 00:06:59,190
and basically make things work fast in
an easily deployed way very useful have

88
00:06:59,190 --> 00:07:03,960
sort of the challenge platform-based
issues right so if you're hot new

89
00:07:03,960 --> 00:07:12,130
start-up cloud and you decide that you
want to just have your application for

90
00:07:12,130 --> 00:07:13,360
Facebook platform

91
00:07:13,360 --> 00:07:17,919
well you're basically only interacting
via API is right I mean without the API

92
00:07:17,919 --> 00:07:24,719
the Facebook platform on which you're
basing on occasion nothing would work so

93
00:07:24,720 --> 00:07:30,200
just a couple examples that have come
out recently the first one is recently

94
00:07:30,200 --> 00:07:30,810
Microsoft

95
00:07:30,810 --> 00:07:36,169
put out a blog post stating that they're
working on a REST API that allows you to

96
00:07:36,169 --> 00:07:42,460
configure and manage I guess the goal of
this is to make IIS configurable from

97
00:07:42,460 --> 00:07:49,030
any device that knows how to make a web
call specifically mobile applications so

98
00:07:49,030 --> 00:07:53,669
you know configuring something as
important as your web server from an API

99
00:07:53,669 --> 00:07:57,490
there's a lot of security concerns that
would be in place with having something

100
00:07:57,490 --> 00:07:58,419
like that

101
00:07:58,419 --> 00:08:03,020
be more open another example is in March
of this year

102
00:08:03,020 --> 00:08:07,560
release a blog post detailing the
specifics of the bug bounty program

103
00:08:07,560 --> 00:08:13,560
including documentation of API's these
API's can do things like find nearby

104
00:08:13,560 --> 00:08:14,810
drivers

105
00:08:14,810 --> 00:08:19,020
affairs with friends or allow people to
build it applications that interact with

106
00:08:19,020 --> 00:08:24,169
hoover so there's a lot of functionality
that API is contained and some of it can

107
00:08:24,169 --> 00:08:29,700
be very sensitive imagine if you could
share the airport or back from the

108
00:08:29,700 --> 00:08:34,299
airport in Oakland and I could make it
said I'm paying significantly less fair

109
00:08:34,299 --> 00:08:52,670
than David thanks not that I would do
that expensive so I'm sure most people

110
00:08:52,670 --> 00:08:56,689
here now if they're in sort of the
community have pretty major security

111
00:08:56,690 --> 00:09:00,110
problems right i mean we hear about you
know major bridges throughout kitchens

112
00:09:00,110 --> 00:09:01,480
pretty much all the time

113
00:09:01,480 --> 00:09:05,880
injection cross-site scripting
cross-border it's alright but with the

114
00:09:05,880 --> 00:09:09,770
exception of you know sort of like weird
side channel attacks there's not really

115
00:09:09,770 --> 00:09:14,339
that many new techniques for breaking
news web site I mean yeah there might be

116
00:09:14,339 --> 00:09:19,120
particularly cool instances hey we found
this really cool see one direction or

117
00:09:19,120 --> 00:09:24,160
sexy or whatever or even hey you know we
found this minor cross-site scripting

118
00:09:24,160 --> 00:09:28,150
value we were able to hook in beef and
you know take over an organization

119
00:09:28,150 --> 00:09:33,600
that's great but in general these
vulnerability types are our salt

120
00:09:33,600 --> 00:09:37,060
put the Astros care because obviously
people are still getting breach that way

121
00:09:37,060 --> 00:09:41,729
but the actual vulnerability that we
know how to tell a developer not direct

122
00:09:41,730 --> 00:09:50,819
sequel injection in their code not sure
yet it's a solvent ability type yeah I

123
00:09:50,819 --> 00:09:58,199
mean you can just mitigate these things
so that said it many API's especially

124
00:09:58,199 --> 00:10:03,139
ones that are being sort of Britain as
may be an afterthought more flagship

125
00:10:03,139 --> 00:10:07,740
products from major organizations are
sort of like ok with a different team is

126
00:10:07,740 --> 00:10:11,130
gonna write this and it's gonna be done
much later and they're not going to have

127
00:10:11,130 --> 00:10:16,949
necessarily the same protections for
example Instagram right now is a fully

128
00:10:16,949 --> 00:10:22,699
functional basically we won't say it's
completely secure but find fairly hard

129
00:10:22,699 --> 00:10:28,649
an application that you had a natural
API to post photos are to do all these

130
00:10:28,649 --> 00:10:32,730
different tasks you can be easily added
security holes if you're not doing the

131
00:10:32,730 --> 00:10:37,290
exact same permissions check he might be
doing the actual application then you

132
00:10:37,290 --> 00:10:40,240
gonna introduce holes were what you
think you're doing just making something

133
00:10:40,240 --> 00:10:48,029
easier user opening up your platform for
further years so good example of this is

134
00:10:48,029 --> 00:10:53,269
that last year United Airlines launched
about Benny program may be this

135
00:10:53,269 --> 00:10:59,370
successful thing that they are now so a
little bit of a mystery so they say when

136
00:10:59,370 --> 00:11:03,449
the most critical vulnerabilities that
was released through this is basically

137
00:11:03,449 --> 00:11:08,699
by using the mobile out you can see my
request they spun up an API to support

138
00:11:08,699 --> 00:11:12,889
the mobile out that invisible to the
user so users are actually saying 11

139
00:11:12,889 --> 00:11:17,220
EBITDA I'm gonna go through I'm gonna do
all this stuff it's really just a little

140
00:11:17,220 --> 00:11:20,519
bit up you know intercepting proxy or
take a packet capture wherever you can

141
00:11:20,519 --> 00:11:27,579
see the actual API request on the wire
so basically what happened in this

142
00:11:27,579 --> 00:11:30,699
particular instance I'm not gonna go
through the first case study of a say in

143
00:11:30,699 --> 00:11:33,849
this particular instance if you had
someone MileagePlus number which you

144
00:11:33,850 --> 00:11:37,980
could not really considered super
sensitive you put it in hotel bookings

145
00:11:37,980 --> 00:11:41,510
things like that you get what's called a
record locator

146
00:11:41,510 --> 00:11:44,870
and using this record locator you can
make a series of requests they're

147
00:11:44,870 --> 00:11:49,990
basically I'm unveil flight plans to
change flight plans would be less per

148
00:11:49,990 --> 00:11:57,180
credit card would basically do all these
things that not only does it matter man

149
00:11:57,180 --> 00:12:04,890
hope it's fine you can go through with
this record locator to change flights

150
00:12:04,890 --> 00:12:08,470
you could add yourself to pledge
exchange names you could take someone's

151
00:12:08,470 --> 00:12:16,570
well there is really bad right that was
super critical to major organizations

152
00:12:16,570 --> 00:12:21,260
are basically accidentally exposing
sensitive data and methods Vapi access

153
00:12:21,260 --> 00:12:24,920
they're not clearly not meaning to do it
but they say oh you know every injuries

154
00:12:24,920 --> 00:12:29,390
API's we should you that you even we
have a legitimate use case to do so but

155
00:12:29,390 --> 00:12:32,620
we're not putting the same security
controls or even thought into the death

156
00:12:32,620 --> 00:12:41,690
process that would be done for the
actual formal formal applications show

157
00:12:41,690 --> 00:12:45,990
roughly a quarter of the bounty is that
that people have seen our butt crack of

158
00:12:45,990 --> 00:12:50,620
one sort of include the API in their
scope and that's only things I believe

159
00:12:50,620 --> 00:12:55,050
that we're specifically called out so
like the United Airlines thing isn't

160
00:12:55,050 --> 00:12:58,729
saying hey we have a specific API that
we'd like you to trust that they had a

161
00:12:58,730 --> 00:13:03,800
mobile-optimized scope which made API
calls on the back and we're working very

162
00:13:03,800 --> 00:13:27,469
tiny thumbnails of slides in case you're
wondering yes I of course there was that

163
00:13:27,470 --> 00:13:31,910
swings slides yeah you should be asking
you know it's me

164
00:13:33,160 --> 00:13:43,740
alright so I'm technical they're gonna
go over some API security examples one

165
00:13:43,740 --> 00:13:44,449
of the really

166
00:13:44,449 --> 00:13:51,050
recent Magento security bulletins and
they do fairly detailed pass notes for

167
00:13:51,050 --> 00:13:55,099
those of you who aren't familiar with
Magento they help companies run and

168
00:13:55,100 --> 00:14:00,259
e-commerce platforms a ton of companies
use them they're part of the eBay family

169
00:14:00,259 --> 00:14:05,759
of companies in their most recent
security boards and 50% three of six of

170
00:14:05,759 --> 00:14:10,279
the vulnerabilities that were fixed or
API related vulnerabilities there was

171
00:14:10,279 --> 00:14:15,790
one critical though its remote code
execution there was one high which had

172
00:14:15,790 --> 00:14:20,560
to do with account hijacking and there
is a medium which had to do with being

173
00:14:20,560 --> 00:14:25,329
able to manipulate the items in the
guest cart so if you have you know you

174
00:14:25,329 --> 00:14:28,489
haven't logged in yet you're working on
a on a cart somebody else could make

175
00:14:28,490 --> 00:14:33,769
manipulations to your cart another
couple examples that were in the news

176
00:14:33,769 --> 00:14:38,980
recently there was one from Qualcomm
that was not that i dont the notes up

177
00:14:38,980 --> 00:14:43,819
its gingerbread through lollipop I think
so not the most recent version of

178
00:14:43,819 --> 00:14:46,949
Android but just to give you guys an
idea

179
00:14:46,949 --> 00:14:52,589
diversions that are affected cover about
92 percent of Android devices obviously

180
00:14:52,589 --> 00:14:56,160
not all this have Qualcomm chipsets are
not ninety percent of Android devices

181
00:14:56,160 --> 00:15:00,910
were vulnerable but still a huge
percentage and the vulnerability I

182
00:15:00,910 --> 00:15:05,149
forget what the API name was but it was
pretty low level obviously if its

183
00:15:05,149 --> 00:15:09,500
vulnerability in Qualcomm they make the
radio chipsets for a lot of cell phones

184
00:15:09,500 --> 00:15:16,009
allows you to read text messages view
the the call logs and also perform radio

185
00:15:16,009 --> 00:15:20,470
actions from the device so radio actions
are basically all the stuff that you

186
00:15:20,470 --> 00:15:25,579
barely use your phone for anymore so not
the ABS not browsing the web but some of

187
00:15:25,579 --> 00:15:31,319
the more basic things like sending text
messages and calling people and other

188
00:15:31,319 --> 00:15:36,040
one was the Instagram bug that caused a
lot of news outlets due to the age of

189
00:15:36,040 --> 00:15:37,779
the reporter

190
00:15:37,779 --> 00:15:41,709
a ten year old kid found a bug in
Instagram that allows you to delete

191
00:15:41,709 --> 00:15:47,420
comments from other users and got
rewarded $10,000 so that was an internal

192
00:15:47,420 --> 00:15:55,170
API within the Instagram code that had
that vulnerability another couple ones

193
00:15:55,170 --> 00:15:59,248
that are that are interesting and fun to
look up after this the person was a

194
00:15:59,249 --> 00:16:05,499
manipulation of it s late so whether or
not you release the API to people if

195
00:16:05,499 --> 00:16:08,559
it's in something that they can access
their gonna poke around they're gonna

196
00:16:08,559 --> 00:16:12,660
either look at your source code if they
can if not they're gonna look at the

197
00:16:12,660 --> 00:16:17,569
request on the wire so both of these
stories come from people basically

198
00:16:17,569 --> 00:16:22,550
looking at the web calls from the mobile
clients that snapped and Tesla have and

199
00:16:22,550 --> 00:16:27,508
I know if you guys saw the video but
somebody used Alexa from Amazon echo to

200
00:16:27,509 --> 00:16:32,019
be able to open up their garage door
turn on the Tesla and pull their car out

201
00:16:32,019 --> 00:16:36,749
of the garage similar tonight writer so
that was kind of fun

202
00:16:36,749 --> 00:16:43,910
snapchat one speaking of Absa California
if you ever wanna come out to california

203
00:16:43,910 --> 00:16:48,129
during January we basically don't have
winter if you've never been out there so

204
00:16:48,129 --> 00:16:52,720
if you're from an area that has winter
can be pretty pretty fun to come out

205
00:16:52,720 --> 00:16:57,430
anyway the director of info second
snapshot this year gave I thought is

206
00:16:57,430 --> 00:17:00,859
really good presentation about all the
issues that they have with people

207
00:17:00,860 --> 00:17:05,579
manipulating the API's and using them
for functionality that they weren't

208
00:17:05,579 --> 00:17:10,819
designed for so snapshot doesn't release
a public API for their program but what

209
00:17:10,819 --> 00:17:18,220
people do is though piece together
different versions API calls maybe from

210
00:17:18,220 --> 00:17:23,319
an older version Android a newer version
of iOS something else in the middle I

211
00:17:23,319 --> 00:17:25,389
don't know if there's a version for
Windows found that you might pull

212
00:17:25,390 --> 00:17:28,970
something from there too and basically
what people do is come up with these

213
00:17:28,970 --> 00:17:33,980
third-party additions to snap trap that
all out for new functionalities so maybe

214
00:17:33,980 --> 00:17:37,890
you can save messages without notifying
the person that sent it to your things

215
00:17:37,890 --> 00:17:42,130
like that and this is a major problem
for them because they can't just shut

216
00:17:42,130 --> 00:17:46,030
down these older versions the API is
because they risk locking out people

217
00:17:46,030 --> 00:17:50,120
that are using all their versions of
snapshot obviously you know the more

218
00:17:50,120 --> 00:17:51,179
users that they have the

219
00:17:51,180 --> 00:17:55,200
more money that they're making so it's
very difficult for them to monitor the

220
00:17:55,200 --> 00:17:59,650
functionality of these older API's and
things that shouldn't be happening and

221
00:17:59,650 --> 00:18:03,370
allowing people to counsel you
compromise on a few guys remember but in

222
00:18:03,370 --> 00:18:05,159
2014

223
00:18:05,160 --> 00:18:10,100
there's a major act against snapchat
snapshot said that it was actually

224
00:18:10,100 --> 00:18:14,570
third-party services that people have
been logging into it there snapped a

225
00:18:14,570 --> 00:18:19,129
credentials the way that those
third-party services work are based off

226
00:18:19,130 --> 00:18:26,080
of manipulating the API using it for
things that it wasn't intended or so

227
00:18:26,080 --> 00:18:30,340
david mentioned this a little bit
earlier but API's are often neglected

228
00:18:30,340 --> 00:18:37,199
during testing usually API is are harder
and less fun to test I know that when I

229
00:18:37,200 --> 00:18:40,590
was doing pen testing I mean what would
you rather look at some web app that you

230
00:18:40,590 --> 00:18:44,270
don't know what the heck is doing but
you can still find fun things to break

231
00:18:44,270 --> 00:18:48,290
in it or just a bunch of simple API
calls were you have to do a bunch of

232
00:18:48,290 --> 00:18:52,610
work to fill in parameters you know
you're not doing the same air messaging

233
00:18:52,610 --> 00:18:57,090
that you're frequently getting from the
web application just generally not as

234
00:18:57,090 --> 00:19:02,270
fun in my opinion to mess around with
just the text it's more fun to break

235
00:19:02,270 --> 00:19:06,960
stuff that you can see in addition
depending on how robust the API is maybe

236
00:19:06,960 --> 00:19:13,130
it's more like an SDK you might actually
have to build something which not all

237
00:19:13,130 --> 00:19:17,090
web 10 testers are comfortable doing
especially you know if you don't really

238
00:19:17,090 --> 00:19:20,620
have as strong a development background
and even if you do it still just way

239
00:19:20,620 --> 00:19:24,550
more time consuming than just looking
through somebody's web application for

240
00:19:24,550 --> 00:19:27,860
abstinence himself in the background
you're looking for some stuff on your

241
00:19:27,860 --> 00:19:32,050
own but the API's you're gonna have to
copy and paste a bunch of stuff into

242
00:19:32,050 --> 00:19:36,540
whatever intercepting proxy or using so
some of the standard tools that people

243
00:19:36,540 --> 00:19:44,470
rely on bill with API has in mind for
testing we don't really know where to

244
00:19:44,470 --> 00:19:48,210
fit this mean but I just typed in
spider-man security me when this came up

245
00:19:48,210 --> 00:19:54,430
so I felt like it needed to be somewhere
just put it to you signify that David

246
00:19:54,430 --> 00:19:56,419
was going to take back over for a couple
slides

247
00:19:56,419 --> 00:20:05,149
yeah Thnkx least yeah I couldn't i
couldn't remove that mean I mean look as

248
00:20:05,149 --> 00:20:13,959
I feel like it's probably okay so you
know as part of this project and like I

249
00:20:13,960 --> 00:20:16,980
said we're trying to do this you know
documentation for trying to actually

250
00:20:16,980 --> 00:20:21,359
create things that will help developers
will help end testers although if they

251
00:20:21,359 --> 00:20:25,359
don't have a code that's going to be
difficult no matter which basically a

252
00:20:25,359 --> 00:20:28,039
sort of like a document that we can
released to the world that will actually

253
00:20:28,039 --> 00:20:31,980
bring some exposure to the project and
will actually you know actually help out

254
00:20:31,980 --> 00:20:36,429
some people quickly we decided to put
together an API security top 10 as I

255
00:20:36,429 --> 00:20:41,480
mentioned before really all about these
top 10 lists I don't know why I feel

256
00:20:41,480 --> 00:20:45,239
like a Busby article but we decided to
use or to just go with the scheme and

257
00:20:45,239 --> 00:20:48,590
say I separate pages

258
00:20:48,590 --> 00:20:54,488
APS security list next release candidate
as I mentioned it began to talk we

259
00:20:54,489 --> 00:20:57,799
looked at the statistics that we've put
together from that crowd we looked at

260
00:20:57,799 --> 00:21:01,210
major high-profile breaches that we
could see in the media and we said ok I

261
00:21:01,210 --> 00:21:05,769
think we can correlate these into what
we find to be major pitfalls you guys

262
00:21:05,769 --> 00:21:09,799
might have a different experience we're
more than happy in fact very much

263
00:21:09,799 --> 00:21:12,668
encouraged people to give us feedback if
you say hey like you're missing

264
00:21:12,669 --> 00:21:18,049
something or hey this isn't accurate
we'd love to hear that bill said we'd

265
00:21:18,049 --> 00:21:24,408
love to hear that ok so like I said this
is based on the aggregate data we

266
00:21:24,409 --> 00:21:28,600
couldn't release the full day that we
use some big crowd because that's

267
00:21:28,600 --> 00:21:30,570
actually people security findings

268
00:21:30,570 --> 00:21:34,710
fix them all things along those lines
but we're gonna actually released the

269
00:21:34,710 --> 00:21:38,970
top 10 right after this talk you guys
will be able to download it assuming I

270
00:21:38,970 --> 00:21:42,359
find my laptop in washington stuff like
that

271
00:21:42,359 --> 00:21:45,580
barker's ok

272
00:21:45,580 --> 00:21:59,570
shift so every time so everybody who's
familiar at the cost of ten is familiar

273
00:21:59,570 --> 00:22:03,550
with things like cross-site scripting
sequence action command injection we

274
00:22:03,550 --> 00:22:10,740
decided to kind of just bundle all of
these into a single category injections

275
00:22:10,740 --> 00:22:16,810
been the injection has been the the top
number one slot in the office top 10 we

276
00:22:16,810 --> 00:22:19,820
thought you know it's getting a little
bit too much tracks on its own

277
00:22:19,820 --> 00:22:23,370
bring it down a couple notches and
combine it with some of the other the

278
00:22:23,370 --> 00:22:27,739
other groups and from an API perspective
a lot of these kind of fall under the

279
00:22:27,740 --> 00:22:33,370
same category of remediation or more
prevention it all boils down to improper

280
00:22:33,370 --> 00:22:44,129
data sanitization tables and shit bro so
the second one is insufficient access

281
00:22:44,130 --> 00:22:50,490
control this occurs when API methods are
not check correctly for privileges so in

282
00:22:50,490 --> 00:22:54,850
this example there's the device
manufacture and all it was checking was

283
00:22:54,850 --> 00:23:00,000
making sure that you are a user in the
organization that was able to make

284
00:23:00,000 --> 00:23:07,520
configuration changes so if I mean user
and david is a Super Admin it didn't do

285
00:23:07,520 --> 00:23:11,139
any checking to make sure that I wasn't
a Super Admin I could do any of the

286
00:23:11,140 --> 00:23:16,380
changes that he did just by having a
valid credentials are basically made the

287
00:23:16,380 --> 00:23:20,480
role-based access control for the device
meaningless considering the lowest tier

288
00:23:20,480 --> 00:23:26,580
performing the highest actions another
example of this is the Instagram hacks

289
00:23:26,580 --> 00:23:31,230
wasn't checking to make sure that the
person to leading the comment was the

290
00:23:31,230 --> 00:23:36,820
person that had actually posted it and
so if I posted a comment on senate

291
00:23:36,820 --> 00:23:42,100
David's Instagram photos that he didn't
like he would be able to you know them

292
00:23:42,100 --> 00:23:46,030
from from his account you might actually
be able to do that anyway I guess I

293
00:23:46,030 --> 00:23:49,490
could delete things that he had posted
on the event photos that's a good

294
00:23:49,490 --> 00:23:52,230
example and one that actually makes
sense

295
00:23:52,230 --> 00:23:59,900
the next category is insecure direct
object reference this is probably one of

296
00:23:59,900 --> 00:24:04,549
my favorite ones from doing web pen
testing from the normal oh I stopped 10

297
00:24:04,549 --> 00:24:07,879
I will say that my favorite is actually
see search just because it seems that

298
00:24:07,880 --> 00:24:12,250
sneaky and it combines things are social
engineering I don't know why I was just

299
00:24:12,250 --> 00:24:17,910
like CSIR findings but I'd or insecure
direct object reference is definitely an

300
00:24:17,910 --> 00:24:22,960
old favorite from from the web app top
10 this example was another device

301
00:24:22,960 --> 00:24:29,070
manufacture and what would happen during
the registration process is as part of a

302
00:24:29,070 --> 00:24:33,320
POST request you would send along the
devices serial number as part of the

303
00:24:33,320 --> 00:24:36,700
registration or lock the device to my
account so that nobody else could

304
00:24:36,700 --> 00:24:39,140
register it generally a good idea

305
00:24:39,140 --> 00:24:42,940
the problem was is you could just
iterate through and register as many

306
00:24:42,940 --> 00:24:47,020
devices to your account as possible
which would then lock out all the other

307
00:24:47,020 --> 00:24:52,918
people that it actually bought that vice
so if we both thought the same little

308
00:24:52,919 --> 00:24:56,990
device I could just register Davis and
then he couldn't use it

309
00:24:57,590 --> 00:25:04,428
ok so this one is similar

310
00:25:05,350 --> 00:25:10,159
another 14 insecure direct object
reference this comes from a company that

311
00:25:10,160 --> 00:25:16,179
companies will use the send out
questions to people you probably gotten

312
00:25:16,179 --> 00:25:19,809
one that's like oh hey how happy where
you at this product please rate it

313
00:25:20,350 --> 00:25:25,490
125 you know maybe this section 4
comments or something like that as part

314
00:25:25,490 --> 00:25:30,880
of this you could initiate a request
that would allow you to gain access to

315
00:25:30,880 --> 00:25:34,630
anyone's responses so whether or not
they were in your organization whether

316
00:25:34,630 --> 00:25:39,640
or not it was a search a survey that UN
even sent out to your customers you are

317
00:25:39,640 --> 00:25:45,240
able to access that information so you
could get information about how happy

318
00:25:45,240 --> 00:25:48,410
somebody was with your competitors
assuming that they're using the same

319
00:25:48,410 --> 00:25:52,710
service and that you could enter it
through and actually find their company

320
00:25:52,710 --> 00:26:00,179
this x1 I believe as part of the top 10
in 2010

321
00:26:00,179 --> 00:26:07,269
and then there's a similar category in
the mobile application top 10 except

322
00:26:07,269 --> 00:26:07,799
they call it

323
00:26:07,799 --> 00:26:12,779
insecure cryptography attack it and I T
I think that also covers stuff that's on

324
00:26:12,779 --> 00:26:18,559
the devices too so it's a little bit
more broad but without web browsers

325
00:26:18,559 --> 00:26:22,730
spewing big areas which they've gotten
pretty good at especially chrome trim

326
00:26:22,730 --> 00:26:27,629
has been pretty aggressive with
deprecating things like Shah 1922 the

327
00:26:27,629 --> 00:26:31,379
kids things like that I mean there's a
ton of reasons now I companies at least

328
00:26:31,379 --> 00:26:38,149
have the little red marks to the HTTPS
if not a big old warning that if Greece

329
00:26:38,149 --> 00:26:43,689
people out we see frequently with API is
that people just aren't even adding the

330
00:26:43,690 --> 00:26:48,149
s in HTTPS I mean it's really that easy
for a lot of these things for whatever

331
00:26:48,149 --> 00:26:52,360
reason maybe there was some problem that
you had earlier maybe there is like some

332
00:26:52,360 --> 00:26:56,029
certificate problems and whatever
library or you are using for that was

333
00:26:56,029 --> 00:27:00,259
failing and not letting you why so as a
developer you alright well let's just do

334
00:27:00,259 --> 00:27:06,999
HDPE it works he just don't revisit it
is too so i flying public API is

335
00:27:06,999 --> 00:27:15,549
released oftentimes times for example
some really good gem to make it easily

336
00:27:15,549 --> 00:27:20,399
accessible like some other sort of
package and oftentimes even though the

337
00:27:20,399 --> 00:27:24,729
actual API documentation is saying hey
you know this is a niche CBS called it

338
00:27:24,730 --> 00:27:30,059
is those same people that are releasing
that EP I will not restricts non HDS

339
00:27:30,059 --> 00:27:36,269
request and then you have the third
party making this wrapper saying that

340
00:27:36,269 --> 00:27:43,830
while the West earlier so that would
actually make your chance to even the

341
00:27:43,830 --> 00:27:47,949
API itself is documenting itself
correctly they left they left a hole an

342
00:27:47,950 --> 00:27:54,490
example of this was there is that vitek
breach at the end of last year for those

343
00:27:54,490 --> 00:27:58,980
unfamiliar as a toy manufacturer and as
part of the breach there was five

344
00:27:58,980 --> 00:28:04,470
million parents names addresses other
Pai as well as the

345
00:28:04,470 --> 00:28:10,919
the names and birthdays of 200,000
children so that got a lot of press it

346
00:28:10,919 --> 00:28:15,809
it was unclear exactly where that breach
came from it seemed to be sequel

347
00:28:15,809 --> 00:28:20,879
injection not related to transport layer
security reason why I brought it up is

348
00:28:20,880 --> 00:28:25,570
because I hunted a little bit of extra
digging into the security of their

349
00:28:25,570 --> 00:28:30,928
products and their websites in town that
pretty much nothing was using HTTPS for

350
00:28:30,929 --> 00:28:34,460
the web calls so this is definitely
something that still a major problem

351
00:28:34,460 --> 00:28:38,200
even if it wasn't how that company got
breed so it's a pretty big breach of

352
00:28:38,200 --> 00:28:42,440
last year so we thought it was worth
mentioning as as an example

353
00:28:42,440 --> 00:28:49,200
sensitive data exposure this occurs when
API is allow queries that are

354
00:28:49,200 --> 00:28:56,150
excessively broad a major example of
this would be social graph style API is

355
00:28:56,150 --> 00:29:02,250
that seem to be particularly vulnerable
an example of this would be the grinder

356
00:29:02,250 --> 00:29:07,490
vulnerability from a couple of years ago
basically is an unauthenticated user you

357
00:29:07,490 --> 00:29:12,020
can login to Grindr and say show me the
50 closest people that are also signed

358
00:29:12,020 --> 00:29:17,450
up for Grindr if those users had their
location shared within the application

359
00:29:17,450 --> 00:29:22,320
you can use a process called trail
adoration which is basically you make

360
00:29:22,320 --> 00:29:27,928
that same request three times and based
off of your location changing and the

361
00:29:27,929 --> 00:29:31,100
new distance for those people I guess
you have to move around between the

362
00:29:31,100 --> 00:29:34,830
request but so you could move around a
little bit make the same request as long

363
00:29:34,830 --> 00:29:40,309
as that person was present for all those
requests and they didn't moves you can

364
00:29:40,309 --> 00:29:44,780
use that to get their exact location
using some of the math and geometry that

365
00:29:44,780 --> 00:29:46,230
that's on the screen

366
00:29:46,230 --> 00:29:53,909
they would expose some of his exact
location so one so this was a problem in

367
00:29:53,909 --> 00:30:00,230
countries that have rather strict anti
gay laws you can use it to find not just

368
00:30:00,230 --> 00:30:03,460
kind of the general location of where
somebody's out but you can use it to

369
00:30:03,460 --> 00:30:07,270
pinpoint exactly yeah talking to

370
00:30:07,270 --> 00:30:17,629
yeah exactly that's how he found me to
hear it sends a clear yeah is it is it i

371
00:30:17,630 --> 00:30:25,590
think as a referral right now we also
had a pretty long conversation about

372
00:30:25,590 --> 00:30:28,939
trial adoration restraint violation
different things

373
00:30:29,610 --> 00:30:34,340
ok so we serve said security pretty
straight forward in terms of what that

374
00:30:34,340 --> 00:30:39,090
actually means so much and no issues are
known vulnerabilities in third-party

375
00:30:39,090 --> 00:30:44,020
components basically occurs when the
server itself the API endpoint is

376
00:30:44,020 --> 00:30:47,240
vulnerable so there's a lot of different
ways that this can come to light a lot

377
00:30:47,240 --> 00:30:50,820
of different ways that we've seen this
happening in the real world for example

378
00:30:50,820 --> 00:30:54,889
if your opening ACL's on Apr 10 points
you might just say whatever just all

379
00:30:54,890 --> 00:30:58,320
trafficking go to this we're just gonna
remove all security and then your tax

380
00:30:58,320 --> 00:31:01,610
service will obviously increase if
you're allowing every service to behead

381
00:31:01,610 --> 00:31:04,850
you'll have the standard Internet know
is that everything i've been the

382
00:31:04,850 --> 00:31:09,040
internet will see then there's also
service are vulnerabilities like partly

383
00:31:09,040 --> 00:31:15,550
it's tragic I chose the name drugs
because security but you know we see

384
00:31:15,550 --> 00:31:19,950
things like we have is a VMware has been
running for five years basically

385
00:31:19,950 --> 00:31:24,020
sometimes people don't monitor it
oftentimes you see like cops teams that

386
00:31:24,020 --> 00:31:28,100
aren't really touching what they
consider to be developer control ABIM

387
00:31:28,100 --> 00:31:32,540
points and then went something like
hardly comes out or image tragic of an

388
00:31:32,540 --> 00:31:37,340
image processing API people don't
necessarily patches and then you have

389
00:31:37,340 --> 00:31:45,810
vulnerable systems just sitting on the
Internet in property handling is is kind

390
00:31:45,810 --> 00:31:53,700
of cool because its unique 22 API is
this is this is I gave leave credit for

391
00:31:53,700 --> 00:31:55,110
this image is pretty great

392
00:31:55,110 --> 00:32:00,799
basically it's a PR specific in that
generally web applications are manually

393
00:32:00,799 --> 00:32:05,830
giving you choose to use right i mean
you could say a certain thing sort of

394
00:32:05,830 --> 00:32:11,928
just yes things like that but really
it's sort of API specific API keys for

395
00:32:11,929 --> 00:32:14,960
those of you who may not have
implemented an API basically popular

396
00:32:14,960 --> 00:32:20,450
authentication mechanisms always managed
in the same way so like if you're gonna

397
00:32:20,450 --> 00:32:24,140
maybe say like having a check for ever
question you're making ok that's pretty

398
00:32:24,140 --> 00:32:27,660
secure actually making sure that they
have the key to have a secret things

399
00:32:27,660 --> 00:32:31,559
working but a lot of times we see ok
here's a forty character alphanumeric

400
00:32:31,559 --> 00:32:35,490
string this is your key don't lose it
this is all you need right

401
00:32:36,080 --> 00:32:40,149
the problem is it's not always say a
forty character random string we see

402
00:32:40,150 --> 00:32:44,450
things like lackey verification meaning
if you have the right schema and that

403
00:32:44,450 --> 00:32:48,480
it's safe for the characters doesn't
have special characters they say oh this

404
00:32:48,480 --> 00:32:52,140
looks like a valid key we're gonna
actually allow any requests from which

405
00:32:52,140 --> 00:32:53,200
is pretty bad

406
00:32:53,200 --> 00:32:58,290
sequential or otherwise predictable keys
provable admin bits and he is like

407
00:32:58,290 --> 00:33:04,020
having a secondary Kiwi basically like a
diamond had been using your own etcetera

408
00:33:04,679 --> 00:33:09,320
so we have basically a really simple
example for this this actually

409
00:33:09,320 --> 00:33:14,320
highlights two of those problems if
you're sending a request you API in this

410
00:33:14,320 --> 00:33:20,280
case your listing users and you have a
Pik first of all this is definitely be

411
00:33:20,280 --> 00:33:25,350
in the URL get requests as its get it
also if you're curious something like

412
00:33:25,350 --> 00:33:30,230
1336 that's probably going to be
sequential write a it's only for

413
00:33:30,230 --> 00:33:35,059
character or four digits and being mean
it's a pretty well one at that

414
00:33:35,059 --> 00:33:39,600
so a lot of organizations just increment
a counter they use the idea of you know

415
00:33:39,600 --> 00:33:46,770
and that's how it works so clearly if
you have that you can very easily sort

416
00:33:46,770 --> 00:33:50,480
of brute force everyone else is just
quickly run through 10,000 numbers and

417
00:33:50,480 --> 00:33:56,549
all of a sudden you have access to
everyone's count inconsistent API

418
00:33:56,549 --> 00:34:00,690
functionality is something that we
alluded to a little bit before and is

419
00:34:00,690 --> 00:34:05,450
generally pretty severe this basically
occurs when API functions work

420
00:34:05,450 --> 00:34:09,730
fundamentally differently than those in
the primary application so a secondary

421
00:34:09,730 --> 00:34:11,210
team came in

422
00:34:11,210 --> 00:34:15,359
wrote the API to basically say hey we're
gonna make all the functions but again

423
00:34:15,359 --> 00:34:18,869
they're not spending may be an
eighteen-month dev Psychol on creating

424
00:34:18,869 --> 00:34:22,679
like a really nice heart medication they
don't have the security team coming in

425
00:34:22,679 --> 00:34:26,550
and do incurred if you like we can just
open up these functions its final

426
00:34:26,550 --> 00:34:30,570
stretch of database an example here
would be you know in like a facebook web

427
00:34:30,570 --> 00:34:35,940
at taking care of her with the person is
tagged but if you're taking the API

428
00:34:35,940 --> 00:34:40,460
access but as you share with everyone
right i mean that's just not correctly

429
00:34:40,460 --> 00:34:43,530
mimicking the actual function that
you're trying to implement via the API

430
00:34:43,530 --> 00:34:49,470
just saying this is pretty pretty much
doing what it's supposed to one of the

431
00:34:49,469 --> 00:34:54,500
really high profile examples of this
would be a sort of rate limiting in the

432
00:34:54,500 --> 00:34:59,080
face vs the API the most the most
well-known probably being the Apple

433
00:34:59,080 --> 00:35:04,410
celebrity photo basically if you're
logging into an iCloud account you can

434
00:35:04,410 --> 00:35:08,020
do something like I don't know five
attempts and slows you down or locks you

435
00:35:08,020 --> 00:35:09,210
out something like that

436
00:35:09,210 --> 00:35:13,730
pretty standard to have in most
applications but there was a point where

437
00:35:13,730 --> 00:35:16,460
you could basically just brute force
they didn't have that same rate limiting

438
00:35:16,460 --> 00:35:20,330
in place for that particular API request
so that he can say okay I know whose

439
00:35:20,330 --> 00:35:23,480
email address I'm trying to get into you
I can go through you know ten million

440
00:35:23,480 --> 00:35:27,380
passwords in Seattle take some time to
send their request but there's no actual

441
00:35:27,380 --> 00:35:34,230
rate limiting the pastor that way it's
unclear if thats exactly how that had

442
00:35:34,230 --> 00:35:41,490
took place but after a did Apple patched
the vulnerability so maybe ask you to

443
00:35:41,490 --> 00:35:47,240
configure this configuration yeah I i I
always hated this type of this title is

444
00:35:47,240 --> 00:35:52,220
but we as going through the data and
high profile data we realized that we

445
00:35:52,220 --> 00:35:57,169
needed to have this kind of catch
alright other tight ends to energy use

446
00:35:57,170 --> 00:36:00,369
it it's basically saying that due to
some sort of human error whether that's

447
00:36:00,369 --> 00:36:01,390
how you're deploying

448
00:36:01,390 --> 00:36:06,540
it or developer and made just some
horrific mistake the AP is not behaving

449
00:36:06,540 --> 00:36:10,300
the way that it should it's not doing
exactly what we expect and it's causing

450
00:36:10,300 --> 00:36:15,310
problems opening the attack servers
causing more vulnerabilities to flaws

451
00:36:15,310 --> 00:36:20,720
that we talked about before and the rest
of these less or just being kind of

452
00:36:20,720 --> 00:36:25,209
uniquely messed up there is there's a
plethora of weird examples for that but

453
00:36:25,210 --> 00:36:32,550
they're hard to go over without
disclosing that apply to so we've gone

454
00:36:32,550 --> 00:36:35,130
through you know why it is important

455
00:36:35,130 --> 00:36:39,560
we've gone through a sort of our process
some examples there and what we consider

456
00:36:39,560 --> 00:36:45,120
to be pretty much the top ten major risk
categories when deploying an API things

457
00:36:45,120 --> 00:36:49,190
that if your pen tester you're probably
going to want to look into some sort of

458
00:36:49,190 --> 00:36:53,960
the real I don't see the point of the
talk but it would be great if someone to

459
00:36:53,960 --> 00:36:59,160
sort of help with us right now it's
mainly in our spare time today we're

460
00:36:59,160 --> 00:37:02,970
publishing the first draft of the API
security top 10 it's going to basically

461
00:37:02,970 --> 00:37:08,379
be a nice concise version of the size
that we have here and easily readable

462
00:37:08,380 --> 00:37:11,410
PDF short descriptions of what's going
on

463
00:37:11,410 --> 00:37:16,190
we'd really like to get feedback on what
we've seen here you know and if any

464
00:37:16,190 --> 00:37:19,430
researchers want to you know help us
create more of these that'd be great

465
00:37:19,430 --> 00:37:24,970
again if if it's hey you've missed
something that would be great for me to

466
00:37:24,970 --> 00:37:28,410
say we don't agree with one of these
findings that would also be but our

467
00:37:28,410 --> 00:37:32,290
goals as I mentioned the very beginning
of the stock are really a lot of broader

468
00:37:32,290 --> 00:37:35,180
than just saying hey we're gonna make
another top 10 document it's really easy

469
00:37:35,180 --> 00:37:39,290
to display that via the slides and to
have a nice presentation when we go to

470
00:37:39,290 --> 00:37:43,570
the top 10 but really our goal here is
to sort of make a documentation that can

471
00:37:43,570 --> 00:37:44,530
really help out

472
00:37:44,530 --> 00:37:52,310
developers and testers I sort of mood
from the red team when I was 22 of the

473
00:37:52,310 --> 00:37:56,720
blue team and helping out developers and
it's it's a little sad how little

474
00:37:56,720 --> 00:37:58,490
information there really is out there

475
00:37:58,490 --> 00:38:02,430
that's like hey we can actually help you
write something in a super secure way

476
00:38:02,430 --> 00:38:05,618
and said just like hey we're gonna teach
everyone how to break it which is

477
00:38:05,619 --> 00:38:10,600
admittedly much more fun but you know we
have to help developers to you were

478
00:38:10,600 --> 00:38:15,480
trying to basically make this portal to
help Deb strain deploy security guys so

479
00:38:15,480 --> 00:38:19,700
we're looking for security researchers
to expand on the risks here to critique

480
00:38:19,700 --> 00:38:20,960
what we've already done

481
00:38:20,960 --> 00:38:26,680
technical writers you know basically
create cheats cheat sheet style you know

482
00:38:26,680 --> 00:38:31,390
tutorials for developers if we have any
designers in the audience this is really

483
00:38:31,390 --> 00:38:35,350
a market for designers but designers in
the audience base to help us accurately

484
00:38:35,350 --> 00:38:40,140
display our data look pretty for people
you know sort of general evangelists for

485
00:38:40,140 --> 00:38:42,040
help spread the research programs

486
00:38:42,040 --> 00:38:47,279
project see you probably think saying
like wow that sounds great I'm so

487
00:38:47,280 --> 00:38:51,890
excited like you guys are the bestest
person best presentation ever seen how

488
00:38:51,890 --> 00:38:57,589
can I sign up right and I we like we'd
like to tell you how to do that you can

489
00:38:57,590 --> 00:39:02,410
find the alpha stage of our project at
hola squeaky I'm not gonna read out that

490
00:39:02,410 --> 00:39:07,040
whole URL but I security project you can
search for it if you'd like to help you

491
00:39:07,040 --> 00:39:13,310
can contact me directly via my email
David outshot and I just put the slides

492
00:39:13,310 --> 00:39:16,619
online so for all the links and the
research and things like that

493
00:39:17,320 --> 00:39:25,910
their availability shot on net / no luck
on underscore 2016 tapia so thank you

494
00:39:25,910 --> 00:39:30,710
guys for being here right now it's
Friday afternoon Orleans so you know

495
00:39:30,710 --> 00:39:42,570
there's that any questions or concerns
or anything like that I i mean I don't

496
00:39:42,570 --> 00:39:44,660
drink it

497
00:39:44,660 --> 00:39:51,690
that's a good question with no questions
since we took longer than expected and

498
00:39:51,690 --> 00:39:57,309
yeah it please feel free to find us
we're gonna be around all weekend happy

499
00:39:57,309 --> 00:40:03,099
to hang out with anyone or talk about if
your security or so thank you guys

