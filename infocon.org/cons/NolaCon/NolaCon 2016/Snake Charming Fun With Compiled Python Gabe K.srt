1
00:00:44,060 --> 00:00:56,640
amazing technology

2
00:01:01,790 --> 00:01:11,430
all right apparently that's a rule now
huh ok everyone else it might be harder

3
00:01:11,430 --> 00:01:22,369
but it's the honor system alright so I'm
day brokered patsick I go by games on

4
00:01:22,369 --> 00:01:27,880
the internet cuz I'm not very creative
and this is a charming on list compiled

5
00:01:27,880 --> 00:01:47,479
by the presentation go the next hour
points hard are presented was incredibly

6
00:01:47,479 --> 00:01:50,820
mess up right now the state has started
again

7
00:01:50,820 --> 00:01:59,919
works I it's still broken but we're
going to see how this goes

8
00:01:59,920 --> 00:02:07,229
so just a quick introduction this is
where I go to school and that was where

9
00:02:07,229 --> 00:02:10,020
I live this is where I go to school
that's my dog 1 year 10 months in eight

10
00:02:10,020 --> 00:02:14,030
days before the Xbox 360 game out that's
when I during DEFCON last year she was

11
00:02:14,030 --> 00:02:17,610
not at that comment during dusk on my
mom took a picture of her and send me

12
00:02:17,610 --> 00:02:20,620
the picture that's pretty much it

13
00:02:21,690 --> 00:02:28,950
alright so quick overview in the stock
mostly talking about Python obfuscation

14
00:02:28,950 --> 00:02:40,369
of us are going to give an intro to
Python internals and buy cozaar of a

15
00:02:40,370 --> 00:02:47,910
crash course in LVM works and we're also
gonna show techniques for confusing this

16
00:02:47,910 --> 00:02:58,310
assemblers and compilers says a lot of
fun I'm sorry about this but I literally

17
00:02:58,310 --> 00:03:09,440
cannot see the side that's currently on
their rivals like I can't see it but I'm

18
00:03:09,440 --> 00:03:12,109
not with you guys are seeing here is not
what I'm seeing on my computer I'm

19
00:03:12,110 --> 00:03:29,320
seeing my computer is pretty much
nothing now this is our gonna do this

20
00:03:29,320 --> 00:03:43,150
alright so so why obviously I mean
basically the same as in about anything

21
00:03:43,150 --> 00:03:46,340
if you're making now where you want to
hide how your members working here

22
00:03:46,340 --> 00:03:50,810
working on some sort of malicious
software earth some you have some code

23
00:03:50,810 --> 00:03:53,900
that you don't want people to be able to
figure out for some commercial software

24
00:03:53,900 --> 00:03:59,350
is really easy to write easier right and
then trying to you need to make peace in

25
00:03:59,350 --> 00:04:02,790
our time to write the next Stuxnet
prolly easier right quick python script

26
00:04:02,790 --> 00:04:10,470
and it's very very popular in
information security for some reason

27
00:04:10,470 --> 00:04:18,980
which is useful quick customer every
single picture in this that features a

28
00:04:18,980 --> 00:04:23,540
snake was added about 10 minutes ago by
fuzzy AHP and so I take absolutely no

29
00:04:23,540 --> 00:04:26,540
responsibility for any of this

30
00:04:27,110 --> 00:04:39,770
so it does include some fun facts about
Cody texaco get compiled to buy code and

31
00:04:39,770 --> 00:04:48,188
then stored in few I see you I see file
so is an interpreted language but it

32
00:04:48,189 --> 00:04:51,289
doesn't really get in trouble on my mind
before you run it they can be compiled

33
00:04:51,289 --> 00:04:56,139
into my code and that's what actually
gets executed by cuz executed by the

34
00:04:56,139 --> 00:05:06,139
Vienna not so and there's no jet so it
never turns into native code is just a

35
00:05:06,139 --> 00:05:14,090
really big switch statement and the
python is a snack machines there's no

36
00:05:14,090 --> 00:05:16,810
registers or anything everything you're
dealing with this pushes back when

37
00:05:16,810 --> 00:05:29,210
everyone so it's like Michael methods of
observation the first one was alright

38
00:05:29,210 --> 00:05:39,198
nothing which is the most popular one is
Python source obfuscation was a bad

39
00:05:39,199 --> 00:05:45,089
decision but seriously you put in a py
file and you get out of you I file the

40
00:05:45,089 --> 00:05:48,550
typically just how I like all the
variable names changed all the function

41
00:05:48,550 --> 00:05:56,029
names changed the strings are encoded
routes get in some way so it's a quick

42
00:05:56,029 --> 00:06:00,849
example of that this is what Python
source obligation looks like this is

43
00:06:00,849 --> 00:06:07,319
using a popular obfuscator called opy on
the Left syriza we have really simple

44
00:06:07,319 --> 00:06:12,839
program has this classless two methods
and that's that's just a regular go down

45
00:06:12,839 --> 00:06:16,199
on the right is it after being on the
road and it looks like there's a lot

46
00:06:16,199 --> 00:06:23,419
more code but if you look at the lines
each of them out of 121 and the first 27

47
00:06:23,419 --> 00:06:30,539
lines of the program are actually just
the string obfuscation function so even

48
00:06:30,539 --> 00:06:32,490
though it looks like a lot bigger

49
00:06:32,490 --> 00:06:36,550
the code below still pretty visible is
mostly just variable names changed and

50
00:06:36,550 --> 00:06:41,840
strings obligated but you can just go
through the outskirts of the strings and

51
00:06:41,840 --> 00:06:46,340
then just rename variables so it's it's
effective for making it look

52
00:06:46,340 --> 00:06:49,659
intimidating but it doesn't really help
to hide the code below or anything

53
00:06:49,660 --> 00:06:59,000
another method is Python runtime
obfuscation so that's when you are

54
00:06:59,000 --> 00:07:04,460
distributing a modified version of the
runtime that has some changes made to it

55
00:07:04,460 --> 00:07:10,080
may be like changing the magic number at
the start of you I see files so that one

56
00:07:10,080 --> 00:07:15,750
from the modified run time you put it in
a Decompiler it sees the magic numbers

57
00:07:15,750 --> 00:07:19,880
of different value it just freaks out
another popular thing to do is swapping

58
00:07:19,880 --> 00:07:26,190
opcode values so people will swap like
load with ADD or something so it'll be

59
00:07:26,190 --> 00:07:31,090
like disassemble it look like garbage
will make much sense and compilers was a

60
00:07:31,090 --> 00:07:35,299
lot of issues with that rich Smith gave
a talk at black hat and DEFCON a couple

61
00:07:35,300 --> 00:07:41,520
years ago about a tortured by rhetoric
which is really good for being able to

62
00:07:41,520 --> 00:07:53,680
dump and to compile the stuff is this
requires you to ship a modified version

63
00:07:53,680 --> 00:07:57,050
of the Python runtime so you to
completely rebuild the Python runtime

64
00:07:57,050 --> 00:08:02,800
any script for this will not work with
the starters lenders Python bytecode

65
00:08:02,800 --> 00:08:06,880
obfuscation which is what the majority
of the stock is going to be about so

66
00:08:06,880 --> 00:08:14,280
this involves manipulating the bytecode
in a few IC 50 to break disassembler and

67
00:08:14,280 --> 00:08:17,609
Decompiler is all sorts of fun ways
figuring out how you can use

68
00:08:17,610 --> 00:08:20,680
instructions to do things that they
weren't necessarily intended to do

69
00:08:20,680 --> 00:08:24,210
little confused people when they're
trying to reverse engineer it in the

70
00:08:24,210 --> 00:08:27,210
great part about this is it doesn't
require modified by the time so

71
00:08:30,380 --> 00:08:33,559
most out with us lunch

72
00:08:33,559 --> 00:08:42,219
fantastic so if you I see file or any
files that you generate with by

73
00:08:42,220 --> 00:08:57,380
codification work on any any Python
Python interpreter out of the box was a

74
00:08:57,380 --> 00:09:04,470
weird replacement for by a snake
interpreter to work out of the box with

75
00:09:04,470 --> 00:09:18,870
your favorite favorite snake base
programming language of the many and so

76
00:09:18,870 --> 00:09:22,950
the way they do you typically obligated
if you I see such as you start with you

77
00:09:22,950 --> 00:09:27,000
I filed compile it into a few I see file
and then you modify the PYC post

78
00:09:27,000 --> 00:09:31,870
compilation and then you get to have
some fun writing pieces of pipe tobacco

79
00:09:31,870 --> 00:09:43,040
trash the hard part of this is i'm
reading the slides like apparently wrote

80
00:09:43,040 --> 00:10:01,170
the word Python on the 101 a copy
covered so as I mentioned a couple times

81
00:10:01,170 --> 00:10:06,219
earlier you I see files compiled into
view I see files are automatically

82
00:10:06,220 --> 00:10:09,800
created when a module is imported and
after they've been created

83
00:10:09,800 --> 00:10:15,579
they'll be loaded in preference to the
py file so if you type important basics

84
00:10:15,580 --> 00:10:21,570
before it's going to look for the basics
before it up Eli file and then it will

85
00:10:21,570 --> 00:10:26,850
compile it into a basically for WIC file
and then every time in the future the

86
00:10:26,850 --> 00:10:31,860
you import basically for its gonna load
the bases for WIC instead of a 64 WI

87
00:10:31,860 --> 00:10:37,140
unless you update the basics before it
compares the timestamps on the two

88
00:10:37,779 --> 00:10:43,050
and all of you I see rather than a few I
can also be created if you just run a

89
00:10:43,050 --> 00:10:49,459
few I compile or import model you can
just create UIC file and these contain

90
00:10:49,459 --> 00:10:55,170
she realized code objects that just a
given to the interpreter and executed so

91
00:10:55,170 --> 00:11:00,079
what is the code object if you open up
your favorite snake based programming

92
00:11:00,079 --> 00:11:06,729
language interpreter and you take a code
object and you type help this is this is

93
00:11:06,730 --> 00:11:10,499
a documentation that you'll get you get
this constructor that takes like 14

94
00:11:10,499 --> 00:11:16,550
parameters and just says create a code
object not for the faint of heart is not

95
00:11:16,550 --> 00:11:22,359
very useful documentation but you can do
some digging into the actual runs I'm

96
00:11:22,360 --> 00:11:26,769
and you see I called object and is
probably expected to contain all the

97
00:11:26,769 --> 00:11:31,279
information that the interpreter needs
to run the code so that's the number of

98
00:11:31,279 --> 00:11:36,930
arguments the number of local variables
stack size execution flags the module

99
00:11:36,930 --> 00:11:41,008
and function name they're actually only
use video output they're not necessary

100
00:11:41,009 --> 00:11:46,949
at all and the file name which is also
just then as a strain called CEO code

101
00:11:46,949 --> 00:11:51,378
which is just the strength of all of the
bytecode that it just goes to execute

102
00:11:51,379 --> 00:11:56,550
CEO names which are the names of all of
the variables in the model that are

103
00:11:56,550 --> 00:12:00,920
externally accessible and then CEO of
our names which is all the local

104
00:12:00,920 --> 00:12:08,599
variables can also see 0 comments which
is a to pull out of the constant values

105
00:12:08,600 --> 00:12:11,689
using your codes if you have a hello
world program that's going to be the

106
00:12:11,689 --> 00:12:16,559
string HelloWorld so this is what I
could actually looks like this is a

107
00:12:16,559 --> 00:12:17,699
hello world

108
00:12:17,699 --> 00:12:20,699
written in Python bytecode

109
00:12:23,100 --> 00:12:30,750
I was doing so well therefore so if you
took a hello world compiled in the

110
00:12:30,750 --> 00:12:35,820
disassembled it this is what you would
see instructions are one by one by

111
00:12:35,820 --> 00:12:41,480
opcode an optional to buy argument so
for the first instruction here you have

112
00:12:41,480 --> 00:12:48,000
load times 20 so it loads their constant
at index 0 in the Jubilee concert and

113
00:12:48,000 --> 00:12:51,000
pushes onto the stack than they do

114
00:12:55,250 --> 00:13:06,700
yeah and then it's two bites is a 16
miniature so it's to buy its 40 and then

115
00:13:06,700 --> 00:13:10,570
it does a print item which just possibly
on the top of stack principled stand out

116
00:13:10,570 --> 00:13:15,930
then print new line and then every
single Python code object it's like a

117
00:13:15,930 --> 00:13:18,359
dozen call me out on that one

118
00:13:18,360 --> 00:13:25,890
even if it's a void function is still
has to return something so it always has

119
00:13:25,890 --> 00:13:31,189
to return either none or whatever the
functions return is so typically at the

120
00:13:31,190 --> 00:13:34,840
end of a program that doesn't return
anything it will load the constant none

121
00:13:34,840 --> 00:13:46,680
and then return it so tools for dealing
with Python bytecode there's a there's a

122
00:13:46,680 --> 00:13:51,040
built-in module that comes with all the
standard libraries for a certain

123
00:13:51,040 --> 00:13:57,130
programming language called dis WI which
will let you just passing a code object

124
00:13:57,130 --> 00:13:57,870
at all

125
00:13:57,870 --> 00:14:02,460
show you the disassembly of it and there
is also a third-party module called by

126
00:14:02,460 --> 00:14:10,690
play which is used for creating and
modifying its hilarious

127
00:14:11,390 --> 00:14:16,550
it is re-creating a modifying objects
objects are typically immutable so you

128
00:14:16,550 --> 00:14:23,540
can't just modify them regularly and
then there is you I S which is a project

129
00:14:23,540 --> 00:14:28,829
of mine I'm hesitant to really call
projects I haven't updated it and like

130
00:14:28,830 --> 00:14:35,240
eight months but it's a folder on my
computer is also on the internet so I

131
00:14:35,240 --> 00:14:39,820
think that makes it an open source
projects but it is an assembler and

132
00:14:39,820 --> 00:14:48,340
disassembler for Python code objects and
as I'm going to be using for all the

133
00:14:48,340 --> 00:14:56,000
examples in the stock so you I S MPLS
and allows you to represent built-in

134
00:14:56,000 --> 00:15:02,370
objects specifically go to objects in
human-readable format so they have a way

135
00:15:02,370 --> 00:15:13,520
in just serialize any object to a binary
format but that means that you have to

136
00:15:13,520 --> 00:15:17,710
have it all their stuff is fun but can
get kind of annoying eventually so I

137
00:15:17,710 --> 00:15:22,580
made this does represent them in
human-readable format and then is able

138
00:15:22,580 --> 00:15:27,650
to build these POS I'm files into PYC
files which were able to run normally

139
00:15:27,650 --> 00:15:32,740
India Python interpreter and can also
disassembled existing QIA files into

140
00:15:32,740 --> 00:15:41,200
Beuys I'm files so that you can usually
modify them and then rebuild them so I

141
00:15:41,200 --> 00:15:48,780
did not put this picture in here I
totally put that picture in there that

142
00:15:48,780 --> 00:15:51,780
was my attempt at writing clear

143
00:15:53,750 --> 00:16:00,180
so we're gonna do with words gonna write
a simple hello world and then we're

144
00:16:00,180 --> 00:16:06,599
going to disassemble it added it
reassemble it was you I S Grant hello

145
00:16:06,600 --> 00:16:13,290
world the revolutionary program and then
to build into a few I see file was due

146
00:16:13,290 --> 00:16:16,420
in Port hello world

147
00:16:16,420 --> 00:16:24,589
we have the HelloWorld WIC file there so
how to disassemble it with you I is here

148
00:16:24,590 --> 00:16:30,000
on the script desktop UI UI the stock
you I was already taken zydeco might

149
00:16:30,000 --> 00:16:38,270
dispute iwi which I'm sure when creating
confusion so he doesn't believe you I

150
00:16:38,270 --> 00:16:45,939
see file AP why is on file so now if we
open the ISO file this is what it looks

151
00:16:45,940 --> 00:16:51,410
like so this defines a code object and
it's the same stuff I shouldn't the

152
00:16:51,410 --> 00:16:55,770
other side these are our instructions
for the photons 20 which is our string

153
00:16:55,770 --> 00:16:56,920
HelloWorld

154
00:16:56,920 --> 00:17:03,900
vote on swine return so we can just go
up here and say that the strength say

155
00:17:03,900 --> 00:17:10,760
hello little no icon definitely didn't
misspell know what I know we can write

156
00:17:10,760 --> 00:17:19,459
back and we can do make py whole world
and that we're on hello world do I see

157
00:17:19,459 --> 00:17:24,020
it works in building back into a valid
code objected that runs in the Python

158
00:17:24,020 --> 00:17:34,300
via that's good what made it through the
whole damn right now we're going to get

159
00:17:34,300 --> 00:17:38,080
into the fun part where we've got to
break the compilers and assemblies so

160
00:17:38,080 --> 00:17:43,310
the first thing that I wanted to try was
how can I just get rid of function names

161
00:17:43,310 --> 00:17:48,620
in the compiler so if somebody tries to
decompile my code they won't be able to

162
00:17:48,620 --> 00:17:50,860
figure out which functions getting
called where they will be able to figure

163
00:17:50,860 --> 00:17:56,459
out the functions are so we're going to
take a really simple python script those

164
00:17:56,460 --> 00:17:57,779
two functions

165
00:17:57,779 --> 00:18:05,029
and we're gonna make it to the D
compilers can either just not out with

166
00:18:05,029 --> 00:18:13,519
the news that all of them incorrectly so
this is our python script was very

167
00:18:13,519 --> 00:18:25,729
avoidable coulda just said script in
fact I did in the slide but we have a

168
00:18:25,729 --> 00:18:29,639
function function one that this is the
first function as a function that's just

169
00:18:29,639 --> 00:18:55,059
what we call function function too so we
are so we have our two functions WI go

170
00:18:55,059 --> 00:19:08,389
ahead and compile it executes and if we
compile it with an compiled to is the

171
00:19:08,389 --> 00:19:23,158
best place to buy out there it gives us
literally the source code oxide deposit

172
00:19:23,159 --> 00:19:35,320
pretty much perfectly but now if we
disassemble it I don't understand how

173
00:19:35,320 --> 00:19:49,359
that sounds so that the same way other
than we can go and play was so we're

174
00:19:49,359 --> 00:19:56,158
just going to delete the function in the
absence of research for function one and

175
00:19:56,159 --> 00:19:59,159
delete it then search for

176
00:19:59,810 --> 00:20:12,139
him to handle it and then we make that
now that we've run still works

177
00:20:12,140 --> 00:20:15,430
still the exact same out but they were
being we're expecting physostigmine

178
00:20:15,430 --> 00:20:22,680
called in the same way but if we're on
on compile on it we have two functions

179
00:20:22,680 --> 00:20:26,900
that just don't have names so the
function definitions get totally messed

180
00:20:26,900 --> 00:20:36,450
up but yea knowing so the compile takes
the name from the code object where as

181
00:20:36,450 --> 00:20:41,540
you can see down here the names are
still there so it stores the names in

182
00:20:41,540 --> 00:20:46,129
the code objects and in the list of
names for the functions are going to be

183
00:20:46,130 --> 00:20:48,810
called and you can just delete the ones
in the code objects and make them not

184
00:20:48,810 --> 00:20:55,030
output as long as you keep them in the
list of names and they're still going

185
00:20:55,030 --> 00:20:57,320
crazy because they're actually being
called by index rather than by their

186
00:20:57,320 --> 00:21:14,159
name but you can also the name the name
is just are there for a debug output but

187
00:21:14,160 --> 00:21:19,300
the way that they wrote the Decompiler
that's how they can also just deleted

188
00:21:19,300 --> 00:21:24,730
here you can have two things with the
same name in one code object going to

189
00:21:24,730 --> 00:21:30,670
local variables of the same name but you
can't have to the global variables but

190
00:21:30,670 --> 00:21:34,500
you can have one just like face and it
won't care so we can just delete those

191
00:21:34,500 --> 00:21:37,500
names and then

192
00:21:49,740 --> 00:22:16,059
I think that's a really good I'm not
very good with computers so if we make

193
00:22:16,059 --> 00:22:39,720
this again nancy ok we can run it still
works but if we compile it now this is

194
00:22:39,720 --> 00:22:42,630
what we have two functions that don't
have names and then we opposed to just

195
00:22:42,630 --> 00:22:50,809
white space though that seems fine now
this was a side that I was supposed to

196
00:22:50,809 --> 00:22:56,500
show before I switched over to their
once again I take no responsibility for

197
00:22:56,500 --> 00:23:03,900
the imagery in the stock except for the
pictures of my dog but with my mom died

198
00:23:03,900 --> 00:23:07,610
so I took the first one the one from
2004 I did not take the one from this

199
00:23:07,610 --> 00:23:16,309
past summer I can find pictures of me
taking the picture now we're gonna start

200
00:23:16,309 --> 00:23:21,410
dealing with actually modifying the
bytecode instructions instead of just

201
00:23:21,410 --> 00:23:25,870
some of the values and the college X so
we're gonna introduce my favorite

202
00:23:25,870 --> 00:23:29,120
instruction in all advice on which is
called extended argh

203
00:23:30,510 --> 00:23:35,220
as I mentioned earlier Python
instructions can be up to three bites

204
00:23:35,220 --> 00:23:39,190
that's one for the opcode into for the
argument but sometimes you need an

205
00:23:39,190 --> 00:23:44,330
argument that is larger than 16 bits so
they introduced this instruction called

206
00:23:44,330 --> 00:23:48,909
extended art which lets you set the
upper 16 bits of the next instruction to

207
00:23:48,910 --> 00:23:50,390
be executed

208
00:23:50,390 --> 00:23:54,060
does it takes the current operation
argument

209
00:23:54,060 --> 00:23:57,919
shifted over 16 bits and or is it with
the next one so that when i execute the

210
00:23:57,920 --> 00:24:03,990
next one has a full 32 bit still then
this is fun for a couple reasons that

211
00:24:03,990 --> 00:24:07,620
lets us use really large values
arguments which is fine that's what it

212
00:24:07,620 --> 00:24:12,489
was intended for it also lets us use
negative values as arguments I haven't

213
00:24:12,490 --> 00:24:20,190
dug that deeply into how Python actually
compiled it but I have never ever seen

214
00:24:20,730 --> 00:24:27,940
standard Python code output a negative
argument value as a result a lot of

215
00:24:27,940 --> 00:24:31,260
compilers into some words do not know
how to deal actually every single

216
00:24:31,260 --> 00:24:35,379
disassembler and Decompiler does not
know how to deal with a negative are

217
00:24:35,380 --> 00:24:38,510
gonna tell you and it can also be
changed pretty much indefinitely without

218
00:24:38,510 --> 00:24:41,990
usually impacting the program's
execution is always doing is shifting an

219
00:24:41,990 --> 00:24:48,100
orange shifting nori nori and it's just
fall off the end as you're doing that so

220
00:24:48,100 --> 00:24:55,929
we're going to use a negative hard to
create an infinite loop and we're going

221
00:24:55,930 --> 00:25:00,070
to see how the December deals with it so
I have this program here

222
00:25:00,910 --> 00:25:09,970
negative jump which has a strange fellow
forever to load the princess

223
00:25:10,780 --> 00:25:17,470
extended our FFF and then jump forward
FFF I'll do it this is actually doing is

224
00:25:17,470 --> 00:25:21,380
saying jump forward negative 11 bites
which is back to the very start of the

225
00:25:21,380 --> 00:25:32,350
program so we make this and then run it
it does exactly what we would expect it

226
00:25:32,350 --> 00:25:39,399
to do it as Prince the stuff ever over
if we disassemble it with this which is

227
00:25:39,400 --> 00:25:42,400
the built in Python module

228
00:25:46,230 --> 00:25:54,610
I don't renew I but then we have jumped
forward to this address is not quite

229
00:25:54,610 --> 00:25:58,590
where we're actually jumping too because
the disassembler does not actually take

230
00:25:58,590 --> 00:26:00,790
whether it's under not into account

231
00:26:00,790 --> 00:26:10,170
so this is the code from the
disassembler for dealing with extended

232
00:26:10,170 --> 00:26:17,110
args what they do is they just take the
current argument and then if thats

233
00:26:17,110 --> 00:26:20,770
extended argues they multiply it I don't
know why they don't just shifted or if

234
00:26:20,770 --> 00:26:27,840
that works but they multiply it because
that's faster and they added to the

235
00:26:27,840 --> 00:26:34,050
current argument so and since this is a
python number and not a 32 bit integer

236
00:26:34,050 --> 00:26:38,110
see Python using a thirty two-bit signed
integer this just keeps getting bigger

237
00:26:38,110 --> 00:26:41,040
and bigger and bigger and bigger and
bigger if you put a lot of them together

238
00:26:41,040 --> 00:26:45,129
whereas in Python is actually executing
bitter just falling off the engines are

239
00:26:45,130 --> 00:26:48,670
being shifted and it's only a 32 bit
sign value

240
00:26:55,340 --> 00:26:58,899
have not met any of the ones other than
I do want to look into them though so

241
00:26:58,900 --> 00:27:04,960
now we're gonna use negative in negative
argues for Texas there's the spawn

242
00:27:04,960 --> 00:27:11,230
instruction followed closer and which is
used for loading closures but what it

243
00:27:11,230 --> 00:27:16,610
does is it takes the current argument
and it uses it as an index in an array

244
00:27:16,610 --> 00:27:22,479
without doing any checking on what the
value is and then it pushes that value

245
00:27:22,480 --> 00:27:32,270
to the stack so and use this as an index
in this array of Python objects called

246
00:27:32,270 --> 00:27:38,590
free barre's forces it to the stack and
then continues so we look at where

247
00:27:38,590 --> 00:27:44,250
previous setup free of ours this
variable called fast locals which is the

248
00:27:44,250 --> 00:27:49,010
array of all the local variables and
then free of ours is just the locals

249
00:27:49,010 --> 00:27:53,370
plus the number of locals so it's it's
immediately after the locals in memory

250
00:27:53,370 --> 00:27:59,959
so if we give it a negative index then
we can go backwards into the local

251
00:27:59,960 --> 00:28:03,410
variables and mess with those without
making it apparent that doesn't we're

252
00:28:03,410 --> 00:28:17,140
doing so gonna do I was

253
00:28:17,140 --> 00:28:32,130
pictures so I have this program here
which does it loads the first Johnson

254
00:28:32,130 --> 00:28:37,400
and its start the store fast this is for
storing in a local variable so is the

255
00:28:37,400 --> 00:28:41,380
store fat zero which says set whatever
is on the top of the sack as local

256
00:28:41,380 --> 00:28:43,430
variable 0

257
00:28:43,430 --> 00:28:50,950
get stored in fast local 09 we do extend
our FFO load closer FFF so we're just

258
00:28:50,950 --> 00:28:54,990
getting word basically to unload closer
negative one so it's gonna go backwards

259
00:28:54,990 --> 00:28:59,590
and its gonna hold a variable out of the
local variables and put it onto the

260
00:28:59,590 --> 00:29:08,590
stack so we make those are fun you know
we run it

261
00:29:08,590 --> 00:29:18,209
networks is just a sample however if we
disassemble it it just crashes because

262
00:29:18,210 --> 00:29:23,590
it thinks we're trying to load the
variable with this index and that is not

263
00:29:23,590 --> 00:29:28,669
in there so it just freaks out crashes
if you try to compile it I think it just

264
00:29:28,670 --> 00:29:31,810
doesn't even give you the start of it
just

265
00:29:31,810 --> 00:29:41,149
that's fun that I actually did have the
slide in there I just did not realize

266
00:29:41,150 --> 00:29:47,920
that school right now we're going to try
using really big operation darkness so

267
00:29:47,920 --> 00:29:52,400
as I mentioned you can put a bunch of
extended arms back to back to back to

268
00:29:52,400 --> 00:29:56,030
back and see Python will still run
pretty fast because all its doing is

269
00:29:56,030 --> 00:30:06,500
shifting an orange shifting its one
where does that count starts with AC so

270
00:30:06,500 --> 00:30:12,310
if we take a hello world and we just put
a bunch of extended args before all of

271
00:30:12,310 --> 00:30:14,050
the code for the whole world

272
00:30:14,050 --> 00:30:24,460
we'll see what happens so open up our
hello world Wis I'm from earlier we have

273
00:30:24,460 --> 00:30:30,650
this load constancy rose print item
costs or just gonna put

274
00:30:32,060 --> 00:30:44,830
1044 United extended our effort and then
after all those are done running was an

275
00:30:44,830 --> 00:30:47,659
extended are 20 to clear the upper
sixteen-bit so that they're not sold us

276
00:30:47,660 --> 00:31:02,130
out and then we have the actual go to
the program so if we read this then we

277
00:31:02,130 --> 00:31:08,650
run it is still the same program is the
still execute super fast but if we try

278
00:31:08,650 --> 00:31:21,720
to disassemble it was showed us this is
how guns for every single extended are

279
00:31:21,720 --> 00:31:25,900
going there it makes the number bigger
and bigger and bigger and bigger every

280
00:31:25,900 --> 00:31:30,840
single time I know exactly how I wrote
this run for at least 30 seconds if it

281
00:31:30,840 --> 00:31:34,439
at the end it just crashes so it doesn't
before it even gets to the code that we

282
00:31:34,440 --> 00:31:41,660
actually wanted to execute well so what
this number is what it's gonna try to

283
00:31:41,660 --> 00:31:47,840
use as the index to get the string for
hello world does it it does yeah there

284
00:31:47,840 --> 00:31:48,260
we go

285
00:31:48,260 --> 00:31:52,550
turns out that into an index as integer
believe it or not

286
00:31:57,030 --> 00:32:08,680
appended to the start of your code and
it will completely the December so now

287
00:32:08,680 --> 00:32:13,840
this is my favorite part were able to
just put a bunch of extended are you at

288
00:32:13,840 --> 00:32:18,740
the start of our program and have it
break the disassembler hours but still

289
00:32:18,740 --> 00:32:26,980
the fairly fast but we can also hide
code inside extended args so repeat

290
00:32:26,980 --> 00:32:30,570
extended arms are essentially not slides
because we're just shifting

291
00:32:30,570 --> 00:32:37,770
off the Antinori yeah forgot that we put
that picture in there can you spot the

292
00:32:37,770 --> 00:32:44,470
code inside all of the extended are but
what we can do is we can put

293
00:32:44,470 --> 00:32:51,740
instructions inside the arguments for
extended dogs and then we can jump back

294
00:32:51,740 --> 00:32:57,640
not to an extent as ours but to the
offset of an instruction which is the

295
00:32:57,640 --> 00:33:04,650
argument for an extended so if we look
at the cold like this we have each of

296
00:33:04,650 --> 00:33:10,120
the blue box announced to one of the
instructions on the left so just extend

297
00:33:10,120 --> 00:33:14,689
our deepest and darkest underdogs and
then at the end has this jump forward

298
00:33:14,690 --> 00:33:20,330
negative the size of the code which
jumps back and starts executing address

299
00:33:20,330 --> 00:33:29,010
10 which is the argument for the
extended arcs so if you look at the code

300
00:33:29,010 --> 00:33:30,879
from Madras

301
00:33:30,880 --> 00:33:37,030
just one is actually load const knob
jump forward print item jump forward for

302
00:33:37,030 --> 00:33:38,360
a new line jump forward

303
00:33:38,360 --> 00:33:43,729
const return value which is a hello
world so I actually wrote a script that

304
00:33:43,730 --> 00:33:54,080
will just let me take a Python script so
if I make a new SIM them

305
00:33:56,679 --> 00:34:05,509
to make a make a new hello world because
the other one still messed up by this

306
00:34:05,509 --> 00:34:12,280
point while I was extended ours

307
00:34:15,679 --> 00:34:38,819
cool I did at that time now we take this
imports alone and then we can run the

308
00:34:38,819 --> 00:34:49,159
script that I wrote called extend me .
view I give it to get this in because

309
00:34:49,159 --> 00:34:55,819
I'm bad at naming things I'll put it as
WIC . OBF which is obligated but which

310
00:34:55,819 --> 00:35:01,020
it turns out of school doesn't actually
doesn't actually like that was like

311
00:35:01,020 --> 00:35:16,780
three so gonna move this to an actual in
behind a lot of that

312
00:35:21,180 --> 00:35:24,180
WIC

313
00:35:29,619 --> 00:35:36,730
that's a really good idea so if I run
demo waz at execuse exactly like the

314
00:35:36,730 --> 00:35:52,349
script I just wrote however I do once
again we got all of this and it and it

315
00:35:52,349 --> 00:35:56,359
doesn't end with an error so it outputs
all of the instructions but the very

316
00:35:56,359 --> 00:36:03,270
last instruction that outputs is jump
forward to this address if you actually

317
00:36:03,270 --> 00:36:08,009
my favorite part is when you make the
terminal for a little bit smaller here

318
00:36:08,010 --> 00:36:34,119
so we can see all of what actually
outputs goes for a while I wanted to try

319
00:36:34,119 --> 00:36:39,160
to make it so that it could draw a
picture once you zoomed out with all of

320
00:36:39,160 --> 00:36:44,549
the of the numbers without putting I
could rally couple trying to sleep at it

321
00:36:44,549 --> 00:36:47,549
from the left

322
00:36:50,460 --> 00:36:54,430
that's all that I have for that part of
the presentation they may have any

323
00:36:54,430 --> 00:37:12,609
questions you asked earlier so I haven't
tried this with Jeff honor IronPython or

324
00:37:12,609 --> 00:37:19,359
anything like that but I'm going to
guess that if they implement extended

325
00:37:19,359 --> 00:37:24,950
argues the same way that they're going
to be using fixed 32 bit integers denied

326
00:37:24,950 --> 00:37:31,290
and opened up a 32 bit integer Java 32
bit integer decide whether you like it

327
00:37:31,290 --> 00:37:38,520
or not so if they find exactly the same
way with the shifting ignoring then it

328
00:37:38,520 --> 00:37:46,359
should execute the exact same way that
she does and if they're able to parse Q

329
00:37:46,359 --> 00:37:50,049
hace files I don't know if they see
realized there by code into like a

330
00:37:50,050 --> 00:37:55,260
different format if the conduct is
exactly the same in there taking PYC

331
00:37:55,260 --> 00:37:58,260
files and it should

332
00:38:06,550 --> 00:38:14,140
you actually do any of those so you
don't need the name last name of the

333
00:38:14,140 --> 00:38:18,859
module name and the filename so those
are output when you crash site on it

334
00:38:18,860 --> 00:38:25,140
says that failed here and here you don't
need those but the of our names and the

335
00:38:25,140 --> 00:38:30,370
actual names you do need all the time
you can make them just white space I was

336
00:38:30,370 --> 00:38:34,440
making something the other day where at
the end I just had one variable that it

337
00:38:34,440 --> 00:38:37,620
would just print out to the screen and
the variables name was just a control

338
00:38:37,620 --> 00:38:42,880
character to clear the screen so
whenever anybody tried to decompile it

339
00:38:42,880 --> 00:38:59,900
was just clear screen i'd have not doing
that but alright anybody else have any

340
00:38:59,900 --> 00:39:02,900
questions about Python

341
00:39:05,780 --> 00:39:11,750
thank you for letting me stand up here
and rants about price on load drinking

342
00:39:11,750 --> 00:39:12,030
too much

