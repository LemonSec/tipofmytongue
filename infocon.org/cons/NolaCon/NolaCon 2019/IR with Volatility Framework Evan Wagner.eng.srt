1
00:00:00,030 --> 00:00:06,029
welcome and thank you everybody for

2
00:00:01,260 --> 00:00:09,990
coming to this talk this is I are with a

3
00:00:06,029 --> 00:00:13,580
volatility framework my name is Evan

4
00:00:09,990 --> 00:00:16,830
Wagner my twitter handle is bun 0 XD

5
00:00:13,580 --> 00:00:18,800
i've been working in security since 2013

6
00:00:16,830 --> 00:00:21,330
when I started working at pearl x''k

7
00:00:18,800 --> 00:00:23,760
technologies there the form of DDoS

8
00:00:21,330 --> 00:00:26,909
mitigation service in the world at the

9
00:00:23,760 --> 00:00:29,460
time I got my first domain name in 1999

10
00:00:26,910 --> 00:00:32,099
started hosting websites and stuff and

11
00:00:29,460 --> 00:00:35,100
you know I held a variety of IT roles

12
00:00:32,098 --> 00:00:38,910
since like such as Tier three systems

13
00:00:35,100 --> 00:00:43,320
engineer and software engineer - you

14
00:00:38,910 --> 00:00:46,589
know senior Software Architect and see

15
00:00:43,320 --> 00:00:49,950
and security admin other roles as anyone

16
00:00:46,590 --> 00:00:54,870
in the room use volatility before we got

17
00:00:49,950 --> 00:01:00,449
any incident responders in here alright

18
00:00:54,870 --> 00:01:02,640
so basically you know the way I got into

19
00:01:00,449 --> 00:01:05,880
volatility is essentially I didn't have

20
00:01:02,640 --> 00:01:08,939
access to fancy EDR tools at a former

21
00:01:05,880 --> 00:01:09,899
company and I needed something to be

22
00:01:08,939 --> 00:01:12,630
able to determine what had actually

23
00:01:09,900 --> 00:01:15,119
happened on the machines when

24
00:01:12,630 --> 00:01:17,970
investigating an incident so that seemed

25
00:01:15,119 --> 00:01:21,930
to be the only tool at the time but just

26
00:01:17,970 --> 00:01:24,090
a quick disclaimer these processes bring

27
00:01:21,930 --> 00:01:27,299
inherent risk it should always be

28
00:01:24,090 --> 00:01:29,640
performed in a segmented / isolated

29
00:01:27,299 --> 00:01:32,250
environment the tools mentioned in this

30
00:01:29,640 --> 00:01:34,320
presentation do not have come with a

31
00:01:32,250 --> 00:01:37,320
guarantee or warranty implied or

32
00:01:34,320 --> 00:01:43,829
otherwise and the statements made are my

33
00:01:37,320 --> 00:01:45,298
own and not that of my employer okay so

34
00:01:43,829 --> 00:01:46,829
what's the start real quick and we'll go

35
00:01:45,299 --> 00:01:49,220
over what volatility is and some of the

36
00:01:46,829 --> 00:01:51,449
functionality and how you use it

37
00:01:49,220 --> 00:01:55,829
basically bolsillo T was you know over

38
00:01:51,450 --> 00:01:59,759
the top released at blackhat / Def Con

39
00:01:55,829 --> 00:02:01,880
in 2007 supported by the volatility

40
00:01:59,759 --> 00:02:04,500
foundation there'd be some links in here

41
00:02:01,880 --> 00:02:06,570
that you can go to and they they

42
00:02:04,500 --> 00:02:09,139
encourage our researchers to to

43
00:02:06,570 --> 00:02:12,569
contribute they they host annual

44
00:02:09,139 --> 00:02:13,559
volatility plug-in challenges and so if

45
00:02:12,569 --> 00:02:15,329
you have a really cool light

46
00:02:13,560 --> 00:02:17,010
for a plug-in or anything and you should

47
00:02:15,330 --> 00:02:18,900
submit it on there or try to get a hold

48
00:02:17,010 --> 00:02:20,280
of them and you know try to get try to

49
00:02:18,900 --> 00:02:22,440
make a plug-in and try to get it merged

50
00:02:20,280 --> 00:02:23,250
in at some point if you can a lot of the

51
00:02:22,440 --> 00:02:24,720
plugins

52
00:02:23,250 --> 00:02:27,660
there's tons of plugins out there that

53
00:02:24,720 --> 00:02:29,819
are not included in the releases on

54
00:02:27,660 --> 00:02:31,829
github like in the standard release so

55
00:02:29,819 --> 00:02:36,299
there you can basically go through the

56
00:02:31,830 --> 00:02:38,130
volatility challenges website and get an

57
00:02:36,300 --> 00:02:39,540
idea of what some of the items are that

58
00:02:38,130 --> 00:02:44,340
are really actually pretty good that are

59
00:02:39,540 --> 00:02:45,870
not included in the default package it's

60
00:02:44,340 --> 00:02:49,459
written in Python which allows for a

61
00:02:45,870 --> 00:02:52,200
great you know cross OS compatibility

62
00:02:49,459 --> 00:02:56,310
and there's a lot of plugins for the

63
00:02:52,200 --> 00:02:58,649
analyst to go over all right so why

64
00:02:56,310 --> 00:03:00,239
would you want to use volatility okay so

65
00:02:58,650 --> 00:03:01,590
this will give you a verbatim view of

66
00:03:00,239 --> 00:03:03,000
the running environment on the machine

67
00:03:01,590 --> 00:03:07,799
at the time depending on the acquisition

68
00:03:03,000 --> 00:03:10,470
method you know increasingly malware

69
00:03:07,799 --> 00:03:13,980
won't even touch won't touch the disk if

70
00:03:10,470 --> 00:03:17,519
it does it's normally temporary and then

71
00:03:13,980 --> 00:03:20,578
erased or time stomped afterwards so you

72
00:03:17,519 --> 00:03:22,590
know that you know malware authors and

73
00:03:20,579 --> 00:03:26,070
bad actors are going to try to cover

74
00:03:22,590 --> 00:03:27,690
their tracks so you know by having a

75
00:03:26,070 --> 00:03:29,430
copy of the memory at the point in time

76
00:03:27,690 --> 00:03:31,140
you know right as you begin your

77
00:03:29,430 --> 00:03:34,200
investigation you really are doing

78
00:03:31,140 --> 00:03:36,480
yourself a benefit you know they're

79
00:03:34,200 --> 00:03:37,738
gonna there's all kinds of you can you

80
00:03:36,480 --> 00:03:39,119
know observe network connections involve

81
00:03:37,739 --> 00:03:42,120
city but they're basically gonna just

82
00:03:39,120 --> 00:03:43,739
exfiltrate data over known good reputed

83
00:03:42,120 --> 00:03:45,480
sources you know so they're either gonna

84
00:03:43,739 --> 00:03:48,269
launch their attack via the ad network

85
00:03:45,480 --> 00:03:50,578
or people CDN or you know try to exploit

86
00:03:48,269 --> 00:03:52,500
raid over over you know Facebook blog

87
00:03:50,579 --> 00:03:53,940
whatever means that they can there's a

88
00:03:52,500 --> 00:03:56,100
ton of cloud providers that are just

89
00:03:53,940 --> 00:04:00,000
white list that you could just go go to

90
00:03:56,100 --> 00:04:01,829
town the data is decoded out of the

91
00:04:00,000 --> 00:04:03,630
image or other source and checked it

92
00:04:01,829 --> 00:04:05,720
into another process and then

93
00:04:03,630 --> 00:04:08,340
exfiltrated over secure channels so

94
00:04:05,720 --> 00:04:10,920
basically whenever they you know go one

95
00:04:08,340 --> 00:04:12,359
of these you know well reputed websites

96
00:04:10,920 --> 00:04:16,260
they could just download an image on

97
00:04:12,359 --> 00:04:19,709
blogspot for example and then extract

98
00:04:16,260 --> 00:04:22,800
the base64 encoded payload execute that

99
00:04:19,709 --> 00:04:24,419
and then you know basically just it's

100
00:04:22,800 --> 00:04:25,919
gone afterwards the temporary internet

101
00:04:24,419 --> 00:04:27,150
files have a lifetime and it just looks

102
00:04:25,919 --> 00:04:28,710
like an image

103
00:04:27,150 --> 00:04:30,030
you know without digging deeper you're

104
00:04:28,710 --> 00:04:33,090
not gonna understand what how they

105
00:04:30,030 --> 00:04:34,650
attack actually occurred you know and

106
00:04:33,090 --> 00:04:36,929
like I was saying before when you when

107
00:04:34,650 --> 00:04:38,429
you don't have you know tools like sis

108
00:04:36,930 --> 00:04:42,660
Mon which will give you the high

109
00:04:38,430 --> 00:04:45,960
verbosity logs EDR etc you really owe it

110
00:04:42,660 --> 00:04:47,370
to yourself to learn volatility to be

111
00:04:45,960 --> 00:04:49,229
able to just you know go at the memory

112
00:04:47,370 --> 00:04:54,180
image and try to extract as much

113
00:04:49,229 --> 00:04:57,630
information as you can so the package

114
00:04:54,180 --> 00:04:59,250
availability of volatility basically

115
00:04:57,630 --> 00:05:00,810
volatility by default distributed as a

116
00:04:59,250 --> 00:05:03,600
Python application that you can download

117
00:05:00,810 --> 00:05:05,220
off the github URL there then in the

118
00:05:03,600 --> 00:05:08,970
examples going forward that's that's

119
00:05:05,220 --> 00:05:10,169
basically the preferred method so all my

120
00:05:08,970 --> 00:05:13,820
examples are essentially just using the

121
00:05:10,169 --> 00:05:16,049
vault hi you can download the binary

122
00:05:13,820 --> 00:05:18,710
Stanwell binaries for the different

123
00:05:16,050 --> 00:05:23,479
operating systems at this following URL

124
00:05:18,710 --> 00:05:26,698
and they're they're pretty decent too

125
00:05:23,479 --> 00:05:29,460
there's also in some cases you know

126
00:05:26,699 --> 00:05:31,860
Linux forensic distros that'll have you

127
00:05:29,460 --> 00:05:34,500
know volatility in them this is the

128
00:05:31,860 --> 00:05:37,500
least preferred method because they

129
00:05:34,500 --> 00:05:39,389
normally have incomplete profile sets so

130
00:05:37,500 --> 00:05:41,070
you know it's if you're running into

131
00:05:39,389 --> 00:05:42,599
issues you can't you you know you're

132
00:05:41,070 --> 00:05:43,680
seeing strange characters you're not you

133
00:05:42,599 --> 00:05:45,150
know you don't you're not all the

134
00:05:43,680 --> 00:05:46,919
profiles that you're attempting or not

135
00:05:45,150 --> 00:05:49,979
working sometimes it's because the

136
00:05:46,919 --> 00:05:51,840
profiles not present and that route what

137
00:05:49,979 --> 00:05:53,639
you know the release that you have

138
00:05:51,840 --> 00:05:55,469
either it's from the if it's from a

139
00:05:53,639 --> 00:05:59,039
distribution typically they don't come

140
00:05:55,470 --> 00:06:00,479
with all the profiles recall framework

141
00:05:59,039 --> 00:06:03,060
is anybody familiar with recall

142
00:06:00,479 --> 00:06:05,370
framework in here alright yeah yeah

143
00:06:03,060 --> 00:06:07,650
recall framework is really good for live

144
00:06:05,370 --> 00:06:09,720
memory analysis so when you get on the

145
00:06:07,650 --> 00:06:11,609
machine and you can run majority of the

146
00:06:09,720 --> 00:06:13,919
commands that are available in

147
00:06:11,610 --> 00:06:15,449
volatility they have their own I don't

148
00:06:13,919 --> 00:06:18,180
know if they call DQ elders like there's

149
00:06:15,449 --> 00:06:19,940
a query language that they have now for

150
00:06:18,180 --> 00:06:22,770
writing queries to select information

151
00:06:19,940 --> 00:06:25,770
this is good in circumstances where you

152
00:06:22,770 --> 00:06:27,150
know the memory is really large or you

153
00:06:25,770 --> 00:06:29,880
know you just can't you can't move the

154
00:06:27,150 --> 00:06:32,760
memory image and there's also live

155
00:06:29,880 --> 00:06:34,710
memory of P mem tools out there as well

156
00:06:32,760 --> 00:06:37,020
that'll basically load a driver to allow

157
00:06:34,710 --> 00:06:38,349
you to query the RAM in real time as

158
00:06:37,020 --> 00:06:40,938
well

159
00:06:38,349 --> 00:06:42,740
okay we'll just go over a few

160
00:06:40,939 --> 00:06:46,310
terminology things terminology things

161
00:06:42,740 --> 00:06:48,439
here so there's gonna be you know you

162
00:06:46,310 --> 00:06:51,319
when you're doing memory analysis on a

163
00:06:48,439 --> 00:06:52,969
memory image you need to have the

164
00:06:51,319 --> 00:06:55,280
correct profile select that the profile

165
00:06:52,969 --> 00:06:57,740
actually includes all the debug symbols

166
00:06:55,280 --> 00:07:00,710
that are necessary to actually

167
00:06:57,740 --> 00:07:02,120
understand what a process looks like in

168
00:07:00,710 --> 00:07:04,159
RAM what a network connection looks like

169
00:07:02,120 --> 00:07:07,039
I would open file looks like in RAM you

170
00:07:04,159 --> 00:07:08,150
know what a mutex looks like in RAM I'll

171
00:07:07,039 --> 00:07:10,400
you know all the different things that

172
00:07:08,150 --> 00:07:12,948
were that volatility searches for it has

173
00:07:10,400 --> 00:07:14,810
to have these debug symbols or it's not

174
00:07:12,949 --> 00:07:18,500
going to be able to just display them

175
00:07:14,810 --> 00:07:20,300
interpret them so you know this is this

176
00:07:18,500 --> 00:07:21,710
is basically the first thing that you

177
00:07:20,300 --> 00:07:23,900
have to figure out what profile is gonna

178
00:07:21,710 --> 00:07:27,109
load best or you got your memory image

179
00:07:23,900 --> 00:07:28,549
and you know there's all kinds of

180
00:07:27,110 --> 00:07:30,529
different builds of each operating

181
00:07:28,550 --> 00:07:34,400
system released so I think Windows 10

182
00:07:30,529 --> 00:07:36,529
has at least half-a-dozen build profiles

183
00:07:34,400 --> 00:07:38,568
at this point and it's hard to it's hard

184
00:07:36,529 --> 00:07:40,009
to keep up with for the volatility seem

185
00:07:38,569 --> 00:07:43,129
to keep up with so if anybody wants to

186
00:07:40,009 --> 00:07:45,610
contribute on the Windows 10 profiles

187
00:07:43,129 --> 00:07:45,610
I'll be cool

188
00:07:46,219 --> 00:07:51,710
the vad tree but this is the virtual

189
00:07:48,440 --> 00:07:55,310
address descriptor tree it maps physical

190
00:07:51,710 --> 00:07:58,818
and paged out memory pages so it's

191
00:07:55,310 --> 00:08:01,909
basically an address space that is

192
00:07:58,819 --> 00:08:03,800
mapping to the physical memory when it's

193
00:08:01,909 --> 00:08:05,659
still in physical rent memory but if

194
00:08:03,800 --> 00:08:07,849
it's been paged out it'll map to the

195
00:08:05,659 --> 00:08:10,240
page space so that way if while you're

196
00:08:07,849 --> 00:08:14,029
acquiring memory from a machine

197
00:08:10,240 --> 00:08:16,849
typically you know if you're using P mem

198
00:08:14,029 --> 00:08:19,669
it'll extract more than just physical

199
00:08:16,849 --> 00:08:22,339
memory so if you're extracting the page

200
00:08:19,669 --> 00:08:23,990
files and you're extracting hibernation

201
00:08:22,339 --> 00:08:26,330
files

202
00:08:23,990 --> 00:08:29,120
you know you you'll want to be able to

203
00:08:26,330 --> 00:08:33,439
actually map to the the page file itself

204
00:08:29,120 --> 00:08:36,110
where the artifact is ok so here's some

205
00:08:33,440 --> 00:08:37,849
considerations going forward what's the

206
00:08:36,110 --> 00:08:40,459
total physical RAM size for the machine

207
00:08:37,849 --> 00:08:42,709
that you're going to acquire the memory

208
00:08:40,458 --> 00:08:46,250
image from because it makes sense at all

209
00:08:42,708 --> 00:08:50,630
to actually dump and pull back a 128

210
00:08:46,250 --> 00:08:51,420
gigabyte RAM image can I get the memory

211
00:08:50,630 --> 00:08:54,209
back in a time

212
00:08:51,420 --> 00:08:56,430
Manor you know do I use compression

213
00:08:54,209 --> 00:08:59,729
these are all circumstances you know

214
00:08:56,430 --> 00:09:00,959
circumstantial to your environment so it

215
00:08:59,730 --> 00:09:05,010
doesn't really make sense in my opinion

216
00:09:00,959 --> 00:09:06,420
to move the 128 gig memory quad disk

217
00:09:05,010 --> 00:09:08,160
storage is there even enough disk

218
00:09:06,420 --> 00:09:09,660
storage on the machine to dump the

219
00:09:08,160 --> 00:09:11,519
physical RAM these are these are

220
00:09:09,660 --> 00:09:13,439
considerations you got to consider when

221
00:09:11,519 --> 00:09:15,420
you're you're doing IR on a machine you

222
00:09:13,440 --> 00:09:17,070
can you can impact the machine by

223
00:09:15,420 --> 00:09:18,959
dumping a large you know a large amount

224
00:09:17,070 --> 00:09:20,220
of RAM and then it runs out of space and

225
00:09:18,959 --> 00:09:25,920
the computer all of a sudden is not

226
00:09:20,220 --> 00:09:29,639
going to function well okay so we'll go

227
00:09:25,920 --> 00:09:32,729
through acquisition methods so I like

228
00:09:29,639 --> 00:09:39,449
the PMM tool you know there's a Linux OS

229
00:09:32,730 --> 00:09:42,420
x and win rikku repository on github

230
00:09:39,449 --> 00:09:45,839
actually has some good releases for pmm

231
00:09:42,420 --> 00:09:48,660
if you're looking for one that's you

232
00:09:45,839 --> 00:09:50,940
know gonna work for you the best they

233
00:09:48,660 --> 00:09:52,620
were there I believe there is a bug that

234
00:09:50,940 --> 00:09:54,779
was fixed in the Lin p.m. not too long

235
00:09:52,620 --> 00:09:56,100
ago that was causing it to download 38

236
00:09:54,779 --> 00:09:58,290
error I think that there was 38

237
00:09:56,100 --> 00:10:01,620
terabytes of RAM on the Linux machines

238
00:09:58,290 --> 00:10:04,680
which was an issues and crazy bug but

239
00:10:01,620 --> 00:10:06,029
that that's been fixed but these these

240
00:10:04,680 --> 00:10:08,160
tools are really great they they'll

241
00:10:06,029 --> 00:10:10,589
produce an AF f4 file the advanced

242
00:10:08,160 --> 00:10:12,420
forensics format file and it stores

243
00:10:10,589 --> 00:10:13,709
streams so you can have a stream in

244
00:10:12,420 --> 00:10:15,569
there that's literally files from the

245
00:10:13,709 --> 00:10:17,369
file system you can have a stream in

246
00:10:15,570 --> 00:10:18,660
there that's the page file you can have

247
00:10:17,370 --> 00:10:20,310
a stream in there that's the physical

248
00:10:18,660 --> 00:10:22,529
memory it's whatever streams that you

249
00:10:20,310 --> 00:10:23,760
want to include in there and you do

250
00:10:22,529 --> 00:10:26,189
analysis on later you can actually

251
00:10:23,760 --> 00:10:28,769
extract those different individual

252
00:10:26,190 --> 00:10:30,630
streams and work with them volatility

253
00:10:28,769 --> 00:10:34,529
does not work with the AFF for files

254
00:10:30,630 --> 00:10:38,069
recall for can work with those files so

255
00:10:34,529 --> 00:10:40,920
that's that's consideration to running

256
00:10:38,069 --> 00:10:44,339
pmm here's just a quick example the

257
00:10:40,920 --> 00:10:47,219
output dump AFF for or if you wanted to

258
00:10:44,339 --> 00:10:50,459
dump out a specific stream you could say

259
00:10:47,220 --> 00:10:53,100
- EE physical memory oh dumped out raw

260
00:10:50,459 --> 00:10:55,529
so you can then take the dump raw and

261
00:10:53,100 --> 00:10:57,710
work with that file in volatility

262
00:10:55,529 --> 00:11:00,960
framework

263
00:10:57,710 --> 00:11:02,670
so it's space and time constraints are

264
00:11:00,960 --> 00:11:04,260
an issue then definitely you're gonna

265
00:11:02,670 --> 00:11:06,449
want to use a tool kind of like recall

266
00:11:04,260 --> 00:11:10,140
where we call our similar tool if you

267
00:11:06,450 --> 00:11:11,550
know otherwise like I said you'll run

268
00:11:10,140 --> 00:11:13,530
out of time trying to copy the file back

269
00:11:11,550 --> 00:11:16,800
or you know some other strange

270
00:11:13,530 --> 00:11:18,600
circumstance when working with virtual

271
00:11:16,800 --> 00:11:21,569
machine images which I'm sure it's a

272
00:11:18,600 --> 00:11:25,410
concern VMware actually has a tool

273
00:11:21,570 --> 00:11:25,980
called vmss two core and there's the URL

274
00:11:25,410 --> 00:11:28,560
for it

275
00:11:25,980 --> 00:11:32,190
and that can take a snapshot file and a

276
00:11:28,560 --> 00:11:33,719
VM file and convert it into a ROM mem

277
00:11:32,190 --> 00:11:36,180
dump that you can then load into a

278
00:11:33,720 --> 00:11:37,860
volatility so that's a very useful tool

279
00:11:36,180 --> 00:11:41,430
and it's free to download you just go

280
00:11:37,860 --> 00:11:42,990
download on their site what's what's

281
00:11:41,430 --> 00:11:45,079
really good also is there's sample

282
00:11:42,990 --> 00:11:48,510
images on the volatility Foundation

283
00:11:45,080 --> 00:11:50,760
github page so this is the URL for that

284
00:11:48,510 --> 00:11:52,020
if you wanted to go download any of

285
00:11:50,760 --> 00:11:56,580
those they have some some pretty decent

286
00:11:52,020 --> 00:11:59,750
ones on there okay so now we're just

287
00:11:56,580 --> 00:12:04,200
gonna go over the basic usage of

288
00:11:59,750 --> 00:12:07,680
volatility okay so like I said I prefer

289
00:12:04,200 --> 00:12:10,320
to download the package just a zip file

290
00:12:07,680 --> 00:12:12,030
off of github and bring that down to

291
00:12:10,320 --> 00:12:13,590
just put it in my home directory and I

292
00:12:12,030 --> 00:12:15,959
just execute from there cuz Tildy

293
00:12:13,590 --> 00:12:19,500
volatility ball drop I and that just

294
00:12:15,960 --> 00:12:21,060
makes it easier for me there's also a

295
00:12:19,500 --> 00:12:22,950
local again we'll get into that by

296
00:12:21,060 --> 00:12:24,719
environmental variables that you can set

297
00:12:22,950 --> 00:12:27,270
to make the process a little bit easier

298
00:12:24,720 --> 00:12:31,200
as well so after you've downloaded and

299
00:12:27,270 --> 00:12:32,460
extracted volatility you're gonna want

300
00:12:31,200 --> 00:12:34,800
it you can list out all the

301
00:12:32,460 --> 00:12:36,630
functionality and features by just

302
00:12:34,800 --> 00:12:39,089
running vault up high python bought up

303
00:12:36,630 --> 00:12:41,970
by dash h and it'll give you an idea of

304
00:12:39,090 --> 00:12:44,220
what the supported types of files are

305
00:12:41,970 --> 00:12:46,920
like crashed on files and whatnot but

306
00:12:44,220 --> 00:12:49,080
also the supported profiles and all the

307
00:12:46,920 --> 00:12:51,780
different plugins that are available in

308
00:12:49,080 --> 00:12:56,970
that person that you downloaded off you

309
00:12:51,780 --> 00:13:00,270
know okay so list the plugins and

310
00:12:56,970 --> 00:13:03,820
profiles that do tack tack info

311
00:13:00,270 --> 00:13:05,290
and then they had it out you know when

312
00:13:03,820 --> 00:13:07,890
you have a memory image it's difficult

313
00:13:05,290 --> 00:13:11,890
sometimes to determine what the optimal

314
00:13:07,890 --> 00:13:14,680
profile build is so if you run the ball

315
00:13:11,890 --> 00:13:17,020
dot pi dash F on the mem dump file

316
00:13:14,680 --> 00:13:18,010
itself and then just say image info it

317
00:13:17,020 --> 00:13:19,870
will give you information about what

318
00:13:18,010 --> 00:13:22,360
what what it can understand interpret

319
00:13:19,870 --> 00:13:24,820
from the RAM image and via the current

320
00:13:22,360 --> 00:13:29,560
kernel debug scan my plugin will show

321
00:13:24,820 --> 00:13:31,660
you in a list of possible profiles that

322
00:13:29,560 --> 00:13:33,609
would actually work for your memory

323
00:13:31,660 --> 00:13:38,680
image to be able to understand the

324
00:13:33,610 --> 00:13:41,290
constructs in RAM okay so when you when

325
00:13:38,680 --> 00:13:44,770
you when you select the profile you just

326
00:13:41,290 --> 00:13:46,329
do tack F mem dump file and then your

327
00:13:44,770 --> 00:13:48,490
profile and I prefer file equals the

328
00:13:46,330 --> 00:13:50,650
name of the build itself and then you

329
00:13:48,490 --> 00:13:57,070
type the command so PS list for example

330
00:13:50,650 --> 00:13:58,480
here alright so now it's let's get into

331
00:13:57,070 --> 00:14:00,640
responding to incidents some of the

332
00:13:58,480 --> 00:14:05,650
modules that you'll that I find pretty

333
00:14:00,640 --> 00:14:08,110
useful for doing incidents objective

334
00:14:05,650 --> 00:14:12,310
discover malicious process artifacts and

335
00:14:08,110 --> 00:14:15,370
then dump them out so here's typically

336
00:14:12,310 --> 00:14:16,839
what you'll do when you're trying to get

337
00:14:15,370 --> 00:14:21,070
a list of all the processes you'll run

338
00:14:16,840 --> 00:14:23,160
the PS list the the PS tree PSX view and

339
00:14:21,070 --> 00:14:26,080
the in the proc dump

340
00:14:23,160 --> 00:14:28,420
so basically PS list will just show you

341
00:14:26,080 --> 00:14:30,040
what will happen in the standard PS list

342
00:14:28,420 --> 00:14:33,760
if you were to type it into your all on

343
00:14:30,040 --> 00:14:35,319
your operating system command line PS

344
00:14:33,760 --> 00:14:38,260
tree washes show the process execution

345
00:14:35,320 --> 00:14:40,150
tree the PSX view is really useful

346
00:14:38,260 --> 00:14:42,760
because what it'll do is it'll show you

347
00:14:40,150 --> 00:14:46,470
if a process is attempting to hide from

348
00:14:42,760 --> 00:14:50,590
PS list and see RSS and other types of

349
00:14:46,470 --> 00:14:52,210
processing numeration listing so PSX

350
00:14:50,590 --> 00:14:53,770
view is really good if you're trying to

351
00:14:52,210 --> 00:14:55,480
find a process that's trying to hide it

352
00:14:53,770 --> 00:15:02,710
in proc them can actually just dump out

353
00:14:55,480 --> 00:15:05,590
the processes volatility has a really

354
00:15:02,710 --> 00:15:09,010
good capability to actually dumped out

355
00:15:05,590 --> 00:15:10,990
network connections so if you know if a

356
00:15:09,010 --> 00:15:12,490
machine has been on for six months over

357
00:15:10,990 --> 00:15:13,960
a year or whatever it's not going to

358
00:15:12,490 --> 00:15:16,570
aggressively override

359
00:15:13,960 --> 00:15:19,630
these sections of ram unless it actually

360
00:15:16,570 --> 00:15:22,180
has two so you can you can go way back

361
00:15:19,630 --> 00:15:23,770
in time with network connections and

362
00:15:22,180 --> 00:15:25,569
other processes and everything and that

363
00:15:23,770 --> 00:15:26,710
that's very useful though if you're

364
00:15:25,570 --> 00:15:28,480
trying to investigate something that

365
00:15:26,710 --> 00:15:31,510
happened you know further back in the

366
00:15:28,480 --> 00:15:34,960
past so typical commands would be like

367
00:15:31,510 --> 00:15:37,870
con scan net scan sock scan and there's

368
00:15:34,960 --> 00:15:40,090
a few others that are available that are

369
00:15:37,870 --> 00:15:42,870
operating specific like for oh s X and

370
00:15:40,090 --> 00:15:42,870
Linux

371
00:15:43,590 --> 00:15:50,170
ok so file handles basically file

372
00:15:47,140 --> 00:15:53,080
handles are anything that's opened file

373
00:15:50,170 --> 00:15:54,280
handle can actually also be mutexes and

374
00:15:53,080 --> 00:15:55,990
other artifacts a network connection

375
00:15:54,280 --> 00:15:58,240
would actually also show up if you're

376
00:15:55,990 --> 00:15:59,980
invoking the TCP functionality will show

377
00:15:58,240 --> 00:16:01,150
up as a handle as well just won't show

378
00:15:59,980 --> 00:16:04,480
you the information about the connection

379
00:16:01,150 --> 00:16:06,130
itself LDR modules is really good it'll

380
00:16:04,480 --> 00:16:08,890
show you the modules that were loaded

381
00:16:06,130 --> 00:16:11,380
for all the different executables that

382
00:16:08,890 --> 00:16:13,390
ones that that one is very useful and

383
00:16:11,380 --> 00:16:15,130
I'll show you guys here in a little bit

384
00:16:13,390 --> 00:16:17,350
how you can use that to actually

385
00:16:15,130 --> 00:16:20,560
determine if malicious process injection

386
00:16:17,350 --> 00:16:23,350
actually occurred and then dump files

387
00:16:20,560 --> 00:16:24,790
you can actually dump out all of the

388
00:16:23,350 --> 00:16:26,530
file handles that weren't ramps will

389
00:16:24,790 --> 00:16:29,260
literally recover all their files that

390
00:16:26,530 --> 00:16:31,000
they had opened either currently or in

391
00:16:29,260 --> 00:16:33,490
the past that are still present in

392
00:16:31,000 --> 00:16:35,500
memory you can you can literally say

393
00:16:33,490 --> 00:16:39,370
dump files - D - choose the directory

394
00:16:35,500 --> 00:16:41,380
and then the - - s will produce a

395
00:16:39,370 --> 00:16:43,300
summary file because if you don't put

396
00:16:41,380 --> 00:16:46,540
the summary if you don't apply the

397
00:16:43,300 --> 00:16:47,829
summary at the argument there then what

398
00:16:46,540 --> 00:16:49,510
will happen is you'll just have a bunch

399
00:16:47,830 --> 00:16:51,460
of files that are named as the offset

400
00:16:49,510 --> 00:16:53,020
where they were had in RAM so you want

401
00:16:51,460 --> 00:16:58,630
the you want a little bit more context

402
00:16:53,020 --> 00:17:00,630
by adding the summary argument there and

403
00:16:58,630 --> 00:17:05,109
then malware it has some decent

404
00:17:00,630 --> 00:17:06,940
capabilities to detect malware mal find

405
00:17:05,109 --> 00:17:10,300
is really good what it looks for is the

406
00:17:06,940 --> 00:17:12,100
bad tree protection violations so they

407
00:17:10,300 --> 00:17:15,209
said on there that some you know that

408
00:17:12,099 --> 00:17:18,550
tree SEC now pages were only allowed

409
00:17:15,209 --> 00:17:20,830
read-only you know but and so if they

410
00:17:18,550 --> 00:17:22,540
violate that and they you know they

411
00:17:20,829 --> 00:17:25,599
changed the property to say that it's

412
00:17:22,540 --> 00:17:27,770
you know read write execute essentially

413
00:17:25,599 --> 00:17:29,000
then you then you know something strange

414
00:17:27,770 --> 00:17:30,590
possibly happening there but there's

415
00:17:29,000 --> 00:17:33,530
also a lot of false positives that can

416
00:17:30,590 --> 00:17:35,330
happen while doing that mod scan that's

417
00:17:33,530 --> 00:17:37,790
those are the drivers essentially that

418
00:17:35,330 --> 00:17:41,379
are loaded by the operating system any

419
00:17:37,790 --> 00:17:43,790
kind of API looks like OSAP eyehooks

420
00:17:41,380 --> 00:17:45,890
command scan and command line and

421
00:17:43,790 --> 00:17:47,510
consuls will attempt to recover some

422
00:17:45,890 --> 00:17:50,990
commands that were typed into the

423
00:17:47,510 --> 00:17:53,510
terminal those are really useful and

424
00:17:50,990 --> 00:17:55,070
timers you know like basically scheduled

425
00:17:53,510 --> 00:17:56,240
timers that are going off you know in

426
00:17:55,070 --> 00:17:58,220
the background that's another way that

427
00:17:56,240 --> 00:18:00,980
uh you know an adversary could get

428
00:17:58,220 --> 00:18:02,780
persistence and the systems service

429
00:18:00,980 --> 00:18:05,920
descriptor table as well to see if there

430
00:18:02,780 --> 00:18:09,080
could be any anomalous entries in there

431
00:18:05,920 --> 00:18:10,400
okay so basically after you've dumped

432
00:18:09,080 --> 00:18:11,480
out all these files that we see here you

433
00:18:10,400 --> 00:18:15,500
know we're just dumping them all out

434
00:18:11,480 --> 00:18:17,179
into txt files okay so what we're gonna

435
00:18:15,500 --> 00:18:19,730
do afterwards is there's there's a

436
00:18:17,179 --> 00:18:21,470
reason that you came to the machine like

437
00:18:19,730 --> 00:18:24,410
the user says hey my machine is

438
00:18:21,470 --> 00:18:26,780
exhibiting strange behavior or an alert

439
00:18:24,410 --> 00:18:28,460
fired or some some kind of strange of

440
00:18:26,780 --> 00:18:30,559
something stranger and almost occurred

441
00:18:28,460 --> 00:18:31,730
that's the reason you're looking at this

442
00:18:30,559 --> 00:18:34,428
that's the reason you came to the

443
00:18:31,730 --> 00:18:35,870
machine in the first place and so as

444
00:18:34,429 --> 00:18:38,360
you're dumping all these things out

445
00:18:35,870 --> 00:18:39,889
producing these text files you're gonna

446
00:18:38,360 --> 00:18:42,350
you're gonna want to actually grep

447
00:18:39,890 --> 00:18:43,670
across them essentially with whatever

448
00:18:42,350 --> 00:18:46,480
your indicators are if you have

449
00:18:43,670 --> 00:18:48,860
indicators so that's just something to

450
00:18:46,480 --> 00:18:51,320
you know to think about as well as

451
00:18:48,860 --> 00:18:52,760
you're going against the text column you

452
00:18:51,320 --> 00:18:54,860
know and once you observe any kind of

453
00:18:52,760 --> 00:18:56,960
indicators then then you need to pivot

454
00:18:54,860 --> 00:18:58,909
and start extracting files and you know

455
00:18:56,960 --> 00:19:01,400
providing pid' offset context to the

456
00:18:58,910 --> 00:19:04,040
commands to be able to get those

457
00:19:01,400 --> 00:19:06,260
artifacts out of memory so now we're

458
00:19:04,040 --> 00:19:11,570
gonna go over the narrowing on the air

459
00:19:06,260 --> 00:19:13,460
in on the criteria so so if you're you

460
00:19:11,570 --> 00:19:16,159
actually are dumping out say you know

461
00:19:13,460 --> 00:19:19,070
that the user downloaded an excel file

462
00:19:16,160 --> 00:19:21,380
or whatever you can actually say you can

463
00:19:19,070 --> 00:19:23,480
tell volatility to dump files out and

464
00:19:21,380 --> 00:19:24,679
then you can pass in a regular

465
00:19:23,480 --> 00:19:26,000
expression say I want to dump out all

466
00:19:24,679 --> 00:19:28,910
that cell that's all gonna dump out all

467
00:19:26,000 --> 00:19:31,370
exe files gonna dump out all the you

468
00:19:28,910 --> 00:19:33,860
know DLL CSV you know you can you can

469
00:19:31,370 --> 00:19:35,239
actually apply that logic there and dump

470
00:19:33,860 --> 00:19:38,000
those out and then when you do find a

471
00:19:35,240 --> 00:19:40,730
process that specific that you do want

472
00:19:38,000 --> 00:19:41,420
to dump out you can you what you'll do

473
00:19:40,730 --> 00:19:44,930
is you'll use the

474
00:19:41,420 --> 00:19:46,760
Proc dump module plugin and you specify

475
00:19:44,930 --> 00:19:50,270
a directory and then I typically will

476
00:19:46,760 --> 00:19:52,940
put the unsafe right here the unsafe and

477
00:19:50,270 --> 00:19:54,290
the memory and then I send all the data

478
00:19:52,940 --> 00:19:55,640
into another text file that just

479
00:19:54,290 --> 00:19:59,270
basically records everything that

480
00:19:55,640 --> 00:20:01,520
happened but if you don't add the - -

481
00:19:59,270 --> 00:20:03,560
surrounding memory the executable might

482
00:20:01,520 --> 00:20:05,000
be incomplete so you need to that's

483
00:20:03,560 --> 00:20:06,740
something that you that you need to be

484
00:20:05,000 --> 00:20:09,380
aware of that you'll need to have that

485
00:20:06,740 --> 00:20:11,120
there be a couple other little caveats

486
00:20:09,380 --> 00:20:12,830
like that where it's like these little

487
00:20:11,120 --> 00:20:20,229
argument switches will just totally

488
00:20:12,830 --> 00:20:20,230
change how you use the tool okay and so

489
00:20:21,400 --> 00:20:26,270
all right so you can also just dump

490
00:20:24,190 --> 00:20:28,940
registry out of that you can dump the

491
00:20:26,270 --> 00:20:32,090
cache you can dump certificates out of

492
00:20:28,940 --> 00:20:34,070
the memory you can you can dump all the

493
00:20:32,090 --> 00:20:35,419
registry highs if you need to go out you

494
00:20:34,070 --> 00:20:37,909
can actually query registry hives

495
00:20:35,420 --> 00:20:41,600
directly in volatility if you know the

496
00:20:37,910 --> 00:20:43,040
key path so and then you can dump the

497
00:20:41,600 --> 00:20:45,800
hashes out too when you you can

498
00:20:43,040 --> 00:20:48,770
basically specify the offsets for the

499
00:20:45,800 --> 00:20:50,840
Sam hive where the where the credentials

500
00:20:48,770 --> 00:20:54,680
are at and dump the passwords out of the

501
00:20:50,840 --> 00:20:57,250
the registry all right is anybody here

502
00:20:54,680 --> 00:21:00,320
are familiar with the yarn

503
00:20:57,250 --> 00:21:02,060
yeah so Yarra Yarra is amazing there's

504
00:21:00,320 --> 00:21:03,649
so many great yah rules out there and

505
00:21:02,060 --> 00:21:06,800
it's really not that hard to write your

506
00:21:03,650 --> 00:21:07,930
rules you know they can be high fidelity

507
00:21:06,800 --> 00:21:11,930
if you're applying different

508
00:21:07,930 --> 00:21:14,810
conditionals to it but in in volatility

509
00:21:11,930 --> 00:21:17,690
you can either pass a file or you can

510
00:21:14,810 --> 00:21:20,060
just search on your i/o sees so say

511
00:21:17,690 --> 00:21:21,500
there was a domain name that triggered

512
00:21:20,060 --> 00:21:24,409
on the alert that's the reason that

513
00:21:21,500 --> 00:21:26,390
you're coming at this you know this

514
00:21:24,410 --> 00:21:28,730
machine the reason you dump the RAM out

515
00:21:26,390 --> 00:21:31,960
you can basically just throw domain calm

516
00:21:28,730 --> 00:21:35,210
in there and under you are searching the

517
00:21:31,960 --> 00:21:37,610
- - kernel and - - wide now the wide is

518
00:21:35,210 --> 00:21:39,110
for wide streams and that'll that'll

519
00:21:37,610 --> 00:21:40,909
search over you know not just ask these

520
00:21:39,110 --> 00:21:43,699
streams will give you unicode strings

521
00:21:40,910 --> 00:21:44,990
and that'll you know improve your search

522
00:21:43,700 --> 00:21:46,490
results when searching for those types

523
00:21:44,990 --> 00:21:49,940
of streams but you can also search for

524
00:21:46,490 --> 00:21:52,100
byte sequences whatever your indicator

525
00:21:49,940 --> 00:21:55,730
is you know you can find out what

526
00:21:52,100 --> 00:21:57,770
processes interacted with that indicator

527
00:21:55,730 --> 00:21:59,630
this is useful if you've been searching

528
00:21:57,770 --> 00:22:02,240
around in the in the RAM you using just

529
00:21:59,630 --> 00:22:04,970
the plugins and you're not seeing what

530
00:22:02,240 --> 00:22:08,600
you expect to see just start searching

531
00:22:04,970 --> 00:22:10,580
for them with Yara and typically you'll

532
00:22:08,600 --> 00:22:15,020
you'll land on what your of what you're

533
00:22:10,580 --> 00:22:18,919
looking for okay so now we're gonna go

534
00:22:15,020 --> 00:22:21,740
through a quick memory analysis example

535
00:22:18,920 --> 00:22:22,940
here of a machine we don't know we don't

536
00:22:21,740 --> 00:22:25,700
know what happened the computer is

537
00:22:22,940 --> 00:22:27,920
exhibiting strange behavior and you know

538
00:22:25,700 --> 00:22:29,570
systems might be that it that are you

539
00:22:27,920 --> 00:22:32,030
know controlled by this machine might be

540
00:22:29,570 --> 00:22:34,129
failing or you know something brought

541
00:22:32,030 --> 00:22:36,500
you to the machine but this you know

542
00:22:34,130 --> 00:22:38,960
it's kind of ambiguous so we're gonna go

543
00:22:36,500 --> 00:22:42,380
over a quick example so here's an output

544
00:22:38,960 --> 00:22:43,520
from PS list unfortunately this is

545
00:22:42,380 --> 00:22:45,800
pretty small you wanna go over you know

546
00:22:43,520 --> 00:22:48,170
well once you're a big the screen was

547
00:22:45,800 --> 00:22:57,169
going to be um so let's just go to the

548
00:22:48,170 --> 00:22:59,330
next slide here so alright so you guys

549
00:22:57,170 --> 00:23:01,250
see the red box tear it off I should've

550
00:22:59,330 --> 00:23:02,720
made that bolder so right here

551
00:23:01,250 --> 00:23:05,420
the novelist thing about this right away

552
00:23:02,720 --> 00:23:09,230
so we have the process you have the

553
00:23:05,420 --> 00:23:10,190
process list okay and so you know we're

554
00:23:09,230 --> 00:23:11,780
like okay well we don't know what's

555
00:23:10,190 --> 00:23:13,730
wrong with this machine yet you know why

556
00:23:11,780 --> 00:23:15,379
it's behaving the way it is so what

557
00:23:13,730 --> 00:23:17,690
you'll want to start doing right away is

558
00:23:15,380 --> 00:23:18,890
like listing processes and seeing seeing

559
00:23:17,690 --> 00:23:20,150
what has actually occurred in there and

560
00:23:18,890 --> 00:23:23,150
so you can look on here I'll show you

561
00:23:20,150 --> 00:23:26,060
the start time the exit time the name of

562
00:23:23,150 --> 00:23:27,890
the process the pit the parent pit that

563
00:23:26,060 --> 00:23:30,800
started it how many threads that were

564
00:23:27,890 --> 00:23:34,130
detected for the process in memory you

565
00:23:30,800 --> 00:23:36,050
know and so basically with this you can

566
00:23:34,130 --> 00:23:38,570
see what was running and then even

567
00:23:36,050 --> 00:23:41,030
processes that had been exited to see

568
00:23:38,570 --> 00:23:43,520
when they ran and when they exited so in

569
00:23:41,030 --> 00:23:47,540
this list itself though what makes this

570
00:23:43,520 --> 00:23:54,110
strange is that we have an LSA SS exe

571
00:23:47,540 --> 00:23:56,629
right here and we have two more LS ftse

572
00:23:54,110 --> 00:23:59,479
down here they not exited either okay so

573
00:23:56,630 --> 00:24:02,240
we have three running palaces as

574
00:23:59,480 --> 00:24:05,390
processes which there should only be one

575
00:24:02,240 --> 00:24:08,210
so this is this is anomalous now we're

576
00:24:05,390 --> 00:24:09,530
like okay what the plus some want one or

577
00:24:08,210 --> 00:24:12,500
two of these processes

578
00:24:09,530 --> 00:24:15,560
gonna be something strange and so as we

579
00:24:12,500 --> 00:24:19,100
dig further we're gonna encounter it so

580
00:24:15,560 --> 00:24:21,409
you know as we analyze them so from this

581
00:24:19,100 --> 00:24:22,790
is output from the MAL fine command all

582
00:24:21,410 --> 00:24:25,220
right so like I said mal fine

583
00:24:22,790 --> 00:24:28,220
we'll look for VAT address tree

584
00:24:25,220 --> 00:24:31,660
protection violations and so if you look

585
00:24:28,220 --> 00:24:34,610
here it says page execute read and write

586
00:24:31,660 --> 00:24:36,620
so this page you can you know it's

587
00:24:34,610 --> 00:24:38,000
executable but you can also read and

588
00:24:36,620 --> 00:24:39,489
write from it and does it can anybody

589
00:24:38,000 --> 00:24:42,620
else see anything anomalous with this

590
00:24:39,490 --> 00:24:45,680
this output here for the LSA SS process

591
00:24:42,620 --> 00:24:48,350
basic safe you might notice anything

592
00:24:45,680 --> 00:24:51,320
anomalous MZ that's right

593
00:24:48,350 --> 00:24:53,780
so somebody at this page here had

594
00:24:51,320 --> 00:24:57,980
injected an MZ which is a Windows

595
00:24:53,780 --> 00:24:59,450
executable header so this is this

596
00:24:57,980 --> 00:25:01,280
anomalous you know when you see things

597
00:24:59,450 --> 00:25:03,590
like that it's either your your tool

598
00:25:01,280 --> 00:25:07,010
intended for that to happen or you know

599
00:25:03,590 --> 00:25:13,399
a malware author you know possibly cause

600
00:25:07,010 --> 00:25:15,590
this to happen so if we go further I'm

601
00:25:13,400 --> 00:25:18,650
interested in this process now and so

602
00:25:15,590 --> 00:25:20,540
I'm gonna go over what what modules and

603
00:25:18,650 --> 00:25:23,270
everything the file handles so in this

604
00:25:20,540 --> 00:25:24,560
case here I'm checking the Laura model

605
00:25:23,270 --> 00:25:28,460
which is essentially the DLL that were

606
00:25:24,560 --> 00:25:30,230
loaded for process a six eight it says

607
00:25:28,460 --> 00:25:31,370
right here you can't unfortunately can't

608
00:25:30,230 --> 00:25:33,920
see very well but it's a little red

609
00:25:31,370 --> 00:25:36,889
outline and it says that when the when

610
00:25:33,920 --> 00:25:39,310
when the the process was initiated the

611
00:25:36,890 --> 00:25:44,290
module wasn't this deal was not loaded

612
00:25:39,310 --> 00:25:44,290
okay so that's that's also strange okay

613
00:25:49,929 --> 00:25:55,399
so in its blank here there's no path to

614
00:25:52,580 --> 00:25:57,080
a dll so now this is where I was saying

615
00:25:55,399 --> 00:25:59,029
before are adding arguments to the

616
00:25:57,080 --> 00:26:00,918
commands and volatility we can increase

617
00:25:59,029 --> 00:26:03,230
the verbosity level and we can actually

618
00:26:00,919 --> 00:26:04,820
get the paths of the what was injected

619
00:26:03,230 --> 00:26:08,360
into that process

620
00:26:04,820 --> 00:26:10,580
so if we add if we go down here so this

621
00:26:08,360 --> 00:26:13,729
is basically just adding the - be right

622
00:26:10,580 --> 00:26:16,879
here now we can see what the base load

623
00:26:13,730 --> 00:26:21,970
paths were for these uh these uh dll's

624
00:26:16,879 --> 00:26:21,969
and so if we go down and we're like okay

625
00:26:24,159 --> 00:26:30,710
but then LS AFF exe is the source load

626
00:26:27,919 --> 00:26:32,230
path for the dll that is anomalous you

627
00:26:30,710 --> 00:26:34,820
shouldn't you wouldn't normally see that

628
00:26:32,230 --> 00:26:37,759
so now it's getting really interesting I

629
00:26:34,820 --> 00:26:42,740
really want to know what at that point

630
00:26:37,759 --> 00:26:45,440
which if we see here - one sec where the

631
00:26:42,740 --> 00:26:47,600
offs is so in this we're gonna want to

632
00:26:45,440 --> 00:26:49,669
now figure out where the offset is for

633
00:26:47,600 --> 00:26:52,090
that and you see that the base address

634
00:26:49,669 --> 00:26:54,769
right here is a hundred thousand so now

635
00:26:52,090 --> 00:26:57,830
now we want to find out how how we can

636
00:26:54,769 --> 00:26:59,749
pull that section of RAM out and do

637
00:26:57,830 --> 00:27:01,759
further analysis on it to determine what

638
00:26:59,749 --> 00:27:04,450
actually occurred there or what that

639
00:27:01,759 --> 00:27:12,830
ended up injected code is actually doing

640
00:27:04,450 --> 00:27:15,230
so so here here we have with the process

641
00:27:12,830 --> 00:27:17,029
which which I suggest because that way

642
00:27:15,230 --> 00:27:19,009
you instead of just dumping the process

643
00:27:17,029 --> 00:27:22,940
itself you get all of the stall the

644
00:27:19,009 --> 00:27:25,909
files that it was you know using and the

645
00:27:22,940 --> 00:27:28,730
the the the drivers and modules that

646
00:27:25,909 --> 00:27:32,659
were loaded in with so you can't really

647
00:27:28,730 --> 00:27:35,330
see it but right here so that dump I'm

648
00:27:32,659 --> 00:27:37,940
passing the the pid' that eight six

649
00:27:35,330 --> 00:27:40,428
eight and then I passed a directory -

650
00:27:37,940 --> 00:27:44,119
capital D where I want to dump out all

651
00:27:40,429 --> 00:27:45,350
these pages - and this is the this is

652
00:27:44,119 --> 00:27:52,610
the applet these are all the pages that

653
00:27:45,350 --> 00:27:58,059
were dumped out okay and are sorry about

654
00:27:52,610 --> 00:27:58,059
that let's go down further

655
00:27:58,129 --> 00:28:04,859
now here is Here I am I've gone into the

656
00:28:02,159 --> 00:28:07,289
directory and I'm basically trying to

657
00:28:04,859 --> 00:28:10,289
figure out what these files are all

658
00:28:07,289 --> 00:28:13,349
right so I just run a file you know a

659
00:28:10,289 --> 00:28:15,449
sturdy MP all right and they're all

660
00:28:13,349 --> 00:28:18,359
named essentially with what the the

661
00:28:15,449 --> 00:28:21,719
address the base address and then the

662
00:28:18,359 --> 00:28:23,549
offset that they that they go to and so

663
00:28:21,719 --> 00:28:26,249
this right here it just says that the

664
00:28:23,549 --> 00:28:26,699
page I'm interested is just data all

665
00:28:26,249 --> 00:28:32,219
right

666
00:28:26,699 --> 00:28:34,109
so if we continue over here now and you

667
00:28:32,219 --> 00:28:37,259
know in my experience you'll want to

668
00:28:34,109 --> 00:28:39,299
figure out if the file has other

669
00:28:37,259 --> 00:28:41,729
sections or other portions in it

670
00:28:39,299 --> 00:28:44,819
sometimes files can embed other files

671
00:28:41,729 --> 00:28:46,339
inside of them and I've been walk I

672
00:28:44,819 --> 00:28:48,299
don't know you guys ever used in walk

673
00:28:46,339 --> 00:28:49,229
it's a pretty good but it's a really

674
00:28:48,299 --> 00:28:51,679
good tool if you guys don't use been

675
00:28:49,229 --> 00:28:54,899
walk is amazing so Benoit can show you

676
00:28:51,679 --> 00:28:56,549
if there's compressed elements inside of

677
00:28:54,899 --> 00:28:58,619
the file that you're dumping out you've

678
00:28:56,549 --> 00:29:00,599
dumped out it works across all files

679
00:28:58,619 --> 00:29:02,938
been walk is and I can't old like and

680
00:29:00,599 --> 00:29:06,809
very much so suggest that also this is

681
00:29:02,939 --> 00:29:09,359
the output from bin walk and you can see

682
00:29:06,809 --> 00:29:11,668
here that the page section that I was

683
00:29:09,359 --> 00:29:16,049
interested in right here it actually

684
00:29:11,669 --> 00:29:20,789
gave me an md5 checksum for that page ok

685
00:29:16,049 --> 00:29:23,249
and so now I can take that md5 and check

686
00:29:20,789 --> 00:29:25,919
that against reputation databases but I

687
00:29:23,249 --> 00:29:28,529
can actually check all of the md5 s that

688
00:29:25,919 --> 00:29:30,899
came out were dumped out from that vat

689
00:29:28,529 --> 00:29:32,549
dump to try and determine if anything

690
00:29:30,899 --> 00:29:33,658
was anomalous there and they show up in

691
00:29:32,549 --> 00:29:36,418
the list as well just don't have a

692
00:29:33,659 --> 00:29:41,279
complete list there so when I looked at

693
00:29:36,419 --> 00:29:43,519
it you know and that it says Dooku on it

694
00:29:41,279 --> 00:29:46,499
which is like a variant of the Stuxnet

695
00:29:43,519 --> 00:29:49,609
malware but then you can get an idea a

696
00:29:46,499 --> 00:29:52,589
this this was the actual output for that

697
00:29:49,609 --> 00:29:54,809
the md5 address or this is what

698
00:29:52,589 --> 00:29:59,428
virustotal reputation was was a 46 out

699
00:29:54,809 --> 00:30:01,049
of 70 so it's pretty bad but now what's

700
00:29:59,429 --> 00:30:03,539
gonna happen is is like okay okay

701
00:30:01,049 --> 00:30:05,699
I found the malware on the machine but

702
00:30:03,539 --> 00:30:07,589
when you're doing an incident you need

703
00:30:05,699 --> 00:30:09,599
to figure out how the malware got on the

704
00:30:07,589 --> 00:30:10,710
machine in order to put the mitigations

705
00:30:09,599 --> 00:30:13,020
in

706
00:30:10,710 --> 00:30:14,550
to prevent it from happening and so

707
00:30:13,020 --> 00:30:16,830
that's part of the whole by our

708
00:30:14,550 --> 00:30:18,810
lifecycle is you know detecting it and

709
00:30:16,830 --> 00:30:21,840
then making sure you afterwards have the

710
00:30:18,810 --> 00:30:24,990
protections in place to try to defeat or

711
00:30:21,840 --> 00:30:26,699
mitigate that type of attack so has

712
00:30:24,990 --> 00:30:30,480
anybody in here I'll use like time

713
00:30:26,700 --> 00:30:35,330
lining tools like lasso or anything like

714
00:30:30,480 --> 00:30:37,800
that or a TK maybe soap lasso is amazing

715
00:30:35,330 --> 00:30:40,409
basically what you can do is take a

716
00:30:37,800 --> 00:30:44,250
bunch of body files put them all

717
00:30:40,410 --> 00:30:46,260
together from all you know your MFT your

718
00:30:44,250 --> 00:30:48,000
memory what we're about to go into the

719
00:30:46,260 --> 00:30:50,430
timeline you can actually run timeline

720
00:30:48,000 --> 00:30:52,620
on a memory image and get all the

721
00:30:50,430 --> 00:30:55,080
actions that it can discern from the

722
00:30:52,620 --> 00:30:56,939
memory image that occurred at if the at

723
00:30:55,080 --> 00:30:59,879
the actual date stamp is available it'll

724
00:30:56,940 --> 00:31:02,040
show you that as well so in when you're

725
00:30:59,880 --> 00:31:05,910
performing IR you typically are building

726
00:31:02,040 --> 00:31:07,110
a lot of these timeline files and

727
00:31:05,910 --> 00:31:09,330
putting them together in that way you

728
00:31:07,110 --> 00:31:12,510
can kind of get an idea of what is you

729
00:31:09,330 --> 00:31:14,250
want to find out what led up to this

730
00:31:12,510 --> 00:31:17,670
actually occurring or how this malware

731
00:31:14,250 --> 00:31:20,520
got onto the machine okay so now one of

732
00:31:17,670 --> 00:31:24,960
the coolest features also is building

733
00:31:20,520 --> 00:31:26,400
timelines with volatility so you know

734
00:31:24,960 --> 00:31:29,190
volatility it supports a bunch of

735
00:31:26,400 --> 00:31:32,070
different output formats you know if you

736
00:31:29,190 --> 00:31:33,180
wanted to incorporate timeline data from

737
00:31:32,070 --> 00:31:36,659
the memory image into your overall

738
00:31:33,180 --> 00:31:38,790
timeline you can export them as CSV body

739
00:31:36,660 --> 00:31:40,890
format which is like the standard than

740
00:31:38,790 --> 00:31:43,830
the standard format for awhile and or

741
00:31:40,890 --> 00:31:46,530
Excel files a really cool feature though

742
00:31:43,830 --> 00:31:52,740
that I like is that you can go through

743
00:31:46,530 --> 00:31:54,270
the timeline as an HTML Javascript quick

744
00:31:52,740 --> 00:31:55,890
little web page and this is actually

745
00:31:54,270 --> 00:31:58,260
built into volatility framework to

746
00:31:55,890 --> 00:32:00,630
produce this and I'll show you what that

747
00:31:58,260 --> 00:32:07,920
looks like here in a sec so let's go

748
00:32:00,630 --> 00:32:10,500
ahead and alright so when you get in

749
00:32:07,920 --> 00:32:12,930
here it's gonna start off with you know

750
00:32:10,500 --> 00:32:16,560
basically the earliest events which in

751
00:32:12,930 --> 00:32:18,810
this case are they don't have a time or

752
00:32:16,560 --> 00:32:20,190
unfortunately but uh you know it

753
00:32:18,810 --> 00:32:21,639
basically goes from the earliest and

754
00:32:20,190 --> 00:32:25,000
then

755
00:32:21,640 --> 00:32:27,610
to the most recent and so what I end up

756
00:32:25,000 --> 00:32:29,320
doing in here is say I have a pig so

757
00:32:27,610 --> 00:32:32,770
we're interested in pig eight six eight

758
00:32:29,320 --> 00:32:34,389
for example okay we can just type that

759
00:32:32,770 --> 00:32:37,870
in there and that reduced our results

760
00:32:34,390 --> 00:32:39,280
down to twenty three entries out of

761
00:32:37,870 --> 00:32:40,840
forty four thousand five hundred and

762
00:32:39,280 --> 00:32:43,750
twenty events that were put into the

763
00:32:40,840 --> 00:32:45,399
timeline for this memory image okay and

764
00:32:43,750 --> 00:32:48,130
so sometimes you know this context is a

765
00:32:45,400 --> 00:32:51,820
little bit too close guard a little bit

766
00:32:48,130 --> 00:32:54,100
too it's too specific so you'll just

767
00:32:51,820 --> 00:32:55,570
want to go to that point in time and so

768
00:32:54,100 --> 00:32:58,389
we got to figure out all right

769
00:32:55,570 --> 00:33:00,850
when was this process actually started

770
00:32:58,390 --> 00:33:05,080
okay so if we go back to the the

771
00:33:00,850 --> 00:33:08,879
previous page here once you go up we can

772
00:33:05,080 --> 00:33:13,540
look at the process the eight six eight

773
00:33:08,880 --> 00:33:18,160
was actually began 2011 oh six oh three

774
00:33:13,540 --> 00:33:20,470
at Oh for 26:55 so now to see what

775
00:33:18,160 --> 00:33:22,540
actually led up to this malware

776
00:33:20,470 --> 00:33:24,429
execution we're gonna want to go into

777
00:33:22,540 --> 00:33:28,299
the timeline and see what's happening in

778
00:33:24,429 --> 00:33:35,770
that timeframe okay so let's let's go

779
00:33:28,299 --> 00:33:37,540
ahead and let's take out our search this

780
00:33:35,770 --> 00:33:43,510
is just a little JavaScript a JavaScript

781
00:33:37,540 --> 00:33:46,330
HTML page that lets you do the actual

782
00:33:43,510 --> 00:33:48,850
onkeyup event that'll update the search

783
00:33:46,330 --> 00:33:50,409
filter so you know you just kind of step

784
00:33:48,850 --> 00:33:52,480
through it a little bit figure out when

785
00:33:50,410 --> 00:33:59,860
where the time range is that you're

786
00:33:52,480 --> 00:34:01,809
interested in okay we can see everything

787
00:33:59,860 --> 00:34:04,809
launching in here we can see service Oct

788
00:34:01,809 --> 00:34:07,600
XE like as these events are actually

789
00:34:04,809 --> 00:34:10,418
occurring they're showing up in this

790
00:34:07,600 --> 00:34:12,730
timeline in order okay

791
00:34:10,418 --> 00:34:17,049
and so you know we want to get to the

792
00:34:12,730 --> 00:34:23,530
point in time where our malware event

793
00:34:17,050 --> 00:34:27,190
process actually executed here knows

794
00:34:23,530 --> 00:34:29,740
proc Mons run so the the user was

795
00:34:27,190 --> 00:34:33,850
obviously trying to profile some issue

796
00:34:29,739 --> 00:34:35,100
on the machine WM is running so we're

797
00:34:33,850 --> 00:34:38,069
getting close to the time

798
00:34:35,100 --> 00:34:39,750
here and now so these are some timer

799
00:34:38,070 --> 00:34:43,110
events that are going off there but

800
00:34:39,750 --> 00:34:46,520
that's let's go up here so pokémon and

801
00:34:43,110 --> 00:34:46,520
then keep going

802
00:34:48,590 --> 00:34:56,610
okay so we're pretty much there 26:46 so

803
00:34:54,270 --> 00:34:59,730
this is a this is like less than 10

804
00:34:56,610 --> 00:35:05,240
seconds before the malware process

805
00:34:59,730 --> 00:35:05,240
executed there's some user assist

806
00:35:05,570 --> 00:35:10,730
actions that occurred in here and one of

807
00:35:07,830 --> 00:35:14,930
them was the they ran a file here called

808
00:35:10,730 --> 00:35:19,680
7/4 DB c49

809
00:35:14,930 --> 00:35:25,620
a7 c1 c1 bah blah blah Exe and it was

810
00:35:19,680 --> 00:35:28,350
only executed once and so when we have

811
00:35:25,620 --> 00:35:32,100
these LSA SS processes starting down

812
00:35:28,350 --> 00:35:34,980
here one with a 1928 pit started by 6 6

813
00:35:32,100 --> 00:35:39,600
8 which I believe is the services

814
00:35:34,980 --> 00:35:43,020
executable in this case yeah that

815
00:35:39,600 --> 00:35:44,730
services dot exe and then as we scroll

816
00:35:43,020 --> 00:35:52,190
down you can see that the parent process

817
00:35:44,730 --> 00:35:56,180
PIDs then we see the 8 6 8 at 0 4 26 55

818
00:35:52,190 --> 00:35:59,700
so shortly after this file here ran then

819
00:35:56,180 --> 00:36:02,250
we got that file so the next thing also

820
00:35:59,700 --> 00:36:04,560
is is that you would want to follow up

821
00:36:02,250 --> 00:36:07,430
and try to figure out in the machine ram

822
00:36:04,560 --> 00:36:10,440
what process was associated with

823
00:36:07,430 --> 00:36:13,200
downloading this file was it the browser

824
00:36:10,440 --> 00:36:15,210
was it the the email client you would

825
00:36:13,200 --> 00:36:17,879
basically now you have to pivot this is

826
00:36:15,210 --> 00:36:19,770
my next artifact this strange named

827
00:36:17,880 --> 00:36:22,110
executable now you go through the

828
00:36:19,770 --> 00:36:24,240
process again what process on the

829
00:36:22,110 --> 00:36:26,910
computer executed that downloaded this

830
00:36:24,240 --> 00:36:28,919
at what time where there what and what

831
00:36:26,910 --> 00:36:32,460
web pages were visited if it what came

832
00:36:28,920 --> 00:36:36,360
out of the browser what you know emails

833
00:36:32,460 --> 00:36:40,970
were open etc to try to determine the

834
00:36:36,360 --> 00:36:44,730
the provenance of this this malware ok

835
00:36:40,970 --> 00:36:47,339
so that's basically in my opinion lot of

836
00:36:44,730 --> 00:36:48,480
ir is just basic trying to trace it back

837
00:36:47,340 --> 00:36:50,820
slowly

838
00:36:48,480 --> 00:36:52,460
we got to be methodical and identify

839
00:36:50,820 --> 00:36:54,780
what's occurring at the point in time

840
00:36:52,460 --> 00:36:57,420
for these events that you're seeing and

841
00:36:54,780 --> 00:36:58,619
this the timeline er module inside of

842
00:36:57,420 --> 00:36:59,850
Allah Tillett II is just excellent you

843
00:36:58,619 --> 00:37:01,530
just have to make sure that when you set

844
00:36:59,850 --> 00:37:04,500
your output format you set it as HTML

845
00:37:01,530 --> 00:37:06,090
and time liner will produce this the

846
00:37:04,500 --> 00:37:07,320
HTML file that has the JavaScript in

847
00:37:06,090 --> 00:37:11,430
there that'll let you page through all

848
00:37:07,320 --> 00:37:24,030
the results anybody got any questions on

849
00:37:11,430 --> 00:37:25,618
that all right so they basically that's

850
00:37:24,030 --> 00:37:38,880
that's what I had is anybody have any

851
00:37:25,619 --> 00:37:41,850
questions on how on this great great so

852
00:37:38,880 --> 00:37:44,180
this should work in powers I believe we

853
00:37:41,850 --> 00:37:47,700
had some people using it in PowerShell

854
00:37:44,180 --> 00:37:49,710
the last event that I went to so you you

855
00:37:47,700 --> 00:37:52,200
can't make work since it is a Python app

856
00:37:49,710 --> 00:37:53,910
you mean whatever can run Python will

857
00:37:52,200 --> 00:37:55,140
typically run this tool

858
00:37:53,910 --> 00:37:57,660
there's also binary version so you can

859
00:37:55,140 --> 00:37:59,009
just run the volatility exe inside of

860
00:37:57,660 --> 00:38:00,720
PowerShell to do the same thing and then

861
00:37:59,010 --> 00:38:01,980
pipe it out the way you want to and do

862
00:38:00,720 --> 00:38:13,350
all the formatting that you would like

863
00:38:01,980 --> 00:38:16,530
in the PowerShell yeah yeah oh yes oh

864
00:38:13,350 --> 00:38:19,980
yes the network connections basically

865
00:38:16,530 --> 00:38:22,200
it'll show you the the full the process

866
00:38:19,980 --> 00:38:24,630
ex-pupil name itself it'll show you what

867
00:38:22,200 --> 00:38:27,089
the pit is for the process and it'll

868
00:38:24,630 --> 00:38:28,380
also you know give you the IP address of

869
00:38:27,090 --> 00:38:30,180
where was getting so the connection scan

870
00:38:28,380 --> 00:38:32,100
is really just showing you IP address

871
00:38:30,180 --> 00:38:34,529
it's not gonna show you domain names you

872
00:38:32,100 --> 00:38:35,670
can dump the the cash out of the RAM and

873
00:38:34,530 --> 00:38:36,420
see all the domain names that were

874
00:38:35,670 --> 00:38:38,460
resolved

875
00:38:36,420 --> 00:38:40,320
you can search like I said with Yarra

876
00:38:38,460 --> 00:38:42,060
against the RAM as well if you have a

877
00:38:40,320 --> 00:38:43,800
domain name already to see what process

878
00:38:42,060 --> 00:38:45,600
was involved with that and what I would

879
00:38:43,800 --> 00:38:48,150
do is also with the executable when we

880
00:38:45,600 --> 00:38:49,560
identified in the timeline that xq live

881
00:38:48,150 --> 00:38:50,970
ram to quran' if you just put that

882
00:38:49,560 --> 00:38:52,950
executable name in the yarra search

883
00:38:50,970 --> 00:38:55,319
you're gonna find out i'll possibly what

884
00:38:52,950 --> 00:38:57,700
process interacted with that book them

885
00:38:55,320 --> 00:39:07,960
to download it or whatnot

886
00:38:57,700 --> 00:39:10,960
oh yeah oh yeah um I believe

887
00:39:07,960 --> 00:39:15,100
Goleta has a tool she's on hurdles on

888
00:39:10,960 --> 00:39:18,070
github and they they have a tool for

889
00:39:15,100 --> 00:39:19,839
running the PMM driver and doing the

890
00:39:18,070 --> 00:39:21,970
volatility commands against it so the

891
00:39:19,840 --> 00:39:26,380
person that has scripted it out is the

892
00:39:21,970 --> 00:39:27,310
user Goleta GL eeda on github they they

893
00:39:26,380 --> 00:39:30,820
have a good really good example they

894
00:39:27,310 --> 00:39:45,160
have dropped out there no problem

895
00:39:30,820 --> 00:39:50,800
anybody got any questions didn't walk

896
00:39:45,160 --> 00:39:53,020
yeah yeah yes like binary walk yeah this

897
00:39:50,800 --> 00:39:58,000
is a very useful tool and also very

898
00:39:53,020 --> 00:40:00,580
useful in cts yeah I very much so

899
00:39:58,000 --> 00:40:03,040
suggest up in walk typically you just

900
00:40:00,580 --> 00:40:04,810
run the the some tool to one-way ashing

901
00:40:03,040 --> 00:40:06,190
some people to get the hashes but bin

902
00:40:04,810 --> 00:40:09,220
walk will show you if there's other

903
00:40:06,190 --> 00:40:11,500
embedded data in the file itself that it

904
00:40:09,220 --> 00:40:13,959
can identify there's also other really

905
00:40:11,500 --> 00:40:15,520
cool tools for extracting data that one

906
00:40:13,960 --> 00:40:17,770
of them if you have page files and you

907
00:40:15,520 --> 00:40:18,970
wanted to brute force dump out files out

908
00:40:17,770 --> 00:40:21,370
of your page files you can run another

909
00:40:18,970 --> 00:40:23,020
tool called page brute and that will do

910
00:40:21,370 --> 00:40:25,420
it there's other there's other tools

911
00:40:23,020 --> 00:40:26,710
that will work against memory images as

912
00:40:25,420 --> 00:40:29,020
well I believe you can actually also use

913
00:40:26,710 --> 00:40:32,220
scalpel against the memory to extract

914
00:40:29,020 --> 00:40:32,220
files as well

915
00:40:37,420 --> 00:40:43,430
so does of also you look interesting no

916
00:40:41,960 --> 00:40:46,580
so it's yeah it's super powerful and

917
00:40:43,430 --> 00:40:48,710
like you're like you're saying being

918
00:40:46,580 --> 00:40:51,080
able to run it live against a machine is

919
00:40:48,710 --> 00:40:54,470
actually desirable in some circumstances

920
00:40:51,080 --> 00:40:56,480
you know like I say when the RAM image

921
00:40:54,470 --> 00:40:58,600
is so huge you can't move it very

922
00:40:56,480 --> 00:41:01,430
quickly you need to act immediately

923
00:40:58,600 --> 00:41:03,650
running against live is amazing issues

924
00:41:01,430 --> 00:41:05,540
I've encountered though with recall

925
00:41:03,650 --> 00:41:07,760
while running live if you're in a highly

926
00:41:05,540 --> 00:41:11,390
segmented environment recall actually

927
00:41:07,760 --> 00:41:13,220
goes in attempts to it'll do the kernel

928
00:41:11,390 --> 00:41:15,170
debug scan and it will attempt to

929
00:41:13,220 --> 00:41:17,870
automatically download the pdb files

930
00:41:15,170 --> 00:41:18,980
from the Microsoft website now if you're

931
00:41:17,870 --> 00:41:20,359
in a highly segmented apartment that's

932
00:41:18,980 --> 00:41:22,790
not gonna happen that's not gonna work

933
00:41:20,360 --> 00:41:24,440
but you can download every single PD for

934
00:41:22,790 --> 00:41:26,090
Windows I think as a package and I

935
00:41:24,440 --> 00:41:27,290
believe it's about two gigs that you can

936
00:41:26,090 --> 00:41:35,600
just carry around with you but that's

937
00:41:27,290 --> 00:41:38,230
pretty cumbersome so yeah alright so no

938
00:41:35,600 --> 00:41:38,230
further questions

