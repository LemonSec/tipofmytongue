1
00:00:01,879 --> 00:00:06,270
all right good afternoon everyone

2
00:00:04,380 --> 00:00:12,230
welcome to my presentation

3
00:00:06,270 --> 00:00:12,230
making let's encrypt relay NOLA con 2019

4
00:00:12,320 --> 00:00:16,289
Who am I

5
00:00:13,799 --> 00:00:18,180
my name is Josh Harvey currently I'm a

6
00:00:16,289 --> 00:00:20,039
senior principal of systems engineer at

7
00:00:18,180 --> 00:00:23,070
NASA Goddard Space Flight Center in

8
00:00:20,039 --> 00:00:26,789
Greenbelt Maryland been working in an IT

9
00:00:23,070 --> 00:00:29,070
for over 10 years started with Apple and

10
00:00:26,789 --> 00:00:30,960
then about a year after that I made the

11
00:00:29,070 --> 00:00:32,790
jump in the government contracting and

12
00:00:30,960 --> 00:00:36,870
they had cookies and paid a lot better

13
00:00:32,790 --> 00:00:40,589
and it wasn't retail so let's get

14
00:00:36,870 --> 00:00:43,349
started here's what I'll be covering

15
00:00:40,590 --> 00:00:45,420
throughout this presentation we'll start

16
00:00:43,350 --> 00:00:47,489
with an overview of why the relay was

17
00:00:45,420 --> 00:00:50,969
created along with its benefits and

18
00:00:47,489 --> 00:00:53,459
features then we move on to what the

19
00:00:50,969 --> 00:00:56,300
requirements are for it how it all works

20
00:00:53,460 --> 00:00:58,219
along with some examples of it in action

21
00:00:56,300 --> 00:01:01,038
everything goes according to plan

22
00:00:58,219 --> 00:01:03,300
there'll be time at the end of the

23
00:01:01,039 --> 00:01:07,820
presentation for any questions that you

24
00:01:03,300 --> 00:01:12,240
that you may have hopefully answers to

25
00:01:07,820 --> 00:01:14,520
so so why may get the idea for the let's

26
00:01:12,240 --> 00:01:17,580
encrypt relay came due to some issues we

27
00:01:14,520 --> 00:01:20,130
were facing our environment mainly with

28
00:01:17,580 --> 00:01:22,490
internal servers or we're always

29
00:01:20,130 --> 00:01:27,658
creating new servers for deployment

30
00:01:22,490 --> 00:01:30,509
testing features internal wiki's this

31
00:01:27,659 --> 00:01:33,210
goes on but there were always issues

32
00:01:30,509 --> 00:01:35,310
that we faced with it and pushback and

33
00:01:33,210 --> 00:01:38,669
delays it that came with these internal

34
00:01:35,310 --> 00:01:40,200
getting these internal SSL certs it was

35
00:01:38,670 --> 00:01:42,060
starting to affect the main reason why

36
00:01:40,200 --> 00:01:47,909
we stood these up and that was to do the

37
00:01:42,060 --> 00:01:49,619
testing to do the development and being

38
00:01:47,909 --> 00:01:51,750
able to focus solely on testing is

39
00:01:49,619 --> 00:01:54,390
important so we thought thought about

40
00:01:51,750 --> 00:01:57,270
the main issues that we were facing and

41
00:01:54,390 --> 00:02:01,079
came up with these four main issues HTS

42
00:01:57,270 --> 00:02:04,310
HSPs requirements HSTs

43
00:02:01,079 --> 00:02:08,068
it has to be set enabled for all servers

44
00:02:04,310 --> 00:02:09,179
internal external it has to pass all the

45
00:02:08,068 --> 00:02:12,410
checks and the Box has to be green

46
00:02:09,179 --> 00:02:15,450
otherwise I get yelled at

47
00:02:12,410 --> 00:02:17,579
they were difficult to get requesting

48
00:02:15,450 --> 00:02:21,149
internal SSL certs either required

49
00:02:17,580 --> 00:02:22,880
filling out multiple forms waiting for

50
00:02:21,150 --> 00:02:25,380
somebody to get back to you about them

51
00:02:22,880 --> 00:02:28,220
nine times out of ten they were rejected

52
00:02:25,380 --> 00:02:30,600
because they were development servers or

53
00:02:28,220 --> 00:02:34,050
maybe you got lucky in and they got

54
00:02:30,600 --> 00:02:36,510
approved either way development servers

55
00:02:34,050 --> 00:02:40,260
they always took their requests always

56
00:02:36,510 --> 00:02:43,560
took the back seat so that that held up

57
00:02:40,260 --> 00:02:46,950
testing untrusted with our Java

58
00:02:43,560 --> 00:02:50,330
applications throughout throughout where

59
00:02:46,950 --> 00:02:53,250
I work at we use a lot of Java apps and

60
00:02:50,330 --> 00:02:55,260
internal SSL certs they didn't really

61
00:02:53,250 --> 00:02:59,130
work with most of the job applications

62
00:02:55,260 --> 00:03:01,549
that we use they were untrusted and kind

63
00:02:59,130 --> 00:03:06,750
of made testing and using it difficult

64
00:03:01,550 --> 00:03:10,230
and lastly there's the cost purchasing

65
00:03:06,750 --> 00:03:13,310
SSL certs from external CAS it cost

66
00:03:10,230 --> 00:03:16,130
money and that requires approval and

67
00:03:13,310 --> 00:03:19,170
because it's a development server and

68
00:03:16,130 --> 00:03:22,109
using it not for production most of the

69
00:03:19,170 --> 00:03:27,329
time it it's kind of a waste of money

70
00:03:22,110 --> 00:03:30,570
and it's hard to get approved so here

71
00:03:27,330 --> 00:03:35,520
comes real ad the recipe the let's

72
00:03:30,570 --> 00:03:39,810
encrypt really allowed us to get HSTs

73
00:03:35,520 --> 00:03:42,570
support it can be configured and it's no

74
00:03:39,810 --> 00:03:45,470
longer a four-letter word when we have

75
00:03:42,570 --> 00:03:47,730
to go set up internal servers

76
00:03:45,470 --> 00:03:51,750
certificate management this this was a

77
00:03:47,730 --> 00:03:55,709
real big plus using the relay our users

78
00:03:51,750 --> 00:03:58,709
are in control of all the SSL certs they

79
00:03:55,709 --> 00:04:02,520
can create by taking the request process

80
00:03:58,709 --> 00:04:04,740
out and the delay the folks can go back

81
00:04:02,520 --> 00:04:10,670
the testing and we can start sooner than

82
00:04:04,740 --> 00:04:10,670
ever before you're you're in control

83
00:04:11,060 --> 00:04:17,280
along with the certificate management

84
00:04:13,980 --> 00:04:20,909
now the let's encrypt relay also produce

85
00:04:17,279 --> 00:04:23,679
trusted certs with her trust they were

86
00:04:20,910 --> 00:04:27,280
trusted with job applications

87
00:04:23,680 --> 00:04:29,590
they were accepted and they worked with

88
00:04:27,280 --> 00:04:31,570
every single one that we used which

89
00:04:29,590 --> 00:04:34,030
which no longer put limits on what we

90
00:04:31,570 --> 00:04:39,550
can test before we have to start the

91
00:04:34,030 --> 00:04:43,750
long process of requesting an external

92
00:04:39,550 --> 00:04:47,169
SSL cert and and last they're free and

93
00:04:43,750 --> 00:04:51,039
who doesn't like free I like free

94
00:04:47,169 --> 00:04:53,380
my boss is like free the average for a

95
00:04:51,039 --> 00:04:55,300
one-year SSL cert about a hundred and

96
00:04:53,380 --> 00:04:58,810
fifty two hundred dollars a year and I

97
00:04:55,300 --> 00:05:07,180
can add up fast so free was definitely a

98
00:04:58,810 --> 00:05:08,289
huge huge bonus so next up let's let's

99
00:05:07,180 --> 00:05:12,610
talk about some of the features and the

100
00:05:08,289 --> 00:05:14,729
benefits to really provide besides

101
00:05:12,610 --> 00:05:17,320
solving the issues previously mentioned

102
00:05:14,729 --> 00:05:24,240
there are additional benefits to using

103
00:05:17,320 --> 00:05:26,139
the relay it's quick and easy I

104
00:05:24,240 --> 00:05:28,599
mentioned this in the previous slides

105
00:05:26,139 --> 00:05:31,300
but it's a big part of why I made the

106
00:05:28,599 --> 00:05:33,430
relay it makes us to sell certain

107
00:05:31,300 --> 00:05:36,430
management extremely quick and easy all

108
00:05:33,430 --> 00:05:40,060
due to the fact that each user is in

109
00:05:36,430 --> 00:05:41,530
charge of their own SSL certs they can

110
00:05:40,060 --> 00:05:44,710
manage them they can renew them they can

111
00:05:41,530 --> 00:05:47,289
create them and it's all on their own

112
00:05:44,710 --> 00:05:51,010
they can they they have the ability to

113
00:05:47,289 --> 00:05:54,820
connect to it via SSH your servers

114
00:05:51,010 --> 00:05:57,250
staying internal with SSL certs going

115
00:05:54,820 --> 00:06:01,030
through the relay server there's no need

116
00:05:57,250 --> 00:06:03,039
to open up port 80 any just not only

117
00:06:01,030 --> 00:06:05,229
including increased security for

118
00:06:03,039 --> 00:06:07,960
internal servers because the less ports

119
00:06:05,229 --> 00:06:09,490
exposed the better but it also cut down

120
00:06:07,960 --> 00:06:13,090
on the number of firewall change

121
00:06:09,490 --> 00:06:16,210
requests being submitted and from what

122
00:06:13,090 --> 00:06:19,388
I'm told everybody who was in in that

123
00:06:16,210 --> 00:06:23,070
group was was a lot happier because it

124
00:06:19,389 --> 00:06:23,070
meant less work for that

125
00:06:23,639 --> 00:06:32,050
another benefit its automation friend

126
00:06:27,930 --> 00:06:34,870
being SSH SSH base users can create

127
00:06:32,050 --> 00:06:37,150
scripts and play books to to manage or

128
00:06:34,870 --> 00:06:37,430
create or do whatever they want with the

129
00:06:37,150 --> 00:06:40,280
rest

130
00:06:37,430 --> 00:06:43,310
zel certs and I don't know a single

131
00:06:40,280 --> 00:06:46,520
system admin who doesn't love to

132
00:06:43,310 --> 00:06:48,580
automate something I oughta mate

133
00:06:46,520 --> 00:06:51,950
everything I can

134
00:06:48,580 --> 00:06:55,159
it's user isolated so each user that

135
00:06:51,950 --> 00:06:57,170
connects to it they're in control and

136
00:06:55,160 --> 00:07:00,260
they can only see touch do whatever they

137
00:06:57,170 --> 00:07:02,870
want with their certs that's it if I

138
00:07:00,260 --> 00:07:06,289
connect I can see my certs

139
00:07:02,870 --> 00:07:10,250
my coworker he can only see his certs

140
00:07:06,290 --> 00:07:14,540
so it's sandbox just to that user

141
00:07:10,250 --> 00:07:17,240
account along with being isolated it's

142
00:07:14,540 --> 00:07:20,150
also secure by using an SSH wrapper

143
00:07:17,240 --> 00:07:23,390
script which I'll get into in the next

144
00:07:20,150 --> 00:07:25,250
few slides we can limit the access

145
00:07:23,390 --> 00:07:27,020
normal users have when they connect to

146
00:07:25,250 --> 00:07:33,260
the relay and and what they're allowed

147
00:07:27,020 --> 00:07:35,979
to do so we've talked about the benefits

148
00:07:33,260 --> 00:07:38,570
we've talked about what features it has

149
00:07:35,980 --> 00:07:41,660
how it how it resolved a lot of the

150
00:07:38,570 --> 00:07:43,040
issues that we were facing now let's go

151
00:07:41,660 --> 00:07:44,840
over the basic requirements further

152
00:07:43,040 --> 00:07:48,410
relay we're gonna start with a server

153
00:07:44,840 --> 00:07:50,710
side these are the basic requirements to

154
00:07:48,410 --> 00:07:54,740
stand up a let's encrypt relay server

155
00:07:50,710 --> 00:07:58,489
sure you use a Windows Server sure you

156
00:07:54,740 --> 00:08:03,290
can use pretty much any web server you

157
00:07:58,490 --> 00:08:07,820
want but because I is comfortable with

158
00:08:03,290 --> 00:08:13,820
using a UNIX based iOS I decided to go

159
00:08:07,820 --> 00:08:16,659
on CIN oh s on an exs EES X I host I had

160
00:08:13,820 --> 00:08:18,050
easy access to it use it every day and

161
00:08:16,660 --> 00:08:23,510
figured why not

162
00:08:18,050 --> 00:08:25,610
same thing with Apache just the default

163
00:08:23,510 --> 00:08:29,480
installation of Apache where the virtual

164
00:08:25,610 --> 00:08:31,370
host configured for port 80 and that's

165
00:08:29,480 --> 00:08:35,240
for the DNS challenge that occurs during

166
00:08:31,370 --> 00:08:37,789
the creation the renewal process next

167
00:08:35,240 --> 00:08:39,620
you're going to need the SERP client and

168
00:08:37,789 --> 00:08:42,880
that's what does the communication to

169
00:08:39,620 --> 00:08:45,860
let's encrypt servers and and finally

170
00:08:42,880 --> 00:08:47,260
you need the SSH wrapper and the cert

171
00:08:45,860 --> 00:08:49,870
manuscript

172
00:08:47,260 --> 00:08:53,410
I've mentioned the the wrapper script in

173
00:08:49,870 --> 00:08:55,390
the certain menu script and we're going

174
00:08:53,410 --> 00:08:58,660
to go over them in more detail over the

175
00:08:55,390 --> 00:09:01,240
next few slides but these are the the

176
00:08:58,660 --> 00:09:03,310
main two things that allow all the magic

177
00:09:01,240 --> 00:09:05,620
behind the scenes to work it allows the

178
00:09:03,310 --> 00:09:08,410
automation to take place the sandbox

179
00:09:05,620 --> 00:09:11,140
scene and they're their key components

180
00:09:08,410 --> 00:09:15,310
to to this relay server functioning and

181
00:09:11,140 --> 00:09:17,170
work so after a thorough server

182
00:09:15,310 --> 00:09:21,489
requirements we we have the usage

183
00:09:17,170 --> 00:09:25,620
requirements and the first one is local

184
00:09:21,490 --> 00:09:28,930
account has to exist on the relay server

185
00:09:25,620 --> 00:09:31,930
now depending on your setup the if it's

186
00:09:28,930 --> 00:09:35,560
bound you have your SSH key your public

187
00:09:31,930 --> 00:09:39,280
SSH keys published it doesn't have to

188
00:09:35,560 --> 00:09:41,140
exist but for our setup the account

189
00:09:39,280 --> 00:09:44,140
being used a service account or the user

190
00:09:41,140 --> 00:09:46,990
account it needs to exist locally on the

191
00:09:44,140 --> 00:09:52,180
relay server itself and have its public

192
00:09:46,990 --> 00:09:54,130
SSH key copied over onto the relay the

193
00:09:52,180 --> 00:09:57,280
final piece for the local account it

194
00:09:54,130 --> 00:10:00,100
needs to be a member of the group which

195
00:09:57,280 --> 00:10:05,589
we'll get into a little bit more later

196
00:10:00,100 --> 00:10:10,780
on as well in these examples we have

197
00:10:05,590 --> 00:10:14,670
been using cert pot users and in order

198
00:10:10,780 --> 00:10:17,650
to automate because I love automating I

199
00:10:14,670 --> 00:10:19,810
use a ansible playbook to create the

200
00:10:17,650 --> 00:10:22,720
local account top at the key over and

201
00:10:19,810 --> 00:10:28,479
add them to the cert bot user group

202
00:10:22,720 --> 00:10:31,930
I mentioned depending on your setup the

203
00:10:28,480 --> 00:10:34,000
end goal for for the relay in art or in

204
00:10:31,930 --> 00:10:38,880
my environment is to bind the computer

205
00:10:34,000 --> 00:10:42,190
and take advantage of the public stored

206
00:10:38,880 --> 00:10:44,610
or the stored public SSH keys so that

207
00:10:42,190 --> 00:10:49,000
takes this used to be requirement now

208
00:10:44,610 --> 00:10:53,370
the next one is the cname has to be

209
00:10:49,000 --> 00:10:53,370
added to the public record of the relay

210
00:10:53,630 --> 00:11:02,540
and this has to happen as you can see I

211
00:10:58,579 --> 00:11:04,310
have public underlined it's because it's

212
00:11:02,540 --> 00:11:07,389
a really important piece and if you

213
00:11:04,310 --> 00:11:10,279
register to the public and the private

214
00:11:07,389 --> 00:11:12,560
made this mistake in your server becomes

215
00:11:10,279 --> 00:11:16,610
unreachable so I thought I would

216
00:11:12,560 --> 00:11:18,949
underline that as well to prove control

217
00:11:16,610 --> 00:11:20,750
the domain being requested the hostname

218
00:11:18,949 --> 00:11:24,229
for your internal server needs to be

219
00:11:20,750 --> 00:11:26,779
added as a cname it's important like I

220
00:11:24,230 --> 00:11:29,750
mentioned he it only takes place on the

221
00:11:26,779 --> 00:11:35,319
public side and this this will allow

222
00:11:29,750 --> 00:11:37,220
those challenges to occur so what's next

223
00:11:35,319 --> 00:11:39,500
well we've gone over the basic

224
00:11:37,220 --> 00:11:41,630
requirements so let's let's dig into a

225
00:11:39,500 --> 00:11:46,480
little bit of how it works and how all

226
00:11:41,630 --> 00:11:46,480
these pieces come together and interact

227
00:11:46,870 --> 00:11:53,089
here's a high-level overview of the

228
00:11:51,440 --> 00:11:57,410
basic steps each connection will take

229
00:11:53,089 --> 00:11:59,240
when it's using the relay using the

230
00:11:57,410 --> 00:12:01,959
account that manages their SSL service

231
00:11:59,240 --> 00:12:05,569
user connects to the relay via SSH and

232
00:12:01,959 --> 00:12:07,638
the sshd config checks if the user

233
00:12:05,569 --> 00:12:10,490
connecting is a member of the cert pot

234
00:12:07,639 --> 00:12:14,870
users group and runs the ssh wrapper

235
00:12:10,490 --> 00:12:16,430
script if so the SSH wrapper script then

236
00:12:14,870 --> 00:12:20,569
looks at the connection requests and

237
00:12:16,430 --> 00:12:23,449
filters it based off that for example if

238
00:12:20,569 --> 00:12:26,750
you're using a CP to copy your SSL certs

239
00:12:23,449 --> 00:12:29,959
over it'll leave that alone and allows

240
00:12:26,750 --> 00:12:34,699
the copy to start if it sees that it's

241
00:12:29,959 --> 00:12:38,359
not a SCP or SFTP request it will then

242
00:12:34,699 --> 00:12:40,670
kick off the cert manuscript and pass

243
00:12:38,360 --> 00:12:44,990
off any original arguments that you are

244
00:12:40,670 --> 00:12:49,610
options that you you added to the SSH

245
00:12:44,990 --> 00:12:51,800
connection once the action that you're

246
00:12:49,610 --> 00:12:55,250
trying to do is finish connection to the

247
00:12:51,800 --> 00:12:57,430
relays automatically closed and job is

248
00:12:55,250 --> 00:12:57,430
finished

249
00:12:58,480 --> 00:13:03,019
so I mentioned I meant I've been

250
00:13:00,889 --> 00:13:06,709
mentioning the SSH wrapper a lot and I

251
00:13:03,019 --> 00:13:08,180
have an example of the wrapper script

252
00:13:06,709 --> 00:13:10,670
itself

253
00:13:08,180 --> 00:13:13,010
if a user is a member of the surf bot

254
00:13:10,670 --> 00:13:17,779
users group the SSH wrapper script takes

255
00:13:13,010 --> 00:13:20,330
it I went with an SSH SSH wrapper dude

256
00:13:17,779 --> 00:13:25,490
the flexibility allows without impacting

257
00:13:20,330 --> 00:13:28,310
security as you can see it's it's

258
00:13:25,490 --> 00:13:32,180
nothing extremely complicated at all and

259
00:13:28,310 --> 00:13:34,459
I went with this over a TCP wrapper as

260
00:13:32,180 --> 00:13:37,520
we have with people who are going to be

261
00:13:34,460 --> 00:13:40,690
using this all over different networks

262
00:13:37,520 --> 00:13:44,689
internally and this was an easier way to

263
00:13:40,690 --> 00:13:51,020
restrict access and not make it really

264
00:13:44,690 --> 00:13:53,690
complicated so as you can see this

265
00:13:51,020 --> 00:13:56,810
script the SSH wrapper script allows any

266
00:13:53,690 --> 00:14:02,990
incoming SCP or acept SFTP connection

267
00:13:56,810 --> 00:14:06,199
and and forwards it along to do what it

268
00:14:02,990 --> 00:14:09,020
what it needs to do copy the certs down

269
00:14:06,200 --> 00:14:14,180
if it if it doesn't recognize or doesn't

270
00:14:09,020 --> 00:14:18,110
see yes a SCP or SFTP command we can see

271
00:14:14,180 --> 00:14:22,189
it's going to force the cert manuscript

272
00:14:18,110 --> 00:14:25,640
to run it's going to afford the original

273
00:14:22,190 --> 00:14:28,310
command along with it and this is the

274
00:14:25,640 --> 00:14:31,010
the one half that that makes this whole

275
00:14:28,310 --> 00:14:36,560
process able to be automated while

276
00:14:31,010 --> 00:14:40,880
keeping it secure so this cert

277
00:14:36,560 --> 00:14:42,709
manuscript mentioned it this is what

278
00:14:40,880 --> 00:14:48,070
interacts with cert pot and allows user

279
00:14:42,709 --> 00:14:48,069
to create renew or list their SSL certs

280
00:14:50,860 --> 00:14:57,230
there are a few ways to use the cert

281
00:14:53,630 --> 00:15:01,070
manuscript first way is interactive the

282
00:14:57,230 --> 00:15:02,360
second is command line and the command

283
00:15:01,070 --> 00:15:05,330
line just means you can put everything

284
00:15:02,360 --> 00:15:06,830
on one line and it's the way you're

285
00:15:05,330 --> 00:15:09,250
going to use the relay if you plan on

286
00:15:06,830 --> 00:15:09,250
automate

287
00:15:11,170 --> 00:15:15,110
like I'd mentioned this this gives a

288
00:15:13,399 --> 00:15:17,480
user several ways to manage their SSL

289
00:15:15,110 --> 00:15:19,879
certs and the example under the

290
00:15:17,480 --> 00:15:22,189
interactive option you can see the SSH

291
00:15:19,879 --> 00:15:25,610
connection request followed by what the

292
00:15:22,189 --> 00:15:28,990
user is looking to do in this example

293
00:15:25,610 --> 00:15:31,819
it's to create a SSL sir

294
00:15:28,990 --> 00:15:34,430
once the SSH wrapper passes this is

295
00:15:31,819 --> 00:15:37,219
along the cert manuscript then realizes

296
00:15:34,430 --> 00:15:40,779
that it's trying to create a cert and

297
00:15:37,220 --> 00:15:43,399
it's going to prompt the interactive

298
00:15:40,779 --> 00:15:45,920
interactive option of the cert pop menu

299
00:15:43,399 --> 00:15:50,269
which we'll get into I have an example

300
00:15:45,920 --> 00:15:52,339
of both of these as well in the example

301
00:15:50,269 --> 00:15:55,069
under the command line option you can

302
00:15:52,339 --> 00:15:58,399
see it starts off same way with the SSH

303
00:15:55,069 --> 00:16:03,019
connection the user the relay server

304
00:15:58,399 --> 00:16:05,839
address but within single quotes we have

305
00:16:03,019 --> 00:16:08,259
create and then the domain that you're

306
00:16:05,839 --> 00:16:11,269
going to be creating this search for

307
00:16:08,259 --> 00:16:15,709
this will allow the entire creation

308
00:16:11,269 --> 00:16:17,689
process to be completed and your cert is

309
00:16:15,709 --> 00:16:21,739
done without any without passing any

310
00:16:17,689 --> 00:16:26,120
extra options or interaction required

311
00:16:21,740 --> 00:16:34,220
and this is how I automate a lot of my

312
00:16:26,120 --> 00:16:36,439
SSL cert creations or renewals so let's

313
00:16:34,220 --> 00:16:42,249
take apart let's take a look at the the

314
00:16:36,439 --> 00:16:45,139
beginning of the cert manuscript and

315
00:16:42,249 --> 00:16:48,980
this is this is how this this takes the

316
00:16:45,139 --> 00:16:52,519
output of the SSH wrapper and process it

317
00:16:48,980 --> 00:16:54,110
for use we can see the original SSH

318
00:16:52,519 --> 00:16:57,350
command is converted to all lowercase

319
00:16:54,110 --> 00:16:59,870
and it's saved you a variable this

320
00:16:57,350 --> 00:17:03,620
variable in this example is SSH option

321
00:16:59,870 --> 00:17:06,799
and it's being converted to lowercase to

322
00:17:03,620 --> 00:17:09,559
make the case statement which I go over

323
00:17:06,799 --> 00:17:12,500
the next slide a lot simpler takes out a

324
00:17:09,559 --> 00:17:14,779
lot of margins for errors you can see

325
00:17:12,500 --> 00:17:18,949
these survived Ariel's variables being

326
00:17:14,779 --> 00:17:21,669
set on the lines below this allows sir

327
00:17:18,949 --> 00:17:24,439
pot to run in each user's home directory

328
00:17:21,669 --> 00:17:29,179
creating a sandbox just for the rest

329
00:17:24,439 --> 00:17:31,370
service and now now that we have

330
00:17:29,179 --> 00:17:34,820
everything set let's let's take a look

331
00:17:31,370 --> 00:17:39,620
at the case statement that actually does

332
00:17:34,820 --> 00:17:41,450
the dud does the magic this is the case

333
00:17:39,620 --> 00:17:45,139
statement that runs the various options

334
00:17:41,450 --> 00:17:48,320
allowed in the beginning I mentioned how

335
00:17:45,139 --> 00:17:52,610
the SSH wrapper allows SCP and SFTP

336
00:17:48,320 --> 00:17:57,259
commands through but redirects anything

337
00:17:52,610 --> 00:17:59,389
else to the cert manuscript and these

338
00:17:57,259 --> 00:18:02,210
are the available options I know it's

339
00:17:59,389 --> 00:18:05,840
it's hard to read on the screen I have

340
00:18:02,210 --> 00:18:09,529
these slides posted online as well but

341
00:18:05,840 --> 00:18:12,439
the options available are a renew pfx

342
00:18:09,529 --> 00:18:16,429
which allows users to convert an

343
00:18:12,440 --> 00:18:20,360
existing SSL cert for use with iis the

344
00:18:16,429 --> 00:18:23,480
option to create a help and usage option

345
00:18:20,360 --> 00:18:26,899
and then last but not least an option to

346
00:18:23,480 --> 00:18:29,960
list all of the SSL certs that you've

347
00:18:26,899 --> 00:18:32,559
created that you manage which is really

348
00:18:29,960 --> 00:18:36,860
awesome because it tells you how long

349
00:18:32,559 --> 00:18:40,158
those certs are are valid for where

350
00:18:36,860 --> 00:18:44,840
they're saved at and the save location

351
00:18:40,159 --> 00:18:46,669
can be used for copying down this case

352
00:18:44,840 --> 00:18:49,129
statement we'll look at the SSL output

353
00:18:46,669 --> 00:18:52,519
variable and match it to one of these

354
00:18:49,129 --> 00:18:55,340
options if the variable doesn't match

355
00:18:52,519 --> 00:18:57,080
any of these allowed options it'll call

356
00:18:55,340 --> 00:19:01,899
a function containing the script usage

357
00:18:57,080 --> 00:19:04,158
and then exit with an error code one so

358
00:19:01,899 --> 00:19:06,949
these are the only options available to

359
00:19:04,159 --> 00:19:11,269
your relay users anything else

360
00:19:06,950 --> 00:19:13,789
it just gets kicked back and this

361
00:19:11,269 --> 00:19:15,610
section helps restrict access and usage

362
00:19:13,789 --> 00:19:18,620
so that we can keep the relay and

363
00:19:15,610 --> 00:19:22,549
everyone else is everyone's SSL certs

364
00:19:18,620 --> 00:19:27,049
safe so we've gone over the cert menu

365
00:19:22,549 --> 00:19:31,840
script the SSH wrapper well how do we

366
00:19:27,049 --> 00:19:31,840
tell it to point to these and

367
00:19:32,290 --> 00:19:37,480
that's where the sshd config goes I'd

368
00:19:35,230 --> 00:19:40,000
mentioned briefly in the beginning that

369
00:19:37,480 --> 00:19:43,060
the user has to be a member of a certain

370
00:19:40,000 --> 00:19:47,320
group and here's where that certain

371
00:19:43,060 --> 00:19:49,480
group is valve reference we do this by

372
00:19:47,320 --> 00:19:52,510
adding a match group conditional block

373
00:19:49,480 --> 00:19:54,700
to the sshd config you can see we're

374
00:19:52,510 --> 00:19:59,650
defining three options inside of this

375
00:19:54,700 --> 00:20:04,890
match group password authentication we

376
00:19:59,650 --> 00:20:07,420
already have the users public SSH key so

377
00:20:04,890 --> 00:20:10,750
we disabled the option for passwords to

378
00:20:07,420 --> 00:20:14,160
be used this also helps us control who

379
00:20:10,750 --> 00:20:18,520
has access to the relay and avoids

380
00:20:14,160 --> 00:20:21,190
always having to manage passwords next

381
00:20:18,520 --> 00:20:23,500
we have the force command and this is

382
00:20:21,190 --> 00:20:27,130
what automatically runs the SSH wrapper

383
00:20:23,500 --> 00:20:29,440
script that we covered earlier and

384
00:20:27,130 --> 00:20:34,060
forwards the original SSH command being

385
00:20:29,440 --> 00:20:36,180
used and and last the last option being

386
00:20:34,060 --> 00:20:38,590
passed to it is the authorized key file

387
00:20:36,180 --> 00:20:42,340
this sets the location where the public

388
00:20:38,590 --> 00:20:45,070
SSH keys are stored and and adding this

389
00:20:42,340 --> 00:20:49,389
option allows us to control where we

390
00:20:45,070 --> 00:20:51,639
want those keys to be stored and by

391
00:20:49,390 --> 00:20:54,940
changing it and making it to a non

392
00:20:51,640 --> 00:21:00,250
default location we're adding another

393
00:20:54,940 --> 00:21:05,170
another additional notch of security on

394
00:21:00,250 --> 00:21:11,429
where and who has access to these to the

395
00:21:05,170 --> 00:21:13,919
relay so after talking

396
00:21:11,429 --> 00:21:18,169
all the relay works and and and what

397
00:21:13,919 --> 00:21:20,969
files are needed what each section does

398
00:21:18,169 --> 00:21:30,299
it's it's time to take a look and see

399
00:21:20,969 --> 00:21:32,309
where all these files go this is an

400
00:21:30,299 --> 00:21:34,789
overview of where all the required

401
00:21:32,309 --> 00:21:37,950
Fire's files are stored for the relay I

402
00:21:34,789 --> 00:21:40,859
set up to capture the examples on the

403
00:21:37,950 --> 00:21:43,049
next couple slides I haven't mentioned

404
00:21:40,859 --> 00:21:47,428
installing Apache or creating the

405
00:21:43,049 --> 00:21:49,289
virtual hosts in detail because it again

406
00:21:47,429 --> 00:21:52,589
it doesn't require any special settings

407
00:21:49,289 --> 00:21:55,229
outside of the default installation as

408
00:21:52,589 --> 00:21:59,820
you can see on this slide everything

409
00:21:55,229 --> 00:22:05,429
we're doing is either in the SC SSH

410
00:21:59,820 --> 00:22:07,710
directory or the op cert director once

411
00:22:05,429 --> 00:22:10,619
once you have a package Stoll and the V

412
00:22:07,710 --> 00:22:15,169
host created we need to create the group

413
00:22:10,619 --> 00:22:18,539
that will be used in the sshd config and

414
00:22:15,169 --> 00:22:24,359
where we're going to that we're going to

415
00:22:18,539 --> 00:22:27,960
add the relay users to once the sshd is

416
00:22:24,359 --> 00:22:31,080
configured we can copy the SSH wrapper

417
00:22:27,960 --> 00:22:34,129
script and the cert manuscript to the op

418
00:22:31,080 --> 00:22:37,678
cert directory which is the directory I

419
00:22:34,129 --> 00:22:39,899
created during the process because it

420
00:22:37,679 --> 00:22:42,719
was easy for me to remember and that's

421
00:22:39,899 --> 00:22:45,449
pretty much the only reason why um so

422
00:22:42,719 --> 00:22:48,089
you any of these locations for the most

423
00:22:45,450 --> 00:22:50,669
part can be customized I just made it

424
00:22:48,089 --> 00:22:57,869
pass for that were easy for me to

425
00:22:50,669 --> 00:23:00,089
remember so let's take a look at at some

426
00:22:57,869 --> 00:23:03,928
examples and and see how this actually

427
00:23:00,089 --> 00:23:08,700
works I've talked about it and shown

428
00:23:03,929 --> 00:23:12,389
what the scripts look like boy let's

429
00:23:08,700 --> 00:23:15,649
let's take a look in this example I'm

430
00:23:12,389 --> 00:23:19,080
doing a creating an SSL cert and

431
00:23:15,649 --> 00:23:21,149
choosing the interactive option so I'm

432
00:23:19,080 --> 00:23:22,389
not going to add anything after the

433
00:23:21,149 --> 00:23:26,350
creep

434
00:23:22,389 --> 00:23:30,799
so you can see we're starting off with

435
00:23:26,350 --> 00:23:35,149
the user nibbler and we're connecting to

436
00:23:30,799 --> 00:23:37,549
my let's encrypt relay sir we have the

437
00:23:35,149 --> 00:23:41,330
banner and it's going to prompt me for

438
00:23:37,549 --> 00:23:43,760
what my fqdn is that I'm creating the

439
00:23:41,330 --> 00:23:45,129
search for they don't ask me to verify

440
00:23:43,760 --> 00:23:48,169
it

441
00:23:45,130 --> 00:23:49,549
it'll also ask if you have any subject

442
00:23:48,169 --> 00:23:53,539
alternative names that you want to add

443
00:23:49,549 --> 00:23:58,519
to the - desert as well this allows you

444
00:23:53,539 --> 00:24:03,320
to nest this multiple domains under one

445
00:23:58,519 --> 00:24:05,779
cert and we're just going to verify by

446
00:24:03,320 --> 00:24:07,850
running the list command and this was an

447
00:24:05,779 --> 00:24:12,139
example that I took after creating all

448
00:24:07,850 --> 00:24:15,620
of those certs but the user nibbler has

449
00:24:12,139 --> 00:24:17,539
control of all these certs and manages

450
00:24:15,620 --> 00:24:20,330
all these certs and we can see they're

451
00:24:17,539 --> 00:24:25,960
all stored in the same location in the

452
00:24:20,330 --> 00:24:25,960
user's home directory under SSL and live

453
00:24:31,149 --> 00:24:37,389
next we have creating an SSL cert then

454
00:24:34,970 --> 00:24:40,730
this is the command-line option this is

455
00:24:37,389 --> 00:24:46,580
the best way to automate as I mentioned

456
00:24:40,730 --> 00:24:50,360
earlier and we're starting off the same

457
00:24:46,580 --> 00:24:54,740
the same same ways before we're using

458
00:24:50,360 --> 00:24:59,539
nibbler to SSH into the relay server but

459
00:24:54,740 --> 00:25:02,090
now we're we're making a an SSL cert for

460
00:24:59,539 --> 00:25:04,158
Zoidberg and we're all doing it on one

461
00:25:02,090 --> 00:25:06,860
line and we can see it starts off the

462
00:25:04,159 --> 00:25:09,289
same but instead of giving us that

463
00:25:06,860 --> 00:25:12,918
automated or that that interactive

464
00:25:09,289 --> 00:25:16,419
option to verify it's going to go ahead

465
00:25:12,919 --> 00:25:20,450
and automatically create the SSL cert

466
00:25:16,419 --> 00:25:24,470
and as you can see at the end it's

467
00:25:20,450 --> 00:25:27,760
giving us the path and running the list

468
00:25:24,470 --> 00:25:31,820
command gives us the newly added cert

469
00:25:27,760 --> 00:25:36,340
valid for 89 days for this domain and

470
00:25:31,820 --> 00:25:36,340
gives us a location that saved to

471
00:25:38,259 --> 00:25:47,479
and I've ran this command both times

472
00:25:42,889 --> 00:25:50,059
after just to verify but this is another

473
00:25:47,479 --> 00:25:53,749
way you can automate this you can take

474
00:25:50,059 --> 00:25:58,809
the results of this and and use it to

475
00:25:53,749 --> 00:25:58,809
parse you can pull this certificate pass

476
00:25:58,839 --> 00:26:04,849
to see if your certs what certs you have

477
00:26:02,200 --> 00:26:06,259
it's just another feature that it really

478
00:26:04,849 --> 00:26:09,468
helped me because I'm horrible at

479
00:26:06,259 --> 00:26:11,419
remembering things so being able to

480
00:26:09,469 --> 00:26:17,570
quickly see what certs I have and when

481
00:26:11,419 --> 00:26:20,899
they expire was really helpful I had

482
00:26:17,570 --> 00:26:24,739
mentioned the the case statement walking

483
00:26:20,899 --> 00:26:28,339
or stopping in any option that was

484
00:26:24,739 --> 00:26:30,769
passed that isn't an actual option and

485
00:26:28,339 --> 00:26:35,690
and how it adds the security and just

486
00:26:30,769 --> 00:26:36,200
exits here's an example of of how that

487
00:26:35,690 --> 00:26:39,799
looks

488
00:26:36,200 --> 00:26:42,619
I know it's it's kind of small but the

489
00:26:39,799 --> 00:26:46,879
usage is really big which you'll see

490
00:26:42,619 --> 00:26:51,859
after I'm using the get command or the

491
00:26:46,879 --> 00:26:53,658
get option and it gives you overview of

492
00:26:51,859 --> 00:26:55,759
what the available options are with

493
00:26:53,659 --> 00:27:05,499
examples and a little bit more of an

494
00:26:55,759 --> 00:27:08,899
explanation onto what each one does so

495
00:27:05,499 --> 00:27:11,719
we have the the main options but what

496
00:27:08,899 --> 00:27:16,988
happens if we want to copy copy assert

497
00:27:11,719 --> 00:27:22,249
down well here's an example of the SCP

498
00:27:16,989 --> 00:27:25,429
option so instead of using SSH where

499
00:27:22,249 --> 00:27:29,089
we're just doing a normal SCP command or

500
00:27:25,429 --> 00:27:30,979
the user nibbler and this is where that

501
00:27:29,089 --> 00:27:35,059
that list command really comes into play

502
00:27:30,979 --> 00:27:37,729
because we're putting the entire path to

503
00:27:35,059 --> 00:27:41,570
whatever directory or whatever sir we

504
00:27:37,729 --> 00:27:43,279
want to pull down you can be as

505
00:27:41,570 --> 00:27:45,889
descriptive and pull one sir

506
00:27:43,279 --> 00:27:49,299
you can pull all your certs it doesn't

507
00:27:45,889 --> 00:27:49,299
matter as long as it exists

508
00:27:49,820 --> 00:27:54,600
so we're pulling the Planet Express

509
00:27:52,559 --> 00:27:58,649
script out and we're going to store it

510
00:27:54,600 --> 00:28:01,080
in the temporary directory locally and

511
00:27:58,649 --> 00:28:04,739
we can see because it's it's using the

512
00:28:01,080 --> 00:28:08,370
SSH key for authentication it's quick

513
00:28:04,740 --> 00:28:09,389
it's easy and now we're going to just

514
00:28:08,370 --> 00:28:11,489
verify that

515
00:28:09,389 --> 00:28:14,279
nibbler got his search for Planet

516
00:28:11,490 --> 00:28:18,000
Express and they exist locally now in

517
00:28:14,279 --> 00:28:21,570
the temp directory and we can see we

518
00:28:18,000 --> 00:28:25,080
have all the required certs so we can

519
00:28:21,570 --> 00:28:31,049
move on and make our web servers

520
00:28:25,080 --> 00:28:35,279
compliant and the last example that I

521
00:28:31,049 --> 00:28:38,269
have is the convert option we have I is

522
00:28:35,279 --> 00:28:41,100
our servers that do a lot of hosting and

523
00:28:38,269 --> 00:28:44,700
in order for a let's encrypt cert to

524
00:28:41,100 --> 00:28:47,699
work and get installed it has to be in a

525
00:28:44,700 --> 00:28:51,750
specific windows format and that's

526
00:28:47,700 --> 00:28:54,990
awesome and I always forgot the command

527
00:28:51,750 --> 00:29:00,960
to convert it so I decided to automate

528
00:28:54,990 --> 00:29:05,580
it and make it easier for me this cert

529
00:29:00,960 --> 00:29:07,889
has to exist on the relay itself but

530
00:29:05,580 --> 00:29:10,529
once it does exist we started off just

531
00:29:07,889 --> 00:29:12,209
like a normal SSH command all minutes

532
00:29:10,529 --> 00:29:15,899
it's a little small but I have all these

533
00:29:12,210 --> 00:29:19,440
examples posted up and I have a link for

534
00:29:15,899 --> 00:29:23,610
my github repo that all these files are

535
00:29:19,440 --> 00:29:26,700
on but as you can see it's asking for

536
00:29:23,610 --> 00:29:30,049
the export password and in this case I

537
00:29:26,700 --> 00:29:35,730
use the super secure password of blank

538
00:29:30,049 --> 00:29:37,470
but it exports as a pfx file once the

539
00:29:35,730 --> 00:29:41,880
option and the domain that you're

540
00:29:37,470 --> 00:29:44,130
creating it for are pass through then

541
00:29:41,880 --> 00:29:52,279
you can just use the SCP option to copy

542
00:29:44,130 --> 00:29:55,370
it down and life goes on references I

543
00:29:52,279 --> 00:29:57,680
had mentioned that I have

544
00:29:55,370 --> 00:30:03,709
all these files yes the state wrapper

545
00:29:57,680 --> 00:30:07,910
the Serta cert manuscripts the sshd

546
00:30:03,710 --> 00:30:10,730
config examples as well as the ansible

547
00:30:07,910 --> 00:30:13,670
playbook that I used to create and add

548
00:30:10,730 --> 00:30:17,750
users with a randomized password to the

549
00:30:13,670 --> 00:30:20,930
relay so this is the this is my github

550
00:30:17,750 --> 00:30:23,180
repository that contains all that so

551
00:30:20,930 --> 00:30:25,880
that way you have the ability to create

552
00:30:23,180 --> 00:30:27,790
a let's encrypt relay server in your own

553
00:30:25,880 --> 00:30:30,890
environment

554
00:30:27,790 --> 00:30:35,330
also because this was a really helpful

555
00:30:30,890 --> 00:30:38,120
page of the cert bot homepage during the

556
00:30:35,330 --> 00:30:46,399
creation of this it was really helpful

557
00:30:38,120 --> 00:30:52,459
and showed me how to sandbox the the

558
00:30:46,400 --> 00:30:55,610
creation of the SSL certs and I think we

559
00:30:52,460 --> 00:31:09,740
have some time for us for questions any

560
00:30:55,610 --> 00:31:14,419
questions haven't tested that that was

561
00:31:09,740 --> 00:31:16,970
the I added the feature to to create or

562
00:31:14,420 --> 00:31:20,590
to use the additional stands to kind of

563
00:31:16,970 --> 00:31:23,750
get around that you add multiple ones

564
00:31:20,590 --> 00:31:25,730
I'm sure it would be possible to to add

565
00:31:23,750 --> 00:31:35,410
it but it's something just we haven't

566
00:31:25,730 --> 00:31:38,710
haven't tested well no other questions

567
00:31:35,410 --> 00:31:38,710
thank you for listening

568
00:31:38,890 --> 00:31:40,950
you

