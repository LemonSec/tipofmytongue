1
00:00:00,000 --> 00:00:03,030
thanks for coming to understanding

2
00:00:01,500 --> 00:00:04,589
cross-site scripting my name is

3
00:00:03,030 --> 00:00:07,638
Christina Mitchell and I'm an

4
00:00:04,589 --> 00:00:11,580
application security engineer at indeed

5
00:00:07,639 --> 00:00:13,500
so I mostly work with third-party and

6
00:00:11,580 --> 00:00:16,740
internal application vulnerability

7
00:00:13,500 --> 00:00:18,330
assessments so I basically I get paid to

8
00:00:16,740 --> 00:00:19,198
break things for a living and it's the

9
00:00:18,330 --> 00:00:21,659
best thing ever

10
00:00:19,199 --> 00:00:22,890
so I'm happy to come in here and talk to

11
00:00:21,660 --> 00:00:24,990
you today about cross-site scripting

12
00:00:22,890 --> 00:00:26,970
some other things that I do to our

13
00:00:24,990 --> 00:00:29,220
triage are bug bounties we see a lot of

14
00:00:26,970 --> 00:00:33,780
interesting attacks that come in and our

15
00:00:29,220 --> 00:00:35,730
educational efforts so this talks I'm

16
00:00:33,780 --> 00:00:37,079
checking some assumptions it's for fresh

17
00:00:35,730 --> 00:00:39,680
beginners and learners who want some

18
00:00:37,079 --> 00:00:42,149
more context into application security

19
00:00:39,680 --> 00:00:43,890
there's also some secure development

20
00:00:42,149 --> 00:00:45,450
nuggets in here too so I'd like to say

21
00:00:43,890 --> 00:00:49,710
this is also for engineers and devs

22
00:00:45,450 --> 00:00:52,559
along with our security cohort so today

23
00:00:49,710 --> 00:00:54,629
we will cover what exactly is cross-site

24
00:00:52,559 --> 00:00:56,879
scripting and before that we should talk

25
00:00:54,629 --> 00:01:00,420
about browsers and apps to understand

26
00:00:56,879 --> 00:01:02,519
what's happening it will also cover how

27
00:01:00,420 --> 00:01:04,140
to spot it in the wild how to remediate

28
00:01:02,520 --> 00:01:05,729
it and how to exploit cross-site

29
00:01:04,140 --> 00:01:07,260
scripting and there's also a handful of

30
00:01:05,729 --> 00:01:11,130
different types too it's stored

31
00:01:07,260 --> 00:01:12,720
reflected self blind and Dom we'll also

32
00:01:11,130 --> 00:01:14,970
discuss some common errors and

33
00:01:12,720 --> 00:01:16,619
development to look for and which

34
00:01:14,970 --> 00:01:18,390
browser headers can help and which don't

35
00:01:16,619 --> 00:01:19,979
really help you at all because sometimes

36
00:01:18,390 --> 00:01:22,860
people want to refer to adding some

37
00:01:19,979 --> 00:01:24,479
headers and we even have enough time for

38
00:01:22,860 --> 00:01:27,390
a live demo so fingers crossed it

39
00:01:24,479 --> 00:01:31,650
doesn't get done it's too bananas okay

40
00:01:27,390 --> 00:01:33,689
so how do you browsers work so at a high

41
00:01:31,650 --> 00:01:37,229
level the client requests and renders

42
00:01:33,689 --> 00:01:39,899
resources so our browser HTML PDFs and

43
00:01:37,229 --> 00:01:41,610
JavaScript there is no formal spec for

44
00:01:39,900 --> 00:01:44,790
browsers and they're still evolving

45
00:01:41,610 --> 00:01:46,500
which is SuperDuper interesting so

46
00:01:44,790 --> 00:01:48,030
there's no difference in excuse me the

47
00:01:46,500 --> 00:01:49,829
difference between the browsers isn't

48
00:01:48,030 --> 00:01:52,049
how they parse the data and the

49
00:01:49,829 --> 00:01:53,669
languages that they're coded in and this

50
00:01:52,049 --> 00:01:58,799
is why you'll find some interesting bugs

51
00:01:53,670 --> 00:02:00,509
and different browsers like more so now

52
00:01:58,799 --> 00:02:02,909
we'll go over a couple different basic

53
00:02:00,509 --> 00:02:07,290
browsing building blocks for your web

54
00:02:02,909 --> 00:02:09,509
browser so you type in your URI in the

55
00:02:07,290 --> 00:02:12,599
browser's UI or click a link and it

56
00:02:09,508 --> 00:02:13,239
communicates to the browser engine the

57
00:02:12,599 --> 00:02:15,790
rendering and

58
00:02:13,240 --> 00:02:17,380
gets chunks of the requested dot from

59
00:02:15,790 --> 00:02:20,079
the networking layer and constructs the

60
00:02:17,380 --> 00:02:23,230
Dom tree for HTML and CSS and it does

61
00:02:20,080 --> 00:02:24,670
this gradually the networking component

62
00:02:23,230 --> 00:02:26,590
handles all the internet communication

63
00:02:24,670 --> 00:02:28,600
and security and I've s you can probably

64
00:02:26,590 --> 00:02:31,780
guess what the JavaScript interpreter

65
00:02:28,600 --> 00:02:33,670
does for us the UI backend is used for

66
00:02:31,780 --> 00:02:36,160
drawing basic widgets like windows and

67
00:02:33,670 --> 00:02:41,079
combo boxes and data storage is our

68
00:02:36,160 --> 00:02:42,549
bookmarks preferences and cookies this

69
00:02:41,080 --> 00:02:47,770
is so important it deserves its own

70
00:02:42,550 --> 00:02:51,070
slide so HTML has error tolerance so you

71
00:02:47,770 --> 00:02:53,500
find and mix find and fix missing close

72
00:02:51,070 --> 00:02:55,570
tags and common errors so for example if

73
00:02:53,500 --> 00:02:57,490
you have a table row outside of a table

74
00:02:55,570 --> 00:02:59,650
it'll rearrange elements on the page and

75
00:02:57,490 --> 00:03:01,030
it might sound kind of innocuous but

76
00:02:59,650 --> 00:03:02,170
it's actually helpful for us later when

77
00:03:01,030 --> 00:03:06,400
you come to talk about cross-site

78
00:03:02,170 --> 00:03:09,970
scripting so what is the Dom it kind of

79
00:03:06,400 --> 00:03:12,400
mentioned that briefly it's important to

80
00:03:09,970 --> 00:03:13,950
quantify which spaces cross-site

81
00:03:12,400 --> 00:03:17,410
scripting will get its grubby hands on

82
00:03:13,950 --> 00:03:20,109
so document is our HTML space and window

83
00:03:17,410 --> 00:03:22,720
is our JavaScript execution space so

84
00:03:20,110 --> 00:03:25,000
documents they can access other windows

85
00:03:22,720 --> 00:03:27,130
and frames and their docks and send

86
00:03:25,000 --> 00:03:28,900
requests on the network and load other

87
00:03:27,130 --> 00:03:29,410
sources and get into cookies and the

88
00:03:28,900 --> 00:03:31,390
like

89
00:03:29,410 --> 00:03:33,310
whereas windows represent the browser

90
00:03:31,390 --> 00:03:34,989
windows to the global JavaScript

91
00:03:33,310 --> 00:03:36,460
variables live in this space and we're

92
00:03:34,990 --> 00:03:40,360
skipping over a couple things but this

93
00:03:36,460 --> 00:03:43,000
is this is important for us ok how do

94
00:03:40,360 --> 00:03:45,490
web applications work seemingly like

95
00:03:43,000 --> 00:03:48,400
magic but just to make sure we're on the

96
00:03:45,490 --> 00:03:50,470
same page we'll talk about how web

97
00:03:48,400 --> 00:03:51,970
applications work and I wish I had a

98
00:03:50,470 --> 00:03:55,030
good pun for page since it's a

99
00:03:51,970 --> 00:03:58,150
JavaScript page someone help me after if

100
00:03:55,030 --> 00:04:00,160
you have one so this will be slightly

101
00:03:58,150 --> 00:04:01,930
abstracted and if you're curious to know

102
00:04:00,160 --> 00:04:03,430
more afterwards we'll be posting the

103
00:04:01,930 --> 00:04:07,300
slides on Twitter with some wonderful

104
00:04:03,430 --> 00:04:10,270
resources but in this example URI wants

105
00:04:07,300 --> 00:04:13,780
to visit indeed calm her browser acts as

106
00:04:10,270 --> 00:04:15,610
the client to send the request the

107
00:04:13,780 --> 00:04:19,209
request travels through the internet and

108
00:04:15,610 --> 00:04:20,620
arrives at our server BAM so the server

109
00:04:19,209 --> 00:04:22,000
responds with the page data and

110
00:04:20,620 --> 00:04:24,010
returning it back over the Internet

111
00:04:22,000 --> 00:04:27,300
where the browser receives and renders

112
00:04:24,010 --> 00:04:29,669
it ok

113
00:04:27,300 --> 00:04:32,099
so another thing about applications here

114
00:04:29,669 --> 00:04:34,258
they communicate with the HTTP protocol

115
00:04:32,099 --> 00:04:37,020
and it uses verbs to identify different

116
00:04:34,259 --> 00:04:39,389
actions so there's a handful of them but

117
00:04:37,020 --> 00:04:42,000
we'll mostly focus on get and post so

118
00:04:39,389 --> 00:04:44,069
this is a retrieval of a resource or a

119
00:04:42,000 --> 00:04:45,599
get so when I do the live demo we're

120
00:04:44,069 --> 00:04:49,050
going to be using a tool that looks at

121
00:04:45,599 --> 00:04:50,729
these requests it is getting resources

122
00:04:49,050 --> 00:04:52,949
from indeed I don't know if you guys can

123
00:04:50,729 --> 00:04:55,289
see that back there probably not okay so

124
00:04:52,949 --> 00:04:57,000
I'll just describe it to you the said

125
00:04:55,289 --> 00:04:58,860
the request header is this is just

126
00:04:57,000 --> 00:05:01,949
information that the browser will see in

127
00:04:58,860 --> 00:05:03,599
the header and it has the verb get and

128
00:05:01,949 --> 00:05:05,009
then it has a resource of indeed calm

129
00:05:03,599 --> 00:05:07,169
and there's a couple other things in

130
00:05:05,009 --> 00:05:08,520
there like user agents so what am i

131
00:05:07,169 --> 00:05:11,130
making the request through is it a

132
00:05:08,520 --> 00:05:12,568
mobile device is it a browser so it

133
00:05:11,130 --> 00:05:16,020
might give me different information back

134
00:05:12,569 --> 00:05:18,719
and it tells me what you know except

135
00:05:16,020 --> 00:05:20,698
language and other kind of nuggets here

136
00:05:18,719 --> 00:05:24,000
because sometimes you can put a header

137
00:05:20,699 --> 00:05:26,789
on when you respond to try to negate

138
00:05:24,000 --> 00:05:30,330
some cross-site scripting but we'll talk

139
00:05:26,789 --> 00:05:31,860
about why that doesn't work okay so then

140
00:05:30,330 --> 00:05:33,568
we get a response from the server and it

141
00:05:31,860 --> 00:05:35,340
looks like this it'll be a response code

142
00:05:33,569 --> 00:05:36,930
telling you if it's successful or not or

143
00:05:35,340 --> 00:05:39,479
if you have to find the resource

144
00:05:36,930 --> 00:05:41,969
elsewhere and thence a couple different

145
00:05:39,479 --> 00:05:43,050
options here but the main takeaway we

146
00:05:41,969 --> 00:05:44,849
want to get because I know you guys

147
00:05:43,050 --> 00:05:47,099
can't see it back there is you have a

148
00:05:44,849 --> 00:05:50,009
request header and a response header and

149
00:05:47,099 --> 00:05:52,319
the the headers are essentially what the

150
00:05:50,009 --> 00:05:53,669
browser's communicating or being

151
00:05:52,319 --> 00:05:56,219
communicated back to the browser and

152
00:05:53,669 --> 00:05:58,318
it's not to the page to render whereas

153
00:05:56,219 --> 00:06:01,289
the response body here on the bottom

154
00:05:58,319 --> 00:06:03,770
you'll see some HTML the response body

155
00:06:01,289 --> 00:06:06,779
is the HTML of had a client to render

156
00:06:03,770 --> 00:06:08,549
and one interesting thing about our HTTP

157
00:06:06,779 --> 00:06:10,259
verbs is that their conventions so

158
00:06:08,550 --> 00:06:12,150
sometimes when you start speaking about

159
00:06:10,259 --> 00:06:13,949
secure design you'll see that they're

160
00:06:12,150 --> 00:06:16,979
abused and you can find some

161
00:06:13,949 --> 00:06:22,409
vulnerabilities in the way the pages is

162
00:06:16,979 --> 00:06:28,889
built with the inappropriate verbs zu my

163
00:06:22,409 --> 00:06:29,139
timer here okay next all right so this

164
00:06:28,889 --> 00:06:30,520
is

165
00:06:29,139 --> 00:06:32,560
just a demonstration of what it looks

166
00:06:30,520 --> 00:06:34,448
like so when you you change your user

167
00:06:32,560 --> 00:06:36,150
agent it'll kind of gloss over this

168
00:06:34,449 --> 00:06:38,529
since I know it's cannot be hard to see

169
00:06:36,150 --> 00:06:40,840
essentially all we do is change the user

170
00:06:38,529 --> 00:06:44,319
agent from a mobile excuse me a browser

171
00:06:40,840 --> 00:06:49,419
to a mobile browser and it sends back

172
00:06:44,319 --> 00:06:52,539
DIF data okay so we want to get to the

173
00:06:49,419 --> 00:06:53,560
fun stuff so back to HTTP verbs when I

174
00:06:52,539 --> 00:06:55,960
was talking about things that you can

175
00:06:53,560 --> 00:06:59,139
abuse get requests should be non state

176
00:06:55,960 --> 00:07:01,270
changing so retrieve this we source for

177
00:06:59,139 --> 00:07:03,279
me whereas post is state changing so

178
00:07:01,270 --> 00:07:07,500
send along this data with my request

179
00:07:03,279 --> 00:07:10,300
so I've seen post URL params that gets

180
00:07:07,500 --> 00:07:13,479
kind of confusing so keep your post

181
00:07:10,300 --> 00:07:18,180
information in the post body and later

182
00:07:13,479 --> 00:07:20,979
in the talk I'll be using a web proxy to

183
00:07:18,180 --> 00:07:23,770
demonstrate so a web proxy sits between

184
00:07:20,979 --> 00:07:26,979
your browser and the Internet so you can

185
00:07:23,770 --> 00:07:29,318
stop and modify information as it comes

186
00:07:26,979 --> 00:07:34,419
through so if you guys are familiar with

187
00:07:29,319 --> 00:07:35,979
burp sweet yeah okay so next slides are

188
00:07:34,419 --> 00:07:37,839
background and might help illuminate

189
00:07:35,979 --> 00:07:38,258
some common misconceptions on how to fix

190
00:07:37,839 --> 00:07:41,110
this

191
00:07:38,259 --> 00:07:43,449
so understanding same origin policy and

192
00:07:41,110 --> 00:07:44,800
cross-origin resource policy will help

193
00:07:43,449 --> 00:07:46,180
you better understand the client-side

194
00:07:44,800 --> 00:07:47,319
vulnerability is when we get to the meat

195
00:07:46,180 --> 00:07:49,539
of the talk that I know you guys are

196
00:07:47,319 --> 00:07:52,210
dying to hear so if you have two sites

197
00:07:49,539 --> 00:07:54,360
open essentially how do you keep one

198
00:07:52,210 --> 00:07:56,339
site from tampering with the other site

199
00:07:54,360 --> 00:07:59,050
how do you enforce it

200
00:07:56,339 --> 00:08:01,569
so the web was originally just static

201
00:07:59,050 --> 00:08:02,740
files and with the introduction of

202
00:08:01,569 --> 00:08:04,419
JavaScript we needed to add some

203
00:08:02,740 --> 00:08:07,089
client-side protection since the

204
00:08:04,419 --> 00:08:08,710
server-side was what we had prior so

205
00:08:07,089 --> 00:08:11,069
single origin policy gives the browser a

206
00:08:08,710 --> 00:08:14,318
system for isolating different resources

207
00:08:11,069 --> 00:08:17,050
so just to imagine a world before single

208
00:08:14,319 --> 00:08:19,149
origin policy so if I the attacker can

209
00:08:17,050 --> 00:08:19,719
get you to log in to your bank via an

210
00:08:19,149 --> 00:08:22,300
iframe

211
00:08:19,719 --> 00:08:23,680
to equal com then I can change anything

212
00:08:22,300 --> 00:08:25,960
in the Dom so when we talked about what

213
00:08:23,680 --> 00:08:27,580
the Dom had access to I can change your

214
00:08:25,960 --> 00:08:29,830
balance make it look like it's not

215
00:08:27,580 --> 00:08:31,029
changing when I take out your pink take

216
00:08:29,830 --> 00:08:34,978
out your balance and leave a fake

217
00:08:31,029 --> 00:08:39,039
balance for you take it home with me

218
00:08:34,979 --> 00:08:40,930
all right so if example.com can load

219
00:08:39,039 --> 00:08:42,490
resources from pictures calm and it's

220
00:08:40,929 --> 00:08:44,349
not reading content it's fine

221
00:08:42,490 --> 00:08:46,750
it's not me in violation of our single

222
00:08:44,350 --> 00:08:49,450
urgent policy or using a three a third

223
00:08:46,750 --> 00:08:51,279
party script include like an image tag

224
00:08:49,450 --> 00:08:52,870
which will come in handy a little bit

225
00:08:51,279 --> 00:08:55,899
later

226
00:08:52,870 --> 00:08:58,990
so remember JavaScript can alter HTML

227
00:08:55,899 --> 00:09:00,310
via the Dom with breakout characters or

228
00:08:58,990 --> 00:09:03,339
different characters allow you to change

229
00:09:00,310 --> 00:09:06,459
the context so single urgent policy and

230
00:09:03,339 --> 00:09:08,080
is an attempt at isolation to not allow

231
00:09:06,459 --> 00:09:11,050
sites to tamper with each other's data

232
00:09:08,080 --> 00:09:13,420
and the origins should match so scheme

233
00:09:11,050 --> 00:09:16,719
host and port otherwise no read or write

234
00:09:13,420 --> 00:09:18,660
access however you can still post to

235
00:09:16,720 --> 00:09:23,080
allow sharing but not reading the data

236
00:09:18,660 --> 00:09:25,060
so here's just a diagram I can't you

237
00:09:23,080 --> 00:09:28,029
probably can't read it back there so on

238
00:09:25,060 --> 00:09:31,329
the top I have an Origin which is store

239
00:09:28,029 --> 00:09:33,339
company comm it's on HTTP it has a

240
00:09:31,330 --> 00:09:36,970
resource which is our company comm

241
00:09:33,339 --> 00:09:39,190
domain here these are passing requests

242
00:09:36,970 --> 00:09:41,950
since they're all on HTTP and they're

243
00:09:39,190 --> 00:09:43,360
all the same domain some domain and then

244
00:09:41,950 --> 00:09:45,700
these will fail so you've got your

245
00:09:43,360 --> 00:09:47,709
protocol in red that's HTTP I'm not

246
00:09:45,700 --> 00:09:49,810
going to be able to share resources and

247
00:09:47,709 --> 00:09:51,430
then do mean and green here on the

248
00:09:49,810 --> 00:09:54,339
bottom it says news company can't share

249
00:09:51,430 --> 00:09:56,319
with store and the port for some reason

250
00:09:54,339 --> 00:09:59,140
they decided to make that 81 so that

251
00:09:56,320 --> 00:10:03,070
also will not be accessible to same

252
00:09:59,140 --> 00:10:05,500
origin policy so that's fine and dandy

253
00:10:03,070 --> 00:10:07,690
but what actually does Origin get you so

254
00:10:05,500 --> 00:10:09,459
access to origin gets you read and write

255
00:10:07,690 --> 00:10:12,190
to cookies ability to use the browser

256
00:10:09,459 --> 00:10:14,170
network right elements to the page add

257
00:10:12,190 --> 00:10:19,060
event handlers JavaScript variables

258
00:10:14,170 --> 00:10:20,410
sounds more interesting okay so what

259
00:10:19,060 --> 00:10:21,819
happens if you actually want to share

260
00:10:20,410 --> 00:10:26,649
information between these different

261
00:10:21,820 --> 00:10:28,209
domains here relax and on purpose so

262
00:10:26,649 --> 00:10:31,329
their specific header is called cores

263
00:10:28,209 --> 00:10:33,339
headers on the bottom here it says

264
00:10:31,329 --> 00:10:35,739
access control allow origin with star

265
00:10:33,339 --> 00:10:37,870
which some of you might guess means any

266
00:10:35,740 --> 00:10:39,459
domain can get access to that response

267
00:10:37,870 --> 00:10:42,820
page so when I was showing you request

268
00:10:39,459 --> 00:10:45,160
and response let's say you're making a

269
00:10:42,820 --> 00:10:47,200
request to get a new API key and it

270
00:10:45,160 --> 00:10:49,270
dumps it out on the page so any page

271
00:10:47,200 --> 00:10:51,459
would be any other domain can read that

272
00:10:49,270 --> 00:10:53,680
so don't ever set your if you're

273
00:10:51,459 --> 00:10:55,359
developing something don't do that you

274
00:10:53,680 --> 00:10:57,729
want to explicitly list

275
00:10:55,360 --> 00:11:06,910
I want example.com to read my response

276
00:10:57,730 --> 00:11:08,949
elsewise why bother okay right now we

277
00:11:06,910 --> 00:11:10,389
got to the good stuff I see some smiles

278
00:11:08,949 --> 00:11:14,589
you guys look pretty excited yeah

279
00:11:10,389 --> 00:11:16,420
cross-site scripting yeah so cross-site

280
00:11:14,589 --> 00:11:19,360
scripting is the ability to inject

281
00:11:16,420 --> 00:11:21,009
JavaScript into the client side so let's

282
00:11:19,360 --> 00:11:24,149
say you visit your favorite social media

283
00:11:21,009 --> 00:11:26,410
site an attacker was there previously

284
00:11:24,149 --> 00:11:28,509
left a malicious script that's running

285
00:11:26,410 --> 00:11:30,309
on the page and since you know about

286
00:11:28,509 --> 00:11:32,350
what it means to have access to the

287
00:11:30,309 --> 00:11:33,819
domain you know that they can rearrange

288
00:11:32,350 --> 00:11:35,110
things on the page they can make it look

289
00:11:33,819 --> 00:11:37,389
different you might not even see it

290
00:11:35,110 --> 00:11:39,610
happen in front of you so the browser

291
00:11:37,389 --> 00:11:42,309
can't tell that this is an intended code

292
00:11:39,610 --> 00:11:43,389
from the social media site and you're

293
00:11:42,309 --> 00:11:46,329
not going to see it happen in front of

294
00:11:43,389 --> 00:11:48,160
you or if you remember I mean I remember

295
00:11:46,329 --> 00:11:50,529
going to websites and getting like 15

296
00:11:48,160 --> 00:11:50,949
pop-ups for like ray-bans and things

297
00:11:50,529 --> 00:11:53,259
like that

298
00:11:50,949 --> 00:11:57,069
that's probably cross site scripting

299
00:11:53,259 --> 00:11:59,049
here'd votes so to quantify this a

300
00:11:57,069 --> 00:12:02,049
little bit better there's a common

301
00:11:59,049 --> 00:12:04,209
ecommerce site recently where

302
00:12:02,049 --> 00:12:06,399
individuals can sell and resell goods

303
00:12:04,209 --> 00:12:07,959
an attacker injected script into the

304
00:12:06,399 --> 00:12:11,499
site and stole victim's login

305
00:12:07,959 --> 00:12:13,209
credentials and also British Airways had

306
00:12:11,499 --> 00:12:15,660
something similar because a hacker

307
00:12:13,209 --> 00:12:18,189
harvested user data in the same fashion

308
00:12:15,660 --> 00:12:19,719
or an interesting spin and I know I

309
00:12:18,189 --> 00:12:21,849
shouldn't be like rooting for it but

310
00:12:19,720 --> 00:12:26,009
it's pretty awesome and clever to inject

311
00:12:21,850 --> 00:12:29,559
crypto minor yeah I receive it excited

312
00:12:26,009 --> 00:12:31,119
so I can do any action that the origin

313
00:12:29,559 --> 00:12:33,730
conduce when we talked about the origin

314
00:12:31,119 --> 00:12:35,439
so it takes advantage of the embed rule

315
00:12:33,730 --> 00:12:37,019
of single urgent policy that we talked

316
00:12:35,439 --> 00:12:39,429
about and it can do anything

317
00:12:37,019 --> 00:12:44,199
mostly mostly but we'll get into the

318
00:12:39,429 --> 00:12:47,230
weeds on mostly all right next

319
00:12:44,199 --> 00:12:49,628
so cross-site scripting is caused by a

320
00:12:47,230 --> 00:12:52,149
lack of escaping which can allow an

321
00:12:49,629 --> 00:12:54,279
attacker to change the context but what

322
00:12:52,149 --> 00:12:58,689
I mean by that is encouraged the HTML

323
00:12:54,279 --> 00:13:00,790
parser to create attacker supplied HTML

324
00:12:58,689 --> 00:13:04,419
elements which has an attribute to call

325
00:13:00,790 --> 00:13:07,509
javascript and that's a mouthful so

326
00:13:04,419 --> 00:13:09,310
let's see this actually it's I think

327
00:13:07,509 --> 00:13:11,250
it's pretty helpful to identify because

328
00:13:09,310 --> 00:13:14,829
usually in these examples you just the

329
00:13:11,250 --> 00:13:19,060
script alert it's any context it can be

330
00:13:14,830 --> 00:13:21,370
CSS tag names attribute names headers

331
00:13:19,060 --> 00:13:24,099
all kinds of places anything that you

332
00:13:21,370 --> 00:13:29,320
put in the request I can get access to

333
00:13:24,100 --> 00:13:33,880
so with a with a web proxy so escape

334
00:13:29,320 --> 00:13:36,070
everything to be more specific again

335
00:13:33,880 --> 00:13:37,900
this is an injection phone and the

336
00:13:36,070 --> 00:13:40,720
attacker uses breakout characters to add

337
00:13:37,900 --> 00:13:45,220
their own payload and it's copy escaping

338
00:13:40,720 --> 00:13:49,210
is for every context so let's see

339
00:13:45,220 --> 00:13:52,360
using a HTML tag attribute escape it a

340
00:13:49,210 --> 00:13:54,640
URL parameter do that as well

341
00:13:52,360 --> 00:13:56,680
and on the left is an example of some of

342
00:13:54,640 --> 00:13:58,930
our breakout characters can you see it

343
00:13:56,680 --> 00:14:02,020
back there yeah okay cool cool I want to

344
00:13:58,930 --> 00:14:03,849
have to do that for you so those are

345
00:14:02,020 --> 00:14:06,069
escape characters on the left is URL and

346
00:14:03,850 --> 00:14:11,170
excuse me anodic escape breakout

347
00:14:06,070 --> 00:14:13,480
characters and the right is HTML great

348
00:14:11,170 --> 00:14:16,900
so there's a lot of different types of

349
00:14:13,480 --> 00:14:19,480
cross-site scripting stored as a KA

350
00:14:16,900 --> 00:14:21,160
persistent it's persistently stored on

351
00:14:19,480 --> 00:14:23,740
the server side so whenever you request

352
00:14:21,160 --> 00:14:26,439
that resource that's fed back to you so

353
00:14:23,740 --> 00:14:29,010
a scope is whomever visits the page so

354
00:14:26,440 --> 00:14:31,650
the example is attacker post a malicious

355
00:14:29,010 --> 00:14:34,210
collisions comment on a message board

356
00:14:31,650 --> 00:14:36,730
now you have reflected so it says non

357
00:14:34,210 --> 00:14:39,960
persistent it's injected in a URL

358
00:14:36,730 --> 00:14:39,960
parameter and their request

359
00:14:40,560 --> 00:14:44,680
excuse me so let's say that the

360
00:14:42,760 --> 00:14:47,830
application uses a parameter directly

361
00:14:44,680 --> 00:14:50,620
into the page during display and it's

362
00:14:47,830 --> 00:14:52,959
included in the response body it's a

363
00:14:50,620 --> 00:14:55,060
little bit more the scope is more narrow

364
00:14:52,959 --> 00:14:56,920
so it's deployed with a specially

365
00:14:55,060 --> 00:14:59,229
crafted link let's say you click on

366
00:14:56,920 --> 00:15:01,510
something through Twitter it's there

367
00:14:59,230 --> 00:15:03,930
it's going to execute on the page and on

368
00:15:01,510 --> 00:15:10,000
the example you've got your user per

369
00:15:03,930 --> 00:15:12,099
ampere so self XSS

370
00:15:10,000 --> 00:15:15,779
I just want to plug a talk tomorrow I

371
00:15:12,100 --> 00:15:19,060
was talking to someone who's doing the

372
00:15:15,779 --> 00:15:21,850
the cookie jar talk this will dovetail

373
00:15:19,060 --> 00:15:22,750
directly into it so I would say go see

374
00:15:21,850 --> 00:15:26,019
that talk if you can

375
00:15:22,750 --> 00:15:28,269
so self XSS often enough people don't

376
00:15:26,019 --> 00:15:30,699
see the value in making sure it's not

377
00:15:28,269 --> 00:15:32,410
accessible to attackers because it's

378
00:15:30,699 --> 00:15:34,240
paired with social engineering and the

379
00:15:32,410 --> 00:15:36,100
scope is a lot smaller so if you

380
00:15:34,240 --> 00:15:39,069
remember a couple years ago there was a

381
00:15:36,100 --> 00:15:40,689
hacker friends face like Facebook self

382
00:15:39,069 --> 00:15:42,040
XSS where it told you to open up the

383
00:15:40,689 --> 00:15:46,000
console and start messing around with

384
00:15:42,040 --> 00:15:48,519
things that was self XSS then there's

385
00:15:46,000 --> 00:15:50,199
also blind XSS which is an injective

386
00:15:48,519 --> 00:15:53,339
resource that comes in from outside data

387
00:15:50,199 --> 00:15:56,529
so for example let's say an attacker

388
00:15:53,339 --> 00:16:01,000
modified their username to a payload and

389
00:15:56,529 --> 00:16:03,850
that this information triggered on a

390
00:16:01,000 --> 00:16:07,120
internal metric system that takes

391
00:16:03,850 --> 00:16:10,000
profile data where it deploys and calls

392
00:16:07,120 --> 00:16:11,560
back to the attacker that's blind a

393
00:16:10,000 --> 00:16:16,449
little bit harder to figure out

394
00:16:11,560 --> 00:16:19,089
sometimes okay and we've got Dom XSS so

395
00:16:16,449 --> 00:16:21,819
this is created at runtime by on page

396
00:16:19,089 --> 00:16:25,240
JavaScript it's a little bit harder to

397
00:16:21,819 --> 00:16:26,469
locate as an attacker personally I will

398
00:16:25,240 --> 00:16:29,230
use something like burp suite or a

399
00:16:26,470 --> 00:16:32,139
scanner to find it you can find it with

400
00:16:29,230 --> 00:16:34,360
static analysis tools but at the end of

401
00:16:32,139 --> 00:16:36,610
the day it's still about escaping user

402
00:16:34,360 --> 00:16:38,620
inputs before adding it to the page and

403
00:16:36,610 --> 00:16:41,110
these will be things set to like

404
00:16:38,620 --> 00:16:43,089
document URL location dot hash and

405
00:16:41,110 --> 00:16:44,350
document dot refer so these things that

406
00:16:43,089 --> 00:16:46,779
we're seeing in the header you still

407
00:16:44,350 --> 00:16:50,980
want to take part in escaping it before

408
00:16:46,779 --> 00:16:55,120
you add it to the page okay how do you

409
00:16:50,980 --> 00:16:56,920
spot it as an attacker that was fast how

410
00:16:55,120 --> 00:16:58,540
do you spot this as an attacker besides

411
00:16:56,920 --> 00:17:04,089
me just talking to you to tell you that

412
00:16:58,540 --> 00:17:07,119
you can see it all right I'm not way so

413
00:17:04,089 --> 00:17:08,799
fast so you play with the injection

414
00:17:07,119 --> 00:17:11,500
points so for example sign up for a

415
00:17:08,799 --> 00:17:13,569
service use control characters that we

416
00:17:11,500 --> 00:17:15,189
saw earlier and set it to something you

417
00:17:13,569 --> 00:17:16,720
can immediately see like an alert and

418
00:17:15,189 --> 00:17:18,250
that's why you often see alerts because

419
00:17:16,720 --> 00:17:21,159
it's quick and it's on the page for you

420
00:17:18,250 --> 00:17:23,470
so it's blind XSS I would use a tool

421
00:17:21,159 --> 00:17:25,510
called XSS hunter and I'll have a link

422
00:17:23,470 --> 00:17:29,039
to it in the the end of the talk so you

423
00:17:25,510 --> 00:17:31,360
can play around with this with caution

424
00:17:29,039 --> 00:17:33,158
so then you wait for the backend service

425
00:17:31,360 --> 00:17:35,500
to trigger and it might call back to you

426
00:17:33,159 --> 00:17:36,370
days or months later so that's a really

427
00:17:35,500 --> 00:17:39,400
high

428
00:17:36,370 --> 00:17:40,719
you way to look for this and was stored

429
00:17:39,400 --> 00:17:42,669
you look for locations where your

430
00:17:40,720 --> 00:17:44,740
payload will be stored persistently so

431
00:17:42,669 --> 00:17:48,460
perhaps message boards or anything

432
00:17:44,740 --> 00:17:50,679
that's keeping the data server-side so

433
00:17:48,460 --> 00:17:53,500
reflected or Daum depending on how the

434
00:17:50,679 --> 00:17:55,539
page is built you look at requests is

435
00:17:53,500 --> 00:17:58,240
there a URI parameter being reflected

436
00:17:55,539 --> 00:18:00,940
back onto the page this could require a

437
00:17:58,240 --> 00:18:03,220
real web proxy to intercept and modify

438
00:18:00,940 --> 00:18:05,830
and with self can you have you something

439
00:18:03,220 --> 00:18:07,470
like a cookie value which is again Jim's

440
00:18:05,830 --> 00:18:11,408
talk tomorrow is really going to be

441
00:18:07,470 --> 00:18:13,690
great can you and inject some values

442
00:18:11,409 --> 00:18:14,830
manually that's the only differentiation

443
00:18:13,690 --> 00:18:21,370
between this and some of these other

444
00:18:14,830 --> 00:18:23,139
ones all right Dom XSS again it's kind

445
00:18:21,370 --> 00:18:25,120
of it's an advanced technique so look

446
00:18:23,140 --> 00:18:26,710
with your your automated tools to find

447
00:18:25,120 --> 00:18:31,928
it like perp sweet has some

448
00:18:26,710 --> 00:18:36,100
functionality and it's pro version great

449
00:18:31,929 --> 00:18:37,929
so how do you exploit it good stuff so

450
00:18:36,100 --> 00:18:40,240
an easy proof of concept is the alerts

451
00:18:37,929 --> 00:18:43,330
the page you can search the console to

452
00:18:40,240 --> 00:18:44,500
see where it's triggered as far as what

453
00:18:43,330 --> 00:18:46,510
you can do with it it's up to your

454
00:18:44,500 --> 00:18:48,279
imagination you have the front door so

455
00:18:46,510 --> 00:18:50,140
everything we talked about with what you

456
00:18:48,279 --> 00:18:54,190
get access to you can tinker with it

457
00:18:50,140 --> 00:18:56,409
gives you a lot sidenote accept cookies

458
00:18:54,190 --> 00:18:57,960
with the flag of HTTP only set you're

459
00:18:56,409 --> 00:19:00,279
not going to be able to get into that

460
00:18:57,960 --> 00:19:03,760
that's ok you're gonna have everything

461
00:19:00,279 --> 00:19:06,940
else so there are some great cheat

462
00:19:03,760 --> 00:19:11,020
sheets so look with access to sec lists

463
00:19:06,940 --> 00:19:12,580
XSS payloads XSS payloads and cheat

464
00:19:11,020 --> 00:19:14,320
sheet series these are all going to be

465
00:19:12,580 --> 00:19:15,789
in our resources so you can see examples

466
00:19:14,320 --> 00:19:16,779
of different ones I've triggered because

467
00:19:15,789 --> 00:19:18,279
you're going to want them to fit your

468
00:19:16,779 --> 00:19:19,840
context so we're talking about the

469
00:19:18,279 --> 00:19:22,299
different ways that they can be

470
00:19:19,840 --> 00:19:25,360
exploited I like to look at other

471
00:19:22,299 --> 00:19:27,070
people's work too so now that you know

472
00:19:25,360 --> 00:19:29,949
what cross-site scripting is and how to

473
00:19:27,070 --> 00:19:33,549
spot it and how to exploit it how about

474
00:19:29,950 --> 00:19:35,200
preventing it so preventing it is going

475
00:19:33,549 --> 00:19:36,820
to be avoiding breakout characters from

476
00:19:35,200 --> 00:19:38,770
changing the context and telling the

477
00:19:36,820 --> 00:19:40,658
parser to hey now I want this element

478
00:19:38,770 --> 00:19:43,480
added to the page because like we talked

479
00:19:40,659 --> 00:19:47,730
about earlier it's it's a gradual

480
00:19:43,480 --> 00:19:49,559
process it doesn't happen all at once so

481
00:19:47,730 --> 00:19:52,500
use the tools that you have don't roll

482
00:19:49,559 --> 00:19:55,320
your own URL parsers or serialization

483
00:19:52,500 --> 00:19:56,880
code use the built-in XSS prevention I

484
00:19:55,320 --> 00:19:58,230
can't tell you how many times they've

485
00:19:56,880 --> 00:20:00,600
looked at an application and seeing

486
00:19:58,230 --> 00:20:02,820
these safe protections like in reacts

487
00:20:00,600 --> 00:20:06,899
that dangerously set in our HTML turned

488
00:20:02,820 --> 00:20:09,570
on it's in the name it's in the name or

489
00:20:06,899 --> 00:20:11,789
Django has something marked is safe it's

490
00:20:09,570 --> 00:20:14,809
like this is not safe don't do that

491
00:20:11,789 --> 00:20:20,340
there are other ways to do what you want

492
00:20:14,809 --> 00:20:23,190
let's see all right so don't use Raj to

493
00:20:20,340 --> 00:20:26,879
HTML methods or don't disable encoding

494
00:20:23,190 --> 00:20:28,919
with your environment out see here's a

495
00:20:26,880 --> 00:20:32,039
couple examples native JavaScript you've

496
00:20:28,919 --> 00:20:34,409
got enter HTML eval or just directly

497
00:20:32,039 --> 00:20:37,200
using the JavaScript protocol on the

498
00:20:34,409 --> 00:20:40,440
right angular has a couple other or like

499
00:20:37,200 --> 00:20:41,940
bypass security soy has one called no

500
00:20:40,440 --> 00:20:44,370
auto escape I'm sure there are a ton of

501
00:20:41,940 --> 00:20:50,519
other ones and these the ones I can do

502
00:20:44,370 --> 00:20:52,760
off the top my head other prevention use

503
00:20:50,519 --> 00:20:57,269
an accept list so let's say for example

504
00:20:52,760 --> 00:20:59,070
my example of a escaping everything it's

505
00:20:57,269 --> 00:21:02,940
fine but what if your tool you're making

506
00:20:59,070 --> 00:21:04,860
is an HTML generator let's say you have

507
00:21:02,940 --> 00:21:06,960
to make something so a client can add

508
00:21:04,860 --> 00:21:11,158
their own HTML to your site which sounds

509
00:21:06,960 --> 00:21:12,779
really dirty so you can use something

510
00:21:11,159 --> 00:21:15,120
like an accept list of acceptable

511
00:21:12,779 --> 00:21:17,399
characters and we specify accept list

512
00:21:15,120 --> 00:21:19,229
versus deny list because denialists

513
00:21:17,399 --> 00:21:21,059
there are a lot of ways to get around

514
00:21:19,230 --> 00:21:22,950
something and attackers have a lot more

515
00:21:21,059 --> 00:21:26,250
time than us to develop something safely

516
00:21:22,950 --> 00:21:27,659
so perhaps they use a nested payload so

517
00:21:26,250 --> 00:21:30,269
the first time you look at it it doesn't

518
00:21:27,659 --> 00:21:32,940
trigger because it's SCR and script on

519
00:21:30,269 --> 00:21:35,039
this side and when it gets part of gets

520
00:21:32,940 --> 00:21:37,769
rid of the beginning of the script

521
00:21:35,039 --> 00:21:40,049
payload it has an actual payload so the

522
00:21:37,769 --> 00:21:41,490
filter might not be recursive perhaps

523
00:21:40,049 --> 00:21:43,740
you have spaces in the payload and the

524
00:21:41,490 --> 00:21:45,240
browser is helping you and much much

525
00:21:43,740 --> 00:21:46,590
more that we don't even want to think

526
00:21:45,240 --> 00:21:51,720
about because we can do it the right way

527
00:21:46,590 --> 00:21:53,250
and use a an accept list okay so it's

528
00:21:51,720 --> 00:21:55,289
different types of escaping escaping

529
00:21:53,250 --> 00:21:56,730
four elements looks like this so when I

530
00:21:55,289 --> 00:21:58,200
was talking about escaping that's fine

531
00:21:56,730 --> 00:21:59,320
and dandy but actually seeing what it

532
00:21:58,200 --> 00:22:00,850
looks like so

533
00:21:59,320 --> 00:22:04,000
characters on the left those where our

534
00:22:00,850 --> 00:22:06,310
HTML characters to build our elements

535
00:22:04,000 --> 00:22:07,480
HTML escape looks like this so if you're

536
00:22:06,310 --> 00:22:09,429
tinkering with the page and you're

537
00:22:07,480 --> 00:22:11,050
putting your payload in and you go to

538
00:22:09,430 --> 00:22:12,970
inspect the element and look at it if

539
00:22:11,050 --> 00:22:14,970
you see this you're busted you're not

540
00:22:12,970 --> 00:22:17,770
going to be able to play with XSS here

541
00:22:14,970 --> 00:22:19,510
and also XML is very close you can see

542
00:22:17,770 --> 00:22:24,240
that just slash is the only one that's

543
00:22:19,510 --> 00:22:24,240
different all right

544
00:22:24,300 --> 00:22:30,190
okay so more about URL encoding this

545
00:22:28,300 --> 00:22:32,500
example from the page renders a user

546
00:22:30,190 --> 00:22:35,170
supplied directly from the URL so on the

547
00:22:32,500 --> 00:22:37,300
top we have a user set to our payload on

548
00:22:35,170 --> 00:22:38,830
the bottom we see this is escaped and

549
00:22:37,300 --> 00:22:41,230
it's gibberish and it's not really going

550
00:22:38,830 --> 00:22:46,899
to be rendered in the page so it's not

551
00:22:41,230 --> 00:22:48,820
going to fire excuse me okay so I talked

552
00:22:46,900 --> 00:22:52,270
about headers and sometimes you can use

553
00:22:48,820 --> 00:22:56,169
some headers to help you out with with

554
00:22:52,270 --> 00:22:58,330
our cross-site scripting so we have CSP

555
00:22:56,170 --> 00:23:00,850
so content security policy

556
00:22:58,330 --> 00:23:03,429
it's a restriction intended for XSS

557
00:23:00,850 --> 00:23:05,560
mitigation it uses that except list

558
00:23:03,430 --> 00:23:08,310
approach we discussed earlier as being a

559
00:23:05,560 --> 00:23:10,540
list of values that are positive to use

560
00:23:08,310 --> 00:23:12,510
it's intention it's to narrow down which

561
00:23:10,540 --> 00:23:16,240
domains can run code on your site so

562
00:23:12,510 --> 00:23:19,780
above is an example of a header allowing

563
00:23:16,240 --> 00:23:23,140
payment site comm to run and there's a

564
00:23:19,780 --> 00:23:25,270
some blacks controls here so just like

565
00:23:23,140 --> 00:23:28,300
we talked about earlier with the don't

566
00:23:25,270 --> 00:23:31,120
use the star to let anyone run this is

567
00:23:28,300 --> 00:23:34,990
great but mind you since we talked about

568
00:23:31,120 --> 00:23:37,479
how this works know that CSP is not a

569
00:23:34,990 --> 00:23:39,760
full preventive method this is going to

570
00:23:37,480 --> 00:23:42,460
help you with resources loading and

571
00:23:39,760 --> 00:23:45,760
running on the page it's not a full XSS

572
00:23:42,460 --> 00:23:47,290
mitigation this is just helpful also as

573
00:23:45,760 --> 00:23:48,790
an aside if you do decide to use this

574
00:23:47,290 --> 00:23:50,649
it'll the state disable inline

575
00:23:48,790 --> 00:23:53,260
JavaScript and some older browsers don't

576
00:23:50,650 --> 00:23:56,470
have this protection so it's just a

577
00:23:53,260 --> 00:23:58,240
band-aid and for some of those older

578
00:23:56,470 --> 00:24:01,420
browsers that don't have CSP we have

579
00:23:58,240 --> 00:24:05,500
this header called XS SS X yeah say that

580
00:24:01,420 --> 00:24:07,120
three times fast X XSS you can decide

581
00:24:05,500 --> 00:24:10,750
how much or how little protection you

582
00:24:07,120 --> 00:24:12,580
want it can block the webpage from being

583
00:24:10,750 --> 00:24:15,060
loaded entirely or just not do anything

584
00:24:12,580 --> 00:24:15,060
at all

585
00:24:15,310 --> 00:24:22,669
also Chrome has a similar auditor so

586
00:24:19,220 --> 00:24:24,110
Chrome will be looking for reflected

587
00:24:22,670 --> 00:24:25,490
cross-site scripting since we talked

588
00:24:24,110 --> 00:24:27,500
about how many different types there are

589
00:24:25,490 --> 00:24:30,530
you can't rely on stuff like this this

590
00:24:27,500 --> 00:24:32,030
is just helpful and also as an aside if

591
00:24:30,530 --> 00:24:33,590
you're doing security testing or

592
00:24:32,030 --> 00:24:36,080
recommend using Firefox so you don't

593
00:24:33,590 --> 00:24:37,340
have false negative so you don't miss

594
00:24:36,080 --> 00:24:43,189
out on some of those payloads being

595
00:24:37,340 --> 00:24:45,050
triggered slim facts all right

596
00:24:43,190 --> 00:24:46,610
I'm going to show you a live demo so

597
00:24:45,050 --> 00:24:52,580
fingers crossed it doesn't blow up on me

598
00:24:46,610 --> 00:24:56,659
okay yeah all right so first we're gonna

599
00:24:52,580 --> 00:25:03,679
have reflected cross-site scripting and

600
00:24:56,660 --> 00:25:11,240
I have an instance here that's good hey

601
00:25:03,680 --> 00:25:16,610
that's a presentation okay so okay and

602
00:25:11,240 --> 00:25:19,190
see it all right here we have Google

603
00:25:16,610 --> 00:25:21,350
Greer and I'm going to show you what

604
00:25:19,190 --> 00:25:23,150
reflected looks like so let's say I just

605
00:25:21,350 --> 00:25:27,439
clicked on a link for free sunglasses

606
00:25:23,150 --> 00:25:28,700
and I love them I want them okay these

607
00:25:27,440 --> 00:25:31,910
people straining it's hard to see

608
00:25:28,700 --> 00:25:35,060
basically what this this is set to is

609
00:25:31,910 --> 00:25:39,860
URL slash and then payload so at the

610
00:25:35,060 --> 00:25:42,440
script alert at the end and this is

611
00:25:39,860 --> 00:25:44,659
being added back to the page so in the

612
00:25:42,440 --> 00:25:47,210
code I would normally be looking for a

613
00:25:44,660 --> 00:25:49,490
parameter like user set to something but

614
00:25:47,210 --> 00:25:51,200
in this code base if you have an error

615
00:25:49,490 --> 00:25:53,030
it directly adds it to the page who

616
00:25:51,200 --> 00:25:54,470
reflects it back to the page so if I was

617
00:25:53,030 --> 00:25:55,879
using Chrome this would probably be

618
00:25:54,470 --> 00:25:57,710
blocked or if I had some of those

619
00:25:55,880 --> 00:25:59,960
headers we showed about earlier it would

620
00:25:57,710 --> 00:26:03,140
be blocked as well so you can see here

621
00:25:59,960 --> 00:26:06,880
invalid request to this endpoint so

622
00:26:03,140 --> 00:26:09,770
that's all reflected here now this tool

623
00:26:06,880 --> 00:26:10,910
we're it's also freely available in the

624
00:26:09,770 --> 00:26:13,420
Internet they want to tinker and find

625
00:26:10,910 --> 00:26:15,950
some the other lovely things in here

626
00:26:13,420 --> 00:26:19,070
this tool has some snippets that are

627
00:26:15,950 --> 00:26:22,400
stored to the page so this seems like a

628
00:26:19,070 --> 00:26:25,760
very wonderful opportunity time to look

629
00:26:22,400 --> 00:26:26,410
for stored cross-site scripting so let's

630
00:26:25,760 --> 00:26:28,180
see new

631
00:26:26,410 --> 00:26:31,140
snippet we're just gonna go for the gold

632
00:26:28,180 --> 00:26:34,930
here all right script alert one

633
00:26:31,140 --> 00:26:36,970
check it out oh my gosh it didn't add it

634
00:26:34,930 --> 00:26:37,390
to the page let's take a look what

635
00:26:36,970 --> 00:26:40,030
happened

636
00:26:37,390 --> 00:26:45,070
they sanitized it somehow so I'm going

637
00:26:40,030 --> 00:26:47,850
to inspect it all right locked

638
00:26:45,070 --> 00:26:55,929
whatever that means something's locked

639
00:26:47,850 --> 00:27:00,610
edit okay let's try something else okay

640
00:26:55,930 --> 00:27:03,190
so let's try a table row and see if we

641
00:27:00,610 --> 00:27:05,229
can get our parser to add this to the

642
00:27:03,190 --> 00:27:07,420
page and fix my pelos that's broken see

643
00:27:05,230 --> 00:27:11,800
it's missing a bracket and I'm telling

644
00:27:07,420 --> 00:27:12,460
it table and then missing the ends let's

645
00:27:11,800 --> 00:27:16,330
see we got here

646
00:27:12,460 --> 00:27:18,070
oh hey also limited HTML is supported so

647
00:27:16,330 --> 00:27:20,020
I know they're accepting some I just

648
00:27:18,070 --> 00:27:23,200
don't know what it is because I don't

649
00:27:20,020 --> 00:27:26,170
have access to your code okay this is

650
00:27:23,200 --> 00:27:28,840
getting more interesting I see this has

651
00:27:26,170 --> 00:27:31,090
been moved around on the page but my

652
00:27:28,840 --> 00:27:33,070
payload doesn't exist here where I

653
00:27:31,090 --> 00:27:36,600
dropped it so that's not quite happening

654
00:27:33,070 --> 00:27:36,600
but I can see things being moved around

655
00:27:37,320 --> 00:27:47,379
so let's try this one all right

656
00:27:42,910 --> 00:27:51,340
images are great let's try an image wait

657
00:27:47,380 --> 00:27:54,400
my snippets new snippet I can computer

658
00:27:51,340 --> 00:27:55,959
alright so what this is telling us what

659
00:27:54,400 --> 00:27:58,600
we're doing here is we're going to set

660
00:27:55,960 --> 00:28:02,020
this to an image H this is image HTML

661
00:27:58,600 --> 00:28:03,580
tag and it's telling us this the place

662
00:28:02,020 --> 00:28:07,510
where you can upload this image the

663
00:28:03,580 --> 00:28:10,470
source is set to X and X is not here so

664
00:28:07,510 --> 00:28:12,670
it's not going to work but it's on error

665
00:28:10,470 --> 00:28:19,530
call out to the JavaScript interpreter

666
00:28:12,670 --> 00:28:19,530
and do what I say let's do B get it here

667
00:28:20,340 --> 00:28:26,240
hacked

668
00:28:23,000 --> 00:28:30,080
we did it all right

669
00:28:26,240 --> 00:28:31,700
I didn't have an example for self but I

670
00:28:30,080 --> 00:28:33,439
think you guys might understand it's if

671
00:28:31,700 --> 00:28:35,179
you modify something that's only for

672
00:28:33,440 --> 00:28:37,760
your page so it might be a cookie value

673
00:28:35,179 --> 00:28:39,559
it might be something that you see and

674
00:28:37,760 --> 00:28:43,730
also blind is a lot more challenging to

675
00:28:39,559 --> 00:28:45,770
do so those were our main examples let's

676
00:28:43,730 --> 00:28:46,580
show you some resources then have some

677
00:28:45,770 --> 00:28:52,250
time for questions

678
00:28:46,580 --> 00:28:53,928
- all right some resources this will

679
00:28:52,250 --> 00:28:58,940
also be on Twitter I'm gonna send this

680
00:28:53,929 --> 00:29:01,220
up because it's magnificent so many

681
00:28:58,940 --> 00:29:02,720
resources so I didn't come up through a

682
00:29:01,220 --> 00:29:06,020
stem degree so a lot of this stuff I've

683
00:29:02,720 --> 00:29:08,030
learned from our community port sugar

684
00:29:06,020 --> 00:29:10,760
which is burp suite that's a tool I was

685
00:29:08,030 --> 00:29:13,668
using for proxy has a great resource on

686
00:29:10,760 --> 00:29:15,370
cross-site scripting Gruyere was a

687
00:29:13,669 --> 00:29:19,070
Google intentionally vulnerable

688
00:29:15,370 --> 00:29:20,120
application google has a game an XSS

689
00:29:19,070 --> 00:29:21,830
game that's actually pretty challenging

690
00:29:20,120 --> 00:29:24,020
so you sit down and try to to work

691
00:29:21,830 --> 00:29:26,389
through the next level exploiting some

692
00:29:24,020 --> 00:29:28,730
of things we talked about there's some

693
00:29:26,390 --> 00:29:31,250
sec list so one of the examples I said

694
00:29:28,730 --> 00:29:35,840
go here and see it for four different

695
00:29:31,250 --> 00:29:39,620
payloads that's a this is Daniel

696
00:29:35,840 --> 00:29:41,299
nesler's sec list there's also some

697
00:29:39,620 --> 00:29:47,209
videos but not all of us like to read

698
00:29:41,299 --> 00:29:48,379
you know tons of dense text some

699
00:29:47,210 --> 00:29:50,900
miscellaneous stuff some good things

700
00:29:48,380 --> 00:29:53,710
about web app testing some cheat sheets

701
00:29:50,900 --> 00:29:56,860
so look at how to test different things

702
00:29:53,710 --> 00:29:58,270
reference material on top 10 bones

703
00:29:56,860 --> 00:30:01,189
bugcrowd

704
00:29:58,270 --> 00:30:03,500
this is a great resource so if you like

705
00:30:01,190 --> 00:30:05,690
hands-on stuff like I do this is more

706
00:30:03,500 --> 00:30:09,409
geared towards researchers and testers

707
00:30:05,690 --> 00:30:11,330
so they'll show you different ways to to

708
00:30:09,409 --> 00:30:15,409
work with testing applications and video

709
00:30:11,330 --> 00:30:16,399
format books web application hacker's

710
00:30:15,409 --> 00:30:19,190
handbook is de-facto

711
00:30:16,400 --> 00:30:20,539
good stuff the tangled web personally I

712
00:30:19,190 --> 00:30:23,000
really like learning about what's

713
00:30:20,539 --> 00:30:24,620
happening and why so tangled web also

714
00:30:23,000 --> 00:30:27,710
one I have not put up yet is there's a

715
00:30:24,620 --> 00:30:29,899
book on the HTTP protocol that's it's

716
00:30:27,710 --> 00:30:33,300
like 500 pages but it's really good

717
00:30:29,900 --> 00:30:35,730
stuff okay in

718
00:30:33,300 --> 00:30:38,750
vulnerable web apps so we want to test

719
00:30:35,730 --> 00:30:42,180
your chops and not get arrested right

720
00:30:38,750 --> 00:30:46,200
bad store google Briere Metasploit well

721
00:30:42,180 --> 00:30:48,330
three but if you want to get paid go

722
00:30:46,200 --> 00:30:49,740
work on some bug bounties you'll get

723
00:30:48,330 --> 00:30:51,270
paid to do that to work within their

724
00:30:49,740 --> 00:30:53,400
restrictions it'll tell you on a bounty

725
00:30:51,270 --> 00:30:55,350
page what you can and cannot test i

726
00:30:53,400 --> 00:30:57,030
strongly recommend using these rather

727
00:30:55,350 --> 00:30:58,320
than a private bounty so say if a

728
00:30:57,030 --> 00:30:59,910
website has their own bounty and they

729
00:30:58,320 --> 00:31:02,460
say contact us

730
00:30:59,910 --> 00:31:04,230
i don't want any hassle you hear about

731
00:31:02,460 --> 00:31:07,230
hackers being sued and things like that

732
00:31:04,230 --> 00:31:09,720
all the time don't mess with it he's

733
00:31:07,230 --> 00:31:16,020
some of these resources alright he's got

734
00:31:09,720 --> 00:31:38,520
questions debbie shy i'm also going to

735
00:31:16,020 --> 00:31:40,290
post this later yes well i think i might

736
00:31:38,520 --> 00:31:42,870
get in trouble if i talk about specifics

737
00:31:40,290 --> 00:31:45,750
because I work I work specifically for

738
00:31:42,870 --> 00:31:49,290
indeed so I can't I might get in trouble

739
00:31:45,750 --> 00:31:52,020
but I'll see it's not it's not as fair

740
00:31:49,290 --> 00:31:55,290
as I would like it to be and what I did

741
00:31:52,020 --> 00:31:57,060
was I worked with the team that created

742
00:31:55,290 --> 00:32:00,930
that back-end service that it was

743
00:31:57,060 --> 00:32:02,940
calling back and put in a CSP header so

744
00:32:00,930 --> 00:32:05,640
even if something did trigger it wouldn

745
00:32:02,940 --> 00:32:06,930
X will trade out which it's kind of it's

746
00:32:05,640 --> 00:32:09,240
like playing whack-a-mole right if you

747
00:32:06,930 --> 00:32:11,790
give people a tool to to query things

748
00:32:09,240 --> 00:32:14,250
they're not everyone's a developer I

749
00:32:11,790 --> 00:32:20,159
mean even as a developer I didn't know I

750
00:32:14,250 --> 00:32:21,720
didn't know what I was doing so it is

751
00:32:20,160 --> 00:32:23,760
worthwhile trying it out because I mean

752
00:32:21,720 --> 00:32:25,620
there's nothing quite as magnificent I

753
00:32:23,760 --> 00:32:27,510
tested this one product and they swore

754
00:32:25,620 --> 00:32:28,800
up and down that they had a recent pen

755
00:32:27,510 --> 00:32:31,290
test and they really didn't want to

756
00:32:28,800 --> 00:32:32,790
allow me to test I dropped in some of

757
00:32:31,290 --> 00:32:36,389
those flying payloads and getting that

758
00:32:32,790 --> 00:32:37,970
callback was just proof positive so it's

759
00:32:36,390 --> 00:32:40,410
it's worth trying it out

760
00:32:37,970 --> 00:32:42,890
no be shy y'all came all the way from

761
00:32:40,410 --> 00:32:42,890
Texas

762
00:32:44,350 --> 00:32:49,779
yes I actually have to send this to my

763
00:32:48,009 --> 00:32:51,809
personal account first because this was

764
00:32:49,779 --> 00:32:55,389
work materials and I can't share the

765
00:32:51,809 --> 00:32:56,620
Google Drive for my work yeah so I'm

766
00:32:55,389 --> 00:32:59,830
gonna share it on my personal account

767
00:32:56,620 --> 00:33:01,750
later and that's my my handle too so if

768
00:32:59,830 --> 00:33:03,428
you're shy and you don't want to talk in

769
00:33:01,750 --> 00:33:05,919
front of a group we can talk afterwards

770
00:33:03,429 --> 00:33:07,299
also on Twitter I like to help other

771
00:33:05,919 --> 00:33:09,580
people in the community because I came

772
00:33:07,299 --> 00:33:13,110
up through people in my community so

773
00:33:09,580 --> 00:33:16,460
yeah thank you everybody

774
00:33:13,110 --> 00:33:16,459
[Applause]

