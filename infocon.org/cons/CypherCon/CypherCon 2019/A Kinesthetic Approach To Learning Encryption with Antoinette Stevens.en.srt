1
00:00:20,980 --> 00:00:27,020
I'm Antoinette Stevens. I am a cyber security analyst at Principal Financial Group in

2
00:00:27,020 --> 00:00:31,910
Des Moines, Iowa and I am the founder and
executive director for Reboot Iowa, a

3
00:00:31,910 --> 00:00:37,670
nonprofit I founded  to help adults
learn literacy, basic coding skills and

4
00:00:37,670 --> 00:00:42,710
then they say personal security
practices. I am a member of the Des

5
00:00:42,710 --> 00:00:50,470
Moines City SEC. SEC DSN. An organizer
for Besides Iowa. And I also help design

6
00:00:50,470 --> 00:00:56,510
CTF challenges for them, from time to time. And then, I also work at a arcade bar

7
00:00:56,510 --> 00:01:01,010
called Uptown, where I work on the games.
Which is a new adventure for me. I'm not

8
00:01:01,010 --> 00:01:08,660
really a hardware person, but I'm learning to be. So a quick disclaimer about learning

9
00:01:08,660 --> 00:01:12,860
styles. The title of his talk mentions
the word kinesthetic, which is a

10
00:01:12,860 --> 00:01:17,539
reference to a learning style introduced
in the early nineties by Fleming in

11
00:01:17,539 --> 00:01:23,990
Mills in the vark questionnaire. S,o
learning styles are traditionally

12
00:01:23,990 --> 00:01:27,530
researched and used. Teachers learn
how to help their students learn better.

13
00:01:27,530 --> 00:01:31,760
But a recent research to actually point out
that learning styles are a myth.

14
00:01:31,760 --> 00:01:37,820
You don't actually learn better
baseline auditory or visual or anything like that.

15
00:01:37,820 --> 00:01:41,750
It's more of a holistic approach. Which is
really fun to find out when you're

16
00:01:41,750 --> 00:01:46,700
researching for a talk. That mentions the
kinesthetic learning style. All basically

17
00:01:46,700 --> 00:01:51,229
is bullshit. So for the purposes of this
talk, we'll just be going that the

18
00:01:51,229 --> 00:01:55,400
colloquial meaning. Which is just hands
on so, it's just the hands-on approach to

19
00:01:55,400 --> 00:02:04,130
learning English. All right, so I really
wanted to learn encryption. But my job

20
00:02:04,130 --> 00:02:10,160
doesn't require me to know it. I'm limited
and am not a developer. And I

21
00:02:10,160 --> 00:02:15,609
also really like doing capture the flag
competitions and also never really

22
00:02:15,610 --> 00:02:22,240
knew how to do the encryption challenge. So it really helped me to combine the two together and learning

23
00:02:22,240 --> 00:02:29,290
encryption through CTS and specifically recreating them. So I decided to start looking up

24
00:02:29,290 --> 00:02:34,989
old CTS challenges, specifically their
write-ups. And the track I chose to kind

25
00:02:34,990 --> 00:02:40,930
of recreate was the AES these level
challenges and the essays short keelin

26
00:02:40,930 --> 00:02:46,780
challenge. And I kind of got my
methodology down to three steps which is

27
00:02:46,780 --> 00:02:59,230
to scope, research and to recreate. So, I
chose scoping your challenge really

28
00:02:59,230 --> 00:03:03,910
important. Specifically because
encryption is such a broad field. AES

29
00:03:03,910 --> 00:03:10,450
alone has several different modes and
several different key links. And so scoping

30
00:03:10,450 --> 00:03:15,100
your challenge to something narrow helps
you to learn in smaller, more in digestible

31
00:03:15,100 --> 00:03:18,700
chunks. Instead of getting
information overload by trying to learn

32
00:03:18,700 --> 00:03:23,679
everything at once and not really knowing where to start. So make sure if you're

33
00:03:23,680 --> 00:03:31,820
going to do that, just scope down to
something very specific. And also define challenges to be pretty specific.

34
00:03:32,580 --> 00:03:38,620
So, research the challenge. Which kind of
speaks for itself. But you wanna start

35
00:03:38,620 --> 00:03:43,120
reading about those concepts related to
what you're looking at. So I looked a lot

36
00:03:43,120 --> 00:03:49,870
at why prime numbers are important for the RSA challenge. And I looked at what ECP

37
00:03:49,870 --> 00:03:55,630
mode even is, while looking at that. You want to look up tools to help. While

38
00:03:55,630 --> 00:03:58,299
I was reading through these things you
come across tools, you kind of want to

39
00:03:58,300 --> 00:04:03,730
save those for later. Because they come in handy. And then most importantly, find write-up's.

40
00:04:03,730 --> 00:04:09,760
But, have similar challenges for the focus
is that you need. So I want to talk about

41
00:04:09,760 --> 00:04:15,549
write-up's specifically and what a good write-up is. So for anyone here who reads CTF write-up's,

42
00:04:15,550 --> 00:04:27,450
what do you think makes a good write-up? You can just shout it out. No one?

43
00:04:27,450 --> 00:04:36,760
Okay cool. - I like seeing code examples. Antoinette - You like seeing code examples? Anyone else? Okay, so

44
00:04:36,760 --> 00:04:41,110
for me, a good write-up provides details
about the challenge itself. I know you can't

45
00:04:41,110 --> 00:04:56,140
see this, it's OK. But this, this is, this is
a snippet from a writ-up from enigma

46
00:04:56,140 --> 00:05:01,990
2017, called broken encryption. And it's
kind of like a double-oh-seven challenge

47
00:05:01,990 --> 00:05:05,440
run. This program is running, you connect it to a server and have this program

48
00:05:05,440 --> 00:05:12,490
that's like interior agent number and
then it spits out a bunch of garbled

49
00:05:12,490 --> 00:05:20,800
text which is your encrypted flag is in
there. So you provided what was given to

50
00:05:20,800 --> 00:05:24,100
him as the challenge, which is really
helpful when you want t o build this later.

51
00:05:24,100 --> 00:05:26,820
You really don't have to do much guesswork.

52
00:05:28,080 --> 00:05:34,419
This code snippet comes from see-saw
2017 and it's called Bcrypt. So I think

53
00:05:34,420 --> 00:05:40,090
good write-ups have diagrams, and
really detailed explanations of the

54
00:05:40,090 --> 00:05:46,239
concepts in them. So this specific one is
pointing out how ECB mode encrypts

55
00:05:46,240 --> 00:05:50,300
data in fourteen, I'm sorry, sixteen byte
chunks.

56
00:05:55,840 --> 00:06:00,440
It mentions tools that are helpful, and
you can't see it in here. So this came

57
00:06:00,440 --> 00:06:08,150
from our RSA article and mentions two
tools Yahoo and vector DV. Which for

58
00:06:08,150 --> 00:06:12,409
RSA short key length as you'll see
later, it's really important people get

59
00:06:12,410 --> 00:06:19,940
factors from a part of your public key.
So those two tools really hope to make

60
00:06:19,940 --> 00:06:25,580
that process a lot quicker. And then they
have detailed explanations with their

61
00:06:25,580 --> 00:06:30,639
solutions. So all of the write-ups that I
chose to use to recreate my challenges

62
00:06:30,639 --> 00:06:35,570
included the scripts that were used to
solve the challenge. And also a detailed

63
00:06:35,570 --> 00:06:39,500
explanation of why their scripts worked
and why I chose to solve it in that way.

64
00:06:39,500 --> 00:06:48,500
So recreating the challenge. I started
both by generating the keys

65
00:06:48,500 --> 00:06:53,690
necessary and making sure that I can
encrypt and decrypt data before I went

66
00:06:53,690 --> 00:06:59,780
ahead and tried to break it. The AES challenge was actually the easier one to

67
00:06:59,780 --> 00:07:04,520
recreate. Simply the hardest part
there was making sure I have the key

68
00:07:04,520 --> 00:07:10,159
correct. Which is something that should
have been a lot easier than it was, but

69
00:07:10,160 --> 00:07:14,960
it took a while. The RSA challenge is the one that gave me the most trouble. And I

70
00:07:14,960 --> 00:07:20,590
kept hitting three errors of note that
I'll talk about in a moment.

71
00:07:20,590 --> 00:07:27,830
So the RSA short key length
challenge. RSA stands for Rivest,

72
00:07:27,830 --> 00:07:32,719
Shamir, Adleman. And is a asymmetric cryptographic algorithm meaning. It has a

73
00:07:32,720 --> 00:07:37,940
private key and a public key. So for the
RSA challenge that I created, it

74
00:07:37,940 --> 00:07:44,000
wasn't actually based on a CTF. More so
it was based on a write-up I found from

75
00:07:44,000 --> 00:07:48,229
Sebastian Neef on 0day.work where he kind of talks about why short key lengths

76
00:07:48,229 --> 00:07:54,740
and RSA are bad. So the three
issues I ran into were generating the

77
00:07:54,740 --> 00:07:59,280
keys to begin with. A lot of things don't
let you do short key lengths

78
00:07:59,280 --> 00:08:05,609
for RSA. Whether to pad or not pad
the data that I was encrypting. A nd then

79
00:08:05,610 --> 00:08:10,740
finding the P and Q which would help you
get the two prime numbers you need to

80
00:08:10,740 --> 00:08:17,220
generate the private-key. All right, so
this is a public and private key.

81
00:08:17,220 --> 00:08:19,980
It's fine, it's not used anywhere.
Normally you don't want to share your

82
00:08:19,980 --> 00:08:26,280
private key with people. Usually you keep
your private key and other people can

83
00:08:26,280 --> 00:08:33,000
have your public key to encrypt data and
you can decrypt it with the private key. So what you want to

84
00:08:33,000 --> 00:08:39,089
pay attention here to here is the
modulus, and the private exponent. So the

85
00:08:39,089 --> 00:08:43,800
mod and the public key is what we'll
use to get our PDQ which can later go

86
00:08:43,799 --> 00:08:48,000
through another algorithm to get the
private exponent, but I'll talk about

87
00:08:48,000 --> 00:08:54,570
that a little more in a second. Generating
this was not easy, specifically because I

88
00:08:54,570 --> 00:08:59,580
originally tried to do it in Python and
Python won't let you generate RSA keys

89
00:08:59,580 --> 00:09:08,300
shorter than 1024 bits. So I wanted to do
256 bits,  which meant I had to switch to open SSL.

90
00:09:11,500 --> 00:09:14,640
The next wall I kept  hitting
was whether or not I wanted to pad the

91
00:09:14,640 --> 00:09:21,540
data. So what we're looking at here is
the PKCS1, a padding scheme. And what

92
00:09:21,540 --> 00:09:28,110
it's basically saying is that you cannot
encrypt more data than the size of your

93
00:09:28,110 --> 00:09:36,780
mod. So my mod is 33 bytes, and so the
algorithm goes, the size of your data

94
00:09:36,780 --> 00:09:44,939
cannot be larger than 33 minus 11. So I
can have 22 bytes of data and the rest

95
00:09:44,940 --> 00:09:53,190
gets padded and then I can do encryption. Any more than that, and I'll get a lot of your data is too large

96
00:09:53,190 --> 00:09:57,060
errors, which is what I was dealing with
before I decided to look at how padding

97
00:09:57,060 --> 00:10:02,459
works. If you don't want to deal with
that, then you ca.n do the raw flag in

98
00:10:02,460 --> 00:10:04,990
open SSL and then you can go pad it yourself.

99
00:10:04,990 --> 00:10:12,910
but 22x of not a lot of data it's barely
a sentence so it was really interesting

100
00:10:12,910 --> 00:10:20,469
trying to do this it's just enough where
flag though and then once I was able to

101
00:10:20,470 --> 00:10:28,540
incresed the work begins to get European
youth from modulus so if it's fairly

102
00:10:28,540 --> 00:10:35,889
small for like 120 vid mods it's pretty
orbit started 128-bit keys it's pretty

103
00:10:35,889 --> 00:10:43,480
easy to use the factor DB or even
Wolfram Alpha to calculate a human just

104
00:10:43,480 --> 00:10:49,810
factor them but for 256 bits it took a
lot longer so I ended up downloading a

105
00:10:49,810 --> 00:10:56,290
program called Hennessey and so it's a
conceived about 2 minutes to crack the P

106
00:10:56,290 --> 00:11:01,689
and Q and you can go up to about 300 fix
in an RSA key and it only take a few

107
00:11:01,690 --> 00:11:05,440
minutes to crack any more than that and
we started getting into the couple of

108
00:11:05,440 --> 00:11:13,089
hours couple of things couple years
range and then once you have your P and

109
00:11:13,089 --> 00:11:19,839
Q it's pretty easy to just go around and
run the extended Euclidean algorithm to

110
00:11:19,839 --> 00:11:25,449
calculate the modular inverse which will
give you the private exponent that you

111
00:11:25,449 --> 00:11:30,790
need to generate your friend to keep
RSA's punch map wait that's it and it's

112
00:11:30,790 --> 00:11:34,569
not mad that means you know or know how
to do by hand it's just math great need

113
00:11:34,569 --> 00:11:38,889
to know the different parts that go into
it so you can play into something else

114
00:11:38,889 --> 00:11:48,639
so I'm Hong I'm someone else already
broke so it yes 128 which is the key

115
00:11:48,639 --> 00:11:56,050
size ECB mode which is for electronic
codebook was actually pretty fun to try

116
00:11:56,050 --> 00:12:00,389
to figure out so I began by replicating
the double-oh-seven challenge that I had

117
00:12:00,389 --> 00:12:06,790
before and I used Python and you sock it
to the other server to connect to so

118
00:12:06,790 --> 00:12:14,589
that I can kind of copy the way that you
Challenge worked and it's a poem and I'm

119
00:12:14,589 --> 00:12:18,279
proud to admit to generate the key
simply because I didn't understand the

120
00:12:18,279 --> 00:12:23,679
structure of the key needed but I ended
up just doing an in divide which had on

121
00:12:23,679 --> 00:12:30,749
to be eight bits in it which is super
simple although I know for actual

122
00:12:30,749 --> 00:12:35,949
implementations of AES 55 doesn't have
enough engine people to work well and

123
00:12:35,949 --> 00:12:44,079
well you probably not doing once we need
anyway so just enough but once we keep

124
00:12:44,079 --> 00:12:48,099
us properly generated I can imprint and
I knew I could encrypt and decrypt both

125
00:12:48,100 --> 00:12:55,300
ways the trick with AES PCB is to make
sure your blocks online so like I said

126
00:12:55,300 --> 00:12:58,290
before

127
00:12:58,290 --> 00:13:06,550
ATS easy emote specifically doesn't add
any padding to the plaintext before you

128
00:13:06,550 --> 00:13:10,899
print it so what goes in as plain text
it comes out as architects will always

129
00:13:10,899 --> 00:13:16,929
be that same ciphertext so if you know
part of the plaintext in something then

130
00:13:16,929 --> 00:13:22,179
you can see what the cipher text looks
like so the trick with AES 50p mode is

131
00:13:22,179 --> 00:13:27,579
to manipulate your plain text and put in
no plain text that's in the cipher text

132
00:13:27,579 --> 00:13:32,559
and then look for matching blocks which
you'll see in a minute what you need to

133
00:13:32,559 --> 00:13:36,639
know to do this challenge specifically
would be the padding schema if there was

134
00:13:36,639 --> 00:13:44,980
one at it so this one added one and up
to four teams growth and so since you

135
00:13:44,980 --> 00:13:50,860
knew kind of what the structure of the
encrypted data coming out was you could

136
00:13:50,860 --> 00:13:59,170
begin to guess your flag so what you see
here into red blocks it's matching the

137
00:13:59,170 --> 00:14:03,189
pattern so once you're able to align
your sixteen watch you can kind of begin

138
00:14:03,189 --> 00:14:06,959
to guess what the flight is by reading
through all the alphabets and all of

139
00:14:06,959 --> 00:14:14,049
basically the full active range to get
the flag which you don't have to do that

140
00:14:14,049 --> 00:14:18,470
by hand there's a program Alberti
I said you google around and find

141
00:14:18,470 --> 00:14:26,899
scripts to do these things but that
that's basically the challenge and what

142
00:14:26,899 --> 00:14:33,860
this helps me understand is a 80s DCP
hood is complete crap simply because it

143
00:14:33,860 --> 00:14:38,569
would be easy for someone to do that and
guess what you're thinking thing we

144
00:14:38,569 --> 00:14:43,849
don't have any panic and then if they
know any of the plain text that might be

145
00:14:43,850 --> 00:14:51,639
in the cipher text so some of the
lessons I've learned while doing this

146
00:14:51,639 --> 00:14:56,180
take good notes
it seems really trivial but you'd be

147
00:14:56,180 --> 00:14:59,930
surprised how much you don't pay it into
what you're doing while you're doing it

148
00:14:59,930 --> 00:15:03,979
it took me several hours to even read
some things when I should have coming

149
00:15:03,980 --> 00:15:09,470
back to it so taking good notes is super
helpful and also it helps to start

150
00:15:09,470 --> 00:15:12,860
bookmarking things as you go you're not
the type of person who likes to write

151
00:15:12,860 --> 00:15:23,809
things down security be a nun security
so this really helps me understand what

152
00:15:23,809 --> 00:15:29,120
is in place and so we popular programs
to kind of protect developers might

153
00:15:29,120 --> 00:15:36,529
default like I said I find doesn't allow
you to cherokees less than 1024 bits so

154
00:15:36,529 --> 00:15:43,699
the same goes for me learning that our
thing isn't even used to encrypt school

155
00:15:43,699 --> 00:15:47,240
files
he usually encrypts something else and

156
00:15:47,240 --> 00:15:53,480
then encrypt the keys for that with RSA
so it was really good for me to kind of

157
00:15:53,480 --> 00:15:57,230
get that working knowledge which if you
ever reach that goal flow there are a

158
00:15:57,230 --> 00:15:59,779
lot of people in there who are more
familiar and tell you how you're doing

159
00:15:59,779 --> 00:16:07,910
things wrong learn beyond the challenge
so like I said you are scoping which

160
00:16:07,910 --> 00:16:12,469
means you're focusing on a very niche
concept and that also means it won't

161
00:16:12,470 --> 00:16:17,180
translate to every situation so just
because you understand how to break RSA

162
00:16:17,180 --> 00:16:20,790
share key light doesn't mean
how to break other types of

163
00:16:20,790 --> 00:16:29,250
vulnerabilities in the RSA doesn't mean
you understand how to break ABS CDC move

164
00:16:29,250 --> 00:16:33,150
so it really helps once you get the
concept down and you're pretty

165
00:16:33,150 --> 00:16:37,079
comfortable with it to keep trying to
building on that knowledge so it's

166
00:16:37,080 --> 00:16:42,900
basically don't stop here kind of in the
future I'm really interested in learning

167
00:16:42,900 --> 00:16:47,910
more about the different modes of es and
also there are a lot of different

168
00:16:47,910 --> 00:16:52,650
vulnerabilities with parts a it's really
easy to mess up so I really it just fit

169
00:16:52,650 --> 00:16:59,010
to learn about what else is there and
then I really like doing this simply

170
00:16:59,010 --> 00:17:03,569
because my job doesn't let me code a lot
but a degree in computer science so I'd

171
00:17:03,570 --> 00:17:09,690
like to do it from time to time not
every day and blah blah but I like that

172
00:17:09,690 --> 00:17:14,130
if I wanted to learn a new language I
have something right with it that seems

173
00:17:14,130 --> 00:17:18,360
to be a blocker for a lot of people and
what I learn a groupie but I don't have

174
00:17:18,359 --> 00:17:24,800
anything to build so recreate see touch
I'll just gives you something to build

175
00:17:24,859 --> 00:17:30,840
alright thank you
if you want to follow me on Twitter it's

176
00:17:30,840 --> 00:17:35,550
Internet 0 X 53 and then I also have a
website it's when it's Akitas comm where

177
00:17:35,550 --> 00:17:43,260
I do 68 great ups sometimes I'll walk
through right out to the art side CTS

178
00:17:43,260 --> 00:17:46,410
that I've written
only after I knew it will use it again

179
00:17:46,410 --> 00:17:52,700
and I also publish different talks that
I give

180
00:18:49,470 --> 00:18:55,279
you

