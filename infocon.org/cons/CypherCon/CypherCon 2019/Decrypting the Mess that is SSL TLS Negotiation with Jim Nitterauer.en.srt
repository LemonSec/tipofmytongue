1
00:00:20,820 --> 00:00:25,660
My name is Jim Nitterauer, I'm a senior security specialist with Appriver. Appriver  was just

2
00:00:25,660 --> 00:00:35,519
recently purchased by Zix Corporation. I don't know the specifics, as the buyout happened a few weeks ago. This talk is entitled

3
00:00:35,520 --> 00:00:40,940
Decrypting the  Mess that is SSL / TLS Negotiation - Preparing for the 2020 Apocalypse.

4
00:00:40,940 --> 00:00:44,620
Now Disclaimer, this isn't
gonna be very technical. It's gonna' be a bit of an overview of

5
00:00:44,629 --> 00:00:51,519
ssl/tls and what you need to do to make
sure things don't go wrong. When this happens. i had to give a fancy title for the talk.

6
00:00:54,220 --> 00:01:00,649
all right so, disclaimer. The information you're going to hear today is just for your own security.

7
00:01:00,649 --> 00:01:09,800
And privacy policies should be used or
under the purposes that are not my own

8
00:01:09,800 --> 00:01:14,149
research for this information about
gathering from other sources. The information

9
00:01:14,149 --> 00:01:17,300
people's evidence cavity public private
sources and I give it credit where

10
00:01:17,300 --> 00:01:23,210
that's due. And the views expressed in
talk are mine and not of that of my employers. I've

11
00:01:23,210 --> 00:01:27,380
spoken a bunch of different places among
standard besides Las Vegas. Some I'm at Def

12
00:01:27,380 --> 00:01:31,880
Con, Circle City Com retreat on his head
would get involved with these

13
00:01:31,880 --> 00:01:34,789
conferences so I have a little bit of
experience in the stuff.

14
00:01:34,790 --> 00:01:40,340
I saw an invite to come to CypherCon from a friend of mine Dave Schwartzberg and I was trying to

15
00:01:40,340 --> 00:01:45,619
think of something to talk about because,
normally I talk about DNS so this is for

16
00:01:45,619 --> 00:01:52,939
Will. This is the only mention of DNS
in the whole talk. I saw this come across my

17
00:01:52,939 --> 00:01:57,649
desk in my news where I was reading where about Chrome and Firefox, I.E. which is

18
00:01:57,650 --> 00:02:03,799
now gone. To buy he looks down it will
be chromium in the next windows major

19
00:02:03,799 --> 00:02:11,030
update and Safari are gonna disable TLS
1.0 until TLS 1.1 support in 2020. This

20
00:02:11,030 --> 00:02:14,840
specifically is gonna happen by the end
of March 2020. It's already happened

21
00:02:14,840 --> 00:02:20,360
in some versions, but this seems like a
pretty benign headlock right? Well think

22
00:02:20,360 --> 00:02:23,020
about the implications of this prompt
and an end  user

23
00:02:23,020 --> 00:02:25,810
perspective and from a server
perspective, and that's kind of what

24
00:02:25,810 --> 00:02:31,090
we're going to look at. So if you are
either are IT desktop management, your

25
00:02:31,090 --> 00:02:34,630
internal management, you know how to prepare for this or if you're running servers,

26
00:02:34,630 --> 00:02:41,260
websites, API's, mail servers, you can
start to look at your tls/ssl setup and

27
00:02:41,260 --> 00:02:43,899
make sure that you're going to be
compliant so that people don't call you

28
00:02:43,900 --> 00:02:48,940
complaining. Hey I can't get to a website? Or hey, why is your website not working in my browser? Why doesn't yyour email

29
00:02:48,940 --> 00:02:52,720
server not work? Is the kind of things
that can bite you in the butt if you don't

30
00:02:52,720 --> 00:02:55,510
pay attention to them. So we want to go
over some things about how to avoid

31
00:02:55,510 --> 00:02:59,739
those things from happening.
So, today we're gonna have a quick

32
00:02:59,740 --> 00:03:02,740
overview. We're gonna look at the
different versions of SSL and TLS. Look

33
00:03:02,740 --> 00:03:07,420
at the differences in the history we're
going to talk about the SSL negotiation

34
00:03:07,420 --> 00:03:11,709
process but going forward the
terminology should be TLS as SSL based

35
00:03:11,710 --> 00:03:17,230
on exist anymore it's completely
shouldn't be used anywhere we're going

36
00:03:17,230 --> 00:03:23,560
to look at the differences between TLS
1.2 and TLS 1.3 which was just ratified

37
00:03:23,560 --> 00:03:27,280
last year
why that's 270 lost versus corporate

38
00:03:27,280 --> 00:03:31,630
matters we're going to look at some of
the vulnerabilities and the types of

39
00:03:31,630 --> 00:03:35,650
attacks that can be carried out against
TLS and SSL correctly I don't know much

40
00:03:35,650 --> 00:03:38,980
details when we give you a quick
overview of some up woman to the basic

41
00:03:38,980 --> 00:03:43,329
mechanisms of how they work we're gonna
look at some strategies for monitoring

42
00:03:43,330 --> 00:03:47,110
TLS negotiation at the edge of your
network this is important you have to

43
00:03:47,110 --> 00:03:50,110
know what your clients are trying to
connect to how they're trying to connect

44
00:03:50,110 --> 00:03:54,130
and how the conversation happens we're
gonna look at some example data that

45
00:03:54,130 --> 00:03:58,120
gonna show you data that we use in
production it's nothing proprietary I'll

46
00:03:58,120 --> 00:04:02,050
just show you how we can prepare for
this in our environment one of our

47
00:04:02,050 --> 00:04:05,440
services and we're going to look at some
ways when you take that contravene use

48
00:04:05,440 --> 00:04:08,590
it to implement some protection on our
network to keep some of these attacks

49
00:04:08,590 --> 00:04:13,720
from happening and I'll give you some
resources at the end to help you on your

50
00:04:13,720 --> 00:04:21,310
task or getting tell us SSL
ready to go what is tls/ssl basically

51
00:04:21,310 --> 00:04:25,720
the overall goal of TLS is to
protect privacy and integrity of data

52
00:04:25,720 --> 00:04:29,440
flowing over connection between two
endpoints typically the first thing that

53
00:04:29,440 --> 00:04:34,930
comes to mind is what web browser right
but browse HTTP that's a TLS SSL

54
00:04:34,930 --> 00:04:40,540
connection but it also works
IMAP SMTP works and every API every

55
00:04:40,540 --> 00:04:43,870
application on your phone should be
using SSL TLS

56
00:04:43,870 --> 00:04:48,190
between the two endpoints so basically
it's a way to achieve that the client

57
00:04:48,190 --> 00:04:52,360
knows that the endpoint server is
validated it's who they think they are

58
00:04:52,360 --> 00:04:56,620
and of the data in between is encrypted
and some of the great progress in that

59
00:04:56,620 --> 00:05:01,600
message so how does that happen
it's basically to do that process the

60
00:05:01,600 --> 00:05:06,610
first step is using public key for
asymmetric cryptography so you have that

61
00:05:06,610 --> 00:05:12,520
public key that's managed by a by a
trusted source of third-party trusted

62
00:05:12,520 --> 00:05:16,659
source Marisa let's encrypt is pretty
common now right so that's pretty

63
00:05:16,660 --> 00:05:21,940
significant you validate who you are as
a server as a recipient of the can

64
00:05:21,940 --> 00:05:27,910
actually by providing your public key
out to the world my client this looks at

65
00:05:27,910 --> 00:05:32,440
that public key send the request to you
that you decrypt that encrypted

66
00:05:32,440 --> 00:05:37,000
connection with to a private key because
it matches and how we know that the two

67
00:05:37,000 --> 00:05:42,790
are the validate and then once that
connection although more detail how this

68
00:05:42,790 --> 00:05:47,710
happens once that connection is then
established the authentication we switch

69
00:05:47,710 --> 00:05:53,080
to a much faster symmetric cryptography
think of like IPSec

70
00:05:53,080 --> 00:05:57,820
tunnel it depends on that uses symmetric
cryptography where a key is agreed upon

71
00:05:57,820 --> 00:06:01,639
at the time using a cipher suite and the
mechanism or the

72
00:06:01,639 --> 00:06:06,139
their version of tell us that they're
using and that key is used for every

73
00:06:06,139 --> 00:06:10,009
conversation they both know the key they
both use the same team so there's no

74
00:06:10,009 --> 00:06:16,189
need for continuous bass a symmetric
cryptography so some of the things we

75
00:06:16,189 --> 00:06:20,330
have to look out for in SSL TLS is that
it's validated through a public key

76
00:06:20,330 --> 00:06:24,169
cryptography now you can do this
internally with your own self sign keys

77
00:06:24,169 --> 00:06:28,818
but that through the browser error must
generate certification theatres with

78
00:06:28,819 --> 00:06:32,599
that in your browser so there's ways you
can get around that internally but

79
00:06:32,599 --> 00:06:36,438
typically we're talking about public
connections to public facing servers not

80
00:06:36,439 --> 00:06:41,689
internal connections the PKI always has
a certificate revocation path that a

81
00:06:41,689 --> 00:06:46,789
doesn't you won't get an A+ on your
rating for your servers perfect forward

82
00:06:46,789 --> 00:06:51,199
secrecy anybody heard of that term
before all right so what this what this

83
00:06:51,199 --> 00:06:55,969
means is that every time there is a
agreed-upon symmetric key used to

84
00:06:55,969 --> 00:07:00,919
encrypt the second part of the
connection that that key has a nonce or

85
00:07:00,919 --> 00:07:05,000
some sort of padding that's read upon by
both sides of it one time to generate

86
00:07:05,000 --> 00:07:09,409
that keep so that's important because
what if somebody compromises a server

87
00:07:09,409 --> 00:07:13,430
each private key if they could sniffing
your traffic over time even if it's

88
00:07:13,430 --> 00:07:17,270
encrypted if they have your private key
they can decrypt all of that traffic

89
00:07:17,270 --> 00:07:23,000
right because then they know what the
agreed-upon asymmetric key moves but if

90
00:07:23,000 --> 00:07:26,330
you change how it's mentioned he's
generated for every connection that

91
00:07:26,330 --> 00:07:30,258
cannot decrypt anything but that one can
actually when they get the private key

92
00:07:30,259 --> 00:07:35,240
okay so it's a way to prevent that fact
and it should always be in play it's not

93
00:07:35,240 --> 00:07:40,159
always in play and it's not supported in
the older versions of SSL

94
00:07:40,159 --> 00:07:44,449
the other thing we have to look at are
what client-server applications are we

95
00:07:44,449 --> 00:07:48,620
talking about the most common one
obviously is HTTP I'm atmospher

96
00:07:48,620 --> 00:07:51,020
everybody
much as on your property of googlemail

97
00:07:51,020 --> 00:07:58,430
that's my mattress done through secure I
think that exchanges come through HTTP

98
00:07:58,430 --> 00:08:05,030
should be using it smtps has anybody
ever been at DEFCON sea wall sheep wall

99
00:08:05,030 --> 00:08:10,609
of shame where people are using insecure
pop and ice MTP is 70 ml back and forth

100
00:08:10,610 --> 00:08:15,350
their passwords when you use remain show
up in clear text on the wire right to

101
00:08:15,350 --> 00:08:21,140
even Wireshark them screen see what they
are that's why you want to be using the

102
00:08:21,140 --> 00:08:27,200
encrypted version space protocols some
brief history SSL was introduced by

103
00:08:27,200 --> 00:08:33,080
Netscape in 1994 it was never released
in version 1 because we're serious owner

104
00:08:33,080 --> 00:08:38,750
abilities in version 2 was released in
1995 it's a hip month time on here

105
00:08:38,750 --> 00:08:50,570
actually 94 right 25 years ago so this
is over - in 1995 was the first usable

106
00:08:50,570 --> 00:08:55,370
version with SSL welcome use a whole lot
at the time version 3 plays one year

107
00:08:55,370 --> 00:09:05,300
later and we're still seeing SSL 3.0 I
was in a while after three years fix

108
00:09:05,300 --> 00:09:10,189
several design security flaws tell us
one point I was released in 1999 so not

109
00:09:10,190 --> 00:09:15,140
for three years later we can upgrade to
SSL version 3 but they introduced the

110
00:09:15,140 --> 00:09:19,610
vulnerability into that protocol in that
prototype that vulnerability is the SSL

111
00:09:19,610 --> 00:09:23,600
fallback mechanism really nobody thought
anything about it but now it's one of

112
00:09:23,600 --> 00:09:28,010
the biggest ways that people can do DDoS
attacks against services that still

113
00:09:28,010 --> 00:09:32,210
support downgrading of TLS connections
I'll explain more about this in a few

114
00:09:32,210 --> 00:09:40,280
minutes last the next version of TLS
came out in April 2006 so looking in

115
00:09:40,280 --> 00:09:48,079
seven years later it protected against
cipher block chaining attacks in 2008 so

116
00:09:48,080 --> 00:09:53,510
two years later the Oscar
one two came out all those 2008 put

117
00:09:53,510 --> 00:09:58,370
vrc's a marination when i go back later
and look at those and it had a site

118
00:09:58,370 --> 00:10:02,210
birth sweet specific pseudo-random
function this is where it came into the

119
00:10:02,210 --> 00:10:06,680
ability to create the perfect forward
secrecy so that it could not decrypt

120
00:10:06,680 --> 00:10:12,439
previous conversations if you got the
private key and also removed a couple of

121
00:10:12,440 --> 00:10:19,280
the less secure cipher suites SSL
version 2.0 was deprecated in 2011 and

122
00:10:19,280 --> 00:10:22,699
has been recommended for complete
abandonment it has been removed from

123
00:10:22,700 --> 00:10:27,080
pretty much every browser that's out
there if you try to connect by cell 2.0

124
00:10:27,080 --> 00:10:30,640
it just not network services they're
using it

125
00:10:30,640 --> 00:10:36,380
tell us version 1.3 was released in
August last year with the RFC it's a

126
00:10:36,380 --> 00:10:42,740
10-year revision process from TLS 1.2 it
removes several of the less secure

127
00:10:42,740 --> 00:10:49,340
Cypress or sha-1 md5 rc4 that is a
triple desert no longer be usable in TLS

128
00:10:49,340 --> 00:10:56,500
1.3 and it also does something called
the serve name identifier encryption so

129
00:10:56,500 --> 00:11:00,770
if you have any of you have looked at
encrypting and decrypting SSL

130
00:11:00,770 --> 00:11:03,500
connections on your network where you
can actually look at where they're gone

131
00:11:03,500 --> 00:11:07,490
so a lot of the things that you see are
using tell us to point at one point or

132
00:11:07,490 --> 00:11:12,350
above is a server named indicator which
is basically an unencrypted packet that

133
00:11:12,350 --> 00:11:17,530
tells you the domain image of going to
and coming from within the encrypted DLS

134
00:11:17,530 --> 00:11:23,920
within that cryptid strength well tell
us versus 1.3 is going to encrypt that

135
00:11:23,920 --> 00:11:30,380
so any security that you're doing on any
time to less connections with 1.3 won't

136
00:11:30,380 --> 00:11:33,770
be able to do won't be able to man in
the middle attacks very easily with it

137
00:11:33,770 --> 00:11:38,180
with this conversion so it's going to
change how security's done for TLS

138
00:11:38,180 --> 00:11:44,089
connections there's a kind of the
resources here if you want to look at a

139
00:11:44,090 --> 00:11:50,960
long history of TLS and SSL and all the
vulnerabilities and how it's done over

140
00:11:50,960 --> 00:11:56,240
timeline that place need
is pretty good place to start so let's

141
00:11:56,240 --> 00:12:01,730
look at basically how to tell us SSL
connection process work and this is

142
00:12:01,730 --> 00:12:08,180
going to apply to both SSL TLS 1.1 1.2
1.3 / it's the same plan so this is the

143
00:12:08,180 --> 00:12:16,640
OSI model basically the basic Network
layer so all the connectivity happens at

144
00:12:16,640 --> 00:12:21,230
layer 4 below for the TCP connection but
within that there's the application

145
00:12:21,230 --> 00:12:26,870
layer which is MB HTTP SMTP my map
doesn't matter but everything else is

146
00:12:26,870 --> 00:12:31,520
the same so the first stage of this is
SSL handshake this is the part of the

147
00:12:31,520 --> 00:12:38,210
lives on symmetric key cryptography the
second part is the SSL cyber exchange

148
00:12:38,210 --> 00:12:42,830
and the data transfer and that's all
done through asymmetric cryptography so

149
00:12:42,830 --> 00:12:48,020
there's just a visual on how all this
takes place so part 1 what happened

150
00:12:48,020 --> 00:12:53,000
basically to every SSL TLS connection
determine the cipher suite to be used

151
00:12:53,000 --> 00:12:57,160
that the terms of protocol version to be
used and then again it requires

152
00:12:57,160 --> 00:13:02,110
asymmetric cryptography keep in mind
that the public key is validated by a

153
00:13:02,110 --> 00:13:06,590
certificate and the private key is known
only to the server typically this is

154
00:13:06,590 --> 00:13:10,310
only one way of authentication so if
your growlithe making a connection to

155
00:13:10,310 --> 00:13:14,030
somewhere the secure your browser
disability publicly

156
00:13:14,030 --> 00:13:18,650
validates the server now there are times
where certain types of connections has

157
00:13:18,650 --> 00:13:21,170
anyone ever been to one where they
require that you have a client

158
00:13:21,170 --> 00:13:26,209
certificate so this is the same as if
you go to like DEFCON earlier conference

159
00:13:26,210 --> 00:13:29,060
you'll download the certificate to get
on the Wi-Fi network

160
00:13:29,060 --> 00:13:32,329
you're basically validating that your
client or your ballot to the server

161
00:13:32,330 --> 00:13:37,580
right it's not the other way around that
happens sometimes in tls/ssl connections

162
00:13:37,580 --> 00:13:41,960
particularly when you're doing and then
transfers funds maybe two backs

163
00:13:41,960 --> 00:13:44,930
transferring data back and forth they'll
require the tokens

164
00:13:44,930 --> 00:13:50,209
can actually do a authentications they
call that two way authentication but

165
00:13:50,210 --> 00:13:54,320
most of all the way authentication
didn't have a promise for certificated

166
00:13:54,320 --> 00:14:00,050
what route keep in mind that tell us
version 1.2 unless requires three round

167
00:14:00,050 --> 00:14:07,579
trips to the server a four for doing the
client authentication as well just gives

168
00:14:07,580 --> 00:14:12,140
you a little overview of how that works
first thing happens is you login type in

169
00:14:12,140 --> 00:14:17,149
HTTPS whether you're going to and goes
hey I'm lying out there on my sensing

170
00:14:17,149 --> 00:14:21,310
data to you but I want to do it securely
and here's the site which needs to

171
00:14:21,310 --> 00:14:27,079
support here's the protocols I support
server goes great sentiments and back

172
00:14:27,080 --> 00:14:30,890
here's the server here's the protocol
less important recycle sheets I support

173
00:14:30,890 --> 00:14:35,990
then they both agreed on hopefully the
strongest cipher sweet and strong this

174
00:14:35,990 --> 00:14:40,730
level of support and then what will
happen is they agree that they can talk

175
00:14:40,730 --> 00:14:44,180
to each other because the certificate
matches that the gross now we go to the

176
00:14:44,180 --> 00:14:49,219
asymmetric part and that what's called a
pre master key I'm sorry the symmetric

177
00:14:49,220 --> 00:14:57,470
part they pre master keys generated
using a public key and then after that

178
00:14:57,470 --> 00:15:01,459
the keys are exchanged they both know
same key that their dreams were

179
00:15:01,459 --> 00:15:05,420
exchanging the data of the day of
transfer layer so that's basically a

180
00:15:05,420 --> 00:15:09,110
handshake process the data transfer
happens at the very end of that the last

181
00:15:09,110 --> 00:15:14,360
step after agreeing on a session key
word will appear this the master session

182
00:15:14,360 --> 00:15:18,709
use different terminology so it gets a
little confusing Ultimate Edition

183
00:15:18,709 --> 00:15:22,279
between the endpoints occurs via the use
of the exact negotiated key for

184
00:15:22,279 --> 00:15:25,939
encrypting and decrypting every fact
that goes across that connection so if

185
00:15:25,940 --> 00:15:29,930
you're in an HTTP environment you got
equalized and exit stays open for a long

186
00:15:29,930 --> 00:15:35,209
period of time typically an email
connection we've got pipelining of

187
00:15:35,209 --> 00:15:37,310
messages
now server to the others would not

188
00:15:37,310 --> 00:15:41,030
renegotiating that connection for every
message that's getting sent and that

189
00:15:41,030 --> 00:15:46,850
that information stays current until the
connections drop once that connections

190
00:15:46,850 --> 00:15:50,180
drop the renegotiated connection have to
go through the whole process again to

191
00:15:50,180 --> 00:15:55,489
restart and gather the certificate and
agree on master session key this is done

192
00:15:55,490 --> 00:16:00,230
to protect so that if somebody gets the
property they cannot be triggered every

193
00:16:00,230 --> 00:16:05,600
session which immediately sent across to
the server client this process is always

194
00:16:05,600 --> 00:16:10,220
the most of seeing web traffic but again
it applies to every type of encrypted

195
00:16:10,220 --> 00:16:13,940
traffic it's the same process just
different ports Justin refer to call

196
00:16:13,940 --> 00:16:20,420
some underlying in the application all
right so tell us one point three is a

197
00:16:20,420 --> 00:16:24,229
little bit different the same basic
information has to be a channel to

198
00:16:24,230 --> 00:16:28,160
establish that connection but the
process for exchanging the data very

199
00:16:28,160 --> 00:16:37,130
first thing you know we have to remember
is sort of the identifier the server

200
00:16:37,130 --> 00:16:40,910
name identifier would be encrypted
within the package so if you're really

201
00:16:40,910 --> 00:16:47,000
firewall IDs in the middle trying to
decrypt on the fly or trying to

202
00:16:47,000 --> 00:16:51,170
determine load balancer they're not
going to be able to see what the

203
00:16:51,170 --> 00:16:54,890
information is that server name
identifier the only thing you can see

204
00:16:54,890 --> 00:16:59,660
that is the server and the point once
it's decrypted up machine has private

205
00:16:59,660 --> 00:17:05,839
keys the process that does this results
in only one single round trip between

206
00:17:05,839 --> 00:17:11,179
the server and client were to remember
SSL all the SSL bursts of the TLS 1.2

207
00:17:11,180 --> 00:17:16,040
below required at least two if not three
round trips to the server to make that

208
00:17:16,040 --> 00:17:21,709
connection before the transfer data so
TLS 1.3 also has something built-in

209
00:17:21,709 --> 00:17:25,970
called zero round-trip time resumption
this is the way that the client can

210
00:17:25,970 --> 00:17:31,760
reuse that agreed-upon key with the
server server scores of sequels with

211
00:17:31,760 --> 00:17:34,860
previous sessions that can reuse it for
that client for something given

212
00:17:34,860 --> 00:17:39,510
period of time and that's typically
configurable on whatever platform you're

213
00:17:39,510 --> 00:17:45,480
doing unless you think that's stupid
right somebody could then steal or look

214
00:17:45,480 --> 00:17:51,570
at that key somehow and use it to
decrypt or worse they encrypt traffic

215
00:17:51,570 --> 00:17:55,830
incentive that's you right there they
are

216
00:17:55,830 --> 00:18:00,439
I said sure other ways around that on
this you see tell us one point three

217
00:18:00,440 --> 00:18:04,799
there are are some there are some
features that are built in and I'm not

218
00:18:04,799 --> 00:18:11,370
fully familiar with how it works exactly
but when I didn't look at the fallback

219
00:18:11,370 --> 00:18:15,178
mechanisms it is very secure it's not
that you can't break it

220
00:18:15,179 --> 00:18:22,950
the lack of full forward secrecy is not
something that it allows you to do until

221
00:18:22,950 --> 00:18:27,419
us has the mechanisms built in to deal
with both systems the diagram comes from

222
00:18:27,419 --> 00:18:32,280
CloudFlare but it's a diagram of how the
two different handshake mechanisms work

223
00:18:32,280 --> 00:18:37,889
so you can see that this doesn't show
along screen unfortunately but if you

224
00:18:37,890 --> 00:18:42,960
look at the left side your left side
that still has one went to unless

225
00:18:42,960 --> 00:18:47,040
there's three round-trips welcome to
reroute there's the server if that's

226
00:18:47,040 --> 00:18:51,530
work and tell us one point three is only
two round-trips and the data is

227
00:18:51,530 --> 00:18:56,879
encrypted at that point so the speed of
the connection is much faster there's

228
00:18:56,880 --> 00:19:02,809
much better
one thing that you do have to realize is

229
00:19:02,809 --> 00:19:08,520
tell us one more 3 requires HTTP to be
an able or every web server you're using

230
00:19:08,520 --> 00:19:13,350
if you're using web services not every
web server that comes out as maintenance

231
00:19:13,350 --> 00:19:18,418
or HTTP 2 if you have to do something
for work to make that happen so that's

232
00:19:18,419 --> 00:19:25,030
something to keep in mind the triangle
1.3 assign haven't windows yet

233
00:19:25,030 --> 00:19:40,360
Microsoft uses s channel has their core
libraries or dash panel does not have

234
00:19:40,360 --> 00:19:45,080
three bullet ending at this point in
time they probably will not put it into

235
00:19:45,080 --> 00:19:51,050
with this 2008 of an angel sort so if
you're using Windows 2008 you're screwed

236
00:19:51,050 --> 00:19:55,790
and you're gonna have to afraid of this
2016 but I would say if you're gonna do

237
00:19:55,790 --> 00:20:00,530
that after the 2019 it's far better and
then they will support it for that but

238
00:20:00,530 --> 00:20:05,810
it's not the introduction yet so here's
an overview of the things have changed

239
00:20:05,810 --> 00:20:10,790
in TLS 100 some of the features that
have been removed include the static var

240
00:20:10,790 --> 00:20:18,590
say handshake bets on cyber cipher block
chaining Mac then encryption has been

241
00:20:18,590 --> 00:20:24,740
removed okay this has been shown to be a
smooth ball so they remove the ability

242
00:20:24,740 --> 00:20:30,260
to set this as a way to do the
encryption some math and heap impact on

243
00:20:30,260 --> 00:20:37,670
this encrypted inside of the package of
the sense that you can't see with sha-1

244
00:20:37,670 --> 00:20:42,530
nd5 marks before turtle desert as have
been removed compression has been

245
00:20:42,530 --> 00:20:46,840
removed that's not needed because it's
kind of all the time around trip and

246
00:20:46,840 --> 00:20:51,350
renegotiation is not possible
so once the connection is good attacks

247
00:20:51,350 --> 00:20:55,189
it's good if it has to renegotiate
remember it remembers the secrets and

248
00:20:55,190 --> 00:21:00,740
doesn't different the features of
bananas to full handshake signature so

249
00:21:00,740 --> 00:21:03,800
that's that first trip everything that
first trip takes all of the information

250
00:21:03,800 --> 00:21:08,810
that needs to be able to establish the
protocol and the Cypress suite was being

251
00:21:08,810 --> 00:21:14,789
used it's also added something
or elliptic curve anytime you see easily

252
00:21:14,789 --> 00:21:19,889
when the Cypress needs that central if
that curve cryptography elliptic curve

253
00:21:19,889 --> 00:21:26,820
cryptography is something that gives you
plan gives you a higher pitch count with

254
00:21:26,820 --> 00:21:31,918
encryption level with less this process
by the processor that makes no sense

255
00:21:31,919 --> 00:21:39,450
so if you can get something like
2048-bit encryption with maybe 860 bit

256
00:21:39,450 --> 00:21:43,559
he doesn't let the curve there tog Rafi
doesn't seem like it's a big deal but if

257
00:21:43,559 --> 00:21:46,350
you're doing a hundred of thousands
billions of transactions makes a big

258
00:21:46,350 --> 00:21:52,678
deal for a processor and there's several
curve variations that have been added to

259
00:21:52,679 --> 00:22:01,110
TLS 1.3 so why is this important why do
we care we want our stuff to work we

260
00:22:01,110 --> 00:22:07,199
just want to work right so cron removed
SSL version 3.0 in 2015 it's gone

261
00:22:07,200 --> 00:22:12,809
energies you can use in Iran can't force
it to do anything this effectively

262
00:22:12,809 --> 00:22:17,730
eliminates all SSL burdens that are
commonly in use so if you're seeing SSL

263
00:22:17,730 --> 00:22:22,830
version 3.0 requests on your network
they're probably crappy old machine

264
00:22:22,830 --> 00:22:28,918
somewhere old browsers or malicious
traffic the longer it goes the more it's

265
00:22:28,919 --> 00:22:33,830
lately as malicious traffic I'll tell
you why I just say

266
00:22:33,830 --> 00:22:42,019
the deprecated versions of TLS 1.0 1.1
are supported through the version 72

267
00:22:42,019 --> 00:22:46,549
which is what we had was pretty much
what's current now with us interchange

268
00:22:46,549 --> 00:22:52,220
was it was just the release of some
zero-day and Chronos with us coming that

269
00:22:52,220 --> 00:22:57,919
numbers been chained verge from 81 and
above for Chrome will not or any TLS

270
00:22:57,919 --> 00:23:06,109
versions but two or three okay that's
coming out sooner than the March 2020

271
00:23:06,109 --> 00:23:11,869
date off of my cloud services optimize a
content delivery network they only

272
00:23:11,869 --> 00:23:18,109
support Denver suburbs by nineteen so
they're ahead of curve all right

273
00:23:18,109 --> 00:23:22,879
everything that they put out there
anything that said Netflix uses them to

274
00:23:22,879 --> 00:23:27,738
distribute their content it's only gonna
be available via to us one point one one

275
00:23:27,739 --> 00:23:34,070
with two or three PCI compliance
deprecated tells them one one and our

276
00:23:34,070 --> 00:23:41,178
data security standard on June 30th 2018
tell us 1.1 still allowed new compliance

277
00:23:41,179 --> 00:23:46,609
tests to on your network there's only
certain Cypress roots that are allowed

278
00:23:46,609 --> 00:23:51,949
to be enabled on say how you check for
this but most every every merchant has

279
00:23:51,950 --> 00:23:58,519
switch to tell us one point two
CloudFlare is disabled TLS 1.1 and one

280
00:23:58,519 --> 00:24:03,559
more knowledgeable 18 so they're
effectively act 1.2 level so a lot of

281
00:24:03,559 --> 00:24:10,249
the provider level services have already
changed Microsoft Office we should see

282
00:24:10,249 --> 00:24:14,230
five on this of course
TLS 1.2 starting over

283
00:24:14,230 --> 00:24:19,390
18 there is no option windows where I
talked about that to those who support

284
00:24:19,390 --> 00:24:26,320
along three new Microsoft an apple and
Mozilla does Firefox have agreed to an

285
00:24:26,320 --> 00:24:32,050
TLS 1.1 what ones were partially in
Marshall employment so right now they

286
00:24:32,050 --> 00:24:35,889
currently say less than two percent of
all traffic is to us one point one point

287
00:24:35,890 --> 00:24:41,650
two that's not what we see on our
network there there's no a lot more

288
00:24:41,650 --> 00:24:45,490
machines and devices and things out
there that are using these old versions

289
00:24:45,490 --> 00:24:52,030
of old libraries problems how to get
around getting those updated some of

290
00:24:52,030 --> 00:24:58,120
them just will never be updated until is
new points who are better is required

291
00:24:58,120 --> 00:25:01,959
for HTTP 2.0 to be enabled on your
network

292
00:25:01,960 --> 00:25:08,350
I believe it's a strict requirement for
TLS 1.3 so it's only kind of offer a

293
00:25:08,350 --> 00:25:14,139
limited number of cipher suites so SSL
labs estimates about 94% of all existing

294
00:25:14,140 --> 00:25:21,010
sites or tell us 1.2 and it's a lie
that's from our traffic that we've seen

295
00:25:21,010 --> 00:25:24,760
what we have customers that are
processing through that web filtering

296
00:25:24,760 --> 00:25:29,440
service that we run we see a large
number of people still tiny Frank

297
00:25:29,440 --> 00:25:34,060
decided uses 1.0 as their standard
connection we haven't turned that off

298
00:25:34,060 --> 00:25:39,730
yet because we don't want customers
flooding us with calls so bigger issues

299
00:25:39,730 --> 00:25:43,660
going to be other services like SMTP
IMAP and those sorts of things so the

300
00:25:43,660 --> 00:25:48,820
thing that people are not thinking about
in any great detail here are what is

301
00:25:48,820 --> 00:25:56,110
Alliance implications is not having my
TLS version so you're a large bank and

302
00:25:56,110 --> 00:26:03,399
you will require to just to be compliant
starving toxic so right box that says

303
00:26:03,400 --> 00:26:08,290
well they don't allow you to do anything
to tell us 1.2 and we're not that across

304
00:26:08,290 --> 00:26:11,020
the board
mobiles like just your website know that

305
00:26:11,020 --> 00:26:13,970
applies to your email so if your
did you email with anybody out there

306
00:26:13,970 --> 00:26:21,139
world we want you to initiate connection
only said by smtps and only the TLS 1.2

307
00:26:21,139 --> 00:26:23,870
or better
well how many people's mail server

308
00:26:23,870 --> 00:26:29,090
support TLS 1.2 or better right
everybody's mouth server that I have a

309
00:26:29,090 --> 00:26:33,320
sense of trying to negotiate TLS have
done or trust another person then

310
00:26:33,320 --> 00:26:39,080
finally gives us the second clear well
that's not compliant so they test you

311
00:26:39,080 --> 00:26:41,870
for compliance you're going up there how
do you fix that

312
00:26:41,870 --> 00:26:45,649
that's outside of your control key not
sending messages to people who have

313
00:26:45,649 --> 00:26:50,508
email addresses on services that don't
support the latest versions of TLS this

314
00:26:50,509 --> 00:26:54,470
is a dilemma that has to be looked at
ality fixed because what's gonna happen

315
00:26:54,470 --> 00:26:58,309
is you're going to companies that are in
these positions that have to be

316
00:26:58,309 --> 00:27:01,850
compliant over a barrel because your
customers don't care they just won't

317
00:27:01,850 --> 00:27:06,230
even right can't go you have to be my
customer you have to be like this mail

318
00:27:06,230 --> 00:27:13,820
servers these are our fruit and mail
services great it's kind of a big deal

319
00:27:13,820 --> 00:27:20,269
api's or TLS is also have to be checked
right how many providers in doing

320
00:27:20,269 --> 00:27:26,240
content delivery networks for your phone
apps suddenly these not your most

321
00:27:26,240 --> 00:27:30,549
popular phone app that smaller providers
don't have ability or don't have the

322
00:27:30,549 --> 00:27:34,429
knowledge or they haven't bothered to
build an infrastructure lead sources

323
00:27:34,429 --> 00:27:37,730
latest version of the TLS and some that
are absolute work on your phone because

324
00:27:37,730 --> 00:27:42,470
the content delivery network won't send
the data over the network so it's

325
00:27:42,470 --> 00:27:46,070
there's a lot of the lemon here's what's
going to be happening one of the things

326
00:27:46,070 --> 00:27:49,879
you're going to hear about i lied to
will this as a second mention of DNS and

327
00:27:49,879 --> 00:27:53,959
the topics you're gonna see a lot of the
information about DNS or TLS and

328
00:27:53,960 --> 00:27:57,890
encrypted DNS which would be a packet
sent over

329
00:27:57,890 --> 00:28:04,350
essentially you can tunneled into a DNS
server client and server tienes over

330
00:28:04,350 --> 00:28:09,330
HTTP slow this correct much I don't go
right by says DNS has to be late fax

331
00:28:09,330 --> 00:28:15,810
right so illness or gun right with the
perfect DNS our CloudFlare the fact that

332
00:28:15,810 --> 00:28:19,860
you can start making a mess so that the
traffic is sent in an encrypted tunnel

333
00:28:19,860 --> 00:28:25,379
between your deanna requester a server
and the only thing that's good for is to

334
00:28:25,380 --> 00:28:29,130
make sure that nobody's spoofing your
DNS or reading the DMS packets that are

335
00:28:29,130 --> 00:28:33,240
going out don't learn about the answer
privacy there's a whole lot of things

336
00:28:33,240 --> 00:28:39,420
that people can find out from your DNS
we're looking at privacy of DNS the

337
00:28:39,420 --> 00:28:43,260
other issue that it's going to be a big
deal order these IOT devices right a lot

338
00:28:43,260 --> 00:28:48,840
of more built on Linux subsystems they
use the open SSL libraries to do their

339
00:28:48,840 --> 00:28:52,290
stuff how many of them are updated all
regular basis right so what's going to

340
00:28:52,290 --> 00:28:55,320
happen to all of those places that are
out there in the world are trying to

341
00:28:55,320 --> 00:28:59,730
negotiate back to their API is that
there are companies that are providing

342
00:28:59,730 --> 00:29:04,230
support for them and suddenly the
providers that are doing cloud services

343
00:29:04,230 --> 00:29:07,320
or even the internet providers willing
to pass traffic that's tell us one more

344
00:29:07,320 --> 00:29:13,649
moment or SSL 3 or TLS 1 all those
places are essentially been conditioned

345
00:29:13,650 --> 00:29:16,890
and won't be able to function right
who's going up deeper who's going to

346
00:29:16,890 --> 00:29:19,950
take care of that those problems and
these are the kinds of problems that

347
00:29:19,950 --> 00:29:24,510
people aren't thinking about looking at
they're not considering the implications

348
00:29:24,510 --> 00:29:29,220
it's changes in the standards it's
really a few of these vulnerabilities

349
00:29:29,220 --> 00:29:34,200
you're not going to explain what they
are because mobility these are some of

350
00:29:34,200 --> 00:29:39,570
the attacks that we're out there going
back to score Utley one of the big ones

351
00:29:39,570 --> 00:29:44,270
anybody remember SSL strip optimal in
spite of that out you used to be able to

352
00:29:44,270 --> 00:29:49,560
smooth people you'd run up I guess it
you're on a Kali Linux box

353
00:29:49,560 --> 00:29:53,940
pretend to do the Wi-Fi get you to join
up you sign into Facebook every

354
00:29:53,940 --> 00:29:58,510
directory GPS
the man in the middle all your traffic

355
00:29:58,510 --> 00:30:04,850
doesn't work anymore typically on those
sites because most sites now use HSTs

356
00:30:04,850 --> 00:30:17,840
which is HTTP HTTP strict Transport
if you try to go to Facebook and they

357
00:30:17,840 --> 00:30:23,750
look at the headers the first it
requires of the TT TPS and second there

358
00:30:23,750 --> 00:30:27,679
are a list of servers that are or a list
of domains that are allowed within the

359
00:30:27,679 --> 00:30:31,100
browser there's a simians where it goes
with those so they are looked up and

360
00:30:31,100 --> 00:30:35,570
they cannot be spoofed by a little
attack so that's something that it's got

361
00:30:35,570 --> 00:30:41,360
rid of those sorts of things all of
these all of these different

362
00:30:41,360 --> 00:30:45,379
vulnerabilities though have had
implications of the changes if you got

363
00:30:45,380 --> 00:30:50,240
max these uploaded timelines but that
time today that to go into all that if

364
00:30:50,240 --> 00:30:54,289
you look at the timeline of when these
vulnerabilities came out some of them

365
00:30:54,289 --> 00:31:00,620
are more critical or severe than others
they led to direct changes in the

366
00:31:00,620 --> 00:31:07,100
tls/ssl versions some of the big ones is
trouble to remember or partly right so

367
00:31:07,100 --> 00:31:12,799
that was a vulnerability OpenSSL library
where somebody could get into a machine

368
00:31:12,799 --> 00:31:17,179
or some packets of machine that was
about overflowing memory and dump

369
00:31:17,179 --> 00:31:21,890
information about the private key into
that packet back to them and then let's

370
00:31:21,890 --> 00:31:25,909
hit the private key is kind of game over
right they could get in their machine do

371
00:31:25,909 --> 00:31:31,100
all kinds of nasty stuff Pluto was a
little bit of a different attack I was a

372
00:31:31,100 --> 00:31:38,029
downgrade attack its vulnerability SSL
3.0 so this is main reason that you'll

373
00:31:38,029 --> 00:31:43,250
see a lot of traffic trying to negotiate
a connection at one level several sent

374
00:31:43,250 --> 00:31:46,820
back that I supported the
that change my mind I want to build a

375
00:31:46,820 --> 00:31:50,539
different level though you know gotta
accept that they'll keep negotiating

376
00:31:50,539 --> 00:31:54,529
until they get to the lowest possible
level what's happening there's people

377
00:31:54,529 --> 00:31:59,480
are trying to use that downgrade
capability to get back to lower levels

378
00:31:59,480 --> 00:32:05,630
to exploit some of these vulnerabilities
right so by fixing your TLS versions and

379
00:32:05,630 --> 00:32:09,770
limiting what short machines or your
endpoints will accept you eliminate all

380
00:32:09,770 --> 00:32:13,908
those vulnerabilities from your network
right by not addressing this you move

381
00:32:13,909 --> 00:32:17,539
those vulnerabilities out there and some
of them it's pretty severe and very well

382
00:32:17,539 --> 00:32:22,100
documented on how to exploit but you see
that there's all these different ones

383
00:32:22,100 --> 00:32:26,570
that have come up and what other develop
this topic out so you can get at it and

384
00:32:26,570 --> 00:32:29,918
there's some links that we'll talk more
about all the details on all of these

385
00:32:29,919 --> 00:32:35,390
but basically every one of these attacks
is is initiated typically it's either a

386
00:32:35,390 --> 00:32:38,960
man-in-the-middle attack so the attacker
intercept a connection of handshake

387
00:32:38,960 --> 00:32:43,039
station and alters the handshake if
they're trying to exfiltrate data from

388
00:32:43,039 --> 00:32:47,270
that connection and then they're going
to go and request something that's the

389
00:32:47,270 --> 00:32:51,139
force the client server to renegotiate
the connection until they can get it to

390
00:32:51,140 --> 00:32:55,940
a level where they can basically sniff
the traffic for a period of time and

391
00:32:55,940 --> 00:32:59,240
then in the background they can crack
the keys that were used to encrypt that

392
00:32:59,240 --> 00:33:03,559
traffic into later deeper of the traffic
and some of these the vulnerabilities

393
00:33:03,559 --> 00:33:07,580
were so severe that they can crack the
key in real time once they do that they

394
00:33:07,580 --> 00:33:11,928
can just read the traffic assets coming
across so things that you have to keep

395
00:33:11,929 --> 00:33:15,049
in mind here is that the server accept
that and respond to these downgrade

396
00:33:15,049 --> 00:33:21,049
requests right so that's a bad thing you
you want you as the owner of whatever

397
00:33:21,049 --> 00:33:26,240
servers are going out there you want to
dictate what versions of TLS you're

398
00:33:26,240 --> 00:33:33,590
going to support you don't want to allow
clients to request insecure versions the

399
00:33:33,590 --> 00:33:41,330
other problem is a lot of the server
setup to use weak or deprecated ciphers

400
00:33:41,330 --> 00:33:47,389
so the cipher suite is the mathematical
algorithm that's used to generate the

401
00:33:47,390 --> 00:33:52,039
key that's used to encrypt traffic at
the second property asymmetrical and if

402
00:33:52,039 --> 00:33:58,580
you use flex words that are too weak
they're more easily easily broken so the

403
00:33:58,580 --> 00:34:02,658
trick is you have to keep up with
standards I know this is a Sun not

404
00:34:02,659 --> 00:34:06,080
something many people do I'm gonna show
you some tools for how to deal with this

405
00:34:06,080 --> 00:34:13,969
first we will look at how we monitor for
this our network if you look at a TCP

406
00:34:13,969 --> 00:34:18,589
packet that's coming in with the first
handshake ago she Asian the second third

407
00:34:18,589 --> 00:34:23,270
lights I believe is in that packet will
tell you what version that this lower

408
00:34:23,270 --> 00:34:28,159
right corner there comes with version
numbers of TLS the protocol version

409
00:34:28,159 --> 00:34:32,179
that's trying to negotiate from client
or if you server back to the client so

410
00:34:32,179 --> 00:34:36,369
you see that in the packet in both
directions in a conversation in larger

411
00:34:36,369 --> 00:34:40,460
what we do is we look at that payload
lon and in our case we use that v load

412
00:34:40,460 --> 00:34:45,139
balancers to terminate the traffic so
you connect to our service that

413
00:34:45,139 --> 00:34:48,859
terminates on the load balancer and then
we forward the traffic to somewhere on

414
00:34:48,859 --> 00:34:52,580
the background now we do not decrypt the
traffic on the load balance it was a

415
00:34:52,580 --> 00:34:59,790
difference this is something that people
a little sign that it might be awful but

416
00:34:59,790 --> 00:35:04,558
I think it's important to know many
services terminate their traffic on load

417
00:35:04,559 --> 00:35:09,150
balances whether it's AJ proxy at 500
pounds whatever the first will serve or

418
00:35:09,150 --> 00:35:12,210
virtual interface that's on the front
internet-facing

419
00:35:12,210 --> 00:35:18,660
on the back side and those connect to an
array of servers nodes through a pool of

420
00:35:18,660 --> 00:35:23,430
servers on the backside well think about
this would you rather have end-to-end

421
00:35:23,430 --> 00:35:27,089
encryption where the data is encrypted
all the way through the f5 load balancer

422
00:35:27,089 --> 00:35:31,020
to the back-end server or do you want
the f5 load balancer to be decrypting

423
00:35:31,020 --> 00:35:34,890
the traffic to have that traffic open on
our connections we have a little

424
00:35:34,890 --> 00:35:39,118
balancer the backend server this is an
important question it's not one that

425
00:35:39,119 --> 00:35:43,680
many people look at this company
client standards will get but it's a big

426
00:35:43,680 --> 00:35:49,440
deal ok so this this means that if
somebody compromises one of those

427
00:35:49,440 --> 00:35:53,099
back-end servers anywhere on that
network right just typically that

428
00:35:53,099 --> 00:35:57,900
network would share the month of variety
of different servers they can sent the

429
00:35:57,900 --> 00:36:02,069
traffic on that can actually between the
back end of the load balancer and the

430
00:36:02,069 --> 00:36:07,200
front end public facing side of whatever
web server that is that traffic's all

431
00:36:07,200 --> 00:36:13,439
encrypted right username passwords
anything it's all there right so if

432
00:36:13,440 --> 00:36:17,700
you're setting up your network you
definitely want any encryption if you

433
00:36:17,700 --> 00:36:21,839
can do it I know it's cool to be able to
do all of your certificates and

434
00:36:21,839 --> 00:36:23,849
everything else
although battle terms pain-in-the-butt

435
00:36:23,849 --> 00:36:29,010
have to manage more servers but the
security implications of doing SSL

436
00:36:29,010 --> 00:36:32,700
offloading on the load balancer are
pretty severe if you don't want to do it

437
00:36:32,700 --> 00:36:40,230
I think that beyond that this is part of
an iris isn't Eve

438
00:36:40,230 --> 00:36:47,700
we're using but f5 the balance which use
TCL just told control language to

439
00:36:47,700 --> 00:36:53,189
basically allow you to manipulate
traffic on an interface before and after

440
00:36:53,190 --> 00:36:57,720
it crosses on that interface so all we
do here it's hard to see but if you get

441
00:36:57,720 --> 00:37:02,310
busy I slice it downloaded all are going
we're collecting bits out of the to see

442
00:37:02,310 --> 00:37:06,150
beacon actually were looking at the
second third bit or matching it to a

443
00:37:06,150 --> 00:37:12,180
number or saying if that number is less
than this number which means it's TLS 3

444
00:37:12,180 --> 00:37:18,740
or 1.0 or less we drop the traffic right

445
00:37:19,100 --> 00:37:25,940
what we do log it so what we did is I
set up a bit of a Greylock clustered

446
00:37:25,940 --> 00:37:31,980
grill up okay so you know who knows
what's pointless I'm sorry venomous

447
00:37:31,980 --> 00:37:35,100
plunked is they're going to know what a
lot hibernation is send your logs for

448
00:37:35,100 --> 00:37:39,359
many slights the ones all integrate have
an interface where you can access search

449
00:37:39,359 --> 00:37:45,090
do dashboard that sort of thing so gray
line is like swamp it's a blog

450
00:37:45,090 --> 00:37:49,320
aggregation sender lives there
that's an elastic search database and it

451
00:37:49,320 --> 00:37:54,180
has a specific format that it expects
the data to come in it expects the data

452
00:37:54,180 --> 00:37:58,980
to come in something called guilt or
love extended lock format so that this

453
00:37:58,980 --> 00:38:03,180
part here of the part that says where it
sends out these if that long string

454
00:38:03,180 --> 00:38:07,350
that's just a JSON back into get
sensitive a lot of observer but this

455
00:38:07,350 --> 00:38:12,810
allows us to go and do some really cool
things along these on all of our

456
00:38:12,810 --> 00:38:16,590
connections are track using idols we
track client connection and the server

457
00:38:16,590 --> 00:38:19,700
connections right to remember the
handshake process

458
00:38:19,700 --> 00:38:23,819
client connection server brings the
connection that they should match I'll

459
00:38:23,820 --> 00:38:29,020
show you what happens on the hill we set
the decimal value to low susceptible to

460
00:38:29,020 --> 00:38:34,240
in our case for dropping 3.9 unless we
will change that shortly all the

461
00:38:34,240 --> 00:38:38,439
connections are blocked very loud server
we don't have an SSL termination on our

462
00:38:38,440 --> 00:38:42,550
load balancers of this is all layer 4
transport or letter traffic we're not

463
00:38:42,550 --> 00:38:47,440
looking at the data at the application
layer so keep that mod you can tamil at

464
00:38:47,440 --> 00:38:52,870
the transport layer but birth until us
to be used in your data drivers to see

465
00:38:52,870 --> 00:39:01,569
as we drop the connections are less than
1.0 and you still see a significant

466
00:39:01,570 --> 00:39:05,800
number of people trying to connect to us
which is interesting

467
00:39:05,800 --> 00:39:10,840
so this graph here this is our dashboard
that we use basically what it shows

468
00:39:10,840 --> 00:39:15,750
something you have a bigger screen the
top part is all of the tls/ssl

469
00:39:15,750 --> 00:39:18,730
connections that we drop so they're all
the ones that are trying to connect the

470
00:39:18,730 --> 00:39:24,460
three point out we don't drop one point
okay TLS won't point out all of the

471
00:39:24,460 --> 00:39:29,560
connections on the on this top of its
first big number there the one 91,000

472
00:39:29,560 --> 00:39:34,990
that's the client connections so the
client connection should pretty much

473
00:39:34,990 --> 00:39:41,620
match the server pensions back right so
when those two numbers are not fairly

474
00:39:41,620 --> 00:39:46,690
cool and they're not pretty
what's 11,000 difference so what do you

475
00:39:46,690 --> 00:39:51,790
think that traffic is that's the 11000
difference they're all machines trying

476
00:39:51,790 --> 00:39:58,750
to do downgrade attacks on in services
right so they may send analysis packets

477
00:39:58,750 --> 00:40:02,260
right now we're taking them but when we
turn off 1.0 those numbers when we go

478
00:40:02,260 --> 00:40:09,670
back to much more people of excludable
3.0 as the SSL Bertels so that's it's an

479
00:40:09,670 --> 00:40:13,360
indication of what's happening on our
network we use it because we can

480
00:40:13,360 --> 00:40:19,090
actually tell what clients IP addresses
are sending what type of requests to us

481
00:40:19,090 --> 00:40:23,740
so we can go back to the VIP the source
IP of the request we go to a client's

482
00:40:23,740 --> 00:40:26,839
home you know you have devices on your
net

483
00:40:26,840 --> 00:40:32,210
sending us SSL connections allow you to
throw that let's dig into that a little

484
00:40:32,210 --> 00:40:35,540
bit more right sometimes I find that
there's things on their network that

485
00:40:35,540 --> 00:40:39,380
they didn't know existed and this is
only for a web proxy service so this

486
00:40:39,380 --> 00:40:44,420
isn't everything that we do we could
apply this to key mail we filter email

487
00:40:44,420 --> 00:40:51,200
for 14 million email boxes so people
over there traffic on the female side we

488
00:40:51,200 --> 00:40:55,730
host about 400,000 chained boxes at the
moment however what our sister company

489
00:40:55,730 --> 00:41:01,490
six dozen they have as much I'm not I
don't have much insight of what they did

490
00:41:01,490 --> 00:41:05,839
was between we're just starting on the
murderer so this is just an example of

491
00:41:05,840 --> 00:41:09,560
how we can look at this data look at
manipulate this data create different

492
00:41:09,560 --> 00:41:13,310
dashboards we can alert from somebody's
tiny to the or the max number of

493
00:41:13,310 --> 00:41:18,080
connections the other thing we could do
at the load balancer levels we could go

494
00:41:18,080 --> 00:41:22,100
back and say how can we make them better
we can go in and actually look at

495
00:41:22,100 --> 00:41:25,970
Cypress weeks and the TCP connection in
telling you what Cypress roots are

496
00:41:25,970 --> 00:41:30,140
trying to negotiate as well there's
other pieces of information in that act

497
00:41:30,140 --> 00:41:33,109
that that you could look at who could
break them at the number of TCP

498
00:41:33,110 --> 00:41:36,800
connections trying to make connections
to our SSL right to prevent the adolfs

499
00:41:36,800 --> 00:41:41,870
attacks we can do key exchange
validation on that to see what kinds of

500
00:41:41,870 --> 00:41:47,470
keys with trying to validate on we can
apply this to other types of interfaces

501
00:41:47,980 --> 00:41:53,000
so to get this work basically you look
balance of some wherever your endpoint

502
00:41:53,000 --> 00:41:57,650
is you could do this on a server as well
I suppose you write testing rule level

503
00:41:57,650 --> 00:42:01,100
to do this production
reply to the desire interface and

504
00:42:01,100 --> 00:42:05,450
configure there's my blog blogging is
going to be different on every type of

505
00:42:05,450 --> 00:42:10,149
platform and there's other talks that
I'm getting on how to configure a lot

506
00:42:10,150 --> 00:42:13,809
there's a bunch of tools out there so we
have a specific question feel free to

507
00:42:13,809 --> 00:42:18,250
hit me up and I went in the right
direction we do have a great lot of

508
00:42:18,250 --> 00:42:21,849
custom that we use I guess or notes on
the front end and the glass to search

509
00:42:21,849 --> 00:42:25,029
muster on the back end
really the only tools you need to test

510
00:42:25,029 --> 00:42:29,710
to make sure this works requires RTC we
don't want the load balancer and maybe

511
00:42:29,710 --> 00:42:32,740
if you want to track down your own
packaging into some escaping and

512
00:42:32,740 --> 00:42:38,098
generate your own TCP packets with SSL
encryption the civil world works

513
00:42:38,099 --> 00:42:42,430
here's a whole time interesting links
going over a couple more things you're

514
00:42:42,430 --> 00:42:49,089
going to be pretty much about out of
time so these links will be in the

515
00:42:49,089 --> 00:42:53,170
slideshow one of the things I want to
show you here is what you see when you

516
00:42:53,170 --> 00:42:57,760
go to SSL test.com this is something but
I might call us or you can actually go

517
00:42:57,760 --> 00:43:04,569
and test the quality of the SSL or TLS
or HTTPS we're on college install on

518
00:43:04,569 --> 00:43:08,319
your different platforms I would
recommend if your system admin and you

519
00:43:08,319 --> 00:43:13,900
do this I don't have all the output your
basis of this church or the websites

520
00:43:13,900 --> 00:43:18,279
that we host in an experimental
environment it's running TLS 1.3 that's

521
00:43:18,279 --> 00:43:24,099
right on nginx parameters here and a
couple of things to look at it does do

522
00:43:24,099 --> 00:43:27,700
the desperate transport and it also does
there's a record that you can put in

523
00:43:27,700 --> 00:43:31,529
your DNS that will improve your TLS
scores

524
00:43:31,529 --> 00:43:36,849
multi-ball providers now expect you to
create a specific text record in your

525
00:43:36,849 --> 00:43:42,160
dns free domain and that tax record
tells you which certificate authorities

526
00:43:42,160 --> 00:43:46,690
were allowed to generate certificates
for your link back this is important for

527
00:43:46,690 --> 00:43:49,720
somebody to generate a certificate for
your domain without your permission of

528
00:43:49,720 --> 00:43:53,120
baby there's an email an email account
for happened

529
00:43:53,120 --> 00:43:58,580
the main generator city or some other
domain or for your own though be neat

530
00:43:58,580 --> 00:44:01,850
and smooth traffic to a sublimating for
your domain is reducing a lot of

531
00:44:01,850 --> 00:44:06,080
positivity this DNS will help sort that
out for you

532
00:44:06,080 --> 00:44:11,390
this is a separate text that does
clients testing it for web selves and

533
00:44:11,390 --> 00:44:16,460
this is the same website don't have to
tell us when we applied to it now it

534
00:44:16,460 --> 00:44:20,870
passed PCI compliance 100% agree there
are four issues found for HIPAA

535
00:44:20,870 --> 00:44:24,650
compliance and for furnace the only
issues of were found on this site were

536
00:44:24,650 --> 00:44:30,770
cipher suites that were enabled that
have to be disabled at the state level

537
00:44:30,770 --> 00:44:34,700
off the ticket when they get back to
work if you go through this it gives you

538
00:44:34,700 --> 00:44:40,490
a whole lot of detail on the things you
need to address to make your SSL TLS

539
00:44:40,490 --> 00:44:48,589
aerated connections be as good as they
can be so the other thing you want to

540
00:44:48,590 --> 00:44:53,000
look at on this is what we saw back to
the SSL test site these are the ciphers

541
00:44:53,000 --> 00:44:57,410
that were used that are available at
tests every site for against your

542
00:44:57,410 --> 00:45:01,339
platform and if these come up in red and
those ciphers need to be removed from

543
00:45:01,340 --> 00:45:05,060
your platform with a certain security it
tells you the bid strength and it tells

544
00:45:05,060 --> 00:45:09,020
you which cipher is which ones they're
in the order that they prefer so you

545
00:45:09,020 --> 00:45:14,660
always want to have it do the refer
ciphers approach here's how I did this

546
00:45:14,660 --> 00:45:20,480
on us CentOS on machine and web server I
compiled an actual source code because

547
00:45:20,480 --> 00:45:30,020
it was version was needed to do to TLS
three two one

548
00:45:30,020 --> 00:45:40,070
that persons needed for our TLS 1.3 as
well I linked the diffie-hellman key to

549
00:45:40,070 --> 00:45:45,290
keep around a fourth of at least 4096
bits and then put that into the

550
00:45:45,290 --> 00:45:48,140
configuration
a curve that it supports and then

551
00:45:48,140 --> 00:45:51,859
there's the ciphers I can do to be more
detailed Robinson to config for these I

552
00:45:51,859 --> 00:45:56,089
don't care if you want to do this on
your own but set these up test them or

553
00:45:56,089 --> 00:46:01,880
need some help doing this with nginx you
can do it with Apache as well there was

554
00:46:01,880 --> 00:46:06,349
a bug do not absolutely well you can go
there probably if you're running even

555
00:46:06,349 --> 00:46:12,319
the latest version would probably patch
to get up not I think so the one that's

556
00:46:12,319 --> 00:46:16,730
not broken of a version that was broken
that's why I pulled it out of here

557
00:46:16,730 --> 00:46:21,019
because I couldn't do it to work with
1.3 if somebody if you're sharing

558
00:46:21,019 --> 00:46:26,419
environment so they can upload a PHP
script to get an account with various

559
00:46:26,420 --> 00:46:30,319
persons get encounter server public PHP
script run that script through their

560
00:46:30,319 --> 00:46:34,420
website think you're doing is share
hoster and they never read access

561
00:46:34,420 --> 00:46:44,599
terrible is that big apache so check it
out so we're out of time it's over but

562
00:46:44,599 --> 00:46:48,069
if you have any questions you can reach
me there

563
00:47:08,549 --> 00:47:10,640
you

564
00:47:51,510 --> 00:47:53,570
you

