1
00:00:00,000 --> 00:00:08,069
<font color="#CCCCCC">who's up working</font><font color="#E5E5E5"> on Rocky's it would</font>

2
00:00:03,780 --> 00:00:11,790
need you help you remember well go<font color="#CCCCCC"> on</font>

3
00:00:08,069 --> 00:00:18,060
<font color="#E5E5E5">okay hey mrs. sound good in the back</font>

4
00:00:11,790 --> 00:00:23,100
alright silo ladder let's<font color="#E5E5E5"> try how about</font>

5
00:00:18,060 --> 00:00:24,509
<font color="#CCCCCC">that that's hang it shame ok I'll try</font>

6
00:00:23,100 --> 00:00:30,330
speak with my big boy voice we'll see

7
00:00:24,510 --> 00:00:32,969
how that goes<font color="#E5E5E5"> ok good evening everyone</font>

8
00:00:30,330 --> 00:00:35,399
thank<font color="#E5E5E5"> you for</font><font color="#CCCCCC"> coming to</font><font color="#E5E5E5"> this talk I'm</font>

9
00:00:32,969 --> 00:00:37,230
Adam ever small I'm a soon-to-be former

10
00:00:35,399 --> 00:00:39,120
PhD student at the University of

11
00:00:37,230 --> 00:00:41,430
Wisconsin by<font color="#E5E5E5"> that I mean I'm hope to be</font>

12
00:00:39,120 --> 00:00:43,890
graduating not that I'm dropping out I

13
00:00:41,430 --> 00:00:45,870
study cloud security and applied

14
00:00:43,890 --> 00:00:47,610
cryptography and i'm here to<font color="#CCCCCC"> talk to you</font>

15
00:00:45,870 --> 00:00:49,860
today about some fairly exciting new

16
00:00:47,610 --> 00:00:52,199
research some new cryptographic

17
00:00:49,860 --> 00:00:53,640
primitives and a protocol for using them

18
00:00:52,199 --> 00:00:56,070
with passwords which we think is going

19
00:00:53,640 --> 00:00:58,920
to really improve the way that passwords

20
00:00:56,070 --> 00:01:00,510
are used today this is work originally

21
00:00:58,920 --> 00:01:03,420
presented at usenix security back in

22
00:01:00,510 --> 00:01:06,149
2015 this is joint work with two other

23
00:01:03,420 --> 00:01:08,729
PhD students will Chatterjee and Sam Sam

24
00:01:06,150 --> 00:01:11,159
Scott<font color="#CCCCCC"> Rahul's at Cornell Tech Sam</font>

25
00:01:08,729 --> 00:01:13,439
Scott's at Royal Holloway in London and

26
00:01:11,159 --> 00:01:15,600
also to<font color="#CCCCCC"> professors re jewels and Tom</font>

27
00:01:13,439 --> 00:01:20,250
<font color="#CCCCCC">rishton part both of which are in</font>

28
00:01:15,600 --> 00:01:21,720
Cornell Tech<font color="#E5E5E5"> ok so we use passwords</font>

29
00:01:20,250 --> 00:01:23,520
every day we use these things to

30
00:01:21,720 --> 00:01:25,770
authenticate to our devices and we use

31
00:01:23,520 --> 00:01:29,340
these things to act at access online

32
00:01:25,770 --> 00:01:40,679
servers sorry let me<font color="#E5E5E5"> do this one more</font>

33
00:01:29,340 --> 00:01:49,530
time a range<font color="#E5E5E5"> manage two displays when I</font>

34
00:01:40,680 --> 00:01:52,110
can see all my<font color="#E5E5E5"> notes all right and what</font>

35
00:01:49,530 --> 00:02:00,990
<font color="#E5E5E5">about now ah now you guys are you seeing</font>

36
00:01:52,110 --> 00:02:03,119
<font color="#E5E5E5">the secret side let's try this way it's</font>

37
00:02:00,990 --> 00:02:11,819
no fun now you guys<font color="#E5E5E5"> get to see the good</font>

38
00:02:03,119 --> 00:02:13,260
stuff<font color="#E5E5E5"> get the trick we'll see</font><font color="#CCCCCC"> if not</font>

39
00:02:11,819 --> 00:02:29,790
I'll fly with no notes you see how it

40
00:02:13,260 --> 00:02:39,120
goes<font color="#CCCCCC"> ok not going to work will do this</font>

41
00:02:29,790 --> 00:02:40,859
<font color="#E5E5E5">you like it</font><font color="#CCCCCC"> ok so we use masters every</font>

42
00:02:39,120 --> 00:02:43,200
day we use these<font color="#E5E5E5"> things to log on to</font><font color="#CCCCCC"> our</font>

43
00:02:40,860 --> 00:02:44,790
devices and our online services but the

44
00:02:43,200 --> 00:02:45,929
way we're using these passwords the way

45
00:02:44,790 --> 00:02:47,879
we're storing this passwords is

46
00:02:45,930 --> 00:02:50,069
fundamentally broken and the reason for

47
00:02:47,879 --> 00:02:51,870
that<font color="#CCCCCC"> is password databases get stolen</font>

48
00:02:50,069 --> 00:02:55,140
and<font color="#E5E5E5"> when they get stolen it's too easy</font>

49
00:02:51,870 --> 00:02:56,819
to crack these passwords so what I hope

50
00:02:55,140 --> 00:02:58,920
you to present<font color="#CCCCCC"> to you</font><font color="#E5E5E5"> today is a new</font>

51
00:02:56,819 --> 00:03:00,690
direction so a new architecture<font color="#E5E5E5"> for</font>

52
00:02:58,920 --> 00:03:02,369
protecting passwords something built

53
00:03:00,690 --> 00:03:04,409
around a cryptographic pseudo-random

54
00:03:02,370 --> 00:03:06,569
function provide provided as a service

55
00:03:04,409 --> 00:03:08,459
<font color="#E5E5E5">and this is going to not only prevent</font>

56
00:03:06,569 --> 00:03:10,768
offline attacks but<font color="#E5E5E5"> this is going to</font>

57
00:03:08,459 --> 00:03:12,750
enable a password people who use

58
00:03:10,769 --> 00:03:14,819
passwords to be able<font color="#E5E5E5"> to detect online</font>

59
00:03:12,750 --> 00:03:16,980
attacks and do something about them so

60
00:03:14,819 --> 00:03:18,899
they can rotate keys and they can

61
00:03:16,980 --> 00:03:22,470
cryptographically erase information once

62
00:03:18,900 --> 00:03:24,690
it's been stolen<font color="#CCCCCC"> all right so first let</font>

63
00:03:22,470 --> 00:03:26,580
me lock down some terminology so I'm

64
00:03:24,690 --> 00:03:28,170
<font color="#E5E5E5">going to use the term PRF which is sort</font>

65
00:03:26,580 --> 00:03:30,840
for pseudo-random function but i'm going

66
00:03:28,170 --> 00:03:33,119
<font color="#E5E5E5">to say PRS because i'm lazy ok so PRS is</font>

67
00:03:30,840 --> 00:03:34,830
really simple<font color="#E5E5E5"> it's going to</font><font color="#CCCCCC"> take an</font>

68
00:03:33,120 --> 00:03:36,360
input some arbitrary input imagine that

69
00:03:34,830 --> 00:03:38,340
document or in our case is a password

70
00:03:36,360 --> 00:03:39,930
<font color="#CCCCCC">and it may or may not take a secret key</font>

71
00:03:38,340 --> 00:03:41,610
right and it's going<font color="#E5E5E5"> to produce some</font>

72
00:03:39,930 --> 00:03:43,739
fixed length output and this output is

73
00:03:41,610 --> 00:03:45,299
going<font color="#E5E5E5"> to be for more or less it's going</font>

74
00:03:43,739 --> 00:03:47,280
<font color="#E5E5E5">to look like a random string right so</font>

75
00:03:45,299 --> 00:03:49,379
think hash functions in fact hash

76
00:03:47,280 --> 00:03:51,720
functions are pseudo random functions so

77
00:03:49,379 --> 00:03:53,819
shot to shot<font color="#E5E5E5"> three or keyed hash</font>

78
00:03:51,720 --> 00:03:54,989
functions like<font color="#E5E5E5"> H Mac and when we're</font>

79
00:03:53,819 --> 00:03:56,429
talking about passwords things like

80
00:03:54,989 --> 00:03:57,989
<font color="#CCCCCC">decrypt and</font><font color="#E5E5E5"> s script these things are</font>

81
00:03:56,430 --> 00:03:59,580
all pseudo-random function so you takin

82
00:03:57,989 --> 00:04:01,049
some input run them through<font color="#E5E5E5"> some</font>

83
00:03:59,580 --> 00:04:05,250
algorithm you get some fix<font color="#E5E5E5"> like the</font>

84
00:04:01,049 --> 00:04:07,439
output<font color="#CCCCCC"> ok so let's</font><font color="#E5E5E5"> talk</font><font color="#CCCCCC"> about a</font>

85
00:04:05,250 --> 00:04:09,780
motivating example if you go to LinkedIn

86
00:04:07,439 --> 00:04:11,340
the only way to access linkedin is you

87
00:04:09,780 --> 00:04:13,890
provide them<font color="#E5E5E5"> an email address and a</font>

88
00:04:11,340 --> 00:04:15,450
password now of<font color="#CCCCCC"> course linkedin has</font><font color="#E5E5E5"> to</font>

89
00:04:13,890 --> 00:04:16,709
store this password in some way so when

90
00:04:15,450 --> 00:04:19,440
you come back they can check if your

91
00:04:16,709 --> 00:04:21,840
password is so<font color="#E5E5E5"> same alright so pop quiz</font>

92
00:04:19,440 --> 00:04:24,300
how was linkedin storing passwords in

93
00:04:21,839 --> 00:04:26,128
2012 this is a multiple<font color="#E5E5E5"> choice question</font>

94
00:04:24,300 --> 00:04:31,800
someone in<font color="#E5E5E5"> this someone in this</font><font color="#CCCCCC"> room</font>

95
00:04:26,129 --> 00:04:33,180
knows this answer that'd be<font color="#E5E5E5"> that'd be</font>

96
00:04:31,800 --> 00:04:34,650
weird to do all the above<font color="#CCCCCC"> okay they</font>

97
00:04:33,180 --> 00:04:36,930
weren't starting plain text after thank

98
00:04:34,650 --> 00:04:39,060
goodness some people are though it turns

99
00:04:36,930 --> 00:04:41,580
out in 2012 they were storing unsalted

100
00:04:39,060 --> 00:04:43,319
hashes of passwords<font color="#E5E5E5"> of course the reason</font>

101
00:04:41,580 --> 00:04:45,690
we know this is because in 2012

102
00:04:43,319 --> 00:04:47,159
attackers broke in they stole a large

103
00:04:45,690 --> 00:04:49,259
corpus of passwords and then they then

104
00:04:47,159 --> 00:04:50,729
leaked them online of course once they

105
00:04:49,259 --> 00:04:52,680
lead them online because they were

106
00:04:50,729 --> 00:04:55,229
unsalted security researchers<font color="#CCCCCC"> had a</font>

107
00:04:52,680 --> 00:04:57,270
field day in two weeks worth of cracking

108
00:04:55,229 --> 00:04:59,460
security researchers recovered most of

109
00:04:57,270 --> 00:05:00,690
the passwords now the reason it was so

110
00:04:59,460 --> 00:05:03,150
efficient is because they weren't

111
00:05:00,690 --> 00:05:05,639
salting passwords but<font color="#E5E5E5"> I'd like to point</font>

112
00:05:03,150 --> 00:05:07,440
out that<font color="#CCCCCC"> even if Lincoln was following</font>

113
00:05:05,639 --> 00:05:09,449
industry best practices if they were

114
00:05:07,440 --> 00:05:11,400
using salt and these iterated hashes

115
00:05:09,449 --> 00:05:13,229
that are harder to compute this doesn't

116
00:05:11,400 --> 00:05:16,378
actually stop<font color="#E5E5E5"> this offline dictionary</font>

117
00:05:13,229 --> 00:05:17,878
attacks it only slows them down<font color="#E5E5E5"> all</font>

118
00:05:16,379 --> 00:05:19,979
<font color="#CCCCCC">right it sounds like I'm picking</font><font color="#E5E5E5"> on</font>

119
00:05:17,879 --> 00:05:21,780
linkedin a little bit but these password

120
00:05:19,979 --> 00:05:23,340
database breaches are common surely you

121
00:05:21,780 --> 00:05:24,568
guys read the internet and occasionally

122
00:05:23,340 --> 00:05:26,219
on the internet we hear<font color="#CCCCCC"> about these</font>

123
00:05:24,569 --> 00:05:27,629
kinds of things<font color="#E5E5E5"> and these don't just</font>

124
00:05:26,219 --> 00:05:30,180
happen to mom and pop shops these are

125
00:05:27,629 --> 00:05:32,460
sophisticated technology companies these

126
00:05:30,180 --> 00:05:34,080
are news companies these are<font color="#CCCCCC"> all kinds</font>

127
00:05:32,460 --> 00:05:36,150
<font color="#CCCCCC">of companies who are experiencing these</font>

128
00:05:34,080 --> 00:05:37,859
password database breaches so our

129
00:05:36,150 --> 00:05:40,198
observation is that password database

130
00:05:37,860 --> 00:05:42,630
preachers are common now of course<font color="#CCCCCC"> we</font>

131
00:05:40,199 --> 00:05:45,000
<font color="#E5E5E5">want to limit these breaches from</font>

132
00:05:42,630 --> 00:05:47,130
occurring if possible but when they do

133
00:05:45,000 --> 00:05:48,810
occur we want the data owners<font color="#E5E5E5"> that have</font>

134
00:05:47,130 --> 00:05:51,240
some recourse and we<font color="#E5E5E5"> don't want the</font>

135
00:05:48,810 --> 00:05:53,340
recourse to be sorry your account has

136
00:05:51,240 --> 00:05:55,139
been locked also probably<font color="#CCCCCC"> instagrammed</font>

137
00:05:53,340 --> 00:05:56,489
<font color="#E5E5E5">counties been also broken into because</font>

138
00:05:55,139 --> 00:05:58,229
I'm<font color="#E5E5E5"> sorry use the same password</font>

139
00:05:56,490 --> 00:05:59,699
everywhere and I have to<font color="#E5E5E5"> log in and</font>

140
00:05:58,229 --> 00:06:02,279
<font color="#E5E5E5">change your password we want something</font>

141
00:05:59,699 --> 00:06:06,750
<font color="#CCCCCC">better all right so let's look at a</font>

142
00:06:02,279 --> 00:06:09,300
slightly better approach in January 2015

143
00:06:06,750 --> 00:06:13,349
<font color="#E5E5E5">Facebook presented this slide at</font>

144
00:06:09,300 --> 00:06:14,729
real-world crypto in London<font color="#CCCCCC"> so I'll talk</font>

145
00:06:13,349 --> 00:06:16,469
to you really briefly through it this is

146
00:06:14,729 --> 00:06:17,758
how<font color="#CCCCCC"> facebook process is</font><font color="#E5E5E5"> your password we</font>

147
00:06:16,469 --> 00:06:20,129
actually log in and type your password

148
00:06:17,759 --> 00:06:22,919
so they<font color="#E5E5E5"> take your plaintext password</font>

149
00:06:20,129 --> 00:06:25,710
they run it through md5 then take a<font color="#CCCCCC"> 20</font>

150
00:06:22,919 --> 00:06:27,599
bytes shell they create a 20 bytes salts

151
00:06:25,710 --> 00:06:29,489
they run that through an H Mac<font color="#CCCCCC"> rishabh</font>

152
00:06:27,599 --> 00:06:31,440
one they then connect to a remote server

153
00:06:29,490 --> 00:06:32,909
run that with HTML shot to on a secret

154
00:06:31,440 --> 00:06:34,770
hello and that<font color="#E5E5E5"> service and the result</font>

155
00:06:32,909 --> 00:06:36,210
back run<font color="#E5E5E5"> that through a script run with</font>

156
00:06:34,770 --> 00:06:37,150
<font color="#CCCCCC">or hmx out to and then store them in</font>

157
00:06:36,210 --> 00:06:40,330
database

158
00:06:37,150 --> 00:06:42,700
everyone<font color="#E5E5E5"> got that okay so you're</font>

159
00:06:40,330 --> 00:06:44,830
probably thinking why is this so

160
00:06:42,700 --> 00:06:48,580
complicated and why why<font color="#CCCCCC"> would Facebook</font>

161
00:06:44,830 --> 00:06:50,050
do this do this this way the reason they

162
00:06:48,580 --> 00:06:52,479
do this this<font color="#E5E5E5"> way is actually historical</font>

163
00:06:50,050 --> 00:06:56,920
so let's walk through it one at a time

164
00:06:52,480 --> 00:06:59,740
so once<font color="#CCCCCC"> upon a time</font><font color="#E5E5E5"> Facebook had 800</font>

165
00:06:56,920 --> 00:07:01,360
million passwords that were md5 hashes

166
00:06:59,740 --> 00:07:03,730
stored in a database they thought

167
00:07:01,360 --> 00:07:06,220
rightly so<font color="#CCCCCC"> hmm this</font><font color="#E5E5E5"> is probably not a</font>

168
00:07:03,730 --> 00:07:08,590
good idea we should improve our strategy

169
00:07:06,220 --> 00:07:11,020
but we have<font color="#E5E5E5"> 800 million passwords in a</font>

170
00:07:08,590 --> 00:07:14,020
database it's unreasonable for us to say

171
00:07:11,020 --> 00:07:15,520
hey all<font color="#E5E5E5"> facebook users login on Tuesday</font>

172
00:07:14,020 --> 00:07:17,380
give us your password we'd like to

173
00:07:15,520 --> 00:07:19,810
update our code and our database all in

174
00:07:17,380 --> 00:07:22,450
one day so what do they do so<font color="#CCCCCC"> they want</font>

175
00:07:19,810 --> 00:07:23,800
to move to<font color="#E5E5E5"> assaulted sha-1 hash so</font>

176
00:07:22,450 --> 00:07:28,210
instead what they decided to do is take

177
00:07:23,800 --> 00:07:31,060
<font color="#E5E5E5">the existing md5 hashes add a 20 bytes</font>

178
00:07:28,210 --> 00:07:33,760
salts wrap them and sha-1 and write them

179
00:07:31,060 --> 00:07:35,800
back to the database few years later

180
00:07:33,760 --> 00:07:37,210
shell 1 is broken and they think<font color="#E5E5E5"> okay</font>

181
00:07:35,800 --> 00:07:39,310
now what reimaging well we're<font color="#E5E5E5"> going to</font>

182
00:07:37,210 --> 00:07:41,140
do the same<font color="#E5E5E5"> thing we're going to switch</font>

183
00:07:39,310 --> 00:07:43,870
the shot to in this<font color="#E5E5E5"> case on another</font>

184
00:07:41,140 --> 00:07:45,520
machine with a secret a little bit later

185
00:07:43,870 --> 00:07:47,080
they decide this isn't good enough<font color="#E5E5E5"> yet</font>

186
00:07:45,520 --> 00:07:49,090
so we're going to add s script a script

187
00:07:47,080 --> 00:07:50,650
<font color="#CCCCCC">is kind</font><font color="#E5E5E5"> of like a hard hash function I</font>

188
00:07:49,090 --> 00:07:52,419
it takes a lot of computation to compute

189
00:07:50,650 --> 00:07:54,820
so they add this to the existing

190
00:07:52,420 --> 00:07:55,990
database but the<font color="#CCCCCC"> S script output is</font>

191
00:07:54,820 --> 00:07:57,730
really long and they don't<font color="#CCCCCC"> want to throw</font>

192
00:07:55,990 --> 00:07:59,200
that<font color="#E5E5E5"> in a database so then they run it</font>

193
00:07:57,730 --> 00:08:01,840
through shot<font color="#E5E5E5"> to to make it smaller and</font>

194
00:07:59,200 --> 00:08:04,690
put it back in<font color="#E5E5E5"> the database and what</font>

195
00:08:01,840 --> 00:08:07,390
we're left with is this<font color="#E5E5E5"> code code is now</font>

196
00:08:04,690 --> 00:08:08,830
an archaeological record of<font color="#CCCCCC"> Facebook</font>

197
00:08:07,390 --> 00:08:12,039
struggling with password storage

198
00:08:08,830 --> 00:08:13,150
technology but<font color="#E5E5E5"> I want to point out</font>

199
00:08:12,040 --> 00:08:14,890
something really<font color="#E5E5E5"> interesting there's</font>

200
00:08:13,150 --> 00:08:18,520
something here that most tech companies

201
00:08:14,890 --> 00:08:20,200
<font color="#E5E5E5">dump too and that's this so at some</font>

202
00:08:18,520 --> 00:08:22,840
point during processing your password

203
00:08:20,200 --> 00:08:24,969
<font color="#CCCCCC">facebook connects to a remote server</font>

204
00:08:22,840 --> 00:08:27,880
still<font color="#E5E5E5"> owned by Facebook put another</font>

205
00:08:24,970 --> 00:08:29,830
machine ask that<font color="#E5E5E5"> machine to apply an H</font>

206
00:08:27,880 --> 00:08:32,140
<font color="#E5E5E5">max shot to you with a secret that's</font>

207
00:08:29,830 --> 00:08:34,689
<font color="#E5E5E5">held only on that machine and then get</font>

208
00:08:32,140 --> 00:08:36,549
the result back the reason this<font color="#CCCCCC"> is</font>

209
00:08:34,690 --> 00:08:39,700
interesting is this leads to a different

210
00:08:36,549 --> 00:08:41,500
kind of architecture so architecture is

211
00:08:39,700 --> 00:08:43,420
more like this so at a very high level

212
00:08:41,500 --> 00:08:45,280
the user provides the password to the

213
00:08:43,419 --> 00:08:47,380
web server which provides some of that

214
00:08:45,280 --> 00:08:49,390
<font color="#E5E5E5">pre-processing at some point it connects</font>

215
00:08:47,380 --> 00:08:50,680
<font color="#E5E5E5">to this crypto server the crypto server</font>

216
00:08:49,390 --> 00:08:52,270
runs this age

217
00:08:50,680 --> 00:08:55,000
I shot<font color="#E5E5E5"> two with a secret and sends the</font>

218
00:08:52,270 --> 00:08:57,040
result back the reason this<font color="#CCCCCC"> is nice</font>

219
00:08:55,000 --> 00:08:58,930
because now critical information is<font color="#E5E5E5"> not</font>

220
00:08:57,040 --> 00:09:00,790
only<font color="#E5E5E5"> on one machine it's now on two</font>

221
00:08:58,930 --> 00:09:02,979
different machines so if an attack of

222
00:09:00,790 --> 00:09:04,810
breaks and any seals either the password

223
00:09:02,980 --> 00:09:06,790
database word of the secret but not both

224
00:09:04,810 --> 00:09:08,829
the attacker now has insufficient

225
00:09:06,790 --> 00:09:10,540
information to crack those passwords we

226
00:09:08,830 --> 00:09:13,630
need to attack<font color="#E5E5E5"> both machines to do it</font>

227
00:09:10,540 --> 00:09:17,380
<font color="#E5E5E5">okay so this is a nice architecture but</font>

228
00:09:13,630 --> 00:09:19,600
there are still some limitations so

229
00:09:17,380 --> 00:09:21,550
people<font color="#CCCCCC"> who do cryptography might say oh</font>

230
00:09:19,600 --> 00:09:23,110
<font color="#E5E5E5">I see a secret the first question</font><font color="#CCCCCC"> I</font>

231
00:09:21,550 --> 00:09:25,660
might ask is how am I going to rotate

232
00:09:23,110 --> 00:09:27,730
that secret the<font color="#CCCCCC"> dirty little secret</font>

233
00:09:25,660 --> 00:09:30,939
inside Facebook is actually cannot

234
00:09:27,730 --> 00:09:32,890
change this secret if they change<font color="#E5E5E5"> the</font>

235
00:09:30,940 --> 00:09:35,080
secret they're going to eviscerate their

236
00:09:32,890 --> 00:09:37,209
entire database of whatever it<font color="#E5E5E5"> is 1.4</font>

237
00:09:35,080 --> 00:09:38,649
billion passwords at this point right so

238
00:09:37,209 --> 00:09:42,219
there's sort of stuck with the secret

239
00:09:38,649 --> 00:09:44,410
for us<font color="#CCCCCC"> okay so that's not so</font><font color="#E5E5E5"> good the</font>

240
00:09:42,220 --> 00:09:46,209
second problem is if an attacker breaks

241
00:09:44,410 --> 00:09:48,699
in and steals the password database and

242
00:09:46,209 --> 00:09:50,439
has access the crypto server you can't

243
00:09:48,700 --> 00:09:52,450
run offline attacks<font color="#E5E5E5"> okay so that's good</font>

244
00:09:50,440 --> 00:09:53,770
but<font color="#CCCCCC"> if you tackle is actually the crypto</font>

245
00:09:52,450 --> 00:09:56,500
server he might be able<font color="#E5E5E5"> to run online</font>

246
00:09:53,770 --> 00:09:59,589
tax and because of<font color="#CCCCCC"> the way Facebook has</font>

247
00:09:56,500 --> 00:10:00,820
set up the API it's really difficult<font color="#E5E5E5"> for</font>

248
00:09:59,589 --> 00:10:04,209
the crypto server to tell the difference

249
00:10:00,820 --> 00:10:06,459
<font color="#CCCCCC">between a large volume of legitimate</font>

250
00:10:04,209 --> 00:10:08,709
traffic a passwords for different user

251
00:10:06,459 --> 00:10:10,930
accounts and a bunch of guesses for the

252
00:10:08,709 --> 00:10:12,910
same user account because every guest

253
00:10:10,930 --> 00:10:15,819
with distinct in the way descriptive

254
00:10:12,910 --> 00:10:17,560
server API looks<font color="#CCCCCC"> okay</font><font color="#E5E5E5"> so we like this</font>

255
00:10:15,820 --> 00:10:20,080
architecture but we want<font color="#E5E5E5"> to fix these</font>

256
00:10:17,560 --> 00:10:21,520
problems<font color="#CCCCCC"> all right so for the rest</font><font color="#E5E5E5"> of</font>

257
00:10:20,080 --> 00:10:22,720
the talk<font color="#E5E5E5"> I'm going to leave behind the</font>

258
00:10:21,520 --> 00:10:24,610
state of<font color="#E5E5E5"> the art I'm going to talk about</font>

259
00:10:22,720 --> 00:10:26,140
our contribution to how we protect

260
00:10:24,610 --> 00:10:27,760
passwords and we're going to<font color="#E5E5E5"> sort of</font>

261
00:10:26,140 --> 00:10:29,110
start with this architecture and then

262
00:10:27,760 --> 00:10:33,819
we're going to<font color="#E5E5E5"> fix those problems that</font>

263
00:10:29,110 --> 00:10:37,720
we saw ok so the crypto server is now

264
00:10:33,820 --> 00:10:39,339
again be called a Pythia PRS server and

265
00:10:37,720 --> 00:10:41,230
we're going to change the<font color="#E5E5E5"> API in such a</font>

266
00:10:39,339 --> 00:10:43,570
way that now the crypto server can

267
00:10:41,230 --> 00:10:45,160
detect online attacks and when it

268
00:10:43,570 --> 00:10:48,279
detects online at AXA can do<font color="#E5E5E5"> something</font>

269
00:10:45,160 --> 00:10:49,149
about it and we also want to when we do

270
00:10:48,279 --> 00:10:51,399
something<font color="#CCCCCC"> about it we're talking</font><font color="#E5E5E5"> about</font>

271
00:10:49,149 --> 00:10:53,440
is probably rotating the secret so we

272
00:10:51,399 --> 00:10:55,060
can recover<font color="#E5E5E5"> from compromises and even if</font>

273
00:10:53,440 --> 00:10:58,600
<font color="#E5E5E5">we don't detect compromises we can</font>

274
00:10:55,060 --> 00:10:59,770
proactively rotate secrets and when we

275
00:10:58,600 --> 00:11:01,839
rotate secrets that will give us

276
00:10:59,770 --> 00:11:04,140
cryptographic erasure meaning we're

277
00:11:01,839 --> 00:11:08,220
going to invalidate stolen databases

278
00:11:04,140 --> 00:11:10,650
through this key rotation and finally

279
00:11:08,220 --> 00:11:13,290
what we want to build is not something

280
00:11:10,650 --> 00:11:14,760
just for big tech companies like Google

281
00:11:13,290 --> 00:11:16,709
and<font color="#E5E5E5"> Facebook we want to build as a</font>

282
00:11:14,760 --> 00:11:18,480
multi-tenant service one of them

283
00:11:16,710 --> 00:11:21,510
something that<font color="#CCCCCC"> a service provider can</font>

284
00:11:18,480 --> 00:11:24,060
build it and allow players of all sizes

285
00:11:21,510 --> 00:11:26,220
to use this to<font color="#CCCCCC"> protect</font><font color="#E5E5E5"> their passwords</font>

286
00:11:24,060 --> 00:11:27,540
and yet not have to outsource all their

287
00:11:26,220 --> 00:11:29,280
security like<font color="#E5E5E5"> I'll just give you all my</font>

288
00:11:27,540 --> 00:11:31,170
passwords and hope<font color="#E5E5E5"> that</font><font color="#CCCCCC"> you don't get</font>

289
00:11:29,280 --> 00:11:34,620
compromised we want some better balance

290
00:11:31,170 --> 00:11:35,910
than that<font color="#CCCCCC"> okay so what I'd like to do</font>

291
00:11:34,620 --> 00:11:37,950
for the<font color="#E5E5E5"> next few minutes is take you</font>

292
00:11:35,910 --> 00:11:40,620
through a high level view of how how

293
00:11:37,950 --> 00:11:43,020
Pythia<font color="#E5E5E5"> PRS service works and then I'll</font>

294
00:11:40,620 --> 00:11:45,750
dive into some<font color="#E5E5E5"> nitty gritty details okay</font>

295
00:11:43,020 --> 00:11:47,760
so we'll start<font color="#E5E5E5"> with we have a web server</font>

296
00:11:45,750 --> 00:11:51,120
it's using Pythia to harden passwords

297
00:11:47,760 --> 00:11:52,770
how does it n roll a new user so the

298
00:11:51,120 --> 00:11:54,420
user logs in the Norway provides the

299
00:11:52,770 --> 00:11:56,100
user name and probably a really<font color="#E5E5E5"> crappy</font>

300
00:11:54,420 --> 00:11:58,650
password that's also used on a bunch<font color="#E5E5E5"> of</font>

301
00:11:56,100 --> 00:12:00,300
other websites the web server is<font color="#CCCCCC"> going</font>

302
00:11:58,650 --> 00:12:02,730
to choose a random value will call that

303
00:12:00,300 --> 00:12:03,750
<font color="#E5E5E5">T this is going to be a user ID and it's</font>

304
00:12:02,730 --> 00:12:05,610
going<font color="#E5E5E5"> to run the password through a</font>

305
00:12:03,750 --> 00:12:09,240
blinding function i'll define this later

306
00:12:05,610 --> 00:12:10,530
we'll call<font color="#CCCCCC"> that result X the web server</font>

307
00:12:09,240 --> 00:12:12,330
<font color="#CCCCCC">is going</font><font color="#E5E5E5"> to connect to the 50th server</font>

308
00:12:10,530 --> 00:12:14,850
and issue a query the query is going to

309
00:12:12,330 --> 00:12:16,920
contain the following it's going to have

310
00:12:14,850 --> 00:12:19,140
a value w this<font color="#E5E5E5"> is just a web server ID</font>

311
00:12:16,920 --> 00:12:20,819
it's going to have that user ID that we

312
00:12:19,140 --> 00:12:26,340
just<font color="#E5E5E5"> established and it's going to have</font>

313
00:12:20,820 --> 00:12:27,450
this blinded password so the Pythias

314
00:12:26,340 --> 00:12:28,860
server is<font color="#CCCCCC"> going to look up in a key</font>

315
00:12:27,450 --> 00:12:30,840
table and it's going<font color="#E5E5E5"> to fetch a key</font>

316
00:12:28,860 --> 00:12:32,880
that's assigned specifically to this web

317
00:12:30,840 --> 00:12:34,500
server it's then going to run the user

318
00:12:32,880 --> 00:12:36,840
ID<font color="#CCCCCC"> and the blinded password through this</font>

319
00:12:34,500 --> 00:12:38,370
function this F sub K and this is going

320
00:12:36,840 --> 00:12:39,930
to be a this is going to be our key PRS

321
00:12:38,370 --> 00:12:42,660
and I'll define this in a<font color="#E5E5E5"> little bit and</font>

322
00:12:39,930 --> 00:12:45,810
the result is why and it's going<font color="#CCCCCC"> to send</font>

323
00:12:42,660 --> 00:12:46,949
the result back to the web server the

324
00:12:45,810 --> 00:12:48,930
web servers then going to run an

325
00:12:46,950 --> 00:12:51,180
unblinding function and it produces some

326
00:12:48,930 --> 00:12:52,949
value<font color="#E5E5E5"> Z we called Leah protected</font>

327
00:12:51,180 --> 00:12:54,900
password think of<font color="#CCCCCC"> it as</font><font color="#E5E5E5"> you know the</font>

328
00:12:52,950 --> 00:12:56,280
output of iterated hash or decrypt or s

329
00:12:54,900 --> 00:12:57,569
script and then<font color="#E5E5E5"> I'm going to write this</font>

330
00:12:56,280 --> 00:13:00,000
<font color="#E5E5E5">to a database you can write the</font><font color="#CCCCCC"> user</font>

331
00:12:57,570 --> 00:13:01,980
<font color="#CCCCCC">name</font><font color="#E5E5E5"> the user ID and this protected</font>

332
00:13:00,000 --> 00:13:03,510
password and then when the user logs on

333
00:13:01,980 --> 00:13:05,550
again later the web server<font color="#CCCCCC"> once</font>

334
00:13:03,510 --> 00:13:07,620
essentially the same<font color="#E5E5E5"> protocol it</font>

335
00:13:05,550 --> 00:13:09,780
produces some new guy uz prime when Z

336
00:13:07,620 --> 00:13:11,160
prime equals Z web server knows ah this

337
00:13:09,780 --> 00:13:12,870
<font color="#E5E5E5">was</font><font color="#CCCCCC"> the original password and when it</font>

338
00:13:11,160 --> 00:13:17,219
doesn't match it just knows no that's

339
00:13:12,870 --> 00:13:18,509
not<font color="#E5E5E5"> the right password okay so that's</font>

340
00:13:17,220 --> 00:13:19,860
and ruling a user and checking a

341
00:13:18,509 --> 00:13:23,220
password let's talk about compromise

342
00:13:19,860 --> 00:13:24,839
recovery<font color="#CCCCCC"> okay so web server is this big</font>

343
00:13:23,220 --> 00:13:27,389
database to protect the passwords that

344
00:13:24,839 --> 00:13:29,910
guy breaks in maybe it's a sequel

345
00:13:27,389 --> 00:13:31,470
injection who steals<font color="#CCCCCC"> seven million or in</font>

346
00:13:29,910 --> 00:13:32,579
the case of Yahoo two billion or not

347
00:13:31,470 --> 00:13:34,949
just<font color="#CCCCCC"> want to</font><font color="#E5E5E5"> blame one and a half</font>

348
00:13:32,579 --> 00:13:36,959
billion passwords so the nice<font color="#CCCCCC"> thing is</font>

349
00:13:34,949 --> 00:13:38,670
if you're using Pythia<font color="#CCCCCC"> the attacker</font>

350
00:13:36,959 --> 00:13:40,829
can't immediately run offline attacks

351
00:13:38,670 --> 00:13:42,120
but technically<font color="#E5E5E5"> he's got all the same</font>

352
00:13:40,829 --> 00:13:44,790
information you could probably run

353
00:13:42,120 --> 00:13:46,529
online attacks but here the<font color="#E5E5E5"> API is</font>

354
00:13:44,790 --> 00:13:48,389
different<font color="#CCCCCC"> right the attacker has to</font>

355
00:13:46,529 --> 00:13:50,519
specify the web server ID and the user

356
00:13:48,389 --> 00:13:52,680
ID which makes it<font color="#CCCCCC"> really easy for the</font>

357
00:13:50,519 --> 00:13:55,170
<font color="#CCCCCC">Pythias server to see online attacks</font>

358
00:13:52,680 --> 00:13:57,000
right maybe you get<font color="#CCCCCC"> 10 or 20 guesses on</font>

359
00:13:55,170 --> 00:13:58,740
a single user account before the<font color="#CCCCCC"> Pythia</font>

360
00:13:57,000 --> 00:14:00,300
server realizes like<font color="#E5E5E5"> oh this is not</font>

361
00:13:58,740 --> 00:14:01,769
right you can't you can't try 100

362
00:14:00,300 --> 00:14:03,719
different passwords the computer server

363
00:14:01,769 --> 00:14:06,480
can do something<font color="#E5E5E5"> about it it can ban the</font>

364
00:14:03,720 --> 00:14:08,430
<font color="#CCCCCC">ipe it can throttle account it can lock</font>

365
00:14:06,480 --> 00:14:10,740
accounts probably most<font color="#E5E5E5"> importantly you</font>

366
00:14:08,430 --> 00:14:13,079
can<font color="#E5E5E5"> send a consent an alert to the admin</font>

367
00:14:10,740 --> 00:14:16,920
that says hey we see suspicious activity

368
00:14:13,079 --> 00:14:18,239
using your web server<font color="#E5E5E5"> ID so he sends an</font>

369
00:14:16,920 --> 00:14:20,310
alert to<font color="#E5E5E5"> the web server the admin</font>

370
00:14:18,240 --> 00:14:22,319
realizes there's a problem he cleans up

371
00:14:20,310 --> 00:14:24,209
the web server probably patches is a

372
00:14:22,319 --> 00:14:25,740
sequel injection and the web server

373
00:14:24,209 --> 00:14:27,869
context the Pythias over and says hey I

374
00:14:25,740 --> 00:14:31,170
<font color="#E5E5E5">need a run key rotation so it produces a</font>

375
00:14:27,870 --> 00:14:32,910
new key K<font color="#CCCCCC"> Prime 50 server then sends a</font>

376
00:14:31,170 --> 00:14:34,920
compact update token will call this

377
00:14:32,910 --> 00:14:36,899
<font color="#E5E5E5">Delta that's going to enable the admin</font>

378
00:14:34,920 --> 00:14:40,410
to update his password database from the

379
00:14:36,899 --> 00:14:42,029
old key<font color="#E5E5E5"> K to the new key K</font><font color="#CCCCCC"> Prime okay</font>

380
00:14:40,410 --> 00:14:44,309
and so the way the admin runs this

381
00:14:42,029 --> 00:14:47,819
process if they saw Lizzie eyes to see I

382
00:14:44,309 --> 00:14:49,980
<font color="#CCCCCC">Prime's I want to note that the admin</font>

383
00:14:47,819 --> 00:14:51,839
does all of this offline in<font color="#CCCCCC"> the sense</font>

384
00:14:49,980 --> 00:14:53,579
that he<font color="#E5E5E5"> doesn't require user interaction</font>

385
00:14:51,839 --> 00:14:54,779
he doesn't ask his users to<font color="#CCCCCC"> log in and</font>

386
00:14:53,579 --> 00:14:56,399
<font color="#E5E5E5">change the password is</font><font color="#CCCCCC"> enough to lock</font>

387
00:14:54,779 --> 00:14:58,949
their accounts you<font color="#E5E5E5"> can do</font><font color="#CCCCCC"> all of this</font>

388
00:14:56,399 --> 00:15:00,930
<font color="#CCCCCC">themselves it doesn't</font><font color="#E5E5E5"> need the original</font>

389
00:14:58,949 --> 00:15:02,279
password and the the<font color="#E5E5E5"> users password</font>

390
00:15:00,930 --> 00:15:03,388
doesn't change<font color="#E5E5E5"> actually we're just</font>

391
00:15:02,279 --> 00:15:06,839
updating the encryption to earn your

392
00:15:03,389 --> 00:15:09,059
king when he's<font color="#E5E5E5"> done in contacts the</font>

393
00:15:06,839 --> 00:15:11,339
Pythia server and says hey the key<font color="#CCCCCC"> I'm</font>

394
00:15:09,059 --> 00:15:13,139
done with key<font color="#E5E5E5"> K so I want to delete it</font>

395
00:15:11,339 --> 00:15:15,329
and at this point when the 50 server

396
00:15:13,139 --> 00:15:19,350
deletes it we're now in validating an

397
00:15:15,329 --> 00:15:20,579
old password database<font color="#CCCCCC"> okay so if there's</font>

398
00:15:19,350 --> 00:15:22,259
any cryptographers in the obvious

399
00:15:20,579 --> 00:15:24,689
audience you may already be thinking

400
00:15:22,259 --> 00:15:25,910
about<font color="#E5E5E5"> like what kind of primitives do we</font>

401
00:15:24,689 --> 00:15:27,170
have

402
00:15:25,910 --> 00:15:29,360
what kind of properties we need to

403
00:15:27,170 --> 00:15:32,000
implement this<font color="#CCCCCC"> okay so let's go quickly</font>

404
00:15:29,360 --> 00:15:34,130
through the list of<font color="#E5E5E5"> requirements so we</font>

405
00:15:32,000 --> 00:15:37,310
need a scheme that's deterministic given

406
00:15:34,130 --> 00:15:38,330
the same user ID key and a password<font color="#E5E5E5"> of</font>

407
00:15:37,310 --> 00:15:41,359
course we need<font color="#E5E5E5"> to produce the same</font>

408
00:15:38,330 --> 00:15:44,030
output we need the output to be

409
00:15:41,360 --> 00:15:46,700
pseudo-random we need this weird

410
00:15:44,030 --> 00:15:49,760
propagators partial message privacy we

411
00:15:46,700 --> 00:15:52,250
want to require users to specify the

412
00:15:49,760 --> 00:15:54,200
user ID in<font color="#CCCCCC"> the clear to the 50th server</font>

413
00:15:52,250 --> 00:15:55,610
but we want to hide the password so if

414
00:15:54,200 --> 00:15:56,960
you break into a<font color="#CCCCCC"> 50</font><font color="#E5E5E5"> server you don't</font>

415
00:15:55,610 --> 00:15:59,900
actually<font color="#E5E5E5"> see passwords it's kind of</font>

416
00:15:56,960 --> 00:16:02,960
weird property and of<font color="#CCCCCC"> course we need key</font>

417
00:15:59,900 --> 00:16:05,300
rotation<font color="#E5E5E5"> this enables us to recover from</font>

418
00:16:02,960 --> 00:16:07,610
compromises<font color="#CCCCCC"> okay so a bunch of schemes</font>

419
00:16:05,300 --> 00:16:09,829
<font color="#CCCCCC">exist at least in 2015</font><font color="#E5E5E5"> when we did this</font>

420
00:16:07,610 --> 00:16:11,480
work pseudo random functions oblivious

421
00:16:09,830 --> 00:16:13,190
to<font color="#E5E5E5"> the random functions called partially</font>

422
00:16:11,480 --> 00:16:14,300
blind signatures it's a couple other

423
00:16:13,190 --> 00:16:17,150
schemes they give us<font color="#CCCCCC"> updateable</font>

424
00:16:14,300 --> 00:16:18,740
encryption<font color="#E5E5E5"> but in 2015 when we did this</font>

425
00:16:17,150 --> 00:16:20,240
work if you looked at<font color="#E5E5E5"> the intersection</font>

426
00:16:18,740 --> 00:16:22,280
of all of these turns out there with no

427
00:16:20,240 --> 00:16:24,680
existing schemes so we had<font color="#E5E5E5"> to create a</font>

428
00:16:22,280 --> 00:16:28,640
new<font color="#E5E5E5"> scheme something</font><font color="#CCCCCC"> we call partially</font>

429
00:16:24,680 --> 00:16:32,150
oblivious pseudo-random functional<font color="#E5E5E5"> ok so</font>

430
00:16:28,640 --> 00:16:35,540
<font color="#E5E5E5">I'm tempted to go into serious details</font>

431
00:16:32,150 --> 00:16:36,530
there's<font color="#E5E5E5"> only two slides with</font><font color="#CCCCCC"> math so for</font>

432
00:16:35,540 --> 00:16:38,630
those of you who don't<font color="#E5E5E5"> care about the</font>

433
00:16:36,530 --> 00:16:40,490
details it's only<font color="#E5E5E5"> two slides hang with</font>

434
00:16:38,630 --> 00:16:41,840
me for a little bit<font color="#E5E5E5"> ok so I'll tell you</font>

435
00:16:40,490 --> 00:16:43,850
how<font color="#E5E5E5"> we build our partial you believe is</font>

436
00:16:41,840 --> 00:16:46,400
PRS we build our is using something

437
00:16:43,850 --> 00:16:48,620
called a bilinear pairing and that's a

438
00:16:46,400 --> 00:16:51,050
function E which<font color="#CCCCCC"> maps inputs from two</font>

439
00:16:48,620 --> 00:16:53,510
groups onto a target group and it has to

440
00:16:51,050 --> 00:16:55,370
<font color="#E5E5E5">satisfy this function maybe more</font>

441
00:16:53,510 --> 00:16:57,710
importantly each of these groups we have

442
00:16:55,370 --> 00:17:00,470
something<font color="#CCCCCC"> called the computational</font>

443
00:16:57,710 --> 00:17:02,900
diffie-hellman assumption moving given a

444
00:17:00,470 --> 00:17:05,810
and X it's easy to compute a and X but

445
00:17:02,900 --> 00:17:07,879
if i give you<font color="#CCCCCC"> the value ada a to the X</font>

446
00:17:05,810 --> 00:17:10,819
it's hard<font color="#E5E5E5"> to get it's hard to get back</font>

447
00:17:07,880 --> 00:17:14,000
either a or X it's called discrete log

448
00:17:10,819 --> 00:17:15,950
hardness<font color="#E5E5E5"> ok so given such a bilinear</font>

449
00:17:14,000 --> 00:17:17,810
pairing this is how we build our scheme

450
00:17:15,950 --> 00:17:20,480
this is the blinding function you take

451
00:17:17,810 --> 00:17:22,040
the password we hash it onto a group and

452
00:17:20,480 --> 00:17:24,230
<font color="#E5E5E5">we raise it to the power of r where r is</font>

453
00:17:22,040 --> 00:17:25,579
just some random blinding factor it's

454
00:17:24,230 --> 00:17:27,530
going<font color="#E5E5E5"> to be selected uniquely for each</font>

455
00:17:25,579 --> 00:17:29,270
query this is going to perfectly hide

456
00:17:27,530 --> 00:17:30,889
the password so the<font color="#CCCCCC"> Pythias server</font>

457
00:17:29,270 --> 00:17:32,600
doesn't see doesn't wear any information

458
00:17:30,890 --> 00:17:34,940
about passwords

459
00:17:32,600 --> 00:17:38,000
send<font color="#E5E5E5"> this in 50 a server and then the</font>

460
00:17:34,940 --> 00:17:41,809
<font color="#E5E5E5">50th server applies this key PRS so we</font>

461
00:17:38,000 --> 00:17:43,039
take the value X we hash the value T and

462
00:17:41,809 --> 00:17:44,750
we raise the run it through the BI

463
00:17:43,039 --> 00:17:48,049
linear function where is the whole<font color="#E5E5E5"> thing</font>

464
00:17:44,750 --> 00:17:49,730
to<font color="#CCCCCC"> the</font><font color="#E5E5E5"> power</font><font color="#CCCCCC"> K and then the unblinding</font>

465
00:17:48,049 --> 00:17:52,190
function is really simple<font color="#CCCCCC"> it's we take</font>

466
00:17:49,730 --> 00:17:53,900
the inverse of our and we raise the

467
00:17:52,190 --> 00:17:55,520
results of that if you write out what

468
00:17:53,900 --> 00:17:56,960
this looks like you'll see that the

469
00:17:55,520 --> 00:18:01,129
blinding factor and the unblinding

470
00:17:56,960 --> 00:18:03,289
factor cancel out naturally and what

471
00:18:01,130 --> 00:18:06,380
we're left with is a deterministic

472
00:18:03,289 --> 00:18:09,470
computation using the inputs we wanted

473
00:18:06,380 --> 00:18:11,870
precisely so so the password and<font color="#E5E5E5"> user ID</font>

474
00:18:09,470 --> 00:18:13,700
always to<font color="#E5E5E5"> the power of some secret key K</font>

475
00:18:11,870 --> 00:18:16,820
and that secret key K is known only to

476
00:18:13,700 --> 00:18:20,299
the<font color="#CCCCCC"> Pythias server ok so that's</font>

477
00:18:16,820 --> 00:18:23,030
enrolling<font color="#E5E5E5"> user and verifying a password</font>

478
00:18:20,299 --> 00:18:26,000
<font color="#CCCCCC">compromised recovery is really simple so</font>

479
00:18:23,030 --> 00:18:27,590
we send the fraction k prime over<font color="#CCCCCC"> K does</font>

480
00:18:26,000 --> 00:18:29,690
leak any information about either key

481
00:18:27,590 --> 00:18:31,428
updates are really<font color="#E5E5E5"> simple you take this</font>

482
00:18:29,690 --> 00:18:33,140
value raised to the power of this update

483
00:18:31,429 --> 00:18:35,000
function if you write out what that

484
00:18:33,140 --> 00:18:36,980
looks like you'll see that the old key

485
00:18:35,000 --> 00:18:39,440
cancels out<font color="#CCCCCC"> and only</font><font color="#E5E5E5"> the new key is left</font>

486
00:18:36,980 --> 00:18:42,110
<font color="#E5E5E5">and so after an update function we have</font>

487
00:18:39,440 --> 00:18:44,510
the same user ID same password but now

488
00:18:42,110 --> 00:18:49,520
under a new key and no residue from the

489
00:18:44,510 --> 00:18:51,620
<font color="#E5E5E5">old king</font><font color="#CCCCCC"> ok so that was a really deep</font>

490
00:18:49,520 --> 00:18:53,090
dive let's let's look at the big picture

491
00:18:51,620 --> 00:18:59,270
and let's talk about what all this buys

492
00:18:53,090 --> 00:19:01,189
us so first off we have<font color="#CCCCCC"> a fiftieth</font>

493
00:18:59,270 --> 00:19:03,080
server that only sees blinded passwords

494
00:19:01,190 --> 00:19:05,480
meaning it never sees the individual

495
00:19:03,080 --> 00:19:08,840
passwords and it has enough information

496
00:19:05,480 --> 00:19:10,850
meaning to check online tax meeting that

497
00:19:08,840 --> 00:19:12,770
that you have to<font color="#E5E5E5"> provide correct web</font>

498
00:19:10,850 --> 00:19:13,760
<font color="#E5E5E5">server IDs and user IDs in order to get</font>

499
00:19:12,770 --> 00:19:16,190
the right answer so it's going to be

500
00:19:13,760 --> 00:19:17,450
easy for a 50th server to tell the

501
00:19:16,190 --> 00:19:20,539
<font color="#CCCCCC">difference between legitimate traffic</font>

502
00:19:17,450 --> 00:19:23,090
and in legitimate traffic on the web

503
00:19:20,539 --> 00:19:24,470
server side the web server never learns

504
00:19:23,090 --> 00:19:26,059
the secret key and this is really<font color="#E5E5E5"> nice</font>

505
00:19:24,470 --> 00:19:27,440
because if<font color="#E5E5E5"> someone breaks in and they</font>

506
00:19:26,059 --> 00:19:28,639
steal<font color="#E5E5E5"> everything in your web server you</font>

507
00:19:27,440 --> 00:19:32,330
want<font color="#E5E5E5"> them</font><font color="#CCCCCC"> to be missing some information</font>

508
00:19:28,640 --> 00:19:35,419
<font color="#E5E5E5">ok so we built one</font><font color="#CCCCCC"> of these</font><font color="#E5E5E5"> things</font>

509
00:19:32,330 --> 00:19:38,539
itself is open source<font color="#E5E5E5"> we built it using</font>

510
00:19:35,419 --> 00:19:40,669
open source it is<font color="#E5E5E5"> just a prototype but</font>

511
00:19:38,539 --> 00:19:42,770
we built<font color="#E5E5E5"> it using engine acts we did the</font>

512
00:19:40,669 --> 00:19:44,710
implementation in<font color="#E5E5E5"> Python sort of key</font>

513
00:19:42,770 --> 00:19:45,879
table in Mongo

514
00:19:44,710 --> 00:19:49,899
you can get the source code on github

515
00:19:45,880 --> 00:19:51,760
check out my website for information to

516
00:19:49,899 --> 00:19:54,039
<font color="#E5E5E5">find these things there's</font><font color="#CCCCCC"> even a test</font>

517
00:19:51,760 --> 00:19:55,658
and development server which don't

518
00:19:54,039 --> 00:19:58,870
recommend for reductions you could go in

519
00:19:55,659 --> 00:20:00,429
and gay but you<font color="#CCCCCC"> know you can build it</font>

520
00:19:58,870 --> 00:20:04,178
via clients and you can use our server

521
00:20:00,429 --> 00:20:05,710
if you want to test your clients so real

522
00:20:04,179 --> 00:20:08,320
quick<font color="#E5E5E5"> let's talk through some</font>

523
00:20:05,710 --> 00:20:11,080
implementation or some evaluation

524
00:20:08,320 --> 00:20:14,289
details essentially<font color="#CCCCCC"> 50 is fast</font><font color="#E5E5E5"> and</font>

525
00:20:11,080 --> 00:20:15,908
scalable so if the<font color="#E5E5E5"> Pythias server and</font>

526
00:20:14,289 --> 00:20:17,559
the web server are on the same network

527
00:20:15,909 --> 00:20:19,299
so there's essentially no network

528
00:20:17,559 --> 00:20:21,908
latency to worry about we can do<font color="#CCCCCC"> PPO</font>

529
00:20:19,299 --> 00:20:23,470
queries in 5.2 milliseconds right that

530
00:20:21,909 --> 00:20:26,559
might<font color="#E5E5E5"> not mean anything without context</font>

531
00:20:23,470 --> 00:20:28,390
but to put this in context if you do it

532
00:20:26,559 --> 00:20:30,940
erated hashing if you follow miss

533
00:20:28,390 --> 00:20:33,340
current guidelines of 10,000 iterations

534
00:20:30,940 --> 00:20:35,110
of<font color="#CCCCCC"> sha-256 that's going to take you</font>

535
00:20:33,340 --> 00:20:36,610
depends<font color="#CCCCCC"> on the cpu implication because</font>

536
00:20:35,110 --> 00:20:38,979
<font color="#E5E5E5">going to take you about 10 milliseconds</font>

537
00:20:36,610 --> 00:20:40,539
nine milliseconds right so Pythia is

538
00:20:38,980 --> 00:20:42,399
going to be competitive<font color="#CCCCCC"> with iterated</font>

539
00:20:40,539 --> 00:20:44,740
hashing and get a very different

540
00:20:42,399 --> 00:20:46,090
security property<font color="#E5E5E5"> actually in practice</font>

541
00:20:44,740 --> 00:20:47,710
you can actually<font color="#CCCCCC"> use</font><font color="#E5E5E5"> iterate hashing and</font>

542
00:20:46,090 --> 00:20:50,289
pity it together there's no reason you

543
00:20:47,710 --> 00:20:51,669
have to use one of the other so

544
00:20:50,289 --> 00:20:53,559
throughput is good if you're<font color="#E5E5E5"> hosting</font>

545
00:20:51,669 --> 00:20:55,929
your own Pythia server we can on a

546
00:20:53,559 --> 00:20:58,418
single a core machine we have a max

547
00:20:55,929 --> 00:21:02,020
throughput of a little over<font color="#E5E5E5"> 1,300</font>

548
00:20:58,419 --> 00:21:04,210
queries per second and storage on a 50

549
00:21:02,020 --> 00:21:06,129
server is excellent right so on the

550
00:21:04,210 --> 00:21:07,990
<font color="#CCCCCC">Pythia</font><font color="#E5E5E5"> server it only has to</font><font color="#CCCCCC"> remember</font>

551
00:21:06,130 --> 00:21:10,210
for each of its clients its clients now

552
00:21:07,990 --> 00:21:11,830
our web server is not users right so i

553
00:21:10,210 --> 00:21:14,440
<font color="#E5E5E5">have to the</font><font color="#CCCCCC"> Pythia server needs to</font>

554
00:21:11,830 --> 00:21:16,750
remember a web server ID and key a

555
00:21:14,440 --> 00:21:18,730
little bit<font color="#CCCCCC"> of extra</font><font color="#E5E5E5"> information for</font>

556
00:21:16,750 --> 00:21:20,440
detecting online attacks but this is

557
00:21:18,730 --> 00:21:23,860
going<font color="#E5E5E5"> to be independent of the number of</font>

558
00:21:20,440 --> 00:21:26,409
<font color="#E5E5E5">users behind that web server so to give</font>

559
00:21:23,860 --> 00:21:29,020
an example if i had a hundred million

560
00:21:26,409 --> 00:21:31,690
web servers using a single<font color="#CCCCCC"> Pythias</font>

561
00:21:29,020 --> 00:21:34,418
server the key table for that is less

562
00:21:31,690 --> 00:21:36,070
than<font color="#E5E5E5"> 20 gigabytes right independent of</font>

563
00:21:34,419 --> 00:21:37,419
how<font color="#CCCCCC"> many users</font><font color="#E5E5E5"> are using those hundred</font>

564
00:21:36,070 --> 00:21:38,678
million web servers right each hundred

565
00:21:37,419 --> 00:21:40,750
million web server could<font color="#E5E5E5"> itself have a</font>

566
00:21:38,679 --> 00:21:42,640
<font color="#E5E5E5">hundred million users and still I only</font>

567
00:21:40,750 --> 00:21:44,260
need 20 gigabyte SSD to store my key

568
00:21:42,640 --> 00:21:47,020
table of course should probably keep

569
00:21:44,260 --> 00:21:49,910
<font color="#CCCCCC">that key table very secure okay so</font>

570
00:21:47,020 --> 00:21:52,910
Pythia is fast<font color="#E5E5E5"> and it's scalable</font>

571
00:21:49,910 --> 00:21:54,200
today I've mostly been talking about web

572
00:21:52,910 --> 00:21:56,090
servers and that's because I think<font color="#E5E5E5"> web</font>

573
00:21:54,200 --> 00:21:58,430
servers are the most natural use for

574
00:21:56,090 --> 00:22:00,290
Pythia in our using paper we<font color="#E5E5E5"> talked</font>

575
00:21:58,430 --> 00:22:03,680
about<font color="#E5E5E5"> some more interesting ideas one of</font>

576
00:22:00,290 --> 00:22:05,750
<font color="#E5E5E5">the ideas we talked about is I mean</font>

577
00:22:03,680 --> 00:22:08,780
<font color="#CCCCCC">really you can use Pythia to secure</font>

578
00:22:05,750 --> 00:22:10,220
anything that's using using passwords in

579
00:22:08,780 --> 00:22:11,570
the sense of security and you have an

580
00:22:10,220 --> 00:22:12,980
internet<font color="#CCCCCC"> connection so one of the things</font>

581
00:22:11,570 --> 00:22:15,110
we<font color="#E5E5E5"> talked about the paper is called a</font>

582
00:22:12,980 --> 00:22:17,030
<font color="#CCCCCC">Bitcoin brain wallet and the</font><font color="#E5E5E5"> idea</font><font color="#CCCCCC"> here</font>

583
00:22:15,110 --> 00:22:18,860
is that there's a<font color="#E5E5E5"> Bitcoin wallet you</font>

584
00:22:17,030 --> 00:22:21,710
don't want to store the key<font color="#E5E5E5"> somewhere so</font>

585
00:22:18,860 --> 00:22:24,199
you<font color="#E5E5E5"> create some passphrase or some</font>

586
00:22:21,710 --> 00:22:25,220
complex password and then in the past

587
00:22:24,200 --> 00:22:27,260
<font color="#E5E5E5">people will try to learn these</font>

588
00:22:25,220 --> 00:22:29,390
passphrases through an iterated hashing

589
00:22:27,260 --> 00:22:30,920
function use that output to be your

590
00:22:29,390 --> 00:22:32,930
Bitcoin private key of<font color="#E5E5E5"> course the</font>

591
00:22:30,920 --> 00:22:34,940
problem<font color="#CCCCCC"> is if somebody cracks your</font>

592
00:22:32,930 --> 00:22:36,950
password in the same way then<font color="#CCCCCC"> they now</font>

593
00:22:34,940 --> 00:22:39,560
own your<font color="#E5E5E5"> Bitcoin wallet so you can</font>

594
00:22:36,950 --> 00:22:41,600
imagine doing the same pissy at work you

595
00:22:39,560 --> 00:22:42,950
<font color="#E5E5E5">take a password but instead of running</font>

596
00:22:41,600 --> 00:22:44,899
through iterated hashing you connect to

597
00:22:42,950 --> 00:22:46,640
a Pythia server you run this blinded

598
00:22:44,900 --> 00:22:48,350
protocol you get some result and use

599
00:22:46,640 --> 00:22:49,760
that result as your<font color="#E5E5E5"> Bitcoin private key</font>

600
00:22:48,350 --> 00:22:51,439
and then when you want to update your

601
00:22:49,760 --> 00:22:53,390
Bitcoin wallet you actually<font color="#E5E5E5"> don't</font><font color="#CCCCCC"> even</font>

602
00:22:51,440 --> 00:22:54,800
have to change your passphrase you just

603
00:22:53,390 --> 00:22:56,540
connect<font color="#E5E5E5"> with the</font><font color="#CCCCCC"> Pythia server and have</font>

604
00:22:54,800 --> 00:22:58,490
it rotated key periodically and you

605
00:22:56,540 --> 00:23:01,700
transfer funds from one wall to the<font color="#E5E5E5"> next</font>

606
00:22:58,490 --> 00:23:03,200
so that's a fun idea and the other very

607
00:23:01,700 --> 00:23:05,540
straightforward idea is you can imagine

608
00:23:03,200 --> 00:23:07,010
and file encryption this way right so it

609
00:23:05,540 --> 00:23:09,020
would require an internet connection but

610
00:23:07,010 --> 00:23:11,540
you can imagine<font color="#E5E5E5"> you put data on a remote</font>

611
00:23:09,020 --> 00:23:13,100
hard drive or on a laptop<font color="#E5E5E5"> or phone and</font>

612
00:23:11,540 --> 00:23:15,200
you want to encrypt that data with a

613
00:23:13,100 --> 00:23:17,209
passphrase but you want<font color="#E5E5E5"> to use picea to</font>

614
00:23:15,200 --> 00:23:19,700
harden that password and the nice<font color="#CCCCCC"> thing</font>

615
00:23:17,210 --> 00:23:21,680
is if you lose that device and you want

616
00:23:19,700 --> 00:23:23,180
to race that data you don't have to wait

617
00:23:21,680 --> 00:23:24,620
for that device<font color="#E5E5E5"> to come online if you</font>

618
00:23:23,180 --> 00:23:26,210
have access the<font color="#CCCCCC"> Pythia</font><font color="#E5E5E5"> server you go to</font>

619
00:23:24,620 --> 00:23:28,040
the pity of serving you say hey I want

620
00:23:26,210 --> 00:23:29,660
you<font color="#E5E5E5"> to delete this key I'm going to</font>

621
00:23:28,040 --> 00:23:32,030
<font color="#E5E5E5">delete that key it's going to erase this</font>

622
00:23:29,660 --> 00:23:36,380
device whether or not that device is

623
00:23:32,030 --> 00:23:38,240
online is a very nice property<font color="#E5E5E5"> okay so</font>

624
00:23:36,380 --> 00:23:40,520
what<font color="#E5E5E5"> does</font><font color="#CCCCCC"> it take</font><font color="#E5E5E5"> away from all this I</font>

625
00:23:38,240 --> 00:23:42,860
claim password storage is broken

626
00:23:40,520 --> 00:23:44,360
password databases get breached and when

627
00:23:42,860 --> 00:23:48,649
they do<font color="#E5E5E5"> get breach it's too easy to</font>

628
00:23:44,360 --> 00:23:50,659
crack passwords we can fix this we fix

629
00:23:48,650 --> 00:23:53,540
this using Pythia which not only

630
00:23:50,660 --> 00:23:55,700
prevents offline attacks but it'll it

631
00:23:53,540 --> 00:23:57,889
enables us to detect online attacks and

632
00:23:55,700 --> 00:23:59,750
when we detect online attacks we can do

633
00:23:57,890 --> 00:24:02,120
something about it we can rotate<font color="#E5E5E5"> keys</font>

634
00:23:59,750 --> 00:24:03,320
that allows<font color="#CCCCCC"> us to cryptographically</font>

635
00:24:02,120 --> 00:24:05,659
erase old and from

636
00:24:03,320 --> 00:24:08,540
and then continue operating forward and

637
00:24:05,660 --> 00:24:10,220
finally because we're using a service

638
00:24:08,540 --> 00:24:11,750
architecture the idea is that this

639
00:24:10,220 --> 00:24:13,730
should be this should be<font color="#E5E5E5"> accessible to</font>

640
00:24:11,750 --> 00:24:15,140
<font color="#E5E5E5">more than just people with lots of</font>

641
00:24:13,730 --> 00:24:18,050
technical infrastructure this should be

642
00:24:15,140 --> 00:24:19,700
enabling people of if you have some

643
00:24:18,050 --> 00:24:21,649
service providers providing 50 of

644
00:24:19,700 --> 00:24:22,850
services you can imagine a whole range

645
00:24:21,650 --> 00:24:24,770
of people<font color="#E5E5E5"> with taking different</font>

646
00:24:22,850 --> 00:24:26,600
technical sophistication being able to

647
00:24:24,770 --> 00:24:30,440
gain the power of this strong

648
00:24:26,600 --> 00:24:32,179
cryptography and with that thank you<font color="#E5E5E5"> for</font>

649
00:24:30,440 --> 00:24:44,510
<font color="#E5E5E5">your time and I would love to</font><font color="#CCCCCC"> hear</font><font color="#E5E5E5"> your</font>

650
00:24:32,180 --> 00:24:46,970
questions do I have a link<font color="#E5E5E5"> to the white</font>

651
00:24:44,510 --> 00:24:49,280
paper um you can find it let's see if i

652
00:24:46,970 --> 00:24:51,800
can find this slide you can find it on

653
00:24:49,280 --> 00:24:54,230
<font color="#E5E5E5">my webpage if you also if you search</font>

654
00:24:51,800 --> 00:24:58,159
Google for Pythia<font color="#CCCCCC"> prf there is probably</font>

655
00:24:54,230 --> 00:25:09,320
not too many different responses since

656
00:24:58,160 --> 00:25:11,960
you slow let's yeah I'm uh there we go

657
00:25:09,320 --> 00:25:16,460
yeah so this<font color="#E5E5E5"> is this is</font><font color="#CCCCCC"> my web page and</font>

658
00:25:11,960 --> 00:25:19,520
you can find<font color="#CCCCCC"> the paper from here Pythia</font>

659
00:25:16,460 --> 00:25:21,020
see if I<font color="#E5E5E5"> remember this correct it's been</font>

660
00:25:19,520 --> 00:25:24,260
<font color="#E5E5E5">a while since we're neighbors so Pythia</font>

661
00:25:21,020 --> 00:25:26,510
is the name of it's the name of<font color="#CCCCCC"> the</font>

662
00:25:24,260 --> 00:25:28,640
Oracle at Delphi right so it's<font color="#E5E5E5"> supposed</font>

663
00:25:26,510 --> 00:25:29,900
to be this kind of<font color="#E5E5E5"> random Oracle you ask</font>

664
00:25:28,640 --> 00:25:32,000
an inscrutable question you get

665
00:25:29,900 --> 00:25:33,830
<font color="#E5E5E5">inscrutable answer unfortunately</font><font color="#CCCCCC"> the</font>

666
00:25:32,000 --> 00:25:39,820
very heavily used name so there's a lot

667
00:25:33,830 --> 00:25:39,820
of<font color="#CCCCCC"> pythias in the world yeah</font>

668
00:25:54,419 --> 00:26:10,529
yeah so let me<font color="#CCCCCC"> review the question so</font>

669
00:26:08,789 --> 00:26:12,869
the<font color="#E5E5E5"> question was this seems nice and</font>

670
00:26:10,529 --> 00:26:13,830
tailored to a<font color="#E5E5E5"> business setting you know</font>

671
00:26:12,869 --> 00:26:16,799
just<font color="#CCCCCC"> going to work for the</font><font color="#E5E5E5"> everyday</font>

672
00:26:13,830 --> 00:26:17,939
person I hope<font color="#CCCCCC"> so this is our plan we</font>

673
00:26:16,799 --> 00:26:20,850
actually when we started this what we

674
00:26:17,940 --> 00:26:23,129
wanted to do was protect passwords on

675
00:26:20,850 --> 00:26:25,738
the user side in able to protect

676
00:26:23,129 --> 00:26:27,899
particularly like my<font color="#CCCCCC"> safari database of</font>

677
00:26:25,739 --> 00:26:30,419
local passwords sadly we got<font color="#E5E5E5"> sidetracked</font>

678
00:26:27,899 --> 00:26:32,758
and we ran off under this other problem

679
00:26:30,419 --> 00:26:35,100
I<font color="#E5E5E5"> think so but of course somebody has to</font>

680
00:26:32,759 --> 00:26:38,700
be supporting this key server so<font color="#E5E5E5"> you can</font>

681
00:26:35,100 --> 00:26:40,590
imagine if Google or Amazon or even one

682
00:26:38,700 --> 00:26:42,539
password we're running their own<font color="#CCCCCC"> Pythias</font>

683
00:26:40,590 --> 00:26:45,359
server and then individual people had

684
00:26:42,539 --> 00:26:46,919
software that use those services it does

685
00:26:45,359 --> 00:26:48,600
seem feasible of course somebody has to

686
00:26:46,919 --> 00:26:56,070
stand those things up and operate them

687
00:26:48,600 --> 00:27:00,689
yeah question what's how is the best

688
00:26:56,070 --> 00:27:03,389
attack relative you brute force so we're

689
00:27:00,690 --> 00:27:05,820
using provable security here and so the

690
00:27:03,389 --> 00:27:07,529
strength of security we get here is you

691
00:27:05,820 --> 00:27:10,049
know sort<font color="#E5E5E5"> of no less than you're going</font>

692
00:27:07,529 --> 00:27:12,119
to get from the elliptic curves that

693
00:27:10,049 --> 00:27:29,369
you're using underneath it if that<font color="#CCCCCC"> makes</font>

694
00:27:12,119 --> 00:27:31,379
<font color="#CCCCCC">any sense ok so this is a very astute</font>

695
00:27:29,369 --> 00:27:34,830
question<font color="#CCCCCC"> ok so let's see if i can find</font>

696
00:27:31,379 --> 00:27:40,139
that slide<font color="#CCCCCC"> to demonstrate this</font><font color="#E5E5E5"> ok so if</font>

697
00:27:34,830 --> 00:27:42,960
I understand<font color="#E5E5E5"> the question it was if if</font>

698
00:27:40,139 --> 00:27:44,248
you tricked the server if you took the

699
00:27:42,960 --> 00:27:45,840
<font color="#CCCCCC">Pythias server into running a key</font>

700
00:27:44,249 --> 00:27:47,039
rotation essentially is this going to

701
00:27:45,840 --> 00:27:48,809
create a denial so around the web server

702
00:27:47,039 --> 00:27:51,149
and in the the answer is of course

703
00:27:48,809 --> 00:27:54,720
absolutely right which is<font color="#E5E5E5"> a huge problem</font>

704
00:27:51,149 --> 00:27:56,549
right so the thought here is that you

705
00:27:54,720 --> 00:27:58,440
know use one level of authentication to

706
00:27:56,549 --> 00:28:02,279
verify queries and mean obviously a much

707
00:27:58,440 --> 00:28:04,619
stronger level authentication to be able

708
00:28:02,279 --> 00:28:06,389
<font color="#E5E5E5">to do things like fetch Keys destroy old</font>

709
00:28:04,619 --> 00:28:07,209
keys that kind of thing<font color="#E5E5E5"> and the hope is</font>

710
00:28:06,389 --> 00:28:10,000
<font color="#CCCCCC">that</font>

711
00:28:07,210 --> 00:28:12,190
that that's a little more laborious to

712
00:28:10,000 --> 00:28:17,860
do that work but you only have<font color="#E5E5E5"> to do it</font>

713
00:28:12,190 --> 00:28:19,779
<font color="#E5E5E5">periodically yeah I mean this is</font>

714
00:28:17,860 --> 00:28:21,309
<font color="#CCCCCC">cryptographic</font><font color="#E5E5E5"> erasure right if I break</font>

715
00:28:19,779 --> 00:28:22,570
in I delete the key and<font color="#E5E5E5"> that's the key</font>

716
00:28:21,309 --> 00:28:25,120
you<font color="#E5E5E5"> needed yet you're in trouble but</font>

717
00:28:22,570 --> 00:28:26,260
it's<font color="#CCCCCC"> a different problem because the</font>

718
00:28:25,120 --> 00:28:27,850
keys are small it right you can imagine

719
00:28:26,260 --> 00:28:29,620
the attacker breaks and erases your

720
00:28:27,850 --> 00:28:31,570
database and passwords you're also in

721
00:28:29,620 --> 00:28:35,289
trouble<font color="#E5E5E5"> unless you have backups right so</font>

722
00:28:31,570 --> 00:28:36,879
it depends yes now the 50 server is like

723
00:28:35,289 --> 00:28:38,080
outside of your data center<font color="#CCCCCC"> and</font><font color="#E5E5E5"> I have</font>

724
00:28:36,880 --> 00:28:39,669
to deal with you know<font color="#E5E5E5"> it's this other</font>

725
00:28:38,080 --> 00:28:44,678
person being protect as well so yeah

726
00:28:39,669 --> 00:29:12,190
there are problems hearing yeah any

727
00:28:44,679 --> 00:29:14,470
other questions<font color="#E5E5E5"> yeah yeah so the it so I</font>

728
00:29:12,190 --> 00:29:17,049
can repeat the question it's this seems

729
00:29:14,470 --> 00:29:19,270
the seams form fit for people like AWS

730
00:29:17,049 --> 00:29:21,340
<font color="#E5E5E5">Google cloud platform to be building the</font>

731
00:29:19,270 --> 00:29:22,750
service providers and yes when<font color="#CCCCCC"> you think</font>

732
00:29:21,340 --> 00:29:27,309
that's absolutely true do I have any

733
00:29:22,750 --> 00:29:28,960
plans to do so I do<font color="#E5E5E5"> not unless the right</font>

734
00:29:27,309 --> 00:29:33,668
number<font color="#E5E5E5"> of investors happen to be in this</font>

735
00:29:28,960 --> 00:29:35,559
room in which case I do there is a group

736
00:29:33,669 --> 00:29:38,710
at Cornell Tech who's working on this

737
00:29:35,559 --> 00:29:40,270
thing it's not<font color="#E5E5E5"> clear</font><font color="#CCCCCC"> how</font><font color="#E5E5E5"> successful</font>

738
00:29:38,710 --> 00:29:43,059
<font color="#CCCCCC">they'll</font><font color="#E5E5E5"> be although</font><font color="#CCCCCC"> i should say that</font>

739
00:29:40,270 --> 00:29:44,950
software<font color="#E5E5E5"> is not patented the software is</font>

740
00:29:43,059 --> 00:29:46,690
open source if you guys want to stand up

741
00:29:44,950 --> 00:29:49,299
your own services you're more<font color="#E5E5E5"> than</font>

742
00:29:46,690 --> 00:29:50,649
welcome to<font color="#CCCCCC"> i</font><font color="#E5E5E5"> actually will</font><font color="#CCCCCC"> be happy to</font>

743
00:29:49,299 --> 00:29:51,850
volunteer to help with technical

744
00:29:50,649 --> 00:29:53,408
expertise to get these things off the

745
00:29:51,850 --> 00:29:56,649
<font color="#CCCCCC">ground but</font><font color="#E5E5E5"> yeah this</font><font color="#CCCCCC"> is our dream is</font>

746
00:29:53,409 --> 00:29:58,360
that if you're a neat if your AWS

747
00:29:56,649 --> 00:29:59,979
provider you don't have sore passwords

748
00:29:58,360 --> 00:30:01,000
yourself or you don't have<font color="#E5E5E5"> to do all the</font>

749
00:29:59,980 --> 00:30:03,580
work bathroom stuff you can just

750
00:30:01,000 --> 00:30:06,840
subscribe to AWS is picky of service and

751
00:30:03,580 --> 00:30:06,840
then you can harden passwords as well

752
00:30:08,620 --> 00:30:19,780
if you're running a<font color="#E5E5E5"> Pythia server yeah</font>

753
00:30:17,170 --> 00:30:21,640
of course you can you can well any curve

754
00:30:19,780 --> 00:30:23,770
is too strong so our construction is

755
00:30:21,640 --> 00:30:25,570
based on a bilinear pairing and so

756
00:30:23,770 --> 00:30:27,250
there's only certain sets of curves that

757
00:30:25,570 --> 00:30:28,659
work this way since we did this work

758
00:30:27,250 --> 00:30:30,190
there's been a little bit more<font color="#CCCCCC"> work that</font>

759
00:30:28,660 --> 00:30:31,360
<font color="#CCCCCC">doesn't necessarily have to use that so</font>

760
00:30:30,190 --> 00:30:33,190
you have a little<font color="#E5E5E5"> more flexibility and</font>

761
00:30:31,360 --> 00:30:35,290
curves but if you use our particular

762
00:30:33,190 --> 00:30:37,390
construction you're stuck with curves

763
00:30:35,290 --> 00:30:39,730
that are compatible to bilinear pairings

764
00:30:37,390 --> 00:30:44,470
but beyond that yet<font color="#CCCCCC"> you can use whatever</font>

765
00:30:39,730 --> 00:30:47,280
curves you implement<font color="#CCCCCC"> all right guys</font>

766
00:30:44,470 --> 00:30:47,280
thanks<font color="#E5E5E5"> for time</font>

