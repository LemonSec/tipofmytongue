1
00:00:00,000 --> 00:00:10,110
thank you and we're going<font color="#E5E5E5"> all right</font>

2
00:00:03,030 --> 00:00:12,389
excellent hi so<font color="#E5E5E5"> I forgot the microphone</font>

3
00:00:10,110 --> 00:00:14,790
right let's try the game I'm Alex<font color="#CCCCCC"> ass'n</font>

4
00:00:12,389 --> 00:00:17,369
I'm assistant professor at DePaul

5
00:00:14,790 --> 00:00:19,680
University so me and several people from

6
00:00:17,369 --> 00:00:23,160
my research lab are very excited to be

7
00:00:19,680 --> 00:00:26,340
<font color="#E5E5E5">here thank you for having us and I want</font>

8
00:00:23,160 --> 00:00:31,080
<font color="#E5E5E5">to talk about forensic applications and</font>

9
00:00:26,340 --> 00:00:33,210
database carving for that purpose so the

10
00:00:31,080 --> 00:00:35,519
lab has a lot of<font color="#E5E5E5"> people and I don't have</font>

11
00:00:33,210 --> 00:00:37,440
some of the pictures but this is the

12
00:00:35,520 --> 00:00:41,550
group who pretty much leaves the effort

13
00:00:37,440 --> 00:00:44,280
and it's mostly<font color="#CCCCCC"> Depot lab except</font>

14
00:00:41,550 --> 00:00:46,589
Jonathan Greer who's had the principle

15
00:00:44,280 --> 00:00:49,860
of Greer forensics and he provides us

16
00:00:46,590 --> 00:00:53,850
with some real-world motivation his

17
00:00:49,860 --> 00:00:59,010
expertise is in data theft and and

18
00:00:53,850 --> 00:01:00,930
similar work so why have we bothered

19
00:00:59,010 --> 00:01:03,210
doing this so obviously forensics is

20
00:01:00,930 --> 00:01:08,280
interesting but specifically we were

21
00:01:03,210 --> 00:01:11,040
motivated by data access data theft data

22
00:01:08,280 --> 00:01:12,840
tampering eventually and every day you

23
00:01:11,040 --> 00:01:14,760
pretty much see something in the<font color="#E5E5E5"> news</font>

24
00:01:12,840 --> 00:01:17,250
someone stole a bunch of accounts a

25
00:01:14,760 --> 00:01:19,950
bunch<font color="#E5E5E5"> of data and even more interesting</font>

26
00:01:17,250 --> 00:01:22,500
is that<font color="#E5E5E5"> oftentimes it takes forever</font>

27
00:01:19,950 --> 00:01:24,030
until someone notices and even if you

28
00:01:22,500 --> 00:01:26,520
notice the data data may have been

29
00:01:24,030 --> 00:01:28,619
<font color="#E5E5E5">stolen you still have no good way of</font>

30
00:01:26,520 --> 00:01:30,509
proving it necessarily and this is one

31
00:01:28,619 --> 00:01:33,420
of very important aspects it's not just

32
00:01:30,509 --> 00:01:36,360
about detecting data theft it's also

33
00:01:33,420 --> 00:01:37,409
often being able to verify somehow

34
00:01:36,360 --> 00:01:42,060
especially if you're dealing with

35
00:01:37,409 --> 00:01:45,210
internal hacking and<font color="#E5E5E5"> there's also a lot</font>

36
00:01:42,060 --> 00:01:47,700
<font color="#CCCCCC">of interest from perspective of doing</font>

37
00:01:45,210 --> 00:01:49,589
mobile device analysis because it turns

38
00:01:47,700 --> 00:01:52,409
out that every time<font color="#E5E5E5"> you</font><font color="#CCCCCC"> need to store</font>

39
00:01:49,590 --> 00:01:53,939
something on the mobile device<font color="#E5E5E5"> you bring</font>

40
00:01:52,409 --> 00:01:56,880
much<font color="#E5E5E5"> you sequel light which</font><font color="#CCCCCC"> is a</font>

41
00:01:53,939 --> 00:01:58,439
lightweight relational database and it's

42
00:01:56,880 --> 00:02:01,710
easier to do that than to invent the

43
00:01:58,439 --> 00:02:03,479
wheel and so you may not think about

44
00:02:01,710 --> 00:02:05,759
this but databases are in fact

45
00:02:03,479 --> 00:02:09,060
everywhere so every phone android

46
00:02:05,759 --> 00:02:11,190
iPhones browser bookmarks would often

47
00:02:09,060 --> 00:02:11,830
live in civilized database and of this

48
00:02:11,190 --> 00:02:13,810
Danny

49
00:02:11,830 --> 00:02:16,120
website<font color="#CCCCCC"> and you anything that has a</font>

50
00:02:13,810 --> 00:02:17,920
front end<font color="#E5E5E5"> on the back end some runs back</font>

51
00:02:16,120 --> 00:02:21,190
and there's a database awesome

52
00:02:17,920 --> 00:02:23,109
relational sometimes something<font color="#E5E5E5"> else and</font>

53
00:02:21,190 --> 00:02:27,760
primarily focuses on the relational

54
00:02:23,110 --> 00:02:31,390
databases but we plan to expand and so

55
00:02:27,760 --> 00:02:33,489
the goals kind of bros<font color="#CCCCCC"> they are to get</font>

56
00:02:31,390 --> 00:02:35,320
back things that are deleted because

57
00:02:33,490 --> 00:02:37,870
once you delete something from database

58
00:02:35,320 --> 00:02:39,670
perspective it stops existing but

59
00:02:37,870 --> 00:02:41,530
there's obviously a lot of forensic

60
00:02:39,670 --> 00:02:44,260
value and a lot<font color="#CCCCCC"> of interest in seeing</font>

61
00:02:41,530 --> 00:02:47,800
things that were<font color="#E5E5E5"> were in the system</font>

62
00:02:44,260 --> 00:02:50,590
before but<font color="#CCCCCC"> were deleted to see who's</font>

63
00:02:47,800 --> 00:02:52,420
doing was on the system to<font color="#CCCCCC"> detect was</font>

64
00:02:50,590 --> 00:02:53,800
being changed to detect those operations

65
00:02:52,420 --> 00:02:56,079
are happening or what the<font color="#CCCCCC"> prescient</font>

66
00:02:53,800 --> 00:02:58,810
almost happened and a lot of it you<font color="#E5E5E5"> can</font>

67
00:02:56,080 --> 00:03:02,650
see we're also looking into data

68
00:02:58,810 --> 00:03:06,490
tampering especially from the inside so

69
00:03:02,650 --> 00:03:09,850
<font color="#E5E5E5">we have a paper that's that was just</font>

70
00:03:06,490 --> 00:03:12,430
accept it too<font color="#E5E5E5"> dear for WS and there will</font>

71
00:03:09,850 --> 00:03:13,930
look at what happens if the tampering is

72
00:03:12,430 --> 00:03:16,510
happening from the inside so it's very

73
00:03:13,930 --> 00:03:19,360
easy for database administrator to make

74
00:03:16,510 --> 00:03:22,120
<font color="#E5E5E5">changes that were not intended because</font>

75
00:03:19,360 --> 00:03:23,320
they have sufficient control and so the

76
00:03:22,120 --> 00:03:25,030
whole idea of doing this kind of

77
00:03:23,320 --> 00:03:26,530
analysis is that<font color="#E5E5E5"> you don't trust anyone</font>

78
00:03:25,030 --> 00:03:28,390
you don't<font color="#E5E5E5"> trust the system you don't</font>

79
00:03:26,530 --> 00:03:33,700
trust<font color="#E5E5E5"> the logs you just look at the</font>

80
00:03:28,390 --> 00:03:37,929
storage and you see what's happening I'm

81
00:03:33,700 --> 00:03:40,030
so first as a little detour<font color="#CCCCCC"> the this is</font>

82
00:03:37,930 --> 00:03:43,060
all the possible components of a

83
00:03:40,030 --> 00:03:45,970
database so logs either audit the right

84
00:03:43,060 --> 00:03:48,790
<font color="#CCCCCC">ahead love Darfur transaction integrity</font>

85
00:03:45,970 --> 00:03:51,040
you may make care about what's happening

86
00:03:48,790 --> 00:03:54,519
in RAM you<font color="#E5E5E5"> may care about actual data</font>

87
00:03:51,040 --> 00:03:57,850
and then there's all the the unwary<font color="#CCCCCC"> abul</font>

88
00:03:54,519 --> 00:04:01,570
stuff so for example indexes and I have

89
00:03:57,850 --> 00:04:03,160
some pictures would be helpful and

90
00:04:01,570 --> 00:04:05,590
accessing data faster they're not

91
00:04:03,160 --> 00:04:07,450
technically data they're actually a very

92
00:04:05,590 --> 00:04:09,970
data which is<font color="#E5E5E5"> something you</font><font color="#CCCCCC"> use to get</font>

93
00:04:07,450 --> 00:04:11,350
to<font color="#E5E5E5"> the data you want but obviously there</font>

94
00:04:09,970 --> 00:04:13,299
are things<font color="#E5E5E5"> you can see in them in fact</font>

95
00:04:11,350 --> 00:04:16,779
sometimes more than<font color="#CCCCCC"> an actual raw data</font>

96
00:04:13,299 --> 00:04:19,930
and if you're thinking database recovery

97
00:04:16,779 --> 00:04:21,488
or database access which<font color="#CCCCCC"> is what a lot</font>

98
00:04:19,930 --> 00:04:24,190
of people were thinking especially when

99
00:04:21,488 --> 00:04:26,289
we started this work then it

100
00:04:24,190 --> 00:04:28,210
turns out that database recovery only

101
00:04:26,290 --> 00:04:30,820
cares about the tangible stuff so if you

102
00:04:28,210 --> 00:04:32,289
have<font color="#CCCCCC"> something in</font><font color="#E5E5E5"> a database table then</font>

103
00:04:30,820 --> 00:04:34,030
the recovery<font color="#CCCCCC"> will try</font><font color="#E5E5E5"> to make</font><font color="#CCCCCC"> sure that</font>

104
00:04:32,290 --> 00:04:36,820
you can<font color="#E5E5E5"> get it back but if you delete it</font>

105
00:04:34,030 --> 00:04:38,500
<font color="#CCCCCC">a record or if you cared about</font><font color="#E5E5E5"> what was</font>

106
00:04:36,820 --> 00:04:40,900
in the cache well that's not really

107
00:04:38,500 --> 00:04:43,630
<font color="#CCCCCC">something that's</font><font color="#E5E5E5"> being guarded by any of</font>

108
00:04:40,900 --> 00:04:46,210
<font color="#CCCCCC">the systems so generally you can get it</font>

109
00:04:43,630 --> 00:04:49,300
back and this<font color="#E5E5E5"> is actually done by design</font>

110
00:04:46,210 --> 00:04:51,159
so relational databases were

111
00:04:49,300 --> 00:04:54,040
intentionally<font color="#CCCCCC"> built to</font><font color="#E5E5E5"> take control over</font>

112
00:04:51,160 --> 00:04:57,340
<font color="#E5E5E5">storage and that's part of reason as you</font>

113
00:04:54,040 --> 00:05:00,100
see why analysis is so much fun because

114
00:04:57,340 --> 00:05:03,880
<font color="#E5E5E5">it's this own little world and you get</font>

115
00:05:00,100 --> 00:05:05,260
your logical interface and the database

116
00:05:03,880 --> 00:05:07,480
handles everything internally and

117
00:05:05,260 --> 00:05:09,909
oftentimes you can't tell and that is

118
00:05:07,480 --> 00:05:15,400
intentional but<font color="#E5E5E5"> sometimes you want to</font>

119
00:05:09,910 --> 00:05:16,840
and then there is<font color="#CCCCCC"> one more kind</font><font color="#E5E5E5"> of</font>

120
00:05:15,400 --> 00:05:19,840
interesting aspect of getting this data

121
00:05:16,840 --> 00:05:22,239
so suppose that the database did give

122
00:05:19,840 --> 00:05:24,609
you back what you asked for problem is

123
00:05:22,240 --> 00:05:27,430
how would you actually verify that it's

124
00:05:24,610 --> 00:05:29,020
accurate and hasn't actually changed it

125
00:05:27,430 --> 00:05:30,970
in the time you asked for it and the

126
00:05:29,020 --> 00:05:34,060
time I get back<font color="#E5E5E5"> to you because obviously</font>

127
00:05:30,970 --> 00:05:36,040
database squaring is not really built to

128
00:05:34,060 --> 00:05:38,560
guarantee a chain of custody the data

129
00:05:36,040 --> 00:05:40,210
was not affected and you are annoy so

130
00:05:38,560 --> 00:05:43,540
you<font color="#E5E5E5"> also want a mechanism that gives you</font>

131
00:05:40,210 --> 00:05:46,120
exactly what's there and guarantees that

132
00:05:43,540 --> 00:05:48,310
nothing quietly changed because again

133
00:05:46,120 --> 00:05:50,830
you have<font color="#CCCCCC"> no control over what happens in</font>

134
00:05:48,310 --> 00:05:52,660
<font color="#E5E5E5">the storage so you don't know what</font>

135
00:05:50,830 --> 00:05:59,560
actually will happen when<font color="#E5E5E5"> you pulled it</font>

136
00:05:52,660 --> 00:06:01,120
out and<font color="#CCCCCC"> so again as a little detour</font><font color="#E5E5E5"> in</font>

137
00:05:59,560 --> 00:06:04,090
general I'm sure most of you are

138
00:06:01,120 --> 00:06:06,220
familiar with us if<font color="#E5E5E5"> you delete a file in</font>

139
00:06:04,090 --> 00:06:08,109
the file system<font color="#E5E5E5"> anything at all nothing</font>

140
00:06:06,220 --> 00:06:10,330
actually gets wiped out for many reasons

141
00:06:08,110 --> 00:06:13,150
<font color="#E5E5E5">partially because no one wants to do any</font>

142
00:06:10,330 --> 00:06:15,340
work<font color="#E5E5E5"> so these are to say this is just</font>

143
00:06:13,150 --> 00:06:17,140
unallocated space and<font color="#E5E5E5"> I'll get back to</font>

144
00:06:15,340 --> 00:06:20,679
<font color="#E5E5E5">you later if I need to write something</font>

145
00:06:17,140 --> 00:06:22,690
that<font color="#E5E5E5"> I can use this location to actually</font>

146
00:06:20,680 --> 00:06:25,300
store something<font color="#E5E5E5"> and then over time</font>

147
00:06:22,690 --> 00:06:27,940
deleted data would actually get over it

148
00:06:25,300 --> 00:06:31,390
and<font color="#E5E5E5"> and disappear with some unknown</font>

149
00:06:27,940 --> 00:06:33,969
duration and so then the<font color="#CCCCCC"> process of file</font>

150
00:06:31,390 --> 00:06:37,169
carving which is a well-respected

151
00:06:33,970 --> 00:06:41,759
technique in file systems

152
00:06:37,169 --> 00:06:43,620
digital forensics is to look through the

153
00:06:41,759 --> 00:06:45,870
disk storage ignoring the file system

154
00:06:43,620 --> 00:06:48,419
because sometimes you're looking for

155
00:06:45,870 --> 00:06:50,759
things that are gone or corrupted and

156
00:06:48,419 --> 00:06:53,008
then look for magic sequence of

157
00:06:50,759 --> 00:06:55,229
characters that<font color="#E5E5E5"> indicate that this looks</font>

158
00:06:53,009 --> 00:06:57,719
like a<font color="#E5E5E5"> JPEG or this looks like a PDF or</font>

159
00:06:55,229 --> 00:06:59,430
a word file and then<font color="#E5E5E5"> you say well if I</font>

160
00:06:57,719 --> 00:07:01,979
were to assume<font color="#CCCCCC"> that it starts here</font><font color="#E5E5E5"> and</font>

161
00:06:59,430 --> 00:07:04,919
this<font color="#CCCCCC"> is the header of the file then I</font>

162
00:07:01,979 --> 00:07:07,020
can scan through and pull it<font color="#E5E5E5"> out</font><font color="#CCCCCC"> and</font>

163
00:07:04,919 --> 00:07:08,998
<font color="#E5E5E5">this is how all of the file carving</font>

164
00:07:07,020 --> 00:07:10,770
tools work it gets a little more

165
00:07:08,999 --> 00:07:12,930
interesting for example if you have<font color="#E5E5E5"> an</font>

166
00:07:10,770 --> 00:07:15,210
image<font color="#E5E5E5"> embedded in Microsoft Word</font>

167
00:07:12,930 --> 00:07:17,819
document you might still be<font color="#CCCCCC"> able to get</font>

168
00:07:15,210 --> 00:07:21,270
<font color="#E5E5E5">it out it might look different that's</font>

169
00:07:17,819 --> 00:07:23,279
the basic idea and the viewer is a

170
00:07:21,270 --> 00:07:26,878
little<font color="#CCCCCC"> skewed</font><font color="#E5E5E5"> but I think you get the</font>

171
00:07:23,279 --> 00:07:29,969
idea fragmentation right here so you

172
00:07:26,879 --> 00:07:32,339
look further just you find the header<font color="#CCCCCC"> of</font>

173
00:07:29,969 --> 00:07:33,779
<font color="#CCCCCC">the</font><font color="#E5E5E5"> file if it's an image then you start</font>

174
00:07:32,339 --> 00:07:35,460
reading<font color="#E5E5E5"> through multiple fragments you</font>

175
00:07:33,779 --> 00:07:38,999
put them<font color="#E5E5E5"> together and voila you have the</font>

176
00:07:35,460 --> 00:07:41,849
file now again<font color="#E5E5E5"> this gets somewhat more</font>

177
00:07:38,999 --> 00:07:43,979
interesting if the file happens to be

178
00:07:41,849 --> 00:07:46,378
<font color="#E5E5E5">fragmented on disk so half of the file</font>

179
00:07:43,979 --> 00:07:47,969
is here as a file is there you get first

180
00:07:46,379 --> 00:07:50,759
half of<font color="#CCCCCC"> the image this is from one of</font>

181
00:07:47,969 --> 00:07:52,919
the papers<font color="#E5E5E5"> that</font><font color="#CCCCCC"> we're talking</font><font color="#E5E5E5"> about</font>

182
00:07:50,759 --> 00:07:54,899
putting together back together the

183
00:07:52,919 --> 00:07:56,639
puzzle that's effectively what you have

184
00:07:54,899 --> 00:07:59,370
to do you put<font color="#CCCCCC"> together different little</font>

185
00:07:56,639 --> 00:08:02,129
pieces and you try to assemble<font color="#CCCCCC"> back</font><font color="#E5E5E5"> into</font>

186
00:07:59,370 --> 00:08:03,599
a coherent file so this<font color="#E5E5E5"> is what file</font>

187
00:08:02,129 --> 00:08:06,149
carving is this is something that's been

188
00:08:03,599 --> 00:08:08,819
done for at least a decade it's not

189
00:08:06,149 --> 00:08:10,589
longer it turns out that file carving

190
00:08:08,819 --> 00:08:15,479
doesn't really help you with a database

191
00:08:10,589 --> 00:08:17,999
specifically database files because

192
00:08:15,479 --> 00:08:20,969
databases are their own little universe

193
00:08:17,999 --> 00:08:23,939
database files do not have file headers

194
00:08:20,969 --> 00:08:26,219
actually data relational database files

195
00:08:23,939 --> 00:08:28,680
consists of a bunch of independent and

196
00:08:26,219 --> 00:08:30,149
mostly self-contained pages so if you

197
00:08:28,680 --> 00:08:32,339
look<font color="#E5E5E5"> through you don't find the header</font>

198
00:08:30,149 --> 00:08:35,250
of<font color="#CCCCCC"> a file and end of the file</font><font color="#E5E5E5"> you just</font>

199
00:08:32,339 --> 00:08:37,769
find some sequence of pages that

200
00:08:35,250 --> 00:08:42,029
constitute different structures in the

201
00:08:37,769 --> 00:08:45,000
database and interpreting them is even

202
00:08:42,029 --> 00:08:47,069
more complicated which is what I'd<font color="#E5E5E5"> like</font>

203
00:08:45,000 --> 00:08:49,880
<font color="#CCCCCC">to argue so once you've found the page</font>

204
00:08:47,069 --> 00:08:51,079
or a<font color="#E5E5E5"> content it's not that easy to tell</font>

205
00:08:49,880 --> 00:08:53,180
what you're<font color="#CCCCCC"> looking at because</font><font color="#E5E5E5"> the game</font>

206
00:08:51,080 --> 00:08:55,010
it wasn't<font color="#E5E5E5"> really made for external</font>

207
00:08:53,180 --> 00:09:01,010
consumption it's pretty much internal

208
00:08:55,010 --> 00:09:02,810
storage so again as a little detour so

209
00:09:01,010 --> 00:09:05,060
from database perspective you look at

210
00:09:02,810 --> 00:09:07,790
something and you have a<font color="#CCCCCC"> table in this</font>

211
00:09:05,060 --> 00:09:11,000
case I<font color="#CCCCCC"> have a table</font><font color="#E5E5E5"> for columns six rows</font>

212
00:09:07,790 --> 00:09:14,449
that contains the user IDs names

213
00:09:11,000 --> 00:09:16,130
positions and home downs so from logical

214
00:09:14,450 --> 00:09:18,710
perspective if you<font color="#E5E5E5"> were to query the</font>

215
00:09:16,130 --> 00:09:20,510
database you asked for some columns you

216
00:09:18,710 --> 00:09:23,930
have some data and that's what you can

217
00:09:20,510 --> 00:09:25,730
<font color="#E5E5E5">request it is by design that you have no</font>

218
00:09:23,930 --> 00:09:28,790
way of telling how it's being stored

219
00:09:25,730 --> 00:09:30,620
typically in row based relational

220
00:09:28,790 --> 00:09:34,130
databases which has a majority of

221
00:09:30,620 --> 00:09:36,170
relational databases in reality of the

222
00:09:34,130 --> 00:09:38,330
data is separated into pages so for

223
00:09:36,170 --> 00:09:40,219
example<font color="#E5E5E5"> first two rows might live on</font>

224
00:09:38,330 --> 00:09:42,230
page one and then tomorrow's might live

225
00:09:40,220 --> 00:09:43,640
on page two and<font color="#E5E5E5"> this is what it looks</font>

226
00:09:42,230 --> 00:09:48,140
like each page is a little

227
00:09:43,640 --> 00:09:51,980
self-contained semi file and this is

228
00:09:48,140 --> 00:09:54,439
what you find in storage but it<font color="#E5E5E5"> gets</font>

229
00:09:51,980 --> 00:09:56,660
more interesting when you look at other

230
00:09:54,440 --> 00:09:59,000
structures so in<font color="#E5E5E5"> addition to the table</font>

231
00:09:56,660 --> 00:10:01,969
<font color="#E5E5E5">that we had before you might also have</font>

232
00:09:59,000 --> 00:10:04,490
an index an index is simply a value to

233
00:10:01,970 --> 00:10:06,860
location pointer that helps you find

234
00:10:04,490 --> 00:10:09,920
your data so in this case I have<font color="#E5E5E5"> an</font>

235
00:10:06,860 --> 00:10:12,140
index on home down which tells you if

236
00:10:09,920 --> 00:10:15,050
I'm<font color="#CCCCCC"> looking for a particular town which</font>

237
00:10:12,140 --> 00:10:17,120
row do I find it<font color="#E5E5E5"> in again this is</font>

238
00:10:15,050 --> 00:10:19,339
auxiliary structures because you don't

239
00:10:17,120 --> 00:10:21,740
it's not<font color="#E5E5E5"> part of the data it's a copy of</font>

240
00:10:19,340 --> 00:10:24,890
the data that's created to help<font color="#E5E5E5"> you find</font>

241
00:10:21,740 --> 00:10:26,990
what you're looking for and if you<font color="#CCCCCC"> think</font>

242
00:10:24,890 --> 00:10:28,670
I don't<font color="#CCCCCC"> remember creating index as well</font>

243
00:10:26,990 --> 00:10:31,580
a lot of<font color="#E5E5E5"> them get created automatically</font>

244
00:10:28,670 --> 00:10:33,199
which is<font color="#CCCCCC"> also an interesting fact so</font>

245
00:10:31,580 --> 00:10:35,630
when you<font color="#CCCCCC"> create the primary key when you</font>

246
00:10:33,200 --> 00:10:38,000
create<font color="#CCCCCC"> a unique constraint database will</font>

247
00:10:35,630 --> 00:10:42,439
build an index to enforce things without

248
00:10:38,000 --> 00:10:44,750
notifying the user of course and so each

249
00:10:42,440 --> 00:10:46,550
one<font color="#CCCCCC"> of</font><font color="#E5E5E5"> the structures also are typically</font>

250
00:10:44,750 --> 00:10:47,990
stored in the pages indexes are a little

251
00:10:46,550 --> 00:10:50,120
more complicated<font color="#E5E5E5"> than on this picture</font>

252
00:10:47,990 --> 00:10:52,070
<font color="#E5E5E5">but ultimately it's a big structure</font>

253
00:10:50,120 --> 00:10:55,730
that's fragmented into individual pages

254
00:10:52,070 --> 00:10:57,290
and somehow stored on disk and pages

255
00:10:55,730 --> 00:10:59,880
<font color="#E5E5E5">would often try to align with file</font>

256
00:10:57,290 --> 00:11:06,060
<font color="#E5E5E5">system pages or it is similar</font>

257
00:10:59,880 --> 00:11:09,390
so a page at<font color="#CCCCCC"> the very very high level of</font>

258
00:11:06,060 --> 00:11:12,030
view contains maybe fifteen twenty

259
00:11:09,390 --> 00:11:14,790
percent various header data so each page

260
00:11:12,030 --> 00:11:16,949
has its own header that<font color="#CCCCCC"> among</font><font color="#E5E5E5"> other</font>

261
00:11:14,790 --> 00:11:19,079
things might tell you where the<font color="#E5E5E5"> space</font>

262
00:11:16,950 --> 00:11:23,340
belongs to so which data structure comes

263
00:11:19,080 --> 00:11:25,740
from what's the data type the category

264
00:11:23,340 --> 00:11:27,300
of a data structure then<font color="#CCCCCC"> there's a row</font>

265
00:11:25,740 --> 00:11:29,850
directory which is<font color="#E5E5E5"> just a bunch of</font>

266
00:11:27,300 --> 00:11:31,260
pointers to the actual rose and then

267
00:11:29,850 --> 00:11:33,630
somewhere inside the page and the

268
00:11:31,260 --> 00:11:36,840
payload component there are the actual

269
00:11:33,630 --> 00:11:39,270
data rows with possibly<font color="#E5E5E5"> some additional</font>

270
00:11:36,840 --> 00:11:42,000
metadata so the interesting part about

271
00:11:39,270 --> 00:11:44,760
all of this is that a lot<font color="#CCCCCC"> of</font><font color="#E5E5E5"> the details</font>

272
00:11:42,000 --> 00:11:47,670
<font color="#CCCCCC">vary database database but every</font>

273
00:11:44,760 --> 00:11:49,800
relational database is tested of which

274
00:11:47,670 --> 00:11:52,979
there<font color="#CCCCCC"> is at least eight to</font><font color="#E5E5E5"> ten they all</font>

275
00:11:49,800 --> 00:11:55,319
have the same general structure and the

276
00:11:52,980 --> 00:11:56,820
<font color="#E5E5E5">first thing we've set out to do was to</font>

277
00:11:55,320 --> 00:11:59,010
come up with<font color="#CCCCCC"> a set of descriptive</font>

278
00:11:56,820 --> 00:12:01,470
parameters that will tell you<font color="#E5E5E5"> how</font>

279
00:11:59,010 --> 00:12:03,120
exactly are things set up so generally

280
00:12:01,470 --> 00:12:05,340
<font color="#CCCCCC">it looks like this and then some details</font>

281
00:12:03,120 --> 00:12:08,340
as to what's on top what's on the bottom

282
00:12:05,340 --> 00:12:14,040
<font color="#E5E5E5">how many metadata enters you have that</font>

283
00:12:08,340 --> 00:12:16,110
there is from system to system and so

284
00:12:14,040 --> 00:12:17,819
once you step back and actually look at

285
00:12:16,110 --> 00:12:20,550
<font color="#E5E5E5">the storage as a big collection of</font>

286
00:12:17,820 --> 00:12:23,160
database pages and then you can begin to

287
00:12:20,550 --> 00:12:24,750
interpret what the storage contains and

288
00:12:23,160 --> 00:12:30,600
try to understand what<font color="#E5E5E5"> you can learn</font>

289
00:12:24,750 --> 00:12:33,600
<font color="#CCCCCC">from it and so we built</font><font color="#E5E5E5"> this tool gb</font>

290
00:12:30,600 --> 00:12:35,970
Carver as a reference the file carving

291
00:12:33,600 --> 00:12:39,450
process and it consists of<font color="#E5E5E5"> two different</font>

292
00:12:35,970 --> 00:12:41,310
<font color="#E5E5E5">pieces the parameter detector and the</font>

293
00:12:39,450 --> 00:12:44,430
actual data parsing step and I'll talk

294
00:12:41,310 --> 00:12:47,579
<font color="#E5E5E5">about each</font><font color="#CCCCCC"> one separately so first</font>

295
00:12:44,430 --> 00:12:50,699
<font color="#CCCCCC">parameter</font><font color="#E5E5E5"> detector again remember every</font>

296
00:12:47,580 --> 00:12:53,580
page looks similarly but the details

297
00:12:50,700 --> 00:12:55,770
<font color="#E5E5E5">vary from system to system and wouldn't</font>

298
00:12:53,580 --> 00:12:58,680
it<font color="#E5E5E5"> be nice to</font><font color="#CCCCCC"> be able to learn what the</font>

299
00:12:55,770 --> 00:13:01,680
<font color="#CCCCCC">system actually does so what</font><font color="#E5E5E5"> parameter</font>

300
00:12:58,680 --> 00:13:03,420
detector does you install database then

301
00:13:01,680 --> 00:13:05,189
it automatically loads a bunch<font color="#E5E5E5"> of</font>

302
00:13:03,420 --> 00:13:07,979
<font color="#E5E5E5">synthetic data that we know what it</font>

303
00:13:05,190 --> 00:13:10,770
looks like and then by capturing storage

304
00:13:07,980 --> 00:13:13,020
it can deduce how the data lens in the

305
00:13:10,770 --> 00:13:16,439
<font color="#E5E5E5">database storage so again</font>

306
00:13:13,020 --> 00:13:18,900
pretty much learn the layout of<font color="#CCCCCC"> our</font>

307
00:13:16,440 --> 00:13:21,390
<font color="#E5E5E5">database and one of the reasons</font><font color="#CCCCCC"> we</font>

308
00:13:18,900 --> 00:13:23,760
wanted this is to be able<font color="#E5E5E5"> to check what</font>

309
00:13:21,390 --> 00:13:26,610
happens with a new version and typically

310
00:13:23,760 --> 00:13:28,650
things don't change but for example at

311
00:13:26,610 --> 00:13:30,810
least some time ago maybe 10 years ago

312
00:13:28,650 --> 00:13:32,340
<font color="#E5E5E5">postgres had actually made a significant</font>

313
00:13:30,810 --> 00:13:34,709
switch where several of the<font color="#E5E5E5"> parameters</font>

314
00:13:32,340 --> 00:13:37,530
were changed although<font color="#E5E5E5"> normally wouldn't</font>

315
00:13:34,710 --> 00:13:38,910
really tweak it too much because it

316
00:13:37,530 --> 00:13:43,170
requires significant changes in

317
00:13:38,910 --> 00:13:45,930
processing so obviously there's a<font color="#E5E5E5"> lot of</font>

318
00:13:43,170 --> 00:13:47,550
parameters I'll mention the couple for

319
00:13:45,930 --> 00:13:50,010
example<font color="#E5E5E5"> and this by the way is the list</font>

320
00:13:47,550 --> 00:13:52,410
<font color="#CCCCCC">of databases we primarily focus on a</font>

321
00:13:50,010 --> 00:13:54,930
<font color="#E5E5E5">couple more not mentioned here because</font>

322
00:13:52,410 --> 00:13:57,959
they happen<font color="#CCCCCC"> to share the same storage so</font>

323
00:13:54,930 --> 00:14:00,300
for<font color="#E5E5E5"> example</font><font color="#CCCCCC"> mariadb</font><font color="#E5E5E5"> uses the storage</font>

324
00:13:57,960 --> 00:14:02,730
engine of my sequel<font color="#CCCCCC"> Greenbaum uses the</font>

325
00:14:00,300 --> 00:14:04,829
storage engine of progress so the pages

326
00:14:02,730 --> 00:14:07,530
are more or<font color="#CCCCCC"> less the same of course the</font>

327
00:14:04,830 --> 00:14:09,990
engine itself is a little different and

328
00:14:07,530 --> 00:14:11,670
so for example the page might have a

329
00:14:09,990 --> 00:14:13,950
structure identified that tells you what

330
00:14:11,670 --> 00:14:16,290
kind<font color="#E5E5E5"> of structure the page belongs to</font>

331
00:14:13,950 --> 00:14:19,890
sometimes it might not be on the page

332
00:14:16,290 --> 00:14:21,569
similarly as<font color="#E5E5E5"> I mentioned sometimes you</font>

333
00:14:19,890 --> 00:14:23,430
insert rows from the<font color="#E5E5E5"> bottom to top</font>

334
00:14:21,570 --> 00:14:26,100
stacking them sometimes you start from

335
00:14:23,430 --> 00:14:27,750
the top and down the bottom this<font color="#CCCCCC"> is the</font>

336
00:14:26,100 --> 00:14:31,260
kind of<font color="#E5E5E5"> thing that different database</font>

337
00:14:27,750 --> 00:14:33,420
choose different strategies now the more

338
00:14:31,260 --> 00:14:35,220
interesting parameters are the row

339
00:14:33,420 --> 00:14:38,910
identifying column count which

340
00:14:35,220 --> 00:14:42,240
interacting in good ways<font color="#CCCCCC"> and so row</font>

341
00:14:38,910 --> 00:14:44,069
identifier is this extra column that the

342
00:14:42,240 --> 00:14:46,830
database may or may not choose<font color="#CCCCCC"> to create</font>

343
00:14:44,070 --> 00:14:49,860
so<font color="#E5E5E5"> normally let's say in this example I</font>

344
00:14:46,830 --> 00:14:52,500
have three columns number name and<font color="#E5E5E5"> city</font>

345
00:14:49,860 --> 00:14:54,900
sometimes you'd actually see those three

346
00:14:52,500 --> 00:14:57,510
values sometimes there is a fourth

347
00:14:54,900 --> 00:14:59,760
column which is the internal row ID it's

348
00:14:57,510 --> 00:15:02,790
called<font color="#CCCCCC"> ctid in progress droid in</font><font color="#E5E5E5"> oracle</font>

349
00:14:59,760 --> 00:15:05,550
so you can<font color="#E5E5E5"> actually query for it and in</font>

350
00:15:02,790 --> 00:15:08,339
reality on<font color="#E5E5E5"> the physical page there's</font>

351
00:15:05,550 --> 00:15:12,329
more pay more columns than you create

352
00:15:08,340 --> 00:15:14,550
and then some databases choose to keep

353
00:15:12,330 --> 00:15:17,580
track of how many columns there are by

354
00:15:14,550 --> 00:15:20,670
just having the number of columns stored

355
00:15:17,580 --> 00:15:22,740
on page and an<font color="#E5E5E5"> interesting interaction</font>

356
00:15:20,670 --> 00:15:24,810
part is that the count sometimes does

357
00:15:22,740 --> 00:15:25,760
include the fake<font color="#E5E5E5"> pay a fake column and</font>

358
00:15:24,810 --> 00:15:27,949
sometimes does not

359
00:15:25,760 --> 00:15:30,080
so you can have all<font color="#CCCCCC"> sorts of combination</font>

360
00:15:27,950 --> 00:15:31,490
you might have a row ID you might have<font color="#CCCCCC"> a</font>

361
00:15:30,080 --> 00:15:33,800
count of three you might have a count of

362
00:15:31,490 --> 00:15:36,050
four you might have neither and all<font color="#CCCCCC"> of</font>

363
00:15:33,800 --> 00:15:41,599
this<font color="#CCCCCC"> is a possibility</font><font color="#E5E5E5"> system to system</font>

364
00:15:36,050 --> 00:15:45,079
so then there is the value the

365
00:15:41,600 --> 00:15:46,940
construction which is also kind of

366
00:15:45,080 --> 00:15:48,560
database database<font color="#CCCCCC"> thing so impose these</font>

367
00:15:46,940 --> 00:15:53,300
things are pretty<font color="#CCCCCC"> obvious for example</font>

368
00:15:48,560 --> 00:15:56,180
for numbers you just have a 256<font color="#CCCCCC"> 4 bytes</font>

369
00:15:53,300 --> 00:15:58,910
take storage and the<font color="#E5E5E5"> numbers interpret</font>

370
00:15:56,180 --> 00:16:01,099
it this way and then there<font color="#CCCCCC"> is Oracle I</font>

371
00:15:58,910 --> 00:16:04,219
firmly believe that Oracle chooses

372
00:16:01,100 --> 00:16:07,220
designed simply to have<font color="#E5E5E5"> something for us</font>

373
00:16:04,220 --> 00:16:10,490
<font color="#CCCCCC">to talk about so if you think about how</font>

374
00:16:07,220 --> 00:16:12,290
they<font color="#CCCCCC"> represent the numbers one digit is</font>

375
00:16:10,490 --> 00:16:15,950
there to tell you how many digits number

376
00:16:12,290 --> 00:16:17,150
contains so the first three numbers it

377
00:16:15,950 --> 00:16:19,670
starts from three because there is only

378
00:16:17,150 --> 00:16:22,430
<font color="#E5E5E5">three or rather than four by it's being</font>

379
00:16:19,670 --> 00:16:25,219
used then the second one refers to how

380
00:16:22,430 --> 00:16:28,489
many<font color="#E5E5E5"> zeros there are at end so 192 means</font>

381
00:16:25,220 --> 00:16:31,880
no zeros 193 means two zeros and so on

382
00:16:28,490 --> 00:16:35,810
and then the final<font color="#E5E5E5"> number in the first</font>

383
00:16:31,880 --> 00:16:38,510
<font color="#E5E5E5">example is the value itself minus plus</font><font color="#CCCCCC"> 1</font>

384
00:16:35,810 --> 00:16:43,729
so<font color="#E5E5E5"> 4 is represented as three for three</font>

385
00:16:38,510 --> 00:16:48,860
numbers 192 no zeros 544 then<font color="#E5E5E5"> 40 is</font>

386
00:16:43,730 --> 00:16:51,650
represented as three 192 and 41 and then

387
00:16:48,860 --> 00:16:53,810
400 is represented a 3 1 93 for two

388
00:16:51,650 --> 00:16:56,870
zeros and then five for the<font color="#E5E5E5"> four in the</font>

389
00:16:53,810 --> 00:17:00,530
beginning<font color="#E5E5E5"> and then finally I have so</font>

390
00:16:56,870 --> 00:17:05,240
this is<font color="#CCCCCC"> 4 bytes then</font><font color="#E5E5E5"> 1 93 4 20 and 5 4</font>

391
00:17:00,530 --> 00:17:06,859
400 and then 41 4 40 those are the

392
00:17:05,240 --> 00:17:08,720
action four bytes with you see in the

393
00:17:06,859 --> 00:17:12,020
storage and I have a<font color="#E5E5E5"> couple more</font>

394
00:17:08,720 --> 00:17:14,810
examples and I have no idea<font color="#E5E5E5"> how</font><font color="#CCCCCC"> my PhD</font>

395
00:17:12,020 --> 00:17:18,440
student figure it out still not sure<font color="#E5E5E5"> but</font>

396
00:17:14,810 --> 00:17:20,569
somehow he learned it and it works so

397
00:17:18,440 --> 00:17:25,310
<font color="#E5E5E5">clearly it is actually how thing goes</font>

398
00:17:20,569 --> 00:17:27,109
toward so one more<font color="#E5E5E5"> interesting example</font>

399
00:17:25,310 --> 00:17:29,570
that's still kind of something working

400
00:17:27,109 --> 00:17:32,810
<font color="#E5E5E5">on we have some heuristics but it's the</font>

401
00:17:29,570 --> 00:17:35,030
work in progress so if you have a string

402
00:17:32,810 --> 00:17:37,370
the typical mechanism is to have a

403
00:17:35,030 --> 00:17:38,600
length of a string followed by the

404
00:17:37,370 --> 00:17:40,789
actual

405
00:17:38,600 --> 00:17:43,428
data now if you happen to<font color="#E5E5E5"> have a three</font>

406
00:17:40,789 --> 00:17:44,840
character string then it might be

407
00:17:43,429 --> 00:17:46,160
difficult to tell which one you're

408
00:17:44,840 --> 00:17:49,220
<font color="#CCCCCC">looking</font><font color="#E5E5E5"> at because both are valid</font>

409
00:17:46,160 --> 00:17:51,770
interpretations one says this<font color="#CCCCCC"> is the</font>

410
00:17:49,220 --> 00:17:54,500
<font color="#E5E5E5">three and this is a three-character</font>

411
00:17:51,770 --> 00:17:56,090
j-a-y the other possibility<font color="#CCCCCC"> is to</font>

412
00:17:54,500 --> 00:17:58,820
interpret that as a number of 4 bytes

413
00:17:56,090 --> 00:18:00,260
and it's not necessarily obvious because

414
00:17:58,820 --> 00:18:02,510
at least individual pages don't

415
00:18:00,260 --> 00:18:03,620
explicitly store that information you

416
00:18:02,510 --> 00:18:09,260
might find it somewhere else of course

417
00:18:03,620 --> 00:18:11,510
so then<font color="#CCCCCC"> there's parsing also give a</font>

418
00:18:09,260 --> 00:18:13,370
couple examples just to give you a<font color="#E5E5E5"> quick</font>

419
00:18:11,510 --> 00:18:15,408
example of getting stuff out of progress

420
00:18:13,370 --> 00:18:19,129
<font color="#CCCCCC">and some</font><font color="#E5E5E5"> more very curious algebraic</font>

421
00:18:15,409 --> 00:18:22,520
decisions so some more<font color="#E5E5E5"> parameters the</font>

422
00:18:19,130 --> 00:18:23,990
orange raw data delimiter is where the

423
00:18:22,520 --> 00:18:26,450
individual row begins on a page

424
00:18:23,990 --> 00:18:29,299
somewhere about there the header this is

425
00:18:26,450 --> 00:18:32,900
just a piece of a page<font color="#E5E5E5"> a byte by byte</font>

426
00:18:29,299 --> 00:18:34,158
starting where the rows are and the two

427
00:18:32,900 --> 00:18:36,289
columns you seeing<font color="#E5E5E5"> here this is the</font>

428
00:18:34,159 --> 00:18:38,960
ascii character manifestation and this

429
00:18:36,289 --> 00:18:41,629
is the decimal value and obviously some

430
00:18:38,960 --> 00:18:45,020
are not<font color="#E5E5E5"> visible ascii characters so the</font>

431
00:18:41,630 --> 00:18:47,240
three bytes and orange indicate that the

432
00:18:45,020 --> 00:18:49,158
data begins here then there's another

433
00:18:47,240 --> 00:18:53,870
parameter that tells you<font color="#CCCCCC"> how far you go</font>

434
00:18:49,159 --> 00:18:56,539
where the row actually start<font color="#CCCCCC"> and then</font>

435
00:18:53,870 --> 00:18:58,129
<font color="#E5E5E5">you have a 4-byte number and the four</font>

436
00:18:56,539 --> 00:19:02,150
byte number and told chris is stored in

437
00:18:58,130 --> 00:19:05,090
at least relatively obvious way then you

438
00:19:02,150 --> 00:19:06,919
have a string length but it would be<font color="#E5E5E5"> too</font>

439
00:19:05,090 --> 00:19:09,860
simple to store the actual string<font color="#E5E5E5"> length</font>

440
00:19:06,919 --> 00:19:12,140
so what in fact happens you have 39 that

441
00:19:09,860 --> 00:19:14,479
represents a team and how do you<font color="#E5E5E5"> learn</font>

442
00:19:12,140 --> 00:19:16,220
that well there<font color="#E5E5E5"> are two parameters one</font>

443
00:19:14,480 --> 00:19:20,179
<font color="#E5E5E5">of which you subtract another one of</font>

444
00:19:16,220 --> 00:19:22,820
which you divide by 4 4 postgis and

445
00:19:20,179 --> 00:19:24,470
particulars minus 3/2 which gives you

446
00:19:22,820 --> 00:19:26,510
the actual length of the string that the

447
00:19:24,470 --> 00:19:30,530
database means so when it says 39<font color="#E5E5E5"> it's</font>

448
00:19:26,510 --> 00:19:33,350
an 18 byte string again not quite sure

449
00:19:30,530 --> 00:19:38,168
how<font color="#E5E5E5"> he figured it out but there you</font><font color="#CCCCCC"> have</font>

450
00:19:33,350 --> 00:19:40,869
it I'm so again this

451
00:19:38,169 --> 00:19:43,419
back to<font color="#E5E5E5"> our example of what the value</font>

452
00:19:40,869 --> 00:19:47,019
might contain so 65,000 is 4<font color="#CCCCCC"> 4 4 bytes</font>

453
00:19:43,419 --> 00:19:52,119
195 407 for the six in the beginning<font color="#E5E5E5"> and</font>

454
00:19:47,019 --> 00:19:54,220
then 51 for the 50 in 65,000 and there's

455
00:19:52,119 --> 00:19:55,720
a lot<font color="#CCCCCC"> of other interesting</font><font color="#E5E5E5"> issues so</font><font color="#CCCCCC"> we</font>

456
00:19:54,220 --> 00:19:58,749
kind of have a handle on internal<font color="#E5E5E5"> arrow</font>

457
00:19:55,720 --> 00:20:01,899
IDs but databases<font color="#E5E5E5"> might also have binary</font>

458
00:19:58,749 --> 00:20:03,850
like large objects which could be once

459
00:20:01,899 --> 00:20:07,508
again images or some other data types

460
00:20:03,850 --> 00:20:09,219
some databases<font color="#E5E5E5"> use compression some</font>

461
00:20:07,509 --> 00:20:12,220
sometimes compression kicks and

462
00:20:09,220 --> 00:20:14,950
automatically like in<font color="#CCCCCC"> Postgres obviously</font>

463
00:20:12,220 --> 00:20:17,139
there's encryption issues and so the

464
00:20:14,950 --> 00:20:20,739
construction of values is<font color="#E5E5E5"> still somewhat</font>

465
00:20:17,139 --> 00:20:22,928
of a work in progress and then I<font color="#E5E5E5"> wanted</font>

466
00:20:20,739 --> 00:20:25,720
to show some examples of the kind of

467
00:20:22,929 --> 00:20:28,419
things you can learn<font color="#CCCCCC"> from various</font>

468
00:20:25,720 --> 00:20:30,820
operations so again because when you

469
00:20:28,419 --> 00:20:32,859
<font color="#CCCCCC">issued delete or an update or any sort</font>

470
00:20:30,820 --> 00:20:35,889
of command things do<font color="#E5E5E5"> not immediately</font>

471
00:20:32,859 --> 00:20:38,590
<font color="#E5E5E5">happen the change is very indirect so</font>

472
00:20:35,889 --> 00:20:39,939
for<font color="#E5E5E5"> example if I say delete a row then</font>

473
00:20:38,590 --> 00:20:43,269
they're always mark is deleted but

474
00:20:39,940 --> 00:20:45,820
remains there and when<font color="#E5E5E5"> the curious</font>

475
00:20:43,269 --> 00:20:47,649
result is that<font color="#CCCCCC"> the attacker someone</font>

476
00:20:45,820 --> 00:20:49,570
using our tool then has more<font color="#CCCCCC"> access to</font>

477
00:20:47,649 --> 00:20:51,279
<font color="#CCCCCC">the data because as the user with</font>

478
00:20:49,570 --> 00:20:52,989
legitimate<font color="#E5E5E5"> access you can't really have</font>

479
00:20:51,279 --> 00:20:54,879
a deleted<font color="#E5E5E5"> rope because it's been deleted</font>

480
00:20:52,989 --> 00:20:57,730
<font color="#E5E5E5">but it's still there it's simply</font>

481
00:20:54,879 --> 00:21:00,340
<font color="#E5E5E5">marketing</font><font color="#CCCCCC"> deleted and then if you have</font>

482
00:20:57,730 --> 00:21:03,129
an update especially if you<font color="#CCCCCC"> have an</font>

483
00:21:00,340 --> 00:21:06,309
update to a larger value so in that case

484
00:21:03,129 --> 00:21:07,959
changing Smith don't<font color="#CCCCCC"> not Smith you can</font>

485
00:21:06,309 --> 00:21:09,820
set the original value<font color="#E5E5E5"> where they're all</font>

486
00:21:07,960 --> 00:21:11,710
values to be so you have to delete the

487
00:21:09,820 --> 00:21:14,168
old<font color="#E5E5E5"> one like you do normally and then</font>

488
00:21:11,710 --> 00:21:16,480
reinsert the new one so pretty<font color="#E5E5E5"> much</font>

489
00:21:14,169 --> 00:21:21,399
everything stays around for an

490
00:21:16,480 --> 00:21:25,989
indefinite amount of time and here's an

491
00:21:21,399 --> 00:21:28,238
example of an actual data so this<font color="#CCCCCC"> is</font>

492
00:21:25,989 --> 00:21:31,330
from sequel light from an<font color="#CCCCCC"> Android</font><font color="#E5E5E5"> device</font>

493
00:21:28,239 --> 00:21:33,909
that came of ebay and one of our

494
00:21:31,330 --> 00:21:36,100
collaborators got us and this is a

495
00:21:33,909 --> 00:21:38,980
single page that happens to contain SMS

496
00:21:36,100 --> 00:21:42,189
messages so this page address tells you

497
00:21:38,980 --> 00:21:43,840
where the data lived on a<font color="#E5E5E5"> disk a record</font>

498
00:21:42,190 --> 00:21:45,460
count at least in this case tells you

499
00:21:43,840 --> 00:21:47,619
how many active records there is

500
00:21:45,460 --> 00:21:50,169
<font color="#E5E5E5">actually 21 records 20 active one</font>

501
00:21:47,619 --> 00:21:51,740
deleted so this is 20 but analogy

502
00:21:50,169 --> 00:21:55,100
<font color="#CCCCCC">there's 21</font>

503
00:21:51,740 --> 00:21:56,720
those are the 21 records and then on the

504
00:21:55,100 --> 00:21:58,639
bottom you<font color="#CCCCCC"> have a deleted one which has</font>

505
00:21:56,720 --> 00:22:00,290
been a little bit nailed out but it's

506
00:21:58,640 --> 00:22:02,690
still there<font color="#E5E5E5"> and obviously recoverable</font>

507
00:22:00,290 --> 00:22:05,059
and in this particular case you<font color="#E5E5E5"> also</font>

508
00:22:02,690 --> 00:22:08,720
have a row ID which<font color="#CCCCCC"> is a column</font><font color="#E5E5E5"> that was</font>

509
00:22:05,059 --> 00:22:10,399
never created by the user this is

510
00:22:08,720 --> 00:22:14,660
something<font color="#CCCCCC"> that</font><font color="#E5E5E5"> sequel</font><font color="#CCCCCC"> I'd keeps for its</font>

511
00:22:10,400 --> 00:22:18,620
own purposes and so that's actual data

512
00:22:14,660 --> 00:22:22,100
from an actual phone<font color="#CCCCCC"> and one</font><font color="#E5E5E5"> more thing</font>

513
00:22:18,620 --> 00:22:25,790
<font color="#E5E5E5">I wanted</font><font color="#CCCCCC"> to briefly give you some</font>

514
00:22:22,100 --> 00:22:28,070
background on so this<font color="#CCCCCC"> is the stochastic</font>

515
00:22:25,790 --> 00:22:29,960
<font color="#E5E5E5">forensics back in forensics mechanism is</font>

516
00:22:28,070 --> 00:22:33,080
actually something that was proposed by

517
00:22:29,960 --> 00:22:35,059
our collaborator<font color="#E5E5E5"> Jonathan gear and he</font>

518
00:22:33,080 --> 00:22:39,080
had this idea and published the paper a

519
00:22:35,059 --> 00:22:41,570
few years<font color="#E5E5E5"> ago also</font><font color="#CCCCCC"> in dfw yes that it's</font>

520
00:22:39,080 --> 00:22:44,270
possible to<font color="#E5E5E5"> look at the side effects</font>

521
00:22:41,570 --> 00:22:47,928
created by the system not things related

522
00:22:44,270 --> 00:22:50,420
to security but actions performed by the

523
00:22:47,929 --> 00:22:52,580
system for some other purpose to learn

524
00:22:50,420 --> 00:22:55,610
what is happening and that's the<font color="#E5E5E5"> exact</font>

525
00:22:52,580 --> 00:22:57,919
<font color="#E5E5E5">same iteration we're going for here in</font>

526
00:22:55,610 --> 00:22:59,240
terms of applications to look at the

527
00:22:57,920 --> 00:23:02,720
storage or to look<font color="#E5E5E5"> at the system</font>

528
00:22:59,240 --> 00:23:04,370
behavior and<font color="#CCCCCC"> to learn what is happening</font>

529
00:23:02,720 --> 00:23:06,140
not because there is a<font color="#CCCCCC"> security</font>

530
00:23:04,370 --> 00:23:07,939
mechanism that tells us that log things

531
00:23:06,140 --> 00:23:09,980
but because this is what happens when

532
00:23:07,940 --> 00:23:12,230
you do X when you do X Y happen so the

533
00:23:09,980 --> 00:23:13,760
storage reflected it's<font color="#E5E5E5"> actually much</font>

534
00:23:12,230 --> 00:23:16,370
harder to avoid them the<font color="#E5E5E5"> security</font>

535
00:23:13,760 --> 00:23:19,220
logging because within our privileges

536
00:23:16,370 --> 00:23:22,760
you can change that and to give you<font color="#E5E5E5"> an</font>

537
00:23:19,220 --> 00:23:26,120
<font color="#CCCCCC">idea of how the how the motivated</font>

538
00:23:22,760 --> 00:23:29,420
approach works so what he did back back

539
00:23:26,120 --> 00:23:31,219
then was to look at windows file system

540
00:23:29,420 --> 00:23:33,559
time steps so every time you access a

541
00:23:31,220 --> 00:23:36,590
file in windows there is a<font color="#CCCCCC"> time stamp</font>

542
00:23:33,559 --> 00:23:39,379
that was it being<font color="#E5E5E5"> changed so if you look</font>

543
00:23:36,590 --> 00:23:41,570
at<font color="#CCCCCC"> the folder and his specific task was</font>

544
00:23:39,380 --> 00:23:45,080
to prove that<font color="#CCCCCC"> an employee had absconded</font>

545
00:23:41,570 --> 00:23:46,399
with some data before departing so if

546
00:23:45,080 --> 00:23:48,169
you<font color="#CCCCCC"> look</font><font color="#E5E5E5"> at the folder and you look at</font>

547
00:23:46,400 --> 00:23:50,210
the time stamps on the bottom and green

548
00:23:48,170 --> 00:23:51,920
is the<font color="#E5E5E5"> typical distribution of the time</font>

549
00:23:50,210 --> 00:23:53,660
steps where some things<font color="#E5E5E5"> were changed</font>

550
00:23:51,920 --> 00:23:55,520
recently some things will change longer

551
00:23:53,660 --> 00:23:58,370
ago some were chased a while ago and

552
00:23:55,520 --> 00:24:02,418
some dates go all the way back<font color="#CCCCCC"> to</font><font color="#E5E5E5"> zero</font>

553
00:23:58,370 --> 00:24:03,800
or something unsaid so if you<font color="#E5E5E5"> happen to</font>

554
00:24:02,419 --> 00:24:06,320
<font color="#E5E5E5">copy a folder</font>

555
00:24:03,800 --> 00:24:08,210
point then you recursively go for the

556
00:24:06,320 --> 00:24:11,120
whole folder and<font color="#CCCCCC"> you touch every file</font>

557
00:24:08,210 --> 00:24:14,960
that's how folder copy works so that

558
00:24:11,120 --> 00:24:17,000
<font color="#E5E5E5">tends to create a</font><font color="#CCCCCC"> cut-off</font><font color="#E5E5E5"> right here</font>

559
00:24:14,960 --> 00:24:18,380
which is a very likely proof and there

560
00:24:17,000 --> 00:24:20,660
are some more analysis in the paper that

561
00:24:18,380 --> 00:24:22,400
tells how likely it is which is the

562
00:24:20,660 --> 00:24:24,920
proof that at this moment where<font color="#E5E5E5"> you see</font>

563
00:24:22,400 --> 00:24:27,140
<font color="#CCCCCC">the red spike a cut off someone had</font>

564
00:24:24,920 --> 00:24:28,730
copied the whole folder and that it

565
00:24:27,140 --> 00:24:31,730
doesn't<font color="#CCCCCC"> have the normal</font><font color="#E5E5E5"> pattern</font>

566
00:24:28,730 --> 00:24:33,110
distribution of time steps and of<font color="#E5E5E5"> course</font>

567
00:24:31,730 --> 00:24:35,450
an interesting thing about it is that

568
00:24:33,110 --> 00:24:36,830
this<font color="#E5E5E5"> is</font><font color="#CCCCCC"> not a security mechanism this is</font>

569
00:24:35,450 --> 00:24:43,790
just<font color="#E5E5E5"> something that the system does</font>

570
00:24:36,830 --> 00:24:46,040
anyway for some<font color="#E5E5E5"> other reasons so to give</font>

571
00:24:43,790 --> 00:24:49,129
some more idea of the kind of stuff you

572
00:24:46,040 --> 00:24:52,370
can<font color="#CCCCCC"> see in storage again</font><font color="#E5E5E5"> a member table</font>

573
00:24:49,130 --> 00:24:54,590
on the right index<font color="#E5E5E5"> on the left so if you</font>

574
00:24:52,370 --> 00:24:57,949
update something<font color="#E5E5E5"> the old value is</font>

575
00:24:54,590 --> 00:24:59,810
deleted the new values inserted and then

576
00:24:57,950 --> 00:25:01,880
of course index and other structures

577
00:24:59,810 --> 00:25:03,590
would keep their<font color="#CCCCCC"> own copy so the old</font>

578
00:25:01,880 --> 00:25:09,200
value is there and the new values there

579
00:25:03,590 --> 00:25:15,290
and nothing changes and one more thing

580
00:25:09,200 --> 00:25:18,800
about cashing in case to remind you how

581
00:25:15,290 --> 00:25:21,530
it means database caching works so if

582
00:25:18,800 --> 00:25:23,360
you have<font color="#E5E5E5"> data on disk on left you access</font>

583
00:25:21,530 --> 00:25:25,790
a couple of pages or change a<font color="#CCCCCC"> couple of</font>

584
00:25:23,360 --> 00:25:28,070
pages the copy is loaded into memory

585
00:25:25,790 --> 00:25:29,960
change the memory and for a while it

586
00:25:28,070 --> 00:25:33,770
actually differs from what's on<font color="#E5E5E5"> disk</font>

587
00:25:29,960 --> 00:25:36,200
then as you access more stuff like for

588
00:25:33,770 --> 00:25:39,379
example another query accesses page d

589
00:25:36,200 --> 00:25:40,970
that goes into memory and then the old

590
00:25:39,380 --> 00:25:48,920
stuff has to be flushed<font color="#E5E5E5"> out and</font>

591
00:25:40,970 --> 00:25:50,450
synchronized back to disk so now just to

592
00:25:48,920 --> 00:25:53,090
go<font color="#CCCCCC"> through the same steps in a database</font>

593
00:25:50,450 --> 00:25:55,160
and those are all different moments<font color="#E5E5E5"> and</font>

594
00:25:53,090 --> 00:25:56,629
<font color="#E5E5E5">time you can capture if you look at the</font>

595
00:25:55,160 --> 00:25:58,040
<font color="#E5E5E5">storage depending on when you look at</font>

596
00:25:56,630 --> 00:26:01,130
the system<font color="#E5E5E5"> or where you are in this</font>

597
00:25:58,040 --> 00:26:03,020
process of an update<font color="#E5E5E5"> so again I start</font>

598
00:26:01,130 --> 00:26:05,000
<font color="#E5E5E5">with the data I issue an update first</font>

599
00:26:03,020 --> 00:26:08,990
thing<font color="#E5E5E5"> that has to happen is data goes</font>

600
00:26:05,000 --> 00:26:11,420
into memory second it gets modified in

601
00:26:08,990 --> 00:26:12,950
memory and same applies to an index by

602
00:26:11,420 --> 00:26:15,050
the way index also gets loaded into

603
00:26:12,950 --> 00:26:15,389
memory because you can alter things<font color="#E5E5E5"> in</font>

604
00:26:15,050 --> 00:26:18,178
this

605
00:26:15,389 --> 00:26:20,129
and then at this<font color="#CCCCCC"> point you can</font><font color="#E5E5E5"> see the</font>

606
00:26:18,179 --> 00:26:21,869
difference<font color="#E5E5E5"> and you</font><font color="#CCCCCC"> can essentially see</font>

607
00:26:20,129 --> 00:26:25,139
anything in progress because cash

608
00:26:21,869 --> 00:26:27,329
doesn't match<font color="#CCCCCC"> to</font><font color="#E5E5E5"> disk then at some point</font>

609
00:26:25,139 --> 00:26:29,248
the data might be written back to disk

610
00:26:27,329 --> 00:26:36,178
and remain a memory and then<font color="#E5E5E5"> eventually</font>

611
00:26:29,249 --> 00:26:39,059
it<font color="#E5E5E5"> would be flushed out I'm so I'll skip</font>

612
00:26:36,179 --> 00:26:41,429
over most of it because<font color="#CCCCCC"> of our setup</font>

613
00:26:39,059 --> 00:26:45,989
issues I'll just show your quick summary

614
00:26:41,429 --> 00:26:51,359
office so this is Oracle buffer cache

615
00:26:45,989 --> 00:26:53,999
50,000 pages each page is a pixel and so

616
00:26:51,359 --> 00:26:56,158
<font color="#E5E5E5">this is 50 thousand pixels and what</font>

617
00:26:53,999 --> 00:26:57,690
we're simply showing is you start<font color="#E5E5E5"> with</font>

618
00:26:56,159 --> 00:26:59,940
the preloaded cache of some unrelated

619
00:26:57,690 --> 00:27:02,849
data and then you start running queries

620
00:26:59,940 --> 00:27:05,399
and then all contents of<font color="#CCCCCC"> memory</font><font color="#E5E5E5"> start</font>

621
00:27:02,849 --> 00:27:06,958
being over it and<font color="#CCCCCC"> step-by-step</font><font color="#E5E5E5"> so first</font>

622
00:27:05,399 --> 00:27:09,238
<font color="#E5E5E5">there's some red stuff on the bottom</font>

623
00:27:06,959 --> 00:27:11,249
then there's more green things more

624
00:27:09,239 --> 00:27:15,029
green things coming from line order and

625
00:27:11,249 --> 00:27:18,209
another synthetic table and it's kind of

626
00:27:15,029 --> 00:27:22,019
<font color="#CCCCCC">first-in first-out sequential over right</font>

627
00:27:18,209 --> 00:27:23,729
and you can also don't know if you<font color="#E5E5E5"> can</font>

628
00:27:22,019 --> 00:27:25,079
see<font color="#CCCCCC"> it here but I can show you the</font>

629
00:27:23,729 --> 00:27:26,940
bigger version you can also see<font color="#CCCCCC"> aspects</font>

630
00:27:25,079 --> 00:27:28,739
of the old stuff so it's not<font color="#E5E5E5"> necessarily</font>

631
00:27:26,940 --> 00:27:30,629
completely over written<font color="#E5E5E5"> that least not</font>

632
00:27:28,739 --> 00:27:36,779
until multiple passes know all the

633
00:27:30,629 --> 00:27:40,589
things<font color="#E5E5E5"> you can see in in storage alright</font>

634
00:27:36,779 --> 00:27:43,589
so the delete example is definitely one

635
00:27:40,589 --> 00:27:45,658
of my favorites because it again shows

636
00:27:43,589 --> 00:27:48,059
the difference<font color="#CCCCCC"> between the command you</font>

637
00:27:45,659 --> 00:27:51,149
<font color="#E5E5E5">issue and what</font><font color="#CCCCCC"> actually happens in the</font>

638
00:27:48,059 --> 00:27:52,799
system and then things that you can't

639
00:27:51,149 --> 00:27:54,779
necessarily see as the user or

640
00:27:52,799 --> 00:27:57,629
understand so let's say you<font color="#CCCCCC"> decide to</font>

641
00:27:54,779 --> 00:27:59,429
delete a row in the database and this

642
00:27:57,629 --> 00:28:01,708
particular role is in<font color="#E5E5E5"> a table and there</font>

643
00:27:59,429 --> 00:28:03,659
is an index and there is<font color="#CCCCCC"> the</font><font color="#E5E5E5"> materialist</font>

644
00:28:01,709 --> 00:28:05,700
<font color="#E5E5E5">view that stores us information as well</font>

645
00:28:03,659 --> 00:28:07,979
phone number social-security number

646
00:28:05,700 --> 00:28:10,079
doesn't matter and as I<font color="#CCCCCC"> mentioned</font>

647
00:28:07,979 --> 00:28:11,820
indexes could come into<font color="#E5E5E5"> existence for</font>

648
00:28:10,079 --> 00:28:14,279
many reasons so it's sufficient to have

649
00:28:11,820 --> 00:28:16,979
a unique constraint that automatically

650
00:28:14,279 --> 00:28:19,709
creates an index so you might think<font color="#CCCCCC"> that</font>

651
00:28:16,979 --> 00:28:22,380
you should<font color="#E5E5E5"> delete and data gets deleted</font>

652
00:28:19,709 --> 00:28:24,270
or at least that maybe you

653
00:28:22,380 --> 00:28:26,910
delete command and data gets marked and

654
00:28:24,270 --> 00:28:30,210
then later purged however<font color="#E5E5E5"> that's not</font>

655
00:28:26,910 --> 00:28:33,600
what actually happens so we're tracking

656
00:28:30,210 --> 00:28:35,790
multiple steps in<font color="#E5E5E5"> a timeline initially</font>

657
00:28:33,600 --> 00:28:38,669
you load the data then you should delete

658
00:28:35,790 --> 00:28:42,870
<font color="#CCCCCC">at time one at time to you refresh the</font>

659
00:28:38,670 --> 00:28:45,930
materialist view at time<font color="#E5E5E5"> three you flush</font>

660
00:28:42,870 --> 00:28:47,820
out the contents of the memory<font color="#E5E5E5"> and a</font>

661
00:28:45,930 --> 00:28:50,100
time for<font color="#E5E5E5"> you run enough query to</font>

662
00:28:47,820 --> 00:28:52,560
<font color="#E5E5E5">overwrite the memory and then at time</font>

663
00:28:50,100 --> 00:28:55,530
five you issue a bunch<font color="#E5E5E5"> of other rebuilds</font>

664
00:28:52,560 --> 00:28:59,220
they're building the entire structure so

665
00:28:55,530 --> 00:29:01,590
let<font color="#E5E5E5"> me talk about what</font><font color="#CCCCCC"> actually happens</font>

666
00:28:59,220 --> 00:29:03,000
when you should delete so here<font color="#E5E5E5"> we are we</font>

667
00:29:01,590 --> 00:29:04,770
start with three different values this

668
00:29:03,000 --> 00:29:07,500
is the value in table this is value in

669
00:29:04,770 --> 00:29:10,020
index this is the materials you when you

670
00:29:07,500 --> 00:29:12,060
<font color="#CCCCCC">should delete first thing that happens</font>

671
00:29:10,020 --> 00:29:14,700
<font color="#CCCCCC">two more values get created nothing</font>

672
00:29:12,060 --> 00:29:17,879
nothing when this gets touched at all

673
00:29:14,700 --> 00:29:19,500
the index page gets loaded as part of

674
00:29:17,880 --> 00:29:21,870
finding the value because you need<font color="#CCCCCC"> to</font>

675
00:29:19,500 --> 00:29:23,850
find it to believe it and then the table

676
00:29:21,870 --> 00:29:26,550
page gets loaded into memory and then in

677
00:29:23,850 --> 00:29:28,740
memory gets marked<font color="#E5E5E5"> is deleted so you've</font>

678
00:29:26,550 --> 00:29:30,659
gone up to five one of which is<font color="#E5E5E5"> mark is</font>

679
00:29:28,740 --> 00:29:33,420
deleted instead of<font color="#E5E5E5"> three that's the</font>

680
00:29:30,660 --> 00:29:35,100
immediate reaction then you perform a

681
00:29:33,420 --> 00:29:37,290
refresh that brings you up to six

682
00:29:35,100 --> 00:29:39,600
because the material as you gets a copy

683
00:29:37,290 --> 00:29:41,580
of a page that has a value mark to

684
00:29:39,600 --> 00:29:43,919
delete it still different from disk

685
00:29:41,580 --> 00:29:45,840
you've now double the number of values

686
00:29:43,920 --> 00:29:48,840
by issuing the delete there is now six

687
00:29:45,840 --> 00:29:50,970
instances instead of three then you

688
00:29:48,840 --> 00:29:52,860
issue the flash command which doesn't

689
00:29:50,970 --> 00:29:55,560
actually move anything from memory it

690
00:29:52,860 --> 00:30:00,689
simply forces the memory to synchronize

691
00:29:55,560 --> 00:30:03,570
the<font color="#E5E5E5"> disk so at t3 those two values also</font>

692
00:30:00,690 --> 00:30:05,460
get markers deleted to match the memory

693
00:30:03,570 --> 00:30:08,129
the values of memories still there

694
00:30:05,460 --> 00:30:11,340
they're simply considered free space and

695
00:30:08,130 --> 00:30:13,230
you still have six values and there's

696
00:30:11,340 --> 00:30:16,169
all sorts of colorful<font color="#CCCCCC"> markup some</font>

697
00:30:13,230 --> 00:30:18,450
deleted some not so it takes a very very

698
00:30:16,170 --> 00:30:21,810
very long<font color="#CCCCCC"> time for a value to actually</font>

699
00:30:18,450 --> 00:30:23,340
go away so you would need<font color="#E5E5E5"> to rebuild you</font>

700
00:30:21,810 --> 00:30:27,360
would need<font color="#E5E5E5"> to run enough queries to free</font>

701
00:30:23,340 --> 00:30:29,790
out memory which is time for and then

702
00:30:27,360 --> 00:30:33,300
you would need<font color="#E5E5E5"> to build the structures</font>

703
00:30:29,790 --> 00:30:35,350
one way<font color="#E5E5E5"> or another because otherwise it</font>

704
00:30:33,300 --> 00:30:43,000
will pretty much<font color="#E5E5E5"> stay for sometimes</font>

705
00:30:35,350 --> 00:30:45,668
<font color="#E5E5E5">alright so a couple more examples and</font>

706
00:30:43,000 --> 00:30:49,030
<font color="#CCCCCC">then we'll have some time for questions</font>

707
00:30:45,669 --> 00:30:52,150
so<font color="#CCCCCC"> this</font><font color="#E5E5E5"> is more recent work again the</font>

708
00:30:49,030 --> 00:30:54,639
idea<font color="#CCCCCC"> is you look at the storage you look</font>

709
00:30:52,150 --> 00:30:57,490
at the log and you say something doesn't

710
00:30:54,640 --> 00:30:59,710
match you don't know why necessarily but

711
00:30:57,490 --> 00:31:01,450
you<font color="#E5E5E5"> know that either a particularly</font>

712
00:30:59,710 --> 00:31:05,140
clever database administrator or a

713
00:31:01,450 --> 00:31:06,940
hacker with too much axis has managed to

714
00:31:05,140 --> 00:31:08,830
<font color="#E5E5E5">do something that has not been reflected</font>

715
00:31:06,940 --> 00:31:10,179
to log right the system has<font color="#E5E5E5"> been</font>

716
00:31:08,830 --> 00:31:12,340
compromised<font color="#E5E5E5"> and once the</font><font color="#CCCCCC"> systems</font>

717
00:31:10,179 --> 00:31:14,020
compromised if the database hasn't

718
00:31:12,340 --> 00:31:15,459
logged it then there's<font color="#E5E5E5"> really no chance</font>

719
00:31:14,020 --> 00:31:18,220
that it's<font color="#E5E5E5"> going to protect you from this</font>

720
00:31:15,460 --> 00:31:20,320
attack because it doesn't even<font color="#E5E5E5"> know that</font>

721
00:31:18,220 --> 00:31:22,059
<font color="#E5E5E5">something's wrong so in this particular</font>

722
00:31:20,320 --> 00:31:24,039
example we have a log file with to

723
00:31:22,059 --> 00:31:26,379
delete one says delete entries for

724
00:31:24,039 --> 00:31:28,870
Chicago once as believe in Jesus start

725
00:31:26,380 --> 00:31:31,000
from Chris and then what<font color="#E5E5E5"> you can do is</font>

726
00:31:28,870 --> 00:31:33,668
and we have some algorithms in the paper

727
00:31:31,000 --> 00:31:36,280
what you can do is to match it to say

728
00:31:33,669 --> 00:31:38,860
this delete the throw that I see can

729
00:31:36,280 --> 00:31:42,549
match this delete action so for example

730
00:31:38,860 --> 00:31:45,189
<font color="#E5E5E5">Christine record record one could have</font>

731
00:31:42,549 --> 00:31:47,230
been<font color="#CCCCCC"> deleted by delete Chicago could</font>

732
00:31:45,190 --> 00:31:49,870
have been deleted<font color="#E5E5E5"> by this you don't</font>

733
00:31:47,230 --> 00:31:51,400
<font color="#CCCCCC">necessarily know and then then prefer</font>

734
00:31:49,870 --> 00:31:54,100
<font color="#E5E5E5">Christopher could have been deleted only</font>

735
00:31:51,400 --> 00:31:56,890
by<font color="#CCCCCC"> this by this matches and then record</font>

736
00:31:54,100 --> 00:32:00,100
<font color="#E5E5E5">number four there is no explaining how</font>

737
00:31:56,890 --> 00:32:01,870
it got deleted so<font color="#CCCCCC"> Randy's only</font>

738
00:32:00,100 --> 00:32:04,209
explanation is someone did something

739
00:32:01,870 --> 00:32:06,129
without logging by accident<font color="#E5E5E5"> or on</font>

740
00:32:04,210 --> 00:32:08,559
purpose but the point is something does

741
00:32:06,130 --> 00:32:11,890
match and the audit wouldn't help you

742
00:32:08,559 --> 00:32:15,399
because the log has no recollection as

743
00:32:11,890 --> 00:32:17,919
to who actually deleted row<font color="#CCCCCC"> four and you</font>

744
00:32:15,400 --> 00:32:20,830
might think<font color="#E5E5E5"> if you database</font>

745
00:32:17,919 --> 00:32:22,450
administrator<font color="#CCCCCC"> is clever enough they</font>

746
00:32:20,830 --> 00:32:24,939
could find a way<font color="#E5E5E5"> to override the data</font>

747
00:32:22,450 --> 00:32:28,120
right so obviously the deleted data

748
00:32:24,940 --> 00:32:30,760
doesn't favor there forever it is marked

749
00:32:28,120 --> 00:32:33,189
<font color="#CCCCCC">as free space and</font><font color="#E5E5E5"> as new stuff comes in</font>

750
00:32:30,760 --> 00:32:35,260
subject to<font color="#E5E5E5"> different rules and some</font>

751
00:32:33,190 --> 00:32:36,970
depending on the system it will

752
00:32:35,260 --> 00:32:41,408
eventually<font color="#E5E5E5"> get over it and buy something</font>

753
00:32:36,970 --> 00:32:43,090
<font color="#E5E5E5">new so here's another example to deal</font>

754
00:32:41,409 --> 00:32:47,200
specifically to deal with the

755
00:32:43,090 --> 00:32:49,539
particularly clever dba's so let's<font color="#E5E5E5"> say</font>

756
00:32:47,200 --> 00:32:51,220
in delete records and you had a record

757
00:32:49,539 --> 00:32:54,220
that said lamp and the furniture table

758
00:32:51,220 --> 00:32:56,049
and then you said well if I just leave

759
00:32:54,220 --> 00:32:59,200
it there then someone's going to find it

760
00:32:56,049 --> 00:33:01,600
and I'll be found<font color="#E5E5E5"> out that there is no</font>

761
00:32:59,200 --> 00:33:06,669
log record for it so you insert<font color="#CCCCCC"> the new</font>

762
00:33:01,600 --> 00:33:09,010
<font color="#E5E5E5">record with the value of dog right</font><font color="#CCCCCC"> here</font>

763
00:33:06,669 --> 00:33:11,500
and depending on database but in many

764
00:33:09,010 --> 00:33:14,860
cases the value can get overwritten

765
00:33:11,500 --> 00:33:16,600
however two problems with that first of

766
00:33:14,860 --> 00:33:19,539
<font color="#E5E5E5">all you have to match the value</font><font color="#CCCCCC"> to be</font>

767
00:33:16,600 --> 00:33:21,939
exact size if you insert dog over lamp

768
00:33:19,539 --> 00:33:23,769
there is still the letter<font color="#E5E5E5"> P right there</font>

769
00:33:21,940 --> 00:33:26,169
which you can still see in the storage

770
00:33:23,769 --> 00:33:27,610
because again nothing goes away the

771
00:33:26,169 --> 00:33:29,649
first three characters got overwritten

772
00:33:27,610 --> 00:33:31,539
but the old value is still hanging<font color="#E5E5E5"> out</font>

773
00:33:29,649 --> 00:33:33,219
<font color="#E5E5E5">there and you can at least see that</font>

774
00:33:31,539 --> 00:33:35,830
something used to be here and you<font color="#E5E5E5"> can</font>

775
00:33:33,220 --> 00:33:38,950
see a part of the value remaining on

776
00:33:35,830 --> 00:33:40,570
disk and this thing<font color="#E5E5E5"> definitely won't go</font>

777
00:33:38,950 --> 00:33:42,700
away for a while because there's<font color="#E5E5E5"> nothing</font>

778
00:33:40,570 --> 00:33:46,840
you can insert over a little<font color="#E5E5E5"> fragment of</font>

779
00:33:42,700 --> 00:33:48,909
data and<font color="#CCCCCC"> then more interestingly the</font>

780
00:33:46,840 --> 00:33:52,269
index pretty much keeps things forever

781
00:33:48,909 --> 00:33:54,220
so most of database indexes would never

782
00:33:52,269 --> 00:33:57,730
let go of value at all until<font color="#CCCCCC"> it built</font>

783
00:33:54,220 --> 00:34:01,840
<font color="#E5E5E5">I'm so in addition to this for dog you</font>

784
00:33:57,730 --> 00:34:04,149
have the record with index of<font color="#E5E5E5"> 0 and then</font>

785
00:34:01,840 --> 00:34:06,580
for record<font color="#E5E5E5"> 3 that you which used to be</font>

786
00:34:04,149 --> 00:34:09,609
here you still<font color="#E5E5E5"> have an entry on index as</font>

787
00:34:06,580 --> 00:34:11,348
well that point there and then somewhere

788
00:34:09,609 --> 00:34:14,440
else database determines that the values

789
00:34:11,349 --> 00:34:17,560
been deleted<font color="#E5E5E5"> and for this first of all</font>

790
00:34:14,440 --> 00:34:19,240
it almost never goes away that this has

791
00:34:17,560 --> 00:34:21,369
to do with how<font color="#E5E5E5"> to inductions work and</font>

792
00:34:19,239 --> 00:34:23,408
how the indexing structures operate and

793
00:34:21,369 --> 00:34:27,010
more interestingly you can't actually

794
00:34:23,409 --> 00:34:29,139
override it you can issue direct command

795
00:34:27,010 --> 00:34:31,480
against memory and you can say insert

796
00:34:29,139 --> 00:34:34,149
something into an index here that's<font color="#E5E5E5"> not</font>

797
00:34:31,480 --> 00:34:36,399
you can kind of time it for a table but

798
00:34:34,149 --> 00:34:38,918
you can't really<font color="#E5E5E5"> do this for an index so</font>

799
00:34:36,399 --> 00:34:41,290
if you look<font color="#E5E5E5"> at everything then it's</font>

800
00:34:38,918 --> 00:34:45,578
really hard to find your way around and

801
00:34:41,290 --> 00:34:47,469
what the storage could reveal about the

802
00:34:45,579 --> 00:34:50,290
database

803
00:34:47,469 --> 00:34:53,319
<font color="#CCCCCC">alright great</font><font color="#E5E5E5"> that leaves us some time</font>

804
00:34:50,290 --> 00:34:55,029
for questions so<font color="#CCCCCC"> in general we've been</font>

805
00:34:53,320 --> 00:34:58,450
working on this database carving

806
00:34:55,030 --> 00:35:01,720
solutions for a while we're pretty much

807
00:34:58,450 --> 00:35:04,450
want to<font color="#CCCCCC"> in a long run we want to build</font>

808
00:35:01,720 --> 00:35:06,250
something<font color="#E5E5E5"> that lets you ask meta queries</font>

809
00:35:04,450 --> 00:35:08,529
ask you something about the<font color="#E5E5E5"> database</font>

810
00:35:06,250 --> 00:35:10,869
even if you don't trust<font color="#E5E5E5"> the database or</font>

811
00:35:08,530 --> 00:35:12,640
its database doesn't provide this kind

812
00:35:10,869 --> 00:35:14,109
<font color="#E5E5E5">of interface if you want to know</font>

813
00:35:12,640 --> 00:35:16,180
<font color="#CCCCCC">something that's happening on the inside</font>

814
00:35:14,109 --> 00:35:18,609
you<font color="#E5E5E5"> want to be able to ask the question</font>

815
00:35:16,180 --> 00:35:20,410
and to say what<font color="#E5E5E5"> is this doing does this</font>

816
00:35:18,609 --> 00:35:23,799
match to this what's remembering what's

817
00:35:20,410 --> 00:35:26,618
being changed figure out anything that

818
00:35:23,800 --> 00:35:28,630
<font color="#E5E5E5">might be off and no assumptions because</font>

819
00:35:26,619 --> 00:35:31,210
most of the forensic and security

820
00:35:28,630 --> 00:35:33,460
approach is the TBC say well you have to

821
00:35:31,210 --> 00:35:34,960
configure your logs just so you have<font color="#E5E5E5"> to</font>

822
00:35:33,460 --> 00:35:37,420
make sure that the database has the

823
00:35:34,960 --> 00:35:39,460
security extension and then you can be

824
00:35:37,420 --> 00:35:41,980
relatively secure but of course<font color="#CCCCCC"> in</font>

825
00:35:39,460 --> 00:35:44,200
reality you run<font color="#CCCCCC"> on the system's with</font>

826
00:35:41,980 --> 00:35:46,390
<font color="#CCCCCC">whoever settings you have and we want to</font>

827
00:35:44,200 --> 00:35:50,710
just<font color="#E5E5E5"> be able to</font><font color="#CCCCCC"> come in and say what</font><font color="#E5E5E5"> is</font>

828
00:35:46,390 --> 00:35:52,598
happening here right now so<font color="#CCCCCC"> we're</font>

829
00:35:50,710 --> 00:35:55,930
definitely looking for collaborations

830
00:35:52,599 --> 00:35:57,730
and use cases because databases are

831
00:35:55,930 --> 00:36:00,640
everywhere<font color="#CCCCCC"> and we're looking for more</font>

832
00:35:57,730 --> 00:36:03,400
exciting<font color="#CCCCCC"> applications and that we could</font>

833
00:36:00,640 --> 00:36:05,200
do and we also happen to have a job

834
00:36:03,400 --> 00:36:08,200
opening in the lab except that it's not

835
00:36:05,200 --> 00:36:13,540
directly on this topic but more on

836
00:36:08,200 --> 00:36:15,490
reproducibility however still if you're

837
00:36:13,540 --> 00:36:18,250
interested<font color="#CCCCCC"> to talk to</font><font color="#E5E5E5"> me or</font><font color="#CCCCCC"> to anyone</font>

838
00:36:15,490 --> 00:36:19,660
<font color="#E5E5E5">from our group and with that</font><font color="#CCCCCC"> I think we</font>

839
00:36:18,250 --> 00:36:37,330
still have<font color="#CCCCCC"> a few</font><font color="#E5E5E5"> minutes</font><font color="#CCCCCC"> for questions</font>

840
00:36:19,660 --> 00:36:38,740
questions what's left here yeah<font color="#E5E5E5"> that's</font>

841
00:36:37,330 --> 00:36:47,830
<font color="#E5E5E5">fine</font>

842
00:36:38,740 --> 00:36:49,990
right well so so the<font color="#E5E5E5"> question was how do</font>

843
00:36:47,830 --> 00:36:51,819
you prevent evidence contamination when

844
00:36:49,990 --> 00:36:54,220
you collect the data mostly that

845
00:36:51,820 --> 00:36:56,619
<font color="#E5E5E5">duration is that if you trust the system</font>

846
00:36:54,220 --> 00:36:59,169
itself to answer<font color="#E5E5E5"> about what's in the</font>

847
00:36:56,619 --> 00:37:01,810
database then there is ZERO ways of

848
00:36:59,170 --> 00:37:03,520
knowing if it's reliable now as far<font color="#E5E5E5"> as</font>

849
00:37:01,810 --> 00:37:06,400
collecting it so<font color="#CCCCCC"> our best approach at</font>

850
00:37:03,520 --> 00:37:08,080
the moment is to there is still the

851
00:37:06,400 --> 00:37:09,340
chain physical chain of custody right

852
00:37:08,080 --> 00:37:11,500
you need<font color="#E5E5E5"> to take an image of the drive</font>

853
00:37:09,340 --> 00:37:14,470
and you need to carry it over and no one

854
00:37:11,500 --> 00:37:16,420
can tamper with<font color="#CCCCCC"> the storage and you know</font>

855
00:37:14,470 --> 00:37:18,069
the physical controls is really outside

856
00:37:16,420 --> 00:37:20,590
of<font color="#E5E5E5"> the realm of digital forensics</font>

857
00:37:18,070 --> 00:37:23,740
however what<font color="#CCCCCC"> we can do to avoid</font>

858
00:37:20,590 --> 00:37:26,710
contamination is exactly looking at the

859
00:37:23,740 --> 00:37:29,049
storage in the read-only mode so that's

860
00:37:26,710 --> 00:37:30,610
kind of<font color="#E5E5E5"> the big motivation right even if</font>

861
00:37:29,050 --> 00:37:32,710
the database could answer things and

862
00:37:30,610 --> 00:37:34,750
even<font color="#E5E5E5"> if you trusted it sensors you would</font>

863
00:37:32,710 --> 00:37:36,940
have to start<font color="#E5E5E5"> a database and once it</font>

864
00:37:34,750 --> 00:37:39,040
turns who knows what it does so what we

865
00:37:36,940 --> 00:37:41,680
want<font color="#E5E5E5"> to do is to be able to query over</font>

866
00:37:39,040 --> 00:37:43,630
storage that's mounted and read only you

867
00:37:41,680 --> 00:37:45,460
could physically disabled the ability to

868
00:37:43,630 --> 00:37:46,900
write and we would<font color="#E5E5E5"> just answer things</font>

869
00:37:45,460 --> 00:37:49,300
about storage because we're just<font color="#E5E5E5"> looking</font>

870
00:37:46,900 --> 00:37:51,040
from the outside independently right so

871
00:37:49,300 --> 00:37:53,440
this way as long<font color="#E5E5E5"> as you can tell me</font><font color="#CCCCCC"> that</font>

872
00:37:51,040 --> 00:37:55,420
no one changed the drive and as long<font color="#E5E5E5"> as</font>

873
00:37:53,440 --> 00:37:57,850
you can<font color="#E5E5E5"> physically flip the switch to</font>

874
00:37:55,420 --> 00:38:01,710
not let it<font color="#CCCCCC"> be modified and then we can</font>

875
00:37:57,850 --> 00:38:01,710
we know it hasn't<font color="#E5E5E5"> changed</font>

876
00:38:29,200 --> 00:38:39,399
I see so the question is how practical

877
00:38:37,750 --> 00:38:42,670
is it to stop everything<font color="#E5E5E5"> to be able to</font>

878
00:38:39,400 --> 00:38:45,160
collect evidence so obviously yeah I'm

879
00:38:42,670 --> 00:38:46,990
not<font color="#E5E5E5"> really an actual investigator so</font>

880
00:38:45,160 --> 00:38:49,480
obviously you need to come in and

881
00:38:46,990 --> 00:38:51,430
capture<font color="#E5E5E5"> the images and</font><font color="#CCCCCC"> the ideal world</font>

882
00:38:49,480 --> 00:38:53,680
someone comes<font color="#CCCCCC"> and stops</font><font color="#E5E5E5"> the servers and</font>

883
00:38:51,430 --> 00:38:55,810
images them and the<font color="#CCCCCC"> worst case</font><font color="#E5E5E5"> scenario</font>

884
00:38:53,680 --> 00:38:58,930
they come in and<font color="#E5E5E5"> take the computers but</font>

885
00:38:55,810 --> 00:39:02,230
can the physical capture part I agree

886
00:38:58,930 --> 00:39:03,910
it's inconvenient but you in order to<font color="#E5E5E5"> do</font>

887
00:39:02,230 --> 00:39:05,349
any sort of forensic analysis you would

888
00:39:03,910 --> 00:39:07,660
have to capture them as your<font color="#CCCCCC"> photo</font>

889
00:39:05,349 --> 00:39:09,430
relevant storage and<font color="#E5E5E5"> I would say it's</font>

890
00:39:07,660 --> 00:39:11,740
<font color="#CCCCCC">more of</font><font color="#E5E5E5"> a physical custody issue I think</font>

891
00:39:09,430 --> 00:39:13,839
<font color="#CCCCCC">you can shut down things and image them</font>

892
00:39:11,740 --> 00:39:19,598
on the separate read only thing and then

893
00:39:13,839 --> 00:39:21,970
presumably you can then leave but yeah

894
00:39:19,599 --> 00:39:24,430
so this<font color="#E5E5E5"> is</font><font color="#CCCCCC"> this is a good question but</font>

895
00:39:21,970 --> 00:39:26,919
somewhat orthogonal to the problem of

896
00:39:24,430 --> 00:39:28,480
performing analysis and the same

897
00:39:26,920 --> 00:39:30,190
<font color="#CCCCCC">question I'm surprised it's not a</font>

898
00:39:28,480 --> 00:39:32,500
tertiary question is what happens with

899
00:39:30,190 --> 00:39:35,650
encryption and I would say the same

900
00:39:32,500 --> 00:39:38,380
<font color="#E5E5E5">answer where you need to physically get</font>

901
00:39:35,650 --> 00:39:40,900
to the data and decrypting it is<font color="#E5E5E5"> also a</font>

902
00:39:38,380 --> 00:39:42,310
problem and then interpreting what's in

903
00:39:40,900 --> 00:39:44,589
the database and coming up with evidence

904
00:39:42,310 --> 00:39:47,078
is a<font color="#E5E5E5"> separate problem and I agree we're</font>

905
00:39:44,589 --> 00:39:49,029
not really solving the total drive

906
00:39:47,079 --> 00:39:51,069
encryption the only thing we have going

907
00:39:49,030 --> 00:39:54,430
for us is<font color="#CCCCCC"> that</font><font color="#E5E5E5"> at least at the moment</font>

908
00:39:51,069 --> 00:39:56,470
except for<font color="#CCCCCC"> most dedicated Hardware even</font>

909
00:39:54,430 --> 00:39:58,690
if you have<font color="#E5E5E5"> total encryption at the</font><font color="#CCCCCC"> disc</font>

910
00:39:56,470 --> 00:40:00,640
level any time you access<font color="#E5E5E5"> something and</font>

911
00:39:58,690 --> 00:40:04,359
move it into memory that gets decrypted

912
00:40:00,640 --> 00:40:06,279
to be processed<font color="#E5E5E5"> so if even if your whole</font>

913
00:40:04,359 --> 00:40:09,839
drive is encrypted you can see

914
00:40:06,280 --> 00:40:09,839
everything that shows up in memory

915
00:40:21,790 --> 00:40:31,600
used for what I see<font color="#E5E5E5"> yes excellent</font>

916
00:40:29,740 --> 00:40:33,100
question<font color="#E5E5E5"> the question</font><font color="#CCCCCC"> is</font><font color="#E5E5E5"> is there a CRC</font>

917
00:40:31,600 --> 00:40:35,770
checking so that interesting<font color="#CCCCCC"> or not</font>

918
00:40:33,100 --> 00:40:37,690
depends on the database in some system

919
00:40:35,770 --> 00:40:38,980
they've pretty much like in my sequel as

920
00:40:37,690 --> 00:40:41,050
far as i know you change the number of

921
00:40:38,980 --> 00:40:42,760
<font color="#E5E5E5">rows on the page with try playing with</font>

922
00:40:41,050 --> 00:40:43,990
storage then bring a little<font color="#E5E5E5"> bit you</font>

923
00:40:42,760 --> 00:40:45,490
change the number of rows on the page

924
00:40:43,990 --> 00:40:48,189
and<font color="#E5E5E5"> it just leads to</font><font color="#CCCCCC"> you a rose and</font>

925
00:40:45,490 --> 00:40:51,100
nothing happens in commercial systems

926
00:40:48,190 --> 00:40:54,820
you do have a checksum meaning that<font color="#E5E5E5"> if a</font>

927
00:40:51,100 --> 00:40:58,600
page is changed it realizes that fact

928
00:40:54,820 --> 00:41:01,240
and in the<font color="#E5E5E5"> distance equal server and in</font>

929
00:40:58,600 --> 00:41:03,250
<font color="#E5E5E5">oracle there are some tools that can let</font>

930
00:41:01,240 --> 00:41:05,200
<font color="#E5E5E5">you</font><font color="#CCCCCC"> fix it but fix it to the</font><font color="#E5E5E5"> point of</font>

931
00:41:03,250 --> 00:41:07,570
ejecting the page is not actually fixing

932
00:41:05,200 --> 00:41:10,120
it one of our goals<font color="#E5E5E5"> of course would</font><font color="#CCCCCC"> be</font>

933
00:41:07,570 --> 00:41:12,430
also to look at can you recover<font color="#E5E5E5"> fix the</font>

934
00:41:10,120 --> 00:41:15,339
data if something went wrong<font color="#CCCCCC"> best-case</font>

935
00:41:12,430 --> 00:41:17,259
scenario you would be able<font color="#E5E5E5"> to cut off in</font>

936
00:41:15,340 --> 00:41:19,210
an existing tools you can cut<font color="#CCCCCC"> off</font><font color="#E5E5E5"> the</font>

937
00:41:17,260 --> 00:41:22,720
pages were to check some doesn't match

938
00:41:19,210 --> 00:41:26,470
its storage ships then it's actually

939
00:41:22,720 --> 00:41:28,270
surprisingly easy<font color="#CCCCCC"> to bring a database to</font>

940
00:41:26,470 --> 00:41:29,740
its knees if you<font color="#E5E5E5"> change the value you</font>

941
00:41:28,270 --> 00:41:31,840
can kind of find the checksum if you

942
00:41:29,740 --> 00:41:33,279
shift their dresses that says<font color="#E5E5E5"> it's know</font>

943
00:41:31,840 --> 00:41:35,290
something is wrong but the checksum is

944
00:41:33,280 --> 00:41:37,270
the wrong place and that's<font color="#E5E5E5"> that you just</font>

945
00:41:35,290 --> 00:41:39,490
get panic messages about can start can

946
00:41:37,270 --> 00:41:41,710
find something so<font color="#CCCCCC"> you're definitely a</font>

947
00:41:39,490 --> 00:41:49,689
tempering storage is definitely

948
00:41:41,710 --> 00:41:52,020
effective<font color="#E5E5E5"> all right</font><font color="#CCCCCC"> thank you thank you</font>

949
00:41:49,690 --> 00:41:52,020
<font color="#CCCCCC">very much</font>

950
00:42:00,849 --> 00:42:13,749
fight them on like tuesday all right

951
00:42:11,019 --> 00:42:15,819
well is the 19 I think it's pretty fun

952
00:42:13,749 --> 00:42:20,348
but Mike is ok<font color="#E5E5E5"> I think as long as you</font>

953
00:42:15,819 --> 00:42:22,630
hold it<font color="#CCCCCC"> okay</font><font color="#E5E5E5"> Wow yeah I</font><font color="#CCCCCC"> try to</font><font color="#E5E5E5"> drive the</font>

954
00:42:20,349 --> 00:42:24,960
plane and then I forgot<font color="#CCCCCC"> about it and I</font>

955
00:42:22,630 --> 00:42:24,960
walked away

956
00:42:31,260 --> 00:42:34,309
[Music]

