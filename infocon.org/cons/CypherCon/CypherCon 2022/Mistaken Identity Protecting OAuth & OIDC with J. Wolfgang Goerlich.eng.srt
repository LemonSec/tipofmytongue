1
00:00:00,180 --> 00:00:03,399
[Music]

2
00:00:20,990 --> 00:00:29,238
[Music]

3
00:00:33,920 --> 00:00:36,920
okay

4
00:00:56,879 --> 00:00:59,839
oh

5
00:01:01,840 --> 00:01:03,520
thanks for joining if you're new you

6
00:01:03,520 --> 00:01:05,680
missed the first hour it was fantastic

7
00:01:05,680 --> 00:01:07,119
shame on you

8
00:01:07,119 --> 00:01:09,920
no seriously um

9
00:01:09,920 --> 00:01:12,320
this is part two so in this talk we're

10
00:01:12,320 --> 00:01:15,280
looking at is mistaken identity samuel

11
00:01:15,280 --> 00:01:17,280
oath oydc and for those of you hang out

12
00:01:17,280 --> 00:01:19,600
hey thanks for staying

13
00:01:19,600 --> 00:01:22,640
again my name is wolfgang cisco

14
00:01:22,640 --> 00:01:25,600
advisory cso work with duo

15
00:01:25,600 --> 00:01:27,439
so 2020 happened

16
00:01:27,439 --> 00:01:30,400
and i had more time in my hands

17
00:01:30,400 --> 00:01:33,840
and uh as we all did and so i had a lot

18
00:01:33,840 --> 00:01:35,520
of time to get in the lab and had a lot

19
00:01:35,520 --> 00:01:37,600
of time to get playing i started

20
00:01:37,600 --> 00:01:38,640
thinking about something i'm like you

21
00:01:38,640 --> 00:01:41,439
know what what's interesting is

22
00:01:41,439 --> 00:01:44,240
if you like plot out what people do we

23
00:01:44,240 --> 00:01:46,720
connect up we authenticate we authorize

24
00:01:46,720 --> 00:01:48,560
the user and then the user does

25
00:01:48,560 --> 00:01:49,600
something

26
00:01:49,600 --> 00:01:51,600
it turns out we've got like a lot

27
00:01:51,600 --> 00:01:53,520
on the front end of that right and we

28
00:01:53,520 --> 00:01:55,040
can do firewalls and proxies and

29
00:01:55,040 --> 00:01:56,799
everything we can do everything i talked

30
00:01:56,799 --> 00:01:58,320
about in my last talk in terms of

31
00:01:58,320 --> 00:02:00,240
identity proofing and multi-factor and

32
00:02:00,240 --> 00:02:03,200
passwordless risk-based authentication

33
00:02:03,200 --> 00:02:05,439
from an authorization perspective we can

34
00:02:05,439 --> 00:02:06,159
do

35
00:02:06,159 --> 00:02:08,160
our back in abac and segregation of

36
00:02:08,160 --> 00:02:10,318
duties uh we can do

37
00:02:10,318 --> 00:02:12,560
um you know the the risk-based

38
00:02:12,560 --> 00:02:14,879
authorization continuous model we have a

39
00:02:14,879 --> 00:02:17,120
lot of controls

40
00:02:17,120 --> 00:02:20,319
right up until the user does things

41
00:02:20,319 --> 00:02:21,840
and so if you think about this like the

42
00:02:21,840 --> 00:02:24,400
principle least trust which is do i

43
00:02:24,400 --> 00:02:26,640
trust the user to do something

44
00:02:26,640 --> 00:02:28,160
right into the principalities privilege

45
00:02:28,160 --> 00:02:29,280
which is all right now they trust you

46
00:02:29,280 --> 00:02:31,120
what can you do in the system we've got

47
00:02:31,120 --> 00:02:33,440
a ton in the beginning which is what

48
00:02:33,440 --> 00:02:35,680
that street cred talk was all about this

49
00:02:35,680 --> 00:02:38,000
talk is the next part

50
00:02:38,000 --> 00:02:40,239
because i started wondering what if i

51
00:02:40,239 --> 00:02:43,200
had batman level money

52
00:02:43,200 --> 00:02:44,640
and of course like all you guys are like

53
00:02:44,640 --> 00:02:46,560
if i had batman level money what would i

54
00:02:46,560 --> 00:02:48,319
do i'm sure i would spend it on my

55
00:02:48,319 --> 00:02:50,800
security program right right

56
00:02:50,800 --> 00:02:53,040
um probably will get the black suit the

57
00:02:53,040 --> 00:02:56,160
cowl uh probably chased down the people

58
00:02:56,160 --> 00:02:58,640
who did the ransomware and beat them up

59
00:02:58,640 --> 00:03:00,239
there would be some of that i'd want the

60
00:03:00,239 --> 00:03:02,480
cool car i would want the cool car

61
00:03:02,480 --> 00:03:04,319
if we had batman level money we could

62
00:03:04,319 --> 00:03:05,920
probably solve

63
00:03:05,920 --> 00:03:07,680
all that authentication of all that was

64
00:03:07,680 --> 00:03:09,840
solved what would happen

65
00:03:09,840 --> 00:03:12,800
and it occurred to me

66
00:03:12,800 --> 00:03:14,959
the line from

67
00:03:14,959 --> 00:03:16,480
one of the early batman movies where

68
00:03:16,480 --> 00:03:18,800
joker was like without me there'd be

69
00:03:18,800 --> 00:03:20,879
without you there'd be no me i mucked up

70
00:03:20,879 --> 00:03:22,800
the line sorry for that without you

71
00:03:22,800 --> 00:03:24,959
there'd be no me right without batman

72
00:03:24,959 --> 00:03:26,799
there's no joker without controls

73
00:03:26,799 --> 00:03:28,080
there's no adversaries and those

74
00:03:28,080 --> 00:03:29,519
controls always get better the

75
00:03:29,519 --> 00:03:31,440
adversaries always get better fishing is

76
00:03:31,440 --> 00:03:33,920
a great example of this we've had on

77
00:03:33,920 --> 00:03:36,640
nearly 25 years of fishing and uh in the

78
00:03:36,640 --> 00:03:37,840
early days

79
00:03:37,840 --> 00:03:40,480
they would put bad stuff in emails but

80
00:03:40,480 --> 00:03:42,000
we shall watch your email they're like

81
00:03:42,000 --> 00:03:44,480
haha i'll put it in a zip file like no

82
00:03:44,480 --> 00:03:47,200
you won't i will block all zip files

83
00:03:47,200 --> 00:03:49,599
like aha i will send it in iso file and

84
00:03:49,599 --> 00:03:51,120
oh by the way now windows open those

85
00:03:51,120 --> 00:03:53,280
automatically check mate you're like no

86
00:03:53,280 --> 00:03:55,360
i shall block the iso files

87
00:03:55,360 --> 00:03:57,360
it is very interesting watching those

88
00:03:57,360 --> 00:03:59,519
patterns because usually about six

89
00:03:59,519 --> 00:04:02,159
months to 12 months from the time a

90
00:04:02,159 --> 00:04:03,760
control becomes available it becomes

91
00:04:03,760 --> 00:04:05,200
widely deployed right in that type of

92
00:04:05,200 --> 00:04:08,239
window um the adversaries still keep

93
00:04:08,239 --> 00:04:10,000
using the whole technique and then it

94
00:04:10,000 --> 00:04:12,159
passes this threshold

95
00:04:12,159 --> 00:04:14,080
and once it passes that threshold in

96
00:04:14,080 --> 00:04:16,238
this case with the iso files once like i

97
00:04:16,238 --> 00:04:18,160
think the number was 40 once 40 percent

98
00:04:18,160 --> 00:04:19,519
of the organization was blocking iso

99
00:04:19,519 --> 00:04:21,680
files they just changed the img files

100
00:04:21,680 --> 00:04:23,360
and windows still opened them anyways

101
00:04:23,360 --> 00:04:24,960
and they bought them another two years

102
00:04:24,960 --> 00:04:27,520
of fishing us

103
00:04:27,600 --> 00:04:30,800
this is what jokers do

104
00:04:31,680 --> 00:04:33,040
and this is what controls do all

105
00:04:33,040 --> 00:04:34,160
controls do is they make better

106
00:04:34,160 --> 00:04:35,600
criminals

107
00:04:35,600 --> 00:04:37,680
so if we solve for that if we solve for

108
00:04:37,680 --> 00:04:38,960
that where are they going to go next

109
00:04:38,960 --> 00:04:41,199
they're going to go here so this talk is

110
00:04:41,199 --> 00:04:43,520
not about what you should do for today's

111
00:04:43,520 --> 00:04:45,520
threats this talk is about what you

112
00:04:45,520 --> 00:04:46,720
should do for the threats that we're

113
00:04:46,720 --> 00:04:48,800
going to face in 2025.

114
00:04:48,800 --> 00:04:50,000
now arguably if you're building

115
00:04:50,000 --> 00:04:51,280
applications and you have pen tests

116
00:04:51,280 --> 00:04:52,800
you're like yeah but my adversaries are

117
00:04:52,800 --> 00:04:54,160
my pen testers and they're trying to

118
00:04:54,160 --> 00:04:56,639
steal and do this now okay fine cool but

119
00:04:56,639 --> 00:04:58,080
my main point is

120
00:04:58,080 --> 00:05:00,160
right now this is plenty of

121
00:05:00,160 --> 00:05:02,080
opportunities for criminals to exploit

122
00:05:02,080 --> 00:05:03,840
terrible credentials

123
00:05:03,840 --> 00:05:04,880
um

124
00:05:04,880 --> 00:05:06,240
but this is where they're going to go as

125
00:05:06,240 --> 00:05:09,039
we get better at that

126
00:05:09,039 --> 00:05:12,479
so this talk is about saml and oauth and

127
00:05:12,479 --> 00:05:15,840
what you see um some quick scoping i am

128
00:05:15,840 --> 00:05:19,120
a cso so i will be making cso level

129
00:05:19,120 --> 00:05:20,960
statements and if you're an engineer

130
00:05:20,960 --> 00:05:22,560
you're gonna be like but that is wrong

131
00:05:22,560 --> 00:05:24,720
that is that is absolute and you can

132
00:05:24,720 --> 00:05:25,919
email me and you can tell me i'm wrong

133
00:05:25,919 --> 00:05:27,600
or when we do q a you could say you were

134
00:05:27,600 --> 00:05:29,199
wrong i'd be like great here i'll give

135
00:05:29,199 --> 00:05:30,320
you the microphone because you know it's

136
00:05:30,320 --> 00:05:32,639
better i get that i get that this is a

137
00:05:32,639 --> 00:05:33,919
blue team talk this is a security

138
00:05:33,919 --> 00:05:35,680
architecture talk this is about the apps

139
00:05:35,680 --> 00:05:38,240
we developed this is about defending

140
00:05:38,240 --> 00:05:42,000
what we are creating

141
00:05:42,320 --> 00:05:43,520
so we're going to talk through some

142
00:05:43,520 --> 00:05:46,000
mistakes

143
00:05:48,080 --> 00:05:49,360
and

144
00:05:49,360 --> 00:05:51,039
we're going to start with a basic

145
00:05:51,039 --> 00:05:52,479
question please obviously make sure that

146
00:05:52,479 --> 00:05:54,560
we're doing sso please make sure we're

147
00:05:54,560 --> 00:05:56,400
fettering your identity please make sure

148
00:05:56,400 --> 00:05:57,759
we're using the strongest possible

149
00:05:57,759 --> 00:06:00,400
security in your sas applications uh if

150
00:06:00,400 --> 00:06:01,759
you guys haven't

151
00:06:01,759 --> 00:06:03,919
i i direct you to sso tax which is a

152
00:06:03,919 --> 00:06:05,120
whole bunch of people who are charging

153
00:06:05,120 --> 00:06:07,039
way too much for sso please give those

154
00:06:07,039 --> 00:06:09,280
people grief because we need to fix this

155
00:06:09,280 --> 00:06:10,639
so we can all

156
00:06:10,639 --> 00:06:12,319
do that however

157
00:06:12,319 --> 00:06:15,360
once we do that what happens

158
00:06:15,360 --> 00:06:16,479
all right

159
00:06:16,479 --> 00:06:19,199
when we authenticate with sso

160
00:06:19,199 --> 00:06:21,840
generally we're authenticating with saml

161
00:06:21,840 --> 00:06:25,039
saml as a standard came out in 2005.

162
00:06:25,039 --> 00:06:26,479
one of the things i get asked all the

163
00:06:26,479 --> 00:06:27,919
time is wolf why isn't passwordless

164
00:06:27,919 --> 00:06:30,000
taken all over it was standardized in

165
00:06:30,000 --> 00:06:32,639
2020 i'm like well because things are

166
00:06:32,639 --> 00:06:36,240
not ssl yet and that was standardized in

167
00:06:36,240 --> 00:06:38,880
2025 or 2005.

168
00:06:38,880 --> 00:06:40,160
it takes a while for these things to

169
00:06:40,160 --> 00:06:42,800
take off all right next thing is it does

170
00:06:42,800 --> 00:06:44,800
authentication and authorization right

171
00:06:44,800 --> 00:06:45,759
does the

172
00:06:45,759 --> 00:06:47,680
least trust and least privilege all that

173
00:06:47,680 --> 00:06:50,560
in one it relies in xml

174
00:06:50,560 --> 00:06:51,520
now

175
00:06:51,520 --> 00:06:54,880
why well because xml is really cool in

176
00:06:54,880 --> 00:06:58,400
the 2000s and we put xml everywhere

177
00:06:58,400 --> 00:07:00,720
we have since learned our lesson in the

178
00:07:00,720 --> 00:07:03,840
2010s and 2020s we no longer do that we

179
00:07:03,840 --> 00:07:05,599
now think jason is very cool and we put

180
00:07:05,599 --> 00:07:06,960
json

181
00:07:06,960 --> 00:07:09,520
everywhere

182
00:07:09,520 --> 00:07:11,360
if you like fast forward like 20 years

183
00:07:11,360 --> 00:07:13,039
people like why the hell are they using

184
00:07:13,039 --> 00:07:14,720
json and that's something modern it's

185
00:07:14,720 --> 00:07:16,160
gonna be the same thing that was the

186
00:07:16,160 --> 00:07:18,479
cool standard so we built xml now that

187
00:07:18,479 --> 00:07:20,240
has some downstream problems which i'll

188
00:07:20,240 --> 00:07:22,479
cover in a minute security is handled by

189
00:07:22,479 --> 00:07:25,280
the browser that's a phenomenal idea

190
00:07:25,280 --> 00:07:28,960
because i totally trust most browsers

191
00:07:28,960 --> 00:07:30,560
and security on the warriors handled by

192
00:07:30,560 --> 00:07:32,479
tls or mtls i do like that we should

193
00:07:32,479 --> 00:07:34,960
encrypt all traffic everywhere uh one of

194
00:07:34,960 --> 00:07:36,479
the fundamental principles about zero

195
00:07:36,479 --> 00:07:38,639
trust and crypt traffic across all all

196
00:07:38,639 --> 00:07:42,000
areas all right how does it work

197
00:07:42,000 --> 00:07:44,160
and what do i mean by the front channel

198
00:07:44,160 --> 00:07:46,080
so the front channel

199
00:07:46,080 --> 00:07:48,879
uh is basically any data path that goes

200
00:07:48,879 --> 00:07:50,639
right through the browser so if i've got

201
00:07:50,639 --> 00:07:53,360
a user in a browser and i'm talking to a

202
00:07:53,360 --> 00:07:55,440
client app and i've got a service

203
00:07:55,440 --> 00:07:58,400
provider behind that and i've got an idp

204
00:07:58,400 --> 00:08:01,199
anything that is interceptable on the

205
00:08:01,199 --> 00:08:02,879
browser anything that's modifiable in

206
00:08:02,879 --> 00:08:04,720
the browser that's all the front channel

207
00:08:04,720 --> 00:08:06,319
and that of course is where most of your

208
00:08:06,319 --> 00:08:07,759
danger is

209
00:08:07,759 --> 00:08:10,160
these are really fun in ctfs

210
00:08:10,160 --> 00:08:12,800
crack the sandal insertion

211
00:08:12,800 --> 00:08:14,479
steal this job because it's in the

212
00:08:14,479 --> 00:08:16,000
browser and you just go and you open up

213
00:08:16,000 --> 00:08:19,440
dev tools and you download it

214
00:08:19,440 --> 00:08:21,680
now what does the flow look like for

215
00:08:21,680 --> 00:08:23,120
saml well

216
00:08:23,120 --> 00:08:25,440
user agents going to go ahead and

217
00:08:25,440 --> 00:08:26,879
connect to the service provider right

218
00:08:26,879 --> 00:08:29,280
and let me open up that application and

219
00:08:29,280 --> 00:08:30,479
i'm going to be redirected back to the

220
00:08:30,479 --> 00:08:32,880
ssl hey log in first cool let's make

221
00:08:32,880 --> 00:08:34,240
sure everything's fine

222
00:08:34,240 --> 00:08:36,240
um the ssl is going to verify credits

223
00:08:36,240 --> 00:08:38,240
and contacts of course again hopefully

224
00:08:38,240 --> 00:08:39,760
that's pastor lewis and device trust and

225
00:08:39,760 --> 00:08:40,640
everything else we've already talked

226
00:08:40,640 --> 00:08:42,880
about um and then

227
00:08:42,880 --> 00:08:45,920
with that i'm going to get a

228
00:08:45,920 --> 00:08:48,720
redirect to the service provider hey

229
00:08:48,720 --> 00:08:50,399
give me an assertion for this

230
00:08:50,399 --> 00:08:51,760
application

231
00:08:51,760 --> 00:08:53,279
that's going to be sent back here's the

232
00:08:53,279 --> 00:08:54,880
assertion take it over there and then

233
00:08:54,880 --> 00:08:56,480
the client is going to send it on to the

234
00:08:56,480 --> 00:09:00,080
target resource that's the basic flow

235
00:09:00,080 --> 00:09:02,880
pretty cool pretty easy

236
00:09:02,880 --> 00:09:04,640
a couple problems with that first again

237
00:09:04,640 --> 00:09:06,959
everything is xml everything is xml this

238
00:09:06,959 --> 00:09:09,279
is a example insertion if you want to

239
00:09:09,279 --> 00:09:11,120
play with this the easiest way to do it

240
00:09:11,120 --> 00:09:13,040
is just to get

241
00:09:13,040 --> 00:09:14,959
you know the sml plug-in for like chrome

242
00:09:14,959 --> 00:09:16,959
or whatever your browser is of choice

243
00:09:16,959 --> 00:09:19,519
and go ahead and look at that

244
00:09:19,519 --> 00:09:20,959
you can see

245
00:09:20,959 --> 00:09:24,399
that there is signing i don't know that

246
00:09:24,399 --> 00:09:27,120
color comes through

247
00:09:27,120 --> 00:09:30,240
so there's signing there's a signature

248
00:09:30,240 --> 00:09:32,240
here essentially showing the screen so

249
00:09:32,240 --> 00:09:35,279
the assertion itself is signed

250
00:09:35,279 --> 00:09:37,120
and then the

251
00:09:37,120 --> 00:09:38,560
auth statement and everything else below

252
00:09:38,560 --> 00:09:39,839
it is signed

253
00:09:39,839 --> 00:09:41,279
keep that in mind that's going to be

254
00:09:41,279 --> 00:09:43,440
that's a fun tool for later that's going

255
00:09:43,440 --> 00:09:45,760
to come back to haunt us

256
00:09:45,760 --> 00:09:49,120
again xml string in the browser

257
00:09:49,120 --> 00:09:52,320
which means again that all security is

258
00:09:52,320 --> 00:09:53,839
hanging by the string

259
00:09:53,839 --> 00:09:57,200
once we go ahead and log in

260
00:09:57,200 --> 00:09:58,880
first thing to talk about is those

261
00:09:58,880 --> 00:10:00,720
certificates

262
00:10:00,720 --> 00:10:02,480
public private keys

263
00:10:02,480 --> 00:10:03,760
generally

264
00:10:03,760 --> 00:10:05,680
generally exchanged by x.509

265
00:10:05,680 --> 00:10:07,959
certificates doesn't need to be

266
00:10:07,959 --> 00:10:10,160
exchangebacks.509 certificates just a

267
00:10:10,160 --> 00:10:12,079
convenient thing to do seems like a

268
00:10:12,079 --> 00:10:14,320
great idea

269
00:10:14,320 --> 00:10:16,240
if we've got a hold of those

270
00:10:16,240 --> 00:10:19,120
certificates we can do code signing and

271
00:10:19,120 --> 00:10:21,440
other issues

272
00:10:21,440 --> 00:10:23,440
sure sure

273
00:10:23,440 --> 00:10:26,160
also what's fun about those is

274
00:10:26,160 --> 00:10:27,680
should we

275
00:10:27,680 --> 00:10:31,040
do publicly signed certs so just a quick

276
00:10:31,040 --> 00:10:32,399
question raise your hands who thinks we

277
00:10:32,399 --> 00:10:34,720
should do publicly science hurts

278
00:10:34,720 --> 00:10:36,160
who thinks we shouldn't

279
00:10:36,160 --> 00:10:37,760
who's not going to answer because it's

280
00:10:37,760 --> 00:10:39,519
the last talk of cyphercon

281
00:10:39,519 --> 00:10:41,360
ah there's all the hands

282
00:10:41,360 --> 00:10:42,480
sweet

283
00:10:42,480 --> 00:10:44,880
there's my people all right so one of

284
00:10:44,880 --> 00:10:46,560
the things we think about is maybe we

285
00:10:46,560 --> 00:10:48,320
should do publicly signed why because

286
00:10:48,320 --> 00:10:49,760
we've been beat up again and again and

287
00:10:49,760 --> 00:10:50,720
again

288
00:10:50,720 --> 00:10:53,839
do not do self-signed certs that is the

289
00:10:53,839 --> 00:10:55,680
mark of the devil it is against

290
00:10:55,680 --> 00:10:57,440
compliance standards the compliance gods

291
00:10:57,440 --> 00:11:00,640
will smite you um if you are

292
00:11:00,640 --> 00:11:02,560
a red teamer you will take advantage of

293
00:11:02,560 --> 00:11:04,640
that to do man in the middle attacks all

294
00:11:04,640 --> 00:11:06,160
sorts of problems with self-sensors

295
00:11:06,160 --> 00:11:07,600
they're terrible however one of the

296
00:11:07,600 --> 00:11:08,880
things to remember with self-signed

297
00:11:08,880 --> 00:11:11,600
certs is we are reliant on that ca is

298
00:11:11,600 --> 00:11:14,160
the trust anchor right so publicly send

299
00:11:14,160 --> 00:11:16,959
is good because i can make sure that

300
00:11:16,959 --> 00:11:18,800
it's signed by the public ca i can

301
00:11:18,800 --> 00:11:20,079
validate the chain i can do all those

302
00:11:20,079 --> 00:11:21,279
sort of things

303
00:11:21,279 --> 00:11:23,200
saml doesn't have any of that

304
00:11:23,200 --> 00:11:26,079
saml goes is it signed or not

305
00:11:26,079 --> 00:11:29,040
that's it there's no validation back to

306
00:11:29,040 --> 00:11:30,399
aca

307
00:11:30,399 --> 00:11:32,560
so a little bit of a weakness there

308
00:11:32,560 --> 00:11:33,760
also what that means is if you're

309
00:11:33,760 --> 00:11:34,959
spending a whole bunch of time doing

310
00:11:34,959 --> 00:11:37,279
public and privately signed certs

311
00:11:37,279 --> 00:11:39,040
nowhere in the standard and arguably

312
00:11:39,040 --> 00:11:41,200
nowhere near the applications is in that

313
00:11:41,200 --> 00:11:42,800
being checked

314
00:11:42,800 --> 00:11:44,480
but hey the cert people will love you

315
00:11:44,480 --> 00:11:46,240
right your provider will be very happy

316
00:11:46,240 --> 00:11:48,959
that you're buying lots of service

317
00:11:48,959 --> 00:11:51,760
um should we expire those certs well

318
00:11:51,760 --> 00:11:53,600
yeah probably a lot of people are

319
00:11:53,600 --> 00:11:55,760
sending their search to 2038 as we all

320
00:11:55,760 --> 00:11:58,560
know 2038 is the new 2000

321
00:11:58,560 --> 00:12:00,240
that is the longest you can put a

322
00:12:00,240 --> 00:12:03,040
certain out so just sign it for 2038 not

323
00:12:03,040 --> 00:12:04,560
worry about it

324
00:12:04,560 --> 00:12:06,880
obviously much like any credential any

325
00:12:06,880 --> 00:12:08,639
secret the longer it lives the less we

326
00:12:08,639 --> 00:12:10,399
should trust it so we probably should

327
00:12:10,399 --> 00:12:13,760
rotate that on a regular basis at least

328
00:12:13,760 --> 00:12:16,240
when people leave we may have had access

329
00:12:16,240 --> 00:12:18,079
to that certificate

330
00:12:18,079 --> 00:12:19,279
but how many people are doing that with

331
00:12:19,279 --> 00:12:21,839
samuel like oh my t people just

332
00:12:21,839 --> 00:12:22,839
were in the middle of the great

333
00:12:22,839 --> 00:12:24,800
resignation okay

334
00:12:24,800 --> 00:12:25,600
great

335
00:12:25,600 --> 00:12:27,200
um where did they go oh they went

336
00:12:27,200 --> 00:12:29,200
somewhere else okay um did they take

337
00:12:29,200 --> 00:12:30,959
anything with us no absolutely not did

338
00:12:30,959 --> 00:12:33,360
you check uh sure

339
00:12:33,360 --> 00:12:35,040
how did you check with the lp okay

340
00:12:35,040 --> 00:12:37,040
that's great does the dop check with

341
00:12:37,040 --> 00:12:39,839
certs or creds

342
00:12:40,000 --> 00:12:41,839
yeah uh yeah it totally does i'm sure it

343
00:12:41,839 --> 00:12:43,680
does

344
00:12:43,680 --> 00:12:44,560
right

345
00:12:44,560 --> 00:12:46,720
right so we need a pad to go ahead and

346
00:12:46,720 --> 00:12:50,399
do some rotation in there

347
00:12:50,959 --> 00:12:52,480
and we also need to make sure of course

348
00:12:52,480 --> 00:12:55,040
that uh

349
00:12:55,040 --> 00:12:58,880
if the search signing doesn't pass

350
00:12:58,880 --> 00:13:00,560
right what happens if i send a bad

351
00:13:00,560 --> 00:13:02,959
assertion does it get discarded it

352
00:13:02,959 --> 00:13:04,160
should be

353
00:13:04,160 --> 00:13:06,560
um does the developers still accept it

354
00:13:06,560 --> 00:13:07,920
anyways

355
00:13:07,920 --> 00:13:09,600
we've seen that

356
00:13:09,600 --> 00:13:11,440
oftentimes developers are really focused

357
00:13:11,440 --> 00:13:13,040
on making things work which i love them

358
00:13:13,040 --> 00:13:15,120
for that is great what that means is if

359
00:13:15,120 --> 00:13:17,440
then try else right and the trials is

360
00:13:17,440 --> 00:13:19,920
like okay well that didn't work so i

361
00:13:19,920 --> 00:13:23,040
guess we're good because it's signed

362
00:13:23,040 --> 00:13:25,120
what what so we want to make sure that

363
00:13:25,120 --> 00:13:27,279
they're discarding them also in part of

364
00:13:27,279 --> 00:13:28,720
discarding them we're wanting to make

365
00:13:28,720 --> 00:13:30,399
sure that they

366
00:13:30,399 --> 00:13:33,440
are actually keeping track when they're

367
00:13:33,440 --> 00:13:35,279
asserting them or rather when they're

368
00:13:35,279 --> 00:13:37,040
discarding them and hopefully forwarding

369
00:13:37,040 --> 00:13:40,399
that on into a sim or something else

370
00:13:40,399 --> 00:13:42,079
all right

371
00:13:42,079 --> 00:13:44,399
back to

372
00:13:44,399 --> 00:13:45,760
the

373
00:13:45,760 --> 00:13:46,800
uh

374
00:13:46,800 --> 00:13:49,120
back to the affected xml

375
00:13:49,120 --> 00:13:50,480
all right

376
00:13:50,480 --> 00:13:52,800
with xml

377
00:13:52,800 --> 00:13:56,079
xml being a fantastic thing that it is

378
00:13:56,079 --> 00:13:57,920
that signing is actually handled by a

379
00:13:57,920 --> 00:14:00,240
parser xmld6 and this was a

380
00:14:00,240 --> 00:14:02,720
vulnerability that was discovered a

381
00:14:02,720 --> 00:14:04,639
couple years ago oh i don't see if i

382
00:14:04,639 --> 00:14:06,800
have it down here

383
00:14:06,800 --> 00:14:08,399
no i don't sound like i'll show you in

384
00:14:08,399 --> 00:14:09,680
just a minute

385
00:14:09,680 --> 00:14:12,560
so what's cool about xml is it's text

386
00:14:12,560 --> 00:14:14,320
and again developers are great at making

387
00:14:14,320 --> 00:14:16,959
sure things work so if that xml doesn't

388
00:14:16,959 --> 00:14:18,880
work well that's a problem we'll try and

389
00:14:18,880 --> 00:14:21,040
fix it parsers are always trying to fix

390
00:14:21,040 --> 00:14:24,399
the problems so what xml dsig does is it

391
00:14:24,399 --> 00:14:26,240
does the signature process and does that

392
00:14:26,240 --> 00:14:28,480
signature process

393
00:14:28,480 --> 00:14:30,320
after the comments so it strips out in

394
00:14:30,320 --> 00:14:31,839
the comments and then we validate

395
00:14:31,839 --> 00:14:33,760
against that makes sense right why would

396
00:14:33,760 --> 00:14:37,519
i need to comment anything in my xml

397
00:14:37,519 --> 00:14:38,959
i don't need to know that comment

398
00:14:38,959 --> 00:14:40,720
probably not important we can discard

399
00:14:40,720 --> 00:14:42,079
that

400
00:14:42,079 --> 00:14:43,839
there is a vulnerability in samuel that

401
00:14:43,839 --> 00:14:45,040
actually took advantage of that which

402
00:14:45,040 --> 00:14:46,639
was pretty cool so what you would do is

403
00:14:46,639 --> 00:14:47,839
you would authenticate with your evil

404
00:14:47,839 --> 00:14:50,480
domain right like wolf at victim.com

405
00:14:50,480 --> 00:14:52,560
that's some org attacker right so i got

406
00:14:52,560 --> 00:14:54,240
my attacker and i've got my insertion

407
00:14:54,240 --> 00:14:55,920
and i've authenticated it now once i get

408
00:14:55,920 --> 00:14:57,920
to the search and i'd modify that and

409
00:14:57,920 --> 00:15:00,800
actually comment out the some attacker

410
00:15:00,800 --> 00:15:02,560
org so now i've got

411
00:15:02,560 --> 00:15:04,720
wolff at victim.com and i pass that

412
00:15:04,720 --> 00:15:07,360
assertion back in and the other reads it

413
00:15:07,360 --> 00:15:09,760
and validates that because okay

414
00:15:09,760 --> 00:15:11,680
well there's a comment here so i guess

415
00:15:11,680 --> 00:15:13,440
we'll discard that

416
00:15:13,440 --> 00:15:15,600
and suddenly

417
00:15:15,600 --> 00:15:19,360
some attacker dot com becomes victim.com

418
00:15:19,360 --> 00:15:21,120
why because it's xml based because

419
00:15:21,120 --> 00:15:22,639
that's how xml parsers work that's what

420
00:15:22,639 --> 00:15:23,600
they're designed to do they're designed

421
00:15:23,600 --> 00:15:26,800
to be very simple with text manipulation

422
00:15:26,800 --> 00:15:29,680
so we want to make sure that we are

423
00:15:29,680 --> 00:15:30,800
aware

424
00:15:30,800 --> 00:15:32,320
of all the different ways assigning can

425
00:15:32,320 --> 00:15:34,560
fail

426
00:15:35,519 --> 00:15:37,759
another interesting thing about that is

427
00:15:37,759 --> 00:15:39,759
what happens if the assertions

428
00:15:39,759 --> 00:15:40,800
signing

429
00:15:40,800 --> 00:15:43,040
and the main signing cert

430
00:15:43,040 --> 00:15:45,199
doesn't match but if the assertion

431
00:15:45,199 --> 00:15:48,000
signing is good but the the

432
00:15:48,000 --> 00:15:49,759
actual

433
00:15:49,759 --> 00:15:52,320
response setting is bad or vice versa

434
00:15:52,320 --> 00:15:54,399
in different fault paths they'll handle

435
00:15:54,399 --> 00:15:56,639
that differently there was a attack

436
00:15:56,639 --> 00:15:57,920
against shibboleth where if the

437
00:15:57,920 --> 00:15:59,040
assertion

438
00:15:59,040 --> 00:16:02,320
response was good but the actual

439
00:16:02,320 --> 00:16:04,720
uh signing itself the right the top

440
00:16:04,720 --> 00:16:06,480
signing was good the bottom signing was

441
00:16:06,480 --> 00:16:08,240
not what it would do would be like oh

442
00:16:08,240 --> 00:16:09,680
that's weird

443
00:16:09,680 --> 00:16:12,480
but you passed one pass you're in and

444
00:16:12,480 --> 00:16:14,160
then people could log in with that so

445
00:16:14,160 --> 00:16:16,399
they were obviously modifying those

446
00:16:16,399 --> 00:16:19,279
assertions with valid responses multiple

447
00:16:19,279 --> 00:16:21,040
different fault paths can happen when

448
00:16:21,040 --> 00:16:22,800
we've got multiple different signatures

449
00:16:22,800 --> 00:16:25,040
to maintain especially with these xf

450
00:16:25,040 --> 00:16:26,880
online certificates

451
00:16:26,880 --> 00:16:28,639
and again that's assuming that we're

452
00:16:28,639 --> 00:16:30,800
doing good cert values

453
00:16:30,800 --> 00:16:32,639
which gets to the golden sample attack

454
00:16:32,639 --> 00:16:36,720
which is like my favorite of all the tax

455
00:16:36,720 --> 00:16:38,959
and i'll cover that really quickly but

456
00:16:38,959 --> 00:16:40,560
golden salmon attack i think it was

457
00:16:40,560 --> 00:16:43,199
cyber arc who discovered this um as a

458
00:16:43,199 --> 00:16:45,680
attack vector and then of course it was

459
00:16:45,680 --> 00:16:47,519
used in the

460
00:16:47,519 --> 00:16:51,440
um solarwinds attack basically very cool

461
00:16:51,440 --> 00:16:53,440
certain ssl

462
00:16:53,440 --> 00:16:55,199
sites

463
00:16:55,199 --> 00:16:57,839
maybe like the ones

464
00:16:57,839 --> 00:16:59,600
by companies that start with the letter

465
00:16:59,600 --> 00:17:01,680
m

466
00:17:01,680 --> 00:17:03,680
allow you to export those certs and

467
00:17:03,680 --> 00:17:05,199
don't really have good controls of those

468
00:17:05,199 --> 00:17:06,240
okay that

469
00:17:06,240 --> 00:17:07,839
that probably shouldn't happen but no

470
00:17:07,839 --> 00:17:09,520
one's going to do that unless of course

471
00:17:09,520 --> 00:17:11,280
you have admin credentials and once you

472
00:17:11,280 --> 00:17:12,880
export it and have this cert what can

473
00:17:12,880 --> 00:17:14,880
you do again it's just an xml file so

474
00:17:14,880 --> 00:17:16,559
you can just keep printing your own

475
00:17:16,559 --> 00:17:18,400
assertions and signing them and logging

476
00:17:18,400 --> 00:17:20,319
into everything so golden samuel ticket

477
00:17:20,319 --> 00:17:23,039
is effectively getting a hold of adfs's

478
00:17:23,039 --> 00:17:25,359
uh cert and then signing all your

479
00:17:25,359 --> 00:17:27,359
assertions and having full access to

480
00:17:27,359 --> 00:17:28,720
anything that trusts

481
00:17:28,720 --> 00:17:30,720
any sample

482
00:17:30,720 --> 00:17:34,080
i like that it's good it's fun

483
00:17:34,080 --> 00:17:35,360
so basically

484
00:17:35,360 --> 00:17:38,799
certain mansion kind of important

485
00:17:38,960 --> 00:17:41,679
um that is

486
00:17:41,679 --> 00:17:44,080
saml very very briefly there are some

487
00:17:44,080 --> 00:17:45,520
links if you want to take a look at that

488
00:17:45,520 --> 00:17:48,160
but that really set the ground for what

489
00:17:48,160 --> 00:17:49,440
we faced

490
00:17:49,440 --> 00:17:51,919
with oauth and oidc right there's lots

491
00:17:51,919 --> 00:17:53,679
of different mistakes in the saml

492
00:17:53,679 --> 00:17:55,840
protocol that we learned from trusting

493
00:17:55,840 --> 00:17:58,240
the front channel being one of them

494
00:17:58,240 --> 00:18:01,840
not having good uh signing mechanisms

495
00:18:01,840 --> 00:18:03,840
for the response and insertions

496
00:18:03,840 --> 00:18:06,799
not having checks by the idp not

497
00:18:06,799 --> 00:18:08,720
rotating keys

498
00:18:08,720 --> 00:18:10,640
and any problems with any compromised

499
00:18:10,640 --> 00:18:12,559
xml libraries all those things stripped

500
00:18:12,559 --> 00:18:13,760
us up

501
00:18:13,760 --> 00:18:17,039
so with that with those mistakes rick

502
00:18:17,039 --> 00:18:18,160
hey cool

503
00:18:18,160 --> 00:18:20,000
let's do it again

504
00:18:20,000 --> 00:18:22,160
and so we started with oauth 2.0 so all

505
00:18:22,160 --> 00:18:24,960
2.0 published in 2012

506
00:18:24,960 --> 00:18:26,640
several years after sam all

507
00:18:26,640 --> 00:18:28,720
authorization framework only so

508
00:18:28,720 --> 00:18:32,160
originally owath was like cool

509
00:18:32,160 --> 00:18:33,679
twitter is fun

510
00:18:33,679 --> 00:18:36,559
uh no one would ever want to buy it and

511
00:18:36,559 --> 00:18:38,400
also we're gonna let people make their

512
00:18:38,400 --> 00:18:40,400
own apps on twitter and so we want to

513
00:18:40,400 --> 00:18:42,000
authorize people to send tweets in our

514
00:18:42,000 --> 00:18:43,360
behalf and everything

515
00:18:43,360 --> 00:18:45,200
very common use case or i want to be

516
00:18:45,200 --> 00:18:46,480
able to log in from this that very

517
00:18:46,480 --> 00:18:49,760
common use case i use if then then oh if

518
00:18:49,760 --> 00:18:52,080
this than that and i want to schedule

519
00:18:52,080 --> 00:18:54,160
tweets or schedule messages so i want to

520
00:18:54,160 --> 00:18:57,120
authorize that out very common use case

521
00:18:57,120 --> 00:18:59,039
the browser's security is sometimes

522
00:18:59,039 --> 00:19:00,240
handled in the browser in the front

523
00:19:00,240 --> 00:19:02,960
channel we'll talk about those use cases

524
00:19:02,960 --> 00:19:05,120
oftentimes not and security is on the

525
00:19:05,120 --> 00:19:06,559
wire again

526
00:19:06,559 --> 00:19:08,320
we're looking at can the identity be

527
00:19:08,320 --> 00:19:10,080
trusted and what can the identity be

528
00:19:10,080 --> 00:19:13,280
doing and this is completely on the

529
00:19:13,280 --> 00:19:16,080
authorization side

530
00:19:16,080 --> 00:19:17,760
oh and

531
00:19:17,760 --> 00:19:19,520
once we're in

532
00:19:19,520 --> 00:19:21,679
we'll talk about identity tokens next

533
00:19:21,679 --> 00:19:23,760
but once we're in what's being exchanged

534
00:19:23,760 --> 00:19:26,640
is an access token

535
00:19:26,640 --> 00:19:29,120
so open id connect comes out next right

536
00:19:29,120 --> 00:19:30,799
because we were like oh this is great

537
00:19:30,799 --> 00:19:33,200
i'm going to use this for authentication

538
00:19:33,200 --> 00:19:34,559
and like but it wasn't designed for

539
00:19:34,559 --> 00:19:35,919
authentication but that doesn't matter

540
00:19:35,919 --> 00:19:37,440
i'm going to use it looks great but you

541
00:19:37,440 --> 00:19:39,200
probably shouldn't but i'm going to and

542
00:19:39,200 --> 00:19:41,039
then people would do it and there'd be

543
00:19:41,039 --> 00:19:44,000
all sorts of problems i saw a talk on

544
00:19:44,000 --> 00:19:46,760
at gerk con i think it was

545
00:19:46,760 --> 00:19:50,720
2012 or 13 which is just great he's like

546
00:19:50,720 --> 00:19:53,360
here are 16 different ways that my team

547
00:19:53,360 --> 00:19:55,679
completely owned your oauth

548
00:19:55,679 --> 00:19:58,640
roll your own authentication product and

549
00:19:58,640 --> 00:20:00,160
that is

550
00:20:00,160 --> 00:20:02,320
painfully awesome

551
00:20:02,320 --> 00:20:04,400
so we came up with open id connect you

552
00:20:04,400 --> 00:20:06,320
guys remember openid connect the old

553
00:20:06,320 --> 00:20:09,039
version this was odc 2 2 was built on

554
00:20:09,039 --> 00:20:10,240
top of

555
00:20:10,240 --> 00:20:12,080
oauth and was meant to really handle the

556
00:20:12,080 --> 00:20:14,240
authentication side and really this

557
00:20:14,240 --> 00:20:16,080
whole goal is to exchange identity

558
00:20:16,080 --> 00:20:17,919
tokens with flows i'm going to work

559
00:20:17,919 --> 00:20:19,600
through those flows in just a minute

560
00:20:19,600 --> 00:20:22,320
it's very similar to saml in that we're

561
00:20:22,320 --> 00:20:24,559
going to have a series of steps to go

562
00:20:24,559 --> 00:20:26,080
ahead and get a token and then we're

563
00:20:26,080 --> 00:20:27,360
going to use that string we're going to

564
00:20:27,360 --> 00:20:29,679
use that token to authenticate and we're

565
00:20:29,679 --> 00:20:30,799
never going to go back and check

566
00:20:30,799 --> 00:20:32,640
everything again because clearly

567
00:20:32,640 --> 00:20:36,799
everything is just fine once you log in

568
00:20:36,799 --> 00:20:37,679
all right

569
00:20:37,679 --> 00:20:40,640
identity tokens are

570
00:20:40,640 --> 00:20:43,360
used for authentication issued by a

571
00:20:43,360 --> 00:20:45,520
secured token service

572
00:20:45,520 --> 00:20:48,080
they are generally jots i'll show you

573
00:20:48,080 --> 00:20:50,000
what that looks like in a minute access

574
00:20:50,000 --> 00:20:52,880
tokens are used by

575
00:20:52,880 --> 00:20:55,200
oauth to do access requests are

576
00:20:55,200 --> 00:20:57,280
generally consumed by an api

577
00:20:57,280 --> 00:21:00,000
and hopefully hopefully those are not

578
00:21:00,000 --> 00:21:02,720
living to 2038 hopefully there's some

579
00:21:02,720 --> 00:21:04,240
sort of pattern where we're expiring

580
00:21:04,240 --> 00:21:06,480
them in a reasonable period of time so

581
00:21:06,480 --> 00:21:08,400
we've got refresh tokens to go ahead and

582
00:21:08,400 --> 00:21:11,520
get new identity and access tokens

583
00:21:11,520 --> 00:21:13,120
there's also you know reference tokens

584
00:21:13,120 --> 00:21:16,320
and stateless tokens if you're used to

585
00:21:16,320 --> 00:21:17,840
the old school like you're going to put

586
00:21:17,840 --> 00:21:19,520
a cookie on right

587
00:21:19,520 --> 00:21:21,200
that's a reference token i got a token

588
00:21:21,200 --> 00:21:22,960
i'm going to go back and hold all your

589
00:21:22,960 --> 00:21:24,960
state in the back end stateless tokens

590
00:21:24,960 --> 00:21:26,080
i'm going to hold all the state in the

591
00:21:26,080 --> 00:21:28,240
front end on that token

592
00:21:28,240 --> 00:21:30,000
why well because we want to scale and

593
00:21:30,000 --> 00:21:31,919
we're doing everything with ephemeral

594
00:21:31,919 --> 00:21:34,480
architecture

595
00:21:34,559 --> 00:21:38,080
so all this dumps back into jots or json

596
00:21:38,080 --> 00:21:39,600
web tokens

597
00:21:39,600 --> 00:21:42,720
looks something like this base64 encoded

598
00:21:42,720 --> 00:21:45,120
string again it's json because that's

599
00:21:45,120 --> 00:21:46,320
exciting

600
00:21:46,320 --> 00:21:49,600
the top header includes what the

601
00:21:49,600 --> 00:21:52,320
algorithm is how it's signed

602
00:21:52,320 --> 00:21:54,400
and then the payload includes a whole

603
00:21:54,400 --> 00:21:56,240
bunch of assertions about who i am and

604
00:21:56,240 --> 00:21:58,240
what i'm doing and what roles i should

605
00:21:58,240 --> 00:22:00,320
have in the system

606
00:22:00,320 --> 00:22:02,320
what's kind of cool is hey if i want to

607
00:22:02,320 --> 00:22:03,919
be admin i can just you know it's a

608
00:22:03,919 --> 00:22:06,000
string i just modify it

609
00:22:06,000 --> 00:22:08,640
turn just clear text why not

610
00:22:08,640 --> 00:22:10,159
so we need some sort of signing

611
00:22:10,159 --> 00:22:11,679
mechanism to make sure that we're not

612
00:22:11,679 --> 00:22:13,760
just adding roles

613
00:22:13,760 --> 00:22:15,919
or modifying it as an adversary so it

614
00:22:15,919 --> 00:22:17,840
supports a couple different algorithms

615
00:22:17,840 --> 00:22:20,880
it supports hmac and rsa obviously

616
00:22:20,880 --> 00:22:23,679
rsa or ecdsa should be the one you use

617
00:22:23,679 --> 00:22:25,679
because it's public private key pair as

618
00:22:25,679 --> 00:22:28,640
opposed to hmac which is symmetric

619
00:22:28,640 --> 00:22:30,720
also supports none

620
00:22:30,720 --> 00:22:31,600
why

621
00:22:31,600 --> 00:22:33,200
why not

622
00:22:33,200 --> 00:22:35,120
yolo

623
00:22:35,120 --> 00:22:35,840
so

624
00:22:35,840 --> 00:22:37,679
what uh what can we do here well we can

625
00:22:37,679 --> 00:22:39,280
rewrite

626
00:22:39,280 --> 00:22:41,200
and invalidate the signature that's

627
00:22:41,200 --> 00:22:42,400
usually what we're doing we're testing

628
00:22:42,400 --> 00:22:44,960
these things out that seems good well

629
00:22:44,960 --> 00:22:47,840
but wolf it's now an invalid signature

630
00:22:47,840 --> 00:22:49,600
yes he also my point earlier about

631
00:22:49,600 --> 00:22:52,960
developers almost never catching that

632
00:22:52,960 --> 00:22:54,400
here's another one maybe they're good

633
00:22:54,400 --> 00:22:55,520
they're like hey i'm going to make sure

634
00:22:55,520 --> 00:22:58,480
that that token passes signature

635
00:22:58,480 --> 00:23:00,320
good idea so i'm going to rewrite i'm

636
00:23:00,320 --> 00:23:02,240
going to set the algorithm to none like

637
00:23:02,240 --> 00:23:04,320
oh it must be none okay well

638
00:23:04,320 --> 00:23:05,679
you pass

639
00:23:05,679 --> 00:23:09,039
sweet i'm now administrator

640
00:23:09,039 --> 00:23:12,159
or if it is

641
00:23:12,159 --> 00:23:14,240
a hmac you can

642
00:23:14,240 --> 00:23:16,400
rewrite it and rewrite the signature

643
00:23:16,400 --> 00:23:18,159
that's also fun so there's a few

644
00:23:18,159 --> 00:23:21,120
different ways you can mess with us

645
00:23:21,120 --> 00:23:22,559
so what do we need to do one thing we

646
00:23:22,559 --> 00:23:23,840
need to do is make sure that your

647
00:23:23,840 --> 00:23:25,360
developers whenever they're using jots

648
00:23:25,360 --> 00:23:27,280
whenever they're using this pattern are

649
00:23:27,280 --> 00:23:30,159
using public private key pairs uh again

650
00:23:30,159 --> 00:23:31,440
protecting those public private

651
00:23:31,440 --> 00:23:33,120
preparers with everything i said about

652
00:23:33,120 --> 00:23:34,480
xaml

653
00:23:34,480 --> 00:23:37,360
and that they are looking for

654
00:23:37,360 --> 00:23:39,120
uh job signing and they're discarding

655
00:23:39,120 --> 00:23:41,440
the assess tokens

656
00:23:41,440 --> 00:23:43,279
one of the the mistakes with this is

657
00:23:43,279 --> 00:23:45,440
again if you've done a pen test or

658
00:23:45,440 --> 00:23:47,520
you've done a ctf

659
00:23:47,520 --> 00:23:49,600
you can just do this again and again and

660
00:23:49,600 --> 00:23:51,520
again and i love that i think that's

661
00:23:51,520 --> 00:23:53,840
very nice as a seesaw perspective i

662
00:23:53,840 --> 00:23:55,919
really want to fail 40 times and no one

663
00:23:55,919 --> 00:23:57,200
notice

664
00:23:57,200 --> 00:23:59,200
that is glorious

665
00:23:59,200 --> 00:24:01,600
and the 41st time i find a way in

666
00:24:01,600 --> 00:24:03,600
okay no one knows

667
00:24:03,600 --> 00:24:05,919
clearly wolf's just has problems with

668
00:24:05,919 --> 00:24:07,600
tokens yeah that's that's it that's

669
00:24:07,600 --> 00:24:08,880
exactly

670
00:24:08,880 --> 00:24:10,799
why why doesn't that get flagged why is

671
00:24:10,799 --> 00:24:12,960
not that get alert i do not understand

672
00:24:12,960 --> 00:24:14,880
that part

673
00:24:14,880 --> 00:24:17,200
there's this concept of circuit breaker

674
00:24:17,200 --> 00:24:18,799
pattern which i really like which is

675
00:24:18,799 --> 00:24:21,279
over a certain threshold you should take

676
00:24:21,279 --> 00:24:22,880
some action

677
00:24:22,880 --> 00:24:24,480
one of the first times i thought saw

678
00:24:24,480 --> 00:24:25,360
this

679
00:24:25,360 --> 00:24:27,679
was uh we were

680
00:24:27,679 --> 00:24:30,320
i was doing the blue team side of this a

681
00:24:30,320 --> 00:24:31,600
colleague of mine was doing the red team

682
00:24:31,600 --> 00:24:33,279
inside this and we set up all the

683
00:24:33,279 --> 00:24:35,360
security for the organization we're like

684
00:24:35,360 --> 00:24:36,720
all right now you're gonna come and do

685
00:24:36,720 --> 00:24:38,799
your pen test and like ha we're

686
00:24:38,799 --> 00:24:41,679
compliant we will we will not be broken

687
00:24:41,679 --> 00:24:44,640
and this poor pen tester kept coming in

688
00:24:44,640 --> 00:24:47,279
and he would just bang his head bang his

689
00:24:47,279 --> 00:24:49,279
head bang his head he was trying

690
00:24:49,279 --> 00:24:51,520
everything i mean this is great we are

691
00:24:51,520 --> 00:24:53,840
the best ever like yeah like that must

692
00:24:53,840 --> 00:24:55,760
be all the governance i provided you

693
00:24:55,760 --> 00:24:56,960
like

694
00:24:56,960 --> 00:24:58,880
yeah we'll go with that wolf like no no

695
00:24:58,880 --> 00:25:00,720
that's that's all the controls we talked

696
00:25:00,720 --> 00:25:03,039
about right like no no

697
00:25:03,039 --> 00:25:06,240
what was it they had set up nginx where

698
00:25:06,240 --> 00:25:08,240
if you went past a certain number of

699
00:25:08,240 --> 00:25:09,440
five hundreds

700
00:25:09,440 --> 00:25:11,360
and four oh four so page not found

701
00:25:11,360 --> 00:25:14,000
server error you exceeded that threshold

702
00:25:14,000 --> 00:25:16,080
it would block your ip address for 15

703
00:25:16,080 --> 00:25:16,960
minutes

704
00:25:16,960 --> 00:25:18,799
and that number kept getting higher it

705
00:25:18,799 --> 00:25:20,080
started out 15 minutes so it's just

706
00:25:20,080 --> 00:25:22,480
enough time if you're a user to go huh i

707
00:25:22,480 --> 00:25:23,840
wonder why that happened to go get some

708
00:25:23,840 --> 00:25:25,279
coffee and wander away and come back and

709
00:25:25,279 --> 00:25:27,440
use the website it's also just enough

710
00:25:27,440 --> 00:25:29,760
time if you're using sql map and

711
00:25:29,760 --> 00:25:31,440
crawling a website

712
00:25:31,440 --> 00:25:34,480
to hit those thresholds and then break

713
00:25:34,480 --> 00:25:36,640
and then he's out of the game for 15

714
00:25:36,640 --> 00:25:37,840
minutes trying to figure out what went

715
00:25:37,840 --> 00:25:38,720
wrong

716
00:25:38,720 --> 00:25:40,960
awesome awesome pattern to really

717
00:25:40,960 --> 00:25:43,120
frustrate adversaries awesome pattern

718
00:25:43,120 --> 00:25:45,120
two if you're thinking about a bot to

719
00:25:45,120 --> 00:25:46,880
get that bot to move on to the next ip

720
00:25:46,880 --> 00:25:48,799
address and move away so i love circuit

721
00:25:48,799 --> 00:25:50,480
breaker patterns here

722
00:25:50,480 --> 00:25:51,840
one additional thing i didn't mention

723
00:25:51,840 --> 00:25:54,799
was claims giving away too much info

724
00:25:54,799 --> 00:25:57,679
once you start looking at jobs

725
00:25:57,679 --> 00:25:59,760
i don't think this is one is it this is

726
00:25:59,760 --> 00:26:01,679
just my mpdrs okay

727
00:26:01,679 --> 00:26:03,360
once you start looking at jots you can

728
00:26:03,360 --> 00:26:04,720
find out all sorts of information like

729
00:26:04,720 --> 00:26:06,960
oh you're using that provider oh you're

730
00:26:06,960 --> 00:26:09,200
using that company oh this is how you

731
00:26:09,200 --> 00:26:12,640
define my role right it's fantastic if

732
00:26:12,640 --> 00:26:15,120
you want to do any sort of uh intel as

733
00:26:15,120 --> 00:26:16,799
an adversary you can get all sorts of

734
00:26:16,799 --> 00:26:18,240
stuff out of this why because stateless

735
00:26:18,240 --> 00:26:19,520
tokens which means your developers are

736
00:26:19,520 --> 00:26:21,120
cramming all sorts of stuff in this

737
00:26:21,120 --> 00:26:22,799
which probably shouldn't be there you

738
00:26:22,799 --> 00:26:24,240
probably don't want your adversaries

739
00:26:24,240 --> 00:26:25,919
knowing what you're running or your

740
00:26:25,919 --> 00:26:27,919
users to know what roles you're putting

741
00:26:27,919 --> 00:26:30,240
them in

742
00:26:30,799 --> 00:26:32,000
so

743
00:26:32,000 --> 00:26:34,240
what else what else can we do about this

744
00:26:34,240 --> 00:26:37,600
um oh flows we should talk about flows

745
00:26:37,600 --> 00:26:39,760
so we're going to talk about logging in

746
00:26:39,760 --> 00:26:41,679
getting an oitc credential and getting

747
00:26:41,679 --> 00:26:43,760
an oauth access token

748
00:26:43,760 --> 00:26:46,320
to do that we're going to be using a

749
00:26:46,320 --> 00:26:48,480
basic flow pattern so i'm going to

750
00:26:48,480 --> 00:26:50,559
go out i got my browser i've got a

751
00:26:50,559 --> 00:26:53,600
client i've got a ticket service or sts

752
00:26:53,600 --> 00:26:56,080
that's handling all our tokens

753
00:26:56,080 --> 00:26:57,840
then i got the resource server that i

754
00:26:57,840 --> 00:26:59,600
want to reach to

755
00:26:59,600 --> 00:27:01,360
so let's say that i wanted to allow zoom

756
00:27:01,360 --> 00:27:03,440
to see my facebook i don't know why i

757
00:27:03,440 --> 00:27:05,120
want to log in

758
00:27:05,120 --> 00:27:06,880
all the time through facebook so people

759
00:27:06,880 --> 00:27:08,240
can track me because that's just what i

760
00:27:08,240 --> 00:27:11,039
do it sounds fun um so i'm going to say

761
00:27:11,039 --> 00:27:13,360
yes go ahead and do that and then i'm

762
00:27:13,360 --> 00:27:14,960
going to get a pushback from it going

763
00:27:14,960 --> 00:27:16,480
hey wait a minute who are you go ahead

764
00:27:16,480 --> 00:27:18,240
and log in i'm going to be prompted to

765
00:27:18,240 --> 00:27:20,640
log in through facebook and i'm going to

766
00:27:20,640 --> 00:27:22,080
get this prompt which i'll show you in

767
00:27:22,080 --> 00:27:24,000
just a minute and i'll get a redirect

768
00:27:24,000 --> 00:27:26,000
that says okay now that you're logged in

769
00:27:26,000 --> 00:27:28,000
take that

770
00:27:28,000 --> 00:27:30,320
back to the resource

771
00:27:30,320 --> 00:27:32,640
get my token and send that token into

772
00:27:32,640 --> 00:27:34,320
the api and then i can go ahead and do

773
00:27:34,320 --> 00:27:35,200
the thing

774
00:27:35,200 --> 00:27:36,240
this effectively is called an

775
00:27:36,240 --> 00:27:37,520
authorization code grant because what

776
00:27:37,520 --> 00:27:39,440
we're exchanging is authorization code

777
00:27:39,440 --> 00:27:41,520
to go ahead and perform these steps

778
00:27:41,520 --> 00:27:43,360
it's authorization code

779
00:27:43,360 --> 00:27:44,880
i should mention there's a thing called

780
00:27:44,880 --> 00:27:47,919
the implicit flow which is basically

781
00:27:47,919 --> 00:27:50,159
that but all through the front channel

782
00:27:50,159 --> 00:27:52,880
and is terrible it's one of my if you

783
00:27:52,880 --> 00:27:55,520
want to let go on the burp suite where

784
00:27:55,520 --> 00:27:57,440
they got like some of the ctf challenges

785
00:27:57,440 --> 00:28:00,399
it's one of the ones on there and uh is

786
00:28:00,399 --> 00:28:02,559
breaking the implicit flow so again 2020

787
00:28:02,559 --> 00:28:04,960
right we all didn't have much time

788
00:28:04,960 --> 00:28:07,600
or had too much time we're in our uh

789
00:28:07,600 --> 00:28:10,320
home labs i'm doing these labs and i

790
00:28:10,320 --> 00:28:12,320
break it and i take over a blog like

791
00:28:12,320 --> 00:28:13,120
yeah

792
00:28:13,120 --> 00:28:14,880
i walk in my office oh yeah i'm like i'm

793
00:28:14,880 --> 00:28:16,480
a hacker in my house again

794
00:28:16,480 --> 00:28:18,320
that's nice what'd you do like i broke

795
00:28:18,320 --> 00:28:20,720
the implicit flow it's like

796
00:28:20,720 --> 00:28:22,159
following a cookbook which everyone else

797
00:28:22,159 --> 00:28:23,679
could do like yes

798
00:28:23,679 --> 00:28:25,200
yes i did

799
00:28:25,200 --> 00:28:27,120
because it's that easy and if i can do

800
00:28:27,120 --> 00:28:28,960
it it's terrible so

801
00:28:28,960 --> 00:28:30,640
the reason i tell you that entire thing

802
00:28:30,640 --> 00:28:31,600
is

803
00:28:31,600 --> 00:28:34,080
make sure you inventory your flows

804
00:28:34,080 --> 00:28:35,919
and make sure that your enterprise

805
00:28:35,919 --> 00:28:37,679
developers are actually

806
00:28:37,679 --> 00:28:39,919
not using implicit flows or using the

807
00:28:39,919 --> 00:28:42,320
authorization code grant or co-grant

808
00:28:42,320 --> 00:28:43,679
with

809
00:28:43,679 --> 00:28:46,559
make sure they know they have flows and

810
00:28:46,559 --> 00:28:48,159
that they know what there's

811
00:28:48,159 --> 00:28:50,080
they have if you're like hey

812
00:28:50,080 --> 00:28:51,760
do what flows are you using and they

813
00:28:51,760 --> 00:28:53,919
give you a blank look

814
00:28:53,919 --> 00:28:57,440
we know that we've started down a path

815
00:28:57,440 --> 00:28:58,720
and you can be you know wolf could

816
00:28:58,720 --> 00:29:00,880
probably break in and they'll just cry

817
00:29:00,880 --> 00:29:02,880
they'll just cry at that point

818
00:29:02,880 --> 00:29:03,679
so

819
00:29:03,679 --> 00:29:05,600
start off with that right make sure

820
00:29:05,600 --> 00:29:07,039
we're not trusting the front channels we

821
00:29:07,039 --> 00:29:08,159
know

822
00:29:08,159 --> 00:29:09,679
and make sure we've got good inventory

823
00:29:09,679 --> 00:29:11,440
of those flows

824
00:29:11,440 --> 00:29:14,799
now i want to talk a little bit about um

825
00:29:14,799 --> 00:29:17,520
what happens in that flow with the

826
00:29:17,520 --> 00:29:20,000
authorizations because i think there's

827
00:29:20,000 --> 00:29:22,080
something very interesting in that and

828
00:29:22,080 --> 00:29:23,919
i'm sort of like pointing the way to

829
00:29:23,919 --> 00:29:26,159
where i'm going to hit the baseball when

830
00:29:26,159 --> 00:29:27,760
it comes to fishing if you were in my

831
00:29:27,760 --> 00:29:29,279
earlier talk you probably heard me say

832
00:29:29,279 --> 00:29:32,159
that 502 has solved fishing forever

833
00:29:32,159 --> 00:29:34,640
and say that but what i said was what's

834
00:29:34,640 --> 00:29:37,039
interesting about 502 is

835
00:29:37,039 --> 00:29:40,720
you can prevent a url from getting a

836
00:29:40,720 --> 00:29:43,760
credential because the protocol itself

837
00:29:43,760 --> 00:29:46,640
uses that url before it exchanges

838
00:29:46,640 --> 00:29:49,440
the shared secret and therefore the old

839
00:29:49,440 --> 00:29:50,799
tricks about oh i'm going to send in a

840
00:29:50,799 --> 00:29:52,960
weird url that maybe you'll click on and

841
00:29:52,960 --> 00:29:54,480
maybe you'll think you know zoom with

842
00:29:54,480 --> 00:29:56,799
three letters is what it is those old

843
00:29:56,799 --> 00:29:59,200
tricks don't work anymore it's a really

844
00:29:59,200 --> 00:30:03,120
cool way to stop that level of fishing

845
00:30:03,120 --> 00:30:04,960
so just remember that fishing is now

846
00:30:04,960 --> 00:30:07,039
solved let's go back to our wathoid you

847
00:30:07,039 --> 00:30:10,399
see so i go ahead and i've got

848
00:30:10,399 --> 00:30:13,440
this request to say hey i want to zoom

849
00:30:13,440 --> 00:30:15,679
to see my facebook and i'm going to get

850
00:30:15,679 --> 00:30:17,760
a prompt back now this prompt

851
00:30:17,760 --> 00:30:19,039
looks like this this is called the

852
00:30:19,039 --> 00:30:21,760
authorization interface there are many

853
00:30:21,760 --> 00:30:23,679
authorization interfaces this is

854
00:30:23,679 --> 00:30:26,960
facebook's how yours looks may vary

855
00:30:26,960 --> 00:30:28,799
there's customization everything you can

856
00:30:28,799 --> 00:30:30,960
do there they identify the service which

857
00:30:30,960 --> 00:30:32,320
you can see there

858
00:30:32,320 --> 00:30:35,440
is zoom and they identify the user okay

859
00:30:35,440 --> 00:30:36,960
it's me

860
00:30:36,960 --> 00:30:38,240
and they

861
00:30:38,240 --> 00:30:40,000
specify the scope that we're trying to

862
00:30:40,000 --> 00:30:42,799
access in this case i think it's just my

863
00:30:42,799 --> 00:30:45,120
profile and picture email address i'll

864
00:30:45,120 --> 00:30:47,360
touch on the scope in just a minute now

865
00:30:47,360 --> 00:30:49,679
any people use zoom recently right we

866
00:30:49,679 --> 00:30:51,279
all use zoom pretty frequently does that

867
00:30:51,279 --> 00:30:53,600
look like the zoom logo to you

868
00:30:53,600 --> 00:30:55,840
i want to know when they set up this

869
00:30:55,840 --> 00:30:58,000
authorization interface because that is

870
00:30:58,000 --> 00:30:59,919
an old logo

871
00:30:59,919 --> 00:31:02,320
but it also made me realize

872
00:31:02,320 --> 00:31:05,279
how hard is it to find the new logo

873
00:31:05,279 --> 00:31:06,559
also

874
00:31:06,559 --> 00:31:09,120
how hard is it to create a application

875
00:31:09,120 --> 00:31:12,640
that maybe looks like zoom but isn't

876
00:31:12,640 --> 00:31:15,279
all these are like quintessential

877
00:31:15,279 --> 00:31:18,320
fishing techniques 101 incredibly easy

878
00:31:18,320 --> 00:31:20,320
to do incredibly easy to replicate to

879
00:31:20,320 --> 00:31:21,600
given someone that they're clicking on

880
00:31:21,600 --> 00:31:23,600
something it's those old tricks right to

881
00:31:23,600 --> 00:31:25,840
confuse users to authenticate

882
00:31:25,840 --> 00:31:28,080
um and authorize so you may go okay

883
00:31:28,080 --> 00:31:30,480
that's that's cool that sounds fun in

884
00:31:30,480 --> 00:31:32,159
theory but it is the only theory there

885
00:31:32,159 --> 00:31:34,000
was a google docs attack which of course

886
00:31:34,000 --> 00:31:36,000
wasn't google docs but you get an email

887
00:31:36,000 --> 00:31:37,519
and says oh

888
00:31:37,519 --> 00:31:39,600
you've got an email to google.com once

889
00:31:39,600 --> 00:31:40,880
you've got google we'll click on the

890
00:31:40,880 --> 00:31:43,120
link okay i click on the link this takes

891
00:31:43,120 --> 00:31:45,200
you through that flow and says ah gmail

892
00:31:45,200 --> 00:31:47,039
needs to see google docs and google

893
00:31:47,039 --> 00:31:49,039
analytics to see gmail so you need to

894
00:31:49,039 --> 00:31:50,640
authorize me like well it certainly

895
00:31:50,640 --> 00:31:52,960
looks like google

896
00:31:52,960 --> 00:31:55,440
i will authorize that

897
00:31:55,440 --> 00:31:57,200
and then what happened behind the scenes

898
00:31:57,200 --> 00:31:59,440
is once you authorize that that was a

899
00:31:59,440 --> 00:32:01,279
malicious endpoint which would then read

900
00:32:01,279 --> 00:32:03,120
your email and send out a bunch of

901
00:32:03,120 --> 00:32:04,799
emails saying oh by the way you got a

902
00:32:04,799 --> 00:32:07,200
google doc from your friend wolf

903
00:32:07,200 --> 00:32:08,159
very

904
00:32:08,159 --> 00:32:10,480
very annoying very quickly caught

905
00:32:10,480 --> 00:32:12,159
very easily stopped

906
00:32:12,159 --> 00:32:13,519
but it's that type of pattern i'm

907
00:32:13,519 --> 00:32:14,720
telling you is going to happen with

908
00:32:14,720 --> 00:32:16,720
these interfaces as we get better at

909
00:32:16,720 --> 00:32:19,919
stopping fishing upstream

910
00:32:21,440 --> 00:32:23,360
all right

911
00:32:23,360 --> 00:32:24,559
so

912
00:32:24,559 --> 00:32:26,080
let's talk about

913
00:32:26,080 --> 00:32:28,480
what else can go wrong here if the

914
00:32:28,480 --> 00:32:31,279
resource owner is suspicious or if the

915
00:32:31,279 --> 00:32:33,120
adversary is in the browser

916
00:32:33,120 --> 00:32:34,799
and i'm going ahead and saying hey give

917
00:32:34,799 --> 00:32:36,159
me my url

918
00:32:36,159 --> 00:32:37,760
and doing my authentication and getting

919
00:32:37,760 --> 00:32:39,440
the authorized authentication

920
00:32:39,440 --> 00:32:41,600
authorization code back because i'm

921
00:32:41,600 --> 00:32:43,440
trying to get authorization code right

922
00:32:43,440 --> 00:32:44,480
i'm going to get something that looks

923
00:32:44,480 --> 00:32:45,840
like this

924
00:32:45,840 --> 00:32:47,039
the first thing i want to talk about is

925
00:32:47,039 --> 00:32:49,519
the scope so i mentioned earlier that um

926
00:32:49,519 --> 00:32:51,840
the zoom one was scoped for for email

927
00:32:51,840 --> 00:32:53,600
and profile

928
00:32:53,600 --> 00:32:55,039
when you scope oh i just see that's

929
00:32:55,039 --> 00:32:57,440
really yet always pretty well defined

930
00:32:57,440 --> 00:32:59,760
you can do a profile email address you

931
00:32:59,760 --> 00:33:00,960
can do phone

932
00:33:00,960 --> 00:33:02,399
if you really want to give out your

933
00:33:02,399 --> 00:33:04,480
phone and encourage everyone to spam you

934
00:33:04,480 --> 00:33:06,320
you can collect all this information and

935
00:33:06,320 --> 00:33:08,320
authorize it and also the authorization

936
00:33:08,320 --> 00:33:10,399
interface is meant to be iterative so

937
00:33:10,399 --> 00:33:12,960
they can ask for it multiple times but

938
00:33:12,960 --> 00:33:14,559
there's really little control or

939
00:33:14,559 --> 00:33:17,279
customization over oac scopes

940
00:33:17,279 --> 00:33:20,480
on the other hand with oauth scopes

941
00:33:20,480 --> 00:33:23,679
it is the wild west you can do any sort

942
00:33:23,679 --> 00:33:25,360
of scope you want now

943
00:33:25,360 --> 00:33:27,519
arguably as we all know from like a

944
00:33:27,519 --> 00:33:28,880
least privileged perspective we should

945
00:33:28,880 --> 00:33:31,200
be doing something like you know

946
00:33:31,200 --> 00:33:34,159
crud based or some very specific

947
00:33:34,159 --> 00:33:36,080
authorization and there's some really

948
00:33:36,080 --> 00:33:38,080
great apis out there like i really like

949
00:33:38,080 --> 00:33:40,880
slacks how slack has defined their apis

950
00:33:40,880 --> 00:33:42,799
and what that means is if i compromise

951
00:33:42,799 --> 00:33:45,120
like um

952
00:33:45,120 --> 00:33:46,159
admin

953
00:33:46,159 --> 00:33:48,960
barriers read if i compromise

954
00:33:48,960 --> 00:33:51,440
that token i can't use it for write i

955
00:33:51,440 --> 00:33:54,000
can't use it for apps and so on so forth

956
00:33:54,000 --> 00:33:56,720
so it's very nicely cut and scoped so

957
00:33:56,720 --> 00:34:00,159
that if the blast radius of any stolen

958
00:34:00,159 --> 00:34:02,399
jot is actually limited to a specific

959
00:34:02,399 --> 00:34:04,159
scope and limited to a specific set of

960
00:34:04,159 --> 00:34:05,600
apis

961
00:34:05,600 --> 00:34:07,519
really really cool

962
00:34:07,519 --> 00:34:10,719
as you might imagine oftentimes when i'm

963
00:34:10,719 --> 00:34:11,918
being

964
00:34:11,918 --> 00:34:15,119
asked to give architectural advice

965
00:34:15,119 --> 00:34:16,639
that's not the case

966
00:34:16,639 --> 00:34:18,639
the developer's like we've got our scope

967
00:34:18,639 --> 00:34:22,239
that's great what's your scope acme co

968
00:34:22,239 --> 00:34:24,239
acme coat your entire company yes

969
00:34:24,239 --> 00:34:25,440
because it's great because then we have

970
00:34:25,440 --> 00:34:27,679
one job for everything

971
00:34:27,679 --> 00:34:29,679
that's great yeah single sign-on hurts

972
00:34:29,679 --> 00:34:30,960
fantastic

973
00:34:30,960 --> 00:34:32,800
i don't think that's single cent no it

974
00:34:32,800 --> 00:34:34,399
really is everything can get everywhere

975
00:34:34,399 --> 00:34:35,119
yes

976
00:34:35,119 --> 00:34:37,440
that i believe that last

977
00:34:37,440 --> 00:34:39,599
part i believe

978
00:34:39,599 --> 00:34:41,918
so make sure your enterprise folks in

979
00:34:41,918 --> 00:34:43,520
addition to

980
00:34:43,520 --> 00:34:46,000
uh inventorying flows are creating

981
00:34:46,000 --> 00:34:48,879
well-defined scopes another thing i want

982
00:34:48,879 --> 00:34:51,440
to touch on is this redirect

983
00:34:51,440 --> 00:34:54,079
the redirect itself

984
00:34:54,079 --> 00:34:55,918
uh is

985
00:34:55,918 --> 00:34:57,839
ostensibly pointing to the uri which

986
00:34:57,839 --> 00:34:59,440
should get that token right this is the

987
00:34:59,440 --> 00:35:02,480
end point of where that token is going

988
00:35:02,480 --> 00:35:04,880
if it is tampered with or if it is

989
00:35:04,880 --> 00:35:07,680
changed it will send the

990
00:35:07,680 --> 00:35:10,880
token to wherever that redirect says

991
00:35:10,880 --> 00:35:12,720
so to fix that what you want to do is

992
00:35:12,720 --> 00:35:15,280
make sure that your sts is enforcing

993
00:35:15,280 --> 00:35:17,359
callback urls or specific urls you're

994
00:35:17,359 --> 00:35:19,280
enforcing specific origins you're

995
00:35:19,280 --> 00:35:21,200
forcing which means your developers have

996
00:35:21,200 --> 00:35:23,760
to limit those apis to specific urls in

997
00:35:23,760 --> 00:35:25,680
specific locations

998
00:35:25,680 --> 00:35:27,760
so there's some definite work to do

999
00:35:27,760 --> 00:35:29,760
there

1000
00:35:29,760 --> 00:35:32,000
also kind of cool about that

1001
00:35:32,000 --> 00:35:33,359
um

1002
00:35:33,359 --> 00:35:35,040
you know when we think about cores and

1003
00:35:35,040 --> 00:35:36,480
urls

1004
00:35:36,480 --> 00:35:38,079
um is

1005
00:35:38,079 --> 00:35:38,880
is

1006
00:35:38,880 --> 00:35:41,119
like the golden oldies are back right

1007
00:35:41,119 --> 00:35:43,839
like open redirects and unrestricted

1008
00:35:43,839 --> 00:35:46,160
file loads just became a thing again

1009
00:35:46,160 --> 00:35:48,560
which is so exciting to me it's like

1010
00:35:48,560 --> 00:35:51,920
1990s hacking and you may think well the

1011
00:35:51,920 --> 00:35:54,079
10 textbook that's right but some of the

1012
00:35:54,079 --> 00:35:55,680
bug bounties out of facebook this is

1013
00:35:55,680 --> 00:35:57,200
exactly what happened the bug bonus on

1014
00:35:57,200 --> 00:35:58,640
facebook they figure out a way to upload

1015
00:35:58,640 --> 00:36:00,560
a file to facebook and then figure out a

1016
00:36:00,560 --> 00:36:04,320
way to use an a redirect uri to get to

1017
00:36:04,320 --> 00:36:07,040
that uh facebook page or the facebook

1018
00:36:07,040 --> 00:36:08,880
content that was uploaded and then they

1019
00:36:08,880 --> 00:36:10,960
get people to click on that link and

1020
00:36:10,960 --> 00:36:12,240
that person will click on that link and

1021
00:36:12,240 --> 00:36:13,680
it'll take your facebook token and send

1022
00:36:13,680 --> 00:36:15,440
it right on to that content that was

1023
00:36:15,440 --> 00:36:16,960
uploaded and then the person that the

1024
00:36:16,960 --> 00:36:18,800
content uploaded could go ahead and take

1025
00:36:18,800 --> 00:36:21,839
that lincoln login as you

1026
00:36:21,839 --> 00:36:22,800
so

1027
00:36:22,800 --> 00:36:24,560
definitely kind of cool because it's old

1028
00:36:24,560 --> 00:36:26,160
school hacking but definitely kind of

1029
00:36:26,160 --> 00:36:28,240
problematic so we should be putting in

1030
00:36:28,240 --> 00:36:30,079
restrictions thankfully scs and the

1031
00:36:30,079 --> 00:36:32,640
whole standard will support this again

1032
00:36:32,640 --> 00:36:36,078
if your developers are looking for it

1033
00:36:36,160 --> 00:36:37,520
all right

1034
00:36:37,520 --> 00:36:40,800
next one one more classic you know cross

1035
00:36:40,800 --> 00:36:44,240
site request forgery is back so at the

1036
00:36:44,240 --> 00:36:46,720
bottom of this we've got the state code

1037
00:36:46,720 --> 00:36:48,880
right so the way to prevent

1038
00:36:48,880 --> 00:36:51,119
cross site request forger i like i like

1039
00:36:51,119 --> 00:36:52,079
saying that i'm going to get a little

1040
00:36:52,079 --> 00:36:55,040
slap every other the way to prevent that

1041
00:36:55,040 --> 00:36:57,599
is to have a unique state such that we

1042
00:36:57,599 --> 00:36:59,760
can verify from beginning to end that

1043
00:36:59,760 --> 00:37:02,160
the request for this token is what we

1044
00:37:02,160 --> 00:37:04,320
are uh that the token is being provided

1045
00:37:04,320 --> 00:37:06,160
for valid requests and the bell request

1046
00:37:06,160 --> 00:37:07,920
is asking for a token that's the

1047
00:37:07,920 --> 00:37:10,079
anti-sea surf mechanism and the

1048
00:37:10,079 --> 00:37:12,240
authorization code flow

1049
00:37:12,240 --> 00:37:14,240
so what could go wrong with this

1050
00:37:14,240 --> 00:37:15,280
um

1051
00:37:15,280 --> 00:37:17,040
well it's

1052
00:37:17,040 --> 00:37:19,599
optional so that's a problem

1053
00:37:19,599 --> 00:37:22,000
much like not signing it doesn't have to

1054
00:37:22,000 --> 00:37:24,320
be there and sometimes it's missing

1055
00:37:24,320 --> 00:37:27,280
that's problematic it's also guessable

1056
00:37:27,280 --> 00:37:28,720
so this is one of the things i find

1057
00:37:28,720 --> 00:37:30,000
really interesting when i was doing some

1058
00:37:30,000 --> 00:37:31,440
of this early research i was reaching

1059
00:37:31,440 --> 00:37:33,040
out to all my writing friends like tell

1060
00:37:33,040 --> 00:37:35,359
me the craziest thing that you've ever

1061
00:37:35,359 --> 00:37:38,000
seen and one guy's like you wouldn't

1062
00:37:38,000 --> 00:37:39,839
believe it i looked at it and i'm like

1063
00:37:39,839 --> 00:37:42,960
that statement looks like md5

1064
00:37:42,960 --> 00:37:44,320
and i looked at the clock and i realized

1065
00:37:44,320 --> 00:37:46,000
that state looks like the

1066
00:37:46,000 --> 00:37:49,119
the md5 hash of the time stamp and then

1067
00:37:49,119 --> 00:37:51,920
i crafted a request with a couple

1068
00:37:51,920 --> 00:37:54,240
seconds earlier and i stole tokens and

1069
00:37:54,240 --> 00:37:55,760
the first time i heard that like that is

1070
00:37:55,760 --> 00:37:57,760
really clever

1071
00:37:57,760 --> 00:37:59,599
the fifth time i heard that from

1072
00:37:59,599 --> 00:38:01,359
different red teams

1073
00:38:01,359 --> 00:38:04,640
i went there is a book somewhere that's

1074
00:38:04,640 --> 00:38:05,839
teaching

1075
00:38:05,839 --> 00:38:08,240
like 101 here's how to roll your own

1076
00:38:08,240 --> 00:38:10,320
oauth that says a good way to create

1077
00:38:10,320 --> 00:38:13,440
state is doing md5 of a time stamp

1078
00:38:13,440 --> 00:38:15,280
and there's got to be because so many

1079
00:38:15,280 --> 00:38:17,200
people are making this mistake i don't

1080
00:38:17,200 --> 00:38:18,800
get it

1081
00:38:18,800 --> 00:38:21,200
all right uh it could be unvalidated it

1082
00:38:21,200 --> 00:38:23,040
doesn't have to be checked again a lot

1083
00:38:23,040 --> 00:38:24,640
of you i'm sure you're seeing the count

1084
00:38:24,640 --> 00:38:26,560
of theme here and even we get all this

1085
00:38:26,560 --> 00:38:29,520
right there's still a way to do a

1086
00:38:29,520 --> 00:38:30,720
partial

1087
00:38:30,720 --> 00:38:33,200
request where i start a request but i

1088
00:38:33,200 --> 00:38:36,000
don't finish it and therefore i've got

1089
00:38:36,000 --> 00:38:38,000
a valid authorization code if i can

1090
00:38:38,000 --> 00:38:40,000
intercept your authorization and use my

1091
00:38:40,000 --> 00:38:42,000
valid code i can go ahead and get the

1092
00:38:42,000 --> 00:38:43,520
token

1093
00:38:43,520 --> 00:38:45,040
which is why there's this thing called

1094
00:38:45,040 --> 00:38:48,480
pixie so proof key for code exchange

1095
00:38:48,480 --> 00:38:51,119
which does everything we just said but

1096
00:38:51,119 --> 00:38:54,160
ins at the this step

1097
00:38:54,160 --> 00:38:57,040
the client issues a code challenge and a

1098
00:38:57,040 --> 00:38:59,440
code verifier and the code verifier is a

1099
00:38:59,440 --> 00:39:01,200
random string the code challenge is a

1100
00:39:01,200 --> 00:39:02,560
hashed value so we're hashing that

1101
00:39:02,560 --> 00:39:04,079
random string

1102
00:39:04,079 --> 00:39:05,760
and then goes through the whole process

1103
00:39:05,760 --> 00:39:08,160
and passes that code challenge on to the

1104
00:39:08,160 --> 00:39:10,400
authorization service so the sts

1105
00:39:10,400 --> 00:39:13,440
finishes it and at the very end it sends

1106
00:39:13,440 --> 00:39:14,960
back the code verifier so we're able to

1107
00:39:14,960 --> 00:39:16,720
verify from the client to the

1108
00:39:16,720 --> 00:39:18,960
authorization service back and forth

1109
00:39:18,960 --> 00:39:21,359
that it truly is

1110
00:39:21,359 --> 00:39:22,960
one communication hasn't been

1111
00:39:22,960 --> 00:39:26,000
intercepted hasn't been modified

1112
00:39:26,000 --> 00:39:28,320
pretty cool technique just add some a

1113
00:39:28,320 --> 00:39:30,240
couple steps to the url

1114
00:39:30,240 --> 00:39:33,359
um really good anti-sea surf mechanism

1115
00:39:33,359 --> 00:39:36,160
especially if you're using like shot 256

1116
00:39:36,160 --> 00:39:38,720
for that that hash again gets the code

1117
00:39:38,720 --> 00:39:40,160
verify at the end

1118
00:39:40,160 --> 00:39:41,680
the whole point of that is make sure

1119
00:39:41,680 --> 00:39:43,839
your developers are preferably using

1120
00:39:43,839 --> 00:39:45,760
their authorization code flows

1121
00:39:45,760 --> 00:39:47,760
with pixi to minimize that type of

1122
00:39:47,760 --> 00:39:50,000
threat vector uh again it's out there

1123
00:39:50,000 --> 00:39:51,839
it's been out there for a long time it's

1124
00:39:51,839 --> 00:39:53,280
a check box

1125
00:39:53,280 --> 00:39:54,720
uh if they have an inventory and they

1126
00:39:54,720 --> 00:39:56,160
got other problems they may not realize

1127
00:39:56,160 --> 00:39:58,319
that

1128
00:39:58,880 --> 00:40:02,480
all right other mistakes

1129
00:40:03,040 --> 00:40:04,720
with jots

1130
00:40:04,720 --> 00:40:06,640
so we talked about not using state

1131
00:40:06,640 --> 00:40:08,640
guessable state we talked about not

1132
00:40:08,640 --> 00:40:10,480
checking state we talked about not using

1133
00:40:10,480 --> 00:40:12,720
pixie another thing i want to talk about

1134
00:40:12,720 --> 00:40:13,839
is

1135
00:40:13,839 --> 00:40:17,440
the time side of things

1136
00:40:18,160 --> 00:40:20,480
so when we go ahead and

1137
00:40:20,480 --> 00:40:23,359
request these tokens

1138
00:40:23,359 --> 00:40:25,520
and we're doing the thing how long does

1139
00:40:25,520 --> 00:40:26,960
that token live for

1140
00:40:26,960 --> 00:40:28,880
again hopefully it's not forever i call

1141
00:40:28,880 --> 00:40:30,480
this like the twinkie design pattern

1142
00:40:30,480 --> 00:40:31,680
where you just set it for the longest

1143
00:40:31,680 --> 00:40:33,520
number possible and you hope it never

1144
00:40:33,520 --> 00:40:34,640
expires

1145
00:40:34,640 --> 00:40:36,839
just everything's fine just give it a

1146
00:40:36,839 --> 00:40:38,560
twinkie one of the things that's

1147
00:40:38,560 --> 00:40:41,200
incredibly important to remember is you

1148
00:40:41,200 --> 00:40:43,760
know security is a basically about space

1149
00:40:43,760 --> 00:40:45,040
and time

1150
00:40:45,040 --> 00:40:47,760
right time is a security property space

1151
00:40:47,760 --> 00:40:49,280
is a security property we want the

1152
00:40:49,280 --> 00:40:51,119
adversary as far out from you as

1153
00:40:51,119 --> 00:40:52,960
possible and we want the adversary to

1154
00:40:52,960 --> 00:40:54,720
have as little time on target as

1155
00:40:54,720 --> 00:40:56,960
possible the trade-off for that is that

1156
00:40:56,960 --> 00:40:59,440
the time period is too short then of

1157
00:40:59,440 --> 00:41:00,960
course we can run into additional

1158
00:41:00,960 --> 00:41:02,560
overhead of constantly getting tickets

1159
00:41:02,560 --> 00:41:04,240
and everything else but we want to have

1160
00:41:04,240 --> 00:41:07,760
as much um

1161
00:41:07,760 --> 00:41:09,440
as much control of the time value so

1162
00:41:09,440 --> 00:41:11,040
that the adversary is as little as time

1163
00:41:11,040 --> 00:41:12,319
as possible

1164
00:41:12,319 --> 00:41:14,240
so when we're going ahead and having

1165
00:41:14,240 --> 00:41:16,480
that token eventually it should air out

1166
00:41:16,480 --> 00:41:17,760
that's a setting

1167
00:41:17,760 --> 00:41:19,920
and when it happens we'll send a client

1168
00:41:19,920 --> 00:41:23,839
id and refresh token and get one back

1169
00:41:23,839 --> 00:41:25,839
and then now with the new access token

1170
00:41:25,839 --> 00:41:27,440
keep doing things which is cool right

1171
00:41:27,440 --> 00:41:29,839
everything's cool that's great we've we

1172
00:41:29,839 --> 00:41:31,520
now have a way of refreshing and getting

1173
00:41:31,520 --> 00:41:33,760
new tokens we've got a way to make sure

1174
00:41:33,760 --> 00:41:36,640
that no one's doing anything

1175
00:41:36,640 --> 00:41:38,960
however

1176
00:41:39,119 --> 00:41:40,720
cross-set scripting

1177
00:41:40,720 --> 00:41:43,680
what happens if the adversary is able to

1178
00:41:43,680 --> 00:41:45,280
within the browser

1179
00:41:45,280 --> 00:41:47,440
get that token steal it and reuse it

1180
00:41:47,440 --> 00:41:50,160
through a cross-set scripting attack

1181
00:41:50,160 --> 00:41:50,960
so

1182
00:41:50,960 --> 00:41:53,359
we don't want to allow them to steal and

1183
00:41:53,359 --> 00:41:55,599
use a long live token easy we'll stop

1184
00:41:55,599 --> 00:41:57,599
that we also want to make sure that they

1185
00:41:57,599 --> 00:41:59,680
don't steal a refresh token and use that

1186
00:41:59,680 --> 00:42:02,160
to renew an access token the way to do

1187
00:42:02,160 --> 00:42:05,440
that is to make sure that our sts

1188
00:42:05,440 --> 00:42:07,280
is going to invalidate the entire

1189
00:42:07,280 --> 00:42:10,240
refresh chain on detecting that so if i

1190
00:42:10,240 --> 00:42:12,560
do a cross-site scripting to you and i

1191
00:42:12,560 --> 00:42:14,960
got your refresh token oh yeah both of

1192
00:42:14,960 --> 00:42:16,960
you guys so still both tokens i got two

1193
00:42:16,960 --> 00:42:17,839
of them

1194
00:42:17,839 --> 00:42:19,680
and uh and

1195
00:42:19,680 --> 00:42:22,720
i use that now to get your access token

1196
00:42:22,720 --> 00:42:24,319
eventually let's say it's 10 minutes

1197
00:42:24,319 --> 00:42:26,400
let's say i do it in minute two

1198
00:42:26,400 --> 00:42:28,319
uh eight minutes later your guys's

1199
00:42:28,319 --> 00:42:29,920
tokens are going to expire and you're

1200
00:42:29,920 --> 00:42:31,760
going to go out and get new ones

1201
00:42:31,760 --> 00:42:33,839
now the sts should track that go wait a

1202
00:42:33,839 --> 00:42:34,800
minute

1203
00:42:34,800 --> 00:42:36,480
why are they asking me for new ones i

1204
00:42:36,480 --> 00:42:40,000
just gave wolf their tokens that's odd

1205
00:42:40,000 --> 00:42:42,240
and at that point in time which goes

1206
00:42:42,240 --> 00:42:44,480
back to to having a short time on target

1207
00:42:44,480 --> 00:42:45,680
at that point in time you should be

1208
00:42:45,680 --> 00:42:46,720
logged out you should be logged out and

1209
00:42:46,720 --> 00:42:48,480
i should be logged out and that should

1210
00:42:48,480 --> 00:42:50,800
minimize how long an adversary can use

1211
00:42:50,800 --> 00:42:52,720
any of those tokens so everything in

1212
00:42:52,720 --> 00:42:54,640
that refresh token chain has to be

1213
00:42:54,640 --> 00:42:55,920
logged out

1214
00:42:55,920 --> 00:42:58,880
also again circuit pattern if someone is

1215
00:42:58,880 --> 00:43:00,560
doing that again and again and again and

1216
00:43:00,560 --> 00:43:02,160
again

1217
00:43:02,160 --> 00:43:04,720
we should detect that block that the ipa

1218
00:43:04,720 --> 00:43:07,760
layer alert that send it to the sock

1219
00:43:07,760 --> 00:43:10,400
send it in

1220
00:43:11,599 --> 00:43:13,359
what else with tokens so i talked about

1221
00:43:13,359 --> 00:43:15,040
the twinkie pattern i talked about now

1222
00:43:15,040 --> 00:43:16,720
bouncing them

1223
00:43:16,720 --> 00:43:18,000
um

1224
00:43:18,000 --> 00:43:19,920
yeah so i think we're just about done

1225
00:43:19,920 --> 00:43:23,040
here my main point about looking at this

1226
00:43:23,040 --> 00:43:24,240
like i said in the beginning is all

1227
00:43:24,240 --> 00:43:25,839
controls do is they make for better

1228
00:43:25,839 --> 00:43:28,400
criminals we've got a ton of things on

1229
00:43:28,400 --> 00:43:30,640
the front end which is great we've got

1230
00:43:30,640 --> 00:43:32,079
principalities trust we've got the

1231
00:43:32,079 --> 00:43:33,839
principalities privilege we've got

1232
00:43:33,839 --> 00:43:36,000
controls on that side but at the same

1233
00:43:36,000 --> 00:43:37,680
time adversaries continue to attack that

1234
00:43:37,680 --> 00:43:39,920
side because the reality is there's so

1235
00:43:39,920 --> 00:43:42,000
many holes in all those things

1236
00:43:42,000 --> 00:43:43,520
eventually we're going to get to this

1237
00:43:43,520 --> 00:43:46,000
great point in time

1238
00:43:46,000 --> 00:43:46,800
where

1239
00:43:46,800 --> 00:43:48,640
we can trust all that

1240
00:43:48,640 --> 00:43:50,640
and when it happens

1241
00:43:50,640 --> 00:43:52,800
what we'll be relying on what all

1242
00:43:52,800 --> 00:43:55,359
security would come down to is a string

1243
00:43:55,359 --> 00:43:57,680
either a saml xml string

1244
00:43:57,680 --> 00:44:00,400
or a json string

1245
00:44:00,400 --> 00:44:02,560
it'll all come down to a string

1246
00:44:02,560 --> 00:44:03,760
so that's why i think it's incredibly

1247
00:44:03,760 --> 00:44:05,440
important we start thinking about these

1248
00:44:05,440 --> 00:44:06,400
things

1249
00:44:06,400 --> 00:44:08,560
before we get attacked by the jokers and

1250
00:44:08,560 --> 00:44:10,400
start thinking about how we can move

1251
00:44:10,400 --> 00:44:12,079
around this do you want to screenshot

1252
00:44:12,079 --> 00:44:14,400
that sorry about that

1253
00:44:14,400 --> 00:44:17,920
i'm clicking like a madman

1254
00:44:18,319 --> 00:44:19,920
so what can we do in a process level

1255
00:44:19,920 --> 00:44:23,040
will train developers on securing saml

1256
00:44:23,040 --> 00:44:25,440
oauth the way to see

1257
00:44:25,440 --> 00:44:27,040
we already trained developers on

1258
00:44:27,040 --> 00:44:29,920
everything under the sun so i know that

1259
00:44:29,920 --> 00:44:31,599
may not move the needle much but we

1260
00:44:31,599 --> 00:44:32,640
definitely need to give them good

1261
00:44:32,640 --> 00:44:35,760
training and good patterns

1262
00:44:35,760 --> 00:44:37,440
to follow

1263
00:44:37,440 --> 00:44:39,119
that pattern side too is really

1264
00:44:39,119 --> 00:44:41,520
important i was

1265
00:44:41,520 --> 00:44:44,000
when i was a security officer

1266
00:44:44,000 --> 00:44:46,400
i had this application and we had pen

1267
00:44:46,400 --> 00:44:48,800
testers come in and pinterest would test

1268
00:44:48,800 --> 00:44:50,720
the application like how

1269
00:44:50,720 --> 00:44:53,839
we broke your authentication

1270
00:44:53,839 --> 00:44:54,640
good

1271
00:44:54,640 --> 00:44:56,880
send it to my developers they would fix

1272
00:44:56,880 --> 00:44:59,599
it and while later on i bring the pen

1273
00:44:59,599 --> 00:45:01,040
tester back and he tests a different

1274
00:45:01,040 --> 00:45:02,560
application

1275
00:45:02,560 --> 00:45:05,200
i broke your authentication

1276
00:45:05,200 --> 00:45:07,520
sent to the developer said fix it

1277
00:45:07,520 --> 00:45:08,800
while later

1278
00:45:08,800 --> 00:45:11,359
i got in my head after going about this

1279
00:45:11,359 --> 00:45:14,000
like five six times i should put that

1280
00:45:14,000 --> 00:45:16,000
code on screen and bring my developers

1281
00:45:16,000 --> 00:45:18,000
in so i had to code on screen and i was

1282
00:45:18,000 --> 00:45:20,000
ready to yell at them and my developers

1283
00:45:20,000 --> 00:45:22,160
came in they're like oh that's cool like

1284
00:45:22,160 --> 00:45:23,839
yeah you recognize it like i absolutely

1285
00:45:23,839 --> 00:45:25,680
recognize that i was thinking myself you

1286
00:45:25,680 --> 00:45:27,200
should because i've just given you six

1287
00:45:27,200 --> 00:45:29,200
different pen test reports

1288
00:45:29,200 --> 00:45:31,280
saying what's going on like where do you

1289
00:45:31,280 --> 00:45:33,119
recognize that from

1290
00:45:33,119 --> 00:45:35,520
all hostile i was

1291
00:45:35,520 --> 00:45:37,040
not enough coffee

1292
00:45:37,040 --> 00:45:39,359
and they're like oh that's a wiki and

1293
00:45:39,359 --> 00:45:40,560
like

1294
00:45:40,560 --> 00:45:42,079
it's on your wiki

1295
00:45:42,079 --> 00:45:43,680
like yeah yeah that's that's our like

1296
00:45:43,680 --> 00:45:46,240
template for starting new apps

1297
00:45:46,240 --> 00:45:48,240
wait show me and what they were doing

1298
00:45:48,240 --> 00:45:50,400
was their template for starting new apps

1299
00:45:50,400 --> 00:45:52,000
was vulnerable code that they would put

1300
00:45:52,000 --> 00:45:53,200
in place

1301
00:45:53,200 --> 00:45:54,960
and build an application and wait till i

1302
00:45:54,960 --> 00:45:57,359
did a pen test and then give a finding

1303
00:45:57,359 --> 00:45:58,880
and then they fix it

1304
00:45:58,880 --> 00:46:00,800
again and again and again we simply

1305
00:46:00,800 --> 00:46:02,160
changed the wiki page and we no longer

1306
00:46:02,160 --> 00:46:04,799
had that finding

1307
00:46:04,880 --> 00:46:07,440
so cool

1308
00:46:07,599 --> 00:46:10,079
so again i would tell you guys

1309
00:46:10,079 --> 00:46:12,240
somewhere out there

1310
00:46:12,240 --> 00:46:13,520
is a page

1311
00:46:13,520 --> 00:46:14,960
or a book

1312
00:46:14,960 --> 00:46:17,119
or a reddit finding or a reddit post

1313
00:46:17,119 --> 00:46:19,599
that says if you want a state value take

1314
00:46:19,599 --> 00:46:22,640
an md5 of your timestamp

1315
00:46:22,640 --> 00:46:24,480
we need to find that

1316
00:46:24,480 --> 00:46:26,800
and we need to end that so training

1317
00:46:26,800 --> 00:46:29,119
developers sounds great better give them

1318
00:46:29,119 --> 00:46:30,560
tools so that they've got repeatable

1319
00:46:30,560 --> 00:46:31,760
patterns

1320
00:46:31,760 --> 00:46:33,359
make sure we got good requirements on

1321
00:46:33,359 --> 00:46:35,839
this a lot of times we don't uh make

1322
00:46:35,839 --> 00:46:38,000
sure our design is taking into account

1323
00:46:38,000 --> 00:46:40,160
this from a threat modeling perspective

1324
00:46:40,160 --> 00:46:42,319
uh make sure verification including

1325
00:46:42,319 --> 00:46:45,119
often and off z on our pen testing

1326
00:46:45,119 --> 00:46:46,560
oftentimes i feel like we're not right

1327
00:46:46,560 --> 00:46:48,319
testing that side why do you why would

1328
00:46:48,319 --> 00:46:50,640
we i fish them and give me passwords i

1329
00:46:50,640 --> 00:46:51,359
mean

1330
00:46:51,359 --> 00:46:53,359
why do i need to go any further no let's

1331
00:46:53,359 --> 00:46:54,880
pretend you didn't get the passwords

1332
00:46:54,880 --> 00:46:57,760
what would you do then

1333
00:46:57,760 --> 00:46:59,680
from an architectural level

1334
00:46:59,680 --> 00:47:02,560
commercial sso and sts addresses a lot

1335
00:47:02,560 --> 00:47:04,720
of these default settings

1336
00:47:04,720 --> 00:47:07,200
you know normal advice supplies do not

1337
00:47:07,200 --> 00:47:08,640
roll your own

1338
00:47:08,640 --> 00:47:10,720
s-bom i think is really important if you

1339
00:47:10,720 --> 00:47:12,720
guys haven't looked at s-bomb use that

1340
00:47:12,720 --> 00:47:14,480
to select sds and identify any

1341
00:47:14,480 --> 00:47:17,280
vulnerabilities uh monitor a report on

1342
00:47:17,280 --> 00:47:18,880
abnormal behavior if this is happening

1343
00:47:18,880 --> 00:47:20,720
again and again and again and again and

1344
00:47:20,720 --> 00:47:21,760
again

1345
00:47:21,760 --> 00:47:22,880
find it

1346
00:47:22,880 --> 00:47:24,400
stop it

1347
00:47:24,400 --> 00:47:27,280
put in place the circuit breaker pattern

1348
00:47:27,280 --> 00:47:30,079
that is incredibly important because

1349
00:47:30,079 --> 00:47:32,160
otherwise we just have open season for

1350
00:47:32,160 --> 00:47:34,160
our adversaries and fantastic to beat it

1351
00:47:34,160 --> 00:47:35,520
up

1352
00:47:35,520 --> 00:47:37,599
all right

1353
00:47:37,599 --> 00:47:40,000
that is it from me

1354
00:47:40,000 --> 00:47:42,800
here's a qr code for the brave uh i've

1355
00:47:42,800 --> 00:47:44,319
got a couple minutes for questions if

1356
00:47:44,319 --> 00:47:46,079
anyone has anything

1357
00:47:46,079 --> 00:47:49,800
once going twice

1358
00:47:51,110 --> 00:47:52,319
[Music]

1359
00:47:52,319 --> 00:47:56,130
all right thank you so much

1360
00:47:56,130 --> 00:47:59,499
[Applause]

1361
00:48:08,079 --> 00:48:11,079
okay

1362
00:48:22,400 --> 00:48:25,640
right here

1363
00:48:28,630 --> 00:48:31,789
[Music]

1364
00:48:38,559 --> 00:48:40,640
you

