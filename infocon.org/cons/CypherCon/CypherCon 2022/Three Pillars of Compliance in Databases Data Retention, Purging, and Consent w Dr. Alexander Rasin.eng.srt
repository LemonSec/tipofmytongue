1
00:00:00,180 --> 00:00:03,399
[Music]

2
00:00:07,700 --> 00:00:10,700
thank you

3
00:00:20,990 --> 00:00:29,238
[Music]

4
00:00:37,160 --> 00:00:40,218
all right

5
00:00:47,280 --> 00:00:49,460
foreign

6
00:01:09,560 --> 00:01:12,240
University in Chicago

7
00:01:12,240 --> 00:01:14,400
and

8
00:01:14,400 --> 00:01:16,380
I'm gonna warn you right now I'm gonna

9
00:01:16,380 --> 00:01:18,320
compare to all of the cool hacks and

10
00:01:18,320 --> 00:01:22,158
applications that you see here

11
00:01:24,080 --> 00:01:27,000
25 years I don't know a while and it's

12
00:01:27,000 --> 00:01:28,920
just not that exciting like database is

13
00:01:28,920 --> 00:01:30,479
a big on the back end of the actual

14
00:01:30,479 --> 00:01:32,460
application you're using

15
00:01:32,460 --> 00:01:34,920
um so people in graphics and HDI inside

16
00:01:34,920 --> 00:01:37,200
to get through such cool preservations

17
00:01:37,200 --> 00:01:40,320
okay but we'll try to make it as fun as

18
00:01:40,320 --> 00:01:42,240
possible

19
00:01:42,240 --> 00:01:44,579
um so the specific thing that my

20
00:01:44,579 --> 00:01:46,820
research has kind of led me to

21
00:01:46,820 --> 00:01:49,140
we started out with doing a lot of

22
00:01:49,140 --> 00:01:51,360
forensic work and doing like storage or

23
00:01:51,360 --> 00:01:52,920
Construction in fact I was inside for

24
00:01:52,920 --> 00:01:55,380
cloud 2.0 talking about our forensic

25
00:01:55,380 --> 00:01:59,280
tool for databases uh but as we try to

26
00:01:59,280 --> 00:02:00,899
figure out essentially what do people

27
00:02:00,899 --> 00:02:03,299
have to do they're trying to find good

28
00:02:03,299 --> 00:02:05,700
applications for this work turns out

29
00:02:05,700 --> 00:02:06,600
that

30
00:02:06,600 --> 00:02:10,258
most people care about compliance mostly

31
00:02:10,258 --> 00:02:12,900
because they're made to care

32
00:02:12,900 --> 00:02:14,400
so in essentially you have to check the

33
00:02:14,400 --> 00:02:16,379
boxes you have to be able to show

34
00:02:16,379 --> 00:02:18,120
that you're following various rules and

35
00:02:18,120 --> 00:02:20,040
I think the everyone's favorites from

36
00:02:20,040 --> 00:02:21,360
the gdpr

37
00:02:21,360 --> 00:02:24,739
and it's equivalent ccba in California

38
00:02:24,739 --> 00:02:27,840
but in general there's a lot of policies

39
00:02:27,840 --> 00:02:29,280
and a lot of

40
00:02:29,280 --> 00:02:29,900
um

41
00:02:29,900 --> 00:02:32,940
requirements about how the data should

42
00:02:32,940 --> 00:02:34,980
be managed stored controlled processed

43
00:02:34,980 --> 00:02:37,080
and so on that might be coming from

44
00:02:37,080 --> 00:02:39,900
internal organization requirements or

45
00:02:39,900 --> 00:02:42,599
from all the fund laws and sometimes the

46
00:02:42,599 --> 00:02:44,760
preparation after above you might also

47
00:02:44,760 --> 00:02:46,560
have some custom requirements say like

48
00:02:46,560 --> 00:02:49,200
if there's a pending lawsuit you may

49
00:02:49,200 --> 00:02:50,940
have to preserve the data

50
00:02:50,940 --> 00:02:53,519
and so

51
00:02:53,519 --> 00:02:55,739
the part that interests me is kind of

52
00:02:55,739 --> 00:02:57,540
crossing the boundary within the policy

53
00:02:57,540 --> 00:02:59,519
and the actual implementation so that

54
00:02:59,519 --> 00:03:01,500
within the database where the data is

55
00:03:01,500 --> 00:03:04,319
actually kept as alarm in a second the

56
00:03:04,319 --> 00:03:06,900
policy is easy to implement because you

57
00:03:06,900 --> 00:03:09,420
kind of have this very interesting okay

58
00:03:09,420 --> 00:03:10,920
um Separation on one side you have

59
00:03:10,920 --> 00:03:12,900
people sending policy saying those are

60
00:03:12,900 --> 00:03:15,780
the rules and one of my colleagues

61
00:03:15,780 --> 00:03:18,720
um is is an attorney and so she can

62
00:03:18,720 --> 00:03:20,640
always present that type but on the

63
00:03:20,640 --> 00:03:22,739
other side you have the actual technical

64
00:03:22,739 --> 00:03:24,720
people managing the data mostly people

65
00:03:24,720 --> 00:03:27,060
like David's administrators or otherwise

66
00:03:27,060 --> 00:03:30,720
like anyone technical who

67
00:03:30,720 --> 00:03:33,000
would be happy to follow the rules but I

68
00:03:33,000 --> 00:03:35,040
don't necessarily have the right tools

69
00:03:35,040 --> 00:03:36,720
to translate

70
00:03:36,720 --> 00:03:40,799
the policy did that as well yes oh I

71
00:03:40,799 --> 00:03:42,299
should note please if you have any

72
00:03:42,299 --> 00:03:44,580
comments or questions you can just

73
00:03:44,580 --> 00:03:48,560
say it in any time and yes also yes

74
00:03:48,560 --> 00:03:50,519
is always a concern so you want

75
00:03:50,519 --> 00:03:51,720
something practical

76
00:03:51,720 --> 00:03:53,640
um and that doesn't require a lot of

77
00:03:53,640 --> 00:03:55,019
custom Solutions

78
00:03:55,019 --> 00:03:57,120
and I'm going to talk

79
00:03:57,120 --> 00:03:59,459
technically there are three pillars as

80
00:03:59,459 --> 00:04:01,680
per the title but we've made the most

81
00:04:01,680 --> 00:04:04,379
progress on their attention than purging

82
00:04:04,379 --> 00:04:06,420
um and then consent is a much shorter

83
00:04:06,420 --> 00:04:08,400
and stuff air pillar at the moment by

84
00:04:08,400 --> 00:04:12,239
this work in progress uh so

85
00:04:12,239 --> 00:04:14,580
um just as a brief definition a

86
00:04:14,580 --> 00:04:16,978
retention refers to we have a policy

87
00:04:16,978 --> 00:04:18,478
that says data must be kept for three

88
00:04:18,478 --> 00:04:20,519
years five years depending on the type

89
00:04:20,519 --> 00:04:21,959
of data like employment data or

90
00:04:21,959 --> 00:04:23,820
interview data might have to be kept for

91
00:04:23,820 --> 00:04:26,040
X number of years according to either

92
00:04:26,040 --> 00:04:28,860
lower policy or some State requirement

93
00:04:28,860 --> 00:04:30,300
who knows

94
00:04:30,300 --> 00:04:31,979
um on the other side you have purging

95
00:04:31,979 --> 00:04:34,020
that says that the data is to be

96
00:04:34,020 --> 00:04:37,560
destroyed and not retained Beyond a

97
00:04:37,560 --> 00:04:39,139
certain direction

98
00:04:39,139 --> 00:04:42,360
amen there are a lot of those rules I

99
00:04:42,360 --> 00:04:43,620
think one of my favorite it's like

100
00:04:43,620 --> 00:04:46,320
there's a lot of different laws and they

101
00:04:46,320 --> 00:04:48,479
obviously might conflict or overlap I

102
00:04:48,479 --> 00:04:51,000
think my favorite is if you look at um

103
00:04:51,000 --> 00:04:54,720
the camera data that people use for um

104
00:04:54,720 --> 00:04:56,759
like the automatic video recording that

105
00:04:56,759 --> 00:04:59,100
the police cars have those are

106
00:04:59,100 --> 00:05:00,600
particularly fun because the retention

107
00:05:00,600 --> 00:05:02,580
rules the region you're within like two

108
00:05:02,580 --> 00:05:04,380
minutes I think in Massachusetts or New

109
00:05:04,380 --> 00:05:06,479
Hampshire to like a couple of years and

110
00:05:06,479 --> 00:05:07,979
some other states so like you could

111
00:05:07,979 --> 00:05:10,680
actually for the same thing it might be

112
00:05:10,680 --> 00:05:13,560
state by state that dictates a different

113
00:05:13,560 --> 00:05:15,900
duration of how long data may be

114
00:05:15,900 --> 00:05:18,120
detained and after which one if it has

115
00:05:18,120 --> 00:05:19,979
to be destroyed

116
00:05:19,979 --> 00:05:23,280
um and then consent is something that no

117
00:05:23,280 --> 00:05:25,620
one quite understands what it is but the

118
00:05:25,620 --> 00:05:28,259
idea is that gdpr has established a rule

119
00:05:28,259 --> 00:05:30,000
requiring

120
00:05:30,000 --> 00:05:33,360
um owners of the data to have a say and

121
00:05:33,360 --> 00:05:34,919
how that data is used

122
00:05:34,919 --> 00:05:36,539
so specifically you have multiple

123
00:05:36,539 --> 00:05:38,520
purposes and

124
00:05:38,520 --> 00:05:39,979
you might

125
00:05:39,979 --> 00:05:42,539
they're obviously like if your data is

126
00:05:42,539 --> 00:05:44,880
collected as part of the purchase then

127
00:05:44,880 --> 00:05:46,919
it can be used for order processing but

128
00:05:46,919 --> 00:05:49,259
unless you explicitly request to use it

129
00:05:49,259 --> 00:05:52,680
for marketing uh it can they use cannot

130
00:05:52,680 --> 00:05:55,800
be extended nor are you even allowed to

131
00:05:55,800 --> 00:05:58,320
ask for blanket consent according to

132
00:05:58,320 --> 00:06:01,259
gdpr rules I mean I imagine eventually

133
00:06:01,259 --> 00:06:03,479
others are going to catch up I think

134
00:06:03,479 --> 00:06:06,479
CCPA in California already has

135
00:06:06,479 --> 00:06:07,860
um so

136
00:06:07,860 --> 00:06:11,100
there is extra complexity to that and

137
00:06:11,100 --> 00:06:12,539
I'll talk a little bit about it at the

138
00:06:12,539 --> 00:06:14,100
end but

139
00:06:14,100 --> 00:06:16,139
this part is the one progress so let's

140
00:06:16,139 --> 00:06:17,900
talk about

141
00:06:17,900 --> 00:06:20,940
and before I get to that I want to kind

142
00:06:20,940 --> 00:06:22,199
of motivate

143
00:06:22,199 --> 00:06:26,400
that ultimately as I'm flashing as

144
00:06:26,400 --> 00:06:29,039
databases are I would argue that they're

145
00:06:29,039 --> 00:06:31,680
always at the back end like anything any

146
00:06:31,680 --> 00:06:35,120
store anything you interact with any

147
00:06:35,120 --> 00:06:39,479
website essentially uh would have a

148
00:06:39,479 --> 00:06:41,160
database on the back end which you don't

149
00:06:41,160 --> 00:06:42,900
necessarily see of course because you're

150
00:06:42,900 --> 00:06:45,840
just dealing with a web page but

151
00:06:45,840 --> 00:06:48,300
it's there in the storing day so I'm

152
00:06:48,300 --> 00:06:50,340
approaching this part because this is my

153
00:06:50,340 --> 00:06:52,139
research area but in part because

154
00:06:52,139 --> 00:06:55,740
ultimately almost regardless of how the

155
00:06:55,740 --> 00:06:57,960
data is processed from the user

156
00:06:57,960 --> 00:07:00,180
perspective on the back end there is

157
00:07:00,180 --> 00:07:02,460
Davis that actually does that

158
00:07:02,460 --> 00:07:05,419
and

159
00:07:06,000 --> 00:07:08,280
I just never miss an opportunity to find

160
00:07:08,280 --> 00:07:09,780
some pictures just like in my classes

161
00:07:09,780 --> 00:07:11,880
but there's also a lot of like database

162
00:07:11,880 --> 00:07:15,479
means a lot of things and

163
00:07:15,479 --> 00:07:17,580
essentially

164
00:07:17,580 --> 00:07:19,740
we work with a different number of them

165
00:07:19,740 --> 00:07:21,180
there's a bunch of relational databases

166
00:07:21,180 --> 00:07:23,160
that see it supports SQL there's much of

167
00:07:23,160 --> 00:07:25,380
those SQL databases

168
00:07:25,380 --> 00:07:28,259
it's a short summary of The many systems

169
00:07:28,259 --> 00:07:30,180
you might be dealing with um

170
00:07:30,180 --> 00:07:32,400
but in general there's extra couple X in

171
00:07:32,400 --> 00:07:35,520
there and the special databases it was

172
00:07:35,520 --> 00:07:36,919
by Design

173
00:07:36,919 --> 00:07:40,500
that they take over how the data is

174
00:07:40,500 --> 00:07:43,979
managed and we've got to dig into that a

175
00:07:43,979 --> 00:07:46,020
lot whether we're doing forensic work

176
00:07:46,020 --> 00:07:47,580
because when you look at the stores

177
00:07:47,580 --> 00:07:49,319
turns out that all sorts of interesting

178
00:07:49,319 --> 00:07:50,699
things might be happening in the back

179
00:07:50,699 --> 00:07:52,560
end and

180
00:07:52,560 --> 00:07:55,080
It Is by design that the user just

181
00:07:55,080 --> 00:07:58,020
issues a SQL query and that's what I

182
00:07:58,020 --> 00:08:00,060
want to get and then the database pen

183
00:08:00,060 --> 00:08:02,520
optimizes and organizes data and creates

184
00:08:02,520 --> 00:08:06,479
copies indexes is sort of as it sees fit

185
00:08:06,479 --> 00:08:08,580
um and there is not always even any good

186
00:08:08,580 --> 00:08:10,740
way to control what exactly happens

187
00:08:10,740 --> 00:08:14,340
I'll talk about the motivation of that

188
00:08:14,340 --> 00:08:16,020
in a second

189
00:08:16,020 --> 00:08:20,520
so there is not a lot of support to to

190
00:08:20,520 --> 00:08:23,460
actually Implement data governance

191
00:08:23,460 --> 00:08:25,379
um and to be clear I differentiate

192
00:08:25,379 --> 00:08:27,840
databases from like file system or

193
00:08:27,840 --> 00:08:31,020
objects because if you're dealing with

194
00:08:31,020 --> 00:08:34,380
like files like documents then a lot of

195
00:08:34,380 --> 00:08:37,380
those policies become relatively simple

196
00:08:37,380 --> 00:08:39,179
arguably because let's say I have an

197
00:08:39,179 --> 00:08:40,860
object like a Word document with some

198
00:08:40,860 --> 00:08:42,479
information and you can just say well I

199
00:08:42,479 --> 00:08:44,580
have to keep it for a year and then it

200
00:08:44,580 --> 00:08:48,180
needs to go away and AWS object storage

201
00:08:48,180 --> 00:08:49,980
and a few other systems will allow you

202
00:08:49,980 --> 00:08:51,180
to do that because it's pretty easy if

203
00:08:51,180 --> 00:08:52,860
you just put an expiration date on the

204
00:08:52,860 --> 00:08:54,480
document to create

205
00:08:54,480 --> 00:08:57,839
the fun starts when the underlying

206
00:08:57,839 --> 00:08:59,339
storage is more complex

207
00:08:59,339 --> 00:09:01,920
so specifically on I'll mention some

208
00:09:01,920 --> 00:09:03,600
examples of that you know what happens

209
00:09:03,600 --> 00:09:06,180
if you have several tables and the

210
00:09:06,180 --> 00:09:08,279
policy covers multiple tables so our

211
00:09:08,279 --> 00:09:10,140
customer order actually includes both

212
00:09:10,140 --> 00:09:12,240
the customer table and the order

213
00:09:12,240 --> 00:09:15,620
information and some address information

214
00:09:15,620 --> 00:09:17,880
and on top of that

215
00:09:17,880 --> 00:09:19,920
some of the columns in the table are

216
00:09:19,920 --> 00:09:21,360
covered by the policy but that was

217
00:09:21,360 --> 00:09:22,380
aren't

218
00:09:22,380 --> 00:09:24,420
this is where like doing it manually

219
00:09:24,420 --> 00:09:27,420
becomes completely practical and that's

220
00:09:27,420 --> 00:09:29,100
one example

221
00:09:29,100 --> 00:09:31,860
my attorney colleague UCLA saying that

222
00:09:31,860 --> 00:09:33,480
well you can just call all of the

223
00:09:33,480 --> 00:09:35,279
columns to be part of the policies it's

224
00:09:35,279 --> 00:09:37,260
a key then it's something that the

225
00:09:37,260 --> 00:09:39,320
database has created

226
00:09:39,320 --> 00:09:42,540
it's not user data so when your data is

227
00:09:42,540 --> 00:09:45,300
recorded the customer ID is assigned by

228
00:09:45,300 --> 00:09:47,459
the company so it isn't customer

229
00:09:47,459 --> 00:09:50,040
statement therefore it can be included

230
00:09:50,040 --> 00:09:51,420
that the policy it has to follow

231
00:09:51,420 --> 00:09:53,399
different rules because it hasn't been

232
00:09:53,399 --> 00:09:55,380
collected from them

233
00:09:55,380 --> 00:09:57,360
amen

234
00:09:57,360 --> 00:09:59,399
the the other

235
00:09:59,399 --> 00:10:03,060
fun detail is just this idea that

236
00:10:03,060 --> 00:10:05,459
multiple mechanisms could come into

237
00:10:05,459 --> 00:10:08,160
conflict that includes retention and

238
00:10:08,160 --> 00:10:09,660
parking obviously because they have a

239
00:10:09,660 --> 00:10:11,220
different goal retention test key

240
00:10:11,220 --> 00:10:14,700
project says destroy it but also

241
00:10:14,700 --> 00:10:16,200
you know backups

242
00:10:16,200 --> 00:10:19,680
are are the fine example because

243
00:10:19,680 --> 00:10:23,459
all good I.T policies require having

244
00:10:23,459 --> 00:10:25,380
backups right so that they're able to

245
00:10:25,380 --> 00:10:28,380
restore data but that directly conflicts

246
00:10:28,380 --> 00:10:30,480
with actually being able to purge the

247
00:10:30,480 --> 00:10:31,980
data

248
00:10:31,980 --> 00:10:34,260
um specifically

249
00:10:34,260 --> 00:10:37,080
um if you have a good bag of policy then

250
00:10:37,080 --> 00:10:38,760
you have backups that are replicated

251
00:10:38,760 --> 00:10:41,640
that are on site that are maybe on tapes

252
00:10:41,640 --> 00:10:44,100
and once that happens like if you have

253
00:10:44,100 --> 00:10:45,839
your backups stored in the stack I'll

254
00:10:45,839 --> 00:10:47,820
take somewhere and then there's actually

255
00:10:47,820 --> 00:10:49,800
no way to destroy the data when it's

256
00:10:49,800 --> 00:10:52,860
time arrives because

257
00:10:52,860 --> 00:10:55,140
it's on tape you don't know where it is

258
00:10:55,140 --> 00:10:58,019
and generally speaking like backups are

259
00:10:58,019 --> 00:11:00,959
not created to be edited because like

260
00:11:00,959 --> 00:11:02,880
the idea is to make a backup and then

261
00:11:02,880 --> 00:11:05,100
you apply at a store but it's not really

262
00:11:05,100 --> 00:11:07,860
like a active system and they're not

263
00:11:07,860 --> 00:11:09,540
designed to be altered

264
00:11:09,540 --> 00:11:11,700
[Music]

265
00:11:11,700 --> 00:11:13,680
um and so this is kind of the things we

266
00:11:13,680 --> 00:11:14,899
try to solve

267
00:11:14,899 --> 00:11:19,380
to solve the way support within ideally

268
00:11:19,380 --> 00:11:22,260
all database systems we mostly data

269
00:11:22,260 --> 00:11:25,019
analysis on SQL based regulational kind

270
00:11:25,019 --> 00:11:27,120
and we've expanded a little bit into

271
00:11:27,120 --> 00:11:31,440
nosql systems in such a way that it's

272
00:11:31,440 --> 00:11:33,300
transparent to the user

273
00:11:33,300 --> 00:11:35,820
and although I'm coming from Academia

274
00:11:35,820 --> 00:11:37,320
the one thing I've learned is that if

275
00:11:37,320 --> 00:11:39,060
you come in you say all right here's how

276
00:11:39,060 --> 00:11:39,899
it's going to work you're going to

277
00:11:39,899 --> 00:11:41,940
change your system uh people are going

278
00:11:41,940 --> 00:11:43,560
to laugh at you

279
00:11:43,560 --> 00:11:45,660
um so we really kind of tried to focus

280
00:11:45,660 --> 00:11:48,959
on like using existing Machinery to

281
00:11:48,959 --> 00:11:51,480
support all of those

282
00:11:51,480 --> 00:11:53,820
policies in such a way that the user

283
00:11:53,820 --> 00:11:55,200
doesn't have to know I mean obviously

284
00:11:55,200 --> 00:11:56,279
something's happening in the background

285
00:11:56,279 --> 00:11:58,140
then you might have to add something to

286
00:11:58,140 --> 00:12:00,060
your database to make it happen but the

287
00:12:00,060 --> 00:12:02,220
idea as the user can see it in fact

288
00:12:02,220 --> 00:12:04,500
there's a little bit of Prior work where

289
00:12:04,500 --> 00:12:06,300
they've added the mechanism that

290
00:12:06,300 --> 00:12:07,980
basically said well and you're about to

291
00:12:07,980 --> 00:12:11,700
violate the policy throw an error and

292
00:12:11,700 --> 00:12:12,720
that

293
00:12:12,720 --> 00:12:15,660
will work in terms of protecting the

294
00:12:15,660 --> 00:12:18,240
policies but like what happens with all

295
00:12:18,240 --> 00:12:19,920
of your existing systems and scripts and

296
00:12:19,920 --> 00:12:21,480
users who will be complaining about an

297
00:12:21,480 --> 00:12:23,040
unknown error because they have no idea

298
00:12:23,040 --> 00:12:25,140
what this doubled into

299
00:12:25,140 --> 00:12:27,600
um so I want a big motivations is to

300
00:12:27,600 --> 00:12:29,519
keep it completely transparent and

301
00:12:29,519 --> 00:12:31,500
in the shadows and in the background of

302
00:12:31,500 --> 00:12:32,459
the Davis

303
00:12:32,459 --> 00:12:34,560
and of course using existing things

304
00:12:34,560 --> 00:12:37,200
because again we're trying to make it

305
00:12:37,200 --> 00:12:39,180
generic in the sense that it's

306
00:12:39,180 --> 00:12:41,040
applicable to whatever database or

307
00:12:41,040 --> 00:12:43,260
database systems you might have which

308
00:12:43,260 --> 00:12:45,360
means you can't assume some special

309
00:12:45,360 --> 00:12:47,519
tools or Special Steps you want to use

310
00:12:47,519 --> 00:12:49,079
existing mechanisms that can be

311
00:12:49,079 --> 00:12:50,100
leveraged

312
00:12:50,100 --> 00:12:52,850
whatever you happen to use

313
00:12:52,850 --> 00:12:54,180
[Music]

314
00:12:54,180 --> 00:12:57,120
so to revisit the point of a business

315
00:12:57,120 --> 00:12:59,700
record so as I understand that and again

316
00:12:59,700 --> 00:13:01,680
I work as an attorney but

317
00:13:01,680 --> 00:13:04,459
far from being an attorney so

318
00:13:04,459 --> 00:13:06,360
sometimes I feel like we speak a

319
00:13:06,360 --> 00:13:08,160
different language and like even

320
00:13:08,160 --> 00:13:11,579
terminology has to be agreed upon but

321
00:13:11,579 --> 00:13:13,500
in general the policies are defined in

322
00:13:13,500 --> 00:13:15,480
units of business records because

323
00:13:15,480 --> 00:13:17,639
obviously when someone writes a policy

324
00:13:17,639 --> 00:13:20,519
they really don't know what database you

325
00:13:20,519 --> 00:13:22,620
have or what tables you design

326
00:13:22,620 --> 00:13:25,380
what they actually have is an entity a

327
00:13:25,380 --> 00:13:27,360
business record that corresponds to an

328
00:13:27,360 --> 00:13:29,820
event that has actually been recorded

329
00:13:29,820 --> 00:13:32,339
like a customer purchase or some sort of

330
00:13:32,339 --> 00:13:34,620
transaction whatever it is it's known as

331
00:13:34,620 --> 00:13:37,260
a business record and while in

332
00:13:37,260 --> 00:13:40,380
the simple world of files and documents

333
00:13:40,380 --> 00:13:43,380
it might just be a file like an email in

334
00:13:43,380 --> 00:13:46,200
an actual database relational or even no

335
00:13:46,200 --> 00:13:48,720
SQL it will be some combinational things

336
00:13:48,720 --> 00:13:51,480
like the data can spread especially in

337
00:13:51,480 --> 00:13:54,720
relational SQL based databases there is

338
00:13:54,720 --> 00:13:57,079
a process called normalization that

339
00:13:57,079 --> 00:13:59,339
designs tables in a certain way to

340
00:13:59,339 --> 00:14:02,040
minimize redundancy and as a part of it

341
00:14:02,040 --> 00:14:04,019
it splits it up into Separate Tables

342
00:14:04,019 --> 00:14:06,019
essentially

343
00:14:06,019 --> 00:14:08,279
Outsourcing all of the pieces that might

344
00:14:08,279 --> 00:14:09,720
repeat

345
00:14:09,720 --> 00:14:12,180
um so it's pretty natural for this

346
00:14:12,180 --> 00:14:15,240
single business record entity to be

347
00:14:15,240 --> 00:14:18,060
split into multiple tables and as I

348
00:14:18,060 --> 00:14:19,260
mentioned before what makes it

349
00:14:19,260 --> 00:14:21,120
particularly fun is that it's also

350
00:14:21,120 --> 00:14:23,040
possible that different columns fall and

351
00:14:23,040 --> 00:14:24,000
they're different

352
00:14:24,000 --> 00:14:25,500
rules

353
00:14:25,500 --> 00:14:27,360
and so obviously you have to be finite

354
00:14:27,360 --> 00:14:30,620
enough to actually match that

355
00:14:32,220 --> 00:14:35,639
now the one part we try to make it

356
00:14:35,639 --> 00:14:38,399
transparent and we've tried to automate

357
00:14:38,399 --> 00:14:40,620
it as much as possible the idea is that

358
00:14:40,620 --> 00:14:41,760
you should be able to set up your

359
00:14:41,760 --> 00:14:44,279
policies in the database

360
00:14:44,279 --> 00:14:45,899
um and then you should be able to just

361
00:14:45,899 --> 00:14:48,420
let it not and hopefully even be able to

362
00:14:48,420 --> 00:14:50,399
verify that you are compliant with

363
00:14:50,399 --> 00:14:52,380
whatever rules are in place

364
00:14:52,380 --> 00:14:54,899
so the what was the one thing that we

365
00:14:54,899 --> 00:14:56,459
can't really automate at least we

366
00:14:56,459 --> 00:14:59,399
haven't gotten to yet is the mapping of

367
00:14:59,399 --> 00:15:02,100
the policy into the database because

368
00:15:02,100 --> 00:15:03,180
that's

369
00:15:03,180 --> 00:15:04,500
you know that's where you translate

370
00:15:04,500 --> 00:15:07,079
essentially things written in English

371
00:15:07,079 --> 00:15:11,040
into something in database service but

372
00:15:11,040 --> 00:15:14,040
the way we built the idea is that you

373
00:15:14,040 --> 00:15:16,019
have the

374
00:15:16,019 --> 00:15:17,940
domain experts who actually understand

375
00:15:17,940 --> 00:15:20,820
what the data looks like and what things

376
00:15:20,820 --> 00:15:22,920
mean and what words translate to within

377
00:15:22,920 --> 00:15:24,240
the database storage

378
00:15:24,240 --> 00:15:26,760
and possible illegal console depending

379
00:15:26,760 --> 00:15:28,920
on who you're working with to to sit

380
00:15:28,920 --> 00:15:31,199
down and map things to say Well when

381
00:15:31,199 --> 00:15:33,420
we're talking about customer name it's

382
00:15:33,420 --> 00:15:35,220
this column in the table when we talk

383
00:15:35,220 --> 00:15:36,959
about the purchase it maps to that table

384
00:15:36,959 --> 00:15:40,680
into those key columns that part

385
00:15:40,680 --> 00:15:42,480
maybe one day we'll figure out how to

386
00:15:42,480 --> 00:15:44,579
automate it it's on the to-do list but

387
00:15:44,579 --> 00:15:46,800
that's the one manual part where someone

388
00:15:46,800 --> 00:15:49,199
has to kind of make this translation

389
00:15:49,199 --> 00:15:52,139
and map one is a business record uh

390
00:15:52,139 --> 00:15:54,899
described in the policy into database

391
00:15:54,899 --> 00:15:55,980
terms

392
00:15:55,980 --> 00:15:57,720
but the idea is like once you get to

393
00:15:57,720 --> 00:16:00,480
that point it should all be um

394
00:16:00,480 --> 00:16:03,420
automated in actual enforcement and

395
00:16:03,420 --> 00:16:05,579
maintaining the rules

396
00:16:05,579 --> 00:16:07,079
and

397
00:16:07,079 --> 00:16:08,699
once you happen

398
00:16:08,699 --> 00:16:10,980
um as an old sergeant the second I said

399
00:16:10,980 --> 00:16:12,839
the idea is we want to Define it in such

400
00:16:12,839 --> 00:16:15,540
terms so that the database administrator

401
00:16:15,540 --> 00:16:18,839
or anyone Imaging your data understands

402
00:16:18,839 --> 00:16:19,560
enough

403
00:16:19,560 --> 00:16:21,779
right like we wanted to move it

404
00:16:21,779 --> 00:16:23,220
into

405
00:16:23,220 --> 00:16:27,420
um into people language essentially

406
00:16:27,420 --> 00:16:29,820
um so that it's it's in terms that

407
00:16:29,820 --> 00:16:31,199
um someone who manages the database can

408
00:16:31,199 --> 00:16:32,579
understand

409
00:16:32,579 --> 00:16:35,519
and I definitely one of my PhD students

410
00:16:35,519 --> 00:16:39,480
who recently started used to work as a

411
00:16:39,480 --> 00:16:42,000
you know in compliance

412
00:16:42,000 --> 00:16:43,860
um and and she was saying that's one of

413
00:16:43,860 --> 00:16:45,600
the common things you know someone comes

414
00:16:45,600 --> 00:16:48,060
to the database administrator and says

415
00:16:48,060 --> 00:16:50,040
here's the policy and make it happen at

416
00:16:50,040 --> 00:16:51,420
the first sense it's like well life is

417
00:16:51,420 --> 00:16:53,279
supposed to do right well what does it

418
00:16:53,279 --> 00:16:55,620
mean it's equal you tell me that it

419
00:16:55,620 --> 00:16:58,579
might be able to make it work

420
00:16:59,279 --> 00:17:01,380
Okay so

421
00:17:01,380 --> 00:17:03,240
to give you a high level idea first so

422
00:17:03,240 --> 00:17:05,760
I'll I'll start talking from I'll start

423
00:17:05,760 --> 00:17:07,980
a discussion for retention and then I'll

424
00:17:07,980 --> 00:17:09,660
talk about purging depending on how much

425
00:17:09,660 --> 00:17:11,640
time we have we can talk about consent

426
00:17:11,640 --> 00:17:13,140
as well

427
00:17:13,140 --> 00:17:15,540
um all of those things kind of Interlake

428
00:17:15,540 --> 00:17:18,780
so the idea is that

429
00:17:18,780 --> 00:17:21,059
retention means data must be kept

430
00:17:21,059 --> 00:17:23,699
for a certain amount of time

431
00:17:23,699 --> 00:17:27,240
um therefore we want to make sure that

432
00:17:27,240 --> 00:17:31,080
no protected data is destroyed by

433
00:17:31,080 --> 00:17:33,240
accident and again like there is no

434
00:17:33,240 --> 00:17:35,520
chance that the user would know anything

435
00:17:35,520 --> 00:17:38,760
about that or would do anything to help

436
00:17:38,760 --> 00:17:39,539
you

437
00:17:39,539 --> 00:17:42,299
and as I said with documents you might

438
00:17:42,299 --> 00:17:44,100
be able to get somewhere but with with

439
00:17:44,100 --> 00:17:46,500
the database there's just no way to

440
00:17:46,500 --> 00:17:48,120
track things especially because ball is

441
00:17:48,120 --> 00:17:50,100
this thing overlap like it's possible

442
00:17:50,100 --> 00:17:51,539
that the column

443
00:17:51,539 --> 00:17:54,240
and the database table falls under

444
00:17:54,240 --> 00:17:55,799
multiple policies with different

445
00:17:55,799 --> 00:17:58,980
durations in which case you have to pick

446
00:17:58,980 --> 00:18:00,780
the minimum or the maximum depending on

447
00:18:00,780 --> 00:18:03,120
whether it's retention or purging so

448
00:18:03,120 --> 00:18:06,179
even if model is willing to manually

449
00:18:06,179 --> 00:18:08,640
after Paula says you still like you

450
00:18:08,640 --> 00:18:10,080
would have to track multiple effects you

451
00:18:10,080 --> 00:18:13,020
think conflict and things like that

452
00:18:13,020 --> 00:18:14,700
um so the idea is that you set up your

453
00:18:14,700 --> 00:18:15,780
policy

454
00:18:15,780 --> 00:18:18,179
and I'll talk about it

455
00:18:18,179 --> 00:18:19,400
um

456
00:18:19,400 --> 00:18:21,600
[Music]

457
00:18:21,600 --> 00:18:24,419
yes I'll talk about it in a second

458
00:18:24,419 --> 00:18:26,940
um you set up your policy in some SQL

459
00:18:26,940 --> 00:18:30,600
terms of databases around the stands and

460
00:18:30,600 --> 00:18:31,380
then

461
00:18:31,380 --> 00:18:34,860
whenever the data is deleted or updated

462
00:18:34,860 --> 00:18:38,220
depending on the policy um some policies

463
00:18:38,220 --> 00:18:40,200
also require you to keep track of any

464
00:18:40,200 --> 00:18:42,419
changes others might just say well this

465
00:18:42,419 --> 00:18:43,740
data can be destroyed but if it's

466
00:18:43,740 --> 00:18:45,539
updated it's okay it depends on the

467
00:18:45,539 --> 00:18:48,120
system on the policy uh but the idea is

468
00:18:48,120 --> 00:18:50,700
that anytime essentially something that

469
00:18:50,700 --> 00:18:53,280
should not be deleted is deleted by the

470
00:18:53,280 --> 00:18:55,860
user you quietly move it into an archive

471
00:18:55,860 --> 00:18:56,640
table

472
00:18:56,640 --> 00:19:00,480
and you let the original query proceed

473
00:19:00,480 --> 00:19:03,360
as a point so I usually delete

474
00:19:03,360 --> 00:19:06,360
the database checks whether something

475
00:19:06,360 --> 00:19:08,160
needs to be debated if not nothing

476
00:19:08,160 --> 00:19:10,440
happens if it does need to be obtained

477
00:19:10,440 --> 00:19:12,480
you make a copy of only other element

478
00:19:12,480 --> 00:19:14,580
pieces into an archive table

479
00:19:14,580 --> 00:19:17,419
and then everything proceeds

480
00:19:17,419 --> 00:19:20,580
as necessary and most importantly the

481
00:19:20,580 --> 00:19:23,220
user does not know any better because

482
00:19:23,220 --> 00:19:25,620
either way their delete succeeds it's

483
00:19:25,620 --> 00:19:27,720
just that if they needed something they

484
00:19:27,720 --> 00:19:29,100
should be around it's

485
00:19:29,100 --> 00:19:32,959
it will survive in the archive

486
00:19:34,799 --> 00:19:37,679
and you know then the archive tables and

487
00:19:37,679 --> 00:19:40,440
as a kind of small and unexpected bonus

488
00:19:40,440 --> 00:19:42,120
it turns out that you can expect

489
00:19:42,120 --> 00:19:43,559
performance would be a little bit better

490
00:19:43,559 --> 00:19:47,760
because if the data that's been archived

491
00:19:47,760 --> 00:19:50,660
it's not going to be actively used

492
00:19:50,660 --> 00:19:53,100
and it's actually better to keep it away

493
00:19:53,100 --> 00:19:55,140
because then your active fables are

494
00:19:55,140 --> 00:19:57,419
smaller as a result

495
00:19:57,419 --> 00:19:59,340
um so it's essentially a win-win and

496
00:19:59,340 --> 00:20:02,880
then should you receive a request for

497
00:20:02,880 --> 00:20:04,980
data that they no longer happen if you

498
00:20:04,980 --> 00:20:09,660
go into archive and type and yeah this

499
00:20:09,660 --> 00:20:11,880
so for example and

500
00:20:11,880 --> 00:20:15,299
if you're not familiar with SQL

501
00:20:15,299 --> 00:20:18,059
SQL is very convenient and easy to read

502
00:20:18,059 --> 00:20:19,919
because

503
00:20:19,919 --> 00:20:22,320
well it was designed as such it's

504
00:20:22,320 --> 00:20:25,020
supposed to stand for Structured English

505
00:20:25,020 --> 00:20:27,419
word language

506
00:20:27,419 --> 00:20:29,220
um and so

507
00:20:29,220 --> 00:20:31,740
for example you you essentially do

508
00:20:31,740 --> 00:20:32,820
something like this like this is an

509
00:20:32,820 --> 00:20:35,520
example of attaining

510
00:20:35,520 --> 00:20:37,740
keeping indefinitely all the information

511
00:20:37,740 --> 00:20:40,919
about interviews for applicants who are

512
00:20:40,919 --> 00:20:42,059
hired

513
00:20:42,059 --> 00:20:44,880
most importantly though

514
00:20:44,880 --> 00:20:48,059
um the idea is that like someone has to

515
00:20:48,059 --> 00:20:49,919
explain to the database administrator

516
00:20:49,919 --> 00:20:51,539
what you're trying to do and let's say

517
00:20:51,539 --> 00:20:53,100
the thing that you're trying to do is to

518
00:20:53,100 --> 00:20:55,140
keep certain columns like in this case

519
00:20:55,140 --> 00:20:57,660
the name date of birth the position the

520
00:20:57,660 --> 00:20:59,880
application date and the real date an

521
00:20:59,880 --> 00:21:01,559
outcome for anyone who has been hired

522
00:21:01,559 --> 00:21:04,080
and you do it in depth to explain that

523
00:21:04,080 --> 00:21:06,900
and then the database administrator can

524
00:21:06,900 --> 00:21:09,000
write a SQL query

525
00:21:09,000 --> 00:21:10,980
that describes what you're trying to

526
00:21:10,980 --> 00:21:12,299
capture

527
00:21:12,299 --> 00:21:15,360
and so like this seems Seems like the

528
00:21:15,360 --> 00:21:16,919
most efficient way because essentially

529
00:21:16,919 --> 00:21:18,780
instead of creating some sort of

530
00:21:18,780 --> 00:21:21,600
different mechanism that can try to

531
00:21:21,600 --> 00:21:23,640
enforce the same type of rules

532
00:21:23,640 --> 00:21:26,280
uh you could simply use the database

533
00:21:26,280 --> 00:21:27,780
query itself

534
00:21:27,780 --> 00:21:30,059
to instead of fetching data for the user

535
00:21:30,059 --> 00:21:33,419
to identify what rows and columns are a

536
00:21:33,419 --> 00:21:35,460
good thing and you can kind of check

537
00:21:35,460 --> 00:21:37,260
yeah you can do a sanity check you can

538
00:21:37,260 --> 00:21:39,000
just run the query and see if it Returns

539
00:21:39,000 --> 00:21:41,299
what you expect would it take

540
00:21:41,299 --> 00:21:43,860
and of course if it's not indefinite

541
00:21:43,860 --> 00:21:45,780
then you can either time limit or things

542
00:21:45,780 --> 00:21:48,299
like that but again all of those would

543
00:21:48,299 --> 00:21:50,700
be simple SQL operations

544
00:21:50,700 --> 00:21:53,100
rather than anything you the only thing

545
00:21:53,100 --> 00:21:54,900
really new is created the game that's

546
00:21:54,900 --> 00:21:57,419
the part we made up but the rest of it

547
00:21:57,419 --> 00:21:59,640
is just the regular part that's valid by

548
00:21:59,640 --> 00:22:02,280
itself and so this way it kind of as

549
00:22:02,280 --> 00:22:04,080
intuitive as possible because it is

550
00:22:04,080 --> 00:22:06,059
defined in the same terms and the same

551
00:22:06,059 --> 00:22:09,918
units as a database would know anyway

552
00:22:10,440 --> 00:22:12,600
uh so that's an example of the idea of

553
00:22:12,600 --> 00:22:13,320
that

554
00:22:13,320 --> 00:22:16,380
um and so as far as how it would operate

555
00:22:16,380 --> 00:22:18,120
in practice

556
00:22:18,120 --> 00:22:20,280
here's something to to give you an idea

557
00:22:20,280 --> 00:22:22,260
so let's say a user comes in

558
00:22:22,260 --> 00:22:26,100
and deletes rows four and six

559
00:22:26,100 --> 00:22:30,480
now there is a retention policy that

560
00:22:30,480 --> 00:22:34,340
says that the name

561
00:22:34,740 --> 00:22:37,980
the name needs to take

562
00:22:37,980 --> 00:22:41,460
note that in my contrib example the

563
00:22:41,460 --> 00:22:43,320
social security number does not have to

564
00:22:43,320 --> 00:22:45,900
Detective uh

565
00:22:45,900 --> 00:22:47,820
for whatever reason right like there's a

566
00:22:47,820 --> 00:22:49,679
policy that says names must be kept

567
00:22:49,679 --> 00:22:52,679
indefinitely a lot of time but the

568
00:22:52,679 --> 00:22:55,020
social security number isn't so the lead

569
00:22:55,020 --> 00:22:57,360
proceeds as usual

570
00:22:57,360 --> 00:22:59,700
however because this information needs

571
00:22:59,700 --> 00:23:02,280
to be retained a um

572
00:23:02,280 --> 00:23:05,880
database trigger would make a copy

573
00:23:05,880 --> 00:23:08,880
of the relevant data preserving a rose

574
00:23:08,880 --> 00:23:11,120
foreign sex in the archive table

575
00:23:11,120 --> 00:23:14,460
table is the same animal except that it

576
00:23:14,460 --> 00:23:16,700
has two additional columns one of them

577
00:23:16,700 --> 00:23:19,919
indicates the name of the retention rule

578
00:23:19,919 --> 00:23:22,200
that caused the data to be stored that

579
00:23:22,200 --> 00:23:25,679
would be the column called Rule and the

580
00:23:25,679 --> 00:23:26,940
policy would be called Intervention

581
00:23:26,940 --> 00:23:29,460
names and the

582
00:23:29,460 --> 00:23:32,100
transaction ID is something that is

583
00:23:32,100 --> 00:23:35,760
needed to keep asset rules in the

584
00:23:35,760 --> 00:23:36,780
database

585
00:23:36,780 --> 00:23:38,580
essentially there's electric correctness

586
00:23:38,580 --> 00:23:41,700
tools and database to make sure that

587
00:23:41,700 --> 00:23:44,100
recovery is possible

588
00:23:44,100 --> 00:23:47,340
and in order to not violate any of those

589
00:23:47,340 --> 00:23:50,880
we are also storing a transaction ID in

590
00:23:50,880 --> 00:23:51,960
the table

591
00:23:51,960 --> 00:23:53,780
but all of this information is available

592
00:23:53,780 --> 00:23:56,340
in the sense that there's nothing here

593
00:23:56,340 --> 00:23:59,100
that we create or use especially for our

594
00:23:59,100 --> 00:24:01,080
mechanism we just implemented this way

595
00:24:01,080 --> 00:24:03,059
using database to

596
00:24:03,059 --> 00:24:04,980
and as a little deeper if you're not

597
00:24:04,980 --> 00:24:07,559
familiar with what triggers are triggers

598
00:24:07,559 --> 00:24:09,419
are an existing

599
00:24:09,419 --> 00:24:13,500
common mechanism in database systems

600
00:24:13,500 --> 00:24:16,260
completely Universal in relational and

601
00:24:16,260 --> 00:24:18,120
SQL based databases

602
00:24:18,120 --> 00:24:21,720
a little bit fuzzier but is being

603
00:24:21,720 --> 00:24:24,000
developed for most nosql systems as well

604
00:24:24,000 --> 00:24:27,059
as we discovered but at all of SQL based

605
00:24:27,059 --> 00:24:28,919
like horrible opposers bicycle all of

606
00:24:28,919 --> 00:24:30,419
that it's a completely standard

607
00:24:30,419 --> 00:24:33,900
mechanism it's meant to to be used for

608
00:24:33,900 --> 00:24:36,659
enforcing custom rules

609
00:24:36,659 --> 00:24:39,000
um and the idea is it's um it's a

610
00:24:39,000 --> 00:24:41,280
function that essentially sleeps and

611
00:24:41,280 --> 00:24:43,200
waits for a condition to be met so you

612
00:24:43,200 --> 00:24:44,880
can attach it to certain conditions and

613
00:24:44,880 --> 00:24:46,280
when the condition

614
00:24:46,280 --> 00:24:49,500
is met the function executes so you

615
00:24:49,500 --> 00:24:51,299
could use it for things like make sure

616
00:24:51,299 --> 00:24:52,679
that the

617
00:24:52,679 --> 00:24:54,900
bank balance can never drop below zero

618
00:24:54,900 --> 00:24:56,520
you could have something to check every

619
00:24:56,520 --> 00:24:58,919
time you update the bank balance the

620
00:24:58,919 --> 00:25:01,679
trigger wakes up and if the action would

621
00:25:01,679 --> 00:25:04,080
have dropped it below zero it causes an

622
00:25:04,080 --> 00:25:05,299
error to happen

623
00:25:05,299 --> 00:25:08,340
my quiet being that this is a mechanism

624
00:25:08,340 --> 00:25:11,159
that is universally available so all you

625
00:25:11,159 --> 00:25:13,200
have to do is to encode with what you're

626
00:25:13,200 --> 00:25:15,480
trying to achieve here using the same

627
00:25:15,480 --> 00:25:16,280
system

628
00:25:16,280 --> 00:25:19,080
and yeah

629
00:25:19,080 --> 00:25:23,360
let it do what you need to do

630
00:25:27,179 --> 00:25:28,440
all right

631
00:25:28,440 --> 00:25:30,900
so

632
00:25:30,900 --> 00:25:33,299
for all of those operations

633
00:25:33,299 --> 00:25:36,240
as I said before so you can attach a

634
00:25:36,240 --> 00:25:38,460
trigger to an event and the event could

635
00:25:38,460 --> 00:25:41,039
be things like delete or update or

636
00:25:41,039 --> 00:25:42,659
insert on the table

637
00:25:42,659 --> 00:25:44,279
so that

638
00:25:44,279 --> 00:25:46,500
we can attach a trigger for delete and

639
00:25:46,500 --> 00:25:48,120
update operations and any type of delete

640
00:25:48,120 --> 00:25:50,700
the update happens we can

641
00:25:50,700 --> 00:25:53,580
um check against the policy

642
00:25:53,580 --> 00:25:56,220
whether the value is under policy and

643
00:25:56,220 --> 00:25:58,860
again if it's not then you're done

644
00:25:58,860 --> 00:26:03,179
and the policy is just a SQL part so

645
00:26:03,179 --> 00:26:04,860
the good news is that there you can go

646
00:26:04,860 --> 00:26:06,779
around like okay and the database would

647
00:26:06,779 --> 00:26:08,159
have to tell you

648
00:26:08,159 --> 00:26:09,539
um exactly what's currently covered by

649
00:26:09,539 --> 00:26:11,880
policy and then anything that needs to

650
00:26:11,880 --> 00:26:15,559
be retained is is shuffled into archive

651
00:26:15,559 --> 00:26:19,700
and at the moment to keep things simple

652
00:26:19,700 --> 00:26:23,400
we are if there are multiple policies

653
00:26:23,400 --> 00:26:26,039
covering the same piece of data we

654
00:26:26,039 --> 00:26:27,900
simply make two copies

655
00:26:27,900 --> 00:26:30,000
and and this way it's not possible for

656
00:26:30,000 --> 00:26:32,760
policies to conflict

657
00:26:32,760 --> 00:26:34,860
if you're wondering you know why that

658
00:26:34,860 --> 00:26:36,600
would make sense like there there is

659
00:26:36,600 --> 00:26:38,940
some performance overhead to that

660
00:26:38,940 --> 00:26:40,140
um so there's definitely not something

661
00:26:40,140 --> 00:26:43,020
to be optimized here but in practice it

662
00:26:43,020 --> 00:26:46,020
might actually make sense because

663
00:26:46,020 --> 00:26:48,600
value might be under multiple policies I

664
00:26:48,600 --> 00:26:51,059
know it might be different durations

665
00:26:51,059 --> 00:26:54,120
so customer information might have to be

666
00:26:54,120 --> 00:26:56,159
detained for three years due to a state

667
00:26:56,159 --> 00:26:58,320
law and for five years due to a company

668
00:26:58,320 --> 00:27:00,240
policy

669
00:27:00,240 --> 00:27:01,620
um so

670
00:27:01,620 --> 00:27:03,840
in an Ideal World we'll figure out a way

671
00:27:03,840 --> 00:27:06,539
to not you know create extra storage

672
00:27:06,539 --> 00:27:08,820
um when things overlap but you do have

673
00:27:08,820 --> 00:27:13,080
to wait for that because essentially

674
00:27:13,080 --> 00:27:15,480
um you know if the data is being

675
00:27:15,480 --> 00:27:18,240
destroyed after three years

676
00:27:18,240 --> 00:27:19,980
you would buy like a five-year attention

677
00:27:19,980 --> 00:27:21,559
so you have to keep an eye for

678
00:27:21,559 --> 00:27:25,440
overlapping policies

679
00:27:25,440 --> 00:27:28,500
and then one same thing is an archive at

680
00:27:28,500 --> 00:27:30,120
least at the moment the idea is that

681
00:27:30,120 --> 00:27:32,580
this all of this data is made only you

682
00:27:32,580 --> 00:27:34,500
shouldn't really be modify America but

683
00:27:34,500 --> 00:27:36,659
this week we're not aware of the reason

684
00:27:36,659 --> 00:27:38,820
why you might have to mess with the

685
00:27:38,820 --> 00:27:44,100
archive data and then in order to

686
00:27:44,100 --> 00:27:47,960
not let data stay for too long

687
00:27:47,960 --> 00:27:50,039
you need to have a process that

688
00:27:50,039 --> 00:27:52,559
periodically gets rid of data that's at

689
00:27:52,559 --> 00:27:54,360
the end of its life cycle

690
00:27:54,360 --> 00:27:56,880
because like let's put something into

691
00:27:56,880 --> 00:27:58,320
that cabinet with data and definitely

692
00:27:58,320 --> 00:28:01,559
unless you get rid of it but

693
00:28:01,559 --> 00:28:03,179
that part disease you can just go

694
00:28:03,179 --> 00:28:05,100
through and Destroy things that have

695
00:28:05,100 --> 00:28:08,959
exceeded their retention period

696
00:28:11,279 --> 00:28:14,640
all right so let me talk about purging

697
00:28:14,640 --> 00:28:16,140
marketing is going to be more

698
00:28:16,140 --> 00:28:17,220
interesting

699
00:28:17,220 --> 00:28:19,380
because there's a little bit of extra

700
00:28:19,380 --> 00:28:21,059
additional complexity

701
00:28:21,059 --> 00:28:23,760
um to that and we recently actually

702
00:28:23,760 --> 00:28:26,520
tried have implemented a

703
00:28:26,520 --> 00:28:28,919
combination of both because it turns out

704
00:28:28,919 --> 00:28:30,720
that you have to also support purging

705
00:28:30,720 --> 00:28:31,980
within everything

706
00:28:31,980 --> 00:28:34,140
on data because data might be subject to

707
00:28:34,140 --> 00:28:35,940
both retention and purging at the same

708
00:28:35,940 --> 00:28:38,520
time but

709
00:28:38,520 --> 00:28:40,679
just to clarify what what the challenge

710
00:28:40,679 --> 00:28:42,659
is there's two pieces here like one is

711
00:28:42,659 --> 00:28:45,179
just the fact that data almost never

712
00:28:45,179 --> 00:28:47,700
goes away that's something we've learned

713
00:28:47,700 --> 00:28:49,799
from our forensic work you'd be

714
00:28:49,799 --> 00:28:51,480
surprised just how much data stays

715
00:28:51,480 --> 00:28:52,440
around

716
00:28:52,440 --> 00:28:55,020
it makes a makes for very useful

717
00:28:55,020 --> 00:28:57,360
forensic analysis you can discover a lot

718
00:28:57,360 --> 00:28:58,500
of things because things just stay

719
00:28:58,500 --> 00:29:00,779
around like database indexes data never

720
00:29:00,779 --> 00:29:03,299
disappears unless you to build the index

721
00:29:03,299 --> 00:29:06,720
in general all systems are kind of lazy

722
00:29:06,720 --> 00:29:08,520
in the sense that when you issued the

723
00:29:08,520 --> 00:29:11,940
leak an item is flagged as they needed

724
00:29:11,940 --> 00:29:14,159
but not actually erased because erasing

725
00:29:14,159 --> 00:29:15,360
it does more work

726
00:29:15,360 --> 00:29:16,980
therefore

727
00:29:16,980 --> 00:29:19,500
it's true of file systems as well but in

728
00:29:19,500 --> 00:29:21,000
databases it's particularly interesting

729
00:29:21,000 --> 00:29:23,340
because you get this like Patchwork of

730
00:29:23,340 --> 00:29:25,140
things where a bunch of deleted but

731
00:29:25,140 --> 00:29:27,000
still remaining stuff is hanging around

732
00:29:27,000 --> 00:29:29,340
in various ways and you could learn a

733
00:29:29,340 --> 00:29:30,840
lot if you're doing forensic analysis

734
00:29:30,840 --> 00:29:32,460
with that

735
00:29:32,460 --> 00:29:33,960
um so there is

736
00:29:33,960 --> 00:29:35,840
there is that concern

737
00:29:35,840 --> 00:29:39,659
however in general

738
00:29:39,659 --> 00:29:41,640
we considered almost a separate problem

739
00:29:41,640 --> 00:29:44,159
or it's basically optimistically assumed

740
00:29:44,159 --> 00:29:46,500
that if you delete the data it gets

741
00:29:46,500 --> 00:29:47,399
deleted

742
00:29:47,399 --> 00:29:49,140
although

743
00:29:49,140 --> 00:29:51,539
that's not the case however the part

744
00:29:51,539 --> 00:29:54,419
that's definitely an issue is the

745
00:29:54,419 --> 00:29:57,480
problem of backups because

746
00:29:57,480 --> 00:30:00,539
if you have a good policy and

747
00:30:00,539 --> 00:30:02,279
you know making sure your data is not

748
00:30:02,279 --> 00:30:04,200
going to be lost due to some sort of

749
00:30:04,200 --> 00:30:06,179
issue then you have to have regular

750
00:30:06,179 --> 00:30:10,640
backups and they might be you know

751
00:30:10,740 --> 00:30:15,600
the local historic backups but for you

752
00:30:15,600 --> 00:30:17,220
know good data survival you probably

753
00:30:17,220 --> 00:30:20,940
have some cloud-based or offside backups

754
00:30:20,940 --> 00:30:23,340
and if you think tapes are not being

755
00:30:23,340 --> 00:30:24,659
used and

756
00:30:24,659 --> 00:30:26,820
one of my PhD students as an argon

757
00:30:26,820 --> 00:30:29,279
National Lab where he works they have

758
00:30:29,279 --> 00:30:32,340
piles and piles and piles of things

759
00:30:32,340 --> 00:30:33,779
I'll be able to send me a picture

760
00:30:33,779 --> 00:30:35,539
sometimes I can include it so

761
00:30:35,539 --> 00:30:37,559
essentially like even tapes are still

762
00:30:37,559 --> 00:30:39,000
around mostly because they're much

763
00:30:39,000 --> 00:30:41,279
cheaper and so once something goes into

764
00:30:41,279 --> 00:30:43,679
backup there is just no way to keep

765
00:30:43,679 --> 00:30:46,320
track of where it went and you might

766
00:30:46,320 --> 00:30:48,840
have multiple copies because YouTube's

767
00:30:48,840 --> 00:30:50,100
Black Ops regularly

768
00:30:50,100 --> 00:30:53,220
therefore who knows in the coming places

769
00:30:53,220 --> 00:30:56,700
your data makes inflate

770
00:30:56,700 --> 00:30:59,460
so the primary thing that we're trying

771
00:30:59,460 --> 00:31:01,679
to solve here is how would you delete

772
00:31:01,679 --> 00:31:03,840
something that might have been backed up

773
00:31:03,840 --> 00:31:05,220
at some point

774
00:31:05,220 --> 00:31:07,980
and you know to be fair the actual

775
00:31:07,980 --> 00:31:09,539
solution for that is not something we

776
00:31:09,539 --> 00:31:11,580
invented so something that's known as a

777
00:31:11,580 --> 00:31:14,279
cryptographic Erasure which is basically

778
00:31:14,279 --> 00:31:16,799
this idea of encrypting something and

779
00:31:16,799 --> 00:31:18,659
then erasing it by deleting the

780
00:31:18,659 --> 00:31:20,580
decryption

781
00:31:20,580 --> 00:31:22,860
because like you're not physically

782
00:31:22,860 --> 00:31:24,779
deleting the data but since the

783
00:31:24,779 --> 00:31:27,360
decryption key is gone then it's no

784
00:31:27,360 --> 00:31:29,520
longer accessible

785
00:31:29,520 --> 00:31:31,860
um and so here it actually works very

786
00:31:31,860 --> 00:31:32,940
nicely

787
00:31:32,940 --> 00:31:35,220
and

788
00:31:35,220 --> 00:31:37,740
one of my colleagues does cryptography

789
00:31:37,740 --> 00:31:40,200
work and research and he was telling me

790
00:31:40,200 --> 00:31:43,020
that well it has been kind of an

791
00:31:43,020 --> 00:31:44,700
exciting topic for a while but then they

792
00:31:44,700 --> 00:31:46,260
abandoned it mostly because you can't

793
00:31:46,260 --> 00:31:49,260
trust their mobile server to um to

794
00:31:49,260 --> 00:31:50,580
actually follow through like once you

795
00:31:50,580 --> 00:31:51,960
send something to remote server whether

796
00:31:51,960 --> 00:31:55,080
or not that's encrypted they could have

797
00:31:55,080 --> 00:31:57,960
made a copy but here it works

798
00:31:57,960 --> 00:32:01,260
surprisingly well and specifically the

799
00:32:01,260 --> 00:32:03,179
idea is that we set up

800
00:32:03,179 --> 00:32:06,240
a collection of keys encryption keys for

801
00:32:06,240 --> 00:32:07,679
different policies and different time

802
00:32:07,679 --> 00:32:09,899
ranges I'll talk more about that in a

803
00:32:09,899 --> 00:32:13,260
second and then when the data is

804
00:32:13,260 --> 00:32:15,419
inserted into the table that is subject

805
00:32:15,419 --> 00:32:18,240
to some policy

806
00:32:18,240 --> 00:32:20,760
you encrypt the values that are subject

807
00:32:20,760 --> 00:32:22,799
to policies according to when they

808
00:32:22,799 --> 00:32:24,240
should expire

809
00:32:24,240 --> 00:32:26,940
and you put that information into the

810
00:32:26,940 --> 00:32:28,799
shadow table which is a game like

811
00:32:28,799 --> 00:32:32,279
invisible copy of the active table with

812
00:32:32,279 --> 00:32:34,140
which the user attracts

813
00:32:34,140 --> 00:32:36,360
and when you go to the backup you back

814
00:32:36,360 --> 00:32:38,159
up the shadow cable instead of active

815
00:32:38,159 --> 00:32:39,480
one

816
00:32:39,480 --> 00:32:42,480
and so that the idea is that anytime you

817
00:32:42,480 --> 00:32:44,820
feel like destroying some data when it

818
00:32:44,820 --> 00:32:48,419
passed up goes past this expiration date

819
00:32:48,419 --> 00:32:51,720
you destroy the matching key in your key

820
00:32:51,720 --> 00:32:52,640
table

821
00:32:52,640 --> 00:32:55,919
and then the next time the data is

822
00:32:55,919 --> 00:32:58,140
restored because all of it is encrypted

823
00:32:58,140 --> 00:33:00,419
for the pieces for which you no longer

824
00:33:00,419 --> 00:33:02,940
have to keep you just get rid of the

825
00:33:02,940 --> 00:33:05,700
data and now it's gone right then like

826
00:33:05,700 --> 00:33:07,500
if you restore a table from a while ago

827
00:33:07,500 --> 00:33:09,059
or some of the values have expired then

828
00:33:09,059 --> 00:33:10,440
the user is just going to see a bunch of

829
00:33:10,440 --> 00:33:11,940
nulls where values used to be because

830
00:33:11,940 --> 00:33:14,880
you're not able to decrypt them anymore

831
00:33:14,880 --> 00:33:17,220
um and the bonus or kind of the nice

832
00:33:17,220 --> 00:33:19,080
firewall of this

833
00:33:19,080 --> 00:33:20,519
um is that it doesn't matter how many

834
00:33:20,519 --> 00:33:22,200
pockets there are it doesn't matter

835
00:33:22,200 --> 00:33:24,659
where they are right you just destroy

836
00:33:24,659 --> 00:33:26,760
the key that matches your policy and

837
00:33:26,760 --> 00:33:28,980
that automatically and remotely erases

838
00:33:28,980 --> 00:33:31,019
any piece of data as long as you

839
00:33:31,019 --> 00:33:33,019
properly encrypted it

840
00:33:33,019 --> 00:33:36,120
on your behalf

841
00:33:36,120 --> 00:33:38,899
all right so it's actually

842
00:33:38,899 --> 00:33:40,740
surprisingly effective mechanism

843
00:33:40,740 --> 00:33:42,840
although there are some implementation

844
00:33:42,840 --> 00:33:46,080
issues and it's not entirely cheap we

845
00:33:46,080 --> 00:33:48,720
didn't do it we did do some evaluation

846
00:33:48,720 --> 00:33:50,940
it turns out encryption is actually a

847
00:33:50,940 --> 00:33:52,710
big part of the cost

848
00:33:52,710 --> 00:33:53,940
[Music]

849
00:33:53,940 --> 00:33:56,539
oh

850
00:33:58,559 --> 00:34:01,679
um there's also extra storage so it does

851
00:34:01,679 --> 00:34:03,539
expand the data and you do have to store

852
00:34:03,539 --> 00:34:06,360
the key identifier but

853
00:34:06,360 --> 00:34:09,179
it might be a system specific thing as

854
00:34:09,179 --> 00:34:11,460
I'll mentioned we did our experiments in

855
00:34:11,460 --> 00:34:12,599
posters

856
00:34:12,599 --> 00:34:16,020
and then in postgres I guess the

857
00:34:16,020 --> 00:34:18,480
whatever encryption function was

858
00:34:18,480 --> 00:34:20,099
available is actually pretty slow

859
00:34:20,099 --> 00:34:21,899
compared to like

860
00:34:21,899 --> 00:34:23,820
database to databases might be better

861
00:34:23,820 --> 00:34:26,820
but the avoidable part of course the the

862
00:34:26,820 --> 00:34:29,159
data is expanded so

863
00:34:29,159 --> 00:34:31,020
we worried about this like one or two

864
00:34:31,020 --> 00:34:32,699
papers on that and

865
00:34:32,699 --> 00:34:35,879
like our goal is to make it moderate

866
00:34:35,879 --> 00:34:37,440
expensive right it's not gonna come for

867
00:34:37,440 --> 00:34:38,540
free

868
00:34:38,540 --> 00:34:41,699
but our goal is to make it moderately

869
00:34:41,699 --> 00:34:44,460
affordable I think storage is not a big

870
00:34:44,460 --> 00:34:45,719
deal

871
00:34:45,719 --> 00:34:48,418
uh performance and slowdown of Aquarius

872
00:34:48,418 --> 00:34:50,460
as a bigger deal

873
00:34:50,460 --> 00:34:52,379
but

874
00:34:52,379 --> 00:34:53,940
that's kind of you know what we're

875
00:34:53,940 --> 00:34:57,000
working on to see what's practical but

876
00:34:57,000 --> 00:35:00,060
so I'm going to be free for sure it

877
00:35:00,060 --> 00:35:02,040
seems to me that energy the key table

878
00:35:02,040 --> 00:35:03,780
was probably one of the really tough

879
00:35:03,780 --> 00:35:05,400
Parts about this you got to back it up

880
00:35:05,400 --> 00:35:07,920
otherwise you lose the table yes yes but

881
00:35:07,920 --> 00:35:09,599
it's hard to keep the backups around too

882
00:35:09,599 --> 00:35:11,099
long you essentially still have your

883
00:35:11,099 --> 00:35:12,359
data

884
00:35:12,359 --> 00:35:14,460
absolutely so that's an absolute

885
00:35:14,460 --> 00:35:16,380
excellent book which is what about the

886
00:35:16,380 --> 00:35:19,020
encryption key table I can't tell you

887
00:35:19,020 --> 00:35:20,400
how many fun discussions we had about

888
00:35:20,400 --> 00:35:22,320
that first like my student wrote and

889
00:35:22,320 --> 00:35:23,760
said hey we're just going to exclude

890
00:35:23,760 --> 00:35:25,380
those vehicles from back up in the paper

891
00:35:25,380 --> 00:35:27,720
I'm like no no then we're not gonna

892
00:35:27,720 --> 00:35:29,220
argue that it's like I know this work

893
00:35:29,220 --> 00:35:31,380
got media to say what well it's a

894
00:35:31,380 --> 00:35:32,880
problem so let's just start back it up

895
00:35:32,880 --> 00:35:34,560
but that would be terrible because when

896
00:35:34,560 --> 00:35:36,480
you lose your data like everything would

897
00:35:36,480 --> 00:35:39,000
just disappear then we had all sorts of

898
00:35:39,000 --> 00:35:40,859
fun you know Turtles all the way down to

899
00:35:40,859 --> 00:35:43,280
say that you have an additional tier of

900
00:35:43,280 --> 00:35:47,160
an encryption a super encryption key

901
00:35:47,160 --> 00:35:50,339
table that subscribe we were kind of

902
00:35:50,339 --> 00:35:51,839
disgusting to see how far you know me

903
00:35:51,839 --> 00:35:53,700
personally you could take it

904
00:35:53,700 --> 00:35:56,880
um but the actual you know currents go

905
00:35:56,880 --> 00:35:58,920
to solution we haven't evaluated

906
00:35:58,920 --> 00:36:02,760
performance wise but our actual go-to is

907
00:36:02,760 --> 00:36:03,599
that

908
00:36:03,599 --> 00:36:05,339
I mean obviously you have to separate it

909
00:36:05,339 --> 00:36:07,200
goes without saying it needs to be in a

910
00:36:07,200 --> 00:36:08,339
separate database

911
00:36:08,339 --> 00:36:11,220
but then grips and key table is actually

912
00:36:11,220 --> 00:36:14,339
relatively small so for that you can

913
00:36:14,339 --> 00:36:16,740
afford to partition and redo your

914
00:36:16,740 --> 00:36:19,200
backups which is not something that's at

915
00:36:19,200 --> 00:36:20,940
all practical with your action database

916
00:36:20,940 --> 00:36:22,680
like it's sufficiently if it's small

917
00:36:22,680 --> 00:36:26,520
that you could load and partition the

918
00:36:26,520 --> 00:36:28,320
backup so that you could erase the

919
00:36:28,320 --> 00:36:30,900
pieces that fell into expire time range

920
00:36:30,900 --> 00:36:33,180
and then read back that up

921
00:36:33,180 --> 00:36:35,820
uh so but yeah absolutely it's a concern

922
00:36:35,820 --> 00:36:38,099
and as I said I was almost about to

923
00:36:38,099 --> 00:36:40,680
build like a chain of encryption key

924
00:36:40,680 --> 00:36:44,359
tables to get progressively smaller

925
00:36:45,180 --> 00:36:47,579
but yeah you've caught on kind of the

926
00:36:47,579 --> 00:36:49,200
biggest issue which initially we didn't

927
00:36:49,200 --> 00:36:50,820
even think about it was it was really

928
00:36:50,820 --> 00:36:52,380
fun we said well that's perfect and then

929
00:36:52,380 --> 00:36:54,119
someone said oh wait a second one you

930
00:36:54,119 --> 00:36:55,859
know what a few like as long as you have

931
00:36:55,859 --> 00:36:57,660
the as long as you have the key table

932
00:36:57,660 --> 00:37:00,599
you could still recover the data anyway

933
00:37:00,599 --> 00:37:01,560
um and

934
00:37:01,560 --> 00:37:03,300
there is also somewhere there's an

935
00:37:03,300 --> 00:37:05,700
element of plausible deniability where

936
00:37:05,700 --> 00:37:08,040
like if it comes a boy where you say

937
00:37:08,040 --> 00:37:10,740
well like I made the reasonable effort

938
00:37:10,740 --> 00:37:13,320
they destroyed the data

939
00:37:13,320 --> 00:37:13,880
um

940
00:37:13,880 --> 00:37:16,740
however like our actual long-term

941
00:37:16,740 --> 00:37:18,660
solution of course the proper security

942
00:37:18,660 --> 00:37:20,760
and privacy says that you cannot get

943
00:37:20,760 --> 00:37:24,839
data and so our goal is definitely to

944
00:37:24,839 --> 00:37:26,520
we just need to figure out the

945
00:37:26,520 --> 00:37:28,800
performance practical way

946
00:37:28,800 --> 00:37:30,900
to do this

947
00:37:30,900 --> 00:37:33,720
um to make sure that you might mentioned

948
00:37:33,720 --> 00:37:35,700
the encryption key table separately in

949
00:37:35,700 --> 00:37:37,440
such a way that you actually do destroy

950
00:37:37,440 --> 00:37:38,940
the key and although you keep backups

951
00:37:38,940 --> 00:37:40,740
you need to kind of recreate and clear

952
00:37:40,740 --> 00:37:44,720
out those backups as you go

953
00:37:45,660 --> 00:37:47,880
um so another example of what

954
00:37:47,880 --> 00:37:51,119
the purging rule looks like and in this

955
00:37:51,119 --> 00:37:54,660
case all of the Super Saver data must be

956
00:37:54,660 --> 00:37:56,280
purged after 20 years

957
00:37:56,280 --> 00:37:58,380
again the important part is that

958
00:37:58,380 --> 00:38:00,480
starting from the word select this is

959
00:38:00,480 --> 00:38:03,839
just a SQL query which means the

960
00:38:03,839 --> 00:38:05,579
database administrator understands what

961
00:38:05,579 --> 00:38:07,560
it does and you could run it to see if

962
00:38:07,560 --> 00:38:09,060
it even matches what you're trying to

963
00:38:09,060 --> 00:38:11,040
achieve

964
00:38:11,040 --> 00:38:12,900
um that that takes the customer and

965
00:38:12,900 --> 00:38:14,820
sales table joins them together and

966
00:38:14,820 --> 00:38:16,320
that's a condition

967
00:38:16,320 --> 00:38:18,839
of one year inch so this is kind of an

968
00:38:18,839 --> 00:38:21,540
example um and the important part that

969
00:38:21,540 --> 00:38:23,880
all of those policies operate on

970
00:38:23,880 --> 00:38:27,000
business records and use straight up SQL

971
00:38:27,000 --> 00:38:29,220
so that you're not inventing any new

972
00:38:29,220 --> 00:38:31,740
rules or any requirements that wouldn't

973
00:38:31,740 --> 00:38:35,240
be supported in some other database

974
00:38:36,180 --> 00:38:41,720
so to illustrate how this works

975
00:38:41,940 --> 00:38:45,599
I have a customer table that has user

976
00:38:45,599 --> 00:38:48,420
information and then

977
00:38:48,420 --> 00:38:51,900
I have policies that require me to purge

978
00:38:51,900 --> 00:38:54,420
social security number data

979
00:38:54,420 --> 00:38:57,780
and it data in this case but not name

980
00:38:57,780 --> 00:39:00,599
information so the shadow table has all

981
00:39:00,599 --> 00:39:03,540
of the same columns plus the expansion

982
00:39:03,540 --> 00:39:06,960
part is that for every value you have to

983
00:39:06,960 --> 00:39:08,520
have the

984
00:39:08,520 --> 00:39:10,500
not the decryption key but the

985
00:39:10,500 --> 00:39:12,540
identifier that points to the encryption

986
00:39:12,540 --> 00:39:14,280
key table that essentially says what key

987
00:39:14,280 --> 00:39:17,480
is to be used to decrypt the value

988
00:39:17,480 --> 00:39:19,680
customer information on the right you

989
00:39:19,680 --> 00:39:21,240
have

990
00:39:21,240 --> 00:39:22,260
[Music]

991
00:39:22,260 --> 00:39:23,339
um

992
00:39:23,339 --> 00:39:25,380
you have the three columns plus the

993
00:39:25,380 --> 00:39:27,240
three additional columns that specify

994
00:39:27,240 --> 00:39:30,000
that for example to to decrypt the

995
00:39:30,000 --> 00:39:33,119
social security number from rows two and

996
00:39:33,119 --> 00:39:36,240
four you would have to use the key

997
00:39:36,240 --> 00:39:39,240
identifies as access key in this case

998
00:39:39,240 --> 00:39:40,980
let's say they're both 500 same policy

999
00:39:40,980 --> 00:39:43,440
which means that when this key in the

1000
00:39:43,440 --> 00:39:45,780
actual table is gone both of those will

1001
00:39:45,780 --> 00:39:47,099
be merged

1002
00:39:47,099 --> 00:39:50,040
and so the customer Shadow table the one

1003
00:39:50,040 --> 00:39:51,540
with encrypted data is going to be

1004
00:39:51,540 --> 00:39:52,320
backup

1005
00:39:52,320 --> 00:39:55,619
and as of now the encryption idea of

1006
00:39:55,619 --> 00:39:57,720
minus one means that this data is not

1007
00:39:57,720 --> 00:40:00,300
subject to any parking rules so you can

1008
00:40:00,300 --> 00:40:01,920
just have it as is it doesn't matter it

1009
00:40:01,920 --> 00:40:04,079
will never be distracted

1010
00:40:04,079 --> 00:40:07,040
and then

1011
00:40:07,980 --> 00:40:10,500
um should you at a store at the time

1012
00:40:10,500 --> 00:40:13,920
where X the the ones highlighted in X3 x

1013
00:40:13,920 --> 00:40:17,660
15 and x22 are gone

1014
00:40:17,660 --> 00:40:20,640
then you're not able to equip the data

1015
00:40:20,640 --> 00:40:25,700
and so you restore the data accordingly

1016
00:40:28,160 --> 00:40:31,440
the key was also purged

1017
00:40:31,440 --> 00:40:33,839
um and essentially like if either the

1018
00:40:33,839 --> 00:40:36,060
whole row or some critical parts of

1019
00:40:36,060 --> 00:40:38,760
their own like I identifier itself is

1020
00:40:38,760 --> 00:40:40,440
gone then the road goes away from

1021
00:40:40,440 --> 00:40:41,820
anything

1022
00:40:41,820 --> 00:40:45,300
however for for other data the social

1023
00:40:45,300 --> 00:40:48,780
security number has been purged and the

1024
00:40:48,780 --> 00:40:50,280
rest of the data is fine so when you

1025
00:40:50,280 --> 00:40:52,920
restore the table you decrypt it back

1026
00:40:52,920 --> 00:40:56,280
into the user facing table and that's

1027
00:40:56,280 --> 00:40:58,280
what you get from a restore

1028
00:40:58,280 --> 00:41:01,140
past the expiration date

1029
00:41:01,140 --> 00:41:04,859
and so all this requires

1030
00:41:04,859 --> 00:41:06,540
and this is something we actually have

1031
00:41:06,540 --> 00:41:09,780
done tested is tweaking the backup

1032
00:41:09,780 --> 00:41:11,880
process a little bit

1033
00:41:11,880 --> 00:41:14,940
so that instead of backing up the actual

1034
00:41:14,940 --> 00:41:17,579
tables you back up the equivalent Shadow

1035
00:41:17,579 --> 00:41:21,060
table and your restore process restores

1036
00:41:21,060 --> 00:41:23,160
the shadow tables and then decrypts it

1037
00:41:23,160 --> 00:41:23,820
back

1038
00:41:23,820 --> 00:41:27,240
according to the policy

1039
00:41:27,240 --> 00:41:29,940
this part is also potentially costly but

1040
00:41:29,940 --> 00:41:32,099
it's a much lesser concern because

1041
00:41:32,099 --> 00:41:33,960
backup and restore

1042
00:41:33,960 --> 00:41:37,260
well backup just backs up a little bit

1043
00:41:37,260 --> 00:41:38,760
more data it doesn't have to do any more

1044
00:41:38,760 --> 00:41:41,040
work it's just a slightly bigger table

1045
00:41:41,040 --> 00:41:44,099
which is not a huge concern the restore

1046
00:41:44,099 --> 00:41:46,440
process requires decryption but in

1047
00:41:46,440 --> 00:41:48,060
general speaking your start process is

1048
00:41:48,060 --> 00:41:50,339
not the interactive part of the database

1049
00:41:50,339 --> 00:41:52,680
like presumably I mean it might be a bit

1050
00:41:52,680 --> 00:41:55,560
slower but it's not like interactive

1051
00:41:55,560 --> 00:41:58,619
queries that have to be very quick so

1052
00:41:58,619 --> 00:42:00,540
our biggest concern is the encryption

1053
00:42:00,540 --> 00:42:02,400
part because that affects the query

1054
00:42:02,400 --> 00:42:04,200
itself

1055
00:42:04,200 --> 00:42:07,980
and speaking of that so um

1056
00:42:07,980 --> 00:42:10,320
whatever stuff happens to your database

1057
00:42:10,320 --> 00:42:13,380
that applies to insert and update

1058
00:42:13,380 --> 00:42:15,000
not so much for

1059
00:42:15,000 --> 00:42:17,760
not so much for delete for purging the

1060
00:42:17,760 --> 00:42:20,579
idea is that the user updates a value

1061
00:42:20,579 --> 00:42:23,599
and should that be under some policy

1062
00:42:23,599 --> 00:42:27,660
then a trigger wakes up checks and

1063
00:42:27,660 --> 00:42:30,540
propagates the updates to the database

1064
00:42:30,540 --> 00:42:32,820
when you insert the value you just store

1065
00:42:32,820 --> 00:42:35,160
the encrypted value in the shadow table

1066
00:42:35,160 --> 00:42:37,740
when you update you have to

1067
00:42:37,740 --> 00:42:40,020
well encrypt the new value and then

1068
00:42:40,020 --> 00:42:42,599
update the corresponding encrypted value

1069
00:42:42,599 --> 00:42:44,820
and shut things like essentially all of

1070
00:42:44,820 --> 00:42:47,040
the changes you make to the table you as

1071
00:42:47,040 --> 00:42:50,099
the user to the table are propagated the

1072
00:42:50,099 --> 00:42:52,500
shadow copy of the table so that the

1073
00:42:52,500 --> 00:42:55,020
shadow always reflects what the user

1074
00:42:55,020 --> 00:42:56,400
facing table is

1075
00:42:56,400 --> 00:42:58,200
because that's the one that's going to

1076
00:42:58,200 --> 00:43:00,119
be backed up obviously has to be up to

1077
00:43:00,119 --> 00:43:04,280
date in order for that to make sense

1078
00:43:04,280 --> 00:43:06,960
and this is also working with triggers

1079
00:43:06,960 --> 00:43:08,760
an existing mechanism and again most

1080
00:43:08,760 --> 00:43:12,060
importantly the user doesn't have to

1081
00:43:12,060 --> 00:43:16,440
know that all of this no no sorry the

1082
00:43:16,440 --> 00:43:18,180
only kind of concern is of course that

1083
00:43:18,180 --> 00:43:20,160
there's some extra work happening behind

1084
00:43:20,160 --> 00:43:22,500
the scenes and that can slow down

1085
00:43:22,500 --> 00:43:24,240
queries

1086
00:43:24,240 --> 00:43:26,280
somewhere I have a slide but basically

1087
00:43:26,280 --> 00:43:29,220
it's more infection is not cheap and but

1088
00:43:29,220 --> 00:43:31,140
it's more a function of how much data is

1089
00:43:31,140 --> 00:43:32,760
affected

1090
00:43:32,760 --> 00:43:34,619
which

1091
00:43:34,619 --> 00:43:36,960
so it's not really a multiple concern if

1092
00:43:36,960 --> 00:43:39,119
you update a couple of rows and I can

1093
00:43:39,119 --> 00:43:40,740
practice no one being updates millions

1094
00:43:40,740 --> 00:43:42,480
of rows

1095
00:43:42,480 --> 00:43:44,940
most of the time I'm going to say

1096
00:43:44,940 --> 00:43:46,920
Endeavor it's quite most of the time so

1097
00:43:46,920 --> 00:43:48,720
if you updated the large number of rows

1098
00:43:48,720 --> 00:43:50,099
that's probably something that's not a

1099
00:43:50,099 --> 00:43:51,300
school because obviously like the

1100
00:43:51,300 --> 00:43:54,240
trigger has to do its work and that will

1101
00:43:54,240 --> 00:43:56,819
contribute to the total for your runtime

1102
00:43:56,819 --> 00:43:59,280
uh but it happens entirely transparently

1103
00:43:59,280 --> 00:44:02,220
and again our biggest you know goal in

1104
00:44:02,220 --> 00:44:04,200
the biggest battle is to make sure that

1105
00:44:04,200 --> 00:44:07,020
there is no like weird errors there's no

1106
00:44:07,020 --> 00:44:09,180
like existing scripts that break

1107
00:44:09,180 --> 00:44:11,760
none of it is effective so like this

1108
00:44:11,760 --> 00:44:13,619
operation just like the previous one

1109
00:44:13,619 --> 00:44:15,780
kind of failed

1110
00:44:15,780 --> 00:44:17,280
um

1111
00:44:17,280 --> 00:44:19,800
and in general like all of the

1112
00:44:19,800 --> 00:44:21,839
transaction stuff would just uh work the

1113
00:44:21,839 --> 00:44:23,160
same way but both further attention

1114
00:44:23,160 --> 00:44:25,380
purging the transaction support that

1115
00:44:25,380 --> 00:44:27,420
exists in databases would operate

1116
00:44:27,420 --> 00:44:30,560
uh in the same way

1117
00:44:33,079 --> 00:44:36,300
so in some I think we've already covered

1118
00:44:36,300 --> 00:44:37,560
that but

1119
00:44:37,560 --> 00:44:39,900
if something doesn't fall under your

1120
00:44:39,900 --> 00:44:42,359
policy then your job is done although

1121
00:44:42,359 --> 00:44:43,920
you still have to propagate it into the

1122
00:44:43,920 --> 00:44:45,480
shadow cable

1123
00:44:45,480 --> 00:44:47,940
I guess I should mention that

1124
00:44:47,940 --> 00:44:49,980
um yeah like over here so if someone

1125
00:44:49,980 --> 00:44:52,859
updates a name it's not under any policy

1126
00:44:52,859 --> 00:44:54,660
so you don't have to do an encryption

1127
00:44:54,660 --> 00:44:57,240
but of course you do have to update the

1128
00:44:57,240 --> 00:45:01,740
shadow table so that the name matches in

1129
00:45:01,740 --> 00:45:04,140
both tables

1130
00:45:04,140 --> 00:45:06,420
oops

1131
00:45:06,420 --> 00:45:08,819
um and then should there be multiple

1132
00:45:08,819 --> 00:45:10,560
policies

1133
00:45:10,560 --> 00:45:12,780
unlike with the detention where at the

1134
00:45:12,780 --> 00:45:14,339
moment at least we just store multiple

1135
00:45:14,339 --> 00:45:17,880
copies for purging it's even simpler you

1136
00:45:17,880 --> 00:45:19,740
just have to reconcile

1137
00:45:19,740 --> 00:45:22,200
um multiple policies to see which one

1138
00:45:22,200 --> 00:45:23,520
wins out

1139
00:45:23,520 --> 00:45:24,660
and

1140
00:45:24,660 --> 00:45:26,339
hopefully I got it correctly we always

1141
00:45:26,339 --> 00:45:29,700
likely we always double double check to

1142
00:45:29,700 --> 00:45:30,839
make sure we're on the right side of

1143
00:45:30,839 --> 00:45:32,700
things like wow one of them goes by Max

1144
00:45:32,700 --> 00:45:35,099
and one by minute so for purging the

1145
00:45:35,099 --> 00:45:37,260
shortest purging period like yes

1146
00:45:37,260 --> 00:45:39,060
question why wouldn't you just do that

1147
00:45:39,060 --> 00:45:41,520
with retention as well just in the

1148
00:45:41,520 --> 00:45:43,800
opposite direction so if you have a

1149
00:45:43,800 --> 00:45:46,380
policy if you have a law that says you

1150
00:45:46,380 --> 00:45:48,780
have to retain for three years and your

1151
00:45:48,780 --> 00:45:50,760
policy is to retain it for five but

1152
00:45:50,760 --> 00:45:53,220
there's no Purge policy why not just

1153
00:45:53,220 --> 00:45:55,800
keep one cop copy that it keeps them for

1154
00:45:55,800 --> 00:45:57,599
five years

1155
00:45:57,599 --> 00:46:01,040
that's an excellent point

1156
00:46:04,380 --> 00:46:07,200
you're asked an excellent questions I'm

1157
00:46:07,200 --> 00:46:09,900
not sure I feel like my best to have the

1158
00:46:09,900 --> 00:46:12,480
reason because obviously this is easier

1159
00:46:12,480 --> 00:46:14,040
right so you're saying that if you have

1160
00:46:14,040 --> 00:46:15,599
a three and a five year retention policy

1161
00:46:15,599 --> 00:46:17,760
you just do a day in four five or unless

1162
00:46:17,760 --> 00:46:20,480
otherwise requested

1163
00:46:20,480 --> 00:46:23,160
that does make sense we do make multiple

1164
00:46:23,160 --> 00:46:25,380
copies

1165
00:46:25,380 --> 00:46:27,859
um so

1166
00:46:28,260 --> 00:46:30,359
yeah that sounds right I you know I have

1167
00:46:30,359 --> 00:46:32,880
to go back perhaps for some reason that

1168
00:46:32,880 --> 00:46:34,260
I'm forgetting

1169
00:46:34,260 --> 00:46:36,480
or maybe we just didn't realize that

1170
00:46:36,480 --> 00:46:39,180
that obvious was scaring Us in the face

1171
00:46:39,180 --> 00:46:43,020
but yeah I can't think of a

1172
00:46:43,020 --> 00:46:45,060
just to keep the policies independent to

1173
00:46:45,060 --> 00:46:46,619
each other

1174
00:46:46,619 --> 00:46:48,780
right so it makes sense if they have

1175
00:46:48,780 --> 00:46:52,339
multiple policies and

1176
00:46:53,220 --> 00:46:54,839
I feel like I remember having some

1177
00:46:54,839 --> 00:46:57,240
discussion it's possible that like you

1178
00:46:57,240 --> 00:46:59,640
could have an update to a policy that

1179
00:46:59,640 --> 00:47:01,140
was some debate

1180
00:47:01,140 --> 00:47:03,240
that we had like what happens if someone

1181
00:47:03,240 --> 00:47:05,339
changes the policy can you still affect

1182
00:47:05,339 --> 00:47:07,920
things that were already archived

1183
00:47:07,920 --> 00:47:10,680
but

1184
00:47:10,680 --> 00:47:13,640
yeah you're right

1185
00:47:14,579 --> 00:47:16,859
sorry no no no no no no no you're

1186
00:47:16,859 --> 00:47:17,880
absolutely you're absolutely right

1187
00:47:17,880 --> 00:47:19,260
thanks

1188
00:47:19,260 --> 00:47:20,520
good evening

1189
00:47:20,520 --> 00:47:23,819
um you're absolutely right and I'll just

1190
00:47:23,819 --> 00:47:25,440
have to go back and look at the paper to

1191
00:47:25,440 --> 00:47:26,880
see if there is actually some clever

1192
00:47:26,880 --> 00:47:28,980
reason that's like written there but

1193
00:47:28,980 --> 00:47:30,720
at the glance yeah it seems to make

1194
00:47:30,720 --> 00:47:31,440
sense

1195
00:47:31,440 --> 00:47:32,220
um

1196
00:47:32,220 --> 00:47:34,079
maybe because this paper was written out

1197
00:47:34,079 --> 00:47:35,640
there and like in the first paper we

1198
00:47:35,640 --> 00:47:38,480
didn't think of it yet

1199
00:47:38,700 --> 00:47:42,420
um yes so I'll double check and if so we

1200
00:47:42,420 --> 00:47:43,740
will really simplify the retention

1201
00:47:43,740 --> 00:47:45,420
policy as well

1202
00:47:45,420 --> 00:47:47,460
for parking we're definitely doing that

1203
00:47:47,460 --> 00:47:51,000
at least and apply the the longest

1204
00:47:51,000 --> 00:47:53,819
surround policies and again some of the

1205
00:47:53,819 --> 00:47:56,520
fun comes from the fact that

1206
00:47:56,520 --> 00:47:58,200
you could have multiple overlapping

1207
00:47:58,200 --> 00:48:00,780
policies within the same table so like

1208
00:48:00,780 --> 00:48:02,579
each individual value within the same

1209
00:48:02,579 --> 00:48:04,319
record might be subject to different

1210
00:48:04,319 --> 00:48:05,160
things

1211
00:48:05,160 --> 00:48:06,960
but you know obviously all of this

1212
00:48:06,960 --> 00:48:08,579
applies to individual values you can't

1213
00:48:08,579 --> 00:48:09,960
operate them they're always because you

1214
00:48:09,960 --> 00:48:12,540
don't know how much it covers and um

1215
00:48:12,540 --> 00:48:14,400
you could have two values side by side

1216
00:48:14,400 --> 00:48:17,400
that are subject to different things

1217
00:48:17,400 --> 00:48:20,280
um and then as far as the key management

1218
00:48:20,280 --> 00:48:22,079
there is you know a little bit more to

1219
00:48:22,079 --> 00:48:22,980
it

1220
00:48:22,980 --> 00:48:25,920
um specifically you can't really afford

1221
00:48:25,920 --> 00:48:28,619
to um

1222
00:48:28,619 --> 00:48:30,839
essentially have an individual key for

1223
00:48:30,839 --> 00:48:32,579
forever value like that is also a

1224
00:48:32,579 --> 00:48:34,800
discussion we had I said well like

1225
00:48:34,800 --> 00:48:37,380
technically it's a keeper value right

1226
00:48:37,380 --> 00:48:41,040
but the problem with that is that now

1227
00:48:41,040 --> 00:48:44,040
you have double the database at least

1228
00:48:44,040 --> 00:48:47,040
yes if you're there based on 10 zillions

1229
00:48:47,040 --> 00:48:49,560
of values it's exactly it's earlier that

1230
00:48:49,560 --> 00:48:52,020
he's where you literally have a key for

1231
00:48:52,020 --> 00:48:53,520
every value or at least every value on

1232
00:48:53,520 --> 00:48:55,440
their policy

1233
00:48:55,440 --> 00:48:57,780
um so the way that

1234
00:48:57,780 --> 00:49:01,380
we have that seems reasonably practical

1235
00:49:01,380 --> 00:49:05,099
is to actually create time range buckets

1236
00:49:05,099 --> 00:49:08,700
so that things under the same policy

1237
00:49:08,700 --> 00:49:11,819
within the same bucket of time share the

1238
00:49:11,819 --> 00:49:12,720
same key

1239
00:49:12,720 --> 00:49:15,240
so if you have two customer records on

1240
00:49:15,240 --> 00:49:16,560
the same day

1241
00:49:16,560 --> 00:49:18,300
that fall under the same policy but

1242
00:49:18,300 --> 00:49:19,500
they're separate records and they're

1243
00:49:19,500 --> 00:49:21,780
like half an hour apart then you have

1244
00:49:21,780 --> 00:49:25,020
them share the same key uh that is not a

1245
00:49:25,020 --> 00:49:27,119
completely arbitrary invention because I

1246
00:49:27,119 --> 00:49:28,859
believe summer in gdpr they actually do

1247
00:49:28,859 --> 00:49:31,200
mention that like a database thing is

1248
00:49:31,200 --> 00:49:32,640
acceptable

1249
00:49:32,640 --> 00:49:34,380
somewhere I have to look it up but my

1250
00:49:34,380 --> 00:49:35,700
student has followed somewhere where it

1251
00:49:35,700 --> 00:49:37,380
says like at least typical or by default

1252
00:49:37,380 --> 00:49:39,180
or whatever that like at the day range

1253
00:49:39,180 --> 00:49:41,700
meaning that your expiration date is not

1254
00:49:41,700 --> 00:49:43,740
like down to seconds but rather it's you

1255
00:49:43,740 --> 00:49:46,140
know in granularity of days

1256
00:49:46,140 --> 00:49:48,480
um and the other nice thing of course is

1257
00:49:48,480 --> 00:49:50,400
that once you establish the bucket thing

1258
00:49:50,400 --> 00:49:51,780
imagine there's some you could do that

1259
00:49:51,780 --> 00:49:54,359
with a nice Trader where you can make

1260
00:49:54,359 --> 00:49:56,819
your bike it's you know one second long

1261
00:49:56,819 --> 00:49:58,380
um and then you're gonna have keys for

1262
00:49:58,380 --> 00:50:00,060
everything or you could make it more

1263
00:50:00,060 --> 00:50:02,339
like month based and then it's just

1264
00:50:02,339 --> 00:50:04,319
going to be a much smaller table a key

1265
00:50:04,319 --> 00:50:05,819
table to message

1266
00:50:05,819 --> 00:50:07,980
it's always nice to just have a tunable

1267
00:50:07,980 --> 00:50:10,140
system because you like it's all the

1268
00:50:10,140 --> 00:50:11,640
requirement dependent I think I

1269
00:50:11,640 --> 00:50:14,040
Catherine assume what the exact

1270
00:50:14,040 --> 00:50:15,660
requirements are and it's much easier to

1271
00:50:15,660 --> 00:50:17,220
just say

1272
00:50:17,220 --> 00:50:18,660
um depending on what you need like what

1273
00:50:18,660 --> 00:50:20,090
the granularity is

1274
00:50:20,090 --> 00:50:22,920
[Music]

1275
00:50:22,920 --> 00:50:25,140
um so we have evaluated all of this in

1276
00:50:25,140 --> 00:50:28,079
postgres although again I've been

1277
00:50:28,079 --> 00:50:32,040
careful to check that all of this uses

1278
00:50:32,040 --> 00:50:34,920
standard database tools which is

1279
00:50:34,920 --> 00:50:36,300
essentially

1280
00:50:36,300 --> 00:50:39,720
the user or SQL queries and triggers

1281
00:50:39,720 --> 00:50:43,079
that that's all you're needing and in

1282
00:50:43,079 --> 00:50:45,420
terms of performance on postgres

1283
00:50:45,420 --> 00:50:48,660
not surprisingly the

1284
00:50:48,660 --> 00:50:50,880
policy size

1285
00:50:50,880 --> 00:50:51,480
um

1286
00:50:51,480 --> 00:50:53,460
is pretty much the thing that determines

1287
00:50:53,460 --> 00:50:55,319
your costs

1288
00:50:55,319 --> 00:50:58,020
and that seems reasonable so it's not

1289
00:50:58,020 --> 00:50:59,640
really the size of your database

1290
00:50:59,640 --> 00:51:03,140
necessarily but the scope of how much

1291
00:51:03,140 --> 00:51:06,599
retention you have to do so if you have

1292
00:51:06,599 --> 00:51:10,260
to retain a fraction of your data

1293
00:51:10,260 --> 00:51:12,660
and then it's not that bad but you know

1294
00:51:12,660 --> 00:51:14,940
if you have to retain all of your data

1295
00:51:14,940 --> 00:51:16,740
under various policies then it's just

1296
00:51:16,740 --> 00:51:17,880
going to be costing

1297
00:51:17,880 --> 00:51:19,500
and if you have multiple policies

1298
00:51:19,500 --> 00:51:20,940
obviously that's going to add up because

1299
00:51:20,940 --> 00:51:24,420
I have to check each one of them

1300
00:51:24,420 --> 00:51:26,119
um and then we tested purging

1301
00:51:26,119 --> 00:51:28,500
encryptions really costly

1302
00:51:28,500 --> 00:51:30,660
we're working to optimize it

1303
00:51:30,660 --> 00:51:33,560
but otherwise it all works

1304
00:51:33,560 --> 00:51:35,760
[Music]

1305
00:51:35,760 --> 00:51:38,960
and we can manage

1306
00:51:41,119 --> 00:51:44,220
all right so I'm not going to go too

1307
00:51:44,220 --> 00:51:46,619
much into that I have another slide to

1308
00:51:46,619 --> 00:51:48,359
talk about consent

1309
00:51:48,359 --> 00:51:51,359
but since I don't have ah yes I don't

1310
00:51:51,359 --> 00:51:52,559
have a lot of time

1311
00:51:52,559 --> 00:51:55,380
all right

1312
00:51:55,380 --> 00:51:57,000
in that case I'll just briefly mention

1313
00:51:57,000 --> 00:51:57,760
that so

1314
00:51:57,760 --> 00:51:59,160
[Music]

1315
00:51:59,160 --> 00:52:01,800
we make sure all of this is compliant

1316
00:52:01,800 --> 00:52:03,900
with transactional mechanisms within the

1317
00:52:03,900 --> 00:52:06,359
database so that

1318
00:52:06,359 --> 00:52:07,020
um

1319
00:52:07,020 --> 00:52:08,579
so nothing goes sideways because

1320
00:52:08,579 --> 00:52:10,200
obviously you can't violate existing

1321
00:52:10,200 --> 00:52:13,740
guarantees and we're currently working

1322
00:52:13,740 --> 00:52:16,500
on on tweaking

1323
00:52:16,500 --> 00:52:18,359
um improving performance although for

1324
00:52:18,359 --> 00:52:20,460
retention we might have just gotten the

1325
00:52:20,460 --> 00:52:22,140
solution right here to just

1326
00:52:22,140 --> 00:52:24,180
go by the longest policy but we were

1327
00:52:24,180 --> 00:52:25,260
looking at trying to eliminate

1328
00:52:25,260 --> 00:52:29,280
redundancy in some clever way and having

1329
00:52:29,280 --> 00:52:31,440
something maybe more efficient

1330
00:52:31,440 --> 00:52:34,859
to to propagate and encrypt data instead

1331
00:52:34,859 --> 00:52:35,940
of using triggers because trigger

1332
00:52:35,940 --> 00:52:37,559
operates immediately if you did

1333
00:52:37,559 --> 00:52:38,940
something asynchronously in the

1334
00:52:38,940 --> 00:52:40,140
background it would be more efficient

1335
00:52:40,140 --> 00:52:45,180
but then you really have to juggle the

1336
00:52:45,180 --> 00:52:46,020
um

1337
00:52:46,020 --> 00:52:47,700
to make sure that you're not breaking

1338
00:52:47,700 --> 00:52:51,000
any of the database existing guarantees

1339
00:52:51,000 --> 00:52:53,819
so I'll just add one more thing as a

1340
00:52:53,819 --> 00:52:56,280
little example so consent is something

1341
00:52:56,280 --> 00:52:59,040
we're still working on

1342
00:52:59,040 --> 00:53:01,319
we have one paper on the review

1343
00:53:01,319 --> 00:53:02,700
um it's quite strict here but just to

1344
00:53:02,700 --> 00:53:05,280
give a sense of the at least of the fun

1345
00:53:05,280 --> 00:53:07,339
and complexity behind it

1346
00:53:07,339 --> 00:53:10,859
so small example that we used so let's

1347
00:53:10,859 --> 00:53:12,839
say you have customer information that

1348
00:53:12,839 --> 00:53:16,319
you've collected such that the customers

1349
00:53:16,319 --> 00:53:17,579
um

1350
00:53:17,579 --> 00:53:19,319
give you permission

1351
00:53:19,319 --> 00:53:21,359
do not give you permission to use the

1352
00:53:21,359 --> 00:53:23,579
data for marketing so the consent is

1353
00:53:23,579 --> 00:53:25,680
applied in the sense that if someone a

1354
00:53:25,680 --> 00:53:27,599
customer gave you information when

1355
00:53:27,599 --> 00:53:29,960
they're placed an order then they

1356
00:53:29,960 --> 00:53:32,520
implicitly are giving you permission to

1357
00:53:32,520 --> 00:53:34,200
use it for order processing so you don't

1358
00:53:34,200 --> 00:53:36,660
have to ask again but if you want to use

1359
00:53:36,660 --> 00:53:38,520
the customer data for marketing you

1360
00:53:38,520 --> 00:53:39,839
essentially have to have explicit

1361
00:53:39,839 --> 00:53:41,819
permission and I encourage you to go

1362
00:53:41,819 --> 00:53:45,300
especially urus.com we use the picture

1363
00:53:45,300 --> 00:53:46,800
from their website because the thing

1364
00:53:46,800 --> 00:53:48,960
that pops up has about 50 different

1365
00:53:48,960 --> 00:53:51,180
things to choose from permission a

1366
00:53:51,180 --> 00:53:52,800
permission B and then the whole list of

1367
00:53:52,800 --> 00:53:54,180
like language our data with the

1368
00:53:54,180 --> 00:53:55,619
following Partners in the list of that

1369
00:53:55,619 --> 00:53:56,720
as well

1370
00:53:56,720 --> 00:54:00,000
and so to just see why it's not that

1371
00:54:00,000 --> 00:54:01,800
simple as far as consent goes so let's

1372
00:54:01,800 --> 00:54:04,800
say you have this customer data and they

1373
00:54:04,800 --> 00:54:05,819
have

1374
00:54:05,819 --> 00:54:07,859
for the data you do not have permission

1375
00:54:07,859 --> 00:54:09,359
to use for marketing

1376
00:54:09,359 --> 00:54:12,359
now I have a query here

1377
00:54:12,359 --> 00:54:14,400
contrived the made up query that's

1378
00:54:14,400 --> 00:54:16,859
looking for people who are older than 40

1379
00:54:16,859 --> 00:54:19,319
and come from household

1380
00:54:19,319 --> 00:54:19,790
of

1381
00:54:19,790 --> 00:54:21,180
[Music]

1382
00:54:21,180 --> 00:54:23,579
I get greater than two I'm not sure what

1383
00:54:23,579 --> 00:54:25,859
I was going for in the policies but a

1384
00:54:25,859 --> 00:54:27,720
household above certain size the point

1385
00:54:27,720 --> 00:54:30,800
is aggregated data so essentially

1386
00:54:30,800 --> 00:54:34,579
because the consent refers to revealing

1387
00:54:34,579 --> 00:54:37,440
individual data

1388
00:54:37,440 --> 00:54:40,559
anyone who makes it

1389
00:54:40,559 --> 00:54:42,780
any particular user wouldn't give you

1390
00:54:42,780 --> 00:54:45,140
permission and makes it into output

1391
00:54:45,140 --> 00:54:47,400
is not

1392
00:54:47,400 --> 00:54:50,579
you should not be using or accessing

1393
00:54:50,579 --> 00:54:53,700
their data but any user who did not give

1394
00:54:53,700 --> 00:54:56,040
you their permission but who was only

1395
00:54:56,040 --> 00:54:58,800
used to perform an aggregation

1396
00:54:58,800 --> 00:55:01,440
like some sort of average for the for

1397
00:55:01,440 --> 00:55:04,079
the city and such that is still allowed

1398
00:55:04,079 --> 00:55:06,300
so even though like the the query is

1399
00:55:06,300 --> 00:55:09,180
used for marketing if you didn't if none

1400
00:55:09,180 --> 00:55:11,460
of individual user data made it in

1401
00:55:11,460 --> 00:55:12,900
college but if it might have been just

1402
00:55:12,900 --> 00:55:14,460
aggregated

1403
00:55:14,460 --> 00:55:16,740
um then it is in fact acceptable

1404
00:55:16,740 --> 00:55:19,740
and therefore the point is that in order

1405
00:55:19,740 --> 00:55:21,660
to answer some of those questions you

1406
00:55:21,660 --> 00:55:23,520
have to actually look at how the data is

1407
00:55:23,520 --> 00:55:25,200
processed it's not there enough to tell

1408
00:55:25,200 --> 00:55:26,700
what it's for

1409
00:55:26,700 --> 00:55:28,579
um and just kind of as an additional

1410
00:55:28,579 --> 00:55:31,680
example in the same category

1411
00:55:31,680 --> 00:55:33,359
um

1412
00:55:33,359 --> 00:55:36,540
the one of the permission types that you

1413
00:55:36,540 --> 00:55:39,480
might give refers to combining the data

1414
00:55:39,480 --> 00:55:42,359
with other sources so you might collect

1415
00:55:42,359 --> 00:55:44,220
the data that you can use but you're

1416
00:55:44,220 --> 00:55:46,140
explicitly not allowed to combine it

1417
00:55:46,140 --> 00:55:48,720
with the same person's data collected

1418
00:55:48,720 --> 00:55:50,700
throughout the means like customer data

1419
00:55:50,700 --> 00:55:53,160
versus like web Analytics and therefore

1420
00:55:53,160 --> 00:55:56,339
again what makes it a real challenge is

1421
00:55:56,339 --> 00:55:58,440
that you have to actually look at what

1422
00:55:58,440 --> 00:56:00,240
the database query is doing it's not

1423
00:56:00,240 --> 00:56:01,859
enough to say well like you can't use

1424
00:56:01,859 --> 00:56:03,300
marketing because this is marketing

1425
00:56:03,300 --> 00:56:05,220
query you have to look and see well what

1426
00:56:05,220 --> 00:56:07,079
am I actually doing with data and is it

1427
00:56:07,079 --> 00:56:08,880
or is it not violating

1428
00:56:08,880 --> 00:56:11,960
existing rules

1429
00:56:14,220 --> 00:56:15,960
all right

1430
00:56:15,960 --> 00:56:18,920
so

1431
00:56:19,740 --> 00:56:23,460
I think we've pretty much covered all of

1432
00:56:23,460 --> 00:56:25,980
this but as a summary our goal is to

1433
00:56:25,980 --> 00:56:27,780
incorporate all of those cool things

1434
00:56:27,780 --> 00:56:30,420
into database systems

1435
00:56:30,420 --> 00:56:32,460
all possible database systems are

1436
00:56:32,460 --> 00:56:37,819
generally as possible in such a way that

1437
00:56:37,819 --> 00:56:39,900
transparently operates doesn't break any

1438
00:56:39,900 --> 00:56:40,920
rules

1439
00:56:40,920 --> 00:56:42,599
and

1440
00:56:42,599 --> 00:56:44,660
is easy to support and hopefully

1441
00:56:44,660 --> 00:56:48,920
somewhat affordable overhead

1442
00:56:50,280 --> 00:56:51,960
at this point if there are any more

1443
00:56:51,960 --> 00:56:53,520
questions

1444
00:56:53,520 --> 00:56:55,380
I'd be habitats or if we have a few more

1445
00:56:55,380 --> 00:56:57,800
minutes yes

1446
00:56:58,260 --> 00:57:01,260
calculating that out

1447
00:57:01,260 --> 00:57:04,020
so every time that I needed to meet goes

1448
00:57:04,020 --> 00:57:05,760
into budget and I think of Hardware all

1449
00:57:05,760 --> 00:57:07,500
that other stuff

1450
00:57:07,500 --> 00:57:10,579
back so that

1451
00:57:11,460 --> 00:57:13,380
the hard work

1452
00:57:13,380 --> 00:57:16,319
meaning that objective I can actually

1453
00:57:16,319 --> 00:57:19,020
calculate about it so well I know

1454
00:57:19,020 --> 00:57:20,280
this

1455
00:57:20,280 --> 00:57:22,559
not only that and then extra encryption

1456
00:57:22,559 --> 00:57:24,599
piece because that's where we're going

1457
00:57:24,599 --> 00:57:27,660
we're using that to add into the formula

1458
00:57:27,660 --> 00:57:29,460
to determine can I meet the objective

1459
00:57:29,460 --> 00:57:31,940
with

1460
00:57:33,840 --> 00:57:36,939
[Music]

1461
00:57:38,400 --> 00:57:40,319
that piece

1462
00:57:40,319 --> 00:57:44,300
coming out to the people who are

1463
00:57:46,920 --> 00:57:49,440
I see that's an excellent point so the

1464
00:57:49,440 --> 00:57:52,319
question is how does the decryption cost

1465
00:57:52,319 --> 00:57:55,020
factor and the objective of recovery in

1466
00:57:55,020 --> 00:57:56,940
the store runtime and this is actually

1467
00:57:56,940 --> 00:57:58,800
one of the reasons I come to

1468
00:57:58,800 --> 00:58:01,980
Real World videos because like this is

1469
00:58:01,980 --> 00:58:03,540
not the first question that I come up

1470
00:58:03,540 --> 00:58:05,280
with you know being an Academia and I'm

1471
00:58:05,280 --> 00:58:07,740
aware of like additional real world

1472
00:58:07,740 --> 00:58:09,480
requirements so like the answer is no we

1473
00:58:09,480 --> 00:58:12,300
did not try to measure that uh but yeah

1474
00:58:12,300 --> 00:58:13,920
it sounds like the fact we really should

1475
00:58:13,920 --> 00:58:16,859
one of the problems is that it's a

1476
00:58:16,859 --> 00:58:18,420
function of how much of the data is

1477
00:58:18,420 --> 00:58:21,180
impacted which you would have to measure

1478
00:58:21,180 --> 00:58:22,200
but

1479
00:58:22,200 --> 00:58:24,119
I'll you know all that into the to-do

1480
00:58:24,119 --> 00:58:27,240
list uh to try to figure out so try to

1481
00:58:27,240 --> 00:58:29,339
estimate the extra overhead which would

1482
00:58:29,339 --> 00:58:31,800
in fact extend the recovery time

1483
00:58:31,800 --> 00:58:33,839
you're absolutely right would have to

1484
00:58:33,839 --> 00:58:35,220
have some sort of estimate because

1485
00:58:35,220 --> 00:58:36,780
unfortunately it's not even the function

1486
00:58:36,780 --> 00:58:38,520
of your data right but like the amount

1487
00:58:38,520 --> 00:58:41,880
of stuff covered under policy

1488
00:58:41,880 --> 00:58:44,819
yeah whatever is going to be done then

1489
00:58:44,819 --> 00:58:46,440
gives you a number and let you know what

1490
00:58:46,440 --> 00:58:48,240
that is right

1491
00:58:48,240 --> 00:58:50,520
right yeah see this is again like the

1492
00:58:50,520 --> 00:58:53,220
the tricky part I I'm mostly worried

1493
00:58:53,220 --> 00:58:55,200
about kind of the user query being

1494
00:58:55,200 --> 00:58:57,359
slowed down because I at least clearly

1495
00:58:57,359 --> 00:58:58,559
understand that

1496
00:58:58,559 --> 00:59:01,380
um recovery seems see that was amazing

1497
00:59:01,380 --> 00:59:03,180
thing to say recovery seems like a

1498
00:59:03,180 --> 00:59:04,380
lesser concerned because you're not

1499
00:59:04,380 --> 00:59:05,700
going to have like a user sitting in

1500
00:59:05,700 --> 00:59:07,260
front of a terminal but

1501
00:59:07,260 --> 00:59:10,020
recovery guarantees having an actual

1502
00:59:10,020 --> 00:59:12,240
deadline to me while that is just as

1503
00:59:12,240 --> 00:59:14,339
much of a problem uh but like a

1504
00:59:14,339 --> 00:59:15,900
different issue because you're doing the

1505
00:59:15,900 --> 00:59:18,180
overall Data Center

1506
00:59:18,180 --> 00:59:22,079
yes so if I understand correctly when

1507
00:59:22,079 --> 00:59:24,839
you're talking about making the policy

1508
00:59:24,839 --> 00:59:27,240
and mapping that to the technical

1509
00:59:27,240 --> 00:59:30,900
control it's easier if the database

1510
00:59:30,900 --> 00:59:33,839
administrator and the policy maker are

1511
00:59:33,839 --> 00:59:37,020
in are in Communications on how to

1512
00:59:37,020 --> 00:59:40,260
describe the policy like the SQL query

1513
00:59:40,260 --> 00:59:43,220
inside the policy too

1514
00:59:43,220 --> 00:59:47,940
to make it easier to map to an actual

1515
00:59:47,940 --> 00:59:50,160
great so the question is you know is it

1516
00:59:50,160 --> 00:59:52,260
is it better to have the database

1517
00:59:52,260 --> 00:59:54,059
administrative and policy maker you know

1518
00:59:54,059 --> 00:59:56,460
sit down and translate the textbook the

1519
00:59:56,460 --> 00:59:58,619
policy into SQL query and the answer is

1520
00:59:58,619 --> 01:00:00,420
yes no how is it easier I think you

1521
01:00:00,420 --> 01:00:02,400
pretty much have to do that and that's

1522
01:00:02,400 --> 01:00:04,260
perhaps the least unrementable part

1523
01:00:04,260 --> 01:00:07,020
because once it's like our goal is once

1524
01:00:07,020 --> 01:00:09,240
it's in SQL form we can automate it

1525
01:00:09,240 --> 01:00:11,819
through database tools but if the rule

1526
01:00:11,819 --> 01:00:13,260
says you know customer data must be

1527
01:00:13,260 --> 01:00:14,760
retained for three years someone's got

1528
01:00:14,760 --> 01:00:18,180
to tell you what that means and they

1529
01:00:18,180 --> 01:00:19,680
would have to put it into terms the

1530
01:00:19,680 --> 01:00:21,599
database administrator can write a SQL

1531
01:00:21,599 --> 01:00:23,460
part in fact it's required then it's

1532
01:00:23,460 --> 01:00:26,579
like the manual step that we currently

1533
01:00:26,579 --> 01:00:28,859
have especially because it's not just

1534
01:00:28,859 --> 01:00:31,380
policy maker oftentimes as I understand

1535
01:00:31,380 --> 01:00:33,960
at the larger scale it's also a legal

1536
01:00:33,960 --> 01:00:36,240
counsel and sits down it says well is

1537
01:00:36,240 --> 01:00:37,740
this column you know really a part of it

1538
01:00:37,740 --> 01:00:40,200
or does it pull into this policy

1539
01:00:40,200 --> 01:00:42,059
um so it might not even be enough to

1540
01:00:42,059 --> 01:00:43,559
have a policy making a database

1541
01:00:43,559 --> 01:00:45,059
administrator you might have a lower

1542
01:00:45,059 --> 01:00:47,819
sentence as well so yes absolutely you

1543
01:00:47,819 --> 01:00:49,920
have to do that and one day we hope to

1544
01:00:49,920 --> 01:00:52,500
make it at least semi-automated but you

1545
01:00:52,500 --> 01:00:54,119
would have to do text analysis and who

1546
01:00:54,119 --> 01:00:56,720
knows what else

1547
01:00:58,270 --> 01:01:01,300
[Music]

1548
01:01:05,460 --> 01:01:07,859
have enough resources to do that

1549
01:01:07,859 --> 01:01:09,660
database

1550
01:01:09,660 --> 01:01:13,220
oh absolutely yeah

1551
01:01:16,280 --> 01:01:18,780
I'm not sure how it works though to be

1552
01:01:18,780 --> 01:01:19,980
honest like I don't have a clear

1553
01:01:19,980 --> 01:01:21,720
understanding of the database and the

1554
01:01:21,720 --> 01:01:23,880
technical side of it and I like I can

1555
01:01:23,880 --> 01:01:25,680
tell you for a fact that for certain

1556
01:01:25,680 --> 01:01:27,480
things like there's just no way that you

1557
01:01:27,480 --> 01:01:29,440
could meet those requirements

1558
01:01:29,440 --> 01:01:32,489
[Music]

1559
01:01:36,660 --> 01:01:39,000
or managing the data not know how much

1560
01:01:39,000 --> 01:01:41,819
data they actually have to save

1561
01:01:41,819 --> 01:01:44,940
money to make those calculations

1562
01:01:44,940 --> 01:01:48,480
how much database or Hardware do you

1563
01:01:48,480 --> 01:01:50,160
need to have or save those things how

1564
01:01:50,160 --> 01:01:51,130
much is that going to cost

1565
01:01:51,130 --> 01:01:53,160
[Music]

1566
01:01:53,160 --> 01:01:56,180
right absolutely

1567
01:01:56,700 --> 01:01:58,140
right then again it might be a little

1568
01:01:58,140 --> 01:01:59,760
bit naive but like sometimes I'll look

1569
01:01:59,760 --> 01:02:01,980
at those pulses and I can just react and

1570
01:02:01,980 --> 01:02:03,839
say like as far as I know how database

1571
01:02:03,839 --> 01:02:06,119
works you can you can't beat this

1572
01:02:06,119 --> 01:02:07,500
requirement and then like from forensic

1573
01:02:07,500 --> 01:02:09,720
analysis perspective even if you think

1574
01:02:09,720 --> 01:02:11,400
data is being deleted it's just not like

1575
01:02:11,400 --> 01:02:13,500
I know how much of it stays around that

1576
01:02:13,500 --> 01:02:16,200
there is just no physical way to uh at

1577
01:02:16,200 --> 01:02:17,700
the military part so the part we're

1578
01:02:17,700 --> 01:02:20,280
trying to solve is you still have to do

1579
01:02:20,280 --> 01:02:22,980
that translation part you still have to

1580
01:02:22,980 --> 01:02:25,559
sit down with database administrator but

1581
01:02:25,559 --> 01:02:27,599
the idea is like once you can kind of go

1582
01:02:27,599 --> 01:02:30,540
back and forth and agree then the whole

1583
01:02:30,540 --> 01:02:32,400
business like database administrator

1584
01:02:32,400 --> 01:02:35,220
could both verify what is happening and

1585
01:02:35,220 --> 01:02:38,099
have an easy tool to actually enforce it

1586
01:02:38,099 --> 01:02:41,160
but I mean actually jumping that

1587
01:02:41,160 --> 01:02:43,380
boundary probably be a new research

1588
01:02:43,380 --> 01:02:46,380
project of helping translate policy text

1589
01:02:46,380 --> 01:02:50,240
to to require because

1590
01:02:53,000 --> 01:02:55,799
equivalent of the policy you still have

1591
01:02:55,799 --> 01:02:57,900
to actually enforce it and there is no

1592
01:02:57,900 --> 01:03:02,220
built-in tool to do that

1593
01:03:02,220 --> 01:03:04,740
if I say that you're always asking how

1594
01:03:04,740 --> 01:03:06,839
can I save space

1595
01:03:06,839 --> 01:03:09,119
you know and that's always where that

1596
01:03:09,119 --> 01:03:10,859
comes back takes

1597
01:03:10,859 --> 01:03:13,740
yeah unfortunately yeah this is not

1598
01:03:13,740 --> 01:03:15,359
gonna save space I can tell you that

1599
01:03:15,359 --> 01:03:17,640
like it's going to cost extra like all

1600
01:03:17,640 --> 01:03:20,339
we're trying to do is to kind of keep a

1601
01:03:20,339 --> 01:03:22,680
lid on how much overhead it is and

1602
01:03:22,680 --> 01:03:25,200
hopefully have some sort of proof not

1603
01:03:25,200 --> 01:03:26,700
just the implementation where we say

1604
01:03:26,700 --> 01:03:28,440
trust this but something which you can

1605
01:03:28,440 --> 01:03:30,900
validate do you have like someone comes

1606
01:03:30,900 --> 01:03:32,520
in that you could generate a report and

1607
01:03:32,520 --> 01:03:34,440
say like we are compliant here's a list

1608
01:03:34,440 --> 01:03:37,020
of things and like we can confirm it but

1609
01:03:37,020 --> 01:03:39,500
obviously

1610
01:03:40,520 --> 01:03:43,020
looking at the overhead and like

1611
01:03:43,020 --> 01:03:45,180
ultimately it's like well it's going to

1612
01:03:45,180 --> 01:03:47,520
cost you a complex it's going to cost

1613
01:03:47,520 --> 01:03:48,660
you and

1614
01:03:48,660 --> 01:03:51,359
you know hopefully and again my my

1615
01:03:51,359 --> 01:03:53,579
attorney colleague said that it's a

1616
01:03:53,579 --> 01:03:56,400
process and like people keep pushing and

1617
01:03:56,400 --> 01:03:57,540
eventually

1618
01:03:57,540 --> 01:04:00,299
you know muscle declined because again I

1619
01:04:00,299 --> 01:04:01,680
can tell you for a fact that if you're

1620
01:04:01,680 --> 01:04:04,020
having sort of urging policy then like

1621
01:04:04,020 --> 01:04:06,660
every backup must be in violation of it

1622
01:04:06,660 --> 01:04:08,460
I'm not a lawyer but as far as I can

1623
01:04:08,460 --> 01:04:10,500
tell this is just the case then like

1624
01:04:10,500 --> 01:04:12,960
even if you have the best intentions you

1625
01:04:12,960 --> 01:04:14,460
can feel it

1626
01:04:14,460 --> 01:04:15,119
um

1627
01:04:15,119 --> 01:04:18,119
delete data for which you don't have a

1628
01:04:18,119 --> 01:04:20,339
full inventory I guess something's okay

1629
01:04:20,339 --> 01:04:22,319
you just can't like it doesn't matter

1630
01:04:22,319 --> 01:04:24,299
how much you want to you cannot

1631
01:04:24,299 --> 01:04:25,020
and

1632
01:04:25,020 --> 01:04:26,579
[Music]

1633
01:04:26,579 --> 01:04:29,099
I my understanding is that

1634
01:04:29,099 --> 01:04:31,380
this might be tested in court sometime

1635
01:04:31,380 --> 01:04:33,660
soon but basically you can't argue you

1636
01:04:33,660 --> 01:04:36,540
don't have it and so the other part of

1637
01:04:36,540 --> 01:04:37,980
motivation is that it's also potentially

1638
01:04:37,980 --> 01:04:39,240
liability

1639
01:04:39,240 --> 01:04:42,599
so like if I didn't argue that you still

1640
01:04:42,599 --> 01:04:45,500
have that data then you still have it

1641
01:04:45,500 --> 01:04:49,140
and you might be requested to produce it

1642
01:04:49,140 --> 01:04:51,299
there's some but there's some fun legal

1643
01:04:51,299 --> 01:04:53,819
cases like trading off the data that

1644
01:04:53,819 --> 01:04:55,619
must produce on the cost of producing it

1645
01:04:55,619 --> 01:04:57,480
there were some cases a few years ago

1646
01:04:57,480 --> 01:04:58,799
but

1647
01:04:58,799 --> 01:05:00,900
ultimately

1648
01:05:00,900 --> 01:05:02,520
this is going to be resolved eventually

1649
01:05:02,520 --> 01:05:04,020
I think it's just still involving

1650
01:05:04,020 --> 01:05:06,599
involving field because gdpr is new and

1651
01:05:06,599 --> 01:05:09,359
CCPA is even newer and like the new

1652
01:05:09,359 --> 01:05:11,099
policies that are being passed like

1653
01:05:11,099 --> 01:05:13,559
right now I think it was like a few

1654
01:05:13,559 --> 01:05:15,420
months ago that they announced that

1655
01:05:15,420 --> 01:05:16,680
they're going to start they're going to

1656
01:05:16,680 --> 01:05:19,200
enforce the CCP in California I think it

1657
01:05:19,200 --> 01:05:22,140
was like within a year or so that they

1658
01:05:22,140 --> 01:05:24,720
passed it before but that was some grace

1659
01:05:24,720 --> 01:05:27,140
period

1660
01:05:27,240 --> 01:05:30,000
thank you January 1st there you go so

1661
01:05:30,000 --> 01:05:31,680
like now they're actually enforcing it

1662
01:05:31,680 --> 01:05:32,940
and

1663
01:05:32,940 --> 01:05:35,220
it's yeah they're uh we're actually

1664
01:05:35,220 --> 01:05:36,900
we're working on trying to build the

1665
01:05:36,900 --> 01:05:38,819
defined database there are several

1666
01:05:38,819 --> 01:05:42,000
websites and tools that mostly for gdpr

1667
01:05:42,000 --> 01:05:45,059
that are keeping track of either like

1668
01:05:45,059 --> 01:05:47,400
the biggest or like an overview of fines

1669
01:05:47,400 --> 01:05:49,740
that are imposed and the reasons for it

1670
01:05:49,740 --> 01:05:52,339
to finally

1671
01:05:55,260 --> 01:05:57,299
maybe you guys can tell me if this is a

1672
01:05:57,299 --> 01:05:59,099
real world problem but I'm kind of

1673
01:05:59,099 --> 01:06:00,720
fascinated with the idea of that partial

1674
01:06:00,720 --> 01:06:02,339
purse where I would say after three

1675
01:06:02,339 --> 01:06:04,619
years the social security number isn't

1676
01:06:04,619 --> 01:06:06,839
retrievable anymore effectively turns

1677
01:06:06,839 --> 01:06:07,920
into the null

1678
01:06:07,920 --> 01:06:09,960
what does that do to the application the

1679
01:06:09,960 --> 01:06:11,760
problem is expecting a value to come

1680
01:06:11,760 --> 01:06:14,040
back and it was a written handled or not

1681
01:06:14,040 --> 01:06:16,440
that's an excellent question so like

1682
01:06:16,440 --> 01:06:18,720
what happens to what happens to the data

1683
01:06:18,720 --> 01:06:21,119
that's that's partially destroyed yeah

1684
01:06:21,119 --> 01:06:24,240
the application might not like it the

1685
01:06:24,240 --> 01:06:25,559
thought has occurred like one the

1686
01:06:25,559 --> 01:06:27,240
simplest example if your table does not

1687
01:06:27,240 --> 01:06:29,400
allow you to have a null then like that

1688
01:06:29,400 --> 01:06:31,200
would be a problem in the store

1689
01:06:31,200 --> 01:06:32,940
um one thing that someone had suggested

1690
01:06:32,940 --> 01:06:35,220
when I gave this talk before and I think

1691
01:06:35,220 --> 01:06:37,140
we can do it through um encryption

1692
01:06:37,140 --> 01:06:39,660
decryption mechanism is to essentially

1693
01:06:39,660 --> 01:06:42,680
anonymize it meaning that like what

1694
01:06:42,680 --> 01:06:44,940
sudanonymizes it where you decrypt it

1695
01:06:44,940 --> 01:06:46,859
not until now but into some other

1696
01:06:46,859 --> 01:06:50,059
unrelated value that's consistent right

1697
01:06:50,059 --> 01:06:52,440
so especially for things like salaries

1698
01:06:52,440 --> 01:06:54,240
or whatever but the idea would be that

1699
01:06:54,240 --> 01:06:56,160
maybe the same value you know Maps into

1700
01:06:56,160 --> 01:06:58,079
something else but it's some random

1701
01:06:58,079 --> 01:07:01,500
amount and then this way the value of

1702
01:07:01,500 --> 01:07:03,240
the meaningless but it's definitely not

1703
01:07:03,240 --> 01:07:04,799
going to break the application

1704
01:07:04,799 --> 01:07:06,180
so you could either have like a

1705
01:07:06,180 --> 01:07:09,059
placeholder or it's on our to-do list to

1706
01:07:09,059 --> 01:07:11,720
have something that decrypts into

1707
01:07:11,720 --> 01:07:16,020
anonymized uh value rather than the null

1708
01:07:16,020 --> 01:07:17,880
because yeah you're right for some cases

1709
01:07:17,880 --> 01:07:19,680
application my Traders don't enjoyed

1710
01:07:19,680 --> 01:07:21,740
that

1711
01:07:23,880 --> 01:07:25,740
within the application

1712
01:07:25,740 --> 01:07:28,200
you could also do it default but I bet

1713
01:07:28,200 --> 01:07:30,780
you it's not gonna fly because for

1714
01:07:30,780 --> 01:07:32,339
example social security number would

1715
01:07:32,339 --> 01:07:34,980
typically have a unique tag on it

1716
01:07:34,980 --> 01:07:37,819
uh

1717
01:07:39,500 --> 01:07:41,819
people do that it wouldn't necessarily

1718
01:07:41,819 --> 01:07:43,500
be well wouldn't necessarily be a key

1719
01:07:43,500 --> 01:07:44,760
but it would definitely be unique so

1720
01:07:44,760 --> 01:07:46,020
having like repeating Social Security

1721
01:07:46,020 --> 01:07:48,960
numbers is also not great

1722
01:07:48,960 --> 01:07:51,440
um so I think the solution is to

1723
01:07:51,440 --> 01:07:54,539
essentially do the anonymization

1724
01:07:54,539 --> 01:07:56,640
meaning that if you replace it by some

1725
01:07:56,640 --> 01:07:58,859
valid value that follows the same rule

1726
01:07:58,859 --> 01:08:00,539
so that none of the applications or

1727
01:08:00,539 --> 01:08:02,400
queries you have freak out

1728
01:08:02,400 --> 01:08:04,380
but of course like you'd still have to

1729
01:08:04,380 --> 01:08:05,940
be aware of the fact that there was no

1730
01:08:05,940 --> 01:08:08,900
valid numbers

1731
01:08:13,280 --> 01:08:17,299
to random Social Security

1732
01:08:17,839 --> 01:08:20,339
or you know alternatively you flag

1733
01:08:20,339 --> 01:08:21,899
someone like a bunch of people that's

1734
01:08:21,899 --> 01:08:23,460
having a fake Social Security number

1735
01:08:23,460 --> 01:08:26,779
because they all have the same value

1736
01:08:33,299 --> 01:08:35,460
and there's still a lot of work to be

1737
01:08:35,460 --> 01:08:36,779
done which is why I'm like I'm out here

1738
01:08:36,779 --> 01:08:38,640
trying to learn a little bit more about

1739
01:08:38,640 --> 01:08:40,319
video World applications because I'm

1740
01:08:40,319 --> 01:08:41,580
really trying to make it work in

1741
01:08:41,580 --> 01:08:43,859
practice because I'm aware of how often

1742
01:08:43,859 --> 01:08:46,500
academic Solutions are just that

1743
01:08:46,500 --> 01:08:48,660
you know in classroom and complete

1744
01:08:48,660 --> 01:08:51,139
prototype

1745
01:08:51,420 --> 01:08:54,679
all right well thank you very much

1746
01:09:22,399 --> 01:09:25,698
right here

1747
01:09:28,979 --> 01:09:32,229
[Music]

