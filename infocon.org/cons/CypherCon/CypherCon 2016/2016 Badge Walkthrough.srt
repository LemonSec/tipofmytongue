1
00:00:00,000 --> 00:00:04,620
hey guys

2
00:00:04,620 --> 00:00:07,890
hello so we are after

3
00:00:09,059 --> 00:00:15,989
gosh 6-8 months since the start of this
project we are finally able to show you

4
00:00:15,990 --> 00:00:21,600
guys the badges that we have worked on
and it was for a conference in Milwaukee

5
00:00:21,600 --> 00:00:29,010
called cipher con that was founded by
Michael gets minh an infosec guy and it

6
00:00:29,010 --> 00:00:36,239
was held March 11 to 12 of this year and
it was its inaugural roll event and so

7
00:00:36,239 --> 00:00:43,769
we were able to work on the badges for
them and so we came up with three

8
00:00:43,770 --> 00:00:49,559
different designs all the same circuit
but three different form factors i guess

9
00:00:49,559 --> 00:00:52,649
depending on the group of people

10
00:00:52,649 --> 00:01:01,260
so the green ones were those who came on
friday only for the first day only the

11
00:01:01,260 --> 00:01:09,810
white ones were four or for those who
were general attendees of the conference

12
00:01:09,810 --> 00:01:15,780
the black ones were for the volunteers
and the VIPs those who paid a little

13
00:01:15,780 --> 00:01:21,930
extra in the beginning and this blue
ones or for the speakers and the red

14
00:01:21,930 --> 00:01:27,990
ones for our lifetime badges so the as
you can tell we've got three different

15
00:01:27,990 --> 00:01:31,500
shapes the green and the right ones

16
00:01:31,500 --> 00:01:37,170
they're the gears and kind of like the
cogs in the machine and we

17
00:01:37,979 --> 00:01:45,149
I guess wanted to give a nod to the cogs
that you found you find in the big

18
00:01:45,149 --> 00:01:46,560
moment machine

19
00:01:46,560 --> 00:01:52,710
yeah and the red and the black ones
those are

20
00:01:53,310 --> 00:02:00,930
I p.m. punch cards and they're accurate
to the punch and they're essentially

21
00:02:00,930 --> 00:02:07,439
going through a reader of sorts which is
the where the switches are

22
00:02:08,060 --> 00:02:12,770
and then of course the speaker is a
cathedral radio just kind of another nod

23
00:02:12,770 --> 00:02:23,120
to radio frequencies and encryption and
things like that and there's encryption

24
00:02:23,120 --> 00:02:29,030
strings hidden on the badges that
attendees did manage to crack during the

25
00:02:29,030 --> 00:02:35,480
conference the badge is built around
7400 logic chips and is a functional

26
00:02:35,480 --> 00:02:42,350
encryption algorithm implemented in
hardware by clicking the little buttons

27
00:02:42,350 --> 00:02:48,410
you can actually operate the encryption
algorithm by hand so I'm gonna walk

28
00:02:48,410 --> 00:02:51,380
through the functionality here real
quick

29
00:02:51,380 --> 00:02:57,530
essentially what we have is a bank of
eight leds up here and that's the state

30
00:02:57,530 --> 00:03:00,410
of the linear feedback shift register

31
00:03:00,410 --> 00:03:12,140
we have the next big that's going to be
shifted in we have the X sword outputs

32
00:03:12,140 --> 00:03:24,619
it's one two and three the inputs 1 2
and 3 the clock sort of override clock

33
00:03:24,620 --> 00:03:25,910
light here

34
00:03:25,910 --> 00:03:31,819
so basically what i'm going to do is
override a positive value and you can

35
00:03:31,819 --> 00:03:38,988
see that the next bit going in will be
high and then clock button that clocks

36
00:03:38,989 --> 00:03:44,060
it into the first position of the linear
feedback shift register these three bits

37
00:03:44,060 --> 00:03:52,130
are explored with these three bits to
provide these three bits so i'm going to

38
00:03:52,130 --> 00:03:57,319
demonstrate what happens when you get
into a state where these last two bits

39
00:03:57,319 --> 00:04:01,458
of the linear feedback shift register
are different as I clock it forward you

40
00:04:01,459 --> 00:04:07,639
can see that the bit moves forward along
the register and when it gets into this

41
00:04:07,639 --> 00:04:10,280
next position that should go high

42
00:04:10,280 --> 00:04:16,519
it does that's because these two bits
are different these two bits

43
00:04:16,519 --> 00:04:20,298
explore together are the next bit that
gets automatically

44
00:04:20,970 --> 00:04:23,970
clocked in so the next bit the clocks in
should be high

45
00:04:26,160 --> 00:04:33,720
these are still different so that's
still high so the next bit will be I all

46
00:04:33,720 --> 00:04:40,350
right now they're the same so the next
bit is low so on and so forth

47
00:04:41,040 --> 00:04:44,850
and with this as I clock through quickly
here

48
00:04:44,850 --> 00:04:48,480
think of this is an 8-bit number

49
00:04:49,080 --> 00:05:01,469
that's constantly changing this gives us
our key cipher stream and we're using

50
00:05:01,470 --> 00:05:06,900
just the first three bits of it here 2x
or with whatever the input is to get our

51
00:05:06,900 --> 00:05:14,700
output so this is a ex or stream site
for implemented in logic really easily

52
00:05:14,700 --> 00:05:21,659
now let's say that this was our initial
key we entered this value inn by

53
00:05:21,660 --> 00:05:25,500
manually forcing bits high and low and
clocking the men

54
00:05:25,500 --> 00:05:33,540
this is the point where we're starting
to encode something we would look on our

55
00:05:33,540 --> 00:05:34,950
letters here

56
00:05:34,950 --> 00:05:39,360
camera's not seeing them very well so I
also brought this guy at you can see

57
00:05:39,360 --> 00:05:51,240
this little wheel has all these
characters on SP e.t . 01 - that's the

58
00:05:51,240 --> 00:05:56,610
first branch of our encoding system

59
00:05:57,330 --> 00:06:04,320
it always defaults to be starting on
that branch if the character that you

60
00:06:04,320 --> 00:06:07,560
want to encode is not on that branch

61
00:06:07,560 --> 00:06:20,040
you have to use a 000 as your bite and
that means move to the next branch if

62
00:06:20,040 --> 00:06:21,330
it's still not there

63
00:06:21,330 --> 00:06:25,020
encode another 0002 brings you to this
one

64
00:06:25,020 --> 00:06:29,070
if it's not there another 0002 this way

65
00:06:31,460 --> 00:06:39,979
in this way we can in code 42 different
characters using only three bits of

66
00:06:39,979 --> 00:06:40,969
input

67
00:06:40,970 --> 00:06:44,599
it's a very strange way of doing things
you would never actually do this on

68
00:06:44,599 --> 00:06:48,080
purpose but it works

69
00:06:48,080 --> 00:06:51,949
it's not the most efficient thing in the
world but it does the job

70
00:06:52,880 --> 00:06:56,000
so with this being our first position

71
00:06:56,930 --> 00:07:00,380
let's say we want to in code

72
00:07:00,380 --> 00:07:16,009
test2 our first one here is 0 0 1 e is 0
1 0 T is 0 1 1

73
00:07:16,550 --> 00:07:20,750
so our first letter is 011

74
00:07:21,320 --> 00:07:30,199
so add our beginning state 0 1 1 and I
would just write down at my output now

75
00:07:30,199 --> 00:07:40,820
reads 100 then I clock it forward to the
next state t e so test

76
00:07:40,820 --> 00:07:44,360
te that's 0 1 0

77
00:07:45,110 --> 00:07:56,719
I hold down 0 1 0 all right down that my
next bite three bit byte is 100 clock it

78
00:07:56,719 --> 00:07:57,710
forward

79
00:07:57,710 --> 00:08:07,280
now I need to get to s which
incidentally is not on this branch so i

80
00:08:07,280 --> 00:08:12,770
need to go to the next branch forward
this one here to do that

81
00:08:12,770 --> 00:08:21,409
it's all zeros so i write down 100 as my
third bit clock it forward

82
00:08:21,409 --> 00:08:29,240
I gotta jump around here I write down 0
0 0 'clock it forward

83
00:08:29,240 --> 00:08:33,320
now i'm on that one and it's the second
one up

84
00:08:33,828 --> 00:08:38,899
so 0 1 0 there's my s

85
00:08:39,409 --> 00:08:43,159
I write down 011

86
00:08:45,379 --> 00:08:49,970
now I need to get back around to the
beginning for that last T so my next one

87
00:08:49,970 --> 00:09:01,220
after clocking forward is 0 0 0 so i
write down 0 1 0 'clock it forward

88
00:09:01,220 --> 00:09:11,180
put me on there I enter 0 0 0 and write
down 100 need to lock it forward

89
00:09:11,689 --> 00:09:17,300
enter 000 puts me on that one

90
00:09:17,990 --> 00:09:21,860
all right down 0 0 0 'clock it forward

91
00:09:21,860 --> 00:09:29,660
i'm on the correct one so now i need to
do a tea which is 011

92
00:09:30,319 --> 00:09:35,660
so my last thing that i would write down
would be 0 1 0

93
00:09:36,980 --> 00:09:41,029
I apologize if I got any of those wrong
doing it live it's been a few months

94
00:09:41,029 --> 00:09:42,290
since I've done this

95
00:09:42,290 --> 00:09:47,360
but you get the idea that's how you
encode it you can decode it the same way

96
00:09:47,360 --> 00:09:52,579
by taking all of those numbers that you
wrote down put this in the same initial

97
00:09:52,579 --> 00:09:58,370
state go through each number in that
list holding them down

98
00:09:59,089 --> 00:10:04,430
clocking it forward in between the steps
writing down the output there and as you

99
00:10:04,430 --> 00:10:11,870
go through those numbers treat them the
same way if it's a 000 that came out

100
00:10:11,870 --> 00:10:18,980
skip to the next thing if it's a number
that came out right down which letter on

101
00:10:18,980 --> 00:10:24,199
the character set it was at that
position and now i will show it

102
00:10:24,199 --> 00:10:29,089
automatically being done to make all of
that heck of a lot easier because i

103
00:10:29,089 --> 00:10:34,040
needed to test the badge and I wanted a
way to automate the badge

104
00:10:34,040 --> 00:10:37,969
I made this we called it the badge bug

105
00:10:38,660 --> 00:10:46,069
it's essentially a microcontroller that
interfaces to the badge through a bunch

106
00:10:46,069 --> 00:10:50,839
of pins and as a serial port on it so
you can hook it up to a computer

107
00:10:51,710 --> 00:10:57,290
and on this microcontroller there's a
whole serial console that allows you to

108
00:10:57,290 --> 00:11:02,390
interact with the badges of it were a
little server or service running out

109
00:11:02,390 --> 00:11:08,000
somewhere and you can tell it to
automatically go through all of the

110
00:11:08,000 --> 00:11:13,700
steps we just were talking about and
encrypt or decrypt something so I'm

111
00:11:13,700 --> 00:11:16,700
gonna demonstrate that now

112
00:11:25,540 --> 00:11:37,750
going to plug in the badge bug see it
booted up there a fur con badge bug by

113
00:11:37,750 --> 00:11:38,860
whisker

114
00:11:38,860 --> 00:11:47,560
it says a tilde sets the encryption seed
any other character that's not on here

115
00:11:47,560 --> 00:11:52,839
adds a character to the buffer backspace
removes the last character from the

116
00:11:52,839 --> 00:11:59,500
buffer enter runs the encryption dollar
sign

117
00:12:00,009 --> 00:12:11,500
Prince the current input buffer and back
quote Prince this menu and I made it a

118
00:12:11,500 --> 00:12:15,279
little bit easier if you haven't set
your seed when you hit enter then it'll

119
00:12:15,279 --> 00:12:17,560
prompt you for your seed

120
00:12:17,560 --> 00:12:24,099
so basically when this runs it's going
to run the encryption here which is

121
00:12:24,100 --> 00:12:29,290
actually this program is running on the
badge bug that's hooked to the back of

122
00:12:29,290 --> 00:12:30,189
this badge

123
00:12:30,190 --> 00:12:35,380
so we're actually logged into a
microcontroller here when i run it

124
00:12:35,380 --> 00:12:36,069
though

125
00:12:36,069 --> 00:12:40,329
we'll see the output on the serial
terminal here but will also see the

126
00:12:40,329 --> 00:12:47,920
microcontroller driving the switches and
lights on this in real time and it does

127
00:12:47,920 --> 00:12:50,290
slow it down a little bit just to make
it pretty

128
00:12:50,290 --> 00:12:53,949
and what was our previous test string
test

129
00:12:54,459 --> 00:12:57,459
so test

130
00:13:04,329 --> 00:13:12,878
and you have to do hello world obviously
because this is automated

131
00:13:12,879 --> 00:13:15,879
I don't care how long it is

132
00:13:22,680 --> 00:13:26,489
if you were to enter any characters here
that aren't supported by the character

133
00:13:26,490 --> 00:13:31,080
said it would let you know if you did
anything here that you're not supposed

134
00:13:31,080 --> 00:13:34,529
to it would let you know it's all air
trapped and everything

135
00:13:34,529 --> 00:13:40,020
this was a add on that we sold at the
conference - and full of people and I

136
00:13:40,020 --> 00:13:45,720
help them install them on their badge
bugs and a lot of them were lifetime

137
00:13:45,720 --> 00:13:50,550
badges and things so they'll turn up
again later

138
00:13:50,550 --> 00:14:01,890
lucky depth ok now our seed that we
picked was 0 0 0 0 1 1 1 1

139
00:14:02,670 --> 00:14:06,029
so now it's going on and doing its thing

140
00:14:13,880 --> 00:14:16,430
that's what it would look like
encrypting with this thing if you had

141
00:14:16,430 --> 00:14:23,329
the fastest clicky fingers in the
universe and the best penmanship to

142
00:14:23,330 --> 00:14:26,330
record all these heroes in the ones

143
00:14:29,630 --> 00:14:36,439
yep so there's an example of a nice long
string

144
00:14:36,440 --> 00:14:40,700
I'm going to do one that's really short
so that we can show that the description

145
00:14:40,700 --> 00:14:43,310
also works

146
00:14:43,310 --> 00:14:46,400
bring it back up

147
00:14:46,400 --> 00:14:52,610
we'll do our test 0 0 0 0 1 1 1 1

148
00:14:53,450 --> 00:15:04,940
okay so we got . 0t space 83 or 84 3
plus 9

149
00:15:06,770 --> 00:15:26,360
so if i were to reset that again and we
put that in as our input so . 0t space

150
00:15:27,770 --> 00:15:46,220
843 plus 9 and the same seed 0 0 0 0 1 1
1 1

151
00:15:47,300 --> 00:15:50,390
spits out test

152
00:15:50,390 --> 00:15:57,260
what there's encrypting and decrypting
cool and you can do all this manually

153
00:15:57,260 --> 00:16:00,650
it just takes a lot i would you actually
want

154
00:16:00,650 --> 00:16:08,510
I guess this makes it a lot more fun and
basically the people who cracked this

155
00:16:08,510 --> 00:16:15,260
badge at the conference were able to
take a really long string that's on the

156
00:16:15,260 --> 00:16:18,410
back of it that's in that encrypted
gibberish

157
00:16:18,410 --> 00:16:24,620
they were able to write their own
simulator of the badge in Python and

158
00:16:24,620 --> 00:16:27,320
actually run all of the

159
00:16:27,320 --> 00:16:33,470
possible seeds against that until they
found one where they found plaintext

160
00:16:33,470 --> 00:16:38,390
coming out the other side and thereby
won the competition

161
00:16:38,390 --> 00:16:45,650
yep so all in all we made about 275 of
these and they were all hand pasted

162
00:16:45,650 --> 00:16:48,829
components were all hand placed

163
00:16:48,830 --> 00:16:52,760
I do not use a stencil and a lot of you
are probably sing

164
00:16:52,760 --> 00:16:59,900
no i think and i thought i could and I
know now that a stencil probably would

165
00:16:59,900 --> 00:17:01,010
have been a better idea

166
00:17:01,010 --> 00:17:07,520
my hand was cramping pretty badly by the
end of it but it was a lesson that I

167
00:17:07,520 --> 00:17:12,829
learned in and you know of course we got
all of our boards made so some of the

168
00:17:12,829 --> 00:17:22,010
other lessons I learned just that Mouse
switches are super fun and because

169
00:17:22,010 --> 00:17:28,069
everybody is used to the sound like you
you don't get annoyed by all the

170
00:17:28,069 --> 00:17:33,830
clicking imagine her room with 250
people who all just got one of these you

171
00:17:33,830 --> 00:17:37,550
have is pretty click like click click
here let me borrow one so they can

172
00:17:37,550 --> 00:17:39,200
actually hear the switch

173
00:17:39,200 --> 00:17:45,740
it's so comforting and that's it

174
00:17:46,250 --> 00:17:50,120
hope you guys enjoyed seeing our badges
and how they work

175
00:17:50,900 --> 00:17:55,520
if you have any questions about how the
badges work or are interested in the

176
00:17:55,520 --> 00:18:00,830
circuit and all that information you can
probably find it on cipher con . com

177
00:18:02,000 --> 00:18:06,560
and you can see some of my development
notes on our reddit

178
00:18:07,100 --> 00:18:10,699
alright that's it for us for this week
we'll see you guys later ciao

179
00:18:11,240 --> 00:18:14,090
right

180
00:18:14,090 --> 00:18:24,289
we post videos all the time so don't
forget to subscribe and follow us on

181
00:18:24,289 --> 00:18:26,330
twitter at tym ka RS

