1
00:00:16,920 --> 00:00:22,169
all right here today to talk quickly

2
00:00:19,949 --> 00:00:26,130
about some underrated security

3
00:00:22,169 --> 00:00:28,050
vulnerability classes so the title says

4
00:00:26,130 --> 00:00:31,859
bugs but it's specific with bug classes

5
00:00:28,050 --> 00:00:34,170
not really a big deal I've been a

6
00:00:31,859 --> 00:00:36,720
developer of sysadmin pen tester I'm a

7
00:00:34,170 --> 00:00:38,579
security researcher I'll write some open

8
00:00:36,720 --> 00:00:40,440
source tools I publish a bunch of

9
00:00:38,579 --> 00:00:45,780
advisories I do a bunch of conference

10
00:00:40,440 --> 00:00:48,449
talks so quickly moving on this talk was

11
00:00:45,780 --> 00:00:53,340
inspired by a tweet from a German

12
00:00:48,449 --> 00:00:55,949
researcher and it sort of inspired me

13
00:00:53,340 --> 00:00:58,489
that and the response is to sort of

14
00:00:55,949 --> 00:01:00,899
think about what are some of the other

15
00:00:58,489 --> 00:01:01,769
underrated vulnerability back classes

16
00:01:00,899 --> 00:01:05,000
and hiking

17
00:01:01,769 --> 00:01:08,580
maybe shine some light and then and and

18
00:01:05,000 --> 00:01:10,440
show you know what else is out there you

19
00:01:08,580 --> 00:01:11,700
see a lot of stuff on bug bounty

20
00:01:10,440 --> 00:01:15,030
programs and it tends to be a lot of

21
00:01:11,700 --> 00:01:16,770
like xsss SRF it's the same thing over

22
00:01:15,030 --> 00:01:19,890
and over rinse and repeat

23
00:01:16,770 --> 00:01:21,829
so what are some of the maybe some ones

24
00:01:19,890 --> 00:01:25,170
that are less known or less understood

25
00:01:21,829 --> 00:01:27,600
so I see a bunch of people on Twitter

26
00:01:25,170 --> 00:01:30,500
and in person and I got a lot of

27
00:01:27,600 --> 00:01:32,789
different responses some of them

28
00:01:30,500 --> 00:01:35,100
resonated with me some of them didn't

29
00:01:32,790 --> 00:01:37,070
and so I generally ask them to quantify

30
00:01:35,100 --> 00:01:40,289
what I thought that's something like

31
00:01:37,070 --> 00:01:42,179
cross-site scripting that spin like

32
00:01:40,290 --> 00:01:44,270
number one on top 10 for such a long

33
00:01:42,180 --> 00:01:46,439
time why they consider that to be

34
00:01:44,270 --> 00:01:48,750
underrated and and obviously their

35
00:01:46,439 --> 00:01:49,169
answers were a little bit different than

36
00:01:48,750 --> 00:01:50,969
mine

37
00:01:49,170 --> 00:01:52,439
and I think that's good because it's not

38
00:01:50,969 --> 00:01:54,360
just me sort of coming up here and

39
00:01:52,439 --> 00:01:56,758
representing my view but I'm trying to

40
00:01:54,360 --> 00:02:00,000
represent a broader view I guess across

41
00:01:56,759 --> 00:02:02,070
the industry so why why do people think

42
00:02:00,000 --> 00:02:04,020
that vulnerabilities of specific

43
00:02:02,070 --> 00:02:05,669
vulnerability classes are underrated so

44
00:02:04,020 --> 00:02:09,478
one that I got a lot for the cross-site

45
00:02:05,670 --> 00:02:11,280
scripting example is that people don't

46
00:02:09,479 --> 00:02:13,260
tend to understand cross-site scripting

47
00:02:11,280 --> 00:02:15,709
all right we find it we pop up an alert

48
00:02:13,260 --> 00:02:18,840
box saying oh we stole the cookie or

49
00:02:15,709 --> 00:02:22,410
alert one and that's not a necessarily

50
00:02:18,840 --> 00:02:24,510
great impact and I think that's probably

51
00:02:22,410 --> 00:02:26,400
true the beef frameworks done a little

52
00:02:24,510 --> 00:02:28,439
bit to change that but I think overall I

53
00:02:26,400 --> 00:02:30,480
don't think it's an underrated

54
00:02:28,439 --> 00:02:32,939
venerable class maybe it's an under

55
00:02:30,480 --> 00:02:37,078
exploited vulnerability class which is

56
00:02:32,939 --> 00:02:38,549
sort of different so there's a bunch of

57
00:02:37,079 --> 00:02:43,019
reasons why people think it's is

58
00:02:38,549 --> 00:02:44,280
underrated and and he's generally some a

59
00:02:43,019 --> 00:02:47,069
lot of them seems to be there's a lack

60
00:02:44,280 --> 00:02:49,680
of public examples or the impact isn't

61
00:02:47,069 --> 00:02:51,839
particularly understood or we just don't

62
00:02:49,680 --> 00:02:54,180
see a lot of advisories highlighting

63
00:02:51,840 --> 00:02:55,799
this type of owner abilities so it tends

64
00:02:54,180 --> 00:02:57,329
to be more about considered more of a

65
00:02:55,799 --> 00:03:01,439
theoretical than a practical

66
00:02:57,329 --> 00:03:02,700
vulnerability so basically the rest of

67
00:03:01,439 --> 00:03:04,650
the talk I'm going to take ten buck

68
00:03:02,700 --> 00:03:06,780
lasses I'm going to briefly talk about

69
00:03:04,650 --> 00:03:08,489
each one give an example there's some

70
00:03:06,780 --> 00:03:10,319
reference links I'm gonna put this

71
00:03:08,489 --> 00:03:11,639
online so you can go and follow the

72
00:03:10,319 --> 00:03:13,858
links rather than typing them in

73
00:03:11,639 --> 00:03:16,109
manually and hopefully you've got all

74
00:03:13,859 --> 00:03:18,480
get inspired to learn about some Newburg

75
00:03:16,109 --> 00:03:20,699
classes and go and leverage that

76
00:03:18,480 --> 00:03:24,828
whenever you're doing bug bounty hunting

77
00:03:20,699 --> 00:03:27,569
or security testing or security research

78
00:03:24,829 --> 00:03:33,479
so I'm gonna start with number one

79
00:03:27,569 --> 00:03:35,849
because that was what John said and well

80
00:03:33,479 --> 00:03:38,430
since he inspired talk I think we should

81
00:03:35,849 --> 00:03:40,439
start with that one argument injection

82
00:03:38,430 --> 00:03:44,069
I've crossed that the cwe reference

83
00:03:40,439 --> 00:03:46,319
because everyone I've spoken to has a

84
00:03:44,069 --> 00:03:48,619
very different definition than matter

85
00:03:46,319 --> 00:03:51,089
matter basic recess an argument

86
00:03:48,620 --> 00:03:54,389
injection is when you do a command

87
00:03:51,090 --> 00:03:58,379
injection in the argument portion of a

88
00:03:54,389 --> 00:03:59,939
command whereas everyone I've spoken to

89
00:03:58,379 --> 00:04:02,810
who's a security researcher says that no

90
00:03:59,939 --> 00:04:05,638
it's when you use a binary specific

91
00:04:02,810 --> 00:04:09,840
command-line option 2 for example

92
00:04:05,639 --> 00:04:11,759
execute code so there's a there's a few

93
00:04:09,840 --> 00:04:15,930
examples of that a very old example is

94
00:04:11,759 --> 00:04:18,509
the expansion of world card filenames on

95
00:04:15,930 --> 00:04:21,060
UNIX which is almost a forgotten by

96
00:04:18,509 --> 00:04:24,090
class I think at this stage probably the

97
00:04:21,060 --> 00:04:26,240
most famous one is PHP CGI argument

98
00:04:24,090 --> 00:04:28,859
injection and there's a whole bunch of

99
00:04:26,240 --> 00:04:31,530
examples of various things you can do

100
00:04:28,860 --> 00:04:36,180
with binaries with specific command-line

101
00:04:31,530 --> 00:04:39,130
arguments at GTO of bins which is a lot

102
00:04:36,180 --> 00:04:43,330
of bits collection for for Linux

103
00:04:39,130 --> 00:04:46,090
but to talk about the PHP CGI one it was

104
00:04:43,330 --> 00:04:49,150
basically a problem that when you

105
00:04:46,090 --> 00:04:51,940
rampage PLSS CGI module the query string

106
00:04:49,150 --> 00:04:56,620
was provided as a command-line argument

107
00:04:51,940 --> 00:04:58,950
and you could then reconfigure PHP to

108
00:04:56,620 --> 00:05:02,050
allow your L include Auto prepend a file

109
00:04:58,950 --> 00:05:05,830
like that from standard input and post

110
00:05:02,050 --> 00:05:07,270
some PHP in and it runs the code so in

111
00:05:05,830 --> 00:05:10,859
this case it's the fact that you can do

112
00:05:07,270 --> 00:05:13,960
- D - reconfigure the PHP on fly

113
00:05:10,860 --> 00:05:18,790
argument injection meets my definition

114
00:05:13,960 --> 00:05:20,049
not matters so that's fine the next bug

115
00:05:18,790 --> 00:05:22,030
class I want to talk about its logic

116
00:05:20,050 --> 00:05:24,250
floors and logic floors is a very broad

117
00:05:22,030 --> 00:05:28,960
by class it's not really well defined

118
00:05:24,250 --> 00:05:31,420
and this not a great deal of generic

119
00:05:28,960 --> 00:05:33,340
overarching material to learn from you

120
00:05:31,420 --> 00:05:36,010
better off going to Google and finding

121
00:05:33,340 --> 00:05:40,479
individual bug or exploits that

122
00:05:36,010 --> 00:05:42,580
reference logic floors the very typical

123
00:05:40,480 --> 00:05:44,440
one is of course negative product price

124
00:05:42,580 --> 00:05:47,530
manipulation say you're in a shopping

125
00:05:44,440 --> 00:05:50,380
cart if you can change the price because

126
00:05:47,530 --> 00:05:52,929
it's it's in an input field or a hidden

127
00:05:50,380 --> 00:05:55,480
input field you can manipulate that or

128
00:05:52,930 --> 00:05:57,850
you could possibly manipulate the amount

129
00:05:55,480 --> 00:06:00,370
the quantity of the product that you

130
00:05:57,850 --> 00:06:02,410
want to buy so rather than saying I want

131
00:06:00,370 --> 00:06:04,690
to buy five rubber ducks I'm gonna buy

132
00:06:02,410 --> 00:06:06,040
minus five rubber ducks which gets

133
00:06:04,690 --> 00:06:08,860
multiplied by the price and you end up

134
00:06:06,040 --> 00:06:12,040
with the negative price so that's a very

135
00:06:08,860 --> 00:06:14,410
old example and it's been around for

136
00:06:12,040 --> 00:06:16,770
ages the other one that I see a lot and

137
00:06:14,410 --> 00:06:20,860
particularly within web application is

138
00:06:16,770 --> 00:06:23,890
failure to halt execution so they'll do

139
00:06:20,860 --> 00:06:28,300
some sort of check if this whatever then

140
00:06:23,890 --> 00:06:29,440
do this with an unholy execution and so

141
00:06:28,300 --> 00:06:32,560
will typically see something like this

142
00:06:29,440 --> 00:06:34,840
for a certification they'll check is the

143
00:06:32,560 --> 00:06:36,580
user authenticated if they're not

144
00:06:34,840 --> 00:06:40,479
authenticated redirect them to the login

145
00:06:36,580 --> 00:06:43,359
page and then they don't exit after this

146
00:06:40,480 --> 00:06:45,220
so the code doesn't stop running so you

147
00:06:43,360 --> 00:06:47,470
can still access the other functionality

148
00:06:45,220 --> 00:06:52,030
within this page but without having to

149
00:06:47,470 --> 00:06:53,920
be authenticated just post it in a pill

150
00:06:52,030 --> 00:06:55,239
kill requests rather than directly

151
00:06:53,920 --> 00:07:01,390
through the browser because the browser

152
00:06:55,240 --> 00:07:03,490
will redirect another one is padding

153
00:07:01,390 --> 00:07:06,219
oracles this one pops up from time to

154
00:07:03,490 --> 00:07:09,520
time there's been a few public examples

155
00:07:06,220 --> 00:07:12,070
but get the overall feeling that people

156
00:07:09,520 --> 00:07:15,430
either don't understand exactly how they

157
00:07:12,070 --> 00:07:18,040
work or even what they are sometimes

158
00:07:15,430 --> 00:07:20,740
when you talk to non security people

159
00:07:18,040 --> 00:07:22,540
and/or IT people you mention padding

160
00:07:20,740 --> 00:07:25,180
Oracle since I got we don't use any

161
00:07:22,540 --> 00:07:26,860
Oracle products it's fine but it's a

162
00:07:25,180 --> 00:07:30,670
cryptographic attack it has nothing to

163
00:07:26,860 --> 00:07:33,220
do with Oracle the vendor and it's

164
00:07:30,670 --> 00:07:34,810
basically a method where without knowing

165
00:07:33,220 --> 00:07:37,510
the plaintext or without knowing the key

166
00:07:34,810 --> 00:07:39,850
you can decrypt as a ciphertext back

167
00:07:37,510 --> 00:07:43,180
into an IV which will let you

168
00:07:39,850 --> 00:07:45,970
recalculate the plaintext there's some

169
00:07:43,180 --> 00:07:47,800
good examples the crypto pulse is a

170
00:07:45,970 --> 00:07:50,590
great challenge site if you want to

171
00:07:47,800 --> 00:07:52,240
learn about cryptography in general the

172
00:07:50,590 --> 00:07:55,119
scale security blog is a pretty good

173
00:07:52,240 --> 00:07:57,310
write-up of the the pad Buster attack or

174
00:07:55,120 --> 00:08:01,480
a generic padding Oracle I actually

175
00:07:57,310 --> 00:08:05,740
borrowed their example for this and this

176
00:08:01,480 --> 00:08:08,920
basically shows here we have a small

177
00:08:05,740 --> 00:08:11,530
surface string it has a zero value for

178
00:08:08,920 --> 00:08:14,380
the IV which makes it very easy to do

179
00:08:11,530 --> 00:08:17,340
the math for this and essentially what

180
00:08:14,380 --> 00:08:20,770
we are doing here is we are bit flipping

181
00:08:17,340 --> 00:08:23,229
through the ciphertext and we end up

182
00:08:20,770 --> 00:08:26,919
with the true false condition out of you

183
00:08:23,230 --> 00:08:29,470
know the byte range of 0 to 255 and by

184
00:08:26,920 --> 00:08:32,200
progressively working through you can

185
00:08:29,470 --> 00:08:36,730
then recalculate IB you can recover the

186
00:08:32,200 --> 00:08:40,690
plaintext it's it's a crypto it's a lot

187
00:08:36,730 --> 00:08:43,480
of math so I'll try not to get too deep

188
00:08:40,690 --> 00:08:45,880
it's it's a little bit outside my

189
00:08:43,480 --> 00:08:48,190
comfort zone as well so go read the

190
00:08:45,880 --> 00:08:51,580
actual papers who will describe this

191
00:08:48,190 --> 00:08:52,380
accurately all right next one rice

192
00:08:51,580 --> 00:08:54,940
conditions

193
00:08:52,380 --> 00:08:58,180
rest conditions have traditionally been

194
00:08:54,940 --> 00:09:00,760
a good method to get privileged

195
00:08:58,180 --> 00:09:02,859
escalation within operating systems

196
00:09:00,760 --> 00:09:04,390
there's a few examples on Windows

197
00:09:02,860 --> 00:09:08,470
there's a bunch on Mac

198
00:09:04,390 --> 00:09:11,740
and way way more for Linux there's also

199
00:09:08,470 --> 00:09:15,310
some for Android iOS generally they

200
00:09:11,740 --> 00:09:18,339
exist overall and it's a it's a problem

201
00:09:15,310 --> 00:09:20,380
when a process is attempting to access a

202
00:09:18,339 --> 00:09:22,240
resource and you as the attacker can

203
00:09:20,380 --> 00:09:26,170
influence that resource at the same time

204
00:09:22,240 --> 00:09:30,310
Crossing a race condition so there's a

205
00:09:26,170 --> 00:09:34,540
few examples there the voomme have one

206
00:09:30,310 --> 00:09:36,699
you can go and try a hand at yourself

207
00:09:34,540 --> 00:09:39,459
but essentially this is what the code

208
00:09:36,700 --> 00:09:42,430
would look like it first checks if you

209
00:09:39,459 --> 00:09:44,290
can access a file and then later on it

210
00:09:42,430 --> 00:09:46,569
opens the file and it's possible that

211
00:09:44,290 --> 00:09:48,339
the file has changed in between the time

212
00:09:46,570 --> 00:09:52,360
of check-in the time of use that's the

213
00:09:48,339 --> 00:09:54,399
most common type of race condition but

214
00:09:52,360 --> 00:09:56,589
it's not the only one so in more recent

215
00:09:54,399 --> 00:09:58,630
years we've also seen race conditions

216
00:09:56,589 --> 00:10:00,760
being exploited in web applications

217
00:09:58,630 --> 00:10:03,519
where you can for example spawn a

218
00:10:00,760 --> 00:10:06,430
thousand treads that tries to redeem a

219
00:10:03,519 --> 00:10:09,760
coupon and you get maybe the coupon

220
00:10:06,430 --> 00:10:13,810
discount a hundred times so it's not

221
00:10:09,760 --> 00:10:17,140
just an OS or a local attack it can be

222
00:10:13,810 --> 00:10:20,260
applied elsewhere as well but we are not

223
00:10:17,140 --> 00:10:23,740
seeing as much of that so it's a it's a

224
00:10:20,260 --> 00:10:26,050
slightly forgotten or slightly you know

225
00:10:23,740 --> 00:10:30,339
misused

226
00:10:26,050 --> 00:10:33,790
misunderstood but close information

227
00:10:30,339 --> 00:10:39,040
disclosure or info leaks again it's it's

228
00:10:33,790 --> 00:10:41,260
kind of a broad category I don't

229
00:10:39,040 --> 00:10:42,699
consider this to be the most sensitive

230
00:10:41,260 --> 00:10:44,079
information this closures not talking

231
00:10:42,699 --> 00:10:46,990
about when you accidentally put your

232
00:10:44,079 --> 00:10:49,589
database on your website that's a

233
00:10:46,990 --> 00:10:53,260
different from this is gaining access

234
00:10:49,589 --> 00:10:54,490
through some technical method to

235
00:10:53,260 --> 00:10:55,600
information that you necessarily

236
00:10:54,490 --> 00:10:57,459
shouldn't have access to is a great

237
00:10:55,600 --> 00:11:01,180
example is heartbleed I think everyone's

238
00:10:57,459 --> 00:11:02,859
heard of heartbleed the other one that's

239
00:11:01,180 --> 00:11:06,250
you typically see information this

240
00:11:02,860 --> 00:11:11,279
question leaks used for is bypassing SLR

241
00:11:06,250 --> 00:11:13,390
but it can be anything from obtaining

242
00:11:11,279 --> 00:11:17,040
administrative plaintext credentials

243
00:11:13,390 --> 00:11:17,040
through some hidden backdoor URL

244
00:11:17,120 --> 00:11:23,360
etc so again two references hot lead has

245
00:11:20,720 --> 00:11:28,940
a lot of sub references and sort of go

246
00:11:23,360 --> 00:11:31,670
and read that but xkcd kind of explained

247
00:11:28,940 --> 00:11:33,710
this pretty simply it's basically the

248
00:11:31,670 --> 00:11:36,260
the client keeps asking the server are

249
00:11:33,710 --> 00:11:38,690
you still there please respond and you

250
00:11:36,260 --> 00:11:41,689
can send a slice of the response you

251
00:11:38,690 --> 00:11:44,540
expect back so you say please reply with

252
00:11:41,690 --> 00:11:46,190
hat but give me 500 letters since that's

253
00:11:44,540 --> 00:11:48,339
reading from memory and it reads pass

254
00:11:46,190 --> 00:11:51,470
hat and into somebody else's message

255
00:11:48,340 --> 00:11:52,760
which could be used to disclose any

256
00:11:51,470 --> 00:12:00,200
number of information that's being

257
00:11:52,760 --> 00:12:02,840
transmitted over SSL uninitialized

258
00:12:00,200 --> 00:12:06,260
vulnerabilities great time initialized

259
00:12:02,840 --> 00:12:09,890
variables I'll fix that before we

260
00:12:06,260 --> 00:12:12,740
publish the slides that occurs when a

261
00:12:09,890 --> 00:12:15,199
variable is declared but it's not

262
00:12:12,740 --> 00:12:16,760
assigned a value and at that point you

263
00:12:15,200 --> 00:12:19,730
have undefined behavior if you're later

264
00:12:16,760 --> 00:12:21,560
tried to use this variable most of the

265
00:12:19,730 --> 00:12:23,660
times it'll probably just result in a

266
00:12:21,560 --> 00:12:26,630
null point of the reference or some sort

267
00:12:23,660 --> 00:12:28,969
of crash and a denial of service but in

268
00:12:26,630 --> 00:12:31,970
other cases it can result in memory

269
00:12:28,970 --> 00:12:34,190
disclosure in the case of PHP register

270
00:12:31,970 --> 00:12:37,040
Global's which is pretty much a dead

271
00:12:34,190 --> 00:12:39,380
attack class now you could use it to

272
00:12:37,040 --> 00:12:41,349
basically set any variable to any value

273
00:12:39,380 --> 00:12:43,430
that you wanted if it was uninitialized

274
00:12:41,350 --> 00:12:47,540
so you used to see a lot of like a

275
00:12:43,430 --> 00:12:50,930
syndication bypass leveraging this type

276
00:12:47,540 --> 00:12:54,860
of vulnerability Helmer has a good white

277
00:12:50,930 --> 00:12:59,630
paper go read that so he said he's a see

278
00:12:54,860 --> 00:13:05,930
example where the uninitialized variable

279
00:12:59,630 --> 00:13:07,550
will read some memory of the stack so

280
00:13:05,930 --> 00:13:12,199
this causes memory without having been

281
00:13:07,550 --> 00:13:16,130
assigned a value right directory

282
00:13:12,200 --> 00:13:19,670
traversal also generally an old-school

283
00:13:16,130 --> 00:13:22,689
attack I have a bit of a gripe with this

284
00:13:19,670 --> 00:13:25,040
with a lot of the the modern-day

285
00:13:22,690 --> 00:13:27,440
vulnerability hunters who will say that

286
00:13:25,040 --> 00:13:29,290
they found a local file include or a

287
00:13:27,440 --> 00:13:32,290
local file disclosed

288
00:13:29,290 --> 00:13:33,520
on a web service or a website and what

289
00:13:32,290 --> 00:13:39,270
they've actually found this a directory

290
00:13:33,520 --> 00:13:42,490
traversal so it basically consists of

291
00:13:39,270 --> 00:13:47,470
providing the parent directory

292
00:13:42,490 --> 00:13:50,830
identifier dot dot dot dot slash into a

293
00:13:47,470 --> 00:13:54,160
file path to offer the destination file

294
00:13:50,830 --> 00:13:58,150
path but it's not just useful for things

295
00:13:54,160 --> 00:14:00,760
like reading a file or getting a file

296
00:13:58,150 --> 00:14:03,730
include sometimes you can manipulate the

297
00:14:00,760 --> 00:14:08,770
path to a binary or path to an upload

298
00:14:03,730 --> 00:14:11,740
directory or essentially customize it to

299
00:14:08,770 --> 00:14:15,460
the specific vulnerability so marked out

300
00:14:11,740 --> 00:14:18,280
has a example where he had directory

301
00:14:15,460 --> 00:14:21,910
traversal as part of the overall attack

302
00:14:18,280 --> 00:14:28,300
that would let you install malicious

303
00:14:21,910 --> 00:14:29,980
apps or Trojan iPhone over airdrop the

304
00:14:28,300 --> 00:14:32,349
more recent one that's been going around

305
00:14:29,980 --> 00:14:35,320
pulse secure SSL has a directory

306
00:14:32,350 --> 00:14:36,940
traversal that lets you again read files

307
00:14:35,320 --> 00:14:39,430
in this case and you can extract

308
00:14:36,940 --> 00:14:41,710
encrypted hashes or plaintext passwords

309
00:14:39,430 --> 00:14:43,780
I believe orange side will be covering

310
00:14:41,710 --> 00:14:46,330
this bug could be wrong

311
00:14:43,780 --> 00:14:51,280
at 5:30 today so you might want to go

312
00:14:46,330 --> 00:14:55,210
see that one all right so yeah this is

313
00:14:51,280 --> 00:14:57,550
the one for the pulse SSL this one is

314
00:14:55,210 --> 00:15:00,160
from Twitter because the exploits

315
00:14:57,550 --> 00:15:02,589
generally tends to try to read et Cie

316
00:15:00,160 --> 00:15:05,650
password rather than some more valuable

317
00:15:02,590 --> 00:15:07,960
files so this is the type of attacks you

318
00:15:05,650 --> 00:15:11,520
see going around in this case it has

319
00:15:07,960 --> 00:15:14,020
some hard-coded string this Danah

320
00:15:11,520 --> 00:15:16,990
requirement and so by mixing that string

321
00:15:14,020 --> 00:15:21,640
in with the directory traversal it

322
00:15:16,990 --> 00:15:24,100
bypasses the authentication check so all

323
00:15:21,640 --> 00:15:30,370
right security miss configuration again

324
00:15:24,100 --> 00:15:33,180
a very large category will probably

325
00:15:30,370 --> 00:15:37,900
often see a lot of complaints about SSL

326
00:15:33,180 --> 00:15:39,199
configuration how secure SSL is I don't

327
00:15:37,900 --> 00:15:42,110
really consider

328
00:15:39,200 --> 00:15:44,420
it is a risk but we haven't really seen

329
00:15:42,110 --> 00:15:49,760
people get compromised because they used

330
00:15:44,420 --> 00:15:53,569
a lower cipher ssl key they or key sauce

331
00:15:49,760 --> 00:15:56,019
than a higher one better examples I

332
00:15:53,570 --> 00:16:00,019
think of things like PHP configuration

333
00:15:56,019 --> 00:16:02,410
allowing a URL include register Global's

334
00:16:00,019 --> 00:16:06,350
again those particular ones have been

335
00:16:02,410 --> 00:16:08,079
set to secure values now by default in

336
00:16:06,350 --> 00:16:10,399
PHP but it didn't use to be the case

337
00:16:08,079 --> 00:16:11,689
remote file include was running rampant

338
00:16:10,399 --> 00:16:15,709
on the internet a few years back

339
00:16:11,690 --> 00:16:17,510
register Global's before that so some of

340
00:16:15,709 --> 00:16:19,790
the ones that I often deal with this

341
00:16:17,510 --> 00:16:22,130
Apache a hardening have done a bunch of

342
00:16:19,790 --> 00:16:24,829
research and that in the past year allow

343
00:16:22,130 --> 00:16:26,720
override is it's a really bad directive

344
00:16:24,829 --> 00:16:28,660
you should never set that to all you

345
00:16:26,720 --> 00:16:33,589
should always set it to none or at least

346
00:16:28,660 --> 00:16:37,459
limited so again some examples of that

347
00:16:33,589 --> 00:16:40,850
in the links and a code examples if you

348
00:16:37,459 --> 00:16:43,489
set allow overwrite all I go and create

349
00:16:40,850 --> 00:16:45,920
a htaccess file that reconfigures itself

350
00:16:43,490 --> 00:16:48,230
as a PHP script and contains some PHP

351
00:16:45,920 --> 00:16:49,849
code and if I can upload that to a

352
00:16:48,230 --> 00:16:56,060
subfolder on your website

353
00:16:49,850 --> 00:16:57,890
I now have code execution and compiler

354
00:16:56,060 --> 00:17:02,239
optimization vulnerabilities I don't

355
00:16:57,890 --> 00:17:07,209
have a specific cwe for this one two

356
00:17:02,240 --> 00:17:12,309
examples referenced is mem sad and null

357
00:17:07,209 --> 00:17:15,290
check removal in the Linux ton tap

358
00:17:12,309 --> 00:17:17,209
kernel from a long time ago but

359
00:17:15,290 --> 00:17:20,869
essentially sometimes from the compiler

360
00:17:17,209 --> 00:17:23,390
optimizes code it will remove code that

361
00:17:20,869 --> 00:17:25,339
the developer have written because it

362
00:17:23,390 --> 00:17:28,429
meets some optimization rule and

363
00:17:25,339 --> 00:17:30,820
sometimes that is unintended but the

364
00:17:28,429 --> 00:17:33,169
developer removes a security check

365
00:17:30,820 --> 00:17:35,149
resulting in the compiled binary now

366
00:17:33,169 --> 00:17:38,750
being vulnerable even though the source

367
00:17:35,150 --> 00:17:42,169
code explicitly wasn't so an example

368
00:17:38,750 --> 00:17:45,000
from mem said is

369
00:17:42,169 --> 00:17:47,669
here where this is called the dead

370
00:17:45,000 --> 00:17:51,149
storage removal so we are writing to a

371
00:17:47,669 --> 00:17:53,580
region of memory trying to cero out a

372
00:17:51,149 --> 00:17:56,279
password that's in memory followed by

373
00:17:53,580 --> 00:17:58,110
immediately freeing the variable and the

374
00:17:56,279 --> 00:17:59,610
compiler goes well why do you write

375
00:17:58,110 --> 00:18:00,719
you're citing that you don't use again

376
00:17:59,610 --> 00:18:02,789
we don't have to write to it we'll just

377
00:18:00,720 --> 00:18:05,370
free the variable freeing the variable

378
00:18:02,789 --> 00:18:09,299
does not zero out the memory and now

379
00:18:05,370 --> 00:18:10,739
your password is retained in memory so

380
00:18:09,299 --> 00:18:13,440
that's an example of the compiler

381
00:18:10,740 --> 00:18:18,450
optimising out a security control that

382
00:18:13,440 --> 00:18:21,980
you insert it all right and well ahead

383
00:18:18,450 --> 00:18:27,059
of time actually authentication bypass

384
00:18:21,980 --> 00:18:30,750
again where I sometimes disagree with

385
00:18:27,059 --> 00:18:33,990
the definition authentication bypass I

386
00:18:30,750 --> 00:18:36,570
would argue is often a choice of impact

387
00:18:33,990 --> 00:18:39,149
not necessarily a vulnerability class on

388
00:18:36,570 --> 00:18:42,260
its own an example of that is this HP

389
00:18:39,149 --> 00:18:44,850
ILO 29s

390
00:18:42,260 --> 00:18:47,940
bypass that's actually a buffer overflow

391
00:18:44,850 --> 00:18:50,939
that corrupts the logged in state so

392
00:18:47,940 --> 00:18:53,429
it's not vulnerability class of

393
00:18:50,940 --> 00:18:56,720
authentication bypass it's simply an

394
00:18:53,429 --> 00:19:00,029
impact of exploiting a buffer overflow

395
00:18:56,720 --> 00:19:02,820
so we do lack a little bit of clarity

396
00:19:00,029 --> 00:19:07,980
around a lot of our terminology and it's

397
00:19:02,820 --> 00:19:14,510
not just for this I think overall we we

398
00:19:07,980 --> 00:19:16,590
don't document or necessarily articulate

399
00:19:14,510 --> 00:19:19,980
specifically what we're after and we

400
00:19:16,590 --> 00:19:22,580
tend to very often just put things in a

401
00:19:19,980 --> 00:19:25,950
broad category and move on

402
00:19:22,580 --> 00:19:27,600
so all right an example of

403
00:19:25,950 --> 00:19:30,179
authentication bypass that you'll

404
00:19:27,600 --> 00:19:32,279
probably see in more recent years is the

405
00:19:30,179 --> 00:19:35,159
use of jadibooti tokens where you can

406
00:19:32,279 --> 00:19:37,110
downgrade the algorithm for encrypting

407
00:19:35,159 --> 00:19:40,159
the token to none and then just set

408
00:19:37,110 --> 00:19:45,899
whatever values you want yourself so

409
00:19:40,159 --> 00:19:49,049
yeah right so what do I want you to take

410
00:19:45,899 --> 00:19:52,049
away from this presentation go out and

411
00:19:49,049 --> 00:19:54,400
learn some more bug classes when you do

412
00:19:52,049 --> 00:19:59,110
assess a product or

413
00:19:54,400 --> 00:20:02,590
a web service user research try to chain

414
00:19:59,110 --> 00:20:04,629
the bugs together sometimes you have to

415
00:20:02,590 --> 00:20:07,149
alter the impact that you are trying to

416
00:20:04,630 --> 00:20:10,090
get out of a particular bug in order to

417
00:20:07,150 --> 00:20:14,500
do this so for example rather than

418
00:20:10,090 --> 00:20:16,959
getting code execution on the I love

419
00:20:14,500 --> 00:20:20,110
interface you can get administrative

420
00:20:16,960 --> 00:20:23,500
access which gives you greater or easier

421
00:20:20,110 --> 00:20:26,469
exploitation of other services always

422
00:20:23,500 --> 00:20:30,370
aim for maximum impact so you can really

423
00:20:26,470 --> 00:20:34,470
illustrate to the vendor and sort of the

424
00:20:30,370 --> 00:20:37,449
users why they need to patch all right

425
00:20:34,470 --> 00:20:39,340
so conclusion the impact of Unruh

426
00:20:37,450 --> 00:20:40,809
beliefs are not fixed when you find a

427
00:20:39,340 --> 00:20:42,939
vulnerability and you write an exploit

428
00:20:40,809 --> 00:20:45,370
you have typically the choice to choose

429
00:20:42,940 --> 00:20:48,700
from what you want to achieve as part of

430
00:20:45,370 --> 00:20:49,809
the exploitation our definitions of bug

431
00:20:48,700 --> 00:20:52,840
classes the definitions of

432
00:20:49,809 --> 00:20:55,240
vulnerabilities had definitely have room

433
00:20:52,840 --> 00:20:57,220
for improvement quite often the

434
00:20:55,240 --> 00:21:00,340
recommendation also have room for

435
00:20:57,220 --> 00:21:02,380
improvements we should not get let my

436
00:21:00,340 --> 00:21:04,990
classes become lost a lot of times old

437
00:21:02,380 --> 00:21:07,149
vulnerabilities can be brought back and

438
00:21:04,990 --> 00:21:09,909
applied to new things such as race

439
00:21:07,149 --> 00:21:13,840
conditions in web frameworks and and

440
00:21:09,909 --> 00:21:17,440
always keep learning I want to say

441
00:21:13,840 --> 00:21:19,029
thanks to among many others these people

442
00:21:17,440 --> 00:21:21,490
who all provided feedback and what they

443
00:21:19,029 --> 00:21:23,380
can set it to be underrated by classes

444
00:21:21,490 --> 00:21:29,559
and why they consider it to be

445
00:21:23,380 --> 00:21:32,520
underrated and that is it for me so I

446
00:21:29,559 --> 00:21:37,779
guess we can take some questions

447
00:21:32,520 --> 00:21:40,840
applause please for Eldar so elders very

448
00:21:37,779 --> 00:21:41,470
kindly donated two awesome t-shirts I'm

449
00:21:40,840 --> 00:21:45,730
so jealous

450
00:21:41,470 --> 00:21:48,039
for the best questions so what I we have

451
00:21:45,730 --> 00:21:49,390
well we get two prizes one we're going

452
00:21:48,039 --> 00:21:51,309
to give our two prizes one for the most

453
00:21:49,390 --> 00:21:53,649
up voted question and one for your

454
00:21:51,309 --> 00:21:56,370
favorite question okay okay so when we

455
00:21:53,649 --> 00:21:58,899
have nine minutes or maybe seven minutes

456
00:21:56,370 --> 00:22:04,689
any questions from the floor before I go

457
00:21:58,899 --> 00:22:07,090
to slide oh no if not okay let's go to

458
00:22:04,690 --> 00:22:07,870
the most up voted question if you're

459
00:22:07,090 --> 00:22:10,689
going to replace

460
00:22:07,870 --> 00:22:12,459
os yeah it was the type who's been

461
00:22:10,690 --> 00:22:15,190
corrected good it was Oh app before so

462
00:22:12,460 --> 00:22:19,059
Oh ask top ten vulnerabilities with one

463
00:22:15,190 --> 00:22:24,160
on your list which one is it if I had to

464
00:22:19,059 --> 00:22:25,510
replace so I mean I did have almost top

465
00:22:24,160 --> 00:22:27,670
ten runner abilities on the list

466
00:22:25,510 --> 00:22:30,250
including security miss configuration so

467
00:22:27,670 --> 00:22:33,010
I think I would probably just leave

468
00:22:30,250 --> 00:22:35,800
leave them and just improve the

469
00:22:33,010 --> 00:22:37,960
definitions or add clarity around it

470
00:22:35,800 --> 00:22:42,220
rather than replace one of the oldest of

471
00:22:37,960 --> 00:22:43,809
ten if I can digress a little bit of

472
00:22:42,220 --> 00:22:45,730
know what's top ten I think I think the

473
00:22:43,809 --> 00:22:49,809
industry has an unhealthy obsession with

474
00:22:45,730 --> 00:22:54,330
top ten and I think that sometimes leads

475
00:22:49,809 --> 00:22:57,820
to other bug classes not getting enough

476
00:22:54,330 --> 00:22:59,860
in a time time in the spotlight but I

477
00:22:57,820 --> 00:23:02,230
think overall the biggest problem we

478
00:22:59,860 --> 00:23:05,979
have with us top ten is how we misuse it

479
00:23:02,230 --> 00:23:08,290
and the data is generally collected and

480
00:23:05,980 --> 00:23:10,660
so it's its vulnerabilities that are

481
00:23:08,290 --> 00:23:14,260
being identified sort of typically

482
00:23:10,660 --> 00:23:16,420
actively from various sources and my

483
00:23:14,260 --> 00:23:18,910
opinion personal opinion is that almost

484
00:23:16,420 --> 00:23:20,620
pop ten is usually a reflection of what

485
00:23:18,910 --> 00:23:23,679
was considered standard development

486
00:23:20,620 --> 00:23:26,830
methods five to ten years ago and it's

487
00:23:23,679 --> 00:23:29,530
now actively in production so I think

488
00:23:26,830 --> 00:23:31,210
the data that it represents is the data

489
00:23:29,530 --> 00:23:33,670
represents but I think maybe we need to

490
00:23:31,210 --> 00:23:35,830
remember what it actually represents

491
00:23:33,670 --> 00:23:41,020
when we we go inside that this is

492
00:23:35,830 --> 00:23:43,899
important for whatever reason so okay so

493
00:23:41,020 --> 00:23:47,290
who's our B you win the time oh great

494
00:23:43,900 --> 00:23:52,420
second prize for you awesome all right

495
00:23:47,290 --> 00:23:55,300
you want to give one you want this one

496
00:23:52,420 --> 00:23:59,830
you want the cat the skill of the cat

497
00:23:55,300 --> 00:24:01,840
the cat all right that's all right okay

498
00:23:59,830 --> 00:24:04,139
any other questions from the floor

499
00:24:01,840 --> 00:24:08,320
[Applause]

500
00:24:04,140 --> 00:24:10,300
not okay why don't you pick one oh there

501
00:24:08,320 --> 00:24:11,620
is another one up voted oh I think then

502
00:24:10,300 --> 00:24:22,950
this one will automatically get the

503
00:24:11,620 --> 00:24:25,659
prime number nine hmm

504
00:24:22,950 --> 00:24:31,510
I'd probably just have to go with SS RF

505
00:24:25,660 --> 00:24:34,840
because it's it's so it's so widely

506
00:24:31,510 --> 00:24:38,590
spread at the moment and sure if you can

507
00:24:34,840 --> 00:24:40,330
leverage it to to access meta data and

508
00:24:38,590 --> 00:24:43,139
extract keys and get into somebody's

509
00:24:40,330 --> 00:24:46,240
cloud environment then it is critical

510
00:24:43,140 --> 00:24:50,530
but it only takes such a small amount of

511
00:24:46,240 --> 00:24:53,950
control to make it almost lower in

512
00:24:50,530 --> 00:24:55,330
significant vulnerabilities I think you

513
00:24:53,950 --> 00:24:57,610
know the proof is in the pudding but I

514
00:24:55,330 --> 00:25:01,449
think as a asset-backed class it's it's

515
00:24:57,610 --> 00:25:04,870
more of a useful and we'll probably see

516
00:25:01,450 --> 00:25:06,970
hopefully see it die out soon sir

517
00:25:04,870 --> 00:25:09,159
okay who's AG you supposed to put your

518
00:25:06,970 --> 00:25:11,050
full name sir all right come out here

519
00:25:09,160 --> 00:25:12,310
and get your t-shirt and well while

520
00:25:11,050 --> 00:25:14,290
we're waiting for him to come up here

521
00:25:12,310 --> 00:25:17,700
we'll I'll think um we have another

522
00:25:14,290 --> 00:25:21,310
uploaded one so I do have one more gift

523
00:25:17,700 --> 00:25:23,170
from heard Ian Luke raha in your opinion

524
00:25:21,310 --> 00:25:24,790
what would be the most misunderstood

525
00:25:23,170 --> 00:25:27,340
point between research and developer

526
00:25:24,790 --> 00:25:39,550
when defining impact and attack vectors

527
00:25:27,340 --> 00:25:40,209
I probably say that it sort of it's

528
00:25:39,550 --> 00:25:41,669
trust

529
00:25:40,210 --> 00:25:43,180
so whenever I've had to deal with

530
00:25:41,670 --> 00:25:46,000
developers and explaining

531
00:25:43,180 --> 00:25:47,950
vulnerabilities they often don't

532
00:25:46,000 --> 00:25:52,000
understand how we did it they're like

533
00:25:47,950 --> 00:25:53,710
where did this come from I think that we

534
00:25:52,000 --> 00:25:55,930
have a drop-down box of values on the

535
00:25:53,710 --> 00:25:59,140
website how can you put apostrophe or

536
00:25:55,930 --> 00:26:02,440
one equals one in here don't do that by

537
00:25:59,140 --> 00:26:04,390
the way kids you use safe use and one

538
00:26:02,440 --> 00:26:07,090
equals one it's it's safe injection

539
00:26:04,390 --> 00:26:09,460
method and it tends to be that I think

540
00:26:07,090 --> 00:26:12,399
that the technology will works this way

541
00:26:09,460 --> 00:26:15,010
this is what we've observed and and we

542
00:26:12,400 --> 00:26:16,930
don't necessarily think that you can

543
00:26:15,010 --> 00:26:20,379
really go outside of the box

544
00:26:16,930 --> 00:26:21,610
by understanding the technology and and

545
00:26:20,380 --> 00:26:25,450
attacking it that way

546
00:26:21,610 --> 00:26:28,149
so I generally say that the the two

547
00:26:25,450 --> 00:26:29,620
halves of that conversation comes from

548
00:26:28,150 --> 00:26:32,200
very different backgrounds and have very

549
00:26:29,620 --> 00:26:34,209
different views on how the technology

550
00:26:32,200 --> 00:26:37,540
operates and that's where it's a mostly

551
00:26:34,210 --> 00:26:40,020
the friction comes from okay who is

552
00:26:37,540 --> 00:26:40,020
heard yet

553
00:26:40,560 --> 00:26:49,210
he's not here oh oh you lost your chance

554
00:26:45,130 --> 00:26:52,000
okay I think we have time for one last

555
00:26:49,210 --> 00:26:53,800
question you could pick one I think I'll

556
00:26:52,000 --> 00:26:57,010
just go with the next one I think the

557
00:26:53,800 --> 00:27:02,440
the web scanner dynamic static the the

558
00:26:57,010 --> 00:27:05,379
short answer is yes it is possible again

559
00:27:02,440 --> 00:27:07,450
it depends on the capability of the web

560
00:27:05,380 --> 00:27:09,280
scanner and it depends on the location

561
00:27:07,450 --> 00:27:12,700
within the application of the

562
00:27:09,280 --> 00:27:15,399
vulnerability so for example very very

563
00:27:12,700 --> 00:27:18,970
deeply nested vulnerabilities in in like

564
00:27:15,400 --> 00:27:20,350
a 15 site step process the web scanner

565
00:27:18,970 --> 00:27:23,280
will probably always fail because it

566
00:27:20,350 --> 00:27:26,080
doesn't follow the logic to reach there

567
00:27:23,280 --> 00:27:28,810
any automatic scan would typically fail

568
00:27:26,080 --> 00:27:31,629
you'd probably need a human but if it's

569
00:27:28,810 --> 00:27:35,649
something simple like directory

570
00:27:31,630 --> 00:27:40,000
traversal in the single parameter to to

571
00:27:35,650 --> 00:27:42,130
a URL yeah find it for sure so the

572
00:27:40,000 --> 00:27:44,830
answer is yes it can but it may not

573
00:27:42,130 --> 00:27:47,260
always do it okay all right does this

574
00:27:44,830 --> 00:27:50,679
question deserve a price sure if you

575
00:27:47,260 --> 00:27:54,010
have one are you here miss muster oh not

576
00:27:50,680 --> 00:27:58,630
here all right all right okay okay thank

577
00:27:54,010 --> 00:28:02,010
you if you have any other questions we

578
00:27:58,630 --> 00:28:02,010
have a booth just outside

