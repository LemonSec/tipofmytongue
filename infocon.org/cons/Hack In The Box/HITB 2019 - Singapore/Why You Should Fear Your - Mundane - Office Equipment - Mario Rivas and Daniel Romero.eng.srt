1
00:00:23,000 --> 00:00:27,320
hi everyone and sell for coming to hotel

2
00:00:25,400 --> 00:00:29,750
when you shall fear your mundane office

3
00:00:27,320 --> 00:00:32,540
equipment where we're going to presenter

4
00:00:29,750 --> 00:00:34,850
or enterprise printer research and since

5
00:00:32,540 --> 00:00:38,180
also to hugging the wall for doing that

6
00:00:34,850 --> 00:00:39,620
is great opportunity yeah first of all

7
00:00:38,180 --> 00:00:42,559
is a brief introduction about who you

8
00:00:39,620 --> 00:00:44,720
are this is Mario Rivas and I'm Daniel

9
00:00:42,559 --> 00:00:46,580
Romero both water security consultants

10
00:00:44,720 --> 00:00:48,739
and resented at and Citigroup in the

11
00:00:46,580 --> 00:00:51,910
Madrid office here you are four examples

12
00:00:48,739 --> 00:00:54,349
of interest or do telecoms emails etc

13
00:00:51,910 --> 00:00:56,599
but you want to know what better we

14
00:00:54,350 --> 00:00:59,510
always have for a beer so just let us

15
00:00:56,600 --> 00:01:02,629
know one who can take a beer

16
00:00:59,510 --> 00:01:05,750
well this is an agenda of our talk these

17
00:01:02,629 --> 00:01:07,640
are really classical agenda where we'll

18
00:01:05,750 --> 00:01:09,080
start with a brief introduction and the

19
00:01:07,640 --> 00:01:11,540
textual phase that we have we have

20
00:01:09,080 --> 00:01:13,640
covered when during all research the

21
00:01:11,540 --> 00:01:15,680
mario will presented testimony and some

22
00:01:13,640 --> 00:01:17,330
facts that we have developed during the

23
00:01:15,680 --> 00:01:18,830
we already set and a way across the

24
00:01:17,330 --> 00:01:22,190
different modalities that we have found

25
00:01:18,830 --> 00:01:23,810
at this after that we will show you some

26
00:01:22,190 --> 00:01:24,259
exploit and the difficulty that we came

27
00:01:23,810 --> 00:01:27,700
across

28
00:01:24,260 --> 00:01:31,160
okay finally is a brief conclusions okay

29
00:01:27,700 --> 00:01:33,230
let's go with the introduction okay the

30
00:01:31,160 --> 00:01:35,090
main goal of the research was testing

31
00:01:33,230 --> 00:01:36,320
isn't enterprise devices okay I'm

32
00:01:35,090 --> 00:01:39,280
figuring out the current state of

33
00:01:36,320 --> 00:01:41,600
security of them so we thought that

34
00:01:39,280 --> 00:01:43,850
printers will be a good target so we

35
00:01:41,600 --> 00:01:47,270
select six medium sized enterprise

36
00:01:43,850 --> 00:01:49,910
printers and we decided to focus this

37
00:01:47,270 --> 00:01:51,920
result on our red teaming approach so we

38
00:01:49,910 --> 00:01:53,990
the outcomes of the ERISA could be used

39
00:01:51,920 --> 00:01:56,150
during already mean engagement for

40
00:01:53,990 --> 00:01:58,520
example so with Ebola with your research

41
00:01:56,150 --> 00:02:01,460
exploitation and process predation okay

42
00:01:58,520 --> 00:02:03,289
keep in mind that is not an assessment

43
00:02:01,460 --> 00:02:05,780
so we don't need to find all the world

44
00:02:03,290 --> 00:02:07,400
is a printer half so we know if we only

45
00:02:05,780 --> 00:02:09,140
need to find one more data providers

46
00:02:07,400 --> 00:02:13,340
remote code execution

47
00:02:09,139 --> 00:02:15,649
okay but why printers these are really

48
00:02:13,340 --> 00:02:17,840
good questions printers has been well

49
00:02:15,650 --> 00:02:20,319
extended in company says many years ago

50
00:02:17,840 --> 00:02:22,670
and usually they are connected to the

51
00:02:20,319 --> 00:02:24,170
two different networks two different

52
00:02:22,670 --> 00:02:26,629
villains and for example you can use the

53
00:02:24,170 --> 00:02:28,488
amine aura to it to pivoting so

54
00:02:26,629 --> 00:02:30,829
different Department attacks different

55
00:02:28,489 --> 00:02:32,810
Department obviously the information

56
00:02:30,830 --> 00:02:35,000
which is managed by a printer are really

57
00:02:32,810 --> 00:02:36,380
sensitive we have for example corporate

58
00:02:35,000 --> 00:02:39,650
personal financials

59
00:02:36,380 --> 00:02:41,560
later etc but don't forget information

60
00:02:39,650 --> 00:02:44,570
included within the configuration for

61
00:02:41,560 --> 00:02:47,000
example we can find the mine account

62
00:02:44,570 --> 00:02:50,060
password credential setter so really

63
00:02:47,000 --> 00:02:52,160
sensitive information usually mm

64
00:02:50,060 --> 00:02:55,120
printers are also consider a lottery

65
00:02:52,160 --> 00:02:57,829
static so probably they are not

66
00:02:55,120 --> 00:03:01,070
configure it securely or properly by the

67
00:02:57,830 --> 00:03:04,130
IDT department so then we have and

68
00:03:01,070 --> 00:03:06,560
control devices magic really since his

69
00:03:04,130 --> 00:03:08,900
information and connected to the most of

70
00:03:06,560 --> 00:03:11,300
the printers company networks or

71
00:03:08,900 --> 00:03:14,630
companies in Elko sorry so this is an

72
00:03:11,300 --> 00:03:16,400
example of some weeks ago were Microsoft

73
00:03:14,630 --> 00:03:18,410
catcher right sinister hackers using

74
00:03:16,400 --> 00:03:22,640
printers in order to attack different

75
00:03:18,410 --> 00:03:24,950
companies okay why not

76
00:03:22,640 --> 00:03:28,369
some vendors decided to make a statement

77
00:03:24,950 --> 00:03:31,459
like this one so it seems like a

78
00:03:28,370 --> 00:03:32,450
challenge for us let's go with the

79
00:03:31,460 --> 00:03:34,280
texture face

80
00:03:32,450 --> 00:03:36,829
well first comment that we identify two

81
00:03:34,280 --> 00:03:38,960
different operating systems within our

82
00:03:36,830 --> 00:03:40,610
printers the first one is our real-time

83
00:03:38,960 --> 00:03:43,220
operation system and the next one is a

84
00:03:40,610 --> 00:03:45,770
line okay obviously they have many

85
00:03:43,220 --> 00:03:49,130
attack surfaces like web applications

86
00:03:45,770 --> 00:03:52,940
and web servers mobile application file

87
00:03:49,130 --> 00:03:54,859
parsers update some frameworks bring the

88
00:03:52,940 --> 00:03:57,670
languages external services like for

89
00:03:54,860 --> 00:04:00,200
example Google Cloud Print or apron

90
00:03:57,670 --> 00:04:02,589
management services another like 10 and

91
00:04:00,200 --> 00:04:04,880
SFP exampie etc

92
00:04:02,590 --> 00:04:08,270
approximate attacks like Wi-Fi use we

93
00:04:04,880 --> 00:04:11,120
NFC etcetera okay and we also decided to

94
00:04:08,270 --> 00:04:13,880
include two other tasks for this

95
00:04:11,120 --> 00:04:16,340
architecture face like hardware analysis

96
00:04:13,880 --> 00:04:17,630
post exploitation okay but obviously we

97
00:04:16,339 --> 00:04:19,010
didn't have enough time to cover all

98
00:04:17,630 --> 00:04:22,190
these attacks or face because it's

99
00:04:19,010 --> 00:04:24,830
really huge finally we decide to cover

100
00:04:22,190 --> 00:04:26,300
the following words okay those bite

101
00:04:24,830 --> 00:04:29,240
eating rays because we didn't include

102
00:04:26,300 --> 00:04:30,890
this test in all the printers this is

103
00:04:29,240 --> 00:04:33,170
another picture about the texture phase

104
00:04:30,890 --> 00:04:35,000
more data like picture where you can see

105
00:04:33,170 --> 00:04:37,120
the different elements that we include

106
00:04:35,000 --> 00:04:39,590
within each part of the attack surface

107
00:04:37,120 --> 00:04:41,990
where for example within the printer

108
00:04:39,590 --> 00:04:43,280
language in five format we decide to

109
00:04:41,990 --> 00:04:47,270
include the PDL

110
00:04:43,280 --> 00:04:50,559
the PCL and PS languages okay let's go

111
00:04:47,270 --> 00:04:50,560
with the technology I'm passing

112
00:04:51,249 --> 00:04:56,209
okay so this is the main mythology that

113
00:04:54,020 --> 00:04:57,859
we follow during the research we started

114
00:04:56,209 --> 00:05:01,099
with the state of the art on setting up

115
00:04:57,860 --> 00:05:03,110
our printers then we chose some scope of

116
00:05:01,099 --> 00:05:05,688
the attack surface that we just saw and

117
00:05:03,110 --> 00:05:07,969
then in a second process we started

118
00:05:05,689 --> 00:05:09,619
searching for vulnerabilities passing

119
00:05:07,969 --> 00:05:12,429
different protocols and findings on

120
00:05:09,619 --> 00:05:14,719
crashes then analyzing them and then

121
00:05:12,429 --> 00:05:16,789
trying to supply them in order to

122
00:05:14,719 --> 00:05:19,639
compromise the device or gain additional

123
00:05:16,789 --> 00:05:21,019
knowledge all these while also analyzing

124
00:05:19,639 --> 00:05:23,509
the film were in the cases we have it

125
00:05:21,019 --> 00:05:25,490
and also analyzing the hardware to get

126
00:05:23,509 --> 00:05:29,509
some useful information as we will see

127
00:05:25,490 --> 00:05:32,029
later talking about passing we started

128
00:05:29,509 --> 00:05:33,979
with dumb professors which are really

129
00:05:32,029 --> 00:05:36,289
quick to launch and we continued with

130
00:05:33,979 --> 00:05:38,628
the smarter ones which were one more

131
00:05:36,289 --> 00:05:42,019
time but give better results actually

132
00:05:38,629 --> 00:05:44,209
botanists give out great results but

133
00:05:42,019 --> 00:05:46,459
also we felt that it was harder and more

134
00:05:44,209 --> 00:05:51,110
time-consuming that it should be so we

135
00:05:46,459 --> 00:05:52,969
decided to make another faster while

136
00:05:51,110 --> 00:05:56,269
looking at the state of the art we found

137
00:05:52,969 --> 00:05:58,779
two amazing tools very well known Sally

138
00:05:56,269 --> 00:06:00,860
and Buffa's but with great

139
00:05:58,779 --> 00:06:03,229
functionalities and a lot of the things

140
00:06:00,860 --> 00:06:05,119
that we needed but we were changing a

141
00:06:03,229 --> 00:06:07,188
lot of the code so we decided to for

142
00:06:05,119 --> 00:06:09,949
Buffa's and we ended up creating a

143
00:06:07,189 --> 00:06:12,499
different monster and after Sally Ambu

144
00:06:09,949 --> 00:06:15,110
mike wazowski will be the next one so we

145
00:06:12,499 --> 00:06:17,749
call this fascist key we wrote it in

146
00:06:15,110 --> 00:06:20,269
Python 3 and we improved some modules

147
00:06:17,749 --> 00:06:22,279
like the string passing libraries and we

148
00:06:20,269 --> 00:06:24,259
made faster modules to keep all our

149
00:06:22,279 --> 00:06:27,079
protocol fasteners and there a single

150
00:06:24,259 --> 00:06:28,879
program with a similar behavior between

151
00:06:27,079 --> 00:06:30,439
the rest of the changes we wanted to

152
00:06:28,879 --> 00:06:34,729
solve the different difficulties that we

153
00:06:30,439 --> 00:06:36,469
were having while passing the first one

154
00:06:34,729 --> 00:06:38,839
will be that different implementations

155
00:06:36,469 --> 00:06:41,719
of the same protocol behave different

156
00:06:38,839 --> 00:06:43,729
when otherwise crashes sometimes it can

157
00:06:41,719 --> 00:06:46,519
go totally down or maybe a service

158
00:06:43,729 --> 00:06:49,818
stopped answering or maybe just print

159
00:06:46,519 --> 00:06:53,389
and stuck in a stack trace in some debug

160
00:06:49,819 --> 00:06:55,759
interface so for that we wanted to give

161
00:06:53,389 --> 00:06:58,519
flexibility and we made the main program

162
00:06:55,759 --> 00:07:00,919
with a lot of arguments to control the

163
00:06:58,519 --> 00:07:04,200
passing session and we made monitor

164
00:07:00,919 --> 00:07:07,930
modules to constantly check that

165
00:07:04,200 --> 00:07:11,979
then who and otherwise crushes sometimes

166
00:07:07,930 --> 00:07:13,900
we were we needed to reboot in Manali so

167
00:07:11,980 --> 00:07:16,840
for that we made restarting modules

168
00:07:13,900 --> 00:07:19,419
which to do for example to turn off and

169
00:07:16,840 --> 00:07:23,440
on and a smartlock and then to give

170
00:07:19,420 --> 00:07:25,510
instability to the tour tour faster we

171
00:07:23,440 --> 00:07:27,670
made a nice console where we can pause

172
00:07:25,510 --> 00:07:30,420
and control the fuzzing session and do

173
00:07:27,670 --> 00:07:33,520
some things like retest any test case or

174
00:07:30,420 --> 00:07:35,860
do some other things like print in human

175
00:07:33,520 --> 00:07:38,530
readable format and the test cases that

176
00:07:35,860 --> 00:07:40,930
we are sending and save standalone

177
00:07:38,530 --> 00:07:43,419
scripts that we can send later to the

178
00:07:40,930 --> 00:07:47,650
manufacturers maybe or just use it while

179
00:07:43,420 --> 00:07:54,400
developing developing and Sprite so

180
00:07:47,650 --> 00:07:56,919
let's see a very quick demo its haven't

181
00:07:54,400 --> 00:08:02,440
cut I think ok perfect

182
00:07:56,920 --> 00:08:04,690
I will detect away so we have below a

183
00:08:02,440 --> 00:08:08,440
pink short-circuit and you can see there

184
00:08:04,690 --> 00:08:11,710
a lot of the options that we have we

185
00:08:08,440 --> 00:08:13,300
have also or faster modules that we that

186
00:08:11,710 --> 00:08:14,770
we have developed the restarted modules

187
00:08:13,300 --> 00:08:18,220
and the monitored modules and other

188
00:08:14,770 --> 00:08:21,969
options and we are now going to launch

189
00:08:18,220 --> 00:08:25,060
or faster to our target the printer one

190
00:08:21,970 --> 00:08:27,160
in the six three one part using the

191
00:08:25,060 --> 00:08:29,980
internet printing protocol faster IPP

192
00:08:27,160 --> 00:08:32,440
and they get printer attributes part of

193
00:08:29,980 --> 00:08:34,810
that protocol and you're going to use a

194
00:08:32,440 --> 00:08:36,250
restart a module that turns off unknown

195
00:08:34,809 --> 00:08:40,000
and a smart plug that we have connected

196
00:08:36,250 --> 00:08:42,610
to a printer we have here the console or

197
00:08:40,000 --> 00:08:45,910
cool logo and some of the commands that

198
00:08:42,610 --> 00:08:48,190
we have implemented we are now going to

199
00:08:45,910 --> 00:08:52,600
test the connection to a target sending

200
00:08:48,190 --> 00:08:56,230
a non fast packet and after receiving

201
00:08:52,600 --> 00:08:59,530
the some information from that request

202
00:08:56,230 --> 00:09:01,840
we can go to a different test case and

203
00:08:59,530 --> 00:09:05,709
continue the execution from from there

204
00:09:01,840 --> 00:09:08,920
for variety so now we are continuing and

205
00:09:05,710 --> 00:09:11,500
you can see some of the of the test

206
00:09:08,920 --> 00:09:14,650
cases like in a very similar way to move

207
00:09:11,500 --> 00:09:16,630
us and after sending a pair of them you

208
00:09:14,650 --> 00:09:19,029
will see below that

209
00:09:16,630 --> 00:09:23,259
we will stop receiving ICMP s there it

210
00:09:19,029 --> 00:09:26,380
is and now we have detected that in the

211
00:09:23,259 --> 00:09:30,480
faster and we are going to restart the

212
00:09:26,380 --> 00:09:33,339
target using the the smart black model

213
00:09:30,480 --> 00:09:35,259
and after that we will wait for the

214
00:09:33,339 --> 00:09:38,079
target to recover and it will continue

215
00:09:35,259 --> 00:09:41,290
the execution automatically getting more

216
00:09:38,079 --> 00:09:43,000
crashes and saving some suspects but we

217
00:09:41,290 --> 00:09:45,910
don't want to that we can control C and

218
00:09:43,000 --> 00:09:48,519
go to the console check the suspect we

219
00:09:45,910 --> 00:09:50,079
have defi following one in this case and

220
00:09:48,519 --> 00:09:53,230
we can print it in a human readable

221
00:09:50,079 --> 00:09:56,439
format where you can see in the longest

222
00:09:53,230 --> 00:09:59,050
line that we are sending 10,000 seats in

223
00:09:56,440 --> 00:10:02,529
this case instead of default value in

224
00:09:59,050 --> 00:10:04,740
that was a mutant on the packet we can

225
00:10:02,529 --> 00:10:07,600
also print this like with a

226
00:10:04,740 --> 00:10:10,509
proof-of-concept code but we can copy

227
00:10:07,600 --> 00:10:12,279
and paste into a script and send it to a

228
00:10:10,509 --> 00:10:14,649
manufacturer as a proof of concept or

229
00:10:12,279 --> 00:10:18,819
yes you see you see later while

230
00:10:14,649 --> 00:10:21,069
developing exploit now we are going to

231
00:10:18,819 --> 00:10:24,759
wait for it to recover and we are going

232
00:10:21,069 --> 00:10:27,579
to retest if this test case was crashing

233
00:10:24,759 --> 00:10:30,670
the device or it was class by any other

234
00:10:27,579 --> 00:10:32,138
thing that we didn't know so for that we

235
00:10:30,670 --> 00:10:35,110
can use the foot on the first command

236
00:10:32,139 --> 00:10:39,310
with the 5 on and one test case in this

237
00:10:35,110 --> 00:10:41,680
case and as you will see we stopped

238
00:10:39,310 --> 00:10:43,959
receiving ICMP second we have a crash

239
00:10:41,680 --> 00:10:48,550
sebat in this case was a key buffer flow

240
00:10:43,959 --> 00:10:51,729
and we can save this this proof of

241
00:10:48,550 --> 00:10:55,508
concept into a file for later use and we

242
00:10:51,730 --> 00:10:57,339
can also disable the element as we may

243
00:10:55,509 --> 00:10:59,680
not want to continue testing this

244
00:10:57,339 --> 00:11:01,750
because it's already one hour and we

245
00:10:59,680 --> 00:11:11,109
already know it so why do I same time in

246
00:11:01,750 --> 00:11:13,089
that so that was the this demo ok

247
00:11:11,110 --> 00:11:17,170
all the code is already by level in our

248
00:11:13,089 --> 00:11:19,000
external github and check it out and

249
00:11:17,170 --> 00:11:21,870
before we because there are a lot of

250
00:11:19,000 --> 00:11:24,530
changes coming soon

251
00:11:21,870 --> 00:11:28,170
and let's go for just a bit of hardware

252
00:11:24,530 --> 00:11:31,470
we took a very basic approach mainly

253
00:11:28,170 --> 00:11:33,479
searching for things that will allow us

254
00:11:31,470 --> 00:11:35,780
with the exploitation of the printer

255
00:11:33,480 --> 00:11:39,150
for example the bank interfaces like

256
00:11:35,780 --> 00:11:40,620
UART or take tack or some other things

257
00:11:39,150 --> 00:11:43,800
that may allow us to down the field

258
00:11:40,620 --> 00:11:46,230
where or get some useful information and

259
00:11:43,800 --> 00:11:49,380
while doing that we will all see also

260
00:11:46,230 --> 00:11:51,450
having too much fun and we did some

261
00:11:49,380 --> 00:11:53,640
things that we shouldn't and now one of

262
00:11:51,450 --> 00:11:54,750
the printers is not going to print

263
00:11:53,640 --> 00:11:57,330
anymore

264
00:11:54,750 --> 00:12:01,110
let's just say kill a printer save a

265
00:11:57,330 --> 00:12:04,470
tree so one of the first thing we did

266
00:12:01,110 --> 00:12:09,690
was looking for expose memories like in

267
00:12:04,470 --> 00:12:12,270
this example we passed period 2 to the

268
00:12:09,690 --> 00:12:16,530
SPI protocol download the film were from

269
00:12:12,270 --> 00:12:18,900
one of the devices and we also found

270
00:12:16,530 --> 00:12:22,199
some serial ports in three of the six

271
00:12:18,900 --> 00:12:23,970
printers tested and we also found some

272
00:12:22,200 --> 00:12:26,220
dated ports that seemed to be disabled

273
00:12:23,970 --> 00:12:28,200
the serial ports were extremely useful

274
00:12:26,220 --> 00:12:32,970
as they gave us a lot of information

275
00:12:28,200 --> 00:12:36,870
like the back errors and stack traces

276
00:12:32,970 --> 00:12:38,520
and we're really useful to exploit one

277
00:12:36,870 --> 00:12:42,020
of some of the vulnerabilities that we

278
00:12:38,520 --> 00:12:45,360
found also one of them was basically

279
00:12:42,020 --> 00:12:48,930
interesting as it gave us an interactive

280
00:12:45,360 --> 00:12:50,880
shell that we could use to to greet

281
00:12:48,930 --> 00:12:54,030
write and execute things in the memory

282
00:12:50,880 --> 00:12:57,300
of a right so we use this for a harbor

283
00:12:54,030 --> 00:12:58,890
backdoor which could be impacted by

284
00:12:57,300 --> 00:13:03,300
someone with physical access to a

285
00:12:58,890 --> 00:13:04,740
printer in two or three minutes and for

286
00:13:03,300 --> 00:13:06,810
this we use our Raspberry Pi that you

287
00:13:04,740 --> 00:13:08,700
can see in the picture which was

288
00:13:06,810 --> 00:13:10,560
connected to the serial port and was

289
00:13:08,700 --> 00:13:12,780
also powered by it so whenever the

290
00:13:10,560 --> 00:13:14,849
printer is on the Raspberry Pi will be

291
00:13:12,780 --> 00:13:17,160
on and the Raspberry Pi will be

292
00:13:14,850 --> 00:13:20,160
connected to a with VX and Wi-Fi access

293
00:13:17,160 --> 00:13:24,360
point and from the we cool have had all

294
00:13:20,160 --> 00:13:30,140
these capabilities so let's see second

295
00:13:24,360 --> 00:13:30,140
demo very quick also

296
00:13:33,580 --> 00:13:39,220
your own you know on or PC where the

297
00:13:36,520 --> 00:13:44,710
Raspberry Pi is connected and we can

298
00:13:39,220 --> 00:13:48,010
associate to it and from here we have a

299
00:13:44,710 --> 00:13:51,790
direct access to or to our serial port

300
00:13:48,010 --> 00:13:53,860
of the printer so we can just go into

301
00:13:51,790 --> 00:13:55,449
the console we are now in the console

302
00:13:53,860 --> 00:13:56,680
and we can for example bring the shell

303
00:13:55,450 --> 00:13:59,260
where there are a lot of comments to

304
00:13:56,680 --> 00:14:01,089
read write and execute things and we can

305
00:13:59,260 --> 00:14:04,900
do something for example to dump some

306
00:14:01,090 --> 00:14:06,970
memory as you can see somebody this is

307
00:14:04,900 --> 00:14:09,100
not a very nice format so we are now

308
00:14:06,970 --> 00:14:10,930
going to show do this with a little

309
00:14:09,100 --> 00:14:18,040
script that we did to them some of the

310
00:14:10,930 --> 00:14:19,810
secrets we can use the screen with

311
00:14:18,040 --> 00:14:23,920
specifying the serial port and the port

312
00:14:19,810 --> 00:14:26,319
right and after launching it you can see

313
00:14:23,920 --> 00:14:28,030
some of the secrets like for Sutton's

314
00:14:26,320 --> 00:14:31,210
for example the administrator password

315
00:14:28,030 --> 00:14:34,689
which was Lala in this case then an old

316
00:14:31,210 --> 00:14:36,790
byte and then something that is the part

317
00:14:34,690 --> 00:14:39,520
of the previous password was that was

318
00:14:36,790 --> 00:14:42,400
not all written while setting a shorter

319
00:14:39,520 --> 00:14:44,199
one and of course all the secrets in the

320
00:14:42,400 --> 00:14:45,910
printer are in clear tests because we

321
00:14:44,200 --> 00:14:48,060
are like in the year 2000 yet or

322
00:14:45,910 --> 00:14:48,060
something

323
00:14:48,390 --> 00:14:53,890
so that was a quick demo we execute

324
00:14:52,030 --> 00:14:56,890
things here but we have an exploit where

325
00:14:53,890 --> 00:15:03,670
we will show you that with the remote

326
00:14:56,890 --> 00:15:07,360
code execution okay so after this quick

327
00:15:03,670 --> 00:15:11,520
hardware we are going to see some of the

328
00:15:07,360 --> 00:15:18,310
como flaws found just a quick overview

329
00:15:11,520 --> 00:15:21,819
we have a lot of well you can see the

330
00:15:18,310 --> 00:15:24,609
red means higher critical risk yellow

331
00:15:21,820 --> 00:15:26,770
means medium response and the scale

332
00:15:24,610 --> 00:15:31,050
means that we use some vulnerabilities

333
00:15:26,770 --> 00:15:33,579
to execute code in the device so

334
00:15:31,050 --> 00:15:35,339
stopping with the applications we found

335
00:15:33,580 --> 00:15:37,890
really with the four configurations

336
00:15:35,340 --> 00:15:41,350
exposing almost all services available

337
00:15:37,890 --> 00:15:43,390
also supposing well actually more than

338
00:15:41,350 --> 00:15:45,010
20 in some cases also supposing the

339
00:15:43,390 --> 00:15:47,630
monitoring panel with the folder without

340
00:15:45,010 --> 00:15:49,630
credentials and basically reminding

341
00:15:47,630 --> 00:15:53,600
the security controls of 20 years ago

342
00:15:49,630 --> 00:15:56,410
and we found all the typical application

343
00:15:53,600 --> 00:15:59,030
issues like cross-site request forgery

344
00:15:56,410 --> 00:16:00,680
lack of access controls in different

345
00:15:59,030 --> 00:16:03,050
functionalities for example to delay the

346
00:16:00,680 --> 00:16:05,750
full backup of the configuration of

347
00:16:03,050 --> 00:16:09,140
device and some cross-site scripting

348
00:16:05,750 --> 00:16:11,470
issues like 1 2 3 & 4 and also path

349
00:16:09,140 --> 00:16:15,230
reversal in one of the line of sprinters

350
00:16:11,470 --> 00:16:18,440
that unfortunately allowed us only to

351
00:16:15,230 --> 00:16:21,740
obtain some specific intentions and we

352
00:16:18,440 --> 00:16:24,560
were not able to further exploit this to

353
00:16:21,740 --> 00:16:27,170
get closer to our objective which was to

354
00:16:24,560 --> 00:16:29,390
that full control device so all these

355
00:16:27,170 --> 00:16:31,849
issues are not bad but we were looking

356
00:16:29,390 --> 00:16:34,430
for something that may allow us to get

357
00:16:31,850 --> 00:16:36,860
full control device so looking at

358
00:16:34,430 --> 00:16:39,650
different words we found a slightly few

359
00:16:36,860 --> 00:16:43,940
more interesting functionalities like

360
00:16:39,650 --> 00:16:46,310
this one where you can see we got a lot

361
00:16:43,940 --> 00:16:48,350
of information including appreciation

362
00:16:46,310 --> 00:16:50,930
and security locks including session

363
00:16:48,350 --> 00:16:53,870
cookies Active Directory loves her virus

364
00:16:50,930 --> 00:16:54,859
locks more information like the full

365
00:16:53,870 --> 00:16:57,290
list of processes

366
00:16:54,860 --> 00:17:00,200
or other information about the

367
00:16:57,290 --> 00:17:02,240
underlying operating system in this

368
00:17:00,200 --> 00:17:06,350
second one was very similar to the first

369
00:17:02,240 --> 00:17:10,699
one with different functionalities under

370
00:17:06,349 --> 00:17:12,438
different URLs and this was using one of

371
00:17:10,699 --> 00:17:15,860
the supplies that we will explain in a

372
00:17:12,439 --> 00:17:18,290
few minutes and this third one was even

373
00:17:15,859 --> 00:17:20,990
better because it just allowed us to

374
00:17:18,290 --> 00:17:24,589
lower the full memory of the device why

375
00:17:20,990 --> 00:17:25,939
not and get all the secrets and anything

376
00:17:24,589 --> 00:17:31,340
that was in the memory at that time like

377
00:17:25,939 --> 00:17:34,310
passwords documents whatever so all of

378
00:17:31,340 --> 00:17:36,110
this was accessible without any kind of

379
00:17:34,310 --> 00:17:42,379
authentication because his hidden

380
00:17:36,110 --> 00:17:45,199
features and going to the memory

381
00:17:42,380 --> 00:17:46,850
corruption issues we found a lot too

382
00:17:45,200 --> 00:17:50,510
many more than we could handle or

383
00:17:46,850 --> 00:17:52,760
investigate so in a lot of the services

384
00:17:50,510 --> 00:17:54,470
that that the printers are like not only

385
00:17:52,760 --> 00:17:55,340
our application but also in printer

386
00:17:54,470 --> 00:17:58,490
services like

387
00:17:55,340 --> 00:18:01,009
IPP or LPD or the Google problem the

388
00:17:58,490 --> 00:18:04,080
implantation SNMP

389
00:18:01,009 --> 00:18:07,019
basically we stopped searching these

390
00:18:04,080 --> 00:18:08,939
kind of vulnerabilities because we had a

391
00:18:07,019 --> 00:18:11,690
lot massively at vulnerabilities

392
00:18:08,940 --> 00:18:15,119
everywhere which lead up to crashes

393
00:18:11,690 --> 00:18:16,769
everywhere and some very useful stack

394
00:18:15,119 --> 00:18:21,059
traces this one in one of the serial

395
00:18:16,769 --> 00:18:23,100
ports where we are written the PC and

396
00:18:21,059 --> 00:18:26,580
this is from another exploit that we

397
00:18:23,100 --> 00:18:30,259
won't see today but don't worry now then

398
00:18:26,580 --> 00:18:30,259
is going to explain you two other ones

399
00:18:34,399 --> 00:18:40,229
okay let's go with a couple of examples

400
00:18:38,190 --> 00:18:43,080
developers during all research this is

401
00:18:40,230 --> 00:18:46,230
the first one this is a easy case and

402
00:18:43,080 --> 00:18:47,609
this was these macros for my one or web

403
00:18:46,230 --> 00:18:51,450
application process as you can see

404
00:18:47,609 --> 00:18:53,699
within the image as send the HTTP

405
00:18:51,450 --> 00:18:55,529
request a custody request with a really

406
00:18:53,700 --> 00:18:57,980
long cookie value the printer will

407
00:18:55,529 --> 00:19:00,059
cursor provides is a basic astatically

408
00:18:57,980 --> 00:19:02,460
stack buffer overflow okay

409
00:19:00,059 --> 00:19:04,739
look into the framework we identify the

410
00:19:02,460 --> 00:19:09,809
developers for example for go to include

411
00:19:04,739 --> 00:19:11,700
boundary checks in the code so probably

412
00:19:09,809 --> 00:19:13,320
the stack is a string copy which is

413
00:19:11,700 --> 00:19:16,730
copying the cookie value into a stack

414
00:19:13,320 --> 00:19:19,109
awry Kulik buffer overflow okay an

415
00:19:16,730 --> 00:19:22,799
important important point here is the

416
00:19:19,109 --> 00:19:24,269
comfortable the comfortable is the the

417
00:19:22,799 --> 00:19:26,580
cookie size including the cookie name

418
00:19:24,269 --> 00:19:29,129
the equal symbol and the cookie value

419
00:19:26,580 --> 00:19:31,889
okay and it is used for example within

420
00:19:29,129 --> 00:19:34,408
the string copy size argument were faced

421
00:19:31,889 --> 00:19:37,889
in my graduated from this there in this

422
00:19:34,409 --> 00:19:39,690
column by level okay and question here

423
00:19:37,889 --> 00:19:42,469
will be do you really think that there

424
00:19:39,690 --> 00:19:44,789
is only one back here or obviously no

425
00:19:42,470 --> 00:19:47,700
imagine that we replace the equal symbol

426
00:19:44,789 --> 00:19:50,509
by a semicolon symbol okay the count

427
00:19:47,700 --> 00:19:54,090
variable GU result importing bytes

428
00:19:50,509 --> 00:19:55,769
14-15 is a negative number so we are

429
00:19:54,090 --> 00:19:58,289
copying a really huge space in memory

430
00:19:55,769 --> 00:20:01,409
into a stack awry so we have two

431
00:19:58,289 --> 00:20:03,419
varieties in the same line these are

432
00:20:01,409 --> 00:20:05,190
super have conflict the Ferger just send

433
00:20:03,419 --> 00:20:07,320
in a really long cookie value and the

434
00:20:05,190 --> 00:20:12,299
second one just replace in the equal

435
00:20:07,320 --> 00:20:13,860
symbol by the semicolon okay and think

436
00:20:12,299 --> 00:20:15,510
reverse petition blue

437
00:20:13,860 --> 00:20:19,889
like we are going back to the 90s

438
00:20:15,510 --> 00:20:21,540
printer so which is really scarce let's

439
00:20:19,890 --> 00:20:23,790
go wait to check the difficulties qui in

440
00:20:21,540 --> 00:20:28,260
defiance Allah within this heap and the

441
00:20:23,790 --> 00:20:29,970
stack we were within 1/2 so 1/2 at the

442
00:20:28,260 --> 00:20:32,190
back and keep in mind that we are trying

443
00:20:29,970 --> 00:20:34,950
to attack our till our Toa so we don't

444
00:20:32,190 --> 00:20:37,140
have a shell here ok we need to reverse

445
00:20:34,950 --> 00:20:40,049
in the end FA 1 or e 25 some potential

446
00:20:37,140 --> 00:20:43,070
function of functionalities that we then

447
00:20:40,049 --> 00:20:46,070
use within our shellcode for example ok

448
00:20:43,070 --> 00:20:48,809
helpers only we have the epistle written

449
00:20:46,070 --> 00:20:51,870
we have potential read write and execute

450
00:20:48,809 --> 00:20:55,410
table memory in the whole memory

451
00:20:51,870 --> 00:20:58,199
probably so we have executed and we have

452
00:20:55,410 --> 00:21:01,140
the status equal table ok and this Mario

453
00:20:58,200 --> 00:21:03,690
comma T before we also identify a useful

454
00:21:01,140 --> 00:21:06,600
really useful ability in this printer

455
00:21:03,690 --> 00:21:08,429
that allow us to print the net print no

456
00:21:06,600 --> 00:21:10,590
sorry dick get them and their printers

457
00:21:08,429 --> 00:21:13,200
memory so we can use this variety in

458
00:21:10,590 --> 00:21:16,889
order to bypass the SLR for example okay

459
00:21:13,200 --> 00:21:18,450
so the exploitation change goobie we are

460
00:21:16,890 --> 00:21:20,669
going to send a shellcode to the printer

461
00:21:18,450 --> 00:21:22,410
just between patterns we are going to

462
00:21:20,669 --> 00:21:25,770
done we using the memo elephant tonight

463
00:21:22,410 --> 00:21:27,000
the hiding fuchsia lighting there ram we

464
00:21:25,770 --> 00:21:29,010
are going to try to in the fight in

465
00:21:27,000 --> 00:21:31,710
different indian diffic in the fight

466
00:21:29,010 --> 00:21:33,210
sorry all shall go is in the memory we

467
00:21:31,710 --> 00:21:35,160
are going to try to tickle the back and

468
00:21:33,210 --> 00:21:36,720
figure the buffer I'm going to find out

469
00:21:35,160 --> 00:21:41,370
we are going to jump into the shellcode

470
00:21:36,720 --> 00:21:44,070
ok but for our redeeming tools we went

471
00:21:41,370 --> 00:21:46,320
we wanting something more and question

472
00:21:44,070 --> 00:21:48,389
here is will be what is one of the most

473
00:21:46,320 --> 00:21:50,939
important data managed by a printer of

474
00:21:48,390 --> 00:21:53,700
the dead oak humans okay so why don't

475
00:21:50,940 --> 00:21:56,220
create a shellcode that brings the who's

476
00:21:53,700 --> 00:21:58,500
a brain functionality I steal all data

477
00:21:56,220 --> 00:22:01,080
or documents into the printer I'll send

478
00:21:58,500 --> 00:22:03,090
them to throw other words connection for

479
00:22:01,080 --> 00:22:04,559
example okay so let's go with the demo

480
00:22:03,090 --> 00:22:06,659
for this demo we're going to have two

481
00:22:04,559 --> 00:22:07,860
different machines the first one is the

482
00:22:06,660 --> 00:22:10,740
target machine that we will execute

483
00:22:07,860 --> 00:22:12,389
exploit and an exploit handle like we

484
00:22:10,740 --> 00:22:13,049
will receive all the information from

485
00:22:12,390 --> 00:22:15,510
the printer

486
00:22:13,049 --> 00:22:17,250
and the second machine will be the

487
00:22:15,510 --> 00:22:19,559
victim machine that will send this

488
00:22:17,250 --> 00:22:21,240
document to their to their to the

489
00:22:19,559 --> 00:22:25,139
printer in the right side you can also

490
00:22:21,240 --> 00:22:27,179
see the rocket printer okay let me when

491
00:22:25,140 --> 00:22:31,200
the squad

492
00:22:27,179 --> 00:22:33,599
the demo okay

493
00:22:31,200 --> 00:22:35,789
this is the demo here you have the

494
00:22:33,599 --> 00:22:38,428
attacker machine which this is the IP

495
00:22:35,789 --> 00:22:40,950
other for the attacker machine below you

496
00:22:38,429 --> 00:22:43,649
can see the exploit for this for this

497
00:22:40,950 --> 00:22:45,389
printer okay we need three different

498
00:22:43,649 --> 00:22:47,459
document the target IP the target port

499
00:22:45,389 --> 00:22:50,008
under the recipe we're going to attack

500
00:22:47,460 --> 00:22:51,809
the printer one in the port 18 and we

501
00:22:50,009 --> 00:22:54,839
over here include the attacker machine

502
00:22:51,809 --> 00:22:59,129
which is the the reverse IP that we want

503
00:22:54,839 --> 00:23:01,200
to receive the the connection but before

504
00:22:59,129 --> 00:23:02,968
that we are going to execute or exploit

505
00:23:01,200 --> 00:23:05,759
challah that we will receive all date

506
00:23:02,969 --> 00:23:08,219
including sending to the from the

507
00:23:05,759 --> 00:23:12,330
printer okay in this is listening the

508
00:23:08,219 --> 00:23:15,299
poor 157 below we are going to execute

509
00:23:12,330 --> 00:23:17,849
or explode as you can see an exploit in

510
00:23:15,299 --> 00:23:19,799
the third line while using or memory

511
00:23:17,849 --> 00:23:21,960
leak in order to define or shellcode in

512
00:23:19,799 --> 00:23:23,820
the memory and I said that we were able

513
00:23:21,960 --> 00:23:26,849
to receive a connection from our printer

514
00:23:23,820 --> 00:23:28,889
with a sentient hack the planet frame

515
00:23:26,849 --> 00:23:31,979
which was included within the initial

516
00:23:28,889 --> 00:23:35,339
call for example this is a the victim

517
00:23:31,979 --> 00:23:37,259
machine with a different IP address what

518
00:23:35,339 --> 00:23:39,719
we are going to do now is just sending

519
00:23:37,259 --> 00:23:40,289
sending this document this document to

520
00:23:39,719 --> 00:23:42,330
the printer

521
00:23:40,289 --> 00:23:45,559
ok we are going to select this sadly

522
00:23:42,330 --> 00:23:47,849
same printer which is the printer one

523
00:23:45,559 --> 00:23:50,339
after sending the document you can see

524
00:23:47,849 --> 00:23:52,019
how the exploit handler will receive its

525
00:23:50,339 --> 00:23:54,389
own data this is the data that'll print

526
00:23:52,019 --> 00:23:56,849
the same today all 200 who are now

527
00:23:54,389 --> 00:24:00,899
converting this data into a PDF okay

528
00:23:56,849 --> 00:24:02,879
so at this one second after that here

529
00:24:00,899 --> 00:24:05,428
you go this document that we were able

530
00:24:02,879 --> 00:24:07,349
to steal from the printer ok and the

531
00:24:05,429 --> 00:24:09,899
printer still continuing speedy you

532
00:24:07,349 --> 00:24:11,339
normally and or exploit shall also

533
00:24:09,899 --> 00:24:15,529
implement a new french elated that

534
00:24:11,339 --> 00:24:18,359
forward this document to another

535
00:24:15,529 --> 00:24:24,440
printing country by the attacker okay

536
00:24:18,359 --> 00:24:29,399
this was the demo let's go with the yeah

537
00:24:24,440 --> 00:24:31,559
sorry oh sorry this goes the the first

538
00:24:29,399 --> 00:24:35,879
it was a easy case and let's go with a

539
00:24:31,559 --> 00:24:37,259
tricky case ok for this exploit we

540
00:24:35,879 --> 00:24:38,789
didn't have so well and hardware the

541
00:24:37,259 --> 00:24:40,379
back and we came across I know

542
00:24:38,789 --> 00:24:40,940
difficulties and protection that we will

543
00:24:40,379 --> 00:24:44,109
see now

544
00:24:40,940 --> 00:24:46,999
so it is not going to be easy to explain

545
00:24:44,109 --> 00:24:51,649
by Google Drive too so be patient place

546
00:24:46,999 --> 00:24:52,970
okay this is a polarity we identified

547
00:24:51,649 --> 00:24:54,649
the molarity in the same place as

548
00:24:52,970 --> 00:24:56,450
previous one but for this case we have

549
00:24:54,649 --> 00:24:58,309
two different paths within the cookie

550
00:24:56,450 --> 00:25:01,249
okay the first path is something like a

551
00:24:58,309 --> 00:25:05,389
hash and separated by a column we have

552
00:25:01,249 --> 00:25:07,639
something like a base64 string okay and

553
00:25:05,389 --> 00:25:09,889
reverse engineering the finger going to

554
00:25:07,639 --> 00:25:12,918
fight some potential functionalities

555
00:25:09,889 --> 00:25:14,629
that goo contained the polarity but the

556
00:25:12,919 --> 00:25:16,549
most important function here was the

557
00:25:14,629 --> 00:25:21,769
function that they call the basic seek

558
00:25:16,549 --> 00:25:24,229
or the basic code string okay we started

559
00:25:21,769 --> 00:25:26,179
analyzing this dysfunction the VCC for

560
00:25:24,229 --> 00:25:28,700
function the second function and we

561
00:25:26,179 --> 00:25:31,759
identified that extract was pasted as

562
00:25:28,700 --> 00:25:34,220
argument to this function okay and this

563
00:25:31,759 --> 00:25:36,229
fire struck has different elements for

564
00:25:34,220 --> 00:25:40,279
example this source pointer which is the

565
00:25:36,229 --> 00:25:41,929
basis T for a cookie string okay the

566
00:25:40,279 --> 00:25:45,769
destination point that will be filled

567
00:25:41,929 --> 00:25:48,769
within this function with the result of

568
00:25:45,769 --> 00:25:51,399
the basic C for cooking and for example

569
00:25:48,769 --> 00:25:53,840
the soft lane and the destination lab

570
00:25:51,399 --> 00:25:56,090
but this function the basis of all

571
00:25:53,840 --> 00:25:58,249
foreign bases for function was called by

572
00:25:56,090 --> 00:26:00,559
the whole PI D code in the highlighted

573
00:25:58,249 --> 00:26:02,389
area you can see here we are calling the

574
00:26:00,559 --> 00:26:05,779
code base is for the call function and

575
00:26:02,389 --> 00:26:06,918
we are passing cookie Astrid cooking as

576
00:26:05,779 --> 00:26:10,639
argument okay

577
00:26:06,919 --> 00:26:12,080
and the buffer flow occurs because the

578
00:26:10,639 --> 00:26:13,459
destination pointer the struct

579
00:26:12,080 --> 00:26:16,158
destination points are worth diddly

580
00:26:13,460 --> 00:26:18,499
associated to do a stat all right so if

581
00:26:16,159 --> 00:26:21,470
we send a really long cookie value

582
00:26:18,499 --> 00:26:24,619
basically for the code you are smashing

583
00:26:21,470 --> 00:26:27,889
the stack well delay overflow overflow

584
00:26:24,619 --> 00:26:30,649
in the this that arrived so but the

585
00:26:27,889 --> 00:26:32,748
progress that was analyzed localist

586
00:26:30,649 --> 00:26:34,969
we need we need to corroborate this then

587
00:26:32,749 --> 00:26:37,580
lovely okay so we decided to use a

588
00:26:34,970 --> 00:26:39,499
Unicom framework with allowed used to

589
00:26:37,580 --> 00:26:41,509
emulate some piece of code see the

590
00:26:39,499 --> 00:26:46,369
result for example like the registers

591
00:26:41,509 --> 00:26:48,289
and we can create and excrete that

592
00:26:46,369 --> 00:26:49,849
emulate different function for example

593
00:26:48,289 --> 00:26:52,580
the function that get and check the

594
00:26:49,849 --> 00:26:54,320
second part the cookie the string LAN

595
00:26:52,580 --> 00:26:57,860
the basis of Oregon and

596
00:26:54,320 --> 00:27:02,269
functions okay and GUI create an X and a

597
00:26:57,860 --> 00:27:05,120
scrip and we passed 100 a base basis

598
00:27:02,269 --> 00:27:07,669
basis apart in cold okay

599
00:27:05,120 --> 00:27:10,309
and after execute or explode or a script

600
00:27:07,669 --> 00:27:12,440
sorry we were able here we can see here

601
00:27:10,309 --> 00:27:14,658
how we were able to override the PC to

602
00:27:12,440 --> 00:27:17,690
register for example we can also control

603
00:27:14,659 --> 00:27:21,350
all data within the stack pointer and we

604
00:27:17,690 --> 00:27:23,389
were able also to override the r4 and r5

605
00:27:21,350 --> 00:27:25,039
resisted this is because the last

606
00:27:23,389 --> 00:27:27,408
instruction executed before drinking the

607
00:27:25,039 --> 00:27:30,669
the power flow is a population which is

608
00:27:27,409 --> 00:27:34,759
popping the r4 r5 and PC register okay

609
00:27:30,669 --> 00:27:37,580
so we have now what we need in order to

610
00:27:34,759 --> 00:27:40,070
create or exploit but when we started to

611
00:27:37,580 --> 00:27:42,799
do this we everything become inside here

612
00:27:40,070 --> 00:27:46,009
so with for example we detect that the

613
00:27:42,799 --> 00:27:47,929
stack was not executable we to use many

614
00:27:46,009 --> 00:27:50,450
many fingers dresses in order to create

615
00:27:47,929 --> 00:27:52,399
or a chainsaw or shellcode but none of

616
00:27:50,450 --> 00:27:54,200
them were probably because probably

617
00:27:52,399 --> 00:27:57,590
because they win the reason something

618
00:27:54,200 --> 00:27:59,600
like SLR or they can is the RTL who is

619
00:27:57,590 --> 00:28:02,178
written using something like like a

620
00:27:59,600 --> 00:28:06,168
cellar and we also identified that they

621
00:28:02,179 --> 00:28:07,879
they were using a modified version okay

622
00:28:06,169 --> 00:28:10,129
so the most important point here is it

623
00:28:07,879 --> 00:28:12,199
is a nominal innovation system and

624
00:28:10,129 --> 00:28:15,049
different tasks could be executed at the

625
00:28:12,200 --> 00:28:17,809
same time so probably what the camera is

626
00:28:15,049 --> 00:28:20,149
doing is just taking so code from the

627
00:28:17,809 --> 00:28:21,918
from the finger and execute this code in

628
00:28:20,149 --> 00:28:23,689
the memory in a different address so

629
00:28:21,919 --> 00:28:26,389
this is the reason because we weren't

630
00:28:23,690 --> 00:28:28,370
able to use finger addresses in order to

631
00:28:26,389 --> 00:28:31,070
create or shellcode for example probably

632
00:28:28,370 --> 00:28:34,729
they they were elena and offset or

633
00:28:31,070 --> 00:28:37,879
something like that okay therefore we

634
00:28:34,730 --> 00:28:39,620
didn't know where and how our shell code

635
00:28:37,879 --> 00:28:43,219
can be executed because we have

636
00:28:39,620 --> 00:28:46,219
something SLR on an annex and we were

637
00:28:43,220 --> 00:28:51,080
able to find valid addresses to crypt or

638
00:28:46,220 --> 00:28:53,840
rob change but we need a gadget

639
00:28:51,080 --> 00:28:56,600
regattas in order to create or origin so

640
00:28:53,840 --> 00:28:59,860
we need to find a way in order to find

641
00:28:56,600 --> 00:29:02,719
it or Gladius okay thinking about this

642
00:28:59,860 --> 00:29:06,889
we identify some incentive protection

643
00:29:02,720 --> 00:29:08,160
and an approach is sorry for example

644
00:29:06,889 --> 00:29:10,379
reverse engineering they take

645
00:29:08,160 --> 00:29:12,090
the chicken a structure but obviously

646
00:29:10,380 --> 00:29:15,470
within half and half time to the D

647
00:29:12,090 --> 00:29:17,550
because it could take weeks or months

648
00:29:15,470 --> 00:29:19,350
reverse-engineering table ladder in

649
00:29:17,550 --> 00:29:20,930
order to find some potential static

650
00:29:19,350 --> 00:29:23,189
addresses which is a good option

651
00:29:20,930 --> 00:29:25,260
identify a static memory like

652
00:29:23,190 --> 00:29:28,890
configurations okay within the printers

653
00:29:25,260 --> 00:29:31,260
but all the we don't we don't know what

654
00:29:28,890 --> 00:29:33,990
permission is hidden taken to that part

655
00:29:31,260 --> 00:29:35,700
of code okay no memory but for same

656
00:29:33,990 --> 00:29:39,000
random addresses that we will see now

657
00:29:35,700 --> 00:29:40,890
looking for code helpers okay call

658
00:29:39,000 --> 00:29:43,290
helpers I think what this one these are

659
00:29:40,890 --> 00:29:47,760
infinite loop that we found within the

660
00:29:43,290 --> 00:29:49,649
bozo other okay so when we came across

661
00:29:47,760 --> 00:29:51,990
with this this piece of code we saw that

662
00:29:49,650 --> 00:29:54,530
a good option will be create a blind

663
00:29:51,990 --> 00:29:56,730
exploitation okay let me explain you

664
00:29:54,530 --> 00:29:58,260
imagine that we have a code that we all

665
00:29:56,730 --> 00:30:01,350
know if this code was executed properly

666
00:29:58,260 --> 00:30:03,960
or not in use in the memory code who can

667
00:30:01,350 --> 00:30:06,090
do is acid that code we are going to try

668
00:30:03,960 --> 00:30:08,100
to jump into or infinite loop

669
00:30:06,090 --> 00:30:10,500
it's a printed remind job that means

670
00:30:08,100 --> 00:30:13,340
that the code was executed properly in

671
00:30:10,500 --> 00:30:16,710
the printed clashes that means that the

672
00:30:13,340 --> 00:30:18,389
the printer what the record sorry was

673
00:30:16,710 --> 00:30:21,030
not executed properly because the

674
00:30:18,390 --> 00:30:23,610
infinite loop was not executed so we can

675
00:30:21,030 --> 00:30:29,100
do something like a blind SQL injection

676
00:30:23,610 --> 00:30:32,010
but with memory corruption okay okay we

677
00:30:29,100 --> 00:30:34,409
finally decided to mix the called helper

678
00:30:32,010 --> 00:30:37,080
with the approach of brute force in the

679
00:30:34,410 --> 00:30:37,890
PC register and figure out what X

680
00:30:37,080 --> 00:30:40,919
solution wars

681
00:30:37,890 --> 00:30:42,630
executed in memory the main goal with

682
00:30:40,920 --> 00:30:43,920
this approach is helping us with the

683
00:30:42,630 --> 00:30:45,270
infinite loop we are going to try to

684
00:30:43,920 --> 00:30:47,490
guess exactly

685
00:30:45,270 --> 00:30:51,360
God's instruction was executed in memory

686
00:30:47,490 --> 00:30:53,760
okay let's go back example remember that

687
00:30:51,360 --> 00:30:55,620
we can control the PC register and all

688
00:30:53,760 --> 00:30:57,690
date including with a stud pointer okay

689
00:30:55,620 --> 00:31:00,330
so for this example we're going to

690
00:30:57,690 --> 00:31:03,120
include three set of face and after that

691
00:31:00,330 --> 00:31:04,610
the infinite loop address okay and we

692
00:31:03,120 --> 00:31:08,159
are going to start the broforce in the

693
00:31:04,610 --> 00:31:12,510
the printers memory with some addresses

694
00:31:08,160 --> 00:31:14,370
okay finally we jump into the address 14

695
00:31:12,510 --> 00:31:15,780
which is a pop instruction but we don't

696
00:31:14,370 --> 00:31:17,580
know whether this is appropriate pop

697
00:31:15,780 --> 00:31:20,610
instruction we are going to try to guess

698
00:31:17,580 --> 00:31:23,100
that this is a public instruction okay

699
00:31:20,610 --> 00:31:27,629
and after the security Papa struction we

700
00:31:23,100 --> 00:31:29,219
can see how our our zero register was

701
00:31:27,630 --> 00:31:33,269
over with him at the first set of phase

702
00:31:29,220 --> 00:31:35,669
with this one and the PC register was

703
00:31:33,269 --> 00:31:37,679
overwritten by the second set of phase

704
00:31:35,669 --> 00:31:41,399
so the painting will cross the painting

705
00:31:37,679 --> 00:31:42,960
will be down okay in order to solve this

706
00:31:41,399 --> 00:31:45,178
problem exactly

707
00:31:42,960 --> 00:31:47,100
guess what extraction was executing

708
00:31:45,179 --> 00:31:48,570
memory what we can do is change in

709
00:31:47,100 --> 00:31:51,090
information including with this type

710
00:31:48,570 --> 00:31:52,470
pointer okay we are going to change this

711
00:31:51,090 --> 00:31:54,539
information and we are going to include

712
00:31:52,470 --> 00:31:57,029
all the ones interface and not that the

713
00:31:54,539 --> 00:32:00,658
infinite loop for example any way

714
00:31:57,029 --> 00:32:02,970
execute this exactly same address or our

715
00:32:00,659 --> 00:32:06,419
dealer resistor will be overwritten by

716
00:32:02,970 --> 00:32:08,490
the first interface but the PCs resistor

717
00:32:06,419 --> 00:32:12,120
will be all within by the infinite loop

718
00:32:08,490 --> 00:32:14,309
others so the printer will remains up so

719
00:32:12,120 --> 00:32:17,610
just changing the information clear was

720
00:32:14,309 --> 00:32:19,860
in support we can see we were able to

721
00:32:17,610 --> 00:32:22,049
guess that the exertion that was

722
00:32:19,860 --> 00:32:23,908
executed moment was a publication which

723
00:32:22,049 --> 00:32:26,399
is popping one resistor we don't know

724
00:32:23,909 --> 00:32:31,679
which one and as it has a PC register

725
00:32:26,399 --> 00:32:33,840
okay so using this methodology or

726
00:32:31,679 --> 00:32:36,149
approach we were able to in define three

727
00:32:33,840 --> 00:32:37,918
different factions in memory the first

728
00:32:36,149 --> 00:32:40,860
one in the others 12 which is an add

729
00:32:37,919 --> 00:32:43,380
instruction the next one is in the

730
00:32:40,860 --> 00:32:46,019
others 14 which is a puppy session and

731
00:32:43,380 --> 00:32:48,120
in the distance in the distance of 500

732
00:32:46,019 --> 00:32:51,389
bytes we identify another pub

733
00:32:48,120 --> 00:32:53,399
instruction so we have now a pattern

734
00:32:51,389 --> 00:32:56,010
keep in mind that these goes in memory

735
00:32:53,399 --> 00:32:58,320
okay so we have now a pattern exactly a

736
00:32:56,010 --> 00:33:01,230
pattern a mummy with three we were able

737
00:32:58,320 --> 00:33:04,918
to defy three puppies three extractions

738
00:33:01,230 --> 00:33:06,960
okay the goal here was try 25 exactly

739
00:33:04,919 --> 00:33:09,690
sympathy that we found my memory in our

740
00:33:06,960 --> 00:33:11,909
framework address okay if in were data

741
00:33:09,690 --> 00:33:14,669
and we were able to in defined exactly

742
00:33:11,909 --> 00:33:15,809
pattern but in in other others good that

743
00:33:14,669 --> 00:33:17,820
means is that the current ladies

744
00:33:15,809 --> 00:33:19,529
applying an offset when the chemist

745
00:33:17,820 --> 00:33:21,480
taking this code and execute this code

746
00:33:19,529 --> 00:33:24,139
in memory the canneries apply in an

747
00:33:21,480 --> 00:33:27,809
upset but going now now what exactly

748
00:33:24,139 --> 00:33:30,779
option was applying by the kernel so

749
00:33:27,809 --> 00:33:32,580
this provides useful drug ideas and

750
00:33:30,779 --> 00:33:35,650
potential helpers you go in order to

751
00:33:32,580 --> 00:33:37,909
continue with the execution clock

752
00:33:35,650 --> 00:33:40,600
sorry for these but this is the way that

753
00:33:37,910 --> 00:33:43,010
we fall in order to create or exploit

754
00:33:40,600 --> 00:33:45,139
but this was not enough we need

755
00:33:43,010 --> 00:33:45,770
mortgages in order to create or exploit

756
00:33:45,140 --> 00:33:48,440
okay

757
00:33:45,770 --> 00:33:50,690
and at this moment we remembered that we

758
00:33:48,440 --> 00:33:53,570
identify another interesting issue or

759
00:33:50,690 --> 00:33:55,700
gravity within this this sprinter that

760
00:33:53,570 --> 00:33:58,220
provide us were exactly

761
00:33:55,700 --> 00:34:00,890
images and gives good allocated memory

762
00:33:58,220 --> 00:34:03,020
so we can use this this memory link

763
00:34:00,890 --> 00:34:06,320
velocity in order to bypass for example

764
00:34:03,020 --> 00:34:09,139
the a solar and why not we can also use

765
00:34:06,320 --> 00:34:12,409
the images and gifts in order to create

766
00:34:09,139 --> 00:34:14,899
or Rob gadgets okay or rope chains so

767
00:34:12,409 --> 00:34:19,010
what we're going to do now is something

768
00:34:14,899 --> 00:34:21,319
like exploitation with images so what we

769
00:34:19,010 --> 00:34:23,750
can do here this for example don't lot

770
00:34:21,320 --> 00:34:27,139
all the web portal images and give from

771
00:34:23,750 --> 00:34:29,239
to our laptop we can use for example the

772
00:34:27,139 --> 00:34:31,840
rocket a Python script in order to find

773
00:34:29,239 --> 00:34:35,899
some interesting instructions within the

774
00:34:31,840 --> 00:34:38,720
images and gifs overly imitation gave

775
00:34:35,899 --> 00:34:41,509
has an hour no code so we are not going

776
00:34:38,719 --> 00:34:43,908
to find coherent instruction within the

777
00:34:41,510 --> 00:34:45,290
with damage but they are by so but

778
00:34:43,909 --> 00:34:48,710
probably you can find some interesting

779
00:34:45,290 --> 00:34:52,540
if I squeeze until we do that and we

780
00:34:48,710 --> 00:34:56,240
finally were able to identify some

781
00:34:52,540 --> 00:35:00,380
useful instruction and group guide is in

782
00:34:56,239 --> 00:35:03,020
order to create a shellcode okay but we

783
00:35:00,380 --> 00:35:04,700
came across with another problem the

784
00:35:03,020 --> 00:35:06,020
catch is this is the last problem I

785
00:35:04,700 --> 00:35:08,569
promise you

786
00:35:06,020 --> 00:35:10,850
but do always agree show flash the

787
00:35:08,570 --> 00:35:14,530
caches so we have some options here for

788
00:35:10,850 --> 00:35:17,089
example call the RM instruction

789
00:35:14,530 --> 00:35:19,430
to different function like sleep and

790
00:35:17,090 --> 00:35:21,020
protect and others all continue with the

791
00:35:19,430 --> 00:35:25,069
execution flow which probably the most

792
00:35:21,020 --> 00:35:28,040
heart by the most professional option

793
00:35:25,070 --> 00:35:31,270
it was just quickly in order to continue

794
00:35:28,040 --> 00:35:33,350
with the situation flow we need that all

795
00:35:31,270 --> 00:35:36,770
shellcode implement three different

796
00:35:33,350 --> 00:35:39,230
parts the first one is auric payload we

797
00:35:36,770 --> 00:35:41,210
should do something with or exploit

798
00:35:39,230 --> 00:35:44,060
something like within the previous

799
00:35:41,210 --> 00:35:45,890
display for example just hook in the

800
00:35:44,060 --> 00:35:47,869
printf function ID and steal all data

801
00:35:45,890 --> 00:35:49,699
sent to the printers or robots correct

802
00:35:47,869 --> 00:35:51,440
the second part should change the

803
00:35:49,699 --> 00:35:54,829
address that we were able to over going

804
00:35:51,440 --> 00:35:56,809
with exploit so with a valid address at

805
00:35:54,829 --> 00:35:58,489
the angry one we want to continue with

806
00:35:56,809 --> 00:36:01,009
the conclusion flow so we need to jump

807
00:35:58,489 --> 00:36:03,019
to a valid function for example okay and

808
00:36:01,009 --> 00:36:07,430
the third part show an end accept

809
00:36:03,019 --> 00:36:09,649
pointer we have execute or payload we

810
00:36:07,430 --> 00:36:13,069
change the address so probably change it

811
00:36:09,650 --> 00:36:14,509
or a stack pointer so we need to align

812
00:36:13,069 --> 00:36:16,279
the stack pointer to a previous state

813
00:36:14,509 --> 00:36:18,819
and just finally just trigger the

814
00:36:16,279 --> 00:36:23,349
velocity as many times as you want okay

815
00:36:18,819 --> 00:36:32,538
let's go there the demo for this exploit

816
00:36:23,349 --> 00:36:34,999
let me open this demo for this keep in

817
00:36:32,539 --> 00:36:37,190
mind that we for the previous plague we

818
00:36:34,999 --> 00:36:39,879
attack the documents well for this

819
00:36:37,190 --> 00:36:43,209
display we are going to attack exactly

820
00:36:39,880 --> 00:36:45,769
the printers memory okay so for this

821
00:36:43,209 --> 00:36:49,399
exploit we implement four different

822
00:36:45,769 --> 00:36:50,959
functionalities the first one is a graph

823
00:36:49,400 --> 00:36:52,849
theoretic which allows you to write

824
00:36:50,959 --> 00:36:55,279
bytes into the printers memory and jump

825
00:36:52,849 --> 00:36:58,219
into it for example we want to write a

826
00:36:55,279 --> 00:37:00,289
shellcode the next one is what write a

827
00:36:58,219 --> 00:37:02,119
file which is the same but we can for

828
00:37:00,289 --> 00:37:04,699
example use a local fighter you have in

829
00:37:02,119 --> 00:37:07,729
your laptop in order to overwrite a file

830
00:37:04,699 --> 00:37:11,900
in the in the printer like an image for

831
00:37:07,729 --> 00:37:14,769
example the next one is the great

832
00:37:11,900 --> 00:37:17,779
functionality this allows you to read

833
00:37:14,769 --> 00:37:19,008
intensive data from the from the from

834
00:37:17,779 --> 00:37:21,380
the printer memory ok

835
00:37:19,009 --> 00:37:23,900
the next is a search from today which is

836
00:37:21,380 --> 00:37:27,739
really useful and it can allow you to

837
00:37:23,900 --> 00:37:30,589
for example find sensitive information

838
00:37:27,739 --> 00:37:32,900
with the printers memory ok but in order

839
00:37:30,589 --> 00:37:34,400
to write read a data set that we need to

840
00:37:32,900 --> 00:37:36,140
copy all data we want to read for

841
00:37:34,400 --> 00:37:39,410
example in a known place in order to

842
00:37:36,140 --> 00:37:42,288
read them so we can do what we did here

843
00:37:39,410 --> 00:37:44,149
is just copy the data that we want to

844
00:37:42,289 --> 00:37:47,449
read in a known place for example the

845
00:37:44,150 --> 00:37:49,459
images so these are images that we we

846
00:37:47,449 --> 00:37:52,119
are going to to use to replace them for

847
00:37:49,459 --> 00:37:56,299
the two copied information these are

848
00:37:52,119 --> 00:37:58,640
classical PNG with a normal header what

849
00:37:56,299 --> 00:38:00,230
we're going to do now is write sentences

850
00:37:58,640 --> 00:38:02,029
to a painter memory ok

851
00:38:00,230 --> 00:38:04,369
we can write as a cello but for this

852
00:38:02,030 --> 00:38:06,530
example is Jesus enters hi everyone

853
00:38:04,369 --> 00:38:08,540
and we're not going to jump into this

854
00:38:06,530 --> 00:38:10,849
code because notice a code we can see

855
00:38:08,540 --> 00:38:13,040
how we write in the information in no

856
00:38:10,849 --> 00:38:15,859
place and with a lotta image again you

857
00:38:13,040 --> 00:38:19,089
can see how the first line contains all

858
00:38:15,859 --> 00:38:22,640
hi everyone centers and these printers

859
00:38:19,089 --> 00:38:28,070
okay we we can do the same but with a

860
00:38:22,640 --> 00:38:32,180
great file for example the functionality

861
00:38:28,070 --> 00:38:34,460
in order to write a logo in to in order

862
00:38:32,180 --> 00:38:38,060
to overwrite web portal image for

863
00:38:34,460 --> 00:38:40,730
example okay with this

864
00:38:38,060 --> 00:38:42,828
this is a mat for the printer that we

865
00:38:40,730 --> 00:38:45,020
and as you can see here this is the

866
00:38:42,829 --> 00:38:50,060
image of the path we're going to copy

867
00:38:45,020 --> 00:38:52,790
this path in all for exploit okay let's

868
00:38:50,060 --> 00:38:55,670
go with the cop in this method that

869
00:38:52,790 --> 00:38:57,230
we're going to do is just read their

870
00:38:55,670 --> 00:38:59,210
logo and we are going to write this

871
00:38:57,230 --> 00:39:03,260
information into the printer memory okay

872
00:38:59,210 --> 00:39:05,380
it takes a bit so let me this forward I

873
00:39:03,260 --> 00:39:11,270
don't know where is it

874
00:39:05,380 --> 00:39:15,140
exactly it takes a bit okay and a second

875
00:39:11,270 --> 00:39:16,670
it will if we will finish this finish

876
00:39:15,140 --> 00:39:18,920
we're going to check the image again

877
00:39:16,670 --> 00:39:20,630
this is the enmity we wanted to alright

878
00:39:18,920 --> 00:39:22,940
and it will refresh this image we were

879
00:39:20,630 --> 00:39:24,609
able to avoid this image with the hug in

880
00:39:22,940 --> 00:39:28,490
the Box logo okay

881
00:39:24,609 --> 00:39:30,290
this was for right information but no

882
00:39:28,490 --> 00:39:33,200
literacy is great information from the

883
00:39:30,290 --> 00:39:35,029
printer okay so we we will also

884
00:39:33,200 --> 00:39:37,040
implement another functionality with

885
00:39:35,030 --> 00:39:39,079
itself in writing you need to find

886
00:39:37,040 --> 00:39:41,390
interesting formation within this so

887
00:39:39,079 --> 00:39:45,410
looking into the printer we identify

888
00:39:41,390 --> 00:39:48,170
that this was configured with a sorry

889
00:39:45,410 --> 00:39:51,319
with a domain account in this case

890
00:39:48,170 --> 00:39:54,260
identity grow the an inducer but the

891
00:39:51,319 --> 00:39:55,910
power is not is not here in clean clear

892
00:39:54,260 --> 00:39:57,740
test so we are going to try to find

893
00:39:55,910 --> 00:39:59,930
these these power within the printer

894
00:39:57,740 --> 00:40:02,060
memory and all what is okay so we're

895
00:39:59,930 --> 00:40:05,899
going to use the search functionality in

896
00:40:02,060 --> 00:40:09,200
order to search there integral text into

897
00:40:05,900 --> 00:40:11,000
the printer memory and after secret this

898
00:40:09,200 --> 00:40:13,549
you can see how we write in the circle

899
00:40:11,000 --> 00:40:15,559
that will the work

900
00:40:13,549 --> 00:40:17,449
where the load images as you can see the

901
00:40:15,559 --> 00:40:20,329
entity group text was phone at the

902
00:40:17,449 --> 00:40:23,390
address this one these the other the the

903
00:40:20,329 --> 00:40:26,209
entity group text should be okay

904
00:40:23,390 --> 00:40:28,189
we are going to now use they read

905
00:40:26,209 --> 00:40:30,319
functionality in order to dump these

906
00:40:28,189 --> 00:40:32,239
this information from these others okay

907
00:40:30,319 --> 00:40:34,489
this is a reflection I think we are

908
00:40:32,239 --> 00:40:39,859
going to copy and paste the same address

909
00:40:34,489 --> 00:40:41,719
and we're going to read 500 bytes as you

910
00:40:39,859 --> 00:40:43,759
can see here we're reading the

911
00:40:41,719 --> 00:40:45,849
information from these address and

912
00:40:43,759 --> 00:40:47,929
copying the same information into the

913
00:40:45,849 --> 00:40:50,929
image others that we are going to

914
00:40:47,929 --> 00:40:56,749
download okay and after finishing it

915
00:40:50,929 --> 00:41:00,169
takes a bit agree the load the gain the

916
00:40:56,749 --> 00:41:03,288
image you can see for example below the

917
00:41:00,169 --> 00:41:05,749
bottom you can see develops or how the

918
00:41:03,289 --> 00:41:08,809
SD group I mean we use a wart phone and

919
00:41:05,749 --> 00:41:11,269
we can also see how a little bit below

920
00:41:08,809 --> 00:41:12,769
how the super password was the package

921
00:41:11,269 --> 00:41:16,640
that was included with the printer

922
00:41:12,769 --> 00:41:18,979
member opening Claire takes also so with

923
00:41:16,640 --> 00:41:21,259
this this block we were able to write

924
00:41:18,979 --> 00:41:22,999
and great in sensitive information into

925
00:41:21,259 --> 00:41:24,109
their printed member a controller in

926
00:41:22,999 --> 00:41:27,888
whole printers

927
00:41:24,109 --> 00:41:32,139
okay this was the demo for this exploit

928
00:41:27,889 --> 00:41:32,139
and let's go with the conclusions okay

929
00:41:33,609 --> 00:41:40,549
so before that I hope you are all still

930
00:41:38,479 --> 00:41:46,069
alive after Danny trying to explain this

931
00:41:40,549 --> 00:41:49,429
last sprite we knew it was hard so going

932
00:41:46,069 --> 00:41:51,949
to the responsible disclosure process we

933
00:41:49,429 --> 00:41:54,019
started in February and we got a very

934
00:41:51,949 --> 00:41:57,109
mixed response from the different

935
00:41:54,019 --> 00:41:59,029
manufacturers so had a very mature

936
00:41:57,109 --> 00:42:02,779
process for this and we're really quick

937
00:41:59,029 --> 00:42:06,859
a helpful helpful and releasing patches

938
00:42:02,779 --> 00:42:09,949
and everything don't do the hunt we can

939
00:42:06,859 --> 00:42:12,229
just say that sometimes it was easier to

940
00:42:09,949 --> 00:42:16,159
find the vulnerabilities than the than

941
00:42:12,229 --> 00:42:21,618
the security department so I guess they

942
00:42:16,159 --> 00:42:24,499
should do some work in that area most of

943
00:42:21,619 --> 00:42:26,130
them have already published patches for

944
00:42:24,499 --> 00:42:28,078
most of issues

945
00:42:26,130 --> 00:42:33,239
we have already published advisories for

946
00:42:28,079 --> 00:42:37,890
all of them going to the CV party we got

947
00:42:33,239 --> 00:42:40,440
a lot of them 50 in this case 14 were

948
00:42:37,890 --> 00:42:43,739
medium risk ones another 14 were high

949
00:42:40,440 --> 00:42:46,349
response and the rest 22 were critical

950
00:42:43,739 --> 00:42:50,970
raise ones within the report and yellow

951
00:42:46,349 --> 00:42:52,920
ones just take the the number per

952
00:42:50,970 --> 00:42:54,390
manufacturer you shouldn't take it as an

953
00:42:52,920 --> 00:42:57,960
indicative of their state of security

954
00:42:54,390 --> 00:43:00,029
because some of the the vendors grouped

955
00:42:57,960 --> 00:43:03,269
different vulnerabilities under the same

956
00:43:00,029 --> 00:43:07,670
CV entries just for reference the full

957
00:43:03,269 --> 00:43:10,738
list and going for the main conclusion

958
00:43:07,670 --> 00:43:13,049
this research and to show how the state

959
00:43:10,739 --> 00:43:15,329
of security in common office devices

960
00:43:13,049 --> 00:43:18,538
such as printers which are present in

961
00:43:15,329 --> 00:43:20,960
most in not if not all organizations is

962
00:43:18,539 --> 00:43:24,359
still very mature and are dealing north

963
00:43:20,960 --> 00:43:27,029
we found a large number of high and

964
00:43:24,359 --> 00:43:31,499
critical risk issues in all the printers

965
00:43:27,029 --> 00:43:33,809
tested and we wrote functional exploits

966
00:43:31,499 --> 00:43:35,910
to achieve remote code in four of them

967
00:43:33,809 --> 00:43:38,339
we shall here to and to retreat

968
00:43:35,910 --> 00:43:42,629
documents and want to retrieve other

969
00:43:38,339 --> 00:43:46,078
secrets from the memory and we run out

970
00:43:42,630 --> 00:43:47,460
of time so so we were we weren't able to

971
00:43:46,079 --> 00:43:49,819
develop more as place for the other

972
00:43:47,460 --> 00:43:53,729
printers but they have been LEDs that

973
00:43:49,819 --> 00:43:55,440
cooled probably to do that and we stop

974
00:43:53,729 --> 00:43:57,569
searching for vulnerabilities after

975
00:43:55,440 --> 00:43:59,099
finding a few of them as we said so we

976
00:43:57,569 --> 00:44:02,880
think that probably there are a lot more

977
00:43:59,099 --> 00:44:05,489
to to be found and we only checked a few

978
00:44:02,880 --> 00:44:08,579
services as you saw in the attack

979
00:44:05,489 --> 00:44:11,789
surface so there is a lot more to

980
00:44:08,579 --> 00:44:14,130
research in this area and by what we saw

981
00:44:11,789 --> 00:44:16,410
the first one looking at the services

982
00:44:14,130 --> 00:44:21,029
will probably find some logs in there

983
00:44:16,410 --> 00:44:22,618
and we do not expect the same

984
00:44:21,029 --> 00:44:24,059
manufacturer having different

985
00:44:22,619 --> 00:44:27,690
implementations for some of the

986
00:44:24,059 --> 00:44:29,880
protocols like IPP or LDV so probably

987
00:44:27,690 --> 00:44:32,609
the number of modalities

988
00:44:29,880 --> 00:44:34,540
this different abilities effects a huge

989
00:44:32,609 --> 00:44:37,930
number of devices

990
00:44:34,540 --> 00:44:43,240
sometimes larger than than the number

991
00:44:37,930 --> 00:44:50,460
made by the manufacturers we could also

992
00:44:43,240 --> 00:44:53,709
say less marketing and more security and

993
00:44:50,460 --> 00:44:57,550
join for the main gun question the

994
00:44:53,710 --> 00:45:00,130
recommendation sorry for manufacturers

995
00:44:57,550 --> 00:45:02,080
it will be to start investing in

996
00:45:00,130 --> 00:45:06,220
security it is necessary in all the

997
00:45:02,080 --> 00:45:08,650
phases of development lifecycle then for

998
00:45:06,220 --> 00:45:10,660
organizations they should start by

999
00:45:08,650 --> 00:45:12,610
considering considering these devices

1000
00:45:10,660 --> 00:45:14,680
which are connected to their corporate

1001
00:45:12,610 --> 00:45:16,650
networks as the threads they are because

1002
00:45:14,680 --> 00:45:20,350
they have a lot of vulnerabilities and

1003
00:45:16,650 --> 00:45:24,490
for hackers this is a very mature field

1004
00:45:20,350 --> 00:45:27,100
if you start researching whether devices

1005
00:45:24,490 --> 00:45:29,709
starting from the very basics you are

1006
00:45:27,100 --> 00:45:31,990
going to find a lot of issues and you

1007
00:45:29,710 --> 00:45:36,880
will learn a lot and you will have a lot

1008
00:45:31,990 --> 00:45:40,180
of fun so you should give it a try and I

1009
00:45:36,880 --> 00:45:41,650
suspected that which sensors showed us a

1010
00:45:40,180 --> 00:45:47,669
lot of these devices connected to

1011
00:45:41,650 --> 00:45:50,380
internet and we even saw that some

1012
00:45:47,670 --> 00:45:52,390
different manufacturers seem to be using

1013
00:45:50,380 --> 00:45:55,690
the same code for them for their

1014
00:45:52,390 --> 00:46:00,190
interest you can see in these two images

1015
00:45:55,690 --> 00:46:02,520
that are quite similar so probably we

1016
00:46:00,190 --> 00:46:07,390
tested more vendors than we thought

1017
00:46:02,520 --> 00:46:09,370
and the knowledge when finally thanks to

1018
00:46:07,390 --> 00:46:11,319
the material FISMA lewis and filling mas

1019
00:46:09,370 --> 00:46:14,290
for all their support also special

1020
00:46:11,320 --> 00:46:16,960
thanks to Mary Ellen Chris for suffering

1021
00:46:14,290 --> 00:46:18,820
us the most and also thank you to Alvaro

1022
00:46:16,960 --> 00:46:21,790
Felipe who was part of the research

1023
00:46:18,820 --> 00:46:24,010
during the first days but and also heard

1024
00:46:21,790 --> 00:46:26,500
that with great ideas during the

1025
00:46:24,010 --> 00:46:30,670
exploitation phases so it was difficult

1026
00:46:26,500 --> 00:46:33,610
to put a lot of months of research into

1027
00:46:30,670 --> 00:46:40,860
just 45 minutes but thank you for

1028
00:46:33,610 --> 00:46:40,860
suffering us a talking regression

1029
00:46:48,630 --> 00:47:08,530
no take one off the slide we can see the

1030
00:47:05,800 --> 00:47:10,329
top question is could these

1031
00:47:08,530 --> 00:47:13,500
vulnerabilities be effectively leveraged

1032
00:47:10,329 --> 00:47:23,400
to establish control on a local network

1033
00:47:13,500 --> 00:47:26,710
what yes basically uh yeah this you can

1034
00:47:23,400 --> 00:47:29,650
you can totally do that if you can

1035
00:47:26,710 --> 00:47:33,130
execute called you could sometimes

1036
00:47:29,650 --> 00:47:35,109
modify the femur or the file system to

1037
00:47:33,130 --> 00:47:38,200
get persistence and depending of the

1038
00:47:35,109 --> 00:47:42,819
operating system and you could totally

1039
00:47:38,200 --> 00:47:45,129
do that based totally feasible yeah we

1040
00:47:42,819 --> 00:47:48,490
have a demo that we were able to show in

1041
00:47:45,130 --> 00:47:50,740
this in this talk but we have exactly we

1042
00:47:48,490 --> 00:47:52,060
are doing exactly just executed a

1043
00:47:50,740 --> 00:47:54,759
command control with the printer.i

1044
00:47:52,060 --> 00:47:56,410
control just be boarding so our internal

1045
00:47:54,760 --> 00:48:04,140
language in order to attack today also

1046
00:47:56,410 --> 00:48:09,178
that's exactly the question thank you

1047
00:48:04,140 --> 00:48:09,179
[Applause]

