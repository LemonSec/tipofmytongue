1
00:00:09,730 --> 00:00:15,530
eyes are having a great talk great

2
00:00:12,590 --> 00:00:17,630
conference so I would like to start by

3
00:00:15,530 --> 00:00:20,029
thanking my family for all the support I

4
00:00:17,630 --> 00:00:22,820
have I wouldn't be here without them so

5
00:00:20,029 --> 00:00:24,950
my talk is titled perfidious make be

6
00:00:22,820 --> 00:00:26,480
back during great again for phidias is

7
00:00:24,950 --> 00:00:27,950
the name of library I developed while I

8
00:00:26,480 --> 00:00:30,590
was at Sai pretty interning at Sai

9
00:00:27,950 --> 00:00:33,019
pretty and make P back doing great again

10
00:00:30,590 --> 00:00:35,180
is basically a technique that I found

11
00:00:33,020 --> 00:00:37,160
while working and researching there so

12
00:00:35,180 --> 00:00:39,050
I'll be discussing that technique but I

13
00:00:37,160 --> 00:00:40,430
would like you to make sure that you

14
00:00:39,050 --> 00:00:43,449
keep an eye out for the bigger picture

15
00:00:40,430 --> 00:00:45,740
which is the library itself alright so a

16
00:00:43,450 --> 00:00:47,180
little bit about me my name is Charles

17
00:00:45,740 --> 00:00:48,590
de Ventura Doshi I am a cyber security

18
00:00:47,180 --> 00:00:50,450
graduate student at University of

19
00:00:48,590 --> 00:00:52,850
Maryland I also work as a teaching

20
00:00:50,450 --> 00:00:54,140
assistant there and I have previously

21
00:00:52,850 --> 00:00:56,660
worked as I'm always research enter

22
00:00:54,140 --> 00:01:00,680
honest I believe those are my twitter

23
00:00:56,660 --> 00:01:02,809
handles and my github handle so I'll

24
00:01:00,680 --> 00:01:05,059
start by giving some context about how

25
00:01:02,810 --> 00:01:07,340
this project got started so when I first

26
00:01:05,059 --> 00:01:09,200
started at cyber II the initial project

27
00:01:07,340 --> 00:01:11,570
idea that my mentors presented me with

28
00:01:09,200 --> 00:01:14,060
was developing a machine learning model

29
00:01:11,570 --> 00:01:16,520
that could ingest large amounts of

30
00:01:14,060 --> 00:01:18,290
baldra source code and basically create

31
00:01:16,520 --> 00:01:19,820
a modular sample that could evade the

32
00:01:18,290 --> 00:01:22,820
current endpoint detection techniques

33
00:01:19,820 --> 00:01:25,309
now I had two questions regarding that

34
00:01:22,820 --> 00:01:27,710
project first whether it was legal for

35
00:01:25,310 --> 00:01:29,600
me to work on the project because I am

36
00:01:27,710 --> 00:01:30,949
an international student in the United

37
00:01:29,600 --> 00:01:34,669
States so I didn't want to get arrested

38
00:01:30,950 --> 00:01:36,799
the second question was even if I was

39
00:01:34,670 --> 00:01:38,390
able to develop all the parcels needed

40
00:01:36,799 --> 00:01:40,280
for all the various languages in which

41
00:01:38,390 --> 00:01:44,150
in which these malware source code is

42
00:01:40,280 --> 00:01:45,710
being written in how would we find the

43
00:01:44,150 --> 00:01:48,020
quantity of source code needed to train

44
00:01:45,710 --> 00:01:51,110
a machine learning model and has it

45
00:01:48,020 --> 00:01:53,000
figured well as fate would have it the

46
00:01:51,110 --> 00:01:54,470
mentor that I had for the project

47
00:01:53,000 --> 00:01:56,689
basically moved on to another company

48
00:01:54,470 --> 00:01:59,390
and the project was left with me to do

49
00:01:56,689 --> 00:02:01,908
it whatever I wanted to do with so I had

50
00:01:59,390 --> 00:02:04,310
two options I could idle away my three

51
00:02:01,909 --> 00:02:06,950
months at Highbury or I could basically

52
00:02:04,310 --> 00:02:08,658
figure out a way to work a reasonable

53
00:02:06,950 --> 00:02:11,569
amount of project that could be taken

54
00:02:08,658 --> 00:02:13,459
forward so what I figured was we don't

55
00:02:11,569 --> 00:02:15,768
have malware source code but what we do

56
00:02:13,459 --> 00:02:18,650
have is a large amount of malicious PE

57
00:02:15,769 --> 00:02:20,749
files right so I had to find a way in

58
00:02:18,650 --> 00:02:21,870
which these PE files could be broken up

59
00:02:20,749 --> 00:02:23,400
into in

60
00:02:21,870 --> 00:02:26,040
that could be faded into a machine

61
00:02:23,400 --> 00:02:29,129
learning model so in order to do that

62
00:02:26,040 --> 00:02:31,140
the first step was to develop or find

63
00:02:29,129 --> 00:02:34,230
basically a parsing library that could

64
00:02:31,140 --> 00:02:36,450
split these PE files into small chunks

65
00:02:34,230 --> 00:02:38,359
of blocks that could be used as inputs

66
00:02:36,450 --> 00:02:41,129
to machine learning models and although

67
00:02:38,360 --> 00:02:43,890
the PE file package that is available in

68
00:02:41,129 --> 00:02:46,560
Python developed by aro is a really

69
00:02:43,890 --> 00:02:48,660
great package it is not meant to do that

70
00:02:46,560 --> 00:02:50,580
those kind of thing it is meant to parse

71
00:02:48,660 --> 00:02:54,209
PE files and present that information as

72
00:02:50,580 --> 00:02:56,849
is it is not really developed in a way

73
00:02:54,209 --> 00:03:00,540
that all those various fields inside the

74
00:02:56,849 --> 00:03:02,819
complex B file can be edited right so

75
00:03:00,540 --> 00:03:06,959
what I decided was to develop perfidious

76
00:03:02,819 --> 00:03:09,179
which is soon to be released a Python

77
00:03:06,959 --> 00:03:11,340
package that can be used to pass edit

78
00:03:09,180 --> 00:03:15,209
and assemble PE files from ground up

79
00:03:11,340 --> 00:03:17,730
basically it creates such it creates an

80
00:03:15,209 --> 00:03:20,010
environment in which PE files could be

81
00:03:17,730 --> 00:03:22,319
split into individual Lego blocks and

82
00:03:20,010 --> 00:03:24,450
they can be like used as and when you

83
00:03:22,319 --> 00:03:25,828
require basically you could add and

84
00:03:24,450 --> 00:03:30,238
switch sections and stuff like that

85
00:03:25,829 --> 00:03:31,680
right so before we switch in to P back

86
00:03:30,239 --> 00:03:34,170
during techniques it would be a good

87
00:03:31,680 --> 00:03:37,620
idea to have a refresher on what a PE

88
00:03:34,170 --> 00:03:39,809
file format looks like right so this is

89
00:03:37,620 --> 00:03:42,569
an overview of what the PE file looks

90
00:03:39,810 --> 00:03:44,819
like it has a dass header it has a door

91
00:03:42,569 --> 00:03:47,250
stub which contains this program cannot

92
00:03:44,819 --> 00:03:50,160
be run in DOS mode message or a complete

93
00:03:47,250 --> 00:03:53,430
dos program it has or may not have a

94
00:03:50,160 --> 00:03:57,000
rich header which was until 2017 and

95
00:03:53,430 --> 00:03:58,799
undisclosed windows header it has the PE

96
00:03:57,000 --> 00:04:00,870
signature it has the anti header which

97
00:03:58,799 --> 00:04:03,000
is composed of the file header and the

98
00:04:00,870 --> 00:04:05,190
optional header the optional header also

99
00:04:03,000 --> 00:04:06,419
contains the data directory stable which

100
00:04:05,190 --> 00:04:09,180
points to all the various data

101
00:04:06,419 --> 00:04:11,250
directories and then it has the section

102
00:04:09,180 --> 00:04:12,840
header which points to all the sections

103
00:04:11,250 --> 00:04:16,978
that are actually contained in the PE

104
00:04:12,840 --> 00:04:18,630
file right so this is what a das header

105
00:04:16,978 --> 00:04:20,399
looks like it contains a lot of

106
00:04:18,630 --> 00:04:21,870
different fields but the importance is

107
00:04:20,399 --> 00:04:22,460
what important ones are highlighted in

108
00:04:21,870 --> 00:04:25,200
yellow

109
00:04:22,460 --> 00:04:27,750
ematic is the MZ signature that we see

110
00:04:25,200 --> 00:04:29,430
at the beginning of a PE file this helps

111
00:04:27,750 --> 00:04:33,120
the windows row know that ok this is a

112
00:04:29,430 --> 00:04:35,639
PE file right the next is the CSUN field

113
00:04:33,120 --> 00:04:37,740
which is the checksum so the checksum

114
00:04:35,639 --> 00:04:40,110
basically gives you the check sum of the

115
00:04:37,740 --> 00:04:42,030
file this there are several different

116
00:04:40,110 --> 00:04:44,310
check sums present inside a PE file so

117
00:04:42,030 --> 00:04:46,438
whenever you alter a PE file it's not

118
00:04:44,310 --> 00:04:47,639
just sufficient to change one checksum

119
00:04:46,439 --> 00:04:49,949
you need to change each and every

120
00:04:47,639 --> 00:04:51,539
checksum accordingly so checksum

121
00:04:49,949 --> 00:04:53,550
basically helps you to know whether a PE

122
00:04:51,539 --> 00:04:57,210
file has been altered in some way or not

123
00:04:53,550 --> 00:04:59,789
the e.l.f nu is basically the pointer to

124
00:04:57,210 --> 00:05:01,560
the extended P head ER this basically

125
00:04:59,789 --> 00:05:07,020
marks the starting of the optional

126
00:05:01,560 --> 00:05:09,240
header so the next the next component

127
00:05:07,020 --> 00:05:11,460
that we have is the da stub now the DA

128
00:05:09,240 --> 00:05:13,439
stub can either contain the daus message

129
00:05:11,460 --> 00:05:15,628
which can be a variable and string

130
00:05:13,439 --> 00:05:17,340
terminated by a dollar sign or it can

131
00:05:15,629 --> 00:05:20,039
have a complete daus program embedded

132
00:05:17,340 --> 00:05:22,138
within it as if some of you have solved

133
00:05:20,039 --> 00:05:24,000
Flair challenges you know there was a

134
00:05:22,139 --> 00:05:25,800
challenge which contained a DOS program

135
00:05:24,000 --> 00:05:28,919
and the message in the DOS header was

136
00:05:25,800 --> 00:05:30,750
this program cannot not be run in DOS

137
00:05:28,919 --> 00:05:34,680
mode so basically you had to run that

138
00:05:30,750 --> 00:05:36,960
challenge and DOS mode so the next field

139
00:05:34,680 --> 00:05:38,999
that we have is the rich header now rich

140
00:05:36,960 --> 00:05:42,150
header is a really interesting header

141
00:05:38,999 --> 00:05:44,219
because this was historically used by

142
00:05:42,150 --> 00:05:46,529
windows to nail a couple of really

143
00:05:44,219 --> 00:05:48,169
prominent malware authors because rich

144
00:05:46,529 --> 00:05:51,060
header contains information about the

145
00:05:48,169 --> 00:05:52,740
compiler version and the compiler IDs

146
00:05:51,060 --> 00:05:54,779
that are used in order to compile that

147
00:05:52,740 --> 00:05:57,930
particular software right so this can be

148
00:05:54,779 --> 00:06:00,419
used in to create a sort of a signature

149
00:05:57,930 --> 00:06:04,259
that a particular malware author can

150
00:06:00,419 --> 00:06:05,789
have right so if you before this header

151
00:06:04,259 --> 00:06:08,039
was discovered it was pretty much

152
00:06:05,789 --> 00:06:10,169
impossible for anyone to know that this

153
00:06:08,039 --> 00:06:15,419
existed right so this could be used as a

154
00:06:10,169 --> 00:06:17,758
signature to deter detect them the next

155
00:06:15,419 --> 00:06:19,979
is the PE signature which is PE followed

156
00:06:17,759 --> 00:06:23,339
by two nulls this this basically marks

157
00:06:19,979 --> 00:06:25,080
the starting of the NT header so NT

158
00:06:23,339 --> 00:06:26,759
header itself is composed of file header

159
00:06:25,080 --> 00:06:28,469
and the optional header and the optional

160
00:06:26,759 --> 00:06:33,240
header points through the data directory

161
00:06:28,469 --> 00:06:35,069
stable now file header is a really

162
00:06:33,240 --> 00:06:37,020
important header because it provides you

163
00:06:35,069 --> 00:06:39,060
the information about the entire PE file

164
00:06:37,020 --> 00:06:41,159
it's the metadata about the PE file so

165
00:06:39,060 --> 00:06:42,960
it specifies what type of machine this

166
00:06:41,159 --> 00:06:44,490
file can be run on the number of

167
00:06:42,960 --> 00:06:47,099
sections that are contained in this

168
00:06:44,490 --> 00:06:49,110
particular PE file the time date stamp

169
00:06:47,099 --> 00:06:49,469
which specifies when this particular PE

170
00:06:49,110 --> 00:06:51,750
file

171
00:06:49,470 --> 00:06:53,610
was compiled the pointer to the symbol

172
00:06:51,750 --> 00:06:55,860
table number of symbols present in that

173
00:06:53,610 --> 00:06:57,720
particular symbol table the size of the

174
00:06:55,860 --> 00:07:00,540
optional header that for that is

175
00:06:57,720 --> 00:07:02,220
followed by the file header for the

176
00:07:00,540 --> 00:07:04,670
characteristics of the PE file which

177
00:07:02,220 --> 00:07:07,140
specifies what kind of guard CF table or

178
00:07:04,670 --> 00:07:10,280
what kind of basically security

179
00:07:07,140 --> 00:07:13,620
provisions are enabled on this PE file

180
00:07:10,280 --> 00:07:16,530
the next section that we have is

181
00:07:13,620 --> 00:07:18,990
optional header it contains a lot of

182
00:07:16,530 --> 00:07:20,909
fields but the most important ones are

183
00:07:18,990 --> 00:07:24,630
the address of the entry point which

184
00:07:20,910 --> 00:07:27,180
specifies at what address at what offset

185
00:07:24,630 --> 00:07:29,340
inside the PE file the actual code

186
00:07:27,180 --> 00:07:30,960
execution begins so this is where the

187
00:07:29,340 --> 00:07:33,840
code execution begins in the text

188
00:07:30,960 --> 00:07:36,479
section the image base specifies what

189
00:07:33,840 --> 00:07:38,099
virtual address inside the memory would

190
00:07:36,480 --> 00:07:41,460
this particular be if I'll be loaded

191
00:07:38,100 --> 00:07:43,650
from the base of the code gives you the

192
00:07:41,460 --> 00:07:45,930
basically base of the text section so

193
00:07:43,650 --> 00:07:47,429
the offset to the text section weighs of

194
00:07:45,930 --> 00:07:51,740
the data gives you the offset to the

195
00:07:47,430 --> 00:07:54,480
data section the first data section so

196
00:07:51,740 --> 00:07:57,000
once the optional optional header also

197
00:07:54,480 --> 00:07:59,250
contains data directly stable like it

198
00:07:57,000 --> 00:08:01,470
contains a list of data directories the

199
00:07:59,250 --> 00:08:04,590
that data directories format is

200
00:08:01,470 --> 00:08:06,690
basically virtual the r-va to the data

201
00:08:04,590 --> 00:08:09,599
data directly followed by the size of

202
00:08:06,690 --> 00:08:13,800
the data directory it's basically a four

203
00:08:09,600 --> 00:08:16,229
byte by four byte list right so what

204
00:08:13,800 --> 00:08:18,030
happens is this enables you to actually

205
00:08:16,229 --> 00:08:20,760
find these data directories inside the

206
00:08:18,030 --> 00:08:23,130
PE file now data directory is basically

207
00:08:20,760 --> 00:08:25,919
contain metadata about various things so

208
00:08:23,130 --> 00:08:28,860
export data directory contains data

209
00:08:25,919 --> 00:08:30,900
about the export table so export table

210
00:08:28,860 --> 00:08:35,190
contains all the exported functions that

211
00:08:30,900 --> 00:08:37,890
have been exported by this PE file now P

212
00:08:35,190 --> 00:08:39,870
files can be either a X's or dll's so if

213
00:08:37,890 --> 00:08:41,789
it's a dll it contains a lot of

214
00:08:39,870 --> 00:08:44,339
functions that are exported to other p5

215
00:08:41,789 --> 00:08:46,170
right so export table contains all of

216
00:08:44,339 --> 00:08:47,610
those functions then there's import

217
00:08:46,170 --> 00:08:49,620
table importable contains all the

218
00:08:47,610 --> 00:08:51,960
imports that are being done by this

219
00:08:49,620 --> 00:08:53,550
particular PE file resource table

220
00:08:51,960 --> 00:08:56,850
contains all the resources that are used

221
00:08:53,550 --> 00:08:58,800
by this PE file that are icons all the

222
00:08:56,850 --> 00:09:00,720
various windows that we have inside PE

223
00:08:58,800 --> 00:09:03,520
files all that scans it contained inside

224
00:09:00,720 --> 00:09:04,959
the resource data directory the

225
00:09:03,520 --> 00:09:06,939
they're a bunch of different data

226
00:09:04,959 --> 00:09:08,529
Droopys the security one contains the

227
00:09:06,940 --> 00:09:10,390
certificate security certificate that

228
00:09:08,529 --> 00:09:13,060
was used to sign this particular PE file

229
00:09:10,390 --> 00:09:14,709
now this can be used to identify whether

230
00:09:13,060 --> 00:09:16,839
a particular PE file was signed by a

231
00:09:14,709 --> 00:09:18,760
particular company or not so this is

232
00:09:16,839 --> 00:09:22,149
this is basically used by the Windows

233
00:09:18,760 --> 00:09:24,160
loader when it tries to run any PE files

234
00:09:22,149 --> 00:09:27,040
this is this this is what causes the

235
00:09:24,160 --> 00:09:28,449
pop-up that you see this particular

236
00:09:27,040 --> 00:09:30,520
software has not been signed by

237
00:09:28,450 --> 00:09:32,980
Microsoft so this is what causes that

238
00:09:30,520 --> 00:09:34,689
particular pop-up toaster come up the

239
00:09:32,980 --> 00:09:38,020
copyright one contains all the copyright

240
00:09:34,690 --> 00:09:39,880
information import a dress table

241
00:09:38,020 --> 00:09:43,510
contains all the information about

242
00:09:39,880 --> 00:09:46,959
various the various import addresses now

243
00:09:43,510 --> 00:09:49,390
code injection code by P backdooring

244
00:09:46,959 --> 00:09:51,339
basically means injecting malicious code

245
00:09:49,390 --> 00:09:52,510
inside benign PE files to make it

246
00:09:51,339 --> 00:09:54,070
perform malicious tasks

247
00:09:52,510 --> 00:09:55,660
there are various code injection

248
00:09:54,070 --> 00:09:58,630
techniques that are currently available

249
00:09:55,660 --> 00:10:01,149
and currently being used the first one

250
00:09:58,630 --> 00:10:03,339
and the easiest one is custom custom

251
00:10:01,149 --> 00:10:05,320
section edition custom section edition

252
00:10:03,339 --> 00:10:07,779
basically means you add a custom section

253
00:10:05,320 --> 00:10:10,180
at the end of the PE file once all the

254
00:10:07,779 --> 00:10:12,310
original sections are completed and then

255
00:10:10,180 --> 00:10:14,140
change the address of the entry point

256
00:10:12,310 --> 00:10:15,910
inside the optional header to point to

257
00:10:14,140 --> 00:10:18,310
that particular section so instead of

258
00:10:15,910 --> 00:10:20,140
the execution occurring inside the

259
00:10:18,310 --> 00:10:22,540
normal text section the execution would

260
00:10:20,140 --> 00:10:26,560
take place inside your custom section

261
00:10:22,540 --> 00:10:28,329
now this while while it's really easy to

262
00:10:26,560 --> 00:10:30,790
implement this technique it's really

263
00:10:28,329 --> 00:10:32,649
easy to detect it as well because there

264
00:10:30,790 --> 00:10:34,630
are like custom sections are really easy

265
00:10:32,649 --> 00:10:37,120
to find people like endpoint detection

266
00:10:34,630 --> 00:10:39,640
systems would could just search for the

267
00:10:37,120 --> 00:10:41,920
section names and find out okay which

268
00:10:39,640 --> 00:10:44,199
sections have inappropriate names or

269
00:10:41,920 --> 00:10:46,000
which sections or whether they have

270
00:10:44,200 --> 00:10:48,790
inappropriate permissions because a

271
00:10:46,000 --> 00:10:51,220
section cannot just execute code because

272
00:10:48,790 --> 00:10:53,589
code exists inside that section and the

273
00:10:51,220 --> 00:10:55,480
fab and the address of the entry point

274
00:10:53,589 --> 00:10:57,100
has been changed to that section we need

275
00:10:55,480 --> 00:10:59,950
to also make sure that the section has

276
00:10:57,100 --> 00:11:02,800
execute permissions as well right so

277
00:10:59,950 --> 00:11:04,630
it's the ratio of the strength stealth

278
00:11:02,800 --> 00:11:06,550
gained by this particular technique and

279
00:11:04,630 --> 00:11:08,200
the time required for a correct

280
00:11:06,550 --> 00:11:11,050
implementation of this technique is way

281
00:11:08,200 --> 00:11:14,199
too way too low right so it's basically

282
00:11:11,050 --> 00:11:17,030
very difficult to implement P code

283
00:11:14,199 --> 00:11:19,430
caving so P code caving is a technique

284
00:11:17,030 --> 00:11:21,380
we try to find out the code caves that

285
00:11:19,430 --> 00:11:23,359
exists inside a P file now what our code

286
00:11:21,380 --> 00:11:25,880
caves code caves are basically set of

287
00:11:23,360 --> 00:11:30,410
nulls and unused values that are present

288
00:11:25,880 --> 00:11:32,630
inside the PE file PE file while even

289
00:11:30,410 --> 00:11:34,699
small PE files have large amount of data

290
00:11:32,630 --> 00:11:36,290
that is contained in it and not all of

291
00:11:34,700 --> 00:11:38,780
that particular space is being used

292
00:11:36,290 --> 00:11:41,000
right so they have they might have sets

293
00:11:38,780 --> 00:11:42,800
of nulls that are not being used by any

294
00:11:41,000 --> 00:11:43,850
else by the windows loaded to do

295
00:11:42,800 --> 00:11:46,699
anything specifically

296
00:11:43,850 --> 00:11:49,460
so those nulls could be used to store

297
00:11:46,700 --> 00:11:51,230
our malicious code but we cannot just

298
00:11:49,460 --> 00:11:53,270
find these code caves and inject code

299
00:11:51,230 --> 00:11:55,430
into it we need to make sure that the

300
00:11:53,270 --> 00:11:57,740
code caves exist inside a section that

301
00:11:55,430 --> 00:11:59,930
has execute permissions so that is a

302
00:11:57,740 --> 00:12:02,300
task that is really difficult because it

303
00:11:59,930 --> 00:12:04,640
varies from binary to binary right

304
00:12:02,300 --> 00:12:06,740
because a binary binary one may have

305
00:12:04,640 --> 00:12:08,870
code say like code caves and present

306
00:12:06,740 --> 00:12:11,120
inside the text section that can fit our

307
00:12:08,870 --> 00:12:14,960
malicious code violate two may not so

308
00:12:11,120 --> 00:12:18,070
this technique is not really like it

309
00:12:14,960 --> 00:12:20,330
does not work every time right

310
00:12:18,070 --> 00:12:22,460
also the dis like I said the

311
00:12:20,330 --> 00:12:24,290
disadvantages are finding code caves

312
00:12:22,460 --> 00:12:26,960
inside the P files is really difficult

313
00:12:24,290 --> 00:12:28,969
and finding a code cave that has execute

314
00:12:26,960 --> 00:12:33,170
permissions is even more difficult that

315
00:12:28,970 --> 00:12:35,180
can fit your malicious code so I had a

316
00:12:33,170 --> 00:12:37,430
question why not just edit the text

317
00:12:35,180 --> 00:12:39,290
section instead like just edit the text

318
00:12:37,430 --> 00:12:43,520
section make it larger fit your code

319
00:12:39,290 --> 00:12:45,770
inside it and make it run right so what

320
00:12:43,520 --> 00:12:47,630
perfidious is trying to do is perfidious

321
00:12:45,770 --> 00:12:49,970
tries to fingerprint the entire PE file

322
00:12:47,630 --> 00:12:51,830
break it down into individual blocks

323
00:12:49,970 --> 00:12:54,860
that can be increased or decreased in

324
00:12:51,830 --> 00:12:56,870
size use the function to directly input

325
00:12:54,860 --> 00:12:59,660
malicious code inside that text section

326
00:12:56,870 --> 00:13:01,460
of a PE file it extracts the track a

327
00:12:59,660 --> 00:13:03,140
text section combines the code that is

328
00:13:01,460 --> 00:13:06,650
present inside the text section with the

329
00:13:03,140 --> 00:13:09,680
malicious code using jumps and then uses

330
00:13:06,650 --> 00:13:12,560
the noob like then assembles the PE file

331
00:13:09,680 --> 00:13:15,620
from ground up right this is a technique

332
00:13:12,560 --> 00:13:17,119
that is now advantages of the of this

333
00:13:15,620 --> 00:13:18,680
approaches it's really difficult to

334
00:13:17,120 --> 00:13:20,600
detect if done right because there is no

335
00:13:18,680 --> 00:13:23,599
clear indication of a code injection

336
00:13:20,600 --> 00:13:26,060
occurring right you are not adding a new

337
00:13:23,600 --> 00:13:30,740
section you are not adding code caves

338
00:13:26,060 --> 00:13:32,300
you are not you'll basically be Rica

339
00:13:30,740 --> 00:13:34,640
creating all the checksums so there be

340
00:13:32,300 --> 00:13:37,310
physical actually no way to detect

341
00:13:34,640 --> 00:13:39,680
whether P injection has occurred or not

342
00:13:37,310 --> 00:13:41,930
right the problem with this approach is

343
00:13:39,680 --> 00:13:44,029
it's really difficult to implement

344
00:13:41,930 --> 00:13:45,890
if you cannot really control all the

345
00:13:44,029 --> 00:13:48,140
fields inside every single structure

346
00:13:45,890 --> 00:13:49,790
inside a PE file this cannot really be

347
00:13:48,140 --> 00:13:53,300
done because you need to make sure that

348
00:13:49,790 --> 00:13:55,550
once DP once the malicious code is

349
00:13:53,300 --> 00:13:57,410
injected within the text section you

350
00:13:55,550 --> 00:13:59,990
need to recalculate all the different

351
00:13:57,410 --> 00:14:02,630
calls that are being made to addresses

352
00:13:59,990 --> 00:14:04,760
inside the benign text section because

353
00:14:02,630 --> 00:14:06,290
the dot data section and each and every

354
00:14:04,760 --> 00:14:10,130
section beneath the text exit section

355
00:14:06,290 --> 00:14:12,740
will move move downwards because you

356
00:14:10,130 --> 00:14:15,080
have basically you have added a it's

357
00:14:12,740 --> 00:14:16,370
like it's like you are replacing a

358
00:14:15,080 --> 00:14:18,920
smaller block with a bigger block right

359
00:14:16,370 --> 00:14:20,990
so the calculations will vary you need

360
00:14:18,920 --> 00:14:23,360
to make those calculations again apart

361
00:14:20,990 --> 00:14:25,010
from changing all the data fields inside

362
00:14:23,360 --> 00:14:26,870
the optional section in the file header

363
00:14:25,010 --> 00:14:29,180
section and increasing the size of the

364
00:14:26,870 --> 00:14:31,310
PE file as well right so this is really

365
00:14:29,180 --> 00:14:34,040
difficult to do unless you have complete

366
00:14:31,310 --> 00:14:35,180
control over your PE file that is what

367
00:14:34,040 --> 00:14:37,189
perfidious aims to do

368
00:14:35,180 --> 00:14:39,290
perfidious aims to make sure that you

369
00:14:37,190 --> 00:14:41,180
have complete control over your PE file

370
00:14:39,290 --> 00:14:42,649
you can edit each and every section and

371
00:14:41,180 --> 00:14:47,540
structure that is present inside the PE

372
00:14:42,649 --> 00:14:49,279
file right so how would you detect such

373
00:14:47,540 --> 00:14:51,649
an injection that occurred inside your

374
00:14:49,279 --> 00:14:53,570
PE file right if this P if if an

375
00:14:51,649 --> 00:14:55,040
injected PE file using perfidious was

376
00:14:53,570 --> 00:14:58,430
presented to you how would you try to

377
00:14:55,040 --> 00:15:00,680
detect it if your system has only

378
00:14:58,430 --> 00:15:02,719
allowed for white little white listed

379
00:15:00,680 --> 00:15:04,819
software as in you have software that

380
00:15:02,720 --> 00:15:06,350
you know I can run on your system and

381
00:15:04,820 --> 00:15:08,570
you verify the checksum values of that

382
00:15:06,350 --> 00:15:10,310
particular whitelisted software you can

383
00:15:08,570 --> 00:15:11,959
detect injection because the checksums

384
00:15:10,310 --> 00:15:14,779
will vary because the checksums will

385
00:15:11,959 --> 00:15:17,060
have recalculated to accommodate the

386
00:15:14,779 --> 00:15:19,100
changes in the PE file you can perform

387
00:15:17,060 --> 00:15:20,630
graph hash analysis if any of you

388
00:15:19,100 --> 00:15:22,880
attended the talk that was given

389
00:15:20,630 --> 00:15:25,250
yesterday on graph analysis you know

390
00:15:22,880 --> 00:15:28,010
that graph analysis basically tries to

391
00:15:25,250 --> 00:15:30,350
create a hash value of the graph call

392
00:15:28,010 --> 00:15:32,180
graph of the entire structure so what

393
00:15:30,350 --> 00:15:34,190
this does is this basically takes the

394
00:15:32,180 --> 00:15:36,140
dot text section into account when it's

395
00:15:34,190 --> 00:15:38,690
creating the hash it's not blindly

396
00:15:36,140 --> 00:15:40,010
creating the hash based on the values

397
00:15:38,690 --> 00:15:42,949
that are present inside the PE file

398
00:15:40,010 --> 00:15:44,390
right so this would easily catch the

399
00:15:42,949 --> 00:15:46,099
changes that are made in the

400
00:15:44,390 --> 00:15:47,689
dissection because the call graph would

401
00:15:46,100 --> 00:15:52,370
vary because of the jumps that are

402
00:15:47,690 --> 00:15:55,070
inserted inside the PE file right so

403
00:15:52,370 --> 00:15:58,160
I'll give you the demo of the library

404
00:15:55,070 --> 00:16:00,170
itself I tried to run the demo one of

405
00:15:58,160 --> 00:16:02,510
the code injection occurring but I it

406
00:16:00,170 --> 00:16:05,469
did not work so I'll give you the demo

407
00:16:02,510 --> 00:16:05,470
of the library itself

408
00:16:28,300 --> 00:16:38,420
so what I first show you what this thing

409
00:16:33,019 --> 00:16:41,300
is doing this is basically an overview

410
00:16:38,420 --> 00:16:44,630
of how perfidious will work so you can

411
00:16:41,300 --> 00:16:47,300
just import a p object that is pointing

412
00:16:44,630 --> 00:16:49,160
towards the dot exe file or dot dll file

413
00:16:47,300 --> 00:16:51,199
that you have on your file directory

414
00:16:49,160 --> 00:16:53,779
structure and then you can basically say

415
00:16:51,200 --> 00:16:56,540
p okay i want to print the optional

416
00:16:53,779 --> 00:16:58,310
header of inside the PE file right so i

417
00:16:56,540 --> 00:17:00,890
want to extract the optional header it

418
00:16:58,310 --> 00:17:03,529
basically went like the first time

419
00:17:00,890 --> 00:17:05,869
perfidious runs like the first call to

420
00:17:03,529 --> 00:17:07,819
the class PE what it does is it it

421
00:17:05,869 --> 00:17:09,649
automatically passes the entire PE file

422
00:17:07,819 --> 00:17:11,270
and makes all the necessary class

423
00:17:09,650 --> 00:17:12,709
structures that are needed in order to

424
00:17:11,270 --> 00:17:14,780
perform any operations that you want

425
00:17:12,709 --> 00:17:16,610
after that you can just call the

426
00:17:14,780 --> 00:17:19,459
particular object that is present inside

427
00:17:16,609 --> 00:17:21,229
the PE file to print that so when I say

428
00:17:19,459 --> 00:17:22,790
P object dot optional header what it

429
00:17:21,230 --> 00:17:24,770
will do is it will print the optional

430
00:17:22,790 --> 00:17:27,230
header that is present inside that

431
00:17:24,770 --> 00:17:29,179
particular PE file so this is basically

432
00:17:27,230 --> 00:17:31,010
the structure that it creates so as you

433
00:17:29,179 --> 00:17:32,450
can see it gives you all the DLL

434
00:17:31,010 --> 00:17:34,850
characteristics that are present inside

435
00:17:32,450 --> 00:17:37,220
the P file it basically it's not just

436
00:17:34,850 --> 00:17:38,719
giving you the hexadecimal values and

437
00:17:37,220 --> 00:17:39,890
the byte values that are present inside

438
00:17:38,720 --> 00:17:41,510
it it actually gives you the

439
00:17:39,890 --> 00:17:45,950
corresponding meaning to that particular

440
00:17:41,510 --> 00:17:47,870
structure it gives you all all these

441
00:17:45,950 --> 00:17:49,550
subsystem types and each and every field

442
00:17:47,870 --> 00:17:51,229
that is present inside optional had a

443
00:17:49,550 --> 00:17:53,270
header along with all the various

444
00:17:51,230 --> 00:17:56,210
checksums that you might need for doing

445
00:17:53,270 --> 00:18:00,740
malware fingerprinting so this is just

446
00:17:56,210 --> 00:18:03,140
one example of what perfidious can do my

447
00:18:00,740 --> 00:18:04,880
aim with this project is it should be

448
00:18:03,140 --> 00:18:06,710
able to edit each and every structure

449
00:18:04,880 --> 00:18:09,800
that is present inside the P file and it

450
00:18:06,710 --> 00:18:11,840
should be able to it can be used to

451
00:18:09,800 --> 00:18:14,600
develop malware signatures that are not

452
00:18:11,840 --> 00:18:17,510
simply based on bite values right they

453
00:18:14,600 --> 00:18:19,340
are based on the actual values that are

454
00:18:17,510 --> 00:18:21,740
present inside the PE file this are

455
00:18:19,340 --> 00:18:23,480
basically rich header the optional

456
00:18:21,740 --> 00:18:24,950
header the hashes that are used inside

457
00:18:23,480 --> 00:18:27,890
that we file this gives you complete

458
00:18:24,950 --> 00:18:30,530
control over your PE file so this can be

459
00:18:27,890 --> 00:18:32,720
employed in side your endpoint detection

460
00:18:30,530 --> 00:18:34,970
systems to develop better malware

461
00:18:32,720 --> 00:18:37,300
detection rules that is what I am aiming

462
00:18:34,970 --> 00:18:37,300
to do

463
00:18:38,660 --> 00:18:45,549
so that that is basically your future of

464
00:18:40,880 --> 00:18:51,440
the project thank you for your time and

465
00:18:45,549 --> 00:18:53,750
if you have any questions warm round of

466
00:18:51,440 --> 00:18:58,100
applause please for sure I'm sorry sorry

467
00:18:53,750 --> 00:19:01,100
for speaking too loudly okay so we're

468
00:18:58,100 --> 00:19:03,549
going to have question time now and as

469
00:19:01,100 --> 00:19:06,469
we did yesterday we're going to have

470
00:19:03,549 --> 00:19:09,470
prizes for the best questions okay oh

471
00:19:06,470 --> 00:19:11,900
and you have swag awesome all right so

472
00:19:09,470 --> 00:19:13,429
first I'm going to throw the throw it

473
00:19:11,900 --> 00:19:15,679
open to the floor and then I'll go to

474
00:19:13,429 --> 00:19:17,059
slider questions anyone from in the

475
00:19:15,679 --> 00:19:29,240
audience would like to ask a question

476
00:19:17,059 --> 00:19:31,820
please no all shy yes sir why do you

477
00:19:29,240 --> 00:19:37,400
think that does Heather in the P Heather

478
00:19:31,820 --> 00:19:40,340
is not removed by the Microsoft it's not

479
00:19:37,400 --> 00:19:42,470
removed by Microsoft yeah it's not yet

480
00:19:40,340 --> 00:19:45,139
it's not yet remove backward

481
00:19:42,470 --> 00:19:46,940
compatibility that that's that's the

482
00:19:45,140 --> 00:19:51,770
only answer they have for everything

483
00:19:46,940 --> 00:19:55,130
that they do like but it's not just that

484
00:19:51,770 --> 00:19:55,700
this is not being used anymore yeah

485
00:19:55,130 --> 00:19:58,929
exactly

486
00:19:55,700 --> 00:20:01,490
yeah it's for backward compatibility

487
00:19:58,929 --> 00:20:03,860
they are trying to ensure that the PE

488
00:20:01,490 --> 00:20:05,960
files basically run on each and every

489
00:20:03,860 --> 00:20:07,158
possible system that exists from that is

490
00:20:05,960 --> 00:20:09,919
one of the reasons why they did not

491
00:20:07,159 --> 00:20:12,289
change the CMD the horridest CMD to

492
00:20:09,919 --> 00:20:14,090
something better they had to develop

493
00:20:12,289 --> 00:20:15,408
Windows terminal from ground up for that

494
00:20:14,090 --> 00:20:17,720
particular reason because they couldn't

495
00:20:15,409 --> 00:20:22,789
keep up with the backward compatibility

496
00:20:17,720 --> 00:20:26,600
and couldn't make CMD better anymore yes

497
00:20:22,789 --> 00:20:28,070
this gentleman here huh okay like

498
00:20:26,600 --> 00:20:31,879
Windows Vista onwards you have

499
00:20:28,070 --> 00:20:33,980
applications emit audio that could be

500
00:20:31,880 --> 00:20:36,950
run in compatibility modes right I mean

501
00:20:33,980 --> 00:20:39,409
it could as as back as Windows XP like

502
00:20:36,950 --> 00:20:42,110
in window even in Windows 10 when you

503
00:20:39,409 --> 00:20:43,700
enable an executable to run like that

504
00:20:42,110 --> 00:20:46,250
does that in any way modify the headers

505
00:20:43,700 --> 00:20:48,500
and if yes you know what section is

506
00:20:46,250 --> 00:20:51,560
modified I'm just trying to see that if

507
00:20:48,500 --> 00:20:55,220
that could be exploited in any way so my

508
00:20:51,560 --> 00:20:57,379
understanding of that is basically the

509
00:20:55,220 --> 00:21:02,180
headers will change depending on the

510
00:20:57,380 --> 00:21:03,170
layer like the exe you so I'm trying to

511
00:21:02,180 --> 00:21:05,450
understand your question

512
00:21:03,170 --> 00:21:07,760
what modifies the header like what part

513
00:21:05,450 --> 00:21:11,540
are you trying to ask modifies the

514
00:21:07,760 --> 00:21:13,760
higher like if you so if an app that's

515
00:21:11,540 --> 00:21:16,850
been made to natively run on let's say

516
00:21:13,760 --> 00:21:19,730
Windows 10 or Windows 7 right and you

517
00:21:16,850 --> 00:21:23,330
try to make a backward compatible okay

518
00:21:19,730 --> 00:21:25,760
to run on say Windows 2000 okay sorry

519
00:21:23,330 --> 00:21:28,879
let's go to 2000 Windows XP or or let's

520
00:21:25,760 --> 00:21:31,490
say Windows 8 so as soon as you apply

521
00:21:28,880 --> 00:21:33,680
that app compatibility shim okay as we

522
00:21:31,490 --> 00:21:35,840
call it right so it makes registry

523
00:21:33,680 --> 00:21:37,520
entries so I'm not aware what part of

524
00:21:35,840 --> 00:21:40,310
header I mean what does it modify and

525
00:21:37,520 --> 00:21:43,280
and does that actually I mean in any way

526
00:21:40,310 --> 00:21:45,020
I mean yeah I've decided to understand

527
00:21:43,280 --> 00:21:47,360
that that is that a technique that could

528
00:21:45,020 --> 00:21:47,810
also be exploited that's a great

529
00:21:47,360 --> 00:21:49,669
question

530
00:21:47,810 --> 00:21:51,669
my understanding of this is basically

531
00:21:49,670 --> 00:21:54,290
Windows loader

532
00:21:51,670 --> 00:21:56,900
basically ignores the fields that are

533
00:21:54,290 --> 00:21:58,820
newer into the PE file structure and

534
00:21:56,900 --> 00:22:01,460
basically only uses the fields that it

535
00:21:58,820 --> 00:22:03,560
needs where depending on the Microsoft

536
00:22:01,460 --> 00:22:05,480
version that basically the Windows

537
00:22:03,560 --> 00:22:07,250
version that it's running on it will

538
00:22:05,480 --> 00:22:09,740
basically use the fields that are

539
00:22:07,250 --> 00:22:11,660
relevant to that particular version it

540
00:22:09,740 --> 00:22:13,760
will just ignore the fields the other

541
00:22:11,660 --> 00:22:16,130
fields that are present so if you look

542
00:22:13,760 --> 00:22:17,930
inside the PE structure like in depth

543
00:22:16,130 --> 00:22:18,950
you will see resolved fields that are

544
00:22:17,930 --> 00:22:20,990
present inside the structure

545
00:22:18,950 --> 00:22:23,360
now these reserved fields are not being

546
00:22:20,990 --> 00:22:25,130
used right now but they are made they

547
00:22:23,360 --> 00:22:26,449
are being present they are present

548
00:22:25,130 --> 00:22:28,820
inside the P structure to ensure that

549
00:22:26,450 --> 00:22:31,040
the future versions where these fields

550
00:22:28,820 --> 00:22:32,870
may be used and that will not break

551
00:22:31,040 --> 00:22:35,270
compatibility with the current versions

552
00:22:32,870 --> 00:22:36,070
so that is my understanding of how this

553
00:22:35,270 --> 00:22:38,780
works

554
00:22:36,070 --> 00:22:41,330
all right thanks there was one more

555
00:22:38,780 --> 00:22:44,080
question on this side right behind you

556
00:22:41,330 --> 00:22:46,699
with the gentleman with the green shirt

557
00:22:44,080 --> 00:22:48,470
hi good morning um you were saying a

558
00:22:46,700 --> 00:22:50,930
while ago that we will also be

559
00:22:48,470 --> 00:22:54,200
rebuilding on calculating the addresses

560
00:22:50,930 --> 00:22:57,200
of the the calls for example if you're

561
00:22:54,200 --> 00:23:00,380
going to inject some code in the the p5

562
00:22:57,200 --> 00:23:01,820
but what if it has a relocation section

563
00:23:00,380 --> 00:23:04,280
the

564
00:23:01,820 --> 00:23:06,260
would you be able to also recalculate

565
00:23:04,280 --> 00:23:09,620
and rebuild the real log section yeah so

566
00:23:06,260 --> 00:23:12,290
that is where the question is will this

567
00:23:09,620 --> 00:23:15,560
be compatible for both 64-bit and 32-bit

568
00:23:12,290 --> 00:23:17,629
Windows so about 32 and 64-bit it can

569
00:23:15,560 --> 00:23:20,510
currently pass both parts both types of

570
00:23:17,630 --> 00:23:23,000
files so it's compatible with both those

571
00:23:20,510 --> 00:23:26,060
types of files 64 and 32-bit exe s and

572
00:23:23,000 --> 00:23:29,360
dll's about the relocations

573
00:23:26,060 --> 00:23:32,810
so the realidad data is stored inside

574
00:23:29,360 --> 00:23:34,909
the data directories that is like I'm

575
00:23:32,810 --> 00:23:36,530
working on how to parse those things but

576
00:23:34,910 --> 00:23:38,090
I am pretty sure that once I am able to

577
00:23:36,530 --> 00:23:39,950
pass data tech trees that are present

578
00:23:38,090 --> 00:23:41,810
I'll be able to calculate all those

579
00:23:39,950 --> 00:23:43,940
relocations as well so basically what I

580
00:23:41,810 --> 00:23:46,159
am trying to do is I am trying to get as

581
00:23:43,940 --> 00:23:48,580
close to Windows loader emulation as

582
00:23:46,160 --> 00:23:50,920
possible that is what I'm trying to do

583
00:23:48,580 --> 00:23:53,270
so it will have all the functionality

584
00:23:50,920 --> 00:23:54,860
like all the parsing and the

585
00:23:53,270 --> 00:23:56,720
implementation functionality that is

586
00:23:54,860 --> 00:23:57,889
present inside of Windows loader it will

587
00:23:56,720 --> 00:24:00,470
be able to do all those calculations

588
00:23:57,890 --> 00:24:05,390
that are in those loader does but it can

589
00:24:00,470 --> 00:24:08,020
do it as a Python library I hope that

590
00:24:05,390 --> 00:24:08,020
answers your question

591
00:24:08,530 --> 00:24:14,629
any more from the audience

592
00:24:11,500 --> 00:24:16,820
if not then science will go to the

593
00:24:14,630 --> 00:24:19,190
question on slide or will you take the

594
00:24:16,820 --> 00:24:22,399
the most up voted ones so far from

595
00:24:19,190 --> 00:24:24,140
Anthony how will this to behave when

596
00:24:22,400 --> 00:24:26,240
most end point systems have behavioral

597
00:24:24,140 --> 00:24:28,580
based detection systems in place such as

598
00:24:26,240 --> 00:24:29,870
Windows Defender yes so it fails there

599
00:24:28,580 --> 00:24:31,760
because what it is trying to do is

600
00:24:29,870 --> 00:24:33,560
inside those behavioral based detection

601
00:24:31,760 --> 00:24:36,410
systems they are trying to do dynamic

602
00:24:33,560 --> 00:24:38,929
analysis it will be caught based on what

603
00:24:36,410 --> 00:24:40,790
your shell code does right so if your

604
00:24:38,930 --> 00:24:43,550
shell code does something outwardly

605
00:24:40,790 --> 00:24:45,710
malicious like uses PowerShell or opens

606
00:24:43,550 --> 00:24:47,180
connections outbound opens outbound

607
00:24:45,710 --> 00:24:52,760
connections or something like that it

608
00:24:47,180 --> 00:24:55,520
will be detected very easily right so

609
00:24:52,760 --> 00:24:57,350
maybe we can answer one more question

610
00:24:55,520 --> 00:24:59,420
and then you can vote you can choose

611
00:24:57,350 --> 00:25:01,070
your favorite question and will also

612
00:24:59,420 --> 00:25:08,540
give a prize to Anthony for the most

613
00:25:01,070 --> 00:25:11,270
uploaded question so you can answer all

614
00:25:08,540 --> 00:25:12,860
three I think we have okay we have a

615
00:25:11,270 --> 00:25:14,660
couple minutes left here in the current

616
00:25:12,860 --> 00:25:15,120
threat landscape more common modes of

617
00:25:14,660 --> 00:25:16,800
attack

618
00:25:15,120 --> 00:25:18,600
powershell are being more commonplace is

619
00:25:16,800 --> 00:25:20,460
there a good reason to fall back on p

620
00:25:18,600 --> 00:25:22,980
executable based injection payloads

621
00:25:20,460 --> 00:25:23,820
again so if you see the current

622
00:25:22,980 --> 00:25:26,490
scenarios

623
00:25:23,820 --> 00:25:28,379
basically most end point detection

624
00:25:26,490 --> 00:25:30,600
systems can easily catch powershell

625
00:25:28,380 --> 00:25:32,790
based payloads right because they have

626
00:25:30,600 --> 00:25:34,709
they have system in place to easily

627
00:25:32,790 --> 00:25:37,050
detect whether a particular powershell

628
00:25:34,710 --> 00:25:39,960
command is being around so powershell

629
00:25:37,050 --> 00:25:41,490
based malware can run on systems that

630
00:25:39,960 --> 00:25:43,740
don't have those endpoint detection

631
00:25:41,490 --> 00:25:46,680
systems and have not disabled powershell

632
00:25:43,740 --> 00:25:49,400
but otherwise they like it's it's not

633
00:25:46,680 --> 00:25:53,660
the future according to me

634
00:25:49,400 --> 00:25:53,660
okay so anthony are you here

635
00:25:54,650 --> 00:26:01,530
no oh you asked for questions yesterday

636
00:25:57,720 --> 00:26:04,770
you almost missed them uploading prize

637
00:26:01,530 --> 00:26:05,700
yesterday three times Oh too bad okay so

638
00:26:04,770 --> 00:26:09,270
she ends which one's your favorite

639
00:26:05,700 --> 00:26:12,740
question the one that Jill didn't ask

640
00:26:09,270 --> 00:26:15,570
about the windows okay you get a prize

641
00:26:12,740 --> 00:26:20,550
yeah like I can give it to everyone who

642
00:26:15,570 --> 00:26:23,129
asked questions so okay go ahead alright

643
00:26:20,550 --> 00:26:25,950
so I'll let you I'll let you give them

644
00:26:23,130 --> 00:26:27,870
the prizes later and then we'll have the

645
00:26:25,950 --> 00:26:30,720
next speaker come up on stage to get

646
00:26:27,870 --> 00:26:31,879
ready thank you another round of

647
00:26:30,720 --> 00:26:35,859
applause please for shreya

648
00:26:31,880 --> 00:26:35,859
[Applause]

