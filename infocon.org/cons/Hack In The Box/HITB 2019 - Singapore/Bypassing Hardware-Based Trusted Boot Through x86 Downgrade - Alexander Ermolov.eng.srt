1
00:00:16,400 --> 00:00:23,060
thank you

2
00:00:18,740 --> 00:00:26,659
for for coming today we're going to talk

3
00:00:23,060 --> 00:00:30,168
about micro code language and few words

4
00:00:26,660 --> 00:00:34,269
about me mostly I do feel the security

5
00:00:30,169 --> 00:00:38,540
research and my favorite subject is

6
00:00:34,269 --> 00:00:44,230
Intel Emmy UEFA bias and technologists

7
00:00:38,540 --> 00:00:49,070
are do based like Intel boot guard today

8
00:00:44,230 --> 00:00:51,589
we will be going with a bit down into

9
00:00:49,070 --> 00:00:55,100
the hardware and talking about the

10
00:00:51,589 --> 00:00:57,049
microcode basics about the microcode

11
00:00:55,100 --> 00:01:04,040
downgrade technique I have discovered

12
00:00:57,049 --> 00:01:06,710
and then we'll talk about the impact so

13
00:01:04,040 --> 00:01:10,490
let's start with the microcode basics if

14
00:01:06,710 --> 00:01:14,270
you look at inside the Intel CPU we will

15
00:01:10,490 --> 00:01:17,929
see that it has a few course like each

16
00:01:14,270 --> 00:01:21,080
more than CPU the main core is called

17
00:01:17,930 --> 00:01:25,579
bootstrap processor it is the core which

18
00:01:21,080 --> 00:01:28,280
starts executing the code when CPU is

19
00:01:25,579 --> 00:01:31,639
part on and released from the reset

20
00:01:28,280 --> 00:01:35,210
state the application processors are

21
00:01:31,640 --> 00:01:38,799
they are the course which are to be

22
00:01:35,210 --> 00:01:41,899
woken up by the bootstrap or sir when

23
00:01:38,799 --> 00:01:44,869
when some conditions are satisfied

24
00:01:41,899 --> 00:01:49,640
already also CPU can have graphics core

25
00:01:44,869 --> 00:01:54,340
memory controller shared cache level 3

26
00:01:49,640 --> 00:02:00,380
and some input output logic each core

27
00:01:54,340 --> 00:02:04,249
has its own control units and arithmetic

28
00:02:00,380 --> 00:02:06,619
units to perform to decode instructions

29
00:02:04,249 --> 00:02:12,200
and perform arithmetic operations also

30
00:02:06,619 --> 00:02:17,540
each core has register file and caches

31
00:02:12,200 --> 00:02:24,339
little 1 and level 2 so what is the

32
00:02:17,540 --> 00:02:25,599
microcode actually it is a program

33
00:02:24,340 --> 00:02:29,510
[Music]

34
00:02:25,599 --> 00:02:34,670
inside the read-only memory which is

35
00:02:29,510 --> 00:02:38,629
stored inside the CPU each core has its

36
00:02:34,670 --> 00:02:42,980
own read-only memory it it is not

37
00:02:38,629 --> 00:02:45,500
updatable but to implement to executed

38
00:02:42,980 --> 00:02:51,470
microcode it is being loaded into the

39
00:02:45,500 --> 00:02:58,069
some kind of SRAM which called a control

40
00:02:51,470 --> 00:02:59,810
store usually as you can see the

41
00:02:58,069 --> 00:03:03,890
microcode usually implements

42
00:02:59,810 --> 00:03:06,410
instructions like this one in the more

43
00:03:03,890 --> 00:03:11,470
basic language for in the more basic

44
00:03:06,410 --> 00:03:15,379
instructions for the a cpu so as we

45
00:03:11,470 --> 00:03:18,069
already found out CPU and the microcode

46
00:03:15,379 --> 00:03:20,179
can contain vulnerable and contain

47
00:03:18,069 --> 00:03:24,140
vulnerabilities so it should be

48
00:03:20,180 --> 00:03:28,430
updatable like I already said it is

49
00:03:24,140 --> 00:03:30,798
stored in the read-only memory which is

50
00:03:28,430 --> 00:03:35,780
not updatable it not modifiable at all

51
00:03:30,799 --> 00:03:38,480
but to update this to the microcode it

52
00:03:35,780 --> 00:03:44,500
has to be loaded in the control store

53
00:03:38,480 --> 00:03:47,750
each time after power up to do that

54
00:03:44,500 --> 00:03:51,849
there is a filter interface table which

55
00:03:47,750 --> 00:03:56,030
I've mentioned in this light here the

56
00:03:51,849 --> 00:03:58,160
highlighted entries in this table points

57
00:03:56,030 --> 00:04:03,319
to the micro code updates for different

58
00:03:58,160 --> 00:04:09,109
CPUs you can see that the CPU ID is

59
00:04:03,319 --> 00:04:11,179
different for each entry a few words

60
00:04:09,109 --> 00:04:14,959
about this funeral interface table it is

61
00:04:11,180 --> 00:04:19,340
a part of film very image it's stored in

62
00:04:14,959 --> 00:04:25,960
the bias region and it's pointer is

63
00:04:19,339 --> 00:04:28,820
located at this address in the memory

64
00:04:25,960 --> 00:04:33,530
when the espera finish is mapped into

65
00:04:28,820 --> 00:04:37,099
the memory of the CPU so that's how this

66
00:04:33,530 --> 00:04:38,409
helps if you can find this table and to

67
00:04:37,099 --> 00:04:42,370
loot

68
00:04:38,410 --> 00:04:47,000
microcode updates automatically

69
00:04:42,370 --> 00:04:50,480
so since implement since introducing the

70
00:04:47,000 --> 00:04:53,800
info bulgar technology the funeral

71
00:04:50,480 --> 00:04:57,770
interface table is the required element

72
00:04:53,800 --> 00:05:00,920
it as we as you can see it in points you

73
00:04:57,770 --> 00:05:03,200
microcode update binaries and CPU can

74
00:05:00,920 --> 00:05:06,560
automatically lose loot microcode

75
00:05:03,200 --> 00:05:11,020
updates from finland base table and this

76
00:05:06,560 --> 00:05:11,020
is done before the execution of the bias

77
00:05:11,110 --> 00:05:19,490
if you look at the microcode update

78
00:05:14,420 --> 00:05:22,490
binary file we can see two-hitter

79
00:05:19,490 --> 00:05:29,240
two hitters first one is the main heater

80
00:05:22,490 --> 00:05:32,840
the it has some some usual fuels like

81
00:05:29,240 --> 00:05:35,720
sizes versions and the most most

82
00:05:32,840 --> 00:05:40,690
important for us here you feel this is

83
00:05:35,720 --> 00:05:48,230
the processor signature field which says

84
00:05:40,690 --> 00:05:50,030
the cpu 84 of all the processor for for

85
00:05:48,230 --> 00:05:52,940
what this micro code update is intended

86
00:05:50,030 --> 00:05:56,630
to be able to be implemented to be

87
00:05:52,940 --> 00:06:03,350
applied so and the other field is update

88
00:05:56,630 --> 00:06:06,880
revision this fuel is it's like a

89
00:06:03,350 --> 00:06:09,530
version of the micro code so you can

90
00:06:06,880 --> 00:06:13,340
retrieve this revision from one of them

91
00:06:09,530 --> 00:06:17,330
source and says which update is loaded

92
00:06:13,340 --> 00:06:21,609
into the cpu now the second hitter is

93
00:06:17,330 --> 00:06:24,740
the extended hitter which contains some

94
00:06:21,610 --> 00:06:29,510
some sizes and versions fuels or fields

95
00:06:24,740 --> 00:06:32,110
also but the the most important here is

96
00:06:29,510 --> 00:06:36,440
the signature

97
00:06:32,110 --> 00:06:40,160
it contains Aris a public key and

98
00:06:36,440 --> 00:06:42,350
signature that allows the CPU to

99
00:06:40,160 --> 00:06:45,290
authenticate the microcode date this

100
00:06:42,350 --> 00:06:48,210
micro code update before loading it and

101
00:06:45,290 --> 00:06:52,530
that's why you cannot

102
00:06:48,210 --> 00:06:54,120
just simply modify the update this this

103
00:06:52,530 --> 00:06:57,359
is one of the reasons you can why can't

104
00:06:54,120 --> 00:07:00,810
modify the update the second reason is

105
00:06:57,360 --> 00:07:04,440
because the update data is stored in an

106
00:07:00,810 --> 00:07:07,560
encrypted format and the key to decrypt

107
00:07:04,440 --> 00:07:10,370
is stored inside the CPU so only the CPU

108
00:07:07,560 --> 00:07:12,840
can decrypt the microcode update and

109
00:07:10,370 --> 00:07:16,740
also the CPU can authenticate the

110
00:07:12,840 --> 00:07:20,520
microcode update before loading this is

111
00:07:16,740 --> 00:07:25,020
these are the reasons why no one can

112
00:07:20,520 --> 00:07:26,909
modify the update and and that's why

113
00:07:25,020 --> 00:07:29,280
because no one exactly knows what

114
00:07:26,910 --> 00:07:33,479
microcode is capable of because it is

115
00:07:29,280 --> 00:07:36,599
greeted so however there are some known

116
00:07:33,479 --> 00:07:40,620
facts about microcode it implements

117
00:07:36,599 --> 00:07:43,830
instructions like I said before it

118
00:07:40,620 --> 00:07:46,650
should configure the execution logic

119
00:07:43,830 --> 00:07:50,099
online and that's how the famous

120
00:07:46,650 --> 00:07:53,280
sectional or abilities are fixed it

121
00:07:50,099 --> 00:07:56,280
implements some startup behavior like

122
00:07:53,280 --> 00:07:59,909
your interface table parsing like we

123
00:07:56,280 --> 00:08:02,070
like I've mentioned before it also can

124
00:07:59,909 --> 00:08:05,580
load a micro code updates from female

125
00:08:02,070 --> 00:08:08,729
face table and and one of the important

126
00:08:05,580 --> 00:08:12,289
things is the capability of floating our

127
00:08:08,729 --> 00:08:16,820
Intel authenticated code models from

128
00:08:12,289 --> 00:08:16,820
from film interface stable or not

129
00:08:18,650 --> 00:08:25,440
afterwards about these models the ACMs

130
00:08:22,590 --> 00:08:29,280
are authenticated code models these are

131
00:08:25,440 --> 00:08:31,259
signed and sometimes for some

132
00:08:29,280 --> 00:08:36,179
technologies these are encrypted blobs

133
00:08:31,259 --> 00:08:40,169
twice by Intel into fewer usually they

134
00:08:36,179 --> 00:08:41,880
serve as a root of trust for such

135
00:08:40,169 --> 00:08:43,890
technologies like in the buddha art

136
00:08:41,880 --> 00:08:46,980
involve buyers guard and trusted

137
00:08:43,890 --> 00:08:51,390
execution technology the buy the boot

138
00:08:46,980 --> 00:08:54,420
guard is a hardware based purification

139
00:08:51,390 --> 00:08:57,060
technology for the bias it allows to

140
00:08:54,420 --> 00:09:00,189
verify to authenticate the bias before

141
00:08:57,060 --> 00:09:02,589
executing it by looting the ACM

142
00:09:00,190 --> 00:09:06,010
microcode lose the ACM which verifies

143
00:09:02,590 --> 00:09:09,570
the bias and then if the verification

144
00:09:06,010 --> 00:09:13,990
was successful the bias is allowed to be

145
00:09:09,570 --> 00:09:17,880
executed the next technology is the bias

146
00:09:13,990 --> 00:09:19,630
guard it formerly known as VF 80

147
00:09:17,880 --> 00:09:25,870
platform flesh

148
00:09:19,630 --> 00:09:29,080
armoring technology the thing the main

149
00:09:25,870 --> 00:09:30,460
thing is that these technology allows to

150
00:09:29,080 --> 00:09:35,830
lock the flesh

151
00:09:30,460 --> 00:09:38,080
a flesh right access to the ACM the bias

152
00:09:35,830 --> 00:09:40,570
guard ACM and if this technology is

153
00:09:38,080 --> 00:09:43,500
enabled all this ACM is capable of

154
00:09:40,570 --> 00:09:47,100
writing onto a spare flash memory

155
00:09:43,500 --> 00:09:50,770
that's why how attack surface surface is

156
00:09:47,100 --> 00:09:56,680
reduced to the small blob which is

157
00:09:50,770 --> 00:09:59,800
encrypted and signed by Intel and the

158
00:09:56,680 --> 00:10:02,099
letter here is trusted execution

159
00:09:59,800 --> 00:10:04,780
technology which allows to measure

160
00:10:02,100 --> 00:10:08,620
trusted boot chain confidence during

161
00:10:04,780 --> 00:10:15,220
runtime using the trusted platform

162
00:10:08,620 --> 00:10:19,960
module TPM it is also based on different

163
00:10:15,220 --> 00:10:23,740
types of a CMS like seen it ACM and by

164
00:10:19,960 --> 00:10:27,160
caesium here are a few links to start if

165
00:10:23,740 --> 00:10:29,650
you're interested in this subject you

166
00:10:27,160 --> 00:10:35,069
can you can read something about the

167
00:10:29,650 --> 00:10:38,620
microcode here so let's go to

168
00:10:35,070 --> 00:10:41,350
downgrading technique first of all I

169
00:10:38,620 --> 00:10:44,010
have done some rivers originating on the

170
00:10:41,350 --> 00:10:47,040
microcode lot implemented in bias and

171
00:10:44,010 --> 00:10:51,370
here are a few thoughts have discovered

172
00:10:47,040 --> 00:10:53,860
first of all updates are to improve

173
00:10:51,370 --> 00:10:58,750
stability performance and apply security

174
00:10:53,860 --> 00:11:01,390
fixes that's our that's why they are

175
00:10:58,750 --> 00:11:03,820
important and usually if there's no

176
00:11:01,390 --> 00:11:07,710
microcode update the platform one even

177
00:11:03,820 --> 00:11:07,710
run one even power on

178
00:11:07,720 --> 00:11:13,819
also this should be eluded each time CPU

179
00:11:11,269 --> 00:11:17,240
is powered on this literally means

180
00:11:13,819 --> 00:11:20,120
leaving the sleep hibernation and

181
00:11:17,240 --> 00:11:25,639
shutdown modes every time CPU is powered

182
00:11:20,120 --> 00:11:29,540
on each core has its own micro code like

183
00:11:25,639 --> 00:11:33,769
I've said before so the Micra code

184
00:11:29,540 --> 00:11:39,349
updates glued it onto each core how the

185
00:11:33,769 --> 00:11:41,870
processor also the most important thing

186
00:11:39,350 --> 00:11:44,180
I've discovered that for not always the

187
00:11:41,870 --> 00:11:47,389
violent always the microcode updates

188
00:11:44,180 --> 00:11:51,219
could be loaded by CPU automatically

189
00:11:47,389 --> 00:11:57,589
from the femur and face table they I

190
00:11:51,220 --> 00:12:01,959
don't know why all the cases when it is

191
00:11:57,589 --> 00:12:06,620
not happening but the most the most

192
00:12:01,959 --> 00:12:09,589
spreaded case is some that some updates

193
00:12:06,620 --> 00:12:12,529
require special have special

194
00:12:09,589 --> 00:12:17,240
requirements for for example for in

195
00:12:12,529 --> 00:12:19,910
initialized memory so they cannot be

196
00:12:17,240 --> 00:12:23,329
loaded before memory is initialized and

197
00:12:19,910 --> 00:12:26,689
the bias has to turn it manually after

198
00:12:23,329 --> 00:12:31,120
the conditions are satisfied and that is

199
00:12:26,689 --> 00:12:34,730
the most most reddit case for us and

200
00:12:31,120 --> 00:12:35,860
this is the point while generating this

201
00:12:34,730 --> 00:12:39,470
possible actually

202
00:12:35,860 --> 00:12:45,379
so the loading process is looks like

203
00:12:39,470 --> 00:12:48,860
this it is it could be implemented via

204
00:12:45,379 --> 00:12:53,629
if you MS ours

205
00:12:48,860 --> 00:12:58,879
there are MSR to trigger the update

206
00:12:53,629 --> 00:13:01,100
process you just need to point the line

207
00:12:58,879 --> 00:13:05,059
year of address of the update and

208
00:13:01,100 --> 00:13:09,290
trigger the update itself also you can

209
00:13:05,059 --> 00:13:12,379
check the microcode update the revision

210
00:13:09,290 --> 00:13:15,920
that it it was actually applied we are

211
00:13:12,379 --> 00:13:17,320
reading the MSR at area demonsaw

212
00:13:15,920 --> 00:13:21,910
mentioned

213
00:13:17,320 --> 00:13:30,130
here it will return in the early Easter

214
00:13:21,910 --> 00:13:32,219
the revision idea of updating let's talk

215
00:13:30,130 --> 00:13:35,949
about the loader implemented in device

216
00:13:32,220 --> 00:13:41,670
the first steps when the noble boot

217
00:13:35,949 --> 00:13:46,089
occurs is performed in the CPU B model

218
00:13:41,670 --> 00:13:49,120
it finds the appropriate in non applied

219
00:13:46,089 --> 00:13:53,949
update in the general interface table

220
00:13:49,120 --> 00:13:58,149
then it copies it from the suspect flash

221
00:13:53,949 --> 00:14:01,930
memory into buffer allocated in memory

222
00:13:58,149 --> 00:14:06,310
and saves the pointer to this buffer

223
00:14:01,930 --> 00:14:11,349
into a hand of block this is the some

224
00:14:06,310 --> 00:14:15,849
structure in memory it doesn't matter so

225
00:14:11,350 --> 00:14:21,310
later this kind of block is retrieved by

226
00:14:15,850 --> 00:14:24,100
platform in its model and parsed the

227
00:14:21,310 --> 00:14:28,268
address of distort in memory microcode

228
00:14:24,100 --> 00:14:31,899
update is retrieved and then the update

229
00:14:28,269 --> 00:14:37,560
rule does think it updates the microcode

230
00:14:31,899 --> 00:14:41,709
with the pointed update and that's all

231
00:14:37,560 --> 00:14:46,349
but here are a few steps down in system

232
00:14:41,709 --> 00:14:46,349
management mode later upon normal boot

233
00:14:46,500 --> 00:14:56,860
first of all this CPU as per as FPS my

234
00:14:52,630 --> 00:14:59,949
model finds the same kind of block and

235
00:14:56,860 --> 00:15:03,970
retrieves an address of loaded Packer

236
00:14:59,949 --> 00:15:06,969
called update and it copies it into the

237
00:15:03,970 --> 00:15:11,079
system management ROM it is a close

238
00:15:06,970 --> 00:15:15,279
Embree close to operating system I think

239
00:15:11,079 --> 00:15:18,579
this is done for the purpose of

240
00:15:15,279 --> 00:15:21,279
protecting the microcode update from

241
00:15:18,579 --> 00:15:25,739
modifying bind by a code by software

242
00:15:21,279 --> 00:15:30,819
from operating system and the pointer in

243
00:15:25,740 --> 00:15:36,609
sm rom of this update is saved into the

244
00:15:30,819 --> 00:15:39,969
a variable into EFI variable called int

245
00:15:36,609 --> 00:15:46,329
microcode into you code as you can see

246
00:15:39,970 --> 00:15:48,609
here the question is why these sections

247
00:15:46,329 --> 00:15:53,289
are performed in the end and the answer

248
00:15:48,609 --> 00:15:57,910
is is an optimization while waking from

249
00:15:53,289 --> 00:16:01,869
sleep mode so if we after waking from

250
00:15:57,910 --> 00:16:07,988
sleep mode if we go to CPU the model we

251
00:16:01,869 --> 00:16:09,819
can see that it doesn't search for for

252
00:16:07,989 --> 00:16:13,179
the marker code updates in the

253
00:16:09,819 --> 00:16:16,689
affirmative phase table instead it loads

254
00:16:13,179 --> 00:16:20,939
the saved address from the into code

255
00:16:16,689 --> 00:16:24,039
variable and applies and save this

256
00:16:20,939 --> 00:16:28,118
address into a handle block and then

257
00:16:24,039 --> 00:16:30,759
plot from the unit model can does the

258
00:16:28,119 --> 00:16:35,829
same thing just upon normal booted loads

259
00:16:30,759 --> 00:16:41,489
Steve we provided microcode update and

260
00:16:35,829 --> 00:16:41,488
that's all this specific allows to to

261
00:16:45,029 --> 00:16:53,979
this specific class to to do some

262
00:16:49,329 --> 00:16:55,929
actions by an attacker like a an

263
00:16:53,979 --> 00:17:00,789
attacker can loot an old marker code

264
00:16:55,929 --> 00:17:04,599
update somewhere in the memory it he and

265
00:17:00,789 --> 00:17:08,169
he can make the int microcode water bolt

266
00:17:04,599 --> 00:17:11,829
point into this block of memory and

267
00:17:08,169 --> 00:17:16,360
perform sleep wake up cycle that's how

268
00:17:11,829 --> 00:17:18,428
microcode could be downgraded on the 2d

269
00:17:16,359 --> 00:17:22,628
version provided by the N by an attacker

270
00:17:18,429 --> 00:17:24,759
I should mention that the system will be

271
00:17:22,628 --> 00:17:27,458
booted with this micro code with the

272
00:17:24,759 --> 00:17:31,960
provided microcode only if it was valid

273
00:17:27,459 --> 00:17:37,029
and positive the integrity check however

274
00:17:31,960 --> 00:17:39,899
the downgrade is possible that way so as

275
00:17:37,029 --> 00:17:42,730
you can see here on the same CPU and

276
00:17:39,899 --> 00:17:44,780
I've managed to

277
00:17:42,730 --> 00:17:52,400
generated through the sleep wake up

278
00:17:44,780 --> 00:17:56,710
cycle from 20 2019 version of the

279
00:17:52,400 --> 00:18:05,540
microcode to some version which was

280
00:17:56,710 --> 00:18:10,250
which was built in 2018 so let's talk

281
00:18:05,540 --> 00:18:12,590
about the impact of this technique first

282
00:18:10,250 --> 00:18:15,530
of all the first thing that comes to my

283
00:18:12,590 --> 00:18:17,840
mind is this side channel attacks the

284
00:18:15,530 --> 00:18:24,280
famous side channel attacks that were

285
00:18:17,840 --> 00:18:29,300
that were fixed in in the microcode like

286
00:18:24,280 --> 00:18:30,950
vector the second variant so this

287
00:18:29,300 --> 00:18:34,730
technique allows to generate the

288
00:18:30,950 --> 00:18:37,190
microcode to an unfixed version and to

289
00:18:34,730 --> 00:18:41,830
get rid of the patches for side channel

290
00:18:37,190 --> 00:18:44,330
for some types of side channel attacks I

291
00:18:41,830 --> 00:18:46,100
should mention that the most of them are

292
00:18:44,330 --> 00:18:49,520
extremely hard to fly in the world

293
00:18:46,100 --> 00:18:52,850
however and they have never been spotted

294
00:18:49,520 --> 00:18:55,580
but there's not much of detection tools

295
00:18:52,850 --> 00:18:59,990
I've mentioned one that I've managed to

296
00:18:55,580 --> 00:19:02,350
find and also if you would like to know

297
00:18:59,990 --> 00:19:08,240
better about the side channel attacks

298
00:19:02,350 --> 00:19:16,399
you can read this paper by Alexander

299
00:19:08,240 --> 00:19:18,620
romance of it describes all this side

300
00:19:16,400 --> 00:19:24,309
channel attacks quite in quite

301
00:19:18,620 --> 00:19:30,229
interesting way the second the second

302
00:19:24,309 --> 00:19:32,510
thing the the second consequence of the

303
00:19:30,230 --> 00:19:34,760
Sangre de microcode is unlocking the

304
00:19:32,510 --> 00:19:37,700
Apocrypha biosis the thing is I've

305
00:19:34,760 --> 00:19:39,789
discovered that some deeper capabilities

306
00:19:37,700 --> 00:19:42,429
was patched

307
00:19:39,789 --> 00:19:44,470
in the microcode so if you will manage

308
00:19:42,429 --> 00:19:50,730
to downgrade them you will be able to

309
00:19:44,470 --> 00:19:56,139
use such technologies as Intel DC and

310
00:19:50,730 --> 00:20:00,490
the the most interesting thing is of the

311
00:19:56,139 --> 00:20:02,439
up discovered is that the ACMs could be

312
00:20:00,490 --> 00:20:06,760
also downgraded we are the microcode

313
00:20:02,440 --> 00:20:12,059
generate the the reason they can be

314
00:20:06,760 --> 00:20:17,950
downgraded is that the old my code

315
00:20:12,059 --> 00:20:21,010
allows to looting a lot of loot old ACMs

316
00:20:17,950 --> 00:20:29,860
with it downgraded reduced security

317
00:20:21,010 --> 00:20:31,570
version number in version this is this

318
00:20:29,860 --> 00:20:34,330
is possible because the ACM

319
00:20:31,570 --> 00:20:42,990
authentication is performed by a micro

320
00:20:34,330 --> 00:20:42,990
code so it allows to exploit one days

321
00:20:43,559 --> 00:20:49,090
and influence the technologists that are

322
00:20:46,690 --> 00:20:54,789
supported by ACM bizarre would guard

323
00:20:49,090 --> 00:20:57,970
buyers guard and until txt so let's talk

324
00:20:54,789 --> 00:21:03,700
about the bulgar ACM it is not encrypted

325
00:20:57,970 --> 00:21:07,210
you can easily find one days in it by

326
00:21:03,700 --> 00:21:10,419
applying a binary diffing it is executed

327
00:21:07,210 --> 00:21:14,980
only at on startup before the bias like

328
00:21:10,419 --> 00:21:18,010
I've mentioned before and the thing is

329
00:21:14,980 --> 00:21:21,519
that this ACM does not verify bias when

330
00:21:18,010 --> 00:21:25,889
waking from sleep because of performance

331
00:21:21,519 --> 00:21:31,330
optimizations and accept each 12 boot

332
00:21:25,889 --> 00:21:35,370
that's why the junk reading and trying

333
00:21:31,330 --> 00:21:39,730
to generate into my coat and this ACM is

334
00:21:35,370 --> 00:21:43,750
is not necessary because when waking

335
00:21:39,730 --> 00:21:49,570
from mystery we there is no verification

336
00:21:43,750 --> 00:21:53,120
actually so let's talk about the buyers

337
00:21:49,570 --> 00:21:55,669
guard the boys go ACM is encrypted

338
00:21:53,120 --> 00:22:00,879
and is extremely hard to find a fixed

339
00:21:55,670 --> 00:22:03,950
issue in it so it can be triggered by

340
00:22:00,880 --> 00:22:09,590
running a spy flash operations through

341
00:22:03,950 --> 00:22:12,830
CPU massage and has then greatest

342
00:22:09,590 --> 00:22:17,090
possible if you manage to gain an SPI

343
00:22:12,830 --> 00:22:20,120
flash white access which is which is

344
00:22:17,090 --> 00:22:23,570
also necessary and because if you will

345
00:22:20,120 --> 00:22:27,169
gain this is the flash right access you

346
00:22:23,570 --> 00:22:32,360
are at this moment already bypassed

347
00:22:27,170 --> 00:22:34,070
device guard and that's why you there's

348
00:22:32,360 --> 00:22:37,209
the point to attack only the

349
00:22:34,070 --> 00:22:39,710
interpretation of bias guard the first

350
00:22:37,210 --> 00:22:41,870
the force bypass of the infobar

351
00:22:39,710 --> 00:22:46,120
technology is also in public you can

352
00:22:41,870 --> 00:22:46,120
read this work by Alex and Rosa

353
00:22:46,820 --> 00:22:58,370
the third types of a CMS are 60s EMS and

354
00:22:51,830 --> 00:23:01,939
they are not encrypted the budget issues

355
00:22:58,370 --> 00:23:04,600
in it in these a CMS could be fine by a

356
00:23:01,940 --> 00:23:10,310
binary giving there also there are also

357
00:23:04,600 --> 00:23:14,179
a few advisories and few non-public

358
00:23:10,310 --> 00:23:18,710
issues in a CMS so the general target

359
00:23:14,180 --> 00:23:22,300
here is a single TCM that forms some

360
00:23:18,710 --> 00:23:25,430
measurement of trusted boot components

361
00:23:22,300 --> 00:23:32,690
this SEM is treated by gets second

362
00:23:25,430 --> 00:23:35,390
struction of the CPU and the thing is

363
00:23:32,690 --> 00:23:38,750
that address of this api of the CCM is

364
00:23:35,390 --> 00:23:42,830
memory is not is provided by its color

365
00:23:38,750 --> 00:23:46,430
and it is always stored at the same

366
00:23:42,830 --> 00:23:48,560
place in memory that's why you can just

367
00:23:46,430 --> 00:23:50,450
replace this asean and memory then

368
00:23:48,560 --> 00:23:53,950
downgrade the microcode and it will and

369
00:23:50,450 --> 00:23:58,250
downgraded microcode after waiting from

370
00:23:53,950 --> 00:23:59,490
sleep state will loot these vulnerable I

371
00:23:58,250 --> 00:24:04,140
see em and

372
00:23:59,490 --> 00:24:11,340
that's that's how we can exploit a fixed

373
00:24:04,140 --> 00:24:14,190
issue in the Indies so the problem this

374
00:24:11,340 --> 00:24:20,570
this is a supply chain problem I've

375
00:24:14,190 --> 00:24:25,830
reported to Intel a about a year ago and

376
00:24:20,570 --> 00:24:29,658
it took a long time for implementing

377
00:24:25,830 --> 00:24:34,408
fixes for it for mitigations so let's

378
00:24:29,659 --> 00:24:39,059
let's talk about the mitigations the the

379
00:24:34,409 --> 00:24:42,809
most the the most frequent frequent

380
00:24:39,059 --> 00:24:48,418
mitigation I've I was worried about is

381
00:24:42,809 --> 00:24:52,350
Intel as sjx technology however our

382
00:24:48,419 --> 00:24:54,659
experiments showed that the this

383
00:24:52,350 --> 00:24:57,178
technology does not check the microcode

384
00:24:54,659 --> 00:25:02,070
skew which number one living sleep mode

385
00:24:57,179 --> 00:25:10,610
so it is it doesn't work or for this

386
00:25:02,070 --> 00:25:14,070
issue the applied replies mitigations by

387
00:25:10,610 --> 00:25:16,529
american megatrends goodbyes vendor and

388
00:25:14,070 --> 00:25:20,039
was to protect the into micro code

389
00:25:16,529 --> 00:25:23,039
variable from modifying and even

390
00:25:20,039 --> 00:25:25,830
accessing by an attacker from an

391
00:25:23,039 --> 00:25:28,649
operating system however this could be

392
00:25:25,830 --> 00:25:30,539
bypassed difficult ii manages to run

393
00:25:28,649 --> 00:25:35,610
arbitrary cone in system management mode

394
00:25:30,539 --> 00:25:37,500
that's this will allow to gain spare

395
00:25:35,610 --> 00:25:43,469
flash right access where you can just

396
00:25:37,500 --> 00:25:53,250
swap the inversion and and again exploit

397
00:25:43,470 --> 00:25:55,559
this issue also one of the one of the

398
00:25:53,250 --> 00:25:57,390
obvious mitigation is to make an

399
00:25:55,559 --> 00:25:59,700
operating system to update the market

400
00:25:57,390 --> 00:26:03,029
code to the latest version however the

401
00:25:59,700 --> 00:26:05,990
as you can see the trusted boot chain it

402
00:26:03,029 --> 00:26:08,220
can be compromised at the moment of

403
00:26:05,990 --> 00:26:11,160
execution the operating system that's

404
00:26:08,220 --> 00:26:16,900
why you cannot trust

405
00:26:11,160 --> 00:26:28,020
the the update provided such way in such

406
00:26:16,900 --> 00:26:32,230
a way and the the most the most are

407
00:26:28,020 --> 00:26:34,930
hardening fixed is for Intel was for

408
00:26:32,230 --> 00:26:38,170
Intel to supply only the updates that

409
00:26:34,930 --> 00:26:40,830
are can be loaded by the finger from the

410
00:26:38,170 --> 00:26:45,550
finger interface table automatically by

411
00:26:40,830 --> 00:26:48,189
by the CPU that's the this will not

412
00:26:45,550 --> 00:26:54,129
allow to generating microcode because

413
00:26:48,190 --> 00:26:57,070
the downgrading to the to the question

414
00:26:54,130 --> 00:26:59,440
with the decreased update revision when

415
00:26:57,070 --> 00:27:06,250
the update is already loaded is not

416
00:26:59,440 --> 00:27:08,200
possible so let's see if you take ways

417
00:27:06,250 --> 00:27:11,200
from this problem

418
00:27:08,200 --> 00:27:18,550
this is supplied shape problem as was

419
00:27:11,200 --> 00:27:22,060
mentioned before the the problem exists

420
00:27:18,550 --> 00:27:25,419
in the basic component and we saw how it

421
00:27:22,060 --> 00:27:29,050
influenced and compromises all

422
00:27:25,420 --> 00:27:40,510
technologies served it serves as a root

423
00:27:29,050 --> 00:27:44,200
of trust and and as as we don't know or

424
00:27:40,510 --> 00:27:47,260
what is micro code is capable what mica

425
00:27:44,200 --> 00:27:51,070
code is capable of the full impact is

426
00:27:47,260 --> 00:27:54,100
you have to discover because it is yet

427
00:27:51,070 --> 00:27:56,210
unknown so that's all for now

428
00:27:54,100 --> 00:28:02,209
thank you

429
00:27:56,210 --> 00:28:02,210
[Applause]

430
00:28:04,490 --> 00:28:13,100
is there any questions for the floor or

431
00:28:14,810 --> 00:28:27,260
do we have any live questions all right

432
00:28:19,140 --> 00:28:30,140
if not we'll move to slide oh I is

433
00:28:27,260 --> 00:28:34,110
security reason not to open source or

434
00:28:30,140 --> 00:28:35,880
the microcode architecture if I can

435
00:28:34,110 --> 00:28:41,010
install and microcode update I've

436
00:28:35,880 --> 00:28:45,180
already won yes you already want I think

437
00:28:41,010 --> 00:28:48,990
a Nazi opens first this is the question

438
00:28:45,180 --> 00:28:50,660
that should be asked this should be

439
00:28:48,990 --> 00:28:57,180
referred to Intel

440
00:28:50,660 --> 00:29:00,210
yes the I think the the intellectual

441
00:28:57,180 --> 00:29:03,270
property is the reason why Intel is not

442
00:29:00,210 --> 00:29:08,010
releasing is not a producing open

443
00:29:03,270 --> 00:29:11,690
sourcing the microcode MD or Intel the

444
00:29:08,010 --> 00:29:14,790
talk was related to Intel the hotel

445
00:29:11,690 --> 00:29:18,380
which has better mic at extra security

446
00:29:14,790 --> 00:29:22,440
in the other new your opinion I think

447
00:29:18,380 --> 00:29:26,220
both of these companies have pros and

448
00:29:22,440 --> 00:29:30,420
cons will it be possible to use this

449
00:29:26,220 --> 00:29:35,720
kind of downgrading of the microcode to

450
00:29:30,420 --> 00:29:39,690
persist mauler I think yes the reason is

451
00:29:35,720 --> 00:29:42,030
the the main target of the aggravating

452
00:29:39,690 --> 00:29:45,060
marker code is to bypassing trusted boot

453
00:29:42,030 --> 00:29:49,020
chain by influencing the trusted

454
00:29:45,060 --> 00:29:51,810
execution technology that's is the main

455
00:29:49,020 --> 00:29:55,889
target of persisting the malware in the

456
00:29:51,810 --> 00:29:58,860
system and what kind of access does an

457
00:29:55,890 --> 00:30:02,760
attacker need to generate the microcode

458
00:29:58,860 --> 00:30:05,070
it's I forgot to mention it or it can be

459
00:30:02,760 --> 00:30:08,879
done from a user space of the operating

460
00:30:05,070 --> 00:30:11,970
system you just need to loot the update

461
00:30:08,880 --> 00:30:19,669
into memory so this can be

462
00:30:11,970 --> 00:30:23,129
through any driver like our we are W

463
00:30:19,669 --> 00:30:27,750
everything or all sounds something like

464
00:30:23,129 --> 00:30:30,000
that and the then you have to modify the

465
00:30:27,750 --> 00:30:32,129
five water bowl this can be done from

466
00:30:30,000 --> 00:30:37,350
the user space of the operating system

467
00:30:32,129 --> 00:30:39,928
for there is a function in Windows API I

468
00:30:37,350 --> 00:30:45,509
don't remember the set server

469
00:30:39,929 --> 00:30:48,779
environment variable X this sellout this

470
00:30:45,509 --> 00:30:54,149
is dysfunction allowed to to modify the

471
00:30:48,779 --> 00:30:56,700
FI variable and then you can you just

472
00:30:54,149 --> 00:30:58,949
need to perform a sleep wake up cycle

473
00:30:56,700 --> 00:31:02,940
which is which can be done also from the

474
00:30:58,950 --> 00:31:05,759
operating system is there a chance that

475
00:31:02,940 --> 00:31:07,470
certain agencies have already known

476
00:31:05,759 --> 00:31:10,159
about such vulnerabilities before

477
00:31:07,470 --> 00:31:14,730
researchers of shield scour and publish

478
00:31:10,159 --> 00:31:26,179
all right I don't really know I it's

479
00:31:14,730 --> 00:31:31,440
hard for me to to to understand the this

480
00:31:26,179 --> 00:31:38,899
how can we detect such attacks I think

481
00:31:31,440 --> 00:31:46,409
it's possible to to somehow store the

482
00:31:38,899 --> 00:31:50,508
security version number of of the of the

483
00:31:46,409 --> 00:31:55,279
microcode somewhere in the safe place

484
00:31:50,509 --> 00:32:00,929
for example using the TPM seal functions

485
00:31:55,279 --> 00:32:04,710
and if it was changed you can you can

486
00:32:00,929 --> 00:32:07,139
extract the system has their beneficial

487
00:32:04,710 --> 00:32:09,090
instance instances of such exploits

488
00:32:07,139 --> 00:32:11,309
being used in the case of achieving

489
00:32:09,090 --> 00:32:14,549
certain political goals I don't know

490
00:32:11,309 --> 00:32:17,600
about that I don't know this is the

491
00:32:14,549 --> 00:32:20,009
political subjects are health and and

492
00:32:17,600 --> 00:32:24,179
intelligences and agencies are hard for

493
00:32:20,009 --> 00:32:28,920
me to understand I don't know about it

494
00:32:24,180 --> 00:32:29,970
so if this is all I would like to thank

495
00:32:28,920 --> 00:32:34,240
you again for coming

496
00:32:29,970 --> 00:32:37,670
it's day thank you

497
00:32:34,240 --> 00:32:37,670
[Music]

