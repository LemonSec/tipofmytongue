1
00:00:07,780 --> 00:00:12,370
thank you<font color="#E5E5E5"> for coming to my</font><font color="#CCCCCC"> presentation</font>

2
00:00:09,870 --> 00:00:13,360
<font color="#E5E5E5">today</font><font color="#CCCCCC"> I'm going to</font><font color="#E5E5E5"> present you a</font>

3
00:00:12,370 --> 00:00:16,279
research

4
00:00:13,360 --> 00:00:20,810
<font color="#E5E5E5">little-known Iowa's kernel module called</font>

5
00:00:16,279 --> 00:00:24,259
<font color="#E5E5E5">a pail</font><font color="#CCCCCC"> AV driver</font><font color="#E5E5E5"> so Arjuna for today</font>

6
00:00:20,810 --> 00:00:28,970
first I'll review some attack surfaces

7
00:00:24,259 --> 00:00:31,219
in iOS mostly<font color="#E5E5E5"> known ones but emphasize</font>

8
00:00:28,970 --> 00:00:33,469
<font color="#E5E5E5">ins</font><font color="#CCCCCC"> Oh No one</font><font color="#E5E5E5"> of them then I'll show</font><font color="#CCCCCC"> you</font>

9
00:00:31,219 --> 00:00:37,850
<font color="#E5E5E5">the only</font><font color="#CCCCCC"> some of the vulnerabilities</font>

10
00:00:33,469 --> 00:00:39,590
that I found<font color="#E5E5E5"> and afterwards I'll show</font>

11
00:00:37,850 --> 00:00:44,120
you how I changed them together to make

12
00:00:39,590 --> 00:00:47,059
a fully<font color="#E5E5E5"> working kernel exploit finally</font>

13
00:00:44,120 --> 00:00:51,468
after<font color="#E5E5E5"> that few words about jailbreaking</font>

14
00:00:47,059 --> 00:00:53,050
<font color="#E5E5E5">and finally conclusions and Q&A so a</font>

15
00:00:51,469 --> 00:00:56,569
little<font color="#E5E5E5"> bit about myself</font>

16
00:00:53,050 --> 00:01:00,678
like I said<font color="#E5E5E5"> before my name is Adam</font><font color="#CCCCCC"> don't</font>

17
00:00:56,569 --> 00:01:03,469
felt I'm a security<font color="#CCCCCC"> researcher mainly in</font>

18
00:01:00,679 --> 00:01:04,760
iOS and Android<font color="#CCCCCC"> I do mainly a</font>

19
00:01:03,469 --> 00:01:08,420
vulnerability<font color="#CCCCCC"> assessment and</font>

20
00:01:04,760 --> 00:01:10,780
exploitation<font color="#E5E5E5"> right now now I walk in</font><font color="#CCCCCC"> as</font>

21
00:01:08,420 --> 00:01:11,930
<font color="#CCCCCC">imperium as a senior security</font><font color="#E5E5E5"> researcher</font>

22
00:01:10,780 --> 00:01:14,870
just

23
00:01:11,930 --> 00:01:18,680
gelbach to the<font color="#CCCCCC"> Netherlands</font><font color="#E5E5E5"> and so I have</font>

24
00:01:14,870 --> 00:01:22,130
to start learning Dutch so additionally

25
00:01:18,680 --> 00:01:24,740
I<font color="#E5E5E5"> would like to thank sook</font><font color="#CCCCCC"> and you need</font>

26
00:01:22,130 --> 00:01:27,289
a<font color="#CCCCCC"> K</font><font color="#E5E5E5"> shock law for giving me the</font>

27
00:01:24,740 --> 00:01:30,619
opportunity<font color="#CCCCCC"> to actually work on stuff</font>

28
00:01:27,290 --> 00:01:32,300
and<font color="#E5E5E5"> supporting me during the hard mental</font>

29
00:01:30,620 --> 00:01:36,860
crisis that every<font color="#CCCCCC"> security researcher</font>

30
00:01:32,300 --> 00:01:40,250
has doing the<font color="#CCCCCC"> researchers so attack</font>

31
00:01:36,860 --> 00:01:42,170
surfaces in iOS so there<font color="#E5E5E5"> are some attack</font>

32
00:01:40,250 --> 00:01:45,350
services in iOS that are actually<font color="#E5E5E5"> common</font>

33
00:01:42,170 --> 00:01:49,360
to other<font color="#CCCCCC"> platforms</font><font color="#E5E5E5"> like system calls in</font>

34
00:01:45,350 --> 00:01:52,369
iOS and<font color="#E5E5E5"> no it's Mac and FreeBSD syscalls</font>

35
00:01:49,360 --> 00:01:55,310
there are<font color="#CCCCCC"> MIG calls which is an auto</font>

36
00:01:52,370 --> 00:01:57,830
generated code that is needed it's like

37
00:01:55,310 --> 00:02:00,110
an ideal for<font color="#CCCCCC"> mock messages</font><font color="#E5E5E5"> so it's a</font>

38
00:01:57,830 --> 00:02:05,110
code that<font color="#CCCCCC"> C</font><font color="#E5E5E5"> realises and uncivilized as</font>

39
00:02:00,110 --> 00:02:07,610
<font color="#E5E5E5">mass messages and finally we have iokit</font>

40
00:02:05,110 --> 00:02:10,220
there are more attack services but<font color="#E5E5E5"> we</font>

41
00:02:07,610 --> 00:02:13,340
are going<font color="#CCCCCC"> to</font><font color="#E5E5E5"> focus on iokit</font>

42
00:02:10,220 --> 00:02:16,989
so what's actually i/o kit I'll get<font color="#CCCCCC"> is</font>

43
00:02:13,340 --> 00:02:19,970
<font color="#CCCCCC">Apple's</font><font color="#E5E5E5"> collection of tools researcher</font>

44
00:02:16,989 --> 00:02:22,100
resources and other things<font color="#E5E5E5"> that allows</font>

45
00:02:19,970 --> 00:02:23,480
developers<font color="#CCCCCC"> to create drivers for this</font>

46
00:02:22,100 --> 00:02:25,579
<font color="#E5E5E5">new kernel</font>

47
00:02:23,480 --> 00:02:29,869
the big difference<font color="#CCCCCC"> in comparison to</font>

48
00:02:25,580 --> 00:02:31,670
<font color="#E5E5E5">other</font><font color="#CCCCCC"> kernel SDK</font><font color="#E5E5E5"> is that I hope it is I</font>

49
00:02:29,870 --> 00:02:34,640
could<font color="#E5E5E5"> give you</font><font color="#CCCCCC"> the ability to completely</font>

50
00:02:31,670 --> 00:02:37,190
<font color="#E5E5E5">write your code</font><font color="#CCCCCC"> in C++ which is pretty</font>

51
00:02:34,640 --> 00:02:39,850
<font color="#CCCCCC">impressive because it has a lot of</font>

52
00:02:37,190 --> 00:02:42,230
advantages<font color="#E5E5E5"> if you are writing</font><font color="#CCCCCC"> code</font>

53
00:02:39,850 --> 00:02:46,220
<font color="#CCCCCC">additionally it gives a very</font><font color="#E5E5E5"> interesting</font>

54
00:02:42,230 --> 00:02:49,010
<font color="#E5E5E5">way of isolation between the actual work</font>

55
00:02:46,220 --> 00:02:51,050
<font color="#E5E5E5">of the driver and the communication</font>

56
00:02:49,010 --> 00:02:53,359
method<font color="#CCCCCC"> between the user and the kernel</font>

57
00:02:51,050 --> 00:02:55,970
the driver is all the drivers inherit

58
00:02:53,360 --> 00:02:57,800
from a class called<font color="#E5E5E5"> IO service and the</font>

59
00:02:55,970 --> 00:03:00,890
communication method which the kernel is

60
00:02:57,800 --> 00:03:04,450
called is a class that is<font color="#E5E5E5"> called IO user</font>

61
00:03:00,890 --> 00:03:07,250
client they also give you a lot of

62
00:03:04,450 --> 00:03:09,980
predefined types<font color="#E5E5E5"> when you write your</font>

63
00:03:07,250 --> 00:03:12,590
<font color="#CCCCCC">code</font><font color="#E5E5E5"> for example</font><font color="#CCCCCC"> you have always three</font>

64
00:03:09,980 --> 00:03:15,738
<font color="#E5E5E5">your strings you</font><font color="#CCCCCC"> have numbers you have a</font>

65
00:03:12,590 --> 00:03:18,709
common an abstract way to<font color="#E5E5E5"> serialize data</font>

66
00:03:15,739 --> 00:03:21,650
<font color="#E5E5E5">a lot of other cool features</font><font color="#CCCCCC"> and finally</font>

67
00:03:18,709 --> 00:03:23,769
like I saw in an interesting<font color="#CCCCCC"> tweet it's</font>

68
00:03:21,650 --> 00:03:27,709
super well designed to facilitate

69
00:03:23,769 --> 00:03:30,400
<font color="#CCCCCC">channel exploitation</font><font color="#E5E5E5"> so a little bit</font>

70
00:03:27,709 --> 00:03:34,910
<font color="#CCCCCC">about channel exploitation with IO kids</font>

71
00:03:30,400 --> 00:03:36,980
over the last<font color="#E5E5E5"> five</font><font color="#CCCCCC"> years</font><font color="#E5E5E5"> a four year</font>

72
00:03:34,910 --> 00:03:39,230
sorry<font color="#CCCCCC"> we've</font><font color="#E5E5E5"> seen a lot of jail breaks</font>

73
00:03:36,980 --> 00:03:42,140
that were based mostly on IO kids<font color="#E5E5E5"> and</font>

74
00:03:39,230 --> 00:03:43,790
it's very impressive<font color="#E5E5E5"> because actually</font>

75
00:03:42,140 --> 00:03:46,190
each one<font color="#CCCCCC"> of them did have an arcade</font>

76
00:03:43,790 --> 00:03:50,420
<font color="#CCCCCC">exploit</font><font color="#E5E5E5"> some of them had only architects</font>

77
00:03:46,190 --> 00:03:52,820
plates now the thing is why do hackers

78
00:03:50,420 --> 00:03:55,640
love it so much what makes I get so much

79
00:03:52,820 --> 00:03:57,799
better<font color="#CCCCCC"> as such a good candidate</font><font color="#E5E5E5"> for a</font>

80
00:03:55,640 --> 00:03:59,839
vulnerability research<font color="#E5E5E5"> and exploitation</font>

81
00:03:57,799 --> 00:04:02,989
<font color="#E5E5E5">so first of all there are a lot of</font>

82
00:03:59,840 --> 00:04:06,290
<font color="#E5E5E5">drivers which means there is the attack</font>

83
00:04:02,989 --> 00:04:08,390
surface is much bigger than other<font color="#E5E5E5"> places</font>

84
00:04:06,290 --> 00:04:12,140
<font color="#E5E5E5">second of all and that's an interesting</font>

85
00:04:08,390 --> 00:04:15,589
point<font color="#CCCCCC"> it's because</font><font color="#E5E5E5"> it's in C++ the</font>

86
00:04:12,140 --> 00:04:17,750
weakest<font color="#CCCCCC"> over override that that an</font>

87
00:04:15,590 --> 00:04:19,789
attacker<font color="#E5E5E5"> has can easily be used to</font>

88
00:04:17,750 --> 00:04:22,910
override<font color="#CCCCCC"> the kernel function pointer and</font>

89
00:04:19,789 --> 00:04:26,180
and that's sometimes the<font color="#E5E5E5"> end of the game</font>

90
00:04:22,910 --> 00:04:29,210
<font color="#CCCCCC">and finally like most of the IO key</font>

91
00:04:26,180 --> 00:04:32,360
drivers that<font color="#CCCCCC"> we have on our iOS</font><font color="#E5E5E5"> devices</font>

92
00:04:29,210 --> 00:04:34,880
<font color="#CCCCCC">it's not open source which means</font><font color="#E5E5E5"> that</font>

93
00:04:32,360 --> 00:04:35,719
<font color="#E5E5E5">less people</font><font color="#CCCCCC"> actually research for bug</font>

94
00:04:34,880 --> 00:04:37,549
there

95
00:04:35,719 --> 00:04:41,119
so how do we<font color="#CCCCCC"> actually communicate with</font>

96
00:04:37,549 --> 00:04:46,388
<font color="#E5E5E5">IO kids and</font><font color="#CCCCCC"> let's see if</font><font color="#E5E5E5"> you oh great</font>

97
00:04:41,119 --> 00:04:48,999
<font color="#CCCCCC">okay</font><font color="#E5E5E5"> so you don't see the top</font><font color="#CCCCCC"> of the</font><font color="#E5E5E5"> oh</font>

98
00:04:46,389 --> 00:04:51,739
<font color="#E5E5E5">you don't see the</font><font color="#CCCCCC"> top of</font><font color="#E5E5E5"> the funk of the</font>

99
00:04:48,999 --> 00:04:55,639
presentation<font color="#E5E5E5"> okay we'll make it anyway</font>

100
00:04:51,739 --> 00:04:56,448
<font color="#CCCCCC">so it's a function</font><font color="#E5E5E5"> that I</font><font color="#CCCCCC"> call get</font><font color="#E5E5E5"> iokit</font>

101
00:04:55,639 --> 00:05:00,169
connection

102
00:04:56,449 --> 00:05:02,749
it receives a name for<font color="#E5E5E5"> a driver and what</font>

103
00:05:00,169 --> 00:05:06,109
it does is first<font color="#E5E5E5"> it</font><font color="#CCCCCC"> gets the master port</font>

104
00:05:02,749 --> 00:05:08,869
which<font color="#CCCCCC"> is</font><font color="#E5E5E5"> the way to to ask the colonel</font>

105
00:05:06,110 --> 00:05:11,029
<font color="#E5E5E5">for Aoki</font><font color="#CCCCCC"> the drivers if you want to</font>

106
00:05:08,869 --> 00:05:12,979
communicate<font color="#E5E5E5"> with our key drivers you get</font>

107
00:05:11,029 --> 00:05:15,860
that port and<font color="#E5E5E5"> you send it requests</font>

108
00:05:12,979 --> 00:05:18,229
second you ask it<font color="#CCCCCC"> to give</font><font color="#E5E5E5"> you all the</font>

109
00:05:15,860 --> 00:05:20,629
drivers<font color="#CCCCCC"> that inherit from I have service</font>

110
00:05:18,229 --> 00:05:22,539
which like I<font color="#CCCCCC"> said before is the main</font>

111
00:05:20,629 --> 00:05:25,489
class that all the drivers inherit from

112
00:05:22,539 --> 00:05:27,800
then you<font color="#E5E5E5"> get an iterator you iterate the</font>

113
00:05:25,489 --> 00:05:29,719
drivers<font color="#E5E5E5"> you get the name</font><font color="#CCCCCC"> of</font><font color="#E5E5E5"> the drivers</font>

114
00:05:27,800 --> 00:05:31,610
of the driver that<font color="#CCCCCC"> you're iterating on</font>

115
00:05:29,719 --> 00:05:34,159
and if that that's the driver you wanted

116
00:05:31,610 --> 00:05:37,069
and just<font color="#E5E5E5"> call</font><font color="#CCCCCC"> io service open and you</font>

117
00:05:34,159 --> 00:05:38,899
get a connection<font color="#E5E5E5"> to that driver and from</font>

118
00:05:37,069 --> 00:05:41,539
that<font color="#E5E5E5"> point if you want to communicate</font>

119
00:05:38,899 --> 00:05:43,939
with<font color="#CCCCCC"> that</font><font color="#E5E5E5"> driver that's your handle to</font>

120
00:05:41,539 --> 00:05:46,699
<font color="#E5E5E5">the driver so that's the other mote ID</font>

121
00:05:43,939 --> 00:05:48,769
what does the<font color="#CCCCCC"> cannon</font><font color="#E5E5E5"> actually do the</font>

122
00:05:46,699 --> 00:05:51,199
colonel<font color="#CCCCCC"> because it's in C++ there</font><font color="#E5E5E5"> is a</font>

123
00:05:48,769 --> 00:05:53,300
function<font color="#CCCCCC"> called external method</font><font color="#E5E5E5"> the</font>

124
00:05:51,199 --> 00:05:58,069
<font color="#E5E5E5">cannon has to a</font><font color="#CCCCCC"> driver has to</font><font color="#E5E5E5"> override</font>

125
00:05:53,300 --> 00:06:00,409
<font color="#E5E5E5">it it's like IO</font><font color="#CCCCCC"> city else the user asked</font>

126
00:05:58,069 --> 00:06:02,209
for a<font color="#E5E5E5"> specific function it actually</font>

127
00:06:00,409 --> 00:06:03,529
actually<font color="#E5E5E5"> gives a function ID which</font><font color="#CCCCCC"> is</font>

128
00:06:02,209 --> 00:06:06,079
called the selector will get<font color="#E5E5E5"> the tune</font>

129
00:06:03,529 --> 00:06:09,139
and<font color="#CCCCCC"> the channel calls the appropriate</font>

130
00:06:06,079 --> 00:06:12,289
function based on<font color="#E5E5E5"> the request of the</font>

131
00:06:09,139 --> 00:06:13,939
user now it's nice to know but not super

132
00:06:12,289 --> 00:06:16,759
important in our case that<font color="#CCCCCC"> all that</font>

133
00:06:13,939 --> 00:06:19,579
<font color="#CCCCCC">communication is very pure</font><font color="#E5E5E5"> Leon</font><font color="#CCCCCC"> math</font>

134
00:06:16,759 --> 00:06:22,489
messages so the user calls something

135
00:06:19,579 --> 00:06:24,860
<font color="#CCCCCC">name a function called</font><font color="#E5E5E5"> IO</font><font color="#CCCCCC"> Connect call</font>

136
00:06:22,489 --> 00:06:28,609
method which ultimately sends a<font color="#CCCCCC"> mock</font>

137
00:06:24,860 --> 00:06:31,159
<font color="#CCCCCC">message</font><font color="#E5E5E5"> so what how</font><font color="#CCCCCC"> does the excel</font>

138
00:06:28,610 --> 00:06:33,529
method<font color="#E5E5E5"> other</font><font color="#CCCCCC"> it looks like so that's the</font>

139
00:06:31,159 --> 00:06:35,479
signature<font color="#CCCCCC"> of a function that's the</font>

140
00:06:33,529 --> 00:06:38,929
<font color="#E5E5E5">actual</font><font color="#CCCCCC"> signature from source</font><font color="#E5E5E5"> codes</font>

141
00:06:35,479 --> 00:06:40,878
<font color="#E5E5E5">select</font><font color="#CCCCCC"> the selector here is</font><font color="#E5E5E5"> what the</font>

142
00:06:38,929 --> 00:06:43,638
user what is<font color="#E5E5E5"> your request from the</font>

143
00:06:40,879 --> 00:06:46,459
kernel that's actually<font color="#CCCCCC"> an a</font><font color="#E5E5E5"> number that</font>

144
00:06:43,639 --> 00:06:48,740
is not<font color="#E5E5E5"> being filtered by the kernel</font><font color="#CCCCCC"> the</font>

145
00:06:46,459 --> 00:06:49,260
driver receives that number and chooses

146
00:06:48,740 --> 00:06:52,500
what<font color="#CCCCCC"> to do</font>

147
00:06:49,260 --> 00:06:54,810
that's the odds<font color="#CCCCCC"> pumped contains input</font>

148
00:06:52,500 --> 00:06:57,750
and output buffers<font color="#CCCCCC"> so it contains</font><font color="#E5E5E5"> a</font>

149
00:06:54,810 --> 00:06:58,290
pointer to<font color="#E5E5E5"> an input supplied data from</font>

150
00:06:57,750 --> 00:07:00,960
the user

151
00:06:58,290 --> 00:07:03,300
it also contains an output pointer which

152
00:07:00,960 --> 00:07:05,219
will the data from<font color="#CCCCCC"> that output</font><font color="#E5E5E5"> pointer</font>

153
00:07:03,300 --> 00:07:07,770
will<font color="#CCCCCC"> be copied back to the user</font>

154
00:07:05,220 --> 00:07:10,080
<font color="#E5E5E5">this patch is the pointer to which</font>

155
00:07:07,770 --> 00:07:11,969
function is<font color="#E5E5E5"> going to</font><font color="#CCCCCC"> be called target is</font>

156
00:07:10,080 --> 00:07:13,620
the pointer to<font color="#CCCCCC"> the driver and reference</font>

157
00:07:11,970 --> 00:07:15,960
is something that I didn't<font color="#CCCCCC"> see anyone</font>

158
00:07:13,620 --> 00:07:20,490
using<font color="#E5E5E5"> referencing someone won't steal</font>

159
00:07:15,960 --> 00:07:24,200
that didn't<font color="#E5E5E5"> see and used that so that's</font>

160
00:07:20,490 --> 00:07:26,580
how that's again that's<font color="#CCCCCC"> how the colonel</font>

161
00:07:24,200 --> 00:07:29,070
<font color="#E5E5E5">in plaits</font><font color="#CCCCCC"> liked the most</font><font color="#E5E5E5"> now</font>

162
00:07:26,580 --> 00:07:32,520
implementation of external method<font color="#E5E5E5"> like I</font>

163
00:07:29,070 --> 00:07:35,190
said the user gets the camera<font color="#E5E5E5"> gets the</font>

164
00:07:32,520 --> 00:07:37,680
this selector from<font color="#E5E5E5"> the user</font><font color="#CCCCCC"> and like the</font>

165
00:07:35,190 --> 00:07:41,040
driver gets it<font color="#E5E5E5"> it checks if it's not</font>

166
00:07:37,680 --> 00:07:43,080
like too big<font color="#CCCCCC"> it</font><font color="#E5E5E5"> don't fit you</font><font color="#CCCCCC"> but</font>

167
00:07:41,040 --> 00:07:45,240
there's like an array of function in

168
00:07:43,080 --> 00:07:47,490
size of external method count so it

169
00:07:45,240 --> 00:07:49,590
checks<font color="#E5E5E5"> that it's not too big and if it's</font>

170
00:07:47,490 --> 00:07:53,040
<font color="#CCCCCC">okay it gets the</font><font color="#E5E5E5"> appropriate function</font>

171
00:07:49,590 --> 00:07:54,299
<font color="#E5E5E5">from you and then it calls it</font><font color="#CCCCCC"> targets</font>

172
00:07:53,040 --> 00:07:55,980
<font color="#E5E5E5">like I said it's the pointer to the</font>

173
00:07:54,300 --> 00:07:58,290
<font color="#CCCCCC">kernel where</font><font color="#E5E5E5"> F is never used</font>

174
00:07:55,980 --> 00:08:01,020
and then that function<font color="#E5E5E5"> ultimately calls</font>

175
00:07:58,290 --> 00:08:04,290
the appropriate ioctl<font color="#E5E5E5"> so that's the</font>

176
00:08:01,020 --> 00:08:06,570
that's<font color="#CCCCCC"> the driver part the user</font><font color="#E5E5E5"> part and</font>

177
00:08:04,290 --> 00:08:09,420
that's<font color="#E5E5E5"> the function</font><font color="#CCCCCC"> we call before</font><font color="#E5E5E5"> you</font>

178
00:08:06,570 --> 00:08:14,190
get a<font color="#E5E5E5"> connection to the driver like</font>

179
00:08:09,420 --> 00:08:17,790
handle then the user puts the input data

180
00:08:14,190 --> 00:08:20,070
<font color="#E5E5E5">and expects to receive output data calls</font>

181
00:08:17,790 --> 00:08:21,990
the<font color="#CCCCCC"> function we said before</font><font color="#E5E5E5"> this all the</font>

182
00:08:20,070 --> 00:08:25,200
<font color="#CCCCCC">arguments</font><font color="#E5E5E5"> so in that case it's called</font>

183
00:08:21,990 --> 00:08:28,220
the<font color="#E5E5E5"> first function with an input</font><font color="#CCCCCC"> buffer</font>

184
00:08:25,200 --> 00:08:34,080
of<font color="#CCCCCC"> eight bytes</font><font color="#E5E5E5"> and an output buffer of</font>

185
00:08:28,220 --> 00:08:36,270
four bytes so like you<font color="#E5E5E5"> said you call the</font>

186
00:08:34,080 --> 00:08:39,120
first function so the kernel ultimately

187
00:08:36,270 --> 00:08:40,829
calls<font color="#E5E5E5"> the first function which you</font>

188
00:08:39,120 --> 00:08:44,010
cannot see<font color="#E5E5E5"> you but it's eight input</font>

189
00:08:40,830 --> 00:08:46,800
bytes<font color="#E5E5E5"> and for output bytes</font><font color="#CCCCCC"> and that's</font>

190
00:08:44,010 --> 00:08:49,110
<font color="#E5E5E5">what that's like the at the number from</font>

191
00:08:46,800 --> 00:08:51,270
<font color="#E5E5E5">the</font><font color="#CCCCCC"> user</font><font color="#E5E5E5"> and ultimately that's a</font>

192
00:08:49,110 --> 00:08:54,630
<font color="#E5E5E5">function that is</font><font color="#CCCCCC"> being</font><font color="#E5E5E5"> called so again</font>

193
00:08:51,270 --> 00:08:56,880
how it looks like<font color="#E5E5E5"> from a top view the</font>

194
00:08:54,630 --> 00:09:00,300
user calls the i/o<font color="#E5E5E5"> Connect</font><font color="#CCCCCC"> call method</font>

195
00:08:56,880 --> 00:09:03,070
which is B which calls IO<font color="#E5E5E5"> Connect method</font>

196
00:09:00,300 --> 00:09:05,349
it's a<font color="#CCCCCC"> medium function it's realized</font>

197
00:09:03,070 --> 00:09:08,290
data to be sent to<font color="#E5E5E5"> the colonel the</font>

198
00:09:05,350 --> 00:09:11,350
colonel receives it in<font color="#CCCCCC"> this function</font>

199
00:09:08,290 --> 00:09:13,180
<font color="#E5E5E5">uncie</font><font color="#CCCCCC"> realizes the data calls this</font>

200
00:09:11,350 --> 00:09:15,010
function which<font color="#CCCCCC"> ultimately looks up the</font>

201
00:09:13,180 --> 00:09:17,680
driver and then the appropriate<font color="#CCCCCC"> driver</font>

202
00:09:15,010 --> 00:09:21,460
<font color="#E5E5E5">is being called that's how you</font>

203
00:09:17,680 --> 00:09:23,800
communicate with iokit drivers<font color="#E5E5E5"> okay</font>

204
00:09:21,460 --> 00:09:27,610
<font color="#CCCCCC">that's an</font><font color="#E5E5E5"> example from the external</font>

205
00:09:23,800 --> 00:09:31,420
method table<font color="#E5E5E5"> that's like the assembly</font><font color="#CCCCCC"> of</font>

206
00:09:27,610 --> 00:09:34,450
that you see that just<font color="#E5E5E5"> like</font><font color="#CCCCCC"> before</font><font color="#E5E5E5"> there</font>

207
00:09:31,420 --> 00:09:36,819
is<font color="#CCCCCC"> a function pointer</font><font color="#E5E5E5"> and</font><font color="#CCCCCC"> fro</font><font color="#E5E5E5"> integers</font>

208
00:09:34,450 --> 00:09:39,640
that<font color="#E5E5E5"> indicates what point the function</font>

209
00:09:36,820 --> 00:09:42,430
expected to receive so that's an actual

210
00:09:39,640 --> 00:09:46,090
<font color="#E5E5E5">copy from the Apple AV valve</font><font color="#CCCCCC"> Excel</font>

211
00:09:42,430 --> 00:09:47,890
<font color="#E5E5E5">methods table</font><font color="#CCCCCC"> and we will</font><font color="#E5E5E5"> get to more</font>

212
00:09:46,090 --> 00:09:50,830
<font color="#CCCCCC">dotson but that's how it looks from the</font>

213
00:09:47,890 --> 00:09:53,319
assembly<font color="#E5E5E5"> pretty much like the C code so</font>

214
00:09:50,830 --> 00:10:01,270
the vulnerabilities now<font color="#E5E5E5"> now that we know</font>

215
00:09:53,320 --> 00:10:05,830
how<font color="#E5E5E5"> to communicate with</font><font color="#CCCCCC"> IO kids so in my</font>

216
00:10:01,270 --> 00:10:08,319
<font color="#CCCCCC">research I found eight IO kids</font><font color="#E5E5E5"> bugs</font>

217
00:10:05,830 --> 00:10:12,190
which are<font color="#CCCCCC"> killing bugs for everything</font>

218
00:10:08,320 --> 00:10:16,030
and even though which<font color="#E5E5E5"> is nice in my</font>

219
00:10:12,190 --> 00:10:17,830
opinion<font color="#CCCCCC"> and</font><font color="#E5E5E5"> even though the iOS</font><font color="#CCCCCC"> as you</font>

220
00:10:16,030 --> 00:10:20,290
<font color="#E5E5E5">can see most</font><font color="#CCCCCC"> of</font><font color="#E5E5E5"> all abilities were found</font>

221
00:10:17,830 --> 00:10:21,970
in<font color="#CCCCCC"> April AV driver</font><font color="#E5E5E5"> so I'm not going to</font>

222
00:10:20,290 --> 00:10:24,579
get<font color="#E5E5E5"> into the</font><font color="#CCCCCC"> i/o</font><font color="#E5E5E5"> surface here but</font><font color="#CCCCCC"> you</font>

223
00:10:21,970 --> 00:10:26,350
<font color="#E5E5E5">have the actual submission that we</font><font color="#CCCCCC"> have</font>

224
00:10:24,580 --> 00:10:26,710
with sense to Apple so<font color="#CCCCCC"> we can read all</font>

225
00:10:26,350 --> 00:10:28,720
<font color="#E5E5E5">about it</font>

226
00:10:26,710 --> 00:10:30,700
nevertheless in order<font color="#CCCCCC"> to understand</font>

227
00:10:28,720 --> 00:10:33,130
those vulnerabilities<font color="#CCCCCC"> you have to know a</font>

228
00:10:30,700 --> 00:10:36,100
little<font color="#E5E5E5"> bit about</font><font color="#CCCCCC"> our surface so</font><font color="#E5E5E5"> our</font>

229
00:10:33,130 --> 00:10:38,980
<font color="#E5E5E5">surface in</font><font color="#CCCCCC"> 60 seconds our</font><font color="#E5E5E5"> surface is an</font>

230
00:10:36,100 --> 00:10:42,190
object<font color="#E5E5E5"> that is used that was created by</font>

231
00:10:38,980 --> 00:10:44,140
Apple<font color="#E5E5E5"> and ultimately allows processes to</font>

232
00:10:42,190 --> 00:10:46,260
share data between<font color="#E5E5E5"> them it is used</font>

233
00:10:44,140 --> 00:10:49,120
mostly<font color="#E5E5E5"> to share frame buffer data and</font>

234
00:10:46,260 --> 00:10:51,280
the data is<font color="#E5E5E5"> not being sent if I'm</font>

235
00:10:49,120 --> 00:10:53,890
process a and I want to send<font color="#E5E5E5"> data</font><font color="#CCCCCC"> to</font>

236
00:10:51,280 --> 00:10:55,810
process B I'm not actually sending that

237
00:10:53,890 --> 00:10:58,810
data<font color="#E5E5E5"> because all the data is being</font>

238
00:10:55,810 --> 00:11:00,939
mapped to the same<font color="#E5E5E5"> physical page so two</font>

239
00:10:58,810 --> 00:11:02,349
processes have two different virtual

240
00:11:00,940 --> 00:11:04,900
addresses<font color="#E5E5E5"> that point to the same</font>

241
00:11:02,350 --> 00:11:07,060
<font color="#CCCCCC">physical page but if I want</font><font color="#E5E5E5"> to talk</font>

242
00:11:04,900 --> 00:11:10,150
about in<font color="#E5E5E5"> our service object they</font><font color="#CCCCCC"> are all</font>

243
00:11:07,060 --> 00:11:13,510
you<font color="#E5E5E5"> we all</font><font color="#CCCCCC"> talk about talk about them by</font>

244
00:11:10,150 --> 00:11:15,390
IDs<font color="#CCCCCC"> so for example I'm creating an</font>

245
00:11:13,510 --> 00:11:16,920
<font color="#CCCCCC">entire surface</font><font color="#E5E5E5"> up</font>

246
00:11:15,390 --> 00:11:18,930
the killer tells me okay you have

247
00:11:16,920 --> 00:11:22,170
<font color="#E5E5E5">another surface</font><font color="#CCCCCC"> object it's ID is</font><font color="#E5E5E5"> five</font>

248
00:11:18,930 --> 00:11:25,229
so if I want to<font color="#E5E5E5"> tell our process to to</font>

249
00:11:22,170 --> 00:11:27,270
use my data and<font color="#CCCCCC"> send</font><font color="#E5E5E5"> him</font><font color="#CCCCCC"> back at</font><font color="#E5E5E5"> the</font>

250
00:11:25,230 --> 00:11:29,550
<font color="#E5E5E5">number five and just then it tells the</font>

251
00:11:27,270 --> 00:11:32,910
<font color="#E5E5E5">kernel to do stuff on I have surfaced</font>

252
00:11:29,550 --> 00:11:36,170
<font color="#CCCCCC">eighty five so that's how it works</font><font color="#E5E5E5"> again</font>

253
00:11:32,910 --> 00:11:41,189
<font color="#E5E5E5">mainly</font><font color="#CCCCCC"> a mechanism to transfer</font><font color="#E5E5E5"> data so</font>

254
00:11:36,170 --> 00:11:44,130
what is Apple<font color="#CCCCCC"> IV driver so every driver</font>

255
00:11:41,190 --> 00:11:45,810
is responsible<font color="#CCCCCC"> for hardware accelerated</font>

256
00:11:44,130 --> 00:11:47,939
video<font color="#E5E5E5"> encoding in iOS</font>

257
00:11:45,810 --> 00:11:50,400
unfortunately there's absolutely no

258
00:11:47,940 --> 00:11:55,550
information<font color="#CCCCCC"> about</font><font color="#E5E5E5"> it</font><font color="#CCCCCC"> on the Internet</font>

259
00:11:50,400 --> 00:11:59,430
<font color="#E5E5E5">and like most of the</font><font color="#CCCCCC"> iokit drivers</font>

260
00:11:55,550 --> 00:12:02,900
there's also no source code which means

261
00:11:59,430 --> 00:12:06,029
that I had<font color="#CCCCCC"> to reverse engineer it so</font>

262
00:12:02,900 --> 00:12:08,040
<font color="#E5E5E5">like I showed before that's the external</font>

263
00:12:06,029 --> 00:12:11,070
methods table that's the<font color="#E5E5E5"> end point to</font>

264
00:12:08,040 --> 00:12:13,800
communicate with IO IO<font color="#CCCCCC"> kit drivers I</font>

265
00:12:11,070 --> 00:12:17,070
removed some<font color="#CCCCCC"> of the integers here</font><font color="#E5E5E5"> and so</font>

266
00:12:13,800 --> 00:12:18,660
you can see it<font color="#CCCCCC"> in to our</font><font color="#E5E5E5"> table and</font><font color="#CCCCCC"> the</font>

267
00:12:17,070 --> 00:12:21,930
first<font color="#CCCCCC"> thing that</font><font color="#E5E5E5"> pops to my mind when I</font>

268
00:12:18,660 --> 00:12:24,420
saw that was function called<font color="#CCCCCC"> I I named</font>

269
00:12:21,930 --> 00:12:26,790
it set session<font color="#E5E5E5"> settings from the prints</font>

270
00:12:24,420 --> 00:12:30,750
<font color="#E5E5E5">that</font><font color="#CCCCCC"> were</font><font color="#E5E5E5"> in the function it received</font>

271
00:12:26,790 --> 00:12:34,620
<font color="#E5E5E5">four</font><font color="#CCCCCC"> zero four seven zero bytes</font><font color="#E5E5E5"> as an</font>

272
00:12:30,750 --> 00:12:36,779
input data and gave you two<font color="#E5E5E5"> EBIT</font><font color="#CCCCCC"> zero</font>

273
00:12:34,620 --> 00:12:40,350
bytes which is a lot for an<font color="#E5E5E5"> eye of CTL</font>

274
00:12:36,779 --> 00:12:43,800
in every platform<font color="#CCCCCC"> not just iOS so let's</font>

275
00:12:40,350 --> 00:12:47,880
<font color="#CCCCCC">starts</font><font color="#E5E5E5"> reverse engineering it x1 is a</font>

276
00:12:43,800 --> 00:12:51,060
pointer<font color="#CCCCCC"> to the user</font><font color="#E5E5E5"> inputs buffer and x2</font>

277
00:12:47,880 --> 00:12:53,370
is a pointer to<font color="#E5E5E5"> a buffer</font><font color="#CCCCCC"> that</font><font color="#E5E5E5"> upon the</font>

278
00:12:51,060 --> 00:12:56,719
<font color="#E5E5E5">successor function that data will be</font>

279
00:12:53,370 --> 00:12:59,339
copied back to the user mode so let's

280
00:12:56,720 --> 00:13:01,860
reverse engineer<font color="#CCCCCC"> like I</font><font color="#E5E5E5"> removed most of</font>

281
00:12:59,339 --> 00:13:06,870
<font color="#CCCCCC">them known in important stuff here</font><font color="#E5E5E5"> but</font>

282
00:13:01,860 --> 00:13:10,260
let's start reversing that<font color="#E5E5E5"> so</font><font color="#CCCCCC"> x19 is</font><font color="#E5E5E5"> the</font>

283
00:13:06,870 --> 00:13:12,660
input<font color="#E5E5E5"> buffer from the user X xx is the</font>

284
00:13:10,260 --> 00:13:14,490
pointer to<font color="#CCCCCC"> the i/o useful</font><font color="#E5E5E5"> client</font>

285
00:13:12,660 --> 00:13:17,040
connection that<font color="#E5E5E5"> way I mentioned</font><font color="#CCCCCC"> before</font>

286
00:13:14,490 --> 00:13:19,980
<font color="#E5E5E5">so what we see here</font><font color="#CCCCCC"> is that</font><font color="#E5E5E5"> the</font><font color="#CCCCCC"> kernel</font>

287
00:13:17,040 --> 00:13:23,790
obtains<font color="#CCCCCC"> a pointer</font><font color="#E5E5E5"> from the input buffer</font>

288
00:13:19,980 --> 00:13:27,360
<font color="#E5E5E5">on offset</font><font color="#CCCCCC"> one seven eight we are not</font>

289
00:13:23,790 --> 00:13:29,189
sure<font color="#E5E5E5"> yet what's that if it's not null</font><font color="#CCCCCC"> it</font>

290
00:13:27,360 --> 00:13:33,329
jumps here

291
00:13:29,190 --> 00:13:36,089
and if it's now<font color="#E5E5E5"> what it does is it's</font>

292
00:13:33,329 --> 00:13:39,930
also fetches a surface ID from<font color="#CCCCCC"> the user</font>

293
00:13:36,089 --> 00:13:42,180
<font color="#E5E5E5">and gets the task</font><font color="#CCCCCC"> that actually sends</font>

294
00:13:39,930 --> 00:13:44,790
that<font color="#E5E5E5"> and it fetches</font><font color="#CCCCCC"> the i/o surface</font>

295
00:13:42,180 --> 00:13:46,680
<font color="#E5E5E5">kernel pointer from that ID and</font>

296
00:13:44,790 --> 00:13:48,870
obviously that's the kernel pointer the

297
00:13:46,680 --> 00:13:50,910
user is not supposed to have any access

298
00:13:48,870 --> 00:13:52,709
or it doesn't<font color="#CCCCCC"> it's not</font><font color="#E5E5E5"> supposed to have</font>

299
00:13:50,910 --> 00:13:55,589
anything<font color="#E5E5E5"> to</font><font color="#CCCCCC"> do with</font><font color="#E5E5E5"> that camel pointer</font>

300
00:13:52,709 --> 00:13:57,479
but surprisingly<font color="#E5E5E5"> you see that there</font>

301
00:13:55,589 --> 00:14:00,689
<font color="#CCCCCC">isn't completely no distinguish between</font>

302
00:13:57,480 --> 00:14:02,699
what the user<font color="#E5E5E5"> gives a kernel pointer and</font>

303
00:14:00,689 --> 00:14:05,219
what the<font color="#CCCCCC"> colonel</font><font color="#E5E5E5"> gets from</font><font color="#CCCCCC"> that function</font>

304
00:14:02,699 --> 00:14:07,829
<font color="#E5E5E5">which means that if</font><font color="#CCCCCC"> I</font><font color="#E5E5E5"> use that</font><font color="#CCCCCC"> I can</font>

305
00:14:05,220 --> 00:14:09,839
just<font color="#E5E5E5"> supply any channel pointer and</font><font color="#CCCCCC"> the</font>

306
00:14:07,829 --> 00:14:13,229
<font color="#E5E5E5">cannot be</font><font color="#CCCCCC"> treated just</font><font color="#E5E5E5"> like if it was an</font>

307
00:14:09,839 --> 00:14:16,379
<font color="#CCCCCC">i/o surface</font><font color="#E5E5E5"> object and at that point I</font>

308
00:14:13,230 --> 00:14:19,290
started<font color="#CCCCCC"> to</font><font color="#E5E5E5"> be super happy so again what</font>

309
00:14:16,379 --> 00:14:22,980
we had<font color="#E5E5E5"> here we could supply any kernel</font>

310
00:14:19,290 --> 00:14:26,040
address to the driver no limitations at

311
00:14:22,980 --> 00:14:29,220
all and if I wouldn't<font color="#E5E5E5"> consider this map</font>

312
00:14:26,040 --> 00:14:30,509
like panning<font color="#CCCCCC"> um</font><font color="#E5E5E5"> I could also</font><font color="#CCCCCC"> put user</font>

313
00:14:29,220 --> 00:14:33,209
<font color="#CCCCCC">mode</font><font color="#E5E5E5"> addresses and</font><font color="#CCCCCC"> that kernel would</font>

314
00:14:30,509 --> 00:14:34,860
<font color="#E5E5E5">read it just like</font><font color="#CCCCCC"> anal objects</font><font color="#E5E5E5"> and if</font>

315
00:14:33,209 --> 00:14:37,079
I'm not supplying it it just goes

316
00:14:34,860 --> 00:14:39,269
through the<font color="#CCCCCC"> traditional way of getting</font>

317
00:14:37,079 --> 00:14:42,029
the<font color="#E5E5E5"> i/o surface ID and fetching the</font>

318
00:14:39,269 --> 00:14:45,420
kernel pointer from<font color="#E5E5E5"> that now</font><font color="#CCCCCC"> what was</font>

319
00:14:42,029 --> 00:14:48,720
surprising in<font color="#CCCCCC"> which weird for me is why</font>

320
00:14:45,420 --> 00:14:51,360
the hell did<font color="#CCCCCC"> I put a way to digitally be</font>

321
00:14:48,720 --> 00:14:53,730
<font color="#CCCCCC">led user give channel addresses and then</font>

322
00:14:51,360 --> 00:14:55,829
<font color="#CCCCCC">I then I thought okay there's probably a</font>

323
00:14:53,730 --> 00:14:59,279
<font color="#CCCCCC">way</font><font color="#E5E5E5"> to actually fetch those kernel</font>

324
00:14:55,829 --> 00:15:01,380
pointers because this if they gave you a

325
00:14:59,279 --> 00:15:03,180
way<font color="#CCCCCC"> to provide general pointers</font><font color="#E5E5E5"> they</font>

326
00:15:01,380 --> 00:15:06,120
probably provide<font color="#CCCCCC"> a way to get those</font>

327
00:15:03,180 --> 00:15:08,370
pointers and<font color="#E5E5E5"> I was right</font>

328
00:15:06,120 --> 00:15:11,310
select<font color="#CCCCCC"> Oh</font><font color="#E5E5E5"> number seven like that's the</font>

329
00:15:08,370 --> 00:15:14,699
idea we<font color="#E5E5E5"> spoke about before and we see</font>

330
00:15:11,310 --> 00:15:17,399
that<font color="#E5E5E5"> we</font><font color="#CCCCCC"> have the same more or</font><font color="#E5E5E5"> less the</font>

331
00:15:14,699 --> 00:15:20,639
same code like before<font color="#E5E5E5"> we supply the</font>

332
00:15:17,399 --> 00:15:23,579
kernel with an<font color="#E5E5E5"> i/o surface ID it puts it</font>

333
00:15:20,639 --> 00:15:25,740
in<font color="#CCCCCC"> that offset which is also the input</font>

334
00:15:23,579 --> 00:15:28,888
<font color="#CCCCCC">buffer but the input buffer</font><font color="#E5E5E5"> is</font><font color="#CCCCCC"> not a</font>

335
00:15:25,740 --> 00:15:30,689
mapping to the user<font color="#E5E5E5"> so it's just a copy</font>

336
00:15:28,889 --> 00:15:34,079
<font color="#E5E5E5">so it's not really meaningful in that</font>

337
00:15:30,689 --> 00:15:36,029
<font color="#E5E5E5">case but surprisingly</font><font color="#CCCCCC"> it's takes the</font>

338
00:15:34,079 --> 00:15:39,149
pointer is just set in the input<font color="#CCCCCC"> buffer</font>

339
00:15:36,029 --> 00:15:42,350
and puts it in<font color="#E5E5E5"> the output</font><font color="#CCCCCC"> buffer so not</font>

340
00:15:39,149 --> 00:15:44,600
only we can put any i/o surface care

341
00:15:42,350 --> 00:15:46,910
point<font color="#E5E5E5"> not</font><font color="#CCCCCC"> only we can</font><font color="#E5E5E5"> supply any eyes of</font>

342
00:15:44,600 --> 00:15:50,360
eyes of a<font color="#E5E5E5"> scanner pointer to the driver</font>

343
00:15:46,910 --> 00:15:53,540
<font color="#E5E5E5">but you also get a</font><font color="#CCCCCC"> kernel pointer</font><font color="#E5E5E5"> from</font>

344
00:15:50,360 --> 00:15:55,970
<font color="#CCCCCC">any i/o surface ID we have which is a</font>

345
00:15:53,540 --> 00:15:58,790
very cool and<font color="#E5E5E5"> deterministic information</font>

346
00:15:55,970 --> 00:16:01,820
is closed<font color="#E5E5E5"> a robot</font><font color="#CCCCCC"> so what do we</font><font color="#E5E5E5"> have so</font>

347
00:15:58,790 --> 00:16:04,730
<font color="#CCCCCC">far</font><font color="#E5E5E5"> because</font><font color="#CCCCCC"> we can fake any other</font>

348
00:16:01,820 --> 00:16:07,970
<font color="#CCCCCC">surface object</font><font color="#E5E5E5"> we can hijack the kernel</font>

349
00:16:04,730 --> 00:16:10,460
code execution<font color="#E5E5E5"> because it's in C++</font><font color="#CCCCCC"> so it</font>

350
00:16:07,970 --> 00:16:12,980
has<font color="#CCCCCC"> V tables so it's pretty pretty</font><font color="#E5E5E5"> easy</font>

351
00:16:10,460 --> 00:16:15,280
to just<font color="#E5E5E5"> put an</font><font color="#CCCCCC"> arbitrary</font><font color="#E5E5E5"> address and you</font>

352
00:16:12,980 --> 00:16:18,470
<font color="#CCCCCC">cannot</font><font color="#E5E5E5"> treat it like a normal vtable and</font>

353
00:16:15,280 --> 00:16:20,180
yourself an interesting<font color="#E5E5E5"> heap in for a</font>

354
00:16:18,470 --> 00:16:22,910
vulnerability we can get the<font color="#E5E5E5"> kernel</font>

355
00:16:20,180 --> 00:16:28,250
pointer of any other surface object<font color="#E5E5E5"> now</font>

356
00:16:22,910 --> 00:16:32,240
the thing is a bill<font color="#E5E5E5"> introduced in</font><font color="#CCCCCC"> ioi</font>

357
00:16:28,250 --> 00:16:35,630
<font color="#CCCCCC">phone 7 no mitigation called</font>

358
00:16:32,240 --> 00:16:37,940
<font color="#CCCCCC">snap open</font><font color="#E5E5E5"> which prevents the kernel from</font>

359
00:16:35,630 --> 00:16:41,600
<font color="#E5E5E5">the</font><font color="#CCCCCC"> reference thing</font><font color="#E5E5E5"> using more data and</font>

360
00:16:37,940 --> 00:16:43,430
I intend to bypass that<font color="#E5E5E5"> so a hippie</font>

361
00:16:41,600 --> 00:16:46,400
ontology is very necessary in<font color="#CCCCCC"> that case</font>

362
00:16:43,430 --> 00:16:48,439
because<font color="#CCCCCC"> we cannot put user addresses now</font>

363
00:16:46,400 --> 00:16:51,590
the only thing we means to chain that

364
00:16:48,440 --> 00:16:55,370
<font color="#E5E5E5">and get in and</font><font color="#CCCCCC"> pone</font><font color="#E5E5E5"> the kernel is a</font>

365
00:16:51,590 --> 00:16:58,460
kernel based<font color="#E5E5E5"> info link because it was so</font>

366
00:16:55,370 --> 00:17:02,840
bad till now<font color="#CCCCCC"> I had my hopes in that</font>

367
00:16:58,460 --> 00:17:04,460
driver<font color="#E5E5E5"> as well so it's some sort of</font>

368
00:17:02,840 --> 00:17:07,130
<font color="#CCCCCC">pointing so that all the external</font>

369
00:17:04,460 --> 00:17:10,490
methods in the driver gets to them

370
00:17:07,130 --> 00:17:12,500
<font color="#CCCCCC">eventually to the same place</font><font color="#E5E5E5"> to some</font>

371
00:17:10,490 --> 00:17:14,329
function<font color="#CCCCCC"> which is very big</font><font color="#E5E5E5"> but</font>

372
00:17:12,500 --> 00:17:17,270
nevertheless I had<font color="#CCCCCC"> reverse engineer</font><font color="#E5E5E5"> it</font>

373
00:17:14,329 --> 00:17:21,790
because I<font color="#E5E5E5"> believe it will give me the</font>

374
00:17:17,270 --> 00:17:25,250
kernel base info I needed so let's start

375
00:17:21,790 --> 00:17:29,149
<font color="#CCCCCC">X 22</font><font color="#E5E5E5"> is the</font><font color="#CCCCCC"> user client communication</font>

376
00:17:25,250 --> 00:17:30,470
and<font color="#CCCCCC"> X okay X</font><font color="#E5E5E5"> 0 is the egg</font><font color="#CCCCCC"> 20 is the</font>

377
00:17:29,150 --> 00:17:31,750
<font color="#E5E5E5">driver you</font><font color="#CCCCCC"> don't see it because the</font>

378
00:17:30,470 --> 00:17:34,490
<font color="#CCCCCC">resolution is not</font><font color="#E5E5E5"> good</font>

379
00:17:31,750 --> 00:17:36,800
x.25 is our input buffer and that's

380
00:17:34,490 --> 00:17:39,020
what's interesting<font color="#E5E5E5"> from for us for now</font>

381
00:17:36,800 --> 00:17:42,340
so it's some<font color="#E5E5E5"> sort of point</font>

382
00:17:39,020 --> 00:17:44,930
I see that using<font color="#E5E5E5"> the supplied our</font>

383
00:17:42,340 --> 00:17:47,449
<font color="#E5E5E5">surface object we gave them before</font>

384
00:17:44,930 --> 00:17:49,400
because<font color="#E5E5E5"> X 25 is input buffer from the</font>

385
00:17:47,450 --> 00:17:52,040
user so it's some<font color="#E5E5E5"> soft point so that it</font>

386
00:17:49,400 --> 00:17:54,530
takes an<font color="#E5E5E5"> hour surface object that's we</font>

387
00:17:52,040 --> 00:17:55,830
<font color="#E5E5E5">as the use</font><font color="#CCCCCC"> of supply and like I said</font>

388
00:17:54,530 --> 00:17:59,100
<font color="#CCCCCC">before IO surface</font>

389
00:17:55,830 --> 00:18:01,470
<font color="#E5E5E5">is</font><font color="#CCCCCC"> the mechanism</font><font color="#E5E5E5"> to transfer data so it</font>

390
00:17:59,100 --> 00:18:05,189
just<font color="#CCCCCC"> Maps that data into a</font><font color="#E5E5E5"> kernel</font>

391
00:18:01,470 --> 00:18:08,039
address<font color="#E5E5E5"> so at that point</font><font color="#CCCCCC"> it's 26 points</font>

392
00:18:05,190 --> 00:18:10,350
to a<font color="#E5E5E5"> buffer which is just a mapping to</font>

393
00:18:08,039 --> 00:18:13,559
the user mode so<font color="#CCCCCC"> as the user</font><font color="#E5E5E5"> I can not</font>

394
00:18:10,350 --> 00:18:15,600
only control what's here<font color="#CCCCCC"> now not like</font>

395
00:18:13,559 --> 00:18:17,340
<font color="#E5E5E5">what's the content of</font><font color="#CCCCCC"> that address but I</font>

396
00:18:15,600 --> 00:18:20,908
can also modify it<font color="#E5E5E5"> because it's just a</font>

397
00:18:17,340 --> 00:18:23,639
mapping it's not copying so I can change

398
00:18:20,909 --> 00:18:26,000
that<font color="#CCCCCC"> and the kernel doesn't even care</font><font color="#E5E5E5"> so</font>

399
00:18:23,640 --> 00:18:28,950
it was a<font color="#E5E5E5"> little bit weird</font><font color="#CCCCCC"> for me because</font>

400
00:18:26,000 --> 00:18:30,659
they can<font color="#E5E5E5"> actually expect the user to</font>

401
00:18:28,950 --> 00:18:33,450
give a lot of<font color="#E5E5E5"> information</font><font color="#CCCCCC"> in that</font>

402
00:18:30,659 --> 00:18:35,250
<font color="#E5E5E5">mapping but it did consider the fact</font>

403
00:18:33,450 --> 00:18:37,380
that because<font color="#E5E5E5"> it's mapping</font><font color="#CCCCCC"> we can just</font>

404
00:18:35,250 --> 00:18:40,820
change<font color="#E5E5E5"> it while the kernel uses it and</font>

405
00:18:37,380 --> 00:18:44,340
that gives us a lot<font color="#CCCCCC"> of opportunities</font><font color="#E5E5E5"> so</font>

406
00:18:40,820 --> 00:18:47,850
<font color="#E5E5E5">continuing reverse engineering</font><font color="#CCCCCC"> at some</font>

407
00:18:44,340 --> 00:18:49,590
sort<font color="#E5E5E5"> of point we see that here</font><font color="#CCCCCC"> x-23 it's</font>

408
00:18:47,850 --> 00:18:52,529
the same mapping<font color="#E5E5E5"> like before</font><font color="#CCCCCC"> that's</font><font color="#E5E5E5"> like</font>

409
00:18:49,590 --> 00:18:55,379
<font color="#E5E5E5">just fetching that from some general</font>

410
00:18:52,529 --> 00:18:57,600
global struct<font color="#E5E5E5"> and</font><font color="#CCCCCC"> then that so that's</font>

411
00:18:55,380 --> 00:18:59,789
the same mapping<font color="#E5E5E5"> like before we have</font>

412
00:18:57,600 --> 00:19:02,490
<font color="#CCCCCC">five it's some sort</font><font color="#E5E5E5"> of point we see that</font>

413
00:18:59,789 --> 00:19:06,120
it there's like<font color="#E5E5E5"> a switch case which we</font>

414
00:19:02,490 --> 00:19:08,100
can control its flow<font color="#E5E5E5"> most of them do</font><font color="#CCCCCC"> the</font>

415
00:19:06,120 --> 00:19:10,370
<font color="#CCCCCC">same</font><font color="#E5E5E5"> thing but for some reason they give</font>

416
00:19:08,100 --> 00:19:13,830
you four different<font color="#CCCCCC"> five</font><font color="#E5E5E5"> different</font>

417
00:19:10,370 --> 00:19:16,529
different options now a jump forward a

418
00:19:13,830 --> 00:19:19,350
little<font color="#E5E5E5"> bit but an example for</font>

419
00:19:16,529 --> 00:19:22,860
vulnerability that I saw there<font color="#E5E5E5"> so like I</font>

420
00:19:19,350 --> 00:19:24,990
said<font color="#CCCCCC"> X 23</font><font color="#E5E5E5"> is a mapping to the user</font><font color="#CCCCCC"> so we</font>

421
00:19:22,860 --> 00:19:27,090
can just put any<font color="#CCCCCC"> kind of address we</font><font color="#E5E5E5"> want</font>

422
00:19:24,990 --> 00:19:29,730
here if<font color="#CCCCCC"> we don't</font><font color="#E5E5E5"> put anything it just</font>

423
00:19:27,090 --> 00:19:34,439
allocates data and gives us the address

424
00:19:29,730 --> 00:19:37,500
<font color="#CCCCCC">and if we do put an address a pointer</font>

425
00:19:34,440 --> 00:19:39,269
there it just<font color="#E5E5E5"> knows the first 28 bytes</font>

426
00:19:37,500 --> 00:19:43,940
of that pointer which is a very

427
00:19:39,269 --> 00:19:46,380
impressive<font color="#E5E5E5"> and powerful override but</font>

428
00:19:43,940 --> 00:19:50,010
identity<font color="#CCCCCC"> we</font><font color="#E5E5E5"> use it</font><font color="#CCCCCC"> because there were</font>

429
00:19:46,380 --> 00:19:52,830
much better bugs<font color="#E5E5E5"> so at some sort of</font>

430
00:19:50,010 --> 00:19:55,139
point<font color="#CCCCCC"> I saw that it loads</font><font color="#E5E5E5"> a lot of</font>

431
00:19:52,830 --> 00:19:58,899
<font color="#E5E5E5">information</font><font color="#CCCCCC"> that I control</font><font color="#E5E5E5"> but the most</font>

432
00:19:55,139 --> 00:20:01,990
important one<font color="#CCCCCC"> of them was the Maps data</font>

433
00:19:58,900 --> 00:20:05,680
<font color="#E5E5E5">it was the map data that I had</font><font color="#CCCCCC"> liked</font>

434
00:20:01,990 --> 00:20:07,780
<font color="#CCCCCC">x.25</font><font color="#E5E5E5"> and it gave it gave it stuff</font><font color="#CCCCCC"> it</font>

435
00:20:05,680 --> 00:20:10,480
<font color="#CCCCCC">gave it to a function called map</font><font color="#E5E5E5"> y UV</font>

436
00:20:07,780 --> 00:20:12,280
input from<font color="#CCCCCC"> CSI D</font><font color="#E5E5E5"> again it's my</font>

437
00:20:10,480 --> 00:20:16,270
assumption because<font color="#E5E5E5"> of the logs obviously</font>

438
00:20:12,280 --> 00:20:18,220
don't<font color="#E5E5E5"> have any symbols there so actually</font>

439
00:20:16,270 --> 00:20:20,680
I didn't put the<font color="#CCCCCC"> Assembly of</font><font color="#E5E5E5"> that</font>

440
00:20:18,220 --> 00:20:23,250
because it's a little<font color="#E5E5E5"> bit confusing</font><font color="#CCCCCC"> I'll</font>

441
00:20:20,680 --> 00:20:32,320
just I just put

442
00:20:23,250 --> 00:20:34,900
C code so what<font color="#E5E5E5"> we see here</font><font color="#CCCCCC"> is that the</font>

443
00:20:32,320 --> 00:20:38,020
<font color="#CCCCCC">Isle surface buffer we see that we have</font>

444
00:20:34,900 --> 00:20:40,210
<font color="#CCCCCC">that's</font><font color="#E5E5E5"> our mapping and it puts here</font>

445
00:20:38,020 --> 00:20:44,260
something called<font color="#CCCCCC"> a surface buffer</font>

446
00:20:40,210 --> 00:20:46,780
manager but it<font color="#CCCCCC"> loads again from our from</font>

447
00:20:44,260 --> 00:20:49,120
that<font color="#CCCCCC"> specific address so there's a short</font>

448
00:20:46,780 --> 00:20:51,129
race condition here because we can put

449
00:20:49,120 --> 00:20:53,080
anything<font color="#CCCCCC"> we want in controllable pointer</font>

450
00:20:51,130 --> 00:20:56,680
we can put any address here because it's

451
00:20:53,080 --> 00:20:59,199
<font color="#E5E5E5">an it's the mapping so I can get I can</font>

452
00:20:56,680 --> 00:21:02,770
<font color="#CCCCCC">put you any address I</font><font color="#E5E5E5"> want and then it</font>

453
00:20:59,200 --> 00:21:04,900
divorces<font color="#CCCCCC"> that address plus if you</font><font color="#E5E5E5"> have</font>

454
00:21:02,770 --> 00:21:06,760
plus an offset it puts it back in the

455
00:21:04,900 --> 00:21:10,030
pointer<font color="#E5E5E5"> it does that</font><font color="#CCCCCC"> for another</font><font color="#E5E5E5"> of</font>

456
00:21:06,760 --> 00:21:12,970
offset it does again<font color="#E5E5E5"> but eventually it</font>

457
00:21:10,030 --> 00:21:17,590
checks<font color="#E5E5E5"> that for one of the those offsets</font>

458
00:21:12,970 --> 00:21:21,280
that the first 32 bits are not<font color="#CCCCCC"> a not</font>

459
00:21:17,590 --> 00:21:23,800
null<font color="#CCCCCC"> if the not null</font><font color="#E5E5E5"> the exploit gets</font>

460
00:21:21,280 --> 00:21:25,960
screwed up and the kernel panics and

461
00:21:23,800 --> 00:21:28,510
which means we have an interesting

462
00:21:25,960 --> 00:21:31,150
primitive here<font color="#E5E5E5"> because we can read that</font>

463
00:21:28,510 --> 00:21:33,730
<font color="#E5E5E5">content here and we control any address</font>

464
00:21:31,150 --> 00:21:35,530
we want<font color="#E5E5E5"> so we can read we can</font><font color="#CCCCCC"> actually</font>

465
00:21:33,730 --> 00:21:38,320
read a lot of address<font color="#CCCCCC"> but</font><font color="#E5E5E5"> we can read</font>

466
00:21:35,530 --> 00:21:39,850
any address we want<font color="#CCCCCC"> but almost as we any</font>

467
00:21:38,320 --> 00:21:43,300
other<font color="#CCCCCC"> three wants because of that rule</font>

468
00:21:39,850 --> 00:21:46,929
so to summarize<font color="#E5E5E5"> our primitive and if you</font>

469
00:21:43,300 --> 00:21:49,950
want to leak a address<font color="#E5E5E5"> six at least one</font>

470
00:21:46,930 --> 00:21:52,660
of those conditions<font color="#E5E5E5"> must be true</font><font color="#CCCCCC"> and</font>

471
00:21:49,950 --> 00:21:55,360
that's that's because mathematically<font color="#E5E5E5"> we</font>

472
00:21:52,660 --> 00:21:57,130
see if you<font color="#E5E5E5"> can</font><font color="#CCCCCC"> calculate the offset here</font>

473
00:21:55,360 --> 00:22:00,370
you see that if I<font color="#E5E5E5"> want to lick a</font>

474
00:21:57,130 --> 00:22:02,230
specific address<font color="#E5E5E5"> mathematically it works</font>

475
00:22:00,370 --> 00:22:05,530
that one of those has to<font color="#E5E5E5"> be true because</font>

476
00:22:02,230 --> 00:22:08,410
of<font color="#E5E5E5"> the high 32 bits</font>

477
00:22:05,530 --> 00:22:11,510
<font color="#CCCCCC">check and</font><font color="#E5E5E5"> of course because it's the</font>

478
00:22:08,410 --> 00:22:14,690
reference for like any other dereference

479
00:22:11,510 --> 00:22:17,210
X must<font color="#CCCCCC"> be a valid channel address now</font>

480
00:22:14,690 --> 00:22:20,120
<font color="#E5E5E5">that's the main exploits</font><font color="#CCCCCC"> we have to find</font>

481
00:22:17,210 --> 00:22:22,279
first<font color="#CCCCCC"> of all find a way</font><font color="#E5E5E5"> to leak a valid</font>

482
00:22:20,120 --> 00:22:24,850
kernel<font color="#E5E5E5"> address which</font><font color="#CCCCCC"> you already have</font>

483
00:22:22,279 --> 00:22:27,350
and then we have to<font color="#E5E5E5"> actually leak</font>

484
00:22:24,850 --> 00:22:31,908
<font color="#E5E5E5">something that will reveal us the kernel</font>

485
00:22:27,350 --> 00:22:35,389
base<font color="#E5E5E5"> so the main exploitation plan first</font>

486
00:22:31,909 --> 00:22:39,950
we<font color="#E5E5E5"> create in our surface</font><font color="#CCCCCC"> object</font><font color="#E5E5E5"> we leak</font>

487
00:22:35,389 --> 00:22:41,449
the surface kernel address using the

488
00:22:39,950 --> 00:22:45,049
info leak that we saw before

489
00:22:41,450 --> 00:22:47,929
then we leaked the our surface<font color="#CCCCCC"> vta will</font>

490
00:22:45,049 --> 00:22:52,370
address which will<font color="#CCCCCC"> help</font><font color="#E5E5E5"> us</font><font color="#CCCCCC"> to calculate</font>

491
00:22:47,929 --> 00:22:57,549
<font color="#E5E5E5">the</font><font color="#CCCCCC"> SLR slide we free the surface we</font>

492
00:22:52,370 --> 00:23:00,559
spray with we spray the kernel<font color="#E5E5E5"> help with</font>

493
00:22:57,549 --> 00:23:03,529
with<font color="#CCCCCC"> our data</font><font color="#E5E5E5"> with the fake</font><font color="#CCCCCC"> vtable</font>

494
00:23:00,559 --> 00:23:06,049
<font color="#CCCCCC">pointer</font><font color="#E5E5E5"> we give the kernel the same</font>

495
00:23:03,529 --> 00:23:08,120
point the same address<font color="#E5E5E5"> because that's</font>

496
00:23:06,049 --> 00:23:11,029
we're using the first vulnerability<font color="#E5E5E5"> the</font>

497
00:23:08,120 --> 00:23:13,908
<font color="#CCCCCC">killer freak thinks that</font><font color="#E5E5E5"> our data is an</font>

498
00:23:11,029 --> 00:23:17,230
<font color="#CCCCCC">hour surface object</font><font color="#E5E5E5"> and then we hijack</font>

499
00:23:13,909 --> 00:23:20,990
the flow job<font color="#E5E5E5"> yet</font><font color="#CCCCCC"> can only write and</font>

500
00:23:17,230 --> 00:23:23,440
profit<font color="#E5E5E5"> so again</font><font color="#CCCCCC"> now we have to leak the</font>

501
00:23:20,990 --> 00:23:26,029
kernel base and that's<font color="#E5E5E5"> what we have so</font>

502
00:23:23,440 --> 00:23:29,840
<font color="#CCCCCC">the first thing we're to do is finding</font>

503
00:23:26,029 --> 00:23:33,639
<font color="#E5E5E5">good and valid kernel address and thanks</font>

504
00:23:29,840 --> 00:23:37,250
to the surface<font color="#E5E5E5"> info leak we have it so</font>

505
00:23:33,639 --> 00:23:39,408
like I<font color="#CCCCCC"> said I want to lick the visible</font>

506
00:23:37,250 --> 00:23:42,429
the<font color="#CCCCCC"> vtable will</font><font color="#E5E5E5"> be slided then I can</font>

507
00:23:39,409 --> 00:23:45,860
calculate the dislike<font color="#E5E5E5"> the SLR</font><font color="#CCCCCC"> slides and</font>

508
00:23:42,429 --> 00:23:49,580
<font color="#E5E5E5">puts actually good pointers so I can</font>

509
00:23:45,860 --> 00:23:54,199
appropriately JH hijack the kernel flow

510
00:23:49,580 --> 00:23:58,189
and that's how the<font color="#E5E5E5"> our surface object</font>

511
00:23:54,200 --> 00:24:03,350
<font color="#E5E5E5">looks like and I want to like the vtable</font>

512
00:23:58,190 --> 00:24:05,840
<font color="#E5E5E5">and as you can</font><font color="#CCCCCC"> see for every for every</font>

513
00:24:03,350 --> 00:24:12,019
<font color="#CCCCCC">off like you</font><font color="#E5E5E5"> can see that's what we</font><font color="#CCCCCC"> have</font>

514
00:24:05,840 --> 00:24:17,209
to do so<font color="#CCCCCC"> 18</font><font color="#E5E5E5"> 1c n</font><font color="#CCCCCC"> 3 C which are all here</font>

515
00:24:12,019 --> 00:24:19,909
and unfortunately<font color="#E5E5E5"> proof surface pointer</font>

516
00:24:17,210 --> 00:24:22,760
is a pointer to the previous surface<font color="#E5E5E5"> in</font>

517
00:24:19,909 --> 00:24:24,799
the list of<font color="#E5E5E5"> our surfaces and unless we</font>

518
00:24:22,760 --> 00:24:25,280
are<font color="#E5E5E5"> the first</font><font color="#CCCCCC"> step</font><font color="#E5E5E5"> surface it's not even</font>

519
00:24:24,799 --> 00:24:27,710
the the

520
00:24:25,280 --> 00:24:30,290
<font color="#E5E5E5">pointer it's</font><font color="#CCCCCC"> a pointer</font><font color="#E5E5E5"> to the driver of</font>

521
00:24:27,710 --> 00:24:32,600
the surface<font color="#E5E5E5"> surfaces</font>

522
00:24:30,290 --> 00:24:37,399
so that's never null<font color="#E5E5E5"> currents memory</font>

523
00:24:32,600 --> 00:24:40,760
region is also never null provided it's

524
00:24:37,400 --> 00:24:42,530
the actual driver to<font color="#E5E5E5"> be to the</font><font color="#CCCCCC"> other</font>

525
00:24:40,760 --> 00:24:44,840
surface<font color="#E5E5E5"> driver so it's also never now</font>

526
00:24:42,530 --> 00:24:47,660
and<font color="#E5E5E5"> memory</font><font color="#CCCCCC"> the scripto is the actual</font>

527
00:24:44,840 --> 00:24:50,179
mapping<font color="#CCCCCC"> so that's like the object that</font>

528
00:24:47,660 --> 00:24:52,970
<font color="#CCCCCC">Hana</font><font color="#E5E5E5"> end of the mapping so that's that's</font>

529
00:24:50,180 --> 00:24:55,330
<font color="#E5E5E5">also never now so plane</font><font color="#CCCCCC"> so our plan</font><font color="#E5E5E5"> to</font>

530
00:24:52,970 --> 00:25:02,060
lick the<font color="#CCCCCC"> vtable of the earth surface</font><font color="#E5E5E5"> is</font>

531
00:24:55,330 --> 00:25:04,669
<font color="#E5E5E5">failed but fortunately</font><font color="#CCCCCC"> our surface is a</font>

532
00:25:02,060 --> 00:25:07,850
very<font color="#CCCCCC"> big object at the beginning and I</font>

533
00:25:04,670 --> 00:25:10,280
thought<font color="#E5E5E5"> about things like leaking</font><font color="#CCCCCC"> the IO</font>

534
00:25:07,850 --> 00:25:13,490
memory<font color="#CCCCCC"> descriptor pointer and lick its V</font>

535
00:25:10,280 --> 00:25:16,040
table and do stuff like<font color="#CCCCCC"> that</font><font color="#E5E5E5"> but</font><font color="#CCCCCC"> I</font>

536
00:25:13,490 --> 00:25:18,410
<font color="#E5E5E5">figured out that even for example</font><font color="#CCCCCC"> I</font>

537
00:25:16,040 --> 00:25:20,870
memory the<font color="#CCCCCC"> scripto</font><font color="#E5E5E5"> doesn't have we</font>

538
00:25:18,410 --> 00:25:23,480
cannot also<font color="#CCCCCC"> leak its V table and so I</font>

539
00:25:20,870 --> 00:25:24,110
<font color="#E5E5E5">decided to stick to the a to further</font>

540
00:25:23,480 --> 00:25:25,670
research

541
00:25:24,110 --> 00:25:30,080
<font color="#E5E5E5">io surface and find more interesting</font>

542
00:25:25,670 --> 00:25:32,240
<font color="#CCCCCC">stuff</font><font color="#E5E5E5"> so</font><font color="#CCCCCC"> I saw there is an object called</font>

543
00:25:30,080 --> 00:25:35,240
<font color="#E5E5E5">IO fence we're not going to get into</font>

544
00:25:32,240 --> 00:25:38,690
that<font color="#CCCCCC"> object but</font><font color="#E5E5E5"> to water</font><font color="#CCCCCC"> audits</font><font color="#E5E5E5"> it's</font>

545
00:25:35,240 --> 00:25:41,000
used for<font color="#E5E5E5"> synchronization</font><font color="#CCCCCC"> with</font><font color="#E5E5E5"> a and it's</font>

546
00:25:38,690 --> 00:25:43,850
a no ii is asian object that<font color="#E5E5E5"> pile</font>

547
00:25:41,000 --> 00:25:48,410
surface uses and there is there's a list

548
00:25:43,850 --> 00:25:50,750
of<font color="#CCCCCC"> io fences and fortunately there's a</font>

549
00:25:48,410 --> 00:25:53,300
lot of data afterwards<font color="#CCCCCC"> in the iowa</font>

550
00:25:50,750 --> 00:25:56,240
surface struct that's how it looks<font color="#E5E5E5"> it</font>

551
00:25:53,300 --> 00:25:59,450
has<font color="#E5E5E5"> four different lists of</font><font color="#CCCCCC"> io fence</font>

552
00:25:56,240 --> 00:26:00,230
objects and a lot<font color="#E5E5E5"> of bulk data</font>

553
00:25:59,450 --> 00:26:03,770
afterwards

554
00:26:00,230 --> 00:26:05,630
now bulk data is completely<font color="#E5E5E5"> controlled</font>

555
00:26:03,770 --> 00:26:08,180
by<font color="#E5E5E5"> us there is an external method</font>

556
00:26:05,630 --> 00:26:10,340
function as we can call on any<font color="#E5E5E5"> other</font>

557
00:26:08,180 --> 00:26:14,750
surface<font color="#CCCCCC"> object and we can put anything</font>

558
00:26:10,340 --> 00:26:17,120
we want here which means<font color="#E5E5E5"> that that that</font>

559
00:26:14,750 --> 00:26:20,450
<font color="#E5E5E5">like I'm talking about all those objects</font>

560
00:26:17,120 --> 00:26:23,149
here which means that<font color="#CCCCCC"> I can</font><font color="#E5E5E5"> leak it</font>

561
00:26:20,450 --> 00:26:24,650
because if I put everything now here if

562
00:26:23,150 --> 00:26:29,420
everything is<font color="#E5E5E5"> going to be not here I can</font>

563
00:26:24,650 --> 00:26:32,550
leak one of the lists and<font color="#CCCCCC"> if</font><font color="#E5E5E5"> Alec the</font>

564
00:26:29,420 --> 00:26:35,730
list<font color="#CCCCCC"> I</font><font color="#E5E5E5"> can get a pointer</font><font color="#CCCCCC"> to an IO fence</font>

565
00:26:32,550 --> 00:26:39,629
object and so let's see how an eye

566
00:26:35,730 --> 00:26:42,660
<font color="#CCCCCC">offence object looks</font><font color="#E5E5E5"> like and so here a</font>

567
00:26:39,630 --> 00:26:47,010
little bit screwed up<font color="#E5E5E5"> but fortunately we</font>

568
00:26:42,660 --> 00:26:50,700
see that if that's<font color="#E5E5E5"> not we can good and</font>

569
00:26:47,010 --> 00:26:52,980
it's always now it's<font color="#E5E5E5"> always zero if it's</font>

570
00:26:50,700 --> 00:26:55,710
in a surface<font color="#CCCCCC"> queue</font><font color="#E5E5E5"> now because we licked</font>

571
00:26:52,980 --> 00:26:58,890
it form a surface<font color="#E5E5E5"> queue we can assume</font>

572
00:26:55,710 --> 00:27:01,320
that<font color="#E5E5E5"> it will always be zero</font><font color="#CCCCCC"> and so we</font>

573
00:26:58,890 --> 00:27:06,450
can lick the eiephants table and we can

574
00:27:01,320 --> 00:27:08,909
<font color="#CCCCCC">calculate</font><font color="#E5E5E5"> the last slide</font><font color="#CCCCCC"> and</font><font color="#E5E5E5"> which means</font>

575
00:27:06,450 --> 00:27:10,950
<font color="#E5E5E5">that</font><font color="#CCCCCC"> our plane can walk now</font><font color="#E5E5E5"> because if</font>

576
00:27:08,910 --> 00:27:15,510
we have<font color="#E5E5E5"> the SLR slide we</font><font color="#CCCCCC"> can continue</font>

577
00:27:10,950 --> 00:27:18,480
<font color="#E5E5E5">with our previous our previous flow and</font>

578
00:27:15,510 --> 00:27:22,710
<font color="#E5E5E5">the other thing you want now I want to</font>

579
00:27:18,480 --> 00:27:25,440
<font color="#CCCCCC">get into the bits of bytes of that stage</font>

580
00:27:22,710 --> 00:27:27,870
<font color="#E5E5E5">because all of that</font><font color="#CCCCCC"> state</font><font color="#E5E5E5"> oh that's even</font>

581
00:27:25,440 --> 00:27:31,740
<font color="#CCCCCC">though I didn't see any anyone leaking</font>

582
00:27:27,870 --> 00:27:33,929
<font color="#E5E5E5">our friends</font><font color="#CCCCCC"> to reveal a slide I didn't</font>

583
00:27:31,740 --> 00:27:36,690
give any<font color="#E5E5E5"> I don't</font><font color="#CCCCCC"> think there's anything</font>

584
00:27:33,930 --> 00:27:38,850
<font color="#CCCCCC">that is gonna be</font><font color="#E5E5E5"> good for</font><font color="#CCCCCC"> a generic</font>

585
00:27:36,690 --> 00:27:40,470
exploitation and there's<font color="#CCCCCC"> there are some</font>

586
00:27:38,850 --> 00:27:44,189
stuff<font color="#E5E5E5"> that I found out which can be</font>

587
00:27:40,470 --> 00:27:49,680
<font color="#E5E5E5">useful for generic iOS use of the freeze</font>

588
00:27:44,190 --> 00:27:52,410
so first of all<font color="#E5E5E5"> yes probably most of you</font>

589
00:27:49,680 --> 00:27:54,540
<font color="#E5E5E5">know</font><font color="#CCCCCC"> Stefan SEO released once in black</font>

590
00:27:52,410 --> 00:27:57,930
hats<font color="#E5E5E5"> at least that's the first time I</font>

591
00:27:54,540 --> 00:28:01,620
saw<font color="#CCCCCC"> it a way to</font><font color="#E5E5E5"> to</font><font color="#CCCCCC"> Feng Shui</font><font color="#E5E5E5"> the kernel</font>

592
00:27:57,930 --> 00:28:04,740
using IO<font color="#E5E5E5"> on</font><font color="#CCCCCC"> serialize XML</font><font color="#E5E5E5"> but I never</font>

593
00:28:01,620 --> 00:28:07,139
saw a way to<font color="#CCCCCC"> first of all persistently</font>

594
00:28:04,740 --> 00:28:09,690
keep the<font color="#E5E5E5"> data in that memory because</font>

595
00:28:07,140 --> 00:28:11,670
usually you would open<font color="#E5E5E5"> a</font><font color="#CCCCCC"> service and the</font>

596
00:28:09,690 --> 00:28:14,310
<font color="#CCCCCC">service would immediately free that data</font>

597
00:28:11,670 --> 00:28:17,310
<font color="#E5E5E5">or it wasn't accessible for many simple</font>

598
00:28:14,310 --> 00:28:20,310
context second of all I wanted<font color="#E5E5E5"> to be</font>

599
00:28:17,310 --> 00:28:22,800
<font color="#CCCCCC">able</font><font color="#E5E5E5"> to spray without any limitation on</font>

600
00:28:20,310 --> 00:28:28,260
what<font color="#E5E5E5"> I'm going to spray so always data</font>

601
00:28:22,800 --> 00:28:30,960
<font color="#E5E5E5">thanks</font><font color="#CCCCCC"> we're gonna</font><font color="#E5E5E5"> work here and finally</font>

602
00:28:28,260 --> 00:28:34,050
<font color="#CCCCCC">I didn't want any limitation on how many</font>

603
00:28:30,960 --> 00:28:36,750
objects I<font color="#E5E5E5"> can spray if we open services</font>

604
00:28:34,050 --> 00:28:38,639
and I<font color="#E5E5E5"> think</font><font color="#CCCCCC"> there's</font><font color="#E5E5E5"> a limit</font><font color="#CCCCCC"> on how many</font>

605
00:28:36,750 --> 00:28:40,440
services we<font color="#CCCCCC"> can actually</font><font color="#E5E5E5"> open not sure</font>

606
00:28:38,640 --> 00:28:45,540
<font color="#E5E5E5">about that but anyway I wanted a</font>

607
00:28:40,440 --> 00:28:49,230
consistent good way to do<font color="#E5E5E5"> that and so</font>

608
00:28:45,540 --> 00:28:52,799
our surface<font color="#CCCCCC"> come to the rescue select Oh</font>

609
00:28:49,230 --> 00:28:55,590
number<font color="#CCCCCC"> nine</font><font color="#E5E5E5"> apparently you can put there</font>

610
00:28:52,799 --> 00:28:59,129
is some dictionary in<font color="#CCCCCC"> IO serve our</font>

611
00:28:55,590 --> 00:29:03,540
surface which calls<font color="#CCCCCC"> always uncivilized</font>

612
00:28:59,130 --> 00:29:06,570
XML<font color="#E5E5E5"> with our data and it gets an object</font>

613
00:29:03,540 --> 00:29:07,139
from<font color="#E5E5E5"> our data like a key and value</font><font color="#CCCCCC"> named</font>

614
00:29:06,570 --> 00:29:10,460
calls

615
00:29:07,140 --> 00:29:13,530
set value which ultimately ultimately

616
00:29:10,460 --> 00:29:16,230
<font color="#E5E5E5">checks if our key is not creation</font>

617
00:29:13,530 --> 00:29:18,660
properties which<font color="#CCCCCC"> is a key that's</font><font color="#E5E5E5"> our</font>

618
00:29:16,230 --> 00:29:22,380
surface preserve for itself and if it's

619
00:29:18,660 --> 00:29:25,650
not it just<font color="#E5E5E5"> puts it in an OS dictionary</font>

620
00:29:22,380 --> 00:29:27,960
<font color="#E5E5E5">which is perfect</font><font color="#CCCCCC"> for us</font><font color="#E5E5E5"> because it means</font>

621
00:29:25,650 --> 00:29:30,690
<font color="#CCCCCC">that</font><font color="#E5E5E5"> first of all it's persistent</font><font color="#CCCCCC"> in the</font>

622
00:29:27,960 --> 00:29:33,900
memory as long as the<font color="#CCCCCC"> i/o surface</font><font color="#E5E5E5"> object</font>

623
00:29:30,690 --> 00:29:35,130
is in<font color="#E5E5E5"> the memory we can equip it's</font><font color="#CCCCCC"> gotta</font>

624
00:29:33,900 --> 00:29:37,440
be in the<font color="#CCCCCC"> memory as long as you want it</font>

625
00:29:35,130 --> 00:29:40,650
<font color="#CCCCCC">to be there is no limitation</font><font color="#E5E5E5"> because</font>

626
00:29:37,440 --> 00:29:44,010
it's always<font color="#E5E5E5"> uncivilized XML and there is</font>

627
00:29:40,650 --> 00:29:47,160
no<font color="#E5E5E5"> limitation on the spread objects but</font>

628
00:29:44,010 --> 00:29:52,049
there is also a nice powerful addition

629
00:29:47,160 --> 00:29:54,600
to that's<font color="#E5E5E5"> free</font><font color="#CCCCCC"> our</font><font color="#E5E5E5"> surface selector</font>

630
00:29:52,049 --> 00:29:57,660
number<font color="#CCCCCC"> 10 gives a</font><font color="#E5E5E5"> very interesting</font>

631
00:29:54,600 --> 00:30:00,090
primitive here we do not only spray<font color="#E5E5E5"> any</font>

632
00:29:57,660 --> 00:30:03,299
data we want but we<font color="#E5E5E5"> can also with read</font>

633
00:30:00,090 --> 00:30:05,970
that data back<font color="#E5E5E5"> which means that</font><font color="#CCCCCC"> ok it</font>

634
00:30:03,299 --> 00:30:09,179
just gets we can supply<font color="#E5E5E5"> the key that we</font>

635
00:30:05,970 --> 00:30:13,440
gave it<font color="#E5E5E5"> it serialize the data and then</font>

636
00:30:09,179 --> 00:30:15,690
it<font color="#E5E5E5"> just fetches the key the object from</font>

637
00:30:13,440 --> 00:30:17,760
before and gives it<font color="#CCCCCC"> back to us which</font>

638
00:30:15,690 --> 00:30:20,100
means that let's say that I have use

639
00:30:17,760 --> 00:30:22,919
after free<font color="#CCCCCC"> I'm screwed I'm spraying the</font>

640
00:30:20,100 --> 00:30:25,530
kernel heap<font color="#CCCCCC"> I can I caught the object</font>

641
00:30:22,919 --> 00:30:27,900
the kennel starts doing stuff on my fake

642
00:30:25,530 --> 00:30:30,418
<font color="#CCCCCC">object for example it can insert it into</font>

643
00:30:27,900 --> 00:30:32,640
a linked list<font color="#CCCCCC"> and</font><font color="#E5E5E5"> then I can read back</font>

644
00:30:30,419 --> 00:30:35,250
<font color="#CCCCCC">the object which means that that spray</font>

645
00:30:32,640 --> 00:30:38,309
can actually save me an info leak

646
00:30:35,250 --> 00:30:40,919
<font color="#E5E5E5">I okay correct I did</font><font color="#CCCCCC"> that's</font><font color="#E5E5E5"> the first</font>

647
00:30:38,309 --> 00:30:42,780
time I saw a spray<font color="#CCCCCC"> that allows you</font><font color="#E5E5E5"> to</font>

648
00:30:40,919 --> 00:30:44,910
read<font color="#E5E5E5"> the object as many times as you</font>

649
00:30:42,780 --> 00:30:46,320
want<font color="#CCCCCC"> so</font><font color="#E5E5E5"> you can spray an object once and</font>

650
00:30:44,910 --> 00:30:49,080
you can<font color="#CCCCCC"> read it as many times as you</font>

651
00:30:46,320 --> 00:30:51,389
want<font color="#E5E5E5"> back to the user mode which is a</font>

652
00:30:49,080 --> 00:30:57,809
very powerful primitive<font color="#E5E5E5"> if you want to</font>

653
00:30:51,390 --> 00:30:59,040
actually spray the kernel heap<font color="#CCCCCC"> so now</font>

654
00:30:57,809 --> 00:31:02,340
<font color="#E5E5E5">the goals that I</font>

655
00:30:59,040 --> 00:31:04,920
heads in<font color="#CCCCCC"> indie exploits I wanted</font><font color="#E5E5E5"> to have</font>

656
00:31:02,340 --> 00:31:08,959
as many kernel rights as I wanted<font color="#E5E5E5"> as</font>

657
00:31:04,920 --> 00:31:11,520
well as many channel<font color="#CCCCCC"> written rights</font>

658
00:31:08,960 --> 00:31:13,890
deterministically on any address I

659
00:31:11,520 --> 00:31:19,800
wanted I<font color="#CCCCCC"> wanted to be able</font><font color="#E5E5E5"> to walk to</font>

660
00:31:13,890 --> 00:31:22,140
<font color="#CCCCCC">any anywhere</font><font color="#E5E5E5"> I wanted so what's our</font>

661
00:31:19,800 --> 00:31:27,750
current primitive right now<font color="#E5E5E5"> we can</font>

662
00:31:22,140 --> 00:31:31,500
hijack the execution to call any address

663
00:31:27,750 --> 00:31:33,990
we want and transfer the first pointer

664
00:31:31,500 --> 00:31:37,460
to<font color="#CCCCCC"> default the pointer to our object</font><font color="#E5E5E5"> to</font>

665
00:31:33,990 --> 00:31:41,040
our spray data is the first parameter<font color="#E5E5E5"> so</font>

666
00:31:37,460 --> 00:31:44,340
there's a very famous gadget since last

667
00:31:41,040 --> 00:31:47,310
year used by many different and

668
00:31:44,340 --> 00:31:50,220
independent researchers called<font color="#E5E5E5"> our CLI</font>

669
00:31:47,310 --> 00:31:53,280
<font color="#CCCCCC">sterilize what it does is because</font><font color="#E5E5E5"> you</font>

670
00:31:50,220 --> 00:31:56,580
control<font color="#E5E5E5"> X 0 we can fetch the first</font>

671
00:31:53,280 --> 00:31:59,940
<font color="#CCCCCC">argument</font><font color="#E5E5E5"> we can fetch X 3 which</font><font color="#CCCCCC"> is a</font>

672
00:31:56,580 --> 00:32:02,510
function<font color="#E5E5E5"> pointer and</font><font color="#CCCCCC"> we can also control</font>

673
00:31:59,940 --> 00:32:06,330
<font color="#E5E5E5">X 9 so what it gives us is the ability</font>

674
00:32:02,510 --> 00:32:09,270
and we don't control<font color="#E5E5E5"> X 1 in that case so</font>

675
00:32:06,330 --> 00:32:11,820
it allows us<font color="#CCCCCC"> to control if we have only</font>

676
00:32:09,270 --> 00:32:14,070
<font color="#E5E5E5">one parameter in that we control now</font>

677
00:32:11,820 --> 00:32:17,520
using that<font color="#E5E5E5"> gadget we have two parameters</font>

678
00:32:14,070 --> 00:32:21,899
<font color="#CCCCCC">that we control so what I did</font><font color="#E5E5E5"> here</font><font color="#CCCCCC"> is</font>

679
00:32:17,520 --> 00:32:25,050
<font color="#E5E5E5">calling twice to that gadget so I'm</font>

680
00:32:21,900 --> 00:32:27,540
going<font color="#E5E5E5"> to ahead like</font><font color="#CCCCCC"> ok</font><font color="#E5E5E5"> so what I did I</font>

681
00:32:25,050 --> 00:32:30,770
put<font color="#CCCCCC"> here on</font><font color="#E5E5E5"> the first time the address</font>

682
00:32:27,540 --> 00:32:34,080
of<font color="#CCCCCC"> that gadget again so what it gave me</font>

683
00:32:30,770 --> 00:32:36,690
that's actually<font color="#E5E5E5"> sleep it from the actual</font>

684
00:32:34,080 --> 00:32:39,300
exploit which is going<font color="#E5E5E5"> to its public now</font>

685
00:32:36,690 --> 00:32:41,540
by the<font color="#E5E5E5"> way and what I am</font><font color="#CCCCCC"> doing here is</font>

686
00:32:39,300 --> 00:32:47,370
<font color="#E5E5E5">first I'm getting the kernel object of</font>

687
00:32:41,540 --> 00:32:51,210
my spray<font color="#CCCCCC"> +</font><font color="#E5E5E5"> 2 3</font><font color="#CCCCCC"> 4 that's</font><font color="#E5E5E5"> gonna be because</font>

688
00:32:47,370 --> 00:32:52,679
it's<font color="#CCCCCC"> plus</font><font color="#E5E5E5"> 10</font><font color="#CCCCCC"> that's gonna be our first</font>

689
00:32:51,210 --> 00:32:55,820
parameter<font color="#E5E5E5"> next time you call that</font>

690
00:32:52,680 --> 00:32:58,830
function<font color="#E5E5E5"> a</font><font color="#CCCCCC"> Cisco tile handler</font><font color="#E5E5E5"> size</font>

691
00:32:55,820 --> 00:33:02,460
that's<font color="#E5E5E5"> gonna be that's 18 so that's</font>

692
00:32:58,830 --> 00:33:05,010
gonna be<font color="#E5E5E5"> diff like the X</font><font color="#CCCCCC"> 1 for the next</font>

693
00:33:02,460 --> 00:33:07,260
time<font color="#E5E5E5"> you call always say allies or CLI</font>

694
00:33:05,010 --> 00:33:11,040
<font color="#E5E5E5">socialize and what we see here is that</font>

695
00:33:07,260 --> 00:33:12,840
in X<font color="#E5E5E5"> 20 we call it's going</font><font color="#CCCCCC"> to be X free</font>

696
00:33:11,040 --> 00:33:15,360
so<font color="#E5E5E5"> we're going to call</font><font color="#CCCCCC"> again</font>

697
00:33:12,840 --> 00:33:17,850
always serialize or serialize and then

698
00:33:15,360 --> 00:33:20,908
it's going<font color="#E5E5E5"> to do the same thing</font><font color="#CCCCCC"> like it</font>

699
00:33:17,850 --> 00:33:22,498
<font color="#CCCCCC">did before on those parameters</font><font color="#E5E5E5"> except</font>

700
00:33:20,909 --> 00:33:24,419
<font color="#CCCCCC">that we control</font><font color="#E5E5E5"> the first parameter now</font>

701
00:33:22,499 --> 00:33:28,919
which is going<font color="#E5E5E5"> to be sis cattle handler</font>

702
00:33:24,419 --> 00:33:32,330
size twice now let's see if people

703
00:33:28,919 --> 00:33:35,549
<font color="#E5E5E5">already see what I'm going</font><font color="#CCCCCC"> with</font><font color="#E5E5E5"> that and</font>

704
00:33:32,330 --> 00:33:38,129
what<font color="#CCCCCC"> I'm going to</font><font color="#E5E5E5"> call is copy in which</font>

705
00:33:35,549 --> 00:33:41,549
is the way<font color="#E5E5E5"> to copy data</font><font color="#CCCCCC"> from the user</font><font color="#E5E5E5"> to</font>

706
00:33:38,129 --> 00:33:45,029
the<font color="#E5E5E5"> kernel on a sis cattle handler</font>

707
00:33:41,549 --> 00:33:49,519
called<font color="#E5E5E5"> l1 the cache size handler and</font><font color="#CCCCCC"> I'm</font>

708
00:33:45,029 --> 00:33:52,049
going<font color="#CCCCCC"> to authorize to see scuttles</font><font color="#E5E5E5"> so</font>

709
00:33:49,519 --> 00:33:54,389
<font color="#E5E5E5">again the new primitive we had we can</font>

710
00:33:52,049 --> 00:33:56,879
call any<font color="#E5E5E5"> kernel function and we control</font>

711
00:33:54,389 --> 00:34:00,748
<font color="#E5E5E5">three arguments which is sufficient for</font>

712
00:33:56,879 --> 00:34:03,869
<font color="#E5E5E5">a single copying call from user and like</font>

713
00:34:00,749 --> 00:34:05,820
I said<font color="#CCCCCC"> Cisco tells a good candidate</font>

714
00:34:03,869 --> 00:34:09,270
because<font color="#E5E5E5"> they're in the data section</font>

715
00:34:05,820 --> 00:34:12,918
<font color="#CCCCCC">so</font><font color="#E5E5E5"> a MCC</font><font color="#CCCCCC"> kpp and all the useless stuff</font>

716
00:34:09,270 --> 00:34:15,379
that Apple<font color="#CCCCCC"> created doesn't protect it</font>

717
00:34:12,918 --> 00:34:18,359
and there is another big advantage

718
00:34:15,379 --> 00:34:21,929
advantage or in<font color="#CCCCCC"> sweet Cisco tiles that</font>

719
00:34:18,359 --> 00:34:27,980
Lee<font color="#E5E5E5"> I think any sandbox profile has at</font>

720
00:34:21,929 --> 00:34:34,859
least<font color="#E5E5E5"> few sis cutouts accessible so</font>

721
00:34:27,980 --> 00:34:37,619
again our goal<font color="#E5E5E5"> was to get up</font><font color="#CCCCCC"> indefinite</font>

722
00:34:34,859 --> 00:34:40,078
kernel it<font color="#E5E5E5"> rights and hope anyway we want</font>

723
00:34:37,619 --> 00:34:43,500
and whenever the one we wanted and

724
00:34:40,079 --> 00:34:46,770
deterministically<font color="#E5E5E5"> so the moment I finish</font>

725
00:34:43,500 --> 00:34:48,569
with<font color="#E5E5E5"> my exploit with the initial stage</font>

726
00:34:46,770 --> 00:34:51,119
of<font color="#E5E5E5"> the exploit I want those at my</font>

727
00:34:48,569 --> 00:34:55,889
disposal<font color="#E5E5E5"> as long as without any</font>

728
00:34:51,119 --> 00:34:59,040
limitations so what I<font color="#E5E5E5"> did to offer to</font>

729
00:34:55,889 --> 00:35:02,089
bypass the new<font color="#E5E5E5"> panels map protection</font>

730
00:34:59,040 --> 00:35:05,609
that<font color="#E5E5E5"> was introduced in iPhone 7</font><font color="#CCCCCC"> I</font>

731
00:35:02,089 --> 00:35:10,680
overall<font color="#E5E5E5"> I of about to</font><font color="#CCCCCC"> see scuttles one</font>

732
00:35:05,609 --> 00:35:16,650
of them to hope to<font color="#E5E5E5"> to my spray data just</font>

733
00:35:10,680 --> 00:35:19,710
<font color="#E5E5E5">like</font><font color="#CCCCCC"> I did here and this second sis</font>

734
00:35:16,650 --> 00:35:22,440
cattle was to override<font color="#CCCCCC"> my free data</font>

735
00:35:19,710 --> 00:35:25,290
deterministically<font color="#E5E5E5"> so how does it look</font>

736
00:35:22,440 --> 00:35:27,990
<font color="#CCCCCC">and I</font>

737
00:35:25,290 --> 00:35:30,930
<font color="#E5E5E5">-</font><font color="#CCCCCC"> Cisco Dallas one of them allows me to</font>

738
00:35:27,990 --> 00:35:34,259
<font color="#E5E5E5">change that anytime</font><font color="#CCCCCC"> I wanted</font><font color="#E5E5E5"> because if</font>

739
00:35:30,930 --> 00:35:36,930
I am again using<font color="#CCCCCC"> the iOS surface spray</font>

740
00:35:34,260 --> 00:35:40,100
<font color="#E5E5E5">if I'm releasing the object there is a</font>

741
00:35:36,930 --> 00:35:42,930
small chance<font color="#E5E5E5"> that something else will be</font>

742
00:35:40,100 --> 00:35:45,810
allocated in<font color="#CCCCCC"> the same</font><font color="#E5E5E5"> slot it's a small</font>

743
00:35:42,930 --> 00:35:47,310
chance<font color="#CCCCCC"> but</font><font color="#E5E5E5"> I wanted at the time</font><font color="#CCCCCC"> I wanted</font>

744
00:35:45,810 --> 00:35:50,369
<font color="#E5E5E5">to do everything deterministically and</font>

745
00:35:47,310 --> 00:35:53,310
the<font color="#E5E5E5"> second sis cattle is going to hop</font>

746
00:35:50,369 --> 00:35:55,740
straight to a portion of<font color="#CCCCCC"> my aspirated</font>

747
00:35:53,310 --> 00:35:59,070
data so<font color="#CCCCCC"> we'll only operate the kernel</font>

748
00:35:55,740 --> 00:36:01,859
only operates here on<font color="#E5E5E5"> kernel data so</font><font color="#CCCCCC"> pan</font>

749
00:35:59,070 --> 00:36:05,130
or smoke is<font color="#CCCCCC"> not a concern here anymore</font>

750
00:36:01,859 --> 00:36:08,490
<font color="#E5E5E5">and then we can just stop indefinitely</font>

751
00:36:05,130 --> 00:36:12,480
<font color="#CCCCCC">so again first</font><font color="#E5E5E5"> we modify if you want to</font>

752
00:36:08,490 --> 00:36:15,299
up this way stages we<font color="#CCCCCC"> have our first</font>

753
00:36:12,480 --> 00:36:18,840
modifying the<font color="#CCCCCC"> sprayed data with the hope</font>

754
00:36:15,300 --> 00:36:21,750
stuff for the always<font color="#E5E5E5"> serialize serialize</font>

755
00:36:18,840 --> 00:36:26,040
gadget then we call the<font color="#E5E5E5"> the second sis</font>

756
00:36:21,750 --> 00:36:28,410
cattle<font color="#CCCCCC"> to hope to</font><font color="#E5E5E5"> a spray data</font><font color="#CCCCCC"> with CLL</font>

757
00:36:26,040 --> 00:36:30,570
serialize and then we can then we can

758
00:36:28,410 --> 00:36:32,819
just go anywhere<font color="#E5E5E5"> once so if I want to</font>

759
00:36:30,570 --> 00:36:35,130
<font color="#E5E5E5">call a specific function</font><font color="#CCCCCC"> I</font><font color="#E5E5E5"> just changed</font>

760
00:36:32,820 --> 00:36:38,490
the<font color="#E5E5E5"> address</font><font color="#CCCCCC"> to well that is going</font><font color="#E5E5E5"> to up</font>

761
00:36:35,130 --> 00:36:41,640
it to job sorry<font color="#CCCCCC"> I don't really care what</font>

762
00:36:38,490 --> 00:36:43,830
<font color="#E5E5E5">the terminology here so I can I can</font>

763
00:36:41,640 --> 00:36:45,690
change the<font color="#CCCCCC"> destination address</font><font color="#E5E5E5"> using</font>

764
00:36:43,830 --> 00:36:49,140
that and then I can<font color="#CCCCCC"> just</font><font color="#E5E5E5"> jump to that</font>

765
00:36:45,690 --> 00:36:54,000
<font color="#E5E5E5">address using that okay so the main the</font>

766
00:36:49,140 --> 00:36:56,990
main stages once I have the first jump

767
00:36:54,000 --> 00:37:00,270
the fence jumper<font color="#CCCCCC"> native first</font><font color="#E5E5E5"> I am</font>

768
00:36:56,990 --> 00:37:03,118
jumping to always see Eliza<font color="#CCCCCC"> while I only</font>

769
00:37:00,270 --> 00:37:05,730
control<font color="#E5E5E5"> the first two arguments because</font>

770
00:37:03,119 --> 00:37:07,980
that's what always<font color="#CCCCCC"> see Eliza</font>

771
00:37:05,730 --> 00:37:11,850
gives me in the first<font color="#E5E5E5"> time then I'm</font>

772
00:37:07,980 --> 00:37:14,280
hoping<font color="#CCCCCC"> I'm dropping again to the same</font>

773
00:37:11,850 --> 00:37:19,350
gadget<font color="#CCCCCC"> so now I control the first</font><font color="#E5E5E5"> three</font>

774
00:37:14,280 --> 00:37:24,390
parameters then I'm dropping<font color="#E5E5E5"> to copy in</font>

775
00:37:19,350 --> 00:37:27,060
I'm overwriting the<font color="#CCCCCC"> two</font><font color="#E5E5E5"> sis</font><font color="#CCCCCC"> Cottle's</font><font color="#E5E5E5"> and</font>

776
00:37:24,390 --> 00:37:30,330
then every time<font color="#CCCCCC"> I want to job somewhere</font>

777
00:37:27,060 --> 00:37:33,420
<font color="#CCCCCC">I am</font><font color="#E5E5E5"> over I am calling the fruit sis</font>

778
00:37:30,330 --> 00:37:35,640
cattle it modifies<font color="#E5E5E5"> as deterministically</font>

779
00:37:33,420 --> 00:37:37,619
<font color="#E5E5E5">my spirit data with the appropriate</font>

780
00:37:35,640 --> 00:37:38,879
<font color="#E5E5E5">function</font><font color="#CCCCCC"> add function address and</font>

781
00:37:37,619 --> 00:37:42,750
appropriate

782
00:37:38,880 --> 00:37:45,990
arguments then I'm<font color="#E5E5E5"> calling this the</font>

783
00:37:42,750 --> 00:37:49,349
<font color="#E5E5E5">second</font><font color="#CCCCCC"> Cisco circuit is called</font><font color="#E5E5E5"> jumps to</font>

784
00:37:45,990 --> 00:37:52,019
always over sale as a gadget which jumps

785
00:37:49,349 --> 00:37:54,900
to itself again<font color="#E5E5E5"> so I have now again free</font>

786
00:37:52,019 --> 00:37:59,189
parameters<font color="#E5E5E5"> controlled then it jump it</font>

787
00:37:54,900 --> 00:38:02,279
<font color="#CCCCCC">chooses the data for my sprayed data to</font>

788
00:37:59,190 --> 00:38:05,279
job again to another<font color="#E5E5E5"> location</font><font color="#CCCCCC"> which</font>

789
00:38:02,279 --> 00:38:08,970
means<font color="#CCCCCC"> I can go</font><font color="#E5E5E5"> anywhere I</font><font color="#CCCCCC"> want in</font>

790
00:38:05,279 --> 00:38:12,599
Colonel sir mystically<font color="#CCCCCC"> viper sinks pxn</font>

791
00:38:08,970 --> 00:38:15,980
<font color="#CCCCCC">web sink pan and without any concern</font>

792
00:38:12,599 --> 00:38:20,190
<font color="#E5E5E5">that</font><font color="#CCCCCC"> something will</font><font color="#E5E5E5"> go on in in between</font>

793
00:38:15,980 --> 00:38:24,779
so<font color="#CCCCCC"> okay we have</font><font color="#E5E5E5"> arbitrary and</font><font color="#CCCCCC"> unlimited</font>

794
00:38:20,190 --> 00:38:27,660
<font color="#CCCCCC">kernel hijacking we can you call any</font>

795
00:38:24,779 --> 00:38:29,700
function in<font color="#E5E5E5"> the camera we want the next</font>

796
00:38:27,660 --> 00:38:33,118
stage is to<font color="#CCCCCC"> achieve</font><font color="#E5E5E5"> kernel of it right</font>

797
00:38:29,700 --> 00:38:36,058
which is simple<font color="#CCCCCC"> so before is no longer</font><font color="#E5E5E5"> a</font>

798
00:38:33,119 --> 00:38:38,660
concern<font color="#E5E5E5"> because I can just job to copy</font>

799
00:38:36,059 --> 00:38:42,990
and copy out as<font color="#E5E5E5"> many times as I</font><font color="#CCCCCC"> want so</font>

800
00:38:38,660 --> 00:38:45,629
<font color="#E5E5E5">that's how I use that's that was my</font>

801
00:38:42,990 --> 00:38:49,740
methods to bypass<font color="#E5E5E5"> all</font><font color="#CCCCCC"> the new</font>

802
00:38:45,630 --> 00:38:51,869
mitigations that<font color="#E5E5E5"> came in like the</font><font color="#CCCCCC"> PX n</font>

803
00:38:49,740 --> 00:38:55,348
and pan mitigations<font color="#E5E5E5"> the pan mitigation</font>

804
00:38:51,869 --> 00:38:58,019
was<font color="#E5E5E5"> only traduced in iphone 7 and that</font>

805
00:38:55,349 --> 00:38:59,910
gives you absolute deterministic

806
00:38:58,019 --> 00:39:03,779
indefinite kernel<font color="#CCCCCC"> read/write</font>

807
00:38:59,910 --> 00:39:08,160
<font color="#E5E5E5">capabilities</font><font color="#CCCCCC"> like I promised a few words</font>

808
00:39:03,779 --> 00:39:10,529
about jailbreak<font color="#E5E5E5"> so first of all if you</font>

809
00:39:08,160 --> 00:39:14,788
want to see the exploit you can find it

810
00:39:10,529 --> 00:39:17,759
here<font color="#E5E5E5"> it doesn't have all the offsets for</font>

811
00:39:14,789 --> 00:39:19,799
<font color="#E5E5E5">all the devices but in the offsets file</font>

812
00:39:17,759 --> 00:39:22,500
<font color="#E5E5E5">you'll see</font><font color="#CCCCCC"> instructions on how to add</font>

813
00:39:19,799 --> 00:39:25,140
those you can start with<font color="#CCCCCC"> saying the</font>

814
00:39:22,500 --> 00:39:29,069
first<font color="#E5E5E5"> offset see that you got the point</font>

815
00:39:25,140 --> 00:39:30,690
<font color="#E5E5E5">and then just add new ones and you you</font>

816
00:39:29,069 --> 00:39:33,569
<font color="#CCCCCC">should use that</font><font color="#E5E5E5"> exploit only for</font>

817
00:39:30,690 --> 00:39:38,220
educational<font color="#CCCCCC"> purposes and not in any</font>

818
00:39:33,569 --> 00:39:40,619
unintended way and so enjoy about

819
00:39:38,220 --> 00:39:42,419
actually releasing a jailbreak<font color="#CCCCCC"> like I</font>

820
00:39:40,619 --> 00:39:44,430
<font color="#E5E5E5">said a few days after the initial</font>

821
00:39:42,420 --> 00:39:44,940
announcement<font color="#CCCCCC"> I'm not gonna walk on a</font>

822
00:39:44,430 --> 00:39:46,980
jailbreak

823
00:39:44,940 --> 00:39:49,829
I don't find helping other people<font color="#CCCCCC"> but I</font>

824
00:39:46,980 --> 00:39:51,809
<font color="#CCCCCC">think there are a lot of points that</font>

825
00:39:49,829 --> 00:39:58,920
people<font color="#E5E5E5"> don't understand</font>

826
00:39:51,809 --> 00:40:01,799
nowadays I'm sure most<font color="#E5E5E5"> of them jailbreak</font>

827
00:39:58,920 --> 00:40:05,849
teams have<font color="#CCCCCC"> can exploit scam</font><font color="#E5E5E5"> experts are</font>

828
00:40:01,799 --> 00:40:08,249
not the issue<font color="#E5E5E5"> with iOS</font><font color="#CCCCCC"> also know it's</font>

829
00:40:05,849 --> 00:40:13,200
Syria which is<font color="#CCCCCC"> 10</font><font color="#E5E5E5"> years old that must</font><font color="#CCCCCC"> be</font>

830
00:40:08,249 --> 00:40:15,149
replaced<font color="#E5E5E5"> and in my opinion</font><font color="#CCCCCC"> we could we</font>

831
00:40:13,200 --> 00:40:17,629
<font color="#E5E5E5">could</font><font color="#CCCCCC"> and it's not just my opinion</font><font color="#E5E5E5"> I</font>

832
00:40:15,150 --> 00:40:22,589
think<font color="#E5E5E5"> a lot</font><font color="#CCCCCC"> of other people</font><font color="#E5E5E5"> think that</font>

833
00:40:17,630 --> 00:40:25,170
actually yeah<font color="#E5E5E5"> so I think that</font><font color="#CCCCCC"> instead of</font>

834
00:40:22,589 --> 00:40:27,390
<font color="#E5E5E5">actually</font><font color="#CCCCCC"> fetching the</font><font color="#E5E5E5"> kernel a new</font>

835
00:40:25,170 --> 00:40:29,400
method of jailbreaking should be done it

836
00:40:27,390 --> 00:40:32,519
can all be<font color="#E5E5E5"> done user mode if</font><font color="#CCCCCC"> you can</font>

837
00:40:29,400 --> 00:40:36,660
execute unsigned code you can<font color="#CCCCCC"> just</font>

838
00:40:32,519 --> 00:40:39,209
inject code to other<font color="#E5E5E5"> processes and for</font>

839
00:40:36,660 --> 00:40:42,328
<font color="#E5E5E5">the exploit that</font><font color="#CCCCCC"> I posted because</font><font color="#E5E5E5"> direct</font>

840
00:40:39,210 --> 00:40:44,549
access<font color="#CCCCCC"> to a play v is not open from the</font>

841
00:40:42,329 --> 00:40:47,759
<font color="#E5E5E5">code from a containerized up a sandbox</font>

842
00:40:44,549 --> 00:40:49,799
<font color="#E5E5E5">escape is needed fortunately you have a</font>

843
00:40:47,759 --> 00:40:51,660
project<font color="#CCCCCC"> or three people</font><font color="#E5E5E5"> fetch which can</font>

844
00:40:49,799 --> 00:40:54,089
<font color="#E5E5E5">be used as a sandbox escape because it</font>

845
00:40:51,660 --> 00:40:58,308
allows you to hijack any task<font color="#E5E5E5"> port</font>

846
00:40:54,089 --> 00:41:01,799
including<font color="#E5E5E5"> media server which can access</font>

847
00:40:58,309 --> 00:41:08,069
which can access the epilady driver

848
00:41:01,799 --> 00:41:11,400
directly so conclusions<font color="#CCCCCC"> it's closed</font><font color="#E5E5E5"> on</font>

849
00:41:08,069 --> 00:41:13,469
time and of<font color="#CCCCCC"> course we the</font><font color="#E5E5E5"> first the the</font>

850
00:41:11,400 --> 00:41:18,390
first time I reported<font color="#CCCCCC"> to</font><font color="#E5E5E5"> the</font><font color="#CCCCCC"> tattoo</font>

851
00:41:13,469 --> 00:41:21,569
<font color="#E5E5E5">Apple was you know</font><font color="#CCCCCC"> 20 of</font><font color="#E5E5E5"> March more or</font>

852
00:41:18,390 --> 00:41:24,058
less a<font color="#E5E5E5"> week afterwards they confirmed</font>

853
00:41:21,569 --> 00:41:26,339
the<font color="#CCCCCC"> the actual the first bug they they</font>

854
00:41:24,059 --> 00:41:30,749
accept they state that<font color="#E5E5E5"> they were right</font>

855
00:41:26,339 --> 00:41:34,140
and on the 15th<font color="#CCCCCC"> of May patches were</font>

856
00:41:30,749 --> 00:41:34,468
distributed and now<font color="#E5E5E5"> from that point till</font>

857
00:41:34,140 --> 00:41:37,140
today

858
00:41:34,469 --> 00:41:39,660
till yesterday actually<font color="#E5E5E5"> we didn't</font>

859
00:41:37,140 --> 00:41:42,058
release<font color="#E5E5E5"> the exploit and we didn't give</font>

860
00:41:39,660 --> 00:41:44,759
any information<font color="#CCCCCC"> upon</font><font color="#E5E5E5"> that first of all</font>

861
00:41:42,059 --> 00:41:47,130
because we<font color="#E5E5E5"> want to first polish that on</font>

862
00:41:44,759 --> 00:41:51,029
here<font color="#CCCCCC"> on that conference</font><font color="#E5E5E5"> and second of</font>

863
00:41:47,130 --> 00:41:53,670
all because<font color="#CCCCCC"> Apple told me that I should</font>

864
00:41:51,029 --> 00:41:56,130
wait<font color="#E5E5E5"> with the release because not all</font>

865
00:41:53,670 --> 00:41:58,799
the<font color="#E5E5E5"> bugs were fixed on ten point three</font>

866
00:41:56,130 --> 00:42:01,849
<font color="#E5E5E5">point two I didn't bother to check which</font>

867
00:41:58,799 --> 00:42:04,380
bug<font color="#E5E5E5"> which bugs were fixed over not fixed</font>

868
00:42:01,849 --> 00:42:07,230
<font color="#E5E5E5">I'll leave that to you now the</font>

869
00:42:04,380 --> 00:42:11,069
you<font color="#E5E5E5"> going to have also the</font><font color="#CCCCCC"> buggies that</font>

870
00:42:07,230 --> 00:42:14,069
we<font color="#CCCCCC"> sent to Apple</font><font color="#E5E5E5"> and but perhaps I did</font>

871
00:42:11,069 --> 00:42:16,380
<font color="#E5E5E5">not check</font><font color="#CCCCCC"> those that</font><font color="#E5E5E5"> exploit or at least</font>

872
00:42:14,069 --> 00:42:19,380
some of<font color="#E5E5E5"> the primitives of that exploits</font>

873
00:42:16,380 --> 00:42:22,109
might<font color="#CCCCCC"> work on ten point three</font><font color="#E5E5E5"> point two</font>

874
00:42:19,380 --> 00:42:24,029
again<font color="#CCCCCC"> I didn't check</font><font color="#E5E5E5"> that</font><font color="#CCCCCC"> if someone</font>

875
00:42:22,109 --> 00:42:27,630
<font color="#E5E5E5">wants</font><font color="#CCCCCC"> to do that sure maybe it can aim</font>

876
00:42:24,029 --> 00:42:29,250
there<font color="#E5E5E5"> maybe it can hide people with that</font>

877
00:42:27,630 --> 00:42:30,930
<font color="#CCCCCC">ones jailbreak</font><font color="#E5E5E5"> on ten point three point</font>

878
00:42:29,250 --> 00:42:33,960
two considering<font color="#E5E5E5"> that someone will</font>

879
00:42:30,930 --> 00:42:37,759
actually<font color="#E5E5E5"> make a decent good platform for</font>

880
00:42:33,960 --> 00:42:39,930
jailbreaking<font color="#CCCCCC"> in the future nevertheless</font>

881
00:42:37,759 --> 00:42:42,029
<font color="#E5E5E5">Apple</font><font color="#CCCCCC"> will not the first window that I</font>

882
00:42:39,930 --> 00:42:44,339
reported<font color="#CCCCCC"> for my abilities</font><font color="#E5E5E5"> to</font><font color="#CCCCCC"> they're not</font>

883
00:42:42,029 --> 00:42:47,789
<font color="#CCCCCC">the second one and I</font><font color="#E5E5E5"> must say that that</font>

884
00:42:44,339 --> 00:42:50,630
was the best<font color="#E5E5E5"> experience</font><font color="#CCCCCC"> ever I think</font>

885
00:42:47,789 --> 00:42:53,789
that first<font color="#CCCCCC"> of all they took very</font><font color="#E5E5E5"> serious</font>

886
00:42:50,630 --> 00:42:56,400
proposals and suggestions they were very

887
00:42:53,789 --> 00:42:59,309
happy<font color="#CCCCCC"> to listen to our comments for</font>

888
00:42:56,400 --> 00:43:01,619
example<font color="#E5E5E5"> the first</font><font color="#CCCCCC"> state said that</font><font color="#E5E5E5"> there</font>

889
00:42:59,309 --> 00:43:04,289
was a memory corruption in one of<font color="#E5E5E5"> our</font>

890
00:43:01,619 --> 00:43:06,180
bugs<font color="#CCCCCC"> we asked them</font><font color="#E5E5E5"> to change it to rest</font>

891
00:43:04,289 --> 00:43:08,579
conditions the description to rest

892
00:43:06,180 --> 00:43:11,210
condition<font color="#CCCCCC"> they did it they didn't</font><font color="#E5E5E5"> argue</font>

893
00:43:08,579 --> 00:43:13,950
with<font color="#E5E5E5"> us and even though it sounds</font><font color="#CCCCCC"> very</font>

894
00:43:11,210 --> 00:43:16,019
<font color="#CCCCCC">very reasonable not to</font><font color="#E5E5E5"> argue</font><font color="#CCCCCC"> that about</font>

895
00:43:13,950 --> 00:43:18,538
<font color="#CCCCCC">it with us</font><font color="#E5E5E5"> about it previous</font><font color="#CCCCCC"> but in</font>

896
00:43:16,019 --> 00:43:21,779
<font color="#E5E5E5">those who did and I</font>

897
00:43:18,539 --> 00:43:25,009
I was<font color="#E5E5E5"> very happy and surprised with the</font>

898
00:43:21,779 --> 00:43:27,660
communication with them additionally<font color="#E5E5E5"> I</font>

899
00:43:25,009 --> 00:43:30,420
must say<font color="#E5E5E5"> that last year</font><font color="#CCCCCC"> with the</font>

900
00:43:27,660 --> 00:43:33,779
<font color="#E5E5E5">introduction of pan and some</font>

901
00:43:30,420 --> 00:43:37,650
enhancements to the<font color="#CCCCCC"> heap</font><font color="#E5E5E5"> they did a very</font>

902
00:43:33,779 --> 00:43:39,390
<font color="#E5E5E5">impressive job and I think</font><font color="#CCCCCC"> iOS is</font>

903
00:43:37,650 --> 00:43:42,660
nowadays<font color="#E5E5E5"> the most secure mobile</font>

904
00:43:39,390 --> 00:43:46,140
operating system nevertheless like if so

905
00:43:42,660 --> 00:43:47,930
<font color="#CCCCCC">it's 2017 and I still don't know</font><font color="#E5E5E5"> how</font>

906
00:43:46,140 --> 00:43:50,700
bugs like the one I showed<font color="#CCCCCC"> you</font><font color="#E5E5E5"> today</font>

907
00:43:47,930 --> 00:43:55,440
<font color="#E5E5E5">here on our list latest versions of</font>

908
00:43:50,700 --> 00:43:58,578
mobile devices that's it thank<font color="#E5E5E5"> you</font><font color="#CCCCCC"> very</font>

909
00:43:55,440 --> 00:44:01,079
much<font color="#CCCCCC"> I hope you enjoyed</font><font color="#E5E5E5"> my presentation</font>

910
00:43:58,579 --> 00:44:04,470
and<font color="#CCCCCC"> if</font><font color="#E5E5E5"> you have any question that</font><font color="#CCCCCC"> is</font><font color="#E5E5E5"> not</font>

911
00:44:01,079 --> 00:44:05,640
related to<font color="#E5E5E5"> when</font><font color="#CCCCCC"> ETA</font><font color="#E5E5E5"> jailbreak please let</font>

912
00:44:04,470 --> 00:44:09,890
me<font color="#E5E5E5"> know and I'll do my best to answer</font>

913
00:44:05,640 --> 00:44:09,890
you thank you very much other

914
00:44:11,440 --> 00:44:18,050
are there any<font color="#CCCCCC"> questions from the floor</font>

915
00:44:15,550 --> 00:44:19,910
no I guess all the<font color="#E5E5E5"> question will</font><font color="#CCCCCC"> come</font>

916
00:44:18,050 --> 00:44:20,690
later and<font color="#E5E5E5"> when you get off</font><font color="#CCCCCC"> some</font><font color="#E5E5E5"> people</font>

917
00:44:19,910 --> 00:44:24,370
talk to you then

918
00:44:20,690 --> 00:44:24,370
thanks again<font color="#E5E5E5"> thank you very much</font>

