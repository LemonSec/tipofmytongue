1
00:00:07,570 --> 00:00:12,000
thank you<font color="#CCCCCC"> it's very nice to be here</font>

2
00:00:11,020 --> 00:00:17,110
again

3
00:00:12,000 --> 00:00:19,540
<font color="#CCCCCC">today</font><font color="#E5E5E5"> and this</font><font color="#CCCCCC"> is</font><font color="#E5E5E5"> because I chose the</font>

4
00:00:17,110 --> 00:00:21,369
<font color="#E5E5E5">the</font><font color="#CCCCCC"> COMSEC trek to to submit today I</font>

5
00:00:19,540 --> 00:00:23,829
will show<font color="#E5E5E5"> you something that is</font><font color="#CCCCCC"> a</font><font color="#E5E5E5"> little</font>

6
00:00:21,369 --> 00:00:26,770
older<font color="#E5E5E5"> but nevertheless interesting</font>

7
00:00:23,829 --> 00:00:32,020
because<font color="#E5E5E5"> the story of this was never told</font>

8
00:00:26,770 --> 00:00:36,690
before<font color="#CCCCCC"> so what are</font><font color="#E5E5E5"> we talking about</font><font color="#CCCCCC"> is</font>

9
00:00:32,020 --> 00:00:42,060
the<font color="#E5E5E5"> original elevator</font><font color="#CCCCCC"> the history of</font>

10
00:00:36,690 --> 00:00:44,769
private<font color="#E5E5E5"> iOS jailbreak and yeah</font><font color="#CCCCCC"> Who am I</font>

11
00:00:42,060 --> 00:00:47,260
<font color="#E5E5E5">I'm</font><font color="#CCCCCC"> Stefan I'm from</font><font color="#E5E5E5"> Germany</font>

12
00:00:44,770 --> 00:00:51,340
I do information security<font color="#E5E5E5"> for nearly 20</font>

13
00:00:47,260 --> 00:00:55,510
years<font color="#E5E5E5"> and yes I'm the</font><font color="#CCCCCC"> PHP security guy</font>

14
00:00:51,340 --> 00:00:57,120
that<font color="#E5E5E5"> somehow made it to iOS and yeah I</font>

15
00:00:55,510 --> 00:00:59,530
was<font color="#E5E5E5"> running for nine years</font>

16
00:00:57,120 --> 00:01:02,190
company in Germany called<font color="#E5E5E5"> section ions</font>

17
00:00:59,530 --> 00:01:06,220
which does mostly weapon application -

18
00:01:02,190 --> 00:01:08,890
yeah auditing<font color="#E5E5E5"> and then I concentrated</font>

19
00:01:06,220 --> 00:01:12,490
more on<font color="#E5E5E5"> something called antidote which</font>

20
00:01:08,890 --> 00:01:15,520
is a similar company<font color="#E5E5E5"> and last month I</font>

21
00:01:12,490 --> 00:01:19,270
started<font color="#E5E5E5"> here in Singapore like</font><font color="#CCCCCC"> a branch</font>

22
00:01:15,520 --> 00:01:21,250
of the office of<font color="#CCCCCC"> this company</font><font color="#E5E5E5"> so if</font>

23
00:01:19,270 --> 00:01:25,869
anybody<font color="#CCCCCC"> who's looking</font><font color="#E5E5E5"> for</font><font color="#CCCCCC"> a job</font>

24
00:01:21,250 --> 00:01:27,659
you maybe can<font color="#E5E5E5"> hit me</font><font color="#CCCCCC"> up later ok so what</font>

25
00:01:25,870 --> 00:01:30,700
is<font color="#E5E5E5"> it</font><font color="#CCCCCC"> that I'm talking about</font>

26
00:01:27,659 --> 00:01:35,260
this is this<font color="#E5E5E5"> elevator so what is the</font>

27
00:01:30,700 --> 00:01:37,930
elevator<font color="#E5E5E5"> so back in 2011 there was a lot</font>

28
00:01:35,260 --> 00:01:43,000
of hype in in the in the jailbreak

29
00:01:37,930 --> 00:01:45,790
community and especially<font color="#E5E5E5"> I was involved</font>

30
00:01:43,000 --> 00:01:48,040
in<font color="#CCCCCC"> that</font><font color="#E5E5E5"> because I had recently released</font>

31
00:01:45,790 --> 00:01:51,119
at<font color="#E5E5E5"> this</font><font color="#CCCCCC"> time a jailbreak or a part of</font><font color="#E5E5E5"> a</font>

32
00:01:48,040 --> 00:01:53,530
jailbreak<font color="#CCCCCC"> and all these people were now</font>

33
00:01:51,119 --> 00:01:57,280
<font color="#E5E5E5">basically reading every</font><font color="#CCCCCC"> single word of</font>

34
00:01:53,530 --> 00:01:58,240
mine and trying to understand how all my

35
00:01:57,280 --> 00:01:59,020
words have something to do with

36
00:01:58,240 --> 00:02:01,949
<font color="#CCCCCC">jailbreaks</font>

37
00:01:59,020 --> 00:02:06,699
and basically back then I had<font color="#CCCCCC"> a</font>

38
00:02:01,950 --> 00:02:08,830
complaint<font color="#E5E5E5"> that in our house the landlord</font>

39
00:02:06,700 --> 00:02:11,650
was always disabling the elevator<font color="#E5E5E5"> every</font>

40
00:02:08,830 --> 00:02:13,780
time and someone<font color="#CCCCCC"> would move in or out</font><font color="#E5E5E5"> so</font>

41
00:02:11,650 --> 00:02:16,840
<font color="#E5E5E5">basically I just posted this on Twitter</font>

42
00:02:13,780 --> 00:02:19,810
<font color="#CCCCCC">and unfortunately a few Joker's like</font>

43
00:02:16,840 --> 00:02:21,390
named my mess you switch<font color="#E5E5E5"> and the</font><font color="#CCCCCC"> grok</font>

44
00:02:19,810 --> 00:02:23,190
they thought it's funny

45
00:02:21,390 --> 00:02:25,649
just like comment about this and say oh

46
00:02:23,190 --> 00:02:28,170
this is<font color="#E5E5E5"> actually</font><font color="#CCCCCC"> like the codename for a</font>

47
00:02:25,650 --> 00:02:31,319
private<font color="#E5E5E5"> jailbreak called the elevator</font>

48
00:02:28,170 --> 00:02:32,850
<font color="#E5E5E5">and it only took like minutes like half</font>

49
00:02:31,319 --> 00:02:34,910
an hour so and suddenly<font color="#E5E5E5"> all</font><font color="#CCCCCC"> these</font>

50
00:02:32,850 --> 00:02:37,049
jailbreak meets<font color="#E5E5E5"> and news sites that were</font>

51
00:02:34,910 --> 00:02:39,870
trying<font color="#E5E5E5"> to get clicks they were like</font>

52
00:02:37,050 --> 00:02:43,830
announcing<font color="#E5E5E5"> this new next iPad jailbreak</font>

53
00:02:39,870 --> 00:02:47,430
called the elevator<font color="#E5E5E5"> and yeah this got</font>

54
00:02:43,830 --> 00:02:51,120
more and more hyped up<font color="#CCCCCC"> and it was</font>

55
00:02:47,430 --> 00:02:53,160
impossible<font color="#CCCCCC"> to stop</font><font color="#E5E5E5"> this hype</font><font color="#CCCCCC"> I sent a</font>

56
00:02:51,120 --> 00:02:54,750
<font color="#CCCCCC">few</font><font color="#E5E5E5"> tweets saying this is happening to</font>

57
00:02:53,160 --> 00:02:57,480
do with a jailbreak but of<font color="#E5E5E5"> course people</font>

58
00:02:54,750 --> 00:02:59,100
<font color="#E5E5E5">don't read this</font><font color="#CCCCCC"> and they</font><font color="#E5E5E5"> only read</font><font color="#CCCCCC"> the</font>

59
00:02:57,480 --> 00:03:02,369
things that have to do with with geo

60
00:02:59,100 --> 00:03:04,799
brakes<font color="#E5E5E5"> so at this point</font><font color="#CCCCCC"> meme su switch</font>

61
00:03:02,370 --> 00:03:06,450
and the<font color="#E5E5E5"> garage and some others we</font><font color="#CCCCCC"> just</font>

62
00:03:04,800 --> 00:03:08,730
went<font color="#CCCCCC"> along with it</font><font color="#E5E5E5"> and made a lot</font><font color="#CCCCCC"> of fun</font>

63
00:03:06,450 --> 00:03:11,670
out<font color="#CCCCCC"> of it</font><font color="#E5E5E5"> so from this time I would like</font>

64
00:03:08,730 --> 00:03:14,880
start to<font color="#E5E5E5"> tweet and this year for</font><font color="#CCCCCC"> example</font>

65
00:03:11,670 --> 00:03:17,100
<font color="#E5E5E5">is so</font><font color="#CCCCCC"> freakin good news the elevator is</font>

66
00:03:14,880 --> 00:03:20,310
working again and it's<font color="#E5E5E5"> not raining</font>

67
00:03:17,100 --> 00:03:22,019
<font color="#E5E5E5">inside</font><font color="#CCCCCC"> so which basically</font><font color="#E5E5E5"> said my</font>

68
00:03:20,310 --> 00:03:24,660
elevator is no no longer<font color="#E5E5E5"> broken I can</font>

69
00:03:22,019 --> 00:03:26,010
use it and is there's no rain inside<font color="#E5E5E5"> but</font>

70
00:03:24,660 --> 00:03:27,870
the thing is when you when you were

71
00:03:26,010 --> 00:03:30,090
mentioning<font color="#CCCCCC"> the word</font><font color="#E5E5E5"> rain back then</font>

72
00:03:27,870 --> 00:03:31,440
<font color="#E5E5E5">everybody was thinking of chair breaks</font>

73
00:03:30,090 --> 00:03:34,670
because<font color="#E5E5E5"> all the geo brakes had names</font>

74
00:03:31,440 --> 00:03:37,560
<font color="#E5E5E5">like</font><font color="#CCCCCC"> Black Rain and whatever rain and</font>

75
00:03:34,670 --> 00:03:39,450
anyway<font color="#E5E5E5"> so I was</font><font color="#CCCCCC"> always giving these</font>

76
00:03:37,560 --> 00:03:40,769
harmless<font color="#E5E5E5"> tweets and people always</font>

77
00:03:39,450 --> 00:03:43,459
thought<font color="#CCCCCC"> this is like the announcement</font>

78
00:03:40,769 --> 00:03:48,810
for the next jailbreak<font color="#E5E5E5"> and until today</font>

79
00:03:43,459 --> 00:03:51,420
<font color="#CCCCCC">I'm getting</font><font color="#E5E5E5"> yeah cast out for that</font><font color="#CCCCCC"> okay</font>

80
00:03:48,810 --> 00:03:56,430
so back then elevator was really just

81
00:03:51,420 --> 00:03:58,589
like my elevator<font color="#E5E5E5"> and but the whole story</font>

82
00:03:56,430 --> 00:04:01,650
about<font color="#E5E5E5"> this basically make me sing and I</font>

83
00:03:58,590 --> 00:04:03,390
was like<font color="#E5E5E5"> okay from now on every every of</font>

84
00:04:01,650 --> 00:04:05,430
my<font color="#E5E5E5"> private internal jail breaks will now</font>

85
00:04:03,390 --> 00:04:07,619
be called<font color="#E5E5E5"> elevator so since then</font>

86
00:04:05,430 --> 00:04:10,200
<font color="#CCCCCC">basically</font><font color="#E5E5E5"> I really have an elevator</font>

87
00:04:07,620 --> 00:04:12,299
jailbreak and it's basically<font color="#E5E5E5"> always the</font>

88
00:04:10,200 --> 00:04:15,510
<font color="#CCCCCC">codename for my private one and this</font>

89
00:04:12,299 --> 00:04:18,870
talk here is about the very<font color="#E5E5E5"> first one of</font>

90
00:04:15,510 --> 00:04:21,839
these private jail breaks<font color="#E5E5E5"> back then it</font>

91
00:04:18,870 --> 00:04:24,690
<font color="#E5E5E5">was for I was five</font><font color="#CCCCCC"> okay</font>

92
00:04:21,839 --> 00:04:27,359
so whenever we<font color="#CCCCCC"> talk about jail breaks</font>

93
00:04:24,690 --> 00:04:30,930
it's usually like<font color="#E5E5E5"> a very important part</font>

94
00:04:27,360 --> 00:04:32,660
the kernel<font color="#CCCCCC"> were</font><font color="#E5E5E5"> nobility so let's first</font>

95
00:04:30,930 --> 00:04:37,010
look<font color="#E5E5E5"> at what the</font>

96
00:04:32,660 --> 00:04:41,390
<font color="#E5E5E5">vulnerability was the vulnerability</font><font color="#CCCCCC"> is</font>

97
00:04:37,010 --> 00:04:44,599
in some system call<font color="#CCCCCC"> that is called</font><font color="#E5E5E5"> set</font>

98
00:04:41,390 --> 00:04:47,120
attribute list<font color="#E5E5E5"> and this system call</font>

99
00:04:44,600 --> 00:04:49,490
allows you to specify the<font color="#E5E5E5"> attributes</font><font color="#CCCCCC"> of</font>

100
00:04:47,120 --> 00:04:51,710
<font color="#E5E5E5">a file including like the file</font>

101
00:04:49,490 --> 00:04:53,600
modification time the create time so a

102
00:04:51,710 --> 00:04:56,930
lot of<font color="#E5E5E5"> things that</font><font color="#CCCCCC"> I teriyaki</font><font color="#E5E5E5"> very</font>

103
00:04:53,600 --> 00:04:58,880
harmless and that's why the system call

104
00:04:56,930 --> 00:05:03,950
at<font color="#CCCCCC"> least back then</font><font color="#E5E5E5"> and maybe still today</font>

105
00:04:58,880 --> 00:05:07,760
<font color="#E5E5E5">is allowed in most of the</font><font color="#CCCCCC"> send boxes so</font>

106
00:05:03,950 --> 00:05:11,030
even in a<font color="#E5E5E5"> very simple case you were</font><font color="#CCCCCC"> able</font>

107
00:05:07,760 --> 00:05:13,159
to<font color="#CCCCCC"> trigger this system call</font><font color="#E5E5E5"> on a subset</font>

108
00:05:11,030 --> 00:05:16,010
<font color="#E5E5E5">of files but we didn't care</font><font color="#CCCCCC"> we just need</font>

109
00:05:13,160 --> 00:05:17,900
any<font color="#E5E5E5"> file so if we can execute the system</font>

110
00:05:16,010 --> 00:05:22,310
call against any fire we can trigger the

111
00:05:17,900 --> 00:05:24,710
vulnerability yeah<font color="#E5E5E5"> as you can see</font>

112
00:05:22,310 --> 00:05:26,870
there's a number<font color="#E5E5E5"> of parameters that you</font>

113
00:05:24,710 --> 00:05:30,500
have to give to the system<font color="#E5E5E5"> call when you</font>

114
00:05:26,870 --> 00:05:32,210
call it and the first of<font color="#CCCCCC"> course</font><font color="#E5E5E5"> is the</font>

115
00:05:30,500 --> 00:05:34,670
<font color="#E5E5E5">past name of the file that</font><font color="#CCCCCC"> you want to</font>

116
00:05:32,210 --> 00:05:36,409
modify then you have to give it

117
00:05:34,670 --> 00:05:39,350
something<font color="#E5E5E5"> that's called an</font><font color="#CCCCCC"> admiral list</font>

118
00:05:36,410 --> 00:05:42,050
<font color="#E5E5E5">and this edge list is basically</font><font color="#CCCCCC"> just a</font>

119
00:05:39,350 --> 00:05:45,530
<font color="#CCCCCC">collection of bitmask that tells the</font>

120
00:05:42,050 --> 00:05:47,510
<font color="#CCCCCC">system call so which attributes do we</font>

121
00:05:45,530 --> 00:05:51,049
<font color="#CCCCCC">actually want to set so it's it's</font>

122
00:05:47,510 --> 00:05:53,570
basically<font color="#CCCCCC"> a number of</font><font color="#E5E5E5"> bit fields</font><font color="#CCCCCC"> the</font>

123
00:05:51,050 --> 00:05:56,990
next thing then is a user<font color="#E5E5E5"> supplied</font>

124
00:05:53,570 --> 00:05:58,880
attribute buffer and<font color="#E5E5E5"> we also give it the</font>

125
00:05:56,990 --> 00:06:00,860
buffer size and some options<font color="#CCCCCC"> but</font>

126
00:05:58,880 --> 00:06:03,169
basically this attribute buffer contains

127
00:06:00,860 --> 00:06:05,390
all the<font color="#E5E5E5"> data for</font><font color="#CCCCCC"> all the attributes</font><font color="#E5E5E5"> that</font>

128
00:06:03,169 --> 00:06:08,840
<font color="#E5E5E5">we want to set and only</font><font color="#CCCCCC"> for the</font>

129
00:06:05,390 --> 00:06:10,840
attributes that<font color="#E5E5E5"> we want to set</font><font color="#CCCCCC"> so of</font>

130
00:06:08,840 --> 00:06:13,280
course when when the system<font color="#E5E5E5"> core runs</font>

131
00:06:10,840 --> 00:06:15,770
<font color="#CCCCCC">the first</font><font color="#E5E5E5"> thing it usually does it</font><font color="#CCCCCC"> will</font>

132
00:06:13,280 --> 00:06:18,919
verifies its parameters and then the

133
00:06:15,770 --> 00:06:21,109
next thing it does it it<font color="#E5E5E5"> basically uses</font>

134
00:06:18,919 --> 00:06:24,560
this attribute buffer from from userland

135
00:06:21,110 --> 00:06:28,520
<font color="#CCCCCC">and copies into a kernel buffer</font><font color="#E5E5E5"> it does</font>

136
00:06:24,560 --> 00:06:30,290
<font color="#CCCCCC">that so that</font><font color="#E5E5E5"> it doesn't have to copy the</font>

137
00:06:28,520 --> 00:06:32,570
buffer<font color="#CCCCCC"> part by</font><font color="#E5E5E5"> parts so it takes the</font>

138
00:06:30,290 --> 00:06:36,050
<font color="#E5E5E5">whole buffer checks if</font><font color="#CCCCCC"> the size does not</font>

139
00:06:32,570 --> 00:06:38,060
exist<font color="#CCCCCC"> 8 kilobyte and if it's smaller</font>

140
00:06:36,050 --> 00:06:38,780
than 8 kilobyte II will allocate this<font color="#E5E5E5"> on</font>

141
00:06:38,060 --> 00:06:41,650
the kernel

142
00:06:38,780 --> 00:06:43,638
<font color="#CCCCCC">Heep with a function called malach</font><font color="#E5E5E5"> and</font>

143
00:06:41,650 --> 00:06:45,888
then the next thing it does it basically

144
00:06:43,639 --> 00:06:50,419
copies the user data<font color="#E5E5E5"> all the user</font>

145
00:06:45,889 --> 00:06:52,870
supplied<font color="#E5E5E5"> attributes into kernel and so</font>

146
00:06:50,419 --> 00:06:56,030
that's<font color="#E5E5E5"> beginning then</font><font color="#CCCCCC"> the parsing starts</font>

147
00:06:52,870 --> 00:06:58,850
<font color="#E5E5E5">and the passing of</font><font color="#CCCCCC"> this buffer happens</font>

148
00:06:56,030 --> 00:07:02,479
in the the way<font color="#CCCCCC"> that first</font><font color="#E5E5E5"> the cursor is</font>

149
00:06:58,850 --> 00:07:04,160
set to the buffer start and later on

150
00:07:02,480 --> 00:07:06,560
during the<font color="#CCCCCC"> whole passing the cursor</font>

151
00:07:04,160 --> 00:07:09,560
<font color="#E5E5E5">always points to the current</font><font color="#CCCCCC"> position in</font>

152
00:07:06,560 --> 00:07:11,690
the buffer additionally it also keeps<font color="#E5E5E5"> a</font>

153
00:07:09,560 --> 00:07:18,250
pointer to the end so it can check if

154
00:07:11,690 --> 00:07:18,250
you go over<font color="#E5E5E5"> the bounds then it basically</font>

155
00:07:18,430 --> 00:07:25,400
checks for<font color="#E5E5E5"> every bit in the bit field</font>

156
00:07:22,790 --> 00:07:28,250
<font color="#E5E5E5">for all the possible attributes that you</font>

157
00:07:25,400 --> 00:07:30,260
<font color="#E5E5E5">can set it will check</font><font color="#CCCCCC"> do we have the</font>

158
00:07:28,250 --> 00:07:32,630
data for that<font color="#E5E5E5"> or don't we set this</font>

159
00:07:30,260 --> 00:07:35,539
attribute<font color="#E5E5E5"> so the moment we have</font><font color="#CCCCCC"> this</font>

160
00:07:32,630 --> 00:07:38,510
data it<font color="#E5E5E5"> basically then takes the data</font>

161
00:07:35,540 --> 00:07:41,900
out<font color="#CCCCCC"> of the buffer and applies it to some</font>

162
00:07:38,510 --> 00:07:44,000
internal data structures so it<font color="#E5E5E5"> usually</font>

163
00:07:41,900 --> 00:07:46,070
use a number of<font color="#E5E5E5"> markers for that they're</font>

164
00:07:44,000 --> 00:07:48,410
all called attribute unpack<font color="#E5E5E5"> and</font><font color="#CCCCCC"> then</font>

165
00:07:46,070 --> 00:07:50,710
whatever data type they<font color="#CCCCCC"> are unpack so</font>

166
00:07:48,410 --> 00:07:54,830
this is done for<font color="#CCCCCC"> all these smaller</font>

167
00:07:50,710 --> 00:07:57,469
<font color="#E5E5E5">attributes like time stems</font><font color="#CCCCCC"> you IDs and</font>

168
00:07:54,830 --> 00:08:00,979
all<font color="#CCCCCC"> this kind of</font><font color="#E5E5E5"> stuff but sometimes</font>

169
00:07:57,470 --> 00:08:02,990
there are<font color="#CCCCCC"> bigger attribute data sets</font>

170
00:08:00,979 --> 00:08:05,360
that<font color="#CCCCCC"> that need</font><font color="#E5E5E5"> to be registered with</font><font color="#CCCCCC"> the</font>

171
00:08:02,990 --> 00:08:07,310
kernel<font color="#E5E5E5"> and in these cases instead of</font>

172
00:08:05,360 --> 00:08:09,680
having the data directly at this

173
00:08:07,310 --> 00:08:12,560
<font color="#E5E5E5">position in the buffer what they put</font>

174
00:08:09,680 --> 00:08:14,450
there is called an<font color="#E5E5E5"> attribute reference</font>

175
00:08:12,560 --> 00:08:18,130
<font color="#E5E5E5">structure this accurate reference</font>

176
00:08:14,450 --> 00:08:20,810
structure is<font color="#CCCCCC"> basically just two</font><font color="#E5E5E5"> values</font><font color="#CCCCCC"> a</font>

177
00:08:18,130 --> 00:08:23,150
relative position inside<font color="#E5E5E5"> the</font><font color="#CCCCCC"> buffer from</font>

178
00:08:20,810 --> 00:08:27,440
this current position where the actual

179
00:08:23,150 --> 00:08:30,349
real data is and then<font color="#CCCCCC"> in</font><font color="#E5E5E5"> length for that</font>

180
00:08:27,440 --> 00:08:33,909
<font color="#E5E5E5">data so long attributes are not stored</font>

181
00:08:30,350 --> 00:08:36,680
in in this sequence<font color="#E5E5E5"> of the attributes</font>

182
00:08:33,909 --> 00:08:40,520
data they are<font color="#E5E5E5"> basically</font><font color="#CCCCCC"> usually stored</font>

183
00:08:36,679 --> 00:08:43,429
towards the end of the buffer<font color="#E5E5E5"> okay and</font>

184
00:08:40,520 --> 00:08:48,920
this<font color="#E5E5E5"> is very important because the back</font>

185
00:08:43,429 --> 00:08:51,969
involves this structure here<font color="#CCCCCC"> so this</font>

186
00:08:48,920 --> 00:08:53,589
year<font color="#E5E5E5"> is the vulnerable code</font>

187
00:08:51,970 --> 00:08:56,079
and this is basically<font color="#E5E5E5"> the code that</font>

188
00:08:53,589 --> 00:08:58,569
passes out of<font color="#CCCCCC"> the</font><font color="#E5E5E5"> buffer whenever you</font>

189
00:08:56,079 --> 00:09:01,120
<font color="#E5E5E5">try to set a volume name because this</font>

190
00:08:58,569 --> 00:09:03,430
function<font color="#E5E5E5"> can also be used the system can</font>

191
00:09:01,120 --> 00:09:05,939
also<font color="#CCCCCC"> be</font><font color="#E5E5E5"> used to not</font><font color="#CCCCCC"> only set file</font>

192
00:09:03,430 --> 00:09:09,370
attributes<font color="#E5E5E5"> but also volume attributes so</font>

193
00:09:05,939 --> 00:09:12,430
here<font color="#CCCCCC"> this is</font><font color="#E5E5E5"> the code</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> ECHA to change</font>

194
00:09:09,370 --> 00:09:16,000
the<font color="#E5E5E5"> the volume name and the first thing</font>

195
00:09:12,430 --> 00:09:17,620
that<font color="#E5E5E5"> happens is it sets the volume name</font>

196
00:09:16,000 --> 00:09:19,750
pointer<font color="#CCCCCC"> to the current cursor which</font>

197
00:09:17,620 --> 00:09:24,129
means it's<font color="#E5E5E5"> the current address in the</font>

198
00:09:19,750 --> 00:09:26,139
buffer<font color="#E5E5E5"> the next thing is does</font><font color="#CCCCCC"> it unpacks</font>

199
00:09:24,129 --> 00:09:29,139
this attribute reference from from this

200
00:09:26,139 --> 00:09:32,350
address<font color="#E5E5E5"> and now it works</font><font color="#CCCCCC"> with this</font>

201
00:09:29,139 --> 00:09:34,300
unpacked attributes reference so the

202
00:09:32,350 --> 00:09:38,800
next<font color="#E5E5E5"> thing it does it</font><font color="#CCCCCC"> basically adjusts</font>

203
00:09:34,300 --> 00:09:42,128
the volume name<font color="#E5E5E5"> with the offset from the</font>

204
00:09:38,800 --> 00:09:45,310
attribute reference<font color="#E5E5E5"> so it adds it to the</font>

205
00:09:42,129 --> 00:09:47,709
volume name<font color="#E5E5E5"> so keep in</font><font color="#CCCCCC"> mind this is an</font>

206
00:09:45,310 --> 00:09:52,599
integer<font color="#CCCCCC"> a signed integer so it can be</font>

207
00:09:47,709 --> 00:09:54,819
<font color="#E5E5E5">positive or</font><font color="#CCCCCC"> negative the next thing is</font>

208
00:09:52,600 --> 00:09:56,620
<font color="#E5E5E5">it then checks that the volume name was</font>

209
00:09:54,819 --> 00:10:00,219
not just put outside<font color="#E5E5E5"> of the buffer with</font>

210
00:09:56,620 --> 00:10:03,730
this adding the offset<font color="#E5E5E5"> and it also</font>

211
00:10:00,220 --> 00:10:06,579
checks that if we have the volume plus

212
00:10:03,730 --> 00:10:11,800
<font color="#CCCCCC">the</font><font color="#E5E5E5"> links</font><font color="#CCCCCC"> that we are still</font><font color="#E5E5E5"> inside the</font>

213
00:10:06,579 --> 00:10:14,258
buffer<font color="#E5E5E5"> and finally Apple decided that</font>

214
00:10:11,800 --> 00:10:16,959
all these<font color="#E5E5E5"> volumes need to be</font><font color="#CCCCCC"> zero</font>

215
00:10:14,259 --> 00:10:19,600
terminated and they ensure that<font color="#CCCCCC"> the data</font>

216
00:10:16,959 --> 00:10:22,719
<font color="#E5E5E5">are</font><font color="#CCCCCC"> zero terminated</font><font color="#E5E5E5"> so they write a zero</font>

217
00:10:19,600 --> 00:10:25,120
byte at the end of that volume<font color="#E5E5E5"> name so</font>

218
00:10:22,720 --> 00:10:28,050
<font color="#E5E5E5">usually inside the buffer</font><font color="#CCCCCC"> that</font><font color="#E5E5E5"> is</font>

219
00:10:25,120 --> 00:10:28,050
supplied<font color="#CCCCCC"> by</font><font color="#E5E5E5"> the user</font>

220
00:10:28,139 --> 00:10:36,309
<font color="#E5E5E5">however this whole thing has a problem</font><font color="#CCCCCC"> I</font>

221
00:10:32,889 --> 00:10:38,529
<font color="#E5E5E5">mentioned it earlier this data offset</font>

222
00:10:36,309 --> 00:10:41,379
<font color="#E5E5E5">inside</font><font color="#CCCCCC"> the attribute reference is a</font>

223
00:10:38,529 --> 00:10:44,379
signed integer<font color="#E5E5E5"> so when you add it</font><font color="#CCCCCC"> to the</font>

224
00:10:41,379 --> 00:10:47,079
wall<font color="#CCCCCC"> named pointer</font><font color="#E5E5E5"> you can actually make</font>

225
00:10:44,379 --> 00:10:50,470
it point<font color="#E5E5E5"> way outside</font><font color="#CCCCCC"> of the buffer in</font>

226
00:10:47,079 --> 00:10:53,800
front of the buffer<font color="#E5E5E5"> and then the</font><font color="#CCCCCC"> write</font>

227
00:10:50,470 --> 00:10:57,250
later on will happen<font color="#E5E5E5"> outside</font><font color="#CCCCCC"> of the</font>

228
00:10:53,800 --> 00:10:59,529
buffer<font color="#CCCCCC"> because this check in the middle</font>

229
00:10:57,250 --> 00:11:01,000
will not check<font color="#E5E5E5"> against the start of the</font>

230
00:10:59,529 --> 00:11:02,649
<font color="#E5E5E5">buffered will only check against the bar</font>

231
00:11:01,000 --> 00:11:04,779
at<font color="#E5E5E5"> the end of the buffer so</font>

232
00:11:02,649 --> 00:11:06,850
we have moved our<font color="#E5E5E5"> volume outside of the</font>

233
00:11:04,779 --> 00:11:08,740
buffer in front of it<font color="#E5E5E5"> this check will</font>

234
00:11:06,850 --> 00:11:11,199
never trigger so we right out of<font color="#E5E5E5"> the</font>

235
00:11:08,740 --> 00:11:13,990
buffer<font color="#E5E5E5"> in front of it</font><font color="#CCCCCC"> so to make it</font><font color="#E5E5E5"> more</font>

236
00:11:11,199 --> 00:11:18,758
<font color="#CCCCCC">visualized here this is what would</font>

237
00:11:13,990 --> 00:11:20,499
happen<font color="#E5E5E5"> we have this allocated by</font><font color="#CCCCCC"> the way</font>

238
00:11:18,759 --> 00:11:23,050
whenever<font color="#E5E5E5"> we allocate something with</font>

239
00:11:20,499 --> 00:11:26,379
<font color="#CCCCCC">malloc</font><font color="#E5E5E5"> there is a size field in the</font>

240
00:11:23,050 --> 00:11:30,639
beginning and then<font color="#E5E5E5"> we have the volume</font>

241
00:11:26,379 --> 00:11:33,759
name pointer<font color="#E5E5E5"> is the yellow</font><font color="#CCCCCC"> ya box</font><font color="#E5E5E5"> and</font>

242
00:11:30,639 --> 00:11:38,800
now we add the attribute offset and

243
00:11:33,759 --> 00:11:40,869
<font color="#E5E5E5">suddenly we are in this red area and we</font>

244
00:11:38,800 --> 00:11:43,389
add<font color="#CCCCCC"> Lee Lang's to</font><font color="#E5E5E5"> it which might be one</font>

245
00:11:40,869 --> 00:11:45,519
and then we have<font color="#E5E5E5"> plus one minus</font><font color="#CCCCCC"> one is</font>

246
00:11:43,389 --> 00:11:47,920
<font color="#E5E5E5">zero so we write exactly at this</font>

247
00:11:45,519 --> 00:11:50,949
<font color="#E5E5E5">position</font><font color="#CCCCCC"> a zero byte which is outside</font><font color="#E5E5E5"> of</font>

248
00:11:47,920 --> 00:11:53,829
the buffer so it's a heap corruption

249
00:11:50,949 --> 00:11:59,979
outside<font color="#E5E5E5"> of the buffer</font><font color="#CCCCCC"> it's a single zero</font>

250
00:11:53,829 --> 00:12:00,729
byte right so then this was found<font color="#CCCCCC"> in iOS</font>

251
00:11:59,980 --> 00:12:03,309
<font color="#CCCCCC">5</font>

252
00:12:00,730 --> 00:12:05,350
I wrote the expert for it and used<font color="#E5E5E5"> it</font>

253
00:12:03,309 --> 00:12:09,160
for<font color="#E5E5E5"> my private</font><font color="#CCCCCC"> jailbreak and then</font>

254
00:12:05,350 --> 00:12:11,499
<font color="#E5E5E5">suddenly I was 6 came out and this was</font>

255
00:12:09,160 --> 00:12:16,899
fixed<font color="#E5E5E5"> theoretically</font>

256
00:12:11,499 --> 00:12:18,910
so<font color="#E5E5E5"> Apple</font><font color="#CCCCCC"> tried</font><font color="#E5E5E5"> to fix this</font><font color="#CCCCCC"> which</font>

257
00:12:16,899 --> 00:12:20,860
basically<font color="#E5E5E5"> means the Apple developers</font>

258
00:12:18,910 --> 00:12:24,249
were kinda aware that there was<font color="#E5E5E5"> a</font>

259
00:12:20,860 --> 00:12:30,040
<font color="#E5E5E5">security problem or some problem</font><font color="#CCCCCC"> and</font>

260
00:12:24,249 --> 00:12:32,610
they started to fix<font color="#E5E5E5"> it with iOS 6 but as</font>

261
00:12:30,040 --> 00:12:34,870
so often they didn't get<font color="#E5E5E5"> it right and</font>

262
00:12:32,610 --> 00:12:38,949
they actually didn't<font color="#E5E5E5"> get a ride for</font>

263
00:12:34,870 --> 00:12:41,709
<font color="#CCCCCC">three years one</font><font color="#E5E5E5"> reason for that is</font>

264
00:12:38,949 --> 00:12:44,199
likely or<font color="#E5E5E5"> maybe I</font><font color="#CCCCCC"> don't know how they</font>

265
00:12:41,709 --> 00:12:47,128
work internally<font color="#E5E5E5"> but it could be that</font>

266
00:12:44,199 --> 00:12:50,079
<font color="#E5E5E5">some developer just saw a crash report</font>

267
00:12:47,129 --> 00:12:52,149
<font color="#CCCCCC">he saw what maybe the reason is he fixed</font>

268
00:12:50,079 --> 00:12:54,729
<font color="#E5E5E5">it and it was never escalated to the</font>

269
00:12:52,149 --> 00:12:56,860
security team<font color="#CCCCCC"> to highlight the day they</font>

270
00:12:54,730 --> 00:12:58,480
<font color="#CCCCCC">just had</font><font color="#E5E5E5"> fixed</font><font color="#CCCCCC"> the security problem</font><font color="#E5E5E5"> so</font>

271
00:12:56,860 --> 00:13:00,819
<font color="#E5E5E5">maybe this was</font><font color="#CCCCCC"> just a developer</font><font color="#E5E5E5"> like</font>

272
00:12:58,480 --> 00:13:04,869
fixing<font color="#E5E5E5"> the</font><font color="#CCCCCC"> code at this point and made</font>

273
00:13:00,819 --> 00:13:08,319
it not crash<font color="#CCCCCC"> anymore so the fix that</font>

274
00:13:04,869 --> 00:13:10,809
<font color="#CCCCCC">they applied was basically they added</font>

275
00:13:08,319 --> 00:13:12,790
<font color="#E5E5E5">this new security check in there where</font>

276
00:13:10,809 --> 00:13:16,300
they check that the data offset what we

277
00:13:12,790 --> 00:13:19,650
are giving<font color="#CCCCCC"> to the code is</font><font color="#E5E5E5"> not below zero</font>

278
00:13:16,300 --> 00:13:24,069
so the idea is<font color="#E5E5E5"> now the volume</font><font color="#CCCCCC"> M plus</font><font color="#E5E5E5"> the</font>

279
00:13:19,650 --> 00:13:26,140
plus<font color="#CCCCCC"> C address will alway</font><font color="#E5E5E5"> a</font><font color="#CCCCCC"> Parsi Delta</font>

280
00:13:24,070 --> 00:13:28,450
will always be<font color="#E5E5E5"> inside the buffer because</font>

281
00:13:26,140 --> 00:13:30,460
<font color="#E5E5E5">it's always positive</font><font color="#CCCCCC"> so then the</font>

282
00:13:28,450 --> 00:13:32,500
security<font color="#CCCCCC"> check afterward will catch when</font>

283
00:13:30,460 --> 00:13:37,930
we go over the end and everything<font color="#E5E5E5"> is</font>

284
00:13:32,500 --> 00:13:40,870
fine so<font color="#CCCCCC"> that was the basic idea well</font><font color="#E5E5E5"> I</font>

285
00:13:37,930 --> 00:13:43,870
<font color="#E5E5E5">rewrote my exploit and still worked so</font>

286
00:13:40,870 --> 00:13:48,730
why because<font color="#E5E5E5"> this</font><font color="#CCCCCC"> is not the only problem</font>

287
00:13:43,870 --> 00:13:51,670
<font color="#E5E5E5">in this code</font><font color="#CCCCCC"> so then a year</font><font color="#E5E5E5"> later iOS 7</font>

288
00:13:48,730 --> 00:13:55,950
came out and we could see in<font color="#E5E5E5"> the source</font>

289
00:13:51,670 --> 00:13:59,439
code<font color="#CCCCCC"> that Apple had applied another fix</font>

290
00:13:55,950 --> 00:14:01,270
<font color="#CCCCCC">this time the fix they applied was they</font>

291
00:13:59,440 --> 00:14:06,070
are<font color="#E5E5E5"> checking</font><font color="#CCCCCC"> that the attribute</font><font color="#E5E5E5"> length</font>

292
00:14:01,270 --> 00:14:08,500
is not<font color="#E5E5E5"> zero so</font><font color="#CCCCCC"> you can see down</font><font color="#E5E5E5"> there</font>

293
00:14:06,070 --> 00:14:12,520
<font color="#E5E5E5">there right</font><font color="#CCCCCC"> -</font><font color="#E5E5E5"> the volume</font><font color="#CCCCCC"> name at</font>

294
00:14:08,500 --> 00:14:14,650
attribute<font color="#CCCCCC"> lengths - 1 and if</font><font color="#E5E5E5"> you have a</font>

295
00:14:12,520 --> 00:14:17,800
<font color="#CCCCCC">0 in the attribute lengths you would</font>

296
00:14:14,650 --> 00:14:21,189
write a volume name offset<font color="#CCCCCC"> minus 1 which</font>

297
00:14:17,800 --> 00:14:25,359
<font color="#E5E5E5">will be one bind in front of the volume</font>

298
00:14:21,190 --> 00:14:28,530
name<font color="#E5E5E5"> so in the case</font><font color="#CCCCCC"> of iOS</font><font color="#E5E5E5"> and Mac OS</font>

299
00:14:25,360 --> 00:14:32,470
this would likely not be exploitable

300
00:14:28,530 --> 00:14:35,410
<font color="#E5E5E5">because this byte directly before the</font>

301
00:14:32,470 --> 00:14:37,600
<font color="#E5E5E5">buffer would be in the size field of the</font>

302
00:14:35,410 --> 00:14:39,550
buffer<font color="#E5E5E5"> and the highest byte of the size</font>

303
00:14:37,600 --> 00:14:42,160
<font color="#E5E5E5">field on a little</font><font color="#CCCCCC"> endian system would</font>

304
00:14:39,550 --> 00:14:45,219
always be<font color="#CCCCCC"> zero anyway so we write a</font><font color="#E5E5E5"> 0</font>

305
00:14:42,160 --> 00:14:47,920
<font color="#CCCCCC">over</font><font color="#E5E5E5"> 0 so that would not</font><font color="#CCCCCC"> be</font><font color="#E5E5E5"> exploitable</font>

306
00:14:45,220 --> 00:14:51,160
normally on a<font color="#CCCCCC"> big-endian</font><font color="#E5E5E5"> system that</font>

307
00:14:47,920 --> 00:14:52,780
will actually<font color="#E5E5E5"> be exploitable</font><font color="#CCCCCC"> so if you</font>

308
00:14:51,160 --> 00:14:54,640
had<font color="#E5E5E5"> like</font><font color="#CCCCCC"> in very</font><font color="#E5E5E5"> very old Mac with</font>

309
00:14:52,780 --> 00:14:57,579
PowerPC then you would still have<font color="#E5E5E5"> an</font>

310
00:14:54,640 --> 00:15:00,160
exploit so but I just told you<font color="#CCCCCC"> that I</font>

311
00:14:57,580 --> 00:15:01,840
just<font color="#E5E5E5"> revealed my expert and continue</font>

312
00:15:00,160 --> 00:15:04,180
working<font color="#E5E5E5"> so that was not the actual</font>

313
00:15:01,840 --> 00:15:07,380
problem I<font color="#E5E5E5"> was talking about so there</font>

314
00:15:04,180 --> 00:15:10,209
must<font color="#E5E5E5"> be more problems in this code</font><font color="#CCCCCC"> and</font>

315
00:15:07,380 --> 00:15:11,950
this<font color="#E5E5E5"> year is</font><font color="#CCCCCC"> basically</font><font color="#E5E5E5"> the problem that</font>

316
00:15:10,210 --> 00:15:15,520
remained all the time and<font color="#E5E5E5"> that Apple</font>

317
00:15:11,950 --> 00:15:18,970
didn't see it the problem is<font color="#E5E5E5"> when we add</font>

318
00:15:15,520 --> 00:15:22,060
this data offset to<font color="#CCCCCC"> the volume</font><font color="#E5E5E5"> name the</font>

319
00:15:18,970 --> 00:15:26,080
data of<font color="#CCCCCC"> cert cannot be</font><font color="#E5E5E5"> 0 but it can be a</font>

320
00:15:22,060 --> 00:15:28,260
very very<font color="#E5E5E5"> very high positive value and</font>

321
00:15:26,080 --> 00:15:33,390
<font color="#E5E5E5">on a 32-bit system</font>

322
00:15:28,260 --> 00:15:36,810
and back then at<font color="#CCCCCC"> ios7</font><font color="#E5E5E5"> time</font><font color="#CCCCCC"> there were</font>

323
00:15:33,390 --> 00:15:39,270
nearly only 32-bit systems<font color="#E5E5E5"> so on 32-bit</font>

324
00:15:36,810 --> 00:15:41,310
systems this can wrap the pointer around

325
00:15:39,270 --> 00:15:44,640
<font color="#E5E5E5">the address space</font><font color="#CCCCCC"> so suddenly the</font>

326
00:15:41,310 --> 00:15:46,920
pointer is smaller than<font color="#E5E5E5"> the buffer so it</font>

327
00:15:44,640 --> 00:15:51,060
will check<font color="#E5E5E5"> will pass the next check for</font>

328
00:15:46,920 --> 00:15:53,219
<font color="#CCCCCC">sure and then</font><font color="#E5E5E5"> because we also control</font>

329
00:15:51,060 --> 00:15:56,010
the<font color="#E5E5E5"> attribute</font><font color="#CCCCCC"> lengths we</font><font color="#E5E5E5"> can</font><font color="#CCCCCC"> basically</font>

330
00:15:53,220 --> 00:15:58,170
address every single byte between the

331
00:15:56,010 --> 00:16:03,510
beginning<font color="#E5E5E5"> of</font><font color="#CCCCCC"> the address space up to the</font>

332
00:15:58,170 --> 00:16:07,079
buffer because the first<font color="#E5E5E5"> addition will</font>

333
00:16:03,510 --> 00:16:09,240
just wrap the pointer around to the to

334
00:16:07,080 --> 00:16:11,160
the to the<font color="#CCCCCC"> low half of the address space</font>

335
00:16:09,240 --> 00:16:16,230
and then the attribute lengths can move

336
00:16:11,160 --> 00:16:18,540
it around<font color="#E5E5E5"> up to the buffer this means we</font>

337
00:16:16,230 --> 00:16:22,470
<font color="#CCCCCC">can still write anywhere in front of the</font>

338
00:16:18,540 --> 00:16:25,140
buffer a single zero byte so with iOS 9

339
00:16:22,470 --> 00:16:27,480
<font color="#E5E5E5">Apple finally rewrote the whole</font><font color="#CCCCCC"> cheques</font>

340
00:16:25,140 --> 00:16:30,660
<font color="#E5E5E5">and as you can see</font><font color="#CCCCCC"> they have now written</font>

341
00:16:27,480 --> 00:16:31,230
a lot<font color="#E5E5E5"> of</font><font color="#CCCCCC"> security</font><font color="#E5E5E5"> checks here which is</font>

342
00:16:30,660 --> 00:16:32,880
buried

343
00:16:31,230 --> 00:16:36,270
basically parameter verification

344
00:16:32,880 --> 00:16:39,390
overkill<font color="#CCCCCC"> they have a number</font><font color="#E5E5E5"> of checks in</font>

345
00:16:36,270 --> 00:16:43,199
there that I believe are<font color="#E5E5E5"> redundant</font><font color="#CCCCCC"> but</font>

346
00:16:39,390 --> 00:16:47,160
still they do this<font color="#E5E5E5"> likely they do it so</font>

347
00:16:43,200 --> 00:16:50,010
in this crazy way because modern<font color="#CCCCCC"> C</font>

348
00:16:47,160 --> 00:16:52,319
compilers have<font color="#CCCCCC"> this habit to try</font><font color="#E5E5E5"> to</font>

349
00:16:50,010 --> 00:16:54,000
catch<font color="#CCCCCC"> edge</font><font color="#E5E5E5"> situation that are impossible</font>

350
00:16:52,320 --> 00:16:58,980
and<font color="#E5E5E5"> then they optimize some of these</font>

351
00:16:54,000 --> 00:17:01,230
<font color="#E5E5E5">checks away</font><font color="#CCCCCC"> okay so this</font><font color="#E5E5E5"> is the</font>

352
00:16:58,980 --> 00:17:03,990
<font color="#CCCCCC">vulnerability that the jailbreak used we</font>

353
00:17:01,230 --> 00:17:06,420
can write<font color="#E5E5E5"> one zero byte outside of the</font>

354
00:17:03,990 --> 00:17:09,270
buffer before<font color="#E5E5E5"> the buffer and Apple</font>

355
00:17:06,420 --> 00:17:16,190
didn't get it patched between iOS<font color="#E5E5E5"> 6</font><font color="#CCCCCC"> & 9</font>

356
00:17:09,270 --> 00:17:16,190
<font color="#CCCCCC">so how do we exploit such a thing</font>

357
00:17:16,410 --> 00:17:23,400
first of all the lifetime<font color="#CCCCCC"> of this back</font>

358
00:17:19,140 --> 00:17:28,380
was from early versions<font color="#E5E5E5"> of iOS</font><font color="#CCCCCC"> up to iOS</font>

359
00:17:23,400 --> 00:17:31,110
8<font color="#CCCCCC"> or</font><font color="#E5E5E5"> 4.1 the last one</font><font color="#CCCCCC"> before I was 9 and</font>

360
00:17:28,380 --> 00:17:34,920
I personally knew about this<font color="#E5E5E5"> box since I</font>

361
00:17:31,110 --> 00:17:37,939
was<font color="#E5E5E5"> 5</font><font color="#CCCCCC"> between this time there has</font><font color="#E5E5E5"> been</font>

362
00:17:34,920 --> 00:17:41,520
lots and lots of<font color="#E5E5E5"> changes in iOS and</font>

363
00:17:37,940 --> 00:17:44,400
because<font color="#CCCCCC"> of the different</font><font color="#E5E5E5"> changes in iOS</font>

364
00:17:41,520 --> 00:17:47,010
I had to<font color="#CCCCCC"> write different</font><font color="#E5E5E5"> exploits for</font>

365
00:17:44,400 --> 00:17:52,020
the same<font color="#E5E5E5"> bug just because of the changes</font>

366
00:17:47,010 --> 00:17:56,010
of<font color="#CCCCCC"> the architecture of</font><font color="#E5E5E5"> iOS so let's look</font>

367
00:17:52,020 --> 00:17:59,730
at I was<font color="#CCCCCC"> five first</font><font color="#E5E5E5"> so back at the time</font>

368
00:17:56,010 --> 00:18:02,190
of I was five<font color="#CCCCCC"> there were no mitigations</font>

369
00:17:59,730 --> 00:18:05,520
in<font color="#E5E5E5"> kernel and so writing a kernel</font>

370
00:18:02,190 --> 00:18:09,090
exploit on iOS<font color="#CCCCCC"> five was how a</font><font color="#E5E5E5"> daemon</font>

371
00:18:05,520 --> 00:18:12,360
causes<font color="#E5E5E5"> a walk in the park</font><font color="#CCCCCC"> there was also</font>

372
00:18:09,090 --> 00:18:14,909
<font color="#E5E5E5">no userland dereference protection iOS</font>

373
00:18:12,360 --> 00:18:17,669
so the kernel could directly<font color="#E5E5E5"> use</font><font color="#CCCCCC"> user</font>

374
00:18:14,910 --> 00:18:20,460
<font color="#CCCCCC">land data structures and even</font><font color="#E5E5E5"> worse</font>

375
00:18:17,670 --> 00:18:24,030
there was no protection<font color="#E5E5E5"> against userland</font>

376
00:18:20,460 --> 00:18:28,050
code<font color="#E5E5E5"> being executed in the context of</font>

377
00:18:24,030 --> 00:18:31,290
<font color="#E5E5E5">the kernel</font><font color="#CCCCCC"> so back</font><font color="#E5E5E5"> then all the jail</font>

378
00:18:28,050 --> 00:18:33,720
breaks basically tried to falling they

379
00:18:31,290 --> 00:18:36,780
would map some malicious data and

380
00:18:33,720 --> 00:18:38,100
malicious code in userland<font color="#CCCCCC"> and then they</font>

381
00:18:36,780 --> 00:18:41,160
were<font color="#E5E5E5"> used in using the memory</font>

382
00:18:38,100 --> 00:18:44,909
corruptions<font color="#CCCCCC"> to change kernel pointers</font>

383
00:18:41,160 --> 00:18:48,470
into userland pointers<font color="#E5E5E5"> so for example by</font>

384
00:18:44,910 --> 00:18:52,440
decreasing the<font color="#E5E5E5"> eight zero often enough</font>

385
00:18:48,470 --> 00:18:56,400
<font color="#E5E5E5">to be a</font><font color="#CCCCCC"> new zealand address space</font><font color="#E5E5E5"> this</font>

386
00:18:52,440 --> 00:19:00,170
is<font color="#E5E5E5"> for example</font><font color="#CCCCCC"> a</font><font color="#E5E5E5"> famous back</font><font color="#CCCCCC"> bye-bye</font>

387
00:18:56,400 --> 00:19:03,420
comics who were able<font color="#CCCCCC"> to</font><font color="#E5E5E5"> trigger a</font>

388
00:19:00,170 --> 00:19:05,220
decrement<font color="#E5E5E5"> repeatedly so it would take a</font>

389
00:19:03,420 --> 00:19:07,590
pointer in the system<font color="#CCCCCC"> code</font><font color="#E5E5E5"> table and</font>

390
00:19:05,220 --> 00:19:10,410
just<font color="#CCCCCC"> deke</font><font color="#E5E5E5"> remanded as often until it was</font>

391
00:19:07,590 --> 00:19:13,559
basically pointing into<font color="#CCCCCC"> user land in our</font>

392
00:19:10,410 --> 00:19:16,320
case we<font color="#CCCCCC"> can write a single</font><font color="#E5E5E5"> zero byte so</font>

393
00:19:13,559 --> 00:19:18,960
this means we<font color="#CCCCCC"> can easily</font><font color="#E5E5E5"> make an 8 0</font>

394
00:19:16,320 --> 00:19:22,740
<font color="#E5E5E5">something pointer into</font><font color="#CCCCCC"> a</font><font color="#E5E5E5"> 0 0</font><font color="#CCCCCC"> which is a</font>

395
00:19:18,960 --> 00:19:26,010
<font color="#CCCCCC">userland pointer and because we can also</font>

396
00:19:22,740 --> 00:19:28,620
directly execute code in userland<font color="#E5E5E5"> memory</font>

397
00:19:26,010 --> 00:19:32,700
but in kernel context<font color="#CCCCCC"> there</font><font color="#E5E5E5"> was no</font>

398
00:19:28,620 --> 00:19:34,409
problem<font color="#E5E5E5"> to get code execution so the way</font>

399
00:19:32,700 --> 00:19:36,150
how this would work<font color="#E5E5E5"> is the first step</font>

400
00:19:34,410 --> 00:19:36,510
would be<font color="#E5E5E5"> we</font><font color="#CCCCCC"> need to do some</font><font color="#E5E5E5"> heap Feng</font>

401
00:19:36,150 --> 00:19:40,590
<font color="#CCCCCC">shooey</font>

402
00:19:36,510 --> 00:19:44,640
and what we<font color="#E5E5E5"> would do is we would</font><font color="#CCCCCC"> fill</font>

403
00:19:40,590 --> 00:19:47,820
the kernel heap with C++<font color="#E5E5E5"> objects by</font>

404
00:19:44,640 --> 00:19:52,890
opening a driver connection to this

405
00:19:47,820 --> 00:19:54,960
<font color="#CCCCCC">Apple JPEG driver</font><font color="#E5E5E5"> usually with this API</font>

406
00:19:52,890 --> 00:19:56,940
function<font color="#E5E5E5"> iOS service open extender</font>

407
00:19:54,960 --> 00:19:59,159
and this function<font color="#E5E5E5"> will</font><font color="#CCCCCC"> also allow us to</font>

408
00:19:56,940 --> 00:20:01,980
give it<font color="#E5E5E5"> xml properties and these xml</font>

409
00:19:59,159 --> 00:20:04,500
properties would then be passed<font color="#E5E5E5"> into</font><font color="#CCCCCC"> C++</font>

410
00:20:01,980 --> 00:20:07,110
objects in kernel and how this actually

411
00:20:04,500 --> 00:20:11,000
<font color="#CCCCCC">works in detail there's a whole talk</font>

412
00:20:07,110 --> 00:20:14,129
about this from<font color="#CCCCCC"> blackhat 2012</font><font color="#E5E5E5"> where I</font>

413
00:20:11,000 --> 00:20:16,020
did this introduces<font color="#E5E5E5"> always answer your</font>

414
00:20:14,130 --> 00:20:17,490
<font color="#CCCCCC">likes it's</font><font color="#E5E5E5"> me</font><font color="#CCCCCC"> Oh keep</font><font color="#E5E5E5"> Feng Shui</font>

415
00:20:16,020 --> 00:20:19,649
technique<font color="#E5E5E5"> so if you're</font><font color="#CCCCCC"> interested in</font>

416
00:20:17,490 --> 00:20:22,470
<font color="#CCCCCC">that</font><font color="#E5E5E5"> just go back</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> that talk and look</font>

417
00:20:19,649 --> 00:20:24,149
at it<font color="#CCCCCC"> but</font><font color="#E5E5E5"> basically</font><font color="#CCCCCC"> the trick</font><font color="#E5E5E5"> back then</font>

418
00:20:22,470 --> 00:20:26,700
was you can<font color="#E5E5E5"> first of all create all</font>

419
00:20:24,149 --> 00:20:28,918
these objects<font color="#E5E5E5"> and then you can poke hole</font>

420
00:20:26,700 --> 00:20:33,929
in the middle<font color="#CCCCCC"> of these objects by</font>

421
00:20:28,919 --> 00:20:36,090
putting the same key<font color="#E5E5E5"> into a</font><font color="#CCCCCC"> dictionary</font>

422
00:20:33,929 --> 00:20:37,830
again<font color="#E5E5E5"> that was previously used which</font>

423
00:20:36,090 --> 00:20:40,649
would then trigger<font color="#E5E5E5"> a free of the</font>

424
00:20:37,830 --> 00:20:42,480
previously put object so in this case

425
00:20:40,649 --> 00:20:44,370
you can see it in the<font color="#E5E5E5"> graphics we have</font>

426
00:20:42,480 --> 00:20:46,440
first created a bunch<font color="#E5E5E5"> of objects with</font><font color="#CCCCCC"> me</font>

427
00:20:44,370 --> 00:20:49,379
tables and then we have poked a hole in

428
00:20:46,440 --> 00:20:52,830
the middle<font color="#E5E5E5"> of them so let</font><font color="#CCCCCC"> us the heap</font>

429
00:20:49,380 --> 00:20:55,500
<font color="#CCCCCC">make sure</font><font color="#E5E5E5"> that this is set</font><font color="#CCCCCC"> up the next</font>

430
00:20:52,830 --> 00:20:58,049
thing now is we<font color="#CCCCCC"> need to trigger the</font>

431
00:20:55,500 --> 00:21:00,240
memory<font color="#E5E5E5"> corruption so we call set</font>

432
00:20:58,049 --> 00:21:03,418
attribute<font color="#E5E5E5"> list and give it a buffer size</font>

433
00:21:00,240 --> 00:21:06,090
so that<font color="#CCCCCC"> the buffer will be a the same</font>

434
00:21:03,419 --> 00:21:09,120
size including<font color="#CCCCCC"> the size field as one of</font>

435
00:21:06,090 --> 00:21:12,029
these objects what will<font color="#E5E5E5"> happen then</font><font color="#CCCCCC"> is</font>

436
00:21:09,120 --> 00:21:14,699
that<font color="#CCCCCC"> it will be loaded into the same</font>

437
00:21:12,029 --> 00:21:17,970
position<font color="#CCCCCC"> as a previous object</font><font color="#E5E5E5"> and we now</font>

438
00:21:14,700 --> 00:21:20,399
have placed it in between<font color="#E5E5E5"> those now when</font>

439
00:21:17,970 --> 00:21:22,289
we trigger<font color="#CCCCCC"> the memory corruption by</font>

440
00:21:20,399 --> 00:21:24,809
having like these illegal<font color="#CCCCCC"> values in the</font>

441
00:21:22,289 --> 00:21:27,720
attribute<font color="#CCCCCC"> data offset we can actually</font>

442
00:21:24,809 --> 00:21:31,139
<font color="#E5E5E5">write a zero byte somewhere in front of</font>

443
00:21:27,720 --> 00:21:34,049
<font color="#E5E5E5">our buffer</font><font color="#CCCCCC"> in this case for iOS five we</font>

444
00:21:31,140 --> 00:21:36,360
<font color="#E5E5E5">can choose for example</font><font color="#CCCCCC"> to override</font><font color="#E5E5E5"> the</font>

445
00:21:34,049 --> 00:21:39,210
highest bite of the nearest<font color="#CCCCCC"> V table</font>

446
00:21:36,360 --> 00:21:41,279
pointer<font color="#CCCCCC"> previously the</font><font color="#E5E5E5"> V table</font><font color="#CCCCCC"> pointer</font>

447
00:21:39,210 --> 00:21:43,470
<font color="#E5E5E5">would point to some kernel data</font>

448
00:21:41,279 --> 00:21:45,990
structure<font color="#E5E5E5"> of all the method tables and</font>

449
00:21:43,470 --> 00:21:47,700
now we have made it<font color="#E5E5E5"> zero in the highest</font>

450
00:21:45,990 --> 00:21:51,210
byte so it now<font color="#E5E5E5"> points to userland</font>

451
00:21:47,700 --> 00:21:54,120
memory<font color="#CCCCCC"> this is</font><font color="#E5E5E5"> basically</font><font color="#CCCCCC"> how we look</font>

452
00:21:51,210 --> 00:21:56,100
like we have this real<font color="#E5E5E5"> V table in kernel</font>

453
00:21:54,120 --> 00:21:58,080
that<font color="#E5E5E5"> points to the real kernel code and</font>

454
00:21:56,100 --> 00:22:00,510
we have this object<font color="#E5E5E5"> there with the</font>

455
00:21:58,080 --> 00:22:02,639
overwritten<font color="#E5E5E5"> zero and suddenly it points</font>

456
00:22:00,510 --> 00:22:04,860
to user land points to a fake<font color="#E5E5E5"> V table</font>

457
00:22:02,640 --> 00:22:07,980
<font color="#E5E5E5">and this fake me table would point to</font>

458
00:22:04,860 --> 00:22:08,729
some kernel<font color="#E5E5E5"> shell code that we can just</font>

459
00:22:07,980 --> 00:22:11,160
put<font color="#CCCCCC"> into use</font>

460
00:22:08,730 --> 00:22:13,830
because<font color="#E5E5E5"> remember this I was five there's</font>

461
00:22:11,160 --> 00:22:15,570
no<font color="#E5E5E5"> protection against us the way you</font>

462
00:22:13,830 --> 00:22:18,090
would trigger this<font color="#CCCCCC"> is</font><font color="#E5E5E5"> Pez</font><font color="#CCCCCC"> if you just</font>

463
00:22:15,570 --> 00:22:20,520
<font color="#E5E5E5">close the</font><font color="#CCCCCC"> driver connection then all the</font>

464
00:22:18,090 --> 00:22:22,500
objects<font color="#E5E5E5"> get distracted and including</font>

465
00:22:20,520 --> 00:22:26,400
<font color="#E5E5E5">your overwritten</font><font color="#CCCCCC"> vtable will be</font>

466
00:22:22,500 --> 00:22:28,920
<font color="#E5E5E5">triggered so I was five oh it not so</font>

467
00:22:26,400 --> 00:22:31,380
interesting let's move to some modern<font color="#E5E5E5"> OS</font>

468
00:22:28,920 --> 00:22:34,850
OS so the next ways we would be

469
00:22:31,380 --> 00:22:37,290
<font color="#E5E5E5">interested in is iOS 6 and this is the</font>

470
00:22:34,850 --> 00:22:39,780
milestone in the world of iOS

471
00:22:37,290 --> 00:22:42,540
exploitation because<font color="#CCCCCC"> this is the first</font>

472
00:22:39,780 --> 00:22:45,420
version<font color="#E5E5E5"> of iOS that comes with kernel</font>

473
00:22:42,540 --> 00:22:47,639
<font color="#E5E5E5">level mitigations</font><font color="#CCCCCC"> there's a bunch of</font>

474
00:22:45,420 --> 00:22:51,900
them<font color="#CCCCCC"> but</font><font color="#E5E5E5"> the most important here in this</font>

475
00:22:47,640 --> 00:22:53,940
case our case alarm so the kernel

476
00:22:51,900 --> 00:22:56,940
address space is randomized<font color="#E5E5E5"> mostly the</font>

477
00:22:53,940 --> 00:22:59,690
kernel base address is randomized<font color="#E5E5E5"> we</font>

478
00:22:56,940 --> 00:23:01,770
have no more user space dereferences

479
00:22:59,690 --> 00:23:03,420
<font color="#CCCCCC">because they are now switching the page</font>

480
00:23:01,770 --> 00:23:07,400
tables where when you enter the kernel

481
00:23:03,420 --> 00:23:08,580
<font color="#E5E5E5">and which is even not mentioned on this</font>

482
00:23:07,400 --> 00:23:11,990
here

483
00:23:08,580 --> 00:23:15,720
you cannot just jump<font color="#E5E5E5"> to user land code</font>

484
00:23:11,990 --> 00:23:18,420
<font color="#CCCCCC">it's also not possible</font><font color="#E5E5E5"> because</font><font color="#CCCCCC"> when you</font>

485
00:23:15,720 --> 00:23:20,250
<font color="#E5E5E5">run in kernel level basically none of</font>

486
00:23:18,420 --> 00:23:23,070
the userland memory is<font color="#E5E5E5"> being</font><font color="#CCCCCC"> impeached</font>

487
00:23:20,250 --> 00:23:25,320
in so even if you would jump there<font color="#CCCCCC"> was</font>

488
00:23:23,070 --> 00:23:29,010
nothing be there so<font color="#E5E5E5"> you cannot this</font>

489
00:23:25,320 --> 00:23:31,830
means we<font color="#CCCCCC"> have now</font><font color="#E5E5E5"> two troubles the first</font>

490
00:23:29,010 --> 00:23:34,950
one is we need to first break case alarm

491
00:23:31,830 --> 00:23:36,929
and the second is we need to a different

492
00:23:34,950 --> 00:23:38,400
way to trigger the execution in kernel<font color="#CCCCCC"> M</font>

493
00:23:36,930 --> 00:23:43,920
because we cannot just<font color="#CCCCCC"> put</font><font color="#E5E5E5"> the code in</font>

494
00:23:38,400 --> 00:23:46,770
in userland so back in this<font color="#E5E5E5"> time</font>

495
00:23:43,920 --> 00:23:49,500
<font color="#CCCCCC">breaking is</font><font color="#E5E5E5"> case</font><font color="#CCCCCC"> L are there were a</font>

496
00:23:46,770 --> 00:23:52,110
<font color="#E5E5E5">bunch of info</font><font color="#CCCCCC"> leaks or ever</font><font color="#E5E5E5"> became</font>

497
00:23:49,500 --> 00:23:54,960
public<font color="#CCCCCC"> around this time</font><font color="#E5E5E5"> I have listed</font>

498
00:23:52,110 --> 00:23:56,990
<font color="#E5E5E5">here three</font><font color="#CCCCCC"> of them that were known</font><font color="#E5E5E5"> to my</font>

499
00:23:54,960 --> 00:24:00,540
<font color="#E5E5E5">knowledge to a many parties back then</font>

500
00:23:56,990 --> 00:24:03,240
which was Mac portkey object which was

501
00:24:00,540 --> 00:24:07,230
<font color="#CCCCCC">cakes request</font><font color="#E5E5E5"> both of them</font><font color="#CCCCCC"> Apple needed</font>

502
00:24:03,240 --> 00:24:09,780
several<font color="#E5E5E5"> times to fix them and the last</font>

503
00:24:07,230 --> 00:24:11,940
<font color="#E5E5E5">one is actually very special because</font>

504
00:24:09,780 --> 00:24:15,690
<font color="#E5E5E5">while it was known to certain parties</font>

505
00:24:11,940 --> 00:24:17,940
since the time of iOS 6 it got really

506
00:24:15,690 --> 00:24:19,500
famous last year<font color="#E5E5E5"> because that the last</font>

507
00:24:17,940 --> 00:24:22,110
one<font color="#CCCCCC"> this</font><font color="#E5E5E5"> I or registry and you get</font>

508
00:24:19,500 --> 00:24:24,690
property<font color="#E5E5E5"> bytes is the kernel</font>

509
00:24:22,110 --> 00:24:28,320
formation<font color="#CCCCCC"> league that</font><font color="#E5E5E5"> was used by the</font>

510
00:24:24,690 --> 00:24:31,429
<font color="#CCCCCC">Pegasus iOS malware</font><font color="#E5E5E5"> so that one was</font>

511
00:24:28,320 --> 00:24:33,990
really<font color="#E5E5E5"> used in malware in in the wild</font>

512
00:24:31,429 --> 00:24:36,240
<font color="#CCCCCC">but I know a</font><font color="#E5E5E5"> lot of people who knew</font>

513
00:24:33,990 --> 00:24:38,370
<font color="#E5E5E5">about this bug since the time of iOS 6</font>

514
00:24:36,240 --> 00:24:40,920
<font color="#E5E5E5">so any of these could be used to</font>

515
00:24:38,370 --> 00:24:43,320
<font color="#E5E5E5">basically break here</font><font color="#CCCCCC"> salam but that</font>

516
00:24:40,920 --> 00:24:47,190
would<font color="#CCCCCC"> be too easy for this</font><font color="#E5E5E5"> talk so we</font>

517
00:24:43,320 --> 00:24:48,809
try to do it a<font color="#CCCCCC"> different way</font><font color="#E5E5E5"> so the</font>

518
00:24:47,190 --> 00:24:50,520
first<font color="#CCCCCC"> thing what we</font><font color="#E5E5E5"> want to do is we</font>

519
00:24:48,809 --> 00:24:55,740
need<font color="#E5E5E5"> to exploit this memory corruption</font>

520
00:24:50,520 --> 00:24:58,530
iOS 6<font color="#E5E5E5"> to just create an info leak so</font>

521
00:24:55,740 --> 00:25:01,049
what we do is we first again have to set

522
00:24:58,530 --> 00:25:06,090
up<font color="#CCCCCC"> our heap</font><font color="#E5E5E5"> and what we're trying</font><font color="#CCCCCC"> to do</font>

523
00:25:01,049 --> 00:25:09,660
is we fill the<font color="#E5E5E5"> heap this time with very</font>

524
00:25:06,090 --> 00:25:13,409
specific<font color="#E5E5E5"> IO kit objects this time we</font>

525
00:25:09,660 --> 00:25:16,290
take always data objects and we do it<font color="#CCCCCC"> in</font>

526
00:25:13,410 --> 00:25:21,000
a way<font color="#CCCCCC"> that the actual OS data object and</font>

527
00:25:16,290 --> 00:25:23,220
the data<font color="#E5E5E5"> storage are stored in the same</font>

528
00:25:21,000 --> 00:25:26,070
memory<font color="#E5E5E5"> zone are stored basically</font>

529
00:25:23,220 --> 00:25:28,140
interleaves right next to each<font color="#E5E5E5"> other</font><font color="#CCCCCC"> so</font>

530
00:25:26,070 --> 00:25:30,059
when you<font color="#E5E5E5"> do that your heap could look</font>

531
00:25:28,140 --> 00:25:32,340
something<font color="#CCCCCC"> like</font><font color="#E5E5E5"> you see in the picture</font>

532
00:25:30,059 --> 00:25:35,190
<font color="#E5E5E5">you basically have the object with</font><font color="#CCCCCC"> a V</font>

533
00:25:32,340 --> 00:25:38,070
table<font color="#CCCCCC"> it points somewhere</font><font color="#E5E5E5"> is</font><font color="#CCCCCC"> a pointer</font>

534
00:25:35,190 --> 00:25:39,630
<font color="#CCCCCC">to</font><font color="#E5E5E5"> the</font><font color="#CCCCCC"> next data storage</font><font color="#E5E5E5"> then the after</font>

535
00:25:38,070 --> 00:25:41,490
next<font color="#E5E5E5"> V table which points to the next</font>

536
00:25:39,630 --> 00:25:47,190
<font color="#E5E5E5">data storage and so on and so on and</font><font color="#CCCCCC"> so</font>

537
00:25:41,490 --> 00:25:49,770
on<font color="#CCCCCC"> the next thing</font><font color="#E5E5E5"> would then be you need</font>

538
00:25:47,190 --> 00:25:51,660
<font color="#E5E5E5">to poke the hole again in this case we</font>

539
00:25:49,770 --> 00:25:56,580
<font color="#CCCCCC">poke the</font><font color="#E5E5E5"> hole at the very end because</font>

540
00:25:51,660 --> 00:25:58,500
<font color="#E5E5E5">just like hard to visualize otherwise so</font>

541
00:25:56,580 --> 00:26:02,730
<font color="#CCCCCC">we have set up our heap now we have</font>

542
00:25:58,500 --> 00:26:06,270
<font color="#CCCCCC">basically these interleaved objects data</font>

543
00:26:02,730 --> 00:26:08,790
storage object data storage<font color="#E5E5E5"> and then we</font>

544
00:26:06,270 --> 00:26:11,610
have a<font color="#E5E5E5"> hole so if we now trigger the</font>

545
00:26:08,790 --> 00:26:13,620
memory<font color="#E5E5E5"> corruption</font><font color="#CCCCCC"> we call set attribute</font>

546
00:26:11,610 --> 00:26:15,000
list<font color="#E5E5E5"> again with the right parameters so</font>

547
00:26:13,620 --> 00:26:19,129
<font color="#CCCCCC">that the allocation will be in the same</font>

548
00:26:15,000 --> 00:26:24,030
size and we get allocated<font color="#CCCCCC"> into</font><font color="#E5E5E5"> that same</font>

549
00:26:19,130 --> 00:26:26,250
hole I have now also visualized<font color="#E5E5E5"> that</font>

550
00:26:24,030 --> 00:26:28,740
there is a data point<font color="#E5E5E5"> on each of these</font>

551
00:26:26,250 --> 00:26:35,789
objects<font color="#CCCCCC"> that</font><font color="#E5E5E5"> actually points</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> the data</font>

552
00:26:28,740 --> 00:26:37,369
storage so I will<font color="#E5E5E5"> with light like this</font>

553
00:26:35,789 --> 00:26:40,460
because when you<font color="#CCCCCC"> now trigger the buck</font>

554
00:26:37,369 --> 00:26:43,408
<font color="#CCCCCC">what will</font><font color="#E5E5E5"> happen is you can now target</font>

555
00:26:40,460 --> 00:26:46,229
<font color="#E5E5E5">this data pointer with a relative right</font>

556
00:26:43,409 --> 00:26:48,899
and this<font color="#E5E5E5"> time you not overwrite the</font>

557
00:26:46,229 --> 00:26:51,989
<font color="#E5E5E5">upper</font><font color="#CCCCCC"> byte you overwrite</font><font color="#E5E5E5"> the lower byte</font>

558
00:26:48,899 --> 00:26:55,408
of<font color="#E5E5E5"> the data storage the idea is now that</font>

559
00:26:51,989 --> 00:26:58,529
<font color="#CCCCCC">you make the data storage pointer go to</font>

560
00:26:55,409 --> 00:27:00,989
in<font color="#CCCCCC"> is</font><font color="#E5E5E5"> lowest</font><font color="#CCCCCC"> price</font><font color="#E5E5E5"> to 0 which</font><font color="#CCCCCC"> means</font><font color="#E5E5E5"> the</font>

561
00:26:58,529 --> 00:27:06,539
data storage culture now points earlier

562
00:27:00,989 --> 00:27:10,169
<font color="#E5E5E5">into the same page</font><font color="#CCCCCC"> in this</font><font color="#E5E5E5"> case</font><font color="#CCCCCC"> I have</font>

563
00:27:06,539 --> 00:27:12,509
like fake<font color="#E5E5E5"> that</font><font color="#CCCCCC"> you can see the data the</font>

564
00:27:10,169 --> 00:27:17,190
data<font color="#CCCCCC"> pointer</font><font color="#E5E5E5"> now points suddenly to the</font>

565
00:27:12,509 --> 00:27:19,590
<font color="#CCCCCC">very first object in that page this</font><font color="#E5E5E5"> is</font>

566
00:27:17,190 --> 00:27:21,809
not necessarily<font color="#E5E5E5"> really the beginning of</font>

567
00:27:19,590 --> 00:27:24,658
<font color="#E5E5E5">that object it could be in the middle</font><font color="#CCCCCC"> of</font>

568
00:27:21,809 --> 00:27:27,178
an object it could be somewhere at the

569
00:27:24,659 --> 00:27:29,399
in another<font color="#E5E5E5"> data storage it</font><font color="#CCCCCC"> could be</font>

570
00:27:27,179 --> 00:27:34,739
anywhere it really depends on how big

571
00:27:29,399 --> 00:27:38,248
your objects<font color="#E5E5E5"> are and what the alignment</font>

572
00:27:34,739 --> 00:27:41,489
will do to your pointer when you just

573
00:27:38,249 --> 00:27:43,470
zero out the lowest<font color="#E5E5E5"> byte so you need a</font>

574
00:27:41,489 --> 00:27:46,529
little bit<font color="#E5E5E5"> of control over</font><font color="#CCCCCC"> your</font><font color="#E5E5E5"> heap</font>

575
00:27:43,470 --> 00:27:48,869
when you do that<font color="#E5E5E5"> but what it happens now</font>

576
00:27:46,529 --> 00:27:51,139
is Europe in this case our pointer just

577
00:27:48,869 --> 00:27:54,209
points<font color="#E5E5E5"> to the beginning of an object</font>

578
00:27:51,139 --> 00:27:56,129
<font color="#E5E5E5">that means when we now use this</font><font color="#CCCCCC"> i/o</font>

579
00:27:54,210 --> 00:27:57,749
registry entry get<font color="#E5E5E5"> property by its</font>

580
00:27:56,129 --> 00:28:00,389
function<font color="#E5E5E5"> that I mentioned earlier</font>

581
00:27:57,749 --> 00:28:01,979
<font color="#CCCCCC">because it</font><font color="#E5E5E5"> had this</font><font color="#CCCCCC"> win ability</font><font color="#E5E5E5"> but we</font>

582
00:28:00,389 --> 00:28:04,080
don't use the even ability we don't

583
00:28:01,979 --> 00:28:07,470
exploit<font color="#CCCCCC"> the vulnerability we use the API</font>

584
00:28:04,080 --> 00:28:10,830
<font color="#E5E5E5">for its usual use case to basically ask</font>

585
00:28:07,470 --> 00:28:14,340
for the bytes in a property<font color="#E5E5E5"> of an object</font>

586
00:28:10,830 --> 00:28:21,539
<font color="#E5E5E5">so we would then</font><font color="#CCCCCC"> ask for</font><font color="#E5E5E5"> the binds for</font>

587
00:28:14,340 --> 00:28:23,609
this specific object down there I'm<font color="#E5E5E5"> not</font>

588
00:28:21,539 --> 00:28:26,279
<font color="#E5E5E5">sure</font><font color="#CCCCCC"> if I can</font><font color="#E5E5E5"> oh yeah we basically</font><font color="#CCCCCC"> asked</font>

589
00:28:23,609 --> 00:28:28,228
for the property of this<font color="#CCCCCC"> object which</font>

590
00:28:26,279 --> 00:28:31,409
will then follow<font color="#E5E5E5"> this pointer here and</font>

591
00:28:28,229 --> 00:28:34,019
give back these bytes<font color="#CCCCCC"> but</font><font color="#E5E5E5"> as you can</font><font color="#CCCCCC"> see</font>

592
00:28:31,409 --> 00:28:37,440
these<font color="#E5E5E5"> points here basically contain the</font>

593
00:28:34,019 --> 00:28:40,080
<font color="#CCCCCC">vtable</font><font color="#E5E5E5"> pointer which means we just have</font>

594
00:28:37,440 --> 00:28:42,269
leaked<font color="#E5E5E5"> a</font><font color="#CCCCCC"> vtable pointer which is the</font>

595
00:28:40,080 --> 00:28:44,070
pointer inside the kernel image which

596
00:28:42,269 --> 00:28:44,460
means we've now know where<font color="#E5E5E5"> the kernel is</font>

597
00:28:44,070 --> 00:28:48,570
look

598
00:28:44,460 --> 00:28:52,530
we have broken case law again<font color="#E5E5E5"> as I told</font>

599
00:28:48,570 --> 00:28:55,020
you making the lowest<font color="#E5E5E5"> bite here zero</font>

600
00:28:52,530 --> 00:28:57,600
<font color="#E5E5E5">does not necessarily mean that this</font>

601
00:28:55,020 --> 00:29:00,600
points to<font color="#E5E5E5"> the beginning of here it could</font>

602
00:28:57,600 --> 00:29:03,209
also point<font color="#CCCCCC"> maybe here depending on where</font>

603
00:29:00,600 --> 00:29:05,790
this<font color="#CCCCCC"> blocker</font><font color="#E5E5E5"> is and where know where</font>

604
00:29:03,210 --> 00:29:08,310
this block here<font color="#CCCCCC"> is and where this</font><font color="#E5E5E5"> zero</font>

605
00:29:05,790 --> 00:29:10,290
point<font color="#E5E5E5"> by the ends</font><font color="#CCCCCC"> so</font><font color="#E5E5E5"> you could also end</font>

606
00:29:08,310 --> 00:29:14,760
up<font color="#CCCCCC"> with something</font><font color="#E5E5E5"> like this here or</font>

607
00:29:10,290 --> 00:29:16,770
somewhere<font color="#E5E5E5"> else</font><font color="#CCCCCC"> why do I say that</font>

608
00:29:14,760 --> 00:29:19,620
<font color="#E5E5E5">because depending on your hip layout</font>

609
00:29:16,770 --> 00:29:22,860
you're not only<font color="#E5E5E5"> leaking the</font><font color="#CCCCCC"> kernel</font>

610
00:29:19,620 --> 00:29:25,800
pointer<font color="#E5E5E5"> you also leak a pointer in the</font>

611
00:29:22,860 --> 00:29:27,959
heap<font color="#E5E5E5"> so then you</font><font color="#CCCCCC"> basically know the heap</font>

612
00:29:25,800 --> 00:29:31,889
location and you<font color="#E5E5E5"> can use that in the</font>

613
00:29:27,960 --> 00:29:35,220
<font color="#CCCCCC">next</font><font color="#E5E5E5"> run to basically put data into your</font>

614
00:29:31,890 --> 00:29:38,220
kernel the specific<font color="#E5E5E5"> address so we assume</font>

615
00:29:35,220 --> 00:29:41,820
for<font color="#CCCCCC"> now that this gives</font><font color="#E5E5E5"> us the heap</font>

616
00:29:38,220 --> 00:29:43,920
location and the kernel location<font color="#E5E5E5"> and at</font>

617
00:29:41,820 --> 00:29:46,020
the same time if it doesn't<font color="#E5E5E5"> you would</font>

618
00:29:43,920 --> 00:29:48,330
have to do the redo the heap feng-shui

619
00:29:46,020 --> 00:29:50,310
<font color="#CCCCCC">and choose a</font><font color="#E5E5E5"> little bit of different</font>

620
00:29:48,330 --> 00:29:53,399
offsets<font color="#E5E5E5"> and then you have a different</font>

621
00:29:50,310 --> 00:29:58,470
pointer<font color="#E5E5E5"> okay</font><font color="#CCCCCC"> we</font><font color="#E5E5E5"> assume we got both in</font>

622
00:29:53,400 --> 00:30:01,500
the first run now we do<font color="#E5E5E5"> the exploitation</font>

623
00:29:58,470 --> 00:30:04,080
stage we want to take<font color="#E5E5E5"> control so now</font><font color="#CCCCCC"> we</font>

624
00:30:01,500 --> 00:30:06,360
do he<font color="#E5E5E5"> Feng Shui again but this</font><font color="#CCCCCC"> time</font><font color="#E5E5E5"> the</font>

625
00:30:04,080 --> 00:30:08,480
heap things show we do basically<font color="#CCCCCC"> two V</font>

626
00:30:06,360 --> 00:30:12,240
<font color="#CCCCCC">feng shui's in two different positions</font>

627
00:30:08,480 --> 00:30:14,480
the first heap<font color="#E5E5E5"> Feng Shui basically sets</font>

628
00:30:12,240 --> 00:30:17,700
up the same kind of<font color="#E5E5E5"> interleaved data</font>

629
00:30:14,480 --> 00:30:20,400
data storage<font color="#E5E5E5"> but this time we fill the</font>

630
00:30:17,700 --> 00:30:22,710
<font color="#E5E5E5">data storage with a fake object what is</font>

631
00:30:20,400 --> 00:30:27,870
the fake object<font color="#E5E5E5"> a fake object is</font>

632
00:30:22,710 --> 00:30:30,300
basically a fake<font color="#E5E5E5"> V table that we can</font>

633
00:30:27,870 --> 00:30:33,060
choose because<font color="#E5E5E5"> we know the the</font><font color="#CCCCCC"> hipa</font>

634
00:30:30,300 --> 00:30:34,350
dress<font color="#CCCCCC"> we could also</font><font color="#E5E5E5"> make it a real</font><font color="#CCCCCC"> V</font>

635
00:30:33,060 --> 00:30:36,540
table of a different<font color="#E5E5E5"> kind of object</font>

636
00:30:34,350 --> 00:30:39,060
<font color="#CCCCCC">because we know where the kernel base</font>

637
00:30:36,540 --> 00:30:40,830
<font color="#E5E5E5">address is we can basically set</font><font color="#CCCCCC"> up any</font>

638
00:30:39,060 --> 00:30:44,370
<font color="#E5E5E5">kind of fake simplest world object that</font>

639
00:30:40,830 --> 00:30:47,399
we<font color="#CCCCCC"> want then the others heaping sure</font>

640
00:30:44,370 --> 00:30:50,489
that we do at<font color="#E5E5E5"> the same time is targeting</font>

641
00:30:47,400 --> 00:30:53,040
a different<font color="#CCCCCC"> size</font><font color="#E5E5E5"> we are now spraying the</font>

642
00:30:50,490 --> 00:30:54,420
heap basically with<font color="#CCCCCC"> arrays and all of</font>

643
00:30:53,040 --> 00:30:56,700
<font color="#E5E5E5">these arrays are just containing</font>

644
00:30:54,420 --> 00:31:00,420
pointers to these<font color="#E5E5E5"> orange</font>

645
00:30:56,700 --> 00:31:02,910
projects you can<font color="#E5E5E5"> you can see that here</font>

646
00:31:00,420 --> 00:31:04,680
<font color="#E5E5E5">we</font><font color="#CCCCCC"> basically have an array that points</font>

647
00:31:02,910 --> 00:31:06,690
to an array bucket and<font color="#E5E5E5"> this array bucket</font>

648
00:31:04,680 --> 00:31:09,570
is filled with pointers to all of these

649
00:31:06,690 --> 00:31:12,630
different<font color="#E5E5E5"> orange objects and we create a</font>

650
00:31:09,570 --> 00:31:17,909
<font color="#E5E5E5">lot</font><font color="#CCCCCC"> of these and a</font><font color="#E5E5E5"> lot</font><font color="#CCCCCC"> of these this is</font>

651
00:31:12,630 --> 00:31:21,840
<font color="#E5E5E5">our heap</font><font color="#CCCCCC"> finisher the</font><font color="#E5E5E5"> second one now</font><font color="#CCCCCC"> we</font>

652
00:31:17,910 --> 00:31:24,630
poke the hole<font color="#E5E5E5"> again and we run the</font>

653
00:31:21,840 --> 00:31:27,260
exploit<font color="#E5E5E5"> but this time we are not</font>

654
00:31:24,630 --> 00:31:30,210
targeting<font color="#CCCCCC"> these objects with our hole</font>

655
00:31:27,260 --> 00:31:33,060
punching we target these array buckets

656
00:31:30,210 --> 00:31:36,330
with our<font color="#E5E5E5"> hole punching and we get our</font>

657
00:31:33,060 --> 00:31:40,169
<font color="#CCCCCC">melaka</font><font color="#E5E5E5"> block inside here between</font><font color="#CCCCCC"> all of</font>

658
00:31:36,330 --> 00:31:44,159
these arrays and this time we trigger

659
00:31:40,170 --> 00:31:46,890
<font color="#CCCCCC">the zero byte overwrite and this time we</font>

660
00:31:44,160 --> 00:31:49,530
trigger the overwrite into one of these

661
00:31:46,890 --> 00:31:52,350
array buckets and<font color="#CCCCCC"> we basically zero out</font>

662
00:31:49,530 --> 00:31:54,690
the lowest pointer here keep in mind

663
00:31:52,350 --> 00:31:57,840
these pointers here<font color="#E5E5E5"> are all pointers to</font>

664
00:31:54,690 --> 00:31:59,790
objects<font color="#E5E5E5"> but this time we have</font>

665
00:31:57,840 --> 00:32:01,740
overwritten this with a zero so suddenly

666
00:31:59,790 --> 00:32:03,960
<font color="#CCCCCC">this</font><font color="#E5E5E5"> no longer points to that object</font>

667
00:32:01,740 --> 00:32:06,900
here<font color="#E5E5E5"> but it points to one of the fake</font>

668
00:32:03,960 --> 00:32:09,300
objects which means we have now an array

669
00:32:06,900 --> 00:32:11,460
and one of the entries points to an

670
00:32:09,300 --> 00:32:20,790
unreal object that<font color="#E5E5E5"> is completely fake by</font>

671
00:32:11,460 --> 00:32:23,820
the attacker yeah and this basically

672
00:32:20,790 --> 00:32:27,210
<font color="#CCCCCC">means when the kernel touches this array</font>

673
00:32:23,820 --> 00:32:30,439
now<font color="#E5E5E5"> it will touch our fake object will</font>

674
00:32:27,210 --> 00:32:34,890
trigger the<font color="#CCCCCC"> vtable will trigger now</font>

675
00:32:30,440 --> 00:32:36,570
<font color="#E5E5E5">whatever belongs</font><font color="#CCCCCC"> to this object</font><font color="#E5E5E5"> so</font><font color="#CCCCCC"> we</font>

676
00:32:34,890 --> 00:32:40,800
<font color="#E5E5E5">can trigger basically any kind of code</font>

677
00:32:36,570 --> 00:32:42,450
by having like people<font color="#E5E5E5"> gadget there we</font>

678
00:32:40,800 --> 00:32:45,659
could<font color="#E5E5E5"> have a different kind of gadget</font>

679
00:32:42,450 --> 00:32:48,120
there that gives us more<font color="#E5E5E5"> control</font><font color="#CCCCCC"> it's</font>

680
00:32:45,660 --> 00:32:50,580
basically up<font color="#CCCCCC"> to what the exploiter wants</font>

681
00:32:48,120 --> 00:32:53,100
but usually when<font color="#E5E5E5"> you would put in people</font>

682
00:32:50,580 --> 00:32:55,320
gadgets in here that puts the start of

683
00:32:53,100 --> 00:32:56,610
the<font color="#E5E5E5"> put</font><font color="#CCCCCC"> a</font><font color="#E5E5E5"> stack</font><font color="#CCCCCC"> pointer into</font><font color="#E5E5E5"> the</font><font color="#CCCCCC"> heap</font>

684
00:32:55,320 --> 00:33:01,379
<font color="#E5E5E5">and then it will start a rope chain</font>

685
00:32:56,610 --> 00:33:04,740
maybe from here<font color="#E5E5E5"> okay so</font><font color="#CCCCCC"> this was Iowa's</font>

686
00:33:01,380 --> 00:33:07,140
<font color="#CCCCCC">six now let's fast-forward to iOS 7 and</font>

687
00:33:04,740 --> 00:33:09,150
you would<font color="#E5E5E5"> assume</font><font color="#CCCCCC"> that every time you do</font>

688
00:33:07,140 --> 00:33:09,970
this with a new iOS<font color="#E5E5E5"> version the expert</font>

689
00:33:09,150 --> 00:33:12,190
<font color="#E5E5E5">gets harder</font>

690
00:33:09,970 --> 00:33:13,590
and harder and<font color="#E5E5E5"> harder but this is</font>

691
00:33:12,190 --> 00:33:17,110
<font color="#CCCCCC">actually</font><font color="#E5E5E5"> not the case</font>

692
00:33:13,590 --> 00:33:21,550
so the<font color="#E5E5E5"> IDS plot for iOS 6 would</font>

693
00:33:17,110 --> 00:33:24,669
theoretically<font color="#E5E5E5"> work on iOS 7</font><font color="#CCCCCC"> but</font><font color="#E5E5E5"> Apple</font>

694
00:33:21,550 --> 00:33:26,740
did a<font color="#E5E5E5"> bunch of changes into iOS 7</font><font color="#CCCCCC"> they</font>

695
00:33:24,670 --> 00:33:29,530
mostly changed stings in the heap so<font color="#CCCCCC"> if</font>

696
00:33:26,740 --> 00:33:31,450
you have ever heard one of my<font color="#E5E5E5"> heap talks</font>

697
00:33:29,530 --> 00:33:34,149
<font color="#E5E5E5">you would know that there's something</font>

698
00:33:31,450 --> 00:33:36,430
<font color="#CCCCCC">called the page list feature so</font>

699
00:33:34,150 --> 00:33:39,640
<font color="#E5E5E5">basically at Apple added something</font><font color="#CCCCCC"> new</font>

700
00:33:36,430 --> 00:33:42,190
to<font color="#CCCCCC"> the</font><font color="#E5E5E5"> system where everything</font><font color="#CCCCCC"> that uses</font>

701
00:33:39,640 --> 00:33:44,770
<font color="#E5E5E5">this new feature has extra metadata in</font>

702
00:33:42,190 --> 00:33:46,600
<font color="#CCCCCC">the heap</font><font color="#E5E5E5"> so that they can have faster</font>

703
00:33:44,770 --> 00:33:48,670
garbage collection and<font color="#E5E5E5"> all this kind of</font>

704
00:33:46,600 --> 00:33:51,699
<font color="#CCCCCC">stuff so it's basically a performance</font>

705
00:33:48,670 --> 00:33:55,240
feature that they added and they only

706
00:33:51,700 --> 00:33:57,490
<font color="#E5E5E5">use it</font><font color="#CCCCCC"> for certain zones so not for all</font>

707
00:33:55,240 --> 00:33:59,050
allocations mostly for the small

708
00:33:57,490 --> 00:34:01,300
allocations they use the new feature

709
00:33:59,050 --> 00:34:05,110
<font color="#E5E5E5">everything</font><font color="#CCCCCC"> that's bigger they don't use</font>

710
00:34:01,300 --> 00:34:06,580
the new feature form what they also did

711
00:34:05,110 --> 00:34:09,940
back then when they created this new

712
00:34:06,580 --> 00:34:12,190
<font color="#E5E5E5">metadata they put double linked lists in</font>

713
00:34:09,940 --> 00:34:14,889
there they were completely<font color="#E5E5E5"> unprotected</font>

714
00:34:12,190 --> 00:34:17,860
<font color="#CCCCCC">so if you've</font><font color="#E5E5E5"> ever done an exploit in in</font>

715
00:34:14,889 --> 00:34:19,830
Windows<font color="#E5E5E5"> Word or anywhere else and</font><font color="#CCCCCC"> you</font>

716
00:34:17,860 --> 00:34:21,940
exploded<font color="#E5E5E5"> the heap you would know that</font>

717
00:34:19,830 --> 00:34:24,489
<font color="#E5E5E5">the first thing</font><font color="#CCCCCC"> that people</font><font color="#E5E5E5"> were</font>

718
00:34:21,940 --> 00:34:26,620
exploiting we're doubling lists<font color="#E5E5E5"> every</font>

719
00:34:24,489 --> 00:34:27,639
time you have an<font color="#E5E5E5"> unlink funded from a</font>

720
00:34:26,620 --> 00:34:30,339
<font color="#E5E5E5">double linked list</font>

721
00:34:27,639 --> 00:34:33,639
<font color="#E5E5E5">this was exploitable so basically Apple</font>

722
00:34:30,340 --> 00:34:36,850
port<font color="#E5E5E5"> unprotected doubling</font><font color="#CCCCCC"> lists</font>

723
00:34:33,639 --> 00:34:39,310
everywhere<font color="#E5E5E5"> over the heap of iOS 7 so the</font>

724
00:34:36,850 --> 00:34:41,230
exploitation gets really easy<font color="#E5E5E5"> and that's</font>

725
00:34:39,310 --> 00:34:45,790
<font color="#E5E5E5">why I reward the exploit to see how easy</font>

726
00:34:41,230 --> 00:34:48,130
<font color="#E5E5E5">it really gets so the first thing is I</font>

727
00:34:45,790 --> 00:34:49,659
don't want<font color="#CCCCCC"> to</font><font color="#E5E5E5"> do this</font><font color="#CCCCCC"> whole info leaking</font>

728
00:34:48,130 --> 00:34:52,150
stuff that is just<font color="#CCCCCC"> like not really</font>

729
00:34:49,659 --> 00:34:54,699
<font color="#E5E5E5">required we know bunch and bunch of info</font>

730
00:34:52,150 --> 00:34:57,940
leaks<font color="#E5E5E5"> so why do this we have all these</font>

731
00:34:54,699 --> 00:35:00,850
<font color="#E5E5E5">bugs so I just use the kicks request</font>

732
00:34:57,940 --> 00:35:02,770
info<font color="#E5E5E5"> leak text request was basically an</font>

733
00:35:00,850 --> 00:35:05,110
API<font color="#CCCCCC"> that gives you information</font><font color="#E5E5E5"> about the</font>

734
00:35:02,770 --> 00:35:07,270
loaded<font color="#CCCCCC"> kernel extension and the kernel</font>

735
00:35:05,110 --> 00:35:11,260
one of<font color="#E5E5E5"> this</font><font color="#CCCCCC"> information is basically a</font>

736
00:35:07,270 --> 00:35:13,060
dump a binary dump of<font color="#E5E5E5"> the</font><font color="#CCCCCC"> Maho headers</font>

737
00:35:11,260 --> 00:35:16,990
of the<font color="#E5E5E5"> kernel and of the kernel</font>

738
00:35:13,060 --> 00:35:18,460
extensions<font color="#E5E5E5"> and if you know file headers</font>

739
00:35:16,990 --> 00:35:20,709
you know that in these<font color="#E5E5E5"> file errors</font>

740
00:35:18,460 --> 00:35:22,720
they're usually<font color="#E5E5E5"> note addresses and these</font>

741
00:35:20,710 --> 00:35:23,530
load addresses can basically give away

742
00:35:22,720 --> 00:35:27,459
the kernel

743
00:35:23,530 --> 00:35:29,410
dress<font color="#E5E5E5"> so Apple would try to remove this</font>

744
00:35:27,460 --> 00:35:32,140
<font color="#CCCCCC">ears to</font><font color="#E5E5E5"> the last slide from these note</font>

745
00:35:29,410 --> 00:35:35,379
addresses<font color="#E5E5E5"> before</font><font color="#CCCCCC"> they give it back</font><font color="#E5E5E5"> to to</font>

746
00:35:32,140 --> 00:35:38,440
<font color="#E5E5E5">the user</font><font color="#CCCCCC"> they failed in certain cases</font>

747
00:35:35,380 --> 00:35:41,590
and this<font color="#E5E5E5"> is something</font><font color="#CCCCCC"> that marked</font><font color="#E5E5E5"> doubt</font>

748
00:35:38,440 --> 00:35:45,010
and<font color="#E5E5E5"> Tajima immediately noticed when they</font>

749
00:35:41,590 --> 00:35:48,760
did they<font color="#CCCCCC"> talked about iOS 6-0</font><font color="#E5E5E5"> and they</font>

750
00:35:45,010 --> 00:35:51,310
disclosed<font color="#E5E5E5"> that one vulnerability but the</font>

751
00:35:48,760 --> 00:35:54,940
thing was this function had a bunch of

752
00:35:51,310 --> 00:35:56,920
other bugs that<font color="#E5E5E5"> were maybe</font><font color="#CCCCCC"> related but</font>

753
00:35:54,940 --> 00:36:01,690
we're not exactly<font color="#CCCCCC"> the</font><font color="#E5E5E5"> same bug that</font>

754
00:35:56,920 --> 00:36:06,550
marked out and hajiman<font color="#E5E5E5"> mentioned so this</font>

755
00:36:01,690 --> 00:36:09,640
is basically<font color="#CCCCCC"> was the case</font><font color="#E5E5E5"> so there were</font>

756
00:36:06,550 --> 00:36:11,290
other<font color="#E5E5E5"> ways to do it and Apple more and</font>

757
00:36:09,640 --> 00:36:12,759
more learned from public<font color="#CCCCCC"> jailbreaks that</font>

758
00:36:11,290 --> 00:36:15,550
there were still holds<font color="#E5E5E5"> in there and</font>

759
00:36:12,760 --> 00:36:17,410
<font color="#E5E5E5">again and again and again and it took</font>

760
00:36:15,550 --> 00:36:21,610
them a while like two years to actually

761
00:36:17,410 --> 00:36:24,700
<font color="#E5E5E5">get all</font><font color="#CCCCCC"> the bugs fixed this will ability</font>

762
00:36:21,610 --> 00:36:26,590
is<font color="#E5E5E5"> also quite famous because apparently</font>

763
00:36:24,700 --> 00:36:29,680
while Apple failed to fix it all the

764
00:36:26,590 --> 00:36:31,600
time<font color="#E5E5E5"> the CIA said thank</font><font color="#CCCCCC"> you and we're</font>

765
00:36:29,680 --> 00:36:35,230
using that<font color="#E5E5E5"> and they call the exploit</font>

766
00:36:31,600 --> 00:36:39,910
ironic<font color="#CCCCCC"> because they learned about</font><font color="#E5E5E5"> it</font>

767
00:36:35,230 --> 00:36:42,160
<font color="#CCCCCC">from</font><font color="#E5E5E5"> my talks anyway so yeah so we have</font>

768
00:36:39,910 --> 00:36:43,839
this so we<font color="#E5E5E5"> skip the whole info leak we</font>

769
00:36:42,160 --> 00:36:47,170
are only interested<font color="#CCCCCC"> in doing the memory</font>

770
00:36:43,840 --> 00:36:50,800
corruption<font color="#CCCCCC"> and this time we abuse this</font>

771
00:36:47,170 --> 00:36:53,380
new metadata in the<font color="#E5E5E5"> heap so</font><font color="#CCCCCC"> what we do</font>

772
00:36:50,800 --> 00:36:54,970
is we call<font color="#E5E5E5"> it set attribute list you see</font>

773
00:36:53,380 --> 00:36:57,400
<font color="#E5E5E5">we're</font><font color="#CCCCCC"> not doing any heavy thing sure we</font>

774
00:36:54,970 --> 00:36:59,169
don't<font color="#E5E5E5"> need heap function we just</font><font color="#CCCCCC"> called</font>

775
00:36:57,400 --> 00:37:03,240
set attribute list<font color="#E5E5E5"> and we say the user</font>

776
00:36:59,170 --> 00:37:06,820
buffer is a little bit above<font color="#E5E5E5"> one page</font>

777
00:37:03,240 --> 00:37:08,770
this<font color="#E5E5E5"> will trigger in a location where</font><font color="#CCCCCC"> we</font>

778
00:37:06,820 --> 00:37:12,580
have<font color="#CCCCCC"> this allocation a little bit longer</font>

779
00:37:08,770 --> 00:37:17,830
than one page<font color="#CCCCCC"> and this size</font><font color="#E5E5E5"> field will</font>

780
00:37:12,580 --> 00:37:21,790
be<font color="#E5E5E5"> a little bit bigger than one page</font><font color="#CCCCCC"> no</font>

781
00:37:17,830 --> 00:37:24,310
<font color="#CCCCCC">heaping Cherie the next thing is we</font>

782
00:37:21,790 --> 00:37:25,600
trigger this null byte right<font color="#E5E5E5"> but this</font>

783
00:37:24,310 --> 00:37:28,210
<font color="#CCCCCC">time we</font><font color="#E5E5E5"> are</font><font color="#CCCCCC"> not</font><font color="#E5E5E5"> triggering actually</font>

784
00:37:25,600 --> 00:37:30,759
something<font color="#E5E5E5"> before the buffer we are</font>

785
00:37:28,210 --> 00:37:34,060
triggering<font color="#E5E5E5"> it to write to the second</font>

786
00:37:30,760 --> 00:37:37,300
byte of our own size field we make our

787
00:37:34,060 --> 00:37:41,799
second byte 0<font color="#E5E5E5"> so this onesie</font>

788
00:37:37,300 --> 00:37:46,360
<font color="#CCCCCC">becomes 0 that means the previously very</font>

789
00:37:41,800 --> 00:37:48,660
large size<font color="#CCCCCC"> fear</font><font color="#E5E5E5"> is now very</font><font color="#CCCCCC"> small this</font>

790
00:37:46,360 --> 00:37:52,300
means<font color="#E5E5E5"> that when free is</font><font color="#CCCCCC"> called on this</font>

791
00:37:48,660 --> 00:37:56,680
thing here then<font color="#E5E5E5"> free wants to put this</font>

792
00:37:52,300 --> 00:37:59,380
in a very very<font color="#E5E5E5"> very</font><font color="#CCCCCC"> small</font><font color="#E5E5E5"> zone and all</font>

793
00:37:56,680 --> 00:38:01,990
the small user zones use the new<font color="#CCCCCC"> peach</font>

794
00:37:59,380 --> 00:38:04,840
<font color="#CCCCCC">this first</font><font color="#E5E5E5"> feature the large one does</font>

795
00:38:01,990 --> 00:38:07,629
not use the new PHP<font color="#E5E5E5"> page this feature</font><font color="#CCCCCC"> so</font>

796
00:38:04,840 --> 00:38:11,770
what<font color="#E5E5E5"> does it mean it means when the free</font>

797
00:38:07,630 --> 00:38:16,000
happens it takes<font color="#E5E5E5"> our buffer it assumes</font>

798
00:38:11,770 --> 00:38:18,310
<font color="#CCCCCC">at the end is metadata</font><font color="#E5E5E5"> but there is no</font>

799
00:38:16,000 --> 00:38:20,950
metadata<font color="#CCCCCC"> because we control all of this</font>

800
00:38:18,310 --> 00:38:22,930
<font color="#E5E5E5">so when it tries to</font><font color="#CCCCCC"> access</font><font color="#E5E5E5"> the</font><font color="#CCCCCC"> metadata</font>

801
00:38:20,950 --> 00:38:26,529
it<font color="#E5E5E5"> actually accesses whatever we put</font>

802
00:38:22,930 --> 00:38:29,169
there so that<font color="#E5E5E5"> means we fully control</font>

803
00:38:26,530 --> 00:38:30,970
this<font color="#CCCCCC"> doubling list</font><font color="#E5E5E5"> we fully control the</font>

804
00:38:29,170 --> 00:38:38,260
<font color="#E5E5E5">counter we fully control</font><font color="#CCCCCC"> the back</font>

805
00:38:30,970 --> 00:38:41,379
pointer to the zone what we can do now

806
00:38:38,260 --> 00:38:45,220
is<font color="#E5E5E5"> we</font><font color="#CCCCCC"> can manipulate the counter so</font><font color="#E5E5E5"> that</font>

807
00:38:41,380 --> 00:38:47,920
when<font color="#E5E5E5"> this free happens this free counter</font>

808
00:38:45,220 --> 00:38:51,129
drops to<font color="#CCCCCC"> our release rates to the</font>

809
00:38:47,920 --> 00:38:53,650
<font color="#E5E5E5">allocation size which then means it</font>

810
00:38:51,130 --> 00:38:55,900
realized oh wait we<font color="#CCCCCC"> just elevate we</font><font color="#E5E5E5"> just</font>

811
00:38:53,650 --> 00:38:58,600
freed the last<font color="#E5E5E5"> used element in this page</font>

812
00:38:55,900 --> 00:39:02,080
<font color="#E5E5E5">so this means we</font><font color="#CCCCCC"> need to remove it</font><font color="#E5E5E5"> from</font>

813
00:38:58,600 --> 00:39:03,850
our queue of partially used pages and we

814
00:39:02,080 --> 00:39:06,460
need to add it to<font color="#CCCCCC"> our queue of all free</font>

815
00:39:03,850 --> 00:39:10,750
pages<font color="#E5E5E5"> so this means it will unlink our</font>

816
00:39:06,460 --> 00:39:18,490
fake here and when we<font color="#E5E5E5"> control this we</font>

817
00:39:10,750 --> 00:39:22,300
already<font color="#CCCCCC"> one</font><font color="#E5E5E5"> so what we do is we set up</font>

818
00:39:18,490 --> 00:39:25,899
our fake metadata<font color="#E5E5E5"> to the</font><font color="#CCCCCC"> next pointer</font>

819
00:39:22,300 --> 00:39:28,300
points to<font color="#CCCCCC"> a scratch buffer we are only</font>

820
00:39:25,900 --> 00:39:30,160
interested<font color="#CCCCCC"> in</font><font color="#E5E5E5"> the lower byte so we can</font>

821
00:39:28,300 --> 00:39:33,490
make it anything<font color="#CCCCCC"> we want the lower byte</font>

822
00:39:30,160 --> 00:39:36,220
because our scratch<font color="#CCCCCC"> pad is</font><font color="#E5E5E5"> 256 plus</font><font color="#CCCCCC"> 7 by</font>

823
00:39:33,490 --> 00:39:38,729
it's somewhere in kernel<font color="#E5E5E5"> and and there's</font>

824
00:39:36,220 --> 00:39:41,649
actually some<font color="#CCCCCC"> very</font><font color="#E5E5E5"> good places for</font><font color="#CCCCCC"> that</font>

825
00:39:38,730 --> 00:39:45,340
<font color="#CCCCCC">this scratch buffer will be overwritten</font>

826
00:39:41,650 --> 00:39:48,010
at position 4 but we don't care because

827
00:39:45,340 --> 00:39:50,020
<font color="#E5E5E5">it's all scratch buffer our previous</font>

828
00:39:48,010 --> 00:39:51,400
pointer in the fake<font color="#CCCCCC"> metadata</font><font color="#E5E5E5"> will point</font>

829
00:39:50,020 --> 00:39:54,880
to our target<font color="#E5E5E5"> so</font>

830
00:39:51,400 --> 00:39:57,460
anywhere in<font color="#CCCCCC"> colonel dress space what</font>

831
00:39:54,880 --> 00:40:00,190
happens next is<font color="#E5E5E5"> we have this unlink this</font>

832
00:39:57,460 --> 00:40:02,920
unlink<font color="#CCCCCC"> will take the target address</font><font color="#E5E5E5"> that</font>

833
00:40:00,190 --> 00:40:05,529
we want<font color="#CCCCCC"> treasure it into our scratch</font>

834
00:40:02,920 --> 00:40:07,869
buffer<font color="#E5E5E5"> and then it takes the address of</font>

835
00:40:05,529 --> 00:40:09,819
the stretch buffer and writes it<font color="#E5E5E5"> to our</font>

836
00:40:07,869 --> 00:40:12,249
target<font color="#E5E5E5"> address so we are only interested</font>

837
00:40:09,819 --> 00:40:15,308
<font color="#CCCCCC">in</font><font color="#E5E5E5"> the lowest</font><font color="#CCCCCC"> bytes so</font><font color="#E5E5E5"> it writes a</font><font color="#CCCCCC"> 4-1</font>

838
00:40:12,249 --> 00:40:17,439
in the first<font color="#E5E5E5"> byte here</font>

839
00:40:15,309 --> 00:40:18,400
the nice<font color="#CCCCCC"> thing about this attack is we</font>

840
00:40:17,440 --> 00:40:20,950
have no<font color="#CCCCCC"> heap</font><font color="#E5E5E5"> feng-shui</font>

841
00:40:18,400 --> 00:40:24,519
<font color="#CCCCCC">we just have calling the system coil</font>

842
00:40:20,950 --> 00:40:28,450
<font color="#CCCCCC">once</font><font color="#E5E5E5"> a legal free that is completely</font>

843
00:40:24,519 --> 00:40:31,169
survived<font color="#E5E5E5"> so we can redo this attack as</font>

844
00:40:28,450 --> 00:40:34,089
many times<font color="#E5E5E5"> as</font><font color="#CCCCCC"> we want without</font>

845
00:40:31,170 --> 00:40:35,710
destabilizing the<font color="#E5E5E5"> heap we can even call</font>

846
00:40:34,089 --> 00:40:39,038
<font color="#E5E5E5">the garbage collection in between to get</font>

847
00:40:35,710 --> 00:40:41,349
<font color="#E5E5E5">rid</font><font color="#CCCCCC"> of what we</font><font color="#E5E5E5"> did to the heap and</font>

848
00:40:39,039 --> 00:40:44,710
basically it means we can write anything

849
00:40:41,349 --> 00:40:48,400
<font color="#E5E5E5">we want anywhere in kernel lends to any</font>

850
00:40:44,710 --> 00:40:50,170
<font color="#E5E5E5">position so we can create any kind of</font>

851
00:40:48,400 --> 00:40:55,180
data<font color="#E5E5E5"> structure and make the kernel use</font>

852
00:40:50,170 --> 00:40:59,619
it<font color="#CCCCCC"> the best target</font><font color="#E5E5E5"> for this is</font><font color="#CCCCCC"> usually</font>

853
00:40:55,180 --> 00:41:01,118
something called a kernel<font color="#E5E5E5"> task port when</font>

854
00:40:59,619 --> 00:41:03,579
you have a<font color="#E5E5E5"> kernel task port you can</font>

855
00:41:01,119 --> 00:41:06,009
export it to<font color="#E5E5E5"> user land and then userland</font>

856
00:41:03,579 --> 00:41:09,039
can use<font color="#CCCCCC"> api functions to read</font><font color="#E5E5E5"> and write</font>

857
00:41:06,009 --> 00:41:10,749
kernel and you can allocate<font color="#E5E5E5"> in kernel</font>

858
00:41:09,039 --> 00:41:11,140
and you can set memory<font color="#E5E5E5"> protections with</font>

859
00:41:10,749 --> 00:41:13,209
that

860
00:41:11,140 --> 00:41:15,819
so<font color="#E5E5E5"> basically who you can load arbitrary</font>

861
00:41:13,210 --> 00:41:20,910
code into kernel and<font color="#CCCCCC"> execute it</font>

862
00:41:15,819 --> 00:41:23,349
so basically this<font color="#CCCCCC"> is completely toasted</font>

863
00:41:20,910 --> 00:41:24,940
<font color="#CCCCCC">so this means we didn't</font><font color="#E5E5E5"> need heap</font>

864
00:41:23,349 --> 00:41:27,849
feng-shui

865
00:41:24,940 --> 00:41:35,049
we made the very<font color="#E5E5E5"> complicated exploit</font>

866
00:41:27,849 --> 00:41:43,269
<font color="#E5E5E5">very simple and very stable like 100%</font>

867
00:41:35,049 --> 00:41:48,309
stable<font color="#E5E5E5"> yeah unfortunately</font><font color="#CCCCCC"> Taj a month</font>

868
00:41:43,269 --> 00:41:52,868
<font color="#E5E5E5">blocked about this problem of the unsafe</font>

869
00:41:48,309 --> 00:41:55,089
unlink<font color="#E5E5E5"> so in iOS 8 Apple killed this so</font>

870
00:41:52,869 --> 00:41:59,470
the iOS 7<font color="#CCCCCC"> exploit would not work</font><font color="#E5E5E5"> on iOS</font>

871
00:41:55,089 --> 00:42:02,739
<font color="#E5E5E5">8 but you could use the iOS 6 exploit</font>

872
00:41:59,470 --> 00:42:03,290
again on iOS 8<font color="#CCCCCC"> but I would suggest to</font>

873
00:42:02,739 --> 00:42:05,630
use

874
00:42:03,290 --> 00:42:07,480
one of the real info leaks like for

875
00:42:05,630 --> 00:42:10,010
<font color="#CCCCCC">example the the property bytes</font><font color="#E5E5E5"> one</font>

876
00:42:07,480 --> 00:42:13,579
instead<font color="#E5E5E5"> of trying to run the export</font>

877
00:42:10,010 --> 00:42:15,440
several times<font color="#E5E5E5"> and doing the hip thing</font>

878
00:42:13,579 --> 00:42:18,140
<font color="#E5E5E5">show you so many times it's better to</font>

879
00:42:15,440 --> 00:42:22,030
just<font color="#CCCCCC"> have a good info</font><font color="#E5E5E5"> leak and then run</font>

880
00:42:18,140 --> 00:42:22,029
the<font color="#CCCCCC"> extra memory</font><font color="#E5E5E5"> corruption only once</font>

881
00:42:22,570 --> 00:42:29,390
<font color="#E5E5E5">yeah so this basically is the the</font>

882
00:42:27,320 --> 00:42:32,510
history<font color="#CCCCCC"> of</font><font color="#E5E5E5"> this vulnerability and how it</font>

883
00:42:29,390 --> 00:42:35,509
was exploited<font color="#E5E5E5"> and the conclusion here</font>

884
00:42:32,510 --> 00:42:39,050
basically<font color="#E5E5E5"> is that</font><font color="#CCCCCC"> Apple's sometimes is</font>

885
00:42:35,510 --> 00:42:40,790
<font color="#CCCCCC">very aware of security bugs but this</font>

886
00:42:39,050 --> 00:42:42,950
still does not mean that they<font color="#CCCCCC"> actually</font>

887
00:42:40,790 --> 00:42:44,390
really<font color="#E5E5E5"> fixed them so they declare them</font>

888
00:42:42,950 --> 00:42:47,390
often fixed but they are<font color="#E5E5E5"> not really</font>

889
00:42:44,390 --> 00:42:50,540
fixed the next thing you should<font color="#CCCCCC"> learn is</font>

890
00:42:47,390 --> 00:42:53,629
<font color="#E5E5E5">that there are architectural changes</font>

891
00:42:50,540 --> 00:42:55,880
between<font color="#CCCCCC"> iOS version sometimes they are</font>

892
00:42:53,630 --> 00:42:58,940
<font color="#E5E5E5">really dramatic like especially when it</font>

893
00:42:55,880 --> 00:43:01,160
comes<font color="#E5E5E5"> to</font><font color="#CCCCCC"> the heap for example the iOS 7</font>

894
00:42:58,940 --> 00:43:02,900
<font color="#CCCCCC">heap was very different</font><font color="#E5E5E5"> on iOS 6 but</font>

895
00:43:01,160 --> 00:43:05,000
also the iOS 10 he was<font color="#E5E5E5"> very different</font>

896
00:43:02,900 --> 00:43:08,960
<font color="#E5E5E5">from I was 9 when it comes to</font>

897
00:43:05,000 --> 00:43:10,730
exploitation<font color="#E5E5E5"> so these changes happen but</font>

898
00:43:08,960 --> 00:43:12,980
it doesn't<font color="#E5E5E5"> mean that Apple always</font>

899
00:43:10,730 --> 00:43:15,290
<font color="#E5E5E5">improves everything sometimes</font><font color="#CCCCCC"> they do</font>

900
00:43:12,980 --> 00:43:18,290
<font color="#E5E5E5">really stupid things so for example the</font>

901
00:43:15,290 --> 00:43:20,270
<font color="#E5E5E5">the unprotected lists so that</font>

902
00:43:18,290 --> 00:43:25,609
exploitation suddenly becomes a lot

903
00:43:20,270 --> 00:43:27,829
<font color="#E5E5E5">easier so I'm</font><font color="#CCCCCC"> nearly</font><font color="#E5E5E5"> running out of time</font>

904
00:43:25,609 --> 00:43:30,920
<font color="#E5E5E5">so you can see this topic is very very</font>

905
00:43:27,829 --> 00:43:33,619
long<font color="#CCCCCC"> and complicated</font><font color="#E5E5E5"> so there will be</font>

906
00:43:30,920 --> 00:43:36,650
more details<font color="#E5E5E5"> and actual POC code</font>

907
00:43:33,619 --> 00:43:39,140
<font color="#E5E5E5">released in the next week when I'm back</font>

908
00:43:36,650 --> 00:43:41,810
in<font color="#CCCCCC"> Germany</font><font color="#E5E5E5"> on this</font><font color="#CCCCCC"> website here in our</font>

909
00:43:39,140 --> 00:43:45,009
block<font color="#E5E5E5"> so all the different exploits will</font>

910
00:43:41,810 --> 00:43:48,529
be in more detail being<font color="#E5E5E5"> made public</font>

911
00:43:45,010 --> 00:43:50,510
<font color="#E5E5E5">also yeah I said that before we just</font>

912
00:43:48,530 --> 00:43:53,480
started this branch in Singapore so if

913
00:43:50,510 --> 00:43:56,780
you're interested<font color="#CCCCCC"> in</font><font color="#E5E5E5"> iOS or Mac OS just</font>

914
00:43:53,480 --> 00:44:00,230
<font color="#E5E5E5">contact me and we</font><font color="#CCCCCC"> can see if</font><font color="#E5E5E5"> we have</font>

915
00:43:56,780 --> 00:44:04,359
<font color="#E5E5E5">maybe some work for you any question</font>

916
00:44:00,230 --> 00:44:04,359
about<font color="#E5E5E5"> the content not about the job</font>

917
00:44:05,830 --> 00:44:16,790
yes do you<font color="#E5E5E5"> about the</font><font color="#CCCCCC"> lyrics do you think</font>

918
00:44:15,500 --> 00:44:19,070
the lack of<font color="#CCCCCC"> yell breaks in the last</font>

919
00:44:16,790 --> 00:44:20,720
<font color="#E5E5E5">year's is because business mother is</font>

920
00:44:19,070 --> 00:44:23,630
because<font color="#CCCCCC"> a technical</font><font color="#E5E5E5"> because this is</font>

921
00:44:20,720 --> 00:44:25,430
becoming harder<font color="#CCCCCC"> and harder to</font><font color="#E5E5E5"> get it</font><font color="#CCCCCC"> or</font>

922
00:44:23,630 --> 00:44:27,830
is because people<font color="#CCCCCC"> is not really</font><font color="#E5E5E5"> into</font>

923
00:44:25,430 --> 00:44:29,629
jailbreaking anymore<font color="#E5E5E5"> and it's not okay</font>

924
00:44:27,830 --> 00:44:32,720
<font color="#E5E5E5">let me let me</font><font color="#CCCCCC"> rephrase</font><font color="#E5E5E5"> what make your</font>

925
00:44:29,630 --> 00:44:34,760
question easier the question was is the

926
00:44:32,720 --> 00:44:38,120
lack of<font color="#CCCCCC"> jailbreaks</font>

927
00:44:34,760 --> 00:44:41,210
<font color="#E5E5E5">for</font><font color="#CCCCCC"> example iOS</font><font color="#E5E5E5"> 10 while or so is it</font><font color="#CCCCCC"> the</font>

928
00:44:38,120 --> 00:44:43,549
<font color="#CCCCCC">reason of</font><font color="#E5E5E5"> it becoming too hard or are</font>

929
00:44:41,210 --> 00:44:48,140
there other<font color="#E5E5E5"> reasons why there are no no</font>

930
00:44:43,550 --> 00:44:50,480
<font color="#E5E5E5">jail breaks and I would say the thing</font><font color="#CCCCCC"> is</font>

931
00:44:48,140 --> 00:44:53,319
<font color="#E5E5E5">that the guys who want jail breaks they</font>

932
00:44:50,480 --> 00:44:57,640
want normally a<font color="#CCCCCC"> jailbreak that is</font>

933
00:44:53,320 --> 00:44:58,750
fire-and-forget<font color="#E5E5E5"> and they wanted</font><font color="#CCCCCC"> to be</font>

934
00:44:57,640 --> 00:45:02,540
[Music]

935
00:44:58,750 --> 00:45:05,680
persistent<font color="#E5E5E5"> and I would say that</font>

936
00:45:02,540 --> 00:45:09,620
<font color="#CCCCCC">especially persistence on iOS has become</font>

937
00:45:05,680 --> 00:45:11,480
incredibly<font color="#E5E5E5"> hard in the time of iOS 8</font>

938
00:45:09,620 --> 00:45:15,020
where we had so many jail breaks

939
00:45:11,480 --> 00:45:17,510
especially<font color="#CCCCCC"> from China I would say in the</font>

940
00:45:15,020 --> 00:45:19,430
arrogance of in the regards of

941
00:45:17,510 --> 00:45:21,950
persistence they were really lucky

942
00:45:19,430 --> 00:45:24,049
<font color="#E5E5E5">because Apple repeatedly like four or</font>

943
00:45:21,950 --> 00:45:26,029
five<font color="#CCCCCC"> times failed to fix the back</font>

944
00:45:24,050 --> 00:45:28,250
correctly so they were always<font color="#E5E5E5"> using the</font>

945
00:45:26,030 --> 00:45:30,380
same bug<font color="#E5E5E5"> but now they</font><font color="#CCCCCC"> are</font><font color="#E5E5E5"> run</font><font color="#CCCCCC"> out of</font>

946
00:45:28,250 --> 00:45:34,760
these bugs<font color="#CCCCCC"> now persistence is really</font>

947
00:45:30,380 --> 00:45:38,000
hard<font color="#CCCCCC"> the next</font><font color="#E5E5E5"> thing is iOS experts have</font>

948
00:45:34,760 --> 00:45:39,830
become so valuable<font color="#CCCCCC"> for any</font><font color="#E5E5E5"> kind of thing</font>

949
00:45:38,000 --> 00:45:41,540
not<font color="#E5E5E5"> even like selling them</font><font color="#CCCCCC"> to</font>

950
00:45:39,830 --> 00:45:44,750
<font color="#E5E5E5">governments but only like selling them</font>

951
00:45:41,540 --> 00:45:47,110
to to other<font color="#CCCCCC"> researchers</font><font color="#E5E5E5"> or so so that</font>

952
00:45:44,750 --> 00:45:50,210
giving out this<font color="#CCCCCC"> whole stuff for</font><font color="#E5E5E5"> free</font>

953
00:45:47,110 --> 00:45:54,110
<font color="#CCCCCC">just doesn't make sense anymore because</font>

954
00:45:50,210 --> 00:45:57,890
<font color="#E5E5E5">like</font><font color="#CCCCCC"> today we learned that the rhodium</font>

955
00:45:54,110 --> 00:46:01,340
still pays like 1 million<font color="#E5E5E5"> for a whole</font>

956
00:45:57,890 --> 00:46:03,500
persistent jailbreak and even 1.5

957
00:46:01,340 --> 00:46:06,980
million if it does not require<font color="#E5E5E5"> any</font><font color="#CCCCCC"> kind</font>

958
00:46:03,500 --> 00:46:09,890
of interaction<font color="#E5E5E5"> and this yes is selling</font>

959
00:46:06,980 --> 00:46:12,140
to<font color="#CCCCCC"> governments but again they are there</font>

960
00:46:09,890 --> 00:46:14,480
are private companies<font color="#E5E5E5"> that will just pay</font>

961
00:46:12,140 --> 00:46:16,430
you for demonstrating<font color="#CCCCCC"> to their</font>

962
00:46:14,480 --> 00:46:18,560
management<font color="#CCCCCC"> that distincts</font>

963
00:46:16,430 --> 00:46:20,509
<font color="#CCCCCC">so it still exists</font><font color="#E5E5E5"> so they pay you like</font>

964
00:46:18,560 --> 00:46:23,600
<font color="#CCCCCC">50k just for demonstrating as an ex that</font>

965
00:46:20,510 --> 00:46:25,250
<font color="#E5E5E5">invulnerability exists so giving it out</font>

966
00:46:23,600 --> 00:46:28,120
for free does not make any sense<font color="#CCCCCC"> anymore</font>

967
00:46:25,250 --> 00:46:31,670
<font color="#E5E5E5">and I think that is the major reason and</font>

968
00:46:28,120 --> 00:46:33,290
<font color="#E5E5E5">yeah but of course it also got harder</font>

969
00:46:31,670 --> 00:46:35,660
<font color="#CCCCCC">and the people are just</font><font color="#E5E5E5"> not willing to</font>

970
00:46:33,290 --> 00:46:44,740
do it<font color="#E5E5E5"> for free</font><font color="#CCCCCC"> and email this amount of</font>

971
00:46:35,660 --> 00:46:44,740
work<font color="#E5E5E5"> yeah more questions it's over</font>

