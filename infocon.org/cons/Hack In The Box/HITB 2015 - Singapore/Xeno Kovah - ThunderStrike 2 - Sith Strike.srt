1
00:00:08,740 --> 00:00:18,509
everyone you know during work time
presenting today joined with travel

2
00:00:18,509 --> 00:00:24,900
Hudson and Corey calemburg I'll be
playing the part I think I'll be playing

3
00:00:24,900 --> 00:00:30,119
the part of travel and Corey so I'm
gonna do the about us for travel even

4
00:00:30,119 --> 00:00:35,989
though he's not here so travel you know
previously I did wonder strike one to

5
00:00:35,989 --> 00:00:43,349
talk talk in December of this last year
is more commonly known for his work on

6
00:00:43,350 --> 00:00:49,140
the magic lantern custom firmware for
Canon cameras but he also sort of digs

7
00:00:49,140 --> 00:00:53,500
into old school stuff and we found the
easter egg

8
00:00:53,500 --> 00:00:59,839
picture of the Mac Developer team in the
old Max and so travel originally got

9
00:00:59,839 --> 00:01:06,700
into Mac work because his company to
Sigma Nu Sigma investments in hedge fund

10
00:01:06,700 --> 00:01:10,729
in New York and they were looking to
start rolling out MacBooks within their

11
00:01:10,729 --> 00:01:15,219
enterprise but they knew of the previous
work that had been done by snare back in

12
00:01:15,219 --> 00:01:20,490
2012 where he said you know there's ways
to boot kit max by using fallible to

13
00:01:20,490 --> 00:01:23,158
doctors and they wanted to see and
understand you know is this still

14
00:01:23,159 --> 00:01:27,369
applicable to the max so they looked
into that before before going in that

15
00:01:27,369 --> 00:01:29,039
direction

16
00:01:29,039 --> 00:01:33,920
accordion I started we've been working
for the past couple of years at the

17
00:01:33,920 --> 00:01:38,399
firmware level at our previous employer
miter and then most recently we started

18
00:01:38,399 --> 00:01:42,649
like record this past January and we say
we do digital to do because we basically

19
00:01:42,649 --> 00:01:47,909
focus on the deep dark black magic
because if you don't know how or where

20
00:01:47,909 --> 00:01:51,840
works it's just black magic to you you
have no hope to possibly defend against

21
00:01:51,840 --> 00:01:56,340
the attacker was coming at you at this
level so we focus on you know main PC

22
00:01:56,340 --> 00:02:01,439
security as well as all the PC firmware
peripherals know how this collaboration

23
00:02:01,439 --> 00:02:07,928
came about is that this past year at CCC
Corey and Rafal void check from chromium

24
00:02:07,929 --> 00:02:12,590
were presenting a couple of different
vulnerability is that we have discovered

25
00:02:12,590 --> 00:02:17,890
done at the firmware level and temples
also presenting his thunder strike one

26
00:02:17,890 --> 00:02:19,380
presentation of the same conf

27
00:02:19,380 --> 00:02:23,430
and he basically said wouldn't it be
interesting if we took you know this

28
00:02:23,430 --> 00:02:27,610
existing attack where you know we use
thunderbolt and we use physical level

29
00:02:27,610 --> 00:02:32,230
attacks and wouldn't be interesting if
we combine them because these you know

30
00:02:32,230 --> 00:02:36,980
quote PC attacks that we had phoned and
shown on PCs you know their firmware

31
00:02:36,980 --> 00:02:40,350
level attacks right now it's just a
question does the firmware on the Mac

32
00:02:40,350 --> 00:02:47,010
look like firmware on PCs and if so can
we combine the two are primary thing

33
00:02:47,010 --> 00:02:50,700
that we want to keep emphasizing in this
talk is that you in five honorable

34
00:02:50,700 --> 00:02:54,660
vulnerabilities the things that the
lowest level of the system at your BIOS

35
00:02:54,660 --> 00:02:59,190
level they're very often shared between
many different systems because they're

36
00:02:59,190 --> 00:03:03,280
just sort of a common ecosystem there's
code that trickles down from you if I to

37
00:03:03,280 --> 00:03:09,660
other bio spenders that's our core
thesis here and so where is normally we

38
00:03:09,660 --> 00:03:13,250
would just talk at you for a long time
and then end with the sexy demo we're

39
00:03:13,250 --> 00:03:17,310
gonna start with the sexy demo today and
you know so you basically what this is

40
00:03:17,310 --> 00:03:19,500
all about

41
00:03:19,500 --> 00:03:24,720
we're starting from a Mac which someone
has gone to grab you know Jedi Kittens

42
00:03:24,720 --> 00:03:28,240
screensaver they've done with their
screensavers we're starting from you

43
00:03:28,240 --> 00:03:31,130
know a social engineering type attack
but you know there's remote rude

44
00:03:31,130 --> 00:03:37,549
exploits just as well we then use this
nice Twitter exploit from from define

45
00:03:37,550 --> 00:03:42,550
after nice little remote are not remote
root but local route escalation that

46
00:03:42,550 --> 00:03:48,580
fits in a single tweet so the attacker
escalates to become root level user and

47
00:03:48,580 --> 00:03:53,010
then now at this point on some systems
you can just directly break into the

48
00:03:53,010 --> 00:03:57,299
flash chip right then and there it's
what spends on what the system is what

49
00:03:57,300 --> 00:04:01,220
the patch level is that kind of thing
but so theoretically on some systems you

50
00:04:01,220 --> 00:04:06,500
become a reliable attacker and you can
just break into the BIOS right away and

51
00:04:06,500 --> 00:04:10,350
then also what the root level attacker
can potentially do if they can look for

52
00:04:10,350 --> 00:04:14,030
and herbal tea Ethernet adapters that
are plugged into the system and when

53
00:04:14,030 --> 00:04:17,858
they find a thunderbolt Ethernet adapter
Dell update its option room so the PCI

54
00:04:17,858 --> 00:04:22,000
up sharam a little blob of code that
sets off on the adapter and gets read in

55
00:04:22,000 --> 00:04:27,570
by the BIOS as the system reboots so we
can go reflash the option room as well

56
00:04:27,570 --> 00:04:32,909
what that looks like a little sticker on
the Thunderbolt Ethernet

57
00:04:32,910 --> 00:04:37,300
after this thing is now infected as the
match itself so we broke into the

58
00:04:37,300 --> 00:04:41,400
firmware on the Mac and we broke into
the option ROM for a we're on the

59
00:04:41,400 --> 00:04:47,979
Thunderbolt Ethernet adapter but this
point if you reboot your system you know

60
00:04:47,980 --> 00:04:52,050
take out your little infected thing he
fell off the side for later

61
00:04:52,050 --> 00:04:56,230
reboot your system and now you know just
to prove that were there done that the

62
00:04:56,230 --> 00:05:00,640
firmware level you turn on your for both
boot and now we have a nice little print

63
00:05:00,640 --> 00:05:05,510
out at the boot time it saying okay I'm
here down in the BIOS level and you know

64
00:05:05,510 --> 00:05:09,150
I can say anything that runs thereafter
and the operating system all the

65
00:05:09,150 --> 00:05:16,000
applications everything but then we
wanted to show that this can also spread

66
00:05:16,000 --> 00:05:20,950
virally so we call this a firmware it's
sort of the first ever sort of instance

67
00:05:20,950 --> 00:05:24,250
where someone spreads from forward to
firmware and I just four more to

68
00:05:24,250 --> 00:05:30,040
firmware but heterogeneous firmware so
we have this option ROM that exists in

69
00:05:30,040 --> 00:05:34,230
the Thunderbolt Ethernet adapter we plug
it into the next machine and when we

70
00:05:34,230 --> 00:05:39,610
reboot the machine the option Iran gets
consumed by the BIOS and some code gets

71
00:05:39,610 --> 00:05:44,490
executed at the BIOS level and now again
depending on the system maybe you can

72
00:05:44,490 --> 00:05:49,850
break indirectly maybe it can't in this
case it can't break indirectly so it

73
00:05:49,850 --> 00:05:53,900
looks the s3 resume script will talk
about that later but you can think of it

74
00:05:53,900 --> 00:05:58,229
like I ran some code and I need to do
wait until some action happened later on

75
00:05:58,230 --> 00:06:03,490
and one that actually happened later on
then I can break into the BIOS that's

76
00:06:03,490 --> 00:06:07,640
the Thunder strike printout from the
option ROM as opposed to the BIOS itself

77
00:06:07,640 --> 00:06:12,030
and so the thing that we're waiting for
later the particular exploit that we

78
00:06:12,030 --> 00:06:15,950
used here was the dearth of anonymous
attack which will talk about their

79
00:06:15,950 --> 00:06:20,159
thoroughness attack gets invoked when
you have a system go to sleep so when

80
00:06:20,160 --> 00:06:25,220
you close the lid on your laptop that's
your system going to sleep we chose to

81
00:06:25,220 --> 00:06:28,970
show it here by seeing the fans actually
spend down because when you put your

82
00:06:28,970 --> 00:06:32,570
system's leave it doesn't immediately go
to sleep it'll wait around for a few

83
00:06:32,570 --> 00:06:37,560
seconds so you know fifteen twenty
seconds one thing actually power down

84
00:06:37,560 --> 00:06:43,740
that's what allows the vulnerability to
be involved in we'll talk about it later

85
00:06:43,740 --> 00:06:46,480
2012 powers down it's literally as
simple as we power today

86
00:06:46,480 --> 00:06:50,860
down and then we will get back up and
now because of that option ROM it had

87
00:06:50,860 --> 00:06:55,710
taken control of some code earlier in
the system and so you close it put it to

88
00:06:55,710 --> 00:07:00,159
sleep you wake up back up and I'll the
Opteron level code that was staged in

89
00:07:00,160 --> 00:07:05,060
just waiting around that code is going
to get invoked and that code will now be

90
00:07:05,060 --> 00:07:14,340
able to actually break into the chip
itself now that's infected in the system

91
00:07:14,340 --> 00:07:19,039
up and this is just proving that this
particular Mac we couldn't infected

92
00:07:19,040 --> 00:07:23,430
directly but we plugged in the option we
did it we put it to sleep we will get

93
00:07:23,430 --> 00:07:28,050
back up and now we're actually broken
into the BIOS level so you reboot system

94
00:07:28,050 --> 00:07:34,160
and again there's thunder strike to its
actually infected the firmware level and

95
00:07:34,160 --> 00:07:39,030
so this was actually a viral spread via
the option on device by the little

96
00:07:39,030 --> 00:07:43,919
dongle that little Ethernet adapter
there is spreading malicious software

97
00:07:43,920 --> 00:07:50,740
between biases and then each BIOS can
continuously in fact every option ROM

98
00:07:50,740 --> 00:07:58,460
that it comes in contact with these
wonderful teacher net adapters

99
00:07:58,460 --> 00:08:04,989
basically that showing sort of the the
life cycle of this particular start with

100
00:08:04,990 --> 00:08:09,330
remote exploit and it may break into the
BIOS directly at me not it can break

101
00:08:09,330 --> 00:08:13,599
into the option Rome and then the option
ROM can eventually break into the BIOS

102
00:08:13,600 --> 00:08:18,840
and so you keep spreading these spread
this infected adapter and the doctor

103
00:08:18,840 --> 00:08:22,330
keeps infecting the BIOS of every
machine it comes in contact with and

104
00:08:22,330 --> 00:08:25,710
then every machine that it comes in
contact with is now infecting every

105
00:08:25,710 --> 00:08:30,599
adapter that it comes in contact with so
nice little diversion down at the lowest

106
00:08:30,600 --> 00:08:34,950
levels where none of you with everything
to look and none of you will ever catch

107
00:08:34,950 --> 00:08:39,970
it down at that level again for thesis
here is that unified vulnerability is

108
00:08:39,970 --> 00:08:45,130
our shared between many different
systems so you know we want to make it

109
00:08:45,130 --> 00:08:50,380
clear you open up some random basis
machine as an Asus desktop and this is a

110
00:08:50,380 --> 00:08:54,490
MacBook Air little computer and you
wouldn't think that like a tiny

111
00:08:54,490 --> 00:08:59,420
ultralight MacBook Air looks anything
like Macy's desktop but

112
00:08:59,420 --> 00:09:03,620
you know you open them up their control
flow graphs are more or less the same

113
00:09:03,620 --> 00:09:06,640
the only reason this one's little
factors cause I've got comments over on

114
00:09:06,640 --> 00:09:10,620
this side but overall their control flow
graph so the same they call the exact

115
00:09:10,620 --> 00:09:14,410
functions and the same order same
assembly instructions the exact same

116
00:09:14,410 --> 00:09:22,010
registers so everybody's machines look
more or less similar down at this level

117
00:09:22,010 --> 00:09:27,110
down at the firm level so bring it up a
level for a second we gotta talk about a

118
00:09:27,110 --> 00:09:31,990
little bit about the history of Mac
firmware vs PC firmware if I vs you if i

119
00:09:31,990 --> 00:09:38,980
if I was intel's original proud program
to try to replace legacy biases so Intel

120
00:09:38,980 --> 00:09:43,370
was trying to make a non backwards
compatible you know they're x64

121
00:09:43,370 --> 00:09:48,400
architecture Itanium Titanic so they
were trying to say ok let's get rid of

122
00:09:48,400 --> 00:09:51,790
all this legacy Croft right and that's a
good thing that would have been a good

123
00:09:51,790 --> 00:09:52,719
thing right

124
00:09:52,720 --> 00:09:56,340
had we been able to get rid of all that
legacy craft but no it failed in the

125
00:09:56,340 --> 00:10:01,810
marketplace but still until when they
were making the firmware for these exit

126
00:10:01,810 --> 00:10:07,359
x64 devices they said let's build
something that's more well structured

127
00:10:07,360 --> 00:10:10,360
more modular easier to understand

128
00:10:10,360 --> 00:10:15,200
easier to add new components to that
this will no work for us for the next 40

129
00:10:15,200 --> 00:10:20,060
years instead of what we've been using
for the last forty years though they

130
00:10:20,060 --> 00:10:25,890
made this if I extensible firmware
interface Apple then you know Apple

131
00:10:25,890 --> 00:10:30,410
previously used PowerPC Macs and when
Apple moved from PowerPC to x86

132
00:10:30,410 --> 00:10:34,630
processors you know they they obviously
where you know tightly integrated with

133
00:10:34,630 --> 00:10:37,580
Intel at the time they said hey and tell
we're going to use your stuff and Intel

134
00:10:37,580 --> 00:10:42,490
said while you're using our stuff could
you please use this if I framework

135
00:10:42,490 --> 00:10:48,360
instead of the old crafty legacy BIOS
they said sure and Apple 40 if I version

136
00:10:48,360 --> 00:10:55,270
1 at some point in the early 2004 and
2005 Intel tried to get buy-in from the

137
00:10:55,270 --> 00:10:59,770
rest of industry and they created not
just east of I but you if I the unified

138
00:10:59,770 --> 00:11:04,949
extensible firmware interface for them
and they sort of deprecated the old the

139
00:11:04,950 --> 00:11:08,310
old code and he said ok you if I we're
gonna have an open source reference

140
00:11:08,310 --> 00:11:11,589
implementation we're gonna go forward
with many different vendors

141
00:11:11,590 --> 00:11:17,180
from here till there's sort of many many
millions of lines of code that were in

142
00:11:17,180 --> 00:11:21,870
common and so you can have a situation
where some of the vulnerabilities will

143
00:11:21,870 --> 00:11:25,740
talk about later today we saw them you
know on new systems and they went all

144
00:11:25,740 --> 00:11:30,640
the way back into the original if I
could basis so so generally the main

145
00:11:30,640 --> 00:11:36,660
point here is that we always knew that
Apple's firmware sort of Fort off from

146
00:11:36,660 --> 00:11:42,069
the main if I code base and you if I
went and did its own thing and so there

147
00:11:42,070 --> 00:11:47,530
is a question of like how close does an
Apple firmware if I told you know one

148
00:11:47,530 --> 00:11:52,089
point something for where with maybe
some additional patches but how close to

149
00:11:52,090 --> 00:11:56,720
an Apple firmware look to all these
other PC former because we know that

150
00:11:56,720 --> 00:12:02,460
when Microsoft pushed secure boot for
Windows 8 and they said Windows 8 you

151
00:12:02,460 --> 00:12:07,320
must implement secure boot secure boot
was specified in UEFI version 2.3 point

152
00:12:07,320 --> 00:12:12,090
one so it's like we've got a relatively
large amount of divergence and we know

153
00:12:12,090 --> 00:12:16,440
all these modern PCs are going to be
running you if I 2.3 2.1 max running if

154
00:12:16,440 --> 00:12:22,230
I one point something how close today
actually look to each other and that was

155
00:12:22,230 --> 00:12:29,750
the fundamental question but like I said
even though modern et que tu if I

156
00:12:29,750 --> 00:12:35,910
developers kit to for you if I to stuff
even the modern stuff still has a lot of

157
00:12:35,910 --> 00:12:40,990
code that in common with the original if
I code they wrote it once they said okay

158
00:12:40,990 --> 00:12:46,870
that works not broken don't fix it
though you know code just continues to

159
00:12:46,870 --> 00:12:52,760
continues to propagate forward and you
know you still have even even though

160
00:12:52,760 --> 00:12:57,160
we're trying to get this new modular
architecture they're still gonna be all

161
00:12:57,160 --> 00:13:01,740
of these decades of legacy decisions
things around PCI option rooms which

162
00:13:01,740 --> 00:13:06,760
were specified you know decades prior
there are still elements of legacy

163
00:13:06,760 --> 00:13:12,939
support which come in and get included
moving forward but basically we wanted

164
00:13:12,940 --> 00:13:16,400
to when we when we wanted to work with
travel on this we wanted to look at a

165
00:13:16,400 --> 00:13:21,459
variety of other vulnerabilities that we
had previously disclosed for PCs right

166
00:13:21,460 --> 00:13:24,790
generically PCs we'd never bothered to
go look at these

167
00:13:24,790 --> 00:13:29,790
on Macs before because we worked in
environments that predominantly Windows

168
00:13:29,790 --> 00:13:33,250
environments and so we were just trying
to focus on you know for these machines

169
00:13:33,250 --> 00:13:39,000
and our environment are they secure
enough so we considered five we'll we'll

170
00:13:39,000 --> 00:13:42,360
talk about 50 today there's a couple
other that are mentioned at the end of

171
00:13:42,360 --> 00:13:46,390
the slide back but these are the core
portability will talk about today and

172
00:13:46,390 --> 00:13:50,910
the three in the middle and red are the
specific vulnerabilities which the

173
00:13:50,910 --> 00:13:55,079
Thunder strike to a proof of concept
that we just showed the video for those

174
00:13:55,080 --> 00:14:00,460
actually use the first thing we're going
to talk about is speed racer and we

175
00:14:00,460 --> 00:14:04,960
wanted to look at this one because we
knew that this was a Intel hardware

176
00:14:04,960 --> 00:14:09,490
vulnerability right so this is it turns
out there's a race condition in the

177
00:14:09,490 --> 00:14:14,520
behavior of Intel hardware one of its
protection mechanisms just doesn't work

178
00:14:14,520 --> 00:14:19,120
due to hardware race condition and so we
know theoretically this could affect max

179
00:14:19,120 --> 00:14:22,350
just as well as BC's because doesn't
matter whether it's Mac forward doesn't

180
00:14:22,350 --> 00:14:27,810
matter with it if I R you if I this is
an Intel hardware problem no just to

181
00:14:27,810 --> 00:14:33,099
give you a sense of the basics of how
the problem exists there's this bios

182
00:14:33,100 --> 00:14:38,660
control register that's in the Intel
documentation and there's two bits and

183
00:14:38,660 --> 00:14:42,050
the interaction between these two
minutes is sort of interesting but this

184
00:14:42,050 --> 00:14:46,839
is the core access control the
first-order access control it's one of

185
00:14:46,840 --> 00:14:51,270
the oldest access controls are goes back
a very long ways in the hardware so

186
00:14:51,270 --> 00:14:56,270
there's a BIOS write enable big and if
you can set this bid equal to one then

187
00:14:56,270 --> 00:15:02,110
barring any other access control
mechanisms then you can write to them so

188
00:15:02,110 --> 00:15:07,440
that they can write over a flash of
contents so the way that you control

189
00:15:07,440 --> 00:15:11,410
whether or not malicious software can
write this pinnacle 21 is that there's a

190
00:15:11,410 --> 00:15:18,380
BIOS lock enabled bit and if this bit is
set to 1 if you block equal to one then

191
00:15:18,380 --> 00:15:22,330
if someone tries to write this bid equal
to 1 if they want to write to the BIOS

192
00:15:22,330 --> 00:15:26,790
it will cause an ass amaya system
management interrupt so that invokes

193
00:15:26,790 --> 00:15:31,680
this measure at mode code and that code
which was put there by the BIOS will get

194
00:15:31,680 --> 00:15:36,030
to be the core access control mechanisms
saying all right do I want to allow this

195
00:15:36,030 --> 00:15:37,209
person to write to

196
00:15:37,209 --> 00:15:44,649
to the BIOS right now what are presented
back at CCC this past December was this

197
00:15:44,649 --> 00:15:49,470
hardware race condition and the
fundamental race condition is that if

198
00:15:49,470 --> 00:15:54,329
you have a multi-core even just a multi
hyper threaded systems single core with

199
00:15:54,329 --> 00:15:57,910
hyperthreading turned on you can have
one quarter that's continuously

200
00:15:57,910 --> 00:16:02,759
hammering and saying like set BIOS right
knee legal ones that bias right now just

201
00:16:02,759 --> 00:16:07,600
continuously hammer on that and then
even though BIOS lock enabled us at and

202
00:16:07,600 --> 00:16:11,689
even though there's these smilies firing
off which you know then the S&M handler

203
00:16:11,689 --> 00:16:15,209
code should theoretically say no you're
not allowed no you're not allowed no

204
00:16:15,209 --> 00:16:19,138
you're not allowed even though that's
going on it turns out that just you know

205
00:16:19,139 --> 00:16:22,970
experimentally verifiable we don't know
why at the hardware level this works but

206
00:16:22,970 --> 00:16:28,850
we just know that it works we can just
keep hammering and say a right that

207
00:16:28,850 --> 00:16:32,649
right enable right said right enable
writes that right enable right of two

208
00:16:32,649 --> 00:16:36,149
threads one of them's hammering to say I
want to write the other threads

209
00:16:36,149 --> 00:16:40,050
hammering to say right this value right
this value right this value and so

210
00:16:40,050 --> 00:16:44,529
sometimes it's the case that you get the
things saying Let The Right equal to one

211
00:16:44,529 --> 00:16:48,290
and it does that it to one and then the
next thing sort of slots in right behind

212
00:16:48,290 --> 00:16:52,899
it and it does actually allow the right
flagship

213
00:16:52,899 --> 00:16:59,019
fundamental hardware race condition we
disclose this to Intel back in May of

214
00:16:59,019 --> 00:17:05,640
2014 and then it was first publicly
disclosed at CCC this past year so Intel

215
00:17:05,640 --> 00:17:09,159
basically said you know the solution for
this problem they said well yes we know

216
00:17:09,159 --> 00:17:12,890
that kind of this BIOS lock enabled kind
of deprecated they didn't officially

217
00:17:12,890 --> 00:17:16,990
ever say anywhere that like this is
deprecated by what they told us is that

218
00:17:16,990 --> 00:17:21,539
you know we've always been recommending
that by US makers make use of this

219
00:17:21,539 --> 00:17:25,510
latest protection that we've added into
the hardware which is called as a member

220
00:17:25,510 --> 00:17:26,339
of you P

221
00:17:26,339 --> 00:17:31,889
it basically says it's sort of an
override on this behavior this BIOS lock

222
00:17:31,890 --> 00:17:36,330
enable it says I don't even care if
someone can set BIOS right naval equal

223
00:17:36,330 --> 00:17:41,199
to one you can go ahead and said by
Friday believe that when all day you

224
00:17:41,200 --> 00:17:45,799
must now be in system management mode
before I will allow you to write to the

225
00:17:45,799 --> 00:17:50,410
bottles so this overrides it and says
okay no longer can my kernel driver

226
00:17:50,410 --> 00:17:55,770
just keep hammering on these access
control bit you must break in testimony

227
00:17:55,770 --> 00:18:01,530
before you are allowed to break into the
BIOS that's basically what Intel

228
00:18:01,530 --> 00:18:06,250
recommends and so this is kind of how we
will would look at you know a properly

229
00:18:06,250 --> 00:18:11,470
configured system you've got your BIOS
flash chip down here you've got some OS

230
00:18:11,470 --> 00:18:16,410
resident attacker and then in a fully
locked down system president attacker

231
00:18:16,410 --> 00:18:21,350
cannot write to the BIOS because there's
first-order this bias like an able and

232
00:18:21,350 --> 00:18:25,169
that's fine except we know that in
practice this can always be bypassed by

233
00:18:25,170 --> 00:18:31,110
Speed Racer but then there's the second
order SMB WPB so when this is that no

234
00:18:31,110 --> 00:18:35,270
one can write to the flash chip unless
they're in a spam and then there's the

235
00:18:35,270 --> 00:18:39,090
second order protections called
protected range registers which the BIOS

236
00:18:39,090 --> 00:18:43,840
maker can cover some slices of the BIOS
and make it so that even as some am

237
00:18:43,840 --> 00:18:51,090
cannot break into the BIOS on the
regions that are covered by that like I

238
00:18:51,090 --> 00:18:53,990
said we wanted to look at this because
we knew this is a fundamental hardware

239
00:18:53,990 --> 00:18:59,970
issue this is not a Mac issue not a PC
issue Intel issue so this is we

240
00:18:59,970 --> 00:19:06,140
typically we like to disclose through
cert because it has these nice charts

241
00:19:06,140 --> 00:19:09,140
where they say here the vendors which
said they were affected here's the ones

242
00:19:09,140 --> 00:19:14,740
who said they were not affected and hear
the vendors who said nothing so there's

243
00:19:14,740 --> 00:19:18,490
plenty of vendors were served will go up
and save your vendor these people told

244
00:19:18,490 --> 00:19:22,470
us that there's a vulnerability are you
vulnerable to it and some vendors just

245
00:19:22,470 --> 00:19:26,720
never say anything back so you can
pretty much guarantee that vendors that

246
00:19:26,720 --> 00:19:28,380
don't say anything

247
00:19:28,380 --> 00:19:33,290
probably vulnerable vendors that say
they're not affected maybe not

248
00:19:33,290 --> 00:19:36,930
vulnerable maybe maybe they are
vulnerable so in this particular case

249
00:19:36,930 --> 00:19:39,860
for the purpose of this talk we wanted
to go look at a bunch of different

250
00:19:39,860 --> 00:19:45,020
things because we never looked at them
on Apple system before but as you noted

251
00:19:45,020 --> 00:19:49,900
Apple said not vulnerable though we go
and we look at you know the bias control

252
00:19:49,900 --> 00:19:58,060
register on on Mac system and little bit
value is 8 which means that first of all

253
00:19:58,060 --> 00:20:02,510
bit one is not set by a flock enables
not said but five is now

254
00:20:02,510 --> 00:20:10,129
visualize it in your brain gets here he
did five has not set and so as a member

255
00:20:10,130 --> 00:20:17,520
WP is not that either so what this means
is that Apple is not using BIOS

256
00:20:17,520 --> 00:20:23,580
controlled by Islamic enable bit or
control as a member WP so now here's the

257
00:20:23,580 --> 00:20:27,980
point where I say technically Apple is
not vulnerable to speed racer because

258
00:20:27,980 --> 00:20:32,040
Speed Racer is a mechanism to defeat by
islamic enable they're not vulnerable

259
00:20:32,040 --> 00:20:36,760
because they're not using access control
mechanism there's no need to get around

260
00:20:36,760 --> 00:20:41,450
and access control mechanism that isn't
even there in the first place but this

261
00:20:41,450 --> 00:20:46,700
is what Apple system would look like it
you don't need to bypass this because

262
00:20:46,700 --> 00:20:51,710
everything is just straight open but
then there is you know this question of

263
00:20:51,710 --> 00:20:58,230
theirs these gaps in the protected range
registers as these gaps one of which is

264
00:20:58,230 --> 00:21:02,680
free if I variables and another which
you know we don't know what it's for now

265
00:21:02,680 --> 00:21:07,210
most of the time on PC systems they will
look similar to this go look at the

266
00:21:07,210 --> 00:21:08,550
controls on your PC

267
00:21:08,550 --> 00:21:12,409
it may look like this that may or may
not have these upper level protections

268
00:21:12,410 --> 00:21:16,870
but they will generally have protected
range registers covering code and stuff

269
00:21:16,870 --> 00:21:21,389
but not covering the if I variables
because there's an expectation that

270
00:21:21,390 --> 00:21:28,530
generally as a member must be allowed to
write to the EFI variables it's almost

271
00:21:28,530 --> 00:21:33,389
PCs if we like smash all of the EFI
variables it'll just break the system so

272
00:21:33,390 --> 00:21:37,250
go ahead try and your machines you
corrupt all of that space between the

273
00:21:37,250 --> 00:21:41,940
gaps your system will not boot now on
the Mac this didn't work so I tried this

274
00:21:41,940 --> 00:21:46,300
on this Mac Mini system and i overwrote
all the variables with access and it

275
00:21:46,300 --> 00:21:50,940
still booted and that was I was like
that's interesting what about this other

276
00:21:50,940 --> 00:21:55,600
guy right here right now if I smash all
of that and I don't even know what that

277
00:21:55,600 --> 00:21:58,669
is at this point I still don't know what
that is because I don't care what that

278
00:21:58,670 --> 00:21:58,909
is

279
00:21:58,909 --> 00:22:03,389
it's a gap where anyone can write and so
I'm going right there and I'm gonna see

280
00:22:03,389 --> 00:22:08,139
what happens if I smashed that then the
system would actually not food anymore

281
00:22:08,139 --> 00:22:12,279
and there's a video online which you can
go and watch that but it's not super

282
00:22:12,279 --> 00:22:15,590
interesting in terms of demo videos to
see a system that will not boot anymore

283
00:22:15,590 --> 00:22:19,499
it's just i mean it's a little bit
interesting to see defense been up to

284
00:22:19,499 --> 00:22:23,169
the fans do spin spin down and then
there's been up and then there's been no

285
00:22:23,169 --> 00:22:30,749
so you can go watch that on your own
time so the Apple fix for this came out

286
00:22:30,749 --> 00:22:36,070
recently intemperate 11 they said you
know an issue existed wear a dress

287
00:22:36,070 --> 00:22:39,779
covered by the detection range registers
this issue is fixed by check

288
00:22:39,779 --> 00:22:44,179
changing the protected range essentially
what they did was this right they just

289
00:22:44,179 --> 00:22:49,359
covered more of the protected range but
still you know there's no sort of

290
00:22:49,359 --> 00:22:56,939
mediation from an OS level attacker on
the rest of the media five variables as

291
00:22:56,940 --> 00:23:01,279
the members sort of not in the new place
not in the picture and so anyone can

292
00:23:01,279 --> 00:23:04,720
write any of the variables that may or
may not matter what I can say is that

293
00:23:04,720 --> 00:23:10,700
Apple has a tool at the command line
tool in the tool will not let you change

294
00:23:10,700 --> 00:23:16,169
any variable but given the fact that
there's just a gap in here you can

295
00:23:16,169 --> 00:23:23,190
manually change in a variable like next
vulnerability to consider is the start

296
00:23:23,190 --> 00:23:27,309
of anonymous Mon ability sometimes
you'll see people miss refer to this as

297
00:23:27,309 --> 00:23:33,289
the Dark Jedi attack but this was named
by Rafal void because he was analogous

298
00:23:33,289 --> 00:23:37,109
to what's going on so this vulnerability
has to do it you saw the devil video I

299
00:23:37,109 --> 00:23:40,629
put my mission to sleep and i wake back
up and now I've got a vulnerable system

300
00:23:40,629 --> 00:23:47,248
that I can break into the BIOS so in
Star Wars mythos darth plague defeated

301
00:23:47,249 --> 00:23:51,619
are phenomena and he killed him and then
he would put him into a coma he'd

302
00:23:51,619 --> 00:23:55,488
resurrect him he'd kill him again put
him into a coma again and he would you

303
00:23:55,489 --> 00:24:00,729
know continuously wake him and sleep in
order to study many Koreans in order to

304
00:24:00,729 --> 00:24:04,999
study the balance between life and death
in order to enhance his power of the

305
00:24:04,999 --> 00:24:11,369
dark side though the door phenomenon
ability is very similar basically we

306
00:24:11,369 --> 00:24:12,370
have a situation where

307
00:24:12,370 --> 00:24:15,889
these sort of access control bits that I
was telling you about like BIOS lock

308
00:24:15,890 --> 00:24:20,770
enable there's a situation where they
say like when you set this bit it's

309
00:24:20,770 --> 00:24:25,170
locked and it can't be reset no one can
set BIOS lock enabled equal to 0 you

310
00:24:25,170 --> 00:24:27,990
can't just turn the lock back off
because otherwise that would be

311
00:24:27,990 --> 00:24:32,850
pointless to have a lot in the first
place these bits only are supposed to

312
00:24:32,850 --> 00:24:37,020
reset when the computer reboots right so
you reboot the machine system goes

313
00:24:37,020 --> 00:24:42,170
unprotected and now you can write to the
BIOS if you need to do a BIOS update but

314
00:24:42,170 --> 00:24:46,510
it turned out when we sort of we
stumbled upon this accidentally with

315
00:24:46,510 --> 00:24:51,700
different vulnerability that all talk
about next but it turns out that if you

316
00:24:51,700 --> 00:24:56,970
put the system to sleep because the
system in sleep is losing power right

317
00:24:56,970 --> 00:25:00,450
you're you're trying to power down as
much of the hardware as possible while

318
00:25:00,450 --> 00:25:03,580
still keeping the RAM refreshed for
instance so that you can just wake up

319
00:25:03,580 --> 00:25:10,178
quickly when you go into this low power
mode you are losing configuration for a

320
00:25:10,179 --> 00:25:15,620
bunch of hardware and then if I and you
if I have a mechanism for you to regain

321
00:25:15,620 --> 00:25:20,669
the configuration as quick as possible
when you wake back up using a mechanism

322
00:25:20,670 --> 00:25:25,309
called the s3 boot script which will
talk about next though this

323
00:25:25,309 --> 00:25:29,649
vulnerability was disclosed to search I
can September 2014 and publicly

324
00:25:29,650 --> 00:25:34,880
disclosed at CCC last year so this is
just to give you sort of a sense of

325
00:25:34,880 --> 00:25:37,760
what's going on with the booster
portability obviously it's you know I

326
00:25:37,760 --> 00:25:43,320
can't talk about a half an hour talk and
three minutes but the basic idea is that

327
00:25:43,320 --> 00:25:46,879
your normal boot takes a certain amount
of time it's you know too damn slow

328
00:25:46,880 --> 00:25:52,040
right why does it take so long to boot
so you boot up your system normally and

329
00:25:52,040 --> 00:25:56,460
what's happening is that the system will
actually save of little bits of

330
00:25:56,460 --> 00:26:01,480
configuration information into what's
called the s3 boot script this boot

331
00:26:01,480 --> 00:26:05,030
script is per the name it's a script the
script it's gonna be interpreted later

332
00:26:05,030 --> 00:26:09,780
and the boot script will be used to sort
of reconfigure all the hardware bits by

333
00:26:09,780 --> 00:26:14,000
just doing whatever actions are called
for in the script right this value to

334
00:26:14,000 --> 00:26:19,790
memory there and that value of port i/o
over there said this PCI configuration

335
00:26:19,790 --> 00:26:24,620
address space to that though there's
basically a bunch of different option

336
00:26:24,620 --> 00:26:28,010
roads that go into the script and
there's going to be when you wake up

337
00:26:28,010 --> 00:26:33,410
from a sleep when you wake up from a
sleep it's going to go find the script

338
00:26:33,410 --> 00:26:36,860
which is going to be located in memory
somewhere in that becomes the

339
00:26:36,860 --> 00:26:39,689
fundamental vulnerability it's just
sitting around in memory where anyone

340
00:26:39,690 --> 00:26:44,000
can tamper with it and the reason it sit
around a memory is cuz you go back to

341
00:26:44,000 --> 00:26:47,270
the earliest specification and he
recommended just put it in memory

342
00:26:47,270 --> 00:26:53,680
somewhere so when you're resuming their
system from sleep literally there's a

343
00:26:53,680 --> 00:26:56,770
chunk of the BIOS that just goes down
the line and instead of doing everything

344
00:26:56,770 --> 00:27:02,080
like you do in a normal boot it just
execute these various opcodes but the

345
00:27:02,080 --> 00:27:06,320
most interesting opcode is the one sort
of at the bottom there

346
00:27:06,320 --> 00:27:10,129
dispatch up cohen this is a nice little
catch all whereas these are very

347
00:27:10,130 --> 00:27:13,750
specific like right some particular
value to port i/o or write some

348
00:27:13,750 --> 00:27:17,420
particular value to some particular
memory address dispatch job code is your

349
00:27:17,420 --> 00:27:21,990
capture all do anything generically
dispatch opcode literally just tells the

350
00:27:21,990 --> 00:27:27,360
boot script jump to this address and
execute that code right there what we

351
00:27:27,360 --> 00:27:31,020
have is a situation where we go to sleep
and we know that we're losing our lock

352
00:27:31,020 --> 00:27:35,660
bit on our BIOS access control
mechanisms we wake back up and there's

353
00:27:35,660 --> 00:27:40,290
just some script somewhere in RAM that
any attacker can just fiddle with and

354
00:27:40,290 --> 00:27:43,740
they can literally just insert a jump
instruction at the beginning of the

355
00:27:43,740 --> 00:27:47,100
script that says I know you haven't
locked down the BIOS yet but I want you

356
00:27:47,100 --> 00:27:54,740
to jump over here and execute my cellco
let the north and not show so if you

357
00:27:54,740 --> 00:27:58,370
only knew the power of the dark side

358
00:27:58,370 --> 00:28:02,189
protected Rangers jerseys last access
control mechanism in the only access

359
00:28:02,190 --> 00:28:07,990
control mechanism which Apple is using
they go away when you go to sleep and

360
00:28:07,990 --> 00:28:12,880
you wake back up right and now we can
use our force lightning to attack the

361
00:28:12,880 --> 00:28:19,429
code and stuff so in this case again we
went we looked at the search disclosures

362
00:28:19,429 --> 00:28:22,360
and we said you know what did Apple say
it up will say they're vulnerable or not

363
00:28:22,360 --> 00:28:27,340
and this one was a little weird because
normally we have affected not affected

364
00:28:27,340 --> 00:28:32,290
and didn't respond in this particular
case there were only affected and we

365
00:28:32,290 --> 00:28:34,320
checked in with certain on this

366
00:28:34,320 --> 00:28:37,320
and it turned out there was some snafu
in their communications it turned out

367
00:28:37,320 --> 00:28:40,899
they didn't actually ever tell Apple but
that's why it's nice that we had a

368
00:28:40,899 --> 00:28:44,379
little back up we also disclose this
vulnerability through the newly-formed

369
00:28:44,380 --> 00:28:49,279
UEFI Security Response Team so because
we've been finding so many

370
00:28:49,279 --> 00:28:52,139
vulnerabilities and other people have
been finding someone even abilities that

371
00:28:52,139 --> 00:28:56,519
you if I level over the past couple of
years you if I forum did a good

372
00:28:56,519 --> 00:29:00,730
proactive thing and they said we've got
these hundreds of companies it's not

373
00:29:00,730 --> 00:29:06,700
just your main big you know software
hardware makers your big OM's it's not

374
00:29:06,700 --> 00:29:10,440
just those guys who are using UEFI
there's a whole bunch of little guys

375
00:29:10,440 --> 00:29:15,659
that are using it as well so they made a
new team called USR tu UEFI Security

376
00:29:15,659 --> 00:29:20,710
Response Team where you can pass
vulnerability information into them and

377
00:29:20,710 --> 00:29:25,830
they will sort of distributed out to to
the other vendors and given that Apple

378
00:29:25,830 --> 00:29:31,740
is a board-level member of the UEFI
forum you would expect them to be

379
00:29:31,740 --> 00:29:33,419
processing unit

380
00:29:33,419 --> 00:29:41,039
SRT information so darth anonymous is
nice because whereas trembles original

381
00:29:41,039 --> 00:29:44,559
thunder strike one attack required
physical presence and physically

382
00:29:44,559 --> 00:29:47,370
plugging in that Ethernet adapter

383
00:29:47,370 --> 00:29:53,008
Thomas is fundamentally a you know
remote removable attack right if you get

384
00:29:53,009 --> 00:29:55,929
into the box you've got a remote shell
you got your medical a challenge the

385
00:29:55,929 --> 00:30:01,169
system you manipulate the you manipulate
the boot script and memory you set it to

386
00:30:01,169 --> 00:30:04,710
sleep and then you set a timer to wake
it up immediately thereafter and now

387
00:30:04,710 --> 00:30:09,350
you've got an unlocked BIOS and you can
just write to it so physical access

388
00:30:09,350 --> 00:30:17,490
whether through physical programmers or
physical dongles is no longer necessary

389
00:30:17,490 --> 00:30:21,890
I think again this is one of those you
know bad on the presenter for giving you

390
00:30:21,890 --> 00:30:26,250
tiny text that you can't read but this
is just showing the basic process here

391
00:30:26,250 --> 00:30:30,440
so we've got you know check what are /
lockdown bits are check what are

392
00:30:30,440 --> 00:30:35,940
protected range registers are up front
then we're going to manipulate the boot

393
00:30:35,940 --> 00:30:42,730
script in memory so change the entry
point to jump into our shell code go

394
00:30:42,730 --> 00:30:47,250
look at our location here is our
particular shellcode bytes it does a

395
00:30:47,250 --> 00:30:52,470
very simple thing which is literally
just as the system's coming back up

396
00:30:52,470 --> 00:30:55,929
normally it would lock itself would
configure everything make it a lot and

397
00:30:55,929 --> 00:30:59,320
then say okay no one's allowed to touch
this anymore we just like leave it

398
00:30:59,320 --> 00:31:04,090
unlocked and then we say lock it and no
one's allowed to touch this anymore but

399
00:31:04,090 --> 00:31:07,820
it's so just lock it into a vulnerable
state as it's resuming at that point

400
00:31:07,820 --> 00:31:13,500
then you sort of previous step p.m. CET
sleep now little command line things

401
00:31:13,500 --> 00:31:18,480
that go to sleep and then wake up back
out and you can see then on wake of the

402
00:31:18,480 --> 00:31:23,840
protector range registers are gone so we
can now write anywhere in the BIOS and

403
00:31:23,840 --> 00:31:27,809
so we just wrote some hello world to
some location that we knew wouldn't

404
00:31:27,809 --> 00:31:33,840
break it I was gonna bility took all of
like a couple hours in order to install

405
00:31:33,840 --> 00:31:37,678
Windows on a Mac user existing Windows
proof of concepts and determined that

406
00:31:37,679 --> 00:31:41,550
yes max available to death when I miss
now there was a very interesting thing

407
00:31:41,550 --> 00:31:43,669
that showed up in about the same time
frame

408
00:31:43,670 --> 00:31:49,640
earlier this spring the Prince harming
attack which was named by Katie Mon

409
00:31:49,640 --> 00:31:53,450
because Peter Pilotto didn't want to
name it but it's good to have names

410
00:31:53,450 --> 00:31:56,470
because they're easier to remember the
numbers I don't care if you don't like

411
00:31:56,470 --> 00:32:01,410
hardly know that it's easier to remember
names though this is a vulnerability

412
00:32:01,410 --> 00:32:05,550
that we had actually seen on PCs back in
2013 and we had been like fighting with

413
00:32:05,550 --> 00:32:10,240
certain to get them to like released the
circular ability they basically had said

414
00:32:10,240 --> 00:32:14,280
like back in 2013 oh it's passed already
on the vendors that you told us about so

415
00:32:14,280 --> 00:32:17,850
we're not going to disclose it publicly
because it's already patched who cares

416
00:32:17,850 --> 00:32:22,178
we don't need coordination or like know
your job is to like tell people that

417
00:32:22,179 --> 00:32:29,380
their vulnerabilities anyways so what
happened was Pedro was sort of looking

418
00:32:29,380 --> 00:32:30,610
at the same sort of it

419
00:32:30,610 --> 00:32:35,299
text that we had presented previously
and he had seen the title of this talk

420
00:32:35,299 --> 00:32:38,790
and he had seen you know correctly
inferred if you have under strike to sit

421
00:32:38,790 --> 00:32:44,428
strike it probably has something to do
with safe Star Wars Darth you know this

422
00:32:44,429 --> 00:32:48,470
right so he'd been playing with the
dearth of anonymous attack because

423
00:32:48,470 --> 00:32:54,100
another researcher had put out a proof
of concept for that and what he found

424
00:32:54,100 --> 00:32:58,320
was that you know there was basically
something that was even worth where

425
00:32:58,320 --> 00:33:02,379
spend our thing I miss it was you know a
very screwed up

426
00:33:02,380 --> 00:33:07,610
suspend resume importation where
basically if you put the thing to sleep

427
00:33:07,610 --> 00:33:11,770
you didn't have to do anything special
you didn't have to manipulate the boot

428
00:33:11,770 --> 00:33:14,639
script you didn't have to do anything
you put it to sleep and you walk your

429
00:33:14,640 --> 00:33:18,130
Mac backup and it just lost the access
control than ever

430
00:33:18,130 --> 00:33:24,190
reset them so that was a very simple
kind of thing and Pedro it sort of

431
00:33:24,190 --> 00:33:27,230
assumed that while we were talking with
up about these other vulnerabilities

432
00:33:27,230 --> 00:33:31,669
that we're told them about this and that
was not the case so essentially his blog

433
00:33:31,669 --> 00:33:35,340
post with accidentally 0 during a
firmware level of vulnerability like

434
00:33:35,340 --> 00:33:37,909
dear everyone in the world you can
attack max by just putting him to sleep

435
00:33:37,910 --> 00:33:43,630
waking back up and now you can write to
the fashion though Apple's response for

436
00:33:43,630 --> 00:33:49,730
this was truly if I security update 5020
15:01 I think that was around June 30th

437
00:33:49,730 --> 00:33:56,970
of this year and we went and we
personnel to the results of that and it

438
00:33:56,970 --> 00:34:02,850
was however many 24 updates and
essentially meant everything since 2011

439
00:34:02,850 --> 00:34:08,089
you know potentially as one of these two
vulnerabilities and if you went and

440
00:34:08,090 --> 00:34:12,100
looked at the actual changes that were
made by this what they did was the set

441
00:34:12,100 --> 00:34:16,230
these protected range registers and the
flock down bad twitch stops you from

442
00:34:16,230 --> 00:34:19,909
changing protected range roadsters they
said that before they ever got to the

443
00:34:19,909 --> 00:34:23,679
point where they interpret the boot
script right so you go to sleep you wake

444
00:34:23,679 --> 00:34:24,230
back up

445
00:34:24,230 --> 00:34:27,810
executing some BIOS code the BIOS code
gets to the script and it starts

446
00:34:27,810 --> 00:34:32,259
interpreting it instead they set the
locks before it interprets the script so

447
00:34:32,260 --> 00:34:37,139
now it's actually in the BIOS where we
can't manipulate the locks so that's

448
00:34:37,139 --> 00:34:42,159
good that sets the protection range
registers but they actually didn't that

449
00:34:42,159 --> 00:34:44,140
can be just some other

450
00:34:44,139 --> 00:34:48,100
access control mechanism for some RAM
which was interesting because the

451
00:34:48,100 --> 00:34:53,469
original proof of concept that was shown
at CCC specifically would unlock this he

452
00:34:53,469 --> 00:34:58,140
said can be and then break their way
into our theory on why they didn't like

453
00:34:58,140 --> 00:35:01,629
this is because generally if you look at
Apple's architecture they try to use

454
00:35:01,630 --> 00:35:05,590
this to measure and mode as little as
possible and other miscellaneous

455
00:35:05,590 --> 00:35:09,220
observation that travel head is he
bought like the latest and greatest

456
00:35:09,220 --> 00:35:13,589
MacBook see that was available when we
were working on this and

457
00:35:13,590 --> 00:35:19,390
on his on that system he wiped out the
entire boot script he went to sleep and

458
00:35:19,390 --> 00:35:23,120
he was able to successfully wake back up
and that meant that essentially that

459
00:35:23,120 --> 00:35:27,049
boot script was not actually being used
so that means that Apple was somehow

460
00:35:27,050 --> 00:35:30,770
protecting the boot script on the latest
and greatest using some completely

461
00:35:30,770 --> 00:35:34,660
different means which you know we still
don't know and they hadn't actually back

462
00:35:34,660 --> 00:35:41,799
for that and use that protection on the
older systems but what we've heard from

463
00:35:41,800 --> 00:35:47,380
Apple on the latest latest and greatest
the IMAX that were released a couple

464
00:35:47,380 --> 00:35:52,900
days ago is that the 27 inch iMac which
just came out like two days ago

465
00:35:52,900 --> 00:35:57,250
1 day ago I guess they're starting to
use the lockbox which is essentially

466
00:35:57,250 --> 00:36:01,690
intel's recommended protection mechanism
at the mechanism that's in the open

467
00:36:01,690 --> 00:36:05,660
source reference implementation it put
the boot script up in Assam am where no

468
00:36:05,660 --> 00:36:12,899
one can touch it unless they break into
S&M first case study for option runs so

469
00:36:12,900 --> 00:36:19,200
you know this is you know super old IBM
PC and back at these earlier systems you

470
00:36:19,200 --> 00:36:23,950
had your Intel 8088 shipyard your BIOS
and then option wrongs which literally

471
00:36:23,950 --> 00:36:29,210
were optional roms that could be slotted
in there of course today option rooms

472
00:36:29,210 --> 00:36:33,280
are not actually wrong there are things
that are updatable otherwise we wouldn't

473
00:36:33,280 --> 00:36:37,580
have been able to show that Thunder
strike attack though I'm sure as our

474
00:36:37,580 --> 00:36:42,819
first talked about as an attack factor
in 2007 by John he's Minh but he sort of

475
00:36:42,820 --> 00:36:46,310
didn't do much with it he just said like
hey architecture early this could be a

476
00:36:46,310 --> 00:36:47,210
problem

477
00:36:47,210 --> 00:36:49,329
people could put code in the adoption
rooms and running

478
00:36:49,329 --> 00:36:54,390
in the BIOS but the important one was
here snare in 2012 where he started

479
00:36:54,390 --> 00:36:59,868
attacking max using operons and showed
how look this is code that runs in the

480
00:36:59,869 --> 00:37:03,130
context of the BIOS well before the
bootloader well before the operating

481
00:37:03,130 --> 00:37:08,039
system and we know you know just from
boot kits and general rootkit ammo the

482
00:37:08,039 --> 00:37:12,089
earlier you run your code more code
there after that you can subvert an

483
00:37:12,089 --> 00:37:19,058
attack and turn off security and all
that good stuff basically option Rams in

484
00:37:19,059 --> 00:37:23,670
the UFI forum you know they will
continuously we're going forward when

485
00:37:23,670 --> 00:37:29,229
they started implementing code signing
for in preparation for secure boot that

486
00:37:29,229 --> 00:37:33,979
kind of thing they basically said and
unified 2.3 that option ARMs are

487
00:37:33,979 --> 00:37:38,118
potential security threat we need to
require that we're not going to load

488
00:37:38,119 --> 00:37:40,499
them into BIOS if security is turned on

489
00:37:40,499 --> 00:37:45,269
unless they're actually digitally saw it
though because Apple never went to you

490
00:37:45,269 --> 00:37:52,180
if I 2.3% whatever they're still sort of
this forked version of 1.1 they're still

491
00:37:52,180 --> 00:37:55,940
sort of running option ron's
unconditionally and you know that was

492
00:37:55,940 --> 00:38:00,799
despite the fact that people have been
talking about it for many years now and

493
00:38:00,799 --> 00:38:04,029
this is the kind of thing where it was
architectural fixed in UEFI secure boot

494
00:38:04,029 --> 00:38:08,769
by using digital signatures but the kind
of thing which just requires an

495
00:38:08,769 --> 00:38:14,319
architectural fix to secure and you know
this is just showing that back in

496
00:38:14,319 --> 00:38:18,949
troubles original thunder strike talk he
was talking about you know what are the

497
00:38:18,949 --> 00:38:24,430
bad things that I could do from the
upper level and virally spreading was

498
00:38:24,430 --> 00:38:27,259
one of them and we just wanted to
actually prove that this was true no

499
00:38:27,259 --> 00:38:32,839
just saying yes this could be possible I
know it is possible and what was

500
00:38:32,839 --> 00:38:36,680
necessary to make this happen is that we
had to sort of upgrade the attack the

501
00:38:36,680 --> 00:38:42,118
original attack required you putting in
free dog on your machine and then

502
00:38:42,119 --> 00:38:48,829
running Broadcom by option ROM update or
that was literally a dossier so no more

503
00:38:48,829 --> 00:38:58,769
that basically travel ported there is a
test tool code ETH CEO Olof to overrun

504
00:38:58,769 --> 00:39:02,410
the Linux side of the world so I put you
know I put

505
00:39:02,410 --> 00:39:05,750
Linux on one of my max in order to do
some experiments with other proof of

506
00:39:05,750 --> 00:39:11,720
concept code found that you know you can
use a tool to adjust directly update the

507
00:39:11,720 --> 00:39:16,439
Broadcom Ethernet adapter option ROM and
you know from Linux it was literally

508
00:39:16,440 --> 00:39:21,900
trivial so then travel ported to Linux
code from the kernel driver over to Mac

509
00:39:21,900 --> 00:39:25,880
and made it just trivial now we have
code that runs on Mac which can update

510
00:39:25,880 --> 00:39:31,650
the options and so basically that looks
like you know you attack the system you

511
00:39:31,650 --> 00:39:36,280
escalator privileges for that now you
can talk to the PCI address space and

512
00:39:36,280 --> 00:39:40,940
then it's just literally the Linux code
already does the hard work for you it

513
00:39:40,940 --> 00:39:45,430
already knows how to talk to the magic
mailboxes on the Broadcom thing and you

514
00:39:45,430 --> 00:39:51,029
just write the malicious code into the
option room and this is just to say that

515
00:39:51,030 --> 00:39:54,440
it's not just these vulnerable to
Ethernet adapters there's a bunch of

516
00:39:54,440 --> 00:39:58,390
other peripheral devices which have
upper arms which can potentially be

517
00:39:58,390 --> 00:40:02,730
updated we just haven't looked into it
at this point

518
00:40:02,730 --> 00:40:10,410
response on this is that first all we
did all of this work you know back in

519
00:40:10,410 --> 00:40:15,788
the spring so OS X 10.8 11 even if your
route you can't necessarily install the

520
00:40:15,789 --> 00:40:21,109
kernel drivers which were using for this
and that's fine but it's been understood

521
00:40:21,109 --> 00:40:27,359
since 2006 with you enjoy our house was
talking about is game over right back

522
00:40:27,359 --> 00:40:31,589
when Vista was still in beta Vista was
adding kernel driver signing right now

523
00:40:31,589 --> 00:40:35,420
said no you will not be able to just get
into the kernel anymore on windows

524
00:40:35,420 --> 00:40:38,910
because you have to have a digital
signature but of course it the case that

525
00:40:38,910 --> 00:40:44,450
any digitally signed kernel driver that
has any vulnerability still allows an

526
00:40:44,450 --> 00:40:50,029
attacker way into the kernel so that's
fine but that's necessary but not

527
00:40:50,029 --> 00:40:57,279
sufficient but the better response to a
good thing to hear here is that again

528
00:40:57,279 --> 00:41:01,720
these new iMacs are not going to load
option ARMs by default and so that's

529
00:41:01,720 --> 00:41:05,890
great for the new iMacs I don't see any
of the new iMacs in the crowd today but

530
00:41:05,890 --> 00:41:10,558
you know eventually that'll be for our
laptops so you know we won't be able to

531
00:41:10,559 --> 00:41:12,150
load up two runs my fault

532
00:41:12,150 --> 00:41:17,839
do something magic you'll be able to
load them still but yeah alright final

533
00:41:17,839 --> 00:41:22,759
thing exclusively for you here at how
can the box today let's talk about the

534
00:41:22,760 --> 00:41:28,630
Queen's Gambit vulnerability and its
applicability to max so Corey won the

535
00:41:28,630 --> 00:41:33,309
pony this year for the best privilege
escalation bug because the Queen's

536
00:41:33,309 --> 00:41:37,180
Gambit vulnerability was something he
found an open source reference code that

537
00:41:37,180 --> 00:41:42,270
allows you to escalate from ring 3
userspace code all the way up into the

538
00:41:42,270 --> 00:41:43,349
BIOS

539
00:41:43,349 --> 00:41:50,299
bring negative 2.5 as I college though
this is affected hundreds of PC models

540
00:41:50,299 --> 00:41:55,869
literally over 500 HP's alone and so
this is a very prevalent vulnerability

541
00:41:55,869 --> 00:42:02,089
though this actually was talked about a
black hat last year so this was phoned

542
00:42:02,089 --> 00:42:08,619
in December of 2013 this was disclosed
in December of 2013 this was talked

543
00:42:08,619 --> 00:42:15,150
about publicly in July of 2014 and then
we're more than a year after that right

544
00:42:15,150 --> 00:42:19,420
so Corey went and looked at the open
source reference implementation and he

545
00:42:19,420 --> 00:42:22,960
found a variety of integer overflows and
he found them specifically on the code

546
00:42:22,960 --> 00:42:29,279
paths that involved BIOS updates right
so this is UEFI secure boot it's good it

547
00:42:29,279 --> 00:42:30,430
makes it so that

548
00:42:30,430 --> 00:42:35,480
attacker can't just automatically
overwrite your BIOS code but you've

549
00:42:35,480 --> 00:42:39,039
still got some time window between when
you reboot and when code is running

550
00:42:39,039 --> 00:42:43,640
running running running checks for a
BIOS update when it processes a BIOS

551
00:42:43,640 --> 00:42:48,808
update it'll do some amount of parsing
in order to sort of put the BIOS update

552
00:42:48,809 --> 00:42:51,700
back together again before it can
actually check the digital signature

553
00:42:51,700 --> 00:42:56,520
without going too much into it or
whether we have slowed that show it

554
00:42:56,520 --> 00:43:01,660
easier no we don't so I'm going too much
into it basically BIOS updates would

555
00:43:01,660 --> 00:43:05,558
tend to be fragmented across memory so
they wouldn't expect that you could like

556
00:43:05,559 --> 00:43:10,000
just slap a BIOS update at sixteen
megabytes big into physically contiguous

557
00:43:10,000 --> 00:43:13,940
memory so it'll be scattered around in
memory and in the BIOS has to put it all

558
00:43:13,940 --> 00:43:19,539
together basically there's integer
overflows and your typical buffer

559
00:43:19,539 --> 00:43:23,849
overflow type bugs in the coalescing of
the BIOS and that means an attacker can

560
00:43:23,849 --> 00:43:25,440
buffer overflow gain codex

561
00:43:25,440 --> 00:43:29,720
machine in the context of the BIOS while
the BIOS is completely unlocked and

562
00:43:29,720 --> 00:43:33,779
waiting to write the contents to the
flash chips so game over sort of attack

563
00:43:33,780 --> 00:43:40,510
at the time you know again going back to
our ability disclosures we had a number

564
00:43:40,510 --> 00:43:44,500
of vendors that said they were
vulnerable and that's sort of what we

565
00:43:44,500 --> 00:43:51,630
would expect and specifically Corey
wanted to say you know here's the open

566
00:43:51,630 --> 00:43:54,599
source reference implementation code but
how do we know whether or not that

567
00:43:54,599 --> 00:43:59,119
actually made its way into any real
shipping systems so he went and looked

568
00:43:59,119 --> 00:44:04,349
at HP EliteBook that we had laying
around and you know you use x-rays and

569
00:44:04,349 --> 00:44:07,530
you actually you know decompile the
stuff you use the open source reference

570
00:44:07,530 --> 00:44:11,339
implementation code and you can find
that things sort of match up pretty well

571
00:44:11,339 --> 00:44:15,480
right you can see the number of
descriptors count incrementing can see a

572
00:44:15,480 --> 00:44:19,470
descriptor buffer being incremented

573
00:44:19,470 --> 00:44:23,129
yeah thats said that like on this
particular EliteBook the code is

574
00:44:23,130 --> 00:44:26,589
definitely there it definitely matches
what we see in the open source reference

575
00:44:26,589 --> 00:44:31,960
implementation then there's the question
of you know again all these guys who say

576
00:44:31,960 --> 00:44:35,970
unknown didn't reply just assume they're
vulnerable but for those who said they

577
00:44:35,970 --> 00:44:40,470
were not affected this was because they
were generally say we roll our own BIOS

578
00:44:40,470 --> 00:44:44,859
update mechanism we don't use the open
source reference BIOS update we've done

579
00:44:44,859 --> 00:44:48,270
something else there and that's fine you
know we understand that given that

580
00:44:48,270 --> 00:44:52,020
response like ok if you did something
completely different we understand then

581
00:44:52,020 --> 00:44:58,300
you shouldn't be vulnerable to this
right now but the thing is when we start

582
00:44:58,300 --> 00:45:02,040
looking into it right the whole point of
this exercise was take some old bugs

583
00:45:02,040 --> 00:45:05,940
that we've already disclosed already
been public for you know years

584
00:45:05,940 --> 00:45:11,530
potentially look at them on Mac
specifically so you go look at the open

585
00:45:11,530 --> 00:45:15,770
source reference implementation this
capsule update it has a grid that's

586
00:45:15,770 --> 00:45:19,980
associated with the file on the firmware
file system you go look at the Max

587
00:45:19,980 --> 00:45:23,810
firmware file system and you see the
exact same grid so that these are

588
00:45:23,810 --> 00:45:26,589
supposed to be a hundred twenty eight
bit numbers there shouldn't be too much

589
00:45:26,589 --> 00:45:29,720
chance for collision here right they're
supposed to be globally unique

590
00:45:29,720 --> 00:45:33,750
identifiers so if we see a collision we
have you know high confidence that

591
00:45:33,750 --> 00:45:38,180
that's probably the same code right high
confidence is good

592
00:45:38,180 --> 00:45:41,549
but you know trust but verify

593
00:45:41,550 --> 00:45:49,150
so we go and we look at the HP BIOS
update sorry the HP BIOS update code and

594
00:45:49,150 --> 00:45:52,900
then we look at the city you know we
look for the same sort of code in the

595
00:45:52,900 --> 00:45:58,640
Mac in the Mac file of the same grid and
we can see that these things pretty much

596
00:45:58,640 --> 00:46:04,069
think up exactly the same ones they do
while loop the others awhile but six of

597
00:46:04,070 --> 00:46:09,380
one half dozen the other end so the code
looks promising least similar to suggest

598
00:46:09,380 --> 00:46:14,370
that this morn ability probably exists
then the next question is ok well the

599
00:46:14,370 --> 00:46:17,910
code there but is it actually reachable
it's there on the firmware file system

600
00:46:17,910 --> 00:46:25,020
but is it reachable and the answer is
yes right so you have to say like what

601
00:46:25,020 --> 00:46:27,320
is the condition for which this code is
reached

602
00:46:27,320 --> 00:46:31,150
we already knew the condition from the
past work you create a magic UEFI

603
00:46:31,150 --> 00:46:36,110
variable called capsule update data if
you create this magic variable capsule

604
00:46:36,110 --> 00:46:40,750
update data with this data structure in
this coalescing that goes on that leads

605
00:46:40,750 --> 00:46:44,990
to the vulnerability if you create that
you removed the system then you can see

606
00:46:44,990 --> 00:46:53,500
that it's actually chewing on that magic
variable and going to lead itself lead

607
00:46:53,500 --> 00:46:59,560
itself to have the vulnerability so what
this what this means is sort of we have

608
00:46:59,560 --> 00:47:04,360
this code that according to the
manufacturer that's not in vocal you

609
00:47:04,360 --> 00:47:08,430
know maybe it's there maybe it's not but
they say that's not possible to get to

610
00:47:08,430 --> 00:47:14,509
know we like to call this bias
necromancy because we have code which

611
00:47:14,510 --> 00:47:19,050
the vendors are telling us is dead code
they say that's not anything we have to

612
00:47:19,050 --> 00:47:22,360
worry about you know we don't have the
vulnerability we're older on BIOS update

613
00:47:22,360 --> 00:47:26,790
and it's true they have their own BIOS
update mechanism but they also have the

614
00:47:26,790 --> 00:47:32,460
dead code just sitting around on the
flash chip as well so invoking malicious

615
00:47:32,460 --> 00:47:37,840
code for the purpose of attack at their
bios necromancy fund so this essentially

616
00:47:37,840 --> 00:47:40,840
means that you've got double of the
attack surface in these sort of

617
00:47:40,840 --> 00:47:44,680
situations that I want to be clear is
not like an apple specific sort of thing

618
00:47:44,680 --> 00:47:46,720
we've actually seen this on other
vendors and

619
00:47:46,720 --> 00:47:53,520
other context it sort of the unified
development environment leaves much to

620
00:47:53,520 --> 00:47:54,770
be desired

621
00:47:54,770 --> 00:47:58,500
so it's a situation where you've got
like this giant code base and you've got

622
00:47:58,500 --> 00:48:01,970
all these code files and then you said
some configuration things that simply

623
00:48:01,970 --> 00:48:05,529
use this code in that code in that code
there and you may or may not know

624
00:48:05,530 --> 00:48:11,270
exactly what code is making its way onto
your actual firmware but when you have

625
00:48:11,270 --> 00:48:14,359
these sort of situations where you think
stuff is disabled

626
00:48:14,359 --> 00:48:22,200
you've got you know w tax service so the
mitigation for this of course is you

627
00:48:22,200 --> 00:48:27,140
know know the code right but fortunately
it's not always that easy because

628
00:48:27,140 --> 00:48:36,529
essentially depending on the level of
unit tests and QA type capabilities that

629
00:48:36,530 --> 00:48:42,109
a given vendor has for their bios it's
very hard to say like we definitely

630
00:48:42,109 --> 00:48:47,330
don't ever use that code in any
circumstance ever right is a question of

631
00:48:47,330 --> 00:48:52,109
if the codes there or if someone did
someone you know was it left there

632
00:48:52,109 --> 00:48:55,770
accidentally was it left there
intentionally for some particular use

633
00:48:55,770 --> 00:48:58,230
case that we know we don't know about
anymore

634
00:48:58,230 --> 00:49:04,310
engineer left something like that we've
seen with a lot of cases where the virus

635
00:49:04,310 --> 00:49:08,980
vendors don't necessarily they can't say
with definitive certainty that a

636
00:49:08,980 --> 00:49:13,330
particular piece of code is never meant
to be invoked in if you can't say that

637
00:49:13,330 --> 00:49:19,190
with certainty you in the BIOS world you
always play things very cautiously right

638
00:49:19,190 --> 00:49:23,150
you leave code in there you err on the
side of caution you leave code rather

639
00:49:23,150 --> 00:49:26,570
than removing it because if you removed
the code and it is meant to be involved

640
00:49:26,570 --> 00:49:30,210
in some particular circumstance that
means no you potentially have a

641
00:49:30,210 --> 00:49:33,700
vulnerable situation where someone tries
to invoke that code the code isn't there

642
00:49:33,700 --> 00:49:37,200
and system falls over and it bricked

643
00:49:37,200 --> 00:49:41,759
voters are always going to err on the
side of caution and trying not to you

644
00:49:41,760 --> 00:49:44,950
know they'll leave code and code
accumulates and then you get more

645
00:49:44,950 --> 00:49:48,410
vulnerabilities but you know obviously
this is the kind of thing where you have

646
00:49:48,410 --> 00:49:52,759
to get your hands around it you have to
understand what's actually there because

647
00:49:52,760 --> 00:49:57,000
otherwise you can't retire reduce your
tax service and just have this growing

648
00:49:57,000 --> 00:49:58,630
vulnerability

649
00:49:58,630 --> 00:50:04,240
keep her response to the game between
abilities

650
00:50:04,240 --> 00:50:07,680
was that King's gambit which is a
different sort of later stage

651
00:50:07,680 --> 00:50:11,129
vulnerability is not present and we
haven't actually went off and verify but

652
00:50:11,130 --> 00:50:14,529
all we did is we looked for Queen's
Gambit we said yes that's definitely

653
00:50:14,529 --> 00:50:20,460
there and here's the proof of concept
exploit to prove it though we showed

654
00:50:20,460 --> 00:50:24,140
that the Queen's Gambit was there and
Apple said we've made modifications

655
00:50:24,140 --> 00:50:30,950
protect against running unused functions
so hopefully starting in OS X 10.0 11.1%

656
00:50:30,950 --> 00:50:35,578
haven't had a chance to try out this
developer beta yet but that'll be out

657
00:50:35,579 --> 00:50:39,599
soon once that comes out then we can
actually check you know whether or not

658
00:50:39,599 --> 00:50:43,809
the Queen's Gambit no longer works and
more to the point we can find out how

659
00:50:43,809 --> 00:50:47,430
prevalent it was because we don't even
know at this point how many machines

660
00:50:47,430 --> 00:50:51,368
that actually affects we just tested in
on some systems and he said yep it's

661
00:50:51,369 --> 00:50:54,630
definitely there in some systems but we
didn't go and look throughout all

662
00:50:54,630 --> 00:51:03,329
possible systems no in conclusion the
dark side of the force the pathway to

663
00:51:03,329 --> 00:51:10,549
many abilities that some consider to be
unnatural furthermore you a five-under

664
00:51:10,549 --> 00:51:14,430
abilities are often shared between
different system I don't care if you're

665
00:51:14,430 --> 00:51:20,549
an EFI system that for a decade ago you
still maybe have some code that in

666
00:51:20,549 --> 00:51:24,019
common with the modern day thing and the
modern a thing as open source online

667
00:51:24,019 --> 00:51:29,390
where anybody can be looking for integer
overflows all day every day right so

668
00:51:29,390 --> 00:51:34,269
it's kind of a problem ultimately you
know this is sort of the breakdown of

669
00:51:34,269 --> 00:51:37,970
bugs that we looked at Snorlax and
Prince Charming that was straight up

670
00:51:37,970 --> 00:51:42,769
passed away right the fact that they
made its about the lockdown bits get set

671
00:51:42,769 --> 00:51:46,669
by the BIOS before executing the code
script that means that went away dearth

672
00:51:46,670 --> 00:51:50,839
of anonymous we call a partially patched
because there still is the TCMP and I

673
00:51:50,839 --> 00:51:55,640
can still break into S&M on max that's a
problem as far as I'm concerned because

674
00:51:55,640 --> 00:52:00,589
as a member of the place that no one can
ever look we as defenders can never

675
00:52:00,589 --> 00:52:05,900
inspect system management RAM at a great
place to be hiding and doesn't matter

676
00:52:05,900 --> 00:52:08,300
whether you do or more forensics or

677
00:52:08,300 --> 00:52:11,950
memory forensics you just can't look
there you just can't see an attacker and

678
00:52:11,950 --> 00:52:17,080
tracer were calling this still
vulnerable even though I said

679
00:52:17,080 --> 00:52:20,200
technically they're not returnable
because they don't even have the

680
00:52:20,200 --> 00:52:24,020
protection in the first place for us to
need to bypass but the basic point is

681
00:52:24,020 --> 00:52:27,710
until recommendation in our
recommendation is used all of the access

682
00:52:27,710 --> 00:52:34,400
control bits available to you so until
SMB WP is used you know this is it's if

683
00:52:34,400 --> 00:52:39,660
you can defeat the protector range
registers everything falls down I guess

684
00:52:39,660 --> 00:52:43,259
I put Kings game but there that should
say Queen's Gambit Queen's Gambit

685
00:52:43,260 --> 00:52:49,470
definitely vulnerable here shortly and
theoretical he will not theoretically

686
00:52:49,470 --> 00:52:56,149
ones ten-point 11.1 drops as public
should deal with it the Sicilian we

687
00:52:56,150 --> 00:53:00,680
didn't even talk about today that sort
of an older vulnerability where again it

688
00:53:00,680 --> 00:53:03,859
was an Intel hardware vulnerability that
cash attacks if you're familiar with

689
00:53:03,860 --> 00:53:12,790
circa 2009 invisible things labs and
flows work french researchers work that

690
00:53:12,790 --> 00:53:16,610
had to do with you know interactions
between system measure mode and and

691
00:53:16,610 --> 00:53:20,700
caching and intelligence been new
hardware for that with new protection

692
00:53:20,700 --> 00:53:24,620
but called system measuring range
registers and so there are systems there

693
00:53:24,620 --> 00:53:35,640
do exist systems where you know alright
and the last vulnerability is the set of

694
00:53:35,640 --> 00:53:39,520
ability this is a secure boot defeating
vulnerability but Apple doesn't use

695
00:53:39,520 --> 00:53:44,020
secure boot so its not applicable and I
was mostly a sort of Nami code bases

696
00:53:44,020 --> 00:53:48,670
that actually had that you know the
general recommendations that we always

697
00:53:48,670 --> 00:53:53,960
give to vendors is that Apple or anyone
else is testing old vulnerabilities

698
00:53:53,960 --> 00:53:57,670
against your systems right just because
you know if someone comes out and they

699
00:53:57,670 --> 00:54:01,330
say hey there's a serious vulnerability
over here in the post it to full

700
00:54:01,330 --> 00:54:07,190
disclosure vendors have to realize that
they are not special and unique

701
00:54:07,190 --> 00:54:12,540
snowflakes you fi systems all sort of
look like each other and availability on

702
00:54:12,540 --> 00:54:17,160
one potentially affects the others I'll
only fixing vulnerabilities that's a

703
00:54:17,160 --> 00:54:20,710
no-no right so when you have new
machines that are just not vulnerable

704
00:54:20,710 --> 00:54:24,200
and old machines which are still
vulnerable and it takes a researcher to

705
00:54:24,200 --> 00:54:29,740
go figure that out that's not good mojo
using all the locks like I said that's

706
00:54:29,740 --> 00:54:32,939
you know something we hammer on is used
all the protection mechanisms available

707
00:54:32,940 --> 00:54:39,910
to you so that you know just one block
away from defeat anyways I don't think

708
00:54:39,910 --> 00:54:43,980
you're all BIOS vendors so skip that
work in the audience do obligatory

709
00:54:43,980 --> 00:54:51,330
band-aid on it so sorry band aid is for
this Thunder strike type attack we did

710
00:54:51,330 --> 00:54:55,549
released an option on integrity checkers
own nicely all of the options roms for

711
00:54:55,550 --> 00:54:59,260
Thunderbolt Ethernet adapters at least
the ones we've seen today it they look

712
00:54:59,260 --> 00:55:03,520
basically exactly the same they're all
the same binary the only stuff that's

713
00:55:03,520 --> 00:55:09,840
different is like MAC address and checks
right so pretty much you know what a

714
00:55:09,840 --> 00:55:13,580
legitimate option should look like and
we can integrity check that so if you go

715
00:55:13,580 --> 00:55:17,810
to get how page you'll find that option
round tool that's like the open-source

716
00:55:17,810 --> 00:55:21,299
tool in order to dump the option of my
have the binary version of that in our

717
00:55:21,300 --> 00:55:24,670
labour Corps thing tamil is going to be
releasing that but eventually his

718
00:55:24,670 --> 00:55:29,240
company's said that he can't so we're
gonna instead so we'll post that

719
00:55:29,240 --> 00:55:34,439
eventually as well alright the last
thing I was gonna be pimpin open

720
00:55:34,440 --> 00:55:37,330
security training that info you don't
already know about it

721
00:55:37,330 --> 00:55:44,100
go check it go get some mad skills Corey
Corey and I have put up our x86 route

722
00:55:44,100 --> 00:55:47,970
kids life of binaries is portable
executable format

723
00:55:47,970 --> 00:55:55,359
I'll format of training upon exploits
and assembly arm x86 all sorts of stuff

724
00:55:55,359 --> 00:55:56,390
coming soon

725
00:55:56,390 --> 00:56:05,569
BIOS class and by soon I mean sunday
coming soon by was class right that's it

726
00:56:05,570 --> 00:56:09,390
looks like a few minutes and 50 seconds
for talk for questions thank you for

727
00:56:09,390 --> 00:56:10,410
attending the talk

728
00:56:10,410 --> 00:56:12,680
thank you for voting in the talk a good
question

