1
00:00:08,740 --> 00:00:22,919
so the last time before the lunch
actually read it with a different kind

2
00:00:22,919 --> 00:00:30,900
of cookie so applications and browsers
so let me first

3
00:00:30,900 --> 00:00:38,879
myself briefly and founder and CEO at
social security lab company that

4
00:00:38,879 --> 00:00:45,640
primarily is doing and testing and
advanced specialized security trainings

5
00:00:45,640 --> 00:00:55,379
many offensive what I love to do is
hunting box and found I found two bucks

6
00:00:55,379 --> 00:01:03,390
in Google Yahoo Microsoft which runs on
the fall for and what I do love to do

7
00:01:03,390 --> 00:01:10,640
except being back up and running a
company of banter stores is these people

8
00:01:10,640 --> 00:01:16,829
this is my true passion my current
training delivered here attacking the

9
00:01:16,829 --> 00:01:22,270
box just checking Singapore and also
other conferences around the world is

10
00:01:22,270 --> 00:01:25,670
like this hiking with applications case
studies of award-winning boxing Google

11
00:01:25,670 --> 00:01:31,890
Yahoo and more so this is purely based
on interesting box from from this

12
00:01:31,890 --> 00:01:42,470
company's here's my email and Twitter if
you want to reach me later so let's go

13
00:01:42,470 --> 00:01:57,850
so what's the motivation to to to
prepare the stock the main motivation is

14
00:01:57,850 --> 00:02:04,640
that cookie store sensitive data and it
automatically is it starts in state I

15
00:02:04,640 --> 00:02:08,530
like SessionID cross-site request
forgery talking or anything else

16
00:02:08,530 --> 00:02:12,070
interesting and dependent on the app
that's why this automatically

17
00:02:12,070 --> 00:02:15,450
interesting for a doctor that's the
motivation

18
00:02:15,450 --> 00:02:22,670
number one the point number two is that
people often focus on multi-factor

19
00:02:22,670 --> 00:02:28,980
authentication and this is good we know
that if we have but say two or three

20
00:02:28,980 --> 00:02:34,519
factor on two occasions that this is
really fine but we have to think about

21
00:02:34,520 --> 00:02:36,500
the whole process

22
00:02:36,500 --> 00:02:40,910
security is as strong as the weakest
point and we all we all know about this

23
00:02:40,910 --> 00:02:45,990
but we have to keep in mind that even if
we have three factor authentication that

24
00:02:45,990 --> 00:02:51,730
is really strong after a successful
indication the user is just recognized

25
00:02:51,730 --> 00:02:56,768
by the web server only by such an idea
or authentication cookie if there is any

26
00:02:56,769 --> 00:03:01,390
kind of weakness in the life cycle of
authentication cookie when the game is

27
00:03:01,390 --> 00:03:05,859
over right we can be impersonated by the
car so we have to take into account the

28
00:03:05,860 --> 00:03:10,420
whole life cycle and this point is quite
often missed by different people when I

29
00:03:10,420 --> 00:03:14,160
do consulting industry but I see that
they're very much focused on

30
00:03:14,160 --> 00:03:18,030
multi-factor authentication but but
forget about the whole lifecycle I

31
00:03:18,030 --> 00:03:23,569
reference some problems later during
stock another one what I have

32
00:03:23,569 --> 00:03:32,638
quite often is that related problems are
really underestimated if you for example

33
00:03:32,639 --> 00:03:38,459
if you report a problem to a customer or
just see other contesting reports said

34
00:03:38,459 --> 00:03:46,150
that the rating of risk is low I cannot
agree and I will show you that really

35
00:03:46,150 --> 00:03:51,409
quickly really the problem does not mean
local exploitation right from CBS s

36
00:03:51,409 --> 00:03:57,409
point of view we've got free access of
actors local network or remote in many

37
00:03:57,409 --> 00:03:59,328
cases we can do

38
00:03:59,329 --> 00:04:04,949
exploitation of cookie problems remotely
and then automatically during skills

39
00:04:04,949 --> 00:04:11,689
hire more severe consequences and so on
so forth so this is yet another point

40
00:04:11,689 --> 00:04:20,789
why I want to give this talk the next
point is that those free europe are more

41
00:04:20,789 --> 00:04:27,460
related to whip up well I love Wepa
packing but let's say the whole system

42
00:04:27,460 --> 00:04:33,198
is like this browser and web application
right so we might also have problems

43
00:04:33,199 --> 00:04:41,139
with security on the browser level and
insight we have so it's very very also

44
00:04:41,139 --> 00:04:50,150
good to talk about this perspective of
hawks and what about the consequences

45
00:04:50,150 --> 00:04:56,520
before going to details the consequences
of insecurity processing are for example

46
00:04:56,520 --> 00:05:02,320
user impersonation authorization bypass
remote cookie tampering and songs for so

47
00:05:02,320 --> 00:05:07,610
really bad things can happen if we don't
take into account cookie processing

48
00:05:07,610 --> 00:05:21,409
seriously so what's the agenda basically
I will present

49
00:05:21,409 --> 00:05:30,080
will be presented from free perspective
one publication says one that comes up

50
00:05:30,080 --> 00:05:37,599
to our mind another web browser I will
show you a few problems right now in

51
00:05:37,599 --> 00:05:45,739
current browsers and last one is Ric 66
65 we have to keep in mind that

52
00:05:45,739 --> 00:05:51,748
processing is described in this document
this is just a rough cedar describes how

53
00:05:51,749 --> 00:05:57,300
could you should be processed and all
modern browsers rely on this document

54
00:05:57,300 --> 00:06:03,069
you find any kind of weakness in this
document then the consequences that all

55
00:06:03,069 --> 00:06:06,659
browsers are effect affected right
that's why also it's very very

56
00:06:06,659 --> 00:06:10,969
interesting from my point of view to dig
into this document so now I believe we

57
00:06:10,969 --> 00:06:21,509
have all your perspectives and of course
I have one hour so I resent select the

58
00:06:21,509 --> 00:06:29,119
top secret topics but I believe that
they are the most interesting ones so

59
00:06:29,119 --> 00:06:40,719
let me start first from Secure Flight
antitrust yes something we will have

60
00:06:40,719 --> 00:06:46,569
problems there are more interesting from
development point of view some problems

61
00:06:46,569 --> 00:06:51,389
from hunting point of view and some
problems for for people who are just

62
00:06:51,389 --> 00:06:55,809
interested how browsers work I should
work and so on and so forth so secure

63
00:06:55,809 --> 00:07:03,069
black was the reason I started starting
from the basics we use Secure flights

64
00:07:03,069 --> 00:07:08,379
because we want to be sure that our
cookie will never will never be

65
00:07:08,379 --> 00:07:14,159
disclosed over in secure HTTP if this
cookie has this flak security like then

66
00:07:14,159 --> 00:07:20,739
it will only be sent over secure HTTPS
does the reason why we are using this

67
00:07:20,739 --> 00:07:25,219
like or why our authentication cookie or
any other quickly actually should have

68
00:07:25,219 --> 00:07:26,980
this fact

69
00:07:26,980 --> 00:07:34,770
what's what's the what's the problem the
problem is that is that well this this

70
00:07:34,770 --> 00:07:38,380
flag is used to protect the
confidentiality so that it is not

71
00:07:38,380 --> 00:07:45,420
disclosed over insecure HTP at the big
problem from RSC point of view is that

72
00:07:45,420 --> 00:07:52,900
in secure HTTP cannot overwrite a cookie
with security so can you see the problem

73
00:07:52,900 --> 00:08:00,260
almost immediately in secure HTTP can
have an impact on the security on secure

74
00:08:00,260 --> 00:08:07,950
HTTPS so from design point of view this
this this is just wrong and this is this

75
00:08:07,950 --> 00:08:14,500
is this r/c you will see that this
attack scenario is it is possible to

76
00:08:14,500 --> 00:08:22,140
secure HTTP has impact on secure HTTPS
this is written in the sacristy modern

77
00:08:22,140 --> 00:08:28,610
browsers rely on this r/c so immediately
all browsers are affected or this

78
00:08:28,610 --> 00:08:35,800
problem every browser so so another
perspective of

79
00:08:35,799 --> 00:08:39,809
of security like when we do penetration
testing when we are strictly focused on

80
00:08:39,809 --> 00:08:44,000
what up and this is the one that we know
or should know this one is really

81
00:08:44,000 --> 00:08:46,000
interesting that something like this
could be fun

82
00:08:46,000 --> 00:08:55,750
counting Darcy ok so we use Secure to
protect the confidentiality but it does

83
00:08:55,750 --> 00:09:02,120
if we don't have security like that then
it does not automatically mean that our

84
00:09:02,120 --> 00:09:06,690
cookie will be disclosed of her
insecurities HTTP what do you mean you

85
00:09:06,690 --> 00:09:08,400
might have something like this

86
00:09:08,400 --> 00:09:16,220
HSPs implement at HEB strict as per
security this is really powerful because

87
00:09:16,220 --> 00:09:27,730
it enforces HTTPS traffic from the point
of view of people are focused on

88
00:09:27,730 --> 00:09:35,510
enforcement of HTTPS Avaya redirection
service I mean HttpRequest girls on the

89
00:09:35,510 --> 00:09:39,790
server side the responses field 20
redirection to https

90
00:09:39,790 --> 00:09:44,800
but if you of course if you don't have
security like then you your cookie

91
00:09:44,800 --> 00:09:50,160
colleagues over in secure HTTP before
redirection happens this is really

92
00:09:50,160 --> 00:09:56,020
powerful because the browser knows that
only secure HTTPS requests should be

93
00:09:56,020 --> 00:10:00,980
sent even if you manually try to type
something in the URL HTTP know that

94
00:10:00,980 --> 00:10:05,800
allowed to do it and from configuration
point of view

95
00:10:05,800 --> 00:10:10,770
overhead is extremely minimal because
this is just one had during the response

96
00:10:10,770 --> 00:10:18,829
so if you have HSCs implemented and you
don't have secured flack implement that

97
00:10:18,830 --> 00:10:24,060
you are still secure ID because the
traffic HTTPS traffic is fully enforced

98
00:10:24,060 --> 00:10:31,920
so this way of reasoning is fine but
there is one problem

99
00:10:31,920 --> 00:10:37,060
STS although this is Farah very powerful
it is not supported by all major

100
00:10:37,060 --> 00:10:43,359
browsers for example Internet Explorer
10 of course the most up-to-date right

101
00:10:43,360 --> 00:10:46,640
now is Internet Explorer 11 but keep in
mind

102
00:10:46,640 --> 00:10:52,180
internal export and as an example this
is still fully supported version by

103
00:10:52,180 --> 00:11:00,489
Microsoft and used by many people just
an example of modern browser currently

104
00:11:00,490 --> 00:11:06,250
supported by vendor that does not
support a chest yes so if you think that

105
00:11:06,250 --> 00:11:14,240
HSCs will solve your problem completely
know because if you only rely on H St S

106
00:11:14,240 --> 00:11:19,780
and you don't have secure flack then it
means that in case of Internet Explorer

107
00:11:19,780 --> 00:11:28,540
10 for example the coop you will still
lead over in secure HTTP ok so the

108
00:11:28,540 --> 00:11:32,530
recommendation just to cover all
possible cases

109
00:11:32,530 --> 00:11:37,660
independently owned which browser is
used by the user is to use a chest yes

110
00:11:37,660 --> 00:11:43,880
and security lack of course H St S is
outlets a security lock is just to

111
00:11:43,880 --> 00:11:51,610
secure the QTH STS is more powerful also
in terms of well it just secures or

112
00:11:51,610 --> 00:11:56,170
protect the whole request but of course
the request includes the cookie and this

113
00:11:56,170 --> 00:12:00,689
this talk is about cookies so if I
protect the whole requests are also

114
00:12:00,690 --> 00:12:05,090
protect the cookie that that's why I'm
talking about it but sometimes people

115
00:12:05,090 --> 00:12:09,230
claim that yeah we have a just yes we
are secure we don't use Secure Flight no

116
00:12:09,230 --> 00:12:16,000
we do need because this is not supported
in whites may be surprising but this is

117
00:12:16,000 --> 00:12:20,440
the reality of course I always talked
about doing this talk about the most

118
00:12:20,440 --> 00:12:24,230
up-to-date person otherwise it wouldn't
have any sense

119
00:12:24,230 --> 00:12:32,790
ok so let's go to another problem
importance of regeneration and let's

120
00:12:32,790 --> 00:12:41,370
let's think about such case user is
logged out so potentially nothing

121
00:12:41,370 --> 00:12:46,860
nothing bad can happen right and the
attacker is somehow able to learn users

122
00:12:46,860 --> 00:12:49,280
of SessionID

123
00:12:49,280 --> 00:12:53,430
attackers always interested primarily in
this week because once that I was able

124
00:12:53,430 --> 00:12:57,760
to get it then the consequences
impersonation let's consider this case

125
00:12:57,760 --> 00:13:04,020
so what's dangerous here are the first
glance nothing because user is locked

126
00:13:04,020 --> 00:13:08,210
out so this this is such an idea
actually this is open to kitchen cooking

127
00:13:08,210 --> 00:13:13,760
but the user is not open to get it yet
so you may we may say okay I don't see

128
00:13:13,760 --> 00:13:19,600
any dangerous consequences here what
might be the problem appears in without

129
00:13:19,600 --> 00:13:26,370
the problem is that at this point user
is not indicated in a second the user

130
00:13:26,370 --> 00:13:32,310
will looking to that but I assume that
something like this happen

131
00:13:32,310 --> 00:13:37,449
user logs in but SessionID is not
regenerated in other words the new value

132
00:13:37,450 --> 00:13:42,160
of session IDs not send it back to the
user after sex assault indication I mean

133
00:13:42,160 --> 00:13:46,010
lack of social regeneration the South
called and assume that something like

134
00:13:46,010 --> 00:13:50,780
this happen so vulnerable teen life
cycle section in this example was the

135
00:13:50,780 --> 00:13:56,280
consequence the consequence is his
impersonations so at the very beginning

136
00:13:56,280 --> 00:14:02,860
at the very beginning we had something
useless

137
00:14:02,860 --> 00:14:06,630
I mean we attacker actually has
something useless because user is not

138
00:14:06,630 --> 00:14:12,370
indicated when we change for example
exercise disclosure over in secure HTTP

139
00:14:12,370 --> 00:14:17,310
of this cookie when the user is again
locked out if we change with a problem

140
00:14:17,310 --> 00:14:23,109
in the life cycle of authentication
finally we have used impersonation

141
00:14:23,110 --> 00:14:28,480
because the SessionID used by the user
before being lock locked in and after

142
00:14:28,480 --> 00:14:35,530
successful authentication is is the same
right and it happens in surprisingly in

143
00:14:35,530 --> 00:14:44,920
quant quite many places so now we should
know or remember that our cookies should

144
00:14:44,920 --> 00:14:50,520
be always regenerated after successful
authentication because we changed the

145
00:14:50,520 --> 00:14:55,689
state from Multan dictated to the
authenticated that's why we should

146
00:14:55,690 --> 00:15:03,940
regenerate everything that is sensitive
not only we've SessionID also CSRs

147
00:15:03,940 --> 00:15:09,950
talking persisted looking to come and
whatever else is sensitive from the

148
00:15:09,950 --> 00:15:22,070
perspective of our pride so it's really
good to keep in mind let's discuss

149
00:15:22,070 --> 00:15:31,840
another problem that can happen so the
the scenario right now is like this user

150
00:15:31,840 --> 00:15:36,690
logs out typical scenario and the cookie
with session IDs deleted in user's

151
00:15:36,690 --> 00:15:44,760
browser and the user the question is
used the really lucked out or not

152
00:15:44,760 --> 00:15:49,980
well it might happen that the user seems
to be locked out but actually the user

153
00:15:49,980 --> 00:15:57,450
is not locked out the fact that you see
that could SessionID is the leaders on

154
00:15:57,450 --> 00:16:03,300
the client side or in the browser does
not mean that it was invalidated on the

155
00:16:03,300 --> 00:16:10,160
server side at the time of looking out
right so when you look out so what what

156
00:16:10,160 --> 00:16:14,870
what what problems might happen no
server-side validation it doesn't matter

157
00:16:14,870 --> 00:16:15,560
that the

158
00:16:15,560 --> 00:16:20,790
on the client side what matters is
whether it was invalidated on the

159
00:16:20,790 --> 00:16:27,279
seller's site at the time of logging out
because when this is the case the user

160
00:16:27,279 --> 00:16:32,650
seems to be locked out but actually from
the seven point of view it is still

161
00:16:32,650 --> 00:16:46,209
locked in so the consequence for the
problem might be the consequence of this

162
00:16:46,210 --> 00:16:51,330
is using a person nation of course under
the assumption that the attacker was

163
00:16:51,330 --> 00:16:56,390
able somehow previously to read the
SessionID of the user when user was

164
00:16:56,390 --> 00:16:58,660
locked in a user is logged in

165
00:16:58,660 --> 00:17:02,790
we have a number of ways to extract such
an idea of the user for example viaccess

166
00:17:02,790 --> 00:17:10,159
says disclosure over in secure HTTP and
so on but what's interesting is that

167
00:17:10,160 --> 00:17:16,520
even if user is logged out we can
impersonate user because we still have

168
00:17:16,520 --> 00:17:19,879
access to deals there although the user
seems to be locked out right because

169
00:17:19,880 --> 00:17:30,280
there was no service tight integration
ok let's go to another topic HttpOnly

170
00:17:30,280 --> 00:17:40,020
flag what's the reason or logic behind
the slack the most classical attack

171
00:17:40,020 --> 00:17:46,470
scenario when XSS attack occurs is the
doctor wants to just extract the value

172
00:17:46,470 --> 00:17:53,840
of for example session cookie because it
does not have to do anything just take

173
00:17:53,840 --> 00:17:57,389
the value put to the closure of the
attacker and impersonal because of the

174
00:17:57,390 --> 00:17:58,300
game is over

175
00:17:58,300 --> 00:18:05,340
that's why HttpOnly flag was was
introduced in the past so that when

176
00:18:05,340 --> 00:18:11,689
access attackers javaScript can not read
the HttpOnly flag has risen in general

177
00:18:11,690 --> 00:18:21,600
HTTP API cannot read the HDB that's the
reason of introducing this

178
00:18:21,600 --> 00:18:27,559
what was the problem again I'm primarily
focused on the web apps because that's

179
00:18:27,559 --> 00:18:33,980
what I do for a living but as I
mentioned at the beginning I always want

180
00:18:33,980 --> 00:18:40,669
to read RFC 60652 most up-to-date just
to see if there are any problems or

181
00:18:40,669 --> 00:18:46,220
potential problems and and what's
interesting is that access permissions

182
00:18:46,220 --> 00:18:50,179
are not clearly specified in the
thoracic in mind that this RFC supported

183
00:18:50,179 --> 00:18:58,150
by all browsers what do I mean by access
permission not specified the the the the

184
00:18:58,150 --> 00:19:03,370
point about his alleged abuse only flag
or the restriction is that non HTTP API

185
00:19:03,370 --> 00:19:09,889
well the point is as as as as written
here

186
00:19:09,890 --> 00:19:15,140
JavaScript cannot read this quickly so
this is about to reading it says clearly

187
00:19:15,140 --> 00:19:22,179
that it cannot read the point is ok we
cannot read or reading restriction what

188
00:19:22,179 --> 00:19:27,230
about over writing this is the question
and this is what I mean that access

189
00:19:27,230 --> 00:19:31,400
permissions are not to be specified I
read the RFC and see something

190
00:19:31,400 --> 00:19:39,159
explicitly said about reading but what
about writing and as we can know if

191
00:19:39,159 --> 00:19:41,010
writing is not specified

192
00:19:41,010 --> 00:19:48,000
well we see immediately ambiguity and
ambiguity is really just an army of

193
00:19:48,000 --> 00:19:53,360
security we also know about this so the
point is how different browsers and the

194
00:19:53,360 --> 00:19:57,408
problem right how this process because
I'm beauty is really nice from the

195
00:19:57,409 --> 00:20:03,140
country's point of view or just from the
point of view and it turns out that in

196
00:20:03,140 --> 00:20:05,929
Safari ate the most up-to-date one

197
00:20:05,929 --> 00:20:10,049
HttpOnly flag can be overwritten to the
core of the problem

198
00:20:10,049 --> 00:20:18,110
ambiguity in the rough see what about
attack scenarios

199
00:20:18,110 --> 00:20:22,629
what's the point figure out some
interesting potentially interesting

200
00:20:22,630 --> 00:20:26,289
attack scenario what's the point of
overwriting

201
00:20:26,289 --> 00:20:32,260
only flag there is no profit there's no
point of talking about this right

202
00:20:32,260 --> 00:20:39,280
so now again assume that XSS attack
occurred we cannot read a cookie with

203
00:20:39,280 --> 00:20:44,290
dislike but we can all right so what we
can do you can override the HttpOnly

204
00:20:44,290 --> 00:20:50,950
flag then you can switch user to attack
US account it may sound like something

205
00:20:50,950 --> 00:20:55,270
strange because what for

206
00:20:55,270 --> 00:21:00,960
but one of the attacks in hours maybe
like this I switch user to my account

207
00:21:00,960 --> 00:21:08,360
let's assume that I'ma sucker in the
profile I have credit card form and it

208
00:21:08,360 --> 00:21:11,659
may happen that the user or will not
notice that the user has been switched

209
00:21:11,660 --> 00:21:16,020
and actually a credit card details of
the user is under to my account right

210
00:21:16,020 --> 00:21:24,020
the province's obvious so the user lands
in in in my account so we have some

211
00:21:24,020 --> 00:21:34,170
attack scenario that is interesting but
this is not the only one that scenario

212
00:21:34,170 --> 00:21:41,130
than other one more interesting is using
impersonation keep in mind one of the

213
00:21:41,130 --> 00:21:47,430
previous problems that I have discussed
related with no session regeneration

214
00:21:47,430 --> 00:21:54,480
when we go from normal indicated to
authenticate the state so what's gonna

215
00:21:54,480 --> 00:21:57,810
happen right now so as you can see I
connect different problems small

216
00:21:57,810 --> 00:22:02,270
problems and this is what I really love
because those most problems sometimes on

217
00:22:02,270 --> 00:22:06,240
their own are meaningless but when I
connect them I have something powerful

218
00:22:06,240 --> 00:22:14,680
so again let's assume that exercise
attacks on cars i overwrite such an idea

219
00:22:14,680 --> 00:22:22,260
of the user or actually maybe to some
arbitrary value the user some arbitrary

220
00:22:22,260 --> 00:22:27,910
value I mean at the time of writing this
value is not recognized by the server so

221
00:22:27,910 --> 00:22:32,670
user is locked out but now when the user
is looking out

222
00:22:32,670 --> 00:22:36,200
user doesn't know what what what what
has happened

223
00:22:36,200 --> 00:22:42,740
user logs in again so but i overwrote
this cookie with a value of my own

224
00:22:42,740 --> 00:22:44,800
choice right I know this value

225
00:22:44,800 --> 00:22:49,350
after a successful authentication this
value will not be changed because there

226
00:22:49,350 --> 00:22:56,399
was no SessionID regeneration of the
user is finally I am finally has a very

227
00:22:56,400 --> 00:23:01,100
very happy because I know users
SessionID so connecting the dots is

228
00:23:01,100 --> 00:23:08,290
beautiful and the reason why I do what I
to actually so you can see that we we

229
00:23:08,290 --> 00:23:13,320
started from from RFC and ambiguity and
and we figure out something interesting

230
00:23:13,320 --> 00:23:20,169
I believe not only interesting for me
also for you so let's discuss another

231
00:23:20,170 --> 00:23:29,170
problem we've got also something like
the main attribute when we specify could

232
00:23:29,170 --> 00:23:31,150
keep you take a look

233
00:23:31,150 --> 00:23:37,120
well from the perspective of response
had the right we have we we have set

234
00:23:37,120 --> 00:23:43,010
kooky description might have screwed
HttpOnly flag but also the main my be my

235
00:23:43,010 --> 00:23:48,520
be specified is not obligatory to
specify the domain but it may be

236
00:23:48,520 --> 00:23:57,420
specified and if you go again to this
RFC you can see something like this that

237
00:23:57,420 --> 00:24:03,220
when this domain attribute is not
specified then you will be sent only to

238
00:24:03,220 --> 00:24:13,290
domain from which it originated so other
on the other hand and this is very

239
00:24:13,290 --> 00:24:17,430
popular solution when you see that the
the main attribute for example is

240
00:24:17,430 --> 00:24:25,210
abc.com then this cookie will be sent to
abc.com and all subdomains abc.com but

241
00:24:25,210 --> 00:24:30,160
provided that the main attribute is
specified if this is not specified it

242
00:24:30,160 --> 00:24:35,840
will only be sent to the domain from
which it originated the logic behind

243
00:24:35,840 --> 00:24:41,010
this is you don't want your kisses
difficult to be disclosed to other

244
00:24:41,010 --> 00:24:47,810
sub-committees right this is logical
light was introduced to the heresy but

245
00:24:47,810 --> 00:24:54,100
the question is as always are there any
problems with this the answer is yes

246
00:24:54,100 --> 00:24:55,020
there are

247
00:24:55,020 --> 00:25:01,060
in Internet Explorer 11 again the most
up-to-date well actually Internet

248
00:25:01,060 --> 00:25:08,870
Explorer 11 just ignores it i mean again
if this is not specified them use only

249
00:25:08,870 --> 00:25:14,020
should send this cookie as a browser to
the domain from which it originated but

250
00:25:14,020 --> 00:25:21,389
Internet Explorer 11 will stand it also
to author so it's completely not taken

251
00:25:21,390 --> 00:25:28,450
into account by Internet Explorer so
even if you we are skilled developers

252
00:25:28,450 --> 00:25:36,140
that and we have read very carefully RFC
and we feel that we know how to do

253
00:25:36,140 --> 00:25:42,570
securely well Internet Explorer 11 will
not help you in this case so keep in

254
00:25:42,570 --> 00:25:49,179
mind what about attack scenarios as
always we want to discuss tomorrow

255
00:25:49,180 --> 00:25:55,380
action arose because that's that's
always the most interesting part so

256
00:25:55,380 --> 00:25:59,390
let's let's have a case like this

257
00:25:59,390 --> 00:26:06,890
let's let's say that example.com wall at
this is very sensitive person City app

258
00:26:06,890 --> 00:26:11,730
is out there ok keep in mind that the
main itself is example.com this is

259
00:26:11,730 --> 00:26:16,690
sensitive and we can assume the
sensitive it was very formally analyzed

260
00:26:16,690 --> 00:26:22,310
from security point of view on the other
hand we have something insensitive

261
00:26:22,310 --> 00:26:29,429
happens in many companies the subdomain
like pure accident example is incensed

262
00:26:29,430 --> 00:26:36,320
the this is meaningless so probable
assumption is that you can find

263
00:26:36,320 --> 00:26:39,350
something interesting out out there
right from probability point of view is

264
00:26:39,350 --> 00:26:44,580
something is not sensitive than very
probably it was not it it hasn't been

265
00:26:44,580 --> 00:26:49,290
fully analyzed from security point of
view that's why as a backhander I always

266
00:26:49,290 --> 00:26:55,100
interested in something like this
because I know that when I find access

267
00:26:55,100 --> 00:27:02,620
on on this then if there is exercised on
x example.com I can set an arbitrary

268
00:27:02,620 --> 00:27:08,060
kooky to the main domain that will be
signed

269
00:27:08,060 --> 00:27:15,220
to the main domain in all subdomains
right so if I have access on on this one

270
00:27:15,220 --> 00:27:21,590
I can I can set a cookie from that will
be sent this domain and all other

271
00:27:21,590 --> 00:27:31,260
supplements in general this is how it
works but coming back to 222222 our case

272
00:27:31,260 --> 00:27:37,990
your developer was very smart very
educated and read the RFC and in this

273
00:27:37,990 --> 00:27:44,910
case example just example.com wall at
the developer did not specify this

274
00:27:44,910 --> 00:27:52,080
domain attribute so now the developer is
almost sure that this year for

275
00:27:52,080 --> 00:27:59,530
example.com cannot be accessed but sub
by subdomains right the reason why why

276
00:27:59,530 --> 00:28:05,800
the developer didn't use the main
attribute ok but the problem is that in

277
00:28:05,800 --> 00:28:12,659
case of Internet Explorer 11 as I
mentioned this this is completely not

278
00:28:12,660 --> 00:28:17,480
taken into account i mean this how how
to cook you should be process when the

279
00:28:17,480 --> 00:28:19,050
main attribute is not specified

280
00:28:19,050 --> 00:28:25,530
so in this case if you have access on x
example.com it will be able to read a

281
00:28:25,530 --> 00:28:29,570
cookie that should be spent should be
limited only to example.com because

282
00:28:29,570 --> 00:28:34,100
Internet Explorer 11 which will allow it
to be sent to this problem because it

283
00:28:34,100 --> 00:28:41,209
does not support this part of the heresy
ok so just to conclude this was

284
00:28:41,210 --> 00:28:47,640
sensitive and normally if it would would
work fine then access on subdomain will

285
00:28:47,640 --> 00:28:51,340
not be able to get his cookie because
there was no the main attribute

286
00:28:51,340 --> 00:28:56,520
specified but because this is not
supported or does not take into account

287
00:28:56,520 --> 00:29:01,760
but Internet Explorer it will be sent to
other insensitive comments and here is

288
00:29:01,760 --> 00:29:13,180
very realistic attack scenario another
attack scenario is for example to

289
00:29:13,180 --> 00:29:17,250
externally managed the mind just to
continue a little bit longer this

290
00:29:17,250 --> 00:29:19,680
example

291
00:29:19,680 --> 00:29:25,660
happened at example.com right now is the
hosting company and you could buy

292
00:29:25,660 --> 00:29:29,550
subdomain so we we've got shot from the
right now

293
00:29:29,550 --> 00:29:36,629
exotic example com Israel shirt we got
your hosting so you can go as a client

294
00:29:36,630 --> 00:29:42,680
and by X for example example com then
you don't need any kind of exercise you

295
00:29:42,680 --> 00:29:48,740
just control X example calm and you have
direct access to example com slash

296
00:29:48,740 --> 00:29:52,970
clients for example and those guys who
who who

297
00:29:52,970 --> 00:29:58,410
develope example.com / clients they they
think ok we don't have the main

298
00:29:58,410 --> 00:30:03,720
attributes so any other subdomain cannot
get get a cookie that allows us to get

299
00:30:03,720 --> 00:30:08,120
access to our own management platform
for our clients it is wrong because

300
00:30:08,120 --> 00:30:17,879
again in case of Internet Explorer 11 it
will just give we will be able to do it

301
00:30:17,880 --> 00:30:27,300
so again in this example we don't need
any kind of exercise ok so let's go to

302
00:30:27,300 --> 00:30:29,600
another problem

303
00:30:29,600 --> 00:30:42,610
tampering it turns out that in Safari
eight you can actually separate supports

304
00:30:42,610 --> 00:30:48,310
a comma-separated list of cookies for
comma-separated you've got in a header

305
00:30:48,310 --> 00:30:54,620
so you've got such good name and value
but you cannot specify comma and then

306
00:30:54,620 --> 00:31:02,050
another name and then under value of the
cookies you can specify multiple you see

307
00:31:02,050 --> 00:31:08,310
right there around records obsoleted IRC
2109

308
00:31:08,310 --> 00:31:13,090
it is absolutely because the most
up-to-date one is as I mentioned

309
00:31:13,090 --> 00:31:23,399
previously 62 65 64 65 but the fact that
our C like 2109 is obsoleted it does not

310
00:31:23,400 --> 00:31:30,510
automatically mean that obsoleted
features of absolute RFC are are not

311
00:31:30,510 --> 00:31:32,550
supported in the most updated version

312
00:31:32,550 --> 00:31:37,389
we know if this is reality of saluted
does not mean that it will not be

313
00:31:37,390 --> 00:31:45,070
supported by up to 12 cents so that
that's why I always love to go one step

314
00:31:45,070 --> 00:31:51,399
back in the history and see if something
risky was really risky from the previous

315
00:31:51,400 --> 00:32:01,020
I receive US was deleted by poplife
endorsing when a problem was was was

316
00:32:01,020 --> 00:32:07,050
detected i mean you can see a risky part
in RFC 2119 delete this part in the most

317
00:32:07,050 --> 00:32:14,129
up-to-date RFC 6265 and this is actually
the case here that those guys noticed

318
00:32:14,130 --> 00:32:17,940
that well something like this is risky
that they deleted it from from the most

319
00:32:17,940 --> 00:32:25,870
popular version of our C but so far you
still supports this is risky future and

320
00:32:25,870 --> 00:32:34,840
it looks like this this is part of the
URL you've got something like this in

321
00:32:34,840 --> 00:32:40,260
the URL you've got language language
equals the German for example then comma

322
00:32:40,260 --> 00:32:44,810
percent twenty so your space craft and
then your

323
00:32:44,810 --> 00:32:50,770
of your own choice right for example
Pete PHP Eid but it was ABC of course

324
00:32:50,770 --> 00:32:56,210
distinction is that this this this is
reflected in such weather keep in mind

325
00:32:56,210 --> 00:33:01,460
right because we we are talking about 60
response so what's the consequence the

326
00:33:01,460 --> 00:33:06,340
attacker vile this this

327
00:33:06,340 --> 00:33:19,370
well this obsoleted this command support
list of their from absolutely dire

328
00:33:19,370 --> 00:33:27,590
situation is supporting Safari so if we
have some of course the the the

329
00:33:27,590 --> 00:33:31,470
prerequisite is that there is no
consequence further talking right

330
00:33:31,470 --> 00:33:37,029
otherwise we cannot launch this attack
cross origin but in general we look we

331
00:33:37,029 --> 00:33:41,679
asked the victim to click a link like
this of course we don't have the domain

332
00:33:41,679 --> 00:33:45,690
here but for the purpose of
understanding is not needed the victim

333
00:33:45,690 --> 00:33:53,070
just click the link and we are able to
override value of arbitrary cookie jar

334
00:33:53,070 --> 00:33:58,460
of the user and this is very very
powerful we already see that we can do

335
00:33:58,460 --> 00:33:59,490
remote

336
00:33:59,490 --> 00:34:10,310
tampering what about an attack scenarios
switching a user to another account we

337
00:34:10,310 --> 00:34:16,409
have already discussed it we've got also
user impersonation when we change it

338
00:34:16,409 --> 00:34:21,790
with yet another problem like lack of
session regeneration also discussed a

339
00:34:21,790 --> 00:34:30,839
previously and we can remotely launch
excesses sometimes we do need something

340
00:34:30,839 --> 00:34:41,119
like this because well exercise vehicle
p with the only attack vector like local

341
00:34:41,119 --> 00:34:45,109
exploitation this is not powerful right
because it assumes that we have access

342
00:34:45,109 --> 00:34:51,009
to the cookie jar of the users of the
risk is much much lower but right now if

343
00:34:51,010 --> 00:34:57,230
we used this technique we can remotely
set arbitrary cookie and now the

344
00:34:57,230 --> 00:35:06,780
limitations launch remotely access back
I will tell you more about remote access

345
00:35:06,780 --> 00:35:10,400
for a quickie exploitation because this
is one of the most underestimated

346
00:35:10,400 --> 00:35:15,990
problems in general that I see from from
from my experience to the next the next

347
00:35:15,990 --> 00:35:24,770
light will be dedicated to this problem

348
00:35:24,770 --> 00:35:31,880
but before we go to death this is just
an example that shows this is what what

349
00:35:31,880 --> 00:35:37,140
I lost I see some students from my house
from from my training and the most

350
00:35:37,140 --> 00:35:42,549
interesting point from their point of
view the feedback and it has always said

351
00:35:42,550 --> 00:35:45,980
different cause is that they lost to
change different problems and see how

352
00:35:45,980 --> 00:35:50,570
browser specific bugs can be used to
launch much much more powerful attacks

353
00:35:50,570 --> 00:36:01,250
and this is just an example of course
more of them in my training but this is

354
00:36:01,250 --> 00:36:05,290
really powerful a cuban in mind because
sometimes you you can just have

355
00:36:05,290 --> 00:36:09,090
something much more powerful if you
participate in the programs you can

356
00:36:09,090 --> 00:36:13,830
definitely get more money for this if
you want to impress your clients and

357
00:36:13,830 --> 00:36:19,130
make the CVSS score higher than this is
this is the wrong that this is the right

358
00:36:19,130 --> 00:36:21,910
direction right so keep in mind about
this

359
00:36:21,910 --> 00:36:29,100
dependent on what you do so now I
underestimated exercise very very often

360
00:36:29,100 --> 00:36:35,819
this is associated with local
exploitation but this is absolutely not

361
00:36:35,820 --> 00:36:42,210
true because I will present to you free
remote attacks you know just to show

362
00:36:42,210 --> 00:36:48,320
that this is not true and this is what I
would like you to keep in mind so now

363
00:36:48,320 --> 00:36:53,190
assume similar example by the different
we've got sensitive domain why

364
00:36:53,190 --> 00:36:59,930
example.com and insensitive acts
example.com what is what it's come on it

365
00:36:59,930 --> 00:37:04,649
examples gun they are both subdomains of
example.com and now you are doing

366
00:37:04,650 --> 00:37:10,960
testing and you have found exercise
faculty on sensitive domain and you are

367
00:37:10,960 --> 00:37:16,510
very happy and this is why we are very
happy but the question is how to launch

368
00:37:16,510 --> 00:37:24,840
this attack remotely this is very often
the case and very often if if managers

369
00:37:24,840 --> 00:37:33,560
see that exercise is possible in order I
can see that the risk is low and very

370
00:37:33,560 --> 00:37:37,170
often it is just like that forever but
would you can do

371
00:37:37,170 --> 00:37:44,240
do is again try to dig into another
subdomain less sensitive one you find

372
00:37:44,240 --> 00:37:50,950
exercise on on this subdomain like
example com you can set because this is

373
00:37:50,950 --> 00:37:54,490
how could his works this is different
than same origin policy from JavaScript

374
00:37:54,490 --> 00:38:01,020
to view right margin policy if you have
access is is like this I can work here

375
00:38:01,020 --> 00:38:09,809
within the context of domain X example
calm but say the protocol age East HTTPS

376
00:38:09,809 --> 00:38:15,380
and port 443 the same origin policy from
access point of view but from the point

377
00:38:15,380 --> 00:38:21,500
of view of cookie processing exercise on
this domain X example.com can set a

378
00:38:21,500 --> 00:38:28,510
cookie that will be sent to this core
domain and all other supplements can you

379
00:38:28,510 --> 00:38:33,630
see right now we are on an ex
example.com we set a cookie that will be

380
00:38:33,630 --> 00:38:40,930
sent for the domain example.com and all
subdomains including sensitive why

381
00:38:40,930 --> 00:38:46,770
example.com so if we find some exercise
on something insensitive we can launch

382
00:38:46,770 --> 00:38:54,799
of this exercise remotely access on
sensitive subdomain quite nice

383
00:38:54,799 --> 00:39:00,220
combination of pink sand and it is
really also helpfully in practice so

384
00:39:00,220 --> 00:39:04,160
this is one way of doing it completely
remotely

385
00:39:04,160 --> 00:39:10,328
the focus only on your target hear your
target is like this but there may be

386
00:39:10,329 --> 00:39:17,710
many interesting insensitive things on
other subdomains do not attack scenario

387
00:39:17,710 --> 00:39:23,890
let's assume that in this example the
triggering pointless I was not exercise

388
00:39:23,890 --> 00:39:29,490
but responsive pleading attack this of
response plating attack use special

389
00:39:29,490 --> 00:39:34,910
characters like carriage return newline
to split the headers and escape from

390
00:39:34,910 --> 00:39:39,808
headers to the body and once you do
response splitting the consequence of

391
00:39:39,809 --> 00:39:45,190
response plating might be exercised and
the stories exactly the same but the

392
00:39:45,190 --> 00:39:49,970
triggering factor might be responsible
eating so virus on speeding along

393
00:39:49,970 --> 00:39:53,830
assess and while this exercise you
launch exercise bike will be fully

394
00:39:53,830 --> 00:39:54,720
remotely

395
00:39:54,720 --> 00:40:00,200
way of reasoning is is is just the same
because responsibility can be used to

396
00:40:00,200 --> 00:40:09,240
launch access and then use this point
and yet another one from the previous

397
00:40:09,240 --> 00:40:19,720
light I have presented how you can use
cookie tampering in in the 48 just to

398
00:40:19,720 --> 00:40:25,569
fully remotely set an arbitrary cookie
in the jar of the user so in this case

399
00:40:25,570 --> 00:40:31,849
you don't need any kind of insensitive
subdomain just do it and sent the link

400
00:40:31,849 --> 00:40:37,160
for example and and this is it and
you've got fully working remote

401
00:40:37,160 --> 00:40:44,710
solutions so so now we see that we
really should take care of this and and

402
00:40:44,710 --> 00:40:49,609
what I love is that we really connect
different pieces and have something

403
00:40:49,609 --> 00:40:55,810
something meaningful at the end so I
would like to emphasize that even if you

404
00:40:55,810 --> 00:41:00,509
see something small and we cannot
exploited directly we can connect it

405
00:41:00,510 --> 00:41:08,839
different cases in different problems to
have something more powerful at the end

406
00:41:08,839 --> 00:41:14,849
ok so let me make some conclusions

407
00:41:14,849 --> 00:41:23,300
everything that I tried to teach you
during this dark ass is red in the white

408
00:41:23,300 --> 00:41:30,410
paper so feel free to read it step by
step if something was not clear if it is

409
00:41:30,410 --> 00:41:36,950
still not clear so just an email so what
we should do

410
00:41:36,950 --> 00:41:41,490
dependency whether we are researchers
engineers consultants whatever just

411
00:41:41,490 --> 00:41:47,790
security people educate development
things this is very important and I do

412
00:41:47,790 --> 00:41:51,609
believe that this is important I often
see that security people blame

413
00:41:51,609 --> 00:41:56,710
developers know we should blame
ourselves this is my responsibility to

414
00:41:56,710 --> 00:42:01,250
help people to understand how to do
something securely

415
00:42:01,250 --> 00:42:07,640
the developer has many many other duties
and skills that I don't have this is my

416
00:42:07,640 --> 00:42:12,500
goal to teach people how to do something
securely and we should do it this is our

417
00:42:12,500 --> 00:42:17,170
job I'm not saying this because I love
doing training cancelled for this is

418
00:42:17,170 --> 00:42:23,800
just how it should work this is part of
the whole process another point so if we

419
00:42:23,800 --> 00:42:30,190
do the first one idk development teams
then we will see finally a less problems

420
00:42:30,190 --> 00:42:36,070
on the web application level and what
about the browser level well we we need

421
00:42:36,070 --> 00:42:41,780
to cooperate with vendors and browser
vendors should cooperate with us because

422
00:42:41,780 --> 00:42:45,390
from sometimes from a practical point of
view

423
00:42:45,390 --> 00:42:53,410
time of response is is very long and
those issues are not taking a two count

424
00:42:53,410 --> 00:42:55,160
very seriously and so on so forth

425
00:42:55,160 --> 00:42:59,359
reason why they are not out sometimes
taken seriously by vendors is that this

426
00:42:59,360 --> 00:43:05,410
what I got in response when I was
submitting different box is that on

427
00:43:05,410 --> 00:43:10,600
their own in many cases they don't allow
us to do exploitation right you've got

428
00:43:10,600 --> 00:43:16,240
something like remotely executable
classical Irish our CEO on lets a safari

429
00:43:16,240 --> 00:43:20,479
and definitely the vendor will be
interested when you have that kind of

430
00:43:20,480 --> 00:43:25,020
small vulnerability and the developer
quite often will tell you ok but it

431
00:43:25,020 --> 00:43:29,600
requires additional vulnerability so
this is not actually the vulnerability

432
00:43:29,600 --> 00:43:33,880
in in browser in my browser access we
are not going to fix it

433
00:43:33,880 --> 00:43:38,500
paid their point of view but from my
point of view as a bug hunter i connect

434
00:43:38,500 --> 00:43:42,830
small dots and have something very
powerful so I partially understand a way

435
00:43:42,830 --> 00:43:47,470
of reasoning because it requires other
vulnerabilities in there so they blame

436
00:43:47,470 --> 00:43:51,660
the developers but I don't care I just
have to connect different problems to

437
00:43:51,660 --> 00:44:00,250
have something very powerful and the end
and finally the foundation for RFC 6265

438
00:44:00,250 --> 00:44:07,310
as I mentioned so we all need to think
about some improvement discuss this

439
00:44:07,310 --> 00:44:09,750
document this custom

440
00:44:09,750 --> 00:44:14,940
problems improvements and so on so forth
because well we all rely on this

441
00:44:14,940 --> 00:44:22,720
document so this is in our interests
right so basically this is it thank you

442
00:44:22,720 --> 00:44:27,240
very much for attention I know everyone
is hungry but now it's time to ask her

443
00:44:27,240 --> 00:44:34,410
questions if you want I will be
available around so ask me about

444
00:44:34,410 --> 00:44:40,520
anything any questions right now before
the questions from the floor to

445
00:44:40,520 --> 00:44:46,390
questions for when they reached a stage
during lunch maybe yeah alright well

446
00:44:46,390 --> 00:44:50,319
more than one hour for questions during
the lunch so I'm happy to answer

447
00:44:50,320 --> 00:44:54,060
questions thank you very much for
attention and see you later

448
00:44:54,060 --> 00:44:55,340
thank you very much

