1
00:00:04,149 --> 00:00:06,920
ok face

2
00:00:06,920 --> 00:00:13,920
space

3
00:00:26,350 --> 00:00:29,880
now we're ready to rock n roll we having
this presentation about how you were

4
00:00:29,880 --> 00:00:32,260
sick security by Margot and our demand

5
00:00:32,260 --> 00:00:35,920
my goal was a founder of possible
security he worked

6
00:00:35,920 --> 00:00:39,410
for years as a senior researcher at idea
misers

7
00:00:39,410 --> 00:00:43,950
x-force and as a principal security
architect at McAfee da gym on works as a

8
00:00:43,950 --> 00:00:45,440
senior availability researchers

9
00:00:45,440 --> 00:00:48,930
asthma security and he presented the
black cat x2 hackers

10
00:00:48,930 --> 00:00:53,460
and Vicki to record some welcome okay

11
00:00:53,460 --> 00:00:56,930
on sorry my name's knocked out in the
first has immense we're here to talk

12
00:00:56,930 --> 00:00:57,390
about

13
00:00:57,390 --> 00:01:01,080
II with six security we decided to

14
00:01:01,080 --> 00:01:05,000
to look at the IRS 6 colonel because

15
00:01:05,000 --> 00:01:09,300
we'd those lot mitigations coming in and
we wanted to see

16
00:01:09,300 --> 00:01:12,780
like what what strategies that employ
and how they compared to

17
00:01:12,780 --> 00:01:16,650
other operating systems and stuff that
we've hooked up before so on

18
00:01:16,650 --> 00:01:19,970
this is this presentation is basically
the result of that town

19
00:01:19,970 --> 00:01:23,440
that research and down we're going to

20
00:01:23,440 --> 00:01:26,720
we're going to basically the run-through
like

21
00:01:26,720 --> 00:01:30,620
the medications that I was six is
introduced

22
00:01:30,620 --> 00:01:35,670
and also Tom we're going to specifically
focus on

23
00:01:35,670 --> 00:01:39,140
the security can improvements regarding

24
00:01:39,140 --> 00:01:42,860
mitigation kernel exploit switcher
critical part iv:

25
00:01:42,860 --> 00:01:46,270
most jailbreaks um we noticed that

26
00:01:46,270 --> 00:01:50,260
a lot of the strategies that that they
employed

27
00:01:50,260 --> 00:01:54,610
were from with targeting things that
have been used in jail break before

28
00:01:54,610 --> 00:01:56,480
spoken publicly about before

29
00:01:56,480 --> 00:02:00,720
so we wanted to provide an overview of
the newcastle-based medications that

30
00:02:00,720 --> 00:02:01,230
they're a

31
00:02:01,230 --> 00:02:04,440
I'm and also will discuss

32
00:02:04,440 --> 00:02:09,229
a few techniques we came up with for
taking out the eye with six Connell

33
00:02:09,229 --> 00:02:12,980
and a and at the very end we will we
will show a demo

34
00:02:12,980 --> 00:02:16,500
%uh installing Cydia naira 6

35
00:02:16,500 --> 00:02:20,069
I device and running essentially

36
00:02:20,069 --> 00:02:25,670
jailbroken I'm with so we've got to two
major parts have

37
00:02:25,670 --> 00:02:28,950
stalk the first part we're gonna talk
about defense

38
00:02:28,950 --> 00:02:32,760
where specifically we're going to
mention the ponding strategies

39
00:02:32,760 --> 00:02:36,760
to that have been introduced with six
we're going to mention

40
00:02:36,760 --> 00:02:40,799
stock cookies various information
leaking medications that have

41
00:02:40,799 --> 00:02:45,200
been implemented um the address space
layout randomization that has been added

42
00:02:45,200 --> 00:02:45,670
to the

43
00:02:45,670 --> 00:02:48,700
to the kernel um and also some user
account

44
00:02:48,700 --> 00:02:52,999
use a kind with respect hardening um and
then popped to we're gonna talk about

45
00:02:52,999 --> 00:02:53,620
some

46
00:02:53,620 --> 00:02:57,760
offensive techniques I including out
some information leaking strategies

47
00:02:57,760 --> 00:03:01,200
to bypass us summer the as a lot

48
00:03:01,200 --> 00:03:04,959
medications put in place and I was six
and we'll also talk about a few

49
00:03:04,959 --> 00:03:05,659
primitive

50
00:03:05,659 --> 00:03:09,239
that we developed when developing
exploits for

51
00:03:09,239 --> 00:03:12,450
the eye with six colonel that you can
mix and match and

52
00:03:12,450 --> 00:03:16,319
they should be useful for for building

53
00:03:16,319 --> 00:03:21,189
exploits work against with six um

54
00:03:21,189 --> 00:03:24,430
so I'm gonna possibly today to start
talking about the young

55
00:03:24,430 --> 00:03:28,010
the economy alright

56
00:03:28,010 --> 00:03:32,700
so we're gonna begin to talk to me about
the randomization out wear them because

57
00:03:32,700 --> 00:03:33,790
this is what

58
00:03:33,790 --> 00:03:36,950
all their the medications you use

59
00:03:36,950 --> 00:03:40,409
for generating stack cookies he Pookies

60
00:03:40,409 --> 00:03:43,980
the comment a Salar and obfuscating

61
00:03:43,980 --> 00:03:47,700
pointers which previously could be used
to learn

62
00:03:47,700 --> 00:03:51,519
locations and internal memory for
objects

63
00:03:51,519 --> 00:03:54,650
sets it is are algorithm gets

64
00:03:54,650 --> 00:03:57,889
a I see generated by the bootloader

65
00:03:57,889 --> 00:04:01,450
I boots and it combines the sea with the
current time

66
00:04:01,450 --> 00:04:05,989
to get the random value so as can seen
this side

67
00:04:05,989 --> 00:04:10,349
you have this function which takes these
parameters

68
00:04:10,349 --> 00:04:13,719
and a shuffles them around

69
00:04:13,719 --> 00:04:20,160
in archery is a 32-bit random value and
and the icy itself is

70
00:04:20,160 --> 00:04:25,630
its base on something trip times so

71
00:04:25,630 --> 00:04:29,970
said he pardoning part is is really what
tries to address

72
00:04:29,970 --> 00:04:34,030
pass a tax regarding as Sony allocations

73
00:04:34,030 --> 00:04:37,790
and attacks on Fri lists and they're
basically three medications put into

74
00:04:37,790 --> 00:04:38,510
place

75
00:04:38,510 --> 00:04:41,570
we have mediations involving

76
00:04:41,570 --> 00:04:45,180
Poyner validation black poisoning and

77
00:04:45,180 --> 00:04:48,510
free listing integrity verification and
is is

78
00:04:48,510 --> 00:04:52,730
as mentioned specific to do so now
skaters that concerns all the function

79
00:04:52,730 --> 00:04:53,640
like CELAC

80
00:04:53,640 --> 00:04:57,490
chaotic mock mock exam I am out
considers era

81
00:04:57,490 --> 00:05:00,790
m4v going to this I'll

82
00:05:00,790 --> 00:05:04,900
is when a recap a bit on the old
exploitation techniques or

83
00:05:04,900 --> 00:05:09,860
recap early little bit on on the S on
allocator so the so now cater

84
00:05:09,860 --> 00:05:12,990
allocates memory from the zones which

85
00:05:12,990 --> 00:05:16,290
are fixed size which hold fixed sized
chunks

86
00:05:16,290 --> 00:05:20,790
we have liked alec eight bytes are calyx
16 bytes or

87
00:05:20,790 --> 00:05:25,730
3,207 68 bytes and they're so so
specialized sounds

88
00:05:25,730 --> 00:05:29,250
for specific tasks so we have like the
few maps honored

89
00:05:29,250 --> 00:05:32,490
the map copies on and

90
00:05:32,490 --> 00:05:35,540
et cetera et cetera and when the al
Qaeda memory

91
00:05:35,540 --> 00:05:37,569
I'm these

92
00:05:37,569 --> 00:05:40,749
the zones allocate pages on demand so
there

93
00:05:40,749 --> 00:05:45,089
they're not they're not contiguous in
that sense

94
00:05:45,089 --> 00:05:49,990
you can have a callout eight by sound
located next to a kellock 16 bytes on

95
00:05:49,990 --> 00:05:50,520
its era

96
00:05:50,520 --> 00:05:53,770
am so yeah like I said I'm

97
00:05:53,770 --> 00:05:56,999
you allocate blocks I'm and pages

98
00:05:56,999 --> 00:06:00,629
on-demand these pages are divided into

99
00:06:00,629 --> 00:06:05,729
on same size blocks and when the al
Qaeda page

100
00:06:05,729 --> 00:06:09,379
in order to use as zone %um you

101
00:06:09,379 --> 00:06:12,439
divided sparking put all the blocks in a
free lists

102
00:06:12,439 --> 00:06:16,939
and this is a single link lists so the
first pointer in each chunk

103
00:06:16,939 --> 00:06:20,020
was a pointer to the next century et
cetera et cetera

104
00:06:20,020 --> 00:06:23,689
I'm and when ya kid something you simply
dis

105
00:06:23,689 --> 00:06:26,969
take the first element on the list and
serve it back to the

106
00:06:26,969 --> 00:06:30,249
the zero-order component to it request
that the allocation

107
00:06:30,249 --> 00:06:34,249
so you know this Assam an example though

108
00:06:34,249 --> 00:06:37,919
the calyx its own we had a free list

109
00:06:37,919 --> 00:06:43,870
and some some chance for use in some not
so

110
00:06:43,870 --> 00:06:47,999
said the previous expectation techniques
into space

111
00:06:47,999 --> 00:06:51,800
involved overwriting these planners
sisters singling

112
00:06:51,800 --> 00:06:55,729
its others really know checking you
could just alright

113
00:06:55,729 --> 00:06:59,469
yet pointer and and have it return any
type any

114
00:06:59,469 --> 00:07:02,860
any memory really and the way this was X

115
00:07:02,860 --> 00:07:06,589
leverage an expert was that you would
typically have it planned to

116
00:07:06,589 --> 00:07:09,589
the syscall table then use that to
override a

117
00:07:09,589 --> 00:07:14,149
and as Cisco entry and subsequently been
working that's his call he would be able

118
00:07:14,149 --> 00:07:14,680
to

119
00:07:14,680 --> 00:07:18,029
to it divert execution to an arbitrary
location

120
00:07:18,029 --> 00:07:22,959
am so so when I was 6 the attempt to
address this

121
00:07:22,959 --> 00:07:26,809
in multiple ways one is to prevent

122
00:07:26,809 --> 00:07:31,169
one go one of the girls is to prevent
invalid pointers from being entered into

123
00:07:31,169 --> 00:07:31,529
the

124
00:07:31,529 --> 00:07:36,439
as own free lists and this is done by
performing additional checks

125
00:07:36,439 --> 00:07:39,919
onto planners before dare before on

126
00:07:39,919 --> 00:07:44,469
their entry into the list itself so

127
00:07:44,469 --> 00:07:47,860
in this case any any pointer date is

128
00:07:47,860 --> 00:07:51,219
is it's put in is verified

129
00:07:51,219 --> 00:07:54,360
the in kernel memory so works

130
00:07:54,360 --> 00:07:58,149
8000 area up until this upper bound

131
00:07:58,149 --> 00:08:01,379
if if the allow Frain

132
00:08:01,379 --> 00:08:02,180
and

133
00:08:02,180 --> 00:08:05,550
variable for the specifics on is set I
know

134
00:08:05,550 --> 00:08:08,630
additional verification is performed

135
00:08:08,630 --> 00:08:11,639
but if it is said it also

136
00:08:11,639 --> 00:08:14,669
know if it's not set it's also checked
if it's within

137
00:08:14,669 --> 00:08:17,780
the zone that defined by for that

138
00:08:17,780 --> 00:08:22,360
specifics on we also have

139
00:08:22,360 --> 00:08:26,160
block poisoning and this is a mitigation
introduced to

140
00:08:26,160 --> 00:08:31,590
prevent use after free style attacks I
so whenever something is fried

141
00:08:31,590 --> 00:08:35,070
the strategy here is to

142
00:08:35,070 --> 00:08:39,740
filter blocks with Sentinel values so in
this case it's that beef

143
00:08:39,740 --> 00:08:42,919
an orchard friend to you from from

144
00:08:42,919 --> 00:08:47,240
reusing values like an iOS app for free
or

145
00:08:47,240 --> 00:08:50,839
tainting these values yeah

146
00:08:50,839 --> 00:08:55,970
so in this case is only performed on
select the blocks

147
00:08:55,970 --> 00:08:59,209
this is because a performance so if the
block

148
00:08:59,209 --> 00:09:02,420
sizes smaller than the cache line size
data processor

149
00:09:02,420 --> 00:09:05,620
it will automatically fill the trunk
with

150
00:09:05,620 --> 00:09:08,959
that beef if its larger it won't

151
00:09:08,959 --> 00:09:13,730
use this mitigation unless you have
specific parameters set

152
00:09:13,730 --> 00:09:17,270
the third one is

153
00:09:17,270 --> 00:09:20,630
is more on on preventing exploitation
altogether

154
00:09:20,630 --> 00:09:23,829
by trying to address I am

155
00:09:23,829 --> 00:09:27,570
the overriding also love the the free
list planners II

156
00:09:27,570 --> 00:09:30,820
so when they do when you boot up the
kernel I'd

157
00:09:30,820 --> 00:09:34,820
to random values are generated by a
function called Sun bootstrap

158
00:09:34,820 --> 00:09:38,089
one is a thirty two-bit cookie for

159
00:09:38,089 --> 00:09:42,040
poison box and the other one is a 3-1
bit cookie for non poison box

160
00:09:42,040 --> 00:09:45,829
and these are use as a validation
cookies above the next players

161
00:09:45,829 --> 00:09:46,700
themselves

162
00:09:46,700 --> 00:09:51,260
so when when so the Felix pointers

163
00:09:51,260 --> 00:09:54,720
at the top of Reebok is now validated

164
00:09:54,720 --> 00:09:57,880
against these cookies so this is the I
he Pookie version

165
00:09:57,880 --> 00:10:02,300
introducing i6 actually the verification

166
00:10:02,300 --> 00:10:06,390
in order to verify they do not do not
change the

167
00:10:06,390 --> 00:10:09,430
the top winner but they store in
additional planner at the end it a

168
00:10:09,430 --> 00:10:11,300
chance that is the encoded version

169
00:10:11,300 --> 00:10:14,790
and so in this case and

170
00:10:14,790 --> 00:10:17,900
the 9 poison cookie is used if

171
00:10:17,900 --> 00:10:21,560
if you're not using that beef I'm in rat
poisoning the chance

172
00:10:21,560 --> 00:10:26,680
and the poison cookies used if if the
child is small enough to be fed into the

173
00:10:26,680 --> 00:10:31,510
cash I'm size and processor so it is a
sin

174
00:10:31,510 --> 00:10:35,060
and to validate this they

175
00:10:35,060 --> 00:10:38,600
they ensure that they try both cookies
so if the

176
00:10:38,600 --> 00:10:41,820
if the poison for two matches they also
check

177
00:10:41,820 --> 00:10:45,620
Nov all these valleys are dead beef if
any of those values and that they

178
00:10:45,620 --> 00:10:45,990
believe

179
00:10:45,990 --> 00:10:49,880
stable cause a panic if

180
00:10:49,880 --> 00:10:53,470
if the other cookie matches you know the
cookies checked

181
00:10:53,470 --> 00:10:57,980
and I'm and that's it it's also worth
noting that

182
00:10:57,980 --> 00:11:01,990
a when you allocate something the next
pointer

183
00:11:01,990 --> 00:11:05,510
up act these cookies are actually as the
road after

184
00:11:05,510 --> 00:11:09,370
their replaced with that beef in archery
friend to you from

185
00:11:09,370 --> 00:11:16,370
from actually leaking into these values
I'm another thing

186
00:11:16,500 --> 00:11:21,430
concerning the hardening other so now
peter is regarding primitives so

187
00:11:21,430 --> 00:11:26,310
Stefan Esser had a talk at sites can a
black cat

188
00:11:26,310 --> 00:11:29,490
call ask how he armageddon where he
proposed a technique

189
00:11:29,490 --> 00:11:32,560
using hours answer lies XML I

190
00:11:32,560 --> 00:11:35,959
to basically manipulators state-of-the
the on

191
00:11:35,959 --> 00:11:41,010
the calyx on and this allowed you to
precisely

192
00:11:41,010 --> 00:11:47,220
allocate and freak Alex and data it was
also possible to force personality shins

193
00:11:47,220 --> 00:11:48,910
by creating enough references

194
00:11:48,910 --> 00:11:52,779
so you could basically if you if you
create enough references you could

195
00:11:52,779 --> 00:11:54,040
freeze the reference count

196
00:11:54,040 --> 00:11:57,600
so when this say dictionary was no
longer used

197
00:11:57,600 --> 00:12:01,910
I you would still have these objects in
memory and this was youthful

198
00:12:01,910 --> 00:12:05,550
in arch you you know cause persistent
allocations and and

199
00:12:05,550 --> 00:12:09,920
sup things like that so this was an
example he he came up with

200
00:12:09,920 --> 00:12:12,959
where you had all these references and I
would

201
00:12:12,959 --> 00:12:18,180
you know produce a a in and I was object
and it was never freedom memory

202
00:12:18,180 --> 00:12:22,280
I'm in iis6 the address this by

203
00:12:22,280 --> 00:12:27,689
by making sure that if you have
duplicate dictionary keys they no longer

204
00:12:27,689 --> 00:12:31,930
you know freidy original key which was
and which was one of the

205
00:12:31,930 --> 00:12:36,660
exploitation or are scenarios he came up
with because if you will be able to

206
00:12:36,660 --> 00:12:39,839
free original keys you could create
holes and and

207
00:12:39,839 --> 00:12:44,530
position and the memory in skin that's
eight you wanted

208
00:12:44,530 --> 00:12:48,480
and I'm the dictionary entries can also
no longer be penned

209
00:12:48,480 --> 00:12:51,990
remember using these multiple references
they both checks

210
00:12:51,990 --> 00:12:57,069
on this now in both these cases the
fewest dictionaries considered invalid

211
00:12:57,069 --> 00:13:00,810
so so this this technique is pretty much

212
00:13:00,810 --> 00:13:04,839
I it's a it's mostly that now

213
00:13:04,839 --> 00:13:07,930
so that was on on cheap on

214
00:13:07,930 --> 00:13:11,120
stack cookies are all CU's and this is

215
00:13:11,120 --> 00:13:14,740
in obviously to prevent this
stackoverflow exportation

216
00:13:14,740 --> 00:13:19,540
night supplied to you functions wood
structures and buffers

217
00:13:19,540 --> 00:13:23,689
a the random value that is used to see
this cookie is

218
00:13:23,689 --> 00:13:27,480
generated by the kernel on boots as well

219
00:13:27,480 --> 00:13:32,740
in our minutes and although it's a
32-bit value and there's only

220
00:13:32,740 --> 00:13:36,050
the entry fee is only 24 bit because the
second by

221
00:13:36,050 --> 00:13:39,480
is actually zeroed out and is is
personally

222
00:13:39,480 --> 00:13:43,270
body to prevent you from from mom you
know

223
00:13:43,270 --> 00:13:46,880
using a a string copy operation 22

224
00:13:46,880 --> 00:13:52,250
guess the cookie or you know bypass this
in some way

225
00:13:52,250 --> 00:13:57,329
and died they actually did you this by
by both having a generated Sakaki place

226
00:13:57,329 --> 00:13:59,860
directly after the same registers

227
00:13:59,860 --> 00:14:03,890
understaffed at the bottom of the stack
and he also story pointer

228
00:14:03,890 --> 00:14:07,579
to that cookie or 2a could a

229
00:14:07,579 --> 00:14:13,089
location in the kernel data section and
compare those values

230
00:14:13,089 --> 00:14:17,040
its so this is what that basically looks
like

231
00:14:17,040 --> 00:14:20,829
you see that the sac 02 pointer points
to

232
00:14:20,829 --> 00:14:24,959
the colonel this section and the
verification is then

233
00:14:24,959 --> 00:14:28,000
to compare that value against a could
devalue

234
00:14:28,000 --> 00:14:33,680
start on on the stack

235
00:14:33,680 --> 00:14:38,329
so this is also showing that this is
before a function returns in the

236
00:14:38,329 --> 00:14:39,720
function of Eli

237
00:14:39,720 --> 00:14:44,069
it where if I Sestak okay bye by taking
ID referencing the sacked for key

238
00:14:44,069 --> 00:14:45,000
pointer

239
00:14:45,000 --> 00:14:48,470
and comparing that to to the stack value
and if

240
00:14:48,470 --> 00:14:55,290
this check fails would obviously result
in a kernel panic

241
00:14:55,290 --> 00:14:58,600
so marks gonna continue to talk a bit
about

242
00:14:58,600 --> 00:15:01,720
information leaking mitigations

243
00:15:01,720 --> 00:15:04,860
okay so um previous versions have

244
00:15:04,860 --> 00:15:09,260
by Wes as you probably know didn't use
as a lot so I'm

245
00:15:09,260 --> 00:15:13,069
basically they had quite a few I'm they
have quite a few API's that are

246
00:15:13,069 --> 00:15:14,059
available

247
00:15:14,059 --> 00:15:17,170
from using my life disclosing various
point is to

248
00:15:17,170 --> 00:15:20,829
objects income I'd I'm these are usually
point is

249
00:15:20,829 --> 00:15:24,660
to objects of on the heap you know
useful data structures and stuff like

250
00:15:24,660 --> 00:15:25,420
that

251
00:15:25,420 --> 00:15:28,540
I'm because in the past I want using as
a lot before

252
00:15:28,540 --> 00:15:31,620
this was not really a big deal very
important

253
00:15:31,620 --> 00:15:35,819
I'm but now that they're trying to
randomize up

254
00:15:35,819 --> 00:15:38,890
all the daughter in the eye in income
memory um

255
00:15:38,890 --> 00:15:43,400
and it makes sense to tryin prevent
families API's from

256
00:15:43,400 --> 00:15:48,020
from disclosing useful Connell comment
addresses that might be a

257
00:15:48,020 --> 00:15:52,770
used as either over at targets or a spot
about some exploitation strategy

258
00:15:52,770 --> 00:15:56,329
I'm so essentially what they did was
they disabled the few K

259
00:15:56,329 --> 00:16:00,020
API's from for the the lot for the Boca

260
00:16:00,020 --> 00:16:04,579
up a API's at this place kinda point is
they actually obfuscate them

261
00:16:04,579 --> 00:16:08,459
um and then there's a few others with a
diff the route point is where they

262
00:16:08,459 --> 00:16:13,350
decided they didn't need them on

263
00:16:13,350 --> 00:16:16,890
ISO the the first thing

264
00:16:16,890 --> 00:16:20,699
I'll I wanted to talk about was the
disabled API's

265
00:16:20,699 --> 00:16:24,559
I'm now stephan s actually talked about
a

266
00:16:24,559 --> 00:16:28,230
a a method of using he thinks way um

267
00:16:28,230 --> 00:16:31,430
anne's black hat 2011 talk and i won the

268
00:16:31,430 --> 00:16:34,579
interesting strategy for the United with
that there with

269
00:16:34,579 --> 00:16:38,990
several mock API's a specifically hi
sign in phone box and info

270
00:16:38,990 --> 00:16:42,260
that will that will actually disclose
the state the

271
00:16:42,260 --> 00:16:45,360
the kernel up colonel

272
00:16:45,360 --> 00:16:49,860
designs to to a certain extent so you
could create design and find out like

273
00:16:49,860 --> 00:16:53,309
how many blocks allocated how many it's
got free I'm

274
00:16:53,309 --> 00:16:56,860
all this kind of status about each time
and this is %uh particularly useful when

275
00:16:56,860 --> 00:16:58,049
you need to know

276
00:16:58,049 --> 00:17:02,040
precisely how much how many applications
in a to fill up a sign in

277
00:17:02,040 --> 00:17:05,079
and stuff like that so a these APIs were

278
00:17:05,079 --> 00:17:08,189
were particularly useful for for heat
grooming and stuff like that

279
00:17:08,189 --> 00:17:11,809
on so up a love cause some

280
00:17:11,809 --> 00:17:16,110
decided that that this wasn't
particularly necessary

281
00:17:16,110 --> 00:17:20,339
for for users to have so they now
require I'm the API still exist but they

282
00:17:20,339 --> 00:17:21,189
now check

283
00:17:21,189 --> 00:17:24,530
if you've got the the special P I can
has to bugger access

284
00:17:24,530 --> 00:17:28,199
I'm which of course but for died

285
00:17:28,199 --> 00:17:31,210
on there's also a a large pensive

286
00:17:31,210 --> 00:17:35,169
API's that disclose cuddle object
pointers as part of structures that they

287
00:17:35,169 --> 00:17:36,390
returned to the kernel

288
00:17:36,390 --> 00:17:39,419
um a few these a BST system calls bill

289
00:17:39,419 --> 00:17:42,799
a great a a lot of them are also am mock

290
00:17:42,799 --> 00:17:46,290
API's that are exposed by the kernel um
and

291
00:17:46,290 --> 00:17:49,330
I love them um would disclose point is
like

292
00:17:49,330 --> 00:17:53,010
I'm not put K object I will X expose

293
00:17:53,010 --> 00:17:56,419
pointed to a kind object um some of the
others

294
00:17:56,419 --> 00:17:59,740
up up what space info would a would

295
00:17:59,740 --> 00:18:03,360
its I give pointers to port objects I'm
page info

296
00:18:03,360 --> 00:18:07,320
and so on say like the leaves are really
useful a

297
00:18:07,320 --> 00:18:11,350
om appointed discloses that you'd be
able to use

298
00:18:11,350 --> 00:18:14,650
in a in and mounting an attack against
the kernel um

299
00:18:14,650 --> 00:18:19,230
so basically a couple went through and
fix to all the ones that you see up

300
00:18:19,230 --> 00:18:22,250
up on the slide in front view um
essentially

301
00:18:22,250 --> 00:18:27,470
up all of these I API's still return the
same structure and they still have the

302
00:18:27,470 --> 00:18:29,049
field where the pointer is

303
00:18:29,049 --> 00:18:32,880
on but they've a they've actually gonna
head in phnom

304
00:18:32,880 --> 00:18:36,940
and obfuscated on basically I

305
00:18:36,940 --> 00:18:40,179
the these a few guys are also used
internally to see

306
00:18:40,179 --> 00:18:43,559
to some extent by the by the panel
itself so they'd

307
00:18:43,559 --> 00:18:46,809
you know they can get rid of them and
stuff like that and I love the point is

308
00:18:46,809 --> 00:18:47,370
service

309
00:18:47,370 --> 00:18:51,429
unique values and things like that so
they feel that they still need them to

310
00:18:51,429 --> 00:18:52,480
be unique values

311
00:18:52,480 --> 00:18:55,900
et cetera but they didn't want to give
away the condom pointer

312
00:18:55,900 --> 00:19:00,510
so basically they just have a a simple
strategy for obfuscating nice point is

313
00:19:00,510 --> 00:19:03,679
and Dom what they do is they generate a

314
00:19:03,679 --> 00:19:06,799
31b a random value big-time I'm

315
00:19:06,799 --> 00:19:11,630
and no ran and I'll about a random value
to the real point

316
00:19:11,630 --> 00:19:17,039
so the structure you re back we'll have
a a and nonsensical value

317
00:19:17,039 --> 00:19:20,919
I was so this is an example love a
structure they use to return

318
00:19:20,919 --> 00:19:25,070
beforehand um and a and you can see like

319
00:19:25,070 --> 00:19:28,660
the structure which eventually get tough
back to use them I'd I'm it's filling up

320
00:19:28,660 --> 00:19:32,020
information about you know a pipe and
Dom it

321
00:19:32,020 --> 00:19:35,380
you can see that the pipe handle about

322
00:19:35,380 --> 00:19:38,549
values actually just a a counterpoint to

323
00:19:38,549 --> 00:19:42,179
um where the now I

324
00:19:42,179 --> 00:19:46,580
we've got a disassembly as you can see
that got the a random

325
00:19:46,580 --> 00:19:49,730
a random value that they they now add to
it um

326
00:19:49,730 --> 00:19:53,140
one thing I should a should mention
about this particular example that I

327
00:19:53,140 --> 00:19:53,760
chose

328
00:19:53,760 --> 00:19:58,039
is some I in the latest X and the source
code

329
00:19:58,039 --> 00:20:02,030
um the the the source code still looks

330
00:20:02,030 --> 00:20:07,010
looks like this um so mem line has
actually been lagging behind

331
00:20:07,010 --> 00:20:10,200
IRS in a couple have these a protections

332
00:20:10,200 --> 00:20:13,260
and a and summer there if you guys are
still exposed on

333
00:20:13,260 --> 00:20:16,929
I haven't actually verified on MEDLINE
whether they're

334
00:20:16,929 --> 00:20:20,510
I'm they compiled version is still
viable to this particular info

335
00:20:20,510 --> 00:20:23,530
information leak but some I was gonna I

336
00:20:23,530 --> 00:20:27,120
I might say I do a blog or something
right and you're right

337
00:20:27,120 --> 00:20:30,620
the difference is that that meant line
is still lagging behind and mention and

338
00:20:30,620 --> 00:20:33,080
where appropriate

339
00:20:33,080 --> 00:20:37,610
um but we were specifically focusing on
IRS which is that which is fixedly

340
00:20:37,610 --> 00:20:40,929
all that stuff um and then there's

341
00:20:40,929 --> 00:20:44,169
a couple of other API's that disclose
pointers

342
00:20:44,169 --> 00:20:48,289
unnecessarily and so they just the right
amount I'm in particular there used to

343
00:20:48,289 --> 00:20:48,860
be a

344
00:20:48,860 --> 00:20:51,880
and nine approx structure information
leak using

345
00:20:51,880 --> 00:20:56,419
fiscal that some other at jailbreaking
things you stand

346
00:20:56,419 --> 00:21:01,710
so they've just gone having got me to
that all together

347
00:21:01,710 --> 00:21:05,580
so I'm now that the

348
00:21:05,580 --> 00:21:08,970
prevented the colonel from disclosing
all the stuff they want to

349
00:21:08,970 --> 00:21:12,070
they wanna Decem address space layout
randomization

350
00:21:12,070 --> 00:21:16,549
I'm obviously this is %uh designed to
prevent attackers from

351
00:21:16,549 --> 00:21:19,610
modifying utilizing daughter at nine fix
locations

352
00:21:19,610 --> 00:21:24,450
I'm which is a very a big problem in
previous versions violets

353
00:21:24,450 --> 00:21:27,760
um and so

354
00:21:27,760 --> 00:21:32,100
they've they basically have a a strategy
that has two pots

355
00:21:32,100 --> 00:21:35,450
the first part is they wanna there and
my CC connelly myspace

356
00:21:35,450 --> 00:21:39,000
a very gets loaded so it's no longer a
static location a memory

357
00:21:39,000 --> 00:21:42,820
and they also a randomized divisive they
fit the contour map

358
00:21:42,820 --> 00:21:46,380
which is on something all all %uh talk
about morning

359
00:21:46,380 --> 00:21:49,890
in a minute

360
00:21:49,890 --> 00:21:54,130
okay so the kernel image is actually
randomized by the bootloader before up

361
00:21:54,130 --> 00:21:55,070
before I with

362
00:21:55,070 --> 00:21:59,419
a is running um they generate a a buncha

363
00:21:59,419 --> 00:22:02,870
random dot up and that may take a shy
one hash

364
00:22:02,870 --> 00:22:07,190
that Dada on and they take a single bite
from that show on hash

365
00:22:07,190 --> 00:22:10,280
and I use that to calculate the the kind
of life I'm

366
00:22:10,280 --> 00:22:14,270
which is a in effect ya you can see on
the slide the

367
00:22:14,270 --> 00:22:17,840
the formula that they use to work to
calculate the new bases where they're

368
00:22:17,840 --> 00:22:19,720
going to place a candle in memory

369
00:22:19,720 --> 00:22:22,760
I'm so it's basically constant value
plus slide

370
00:22:22,760 --> 00:22:27,610
times to make so I'm up

371
00:22:27,610 --> 00:22:31,559
you can see in the its assembly there on
this is this is actually the code and I

372
00:22:31,559 --> 00:22:32,110
beat that

373
00:22:32,110 --> 00:22:35,799
works out where they're going to where
they're going to let the Connell

374
00:22:35,799 --> 00:22:39,380
um and basically merits that that every
time that I mentioned on the previous

375
00:22:39,380 --> 00:22:43,559
slide

376
00:22:43,559 --> 00:22:46,590
um the calculated value that they work
out

377
00:22:46,590 --> 00:22:50,809
um the is the is an added to the kennel

378
00:22:50,809 --> 00:22:54,500
added to the kind of perfect base
address um and

379
00:22:54,500 --> 00:22:58,559
so as a result because they using a
single by for randomization

380
00:22:58,559 --> 00:23:03,110
on the kernel can now be replaced at 1
I've 256 possible locations

381
00:23:03,110 --> 00:23:06,299
um and the base addresses I to make but
spot

382
00:23:06,299 --> 00:23:10,120
up and I i should mention that they

383
00:23:10,120 --> 00:23:13,370
only randomized the kennel if I am if
image

384
00:23:13,370 --> 00:23:16,750
price at my head which of course it is
with

385
00:23:16,750 --> 00:23:20,740
um and anyway the adjusted basis dress

386
00:23:20,740 --> 00:23:23,880
above the connelly's passed into the
kind

387
00:23:23,880 --> 00:23:28,840
in its big dogs that I've it passes to
the stop function mcconnell

388
00:23:28,840 --> 00:23:33,919
so that the company's where where it is
in memory

389
00:23:33,919 --> 00:23:37,280
the the come up with some I basically

390
00:23:37,280 --> 00:23:40,340
at describes the entire layout have
kinda memory

391
00:23:40,340 --> 00:23:44,799
I'm its it's a special map for the
kennel task and

392
00:23:44,799 --> 00:23:48,970
basically every allocation that happens
I'm within the kernel

393
00:23:48,970 --> 00:23:52,140
is allocated from the kernel map

394
00:23:52,140 --> 00:23:55,830
either directly or indirectly most
easily and directly

395
00:23:55,830 --> 00:23:58,890
um so I basically

396
00:23:58,890 --> 00:24:02,039
its use for the the Comex spends the
entire

397
00:24:02,039 --> 00:24:05,600
colonel address space it's not that rx8
there there there there

398
00:24:05,600 --> 00:24:09,110
goes up to rx if if if the ffff

399
00:24:09,110 --> 00:24:14,870
um and all all the maps that we were
discussing earlier in particularly

400
00:24:14,870 --> 00:24:18,520
the design map where Caleb signs are
allocated out of

401
00:24:18,520 --> 00:24:21,570
and there's also not be sick on a map
and and this

402
00:24:21,570 --> 00:24:25,240
a whole bunch of others they're actually
carved out the candle mat as well

403
00:24:25,240 --> 00:24:29,190
so these sign that is like a sum that
the come up um

404
00:24:29,190 --> 00:24:32,690
so in the past what they used to do is a
big time

405
00:24:32,690 --> 00:24:36,850
you know the oldest guy and combat the
some maps continuously

406
00:24:36,850 --> 00:24:41,090
and I'm so there would be a been
locations that would be easy to figure

407
00:24:41,090 --> 00:24:42,049
out

408
00:24:42,049 --> 00:24:45,789
um but now especially because I've

409
00:24:45,789 --> 00:24:49,330
a Salar because the kernel is moved from
the from the base address

410
00:24:49,330 --> 00:24:52,940
love have kinda memory um

411
00:24:52,940 --> 00:24:56,220
if if they dis- idea that a continuous
allocations now

412
00:24:56,220 --> 00:24:59,240
designs would always be at the very
beginning of

413
00:24:59,240 --> 00:25:02,490
kinda memory and they wanted to add
randomization that

414
00:25:02,490 --> 00:25:06,029
so basically the strategy that they did
with some may generate

415
00:25:06,029 --> 00:25:09,710
89 bit value on right after came a
minute which

416
00:25:09,710 --> 00:25:13,039
a which is used to establish the comment
that a structure

417
00:25:13,039 --> 00:25:16,850
and they multiply this value by page
size which is 4k

418
00:25:16,850 --> 00:25:19,950
um and then not this resulting value

419
00:25:19,950 --> 00:25:23,779
I is basically I used for an initial
allocation

420
00:25:23,779 --> 00:25:27,360
at the counter app so I'm go get this
the

421
00:25:27,360 --> 00:25:31,269
tho get this %uh random allocation
that's a

422
00:25:31,269 --> 00:25:34,879
you know I'm because it's not a bit
spent repeated 512

423
00:25:34,879 --> 00:25:38,039
different possible allocation sizes are

424
00:25:38,039 --> 00:25:42,629
because they multiply it by page size
this can be an allocation up to to make

425
00:25:42,629 --> 00:25:46,379
I'm so what basically happened is
allocated at the beginning of kinda

426
00:25:46,379 --> 00:25:47,240
memory

427
00:25:47,240 --> 00:25:50,309
I'm and then I'll go ahead and allocate
all some naps after it

428
00:25:50,309 --> 00:25:54,210
I'm and so the some maps and now I'm at
randomize

429
00:25:54,210 --> 00:25:58,659
I locations because the this initial
allocation

430
00:25:58,659 --> 00:26:02,169
um so a one thing

431
00:26:02,169 --> 00:26:06,309
I'll also worth noting is that the that
initial allocation it's at the beginning

432
00:26:06,309 --> 00:26:08,509
of how memories silently removed

433
00:26:08,509 --> 00:26:11,740
the first time that a garbage collection
on

434
00:26:11,740 --> 00:26:15,809
is issued which is a a process that the
kind does periodically to

435
00:26:15,809 --> 00:26:19,970
to print the designs that we were
talking about earlier

436
00:26:19,970 --> 00:26:23,320
i'm for the first time that a garbage
collection runs they

437
00:26:23,320 --> 00:26:27,009
a check to see if if they're initial can
allow

438
00:26:27,009 --> 00:26:30,210
I came up allocation is there and if it
is they

439
00:26:30,210 --> 00:26:34,039
they remove it um this behavior can
actually also be

440
00:26:34,039 --> 00:26:38,360
agreement with the came up of paper
emitter

441
00:26:38,360 --> 00:26:41,600
on so this is a this is an example of
how the

442
00:26:41,600 --> 00:26:45,710
cuddle map would typically look a in a

443
00:26:45,710 --> 00:26:49,470
in in youth stand it down I was device
um

444
00:26:49,470 --> 00:26:52,879
you basically got the random came up of
that allocation beginning

445
00:26:52,879 --> 00:26:56,169
sometime after that you've got the
colonel image um

446
00:26:56,169 --> 00:26:59,549
the stolen memory thing never I refers
to

447
00:26:59,549 --> 00:27:02,789
some memory that's manually taken a

448
00:27:02,789 --> 00:27:06,730
a really big time um and them is a bunch
of signs that

449
00:27:06,730 --> 00:27:10,799
that happen sometime after that um this
is just an example

450
00:27:10,799 --> 00:27:14,039
there's no reason why arm as signs

451
00:27:14,039 --> 00:27:17,730
couldn't be before the kernel image if
there's enough space in between kernel

452
00:27:17,730 --> 00:27:18,269
image

453
00:27:18,269 --> 00:27:22,470
and the the random came up offset I'm
depending on the

454
00:27:22,470 --> 00:27:25,499
you know the random value that was
generated for the kind limits when it

455
00:27:25,499 --> 00:27:26,679
was loaded

456
00:27:26,679 --> 00:27:30,289
I'm but generally look like this um the
other thing

457
00:27:30,289 --> 00:27:33,340
tonight there is this to static pages in
memory

458
00:27:33,340 --> 00:27:36,980
I miss the vector table at rx ffff there
is there is there is there

459
00:27:36,980 --> 00:27:41,100
I'm and a shed com page which is also a

460
00:27:41,100 --> 00:27:44,730
available in these might actually at FFF
1000

461
00:27:44,730 --> 00:27:49,379
um these actually outside the come up

462
00:27:49,379 --> 00:27:54,039
so they they don't know if

463
00:27:54,039 --> 00:27:57,360
I the other thing um that they've

464
00:27:57,360 --> 00:28:00,570
done with I was six is a added some
address space protection

465
00:28:00,570 --> 00:28:04,860
I guess I did the stupor prevent on now
and all set to null dereference

466
00:28:04,860 --> 00:28:08,649
style vulnerabilities on I obviously
this has been a

467
00:28:08,649 --> 00:28:12,340
are quite a big deal in other operating
systems particularly

468
00:28:12,340 --> 00:28:16,480
in the last few years um with the
Windows kernel in particular

469
00:28:16,480 --> 00:28:20,499
um and you know you have snap in all
this technology is looking at

470
00:28:20,499 --> 00:28:23,960
addressing this um but the one what
Apple

471
00:28:23,960 --> 00:28:27,039
have done in some are basically

472
00:28:27,039 --> 00:28:31,740
but in the past they had a a similar
dress configurations

473
00:28:31,740 --> 00:28:35,580
to mice one operating systems you where
you have to use my task in

474
00:28:35,580 --> 00:28:39,049
you know the lower half memory um
virtual address space

475
00:28:39,049 --> 00:28:42,340
and then the high pot is a is taken by
the Connell

476
00:28:42,340 --> 00:28:47,279
um a now on all the references were
actually already prevented

477
00:28:47,279 --> 00:28:51,909
in my life I'm because play for spa nice
to have this page 0 segment

478
00:28:51,909 --> 00:28:55,429
that essentially on mandated that that
the

479
00:28:55,429 --> 00:29:00,029
that the first pages on at least the
first page is a is

480
00:29:00,029 --> 00:29:03,149
is not mapped into memory om and they

481
00:29:03,149 --> 00:29:07,259
actually enforce this like you I am if
you try to create a binary even a signed

482
00:29:07,259 --> 00:29:08,789
binary without that page here

483
00:29:08,789 --> 00:29:12,529
the skillet because there was a have
integrity check

484
00:29:12,529 --> 00:29:17,279
um however II guess a they felt that
wasn't enough because

485
00:29:17,279 --> 00:29:21,450
I guess as potential of set to null stop
problems whereby

486
00:29:21,450 --> 00:29:26,860
I'm you know if for example a reality
failed and someone didn't notice

487
00:29:26,860 --> 00:29:31,269
they might right to an offset in memory
that's fine of that somethings map their

488
00:29:31,269 --> 00:29:34,509
in which case maybe you could do
something

489
00:29:34,509 --> 00:29:37,850
so I now the kind of house cuz its
unaddressed space

490
00:29:37,850 --> 00:29:41,710
wallet executing aznar uses user

491
00:29:41,710 --> 00:29:46,259
task visible um it's basically they
basically transition

492
00:29:46,259 --> 00:29:49,669
into the the cult of the dress faith out

493
00:29:49,669 --> 00:29:53,299
with the interrupt handlers or when you
susp C or whatever

494
00:29:53,299 --> 00:29:57,649
um and they had to do some a special
operations

495
00:29:57,649 --> 00:30:01,929
to handle the I'm copying to and from a
user and kernel mode

496
00:30:01,929 --> 00:30:05,210
within you know you know

497
00:30:05,210 --> 00:30:08,999
so that they can see both address space
at the same time I'm

498
00:30:08,999 --> 00:30:12,049
for anyone that's interested they are
actually do that by I'm

499
00:30:12,049 --> 00:30:15,350
using to translation table base
registers

500
00:30:15,350 --> 00:30:19,529
I'm for you tonight where r the first
one points to the user address space in

501
00:30:19,529 --> 00:30:20,539
a sec 1 points to

502
00:30:20,539 --> 00:30:24,320
can address space and when the
connally's running

503
00:30:24,320 --> 00:30:27,320
arm they just up I

504
00:30:27,320 --> 00:30:31,409
replaced the TT IB 0 with just the kind
of address space so

505
00:30:31,409 --> 00:30:34,529
up it can actually see you tonight
anymore

506
00:30:34,529 --> 00:30:39,639
um so I that the the end result is using
my page is a

507
00:30:39,639 --> 00:30:42,999
essentially not accessible while
executing income I'd

508
00:30:42,999 --> 00:30:46,340
so you you're not gonna run to a
situation where you accidentally access

509
00:30:46,340 --> 00:30:47,909
them

510
00:30:47,909 --> 00:30:51,129
so this is the this is basically how
that looks

511
00:30:51,129 --> 00:30:55,740
um up you can see I use a task

512
00:30:55,740 --> 00:30:58,820
as both the user address space and the
cuddle map again

513
00:30:58,820 --> 00:31:02,259
um the the static home page it's
actually possible to buy

514
00:31:02,259 --> 00:31:06,419
user and the girl um and when the
Colonels running

515
00:31:06,419 --> 00:31:10,669
year this there's nothing in the
below-par memory

516
00:31:10,669 --> 00:31:15,029
I'm so when I was looking into this I
look back at high with five

517
00:31:15,029 --> 00:31:18,059
and other hand if pretty crazy copy and
copy out

518
00:31:18,059 --> 00:31:22,700
strategy where um the any validation
they did for use my point is

519
00:31:22,700 --> 00:31:25,999
was that I'm the is my point to is below
kernel memory

520
00:31:25,999 --> 00:31:30,149
that is it's a museum I'd um but they
didn't check the link that all

521
00:31:30,149 --> 00:31:33,369
on and that was crazy because the
pointer

522
00:31:33,369 --> 00:31:36,669
plus length could be larger than RX
eight thousand

523
00:31:36,669 --> 00:31:40,669
and then made a I you run the risk of
inadvertently

524
00:31:40,669 --> 00:31:45,139
coping in a popping out of kennel memory
while using I am

525
00:31:45,139 --> 00:31:48,610
copy transmission copy transition I am

526
00:31:48,610 --> 00:31:53,600
I but basically com there's a limitation
to to the attack which is a

527
00:31:53,600 --> 00:31:57,230
a devices um had to have greater than
512 Meg RAM

528
00:31:57,230 --> 00:32:00,299
because I tried napping the top aging is
a mod

529
00:32:00,299 --> 00:32:03,769
didn't work om I looked into it and
eventually discovered

530
00:32:03,769 --> 00:32:07,909
that was why but i'm new devices such as
iPad 3 not find five

531
00:32:07,909 --> 00:32:11,769
have one gig ram will let you map that
top page in memory and

532
00:32:11,769 --> 00:32:16,119
arm and then basically the you can do
this copy and copy up

533
00:32:16,119 --> 00:32:19,919
um trick so his the a is the code that

534
00:32:19,919 --> 00:32:23,519
that does that you can see that
basically there's no link validation at

535
00:32:23,519 --> 00:32:24,850
all latest um

536
00:32:24,850 --> 00:32:28,779
as long as the the use my point is stops
in use my then I'm

537
00:32:28,779 --> 00:32:32,070
then apparently that's fine um

538
00:32:32,070 --> 00:32:36,429
so I S six actually added a whole bunch
to check that

539
00:32:36,429 --> 00:32:40,460
at an integer overflow and finest X
conservative maximum length

540
00:32:40,460 --> 00:32:44,409
I'm and you know making sure that
everything's in

541
00:32:44,409 --> 00:32:48,850
in user userspace however I'm they're
actually feel vulnerable to the same bug

542
00:32:48,850 --> 00:32:49,999
because

543
00:32:49,999 --> 00:32:53,299
arm if the if the copy link I'm

544
00:32:53,299 --> 00:32:57,559
that is sent a copy in a copy out is a
is less than 4k

545
00:32:57,559 --> 00:33:01,200
then the pointer plus links check is is
just %uh skipped

546
00:33:01,200 --> 00:33:04,610
for some for some reason um which means
you can

547
00:33:04,610 --> 00:33:08,840
reading right to the first page kinda
memory um

548
00:33:08,840 --> 00:33:12,860
for anything that does a a copy and or
copy out

549
00:33:12,860 --> 00:33:16,309
um so here's the code here again you can
see that there's a function called copy

550
00:33:16,309 --> 00:33:18,419
validate that's the thing that actually
does everything

551
00:33:18,419 --> 00:33:22,159
but there's a check right before it
where if the link is less and

552
00:33:22,159 --> 00:33:25,860
X 1000 don't worry about it probably
fine

553
00:33:25,860 --> 00:33:28,989
um so

554
00:33:28,989 --> 00:33:32,779
you know is there anything in that first
page a membrane well as Weiner

555
00:33:32,779 --> 00:33:36,950
a initially the came across it out that
random allocation

556
00:33:36,950 --> 00:33:40,220
use for the came up randomizing is a is
there

557
00:33:40,220 --> 00:33:44,440
but that's removed after the first
garbage collection um

558
00:33:44,440 --> 00:33:47,899
that means necessarily that that first
page memory won't be

559
00:33:47,899 --> 00:33:53,840
om a won't be in any signs custom signs
were allocated bolick a map

560
00:33:53,840 --> 00:33:57,850
offset allocation was still in place so
you need to find things that allocate to

561
00:33:57,850 --> 00:33:59,259
the comment directly

562
00:33:59,259 --> 00:34:03,159
and there are a couple of such things I
hate a fast doesn't a buncha times

563
00:34:03,159 --> 00:34:07,739
um and actually K lock does it for
blocks have larger than 256 K they'll

564
00:34:07,739 --> 00:34:11,600
allocate directly to the kinda map I'm
so it is indeed possible to

565
00:34:11,600 --> 00:34:15,860
to map the first page in memory I'm I've
kinda memory in

566
00:34:15,860 --> 00:34:21,220
on so in order to attack about like this
like basically I credit to approve

567
00:34:21,220 --> 00:34:24,879
concept that created a pipe um and up

568
00:34:24,879 --> 00:34:28,929
I specify a buffer to other copying a
copy out of that with like

569
00:34:28,929 --> 00:34:32,190
in the last page views might memory um
and

570
00:34:32,190 --> 00:34:36,060
and then we would be able to up up

571
00:34:36,060 --> 00:34:39,330
transition over that boundary and either
around reading

572
00:34:39,330 --> 00:34:43,250
read some daughter out of kinda memory
resulting in a useful information leak

573
00:34:43,250 --> 00:34:47,649
alright into the first page account
memory oMG causing panic or

574
00:34:47,649 --> 00:34:51,220
you know I'm gaming privileges on

575
00:34:51,220 --> 00:34:54,950
added one thing that was particularly
interesting is the

576
00:34:54,950 --> 00:34:58,650
because copy and copy added designed to
false all the time

577
00:34:58,650 --> 00:35:01,880
um if if your allocation strategy fails

578
00:35:01,880 --> 00:35:05,020
and the I'm the memories and maps like
you'd hoped

579
00:35:05,020 --> 00:35:08,310
on the kernel is not going to panic
it'll to safely return default

580
00:35:08,310 --> 00:35:12,300
so you can actually tried endlessly I'm
without causing any damage

581
00:35:12,300 --> 00:35:15,800
I'm and then you can read back the kind
of memory

582
00:35:15,800 --> 00:35:18,950
check that the allocation everything
that you wanted to be there and then

583
00:35:18,950 --> 00:35:21,650
perform your outperform you overwrite

584
00:35:21,650 --> 00:35:25,310
us so that was quite interesting

585
00:35:25,310 --> 00:35:29,200
I the other thing we should mention is
that colonel address space

586
00:35:29,200 --> 00:35:33,260
is no longer read/write executed kernel
code company directly packs

587
00:35:33,260 --> 00:35:36,290
which was a very popular strategy in the
past

588
00:35:36,290 --> 00:35:43,290
and the heap in the stack a unknown
execute a bull

589
00:35:43,600 --> 00:35:46,910
alright so then talk a bit about you
know

590
00:35:46,910 --> 00:35:50,630
I'm attack strategies for I was 6

591
00:35:50,630 --> 00:35:54,640
as as mark mentioned my cities
protections

592
00:35:54,640 --> 00:35:58,200
now kill basically all the known
attacked rafters

593
00:35:58,200 --> 00:36:02,790
a you know the siskel table or rights
patching kernel code

594
00:36:02,790 --> 00:36:06,900
attacking data structures which you no
longer care for due to the randomized

595
00:36:06,900 --> 00:36:08,270
locations

596
00:36:08,270 --> 00:36:11,440
so so we basically need something new

597
00:36:11,440 --> 00:36:16,590
a so generally when you you know I'm
wanna have an exploit you need to

598
00:36:16,590 --> 00:36:20,740
a leak some information you know
especially if you wanna bypasses large

599
00:36:20,740 --> 00:36:25,180
stuff like that and that be corruption
primitives are so

600
00:36:25,180 --> 00:36:28,700
is what dictates the strategy so I'll is
it

601
00:36:28,700 --> 00:36:33,020
the right into an adjacent buffer ID
right to relative location from the

602
00:36:33,020 --> 00:36:33,540
buffer

603
00:36:33,540 --> 00:36:37,260
on the right to an arbitrary location
and stuff like that

604
00:36:37,260 --> 00:36:40,950
a and the different primitives in this
case will be a

605
00:36:40,950 --> 00:36:44,420
will look at them separately

606
00:36:44,420 --> 00:36:49,359
so a leaking make Colonel base address
is really useful because it has a lot of

607
00:36:49,359 --> 00:36:50,910
information

608
00:36:50,910 --> 00:36:54,310
in in its data structures and a

609
00:36:54,310 --> 00:36:57,690
previously you can use and this API
called

610
00:36:57,690 --> 00:37:01,240
text request to request information
about

611
00:37:01,240 --> 00:37:05,510
kernel extensions and the safety I was
divided into two parts you had

612
00:37:05,510 --> 00:37:09,320
active and passive operations the Act
two operations

613
00:37:09,320 --> 00:37:12,740
required privileged access so roots

614
00:37:12,740 --> 00:37:16,280
this was because it did stuff like slow
downloads start/stop

615
00:37:16,280 --> 00:37:20,320
cetera a it should be mentioned that I O
S which

616
00:37:20,320 --> 00:37:23,330
is configured with a secure karnal
configuration

617
00:37:23,330 --> 00:37:26,850
I removed the ability to load kernel
extensions so you can only do i download

618
00:37:26,850 --> 00:37:27,630
sites up

619
00:37:27,630 --> 00:37:30,990
so stuff like that

620
00:37:30,990 --> 00:37:34,080
so before I was six there were no

621
00:37:34,080 --> 00:37:37,090
restrictions on accessing this these
parts

622
00:37:37,090 --> 00:37:43,680
passive operations I see you can as you
can see on this slide here you can axes

623
00:37:43,680 --> 00:37:46,700
the these different types

624
00:37:46,700 --> 00:37:50,210
you can request the the address the
kernel image by

625
00:37:50,210 --> 00:37:53,809
recalling via request predicate or

626
00:37:53,809 --> 00:37:58,200
in requesting their request predicate
get colonel it

627
00:37:58,200 --> 00:38:02,630
address and there's a few others there
that allow you to request the lotto

628
00:38:02,630 --> 00:38:06,579
information about the colonel
environment and economy extensions

629
00:38:06,579 --> 00:38:10,329
I'm so been in iis6

630
00:38:10,329 --> 00:38:13,849
they try to address this but the check
was somewhat

631
00:38:13,849 --> 00:38:17,069
on the sort of thing get it right

632
00:38:17,069 --> 00:38:20,380
so in this process the obvious the

633
00:38:20,380 --> 00:38:24,380
try to prevent you from getting the load
address the kernel but in that process

634
00:38:24,380 --> 00:38:24,859
they

635
00:38:24,859 --> 00:38:27,930
allowed all the other operations so so
while you

636
00:38:27,930 --> 00:38:31,099
should only axes a pass operations stay
now allow

637
00:38:31,099 --> 00:38:34,430
RCA jacks is active operations and as
well as

638
00:38:34,430 --> 00:38:38,230
all the other I useful API's regarding

639
00:38:38,230 --> 00:38:41,799
disclosing information about the Chrome
extension environments

640
00:38:41,799 --> 00:38:45,289
up so so now we can actually use this

641
00:38:45,289 --> 00:38:49,490
kicks request predicate can load it
which returns a dictionary

642
00:38:49,490 --> 00:38:52,609
E on information about

643
00:38:52,609 --> 00:38:56,569
all the kernel extensions if you do this
and I was five as well

644
00:38:56,569 --> 00:39:00,420
but you know it's useful to us now
because we have a slight to deal with

645
00:39:00,420 --> 00:39:04,410
so this returns in all the loaded
addresses

646
00:39:04,410 --> 00:39:09,099
as well as Mako header dumps for for all
the load modules including the kernel

647
00:39:09,099 --> 00:39:13,220
I know though the vote address and the
second headers

648
00:39:13,220 --> 00:39:16,250
in these and Marco headers

649
00:39:16,250 --> 00:39:19,500
are are obscured by to heidi is large
side

650
00:39:19,500 --> 00:39:22,710
on section headers are not so we can
actually get

651
00:39:22,710 --> 00:39:25,819
any sort over address to any

652
00:39:25,819 --> 00:39:29,270
section for any kernel extension
including the caramel

653
00:39:29,270 --> 00:39:34,240
up so we can simply just passenger
requests like this one we get a response

654
00:39:34,240 --> 00:39:37,460
and we decode response and we look at

655
00:39:37,460 --> 00:39:41,220
you know the the section address which
actually is the real

656
00:39:41,220 --> 00:39:45,089
real actress so this doesn't require you
to have a root privileges

657
00:39:45,089 --> 00:39:49,619
you can do this as number which user and
so a slice variously defeated

658
00:39:49,619 --> 00:39:54,180
I'm yet out more tonight talk a bit
about

659
00:39:54,180 --> 00:39:58,309
he preps I'm okay so

660
00:39:58,309 --> 00:40:02,819
as you will as we mentioned earlier like
all the strategies that I with six is

661
00:40:02,819 --> 00:40:03,369
employed

662
00:40:03,369 --> 00:40:06,819
as more less made its such that Tom I

663
00:40:06,819 --> 00:40:09,839
standard heap overflow tricks and no
longer really gonna work out

664
00:40:09,839 --> 00:40:13,680
om not so basically up

665
00:40:13,680 --> 00:40:17,329
you know you can override a free lease
pointer but Tom

666
00:40:17,329 --> 00:40:21,359
the validation of islands you know
they'll be kinda panic

667
00:40:21,359 --> 00:40:24,690
I'm so we were quite an new strategies

668
00:40:24,690 --> 00:40:27,809
and really the strategies that you
employed to depend on the

669
00:40:27,809 --> 00:40:30,910
the properties at the bug you trying to
exploit

670
00:40:30,910 --> 00:40:34,180
I'm so basically up this section

671
00:40:34,180 --> 00:40:39,150
om with its gonna a mention how

672
00:40:39,150 --> 00:40:43,270
you know obviously its fence the free
with validation

673
00:40:43,270 --> 00:40:46,319
a is is in place and that some

674
00:40:46,319 --> 00:40:50,150
how to defeat um maybe we'll talk at
medidata instead

675
00:40:50,150 --> 00:40:54,289
%uh that's quite useful on the various
control structures

676
00:40:54,289 --> 00:40:58,420
other can be quite useful mom some of
these attacks

677
00:40:58,420 --> 00:41:01,579
will require some level of heat ground
creaming which my mind if

678
00:41:01,579 --> 00:41:04,779
may or may not be difficult depending on
block size and again

679
00:41:04,779 --> 00:41:08,299
the properties about the actually trying
to exploit on

680
00:41:08,299 --> 00:41:12,750
I'm going to quickly present like %uh
full primitives that Tom

681
00:41:12,750 --> 00:41:16,119
that a we found to be quite useful on

682
00:41:16,119 --> 00:41:19,789
and and then we're probably going to do
de Meyer of our

683
00:41:19,789 --> 00:41:23,380
about thing on so these

684
00:41:23,380 --> 00:41:27,140
the the the premise that up that I came
up with all

685
00:41:27,140 --> 00:41:30,720
revolve around this pm copy to the
structure I'm you can see there it's

686
00:41:30,720 --> 00:41:33,279
quite simple structure it's got a %uh a
type

687
00:41:33,279 --> 00:41:38,470
um and of that size and then a union
that has like a header

688
00:41:38,470 --> 00:41:41,599
I pointed to VM object or

689
00:41:41,599 --> 00:41:46,980
a structure that has a appointed to some
daughter and the calyx eyes

690
00:41:46,980 --> 00:41:50,490
on so this structure is quite useful

691
00:41:50,490 --> 00:41:54,569
um particularly because the various
properties it has

692
00:41:54,569 --> 00:41:57,880
basically I'm the kinda has this
function khobam not copy and

693
00:41:57,880 --> 00:42:01,589
and it's nice to use this one it's
copying lot copping in large chunks of

694
00:42:01,589 --> 00:42:02,210
Dara

695
00:42:02,210 --> 00:42:05,349
from a different from one map to another
I'm

696
00:42:05,349 --> 00:42:08,430
and what it does whenever tough whenever
it's um

697
00:42:08,430 --> 00:42:11,460
transferring like a you know a lot

698
00:42:11,460 --> 00:42:14,829
like a memory w6 p.m. copy and structure
which

699
00:42:14,829 --> 00:42:18,440
basically creates on these fam copy to
the structures on

700
00:42:18,440 --> 00:42:21,859
rather rather than copying all the
daughter in a

701
00:42:21,859 --> 00:42:25,480
one slot usually just out you know
credit data structure saying

702
00:42:25,480 --> 00:42:28,890
all this you know this daughter from
this map is

703
00:42:28,890 --> 00:42:33,079
we need to put it in this map or
something like that um a

704
00:42:33,079 --> 00:42:37,279
the they use kinda buffers when nom when
the size is quite small when it's less

705
00:42:37,279 --> 00:42:38,450
than 4k

706
00:42:38,450 --> 00:42:41,839
um and up we can actually create these
really easily

707
00:42:41,839 --> 00:42:45,549
um basically up but

708
00:42:45,549 --> 00:42:49,150
if you haven't looked at mock messaging
MacPorts before

709
00:42:49,150 --> 00:42:52,819
it's a you know it's really large part
of a I've I wesson

710
00:42:52,819 --> 00:42:56,609
out the X and you can a land down we
didn't really have time to go into it in

711
00:42:56,609 --> 00:42:57,819
this presentation

712
00:42:57,819 --> 00:43:01,119
essentially on you have these mock
courts that you can create and send

713
00:43:01,119 --> 00:43:03,430
messages to and receive messages from

714
00:43:03,430 --> 00:43:06,869
um and the messages that you send can

715
00:43:06,869 --> 00:43:11,190
can contain things called lol
descriptors or outline descriptors

716
00:43:11,190 --> 00:43:15,160
and basically on they they more or less
indicate

717
00:43:15,160 --> 00:43:19,869
like a when you sending a message like
oh I want to send a list are over here

718
00:43:19,869 --> 00:43:23,880
but instead of copying it all into your
message he does provide a pointed to it

719
00:43:23,880 --> 00:43:26,900
and now uses p.m. copying um to

720
00:43:26,900 --> 00:43:30,400
up to %uh copy it into the kernel and
then home

721
00:43:30,400 --> 00:43:33,710
went when the for when the receiving I'm

722
00:43:33,710 --> 00:43:36,829
mock court like receive receives a
message then

723
00:43:36,829 --> 00:43:41,299
it will own you know I'll copy it back
up to the to the target prices

724
00:43:41,299 --> 00:43:44,609
so basically you can just create AMR
quote

725
00:43:44,609 --> 00:43:49,339
on to receive messages send a bun fun to
messages to them with these oh well the

726
00:43:49,339 --> 00:43:50,450
script is in them

727
00:43:50,450 --> 00:43:54,079
oMG and up you know it it will end up
getting his fam

728
00:43:54,079 --> 00:43:57,750
copy T structures with kind of is in
them on

729
00:43:57,750 --> 00:44:01,250
and attend a corrupting the structures
quite useful I'm the other good thing

730
00:44:01,250 --> 00:44:01,690
about him

731
00:44:01,690 --> 00:44:06,250
is a but apart from the that the header

732
00:44:06,250 --> 00:44:10,069
there is completely is a controlled
under under it and Dom

733
00:44:10,069 --> 00:44:14,349
I anything I'm to 4,096 you can
basically create that size

734
00:44:14,349 --> 00:44:17,400
so you can om you can target overflights

735
00:44:17,400 --> 00:44:20,950
the take place in the whole bunch of
different like Caleb signs

736
00:44:20,950 --> 00:44:24,289
I'm depending on the bug trying to
exploit

737
00:44:24,289 --> 00:44:27,910
on so the first the the first primitive

738
00:44:27,910 --> 00:44:32,359
we can do with this is an adjacent
disclosure I'm basically we discover

739
00:44:32,359 --> 00:44:35,779
if you essentially growing the heat such
ship Tom

740
00:44:35,779 --> 00:44:38,869
you gonna know I'll describe the right
up to your your buffer that your

741
00:44:38,869 --> 00:44:43,000
overflying on and you overwrite the size
parameter up the fam

742
00:44:43,000 --> 00:44:46,480
copy T um and then you receive that
message

743
00:44:46,480 --> 00:44:49,990
on your on your piracy on the point that
you sent it to

744
00:44:49,990 --> 00:44:55,779
and Dom the over in size a lot will
actually cause it to copy kinda memory

745
00:44:55,779 --> 00:44:58,869
that's adjacent in memory it's your kind
of it so you'll be able to read a whole

746
00:44:58,869 --> 00:44:59,640
bunch

747
00:44:59,640 --> 00:45:04,049
a you know it's a startup um what's
really useful about this

748
00:45:04,049 --> 00:45:09,259
a this attack is that that size is not
pasta k free or anything like that

749
00:45:09,259 --> 00:45:12,289
if you're on I'm familiar with I was
kinda programming the

750
00:45:12,289 --> 00:45:16,529
the K free API takes a size and that
size is used to

751
00:45:16,529 --> 00:45:21,799
tonight up out you know what what sign
it's gonna put it in

752
00:45:21,799 --> 00:45:25,369
a out of those Caleb signs I so

753
00:45:25,369 --> 00:45:29,450
I'm basically if you put the wrong size
and you can course cause some problems

754
00:45:29,450 --> 00:45:30,579
but in this case

755
00:45:30,579 --> 00:45:33,640
is there's and I side effects whatsoever
the anything

756
00:45:33,640 --> 00:45:37,279
that sizes for is to determine how much
started to copy out if

757
00:45:37,279 --> 00:45:41,520
kinda memory so this is how they look
when they're in the AM

758
00:45:41,520 --> 00:45:44,890
when they're like a a data structure is
um

759
00:45:44,890 --> 00:45:48,279
allocated on you've got you use a
daughter in there at

760
00:45:48,279 --> 00:45:53,020
I've 7056 but obviously could be
anything up to 4,096

761
00:45:53,020 --> 00:45:56,420
um it fills out the the head up um and

762
00:45:56,420 --> 00:46:00,599
you'll notice that the K doubt appoint a
I'm basically when they allocate these

763
00:46:00,599 --> 00:46:02,710
may not copy T structures like this

764
00:46:02,710 --> 00:46:06,500
they allocate like structure plus
however much doubt you have

765
00:46:06,500 --> 00:46:10,960
so on and and then made um make the
pointed to the data that they gonna copy

766
00:46:10,960 --> 00:46:11,619
back at

767
00:46:11,619 --> 00:46:14,759
to use my head um like directly under
the help

768
00:46:14,759 --> 00:46:17,809
so as you can see on if you just

769
00:46:17,809 --> 00:46:22,210
overwrite the up a the

770
00:46:22,210 --> 00:46:25,390
the the size to be much larger up well
end up copying

771
00:46:25,390 --> 00:46:30,290
the adjacent memory on the heap back up
to you which is quite useful

772
00:46:30,290 --> 00:46:34,730
on we can take this a step further up um
as he saw in the previous slide

773
00:46:34,730 --> 00:46:39,009
like right after the size is a a point
of which points directly under it

774
00:46:39,009 --> 00:46:44,099
arm up up because that's where your user
data is stored

775
00:46:44,099 --> 00:46:47,849
on so essentially we can overwrite the
size and the point up

776
00:46:47,849 --> 00:46:51,069
um up an adjacent fam copy T

777
00:46:51,069 --> 00:46:54,200
and down we can set appointed to
anything we want

778
00:46:54,200 --> 00:46:58,299
and we can read up a tree kernel memory
at this point um

779
00:46:58,299 --> 00:47:01,329
the so we just a override those those

780
00:47:01,329 --> 00:47:04,970
few members we receive the message I'm
and we can read

781
00:47:04,970 --> 00:47:08,739
up a true memory again this is really
great particularly because I side

782
00:47:08,739 --> 00:47:09,520
effects

783
00:47:09,520 --> 00:47:12,569
the I'm the dot appoint a um in that

784
00:47:12,569 --> 00:47:16,380
in that previous slide it's never pasta
k free or anything like that so it's not

785
00:47:16,380 --> 00:47:17,380
going to

786
00:47:17,380 --> 00:47:20,920
like I'm cause some sign corruption or
something like that

787
00:47:20,920 --> 00:47:24,739
and as you know the size doesn't a bit
so the only thing that that

788
00:47:24,739 --> 00:47:28,029
pointers is for is on to decide

789
00:47:28,029 --> 00:47:31,329
which memory to copy back into use my
I'm

790
00:47:31,329 --> 00:47:34,380
so again this has %uh this has no side
effects so

791
00:47:34,380 --> 00:47:38,279
um using by these primitives together is
really useful because some

792
00:47:38,279 --> 00:47:41,309
if you can I'm perform an overflow
multiple times

793
00:47:41,309 --> 00:47:44,650
which public and missus very safe way to
om

794
00:47:44,650 --> 00:47:49,460
to up you know I'm remember back from
the colonel and get the

795
00:47:49,460 --> 00:47:52,710
doubted that you need in order to
perform useful overflow

796
00:47:52,710 --> 00:47:55,819
um one thing I should also note I

797
00:47:55,819 --> 00:47:59,799
is that up a the yom

798
00:47:59,799 --> 00:48:04,079
the dot a pointer is up is some

799
00:48:04,079 --> 00:48:07,180
is never use for anything else

800
00:48:07,180 --> 00:48:10,730
sir um

801
00:48:10,730 --> 00:48:13,730
a we can out extend this again

802
00:48:13,730 --> 00:48:17,130
and and basically recreate an overflow

803
00:48:17,130 --> 00:48:21,359
in one go um so up as he saw in the

804
00:48:21,359 --> 00:48:25,759
the previous slide ross et I'm you can
see that there's a que locks eyes

805
00:48:25,759 --> 00:48:29,109
in the data structure right um right
after the point of

806
00:48:29,109 --> 00:48:32,109
I'm now back a lot size is actually
pasta k free

807
00:48:32,109 --> 00:48:35,859
and like I mentioned before I'm not five
use to the time in which design

808
00:48:35,859 --> 00:48:39,540
on the block is going to be entered into
when it's free

809
00:48:39,540 --> 00:48:42,910
on so out basically what we can do is

810
00:48:42,910 --> 00:48:47,630
I we can overwrite up calyx lies with
the lodge a value than it really is

811
00:48:47,630 --> 00:48:50,690
um I and then on

812
00:48:50,690 --> 00:48:54,349
you know i i recovery from a tree kinda
memory

813
00:48:54,349 --> 00:48:57,349
the above the other thing I was gonna
mention up

814
00:48:57,349 --> 00:49:02,000
previously is that Tom if you're reading
out recount memory and it's on that

815
00:49:02,000 --> 00:49:05,359
this actually white again kind of the
kernel because up

816
00:49:05,359 --> 00:49:09,670
ill to safely returned an error because
I am essentially they use copy out

817
00:49:09,670 --> 00:49:13,299
to outside to form the copy and as we
talked about up for

818
00:49:13,299 --> 00:49:17,640
it's not going to cause a panic so it's
quite safe on

819
00:49:17,640 --> 00:49:21,180
so yet you you out change a que locks
eyes

820
00:49:21,180 --> 00:49:25,339
after the data point I and you make it
something bigger like 256 is that 128 or

821
00:49:25,339 --> 00:49:26,089
whatever

822
00:49:26,089 --> 00:49:30,339
um and then you allocated 256 potluck
and you get this book back that's really

823
00:49:30,339 --> 00:49:31,910
on the 128 bytes

824
00:49:31,910 --> 00:49:35,290
am and you can do the overflow again so
essentially

825
00:49:35,290 --> 00:49:38,869
if you overflow one of these data
structures um it

826
00:49:38,869 --> 00:49:42,700
allows you to I do a second overflow

827
00:49:42,700 --> 00:49:46,980
but on in the process receiving Abbott
we cuddled up

828
00:49:46,980 --> 00:49:50,930
which will be really useful to you in
you know performing some sort of over

829
00:49:50,930 --> 00:49:52,609
right

830
00:49:52,609 --> 00:49:56,089
so I had from pictures at the again this
is the normal one

831
00:49:56,089 --> 00:50:00,099
um and then you overwrite with the logic
a lot size:

832
00:50:00,099 --> 00:50:04,440
and that's what's eventually cost to I'm
2k free

833
00:50:04,440 --> 00:50:08,020
a the last primitive that I wanted to
talk about

834
00:50:08,020 --> 00:50:12,200
with some finding your own address and
doing an overflow which is basically mix

835
00:50:12,200 --> 00:50:13,279
and match have

836
00:50:13,279 --> 00:50:17,930
both previous techniques on so this is
up

837
00:50:17,930 --> 00:50:21,150
this is basically one where we wanna
overflow two adjacent VM

838
00:50:21,150 --> 00:50:24,980
copy to the structures um and we do that
om

839
00:50:24,980 --> 00:50:28,529
in in the in the first one that we are
the floor we're gonna overfly the whole

840
00:50:28,529 --> 00:50:29,230
thing which in

841
00:50:29,230 --> 00:50:32,549
involve running a.m. you know the size
the offset K

842
00:50:32,549 --> 00:50:37,450
calyx eyes and everything and that this
is going to be where poisoned

843
00:50:37,450 --> 00:50:40,650
where poisoned block is right um

844
00:50:40,650 --> 00:50:44,170
up but then we want to keep overflying
and go there

845
00:50:44,170 --> 00:50:47,989
%uh a little bit further into an
adjacent p.m. at coffee tea and possibly

846
00:50:47,989 --> 00:50:48,970
override it

847
00:50:48,970 --> 00:50:52,660
I'm basically just overriding the way
but appoint a

848
00:50:52,660 --> 00:50:56,569
and changing the size to be something
quite large um

849
00:50:56,569 --> 00:51:00,839
then when we free via them them only
free the the second

850
00:51:00,839 --> 00:51:04,440
IBM copy to the structure it'll end up
leaking

851
00:51:04,440 --> 00:51:08,980
arm the page that Alabama property
structures are on back to us

852
00:51:08,980 --> 00:51:13,270
and on for the uncorrupted once and for
the partially corrupted 1

853
00:51:13,270 --> 00:51:17,690
we will see the point is to itself um in
the data that we receive back so

854
00:51:17,690 --> 00:51:20,779
Wilner I'm exactly where we r Memory

855
00:51:20,779 --> 00:51:25,539
on and then and then we can free the the
first them a copy to the structure

856
00:51:25,539 --> 00:51:29,549
which is where the poisoned lockerbie
and down will know exactly where that is

857
00:51:29,549 --> 00:51:30,660
a memory

858
00:51:30,660 --> 00:51:34,000
on so again you've got a memory layup

859
00:51:34,000 --> 00:51:37,380
like this on the overflow block is

860
00:51:37,380 --> 00:51:40,799
a presumably something that you know
you're going to you're buggin

861
00:51:40,799 --> 00:51:44,329
um and then we basically overflow over
the whole first one

862
00:51:44,329 --> 00:51:47,880
um which is where the the poisoned Kayla
clock is going to be

863
00:51:47,880 --> 00:51:51,829
and we possibly overfly the second one
basically so we point a little bit

864
00:51:51,829 --> 00:51:56,170
packwood's on the on a rampage memory so
we can read back and see exactly where

865
00:51:56,170 --> 00:51:57,180
we are

866
00:51:57,180 --> 00:52:00,809
on so we're

867
00:52:00,809 --> 00:52:04,630
using this on is really useful om
because

868
00:52:04,630 --> 00:52:08,710
there's a couple times on for other tree
right primitives

869
00:52:08,710 --> 00:52:11,970
on that we wanted to going to bed
unfortunately

870
00:52:11,970 --> 00:52:14,980
run at a time but um both both the

871
00:52:14,980 --> 00:52:18,259
right permits that we came up with on

872
00:52:18,259 --> 00:52:22,520
involved basically having one level love
pointer in direction so we have to know

873
00:52:22,520 --> 00:52:23,789
where we were in memory

874
00:52:23,789 --> 00:52:27,470
so using this trick we were able to we
were able to go ahead

875
00:52:27,470 --> 00:52:32,180
and up and figure out where we were in
memory right point is to air on block

876
00:52:32,180 --> 00:52:35,839
and then on do it as a second level the
reference

877
00:52:35,839 --> 00:52:39,220
um and and gain out to execution

878
00:52:39,220 --> 00:52:42,720
by corrupting some some kernel data
structures so I'm

879
00:52:42,720 --> 00:52:47,089
John so we're gonna do it Mr

880
00:52:47,089 --> 00:52:50,420
a farm of the other

881
00:52:50,420 --> 00:52:53,619
a fan I was 6 device

882
00:52:53,619 --> 00:52:57,000
com truly yeah rules

883
00:52:57,000 --> 00:53:02,799
yes so you know it's obvious that all
the army dude

884
00:53:02,799 --> 00:53:09,309
say this is an eye with 6 device

885
00:53:09,309 --> 00:53:12,770
a we wanted to get an iPhone 5 but I
totally failed at it

886
00:53:12,770 --> 00:53:16,599
its it up a bit so you can see that it's
I was six

887
00:53:16,599 --> 00:53:23,430
um and a

888
00:53:23,430 --> 00:53:26,100
weekend

889
00:53:26,100 --> 00:53:30,040
we're gonna say that we can run this run
the setup

890
00:53:30,040 --> 00:53:35,250
and basically um install Cydia jailbreak
to find

891
00:53:35,250 --> 00:53:42,250
and do it we like

892
00:53:55,530 --> 00:53:59,410
for well city is running but we don't
have any network so you can see that

893
00:53:59,410 --> 00:54:04,690
for anyway using a strategy we can nom
jailbreak now it's six device

894
00:54:04,690 --> 00:54:09,350
I'm and run abt replications which I
think you know meant to be I D

895
00:54:09,350 --> 00:54:16,350
but yet here

896
00:54:18,360 --> 00:54:21,820
sir in conclusion on you can see that I
was excited

897
00:54:21,820 --> 00:54:26,030
a few funds medications all the previous
techniques that up

898
00:54:26,030 --> 00:54:29,330
have been used to basically of my spot
useless

899
00:54:29,330 --> 00:54:32,630
I am and up but they still rent

900
00:54:32,630 --> 00:54:35,830
they've and Dom it's still possible to
exploit arm

901
00:54:35,830 --> 00:54:39,580
kinda bugs and I was six but the bar is
definitely been raised

902
00:54:39,580 --> 00:54:46,580
so that's it thanks

903
00:54:49,690 --> 00:54:56,690
right now

904
00:54:56,840 --> 00:55:00,350
are any questions he won over here

905
00:55:00,350 --> 00:55:03,830
use that

906
00:55:03,830 --> 00:55:07,630
exploit to law the iPhones

907
00:55:07,630 --> 00:55:10,970
uses said shippers sorry not

908
00:55:10,970 --> 00:55:15,700
unlock the iPhone I know this is just
the kind of my neck is why it's almost a

909
00:55:15,700 --> 00:55:16,600
month learning stuff

910
00:55:16,600 --> 00:55:23,600
yet parking okay thanks any other
questions

911
00:55:28,290 --> 00:55:35,290
these wave your hand if you got any
questions

912
00:55:35,790 --> 00:55:40,440
nobody

913
00:55:40,440 --> 00:55:45,160
I maybe and missus up what pretty used
to actually

914
00:55:45,160 --> 00:55:48,890
overflow into the other %um copy the
structures I

915
00:55:48,890 --> 00:55:51,930
it's in disclosure okay but

916
00:55:51,930 --> 00:55:58,930
will publish it when Apple is done with
okay

917
00:56:04,920 --> 00:56:08,339
lost the final question

918
00:56:08,339 --> 00:56:10,990
what do you use to penalize the called

919
00:56:10,990 --> 00:56:16,059
low just the sorry what did you use

920
00:56:16,059 --> 00:56:19,930
with mythology used to analyze the good
of the good

921
00:56:19,930 --> 00:56:23,559
0 a likely to see solder and

922
00:56:23,559 --> 00:56:26,630
the X in your sources available so I'm
that was a real big help

923
00:56:26,630 --> 00:56:30,950
I'm particularly the mountain lion
releases on a couple the disassembly we

924
00:56:30,950 --> 00:56:32,019
had on the slides

925
00:56:32,019 --> 00:56:35,700
there's actually no source code that you
can go to look at I'm just not by the

926
00:56:35,700 --> 00:56:36,819
slides because we're

927
00:56:36,819 --> 00:56:40,229
I'll develop a bit when the Beatles were
still out over

928
00:56:40,229 --> 00:56:44,440
okay

929
00:56:44,440 --> 00:56:47,859
I think it's time for coffee break mark

930
00:56:47,859 --> 00:56:54,859
entirety thank you very much for his
great presentation the former boss

931
00:57:02,599 --> 00:57:04,140
ok

932
00:57:04,140 --> 00:57:05,690
this

933
00:57:05,690 --> 00:57:12,690
sleep

