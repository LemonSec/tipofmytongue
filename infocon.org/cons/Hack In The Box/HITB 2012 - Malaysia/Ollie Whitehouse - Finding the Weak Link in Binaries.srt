1
00:00:07,450 --> 00:00:11,360
be face

2
00:00:11,360 --> 00:00:13,210
space

3
00:00:13,210 --> 00:00:15,080
slow

4
00:00:15,080 --> 00:00:22,080
sleuth

5
00:00:25,960 --> 00:00:29,070
we talk about how to find the weak link

6
00:00:29,070 --> 00:00:34,019
in binaries and holy White House he is
here to explain to us

7
00:00:34,019 --> 00:00:38,160
thank you thanks very much good
afternoon everyone

8
00:00:38,160 --> 00:00:43,190
I'm say it one easily White House I work
for a company in the UK could NCC group

9
00:00:43,190 --> 00:00:46,790
I'm this work was necessary to nancy c

10
00:00:46,790 --> 00:00:49,850
this works give you that background is
really a combination of

11
00:00:49,850 --> 00:00:53,360
several different research projects and
the experience have different problems

12
00:00:53,360 --> 00:00:54,970
inside software development

13
00:00:54,970 --> 00:00:58,339
say to give you but background towards a

14
00:00:58,339 --> 00:01:01,330
up until the end of last year I worked
for Research in Motion the people make

15
00:01:01,330 --> 00:01:02,080
the BlackBerry

16
00:01:02,080 --> 00:01:06,390
and so when the challenges that we ran
into was how to make security scaleable

17
00:01:06,390 --> 00:01:10,450
say we can all sit in this room and
discussed software security because we

18
00:01:10,450 --> 00:01:11,600
work in the profession

19
00:01:11,600 --> 00:01:14,979
Basenji start interacting with software
developers

20
00:01:14,979 --> 00:01:18,560
or technical cue a taste of the have to
test Software issues

21
00:01:18,560 --> 00:01:22,520
can if the onto the knowledge drops off
very quickly and say

22
00:01:22,520 --> 00:01:26,250
the purpose of this presentation is
really to explain to you

23
00:01:26,250 --> 00:01:30,000
how the Tories built from the ground up
but you like what you see

24
00:01:30,000 --> 00:01:33,510
the end Mishicot mates in a utility or
program

25
00:01:33,510 --> 00:01:37,240
which can be used by pretty much anyone
to identify tweet links

26
00:01:37,240 --> 00:01:41,600
in binaries so to give you an idea on
what we gonna cover

27
00:01:41,600 --> 00:01:45,810
we're going through the kinda what we
looking for when looking for these weak

28
00:01:45,810 --> 00:01:46,460
links

29
00:01:46,460 --> 00:01:50,940
why and then how say again I'm gonna
really delve into

30
00:01:50,940 --> 00:01:54,330
how we go about detecting these
deficiencies or the old presence at

31
00:01:54,330 --> 00:01:55,690
these defensive mechanisms

32
00:01:55,690 --> 00:01:59,000
and some conclusions so when we look at

33
00:01:59,000 --> 00:02:02,360
kind of what we set out to do the was
initial call

34
00:02:02,360 --> 00:02:05,400
if we have a windows binary which we
don't have

35
00:02:05,400 --> 00:02:09,830
source code to or necessarily private
symbols we want to be able to gain some

36
00:02:09,830 --> 00:02:11,330
level of assurance

37
00:02:11,330 --> 00:02:14,930
that like a secure development life
cycle has been

38
00:02:14,930 --> 00:02:18,390
followed when writing that binary
alternatively

39
00:02:18,390 --> 00:02:22,349
if we're researcher we may want to
identify those pine trees which are less

40
00:02:22,349 --> 00:02:23,459
well protected

41
00:02:23,459 --> 00:02:27,180
wants to easily and we'll stick whitley
so that was kind of the

42
00:02:27,180 --> 00:02:31,750
last mission statement above the project
I guess and and this is how we achieved

43
00:02:31,750 --> 00:02:32,000
it

44
00:02:32,000 --> 00:02:37,170
say when we look at on a on a modern
Windows operating system and I do to

45
00:02:37,170 --> 00:02:38,780
discuss elfin UNIX

46
00:02:38,780 --> 00:02:42,700
later in the presentation but generally
we have a number of different defenses

47
00:02:42,700 --> 00:02:43,410
available

48
00:02:43,410 --> 00:02:47,540
to software developers so there are a
number of operating system provided

49
00:02:47,540 --> 00:02:48,709
defenses so

50
00:02:48,709 --> 00:02:53,260
the fact address space layout
randomization exists is a property of

51
00:02:53,260 --> 00:02:54,950
the operating system typically

52
00:02:54,950 --> 00:02:59,069
and upon as to what T then there are a
number compiler provided

53
00:02:59,069 --> 00:03:02,490
defenses such as stack cookies to
protect against overflows

54
00:03:02,490 --> 00:03:05,599
we want to perhaps to take on recent do
or do not have that property

55
00:03:05,599 --> 00:03:09,819
a number blinker and then there are some
different a aspects that the actual

56
00:03:09,819 --> 00:03:13,569
develop a physically has to make changes
to the code or turn features on

57
00:03:13,569 --> 00:03:18,580
in order to benefit from so can affect
gives you really a feel for how

58
00:03:18,580 --> 00:03:22,230
could have wide the subject matter is
when we start looking at kind of what

59
00:03:22,230 --> 00:03:25,489
these weak links are what developers
have to think about when they're writing

60
00:03:25,489 --> 00:03:26,550
software today

61
00:03:26,550 --> 00:03:31,190
they have to cover of an awful amount so
we start taking into

62
00:03:31,190 --> 00:03:35,660
what we start looking for say we will
look for example

63
00:03:35,660 --> 00:03:39,560
version all the compile and the reason
that will do that

64
00:03:39,560 --> 00:03:43,090
is Microsoft's if we take the issue
studio for example

65
00:03:43,090 --> 00:03:46,930
is gone for a number of different
generations with every generation

66
00:03:46,930 --> 00:03:50,650
at certain defenses have improves if we
take for example stack

67
00:03:50,650 --> 00:03:54,849
cookies that was introduced initially in
Visual Studio 2002

68
00:03:54,849 --> 00:03:59,250
Visual Studio dotnet the implementation
of stack keys

69
00:03:59,250 --> 00:04:02,250
in that particular version of the
compiler was easily or

70
00:04:02,250 --> 00:04:07,500
relatively easily subverted so yes those
that cookies but they want as repost as

71
00:04:07,500 --> 00:04:09,470
the Visual Studio 2005

72
00:04:09,470 --> 00:04:12,569
sp1 version see if we can accurately
fingerprint

73
00:04:12,569 --> 00:04:15,709
the version of the compiler use Compal
different modules

74
00:04:15,709 --> 00:04:19,769
and we see the stack akiza a present but
we know it from an earlier version

75
00:04:19,769 --> 00:04:23,680
that gives us some hope I'm from an
attack a perspective that we may be able

76
00:04:23,680 --> 00:04:25,780
to successfully compromise a binary
still

77
00:04:25,780 --> 00:04:29,629
or from a defensive perspective we know
we have to go back actually recompile

78
00:04:29,629 --> 00:04:30,889
with modern compiler

79
00:04:30,889 --> 00:04:35,139
I'm took a nap mitigate that risk we
then have

80
00:04:35,139 --> 00:04:39,199
a number specific compiler and Lincoln
able protections on Windows

81
00:04:39,199 --> 00:04:43,659
say these basically site because
Microsoft at the legacy problem

82
00:04:43,659 --> 00:04:48,460
which is always been our Achilles heel
early versions Windows didn't have a SLR

83
00:04:48,460 --> 00:04:51,990
didn't have debt and so pine trees had
no could have

84
00:04:51,990 --> 00:04:55,419
awareness of it say to ensure
compatibility when they started

85
00:04:55,419 --> 00:04:57,050
introducing the speeches

86
00:04:57,050 --> 00:05:00,159
they to the right approach and they said
that developers have to

87
00:05:00,159 --> 00:05:03,909
affected yes sir at that my pointer is
compatible

88
00:05:03,909 --> 00:05:07,439
with these new features so that
developers affectively opting in

89
00:05:07,439 --> 00:05:12,370
to the extra defensive mechanisms so SLR
you don't get by default

90
00:05:12,370 --> 00:05:15,680
at DP I get by the fall again as I
discussed

91
00:05:15,680 --> 00:05:19,599
stack cookies and then we have to kind
of a safe structured exception handling

92
00:05:19,599 --> 00:05:22,759
as well as an a developer has to certify

93
00:05:22,759 --> 00:05:26,770
that binary is compatible and is not
gonna crash

94
00:05:26,770 --> 00:05:31,029
and we have a number of develop a
specific I'm

95
00:05:31,029 --> 00:05:34,919
changes which they make so for example
the developer

96
00:05:34,919 --> 00:05:38,539
if they wish I can say if you detect

97
00:05:38,539 --> 00:05:42,050
any heat corruption marks of t4 heap

98
00:05:42,050 --> 00:05:45,059
just terminate my point three the
default behavior

99
00:05:45,059 --> 00:05:48,059
is to kind of soldier on and kind of
keep working

100
00:05:48,059 --> 00:05:51,460
and that's because there's a surprising
amount of developers suffer

101
00:05:51,460 --> 00:05:55,249
subtle heap corruption without any
negative apparent negative effects on

102
00:05:55,249 --> 00:05:56,789
their application

103
00:05:56,789 --> 00:06:00,199
but much has very aggressive kinda keep
integrity checking now

104
00:06:00,199 --> 00:06:03,960
and if they detect that for Nick just
kinda fireplaces should

105
00:06:03,960 --> 00:06:08,509
at St APT DP policies the developer can
of their point arian to say

106
00:06:08,509 --> 00:06:12,110
opting into DP which they may have
already done through the back

107
00:06:12,110 --> 00:06:16,949
in corruption but then also say don't
ever allow it to be turned off

108
00:06:16,949 --> 00:06:20,860
is a common exploit mechanism was that
initially the first stage in the payload

109
00:06:20,860 --> 00:06:24,080
with basic alt ton of DP for the process

110
00:06:24,080 --> 00:06:27,389
and jump to the second stage in the
payload you can say gonna

111
00:06:27,389 --> 00:06:31,289
thank you that my binary this a good
indicator again that developers fashion

112
00:06:31,289 --> 00:06:32,089
force about

113
00:06:32,089 --> 00:06:35,360
these kind of types of attacks
inappropriateness occasions

114
00:06:35,360 --> 00:06:40,449
and as a whole row of to bother I'm
specific defenses safety lol planting

115
00:06:40,449 --> 00:06:43,559
a high-level deal I'll planting is a

116
00:06:43,559 --> 00:06:47,119
when you for example you navigate to a
network share you double click on a

117
00:06:47,119 --> 00:06:47,999
binary

118
00:06:47,999 --> 00:06:52,199
and say it's for a particular
extensiontype if that point three

119
00:06:52,199 --> 00:06:56,289
doesn't have the DLL required to pass
that file

120
00:06:56,289 --> 00:07:00,520
available already loaded it will
actually use the network share which

121
00:07:00,520 --> 00:07:02,270
we're loading your might fall from

122
00:07:02,270 --> 00:07:06,749
is the first place it looks so the idea
is you put an attachment

123
00:07:06,749 --> 00:07:10,499
or ifile and a malicious DLL which the
fought which the

124
00:07:10,499 --> 00:07:13,949
users\application with an attempt to
like remotely to achieve up to code

125
00:07:13,949 --> 00:07:14,960
execution

126
00:07:14,960 --> 00:07:19,080
and I was a whole raft up facing most
products are affected by this one guys

127
00:07:19,080 --> 00:07:21,409
or another when it was first identified

128
00:07:21,409 --> 00:07:24,499
but there are specific mitigations that
developers can use

129
00:07:24,499 --> 00:07:27,909
to stop their applications being talked
to by that type attack

130
00:07:27,909 --> 00:07:31,809
and again we can detect back to get it
is kinda a confidence factor on

131
00:07:31,809 --> 00:07:35,520
withholding you there you a what they
were doing

132
00:07:35,520 --> 00:07:39,179
and then there's other kinda more
performance impacting

133
00:07:39,179 --> 00:07:43,279
options like pointer and coding say
their of the city's available in the US

134
00:07:43,279 --> 00:07:47,419
first at an API to actually in Chi
longley points is in memory to protest

135
00:07:47,419 --> 00:07:47,710
against

136
00:07:47,710 --> 00:07:51,599
overwrites or in fair lakes and similar

137
00:07:51,599 --> 00:07:56,319
we then have a a whole new a whole raft
of other things safe secure Mikes offs

138
00:07:56,319 --> 00:08:01,110
STL secure development life cycle they
have a 145 API's up and

139
00:08:01,110 --> 00:08:04,159
we come see detect the presence in the
supplies

140
00:08:04,159 --> 00:08:07,899
I'm again is pretty good in the case a
strong indicator on whether or not

141
00:08:07,899 --> 00:08:11,389
is gonna be in band a patch to make it
more secure a bus is actually thought

142
00:08:11,389 --> 00:08:12,389
about from

143
00:08:12,389 --> 00:08:17,409
from stalls up there are a number of
dangerous API smoke going to

144
00:08:17,409 --> 00:08:20,509
specifically what those on how they
undermine security

145
00:08:20,509 --> 00:08:23,610
but again and not documented by
Microsoft book

146
00:08:23,610 --> 00:08:27,319
is a kind of a sneak peek I'll you serve
one at the API select

147
00:08:27,319 --> 00:08:31,419
effectively allows a developer to
inadvertently undermine the use a vassal

148
00:08:31,419 --> 00:08:32,459
are on Windows

149
00:08:32,459 --> 00:08:35,959
if these incorrectly discuss that and
then the

150
00:08:35,959 --> 00:08:41,000
a you a see the obnoxious user
experience the mic something she's Vista

151
00:08:41,000 --> 00:08:45,480
I'm has the %ah concept integrity levels
and we can then you might nap

152
00:08:45,480 --> 00:08:48,670
and then are some dotnet specific
features

153
00:08:48,670 --> 00:08:51,930
second it gives you live you love you
know there's an awful lot now

154
00:08:51,930 --> 00:08:54,970
if you say is more I Windows program
secure

155
00:08:54,970 --> 00:08:58,350
I've spent yeah I six minutes discussing

156
00:08:58,350 --> 00:09:00,930
all the different things that we're
gonna have to check for to be up to

157
00:09:00,930 --> 00:09:01,840
answer that question

158
00:09:01,840 --> 00:09:05,090
effectively doing now on in a manual way

159
00:09:05,090 --> 00:09:08,090
repeatedly reliably and without having
can have

160
00:09:08,090 --> 00:09:11,510
the knowledge we have in this room is
both time consuming and boring

161
00:09:11,510 --> 00:09:15,490
right so I had a hurry actually do it on
repeat what basis

162
00:09:15,490 --> 00:09:21,100
sorry why first up say this is a great
example

163
00:09:21,100 --> 00:09:24,890
Adobe gets you know a lot of bad press
at the moment unfortunately because they

164
00:09:24,890 --> 00:09:25,480
all

165
00:09:25,480 --> 00:09:28,940
you know the vector choice although
Oracle may be seeing that was

166
00:09:28,940 --> 00:09:32,950
Java so Adobe rights read it n

167
00:09:32,950 --> 00:09:36,120
which is one part the number vendors

168
00:09:36,120 --> 00:09:40,710
actually have software shipping in the
day be reader installation package

169
00:09:40,710 --> 00:09:44,650
is actually about eight or nine
different software vendors contribute

170
00:09:44,650 --> 00:09:48,000
different libraries in different
components to the Adobe product

171
00:09:48,000 --> 00:09:51,080
so while the baby will be making
positive noises about

172
00:09:51,080 --> 00:09:54,320
how they're improving their secure
development life cycle eccentric cetera

173
00:09:54,320 --> 00:09:55,020
et cetera

174
00:09:55,020 --> 00:09:59,000
the same is not necessary tree for the
Supplier upstream thats

175
00:09:59,000 --> 00:10:02,330
kind of Jane Paul Burnett dog United
three people in a guy

176
00:10:02,330 --> 00:10:06,080
writing code contributes to to to the
Adobe Reader

177
00:10:06,080 --> 00:10:10,230
so how do we gain assurance all all of
those suppliers

178
00:10:10,230 --> 00:10:13,730
I'm when you don't have souls you don't
necessarily have private symbols

179
00:10:13,730 --> 00:10:18,340
and it is pretty much I am echoes the
problem that we suffered a rare

180
00:10:18,340 --> 00:10:22,160
right with there were certain products
that we once again assurance

181
00:10:22,160 --> 00:10:26,420
and there was also some other benefit if
you are an end-user organization

182
00:10:26,420 --> 00:10:30,750
and you're deploying the software
products you want to understand

183
00:10:30,750 --> 00:10:34,630
how secure they are because if they're
insecure you can start looking

184
00:10:34,630 --> 00:10:39,590
to use technology such as he met so for
those on familiar what he messes

185
00:10:39,590 --> 00:10:42,660
is quite clever if technology from
Microsoft

186
00:10:42,660 --> 00:10:47,230
the you can take a program that hasn't
necessarily been developed in a secure

187
00:10:47,230 --> 00:10:51,920
white doesn't opt into technologies like
hassle of doesn't have mitigations ago

188
00:10:51,920 --> 00:10:55,950
against exploitation and really kind of
like crime a massive band-aid around

189
00:10:55,950 --> 00:10:56,760
it's a 4some

190
00:10:56,760 --> 00:11:00,810
these protections on and kind of throw
in some other mitigations into the mix

191
00:11:00,810 --> 00:11:04,110
the wouldn't otherwise be available so
whether you're running you know some

192
00:11:04,110 --> 00:11:06,040
crusty PC software from the

193
00:11:06,040 --> 00:11:10,460
beginning at the last decade I'm a you
the fact you're running on Windows means

194
00:11:10,460 --> 00:11:14,040
you can use the Mets effectively to
compulsory security posture

195
00:11:14,040 --> 00:11:18,400
so and usual as Asians being out on the
stand where they need to deploy it up

196
00:11:18,400 --> 00:11:21,710
is also extremely useful and so to give
you the

197
00:11:21,710 --> 00:11:27,320
an idea and prior to NCC over a small
told that with a numerate your program

198
00:11:27,320 --> 00:11:28,990
false directory

199
00:11:28,990 --> 00:11:32,270
literally spit out email configuration
file

200
00:11:32,270 --> 00:11:37,100
for every point three on the machine
didn't have the appropriate protections

201
00:11:37,100 --> 00:11:40,180
circulation just important he met and
usually raise the

202
00:11:40,180 --> 00:11:43,400
security level all have previously
unprotected ops

203
00:11:43,400 --> 00:11:49,050
I'm instantaneously were release
relatively little effort

204
00:11:49,050 --> 00:11:53,150
sis gonna back as the point I'm eat a
piece STL

205
00:11:53,150 --> 00:11:57,800
mine of large tree I'm if you are a
vendor you ship code you want to make

206
00:11:57,800 --> 00:11:58,770
sure the

207
00:11:58,770 --> 00:12:02,890
is not are say that's gonna have burn
your your security reputation

208
00:12:02,890 --> 00:12:05,910
and as I mentioned earlier than usual
organizations

209
00:12:05,910 --> 00:12:11,250
I don't think worst a Jet Li all vendors
can be trusted so most

210
00:12:11,250 --> 00:12:14,520
at the mature and use user organizations
we're working with at least

211
00:12:14,520 --> 00:12:17,700
want to have some visibility intake
ownership that risk

212
00:12:17,700 --> 00:12:21,000
and I'm inappropriate medications I'm

213
00:12:21,000 --> 00:12:24,510
if you flip sides go away from defensive
onto offense if

214
00:12:24,510 --> 00:12:27,560
I'm can have a lot of the same messages
ok but

215
00:12:27,560 --> 00:12:33,250
in reverse so I undermining asl or
finding the info next YS a law

216
00:12:33,250 --> 00:12:37,800
kinda working out how to bypass stack
cookies in a particular exploit or

217
00:12:37,800 --> 00:12:41,010
the particular heap implementation that
so expensive

218
00:12:41,010 --> 00:12:45,130
right you know that doesn't come for
free that's your time investigating how

219
00:12:45,130 --> 00:12:45,890
to

220
00:12:45,890 --> 00:12:49,600
can't develop those techniques as we get
to more more

221
00:12:49,600 --> 00:12:52,740
I defense is being present we spend more
time doing

222
00:12:52,740 --> 00:12:56,190
application-specific exploitation
techniques rather than kinda

223
00:12:56,190 --> 00:12:59,900
lean on the a Kiki I P ever goes to the
pop

224
00:12:59,900 --> 00:13:05,170
so we want to maximize you know if we if
foreign goal is exploitation

225
00:13:05,170 --> 00:13:08,200
we want to make it you know that we
spend our time researching those

226
00:13:08,200 --> 00:13:11,300
products which we know we're going to be
relatively trivial to

227
00:13:11,300 --> 00:13:14,530
ultimately exploit if we find

228
00:13:14,530 --> 00:13:17,590
fuck I'm so Danisco back case I

229
00:13:17,590 --> 00:13:22,330
little bit I i appreciate the Christian
Ryan didn't necessarily set out to

230
00:13:22,330 --> 00:13:27,060
fully exploits with a male they may not
have I'm but they didn't achieve its a

231
00:13:27,060 --> 00:13:31,160
post a full disclosure I guess lacks
early last year

232
00:13:31,160 --> 00:13:36,290
it was reported tallest service in the
IRS FTP by FTP daemon

233
00:13:36,290 --> 00:13:39,890
I'm so Christian Ryan it spacey disprove
that

234
00:13:39,890 --> 00:13:43,740
and demonstrated that it was
controllable memory corruption

235
00:13:43,740 --> 00:13:47,140
I'm where they achieve control the
instruction pointer

236
00:13:47,140 --> 00:13:50,350
but they couldn't get option code
execution because it's the presents a

237
00:13:50,350 --> 00:13:51,240
vassal aw

238
00:13:51,240 --> 00:13:54,690
they did not simply no where the party
was to drop into

239
00:13:54,690 --> 00:13:59,140
and then when I can about WX pages and
they couldn't spray effectively

240
00:13:59,140 --> 00:14:02,510
say they've gotta love that work but
they still actually have achieved their

241
00:14:02,510 --> 00:14:06,760
their potential and call I'm and that's
effectively what we want to minimize

242
00:14:06,760 --> 00:14:11,130
when we do this analysis so we take into
how we do it now

243
00:14:11,130 --> 00:14:15,060
so one gonna tease which he walked three
every mitigation

244
00:14:15,060 --> 00:14:18,130
and and how we detect for it I'm

245
00:14:18,130 --> 00:14:22,730
without soulful symbols so the version
of the compiler linker

246
00:14:22,730 --> 00:14:26,160
the link is very easy say you'll see
these tables

247
00:14:26,160 --> 00:14:29,700
I'm extracts on a lot my slides what
they saw

248
00:14:29,700 --> 00:14:34,540
parts of the the marks of p on York of
binary specification

249
00:14:34,540 --> 00:14:37,990
public specification which you can
download and and reach a self

250
00:14:37,990 --> 00:14:42,330
so the version of the link is stamped in
which is relatively easy

251
00:14:42,330 --> 00:14:46,550
and what's more interesting and not
documented

252
00:14:46,550 --> 00:14:51,460
by Mark soft at least is this rich had a
so the top of every windows binary

253
00:14:51,460 --> 00:14:55,690
there is this a it starts with the rich
magic and then as an ex or encoded

254
00:14:55,690 --> 00:14:58,990
blog in not XO recoded blog

255
00:14:58,990 --> 00:15:02,690
I'm they is the compiler version ID

256
00:15:02,690 --> 00:15:06,029
every compiler used Compal every object

257
00:15:06,029 --> 00:15:10,490
the went into that and excusable so
these are nondescript numbers

258
00:15:10,490 --> 00:15:13,770
and you know it's been known about you
know on the internet for a long time

259
00:15:13,770 --> 00:15:14,360
site

260
00:15:14,360 --> 00:15:18,440
2004 kind of the varsity Zeenat when I
picked up

261
00:15:18,440 --> 00:15:21,490
and then it was a for documented in 2008

262
00:15:21,490 --> 00:15:24,950
so is kinda gives you an idea of how
truly

263
00:15:24,950 --> 00:15:28,870
is to ti kogda in some just see shop

264
00:15:28,870 --> 00:15:33,540
I'm say found this and then January 2010

265
00:15:33,540 --> 00:15:36,700
went through mapping exercise because
he's nondescript numbers you don't know

266
00:15:36,700 --> 00:15:37,770
that she's

267
00:15:37,770 --> 00:15:42,270
Visual Studio axle Visual Studio why so
we went through that as a

268
00:15:42,270 --> 00:15:46,550
cover social group went for a map every
purchase Visual Studio every service

269
00:15:46,550 --> 00:15:47,600
pack level

270
00:15:47,600 --> 00:15:52,770
to be up to map these can evolve a tree
ID's to particular compiled versions

271
00:15:52,770 --> 00:15:56,540
I'm and so why do we care again because
that's where the one in the earlier

272
00:15:56,540 --> 00:15:57,300
points

273
00:15:57,300 --> 00:16:01,160
firstly the kind of stack cookies have
improved

274
00:16:01,160 --> 00:16:05,080
compile local variable reordering didn't
come in quite late

275
00:16:05,080 --> 00:16:09,900
on much compiler versions and has also
certain compiled versions

276
00:16:09,900 --> 00:16:14,390
these mitigations weren't present at all
and you'd be surprised to find

277
00:16:14,390 --> 00:16:17,940
this you'll be surprised to hear the
number of times the EC

278
00:16:17,940 --> 00:16:23,480
the outs appointing re is compiled with
Visual Studio 2008

279
00:16:23,480 --> 00:16:27,750
but there is object inside that has
become part of Visual Studio six

280
00:16:27,750 --> 00:16:30,910
so while the outer pointers been
compiled let the latest and greatest

281
00:16:30,910 --> 00:16:35,490
near latest and greatest there are still
some Lexington Park winery object

282
00:16:35,490 --> 00:16:40,020
also present which is useful again for
if we talked in particular functions a

283
00:16:40,020 --> 00:16:43,060
particular functionality

284
00:16:43,060 --> 00:16:46,360
I S a law is extremely tribute to detect

285
00:16:46,360 --> 00:16:50,480
stamped into the p had a again
consulting its debt

286
00:16:50,480 --> 00:16:54,370
is stamped inside these were relatively
trivial I'm

287
00:16:54,370 --> 00:16:58,060
why would say is the best thing marks of
Levitan

288
00:16:58,060 --> 00:17:01,640
is when they've released I'm

289
00:17:01,640 --> 00:17:04,659
they've released a effectively dotnet
rapper P

290
00:17:04,659 --> 00:17:08,130
PE pas a written in at managed a

291
00:17:08,130 --> 00:17:11,720
dotnet rapper say they've done a lot of
heavy lifting for pausing

292
00:17:11,720 --> 00:17:15,449
the P headers originally I protein C

293
00:17:15,449 --> 00:17:19,709
version Wong I didn't support 64 bit and
then try to use

294
00:17:19,709 --> 00:17:23,839
a Microsoft see version which if that's
even 64 bit and that didn't always work

295
00:17:23,839 --> 00:17:25,069
and crashed and then

296
00:17:25,069 --> 00:17:28,209
a fantasy she say shop version which the
a

297
00:17:28,209 --> 00:17:31,330
diesel all the have you left force

298
00:17:31,330 --> 00:17:34,659
a point about that as well and i got
burned by this a

299
00:17:34,659 --> 00:17:40,210
is on 64 bits even though it may say
that binary is not opted in

300
00:17:40,210 --> 00:17:43,419
it doesn't matter you know it's a waste
time zone I'm

301
00:17:43,419 --> 00:17:46,769
because I'd notice for example e-maxx
the 64 bit DLL

302
00:17:46,769 --> 00:17:51,320
doesn't she have this plaque set Shia
has no impact

303
00:17:51,320 --> 00:17:55,429
I'm stack cookies there are three ways

304
00:17:55,429 --> 00:18:00,389
I'm I used to detect them so one is
there is a security

305
00:18:00,389 --> 00:18:03,909
security cookie had a field which isn't
always populated

306
00:18:03,909 --> 00:18:06,999
but it wont tell that we can use if you
have

307
00:18:06,999 --> 00:18:10,899
a deepok appealed E-cash look at the
import table

308
00:18:10,899 --> 00:18:14,240
and see if the CLT debug turkish
President it's another

309
00:18:14,240 --> 00:18:19,090
possible mechanism detection and then
the heuristics approach say

310
00:18:19,090 --> 00:18:24,159
the her stick stuff I recently is
presented back in 2007 while semantic

311
00:18:24,159 --> 00:18:27,669
I'm its affectively a re cheap way for
us to

312
00:18:27,669 --> 00:18:31,190
fingerprint the prologue to nap locks up
the

313
00:18:31,190 --> 00:18:35,539
its tactic implementations for the
different versions so again it gives us

314
00:18:35,539 --> 00:18:39,519
resolution in terms of saying yes there
is stack keys used

315
00:18:39,519 --> 00:18:43,559
it within this binary but between the
very early

316
00:18:43,559 --> 00:18:47,220
of first few versions at least it was a
kid dysfunction resolution

317
00:18:47,220 --> 00:18:51,220
so we can say yes it is stack cookie
protected and it's protected

318
00:18:51,220 --> 00:18:55,679
by you know much officials to 2003's
version stack

319
00:18:55,679 --> 00:18:58,700
cookies so game can I get a fine-grained
I'm

320
00:18:58,700 --> 00:19:02,830
detail if we need it

321
00:19:02,830 --> 00:19:06,610
safe sch you know we only have to worry
about some 32-bit

322
00:19:06,610 --> 00:19:09,629
stamped in the P had a I and

323
00:19:09,629 --> 00:19:14,009
actually you'll see the these had a
field say again it's pretty

324
00:19:14,009 --> 00:19:17,230
self-explanatory when you can start
taking in

325
00:19:17,230 --> 00:19:21,369
and this was quite up an interesting
Park

326
00:19:21,369 --> 00:19:24,980
so the first part iv: dish last year

327
00:19:24,980 --> 00:19:28,419
to load the configuration directory I'm

328
00:19:28,419 --> 00:19:32,259
if the size is wrong a

329
00:19:32,259 --> 00:19:36,009
I it basie ops I'll safe SCH

330
00:19:36,009 --> 00:19:39,769
which is a a very kind of a weird
anomaly more nothing else he was a park

331
00:19:39,769 --> 00:19:41,240
in the windows loader

332
00:19:41,240 --> 00:19:44,590
I'm the problem walls is thats

333
00:19:44,590 --> 00:19:48,110
I the Visual Studio Visual C++ runtime

334
00:19:48,110 --> 00:19:51,159
from 2003 RTM

335
00:19:51,159 --> 00:19:54,769
has the wrong size so any point
recompiled

336
00:19:54,769 --> 00:19:58,240
with this early version of Visual Studio
will actually have

337
00:19:58,240 --> 00:20:03,159
a big chunk of DLL that you can jump to
using like a safe SCH over I

338
00:20:03,159 --> 00:20:06,299
with out tripping over safe SCH or

339
00:20:06,299 --> 00:20:10,399
using ishi right action have a safe SCH
so we can

340
00:20:10,399 --> 00:20:15,919
I'm again flag binaries so good example
here for binary that us up this

341
00:20:15,919 --> 00:20:19,860
is party the s8 Klein is compiled with
this old version

342
00:20:19,860 --> 00:20:23,429
and his available to this book

343
00:20:23,429 --> 00:20:27,749
I'm sums then start getting into some
other kinda less well-known aspects I

344
00:20:27,749 --> 00:20:28,320
guess

345
00:20:28,320 --> 00:20:31,570
say in the PE file there is the

346
00:20:31,570 --> 00:20:34,989
default process heat flax which I've
never seen be anything

347
00:20:34,989 --> 00:20:38,110
parts and every right but in theory it
could be

348
00:20:38,110 --> 00:20:41,259
read my execute part of all across the
process I

349
00:20:41,259 --> 00:20:45,470
so as a result we can again flack pine
trees that the whole

350
00:20:45,470 --> 00:20:50,019
misconfigured in that way we have the
shared section problem

351
00:20:50,019 --> 00:20:54,169
so these would be mapped across
different instances are the same process

352
00:20:54,169 --> 00:20:58,100
I'm across possession different uses and
so we will flag

353
00:20:58,100 --> 00:21:01,429
for example those require XQ read/write

354
00:21:01,429 --> 00:21:05,470
and shouldn't be I'm and then a as I
mentioned earlier this number defensive

355
00:21:05,470 --> 00:21:06,309
API's

356
00:21:06,309 --> 00:21:09,860
say the way that we do is develop course
keeps a information

357
00:21:09,860 --> 00:21:14,710
and a particularly they specifically
pasta prima to terminate he corruption

358
00:21:14,710 --> 00:21:18,739
and as mentioned earlier as well a
neighboring that forever

359
00:21:18,739 --> 00:21:22,009
site developers are calling these we
know that the public on top of their

360
00:21:22,009 --> 00:21:23,340
game and

361
00:21:23,340 --> 00:21:26,799
and he's from an attack in perspective
step away

362
00:21:26,799 --> 00:21:30,710
I and the STL APIs is a set a 145

363
00:21:30,710 --> 00:21:34,009
them I'm and we can do offensively quit

364
00:21:34,009 --> 00:21:37,950
so this is a good example all one of
those APIs which much

365
00:21:37,950 --> 00:21:42,119
doesn't document the behavior all but
yet undermines summit these defensive

366
00:21:42,119 --> 00:21:43,169
mechanisms

367
00:21:43,169 --> 00:21:46,970
so if the develop uses virtual lock it
will not be

368
00:21:46,970 --> 00:21:50,399
opted into lhasa law like if you search
a lot directly

369
00:21:50,399 --> 00:21:54,840
problem I'll call similar you don't
benefit from Nassau

370
00:21:54,840 --> 00:21:58,470
and you be surprising number of
developers directly call

371
00:21:58,470 --> 00:22:03,649
virtual lock and then with relax a key

372
00:22:03,649 --> 00:22:07,559
Google obviously knew about this book
because if you look at the crime source

373
00:22:07,559 --> 00:22:11,340
they've written kind of a pseudo rapper

374
00:22:11,340 --> 00:22:15,559
where they tryin kinda add some entropy
to the addresses which returned by

375
00:22:15,559 --> 00:22:16,970
virtual lock

376
00:22:16,970 --> 00:22:20,499
and that you have a park in their
implementation which is as

377
00:22:20,499 --> 00:22:24,379
you kind of get over cut the initial
allocation so the

378
00:22:24,379 --> 00:22:27,779
say the first 100 Magal 200 make at the

379
00:22:27,779 --> 00:22:31,230
amounts a and speak drops off
significantly

380
00:22:31,230 --> 00:22:35,169
I'm say I guess at the will be the
beginning of this year

381
00:22:35,169 --> 00:22:39,059
I'm boss where is working somewhere else
we released a

382
00:22:39,059 --> 00:22:42,529
a secure version a virtual lock for
Sherlock Holmes chorax

383
00:22:42,529 --> 00:22:47,179
I'm which uses a out with them where it
tries to do top-down bottom-up

384
00:22:47,179 --> 00:22:50,720
randomization and some other stuff to
try an increase it I'm so it's going to

385
00:22:50,720 --> 00:22:51,739
be aware of and

386
00:22:51,739 --> 00:22:55,080
you'd be surprised to when I was testing

387
00:22:55,080 --> 00:22:58,820
this I guess again sparks I office

388
00:22:58,820 --> 00:23:02,190
Adobe again with vendors that had

389
00:23:02,190 --> 00:23:07,009
use virtual lock directly mapped pages
read write and execute

390
00:23:07,009 --> 00:23:12,159
say yeah it gives us a target point fro
for all exploitation

391
00:23:12,159 --> 00:23:15,590
I as I mentioned light light light
breeze the recalls

392
00:23:15,590 --> 00:23:20,149
of the DLL planting problem so I can
come analyzing that

393
00:23:20,149 --> 00:23:24,119
I'm say these all the mitigations
affectively swat we check is disappoint

394
00:23:24,119 --> 00:23:26,539
reviews load library crate process

395
00:23:26,539 --> 00:23:30,149
yes it does so is potentially dangerous
or it's potentially

396
00:23:30,149 --> 00:23:33,369
former Paul but then we checked that
doesn't

397
00:23:33,369 --> 00:23:37,330
does it not also then use these other
three API calls cuz they said the new

398
00:23:37,330 --> 00:23:38,539
API's

399
00:23:38,539 --> 00:23:42,440
the newish API so much introduced that
would mitigate allow planting

400
00:23:42,440 --> 00:23:46,360
I'm and there's also some other British
aways by the registry that we can

401
00:23:46,360 --> 00:23:47,779
mitigate these vulnerabilities

402
00:23:47,779 --> 00:23:51,239
which all discussing teton a slight
aside

403
00:23:51,239 --> 00:23:55,239
puse integrity level I'm is easily
retrievable

404
00:23:55,239 --> 00:23:58,529
from the point is manifest sorry for
those on familiar

405
00:23:58,529 --> 00:24:01,669
Windows binaries they have coded they

406
00:24:01,669 --> 00:24:06,019
can also have resources so for example
graphics icons

407
00:24:06,019 --> 00:24:10,049
eccentrics ACTRA these are stored in
effect to be resource sections

408
00:24:10,049 --> 00:24:13,119
one of these resource sections is simply
this: well-defined

409
00:24:13,119 --> 00:24:16,269
I'm XML which effectively will

410
00:24:16,269 --> 00:24:20,840
instructs the window instructs Windows
12 not pop up that dialogue saying

411
00:24:20,840 --> 00:24:25,049
I need to elevates you authorize me I'm
so we'll check

412
00:24:25,049 --> 00:24:29,029
I'm the level that needs to whether it
wants you I access

413
00:24:29,029 --> 00:24:34,259
I'm you I access is very dangerous and
very rarely use thankfully

414
00:24:34,259 --> 00:24:38,809
it is able to see that secure greyed out
that stops a partner has you access

415
00:24:38,809 --> 00:24:40,169
which is granted

416
00:24:40,169 --> 00:24:43,549
whenever the USC prom comes out that
actually is generated from Secure

417
00:24:43,549 --> 00:24:44,309
Desktop

418
00:24:44,309 --> 00:24:48,029
and are not meant to be able to
programmatically its ranks that I'll ok

419
00:24:48,029 --> 00:24:51,169
always you could just authorize
everything wanted to elevate

420
00:24:51,169 --> 00:24:54,539
I'm say if it does have that's it's a
tree it can

421
00:24:54,539 --> 00:24:59,389
its route that I love implicate 3
something to be mindful of

422
00:24:59,389 --> 00:25:03,850
I'm and then there's some dotnet
security elements a strong name checks

423
00:25:03,850 --> 00:25:05,859
allow partially trusted callers

424
00:25:05,859 --> 00:25:09,590
I'm mice device that on that can I say

425
00:25:09,590 --> 00:25:13,340
doesn't don't really use the sand and
not and I think significance write home

426
00:25:13,340 --> 00:25:14,169
about

427
00:25:14,169 --> 00:25:18,029
if you all can have in a very hostile
environment I guess

428
00:25:18,029 --> 00:25:21,799
you'd want to lease understand whether
or not the speeches had been used

429
00:25:21,799 --> 00:25:25,580
I'm more interestingly for dotnet
assemblies

430
00:25:25,580 --> 00:25:30,139
is we want to check weather neue has
unmanaged code in

431
00:25:30,139 --> 00:25:36,090
so is possible in top net la raza manage
language to effectively undermine dotnet

432
00:25:36,090 --> 00:25:39,559
mismanaged nature I'm and have your
inbox is an actual

433
00:25:39,559 --> 00:25:43,429
lead to memory corruption again it's
kind of a rare

434
00:25:43,429 --> 00:25:47,210
is ready to be wrapped to do kinda
actually make terror war horrendous

435
00:25:47,210 --> 00:25:48,289
mistakes like that

436
00:25:48,289 --> 00:25:52,279
they can weaken it identify at least if
the binaries interested

437
00:25:52,279 --> 00:25:56,600
interesting to Aus up to you for example
memory corruption phone abilities

438
00:25:56,600 --> 00:26:00,200
by the president's all unmanaged

439
00:26:00,200 --> 00:26:04,419
a we then also wanted to start detecting

440
00:26:04,419 --> 00:26:08,710
I am which Windows 8 was in preview I
guess at the time

441
00:26:08,710 --> 00:26:13,320
doing this work and windows 8 for those
views on familia

442
00:26:13,320 --> 00:26:16,710
I'm has very kind of similar

443
00:26:16,710 --> 00:26:20,009
I model to the Antti capabilities model

444
00:26:20,009 --> 00:26:24,600
so there's like capability called my pic
to access the pictures or all similar

445
00:26:24,600 --> 00:26:28,609
I'm and those who run within these
continue to find Sam boxes which are far

446
00:26:28,609 --> 00:26:30,239
more strict if than the

447
00:26:30,239 --> 00:26:34,559
kinda view AC model I'm and so I was
interested initially

448
00:26:34,559 --> 00:26:37,649
all kinda how it now use

449
00:26:37,649 --> 00:26:41,730
it's a Windows 8.0 should run in a
sandbox versus just be it kinda missed

450
00:26:41,730 --> 00:26:44,200
and windows binary

451
00:26:44,200 --> 00:26:47,609
say effectively in the DLL
characteristic

452
00:26:47,609 --> 00:26:50,739
which is part of the PE head of
effectively says

453
00:26:50,739 --> 00:26:53,779
on a Windows 8.3 and I should be sample
text

454
00:26:53,779 --> 00:26:58,190
and actually in the manifest which is
the same manifest that we get you a seat

455
00:26:58,190 --> 00:26:59,019
data from

456
00:26:59,019 --> 00:27:02,480
then lists the specific capabilities
that the binary actually needs to

457
00:27:02,480 --> 00:27:03,419
function

458
00:27:03,419 --> 00:27:07,419
so can we can you make those pretty easy
and if you want to kinda

459
00:27:07,419 --> 00:27:12,309
I'm beaded the were cut down on that or
at least documenting

460
00:27:12,309 --> 00:27:16,299
visible place a I'm force integrity

461
00:27:16,299 --> 00:27:20,730
is one of these interesting properties
which again is rarely used

462
00:27:20,730 --> 00:27:24,320
so will force integrity says so Windows
has a strange behavior

463
00:27:24,320 --> 00:27:27,879
if a a point reassigned

464
00:27:27,879 --> 00:27:31,669
and the beta in the signatures don't
match

465
00:27:31,669 --> 00:27:35,149
windows will treat as unsigned and
continue to light

466
00:27:35,149 --> 00:27:38,989
which is you know relatively strange be
contaminated it's a

467
00:27:38,989 --> 00:27:42,070
little bit of corruption ever anyone or
something

468
00:27:42,070 --> 00:27:45,649
say but they introduce a spike would
force integrity which says

469
00:27:45,649 --> 00:27:50,009
effectively if there is any difference
between the signatures then refused to

470
00:27:50,009 --> 00:27:50,789
loud

471
00:27:50,789 --> 00:27:56,399
and the anytime you actually see this in
the crypto libraries generally

472
00:27:56,399 --> 00:27:59,759
I'm pickin we can have to tech for his
presence and flag

473
00:27:59,759 --> 00:28:02,759
and when we pull out some other
information and this is more

474
00:28:02,759 --> 00:28:06,070
useful to researches than is to vendors

475
00:28:06,070 --> 00:28:09,320
we pull out for example a company name
fall version

476
00:28:09,320 --> 00:28:12,350
I'm who signed it and the signature type

477
00:28:12,350 --> 00:28:15,859
and what you'll see sometimes is a
significant disparity between

478
00:28:15,859 --> 00:28:19,229
who wrote the colors and who signed the
code

479
00:28:19,229 --> 00:28:24,279
and CD have to wonder these vendors I
just signing of a tree by injuries from

480
00:28:24,279 --> 00:28:27,970
of its resources whether actually due to
a do any

481
00:28:27,970 --> 00:28:33,059
due diligence site questions martz's

482
00:28:33,059 --> 00:28:37,600
so 1 I'm gonna cover now is I hate
repeating other people's work

483
00:28:37,600 --> 00:28:40,669
just for the sake you know I'm not one
of those people wants to make a better

484
00:28:40,669 --> 00:28:41,869
we'll for the sake

485
00:28:41,869 --> 00:28:46,450
sigh I try and avoid that works all
possible so I thought I'd go through and

486
00:28:46,450 --> 00:28:49,649
recognize and appreciate what others
have done in this field

487
00:28:49,649 --> 00:28:53,389
and why still kinda continue to battle
say

488
00:28:53,389 --> 00:28:57,090
a looking glass came out gas in about
2003

489
00:28:57,090 --> 00:29:02,409
with a dot net based peace can a I'm and
it looks for things like

490
00:29:02,409 --> 00:29:05,629
St at bad STL API usage I

491
00:29:05,629 --> 00:29:09,139
and a couple a father things like was
asl are enabled

492
00:29:09,139 --> 00:29:12,710
was it that Naples I'm but it was quite
minimal when it's checks

493
00:29:12,710 --> 00:29:16,710
and they'll see didn't develop any
further you know is a good start it was

494
00:29:16,710 --> 00:29:19,529
relatively interesting as a concept

495
00:29:19,529 --> 00:29:22,600
I'm Microsoft then came out

496
00:29:22,600 --> 00:29:26,899
been scapin in Scopus awesome if you
have the source code

497
00:29:26,899 --> 00:29:30,690
or you have the private symbols to a
binary but it didn't solve committee

498
00:29:30,690 --> 00:29:31,879
each I had

499
00:29:31,879 --> 00:29:35,600
I'm say it they do a lot of wife
discussed

500
00:29:35,600 --> 00:29:39,289
I but they don't do it all by any means
but also by

501
00:29:39,289 --> 00:29:42,519
virtue of the fact that they have I'm
the

502
00:29:42,519 --> 00:29:45,549
debug symbols they cash do some things
that

503
00:29:45,549 --> 00:29:49,440
at the moment I've not worked out a way
to do without so without the symbols

504
00:29:49,440 --> 00:29:52,869
so for example they can check whether or
not

505
00:29:52,869 --> 00:29:57,279
the label stack cookie parable is
actually initialize properly

506
00:29:57,279 --> 00:30:01,109
because a I guess they've seen examples
where the stack yeah she's not

507
00:30:01,109 --> 00:30:02,859
initialize a random value

508
00:30:02,859 --> 00:30:06,519
which would be horrendous you know if
you catch those they felt she worked out

509
00:30:06,519 --> 00:30:07,289
a way

510
00:30:07,289 --> 00:30:10,639
a that they they conceded act as a
private symbols but we don't

511
00:30:10,639 --> 00:30:14,249
we don't know whether parable is
necessary I'm and also

512
00:30:14,249 --> 00:30:17,249
by virtue of the fact that private
symbols they can check

513
00:30:17,249 --> 00:30:20,809
and the ATL versions in use there were a
number of golf

514
00:30:20,809 --> 00:30:24,580
what there was at least one for mobile
version and I can pull down flack

515
00:30:24,580 --> 00:30:27,799
basis at you know the negative is unique
private symbols

516
00:30:27,799 --> 00:30:31,059
which are always available I

517
00:30:31,059 --> 00:30:34,359
save a seat now we can archive discuss
or show I'm

518
00:30:34,359 --> 00:30:37,720
how I did say I'm

519
00:30:37,720 --> 00:30:42,899
just to show that there's nothing up
this up my sleeves

520
00:30:42,899 --> 00:30:48,859
so we can run on and

521
00:30:48,859 --> 00:30:54,619
a baby apps

522
00:30:54,619 --> 00:30:57,799
I was picking a daily because they were
lonely at the top

523
00:30:57,799 --> 00:31:02,729
if I can actually fun so it's not it's
nothing particular against a daily

524
00:31:02,729 --> 00:31:07,649
say is running the a quick scan now uses
its relatively quick

525
00:31:07,649 --> 00:31:14,649
what does

526
00:31:16,929 --> 00:31:20,879
I went down to this point if I could a
call

527
00:31:20,879 --> 00:31:25,320
so one is running effectively or she is
the part file name with my pasta

528
00:31:25,320 --> 00:31:26,529
correctly

529
00:31:26,529 --> 00:31:29,539
is it fits the bill 64-bit version I'm

530
00:31:29,539 --> 00:31:32,700
and then we can see the compiler
versions I discussed

531
00:31:32,700 --> 00:31:35,830
say what we can see is you know I'm

532
00:31:35,830 --> 00:31:39,259
Visual Studio 2005 sp1 yes

533
00:31:39,259 --> 00:31:42,869
good said the fact that it's red must me

534
00:31:42,869 --> 00:31:45,929
there is a there's an earlier version
somewhere on

535
00:31:45,929 --> 00:31:50,609
along the lines liza liking

536
00:31:50,609 --> 00:31:55,940
great can see why there must be busy she
is sick somewhere along the line at

537
00:31:55,940 --> 00:31:59,239
so we get the compiler versions out and
why don't we

538
00:31:59,239 --> 00:32:02,629
need to worry about them I'm again what
we can see

539
00:32:02,629 --> 00:32:09,340
he is a was not the they don't use sehn
if they do with more you save this %eh

540
00:32:09,340 --> 00:32:14,820
disease and access law stack ickies the
USC integrity that when you can see here

541
00:32:14,820 --> 00:32:19,460
this really important these why was
saying around trying to

542
00:32:19,460 --> 00:32:22,700
I'm make tools easy to use a

543
00:32:22,700 --> 00:32:26,559
don't have to be an expert this is was
designed to be used by

544
00:32:26,559 --> 00:32:31,129
I'm software testers so they could lead
she won in the end build

545
00:32:31,129 --> 00:32:35,580
and they would understand green is good
in red is back right so

546
00:32:35,580 --> 00:32:39,580
a let me just find event are looking for
so you can see here

547
00:32:39,580 --> 00:32:43,080
arce at the moment

548
00:32:43,080 --> 00:32:46,129
so can see like this is a great example
say Adobe

549
00:32:46,129 --> 00:32:50,159
is signing software from right
hemisphere

550
00:32:50,159 --> 00:32:53,409
environmental systems IBM

551
00:32:53,409 --> 00:32:57,659
yeah I will have a source codes with a
cider but we see the ball Marseille

552
00:32:57,659 --> 00:33:00,970
I'm that well known trusted security
company

553
00:33:00,970 --> 00:33:04,450
and we see the actually they're the
worst apparently

554
00:33:04,450 --> 00:33:08,470
on the actual use over love these kinda
practicum pilot defenses

555
00:33:08,470 --> 00:33:11,659
I do appreciate that the fact it may be
an old version

556
00:33:11,659 --> 00:33:15,399
the library but it's actually in use by
product vendor right say this car keys

557
00:33:15,399 --> 00:33:17,009
you an idea on how we use

558
00:33:17,009 --> 00:33:20,059
I'm such a tool for targeting

559
00:33:20,059 --> 00:33:23,190
them guy free and we can see

560
00:33:23,190 --> 00:33:26,590
no virtual of keys used more than you
think

561
00:33:26,590 --> 00:33:31,460
I'm should be you can see force
integrity is typically

562
00:33:31,460 --> 00:33:34,859
and negative executor she got the idea
and

563
00:33:34,859 --> 00:33:37,879
and we can click on any of these in you
know

564
00:33:37,879 --> 00:33:41,309
view the band API usage they're doing
acceptor say

565
00:33:41,309 --> 00:33:45,559
you can see it as easy as relatively
accessible

566
00:33:45,559 --> 00:33:49,769
okay that I'm if we move beyond the
binaries

567
00:33:49,769 --> 00:33:54,009
I'm we then also have to start looking
in the registry if you want to deploy

568
00:33:54,009 --> 00:33:57,710
some these defenses we want to check
their existence

569
00:33:57,710 --> 00:34:01,919
so and their of three in the image
execution options

570
00:34:01,919 --> 00:34:07,889
I registry key there you can create some
key which is the name to the binary

571
00:34:07,889 --> 00:34:11,490
and an NR three say C-dot CWD lol

572
00:34:11,490 --> 00:34:15,409
legal win DLL search mitigates the
Italian planting

573
00:34:15,409 --> 00:34:20,040
I mitigate option mitigation options can
be used to force

574
00:34:20,040 --> 00:34:24,540
address space layout randomization on
for binary something typically opt in

575
00:34:24,540 --> 00:34:27,900
and then we have arms Asafa ch

576
00:34:27,900 --> 00:34:30,960
overwrite ch over right protection

577
00:34:30,960 --> 00:34:35,490
I'm which is another a ch defensive
mechanism which can be opted

578
00:34:35,490 --> 00:34:39,500
in as well on desktop on but fall on so

579
00:34:39,500 --> 00:34:45,070
I'm say that's kinda like that shows you
how Hardy is facing what you need to

580
00:34:45,070 --> 00:34:45,960
think about

581
00:34:45,960 --> 00:34:49,500
it's a hobby their loss to think back
you're trying to defend binaries

582
00:34:49,500 --> 00:34:53,389
even with all that these they're still a
very popular prevalent

583
00:34:53,390 --> 00:34:56,600
kinda typeof Co construct the cannoli

584
00:34:56,600 --> 00:35:00,680
to easy instruction points right rights
which we still have mitigated

585
00:35:00,680 --> 00:35:05,700
and it simply this and you can refer to
the slides if you take this example

586
00:35:05,700 --> 00:35:08,930
and compiling even with the new version
of Visual Studio

587
00:35:08,930 --> 00:35:12,050
and supply lot surveys I am

588
00:35:12,050 --> 00:35:15,410
on the command line and press Enter you
will achieve any IP over right simply

589
00:35:15,410 --> 00:35:18,220
virus can a C-plus must be table over
right

590
00:35:18,220 --> 00:35:21,220
and I'm very surprised that we have yet
to mitigate this class so

591
00:35:21,220 --> 00:35:24,470
issue compile a level with cookies or
something similar

592
00:35:24,470 --> 00:35:28,630
and are so it's bear in mind so if we
move onto

593
00:35:28,630 --> 00:35:31,790
I am so yes my world has been with us
for a long time

594
00:35:31,790 --> 00:35:35,170
I was very fortunate room to spend some
time working on

595
00:35:35,170 --> 00:35:39,010
QNX and looking at some other problems
there as well

596
00:35:39,010 --> 00:35:42,240
so and there is a similar tall

597
00:35:42,240 --> 00:35:47,030
I'm from track it took the for analyzing
elf binary search X for example is the

598
00:35:47,030 --> 00:35:49,740
elf binary using danger say PRI's

599
00:35:49,740 --> 00:35:53,590
to opt into is it like configured
compiled with position

600
00:35:53,590 --> 00:35:58,190
independent executions as you say it's a
law and some are other things

601
00:35:58,190 --> 00:36:01,460
I'm but there was this interesting
property I'm

602
00:36:01,460 --> 00:36:05,580
about binary so I have wasn't aware of
and I contribute the patch back in to

603
00:36:05,580 --> 00:36:06,880
check sec

604
00:36:06,880 --> 00:36:11,330
a which is in an elf file you can have

605
00:36:11,330 --> 00:36:15,700
in one of the a one of the sections cool
are powerful Ron Paul

606
00:36:15,700 --> 00:36:18,930
named a literally fall system part of

607
00:36:18,930 --> 00:36:22,340
and the file system path to be absolute
or relative

608
00:36:22,340 --> 00:36:26,780
and interestingly I'm that overrides any
load options

609
00:36:26,780 --> 00:36:31,100
sale I LD pre like we all know about so
if you had a suet binary

610
00:36:31,100 --> 00:36:34,640
for example reference to Paul of which
you control

611
00:36:34,640 --> 00:36:39,800
or create their recovery provides a wave
injecting libros into

612
00:36:39,800 --> 00:36:43,420
piracy wouldn't otherwise be able to if
you couldn't right as route to the come

613
00:36:43,420 --> 00:36:45,140
to shed light be directory

614
00:36:45,140 --> 00:36:49,850
I'm so I i released the check also the
check update went out with the patches

615
00:36:49,850 --> 00:36:50,450
in

616
00:36:50,450 --> 00:36:54,310
and someone told me afterwards been too
did quite big patch afterwards cuz I

617
00:36:54,310 --> 00:36:55,620
require a surprising number

618
00:36:55,620 --> 00:36:59,430
wineries again that we're using Ron Paul
for all

619
00:36:59,430 --> 00:37:02,600
I'm say some experi- mine anyway when
analyzing

620
00:37:02,600 --> 00:37:06,759
unique see honorees up

621
00:37:06,760 --> 00:37:10,480
say yeah I guess want to say from all
this

622
00:37:10,480 --> 00:37:14,680
is I could have documented the four
process the reasoning

623
00:37:14,680 --> 00:37:17,830
how is bill but it doesn't have to be
rocket science right

624
00:37:17,830 --> 00:37:22,170
for that we don't have to make tools
require a a PhD in rocket science to

625
00:37:22,170 --> 00:37:23,330
actually use

626
00:37:23,330 --> 00:37:27,300
I'm I think they can help significantly
with the comp insurance assessment work

627
00:37:27,300 --> 00:37:28,390
that we made to

628
00:37:28,390 --> 00:37:32,730
I there's an end-use organization
consultant researches whatever

629
00:37:32,730 --> 00:37:35,920
and I'll see if you all an attack a

630
00:37:35,920 --> 00:37:40,070
I'm can help talk identification might
spend your pennies

631
00:37:40,070 --> 00:37:43,160
without the symbols I'm

632
00:37:43,160 --> 00:37:46,170
hoops I'm why would say it's not done
right

633
00:37:46,170 --> 00:37:49,810
Microsoft keep innovating and was
playing catch-up

634
00:37:49,810 --> 00:37:54,560
so the slash STL switch it was
introduced in the latest version of

635
00:37:54,560 --> 00:37:55,780
Visual Studio A

636
00:37:55,780 --> 00:37:58,930
I'm introduces some seven new
protections which

637
00:37:58,930 --> 00:38:02,320
all very subtle and they kind of
detecting now as well

638
00:38:02,320 --> 00:38:05,380
say it never finishes Inc

639
00:38:05,380 --> 00:38:08,510
say that's it pretty much for me

640
00:38:08,510 --> 00:38:13,670
are there any questions

641
00:38:13,670 --> 00:38:18,240
one question thank you Chris

642
00:38:18,240 --> 00:38:21,970
ok and I we get access to the tool I
just email me

643
00:38:21,970 --> 00:38:25,320
and Allah eek I was trying to make my
millions by selling it

644
00:38:25,320 --> 00:38:29,240
and I've realized that that wasn't gonna
happen because now I'm by security souls

645
00:38:29,240 --> 00:38:32,540
I'm so I just so just email me

646
00:38:32,540 --> 00:38:36,110
and Allah author copy over you re have
employees with a copy anyway

647
00:38:36,110 --> 00:38:40,590
ok and

648
00:38:40,590 --> 00:38:43,680
any other questions okay well

649
00:38:43,680 --> 00:38:46,990
and that he was just a he only has a
copy if

650
00:38:46,990 --> 00:38:50,680
I'm if you have any questions afterwards
I'll see if the feel free to email me a

651
00:38:50,680 --> 00:38:51,850
happy answer them

652
00:38:51,850 --> 00:38:54,970
I'm slides all will be available
instantaneously

653
00:38:54,970 --> 00:38:58,700
as a set if your copy that's all up in
this working

654
00:38:58,700 --> 00:39:05,700
so thanks very much for attention have
good day

655
00:39:18,210 --> 00:39:19,980
this

656
00:39:19,980 --> 00:39:26,980
sleep

