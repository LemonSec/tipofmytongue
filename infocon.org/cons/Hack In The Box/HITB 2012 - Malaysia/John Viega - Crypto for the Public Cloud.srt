1
00:00:06,290 --> 00:00:10,560
ok face

2
00:00:10,560 --> 00:00:12,360
sir

3
00:00:12,360 --> 00:00:14,290
yes

4
00:00:14,290 --> 00:00:21,290
schools

5
00:00:25,640 --> 00:00:30,649
thanks a lot everybody it's great to be
back in

6
00:00:30,649 --> 00:00:34,030
KL sir great to be here and

7
00:00:34,030 --> 00:00:37,399
wanna talk to you today is about to

8
00:00:37,399 --> 00:00:40,860
how to make the cloud more secure
through

9
00:00:40,860 --> 00:00:44,230
better cryptography so

10
00:00:44,230 --> 00:00:48,070
I don't think it's any surprise to
anybody here that the world wants to

11
00:00:48,070 --> 00:00:49,320
move to the cloud

12
00:00:49,320 --> 00:00:54,520
if you look at numbers from analysts the
they're all saying that

13
00:00:54,520 --> 00:00:59,650
people were are moving to the cloud and
rose and because I love

14
00:00:59,650 --> 00:01:04,500
no iPhone applications Android
applications also using the cloud for

15
00:01:04,500 --> 00:01:08,520
data storage it's becoming the where the
the ball cover applications are

16
00:01:08,520 --> 00:01:12,790
but on the other hand a most the

17
00:01:12,790 --> 00:01:18,079
people in the enterprise also say that
the cloud is it makes them very nervous

18
00:01:18,079 --> 00:01:22,590
that security is the top a reason why
they're hesitant about the cloud or

19
00:01:22,590 --> 00:01:23,840
won't move to the cloud

20
00:01:23,840 --> 00:01:27,560
and that the real worry about to

21
00:01:27,560 --> 00:01:33,250
security is this if I'm a cloud provider
and I've got all your data sitting on a

22
00:01:33,250 --> 00:01:34,100
server

23
00:01:34,100 --> 00:01:38,350
I if that box its own then

24
00:01:38,350 --> 00:01:41,570
everybody's date is compromised at the
same time and

25
00:01:41,570 --> 00:01:45,770
that could have big consequences to to a
business

26
00:01:45,770 --> 00:01:49,060
so how people deal with this problem
today

27
00:01:49,060 --> 00:01:52,070
they're a bunch away so the first
solution is

28
00:01:52,070 --> 00:01:56,710
not to use the cloud of course in a lot
for big companies are still in this camp

29
00:01:56,710 --> 00:01:59,159
specially large financial firms

30
00:01:59,159 --> 00:02:04,119
but surprising number people just like
to stick their head in the sand and

31
00:02:04,119 --> 00:02:07,450
leap into the cloud because you know it
makes them

32
00:02:07,450 --> 00:02:10,799
the you know it's cheaper in it

33
00:02:10,799 --> 00:02:14,989
allows them to focus on other things you
know there there are other solutions

34
00:02:14,989 --> 00:02:15,900
though

35
00:02:15,900 --> 00:02:20,189
you can do keep all your dating cryptid
in the clout

36
00:02:20,189 --> 00:02:24,349
a and then d crypt it when it gets to
the clients

37
00:02:24,349 --> 00:02:28,480
there are a lot of problems so this I'm
gonna use

38
00:02:28,480 --> 00:02:33,980
a is an example email archiving a couple
times to this presentation imagine that

39
00:02:33,980 --> 00:02:35,099
you've got

40
00:02:35,099 --> 00:02:38,889
terabytes a female up on the cloud

41
00:02:38,889 --> 00:02:43,269
and now you wanna go search through all
that email were fits all the crypt in

42
00:02:43,269 --> 00:02:43,519
the

43
00:02:43,459 --> 00:02:46,609
encrypt it in the cloud and you need to
D crib to

44
00:02:46,609 --> 00:02:51,829
on your PC in order to search terabytes
worth the female you have to pull it all

45
00:02:51,829 --> 00:02:53,299
down your laptop

46
00:02:53,299 --> 00:02:57,799
d cryptic there and obviously that
doesn't make any sense to anybody so

47
00:02:57,799 --> 00:03:01,109
that's not really a great solution and
so

48
00:03:01,109 --> 00:03:04,799
people don't really do this plus
obviously the vendor would

49
00:03:04,799 --> 00:03:07,980
would generally have to supported as
well

50
00:03:07,980 --> 00:03:12,049
so a4 Shin is to

51
00:03:12,049 --> 00:03:15,739
actually encrypt server-side and

52
00:03:15,739 --> 00:03:18,919
there are other you a buncha solutions

53
00:03:18,919 --> 00:03:22,370
the look like this so for instance a

54
00:03:22,370 --> 00:03:27,419
couple companies provide a boxes that
allow for

55
00:03:27,419 --> 00:03:31,459
multi-tenant disk encryption

56
00:03:31,459 --> 00:03:34,909
this level encryption and the

57
00:03:34,909 --> 00:03:38,499
basically the idea is that

58
00:03:38,499 --> 00:03:42,989
win you identify a user you've got their
password or what other

59
00:03:42,989 --> 00:03:47,419
whatever credential that's used to baad
crypt all that

60
00:03:47,419 --> 00:03:52,459
users data on an as needed basis the
problems though with this

61
00:03:52,459 --> 00:03:56,010
II you know all your keys are still
sitting over there

62
00:03:56,010 --> 00:03:59,900
I and you know you can provide more
separation

63
00:03:59,900 --> 00:04:03,620
from your application to the keys but
you still have

64
00:04:03,620 --> 00:04:07,189
a little bit over concern that you just
shifting the problem around

65
00:04:07,189 --> 00:04:11,309
by you know the solutions do work pretty
well if

66
00:04:11,309 --> 00:04:15,219
if you handled improperly

67
00:04:15,219 --> 00:04:18,609
the %uh the biggest challenge for a lot
of people is

68
00:04:18,609 --> 00:04:23,250
the solutions are also a ridiculously
expensive so very few cloud providers

69
00:04:23,250 --> 00:04:24,870
are actually using them in

70
00:04:24,870 --> 00:04:28,000
integrating them into their solution so

71
00:04:28,000 --> 00:04:32,230
that basically is the problem if I'm
using

72
00:04:32,230 --> 00:04:36,930
I gmail from my email there's

73
00:04:36,930 --> 00:04:40,520
no way that a I can

74
00:04:40,520 --> 00:04:45,250
benefit from them encrypting all my data
because they're not doing it they're not

75
00:04:45,250 --> 00:04:47,020
giving it to me is an option

76
00:04:47,020 --> 00:04:51,560
I can't even pay for so the fist
solution which is what we're gonna talk

77
00:04:51,560 --> 00:04:52,830
about today

78
00:04:52,830 --> 00:04:56,430
is in cryptid search the idea is

79
00:04:56,430 --> 00:05:01,680
being able to actually encrypt all your
stuff

80
00:05:01,680 --> 00:05:06,830
leave it on the server and search it on
the server even though it's actually

81
00:05:06,830 --> 00:05:08,590
still in cryptid

82
00:05:08,590 --> 00:05:14,060
so you know if if somebody sends you an
email it's gonna go to the server

83
00:05:14,060 --> 00:05:19,630
but I in are new scenario what's
actually going to happen

84
00:05:19,630 --> 00:05:23,070
is there that it now was going to go to
a proxy first

85
00:05:23,070 --> 00:05:28,040
that will encrypt the email an encrypted
version in the mail

86
00:05:28,040 --> 00:05:33,240
will go to to the cloud service that
you're using

87
00:05:33,240 --> 00:05:36,820
alright so

88
00:05:36,820 --> 00:05:40,230
happens when I actually want to read my
mail what iight

89
00:05:40,230 --> 00:05:44,890
if I a at talked to my little proxy

90
00:05:44,890 --> 00:05:48,630
then I get a legitimate version of the
email

91
00:05:48,630 --> 00:05:52,900
but if I skip the proxy in talk directly
to my cloud provider

92
00:05:52,900 --> 00:05:57,620
what I get is gobbledygook it's the
encrypt it version in the mail

93
00:05:57,620 --> 00:06:02,800
and so you know the cloud provider that
you're using in this case

94
00:06:02,800 --> 00:06:07,020
if they don't have control over the
proxy they don't have controls over the

95
00:06:07,020 --> 00:06:08,520
keys that were as

96
00:06:08,520 --> 00:06:13,540
used to encrypt the mail they can't see
any the content to your mail

97
00:06:13,540 --> 00:06:17,730
so now that's all pretty easy to do but
the

98
00:06:17,730 --> 00:06:22,070
question is what happens when we want to
actually searcher email again we don't

99
00:06:22,070 --> 00:06:23,050
want to have to

100
00:06:23,050 --> 00:06:27,110
download it all to search it well what
we do

101
00:06:27,110 --> 00:06:32,490
is know we sent our search to the proxy
so let's they were searching for

102
00:06:32,490 --> 00:06:36,170
messages that contain whatever the proxy
then

103
00:06:36,170 --> 00:06:41,830
encrypts the search term and sense the
search term on to the server

104
00:06:41,830 --> 00:06:46,990
and the server searches through the
encrypt the data for the same cryptid

105
00:06:46,990 --> 00:06:48,070
search term

106
00:06:48,070 --> 00:06:51,260
any results come back they get sent to
the proxy

107
00:06:51,260 --> 00:06:55,370
the proxy d crips them and you yet

108
00:06:55,370 --> 00:06:59,270
you know the do you have your email for
ED cryptid

109
00:06:59,270 --> 00:07:02,980
just have your search results so

110
00:07:02,980 --> 00:07:06,490
to most people this sounds like magic
like it's

111
00:07:06,490 --> 00:07:09,550
not technically feasible to

112
00:07:09,550 --> 00:07:13,980
do something like that but it actually
is real there are a few

113
00:07:13,980 --> 00:07:17,310
solutions out there that you could
actually buy

114
00:07:17,310 --> 00:07:22,620
today navajo systems was doing this kind
of approach on sales for so that they

115
00:07:22,620 --> 00:07:24,070
could give people

116
00:07:24,070 --> 00:07:27,540
using Salesforce let them encrypt your
data

117
00:07:27,540 --> 00:07:33,050
so Salesforce bought them and the other
two guys are primarily focused on

118
00:07:33,050 --> 00:07:36,260
email right now

119
00:07:36,260 --> 00:07:39,660
so there are a lot of challenges just
that

120
00:07:39,660 --> 00:07:43,030
are fairly easy but you are

121
00:07:43,030 --> 00:07:46,400
very important that we will spec I'm on

122
00:07:46,400 --> 00:07:50,030
the first one is a protocol parsing

123
00:07:50,030 --> 00:07:54,139
so if your gonna build this proxy

124
00:07:54,139 --> 00:07:57,910
it has two understand

125
00:07:57,910 --> 00:08:01,590
the entire protocol which is pretty easy
for

126
00:08:01,590 --> 00:08:06,310
something like SMTP your pop it's
actually really difficult for I'm out

127
00:08:06,310 --> 00:08:07,930
because I map

128
00:08:07,930 --> 00:08:11,460
supports a synchronous two-way
communication and it's even harder for

129
00:08:11,460 --> 00:08:12,650
the exchange

130
00:08:12,650 --> 00:08:18,139
mappy protocol and then if you're doing
webapps like this like imagine

131
00:08:18,139 --> 00:08:22,190
building the a proxy to make sure that
you handle gmail

132
00:08:22,190 --> 00:08:28,330
properly so yeah I use XML which makes
it a little bit easier but

133
00:08:28,330 --> 00:08:32,829
it can shift on no notice and they're
not gonna call up the

134
00:08:32,829 --> 00:08:36,389
they're not gonna call you up and say
hey we're about to make changes to the

135
00:08:36,389 --> 00:08:37,099
way the

136
00:08:37,099 --> 00:08:41,610
the web client works so there's some
challenges there

137
00:08:41,610 --> 00:08:45,269
another challenge is how do you do
authentication

138
00:08:45,269 --> 00:08:50,180
and key management the simplest way to
do this kind of thing is

139
00:08:50,180 --> 00:08:53,490
to have one proxy for a company that

140
00:08:53,490 --> 00:08:57,209
encrypts and decrypts everything but now
you've got authenticated that thing and

141
00:08:57,209 --> 00:08:58,449
you want to use

142
00:08:58,449 --> 00:09:01,930
per user authentication nor

143
00:09:01,930 --> 00:09:05,249
you know per user encryption here

144
00:09:05,249 --> 00:09:10,079
and then how do you handle key rotation
key storage

145
00:09:10,079 --> 00:09:13,490
key exploration revocation all those
things

146
00:09:13,490 --> 00:09:17,639
typical problems though and that's not
wanna talk about today

147
00:09:17,639 --> 00:09:20,839
the third challenges a

148
00:09:20,839 --> 00:09:25,589
the data encoding so why win you're
dealing with the web sites and you're

149
00:09:25,589 --> 00:09:29,370
looking at data you're often dealing
with numbers are taxed

150
00:09:29,370 --> 00:09:34,120
and when you encrypt those things
generally encryption operations give you

151
00:09:34,120 --> 00:09:37,550
binary data and you have to

152
00:09:37,550 --> 00:09:41,670
in crude that data in a way that will
actually

153
00:09:41,670 --> 00:09:45,269
not break the program that you're
sticking the data into

154
00:09:45,269 --> 00:09:50,279
and that's a there are some challenges
to that will will look at that problem a

155
00:09:50,279 --> 00:09:50,959
little bit

156
00:09:50,959 --> 00:09:54,949
to that so let's look at

157
00:09:54,949 --> 00:10:00,420
in cryptid datatypes beer the easiest
thing to do is

158
00:10:00,420 --> 00:10:03,670
exact matching corruptions which means
that when

159
00:10:03,670 --> 00:10:07,240
searching your own going to

160
00:10:07,240 --> 00:10:13,249
hit a win the search term is exactly the
same as the data field you're looking at

161
00:10:13,249 --> 00:10:14,360
so

162
00:10:14,360 --> 00:10:17,769
and this applies for everything you
could just think about it is

163
00:10:17,769 --> 00:10:22,519
your encrypting data that we're storing
in a database to right now and so we're

164
00:10:22,519 --> 00:10:22,829
gonna

165
00:10:22,829 --> 00:10:27,119
encrypt the entire field and we're only
gonna match with the entire field

166
00:10:27,119 --> 00:10:31,860
is the same we'll talk a little bit more
about this

167
00:10:31,860 --> 00:10:36,379
then you can actually do order
preserving encryption so if we're we

168
00:10:36,379 --> 00:10:39,649
are thinking about a database for
instance

169
00:10:39,649 --> 00:10:43,749
we may want to be able to sort our
results

170
00:10:43,749 --> 00:10:47,480
so why if we're getting that email when
we want to support sort by date:

171
00:10:47,480 --> 00:10:51,430
or there received we can actually

172
00:10:51,430 --> 00:10:55,300
do that if we use an order preserving
encryption routine

173
00:10:55,300 --> 00:10:58,709
on the date function the problem if the

174
00:10:58,709 --> 00:11:04,709
with this is that you know it leaks a
lot of information so even the best

175
00:11:04,709 --> 00:11:08,290
no no order preserving crypts in Scheme
I'll

176
00:11:08,290 --> 00:11:11,300
gives a lot of information away just
because

177
00:11:11,300 --> 00:11:15,259
love you know the the ordering have

178
00:11:15,259 --> 00:11:18,290
vitam so you can

179
00:11:18,290 --> 00:11:22,410
it fi summer if you leak one piece of
information

180
00:11:22,410 --> 00:11:26,180
then you may learn other pieces of
information

181
00:11:26,180 --> 00:11:29,329
so you know it's too all

182
00:11:29,329 --> 00:11:33,410
a valuable primitive you just gotta know
you're getting into

183
00:11:33,410 --> 00:11:36,879
a third option is a home or fic
encryption

184
00:11:36,879 --> 00:11:39,999
homomorphic encryption actually allows

185
00:11:39,999 --> 00:11:44,509
for math operations to it occur on to
encrypt it values

186
00:11:44,509 --> 00:11:48,709
without having to decreased the values
and where this could be useful if you

187
00:11:48,709 --> 00:11:51,100
think about it again in a database
context

188
00:11:51,100 --> 00:11:54,189
if you wanna some an entire column
numbers

189
00:11:54,189 --> 00:11:57,600
I you can totally do that and

190
00:11:57,600 --> 00:12:00,699
not have to the crypt accommodate a

191
00:12:00,699 --> 00:12:04,309
this the tends to work pretty

192
00:12:04,309 --> 00:12:07,319
poorly in very large data sets but

193
00:12:07,319 --> 00:12:10,579
is pretty cool but you know the most

194
00:12:10,579 --> 00:12:14,829
important I think is the

195
00:12:14,829 --> 00:12:19,579
searchable data fields where the field
instead of being an exact match

196
00:12:19,579 --> 00:12:24,220
where having to exactly match we can
search within the data field so

197
00:12:24,220 --> 00:12:28,319
for instance when we're searching
through emails

198
00:12:28,319 --> 00:12:32,490
schemes today is we're about to see your
usually going to

199
00:12:32,490 --> 00:12:36,639
leak information about what's in the
field

200
00:12:36,639 --> 00:12:40,209
and the biggest problem with this is
that

201
00:12:40,209 --> 00:12:43,399
people live not been able to implement

202
00:12:43,399 --> 00:12:46,730
wild-card searching and data fields are
you really

203
00:12:46,730 --> 00:12:50,100
can only search for a word at a time

204
00:12:50,100 --> 00:12:54,309
so up art

205
00:12:54,309 --> 00:12:57,730
what I'm gonna talk about today as I'm
gonna start by explaining the

206
00:12:57,730 --> 00:13:01,350
the exact map of to you which is going
to give you contact

207
00:13:01,350 --> 00:13:05,879
though that I'm then talk about the
searchable stuff later

208
00:13:05,879 --> 00:13:09,660
to do that just very little dollop

209
00:13:09,660 --> 00:13:13,809
into the the cryptography we're gonna be
talking about

210
00:13:13,809 --> 00:13:17,269
something called a suitor random
permutation shizz the

211
00:13:17,269 --> 00:13:20,699
a one to one function that I

212
00:13:20,699 --> 00:13:25,790
changes its data so that it's a
indistinguishable from like a random

213
00:13:25,790 --> 00:13:29,449
output and really what the cassette

214
00:13:29,449 --> 00:13:34,490
E is just think of it as a yes but
there's a a little bit of a difference

215
00:13:34,490 --> 00:13:37,980
ES is a PRP

216
00:13:37,980 --> 00:13:41,660
or is believed to be a PRP but the

217
00:13:41,660 --> 00:13:44,839
the that differences that

218
00:13:44,839 --> 00:13:48,100
we if we all or use a yes

219
00:13:48,100 --> 00:13:51,819
we could only process a 128 bit

220
00:13:51,819 --> 00:13:55,519
a 120 bit at a time because as the block
size

221
00:13:55,519 --> 00:13:58,819
love as: so we

222
00:13:58,819 --> 00:14:01,980
need are primitive to

223
00:14:01,980 --> 00:14:05,350
to have the property that it can handle

224
00:14:05,350 --> 00:14:11,009
arbitrary that data inputs but do the
same thing that AES does which is

225
00:14:11,009 --> 00:14:17,389
scramble the data and there are a bunch
of different techniques we can do that

226
00:14:17,389 --> 00:14:22,619
and easy one is to use something called
Malibu encryption to solve this problem

227
00:14:22,619 --> 00:14:25,869
I its irrelevant for the purposes

228
00:14:25,869 --> 00:14:29,189
love our discussion today but I can give
you a

229
00:14:29,189 --> 00:14:33,939
real easy construct that can do this if
you're really interested or

230
00:14:33,939 --> 00:14:37,290
can talk to you about other things that

231
00:14:37,290 --> 00:14:41,119
will do that give you the same basic
guarantees

232
00:14:41,119 --> 00:14:46,869
but let's look at how we're gonna use R
Us super random permutation

233
00:14:46,869 --> 00:14:50,759
imagine that were on the proxy and we
are

234
00:14:50,759 --> 00:14:55,550
get this SQL statement where were gonna

235
00:14:55,550 --> 00:14:58,879
select everything from table if

236
00:14:58,879 --> 00:15:02,149
the the the column equals

237
00:15:02,149 --> 00:15:05,369
hello so the proxy will get this

238
00:15:05,369 --> 00:15:08,819
and need to translate the term

239
00:15:08,819 --> 00:15:11,939
so it uses are encrypted in operation

240
00:15:11,939 --> 00:15:17,279
with the key right is the key that's a
specific to the customer the

241
00:15:17,279 --> 00:15:20,559
could be the end user could be the
company and it's going to encrypt

242
00:15:20,559 --> 00:15:24,920
that just like as: would encrypt
something but you notice it's not a

243
00:15:24,920 --> 00:15:28,279
20 value soren crips that

244
00:15:28,279 --> 00:15:31,279
and then base64 Inc odz

245
00:15:31,279 --> 00:15:34,459
the the output alright

246
00:15:34,459 --> 00:15:38,220
then you know it's reconstructing the

247
00:15:38,220 --> 00:15:42,300
the statements and actually sending that
off to the database

248
00:15:42,300 --> 00:15:46,470
the database will give us in cryptic
results

249
00:15:46,470 --> 00:15:50,850
and than the database whatever gives us
we can

250
00:15:50,850 --> 00:15:54,489
use the D crypts in operation with the
same key to

251
00:15:54,489 --> 00:15:59,179
to get the original text back so what
that's that's basically how it works and

252
00:15:59,179 --> 00:15:59,999
here's

253
00:15:59,999 --> 00:16:04,079
in a very simple example of how up to
date occurred

254
00:16:04,079 --> 00:16:07,989
possibly look in a database in its gonna
make illustrate some other things that

255
00:16:07,989 --> 00:16:09,559
we should be thinking about

256
00:16:09,559 --> 00:16:13,389
so here we've got three fields a unique
identifiers

257
00:16:13,389 --> 00:16:17,160
which is the primary key the stable

258
00:16:17,160 --> 00:16:21,529
physical address and the answer to a
secret question

259
00:16:21,529 --> 00:16:26,529
so few things that we notice right away
is that

260
00:16:26,529 --> 00:16:30,970
we've got two different entries that
share the same address

261
00:16:30,970 --> 00:16:34,439
that's a huge information leakage right
there right you know

262
00:16:34,439 --> 00:16:38,850
that there's a relationship between
those two fields

263
00:16:38,850 --> 00:16:42,610
the other thing we notice is that

264
00:16:42,610 --> 00:16:46,329
you know we the the zero-g you for the

265
00:16:46,329 --> 00:16:49,569
3rd ID there is the same

266
00:16:49,569 --> 00:16:52,569
is the the secret question for the

267
00:16:52,569 --> 00:16:56,910
the first rope which means definitely
that

268
00:16:56,910 --> 00:17:00,619
the answer that secret question is just
a number

269
00:17:00,619 --> 00:17:04,490
and as a matter fact we know that it's a

270
00:17:04,490 --> 00:17:08,500
a I want for probably

271
00:17:08,500 --> 00:17:13,230
so you know we're leaking a lot of
information here the length thereof

272
00:17:13,230 --> 00:17:16,920
data relationships between data

273
00:17:16,920 --> 00:17:21,490
this kind of thing again is of an
acceptable people

274
00:17:21,490 --> 00:17:25,709
don't really the mind if somebody's data
leaks

275
00:17:25,709 --> 00:17:29,150
but a you know one way we can address

276
00:17:29,150 --> 00:17:34,250
this problem is by using a different key
for every column A Day To so if we did

277
00:17:34,250 --> 00:17:34,780
that

278
00:17:34,780 --> 00:17:39,120
we'd never be able to see relationship
between what's in the ID column

279
00:17:39,120 --> 00:17:44,090
and what's in the secret question call
so

280
00:17:44,090 --> 00:17:48,070
if we could also use one keeper row ok
with that

281
00:17:48,070 --> 00:17:52,130
basically destroy search ability so if
you think about that

282
00:17:52,130 --> 00:17:57,010
when we encrypt a search term we just
want to send one search term over but if

283
00:17:57,010 --> 00:17:57,530
we had

284
00:17:57,530 --> 00:18:03,110
do encrypt the search term once for each
row that might possibly be an

285
00:18:03,110 --> 00:18:06,650
and we've got millions and millions
arose in our database that hasn't worked

286
00:18:06,650 --> 00:18:09,060
very well so we really

287
00:18:09,060 --> 00:18:13,130
can't get around the the leakage problem

288
00:18:13,130 --> 00:18:17,770
within the same column at least using
this approach

289
00:18:17,770 --> 00:18:22,140
and one other thing to notice is that if
we encrypt hello

290
00:18:22,140 --> 00:18:25,570
with a capital H we're not gonna get the
same result

291
00:18:25,570 --> 00:18:29,280
as if we encrypt a low with a lower case
H

292
00:18:29,280 --> 00:18:33,720
so when we're searching we need to take
that in consideration

293
00:18:33,720 --> 00:18:37,030
if we want our searches to be
case-insensitive

294
00:18:37,030 --> 00:18:40,920
which generally we do when we look at
that moment

295
00:18:40,920 --> 00:18:44,220
alright so that's a exact match search

296
00:18:44,220 --> 00:18:47,630
here now we're gonna go onto

297
00:18:47,630 --> 00:18:51,660
fully searchable stuff and I'm gonna
start by

298
00:18:51,660 --> 00:18:55,670
showing you a typical proach a the
typical approach the

299
00:18:55,670 --> 00:18:59,130
the these companies in the field are
taking and

300
00:18:59,130 --> 00:19:03,070
we're just imagine we're talking about
email messages and were

301
00:19:03,070 --> 00:19:06,990
looking to apply encryption to the body
of email messages so the

302
00:19:06,990 --> 00:19:10,170
can search it in the cloud without
having to

303
00:19:10,170 --> 00:19:15,090
pull it down so up this will be our
example email for now

304
00:19:15,090 --> 00:19:19,360
if you notice it's got some repeated
words in it

305
00:19:19,360 --> 00:19:23,270
you know this in this although it's
capitalize the first time it's not the

306
00:19:23,270 --> 00:19:24,420
second time

307
00:19:24,420 --> 00:19:28,370
Scott some punctuation in it as well and
as well as

308
00:19:28,370 --> 00:19:31,570
it's the God got to the same words

309
00:19:31,570 --> 00:19:35,590
so what typically happens is that we use
our same

310
00:19:35,590 --> 00:19:39,530
encryption primitive that we're talking
about our PRP

311
00:19:39,530 --> 00:19:44,310
and we encrypt each word independently

312
00:19:44,310 --> 00:19:48,510
and then we leave the punctuation the
spaces

313
00:19:48,510 --> 00:19:52,360
stuff like that intact and less we
consider it part of the word

314
00:19:52,360 --> 00:19:56,040
so you notice the apostrophe we in
cryptid

315
00:19:56,040 --> 00:19:59,090
but the common the period we didn't
because

316
00:19:59,090 --> 00:20:03,060
we didn't consider those par the word we
don't want to have to search those

317
00:20:03,060 --> 00:20:04,830
things

318
00:20:04,830 --> 00:20:07,960
alright so now let's see how the search
would work

319
00:20:07,960 --> 00:20:11,230
so this is what our email looks like on
the server

320
00:20:11,230 --> 00:20:14,640
now if we search for the word example
which

321
00:20:14,640 --> 00:20:17,690
is in there it was the

322
00:20:17,690 --> 00:20:20,710
probably the fourth word the

323
00:20:20,710 --> 00:20:25,300
the proxies going to encrypt that search
term send it off to the server

324
00:20:25,300 --> 00:20:28,350
the server will act

325
00:20:28,350 --> 00:20:31,480
turn this message because that word is
in there

326
00:20:31,480 --> 00:20:36,110
although again you know we have to worry
about what the servers notion of a word

327
00:20:36,110 --> 00:20:36,950
is

328
00:20:36,950 --> 00:20:41,310
are does it actually ignore the equal
signs

329
00:20:41,310 --> 00:20:45,710
some systems actually won't return to
hit on this because

330
00:20:45,710 --> 00:20:50,410
you know the the the it token eyes as
the words

331
00:20:50,410 --> 00:20:54,220
differently than you're expecting it to
do but you know just assume for

332
00:20:54,220 --> 00:20:57,950
and at this actually hits because it
usually well

333
00:20:57,950 --> 00:21:00,970
I and then if we take another search
term

334
00:21:00,970 --> 00:21:05,580
were that's not in this email somewhere
thing will happen at all

335
00:21:05,580 --> 00:21:09,780
get in cryptid the message will get
search but

336
00:21:09,780 --> 00:21:13,100
you know it's not found in this message
though nothing

337
00:21:13,100 --> 00:21:16,470
happens this message won't give returned

338
00:21:16,470 --> 00:21:20,730
okay so that's what a lot of these
vendors are doing today

339
00:21:20,730 --> 00:21:24,080
I and let's see how well it

340
00:21:24,080 --> 00:21:27,620
works so the first thing to notice

341
00:21:27,620 --> 00:21:31,250
is that there's an of a lot I've line
leakage here

342
00:21:31,250 --> 00:21:34,400
we can see the link the every word we

343
00:21:34,400 --> 00:21:37,520
can some start making gases

344
00:21:37,520 --> 00:21:41,120
is to what these values actually are

345
00:21:41,120 --> 00:21:44,560
not just based on their length relative
positioning

346
00:21:44,560 --> 00:21:48,750
so for instance as well as as a pretty

347
00:21:48,750 --> 00:21:52,090
common phrase so if you see

348
00:21:52,090 --> 00:21:56,420
you know the the same to character value

349
00:21:56,420 --> 00:22:01,400
two words apart there's a better chance
that it's the word as in the word is for

350
00:22:01,400 --> 00:22:02,290
instance

351
00:22:02,290 --> 00:22:07,350
so you can see that you could use a
statistical analysis over a lot of

352
00:22:07,350 --> 00:22:08,580
cipher taxed

353
00:22:08,580 --> 00:22:13,010
to start to figure out what a lot of the
day days in here

354
00:22:13,010 --> 00:22:16,200
so also you know we

355
00:22:16,200 --> 00:22:21,160
are a

356
00:22:21,160 --> 00:22:24,820
leaking a lotta love the Park

357
00:22:24,820 --> 00:22:29,440
you know word ordering and punctuation
so the fact that we know that the

358
00:22:29,440 --> 00:22:31,140
sentence stops here

359
00:22:31,140 --> 00:22:36,520
other commerce they're all those things
can provide as more information about

360
00:22:36,520 --> 00:22:40,020
what actually is set in the in the taxed

361
00:22:40,020 --> 00:22:43,170
so let's look at the word this

362
00:22:43,170 --> 00:22:46,920
we notice that it's capitalized in

363
00:22:46,920 --> 00:22:50,730
the first word but later on its lower
case

364
00:22:50,730 --> 00:22:53,980
so while iraq's fully encrypts to two
different

365
00:22:53,980 --> 00:22:57,960
cipher tax that again means that

366
00:22:57,960 --> 00:23:02,330
we camped a have a case insensitive
search

367
00:23:02,330 --> 00:23:06,030
this way I'm in if we try to normalize
the

368
00:23:06,030 --> 00:23:10,920
the data but for instance by lower
casing everything

369
00:23:10,920 --> 00:23:14,500
then we would change the plane tax to do
that

370
00:23:14,500 --> 00:23:17,870
we would have to change the plaintext to
do that which

371
00:23:17,870 --> 00:23:21,570
generally is an acceptable and

372
00:23:21,570 --> 00:23:25,960
a you know appointing you know we we
talked about the double equals but the

373
00:23:25,960 --> 00:23:26,670
other thing

374
00:23:26,670 --> 00:23:30,420
fans were big 64 including here the we

375
00:23:30,420 --> 00:23:35,780
me a break what the application knows
about word boundaries because

376
00:23:35,780 --> 00:23:39,030
most programs will treat plus

377
00:23:39,030 --> 00:23:42,240
enough forward slashes you see in the
highlighted

378
00:23:42,240 --> 00:23:46,660
things as is word boundaries and they
might not even

379
00:23:46,660 --> 00:23:50,630
except that text at all depending on
what the field is so

380
00:23:50,630 --> 00:23:53,830
this is something that you've gotta be
able to

381
00:23:53,830 --> 00:23:57,630
to deal with as well I

382
00:23:57,630 --> 00:24:00,800
so lets the

383
00:24:00,800 --> 00:24:04,650
talk about my new approach to doing this

384
00:24:04,650 --> 00:24:08,310
got the same plain text as before

385
00:24:08,310 --> 00:24:12,310
but it encrypts untuk early differently
now one thing you'll notice is that the

386
00:24:12,310 --> 00:24:13,760
message is longer

387
00:24:13,760 --> 00:24:17,420
alright so why there's one big block
here

388
00:24:17,420 --> 00:24:20,750
and then a bunch of smaller words there

389
00:24:20,750 --> 00:24:24,750
the the first big block is actually

390
00:24:24,750 --> 00:24:30,380
I in encryption love the entire message
that we're talking about using our

391
00:24:30,380 --> 00:24:35,150
PRP you crypt the message the other guys
are doing a one word at a time

392
00:24:35,150 --> 00:24:39,680
we're doing it one message at a time so
we encrypt the whole message

393
00:24:39,680 --> 00:24:43,530
and that's the first part love what you
see

394
00:24:43,530 --> 00:24:47,340
then the bottom part is

395
00:24:47,340 --> 00:24:51,440
actually encrypt index so while what
we're doing

396
00:24:51,440 --> 00:24:54,510
is we r taking every word

397
00:24:54,510 --> 00:25:00,300
in the message we're first normalizing
the word so let's say we

398
00:25:00,300 --> 00:25:04,350
uppercase everything and

399
00:25:04,350 --> 00:25:07,690
then we're going to create like

400
00:25:07,690 --> 00:25:11,580
a a unique value for for each word

401
00:25:11,580 --> 00:25:15,250
now we're gonna do this through a what's
called a Mac

402
00:25:15,250 --> 00:25:18,560
and their a Mac is keyed hash functions

403
00:25:18,560 --> 00:25:22,700
so think if it is something like md5 for
Shaw 1

404
00:25:22,700 --> 00:25:26,440
but it takes not just your data to hash

405
00:25:26,440 --> 00:25:30,600
but a key is well that is secret so that

406
00:25:30,600 --> 00:25:34,780
you nobody can for value so

407
00:25:34,780 --> 00:25:39,010
instead over using our PRP we're
actually going to use this

408
00:25:39,010 --> 00:25:43,920
hash function basically we have to give
a different key then we gave the PRP

409
00:25:43,920 --> 00:25:47,670
so we've got a second key the called MK

410
00:25:47,670 --> 00:25:51,020
and nowhere were using that to

411
00:25:51,020 --> 00:25:54,530
to process all the normalized values

412
00:25:54,530 --> 00:25:57,560
so then a

413
00:25:57,560 --> 00:26:01,910
you know where we're going to

414
00:26:01,910 --> 00:26:04,940
like actually take the output

415
00:26:04,940 --> 00:26:08,990
that Mac and truncated to a small

416
00:26:08,990 --> 00:26:13,740
smaller value because the you know we
actually don't mind if we occasionally

417
00:26:13,740 --> 00:26:15,570
get false positives

418
00:26:15,570 --> 00:26:19,750
we would rather save space so typically

419
00:26:19,750 --> 00:26:23,620
say like each Mac Shaw one yr

420
00:26:23,620 --> 00:26:29,870
wall produce 160 bits about put each Mac
shot 256 will produce 256 bits

421
00:26:29,870 --> 00:26:34,050
but you really good don't need to have

422
00:26:34,050 --> 00:26:37,850
that much per index term you can get
away with

423
00:26:37,850 --> 00:26:40,920
you know 10 minutes if you really want
to the

424
00:26:40,920 --> 00:26:45,590
only downside is that occasionally
you'll look for an email

425
00:26:45,590 --> 00:26:50,120
and there'll be a hit return it doesn't
actually have researched German

426
00:26:50,120 --> 00:26:53,660
that's the worst that can happen if you
if you truncate

427
00:26:53,660 --> 00:26:56,900
and the more you truncate the more
likely that is if you don't do any

428
00:26:56,900 --> 00:26:58,180
truncation at all

429
00:26:58,180 --> 00:27:02,360
it'll never happen if you truncate to
you know 16 bits

430
00:27:02,360 --> 00:27:06,230
your barely ever notice it all happen
once in a blue moon

431
00:27:06,230 --> 00:27:09,880
okay then we're going to store the index

432
00:27:09,880 --> 00:27:13,100
upwards we can remove duplicate so if
the word

433
00:27:13,100 --> 00:27:16,910
as was in there twice we're gonna take
you know where we're only going to

434
00:27:16,910 --> 00:27:20,450
keep one index value will both be the
same

435
00:27:20,450 --> 00:27:25,760
and them were going to encoding are in
coding scheme which will leave

436
00:27:25,760 --> 00:27:30,560
base64 for the moment although will
replace the slashes in pluses

437
00:27:30,560 --> 00:27:34,230
with dashes and apostrophes

438
00:27:34,230 --> 00:27:40,400
alright so what ends up happening is
that

439
00:27:40,400 --> 00:27:46,790
the the the proxy does all this work on
the search terms as well

440
00:27:46,790 --> 00:27:51,210
so we can solve a lot of the problems
that other people were having

441
00:27:51,210 --> 00:27:55,450
with the search term so you know the
case insensitive anything

442
00:27:55,450 --> 00:28:00,460
the the apostrophe you know doesn't
match johner John's

443
00:28:00,460 --> 00:28:05,110
all those things or a fixed here the
proxy just ask to have the Mac

444
00:28:05,110 --> 00:28:08,710
key is well so can we compute search
term

445
00:28:08,710 --> 00:28:13,430
so going back to are example from
searching for the word

446
00:28:13,430 --> 00:28:16,430
ball the will create

447
00:28:16,430 --> 00:28:19,780
a different

448
00:28:19,780 --> 00:28:24,900
encrypt it search term and this message
to get return

449
00:28:24,900 --> 00:28:28,480
because that search term is sitting
right there it's a

450
00:28:28,480 --> 00:28:32,290
the first thing in the index for example
remember was not

451
00:28:32,290 --> 00:28:36,170
the first word in the message this was
the first word the message

452
00:28:36,170 --> 00:28:39,880
just happens to be there to come the
word example

453
00:28:39,880 --> 00:28:42,920
comes first in my index so what

454
00:28:42,920 --> 00:28:48,710
the word this because the normalization
were doing both the instances this

455
00:28:48,710 --> 00:28:52,060
are represented in this index by that

456
00:28:52,060 --> 00:28:55,100
highlighted in blue yeah encrypt it

457
00:28:55,100 --> 00:28:58,390
search term so you know

458
00:28:58,390 --> 00:29:02,110
this approach is a lot of advantages to
the other one we're talking about

459
00:29:02,110 --> 00:29:06,690
it we still leak some information

460
00:29:06,690 --> 00:29:10,030
one is the total length for the message
we still

461
00:29:10,030 --> 00:29:13,900
can clearly see how long the message was
you know the the

462
00:29:13,900 --> 00:29:18,510
sizes when you decode the message from
base64

463
00:29:18,510 --> 00:29:21,940
the size will be exactly the same as the
original message

464
00:29:21,940 --> 00:29:27,540
I'm we can also figure out how many
unique words when the message

465
00:29:27,540 --> 00:29:30,770
the last time we could figure out the
total number words in the message we

466
00:29:30,770 --> 00:29:31,460
still

467
00:29:31,460 --> 00:29:35,070
are giving you the number unique words
in the message I am

468
00:29:35,070 --> 00:29:39,250
the the and we are also

469
00:29:39,250 --> 00:29:44,180
still leaking whether the same word is
available with multiple emails thats

470
00:29:44,180 --> 00:29:48,550
like we said before that's really
unavoidable if you really want to

471
00:29:48,550 --> 00:29:52,040
be able to search with techniques today

472
00:29:52,040 --> 00:29:55,210
what I you

473
00:29:55,210 --> 00:29:58,660
the last two these things will go away a
little bit

474
00:29:58,660 --> 00:30:01,670
as we at in support

475
00:30:01,670 --> 00:30:06,610
for wild cards so why gonna show you how
you actually can

476
00:30:06,610 --> 00:30:11,400
take this technique and do what four
wild-card searching if you really want

477
00:30:11,400 --> 00:30:11,780
to

478
00:30:11,780 --> 00:30:15,190
and a all it really requires

479
00:30:15,190 --> 00:30:18,480
is more indexing so

480
00:30:18,480 --> 00:30:23,620
I will like give you the steps on how to
do this

481
00:30:23,620 --> 00:30:27,440
and I'm gonna start with they are much
smaller example email here

482
00:30:27,440 --> 00:30:30,690
so what we're gonna do is just

483
00:30:30,690 --> 00:30:33,710
index every desirable term that

484
00:30:33,710 --> 00:30:37,980
is a regular expression that matches
this male that we would ever want to hit

485
00:30:37,980 --> 00:30:43,480
so in this case we would create an index
for all these things

486
00:30:43,480 --> 00:30:47,170
and then when somebody searches for any
one of these things

487
00:30:47,170 --> 00:30:51,080
this email messages gonna hit so

488
00:30:51,080 --> 00:30:54,130
we can see that

489
00:30:54,130 --> 00:30:57,870
so what happens is we Mac all these
things

490
00:30:57,870 --> 00:31:02,790
this is what we get then we are going to
sort this thing

491
00:31:02,790 --> 00:31:06,820
so that he take away ordering
information

492
00:31:06,820 --> 00:31:10,520
and you know

493
00:31:10,520 --> 00:31:13,860
that we're actually gonna crips the
plane taxed

494
00:31:13,860 --> 00:31:17,800
and so this becomes our message answered
now

495
00:31:17,800 --> 00:31:21,340
when we want to search for something
with the wild-card so

496
00:31:21,340 --> 00:31:25,930
yet say star which should definitely
match the word example

497
00:31:25,930 --> 00:31:32,630
we are all gonna send that to the proxy
the proxy one crips that search term

498
00:31:32,630 --> 00:31:36,120
we called encryption but it's really
using the the Mac

499
00:31:36,120 --> 00:31:39,360
to generate the search term gonna spend
it to the server

500
00:31:39,360 --> 00:31:42,890
the server will find that right there

501
00:31:42,890 --> 00:31:46,570
at the bottom so if we then

502
00:31:46,570 --> 00:31:50,690
go to search for something else like
mists

503
00:31:50,690 --> 00:31:53,700
star which is not in the the mail so

504
00:31:53,700 --> 00:31:57,540
maybe we're looking for the word
missioner missing or whatever

505
00:31:57,540 --> 00:32:00,590
I that's just not gonna hit because

506
00:32:00,590 --> 00:32:04,540
it will give us a different

507
00:32:04,540 --> 00:32:09,050
encrypt research value which isn't in
this last okay so

508
00:32:09,050 --> 00:32:12,700
we've handled really simple wild carting
the

509
00:32:12,700 --> 00:32:17,230
obviously we can do a lot more so for
the word test for instance

510
00:32:17,230 --> 00:32:21,400
all these are wild cards that might
match the word test

511
00:32:21,400 --> 00:32:26,140
we can use the same technique to him nor
multiple word searches

512
00:32:26,140 --> 00:32:30,200
so usually what people would do is that

513
00:32:30,200 --> 00:32:33,330
you know if you look at how people
search today

514
00:32:33,330 --> 00:32:37,950
the will usually search for one word
wild-card

515
00:32:37,950 --> 00:32:42,490
were for multiple words that are exact
words and so

516
00:32:42,490 --> 00:32:46,010
you know we will use like to or

517
00:32:46,010 --> 00:32:49,840
3 word groupings warned X all those
after

518
00:32:49,840 --> 00:32:53,070
normalizing the mall and then do

519
00:32:53,070 --> 00:32:57,270
wild cards on a single were level and
throw out the small wild cards to

520
00:32:57,270 --> 00:33:01,140
like most people don't ever search for
TV star

521
00:33:01,140 --> 00:33:05,870
were even you know TV star maybe is a
little more common but

522
00:33:05,870 --> 00:33:09,950
you usually it's three or more and most
people don't use

523
00:33:09,950 --> 00:33:14,130
even complicated while carding they just
use the ass trick in the use it at the

524
00:33:14,130 --> 00:33:14,780
end

525
00:33:14,780 --> 00:33:18,290
over we're not at the beginning of the
word so the approach

526
00:33:18,290 --> 00:33:21,530
that were used in the first example is
usually

527
00:33:21,530 --> 00:33:26,440
good enough for most people if you
handle multiple words as well

528
00:33:26,440 --> 00:33:30,870
so couple more considerations with
regard to this technique

529
00:33:30,870 --> 00:33:34,070
if you you know we we've been talking a
lot about

530
00:33:34,070 --> 00:33:38,730
base64 encoding being tricky even if you
replace the

531
00:33:38,730 --> 00:33:41,929
bad characters with characters that
usually

532
00:33:41,929 --> 00:33:45,740
are acceptable within word boundaries
you can end up with them at the

533
00:33:45,740 --> 00:33:46,419
beginning

534
00:33:46,419 --> 00:33:50,590
forward to the end of a word and that
might not token eyes right on the server

535
00:33:50,590 --> 00:33:51,350
side

536
00:33:51,350 --> 00:33:56,190
so I actually recommend using a 32
character of a back to

537
00:33:56,190 --> 00:34:00,570
to encode instead the 64 character
alphabet

538
00:34:00,570 --> 00:34:04,330
if it if you do that

539
00:34:04,330 --> 00:34:08,190
things work out a lot better um it and i
also

540
00:34:08,190 --> 00:34:12,540
recommand you know I for a good
trade-off between

541
00:34:12,540 --> 00:34:17,950
message expansion and false positives 15
bit taxer

542
00:34:17,950 --> 00:34:21,050
are are really good and

543
00:34:21,050 --> 00:34:25,889
they're gonna add four bytes for each
tacked to the message 3

544
00:34:25,889 --> 00:34:30,090
to include the 15 bit if you're using
base32 its

545
00:34:30,090 --> 00:34:33,919
including five bits into a single by

546
00:34:33,919 --> 00:34:37,060
so three bits per tag plus

547
00:34:37,060 --> 00:34:40,990
the space in between tax you give up
four bytes

548
00:34:40,990 --> 00:34:45,270
for each search term that you want the
message

549
00:34:45,270 --> 00:34:48,679
alright I'll also many these terms are
going to overlap

550
00:34:48,679 --> 00:34:53,080
when you're doing wild Rd especially the
short wild cards

551
00:34:53,080 --> 00:34:56,320
it actually won't be as bad as it seems
and terms a

552
00:34:56,320 --> 00:34:59,359
message expansion you get a lot back

553
00:34:59,359 --> 00:35:03,200
um but if you to you

554
00:35:03,200 --> 00:35:07,800
the the like four wild-card ng

555
00:35:07,800 --> 00:35:11,050
across the English language I went to

556
00:35:11,050 --> 00:35:14,490
you know what director my

557
00:35:14,490 --> 00:35:17,490
my local machine and did the analysis

558
00:35:17,490 --> 00:35:21,260
it takes on average you've got on
average

559
00:35:21,260 --> 00:35:24,340
the words and in the dick file or

560
00:35:24,340 --> 00:35:28,370
10 characters which seemed really high
but

561
00:35:28,370 --> 00:35:32,350
you know that's what it is it's a common
usage is probably a lot lower but if you

562
00:35:32,350 --> 00:35:33,680
go to the dictionary

563
00:35:33,680 --> 00:35:38,220
10 10 characters the median you do the
analysis over the whole

564
00:35:38,220 --> 00:35:41,359
dictionary and it to the

565
00:35:41,359 --> 00:35:44,670
you know sixty two and a half wild cards

566
00:35:44,670 --> 00:35:51,120
per word on average is what you would
expect if you're doing four wild-card ng

567
00:35:51,120 --> 00:35:54,150
just with the asterisk

568
00:35:54,150 --> 00:35:57,620
that you know obviously is a4x

569
00:35:57,620 --> 00:36:01,180
expansion so you %uh that's

570
00:36:01,180 --> 00:36:04,300
not great but if you use the simple
approach which

571
00:36:04,300 --> 00:36:08,530
is just you know something star

572
00:36:08,530 --> 00:36:13,310
without even taking new count duplicates

573
00:36:13,310 --> 00:36:16,830
Tom and including the small globs

574
00:36:16,830 --> 00:36:20,510
that will be you know

575
00:36:20,510 --> 00:36:23,550
the less than

576
00:36:23,550 --> 00:36:26,740
you know four and a half times

577
00:36:26,740 --> 00:36:30,109
message expansion is what we're seeing
in

578
00:36:30,109 --> 00:36:33,350
practice so you know though about

579
00:36:33,350 --> 00:36:36,500
a4 axe if you got

580
00:36:36,500 --> 00:36:39,790
you know terabyte female sitting there

581
00:36:39,790 --> 00:36:43,480
anyone to fall you know do a wild-card
searching

582
00:36:43,480 --> 00:36:47,310
than the message expansion will be about
four acts for

583
00:36:47,310 --> 00:36:50,340
for simple wild-card searching

584
00:36:50,340 --> 00:36:54,520
which is not too bad enough three extra
terabytes

585
00:36:54,520 --> 00:36:58,700
is not that expensive alright cell

586
00:36:58,700 --> 00:37:02,030
the the last consideration here is that

587
00:37:02,030 --> 00:37:05,970
key rotation is actually a pain in the
neck when you're doing

588
00:37:05,970 --> 00:37:11,600
encrypt it and accesso if I i decided i
wanna change keys

589
00:37:11,600 --> 00:37:15,210
in order to like

590
00:37:15,210 --> 00:37:18,410
you know I because the key a compromise
to all the NAM

591
00:37:18,410 --> 00:37:23,060
I'm in a pretty bad state because I E

592
00:37:23,060 --> 00:37:26,550
need a key to stick around until I can

593
00:37:26,550 --> 00:37:30,920
reindex everything which could take me
an awfully long time

594
00:37:30,920 --> 00:37:34,020
so what key workstation in this scheme

595
00:37:34,020 --> 00:37:37,900
requires re indexing everything
server-side

596
00:37:37,900 --> 00:37:41,550
and that's probably always going to be
true with

597
00:37:41,550 --> 00:37:44,980
with every scheme out there but
certainly a real

598
00:37:44,980 --> 00:37:49,830
operational challenge to any of these
schemes

599
00:37:49,830 --> 00:37:53,560
so at set pretty short

600
00:37:53,560 --> 00:37:58,350
just two going to reiterate you know
what we did was

601
00:37:58,350 --> 00:38:01,370
provide a way do allow you to

602
00:38:01,370 --> 00:38:04,530
add your own your storage to

603
00:38:04,530 --> 00:38:08,609
software as a service applications
living in the cloud

604
00:38:08,609 --> 00:38:13,400
even if you don't have the for your
provider so you can

605
00:38:13,400 --> 00:38:18,290
do this with Gmail you can do with
whatever if you really want to

606
00:38:18,290 --> 00:38:21,710
do it plus you can

607
00:38:21,710 --> 00:38:26,580
away where you can actually scratch all
that data without having to download all

608
00:38:26,580 --> 00:38:28,120
over to you

609
00:38:28,120 --> 00:38:32,080
and than you know we talked about

610
00:38:32,080 --> 00:38:35,140
search to make it leak less information

611
00:38:35,140 --> 00:38:38,540
to support wild cards and

612
00:38:38,540 --> 00:38:42,839
the you up requires a trade-off was
storage but

613
00:38:42,839 --> 00:38:46,109
makes really functional so now

614
00:38:46,109 --> 00:38:49,359
that is everything in a nutshell happy
to why

615
00:38:49,359 --> 00:38:56,359
answer questions if there are any

616
00:38:57,680 --> 00:39:01,580
problem of crossville

617
00:39:01,580 --> 00:39:05,830
leakage saying rich uses several emails

618
00:39:05,830 --> 00:39:09,670
yeah is that a pretty big problem
because if I'm attacker

619
00:39:09,670 --> 00:39:12,880
apparently I'm very active because I
minutes to

620
00:39:12,880 --> 00:39:16,510
own the glove box or due to

621
00:39:16,510 --> 00:39:20,970
search to send an email I can certainly
go with which I can identify

622
00:39:20,970 --> 00:39:24,560
because there's a really long string in
it or something I put my

623
00:39:24,560 --> 00:39:28,380
own chosen few words in it searchers

624
00:39:28,380 --> 00:39:32,740
yeah absolutely so why you can leverage
that

625
00:39:32,740 --> 00:39:37,540
if you know the as long as you have the

626
00:39:37,540 --> 00:39:41,410
chosen plaintext attack you can

627
00:39:41,410 --> 00:39:44,930
you know still like get enough volume
move

628
00:39:44,930 --> 00:39:48,120
plain text that you can absolutely start

629
00:39:48,120 --> 00:39:51,260
that's true with any the schemes right
now so

630
00:39:51,260 --> 00:39:56,450
you know that's why the key rotation
being a problem is

631
00:39:56,450 --> 00:40:01,940
because you want to be able to limit the
damage when you determine that there is

632
00:40:01,940 --> 00:40:02,710
an attack

633
00:40:02,710 --> 00:40:06,839
so that's absolutely problems with any
scheme like this

634
00:40:06,839 --> 00:40:10,060
and frankly you know this is kinda cool
it's a it's a

635
00:40:10,060 --> 00:40:13,170
nice win you wanna

636
00:40:13,170 --> 00:40:16,290
you know you want to be able to use the
cloud but they're not supporting it but

637
00:40:16,290 --> 00:40:19,010
I'm not saying actually that its

638
00:40:19,010 --> 00:40:22,200
better than the alternative which is dis

639
00:40:22,200 --> 00:40:26,589
the cloud provider actually buying one
of those big boxes to

640
00:40:26,589 --> 00:40:30,030
you know handle all the encryption at a
disco level

641
00:40:30,030 --> 00:40:33,790
in a multi-tenant fashion you know
definitely has its advantages although

642
00:40:33,790 --> 00:40:35,050
again

643
00:40:35,050 --> 00:40:38,230
the security the key material still an
issue there too

644
00:40:38,230 --> 00:40:41,630
so it's not a perfect world

645
00:40:41,630 --> 00:40:48,630
of so anything else

646
00:40:53,490 --> 00:40:55,970
YouTube own the while houses

647
00:40:55,970 --> 00:40:58,190
right so

648
00:40:58,190 --> 00:41:01,500
while a while hot become more complex

649
00:41:01,500 --> 00:41:04,670
so the index is that you had you can't

650
00:41:04,670 --> 00:41:08,819
me the your you can

651
00:41:08,819 --> 00:41:12,579
the I

652
00:41:12,579 --> 00:41:15,640
because the volume I'm not sure I
understand the questions about the

653
00:41:15,640 --> 00:41:17,750
wild-card expansions are right

654
00:41:17,750 --> 00:41:22,019
more the ball you you white more indexes

655
00:41:22,019 --> 00:41:25,019
you'll incorporated me

656
00:41:25,019 --> 00:41:28,309
rival 3 mean very small

657
00:41:28,309 --> 00:41:31,769
but while probably the huge

658
00:41:31,769 --> 00:41:34,859
then the clintons me

659
00:41:34,859 --> 00:41:38,089
I mean exceeded yasser

660
00:41:38,089 --> 00:41:42,039
right so when you do this kind of thing

661
00:41:42,039 --> 00:41:45,549
that's a that's a a great point

662
00:41:45,549 --> 00:41:49,250
hopefully for those to did you the
question all

663
00:41:49,250 --> 00:41:52,799
its point my answer but win you

664
00:41:52,799 --> 00:41:56,660
use like one of these in cryptic proxies
to deal with

665
00:41:56,660 --> 00:42:00,220
like somebody's sassy application

666
00:42:00,220 --> 00:42:05,329
you have to be cognizant again love
what's likely to happen to the date on

667
00:42:05,329 --> 00:42:06,400
the back and

668
00:42:06,400 --> 00:42:09,619
and if it's going into a database the

669
00:42:09,619 --> 00:42:14,710
database field a lot of the times the
field will have a maximum storage size

670
00:42:14,710 --> 00:42:18,210
that you know which point you're s.o.l

671
00:42:18,210 --> 00:42:21,349
if you try to stick more data in that
field the No take

672
00:42:21,349 --> 00:42:25,009
and in that case you know you you you

673
00:42:25,009 --> 00:42:28,009
gonna make the decision about how you
gonna handle that usually

674
00:42:28,009 --> 00:42:31,180
you know you're not going to do any wild
card gonna feel like that you might not

675
00:42:31,180 --> 00:42:31,809
even

676
00:42:31,809 --> 00:42:36,289
do when indexing at all you might just
leave it to exact search only

677
00:42:36,289 --> 00:42:39,390
and then you just kind of have stuck
with that

678
00:42:39,390 --> 00:42:42,940
the other thing that you could do
instead

679
00:42:42,940 --> 00:42:46,990
is leave the index on the proxy

680
00:42:46,990 --> 00:42:50,119
so that you know you you

681
00:42:50,119 --> 00:42:53,539
and just gonna love like

682
00:42:53,539 --> 00:42:57,190
not put it all the way on the server
which

683
00:42:57,190 --> 00:43:01,609
would allow you to still retrieve the

684
00:43:01,609 --> 00:43:04,690
the right-field what you doing like the
the

685
00:43:04,690 --> 00:43:08,440
like the filtering once locally

686
00:43:08,440 --> 00:43:11,779
and then kind of completely rewriting
the query

687
00:43:11,779 --> 00:43:14,839
going to the server which actually

688
00:43:14,839 --> 00:43:17,950
also addresses the issue that we're just
talking about

689
00:43:17,950 --> 00:43:22,630
if you want to do that every single time
so you know you basically just leave

690
00:43:22,630 --> 00:43:26,269
entire contents of the index's on the
proxy

691
00:43:26,269 --> 00:43:29,769
but you know your way

692
00:43:29,769 --> 00:43:33,000
okay while one more question teacher
because

693
00:43:33,000 --> 00:43:36,690
this num would I'll

694
00:43:36,690 --> 00:43:39,819
ordinary to

695
00:43:39,819 --> 00:43:45,819
something like Weiss right on

696
00:43:45,819 --> 00:43:49,400
although we

697
00:43:49,400 --> 00:43:56,400
me the on yet so when you go through
your normalization indexing process you

698
00:43:58,410 --> 00:43:59,440
have to

699
00:43:59,440 --> 00:44:02,950
to take that into consideration so if
you want

700
00:44:02,950 --> 00:44:06,099
like vice dash president

701
00:44:06,099 --> 00:44:09,559
to work and you want myspace president
to work

702
00:44:09,559 --> 00:44:13,400
then when you normalize you have to look
and say well it's going to dash

703
00:44:13,400 --> 00:44:18,880
but i wanna treat it you know indexes
you know vice and president two separate

704
00:44:18,880 --> 00:44:19,599
words

705
00:44:19,599 --> 00:44:23,519
and I'm going to index it is vice
president together

706
00:44:23,519 --> 00:44:26,690
and with the dash though you know you if

707
00:44:26,690 --> 00:44:30,009
you want it all those possibilities
you'll see a little bit of extra

708
00:44:30,009 --> 00:44:31,329
expansion

709
00:44:31,329 --> 00:44:35,730
to we do that in our can have test that
and

710
00:44:35,730 --> 00:44:39,220
you know that the expansions pretty
minimal again you know with

711
00:44:39,220 --> 00:44:42,930
everything we're talking about here with
kinda simple while carding

712
00:44:42,930 --> 00:44:46,440
not about four to five times expansion
is

713
00:44:46,440 --> 00:44:53,440
what we typically see yeah more thinking
about this and more from

714
00:44:58,079 --> 00:45:01,279
question this is about securing

715
00:45:01,279 --> 00:45:05,829
sauce source servicer if that's what if
I'm

716
00:45:05,829 --> 00:45:08,880
and sinister nice but sources

717
00:45:08,880 --> 00:45:11,900
is a service

718
00:45:11,900 --> 00:45:15,420
that's a software the occasional the
logic is a word loud and

719
00:45:15,420 --> 00:45:18,640
it was successful in this said

720
00:45:18,640 --> 00:45:22,740
you have a proxy which is you not part
of the clout

721
00:45:22,740 --> 00:45:27,230
most to these vendors which are not
affiliated with any of them by the way

722
00:45:27,230 --> 00:45:28,279
but they're all

723
00:45:28,279 --> 00:45:32,190
offering user cope with the proxy
wherever you want

724
00:45:32,190 --> 00:45:35,660
as a you know you the selma's the VMware
image

725
00:45:35,660 --> 00:45:40,309
or they have their own cloud-based
proxies that

726
00:45:40,309 --> 00:45:45,809
so you still don't have any
infrastructure manage from what I gather

727
00:45:45,809 --> 00:45:49,910
this proxy thing is a way to separate
the keys from

728
00:45:49,910 --> 00:45:52,950
subtext your that's right so you

729
00:45:52,950 --> 00:45:56,509
you don't want watching the clock
answers

730
00:45:56,509 --> 00:45:59,509
close o'neal don't wants

731
00:45:59,509 --> 00:46:02,849
well it you know that that's the

732
00:46:02,849 --> 00:46:07,130
up to the companies that are having the
problem moving to the cloud

733
00:46:07,130 --> 00:46:11,829
rights if you talk to Bank of America is
an example somebody you was

734
00:46:11,829 --> 00:46:16,710
very reluctant to moving to the cloud
for exactly this reason

735
00:46:16,710 --> 00:46:20,509
you know they would probably say we want
to

736
00:46:20,509 --> 00:46:24,819
you know host the proxies internally in
which case

737
00:46:24,819 --> 00:46:28,089
you know it would be very easy for them
to do they'd only be managing

738
00:46:28,089 --> 00:46:31,940
kind of one thing instead of having to
manage for instance

739
00:46:31,940 --> 00:46:35,529
Microsoft Exchange which is really
complicated to manage so they can still

740
00:46:35,529 --> 00:46:37,809
leave that complexity to somebody else

741
00:46:37,809 --> 00:46:41,140
just have to keep these little proxies
running which you know

742
00:46:41,140 --> 00:46:46,039
even if they do die who cares there six
other ones doing the same thing

743
00:46:46,039 --> 00:46:51,009
other people don't even want to deal
with that and they would be happy enough

744
00:46:51,009 --> 00:46:54,980
having their wrist spread across two
providers instead of just one

745
00:46:54,980 --> 00:46:59,470
just to get back to work action start
sorry about that I

746
00:46:59,470 --> 00:47:02,970
basically idea of proxies only

747
00:47:02,970 --> 00:47:06,340
only make sense if you want to separate
key material from the site

748
00:47:06,340 --> 00:47:09,970
right you're using this the situation

749
00:47:09,970 --> 00:47:16,970
for software-as-a-service your thing
about this offer is only works

750
00:47:17,380 --> 00:47:20,700
if all the communication works

751
00:47:20,700 --> 00:47:24,050
worse off for goes through the

752
00:47:24,050 --> 00:47:28,230
through the proxy so right of this offer
service

753
00:47:28,230 --> 00:47:31,230
the entry point is should words approx
yeah

754
00:47:31,230 --> 00:47:35,330
so your sulfurous serves is no longer
sources and clout

755
00:47:35,330 --> 00:47:38,990
its offer a service on your proxy yeah
home

756
00:47:38,990 --> 00:47:43,140
doesn't that defeat the whole purpose of
sources or simply I'll

757
00:47:43,140 --> 00:47:46,800
basically right now you're creating
sulfur

758
00:47:46,800 --> 00:47:51,700
service locally with storage serves
close well

759
00:47:51,700 --> 00:47:55,590
look II maybe you see it that way most
people that I'd

760
00:47:55,590 --> 00:47:59,910
if talk to about this don't right i mean
that they see the

761
00:47:59,910 --> 00:48:03,100
value the cloud is you know

762
00:48:03,100 --> 00:48:07,250
allowing them to focus on their business
by putting this

763
00:48:07,250 --> 00:48:10,560
these complex applications in somebody
else's hands

764
00:48:10,560 --> 00:48:14,250
not having to worry about the fault
tolerance

765
00:48:14,250 --> 00:48:17,740
like the ops and so on and

766
00:48:17,740 --> 00:48:21,830
you can do that here still

767
00:48:21,830 --> 00:48:27,050
now again you lou to do another really
great points

768
00:48:27,050 --> 00:48:32,050
which is still have to have the right
controls in place to

769
00:48:32,050 --> 00:48:37,150
make sure that you deal with people who
are going

770
00:48:37,150 --> 00:48:41,080
directly to the likes that what you
Salesforce's

771
00:48:41,080 --> 00:48:45,890
as an example for all using Salesforce
and you walk directly and instead have

772
00:48:45,890 --> 00:48:49,000
to our proxy that's a problem and thats

773
00:48:49,000 --> 00:48:52,620
what i was hinting at earlier with the
authentication bit

774
00:48:52,620 --> 00:48:56,880
is a challenge because really what you
want to do is only give people

775
00:48:56,880 --> 00:49:01,030
authentication capabilities to the proxy
now the proxy store all their

776
00:49:01,030 --> 00:49:03,180
authentication capabilities to the
server

777
00:49:03,180 --> 00:49:08,760
the other approach i've seen is you know
you actually have a process that

778
00:49:08,760 --> 00:49:13,210
a sitting on the proxy that goes and
starts decreasing data that is

779
00:49:13,210 --> 00:49:16,300
Krypton yeah that silly

780
00:49:16,300 --> 00:49:20,090
if you're going to be trusting clogged
implicitly

781
00:49:20,090 --> 00:49:23,990
because you wanna outsourcing proxies
wanna just

782
00:49:23,990 --> 00:49:27,400
combined proxy back to cloud application

783
00:49:27,400 --> 00:49:30,640
well because it's a additional risk
right so

784
00:49:30,640 --> 00:49:34,800
if I have one of those vendors posting a
proxy

785
00:49:34,800 --> 00:49:38,290
and I've got Google hosting my email

786
00:49:38,290 --> 00:49:41,740
you know both Google and the

787
00:49:41,740 --> 00:49:45,060
well emails a horrible example but both
Google

788
00:49:45,060 --> 00:49:48,330
and you know the the like one of those

789
00:49:48,330 --> 00:49:51,650
proxy providers would have to be
compromised so

790
00:49:51,650 --> 00:49:56,370
your your your risks outweigh that

791
00:49:56,370 --> 00:49:59,900
how people see it today in that case you

792
00:49:59,900 --> 00:50:03,230
only have to own that proxy you what's
yeah

793
00:50:03,230 --> 00:50:06,580
everything yeah but much smaller tax
surface

794
00:50:06,580 --> 00:50:11,200
sought hopefully a lot easier to
hopefully a lot easier to secure

795
00:50:11,200 --> 00:50:16,900
but yeah get anything else

796
00:50:16,900 --> 00:50:20,380
lot more than I expected actual ask

797
00:50:20,380 --> 00:50:26,550
few no no it's good because I figured
everybody's eyes would glaze over and

798
00:50:26,550 --> 00:50:27,490
they would

799
00:50:27,490 --> 00:50:31,100
fall asleep instead they're playing with
our phones

800
00:50:31,100 --> 00:50:36,700
yet another question yen

801
00:50:36,700 --> 00:50:40,780
no worries hero we old

802
00:50:40,780 --> 00:50:45,650
security practitioners you'll secure
uses should

803
00:50:45,650 --> 00:50:48,890
we should to protect the

804
00:50:48,890 --> 00:50:52,150
especially go public law yeah just a
stupid

805
00:50:52,150 --> 00:50:55,890
who secured this who is what

806
00:50:55,890 --> 00:50:59,000
would did

807
00:50:59,000 --> 00:51:02,220
do it approved do it s

808
00:51:02,220 --> 00:51:05,400
the user school you get the idea

809
00:51:05,400 --> 00:51:09,510
yeah mechanic to ed

810
00:51:09,510 --> 00:51:13,900
yeah sold the premise here the

811
00:51:13,900 --> 00:51:17,180
that's a great question I think the
premise here is that

812
00:51:17,180 --> 00:51:21,010
the cloud provider generally isn't going
to do it right then

813
00:51:21,010 --> 00:51:26,100
sass companies don't want the extra
expense they don't want to do with the

814
00:51:26,100 --> 00:51:27,650
key management

815
00:51:27,650 --> 00:51:32,790
they don't want to do threat they don't
they don't know anything about security

816
00:51:32,790 --> 00:51:34,190
anyway right so

817
00:51:34,190 --> 00:51:38,260
the burden is on you was the customer to

818
00:51:38,260 --> 00:51:41,990
come up with a solution if it's
important for you for that day to be

819
00:51:41,990 --> 00:51:43,890
encrypt it before you put in the cloud

820
00:51:43,890 --> 00:51:47,570
and that's really why this kind of
approach

821
00:51:47,570 --> 00:51:50,910
is meant to handle so either

822
00:51:50,910 --> 00:51:55,020
you do the encryption before it gets too

823
00:51:55,020 --> 00:52:00,650
the cloud war you know you find a second
cloud provider that's

824
00:52:00,650 --> 00:52:04,770
focused really only on doing that
encryption for you

825
00:52:04,770 --> 00:52:08,340
so yeah yeah exactly

826
00:52:08,340 --> 00:52:12,500
so the the most forward-thinking sass
provider is a actually sales force

827
00:52:12,500 --> 00:52:13,390
because

828
00:52:13,390 --> 00:52:17,600
they bought a company doing that they
could offer to their customers and they

829
00:52:17,600 --> 00:52:18,900
can say look

830
00:52:18,900 --> 00:52:22,340
you know we've got our infrastructure
storing your data got a separate

831
00:52:22,340 --> 00:52:23,880
infrastructure that's your

832
00:52:23,880 --> 00:52:28,080
your thats encrypting your data 30
totally different places everything's

833
00:52:28,080 --> 00:52:29,210
different about them

834
00:52:29,210 --> 00:52:32,820
and oh by the way if you want to encrypt
your data yourself

835
00:52:32,820 --> 00:52:36,170
have at it we don't care we don't need
to have any access to it

836
00:52:36,170 --> 00:52:41,390
that's much better than pretty much any
other cloud provider today

837
00:52:41,390 --> 00:52:45,740
hopefully that will change we'll see how
it goes but in the meantime

838
00:52:45,740 --> 00:52:49,970
you can do it yourself you just you know
as a stalk

839
00:52:49,970 --> 00:52:53,530
shown you gonna lose a little bit of
functionality especially with the

840
00:52:53,530 --> 00:52:55,380
vendors that are out there today

841
00:52:55,380 --> 00:52:59,350
although you know they're you know
hopefully cool get more functional as

842
00:52:59,350 --> 00:53:01,720
time goes on

843
00:53:01,720 --> 00:53:05,260
yeah thanks okay

844
00:53:05,260 --> 00:53:12,260
will thanks a lot thank you are driving
up

845
00:53:18,570 --> 00:53:19,980
ok

846
00:53:19,980 --> 00:53:21,530
this

847
00:53:21,530 --> 00:53:28,530
sleep

