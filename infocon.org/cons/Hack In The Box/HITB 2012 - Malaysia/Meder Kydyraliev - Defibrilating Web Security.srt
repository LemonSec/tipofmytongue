1
00:00:06,370 --> 00:00:10,740
up

2
00:00:10,740 --> 00:00:12,530
space

3
00:00:12,530 --> 00:00:14,309
sky

4
00:00:14,309 --> 00:00:17,390
sleep

5
00:00:17,390 --> 00:00:21,750
I run thanks a lot for coming I am so
we're gonna talk abut

6
00:00:21,750 --> 00:00:24,830
defibrillator in which security in
particular I'm gonna

7
00:00:24,830 --> 00:00:29,509
try to persuade you that current
technologies that we have

8
00:00:29,509 --> 00:00:32,790
for that security inadequate and I

9
00:00:32,790 --> 00:00:36,250
a an artifact of on

10
00:00:36,250 --> 00:00:40,309
very kind of old mentality that we
inherited from my

11
00:00:40,309 --> 00:00:45,670
from from the 90's right so I'm before
proceed we'll talk a little bit about

12
00:00:45,670 --> 00:00:46,949
the current state and

13
00:00:46,949 --> 00:00:49,999
what's the current state of technology
in the industry is

14
00:00:49,999 --> 00:00:53,070
and if you look at it I'm

15
00:00:53,070 --> 00:00:56,589
you will see that I'm right now

16
00:00:56,589 --> 00:01:00,210
a lot of on their abilities if you look
at the love the vulnerabilities that we

17
00:01:00,210 --> 00:01:00,710
have

18
00:01:00,710 --> 00:01:03,899
love the vulnerabilities will boil down
to what

19
00:01:03,899 --> 00:01:07,060
to the fact that there is no way for you
to tell

20
00:01:07,060 --> 00:01:10,530
with a certain input is actually
originating

21
00:01:10,530 --> 00:01:13,979
from a trusted source on on trusted
source right so

22
00:01:13,979 --> 00:01:17,570
everest every single on their ability
invade publications we have a majority

23
00:01:17,570 --> 00:01:18,229
of them

24
00:01:18,229 --> 00:01:21,649
can be reduced to that right if we look
at sequel injections

25
00:01:21,649 --> 00:01:25,380
it's the fact that we use in an and
trusted string

26
00:01:25,380 --> 00:01:28,540
at as a part of trusted sequel Creary
escaping it

27
00:01:28,540 --> 00:01:34,020
before that if we're talking about texas
ass is we display none trust input on

28
00:01:34,020 --> 00:01:34,930
the page without

29
00:01:34,930 --> 00:01:38,640
again doing anything to it so it all
boils down to the fact that we are

30
00:01:38,640 --> 00:01:39,579
unable to tell

31
00:01:39,579 --> 00:01:44,810
where the data is coming from right and
one of the reasons and primary reasons

32
00:01:44,810 --> 00:01:47,009
for the fact for that fact yes

33
00:01:47,009 --> 00:01:50,530
because we are still using strings to
represent everything

34
00:01:50,530 --> 00:01:55,000
right if you look at them if you look at
the vamp vacation now if you look at

35
00:01:55,000 --> 00:02:00,409
basically any web application if you I
read looking at the HTTP request to love

36
00:02:00,409 --> 00:02:01,929
the HTTP API

37
00:02:01,929 --> 00:02:06,390
everything everything is based around
streams string string string everywhere

38
00:02:06,390 --> 00:02:06,929
at the

39
00:02:06,929 --> 00:02:10,289
and I have you ever wondered why do have
strings white why

40
00:02:10,289 --> 00:02:15,350
why are we using strings to represent
everything from HTTP headers to http

41
00:02:15,350 --> 00:02:16,200
parameters

42
00:02:16,200 --> 00:02:21,040
to every other form of them for and it's
a very interesting question right

43
00:02:21,040 --> 00:02:21,490
because

44
00:02:21,490 --> 00:02:24,670
we have actually languages tight

45
00:02:24,670 --> 00:02:28,330
for example Java yet we steal

46
00:02:28,330 --> 00:02:32,440
use strings to represent and then you
have to again remember which request

47
00:02:32,440 --> 00:02:36,220
ni need excessive protection which
requires do not need extra protection

48
00:02:36,220 --> 00:02:39,519
and the game man you know you have to
keep all of that in your head

49
00:02:39,519 --> 00:02:44,090
and I remember to do the right thing an
authorization is another very good

50
00:02:44,090 --> 00:02:45,739
example love that right and then

51
00:02:45,739 --> 00:02:49,290
that's probably where the most
devastating will their abilities

52
00:02:49,290 --> 00:02:52,580
come from right steel up-to-date

53
00:02:52,580 --> 00:02:55,920
an let's imagine you have some sort of
service right and say yes

54
00:02:55,920 --> 00:02:59,950
service allows you to retrieve something
from some sort of storage right and what

55
00:02:59,950 --> 00:03:01,360
usually the way you do it

56
00:03:01,360 --> 00:03:05,319
is by using a globally unique ID right
if it's a database table

57
00:03:05,319 --> 00:03:08,620
you have a idea of that particular row
in the table right

58
00:03:08,620 --> 00:03:11,939
so you API's usually

59
00:03:11,939 --> 00:03:16,519
I designed around that the global ID
right so when you retrieve something

60
00:03:16,519 --> 00:03:18,530
from the database for your trip
something from

61
00:03:18,530 --> 00:03:22,500
anywhere you AP I will say for example
get user data

62
00:03:22,500 --> 00:03:26,230
and then the parameter to that will be
user ID right

63
00:03:26,230 --> 00:03:30,870
and so when you do that when you use
globally unique ID's

64
00:03:30,870 --> 00:03:34,760
and you I P A API's are based around
that you need to make sure you actually

65
00:03:34,760 --> 00:03:35,819
carry out

66
00:03:35,819 --> 00:03:40,209
authorization checks before you actually
do that right so you will have to go in

67
00:03:40,209 --> 00:03:42,129
before use you that particular call

68
00:03:42,129 --> 00:03:46,349
if to make sure whether I that user has
access to that particular object and you

69
00:03:46,349 --> 00:03:47,439
need to make sure that

70
00:03:47,439 --> 00:03:51,640
a user is authenticated and there's all
those things that you have to do

71
00:03:51,640 --> 00:03:54,750
before you can carry that out right but
if you

72
00:03:54,750 --> 00:03:59,569
at but where ass the right way to add
design authorization API and build

73
00:03:59,569 --> 00:04:01,590
authorization into your application

74
00:04:01,590 --> 00:04:05,730
to make sure that whenever a new
developer a comment comes in joins your

75
00:04:05,730 --> 00:04:07,209
product who does not have

76
00:04:07,209 --> 00:04:11,150
only maps and he's had of where which
parameter comes from

77
00:04:11,150 --> 00:04:14,340
what at the assumption that any given
stage I'm

78
00:04:14,340 --> 00:04:18,350
to make sure that doesn't happen the
correct way to design such a PI would

79
00:04:18,350 --> 00:04:18,970
not be

80
00:04:18,970 --> 00:04:23,010
designing it around just a globally
unique ID but maybe

81
00:04:23,010 --> 00:04:26,550
with bypassing also occurred
authentication credentials

82
00:04:26,550 --> 00:04:30,639
along with it right and once you pass
authentication credentials

83
00:04:30,639 --> 00:04:35,470
with you API to retrieve data you could
have those kind of authorization checks

84
00:04:35,470 --> 00:04:38,860
centralized but in reality a lot of
developers will

85
00:04:38,860 --> 00:04:43,050
when when they see that they'll be out
it's extremely inefficient tete-a-tete

86
00:04:43,050 --> 00:04:47,889
the technology is very very much make
and a lot of things we have to do I

87
00:04:47,889 --> 00:04:51,080
very Emmanuel and set

88
00:04:51,080 --> 00:04:54,990
having said that there are a lot of a
lot of things that people still tend to

89
00:04:54,990 --> 00:04:55,259
%uh

90
00:04:55,259 --> 00:04:58,460
automate right for example if you I'm

91
00:04:58,460 --> 00:05:01,600
if you're a developer and as

92
00:05:01,600 --> 00:05:05,440
was hired to do have em web security
review of your application and they

93
00:05:05,440 --> 00:05:06,440
discovered

94
00:05:06,440 --> 00:05:10,560
10 XSS vulnerabilities in your in your
application right

95
00:05:10,560 --> 00:05:14,650
after fiction about six or seven you'll
start thinking well wait a minute can I

96
00:05:14,650 --> 00:05:16,960
generalizes can they make sure that

97
00:05:16,960 --> 00:05:20,530
I do actually have to do it for every
single variable

98
00:05:20,530 --> 00:05:23,870
and interpolation can I somehow make a
generic

99
00:05:23,870 --> 00:05:27,430
and then the first idea you get is too
well what about what am i

100
00:05:27,430 --> 00:05:31,530
what I'm 1 I'm gonna do is I'm gonna
HTML escape everything

101
00:05:31,530 --> 00:05:35,550
right so and that's what usually happens
right

102
00:05:35,550 --> 00:05:40,069
if like if you look at the rails I think
if you look at Django in a lot of other

103
00:05:40,069 --> 00:05:44,830
I there is some Java textbook systems
there is a way for you to go ahead and

104
00:05:44,830 --> 00:05:48,500
enable a feature which will HTML escape
everything

105
00:05:48,500 --> 00:05:52,460
right and when used email escape
everything

106
00:05:52,460 --> 00:05:56,069
there are a lot of interesting issues
that arise at that i'm gonna talk about

107
00:05:56,069 --> 00:06:00,220
but the general typical advice when we
deal with that would give to people is

108
00:06:00,220 --> 00:06:04,100
escape everything and you can do it
manually automatic

109
00:06:04,100 --> 00:06:08,479
when you do it automatically its it
seems like it's a really good way to do

110
00:06:08,479 --> 00:06:08,970
that

111
00:06:08,970 --> 00:06:12,270
to HTML everything but there are a lot
of problems

112
00:06:12,270 --> 00:06:15,400
that's for example look at this
particular coat so

113
00:06:15,400 --> 00:06:19,380
for similar I want to say that probably
people with iris last names

114
00:06:19,380 --> 00:06:24,139
single-handedly discovered more sequel
injections and cross-site scripting bags

115
00:06:24,139 --> 00:06:27,660
than probably any security consultant
individually

116
00:06:27,660 --> 00:06:31,130
in the past but if you look at this
particular piece of code

117
00:06:31,130 --> 00:06:34,990
on what we have right so let's say we
have a templating system

118
00:06:34,990 --> 00:06:38,520
that a says where we I'm in the
JavaScript

119
00:06:38,520 --> 00:06:42,220
context we assign a value to a variable
foo

120
00:06:42,220 --> 00:06:46,539
right and that that's and it's taken
from the variable called

121
00:06:46,539 --> 00:06:49,560
l-name in your templating system right
and

122
00:06:49,560 --> 00:06:54,229
you have an Irish person registering to
use your website and that

123
00:06:54,229 --> 00:06:57,280
once they registered for that I

124
00:06:57,280 --> 00:07:00,370
what do you see you see that there is a
single quote

125
00:07:00,370 --> 00:07:03,599
and there you and you are using single
quotes to I

126
00:07:03,599 --> 00:07:07,470
to quote your variables right so can
someone tell me what will be the right

127
00:07:07,470 --> 00:07:08,440
way to escape it

128
00:07:08,440 --> 00:07:13,370
do you put a backslash and friend single
quote do you HTML escape everything use

129
00:07:13,370 --> 00:07:16,210
an ampersand has 39

130
00:07:16,210 --> 00:07:23,210
any ideas what would be the right way

131
00:07:23,229 --> 00:07:27,310
now but said the right way would be to
put a backslash right

132
00:07:27,310 --> 00:07:31,120
because and I will show you why it's the
right way unfortunately

133
00:07:31,120 --> 00:07:34,449
in order for you to be able to put the
backslash in there

134
00:07:34,449 --> 00:07:38,270
you need to actually know what is the
context

135
00:07:38,270 --> 00:07:41,520
in which you are evaluating this
particular template in this particular

136
00:07:41,520 --> 00:07:42,669
case

137
00:07:42,669 --> 00:07:45,789
the context is JavaScript

138
00:07:45,789 --> 00:07:49,319
but in addition to that another piece of
information here is that

139
00:07:49,319 --> 00:07:53,009
you inside of the variable assignment
which is quoted by

140
00:07:53,009 --> 00:07:56,199
a single quote right so

141
00:07:56,199 --> 00:08:00,009
if you are apply and automated HTML
escaping

142
00:08:00,009 --> 00:08:03,139
in this particular case the way you can
escape is

143
00:08:03,139 --> 00:08:07,110
use in the second example your output is
gonna look wire for

144
00:08:07,110 --> 00:08:11,300
equals 0 ampersand past 39 kono

145
00:08:11,300 --> 00:08:15,169
and when that happens a lot of it it
kicks off a really interesting chain of

146
00:08:15,169 --> 00:08:16,970
events right

147
00:08:16,970 --> 00:08:21,639
and and that the typical and the chain
of events is

148
00:08:21,639 --> 00:08:24,909
is as follows: this will demonstrate
that what happens is that

149
00:08:24,909 --> 00:08:28,099
one of the advice that you usually give
when you have people

150
00:08:28,099 --> 00:08:32,070
developing web applications right you
say hey try to avoid using

151
00:08:32,070 --> 00:08:35,700
in HTML is that correct do we tell
people not to use any

152
00:08:35,700 --> 00:08:39,550
in HTML when they write JavaScript
applications

153
00:08:39,550 --> 00:08:43,169
yes we do right I hope and when we do
say the reason why we say that is

154
00:08:43,169 --> 00:08:47,520
because when you assign to inner HTML
and parts are we to use a controlled

155
00:08:47,520 --> 00:08:51,410
what will happen is yo obviously you can
have a Nexus S

156
00:08:51,410 --> 00:08:55,750
bear was me this is not a Nexus S talk
I'm just using this as an example right

157
00:08:55,750 --> 00:09:01,810
I'm so let's say I we tell and you not
using HTML a dangerous use in our text

158
00:09:01,810 --> 00:09:05,960
if you if you can in this particular
example let's say we want to sign the

159
00:09:05,960 --> 00:09:09,070
the value of the variable name to

160
00:09:09,070 --> 00:09:12,210
to a at value of these dev

161
00:09:12,210 --> 00:09:16,540
right so we do get element by idea if
want to achieve these the

162
00:09:16,540 --> 00:09:21,580
if we're gonna sign to inner text the
way it will appear on the page

163
00:09:21,580 --> 00:09:26,990
is actually gonna be HTML escape into
HTML entities so it will look like

164
00:09:26,990 --> 00:09:31,710
0 ampersand hash 39 con el

165
00:09:31,710 --> 00:09:35,100
and that's how it's gonna look on the
page so when the developer will

166
00:09:35,100 --> 00:09:38,670
first follow our advice and say okay I'm
not going to use it Gmail using your

167
00:09:38,670 --> 00:09:39,730
text

168
00:09:39,730 --> 00:09:43,590
everything is gonna work fine until an
Irish person registers on the website

169
00:09:43,590 --> 00:09:44,130
right

170
00:09:44,130 --> 00:09:47,880
and when they do they're gonna start
complaining about well

171
00:09:47,880 --> 00:09:51,630
what the hell why is my name looking
funny here why is my name

172
00:09:51,630 --> 00:09:56,750
lookin I like embers I please fix right
and the developers when they start

173
00:09:56,750 --> 00:09:59,110
investigating that they will see I'll
wait

174
00:09:59,110 --> 00:10:04,590
so we HTML escape this and then when we
assign it to your text HTML entities do

175
00:10:04,590 --> 00:10:05,360
not get

176
00:10:05,360 --> 00:10:09,090
evaluated so with a quick solution they
will come up with

177
00:10:09,090 --> 00:10:12,570
is that await if I sign into inner HTML

178
00:10:12,570 --> 00:10:17,750
in this particular case then 82 and
actually what's in it displays correctly

179
00:10:17,750 --> 00:10:21,090
and when that happens obviously we get
an XSS vulnerability

180
00:10:21,090 --> 00:10:24,660
interestingly I don't know if you've
ever notice when you surf on the website

181
00:10:24,660 --> 00:10:26,350
a lot of times you see that

182
00:10:26,350 --> 00:10:29,560
sometimes you see HTML entities like
this and

183
00:10:29,560 --> 00:10:33,430
in the text where they shouldn't be but
not at the time she actually see

184
00:10:33,430 --> 00:10:34,450
backslashes

185
00:10:34,450 --> 00:10:37,700
in front of interesting characters like
single quotes in double quotes when they

186
00:10:37,700 --> 00:10:40,250
display to you which shouldn't happen
right

187
00:10:40,250 --> 00:10:43,440
and usually from that you can tell a

188
00:10:43,440 --> 00:10:47,220
can have the the evolution of this
application right if

189
00:10:47,220 --> 00:10:50,640
if you see HTML entities like this what
that means is that

190
00:10:50,640 --> 00:10:53,920
someone did a security assessment of
this application

191
00:10:53,920 --> 00:10:58,450
and own them by XSS right funded by to
make says bags and people like okay

192
00:10:58,450 --> 00:11:00,790
let's just HDMI was gave everything

193
00:11:00,790 --> 00:11:03,990
if you see backslashes that usually
means that

194
00:11:03,990 --> 00:11:07,130
the application got own previously using
a sequel injection

195
00:11:07,130 --> 00:11:10,680
slack right because want to get own
using single injection

196
00:11:10,680 --> 00:11:15,050
if you to PHP app the first thing you
gonna do is enable DPC Magic Flute

197
00:11:15,050 --> 00:11:18,920
and stuff like that rightly so you
escape everything and when you do that

198
00:11:18,920 --> 00:11:22,900
you will you have those artifacts a
backslash where it shouldn't be

199
00:11:22,900 --> 00:11:26,620
and that's usually how you can tell now

200
00:11:26,620 --> 00:11:30,180
13 the want to move even further right

201
00:11:30,180 --> 00:11:33,380
let's say I you you you I find that very
able and then you wanna

202
00:11:33,380 --> 00:11:36,500
you want your application is growing and
you decided to

203
00:11:36,500 --> 00:11:39,970
added dynamically generated HTML form to
right

204
00:11:39,970 --> 00:11:43,230
so you wanna dynamically create a form
in person clicks edit

205
00:11:43,230 --> 00:11:47,490
you can create a form great text field
and assign values to you

206
00:11:47,490 --> 00:11:50,590
if you look at this cut so we have a
form we have an input

207
00:11:50,590 --> 00:11:55,200
input field with an ID name we what we
do is we get document gallon get element

208
00:11:55,200 --> 00:11:56,110
ID name

209
00:11:56,110 --> 00:11:59,680
and with the way you do the way yes I
and the values you assign it to dot

210
00:11:59,680 --> 00:12:01,030
value actually

211
00:12:01,030 --> 00:12:05,000
and when you assign 2.0 value out to be
the value of who

212
00:12:05,000 --> 00:12:08,100
guess how it's going to be shown have a
little hint

213
00:12:08,100 --> 00:12:11,650
over there it's gonna be shown again
incorrectly escape

214
00:12:11,650 --> 00:12:14,680
the get it is gonna have incorrect HTML

215
00:12:14,680 --> 00:12:19,260
entities that are not actually evaluated
in this particular case

216
00:12:19,260 --> 00:12:22,330
and then you see that

217
00:12:22,330 --> 00:12:26,350
the way you get Reed Ave to mount it
HTML entities from the input

218
00:12:26,350 --> 00:12:31,080
and by get greedy I mean an escape it is
actually very very difficult if you look

219
00:12:31,080 --> 00:12:31,510
at it

220
00:12:31,510 --> 00:12:35,700
if you look for solutions for to that
problem the only portable problem to

221
00:12:35,700 --> 00:12:36,200
that

222
00:12:36,200 --> 00:12:39,380
as a solution to that problem is to
actually create

223
00:12:39,380 --> 00:12:42,410
a dev and then assigned to

224
00:12:42,410 --> 00:12:46,350
in your HTML love the idea if and then
read enter text from it

225
00:12:46,350 --> 00:12:49,350
and this way you can an escape HD mind
it is

226
00:12:49,350 --> 00:12:53,830
see the minute you do that you have a
cross-site scripting vulnerability

227
00:12:53,830 --> 00:12:58,280
now I when with so that hopefully
demonstrates

228
00:12:58,280 --> 00:13:03,760
that HTML escaping applying these very
very simple in primitive HTML escaping

229
00:13:03,760 --> 00:13:05,410
to any sort of Sears ap

230
00:13:05,410 --> 00:13:09,460
is actually not going to work an
interesting a single quote in general is

231
00:13:09,460 --> 00:13:11,800
a very very very interesting character
recently

232
00:13:11,800 --> 00:13:15,440
a real said an XSS vulnerability where
single quote

233
00:13:15,440 --> 00:13:19,270
and was not escape by the HTML escape
function

234
00:13:19,270 --> 00:13:22,380
and then if you start digging around and
looking at the API

235
00:13:22,380 --> 00:13:26,280
for example python has a CGI HTML escape
function

236
00:13:26,280 --> 00:13:30,200
and if you look at that you will see
that it actually does not escape single

237
00:13:30,200 --> 00:13:32,830
code by the faulty

238
00:13:32,830 --> 00:13:36,770
in order for CGI escape function to
escape a single quote you will actually

239
00:13:36,770 --> 00:13:39,320
have to supply an additional parameter

240
00:13:39,320 --> 00:13:42,320
sane hey you need to escape single quote
to

241
00:13:42,320 --> 00:13:46,250
21 Python did that roomie came along and
obviously

242
00:13:46,250 --> 00:13:49,730
people in Ruby probably had no clue
about that too and they let a

243
00:13:49,730 --> 00:13:53,970
I'm supply them doesn't escape single
core question is getting a co 2

244
00:13:53,970 --> 00:13:58,350
and then it kinda got propagated and no
one actually knows why single quotes

245
00:13:58,350 --> 00:14:02,280
I'm not escape by default and my theory
is again

246
00:14:02,280 --> 00:14:05,850
is it's probably because I'm back in the
day when

247
00:14:05,850 --> 00:14:09,210
about survey primitive and things and
Irish people were registering on the

248
00:14:09,210 --> 00:14:10,170
website as they were

249
00:14:10,170 --> 00:14:13,790
so they maintain funny know hey what the
hell fix this

250
00:14:13,790 --> 00:14:18,250
and I we actually got rid of escaping
single-core that's my theory if you know

251
00:14:18,250 --> 00:14:21,460
whites the case please add do let me
know now

252
00:14:21,460 --> 00:14:24,420
to skate things correctly you have to do
a contextually and when you do

253
00:14:24,420 --> 00:14:26,660
contextually what that means is that

254
00:14:26,660 --> 00:14:30,910
you will escape things differently if
it's have JavaScript if it's a CSS if

255
00:14:30,910 --> 00:14:32,870
it's an HTML attributes

256
00:14:32,870 --> 00:14:37,320
if it's basically a whenever the context
is on the page and this has

257
00:14:37,320 --> 00:14:42,500
the problem has actually been sold right
batteries can take still escaping

258
00:14:42,500 --> 00:14:46,000
it was actually as far as I know Google
were

259
00:14:46,000 --> 00:14:49,510
the first ones to open source I'm a
contextual

260
00:14:49,510 --> 00:14:54,050
at stream parcel which would escape in
certain templates that I used internally

261
00:14:54,050 --> 00:14:56,520
by ass which will open source and turn

262
00:14:56,520 --> 00:15:00,400
I at to escape everything contextual
incorrectly so that when you have

263
00:15:00,400 --> 00:15:04,920
variable assignment with no quote it
will actually properly skate a

264
00:15:04,920 --> 00:15:08,850
single court using as special notation
that the use a Javascript

265
00:15:08,850 --> 00:15:13,030
and if you for example if you're using
I'm rails if you're writing a rails app

266
00:15:13,030 --> 00:15:16,520
right at in this particular case you can
use

267
00:15:16,520 --> 00:15:20,390
a a contextual jam it requires however
that you have a

268
00:15:20,390 --> 00:15:23,640
a job I J add a running challenge a ruby
but

269
00:15:23,640 --> 00:15:27,110
if you run in J Roby to run your Rails
app then that we're glad

270
00:15:27,110 --> 00:15:30,140
can help you so these is the code and

271
00:15:30,140 --> 00:15:34,080
say for example this particular job HTML
contextual this caper

272
00:15:34,080 --> 00:15:37,240
can be used and plug into things like
JSP

273
00:15:37,240 --> 00:15:40,380
right and use that but again

274
00:15:40,380 --> 00:15:44,500
tech is very manual in very difficult
other examples of ok with security

275
00:15:44,500 --> 00:15:45,780
solutions a game

276
00:15:45,780 --> 00:15:49,280
authorization we have to do a lot of
things manually and

277
00:15:49,280 --> 00:15:52,450
and it's really a pain in the ass
because he every time you will run into

278
00:15:52,450 --> 00:15:54,340
problems of people forgetting

279
00:15:54,340 --> 00:15:58,570
at to check the authorization excess RF
token handling

280
00:15:58,570 --> 00:16:03,200
I don't know how a how most of you guys
do excess of protection but if you wanna

281
00:16:03,200 --> 00:16:05,380
have excessive protection which is

282
00:16:05,380 --> 00:16:08,770
actually robust and will survive

283
00:16:08,770 --> 00:16:12,860
a certain browser bugs what you will
have to do is you will have to have some

284
00:16:12,860 --> 00:16:16,370
sort of cryptographic tokens

285
00:16:16,370 --> 00:16:19,870
if you wanna do it state Leslie and
those tokens will have to be handled and

286
00:16:19,870 --> 00:16:22,260
they would have to expire at some point

287
00:16:22,260 --> 00:16:25,750
and the problem with excess RF a lot of
the times that what you will happen is

288
00:16:25,750 --> 00:16:26,090
it

289
00:16:26,090 --> 00:16:30,040
you have a person opening the form in
one tab then opening 11 tap

290
00:16:30,040 --> 00:16:34,070
browsing that while they're there they
will login and reloading and this

291
00:16:34,070 --> 00:16:35,270
session will change

292
00:16:35,270 --> 00:16:39,030
and this token is tied to assess and
then they go back to the other tab

293
00:16:39,030 --> 00:16:42,980
they they start typing the super long
document the clicks at me

294
00:16:42,980 --> 00:16:46,470
but the token has expired or the session
has changed

295
00:16:46,470 --> 00:16:49,910
and you you throw them an exception
saying hey sorry

296
00:16:49,910 --> 00:16:53,240
you talkin has expired and this is

297
00:16:53,240 --> 00:16:57,210
this is again very awkward cuz your code
will has to handle a love those things

298
00:16:57,210 --> 00:17:00,490
that has to check out is that ok an
expired as a token still valid

299
00:17:00,490 --> 00:17:03,760
and if not we should we should get
another and then assumptions

300
00:17:03,760 --> 00:17:06,589
verification this is something that not
not many but

301
00:17:06,589 --> 00:17:10,150
applications actually doing for example
when you write your ap

302
00:17:10,150 --> 00:17:13,220
any few let's say to Java Absalom about

303
00:17:13,220 --> 00:17:16,490
and then you have up authentication
right usually the way you implement

304
00:17:16,490 --> 00:17:19,709
authentication is using the servlet
filter for example right

305
00:17:19,709 --> 00:17:22,760
so you have this field film top that
make sure make sure

306
00:17:22,760 --> 00:17:25,770
that the user has a valid cookin user is
authenticated

307
00:17:25,770 --> 00:17:30,670
right the problem is that do through a
lot of assumptions that will go on in

308
00:17:30,670 --> 00:17:31,520
the servlet go

309
00:17:31,520 --> 00:17:34,600
right and when you have Servlet code
issue mean that for example

310
00:17:34,600 --> 00:17:38,200
oh at this stage user has to be
authenticated the problem

311
00:17:38,200 --> 00:17:41,500
the problems start when you start
refactoring your at writing you move the

312
00:17:41,500 --> 00:17:44,430
order of filters and that you move a lot
of things

313
00:17:44,430 --> 00:17:48,200
and basically you end up removing
potentially that

314
00:17:48,200 --> 00:17:52,900
log in check and moving it elsewhere
exposing 102 servlets that

315
00:17:52,900 --> 00:17:56,030
that whose assumptions are no longer
true right

316
00:17:56,030 --> 00:17:59,440
so a lot of times in applications if you
want to have a little bit over defense

317
00:17:59,440 --> 00:18:01,330
and that's what you usually do is

318
00:18:01,330 --> 00:18:05,350
you would have some sort of precondition
style assert style checks

319
00:18:05,350 --> 00:18:09,810
in the servlet right saying at this
point I seem that user is authenticated

320
00:18:09,810 --> 00:18:13,430
I seem that user belongs to the group I
assume this and right now

321
00:18:13,430 --> 00:18:16,690
there is no easy way for you to do that
right now if you wanted to do that you

322
00:18:16,690 --> 00:18:17,770
will have to write

323
00:18:17,770 --> 00:18:21,700
a lot of code and it will get really I
because you have to say about

324
00:18:21,700 --> 00:18:25,230
the same have to use a if you if you if
you know your tech

325
00:18:25,230 --> 00:18:28,960
then you could potentially use it dude
really nicely with Java annotations but

326
00:18:28,960 --> 00:18:31,120
that will require some advanced

327
00:18:31,120 --> 00:18:34,480
techniques and I'm gonna talk about some
of them now

328
00:18:34,480 --> 00:18:38,000
yes oh these that II hopefully by the

329
00:18:38,000 --> 00:18:41,450
at this point you agree that a lot about
security technology

330
00:18:41,450 --> 00:18:46,420
is very very awkward and very manual and
a primitive in terms of

331
00:18:46,420 --> 00:18:50,620
the way it's used now security industry
I'm gonna

332
00:18:50,620 --> 00:18:53,840
let's hope this works I'm how many are
you have

333
00:18:53,840 --> 00:18:57,530
recently gave a recommendation on
addressing

334
00:18:57,530 --> 00:19:01,430
vulnerabilities in applications in the
past a six-month

335
00:19:01,430 --> 00:19:06,400
can you raise your hand 320 only only 4
really

336
00:19:06,400 --> 00:19:11,130
5 okay as okay let's ask let's change
the question how many are you

337
00:19:11,130 --> 00:19:14,500
have actually reaching an application
ever in your life that was used by more

338
00:19:14,500 --> 00:19:18,080
than 100 people

339
00:19:18,080 --> 00:19:21,590
okay so it's its its different set of
hands with the basic very early to

340
00:19:21,590 --> 00:19:24,400
intercept intersection which can it
demonstrates

341
00:19:24,400 --> 00:19:29,710
my next point right what we have here is
would have people

342
00:19:29,710 --> 00:19:33,330
on one side software engineers right we
have this camp of people who are

343
00:19:33,330 --> 00:19:34,500
actually

344
00:19:34,500 --> 00:19:38,480
very interested in writing software
launching new features its a rating

345
00:19:38,480 --> 00:19:42,260
a shipping products and doing a lot of
this interesting things

346
00:19:42,260 --> 00:19:46,610
and security to them is is just and
neither

347
00:19:46,610 --> 00:19:50,020
is just another thing to do right they
have to do you I design a have to

348
00:19:50,020 --> 00:19:53,420
look at the database schema have to
which you look at the API

349
00:19:53,420 --> 00:19:57,200
all those things and they have to make
it secure right to security is just

350
00:19:57,200 --> 00:20:00,500
another thing for them and they may not
necessarily have the same Intel

351
00:20:00,500 --> 00:20:03,510
as the other camp where we here to
search is

352
00:20:03,510 --> 00:20:06,820
a lot of very smart and bring in people
who are working

353
00:20:06,820 --> 00:20:09,880
on on trying to

354
00:20:09,880 --> 00:20:13,110
find new ways to exploit in New

355
00:20:13,110 --> 00:20:16,120
on their ability find I

356
00:20:16,120 --> 00:20:19,760
new ways to bypass mitigation protection
that sector and these are very clever

357
00:20:19,760 --> 00:20:20,620
people to

358
00:20:20,620 --> 00:20:24,900
and they spend a lot of time looking at
your reverse engineering code

359
00:20:24,900 --> 00:20:28,960
looking at upset behavior and coming up
with all this cool new attacks

360
00:20:28,960 --> 00:20:32,860
the problem is that and one of the
reasons why I love this technology

361
00:20:32,860 --> 00:20:36,620
is very kind of primitive Emmanuel is
because the intersection

362
00:20:36,620 --> 00:20:41,990
above the STU group is is very very tiny
it's very very small

363
00:20:41,990 --> 00:20:45,750
at very send only accept only you hear
about companies

364
00:20:45,750 --> 00:20:49,290
have been actually a security
engineering department

365
00:20:49,290 --> 00:20:53,860
right I'm so a lot of companies these
days already have a security team

366
00:20:53,860 --> 00:20:57,770
and security team is usually responsible
for a penetration test source code

367
00:20:57,770 --> 00:20:59,480
reviews et cetera

368
00:20:59,480 --> 00:21:03,600
but very few companies actually have
security engineer switches

369
00:21:03,600 --> 00:21:09,150
people who have the mindset of a
security researcher people who actually

370
00:21:09,150 --> 00:21:12,380
know and understand that 00 if you have
a one thought all black one

371
00:21:12,380 --> 00:21:17,090
small bike very low impact but then if
you have ten of those low-impact bags

372
00:21:17,090 --> 00:21:20,470
you can actually chain them and that
make it so that

373
00:21:20,470 --> 00:21:25,350
you can create one critical bike I
double the state ten tiny bags right

374
00:21:25,350 --> 00:21:29,470
and we have this kind creative way of
thinking about applications and

375
00:21:29,470 --> 00:21:31,100
assumptions and breaking them

376
00:21:31,100 --> 00:21:36,450
right so and if we if you get these
people but also get people who also

377
00:21:36,450 --> 00:21:40,390
right software no software know how to
write good self because

378
00:21:40,390 --> 00:21:43,440
let's be honest right I security
researchers when they write code they

379
00:21:43,440 --> 00:21:44,280
really terrible

380
00:21:44,280 --> 00:21:50,040
at writing code right especially writing
reusable a nice looking car right i mean

381
00:21:50,040 --> 00:21:53,400
I'm pretty sure all of us have written
fis is at that rate Cedric

382
00:21:53,400 --> 00:21:56,570
but once you start looking at someone
else's security code I know how many

383
00:21:56,570 --> 00:21:57,430
have you looked at

384
00:21:57,430 --> 00:22:01,310
and map for example right it's pretty
scary but anyway

385
00:22:01,310 --> 00:22:04,590
when you look at the code any sort a
coat you will see that security people

386
00:22:04,590 --> 00:22:05,890
do not know how to write code

387
00:22:05,890 --> 00:22:09,850
right we we spend a lot of time making
sure that code is sick you and there's a

388
00:22:09,850 --> 00:22:10,900
lot of checks but

389
00:22:10,900 --> 00:22:14,720
from the design perspective from
usability its not made a

390
00:22:14,720 --> 00:22:18,650
nice piece of code to we need that
intersection of security engineering to

391
00:22:18,650 --> 00:22:19,320
grow

392
00:22:19,320 --> 00:22:22,720
and that took which will hopefully help
us to

393
00:22:22,720 --> 00:22:26,760
I'm difficult problems like static
analysis

394
00:22:26,760 --> 00:22:30,770
right and so so it's interesting to see
that

395
00:22:30,770 --> 00:22:34,480
we are trying to kind of provide
remedies for all have the same terms

396
00:22:34,480 --> 00:22:38,370
but there is very very few people who
are actually working on

397
00:22:38,370 --> 00:22:42,990
on actually actually fixing the
technology right

398
00:22:42,990 --> 00:22:46,570
and I can see that if you are breaking
stuff right if your security researcher

399
00:22:46,570 --> 00:22:50,470
and you like breaking stuff and finding
bugs they can see that it's exciting I

400
00:22:50,470 --> 00:22:51,310
can see

401
00:22:51,310 --> 00:22:55,580
I it's a little bit romantic that you a
hack in you breaking stuff it's cool

402
00:22:55,580 --> 00:22:59,590
but if US security company that tries to
fix problems tried by doing static

403
00:22:59,590 --> 00:23:00,320
analysis

404
00:23:00,320 --> 00:23:04,170
web application firewalls et cetera et
cetera then it's kinda funny that you

405
00:23:04,170 --> 00:23:06,360
don't think the tag but you wanna

406
00:23:06,360 --> 00:23:10,820
providers can patchy security solution

407
00:23:10,820 --> 00:23:16,010
at one of the reasons maybe one of the
explanations for this is the mindset

408
00:23:16,010 --> 00:23:19,460
that we have right not right now for
example if I told you now

409
00:23:19,460 --> 00:23:23,950
hey guys let's assume all love you right
although you have your abs in Java right

410
00:23:23,950 --> 00:23:24,700
if I told you

411
00:23:24,700 --> 00:23:27,990
hey guys I have this awesome security
solution

412
00:23:27,990 --> 00:23:32,020
it will it solves it solves sequel
injection right

413
00:23:32,020 --> 00:23:37,600
it's all sequel injections and it solves
a and I saw score site scripting to

414
00:23:37,600 --> 00:23:41,080
first question you gonna ask me is it
gonna work on my

415
00:23:41,080 --> 00:23:44,360
that someone wrote long time ago
probably interns right

416
00:23:44,360 --> 00:23:47,630
there Road long time ago and is it going
to work on my abs so there's this

417
00:23:47,630 --> 00:23:48,820
mentality that

418
00:23:48,820 --> 00:23:52,730
any new security technology a security
solution that we come up with

419
00:23:52,730 --> 00:23:55,930
has to work on this broken old at

420
00:23:55,930 --> 00:24:00,250
right and and then another thing that
very interesting is

421
00:24:00,250 --> 00:24:04,730
will it work on my outsource that right
if you outsourcing your primary ap

422
00:24:04,730 --> 00:24:08,309
I mean to put do a little bit over mean
here at if you have in your

423
00:24:08,309 --> 00:24:13,430
outsource at problems I feel bad for you
son I got 99 problems but you up 81

424
00:24:13,430 --> 00:24:14,290
right

425
00:24:14,290 --> 00:24:18,250
if you outsourcing your kind of if
you're searching your primary abt than

426
00:24:18,250 --> 00:24:19,270
you already in trouble

427
00:24:19,270 --> 00:24:22,770
right so so this mentality of

428
00:24:22,770 --> 00:24:27,320
I will it work on the app my a2 is wrong
we should change it right and because

429
00:24:27,320 --> 00:24:31,200
what happens now as we have been
potentially cool technology

430
00:24:31,200 --> 00:24:35,720
that is actually not getting any any

431
00:24:35,720 --> 00:24:40,070
no one is actually using it because
everyone keeps dissing on it and saying

432
00:24:40,070 --> 00:24:43,770
how well it doesn't want an existing
after request code changes Laila

433
00:24:43,770 --> 00:24:47,590
and it kinda hold because people still
create new apt right people do it would

434
00:24:47,590 --> 00:24:49,740
only have all this legacy apt

435
00:24:49,740 --> 00:24:52,830
we have new applications being created
every day right I'm sure you have

436
00:24:52,830 --> 00:24:54,059
written your laps

437
00:24:54,059 --> 00:24:57,590
hopefully and when this new apk I
created

438
00:24:57,590 --> 00:25:00,790
because of that we we keep having this
we keep

439
00:25:00,790 --> 00:25:04,410
those abs keep using old technologies
that are broken

440
00:25:04,410 --> 00:25:08,240
and then we kinda stuck in this loop
right

441
00:25:08,240 --> 00:25:11,420
and another thing which is kinda
interesting again my fear you may not

442
00:25:11,420 --> 00:25:13,110
necessarily agree is

443
00:25:13,110 --> 00:25:17,400
lot every coming day since and that and
advice is based on these kind of like

444
00:25:17,400 --> 00:25:19,760
nineties mentality where what we do is

445
00:25:19,760 --> 00:25:24,020
we say back in the day in the nineties
when you were doing security

446
00:25:24,020 --> 00:25:27,510
you would most likely work unit CNC
blast last code

447
00:25:27,510 --> 00:25:32,190
a and you would-be looking for memory
management vulnerabilities right

448
00:25:32,190 --> 00:25:35,970
and when you look for memory management
on their bots got a lot of a sign a

449
00:25:35,970 --> 00:25:38,400
lease is right the integer overflows

450
00:25:38,400 --> 00:25:42,160
and you have to check when you with
check at the boundaries of the boppers

451
00:25:42,160 --> 00:25:44,130
to make sure you don't go over right

452
00:25:44,130 --> 00:25:48,440
and back in the day it was fine to say
hey you know what every time you do an

453
00:25:48,440 --> 00:25:50,010
arithmetic operation

454
00:25:50,010 --> 00:25:53,490
I want you to actually check for integer
overflows right

455
00:25:53,490 --> 00:25:57,440
and I don't know if you've seen code
that does into Joe flow protection right

456
00:25:57,440 --> 00:26:01,270
if you look at the code that does more
or less complex operation not just

457
00:26:01,270 --> 00:26:02,640
adding two things but state

458
00:26:02,640 --> 00:26:06,780
adds two things and multiplies or
something it's gonna turn into a really

459
00:26:06,780 --> 00:26:07,110
long

460
00:26:07,110 --> 00:26:10,260
a statement with a lot of conditions

461
00:26:10,260 --> 00:26:13,910
where people will minus one from the
other is make sure that it's let's

462
00:26:13,910 --> 00:26:16,000
listen this multiply divide

463
00:26:16,000 --> 00:26:19,160
and then compare palisade the code
becomes really really and read a book

464
00:26:19,160 --> 00:26:22,300
once you do that so back in the day

465
00:26:22,300 --> 00:26:26,240
it was okay to do that right however
likely now

466
00:26:26,240 --> 00:26:29,920
the technology that we have that we're
writing our web applications in

467
00:26:29,920 --> 00:26:31,460
hopefully nobody is right in your

468
00:26:31,460 --> 00:26:35,660
I web applications and see these days
right if you're doing that that's

469
00:26:35,660 --> 00:26:39,080
that's super cool but the tech we have
now

470
00:26:39,080 --> 00:26:42,470
say Java we have a whatever Ruby

471
00:26:42,470 --> 00:26:45,930
all this popular technologies must have
you are probably writing absent Java

472
00:26:45,930 --> 00:26:48,220
right I'm guessing that is that correct

473
00:26:48,220 --> 00:26:52,490
yeah how many have you have to have a
aP's

474
00:26:52,490 --> 00:26:57,180
yet 239 I mean if you have room the
app's

475
00:26:57,180 --> 00:27:03,320
I mean you don't have any app's cases
someone is lying okay three

476
00:27:03,320 --> 00:27:06,880
alright so the idea is that and
technology now

477
00:27:06,880 --> 00:27:10,410
is actually very very advanced and it
provides us with a lot of ways to

478
00:27:10,410 --> 00:27:12,980
actually make all of those things a lot
easier

479
00:27:12,980 --> 00:27:16,780
but the problem is that because the
basic a security industry has evolved

480
00:27:16,780 --> 00:27:20,290
from from kinda nineties right where was
okay to be yeah well

481
00:27:20,290 --> 00:27:24,080
you have to check it every time and then
it we can I went along and

482
00:27:24,080 --> 00:27:28,640
the mentality has not changed rack so
one of the things that I wanna talk

483
00:27:28,640 --> 00:27:29,300
about it

484
00:27:29,300 --> 00:27:33,000
will be deeper and and and introduce you

485
00:27:33,000 --> 00:27:36,460
one of the ways to use current
technology in Java to actually do

486
00:27:36,460 --> 00:27:37,780
something cool is this

487
00:27:37,780 --> 00:27:41,030
was strings that everywhere right

488
00:27:41,030 --> 00:27:45,670
saying that every way they say there yet
i love u API's if you look at any API

489
00:27:45,670 --> 00:27:48,770
at to redone traffic data is gonna
return it

490
00:27:48,770 --> 00:27:52,140
stream to your right and that one my my
guess why

491
00:27:52,140 --> 00:27:57,030
why we have strings Airways again its
yet another artifact of

492
00:27:57,030 --> 00:28:00,910
feet right way back in the day when used
to write absolutely had is you had

493
00:28:00,910 --> 00:28:02,000
stripes and

494
00:28:02,000 --> 00:28:05,780
and character buffer is right and when
you have a character buffer you read

495
00:28:05,780 --> 00:28:06,970
character by for

496
00:28:06,970 --> 00:28:10,960
when you cast it to extract and then and
then you do your magic but it was all

497
00:28:10,960 --> 00:28:12,520
character buffers

498
00:28:12,520 --> 00:28:15,990
and then the thing is that 12 started
moving to Rabat apps

499
00:28:15,990 --> 00:28:20,440
the same people said oh wait I was so we
have charter by first but now we have

500
00:28:20,440 --> 00:28:21,320
strings

501
00:28:21,320 --> 00:28:25,190
they translate directly and kinda
translated them directly and now we have

502
00:28:25,190 --> 00:28:28,500
strings everywhere and there is no
reason why we need to use Stream Direct

503
00:28:28,500 --> 00:28:32,730
because reeling we just have types so if
you look at Java the right types in

504
00:28:32,730 --> 00:28:34,920
shower right and it's a type safe
language

505
00:28:34,920 --> 00:28:38,390
so what does that mean that means that
instead to return it when you do get

506
00:28:38,390 --> 00:28:41,240
parameter instead of returning strain

507
00:28:41,240 --> 00:28:44,679
you could have it retired what a

508
00:28:44,679 --> 00:28:48,900
HTTP parameter attack right

509
00:28:48,900 --> 00:28:51,790
nothing stops us from doing that we
could have that and then we could have a

510
00:28:51,790 --> 00:28:53,880
whole type iraqi where

511
00:28:53,880 --> 00:28:57,320
where they will be interfaces that
sector which will provide you with

512
00:28:57,320 --> 00:28:59,059
different ways to do things but

513
00:28:59,059 --> 00:29:03,140
there is no reason why we need to stick
to strange right obviously

514
00:29:03,140 --> 00:29:06,750
there I really good advantages of that I
a you you get

515
00:29:06,750 --> 00:29:10,650
the type safety so when you out showing
something

516
00:29:10,650 --> 00:29:14,640
on them on the page if you just plain
something you can actually based on the

517
00:29:14,640 --> 00:29:15,600
tide

518
00:29:15,600 --> 00:29:19,070
say whether you need to escape it or not
the information

519
00:29:19,070 --> 00:29:22,850
that this particular piece of data is
entrusted travels with this variable

520
00:29:22,850 --> 00:29:26,470
in the tight right you can also
associate meta data with it

521
00:29:26,470 --> 00:29:29,309
you can do a lot of interesting things
whether this particular object has been

522
00:29:29,309 --> 00:29:30,040
validated

523
00:29:30,040 --> 00:29:34,120
has been authenticated Trade Center you
can do a lot of cool stuff

524
00:29:34,120 --> 00:29:38,330
the problem obviously because we have
these pilot legacy code now

525
00:29:38,330 --> 00:29:41,760
if you do that it's gonna throw ins at
security air to

526
00:29:41,760 --> 00:29:45,070
said gonna say hey this is actually in
secure operation could this particular

527
00:29:45,070 --> 00:29:46,490
date is tainted and its cool

528
00:29:46,490 --> 00:29:50,770
in this particular case because you see
how taint is actually propagated onto

529
00:29:50,770 --> 00:29:51,450
the

530
00:29:51,450 --> 00:29:54,670
string where tainted string is
interpolated in

531
00:29:54,670 --> 00:29:58,830
right so lasting peace last got coolness

532
00:29:58,830 --> 00:30:03,120
the final string will be tainted to
close they propagate the take

533
00:30:03,120 --> 00:30:06,660
so it's very awesome right and that and
the right couple of things that you need

534
00:30:06,660 --> 00:30:07,540
to know about

535
00:30:07,540 --> 00:30:11,420
in tonight so intense anger at three
main things

536
00:30:11,420 --> 00:30:14,809
were 18 source so the source of data
data

537
00:30:14,809 --> 00:30:18,000
usually it would be an ATP parameter or
something like this:

538
00:30:18,000 --> 00:30:22,020
then there is at attain think Shaq's Bay
is

539
00:30:22,020 --> 00:30:26,280
what you got wet would be a security
sensitive function it could be a

540
00:30:26,280 --> 00:30:29,880
sequel query it could be a file
operation it could be. Val

541
00:30:29,880 --> 00:30:34,070
it could be anything that sensitive and
another very important thing is that

542
00:30:34,070 --> 00:30:39,700
you want taint to be propagated because
remember if you do a a dynamic sequel

543
00:30:39,700 --> 00:30:41,490
cleary in Ruby for example

544
00:30:41,490 --> 00:30:44,740
you write select all from the senate a

545
00:30:44,740 --> 00:30:49,630
where phooey Kewell's and then you will
use string interpolation in a right

546
00:30:49,630 --> 00:30:53,330
so you want to make sure that taint is
propagated onto the resulting string

547
00:30:53,330 --> 00:30:56,770
and and its in the scene correctly

548
00:30:56,770 --> 00:31:00,179
and a couple of interesting cases right
you can concatenate and add strings

549
00:31:00,179 --> 00:31:03,300
like here like we see their clean plus
stated

550
00:31:03,300 --> 00:31:07,140
four should be tainted if you clean with
tainted

551
00:31:07,140 --> 00:31:10,160
in this particular case resulting should
be tainted

552
00:31:10,160 --> 00:31:13,870
and then we'll be there are certain
other functions like say tainted I G sap

553
00:31:13,870 --> 00:31:15,740
which let you substitute sings

554
00:31:15,740 --> 00:31:18,920
in this particular case the result that
street area resulting Singh should be

555
00:31:18,920 --> 00:31:20,559
tainted to

556
00:31:20,559 --> 00:31:23,910
there is a way for you to my texting
isn't a tid by just calling dot

557
00:31:23,910 --> 00:31:26,950
untainted yeah

558
00:31:26,950 --> 00:31:31,230
so cutting back ten propagation is very
very important so

559
00:31:31,230 --> 00:31:36,460
you may wonder if the system is so
awesome why is no one using

560
00:31:36,460 --> 00:31:40,440
any ideas because it's pretty awesome
right if you have a ruby ap

561
00:31:40,440 --> 00:31:44,179
and you enable safe levels and you my
case should be parameters a secure and

562
00:31:44,179 --> 00:31:46,030
then you modify your sequel

563
00:31:46,030 --> 00:31:49,990
I code to never do untainted date to
never trust

564
00:31:49,990 --> 00:31:53,760
never use anti today at 10 today to then
you should be fine

565
00:31:53,760 --> 00:31:57,309
you will not have any single injection

566
00:31:57,309 --> 00:32:02,000
wise nobody uses well I actually planned
it that way

567
00:32:02,000 --> 00:32:05,549
why the reason why is because 8
inflexible

568
00:32:05,549 --> 00:32:08,660
a its inflexible and be its binary

569
00:32:08,660 --> 00:32:11,809
and we'll talk about each and

570
00:32:11,809 --> 00:32:15,070
in a little more detail so wise and
inflexible like to show you an example

571
00:32:15,070 --> 00:32:17,130
for example you have Eve out

572
00:32:17,130 --> 00:32:22,230
foo and then it will show you a security
air that means that evolve function

573
00:32:22,230 --> 00:32:27,880
actually has a on code that says if
tainted through a security area right

574
00:32:27,880 --> 00:32:32,890
so that's file operation five methods so
do other security-related

575
00:32:32,890 --> 00:32:35,929
things like say sand and and et cetera

576
00:32:35,929 --> 00:32:41,179
so they're a bunch of standard methods
that actually checked it ain't

577
00:32:41,179 --> 00:32:45,910
the problem is that and a lotta times
the tainting system is also used by

578
00:32:45,910 --> 00:32:50,610
an LRG security system for example if
you look at ruby and you look at

579
00:32:50,610 --> 00:32:54,280
will be safe levels you will I want to
go to go to

580
00:32:54,280 --> 00:32:58,340
force level the last level it's crazy
what they doing is

581
00:32:58,340 --> 00:33:04,020
the effectively creating try trying to
create at sandbox one trusted coat

582
00:33:04,020 --> 00:33:07,140
right now what they doing is the

583
00:33:07,140 --> 00:33:11,360
trying to I may be able to come up with
more rules for it and use it

584
00:33:11,360 --> 00:33:15,559
0 more widely and we need to make it can
take still has a demonstrated because

585
00:33:15,559 --> 00:33:16,830
its binary

586
00:33:16,830 --> 00:33:20,570
because if the binary ness there are a
lot of ways for you to actually bypass

587
00:33:20,570 --> 00:33:22,570
that system

588
00:33:22,570 --> 00:33:26,000
so practical again we need to keep in
mind that majority about do not run in

589
00:33:26,000 --> 00:33:26,760
traffic code

590
00:33:26,760 --> 00:33:31,420
necklines wraps and we need to try to
solve the problems that applications

591
00:33:31,420 --> 00:33:32,929
actually have

592
00:33:32,929 --> 00:33:36,630
again not try to send boxing
configurable

593
00:33:36,630 --> 00:33:39,850
let me choose sources over and trusted
data

594
00:33:39,850 --> 00:33:43,110
and sinks right I want to be able to say
a fine now

595
00:33:43,110 --> 00:33:47,720
only care about say eve I'll and I only
care about file operations

596
00:33:47,720 --> 00:33:51,610
and the way I read my data is from this
particular method

597
00:33:51,610 --> 00:33:55,700
do the rest for me right and then unit
also be able to

598
00:33:55,700 --> 00:33:59,090
configure and painting so you can
specify and say hey

599
00:33:59,090 --> 00:34:02,590
I wanna make sure that if but this
particular code this particular tainted

600
00:34:02,590 --> 00:34:03,309
string

601
00:34:03,309 --> 00:34:06,620
goes into this particular method I
wanted to be my cath

602
00:34:06,620 --> 00:34:10,599
safe for these particular context and it
will become

603
00:34:10,599 --> 00:34:14,530
more Mar clear so introducing grab it up

604
00:34:14,530 --> 00:34:17,799
got it up with a cool name calling from
a movie called that

605
00:34:17,799 --> 00:34:21,760
King that side soviet movie it's really
cool you should check it out

606
00:34:21,760 --> 00:34:27,090
it's a science fiction to get supper is
a runtime can text I'll try I think

607
00:34:27,090 --> 00:34:28,409
tracking systems

608
00:34:28,409 --> 00:34:32,280
we've implemented the prototype in Java
and Ruby which have a very different

609
00:34:32,280 --> 00:34:33,389
languages

610
00:34:33,389 --> 00:34:37,520
and it has really cool features states
can text or right meaning that

611
00:34:37,520 --> 00:34:42,070
once you have a tainted string it
forever remain stained

612
00:34:42,070 --> 00:34:45,270
it's tainted forever and that the way

613
00:34:45,270 --> 00:34:50,590
it becomes safe it only it only become
say for certain context

614
00:34:50,590 --> 00:34:54,210
so you can save it so what you have a
tainted string if you HTML

615
00:34:54,210 --> 00:34:58,119
escape tainted string it become safer
HTML context

616
00:34:58,119 --> 00:35:01,800
if you validate the path of above that
variable it becomes

617
00:35:01,800 --> 00:35:05,060
safe for filepath context

618
00:35:05,060 --> 00:35:09,440
so they rather different context in this
context a traveling with the data

619
00:35:09,440 --> 00:35:13,740
and then and it's configurable there is
a cover Gration father effectively let

620
00:35:13,740 --> 00:35:15,950
you specify and I'll see an example
later

621
00:35:15,950 --> 00:35:19,790
it effectively let you say okay this is
my taint or is this is my tainting this

622
00:35:19,790 --> 00:35:21,340
is my cleaner

623
00:35:21,340 --> 00:35:25,520
and then the coolest thing it it doesn't
require any changes in the application

624
00:35:25,520 --> 00:35:28,869
at all right which is based on our
current

625
00:35:28,869 --> 00:35:32,030
broken assumptions about how security
solution should work

626
00:35:32,030 --> 00:35:35,320
this is awesome right for Java version

627
00:35:35,320 --> 00:35:39,020
on Jul uses a single class file
transformer

628
00:35:39,020 --> 00:35:42,640
it's actually a really really amazing
feature

629
00:35:42,640 --> 00:35:47,070
just heavily heavily underused in the
security

630
00:35:47,070 --> 00:35:50,250
in the application security a area

631
00:35:50,250 --> 00:35:53,400
it was introduced in job five allows you
to do

632
00:35:53,400 --> 00:35:56,570
is it a lot instrument classes means

633
00:35:56,570 --> 00:35:59,890
it lets you modify the code of any

634
00:35:59,890 --> 00:36:05,070
or every single class in the JVM
including classes that have been loaded

635
00:36:05,070 --> 00:36:08,550
and previously before Java five if you
ever wanted to do something like this

636
00:36:08,550 --> 00:36:12,619
you message with class loaders you have
to so I create your own class lower than

637
00:36:12,619 --> 00:36:14,210
your class loader will go

638
00:36:14,210 --> 00:36:17,630
and low this class and modified you need
to do that now

639
00:36:17,630 --> 00:36:21,660
now you have to check specified one
command line argument to Java

640
00:36:21,660 --> 00:36:25,790
with your jar and the bike good is going
to be sent to you

641
00:36:25,790 --> 00:36:29,369
for a for instrumentation and you can
and modified

642
00:36:29,369 --> 00:36:33,109
effectively adding anything %ah you can
even modify

643
00:36:33,109 --> 00:36:36,440
JDK classes by Jerry Classico whatever
the

644
00:36:36,440 --> 00:36:39,710
fans classes you can actually go and
modify them

645
00:36:39,710 --> 00:36:43,430
it's called Oracle signing it was
implemented by

646
00:36:43,430 --> 00:36:46,859
just the press he was in the internet
Google

647
00:36:46,859 --> 00:36:51,420
now one of the things that you will
probably know and probably ask a man

648
00:36:51,420 --> 00:36:53,170
have a question about so

649
00:36:53,170 --> 00:36:56,340
you in order for you to have a system
like this and for it to work you need to

650
00:36:56,340 --> 00:36:57,300
modify string

651
00:36:57,300 --> 00:37:01,619
object right String class in fact and
restaurant ways to do it

652
00:37:01,619 --> 00:37:05,280
to do that for civilian job listings
that you mutable means once you create a

653
00:37:05,280 --> 00:37:06,359
job listing

654
00:37:06,359 --> 00:37:10,300
you can never modified the only way for
you to modify anything in that string is

655
00:37:10,300 --> 00:37:11,830
to create another string

656
00:37:11,830 --> 00:37:16,400
yet and that the if you thought looking
online for some examples on how to

657
00:37:16,400 --> 00:37:17,190
modify

658
00:37:17,190 --> 00:37:21,210
and just plain that you can even find
some papers about shall attain tracking

659
00:37:21,210 --> 00:37:22,250
online

660
00:37:22,250 --> 00:37:25,369
they will tell you our solution only
works with

661
00:37:25,369 --> 00:37:29,820
these particular JVM implementation from
whatever IBM

662
00:37:29,820 --> 00:37:33,810
because it crashes it takes a sec fault
on their on

663
00:37:33,810 --> 00:37:37,580
Oracle's GBM and the reason for that is
because

664
00:37:37,580 --> 00:37:41,450
because we are using strings everywhere

665
00:37:41,450 --> 00:37:44,800
son well the son actually edit a bunch
of

666
00:37:44,800 --> 00:37:47,910
optimizations into the JVM

667
00:37:47,910 --> 00:37:51,680
but the String class and about the
assumption sexy has assumptions about

668
00:37:51,680 --> 00:37:53,680
the offset of certain fields

669
00:37:53,680 --> 00:37:57,330
Nativity so it can quickly john there
because we use string so much

670
00:37:57,330 --> 00:38:00,690
they actually optimize and they should
get a lot of cool things with

671
00:38:00,690 --> 00:38:05,310
with that but if you start modifying the
class file itself

672
00:38:05,310 --> 00:38:08,980
using using using basically by modifying
it in the code

673
00:38:08,980 --> 00:38:12,900
you will get in trouble it will
basically crack

674
00:38:12,900 --> 00:38:15,980
Jul 5 agents solve the problem the way
it works is basically you write your

675
00:38:15,980 --> 00:38:18,109
class you write your class file transfer
my

676
00:38:18,109 --> 00:38:21,380
you you it will give you an effectively
a bite irate

677
00:38:21,380 --> 00:38:24,670
with the bytecode love the class and
then that there is a really good

678
00:38:24,670 --> 00:38:26,710
documentation online

679
00:38:26,710 --> 00:38:32,060
allows you to modify classes that are
being loaded but also classes that were

680
00:38:32,060 --> 00:38:34,500
loaded before you age into

681
00:38:34,500 --> 00:38:38,340
because on stage job last starts it was
String class would have probably already

682
00:38:38,340 --> 00:38:39,440
been loaded

683
00:38:39,440 --> 00:38:44,340
but you can still instrumented later on
very early in the process

684
00:38:44,340 --> 00:38:48,460
the only limitation on bases that you
cannot add new fields

685
00:38:48,460 --> 00:38:52,050
and that's an interesting limitation
read that you cannot at Newfield

686
00:38:52,050 --> 00:38:55,550
well you can add new methods you cannot
change

687
00:38:55,550 --> 00:38:59,680
say if someone declare something final
you cannot modified

688
00:38:59,680 --> 00:39:05,470
and we used a owed o/w 2000 byte code
modification library it's a cool library

689
00:39:05,470 --> 00:39:06,310
that allows you

690
00:39:06,310 --> 00:39:09,920
too easy a instrument bike everyone is
using and then there are libraries built

691
00:39:09,920 --> 00:39:11,690
on top of that

692
00:39:11,690 --> 00:39:15,609
right remember that strings a mutable
and instrumentation doesn't let you add

693
00:39:15,609 --> 00:39:19,310
anything any new fields to any class you
can I do that all you can do is

694
00:39:19,310 --> 00:39:23,230
effectively modify the code of methods

695
00:39:23,230 --> 00:39:26,920
where would we starting date if you look
at the String class we looked at the

696
00:39:26,920 --> 00:39:28,590
everything is fine now

697
00:39:28,590 --> 00:39:32,220
because String class itself is final
with what that means is that you cannot

698
00:39:32,220 --> 00:39:34,670
create a subclass a string

699
00:39:34,670 --> 00:39:38,030
I again my guess is this has been done
to

700
00:39:38,030 --> 00:39:41,840
be able to implement optimizations right
for Strings

701
00:39:41,840 --> 00:39:45,250
has a a character array which stores the
string itself

702
00:39:45,250 --> 00:39:50,190
and he has two interesting they both
offset and account

703
00:39:50,190 --> 00:39:54,490
again as you can see all these variables
I final so which ones they assigned

704
00:39:54,490 --> 00:39:58,520
you can't do anything about it so the
way it happens if say

705
00:39:58,520 --> 00:40:02,200
if we have a string that says cool mist
the best drink ever

706
00:40:02,200 --> 00:40:06,210
and restore create new job listing the
way in turn is gonna be represented is

707
00:40:06,210 --> 00:40:11,070
of it is going to be 0 and the count is
going to be 27 basically the links to

708
00:40:11,070 --> 00:40:12,359
the stream

709
00:40:12,359 --> 00:40:15,890
the cool thing that they do is when you
call a substring

710
00:40:15,890 --> 00:40:20,140
on the street like this what they will
do if you call substring

711
00:40:20,140 --> 00:40:24,210
up seven the gonna create new Java
String

712
00:40:24,210 --> 00:40:28,640
but it will use the same character irate

713
00:40:28,640 --> 00:40:31,720
and the only thing it will adjust in
Houston that he will return

714
00:40:31,720 --> 00:40:35,310
is the offset encounter so the minute
you do I

715
00:40:35,310 --> 00:40:39,810
s up seeing on foo its gonna use the
same banking character a because it's

716
00:40:39,810 --> 00:40:41,830
immutable because you can I change it

717
00:40:41,830 --> 00:40:44,859
they can do that they do that they just
offset and length and then you have a

718
00:40:44,859 --> 00:40:45,460
new

719
00:40:45,460 --> 00:40:49,310
view of the street you don't actually
have a new string we have a view over up

720
00:40:49,310 --> 00:40:50,780
the street

721
00:40:50,780 --> 00:40:54,660
so once we have that where would you
start a nato well after it

722
00:40:54,660 --> 00:40:59,460
can sit in a bunch of solutions someone
propose that we do this

723
00:40:59,460 --> 00:41:05,599
what we do is we essentially take at the
beginning of that Chad character array

724
00:41:05,599 --> 00:41:09,109
and we hope jag the first whatever and
back

725
00:41:09,109 --> 00:41:12,609
it to store our tainting data

726
00:41:12,609 --> 00:41:16,109
and the it working we can get away with
it by doing a simple trick

727
00:41:16,109 --> 00:41:19,280
just like they do with substrings what
we do is we

728
00:41:19,280 --> 00:41:22,880
just the offset and adjust the count

729
00:41:22,880 --> 00:41:26,020
well count in this particular case is
extinct 27

730
00:41:26,020 --> 00:41:30,530
but they did that originally it was one
long string without tainted dated stored

731
00:41:30,530 --> 00:41:31,619
in line

732
00:41:31,619 --> 00:41:35,130
but when we called substring on its
kinda like a substring we've move the

733
00:41:35,130 --> 00:41:36,030
pointer

734
00:41:36,030 --> 00:41:39,840
and then no one can actually see that
data well the strings cannot see the

735
00:41:39,840 --> 00:41:40,380
date

736
00:41:40,380 --> 00:41:43,520
so I what changes actually invisible to
the at

737
00:41:43,520 --> 00:41:47,859
but we can still try to get access to it
out in our case we used

738
00:41:47,859 --> 00:41:52,490
reflection to store a field that a value
and get access to it whenever we need to

739
00:41:52,490 --> 00:41:53,460
reflection is

740
00:41:53,460 --> 00:41:57,230
actually kinda slow but in latest Java 7
they introduced

741
00:41:57,230 --> 00:42:00,160
couple love you think so we're gonna
plan experimenting with that what does

742
00:42:00,160 --> 00:42:01,910
it ain't my could contain

743
00:42:01,910 --> 00:42:06,599
it contains the ten Micah a basically
some some sort of Micah saying that out

744
00:42:06,599 --> 00:42:08,180
this is out a marker

745
00:42:08,180 --> 00:42:13,480
and its stores can take still safety bit
so you have the safety be that say I

746
00:42:13,480 --> 00:42:17,859
yeah this is safe for sequel is a safe
place to mail this assay for this

747
00:42:17,859 --> 00:42:22,750
and then we have what we do is want to
configure sources and sinks

748
00:42:22,750 --> 00:42:26,070
with effectively modify your co to look
like this for example

749
00:42:26,070 --> 00:42:30,599
if you have get parameter method in your
HTTP request object

750
00:42:30,599 --> 00:42:33,650
which returns the string around value

751
00:42:33,650 --> 00:42:37,800
what we add to dynamically we
dynamically modify that method

752
00:42:37,800 --> 00:42:42,859
to do return taint got my kiss tainted
and that particular strain

753
00:42:42,859 --> 00:42:46,720
what that does is add modify that much
as a saint and returned

754
00:42:46,720 --> 00:42:50,160
and the change is absolutely transparent
to the call and now when you have a

755
00:42:50,160 --> 00:42:52,790
saying for example a file class

756
00:42:52,790 --> 00:42:56,359
we instrument to file class these in
this particular case it will be the

757
00:42:56,359 --> 00:42:57,619
construct that

758
00:42:57,619 --> 00:43:02,020
in the state checked ain't we do the a
pass the argument and then we pass the

759
00:43:02,020 --> 00:43:03,300
context

760
00:43:03,300 --> 00:43:07,760
for which it has to be safe said gonna
go and look at safety beats and gonna be

761
00:43:07,760 --> 00:43:11,140
okay path does it have a file past
safety beat said

762
00:43:11,140 --> 00:43:14,190
and if it does it will allow the
operations through otherwise is gonna

763
00:43:14,190 --> 00:43:15,960
throw a security exception

764
00:43:15,960 --> 00:43:19,510
you can configure it and then the tank
cleaner

765
00:43:19,510 --> 00:43:22,700
a lot of times when you talk about 10
tracking systems one of the problems

766
00:43:22,700 --> 00:43:23,410
that people

767
00:43:23,410 --> 00:43:27,700
every time bring out they say oh so but
how you gonna deal with character by

768
00:43:27,700 --> 00:43:28,880
character

769
00:43:28,880 --> 00:43:32,680
comparison right for example when you do
HTML escape

770
00:43:32,680 --> 00:43:36,320
on the string what you have to
essentially have to do you have to loop

771
00:43:36,320 --> 00:43:40,330
over every single character create a new
string from that

772
00:43:40,330 --> 00:43:43,540
the answer to that is actually very
simple we don't care about this

773
00:43:43,540 --> 00:43:47,119
we do not track character by character
basis what we do is we look at your

774
00:43:47,119 --> 00:43:52,020
its gmail escape punchan and simply
hijacked a return call

775
00:43:52,020 --> 00:43:55,150
to whenever you return the resulting
string the new string

776
00:43:55,150 --> 00:43:58,590
we're gonna market as safe HDMI like
here

777
00:43:58,590 --> 00:44:03,320
to say taints 84 HTML and then return
value to string

778
00:44:03,320 --> 00:44:09,040
to this way we only care about the
strings and not actual character

779
00:44:09,040 --> 00:44:13,200
and then and the the 10 propagation
right obviously you will want to know

780
00:44:13,200 --> 00:44:17,540
you will wanna have ability to say if
you have a dynamic sequel Creary

781
00:44:17,540 --> 00:44:21,040
what usually happens is that people can
catch in eight values right likely

782
00:44:21,040 --> 00:44:24,580
command is the best use in class is
right likely

783
00:44:24,580 --> 00:44:27,650
in Java gala being so awesome

784
00:44:27,650 --> 00:44:31,790
and you'll know why I said that I
because likely tallied converts to

785
00:44:31,790 --> 00:44:35,440
string bill that when a Java compiles
yoga string concatenation could

786
00:44:35,440 --> 00:44:39,390
what it does under the hood and the way
Java bytecode looks like it like that

787
00:44:39,390 --> 00:44:44,880
it's gonna do new StringBuilder got up
and got up and got up and Dentistry

788
00:44:44,880 --> 00:44:47,849
so that means that all you have to do is
you have to instrument StringBuilder

789
00:44:47,849 --> 00:44:49,160
class

790
00:44:49,160 --> 00:44:53,200
to propagate detain which is what we did

791
00:44:53,200 --> 00:44:56,500
and the rest is pretty straightforward
and this is configuration which I think

792
00:44:56,500 --> 00:44:57,099
you'll find it's

793
00:44:57,099 --> 00:45:00,760
60 festival we have this specify 10
source

794
00:45:00,760 --> 00:45:04,640
so if they hate I know the format looks
a little bit I V

795
00:45:04,640 --> 00:45:08,900
if you if you not use to Java internal
representations but that can be made

796
00:45:08,900 --> 00:45:10,300
easy very easily

797
00:45:10,300 --> 00:45:13,560
but the idea is say HTTP servlet Rick
serb-led

798
00:45:13,560 --> 00:45:18,130
request implementation get parameter
with two string I get away with string

799
00:45:18,130 --> 00:45:20,109
argument in string return value

800
00:45:20,109 --> 00:45:24,690
the return that the 10 source right so
that the source about

801
00:45:24,690 --> 00:45:28,630
then we say sanitize that sanitize fat

802
00:45:28,630 --> 00:45:31,770
with Mont Mont type is modification type

803
00:45:31,770 --> 00:45:35,560
will be tamed said safety which means
and market safe

804
00:45:35,560 --> 00:45:39,770
for and in this particular case we
specify safety taggers filepath

805
00:45:39,770 --> 00:45:44,830
and then here it it says okay if you do
file reader and constructed takes a

806
00:45:44,830 --> 00:45:46,550
string

807
00:45:46,550 --> 00:45:50,380
parameter number one has to be my PSA
for file passin

808
00:45:50,380 --> 00:45:52,840
you see how you don't have to do was
beats it does the beats for you

809
00:45:52,840 --> 00:45:54,410
automatically

810
00:45:54,410 --> 00:45:57,540
so let's thats I think pretty sweet now

811
00:45:57,540 --> 00:46:00,830
by come without him is a at is the
easier than Gallagher

812
00:46:00,830 --> 00:46:04,160
because when you look at Java code usual
lol how do you do that added

813
00:46:04,160 --> 00:46:08,330
in by could it's very easy because in
the end Ruth a return call that returns

814
00:46:08,330 --> 00:46:12,570
where return value is on this tax if we
can just take it and Mike with it

815
00:46:12,570 --> 00:46:16,740
it's a very very extremely powerful
facility you can use this to implement

816
00:46:16,740 --> 00:46:20,320
authorization check excessive token
check basically all the things I was

817
00:46:20,320 --> 00:46:22,310
talking about being awkward earlier

818
00:46:22,310 --> 00:46:26,790
you can use bike by good instrumentation
to pretty much apply security

819
00:46:26,790 --> 00:46:31,170
checks across across your application
right

820
00:46:31,170 --> 00:46:35,170
you can send wats app season and the
ruby version if it is interesting right

821
00:46:35,170 --> 00:46:38,710
through the end I Q no movie but in Ruby
strings are mutable

822
00:46:38,710 --> 00:46:41,869
which makes 10 propagation is a little
bit difficult the rule

823
00:46:41,869 --> 00:46:45,869
rules become more complex because what
you write if you have a safe string

824
00:46:45,869 --> 00:46:50,099
but you're right tainted 18 28 I the
whole thing becomes outdated

825
00:46:50,099 --> 00:46:55,190
Sentra what we did is we monkey patch
string object and added methods to do it

826
00:46:55,190 --> 00:46:57,660
cuz in Ruby to AZ everyone is doing that

827
00:46:57,660 --> 00:47:01,200
Iran's monkey biting stuff a like all
day long so we did

828
00:47:01,200 --> 00:47:04,890
to the problem through beam and keep
writing was that a

829
00:47:04,890 --> 00:47:08,570
in Ruby theoretically they say that hate
in Ruby you can monkey about anything

830
00:47:08,570 --> 00:47:12,540
anything you want will work is weird
dynamic language we wanna let you do

831
00:47:12,540 --> 00:47:13,910
whatever you want right well

832
00:47:13,910 --> 00:47:17,609
that's better would be yes because first
you can monkey bite

833
00:47:17,609 --> 00:47:21,280
he set up exclamation mark and the
reason for that is if you

834
00:47:21,280 --> 00:47:26,170
if you use a regular expression angie
savage and you use capturing group

835
00:47:26,170 --> 00:47:30,030
like such as dollar one for whatever
reason they are bound to different

836
00:47:30,030 --> 00:47:31,530
context and

837
00:47:31,530 --> 00:47:35,050
the caller will not see them to
basically the minute you patch

838
00:47:35,050 --> 00:47:38,720
G sup do something call original G sup

839
00:47:38,720 --> 00:47:42,570
if the call it uses capturing group
they're gonna be empty

840
00:47:42,570 --> 00:47:45,700
which is really annoying right and its
owned by in Ruby

841
00:47:45,700 --> 00:47:49,460
and another thing you would think that
they will let you monkey patch string

842
00:47:49,460 --> 00:47:50,670
interpolation

843
00:47:50,670 --> 00:47:54,040
but they don't so you there is no way
for you to

844
00:47:54,040 --> 00:47:58,070
monkey patch or patch string
interpolation anyway to address this

845
00:47:58,070 --> 00:48:01,490
I had to pack city will be which is what
I used for these

846
00:48:01,490 --> 00:48:07,320
and have very simple it's called on
method if one exists before that

847
00:48:07,320 --> 00:48:11,089
the Ruby code was primarily aimed at
demonstrating the concept

848
00:48:11,089 --> 00:48:14,250
the idea was to see if the concept is
really

849
00:48:14,250 --> 00:48:18,970
working and it's really cool and
potentially pitch in it for Ruby to

850
00:48:18,970 --> 00:48:22,580
so if you have any sort of connection
and Swizz max

851
00:48:22,580 --> 00:48:25,619
or anyone in Ruby to community

852
00:48:25,619 --> 00:48:29,280
I let me know will be really interesting
to chat with them about these to see

853
00:48:29,280 --> 00:48:32,760
very interested in doing something like
this

854
00:48:32,760 --> 00:48:36,300
obvious it the system needs a little bit
more testing Java version will

855
00:48:36,300 --> 00:48:39,130
eventually be open source stuff has been
tested

856
00:48:39,130 --> 00:48:42,180
obviously the first question people have
this performance with the performance

857
00:48:42,180 --> 00:48:43,210
impact

858
00:48:43,210 --> 00:48:46,500
I this is still being kinda evaluated

859
00:48:46,500 --> 00:48:49,950
with first television we wanted to make
sure it actually works

860
00:48:49,950 --> 00:48:53,570
and it doesn't break caps like complex
big applications

861
00:48:53,570 --> 00:48:57,880
and it didn't so so that's good but yet
more to come

862
00:48:57,880 --> 00:49:01,410
and that's it if you guys have any
questions I'll be more than happy to

863
00:49:01,410 --> 00:49:02,640
answer them

864
00:49:02,640 --> 00:49:06,510
I think I did really well on time

865
00:49:06,510 --> 00:49:10,960
no questions at all

866
00:49:10,960 --> 00:49:14,470
now

867
00:49:14,470 --> 00:49:17,839
nobody has a question for meter 3 yet
well

868
00:49:17,839 --> 00:49:24,839
thanks a lot and yet see around thank
you very much meaner

869
00:49:34,390 --> 00:49:35,740
this

870
00:49:35,740 --> 00:49:42,740
sleep

