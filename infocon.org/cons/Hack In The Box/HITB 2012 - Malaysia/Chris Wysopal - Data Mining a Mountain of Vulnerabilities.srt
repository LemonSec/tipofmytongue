1
00:00:13,150 --> 00:00:14,210
ok

2
00:00:14,210 --> 00:00:17,340
face

3
00:00:17,340 --> 00:00:24,340
Smith

4
00:00:32,570 --> 00:00:36,510
speaker is Greece less opal and he would
talk

5
00:00:36,510 --> 00:00:39,690
about data mining and montagne over

6
00:00:39,690 --> 00:00:43,840
abilities thank you so it could be back
at hack in the box

7
00:00:43,840 --> 00:00:48,160
I'd like to thank tellin I'll I'll
attack in a box for

8
00:00:48,160 --> 00:00:52,510
inviting me back here two years ago and
it's great to be here at a great time

9
00:00:52,510 --> 00:00:56,070
so today you talk about

10
00:00:56,070 --> 00:00:59,860
the mountain a vulnerability is it's out
there I'm

11
00:00:59,860 --> 00:01:04,070
you know if you look at CV which is the
school publicly disclosed

12
00:01:04,070 --> 00:01:05,030
vulnerabilities

13
00:01:05,030 --> 00:01:09,700
you are in the order of thousands I am
but if you go behind the scenes and look

14
00:01:09,700 --> 00:01:10,229
at

15
00:01:10,229 --> 00:01:13,550
the vulnerabilities that are actually
latent in the software because you've

16
00:01:13,550 --> 00:01:14,920
actually done inspection

17
00:01:14,920 --> 00:01:18,330
with automation or manual process ease

18
00:01:18,330 --> 00:01:21,869
I'm you get that you get to see a lot
more

19
00:01:21,869 --> 00:01:25,869
and what billy gets publicly disclosed
and

20
00:01:25,869 --> 00:01:30,580
there's a lot more data there to mine
and figure out what's going on

21
00:01:30,580 --> 00:01:34,899
and why and how are all these dollar
bill is getting into our sophomore

22
00:01:34,899 --> 00:01:38,220
so

23
00:01:38,220 --> 00:01:42,290
first off we look at some other breaches
from 2011

24
00:01:42,290 --> 00:01:45,890
you know 2011 people called the year the
breach seem like there's a lot more

25
00:01:45,890 --> 00:01:46,970
bigger breaches

26
00:01:46,970 --> 00:01:50,590
I think dark reading came up with this
list that what they consider the 10 most

27
00:01:50,590 --> 00:01:51,880
impactful breaches

28
00:01:51,880 --> 00:01:55,250
they weren't like bite dollar amounts
are

29
00:01:55,250 --> 00:01:58,290
records it was just you know what what
seems to be the M

30
00:01:58,290 --> 00:02:01,720
impactful ones that really impacted
people the most

31
00:02:01,720 --> 00:02:07,460
I and I went through the list and want
to see what's the root cause

32
00:02:07,460 --> 00:02:11,670
cuz a lot of times we don't find out
what the root cause the vulnerability is

33
00:02:11,670 --> 00:02:14,340
with us here there was a breach things
were exposed in the company doesn't

34
00:02:14,340 --> 00:02:15,310
really talk about it

35
00:02:15,310 --> 00:02:19,650
and there are some others here if you
look at epsilon Word Press

36
00:02:19,650 --> 00:02:23,430
sigh world's I steam

37
00:02:23,430 --> 00:02:27,540
I am I'm still trying to figure out what
happens right

38
00:02:27,540 --> 00:02:32,110
I I send emails to people who might now
and if that I can disclose it

39
00:02:32,110 --> 00:02:36,670
we just won't know what happened I think
that's a shame because I think we can

40
00:02:36,670 --> 00:02:37,420
learn a lot

41
00:02:37,420 --> 00:02:40,500
from from

42
00:02:40,500 --> 00:02:44,150
the mistakes that people make so we can
learn not to make them again

43
00:02:44,150 --> 00:02:47,699
you know we do it with other other
places in society wanna building falls

44
00:02:47,699 --> 00:02:48,299
down

45
00:02:48,299 --> 00:02:52,930
our plane crashes we inspected we figure
out what went wrong with someone

46
00:02:52,930 --> 00:02:55,280
negligent where things defective

47
00:02:55,280 --> 00:02:59,639
we have to change our building processes
to change procedures

48
00:02:59,639 --> 00:03:04,380
we don't really have a good model for
that so this is a forum I started doing

49
00:03:04,380 --> 00:03:06,470
this is just looking at the date out
there

50
00:03:06,470 --> 00:03:10,500
where they're coming from with water
causing the vulnerabilities

51
00:03:10,500 --> 00:03:14,160
and so I look at the six smaller
abilities that

52
00:03:14,160 --> 00:03:19,600
a 6 breaches that we had a 24 and for
them or application related

53
00:03:19,600 --> 00:03:22,690
if I remember komodo where

54
00:03:22,690 --> 00:03:25,900
hacker for ostensibly from Iran

55
00:03:25,900 --> 00:03:29,449
up broke into the certificate authority

56
00:03:29,449 --> 00:03:32,739
right through their their web interface
interface they set up to do business

57
00:03:32,739 --> 00:03:33,519
with their

58
00:03:33,519 --> 00:03:36,870
a bit their their certificate partners
I'm

59
00:03:36,870 --> 00:03:39,959
just one right through and found
vulnerabilities in web interface and

60
00:03:39,959 --> 00:03:41,389
made his own certificates installed

61
00:03:41,389 --> 00:03:46,560
stole to a stall certificates they
shouldn't have had access to

62
00:03:46,560 --> 00:03:51,000
I if you look at our essay I was
obviously a spear phishing attack we see

63
00:03:51,000 --> 00:03:51,519
that with

64
00:03:51,519 --> 00:03:54,919
I APT but we have to remember that

65
00:03:54,919 --> 00:03:58,060
the reason is that works was it was an
appt

66
00:03:58,060 --> 00:04:02,209
it wasn't %uh spear fishing or someone
did something like download and install

67
00:04:02,209 --> 00:04:04,350
some software all they did was view

68
00:04:04,350 --> 00:04:07,900
a expert Excel spreadsheet with

69
00:04:07,900 --> 00:04:13,019
a Flash object and and there was a
vulnerability in the Flash Player

70
00:04:13,019 --> 00:04:16,239
so a sophisticated

71
00:04:16,239 --> 00:04:19,340
you know ATT campaigns are going to use
I'll

72
00:04:19,340 --> 00:04:23,270
vulnerabilities in San getting people to
are consumed

73
00:04:23,270 --> 00:04:26,270
data exercises vulnerabilities in the
app's

74
00:04:26,270 --> 00:04:30,220
outlook a Sony Playstation it's the
little vague

75
00:04:30,220 --> 00:04:34,470
but some stuff that Sony said lead
people to believe it was something

76
00:04:34,470 --> 00:04:38,050
running on the application server on

77
00:04:38,050 --> 00:04:41,220
and Citibank was

78
00:04:41,220 --> 00:04:45,430
a authorization I error essentially they

79
00:04:45,430 --> 00:04:49,170
they used a a ID

80
00:04:49,170 --> 00:04:53,030
embedded in the URL to decide which

81
00:04:53,030 --> 00:04:56,510
customers record to display and they
didn't

82
00:04:56,510 --> 00:05:00,380
check to see if you are authorized to
display that record so israeli's change

83
00:05:00,380 --> 00:05:01,590
the URL

84
00:05:01,590 --> 00:05:05,190
in this is like in 1998 style

85
00:05:05,190 --> 00:05:09,530
attack remember I first got into looking
at WebCrawler abilities that was one of

86
00:05:09,530 --> 00:05:11,590
the ones I I tried all the time so

87
00:05:11,590 --> 00:05:15,020
you know what's going on you know this
silly Billy simple things

88
00:05:15,020 --> 00:05:19,910
causing major breaches

89
00:05:19,910 --> 00:05:22,920
so

90
00:05:22,920 --> 00:05:26,110
the question of the day is who would
release a product riddled with security

91
00:05:26,110 --> 00:05:29,150
problem simply to make money

92
00:05:29,150 --> 00:05:33,290
and I didn't answer this but the answer
was pretty much every vendor out there

93
00:05:33,290 --> 00:05:36,820
and that was an analyst Andrew K who
covers

94
00:05:36,820 --> 00:05:40,910
the the the security space

95
00:05:40,910 --> 00:05:44,980
and i think is point is it's not every
single vendor there are vendors

96
00:05:44,980 --> 00:05:48,510
some major vendors work really hard at
security

97
00:05:48,510 --> 00:05:51,350
but I know that there's a lot of our
vendors out there that do absolutely

98
00:05:51,350 --> 00:05:52,160
nothing

99
00:05:52,160 --> 00:05:56,060
what a smaller vendors out there while
the smaller lot on web sites out there

100
00:05:56,060 --> 00:05:58,000
do absolutely nothing

101
00:05:58,000 --> 00:06:01,770
and they just don't seem to care

102
00:06:01,770 --> 00:06:05,650
so building a secure application

103
00:06:05,650 --> 00:06:09,960
is not easy on even educated developers
make mistakes

104
00:06:09,960 --> 00:06:13,130
I don't know how many have you knew I
was involved with the loft

105
00:06:13,130 --> 00:06:16,730
back in the 90's but up mileage

106
00:06:16,730 --> 00:06:21,240
appears ako I'm had a rule he said if
anyone

107
00:06:21,240 --> 00:06:24,680
I codes a vulnerability we're gonna

108
00:06:24,680 --> 00:06:27,740
we're gonna cut off a finger and

109
00:06:27,740 --> 00:06:30,990
in the release products that we get a
lot of my hand would would look like

110
00:06:30,990 --> 00:06:32,330
this

111
00:06:32,330 --> 00:06:36,170
okay so I had two dollar-billion code
that I wrote

112
00:06:36,170 --> 00:06:42,180
that %ah got found by someone we're this
close to us and i fix them

113
00:06:42,180 --> 00:06:46,110
but I I thought I knew what I was doing

114
00:06:46,110 --> 00:06:49,820
right I want a boner Billy was a buffer
overflow netcat for

115
00:06:49,820 --> 00:06:52,960
for Windows the other vulnerability was

116
00:06:52,960 --> 00:06:56,260
I forgot to set the file permissions on
Census data

117
00:06:56,260 --> 00:07:01,000
I said I save it to disk on world
readable

118
00:07:01,000 --> 00:07:05,070
and that was an off track so I

119
00:07:05,070 --> 00:07:08,660
people make mistakes even people that
are white educating people who have

120
00:07:08,660 --> 00:07:12,630
appears reviewing their code things get
through

121
00:07:12,630 --> 00:07:17,230
I I think it's getting easier to write
secure code because we have a lot on a

122
00:07:17,230 --> 00:07:19,200
mission now that we didn't have

123
00:07:19,200 --> 00:07:24,030
when I was writing code loft I we have
static analysis

124
00:07:24,030 --> 00:07:28,550
we have dynamic analysis or or Web web
scanning

125
00:07:28,550 --> 00:07:31,560
a lot of people still are using these
these techniques

126
00:07:31,560 --> 00:07:34,600
that are out there and just from

127
00:07:34,600 --> 00:07:39,590
what I see with the different classes of
all abilities we find for our customers

128
00:07:39,590 --> 00:07:43,790
in the amount we find I I think about
two-thirds the vulnerabilities out there

129
00:07:43,790 --> 00:07:44,490
could be found

130
00:07:44,490 --> 00:07:48,070
automated techniques people to use them
and

131
00:07:48,070 --> 00:07:51,480
the data show today comes from

132
00:07:51,480 --> 00:07:56,520
over 10,000 applications that were were
scanned using automated techniques

133
00:07:56,520 --> 00:08:00,410
I am my last point is since this is
available

134
00:08:00,410 --> 00:08:04,250
it's really a dereliction of duty for a
development team

135
00:08:04,250 --> 00:08:07,750
to ship code it into security testing on

136
00:08:07,750 --> 00:08:11,030
it just has to be thought ms not
acceptable

137
00:08:11,030 --> 00:08:16,110
and no that's that's what I when I talk
to the volunteers I talk to customers

138
00:08:16,110 --> 00:08:19,150
people buying code people having people
call right for the

139
00:08:19,150 --> 00:08:24,330
written for them as a point I try to get
across

140
00:08:24,330 --> 00:08:28,230
so one new trend now we're starting to
see increase

141
00:08:28,230 --> 00:08:31,740
is water hauling and arce

142
00:08:31,740 --> 00:08:35,370
I'm discovered a campaign called the
Volvo campaign

143
00:08:35,370 --> 00:08:38,959
on happened over the summer and

144
00:08:38,959 --> 00:08:43,010
I they look at how how are these people
getting in

145
00:08:43,010 --> 00:08:46,670
how are they getting past the perimeter
and they looked in the file must be

146
00:08:46,670 --> 00:08:49,600
spearfishing right people hurt people
are sending

147
00:08:49,600 --> 00:08:53,300
spear phishing emails tricking people to

148
00:08:53,300 --> 00:08:56,380
open attachments with you know

149
00:08:56,380 --> 00:09:00,820
malicious payloads or or click on a link
that goes to some web site that's

150
00:09:00,820 --> 00:09:01,980
hosting militias pet

151
00:09:01,980 --> 00:09:07,720
payload and a they found out that this
this campaign was different

152
00:09:07,720 --> 00:09:12,560
I the attackers what they did was they
broke into a website said they thought

153
00:09:12,560 --> 00:09:16,980
that the individuals at the
organizations they want to compromise

154
00:09:16,980 --> 00:09:21,010
would would visit so they kinda profile
the people there

155
00:09:21,010 --> 00:09:26,550
and I found sites that were above their
interests

156
00:09:26,550 --> 00:09:31,130
one was I'm I think was rugby
organization or something in Canada so

157
00:09:31,130 --> 00:09:32,570
they knew people that are

158
00:09:32,570 --> 00:09:36,470
is a shin plate rugby that they want to
attack

159
00:09:36,470 --> 00:09:40,589
and they broke into those sites which
are usually small

160
00:09:40,589 --> 00:09:43,880
you know in secure you know
community-oriented or small business

161
00:09:43,880 --> 00:09:45,270
sites

162
00:09:45,270 --> 00:09:48,430
small government organization cites and
the compromise them

163
00:09:48,430 --> 00:09:52,510
and they host the malicious content
there and they figured eventually

164
00:09:52,510 --> 00:09:55,589
someone at that organization would go to
that site so they didn't even have to do

165
00:09:55,589 --> 00:09:59,380
a spear phishing attack so we're
starting to see that

166
00:09:59,380 --> 00:10:02,910
his security I'll just every web
application that sitting there on the

167
00:10:02,910 --> 00:10:03,390
internet

168
00:10:03,390 --> 00:10:06,830
really impacts all of us

169
00:10:06,830 --> 00:10:10,060
I it isn't it isn't just the major sites
its

170
00:10:10,060 --> 00:10:13,339
the mom-and-pop sites out there could be
hosting malicious content and someone

171
00:10:13,339 --> 00:10:15,210
could put that content up there

172
00:10:15,210 --> 00:10:20,040
specifically targeting the organization
and we're starting to see that happen

173
00:10:20,040 --> 00:10:23,050
more more MORE I think it's gonna rise
to the level

174
00:10:23,050 --> 00:10:27,310
that's pure spearfishing does because
people are aware spearfishing there

175
00:10:27,310 --> 00:10:30,570
there there their eyes are open that
they should be clicking on links that

176
00:10:30,570 --> 00:10:32,620
seem a little bit strange

177
00:10:32,620 --> 00:10:35,860
but I don't think they're doing that
when they're going just a visit the site

178
00:10:35,860 --> 00:10:36,680
on the web

179
00:10:36,680 --> 00:10:40,940
that their used to visiting so you know
the attackers

180
00:10:40,940 --> 00:10:44,570
close one all getting that malicious
payload onto that

181
00:10:44,570 --> 00:10:49,290
muses machine and you can find another
one

182
00:10:49,290 --> 00:10:52,360
said I want to get into the day

183
00:10:52,360 --> 00:10:57,339
so this is the dataset we have I and its
applications we scan from over 300

184
00:10:57,339 --> 00:10:58,600
organizations

185
00:10:58,600 --> 00:11:01,720
some US government mostly large I

186
00:11:01,720 --> 00:11:05,790
enterprises the United States and Europe
some

187
00:11:05,790 --> 00:11:10,220
some small lots of our vendors it just
under 10,000 its

188
00:11:10,220 --> 00:11:15,160
99 110 applications risk and over the
last 18 months

189
00:11:15,160 --> 00:11:18,950
I am and they vary in size usually have
small

190
00:11:18,950 --> 00:11:22,860
tiny have 100 k to 6 gigabytes was the
largest one

191
00:11:22,860 --> 00:11:27,240
so applications come in all shapes and
sizes

192
00:11:27,240 --> 00:11:30,670
and I we scan this these were a code up

193
00:11:30,670 --> 00:11:34,589
summers code was production code they
had shipped this the customers

194
00:11:34,589 --> 00:11:37,850
I saw it was pre-production where they

195
00:11:37,850 --> 00:11:42,290
you know they were using it using on
security testing as you should

196
00:11:42,290 --> 00:11:46,089
during the development cycle it comes
from

197
00:11:46,089 --> 00:11:49,680
want to different sources internally but
bill code you know the kinda

198
00:11:49,680 --> 00:11:53,399
code that a e-commerce company my
builder

199
00:11:53,399 --> 00:11:57,640
finance for might build or Commercial
Code that people are

200
00:11:57,640 --> 00:12:01,390
willing to sell a software vendors
outsource

201
00:12:01,390 --> 00:12:04,640
in an open-source it was whatever our
enterprise customers

202
00:12:04,640 --> 00:12:09,390
work were concerned about fine abilities
in

203
00:12:09,390 --> 00:12:14,440
and so we just don't have the
vulnerability data that's the

204
00:12:14,440 --> 00:12:17,899
the at the skin the scan data we call it
where

205
00:12:17,899 --> 00:12:21,270
align a code that kinda vulnerability
but we have many data about the

206
00:12:21,270 --> 00:12:22,060
application

207
00:12:22,060 --> 00:12:26,010
what what what financial what vertical

208
00:12:26,010 --> 00:12:30,110
was finance with the software was a
transportation was media

209
00:12:30,110 --> 00:12:33,330
I we know how the software got produced

210
00:12:33,330 --> 00:12:37,459
something I wasn't really built or or
add something they purchased

211
00:12:37,459 --> 00:12:42,740
assurance level how critical did they
think this piece a software was

212
00:12:42,740 --> 00:12:46,330
and of course the language and platform
runs on so we have that meta-data

213
00:12:46,330 --> 00:12:51,170
about I'll although all the applications
only find a bone Billy application we

214
00:12:51,170 --> 00:12:52,220
can use that

215
00:12:52,220 --> 00:12:57,270
to look at some trends and slice the
data and start to make comparisons

216
00:12:57,270 --> 00:13:00,300
and we have a lot of different
application security metrics such as

217
00:13:00,300 --> 00:13:04,020
well we report on outside just the
vulnerabilities so

218
00:13:04,020 --> 00:13:07,570
counts percentages I

219
00:13:07,570 --> 00:13:10,630
time it takes to fix things

220
00:13:10,630 --> 00:13:14,899
holding the vulnerability holding the
application up against external

221
00:13:14,899 --> 00:13:18,529
standards like a lost art 10 or

222
00:13:18,529 --> 00:13:22,690
CNC 325

223
00:13:22,690 --> 00:13:26,880
so the data set here I'm you can see
that most if its internally developed

224
00:13:26,880 --> 00:13:27,700
code

225
00:13:27,700 --> 00:13:32,200
seventy-two percent is built by the
companies that are sending it to us

226
00:13:32,200 --> 00:13:36,810
I 18 per cent Disco that's written by
software vendors

227
00:13:36,810 --> 00:13:41,110
and nine percent is open source 1
percent is outsourced

228
00:13:41,110 --> 00:13:45,100
it's interesting that I we don't see a
lot of code from outsourcers being

229
00:13:45,100 --> 00:13:48,149
security tested I

230
00:13:48,149 --> 00:13:52,410
and my theory there is the outsource
contracts

231
00:13:52,410 --> 00:13:57,279
are very strong there there they there
like 10 year contracts

232
00:13:57,279 --> 00:14:00,420
so when the when the enterprise in the
bank

233
00:14:00,420 --> 00:14:03,480
says hey you know i i want to mom

234
00:14:03,480 --> 00:14:07,390
test this have you fix the problems in
the software

235
00:14:07,390 --> 00:14:10,580
the the outsourcer says no you can't do
that

236
00:14:10,580 --> 00:14:13,700
this helped you can do it but you're
gonna have to pay to get the

237
00:14:13,700 --> 00:14:14,390
vulnerabilities

238
00:14:14,390 --> 00:14:17,850
text you know we will put him in there
for free yet

239
00:14:17,850 --> 00:14:22,290
heading in effect so when he have so to
those dynamics people don't even wanna

240
00:14:22,290 --> 00:14:24,089
know cuz they don't have the budget

241
00:14:24,089 --> 00:14:29,680
to fix them and then down here is a
breakdown by language families: you can

242
00:14:29,680 --> 00:14:32,290
see the different languages that were
scanning

243
00:14:32,290 --> 00:14:35,640
I Java by far is the most prevalent

244
00:14:35,640 --> 00:14:39,390
I language out there that enterprise use
the software

245
00:14:39,390 --> 00:14:42,800
running I'm by Dina dine at CC

246
00:14:42,800 --> 00:14:46,120
plus PHP ColdFusion

247
00:14:46,120 --> 00:14:49,440
Android iowa's and j2me tiny

248
00:14:49,440 --> 00:14:53,640
slivers and it's not we do have hundreds
a

249
00:14:53,640 --> 00:14:57,899
a mobile app that we've scanned and I
have data on those just that compared to

250
00:14:57,899 --> 00:14:59,130
job in dotnet

251
00:14:59,130 --> 00:15:02,810
Scott totally dwarfed

252
00:15:02,810 --> 00:15:07,589
so what explains so the difference at
the Layton

253
00:15:07,589 --> 00:15:10,750
vulnerabilities versus dollar bill is
that are attacked

254
00:15:10,750 --> 00:15:14,560
right the late vulnerabilities as yeah
it's they're sitting in the code

255
00:15:14,560 --> 00:15:17,690
but I've known attack said you know who
cares

256
00:15:17,690 --> 00:15:21,500
right on but is useful to to understand

257
00:15:21,500 --> 00:15:26,640
six attackers change start attacking
different kind of all our ability

258
00:15:26,640 --> 00:15:30,360
then also in all this label releases
that category

259
00:15:30,360 --> 00:15:33,430
become become more dangerous so

260
00:15:33,430 --> 00:15:37,450
II made some comparisons here in the
blue

261
00:15:37,450 --> 00:15:43,470
a is the data we get from the web
hacking incident database

262
00:15:43,470 --> 00:15:46,570
and the orange-red reddish here is

263
00:15:46,570 --> 00:15:51,209
the data that we we got a fair code from
mining or data

264
00:15:51,209 --> 00:15:56,040
and so take sequence action for instance
32 percent in the Apple case

265
00:15:56,040 --> 00:15:59,580
web applications that we tested had

266
00:15:59,580 --> 00:16:03,320
at least one sequence action
vulnerability in could add

267
00:16:03,320 --> 00:16:07,110
dozens or even hundreds typically we
don't see that many but

268
00:16:07,110 --> 00:16:10,920
wi-fi see several it's rare that just
one but at least one

269
00:16:10,920 --> 00:16:14,110
for in this category of 32 percent

270
00:16:14,110 --> 00:16:17,620
and if you look at the percentage hacks
out there to I love

271
00:16:17,620 --> 00:16:21,459
a love web sites

272
00:16:21,459 --> 00:16:25,209
twenty percent of those hacks are using
sequence action

273
00:16:25,209 --> 00:16:29,190
Singh kinda see that yeah that 32
percent late Nirvana bill is really

274
00:16:29,190 --> 00:16:32,880
really meaningful right because 20
percent in the attacks

275
00:16:32,880 --> 00:16:36,930
are actually attacking that more ability
so you look at the data this way

276
00:16:36,930 --> 00:16:40,240
you say I should at least be getting rid
of sequel injection because

277
00:16:40,240 --> 00:16:43,880
I know there's a lot out there 130 the
app's habit

278
00:16:43,880 --> 00:16:48,440
I am and in my organization 130 my app's
probably have unless I'm doing something

279
00:16:48,440 --> 00:16:49,410
about it

280
00:16:49,410 --> 00:16:53,350
and from this data we see that

281
00:16:53,350 --> 00:16:56,940
20 percent in the attacks leveraging
ability

282
00:16:56,940 --> 00:17:00,200
so I like to use this the show
developers that he had a boner believes

283
00:17:00,200 --> 00:17:02,550
in the could really do get attacked

284
00:17:02,550 --> 00:17:06,620
I'm cross-site scripting is interesting
because cross-site scripting we see in

285
00:17:06,620 --> 00:17:10,589
68 percent in the application to see
that all over the place

286
00:17:10,589 --> 00:17:14,409
but it's only implicated in 10 percent
data breaches

287
00:17:14,409 --> 00:17:17,589
and you're my explanation I think for
that is its

288
00:17:17,589 --> 00:17:23,709
Julie harder to get at the attackers

289
00:17:23,709 --> 00:17:27,289
what that what the with the goal of the
attacker is a lot of times

290
00:17:27,289 --> 00:17:30,630
cross-site scripting only certain kinds
of sites

291
00:17:30,630 --> 00:17:33,970
with certain goals in the attacker is
cross site scripting

292
00:17:33,970 --> 00:17:37,739
gonna gonna be as interesting s
something like sick

293
00:17:37,739 --> 00:17:41,970
injection and then it goes down from
there we see information leakage is all

294
00:17:41,970 --> 00:17:43,249
over the place it's very

295
00:17:43,249 --> 00:17:46,489
that's very common that's when you're
you know you're giving up

296
00:17:46,489 --> 00:17:50,359
you know data that at the end user
shouldn't see you like internal IP

297
00:17:50,359 --> 00:17:52,279
addresses and Pathan

298
00:17:52,279 --> 00:17:55,289
and version information that's pretty
common I

299
00:17:55,289 --> 00:17:59,529
that was okay 3 percent in the attacks
is prolly implicated in wars polymorpha

300
00:17:59,529 --> 00:18:01,149
reporting issue I know

301
00:18:01,149 --> 00:18:04,289
when I'm and testing I love those
information leakage

302
00:18:04,289 --> 00:18:07,889
vulnerabilities to help me find other
things

303
00:18:07,889 --> 00:18:11,600
and this one's interest in cryptographic
issues we find 53 percent of the time

304
00:18:11,600 --> 00:18:12,999
but it's only implicated

305
00:18:12,999 --> 00:18:16,629
to person at a time when I think this is
really kinda hard

306
00:18:16,629 --> 00:18:21,149
hard to exploit those lot times a
cryptographic issue

307
00:18:21,149 --> 00:18:24,239
is you're using a week cipher or

308
00:18:24,239 --> 00:18:27,609
on your hard coded key in the
application and those things are pretty

309
00:18:27,609 --> 00:18:28,679
hard for

310
00:18:28,679 --> 00:18:31,879
attacker typically to to go after

311
00:18:31,879 --> 00:18:36,049
and the last one is interesting because
it's only nine percent

312
00:18:36,049 --> 00:18:39,210
but its use one percent of the time so

313
00:18:39,210 --> 00:18:43,700
you know that ratio is very different
than 53 2921

314
00:18:43,700 --> 00:18:46,779
on which I think tells us something
secure an injection is

315
00:18:46,779 --> 00:18:50,960
a little bit more rare obviously is more
rare than the other ones but to this

316
00:18:50,960 --> 00:18:52,779
year's one person at a time

317
00:18:52,779 --> 00:18:56,669
attackers must be looking for it and
must be something that's interesting to

318
00:18:56,669 --> 00:18:57,710
them

319
00:18:57,710 --> 00:19:01,690
I because it seems the ratio you know
late voter believes the ones that are

320
00:19:01,690 --> 00:19:02,879
attacked

321
00:19:02,879 --> 00:19:06,850
is you know it's tired and

322
00:19:06,850 --> 00:19:09,929
crypto and in Philly and that's cuz
command injection is a wonderful

323
00:19:09,929 --> 00:19:14,690
ability fine right XQ commands on on the
server with the permissions

324
00:19:14,690 --> 00:19:21,600
a privilege level above the application
that's very useful to attackers

325
00:19:21,600 --> 00:19:24,690
so I'm gonna dive indeed though deeper
here

326
00:19:24,690 --> 00:19:30,320
into the small ability categories so
this is the top own ability categories

327
00:19:30,320 --> 00:19:33,409
I am percentage of applications

328
00:19:33,409 --> 00:19:36,539
percent about occasions affected for web
applications

329
00:19:36,539 --> 00:19:40,009
so this meant the application had one or
more

330
00:19:40,009 --> 00:19:45,210
I that kinda vulnerabilities some other
day that was on the last slide

331
00:19:45,210 --> 00:19:49,659
you can see cross-site scripting
commands a kid information leakage

332
00:19:49,659 --> 00:19:53,429
control line feed injection I

333
00:19:53,429 --> 00:19:57,429
sorry cash return my feet injection
cryptographic issues

334
00:19:57,429 --> 00:20:00,739
more than half applications were finding
those vulnerabilities

335
00:20:00,739 --> 00:20:03,889
directory traversal which is another one
that attackers

336
00:20:03,889 --> 00:20:07,169
I would think they would like more
didn't show up in that top 5

337
00:20:07,169 --> 00:20:11,009
I found it half the applications in
there we are with the the sequel

338
00:20:11,009 --> 00:20:13,090
injection

339
00:20:13,090 --> 00:20:17,289
interestingly you can I've colored the
the bars orange

340
00:20:17,289 --> 00:20:21,029
if it's in the Austin top 10 and blue if
it's not

341
00:20:21,029 --> 00:20:24,659
and you can see that the %ah stopped and
which is its kinda anecdotal

342
00:20:24,659 --> 00:20:29,389
rights bunch of web application experts
getting together saying you know what do

343
00:20:29,389 --> 00:20:30,369
you see a lot of

344
00:20:30,369 --> 00:20:34,549
water attackers attacking a lot of what
are the most impactful vulnerabilities

345
00:20:34,549 --> 00:20:38,549
and actually turns out that they muir
the real world data

346
00:20:38,549 --> 00:20:43,049
that we're finding we're finding that
we're finding the data

347
00:20:43,049 --> 00:20:47,549
out there I that that matches up with
what the of top 10 so I think

348
00:20:47,549 --> 00:20:51,499
these lists are actually pretty good we
can eliminate if you can eliminate

349
00:20:51,499 --> 00:20:58,499
the OAS top 10 your application you're
gonna be doing very good

350
00:20:59,009 --> 00:21:03,009
now this is another statistic this is
I'm prevalence overall prevalence

351
00:21:03,009 --> 00:21:07,509
so this wasn't just this took into
account the count the vulnerabilities

352
00:21:07,509 --> 00:21:11,659
so this can give you an idea of just how
much process scripting is out there

353
00:21:11,659 --> 00:21:15,979
57 percent of all vulnerabilities we
find in web applications

354
00:21:15,979 --> 00:21:21,080
across a scripting so and and so a lot
of times if you have

355
00:21:21,080 --> 00:21:25,119
you'll just have one cross a scripting
you have 100 cross-site scripting

356
00:21:25,119 --> 00:21:29,259
your application even more and that what
one other problem with that is

357
00:21:29,259 --> 00:21:32,359
can be overwhelming to developers to to
fix it

358
00:21:32,359 --> 00:21:37,139
by Tom cross-site scripting is is a
major problem and I don't see going away

359
00:21:37,139 --> 00:21:38,919
anytime soon

360
00:21:38,919 --> 00:21:43,009
far by control character line feed
injection

361
00:21:43,009 --> 00:21:46,119
information leakage sequel injection

362
00:21:46,119 --> 00:21:49,710
is only four percent the whole release
out there

363
00:21:49,710 --> 00:21:53,309
very bad vulnerability but com

364
00:21:53,309 --> 00:21:56,320
its fourth fourth most common

365
00:21:56,320 --> 00:21:59,399
and then you can see down the let down
the line that we get into one percent

366
00:21:59,399 --> 00:22:00,869
less than one percent

367
00:22:00,869 --> 00:22:04,299
pretty quickly so if you're looking at
the vulnerabilities that developers got

368
00:22:04,299 --> 00:22:05,470
the fax

369
00:22:05,470 --> 00:22:09,389
a lot of them are just in that top 5
category to train your developers just

370
00:22:09,389 --> 00:22:10,350
to fix those

371
00:22:10,350 --> 00:22:15,570
know about those would be eliminated a
lot of abilities

372
00:22:15,570 --> 00:22:19,029
now so it's somewhat non web
applications

373
00:22:19,029 --> 00:22:23,190
sewn on web applications we have
different kinds of vulnerability show up

374
00:22:23,190 --> 00:22:26,600
love these applications are written in C
C++ and C plus plus

375
00:22:26,600 --> 00:22:30,509
which have a whole range love issues
because

376
00:22:30,509 --> 00:22:34,389
the language is not type safe so you
have

377
00:22:34,389 --> 00:22:37,409
issues with overflowing integers

378
00:22:37,409 --> 00:22:41,070
your issues overflowing offers I'm
because

379
00:22:41,070 --> 00:22:45,639
the the at the language level languages
and tracking

380
00:22:45,639 --> 00:22:49,929
overflow or underflow conditions just
letting you do whatever you want

381
00:22:49,929 --> 00:22:55,519
and so you can see that we don't have
prostate scripting and sequel injection

382
00:22:55,519 --> 00:22:57,330
actually do have single injection its

383
00:22:57,330 --> 00:23:00,529
way down on the list I am

384
00:23:00,529 --> 00:23:04,379
is Corsa non web application can use a
sequel database

385
00:23:04,379 --> 00:23:08,289
and connect to one but we don't cross
eyed scripting

386
00:23:08,289 --> 00:23:11,840
and so we have a different different
prevalence a cryptographic issues

387
00:23:11,840 --> 00:23:15,479
was kinda surprised me that this was
this high

388
00:23:15,479 --> 00:23:19,259
I think this shows is that developers
just don't know how to implement crypto

389
00:23:19,259 --> 00:23:22,710
you know they see the API but they they
get it wrong

390
00:23:22,710 --> 00:23:26,679
pic the wrong ciphers they picked the
wrong flags

391
00:23:26,679 --> 00:23:29,690
they don't check certificates they embed

392
00:23:29,690 --> 00:23:33,519
keys in their applications think that
that's fine

393
00:23:33,519 --> 00:23:36,559
so I attackers were to start

394
00:23:36,559 --> 00:23:39,739
learning more about crypto I think would
be

395
00:23:39,739 --> 00:23:43,279
be in a world of hurt I'm as we saw from
the earlier slide

396
00:23:43,279 --> 00:23:46,690
just don't seem to be going after that
stuff

397
00:23:46,690 --> 00:23:50,529
tricky traverse a very common I am

398
00:23:50,529 --> 00:23:54,509
error handling information leakage
potential back doors

399
00:23:54,509 --> 00:23:59,359
and then we get us or the unique things
for on

400
00:23:59,359 --> 00:24:03,570
a non web applications like buffer
management errors

401
00:24:03,570 --> 00:24:07,789
see command injection is a lot higher
I'm

402
00:24:07,789 --> 00:24:13,090
seen americares new category so we got a
lot in new categories here

403
00:24:13,090 --> 00:24:17,059
for it for non web applications so this
is the percentage that was affected by

404
00:24:17,059 --> 00:24:18,009
these

405
00:24:18,009 --> 00:24:22,159
so princess 14 percent in the non web
applications

406
00:24:22,159 --> 00:24:26,029
a buffer overflows in which is a very
very problematic

407
00:24:26,029 --> 00:24:33,029
vulnerability

408
00:24:38,029 --> 00:24:41,760
I should mention back here that I
colored in green

409
00:24:41,760 --> 00:24:45,390
what was in the CNC the Pee Wee I

410
00:24:45,390 --> 00:24:49,370
top 25 which again is kinda like you I
stopped and people get together

411
00:24:49,370 --> 00:24:53,309
that to a lot of application-level work

412
00:24:53,309 --> 00:24:56,419
and pick up the categories that they
think

413
00:24:56,419 --> 00:25:01,070
are the the top 25 most important
categories and lined up pretty well with

414
00:25:01,070 --> 00:25:03,260
our date it was a few in there like a
rekindling

415
00:25:03,260 --> 00:25:06,570
potential back to our time and stay that
showed up

416
00:25:06,570 --> 00:25:09,750
are on that list but in general is
pretty good

417
00:25:09,750 --> 00:25:13,700
now this is overall prevalence

418
00:25:13,700 --> 00:25:19,450
so this is sort of this is the absolute
counts the number of vulnerabilities

419
00:25:19,450 --> 00:25:20,610
that are out there

420
00:25:20,610 --> 00:25:23,860
as no surprise that I that

421
00:25:23,860 --> 00:25:26,919
air handling is often gone wrong

422
00:25:26,919 --> 00:25:31,240
people just forget check the return code
when they open a file or something like

423
00:25:31,240 --> 00:25:31,799
that

424
00:25:31,799 --> 00:25:38,799
vacancy that is really serious
vulnerabilities a buffer management

425
00:25:39,250 --> 00:25:39,799
errors

426
00:25:39,799 --> 00:25:46,630
which can lead to all kinds of arbitrary
excusable code

427
00:25:46,630 --> 00:25:51,950
buffer overflows numeric errors these
are really serious vulnerabilities

428
00:25:51,950 --> 00:25:56,059
and their extremely prevalent out there
and in the non web

429
00:25:56,059 --> 00:26:03,059
world said I want to break it down by
language because language matters I

430
00:26:04,039 --> 00:26:05,600
mentioned in the non web

431
00:26:05,600 --> 00:26:08,490
the reason that a lot of those
vulnerabilities were at the top was

432
00:26:08,490 --> 00:26:10,360
because a lot of non webapps built

433
00:26:10,360 --> 00:26:13,770
with C&C plus plus which

434
00:26:13,770 --> 00:26:17,440
which which has a slow-release so now I
just want to look across the the

435
00:26:17,440 --> 00:26:18,090
different

436
00:26:18,090 --> 00:26:22,529
bowling Billy category different
languages

437
00:26:22,529 --> 00:26:25,789
if you look here %uh starting with Java

438
00:26:25,789 --> 00:26:29,590
process scripting is number one not a
surprise it's the number-one

439
00:26:29,590 --> 00:26:33,270
category offer of a web applications
Java

440
00:26:33,270 --> 00:26:37,710
right away what a web applications a
control line fuel injection information

441
00:26:37,710 --> 00:26:38,309
leakage

442
00:26:38,309 --> 00:26:41,580
so says Java so prevalent it's kinda
mirroring

443
00:26:41,580 --> 00:26:46,289
what we see over of web applications but
we take a look at cold fusion which

444
00:26:46,289 --> 00:26:47,490
really isn't used at

445
00:26:47,490 --> 00:26:50,690
isn't as prevalent and it hasn't even
worse

446
00:26:50,690 --> 00:26:53,909
cross-site scripting score right 87
percent

447
00:26:53,909 --> 00:26:58,220
I the whole release from a cold fusion
across eight scripting

448
00:26:58,220 --> 00:27:01,870
see look at that and you say well
something is wrong with cross site

449
00:27:01,870 --> 00:27:02,720
scripting its

450
00:27:02,720 --> 00:27:05,799
at the language level its easier to

451
00:27:05,799 --> 00:27:09,620
easier to have a process gripping really
and that was totally true

452
00:27:09,620 --> 00:27:13,539
up until I think about a year ago and
Adobe

453
00:27:13,539 --> 00:27:17,100
actually put a fix and for called I
ColdFusion

454
00:27:17,100 --> 00:27:20,350
that the language level on

455
00:27:20,350 --> 00:27:23,960
did job some output encoding to

456
00:27:23,960 --> 00:27:27,730
help prevent against I cross eyed
scripting so

457
00:27:27,730 --> 00:27:30,750
I I don't have sort of a before and
after

458
00:27:30,750 --> 00:27:33,860
but I can tell you that it it

459
00:27:33,860 --> 00:27:38,110
dropped a lot common at that shows what
happens at the language level

460
00:27:38,110 --> 00:27:41,280
makes a big difference or the platform
level makes a big difference because the

461
00:27:41,280 --> 00:27:42,730
developers are paying attention

462
00:27:42,730 --> 00:27:47,419
and also if you if you have a language
or a platform

463
00:27:47,419 --> 00:27:51,390
and you want that to be more secure
don't train developers to write

464
00:27:51,390 --> 00:27:52,210
correctly

465
00:27:52,210 --> 00:27:55,880
you can do that but to make a much
bigger difference to actually

466
00:27:55,880 --> 00:28:00,049
write code at that language level that
will prevent

467
00:28:00,049 --> 00:28:04,399
vulnerability from ever occurring up

468
00:28:04,399 --> 00:28:08,470
and if you look at the place plus we
have different error handling

469
00:28:08,470 --> 00:28:12,000
buffer overflows buffer management are
so these are the problems that

470
00:28:12,000 --> 00:28:18,929
CNC plus plus developers have to deal
with I look at dotnet

471
00:28:18,929 --> 00:28:23,370
and I like to compare dot net and Java
because they're kinda written in the C

472
00:28:23,370 --> 00:28:26,750
lot of the same context we have forty
seven percent cross-site scripting

473
00:28:26,750 --> 00:28:28,200
versus 56

474
00:28:28,200 --> 00:28:33,010
second category is information leakage
versus control line feeding

475
00:28:33,010 --> 00:28:38,080
Jackson so 10 percent versus 18 with an
enzyme that we have 10 percent

476
00:28:38,080 --> 00:28:40,500
cryptographic issues where we didn't
have that on job

477
00:28:40,500 --> 00:28:44,669
and in the top three anyway so that
tells me something about the way that

478
00:28:44,669 --> 00:28:45,389
the dotnet

479
00:28:45,389 --> 00:28:48,870
API's arm are are built

480
00:28:48,870 --> 00:28:52,840
for the way developers are educated
about how to use them is better in Java

481
00:28:52,840 --> 00:28:57,980
InDesign that just me trying to explain
the date I don't know if that's

482
00:28:57,980 --> 00:28:59,250
absolutely true

483
00:28:59,250 --> 00:29:02,250
but they're there's got to be some
explanation maybe dotnet developer is

484
00:29:02,250 --> 00:29:03,250
just not educated

485
00:29:03,250 --> 00:29:07,690
crypto as much now if you look at Php

486
00:29:07,690 --> 00:29:11,809
you'll see why PHP I has a

487
00:29:11,809 --> 00:29:15,260
you're so many so many web sites their
PHP

488
00:29:15,260 --> 00:29:18,389
both PHP get broken into because

489
00:29:18,389 --> 00:29:22,159
we have our friend here cross-site
scripting not a big surprise

490
00:29:22,159 --> 00:29:25,770
we got sequel injection is making it
into the top three here

491
00:29:25,770 --> 00:29:28,940
and directory traversal another great

492
00:29:28,940 --> 00:29:33,169
great vulnerability for attackers
leverages making it a number two

493
00:29:33,169 --> 00:29:38,490
so you can c php at the language level
or how developers are trained to use it

494
00:29:38,490 --> 00:29:42,370
there there they're creating a lot more
directory traversal

495
00:29:42,370 --> 00:29:46,990
and sequel injection Harris if the same
applications are written in Java dotnet

496
00:29:46,990 --> 00:29:50,870
it's likely they would be more secure
language

497
00:29:50,870 --> 00:29:55,350
different matters special webs and then
here we have the Android

498
00:29:55,350 --> 00:30:00,039
I Asus see Android is a completely
different we're talking about a mobile

499
00:30:00,039 --> 00:30:03,889
mobile up platform it using Java

500
00:30:03,889 --> 00:30:06,669
but the vulnerabilities are different
and then job we're getting a lot of

501
00:30:06,669 --> 00:30:07,730
crypto issues

502
00:30:07,730 --> 00:30:12,350
344 verses I did make it to the top
three

503
00:30:12,350 --> 00:30:15,780
I can't rely fuel injection was about
the same maybe a lil

504
00:30:15,780 --> 00:30:21,610
may be higher and information
InformationWeek has been number one is

505
00:30:21,610 --> 00:30:26,250
crypto issues I can tell you what that
is the number one issue we find

506
00:30:26,250 --> 00:30:29,530
is I was actually to is

507
00:30:29,530 --> 00:30:32,590
a developers on Android

508
00:30:32,590 --> 00:30:35,850
versus their counterparts on

509
00:30:35,850 --> 00:30:40,580
making see enterprise job applications
running the same same language

510
00:30:40,580 --> 00:30:44,720
but a the air is a different which is
interesting right so that's what

511
00:30:44,720 --> 00:30:48,149
what what kinda capture people writing
in on

512
00:30:48,149 --> 00:30:51,830
crypto errors turn up very high

513
00:30:51,830 --> 00:30:55,309
and we see that developers are embedding
keys

514
00:30:55,309 --> 00:30:58,500
into their into their application and
they're also

515
00:30:58,500 --> 00:31:02,270
implementing SSL incorrectly they're
doing things like turning off

516
00:31:02,270 --> 00:31:05,220
certificate validation

517
00:31:05,220 --> 00:31:08,220
and so you know that I think

518
00:31:08,220 --> 00:31:13,539
think education can probably probably
help their

519
00:31:13,539 --> 00:31:17,600
so now if we look at I by the supplier
of the application

520
00:31:17,600 --> 00:31:21,110
so someone built application that the
ultimate

521
00:31:21,110 --> 00:31:25,909
end-user is run and if the supplier is
internally developed that's the

522
00:31:25,909 --> 00:31:29,240
enterprise built it for themselves as
the e-commerce site

523
00:31:29,240 --> 00:31:32,990
building their own app or the financial
firm

524
00:31:32,990 --> 00:31:36,210
building their own applications I

525
00:31:36,210 --> 00:31:40,270
we have commercial which is the
customers purchasing the application

526
00:31:40,270 --> 00:31:41,889
they're running

527
00:31:41,889 --> 00:31:45,429
open source that self-explanatory right
just

528
00:31:45,429 --> 00:31:48,740
downloading an open source application
outsourced

529
00:31:48,740 --> 00:31:52,530
pay someone else to build a custom app
for them

530
00:31:52,530 --> 00:31:55,929
and I thought was interesting to look
across

531
00:31:55,929 --> 00:31:59,760
these different supplier types to see if
there are different kinds of

532
00:31:59,760 --> 00:32:01,490
vulnerabilities coming

533
00:32:01,490 --> 00:32:04,760
from different supplier types of is a is
there going to be a difference what

534
00:32:04,760 --> 00:32:05,970
they're buying

535
00:32:05,970 --> 00:32:09,200
%ah an app for using open source

536
00:32:09,200 --> 00:32:12,419
and if you look across a scripting it's
an interesting it's kinda number one

537
00:32:12,419 --> 00:32:14,129
everywhere again

538
00:32:14,129 --> 00:32:17,950
but for outsource it a little bit lower
really don't have an explanation for

539
00:32:17,950 --> 00:32:18,770
that

540
00:32:18,770 --> 00:32:22,320
i won a prize at the outsources the
sample size is really small we only had

541
00:32:22,320 --> 00:32:26,879
about one percent so it's only about 100
applications

542
00:32:26,879 --> 00:32:31,820
but then if you look at something like
sequel injection we see that I

543
00:32:31,820 --> 00:32:36,610
its about the same 4 percent three
percent 3% per cent

544
00:32:36,610 --> 00:32:39,830
but there's a lot more vulnerabilities
above sequence action

545
00:32:39,830 --> 00:32:44,230
in Commercial Code there's a little bit
more in the open source code

546
00:32:44,230 --> 00:32:48,090
if you look at directory traversal this
one was a most interesting one because

547
00:32:48,090 --> 00:32:50,679
it seemed like the most varied across

548
00:32:50,679 --> 00:32:54,820
whereas 23 percent internally developed
goes the six percent commercial

549
00:32:54,820 --> 00:32:59,500
an open source as 13 percent directory
traversal

550
00:32:59,500 --> 00:33:02,909
so I don't really have a good
explanation for that but I mean these

551
00:33:02,909 --> 00:33:04,139
are sample sizes

552
00:33:04,139 --> 00:33:10,179
love hundreds and hundreds even
thousands of applications

553
00:33:10,179 --> 00:33:13,090
and we're seeing a very distinct
difference between internally developed

554
00:33:13,090 --> 00:33:14,080
code

555
00:33:14,080 --> 00:33:18,280
and say open source code for for some
categories

556
00:33:18,280 --> 00:33:21,629
buffer overflows only shows up in
Commercial Code

557
00:33:21,629 --> 00:33:25,530
thats probably because most internally
developed code

558
00:33:25,530 --> 00:33:29,520
is not written in C++ and C pas plus but
I thought was interesting that it didn't

559
00:33:29,520 --> 00:33:32,200
show up in the open source code

560
00:33:32,200 --> 00:33:35,270
you know there's a lot of C&C plus plus
open source

561
00:33:35,270 --> 00:33:38,710
applications out there why is it showing
up you know this

562
00:33:38,710 --> 00:33:42,720
at least together seven percent the
vulnerabilities

563
00:33:42,720 --> 00:33:46,350
our buffer management buffer overflow
type issues

564
00:33:46,350 --> 00:33:50,109
in Commercial Code and it's not it's
less than one percent

565
00:33:50,109 --> 00:33:54,889
doesn't even show up here open source
code so that was another very distinct

566
00:33:54,889 --> 00:33:59,169
difference and of the open-source guys
just they understand how to manage that

567
00:33:59,169 --> 00:34:00,409
offers better

568
00:34:00,409 --> 00:34:06,770
not sure why that's happening but that
was another distinct difference

569
00:34:06,770 --> 00:34:10,839
so then I decided to look across
industry

570
00:34:10,839 --> 00:34:15,089
so this is the industry that's runnings
running the software so coulda came from

571
00:34:15,089 --> 00:34:16,049
anywhere they could both

572
00:34:16,049 --> 00:34:19,399
themselves could be open source could be

573
00:34:19,399 --> 00:34:23,159
commercial in there they're running the
code

574
00:34:23,159 --> 00:34:29,030
you can see that if we look at the
government this is mostly US government

575
00:34:29,030 --> 00:34:34,280
I we have forty percent of their
applications

576
00:34:34,280 --> 00:34:37,760
or forty percent of their vulnerability
is a sequel injection

577
00:34:37,760 --> 00:34:42,049
versus 29 for finance 30 for software

578
00:34:42,049 --> 00:34:46,190
so if your gonna break into government
ap a guess you seek

579
00:34:46,190 --> 00:34:50,730
injection but a you know I tell tells me
something that they're willing to accept

580
00:34:50,730 --> 00:34:52,339
more risk

581
00:34:52,339 --> 00:34:55,409
this this vulnerability

582
00:34:55,409 --> 00:34:59,799
dad that is obviously used very very
often by attackers it was twenty percent

583
00:34:59,799 --> 00:35:01,400
on the web attacks

584
00:35:01,400 --> 00:35:05,990
most common attack and government
governments accepting more risk so this

585
00:35:05,990 --> 00:35:07,580
tells the government's

586
00:35:07,580 --> 00:35:11,280
application security testing is more
broken than anyone else

587
00:35:11,280 --> 00:35:15,200
on I think that was the only pattern I
saw

588
00:35:15,200 --> 00:35:19,799
that I can they can make any a
significant differences

589
00:35:19,799 --> 00:35:24,380
but this stuff will all be in the the
PDF distributed you can

590
00:35:24,380 --> 00:35:28,670
you can dive into the data or more
yourself

591
00:35:28,670 --> 00:35:32,369
so let's talk a little bit more about
developers

592
00:35:32,369 --> 00:35:35,740
because we're gonna pile onto developers
write

593
00:35:35,740 --> 00:35:39,890
I so I look at the data

594
00:35:39,890 --> 00:35:43,490
and want to see if there was any trance

595
00:35:43,490 --> 00:35:48,060
because we have data that the state all
goes back 18 months

596
00:35:48,060 --> 00:35:51,310
and actually two years

597
00:35:51,310 --> 00:35:55,440
almost two years here and wanna see
there's any trends

598
00:35:55,440 --> 00:35:58,790
is our you knows all the hype about you
know

599
00:35:58,790 --> 00:36:03,790
web applications getting broken into
sinking into different organizations

600
00:36:03,790 --> 00:36:07,150
and so we look cross-eyed scripting in
the percentage of

601
00:36:07,150 --> 00:36:12,010
I app that were affected and it actually
turns out to be flat

602
00:36:12,010 --> 00:36:15,940
right looks like it's going up a little
bit we computed the p-value

603
00:36:15,940 --> 00:36:19,810
which shows if it's the distinctly
significant or not

604
00:36:19,810 --> 00:36:23,630
and there was a significant significant
trends

605
00:36:23,630 --> 00:36:28,790
here so pretty much were holding steady
with cross-eyed scripting right

606
00:36:28,790 --> 00:36:32,920
were using the same language is for
testing aP's the same way

607
00:36:32,920 --> 00:36:36,359
developers are train just about the same

608
00:36:36,359 --> 00:36:41,650
and press a scripting staying the same
we can expect probably

609
00:36:41,650 --> 00:36:45,010
you know sixty-seven percent or
something

610
00:36:45,010 --> 00:36:48,490
I'll haps have process scripting next
year

611
00:36:48,490 --> 00:36:52,750
and perhaps the year after

612
00:36:52,750 --> 00:36:57,390
one thing that was really interesting
was the word is out it seems on sequel

613
00:36:57,390 --> 00:36:59,600
injection

614
00:36:59,600 --> 00:37:02,950
we did the p-value is specifically this
trend is a significant

615
00:37:02,950 --> 00:37:06,890
it starts here about thirty-nine percent

616
00:37:06,890 --> 00:37:12,280
because over here at 32 percent so it's
gone down 7 percent over about two years

617
00:37:12,280 --> 00:37:14,100
which is significant

618
00:37:14,100 --> 00:37:17,480
and I this this gives me hope

619
00:37:17,480 --> 00:37:21,350
right gives me hope that all the talk
about sequel injection

620
00:37:21,350 --> 00:37:25,600
and demonstrating to developers how easy
it is to do breaches

621
00:37:25,600 --> 00:37:29,220
sinking in and development organizations
are saying we should be

622
00:37:29,220 --> 00:37:33,720
at least testing for a sequel injection
lease fixing this

623
00:37:33,720 --> 00:37:37,869
the problem is that this rate it's gonna
take like fifteen years to get lower

624
00:37:37,869 --> 00:37:39,369
than like 20 percent

625
00:37:39,369 --> 00:37:43,549
it's so slow right so tiny bit a

626
00:37:43,549 --> 00:37:49,710
tiny bit of progress some people are
getting the message

627
00:37:49,710 --> 00:37:55,850
I little bit deeper dive on the transfer
the US government

628
00:37:55,850 --> 00:37:59,990
I am this is for cross-site scripting
looks like it's going up

629
00:37:59,990 --> 00:38:03,980
the gray line there is the the overall
trend

630
00:38:03,980 --> 00:38:08,040
oranges the government rent I'm a
statistically it's still flat

631
00:38:08,040 --> 00:38:12,150
so the government is doing worse then
average

632
00:38:12,150 --> 00:38:15,859
but they're staying steady at worse than
average

633
00:38:15,859 --> 00:38:19,380
I getting worse whatever

634
00:38:19,380 --> 00:38:22,790
whatever consolation okay so now

635
00:38:22,790 --> 00:38:26,770
on looking at a pass/fail policy so we

636
00:38:26,770 --> 00:38:31,440
allow our customers to pick a policy and
say no I want my

637
00:38:31,440 --> 00:38:35,260
apt to have no austat 10 vulnerabilities

638
00:38:35,260 --> 00:38:38,930
and you know we can do automated testing
we can do manual testing

639
00:38:38,930 --> 00:38:42,480
I'm but with a whatever kinda testing we
do

640
00:38:42,480 --> 00:38:46,680
the categories we test for they can put
a policy in place

641
00:38:46,680 --> 00:38:50,650
that says on if there's one

642
00:38:50,650 --> 00:38:53,900
issue in the all-star 10 that app is
gonna fail

643
00:38:53,900 --> 00:38:57,230
the development he was gonna have to fix
it and so this is a common policy that

644
00:38:57,230 --> 00:38:59,420
we see with our customers

645
00:38:59,420 --> 00:39:04,680
I so whether this is Commercial Code
outsourced open source

646
00:39:04,680 --> 00:39:09,100
this is all the app's we see I want to
see from a show of hands here what

647
00:39:09,100 --> 00:39:10,029
percentage

648
00:39:10,030 --> 00:39:15,060
do people think is a 34 percent fail
stopped

649
00:39:15,060 --> 00:39:21,180
okay nobody I meet people think it's be
57 percent

650
00:39:21,180 --> 00:39:27,040
nobody how do people think it's C 86
percent

651
00:39:27,040 --> 00:39:33,119
okay we gotta few hands but enhance now
if you think it's ninety-nine percent

652
00:39:33,119 --> 00:39:36,150
okay we have more little bit more there
Sosa

653
00:39:36,150 --> 00:39:39,640
kinda pessimistic crew they have such up

654
00:39:39,640 --> 00:39:43,109
I'm so actually the answer is C

655
00:39:43,109 --> 00:39:46,250
it's not quite ninety-nine percent its
eighty-six percent

656
00:39:46,250 --> 00:39:50,000
so this is the overall eighty-six
percent

657
00:39:50,000 --> 00:39:53,569
fail on and then you can see that

658
00:39:53,569 --> 00:39:58,240
open source she does the worst
ninety-four percent

659
00:39:58,240 --> 00:40:02,690
remember this is just web applications I
commercialize 86

660
00:40:02,690 --> 00:40:06,000
right on the average internally
developed random the average was kinda

661
00:40:06,000 --> 00:40:07,119
interesting that

662
00:40:07,119 --> 00:40:10,970
that if you if you slice if I lost top
10 the codes almost the same depending

663
00:40:10,970 --> 00:40:13,310
on where came from except for open
source

664
00:40:13,310 --> 00:40:16,390
which does does does worse

665
00:40:16,390 --> 00:40:20,240
so you know think about all those web
applications you're downloading

666
00:40:20,240 --> 00:40:23,609
for open source when when you see this

667
00:40:23,609 --> 00:40:26,980
test results

668
00:40:26,980 --> 00:40:32,760
so on ok with you can on this one this
is if you can't do the OAA the CNC w/e

669
00:40:32,760 --> 00:40:36,339
top 25 on on web applications use that
as a policy

670
00:40:36,339 --> 00:40:40,970
you say if there's any vulnerabilities
in there

671
00:40:40,970 --> 00:40:44,540
I Annapolis you can see

672
00:40:44,540 --> 00:40:47,910
a again open source as the worse

673
00:40:47,910 --> 00:40:52,410
I followed by commercial and internally
developed actually has the best

674
00:40:52,410 --> 00:40:59,410
so I thought that was a that was quite
interesting

675
00:40:59,530 --> 00:41:04,450
so one other things that people can do

676
00:41:04,450 --> 00:41:07,020
when they're building the code
themselves as holder internal

677
00:41:07,020 --> 00:41:09,030
development teams accountable

678
00:41:09,030 --> 00:41:12,069
right the sea so can put a policy in
place and says you know we're not

679
00:41:12,069 --> 00:41:14,700
putting that online banking app

680
00:41:14,700 --> 00:41:17,900
up until we've done adequate security
testing

681
00:41:17,900 --> 00:41:23,160
and remediated all whatever we deem to
be the policy that's not acceptable

682
00:41:23,160 --> 00:41:26,690
see the %ah stopped of course for
banking applications

683
00:41:26,690 --> 00:41:30,109
that happens but the slot accompanies
that have webapps

684
00:41:30,109 --> 00:41:33,730
sensitive data out their customer data I
am

685
00:41:33,730 --> 00:41:37,180
other sensitive information that

686
00:41:37,180 --> 00:41:40,960
aren't doing anything so

687
00:41:40,960 --> 00:41:44,370
that sort of the landscape for
internally developed aP's but when it's

688
00:41:44,370 --> 00:41:46,270
a commercial application

689
00:41:46,270 --> 00:41:50,299
that the customers buying right so
they're buying

690
00:41:50,299 --> 00:41:54,490
pieces software to run their business
they can hold their vendor accountable

691
00:41:54,490 --> 00:41:58,750
they can say you know is part is
acquisition process

692
00:41:58,750 --> 00:42:02,470
I want third-party testing just like you
might audit

693
00:42:02,470 --> 00:42:05,750
a service providers I am I to AI

694
00:42:05,750 --> 00:42:09,980
infrastructure and test service provided
if you're sending

695
00:42:09,980 --> 00:42:13,290
you know you're doing online back up to
or something you know

696
00:42:13,290 --> 00:42:16,600
companies will send a team out there do
it on it

697
00:42:16,600 --> 00:42:19,710
we can do the same thing on the software
you're purchasing

698
00:42:19,710 --> 00:42:22,720
just say I'm not gonna just like I won't
accept

699
00:42:22,720 --> 00:42:27,620
my own developers putting flaws in that
are in the %ah stopped and

700
00:42:27,620 --> 00:42:31,549
I'm not going to accept it from the
developers I'm I'm purchasing it from

701
00:42:31,549 --> 00:42:35,440
from from the vendors in person from so

702
00:42:35,440 --> 00:42:39,100
we do this kinda testing to

703
00:42:39,100 --> 00:42:43,040
and I this is this is the data

704
00:42:43,040 --> 00:42:47,850
from the different industries that are
having very code test

705
00:42:47,850 --> 00:42:51,130
IOM the software that they're purchasing
so

706
00:42:51,130 --> 00:42:55,140
the biggest is always seems to be other
in all these kinda charts

707
00:42:55,140 --> 00:42:58,500
the other industry but the number one is
I

708
00:42:58,500 --> 00:43:02,740
finance 21 percent of our customers
doing this or finance customers

709
00:43:02,740 --> 00:43:05,990
followed by the software industry isn't
that interesting

710
00:43:05,990 --> 00:43:09,460
the software industry is testing the
software

711
00:43:09,460 --> 00:43:14,060
that they're purchasing you think they
know something

712
00:43:14,060 --> 00:43:17,319
I think a lot of it is is is not just a
run their business

713
00:43:17,319 --> 00:43:20,330
a lot of the code to suffer purchased
company's purchase

714
00:43:20,330 --> 00:43:25,690
they bundle with their software so if
you look at a a large software package

715
00:43:25,690 --> 00:43:28,870
there are components in that software
package

716
00:43:28,870 --> 00:43:32,569
that a software vendor licenses from
other software vendors

717
00:43:32,569 --> 00:43:35,930
and that's where we're actually seeing
this happen so these are kinda

718
00:43:35,930 --> 00:43:37,589
enlightened software vendors

719
00:43:37,589 --> 00:43:42,380
their testing their own code in their
testing the code from other vendors

720
00:43:42,380 --> 00:43:47,310
that they're purchasing I thought that
was pretty interesting followed by

721
00:43:47,310 --> 00:43:51,190
tech industry telecom industry of

722
00:43:51,190 --> 00:43:56,799
business services media governments not
to be so much only three percent

723
00:43:56,799 --> 00:43:59,890
on this is I air

724
00:43:59,890 --> 00:44:03,250
aeronautical and defense industry EDU

725
00:44:03,250 --> 00:44:08,549
utilities is a funny that Edun utilities
are doing is about the same

726
00:44:08,549 --> 00:44:11,560
utility is way behind the curve on the
stuff right

727
00:44:11,560 --> 00:44:18,339
should be appear with finance right

728
00:44:18,339 --> 00:44:21,730
and these are the purpose is the
application so this is what it did

729
00:44:21,730 --> 00:44:26,049
inside the company so number one
categories operation software

730
00:44:26,049 --> 00:44:30,850
thats IT operations other things that
companies use

731
00:44:30,850 --> 00:44:35,540
to to run their business followed by

732
00:44:35,540 --> 00:44:38,970
other I followed by

733
00:44:38,970 --> 00:44:43,790
security applications or 3.8 percent the
software testing

734
00:44:43,790 --> 00:44:48,759
security software people buy security
software testing security software

735
00:44:48,759 --> 00:44:52,180
have some really interesting numbers on
this show you

736
00:44:52,180 --> 00:44:56,779
I and then followed by web web
applications

737
00:44:56,779 --> 00:45:01,890
I guess it's wet web into web
infrastructure

738
00:45:01,890 --> 00:45:05,120
file by customer customer relationship

739
00:45:05,120 --> 00:45:09,279
software by funny and then financial
service I guess I should have done this

740
00:45:09,279 --> 00:45:11,299
and percentage order

741
00:45:11,299 --> 00:45:14,520
you get you get the idea types of
applications companies aka

742
00:45:14,520 --> 00:45:17,690
concerned about and then

743
00:45:17,690 --> 00:45:21,460
here's the pass/fail right so the
company set the policy they could set a

744
00:45:21,460 --> 00:45:22,950
loss top 10

745
00:45:22,950 --> 00:45:27,029
they could set since you cw8 25 they
could say

746
00:45:27,029 --> 00:45:32,049
we just don't want any hi criticality
vulnerabilities

747
00:45:32,049 --> 00:45:35,640
and this is how different industries
turned out

748
00:45:35,640 --> 00:45:39,509
you look at the top here the industry
sector that is the worst

749
00:45:39,509 --> 00:45:44,310
security products only 26 percent

750
00:45:44,310 --> 00:45:47,920
a security products past whatever

751
00:45:47,920 --> 00:45:52,799
the purchaser's policy-wise contrast
that the financial

752
00:45:52,799 --> 00:45:58,490
which had 58 percent passing

753
00:45:58,490 --> 00:46:02,009
so security software is much

754
00:46:02,009 --> 00:46:05,990
more vulnerable and financial software

755
00:46:05,990 --> 00:46:09,930
think about that for a minute and then
the next category was operations

756
00:46:09,930 --> 00:46:13,009
so this is other software that's running
IT infrastructures

757
00:46:13,009 --> 00:46:16,160
this is like ticketing systems and

758
00:46:16,160 --> 00:46:19,200
I'll log management software

759
00:46:19,200 --> 00:46:22,310
and suffer that's dealing a lot of times
I in

760
00:46:22,310 --> 00:46:26,480
administrative level on the system
second second-most

761
00:46:26,480 --> 00:46:30,460
were second-worst code

762
00:46:30,460 --> 00:46:34,210
on health care also did very poorly

763
00:46:34,210 --> 00:46:37,279
it's interesting that learning and
growth bath

764
00:46:37,279 --> 00:46:41,020
I think it's really because the policy
on learning and growth was a very strict

765
00:46:41,020 --> 00:46:43,720
because there's not a lot of critical
data there

766
00:46:43,720 --> 00:46:48,529
the policy may have been more strict on
things like operations and security

767
00:46:48,529 --> 00:46:52,670
but that's okay right the policy should
be more strict the end of the day

768
00:46:52,670 --> 00:46:56,210
did meet policy had vulnerabilities that

769
00:46:56,210 --> 00:47:01,630
should have been there

770
00:47:01,630 --> 00:47:05,870
so then we looked at all the different
software vendors we broke it down

771
00:47:05,870 --> 00:47:09,279
as public verses non-public

772
00:47:09,279 --> 00:47:13,509
and then we broke the the company's down
by revenue

773
00:47:13,509 --> 00:47:17,130
so I had an interesting blog back and
forth with

774
00:47:17,130 --> 00:47:21,420
I Mary Ann Davidson I caso work

775
00:47:21,420 --> 00:47:25,930
she wrote this long think that basically
said you know it for code is doing

776
00:47:25,930 --> 00:47:29,490
it's okay for small small vendors small
vendors

777
00:47:29,490 --> 00:47:32,589
yeah there a crappy code and

778
00:47:32,589 --> 00:47:36,029
they don't know much about security but

779
00:47:36,029 --> 00:47:39,500
ver codes really bad for big vendors big
vendors don't need to be held

780
00:47:39,500 --> 00:47:40,990
accountable

781
00:47:40,990 --> 00:47:44,890
you should just trust big Anders because
we all have application security

782
00:47:44,890 --> 00:47:47,150
programs right we do a good job

783
00:47:47,150 --> 00:47:50,650
and I we got this under control so

784
00:47:50,650 --> 00:47:54,940
this is this the structure week because
Mary and basically said

785
00:47:54,940 --> 00:47:58,660
she made a statement and i wanna say
let's look at the data

786
00:47:58,660 --> 00:48:03,060
I where D where you back in the sub from
area right so

787
00:48:03,060 --> 00:48:06,950
look at public versus private companies
pretty much the same he's a whisker

788
00:48:06,950 --> 00:48:09,310
charts for this is the median and this
is %ah

789
00:48:09,310 --> 00:48:13,830
stated two standard deviations wide
looks pretty much the same to me

790
00:48:13,830 --> 00:48:17,150
so being a private company which
typically smaller than public companies

791
00:48:17,150 --> 00:48:18,950
public companies are typically bigger

792
00:48:18,950 --> 00:48:21,980
you slice it did it that way missiles
really no difference

793
00:48:21,980 --> 00:48:25,470
in our dataset and then we looked

794
00:48:25,470 --> 00:48:30,160
by the revenue the organization from
your smaller software company

795
00:48:30,160 --> 00:48:34,069
less than $50 million all the way at
your mega software companies

796
00:48:34,069 --> 00:48:38,810
with revenues over a billion look at
this is almost exactly the same

797
00:48:38,810 --> 00:48:45,080
standard deviations almost exactly the
same I'm

798
00:48:45,080 --> 00:48:48,410
and so size doesn't matter when it comes
to writing

799
00:48:48,410 --> 00:48:54,310
abilities

800
00:48:54,310 --> 00:48:57,630
so now I have some data on on a

801
00:48:57,630 --> 00:49:00,660
on mobil's this is the trend right

802
00:49:00,660 --> 00:49:04,310
all the applications that use to be
client server and desktop

803
00:49:04,310 --> 00:49:07,970
over you know 2002-2010

804
00:49:07,970 --> 00:49:11,369
my all we can do almost all those things
on the web now right

805
00:49:11,369 --> 00:49:16,240
people build web applications to
supplant all that desktop stuff

806
00:49:16,240 --> 00:49:20,470
in our seeing another trend happen this
is going to happen over the next decade

807
00:49:20,470 --> 00:49:25,069
is all that stuff now use interactive
web UI

808
00:49:25,069 --> 00:49:29,369
we're just gonna be interacting with a
mobile application

809
00:49:29,369 --> 00:49:32,740
which is interesting right it really
kinda changes

810
00:49:32,740 --> 00:49:36,109
the paradigm it changes the risk model
threat model changes

811
00:49:36,109 --> 00:49:40,589
kinda or abilities new new operating
systems

812
00:49:40,589 --> 00:49:44,980
so I we want to take a dive here this is
just the early days right we've only

813
00:49:44,980 --> 00:49:46,529
been doing this about a year

814
00:49:46,529 --> 00:49:49,670
code we doing webapps for six years and

815
00:49:49,670 --> 00:49:53,130
the industry as a whole has been doing
well perhaps for

816
00:49:53,130 --> 00:49:56,759
you know for 14 15 years even and mobile

817
00:49:56,759 --> 00:50:00,640
just for 23 so still the early days but

818
00:50:00,640 --> 00:50:04,299
some interesting trends we saw

819
00:50:04,299 --> 00:50:07,380
so wanna go through all this like I did
before

820
00:50:07,380 --> 00:50:11,130
because I'm bored to death by on is the
industry's

821
00:50:11,130 --> 00:50:14,790
that we looked at I am and you can see

822
00:50:14,790 --> 00:50:18,460
others point out media was number one

823
00:50:18,460 --> 00:50:22,920
because media companies you know these
uses a distribution mechanism writing

824
00:50:22,920 --> 00:50:27,100
mobile app's and then I think number two

825
00:50:27,100 --> 00:50:32,049
was was other and financial services

826
00:50:32,049 --> 00:50:35,990
I read a lot a lot of mud flaps to run
their business

827
00:50:35,990 --> 00:50:39,390
and then if you look at how the zaps
being written this is very different

828
00:50:39,390 --> 00:50:40,980
than our other data set

829
00:50:40,980 --> 00:50:44,540
right when I had the beginning was I
think over seventy percent were

830
00:50:44,540 --> 00:50:46,020
internally developed

831
00:50:46,020 --> 00:50:50,390
and then the other ones were I vendor
code

832
00:50:50,390 --> 00:50:54,560
like at fifteen percent we had like 10
percent open source in the window but

833
00:50:54,560 --> 00:50:55,790
outsource

834
00:50:55,790 --> 00:50:59,350
very different really did we have a lot
more commercial

835
00:50:59,350 --> 00:51:02,410
applications here more mobile app's is

836
00:51:02,410 --> 00:51:05,790
morow the mobile ecosystem is commercial

837
00:51:05,790 --> 00:51:09,839
I versus developed internally

838
00:51:09,839 --> 00:51:13,619
I and then we open source is pretty much
non-existent

839
00:51:13,619 --> 00:51:18,460
not many open source mobile app so that
make sense

840
00:51:18,460 --> 00:51:22,549
we think there are any on the I was
platform at all

841
00:51:22,549 --> 00:51:26,380
on so then we will look at the end right
data and

842
00:51:26,380 --> 00:51:30,160
number one category is cryptographic
issues as I mentioned before

843
00:51:30,160 --> 00:51:33,460
the injury developers just don't seem to
understand

844
00:51:33,460 --> 00:51:36,660
how to implement kept under wraps and
this is something that you need right

845
00:51:36,660 --> 00:51:38,730
cuz you gonna transmitting this

846
00:51:38,730 --> 00:51:42,350
over potentially insecure network right
your

847
00:51:42,350 --> 00:51:45,540
if you lose your device you want to set
to be stored securely

848
00:51:45,540 --> 00:51:49,609
so crypto as potential even more
important here then

849
00:51:49,609 --> 00:51:54,549
and in the web world I control I feel
injection comes up a lot

850
00:51:54,549 --> 00:51:58,089
it's not very interesting right you can
maybe you can you can mock-ups

851
00:51:58,089 --> 00:52:01,180
data I in the app log files but

852
00:52:01,180 --> 00:52:05,029
typically hard to exploit information
leakage

853
00:52:05,029 --> 00:52:08,330
information leakage on the mobile device
so has

854
00:52:08,330 --> 00:52:12,720
some new meaning right because there's a
lot more private information sources

855
00:52:12,720 --> 00:52:15,450
then if you think about it server

856
00:52:15,450 --> 00:52:18,540
application I'll

857
00:52:18,540 --> 00:52:22,089
on a mobile application you have you
know

858
00:52:22,089 --> 00:52:27,670
address books contact information you
have a look location information

859
00:52:27,670 --> 00:52:30,690
is there's a lot more information that

860
00:52:30,690 --> 00:52:35,520
I can be that can be leaks mobile device

861
00:52:35,520 --> 00:52:38,779
and then we'd have sequence action here
because a lot of

862
00:52:38,779 --> 00:52:45,080
lot of money Android using a sequel
single database is a back-end

863
00:52:45,080 --> 00:52:49,170
and some cross site scripting even

864
00:52:49,170 --> 00:52:52,480
I've been looking at i OS we see the
makeup is

865
00:52:52,480 --> 00:52:56,980
pretty much very different right I error
handling is now number one

866
00:52:56,980 --> 00:53:00,869
I think this is because it's hard to do
error handling in objective-c that it is

867
00:53:00,869 --> 00:53:02,630
in Java

868
00:53:02,630 --> 00:53:06,130
make Sept one still sing a lot a crypto
issues

869
00:53:06,130 --> 00:53:10,609
sourcing lot information leakage an hour
getting buffer management Carrasco

870
00:53:10,609 --> 00:53:11,830
quality

871
00:53:11,830 --> 00:53:16,810
you see here americares buffer overflow
that's because a written in objective-c

872
00:53:16,810 --> 00:53:20,170
for getting a lot more those on
non-toxic

873
00:53:20,170 --> 00:53:25,529
type safe languages the saving grace
here is on the IRS is all code

874
00:53:25,529 --> 00:53:30,310
is signed right it has to be signed on
jailbroken device

875
00:53:30,310 --> 00:53:33,460
which makes it very difficult to

876
00:53:33,460 --> 00:53:36,900
to to exploit those vulnerabilities

877
00:53:36,900 --> 00:53:40,089
so they could definitely the quality
issues

878
00:53:40,089 --> 00:53:45,150
I and potentially you lied to security
issues just just much harder to exploit

879
00:53:45,150 --> 00:53:47,830
and in a lot of other environments
because they're really strict code

880
00:53:47,830 --> 00:53:49,930
signing

881
00:53:49,930 --> 00:53:56,369
so it looks worse but it's actually
better than Android

882
00:53:56,369 --> 00:53:59,540
okay so now I'm gonna finish up with
developers again

883
00:53:59,540 --> 00:54:03,250
so I we have an online e-learning
platform

884
00:54:03,250 --> 00:54:07,930
we've tested over 10,000 developers
that's where the state comes from

885
00:54:07,930 --> 00:54:12,020
so the question is when given an exam on
application security fundamentals which

886
00:54:12,020 --> 00:54:12,839
is just one

887
00:54:12,839 --> 00:54:16,770
1i I it's an hour course with that
assessment test

888
00:54:16,770 --> 00:54:19,930
over half of developers a

889
00:54:19,930 --> 00:54:24,980
receive a day how many people think over
happy developers getting

890
00:54:24,980 --> 00:54:29,410
okay you're learning I how many people
think they gonna pay

891
00:54:29,410 --> 00:54:33,359
over half get a p or worse

892
00:54:33,359 --> 00:54:38,890
one how people think over half get a C
or worse

893
00:54:38,890 --> 00:54:42,060
okay about 10 or 12

894
00:54:42,060 --> 00:54:47,259
and how many people think I over half
gennady rap

895
00:54:47,259 --> 00:54:52,200
okay anymore they're the pessimistic ru

896
00:54:52,200 --> 00:54:56,920
it turns out that the answer is C so
it's not quite as bad so if you look

897
00:54:56,920 --> 00:54:57,830
here

898
00:54:57,830 --> 00:55:01,779
we have over half the developers getting
a CD rack

899
00:55:01,779 --> 00:55:06,009
so the average development team

900
00:55:06,009 --> 00:55:09,880
has 19 percent and the developers at
fail

901
00:55:09,880 --> 00:55:14,170
given given everything so you want those
people write your code

902
00:55:14,170 --> 00:55:17,700
so I just shows you that developers may
think they understand application

903
00:55:17,700 --> 00:55:19,049
security

904
00:55:19,049 --> 00:55:22,509
but in reality really about the less
than half

905
00:55:22,509 --> 00:55:26,299
do half down all it takes is a few
developers

906
00:55:26,299 --> 00:55:30,750
development team to read a lot a
Rottweiler security flaws

907
00:55:30,750 --> 00:55:34,000
and exploitable

908
00:55:34,000 --> 00:55:40,140
so that was all I had for slides I think
we have some time here

909
00:55:40,140 --> 00:55:47,140
for questions same question over that

910
00:55:56,790 --> 00:56:01,680
yep

911
00:56:01,680 --> 00:56:03,569
okay so that the question was

912
00:56:03,569 --> 00:56:07,839
when I was presenting data about I'll on
my language I some I was talking about

913
00:56:07,839 --> 00:56:08,240
us

914
00:56:08,240 --> 00:56:11,309
languages fault its developers fall

915
00:56:11,309 --> 00:56:16,640
aliens I am ultimately it's the
developers fault

916
00:56:16,640 --> 00:56:20,109
ultimately because if the language is
say

917
00:56:20,109 --> 00:56:24,980
missing you know type checking right so
it's allowing you to

918
00:56:24,980 --> 00:56:28,809
index haz the end of your buffer courts
allowing you to copy a

919
00:56:28,809 --> 00:56:33,680
big offer into a smaller buffer the
developer has to be educated on the

920
00:56:33,680 --> 00:56:34,839
house limitations

921
00:56:34,839 --> 00:56:39,559
know that the platform isn't protecting
from those things from happening so

922
00:56:39,559 --> 00:56:40,329
ultimately is

923
00:56:40,329 --> 00:56:44,200
developers fall my my point was as
possible for

924
00:56:44,200 --> 00:56:47,819
the language in platform developers to
build in

925
00:56:47,819 --> 00:56:52,250
some more security mechanism that the
language level so the developers on up

926
00:56:52,250 --> 00:56:53,020
to work as hard

927
00:56:53,020 --> 00:56:56,319
back

928
00:56:56,319 --> 00:57:02,950
rights

929
00:57:02,950 --> 00:57:06,520
I I like to make a statement of
contribution

930
00:57:06,520 --> 00:57:11,539
rather than a question and I hope that
I'm more I'm correct if i'm wrong. short

931
00:57:11,539 --> 00:57:16,630
I think up scary for some time and I
find get a lot of the problems

932
00:57:16,630 --> 00:57:21,039
are more due to operational issues for
example you less light

933
00:57:21,039 --> 00:57:24,420
I would claimed a have to develop us

934
00:57:24,420 --> 00:57:28,520
this one yes take it me in application
security

935
00:57:28,520 --> 00:57:31,960
day no but actually doing it load it
will get

936
00:57:31,960 --> 00:57:35,950
F so a little bit St Ste I'll get back
to you

937
00:57:35,950 --> 00:57:39,500
he'd ever get the picture get blue
screen or all we gotta

938
00:57:39,500 --> 00:57:42,799
budget for education and training it's
nobody's problem that will secure its

939
00:57:42,799 --> 00:57:44,029
okay but the kitchen

940
00:57:44,029 --> 00:57:47,730
at the kitchen don't know what a
securities and I see that

941
00:57:47,730 --> 00:57:50,880
currently a member of loader everyone
has the best

942
00:57:50,880 --> 00:57:54,020
nor developer goes to work do right bet
court

943
00:57:54,020 --> 00:57:57,329
but a little operational issues make
things don't happen

944
00:57:57,329 --> 00:58:01,160
you have 12 points to write some
software which she wants a QB

945
00:58:01,160 --> 00:58:04,970
11 a half months a league-best writing
the software so the hell goes to Q a

946
00:58:04,970 --> 00:58:08,270
cubicles to help that kind of a
situation so

947
00:58:08,270 --> 00:58:12,730
so i i agree there's a lot of a
development organizations that art

948
00:58:12,730 --> 00:58:15,880
doing testing just because they're not
budgeting for it not

949
00:58:15,880 --> 00:58:19,029
you know they're not putting time the
development cycle

950
00:58:19,029 --> 00:58:22,220
and I absolutely agree it's just I don't
have any data

951
00:58:22,220 --> 00:58:26,789
to show what those contributions above
those problems are to the app sec

952
00:58:26,789 --> 00:58:27,359
problems

953
00:58:27,359 --> 00:58:30,720
I don't have that date I have is looking
at the artifact

954
00:58:30,720 --> 00:58:33,950
itself or in this case looking at test
results but I

955
00:58:33,950 --> 00:58:40,440
told agree that's a big contribution
anyone else

956
00:58:40,440 --> 00:58:47,440
where

957
00:58:51,310 --> 00:58:53,240
income by yes fall

958
00:58:53,240 --> 00:58:57,339
you think prosecuting and

959
00:58:57,339 --> 00:59:00,550
Swedish in Dr like res of by from what's

960
00:59:00,550 --> 00:59:04,089
because someone from was in libraries
the campus issues

961
00:59:04,089 --> 00:59:07,670
and flow may be in the car itself but s

962
00:59:07,670 --> 00:59:14,030
no effect so yes there is a bias to our
our testing

963
00:59:14,030 --> 00:59:17,599
right if we don't look for an issue we
don't find it on

964
00:59:17,599 --> 00:59:22,980
I the majority of this data is from
automated testing

965
00:59:22,980 --> 00:59:27,510
it is static and dynamic testing we do
have been your test results in their

966
00:59:27,510 --> 00:59:31,599
om but I think it's probably less than
one percent that

967
00:59:31,599 --> 00:59:35,530
I should should have the pie chart I
don't have the data the top my head but

968
00:59:35,530 --> 00:59:36,240
I would say

969
00:59:36,240 --> 00:59:39,310
probably a little over half its static
and then

970
00:59:39,310 --> 00:59:42,940
lesser is dynamic and manuals a small
slice so

971
00:59:42,940 --> 00:59:46,839
the there the you may have noticed there
wasn't a lot

972
00:59:46,839 --> 00:59:51,540
issues there that can be found only with
manual techniques business logic

973
00:59:51,540 --> 00:59:55,770
you know authorization issues are a lot
of the offers Asian issues

974
00:59:55,770 --> 01:00:00,020
so I am I think if we had a lot of
manual data

975
01:00:00,020 --> 01:00:03,109
you would see some other vulnerable a
categories

976
01:00:03,109 --> 01:00:07,730
maybe maybe rise up but I still don't
think that those who come in anywhere

977
01:00:07,730 --> 01:00:08,380
close

978
01:00:08,380 --> 01:00:12,869
to somebody other issues just because
they're so prevalent

979
01:00:12,869 --> 01:00:16,670
both applications affected and in the
quantities

980
01:00:16,670 --> 01:00:20,460
love them I so

981
01:00:20,460 --> 01:00:23,810
there is a bias but I don't think it's
overwhelming that it would of a sudden

982
01:00:23,810 --> 01:00:25,030
we see authorization as

983
01:00:25,030 --> 01:00:30,700
number five on the chart I don't think
that way your

984
01:00:30,700 --> 01:00:37,700
use committed to life hundreds of

985
01:00:38,560 --> 01:00:45,560
sequined version but I she to Appendix
on it is

986
01:00:46,220 --> 01:00:53,220
a fossil

987
01:00:54,110 --> 01:00:56,400
so arm there's a potential

988
01:00:56,400 --> 01:00:59,430
if there was something in the
environment outside the application that

989
01:00:59,430 --> 01:01:01,020
was blocking these issues

990
01:01:01,020 --> 01:01:06,090
that we win we wouldn't see it it was
outside of what we inspected

991
01:01:06,090 --> 01:01:09,910
and you're right that when you do a me
or penetration test

992
01:01:09,910 --> 01:01:13,100
you have environment never controls that
that

993
01:01:13,100 --> 01:01:17,040
can can block and make things on
certainly not exploitable

994
01:01:17,040 --> 01:01:22,160
I that that's definitely that def

995
01:01:22,160 --> 01:01:26,350
definitely true so I am every

996
01:01:26,350 --> 01:01:33,350
your questioner comment

997
01:01:43,940 --> 01:01:45,940
eighty percent

998
01:01:45,940 --> 01:01:50,600
so so the question was in our 20 percent
developers

999
01:01:50,600 --> 01:01:54,270
producing 80 percent the balls because
they really productive running

1000
01:01:54,270 --> 01:01:58,440
a key code I'm in

1001
01:01:58,440 --> 01:02:02,510
a its it's likely and I would love to be
able to do that

1002
01:02:02,510 --> 01:02:06,070
I would love to be able to correlate you
know the developer

1003
01:02:06,070 --> 01:02:10,000
who wrote the code with I'm

1004
01:02:10,000 --> 01:02:15,210
with with with the vulnerabilities and
also look at what point education

1005
01:02:15,210 --> 01:02:18,240
that they had and and and and and and
try to

1006
01:02:18,240 --> 01:02:21,640
try to mind the data that way I'll but I
just own

1007
01:02:21,640 --> 01:02:25,210
I just don't have that and I know you
like looking into the

1008
01:02:25,210 --> 01:02:28,940
the the source code control system

1009
01:02:28,940 --> 01:02:35,940
can help with with a lot of new code
that's just being written

1010
01:02:38,690 --> 01:02:42,990
okay well thank you very much for coming
thank you

1011
01:02:42,990 --> 01:02:49,990
thank you Chris

1012
01:02:57,819 --> 01:02:59,730
this

1013
01:02:59,730 --> 01:03:06,730
sleep

