1
00:00:26,849 --> 00:00:35,219
hi everyone this talk would be about

2
00:00:31,079 --> 00:00:37,680
content security policy continuity

3
00:00:35,219 --> 00:00:39,180
policy is a defense-in-depth mechanism

4
00:00:37,680 --> 00:00:41,399
against cross-site scripting

5
00:00:39,180 --> 00:00:45,030
vulnerabilities so it's web

6
00:00:41,399 --> 00:00:47,059
defense-in-depth mechanism and we at

7
00:00:45,030 --> 00:00:50,129
Google spent quite a long time

8
00:00:47,059 --> 00:00:53,399
perfecting it we actually worked on the

9
00:00:50,129 --> 00:00:55,530
standard with the w3c and with chrome

10
00:00:53,399 --> 00:00:59,580
and with Firefox and other major

11
00:00:55,530 --> 00:01:01,799
browsers and in this talk I like to just

12
00:00:59,580 --> 00:01:05,188
present like a basically a wrap-up of

13
00:01:01,799 --> 00:01:07,080
what three years of work have been what

14
00:01:05,188 --> 00:01:09,089
are different types of CSP is and how

15
00:01:07,080 --> 00:01:13,798
you can adopt them in a safe way which

16
00:01:09,090 --> 00:01:16,770
is actually really hard and finally some

17
00:01:13,799 --> 00:01:18,530
did some data of one year of exercise

18
00:01:16,770 --> 00:01:22,590
vulnerabilities reported to Google and

19
00:01:18,530 --> 00:01:26,790
for the first time we can show how much

20
00:01:22,590 --> 00:01:28,979
how many of them got mitigated by CSP so

21
00:01:26,790 --> 00:01:31,920
how effective was CSP in the real world

22
00:01:28,979 --> 00:01:35,010
I mean we have of course Google as a

23
00:01:31,920 --> 00:01:38,400
reference but we have dozens and dozens

24
00:01:35,010 --> 00:01:41,790
of services with very high traffic so

25
00:01:38,400 --> 00:01:44,340
it's a story and I hope you'll like it

26
00:01:41,790 --> 00:01:48,540
so very quickly about me I work in

27
00:01:44,340 --> 00:01:53,670
Zurich Google work mostly in what

28
00:01:48,540 --> 00:01:56,700
security and so the first part of the

29
00:01:53,670 --> 00:01:59,340
talk I'm gonna give a little bit of an

30
00:01:56,700 --> 00:02:02,040
introduction like what UCSB what is

31
00:01:59,340 --> 00:02:05,760
cross-site scripting and why it is still

32
00:02:02,040 --> 00:02:08,069
an issue sometimes we hear XSS is no

33
00:02:05,760 --> 00:02:10,709
longer as much as an issue as it used to

34
00:02:08,068 --> 00:02:12,569
be there are many things like that I can

35
00:02:10,709 --> 00:02:14,370
help against exercise fight exercise

36
00:02:12,569 --> 00:02:17,310
this is true but it's very much still an

37
00:02:14,370 --> 00:02:20,489
issue and we see why then as I said some

38
00:02:17,310 --> 00:02:23,849
stats the building blocks of CSP how to

39
00:02:20,489 --> 00:02:26,700
roll out an effective CSP and finally

40
00:02:23,849 --> 00:02:28,470
some advances become food that we never

41
00:02:26,700 --> 00:02:31,920
shared externally so you can do some

42
00:02:28,470 --> 00:02:34,590
pretty wild things with CSP using it in

43
00:02:31,920 --> 00:02:37,649
an advanced way and you can also have

44
00:02:34,590 --> 00:02:38,579
fun and you can also screw up so what to

45
00:02:37,650 --> 00:02:40,319
do what not to do

46
00:02:38,579 --> 00:02:42,269
and

47
00:02:40,319 --> 00:02:44,790
very very last thing is how to

48
00:02:42,269 --> 00:02:46,349
productionize it so basically to deploy

49
00:02:44,790 --> 00:02:49,679
it its production to billions of users

50
00:02:46,349 --> 00:02:52,950
and how to monitor violation reports and

51
00:02:49,680 --> 00:02:58,099
so on so I if you maybe it's not the

52
00:02:52,950 --> 00:03:01,858
first time you've followed me and Lucas

53
00:02:58,099 --> 00:03:03,929
by the way this talk is by me and a

54
00:03:01,859 --> 00:03:07,409
colleague Lucas back so mom who couldn't

55
00:03:03,930 --> 00:03:10,379
be here but he loves Hackney box very

56
00:03:07,409 --> 00:03:19,108
much we're here every year so also send

57
00:03:10,379 --> 00:03:20,548
him his greetings and let's start so we

58
00:03:19,109 --> 00:03:23,939
have a vulnerability reward program at

59
00:03:20,549 --> 00:03:26,629
Google and all the of all the rewards

60
00:03:23,939 --> 00:03:30,540
we've given two thirds approximately our

61
00:03:26,629 --> 00:03:33,870
web platform bugs so web vulnerabilities

62
00:03:30,540 --> 00:03:35,668
dominate our reward pool this is a

63
00:03:33,870 --> 00:03:39,480
little bit unsurprising mostly because

64
00:03:35,669 --> 00:03:43,650
Google is chiefly a web company even if

65
00:03:39,480 --> 00:03:46,798
we do other things - drilling down like

66
00:03:43,650 --> 00:03:49,859
in this web burner web vulnerability

67
00:03:46,799 --> 00:03:52,680
bugs sorry oh what platform bugs we see

68
00:03:49,859 --> 00:03:57,900
that XSS accounts for three-quarters of

69
00:03:52,680 --> 00:04:00,449
those so we have this figure but it's

70
00:03:57,900 --> 00:04:02,879
not only Google also hacker one you can

71
00:04:00,449 --> 00:04:06,479
see that the list cross-site scripting

72
00:04:02,879 --> 00:04:09,179
as their top vulnerability type and also

73
00:04:06,479 --> 00:04:13,919
Mozilla it's definitely their top

74
00:04:09,180 --> 00:04:16,168
vulnerability so here I like to argue

75
00:04:13,919 --> 00:04:17,329
for a moment for the need of for

76
00:04:16,168 --> 00:04:20,548
defense-in-depth

77
00:04:17,329 --> 00:04:22,710
so as you say the vast majority of

78
00:04:20,548 --> 00:04:25,169
application vulnerabilities nowadays are

79
00:04:22,710 --> 00:04:27,539
our web platform issues XSS is still an

80
00:04:25,169 --> 00:04:30,479
issue and a problem here is that the web

81
00:04:27,539 --> 00:04:33,840
platform is not secure by default the

82
00:04:30,479 --> 00:04:38,930
web platform still is not as mature as

83
00:04:33,840 --> 00:04:42,000
to have really secure by default

84
00:04:38,930 --> 00:04:43,919
primitives and an API so you can

85
00:04:42,000 --> 00:04:47,310
introduce exercise vulnerabilities if

86
00:04:43,919 --> 00:04:50,820
you use for example JavaScript Dom API

87
00:04:47,310 --> 00:04:52,560
or if you use frameworks especially for

88
00:04:50,820 --> 00:04:54,240
sensitive application for this reason it

89
00:04:52,560 --> 00:04:57,690
is important to adopt defense

90
00:04:54,240 --> 00:05:00,090
that mechanism such as CSP in case the

91
00:04:57,690 --> 00:05:03,270
really primary security mechanisms fails

92
00:05:00,090 --> 00:05:05,698
and here even before before talking

93
00:05:03,270 --> 00:05:09,448
about CSP in particular I'd like you to

94
00:05:05,699 --> 00:05:12,720
spend a moment distinguishing between a

95
00:05:09,449 --> 00:05:16,410
good mitigation and and so in so

96
00:05:12,720 --> 00:05:19,470
mitigation so we hear about mitigations

97
00:05:16,410 --> 00:05:20,970
in in many ways there are some people

98
00:05:19,470 --> 00:05:23,460
that advocate for them there are some

99
00:05:20,970 --> 00:05:25,199
people that just hate them and say that

100
00:05:23,460 --> 00:05:27,508
they are just raising the bar so they

101
00:05:25,199 --> 00:05:29,340
are just making exploitation more costly

102
00:05:27,509 --> 00:05:33,389
but they're not solving the underlying

103
00:05:29,340 --> 00:05:35,818
issues so everyone here as a point what

104
00:05:33,389 --> 00:05:36,840
I'd like to distinguish here is that

105
00:05:35,819 --> 00:05:39,930
it's true that there are some

106
00:05:36,840 --> 00:05:42,840
mitigations that their only aim is to

107
00:05:39,930 --> 00:05:44,909
raise the bar so they want to they have

108
00:05:42,840 --> 00:05:47,460
an economy of cost in mind they want to

109
00:05:44,909 --> 00:05:48,389
increase the cost of an attack and slow

110
00:05:47,460 --> 00:05:52,169
down the attacker

111
00:05:48,389 --> 00:05:54,870
so CSP as it was around three years ago

112
00:05:52,169 --> 00:05:58,080
mostly white list based CSP where you

113
00:05:54,870 --> 00:06:01,409
had to come up with a with a list of

114
00:05:58,080 --> 00:06:05,550
origin from which you you sourced and

115
00:06:01,409 --> 00:06:08,849
executed resources was pretty much in

116
00:06:05,550 --> 00:06:10,710
this category like the actual sink is

117
00:06:08,849 --> 00:06:14,099
not closed the attacker just needs more

118
00:06:10,710 --> 00:06:16,979
time to find a bypass on that white list

119
00:06:14,099 --> 00:06:19,560
and that's very it was very hard to do

120
00:06:16,979 --> 00:06:21,780
and that's why CSP was not very useful

121
00:06:19,560 --> 00:06:24,150
at the time and we had a paper on this

122
00:06:21,780 --> 00:06:28,698
it is in the last next slide with some

123
00:06:24,150 --> 00:06:31,530
references we can also put some

124
00:06:28,699 --> 00:06:34,770
mitigations from the binary world from

125
00:06:31,530 --> 00:06:38,309
like memory corruption word here they

126
00:06:34,770 --> 00:06:40,560
are they just slow down the attacker one

127
00:06:38,310 --> 00:06:44,819
can say for example that I don't know

128
00:06:40,560 --> 00:06:49,880
like DP or SL are are in this category a

129
00:06:44,819 --> 00:06:54,300
better mitigation is the one that also

130
00:06:49,880 --> 00:06:56,280
reduces the attack surface so by doing

131
00:06:54,300 --> 00:06:59,099
that it creates a measurable secure

132
00:06:56,280 --> 00:07:02,130
security improvement for example if you

133
00:06:59,099 --> 00:07:05,250
disabled parts of an unsafe API and you

134
00:07:02,130 --> 00:07:06,930
make the web developer unable to use it

135
00:07:05,250 --> 00:07:09,510
you are actually

136
00:07:06,930 --> 00:07:12,300
removing an entire class of attack

137
00:07:09,510 --> 00:07:15,390
vectors for example if you do not have

138
00:07:12,300 --> 00:07:17,850
unsafe inline or unsafe evil in in a CSP

139
00:07:15,390 --> 00:07:20,849
policy you cannot use evil which is an

140
00:07:17,850 --> 00:07:23,100
unsafe primitive and basically by doing

141
00:07:20,850 --> 00:07:26,490
that you are actually hardening the code

142
00:07:23,100 --> 00:07:31,200
so a modern way the modern way of using

143
00:07:26,490 --> 00:07:33,840
CSP also induces hardening steps that do

144
00:07:31,200 --> 00:07:35,849
reduce the attack surface and this is

145
00:07:33,840 --> 00:07:39,840
what a better mitigation is in our

146
00:07:35,850 --> 00:07:41,400
opinion for example you need to refactor

147
00:07:39,840 --> 00:07:44,190
things you need to use better better

148
00:07:41,400 --> 00:07:47,219
coding practices and also in case of

149
00:07:44,190 --> 00:07:50,490
what you will see we call nonce base CSP

150
00:07:47,220 --> 00:07:52,560
you are incentivized to use contextual

151
00:07:50,490 --> 00:07:55,290
templating systems that are like the

152
00:07:52,560 --> 00:07:57,210
best way to protect against XSS and not

153
00:07:55,290 --> 00:08:01,800
having the vulnerability in the first

154
00:07:57,210 --> 00:08:05,640
place before going into technical

155
00:08:01,800 --> 00:08:09,720
details of CSP and would like to give

156
00:08:05,640 --> 00:08:14,280
you some data about Google currently we

157
00:08:09,720 --> 00:08:16,800
have an enforcing CSP on 62% of all

158
00:08:14,280 --> 00:08:19,710
outgoing Google traffic we are

159
00:08:16,800 --> 00:08:22,290
prioritizing by domain sensitivity we

160
00:08:19,710 --> 00:08:25,320
have more than 80 domains at Google and

161
00:08:22,290 --> 00:08:28,380
we have more than 160 services so we had

162
00:08:25,320 --> 00:08:33,860
to prioritize and for the very sensitive

163
00:08:28,380 --> 00:08:39,720
domains we have almost 100% coverage and

164
00:08:33,860 --> 00:08:43,080
of all the externally reported XSS in

165
00:08:39,720 --> 00:08:47,310
2018 more than 60 percent were actually

166
00:08:43,080 --> 00:08:50,340
mitigated by CSP among the 11 on very

167
00:08:47,310 --> 00:08:54,890
sensitive domains 9 were on endpoints

168
00:08:50,340 --> 00:08:57,630
that had CSP deployed and all of which 7

169
00:08:54,890 --> 00:09:01,170
CSP successfully prevented exploitation

170
00:08:57,630 --> 00:09:03,810
and among all the values 69 XSS

171
00:09:01,170 --> 00:09:08,459
vulnerability on sensitive domains 60%

172
00:09:03,810 --> 00:09:10,469
were prevented by or mitigated by CSP so

173
00:09:08,460 --> 00:09:13,080
these are the pie chart you can say

174
00:09:10,470 --> 00:09:17,100
around 78% on very sensitive domains and

175
00:09:13,080 --> 00:09:20,790
around 60% on all the sensitive domains

176
00:09:17,100 --> 00:09:23,910
and here is another visualization of 11

177
00:09:20,790 --> 00:09:27,510
I had CSV of these nine seven God

178
00:09:23,910 --> 00:09:30,480
mitigated and the rest could be covered

179
00:09:27,510 --> 00:09:33,740
by a more comprehensive CSV and we see

180
00:09:30,480 --> 00:09:37,590
later what this means

181
00:09:33,740 --> 00:09:40,110
so this were the causes of the exercises

182
00:09:37,590 --> 00:09:44,030
that got reported to us I think this is

183
00:09:40,110 --> 00:09:48,450
a particularly interesting pie chart so

184
00:09:44,030 --> 00:09:51,660
it's pretty hard to say what is the

185
00:09:48,450 --> 00:09:56,040
ultimate sink of an XSS vulnerability so

186
00:09:51,660 --> 00:09:59,310
we just put in here what the reporter

187
00:09:56,040 --> 00:10:01,680
how the reporter in his or her proof of

188
00:09:59,310 --> 00:10:03,930
concept actually exploited the

189
00:10:01,680 --> 00:10:05,760
vulnerability there might be more than

190
00:10:03,930 --> 00:10:08,400
one sometimes it's the boundaries a

191
00:10:05,760 --> 00:10:11,580
little bit fuzzy but basically something

192
00:10:08,400 --> 00:10:14,340
very interesting is that using

193
00:10:11,580 --> 00:10:18,090
javascript your eyes and inline event

194
00:10:14,340 --> 00:10:24,540
handlers and data your eyes for example

195
00:10:18,090 --> 00:10:26,940
are already more than 1/4 of the things

196
00:10:24,540 --> 00:10:29,939
this was a little surprising for us for

197
00:10:26,940 --> 00:10:33,150
example we were expecting more fancy and

198
00:10:29,940 --> 00:10:37,680
no evil things but actually evil is

199
00:10:33,150 --> 00:10:39,449
almost non-existent and so this is

200
00:10:37,680 --> 00:10:41,790
pretty interesting because you see that

201
00:10:39,450 --> 00:10:44,700
actually even the most basic CSP you can

202
00:10:41,790 --> 00:10:46,380
apply covers these basic cases like

203
00:10:44,700 --> 00:10:49,290
that's not allow JavaScript your eye

204
00:10:46,380 --> 00:10:52,320
does not allow inline event handlers and

205
00:10:49,290 --> 00:10:56,630
does not allow data URI or injection

206
00:10:52,320 --> 00:11:00,720
into inner HTML context as you see later

207
00:10:56,630 --> 00:11:04,200
so here is a not at all comprehensive

208
00:11:00,720 --> 00:11:08,610
table of like exercise things and what

209
00:11:04,200 --> 00:11:13,230
CSP houses we can can help blocking them

210
00:11:08,610 --> 00:11:15,720
so the important thing is a JavaScript

211
00:11:13,230 --> 00:11:18,450
URI data URI which is just a wrapper

212
00:11:15,720 --> 00:11:21,030
basically that specifies is the content

213
00:11:18,450 --> 00:11:23,970
type and the code and the inner HTML

214
00:11:21,030 --> 00:11:26,459
content which can be basically a pure

215
00:11:23,970 --> 00:11:30,900
reflection into HTML context or a

216
00:11:26,460 --> 00:11:34,529
programmatic Dom based injection into

217
00:11:30,900 --> 00:11:37,800
the inner HTML property of a Dom element

218
00:11:34,529 --> 00:11:40,800
they're all blocked if CSP lacks unsafe

219
00:11:37,800 --> 00:11:44,189
inline so CSP can be relaxed right you

220
00:11:40,800 --> 00:11:46,410
can put unsafe - things and if you do

221
00:11:44,190 --> 00:11:48,630
not have them your CSP is stronger

222
00:11:46,410 --> 00:11:52,469
okay so if you do not have unsafe inline

223
00:11:48,630 --> 00:11:55,589
you cover actually a pretty large part

224
00:11:52,470 --> 00:11:59,100
of the of this party already this is to

225
00:11:55,589 --> 00:12:01,740
say you don't have to think right i CSP

226
00:11:59,100 --> 00:12:04,410
so hard I don't have I can't deploy

227
00:12:01,740 --> 00:12:06,420
immediately the the best is P so I will

228
00:12:04,410 --> 00:12:08,819
not do it at all actually if you do even

229
00:12:06,420 --> 00:12:10,800
the simplest to implement and will show

230
00:12:08,820 --> 00:12:14,670
later how to implement you already

231
00:12:10,800 --> 00:12:19,380
covered quite a big part of the actual

232
00:12:14,670 --> 00:12:21,889
real word XSS exploitation vectors then

233
00:12:19,380 --> 00:12:25,050
there is an evil that as you know it

234
00:12:21,889 --> 00:12:27,660
evaluates a string as JavaScript and

235
00:12:25,050 --> 00:12:32,040
this is blocked by CSP if it does not

236
00:12:27,660 --> 00:12:35,819
have unsafe Evo then there are

237
00:12:32,040 --> 00:12:38,730
injections into the text of a script tag

238
00:12:35,820 --> 00:12:41,850
or into the source attribute of a script

239
00:12:38,730 --> 00:12:45,390
tag and basically these are taking care

240
00:12:41,850 --> 00:12:47,790
of by non sing or hashing and we'll see

241
00:12:45,390 --> 00:12:49,850
later what non-sync means because this

242
00:12:47,790 --> 00:12:53,640
is our preferred way of doing CSP

243
00:12:49,850 --> 00:12:57,390
against XSS and finally there are some

244
00:12:53,640 --> 00:12:59,329
more esoteric way of exploiting some web

245
00:12:57,390 --> 00:13:03,990
popular web frame frameworks such as

246
00:12:59,329 --> 00:13:06,479
angularjs when I say angularjs I mean

247
00:13:03,990 --> 00:13:09,870
really angularjs not angular 2 angular 2

248
00:13:06,480 --> 00:13:12,300
3 angular 7 and your 40 they like big

249
00:13:09,870 --> 00:13:16,170
numbers nowadays so angularjs is angular

250
00:13:12,300 --> 00:13:18,660
1 ok it's these things do not happen

251
00:13:16,170 --> 00:13:21,540
with angular 2 plus because angular 2

252
00:13:18,660 --> 00:13:22,949
plus has ahead of time compilation of

253
00:13:21,540 --> 00:13:27,000
templates or at least this is how you

254
00:13:22,949 --> 00:13:34,109
should use it we not go into details of

255
00:13:27,000 --> 00:13:38,190
these advanced techniques ok so first

256
00:13:34,110 --> 00:13:40,620
thing the first time you might have

257
00:13:38,190 --> 00:13:44,040
heard of CSP you probably have heard it

258
00:13:40,620 --> 00:13:46,319
of a collection of whitelist like you

259
00:13:44,040 --> 00:13:48,150
have to list all the origins from which

260
00:13:46,319 --> 00:13:50,040
you saw you source

261
00:13:48,150 --> 00:13:52,740
basically resources like scripts or

262
00:13:50,040 --> 00:13:55,050
styles or images here we're focusing on

263
00:13:52,740 --> 00:13:58,620
scripts only because we care about XSS

264
00:13:55,050 --> 00:14:02,729
also by the way CSP is as evolved

265
00:13:58,620 --> 00:14:05,190
mostly as an XSS mitigation mechanism it

266
00:14:02,730 --> 00:14:07,800
is not to be used for example against

267
00:14:05,190 --> 00:14:10,440
exfiltration because it will never cover

268
00:14:07,800 --> 00:14:14,250
all the possible ways of exfiltrating

269
00:14:10,440 --> 00:14:16,529
content so our advice is to use CSP

270
00:14:14,250 --> 00:14:18,570
against XSS not for other things you can

271
00:14:16,529 --> 00:14:22,830
use it for example to limit framing too

272
00:14:18,570 --> 00:14:25,589
but we advise against using it for

273
00:14:22,830 --> 00:14:27,660
example you know trying to do navigation

274
00:14:25,589 --> 00:14:32,640
J's which are not possible or for

275
00:14:27,660 --> 00:14:34,290
example you know like it's like against

276
00:14:32,640 --> 00:14:35,760
exfiltrating content because that's just

277
00:14:34,290 --> 00:14:38,880
not possible

278
00:14:35,760 --> 00:14:41,160
okay so why not what is basis B as the

279
00:14:38,880 --> 00:14:43,950
president says it sounds like a good

280
00:14:41,160 --> 00:14:47,010
idea but doesn't work okay

281
00:14:43,950 --> 00:14:52,140
we'll be short on this we have a paper

282
00:14:47,010 --> 00:14:54,930
si si si cm in 2016 that explains that

283
00:14:52,140 --> 00:14:57,000
more than 95% of the white lists are

284
00:14:54,930 --> 00:14:59,849
automatically by possible so by an

285
00:14:57,000 --> 00:15:01,560
algorithm right and there's a research

286
00:14:59,850 --> 00:15:03,240
paper and we have also tool which is a

287
00:15:01,560 --> 00:15:04,829
CSP evaluator which we created to

288
00:15:03,240 --> 00:15:07,770
demonstrate you just put your policy or

289
00:15:04,830 --> 00:15:09,779
your site and it will tell you how your

290
00:15:07,770 --> 00:15:12,000
policy is broken if it is a whitelist

291
00:15:09,779 --> 00:15:15,300
based policy it is broken okay it is

292
00:15:12,000 --> 00:15:18,150
breakable automatically 95% of cases and

293
00:15:15,300 --> 00:15:20,459
manually more than 99% of case manually

294
00:15:18,150 --> 00:15:22,319
just means an engineer has to take a

295
00:15:20,459 --> 00:15:26,130
look for a few seconds to your policy

296
00:15:22,320 --> 00:15:29,490
okay so why because basically there are

297
00:15:26,130 --> 00:15:31,830
few things that actually allow an

298
00:15:29,490 --> 00:15:34,050
attacker to use one of your white listed

299
00:15:31,830 --> 00:15:36,630
origins to just basically proxy

300
00:15:34,050 --> 00:15:40,260
JavaScript and this is done through JSON

301
00:15:36,630 --> 00:15:42,839
P endpoints or by just hosting some

302
00:15:40,260 --> 00:15:46,350
libraries that have vulnerabilities such

303
00:15:42,839 --> 00:15:49,050
as angularjs so for example a very bad

304
00:15:46,350 --> 00:15:52,770
thing you could do is just whitelist the

305
00:15:49,050 --> 00:15:55,439
CDN if you whitelist the CDN your 100%

306
00:15:52,770 --> 00:15:57,810
by possible like storage Google API is

307
00:15:55,440 --> 00:15:59,520
over a CDN ëifí or things like that

308
00:15:57,810 --> 00:16:01,500
because you just source the attacker

309
00:15:59,520 --> 00:16:02,010
just sources angular and then puts a

310
00:16:01,500 --> 00:16:03,780
sandbox

311
00:16:02,010 --> 00:16:06,150
I pass and then you have JavaScript

312
00:16:03,780 --> 00:16:08,339
execution even if your site didn't use

313
00:16:06,150 --> 00:16:10,980
angular okay but your whitelisting

314
00:16:08,340 --> 00:16:13,860
something that hosts everything in there

315
00:16:10,980 --> 00:16:15,510
saying okay so I mean little bit too

316
00:16:13,860 --> 00:16:18,510
long on this do not use whitelist please

317
00:16:15,510 --> 00:16:20,550
they do not work they work just in very

318
00:16:18,510 --> 00:16:22,830
very very few cases and also you do not

319
00:16:20,550 --> 00:16:24,599
have control of all the origins your

320
00:16:22,830 --> 00:16:26,850
whitelist so you do not know if

321
00:16:24,600 --> 00:16:29,700
something has changed more things are

322
00:16:26,850 --> 00:16:31,800
hosted under these origins you are

323
00:16:29,700 --> 00:16:34,890
trusting so please do not use it it does

324
00:16:31,800 --> 00:16:37,949
not work what we suggest to use against

325
00:16:34,890 --> 00:16:41,640
XSS is the so-called ghost base CSP we

326
00:16:37,950 --> 00:16:44,310
talked about it in like previous years

327
00:16:41,640 --> 00:16:50,460
to you might avert it if it is the first

328
00:16:44,310 --> 00:16:53,069
time you are you know into CSP I just go

329
00:16:50,460 --> 00:16:55,040
pretty quickly so unknowns is an

330
00:16:53,070 --> 00:16:57,240
attribute you put to the script tag

331
00:16:55,040 --> 00:17:00,209
usually you can also put it with a style

332
00:16:57,240 --> 00:17:05,370
tag or link rel stylesheet' tag and

333
00:17:00,210 --> 00:17:08,190
basically it's a unique response token

334
00:17:05,369 --> 00:17:10,229
or well cryptographic knows as it should

335
00:17:08,190 --> 00:17:12,089
be called the whole point is that it is

336
00:17:10,230 --> 00:17:13,980
unguessable and it is unique per

337
00:17:12,089 --> 00:17:16,319
response okay so it has to be generated

338
00:17:13,980 --> 00:17:20,610
server-side a little bit like a CSRF

339
00:17:16,319 --> 00:17:22,740
token and the idea is if and you have to

340
00:17:20,609 --> 00:17:25,050
put the same knows in a policy so the

341
00:17:22,740 --> 00:17:28,319
policy sent via HTTP header it will be

342
00:17:25,050 --> 00:17:31,230
context QT policy : script SRC knowns

343
00:17:28,319 --> 00:17:35,220
and the nonce which should be a base64

344
00:17:31,230 --> 00:17:38,640
encoded string not too short otherwise

345
00:17:35,220 --> 00:17:40,050
route possible and basically only the

346
00:17:38,640 --> 00:17:43,470
scripts that have a matching nonce

347
00:17:40,050 --> 00:17:46,010
attribute we will be granted execution

348
00:17:43,470 --> 00:17:49,830
rights okay so basically if the nose is

349
00:17:46,010 --> 00:17:51,420
not right and an attacker cannot inject

350
00:17:49,830 --> 00:17:53,129
a script tag because they do not know

351
00:17:51,420 --> 00:17:56,940
the nose because it is sent with the

352
00:17:53,130 --> 00:17:58,980
same response via HTTP headers okay if

353
00:17:56,940 --> 00:18:02,390
it is correct if granted execution if

354
00:17:58,980 --> 00:18:05,670
it's not correct it will not be executed

355
00:18:02,390 --> 00:18:08,520
if you also add a keyword that it's

356
00:18:05,670 --> 00:18:11,070
called strict dynamic which I am my

357
00:18:08,520 --> 00:18:12,150
colleague Lukas worked on in the last

358
00:18:11,070 --> 00:18:14,370
few years

359
00:18:12,150 --> 00:18:15,810
strict dynamic makes adoption of no

360
00:18:14,370 --> 00:18:18,179
space ESP

361
00:18:15,810 --> 00:18:20,429
a little bit easier we'll see it later

362
00:18:18,180 --> 00:18:23,270
basically what strict dynamic says is if

363
00:18:20,430 --> 00:18:30,800
you have a correctly known script and

364
00:18:23,270 --> 00:18:33,470
like okay like there and that script

365
00:18:30,800 --> 00:18:36,720
dynamically creates another script and

366
00:18:33,470 --> 00:18:39,600
appends it to the Dom will also allow

367
00:18:36,720 --> 00:18:43,770
the dynamically created script because

368
00:18:39,600 --> 00:18:46,649
this is a trust propagation problem we

369
00:18:43,770 --> 00:18:49,020
are explicitly marking as allowed the

370
00:18:46,650 --> 00:18:51,570
parent script so trust gets propagated

371
00:18:49,020 --> 00:18:54,240
to the children okay so this of course

372
00:18:51,570 --> 00:18:56,460
weakens a little bit the security

373
00:18:54,240 --> 00:19:00,180
guarantees but basically the idea is if

374
00:18:56,460 --> 00:19:02,550
you manually bless your scripts you are

375
00:19:00,180 --> 00:19:04,770
also trusting them not to include things

376
00:19:02,550 --> 00:19:08,240
that are vulnerable or they have XSS and

377
00:19:04,770 --> 00:19:11,850
we see later little bit more in detail

378
00:19:08,240 --> 00:19:13,560
so adopting adopting CSP is always a

379
00:19:11,850 --> 00:19:16,050
trade-off between the security

380
00:19:13,560 --> 00:19:17,550
guarantees how strong it is and how easy

381
00:19:16,050 --> 00:19:19,830
it is to deploy it

382
00:19:17,550 --> 00:19:24,960
how much refactoring is involved for

383
00:19:19,830 --> 00:19:27,149
example and we we like to say that there

384
00:19:24,960 --> 00:19:28,650
are many ways like you can have

385
00:19:27,150 --> 00:19:32,160
different types of CSPs

386
00:19:28,650 --> 00:19:36,030
and they become more and more secure

387
00:19:32,160 --> 00:19:39,600
like towards level 4 but they're also

388
00:19:36,030 --> 00:19:45,149
harder to implement because they require

389
00:19:39,600 --> 00:19:47,730
more a factoring ok so the level 1 CSP

390
00:19:45,150 --> 00:19:49,740
is actually a very new way of doing CSP

391
00:19:47,730 --> 00:19:52,410
and we'll talk about it later because

392
00:19:49,740 --> 00:19:56,300
it's really worse with new blink

393
00:19:52,410 --> 00:20:01,880
browsers which is basically chromium and

394
00:19:56,300 --> 00:20:04,710
edge soon level 2 is what we always

395
00:20:01,880 --> 00:20:08,310
suggested which is no strict dynamic and

396
00:20:04,710 --> 00:20:10,920
safe evil level 3 is dropping a safe

397
00:20:08,310 --> 00:20:15,360
evil so disallowing evil completely and

398
00:20:10,920 --> 00:20:17,610
level 4 is like just using gnosis so

399
00:20:15,360 --> 00:20:20,860
without trust propagation

400
00:20:17,610 --> 00:20:23,800
okay so we skip level one for now

401
00:20:20,860 --> 00:20:27,969
because it is very new we put it in the

402
00:20:23,800 --> 00:20:31,210
advanced CSP section so this is a pretty

403
00:20:27,970 --> 00:20:32,710
good CSP already you can try to use we

404
00:20:31,210 --> 00:20:35,320
we think this is a good trade-off

405
00:20:32,710 --> 00:20:37,480
between the refactoring efforts and the

406
00:20:35,320 --> 00:20:40,240
covered things so what you do is you put

407
00:20:37,480 --> 00:20:43,540
a nonce and you put a strict dynamic and

408
00:20:40,240 --> 00:20:49,810
safe Evo so unsafe evil just allows evil

409
00:20:43,540 --> 00:20:52,300
to work evil is used in places you would

410
00:20:49,810 --> 00:20:55,720
not expect sometimes frameworks use it

411
00:20:52,300 --> 00:20:56,409
to do module loading so to load at

412
00:20:55,720 --> 00:20:58,990
runtime

413
00:20:56,410 --> 00:21:01,690
thanks sometimes they use it to parse

414
00:20:58,990 --> 00:21:06,010
things and that's problematic they

415
00:21:01,690 --> 00:21:08,560
should not do that but basically a

416
00:21:06,010 --> 00:21:10,960
policy like this it's also important to

417
00:21:08,560 --> 00:21:14,139
remember to also put object source none

418
00:21:10,960 --> 00:21:16,270
and base your EIN on okay object source

419
00:21:14,140 --> 00:21:19,510
protects against plugins and beasts your

420
00:21:16,270 --> 00:21:22,540
Einon protects against something that is

421
00:21:19,510 --> 00:21:24,370
called rebasing of script of non script

422
00:21:22,540 --> 00:21:26,290
it's a little bit of an advanced topic

423
00:21:24,370 --> 00:21:28,209
but basically just put it please because

424
00:21:26,290 --> 00:21:30,670
otherwise if you have relative paths in

425
00:21:28,210 --> 00:21:32,980
the non scripts an attacker can just

426
00:21:30,670 --> 00:21:35,110
inject a base tag and hijack all your

427
00:21:32,980 --> 00:21:36,760
scripts so you have to put it I know

428
00:21:35,110 --> 00:21:38,649
it's a little bit hard but basically the

429
00:21:36,760 --> 00:21:40,390
idea is this is one policy you just put

430
00:21:38,650 --> 00:21:42,400
this you don't have to come up with a

431
00:21:40,390 --> 00:21:47,050
with a whitelist it is always the same

432
00:21:42,400 --> 00:21:48,640
okay so this is very good offers very

433
00:21:47,050 --> 00:21:51,600
good protection against reflected and

434
00:21:48,640 --> 00:21:54,040
stored XSS most of them are mitigated

435
00:21:51,600 --> 00:21:55,540
there is very little refactoring

436
00:21:54,040 --> 00:21:57,970
required actually you just have to get

437
00:21:55,540 --> 00:22:00,159
rid of inline event handlers and you

438
00:21:57,970 --> 00:22:03,340
have to add a nonce attribute to the

439
00:22:00,160 --> 00:22:05,170
scripts it is particularly good if you

440
00:22:03,340 --> 00:22:07,780
also embed the JavaScript that you do

441
00:22:05,170 --> 00:22:11,800
not control for example Twitter widget

442
00:22:07,780 --> 00:22:14,170
Facebook widget things like that it has

443
00:22:11,800 --> 00:22:17,620
excellent browser support you supported

444
00:22:14,170 --> 00:22:22,570
by all major browsers which means Chrome

445
00:22:17,620 --> 00:22:26,709
Firefox Opera all the older older blink

446
00:22:22,570 --> 00:22:28,659
based one and AD soon the only cons is

447
00:22:26,710 --> 00:22:31,180
that evil sinks are not covered and

448
00:22:28,660 --> 00:22:35,290
there is still

449
00:22:31,180 --> 00:22:38,890
very small window where Dom XSS are not

450
00:22:35,290 --> 00:22:41,830
covered so here is a handy table it will

451
00:22:38,890 --> 00:22:43,540
block attacks that are based on

452
00:22:41,830 --> 00:22:45,669
JavaScript your eyes data your eyes

453
00:22:43,540 --> 00:22:48,399
inner HTML content and inline event

454
00:22:45,670 --> 00:22:52,300
handler this was already a pretty large

455
00:22:48,400 --> 00:22:56,080
part of the pie that I should before it

456
00:22:52,300 --> 00:22:59,820
will allow evil and it the attack if the

457
00:22:56,080 --> 00:23:05,620
attacker is able to inject code inside a

458
00:22:59,820 --> 00:23:07,600
script script body script text or in the

459
00:23:05,620 --> 00:23:11,500
SRC attribute unfortunately this is not

460
00:23:07,600 --> 00:23:13,240
covered and what is a refactoring you

461
00:23:11,500 --> 00:23:14,770
have to do you have as I said you have

462
00:23:13,240 --> 00:23:17,470
to remove the inline event handlers like

463
00:23:14,770 --> 00:23:19,660
there the on click you have to actually

464
00:23:17,470 --> 00:23:23,800
factor it out and doing an event

465
00:23:19,660 --> 00:23:26,580
listener click that and you have to add

466
00:23:23,800 --> 00:23:29,290
nonce attributes to script tags okay

467
00:23:26,580 --> 00:23:30,850
hopefully a templating system will do

468
00:23:29,290 --> 00:23:33,370
this for you right you don't have to do

469
00:23:30,850 --> 00:23:35,860
it manually and using a templating

470
00:23:33,370 --> 00:23:39,389
system is the best way actually to avoid

471
00:23:35,860 --> 00:23:39,389
that any exercise in the first place

472
00:23:41,340 --> 00:23:44,470
okay

473
00:23:42,520 --> 00:23:47,770
so even better is dropping unsafe evil

474
00:23:44,470 --> 00:23:49,330
if you don't use evil you just drop and

475
00:23:47,770 --> 00:23:51,879
see if evil and you remove an entire

476
00:23:49,330 --> 00:23:54,610
class of vulnerability that are the ones

477
00:23:51,880 --> 00:23:57,790
that use evil so basically you just drop

478
00:23:54,610 --> 00:24:03,070
evil and it's like before but evil is

479
00:23:57,790 --> 00:24:05,950
also covered okay and here I wanted to

480
00:24:03,070 --> 00:24:09,700
show how to refactor evil in one common

481
00:24:05,950 --> 00:24:13,270
case so sometimes especially for old

482
00:24:09,700 --> 00:24:17,490
browsers it's a common pattern to evil a

483
00:24:13,270 --> 00:24:20,559
JSON blob okay usually with the

484
00:24:17,490 --> 00:24:22,270
parentheses you can use this on parts

485
00:24:20,559 --> 00:24:26,020
for that reason Part C is faster and

486
00:24:22,270 --> 00:24:30,030
more secure okay so this is the only

487
00:24:26,020 --> 00:24:30,030
extra step of refactoring needed here

488
00:24:32,200 --> 00:24:36,639
okay so here are a very quick thing if

489
00:24:34,929 --> 00:24:38,500
you don't like gnosis you have a static

490
00:24:36,639 --> 00:24:40,719
site so you don't want to generate

491
00:24:38,500 --> 00:24:43,960
different tokens at each responses you

492
00:24:40,720 --> 00:24:45,610
can also use hashes so something

493
00:24:43,960 --> 00:24:48,580
actually pretty cool that we'd like to

494
00:24:45,610 --> 00:24:50,559
show is that since trick dynamic has

495
00:24:48,580 --> 00:24:52,570
enables these trance propagation

496
00:24:50,559 --> 00:24:55,299
mechanism what you can do is also only

497
00:24:52,570 --> 00:24:57,668
also have just one script block that is

498
00:24:55,299 --> 00:25:00,340
we call a bootstrapping

499
00:24:57,669 --> 00:25:03,700
script that basically loads all your

500
00:25:00,340 --> 00:25:05,709
JavaScript and since it is a static

501
00:25:03,700 --> 00:25:08,049
content you can hash the content between

502
00:25:05,710 --> 00:25:10,840
this script tag and then you just put

503
00:25:08,049 --> 00:25:13,179
the sha-256 of that and strict dynamic

504
00:25:10,840 --> 00:25:15,250
basically all the scripts that are

505
00:25:13,179 --> 00:25:17,169
loaded by that script tag will work

506
00:25:15,250 --> 00:25:19,720
because of strict dynamic so the trust

507
00:25:17,169 --> 00:25:22,419
will be propagated and you can have this

508
00:25:19,720 --> 00:25:24,610
on a static site you can have it on you

509
00:25:22,419 --> 00:25:26,019
know on your desktop you can have it you

510
00:25:24,610 --> 00:25:28,379
don't need a server that generates

511
00:25:26,019 --> 00:25:31,539
random nonces okay so this is as good

512
00:25:28,380 --> 00:25:34,120
it's actually slightly better from a

513
00:25:31,539 --> 00:25:35,470
security point of view but it's not

514
00:25:34,120 --> 00:25:38,649
always what you need so we just wanted

515
00:25:35,470 --> 00:25:45,010
to mention gnosis or half is these are

516
00:25:38,649 --> 00:25:47,860
hashes okay even better is dropping

517
00:25:45,010 --> 00:25:52,000
strict dynamic so if you can and you

518
00:25:47,860 --> 00:25:54,600
want to be really really safe you just

519
00:25:52,000 --> 00:25:57,549
put the norms so what you need to do is

520
00:25:54,600 --> 00:25:59,678
physically not only put in the nonce

521
00:25:57,549 --> 00:26:01,809
attribute to all your scripts but you

522
00:25:59,679 --> 00:26:04,809
also have to make sure that this all the

523
00:26:01,809 --> 00:26:07,720
scripts that you transitively load pass

524
00:26:04,809 --> 00:26:10,658
that nose to the children scripts so if

525
00:26:07,720 --> 00:26:12,789
you source for example some JavaScript

526
00:26:10,659 --> 00:26:15,700
you do not control like widgets for

527
00:26:12,789 --> 00:26:17,799
example I don't know Twitter so on you

528
00:26:15,700 --> 00:26:20,909
can unfortunately not use that because

529
00:26:17,799 --> 00:26:23,559
they will try to load their twitter.com

530
00:26:20,909 --> 00:26:26,880
something scripts and they will not

531
00:26:23,559 --> 00:26:29,710
usually not there are more and more

532
00:26:26,880 --> 00:26:32,559
widget and script are now known

533
00:26:29,710 --> 00:26:33,909
somewhere so they will pass the nose for

534
00:26:32,559 --> 00:26:36,309
example Google Analytics will pass the

535
00:26:33,909 --> 00:26:40,029
nose reCAPTCHA will pass the nose but

536
00:26:36,309 --> 00:26:42,340
others including some ads will not yet

537
00:26:40,029 --> 00:26:43,570
so this is problematic this is why we

538
00:26:42,340 --> 00:26:45,090
create a strict dynamic right because

539
00:26:43,570 --> 00:26:47,220
this was not possible

540
00:26:45,090 --> 00:26:49,199
now it is more and more possible in more

541
00:26:47,220 --> 00:26:52,190
places so basically this is better from

542
00:26:49,200 --> 00:26:54,540
a security point of view it is as

543
00:26:52,190 --> 00:26:56,850
supported actually it is more supportive

544
00:26:54,540 --> 00:27:01,950
because strict dynamic is not supported

545
00:26:56,850 --> 00:27:03,689
in in a safari we will see that we

546
00:27:01,950 --> 00:27:06,690
designed this part of CSP so that it

547
00:27:03,690 --> 00:27:08,610
falls back gracefully so it fails open

548
00:27:06,690 --> 00:27:10,170
right so if it will just not provide the

549
00:27:08,610 --> 00:27:11,699
security guarantees if the browser does

550
00:27:10,170 --> 00:27:15,180
not support but it will not break your

551
00:27:11,700 --> 00:27:18,150
site okay but basically this is also

552
00:27:15,180 --> 00:27:20,790
supported by Safari so this is we will

553
00:27:18,150 --> 00:27:24,740
cover the vast vast vast majority 90%

554
00:27:20,790 --> 00:27:27,060
for sure of your of your browser traffic

555
00:27:24,740 --> 00:27:31,230
unfortunately a more extensive

556
00:27:27,060 --> 00:27:33,510
refactoring is required okay you need as

557
00:27:31,230 --> 00:27:35,100
I said also to all the JavaScript

558
00:27:33,510 --> 00:27:37,140
libraries and we just have to past

559
00:27:35,100 --> 00:27:40,429
announces but you cover almost

560
00:27:37,140 --> 00:27:43,830
everything you cover injection into the

561
00:27:40,430 --> 00:27:46,140
text of script well unless you are you

562
00:27:43,830 --> 00:27:48,300
are blindly announcing all the scripts

563
00:27:46,140 --> 00:27:50,490
right so if you are non Singh all the

564
00:27:48,300 --> 00:27:52,680
scripts without checking and there is an

565
00:27:50,490 --> 00:27:55,230
injection there that it's not covered

566
00:27:52,680 --> 00:27:57,300
but basically a script cannot just load

567
00:27:55,230 --> 00:28:01,470
another script that you didn't foresee

568
00:27:57,300 --> 00:28:03,720
because it will need the nonce and you

569
00:28:01,470 --> 00:28:06,510
didn't pass it and the same for SRC so

570
00:28:03,720 --> 00:28:09,060
this is pretty good unfortunately you

571
00:28:06,510 --> 00:28:10,920
need to when you dynamically create a

572
00:28:09,060 --> 00:28:14,010
script in your JavaScript you also need

573
00:28:10,920 --> 00:28:15,660
to do this line I it's not it's not hard

574
00:28:14,010 --> 00:28:16,110
but it's just one light set attribute

575
00:28:15,660 --> 00:28:20,100
nonce

576
00:28:16,110 --> 00:28:22,889
and okay random usually is actually

577
00:28:20,100 --> 00:28:26,639
fetched from the parent script tag okay

578
00:28:22,890 --> 00:28:29,370
so usually you can do document current

579
00:28:26,640 --> 00:28:31,260
script dot get a tribute knows okay it

580
00:28:29,370 --> 00:28:33,689
basically gets propagates it from the

581
00:28:31,260 --> 00:28:37,340
script tag here I just put the string

582
00:28:33,690 --> 00:28:40,200
for ease of for the tactical purposes

583
00:28:37,340 --> 00:28:45,230
also here please remember to put object

584
00:28:40,200 --> 00:28:47,430
source non base URI non or self and

585
00:28:45,230 --> 00:28:50,060
please check with the CSP evaluator

586
00:28:47,430 --> 00:28:55,890
there will be links again if you want to

587
00:28:50,060 --> 00:28:58,169
to check your policy so briefly here we

588
00:28:55,890 --> 00:28:58,740
haven't presented level 1 and level 5

589
00:28:58,170 --> 00:28:59,850
and

590
00:28:58,740 --> 00:29:01,920
we haven't talked about trusted types

591
00:28:59,850 --> 00:29:03,480
yet so maybe let's focus on level two to

592
00:29:01,920 --> 00:29:06,990
level three level four

593
00:29:03,480 --> 00:29:10,530
this is a pretty extensive like table

594
00:29:06,990 --> 00:29:13,950
that wraps up so as you can see there is

595
00:29:10,530 --> 00:29:17,220
even easier CSV you can adopt which is

596
00:29:13,950 --> 00:29:21,210
level one but it is it covers let less

597
00:29:17,220 --> 00:29:23,760
thing and there is kungfu version of CSP

598
00:29:21,210 --> 00:29:25,800
which is actually not one policy but two

599
00:29:23,760 --> 00:29:27,929
policies which is what we call level

600
00:29:25,800 --> 00:29:32,220
five and we'll explain later that covers

601
00:29:27,929 --> 00:29:36,240
almost everything here I wanted to give

602
00:29:32,220 --> 00:29:39,380
a shout out to an effort some people are

603
00:29:36,240 --> 00:29:43,100
doing some are Google some are outside

604
00:29:39,380 --> 00:29:47,190
it's called trusted types the idea is to

605
00:29:43,100 --> 00:29:50,699
actually solve Dom XSS at a code level

606
00:29:47,190 --> 00:29:53,160
basically making the browser's use some

607
00:29:50,700 --> 00:29:55,500
kind of safe types that are actually

608
00:29:53,160 --> 00:29:58,380
mandated when they are passed to

609
00:29:55,500 --> 00:30:01,650
potentially unsafe Dom API is function

610
00:29:58,380 --> 00:30:04,110
or assignments like to inner HTML this

611
00:30:01,650 --> 00:30:05,730
is a very promising effort this is an

612
00:30:04,110 --> 00:30:07,909
hardening effort if you will it's a

613
00:30:05,730 --> 00:30:11,460
little bit orthogonal to CSP if you will

614
00:30:07,910 --> 00:30:13,260
in fact for example the protection in

615
00:30:11,460 --> 00:30:15,870
the first ones it's limited to Tomic's

616
00:30:13,260 --> 00:30:18,690
SS because that's what it's done but if

617
00:30:15,870 --> 00:30:23,699
you want to search Google Bing for it

618
00:30:18,690 --> 00:30:24,990
it's trusted types it's pretty cool we

619
00:30:23,700 --> 00:30:27,360
suggest to use it in combination with

620
00:30:24,990 --> 00:30:31,370
CSP CSP is like this second layer of

621
00:30:27,360 --> 00:30:31,370
defense it's a it's a safety net

622
00:30:32,510 --> 00:30:38,970
okay so here's some more data about CSP

623
00:30:35,880 --> 00:30:42,230
coverage at Google we are covering as we

624
00:30:38,970 --> 00:30:47,760
said approximately 75% of our traffic

625
00:30:42,230 --> 00:30:51,360
with the level two policy and this was

626
00:30:47,760 --> 00:30:53,010
the policy that blocked around sixty

627
00:30:51,360 --> 00:30:55,889
percent of the exercises actually

628
00:30:53,010 --> 00:30:57,629
mitigated exploitation of around 60

629
00:30:55,890 --> 00:30:59,160
percent of exercises so this is good

630
00:30:57,630 --> 00:31:02,610
enough right level two is good enough

631
00:30:59,160 --> 00:31:05,720
and we are slowly refactoring code to

632
00:31:02,610 --> 00:31:09,300
allow level three and level four

633
00:31:05,720 --> 00:31:11,630
policies and here is a zoom we have

634
00:31:09,300 --> 00:31:11,629
around

635
00:31:11,789 --> 00:31:19,019
a little more than 10% maybe now it's

636
00:31:14,630 --> 00:31:21,210
15% no specific dynamic without evil and

637
00:31:19,019 --> 00:31:24,889
no soundly

638
00:31:21,210 --> 00:31:27,840
here are some domains to show you we are

639
00:31:24,889 --> 00:31:29,309
at 100% coverage of CSP on very

640
00:31:27,840 --> 00:31:31,678
important domains accounts of Duggal

641
00:31:29,309 --> 00:31:34,590
comm that basically keeps your Google

642
00:31:31,679 --> 00:31:37,710
account secure chrome that can install

643
00:31:34,590 --> 00:31:40,320
extensions in your browser and other

644
00:31:37,710 --> 00:31:41,940
other sensitive domains okay so this is

645
00:31:40,320 --> 00:31:47,240
a very high traffic they're very complex

646
00:31:41,940 --> 00:31:49,679
services yes it took some time but it is

647
00:31:47,240 --> 00:31:52,080
pretty mature technology and you can

648
00:31:49,679 --> 00:31:55,409
also adopt it in your new web

649
00:31:52,080 --> 00:31:59,220
applications and I show some more data

650
00:31:55,409 --> 00:32:03,120
basically with a bar chart and you can

651
00:31:59,220 --> 00:32:10,799
see that on very sensitive domain we we

652
00:32:03,120 --> 00:32:15,090
have almost 100% coverage and here I'd

653
00:32:10,799 --> 00:32:17,840
like to go into the guru section quickly

654
00:32:15,090 --> 00:32:21,330
so that we can we leave some time

655
00:32:17,840 --> 00:32:22,470
hopefully some good time for questions I

656
00:32:21,330 --> 00:32:24,418
really looking forward to having

657
00:32:22,470 --> 00:32:28,320
questions from you I know this is a very

658
00:32:24,419 --> 00:32:30,240
technical and there's a lot of data but

659
00:32:28,320 --> 00:32:32,100
by all means pretty please reach out to

660
00:32:30,240 --> 00:32:34,820
me also my colleague there are our

661
00:32:32,100 --> 00:32:39,000
contact details later we really love to

662
00:32:34,820 --> 00:32:43,309
to receive questions and then answer the

663
00:32:39,000 --> 00:32:47,700
best we can so please don't hesitate

664
00:32:43,309 --> 00:32:49,889
okay so the specification of CSP is an

665
00:32:47,700 --> 00:32:52,289
evolving draft and there are more and

666
00:32:49,889 --> 00:32:57,649
more keywords and directives that are

667
00:32:52,289 --> 00:33:00,450
being added and mostly they are for

668
00:32:57,649 --> 00:33:02,639
easing the adoption of CSP so they are

669
00:33:00,450 --> 00:33:05,220
usually relaxing properties properties

670
00:33:02,639 --> 00:33:08,279
that actually relax a little bit the

671
00:33:05,220 --> 00:33:10,139
security guarantees but also allow a

672
00:33:08,279 --> 00:33:12,330
much easier deployment so one of those

673
00:33:10,139 --> 00:33:15,149
was strict dynamic but there are also

674
00:33:12,330 --> 00:33:19,199
new ones and two of these are script up

675
00:33:15,149 --> 00:33:22,949
so CLM and script SRC up that stays for

676
00:33:19,200 --> 00:33:25,140
attribute so basically the Elam applies

677
00:33:22,950 --> 00:33:28,620
to the

678
00:33:25,140 --> 00:33:30,660
line script blocks and all script

679
00:33:28,620 --> 00:33:33,810
requests but doesn't control attributes

680
00:33:30,660 --> 00:33:36,300
while the app controls attributes so

681
00:33:33,810 --> 00:33:38,580
what I'd like to show is that you can

682
00:33:36,300 --> 00:33:40,620
use this to limit the need for a

683
00:33:38,580 --> 00:33:43,879
factoring of inline event handlers and

684
00:33:40,620 --> 00:33:47,459
here finally we are to the level one the

685
00:33:43,880 --> 00:33:49,020
most let's say least secure but easiest

686
00:33:47,460 --> 00:33:53,780
to implement so this was not possible

687
00:33:49,020 --> 00:33:56,490
before like a couple months ago so

688
00:33:53,780 --> 00:33:59,610
basically it looks a little bit longer

689
00:33:56,490 --> 00:34:00,300
and more difficult but actually it's not

690
00:33:59,610 --> 00:34:02,159
so hard

691
00:34:00,300 --> 00:34:05,730
basically what you can do is whitelist

692
00:34:02,160 --> 00:34:08,250
via hashes inline event handlers so

693
00:34:05,730 --> 00:34:10,380
there are some websites for which it is

694
00:34:08,250 --> 00:34:12,960
hard to refactor inline event handlers

695
00:34:10,380 --> 00:34:16,040
maybe they have I don't know on submit

696
00:34:12,960 --> 00:34:19,740
return false or very very lame and

697
00:34:16,040 --> 00:34:22,110
things like javascript:void 0

698
00:34:19,739 --> 00:34:24,870
we found these anti patterns they're bad

699
00:34:22,110 --> 00:34:26,550
coding patterns but it's a very very

700
00:34:24,870 --> 00:34:28,949
common and actually do not pose a

701
00:34:26,550 --> 00:34:33,240
security risk so the idea is we can

702
00:34:28,949 --> 00:34:36,750
actually allow by by hashing them some

703
00:34:33,239 --> 00:34:38,908
of them so by doing this like basically

704
00:34:36,750 --> 00:34:41,100
having a strict dynamic class and safe

705
00:34:38,909 --> 00:34:44,070
evil like a level 2 policy for the

706
00:34:41,100 --> 00:34:48,210
blocks like LM but also allowing some

707
00:34:44,070 --> 00:34:51,300
inline event handlers the refactoring

708
00:34:48,210 --> 00:34:53,429
required is limited to just adding the

709
00:34:51,300 --> 00:34:55,020
nonce attribute to script tags you do

710
00:34:53,429 --> 00:34:56,668
not have to reflect to your JavaScript

711
00:34:55,020 --> 00:34:58,259
your eyes JavaScript your eyes by the

712
00:34:56,668 --> 00:35:00,629
way are the same as inline event

713
00:34:58,260 --> 00:35:03,960
handlers for CSP they are governed by so

714
00:35:00,630 --> 00:35:06,000
called as unsafe inline and you don't

715
00:35:03,960 --> 00:35:08,820
say you don't see a safe in line because

716
00:35:06,000 --> 00:35:11,070
there is unsafe hashes plus hashes so it

717
00:35:08,820 --> 00:35:13,110
is an unsafe inline that is limited to

718
00:35:11,070 --> 00:35:15,330
the ones that you hash so for example

719
00:35:13,110 --> 00:35:16,950
here you have javascript:void 0 you hash

720
00:35:15,330 --> 00:35:20,160
it and you put it there together we

721
00:35:16,950 --> 00:35:22,200
don't save hashes and also these onclick

722
00:35:20,160 --> 00:35:25,080
alert clicked you put it there

723
00:35:22,200 --> 00:35:29,759
so here the idea you just nonce the

724
00:35:25,080 --> 00:35:31,710
scripts this is actually pretty good the

725
00:35:29,760 --> 00:35:36,120
only thing that makes it a little bit

726
00:35:31,710 --> 00:35:39,030
less secure is that if you have actually

727
00:35:36,120 --> 00:35:42,470
a lot of inline event handlers

728
00:35:39,030 --> 00:35:46,160
that you could an attacker could execute

729
00:35:42,470 --> 00:35:48,660
in sequence to do something meaningful

730
00:35:46,160 --> 00:35:50,640
like for example you have one that you

731
00:35:48,660 --> 00:35:51,720
know with rose money and the other what

732
00:35:50,640 --> 00:35:55,020
you should not write have it as an

733
00:35:51,720 --> 00:35:56,790
inline event handlers but the idea is

734
00:35:55,020 --> 00:36:00,120
since you are white listing them by

735
00:35:56,790 --> 00:36:02,700
putting their hashes an attacker can

736
00:36:00,120 --> 00:36:05,220
inject a script tag that does exactly

737
00:36:02,700 --> 00:36:08,040
and only that code so you think then

738
00:36:05,220 --> 00:36:10,439
attacker can create some kind of gadget

739
00:36:08,040 --> 00:36:12,509
chain like like a rope style

740
00:36:10,440 --> 00:36:15,390
gadget by you know putting different

741
00:36:12,510 --> 00:36:18,840
allowed pieces of JavaScript in a chain

742
00:36:15,390 --> 00:36:21,240
so this is pretty advanced but this is

743
00:36:18,840 --> 00:36:24,890
something to keep in mind it this is

744
00:36:21,240 --> 00:36:27,839
what is being relaxed by this and

745
00:36:24,890 --> 00:36:30,660
finally let's take the one of the best

746
00:36:27,840 --> 00:36:34,110
like the level 4 nonce only scripts

747
00:36:30,660 --> 00:36:38,029
sorry policy script SRC knows with the

748
00:36:34,110 --> 00:36:41,010
object and base what if you also put

749
00:36:38,030 --> 00:36:44,490
whitelist based policy which says script

750
00:36:41,010 --> 00:36:47,910
SSE self so you put it on two different

751
00:36:44,490 --> 00:36:51,029
HTTP headers or on the same header with

752
00:36:47,910 --> 00:36:53,879
a comma I know it's confusing that there

753
00:36:51,030 --> 00:36:56,700
is a semicolon for CSP syntax and a

754
00:36:53,880 --> 00:36:59,910
comma but a comma in the value of an

755
00:36:56,700 --> 00:37:02,819
HTTP header is HTTP syntax it means it

756
00:36:59,910 --> 00:37:05,129
is the same header another time okay so

757
00:37:02,820 --> 00:37:07,260
let's for simplicity let's just think it

758
00:37:05,130 --> 00:37:09,780
has two separate headers content

759
00:37:07,260 --> 00:37:11,730
security policy script asesinos and the

760
00:37:09,780 --> 00:37:14,220
content security policy script asserts

761
00:37:11,730 --> 00:37:18,450
itself so if you have two CSP policies

762
00:37:14,220 --> 00:37:21,390
served in parallel every CSP is enforced

763
00:37:18,450 --> 00:37:24,450
independently so a script is granted

764
00:37:21,390 --> 00:37:28,440
execution if and only if it passes both

765
00:37:24,450 --> 00:37:33,109
CSP okay so the idea is this allow very

766
00:37:28,440 --> 00:37:36,240
very advanced setups for example you can

767
00:37:33,110 --> 00:37:40,890
you know have these the nonce base

768
00:37:36,240 --> 00:37:44,520
security and also limit the origins so

769
00:37:40,890 --> 00:37:47,040
for example they see an example here you

770
00:37:44,520 --> 00:37:50,220
have a same site inclusion with the

771
00:37:47,040 --> 00:37:52,740
correctness fine it satisfies both you

772
00:37:50,220 --> 00:37:54,480
have an unknown stone

773
00:37:52,740 --> 00:37:56,970
but on the same side it is not allowed

774
00:37:54,480 --> 00:38:00,090
because the nonce based policy will

775
00:37:56,970 --> 00:38:03,299
block it you have a correctly knows but

776
00:38:00,090 --> 00:38:06,390
cross side you didn't expect it your

777
00:38:03,300 --> 00:38:08,790
developer for example adds external

778
00:38:06,390 --> 00:38:13,560
script well it is blocked so it will not

779
00:38:08,790 --> 00:38:17,610
work so independently evaluating to CSP

780
00:38:13,560 --> 00:38:20,279
policy is very very powerful and you

781
00:38:17,610 --> 00:38:22,950
might want to to keep this into account

782
00:38:20,280 --> 00:38:25,710
you can do some very very cool stuff

783
00:38:22,950 --> 00:38:31,230
here and this is the level 5 the double

784
00:38:25,710 --> 00:38:33,060
policy whitelist plus knows only so you

785
00:38:31,230 --> 00:38:36,869
might wonder but weren't quite least

786
00:38:33,060 --> 00:38:39,480
always by possible yes but you were not

787
00:38:36,869 --> 00:38:41,880
using white list against XSS we are

788
00:38:39,480 --> 00:38:44,340
using white list together with the nonce

789
00:38:41,880 --> 00:38:46,400
only nonce based policy so the nonce

790
00:38:44,340 --> 00:38:49,980
based policies is the one that provides

791
00:38:46,400 --> 00:38:52,140
security against XSS protection while

792
00:38:49,980 --> 00:38:55,890
the white list is only an extra

793
00:38:52,140 --> 00:38:57,660
condition to basically breaking breaking

794
00:38:55,890 --> 00:38:59,730
when something is not as you would

795
00:38:57,660 --> 00:39:02,580
expect so for example do you have all

796
00:38:59,730 --> 00:39:05,369
your JavaScript on your assets dot sight

797
00:39:02,580 --> 00:39:07,650
calm great put nonce only and then put

798
00:39:05,369 --> 00:39:10,200
also script SSE assets dot your site

799
00:39:07,650 --> 00:39:12,930
calm if you put only assets that

800
00:39:10,200 --> 00:39:14,460
something calm if you host angular or

801
00:39:12,930 --> 00:39:18,210
something you will be by possible so

802
00:39:14,460 --> 00:39:23,040
your CSP gives zero security if you put

803
00:39:18,210 --> 00:39:24,930
both you do not have the usual whitelist

804
00:39:23,040 --> 00:39:27,090
bypasses because the non-space policy

805
00:39:24,930 --> 00:39:30,089
will take care of that so in brief

806
00:39:27,090 --> 00:39:32,340
everything is covered with the l5 policy

807
00:39:30,090 --> 00:39:35,010
which are two policies I know this is

808
00:39:32,340 --> 00:39:37,170
very advanced but you can consider it

809
00:39:35,010 --> 00:39:39,180
especially if you don't have a very very

810
00:39:37,170 --> 00:39:49,160
large property this might actually work

811
00:39:39,180 --> 00:39:52,259
for you ok so quickly if you follow the

812
00:39:49,160 --> 00:39:55,560
you know the the the nitty-gritty and

813
00:39:52,260 --> 00:39:59,340
like the fancy new attack vectors in the

814
00:39:55,560 --> 00:40:01,680
web security word you might see some

815
00:39:59,340 --> 00:40:04,440
cool demos of how powerful CSS has

816
00:40:01,680 --> 00:40:05,970
become and that css3 you can do you know

817
00:40:04,440 --> 00:40:08,670
you can do

818
00:40:05,970 --> 00:40:10,859
cross window things you can do you can

819
00:40:08,670 --> 00:40:14,780
you know play the game of life and do

820
00:40:10,859 --> 00:40:14,779
very very very cool stuff so the idea is

821
00:40:16,460 --> 00:40:21,720
you can have some of the effects of an

822
00:40:20,130 --> 00:40:23,910
exercise fuller ability even without

823
00:40:21,720 --> 00:40:26,368
JavaScript okay

824
00:40:23,910 --> 00:40:28,649
just by using CSS so for example you can

825
00:40:26,369 --> 00:40:32,430
create some kind of CSS key logger with

826
00:40:28,650 --> 00:40:35,690
only using css3 properties and there is

827
00:40:32,430 --> 00:40:42,569
also very nice write-up about using

828
00:40:35,690 --> 00:40:45,030
actually at import and time side

829
00:40:42,569 --> 00:40:47,069
channels to actually exfiltrate content

830
00:40:45,030 --> 00:40:50,069
one byte at a time this is pretty cool

831
00:40:47,069 --> 00:40:53,788
this is these are the so-called post XSS

832
00:40:50,069 --> 00:40:56,579
vulnerabilities so once XSS is solved an

833
00:40:53,789 --> 00:41:00,799
attacker might want to use CSS to - to -

834
00:40:56,579 --> 00:41:03,900
OH - pone you can CSP help with this

835
00:41:00,799 --> 00:41:06,480
actually yes there is a directive called

836
00:41:03,900 --> 00:41:11,369
style SRC where you can knows exactly

837
00:41:06,480 --> 00:41:15,930
the same as with the script can be

838
00:41:11,369 --> 00:41:17,670
combined with script SRC and another it

839
00:41:15,930 --> 00:41:22,230
requires of course refactoring of style

840
00:41:17,670 --> 00:41:24,390
blocks but we are not pursuing this now

841
00:41:22,230 --> 00:41:27,329
because we feel that these attacks are

842
00:41:24,390 --> 00:41:30,720
almost always theoretical and sometimes

843
00:41:27,329 --> 00:41:32,549
are very slow but they exist so maybe in

844
00:41:30,720 --> 00:41:36,470
the future this will become the next

845
00:41:32,549 --> 00:41:40,589
thing and you might want to read this up

846
00:41:36,470 --> 00:41:45,270
you will see from the PDF of these

847
00:41:40,589 --> 00:41:47,609
slides so the very last thing so CSP has

848
00:41:45,270 --> 00:41:50,460
a reporting mechanism and so when you

849
00:41:47,609 --> 00:41:53,160
deploy CSP like to your staging

850
00:41:50,460 --> 00:41:55,020
environment or so you want to see what

851
00:41:53,160 --> 00:41:56,549
gets blocked by CSP if you are

852
00:41:55,020 --> 00:41:59,670
accidentally breaking parts of your

853
00:41:56,549 --> 00:42:01,640
sides and particular flows and so on so

854
00:41:59,670 --> 00:42:05,089
the idea is if you put a report URI

855
00:42:01,640 --> 00:42:08,098
directive you the browser will send

856
00:42:05,089 --> 00:42:11,450
so-called CSP violation report to your

857
00:42:08,099 --> 00:42:15,480
endpoint they will be basically JSON

858
00:42:11,450 --> 00:42:18,480
blobs and they will say you can see one

859
00:42:15,480 --> 00:42:19,340
here you what has been blocked what was

860
00:42:18,480 --> 00:42:22,580
a directive

861
00:42:19,340 --> 00:42:25,670
blocked it and so on what we suggest to

862
00:42:22,580 --> 00:42:27,700
do is also add report sample in the

863
00:42:25,670 --> 00:42:30,140
policy the only thing it does is it

864
00:42:27,700 --> 00:42:32,859
instructs the browser to also include

865
00:42:30,140 --> 00:42:36,799
the first bytes of the blocked script

866
00:42:32,860 --> 00:42:40,730
this is very rare I think it is 40 bytes

867
00:42:36,800 --> 00:42:42,590
so it's very little it's very useful

868
00:42:40,730 --> 00:42:44,750
because most of the CSP violation

869
00:42:42,590 --> 00:42:47,380
reports are noise they are due to

870
00:42:44,750 --> 00:42:50,800
extensions browser extensions or

871
00:42:47,380 --> 00:42:52,760
antivirus software which is

872
00:42:50,800 --> 00:42:55,730
indistinguishable from malware by the

873
00:42:52,760 --> 00:42:58,130
way it's very hard to say what was

874
00:42:55,730 --> 00:43:01,850
security software when is the security

875
00:42:58,130 --> 00:43:03,290
software or when it is malware so this

876
00:43:01,850 --> 00:43:04,640
will you will see basically if it is

877
00:43:03,290 --> 00:43:06,590
your code that's being blocked or

878
00:43:04,640 --> 00:43:08,690
something is injected by something else

879
00:43:06,590 --> 00:43:10,820
so for example if you see I don't know

880
00:43:08,690 --> 00:43:12,800
LastPass something you see that it's an

881
00:43:10,820 --> 00:43:16,280
extension unfortunately that is not

882
00:43:12,800 --> 00:43:19,310
playing nice with your CSP and usually

883
00:43:16,280 --> 00:43:21,700
these are bugs on the extension side and

884
00:43:19,310 --> 00:43:24,200
it was worse sometime ago most of the

885
00:43:21,700 --> 00:43:28,149
popular extensions are now compatible

886
00:43:24,200 --> 00:43:31,310
with CSP but this is very useful I

887
00:43:28,150 --> 00:43:33,920
actually went through millions and

888
00:43:31,310 --> 00:43:36,140
millions of of 60 violation reports and

889
00:43:33,920 --> 00:43:38,420
it can be very frustrating and this was

890
00:43:36,140 --> 00:43:40,460
a major breakthrough to actually make

891
00:43:38,420 --> 00:43:42,770
them useful not only that with CSP

892
00:43:40,460 --> 00:43:45,470
reports you can also see if you are able

893
00:43:42,770 --> 00:43:48,140
to reduce the noise you can also see

894
00:43:45,470 --> 00:43:50,450
your exploitation attempts so if you the

895
00:43:48,140 --> 00:43:52,730
noise ratio the signal-to-noise ratio is

896
00:43:50,450 --> 00:43:55,640
high enough you can actually see if you

897
00:43:52,730 --> 00:43:59,360
are there are actually vulnerabilities

898
00:43:55,640 --> 00:44:01,730
that are being exploited and well at

899
00:43:59,360 --> 00:44:04,310
attempts to exploit them and since we

900
00:44:01,730 --> 00:44:07,100
are blocking them we actually have at

901
00:44:04,310 --> 00:44:09,950
Google some monitoring and it happened

902
00:44:07,100 --> 00:44:13,790
that we saw some actually vulnerable

903
00:44:09,950 --> 00:44:16,520
endpoints that were being some someone

904
00:44:13,790 --> 00:44:18,590
was trying to exploit those exercise

905
00:44:16,520 --> 00:44:20,960
they were being blocked and we actually

906
00:44:18,590 --> 00:44:23,420
did not report to us but we found it

907
00:44:20,960 --> 00:44:25,400
through CSP violation reports so for the

908
00:44:23,420 --> 00:44:27,830
first time it is especially with a poor

909
00:44:25,400 --> 00:44:30,650
sample it's possible to use CSP also as

910
00:44:27,830 --> 00:44:32,930
a detection mechanism which is which is

911
00:44:30,650 --> 00:44:36,780
very cool in my opinion

912
00:44:32,930 --> 00:44:40,169
okay so here I want to bore you so much

913
00:44:36,780 --> 00:44:42,750
because it's really complicated here but

914
00:44:40,170 --> 00:44:45,450
basically CSP there are a few versions

915
00:44:42,750 --> 00:44:49,170
of CSP and they are all backward

916
00:44:45,450 --> 00:44:52,200
compatible okay except some very very

917
00:44:49,170 --> 00:44:55,710
very very small things that are not 100%

918
00:44:52,200 --> 00:44:57,808
backward compatible the idea is if you

919
00:44:55,710 --> 00:45:01,440
have unsafe inline and unsafe aligned is

920
00:44:57,809 --> 00:45:03,630
not supported by your browser sorry if

921
00:45:01,440 --> 00:45:05,819
you have nonces or hashes and notices

922
00:45:03,630 --> 00:45:08,730
are not supported by your browsers then

923
00:45:05,819 --> 00:45:11,089
if you also put unsafe inline and say

924
00:45:08,730 --> 00:45:17,430
Phelan is ignored in presence of nonces

925
00:45:11,089 --> 00:45:20,029
and it's here it's shown so actually

926
00:45:17,430 --> 00:45:23,190
let's go let's go with the level 2 level

927
00:45:20,030 --> 00:45:26,400
level 3 it was nonsense trick dynamic

928
00:45:23,190 --> 00:45:29,309
okay what do you want to do to give one

929
00:45:26,400 --> 00:45:31,559
policy to all browsers is also add HTTPS

930
00:45:29,309 --> 00:45:34,109
which allows all scripts source from

931
00:45:31,559 --> 00:45:36,990
HTTP which makes all the secure ones and

932
00:45:34,109 --> 00:45:38,339
unsafe inline so this might seem a

933
00:45:36,990 --> 00:45:40,979
little bit weird why are you putting a

934
00:45:38,339 --> 00:45:43,650
safe in line so the thing is for modern

935
00:45:40,980 --> 00:45:46,890
browsers and safe in line in HTTP get

936
00:45:43,650 --> 00:45:49,140
ignored because strict dynamic drops the

937
00:45:46,890 --> 00:45:52,170
whitelist which is HTTP and the nose

938
00:45:49,140 --> 00:45:54,180
drops and safe in line ok but older

939
00:45:52,170 --> 00:45:57,510
browsers will not understand strict

940
00:45:54,180 --> 00:45:59,910
dynamic but understand nonces so they

941
00:45:57,510 --> 00:46:02,849
will allow every sourced script so HTTP

942
00:45:59,910 --> 00:46:04,920
will stay and very very old browsers

943
00:46:02,849 --> 00:46:07,020
will not understand anything modern and

944
00:46:04,920 --> 00:46:09,150
they will just fail open allowing

945
00:46:07,020 --> 00:46:10,880
everything so it does not provide any

946
00:46:09,150 --> 00:46:13,980
security but it will not break your site

947
00:46:10,880 --> 00:46:16,859
okay this is the thing so this is why we

948
00:46:13,980 --> 00:46:18,780
send non-strict dynamic and then HTTP

949
00:46:16,859 --> 00:46:23,578
unsafe inline okay it's not a useless

950
00:46:18,780 --> 00:46:25,700
policy and once again please use the CSP

951
00:46:23,579 --> 00:46:28,020
evaluator to check your policies because

952
00:46:25,700 --> 00:46:30,720
you might have noticed like it's pretty

953
00:46:28,020 --> 00:46:34,020
complex there are many things that can

954
00:46:30,720 --> 00:46:38,368
go wrong please use it it's pretty easy

955
00:46:34,020 --> 00:46:39,809
and quick to use and to wrap up so

956
00:46:38,369 --> 00:46:41,099
hopefully there'll be some time for

957
00:46:39,809 --> 00:46:43,260
questions

958
00:46:41,099 --> 00:46:45,270
nos pcs piece actually covered the

959
00:46:43,260 --> 00:46:46,560
classical reflect installed exercise

960
00:46:45,270 --> 00:46:49,230
very well

961
00:46:46,560 --> 00:46:51,390
so even if you use a level to exercise

962
00:46:49,230 --> 00:46:53,550
policy like the one with strict dynamic

963
00:46:51,390 --> 00:46:55,230
and unsafe Evo you will cover the

964
00:46:53,550 --> 00:46:57,330
majority of the things we have

965
00:46:55,230 --> 00:46:58,109
experienced at Google for exercise

966
00:46:57,330 --> 00:47:02,549
exploitation

967
00:46:58,109 --> 00:47:05,369
so please do it if you can upgrade the

968
00:47:02,550 --> 00:47:07,740
to nonce only just drop the Strega

969
00:47:05,369 --> 00:47:08,670
dynamic and manually do set attribute no

970
00:47:07,740 --> 00:47:11,848
this is even better

971
00:47:08,670 --> 00:47:13,680
and finally the usual warning CSP is not

972
00:47:11,849 --> 00:47:14,690
a silver bullet CSP is just

973
00:47:13,680 --> 00:47:18,118
defense-in-depth

974
00:47:14,690 --> 00:47:20,640
you have to fix your bugs okay if you

975
00:47:18,119 --> 00:47:23,040
have an XSS vulnerability please fix the

976
00:47:20,640 --> 00:47:25,460
root cause of the XSS vulnerability do

977
00:47:23,040 --> 00:47:28,529
not rely on the fence in depth to save

978
00:47:25,460 --> 00:47:30,240
your butt okay would it will it might

979
00:47:28,530 --> 00:47:32,849
work in some cases but it is not a

980
00:47:30,240 --> 00:47:35,819
solution it's not an excuse not to fix

981
00:47:32,849 --> 00:47:39,869
your bugs please use the CSP evaluator

982
00:47:35,820 --> 00:47:43,980
and this is even more in brief please

983
00:47:39,869 --> 00:47:45,960
use that and if you can use that okay

984
00:47:43,980 --> 00:47:49,050
and this is the best you can probably do

985
00:47:45,960 --> 00:47:53,190
right now against XSS and there is some

986
00:47:49,050 --> 00:47:55,890
documentation we've put for on a CSP dot

987
00:47:53,190 --> 00:47:57,780
with Google comm it's not a phishing

988
00:47:55,890 --> 00:48:00,060
site even if it looks a little bit with

989
00:47:57,780 --> 00:48:04,500
Google it's owned by us you can who is

990
00:48:00,060 --> 00:48:06,779
it okay and thank you very much

991
00:48:04,500 --> 00:48:09,270
here are the slides on speaker duck and

992
00:48:06,780 --> 00:48:12,660
please feel free to ask us

993
00:48:09,270 --> 00:48:15,480
he's also Lucas LW is Lucas

994
00:48:12,660 --> 00:48:15,930
Nick is back it's me ask any question

995
00:48:15,480 --> 00:48:18,839
you might have

996
00:48:15,930 --> 00:48:20,529
thank you very much yes thank you very

997
00:48:18,839 --> 00:48:25,150
much bigger

998
00:48:20,530 --> 00:48:28,720
are there any questions there's

999
00:48:25,150 --> 00:48:32,200
microphone coming um how often do I have

1000
00:48:28,720 --> 00:48:34,149
to change the Nantes value I can see you

1001
00:48:32,200 --> 00:48:37,359
sorry well okay thanks

1002
00:48:34,150 --> 00:48:39,580
I'm a small one yes sorry is very

1003
00:48:37,359 --> 00:48:42,759
blinding like how often do I have to

1004
00:48:39,580 --> 00:48:46,450
change the Nantes value to for it to

1005
00:48:42,760 --> 00:48:49,359
make sense with every group with every

1006
00:48:46,450 --> 00:48:52,118
request okay not it have to be unique

1007
00:48:49,359 --> 00:48:54,670
the response the response so that means

1008
00:48:52,119 --> 00:48:58,060
what to do about caching javascript

1009
00:48:54,670 --> 00:49:00,340
files my source you can cache javascript

1010
00:48:58,060 --> 00:49:03,460
files the markup should not be cached

1011
00:49:00,340 --> 00:49:05,230
and usually is not okay so basically you

1012
00:49:03,460 --> 00:49:08,710
can have your JavaScript cached on your

1013
00:49:05,230 --> 00:49:10,780
assets dot but in the HTML markup you

1014
00:49:08,710 --> 00:49:12,369
have to put a different knows attributes

1015
00:49:10,780 --> 00:49:18,099
in the script tag and the browser will

1016
00:49:12,369 --> 00:49:20,859
not I have a neo single page app it's

1017
00:49:18,099 --> 00:49:24,310
it's five or six pages if I jump to the

1018
00:49:20,859 --> 00:49:27,040
next page it will reload my travel

1019
00:49:24,310 --> 00:49:30,070
scripts again now with a visitor front

1020
00:49:27,040 --> 00:49:32,589
nonce but the browser is intelligent

1021
00:49:30,070 --> 00:49:34,660
enough not to load it again because it

1022
00:49:32,589 --> 00:49:36,580
is already in the cache also it is

1023
00:49:34,660 --> 00:49:38,140
another nonce no no it will use the

1024
00:49:36,580 --> 00:49:40,450
cache like if you lose the cache for the

1025
00:49:38,140 --> 00:49:43,000
JavaScript file but this protection is

1026
00:49:40,450 --> 00:49:45,310
only on the HTML page so basically it

1027
00:49:43,000 --> 00:49:48,130
will be an HTTP header on the HTML page

1028
00:49:45,310 --> 00:49:49,930
and the corresponding nonce attribute in

1029
00:49:48,130 --> 00:49:52,420
the markup okay so it doesn't matter

1030
00:49:49,930 --> 00:49:55,118
where the JavaScript is source from the

1031
00:49:52,420 --> 00:49:57,609
browser will use the cache as much as it

1032
00:49:55,119 --> 00:50:00,730
can so the only problem is if you have a

1033
00:49:57,609 --> 00:50:02,230
completely static HTML page or if you

1034
00:50:00,730 --> 00:50:04,300
want to cache the mark-up itself which

1035
00:50:02,230 --> 00:50:08,500
usually doesn't happen actually it's

1036
00:50:04,300 --> 00:50:10,000
very rare to catch the HTML if you want

1037
00:50:08,500 --> 00:50:13,359
to cache your HTML for performance

1038
00:50:10,000 --> 00:50:15,220
reason or for like yeah usually

1039
00:50:13,359 --> 00:50:16,930
performance reason then you have to use

1040
00:50:15,220 --> 00:50:18,520
the hashes instead of announces because

1041
00:50:16,930 --> 00:50:20,379
the hashes do not change over time

1042
00:50:18,520 --> 00:50:23,520
so what you might want to use in that

1043
00:50:20,380 --> 00:50:27,880
case is the 3.5 the ones with the

1044
00:50:23,520 --> 00:50:31,150
bootstrapping bootstrapping this one so

1045
00:50:27,880 --> 00:50:33,319
sure as economic you can sort that and

1046
00:50:31,150 --> 00:50:35,930
the nonce based one is

1047
00:50:33,319 --> 00:50:37,279
because if the browser caches it then I

1048
00:50:35,930 --> 00:50:42,979
have a cache poisoning problem

1049
00:50:37,279 --> 00:50:45,739
eventually that another site uses good

1050
00:50:42,979 --> 00:50:47,299
nonce and the next site uses that one so

1051
00:50:45,739 --> 00:50:49,130
are you talking about some kind of

1052
00:50:47,299 --> 00:50:50,900
reverse proxy cache or account about the

1053
00:50:49,130 --> 00:50:53,329
browser cache the browser cache browser

1054
00:50:50,900 --> 00:50:55,309
does not does not cache HTML pages

1055
00:50:53,329 --> 00:50:59,329
unless instructed by cache control

1056
00:50:55,309 --> 00:51:02,180
public but with my JavaScript files that

1057
00:50:59,329 --> 00:51:04,849
are the base of all my my HTML sites i

1058
00:51:02,180 --> 00:51:06,948
normally use it to that the browser

1059
00:51:04,849 --> 00:51:08,690
cache is at one time and that's totally

1060
00:51:06,949 --> 00:51:11,559
fine the nose is not in the javascript

1061
00:51:08,690 --> 00:51:16,819
file the nonce is in the HTML file I

1062
00:51:11,559 --> 00:51:18,769
have to put okay I'm fine we do that

1063
00:51:16,819 --> 00:51:21,199
yeah I didn't understand completely

1064
00:51:18,769 --> 00:51:25,519
obviously and if I understand correctly

1065
00:51:21,199 --> 00:51:27,979
if I have multiple Travis script files

1066
00:51:25,519 --> 00:51:30,049
loaded by each other and all have to

1067
00:51:27,979 --> 00:51:33,019
reply with the nonce with the correct

1068
00:51:30,049 --> 00:51:34,359
one so if I have ads all the ads also

1069
00:51:33,019 --> 00:51:37,339
have to include the nonce

1070
00:51:34,359 --> 00:51:41,150
isn't that a privacy issue because the

1071
00:51:37,339 --> 00:51:44,869
ads now can track the the session very

1072
00:51:41,150 --> 00:51:46,660
very closely sorry can you say how you

1073
00:51:44,869 --> 00:51:50,809
think it would be a privacy issue

1074
00:51:46,660 --> 00:51:55,819
because now the all the ads will will

1075
00:51:50,809 --> 00:51:59,630
get each each call with a with a single

1076
00:51:55,819 --> 00:52:01,849
nonce and can therefore eventually

1077
00:51:59,630 --> 00:52:04,579
fingerprint or track my browser even

1078
00:52:01,849 --> 00:52:06,170
better than they can ordinary well the

1079
00:52:04,579 --> 00:52:08,420
nonce is meaningless right so it's not

1080
00:52:06,170 --> 00:52:10,969
associated with a session I mean did the

1081
00:52:08,420 --> 00:52:13,940
JavaScript that you embed we'd like by

1082
00:52:10,969 --> 00:52:16,009
trusting ad provider will probably be

1083
00:52:13,940 --> 00:52:17,059
able to read your cookies and your local

1084
00:52:16,009 --> 00:52:18,739
storage so this is much more

1085
00:52:17,059 --> 00:52:20,269
identifiable information that you put

1086
00:52:18,739 --> 00:52:22,369
with that I mean it's the same as

1087
00:52:20,269 --> 00:52:24,680
exfiltrating a CSRF token that you have

1088
00:52:22,369 --> 00:52:26,839
on a form on the side they are random

1089
00:52:24,680 --> 00:52:29,989
they are meaningless and I understand

1090
00:52:26,839 --> 00:52:31,759
what you mean it could be used but they

1091
00:52:29,989 --> 00:52:34,940
are unique for response not per user so

1092
00:52:31,759 --> 00:52:38,420
they will change in the navigation you

1093
00:52:34,940 --> 00:52:40,219
know so I think you have worse issues if

1094
00:52:38,420 --> 00:52:41,869
you do not trust your ad provider

1095
00:52:40,219 --> 00:52:43,940
because your ad provider can basically

1096
00:52:41,869 --> 00:52:46,770
inject all the JavaScript they want in

1097
00:52:43,940 --> 00:52:48,510
your origin so they can you know get

1098
00:52:46,770 --> 00:52:52,800
your local storage they can get your

1099
00:52:48,510 --> 00:52:58,290
cookies they can you know get your form

1100
00:52:52,800 --> 00:53:01,530
fields values so it's but sure if you

1101
00:52:58,290 --> 00:53:07,470
are worried about like having one more

1102
00:53:01,530 --> 00:53:10,170
piece of random data that might give

1103
00:53:07,470 --> 00:53:11,970
like some kind of extra information you

1104
00:53:10,170 --> 00:53:15,090
might want to not use nonces and use

1105
00:53:11,970 --> 00:53:18,149
hashes but I I do not believe this to be

1106
00:53:15,090 --> 00:53:20,490
privacy relevant especially if you are

1107
00:53:18,150 --> 00:53:21,930
using bringing as an example I had

1108
00:53:20,490 --> 00:53:23,970
provider that has unrestricted

1109
00:53:21,930 --> 00:53:27,060
JavaScript execution rights on your page

1110
00:53:23,970 --> 00:53:33,020
anyway and one last question

1111
00:53:27,060 --> 00:53:36,000
this report URL in the CSP I can send my

1112
00:53:33,020 --> 00:53:39,180
reports about CSP valuation to any

1113
00:53:36,000 --> 00:53:42,090
domain there yes and my browser can I

1114
00:53:39,180 --> 00:53:44,430
switch that off in my browser the

1115
00:53:42,090 --> 00:53:46,560
reporting functionality well this is

1116
00:53:44,430 --> 00:53:52,440
like so the server has to explicitly say

1117
00:53:46,560 --> 00:53:56,040
a report your i okay you well know this

1118
00:53:52,440 --> 00:53:58,830
is how CSP works right CSP cannot be so

1119
00:53:56,040 --> 00:54:01,950
it is the server that that yeah I fear

1120
00:53:58,830 --> 00:54:06,210
that that there are patriots that use

1121
00:54:01,950 --> 00:54:09,839
that to report my visits of the site to

1122
00:54:06,210 --> 00:54:12,990
another with them with a malicious CSP

1123
00:54:09,840 --> 00:54:14,220
value well but you mean like the server

1124
00:54:12,990 --> 00:54:15,990
is being compromised because it's the

1125
00:54:14,220 --> 00:54:21,270
server tested no because I don't trust

1126
00:54:15,990 --> 00:54:24,810
the server the server reports my visits

1127
00:54:21,270 --> 00:54:26,480
to somebody without I think there are

1128
00:54:24,810 --> 00:54:29,759
some privatizing my IP address

1129
00:54:26,480 --> 00:54:31,530
eventually or whatever so there are so

1130
00:54:29,760 --> 00:54:34,710
many X filtration mechanism I for that

1131
00:54:31,530 --> 00:54:37,880
but and you really this is what quite a

1132
00:54:34,710 --> 00:54:40,560
convoluted one to leak things but yes

1133
00:54:37,880 --> 00:54:43,500
some privacy oriented browsers actually

1134
00:54:40,560 --> 00:54:46,950
and some extensions like you block for

1135
00:54:43,500 --> 00:54:50,280
example or me block do try to intercept

1136
00:54:46,950 --> 00:54:52,620
and stop CSP reports for being sent so

1137
00:54:50,280 --> 00:54:54,900
you might want to use that you have to

1138
00:54:52,620 --> 00:54:57,600
consider that by granting an extension

1139
00:54:54,900 --> 00:55:00,600
rights to block a web request you are

1140
00:54:57,600 --> 00:55:02,730
making it very very powerful

1141
00:55:00,600 --> 00:55:04,589
so you have to really trust the code I

1142
00:55:02,730 --> 00:55:07,860
mean if it is open source you might want

1143
00:55:04,590 --> 00:55:09,330
to do that absolutely thank you have

1144
00:55:07,860 --> 00:55:12,960
another question here yeah

1145
00:55:09,330 --> 00:55:18,140
hello yeah we're okay thank you for that

1146
00:55:12,960 --> 00:55:21,840
those lights are my questions might be

1147
00:55:18,140 --> 00:55:25,589
going a bit outside of this one of them

1148
00:55:21,840 --> 00:55:28,500
is those eight hash-based values is that

1149
00:55:25,590 --> 00:55:35,450
similar to sub resource integrity is

1150
00:55:28,500 --> 00:55:35,450
that some kind of SR I inserted into CSP

1151
00:55:36,140 --> 00:55:42,450
is this a matching algorithm basically

1152
00:55:38,610 --> 00:55:46,080
so s RI has a different aim so s RI you

1153
00:55:42,450 --> 00:55:48,120
use s RI so just a quick recap ssris

1154
00:55:46,080 --> 00:55:50,370
it's a sub resource integrity is when

1155
00:55:48,120 --> 00:55:53,220
you add attribute to a script tag

1156
00:55:50,370 --> 00:55:56,160
usually sourced from an external server

1157
00:55:53,220 --> 00:55:58,770
usually a CDN because in case it is

1158
00:55:56,160 --> 00:56:01,859
compromised so when you add a script tag

1159
00:55:58,770 --> 00:56:04,259
to your website you are from a third

1160
00:56:01,860 --> 00:56:05,970
party service the server you are

1161
00:56:04,260 --> 00:56:08,820
basically trusting that server not to

1162
00:56:05,970 --> 00:56:10,919
willingly or unwillingly serve malicious

1163
00:56:08,820 --> 00:56:13,140
JavaScript because that is executed in

1164
00:56:10,920 --> 00:56:14,940
your context so like the previous

1165
00:56:13,140 --> 00:56:18,150
question for example if you're using an

1166
00:56:14,940 --> 00:56:21,620
ad provider they could steal all your

1167
00:56:18,150 --> 00:56:23,670
user data right and the same for CDN

1168
00:56:21,620 --> 00:56:25,620
this can be a problem and it has

1169
00:56:23,670 --> 00:56:27,390
happened that some CDN so if you if you

1170
00:56:25,620 --> 00:56:29,850
pawn a CDN you can execute JavaScript

1171
00:56:27,390 --> 00:56:32,900
code almost everywhere right this is

1172
00:56:29,850 --> 00:56:35,670
very scary so SSRI has an aim to

1173
00:56:32,900 --> 00:56:39,240
actually check the content of the script

1174
00:56:35,670 --> 00:56:41,490
and you have in the HTML markup like

1175
00:56:39,240 --> 00:56:44,339
these hash and basically the browser

1176
00:56:41,490 --> 00:56:46,109
checks if the hash had expected half

1177
00:56:44,340 --> 00:56:48,330
actually corresponds with the real half

1178
00:56:46,110 --> 00:56:51,030
that actually got from the network from

1179
00:56:48,330 --> 00:56:55,529
the CDN if it does it gets executed

1180
00:56:51,030 --> 00:56:58,530
otherwise it does not so yeah yeah yes

1181
00:56:55,530 --> 00:57:00,780
it is the same hashing the aim is a

1182
00:56:58,530 --> 00:57:06,330
little bit different right so for

1183
00:57:00,780 --> 00:57:08,160
example here it applies to inline event

1184
00:57:06,330 --> 00:57:09,480
handlers so it's something that using

1185
00:57:08,160 --> 00:57:12,000
the mark-up it's not like sourced

1186
00:57:09,480 --> 00:57:14,370
externally so it even blocks the fetch

1187
00:57:12,000 --> 00:57:17,670
while otherwise it is a fetch

1188
00:57:14,370 --> 00:57:21,960
check hash and then you know decide or

1189
00:57:17,670 --> 00:57:24,180
if not if or not execute and as a Ryan

1190
00:57:21,960 --> 00:57:26,910
CSP should be used together actually if

1191
00:57:24,180 --> 00:57:29,279
you do not trust CD ends so it's very

1192
00:57:26,910 --> 00:57:31,379
very good actually to to use a script

1193
00:57:29,280 --> 00:57:35,370
tag and then a nonce and then a CSP and

1194
00:57:31,380 --> 00:57:37,800
then also use SSRI because basically if

1195
00:57:35,370 --> 00:57:40,290
it's a slightly orthogonal right it's

1196
00:57:37,800 --> 00:57:42,270
not for the same thing the second

1197
00:57:40,290 --> 00:57:44,100
question was more like there have been

1198
00:57:42,270 --> 00:57:47,520
recently these attacks called web

1199
00:57:44,100 --> 00:57:48,990
skimming where attackers have either

1200
00:57:47,520 --> 00:57:50,790
compromised the site or they've

1201
00:57:48,990 --> 00:57:53,759
compromised the third-party provider of

1202
00:57:50,790 --> 00:57:56,490
matrix analytics ad or whatever and

1203
00:57:53,760 --> 00:57:57,840
they've used those to inject script into

1204
00:57:56,490 --> 00:58:00,509
the checkout pages of e-commerce

1205
00:57:57,840 --> 00:58:02,160
websites to steal that the credit card

1206
00:58:00,510 --> 00:58:03,840
or payment information data inputted by

1207
00:58:02,160 --> 00:58:06,359
customers this there have been like the

1208
00:58:03,840 --> 00:58:09,180
British Airways breach the Ticketmaster

1209
00:58:06,360 --> 00:58:11,430
new league and other websites and this

1210
00:58:09,180 --> 00:58:15,870
attacks have have grown in number

1211
00:58:11,430 --> 00:58:17,580
recently many compromises and some

1212
00:58:15,870 --> 00:58:21,480
depending on the method used by the

1213
00:58:17,580 --> 00:58:24,720
attackers so some of the defense's could

1214
00:58:21,480 --> 00:58:27,060
be SSRI for cases where it's modified

1215
00:58:24,720 --> 00:58:29,430
the script injected by a third party is

1216
00:58:27,060 --> 00:58:31,890
modified modified by the attackers and

1217
00:58:29,430 --> 00:58:35,399
those in injected directly into the

1218
00:58:31,890 --> 00:58:38,250
website can CSP be a defense and to what

1219
00:58:35,400 --> 00:58:39,870
extent and and how because in my view

1220
00:58:38,250 --> 00:58:42,390
one of them will have been like the

1221
00:58:39,870 --> 00:58:45,600
whitelist prevent script loaded from

1222
00:58:42,390 --> 00:58:47,759
external sources but you have taken this

1223
00:58:45,600 --> 00:58:50,370
much further and said that whitelist are

1224
00:58:47,760 --> 00:58:53,220
by passable yes so it depend how they

1225
00:58:50,370 --> 00:58:55,910
are injected directly right so for

1226
00:58:53,220 --> 00:58:58,109
example is the hack the server

1227
00:58:55,910 --> 00:59:00,359
redirecting to an evil server and

1228
00:58:58,110 --> 00:59:01,980
sourcing from there in that case

1229
00:59:00,360 --> 00:59:04,200
especially a double policy with a

1230
00:59:01,980 --> 00:59:06,090
whitelist would block that request from

1231
00:59:04,200 --> 00:59:09,180
happening in the first place if it is

1232
00:59:06,090 --> 00:59:11,550
like from the they are served from an

1233
00:59:09,180 --> 00:59:14,069
allowed one a whitelist alone will not

1234
00:59:11,550 --> 00:59:16,110
help like like they have a web shot on

1235
00:59:14,070 --> 00:59:17,970
the server sorry one they have a web

1236
00:59:16,110 --> 00:59:20,010
shell or a backdoor on the server and

1237
00:59:17,970 --> 00:59:22,410
can modify files they can modify the

1238
00:59:20,010 --> 00:59:23,970
script and just insert another script

1239
00:59:22,410 --> 00:59:25,830
tag that slows the malicious script from

1240
00:59:23,970 --> 00:59:26,850
their domain from a domain they control

1241
00:59:25,830 --> 00:59:29,880
so

1242
00:59:26,850 --> 00:59:32,790
you're assuming a full compromised of a

1243
00:59:29,880 --> 00:59:34,320
probably blessed script basically if you

1244
00:59:32,790 --> 00:59:35,759
use nonces you would probably put a

1245
00:59:34,320 --> 00:59:37,680
correct nonce there because you assumed

1246
00:59:35,760 --> 00:59:39,090
it to be right so you have to use sub

1247
00:59:37,680 --> 00:59:41,310
resource integrity for this you have to

1248
00:59:39,090 --> 00:59:44,730
use SSRI all you have to use hashes in

1249
00:59:41,310 --> 00:59:46,110
SSB but what I suggest is to use this is

1250
00:59:44,730 --> 00:59:49,560
an orthogonal problem you have to use

1251
00:59:46,110 --> 00:59:52,560
nonce based assistive against XSS and we

1252
00:59:49,560 --> 00:59:55,470
end SSRI for like also if you do not

1253
00:59:52,560 --> 00:59:57,779
trust at our party like this because

1254
00:59:55,470 --> 00:59:59,339
these are actually two problems i1 is an

1255
00:59:57,780 --> 01:00:01,260
integrity problem and the other is an

1256
00:59:59,340 --> 01:00:02,610
cross-site scripting it's technically

1257
01:00:01,260 --> 01:00:05,910
not a cross-site scripting what you're

1258
01:00:02,610 --> 01:00:09,630
saying right it is no markup is being no

1259
01:00:05,910 --> 01:00:11,160
alien markup is being injected but third

1260
01:00:09,630 --> 01:00:13,440
party is trusted that should not be

1261
01:00:11,160 --> 01:00:17,190
trusted so it is a little bit different

1262
01:00:13,440 --> 01:00:21,540
so if you use s RI plus CSP it's great

1263
01:00:17,190 --> 01:00:24,270
SLI alone would also help from that yeah

1264
01:00:21,540 --> 01:00:26,340
this is and thanks for the question yeah

1265
01:00:24,270 --> 01:00:26,470
give a warm applause for me Kelly thank

1266
01:00:26,340 --> 01:00:31,400
you

1267
01:00:26,470 --> 01:00:31,399
[Applause]

1268
01:00:36,410 --> 01:00:38,470
you

