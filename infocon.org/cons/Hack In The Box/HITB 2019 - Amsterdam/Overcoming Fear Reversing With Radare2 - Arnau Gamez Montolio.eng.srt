1
00:00:20,140 --> 00:00:27,200
okay so let's start with the talk first

2
00:00:24,890 --> 00:00:29,960
of all for those of you who don't know

3
00:00:27,200 --> 00:00:32,750
we which would be most of you I guess

4
00:00:29,960 --> 00:00:34,940
my name is are now I'm from Barcelona

5
00:00:32,750 --> 00:00:36,699
I'm a student of maths and computer

6
00:00:34,940 --> 00:00:39,260
science at the University of Barcelona

7
00:00:36,699 --> 00:00:41,989
I'm also the president of a non-profit

8
00:00:39,260 --> 00:00:44,030
hacking organization in Barcelona I

9
00:00:41,989 --> 00:00:46,400
found it with some friends the faculty

10
00:00:44,030 --> 00:00:48,530
and I'm also a collaborator in the

11
00:00:46,400 --> 00:00:51,589
organization of the r2 cone which is the

12
00:00:48,530 --> 00:00:55,059
Congress about rather - and which is

13
00:00:51,590 --> 00:00:57,949
held every year in Barcelona and

14
00:00:55,059 --> 00:00:59,809
probably most important then who I am is

15
00:00:57,949 --> 00:01:02,839
who am I not I am NOT a professional

16
00:00:59,809 --> 00:01:06,110
reverse engineer and I am NOT an expert

17
00:01:02,839 --> 00:01:08,960
in ruther - and I am NOT a developer in

18
00:01:06,110 --> 00:01:11,750
brother - lista core one this is

19
00:01:08,960 --> 00:01:15,229
important because that goes straight to

20
00:01:11,750 --> 00:01:17,780
the motivation of the talk that is the

21
00:01:15,229 --> 00:01:20,560
very beginning just demystified rather -

22
00:01:17,780 --> 00:01:23,299
there is a lot of myths around it and

23
00:01:20,560 --> 00:01:27,079
being very difficult to learn and do

24
00:01:23,299 --> 00:01:29,049
stuff so we'll try to domestic I it then

25
00:01:27,079 --> 00:01:32,119
of course

26
00:01:29,049 --> 00:01:34,789
following the previous one I am really

27
00:01:32,119 --> 00:01:36,649
interested in trying to give you simple

28
00:01:34,789 --> 00:01:39,799
explanations that came from a non

29
00:01:36,649 --> 00:01:43,880
advanced user which I guess will be

30
00:01:39,799 --> 00:01:46,520
helpful for many of you also there is a

31
00:01:43,880 --> 00:01:48,740
great way to organize and share the

32
00:01:46,520 --> 00:01:52,789
knowledge about rather to to make just

33
00:01:48,740 --> 00:01:55,640
conscious to our back lap and also I

34
00:01:52,789 --> 00:01:57,109
strongly believe that conferences of all

35
00:01:55,640 --> 00:02:00,770
kind of conferences should have

36
00:01:57,109 --> 00:02:02,809
introductory talks to some some topic in

37
00:02:00,770 --> 00:02:05,929
this case rather - and basic reversing

38
00:02:02,810 --> 00:02:09,229
with it and that's my that's my

39
00:02:05,929 --> 00:02:13,420
motivation - for him presented this this

40
00:02:09,229 --> 00:02:16,160
paper this talk and for being here today

41
00:02:13,420 --> 00:02:18,319
first of all quick poll who are you

42
00:02:16,160 --> 00:02:22,460
how many of you are students undergrads

43
00:02:18,319 --> 00:02:25,700
is there any undergrad ok that's cool

44
00:02:22,460 --> 00:02:27,069
I am I'm also undergrad so we are -

45
00:02:25,700 --> 00:02:32,810
right now

46
00:02:27,069 --> 00:02:34,849
maybe masters phd's okay how many of you

47
00:02:32,810 --> 00:02:37,879
are working in InfoSec I guess most of

48
00:02:34,849 --> 00:02:41,060
you how many of you are doing low-level

49
00:02:37,879 --> 00:02:42,409
staff or reverse engineering as you main

50
00:02:41,060 --> 00:02:46,280
work okay

51
00:02:42,409 --> 00:02:48,439
and those of you mostly that the ones

52
00:02:46,280 --> 00:02:50,810
that do a low-level stop reverse

53
00:02:48,439 --> 00:02:53,810
engineering I guess you will know there

54
00:02:50,810 --> 00:02:58,069
are two but how many of you use it like

55
00:02:53,810 --> 00:03:02,540
regularly okay that's cool that's really

56
00:02:58,069 --> 00:03:04,909
cool because I I tend to say that if you

57
00:03:02,540 --> 00:03:06,560
are people that use rather too and are

58
00:03:04,909 --> 00:03:10,909
working in reverse engineering as

59
00:03:06,560 --> 00:03:12,669
professional field I'm I have really but

60
00:03:10,909 --> 00:03:14,719
I have very little things to teach you

61
00:03:12,669 --> 00:03:16,790
because this will be an introduction to

62
00:03:14,719 --> 00:03:19,608
rather to and some basic reversing for

63
00:03:16,790 --> 00:03:22,040
people not not introduced to that but as

64
00:03:19,609 --> 00:03:25,760
I have seen most of you the past

65
00:03:22,040 --> 00:03:27,349
majority don't use it or or don't work

66
00:03:25,760 --> 00:03:29,418
on reverse engineering so I think it

67
00:03:27,349 --> 00:03:32,768
will be pretty interesting to see how it

68
00:03:29,419 --> 00:03:35,810
goes from a my intro interruption

69
00:03:32,769 --> 00:03:39,769
standpoint and this will be at the

70
00:03:35,810 --> 00:03:43,040
outline of the ADI conference and before

71
00:03:39,769 --> 00:03:45,139
i go straight to it if it will take a

72
00:03:43,040 --> 00:03:47,750
minute though the ones that are with

73
00:03:45,139 --> 00:03:51,519
computers if you want to follow the

74
00:03:47,750 --> 00:03:55,069
demos you have those URLs to download

75
00:03:51,519 --> 00:03:57,470
some correctness and one of the other

76
00:03:55,069 --> 00:03:57,978
demos I will be doing I will let you one

77
00:03:57,470 --> 00:04:04,540
minute

78
00:03:57,979 --> 00:04:04,540
copy it and there you will have it

79
00:04:15,419 --> 00:04:19,930
for the first the first link you will

80
00:04:18,430 --> 00:04:23,500
download the whole pack of your lis

81
00:04:19,930 --> 00:04:27,130
kragnes which are scrag means made by

82
00:04:23,500 --> 00:04:29,950
both it's a computer researcher based in

83
00:04:27,130 --> 00:04:31,530
Barcelona currently and it's funny

84
00:04:29,950 --> 00:04:35,849
because he did those crime is to teach

85
00:04:31,530 --> 00:04:39,309
his wife to learn reverse engineering a

86
00:04:35,850 --> 00:04:41,710
long time ago and they are still pretty

87
00:04:39,310 --> 00:04:43,450
useful and very basic for people in

88
00:04:41,710 --> 00:04:45,130
getting introduced to reverse

89
00:04:43,450 --> 00:04:47,979
engineering and I still love them and

90
00:04:45,130 --> 00:04:52,030
use use them every time I can the other

91
00:04:47,979 --> 00:04:55,690
one is just the pack of complete samples

92
00:04:52,030 --> 00:04:59,109
from accompanying a book on reversing it

93
00:04:55,690 --> 00:05:01,810
is secret of reversing by Halen

94
00:04:59,110 --> 00:05:04,840
I guess his name and this is a pretty

95
00:05:01,810 --> 00:05:07,000
cool book on reversing right into

96
00:05:04,840 --> 00:05:10,388
reduction in my opinion and we will be

97
00:05:07,000 --> 00:05:14,620
using some one of his samples to do

98
00:05:10,389 --> 00:05:19,030
couple demos so guess the most of you

99
00:05:14,620 --> 00:05:21,310
will have its yeah sorry thing ok or not

100
00:05:19,030 --> 00:05:23,919
it's really easy to find them just look

101
00:05:21,310 --> 00:05:25,810
for Yoli correctness or a secret of

102
00:05:23,919 --> 00:05:27,490
reversing Geylang samples and you will

103
00:05:25,810 --> 00:05:32,200
find at first search

104
00:05:27,490 --> 00:05:35,020
ok let's go strike with it first of all

105
00:05:32,200 --> 00:05:38,099
I'm gonna I'm gonna cover basically or

106
00:05:35,020 --> 00:05:40,780
rather to and I think this will be

107
00:05:38,100 --> 00:05:44,289
useful because most of you didn't answer

108
00:05:40,780 --> 00:05:48,969
when I when I asked how many of you used

109
00:05:44,289 --> 00:05:51,159
it so let's go to it first of all and in

110
00:05:48,970 --> 00:05:52,840
case you know whether to this free and

111
00:05:51,160 --> 00:05:57,460
opensource reverse engineering framework

112
00:05:52,840 --> 00:05:59,679
that is rewritten in C by pancake it's

113
00:05:57,460 --> 00:06:01,979
name is Sergey Alvarez is a mobile

114
00:05:59,680 --> 00:06:05,680
security researcher researcher currently

115
00:06:01,979 --> 00:06:09,159
based in Barcelona as well and it says

116
00:06:05,680 --> 00:06:13,270
rewritten because initially it was

117
00:06:09,160 --> 00:06:15,970
rather not trailer - it was born as a

118
00:06:13,270 --> 00:06:18,669
forensics tool to care for data among

119
00:06:15,970 --> 00:06:21,640
partitions for his work like more than

120
00:06:18,669 --> 00:06:24,700
10 years ago and then it continued it

121
00:06:21,640 --> 00:06:28,090
evolved as he needed to add some stuff

122
00:06:24,700 --> 00:06:30,490
or cts or his his own needs and then

123
00:06:28,090 --> 00:06:35,460
there was a moment that it was a

124
00:06:30,490 --> 00:06:40,000
completely mess full monolithic project

125
00:06:35,460 --> 00:06:43,419
without any real structure so he decided

126
00:06:40,000 --> 00:06:44,770
to rewrite it entirely as libraries and

127
00:06:43,420 --> 00:06:47,920
so we will see the structure a little

128
00:06:44,770 --> 00:06:50,289
bit later but that's that's why there is

129
00:06:47,920 --> 00:06:54,280
that too because there was a an initial

130
00:06:50,290 --> 00:06:56,880
one it's rather a framework that is

131
00:06:54,280 --> 00:06:59,739
built from scratch from scratch without

132
00:06:56,880 --> 00:07:01,600
third-party dependencies that's that's

133
00:06:59,740 --> 00:07:03,010
kind of interesting because you have the

134
00:07:01,600 --> 00:07:04,210
libraries for example the analysis

135
00:07:03,010 --> 00:07:06,070
libraries the binary information

136
00:07:04,210 --> 00:07:07,690
libraries and you can get them and

137
00:07:06,070 --> 00:07:11,140
include it and use it on your projects

138
00:07:07,690 --> 00:07:13,480
without having to build upon the whole

139
00:07:11,140 --> 00:07:16,270
rather to frame where you just can grab

140
00:07:13,480 --> 00:07:19,090
the library you need and use it as as it

141
00:07:16,270 --> 00:07:22,120
and it doesn't really have any

142
00:07:19,090 --> 00:07:24,880
third-party dependency for example I I

143
00:07:22,120 --> 00:07:28,990
remember that at the very beginning I

144
00:07:24,880 --> 00:07:32,469
guess it was a little dependency on onon

145
00:07:28,990 --> 00:07:35,320
courses and packages we wrote some kind

146
00:07:32,470 --> 00:07:38,020
of pseudo and courses for his nets and

147
00:07:35,320 --> 00:07:40,599
that's it and of course it's really

148
00:07:38,020 --> 00:07:43,150
portable scriptable and extensible

149
00:07:40,600 --> 00:07:48,120
through plugins we will see a lot of

150
00:07:43,150 --> 00:07:51,750
that afterwards and more formally and

151
00:07:48,120 --> 00:07:55,360
the foremost stuff it has a release

152
00:07:51,750 --> 00:08:00,460
timing of six weeks it's based on the

153
00:07:55,360 --> 00:08:01,750
rust release and it's not really fair

154
00:08:00,460 --> 00:08:04,570
that I say that but it has a really

155
00:08:01,750 --> 00:08:07,210
great community and there is the the

156
00:08:04,570 --> 00:08:11,710
Congress held annually in Barcelona

157
00:08:07,210 --> 00:08:14,979
every September so I will invite you to

158
00:08:11,710 --> 00:08:18,820
come to visit it they're really cool

159
00:08:14,980 --> 00:08:21,730
Congress let's go to the capabilities

160
00:08:18,820 --> 00:08:22,900
what can't rather to do first of all of

161
00:08:21,730 --> 00:08:25,810
course it's a reverse engineering

162
00:08:22,900 --> 00:08:27,669
framework so it can disassemble binaries

163
00:08:25,810 --> 00:08:31,000
of several architectures operating

164
00:08:27,670 --> 00:08:32,650
systems it can analyze code and date I

165
00:08:31,000 --> 00:08:35,289
mean that a structural reference is to

166
00:08:32,650 --> 00:08:37,750
function so that come on staff that that

167
00:08:35,289 --> 00:08:38,339
you will just expect from our reverse

168
00:08:37,750 --> 00:08:41,520
engineer

169
00:08:38,340 --> 00:08:45,500
work it can also be used to do low-level

170
00:08:41,520 --> 00:08:50,250
debugging and it has some really cool

171
00:08:45,500 --> 00:08:52,530
stuff to do exploiting I will cover Lee

172
00:08:50,250 --> 00:08:58,380
a bit of this afterwards not that much

173
00:08:52,530 --> 00:09:00,360
but just a brief on how can we go to to

174
00:08:58,380 --> 00:09:01,620
exploit in part with with Radha too and

175
00:09:00,360 --> 00:09:05,190
of course we can do a binary

176
00:09:01,620 --> 00:09:09,600
manipulation patching and all kind of

177
00:09:05,190 --> 00:09:12,210
stuff then we have as well as I said

178
00:09:09,600 --> 00:09:15,180
previously it was born as a forensics

179
00:09:12,210 --> 00:09:17,240
tool so of course it keeps it forensics

180
00:09:15,180 --> 00:09:20,160
capabilities

181
00:09:17,240 --> 00:09:22,980
montt mounting file system in part she

182
00:09:20,160 --> 00:09:26,660
partitions data curbing that that stuff

183
00:09:22,980 --> 00:09:29,670
the point is that it's probably not the

184
00:09:26,660 --> 00:09:32,280
main focus right now developers the the

185
00:09:29,670 --> 00:09:36,900
forensics part of Radha too but still

186
00:09:32,280 --> 00:09:38,939
you have it and it's built in relative

187
00:09:36,900 --> 00:09:40,860
so you can use it without having to

188
00:09:38,940 --> 00:09:43,770
change the other tools we are doing some

189
00:09:40,860 --> 00:09:46,530
kind of reversing involving our analysis

190
00:09:43,770 --> 00:09:47,910
with and you need to mount some file

191
00:09:46,530 --> 00:09:56,280
system or whatever you can do it just

192
00:09:47,910 --> 00:09:58,740
just with it it has also cool methods to

193
00:09:56,280 --> 00:10:02,250
extract matrix from different binaries

194
00:09:58,740 --> 00:10:05,220
and it's quite useful for classification

195
00:10:02,250 --> 00:10:09,630
and it has entropy modules it can't for

196
00:10:05,220 --> 00:10:13,680
example there is a there's a cool option

197
00:10:09,630 --> 00:10:16,680
that lets you made block based hashing

198
00:10:13,680 --> 00:10:18,930
that is I can define I want to compare

199
00:10:16,680 --> 00:10:20,280
different binaries okay you make a hash

200
00:10:18,930 --> 00:10:22,319
of those binaries and you know that they

201
00:10:20,280 --> 00:10:24,810
are different because the hash is done

202
00:10:22,320 --> 00:10:27,180
then concede that you don't know where

203
00:10:24,810 --> 00:10:29,339
it is and if it's a huge binary then

204
00:10:27,180 --> 00:10:32,370
it's it can be a problem a problem so it

205
00:10:29,340 --> 00:10:35,970
has integrated it for example okay I

206
00:10:32,370 --> 00:10:38,340
want to make hashes of every 100 byte

207
00:10:35,970 --> 00:10:40,520
blocks so it compares block by block and

208
00:10:38,340 --> 00:10:47,880
you can you can see where it is changing

209
00:10:40,520 --> 00:10:49,550
exactly and then you have you can do as

210
00:10:47,880 --> 00:10:52,170
well colonel analysis and debugging I

211
00:10:49,550 --> 00:10:55,920
wouldn't go into colonel

212
00:10:52,170 --> 00:10:58,099
today because first of all because I it

213
00:10:55,920 --> 00:11:00,089
won't be enough time to cover it and

214
00:10:58,100 --> 00:11:03,839
second because I'm not really into

215
00:11:00,089 --> 00:11:05,940
karana analysis so I will I can point

216
00:11:03,839 --> 00:11:08,550
you to where to go if you're interested

217
00:11:05,940 --> 00:11:11,250
in doing more kernel staff but it won't

218
00:11:08,550 --> 00:11:18,149
be really extend extensively covered

219
00:11:11,250 --> 00:11:21,449
here and what has rather to support what

220
00:11:18,149 --> 00:11:26,610
has supported so basically all of that I

221
00:11:21,449 --> 00:11:28,769
don't expect you to read it but briefly

222
00:11:26,610 --> 00:11:31,860
it runs everywhere and supports

223
00:11:28,769 --> 00:11:35,699
everything you can any operating system

224
00:11:31,860 --> 00:11:38,190
that you have it can run and it supports

225
00:11:35,699 --> 00:11:40,469
almost any file format and almost in

226
00:11:38,190 --> 00:11:43,980
architecture out there probably more

227
00:11:40,470 --> 00:11:46,290
than those that are written here and if

228
00:11:43,980 --> 00:11:49,470
usually when it comes out some new

229
00:11:46,290 --> 00:11:53,639
architecture some new file format and it

230
00:11:49,470 --> 00:11:56,339
takes very little time to be to support

231
00:11:53,639 --> 00:11:59,100
it and if it happens that you have some

232
00:11:56,339 --> 00:12:01,640
really weird file format or architecture

233
00:11:59,100 --> 00:12:03,899
where you would like to have it

234
00:12:01,640 --> 00:12:06,899
supported and it is not by default first

235
00:12:03,899 --> 00:12:09,360
of all ask on let's tell on channel or I

236
00:12:06,899 --> 00:12:12,870
see videos it's probably supported but

237
00:12:09,360 --> 00:12:16,230
no one updated the document and second

238
00:12:12,870 --> 00:12:18,420
and if not just open an issue or even

239
00:12:16,230 --> 00:12:20,940
better make a pull request but usually

240
00:12:18,420 --> 00:12:26,279
almost everything you might encounter is

241
00:12:20,940 --> 00:12:27,959
supported let go straight to it in case

242
00:12:26,279 --> 00:12:29,959
you don't have it the best way to get

243
00:12:27,959 --> 00:12:33,300
rather to is through the git repository

244
00:12:29,959 --> 00:12:36,479
just clone it go into the directory

245
00:12:33,300 --> 00:12:39,959
create it and use the season style set

246
00:12:36,480 --> 00:12:41,970
script the script is is really nice

247
00:12:39,959 --> 00:12:44,969
because it will build everything for you

248
00:12:41,970 --> 00:12:49,110
you don't have to mess with makes make

249
00:12:44,970 --> 00:12:49,829
files or anything it will install it a

250
00:12:49,110 --> 00:12:52,800
system-wide

251
00:12:49,829 --> 00:12:55,109
by default if you are interested in

252
00:12:52,800 --> 00:12:57,689
installing only per user then you can

253
00:12:55,110 --> 00:13:00,709
run instead of install a sage there is

254
00:12:57,690 --> 00:13:03,990
another batch script called user a sage

255
00:13:00,709 --> 00:13:05,339
in that case it won't ask you for any

256
00:13:03,990 --> 00:13:08,280
permissions but the

257
00:13:05,340 --> 00:13:10,910
the common way if you're on a Windows

258
00:13:08,280 --> 00:13:14,329
machine or a Mac or any other fancy

259
00:13:10,910 --> 00:13:16,560
platform you can check the website for

260
00:13:14,330 --> 00:13:19,980
binaries there the banner the

261
00:13:16,560 --> 00:13:22,410
precompiled binaries for most platforms

262
00:13:19,980 --> 00:13:23,970
and also there are the instructions - if

263
00:13:22,410 --> 00:13:30,719
you want to compile it on your own for

264
00:13:23,970 --> 00:13:35,670
any of your machines okay and yet this

265
00:13:30,720 --> 00:13:39,450
please and it's kind of a meme but it

266
00:13:35,670 --> 00:13:43,349
makes a lot of sense there's a huge

267
00:13:39,450 --> 00:13:47,310
problem with Linux distributions in

268
00:13:43,350 --> 00:13:50,430
particular in particular Debian they are

269
00:13:47,310 --> 00:13:52,199
using a old version of

270
00:13:50,430 --> 00:13:56,760
provisional brother in the repositories

271
00:13:52,200 --> 00:13:59,280
and many times there is people

272
00:13:56,760 --> 00:14:01,620
complaining that this feature doesn't

273
00:13:59,280 --> 00:14:02,970
work this is not supported and it's just

274
00:14:01,620 --> 00:14:06,530
they're using a bill from three years

275
00:14:02,970 --> 00:14:09,450
ago or four years ago so please if you

276
00:14:06,530 --> 00:14:13,079
you will be happy and everyone will be

277
00:14:09,450 --> 00:14:15,390
happy using rather - from get if not you

278
00:14:13,080 --> 00:14:17,460
if you don't want to be updating

279
00:14:15,390 --> 00:14:20,880
everything I just forget to mention that

280
00:14:17,460 --> 00:14:22,260
this the last come on install sh you can

281
00:14:20,880 --> 00:14:24,660
run it every time you want to update

282
00:14:22,260 --> 00:14:26,760
rather - and it will automatically pull

283
00:14:24,660 --> 00:14:28,439
the repository and install it so you

284
00:14:26,760 --> 00:14:30,720
don't have you don't even have to bother

285
00:14:28,440 --> 00:14:33,300
of polling repositories just every time

286
00:14:30,720 --> 00:14:37,400
you want to update it run this command

287
00:14:33,300 --> 00:14:39,930
it will pull it and uninstall it and

288
00:14:37,400 --> 00:14:41,939
there are the releases every six weeks I

289
00:14:39,930 --> 00:14:45,270
said so in case you don't want to be

290
00:14:41,940 --> 00:14:48,600
just updating every day rather tool you

291
00:14:45,270 --> 00:14:50,400
can stick to the releases but their

292
00:14:48,600 --> 00:14:56,610
preferred and recommend the way of using

293
00:14:50,400 --> 00:14:59,010
it is from get okay and what are the

294
00:14:56,610 --> 00:15:01,160
tools included in rather - as I said

295
00:14:59,010 --> 00:15:04,530
it's a the reverse engineering framework

296
00:15:01,160 --> 00:15:08,490
and it has many tools included not only

297
00:15:04,530 --> 00:15:11,850
the main rather tool as it is I have

298
00:15:08,490 --> 00:15:13,560
listed here the tools there are a bunch

299
00:15:11,850 --> 00:15:14,940
of them the first one is rocks - which

300
00:15:13,560 --> 00:15:16,859
is a base converter it's a very basic

301
00:15:14,940 --> 00:15:19,300
base converter to make some operations

302
00:15:16,860 --> 00:15:22,649
binary to hexadecimal it script

303
00:15:19,300 --> 00:15:25,060
all really useful right into it is the

304
00:15:22,649 --> 00:15:26,860
standalone binary for extracting binary

305
00:15:25,060 --> 00:15:29,079
information which is also integrated

306
00:15:26,860 --> 00:15:31,480
into the rather tube shell as well

307
00:15:29,080 --> 00:15:34,779
razvan tool which is the assembler and

308
00:15:31,480 --> 00:15:36,790
disassembler you can specify here the

309
00:15:34,779 --> 00:15:39,399
architecture the bits of the

310
00:15:36,790 --> 00:15:41,019
architecture the engine nests and the

311
00:15:39,399 --> 00:15:44,860
terrain you can assemble on this

312
00:15:41,019 --> 00:15:47,500
assembly with it then there is the

313
00:15:44,860 --> 00:15:50,350
Rajesh - which is the Krypton fashion

314
00:15:47,500 --> 00:15:53,500
utility it has implemented hasn't been

315
00:15:50,350 --> 00:15:56,950
that most known Krypton hashing

316
00:15:53,500 --> 00:15:59,170
algorithms you can check out them also

317
00:15:56,950 --> 00:16:02,440
relative to which is the included binary

318
00:15:59,170 --> 00:16:05,740
different tool in rack 2 which is here

319
00:16:02,440 --> 00:16:08,920
it says it's to compile tiny binaries

320
00:16:05,740 --> 00:16:11,380
which is true but it's the official

321
00:16:08,920 --> 00:16:15,969
description but I would say it's more

322
00:16:11,380 --> 00:16:20,019
like an exploit helper in my opinion

323
00:16:15,970 --> 00:16:24,010
because you can basically grab your own

324
00:16:20,019 --> 00:16:26,140
C code that you want to be the you want

325
00:16:24,010 --> 00:16:28,149
to inject a shellcode basically and it

326
00:16:26,140 --> 00:16:31,120
will create the shellcode for it to

327
00:16:28,149 --> 00:16:34,120
execute it will drop unnecessary stuff

328
00:16:31,120 --> 00:16:36,510
and give you the durability shellcode of

329
00:16:34,120 --> 00:16:40,899
course as it was growing as a

330
00:16:36,510 --> 00:16:44,800
exploitation system let's say the way it

331
00:16:40,899 --> 00:16:46,480
has some other typical things to do and

332
00:16:44,800 --> 00:16:48,849
I will show late it like doing the

333
00:16:46,480 --> 00:16:50,470
bridging patterns and searching for the

334
00:16:48,850 --> 00:16:57,279
offsets under kind of stuff when we are

335
00:16:50,470 --> 00:17:00,970
looking for for the memory position for

336
00:16:57,279 --> 00:17:04,359
228 the code then we have a run to which

337
00:17:00,970 --> 00:17:05,770
is running it let us to run rather to

338
00:17:04,359 --> 00:17:07,928
with different environments what does

339
00:17:05,770 --> 00:17:10,359
this mean it means for example that we

340
00:17:07,929 --> 00:17:11,980
want to open spawn shell oh brother - we

341
00:17:10,359 --> 00:17:15,729
want to work on a file we are reversing

342
00:17:11,980 --> 00:17:17,829
a file but we want to make it like if we

343
00:17:15,730 --> 00:17:20,110
open from that working directory with

344
00:17:17,829 --> 00:17:22,480
that environment variables with these

345
00:17:20,109 --> 00:17:25,448
arguments so we can just grab a little a

346
00:17:22,480 --> 00:17:28,690
very little file with that and we found

347
00:17:25,449 --> 00:17:30,280
- we will pass the binary and with the

348
00:17:28,690 --> 00:17:32,320
environment as well and it will be

349
00:17:30,280 --> 00:17:32,860
loaded as if it was actually running

350
00:17:32,320 --> 00:17:35,080
from the

351
00:17:32,860 --> 00:17:37,330
and define it's quite useful for some of

352
00:17:35,080 --> 00:17:39,870
the tasks then of course there is the

353
00:17:37,330 --> 00:17:44,020
hair to PN which is the package manager

354
00:17:39,870 --> 00:17:47,799
said prior to is really extensible via

355
00:17:44,020 --> 00:17:49,750
plugins there are some of them the most

356
00:17:47,799 --> 00:17:51,340
use that are actually included in the in

357
00:17:49,750 --> 00:17:52,929
the core rather - and you just install

358
00:17:51,340 --> 00:17:55,530
it you will have them but there are

359
00:17:52,929 --> 00:17:59,200
other ones that can be installed through

360
00:17:55,530 --> 00:18:01,299
the package manager it's really really

361
00:17:59,200 --> 00:18:04,330
easy to use her to PM install and the

362
00:18:01,299 --> 00:18:06,760
name of the package and that's it and

363
00:18:04,330 --> 00:18:08,350
you can obviously uninstall and manage

364
00:18:06,760 --> 00:18:11,080
it is a very simple package manager but

365
00:18:08,350 --> 00:18:14,860
really useful to to get track of all

366
00:18:11,080 --> 00:18:16,270
your external plugins and then for sure

367
00:18:14,860 --> 00:18:20,320
we have relative which is the main tool

368
00:18:16,270 --> 00:18:23,379
which is the shared actual shell for for

369
00:18:20,320 --> 00:18:25,870
doing all the staff and it includes the

370
00:18:23,380 --> 00:18:28,330
functionalities of most of the other

371
00:18:25,870 --> 00:18:30,070
tools I mean we have standalone tools

372
00:18:28,330 --> 00:18:32,139
that are using some of the libraries we

373
00:18:30,070 --> 00:18:33,668
said before and as well we have rather -

374
00:18:32,140 --> 00:18:36,400
that is including all those libraries

375
00:18:33,669 --> 00:18:38,470
and using them inside the shell so you

376
00:18:36,400 --> 00:18:40,600
can use it them as standalone programs

377
00:18:38,470 --> 00:18:48,790
or inside the shell it depends on your

378
00:18:40,600 --> 00:18:50,949
needs so let's go for commentary

379
00:18:48,790 --> 00:18:56,520
interaction and let's go straight to it

380
00:18:50,950 --> 00:18:59,410
I hope you have your rather shell just

381
00:18:56,520 --> 00:19:01,720
waiting for the opening so how to spawn

382
00:18:59,410 --> 00:19:03,970
a rather - shell first of all our - is a

383
00:19:01,720 --> 00:19:06,429
same link for our tool you will usually

384
00:19:03,970 --> 00:19:09,790
see you are - when calling card - just a

385
00:19:06,429 --> 00:19:13,080
formalism but just in case to open a

386
00:19:09,790 --> 00:19:16,480
file just are two and path of the file

387
00:19:13,080 --> 00:19:19,210
then this won't open in in right mode

388
00:19:16,480 --> 00:19:21,700
which means that we won't be permitted

389
00:19:19,210 --> 00:19:23,350
to write and the file and to do this we

390
00:19:21,700 --> 00:19:27,850
will have to open it with the right flag

391
00:19:23,350 --> 00:19:31,570
which is the W and if we want to do back

392
00:19:27,850 --> 00:19:31,959
has so we can run the process and attach

393
00:19:31,570 --> 00:19:33,939
to it

394
00:19:31,960 --> 00:19:37,150
we'll discuss a little bit about how

395
00:19:33,940 --> 00:19:39,730
debugging works and afterwards so one

396
00:19:37,150 --> 00:19:42,340
debugging session we have to append we

397
00:19:39,730 --> 00:19:45,920
have to use that - the flag while

398
00:19:42,340 --> 00:19:49,189
opening then there is another

399
00:19:45,920 --> 00:19:51,230
interesting flag for me which is okay I

400
00:19:49,190 --> 00:19:55,190
don't want to load any user settings any

401
00:19:51,230 --> 00:20:00,200
custom settings that that is because we

402
00:19:55,190 --> 00:20:02,000
can custom and crafts mostly everything

403
00:20:00,200 --> 00:20:05,000
from rudder to its options

404
00:20:02,000 --> 00:20:08,360
configurations or a lot of stuff we will

405
00:20:05,000 --> 00:20:10,880
dig into it in a couple points

406
00:20:08,360 --> 00:20:16,510
afterwards but just in case we want to

407
00:20:10,880 --> 00:20:19,220
just open a shell without any custom

408
00:20:16,510 --> 00:20:22,610
custom settings loaded just with -

409
00:20:19,220 --> 00:20:26,030
capital n we will do it and then there

410
00:20:22,610 --> 00:20:28,340
are two other interesting and quite

411
00:20:26,030 --> 00:20:31,220
useful sometimes come on that is okay I

412
00:20:28,340 --> 00:20:33,679
just want to open our arty shell but I

413
00:20:31,220 --> 00:20:37,400
don't really want to open any file I

414
00:20:33,680 --> 00:20:39,080
just want to look through it or maybe

415
00:20:37,400 --> 00:20:41,510
explore the configuration to configure

416
00:20:39,080 --> 00:20:43,490
it or whatever I just don't need to open

417
00:20:41,510 --> 00:20:49,040
a file you have two options first one is

418
00:20:43,490 --> 00:20:56,900
just with a - I will just open with this

419
00:20:49,040 --> 00:20:59,570
macro which is Amit will give us 512

420
00:20:56,900 --> 00:21:02,900
bytes of memory so we can write in it

421
00:20:59,570 --> 00:21:04,520
and and we can can modify it we can

422
00:21:02,900 --> 00:21:07,160
write whatever we want and we can also

423
00:21:04,520 --> 00:21:09,800
save it to a file and there is okay I

424
00:21:07,160 --> 00:21:12,080
don't really want anything to be opened

425
00:21:09,800 --> 00:21:15,680
or memory to be allocated I just want to

426
00:21:12,080 --> 00:21:16,250
look through the the shell and their

427
00:21:15,680 --> 00:21:19,070
options

428
00:21:16,250 --> 00:21:24,560
so with two dashes it will open a shell

429
00:21:19,070 --> 00:21:27,350
but it won't attach to any file so this

430
00:21:24,560 --> 00:21:30,950
is one of the important one of the

431
00:21:27,350 --> 00:21:32,870
important slides here are two comments

432
00:21:30,950 --> 00:21:36,560
per se to be difficult usually because

433
00:21:32,870 --> 00:21:39,260
are not common their syntax is not the

434
00:21:36,560 --> 00:21:40,879
most common lastly but it's not that

435
00:21:39,260 --> 00:21:42,800
difficult it's based on mnemonics

436
00:21:40,880 --> 00:21:45,530
mnemonics means are - comments are

437
00:21:42,800 --> 00:21:48,399
really short comments usually short

438
00:21:45,530 --> 00:21:51,860
where each letter means one thing and

439
00:21:48,400 --> 00:21:54,500
the letters left the leftmost letters

440
00:21:51,860 --> 00:21:56,780
are the comments then we have the

441
00:21:54,500 --> 00:21:58,960
following sub comments so for example we

442
00:21:56,780 --> 00:22:01,600
want to seek to an offset we will

443
00:21:58,960 --> 00:22:04,270
use the s we want to bring the hex time

444
00:22:01,600 --> 00:22:07,120
we'll use px bring hexagon printer

445
00:22:04,270 --> 00:22:10,660
disassembler PD want to write experience

446
00:22:07,120 --> 00:22:13,800
right assembly analyze all info all or

447
00:22:10,660 --> 00:22:16,600
quit and everything worked like that so

448
00:22:13,800 --> 00:22:20,110
sometimes you can even guess what will

449
00:22:16,600 --> 00:22:26,500
be the common and for example I will

450
00:22:20,110 --> 00:22:39,270
make it is here I don't know if you see

451
00:22:26,500 --> 00:22:41,710
it so as I said let's say that I want PD

452
00:22:39,270 --> 00:22:43,510
20 lines of the assembly print the same

453
00:22:41,710 --> 00:22:49,000
with 20 lines and you don't see anything

454
00:22:43,510 --> 00:22:51,730
because it's freaking ok good so now we

455
00:22:49,000 --> 00:22:55,000
want to seek to for example I round this

456
00:22:51,730 --> 00:22:55,510
position so we just seek to this

457
00:22:55,000 --> 00:23:07,540
position

458
00:22:55,510 --> 00:23:09,490
whoops yeah and the pointer changed ok

459
00:23:07,540 --> 00:23:11,590
that error is just because my clipboard

460
00:23:09,490 --> 00:23:16,690
doesn't work well and when it passes

461
00:23:11,590 --> 00:23:18,340
stop it just ok and if you want to for

462
00:23:16,690 --> 00:23:20,800
example you wanted to write something

463
00:23:18,340 --> 00:23:24,750
here we can do it because we have not

464
00:23:20,800 --> 00:23:27,940
opened in write mode so I will open now

465
00:23:24,750 --> 00:23:31,170
something that that I can write but not

466
00:23:27,940 --> 00:23:31,170
being LS of course

467
00:23:32,440 --> 00:23:35,670
[Music]

468
00:23:40,820 --> 00:23:47,158
and if we open with the pride flag now

469
00:23:44,940 --> 00:23:48,929
for you I'll bring the hexadecimal we

470
00:23:47,159 --> 00:23:51,479
see the hexadecimal representation at

471
00:23:48,929 --> 00:23:52,830
the opposite we are located we don't

472
00:23:51,479 --> 00:23:55,409
need to we don't need to print the

473
00:23:52,830 --> 00:23:57,059
default values a default amount of

474
00:23:55,409 --> 00:23:59,219
hexadecimal program we can specify the

475
00:23:57,059 --> 00:24:01,469
number of bytes the default values are

476
00:23:59,219 --> 00:24:04,349
also configurable so view by default

477
00:24:01,469 --> 00:24:06,690
just want to bring the hexadecimal of

478
00:24:04,349 --> 00:24:09,928
three lines you can just configure it

479
00:24:06,690 --> 00:24:13,409
that way and now we will forget out why

480
00:24:09,929 --> 00:24:21,450
I want to write experts who said like a

481
00:24:13,409 --> 00:24:28,859
90 and here you can see 90 90 so that's

482
00:24:21,450 --> 00:24:32,580
it that is that this is quite important

483
00:24:28,859 --> 00:24:35,668
this but probably most important slide

484
00:24:32,580 --> 00:24:38,460
is this one now you have everything you

485
00:24:35,669 --> 00:24:41,580
need rather to is really cool because it

486
00:24:38,460 --> 00:24:43,710
has inline help which means that for

487
00:24:41,580 --> 00:24:46,019
every comment and every sub comment you

488
00:24:43,710 --> 00:24:49,679
can get in line help while in the shell

489
00:24:46,019 --> 00:24:52,349
for all the options are on everything

490
00:24:49,679 --> 00:24:58,259
and I will show you just right now if we

491
00:24:52,349 --> 00:25:00,509
just open our show we just saw a

492
00:24:58,259 --> 00:25:03,210
question mark will have all the options

493
00:25:00,509 --> 00:25:05,129
all the commands available and there the

494
00:25:03,210 --> 00:25:08,159
description for example let's say we

495
00:25:05,129 --> 00:25:11,580
want to go to the analysis comment which

496
00:25:08,159 --> 00:25:13,529
is the a so we hope we go to a and we

497
00:25:11,580 --> 00:25:16,739
append a question mark we will see it

498
00:25:13,529 --> 00:25:19,049
sub comments we want to deal with

499
00:25:16,739 --> 00:25:22,769
analyzing functions okay so you can

500
00:25:19,049 --> 00:25:24,539
analyze functions and a question mark

501
00:25:22,769 --> 00:25:26,639
now we will see all the options for

502
00:25:24,539 --> 00:25:30,899
function analysis we want to list the

503
00:25:26,639 --> 00:25:33,299
functions we here unless the functions

504
00:25:30,899 --> 00:25:35,758
and there is only the entry point why

505
00:25:33,299 --> 00:25:40,830
because we haven't analyzed it yet so we

506
00:25:35,759 --> 00:25:43,019
just analyze the code and now an iced

507
00:25:40,830 --> 00:25:48,799
functions list we will see all the

508
00:25:43,019 --> 00:25:51,419
functions it from this is LS okay

509
00:25:48,799 --> 00:25:53,160
so keep in mind just appending a

510
00:25:51,419 --> 00:25:56,640
question mark its

511
00:25:53,160 --> 00:25:58,590
best way probably to move on is you

512
00:25:56,640 --> 00:26:01,290
don't really need to know every comment

513
00:25:58,590 --> 00:26:05,100
every mnemonic you will get used to most

514
00:26:01,290 --> 00:26:08,720
of them at least they're 15 which are

515
00:26:05,100 --> 00:26:14,219
with those you can make 99% of

516
00:26:08,720 --> 00:26:15,900
regular stuff but if you need to to look

517
00:26:14,220 --> 00:26:17,250
for something just a penny question mark

518
00:26:15,900 --> 00:26:22,550
and you will have all the descriptions

519
00:26:17,250 --> 00:26:25,080
and all the options running for it okay

520
00:26:22,550 --> 00:26:27,899
some handy tricks that I found quite

521
00:26:25,080 --> 00:26:30,540
useful and are interesting when dealing

522
00:26:27,900 --> 00:26:32,970
with para 2 is for example usually when

523
00:26:30,540 --> 00:26:37,020
we throw a comment if we append that J

524
00:26:32,970 --> 00:26:39,930
at the end or J with with that with that

525
00:26:37,020 --> 00:26:43,260
curly brackets it will gives us the

526
00:26:39,930 --> 00:26:46,370
output in JSON format both or contented

527
00:26:43,260 --> 00:26:49,980
or expanded I will show you for example

528
00:26:46,370 --> 00:26:53,219
eyes for information will see the

529
00:26:49,980 --> 00:26:55,980
options okay let's say I'm interested in

530
00:26:53,220 --> 00:26:57,720
the sections of the binary so

531
00:26:55,980 --> 00:27:00,960
information of the sections here the

532
00:26:57,720 --> 00:27:02,580
sections let's say now I want to get it

533
00:27:00,960 --> 00:27:06,860
in JSON okay

534
00:27:02,580 --> 00:27:15,990
this suggestion and I want to read it

535
00:27:06,860 --> 00:27:18,179
like pretty so this is that's it I will

536
00:27:15,990 --> 00:27:19,020
advanced just one slide but I am coming

537
00:27:18,180 --> 00:27:20,880
back in a moment

538
00:27:19,020 --> 00:27:24,750
that's really cool because we can pipe

539
00:27:20,880 --> 00:27:26,640
with the shell comments directly and we

540
00:27:24,750 --> 00:27:29,220
can even run shell comments from it

541
00:27:26,640 --> 00:27:34,700
which means basically that we can do

542
00:27:29,220 --> 00:27:34,700
this and pipe it for example to less

543
00:27:35,060 --> 00:27:43,530
directly we can look for it then

544
00:27:37,770 --> 00:27:48,360
whatever nib and I'm not really sure if

545
00:27:43,530 --> 00:27:54,450
this works right now yep we can drag the

546
00:27:48,360 --> 00:28:03,570
pipe to a file and now we have you can

547
00:27:54,450 --> 00:28:06,480
call it directly so another cool thing

548
00:28:03,570 --> 00:28:08,429
is we can append cube on most of

549
00:28:06,480 --> 00:28:11,280
commands as well and it will give us a

550
00:28:08,430 --> 00:28:15,300
quiet quiet output for example removing

551
00:28:11,280 --> 00:28:17,160
some non non important or not essential

552
00:28:15,300 --> 00:28:21,120
staff this is quite useful for example

553
00:28:17,160 --> 00:28:24,140
in these sections example just appending

554
00:28:21,120 --> 00:28:33,810
a Q so it will give us a way briefly

555
00:28:24,140 --> 00:28:36,630
output that's it and it has implemented

556
00:28:33,810 --> 00:28:38,760
an internal grip that's very interesting

557
00:28:36,630 --> 00:28:42,360
and you would say because I advanced

558
00:28:38,760 --> 00:28:47,100
okay but why don't you just pipe and use

559
00:28:42,360 --> 00:28:50,820
grip there are a couple of reasons first

560
00:28:47,100 --> 00:28:52,830
one is not every systems have grip if

561
00:28:50,820 --> 00:28:55,409
you're running on a Windows you don't

562
00:28:52,830 --> 00:28:57,840
really have grip style or some versions

563
00:28:55,410 --> 00:28:59,550
of busybox that don't have grip and you

564
00:28:57,840 --> 00:29:00,990
can have a brother installed and wanting

565
00:28:59,550 --> 00:29:07,290
toured with that so you have internal

566
00:29:00,990 --> 00:29:10,800
grip that you can use it right right

567
00:29:07,290 --> 00:29:12,780
this for example will is the sections we

568
00:29:10,800 --> 00:29:20,639
can grab for section that contain the

569
00:29:12,780 --> 00:29:22,920
word data and that's it then we can run

570
00:29:20,640 --> 00:29:24,540
native shell commands from the native

571
00:29:22,920 --> 00:29:27,240
geology of the system with the

572
00:29:24,540 --> 00:29:29,010
exclamation mark protects that's that's

573
00:29:27,240 --> 00:29:31,170
quite interesting that it will it will

574
00:29:29,010 --> 00:29:43,170
return to the rod to shell without

575
00:29:31,170 --> 00:29:45,000
losing the session just and finally one

576
00:29:43,170 --> 00:29:47,190
interesting thing is that we don't

577
00:29:45,000 --> 00:29:50,250
really there are some modifiers I want

578
00:29:47,190 --> 00:29:52,920
to go deep with them but one of the most

579
00:29:50,250 --> 00:29:56,280
important or most used is the the

580
00:29:52,920 --> 00:29:58,140
temporary sig is with the @ symbol and

581
00:29:56,280 --> 00:30:01,760
it basically means that perform the

582
00:29:58,140 --> 00:30:04,890
operation you are telling add an offset

583
00:30:01,760 --> 00:30:06,570
but without having to be seeked to it

584
00:30:04,890 --> 00:30:08,730
that you will understand with an example

585
00:30:06,570 --> 00:30:12,030
way better for example if I want to

586
00:30:08,730 --> 00:30:14,390
print the December of 16 bytes at I

587
00:30:12,030 --> 00:30:14,389
don't know

588
00:30:14,760 --> 00:30:22,679
here oops at this at this memory I would

589
00:30:20,070 --> 00:30:27,110
have to seek there as I told you before

590
00:30:22,679 --> 00:30:35,549
and now in the disassembly of 32 lines

591
00:30:27,110 --> 00:30:38,820
but if I am just here which is the entry

592
00:30:35,549 --> 00:30:41,940
point where we arrive just respond

593
00:30:38,820 --> 00:30:44,040
Michelle I can do the do this without

594
00:30:41,940 --> 00:30:46,620
having to be sick to the other place

595
00:30:44,040 --> 00:30:48,990
just with the temporary sick and was

596
00:30:46,620 --> 00:30:53,610
like you will see that it's the same

597
00:30:48,990 --> 00:30:56,070
output but we are still sick where we

598
00:30:53,610 --> 00:30:57,870
want this is quite useful because most

599
00:30:56,070 --> 00:30:59,820
of times we are dealing with main

600
00:30:57,870 --> 00:31:01,530
function and we are working with it but

601
00:30:59,820 --> 00:31:03,120
we want to explore another function but

602
00:31:01,530 --> 00:31:05,580
we don't really want to be seeking from

603
00:31:03,120 --> 00:31:10,100
back and forth to one function I'll just

604
00:31:05,580 --> 00:31:12,689
do a tempura sick and that's salt and

605
00:31:10,100 --> 00:31:16,080
yeah let you go straight to it let's

606
00:31:12,690 --> 00:31:17,940
make a very simple first demo of the

607
00:31:16,080 --> 00:31:23,240
crack me I guess it will be there number

608
00:31:17,940 --> 00:31:23,240
two of the Yoli ones that I put before

609
00:31:29,720 --> 00:31:37,410
just to show you the do you see it well

610
00:31:32,880 --> 00:31:39,990
the screen yeah it's just very simple

611
00:31:37,410 --> 00:31:44,460
fragment is put a password and it says

612
00:31:39,990 --> 00:31:47,730
invalid our goal in this crack me will

613
00:31:44,460 --> 00:31:51,179
be to to make the program accept any

614
00:31:47,730 --> 00:31:53,610
password okay then afterwards we will

615
00:31:51,179 --> 00:31:55,890
see when we talk about emulation why I'm

616
00:31:53,610 --> 00:31:58,320
doing this now and afterwards I will be

617
00:31:55,890 --> 00:32:01,559
doing like extracting the natural

618
00:31:58,320 --> 00:32:02,760
password actually the the challenges if

619
00:32:01,559 --> 00:32:05,250
you read there if you have downloaded

620
00:32:02,760 --> 00:32:06,510
them and look to the readme says that

621
00:32:05,250 --> 00:32:08,309
you have to fight the binaries clock

622
00:32:06,510 --> 00:32:20,040
setting it password so we are being

623
00:32:08,309 --> 00:32:24,740
legal okay we have the the Primus

624
00:32:20,040 --> 00:32:24,740
unloaded but with the

625
00:32:29,899 --> 00:32:37,399
first of all if we want to patch the

626
00:32:32,879 --> 00:32:42,709
binary how do we have to open the file

627
00:32:37,399 --> 00:32:42,709
so we can patch it that is modifying

628
00:32:42,739 --> 00:32:49,889
anyone exactly we need to double your

629
00:32:47,279 --> 00:32:53,789
flag because otherwise we can explore it

630
00:32:49,889 --> 00:32:56,299
that we cannot modify it on disk then I

631
00:32:53,789 --> 00:32:58,919
will show you a cool trick about

632
00:32:56,299 --> 00:33:02,070
modifying the binary on the session but

633
00:32:58,919 --> 00:33:11,659
not on the disk but now we will will be

634
00:33:02,070 --> 00:33:16,039
using that will make just a copy cm2 and

635
00:33:11,659 --> 00:33:19,399
we are opening it with the value flag

636
00:33:16,039 --> 00:33:24,600
first of all what do we want to do

637
00:33:19,399 --> 00:33:27,869
analyzing it there is a there is a meme

638
00:33:24,600 --> 00:33:30,570
in the community that says that just

639
00:33:27,869 --> 00:33:33,928
throw a stew rather to and analyze

640
00:33:30,570 --> 00:33:37,678
everything because as more a 0 deeper is

641
00:33:33,929 --> 00:33:41,129
the analysis so usually with 3 days you

642
00:33:37,679 --> 00:33:45,859
have enough there is some experimental

643
00:33:41,129 --> 00:33:45,859
analysis methods that run with 4s and

644
00:33:46,279 --> 00:33:54,629
some some time ago you just open the

645
00:33:49,350 --> 00:33:59,070
session and just did that and it worked

646
00:33:54,629 --> 00:34:01,889
because starting at 4 s you can put more

647
00:33:59,070 --> 00:34:04,320
but it will do the same but then there

648
00:34:01,889 --> 00:34:06,299
are rod developers are really funny and

649
00:34:04,320 --> 00:34:12,899
I guess it's starting at 7 8

650
00:34:06,299 --> 00:34:17,730
this is this message I'm doing anything

651
00:34:12,899 --> 00:34:22,649
so you can throw a bunch of face but no

652
00:34:17,730 --> 00:34:24,569
more than 7 or D won't do anything ok so

653
00:34:22,649 --> 00:34:27,270
hey if we will have it properly analyzed

654
00:34:24,569 --> 00:34:31,409
by now so we can for example is the

655
00:34:27,270 --> 00:34:33,179
functions analyzes functions list AFL to

656
00:34:31,409 --> 00:34:35,609
lose the functions we are interested in

657
00:34:33,179 --> 00:34:39,569
the main wine in the main one and now

658
00:34:35,609 --> 00:34:41,558
what can we do as as we know we could

659
00:34:39,569 --> 00:34:43,629
seek to the main

660
00:34:41,559 --> 00:34:45,940
which is a this is a flag so we don't

661
00:34:43,629 --> 00:34:49,418
really need to copy the upset we could

662
00:34:45,940 --> 00:34:53,019
just seek to main to the flag we could

663
00:34:49,418 --> 00:34:57,190
as well print this assembly at main

664
00:34:53,018 --> 00:34:59,558
which is printing the disassembly ah at

665
00:34:57,190 --> 00:35:02,349
the offset reference by the main flag

666
00:34:59,559 --> 00:35:07,359
but without singing to it and there is

667
00:35:02,349 --> 00:35:09,279
another option which is PDF which

668
00:35:07,359 --> 00:35:11,049
basically is created this assembly of a

669
00:35:09,279 --> 00:35:13,029
function this is quite interesting

670
00:35:11,049 --> 00:35:15,819
because if you specify that what you're

671
00:35:13,029 --> 00:35:17,739
disassembling is a function it will as

672
00:35:15,819 --> 00:35:19,089
it is as it has been analyzed it will

673
00:35:17,739 --> 00:35:21,130
give the assembly of the whole function

674
00:35:19,089 --> 00:35:23,199
with the boundaries otherwise you will

675
00:35:21,130 --> 00:35:26,259
have to print this assembly 20 lines or

676
00:35:23,199 --> 00:35:29,349
10 or maybe 30 so it as it has detected

677
00:35:26,259 --> 00:35:31,869
and the length of the function is quite

678
00:35:29,349 --> 00:35:36,099
interesting and we can just see two men

679
00:35:31,869 --> 00:35:40,420
because we will be using it you see the

680
00:35:36,099 --> 00:35:45,219
pointer change and then we just run PDF

681
00:35:40,420 --> 00:35:47,019
if we wanted to print the assembly of

682
00:35:45,219 --> 00:35:50,499
another function without seeking to it

683
00:35:47,019 --> 00:35:54,279
just the same temporary sig PDF add

684
00:35:50,499 --> 00:35:57,430
function whatever okay but in this case

685
00:35:54,279 --> 00:36:00,880
we're in the main so we can just print

686
00:35:57,430 --> 00:36:07,899
it as a symbol of the function how many

687
00:36:00,880 --> 00:36:11,440
of you understand assembly okay most of

688
00:36:07,900 --> 00:36:13,449
you that's fine but that's really fine

689
00:36:11,440 --> 00:36:16,479
that some of you don't really understand

690
00:36:13,449 --> 00:36:18,819
it because you'll need it you don't

691
00:36:16,479 --> 00:36:21,968
actually need to understand assembly I'm

692
00:36:18,819 --> 00:36:23,558
not an expert on assembly at all I can't

693
00:36:21,969 --> 00:36:28,809
read it more or less some architecture

694
00:36:23,559 --> 00:36:30,339
but that's it and you will show you will

695
00:36:28,809 --> 00:36:33,309
see because you don't really need to

696
00:36:30,339 --> 00:36:35,140
understand it because it's really easy

697
00:36:33,309 --> 00:36:39,670
in this case these are really easy

698
00:36:35,140 --> 00:36:42,670
crackme so we have the main function we

699
00:36:39,670 --> 00:36:45,279
have some stuff worried about it then we

700
00:36:42,670 --> 00:36:51,250
have here Oh risk you will do it a

701
00:36:45,279 --> 00:36:55,240
little bit can you read it as okay

702
00:36:51,250 --> 00:37:00,250
because Danny here it's less messy and

703
00:36:55,240 --> 00:37:02,229
having all the that zoom so here we have

704
00:37:00,250 --> 00:37:04,270
a reference to a string which we have

705
00:37:02,230 --> 00:37:05,890
here in the comment and then a call to

706
00:37:04,270 --> 00:37:07,690
something that is printf you don't need

707
00:37:05,890 --> 00:37:10,029
to know assembly to to know that what's

708
00:37:07,690 --> 00:37:11,590
happening here okay here there is

709
00:37:10,030 --> 00:37:13,900
another reference to another string

710
00:37:11,590 --> 00:37:15,940
which contains password con space and

711
00:37:13,900 --> 00:37:17,800
our call to printf again you don't need

712
00:37:15,940 --> 00:37:22,840
to know assembly to know what's going on

713
00:37:17,800 --> 00:37:25,150
here then we have something and then a

714
00:37:22,840 --> 00:37:27,640
call to scanf it was asking us for a

715
00:37:25,150 --> 00:37:30,400
password so again you don't really need

716
00:37:27,640 --> 00:37:32,410
to know what's going on to understand

717
00:37:30,400 --> 00:37:33,970
what's happening here and then here we

718
00:37:32,410 --> 00:37:36,940
have an interesting part which is

719
00:37:33,970 --> 00:37:39,069
basically moving some values on memory

720
00:37:36,940 --> 00:37:41,290
making some operations adding and

721
00:37:39,070 --> 00:37:44,080
multiplication so on and then comparing

722
00:37:41,290 --> 00:37:46,420
two values that's it you don't really

723
00:37:44,080 --> 00:37:49,450
need to get to the exact I mean you

724
00:37:46,420 --> 00:37:51,490
don't really need if you are starting

725
00:37:49,450 --> 00:37:53,319
reverse engineering it's quite

726
00:37:51,490 --> 00:37:55,779
recommended that you go through through

727
00:37:53,320 --> 00:37:58,810
that with a pencil and paper and okay

728
00:37:55,780 --> 00:38:00,730
this goes to this memory and then this

729
00:37:58,810 --> 00:38:03,970
one is multiplied by this value here

730
00:38:00,730 --> 00:38:05,410
it's really really useful but to do most

731
00:38:03,970 --> 00:38:07,509
of the things you really need to

732
00:38:05,410 --> 00:38:10,330
understand line by line up the assembly

733
00:38:07,510 --> 00:38:13,480
just go stick to the point so here we

734
00:38:10,330 --> 00:38:17,080
have two printouts of the strings we

735
00:38:13,480 --> 00:38:18,760
have seen then a call to scanf some kind

736
00:38:17,080 --> 00:38:22,000
of operations with somebody's that herb

737
00:38:18,760 --> 00:38:26,050
are being loaded and then a comparison

738
00:38:22,000 --> 00:38:29,980
between the OP D D value that is stored

739
00:38:26,050 --> 00:38:35,020
here and the value register here and we

740
00:38:29,980 --> 00:38:38,440
can see that the one stored the Perseids

741
00:38:35,020 --> 00:38:42,369
which is at the base pointer minus C in

742
00:38:38,440 --> 00:38:45,520
the stack frame is the one that is being

743
00:38:42,369 --> 00:38:48,160
reference here okay we will see

744
00:38:45,520 --> 00:38:50,560
afterwards when we talk about emulation

745
00:38:48,160 --> 00:38:53,170
why this is important at least why we

746
00:38:50,560 --> 00:38:57,730
are interested in it but now but what we

747
00:38:53,170 --> 00:39:01,630
only what we want to do is patch it to

748
00:38:57,730 --> 00:39:02,890
accept any password so here it is a

749
00:39:01,630 --> 00:39:04,960
comparison and

750
00:39:02,890 --> 00:39:07,710
then we have a conditional jump if not

751
00:39:04,960 --> 00:39:10,750
equal here we you have the arrows if

752
00:39:07,710 --> 00:39:12,549
it's not equal it will jump here which

753
00:39:10,750 --> 00:39:16,450
is invalid password Oh a reference

754
00:39:12,549 --> 00:39:19,690
symbolic password and printf it's it's

755
00:39:16,450 --> 00:39:21,399
clear crystal clear and otherwise it

756
00:39:19,690 --> 00:39:23,200
will continue and you say ok the

757
00:39:21,400 --> 00:39:26,589
password is ok and we are done

758
00:39:23,200 --> 00:39:28,808
so anyone has an idea how to patch it so

759
00:39:26,589 --> 00:39:32,259
it always says that the password is ok

760
00:39:28,809 --> 00:39:35,769
yeah exactly

761
00:39:32,260 --> 00:39:38,680
just get rid of this jump if it does a

762
00:39:35,769 --> 00:39:41,618
comparison but it doesn't care about the

763
00:39:38,680 --> 00:39:43,808
result because if we remove this it will

764
00:39:41,619 --> 00:39:46,809
just go straight to loading the password

765
00:39:43,809 --> 00:39:50,980
string and calling the printf how can we

766
00:39:46,809 --> 00:39:57,369
do that so can sick if my clipboard is

767
00:39:50,980 --> 00:40:01,990
working ok this is the line print the

768
00:39:57,369 --> 00:40:04,240
disassembly of one line and we'll write

769
00:40:01,990 --> 00:40:08,740
to experts 90 90 in case you don't know

770
00:40:04,240 --> 00:40:11,078
it an ID is the hexadecimal of the OP

771
00:40:08,740 --> 00:40:13,839
code representation which is not just no

772
00:40:11,079 --> 00:40:18,460
operation ok next 36 so we will write

773
00:40:13,839 --> 00:40:21,970
two knobs here and now we can see for

774
00:40:18,460 --> 00:40:25,680
example the hexadecimal of just this

775
00:40:21,970 --> 00:40:30,220
time we see that this has been written

776
00:40:25,680 --> 00:40:33,308
and if we again read this assembly have

777
00:40:30,220 --> 00:40:37,808
a knob here have knobs and that's it

778
00:40:33,309 --> 00:40:39,789
that's pretty much it now we can do

779
00:40:37,809 --> 00:40:43,329
assembly the main again and you see that

780
00:40:39,789 --> 00:40:46,269
here just before the world in the

781
00:40:43,329 --> 00:40:49,079
password ok we have knobs and we just

782
00:40:46,269 --> 00:40:49,078
wait

783
00:40:50,609 --> 00:40:56,038
oops it's not this one is the copy

784
00:41:01,080 --> 00:41:07,960
password okay whatever so that's it

785
00:41:06,400 --> 00:41:09,700
we'll come back to this example

786
00:41:07,960 --> 00:41:12,430
afterwards to see another demo on

787
00:41:09,700 --> 00:41:13,180
another different approach but that's

788
00:41:12,430 --> 00:41:15,460
basically it

789
00:41:13,180 --> 00:41:17,529
and again let's say I don't really

790
00:41:15,460 --> 00:41:20,140
remember how to write hex decimal and

791
00:41:17,530 --> 00:41:24,520
hexadecimal value so I know that right

792
00:41:20,140 --> 00:41:27,190
is W so W question mark ah all right

793
00:41:24,520 --> 00:41:29,230
okay here we have right hexadecimal okay

794
00:41:27,190 --> 00:41:31,210
so right exercise now do we have any

795
00:41:29,230 --> 00:41:32,980
more options yes we have more options so

796
00:41:31,210 --> 00:41:35,170
we write hex pers and seek at the end

797
00:41:32,980 --> 00:41:37,839
for example we can write hit X first and

798
00:41:35,170 --> 00:41:39,940
then sync to it or I mean this is the

799
00:41:37,839 --> 00:41:42,790
when you have done this a couple times

800
00:41:39,940 --> 00:41:45,270
usually we remember it but if not just a

801
00:41:42,790 --> 00:41:50,200
pen a question mark and and look for it

802
00:41:45,270 --> 00:41:52,570
it's really really quick to do okay

803
00:41:50,200 --> 00:41:58,770
that's it now we will dig a little bit

804
00:41:52,570 --> 00:41:58,770
on the visual modes and navigation yeah

805
00:42:00,480 --> 00:42:05,230
no not necessarily

806
00:42:02,349 --> 00:42:06,520
of course yeah really good question in

807
00:42:05,230 --> 00:42:08,230
this case was really easy because no

808
00:42:06,520 --> 00:42:13,540
piece everyone knows that is not an idea

809
00:42:08,230 --> 00:42:15,580
but no you can just assemble the the

810
00:42:13,540 --> 00:42:17,410
instruction as it is if you have two

811
00:42:15,580 --> 00:42:20,140
ways one is just the same read which is

812
00:42:17,410 --> 00:42:22,180
using the the the assembler and is a

813
00:42:20,140 --> 00:42:24,368
symbol library inside you can do it both

814
00:42:22,180 --> 00:42:27,490
with standalone utility which is resum

815
00:42:24,369 --> 00:42:30,310
to or with inside rar - you have another

816
00:42:27,490 --> 00:42:32,379
another option which is the right

817
00:42:30,310 --> 00:42:37,509
assembly and sub comment and you can

818
00:42:32,380 --> 00:42:39,369
directly write the instruction and other

819
00:42:37,510 --> 00:42:41,859
way is there is some advanced with

820
00:42:39,369 --> 00:42:44,230
advanced some visual mode that you can

821
00:42:41,859 --> 00:42:47,680
just for example usually if you want to

822
00:42:44,230 --> 00:42:49,780
change one jump from not equal to equal

823
00:42:47,680 --> 00:42:52,330
or something like that you can just use

824
00:42:49,780 --> 00:42:55,330
the cursor mode cursor mode that maybe I

825
00:42:52,330 --> 00:42:57,369
will yeah I will use it a little bit at

826
00:42:55,330 --> 00:42:59,890
the end on the last demo that you can

827
00:42:57,369 --> 00:43:01,390
basically place to a specific byte and

828
00:42:59,890 --> 00:43:02,650
just increment decrement and usually

829
00:43:01,390 --> 00:43:04,359
wait for example when you're not jump

830
00:43:02,650 --> 00:43:06,220
instruction just incrementing and

831
00:43:04,359 --> 00:43:08,080
decrementing the bite of the hexadecimal

832
00:43:06,220 --> 00:43:09,459
you just are changing their values but

833
00:43:08,080 --> 00:43:12,460
yeah of course not you don't really need

834
00:43:09,460 --> 00:43:14,380
to know all the hex values but if you if

835
00:43:12,460 --> 00:43:20,770
you would you can make it with the

836
00:43:14,380 --> 00:43:23,590
December yeah so the visual modes

837
00:43:20,770 --> 00:43:26,290
okay the all this shell is cool but we

838
00:43:23,590 --> 00:43:28,450
want more interaction we have more

839
00:43:26,290 --> 00:43:30,490
interaction we have the basic visual

840
00:43:28,450 --> 00:43:33,299
mode which is just with the big comment

841
00:43:30,490 --> 00:43:38,250
we can run into it I will open a file

842
00:43:33,300 --> 00:43:38,250
otherwise it would be just nothing for

843
00:43:39,840 --> 00:43:46,870
example with the beep we have here the

844
00:43:44,560 --> 00:43:49,500
hexadecimal representation here we can

845
00:43:46,870 --> 00:43:57,940
use the scroll I'm scrolling right now

846
00:43:49,500 --> 00:44:00,460
we can just move right yes and with P we

847
00:43:57,940 --> 00:44:03,100
can rotate the print mode that is here

848
00:44:00,460 --> 00:44:05,350
we have in hex representation here we

849
00:44:03,100 --> 00:44:07,750
are in this assembly we have in December

850
00:44:05,350 --> 00:44:09,940
E and if we were debugging or emulating

851
00:44:07,750 --> 00:44:12,790
we we would be seeing the registers

852
00:44:09,940 --> 00:44:17,670
values and so then this is another

853
00:44:12,790 --> 00:44:23,350
representation because its enthalpy and

854
00:44:17,670 --> 00:44:27,880
more representation of strings and come

855
00:44:23,350 --> 00:44:30,940
back this basic piece well note I won't

856
00:44:27,880 --> 00:44:33,670
really waste more time into it because I

857
00:44:30,940 --> 00:44:35,590
mean it's interesting but it's not the

858
00:44:33,670 --> 00:44:37,900
point to seeing all the options of the

859
00:44:35,590 --> 00:44:40,570
visual mode but two interesting things

860
00:44:37,900 --> 00:44:43,120
that you can just throw a question mark

861
00:44:40,570 --> 00:44:45,400
and you have the help the visual mode

862
00:44:43,120 --> 00:44:47,080
help so you can have all the other

863
00:44:45,400 --> 00:44:49,990
things that you can do inside the visual

864
00:44:47,080 --> 00:44:52,810
mode you have Hugh explain so you can

865
00:44:49,990 --> 00:44:56,109
just navigate through it and another

866
00:44:52,810 --> 00:44:58,360
thing is that if you want to run and are

867
00:44:56,110 --> 00:45:02,020
to comment while visual mode you have to

868
00:44:58,360 --> 00:45:04,990
just depend : it's like v we are used to

869
00:45:02,020 --> 00:45:09,370
using V I am NOT but I am used to use

870
00:45:04,990 --> 00:45:11,770
rather so it's small at the same you can

871
00:45:09,370 --> 00:45:13,180
just run ranked on for example if you

872
00:45:11,770 --> 00:45:15,160
want to analyze the functions you're

873
00:45:13,180 --> 00:45:17,169
here want analyze the functions ok and

874
00:45:15,160 --> 00:45:19,600
I'm going to the disassembly for example

875
00:45:17,170 --> 00:45:21,970
and now I want to list the functions

876
00:45:19,600 --> 00:45:23,920
so just colon and then the command and

877
00:45:21,970 --> 00:45:27,730
you will see down there with an with a

878
00:45:23,920 --> 00:45:29,890
return you come back to the visual mode

879
00:45:27,730 --> 00:45:31,900
then there is the graph B which is

880
00:45:29,890 --> 00:45:35,290
really cool for all reverse engineers

881
00:45:31,900 --> 00:45:37,150
and really useful for following the

882
00:45:35,290 --> 00:45:39,880
flaws of the function what's going on in

883
00:45:37,150 --> 00:45:42,880
there what are the branches switches if

884
00:45:39,880 --> 00:45:46,690
else closes loops it's only visual way

885
00:45:42,880 --> 00:45:48,790
to do this for it to work I mean to work

886
00:45:46,690 --> 00:45:51,460
to show something you have to be seeked

887
00:45:48,790 --> 00:45:53,170
to a function or apply it to an offset

888
00:45:51,460 --> 00:45:54,970
function with the temporary sig we have

889
00:45:53,170 --> 00:45:58,809
seen and you can move it with the

890
00:45:54,970 --> 00:46:00,609
old-style AGPL or also with arrows and

891
00:45:58,809 --> 00:46:03,700
you can zoom in and zoom out with plus

892
00:46:00,609 --> 00:46:05,500
and minus has more options of course but

893
00:46:03,700 --> 00:46:07,509
those are the basic ones for navigation

894
00:46:05,500 --> 00:46:09,640
and again you can just append a question

895
00:46:07,510 --> 00:46:14,400
mark and see what are the all the

896
00:46:09,640 --> 00:46:19,509
options so let's see how it looks like

897
00:46:14,400 --> 00:46:24,099
for example let's see cut main and here

898
00:46:19,510 --> 00:46:25,869
we are these are really poor rap because

899
00:46:24,099 --> 00:46:34,540
it's so simple so I will open for

900
00:46:25,869 --> 00:46:37,240
example being a less about 10 LS we

901
00:46:34,540 --> 00:46:41,529
analyze it secant main see the graph

902
00:46:37,240 --> 00:46:45,009
function okay you can follow it for

903
00:46:41,530 --> 00:46:48,250
example you have all these ogod eoa be

904
00:46:45,010 --> 00:46:50,339
there here you can just follow the paths

905
00:46:48,250 --> 00:46:57,660
with those shortcuts you can make it

906
00:46:50,339 --> 00:47:03,009
just smaller bigger whatever you need

907
00:46:57,660 --> 00:47:06,578
you can also rotate mode here it is kind

908
00:47:03,010 --> 00:47:08,920
of cool and of course you got with the

909
00:47:06,579 --> 00:47:11,170
question mark I just pick the question

910
00:47:08,920 --> 00:47:16,119
mark you have all the options with grab

911
00:47:11,170 --> 00:47:18,220
use so you can play with it and then

912
00:47:16,119 --> 00:47:21,099
there is another one which I'm in love

913
00:47:18,220 --> 00:47:24,009
with which is visual panels and they are

914
00:47:21,099 --> 00:47:29,250
extremely useful when doing some kind of

915
00:47:24,010 --> 00:47:33,130
debugging or some parallel things and

916
00:47:29,250 --> 00:47:34,990
they're basically a panel terminal to

917
00:47:33,130 --> 00:47:37,030
the panel terminal with different views

918
00:47:34,990 --> 00:47:39,819
you have this assembly here the stack

919
00:47:37,030 --> 00:47:41,660
here the registers they're usually the

920
00:47:39,819 --> 00:47:45,079
default panels that it's

921
00:47:41,660 --> 00:47:47,210
it's troves are the good ones let's say

922
00:47:45,079 --> 00:47:48,950
that way those are there if you are

923
00:47:47,210 --> 00:47:50,750
debugging it will show one panel is a

924
00:47:48,950 --> 00:47:53,509
building and other stuff it will show

925
00:47:50,750 --> 00:47:55,220
another one slightly different but you

926
00:47:53,509 --> 00:47:57,700
can of course customize the view panels

927
00:47:55,220 --> 00:48:01,098
and add your own and move them around

928
00:47:57,700 --> 00:48:05,618
whatever you like it oops it looks

929
00:48:01,099 --> 00:48:05,619
something like this let's see

930
00:48:07,480 --> 00:48:14,839
yep have the disassembly now you you see

931
00:48:12,829 --> 00:48:17,450
it good because I have a lot of zoom for

932
00:48:14,839 --> 00:48:20,900
you to view but on a regular computer or

933
00:48:17,450 --> 00:48:22,549
addition bigger screen so you have here

934
00:48:20,900 --> 00:48:25,579
you can with tab you can just move it

935
00:48:22,549 --> 00:48:28,009
this is a really decompile the

936
00:48:25,579 --> 00:48:30,349
compilation this which is this like a

937
00:48:28,009 --> 00:48:32,960
toy the compiler this is not anything

938
00:48:30,349 --> 00:48:35,269
fancy it's just getting a quick

939
00:48:32,960 --> 00:48:37,250
translation there afterwards we will

940
00:48:35,269 --> 00:48:38,720
talk about the compilation and so and

941
00:48:37,250 --> 00:48:40,460
you have for example you define terms

942
00:48:38,720 --> 00:48:42,529
listed on the same balls and if you were

943
00:48:40,460 --> 00:48:44,750
for example the debugging for example

944
00:48:42,529 --> 00:48:46,549
you could cut the stack and you have

945
00:48:44,750 --> 00:48:48,559
some panel for a stack telescoping which

946
00:48:46,549 --> 00:48:50,720
is getting the references and the values

947
00:48:48,559 --> 00:48:55,940
and other for the registers that's quite

948
00:48:50,720 --> 00:48:58,730
useful okay so again you can just with

949
00:48:55,940 --> 00:49:00,589
its with V exclamation mark and just a

950
00:48:58,730 --> 00:49:02,109
pen a question mark and you're good to

951
00:49:00,589 --> 00:49:05,420
go

952
00:49:02,109 --> 00:49:13,180
let's go straight to a configuration and

953
00:49:05,420 --> 00:49:13,180
customization of order 2 and that's it

954
00:49:13,599 --> 00:49:19,490
basically use the e comment and it's up

955
00:49:16,789 --> 00:49:21,349
comments to tune rather to the e stands

956
00:49:19,490 --> 00:49:23,868
for the available configuration

957
00:49:21,349 --> 00:49:25,970
variables there are ton of different

958
00:49:23,869 --> 00:49:28,880
valuable variables configuration

959
00:49:25,970 --> 00:49:33,200
variables that can be tuned to your

960
00:49:28,880 --> 00:49:36,380
needs or your preferences to use it

961
00:49:33,200 --> 00:49:39,500
within a brother to if you just throw an

962
00:49:36,380 --> 00:49:41,329
A it will show all the configuration

963
00:49:39,500 --> 00:49:45,049
variables and you will say holy

964
00:49:41,329 --> 00:49:49,609
what the yeah but there are better

965
00:49:45,049 --> 00:49:51,619
ways to look for it and and see what's

966
00:49:49,609 --> 00:49:55,140
going on if we append to question marks

967
00:49:51,619 --> 00:49:57,000
we will see the descriptions of them but

968
00:49:55,140 --> 00:49:58,710
course first thing you know okay we can

969
00:49:57,000 --> 00:50:00,570
grip because we have internal grab for

970
00:49:58,710 --> 00:50:02,610
example let's look for something that

971
00:50:00,570 --> 00:50:04,530
has to do with bite so you have the

972
00:50:02,610 --> 00:50:07,350
options that have to do it by some their

973
00:50:04,530 --> 00:50:10,260
descriptions and these are one of the

974
00:50:07,350 --> 00:50:13,460
ways of looking for that there are more

975
00:50:10,260 --> 00:50:16,620
and I will show you my preferred one

976
00:50:13,460 --> 00:50:21,330
yeah look for them with internal grip we

977
00:50:16,620 --> 00:50:23,700
can list the possible variables with we

978
00:50:21,330 --> 00:50:25,890
just make either configuration variable

979
00:50:23,700 --> 00:50:28,020
equals the question mark if it has a

980
00:50:25,890 --> 00:50:32,220
predefined set of values that it can

981
00:50:28,020 --> 00:50:38,400
take it will gives us those I guess for

982
00:50:32,220 --> 00:50:41,009
example he has an architecture it gives

983
00:50:38,400 --> 00:50:45,180
us which parka texture can be defined

984
00:50:41,010 --> 00:50:47,160
here's variable that's an example and a

985
00:50:45,180 --> 00:50:50,190
lot of them are just binary values to a

986
00:50:47,160 --> 00:50:55,020
fault and we can set a new value just

987
00:50:50,190 --> 00:50:58,230
sin a sig signature what is s it have it

988
00:50:55,020 --> 00:51:02,220
here yeah but I will go now

989
00:50:58,230 --> 00:51:03,660
I will advance it the best way for me to

990
00:51:02,220 --> 00:51:06,149
explore all the configuration is with

991
00:51:03,660 --> 00:51:11,310
the visual mode because if we just if we

992
00:51:06,150 --> 00:51:13,830
just throw ve or if we're in visual mode

993
00:51:11,310 --> 00:51:17,160
and press key we can explore all the

994
00:51:13,830 --> 00:51:18,779
configuration variables structured so

995
00:51:17,160 --> 00:51:25,350
for example we are interested in their I

996
00:51:18,780 --> 00:51:27,630
don't know graph so just throw an arrow

997
00:51:25,350 --> 00:51:29,370
we can see all the values on their

998
00:51:27,630 --> 00:51:31,290
descriptions or we can add it navigate

999
00:51:29,370 --> 00:51:34,830
to it and we can even change them for

1000
00:51:31,290 --> 00:51:39,870
example grab line mode we can define any

1001
00:51:34,830 --> 00:51:42,650
value and if it's other for example a

1002
00:51:39,870 --> 00:51:43,950
boolean value we can change it directly

1003
00:51:42,650 --> 00:51:45,570
that's it

1004
00:51:43,950 --> 00:51:47,759
these are nice way to explore the

1005
00:51:45,570 --> 00:51:50,820
configuration BIOS but I said don't be

1006
00:51:47,760 --> 00:51:53,250
overwhelmed with that usually the

1007
00:51:50,820 --> 00:51:56,040
configuration variables that you would

1008
00:51:53,250 --> 00:51:58,080
need for a particular binary at loaded

1009
00:51:56,040 --> 00:51:59,640
by default because the before the binary

1010
00:51:58,080 --> 00:52:01,950
format the architecture are out to

1011
00:51:59,640 --> 00:52:03,660
detect it and automatically put in the

1012
00:52:01,950 --> 00:52:05,839
configuration variables it's more like

1013
00:52:03,660 --> 00:52:08,730
okay I want the block size for my

1014
00:52:05,840 --> 00:52:12,119
disassembly printing to be off I don't

1015
00:52:08,730 --> 00:52:16,260
32 bytes instead of 256 so that kind of

1016
00:52:12,119 --> 00:52:18,630
stuff but most of the like hardcore

1017
00:52:16,260 --> 00:52:20,220
configuration variables will be detected

1018
00:52:18,630 --> 00:52:21,480
by default and you won't have any

1019
00:52:20,220 --> 00:52:24,089
problems I'll still there in case you

1020
00:52:21,480 --> 00:52:26,400
want to force it because I don't know

1021
00:52:24,089 --> 00:52:27,869
polymorph malware or whatever you want

1022
00:52:26,400 --> 00:52:30,630
to explore it with viewing with

1023
00:52:27,869 --> 00:52:34,410
different architecture or something you

1024
00:52:30,630 --> 00:52:36,540
can have it but you won't be messing

1025
00:52:34,410 --> 00:52:39,598
with configuration variables most of the

1026
00:52:36,540 --> 00:52:42,240
time just very little and what's cool

1027
00:52:39,599 --> 00:52:44,250
I'll cool thing that I don't have

1028
00:52:42,240 --> 00:52:46,979
mentioned but I guess it's it's

1029
00:52:44,250 --> 00:52:49,710
important to mention at least funny with

1030
00:52:46,980 --> 00:52:51,990
AC is the colors is all the

1031
00:52:49,710 --> 00:52:54,240
configuration or color mapping we have

1032
00:52:51,990 --> 00:52:56,790
predefined themes my case I have

1033
00:52:54,240 --> 00:53:00,930
selected the doctor but I don't know

1034
00:52:56,790 --> 00:53:04,320
whatever and you can just have another

1035
00:53:00,930 --> 00:53:09,379
color map and if you press ECR it will

1036
00:53:04,320 --> 00:53:09,380
give you a fancy random color map so

1037
00:53:09,770 --> 00:53:14,369
which is more interesting is that in

1038
00:53:12,030 --> 00:53:20,130
visual mode you don't have to do it

1039
00:53:14,369 --> 00:53:26,880
every time you just capital R and that's

1040
00:53:20,130 --> 00:53:28,500
it and here if you want to have some

1041
00:53:26,880 --> 00:53:30,630
configuration variables loaded by

1042
00:53:28,500 --> 00:53:35,069
default on its session for example the

1043
00:53:30,630 --> 00:53:37,740
color mapping or I would show you mines

1044
00:53:35,069 --> 00:53:41,160
in a moment you just create our two RC

1045
00:53:37,740 --> 00:53:43,020
file hidden file in the home folder and

1046
00:53:41,160 --> 00:53:57,629
it will be loaded by default I can show

1047
00:53:43,020 --> 00:53:58,800
you mine this is just ecommons for

1048
00:53:57,630 --> 00:54:01,290
configuration variable that will be

1049
00:53:58,800 --> 00:54:02,790
loaded by default I am gonna discuss

1050
00:54:01,290 --> 00:54:05,339
them a little bit the first one is just

1051
00:54:02,790 --> 00:54:09,050
setting the color scheme and the other

1052
00:54:05,339 --> 00:54:11,220
ones I will talk here those are the

1053
00:54:09,050 --> 00:54:13,920
probably the useful configuration

1054
00:54:11,220 --> 00:54:19,200
variables for almost everyone first one

1055
00:54:13,920 --> 00:54:20,700
is CFC CR R EDF put the true that's good

1056
00:54:19,200 --> 00:54:22,529
because most of computers I will be

1057
00:54:20,700 --> 00:54:25,140
using nowadays support you T

1058
00:54:22,530 --> 00:54:26,760
characters and terminals and you will

1059
00:54:25,140 --> 00:54:31,230
see the difference you will see why it

1060
00:54:26,760 --> 00:54:34,290
is important if I just run it this way

1061
00:54:31,230 --> 00:54:36,570
remember the minus capital n flag is 2

1062
00:54:34,290 --> 00:54:38,940
don't load any custom setting so it will

1063
00:54:36,570 --> 00:54:41,760
it will ignore my my custom settings

1064
00:54:38,940 --> 00:54:46,800
file ok this is the the color map is

1065
00:54:41,760 --> 00:54:52,140
well it's kind of old school but ok but

1066
00:54:46,800 --> 00:55:01,560
look at the arrows please or with grab

1067
00:54:52,140 --> 00:55:10,830
videos look at the boxes and the arrows

1068
00:55:01,560 --> 00:55:11,299
so just a hearty go and you're good to

1069
00:55:10,830 --> 00:55:15,180
go

1070
00:55:11,300 --> 00:55:18,360
that's way cooler and it's even cooler

1071
00:55:15,180 --> 00:55:23,490
if you enable the curvy corners it's

1072
00:55:18,360 --> 00:55:25,980
just a tiny thing but it looks way

1073
00:55:23,490 --> 00:55:31,129
better those corners that are really

1074
00:55:25,980 --> 00:55:31,130
really strict you can make them Coria

1075
00:55:34,880 --> 00:55:45,510
here we go so does that really mean non

1076
00:55:42,510 --> 00:55:48,420
functionality related configuration but

1077
00:55:45,510 --> 00:55:52,830
at the dark cool to have and your eyes

1078
00:55:48,420 --> 00:55:56,790
will would thank you then there are well

1079
00:55:52,830 --> 00:55:59,370
one more I will show ok they I will go

1080
00:55:56,790 --> 00:56:00,810
to the asmu case that is right there

1081
00:55:59,370 --> 00:56:03,660
which is basically showing the

1082
00:56:00,810 --> 00:56:06,090
disassembly in upper case if you are

1083
00:56:03,660 --> 00:56:08,730
more like all school stuff and you want

1084
00:56:06,090 --> 00:56:11,960
to show it is assembly in upper case

1085
00:56:08,730 --> 00:56:17,430
it's as easy as that

1086
00:56:11,960 --> 00:56:19,680
that's then the show up code description

1087
00:56:17,430 --> 00:56:22,560
and enable see the syntax that's really

1088
00:56:19,680 --> 00:56:25,140
really really cool especially for people

1089
00:56:22,560 --> 00:56:27,120
getting into interest to reverse

1090
00:56:25,140 --> 00:56:30,509
engineering or even for reverse

1091
00:56:27,120 --> 00:56:32,759
engineers that with experience but they

1092
00:56:30,510 --> 00:56:34,560
are faced with a new architecture or a

1093
00:56:32,760 --> 00:56:36,050
new system they don't really know how

1094
00:56:34,560 --> 00:56:38,330
how it works

1095
00:56:36,050 --> 00:56:40,310
the first one is it will just a pen a

1096
00:56:38,330 --> 00:56:42,350
comment after each instruction saying

1097
00:56:40,310 --> 00:56:45,920
what is this doing it's just the

1098
00:56:42,350 --> 00:56:48,259
description we can see this for example

1099
00:56:45,920 --> 00:56:51,830
this is their I will have to put it a

1100
00:56:48,260 --> 00:56:54,380
little bit smaller titled I won't expect

1101
00:56:51,830 --> 00:57:00,980
you to read what it says just to see

1102
00:56:54,380 --> 00:57:05,920
what it happens here's described I just

1103
00:57:00,980 --> 00:57:10,310
throw the easm described equals true and

1104
00:57:05,920 --> 00:57:11,780
now you see all the red things I think I

1105
00:57:10,310 --> 00:57:15,400
can make it a little bit

1106
00:57:11,780 --> 00:57:19,190
it's just describing what's happening

1107
00:57:15,400 --> 00:57:20,690
okay like it's very very basic but if

1108
00:57:19,190 --> 00:57:23,420
you are in one instruction set you don't

1109
00:57:20,690 --> 00:57:25,910
know it's a cool way to learn some new

1110
00:57:23,420 --> 00:57:28,430
assembly instead of getting to the

1111
00:57:25,910 --> 00:57:30,890
manuals so of course you have to go to

1112
00:57:28,430 --> 00:57:32,960
the my notes for in-depth but for a

1113
00:57:30,890 --> 00:57:35,359
quick look and just understanding what's

1114
00:57:32,960 --> 00:57:38,980
going on it's quite useful and even if

1115
00:57:35,360 --> 00:57:42,170
you don't really like that assembly like

1116
00:57:38,980 --> 00:57:45,830
assembly way of doing things you can do

1117
00:57:42,170 --> 00:57:48,980
a whole thing let's let me reactivate

1118
00:57:45,830 --> 00:57:51,860
that which is a SM pseudo which will

1119
00:57:48,980 --> 00:57:53,630
make up pseudo syntax more

1120
00:57:51,860 --> 00:57:56,360
human-friendly or high clever friendly

1121
00:57:53,630 --> 00:58:02,360
and basically it will show that instead

1122
00:57:56,360 --> 00:58:05,060
of assembly look at this with eaves and

1123
00:58:02,360 --> 00:58:06,740
variables equals to ax minus three and

1124
00:58:05,060 --> 00:58:10,730
is not the composition at all it's just

1125
00:58:06,740 --> 00:58:13,430
making one-to-one translation between

1126
00:58:10,730 --> 00:58:16,130
the assembly and the on some other

1127
00:58:13,430 --> 00:58:19,160
syntax like that people coming from high

1128
00:58:16,130 --> 00:58:22,550
hiked languages will appreciate if they

1129
00:58:19,160 --> 00:58:24,470
are getting introduced to that okay and

1130
00:58:22,550 --> 00:58:27,320
then there is that other trick that I

1131
00:58:24,470 --> 00:58:32,180
mentioned you before which is the one of

1132
00:58:27,320 --> 00:58:36,200
of the i/o cache we did this lets us to

1133
00:58:32,180 --> 00:58:38,500
write into the binary that is loaded

1134
00:58:36,200 --> 00:58:41,540
into the memory but with without

1135
00:58:38,500 --> 00:58:45,290
modifying the actual file that is in the

1136
00:58:41,540 --> 00:58:48,080
hard disk that's quite useful in case we

1137
00:58:45,290 --> 00:58:49,670
want to play with some binary with some

1138
00:58:48,080 --> 00:58:51,890
crack name with whatever we want to

1139
00:58:49,670 --> 00:58:54,140
see okay I want to change that see what

1140
00:58:51,890 --> 00:58:58,520
it's happening but you don't want to

1141
00:58:54,140 --> 00:59:00,828
store that or modify the the of you just

1142
00:58:58,520 --> 00:59:02,750
have been to our session on reversing

1143
00:59:00,829 --> 00:59:05,630
something and you missed off it

1144
00:59:02,750 --> 00:59:08,690
don't have the day I have I'm not on a

1145
00:59:05,630 --> 00:59:11,510
copy of the file I just don't want to do

1146
00:59:08,690 --> 00:59:14,180
this again so you can enable i/o cache

1147
00:59:11,510 --> 00:59:16,970
and it's basically it makes a cache and

1148
00:59:14,180 --> 00:59:19,308
you can overwrite it won't say it will

1149
00:59:16,970 --> 00:59:21,348
permit it to you for example write

1150
00:59:19,309 --> 00:59:22,910
something on a file that you have not

1151
00:59:21,349 --> 00:59:25,849
opened with fright mode it will say you

1152
00:59:22,910 --> 00:59:28,490
can right here okay but if you enable

1153
00:59:25,849 --> 00:59:31,040
the cache it will act normally it's just

1154
00:59:28,490 --> 00:59:32,689
the the filing disk won't be modified

1155
00:59:31,040 --> 00:59:34,670
just the fact that is loaded into memory

1156
00:59:32,690 --> 00:59:38,150
you can work with it and when you are

1157
00:59:34,670 --> 00:59:40,190
out of the session that's it and we will

1158
00:59:38,150 --> 00:59:50,150
use it afterwards in a in a daemon

1159
00:59:40,190 --> 00:59:55,160
emulation okay seeing that okay I guess

1160
00:59:50,150 --> 00:59:58,579
that's it yeah let's go straight to code

1161
00:59:55,160 --> 01:00:02,839
emulation this is one I guess the the

1162
00:59:58,579 --> 01:00:05,450
longest point on the outline mainly

1163
01:00:02,839 --> 01:00:07,130
because two reasons one is I don't know

1164
01:00:05,450 --> 01:00:08,419
why people is not using emulation and

1165
01:00:07,130 --> 01:00:10,670
particularly not using emulation in

1166
01:00:08,420 --> 01:00:12,859
ruther and it's really useful and second

1167
01:00:10,670 --> 01:00:16,160
I had to give a talk like ten days ago

1168
01:00:12,859 --> 01:00:22,490
about emulation with easel so I just had

1169
01:00:16,160 --> 01:00:26,240
to make it anyway so I just get I stole

1170
01:00:22,490 --> 01:00:29,990
my own my own content so it's not

1171
01:00:26,240 --> 01:00:33,200
stealing and we will go through it and

1172
01:00:29,990 --> 01:00:35,779
it's what is emulation basically in case

1173
01:00:33,200 --> 01:00:38,270
someone is doesn't really know what

1174
01:00:35,780 --> 01:00:41,359
emulation is about is just similarly in

1175
01:00:38,270 --> 01:00:44,569
the execution of code of you know CPU of

1176
01:00:41,359 --> 01:00:46,578
the same cpu architecture or another CPU

1177
01:00:44,569 --> 01:00:49,308
architecture that's that's the point of

1178
01:00:46,579 --> 01:00:51,290
emulation that we can simulate executing

1179
01:00:49,309 --> 01:00:53,200
code that does not belong to the

1180
01:00:51,290 --> 01:00:55,549
architecture of our machine

1181
01:00:53,200 --> 01:00:58,189
yes that's basically what you do when

1182
01:00:55,549 --> 01:01:01,130
you run games from old or not that all

1183
01:00:58,190 --> 01:01:03,380
consoles all that kind of stuff is

1184
01:01:01,130 --> 01:01:06,860
basically full emulation

1185
01:01:03,380 --> 01:01:09,300
you're running and you're emulating

1186
01:01:06,860 --> 01:01:12,240
you're simulating the diffusion of code

1187
01:01:09,300 --> 01:01:15,600
that is not meant to be running the

1188
01:01:12,240 --> 01:01:19,379
inner architecture but the kind of rptr

1189
01:01:15,600 --> 01:01:23,970
emulation we are dealing today is not

1190
01:01:19,380 --> 01:01:27,540
the emulation seen as a part of running

1191
01:01:23,970 --> 01:01:30,000
games or all software is more a way is

1192
01:01:27,540 --> 01:01:32,279
an assistant for code analysis and

1193
01:01:30,000 --> 01:01:34,260
reverse engineer in particular we're

1194
01:01:32,280 --> 01:01:37,190
interested in it because it lets us to

1195
01:01:34,260 --> 01:01:39,690
understand specific snippet of codes of

1196
01:01:37,190 --> 01:01:44,420
binary from architecture or another

1197
01:01:39,690 --> 01:01:48,320
architecture doesn't matter and it's

1198
01:01:44,420 --> 01:01:50,760
quite useful as well because let's say

1199
01:01:48,320 --> 01:01:53,880
you are hiding some kind of weird

1200
01:01:50,760 --> 01:01:59,280
malware and you don't want to be pawned

1201
01:01:53,880 --> 01:02:02,280
so you can do this you can emulate some

1202
01:01:59,280 --> 01:02:03,750
parts of the code that is not the whole

1203
01:02:02,280 --> 01:02:05,880
binary just I'm interested in that

1204
01:02:03,750 --> 01:02:08,610
section that it looks like is some

1205
01:02:05,880 --> 01:02:10,920
routine Ford encrypting CUDA code or

1206
01:02:08,610 --> 01:02:13,290
it's some routine for whatever so you

1207
01:02:10,920 --> 01:02:14,460
can just take that snippet of code and

1208
01:02:13,290 --> 01:02:16,580
see what's going on there

1209
01:02:14,460 --> 01:02:21,060
and of course you are not running it

1210
01:02:16,580 --> 01:02:23,310
because yeah everyone uses butyl

1211
01:02:21,060 --> 01:02:25,799
machines all the time and all that kind

1212
01:02:23,310 --> 01:02:28,650
of stuff but I won't discover you that

1213
01:02:25,800 --> 01:02:30,750
they are exploits for scaping butyl

1214
01:02:28,650 --> 01:02:33,750
machines are all that and I mean of

1215
01:02:30,750 --> 01:02:36,720
course use virtual machines your son

1216
01:02:33,750 --> 01:02:39,180
boxing but if you are truly trading with

1217
01:02:36,720 --> 01:02:41,180
something really really delicate before

1218
01:02:39,180 --> 01:02:43,200
going to debugging or trying to

1219
01:02:41,180 --> 01:02:44,609
executing something unless you have a

1220
01:02:43,200 --> 01:02:46,680
dedicated machines then you're good to

1221
01:02:44,610 --> 01:02:48,030
go it just up you just don't

1222
01:02:46,680 --> 01:02:50,609
everything and install it again that's

1223
01:02:48,030 --> 01:02:50,880
fine but if you even if it's not your

1224
01:02:50,610 --> 01:02:55,680
case

1225
01:02:50,880 --> 01:02:59,250
so emulation is a really good friend for

1226
01:02:55,680 --> 01:03:02,040
you then of course it helps on debugging

1227
01:02:59,250 --> 01:03:04,770
and on code analysis you see with when

1228
01:03:02,040 --> 01:03:07,410
we are doing analysis with four ace and

1229
01:03:04,770 --> 01:03:10,680
I guess it with three as well in there

1230
01:03:07,410 --> 01:03:13,859
are two it's using some emulation for

1231
01:03:10,680 --> 01:03:16,259
branch prediction on functions and to

1232
01:03:13,860 --> 01:03:16,440
reconstruct some of the paths it's kind

1233
01:03:16,260 --> 01:03:18,300
of

1234
01:03:16,440 --> 01:03:21,630
tricky I don't really understand how

1235
01:03:18,300 --> 01:03:25,680
it's done but I mean I have not coated

1236
01:03:21,630 --> 01:03:27,870
it of course and I'm not into that part

1237
01:03:25,680 --> 01:03:30,990
development but it's using some kind of

1238
01:03:27,870 --> 01:03:33,120
emulation just for analysis to see okay

1239
01:03:30,990 --> 01:03:34,979
what's going on here with that function

1240
01:03:33,120 --> 01:03:38,060
that in and which information can we

1241
01:03:34,980 --> 01:03:42,480
extract from that just from looking at

1242
01:03:38,060 --> 01:03:44,310
particular snippet of code and of course

1243
01:03:42,480 --> 01:03:47,490
if you want to explore some non-native

1244
01:03:44,310 --> 01:03:50,880
executables we have to do something I

1245
01:03:47,490 --> 01:03:55,470
mean if you are if you want to explore

1246
01:03:50,880 --> 01:03:59,850
for example up PowerPC or an a RM tiny

1247
01:03:55,470 --> 01:04:02,390
binary that is not I am not saying like

1248
01:03:59,850 --> 01:04:05,279
very huge applications that you need a

1249
01:04:02,390 --> 01:04:06,960
full analysis but just specific things

1250
01:04:05,280 --> 01:04:08,730
you can you can explore it with

1251
01:04:06,960 --> 01:04:12,870
emulation you can see what's going on

1252
01:04:08,730 --> 01:04:14,430
without having to emulate things I debug

1253
01:04:12,870 --> 01:04:20,130
things and of course because you cannot

1254
01:04:14,430 --> 01:04:24,750
debug an architecture which is not the

1255
01:04:20,130 --> 01:04:27,630
computer so one important thing on an

1256
01:04:24,750 --> 01:04:30,990
emulation is the concept of intermediate

1257
01:04:27,630 --> 01:04:33,180
languages and just I want I won't go

1258
01:04:30,990 --> 01:04:35,850
very deep into theory it's just an

1259
01:04:33,180 --> 01:04:38,520
abstract machine that helps in analysis

1260
01:04:35,850 --> 01:04:40,529
of computer programs just as this name

1261
01:04:38,520 --> 01:04:43,470
says is an intermediate language between

1262
01:04:40,530 --> 01:04:46,740
the code and the actual code that is

1263
01:04:43,470 --> 01:04:50,609
written and the assembly that helps us

1264
01:04:46,740 --> 01:04:52,680
in the analysis and it's it comes mainly

1265
01:04:50,610 --> 01:04:56,520
from compiling from the compiling

1266
01:04:52,680 --> 01:04:59,250
process GCC is using an intermediate and

1267
01:04:56,520 --> 01:05:03,590
maybe you will know LLVM which has its

1268
01:04:59,250 --> 01:05:07,920
LLVM intermediate representation and

1269
01:05:03,590 --> 01:05:10,050
mainly they came out for assisting on

1270
01:05:07,920 --> 01:05:13,410
compiling process but are also vital for

1271
01:05:10,050 --> 01:05:15,810
the compilation so the idea for example

1272
01:05:13,410 --> 01:05:17,700
the IDA micro code for the hex race the

1273
01:05:15,810 --> 01:05:21,210
compiler is based on a in or an

1274
01:05:17,700 --> 01:05:23,939
intermediate language and we have our

1275
01:05:21,210 --> 01:05:26,040
own intermittent written in Row 2 which

1276
01:05:23,940 --> 01:05:27,750
is called a shield which means it stands

1277
01:05:26,040 --> 01:05:29,950
for available strings intermediate

1278
01:05:27,750 --> 01:05:32,079
language and

1279
01:05:29,950 --> 01:05:35,379
characteristics are quite simple it's a

1280
01:05:32,079 --> 01:05:37,240
very small set of instructions and the

1281
01:05:35,380 --> 01:05:39,160
syntax is based on reverse polish

1282
01:05:37,240 --> 01:05:40,930
notation which is basically a stack you

1283
01:05:39,160 --> 01:05:42,970
will see in a moment an example which

1284
01:05:40,930 --> 01:05:45,520
usually means that it is not meant to be

1285
01:05:42,970 --> 01:05:49,899
read and understand by a human but more

1286
01:05:45,520 --> 01:05:55,150
to be executed quick on a machine okay

1287
01:05:49,900 --> 01:05:56,980
and one some of the main properties is

1288
01:05:55,150 --> 01:05:58,960
that it has infinite memory and set of

1289
01:05:56,980 --> 01:06:02,079
registers like many others intermediate

1290
01:05:58,960 --> 01:06:02,440
languages at first there is this so

1291
01:06:02,079 --> 01:06:04,359
called

1292
01:06:02,440 --> 01:06:07,089
it has native register Alice's which

1293
01:06:04,359 --> 01:06:11,920
means for example you are emulating an

1294
01:06:07,089 --> 01:06:14,349
AR m AR M code and when you construct a

1295
01:06:11,920 --> 01:06:16,270
virtual machine that will emulate the

1296
01:06:14,349 --> 01:06:19,510
stuff you want to emulate the register

1297
01:06:16,270 --> 01:06:23,560
Alice's will be something like R 1 R 2 R

1298
01:06:19,510 --> 01:06:26,140
3 so it constructs the aliases so kind

1299
01:06:23,560 --> 01:06:29,078
of put you into the into the mood of the

1300
01:06:26,140 --> 01:06:30,578
architecture we are emulating so it's

1301
01:06:29,079 --> 01:06:33,730
not like something like okay I need to

1302
01:06:30,579 --> 01:06:35,530
now understand some other names from

1303
01:06:33,730 --> 01:06:37,630
some other register it they can be

1304
01:06:35,530 --> 01:06:40,089
arbitrary but for common architecture

1305
01:06:37,630 --> 01:06:44,260
they ultimately give you the Alice's

1306
01:06:40,089 --> 01:06:45,819
that you will thank and of course as I

1307
01:06:44,260 --> 01:06:47,050
have said it is space-time as most an

1308
01:06:45,819 --> 01:06:49,170
instruction but if you need custom

1309
01:06:47,050 --> 01:06:52,450
operations to support for some

1310
01:06:49,170 --> 01:06:55,710
architecture even the mainstream ones

1311
01:06:52,450 --> 01:06:58,089
that have very weird or rarely used

1312
01:06:55,710 --> 01:07:02,260
instructions you can just define them

1313
01:06:58,089 --> 01:07:04,240
you can quite easily implement a custom

1314
01:07:02,260 --> 01:07:07,030
operation based on the simple operations

1315
01:07:04,240 --> 01:07:09,669
that has a seal and link it as okay now

1316
01:07:07,030 --> 01:07:12,970
this operation will be described as this

1317
01:07:09,670 --> 01:07:18,400
set of instructions on in so you can use

1318
01:07:12,970 --> 01:07:20,109
that and why ezel ezel first of all we

1319
01:07:18,400 --> 01:07:22,470
needed the Malaysian on our to land is

1320
01:07:20,109 --> 01:07:24,940
basically they are to environment and

1321
01:07:22,470 --> 01:07:27,839
it's really easy to generate to parse

1322
01:07:24,940 --> 01:07:30,280
and modify because as I said it is so

1323
01:07:27,839 --> 01:07:31,779
most mostly the most important thing

1324
01:07:30,280 --> 01:07:34,000
generation and person because it is

1325
01:07:31,780 --> 01:07:37,530
based on reverse polish notation which

1326
01:07:34,000 --> 01:07:42,310
is basically a stack way of thinking and

1327
01:07:37,530 --> 01:07:43,599
also it's quite extensible rather easy I

1328
01:07:42,310 --> 01:07:48,519
would say

1329
01:07:43,599 --> 01:07:49,869
I mean it's not trivial but once you see

1330
01:07:48,519 --> 01:07:51,399
the instruction that you have at what

1331
01:07:49,869 --> 01:07:53,619
you want you're complete it's not really

1332
01:07:51,400 --> 01:07:56,650
difficult to add your custom operations

1333
01:07:53,619 --> 01:08:01,119
or width on top of it and of course why

1334
01:07:56,650 --> 01:08:03,519
not one of the problems that have some

1335
01:08:01,119 --> 01:08:06,789
of the intermediate languages is that

1336
01:08:03,519 --> 01:08:08,859
they are they are built with compiler

1337
01:08:06,789 --> 01:08:11,019
with a compiler band and easily build

1338
01:08:08,859 --> 01:08:14,589
with that the compilation with the

1339
01:08:11,019 --> 01:08:18,849
completion in mind so that's a good a

1340
01:08:14,589 --> 01:08:22,028
good way to see it so I would describe

1341
01:08:18,849 --> 01:08:24,369
UCL as this I would say the parser

1342
01:08:22,029 --> 01:08:27,310
that's running behind this deal if I

1343
01:08:24,368 --> 01:08:30,009
need a stack machine on steroids and I

1344
01:08:27,310 --> 01:08:31,440
will go straight to describe you what is

1345
01:08:30,009 --> 01:08:34,328
a stack machine

1346
01:08:31,439 --> 01:08:36,729
this is theory this theoretical computer

1347
01:08:34,328 --> 01:08:38,380
science which is super cool and I know I

1348
01:08:36,729 --> 01:08:41,108
see your faces that you are really

1349
01:08:38,380 --> 01:08:44,259
interested in how to matter stuff and

1350
01:08:41,109 --> 01:08:46,029
all kind of stuff I won't go into it

1351
01:08:44,259 --> 01:08:47,979
it's just you need to know there is a

1352
01:08:46,029 --> 01:08:50,440
stack and there is a abstracting to

1353
01:08:47,979 --> 01:08:52,479
input tape that has some input symbols

1354
01:08:50,439 --> 01:08:54,129
the current state and a stack symbol and

1355
01:08:52,479 --> 01:08:56,678
then from that it generates its

1356
01:08:54,130 --> 01:08:58,659
transitions to other states and during

1357
01:08:56,679 --> 01:09:00,190
the transition it can manipulate the

1358
01:08:58,658 --> 01:09:02,259
stack which means basically pushing a

1359
01:09:00,189 --> 01:09:05,068
pop making pushes and pops from the

1360
01:09:02,259 --> 01:09:14,920
stack that's the basic idea

1361
01:09:05,069 --> 01:09:17,679
yeah sorry I will show it in a moment

1362
01:09:14,920 --> 01:09:21,190
and we will have a demo just running it

1363
01:09:17,679 --> 01:09:23,380
and yeah here's just the visual

1364
01:09:21,189 --> 01:09:25,089
animation what's what is the rest this

1365
01:09:23,380 --> 01:09:27,909
is reverse polish notation which is

1366
01:09:25,089 --> 01:09:29,859
basically first the operators then the

1367
01:09:27,908 --> 01:09:31,899
operation and it is basically how it

1368
01:09:29,859 --> 01:09:34,719
work in a stack we put the 3 in the

1369
01:09:31,899 --> 01:09:36,698
stack we push the 5 on the stack we do

1370
01:09:34,719 --> 01:09:39,639
it okay this is an operation then let's

1371
01:09:36,698 --> 01:09:46,149
just pop the operands and get an egg Oh

1372
01:09:39,639 --> 01:09:50,589
magic and in Row 2 is quite easy we can

1373
01:09:46,149 --> 01:09:53,408
just now for example it will be just not

1374
01:09:50,589 --> 01:09:54,659
opening anything r2 with two dashes oops

1375
01:09:53,408 --> 01:09:57,160
sorry

1376
01:09:54,659 --> 01:10:01,120
and then

1377
01:09:57,160 --> 01:10:03,010
ayyyy is for emulation all all the

1378
01:10:01,120 --> 01:10:04,360
commands are under a year I will

1379
01:10:03,010 --> 01:10:06,850
describe the basic commands afterward

1380
01:10:04,360 --> 01:10:09,610
but just for you to know II are the

1381
01:10:06,850 --> 01:10:11,590
operation is the shop commands that will

1382
01:10:09,610 --> 01:10:18,490
contain the emulation with diesel part

1383
01:10:11,590 --> 01:10:21,550
and let's do the same sonic ok very very

1384
01:10:18,490 --> 01:10:25,389
basic it just parts of it and gives the

1385
01:10:21,550 --> 01:10:27,160
result back so what's the problem with

1386
01:10:25,390 --> 01:10:28,930
that again more computer Theory don't

1387
01:10:27,160 --> 01:10:32,440
worry about it I don't even understand

1388
01:10:28,930 --> 01:10:34,030
all that but the the main idea we are in

1389
01:10:32,440 --> 01:10:35,950
a pushdown automata which is what I

1390
01:10:34,030 --> 01:10:38,500
describe we have an input tape with

1391
01:10:35,950 --> 01:10:40,000
subsamples we transition to state we

1392
01:10:38,500 --> 01:10:43,960
have a stack we can manipulate during

1393
01:10:40,000 --> 01:10:46,870
the transition and we have to go in to

1394
01:10:43,960 --> 01:10:51,280
go more into a Turing machine what does

1395
01:10:46,870 --> 01:10:54,820
this mean is we want for example with a

1396
01:10:51,280 --> 01:10:56,440
stack machine we cannot access random

1397
01:10:54,820 --> 01:10:58,330
positional memory we are limited to the

1398
01:10:56,440 --> 01:11:00,759
top of the stack and there are some

1399
01:10:58,330 --> 01:11:06,070
things that we cannot do so how can we

1400
01:11:00,760 --> 01:11:09,790
do this and the most of use answer is

1401
01:11:06,070 --> 01:11:12,549
the correct one with asteroids it's also

1402
01:11:09,790 --> 01:11:14,320
known as cheating cheating basically

1403
01:11:12,550 --> 01:11:17,920
means ok let's add our randomized

1404
01:11:14,320 --> 01:11:22,059
operations and let's control let's add

1405
01:11:17,920 --> 01:11:24,250
control operations to easy this is part

1406
01:11:22,060 --> 01:11:27,880
1 and part 2 is ok let's add register

1407
01:11:24,250 --> 01:11:29,680
axis and let's add an extra tape with

1408
01:11:27,880 --> 01:11:31,990
random axis that will be a virtual

1409
01:11:29,680 --> 01:11:34,720
memory that will be stacked for a bit

1410
01:11:31,990 --> 01:11:37,059
cold memory to work with while emulating

1411
01:11:34,720 --> 01:11:39,280
so that the asteroids that are added to

1412
01:11:37,060 --> 01:11:41,230
put on machine give the random access

1413
01:11:39,280 --> 01:11:43,540
operation control flow operations and

1414
01:11:41,230 --> 01:11:45,959
also another tape which is basically as

1415
01:11:43,540 --> 01:11:49,600
a section of the memory that will be

1416
01:11:45,960 --> 01:11:53,230
used for storing all the data we need to

1417
01:11:49,600 --> 01:11:56,440
when emulating and this is another

1418
01:11:53,230 --> 01:11:59,320
important slide as I said the adoptions

1419
01:11:56,440 --> 01:12:03,009
are under the AE sub Commons which is

1420
01:11:59,320 --> 01:12:06,580
the analysis easel and we have for

1421
01:12:03,010 --> 01:12:10,750
example the eye a eye for n8 I am for

1422
01:12:06,580 --> 01:12:12,850
the memory just point if we na

1423
01:12:10,750 --> 01:12:15,000
initialize the memory automatically we

1424
01:12:12,850 --> 01:12:17,469
have initialized this tag machine so

1425
01:12:15,000 --> 01:12:21,370
usually if we don't want to we don't

1426
01:12:17,469 --> 01:12:23,800
need a memory don't use a have a I am

1427
01:12:21,370 --> 01:12:26,650
but we need to use it we don't really

1428
01:12:23,800 --> 01:12:28,750
need to put first initialize and then

1429
01:12:26,650 --> 01:12:32,019
initialize never hits it's already done

1430
01:12:28,750 --> 01:12:35,230
then an instruction pointer okay we want

1431
01:12:32,020 --> 01:12:39,010
to move the instruction pointer and now

1432
01:12:35,230 --> 01:12:43,449
we have kind of familiar instructions if

1433
01:12:39,010 --> 01:12:46,239
you're you have debug something which is

1434
01:12:43,449 --> 01:12:50,559
barely stepping stepping until an

1435
01:12:46,239 --> 01:12:53,709
abscessed stepping over to skipper -

1436
01:12:50,560 --> 01:12:55,420
don't enter into a function step skip to

1437
01:12:53,710 --> 01:12:58,060
step skipping some of the instruction

1438
01:12:55,420 --> 01:12:59,760
and we can also show the registers the

1439
01:12:58,060 --> 01:13:02,170
step skip for example I want to mention

1440
01:12:59,760 --> 01:13:04,300
with difference between a program step

1441
01:13:02,170 --> 01:13:05,949
over just we are in the function we just

1442
01:13:04,300 --> 01:13:07,960
arrive to a call to a function a step

1443
01:13:05,949 --> 01:13:10,599
over we'll just don't go into that

1444
01:13:07,960 --> 01:13:13,660
function and am a little the stop step

1445
01:13:10,600 --> 01:13:16,390
skip is for example we are emulating

1446
01:13:13,660 --> 01:13:19,690
something and we want to go from the

1447
01:13:16,390 --> 01:13:21,550
offset 0 to offset 10 and at offset 7

1448
01:13:19,690 --> 01:13:24,250
there is some operation that is doing

1449
01:13:21,550 --> 01:13:28,420
something program is computing a highest

1450
01:13:24,250 --> 01:13:30,550
value of whatever and it's not really

1451
01:13:28,420 --> 01:13:32,469
useful in what we are trying to decode

1452
01:13:30,550 --> 01:13:34,510
and it's it doesn't interfere with

1453
01:13:32,469 --> 01:13:37,000
anything we we are we are dealing with

1454
01:13:34,510 --> 01:13:40,180
so we can just skip it okay we I don't

1455
01:13:37,000 --> 01:13:42,699
want to waste three seconds to emulate

1456
01:13:40,180 --> 01:13:48,670
that because I won't use it so that's

1457
01:13:42,699 --> 01:13:51,009
quite useful a step skip part and what

1458
01:13:48,670 --> 01:13:53,770
are the ESL operands so what can we do

1459
01:13:51,010 --> 01:13:58,270
with it and I was thinking of putting

1460
01:13:53,770 --> 01:14:02,020
here giantest giant table but just look

1461
01:13:58,270 --> 01:14:04,390
for the help I will show you you have

1462
01:14:02,020 --> 01:14:07,540
the operands on their descriptions and

1463
01:14:04,390 --> 01:14:11,350
some examples even some examples so

1464
01:14:07,540 --> 01:14:14,019
that's it you don't really need to

1465
01:14:11,350 --> 01:14:16,980
unless you're building something up on

1466
01:14:14,020 --> 01:14:19,810
SO syntax usually don't care about it

1467
01:14:16,980 --> 01:14:21,879
usually you don't care about it but it's

1468
01:14:19,810 --> 01:14:24,130
fun to know and how it works and if you

1469
01:14:21,880 --> 01:14:24,670
need to perform some custom operations

1470
01:14:24,130 --> 01:14:26,770
you

1471
01:14:24,670 --> 01:14:30,100
need to use that for example this one

1472
01:14:26,770 --> 01:14:34,810
the question mark quarterly is is an if

1473
01:14:30,100 --> 01:14:39,160
is the control flow if just as a as an

1474
01:14:34,810 --> 01:14:46,360
example and then we have yeah go to go

1475
01:14:39,160 --> 01:14:48,730
to some breaks we have also initial

1476
01:14:46,360 --> 01:14:51,580
internal variables which are basically

1477
01:14:48,730 --> 01:14:54,370
the flags and they're prefixed with the

1478
01:14:51,580 --> 01:14:57,240
dollar sign and that read only I will

1479
01:14:54,370 --> 01:14:59,740
explain you a bit about the flags and

1480
01:14:57,240 --> 01:15:03,190
why they are like the internal flags and

1481
01:14:59,740 --> 01:15:07,660
why don't we have just some let's say

1482
01:15:03,190 --> 01:15:10,150
register flags like a normal I would say

1483
01:15:07,660 --> 01:15:12,790
normal architecture the point is that

1484
01:15:10,150 --> 01:15:15,969
those flags the internal flags on easel

1485
01:15:12,790 --> 01:15:18,730
are updated every time an attempt you

1486
01:15:15,970 --> 01:15:20,470
operation that easel performs but

1487
01:15:18,730 --> 01:15:22,750
depending on the architecture we're

1488
01:15:20,470 --> 01:15:25,600
emulating not all architecture update

1489
01:15:22,750 --> 01:15:31,600
all the flags in the same kind of

1490
01:15:25,600 --> 01:15:34,030
operations so for example what is really

1491
01:15:31,600 --> 01:15:35,950
really common is we have their flags

1492
01:15:34,030 --> 01:15:39,070
this Flags internal flags that are

1493
01:15:35,950 --> 01:15:42,010
updated at each operation in ISM but the

1494
01:15:39,070 --> 01:15:44,769
operation that that is it's being

1495
01:15:42,010 --> 01:15:48,520
emulated into the in the architect we're

1496
01:15:44,770 --> 01:15:50,680
emulating by definition it doesn't do

1497
01:15:48,520 --> 01:15:52,600
nothing with the flag so we don't do

1498
01:15:50,680 --> 01:15:55,090
anything but if it does then we just

1499
01:15:52,600 --> 01:15:57,100
create the another register because we

1500
01:15:55,090 --> 01:16:00,340
have infinite registers in easel there's

1501
01:15:57,100 --> 01:16:02,320
the definition and we just copy the flag

1502
01:16:00,340 --> 01:16:04,720
we got from the internal variable to the

1503
01:16:02,320 --> 01:16:06,880
register flag we define but the that's a

1504
01:16:04,720 --> 01:16:09,160
common way it's kind of weird but it's

1505
01:16:06,880 --> 01:16:11,140
really useful because as I said not

1506
01:16:09,160 --> 01:16:13,750
architecture update the same flags with

1507
01:16:11,140 --> 01:16:15,520
the same operations and these will the

1508
01:16:13,750 --> 01:16:16,780
internal bars will be updated and every

1509
01:16:15,520 --> 01:16:19,030
operation that they still performs and

1510
01:16:16,780 --> 01:16:21,580
in depending on which operation in which

1511
01:16:19,030 --> 01:16:23,800
a couturier are dealing if they predator

1512
01:16:21,580 --> 01:16:26,860
don't observe or don't at the flags then

1513
01:16:23,800 --> 01:16:33,130
we can just move the values into the

1514
01:16:26,860 --> 01:16:37,750
register so here we will revisit our

1515
01:16:33,130 --> 01:16:38,290
crackme from before and I will say I

1516
01:16:37,750 --> 01:16:41,140
will

1517
01:16:38,290 --> 01:16:43,660
demonstrate why I won I didn't want to

1518
01:16:41,140 --> 01:16:48,100
just go by hand because we are lazy

1519
01:16:43,660 --> 01:16:49,900
sometimes and why you can have why we

1520
01:16:48,100 --> 01:16:52,420
have to compute things that can be

1521
01:16:49,900 --> 01:16:54,160
computed automatically so let's just

1522
01:16:52,420 --> 01:16:55,930
compute it automatically and that means

1523
01:16:54,160 --> 01:17:13,590
basically emulating and that will be a

1524
01:16:55,930 --> 01:17:16,480
very basic demonstration on easy okay

1525
01:17:13,590 --> 01:17:17,590
let's find the correct me to again just

1526
01:17:16,480 --> 01:17:20,440
see I am lying

1527
01:17:17,590 --> 01:17:22,990
and now what we will do is instead of

1528
01:17:20,440 --> 01:17:25,089
patching we will see which is the actual

1529
01:17:22,990 --> 01:17:31,480
value that they will it will accept as a

1530
01:17:25,090 --> 01:17:35,140
valid password we just open it analyze

1531
01:17:31,480 --> 01:17:38,919
it we printed this assembly of the

1532
01:17:35,140 --> 01:17:42,940
function that is set at main and we see

1533
01:17:38,920 --> 01:17:45,070
exactly the same as before and here as I

1534
01:17:42,940 --> 01:17:47,980
said before after this can I have the

1535
01:17:45,070 --> 01:17:49,630
other two values load it into memory and

1536
01:17:47,980 --> 01:17:52,179
then some operations perform and then a

1537
01:17:49,630 --> 01:17:56,470
comparison based on the result of those

1538
01:17:52,180 --> 01:17:59,620
operations so what we will do basically

1539
01:17:56,470 --> 01:18:02,530
I will start my the butyl machine

1540
01:17:59,620 --> 01:18:05,980
official here and this upset

1541
01:18:02,530 --> 01:18:08,500
it was a ok now let's say I'm gonna

1542
01:18:05,980 --> 01:18:12,040
emulate I I'm telling you what I'm gonna

1543
01:18:08,500 --> 01:18:15,400
do I'm gonna emulate this snippet of

1544
01:18:12,040 --> 01:18:17,620
code which means I will simulate that I

1545
01:18:15,400 --> 01:18:20,830
have a program that the only thing that

1546
01:18:17,620 --> 01:18:21,910
does is just this part which is the

1547
01:18:20,830 --> 01:18:26,860
computation that we are actually

1548
01:18:21,910 --> 01:18:35,050
interested in so I will seek here let's

1549
01:18:26,860 --> 01:18:39,630
see here the I know you see it here do

1550
01:18:35,050 --> 01:18:39,630
you see dwell right in the bottom okay

1551
01:18:39,660 --> 01:18:45,700
initialize machine the remember a is was

1552
01:18:42,400 --> 01:18:48,610
for emulation commands and then I am you

1553
01:18:45,700 --> 01:18:50,130
have the initialization of the machine

1554
01:18:48,610 --> 01:18:53,820
okay

1555
01:18:50,130 --> 01:18:57,360
we can see the registers let's let's do

1556
01:18:53,820 --> 01:19:05,519
a birthing all doing well I want to show

1557
01:18:57,360 --> 01:19:08,098
you something okay so now let's see the

1558
01:19:05,520 --> 01:19:11,090
registers okay

1559
01:19:08,099 --> 01:19:13,409
the instruction pointer points to the

1560
01:19:11,090 --> 01:19:18,409
the other we are seeing right now that's

1561
01:19:13,409 --> 01:19:22,500
not important both but when we start the

1562
01:19:18,409 --> 01:19:24,000
machine then the registers see the stack

1563
01:19:22,500 --> 01:19:26,579
pointer and the base pointer they

1564
01:19:24,000 --> 01:19:30,000
changed they curated a stack of memory

1565
01:19:26,579 --> 01:19:32,429
for us add those offsets so now we have

1566
01:19:30,000 --> 01:19:38,150
a stack that can use as a virtual memory

1567
01:19:32,429 --> 01:19:49,320
for the basil basil emulation needs and

1568
01:19:38,150 --> 01:19:51,900
now here we are it's good here which is

1569
01:19:49,320 --> 01:19:54,719
the I guess I will print it the main

1570
01:19:51,900 --> 01:19:56,730
function again we have seeked here this

1571
01:19:54,719 --> 01:19:58,369
is the beginning of the operations and

1572
01:19:56,730 --> 01:20:02,040
we want to emulate until here

1573
01:19:58,369 --> 01:20:05,280
so before emulating remember that I told

1574
01:20:02,040 --> 01:20:08,489
you that I'm not opening it in write

1575
01:20:05,280 --> 01:20:10,619
mode so I cannot write but I'm

1576
01:20:08,489 --> 01:20:16,468
interested in seeing what's going on so

1577
01:20:10,619 --> 01:20:19,259
now as it will be writing into the that

1578
01:20:16,469 --> 01:20:21,329
piece of memory that I reserved to be

1579
01:20:19,260 --> 01:20:26,250
built on machine I need write permission

1580
01:20:21,329 --> 01:20:30,949
made so I just enable the i/o cache okay

1581
01:20:26,250 --> 01:20:30,949
and now it will be able to write it so

1582
01:20:31,400 --> 01:20:42,780
if I will now this is just step until

1583
01:20:40,110 --> 01:20:47,509
and it will just step until at other

1584
01:20:42,780 --> 01:20:47,509
words it will take a couple seconds

1585
01:20:55,019 --> 01:21:03,499
I wasn't seeking the right place so

1586
01:21:27,679 --> 01:21:35,000
ah I forgot to put instruction pointer

1587
01:21:31,190 --> 01:21:36,589
today the opposite I was so of course it

1588
01:21:35,000 --> 01:21:38,690
was running just before and II was

1589
01:21:36,590 --> 01:21:41,050
trying to emulate all these printers and

1590
01:21:38,690 --> 01:21:41,049
scallops

1591
01:21:49,280 --> 01:21:52,620
[Music]

1592
01:21:58,650 --> 01:22:01,790
[Music]

1593
01:22:23,090 --> 01:22:46,430
oh yes I know but is it working

1594
01:22:29,450 --> 01:22:52,720
sorry for the seconds see the register

1595
01:22:46,430 --> 01:22:52,720
is either stack pointer and the advance

1596
01:22:53,200 --> 01:22:57,370
yeah it was fine

1597
01:22:58,330 --> 01:23:07,070
okay yes it was right now what we're

1598
01:23:03,710 --> 01:23:09,410
interested in in looking for is what is

1599
01:23:07,070 --> 01:23:11,000
the value that it is being compared so

1600
01:23:09,410 --> 01:23:15,290
what is the result of the computation

1601
01:23:11,000 --> 01:23:18,710
that happened here so this value is on

1602
01:23:15,290 --> 01:23:24,380
VAR c 8 we see which is exactly at EBP

1603
01:23:18,710 --> 01:23:27,520
the base pointer minus C so we will just

1604
01:23:24,380 --> 01:23:31,280
print it PF to print format the data

1605
01:23:27,520 --> 01:23:38,690
which format dear as decimal where to

1606
01:23:31,280 --> 01:23:42,610
EBP minus C and we have this value so

1607
01:23:38,690 --> 01:23:45,830
now we just run the crackme

1608
01:23:42,610 --> 01:23:52,570
password okay and any other password

1609
01:23:45,830 --> 01:23:58,040
faith that oops

1610
01:23:52,570 --> 01:24:00,259
okay times passing by yeah here we go

1611
01:23:58,040 --> 01:24:03,410
for another more interesting demo which

1612
01:24:00,260 --> 01:24:06,470
is the obfuscated encrypted code using

1613
01:24:03,410 --> 01:24:09,620
ezel that's really more interesting that

1614
01:24:06,470 --> 01:24:14,410
just are random crack min and in this

1615
01:24:09,620 --> 01:24:14,410
case I will be using the sec on this one

1616
01:24:14,770 --> 01:24:23,480
in case you have it defender directly

1617
01:24:17,480 --> 01:24:25,839
from chapter 11 from this on world let's

1618
01:24:23,480 --> 01:24:25,839
see

1619
01:24:29,930 --> 01:24:35,320
[Music]

1620
01:24:31,450 --> 01:24:40,540
first of all let's print the information

1621
01:24:35,320 --> 01:24:44,360
this is an X here which is a 3-2 byte

1622
01:24:40,540 --> 01:24:46,460
32-bit Windows executable portal portal

1623
01:24:44,360 --> 01:24:47,780
executable file which means there is no

1624
01:24:46,460 --> 01:24:51,130
way away

1625
01:24:47,780 --> 01:24:55,219
we cannot just natively debug it here

1626
01:24:51,130 --> 01:24:59,000
okay but we are trying to do some stuff

1627
01:24:55,220 --> 01:25:01,220
with it as well with emulation so first

1628
01:24:59,000 --> 01:25:04,640
of all let's analyze it let's list the

1629
01:25:01,220 --> 01:25:06,290
functions and now I will skip one boring

1630
01:25:04,640 --> 01:25:08,000
part that is looking for its function

1631
01:25:06,290 --> 01:25:12,530
what it is doing but I can tell you that

1632
01:25:08,000 --> 01:25:17,360
this function has something testing and

1633
01:25:12,530 --> 01:25:21,170
we seek to it print this assembly and

1634
01:25:17,360 --> 01:25:22,700
get R is string something some stuff we

1635
01:25:21,170 --> 01:25:24,890
don't care okay we don't care what

1636
01:25:22,700 --> 01:25:27,650
what's going on here but if you see it

1637
01:25:24,890 --> 01:25:29,960
here it's doing some moving some memory

1638
01:25:27,650 --> 01:25:31,969
and some registers then ignoring some

1639
01:25:29,960 --> 01:25:35,000
stuff again showing some step again

1640
01:25:31,970 --> 01:25:38,170
exerting some step then same jumping

1641
01:25:35,000 --> 01:25:42,550
back coming forward and then we have

1642
01:25:38,170 --> 01:25:48,800
let's print the whole function this

1643
01:25:42,550 --> 01:25:51,370
little push pop jump to it that in case

1644
01:25:48,800 --> 01:25:56,660
you're unfamiliar there usually it's a

1645
01:25:51,370 --> 01:25:59,269
quick treat to perform codification so

1646
01:25:56,660 --> 01:26:03,080
basically this will be a very simple

1647
01:25:59,270 --> 01:26:05,740
cipher to work with so that means that

1648
01:26:03,080 --> 01:26:09,440
if we just print this assembly after

1649
01:26:05,740 --> 01:26:12,170
this we will see what's going on here 20

1650
01:26:09,440 --> 01:26:20,870
lines will be not maybe a little bit

1651
01:26:12,170 --> 01:26:24,200
more here

1652
01:26:20,870 --> 01:26:25,910
yeah this is just a pushed pop jump but

1653
01:26:24,200 --> 01:26:29,769
I shown before just at the end of the

1654
01:26:25,910 --> 01:26:36,230
function and afterwards there is this

1655
01:26:29,770 --> 01:26:40,370
really weird stuff with even some

1656
01:26:36,230 --> 01:26:41,598
invalid operations that it's it really

1657
01:26:40,370 --> 01:26:44,929
makes no sense

1658
01:26:41,599 --> 01:26:47,119
like for it to be executable so if you

1659
01:26:44,929 --> 01:26:51,619
analyze malware encrypted malware or

1660
01:26:47,119 --> 01:26:54,820
something similar it's lights screaming

1661
01:26:51,619 --> 01:26:59,630
an encrypted code an encrypted code okay

1662
01:26:54,820 --> 01:27:01,639
so and we have just in the in the in the

1663
01:26:59,630 --> 01:27:04,550
previous function that is just preceding

1664
01:27:01,639 --> 01:27:07,040
did that push pop jammed with all the

1665
01:27:04,550 --> 01:27:10,190
previously ignoring stuff with moving

1666
01:27:07,040 --> 01:27:13,010
memory it's it varies it's screaming

1667
01:27:10,190 --> 01:27:16,909
screaming like and the decryption of

1668
01:27:13,010 --> 01:27:20,239
this obfuscated code so can we how can

1669
01:27:16,909 --> 01:27:22,129
we do decrypt it actually decrypt it

1670
01:27:20,239 --> 01:27:24,919
this is a function that is in the

1671
01:27:22,130 --> 01:27:27,980
decryption and we will basically emulate

1672
01:27:24,920 --> 01:27:29,840
it to we emulate that function that is

1673
01:27:27,980 --> 01:27:32,299
making the decryption of this code we

1674
01:27:29,840 --> 01:27:43,400
will see that the code will be decrypted

1675
01:27:32,300 --> 01:27:47,329
so see if I can do it right yeah here we

1676
01:27:43,400 --> 01:27:50,210
have the IO cache activate it because we

1677
01:27:47,329 --> 01:27:54,679
will be modifying the code that is just

1678
01:27:50,210 --> 01:28:00,820
afterwards it wasn't really necessary in

1679
01:27:54,679 --> 01:28:02,900
the previous one I just confessed it the

1680
01:28:00,820 --> 01:28:05,090
initialization initialization of the

1681
01:28:02,900 --> 01:28:08,509
machine we can see two registers and

1682
01:28:05,090 --> 01:28:09,590
then this is we're sick that sick is

1683
01:28:08,510 --> 01:28:11,210
just at the very beginning of the

1684
01:28:09,590 --> 01:28:13,760
function we see just before and we are

1685
01:28:11,210 --> 01:28:19,010
going to the end of the function just

1686
01:28:13,760 --> 01:28:21,050
emulating it okay it will take a couple

1687
01:28:19,010 --> 01:28:27,560
seconds that's it

1688
01:28:21,050 --> 01:28:31,280
and now if we print again 32 lines you

1689
01:28:27,560 --> 01:28:34,369
know disassembly add that offset we will

1690
01:28:31,280 --> 01:28:36,079
see okay this looks way better this

1691
01:28:34,369 --> 01:28:38,239
looks way better so we have basically

1692
01:28:36,079 --> 01:28:41,389
emulated their routine in that function

1693
01:28:38,239 --> 01:28:44,509
that was decrypting the code that was

1694
01:28:41,389 --> 01:28:47,440
flag below and as we have emulated it

1695
01:28:44,510 --> 01:28:51,110
and we have enabled we had enabled the

1696
01:28:47,440 --> 01:28:54,110
the cache it has been modified on memory

1697
01:28:51,110 --> 01:28:55,369
but not on disk brand memory but not on

1698
01:28:54,110 --> 01:28:57,889
this so we accept

1699
01:28:55,369 --> 01:29:00,380
this file the file will be just as it

1700
01:28:57,889 --> 01:29:03,889
was the very beginning so that's kind of

1701
01:29:00,380 --> 01:29:13,400
cool and it's now it makes a lot more

1702
01:29:03,889 --> 01:29:16,070
sense okay so let's go yeah hi I have

1703
01:29:13,400 --> 01:29:19,009
some time no to extensibility and

1704
01:29:16,070 --> 01:29:23,030
scripting and I will go really quick

1705
01:29:19,010 --> 01:29:25,969
with that as I previously mentioned to

1706
01:29:23,030 --> 01:29:28,880
is design design is composed by several

1707
01:29:25,969 --> 01:29:31,070
C libraries that are made with no

1708
01:29:28,880 --> 01:29:33,860
third-party dependencies and it's

1709
01:29:31,070 --> 01:29:37,429
library can be built on your project or

1710
01:29:33,860 --> 01:29:39,949
some of them as you prefer one of the

1711
01:29:37,429 --> 01:29:41,570
main use case of that and the practical

1712
01:29:39,949 --> 01:29:43,040
produce test that does standalone

1713
01:29:41,570 --> 01:29:44,630
program that I told you before that

1714
01:29:43,040 --> 01:29:47,000
fragging to extract information rights

1715
01:29:44,630 --> 01:29:49,219
for the based converters the horizon for

1716
01:29:47,000 --> 01:29:51,860
the assembly and disassembly are just

1717
01:29:49,219 --> 01:29:54,500
standalone programs using each one of

1718
01:29:51,860 --> 01:29:58,909
those libraries or one or more to amour

1719
01:29:54,500 --> 01:30:01,400
them depending on the on the knee

1720
01:29:58,909 --> 01:30:02,929
capabilities and this is the basic

1721
01:30:01,400 --> 01:30:05,449
structure like the axle structure when

1722
01:30:02,929 --> 01:30:08,119
you clone and the relative repository is

1723
01:30:05,449 --> 01:30:09,949
the liberal Lib our folder where you

1724
01:30:08,119 --> 01:30:12,980
have the models with dependencies then

1725
01:30:09,949 --> 01:30:15,320
inside it is slave library folder you

1726
01:30:12,980 --> 01:30:17,059
have the P folder when you have the

1727
01:30:15,320 --> 01:30:19,790
plugins the core plug-in for each module

1728
01:30:17,060 --> 01:30:24,290
then have the bean are for the binary

1729
01:30:19,790 --> 01:30:26,869
programs and the shirt sh LR which is

1730
01:30:24,290 --> 01:30:28,340
code that is read from third party this

1731
01:30:26,869 --> 01:30:30,530
code that is used to perform some of the

1732
01:30:28,340 --> 01:30:33,739
things for example to mount some

1733
01:30:30,530 --> 01:30:36,199
partitions it it's it's code that is has

1734
01:30:33,739 --> 01:30:38,259
been is the quantity that is being used

1735
01:30:36,199 --> 01:30:41,900
is from the group and the group

1736
01:30:38,260 --> 01:30:48,050
bootloader slightly modified but that's

1737
01:30:41,900 --> 01:30:50,269
a they can show you really quickly those

1738
01:30:48,050 --> 01:30:53,980
are the libraries for example if we go

1739
01:30:50,270 --> 01:30:57,949
to the assembly we have here and the P

1740
01:30:53,980 --> 01:31:02,379
is all the assembly plugins you can see

1741
01:30:57,949 --> 01:31:02,379
the architectures and

1742
01:31:03,610 --> 01:31:14,019
those are the programs I told you before

1743
01:31:06,400 --> 01:31:14,019
and course yep oops

1744
01:31:15,400 --> 01:31:24,400
third party goat is used in some places

1745
01:31:21,280 --> 01:31:27,290
that's it and this is really fancy

1746
01:31:24,400 --> 01:31:30,619
organizational stuff I'm not really sure

1747
01:31:27,290 --> 01:31:33,650
that is updated but is the most updated

1748
01:31:30,619 --> 01:31:36,619
version of the graph list of the

1749
01:31:33,650 --> 01:31:39,348
libraries that dependency but internal

1750
01:31:36,619 --> 01:31:43,848
dependencies on libraries or two at the

1751
01:31:39,349 --> 01:31:47,449
top we have our util that consumes it's

1752
01:31:43,849 --> 01:31:49,310
consumed by everything and then at the

1753
01:31:47,449 --> 01:31:51,980
fire we have the core which is provide

1754
01:31:49,310 --> 01:31:54,409
the main API to prime it's just I just

1755
01:31:51,980 --> 01:31:58,519
wanted to put a fancy picture but I

1756
01:31:54,409 --> 01:32:00,559
don't expect you do just now come

1757
01:31:58,520 --> 01:32:02,540
develop that if you are interested just

1758
01:32:00,560 --> 01:32:04,520
clone it and looking through the code

1759
01:32:02,540 --> 01:32:09,920
just keeping my that basic structure is

1760
01:32:04,520 --> 01:32:12,260
but you need plugins for extending as I

1761
01:32:09,920 --> 01:32:13,909
said we have plugin for the assembly in

1762
01:32:12,260 --> 01:32:17,510
this assembly of different architecture

1763
01:32:13,909 --> 01:32:19,219
for file formats for input output and

1764
01:32:17,510 --> 01:32:21,199
debugging for example I won't list them

1765
01:32:19,219 --> 01:32:23,270
because I don't wanna lose two minutes

1766
01:32:21,199 --> 01:32:25,669
more it will do more interesting stuff

1767
01:32:23,270 --> 01:32:28,000
at the time but we just comment there

1768
01:32:25,670 --> 01:32:30,170
you just list the plugins that you have

1769
01:32:28,000 --> 01:32:32,300
for example the input output this is

1770
01:32:30,170 --> 01:32:34,639
cool because you can just connect the

1771
01:32:32,300 --> 01:32:36,880
session to a socket through somewhere

1772
01:32:34,639 --> 01:32:41,239
and just work through that or really

1773
01:32:36,880 --> 01:32:44,630
really fancy input and output plugins to

1774
01:32:41,239 --> 01:32:48,589
work with and how to manage plugins that

1775
01:32:44,630 --> 01:32:50,540
are not in core basically be at the the

1776
01:32:48,590 --> 01:32:53,119
package manager my package manager at 2

1777
01:32:50,540 --> 01:32:55,190
p.m. we just when we install our 2 p.m.

1778
01:32:53,119 --> 01:32:59,380
we need to initialize it first of all

1779
01:32:55,190 --> 01:33:02,900
with our 2 p.m. in it and then we just

1780
01:32:59,380 --> 01:33:06,020
install a plug-in with our 2 p.m. - I or

1781
01:33:02,900 --> 01:33:08,000
just are 2 p.m. install the plugin you

1782
01:33:06,020 --> 01:33:09,860
can check manual of our 2 p.m.

1783
01:33:08,000 --> 01:33:11,360
although all the standalone tools and

1784
01:33:09,860 --> 01:33:12,799
also art work has a manual in case you

1785
01:33:11,360 --> 01:33:16,130
want to see all the options for

1786
01:33:12,800 --> 01:33:16,789
executing it but it's quite easy just

1787
01:33:16,130 --> 01:33:21,949
start

1788
01:33:16,789 --> 01:33:24,139
and with you you uninstall it and this

1789
01:33:21,949 --> 01:33:26,478
will provide more plugins that are not

1790
01:33:24,139 --> 01:33:29,959
in the core of the relative but quite

1791
01:33:26,479 --> 01:33:34,309
useful some of them and scripting that's

1792
01:33:29,959 --> 01:33:36,679
really cool and for some time rel was

1793
01:33:34,309 --> 01:33:40,449
told that it was not really easy to

1794
01:33:36,679 --> 01:33:43,309
script it cannot be easier I'm gonna say

1795
01:33:40,449 --> 01:33:44,898
in the first thing we have is bindings

1796
01:33:43,309 --> 01:33:47,389
for many languages which are

1797
01:33:44,899 --> 01:33:49,219
automatically generated with balla bind

1798
01:33:47,389 --> 01:33:52,369
which is another tool created by pancake

1799
01:33:49,219 --> 01:33:54,289
some some years ago so automatically

1800
01:33:52,369 --> 01:33:56,449
there are bindings that are being

1801
01:33:54,289 --> 01:33:59,419
generated for Java ago no GS Python and

1802
01:33:56,449 --> 01:34:04,728
a ton of more languages and you can use

1803
01:33:59,419 --> 01:34:07,129
those but it's I mean it's not being

1804
01:34:04,729 --> 01:34:10,879
deprecated but it's not really being

1805
01:34:07,129 --> 01:34:13,729
used those native bindings and in favor

1806
01:34:10,879 --> 01:34:15,399
of what is the are two pipe api which is

1807
01:34:13,729 --> 01:34:19,280
the standard and recommended way of

1808
01:34:15,399 --> 01:34:20,659
scripting on top of rather two and is

1809
01:34:19,280 --> 01:34:22,989
it's under recommended way because it's

1810
01:34:20,659 --> 01:34:25,638
really really really really easy to use

1811
01:34:22,989 --> 01:34:27,289
basically you just throw us input are

1812
01:34:25,639 --> 01:34:30,919
two commands and you get a lot put our

1813
01:34:27,289 --> 01:34:33,530
two output that's it and there is a

1814
01:34:30,919 --> 01:34:35,959
really cool thing that you remember that

1815
01:34:33,530 --> 01:34:38,478
I told just out of slides before that if

1816
01:34:35,959 --> 01:34:41,929
you open that J on some command you

1817
01:34:38,479 --> 01:34:44,959
receive the JSON output then there is a

1818
01:34:41,929 --> 01:34:47,959
special command you can input are two

1819
01:34:44,959 --> 01:34:51,199
commands and you have one of the ever I

1820
01:34:47,959 --> 01:34:53,510
will see here in the Python example in

1821
01:34:51,199 --> 01:34:54,919
start with Pip and use import are two

1822
01:34:53,510 --> 01:34:57,319
pipe and these are the four commands

1823
01:34:54,919 --> 01:35:01,579
that we have only open Smitty seemingly

1824
01:34:57,319 --> 01:35:03,319
J and quit the Smitty is just inputting

1825
01:35:01,579 --> 01:35:05,268
rather two commands and receiving the

1826
01:35:03,319 --> 01:35:07,249
output and the J is really really cool

1827
01:35:05,269 --> 01:35:11,649
because it performs native JSON

1828
01:35:07,249 --> 01:35:14,898
deceleration okay that means that if

1829
01:35:11,649 --> 01:35:17,209
basically in Python for example when you

1830
01:35:14,899 --> 01:35:19,760
receive a JSON output from the sections

1831
01:35:17,209 --> 01:35:22,549
of the out of the binary or analyzing

1832
01:35:19,760 --> 01:35:24,799
with you if you are if you have executed

1833
01:35:22,549 --> 01:35:27,079
a command with the JSON appended I'm

1834
01:35:24,799 --> 01:35:28,999
calling with the see me DJ it will

1835
01:35:27,079 --> 01:35:30,170
return a native Python object in this

1836
01:35:28,999 --> 01:35:31,330
case a Python

1837
01:35:30,170 --> 01:35:34,310
that dictionary to work with

1838
01:35:31,330 --> 01:35:37,519
automatically so that's kind of cool and

1839
01:35:34,310 --> 01:35:44,050
it works for many other languages with

1840
01:35:37,520 --> 01:35:47,840
this JSON the serialization let's see

1841
01:35:44,050 --> 01:35:51,170
yeah so I'm just going to show you how

1842
01:35:47,840 --> 01:35:53,990
can we script something interesting that

1843
01:35:51,170 --> 01:35:56,120
we are racing just the previous demo of

1844
01:35:53,990 --> 01:35:57,200
the encrypted code so let's see how to

1845
01:35:56,120 --> 01:36:01,150
use our two pipe to do this

1846
01:35:57,200 --> 01:36:05,780
automatically and to work with it and

1847
01:36:01,150 --> 01:36:10,570
it's not here this is just the Crypt

1848
01:36:05,780 --> 01:36:14,059
file I will show to you that's it

1849
01:36:10,570 --> 01:36:18,049
importer two pipe r2 is equal to PI po

1850
01:36:14,060 --> 01:36:21,410
plan the executable analyze seek to the

1851
01:36:18,050 --> 01:36:24,500
function nebulae IO cache initialize the

1852
01:36:21,410 --> 01:36:25,940
butyl machine of the SEO set the

1853
01:36:24,500 --> 01:36:33,050
instruction pointer to the extra to the

1854
01:36:25,940 --> 01:36:37,669
current seek upset and step until the

1855
01:36:33,050 --> 01:36:40,640
end of the function that's it what's

1856
01:36:37,670 --> 01:36:42,740
really cool you you think okay but what

1857
01:36:40,640 --> 01:36:46,760
what do we do with that I mean it's just

1858
01:36:42,740 --> 01:36:48,429
script that makes something and what the

1859
01:36:46,760 --> 01:36:52,550
the cool thing is that with rather too

1860
01:36:48,430 --> 01:36:55,940
we can give initialization script

1861
01:36:52,550 --> 01:36:58,670
written in different languages one of

1862
01:36:55,940 --> 01:37:02,509
those is Python and there is also native

1863
01:36:58,670 --> 01:37:06,380
language like native syntax but we can

1864
01:37:02,510 --> 01:37:08,060
just throw this initial script as an

1865
01:37:06,380 --> 01:37:09,560
initialization script to order to

1866
01:37:08,060 --> 01:37:12,170
session attach to a binary which means

1867
01:37:09,560 --> 01:37:14,060
that when it opens the binary it will

1868
01:37:12,170 --> 01:37:16,610
perform those operations and then you

1869
01:37:14,060 --> 01:37:21,370
your set and that's really cool because

1870
01:37:16,610 --> 01:37:28,759
I will just show to you I guess it's hi

1871
01:37:21,370 --> 01:37:31,670
script yeah so you just you did the

1872
01:37:28,760 --> 01:37:35,000
manual stuff before you put it as a

1873
01:37:31,670 --> 01:37:36,800
script and you just pass it as an

1874
01:37:35,000 --> 01:37:39,500
initial additional script and now when

1875
01:37:36,800 --> 01:37:43,570
you open it the way you already have the

1876
01:37:39,500 --> 01:37:47,350
code obfuscated to work with so now we

1877
01:37:43,570 --> 01:37:51,250
we just can we can print it this is the

1878
01:37:47,350 --> 01:37:54,010
air the code that we do scary before do

1879
01:37:51,250 --> 01:37:55,510
you remember this flash pop jump to yet

1880
01:37:54,010 --> 01:37:58,960
and then the code that was obfuscated

1881
01:37:55,510 --> 01:38:01,030
that's that's pretty cool because we are

1882
01:37:58,960 --> 01:38:04,960
dealing with some encrypted malware

1883
01:38:01,030 --> 01:38:07,750
sample or whatever we can just work the

1884
01:38:04,960 --> 01:38:09,760
do the manhole staff and the crib does

1885
01:38:07,750 --> 01:38:12,130
all the things and then put it as a

1886
01:38:09,760 --> 01:38:14,560
simple script that does this and then

1887
01:38:12,130 --> 01:38:16,780
next time we want to work with that

1888
01:38:14,560 --> 01:38:18,510
sample you just initialize with that

1889
01:38:16,780 --> 01:38:24,630
script and we have everything decrypted

1890
01:38:18,510 --> 01:38:28,750
automatically so that's kind of cool hmm

1891
01:38:24,630 --> 01:38:31,450
that's it now but let me show you have

1892
01:38:28,750 --> 01:38:39,660
something the thing on Python the

1893
01:38:31,450 --> 01:38:39,660
serialization okay

1894
01:38:49,579 --> 01:38:55,849
find it I can do it just right there

1895
01:39:07,130 --> 01:39:18,539
I'm gonna Python shell okay so if i run

1896
01:39:12,439 --> 01:39:25,289
this okay that's it

1897
01:39:18,539 --> 01:39:34,820
and now for example the cool things and

1898
01:39:25,289 --> 01:39:38,369
to CMB prints assembly twenty lines it

1899
01:39:34,820 --> 01:39:41,880
all the colors everything is converted

1900
01:39:38,369 --> 01:39:43,380
well but what I told you the sections

1901
01:39:41,880 --> 01:39:45,179
for example it's thanks to the section

1902
01:39:43,380 --> 01:39:49,110
of the example okay this is the section

1903
01:39:45,179 --> 01:39:52,229
this is the section just JSON but we can

1904
01:39:49,110 --> 01:40:04,648
consume it as for example if we see me

1905
01:39:52,229 --> 01:40:12,380
DJ now sections equal and now we have

1906
01:40:04,649 --> 01:40:17,539
sections as a variable which is a list

1907
01:40:12,380 --> 01:40:20,849
which contains dictionaries so sections

1908
01:40:17,539 --> 01:40:23,188
zero the dictionary of each section so

1909
01:40:20,849 --> 01:40:26,669
we are now just as simple as that

1910
01:40:23,189 --> 01:40:34,939
dealing with native objects in Python we

1911
01:40:26,669 --> 01:40:38,610
can work with that whatever we need okay

1912
01:40:34,939 --> 01:40:41,280
let's discuss a little bit and I mean

1913
01:40:38,610 --> 01:40:44,848
quite out of time but I guess I will be

1914
01:40:41,280 --> 01:40:46,050
able to do my last demo on time so come

1915
01:40:44,849 --> 01:40:48,619
on use cases

1916
01:40:46,050 --> 01:40:51,239
I won't go really deep into that because

1917
01:40:48,619 --> 01:40:54,598
debugging everyone knows what the body

1918
01:40:51,239 --> 01:40:56,398
gives but because you don't know it's

1919
01:40:54,599 --> 01:40:57,449
just stepping through a process to

1920
01:40:56,399 --> 01:40:58,860
seeing

1921
01:40:57,449 --> 01:41:02,519
putting break point and seeing what's

1922
01:40:58,860 --> 01:41:05,730
going on to find bags or to trace an

1923
01:41:02,520 --> 01:41:07,790
error whatever and the debug debugging

1924
01:41:05,730 --> 01:41:12,540
options are under the D of the back

1925
01:41:07,790 --> 01:41:14,429
common and for you to be able to debug a

1926
01:41:12,540 --> 01:41:17,370
program you need of course to open

1927
01:41:14,429 --> 01:41:21,179
rather to in a debug session this is the

1928
01:41:17,370 --> 01:41:22,530
- the flag at the very beginning and the

1929
01:41:21,179 --> 01:41:25,320
interesting there are some interesting

1930
01:41:22,530 --> 01:41:27,420
things here they work the commands work

1931
01:41:25,320 --> 01:41:29,820
like almost the same does in the

1932
01:41:27,420 --> 01:41:31,350
emulation I did in the inverse way

1933
01:41:29,820 --> 01:41:33,960
because I was really more interested in

1934
01:41:31,350 --> 01:41:36,449
show you the emulation part that is way

1935
01:41:33,960 --> 01:41:40,560
less known that just debugging but with

1936
01:41:36,449 --> 01:41:42,690
another interface but do you remember

1937
01:41:40,560 --> 01:41:45,270
that with emulation with had the AE and

1938
01:41:42,690 --> 01:41:46,919
then all the the commands that were the

1939
01:41:45,270 --> 01:41:50,190
demolition here we have basically the

1940
01:41:46,920 --> 01:41:52,110
same but with D and D as two-step DC to

1941
01:41:50,190 --> 01:41:57,719
continually be just a breakpoint all

1942
01:41:52,110 --> 01:41:59,969
that kind of stuff and you can just read

1943
01:41:57,719 --> 01:42:03,900
for it here the customer then you have

1944
01:41:59,969 --> 01:42:06,570
the options okay so just few words about

1945
01:42:03,900 --> 01:42:08,460
debugging in rather to it does it start

1946
01:42:06,570 --> 01:42:10,380
the debugging session not at the entry

1947
01:42:08,460 --> 01:42:13,620
point does it as if we were just

1948
01:42:10,380 --> 01:42:15,449
punching spawning a show on a file but

1949
01:42:13,620 --> 01:42:17,880
not running but it starts at the dynamic

1950
01:42:15,449 --> 01:42:20,428
loader that's kind of interesting

1951
01:42:17,880 --> 01:42:23,040
because there is sometimes some cool

1952
01:42:20,429 --> 01:42:26,550
tricks from malware or other software

1953
01:42:23,040 --> 01:42:28,530
that are between the dynamic loading and

1954
01:42:26,550 --> 01:42:31,410
the actual entry point or the one of the

1955
01:42:28,530 --> 01:42:35,190
entry points and this is this way we can

1956
01:42:31,410 --> 01:42:36,929
we can debug around it before just

1957
01:42:35,190 --> 01:42:39,449
before getting to the entry point of the

1958
01:42:36,929 --> 01:42:42,360
of the program then of course it's a log

1959
01:42:39,449 --> 01:42:44,129
level debugger it's not aiming to

1960
01:42:42,360 --> 01:42:46,259
replace a source code debugging or

1961
01:42:44,130 --> 01:42:49,620
you're on your favorite IDE it's just

1962
01:42:46,260 --> 01:42:51,870
low-level stuff and what's interesting

1963
01:42:49,620 --> 01:42:54,510
is that it has the nating debugging over

1964
01:42:51,870 --> 01:42:57,269
to but can just debug with many backends

1965
01:42:54,510 --> 01:42:59,580
and use gdb are two LLVM which is a

1966
01:42:57,270 --> 01:43:02,460
began to use llll p.m. which is quite

1967
01:42:59,580 --> 01:43:05,309
useful for debugging any iOS from iOS

1968
01:43:02,460 --> 01:43:07,949
related stuff then of course we have our

1969
01:43:05,310 --> 01:43:09,310
Frida and some other debugging backends

1970
01:43:07,949 --> 01:43:12,900
to use

1971
01:43:09,310 --> 01:43:15,670
for exploiting I want to go much deeper

1972
01:43:12,900 --> 01:43:17,559
but just pointing some few words that

1973
01:43:15,670 --> 01:43:21,310
might be useful we are interested in

1974
01:43:17,560 --> 01:43:23,590
exploiting stuff this last comment is -

1975
01:43:21,310 --> 01:43:25,720
for searching the stuff the best

1976
01:43:23,590 --> 01:43:27,400
fertilizer searching for a string the

1977
01:43:25,720 --> 01:43:29,470
second is searching for Rob gadgets

1978
01:43:27,400 --> 01:43:31,389
which I'm sure some of you will be

1979
01:43:29,470 --> 01:43:33,520
interested and there are some of them

1980
01:43:31,390 --> 01:43:37,120
you can also search for gadgets with

1981
01:43:33,520 --> 01:43:40,510
regular expressions and crazy stuff it's

1982
01:43:37,120 --> 01:43:42,040
just if you just slice on and a question

1983
01:43:40,510 --> 01:43:45,360
McGee will see all the possible

1984
01:43:42,040 --> 01:43:48,880
searching modes but those two are quite

1985
01:43:45,360 --> 01:43:52,259
useful for exploding things then finding

1986
01:43:48,880 --> 01:43:59,640
function references essential with

1987
01:43:52,260 --> 01:44:02,590
analyze X cross yeah it yeah exactly

1988
01:43:59,640 --> 01:44:05,260
excu the cross references and the

1989
01:44:02,590 --> 01:44:07,420
opposite of the function and then we can

1990
01:44:05,260 --> 01:44:09,880
also find the writable and executable

1991
01:44:07,420 --> 01:44:11,920
sections of a binary really simple just

1992
01:44:09,880 --> 01:44:18,760
if we just print a section it will give

1993
01:44:11,920 --> 01:44:22,630
us right there so here we have every

1994
01:44:18,760 --> 01:44:28,510
section and their permissions okay then

1995
01:44:22,630 --> 01:44:31,180
oops also we can list the Lipsy imports

1996
01:44:28,510 --> 01:44:33,190
which might be interesting maybe you are

1997
01:44:31,180 --> 01:44:36,250
doing some kind of lips every turn we

1998
01:44:33,190 --> 01:44:41,379
don't up see that kind of stuff it's

1999
01:44:36,250 --> 01:44:44,370
just I asked see symbols okay we have to

2000
01:44:41,380 --> 01:44:51,370
analyze it first we have to open

2001
01:44:44,370 --> 01:44:53,980
something first of course yes for blue

2002
01:44:51,370 --> 01:44:58,080
all the same the symbols and we can grab

2003
01:44:53,980 --> 01:44:58,080
for the port ones

2004
01:45:07,170 --> 01:45:15,969
then I said Rock to as I said before it

2005
01:45:11,679 --> 01:45:17,860
can be used for generating the breathing

2006
01:45:15,969 --> 01:45:19,570
pattern those are those patterns that

2007
01:45:17,860 --> 01:45:21,639
are really used when you are doing some

2008
01:45:19,570 --> 01:45:24,130
kind of looking for the memory position

2009
01:45:21,639 --> 01:45:26,380
to inject the shellcode because they are

2010
01:45:24,130 --> 01:45:28,659
non repeating and when you get the

2011
01:45:26,380 --> 01:45:30,789
instruct the instruction pointer when

2012
01:45:28,659 --> 01:45:33,460
you get the Christ and you see the value

2013
01:45:30,789 --> 01:45:34,900
of deception pointer it will be loaded

2014
01:45:33,460 --> 01:45:37,239
with some of those values and you can

2015
01:45:34,900 --> 01:45:39,848
get those values and see okay so which

2016
01:45:37,239 --> 01:45:43,419
offset is actually of my payload to

2017
01:45:39,849 --> 01:45:46,150
encode your shellcode it's quite quite

2018
01:45:43,420 --> 01:45:48,400
common on exploiting these things and we

2019
01:45:46,150 --> 01:45:51,848
can of course prop the shellcode with

2020
01:45:48,400 --> 01:45:54,400
rag2 we set the architecture the bits

2021
01:45:51,849 --> 01:45:59,440
and some code in C there is also an

2022
01:45:54,400 --> 01:46:01,629
internal syntax for it but just tiny C

2023
01:45:59,440 --> 01:46:04,839
programs and it will literally give you

2024
01:46:01,630 --> 01:46:07,239
the the shellcode and hexadecimal value

2025
01:46:04,840 --> 01:46:11,650
of the anything you are have written

2026
01:46:07,239 --> 01:46:13,869
it's quite useful you can do what and at

2027
01:46:11,650 --> 01:46:15,820
the impressed view received a random

2028
01:46:13,869 --> 01:46:17,799
shellcode on the internet you can make

2029
01:46:15,820 --> 01:46:21,070
the inverse process and get what's going

2030
01:46:17,800 --> 01:46:24,429
on in there it will it will give you the

2031
01:46:21,070 --> 01:46:26,469
assembly if you are more interesting on

2032
01:46:24,429 --> 01:46:30,460
exploiting I haven't really that much

2033
01:46:26,469 --> 01:46:33,070
time to make and demos on exploiting

2034
01:46:30,460 --> 01:46:36,340
visible to consume the whole session but

2035
01:46:33,070 --> 01:46:38,860
the first tool posts are very very basic

2036
01:46:36,340 --> 01:46:41,710
just some more points of what I said

2037
01:46:38,860 --> 01:46:45,489
here and the third one is a walkthrough

2038
01:46:41,710 --> 01:46:49,059
tutorial from my friend it I and it's

2039
01:46:45,489 --> 01:46:52,478
really cool it goes to bypass and

2040
01:46:49,059 --> 01:46:54,639
bypassing ASL air the DP and all the

2041
01:46:52,479 --> 01:46:57,670
kind of protections it's kind of

2042
01:46:54,639 --> 01:47:01,570
interesting I will give leave the

2043
01:46:57,670 --> 01:47:07,300
references as well afterwards let's move

2044
01:47:01,570 --> 01:47:10,659
on for the extras very quickly if you

2045
01:47:07,300 --> 01:47:12,519
are still afraid of the of the shell

2046
01:47:10,659 --> 01:47:15,518
interface you have a graphical user

2047
01:47:12,519 --> 01:47:17,380
interface it's the relative official

2048
01:47:15,519 --> 01:47:19,239
graphical user interface

2049
01:47:17,380 --> 01:47:21,250
and I say official because they were

2050
01:47:19,239 --> 01:47:23,259
like more than ten graphical user

2051
01:47:21,250 --> 01:47:26,560
interface for rather from yes from

2052
01:47:23,260 --> 01:47:28,630
random people doing go is them not

2053
01:47:26,560 --> 01:47:33,400
maintaining or not really used by anyone

2054
01:47:28,630 --> 01:47:36,389
or even private ones but this one was

2055
01:47:33,400 --> 01:47:39,849
initially called di toe by by yoga Tessa

2056
01:47:36,389 --> 01:47:43,719
Spanish was a security researcher and

2057
01:47:39,850 --> 01:47:45,400
then some other friends guys and people

2058
01:47:43,719 --> 01:47:48,219
take oops

2059
01:47:45,400 --> 01:47:52,659
to the leaf a bit and rebranded to good

2060
01:47:48,219 --> 01:47:56,500
to Pewter and it's a ball being quite

2061
01:47:52,659 --> 01:47:57,940
fast it has a good team of maintained

2062
01:47:56,500 --> 01:48:01,389
errs and developers that are really

2063
01:47:57,940 --> 01:48:02,860
active is developed in C++ and QT and

2064
01:48:01,389 --> 01:48:04,960
it's released alongside they are two

2065
01:48:02,860 --> 01:48:08,110
releases and if you want to know more

2066
01:48:04,960 --> 01:48:11,110
just yet cuter dot are a debugging is

2067
01:48:08,110 --> 01:48:15,299
not working yet you can emulate but

2068
01:48:11,110 --> 01:48:19,870
naughty back but it's it should be done

2069
01:48:15,300 --> 01:48:21,760
soon let's say but it's really cool

2070
01:48:19,870 --> 01:48:23,500
that's what it looks like you have all

2071
01:48:21,760 --> 01:48:26,469
those panels you can move things do

2072
01:48:23,500 --> 01:48:32,679
fancy stuff with mouse and keyboard and

2073
01:48:26,469 --> 01:48:35,500
all that stuff okay then the compilation

2074
01:48:32,679 --> 01:48:37,780
I will just go deeper into this but

2075
01:48:35,500 --> 01:48:40,120
there for you to know what's going on in

2076
01:48:37,780 --> 01:48:41,500
the compilation in our tool on first of

2077
01:48:40,120 --> 01:48:44,230
all the compilation is difficult is

2078
01:48:41,500 --> 01:48:46,210
freaking difficult just theoretically

2079
01:48:44,230 --> 01:48:48,968
thinking the the process of the

2080
01:48:46,210 --> 01:48:53,050
compilation is something hard really

2081
01:48:48,969 --> 01:48:56,020
hard so there are many things that we

2082
01:48:53,050 --> 01:48:57,070
are doing in row two there is what the

2083
01:48:56,020 --> 01:49:01,090
first of all it's not even mentioned

2084
01:48:57,070 --> 01:49:05,610
here if you just throw P DC on a

2085
01:49:01,090 --> 01:49:09,280
function you will get a CD compilation

2086
01:49:05,610 --> 01:49:12,699
very very very basic it's very basic

2087
01:49:09,280 --> 01:49:14,860
it's not doing like anything but maybe

2088
01:49:12,699 --> 01:49:16,989
for a first glimpse it will be enough

2089
01:49:14,860 --> 01:49:19,179
and it's pretty fast because it's thing

2090
01:49:16,989 --> 01:49:23,129
really the thing then there is our two

2091
01:49:19,179 --> 01:49:26,710
deck which is an ASM two solution

2092
01:49:23,130 --> 01:49:29,050
converter written in the JavaScript it's

2093
01:49:26,710 --> 01:49:31,030
way more advanced that the PC but it's

2094
01:49:29,050 --> 01:49:34,480
not the compiler

2095
01:49:31,030 --> 01:49:36,369
as it I mean it's not what the theorists

2096
01:49:34,480 --> 01:49:38,440
would call out the comparator with the

2097
01:49:36,369 --> 01:49:41,289
compiling algorithms and reconstruction

2098
01:49:38,440 --> 01:49:43,928
stuff is just a toy and a really nice

2099
01:49:41,289 --> 01:49:47,820
toy and there is a ton of work behind it

2100
01:49:43,929 --> 01:49:50,079
and it works so well but it's not like a

2101
01:49:47,820 --> 01:49:54,159
formality compiler let's say that way

2102
01:49:50,079 --> 01:49:56,110
and you have it available you can search

2103
01:49:54,159 --> 01:50:00,579
for it the kids have it available at 2

2104
01:49:56,110 --> 01:50:02,348
p.m. so in the package manager then as I

2105
01:50:00,579 --> 01:50:05,440
said the compelling is card so mainly

2106
01:50:02,349 --> 01:50:07,809
what what's being doing but we are been

2107
01:50:05,440 --> 01:50:09,759
doing is just calling third-party the

2108
01:50:07,809 --> 01:50:13,150
compelling stuff there is another

2109
01:50:09,760 --> 01:50:14,770
package magnet packets I plug in to use

2110
01:50:13,150 --> 01:50:17,369
the grid deck Redakai

2111
01:50:14,770 --> 01:50:21,159
I don't know any of you know spread dick

2112
01:50:17,369 --> 01:50:22,989
yeah cool it's at the compiler that was

2113
01:50:21,159 --> 01:50:25,449
open source by Abbas the antivirus

2114
01:50:22,989 --> 01:50:27,159
company they made it open source I guess

2115
01:50:25,449 --> 01:50:31,539
a couple years ago or maybe not that

2116
01:50:27,159 --> 01:50:33,308
much and there is just the artwork right

2117
01:50:31,539 --> 01:50:36,480
egg is just a bridge between our table

2118
01:50:33,309 --> 01:50:41,679
200 dick and it stick on piling thread

2119
01:50:36,480 --> 01:50:44,669
then this is the the compiler project

2120
01:50:41,679 --> 01:50:47,289
for flour to the actual the compiler

2121
01:50:44,670 --> 01:50:49,360
with all the compiler staff and all the

2122
01:50:47,289 --> 01:50:55,230
fancy stuff and their crazy stuff

2123
01:50:49,360 --> 01:50:58,210
but it has very little developers and

2124
01:50:55,230 --> 01:50:59,589
it's mainly developed during the desaad

2125
01:50:58,210 --> 01:51:02,260
which is the agava summer of code or

2126
01:50:59,590 --> 01:51:05,639
maybe there sometimes there are sock

2127
01:51:02,260 --> 01:51:07,869
which is the on kind of Summer of Code

2128
01:51:05,639 --> 01:51:11,020
bye-bye rather not not sponsored by

2129
01:51:07,869 --> 01:51:12,610
Google but it's work in progress it's a

2130
01:51:11,020 --> 01:51:15,219
very nice proof of concept you can do

2131
01:51:12,610 --> 01:51:18,789
some stuff but it's not really ready yet

2132
01:51:15,219 --> 01:51:19,900
okay but it's the it's the good it's in

2133
01:51:18,789 --> 01:51:22,090
the good direction is the one into good

2134
01:51:19,900 --> 01:51:23,739
direction it has some some fancy

2135
01:51:22,090 --> 01:51:25,989
algorithms that are working really

2136
01:51:23,739 --> 01:51:28,690
really nice and if you are interested

2137
01:51:25,989 --> 01:51:31,718
over to join it just well you have to

2138
01:51:28,690 --> 01:51:33,789
get up here and open an issue or contact

2139
01:51:31,719 --> 01:51:38,139
the developers and I will be really

2140
01:51:33,789 --> 01:51:41,559
awesome then there is one that is is not

2141
01:51:38,139 --> 01:51:44,809
here but it's possible and indeed there

2142
01:51:41,559 --> 01:51:47,480
is a proof-of-concept done

2143
01:51:44,809 --> 01:51:53,179
but it's it's private and it's not

2144
01:51:47,480 --> 01:51:55,928
really stable or anything which is

2145
01:51:53,179 --> 01:51:58,699
basically using the get ready compiler

2146
01:51:55,929 --> 01:51:59,270
the the compiler of Deidre is quite

2147
01:51:58,699 --> 01:52:02,690
awesome

2148
01:51:59,270 --> 01:52:06,170
for example objective-c it works really

2149
01:52:02,690 --> 01:52:07,699
well and there is a there is a new sub

2150
01:52:06,170 --> 01:52:09,980
plugin now working progress plugin uh

2151
01:52:07,699 --> 01:52:13,009
but I would say a proof of concept right

2152
01:52:09,980 --> 01:52:16,009
now just use using data compiled as a

2153
01:52:13,010 --> 01:52:18,860
back-end so that's it we can throw it

2154
01:52:16,010 --> 01:52:21,770
any the compiler then I guess I have ten

2155
01:52:18,860 --> 01:52:23,989
minutes we'll have enough time okay I

2156
01:52:21,770 --> 01:52:26,480
will talk just a little bit of a lot to

2157
01:52:23,989 --> 01:52:29,209
Frieda which is are we could plug in any

2158
01:52:26,480 --> 01:52:31,940
of you knows Frieda here really yeah I

2159
01:52:29,210 --> 01:52:33,920
see a lot of places okay so the ones of

2160
01:52:31,940 --> 01:52:37,308
you who know you know that it is amazing

2161
01:52:33,920 --> 01:52:39,469
and the ones who don't is just binary

2162
01:52:37,309 --> 01:52:41,719
instrumentation on asteroids many many

2163
01:52:39,469 --> 01:52:44,239
asteroids and it's frigging lis amazing

2164
01:52:41,719 --> 01:52:46,730
what it can do but basically dynamic

2165
01:52:44,239 --> 01:52:49,730
analysis with binary instrumentation

2166
01:52:46,730 --> 01:52:52,419
injecting called monitoring tracing it's

2167
01:52:49,730 --> 01:52:55,968
amazing so our to Frieda is basically

2168
01:52:52,420 --> 01:53:00,199
front end for Frieda with in rural area

2169
01:52:55,969 --> 01:53:01,309
and we can do some cool stuff we we have

2170
01:53:00,199 --> 01:53:13,940
to install it through the package

2171
01:53:01,309 --> 01:53:18,559
manager and okay if we open our outer

2172
01:53:13,940 --> 01:53:20,299
shell with the backslash is we append

2173
01:53:18,559 --> 01:53:21,889
about we perfect with the backlash will

2174
01:53:20,300 --> 01:53:24,909
be the comments from our to Frieda when

2175
01:53:21,889 --> 01:53:27,079
we have install it now we can stop says

2176
01:53:24,909 --> 01:53:27,888
yeah because we are not attached to any

2177
01:53:27,079 --> 01:53:33,590
section yeah

2178
01:53:27,889 --> 01:53:36,440
I will show you know so to open a free

2179
01:53:33,590 --> 01:53:39,679
to spawn a free the procession we just

2180
01:53:36,440 --> 01:53:43,900
are to and Frieda this is the back to

2181
01:53:39,679 --> 01:53:46,849
open our a process an actual process by

2182
01:53:43,900 --> 01:53:50,530
name of the process by process ID or

2183
01:53:46,849 --> 01:53:54,500
even our stop locale promote anything

2184
01:53:50,530 --> 01:53:58,188
and that's it those are links to our to

2185
01:53:54,500 --> 01:53:59,749
Frieda the actual tool and the

2186
01:53:58,189 --> 01:54:01,459
an official wiki which is being doubled

2187
01:53:59,749 --> 01:54:04,070
by you are gonna wear a friend of mine

2188
01:54:01,459 --> 01:54:05,570
which is really cool and I will show you

2189
01:54:04,070 --> 01:54:08,150
a very quick demo

2190
01:54:05,570 --> 01:54:08,599
what can our Tafoya do and that will be

2191
01:54:08,150 --> 01:54:12,709
it

2192
01:54:08,599 --> 01:54:15,159
here I have a counter that's it that is

2193
01:54:12,709 --> 01:54:18,169
this stupid code that's just prints

2194
01:54:15,159 --> 01:54:20,268
number hydaburg happy double Hamsterdam

2195
01:54:18,169 --> 01:54:21,260
thousand ninety and sleep once I go on

2196
01:54:20,269 --> 01:54:28,539
an increment that number

2197
01:54:21,260 --> 01:54:28,539
it's keeps printing okay so let's exit

2198
01:54:41,289 --> 01:54:44,289
okay

2199
01:54:51,499 --> 01:55:05,938
okay that's it okay now we can open

2200
01:55:02,099 --> 01:55:08,279
directly just save the process name

2201
01:55:05,939 --> 01:55:13,469
again you can look for that process name

2202
01:55:08,279 --> 01:55:16,739
but wait ah it's here trust me that sees

2203
01:55:13,469 --> 01:55:19,979
the first of the content but anyway you

2204
01:55:16,739 --> 01:55:30,388
can open also with the process ID and

2205
01:55:19,979 --> 01:55:33,389
let's just yet ah yes I'm okay okay now

2206
01:55:30,389 --> 01:55:37,109
I have those are all the options with

2207
01:55:33,389 --> 01:55:40,730
freedom and I will show you just to show

2208
01:55:37,109 --> 01:55:42,079
the capabilities of it very very basic

2209
01:55:40,730 --> 01:55:52,018
[Applause]

2210
01:55:42,079 --> 01:55:55,978
here I will list mission and I'm

2211
01:55:52,019 --> 01:55:57,509
interested now in the entry point so

2212
01:55:55,979 --> 01:55:59,519
let's see where is the entry point of

2213
01:55:57,509 --> 01:56:01,799
this process the process is running I

2214
01:55:59,519 --> 01:56:05,579
mean we are injecting a running process

2215
01:56:01,799 --> 01:56:10,499
okay keep that in mind so here we have

2216
01:56:05,579 --> 01:56:22,648
the entry point let's seek here and

2217
01:56:10,499 --> 01:56:25,188
let's just see the central see that see

2218
01:56:22,649 --> 01:56:30,259
it better okay

2219
01:56:25,189 --> 01:56:33,989
Hank you wake up that whole thing so

2220
01:56:30,259 --> 01:56:38,489
just without understanding anything we

2221
01:56:33,989 --> 01:56:40,108
have move a x0 then a call then moving a

2222
01:56:38,489 --> 01:56:42,419
one then another call and then an

2223
01:56:40,109 --> 01:56:43,739
addition and then a jump back to him but

2224
01:56:42,419 --> 01:56:46,318
to here so basically this is

2225
01:56:43,739 --> 01:56:49,409
initialization the real variable then

2226
01:56:46,319 --> 01:56:56,149
the slip and this is incrementing that

2227
01:56:49,409 --> 01:56:56,148
way okay so as I told you before

2228
01:56:56,959 --> 01:57:02,460
okay with visual mode in this assembly

2229
01:56:59,939 --> 01:57:05,130
we have one mode the course

2230
01:57:02,460 --> 01:57:07,380
mode which is activated with the sea of

2231
01:57:05,130 --> 01:57:14,250
course ER and we can just put it in one

2232
01:57:07,380 --> 01:57:16,500
bite and for example if we put here this

2233
01:57:14,250 --> 01:57:20,550
one is the one that represents the

2234
01:57:16,500 --> 01:57:28,590
incrementing value so fight them it

2235
01:57:20,550 --> 01:57:30,330
it will work so see the counter now it's

2236
01:57:28,590 --> 01:57:36,260
being the code is being injected in

2237
01:57:30,330 --> 01:57:39,600
memory so I can just more of that then

2238
01:57:36,260 --> 01:57:41,820
say it one and this one I told you it

2239
01:57:39,600 --> 01:57:46,590
was the slipping time so if I just

2240
01:57:41,820 --> 01:57:49,580
increase it seems it Christ but it's

2241
01:57:46,590 --> 01:57:56,520
just that it goes slower and of course

2242
01:57:49,580 --> 01:57:58,170
if I put two zero weight finishes so

2243
01:57:56,520 --> 01:58:01,290
that's basically it very very basic but

2244
01:57:58,170 --> 01:58:07,370
just for you to to see what is possible

2245
01:58:01,290 --> 01:58:10,860
and all your ideas can be really

2246
01:58:07,370 --> 01:58:14,489
satisfied so I have very little time but

2247
01:58:10,860 --> 01:58:16,410
I'm almost done with it I just want to

2248
01:58:14,489 --> 01:58:19,320
point you to some documentation and more

2249
01:58:16,410 --> 01:58:24,599
resources the first one is it's already

2250
01:58:19,320 --> 01:58:25,950
documented in C so yeah I mean it's the

2251
01:58:24,600 --> 01:58:27,120
best way if you want understand

2252
01:58:25,950 --> 01:58:30,300
everything but it's probably not the

2253
01:58:27,120 --> 01:58:32,969
most practical way to to go to it at

2254
01:58:30,300 --> 01:58:35,520
least at the very beginning and there is

2255
01:58:32,969 --> 01:58:39,420
the official book which is continuously

2256
01:58:35,520 --> 01:58:45,660
being developed is indeed books and then

2257
01:58:39,420 --> 01:58:48,270
I I would call for the we are we are in

2258
01:58:45,660 --> 01:58:49,830
the google Summer of the Google season

2259
01:58:48,270 --> 01:58:51,690
of documentation which is some kind of

2260
01:58:49,830 --> 01:58:53,760
duo Summer of Code both for documents so

2261
01:58:51,690 --> 01:58:58,049
if any of you is interested on is a good

2262
01:58:53,760 --> 01:58:59,969
clinical writer and wants to join us to

2263
01:58:58,050 --> 01:59:02,460
make the art to book even better so

2264
01:58:59,969 --> 01:59:05,400
you're welcome to contribute to make

2265
01:59:02,460 --> 01:59:09,450
your proposal we have also some physical

2266
01:59:05,400 --> 01:59:12,330
books I have not any unit with me right

2267
01:59:09,450 --> 01:59:14,460
now but we did some physical books

2268
01:59:12,330 --> 01:59:15,389
really fancy for the past are to

2269
01:59:14,460 --> 01:59:19,050
Congress

2270
01:59:15,389 --> 01:59:21,810
that of course now are outdated but they

2271
01:59:19,050 --> 01:59:24,449
were really good and yeah that's it then

2272
01:59:21,810 --> 01:59:27,090
more resources there is that book which

2273
01:59:24,449 --> 01:59:29,309
is a little bit outdated but still it

2274
01:59:27,090 --> 01:59:31,500
has a ton of good information right

2275
01:59:29,310 --> 01:59:35,760
exploration then you can search for

2276
01:59:31,500 --> 01:59:37,050
blocks everywhere those are just to to

2277
01:59:35,760 --> 01:59:40,699
mention the rod today which is the

2278
01:59:37,050 --> 01:59:44,790
official block it's updated very expand

2279
01:59:40,699 --> 01:59:46,619
not really often but it has some

2280
01:59:44,790 --> 01:59:48,570
articles interesting and then just to

2281
01:59:46,619 --> 01:59:49,920
mention one in the Internet I mentioned

2282
01:59:48,570 --> 01:59:53,489
the one from megabit because he's my

2283
01:59:49,920 --> 01:59:55,949
friend so this is from him and he has

2284
01:59:53,489 --> 01:59:58,919
amazing tutorials and walkthroughs on

2285
01:59:55,949 --> 02:00:01,169
rubber to then you want more record more

2286
01:59:58,920 --> 02:00:02,909
resources we have recorded talks we have

2287
02:00:01,170 --> 02:00:04,650
all the talks recorded for the three

2288
02:00:02,909 --> 02:00:06,809
editions of our talk on the first ones

2289
02:00:04,650 --> 02:00:11,820
are quite low quality because it was a

2290
02:00:06,810 --> 02:00:16,560
little bit well I would say improvised

2291
02:00:11,820 --> 02:00:19,019
everything but they are the material is

2292
02:00:16,560 --> 02:00:21,300
really good and then the for the past

2293
02:00:19,020 --> 02:00:23,940
year and the sullens 17 these those are

2294
02:00:21,300 --> 02:00:25,710
those with really good quality and out

2295
02:00:23,940 --> 02:00:27,659
of a lot of companies being called it

2296
02:00:25,710 --> 02:00:29,429
and then there are just tons of talks

2297
02:00:27,659 --> 02:00:32,849
over our to just take on YouTube all

2298
02:00:29,429 --> 02:00:36,150
your favorite video is certain Jane

2299
02:00:32,850 --> 02:00:38,400
there are tons of talks but if you just

2300
02:00:36,150 --> 02:00:41,849
go through all the playlists of lark on

2301
02:00:38,400 --> 02:00:44,730
you have way about material to see it

2302
02:00:41,850 --> 02:00:47,969
and some extra tips those are really

2303
02:00:44,730 --> 02:00:50,129
really quick before before living is

2304
02:00:47,969 --> 02:00:53,489
just okay we have to pen a question mark

2305
02:00:50,130 --> 02:00:55,409
it's just in my advice for everyone it's

2306
02:00:53,489 --> 02:00:59,070
just panic question mark and you will be

2307
02:00:55,409 --> 02:01:01,199
fine but if you you can use a native Hut

2308
02:00:59,070 --> 02:01:03,380
I have not explained because it was not

2309
02:01:01,199 --> 02:01:06,659
the case it was not pretty relevant but

2310
02:01:03,380 --> 02:01:09,119
this three points basically native HUD

2311
02:01:06,659 --> 02:01:11,339
of rather too and we just use that we

2312
02:01:09,119 --> 02:01:14,549
are gripping on native card on the

2313
02:01:11,340 --> 02:01:16,889
question mark on all the a stop help

2314
02:01:14,550 --> 02:01:19,050
they commander this the help of all

2315
02:01:16,889 --> 02:01:24,670
comments up comments and this is

2316
02:01:19,050 --> 02:01:26,120
basically it is very quickly

2317
02:01:24,670 --> 02:01:33,660
[Music]

2318
02:01:26,120 --> 02:01:35,670
so here basically we can stop this this

2319
02:01:33,660 --> 02:01:41,610
is our search like that on all the help

2320
02:01:35,670 --> 02:01:46,260
and just make an alias hard to help

2321
02:01:41,610 --> 02:01:48,360
this is just for do a quiet in it and

2322
02:01:46,260 --> 02:01:51,720
just run this command and not opening

2323
02:01:48,360 --> 02:01:56,580
any file that's it so now basically if

2324
02:01:51,720 --> 02:01:59,240
you I think I already have my heart to

2325
02:01:56,580 --> 02:02:04,470
help and yeah that's it

2326
02:01:59,240 --> 02:02:07,740
show an X whatever yeah

2327
02:02:04,470 --> 02:02:10,860
cook it and for support with the IRC

2328
02:02:07,740 --> 02:02:12,840
rather add the version of unity and the

2329
02:02:10,860 --> 02:02:15,389
telegram channel and both are Bridgette

2330
02:02:12,840 --> 02:02:16,590
together with the bot so if you talk

2331
02:02:15,390 --> 02:02:19,410
from one or the other

2332
02:02:16,590 --> 02:02:22,140
everyone will receive it and that's

2333
02:02:19,410 --> 02:02:24,870
that's basically it's the conclusions I

2334
02:02:22,140 --> 02:02:28,560
would say is first of all l2 is not that

2335
02:02:24,870 --> 02:02:31,680
difficult and I hope that got a little

2336
02:02:28,560 --> 02:02:33,180
bit clearer at least you have to keep in

2337
02:02:31,680 --> 02:02:35,040
mind that we are using mnemonic comments

2338
02:02:33,180 --> 02:02:36,630
that could be different from other

2339
02:02:35,040 --> 02:02:40,890
maintenance things but they are not

2340
02:02:36,630 --> 02:02:42,570
difficult they are just different it's a

2341
02:02:40,890 --> 02:02:45,180
unique mix like shell so if you are

2342
02:02:42,570 --> 02:02:48,240
really used to UNIX programs on

2343
02:02:45,180 --> 02:02:50,400
unix-like interface it's really familiar

2344
02:02:48,240 --> 02:02:52,290
and with less than ten commands I

2345
02:02:50,400 --> 02:02:55,679
haven't used more than ten commands we

2346
02:02:52,290 --> 02:02:58,080
can do a lot of stuff yes we can add

2347
02:02:55,680 --> 02:03:01,350
modifiers and more fancy stuff but for

2348
02:02:58,080 --> 02:03:03,870
the basic stuff and many many of the

2349
02:03:01,350 --> 02:03:06,780
things we will run every day with eight

2350
02:03:03,870 --> 02:03:08,700
nine ten comment we we have not and of

2351
02:03:06,780 --> 02:03:12,809
course and then help pending a question

2352
02:03:08,700 --> 02:03:14,550
mark then other conclusions is that

2353
02:03:12,810 --> 02:03:16,560
there are many ways to contribute to

2354
02:03:14,550 --> 02:03:18,240
open source projects like rather two one

2355
02:03:16,560 --> 02:03:20,490
is with code of course but also writing

2356
02:03:18,240 --> 02:03:22,290
documentation using it and reporting the

2357
02:03:20,490 --> 02:03:24,660
issues if no one reports the issues that

2358
02:03:22,290 --> 02:03:27,060
they found they are unsolved so if you

2359
02:03:24,660 --> 02:03:28,440
find an issue just report it probably

2360
02:03:27,060 --> 02:03:30,600
pancake solves it in one minute but

2361
02:03:28,440 --> 02:03:33,540
that's another point

2362
02:03:30,600 --> 02:03:35,880
and use it and share it on with your

2363
02:03:33,540 --> 02:03:39,450
friends on conferences and that's it and

2364
02:03:35,880 --> 02:03:43,020
the final just the 30 second spam we

2365
02:03:39,450 --> 02:03:44,790
have the Arctic on for 2019 this year

2366
02:03:43,020 --> 02:03:46,950
it's community driven and through Ghana

2367
02:03:44,790 --> 02:03:49,620
community focused from four to seven of

2368
02:03:46,950 --> 02:03:52,050
September Barcelona we have trainings

2369
02:03:49,620 --> 02:03:53,940
both basic track so if you are really

2370
02:03:52,050 --> 02:03:56,010
interested me but you don't really have

2371
02:03:53,940 --> 02:03:58,440
an idea we have two days of full basic

2372
02:03:56,010 --> 02:04:01,650
trainings eight hours of Rod two and

2373
02:03:58,440 --> 02:04:03,330
then cuter and I guess other one of our

2374
02:04:01,650 --> 02:04:05,309
two internals and then we have another

2375
02:04:03,330 --> 02:04:06,990
track of headbands ones with code

2376
02:04:05,310 --> 02:04:10,190
obfuscation techniques with symbolic

2377
02:04:06,990 --> 02:04:12,630
execution and without to freedom and

2378
02:04:10,190 --> 02:04:15,750
then two days more of conference talks

2379
02:04:12,630 --> 02:04:17,430
technical talks for everyone and that's

2380
02:04:15,750 --> 02:04:19,440
it if you're interested just check the

2381
02:04:17,430 --> 02:04:22,350
Congress page and tickets are online on

2382
02:04:19,440 --> 02:04:27,379
that end of my star of my experiment end

2383
02:04:22,350 --> 02:04:27,380
of my talk thank you very much thank you

2384
02:04:35,239 --> 02:04:37,299
you

