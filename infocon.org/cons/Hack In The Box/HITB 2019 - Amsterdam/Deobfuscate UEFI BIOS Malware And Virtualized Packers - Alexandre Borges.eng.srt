1
00:00:19,220 --> 00:00:27,000
hello guys how are you my name is Elena

2
00:00:23,880 --> 00:00:32,098
Borges and I'm talking about the

3
00:00:27,000 --> 00:00:36,350
obfuscation on modern mowers it's a very

4
00:00:32,098 --> 00:00:39,480
nice interesting stuff to talk about

5
00:00:36,350 --> 00:00:44,760
of course my first language is not

6
00:00:39,480 --> 00:00:49,250
English in neither Dutch I'm sorry and I

7
00:00:44,760 --> 00:00:49,250
hope that you enjoy my presentation

8
00:00:49,370 --> 00:01:00,569
it's a my profile here and here we have

9
00:00:55,589 --> 00:01:05,519
our agenda about the topics that will be

10
00:01:00,570 --> 00:01:12,380
commented the only stock let's let's

11
00:01:05,519 --> 00:01:17,479
start what talk about our traversing

12
00:01:12,380 --> 00:01:24,030
normal days most morals have been using

13
00:01:17,479 --> 00:01:35,100
obfuscation and to protect the softer to

14
00:01:24,030 --> 00:01:40,260
protect the quote but I believe that in

15
00:01:35,100 --> 00:01:42,330
most cases the obfuscation was have you

16
00:01:40,260 --> 00:01:45,590
been using in to protect intellectual

17
00:01:42,330 --> 00:01:47,370
property emailing using in mailers

18
00:01:45,590 --> 00:01:53,400
memory threats

19
00:01:47,370 --> 00:01:58,110
it's it's a hot stuff around the world

20
00:01:53,400 --> 00:02:04,140
and some guys believe that obfuscation

21
00:01:58,110 --> 00:02:08,610
is able to hide or protected the code we

22
00:02:04,140 --> 00:02:15,060
know that it's not true vocation only by

23
00:02:08,610 --> 00:02:19,370
sometime maker or lives a harder to

24
00:02:15,060 --> 00:02:24,900
reverse the code but only that

25
00:02:19,370 --> 00:02:30,090
notification by sometime demands some

26
00:02:24,900 --> 00:02:33,660
resources to make the reverse path but

27
00:02:30,090 --> 00:02:37,830
it's something that every single day we

28
00:02:33,660 --> 00:02:41,910
have been analyzing a different kind of

29
00:02:37,830 --> 00:02:45,000
mirror tracks using for example VBA

30
00:02:41,910 --> 00:02:48,630
power shower and sink like that but in

31
00:02:45,000 --> 00:02:51,150
skills this kind of Marv is using very

32
00:02:48,630 --> 00:02:54,090
basic obfuscate techniques and

33
00:02:51,150 --> 00:02:56,819
sophisticated morals meaning this kind

34
00:02:54,090 --> 00:03:01,620
of emerge that I will comment here it

35
00:02:56,819 --> 00:03:06,599
was very complicated techniques of

36
00:03:01,620 --> 00:03:10,700
course we can use ila Pro SDK to write

37
00:03:06,599 --> 00:03:14,429
plugins every single day to extend its

38
00:03:10,700 --> 00:03:18,238
proportionalities show analyze

39
00:03:14,430 --> 00:03:22,770
code and data flow we can try to

40
00:03:18,239 --> 00:03:26,520
automate aging process unpacking process

41
00:03:22,770 --> 00:03:29,819
and mainly wicking write loaders to

42
00:03:26,520 --> 00:03:33,140
analyze for example in beer code in

43
00:03:29,819 --> 00:03:37,470
where code is a kind of interesting code

44
00:03:33,140 --> 00:03:41,970
because human mothers trying to infect

45
00:03:37,470 --> 00:03:45,690
MBR and you fi true compromise the

46
00:03:41,970 --> 00:03:50,730
systems in in platform over to Natalie

47
00:03:45,690 --> 00:03:53,700
suffers more most Packers in protectors

48
00:03:50,730 --> 00:03:58,200
like the middle like VM protect shorter

49
00:03:53,700 --> 00:04:02,129
and agile dotnet use very hard woof

50
00:03:58,200 --> 00:04:05,160
education tech techniques and our job is

51
00:04:02,129 --> 00:04:13,230
try to reverse a handle this kind of

52
00:04:05,160 --> 00:04:17,719
complexity this kind of code you just

53
00:04:13,230 --> 00:04:24,599
kind of put protectors usually are using

54
00:04:17,720 --> 00:04:27,449
64 code in Morris who usually geez

55
00:04:24,599 --> 00:04:30,090
Morris try to remove the imports

56
00:04:27,449 --> 00:04:34,580
understable a similar vein kind of

57
00:04:30,090 --> 00:04:38,948
mowers this kind of protections tried to

58
00:04:34,580 --> 00:04:45,130
encrypt an obfuscation string

59
00:04:38,949 --> 00:04:48,350
most time the strings are encrypted

60
00:04:45,130 --> 00:04:50,840
this kind of protectors trying to check

61
00:04:48,350 --> 00:04:53,919
the memory integrity for example it's

62
00:04:50,840 --> 00:04:57,070
very difficulty it's very hard to dunk

63
00:04:53,919 --> 00:05:01,310
the malware from the memory using

64
00:04:57,070 --> 00:05:05,060
volatility because most time we don't

65
00:05:01,310 --> 00:05:09,410
have all the instructions and clip the

66
00:05:05,060 --> 00:05:13,630
so this technique makes an almost

67
00:05:09,410 --> 00:05:21,800
impossible should dump more from memory

68
00:05:13,630 --> 00:05:26,120
additionally peckers similar to Tamira

69
00:05:21,800 --> 00:05:29,750
vm protection and things like that use a

70
00:05:26,120 --> 00:05:37,000
kind of visualization so we have the

71
00:05:29,750 --> 00:05:40,370
following situation we we have semi x86

72
00:05:37,000 --> 00:05:46,970
instructions translated through very

73
00:05:40,370 --> 00:05:51,199
specific in protect vm code so it's so

74
00:05:46,970 --> 00:05:54,740
hard because this kind of vivitrol

75
00:05:51,199 --> 00:06:01,240
machine is running a risk instruction so

76
00:05:54,740 --> 00:06:04,669
imagine I have x86 code translated

77
00:06:01,240 --> 00:06:12,860
through a flipper machine code using

78
00:06:04,669 --> 00:06:16,698
hisk and worst sometimes I have one

79
00:06:12,860 --> 00:06:19,849
instruction bill translated through four

80
00:06:16,699 --> 00:06:23,419
five eight different instructions so I

81
00:06:19,849 --> 00:06:24,650
don't have a kind of neck throw one

82
00:06:23,419 --> 00:06:27,469
strip you should show another

83
00:06:24,650 --> 00:06:29,299
instruction sometimes I have one

84
00:06:27,470 --> 00:06:32,270
instructions being translated the two

85
00:06:29,300 --> 00:06:39,169
very different instructions inside the

86
00:06:32,270 --> 00:06:43,130
VM filter machine code when use but

87
00:06:39,169 --> 00:06:48,389
netprotector's example

88
00:06:43,130 --> 00:06:53,090
protectors such as agile dotnet these

89
00:06:48,389 --> 00:06:57,450
guys try to rename classes methods

90
00:06:53,090 --> 00:07:02,400
fields and it's an external reference so

91
00:06:57,450 --> 00:07:08,639
make our lives so difficult some Packers

92
00:07:02,400 --> 00:07:13,260
as I mention it try to in quit being

93
00:07:08,639 --> 00:07:19,860
structures so we have a very complicated

94
00:07:13,260 --> 00:07:23,520
scenario because I have exits x86

95
00:07:19,860 --> 00:07:25,919
instruction being translated to avatar

96
00:07:23,520 --> 00:07:29,310
instruction and this instruction is

97
00:07:25,919 --> 00:07:31,950
encrypted on the memory so we we need

98
00:07:29,310 --> 00:07:35,160
true the cryptid is instruction a

99
00:07:31,950 --> 00:07:40,190
reverse the process to find the original

100
00:07:35,160 --> 00:07:44,639
instructions it's a very time-consuming

101
00:07:40,190 --> 00:07:48,110
working in job and I believe that it's

102
00:07:44,639 --> 00:07:52,289
take some time to do that

103
00:07:48,110 --> 00:07:57,180
most backers most protectors are based

104
00:07:52,289 --> 00:08:02,010
on stack so is this kind of technique

105
00:07:57,180 --> 00:08:05,250
makes almost impossible to handle

106
00:08:02,010 --> 00:08:08,280
utilize decode aesthetically so you need

107
00:08:05,250 --> 00:08:11,550
to make or use the same kind of

108
00:08:08,280 --> 00:08:13,760
emulation trick or living a dynamic

109
00:08:11,550 --> 00:08:20,460
emulation trick

110
00:08:13,760 --> 00:08:22,680
mostly suppose are polymers so as I told

111
00:08:20,460 --> 00:08:24,599
you I have one structure being

112
00:08:22,680 --> 00:08:27,479
translated to through several of

113
00:08:24,600 --> 00:08:33,990
different instructions it's not possible

114
00:08:27,479 --> 00:08:39,539
to make a mac from the X 886 instruction

115
00:08:33,990 --> 00:08:43,289
through the fertilise instruction these

116
00:08:39,539 --> 00:08:46,529
protectors are also insert lots of

117
00:08:43,289 --> 00:08:49,319
persons troops because my protection is

118
00:08:46,529 --> 00:08:52,189
based on the stack so there are lots of

119
00:08:49,320 --> 00:08:55,790
passion structures make a male

120
00:08:52,190 --> 00:09:00,120
performing fake

121
00:08:55,790 --> 00:09:06,599
pushing in this tech so make our job a

122
00:09:00,120 --> 00:09:12,000
bit harder we have we also have lots of

123
00:09:06,600 --> 00:09:17,640
death coach usual Scotch to try to mess

124
00:09:12,000 --> 00:09:18,750
our code through there are lots of Fuji

125
00:09:17,640 --> 00:09:22,040
Riordan

126
00:09:18,750 --> 00:09:25,410
for example using many original

127
00:09:22,040 --> 00:09:31,189
traditional jobs so it's a kind of

128
00:09:25,410 --> 00:09:34,050
baguette cause you know revert

129
00:09:31,190 --> 00:09:39,180
sophisticated protectors like the media

130
00:09:34,050 --> 00:09:43,829
like vme protects it so difficult there

131
00:09:39,180 --> 00:09:45,750
are lots of tricks being used and we try

132
00:09:43,830 --> 00:09:53,330
to use different techniques different

133
00:09:45,750 --> 00:09:57,600
tricks to handle all of these protectors

134
00:09:53,330 --> 00:10:01,250
also use code flattening code fatten is

135
00:09:57,600 --> 00:10:05,010
something like that firstly I have

136
00:10:01,250 --> 00:10:09,650
linear execution and code flat and try

137
00:10:05,010 --> 00:10:14,330
to create a branch of execution using

138
00:10:09,650 --> 00:10:21,689
different conditionals to make the

139
00:10:14,330 --> 00:10:27,770
reversing job or harder it's a small

140
00:10:21,690 --> 00:10:34,430
scheme here for example I have X it's

141
00:10:27,770 --> 00:10:39,900
x86 function being visualized by a

142
00:10:34,430 --> 00:10:42,750
protector name inside the virtual

143
00:10:39,900 --> 00:10:44,850
machine the in the special virtual

144
00:10:42,750 --> 00:10:50,190
machine we have a hangar

145
00:10:44,850 --> 00:10:54,960
so for each x86 instruction I have a

146
00:10:50,190 --> 00:10:58,020
handler trying to modify and process G's

147
00:10:54,960 --> 00:11:03,090
instructions so we needed to make the

148
00:10:58,020 --> 00:11:06,930
reverse process trying to give word from

149
00:11:03,090 --> 00:11:13,620
the Roberta's instruction to execute

150
00:11:06,930 --> 00:11:18,300
to x86 instruction therefore our job

151
00:11:13,620 --> 00:11:21,540
basically is our job not the job from

152
00:11:18,300 --> 00:11:23,640
the visualizer is to fetch instruction

153
00:11:21,540 --> 00:11:27,209
decode it because the most of the day

154
00:11:23,640 --> 00:11:30,630
are encrypted yeah after that find a

155
00:11:27,209 --> 00:11:34,099
handler and is a key to J's hinder so

156
00:11:30,630 --> 00:11:38,459
you can imagine you can think about

157
00:11:34,100 --> 00:11:43,880
virtual machines in scale as a kind of

158
00:11:38,459 --> 00:11:51,770
set of handlers one or more handler

159
00:11:43,880 --> 00:11:55,470
trying to process x86 instructions and

160
00:11:51,770 --> 00:11:59,699
there are several kind of tricks being

161
00:11:55,470 --> 00:12:02,940
used inside this kind of protective for

162
00:11:59,700 --> 00:12:05,970
example consultum fault basically this

163
00:12:02,940 --> 00:12:10,320
technique try to replace a constant by a

164
00:12:05,970 --> 00:12:13,709
bunch of code which results in the same

165
00:12:10,320 --> 00:12:17,550
constant pattern based application

166
00:12:13,709 --> 00:12:21,479
trying to exchange one instruction by a

167
00:12:17,550 --> 00:12:25,380
set of equivalent instructions we have

168
00:12:21,480 --> 00:12:30,870
four same many inline functions being

169
00:12:25,380 --> 00:12:37,439
called from the theater logic code we

170
00:12:30,870 --> 00:12:41,550
have many hvm techniques obviously we

171
00:12:37,440 --> 00:12:45,690
have that quote tons of that code there

172
00:12:41,550 --> 00:12:47,849
and we have code duplication and it's

173
00:12:45,690 --> 00:12:53,040
case is very specific impossible

174
00:12:47,850 --> 00:12:56,670
I have different brains of code I arrive

175
00:12:53,040 --> 00:13:02,790
at the same point this technique tried

176
00:12:56,670 --> 00:13:05,670
to make some confusion in our minds we

177
00:13:02,790 --> 00:13:10,290
have some kind of interaction contro

178
00:13:05,670 --> 00:13:12,719
interaction for example here call

179
00:13:10,290 --> 00:13:17,790
instruction try to appear in a stack

180
00:13:12,720 --> 00:13:19,110
pointer in the return point it's a kind

181
00:13:17,790 --> 00:13:22,980
of

182
00:13:19,110 --> 00:13:29,130
trick to skip some instruction so make

183
00:13:22,980 --> 00:13:33,530
description bad we have different kind

184
00:13:29,130 --> 00:13:38,220
of act exception manipulation there and

185
00:13:33,530 --> 00:13:42,959
mainly opaque paper opaque predicate in

186
00:13:38,220 --> 00:13:46,350
this case it's very crucial because we

187
00:13:42,960 --> 00:13:50,450
have different we have different

188
00:13:46,350 --> 00:13:54,570
conditions perfect for example we have

189
00:13:50,450 --> 00:13:56,940
two or more evaluations using jump if

190
00:13:54,570 --> 00:14:03,360
zero or jump if not zero

191
00:13:56,940 --> 00:14:07,980
back to back the coach right should try

192
00:14:03,360 --> 00:14:13,170
to deceiving us to believe that there

193
00:14:07,980 --> 00:14:18,480
are a kind of decision but I think both

194
00:14:13,170 --> 00:14:22,290
conditions are are a kind of conditional

195
00:14:18,480 --> 00:14:24,780
jump so we have two different brains but

196
00:14:22,290 --> 00:14:29,670
only one branch is taken in the other

197
00:14:24,780 --> 00:14:34,470
branch is that of course we have lots of

198
00:14:29,670 --> 00:14:37,640
us debugging techniques to bypass and we

199
00:14:34,470 --> 00:14:40,050
have some polymorphism and most obvious

200
00:14:37,640 --> 00:14:44,900
protectors right you use self

201
00:14:40,050 --> 00:14:50,240
modification codes like shell quotes to

202
00:14:44,900 --> 00:14:50,240
modify their coach during the runtime

203
00:14:52,250 --> 00:15:01,010
well we have some call stack

204
00:14:57,480 --> 00:15:05,730
manipulation through and to try to

205
00:15:01,010 --> 00:15:08,730
create several fake with ten points and

206
00:15:05,730 --> 00:15:13,740
so this kind of protection or try to

207
00:15:08,730 --> 00:15:17,190
hide the real return point in certain

208
00:15:13,740 --> 00:15:22,080
several different fake attorney points

209
00:15:17,190 --> 00:15:26,400
there it's it's possible to handle this

210
00:15:22,080 --> 00:15:30,650
kind of tricks and obfuscation yes it's

211
00:15:26,400 --> 00:15:33,110
possible for example we have diversity

212
00:15:30,650 --> 00:15:37,590
recursive is substitute

213
00:15:33,110 --> 00:15:40,290
using meth as me then we have symbolic

214
00:15:37,590 --> 00:15:44,070
equations system also using methods me

215
00:15:40,290 --> 00:15:47,160
an enemy has me obviously we have very

216
00:15:44,070 --> 00:15:50,040
good plugins and Ida Pro using for

217
00:15:47,160 --> 00:15:54,350
example coach invert Eliza we have

218
00:15:50,040 --> 00:15:57,959
Vienna attack we have V M sweep and

219
00:15:54,350 --> 00:16:05,340
every single plug-in tried to help us to

220
00:15:57,960 --> 00:16:13,260
kicking verses this kind of code my

221
00:16:05,340 --> 00:16:19,410
intention here is try to if I should

222
00:16:13,260 --> 00:16:25,080
show you is obfuscation coach and try to

223
00:16:19,410 --> 00:16:30,870
give versions for example imagine this

224
00:16:25,080 --> 00:16:38,790
situation I have only one instruction

225
00:16:30,870 --> 00:16:45,120
edge e^x is e^x the simple instruction

226
00:16:38,790 --> 00:16:49,260
can be converted to the second case to

227
00:16:45,120 --> 00:16:55,440
the third case to the fourteenth the

228
00:16:49,260 --> 00:16:58,650
question is this instruction is equal to

229
00:16:55,440 --> 00:17:05,870
this this and this

230
00:16:58,650 --> 00:17:11,550
how can I revert this from stage 4

231
00:17:05,869 --> 00:17:15,569
through stage one this kind of method

232
00:17:11,550 --> 00:17:18,209
digit just kind of trick is the thing in

233
00:17:15,569 --> 00:17:22,530
every single sophisticated model that I

234
00:17:18,209 --> 00:17:26,610
analyze every similarly here we have

235
00:17:22,530 --> 00:17:30,030
some possible tricks we have some

236
00:17:26,609 --> 00:17:35,600
possible techniques possible frameworks

237
00:17:30,030 --> 00:17:35,600
should do that one of them is metasoma

238
00:17:35,660 --> 00:17:43,950
metonymy is a great framework that works

239
00:17:39,570 --> 00:17:45,360
as a disassembler an assembler compiler

240
00:17:43,950 --> 00:17:48,450
linker he

241
00:17:45,360 --> 00:17:55,340
here I show you that the metas me is

242
00:17:48,450 --> 00:17:59,940
written in Ruby it performs back-tracing

243
00:17:55,340 --> 00:18:03,919
its parts several kinds of you platforms

244
00:17:59,940 --> 00:18:09,860
it supports several kind of formats I

245
00:18:03,920 --> 00:18:09,860
show you here how to install my task

246
00:18:14,720 --> 00:18:17,929
let's go

247
00:18:18,770 --> 00:18:29,879
I'm certain our code from stage 4 here

248
00:18:25,500 --> 00:18:33,570
so I try to initialization may pass

249
00:18:29,880 --> 00:18:40,770
insert our code here this code is

250
00:18:33,570 --> 00:18:45,418
exactly the same code I start the

251
00:18:40,770 --> 00:18:54,629
disassembly engine here and disassembly

252
00:18:45,419 --> 00:18:58,580
from day address 0 here

253
00:18:54,630 --> 00:19:03,179
I started the back-trace engine because

254
00:18:58,580 --> 00:19:06,360
Mehta's me works trying show is a kill

255
00:19:03,179 --> 00:19:12,510
the cold from the bottom should the

256
00:19:06,360 --> 00:19:23,120
beginning and making hypothesis yeah

257
00:19:12,510 --> 00:19:28,650
here I try to determine what's the

258
00:19:23,120 --> 00:19:35,040
effective instruction that the genes in

259
00:19:28,650 --> 00:19:40,110
time code so I try to a lot same

260
00:19:35,040 --> 00:19:43,649
education here and here I try to show

261
00:19:40,110 --> 00:19:49,040
the active instruction which might alter

262
00:19:43,650 --> 00:19:52,220
the final result you see is a very

263
00:19:49,040 --> 00:19:52,220
simple code

264
00:19:53,850 --> 00:20:05,600
I asked you to be here at the beginning

265
00:20:00,690 --> 00:20:11,390
of execution Mehta's me show us our

266
00:20:05,600 --> 00:20:11,389
disassembly coach is he killed

267
00:20:11,810 --> 00:20:24,770
instruction by instruction showing us

268
00:20:14,370 --> 00:20:31,040
the registers step by step in green yeah

269
00:20:24,770 --> 00:20:35,540
attend me toss me show us that II or

270
00:20:31,040 --> 00:20:47,790
instruction all of these instructions

271
00:20:35,540 --> 00:20:58,350
his roots in only EI x plus e CX and the

272
00:20:47,790 --> 00:21:03,440
show we can I will try to I will try to

273
00:20:58,350 --> 00:21:03,439
do a little demo here

274
00:21:17,500 --> 00:21:45,980
here you you see that our code is the

275
00:21:30,740 --> 00:21:51,080
same code okay yeah we can use it as you

276
00:21:45,980 --> 00:21:59,770
see our final result is here all of this

277
00:21:51,080 --> 00:21:59,770
code resulting e^x + px' return here

278
00:22:18,140 --> 00:22:28,340
the second part of our program show the

279
00:22:22,250 --> 00:22:31,310
effective instructions here so only

280
00:22:28,340 --> 00:22:37,060
descriptions try to alter the final

281
00:22:31,310 --> 00:22:41,210
result in our program additionally I

282
00:22:37,060 --> 00:22:44,899
will show you the that another technique

283
00:22:41,210 --> 00:22:47,210
for example here if emulation emulation

284
00:22:44,900 --> 00:22:51,530
is a very nice trick should be used

285
00:22:47,210 --> 00:22:54,530
every single day but emulation has a

286
00:22:51,530 --> 00:22:57,889
different approach to al-mu'tasim but

287
00:22:54,530 --> 00:23:02,660
works so well for example here I used

288
00:22:57,890 --> 00:23:07,400
you emu from is a kind of plug-in from

289
00:23:02,660 --> 00:23:11,450
Ida Pro together with Keystone's engine

290
00:23:07,400 --> 00:23:16,580
and capstone e engineer here so I show

291
00:23:11,450 --> 00:23:22,250
you how to install Keystone engine here

292
00:23:16,580 --> 00:23:26,960
it's so easy and once more I try to show

293
00:23:22,250 --> 00:23:31,930
you a little piece of code written in C

294
00:23:26,960 --> 00:23:39,230
language so trying to understand I

295
00:23:31,930 --> 00:23:45,340
define our macro here what me all the

296
00:23:39,230 --> 00:23:52,670
code should be do beef is created here I

297
00:23:45,340 --> 00:23:59,060
define L create my christening Jean here

298
00:23:52,670 --> 00:24:02,120
I try to make G disassembly G assembly

299
00:23:59,060 --> 00:24:08,840
instruction in n here

300
00:24:02,120 --> 00:24:15,020
I try to free the memory hi I am using a

301
00:24:08,840 --> 00:24:22,850
very simple make file here i compile our

302
00:24:15,020 --> 00:24:27,080
program here and i ask you to do so

303
00:24:22,850 --> 00:24:31,040
these instructions result in this Xcode

304
00:24:27,080 --> 00:24:37,159
I say with his ex coach in our file name

305
00:24:31,040 --> 00:24:45,580
is hacking the Box 2019 enemy s dot B

306
00:24:37,160 --> 00:24:52,040
and hoping inside the Ida Pro so now I

307
00:24:45,580 --> 00:24:56,570
I'm I have our code to be emulated using

308
00:24:52,040 --> 00:24:59,420
other techniques in this case I can try

309
00:24:56,570 --> 00:25:07,669
to have worth further if I can I can

310
00:24:59,420 --> 00:25:13,340
confirm that this code here means this

311
00:25:07,670 --> 00:25:17,210
instructions using capstone so I written

312
00:25:13,340 --> 00:25:22,820
a simple code in C language defining our

313
00:25:17,210 --> 00:25:27,290
code here in hex decimal using capstone

314
00:25:22,820 --> 00:25:35,210
and if you run you you have the same

315
00:25:27,290 --> 00:25:39,590
code so I open our coach in um oof um

316
00:25:35,210 --> 00:25:42,250
ooh is a kind of plug-in to Ida Pro you

317
00:25:39,590 --> 00:25:45,409
can download it from here

318
00:25:42,250 --> 00:25:49,760
install you need to install unicorn

319
00:25:45,410 --> 00:25:54,190
engine and when you install the UM new

320
00:25:49,760 --> 00:25:59,720
plug-in you can open our core code

321
00:25:54,190 --> 00:26:07,010
define the values of each register in

322
00:25:59,720 --> 00:26:12,410
our case e x 1 e c x6 and try to emulate

323
00:26:07,010 --> 00:26:18,770
when you start the emulation ec x is

324
00:26:12,410 --> 00:26:28,400
equal 7 why because our coach at CCA EI

325
00:26:18,770 --> 00:26:31,720
EI x + e CX i try to choose me as me to

326
00:26:28,400 --> 00:26:36,090
me as me is an excellent framework

327
00:26:31,720 --> 00:26:39,149
excellent miasma support

328
00:26:36,090 --> 00:26:43,039
the same image is the same with several

329
00:26:39,149 --> 00:26:47,029
kind of different platforms and mainly

330
00:26:43,039 --> 00:26:52,609
allows me to emulate code by using jij I

331
00:26:47,029 --> 00:26:57,929
show you how to install me at me here I

332
00:26:52,609 --> 00:27:01,799
made a kind of simple test using a

333
00:26:57,929 --> 00:27:10,519
sample from Mia's so discipline test I

334
00:27:01,799 --> 00:27:10,519
try on shellcode and I put a graph here

335
00:27:10,999 --> 00:27:25,379
so lets you try to focus on our code you

336
00:27:16,710 --> 00:27:25,979
see I hope our code made by Keystone

337
00:27:25,379 --> 00:27:35,908
here

338
00:27:25,979 --> 00:27:36,929
I chose x86 32 in Malaysia at the same

339
00:27:35,909 --> 00:27:43,249
our code here

340
00:27:36,929 --> 00:27:48,479
I used double well VM jitter engine I

341
00:27:43,249 --> 00:27:57,769
set up the initial address should use

342
00:27:48,479 --> 00:27:57,769
address I set up Dax human GC x - 6 I

343
00:27:57,799 --> 00:28:06,839
add a breakpoint in our quote the

344
00:28:02,609 --> 00:28:11,210
backbone the break point is o gz address

345
00:28:06,839 --> 00:28:16,469
or they start where this Plus this size

346
00:28:11,210 --> 00:28:23,129
and finally I run the emulation make a

347
00:28:16,469 --> 00:28:26,429
graph here metas my execution sorry me

348
00:28:23,129 --> 00:28:33,988
as me e is equation here the similar or

349
00:28:26,429 --> 00:28:40,499
code basically step by step in red here

350
00:28:33,989 --> 00:28:45,690
and finally our result EI x is equal KX

351
00:28:40,499 --> 00:28:49,609
plus CX here

352
00:28:45,690 --> 00:28:49,609
it's our graph

353
00:28:49,860 --> 00:28:58,689
but this kind of execution is based on

354
00:28:54,600 --> 00:29:04,360
numerical values the more instance the

355
00:28:58,690 --> 00:29:07,930
mole that I believe that there is a most

356
00:29:04,360 --> 00:29:11,620
interesting approach that using symbolic

357
00:29:07,930 --> 00:29:17,010
execution so using the same miasma here

358
00:29:11,620 --> 00:29:23,770
I hope our quote heat hacking in the Box

359
00:29:17,010 --> 00:29:29,100
2009 and EMS dot B I start a machine

360
00:29:23,770 --> 00:29:32,770
engine here using x86 totally to quote

361
00:29:29,100 --> 00:29:36,129
this assembler our code here and here

362
00:29:32,770 --> 00:29:43,200
exactly at this point I start our

363
00:29:36,130 --> 00:29:46,660
symbolic machine execution as you see

364
00:29:43,200 --> 00:29:50,950
you can see each instruction being

365
00:29:46,660 --> 00:29:57,970
executed one by one in yellow here with

366
00:29:50,950 --> 00:30:03,250
all the registers and at the end we have

367
00:29:57,970 --> 00:30:10,750
our result ei X is equal the initial KX

368
00:30:03,250 --> 00:30:13,960
plus CX this kind of trick is so nice to

369
00:30:10,750 --> 00:30:18,550
big squishy codes oh of course I choose

370
00:30:13,960 --> 00:30:21,670
I chose a very basic code here but in

371
00:30:18,550 --> 00:30:24,370
the Dell job there are many complicated

372
00:30:21,670 --> 00:30:33,820
situations the issues that we have you

373
00:30:24,370 --> 00:30:43,179
handled but that's it now let's talk

374
00:30:33,820 --> 00:30:45,260
about the BIOS and UEFI threats since

375
00:30:43,180 --> 00:30:48,420
Windows Vista

376
00:30:45,260 --> 00:30:50,280
basically the main protection against

377
00:30:48,420 --> 00:30:55,580
rootkits is based on Casillas

378
00:30:50,280 --> 00:30:58,830
kernel-mode code signing policy TCS is

379
00:30:55,580 --> 00:31:02,250
amazing to prevent against any kind of

380
00:30:58,830 --> 00:31:02,909
unsigned econo-mode oh that's okay work

381
00:31:02,250 --> 00:31:11,760
so well

382
00:31:02,910 --> 00:31:15,420
however most most mouths trying to

383
00:31:11,760 --> 00:31:22,230
attack a point before GCS is been

384
00:31:15,420 --> 00:31:27,210
running so TC has tried to check all

385
00:31:22,230 --> 00:31:31,700
kind of Drive signature and basically

386
00:31:27,210 --> 00:31:36,150
the main goals of rootkits is is

387
00:31:31,700 --> 00:31:39,060
true-bypass pcs by Devlin's by experts

388
00:31:36,150 --> 00:31:42,300
and v-phone ability by using driving

389
00:31:39,060 --> 00:31:46,020
with some kind of validus certification

390
00:31:42,300 --> 00:31:51,290
from from another vendor then trying to

391
00:31:46,020 --> 00:31:54,629
show Jesus Amos secure boot so direct

392
00:31:51,290 --> 00:32:01,250
lots of techniques to bypass key TCS

393
00:31:54,630 --> 00:32:08,160
nowadays all of them are being using by

394
00:32:01,250 --> 00:32:12,450
advancing members coding tire chain can

395
00:32:08,160 --> 00:32:20,580
be disabled by changing only one

396
00:32:12,450 --> 00:32:27,330
decision variable in Windows 7 since

397
00:32:20,580 --> 00:32:31,439
that secure boot is disabled so most of

398
00:32:27,330 --> 00:32:34,490
our tracks almost ship by using ufi

399
00:32:31,440 --> 00:32:39,690
tracks and try to attack early stages

400
00:32:34,490 --> 00:32:42,300
before 2 CS because TCS is only so

401
00:32:39,690 --> 00:32:47,910
effective against rich kids but is not

402
00:32:42,300 --> 00:32:52,669
effective against boot kids since the

403
00:32:47,910 --> 00:32:55,590
windows 8 we Windows 8 and Windows 10

404
00:32:52,670 --> 00:32:58,110
the coding technique can be disabled to

405
00:32:55,590 --> 00:33:02,699
only change one variable because

406
00:32:58,110 --> 00:33:06,840
there are lots of variables acting to to

407
00:33:02,700 --> 00:33:10,220
force the key CS so now the polenta

408
00:33:06,840 --> 00:33:12,959
grits is so hard should bypass and

409
00:33:10,220 --> 00:33:17,820
mothers have been using different

410
00:33:12,960 --> 00:33:20,929
techniques to do that so GCSE is not

411
00:33:17,820 --> 00:33:26,639
able to fight against butch kids

412
00:33:20,929 --> 00:33:32,250
TCS is amazing against route kids that

413
00:33:26,640 --> 00:33:37,950
use any kind of Malaysian driver but is

414
00:33:32,250 --> 00:33:41,399
not effective against butch kids so in

415
00:33:37,950 --> 00:33:44,070
case we have the secure boot so helpless

416
00:33:41,399 --> 00:33:46,949
because of City reboot check the

417
00:33:44,070 --> 00:33:50,129
integrals of Windows boot files and UEFI

418
00:33:46,950 --> 00:33:55,200
companies and may check the boot loading

419
00:33:50,130 --> 00:34:03,000
tragedy so during the boot process we

420
00:33:55,200 --> 00:34:06,960
have the key CS acting on the driver

421
00:34:03,000 --> 00:34:10,379
loading but before this point we have to

422
00:34:06,960 --> 00:34:13,740
use a different protection in its case

423
00:34:10,379 --> 00:34:23,629
we we can use six security boots to do

424
00:34:13,739 --> 00:34:27,418
that only Oh Stan mainly they we have

425
00:34:23,629 --> 00:34:33,949
improve protection name is vito Sakura

426
00:34:27,418 --> 00:34:37,408
mochi VSM is a kind of isolation between

427
00:34:33,949 --> 00:34:37,949
system files critical files and user

428
00:34:37,409 --> 00:34:46,589
files

429
00:34:37,949 --> 00:34:49,618
so now non-critical drivers are not able

430
00:34:46,589 --> 00:34:52,949
to disable the integrity code did the

431
00:34:49,619 --> 00:34:54,389
integral checking because they run in in

432
00:34:52,949 --> 00:35:00,330
a different place in a different

433
00:34:54,389 --> 00:35:04,200
container on williston as you know VSM

434
00:35:00,330 --> 00:35:07,220
is composed by a local security kernel

435
00:35:04,200 --> 00:35:11,520
mode called integrity and a hypervisor

436
00:35:07,220 --> 00:35:15,240
coding taglish true in Williston

437
00:35:11,520 --> 00:35:22,350
finally we have a device world that is

438
00:35:15,240 --> 00:35:25,020
composited by CCI VSM and finally the

439
00:35:22,350 --> 00:35:27,839
main point here the platform a UEFI

440
00:35:25,020 --> 00:35:31,710
secure boot which protects us against

441
00:35:27,840 --> 00:35:37,100
you fil boot companies by using digital

442
00:35:31,710 --> 00:35:42,540
signage for unfortunate to use the

443
00:35:37,100 --> 00:35:45,960
advantages of device world or driver's

444
00:35:42,540 --> 00:35:50,009
knee hard drives cannot load data as

445
00:35:45,960 --> 00:35:55,650
suitable coach can alter anything on the

446
00:35:50,010 --> 00:35:56,990
system memory can be is equitable or

447
00:35:55,650 --> 00:36:00,510
right well at the same time

448
00:35:56,990 --> 00:36:05,839
unfortunately members don't follow this

449
00:36:00,510 --> 00:36:10,980
procedure these rules so muggers don't

450
00:36:05,840 --> 00:36:18,000
don't work in own systems using device

451
00:36:10,980 --> 00:36:22,410
world winners also offers Allah early

452
00:36:18,000 --> 00:36:25,109
lunch on our protection basically Allah

453
00:36:22,410 --> 00:36:28,200
is based on callback methods so which

454
00:36:25,109 --> 00:36:32,490
monitors drivers in registers you like

455
00:36:28,200 --> 00:36:36,149
to classify drivers in good bad and no

456
00:36:32,490 --> 00:36:41,240
based based on the images named hash has

457
00:36:36,150 --> 00:36:45,210
ruled location educational or publisher

458
00:36:41,240 --> 00:36:49,740
there are four different policies to

459
00:36:45,210 --> 00:36:52,859
illa basically we you a basic that day

460
00:36:49,740 --> 00:36:56,368
for one is enough because the FDA

461
00:36:52,859 --> 00:37:00,450
because of the deform one allows to load

462
00:36:56,369 --> 00:37:04,640
bad critical drivers but not allowed to

463
00:37:00,450 --> 00:37:09,509
lodge non-critical drivers so in case

464
00:37:04,640 --> 00:37:14,879
the default policy is enough to detect

465
00:37:09,510 --> 00:37:18,410
mowers but it not it doesn't prevent the

466
00:37:14,880 --> 00:37:18,410
Windows machine attribute

467
00:37:28,290 --> 00:37:34,540
once more Allah is excellent against

468
00:37:31,720 --> 00:37:37,270
which kids but it's not appropriate to

469
00:37:34,540 --> 00:37:42,610
boot kids but why because you know I

470
00:37:37,270 --> 00:37:49,470
only is running after we know Jersey we

471
00:37:42,610 --> 00:37:52,750
start it's easy q shown in like systems

472
00:37:49,470 --> 00:37:57,310
we have a different kind of ways to

473
00:37:52,750 --> 00:38:02,260
compromise this system for example we

474
00:37:57,310 --> 00:38:06,490
can try to compromise MBR we can't you

475
00:38:02,260 --> 00:38:12,490
compromise DVB are in this case mal

476
00:38:06,490 --> 00:38:18,279
tried to change the IPL address to lodge

477
00:38:12,490 --> 00:38:22,029
a malicious code by using a very

478
00:38:18,280 --> 00:38:25,000
specific field damage hiding sectors so

479
00:38:22,030 --> 00:38:28,990
in case hiding sectors is inside should

480
00:38:25,000 --> 00:38:34,330
be BP v BP is a BIOS paper a metal block

481
00:38:28,990 --> 00:38:40,060
b BP the Maura tried to change this

482
00:38:34,330 --> 00:38:49,450
field to lows malicious code instead of

483
00:38:40,060 --> 00:38:54,009
loading the IPR most time this malicious

484
00:38:49,450 --> 00:38:58,689
code could be load from a hiding a file

485
00:38:54,010 --> 00:39:02,490
system normally or in the beginning of

486
00:38:58,690 --> 00:39:17,810
the disk or in the end of the disk in

487
00:39:02,490 --> 00:39:22,669
this code is encrypted most time more

488
00:39:17,810 --> 00:39:28,740
so we know that to compromise the IPR

489
00:39:22,670 --> 00:39:35,119
could cause a possibility of launching a

490
00:39:28,740 --> 00:39:38,160
malicious quote from from hiding stars

491
00:39:35,119 --> 00:39:43,770
instead of loading the booty Minaj model

492
00:39:38,160 --> 00:39:46,020
the malicious IPL could load the

493
00:39:43,770 --> 00:39:48,900
abolition cannot drive during Jesus

494
00:39:46,020 --> 00:39:52,920
process and worse

495
00:39:48,900 --> 00:39:59,880
most of the malicious IPL code that I've

496
00:39:52,920 --> 00:40:07,490
been advancing are polymorphic here you

497
00:39:59,880 --> 00:40:12,710
see our hiding sector from B from B BP

498
00:40:07,490 --> 00:40:16,379
and most tracks try to change this field

499
00:40:12,710 --> 00:40:21,770
chooser kills another coach a malicious

500
00:40:16,380 --> 00:40:21,770
code instead of the execution the IPL

501
00:40:30,619 --> 00:40:38,190
once the boot manager model is loaded

502
00:40:35,280 --> 00:40:41,250
the Mars bow is tried to see circumvent

503
00:40:38,190 --> 00:40:45,180
the coding tigress the verification in

504
00:40:41,250 --> 00:40:47,460
this case in this specific case the

505
00:40:45,180 --> 00:40:51,710
coaching tag which is handled by the

506
00:40:47,460 --> 00:40:55,320
boot manager and window jersey so the

507
00:40:51,710 --> 00:40:58,609
goal of each Mary is trying to

508
00:40:55,320 --> 00:40:58,609
circumvent both ones

509
00:41:01,250 --> 00:41:08,310
once the coding Tigers checking has been

510
00:41:04,650 --> 00:41:11,730
disabled so it's possible to replace any

511
00:41:08,310 --> 00:41:16,830
important code an important file from

512
00:41:11,730 --> 00:41:22,200
the Butch companies like chicken dot DL

513
00:41:16,830 --> 00:41:24,130
should compromise the system's plate a

514
00:41:22,200 --> 00:41:29,779
shoe here

515
00:41:24,130 --> 00:41:34,280
modern mothers trying to compromise very

516
00:41:29,780 --> 00:41:38,330
fundamental essential disc services from

517
00:41:34,280 --> 00:41:43,400
BIOS like extend reach extend right and

518
00:41:38,330 --> 00:41:48,140
mainly get drive parameters more most

519
00:41:43,400 --> 00:41:52,160
drivers or mosque mirror trying to be

520
00:41:48,140 --> 00:41:57,920
worth Jesus Pacific interruption in

521
00:41:52,160 --> 00:42:04,009
starting that that's a very sensual

522
00:41:57,920 --> 00:42:07,430
corruption responsible from responsible

523
00:42:04,010 --> 00:42:11,390
by any kind of reading rights operation

524
00:42:07,430 --> 00:42:13,730
in try to compromise the boot manners

525
00:42:11,390 --> 00:42:20,089
the wing load tzatzi and the candles

526
00:42:13,730 --> 00:42:24,550
room here I tried to show a very simple

527
00:42:20,090 --> 00:42:30,140
way a very simple trick to analyze

528
00:42:24,550 --> 00:42:35,030
infected MBR I extracted the MBR from

529
00:42:30,140 --> 00:42:42,230
the disk and I disassembled using Ida

530
00:42:35,030 --> 00:42:48,710
Pro remember we are worth in 16-bit

531
00:42:42,230 --> 00:42:51,980
quote so here we have clean MBR and here

532
00:42:48,710 --> 00:43:00,170
we have in fact aim we are in scales

533
00:42:51,980 --> 00:43:03,260
from Pecha we can ask try to convert

534
00:43:00,170 --> 00:43:09,640
that show - in fact video to machine

535
00:43:03,260 --> 00:43:13,630
code use reference temperature convert

536
00:43:09,640 --> 00:43:20,319
the filter machine disk to RO disk

537
00:43:13,630 --> 00:43:25,970
extract the MBR from there and use box

538
00:43:20,320 --> 00:43:31,390
for example - should emulate this code

539
00:43:25,970 --> 00:43:35,750
here I show you a very simple box file

540
00:43:31,390 --> 00:43:38,629
configuration the main points are in

541
00:43:35,750 --> 00:43:45,030
yellow he

542
00:43:38,630 --> 00:43:49,380
yeah I show you how to start debug the

543
00:43:45,030 --> 00:43:52,820
Malaysia machine here so I set up the

544
00:43:49,380 --> 00:43:57,180
breakpoints in the classical maybe I

545
00:43:52,820 --> 00:44:00,030
maybe we are start place I list the bit

546
00:43:57,180 --> 00:44:03,960
point I started the coach and I'd the

547
00:44:00,030 --> 00:44:08,850
same day cause when I need here by

548
00:44:03,960 --> 00:44:09,920
hitting s I came as a huge M we are step

549
00:44:08,850 --> 00:44:21,600
by step called

550
00:44:09,920 --> 00:44:27,530
instruction by instruction here I show

551
00:44:21,600 --> 00:44:36,930
you the in fact a maybe I quote being a

552
00:44:27,530 --> 00:44:40,950
debug by I'll opera then I try to show a

553
00:44:36,930 --> 00:44:44,399
different approach here we can we can

554
00:44:40,950 --> 00:44:48,930
try to analyze I in fact the ami by

555
00:44:44,400 --> 00:44:51,570
quote by using Ida Pro from different

556
00:44:48,930 --> 00:44:57,779
ways in scales you can download this

557
00:44:51,570 --> 00:45:02,280
script from G's website is it mainly

558
00:44:57,780 --> 00:45:12,210
here the last two lines to point to your

559
00:45:02,280 --> 00:45:15,690
in fact aim we are that's it

560
00:45:12,210 --> 00:45:22,740
another much better approach is trying

561
00:45:15,690 --> 00:45:27,180
to use the debugger inside inside the VM

562
00:45:22,740 --> 00:45:31,319
ER workstation so you needed to change

563
00:45:27,180 --> 00:45:36,080
the vm x configuration by inserting

564
00:45:31,320 --> 00:45:41,190
these points in up in orange here

565
00:45:36,080 --> 00:45:44,840
poverty theater machine so if you launch

566
00:45:41,190 --> 00:45:52,220
the ida pro go to the burger attached

567
00:45:44,840 --> 00:45:58,130
remote gdb debugger set up some settings

568
00:45:52,220 --> 00:46:06,589
here local machine in Jesus Pacific

569
00:45:58,130 --> 00:46:12,740
apart attach to your process go to views

570
00:46:06,590 --> 00:46:17,030
open subviews segments and try to edge

571
00:46:12,740 --> 00:46:25,450
it segments changing from teletovic to

572
00:46:17,030 --> 00:46:25,450
six should stick submit code here

573
00:46:26,020 --> 00:46:30,759
clicking ok

574
00:46:28,510 --> 00:46:34,700
set a breakpoint

575
00:46:30,760 --> 00:46:42,230
let's start off Amy we are choose

576
00:46:34,700 --> 00:46:46,970
enabled an hard grid point and that's it

577
00:46:42,230 --> 00:46:52,940
you are able to debug unlife Amy we are

578
00:46:46,970 --> 00:46:58,160
alive in fact Amy we are by using gdb

579
00:46:52,940 --> 00:47:04,640
and Ida Pro here is a complete overview

580
00:46:58,160 --> 00:47:09,339
about our topics that's the sequence we

581
00:47:04,640 --> 00:47:15,560
have the BIOS is the cuting f mb r vb r

582
00:47:09,340 --> 00:47:22,120
IPL the boot manager or if you are using

583
00:47:15,560 --> 00:47:26,590
UEFI machine you EFI boot manager efi

584
00:47:22,120 --> 00:47:28,339
after that us a key to the BCG window gz

585
00:47:26,590 --> 00:47:31,420
window tizzy

586
00:47:28,340 --> 00:47:35,420
it's a preference it's a preferred

587
00:47:31,420 --> 00:47:38,810
target shoot from boo-booed kids and

588
00:47:35,420 --> 00:47:39,880
this this guy is start several

589
00:47:38,810 --> 00:47:44,270
components

590
00:47:39,880 --> 00:47:48,010
checking the integrity and for example

591
00:47:44,270 --> 00:47:48,009
using ill in this case

592
00:47:49,960 --> 00:47:58,240
most modern mowers try to manipulate the

593
00:47:55,880 --> 00:48:02,150
driver stack

594
00:47:58,240 --> 00:48:05,720
so as you know most drivers are

595
00:48:02,150 --> 00:48:12,500
developing using a pair of drivers class

596
00:48:05,720 --> 00:48:16,759
drivers iana in a min driver here a most

597
00:48:12,500 --> 00:48:20,990
kind of in most different monitors

598
00:48:16,760 --> 00:48:25,820
programs trying to monitor Jesus tach

599
00:48:20,990 --> 00:48:29,750
but most both most of malicious drivers

600
00:48:25,820 --> 00:48:33,740
call a local driver function to bypass

601
00:48:29,750 --> 00:48:37,010
all of these companies all of these

602
00:48:33,740 --> 00:48:40,129
drivers that are being monitored and

603
00:48:37,010 --> 00:48:42,830
trying to access directly the filter

604
00:48:40,130 --> 00:49:00,140
driver here so making all the

605
00:48:42,830 --> 00:49:03,860
multi-racial useless another possible

606
00:49:00,140 --> 00:49:09,920
tricks here is right to hooking this

607
00:49:03,860 --> 00:49:14,540
this handler image mej internal control

608
00:49:09,920 --> 00:49:19,130
handler to manipulate the data flow to

609
00:49:14,540 --> 00:49:21,470
the disc most boot kissing could include

610
00:49:19,130 --> 00:49:23,990
kids mainly hood kids trying shoes

611
00:49:21,470 --> 00:49:26,959
callback methods combat magazine is a

612
00:49:23,990 --> 00:49:32,000
kind of modern hooking technique Quebec

613
00:49:26,960 --> 00:49:36,230
methods allows shoe being notified when

614
00:49:32,000 --> 00:49:42,260
a process or kind of a model is mapped

615
00:49:36,230 --> 00:49:45,080
into memory allows shoe being notified

616
00:49:42,260 --> 00:49:48,250
when a tread starts when the system

617
00:49:45,080 --> 00:49:48,250
should shut down

618
00:49:49,090 --> 00:50:00,320
here I'll show receive any kind of

619
00:49:55,130 --> 00:50:03,470
notification before should now allows to

620
00:50:00,320 --> 00:50:07,630
be notified when a process start or

621
00:50:03,470 --> 00:50:09,879
finish and mainly this this technique is

622
00:50:07,630 --> 00:50:14,060
well known

623
00:50:09,880 --> 00:50:17,660
nowadays most modern mothers try to use

624
00:50:14,060 --> 00:50:21,460
callback methods should keep the

625
00:50:17,660 --> 00:50:25,069
persistence for example when you try to

626
00:50:21,460 --> 00:50:28,910
change or to remove the persistence of

627
00:50:25,070 --> 00:50:31,790
them are from the registry a cop a

628
00:50:28,910 --> 00:50:37,640
callback method is call it and the mayor

629
00:50:31,790 --> 00:50:41,720
is able to put back its angry there so

630
00:50:37,640 --> 00:50:45,710
it's almost impossible to change the

631
00:50:41,720 --> 00:50:53,299
register without using any kind of

632
00:50:45,710 --> 00:50:54,560
special trick here some hours have been

633
00:50:53,300 --> 00:50:57,410
compromised

634
00:50:54,560 --> 00:51:00,859
geez interruption interruption one

635
00:50:57,410 --> 00:51:04,790
because gzip someone is responsible for

636
00:51:00,859 --> 00:51:11,450
handling debug events same MO is try to

637
00:51:04,790 --> 00:51:15,740
hide the information here in hiding

638
00:51:11,450 --> 00:51:19,359
partitions info file system other maras

639
00:51:15,740 --> 00:51:22,759
try to hook the drive and launch

640
00:51:19,359 --> 00:51:27,259
function to preventing range from

641
00:51:22,760 --> 00:51:32,660
unloaded a malicious model some merits

642
00:51:27,260 --> 00:51:36,349
try to use the specific API in it a race

643
00:51:32,660 --> 00:51:42,470
car driver to force a able to load a ma

644
00:51:36,349 --> 00:51:45,440
a malicious driver and fume ours have

645
00:51:42,470 --> 00:51:49,040
you been using this technique cooking

646
00:51:45,440 --> 00:51:53,480
using a int night scene interruptions

647
00:51:49,040 --> 00:52:02,470
through launch are infected MBR into the

648
00:51:53,480 --> 00:52:06,980
moment into the memory like the system's

649
00:52:02,470 --> 00:52:11,089
gene didn't have any kind of standard so

650
00:52:06,980 --> 00:52:14,839
it was so difficult refactoring nowadays

651
00:52:11,089 --> 00:52:19,070
using UEFI systems is much easier

652
00:52:14,839 --> 00:52:24,580
because there is up stoner

653
00:52:19,070 --> 00:52:34,010
we don't have in VA vb r e IPL anymore

654
00:52:24,580 --> 00:52:38,540
nowadays it's simpler than before my

655
00:52:34,010 --> 00:52:41,720
fight is started in a spi flash you are

656
00:52:38,540 --> 00:52:46,850
able to dunk the spi flash using

657
00:52:41,720 --> 00:52:49,430
hardware or software and most in most of

658
00:52:46,850 --> 00:52:56,080
this code is run in protect mode

659
00:52:49,430 --> 00:52:56,080
difference from M we are so in scale

660
00:52:56,590 --> 00:53:02,360
human Morris

661
00:52:58,490 --> 00:53:06,890
have you been trying to attack this

662
00:53:02,360 --> 00:53:12,440
specific and new bootloader butch mg fe

663
00:53:06,890 --> 00:53:15,080
w dot e yo Fi because this guy is we

664
00:53:12,440 --> 00:53:20,500
suppose is responsible to locate to

665
00:53:15,080 --> 00:53:27,620
locate the sky wing lodge Dodge EFI

666
00:53:20,500 --> 00:53:32,540
technical order since Windows 8 thanks

667
00:53:27,620 --> 00:53:33,230
God there are support through fi

668
00:53:32,540 --> 00:53:36,170
securable

669
00:53:33,230 --> 00:53:39,920
don't make a mess even physically boots

670
00:53:36,170 --> 00:53:45,470
is different from a secure boot you fi

671
00:53:39,920 --> 00:53:48,740
secure boot protect us protect the boot

672
00:53:45,470 --> 00:53:53,149
components for example OS boot loaders

673
00:53:48,740 --> 00:53:56,810
UEFI 3ghz drivers is someone for from

674
00:53:53,150 --> 00:54:01,880
any kind of modifications so in its

675
00:53:56,810 --> 00:54:03,529
cases the UEFI secure boot is so

676
00:54:01,880 --> 00:54:06,260
effectively to protect the boot

677
00:54:03,530 --> 00:54:09,760
component the boot process but it's not

678
00:54:06,260 --> 00:54:13,420
effective to protect against any kind of

679
00:54:09,760 --> 00:54:13,420
film or infection

680
00:54:15,619 --> 00:54:23,239
the UEFI secure wood is based on picky

681
00:54:18,789 --> 00:54:27,499
picky picky I to validate you were fine

682
00:54:23,239 --> 00:54:31,690
models so all all of this protection is

683
00:54:27,499 --> 00:54:31,689
based on digital certificates

684
00:54:32,019 --> 00:54:39,618
unfortunately recently I discovered that

685
00:54:36,519 --> 00:54:42,979
this approach doesn't work with tears as

686
00:54:39,619 --> 00:54:48,400
equitable because this kind of specific

687
00:54:42,979 --> 00:54:51,649
for much not support they embedded

688
00:54:48,400 --> 00:54:54,499
digital signatures so if I don't have

689
00:54:51,650 --> 00:54:58,219
digital signage so I don't have how to

690
00:54:54,499 --> 00:55:04,629
protect the coach using the set

691
00:54:58,219 --> 00:55:04,630
certified designing these techniques

692
00:55:05,890 --> 00:55:13,460
Wi-Fi secure boot is proposed by several

693
00:55:09,529 --> 00:55:16,579
companies in scales platform key the

694
00:55:13,460 --> 00:55:19,450
platform key in scales establish a

695
00:55:16,579 --> 00:55:26,109
relationship between the platform and

696
00:55:19,450 --> 00:55:33,189
the platform filmer this platform is key

697
00:55:26,109 --> 00:55:36,430
verify the CAC ki ki ki he exchange key

698
00:55:33,190 --> 00:55:40,430
the CAC establish a relationship between

699
00:55:36,430 --> 00:55:44,960
the platform filled with humor and OS so

700
00:55:40,430 --> 00:55:48,169
we have relationship between the pad for

701
00:55:44,960 --> 00:55:50,779
no honor it the putter from swimmer and

702
00:55:48,170 --> 00:55:58,279
after that knee between the putter

703
00:55:50,779 --> 00:56:02,719
firmer and OS the CAC tried to verify

704
00:55:58,279 --> 00:56:07,640
should database they DB and

705
00:56:02,719 --> 00:56:09,890
dbx DB 2 contains outer the Einstein

706
00:56:07,640 --> 00:56:13,430
state certification gist of silencers

707
00:56:09,890 --> 00:56:16,029
and GPX contain for building

708
00:56:13,430 --> 00:56:19,940
certificates additional scientist here

709
00:56:16,029 --> 00:56:23,960
of course if the platform key is

710
00:56:19,940 --> 00:56:28,119
corrupted automatically basically mode

711
00:56:23,960 --> 00:56:28,119
turns out disabled

712
00:56:34,240 --> 00:56:44,750
there are two another database name gb r

713
00:56:39,580 --> 00:56:48,620
gb r gb g gb r contains the public key

714
00:56:44,750 --> 00:56:52,160
uses it to validate gos click over load

715
00:56:48,620 --> 00:56:54,230
of signatures gb g contains basically

716
00:56:52,160 --> 00:57:00,399
the Tatem is typing to avoid which

717
00:56:54,230 --> 00:57:07,900
prevents using any kind of a expired

718
00:57:00,400 --> 00:57:11,390
certificates as you can see all of the

719
00:57:07,900 --> 00:57:16,280
protection is based on integrals of the

720
00:57:11,390 --> 00:57:18,560
SPI flash of course if the SPI flash is

721
00:57:16,280 --> 00:57:25,370
compromised everything else is

722
00:57:18,560 --> 00:57:28,490
compromised true most merits have been

723
00:57:25,370 --> 00:57:29,000
trying to modify the spi flash cotton

724
00:57:28,490 --> 00:57:32,359
tank

725
00:57:29,000 --> 00:57:37,490
why because doing that it's possible to

726
00:57:32,360 --> 00:57:41,900
disable the city reboot true so nowadays

727
00:57:37,490 --> 00:57:45,740
we we have to use different tricks to

728
00:57:41,900 --> 00:57:50,000
protect the spi flash in this case there

729
00:57:45,740 --> 00:57:55,339
are some techniques some new protections

730
00:57:50,000 --> 00:58:00,670
to protect the spi the verified boot we

731
00:57:55,340 --> 00:58:05,000
which checks the platform of humor and

732
00:58:00,670 --> 00:58:07,400
mainly the measured mood that get hash

733
00:58:05,000 --> 00:58:15,290
from the boot companies and stars in

734
00:58:07,400 --> 00:58:20,960
ttpm the best process here to boot a ufi

735
00:58:15,290 --> 00:58:28,520
machine is composed by g ii c sack p i g

736
00:58:20,960 --> 00:58:32,600
XE g des cos g SL h e NL that it's here

737
00:58:28,520 --> 00:58:36,560
but the main points the main components

738
00:58:32,600 --> 00:58:39,680
are VDS range XE that are responsible

739
00:58:36,560 --> 00:58:42,040
for find the bootloader to Mozart's

740
00:58:39,680 --> 00:58:42,040
system

741
00:58:47,020 --> 00:58:55,700
you you must remember some key points

742
00:58:52,340 --> 00:59:00,380
about semm as Mamie is a kind of god

743
00:58:55,700 --> 00:59:05,060
mode so is a very interesting place to

744
00:59:00,380 --> 00:59:08,780
hide mouths because it's protecting from

745
00:59:05,060 --> 00:59:12,700
OSN hypervisors gsm amy is equitable

746
00:59:08,780 --> 00:59:15,650
quality basically copied true as Amira

747
00:59:12,700 --> 00:59:20,359
unlock that should make the

748
00:59:15,650 --> 00:59:25,300
initialization she switched true s mmm

749
00:59:20,360 --> 00:59:30,740
it's necessary to trigger SMI trigger

750
00:59:25,300 --> 00:59:35,060
SMI handler system a little triangle to

751
00:59:30,740 --> 00:59:38,299
make this transition then as you know

752
00:59:35,060 --> 00:59:42,470
the SMI handler is a kind of interface

753
00:59:38,300 --> 00:59:45,770
between us and hardware true so most

754
00:59:42,470 --> 00:59:49,339
time I've missing a some Maurice trying

755
00:59:45,770 --> 00:59:52,160
to compromise the SMM driver in its case

756
00:59:49,340 --> 00:59:53,660
to gain the same privilege and from

757
00:59:52,160 --> 00:59:59,779
there should say both the flash

758
00:59:53,660 --> 01:00:01,670
protection to in fact the XZ driver so

759
00:59:59,780 --> 01:00:05,600
the common path

760
01:00:01,670 --> 01:00:11,350
I tried true is accuse our user length a

761
01:00:05,600 --> 01:00:16,759
coach running a driver as a hood kid

762
01:00:11,350 --> 01:00:20,890
true escalate us mmm true compromise G

763
01:00:16,760 --> 01:00:20,890
SPI flash in your machine

764
01:00:23,350 --> 01:00:32,600
once the OS acute it is disabled you can

765
01:00:30,290 --> 01:00:37,160
manipulate everything in your machine

766
01:00:32,600 --> 01:00:42,080
because the password which protects

767
01:00:37,160 --> 01:00:46,540
several areas and you find them by

768
01:00:42,080 --> 01:00:46,540
executing this probably will

769
01:00:47,140 --> 01:00:54,490
The Bachelor you only run after the boot

770
01:00:50,349 --> 01:00:57,780
process so it's a very problem for for

771
01:00:54,490 --> 01:01:03,490
us where else

772
01:00:57,780 --> 01:01:07,869
so we have the or a secure boot trying

773
01:01:03,490 --> 01:01:11,140
to protect our drivers before that we

774
01:01:07,869 --> 01:01:14,760
have the UEFI secure boot trying to

775
01:01:11,140 --> 01:01:19,950
prevent any kind of attack to modify

776
01:01:14,760 --> 01:01:24,339
compounds before the OS stage before

777
01:01:19,950 --> 01:01:26,980
before you fi secure boot we have the

778
01:01:24,339 --> 01:01:29,880
boot word the booty body is a very

779
01:01:26,980 --> 01:01:34,690
efficient technique to protect or

780
01:01:29,880 --> 01:01:37,869
machine based on this and before this

781
01:01:34,690 --> 01:01:41,920
point we have the bios version which

782
01:01:37,869 --> 01:01:51,670
tries to be bernanke then Tagish of the

783
01:01:41,920 --> 01:01:55,180
BIOS i'm almost finishing the boot part

784
01:01:51,670 --> 01:01:59,190
is amazing to verify the boot process by

785
01:01:55,180 --> 01:02:04,808
flashing a very specific public key

786
01:01:59,190 --> 01:02:07,210
associated a bio cynosure into fpf fuge

787
01:02:04,809 --> 01:02:11,220
programmer fuses these are kind of

788
01:02:07,210 --> 01:02:15,460
hardware inside the processor inside the

789
01:02:11,220 --> 01:02:19,899
flash it's a perfect solutions i'm i

790
01:02:15,460 --> 01:02:23,470
don't think so because some vendors have

791
01:02:19,900 --> 01:02:26,079
been living these fuses inside so it's

792
01:02:23,470 --> 01:02:34,500
possible to arm our to change these fuse

793
01:02:26,079 --> 01:02:38,349
and infect our systems and additionally

794
01:02:34,500 --> 01:02:44,520
most modern mirrors have you been trying

795
01:02:38,349 --> 01:02:48,460
to flash a new coach into the spi flash

796
01:02:44,520 --> 01:02:54,240
component trying to compromise the whole

797
01:02:48,460 --> 01:02:54,240
machine where else

798
01:02:56,110 --> 01:03:01,880
so the booty box tried to protect you

799
01:02:59,420 --> 01:03:03,620
the boot process if they bite why'd you

800
01:03:01,880 --> 01:03:07,700
try to protect the entire platform

801
01:03:03,620 --> 01:03:09,759
against any kind of mowers trying to

802
01:03:07,700 --> 01:03:16,899
infect earth

803
01:03:09,760 --> 01:03:21,520
these are very specific picture where

804
01:03:16,900 --> 01:03:26,540
the CPU loads they round the buh-byes

805
01:03:21,520 --> 01:03:30,830
run the ACM wilt with which the vilify

806
01:03:26,540 --> 01:03:33,380
the IBB in issue much block the IBB we

807
01:03:30,830 --> 01:03:37,040
verify their BIOS potency is the kind of

808
01:03:33,380 --> 01:03:47,300
physical change checking each each stage

809
01:03:37,040 --> 01:03:51,200
checking the next one so the BIOS wars

810
01:03:47,300 --> 01:03:55,250
strikes protectors they against any kind

811
01:03:51,200 --> 01:03:58,669
of Mars trying to infect the platform so

812
01:03:55,250 --> 01:04:06,350
the BIOS bad tries to protect the SPI

813
01:03:58,670 --> 01:04:08,260
flash axis mainly the BIOS LP date so

814
01:04:06,350 --> 01:04:14,980
it's a perfect protection against

815
01:04:08,260 --> 01:04:17,570
implants here I'll show you a complete

816
01:04:14,980 --> 01:04:22,840
scheme computer picture

817
01:04:17,570 --> 01:04:29,470
step by step since the flash passing by

818
01:04:22,840 --> 01:04:36,200
several ufi components butchart system

819
01:04:29,470 --> 01:04:41,950
until our application here here I'm

820
01:04:36,200 --> 01:04:47,779
using the UEFI to to analyze SPI flash

821
01:04:41,950 --> 01:04:52,310
and using the same to true analyzer BIOS

822
01:04:47,780 --> 01:04:59,600
rapid age is a amazing because most time

823
01:04:52,310 --> 01:05:03,620
I mean I mean Singh Mars trying to

824
01:04:59,600 --> 01:05:06,470
change GG exit drivers here so it's

825
01:05:03,620 --> 01:05:14,990
possible to extract a

826
01:05:06,470 --> 01:05:20,029
analyzing in the ida pro we have some

827
01:05:14,990 --> 01:05:23,240
legacy protections true protagonists in

828
01:05:20,030 --> 01:05:30,160
different ways for example here we we

829
01:05:23,240 --> 01:05:33,799
have SMM bwp that protects against

830
01:05:30,160 --> 01:05:37,098
Morris trying to change the femur

831
01:05:33,800 --> 01:05:42,140
outside of the SMM we have more is

832
01:05:37,099 --> 01:05:46,660
trying to show we have some other kind

833
01:05:42,140 --> 01:05:51,440
of protection here ble bios w/e and

834
01:05:46,660 --> 01:05:53,810
ming-lee protector ranges that it's the

835
01:05:51,440 --> 01:06:01,070
stronger protections using to protect

836
01:05:53,810 --> 01:06:06,529
the legacy femur here I show you how to

837
01:06:01,070 --> 01:06:12,440
dump a SPI in your machine by using

838
01:06:06,530 --> 01:06:14,780
ships at here is a critical case the

839
01:06:12,440 --> 01:06:17,990
BIOS refugees systems our own protection

840
01:06:14,780 --> 01:06:25,490
against readwrite education we will

841
01:06:17,990 --> 01:06:30,200
write operations here we have that sm m

842
01:06:25,490 --> 01:06:33,020
BW p that means an SME bios rights

843
01:06:30,200 --> 01:06:38,930
protections is disabled is horrible true

844
01:06:33,020 --> 01:06:44,810
or watch protections register r0 true so

845
01:06:38,930 --> 01:06:49,480
in case i found in fact machine because

846
01:06:44,810 --> 01:06:57,740
these settings are not set up before

847
01:06:49,480 --> 01:06:59,869
finally we have here good news because

848
01:06:57,740 --> 01:07:05,720
the fresh crew configuration lucky now

849
01:06:59,869 --> 01:07:10,099
is enabled so the Demerol put example

850
01:07:05,720 --> 01:07:15,700
GSP Hypertech changes and it's a good

851
01:07:10,099 --> 01:07:17,829
news and here I found a case recently

852
01:07:15,700 --> 01:07:25,439
about that

853
01:07:17,829 --> 01:07:30,489
the Maori tried true has that is that

854
01:07:25,439 --> 01:07:33,808
the vector of his occasional of the

855
01:07:30,489 --> 01:07:39,339
Rebecca butch block choose an

856
01:07:33,809 --> 01:07:42,009
alternative which was a coach and this

857
01:07:39,339 --> 01:07:45,939
butch what coach was infected why

858
01:07:42,009 --> 01:07:51,189
because they machine a in the context

859
01:07:45,939 --> 01:07:57,699
was in was in was in using these kind of

860
01:07:51,189 --> 01:08:00,549
protections against top SWAT mode here

861
01:07:57,699 --> 01:08:07,179
we have a perfect protection against

862
01:08:00,549 --> 01:08:13,839
SMM mowers trying to change the SMM

863
01:08:07,179 --> 01:08:17,158
quote and finally I show you the

864
01:08:13,839 --> 01:08:22,568
complete components of your spi flash

865
01:08:17,158 --> 01:08:29,348
for your research that's it thank you so

866
01:08:22,569 --> 01:08:37,319
much thank you very much are there any

867
01:08:29,349 --> 01:08:41,230
questions for Alexander no questions

868
01:08:37,319 --> 01:08:43,659
okay then it's time to for a coffee

869
01:08:41,229 --> 01:08:46,509
break its loss till half-past four and

870
01:08:43,658 --> 01:08:48,278
then we continue here again give a warm

871
01:08:46,509 --> 01:08:52,709
applause again for Alexander

872
01:08:48,279 --> 01:08:52,709
[Applause]

873
01:08:57,679 --> 01:08:59,739
you

