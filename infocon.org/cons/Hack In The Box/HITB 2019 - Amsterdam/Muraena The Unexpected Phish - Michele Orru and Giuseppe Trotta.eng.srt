1
00:00:19,110 --> 00:00:28,170
hello everyone so as you could see from

2
00:00:24,140 --> 00:00:31,680
the first picture we are going to talk

3
00:00:28,170 --> 00:00:34,190
about fishing today starting with the

4
00:00:31,680 --> 00:00:37,140
mystifying two-factor authentication

5
00:00:34,190 --> 00:00:40,589
showing you some non magic techniques

6
00:00:37,140 --> 00:00:43,650
about reverse proxying and then how to I

7
00:00:40,590 --> 00:00:45,960
Jack the stolen session in a way that

8
00:00:43,650 --> 00:00:49,650
you can instrument them and automate

9
00:00:45,960 --> 00:00:51,600
some of the post fishing activities we

10
00:00:49,650 --> 00:00:57,390
will end up with some demos and we will

11
00:00:51,600 --> 00:00:59,250
discuss upcoming challenges so how many

12
00:00:57,390 --> 00:01:01,159
of you think that two-factor

13
00:00:59,250 --> 00:01:04,470
authentication really helps against

14
00:01:01,159 --> 00:01:06,390
phishing or any anything else like

15
00:01:04,470 --> 00:01:10,070
takeover of your account raise your hand

16
00:01:06,390 --> 00:01:16,770
if you think that to a face who useful

17
00:01:10,070 --> 00:01:19,169
better raise more okay good so a couple

18
00:01:16,770 --> 00:01:25,110
of myths I don't know if you agree about

19
00:01:19,170 --> 00:01:29,190
this point but in fact point one and

20
00:01:25,110 --> 00:01:31,140
point two are just like mitigation

21
00:01:29,190 --> 00:01:33,120
partial mitigations of a problem that

22
00:01:31,140 --> 00:01:37,590
you cannot really fix with the way they

23
00:01:33,120 --> 00:01:39,750
are trying to do because in fact 2fa is

24
00:01:37,590 --> 00:01:41,430
only minimize minimizing pass for

25
00:01:39,750 --> 00:01:44,370
spraying for example like the fact that

26
00:01:41,430 --> 00:01:46,140
the attacker know if the attacker

27
00:01:44,370 --> 00:01:48,930
doesn't know your second factor but the

28
00:01:46,140 --> 00:01:54,030
credentials cannot authenticate and also

29
00:01:48,930 --> 00:01:58,740
the fact that if you receive an

30
00:01:54,030 --> 00:02:00,150
unsolicited token and if you didn't do

31
00:01:58,740 --> 00:02:01,770
the authentication action you might

32
00:02:00,150 --> 00:02:05,430
think of something not just going on but

33
00:02:01,770 --> 00:02:06,810
in fact when you do situation like the

34
00:02:05,430 --> 00:02:09,330
reverse proxy scenarios that we will

35
00:02:06,810 --> 00:02:11,610
show the victim believes that she is

36
00:02:09,330 --> 00:02:14,190
interacting with the real origin so this

37
00:02:11,610 --> 00:02:17,700
thing is not appliable

38
00:02:14,190 --> 00:02:20,220
and also the the point about in general

39
00:02:17,700 --> 00:02:22,109
that you are more secure again we are

40
00:02:20,220 --> 00:02:27,120
just raising the bar we are not fixing

41
00:02:22,110 --> 00:02:31,950
the problems actually there was a nice

42
00:02:27,120 --> 00:02:34,629
attempt to fix the problem when

43
00:02:31,950 --> 00:02:37,599
Universal two-factor was introduced you

44
00:02:34,629 --> 00:02:41,409
bikies and this kind tighten keys this

45
00:02:37,599 --> 00:02:43,839
kind of strong authentication but first

46
00:02:41,409 --> 00:02:48,670
of all is not really implemented and

47
00:02:43,840 --> 00:02:50,170
second of all Marcus and myself last

48
00:02:48,670 --> 00:02:51,790
year we present some results in

49
00:02:50,170 --> 00:02:54,458
offensive cone where we actually

50
00:02:51,790 --> 00:02:58,599
bypassed even that which was claimed to

51
00:02:54,459 --> 00:03:02,109
be unfishable VI bug in Webb USB and

52
00:02:58,599 --> 00:03:03,638
which was actually removed by Google in

53
00:03:02,109 --> 00:03:06,810
a measure released and were introduced

54
00:03:03,639 --> 00:03:13,199
with a blacklist very neat very nice

55
00:03:06,810 --> 00:03:16,810
so since as we said any form of

56
00:03:13,199 --> 00:03:19,299
authentication that used to a fail as

57
00:03:16,810 --> 00:03:21,430
soon as the token and the second factor

58
00:03:19,299 --> 00:03:25,239
authentication issue is submitted in the

59
00:03:21,430 --> 00:03:28,030
same form so like in the same origin via

60
00:03:25,239 --> 00:03:30,540
web basically with a solution which is a

61
00:03:28,030 --> 00:03:32,530
reverse proxy you can definitely still

62
00:03:30,540 --> 00:03:34,978
everything that you need not only the

63
00:03:32,530 --> 00:03:38,739
initial credentials but also the token

64
00:03:34,979 --> 00:03:40,900
SMS Porsche OTP Google authenticate or

65
00:03:38,739 --> 00:03:42,909
bisque any kind of time that the token

66
00:03:40,900 --> 00:03:46,709
actually needs to be submitted on the

67
00:03:42,909 --> 00:03:51,269
same side basically means that you can

68
00:03:46,709 --> 00:03:57,400
proxy in real time and get the session

69
00:03:51,269 --> 00:03:59,470
so doing let's say this in a in a smart

70
00:03:57,400 --> 00:04:02,650
way you not not not only you intercept

71
00:03:59,470 --> 00:04:04,900
the traffic you fulfill the request and

72
00:04:02,650 --> 00:04:07,299
saw them magically the two FA actions

73
00:04:04,900 --> 00:04:09,609
are triggered but as you will see later

74
00:04:07,299 --> 00:04:12,280
in the presentation we also instrument

75
00:04:09,609 --> 00:04:14,079
the session so we I drag the session

76
00:04:12,280 --> 00:04:16,570
like taking the cookies and passing it

77
00:04:14,079 --> 00:04:18,449
to instrumentation framework in a way

78
00:04:16,570 --> 00:04:20,469
that we can automate some of the

79
00:04:18,449 --> 00:04:23,919
activities that otherwise you end up

80
00:04:20,469 --> 00:04:27,820
doing manually when you do fishing and

81
00:04:23,919 --> 00:04:32,349
yes all right how many of you are

82
00:04:27,820 --> 00:04:34,360
familiar with many in the middle all

83
00:04:32,349 --> 00:04:36,610
right and how many of you are familiar

84
00:04:34,360 --> 00:04:39,639
with many in the middle in web

85
00:04:36,610 --> 00:04:43,389
applications all right

86
00:04:39,639 --> 00:04:44,810
so this is clear that there is nothing

87
00:04:43,389 --> 00:04:49,010
new in this up

88
00:04:44,810 --> 00:04:50,720
we are doing for example when we do web

89
00:04:49,010 --> 00:04:53,500
application testing we do many in the

90
00:04:50,720 --> 00:04:56,750
middle in the browser in this approach

91
00:04:53,500 --> 00:04:58,940
is slightly different we are performing

92
00:04:56,750 --> 00:05:01,730
many in the middle by just rerouting

93
00:04:58,940 --> 00:05:04,520
people to the wrong domain and let's see

94
00:05:01,730 --> 00:05:09,530
some example so this is something quite

95
00:05:04,520 --> 00:05:13,130
old as I was saying and back in 2005 the

96
00:05:09,530 --> 00:05:15,320
US government was releasing this paper

97
00:05:13,130 --> 00:05:18,980
about fishing trends and they were

98
00:05:15,320 --> 00:05:21,140
saying that as related to the fishing a

99
00:05:18,980 --> 00:05:23,570
man-in-the-middle attack involves an

100
00:05:21,140 --> 00:05:26,419
attacker serving approximate wean a user

101
00:05:23,570 --> 00:05:28,700
and online e-commerce site now it's not

102
00:05:26,419 --> 00:05:30,979
only commerce is every website or any

103
00:05:28,700 --> 00:05:33,530
side but basically we are in the middle

104
00:05:30,980 --> 00:05:36,860
and we are translating requests back and

105
00:05:33,530 --> 00:05:40,250
forth so what changes were changed in

106
00:05:36,860 --> 00:05:43,639
these years not that much for the first

107
00:05:40,250 --> 00:05:47,210
10 years then happens that at portcullis

108
00:05:43,639 --> 00:05:50,210
they release it a tool about fishing

109
00:05:47,210 --> 00:05:56,780
which was based on some rules on Apache

110
00:05:50,210 --> 00:06:00,799
and then in 2017 kuba releases evil gene

111
00:05:56,780 --> 00:06:01,460
X which was quite the evolution of this

112
00:06:00,800 --> 00:06:04,820
approach

113
00:06:01,460 --> 00:06:10,099
so it was intercepting and instructing

114
00:06:04,820 --> 00:06:13,640
credentials and cookies also in the apts

115
00:06:10,100 --> 00:06:16,250
we we saw some researchers like a

116
00:06:13,640 --> 00:06:19,460
citizen's lab and the Amnesty

117
00:06:16,250 --> 00:06:23,810
International so we we saw this approach

118
00:06:19,460 --> 00:06:26,330
exploited in the wild and let's see what

119
00:06:23,810 --> 00:06:29,740
happens so basically how does it work a

120
00:06:26,330 --> 00:06:32,419
reverse proxy in a man-in-the-middle

121
00:06:29,740 --> 00:06:34,780
context for the web application nothing

122
00:06:32,419 --> 00:06:37,930
special so this is our dashboard and

123
00:06:34,780 --> 00:06:40,280
basically whenever we receive

124
00:06:37,930 --> 00:06:44,300
disappointed not nice whenever we

125
00:06:40,280 --> 00:06:47,200
receive a request the victim that wants

126
00:06:44,300 --> 00:06:50,990
to connect to the real website Bob

127
00:06:47,200 --> 00:06:53,990
actually in this example the the real

128
00:06:50,990 --> 00:06:56,599
website is portal dot Bob calm but we

129
00:06:53,990 --> 00:06:58,250
the phishing website is portal dot Bob

130
00:06:56,599 --> 00:07:01,030
calm

131
00:06:58,250 --> 00:07:04,460
so basically is sending the request and

132
00:07:01,030 --> 00:07:06,349
we are patching the request so in this

133
00:07:04,460 --> 00:07:08,840
case the headers so we're patching the

134
00:07:06,350 --> 00:07:12,080
host the aurigean the referral the

135
00:07:08,840 --> 00:07:13,940
cookie patching means that we are

136
00:07:12,080 --> 00:07:17,030
sending the request for the phishing

137
00:07:13,940 --> 00:07:18,740
website assimilating the user the victim

138
00:07:17,030 --> 00:07:21,349
so we're changing the all the

139
00:07:18,740 --> 00:07:24,200
information from phishing domain to the

140
00:07:21,350 --> 00:07:27,500
real domain once we send the request to

141
00:07:24,200 --> 00:07:29,930
the phishing domain and the fish the the

142
00:07:27,500 --> 00:07:32,870
real domain replies back we patch again

143
00:07:29,930 --> 00:07:35,270
so we say ok we are not the real domain

144
00:07:32,870 --> 00:07:36,980
but we are the phishing domain in this

145
00:07:35,270 --> 00:07:39,200
way we don't break any same origin

146
00:07:36,980 --> 00:07:42,200
policy we don't break any security rule

147
00:07:39,200 --> 00:07:46,789
any cookie anything same approach is for

148
00:07:42,200 --> 00:07:49,430
the for the body we change the body so

149
00:07:46,790 --> 00:07:52,280
anything that matches the phishing

150
00:07:49,430 --> 00:07:55,669
domain will be replace it to the

151
00:07:52,280 --> 00:07:57,380
original domain and same back there are

152
00:07:55,669 --> 00:07:59,469
slightly modification in the body

153
00:07:57,380 --> 00:08:04,070
because for example we can find some

154
00:07:59,470 --> 00:08:05,810
gzip content or deflate or whatever also

155
00:08:04,070 --> 00:08:08,030
some content type what listing for

156
00:08:05,810 --> 00:08:10,940
example we don't want to replace or

157
00:08:08,030 --> 00:08:15,590
manipulate images or binary files so we

158
00:08:10,940 --> 00:08:18,320
can skip this kind of approach for the

159
00:08:15,590 --> 00:08:21,429
implementation we use it go long just

160
00:08:18,320 --> 00:08:25,159
because it's quite high performance

161
00:08:21,430 --> 00:08:28,310
syntax and language it's quite stable

162
00:08:25,160 --> 00:08:30,560
and they have a good library ecosystem

163
00:08:28,310 --> 00:08:32,929
and also the perfect part is the cross

164
00:08:30,560 --> 00:08:35,839
completion because you can imagine that

165
00:08:32,929 --> 00:08:38,000
we can compile this tool for a Raspberry

166
00:08:35,839 --> 00:08:40,400
Pi or for the washing machine or

167
00:08:38,000 --> 00:08:43,130
whatever and then we can run in any kind

168
00:08:40,400 --> 00:08:45,319
of scenario so here weather can be a red

169
00:08:43,130 --> 00:08:48,950
team or it can be a normal fishing

170
00:08:45,320 --> 00:08:53,630
engagement you can deploy the machine in

171
00:08:48,950 --> 00:08:56,720
a compromised system or our own system

172
00:08:53,630 --> 00:09:00,530
it's just around 2 mm line of code

173
00:08:56,720 --> 00:09:03,620
because it's simple enough but the name

174
00:09:00,530 --> 00:09:06,380
is as we said before marina and here's

175
00:09:03,620 --> 00:09:09,230
some feature that we implemented the

176
00:09:06,380 --> 00:09:11,710
first one is the web crawler which is

177
00:09:09,230 --> 00:09:14,810
basically when we perform some

178
00:09:11,710 --> 00:09:17,480
HTTP traffic let's assume in Google and

179
00:09:14,810 --> 00:09:19,880
we want to go to google.com there is not

180
00:09:17,480 --> 00:09:22,220
only Google com there are many website

181
00:09:19,880 --> 00:09:24,350
behind many subdomains many resources

182
00:09:22,220 --> 00:09:26,390
and we want too many in the middle all

183
00:09:24,350 --> 00:09:30,490
those resources because it's not just

184
00:09:26,390 --> 00:09:34,880
about Google but all the other origins

185
00:09:30,490 --> 00:09:36,560
also customizable tracking because if we

186
00:09:34,880 --> 00:09:40,160
want to track people coming to our

187
00:09:36,560 --> 00:09:42,920
fishing domains we want to see if person

188
00:09:40,160 --> 00:09:46,520
a is authenticated and what are the

189
00:09:42,920 --> 00:09:50,390
cookies and when he arrived them from

190
00:09:46,520 --> 00:09:52,730
we're also static content server in this

191
00:09:50,390 --> 00:09:56,630
way for example we can host our

192
00:09:52,730 --> 00:09:59,270
malicious application Oh JavaScript or

193
00:09:56,630 --> 00:10:01,130
resources generally white card domain

194
00:09:59,270 --> 00:10:02,990
support we are going to see in a minute

195
00:10:01,130 --> 00:10:05,000
and the final is the browser

196
00:10:02,990 --> 00:10:08,170
instrumentation integration which is

197
00:10:05,000 --> 00:10:10,880
basically we have the cookies we have

198
00:10:08,170 --> 00:10:13,160
web sessions but what do we do do we

199
00:10:10,880 --> 00:10:15,650
still go to the real website and enter

200
00:10:13,160 --> 00:10:19,339
manually username and password oh can we

201
00:10:15,650 --> 00:10:22,400
abuse this information we just collected

202
00:10:19,340 --> 00:10:25,340
to automate this process so how can we

203
00:10:22,400 --> 00:10:28,550
do this stuff we'll see in a minute the

204
00:10:25,340 --> 00:10:30,620
since we are using golang the proxy core

205
00:10:28,550 --> 00:10:34,490
is based on the single host reverse

206
00:10:30,620 --> 00:10:41,330
proxy and with some transform and rules

207
00:10:34,490 --> 00:10:44,210
that we provide no magic again this is

208
00:10:41,330 --> 00:10:47,180
something non new and since it's not new

209
00:10:44,210 --> 00:10:50,210
there are some anti reverse proxy

210
00:10:47,180 --> 00:10:53,870
approaches so we we are going to see

211
00:10:50,210 --> 00:10:57,860
some solution than some vendors decided

212
00:10:53,870 --> 00:11:01,220
to adopt to prevent and reverse proxy

213
00:10:57,860 --> 00:11:03,860
solutions so basically to debug this

214
00:11:01,220 --> 00:11:07,240
approach and to bypass it was enough to

215
00:11:03,860 --> 00:11:09,650
use Chrome developers tool so the the

216
00:11:07,240 --> 00:11:11,780
JavaScript debugger and the console

217
00:11:09,650 --> 00:11:13,490
inside the browser and maybe burg proxy

218
00:11:11,780 --> 00:11:17,360
just to see what kind of traffic is

219
00:11:13,490 --> 00:11:19,670
working so let's see the simple small

220
00:11:17,360 --> 00:11:25,260
something Universal in the manipulation

221
00:11:19,670 --> 00:11:27,390
in the HTML and the HTTP we have this

222
00:11:25,260 --> 00:11:29,970
a sub resource integrity which is a

223
00:11:27,390 --> 00:11:32,730
security feature basically they

224
00:11:29,970 --> 00:11:35,760
introduced this feature to prevent CDN

225
00:11:32,730 --> 00:11:38,790
to manipulate contents and then push

226
00:11:35,760 --> 00:11:41,640
back to to the clients so in this way

227
00:11:38,790 --> 00:11:45,569
when we decide to use some resources we

228
00:11:41,640 --> 00:11:50,000
compute a hash and then we put we put

229
00:11:45,570 --> 00:11:53,520
inside the element like this one and

230
00:11:50,000 --> 00:11:56,060
then we name it as integrity attribute

231
00:11:53,520 --> 00:11:58,290
so what happens is that when the

232
00:11:56,060 --> 00:12:00,689
resource will be loaded in the browser

233
00:11:58,290 --> 00:12:03,420
the browser will compute again the hash

234
00:12:00,690 --> 00:12:04,020
of this resource if this matches it's

235
00:12:03,420 --> 00:12:06,449
fine

236
00:12:04,020 --> 00:12:09,090
otherwise it won't execute so it's a

237
00:12:06,450 --> 00:12:12,930
security measure but again we are in the

238
00:12:09,090 --> 00:12:15,300
middle so we can simply delete the

239
00:12:12,930 --> 00:12:18,150
attribute and the browser won't compute

240
00:12:15,300 --> 00:12:21,270
any kind of calculus so just this

241
00:12:18,150 --> 00:12:23,220
bypasses this security measure by simply

242
00:12:21,270 --> 00:12:26,340
deleting the attribute this is the base

243
00:12:23,220 --> 00:12:28,290
the basic you know grabber replace idea

244
00:12:26,340 --> 00:12:32,070
most of the stuff that we grep and

245
00:12:28,290 --> 00:12:35,930
replace for ads as usable showing like

246
00:12:32,070 --> 00:12:40,040
attributes of other security features

247
00:12:35,930 --> 00:12:42,959
next one the content security policy and

248
00:12:40,040 --> 00:12:44,849
this is the same basically in the

249
00:12:42,960 --> 00:12:48,360
content security policy we instruct the

250
00:12:44,850 --> 00:12:51,570
browser to to act properly and to not

251
00:12:48,360 --> 00:12:54,570
execute malicious resources but there

252
00:12:51,570 --> 00:12:56,430
are some point points in the HTML that

253
00:12:54,570 --> 00:12:58,590
we can manipulate for example the nonce

254
00:12:56,430 --> 00:13:01,859
that can become no more knowns for

255
00:12:58,590 --> 00:13:05,070
example so the browser won't know or

256
00:13:01,860 --> 00:13:07,650
also the meta attribute which is the

257
00:13:05,070 --> 00:13:10,710
content of the security policies you see

258
00:13:07,650 --> 00:13:13,709
here is commented and then you can just

259
00:13:10,710 --> 00:13:15,240
delete this in a similar way we can

260
00:13:13,710 --> 00:13:17,250
remove the content security policy

261
00:13:15,240 --> 00:13:20,850
hazard so in this way we can inject

262
00:13:17,250 --> 00:13:24,720
other resources so we can act badly as

263
00:13:20,850 --> 00:13:27,720
we wish so these are more the generic

264
00:13:24,720 --> 00:13:30,750
one now let's see something about real

265
00:13:27,720 --> 00:13:32,670
vendors so for example get up in get up

266
00:13:30,750 --> 00:13:35,640
they decided to use this approach there

267
00:13:32,670 --> 00:13:38,160
is a meta attribute called GES proxy

268
00:13:35,640 --> 00:13:38,980
side detection payload and this payload

269
00:13:38,160 --> 00:13:40,930
is a basic

270
00:13:38,980 --> 00:13:44,589
before encoded and as you can see here

271
00:13:40,930 --> 00:13:47,170
in the console is translated with some

272
00:13:44,589 --> 00:13:49,810
random string remote address which is de

273
00:13:47,170 --> 00:13:53,889
client the requests identifier the time

274
00:13:49,810 --> 00:13:55,449
stamp and hijos github.com so what

275
00:13:53,889 --> 00:13:57,820
happens is that when you run the

276
00:13:55,449 --> 00:13:59,439
application just using the debugger you

277
00:13:57,820 --> 00:14:02,709
can see that there is some JavaScript

278
00:13:59,440 --> 00:14:06,730
that is loading the this selector just

279
00:14:02,709 --> 00:14:09,489
with query selector and then checking if

280
00:14:06,730 --> 00:14:11,680
it's an instance of the age of the HTML

281
00:14:09,490 --> 00:14:14,730
element as well as another selector

282
00:14:11,680 --> 00:14:18,579
expected hostname then it makes some

283
00:14:14,730 --> 00:14:20,589
operation and then if the domains are

284
00:14:18,579 --> 00:14:23,560
different because for example we are

285
00:14:20,589 --> 00:14:27,190
running get up from a different domain

286
00:14:23,560 --> 00:14:28,050
then this will fail and there will be an

287
00:14:27,190 --> 00:14:31,209
exception

288
00:14:28,050 --> 00:14:37,569
basically the bypass is quite trivial

289
00:14:31,209 --> 00:14:41,410
because this this condition needs just a

290
00:14:37,570 --> 00:14:45,310
false statement just to not be executed

291
00:14:41,410 --> 00:14:48,130
so for example we can just translate

292
00:14:45,310 --> 00:14:50,829
this jes proxy side detection payload to

293
00:14:48,130 --> 00:14:52,720
nothing or something else expected also

294
00:14:50,829 --> 00:14:54,969
name to nothing or something else and

295
00:14:52,720 --> 00:15:00,029
then you bypass this measure for example

296
00:14:54,970 --> 00:15:01,839
in DITA dropbox dropbox is nice because

297
00:15:00,029 --> 00:15:05,170
actually i don't think this was

298
00:15:01,839 --> 00:15:09,610
intentional but they have this reCAPTCHA

299
00:15:05,170 --> 00:15:13,089
in the login or in anything and by

300
00:15:09,610 --> 00:15:15,610
nature data capture approach if you run

301
00:15:13,089 --> 00:15:18,100
for example dropbox for a fishing domain

302
00:15:15,610 --> 00:15:20,769
you will see the designer side on an

303
00:15:18,100 --> 00:15:22,899
invalid domain key so basically you can

304
00:15:20,769 --> 00:15:25,209
not send any form because it's to

305
00:15:22,899 --> 00:15:29,769
prevent a cross-site request forgery

306
00:15:25,209 --> 00:15:32,229
attacks so if you if you inspect this

307
00:15:29,769 --> 00:15:35,709
this is muscat so if you go in the dom

308
00:15:32,230 --> 00:15:37,540
and just enable the hidden div then you

309
00:15:35,709 --> 00:15:40,000
will see that the error is saying that

310
00:15:37,540 --> 00:15:42,639
the domain for the psyche and then it

311
00:15:40,000 --> 00:15:44,829
pushes the domain which is the fishing

312
00:15:42,639 --> 00:15:47,110
domain so basically we are sending the

313
00:15:44,829 --> 00:15:49,089
fishing domain to Google saying that we

314
00:15:47,110 --> 00:15:52,010
are Dropbox so there is something wrong

315
00:15:49,089 --> 00:15:56,750
because the key of course does match

316
00:15:52,010 --> 00:15:59,360
so and we identified the request which

317
00:15:56,750 --> 00:16:01,940
is this is basically Google so basically

318
00:15:59,360 --> 00:16:06,200
Dropbox he's saying to Google hey sent

319
00:16:01,940 --> 00:16:09,050
me something for this key and this value

320
00:16:06,200 --> 00:16:12,890
that decoded is the phishing domain so

321
00:16:09,050 --> 00:16:16,099
basically by the reCAPTCHA protocol or

322
00:16:12,890 --> 00:16:19,520
this nature when we load the page then

323
00:16:16,100 --> 00:16:23,120
there is a request for the image or the

324
00:16:19,520 --> 00:16:25,550
token to the Google but since the domain

325
00:16:23,120 --> 00:16:28,130
is wrong this request is failing and

326
00:16:25,550 --> 00:16:31,910
then we cannot proceed anymore so what

327
00:16:28,130 --> 00:16:35,030
can we do is basically translate in this

328
00:16:31,910 --> 00:16:37,339
way just if we go back this domain is

329
00:16:35,030 --> 00:16:40,520
the fishing so we just changed this

330
00:16:37,340 --> 00:16:43,340
domain to dropbox and basically we

331
00:16:40,520 --> 00:16:45,710
decoded this value from base64 we change

332
00:16:43,340 --> 00:16:48,080
the domain to Dropbox and then encoded

333
00:16:45,710 --> 00:16:53,390
again and basically we bypassed the

334
00:16:48,080 --> 00:16:57,200
recapture in approach so basically this

335
00:16:53,390 --> 00:17:00,380
is a feature of the proxy where you can

336
00:16:57,200 --> 00:17:02,930
enable the base64 translation so other

337
00:17:00,380 --> 00:17:05,359
than normal patterns just if you find a

338
00:17:02,930 --> 00:17:08,389
translate would be you can also say if

339
00:17:05,359 --> 00:17:11,089
if you find something that is basics

340
00:17:08,390 --> 00:17:13,310
before then just decode and if there is

341
00:17:11,089 --> 00:17:15,679
any pattern or the one day we define it

342
00:17:13,310 --> 00:17:17,448
before before just translated encode

343
00:17:15,680 --> 00:17:19,100
again and then you can also use some

344
00:17:17,449 --> 00:17:21,740
padding in this case is interesting

345
00:17:19,099 --> 00:17:24,409
because usually base64 padding is d

346
00:17:21,740 --> 00:17:27,109
equal but if you notice here there is a

347
00:17:24,410 --> 00:17:29,300
dot in the end because the request is

348
00:17:27,109 --> 00:17:31,729
sent through the URL so instead of

349
00:17:29,300 --> 00:17:35,240
including d dot d equal they just

350
00:17:31,730 --> 00:17:39,370
decided to use the dot so there is this

351
00:17:35,240 --> 00:17:42,710
kind of flexibility next one Google and

352
00:17:39,370 --> 00:17:44,570
yet the sentence is quite common if it

353
00:17:42,710 --> 00:17:49,130
works for Google works for all basically

354
00:17:44,570 --> 00:17:51,080
I'm quite sorry to say this but we will

355
00:17:49,130 --> 00:17:55,730
use it from Google in the audience raise

356
00:17:51,080 --> 00:17:59,149
your hand now there are some for sure

357
00:17:55,730 --> 00:18:01,640
thank you guys our child now basically

358
00:17:59,150 --> 00:18:03,710
we test for Google because Google is so

359
00:18:01,640 --> 00:18:05,320
complex so if it works for Google it

360
00:18:03,710 --> 00:18:07,269
works for everybody

361
00:18:05,320 --> 00:18:08,950
and this is something of the changes

362
00:18:07,269 --> 00:18:11,350
that we implemented to make it work in

363
00:18:08,950 --> 00:18:14,049
Google so for example as you can see

364
00:18:11,350 --> 00:18:16,480
it's full of reg accessing Google so the

365
00:18:14,049 --> 00:18:19,509
idea is just to patch the regex

366
00:18:16,480 --> 00:18:21,250
to match it in the fishing side so this

367
00:18:19,509 --> 00:18:23,799
is something that can be automated but

368
00:18:21,250 --> 00:18:26,980
not that much so for example this reg X

369
00:18:23,799 --> 00:18:29,740
is just a boolean reg X where we just

370
00:18:26,980 --> 00:18:32,610
inject our malicious domain so if for

371
00:18:29,740 --> 00:18:35,889
example a malicious domain is ebates.com

372
00:18:32,610 --> 00:18:38,469
we don't need this subdomain same for

373
00:18:35,889 --> 00:18:42,820
here and same from for other roles in

374
00:18:38,470 --> 00:18:44,919
base64 so basically this approach works

375
00:18:42,820 --> 00:18:49,178
also for google so even Google is not

376
00:18:44,919 --> 00:18:53,889
protecting this approach now let's see

377
00:18:49,179 --> 00:18:56,799
how to use this session yeah so we

378
00:18:53,889 --> 00:18:59,019
received a bunch of videos soon so you

379
00:18:56,799 --> 00:19:01,090
will understand even more in case there

380
00:18:59,019 --> 00:19:03,519
are some things that are not clear but

381
00:19:01,090 --> 00:19:05,168
again this is no magic so the thing is

382
00:19:03,519 --> 00:19:09,279
the following once we capture that the

383
00:19:05,169 --> 00:19:11,950
credentials with marina and we have we

384
00:19:09,279 --> 00:19:14,110
are also collecting the the token value

385
00:19:11,950 --> 00:19:15,759
we actually don't you need the token

386
00:19:14,110 --> 00:19:18,189
value because we hijack the cookies

387
00:19:15,759 --> 00:19:19,899
right so the point is when you are i

388
00:19:18,190 --> 00:19:22,139
jacking the cookies and you are actually

389
00:19:19,899 --> 00:19:25,000
instrumenting them not manually but

390
00:19:22,139 --> 00:19:27,100
programmatically where do you need to go

391
00:19:25,000 --> 00:19:31,000
through to reach the original target

392
00:19:27,100 --> 00:19:32,740
because usually the thing is if you if

393
00:19:31,000 --> 00:19:35,409
from the you are let's say that you have

394
00:19:32,740 --> 00:19:39,250
a VPS where you are running Google CDN

395
00:19:35,409 --> 00:19:41,679
dot Co only public IP you are running

396
00:19:39,250 --> 00:19:44,230
Maureen over there and you have X users

397
00:19:41,679 --> 00:19:46,629
you where you already have cookies so

398
00:19:44,230 --> 00:19:48,940
you can actually instrument in Dockery

399
00:19:46,629 --> 00:19:51,070
instances that go through the same

400
00:19:48,940 --> 00:19:52,750
reverse proxy IP in a way that there

401
00:19:51,070 --> 00:19:54,850
will be no behavioral change rather than

402
00:19:52,750 --> 00:19:57,600
the original login on the fishing origin

403
00:19:54,850 --> 00:20:00,158
in a way that you can then keep in

404
00:19:57,600 --> 00:20:05,259
indefinitely the session live in theory

405
00:20:00,159 --> 00:20:07,690
until they detect you so in general this

406
00:20:05,259 --> 00:20:10,299
is how it what we discussed so far so

407
00:20:07,690 --> 00:20:12,610
you know the red part are the things

408
00:20:10,299 --> 00:20:17,889
that we modify either in the request or

409
00:20:12,610 --> 00:20:20,019
in the response so to a Fae now when we

410
00:20:17,889 --> 00:20:22,449
collect the

411
00:20:20,019 --> 00:20:25,720
we have like this docker container

412
00:20:22,450 --> 00:20:27,789
server or a bunch of them where you have

413
00:20:25,720 --> 00:20:30,100
a lot of RAM and ability to run a lot of

414
00:20:27,789 --> 00:20:33,100
Dockers in each docker there is a chrome

415
00:20:30,100 --> 00:20:34,830
headless chrome headless tattoo

416
00:20:33,100 --> 00:20:38,379
instrument via the remote debugging

417
00:20:34,830 --> 00:20:42,039
protocol stuff and where we keep alive

418
00:20:38,379 --> 00:20:44,408
all the session so the nice part here is

419
00:20:42,039 --> 00:20:46,269
that there is no magic also in this

420
00:20:44,409 --> 00:20:48,999
necro browser part because we wrap

421
00:20:46,269 --> 00:20:51,669
around a nice Galang library which is

422
00:20:48,999 --> 00:20:53,499
called Chrome DP and which already used

423
00:20:51,669 --> 00:20:57,669
a chrome dev tools protocol which is a

424
00:20:53,499 --> 00:21:00,369
great features of chrome you can spawn

425
00:20:57,669 --> 00:21:02,320
as many doctors as you as you can and in

426
00:21:00,369 --> 00:21:04,269
this way you can basically keep as many

427
00:21:02,320 --> 00:21:08,408
live sessions compartmentalized in

428
00:21:04,269 --> 00:21:09,970
different chrome headless now the how to

429
00:21:08,409 --> 00:21:11,499
use this is up to your imagination

430
00:21:09,970 --> 00:21:13,539
because you are right jack in the user

431
00:21:11,499 --> 00:21:16,029
session so it depends what you want to

432
00:21:13,539 --> 00:21:18,190
do with that everything can be automated

433
00:21:16,029 --> 00:21:20,769
in the demos we are going to see some

434
00:21:18,190 --> 00:21:24,249
just some of the examples that we were

435
00:21:20,769 --> 00:21:27,340
playing with but imagine that you can

436
00:21:24,249 --> 00:21:30,100
use the idea of you know running microbe

437
00:21:27,340 --> 00:21:31,928
not running instrumented browser to do

438
00:21:30,100 --> 00:21:35,408
much more than just pasta fishing you

439
00:21:31,929 --> 00:21:38,289
can do or seen so you can do other types

440
00:21:35,409 --> 00:21:40,419
of instrumentation and in fact what is

441
00:21:38,289 --> 00:21:43,950
really interesting is this cat-and-mouse

442
00:21:40,419 --> 00:21:47,350
game between who is trying to detect

443
00:21:43,950 --> 00:21:49,330
access to web sites via instrumented

444
00:21:47,350 --> 00:21:51,480
browsers or like non Newman driven

445
00:21:49,330 --> 00:21:54,239
browsers and people that instead are

446
00:21:51,480 --> 00:21:57,639
fighting like us the opposite side so

447
00:21:54,239 --> 00:22:00,549
making headless browser always winning

448
00:21:57,639 --> 00:22:03,039
right so there is a very nice of bunch

449
00:22:00,549 --> 00:22:05,129
resource and bunch of nice results that

450
00:22:03,039 --> 00:22:08,799
you can check out specifically in Tolley

451
00:22:05,129 --> 00:22:11,498
site where they they speak a lot about

452
00:22:08,799 --> 00:22:14,320
what properties you should emulate or

453
00:22:11,499 --> 00:22:16,840
you should or who what people are trying

454
00:22:14,320 --> 00:22:19,689
to detect to see if you are an

455
00:22:16,840 --> 00:22:21,519
instrumented browser and the latest

456
00:22:19,690 --> 00:22:24,369
research basically proves that is very

457
00:22:21,519 --> 00:22:29,350
difficult to detect if there is a human

458
00:22:24,369 --> 00:22:32,199
or not behind the browser basically so

459
00:22:29,350 --> 00:22:33,279
as we were saying example examples could

460
00:22:32,200 --> 00:22:36,549
be really

461
00:22:33,279 --> 00:22:38,980
like since you are again idrac in the

462
00:22:36,549 --> 00:22:41,679
user session you you might want to dump

463
00:22:38,980 --> 00:22:45,159
emails you might want to add the

464
00:22:41,679 --> 00:22:47,500
application keys you might want to

465
00:22:45,159 --> 00:22:49,029
download all the files or you know

466
00:22:47,500 --> 00:22:51,880
things like that screenshots all the

467
00:22:49,029 --> 00:22:55,570
things dump its HTML it's up to your

468
00:22:51,880 --> 00:23:01,510
imagination so we're gonna show you a

469
00:22:55,570 --> 00:23:03,309
couple of videos in a way that in a way

470
00:23:01,510 --> 00:23:11,710
that you you have a better understanding

471
00:23:03,309 --> 00:23:14,799
of what we discussed so far so the first

472
00:23:11,710 --> 00:23:16,570
example is Google is a target we are

473
00:23:14,799 --> 00:23:22,809
serving the phishing domain on fishing

474
00:23:16,570 --> 00:23:25,029
dot on T and as you can see marina is a

475
00:23:22,809 --> 00:23:28,090
reverse proxying live from Google

476
00:23:25,029 --> 00:23:29,789
the victim is landing on the on the

477
00:23:28,090 --> 00:23:32,289
login page

478
00:23:29,789 --> 00:23:34,600
entering the credential as if everything

479
00:23:32,289 --> 00:23:36,639
is intercepted in real time and also the

480
00:23:34,600 --> 00:23:39,549
prop of course since is a reverse proxy

481
00:23:36,639 --> 00:23:42,070
the content is fetch the real time and

482
00:23:39,549 --> 00:23:43,750
this case localized to any any kind of

483
00:23:42,070 --> 00:23:46,720
language the user choose which was

484
00:23:43,750 --> 00:23:51,639
English in this case now to FA with SMS

485
00:23:46,720 --> 00:23:54,519
the user as you can see gets the guest

486
00:23:51,639 --> 00:24:04,809
as you can see at top right gets the SMS

487
00:23:54,519 --> 00:24:08,230
enters it and then in a second Gmail

488
00:24:04,809 --> 00:24:10,269
will be loaded it's a bit verbose like

489
00:24:08,230 --> 00:24:14,289
if you reverse proxy Gmail they made a

490
00:24:10,269 --> 00:24:16,870
lot of requests and there nothing I mean

491
00:24:14,289 --> 00:24:19,299
from this point you are ready con we

492
00:24:16,870 --> 00:24:22,000
already configure that we want to

493
00:24:19,299 --> 00:24:23,980
instrument this this session and so this

494
00:24:22,000 --> 00:24:27,010
is actually a new chrome instance on the

495
00:24:23,980 --> 00:24:29,559
real origin with a cookies set which is

496
00:24:27,010 --> 00:24:31,539
actually looping a bunch of actions like

497
00:24:29,559 --> 00:24:34,299
taking screenshots after searching for

498
00:24:31,539 --> 00:24:35,679
keywords over your email box of course

499
00:24:34,299 --> 00:24:37,720
the same could be implemented like

500
00:24:35,679 --> 00:24:39,580
search for password then dump all the

501
00:24:37,720 --> 00:24:44,139
images not just taking screenshots but

502
00:24:39,580 --> 00:24:46,299
again this is just an example and then

503
00:24:44,139 --> 00:24:52,089
going to drive and potentially

504
00:24:46,299 --> 00:24:54,070
downloading other stuff and in fact we

505
00:24:52,089 --> 00:24:56,379
are gonna show us some of the downloaded

506
00:24:54,070 --> 00:24:58,629
screenshots that are done automatically

507
00:24:56,379 --> 00:25:01,529
by the tool while you say go to this

508
00:24:58,629 --> 00:25:05,789
page search and screenshot or

509
00:25:01,529 --> 00:25:12,519
alternatively just just one thing yeah

510
00:25:05,789 --> 00:25:16,089
is that the on the left here we can see

511
00:25:12,519 --> 00:25:18,070
that there is the proxy running and on

512
00:25:16,089 --> 00:25:20,349
the right is the neck robot browser

513
00:25:18,070 --> 00:25:22,539
which is the instrumental tool and you

514
00:25:20,349 --> 00:25:25,029
can configure the tool and the proxy to

515
00:25:22,539 --> 00:25:27,669
work together in a way that when the

516
00:25:25,029 --> 00:25:29,769
victim reaches a specific end point so

517
00:25:27,669 --> 00:25:32,070
for example after you are authenticated

518
00:25:29,769 --> 00:25:35,979
and then you go to slash let's say home

519
00:25:32,070 --> 00:25:38,289
then you send a request to necro browser

520
00:25:35,979 --> 00:25:41,109
which is the instrumental to perform all

521
00:25:38,289 --> 00:25:43,209
the automation so you can say okay we

522
00:25:41,109 --> 00:25:45,339
are sure that the session is valid and

523
00:25:43,209 --> 00:25:47,589
the cookies are valid and we reach at

524
00:25:45,339 --> 00:25:52,178
the specific endpoint now you can

525
00:25:47,589 --> 00:25:54,639
automate the next step so yes this is

526
00:25:52,179 --> 00:25:57,700
actually I mean the whole idea is useful

527
00:25:54,639 --> 00:25:59,949
because even if you do a lot of us int

528
00:25:57,700 --> 00:26:02,769
because you fish your targets you might

529
00:25:59,950 --> 00:26:05,859
end up with targets that click and give

530
00:26:02,769 --> 00:26:08,019
you credentials or you know sessions and

531
00:26:05,859 --> 00:26:10,389
you don't know exactly what kind of

532
00:26:08,019 --> 00:26:13,059
ability they have so what you want to do

533
00:26:10,389 --> 00:26:14,678
is actually a post fishing automation to

534
00:26:13,059 --> 00:26:15,700
automatically check you know if the

535
00:26:14,679 --> 00:26:17,799
guy's a sysadmin

536
00:26:15,700 --> 00:26:19,690
and then you automatically know that we

537
00:26:17,799 --> 00:26:21,609
might have access to confluence and then

538
00:26:19,690 --> 00:26:24,339
you might have Mathieu you might want to

539
00:26:21,609 --> 00:26:26,139
search for you know network diagrams

540
00:26:24,339 --> 00:26:27,519
that people uploading we is in

541
00:26:26,139 --> 00:26:29,678
confluence and stuff like that rather

542
00:26:27,519 --> 00:26:31,419
than piloting in the network so you

543
00:26:29,679 --> 00:26:33,399
might end up doing red teaming or

544
00:26:31,419 --> 00:26:35,649
whatever simulation in different way and

545
00:26:33,399 --> 00:26:37,389
another another thing is that for

546
00:26:35,649 --> 00:26:41,320
example in Google we are using Google

547
00:26:37,389 --> 00:26:43,269
but there are some paths in Google's

548
00:26:41,320 --> 00:26:45,729
where you can improve the security and

549
00:26:43,269 --> 00:26:47,409
then for example you can change password

550
00:26:45,729 --> 00:26:50,049
or you cannot passport for the

551
00:26:47,409 --> 00:26:51,940
application and basically that specific

552
00:26:50,049 --> 00:26:53,918
path sometimes are protected by a

553
00:26:51,940 --> 00:26:56,109
password so you need a password to do

554
00:26:53,919 --> 00:26:58,450
this but we already know the password is

555
00:26:56,109 --> 00:27:00,039
just not using username and password

556
00:26:58,450 --> 00:27:02,440
again so we just need to Winston

557
00:27:00,039 --> 00:27:04,419
in the browser to say that whenever we

558
00:27:02,440 --> 00:27:06,249
see again the looking past we just send

559
00:27:04,419 --> 00:27:08,379
again the password and then we are

560
00:27:06,249 --> 00:27:10,570
authenticated and that's still valid but

561
00:27:08,379 --> 00:27:13,509
in this way for example you can perform

562
00:27:10,570 --> 00:27:15,549
some kind of persistence inside Google

563
00:27:13,509 --> 00:27:18,309
because you just create a password for

564
00:27:15,549 --> 00:27:20,739
an application and then even if the

565
00:27:18,309 --> 00:27:23,649
victim realizes that they are vulnerable

566
00:27:20,739 --> 00:27:25,419
they were they've been hacked and they

567
00:27:23,649 --> 00:27:28,320
changed the normal password the

568
00:27:25,419 --> 00:27:32,259
applications password is still there so

569
00:27:28,320 --> 00:27:38,739
exactly we are gonna show you in fact

570
00:27:32,259 --> 00:27:42,369
another example we will see this one

571
00:27:38,739 --> 00:27:48,580
this time is in Google Gmail a class or

572
00:27:42,369 --> 00:27:50,320
github get up again so as you can see as

573
00:27:48,580 --> 00:27:52,299
you can see from this table that I

574
00:27:50,320 --> 00:27:55,749
quickly closed in Firefox I mean this is

575
00:27:52,299 --> 00:27:57,309
the original account of our victim just

576
00:27:55,749 --> 00:28:00,279
want to prove that we don't have an SS

577
00:27:57,309 --> 00:28:03,639
any SSH is added to the account that we

578
00:28:00,279 --> 00:28:05,080
are gonna fish we are not showing you

579
00:28:03,639 --> 00:28:06,820
all the initial part of the fishing

580
00:28:05,080 --> 00:28:08,559
because I mean everyone does it in a

581
00:28:06,820 --> 00:28:12,399
different way and we want to focus on

582
00:28:08,559 --> 00:28:16,928
this specific scenario so once again the

583
00:28:12,399 --> 00:28:19,059
victim landed on on github

584
00:28:16,929 --> 00:28:20,769
she's browsing that just to check if

585
00:28:19,059 --> 00:28:25,059
everything looks fine and the reverse

586
00:28:20,769 --> 00:28:29,649
proxy works fine and basically as soon

587
00:28:25,059 --> 00:28:31,809
as she decided to log in once again I

588
00:28:29,649 --> 00:28:35,379
mean any type of 2fa that is not

589
00:28:31,809 --> 00:28:39,399
Universal two-factor is pliable here not

590
00:28:35,379 --> 00:28:42,879
just SMS so we collected the harvest we

591
00:28:39,399 --> 00:28:44,590
are with the credentials you can ignore

592
00:28:42,879 --> 00:28:46,149
the new victim thing because was an old

593
00:28:44,590 --> 00:28:53,978
video where we had the small bug in our

594
00:28:46,149 --> 00:28:55,599
software but it's expected so 2fa in

595
00:28:53,979 --> 00:28:58,749
this case we configure that the

596
00:28:55,599 --> 00:29:00,039
hijacking of the instrument the ejecting

597
00:28:58,749 --> 00:29:03,070
of the station will happen when the

598
00:29:00,039 --> 00:29:08,009
victim goes to settings profile okay so

599
00:29:03,070 --> 00:29:10,960
you will see this so we start actually

600
00:29:08,009 --> 00:29:13,810
the necro browser part which is again

601
00:29:10,960 --> 00:29:16,210
this restful api that waits and then

602
00:29:13,810 --> 00:29:19,530
phones docker do I Jack the cookies for

603
00:29:16,210 --> 00:29:23,710
you so the guy's gone the profile and

604
00:29:19,530 --> 00:29:27,460
basically the tool goes on the SSH page

605
00:29:23,710 --> 00:29:31,600
adds typing the new SSH key waits a few

606
00:29:27,460 --> 00:29:33,520
seconds add the SSH key and basically in

607
00:29:31,600 --> 00:29:36,010
this way you can automatically backdoor

608
00:29:33,520 --> 00:29:38,139
with a new SSH key every people that

609
00:29:36,010 --> 00:29:41,080
fear is getting feast on your github

610
00:29:38,140 --> 00:29:43,780
page and then you can have another

611
00:29:41,080 --> 00:29:45,669
script that out pull all the code or

612
00:29:43,780 --> 00:29:49,300
whatever up to your imagination

613
00:29:45,670 --> 00:29:52,060
basically but an idea that quickly

614
00:29:49,300 --> 00:29:54,070
allows you to do actions that then

615
00:29:52,060 --> 00:29:56,260
basically persist even if an

616
00:29:54,070 --> 00:29:57,820
administrator is marked enough to

617
00:29:56,260 --> 00:29:59,620
understand that something dodgy is going

618
00:29:57,820 --> 00:30:01,480
on and so maybe half an hour after you

619
00:29:59,620 --> 00:30:03,639
have credentials everything doesn't work

620
00:30:01,480 --> 00:30:05,860
anymore but maybe they didn't see that

621
00:30:03,640 --> 00:30:10,000
password you added in github and so you

622
00:30:05,860 --> 00:30:13,419
can keep owning just just one thing

623
00:30:10,000 --> 00:30:18,460
it's about the headless as you as you

624
00:30:13,420 --> 00:30:20,530
can see here the a new windows spin up

625
00:30:18,460 --> 00:30:22,480
but this is just for the for the

626
00:30:20,530 --> 00:30:25,180
demonstration but in a headless browser

627
00:30:22,480 --> 00:30:27,610
you you can you can avoid this and just

628
00:30:25,180 --> 00:30:29,470
run in background without opening any

629
00:30:27,610 --> 00:30:31,179
windows but this is just for the proof

630
00:30:29,470 --> 00:30:33,880
of concept otherwise you won't see

631
00:30:31,180 --> 00:30:36,490
anything exact so you can run the chrome

632
00:30:33,880 --> 00:30:39,820
instrumented in a headless mode without

633
00:30:36,490 --> 00:30:49,600
any screen or you can show what what's

634
00:30:39,820 --> 00:30:52,210
happening now to mention ever another

635
00:30:49,600 --> 00:30:54,459
few examples that we are not gonna

636
00:30:52,210 --> 00:30:58,540
release as automated when we release the

637
00:30:54,460 --> 00:31:02,070
code the 14 of May so soon but still I

638
00:30:58,540 --> 00:31:04,500
mean imagine imagine that you get a

639
00:31:02,070 --> 00:31:06,580
gmail account and then you have

640
00:31:04,500 --> 00:31:08,260
something like this that basically goes

641
00:31:06,580 --> 00:31:10,510
through all the context of the guy and

642
00:31:08,260 --> 00:31:12,790
then basically automatically does user

643
00:31:10,510 --> 00:31:16,629
impersonation sending from that account

644
00:31:12,790 --> 00:31:18,180
malware to is context so these are all

645
00:31:16,630 --> 00:31:20,710
things that you can easily automate with

646
00:31:18,180 --> 00:31:25,360
necro browser for example or any browser

647
00:31:20,710 --> 00:31:27,340
instrumentation so upcoming challenges I

648
00:31:25,360 --> 00:31:30,580
mean we saw this nice

649
00:31:27,340 --> 00:31:32,230
bold statement from Google better

650
00:31:30,580 --> 00:31:36,129
protection against men in the middle

651
00:31:32,230 --> 00:31:39,429
phishing attacks so we see if this is

652
00:31:36,129 --> 00:31:43,120
gonna be implemented when and if this is

653
00:31:39,429 --> 00:31:44,710
gonna make our life as attackers you

654
00:31:43,120 --> 00:31:53,168
know offensive security scenarios more

655
00:31:44,710 --> 00:31:54,580
difficult probably but we see so you

656
00:31:53,169 --> 00:31:58,179
should work yeah

657
00:31:54,580 --> 00:32:00,100
so for the future which means after the

658
00:31:58,179 --> 00:32:01,960
release we are planning to integrate

659
00:32:00,100 --> 00:32:03,519
this tool inside backup

660
00:32:01,960 --> 00:32:08,619
how many of you are familiar with better

661
00:32:03,519 --> 00:32:10,659
cop oh nice to see yes because we

662
00:32:08,619 --> 00:32:13,269
consider better cops super powerful and

663
00:32:10,659 --> 00:32:15,549
quite important for this community and

664
00:32:13,269 --> 00:32:18,340
it's the facto men in the middle tool

665
00:32:15,549 --> 00:32:20,679
and this is a man in the middle too

666
00:32:18,340 --> 00:32:24,189
so we are planning to with Simona to

667
00:32:20,679 --> 00:32:27,190
integrate this inside better cup and

668
00:32:24,190 --> 00:32:28,509
then have another module for the

669
00:32:27,190 --> 00:32:31,389
efficient campaign and then you can

670
00:32:28,509 --> 00:32:33,639
imagine when you are performing men in

671
00:32:31,389 --> 00:32:35,799
the middle maybe inside an organization

672
00:32:33,639 --> 00:32:39,998
or something like that where you just

673
00:32:35,799 --> 00:32:42,039
poison the the router so the DNS and

674
00:32:39,999 --> 00:32:43,929
then redirect to the fishing domain and

675
00:32:42,039 --> 00:32:47,649
then you can perform all the magic or

676
00:32:43,929 --> 00:32:50,559
even inside the network's for the

677
00:32:47,649 --> 00:32:52,719
browser automation yes support some

678
00:32:50,559 --> 00:32:54,879
other web portals but actually it's not

679
00:32:52,720 --> 00:32:56,919
our main goal to support of this portal

680
00:32:54,879 --> 00:33:00,969
so whenever we release the code we won't

681
00:32:56,919 --> 00:33:04,119
create a configuration just to pawn this

682
00:33:00,970 --> 00:33:06,879
and that website is just the tool also

683
00:33:04,119 --> 00:33:11,850
some instrumentation jobs and quivering

684
00:33:06,879 --> 00:33:13,928
so just to use more imagining in a

685
00:33:11,850 --> 00:33:17,498
phishing campaign with thousands of

686
00:33:13,929 --> 00:33:19,960
victims then you need to be able to

687
00:33:17,499 --> 00:33:22,210
scale whenever I don't know a hundred or

688
00:33:19,960 --> 00:33:24,970
a thousand people are coming so for now

689
00:33:22,210 --> 00:33:27,249
I think we are able to handle a hundred

690
00:33:24,970 --> 00:33:30,129
people just because we didn't test with

691
00:33:27,249 --> 00:33:32,000
a lot of resources so this is plan a

692
00:33:30,129 --> 00:33:34,159
part of our plans

693
00:33:32,000 --> 00:33:36,650
and yes and use also the browser

694
00:33:34,160 --> 00:33:39,440
instrumentation for the Recon the open

695
00:33:36,650 --> 00:33:43,160
source intelligence pre-prep fishing

696
00:33:39,440 --> 00:33:45,140
part so we can scrape the company XYZ

697
00:33:43,160 --> 00:33:47,240
for example on LinkedIn we just provided

698
00:33:45,140 --> 00:33:49,160
the name of the company and then you

699
00:33:47,240 --> 00:33:52,100
just collect all the victims and then

700
00:33:49,160 --> 00:33:54,650
you can do a lot of this operation

701
00:33:52,100 --> 00:33:56,510
automated so basically the goal is we

702
00:33:54,650 --> 00:33:59,570
are lazy we want to automate this stuff

703
00:33:56,510 --> 00:34:01,160
engine it just focus on the real fishing

704
00:33:59,570 --> 00:34:05,570
part which is collect the information

705
00:34:01,160 --> 00:34:07,640
and make something logical yes this is

706
00:34:05,570 --> 00:34:10,509
where you can find our code in a couple

707
00:34:07,640 --> 00:34:14,000
of weeks or even less just four days

708
00:34:10,510 --> 00:34:16,429
four days 14 of May it is not a fishing

709
00:34:14,000 --> 00:34:22,280
link so you can just scan the QR code

710
00:34:16,429 --> 00:34:23,570
trust us and in case I mean the thing is

711
00:34:22,280 --> 00:34:25,970
the following when everything is going

712
00:34:23,570 --> 00:34:27,889
to be published I'm sure that not none

713
00:34:25,969 --> 00:34:29,388
of you will do it but since this is

714
00:34:27,889 --> 00:34:33,220
going to be recorded other people will

715
00:34:29,389 --> 00:34:35,870
what we see it don't ask us to configure

716
00:34:33,219 --> 00:34:37,609
phishing templates for your own nasty

717
00:34:35,870 --> 00:34:39,949
phishing campaigns we don't do that so

718
00:34:37,610 --> 00:34:45,500
just as technical questions and yes

719
00:34:39,949 --> 00:34:54,290
don't cut this part as well yeah that's

720
00:34:45,500 --> 00:34:57,950
it thank you amazing talking guys thank

721
00:34:54,290 --> 00:35:01,190
you so much thanks for all the fish do

722
00:34:57,950 --> 00:35:12,439
we have any questions in the room here

723
00:35:01,190 --> 00:35:16,150
we have one in the front Mike so thanks

724
00:35:12,440 --> 00:35:20,030
guys and my question was since with the

725
00:35:16,150 --> 00:35:21,770
more serious vendors it looks like you

726
00:35:20,030 --> 00:35:24,830
know cotton mouse game and everything

727
00:35:21,770 --> 00:35:27,230
they came up with are just client-side

728
00:35:24,830 --> 00:35:30,230
solutions in a JavaScript that you can

729
00:35:27,230 --> 00:35:33,890
touch any time do you see any vendors

730
00:35:30,230 --> 00:35:36,020
doing any serious step in well-liked

731
00:35:33,890 --> 00:35:38,930
protections that can actually work and

732
00:35:36,020 --> 00:35:41,720
not relying on security through

733
00:35:38,930 --> 00:35:43,080
obscurity basically on JavaScript which

734
00:35:41,720 --> 00:35:46,379
is even dumber

735
00:35:43,080 --> 00:35:49,410
I mean slapper will probably say

736
00:35:46,380 --> 00:35:51,150
something different but I thought what

737
00:35:49,410 --> 00:35:55,560
I've seen sometimes and we still didn't

738
00:35:51,150 --> 00:35:59,120
look into it is JavaScript that does

739
00:35:55,560 --> 00:36:02,880
like drop the drag and drop challenges

740
00:35:59,120 --> 00:36:05,190
which you can also kind of automate but

741
00:36:02,880 --> 00:36:07,860
it's start to get like a bit more

742
00:36:05,190 --> 00:36:10,380
painful but apart from that actually I

743
00:36:07,860 --> 00:36:13,200
was saying before Google was our kind of

744
00:36:10,380 --> 00:36:15,450
reference in this context and what I

745
00:36:13,200 --> 00:36:18,149
found challenging with Google was that

746
00:36:15,450 --> 00:36:19,980
the JavaScript that they use is dynamic

747
00:36:18,150 --> 00:36:21,810
so sometimes the domains and the

748
00:36:19,980 --> 00:36:23,790
subdomain are concatenated and you

749
00:36:21,810 --> 00:36:26,549
cannot predict so you need a lot of

750
00:36:23,790 --> 00:36:28,529
debugging and then you can just it's

751
00:36:26,550 --> 00:36:31,590
quite tricky but it's not impossible

752
00:36:28,530 --> 00:36:33,030
just need time to go to corporation I

753
00:36:31,590 --> 00:36:36,240
mean then if someone implements

754
00:36:33,030 --> 00:36:37,860
polymorphic obfuscated the JavaScript

755
00:36:36,240 --> 00:36:42,839
that change is even dynamically web

756
00:36:37,860 --> 00:36:45,510
eventually in the browser the bug is

757
00:36:42,840 --> 00:36:48,180
also for example Google just to avoid

758
00:36:45,510 --> 00:36:50,460
this kind of instrument ation they have

759
00:36:48,180 --> 00:36:52,589
the elements in the Dom with the

760
00:36:50,460 --> 00:36:54,840
identifiers that are random so they are

761
00:36:52,590 --> 00:36:56,430
dynamic but still this doesn't fix the

762
00:36:54,840 --> 00:36:58,080
problem because you can just say take

763
00:36:56,430 --> 00:36:59,850
the first element of the DOM and then

764
00:36:58,080 --> 00:37:02,250
the next and the next because they are

765
00:36:59,850 --> 00:37:04,620
nested so you cannot say okay take the

766
00:37:02,250 --> 00:37:06,900
ID or the class you can always find a

767
00:37:04,620 --> 00:37:08,850
way to bypass this so I don't see this

768
00:37:06,900 --> 00:37:11,550
as the real solution this is just to

769
00:37:08,850 --> 00:37:13,950
stop let's say script kiddies from this

770
00:37:11,550 --> 00:37:18,540
but if you are motivated then it doesn't

771
00:37:13,950 --> 00:37:20,910
work so another question related to this

772
00:37:18,540 --> 00:37:23,250
one and do you see is that the major

773
00:37:20,910 --> 00:37:26,220
vendor is influencing the development of

774
00:37:23,250 --> 00:37:28,110
the chrome headless project itself and

775
00:37:26,220 --> 00:37:30,870
all the debugging protocol in a way that

776
00:37:28,110 --> 00:37:36,960
can be more easily fingerprinted by them

777
00:37:30,870 --> 00:37:43,470
I didn't notice this to be honest not

778
00:37:36,960 --> 00:37:46,050
yet not yet actually hi thank you for

779
00:37:43,470 --> 00:37:47,879
the part I have basically two questions

780
00:37:46,050 --> 00:37:50,670
here from our defense perspective

781
00:37:47,880 --> 00:37:53,010
obviously there's defense in on the

782
00:37:50,670 --> 00:37:55,220
website side is there anything at the

783
00:37:53,010 --> 00:37:58,410
protocol level

784
00:37:55,220 --> 00:38:00,509
HSTs or public opinion that would

785
00:37:58,410 --> 00:38:02,190
prevent something or disrupt divorce

786
00:38:00,510 --> 00:38:05,190
proceeding proxies and the other thing

787
00:38:02,190 --> 00:38:07,380
is defenses on the client side which

788
00:38:05,190 --> 00:38:09,480
would probably take the form of like a

789
00:38:07,380 --> 00:38:11,280
browser extension I know that Google had

790
00:38:09,480 --> 00:38:13,200
a browser extension at some point point

791
00:38:11,280 --> 00:38:15,240
they released that made sure you always

792
00:38:13,200 --> 00:38:17,720
imported the password on the Google

793
00:38:15,240 --> 00:38:20,129
website and not some other website so

794
00:38:17,720 --> 00:38:23,009
actually this is the cat and mouse game

795
00:38:20,130 --> 00:38:25,110
so the the problem with the extension

796
00:38:23,010 --> 00:38:27,180
this stuff is that you can always bypass

797
00:38:25,110 --> 00:38:29,310
these approaches and I think that we are

798
00:38:27,180 --> 00:38:31,109
lacking of some kind of standards in

799
00:38:29,310 --> 00:38:37,410
this and I think it would take some

800
00:38:31,110 --> 00:38:38,790
years in my opinion and I mean the first

801
00:38:37,410 --> 00:38:39,990
question is basically it doesn't make

802
00:38:38,790 --> 00:38:43,110
any difference because you are in the

803
00:38:39,990 --> 00:38:45,629
middle the pinning it doesn't make any

804
00:38:43,110 --> 00:38:47,550
difference because you are actually

805
00:38:45,630 --> 00:38:49,080
connecting to an origin that you don't

806
00:38:47,550 --> 00:38:51,810
for sure you didn't pin because I

807
00:38:49,080 --> 00:38:57,270
registered it and HSTs I can strip it

808
00:38:51,810 --> 00:38:59,880
the Chrome extension could work but yeah

809
00:38:57,270 --> 00:39:03,960
I mean is I you can adjust for every web

810
00:38:59,880 --> 00:39:06,150
site I guess that's problem maybe for

811
00:39:03,960 --> 00:39:07,740
the internal networks if you have these

812
00:39:06,150 --> 00:39:11,090
certificates installed in your browser

813
00:39:07,740 --> 00:39:14,430
and then but the problem is that some

814
00:39:11,090 --> 00:39:17,250
the the one of the success of this

815
00:39:14,430 --> 00:39:21,000
reverse proxies is that let's encrypt

816
00:39:17,250 --> 00:39:23,850
for example open the the possibility to

817
00:39:21,000 --> 00:39:26,820
register SSL Certificates for free even

818
00:39:23,850 --> 00:39:28,500
wild card even what that's why we are

819
00:39:26,820 --> 00:39:30,210
succeeding and we are starting to

820
00:39:28,500 --> 00:39:32,190
release this tool and that's why this is

821
00:39:30,210 --> 00:39:34,400
something quite old and nobody were

822
00:39:32,190 --> 00:39:37,470
using before because if you want a what

823
00:39:34,400 --> 00:39:40,800
wildcard certificate is quite costly so

824
00:39:37,470 --> 00:39:42,569
it was oh it is some time so I want a

825
00:39:40,800 --> 00:39:45,119
wildcard certificate used to cost up to

826
00:39:42,570 --> 00:39:47,460
let's say 1k euros 1000 euros if you

827
00:39:45,119 --> 00:39:50,310
could find a cheap one and including the

828
00:39:47,460 --> 00:39:52,230
VPS cost that was more expensive back

829
00:39:50,310 --> 00:39:54,990
then now the cost of do fishing is if

830
00:39:52,230 --> 00:39:56,609
you'd like 10 15 dollars so you can

831
00:39:54,990 --> 00:39:59,430
imagine that you must be really

832
00:39:56,609 --> 00:40:01,230
motivated to buy a certificate and so we

833
00:39:59,430 --> 00:40:04,200
don't exclude that this happening in the

834
00:40:01,230 --> 00:40:06,840
past but now that these certificates are

835
00:40:04,200 --> 00:40:08,310
almost free you everybody can do this

836
00:40:06,840 --> 00:40:10,790
that's why we need

837
00:40:08,310 --> 00:40:15,360
raise the bar again so your advice for

838
00:40:10,790 --> 00:40:18,330
for website owners and users is switched

839
00:40:15,360 --> 00:40:20,670
to hardware tokens like UTF use these

840
00:40:18,330 --> 00:40:22,620
USB based keys and absolutely because

841
00:40:20,670 --> 00:40:24,300
those would be my much harder yes when

842
00:40:22,620 --> 00:40:26,460
there is like some kind of crypto

843
00:40:24,300 --> 00:40:28,590
challenge with the origin and there is

844
00:40:26,460 --> 00:40:32,400
actually some kind of origin enforcement

845
00:40:28,590 --> 00:40:36,930
which is not you know relying on the

846
00:40:32,400 --> 00:40:39,600
other nights you know that that u2f as

847
00:40:36,930 --> 00:40:42,450
we said there were still some bugs and

848
00:40:39,600 --> 00:40:44,430
that it's not they might be reintroduced

849
00:40:42,450 --> 00:40:48,000
in the future in web USB you never know

850
00:40:44,430 --> 00:40:51,779
but yeah u2f currently is a great way to

851
00:40:48,000 --> 00:40:56,910
protect against this amazing any order

852
00:40:51,780 --> 00:40:58,650
question I know thank you okay thank you

853
00:40:56,910 --> 00:40:59,160
let's give a warm

854
00:40:58,650 --> 00:41:03,280
[Music]

855
00:40:59,160 --> 00:41:03,279
[Applause]

856
00:41:08,590 --> 00:41:10,650
you

