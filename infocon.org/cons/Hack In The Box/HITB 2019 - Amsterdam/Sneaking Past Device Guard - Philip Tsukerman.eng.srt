1
00:00:20,090 --> 00:00:24,789
so hello there my name's Philip and I do

2
00:00:22,910 --> 00:00:27,830
security research for cyber using and

3
00:00:24,789 --> 00:00:30,770
apart for from the regular reasons of

4
00:00:27,830 --> 00:00:33,290
wanting to share my research and

5
00:00:30,770 --> 00:00:36,350
shameless self-promotion I'm doing this

6
00:00:33,290 --> 00:00:39,320
talk a couple of times to overcome like

7
00:00:36,350 --> 00:00:43,190
terrifying my terrifying fear of public

8
00:00:39,320 --> 00:00:44,900
speaking so this is going to be about a

9
00:00:43,190 --> 00:00:45,650
feature in Windows 10 called device

10
00:00:44,900 --> 00:00:47,809
guard

11
00:00:45,650 --> 00:00:49,730
we'll see how to bypass it using a

12
00:00:47,809 --> 00:00:51,800
couple of VBA based techniques and also

13
00:00:49,730 --> 00:00:53,900
a couple of non Lybia techniques now

14
00:00:51,800 --> 00:00:56,260
most of these will not be actually

15
00:00:53,900 --> 00:00:59,269
serviced by Microsoft as vulnerabilities

16
00:00:56,260 --> 00:01:02,180
but a real-life attacker does not really

17
00:00:59,269 --> 00:01:04,959
care if something has a CV or it doesn't

18
00:01:02,180 --> 00:01:08,540
it there's no like force field that

19
00:01:04,959 --> 00:01:10,580
prevents them from using other non CBE

20
00:01:08,540 --> 00:01:12,560
where they techniques a real attacker

21
00:01:10,580 --> 00:01:16,640
will use whatever is at hand

22
00:01:12,560 --> 00:01:18,890
so these things existing means that you

23
00:01:16,640 --> 00:01:20,479
will be vulnerable to them we'll also

24
00:01:18,890 --> 00:01:22,250
see a couple of other benefits of the

25
00:01:20,479 --> 00:01:24,140
techniques I'm gonna show that don't

26
00:01:22,250 --> 00:01:26,719
really concern the Vice card and they'll

27
00:01:24,140 --> 00:01:29,799
speak a bit about how to detect these

28
00:01:26,719 --> 00:01:32,689
things all right then so first of all

29
00:01:29,799 --> 00:01:34,999
let's see what device core is and the

30
00:01:32,689 --> 00:01:37,068
Vice card is an application whitelisting

31
00:01:34,999 --> 00:01:39,530
feature that was introduced in Windows

32
00:01:37,069 --> 00:01:42,979
10 it's the successor to an older

33
00:01:39,530 --> 00:01:44,659
feature called AppLocker now as an

34
00:01:42,979 --> 00:01:48,619
application whitelisting feature what it

35
00:01:44,659 --> 00:01:51,079
does is allows only code that is defined

36
00:01:48,619 --> 00:01:53,149
by a specific policy to run on the

37
00:01:51,079 --> 00:01:56,689
machine now this policy contains rules

38
00:01:53,149 --> 00:02:01,490
such as specific certificates or hashes

39
00:01:56,689 --> 00:02:04,579
or even filenames and says that if this

40
00:02:01,490 --> 00:02:07,579
if a piece of code does not comply with

41
00:02:04,579 --> 00:02:10,369
this policy it will be rejected by

42
00:02:07,579 --> 00:02:12,079
default and not be able to run now such

43
00:02:10,369 --> 00:02:14,209
a feature actually inhibits an attacker

44
00:02:12,080 --> 00:02:18,170
ability to run arbitrary code on a

45
00:02:14,209 --> 00:02:19,910
compromised machine application what I

46
00:02:18,170 --> 00:02:24,019
think is pretty interesting from an

47
00:02:19,910 --> 00:02:26,450
offensive by from an offensive viewpoint

48
00:02:24,020 --> 00:02:29,180
because to bypass it you basically have

49
00:02:26,450 --> 00:02:32,700
everything already existing on an

50
00:02:29,180 --> 00:02:34,800
operating system at your disposal

51
00:02:32,700 --> 00:02:37,950
because you can pretty much use any

52
00:02:34,800 --> 00:02:40,140
piece of code there is on the machine

53
00:02:37,950 --> 00:02:45,209
because it will probably be already wide

54
00:02:40,140 --> 00:02:47,730
listed now to understand how these

55
00:02:45,209 --> 00:02:51,120
bypasses work and what they actually

56
00:02:47,730 --> 00:02:52,890
achieve we need to define a bit more

57
00:02:51,120 --> 00:02:55,530
specifically what we mean by arbitrary

58
00:02:52,890 --> 00:02:58,859
code now at least in my definition it's

59
00:02:55,530 --> 00:03:01,370
the ability to fully and freely interact

60
00:02:58,860 --> 00:03:04,650
with the app with the operating system

61
00:03:01,370 --> 00:03:08,370
well we're the only constraint you have

62
00:03:04,650 --> 00:03:12,390
is actually a privilege meaning that I'm

63
00:03:08,370 --> 00:03:13,860
free to try to do anything and maybe the

64
00:03:12,390 --> 00:03:16,380
operating system will tell me well you

65
00:03:13,860 --> 00:03:19,019
cannot access this resource but I should

66
00:03:16,380 --> 00:03:22,019
be able to at least run the code that

67
00:03:19,019 --> 00:03:25,110
tries to access it and the most direct

68
00:03:22,019 --> 00:03:27,000
way to do this is to either have the

69
00:03:25,110 --> 00:03:29,849
ability to allocate in jump to code or

70
00:03:27,000 --> 00:03:32,640
to have the ability to execute arbitrary

71
00:03:29,849 --> 00:03:34,890
API or sis calls and it's really easy to

72
00:03:32,640 --> 00:03:36,750
jump between these two capabilities

73
00:03:34,890 --> 00:03:39,358
because you know you have the SIS calls

74
00:03:36,750 --> 00:03:41,940
to allocate and jump to code and if you

75
00:03:39,359 --> 00:03:44,730
can have your own code running you could

76
00:03:41,940 --> 00:03:47,910
always do whatever Cisco's you want now

77
00:03:44,730 --> 00:03:49,858
this whole we silly definition really

78
00:03:47,910 --> 00:03:51,150
isn't important when you don't have

79
00:03:49,859 --> 00:03:54,900
application whitelisting

80
00:03:51,150 --> 00:03:57,480
because RC remote command execution is

81
00:03:54,900 --> 00:03:59,040
pretty much equivalent to remote code

82
00:03:57,480 --> 00:04:03,030
execution because you could always

83
00:03:59,040 --> 00:04:05,190
bundle whatever code you want in a file

84
00:04:03,030 --> 00:04:07,410
and executable file and you have command

85
00:04:05,190 --> 00:04:09,630
execution you execute your own malware

86
00:04:07,410 --> 00:04:15,959
tool whatever and you can achieve pretty

87
00:04:09,630 --> 00:04:18,649
much what you want this changes the

88
00:04:15,959 --> 00:04:22,410
moment you have application whitelisting

89
00:04:18,649 --> 00:04:24,929
suddenly being able to execute a command

90
00:04:22,410 --> 00:04:27,510
with let's say even a pretty cool

91
00:04:24,930 --> 00:04:32,700
exploit like the recent winrar exploit

92
00:04:27,510 --> 00:04:34,560
which allowed you to write an arbitrary

93
00:04:32,700 --> 00:04:38,430
command to the Run directory and then

94
00:04:34,560 --> 00:04:42,810
run whatever this suddenly becomes much

95
00:04:38,430 --> 00:04:45,490
weaker because let's say you you pop a

96
00:04:42,810 --> 00:04:47,139
calculator or notepad in your lab

97
00:04:45,490 --> 00:04:48,940
and when you want to prepare when you

98
00:04:47,139 --> 00:04:51,430
want to weaponize this exploit you

99
00:04:48,940 --> 00:04:54,009
suddenly discover that well I can pop

100
00:04:51,430 --> 00:04:57,460
notepad on my target machine which

101
00:04:54,009 --> 00:04:59,860
really does not help you because there

102
00:04:57,460 --> 00:05:02,020
are a lot of offensive functionality

103
00:04:59,860 --> 00:05:04,120
that you need to implement such as

104
00:05:02,020 --> 00:05:06,758
credential stealing or command and

105
00:05:04,120 --> 00:05:09,460
control etc which is really really hard

106
00:05:06,759 --> 00:05:14,259
to do only using whatever is available

107
00:05:09,460 --> 00:05:16,690
on your target machine and even if you

108
00:05:14,259 --> 00:05:19,690
have achieved orbit very like full

109
00:05:16,690 --> 00:05:23,219
arbitrary code execution on your target

110
00:05:19,690 --> 00:05:25,360
machine it's pretty easy to just lose it

111
00:05:23,220 --> 00:05:27,849
because let's say you're running in a

112
00:05:25,360 --> 00:05:30,220
sandbox maybe you have a sandbox escape

113
00:05:27,849 --> 00:05:32,139
but the sandbox escape allows you to run

114
00:05:30,220 --> 00:05:34,389
again an arbitrary command and you

115
00:05:32,139 --> 00:05:36,490
reduce to using notepad same thing with

116
00:05:34,389 --> 00:05:38,680
lateral movement and persistence and

117
00:05:36,490 --> 00:05:40,630
privilege escalation many of those

118
00:05:38,680 --> 00:05:42,190
techniques and vulnerabilities only

119
00:05:40,630 --> 00:05:45,039
allow you to run a command meaning that

120
00:05:42,190 --> 00:05:49,659
you have to pair them with some kind of

121
00:05:45,039 --> 00:05:51,460
application whitelisting bypass now

122
00:05:49,659 --> 00:05:55,240
let's talk specifically about device

123
00:05:51,460 --> 00:05:57,849
guard now the way device guard

124
00:05:55,240 --> 00:06:01,870
implements application whitelisting is

125
00:05:57,849 --> 00:06:03,880
by securing a bunch of different ways to

126
00:06:01,870 --> 00:06:07,030
run code of course there's the most

127
00:06:03,880 --> 00:06:07,630
direct one B files you have X's and

128
00:06:07,030 --> 00:06:09,729
dll's

129
00:06:07,630 --> 00:06:13,599
which will not be loaded unless they

130
00:06:09,729 --> 00:06:16,690
comply with the policy there are other

131
00:06:13,599 --> 00:06:19,060
less direct ways to run code which

132
00:06:16,690 --> 00:06:24,250
behave a bit differently

133
00:06:19,060 --> 00:06:26,409
PowerShell if run if you run an unsigned

134
00:06:24,250 --> 00:06:28,630
PowerShell script or one not signed and

135
00:06:26,409 --> 00:06:30,460
compliant with a policy it will still be

136
00:06:28,630 --> 00:06:32,949
able to run but it will run in what's

137
00:06:30,460 --> 00:06:35,940
called constrained language mode this

138
00:06:32,949 --> 00:06:41,860
mode only allows very restricted types

139
00:06:35,940 --> 00:06:46,630
and commands to be used unless you

140
00:06:41,860 --> 00:06:49,680
somehow escape it or you use or you use

141
00:06:46,630 --> 00:06:52,150
whitelist script and this means that

142
00:06:49,680 --> 00:06:54,550
instead of being like the ultimate

143
00:06:52,150 --> 00:06:56,679
Windows hackers toolkit or whatever you

144
00:06:54,550 --> 00:06:58,270
just again have some kind of command

145
00:06:56,680 --> 00:06:59,470
line tool which really isn't that

146
00:06:58,270 --> 00:07:01,330
powerful

147
00:06:59,470 --> 00:07:03,460
the same thing goes with active script

148
00:07:01,330 --> 00:07:06,280
engines which is things like jscript and

149
00:07:03,460 --> 00:07:07,960
vbscript these mostly interact with the

150
00:07:06,280 --> 00:07:11,169
underlying operating system using calm

151
00:07:07,960 --> 00:07:14,560
objects which are filtered on non

152
00:07:11,169 --> 00:07:17,380
whitelisting scripts so assembly are

153
00:07:14,560 --> 00:07:20,070
only able to use things like reg X's and

154
00:07:17,380 --> 00:07:26,590
dictionaries instead of the usual

155
00:07:20,070 --> 00:07:29,469
offensive capabilities provided by by

156
00:07:26,590 --> 00:07:33,310
calm objects and things like dot native

157
00:07:29,470 --> 00:07:35,440
jscript so if you try to run something

158
00:07:33,310 --> 00:07:37,870
not compliant will device go with a

159
00:07:35,440 --> 00:07:39,669
device guard policy on a machine in

160
00:07:37,870 --> 00:07:43,330
which it's enabled you're basically

161
00:07:39,669 --> 00:07:50,650
getting this nice blue pop-up which

162
00:07:43,330 --> 00:07:51,969
tells you you're screwed right in now

163
00:07:50,650 --> 00:07:54,130
some of the techniques I'm going to show

164
00:07:51,970 --> 00:07:57,280
actually require administrative

165
00:07:54,130 --> 00:08:01,479
privileges and an administrator could

166
00:07:57,280 --> 00:08:06,280
actually just turn off the Vice card so

167
00:08:01,479 --> 00:08:09,240
why are these even important well when

168
00:08:06,280 --> 00:08:12,669
an administrator disables device guard

169
00:08:09,240 --> 00:08:16,240
this actually requires a restart of the

170
00:08:12,669 --> 00:08:18,789
machine to go in action and it also

171
00:08:16,240 --> 00:08:21,940
throws a pretty nasty event log and if

172
00:08:18,789 --> 00:08:23,650
you're already implementing application

173
00:08:21,940 --> 00:08:26,560
whitelisting and device guard on your

174
00:08:23,650 --> 00:08:29,710
network you should probably look for

175
00:08:26,560 --> 00:08:33,940
machines suddenly disabling this feature

176
00:08:29,710 --> 00:08:36,460
because this is extremely suspicious so

177
00:08:33,940 --> 00:08:38,469
it might be nice that you could still

178
00:08:36,460 --> 00:08:43,150
execute but you will be very quickly

179
00:08:38,469 --> 00:08:45,270
detected or at least so I hope the

180
00:08:43,150 --> 00:08:48,189
moment we have more and more

181
00:08:45,270 --> 00:08:52,030
administrative bypasses suddenly this

182
00:08:48,190 --> 00:08:54,070
doesn't hold you could have a lot of you

183
00:08:52,030 --> 00:08:56,170
could use a lot of stealthy ways to the

184
00:08:54,070 --> 00:09:00,180
same to not really disabled device guard

185
00:08:56,170 --> 00:09:02,949
and still run your arbitrary code and

186
00:09:00,180 --> 00:09:05,890
simply stay undetected for quite a long

187
00:09:02,950 --> 00:09:08,550
time and this really gives less

188
00:09:05,890 --> 00:09:10,930
reliability to the feature because

189
00:09:08,550 --> 00:09:13,660
device guard does not really care about

190
00:09:10,930 --> 00:09:16,390
users so you may

191
00:09:13,660 --> 00:09:19,060
if you're a benign user running as admin

192
00:09:16,390 --> 00:09:21,069
you won't be able to run whatever you

193
00:09:19,060 --> 00:09:23,020
want and you will be very frustrated and

194
00:09:21,070 --> 00:09:26,140
if you're a malefactor

195
00:09:23,020 --> 00:09:28,270
you will be able to bypass it which

196
00:09:26,140 --> 00:09:32,080
makes it just a really annoying feature

197
00:09:28,270 --> 00:09:34,240
as an admin all right so let's jump into

198
00:09:32,080 --> 00:09:38,170
a couple of actual bypasses the first

199
00:09:34,240 --> 00:09:40,560
few will gonna use VBA now VBA Visual

200
00:09:38,170 --> 00:09:43,360
Basic for applications is basically the

201
00:09:40,560 --> 00:09:46,569
language engine that powers office

202
00:09:43,360 --> 00:09:49,090
macros and while you can't really expect

203
00:09:46,570 --> 00:09:54,370
Microsoft to lock down every piece of

204
00:09:49,090 --> 00:09:56,890
software in existence and you should

205
00:09:54,370 --> 00:09:59,500
probably expect them like to do only the

206
00:09:56,890 --> 00:10:02,949
u.s. stuff this is still a major

207
00:09:59,500 --> 00:10:05,080
Microsoft product and it's really and it

208
00:10:02,950 --> 00:10:07,990
will be pretty much on any non server

209
00:10:05,080 --> 00:10:11,080
machine running Windows so it's really

210
00:10:07,990 --> 00:10:13,360
weird they're pretty much ignoring

211
00:10:11,080 --> 00:10:16,570
device guard meaning that if you're able

212
00:10:13,360 --> 00:10:18,970
to run a macro you can do whatever you

213
00:10:16,570 --> 00:10:20,440
want with it there's no there is no

214
00:10:18,970 --> 00:10:22,960
mention of signing and it will

215
00:10:20,440 --> 00:10:24,910
absolutely bypass device guard and it's

216
00:10:22,960 --> 00:10:26,680
really easy to gain like full process

217
00:10:24,910 --> 00:10:29,680
control using macros you could just

218
00:10:26,680 --> 00:10:31,810
import raw win API functions and run

219
00:10:29,680 --> 00:10:34,439
your shell code or whatever or you could

220
00:10:31,810 --> 00:10:37,390
use dotnet to jscript using a couple of

221
00:10:34,440 --> 00:10:40,900
dotnet comma objects to also load a

222
00:10:37,390 --> 00:10:44,530
dotnet assembly which will again lead to

223
00:10:40,900 --> 00:10:46,990
full process control now the naive way

224
00:10:44,530 --> 00:10:50,110
to do this is you know using the GUI

225
00:10:46,990 --> 00:10:52,810
opening a document hitting that enable

226
00:10:50,110 --> 00:10:56,710
control button and that's it your macro

227
00:10:52,810 --> 00:10:58,959
runs but that's pretty lame because this

228
00:10:56,710 --> 00:11:00,250
requires either user interaction and

229
00:10:58,960 --> 00:11:02,410
we're speaking about it post

230
00:11:00,250 --> 00:11:07,620
exploitation scenarios so we really

231
00:11:02,410 --> 00:11:10,120
don't plan anymore user interaction so I

232
00:11:07,620 --> 00:11:12,850
try to search for a couple of other ways

233
00:11:10,120 --> 00:11:17,290
to run macros without any user

234
00:11:12,850 --> 00:11:18,460
interaction without any GUI that could

235
00:11:17,290 --> 00:11:22,150
be done from a post exploitation

236
00:11:18,460 --> 00:11:25,360
scenario and the first one is a lateral

237
00:11:22,150 --> 00:11:26,319
movement or dekum approach most office

238
00:11:25,360 --> 00:11:28,510
applications

239
00:11:26,320 --> 00:11:31,090
actually expose a calm object which is

240
00:11:28,510 --> 00:11:34,960
available remotely and these allow you

241
00:11:31,090 --> 00:11:37,900
to actually insert and run macros into a

242
00:11:34,960 --> 00:11:39,760
document or actually into like an

243
00:11:37,900 --> 00:11:42,819
unsaved document working absolutely

244
00:11:39,760 --> 00:11:45,819
flawlessly now it's pretty hard to use

245
00:11:42,820 --> 00:11:48,760
this locally under the base card because

246
00:11:45,820 --> 00:11:50,710
you won't be able to interact through

247
00:11:48,760 --> 00:11:55,210
let's say script or PowerShell which are

248
00:11:50,710 --> 00:11:58,150
locked down with with the let's see

249
00:11:55,210 --> 00:12:01,620
excel comm object but nothing prevents

250
00:11:58,150 --> 00:12:03,610
you from doing this remotely so if I'm

251
00:12:01,620 --> 00:12:05,560
controlling another machine and I do

252
00:12:03,610 --> 00:12:10,030
have the credentials for my target

253
00:12:05,560 --> 00:12:12,489
machine I could just use the office

254
00:12:10,030 --> 00:12:17,650
application object by decom and make it

255
00:12:12,490 --> 00:12:18,580
run macro so here we have a pretty

256
00:12:17,650 --> 00:12:20,230
simple

257
00:12:18,580 --> 00:12:22,870
PowerShell implementation what we're

258
00:12:20,230 --> 00:12:26,410
doing is we have this string with a

259
00:12:22,870 --> 00:12:31,120
macro we're doing a bit of registry

260
00:12:26,410 --> 00:12:33,280
wizardry using WMI to change a small key

261
00:12:31,120 --> 00:12:35,350
which will allow us to actually insert

262
00:12:33,280 --> 00:12:37,959
the macro into an unsaved document and

263
00:12:35,350 --> 00:12:41,320
then we just ran the macro and this is

264
00:12:37,960 --> 00:12:43,660
enough to bypass device guard on a

265
00:12:41,320 --> 00:12:48,790
remote machine without actually running

266
00:12:43,660 --> 00:12:52,270
any kind of commands locally but you

267
00:12:48,790 --> 00:12:54,640
know that that's nice but we still want

268
00:12:52,270 --> 00:12:58,150
to do this on privilege and we want to

269
00:12:54,640 --> 00:13:00,640
be able to do this locally because like

270
00:12:58,150 --> 00:13:02,230
you've exploited a single machine you

271
00:13:00,640 --> 00:13:04,540
don't need and you don't want another

272
00:13:02,230 --> 00:13:06,790
machine to be under your control before

273
00:13:04,540 --> 00:13:09,880
you can actually bypass device guard so

274
00:13:06,790 --> 00:13:12,280
let's see what we can do here and we

275
00:13:09,880 --> 00:13:14,620
need to check when does office simply

276
00:13:12,280 --> 00:13:18,520
not use protected mode so you don't even

277
00:13:14,620 --> 00:13:22,140
have this enable content thing and there

278
00:13:18,520 --> 00:13:24,819
are two main cases the first case is

279
00:13:22,140 --> 00:13:27,790
that each document that is considered

280
00:13:24,820 --> 00:13:30,250
trusted which are mostly documents for

281
00:13:27,790 --> 00:13:32,349
which you have already once pressed

282
00:13:30,250 --> 00:13:34,270
enabled content will run again because

283
00:13:32,350 --> 00:13:40,010
if you trust it once and it's never

284
00:13:34,270 --> 00:13:42,560
changed well why not trust it again and

285
00:13:40,010 --> 00:13:45,470
the other category is documents running

286
00:13:42,560 --> 00:13:49,189
from trusted locations which is the

287
00:13:45,470 --> 00:13:51,350
category I'm going to abuse here so what

288
00:13:49,190 --> 00:13:53,260
are trusted locations there are

289
00:13:51,350 --> 00:13:56,690
basically a bunch of folders that are

290
00:13:53,260 --> 00:13:58,819
described in the registry which tell you

291
00:13:56,690 --> 00:14:02,240
everything is in this folder is trusted

292
00:13:58,820 --> 00:14:04,490
forget about protected mode and even if

293
00:14:02,240 --> 00:14:07,760
you have macros disabled macros will run

294
00:14:04,490 --> 00:14:09,710
because disabling macros actually only

295
00:14:07,760 --> 00:14:12,410
prevents the windows from creating new

296
00:14:09,710 --> 00:14:18,710
trusted stuff so all of your old trusted

297
00:14:12,410 --> 00:14:24,050
stuff will work under under disable

298
00:14:18,710 --> 00:14:26,270
macros and the default trusted

299
00:14:24,050 --> 00:14:29,060
directories are actually only writable

300
00:14:26,270 --> 00:14:32,689
by admins so for example we have this

301
00:14:29,060 --> 00:14:36,189
ACC with location which is actually the

302
00:14:32,690 --> 00:14:39,470
microsoft access trustee directory and

303
00:14:36,190 --> 00:14:42,440
as you can see I can read it but as a

304
00:14:39,470 --> 00:14:43,850
regular user I can't ride it I can't fly

305
00:14:42,440 --> 00:14:47,390
to it so I can't just abuse this

306
00:14:43,850 --> 00:14:50,750
directory as an unprivileged user but

307
00:14:47,390 --> 00:14:52,280
why but you can see that this is

308
00:14:50,750 --> 00:14:55,970
actually just managed in the registry

309
00:14:52,280 --> 00:14:58,189
and a pre self-described format you

310
00:14:55,970 --> 00:15:00,310
basically have trusted locations the

311
00:14:58,190 --> 00:15:04,040
name of a trusted location and a path

312
00:15:00,310 --> 00:15:07,819
and here we see why it's problematic

313
00:15:04,040 --> 00:15:11,180
because well it's fine that you can try

314
00:15:07,820 --> 00:15:12,920
to the default trusted directory but the

315
00:15:11,180 --> 00:15:15,290
key that matches the trusted directories

316
00:15:12,920 --> 00:15:18,380
is an HBCU meaning that you could always

317
00:15:15,290 --> 00:15:20,390
write another new trusted directory so

318
00:15:18,380 --> 00:15:23,089
you don't need the old one all we need

319
00:15:20,390 --> 00:15:25,160
to do is actually writing in register

320
00:15:23,089 --> 00:15:27,080
key create a new trusted directory which

321
00:15:25,160 --> 00:15:29,750
you can do always under the context of

322
00:15:27,080 --> 00:15:32,839
your own user so you can do this

323
00:15:29,750 --> 00:15:36,230
unpublished so for example I'm using C

324
00:15:32,839 --> 00:15:41,360
temp dropping some kind of database with

325
00:15:36,230 --> 00:15:45,800
a macro and as you can see I can run the

326
00:15:41,360 --> 00:15:47,450
macro without any user interaction and

327
00:15:45,800 --> 00:15:50,089
you could also even add this nice

328
00:15:47,450 --> 00:15:51,980
embedding flag to the end of the command

329
00:15:50,089 --> 00:15:53,200
line to prevent office from creating a

330
00:15:51,980 --> 00:15:56,000
GUI for any of that

331
00:15:53,200 --> 00:15:58,520
applications so you don't have this

332
00:15:56,000 --> 00:16:02,090
pesky and very suspicious window popping

333
00:15:58,520 --> 00:16:08,750
out when you actually deliver and run

334
00:16:02,090 --> 00:16:11,240
your payload so all right now we

335
00:16:08,750 --> 00:16:15,470
understand that macros are a terrible

336
00:16:11,240 --> 00:16:17,960
thing to have on machine but device car

337
00:16:15,470 --> 00:16:22,730
because they pretty much break it so

338
00:16:17,960 --> 00:16:26,810
let's say we want to just block vb7 DLL

339
00:16:22,730 --> 00:16:28,960
the VBA engine pretty much explicitly so

340
00:16:26,810 --> 00:16:31,760
this never loads and you can do this

341
00:16:28,960 --> 00:16:35,270
under device card you can also have add

342
00:16:31,760 --> 00:16:39,170
black lists to your policy so if this

343
00:16:35,270 --> 00:16:41,270
engine can't run no matters for you this

344
00:16:39,170 --> 00:16:44,060
is why we'll try to find some non VBA

345
00:16:41,270 --> 00:16:46,790
based bypasses and because we're done

346
00:16:44,060 --> 00:16:51,829
with looking at macros now it's time to

347
00:16:46,790 --> 00:16:53,870
look at a couple of macros so VBA macros

348
00:16:51,830 --> 00:16:56,210
are actually not the only macro system

349
00:16:53,870 --> 00:16:58,640
existing in office there's an older

350
00:16:56,210 --> 00:17:01,850
system that exists in Excel called Excel

351
00:16:58,640 --> 00:17:02,870
4.0 macros and this actually exists

352
00:17:01,850 --> 00:17:08,329
since 92

353
00:17:02,870 --> 00:17:11,839
and unlike vb7 it's actually implemented

354
00:17:08,329 --> 00:17:14,800
in Excel Dexy itself meaning it's a bit

355
00:17:11,839 --> 00:17:20,149
harder to circumvent and to block the

356
00:17:14,800 --> 00:17:22,909
bad part of Excel for macros and what

357
00:17:20,150 --> 00:17:26,270
Excel for macros allow us is to use two

358
00:17:22,910 --> 00:17:29,420
functions called call and register which

359
00:17:26,270 --> 00:17:33,190
will give us access to arbitrary DLL

360
00:17:29,420 --> 00:17:38,390
functions meaning that we could use

361
00:17:33,190 --> 00:17:40,760
different cisco's etc but the syntax is

362
00:17:38,390 --> 00:17:44,390
as bad as you can imagine for something

363
00:17:40,760 --> 00:17:48,020
that was implemented for macros in 92

364
00:17:44,390 --> 00:17:50,270
and it's pretty horrible now when I

365
00:17:48,020 --> 00:17:53,750
first discovered Excel for macros

366
00:17:50,270 --> 00:17:56,030
I actually didn't find a way to to abuse

367
00:17:53,750 --> 00:17:58,040
and bypass device guard with it because

368
00:17:56,030 --> 00:18:00,860
I was only able to like run different

369
00:17:58,040 --> 00:18:02,450
command lines and run scripts which as I

370
00:18:00,860 --> 00:18:04,879
said are instrumented by device guard

371
00:18:02,450 --> 00:18:07,670
but Stan

372
00:18:04,880 --> 00:18:11,060
from outflank actually discovered a way

373
00:18:07,670 --> 00:18:13,880
to use to run x86 shellcode we're using

374
00:18:11,060 --> 00:18:19,070
this method meaning that well if we have

375
00:18:13,880 --> 00:18:22,190
shellcode running we satisfy one of our

376
00:18:19,070 --> 00:18:26,179
requirements for a full arbitrary code

377
00:18:22,190 --> 00:18:27,770
execution so this looks like this we

378
00:18:26,180 --> 00:18:31,940
have this register function that

379
00:18:27,770 --> 00:18:34,490
registers an API call here we have

380
00:18:31,940 --> 00:18:37,310
virtual lock write process memory and

381
00:18:34,490 --> 00:18:41,120
create thread the basically shellcode

382
00:18:37,310 --> 00:18:44,330
usual suspects and we are able to use

383
00:18:41,120 --> 00:18:48,199
them the weird jjjj stuff is actually

384
00:18:44,330 --> 00:18:50,720
how you describe a function signature to

385
00:18:48,200 --> 00:18:54,980
excel for macros and now all we need to

386
00:18:50,720 --> 00:18:57,260
do is to call virtual lock call write

387
00:18:54,980 --> 00:19:00,500
process memory and we actually can store

388
00:18:57,260 --> 00:19:03,200
our shellcode as an array of bytes in an

389
00:19:00,500 --> 00:19:06,920
excel cell this weird value thing is

390
00:19:03,200 --> 00:19:08,810
because you could store a lot of bytes

391
00:19:06,920 --> 00:19:09,620
in a single cell but sometimes Excel

392
00:19:08,810 --> 00:19:12,440
says well I

393
00:19:09,620 --> 00:19:14,570
I can't display it but the macros can

394
00:19:12,440 --> 00:19:16,520
still access it and then you just do

395
00:19:14,570 --> 00:19:20,629
create thread and that's pretty much it

396
00:19:16,520 --> 00:19:25,430
and you're running shellcode now one way

397
00:19:20,630 --> 00:19:28,760
to abuse this is to again use decom you

398
00:19:25,430 --> 00:19:31,400
could just drop a file with with an

399
00:19:28,760 --> 00:19:34,879
Excel for macro embedded on your target

400
00:19:31,400 --> 00:19:36,770
machine and use the Excel application to

401
00:19:34,880 --> 00:19:38,990
run all of the atom app all the auto

402
00:19:36,770 --> 00:19:43,610
macros which will execute our shellcode

403
00:19:38,990 --> 00:19:45,350
and Stan eval thank actually recently

404
00:19:43,610 --> 00:19:49,610
implemented a file list version of that

405
00:19:45,350 --> 00:19:52,280
because the the the excel application

406
00:19:49,610 --> 00:19:54,199
comma object actually exposes macro

407
00:19:52,280 --> 00:19:57,050
functionality remotely so you could just

408
00:19:54,200 --> 00:19:58,580
call Excel execute Excel for macro and

409
00:19:57,050 --> 00:20:04,730
give it a strength with the macro and

410
00:19:58,580 --> 00:20:07,520
that that will do now up until pretty

411
00:20:04,730 --> 00:20:11,330
much today this only worked for x86

412
00:20:07,520 --> 00:20:14,270
shellcode because of various data type

413
00:20:11,330 --> 00:20:18,220
constrains and because the

414
00:20:14,270 --> 00:20:22,658
implementation of it for x86

415
00:20:18,220 --> 00:20:24,450
before was pretty buggy so I'm actually

416
00:20:22,659 --> 00:20:27,549
releasing a small article today about

417
00:20:24,450 --> 00:20:33,250
how I was still able to pour this tune

418
00:20:27,549 --> 00:20:36,030
64 bits I'm also I'm also fixing a

419
00:20:33,250 --> 00:20:38,140
couple of problems with the speed of

420
00:20:36,030 --> 00:20:41,668
basically writing the shell code because

421
00:20:38,140 --> 00:20:43,870
it was written by PI byte remotely over

422
00:20:41,669 --> 00:20:47,679
decom which is a protocol with

423
00:20:43,870 --> 00:20:50,639
considerable overhead so you could read

424
00:20:47,679 --> 00:20:52,900
this thing now I think it's out and

425
00:20:50,640 --> 00:20:55,870
that's it for itself for macros or

426
00:20:52,900 --> 00:20:58,000
almost this is the tool I've released

427
00:20:55,870 --> 00:21:00,539
which is a basically a rewrite of the

428
00:20:58,000 --> 00:21:04,000
original Excel for macro shell code tool

429
00:21:00,539 --> 00:21:08,350
which will just allow you to specify oh

430
00:21:04,000 --> 00:21:10,870
here's a here's an IP please run X X 64

431
00:21:08,350 --> 00:21:17,230
shell code on that machine through Excel

432
00:21:10,870 --> 00:21:19,090
and using this like with the trusty

433
00:21:17,230 --> 00:21:20,919
directory trick is exactly the same you

434
00:21:19,090 --> 00:21:24,370
create a new trusted directory you just

435
00:21:20,919 --> 00:21:26,799
execute your your Excel for macro file

436
00:21:24,370 --> 00:21:29,678
just like you execute of an excel file

437
00:21:26,799 --> 00:21:34,658
with VBA and it runs just exactly the

438
00:21:29,679 --> 00:21:37,360
same now as I've said the benefit of

439
00:21:34,659 --> 00:21:40,450
Excel for macros the main one is that

440
00:21:37,360 --> 00:21:44,229
they're implemented in Excel itself

441
00:21:40,450 --> 00:21:47,289
meaning that if we can block vb7 and

442
00:21:44,230 --> 00:21:49,960
give you like an office without VBA to

443
00:21:47,289 --> 00:21:52,360
use on your whitelisted machine you

444
00:21:49,960 --> 00:21:55,330
can't really do this with Excel so you

445
00:21:52,360 --> 00:21:57,908
have to choose do I want white listing

446
00:21:55,330 --> 00:22:01,059
on my machines or do we want to use

447
00:21:57,909 --> 00:22:03,100
office and you can't have both because

448
00:22:01,059 --> 00:22:05,950
this is pretty much a forever day unless

449
00:22:03,100 --> 00:22:08,620
Microsoft decides that either to kill

450
00:22:05,950 --> 00:22:11,440
Excel for macros which I don't know if

451
00:22:08,620 --> 00:22:14,408
anybody still uses in a benign context

452
00:22:11,440 --> 00:22:20,049
or to actually instrument all of office

453
00:22:14,409 --> 00:22:24,419
with device card all right so let's move

454
00:22:20,049 --> 00:22:27,970
on to a couple of active script bypasses

455
00:22:24,419 --> 00:22:30,250
now active script is a Windows

456
00:22:27,970 --> 00:22:31,600
technology that allows you to pretty

457
00:22:30,250 --> 00:22:34,870
much script

458
00:22:31,600 --> 00:22:37,030
any of your own applications using a

459
00:22:34,870 --> 00:22:38,770
couple of different scripting engines

460
00:22:37,030 --> 00:22:40,960
and you could also write your own

461
00:22:38,770 --> 00:22:43,299
scripting engine which will be able to

462
00:22:40,960 --> 00:22:46,750
work with any of the compliant

463
00:22:43,299 --> 00:22:49,480
applications and active script engines

464
00:22:46,750 --> 00:22:51,520
and hosts have been the target of a

465
00:22:49,480 --> 00:22:55,059
couple of recent bypasses mostly called

466
00:22:51,520 --> 00:22:57,280
squib Lee whatever but we'll talk about

467
00:22:55,059 --> 00:22:59,260
a couple of different ones here so first

468
00:22:57,280 --> 00:23:01,480
of all let's understand what active

469
00:22:59,260 --> 00:23:05,559
scripts is what what active script they

470
00:23:01,480 --> 00:23:07,780
actually composed off the least

471
00:23:05,559 --> 00:23:09,908
surprising element is scripting engines

472
00:23:07,780 --> 00:23:11,980
you basically implement a scripting

473
00:23:09,909 --> 00:23:15,520
engine that exposes a couple of calm

474
00:23:11,980 --> 00:23:18,010
interfaces which are defined in the

475
00:23:15,520 --> 00:23:20,500
active script standard and the other

476
00:23:18,010 --> 00:23:24,129
main component is scripting hosts which

477
00:23:20,500 --> 00:23:26,260
is the element that's supposed to

478
00:23:24,130 --> 00:23:30,070
communicate with the scripting engine

479
00:23:26,260 --> 00:23:32,049
and provide the host application with

480
00:23:30,070 --> 00:23:35,500
the ability to script itself and the

481
00:23:32,049 --> 00:23:38,860
scripting engine itself with information

482
00:23:35,500 --> 00:23:41,760
and methods from the host application so

483
00:23:38,860 --> 00:23:46,299
for example when you run a script

484
00:23:41,760 --> 00:23:50,230
through C script eggsy it knows nothing

485
00:23:46,299 --> 00:23:52,240
about HTML but when you run Internet

486
00:23:50,230 --> 00:23:58,900
Explorer then suddenly oh yes of course

487
00:23:52,240 --> 00:24:01,480
yeah it divs and whatever so the way the

488
00:23:58,900 --> 00:24:03,159
way Java Script suddenly or at least the

489
00:24:01,480 --> 00:24:06,370
Internet Explorer version of the Java

490
00:24:03,159 --> 00:24:08,590
Script subtly realizes what hTML is is

491
00:24:06,370 --> 00:24:10,918
because it can communicate with the MS

492
00:24:08,590 --> 00:24:14,520
HTML scripting host

493
00:24:10,919 --> 00:24:16,990
now the most common host and engines

494
00:24:14,520 --> 00:24:20,559
which are natively present in a and

495
00:24:16,990 --> 00:24:23,590
windows are on the host side we have W

496
00:24:20,559 --> 00:24:26,350
and C script strf dll which is the

497
00:24:23,590 --> 00:24:31,408
engine implementing calm scriptlets we

498
00:24:26,350 --> 00:24:34,360
have NS XML 3 & 6 which which implement

499
00:24:31,409 --> 00:24:36,789
XML and XSL style sheets and we have MS

500
00:24:34,360 --> 00:24:40,658
HTML which is the Internet Explorer HTML

501
00:24:36,789 --> 00:24:42,520
engine and on the engine side we have J

502
00:24:40,659 --> 00:24:45,100
script which is Java Script vbscript and

503
00:24:42,520 --> 00:24:45,490
jscript ix are dll which is also Java

504
00:24:45,100 --> 00:24:48,189
Script

505
00:24:45,490 --> 00:24:54,299
because we need multiple implementations

506
00:24:48,190 --> 00:24:57,760
of JavaScript of course and the way that

507
00:24:54,299 --> 00:25:01,720
active script works is that at least in

508
00:24:57,760 --> 00:25:03,158
theory any scripting engine compliant

509
00:25:01,720 --> 00:25:05,470
with active script should be able to

510
00:25:03,159 --> 00:25:08,470
work with every single one of the hosts

511
00:25:05,470 --> 00:25:10,720
because they only communicate by these

512
00:25:08,470 --> 00:25:15,390
interfaces so you can basically just mix

513
00:25:10,720 --> 00:25:20,020
and match now how does device Guard work

514
00:25:15,390 --> 00:25:22,120
in the context of active script so as

515
00:25:20,020 --> 00:25:27,520
I've said before what device guard does

516
00:25:22,120 --> 00:25:30,279
to two non whitelisted scripts is filter

517
00:25:27,520 --> 00:25:33,908
call objects so let's walk through this

518
00:25:30,279 --> 00:25:37,299
process let's say I want to create the

519
00:25:33,909 --> 00:25:43,480
object W script shell which is not a

520
00:25:37,299 --> 00:25:47,770
part of the of the allowed in of the

521
00:25:43,480 --> 00:25:52,120
allowed objects in non signed scripts so

522
00:25:47,770 --> 00:25:56,279
I I do create ActiveX object W script

523
00:25:52,120 --> 00:25:59,229
shell the scripting engine tries to

524
00:25:56,279 --> 00:26:01,720
translate this friendly provide a name

525
00:25:59,230 --> 00:26:04,779
to a class ID which is a gooood

526
00:26:01,720 --> 00:26:07,240
symbolizing the comm object-- and then

527
00:26:04,779 --> 00:26:10,080
it calls a function called is class

528
00:26:07,240 --> 00:26:13,270
allowed on the host which checks our

529
00:26:10,080 --> 00:26:16,480
newly gained or newly acquired class ID

530
00:26:13,270 --> 00:26:20,080
against a closed hard-coded list of

531
00:26:16,480 --> 00:26:21,880
allowed objects of course if you have a

532
00:26:20,080 --> 00:26:23,918
trusted script this check simply does

533
00:26:21,880 --> 00:26:25,870
not happen and everything can be created

534
00:26:23,919 --> 00:26:28,840
but we have this is class allowed

535
00:26:25,870 --> 00:26:32,559
function which checks against hard-coded

536
00:26:28,840 --> 00:26:36,520
list in library called wld key dll

537
00:26:32,559 --> 00:26:38,649
windows lockdown policy and if

538
00:26:36,520 --> 00:26:40,629
everything succeeds we have our

539
00:26:38,649 --> 00:26:42,668
scripting engine use co-create instance

540
00:26:40,630 --> 00:26:47,080
to create an instance of our coma object

541
00:26:42,669 --> 00:26:51,730
and if it doesn't work it simply throw

542
00:26:47,080 --> 00:26:56,010
an exception now not every not every

543
00:26:51,730 --> 00:26:59,389
single engine and host actually supports

544
00:26:56,010 --> 00:27:01,489
device guard meaning that

545
00:26:59,389 --> 00:27:04,488
you don't have this is class allowed or

546
00:27:01,489 --> 00:27:08,479
it's not called and what happens then is

547
00:27:04,489 --> 00:27:10,070
that you simply ignore the lack of is

548
00:27:08,479 --> 00:27:13,070
class allowed and you can create

549
00:27:10,070 --> 00:27:14,689
whatever so one category of active

550
00:27:13,070 --> 00:27:16,339
script bypasses is to actually find a

551
00:27:14,690 --> 00:27:19,009
host that does not have this is class

552
00:27:16,339 --> 00:27:20,539
allowed function which then simply

553
00:27:19,009 --> 00:27:25,969
silently fails and lets you create

554
00:27:20,539 --> 00:27:28,489
whatever so one such scripting host is

555
00:27:25,969 --> 00:27:35,179
active script consumer which you might

556
00:27:28,489 --> 00:27:36,940
know from from WMI persistence now the

557
00:27:35,179 --> 00:27:39,559
active script in sumer actually

558
00:27:36,940 --> 00:27:43,789
implements in its own XE and SE are

559
00:27:39,559 --> 00:27:48,259
constantly its own active script host

560
00:27:43,789 --> 00:27:50,959
which is which it does not rely on

561
00:27:48,259 --> 00:27:53,409
anything that i've shown in the common

562
00:27:50,959 --> 00:27:55,669
host slide and it's simply not

563
00:27:53,409 --> 00:27:57,709
instrumented by device guard meaning

564
00:27:55,669 --> 00:27:59,299
that if you're able to run it

565
00:27:57,709 --> 00:28:02,209
there's nothing inhibiting you from

566
00:27:59,299 --> 00:28:05,119
creating any cooperate that you want and

567
00:28:02,209 --> 00:28:07,940
for example use dotnet TJ script to be

568
00:28:05,119 --> 00:28:10,099
in full process control the only

569
00:28:07,940 --> 00:28:15,669
downside is that it's only available to

570
00:28:10,099 --> 00:28:18,019
admins so that's a bit of a shame anyway

571
00:28:15,669 --> 00:28:20,389
this is how you implement it if you've

572
00:28:18,019 --> 00:28:22,219
ever seen the implementation of W my

573
00:28:20,389 --> 00:28:25,668
persistent this looks exactly the same

574
00:28:22,219 --> 00:28:28,159
there are no other steps basically what

575
00:28:25,669 --> 00:28:30,679
you need to do is to create an instant

576
00:28:28,159 --> 00:28:33,320
of the active script consumer class give

577
00:28:30,679 --> 00:28:35,839
it the script text that you want it to

578
00:28:33,320 --> 00:28:40,189
run and then you need to bind it to some

579
00:28:35,839 --> 00:28:44,059
kind of event that's described by the

580
00:28:40,190 --> 00:28:47,599
that's described by wql query which is

581
00:28:44,059 --> 00:28:49,519
this sql-like syntax so now we have a

582
00:28:47,599 --> 00:28:52,369
script running command at eggsy every

583
00:28:49,519 --> 00:28:56,089
time that notepad that notepad Aleksey

584
00:28:52,369 --> 00:28:58,039
is executed which i forgot on my VM and

585
00:28:56,089 --> 00:29:00,589
then got really scared that there's like

586
00:28:58,039 --> 00:29:02,899
a ton of command that X is running on it

587
00:29:00,589 --> 00:29:05,958
because I open notepad a bunch of times

588
00:29:02,899 --> 00:29:10,658
so I don't forget your research projects

589
00:29:05,959 --> 00:29:10,659
or at least you know snapshot I guess

590
00:29:11,139 --> 00:29:16,409
another

591
00:29:13,140 --> 00:29:19,830
unenlightened scripting host which does

592
00:29:16,410 --> 00:29:23,310
not implement device guard is the exit

593
00:29:19,830 --> 00:29:27,000
the msxml libraries that implement XSL

594
00:29:23,310 --> 00:29:29,850
transforms and now XSL transforms are

595
00:29:27,000 --> 00:29:34,260
basically a type of file that allows you

596
00:29:29,850 --> 00:29:37,850
to programmatically manipulate xml files

597
00:29:34,260 --> 00:29:41,310
and of course it implements its own

598
00:29:37,850 --> 00:29:43,889
fully capable scripting engine which is

599
00:29:41,310 --> 00:29:46,820
again not instrumented by device guards

600
00:29:43,890 --> 00:29:50,910
so if you can somehow run and and

601
00:29:46,820 --> 00:29:55,220
transform an XML file using an arbitrary

602
00:29:50,910 --> 00:29:58,530
XSL transform you again can run on

603
00:29:55,220 --> 00:30:01,170
sandboxed JavaScript or VB script or

604
00:29:58,530 --> 00:30:06,870
whatever so a couple of ways to do this

605
00:30:01,170 --> 00:30:08,730
again using office oh sorry a couple of

606
00:30:06,870 --> 00:30:12,270
ways to do this again using office is

607
00:30:08,730 --> 00:30:15,360
for example using Microsoft Access

608
00:30:12,270 --> 00:30:18,690
transform the whole XML so the microsoft

609
00:30:15,360 --> 00:30:20,780
access call object has this nice

610
00:30:18,690 --> 00:30:24,900
transform XML method that basically

611
00:30:20,780 --> 00:30:26,730
allows you to use to just specify the

612
00:30:24,900 --> 00:30:30,180
name of a file or actually even just a

613
00:30:26,730 --> 00:30:34,050
URL in a name of an XML file and then

614
00:30:30,180 --> 00:30:36,780
apply your transform to whatever so all

615
00:30:34,050 --> 00:30:38,970
you need to do is to access the column

616
00:30:36,780 --> 00:30:41,940
object and run this method with your

617
00:30:38,970 --> 00:30:47,090
malicious XML file with your malicious

618
00:30:41,940 --> 00:30:50,820
XSL file and this is how it looks

619
00:30:47,090 --> 00:30:52,889
you say that well i wanna i want to put

620
00:30:50,820 --> 00:30:54,419
my result at whatever week because we

621
00:30:52,890 --> 00:30:56,520
don't really care because the transform

622
00:30:54,420 --> 00:30:58,710
itself will fail we only want our script

623
00:30:56,520 --> 00:31:00,930
to run and then i could actually just

624
00:30:58,710 --> 00:31:02,400
feed my excel file to itself because i

625
00:31:00,930 --> 00:31:05,160
don't really care about the xml

626
00:31:02,400 --> 00:31:07,740
transformation and that's about it it's

627
00:31:05,160 --> 00:31:11,840
four lines of code and you have code

628
00:31:07,740 --> 00:31:14,640
execution through MSA through ms access

629
00:31:11,840 --> 00:31:20,310
another way to use excel transforms is

630
00:31:14,640 --> 00:31:23,520
using the outlook call object which is

631
00:31:20,310 --> 00:31:26,230
actually able to create arbitrary count

632
00:31:23,520 --> 00:31:29,150
objects again remotely

633
00:31:26,230 --> 00:31:31,760
using the create object function so I

634
00:31:29,150 --> 00:31:34,850
could create an XML object and XSL

635
00:31:31,760 --> 00:31:37,940
object and feed the XML to the XSL again

636
00:31:34,850 --> 00:31:40,250
running the same XSL transform code no

637
00:31:37,940 --> 00:31:42,950
need to write an actual a different

638
00:31:40,250 --> 00:31:45,590
payload because this will use the exact

639
00:31:42,950 --> 00:31:48,710
same functionality and again it's not

640
00:31:45,590 --> 00:31:52,879
really a lot of code to use this right

641
00:31:48,710 --> 00:31:54,520
so let's go back to this slide this was

642
00:31:52,880 --> 00:31:58,610
actually a bit of a lie by omission

643
00:31:54,520 --> 00:32:01,670
because we have our scripting engine

644
00:31:58,610 --> 00:32:06,530
getting a class ID and then we somehow

645
00:32:01,670 --> 00:32:10,160
have our scripting host check it against

646
00:32:06,530 --> 00:32:16,670
the hard-coded list but we don't really

647
00:32:10,160 --> 00:32:20,510
know how how the engine knows when and

648
00:32:16,670 --> 00:32:22,220
what to ask our scripting host and the

649
00:32:20,510 --> 00:32:26,360
answer is there's no one single

650
00:32:22,220 --> 00:32:30,080
implementation so here we have actually

651
00:32:26,360 --> 00:32:32,179
two different implementations of this

652
00:32:30,080 --> 00:32:34,040
functionality I could have shown you

653
00:32:32,180 --> 00:32:36,260
this assembly or decompilation or

654
00:32:34,040 --> 00:32:41,810
whatever but it's actually much more

655
00:32:36,260 --> 00:32:44,750
clear from these call stacks so on the

656
00:32:41,810 --> 00:32:47,929
upper image we have the jscript 9 engine

657
00:32:44,750 --> 00:32:51,980
running under MS HTML which is as I said

658
00:32:47,930 --> 00:32:54,860
the internet store HTML engine and we

659
00:32:51,980 --> 00:32:59,030
see that we have a function called can

660
00:32:54,860 --> 00:33:01,280
object run that is run after create

661
00:32:59,030 --> 00:33:03,770
ActiveX object which is basically the

662
00:33:01,280 --> 00:33:06,350
C++ implementation of new activexobject

663
00:33:03,770 --> 00:33:09,620
in JavaScript at least in the jscript 9

664
00:33:06,350 --> 00:33:12,139
library and you see that it calls some

665
00:33:09,620 --> 00:33:15,500
function called host query custom policy

666
00:33:12,140 --> 00:33:17,540
and then it calls is safe to you and

667
00:33:15,500 --> 00:33:21,020
only eventually is class allowed is

668
00:33:17,540 --> 00:33:24,110
called so the host query custom policy

669
00:33:21,020 --> 00:33:26,870
is actually generic let's say security

670
00:33:24,110 --> 00:33:28,729
or safety function that also handles

671
00:33:26,870 --> 00:33:31,760
stuff like which ActiveX objects are

672
00:33:28,730 --> 00:33:35,570
available to run under Internet Explorer

673
00:33:31,760 --> 00:33:38,750
and that these functions were also once

674
00:33:35,570 --> 00:33:39,689
the target of the VB script god mode

675
00:33:38,750 --> 00:33:42,960
stuff

676
00:33:39,690 --> 00:33:45,539
cetera so here we see that his castle is

677
00:33:42,960 --> 00:33:49,080
not actually called directly we have our

678
00:33:45,539 --> 00:33:51,600
scripting host ms HTML say oh I know

679
00:33:49,080 --> 00:33:53,480
that I myself need to call his class

680
00:33:51,600 --> 00:33:56,158
allowed on this class ID that I got and

681
00:33:53,480 --> 00:33:58,980
this is not exactly the same when you

682
00:33:56,159 --> 00:34:01,590
look at the bottom screen at the bottom

683
00:33:58,980 --> 00:34:04,649
image because here we have J script DLL

684
00:34:01,590 --> 00:34:06,720
and we see that it's running a get

685
00:34:04,649 --> 00:34:10,109
object from prag ID and then it

686
00:34:06,720 --> 00:34:13,609
immediately runs is class allowed this

687
00:34:10,109 --> 00:34:17,250
means that we have our scripting host

688
00:34:13,609 --> 00:34:19,949
simply saying well you know here's my

689
00:34:17,250 --> 00:34:21,810
ears class allowed function I'm giving

690
00:34:19,949 --> 00:34:26,629
you the pointer to this function you

691
00:34:21,810 --> 00:34:29,369
could use it whenever this means we have

692
00:34:26,629 --> 00:34:33,449
two different implementations each one

693
00:34:29,369 --> 00:34:36,210
of them has different deceptions as to

694
00:34:33,449 --> 00:34:42,569
who is responsible for calling is class

695
00:34:36,210 --> 00:34:47,159
allowed so MS HTML things well I'm gonna

696
00:34:42,569 --> 00:34:49,679
call this I I'm responsible for is class

697
00:34:47,159 --> 00:34:51,240
allowed and C script thanks well the

698
00:34:49,679 --> 00:34:52,530
developers of the scripting engine will

699
00:34:51,239 --> 00:34:55,168
know when they want to create their own

700
00:34:52,530 --> 00:34:59,190
call object-- and they will call it

701
00:34:55,168 --> 00:35:02,310
directly so this works both of these

702
00:34:59,190 --> 00:35:06,660
versions work but what happens when he

703
00:35:02,310 --> 00:35:10,290
tried to make to mix them around so the

704
00:35:06,660 --> 00:35:13,618
developers of J step 9 they pretty much

705
00:35:10,290 --> 00:35:16,589
only meant it to be used with MS HTML

706
00:35:13,619 --> 00:35:19,530
dot DL as a host so they had the

707
00:35:16,589 --> 00:35:21,359
assumption of well my host my scripting

708
00:35:19,530 --> 00:35:27,030
host will be responsible for checking if

709
00:35:21,359 --> 00:35:28,589
I'm allowed to create any comma so they

710
00:35:27,030 --> 00:35:32,880
never call his class allowed themselves

711
00:35:28,589 --> 00:35:35,670
and the developers of cscript thought

712
00:35:32,880 --> 00:35:37,920
well there's jscript there's vbscript

713
00:35:35,670 --> 00:35:41,220
both of them try to call our function

714
00:35:37,920 --> 00:35:44,730
directly so what we'll do is simply give

715
00:35:41,220 --> 00:35:47,390
them the pointer and that's it so it's

716
00:35:44,730 --> 00:35:52,070
as I said before it's

717
00:35:47,390 --> 00:35:54,620
it's possible to run and to use any

718
00:35:52,070 --> 00:35:57,500
single scripting engine under every

719
00:35:54,620 --> 00:35:58,850
single ass cribbing host if they're

720
00:35:57,500 --> 00:36:01,760
compliant with active script so we can

721
00:35:58,850 --> 00:36:07,250
actually run jscript 9 under c script

722
00:36:01,760 --> 00:36:09,620
and when we do that we actually have a

723
00:36:07,250 --> 00:36:11,810
scripting engine that relies on the host

724
00:36:09,620 --> 00:36:14,000
to do the security checks and a

725
00:36:11,810 --> 00:36:16,670
scripting host that relies on the engine

726
00:36:14,000 --> 00:36:18,320
to run their security checks so nobody

727
00:36:16,670 --> 00:36:21,920
runs the security checks and you could

728
00:36:18,320 --> 00:36:25,640
create whatever and here you can see

729
00:36:21,920 --> 00:36:28,610
that I'm trying to to run tests GS which

730
00:36:25,640 --> 00:36:31,040
is a simple Kyle Kroener and I have this

731
00:36:28,610 --> 00:36:32,780
error automation server can't create

732
00:36:31,040 --> 00:36:35,270
object which which is what you get when

733
00:36:32,780 --> 00:36:37,300
you get blocked by device guard and on

734
00:36:35,270 --> 00:36:40,759
the bottom command line I'm actually

735
00:36:37,300 --> 00:36:43,250
specifying this /e parameter for which I

736
00:36:40,760 --> 00:36:45,320
just can give you the class ID of a

737
00:36:43,250 --> 00:36:47,450
comma object and say hey use that as

738
00:36:45,320 --> 00:36:49,580
your scripting engine which here is

739
00:36:47,450 --> 00:36:53,240
jscript 9 and the moment i run this

740
00:36:49,580 --> 00:36:56,509
under jscript 9 that's it no checks are

741
00:36:53,240 --> 00:36:59,479
done because each of the components is

742
00:36:56,510 --> 00:37:02,000
relying on the other to perform all of

743
00:36:59,480 --> 00:37:06,830
the security checks so this is all you

744
00:37:02,000 --> 00:37:08,960
need for this exploit and this problem

745
00:37:06,830 --> 00:37:11,740
also exists not only will see scribe

746
00:37:08,960 --> 00:37:14,720
also with ser after diello

747
00:37:11,740 --> 00:37:17,419
so it also gives you just the pointer to

748
00:37:14,720 --> 00:37:19,189
the s-class cloud function but you can

749
00:37:17,420 --> 00:37:20,660
provide it with a class ID you have to

750
00:37:19,190 --> 00:37:25,880
provide it with a friendly name a probe

751
00:37:20,660 --> 00:37:30,350
ID but you could always just register

752
00:37:25,880 --> 00:37:34,400
your own for the engine so for example I

753
00:37:30,350 --> 00:37:37,100
could write this XML triplet and say my

754
00:37:34,400 --> 00:37:42,200
scripting engine is called also J script

755
00:37:37,100 --> 00:37:47,020
and please run this code using also J

756
00:37:42,200 --> 00:37:51,020
script and then what I can do is just

757
00:37:47,020 --> 00:37:53,930
use reg or WMI or whatever too many to

758
00:37:51,020 --> 00:37:56,630
manipulate the current user is registry

759
00:37:53,930 --> 00:38:00,819
hive and say hey could you just add also

760
00:37:56,630 --> 00:38:03,130
J script as frog ID as an ally as

761
00:38:00,819 --> 00:38:05,259
to jscript nine and that's it now you

762
00:38:03,130 --> 00:38:08,500
have a phallus version of the same

763
00:38:05,260 --> 00:38:09,069
exploit but this was actually patched in

764
00:38:08,500 --> 00:38:12,730
November

765
00:38:09,069 --> 00:38:16,380
meaning that well we're safe from that

766
00:38:12,730 --> 00:38:22,869
right well not exactly

767
00:38:16,380 --> 00:38:25,240
so here I have a patched machine on the

768
00:38:22,869 --> 00:38:27,190
top we have the patched version of

769
00:38:25,240 --> 00:38:28,720
jscript nine yellow because the patch

770
00:38:27,190 --> 00:38:31,450
was actually applied to jscript nine

771
00:38:28,720 --> 00:38:33,490
yellow and we see that it has a valid

772
00:38:31,450 --> 00:38:34,899
signature meaning that well of course it

773
00:38:33,490 --> 00:38:37,868
can work under device guard it's a

774
00:38:34,900 --> 00:38:42,400
Microsoft executable and it's signed its

775
00:38:37,869 --> 00:38:45,880
catalogue signed but if you check the

776
00:38:42,400 --> 00:38:49,559
older version before the patch you can

777
00:38:45,880 --> 00:38:53,920
you suddenly see that that's also valid

778
00:38:49,559 --> 00:38:55,930
so I could just use the vulnerable

779
00:38:53,920 --> 00:38:59,289
version I just could you know drink it

780
00:38:55,930 --> 00:39:01,180
from home and use the same vulnerable

781
00:38:59,289 --> 00:39:03,789
version of jscript nine that I've used

782
00:39:01,180 --> 00:39:05,379
to exploit before and it will work all I

783
00:39:03,789 --> 00:39:08,380
need to do is to make pretty much the

784
00:39:05,380 --> 00:39:10,329
same modification to the current users

785
00:39:08,380 --> 00:39:12,670
registry to make it work

786
00:39:10,329 --> 00:39:19,109
and this was actually discovered by

787
00:39:12,670 --> 00:39:21,819
Jimmy Bain or beau hops on Twitter and

788
00:39:19,109 --> 00:39:25,450
this works for J step nine this works

789
00:39:21,819 --> 00:39:29,769
for his own recent bypass that used

790
00:39:25,450 --> 00:39:33,009
msxml free DLL and this is pretty much

791
00:39:29,769 --> 00:39:34,660
borrowing a trick from driving from you

792
00:39:33,009 --> 00:39:36,250
know driver signature enforcement

793
00:39:34,660 --> 00:39:39,670
bypasses in which you bring your own

794
00:39:36,250 --> 00:39:42,730
venerable driver to subsequently load

795
00:39:39,670 --> 00:39:46,269
your own malicious unsigned code into

796
00:39:42,730 --> 00:39:48,460
the kernel and we've called this problem

797
00:39:46,269 --> 00:39:50,828
catalog hygiene because what happened

798
00:39:48,460 --> 00:39:53,319
here is you have a vulnerable file

799
00:39:50,829 --> 00:39:57,759
signed by a catalog this file gets

800
00:39:53,319 --> 00:40:00,430
replaced by a patched file but the

801
00:39:57,759 --> 00:40:02,920
catalog does not get revoked or delete

802
00:40:00,430 --> 00:40:05,288
it from the machine meaning that if you

803
00:40:02,920 --> 00:40:10,420
bring the file again to the machine it's

804
00:40:05,289 --> 00:40:13,060
valid it's allowed etc now Microsoft

805
00:40:10,420 --> 00:40:18,340
have issued

806
00:40:13,060 --> 00:40:23,020
a couple of new recommended block rules

807
00:40:18,340 --> 00:40:25,240
for device guard which as you see simply

808
00:40:23,020 --> 00:40:28,690
mentioned that oh you have to have like

809
00:40:25,240 --> 00:40:31,299
jscript 9 and msxml from this version

810
00:40:28,690 --> 00:40:34,600
and up or they or they will get blocked

811
00:40:31,300 --> 00:40:38,230
but this does not really fix the

812
00:40:34,600 --> 00:40:42,310
underlying problem of catalog hygiene

813
00:40:38,230 --> 00:40:43,840
because this was issued in April and at

814
00:40:42,310 --> 00:40:46,750
least my vulnerability was fixed in

815
00:40:43,840 --> 00:40:52,210
November so you were vulnerable to a

816
00:40:46,750 --> 00:40:53,820
patched exploit for five months so

817
00:40:52,210 --> 00:40:56,050
unless this gets fixed

818
00:40:53,820 --> 00:40:59,320
basically patching a vulnerability is

819
00:40:56,050 --> 00:41:01,270
useless until you find out that oh yeah

820
00:40:59,320 --> 00:41:06,760
I also need to block these versions of

821
00:41:01,270 --> 00:41:10,110
the file also this is not only

822
00:41:06,760 --> 00:41:14,770
applicable to like device guard bypasses

823
00:41:10,110 --> 00:41:17,350
because you could always turn like just

824
00:41:14,770 --> 00:41:20,470
a regular RC into a device guard bypass

825
00:41:17,350 --> 00:41:22,630
I'm so sorry for the font I basically

826
00:41:20,470 --> 00:41:26,319
like threw it on a laptop with paint at

827
00:41:22,630 --> 00:41:29,980
night but as you can see these are a

828
00:41:26,320 --> 00:41:31,750
couple of I think project zero bugs that

829
00:41:29,980 --> 00:41:37,540
were found in jscript and vbscript

830
00:41:31,750 --> 00:41:39,760
and both of these actually still exist

831
00:41:37,540 --> 00:41:42,790
on the machine the catalogs don't get

832
00:41:39,760 --> 00:41:45,040
deleted so if I have an exploit for

833
00:41:42,790 --> 00:41:48,700
these fixed vulnerabilities on a patched

834
00:41:45,040 --> 00:41:52,810
machine I could always find them and

835
00:41:48,700 --> 00:41:55,480
apparently pretty much all of your older

836
00:41:52,810 --> 00:41:57,730
system files are still present and when

837
00:41:55,480 --> 00:42:00,910
a success folder so I just find my

838
00:41:57,730 --> 00:42:03,790
vulnerable jscript DLL or my

839
00:42:00,910 --> 00:42:05,259
vulnerability script DLL and and say

840
00:42:03,790 --> 00:42:07,750
well I'm gonna use the vulnerable one

841
00:42:05,260 --> 00:42:09,460
and use an old fixed exploit on a fully

842
00:42:07,750 --> 00:42:10,840
patched machine now of course that

843
00:42:09,460 --> 00:42:13,030
doesn't really help you if you want to

844
00:42:10,840 --> 00:42:15,910
do remote code execution or stuff like

845
00:42:13,030 --> 00:42:17,290
that because this won't be deployed but

846
00:42:15,910 --> 00:42:20,350
we're already in a post exploitation

847
00:42:17,290 --> 00:42:22,840
scenario so we can choose which of the

848
00:42:20,350 --> 00:42:26,290
allowed code we're going to use so let's

849
00:42:22,840 --> 00:42:30,010
use the vulnerable code now

850
00:42:26,290 --> 00:42:32,410
what's the scope of this problem well I

851
00:42:30,010 --> 00:42:35,440
first thought that catalog hygiene was

852
00:42:32,410 --> 00:42:39,399
something that sometimes mistakes happen

853
00:42:35,440 --> 00:42:41,829
and you know updates don't have good

854
00:42:39,400 --> 00:42:43,780
catalog hygiene but I think that catalog

855
00:42:41,829 --> 00:42:46,750
hygiene as a concept does not really

856
00:42:43,780 --> 00:42:48,940
exist so this means that every time that

857
00:42:46,750 --> 00:42:51,400
you patch a vulnerability at least

858
00:42:48,940 --> 00:42:55,480
between like major Windows 10 RS

859
00:42:51,400 --> 00:42:58,950
releases you still have the catalog and

860
00:42:55,480 --> 00:43:00,730
actually the the old vulnerable file

861
00:42:58,950 --> 00:43:05,399
still on your machine

862
00:43:00,730 --> 00:43:08,230
so this problem is not only relevant to

863
00:43:05,400 --> 00:43:10,930
jscript 9 and my vulnerability and those

864
00:43:08,230 --> 00:43:14,230
two that I showed in the slide but

865
00:43:10,930 --> 00:43:19,240
rather well let's say I have my Windows

866
00:43:14,230 --> 00:43:23,500
Windows 10 80 of 1803 machine which was

867
00:43:19,240 --> 00:43:25,419
updated to this in April 2018 this means

868
00:43:23,500 --> 00:43:28,900
that every single code execution

869
00:43:25,420 --> 00:43:31,810
vulnerability that's somehow reachable

870
00:43:28,900 --> 00:43:34,060
by command line DLL hijacking calm

871
00:43:31,810 --> 00:43:36,220
hijacking or whatever from a post

872
00:43:34,060 --> 00:43:38,529
exploitation scenario it is actually

873
00:43:36,220 --> 00:43:41,379
still a vulnerability in terms of device

874
00:43:38,530 --> 00:43:44,140
guard in this machine so we we don't

875
00:43:41,380 --> 00:43:47,079
only have like jscript and whatever we

876
00:43:44,140 --> 00:43:49,118
have vbscript new versions of NS XML and

877
00:43:47,079 --> 00:43:51,369
every single vulnerability that gets

878
00:43:49,119 --> 00:43:54,670
patched if you have the exploit for it

879
00:43:51,369 --> 00:43:58,780
and it is not immediately added to the

880
00:43:54,670 --> 00:44:01,119
recommended block list and well nothing

881
00:43:58,780 --> 00:44:03,880
gets immediately added there apparently

882
00:44:01,119 --> 00:44:06,910
you basically have more and more and

883
00:44:03,880 --> 00:44:12,190
more and more vulnerabilities so it's

884
00:44:06,910 --> 00:44:14,200
not just those three so I believe this

885
00:44:12,190 --> 00:44:15,970
is a pretty big problem with device

886
00:44:14,200 --> 00:44:18,759
guard because suddenly we don't have

887
00:44:15,970 --> 00:44:21,520
like these two or three bypasses but we

888
00:44:18,760 --> 00:44:26,200
have every single vulnerability until

889
00:44:21,520 --> 00:44:30,700
you update to the next RS which is in my

890
00:44:26,200 --> 00:44:33,279
opinion a bit problematic alright so

891
00:44:30,700 --> 00:44:36,578
that's it for actual new device guard

892
00:44:33,280 --> 00:44:39,370
bypasses but what if we're one of I

893
00:44:36,579 --> 00:44:41,830
think most

894
00:44:39,370 --> 00:44:45,490
people who never use device guard will

895
00:44:41,830 --> 00:44:47,710
never have to work against it well but

896
00:44:45,490 --> 00:44:51,910
if the techniques I have shown actually

897
00:44:47,710 --> 00:44:55,180
have a couple of other benefits so first

898
00:44:51,910 --> 00:44:57,730
of all these are these were a couple of

899
00:44:55,180 --> 00:45:00,430
new stealthy execution techniques so you

900
00:44:57,730 --> 00:45:02,200
can always use things like office for

901
00:45:00,430 --> 00:45:05,740
post exploitation which I'm not really

902
00:45:02,200 --> 00:45:08,319
seeing a lot in the wild and I think

903
00:45:05,740 --> 00:45:11,740
this is a pretty cool idea and you also

904
00:45:08,320 --> 00:45:13,720
have stuff like MZ bypasses jscript 9

905
00:45:11,740 --> 00:45:16,359
for example is simply not instrumented

906
00:45:13,720 --> 00:45:19,509
with AM Z so MZ is blind to everything

907
00:45:16,360 --> 00:45:25,720
you run under jscript 9 so if you for

908
00:45:19,510 --> 00:45:27,850
example use the same exploit command

909
00:45:25,720 --> 00:45:31,060
lines i've used for the jscript 9

910
00:45:27,850 --> 00:45:33,220
exploit this won't work as an exploit

911
00:45:31,060 --> 00:45:36,100
you know unless you use the vulnerable

912
00:45:33,220 --> 00:45:38,740
version but it's still a free MZ bypass

913
00:45:36,100 --> 00:45:39,850
you don't need to change anything you

914
00:45:38,740 --> 00:45:42,939
don't need to change anything in the

915
00:45:39,850 --> 00:45:44,799
registry or load any libraries or

916
00:45:42,940 --> 00:45:50,910
whatever there's simply no Amma's either

917
00:45:44,800 --> 00:45:53,650
and there's actually another JavaScript

918
00:45:50,910 --> 00:45:55,450
implementation in Windows which exists

919
00:45:53,650 --> 00:45:59,800
natively and is compliant with active

920
00:45:55,450 --> 00:46:04,390
script called chakra DLL and it also has

921
00:45:59,800 --> 00:46:08,350
no MZ but it also has no active X

922
00:46:04,390 --> 00:46:10,120
functionality meaning that well if I can

923
00:46:08,350 --> 00:46:13,960
create calm objects then everything's

924
00:46:10,120 --> 00:46:16,750
fine but actually if you run it under C

925
00:46:13,960 --> 00:46:19,720
script or W script those executables

926
00:46:16,750 --> 00:46:21,910
will provide you a method called W

927
00:46:19,720 --> 00:46:25,359
script create object which will still

928
00:46:21,910 --> 00:46:27,460
allow you to create any come up that you

929
00:46:25,360 --> 00:46:29,950
want now this will not work as a device

930
00:46:27,460 --> 00:46:32,320
guard bypass because W script create

931
00:46:29,950 --> 00:46:35,470
object is instrumented by device guard

932
00:46:32,320 --> 00:46:40,300
but it still gives you another nice MZ

933
00:46:35,470 --> 00:46:41,740
bypass so furthermore yeah you could

934
00:46:40,300 --> 00:46:45,160
just stick a bunch of techniques

935
00:46:41,740 --> 00:46:49,209
together so for example I could have an

936
00:46:45,160 --> 00:46:56,379
Orchestrator running jscript 9 or chakra

937
00:46:49,210 --> 00:47:00,430
- just offload any more malicious or

938
00:46:56,380 --> 00:47:03,970
suspicious activity to let's say an

939
00:47:00,430 --> 00:47:07,710
Excel object using cell for macros and

940
00:47:03,970 --> 00:47:11,109
then I have basically JavaScript that is

941
00:47:07,710 --> 00:47:14,319
not showing anything on I on am Z and is

942
00:47:11,109 --> 00:47:17,230
not communicating with anything and have

943
00:47:14,319 --> 00:47:19,359
another instance of Excel that does not

944
00:47:17,230 --> 00:47:22,749
load the file does not run any VBA

945
00:47:19,359 --> 00:47:29,890
macros so both of these things on their

946
00:47:22,749 --> 00:47:31,839
own seem really benign and it will be a

947
00:47:29,890 --> 00:47:33,279
bit harder to detect and one process

948
00:47:31,839 --> 00:47:36,819
doing all of the malicious things that

949
00:47:33,279 --> 00:47:39,849
you wanted and now for a quick

950
00:47:36,819 --> 00:47:41,680
conclusion so first of all you have the

951
00:47:39,849 --> 00:47:44,589
tools for detecting these things most of

952
00:47:41,680 --> 00:47:47,169
what I've shown is using various command

953
00:47:44,589 --> 00:47:50,519
line stuff so if you have command line

954
00:47:47,170 --> 00:47:53,079
logging and you look at these logs

955
00:47:50,519 --> 00:47:55,538
regularly you will be able to find these

956
00:47:53,079 --> 00:47:57,900
techniques whether they're used as my

957
00:47:55,539 --> 00:48:01,329
past as device guard bypasses or just

958
00:47:57,900 --> 00:48:03,190
stealthy execution techniques and if you

959
00:48:01,329 --> 00:48:05,799
look at registry and maybe a tiny bit at

960
00:48:03,190 --> 00:48:08,799
WMI you will be able to see everything

961
00:48:05,799 --> 00:48:14,799
that was shown here it's nice it's not

962
00:48:08,799 --> 00:48:16,480
especially hard and the way I think that

963
00:48:14,799 --> 00:48:19,599
the feature should develop is first of

964
00:48:16,480 --> 00:48:21,759
all they should really lock down the

965
00:48:19,599 --> 00:48:24,430
office because that's pretty ubiquitous

966
00:48:21,759 --> 00:48:27,700
and as you've seen it it basically

967
00:48:24,430 --> 00:48:29,769
breaks the Vice card so this makes it

968
00:48:27,700 --> 00:48:34,629
more of a server feature and if you want

969
00:48:29,769 --> 00:48:36,419
to have a good device guard like if you

970
00:48:34,630 --> 00:48:38,589
want to have practical device guard

971
00:48:36,420 --> 00:48:40,509
workstations that you should probably

972
00:48:38,589 --> 00:48:42,190
still implement this in office and it's

973
00:48:40,509 --> 00:48:44,910
you know it's Microsoft at the same

974
00:48:42,190 --> 00:48:48,039
company they should be able to do that

975
00:48:44,910 --> 00:48:51,129
also a generic solution for the catalog

976
00:48:48,039 --> 00:48:53,739
hygiene issue should be really important

977
00:48:51,130 --> 00:48:57,069
because as long as you don't have that

978
00:48:53,739 --> 00:48:59,829
you have to today you have to wait a

979
00:48:57,069 --> 00:49:01,599
couple of months after the patch gets

980
00:48:59,829 --> 00:49:04,140
released to be actually safe from a

981
00:49:01,599 --> 00:49:04,140
vulnerability

982
00:49:04,860 --> 00:49:11,200
which is pretty ridiculous and also I

983
00:49:09,700 --> 00:49:13,299
think that a single consistent

984
00:49:11,200 --> 00:49:16,180
implementation for the active script

985
00:49:13,300 --> 00:49:18,460
device card should be also a goal

986
00:49:16,180 --> 00:49:23,009
because I'm not sure I'm I found the

987
00:49:18,460 --> 00:49:27,060
only bug stemming from these ink these

988
00:49:23,010 --> 00:49:29,170
basically inconsistent implementations

989
00:49:27,060 --> 00:49:32,759
also it would be pretty nice to just

990
00:49:29,170 --> 00:49:35,590
extend or give some kind of API to

991
00:49:32,760 --> 00:49:37,570
extend the white lacing models to to

992
00:49:35,590 --> 00:49:41,200
other applications because well let's

993
00:49:37,570 --> 00:49:44,950
say have Java this could also be used to

994
00:49:41,200 --> 00:49:47,770
break the Vice card because it does not

995
00:49:44,950 --> 00:49:52,629
look at Java files etc etc same thing

996
00:49:47,770 --> 00:49:56,440
with Python and well I think last thing

997
00:49:52,630 --> 00:49:59,550
I want to say is I'm hardly the first

998
00:49:56,440 --> 00:50:02,950
person to look at the Vice garden at

999
00:49:59,550 --> 00:50:04,810
bypasses and if you're interested in

1000
00:50:02,950 --> 00:50:06,700
application whitelisting or just

1001
00:50:04,810 --> 00:50:09,759
interesting windows research you should

1002
00:50:06,700 --> 00:50:13,870
probably follow these guys on twitter or

1003
00:50:09,760 --> 00:50:16,440
just look at their blogs and that's it

1004
00:50:13,870 --> 00:50:17,580
for my talk hope you enjoyed

1005
00:50:16,440 --> 00:50:20,690
amazing

1006
00:50:17,580 --> 00:50:20,690
[Music]

1007
00:50:22,240 --> 00:50:28,339
thank you so much for your talk do have

1008
00:50:25,550 --> 00:50:30,760
any questions in the room please raise

1009
00:50:28,340 --> 00:50:30,760
your hand

1010
00:50:31,119 --> 00:50:37,280
no questions okay let's give another

1011
00:50:35,090 --> 00:50:38,110
round of applause thank you so much for

1012
00:50:37,280 --> 00:50:41,929
your presentation

1013
00:50:38,110 --> 00:50:41,929
[Applause]

1014
00:50:48,339 --> 00:50:50,400
you

