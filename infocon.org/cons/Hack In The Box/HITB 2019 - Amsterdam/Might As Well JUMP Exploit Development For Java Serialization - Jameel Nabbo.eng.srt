1
00:00:19,100 --> 00:00:26,390
hey my name is Jimmy Nepal and I was

2
00:00:23,119 --> 00:00:30,380
recently like doing X apply development

3
00:00:26,390 --> 00:00:32,058
walking with the government fantastic

4
00:00:30,380 --> 00:00:35,989
military devices and so on

5
00:00:32,058 --> 00:00:38,110
so I was focusing on like static code

6
00:00:35,989 --> 00:00:41,360
analysis and finding vulnerabilities

7
00:00:38,110 --> 00:00:44,900
within these devices mainly debugging

8
00:00:41,360 --> 00:00:49,460
and stuff and this talk I'm gonna

9
00:00:44,900 --> 00:00:52,430
present two two techniques

10
00:00:49,460 --> 00:00:56,360
the first one is about like reverse

11
00:00:52,430 --> 00:00:58,640
engineering with the one confu liner for

12
00:00:56,360 --> 00:01:00,890
a vulnerability scanner which is I took

13
00:00:58,640 --> 00:01:03,020
it like as an example not targeting

14
00:01:00,890 --> 00:01:05,570
these companies or something but I took

15
00:01:03,020 --> 00:01:09,530
it as an example to show how easy it is

16
00:01:05,570 --> 00:01:12,050
to to just jump over and change the

17
00:01:09,530 --> 00:01:14,740
application logic and execution flow and

18
00:01:12,050 --> 00:01:17,420
this can be applied to anti viruses

19
00:01:14,740 --> 00:01:19,940
ideas systems and whatever same

20
00:01:17,420 --> 00:01:22,399
technique it's pretty simple the second

21
00:01:19,940 --> 00:01:25,520
one is about like Java some sort of

22
00:01:22,399 --> 00:01:27,740
zero-day in within within java it has

23
00:01:25,520 --> 00:01:32,119
two options the first one is pretty much

24
00:01:27,740 --> 00:01:34,369
easy to to explain the second one how we

25
00:01:32,119 --> 00:01:36,380
need to dive into the cryptography in

26
00:01:34,369 --> 00:01:39,079
order to inject our payload so I'm gonna

27
00:01:36,380 --> 00:01:41,380
begin it's all hands on so hopefully it

28
00:01:39,079 --> 00:01:41,380
works

29
00:01:42,110 --> 00:01:49,820
so about activating a program or

30
00:01:47,990 --> 00:01:52,548
software so the application of course

31
00:01:49,820 --> 00:01:54,529
like should run and then after running

32
00:01:52,549 --> 00:01:56,720
or whatever the complexity of running

33
00:01:54,530 --> 00:02:00,350
this application can it depends on an

34
00:01:56,720 --> 00:02:04,490
activation key for mobile phone dialogic

35
00:02:00,350 --> 00:02:07,669
dependency or like US v or whatever so

36
00:02:04,490 --> 00:02:09,949
the logic here is there's F then F then

37
00:02:07,670 --> 00:02:12,980
but it's some places and what makes it

38
00:02:09,949 --> 00:02:15,018
like complex it's when to detect and how

39
00:02:12,980 --> 00:02:17,660
to detect these spots in order to

40
00:02:15,019 --> 00:02:20,000
activate something you know and then

41
00:02:17,660 --> 00:02:23,810
after that like modern application makes

42
00:02:20,000 --> 00:02:27,380
API call or like with the web services

43
00:02:23,810 --> 00:02:29,239
and then F it's get validated so the

44
00:02:27,380 --> 00:02:32,150
application activated if not so in same

45
00:02:29,239 --> 00:02:35,599
circle so

46
00:02:32,150 --> 00:02:40,069
and the irregular reverse engineering

47
00:02:35,599 --> 00:02:43,399
techniques there's this kind you know of

48
00:02:40,069 --> 00:02:46,579
checklist like flying around with the

49
00:02:43,400 --> 00:02:48,110
timing isolating the the the environment

50
00:02:46,580 --> 00:02:49,879
with the sandbox or something so

51
00:02:48,110 --> 00:02:52,940
isolating the application from detecting

52
00:02:49,879 --> 00:02:57,429
the remote server time or playing around

53
00:02:52,940 --> 00:03:00,349
with burb or playing around with fiddler

54
00:02:57,430 --> 00:03:03,799
intercepting the request and and so on

55
00:03:00,349 --> 00:03:10,429
so this is the the irregular tracking

56
00:03:03,799 --> 00:03:13,840
stuff we're gonna do the the jump it's

57
00:03:10,430 --> 00:03:16,430
pretty simple doesn't require that much

58
00:03:13,840 --> 00:03:18,890
into diving into the application or

59
00:03:16,430 --> 00:03:20,720
understanding where is the IIE IP and

60
00:03:18,890 --> 00:03:23,420
how it's overwritten and then how we can

61
00:03:20,720 --> 00:03:26,900
jump over or or like buffer overflow

62
00:03:23,420 --> 00:03:28,790
techniques deeps and ACH it's much more

63
00:03:26,900 --> 00:03:32,989
simple than that

64
00:03:28,790 --> 00:03:34,790
basically it's we're gonna not even fuss

65
00:03:32,989 --> 00:03:37,549
the application we're gonna just run the

66
00:03:34,790 --> 00:03:40,578
application understand how the workflow

67
00:03:37,549 --> 00:03:42,889
is is is going on and then from then

68
00:03:40,579 --> 00:03:45,470
like we're gonna see the ASCII where is

69
00:03:42,889 --> 00:03:47,480
the activation happening and from that

70
00:03:45,470 --> 00:03:49,310
spot we got a jump over to change the

71
00:03:47,480 --> 00:03:51,918
application logic and get it activated

72
00:03:49,310 --> 00:03:54,560
and the regular applications and even

73
00:03:51,919 --> 00:03:56,599
the motor want what they do actually

74
00:03:54,560 --> 00:03:59,030
when you activate something it writes

75
00:03:56,599 --> 00:04:02,060
some values let's talk about Windows if

76
00:03:59,030 --> 00:04:04,940
I some values to the e to the let's say

77
00:04:02,060 --> 00:04:07,400
the files temporary files on Tim

78
00:04:04,940 --> 00:04:09,530
directory or in the registry or so on

79
00:04:07,400 --> 00:04:11,209
and then it checks them every time you

80
00:04:09,530 --> 00:04:18,048
open up that application if these values

81
00:04:11,209 --> 00:04:21,738
are set so everything is cool so

82
00:04:18,048 --> 00:04:24,799
basically if if the activation fill is

83
00:04:21,738 --> 00:04:27,888
in memory address like as an example so

84
00:04:24,800 --> 00:04:29,840
we we we put a breakpoint before it and

85
00:04:27,889 --> 00:04:32,360
then we jump to the activation part and

86
00:04:29,840 --> 00:04:34,900
that's it so but we're gonna see it in

87
00:04:32,360 --> 00:04:34,900
action right

88
00:04:41,020 --> 00:04:47,810
so I choose a popular real-world

89
00:04:45,830 --> 00:04:50,150
application and like you know when a

90
00:04:47,810 --> 00:04:53,090
police scanner that was researching as

91
00:04:50,150 --> 00:04:56,690
well for really big you know anti

92
00:04:53,090 --> 00:04:59,299
viruses and accepts wha all of them

93
00:04:56,690 --> 00:05:02,599
walks in the same technique so it's uh

94
00:04:59,300 --> 00:05:04,909
it's a brand-new installation so just

95
00:05:02,599 --> 00:05:14,710
doing it for research purposes not like

96
00:05:04,909 --> 00:05:17,599
for anything else all right cool

97
00:05:14,710 --> 00:05:21,770
so this is the product it's I think it's

98
00:05:17,599 --> 00:05:24,620
a trial we need to activate quick

99
00:05:21,770 --> 00:05:26,299
research there's you know activation

100
00:05:24,620 --> 00:05:28,610
part and other application it may be

101
00:05:26,300 --> 00:05:32,870
embedded within the the application file

102
00:05:28,610 --> 00:05:34,580
or whatever you know I'm gonna use like

103
00:05:32,870 --> 00:05:37,009
pure although a debugger

104
00:05:34,580 --> 00:05:41,840
without any dependencies or morning

105
00:05:37,009 --> 00:05:46,639
stuff and just one on the the

106
00:05:41,840 --> 00:05:50,000
application clearing some values okay so

107
00:05:46,639 --> 00:05:52,009
we got the application the activation

108
00:05:50,000 --> 00:05:58,550
part is running so I'm gonna just attach

109
00:05:52,009 --> 00:06:03,319
the process let's find it

110
00:05:58,550 --> 00:06:08,259
okay it's yeah loading the library now

111
00:06:03,319 --> 00:06:08,259
it's phrased in the in the memory

112
00:06:08,860 --> 00:06:14,569
regular cracking how it goes is actually

113
00:06:13,129 --> 00:06:16,520
like fuzzing the application

114
00:06:14,569 --> 00:06:18,830
understanding where is the instructions

115
00:06:16,520 --> 00:06:22,099
where is the ASCII stuff and how the

116
00:06:18,830 --> 00:06:24,050
modules are loaded and going into idea

117
00:06:22,099 --> 00:06:26,930
Pro and discovering the function and

118
00:06:24,050 --> 00:06:30,139
stuff this like it's powerful but it's a

119
00:06:26,930 --> 00:06:32,990
time consuming process there's another

120
00:06:30,139 --> 00:06:34,430
easy process to do to do that so simply

121
00:06:32,990 --> 00:06:36,919
I'm gonna just like jump into the

122
00:06:34,430 --> 00:06:40,069
modules there's a bunch of modules you

123
00:06:36,919 --> 00:06:44,270
can add like say classes

124
00:06:40,069 --> 00:06:47,870
it's a C++ application so the one here

125
00:06:44,270 --> 00:06:50,750
is the activation Mario just jumped over

126
00:06:47,870 --> 00:06:53,390
and then to prevent just like reading

127
00:06:50,750 --> 00:06:58,060
the line-by-line the assembly

128
00:06:53,390 --> 00:06:58,060
instruction I'm just gonna go search for

129
00:06:58,750 --> 00:07:06,980
a reference text ring which is gonna

130
00:07:02,330 --> 00:07:09,560
bring me to a new window with the ASCII

131
00:07:06,980 --> 00:07:12,740
stuff at least little readable searching

132
00:07:09,560 --> 00:07:16,010
about activation part in the entire

133
00:07:12,740 --> 00:07:18,620
scope clicking go okay so I'm gonna just

134
00:07:16,010 --> 00:07:20,090
like control I'll search for next search

135
00:07:18,620 --> 00:07:31,190
for next until I find something

136
00:07:20,090 --> 00:07:35,229
interesting okay well let's just check

137
00:07:31,190 --> 00:07:35,230
this out you don't know if it's visible

138
00:07:35,710 --> 00:07:42,950
activation result activation failed

139
00:07:40,270 --> 00:07:46,039
activation result activation was

140
00:07:42,950 --> 00:07:48,680
successful all right let's just dive

141
00:07:46,040 --> 00:07:55,190
into it by double-clicking it too to see

142
00:07:48,680 --> 00:07:57,410
what it does basically push some stuff

143
00:07:55,190 --> 00:08:00,050
into the stack if the if the key for

144
00:07:57,410 --> 00:08:01,669
example not found a II and I need to be

145
00:08:00,050 --> 00:08:03,500
connected to the internet so I can't

146
00:08:01,669 --> 00:08:05,150
really understand without diving into

147
00:08:03,500 --> 00:08:07,640
the executable or the binding file that

148
00:08:05,150 --> 00:08:11,929
it makes an API call if something went

149
00:08:07,640 --> 00:08:14,659
okay then continue if not so jump over

150
00:08:11,930 --> 00:08:17,870
here and then it's not activated we are

151
00:08:14,660 --> 00:08:19,520
talking about a security soft so we're

152
00:08:17,870 --> 00:08:23,240
not talking about like crackme dot exe

153
00:08:19,520 --> 00:08:27,130
or something what I'm gonna do is I'm

154
00:08:23,240 --> 00:08:29,360
gonna put like a break point over here

155
00:08:27,130 --> 00:08:35,169
toggle a break point all right

156
00:08:29,360 --> 00:08:41,300
I'm gonna make a play around just scroll

157
00:08:35,169 --> 00:08:45,889
along the way to get the address of the

158
00:08:41,299 --> 00:08:48,290
activation jumping go

159
00:08:45,889 --> 00:08:52,100
over just right here I'm gonna like

160
00:08:48,290 --> 00:08:56,358
assemble this is a place where I say G

161
00:08:52,100 --> 00:08:58,720
which is jump paste the address leave

162
00:08:56,359 --> 00:08:58,720
the rest

163
00:09:05,470 --> 00:09:11,629
okay cool a symbol that's it

164
00:09:09,249 --> 00:09:13,549
so it's pretty simple technique like

165
00:09:11,629 --> 00:09:17,209
when it comes over he's gonna see this

166
00:09:13,549 --> 00:09:33,108
address and good job one we need to run

167
00:09:17,209 --> 00:09:39,469
the application so it's in when I click

168
00:09:33,109 --> 00:09:43,040
Next right now if we check the EIP we

169
00:09:39,470 --> 00:09:48,639
came into our spot so what I'm gonna do

170
00:09:43,040 --> 00:09:52,699
is like just step over we came over here

171
00:09:48,639 --> 00:09:55,730
and our like you know the the point that

172
00:09:52,699 --> 00:09:59,709
the address that we changed so have

173
00:09:55,730 --> 00:10:02,329
everything goes well I should jump into

174
00:09:59,709 --> 00:10:04,549
the address that is specified which is

175
00:10:02,329 --> 00:10:12,199
the activation successful heading and

176
00:10:04,549 --> 00:10:14,809
continue button that's it activation was

177
00:10:12,199 --> 00:10:16,849
successful it's pretty simple technique

178
00:10:14,809 --> 00:10:21,549
whatever the complexity of any

179
00:10:16,850 --> 00:10:35,570
application so it's on the same logic

180
00:10:21,549 --> 00:10:38,300
for hours and you can use prevent

181
00:10:35,570 --> 00:10:43,100
the John technique over-application

182
00:10:38,300 --> 00:10:47,209
takes a really a lot of work even if the

183
00:10:43,100 --> 00:10:50,300
application you know doing a security

184
00:10:47,210 --> 00:10:52,700
job so when we talk about a company that

185
00:10:50,300 --> 00:10:55,130
does a security job so these guys really

186
00:10:52,700 --> 00:10:57,740
understand how secure coding made up and

187
00:10:55,130 --> 00:11:00,110
how to write a secure code but doing

188
00:10:57,740 --> 00:11:03,890
break like making your application not

189
00:11:00,110 --> 00:11:09,230
reversible it's it's really hard but

190
00:11:03,890 --> 00:11:11,840
there's you know some this is for fun

191
00:11:09,230 --> 00:11:14,630
like I always see it on on Langdon

192
00:11:11,840 --> 00:11:19,550
promoting me if if the website is secure

193
00:11:14,630 --> 00:11:21,710
or not if you want to prevent it so

194
00:11:19,550 --> 00:11:24,079
basically separate the logic of the

195
00:11:21,710 --> 00:11:25,790
chicks and every time that you you go to

196
00:11:24,080 --> 00:11:28,550
make a process to validate something

197
00:11:25,790 --> 00:11:31,310
just separate the logic don't put it in

198
00:11:28,550 --> 00:11:33,439
let's say one DLL or one function and

199
00:11:31,310 --> 00:11:35,359
calling this function and even talking

200
00:11:33,440 --> 00:11:37,580
and into programming if you have a class

201
00:11:35,360 --> 00:11:39,200
form static like a static class and you

202
00:11:37,580 --> 00:11:41,120
have a helper let's say and add the

203
00:11:39,200 --> 00:11:42,800
function that does the check or a void

204
00:11:41,120 --> 00:11:45,650
that does the check procedure method

205
00:11:42,800 --> 00:11:47,479
call or whatever and you call it you

206
00:11:45,650 --> 00:11:50,150
call this function in multiple places

207
00:11:47,480 --> 00:11:52,910
this is this is make makes it like for

208
00:11:50,150 --> 00:11:56,720
the attackers or a crackers pretty easy

209
00:11:52,910 --> 00:12:02,469
to to to bypass you know so this is the

210
00:11:56,720 --> 00:12:06,350
the the first part the second one is

211
00:12:02,470 --> 00:12:09,020
about exploiting the viewstate

212
00:12:06,350 --> 00:12:11,060
serialization the it's really common

213
00:12:09,020 --> 00:12:13,040
like the Java serialization part when

214
00:12:11,060 --> 00:12:15,439
you have let's say a Jason that is

215
00:12:13,040 --> 00:12:17,630
loading from a different area and then

216
00:12:15,440 --> 00:12:19,010
you this you realize this into object

217
00:12:17,630 --> 00:12:21,050
and then you do whatever you want with

218
00:12:19,010 --> 00:12:23,450
these object but this go is not about

219
00:12:21,050 --> 00:12:27,410
like serialization we are talking about

220
00:12:23,450 --> 00:12:30,880
the environment itself you know the the

221
00:12:27,410 --> 00:12:35,079
Java GSF itself so I got an application

222
00:12:30,880 --> 00:12:37,580
with the best security practices enabled

223
00:12:35,080 --> 00:12:42,230
everything encryption and from the

224
00:12:37,580 --> 00:12:46,150
server side and all of this is enabled

225
00:12:42,230 --> 00:12:49,160
so the the best practice is enabled

226
00:12:46,150 --> 00:12:51,699
before that let's talk about how do you

227
00:12:49,160 --> 00:12:54,860
a flock and you know in short

228
00:12:51,699 --> 00:12:56,870
description about how it works if you

229
00:12:54,860 --> 00:13:00,620
are using for example Apache my phases

230
00:12:56,870 --> 00:13:03,920
or or other you know GS F what does the

231
00:13:00,620 --> 00:13:05,990
implementation for GS F they basically

232
00:13:03,920 --> 00:13:08,269
have a view state and this if you state

233
00:13:05,990 --> 00:13:10,040
sometimes like it's encrypted or depends

234
00:13:08,269 --> 00:13:12,709
on the configuration if it's encrypted

235
00:13:10,040 --> 00:13:15,069
or not if it's not encrypted so yeah we

236
00:13:12,709 --> 00:13:18,859
have a problem if we if it's encrypted

237
00:13:15,069 --> 00:13:21,709
we need to take the secret key this was

238
00:13:18,860 --> 00:13:23,990
a really cool a challenge that I that

239
00:13:21,709 --> 00:13:25,579
crazy company that I applied for they

240
00:13:23,990 --> 00:13:28,129
gave it to me and then I found all right

241
00:13:25,579 --> 00:13:30,319
I need to find a zero-day or something

242
00:13:28,129 --> 00:13:31,399
and and when you really search about

243
00:13:30,319 --> 00:13:35,180
these things you're going to find

244
00:13:31,399 --> 00:13:37,759
similar but not the exact exploit where

245
00:13:35,180 --> 00:13:40,069
there's no Xplode published for how to

246
00:13:37,759 --> 00:13:42,290
you know you're gonna find articles

247
00:13:40,069 --> 00:13:44,750
there's something exist but you won't

248
00:13:42,290 --> 00:13:47,089
find how to exploit it or something so

249
00:13:44,750 --> 00:13:49,730
it took me a bit like of research to

250
00:13:47,089 --> 00:13:54,259
understand the the encryption part and

251
00:13:49,730 --> 00:13:56,930
how to to generate it how the

252
00:13:54,259 --> 00:13:58,880
exploitation works actually we're gonna

253
00:13:56,930 --> 00:14:00,920
dive with we're gonna take it into the

254
00:13:58,880 --> 00:14:03,199
hard way which is we're gonna have like

255
00:14:00,920 --> 00:14:06,019
a view state that is really encrypted

256
00:14:03,199 --> 00:14:07,819
and we have a secret key and everything

257
00:14:06,019 --> 00:14:09,920
but we assume we have the secret key

258
00:14:07,819 --> 00:14:14,060
what we're gonna inject our customized

259
00:14:09,920 --> 00:14:16,279
payload into the the the shellcode

260
00:14:14,060 --> 00:14:18,050
so we have to make a shellcode and then

261
00:14:16,279 --> 00:14:20,180
inject our payload within the shellcode

262
00:14:18,050 --> 00:14:22,250
because here you have two stages of the

263
00:14:20,180 --> 00:14:25,519
shellcode the first sealcoat which is

264
00:14:22,250 --> 00:14:26,959
gonna invoke a gadget and the

265
00:14:25,519 --> 00:14:29,060
environment itself and the second

266
00:14:26,959 --> 00:14:30,619
shellcode is your execution command and

267
00:14:29,060 --> 00:14:33,649
in order like for example together a

268
00:14:30,620 --> 00:14:35,449
reversal on something but the the

269
00:14:33,649 --> 00:14:37,579
problem is with injecting a shellcode

270
00:14:35,449 --> 00:14:40,219
once we say a view state is really

271
00:14:37,579 --> 00:14:42,199
encrypted so you have to to make a play

272
00:14:40,220 --> 00:14:45,559
around on the server that you have

273
00:14:42,199 --> 00:14:47,209
generated this view state and yeah this

274
00:14:45,559 --> 00:14:49,040
is this is the one that you generated

275
00:14:47,209 --> 00:14:52,910
and then I I will you know I will

276
00:14:49,040 --> 00:14:56,149
execute my command on the on the server

277
00:14:52,910 --> 00:14:59,300
side so basically we just need to find

278
00:14:56,149 --> 00:15:02,280
the the the view state and then yeah the

279
00:14:59,300 --> 00:15:06,930
the secret key and generate that payload

280
00:15:02,280 --> 00:15:08,640
if you search about my faces have used

281
00:15:06,930 --> 00:15:10,469
it you're gonna end up with this article

282
00:15:08,640 --> 00:15:14,130
and none of them write any except wait

283
00:15:10,470 --> 00:15:17,880
for it and what they say over here even

284
00:15:14,130 --> 00:15:19,560
a gadget that is not yet known to the

285
00:15:17,880 --> 00:15:23,189
public so this is the one that is not

286
00:15:19,560 --> 00:15:25,229
known to the public yet so there's our

287
00:15:23,190 --> 00:15:29,630
gadget like um Volker and stuff but this

288
00:15:25,230 --> 00:15:29,630
one is not you know it's it's not public

289
00:15:30,110 --> 00:15:34,170
here what were you gonna do I already

290
00:15:32,580 --> 00:15:36,690
have the exploit right and so we're

291
00:15:34,170 --> 00:15:38,699
gonna build the the the payload this

292
00:15:36,690 --> 00:15:40,860
part already passed and we're gonna

293
00:15:38,700 --> 00:15:43,470
inject our reversal within the payload

294
00:15:40,860 --> 00:15:45,870
so we're gonna have multi payload and

295
00:15:43,470 --> 00:15:48,180
our you know command within the payload

296
00:15:45,870 --> 00:15:51,480
itself and then we're gonna encrypt the

297
00:15:48,180 --> 00:15:54,870
payload using DES which is the default

298
00:15:51,480 --> 00:15:57,030
one that my face is uses and also you

299
00:15:54,870 --> 00:15:59,340
can use another one and also you can

300
00:15:57,030 --> 00:16:03,270
edit it with the explode and get a walk

301
00:15:59,340 --> 00:16:05,640
so there is no really solution for it

302
00:16:03,270 --> 00:16:07,140
for my face and then we're gonna

303
00:16:05,640 --> 00:16:09,480
calculate the hash message

304
00:16:07,140 --> 00:16:12,180
authentication code the the H Mac as

305
00:16:09,480 --> 00:16:14,700
it's generated in the environment and

306
00:16:12,180 --> 00:16:17,189
then we can encode the final you know

307
00:16:14,700 --> 00:16:18,690
cipher that we get into a base64 and

308
00:16:17,190 --> 00:16:21,720
then we're gonna send it to the server

309
00:16:18,690 --> 00:16:25,500
and hopefully waiting for reversal so

310
00:16:21,720 --> 00:16:27,030
how are we gonna see it in action by the

311
00:16:25,500 --> 00:16:29,310
way this is walking on the latest

312
00:16:27,030 --> 00:16:33,140
version and I deployed it a lot of

313
00:16:29,310 --> 00:16:33,140
version of Tomcat

314
00:16:48,340 --> 00:16:56,460
all right so this is

315
00:16:52,830 --> 00:16:58,950
the the application there's no tricks in

316
00:16:56,460 --> 00:17:02,430
terms of any civilization that have been

317
00:16:58,950 --> 00:17:04,860
have been made we are exploding the

318
00:17:02,430 --> 00:17:08,609
environment itself so we basically have

319
00:17:04,859 --> 00:17:10,919
a user form which is yeah you know it's

320
00:17:08,609 --> 00:17:13,770
taking the the the username and then it

321
00:17:10,920 --> 00:17:19,140
says to the user let's open them up in

322
00:17:13,770 --> 00:17:22,560
separate files okay cool so basically we

323
00:17:19,140 --> 00:17:24,660
have a GSP to GSP files it takes the

324
00:17:22,560 --> 00:17:27,899
username that you you pass then and then

325
00:17:24,660 --> 00:17:34,260
it's printed out no tricks

326
00:17:27,900 --> 00:17:39,450
nothing and we assume over here we have

327
00:17:34,260 --> 00:17:43,470
the e configuration for the deployed

328
00:17:39,450 --> 00:17:48,780
application so yeah this is the secret

329
00:17:43,470 --> 00:17:56,670
key and this is the H mark which used

330
00:17:48,780 --> 00:18:03,629
sha-1 and over here we have it let me

331
00:17:56,670 --> 00:18:06,210
just say ok so it generated from the

332
00:18:03,630 --> 00:18:12,180
server so it's not from the the client

333
00:18:06,210 --> 00:18:35,250
side and over here

334
00:18:12,180 --> 00:18:46,200
Tomcat its upper running I'm gonna

335
00:18:35,250 --> 00:18:51,210
deploy the fire now it's deployed this

336
00:18:46,200 --> 00:18:54,510
is it looking down the source code we

337
00:18:51,210 --> 00:18:58,080
have these IDs which is yeah the the GSF

338
00:18:54,510 --> 00:19:00,390
uses hidden field and then it uses the

339
00:18:58,080 --> 00:19:03,030
view state and the view state which save

340
00:19:00,390 --> 00:19:12,960
the current of you state is all

341
00:19:03,030 --> 00:19:14,910
encrypted all right no access SS not not

342
00:19:12,960 --> 00:19:19,980
on nothing injections nothing so

343
00:19:14,910 --> 00:19:31,410
basically if I type something let's say

344
00:19:19,980 --> 00:19:32,230
hello what can i the except white musing

345
00:19:31,410 --> 00:19:37,090
requires

346
00:19:32,230 --> 00:19:40,299
there's 64 crypto stuff the the host

347
00:19:37,090 --> 00:19:45,789
that can communicate the port checking

348
00:19:40,299 --> 00:19:47,799
the user argument okay and here I'm

349
00:19:45,789 --> 00:19:49,809
checking if if the viewstate is found on

350
00:19:47,799 --> 00:19:51,820
the URL that you supply it or not and

351
00:19:49,809 --> 00:19:58,019
here's the payload

352
00:19:51,820 --> 00:20:00,970
start from here into multiple part and

353
00:19:58,019 --> 00:20:03,309
here it inject the the comment so this

354
00:20:00,970 --> 00:20:07,049
is a function it inject the D common and

355
00:20:03,309 --> 00:20:11,918
then I can call this function and pass

356
00:20:07,049 --> 00:20:14,379
this comment to it then it will be over

357
00:20:11,919 --> 00:20:17,169
here so the whole payload I'm gonna re

358
00:20:14,380 --> 00:20:24,100
encrypt it to DES and then get the

359
00:20:17,169 --> 00:20:26,649
base64 out of it and how do I know how

360
00:20:24,100 --> 00:20:32,260
the encryption mechanism workin is just

361
00:20:26,649 --> 00:20:34,479
by visiting the documentation here's the

362
00:20:32,260 --> 00:20:38,769
the the export we are providing the

363
00:20:34,480 --> 00:20:43,179
secret key base64 and then we are

364
00:20:38,769 --> 00:20:45,279
encrypting the the using the ECB mode

365
00:20:43,179 --> 00:20:49,299
which is you know it walks in

366
00:20:45,279 --> 00:20:51,940
parallelism which is much faster and

367
00:20:49,299 --> 00:20:54,490
then we are passing this to a variable

368
00:20:51,940 --> 00:20:57,010
called encrypt which encrypt our payload

369
00:20:54,490 --> 00:20:59,740
and then right after that we are

370
00:20:57,010 --> 00:21:04,389
calculating the has hash message

371
00:20:59,740 --> 00:21:07,809
authentication code for this payload we

372
00:21:04,389 --> 00:21:09,789
combine them together and then we encode

373
00:21:07,809 --> 00:21:17,260
them into base64 and then right after

374
00:21:09,789 --> 00:21:19,679
that we send them to the server let's

375
00:21:17,260 --> 00:21:19,679
see how

376
00:21:22,480 --> 00:21:47,350
what I need to do is simply I'm gonna

377
00:21:36,230 --> 00:21:50,210
set up a listener running

378
00:21:47,350 --> 00:21:54,949
it's a blend the the view say that uh

379
00:21:50,210 --> 00:21:57,350
for debugging purposes and then we got

380
00:21:54,950 --> 00:22:03,410
the reversal of course I'm running it at

381
00:21:57,350 --> 00:22:06,020
as routes what's running as root this

382
00:22:03,410 --> 00:22:09,320
kind of you know exploitation technique

383
00:22:06,020 --> 00:22:11,080
by using my faces there's tons of you

384
00:22:09,320 --> 00:22:14,210
know thousands of website that is

385
00:22:11,080 --> 00:22:16,070
implementing GSF using my my faces body

386
00:22:14,210 --> 00:22:18,530
over here we are assuming that we have

387
00:22:16,070 --> 00:22:21,439
the secret key which we generated the

388
00:22:18,530 --> 00:22:23,210
the the H Mac there's other acceleration

389
00:22:21,440 --> 00:22:25,970
techniques which is doesn't dive into

390
00:22:23,210 --> 00:22:31,060
the the the encryption stuff like only

391
00:22:25,970 --> 00:22:31,060
the decipher itself and then executing

392
00:22:32,410 --> 00:22:40,550
what are the advice is to prevent these

393
00:22:36,680 --> 00:22:42,890
shits as per like personally III I don't

394
00:22:40,550 --> 00:22:45,379
prefer to use to implement the GSF using

395
00:22:42,890 --> 00:22:50,630
my faces so it can be done with other

396
00:22:45,380 --> 00:22:52,460
things you know but of course over here

397
00:22:50,630 --> 00:22:54,770
too in order to run this exploit you

398
00:22:52,460 --> 00:22:56,120
need to have the secret key so if you

399
00:22:54,770 --> 00:22:59,300
don't have the secret key you need to

400
00:22:56,120 --> 00:23:01,280
brute force and and do stuff so yeah

401
00:22:59,300 --> 00:23:03,290
these are the advices like use it from

402
00:23:01,280 --> 00:23:06,410
the server side which already exists in

403
00:23:03,290 --> 00:23:12,740
in my faces and enable the encryption of

404
00:23:06,410 --> 00:23:15,740
a few of you state this is basically the

405
00:23:12,740 --> 00:23:18,220
the stuff that I wanted to show Thank

406
00:23:15,740 --> 00:23:18,220
You Jamel

407
00:23:23,490 --> 00:23:25,550
you

