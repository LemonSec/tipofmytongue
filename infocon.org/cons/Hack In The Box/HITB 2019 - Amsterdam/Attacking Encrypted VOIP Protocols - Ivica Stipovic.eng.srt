1
00:00:19,360 --> 00:00:24,189
hi everybody welcome to today's

2
00:00:21,310 --> 00:00:27,189
presentation we will be talking about

3
00:00:24,189 --> 00:00:29,170
the attacks against encrypted VoIP

4
00:00:27,189 --> 00:00:32,020
protocols

5
00:00:29,170 --> 00:00:34,300
my name is Evie Povich I work for word

6
00:00:32,020 --> 00:00:37,660
solutions in Dublin as an information

7
00:00:34,300 --> 00:00:39,459
security consultant here is my email

8
00:00:37,660 --> 00:00:44,620
address in case you have any inquiries

9
00:00:39,460 --> 00:00:47,140
please don't hesitate first off I'd like

10
00:00:44,620 --> 00:00:51,010
to start the presentation by explaining

11
00:00:47,140 --> 00:00:54,670
some fundamental terms and acronyms VoIP

12
00:00:51,010 --> 00:00:57,849
stands for voice over IP so it entails

13
00:00:54,670 --> 00:01:01,000
not only voice but also video and

14
00:00:57,850 --> 00:01:04,989
messaging that uses IP based transport

15
00:01:01,000 --> 00:01:08,290
protocols for transmission the next term

16
00:01:04,989 --> 00:01:10,560
we need to familiarize ourselves with is

17
00:01:08,290 --> 00:01:14,260
sip which is a session initiation

18
00:01:10,560 --> 00:01:17,470
protocol it's a voice control protocol

19
00:01:14,260 --> 00:01:20,020
and by this I mean the protocol that is

20
00:01:17,470 --> 00:01:25,690
responsible for establishing maintaining

21
00:01:20,020 --> 00:01:28,479
and teardown of the call sip is one of

22
00:01:25,690 --> 00:01:30,460
the predominant VoIP control protocols

23
00:01:28,480 --> 00:01:34,030
I'm not sure if it's the most

24
00:01:30,460 --> 00:01:38,410
predominant I haven't found the evidence

25
00:01:34,030 --> 00:01:41,530
for that but it's it surely is widely

26
00:01:38,410 --> 00:01:46,390
used however it is not the only one

27
00:01:41,530 --> 00:01:49,540
so the VoIP protocols are actually a

28
00:01:46,390 --> 00:01:52,510
family of protocols here are some of the

29
00:01:49,540 --> 00:01:55,000
examples of other like media gateway

30
00:01:52,510 --> 00:01:59,110
control protocols is for connection

31
00:01:55,000 --> 00:02:03,070
management of media gateways h.323 has

32
00:01:59,110 --> 00:02:06,970
now a long history of being established

33
00:02:03,070 --> 00:02:11,680
as a well known and widely spread VoIP

34
00:02:06,970 --> 00:02:15,870
protocol XMPP deals with messaging and

35
00:02:11,680 --> 00:02:19,269
presence and Skype pretty well-known

36
00:02:15,870 --> 00:02:21,909
used by the application of the same name

37
00:02:19,269 --> 00:02:24,480
is a proprietary Internet telephony

38
00:02:21,909 --> 00:02:26,429
protocol that operates on peer-to-peer

39
00:02:24,480 --> 00:02:28,679
architectures

40
00:02:26,430 --> 00:02:30,569
so the point of this slide is just to

41
00:02:28,680 --> 00:02:33,230
show you that there are a number of

42
00:02:30,569 --> 00:02:36,179
protocols that actually comprise void

43
00:02:33,230 --> 00:02:39,599
family so what applications are using

44
00:02:36,180 --> 00:02:43,230
void this screenshot here is just a

45
00:02:39,599 --> 00:02:46,768
small sample of those that are using

46
00:02:43,230 --> 00:02:50,700
void note however that not all of them

47
00:02:46,769 --> 00:02:53,159
will be using SIPP as I said in the

48
00:02:50,700 --> 00:02:56,280
previous slide Skype uses its own

49
00:02:53,159 --> 00:02:59,040
proprietary protocol and I think it's

50
00:02:56,280 --> 00:03:03,150
either viber or whatsapp that is not

51
00:02:59,040 --> 00:03:06,120
using sip but many others like blink

52
00:03:03,150 --> 00:03:11,220
Cisco IP communicator jitsi will

53
00:03:06,120 --> 00:03:14,310
actually use sip so the again the idea

54
00:03:11,220 --> 00:03:18,269
of this slide is to show you actually

55
00:03:14,310 --> 00:03:20,609
the proliferation of VoIP protocols that

56
00:03:18,269 --> 00:03:25,349
happened throughout the last I would say

57
00:03:20,609 --> 00:03:28,950
two decades and their wider adoption by

58
00:03:25,349 --> 00:03:31,108
commercial applications so let's talk a

59
00:03:28,950 --> 00:03:34,888
bit about sip now because this is the

60
00:03:31,109 --> 00:03:38,250
focal point of the presentation sip by

61
00:03:34,889 --> 00:03:42,470
default runs as a UDP service over port

62
00:03:38,250 --> 00:03:45,530
5060 and by default it's not encrypted

63
00:03:42,470 --> 00:03:51,450
it's full description is given within

64
00:03:45,530 --> 00:03:54,209
RFC 3261 but it's not my intention to go

65
00:03:51,450 --> 00:03:56,760
through the numerous features that that

66
00:03:54,209 --> 00:04:00,690
sip supports rather I will narrow down

67
00:03:56,760 --> 00:04:03,269
the discussion to one particular feature

68
00:04:00,690 --> 00:04:07,199
that is important to us and this is the

69
00:04:03,269 --> 00:04:10,940
its structural similarity to http so

70
00:04:07,199 --> 00:04:13,260
what do I mean by that this light is a

71
00:04:10,940 --> 00:04:16,829
deconstruction of a typical sip session

72
00:04:13,260 --> 00:04:20,159
actually a part of it so you will see in

73
00:04:16,829 --> 00:04:22,889
the upper and the lower rectangles there

74
00:04:20,160 --> 00:04:26,610
are sip requests and in the middle

75
00:04:22,889 --> 00:04:30,690
rectangle is the sip response so by the

76
00:04:26,610 --> 00:04:33,990
requests note that we have a construct

77
00:04:30,690 --> 00:04:39,080
made of method which is in this case

78
00:04:33,990 --> 00:04:41,750
register followed by the URI it's

79
00:04:39,080 --> 00:04:45,490
actually the same as HTTP so if you

80
00:04:41,750 --> 00:04:47,509
replace register with get or post and

81
00:04:45,490 --> 00:04:51,620
the sleepweight with do you

82
00:04:47,509 --> 00:04:55,669
well the URI with the HTTP URI you

83
00:04:51,620 --> 00:04:59,030
basically get the HTTP response also

84
00:04:55,669 --> 00:05:01,698
note that a number of the attributes

85
00:04:59,030 --> 00:05:04,520
here in the headers will resemble more

86
00:05:01,699 --> 00:05:08,000
or less HTTP attributes some are

87
00:05:04,520 --> 00:05:11,539
actually the same like user agent via

88
00:05:08,000 --> 00:05:15,490
content length and so on and the same

89
00:05:11,539 --> 00:05:17,719
applies for the server response note it

90
00:05:15,490 --> 00:05:20,960
displayed the message for a one

91
00:05:17,719 --> 00:05:24,080
unauthorized which again is very similar

92
00:05:20,960 --> 00:05:28,609
to HTTP responses so if you replace it

93
00:05:24,080 --> 00:05:33,770
with HTTP you essentially get the HTTP

94
00:05:28,610 --> 00:05:37,460
response also note it it shows the the

95
00:05:33,770 --> 00:05:41,930
server version just the same way as HTTP

96
00:05:37,460 --> 00:05:45,349
servers too so the point of this is it

97
00:05:41,930 --> 00:05:49,699
will allow us to analyze sip traffic

98
00:05:45,349 --> 00:05:51,710
easier so what are the attributes of a

99
00:05:49,699 --> 00:05:54,889
sip session there are multiple

100
00:05:51,710 --> 00:05:58,580
attributes that sip supports however

101
00:05:54,889 --> 00:06:01,789
again we will narrow down our discussion

102
00:05:58,580 --> 00:06:04,219
to those that are important for the for

103
00:06:01,789 --> 00:06:08,779
the authentication mechanism and these

104
00:06:04,219 --> 00:06:13,719
are algorithm method username realm URI

105
00:06:08,779 --> 00:06:16,639
response knowns and CC gnomes and keopi

106
00:06:13,719 --> 00:06:18,469
the reason why the last three are given

107
00:06:16,639 --> 00:06:22,520
in the brackets will be explained a

108
00:06:18,469 --> 00:06:25,430
little bit later so these attributes can

109
00:06:22,520 --> 00:06:28,279
be trapped can be captured within some

110
00:06:25,430 --> 00:06:31,729
of the sip requests not all of them some

111
00:06:28,279 --> 00:06:33,889
of them and more particularly within the

112
00:06:31,729 --> 00:06:41,210
line that starts with the authorization

113
00:06:33,889 --> 00:06:45,550
in in the right red rectangle here so

114
00:06:41,210 --> 00:06:49,460
why TLS encryption in the first place

115
00:06:45,550 --> 00:06:51,910
wrapping sip or any other protocol into

116
00:06:49,460 --> 00:06:55,659
TLS makes it more secure

117
00:06:51,910 --> 00:06:58,300
so exactly the same way as wrapping HTTP

118
00:06:55,660 --> 00:07:03,130
into TLS makes it more secure than the

119
00:06:58,300 --> 00:07:06,430
native HTTP the same goes for pop3 SMTP

120
00:07:03,130 --> 00:07:09,670
RDP LDAP you will see a number of them

121
00:07:06,430 --> 00:07:14,350
usually have s at the end signifying the

122
00:07:09,670 --> 00:07:17,200
secure version so the interception of

123
00:07:14,350 --> 00:07:21,730
encrypted sip will show obfuscated

124
00:07:17,200 --> 00:07:25,090
application layer payload only IP TCP

125
00:07:21,730 --> 00:07:27,660
and UDP header level information will be

126
00:07:25,090 --> 00:07:32,619
intelligible so what do I mean by that

127
00:07:27,660 --> 00:07:35,290
if you intercept encrypt LM sorry

128
00:07:32,620 --> 00:07:37,750
encrypted sip session you will get

129
00:07:35,290 --> 00:07:40,600
something like this so the first arrow

130
00:07:37,750 --> 00:07:43,810
shows you the information that you can

131
00:07:40,600 --> 00:07:46,750
read in plaintext and did that is up to

132
00:07:43,810 --> 00:07:49,780
the layer four of the OSI reference

133
00:07:46,750 --> 00:07:51,550
model that means you will be able to

134
00:07:49,780 --> 00:07:53,559
read the source and destination IP

135
00:07:51,550 --> 00:07:54,850
address and source and destination port

136
00:07:53,560 --> 00:07:57,550
in clear-text

137
00:07:54,850 --> 00:08:05,250
they're not encrypted however the

138
00:07:57,550 --> 00:08:08,410
application layer will be so I will

139
00:08:05,250 --> 00:08:12,630
structure the presentation in its two

140
00:08:08,410 --> 00:08:17,950
aspects its first aspect deals with the

141
00:08:12,630 --> 00:08:20,260
interception and decryption only for

142
00:08:17,950 --> 00:08:22,210
unencrypted sip sessions we will focus

143
00:08:20,260 --> 00:08:24,670
only on the interception for obvious

144
00:08:22,210 --> 00:08:26,830
reasons but in our case is we're dealing

145
00:08:24,670 --> 00:08:30,310
with the encrypted sessions we obviously

146
00:08:26,830 --> 00:08:33,728
need to address both the second aspect

147
00:08:30,310 --> 00:08:37,330
will be sipped password cracking again

148
00:08:33,729 --> 00:08:41,950
for unencrypted sip sessions of the

149
00:08:37,330 --> 00:08:44,710
shelf tools will do the job for you but

150
00:08:41,950 --> 00:08:48,000
in our case the situation is a little

151
00:08:44,710 --> 00:08:52,180
bit more complicated so to tackle this

152
00:08:48,000 --> 00:08:56,020
encrypted stuff we basically have two

153
00:08:52,180 --> 00:08:59,199
options one is we can manually prepare a

154
00:08:56,020 --> 00:09:01,750
file for a sip crack sip crack is the

155
00:08:59,200 --> 00:09:05,400
existing utility that can crack sip

156
00:09:01,750 --> 00:09:07,260
passwords but we have encrypted session

157
00:09:05,400 --> 00:09:11,069
so we would need to do some manual

158
00:09:07,260 --> 00:09:14,670
actions here the second approach is we

159
00:09:11,070 --> 00:09:17,220
will develop our own application to

160
00:09:14,670 --> 00:09:22,439
streamline the cracking and this was the

161
00:09:17,220 --> 00:09:26,220
approach chosen here let's briefly

162
00:09:22,440 --> 00:09:29,460
summarize the plaintext he passwords

163
00:09:26,220 --> 00:09:32,010
attack generally there are two tools sip

164
00:09:29,460 --> 00:09:35,130
dump and subtract well probably there

165
00:09:32,010 --> 00:09:39,870
are more but let's just focus on this

166
00:09:35,130 --> 00:09:43,439
example sweep dump takes a pcap of of

167
00:09:39,870 --> 00:09:47,400
sip session as its input and it will

168
00:09:43,440 --> 00:09:52,430
generate a text file as its output now

169
00:09:47,400 --> 00:09:55,590
this output is then taken by sip crack

170
00:09:52,430 --> 00:09:59,609
which then performs the the password

171
00:09:55,590 --> 00:10:02,220
dictionary attack now both tools work in

172
00:09:59,610 --> 00:10:04,440
pretty straightforward fashion and if

173
00:10:02,220 --> 00:10:07,590
you have plain text sip it works okay

174
00:10:04,440 --> 00:10:11,190
note that sip dump can also be run in a

175
00:10:07,590 --> 00:10:13,500
sniffer mode in which you tell it the

176
00:10:11,190 --> 00:10:15,870
designated interface to which it should

177
00:10:13,500 --> 00:10:21,570
listen to and then it will capture the

178
00:10:15,870 --> 00:10:23,970
traffic the dump for you so one of the

179
00:10:21,570 --> 00:10:26,160
plausible attack vectors that I have

180
00:10:23,970 --> 00:10:29,910
chosen for this attack was men in the

181
00:10:26,160 --> 00:10:31,770
middle to make this attack work there

182
00:10:29,910 --> 00:10:35,069
are however a couple of prerequisites

183
00:10:31,770 --> 00:10:36,630
that we need to deal with first we need

184
00:10:35,070 --> 00:10:39,150
to build a mechanism capable of

185
00:10:36,630 --> 00:10:42,150
intercepting and decrypting TLS wrapped

186
00:10:39,150 --> 00:10:44,790
session second thing is we need a

187
00:10:42,150 --> 00:10:49,230
protocol agnostic proxy capable of

188
00:10:44,790 --> 00:10:53,189
decrypting TLS and 13 we need to send

189
00:10:49,230 --> 00:10:56,330
packets to burp why do we need protocol

190
00:10:53,190 --> 00:11:00,210
agnostic proxy the intention here is to

191
00:10:56,330 --> 00:11:03,180
construct a scalable mechanism capable

192
00:11:00,210 --> 00:11:06,780
of cracking any TLS protocol

193
00:11:03,180 --> 00:11:09,839
so not just sip right this is the reason

194
00:11:06,780 --> 00:11:14,459
why the proxy should not be application

195
00:11:09,840 --> 00:11:18,880
specific second thing is why do we need

196
00:11:14,460 --> 00:11:20,680
burp as many of you will probably know

197
00:11:18,880 --> 00:11:24,850
has very nice and very powerful

198
00:11:20,680 --> 00:11:29,290
interface for analyzing and actively

199
00:11:24,850 --> 00:11:33,250
modifying HTTP traffic and the idea here

200
00:11:29,290 --> 00:11:36,759
was to use burp rich feature set of

201
00:11:33,250 --> 00:11:41,170
capabilities to actually allow me to

202
00:11:36,759 --> 00:11:45,420
play with SIP packets and sip traffic

203
00:11:41,170 --> 00:11:48,729
the same way as I would do for for HTTP

204
00:11:45,420 --> 00:11:51,389
so the good news is that burp does the

205
00:11:48,730 --> 00:11:55,360
job number one meaning it's able to

206
00:11:51,389 --> 00:11:57,610
intercept and decrypt the HTTPS the bad

207
00:11:55,360 --> 00:12:00,310
news however is that the burp does not

208
00:11:57,610 --> 00:12:04,269
speak sip or any other protocol for that

209
00:12:00,310 --> 00:12:07,329
matter so I had to fill in this gap and

210
00:12:04,269 --> 00:12:11,829
fortunately found a tool which is a

211
00:12:07,329 --> 00:12:14,229
medium relay Python script it's shared

212
00:12:11,829 --> 00:12:16,138
via the following link I highly

213
00:12:14,230 --> 00:12:22,000
recommend it it has some very good

214
00:12:16,139 --> 00:12:25,240
explanations of its internals and this

215
00:12:22,000 --> 00:12:28,269
brings us to the solution design here is

216
00:12:25,240 --> 00:12:30,040
the topology of the proof-of-concept so

217
00:12:28,269 --> 00:12:32,319
on the left hand side we have a sip

218
00:12:30,040 --> 00:12:35,110
client that's the client that initiates

219
00:12:32,319 --> 00:12:38,199
the call the middle component is sip

220
00:12:35,110 --> 00:12:41,709
proxy which runs both meet and relay and

221
00:12:38,199 --> 00:12:45,099
burp on the right hand side there's a

222
00:12:41,709 --> 00:12:47,319
sip server that processes the VoIP

223
00:12:45,100 --> 00:12:50,829
traffic and establishes the call to the

224
00:12:47,319 --> 00:12:54,729
destination client note that we have TLS

225
00:12:50,829 --> 00:12:57,339
tunnels established between sip client

226
00:12:54,730 --> 00:13:00,519
and sip proxy and from sip proxy to sip

227
00:12:57,339 --> 00:13:04,779
server that's important to maintain the

228
00:13:00,519 --> 00:13:08,980
the encryption along the whole path so

229
00:13:04,779 --> 00:13:11,380
in my particular case I had sip proxy

230
00:13:08,980 --> 00:13:15,009
running both components on a single

231
00:13:11,380 --> 00:13:17,139
virtual machine which was Kali but

232
00:13:15,009 --> 00:13:19,720
there's no reason why shouldn't why you

233
00:13:17,139 --> 00:13:23,529
shouldn't be able to split them into say

234
00:13:19,720 --> 00:13:26,410
two VMs and you can use any Linux Kali

235
00:13:23,529 --> 00:13:30,439
is not a requirement

236
00:13:26,410 --> 00:13:32,569
so now I want to dive a little bit into

237
00:13:30,439 --> 00:13:34,639
the mechanics of the interception and

238
00:13:32,569 --> 00:13:35,439
decryption so you get the idea how it

239
00:13:34,639 --> 00:13:38,809
works

240
00:13:35,439 --> 00:13:41,199
so we run the meter relay by telling it

241
00:13:38,809 --> 00:13:45,290
to listen on all of the available

242
00:13:41,199 --> 00:13:47,748
network interfaces then we tell it there

243
00:13:45,290 --> 00:13:49,939
is an upstream proxy running on the

244
00:13:47,749 --> 00:13:53,809
local host port 8080

245
00:13:49,939 --> 00:13:57,920
that's essentially burp then we tell it

246
00:13:53,809 --> 00:14:00,139
to forward all the traffic it receives

247
00:13:57,920 --> 00:14:04,128
on its port 5061

248
00:14:00,139 --> 00:14:10,069
to a sip server okay so sip server in

249
00:14:04,129 --> 00:14:12,259
our case is that 192 168 0 101 we

250
00:14:10,069 --> 00:14:15,559
further present the digital certificate

251
00:14:12,259 --> 00:14:16,959
that we created for me to relay and the

252
00:14:15,559 --> 00:14:22,118
private key that will actually

253
00:14:16,959 --> 00:14:25,518
facilitate the decryption of the traffic

254
00:14:22,119 --> 00:14:29,149
so if we now switch over to burb which

255
00:14:25,519 --> 00:14:33,019
is a upstream proxy we can see that the

256
00:14:29,149 --> 00:14:36,850
SIP session is captured in plain text so

257
00:14:33,019 --> 00:14:41,839
note here that the method is post and

258
00:14:36,850 --> 00:14:45,709
that the URL has been encapsulated

259
00:14:41,839 --> 00:14:49,850
within that slash client request to IP

260
00:14:45,709 --> 00:14:52,069
and slash server responds from IP now

261
00:14:49,850 --> 00:14:55,579
these are the things that meter relay

262
00:14:52,069 --> 00:14:59,389
will do for us actually will do for burp

263
00:14:55,579 --> 00:15:02,628
and this feature allows burp to move

264
00:14:59,389 --> 00:15:06,019
subtract a sip traffic back and forth

265
00:15:02,629 --> 00:15:11,239
it basically encapsulated into a HTTP

266
00:15:06,019 --> 00:15:14,480
request so again the mechanics goes from

267
00:15:11,239 --> 00:15:17,449
sip client that establishes the call via

268
00:15:14,480 --> 00:15:20,269
meeting relay the traffic then goes to

269
00:15:17,449 --> 00:15:22,368
burp suite then to sip server that

270
00:15:20,269 --> 00:15:25,069
processes the call and establishes the

271
00:15:22,369 --> 00:15:28,999
call with the destination client note

272
00:15:25,069 --> 00:15:34,128
that at this point in time we have burp

273
00:15:28,999 --> 00:15:38,600
fully functional and capable of moving

274
00:15:34,129 --> 00:15:40,160
sip packets back and forth so this is

275
00:15:38,600 --> 00:15:43,519
now the time where you can

276
00:15:40,160 --> 00:15:47,240
mount multiple attacks against sip if

277
00:15:43,519 --> 00:15:50,149
you for example turn the burp intercept

278
00:15:47,240 --> 00:15:53,480
on you can send those sip requests to

279
00:15:50,149 --> 00:15:55,970
burp repeater and then change coal

280
00:15:53,480 --> 00:15:58,730
destinations brute-force destination

281
00:15:55,970 --> 00:16:01,250
numbers change user agent fingerprint

282
00:15:58,730 --> 00:16:04,910
inject some funky headers and try to

283
00:16:01,250 --> 00:16:08,389
establish cover to channel from within

284
00:16:04,910 --> 00:16:12,980
the see patters spoof calling ID you

285
00:16:08,389 --> 00:16:14,839
name it even though the tampering in

286
00:16:12,980 --> 00:16:17,689
burp is interesting

287
00:16:14,839 --> 00:16:21,139
none of these attacks here were in the

288
00:16:17,689 --> 00:16:26,629
scope of this project so I focused

289
00:16:21,139 --> 00:16:30,439
solely on the password cracking and this

290
00:16:26,629 --> 00:16:32,389
brings me to a second part of the second

291
00:16:30,439 --> 00:16:36,019
aspect of the presentation which is the

292
00:16:32,389 --> 00:16:37,970
new application first why is this new

293
00:16:36,019 --> 00:16:41,089
application required why can't we use

294
00:16:37,970 --> 00:16:43,670
sip dump and subtract sip damn will not

295
00:16:41,089 --> 00:16:46,100
work here we have dumped the decrypted

296
00:16:43,670 --> 00:16:49,180
session into non pcap format that sip

297
00:16:46,100 --> 00:16:51,500
damn simply doesn't understand

298
00:16:49,180 --> 00:16:53,719
additionally symptom has no way of

299
00:16:51,500 --> 00:16:57,050
importing the private key to decrypt the

300
00:16:53,720 --> 00:17:00,380
pcap remember we can run the pcap

301
00:16:57,050 --> 00:17:03,258
session on the attackers proxy it will

302
00:17:00,380 --> 00:17:05,959
be originally encrypted but since we

303
00:17:03,259 --> 00:17:09,049
have access to the private key we end up

304
00:17:05,959 --> 00:17:12,740
with decrypted pcap session Wireshark

305
00:17:09,049 --> 00:17:16,490
supports that sip Dom doesn't so what

306
00:17:12,740 --> 00:17:19,220
will be this new application doing the

307
00:17:16,490 --> 00:17:22,909
new application will simply process the

308
00:17:19,220 --> 00:17:27,020
output of a meeting relay which is more

309
00:17:22,909 --> 00:17:30,740
or less text file it will extract the

310
00:17:27,020 --> 00:17:33,679
attributes from those from this output

311
00:17:30,740 --> 00:17:36,470
file which are relevant for the

312
00:17:33,679 --> 00:17:40,419
authentication process and then we'll

313
00:17:36,470 --> 00:17:44,390
perform password dictionary based attack

314
00:17:40,419 --> 00:17:47,900
so the sip crack 2 is the name I have

315
00:17:44,390 --> 00:17:52,370
chosen for this new utility actually

316
00:17:47,900 --> 00:17:53,789
map's the functional aspects of sip dump

317
00:17:52,370 --> 00:17:57,809
and subtract into

318
00:17:53,789 --> 00:17:59,908
single utility and by having this it

319
00:17:57,809 --> 00:18:03,330
streamlines the whole process of

320
00:17:59,909 --> 00:18:08,220
password dumping otherwise we would need

321
00:18:03,330 --> 00:18:12,330
to do some manual manipulation of the

322
00:18:08,220 --> 00:18:14,879
file to make subtract the old version -

323
00:18:12,330 --> 00:18:17,789
to work with it but it's more elegant

324
00:18:14,879 --> 00:18:21,748
when you have streamlined operation so

325
00:18:17,789 --> 00:18:23,820
how do we crack digest algorithm there

326
00:18:21,749 --> 00:18:27,119
is nothing particularly magic about it

327
00:18:23,820 --> 00:18:34,049
this digest algorithm is published with

328
00:18:27,119 --> 00:18:38,009
in RFC 2069 and RFC 26:17 the most

329
00:18:34,049 --> 00:18:40,168
important difference for us is the

330
00:18:38,009 --> 00:18:43,979
introduction of those three attributes

331
00:18:40,169 --> 00:18:48,539
QoP and C&C nonce they were introduced

332
00:18:43,979 --> 00:18:52,159
as part of the RFC 2617 and with purpose

333
00:18:48,539 --> 00:18:56,099
to increase the security of the digest

334
00:18:52,159 --> 00:18:59,340
authentication they essentially had some

335
00:18:56,099 --> 00:19:01,590
variability into the md5 hashing but for

336
00:18:59,340 --> 00:19:05,009
us it really doesn't better because we

337
00:19:01,590 --> 00:19:08,269
have a way how we can intercept decrypt

338
00:19:05,009 --> 00:19:13,249
them extract them and put them into the

339
00:19:08,269 --> 00:19:17,999
tracking algorithm so how does this

340
00:19:13,249 --> 00:19:20,399
digest authentication look like if key

341
00:19:17,999 --> 00:19:22,859
OPC gnomes and NCS

342
00:19:20,399 --> 00:19:28,080
are not defined then we are dealing with

343
00:19:22,859 --> 00:19:31,859
RFC 2069 compliant behavior and in that

344
00:19:28,080 --> 00:19:37,320
case h1 is calculated as md5 hash of

345
00:19:31,859 --> 00:19:41,279
username Ram and password h2 is md5 hash

346
00:19:37,320 --> 00:19:47,629
of method in URI and final response is

347
00:19:41,279 --> 00:19:51,379
md5 hash of h1 nonce in h2 now note that

348
00:19:47,629 --> 00:19:54,779
the response here will be on one hand

349
00:19:51,379 --> 00:19:57,178
calculated in our cracking algorithm and

350
00:19:54,779 --> 00:19:59,129
on the other hand it will be extracted

351
00:19:57,179 --> 00:20:01,289
from the sip response and then there

352
00:19:59,129 --> 00:20:02,580
compared if they are the same we have

353
00:20:01,289 --> 00:20:07,170
found the password

354
00:20:02,580 --> 00:20:10,139
if QoP Xenon's and emcees are not sorry

355
00:20:07,170 --> 00:20:13,770
are defined then the SIP proxy is

356
00:20:10,140 --> 00:20:16,560
working according to RFC 26:17 and in

357
00:20:13,770 --> 00:20:18,120
which case response is calculated in a

358
00:20:16,560 --> 00:20:22,409
slightly different manner

359
00:20:18,120 --> 00:20:25,889
note that h1 and h2 are defined the same

360
00:20:22,410 --> 00:20:29,070
way for both RFC's anyway long story

361
00:20:25,890 --> 00:20:32,160
short this URL gives you the access to

362
00:20:29,070 --> 00:20:35,429
the source code of my humble application

363
00:20:32,160 --> 00:20:42,600
so feel free to have a look it's pretty

364
00:20:35,430 --> 00:20:45,500
straightforward final thoughts so there

365
00:20:42,600 --> 00:20:48,719
are a couple of things I wish to explain

366
00:20:45,500 --> 00:20:55,410
one is the development sip crack 2 is

367
00:20:48,720 --> 00:20:57,840
currently application developed for

368
00:20:55,410 --> 00:21:00,900
linux only it's it's written in c and

369
00:20:57,840 --> 00:21:03,419
compiled for linux version for linux

370
00:21:00,900 --> 00:21:05,340
architecture but i do hope to release

371
00:21:03,420 --> 00:21:07,500
the Windows version read CUDA

372
00:21:05,340 --> 00:21:10,110
multi-threading and parallel processing

373
00:21:07,500 --> 00:21:12,030
in a near future given that I'm a pretty

374
00:21:10,110 --> 00:21:14,639
bad programmer didn't that can you know

375
00:21:12,030 --> 00:21:18,120
take some time but I hope it will

376
00:21:14,640 --> 00:21:21,780
eventually show up for those less

377
00:21:18,120 --> 00:21:23,550
familiar just briefly multi-threading

378
00:21:21,780 --> 00:21:27,330
and parallel processing is a method

379
00:21:23,550 --> 00:21:29,669
where you upload the processing of the

380
00:21:27,330 --> 00:21:32,669
main CPU on to the graphical processing

381
00:21:29,670 --> 00:21:36,480
unit so if you have a powerful graphic

382
00:21:32,670 --> 00:21:37,950
card like say NVIDIA GeForce you should

383
00:21:36,480 --> 00:21:40,160
be able to achieve significant

384
00:21:37,950 --> 00:21:43,460
acceleration in the brute forcing

385
00:21:40,160 --> 00:21:46,140
mechanism but we'll see about that

386
00:21:43,460 --> 00:21:49,440
second thing how realistic or difficult

387
00:21:46,140 --> 00:21:51,690
is this attack even though the

388
00:21:49,440 --> 00:21:53,820
presentation shows that you know we can

389
00:21:51,690 --> 00:21:57,440
essentially attack the encrypted void

390
00:21:53,820 --> 00:22:01,200
protocols it's not so easy in the real

391
00:21:57,440 --> 00:22:03,810
right life scenario and the reason for

392
00:22:01,200 --> 00:22:05,700
that is following the assumption of this

393
00:22:03,810 --> 00:22:08,730
attack is that we don't have control

394
00:22:05,700 --> 00:22:11,610
over the legitimate client over the

395
00:22:08,730 --> 00:22:14,700
legitimate sip proxy or over the

396
00:22:11,610 --> 00:22:15,928
legitimate sip server so the question

397
00:22:14,700 --> 00:22:18,779
that arises is

398
00:22:15,929 --> 00:22:19,740
how do again how do we get the traffic

399
00:22:18,779 --> 00:22:22,200
in a first place

400
00:22:19,740 --> 00:22:24,990
there are ways how to do it ARP

401
00:22:22,200 --> 00:22:27,720
poisoning is one of them our poisoning

402
00:22:24,990 --> 00:22:30,440
is a method where you inject specially

403
00:22:27,720 --> 00:22:36,960
crafted ARP entries into the switch

404
00:22:30,440 --> 00:22:40,080
cache making it forward the traffic to

405
00:22:36,960 --> 00:22:43,110
your component instead of the legitimate

406
00:22:40,080 --> 00:22:45,480
one um our poisoning is relatively easy

407
00:22:43,110 --> 00:22:49,100
to implement in a lab environment but

408
00:22:45,480 --> 00:22:53,610
very difficult in in real case scenario

409
00:22:49,100 --> 00:22:55,998
you would need to compromise the service

410
00:22:53,610 --> 00:22:59,758
provider infrastructure to allow that

411
00:22:55,999 --> 00:23:02,879
ARP injection and that that's not an

412
00:22:59,759 --> 00:23:06,509
easy task so this leads us to the

413
00:23:02,879 --> 00:23:09,418
recommendations use strong passwords the

414
00:23:06,509 --> 00:23:11,279
more complex passwords you use the less

415
00:23:09,419 --> 00:23:13,529
likely they will be found in the

416
00:23:11,279 --> 00:23:15,600
dictionary files that attackers are

417
00:23:13,529 --> 00:23:19,019
using do not use self-signed

418
00:23:15,600 --> 00:23:21,360
certificates if you do you make the job

419
00:23:19,019 --> 00:23:24,360
for the attacker easier because it

420
00:23:21,360 --> 00:23:28,139
becomes easier to impersonate your

421
00:23:24,360 --> 00:23:31,459
legitimate components the third thing is

422
00:23:28,139 --> 00:23:33,809
I recommend using the client-side

423
00:23:31,460 --> 00:23:37,289
certificate in addition to server-side

424
00:23:33,809 --> 00:23:43,970
certificate so with what you make here

425
00:23:37,289 --> 00:23:48,360
is you essentially make not only client

426
00:23:43,970 --> 00:23:51,029
verify the legitimacy of the server but

427
00:23:48,360 --> 00:23:54,928
also server checking the legitimacy of

428
00:23:51,029 --> 00:23:57,539
the client obviously that two-way check

429
00:23:54,929 --> 00:23:59,509
is more secure than one way check but it

430
00:23:57,539 --> 00:24:01,740
comes with the cost and the cost is

431
00:23:59,509 --> 00:24:05,999
additional burden to your PKI

432
00:24:01,740 --> 00:24:11,869
infrastructure given all that together I

433
00:24:05,999 --> 00:24:15,570
would rate this risk as as medium so

434
00:24:11,869 --> 00:24:19,759
we'll switch over now to demo so you get

435
00:24:15,570 --> 00:24:25,700
the impression how how things operate in

436
00:24:19,759 --> 00:24:25,700
real well in in the lab environment

437
00:24:26,219 --> 00:24:32,789
we will focus here on the attackers

438
00:24:28,580 --> 00:24:36,570
component which is the central screen we

439
00:24:32,789 --> 00:24:39,989
run the meeting relay with all those

440
00:24:36,570 --> 00:24:42,869
attributes that I have explained the

441
00:24:39,989 --> 00:24:48,659
only difference is this time we dump its

442
00:24:42,869 --> 00:24:50,999
output into the text file so we run that

443
00:24:48,659 --> 00:24:54,599
and what happens now in the background

444
00:24:50,999 --> 00:24:58,469
is I'm starting a couple of VoIP clients

445
00:24:54,599 --> 00:25:00,779
they will soon show up so you'll you

446
00:24:58,469 --> 00:25:04,799
know get a better picture but what

447
00:25:00,779 --> 00:25:06,989
actually happens here is these clients

448
00:25:04,799 --> 00:25:10,769
will register themselves with the SIP

449
00:25:06,989 --> 00:25:15,829
server and the registration process is

450
00:25:10,769 --> 00:25:19,379
the one that requires the authentication

451
00:25:15,829 --> 00:25:23,908
that authentication details will be

452
00:25:19,379 --> 00:25:26,519
captured by the meter relay so this is

453
00:25:23,909 --> 00:25:30,719
how it looks like basically we have two

454
00:25:26,519 --> 00:25:33,899
accounts one has saved password the

455
00:25:30,719 --> 00:25:37,679
other one will look for the password to

456
00:25:33,899 --> 00:25:40,978
be entered manually and this process

457
00:25:37,679 --> 00:25:44,399
here performs that registration with the

458
00:25:40,979 --> 00:25:44,969
with the SIP server now at this point in

459
00:25:44,399 --> 00:25:46,678
time

460
00:25:44,969 --> 00:25:50,159
we should have enough information

461
00:25:46,679 --> 00:25:52,559
captured by the meeting relay and

462
00:25:50,159 --> 00:25:58,219
decrypt it what is even more more

463
00:25:52,559 --> 00:26:01,049
important to actually do the duty attack

464
00:25:58,219 --> 00:26:04,589
what I want to show you here is the

465
00:26:01,049 --> 00:26:07,289
running TCP dump session on the sip

466
00:26:04,589 --> 00:26:10,109
server so the SIP server here is

467
00:26:07,289 --> 00:26:14,070
asterisk and the reason why I'm showing

468
00:26:10,109 --> 00:26:17,759
you this is that you can notice there is

469
00:26:14,070 --> 00:26:22,849
no intelligible information here nothing

470
00:26:17,759 --> 00:26:27,149
in human readable form except for those

471
00:26:22,849 --> 00:26:30,570
layer 1 2 3 & 4 information which means

472
00:26:27,149 --> 00:26:34,879
yeah you still can see the IP addresses

473
00:26:30,570 --> 00:26:36,720
and ports both source and destination

474
00:26:34,879 --> 00:26:39,419
but

475
00:26:36,720 --> 00:26:41,850
in the column on the right-hand side you

476
00:26:39,420 --> 00:26:44,040
actually don't see any any human

477
00:26:41,850 --> 00:26:47,370
readable text and that makes sense

478
00:26:44,040 --> 00:26:57,180
because as you can see here outlined the

479
00:26:47,370 --> 00:27:00,120
session is TLS so encrypted that's what

480
00:26:57,180 --> 00:27:03,300
I wanted to show on this side so and now

481
00:27:00,120 --> 00:27:07,439
we can actually interrupt this session

482
00:27:03,300 --> 00:27:10,169
and have a look at them at the output

483
00:27:07,440 --> 00:27:14,760
file you can see it's it's a text-based

484
00:27:10,170 --> 00:27:17,400
file that captured the sip session in

485
00:27:14,760 --> 00:27:21,780
the plaintext it contains some other

486
00:27:17,400 --> 00:27:26,340
attributes but it's really it's it's not

487
00:27:21,780 --> 00:27:30,300
relevant for us and now the only thing

488
00:27:26,340 --> 00:27:40,050
that remains to be done is to run sip

489
00:27:30,300 --> 00:27:44,690
cracker against captured file so if we

490
00:27:40,050 --> 00:27:48,960
run that it will hopefully find

491
00:27:44,690 --> 00:27:54,420
credentials but if we switch over then

492
00:27:48,960 --> 00:27:59,090
to burp you can actually see the whole

493
00:27:54,420 --> 00:28:03,600
session being captured in the plaintext

494
00:27:59,090 --> 00:28:08,459
even though as I said I did not perform

495
00:28:03,600 --> 00:28:10,409
any other zip attacks the this model

496
00:28:08,460 --> 00:28:13,950
here gives you actually the opportunity

497
00:28:10,410 --> 00:28:16,170
to interfere with the traffic so if you

498
00:28:13,950 --> 00:28:19,500
turn the intercept on you can actually

499
00:28:16,170 --> 00:28:22,590
actively modify that traffic so the only

500
00:28:19,500 --> 00:28:25,170
thing here I wish to draw your attention

501
00:28:22,590 --> 00:28:34,119
to is that that line which shows those

502
00:28:25,170 --> 00:28:37,179
attributes in in a clear text and as I

503
00:28:34,119 --> 00:28:40,478
said I leave you for a homework to play

504
00:28:37,179 --> 00:28:43,389
with other super tacks but that is

505
00:28:40,479 --> 00:28:46,539
essentially all that I wanted to show

506
00:28:43,389 --> 00:28:48,549
you on the burp side again the output of

507
00:28:46,539 --> 00:28:50,829
the of the tool is pretty simply

508
00:28:48,549 --> 00:28:53,769
displays the username in the password if

509
00:28:50,829 --> 00:28:57,178
it finds any and it takes two input

510
00:28:53,769 --> 00:29:00,459
arguments one is the output file of a

511
00:28:57,179 --> 00:29:03,999
fami term relay which is zip demo for

512
00:29:00,459 --> 00:29:09,549
dot txt the other is a password password

513
00:29:03,999 --> 00:29:13,839
file and that concludes my presentation

514
00:29:09,549 --> 00:29:19,329
I left full ten seconds for questions so

515
00:29:13,839 --> 00:29:22,658
if you have anything fired a lot but

516
00:29:19,329 --> 00:29:25,299
thank you if it's a four for your for

517
00:29:22,659 --> 00:29:29,649
your talk ladies and gentlemen another

518
00:29:25,299 --> 00:29:31,869
reminder the slides will be these slides

519
00:29:29,649 --> 00:29:34,508
will be posted immediately or almost

520
00:29:31,869 --> 00:29:36,158
immediately after every talk so do

521
00:29:34,509 --> 00:29:38,399
download them and share them with your

522
00:29:36,159 --> 00:29:38,399
friends

523
00:29:44,820 --> 00:29:46,879
you

