1
00:00:19,330 --> 00:00:26,919
could have to know everyone now I've

2
00:00:23,800 --> 00:00:29,290
started present my presentation here's

3
00:00:26,920 --> 00:00:30,520
the mode Jack hijacking the macros

4
00:00:29,290 --> 00:00:34,360
colonel

5
00:00:30,520 --> 00:00:37,750
but since the title has mentioned a

6
00:00:34,360 --> 00:00:40,449
colonel but our presentation were mainly

7
00:00:37,750 --> 00:00:44,080
not targeting the kernel itself so which

8
00:00:40,449 --> 00:00:47,170
I mean I saw this presentation is and

9
00:00:44,080 --> 00:00:50,349
the Boggess is so unique and that I will

10
00:00:47,170 --> 00:00:53,559
tell you in detail about how how it

11
00:00:50,350 --> 00:00:56,949
works so now first of all please allow

12
00:00:53,559 --> 00:00:59,339
me to introduce myself a little my my

13
00:00:56,949 --> 00:01:07,530
name is George and I came from China and

14
00:00:59,339 --> 00:01:11,229
I currently work at foreign financial

15
00:01:07,530 --> 00:01:15,430
the lights light year security labs of

16
00:01:11,229 --> 00:01:18,310
Alipay and I my daily responsibilities

17
00:01:15,430 --> 00:01:20,710
for the product security and offensive

18
00:01:18,310 --> 00:01:23,530
security research and I have been

19
00:01:20,710 --> 00:01:26,919
acknowledged by oles this companies like

20
00:01:23,530 --> 00:01:29,049
Microsoft Apple Adobe when in VMware so

21
00:01:26,920 --> 00:01:33,939
for reporting security vulnerabilities

22
00:01:29,049 --> 00:01:36,789
and I'm a photo holic and here my block

23
00:01:33,939 --> 00:01:42,428
Twitter handle and my github profile for

24
00:01:36,789 --> 00:01:45,789
you to reach me out now it's the outside

25
00:01:42,429 --> 00:01:48,549
of this topic and first of all we will

26
00:01:45,789 --> 00:01:51,789
introduce a a Mac OS kernel attack

27
00:01:48,549 --> 00:01:54,340
surface is an connect he said attack

28
00:01:51,789 --> 00:01:58,149
surface but not involving the X in you

29
00:01:54,340 --> 00:02:02,350
arrow and then the way you analyze this

30
00:01:58,149 --> 00:02:05,499
the park we used to exploit to gain

31
00:02:02,350 --> 00:02:08,380
kernel privilege the root cause analysis

32
00:02:05,499 --> 00:02:13,299
for the back and then is the exploit

33
00:02:08,380 --> 00:02:16,980
steps and the tricks we using this and

34
00:02:13,300 --> 00:02:21,430
finally Apple did not fix the bug

35
00:02:16,980 --> 00:02:23,319
directly in instead the apple use some

36
00:02:21,430 --> 00:02:26,680
mitigation to make the background

37
00:02:23,319 --> 00:02:28,920
exploitable at all so I will take a look

38
00:02:26,680 --> 00:02:33,840
into this medications

39
00:02:28,920 --> 00:02:40,500
and first of all we have a question why

40
00:02:33,840 --> 00:02:42,870
do we want kernel code execution so the

41
00:02:40,500 --> 00:02:46,500
there's a problem on the latest version

42
00:02:42,870 --> 00:02:50,580
of Mac OS even the process with root

43
00:02:46,500 --> 00:02:52,860
privilege and not sandbox a law it can't

44
00:02:50,580 --> 00:02:55,590
perform particular operations like

45
00:02:52,860 --> 00:02:59,130
writing to some restricted directories

46
00:02:55,590 --> 00:03:03,120
or just attaching the debug the debugger

47
00:02:59,130 --> 00:03:07,079
to a booting process the KX are enforced

48
00:03:03,120 --> 00:03:11,790
and besides the KX are enforced too if

49
00:03:07,080 --> 00:03:17,459
you turn on turn on the rootless the KX

50
00:03:11,790 --> 00:03:21,209
must be must be signed with better

51
00:03:17,459 --> 00:03:24,120
certificates issue from Apple so which

52
00:03:21,209 --> 00:03:27,000
means you cannot just write your own KX

53
00:03:24,120 --> 00:03:32,040
and loaded to the system it will be

54
00:03:27,000 --> 00:03:34,920
blocked and for those malicious

55
00:03:32,040 --> 00:03:39,179
softwares it's better for them to have

56
00:03:34,920 --> 00:03:41,850
kernel privilege if you have those high

57
00:03:39,180 --> 00:03:44,700
privilege you can do something like hide

58
00:03:41,850 --> 00:03:50,340
yourself from the the Activity Monitor

59
00:03:44,700 --> 00:03:52,859
or so so finally the higher privilege

60
00:03:50,340 --> 00:03:56,549
means higher score see if you want to

61
00:03:52,860 --> 00:04:00,420
participate those punishing competitions

62
00:03:56,549 --> 00:04:06,290
so that's what we want for kernel code

63
00:04:00,420 --> 00:04:09,810
execution the general approach for

64
00:04:06,290 --> 00:04:13,560
kernel code privilege is escalation is

65
00:04:09,810 --> 00:04:17,399
to attack the kernel mode drivers or the

66
00:04:13,560 --> 00:04:21,269
X and you ASAP to control the process

67
00:04:17,399 --> 00:04:25,590
counter we are just and then we the

68
00:04:21,269 --> 00:04:28,110
kernel has some its internal functions

69
00:04:25,590 --> 00:04:31,409
to disable as IP in the kernel mode so

70
00:04:28,110 --> 00:04:34,410
this is this is what the general

71
00:04:31,410 --> 00:04:37,500
approach the general approach but

72
00:04:34,410 --> 00:04:42,180
what I'm going to represent today is to

73
00:04:37,500 --> 00:04:44,580
think outside the box is memory

74
00:04:42,180 --> 00:04:48,900
corruption always necessary for this

75
00:04:44,580 --> 00:04:53,550
scenario I mean do we have some logic

76
00:04:48,900 --> 00:04:56,489
box to attack the kernel and the target

77
00:04:53,550 --> 00:04:59,280
have always be the kernel itself or the

78
00:04:56,490 --> 00:05:02,970
kernel mode drivers what what about

79
00:04:59,280 --> 00:05:06,000
attack a user mode process and can we

80
00:05:02,970 --> 00:05:08,250
just just attach this we use a motor

81
00:05:06,000 --> 00:05:12,030
process to gain kernel privilege that

82
00:05:08,250 --> 00:05:14,220
sounds crazy but I will eventually prove

83
00:05:12,030 --> 00:05:19,590
the possibility of this way

84
00:05:14,220 --> 00:05:23,040
and what about useless space SI p bypass

85
00:05:19,590 --> 00:05:25,409
to gain kernel privilege a you see the

86
00:05:23,040 --> 00:05:28,410
general approach is the the other side

87
00:05:25,410 --> 00:05:31,680
to attack kernel to bypass as a si P

88
00:05:28,410 --> 00:05:37,170
what about bypass SI p to attack the

89
00:05:31,680 --> 00:05:41,100
kernel that's that's my so that's the my

90
00:05:37,170 --> 00:05:47,550
approach so I will introduce this kernel

91
00:05:41,100 --> 00:05:51,180
attack surface the old days with there

92
00:05:47,550 --> 00:05:53,250
are some examples by other researchers

93
00:05:51,180 --> 00:05:57,240
that they have patched their KX

94
00:05:53,250 --> 00:06:02,870
under-eye tools to gain kernel code

95
00:05:57,240 --> 00:06:08,720
execution by just load then unsign text

96
00:06:02,870 --> 00:06:12,750
first is the binary Patchen the the kxd

97
00:06:08,720 --> 00:06:15,920
processed by OS 10 reverser in 2013 and

98
00:06:12,750 --> 00:06:20,550
the second is the custom build approach

99
00:06:15,920 --> 00:06:22,920
objective-c in 2015 they post working on

100
00:06:20,550 --> 00:06:26,310
these binaries to patch the critical

101
00:06:22,920 --> 00:06:31,260
logic like the signature check or

102
00:06:26,310 --> 00:06:34,680
something else to load the Evo text but

103
00:06:31,260 --> 00:06:37,530
these two previous researchers have read

104
00:06:34,680 --> 00:06:40,590
they have review a clue that the kernel

105
00:06:37,530 --> 00:06:44,119
codec the signature may be checked by

106
00:06:40,590 --> 00:06:47,890
use of space not the kernel itself and

107
00:06:44,120 --> 00:06:50,930
once you successfully load that

108
00:06:47,890 --> 00:06:52,460
extension with sound signature it means

109
00:06:50,930 --> 00:06:55,460
that there's no doubt that you have

110
00:06:52,460 --> 00:06:57,890
kernel privileges you can already

111
00:06:55,460 --> 00:07:05,060
execute arbitrary code in the kernel

112
00:06:57,890 --> 00:07:08,630
mode the first one he has patched kxt

113
00:07:05,060 --> 00:07:12,820
executable which means but now this

114
00:07:08,630 --> 00:07:15,830
securable is protected by s IP so you so

115
00:07:12,820 --> 00:07:18,260
during that time there was obviously not

116
00:07:15,830 --> 00:07:21,260
rootless file system protection and the

117
00:07:18,260 --> 00:07:24,320
second one it implies that they there

118
00:07:21,260 --> 00:07:27,590
must be some private API for this KX

119
00:07:24,320 --> 00:07:32,000
chores to loading extension to the

120
00:07:27,590 --> 00:07:34,669
kernel a more easeful more recent

121
00:07:32,000 --> 00:07:37,520
examples i'm beer has reported his

122
00:07:34,669 --> 00:07:42,979
prefer concept to gain kernel privilege

123
00:07:37,520 --> 00:07:45,950
while just load and lungs KX without

124
00:07:42,980 --> 00:07:51,440
signature and let's look out look at

125
00:07:45,950 --> 00:07:55,039
Lee's issues that issue 6 676 is a logic

126
00:07:51,440 --> 00:07:58,130
error when executing an essay as you ID

127
00:07:55,040 --> 00:08:02,630
binaries when the allows the code

128
00:07:58,130 --> 00:08:04,669
execution as root on OS 10 or iOS is it

129
00:08:02,630 --> 00:08:07,610
looks like it's just it's just not not

130
00:08:04,669 --> 00:08:10,219
just a privilege excellent escalation

131
00:08:07,610 --> 00:08:14,870
but also it can give you colonel

132
00:08:10,220 --> 00:08:19,150
privilege and the next issue it is also

133
00:08:14,870 --> 00:08:22,610
targeting the kxd he has some dump

134
00:08:19,150 --> 00:08:25,190
problems like bad path checking or ton

135
00:08:22,610 --> 00:08:29,229
of Caetano use to allow the wreck it

136
00:08:25,190 --> 00:08:34,780
also starts from a regular user to

137
00:08:29,229 --> 00:08:39,530
attack a kernel and the issue a 1 5 to 0

138
00:08:34,780 --> 00:08:45,620
that there is a memory corruption in the

139
00:08:39,530 --> 00:08:49,339
KX t is related to let's check out this

140
00:08:45,620 --> 00:08:52,610
sweet issues the the first of the first

141
00:08:49,339 --> 00:08:54,170
two are user mode only and logic not

142
00:08:52,610 --> 00:08:58,190
involve xn Joella

143
00:08:54,170 --> 00:09:00,250
and there's the third one is also user

144
00:08:58,190 --> 00:09:02,889
mode only but it is

145
00:09:00,250 --> 00:09:07,300
memory corruption issue so it will be

146
00:09:02,889 --> 00:09:12,089
slightly different and a little bit

147
00:09:07,300 --> 00:09:16,500
difficult to exploit but you but they

148
00:09:12,089 --> 00:09:20,230
they tells these issues tell us that

149
00:09:16,500 --> 00:09:25,300
arbitrary code execution in this kxd

150
00:09:20,230 --> 00:09:29,620
process EKOS kernel code execution so

151
00:09:25,300 --> 00:09:32,258
this is a huge attack surface but what

152
00:09:29,620 --> 00:09:34,569
there's a problem that there will be a

153
00:09:32,259 --> 00:09:36,970
crash in there what makes this kxt so

154
00:09:34,569 --> 00:09:39,399
special why it can control the kernel

155
00:09:36,970 --> 00:09:43,470
and what a well being and just a use of

156
00:09:39,399 --> 00:09:47,470
space process the correct answer is its

157
00:09:43,470 --> 00:09:51,850
entitlement well it's the entitlement

158
00:09:47,470 --> 00:09:54,250
the entitlement is this this paragraph

159
00:09:51,850 --> 00:09:56,139
is copy from the Apple document the

160
00:09:54,250 --> 00:09:58,509
entitlement is a boundary source

161
00:09:56,139 --> 00:10:00,730
containing key value pairs diagram the

162
00:09:58,509 --> 00:10:04,230
executable permission choose an app

163
00:10:00,730 --> 00:10:11,170
service or technology its form is

164
00:10:04,230 --> 00:10:13,660
realizing plist format which we have

165
00:10:11,170 --> 00:10:15,670
were so familiar with and he will be

166
00:10:13,660 --> 00:10:21,069
embedded in the executables code

167
00:10:15,670 --> 00:10:24,040
signature so we are this this is to

168
00:10:21,069 --> 00:10:27,120
protect that to ensure that these

169
00:10:24,040 --> 00:10:31,449
entitlements can be modified by

170
00:10:27,120 --> 00:10:37,660
untrusted sources because it's founded

171
00:10:31,449 --> 00:10:40,540
with the code signature and some so some

172
00:10:37,660 --> 00:10:42,670
some of us may think since these

173
00:10:40,540 --> 00:10:45,819
entitlements are important we can gain

174
00:10:42,670 --> 00:10:49,260
privilege by just pull this string so

175
00:10:45,819 --> 00:10:51,910
now our executable so why don't we just

176
00:10:49,260 --> 00:10:54,790
sign in custom entitlement like

177
00:10:51,910 --> 00:10:58,959
borrowing the the DOS come to uphold our

178
00:10:54,790 --> 00:11:02,860
private or something to to add in to our

179
00:10:58,959 --> 00:11:04,719
binary but now if you if you tried it it

180
00:11:02,860 --> 00:11:10,060
was we will see that our application

181
00:11:04,720 --> 00:11:12,069
will be cured by a task a deep least in

182
00:11:10,060 --> 00:11:13,619
some of the entitlements are preserved

183
00:11:12,069 --> 00:11:16,349
by Apple if you

184
00:11:13,620 --> 00:11:19,530
trying to sign this in your own binary

185
00:11:16,350 --> 00:11:24,810
it will be killed by at skkt during the

186
00:11:19,530 --> 00:11:29,339
startup so I have read the source code

187
00:11:24,810 --> 00:11:34,439
of chaos t2 and took X nu n KX under I

188
00:11:29,340 --> 00:11:39,000
chose this this graph is so a little bit

189
00:11:34,440 --> 00:11:42,420
complicated when cats if you want to

190
00:11:39,000 --> 00:11:44,640
load n cakes you will type the command K

191
00:11:42,420 --> 00:11:47,310
explode and the command I will try to

192
00:11:44,640 --> 00:11:50,730
communicate with calm down Apple dot

193
00:11:47,310 --> 00:11:54,680
kernel extension server this server is

194
00:11:50,730 --> 00:11:57,780
the kxd then trigger the energy routine

195
00:11:54,680 --> 00:12:00,689
this under I text manager underlying

196
00:11:57,780 --> 00:12:03,120
load under ikx to perform several checks

197
00:12:00,690 --> 00:12:06,390
like the profile permissions system

198
00:12:03,120 --> 00:12:08,370
policies and file location and can

199
00:12:06,390 --> 00:12:10,880
finally send the request to the X and

200
00:12:08,370 --> 00:12:13,740
you for the for the kernel to love that

201
00:12:10,880 --> 00:12:16,380
but despite the complexity of this graph

202
00:12:13,740 --> 00:12:20,390
I just want to point out a serial

203
00:12:16,380 --> 00:12:25,500
problem a serious problem that the truth

204
00:12:20,390 --> 00:12:28,319
on Mac OS $10 13.6 the code signature of

205
00:12:25,500 --> 00:12:29,180
these extensions are checked by use of

206
00:12:28,320 --> 00:12:33,630
space

207
00:12:29,180 --> 00:12:36,689
the kernel just simply check so let's

208
00:12:33,630 --> 00:12:39,420
just mute the other side the only thing

209
00:12:36,690 --> 00:12:41,880
that kernel cares is that the court the

210
00:12:39,420 --> 00:12:45,360
color process has the come the Apple

211
00:12:41,880 --> 00:12:50,240
doll ruthless torque ax secure slash

212
00:12:45,360 --> 00:12:55,370
management these entitlements and wasn't

213
00:12:50,240 --> 00:13:01,230
so there's a command-line tool the jato

214
00:12:55,370 --> 00:13:04,170
by the famous researcher and by the

215
00:13:01,230 --> 00:13:07,130
famous researcher Jonas and Levin and we

216
00:13:04,170 --> 00:13:10,709
will check included the kxd the

217
00:13:07,130 --> 00:13:12,990
entitlement while it's is so special

218
00:13:10,710 --> 00:13:19,260
I've highlight to two of the

219
00:13:12,990 --> 00:13:24,350
entitlements on the tax the number one

220
00:13:19,260 --> 00:13:24,350
is to the counter Apple ruthless dark ax

221
00:13:24,700 --> 00:13:31,190
slash Sakura slashing management it is

222
00:13:28,040 --> 00:13:34,040
this entitlement to the privilege to ask

223
00:13:31,190 --> 00:13:36,980
Colonel to load an extension where that

224
00:13:34,040 --> 00:13:43,069
cast under our request function and the

225
00:13:36,980 --> 00:13:45,890
second one is the SRP related for this

226
00:13:43,070 --> 00:13:51,010
executable can have write assessed to

227
00:13:45,890 --> 00:13:56,750
this specific location a library slash

228
00:13:51,010 --> 00:13:59,750
tax large stage extensions and actually

229
00:13:56,750 --> 00:14:04,130
there are three binaries they have list

230
00:13:59,750 --> 00:14:07,370
entitlement not just the kxt both the

231
00:14:04,130 --> 00:14:09,620
cakes low caste load and cares you chew

232
00:14:07,370 --> 00:14:16,760
they also have these earliest in

233
00:14:09,620 --> 00:14:19,100
tournaments so the so actually all the

234
00:14:16,760 --> 00:14:24,110
checks that are performing are performed

235
00:14:19,100 --> 00:14:26,840
by live binaries during famine and that

236
00:14:24,110 --> 00:14:31,310
implemented in this function all

237
00:14:26,840 --> 00:14:31,940
syndicated KXT and if you check the file

238
00:14:31,310 --> 00:14:34,250
permission

239
00:14:31,940 --> 00:14:36,170
he must be owned by the root and not

240
00:14:34,250 --> 00:14:37,250
writable by other groups and he will

241
00:14:36,170 --> 00:14:40,459
check the signature

242
00:14:37,250 --> 00:14:43,790
he must be signed by a valid valid issue

243
00:14:40,460 --> 00:14:46,460
from a valid certificate from Apple and

244
00:14:43,790 --> 00:14:48,770
during the loading process the bundle

245
00:14:46,460 --> 00:14:52,880
must be staged to a protected location

246
00:14:48,770 --> 00:14:55,120
so this is to ensure that when when a

247
00:14:52,880 --> 00:14:58,430
kernel extension has been loaded and and

248
00:14:55,120 --> 00:15:03,190
other Road out of process had have Road

249
00:14:58,430 --> 00:15:06,859
privilege can modify this driver and

250
00:15:03,190 --> 00:15:09,980
this is the another entitlement were

251
00:15:06,860 --> 00:15:13,130
worried for what it is for and then you

252
00:15:09,980 --> 00:15:16,190
will invoke some inter process

253
00:15:13,130 --> 00:15:19,970
communication with system policy T to

254
00:15:16,190 --> 00:15:23,540
ask user to approve for approval to load

255
00:15:19,970 --> 00:15:26,780
a signature this is the user approved

256
00:15:23,540 --> 00:15:32,270
kernel extension loading or that soco

257
00:15:26,780 --> 00:15:35,270
ske l and most important is that if as I

258
00:15:32,270 --> 00:15:38,210
have you have disabled as IP all these

259
00:15:35,270 --> 00:15:42,329
checks will be piped skip

260
00:15:38,210 --> 00:15:45,500
except a file permission one so what

261
00:15:42,330 --> 00:15:47,730
exactly is the ske elf

262
00:15:45,500 --> 00:15:54,960
Apple has introduced this security

263
00:15:47,730 --> 00:15:59,780
measure to protect this one this one

264
00:15:54,960 --> 00:16:03,270
scenario that if a third-party KX has

265
00:15:59,780 --> 00:16:05,730
over ssin with known vulnerabilities and

266
00:16:03,270 --> 00:16:08,900
the attacker may be able to load this

267
00:16:05,730 --> 00:16:11,430
extension and attacked sir party

268
00:16:08,900 --> 00:16:14,819
vulnerabilities so if you're trying to

269
00:16:11,430 --> 00:16:19,229
load an extension even with the

270
00:16:14,820 --> 00:16:21,930
signature the apple will show this

271
00:16:19,230 --> 00:16:27,360
dialog to ask you sir if you ever want

272
00:16:21,930 --> 00:16:30,839
to load this and this interface is also

273
00:16:27,360 --> 00:16:34,440
also manageable use of space and not xnu

274
00:16:30,840 --> 00:16:37,710
itself in a database there was a data

275
00:16:34,440 --> 00:16:39,780
base in this specific location and this

276
00:16:37,710 --> 00:16:42,870
database is protected by s IP as well

277
00:16:39,780 --> 00:16:48,329
even the road permission is insufficient

278
00:16:42,870 --> 00:16:50,730
to modify the rules and inside the KS k

279
00:16:48,330 --> 00:16:53,870
XD we have this we'll call these

280
00:16:50,730 --> 00:16:57,150
functions when you're trying to load a

281
00:16:53,870 --> 00:17:00,440
load an extension it will check the

282
00:16:57,150 --> 00:17:04,139
system policy Wow well a function named

283
00:17:00,440 --> 00:17:07,730
SP kernel extension policy can load

284
00:17:04,140 --> 00:17:10,560
kernel extension even internally

285
00:17:07,730 --> 00:17:14,160
communicates with system policy D while

286
00:17:10,560 --> 00:17:16,829
course PC and system Felicity will make

287
00:17:14,160 --> 00:17:22,110
the decision based on these rules in the

288
00:17:16,829 --> 00:17:26,849
SQLite database so if we want to bypass

289
00:17:22,109 --> 00:17:29,310
this security feature the skl we can do

290
00:17:26,849 --> 00:17:33,320
any one of the following a first one

291
00:17:29,310 --> 00:17:38,159
versus the you can code execution on the

292
00:17:33,320 --> 00:17:40,950
rootless entitled process a true is to

293
00:17:38,160 --> 00:17:43,830
inject your custom route to the system

294
00:17:40,950 --> 00:17:47,700
to the KX policy database that SQLite

295
00:17:43,830 --> 00:17:49,889
database and another place another way

296
00:17:47,700 --> 00:17:50,880
is to get a task power of system policy

297
00:17:49,890 --> 00:17:54,570
T and to

298
00:17:50,880 --> 00:17:57,570
to patch this specific method you can

299
00:17:54,570 --> 00:18:00,809
force it to always return true so are

300
00:17:57,570 --> 00:18:03,928
always written yes so the all the checks

301
00:18:00,809 --> 00:18:06,470
will be bypassed and the third one the

302
00:18:03,929 --> 00:18:13,049
third way is to get the test pole of KSD

303
00:18:06,470 --> 00:18:16,230
we can patch the list function to just

304
00:18:13,049 --> 00:18:19,470
return at the same just returned yes and

305
00:18:16,230 --> 00:18:23,100
all and the system policy city will

306
00:18:19,470 --> 00:18:28,200
never get any messages from kxd so the

307
00:18:23,100 --> 00:18:31,649
check will not never happen so here's

308
00:18:28,200 --> 00:18:34,470
the logic Canora text service as the

309
00:18:31,650 --> 00:18:36,750
surface neither the signal nature or nor

310
00:18:34,470 --> 00:18:41,850
fan permission is checked by the kernel

311
00:18:36,750 --> 00:18:46,380
so all we want or we need to rue is the

312
00:18:41,850 --> 00:18:48,870
entitlement and in to use the space

313
00:18:46,380 --> 00:18:51,320
process this read are responsible to

314
00:18:48,870 --> 00:18:55,049
perform the signature and other

315
00:18:51,320 --> 00:18:59,789
validation so if we have some user space

316
00:18:55,049 --> 00:19:03,658
IPC park or anything we can control the

317
00:18:59,789 --> 00:19:07,970
the process counter of lee's read these

318
00:19:03,659 --> 00:19:10,830
refineries we can have that entitlement

319
00:19:07,970 --> 00:19:16,320
once you have was your own entitlement

320
00:19:10,830 --> 00:19:19,620
you wrote the kernel so we can simplify

321
00:19:16,320 --> 00:19:23,789
this problem from attacked in the axon

322
00:19:19,620 --> 00:19:26,760
you to getting the task port of these

323
00:19:23,789 --> 00:19:29,070
entitlement entitled process and once

324
00:19:26,760 --> 00:19:31,950
you have the task port if you have

325
00:19:29,070 --> 00:19:34,889
experience on programming on Mac or iOS

326
00:19:31,950 --> 00:19:36,630
you have the task poor you can rule the

327
00:19:34,890 --> 00:19:41,070
process you can control it to do

328
00:19:36,630 --> 00:19:44,940
anything you want so here's my approach

329
00:19:41,070 --> 00:19:46,620
to hijack the entitlement so here we

330
00:19:44,940 --> 00:19:49,789
have to do some background research

331
00:19:46,620 --> 00:19:52,830
follow TL head jacking on Windows

332
00:19:49,789 --> 00:19:57,270
there's a known security issue the

333
00:19:52,830 --> 00:19:59,639
security measure name UAC so when we're

334
00:19:57,270 --> 00:20:02,280
trying to install something something

335
00:19:59,640 --> 00:20:03,660
required the privilege we will trigger

336
00:20:02,280 --> 00:20:09,480
the prompt

337
00:20:03,660 --> 00:20:11,970
and it's kinda like sa su ID when you

338
00:20:09,480 --> 00:20:15,000
want to do something with privilege you

339
00:20:11,970 --> 00:20:17,340
can type as you do or and then type the

340
00:20:15,000 --> 00:20:19,350
password but on Windows you all all you

341
00:20:17,340 --> 00:20:24,689
have to do is simply click the on the

342
00:20:19,350 --> 00:20:29,429
yes though so there is a no attack that

343
00:20:24,690 --> 00:20:33,170
you can hijack the DLL wherever well in

344
00:20:29,430 --> 00:20:36,360
portable or dynamic load library cause

345
00:20:33,170 --> 00:20:39,840
to inject the payload into the untrusted

346
00:20:36,360 --> 00:20:44,750
binary and here's is the code snippet

347
00:20:39,840 --> 00:20:48,570
from leak source from a real trillion

348
00:20:44,750 --> 00:20:51,300
that if you performed the DLL hijacking

349
00:20:48,570 --> 00:20:57,419
to bypass through you at the UAC prompt

350
00:20:51,300 --> 00:21:01,530
to get the higher privilege so my

351
00:20:57,420 --> 00:21:05,010
approach is where is similar I want to

352
00:21:01,530 --> 00:21:09,780
use Talib hijack to steal entitlement

353
00:21:05,010 --> 00:21:13,640
from these opposing binaries so there

354
00:21:09,780 --> 00:21:18,480
are some non Tenex for delayed hijacking

355
00:21:13,640 --> 00:21:20,600
first is the LC underlying load

356
00:21:18,480 --> 00:21:24,710
underlying weak on the right that leap

357
00:21:20,600 --> 00:21:29,399
this load is special load command is one

358
00:21:24,710 --> 00:21:34,590
is one of the perform perform eight in

359
00:21:29,400 --> 00:21:39,480
the Metro executable when it is a point

360
00:21:34,590 --> 00:21:42,360
it has a relative at our pass and you it

361
00:21:39,480 --> 00:21:46,920
have this load command if you're trying

362
00:21:42,360 --> 00:21:53,610
to locate delayed with the spacing our

363
00:21:46,920 --> 00:21:58,860
path and to load and untrusted dilate

364
00:21:53,610 --> 00:22:01,889
outside the binaries pass the and the

365
00:21:58,860 --> 00:22:07,560
rest of these Tenex are actually the

366
00:22:01,890 --> 00:22:11,220
same they tell all dynamical module

367
00:22:07,560 --> 00:22:14,429
loading like they are open or that those

368
00:22:11,220 --> 00:22:17,160
around oh all safe no matter what an

369
00:22:14,430 --> 00:22:20,299
expander or safe one the way uses

370
00:22:17,160 --> 00:22:25,140
the internal we always call the DL open

371
00:22:20,299 --> 00:22:27,840
to just loaded module and if we control

372
00:22:25,140 --> 00:22:30,419
the module loads we will have we will

373
00:22:27,840 --> 00:22:34,439
share the the entitlement for the host

374
00:22:30,419 --> 00:22:38,640
process now here is the bug I found with

375
00:22:34,440 --> 00:22:40,169
my my my-my-my search engine I will

376
00:22:38,640 --> 00:22:43,500
introducing at the end of this

377
00:22:40,169 --> 00:22:45,990
presentation there's a there's a

378
00:22:43,500 --> 00:22:48,720
framework called course in publication

379
00:22:45,990 --> 00:22:52,470
it will provide some probably api's for

380
00:22:48,720 --> 00:23:00,720
symbolic ating and other Technic techno

381
00:22:52,470 --> 00:23:04,140
strict informations and here's the

382
00:23:00,720 --> 00:23:07,440
typical craft report for from mac OS or

383
00:23:04,140 --> 00:23:10,620
OS if you if your application crash ever

384
00:23:07,440 --> 00:23:15,539
crashes it will receive the logs from it

385
00:23:10,620 --> 00:23:19,469
and it was you will have to contacts and

386
00:23:15,539 --> 00:23:22,950
call stacks and the stacks are symbolic

387
00:23:19,470 --> 00:23:26,190
ated in this report you can see the the

388
00:23:22,950 --> 00:23:27,830
symbol inside so this simple equation is

389
00:23:26,190 --> 00:23:37,409
simply before performed by this

390
00:23:27,830 --> 00:23:39,799
framework and here's some the compiled

391
00:23:37,409 --> 00:23:43,140
code from the Horsham publication and

392
00:23:39,799 --> 00:23:47,158
the function core on the line external

393
00:23:43,140 --> 00:23:50,610
underline Ida mango you will see from

394
00:23:47,159 --> 00:23:54,570
the screen daddy has some heart some

395
00:23:50,610 --> 00:23:59,340
passes inside there are actually four

396
00:23:54,570 --> 00:24:01,678
they are open cost and what it's the

397
00:23:59,340 --> 00:24:06,000
most interesting is that the last one

398
00:24:01,679 --> 00:24:09,360
they are open the argument of this if

399
00:24:06,000 --> 00:24:13,039
the open call is dynamically which means

400
00:24:09,360 --> 00:24:16,080
it is insecure we can trigger an

401
00:24:13,039 --> 00:24:22,559
interesting dilated hijack in this

402
00:24:16,080 --> 00:24:26,010
branch inside a will when handling those

403
00:24:22,559 --> 00:24:28,379
Swift binaries if you call various an

404
00:24:26,010 --> 00:24:30,510
external function to demand go the name

405
00:24:28,380 --> 00:24:32,929
do you know that him the name de

406
00:24:30,510 --> 00:24:32,929
mangling

407
00:24:34,360 --> 00:24:42,979
when you're handling the C++ programs or

408
00:24:39,159 --> 00:24:45,260
all the sweet wrong time you will have

409
00:24:42,980 --> 00:24:48,770
some special charts on this the function

410
00:24:45,260 --> 00:24:50,629
name which is not supported so if there

411
00:24:48,770 --> 00:24:54,080
is a process called de mangling and

412
00:24:50,630 --> 00:24:56,390
mangling swirl by the compiler to

413
00:24:54,080 --> 00:24:57,080
transform the symbol name to another

414
00:24:56,390 --> 00:25:00,830
phone

415
00:24:57,080 --> 00:25:03,678
so the demand going is to recover the

416
00:25:00,830 --> 00:25:05,809
original symbol name and you will the

417
00:25:03,679 --> 00:25:09,230
the core symbolic ation framework will

418
00:25:05,809 --> 00:25:11,270
search these lips with lab swift swift

419
00:25:09,230 --> 00:25:15,409
demongo dilate in the following

420
00:25:11,270 --> 00:25:18,590
directories yes for directory and we can

421
00:25:15,409 --> 00:25:23,600
notice from the last one is a dynamic

422
00:25:18,590 --> 00:25:26,539
dynamically constructed path we will it

423
00:25:23,600 --> 00:25:29,629
will be conquered by a string returned

424
00:25:26,539 --> 00:25:33,010
by this XC select under I get developer

425
00:25:29,630 --> 00:25:35,900
underline there are under I pass and

426
00:25:33,010 --> 00:25:38,440
this one the internally of this function

427
00:25:35,900 --> 00:25:41,000
will check if the there is an

428
00:25:38,440 --> 00:25:45,409
environment variable called developer

429
00:25:41,000 --> 00:25:50,030
underlined down if we ever exist the

430
00:25:45,409 --> 00:25:53,299
value will be returned so we can simply

431
00:25:50,030 --> 00:25:56,210
set this environment during the process

432
00:25:53,299 --> 00:26:00,830
creation to chain to control the pass

433
00:25:56,210 --> 00:26:03,559
that of the last di open calls but how

434
00:26:00,830 --> 00:26:08,750
do we reach the last branch we can see

435
00:26:03,559 --> 00:26:14,120
that there are actually four libraries

436
00:26:08,750 --> 00:26:17,870
here and how do we reach this branch the

437
00:26:14,120 --> 00:26:22,520
first pass is this dispense it actually

438
00:26:17,870 --> 00:26:27,168
already exists on hi Syria so I have a

439
00:26:22,520 --> 00:26:29,840
crazy idea is that too since it is a

440
00:26:27,169 --> 00:26:33,590
already exist but we have another

441
00:26:29,840 --> 00:26:37,730
approach to use to abuse the sandbox to

442
00:26:33,590 --> 00:26:40,549
cancel the the read assess so it cannot

443
00:26:37,730 --> 00:26:44,299
success so when he cannot read from this

444
00:26:40,549 --> 00:26:46,999
location absolutely won't the

445
00:26:44,299 --> 00:26:50,029
that they are open once assist so to

446
00:26:46,999 --> 00:26:52,549
enforced it to load our evil payload we

447
00:26:50,029 --> 00:26:56,089
can apply a custom sandbox profile

448
00:26:52,549 --> 00:26:59,029
before spanning the entitled binary and

449
00:26:56,089 --> 00:27:02,629
we can deny the file read permission for

450
00:26:59,029 --> 00:27:06,409
this list locations and the evil reached

451
00:27:02,629 --> 00:27:08,359
if you finally reach the last branch so

452
00:27:06,409 --> 00:27:11,749
this is so this is the most interesting

453
00:27:08,359 --> 00:27:15,408
part of this exploit that we all know

454
00:27:11,749 --> 00:27:18,529
that sandbox itself is supposed to be an

455
00:27:15,409 --> 00:27:23,149
security mediate mitigation to protected

456
00:27:18,529 --> 00:27:31,039
end-user but in this interesting case it

457
00:27:23,149 --> 00:27:33,820
is our key point for the exploit now we

458
00:27:31,039 --> 00:27:36,529
all we have to do is to find a host

459
00:27:33,820 --> 00:27:39,649
since we have the dinette that I live

460
00:27:36,529 --> 00:27:43,429
hijack Park we we will need a powerful

461
00:27:39,649 --> 00:27:45,978
host to have the entitlements have the

462
00:27:43,429 --> 00:27:48,320
internment we want so the binary must

463
00:27:45,979 --> 00:27:50,450
have some this special entitlement that

464
00:27:48,320 --> 00:27:53,178
are privileged enough and have at least

465
00:27:50,450 --> 00:27:56,809
one code has to trigger that hijacking

466
00:27:53,179 --> 00:27:58,700
so I have found this magical entitlement

467
00:27:56,809 --> 00:28:02,059
called Apple counter Apple thought

468
00:27:58,700 --> 00:28:05,389
system task pause with this int element

469
00:28:02,059 --> 00:28:09,139
we we have we have mentioned before that

470
00:28:05,389 --> 00:28:12,649
on the latest Mac OS we cannot debug the

471
00:28:09,139 --> 00:28:15,408
internal process by Apple but with this

472
00:28:12,649 --> 00:28:18,468
entitlement we can't obtain the task

473
00:28:15,409 --> 00:28:23,359
port from every user mode process even

474
00:28:18,469 --> 00:28:25,959
those restricted and from this point if

475
00:28:23,359 --> 00:28:29,349
since we have the task port we will gain

476
00:28:25,959 --> 00:28:32,089
arbitrary entitlement anything we want

477
00:28:29,349 --> 00:28:35,450
and here's the screenshot I wrote a

478
00:28:32,089 --> 00:28:40,549
little search engine for the search in

479
00:28:35,450 --> 00:28:43,549
such targets and then this tears our

480
00:28:40,549 --> 00:28:45,918
entitled host the sampling tools they

481
00:28:43,549 --> 00:28:47,989
are designed to for check in the

482
00:28:45,919 --> 00:28:50,539
performance of an application those

483
00:28:47,989 --> 00:28:53,450
information will like memory leaks heap

484
00:28:50,539 --> 00:28:58,060
your search and virtual memory mapping

485
00:28:53,450 --> 00:29:00,520
or string usage etc to to obtain the

486
00:28:58,060 --> 00:29:03,520
mission film those Apple dos booting

487
00:29:00,520 --> 00:29:06,070
process this truth must be privileged

488
00:29:03,520 --> 00:29:09,060
enough to be able to attach this process

489
00:29:06,070 --> 00:29:13,060
so let's check the entitlement of VN map

490
00:29:09,060 --> 00:29:16,179
so you can see only highlight the red

491
00:29:13,060 --> 00:29:18,220
line from the red line from this snippet

492
00:29:16,180 --> 00:29:20,680
it all still calm down

493
00:29:18,220 --> 00:29:24,970
this special entitlement so we can

494
00:29:20,680 --> 00:29:27,010
attach to any process they want so what

495
00:29:24,970 --> 00:29:30,340
about when we gain this entitlement and

496
00:29:27,010 --> 00:29:34,210
attach the kxd well what we've happened

497
00:29:30,340 --> 00:29:36,699
next but there are here's the scenario

498
00:29:34,210 --> 00:29:39,790
of our exploit the function tasks under

499
00:29:36,700 --> 00:29:44,200
iPhone under I'm PID requests the same

500
00:29:39,790 --> 00:29:47,100
UI T so we cannot just run as a regular

501
00:29:44,200 --> 00:29:51,550
user and attach to a root process to

502
00:29:47,100 --> 00:29:54,699
perform a privilege escalation but if we

503
00:29:51,550 --> 00:29:57,580
are post route and the difference is

504
00:29:54,700 --> 00:30:01,240
that my root process is now in title and

505
00:29:57,580 --> 00:30:07,270
this another one is entitled we can use

506
00:30:01,240 --> 00:30:11,260
this this attack to bypass the as IP to

507
00:30:07,270 --> 00:30:15,430
inject to Apple binaries and to perform

508
00:30:11,260 --> 00:30:18,550
further post exploitation for example

509
00:30:15,430 --> 00:30:20,770
here is another interesting entitlement

510
00:30:18,550 --> 00:30:23,860
there come toreador ruthless knowings

511
00:30:20,770 --> 00:30:29,020
dot dot heritable you can it can assess

512
00:30:23,860 --> 00:30:30,459
those route is restricted files and the

513
00:30:29,020 --> 00:30:32,920
most interesting is that this

514
00:30:30,460 --> 00:30:35,470
entitlement is inherited by this trial

515
00:30:32,920 --> 00:30:38,770
process which means you can just spawn a

516
00:30:35,470 --> 00:30:44,160
new shell this new sha is the the SRP

517
00:30:38,770 --> 00:30:47,170
for this new job is totally off now we

518
00:30:44,160 --> 00:30:50,800
now it's time to try get about when a

519
00:30:47,170 --> 00:30:53,410
target process has this Swift runtime we

520
00:30:50,800 --> 00:30:57,070
we can simply tie the use this command

521
00:30:53,410 --> 00:31:01,780
symbols to PID and to ask you to print

522
00:30:57,070 --> 00:31:04,149
and add this flat print the mangling if

523
00:31:01,780 --> 00:31:07,870
the target process has sweet has sweet

524
00:31:04,150 --> 00:31:10,240
run time if you even having and install

525
00:31:07,870 --> 00:31:11,830
anything you can just compile hello

526
00:31:10,240 --> 00:31:14,470
words we have

527
00:31:11,830 --> 00:31:18,129
then he will trigger the call external

528
00:31:14,470 --> 00:31:20,740
external demand goal function and with

529
00:31:18,129 --> 00:31:22,658
the previous sandbox cheek we can

530
00:31:20,740 --> 00:31:27,340
successfully fool the process to load

531
00:31:22,659 --> 00:31:29,950
our evil payload and here's the their

532
00:31:27,340 --> 00:31:32,139
cost AK I put a grade point on the DL

533
00:31:29,950 --> 00:31:36,820
open and he successfully triggered this

534
00:31:32,139 --> 00:31:40,240
pass but there are one more there is one

535
00:31:36,820 --> 00:31:44,110
more problem that when we try to trigger

536
00:31:40,240 --> 00:31:48,100
the hijack it the process crashes so

537
00:31:44,110 --> 00:31:51,149
what's going on after figuring now as I

538
00:31:48,100 --> 00:31:53,889
saw this from the crash log that is the

539
00:31:51,149 --> 00:31:56,229
the exception type because it tell us

540
00:31:53,889 --> 00:32:00,340
that the crash is because of the code

541
00:31:56,230 --> 00:32:02,230
signature is invalid so did so actually

542
00:32:00,340 --> 00:32:04,240
there are special flex for code

543
00:32:02,230 --> 00:32:07,419
signature one of them is the library

544
00:32:04,240 --> 00:32:11,440
validation if a binary is sign with this

545
00:32:07,419 --> 00:32:14,080
flag it can only load those tiny pellets

546
00:32:11,440 --> 00:32:18,700
signed by the same king identifier or

547
00:32:14,080 --> 00:32:22,480
signed by the Apple so the sandbox

548
00:32:18,700 --> 00:32:27,759
thought KX has registration code back on

549
00:32:22,480 --> 00:32:30,610
the MF Cisco so when we try to violate

550
00:32:27,759 --> 00:32:35,200
this library validation like to tear

551
00:32:30,610 --> 00:32:39,459
open and unsigned an invalid dynamic

552
00:32:35,200 --> 00:32:42,340
hole a library it will be killed by the

553
00:32:39,460 --> 00:32:48,009
kernel immediately so the process

554
00:32:42,340 --> 00:32:51,789
crashes but I have here's a here's the

555
00:32:48,009 --> 00:32:56,440
world I am old but not obsolete said a

556
00:32:51,789 --> 00:33:00,240
terminator let's take a look at the

557
00:32:56,440 --> 00:33:03,240
previous OS 10 release on l captain I

558
00:33:00,240 --> 00:33:07,960
have checked this panel

559
00:33:03,240 --> 00:33:11,710
this one is founded at the high serie it

560
00:33:07,960 --> 00:33:15,369
is it has the special flag but when we

561
00:33:11,710 --> 00:33:18,639
have a look on the elcapitan the flag is

562
00:33:15,369 --> 00:33:20,320
0 which means it will not be protected

563
00:33:18,639 --> 00:33:23,229
from loading untrusted external

564
00:33:20,320 --> 00:33:24,678
libraries and after all the binary is

565
00:33:23,230 --> 00:33:27,769
sign with the entitlement

566
00:33:24,679 --> 00:33:29,840
officially from the Apple so why not

567
00:33:27,769 --> 00:33:36,470
just copy through the latest macaronis

568
00:33:29,840 --> 00:33:40,759
and exploit is the steps first craft

569
00:33:36,470 --> 00:33:44,389
craft is evil lime sweeps the mango die

570
00:33:40,759 --> 00:33:47,860
label and then apply the sand casting

571
00:33:44,389 --> 00:33:51,529
sandbox profound to drop the DSS to the

572
00:33:47,860 --> 00:33:54,229
internal libraries and then trust we can

573
00:33:51,529 --> 00:33:58,159
set the environment we're about to

574
00:33:54,230 --> 00:34:01,610
control the pass and then copy this old

575
00:33:58,159 --> 00:34:06,440
binary from the OS 10 and spawn this

576
00:34:01,610 --> 00:34:09,020
process to trigger the hijacking and now

577
00:34:06,440 --> 00:34:12,530
that there's a second stage payload then

578
00:34:09,020 --> 00:34:15,409
live swift swift a mango dollop will be

579
00:34:12,530 --> 00:34:18,379
loaded into the entitled process who can

580
00:34:15,409 --> 00:34:20,569
call this task for PID for a restricted

581
00:34:18,379 --> 00:34:25,219
process in OP obtain arbitrary

582
00:34:20,569 --> 00:34:30,799
entitlement here's our The Crow graph

583
00:34:25,219 --> 00:34:33,500
our SI p bypass first we really prepare

584
00:34:30,799 --> 00:34:35,989
something like the sandbox profile and

585
00:34:33,500 --> 00:34:38,239
drop the tail the second stage payload

586
00:34:35,989 --> 00:34:42,469
and set the environment then we can

587
00:34:38,239 --> 00:34:46,219
proceed spawn this Swift app to as the

588
00:34:42,469 --> 00:34:51,259
target for the symbols commander now we

589
00:34:46,219 --> 00:34:54,578
can kick-start as IP entitled process

590
00:34:51,260 --> 00:34:58,430
like there's this disk manager Minh did

591
00:34:54,579 --> 00:35:01,670
he has the install thought inheritable

592
00:34:58,430 --> 00:35:04,940
entitlement which can give us a total

593
00:35:01,670 --> 00:35:11,030
shell that with totally shut down the s

594
00:35:04,940 --> 00:35:14,089
IP now we can the step three is trooper

595
00:35:11,030 --> 00:35:15,440
six pound the the the symbols binary

596
00:35:14,089 --> 00:35:20,058
copy from the elcapitan

597
00:35:15,440 --> 00:35:22,130
it is entitled so now let's trying to op

598
00:35:20,059 --> 00:35:25,579
obtained symbol information to trigger

599
00:35:22,130 --> 00:35:29,049
the hijack now a trigger the nothing is

600
00:35:25,579 --> 00:35:31,869
secured they are open is trigger and our

601
00:35:29,049 --> 00:35:35,620
our payload will perform those

602
00:35:31,869 --> 00:35:39,790
processing ejection to two

603
00:35:35,620 --> 00:35:41,830
stood that entitlement then Spanish

604
00:35:39,790 --> 00:35:45,130
Elvis is IP or right to those a

605
00:35:41,830 --> 00:35:48,279
restricted location and now s IP is

606
00:35:45,130 --> 00:35:51,310
totally bypassed but what we want is the

607
00:35:48,280 --> 00:35:54,640
Konami privilege so from the user space

608
00:35:51,310 --> 00:35:58,540
to the kernel you must be you must

609
00:35:54,640 --> 00:36:01,210
remember the the graph I I posted a few

610
00:35:58,540 --> 00:36:05,380
million years ago so let's change the

611
00:36:01,210 --> 00:36:10,090
target to kick-start this another Mac

612
00:36:05,380 --> 00:36:13,090
service the kxd we can use the same

613
00:36:10,090 --> 00:36:17,800
approach to gain attack to get a test

614
00:36:13,090 --> 00:36:22,030
poll on and together to control the kxt

615
00:36:17,800 --> 00:36:24,790
so since the kekstee is not library it

616
00:36:22,030 --> 00:36:27,730
has no library validation we can just

617
00:36:24,790 --> 00:36:31,930
use some Oscar talib injection to

618
00:36:27,730 --> 00:36:36,730
control the process then we can directly

619
00:36:31,930 --> 00:36:39,180
ask the colonel to load our KX then we

620
00:36:36,730 --> 00:36:43,090
have two plans here 10a is to use the

621
00:36:39,180 --> 00:36:46,270
directory cut use this KX underlie

622
00:36:43,090 --> 00:36:50,620
request to send a crafted packet this

623
00:36:46,270 --> 00:36:54,850
MKX packet and Plan B is true we are so

624
00:36:50,620 --> 00:36:58,210
lazy week when we manually craft this

625
00:36:54,850 --> 00:37:01,360
package we main handle with so many data

626
00:36:58,210 --> 00:37:03,670
structures and when we are so used but

627
00:37:01,360 --> 00:37:06,820
but I'm so too late too late did you do

628
00:37:03,670 --> 00:37:10,380
that so rather patch some critical

629
00:37:06,820 --> 00:37:13,660
checks and then call call its internal

630
00:37:10,380 --> 00:37:17,230
functions to compose the packet so what

631
00:37:13,660 --> 00:37:20,440
does the packet look like the packet

632
00:37:17,230 --> 00:37:22,750
starts with the the MKX to underlie

633
00:37:20,440 --> 00:37:25,660
header and he hosts a learns and checks

634
00:37:22,750 --> 00:37:29,680
on version or CBO type fears and the

635
00:37:25,660 --> 00:37:33,730
think out of the bundles the bundle is

636
00:37:29,680 --> 00:37:37,509
in another structure followed and this

637
00:37:33,730 --> 00:37:38,100
structure can the bundle can have multi

638
00:37:37,510 --> 00:37:42,420
pal

639
00:37:38,100 --> 00:37:45,950
in one MKX packet you can have multiple

640
00:37:42,420 --> 00:37:51,349
bundles in same packet

641
00:37:45,950 --> 00:37:53,990
and by the end there's a police which is

642
00:37:51,349 --> 00:37:56,710
the metadata of their caste like the

643
00:37:53,990 --> 00:38:02,839
bundle ID and the kernel dependencies

644
00:37:56,710 --> 00:38:05,569
then some probably list but that you can

645
00:38:02,839 --> 00:38:10,578
see this format is pretty complicated so

646
00:38:05,569 --> 00:38:13,579
I preferred plan B is the there's lady

647
00:38:10,579 --> 00:38:16,030
solution we can simply patch those use

648
00:38:13,579 --> 00:38:18,950
of space checks like signature

649
00:38:16,030 --> 00:38:21,410
validation and the staging what is

650
00:38:18,950 --> 00:38:23,390
station station is that we have

651
00:38:21,410 --> 00:38:25,520
mentioned before that we when we trying

652
00:38:23,390 --> 00:38:27,740
to load an extension we must be put

653
00:38:25,520 --> 00:38:30,319
through some be put to some secure

654
00:38:27,740 --> 00:38:33,109
location to encase the other process

655
00:38:30,319 --> 00:38:37,099
that to modify the the loaded extension

656
00:38:33,109 --> 00:38:40,520
so the least you check these two checks

657
00:38:37,099 --> 00:38:43,010
can we finally reach the CSR on the

658
00:38:40,520 --> 00:38:47,299
right check function you will tell the

659
00:38:43,010 --> 00:38:50,420
program that the states of si P so we

660
00:38:47,299 --> 00:38:54,400
simply patch this CSR check to tell the

661
00:38:50,420 --> 00:38:57,619
CAC state that rootless is off now and

662
00:38:54,400 --> 00:39:00,200
then the SKA I'll patch ADA Stella

663
00:38:57,619 --> 00:39:03,559
bypass we have mentioned before they

664
00:39:00,200 --> 00:39:06,618
simply use some objective-c meses

665
00:39:03,559 --> 00:39:08,720
whistling to patch this function to to

666
00:39:06,619 --> 00:39:11,900
let make it always written yes

667
00:39:08,720 --> 00:39:17,149
so the SKA o is not a problem anymore

668
00:39:11,900 --> 00:39:20,930
and after our patch it is a persistent

669
00:39:17,150 --> 00:39:25,000
patch when we do all this with real

670
00:39:20,930 --> 00:39:28,009
power lost hooks any user can just

671
00:39:25,000 --> 00:39:31,339
anyone can use the KX load commands to

672
00:39:28,010 --> 00:39:37,250
load arbitrary unsigned extensions in

673
00:39:31,339 --> 00:39:46,920
the shell even the SRP is on so this is

674
00:39:37,250 --> 00:39:53,819
the cue switch so now let's

675
00:39:46,920 --> 00:40:14,400
our demo for the colonel privilege exit

676
00:39:53,819 --> 00:40:16,859
escalation now let's start no Mon Tommy

677
00:40:14,400 --> 00:40:22,109
now we can see that the UID is just a

678
00:40:16,859 --> 00:40:24,450
normal user and s IP is enabled we will

679
00:40:22,109 --> 00:40:29,040
check if there is any there is any

680
00:40:24,450 --> 00:40:31,410
already loaded text there's now let's

681
00:40:29,040 --> 00:40:41,099
download this payload from the remote

682
00:40:31,410 --> 00:40:45,720
server and we're now checking the coding

683
00:40:41,099 --> 00:40:51,059
signature of this KX it's not signed at

684
00:40:45,720 --> 00:40:54,149
all and this specific location here

685
00:40:51,059 --> 00:40:57,750
there's not nothing in this location now

686
00:40:54,150 --> 00:41:00,930
we will I will stop here

687
00:40:57,750 --> 00:41:04,530
it is actually chain with an analogic

688
00:41:00,930 --> 00:41:07,078
back since Oh autumn approach we have

689
00:41:04,530 --> 00:41:09,780
talking this in this presentation

690
00:41:07,079 --> 00:41:14,220
it requires route privilege but he can

691
00:41:09,780 --> 00:41:16,740
escalate from root to kernel so the demo

692
00:41:14,220 --> 00:41:21,058
here he has changed as has been chained

693
00:41:16,740 --> 00:41:24,598
with another bug and now let's continue

694
00:41:21,059 --> 00:41:26,670
it will spawn a new shell here and we

695
00:41:24,599 --> 00:41:29,599
can check that the rootless has been

696
00:41:26,670 --> 00:41:34,309
successfully disabled because we have

697
00:41:29,599 --> 00:41:38,490
load a new extension to the kernel and

698
00:41:34,309 --> 00:41:40,700
here's the the shell spawn that this

699
00:41:38,490 --> 00:41:45,990
show is actually spawned by another

700
00:41:40,700 --> 00:41:46,439
local privilege escalation and let's

701
00:41:45,990 --> 00:41:53,368
check

702
00:41:46,440 --> 00:41:55,290
if the SI p is really turn off so we

703
00:41:53,369 --> 00:41:57,240
successfully write this file to the

704
00:41:55,290 --> 00:42:00,779
protected location which means we

705
00:41:57,240 --> 00:42:06,569
completely disabled the SI p and this

706
00:42:00,780 --> 00:42:21,450
attack is procedure can persistent after

707
00:42:06,569 --> 00:42:25,230
can survive other after the reboot and

708
00:42:21,450 --> 00:42:30,720
finally we will analyze the patch and

709
00:42:25,230 --> 00:42:34,859
the mitigation the first part of this

710
00:42:30,720 --> 00:42:37,529
research that the SI p bypass I actually

711
00:42:34,859 --> 00:42:41,190
released them as a zero-day on my blog

712
00:42:37,530 --> 00:42:44,609
why because during that time our seat of

713
00:42:41,190 --> 00:42:48,990
Sony no solace on the Mac OS festered

714
00:42:44,609 --> 00:42:52,410
latest Mac OS hi serie that time but I

715
00:42:48,990 --> 00:42:56,578
already already checked this on demo

716
00:42:52,410 --> 00:43:02,819
Mojave developer beta the one or the

717
00:42:56,579 --> 00:43:05,760
world bility is gone I think and this is

718
00:43:02,819 --> 00:43:07,710
so-called the so called patch the the

719
00:43:05,760 --> 00:43:11,420
coast nip is found the same function by

720
00:43:07,710 --> 00:43:15,270
the course in publication that all this

721
00:43:11,420 --> 00:43:17,849
external dynamical loading was removed

722
00:43:15,270 --> 00:43:23,759
and he only loves a hard coded past now

723
00:43:17,849 --> 00:43:26,730
I think this this is not a park fix but

724
00:43:23,760 --> 00:43:31,339
it is just some code refactoring but it

725
00:43:26,730 --> 00:43:34,079
kills my this brilliant bug and this

726
00:43:31,339 --> 00:43:36,779
before my noticed this bargain hi Sarah

727
00:43:34,079 --> 00:43:43,609
it was already patch in the Developer

728
00:43:36,780 --> 00:43:46,710
Preview on Mac OS mohel Mojave so but

729
00:43:43,609 --> 00:43:51,000
then I've just just discovered another

730
00:43:46,710 --> 00:43:58,380
trigger that is still present present on

731
00:43:51,000 --> 00:44:01,560
the Mac os10 dot 14.2 and a Mojave you

732
00:43:58,380 --> 00:44:06,119
can see this is true terminals first we

733
00:44:01,560 --> 00:44:09,060
can start an app that written in Swift

734
00:44:06,119 --> 00:44:14,900
and use this command string dumps the

735
00:44:09,060 --> 00:44:18,450
string tubes and and we can see from the

736
00:44:14,900 --> 00:44:20,730
MV if we check the file system usage we

737
00:44:18,450 --> 00:44:24,930
can see there stream tubes is trying to

738
00:44:20,730 --> 00:44:27,720
locate so the leave a lab sweep the

739
00:44:24,930 --> 00:44:30,980
remote Mira dollop and labs whipped

740
00:44:27,720 --> 00:44:34,560
remote mirrored legacy don't die lab

741
00:44:30,980 --> 00:44:39,890
actually it's another delayed hijacking

742
00:44:34,560 --> 00:44:39,890
Bob there's two present on the Mojave

743
00:44:40,819 --> 00:44:47,550
the backlog the despair actually locates

744
00:44:44,310 --> 00:44:51,029
this particular function the underline

745
00:44:47,550 --> 00:44:53,730
idea open lives with the remote mirror

746
00:44:51,030 --> 00:44:55,680
from directory and it can be triggered

747
00:44:53,730 --> 00:44:57,839
when gathering sweep the wrong time

748
00:44:55,680 --> 00:45:00,839
information with these commands

749
00:44:57,839 --> 00:45:04,319
heap the the process ID and the string

750
00:45:00,839 --> 00:45:09,359
tubes per society it is much easier than

751
00:45:04,319 --> 00:45:12,029
the previous part and we can see from

752
00:45:09,359 --> 00:45:16,020
the the compiled code daddy it will try

753
00:45:12,030 --> 00:45:24,690
to locate is dynamically from the target

754
00:45:16,020 --> 00:45:27,060
process location but this this variant

755
00:45:24,690 --> 00:45:31,319
doesn't work anymore on Mac OS Mojave

756
00:45:27,060 --> 00:45:33,450
because since I because I have reported

757
00:45:31,319 --> 00:45:37,069
those bugs to the Apple they have added

758
00:45:33,450 --> 00:45:41,549
some medication to queue this Park class

759
00:45:37,069 --> 00:45:44,490
first of all there's if you if you care

760
00:45:41,550 --> 00:45:47,069
about it the developer documentation

761
00:45:44,490 --> 00:45:52,770
there they have introduced a new feature

762
00:45:47,069 --> 00:45:55,380
than in hardened wrong time T and the

763
00:45:52,770 --> 00:45:57,900
result is there when even we even we

764
00:45:55,380 --> 00:46:00,240
copy those binaries from elcapitan that

765
00:45:57,900 --> 00:46:04,049
the banner is not signed with library

766
00:46:00,240 --> 00:46:07,799
validation if we run it on the Mac OS

767
00:46:04,049 --> 00:46:11,190
Mojave if you act as the tail sign with

768
00:46:07,799 --> 00:46:11,770
the blood to flag and only the banner is

769
00:46:11,190 --> 00:46:14,710
in

770
00:46:11,770 --> 00:46:17,530
tor is another entitlement an apple doc

771
00:46:14,710 --> 00:46:21,040
apple a calm down Apple secured RCS

772
00:46:17,530 --> 00:46:24,040
thoughts disable / lab disabled library

773
00:46:21,040 --> 00:46:26,230
validation you only only said those

774
00:46:24,040 --> 00:46:30,670
binaries in title is dis can bypass the

775
00:46:26,230 --> 00:46:33,010
check and then little sampling tools

776
00:46:30,670 --> 00:46:37,270
have been renamed to have their unique

777
00:46:33,010 --> 00:46:41,740
identifiers for and there is a new

778
00:46:37,270 --> 00:46:45,880
entitlement the safe version for system

779
00:46:41,740 --> 00:46:48,040
task ports you can see this they have

780
00:46:45,880 --> 00:46:50,890
introduced this safe version which means

781
00:46:48,040 --> 00:46:53,550
that the atleast old binaries will not

782
00:46:50,890 --> 00:46:57,600
work anymore and besides they have

783
00:46:53,550 --> 00:47:03,810
hard-coded a huge list of identifiers

784
00:46:57,600 --> 00:47:07,299
whitelist in there am fi docx policy to

785
00:47:03,810 --> 00:47:10,360
to specify who can use this privilege to

786
00:47:07,300 --> 00:47:14,160
inject payload or to get to get a death

787
00:47:10,360 --> 00:47:18,550
task pod for those restricted process

788
00:47:14,160 --> 00:47:22,750
but there are some problems remain cast

789
00:47:18,550 --> 00:47:26,109
k xt is now signed with another new

790
00:47:22,750 --> 00:47:28,320
entitlement now which means this says

791
00:47:26,109 --> 00:47:31,779
don't allow unsigned executable memory

792
00:47:28,320 --> 00:47:35,500
if you lower the protection of heart

793
00:47:31,780 --> 00:47:39,790
hardened wrong time so it's maybe still

794
00:47:35,500 --> 00:47:43,150
in still possible true I'm sorry this

795
00:47:39,790 --> 00:47:43,660
the tech zone is a there's there's a

796
00:47:43,150 --> 00:47:45,820
typo

797
00:47:43,660 --> 00:47:48,310
it is maybe it still possible to attack

798
00:47:45,820 --> 00:47:52,240
a kernel with use of space IPC pack they

799
00:47:48,310 --> 00:47:56,049
can control the you if you can loop on

800
00:47:52,240 --> 00:47:58,149
the ext or obtain the task pod you if

801
00:47:56,050 --> 00:48:01,630
you may have the chance to ruin through

802
00:47:58,150 --> 00:48:05,230
the kernel again one more thing I'm

803
00:48:01,630 --> 00:48:09,520
missing I have show some screenshot of

804
00:48:05,230 --> 00:48:12,460
my pretty search engine so it's written

805
00:48:09,520 --> 00:48:14,770
ever introduced this and elven a source

806
00:48:12,460 --> 00:48:18,820
here it's written in Python and based on

807
00:48:14,770 --> 00:48:22,150
those open source frameworks alive leaf

808
00:48:18,820 --> 00:48:24,940
and raid their true and it consists of

809
00:48:22,150 --> 00:48:25,870
the two parts the data collector the

810
00:48:24,940 --> 00:48:31,180
passer

811
00:48:25,870 --> 00:48:33,190
the full-text so changing it will run a

812
00:48:31,180 --> 00:48:35,440
disc scanner that extract all the

813
00:48:33,190 --> 00:48:37,900
metadata from Metro batteries and then

814
00:48:35,440 --> 00:48:42,640
collected data to make it searchable so

815
00:48:37,900 --> 00:48:45,360
if you want to find some if I would show

816
00:48:42,640 --> 00:48:49,180
the example them it only supports

817
00:48:45,360 --> 00:48:52,420
natural for mates now and so so that is

818
00:48:49,180 --> 00:48:56,410
as well as its entitlements causing

819
00:48:52,420 --> 00:49:00,430
nature flags and some it is not about

820
00:48:56,410 --> 00:49:02,890
the scanner so you have already seen the

821
00:49:00,430 --> 00:49:05,980
queue our presentation in hit bid this

822
00:49:02,890 --> 00:49:09,040
year so that that was a real search

823
00:49:05,980 --> 00:49:11,380
engine for the about discovery but my

824
00:49:09,040 --> 00:49:14,200
search engine is just some metadata said

825
00:49:11,380 --> 00:49:16,780
search it's not about the scanner I can

826
00:49:14,200 --> 00:49:20,589
lead me to some valuable targets and

827
00:49:16,780 --> 00:49:21,730
it's now open source so the full-text

828
00:49:20,590 --> 00:49:23,710
food

829
00:49:21,730 --> 00:49:26,440
first of all you can just type any

830
00:49:23,710 --> 00:49:28,510
keyword through to perform a full text

831
00:49:26,440 --> 00:49:31,840
search for printable strings is just

832
00:49:28,510 --> 00:49:34,060
like a simplified grep and also suppose

833
00:49:31,840 --> 00:49:37,060
down some of the futures to make it more

834
00:49:34,060 --> 00:49:39,580
those result more accurate like the part

835
00:49:37,060 --> 00:49:43,150
of the pass the entitlement name or if

836
00:49:39,580 --> 00:49:46,240
the banner is sign or sign by Apple or

837
00:49:43,150 --> 00:49:49,630
has the library validation flag and a

838
00:49:46,240 --> 00:49:51,640
symbol you can search the if it like it

839
00:49:49,630 --> 00:49:54,190
with this span all to grab all the

840
00:49:51,640 --> 00:49:56,560
banner to find all the banner is that

841
00:49:54,190 --> 00:49:59,800
have imported the system function you

842
00:49:56,560 --> 00:50:06,700
can filter with this you can locate them

843
00:49:59,800 --> 00:50:10,930
with these filters and here are some

844
00:50:06,700 --> 00:50:14,230
example like what do we do we want to

845
00:50:10,930 --> 00:50:17,259
search something that the pass includes

846
00:50:14,230 --> 00:50:20,170
that kid or faint work or it has include

847
00:50:17,260 --> 00:50:23,530
imported this symbol in as task or is

848
00:50:20,170 --> 00:50:28,320
signed by Apple or have some special

849
00:50:23,530 --> 00:50:31,270
entitlement or have some special segment

850
00:50:28,320 --> 00:50:33,820
since we have talked about entitlement a

851
00:50:31,270 --> 00:50:36,250
few if our own Apple security you must

852
00:50:33,820 --> 00:50:38,890
know the the Jonas Levin's entitlement

853
00:50:36,250 --> 00:50:40,170
database the J's interment database so I

854
00:50:38,890 --> 00:50:55,259
have copycat a

855
00:50:40,170 --> 00:50:59,549
my own version for it we can here's a

856
00:50:55,260 --> 00:51:02,430
lifetime of this you can see it's just a

857
00:50:59,549 --> 00:51:05,460
so-so web application you can run it on

858
00:51:02,430 --> 00:51:17,359
your own computer and we can feel like

859
00:51:05,460 --> 00:51:20,490
checks shows only like task 8 so you can

860
00:51:17,359 --> 00:51:26,578
for example search any keywords your

861
00:51:20,490 --> 00:51:30,209
life to like any any batteries that

862
00:51:26,579 --> 00:51:34,500
include the keyword - well it takes so

863
00:51:30,210 --> 00:51:39,319
so long because the results may be some

864
00:51:34,500 --> 00:51:43,730
there may be so many results and we can

865
00:51:39,319 --> 00:51:47,509
now we can search for those specific

866
00:51:43,730 --> 00:51:49,859
entitlements use the future

867
00:51:47,510 --> 00:51:52,400
so all that all these batteries are

868
00:51:49,859 --> 00:51:52,400
listed here

869
00:51:55,099 --> 00:52:01,510
and here's my

870
00:51:57,040 --> 00:52:06,610
copycat internment database you can see

871
00:52:01,510 --> 00:52:09,720
the how many different environments here

872
00:52:06,610 --> 00:52:12,940
in your system and here are some other

873
00:52:09,720 --> 00:52:15,220
features like the the table at the

874
00:52:12,940 --> 00:52:24,130
importing table for search for and

875
00:52:15,220 --> 00:52:30,310
symbol now with uh sorry there's not

876
00:52:24,130 --> 00:52:32,650
know enough time for me all right so

877
00:52:30,310 --> 00:52:35,640
let's close this presentation for you to

878
00:52:32,650 --> 00:52:37,690
have time to a question and answers so

879
00:52:35,640 --> 00:52:40,629
what we learn from this

880
00:52:37,690 --> 00:52:43,990
this interesting bug is there security

881
00:52:40,630 --> 00:52:47,350
medication night the sandbox sometimes

882
00:52:43,990 --> 00:52:49,569
they can betray you and sometimes you

883
00:52:47,350 --> 00:52:53,770
can pawn a target without even touching

884
00:52:49,570 --> 00:52:56,650
in be like I have already achieved a

885
00:52:53,770 --> 00:52:59,860
kernel code execution but I did not

886
00:52:56,650 --> 00:53:02,920
attack the kernel itself and here are

887
00:52:59,860 --> 00:53:03,990
some credits you for some use of our

888
00:53:02,920 --> 00:53:06,970
resources

889
00:53:03,990 --> 00:53:11,049
thanks for these people that this

890
00:53:06,970 --> 00:53:14,350
resources that helped me to to start my

891
00:53:11,050 --> 00:53:18,340
research and credits also credits

892
00:53:14,350 --> 00:53:23,650
through this brilliant recipient talks

893
00:53:18,340 --> 00:53:27,790
by other people and finally I named I

894
00:53:23,650 --> 00:53:29,950
named this search engine it's just the

895
00:53:27,790 --> 00:53:32,020
song where while I'm doing the

896
00:53:29,950 --> 00:53:34,089
development I don't want to call it a

897
00:53:32,020 --> 00:53:41,170
March or search engine because these

898
00:53:34,090 --> 00:53:42,880
sounds to gate so if you want to check

899
00:53:41,170 --> 00:53:48,700
the source code here I have already

900
00:53:42,880 --> 00:53:51,790
published on the github and thank you

901
00:53:48,700 --> 00:53:55,140
for coming from a presentation and if

902
00:53:51,790 --> 00:53:55,140
you have run any questions

903
00:54:06,510 --> 00:54:09,910
first of all awesome presentation thank

904
00:54:09,549 --> 00:54:14,049
you

905
00:54:09,910 --> 00:54:17,078
but it's this tool this search engine I

906
00:54:14,049 --> 00:54:19,630
should is that also available for iOS

907
00:54:17,079 --> 00:54:20,859
binaries like can I create a folder with

908
00:54:19,630 --> 00:54:25,329
iOS binaries

909
00:54:20,859 --> 00:54:27,910
Mako's oh here is a problem I can I'm

910
00:54:25,329 --> 00:54:30,190
working on it as there are spanner is

911
00:54:27,910 --> 00:54:34,089
you know the the libraries are pounding

912
00:54:30,190 --> 00:54:36,970
the that the talent the LD share catch

913
00:54:34,089 --> 00:54:39,520
I'm working on this for made since most

914
00:54:36,970 --> 00:54:41,319
of the binaries are in this catch a it

915
00:54:39,520 --> 00:54:45,130
is not supporting now but I'm planning

916
00:54:41,319 --> 00:54:47,079
to integrate it you can there's an open

917
00:54:45,130 --> 00:54:50,109
source tool for extracting the binaries

918
00:54:47,079 --> 00:54:52,450
from the cache I think things easier I

919
00:54:50,109 --> 00:54:53,470
don't like that approach actually no

920
00:54:52,450 --> 00:54:56,950
okay

921
00:54:53,470 --> 00:54:59,379
I've rather do some puzzle to to work on

922
00:54:56,950 --> 00:55:09,578
it okay well thank you

923
00:54:59,380 --> 00:55:12,069
I think you've any other questions like

924
00:55:09,579 --> 00:55:20,710
the exploitation or the the tool or the

925
00:55:12,069 --> 00:55:22,390
pockets no one's then I would like

926
00:55:20,710 --> 00:55:26,640
everybody to give a big applause for the

927
00:55:22,390 --> 00:55:26,640
pose easel thank you

928
00:55:33,180 --> 00:55:35,240
you

