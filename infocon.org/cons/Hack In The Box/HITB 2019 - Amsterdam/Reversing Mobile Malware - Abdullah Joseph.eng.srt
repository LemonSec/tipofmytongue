1
00:00:19,100 --> 00:00:24,539
cool so hi everybody my name is Abdul

2
00:00:22,830 --> 00:00:30,869
and we today we're going to talk about

3
00:00:24,539 --> 00:00:34,650
reversing mobile malware and perfect so

4
00:00:30,869 --> 00:00:37,230
I work as a security team lead at a

5
00:00:34,650 --> 00:00:41,250
company called adjust in Germany we do

6
00:00:37,230 --> 00:00:44,519
mobile attribution so quick summary for

7
00:00:41,250 --> 00:00:46,860
that at usually companies pay us so that

8
00:00:44,519 --> 00:00:49,589
they can know which networks brings in

9
00:00:46,860 --> 00:00:52,440
the most traffic advertisement traffic

10
00:00:49,590 --> 00:00:54,690
and we act as the verifier and the

11
00:00:52,440 --> 00:00:57,839
attribution provider for those companies

12
00:00:54,690 --> 00:01:00,449
and for that we actually have our own

13
00:00:57,839 --> 00:01:02,519
fraud team I we work closely with the

14
00:01:00,449 --> 00:01:06,479
fraud team to protect our company's

15
00:01:02,519 --> 00:01:08,610
proprietary SDKs and that's basically

16
00:01:06,479 --> 00:01:10,100
one of the main topics that we are gonna

17
00:01:08,610 --> 00:01:18,810
discuss today which is mobile malware

18
00:01:10,100 --> 00:01:21,810
adware to be specific so as part of my

19
00:01:18,810 --> 00:01:23,760
job is to reverse a lot of malware

20
00:01:21,810 --> 00:01:25,590
especially Android we see a lot of iOS

21
00:01:23,760 --> 00:01:30,240
as well but there is quite a bit of

22
00:01:25,590 --> 00:01:32,580
Android in there and the agenda the mr.

23
00:01:30,240 --> 00:01:36,360
da the methodology that we try to use is

24
00:01:32,580 --> 00:01:39,120
basically is pretty stable throughout

25
00:01:36,360 --> 00:01:41,160
the entire process and we needed to

26
00:01:39,120 --> 00:01:44,310
establish some sort of a methodology

27
00:01:41,160 --> 00:01:46,950
that works for us because contrary to

28
00:01:44,310 --> 00:01:48,390
what a lot of people think Windows

29
00:01:46,950 --> 00:01:49,230
malware is kind of taking the prime

30
00:01:48,390 --> 00:01:50,940
target

31
00:01:49,230 --> 00:01:52,260
everybody loves Windows malware all the

32
00:01:50,940 --> 00:01:54,810
books are written about Windows malware

33
00:01:52,260 --> 00:01:57,390
Linux malware there are some however

34
00:01:54,810 --> 00:01:59,880
most of them are about Windows even the

35
00:01:57,390 --> 00:02:02,010
tool link for window for Android malware

36
00:01:59,880 --> 00:02:05,729
analysis is mostly open source projects

37
00:02:02,010 --> 00:02:07,140
maintained by students so I'm pretty

38
00:02:05,729 --> 00:02:08,669
happy about it I'm very grateful about

39
00:02:07,140 --> 00:02:12,450
it I try to contribute as much as I can

40
00:02:08,669 --> 00:02:14,429
however I would like to have some sort

41
00:02:12,450 --> 00:02:16,018
of a forum to establish communication so

42
00:02:14,430 --> 00:02:19,170
that we can have a good exchange of

43
00:02:16,019 --> 00:02:20,849
ideas and that's why we've created some

44
00:02:19,170 --> 00:02:23,190
sort of a methodology with a nice

45
00:02:20,849 --> 00:02:25,079
tooling that we like to use and it's

46
00:02:23,190 --> 00:02:28,980
been proven pretty good so far and for

47
00:02:25,080 --> 00:02:32,790
today we are going to reverse lovely

48
00:02:28,980 --> 00:02:35,319
malware campaign called simbad and not

49
00:02:32,790 --> 00:02:37,480
named by us named by checkpoint

50
00:02:35,319 --> 00:02:38,589
and see how the analysis process looks

51
00:02:37,480 --> 00:02:43,090
like and then we can talk about the

52
00:02:38,590 --> 00:02:44,980
findings just as a quick disclaimer most

53
00:02:43,090 --> 00:02:47,829
of the scripts that are used in here are

54
00:02:44,980 --> 00:02:50,108
my own scripts it's written by our team

55
00:02:47,829 --> 00:02:51,639
however everything is live on github the

56
00:02:50,109 --> 00:02:54,310
link will be provided at the end and

57
00:02:51,639 --> 00:02:57,609
there is a fully full-length extended

58
00:02:54,310 --> 00:03:00,939
write up for this malware complete and

59
00:02:57,609 --> 00:03:02,560
on a blog article that I'm gonna post at

60
00:03:00,939 --> 00:03:03,638
the end so you guys can go ahead and

61
00:03:02,560 --> 00:03:05,950
check it out and even play with the

62
00:03:03,639 --> 00:03:09,099
malware sample afterwards yourself so

63
00:03:05,950 --> 00:03:10,719
let's go so this is a methodology that

64
00:03:09,099 --> 00:03:13,599
we're gonna follow it's pretty abstract

65
00:03:10,719 --> 00:03:15,638
in general that's why you can you really

66
00:03:13,599 --> 00:03:17,738
shouldn't call it too much as a rule

67
00:03:15,639 --> 00:03:19,150
book as more like a guideline this is

68
00:03:17,739 --> 00:03:21,250
the stuff that worked for us this is the

69
00:03:19,150 --> 00:03:24,430
stuff that we try to do why do we even

70
00:03:21,250 --> 00:03:28,060
have a methodology well because you can

71
00:03:24,430 --> 00:03:30,489
try to take the binary and dump it into

72
00:03:28,060 --> 00:03:32,889
either pro like a boss but it's not

73
00:03:30,489 --> 00:03:34,180
gonna work too many times because well

74
00:03:32,889 --> 00:03:37,209
you need to know what you're looking for

75
00:03:34,180 --> 00:03:39,699
you need to have a way of telling

76
00:03:37,209 --> 00:03:42,400
yourself when to stop and understand

77
00:03:39,699 --> 00:03:44,560
that hey this this technique is working

78
00:03:42,400 --> 00:03:46,120
right now we're doing very good with it

79
00:03:44,560 --> 00:03:48,370
however maybe right now we should switch

80
00:03:46,120 --> 00:03:50,500
to a dynamic analysis maybe we should

81
00:03:48,370 --> 00:03:53,620
run it in a VM and see how it looks like

82
00:03:50,500 --> 00:03:56,829
so that's why having some sort of a step

83
00:03:53,620 --> 00:03:59,470
by step process helps us think and helps

84
00:03:56,829 --> 00:04:02,889
us most importantly remember results

85
00:03:59,470 --> 00:04:04,150
that happened two weeks ago I mean we do

86
00:04:02,889 --> 00:04:07,720
malware analysis but we do actually

87
00:04:04,150 --> 00:04:09,699
other stuff so looking at our notes we

88
00:04:07,720 --> 00:04:11,799
need to have a very structured notes so

89
00:04:09,699 --> 00:04:13,810
that we can have another member of the

90
00:04:11,799 --> 00:04:15,489
team that maybe just recently joined

91
00:04:13,810 --> 00:04:19,030
be able to still look at it and make

92
00:04:15,489 --> 00:04:22,050
sense of it so let's talk about by the

93
00:04:19,029 --> 00:04:24,400
way that graph is made by dot

94
00:04:22,050 --> 00:04:25,900
visualization language beautiful I just

95
00:04:24,400 --> 00:04:28,359
figured out about it actually two two

96
00:04:25,900 --> 00:04:30,280
months ago it's amazing you can do ASCII

97
00:04:28,360 --> 00:04:31,990
graphs can you believe that encode

98
00:04:30,280 --> 00:04:36,250
literally this is like three lines of

99
00:04:31,990 --> 00:04:39,130
code it's beautiful so enough about my

100
00:04:36,250 --> 00:04:41,880
love for weird terminal command line

101
00:04:39,130 --> 00:04:45,370
tools and this is the same bad campaign

102
00:04:41,880 --> 00:04:47,230
this was not too long ago this was March

103
00:04:45,370 --> 00:04:49,870
2019

104
00:04:47,230 --> 00:04:53,560
the as far as TechCrunch and checkpoint

105
00:04:49,870 --> 00:04:56,230
say that it affected 200 apps it was a

106
00:04:53,560 --> 00:04:58,330
library that was reported as an

107
00:04:56,230 --> 00:05:00,940
advertisement library as advertisement

108
00:04:58,330 --> 00:05:04,120
SDK that you can put in your Android

109
00:05:00,940 --> 00:05:07,719
application and you will be able to well

110
00:05:04,120 --> 00:05:10,450
at least the checkpoint right up the

111
00:05:07,720 --> 00:05:13,870
that I read it said that it provides

112
00:05:10,450 --> 00:05:16,630
reactive extensions for advertisement

113
00:05:13,870 --> 00:05:18,900
SDKs reactive extensions it's one of

114
00:05:16,630 --> 00:05:22,540
those new programming paradigms that

115
00:05:18,900 --> 00:05:25,750
erupted recently came from dotnet from

116
00:05:22,540 --> 00:05:27,400
rx dotnet and and it's just a way to

117
00:05:25,750 --> 00:05:29,620
include functional programming in your

118
00:05:27,400 --> 00:05:31,179
code it was a fancy new technique that

119
00:05:29,620 --> 00:05:34,660
apparently a lot of people loved and

120
00:05:31,180 --> 00:05:36,100
this library was at least saying that it

121
00:05:34,660 --> 00:05:42,000
can provide this functionality for your

122
00:05:36,100 --> 00:05:44,260
application and when do we actually

123
00:05:42,000 --> 00:05:47,190
before we start the analysis we have to

124
00:05:44,260 --> 00:05:50,409
talk about this small step pre analysis

125
00:05:47,190 --> 00:05:53,110
why am I even why am I even doing this

126
00:05:50,410 --> 00:05:54,130
analysis so there is there's two ways

127
00:05:53,110 --> 00:05:56,530
that you can think about it

128
00:05:54,130 --> 00:05:58,510
there is either innocent until proven

129
00:05:56,530 --> 00:05:59,799
guilty or guilty enter until proven

130
00:05:58,510 --> 00:06:02,469
innocent

131
00:05:59,800 --> 00:06:03,550
and on my side I take the latter guilty

132
00:06:02,470 --> 00:06:05,800
until proven innocent

133
00:06:03,550 --> 00:06:07,510
so I actually assume that the malware is

134
00:06:05,800 --> 00:06:09,520
doing something really really really bad

135
00:06:07,510 --> 00:06:12,969
and I try to treat it in a virtualized

136
00:06:09,520 --> 00:06:15,370
environment I very isolated and I put

137
00:06:12,970 --> 00:06:17,230
every single monitoring tool that I can

138
00:06:15,370 --> 00:06:20,680
do before the execution and check the

139
00:06:17,230 --> 00:06:24,090
results afterwards and for me the most

140
00:06:20,680 --> 00:06:28,330
important thing for this entire analysis

141
00:06:24,090 --> 00:06:30,760
this entire analysis stage is to

142
00:06:28,330 --> 00:06:33,900
understand those two questions the

143
00:06:30,760 --> 00:06:38,530
malware is purported to be able to

144
00:06:33,900 --> 00:06:41,349
install download apks which is the

145
00:06:38,530 --> 00:06:44,349
Android package basically an Android app

146
00:06:41,350 --> 00:06:46,090
and install it on a CA from a c2 server

147
00:06:44,350 --> 00:06:47,890
downloaded from a theater server and

148
00:06:46,090 --> 00:06:51,010
install it locally without the users

149
00:06:47,890 --> 00:06:52,510
consent also checkpoint says that the

150
00:06:51,010 --> 00:06:54,460
malware is capable of doing something

151
00:06:52,510 --> 00:06:55,630
called screen overlays so screen

152
00:06:54,460 --> 00:06:57,150
overlays I should have actually put a

153
00:06:55,630 --> 00:07:00,219
picture on there it's really beautiful

154
00:06:57,150 --> 00:07:00,789
now secure made a very nice write-up

155
00:07:00,220 --> 00:07:03,490
about

156
00:07:00,790 --> 00:07:06,310
basically having an image that looks

157
00:07:03,490 --> 00:07:07,630
exactly like your home screen like when

158
00:07:06,310 --> 00:07:09,550
Android phone when you're on your home

159
00:07:07,630 --> 00:07:12,250
screen exactly like it however any

160
00:07:09,550 --> 00:07:15,460
button that you press will take you it's

161
00:07:12,250 --> 00:07:18,640
a web view it will take you to URL any

162
00:07:15,460 --> 00:07:21,370
button that you press so in that way you

163
00:07:18,640 --> 00:07:24,640
can have an incentivized advertisement

164
00:07:21,370 --> 00:07:26,320
click on a banner without actually the

165
00:07:24,640 --> 00:07:28,630
user seeing the banner without the user

166
00:07:26,320 --> 00:07:30,280
even being incentivized to click at the

167
00:07:28,630 --> 00:07:32,010
banner you click on your home screen

168
00:07:30,280 --> 00:07:36,070
you're not clicking on an advertisement

169
00:07:32,010 --> 00:07:38,560
however a screen overlay will allow the

170
00:07:36,070 --> 00:07:41,620
will allow the malicious payload to be

171
00:07:38,560 --> 00:07:43,960
executed upon a user's click and this is

172
00:07:41,620 --> 00:07:45,310
the claim that it's that same bad is

173
00:07:43,960 --> 00:07:49,200
capable of doing and we need to know if

174
00:07:45,310 --> 00:07:51,450
that's true or not so the analysis stage

175
00:07:49,200 --> 00:07:54,550
first thing artifact collection

176
00:07:51,450 --> 00:07:57,099
basically what is the binary what is it

177
00:07:54,550 --> 00:08:00,550
what is it what does it have what linked

178
00:07:57,100 --> 00:08:04,000
libraries does it contain and are those

179
00:08:00,550 --> 00:08:06,550
linked libraries in somehow malicious by

180
00:08:04,000 --> 00:08:08,650
themselves or are they third-party we

181
00:08:06,550 --> 00:08:10,240
need to know this stuff are there any

182
00:08:08,650 --> 00:08:12,580
other entry points other than the main

183
00:08:10,240 --> 00:08:15,340
entry point we need to know that luckily

184
00:08:12,580 --> 00:08:17,469
for us in Android all of this

185
00:08:15,340 --> 00:08:19,299
information is nicely beautifully

186
00:08:17,470 --> 00:08:21,040
packaged in colors

187
00:08:19,300 --> 00:08:24,270
well not colors this is my theme screen

188
00:08:21,040 --> 00:08:27,340
but it's packaged in an XML file called

189
00:08:24,270 --> 00:08:29,169
androidmanifest.xml and that's very

190
00:08:27,340 --> 00:08:31,150
beautiful because in Windows there is no

191
00:08:29,170 --> 00:08:34,390
such thing as Android manifest at least

192
00:08:31,150 --> 00:08:38,079
not as far as I know so everything that

193
00:08:34,390 --> 00:08:40,569
the app is allowed to do is packaged

194
00:08:38,080 --> 00:08:42,099
into this little file and basically you

195
00:08:40,570 --> 00:08:44,440
can think about it as a contract between

196
00:08:42,099 --> 00:08:47,080
the app and the operating system this is

197
00:08:44,440 --> 00:08:50,170
what I am this is what I will do in your

198
00:08:47,080 --> 00:08:52,390
ecosystem and this is everything that I

199
00:08:50,170 --> 00:08:53,890
have this is all the activities this is

200
00:08:52,390 --> 00:08:55,660
all the services that I'm able to run

201
00:08:53,890 --> 00:08:57,310
this is all the information that I have

202
00:08:55,660 --> 00:08:57,730
from third-party libraries it's very

203
00:08:57,310 --> 00:08:59,829
beautiful

204
00:08:57,730 --> 00:09:01,600
and in here one of the main things that

205
00:08:59,830 --> 00:09:04,180
we found is permissions so the

206
00:09:01,600 --> 00:09:06,850
permissions are what the app is allowed

207
00:09:04,180 --> 00:09:11,349
to do in the Android ecosystem and in

208
00:09:06,850 --> 00:09:14,680
here we found those seven permissions

209
00:09:11,350 --> 00:09:17,560
that basically allow in in summary

210
00:09:14,680 --> 00:09:18,670
storage access there's a lot of

211
00:09:17,560 --> 00:09:22,359
permissions there is even a permission

212
00:09:18,670 --> 00:09:24,729
for a usage of internet so there is some

213
00:09:22,360 --> 00:09:26,680
of them are pretty mundane and some of

214
00:09:24,730 --> 00:09:28,300
them are very interesting so for example

215
00:09:26,680 --> 00:09:30,760
storage access that's something pretty

216
00:09:28,300 --> 00:09:33,370
regular an app needs to have a way to

217
00:09:30,760 --> 00:09:36,010
store data externally that's not

218
00:09:33,370 --> 00:09:36,460
malicious by itself collecting device

219
00:09:36,010 --> 00:09:40,569
data

220
00:09:36,460 --> 00:09:43,300
it sounds malicious however and this is

221
00:09:40,570 --> 00:09:46,620
something that our product does as well

222
00:09:43,300 --> 00:09:49,839
most SDKs software development kits most

223
00:09:46,620 --> 00:09:52,270
third-party advertisement SDKs collect

224
00:09:49,840 --> 00:09:53,530
user data and device data and I'm not

225
00:09:52,270 --> 00:09:55,660
talking about cameras analytic I'm

226
00:09:53,530 --> 00:09:58,689
talking about stuff that are a privacy

227
00:09:55,660 --> 00:09:59,829
compliant that are vetted by the

228
00:09:58,690 --> 00:10:02,170
European Union

229
00:09:59,830 --> 00:10:04,870
it's basically stuff that are not user

230
00:10:02,170 --> 00:10:07,689
identifiable but are needed to identify

231
00:10:04,870 --> 00:10:10,030
a device for example the Google

232
00:10:07,690 --> 00:10:11,890
advertisement identifier that's

233
00:10:10,030 --> 00:10:14,730
something that you can reset immediately

234
00:10:11,890 --> 00:10:17,830
but advertisement SDK is required

235
00:10:14,730 --> 00:10:19,870
monetization SDKs require it the third

236
00:10:17,830 --> 00:10:22,990
thing is that receive boot completed

237
00:10:19,870 --> 00:10:25,210
this app is capable of having an action

238
00:10:22,990 --> 00:10:28,060
you can think of it as a side entry

239
00:10:25,210 --> 00:10:31,210
point a side door and it's being

240
00:10:28,060 --> 00:10:33,699
triggered as soon as the user boots up

241
00:10:31,210 --> 00:10:36,010
his phone which is an interesting thing

242
00:10:33,700 --> 00:10:38,230
like why would why would by the way this

243
00:10:36,010 --> 00:10:40,210
app that were analyzing this was a

244
00:10:38,230 --> 00:10:42,610
random sample collected from over 200

245
00:10:40,210 --> 00:10:46,110
apps that affected that were infected

246
00:10:42,610 --> 00:10:49,180
but this app is a photo recovery app so

247
00:10:46,110 --> 00:10:52,780
it it's supposed to be like when you

248
00:10:49,180 --> 00:10:54,250
delete a photo you can watch a video a

249
00:10:52,780 --> 00:10:56,949
video advertisement and then you press a

250
00:10:54,250 --> 00:10:59,290
button and it will magically recover

251
00:10:56,950 --> 00:11:01,390
your photos I actually did delete some

252
00:10:59,290 --> 00:11:04,480
photos from my emulator and it really

253
00:11:01,390 --> 00:11:06,340
didn't recover anything so just horrible

254
00:11:04,480 --> 00:11:11,110
I left on it one star on Google Play I

255
00:11:06,340 --> 00:11:15,490
swear to God so so entry points the this

256
00:11:11,110 --> 00:11:16,900
is basically the the first point of

257
00:11:15,490 --> 00:11:18,850
contact between the app and the

258
00:11:16,900 --> 00:11:21,490
operating system and this is usually

259
00:11:18,850 --> 00:11:24,250
launched by the user so the first one

260
00:11:21,490 --> 00:11:26,380
the main entry point this is required by

261
00:11:24,250 --> 00:11:28,390
Android applications it's called the

262
00:11:26,380 --> 00:11:31,510
launcher so basically when you click on

263
00:11:28,390 --> 00:11:34,660
the app icon and the on your home screen

264
00:11:31,510 --> 00:11:36,520
on your dashboard basically this is what

265
00:11:34,660 --> 00:11:39,490
the piece of code that gets activated

266
00:11:36,520 --> 00:11:41,350
and there are three other side entry

267
00:11:39,490 --> 00:11:43,860
points and this is perfectly legal in

268
00:11:41,350 --> 00:11:46,930
the Android ecosystem so one of them is

269
00:11:43,860 --> 00:11:50,080
basically called Launch receiver that's

270
00:11:46,930 --> 00:11:53,560
the first side entry point and it really

271
00:11:50,080 --> 00:11:56,320
doesn't have any sort of trigger there

272
00:11:53,560 --> 00:12:00,130
is no you there is no broadcast that

273
00:11:56,320 --> 00:12:01,720
it's reacting upon so this is just a

274
00:12:00,130 --> 00:12:03,910
question I have for now is that

275
00:12:01,720 --> 00:12:06,040
internally invoked is the main entry

276
00:12:03,910 --> 00:12:08,050
point actually calling it could be we'll

277
00:12:06,040 --> 00:12:10,480
figure out later the next thing is

278
00:12:08,050 --> 00:12:12,130
unlock receiver this is a very

279
00:12:10,480 --> 00:12:13,900
interesting thing in here user present

280
00:12:12,130 --> 00:12:15,790
user underscore present it's under

281
00:12:13,900 --> 00:12:18,550
action right here and this is actually

282
00:12:15,790 --> 00:12:20,770
when the user has unlocked their phone

283
00:12:18,550 --> 00:12:22,750
not when the user has opened up their

284
00:12:20,770 --> 00:12:25,780
phone from standby mode when you enter

285
00:12:22,750 --> 00:12:28,090
the password and unlocked this is a

286
00:12:25,780 --> 00:12:31,089
system broadcast that gets broadcasted

287
00:12:28,090 --> 00:12:33,340
to every app and any app can react upon

288
00:12:31,090 --> 00:12:35,920
it why would a photo recovery app wanna

289
00:12:33,340 --> 00:12:38,350
react upon me after entering a lot my

290
00:12:35,920 --> 00:12:41,620
lockscreen that's a it's a good question

291
00:12:38,350 --> 00:12:46,330
and the third one is from comm dot parse

292
00:12:41,620 --> 00:12:47,410
that push for now we I if if I didn't do

293
00:12:46,330 --> 00:12:50,080
the research I wouldn't know this but

294
00:12:47,410 --> 00:12:52,689
comm dot parse that push is it's called

295
00:12:50,080 --> 00:12:55,330
parse backend it's a reactive back-end

296
00:12:52,690 --> 00:12:58,210
that is written in nodejs that you can

297
00:12:55,330 --> 00:13:00,970
put in your in your back-end

298
00:12:58,210 --> 00:13:05,260
it acts as your back-end and it has a

299
00:13:00,970 --> 00:13:07,420
NoSQL key storage database key value

300
00:13:05,260 --> 00:13:11,110
storage database and it basically has a

301
00:13:07,420 --> 00:13:12,579
nice SDK within with your Android app so

302
00:13:11,110 --> 00:13:15,430
that it can communicate with it you can

303
00:13:12,580 --> 00:13:17,740
have multiple push and pull situations

304
00:13:15,430 --> 00:13:20,140
happening in between your app so now I

305
00:13:17,740 --> 00:13:21,910
know that there are one one main entry

306
00:13:20,140 --> 00:13:24,580
point and three side doors one of them

307
00:13:21,910 --> 00:13:29,350
is invoked as soon as the user inputs

308
00:13:24,580 --> 00:13:31,200
their password and this is all readable

309
00:13:29,350 --> 00:13:33,640
in an Android dot XML

310
00:13:31,200 --> 00:13:35,320
androidmanifest.xml file we still didn't

311
00:13:33,640 --> 00:13:37,400
do any of the analysis we already know

312
00:13:35,320 --> 00:13:39,380
quite a bit about the application

313
00:13:37,400 --> 00:13:41,030
and speaking of which this application

314
00:13:39,380 --> 00:13:43,070
wasn't actually written by the developer

315
00:13:41,030 --> 00:13:46,339
just like any other Android application

316
00:13:43,070 --> 00:13:49,550
just like any other web application as

317
00:13:46,340 --> 00:13:51,530
well most of the code is not really

318
00:13:49,550 --> 00:13:54,589
written by the developer I believe one

319
00:13:51,530 --> 00:13:57,350
time I read a statistic by Android

320
00:13:54,590 --> 00:14:01,400
developer dot blog spot.com

321
00:13:57,350 --> 00:14:03,620
that over 60% of an Android application

322
00:14:01,400 --> 00:14:05,390
is not actually written by the Android

323
00:14:03,620 --> 00:14:07,130
developer it's search party libraries

324
00:14:05,390 --> 00:14:10,850
third-party libraries that do image

325
00:14:07,130 --> 00:14:18,770
processing computer vision that do a

326
00:14:10,850 --> 00:14:20,990
database query encase advertisement SDKs

327
00:14:18,770 --> 00:14:22,280
attribution SDKs most of the app is

328
00:14:20,990 --> 00:14:23,540
actually not written by the developer

329
00:14:22,280 --> 00:14:26,839
and this is important because when you

330
00:14:23,540 --> 00:14:29,270
do the analysis you can cut quite a bit

331
00:14:26,840 --> 00:14:31,040
of the analysis stage by not having to

332
00:14:29,270 --> 00:14:33,740
look at code that was written by the

333
00:14:31,040 --> 00:14:35,599
developer another important thing is

334
00:14:33,740 --> 00:14:37,220
that most of this monetization is the

335
00:14:35,600 --> 00:14:38,540
case are open source so if you really

336
00:14:37,220 --> 00:14:39,770
want to look at it you can just go on to

337
00:14:38,540 --> 00:14:41,810
the github block come and take a look at

338
00:14:39,770 --> 00:14:46,090
it and what we found in here is

339
00:14:41,810 --> 00:14:48,500
basically those following SDKs which are

340
00:14:46,090 --> 00:14:52,010
simple Google search for the name for

341
00:14:48,500 --> 00:14:54,530
the names reveal both websites so we got

342
00:14:52,010 --> 00:14:56,930
tab joy we got parse it's the mobile

343
00:14:54,530 --> 00:14:59,300
backend we got app next which is

344
00:14:56,930 --> 00:15:02,390
actually like competitor of ours and we

345
00:14:59,300 --> 00:15:04,819
got our X droid err and this is a little

346
00:15:02,390 --> 00:15:06,680
bit weird because I did the research

347
00:15:04,820 --> 00:15:09,620
after checkpoint to release their report

348
00:15:06,680 --> 00:15:12,319
and communicated with Google so our

349
00:15:09,620 --> 00:15:14,990
extroyer was already labeled as sim bad

350
00:15:12,320 --> 00:15:16,850
malware when I googled it so I kind of

351
00:15:14,990 --> 00:15:18,230
cheated on that like I just googled our

352
00:15:16,850 --> 00:15:21,140
extroyer then I told me up there is a

353
00:15:18,230 --> 00:15:24,260
malware out kind of a cheat because well

354
00:15:21,140 --> 00:15:26,720
I did the analysis second hand but still

355
00:15:24,260 --> 00:15:30,860
good that you can still get good results

356
00:15:26,720 --> 00:15:32,750
from Google search and this is just the

357
00:15:30,860 --> 00:15:33,890
summary of what we just talked about the

358
00:15:32,750 --> 00:15:37,430
app uses a lot of third-party

359
00:15:33,890 --> 00:15:41,689
advertisement SDKs the app it has this

360
00:15:37,430 --> 00:15:43,939
weird Rx Droid ER library and we found

361
00:15:41,690 --> 00:15:46,850
that it can collect device data and it's

362
00:15:43,940 --> 00:15:49,280
possibly in vocable by a c2 back-end c2

363
00:15:46,850 --> 00:15:50,200
is short for command and control server

364
00:15:49,280 --> 00:15:52,240
it's an

365
00:15:50,200 --> 00:15:55,990
in the malware world basically a wait

366
00:15:52,240 --> 00:15:58,420
for client usually the mobile in our

367
00:15:55,990 --> 00:16:01,960
case to communicate with a back-end

368
00:15:58,420 --> 00:16:03,540
service and have commands come in and be

369
00:16:01,960 --> 00:16:06,280
able to react the planet

370
00:16:03,540 --> 00:16:07,990
so now we moved through the artifact

371
00:16:06,280 --> 00:16:09,610
collection by just analyzing one single

372
00:16:07,990 --> 00:16:11,470
file and we're able to understand quite

373
00:16:09,610 --> 00:16:14,950
a bit about the application we're able

374
00:16:11,470 --> 00:16:16,510
to do to have some keywords that we can

375
00:16:14,950 --> 00:16:19,120
google and we can actually know about it

376
00:16:16,510 --> 00:16:22,240
and now next step is the dynamic

377
00:16:19,120 --> 00:16:24,880
analysis and this is actually really

378
00:16:22,240 --> 00:16:26,080
nice step because it's best thing about

379
00:16:24,880 --> 00:16:29,470
it is that if you have a good

380
00:16:26,080 --> 00:16:32,230
environment and a good way to tear down

381
00:16:29,470 --> 00:16:34,390
and reset up that environment again you

382
00:16:32,230 --> 00:16:37,570
can have a lot of nice experiments with

383
00:16:34,390 --> 00:16:39,160
it and you can always try to I don't

384
00:16:37,570 --> 00:16:41,710
know poke it from here and see what it

385
00:16:39,160 --> 00:16:43,480
does if I have Google Play installed how

386
00:16:41,710 --> 00:16:45,700
would the malware react if I have if I

387
00:16:43,480 --> 00:16:47,860
remove Google Play what would happen you

388
00:16:45,700 --> 00:16:49,750
do this theory testing and then you keep

389
00:16:47,860 --> 00:16:51,430
repeating it over and over again and

390
00:16:49,750 --> 00:16:52,960
usually most of the time when you repeat

391
00:16:51,430 --> 00:16:56,199
it with new variables you're gonna get

392
00:16:52,960 --> 00:16:58,360
new outcomes so this is the environment

393
00:16:56,200 --> 00:17:01,780
setup that I had it's an Android

394
00:16:58,360 --> 00:17:04,240
emulator so Android has this beautiful

395
00:17:01,780 --> 00:17:06,639
property that you can run emulators and

396
00:17:04,240 --> 00:17:10,510
it can more or less reproduce the entire

397
00:17:06,640 --> 00:17:12,880
code it's reproduced the code if it was

398
00:17:10,510 --> 00:17:15,420
not written natively for armed because

399
00:17:12,880 --> 00:17:18,310
they're armed emulators are

400
00:17:15,420 --> 00:17:21,640
pain-in-the-neck to set up on an x86

401
00:17:18,310 --> 00:17:23,560
host for arm you have to use your test

402
00:17:21,640 --> 00:17:26,980
device so ask your boss to get you a

403
00:17:23,560 --> 00:17:31,210
nice pixel phone to test on however for

404
00:17:26,980 --> 00:17:33,340
x86 architecture for anything that is

405
00:17:31,210 --> 00:17:35,710
written natively for x86 or for Java

406
00:17:33,340 --> 00:17:37,810
bytecode dalvik bytecode it would work

407
00:17:35,710 --> 00:17:40,030
tremendously well there is a couple of

408
00:17:37,810 --> 00:17:41,950
scripts in here that I have it's this is

409
00:17:40,030 --> 00:17:44,620
the teardown step that I talked about so

410
00:17:41,950 --> 00:17:46,590
in here I have one script installs

411
00:17:44,620 --> 00:17:49,899
system level certificates for my

412
00:17:46,590 --> 00:17:52,179
transparent proxy immediately can see

413
00:17:49,900 --> 00:17:54,640
all HTTP requests without any problems

414
00:17:52,180 --> 00:17:57,010
and it's automated and in here installs

415
00:17:54,640 --> 00:18:01,420
busybox because every single emulator

416
00:17:57,010 --> 00:18:03,260
every single API has different a

417
00:18:01,420 --> 00:18:05,360
different UNIX command

418
00:18:03,260 --> 00:18:08,120
so the find that you have the finds

419
00:18:05,360 --> 00:18:10,490
command that is in API 18 it's not the

420
00:18:08,120 --> 00:18:11,750
same find command in API 26 and I'd like

421
00:18:10,490 --> 00:18:14,960
to have something stable

422
00:18:11,750 --> 00:18:18,440
that's why busybox basically puts all

423
00:18:14,960 --> 00:18:20,270
your UNIX tooling in any embedded

424
00:18:18,440 --> 00:18:24,710
environment that you want or a mobile

425
00:18:20,270 --> 00:18:26,780
device so a file monitoring that's very

426
00:18:24,710 --> 00:18:28,430
important so if anybody worked in the

427
00:18:26,780 --> 00:18:30,020
windows malware world there is something

428
00:18:28,430 --> 00:18:32,660
there's beautiful tool beautiful

429
00:18:30,020 --> 00:18:35,990
beautiful tool called Rick shot so it

430
00:18:32,660 --> 00:18:39,140
basically captures registry key values

431
00:18:35,990 --> 00:18:41,360
is the prime way to save key value pairs

432
00:18:39,140 --> 00:18:44,810
in Windows for Windows applications and

433
00:18:41,360 --> 00:18:47,060
Rick shot what it does is that you can

434
00:18:44,810 --> 00:18:49,580
take a press a button and take a shot

435
00:18:47,060 --> 00:18:50,990
and then do something activate the

436
00:18:49,580 --> 00:18:53,060
malware do something with the malware

437
00:18:50,990 --> 00:18:54,710
and then press another button to take a

438
00:18:53,060 --> 00:18:57,500
second shot and it's going to show you a

439
00:18:54,710 --> 00:18:59,750
delta and that's a beautiful thing so

440
00:18:57,500 --> 00:19:01,550
with what what I wanted to do with

441
00:18:59,750 --> 00:19:03,110
Android in here there is no such tool

442
00:19:01,550 --> 00:19:05,750
for Android as far as I know so you have

443
00:19:03,110 --> 00:19:07,520
to roll your own what I want to do is

444
00:19:05,750 --> 00:19:09,520
that I want to take a capture of the

445
00:19:07,520 --> 00:19:12,080
file system because UNIX is Linna

446
00:19:09,520 --> 00:19:13,820
Android is a UNIX system and UNIX

447
00:19:12,080 --> 00:19:16,659
everything is file based so I want to

448
00:19:13,820 --> 00:19:19,429
take a snapshot of the file system and

449
00:19:16,660 --> 00:19:21,890
be able to do something with the malware

450
00:19:19,430 --> 00:19:23,240
activated and then take another shot and

451
00:19:21,890 --> 00:19:28,670
be able to understand what happened in

452
00:19:23,240 --> 00:19:30,890
the middle so this beautiful tool took

453
00:19:28,670 --> 00:19:33,080
like maybe ten lines of code with bash

454
00:19:30,890 --> 00:19:35,240
all the scripts are in a github repo

455
00:19:33,080 --> 00:19:38,330
afterwards so if you want to be a nice

456
00:19:35,240 --> 00:19:39,560
open source developer and fix it for me

457
00:19:38,330 --> 00:19:41,750
and make it in color and everything

458
00:19:39,560 --> 00:19:44,600
please do and if you find any any

459
00:19:41,750 --> 00:19:46,820
problems just report an issue on it so

460
00:19:44,600 --> 00:19:49,969
basically run it once take a shot run it

461
00:19:46,820 --> 00:19:53,629
again and you're gonna get the diff in

462
00:19:49,970 --> 00:19:55,100
this diff dot Mon file and basically be

463
00:19:53,630 --> 00:19:56,690
able to understand what happened so

464
00:19:55,100 --> 00:19:58,280
dynamic analysis what we're gonna do

465
00:19:56,690 --> 00:20:01,820
network analysis and we're gonna do file

466
00:19:58,280 --> 00:20:04,760
monitoring and this in here we've ran

467
00:20:01,820 --> 00:20:06,350
the malware and we saw the most

468
00:20:04,760 --> 00:20:11,240
important get requests I found was

469
00:20:06,350 --> 00:20:13,730
coming from here at Reuter comm and it

470
00:20:11,240 --> 00:20:16,940
was giving me this response it was an

471
00:20:13,730 --> 00:20:18,379
empty request just hitting that that

472
00:20:16,940 --> 00:20:21,139
that endpoint and giving me this

473
00:20:18,379 --> 00:20:23,658
response I don't hundred percent know

474
00:20:21,139 --> 00:20:25,609
exactly what's happening in here so I'm

475
00:20:23,659 --> 00:20:27,229
just gonna put it put a pin on it and

476
00:20:25,609 --> 00:20:31,249
put it to the side and see how it goes

477
00:20:27,229 --> 00:20:32,960
however a Droid or comm was associated

478
00:20:31,249 --> 00:20:34,159
with our X droid er and by the way the

479
00:20:32,960 --> 00:20:36,619
website is still alive

480
00:20:34,159 --> 00:20:39,289
so the malware authors didn't take it

481
00:20:36,619 --> 00:20:41,090
down and it is running a parts back-end

482
00:20:39,289 --> 00:20:44,359
if you go on it you're gonna see the

483
00:20:41,090 --> 00:20:45,590
default parts back-end dashboard I know

484
00:20:44,359 --> 00:20:46,970
that because I used to work as a

485
00:20:45,590 --> 00:20:50,629
software engineer and we actually use

486
00:20:46,970 --> 00:20:52,369
parts for for our back-end purposes so

487
00:20:50,629 --> 00:20:55,399
as soon as I entered on it I immediately

488
00:20:52,369 --> 00:20:57,738
recognized the parts back in page adroit

489
00:20:55,399 --> 00:21:00,080
order of comm so that's the from the

490
00:20:57,739 --> 00:21:02,080
network monitoring we had a get request

491
00:21:00,080 --> 00:21:05,059
with a bunch of commands happening

492
00:21:02,080 --> 00:21:06,859
coming from it in the file monitoring we

493
00:21:05,059 --> 00:21:08,470
saw that these are the files that

494
00:21:06,859 --> 00:21:13,279
changed the ones that are highlighted

495
00:21:08,470 --> 00:21:16,429
however most of them are actually not

496
00:21:13,279 --> 00:21:17,869
related to anything malicious most of

497
00:21:16,429 --> 00:21:20,779
them are coming from if you saw the last

498
00:21:17,869 --> 00:21:24,949
one here it's called fabric fabric is a

499
00:21:20,779 --> 00:21:26,330
beta testing SDK that the app happens to

500
00:21:24,950 --> 00:21:28,999
use there is another one called

501
00:21:26,330 --> 00:21:31,158
crashlytics crashlytics is a crash

502
00:21:28,999 --> 00:21:33,649
monitoring sdk that the app that the app

503
00:21:31,159 --> 00:21:35,450
happened to use there is a bunch of them

504
00:21:33,649 --> 00:21:37,758
are coming from org dot chromium dot

505
00:21:35,450 --> 00:21:39,950
webview those are webview cookies for

506
00:21:37,759 --> 00:21:42,710
advertisements most of these stuff are

507
00:21:39,950 --> 00:21:43,879
actually not 100% malicious if I saw

508
00:21:42,710 --> 00:21:46,460
something I don't know like sis

509
00:21:43,879 --> 00:21:48,889
underscore driver I'll be a little bit

510
00:21:46,460 --> 00:21:51,950
on the lookout but I didn't really find

511
00:21:48,889 --> 00:21:55,459
anything too malicious in here so with

512
00:21:51,950 --> 00:21:56,720
the dynamic analysis I found the network

513
00:21:55,460 --> 00:22:00,169
requests they get requests that I just

514
00:21:56,720 --> 00:22:01,729
talked about and the file monitoring

515
00:22:00,169 --> 00:22:04,099
couldn't really show me anything

516
00:22:01,729 --> 00:22:06,830
however there was a long-running service

517
00:22:04,099 --> 00:22:09,439
called over service and it was coming

518
00:22:06,830 --> 00:22:11,418
from the app a long-running task a task

519
00:22:09,440 --> 00:22:14,059
in the background running even if the

520
00:22:11,419 --> 00:22:15,649
app is closed and you're navigated to

521
00:22:14,059 --> 00:22:17,450
another app it's still running in the

522
00:22:15,649 --> 00:22:19,518
background that is very legal in the

523
00:22:17,450 --> 00:22:21,229
Android ecosystem and we found that that

524
00:22:19,519 --> 00:22:24,559
it's running in here would be cool to

525
00:22:21,229 --> 00:22:26,330
know what it's actually doing so we're

526
00:22:24,559 --> 00:22:29,330
actually almost at the end in here

527
00:22:26,330 --> 00:22:30,620
because the malware I know it's hit 200

528
00:22:29,330 --> 00:22:33,840
apps and it was

529
00:22:30,620 --> 00:22:36,840
purported to be pretty big Java bytecode

530
00:22:33,840 --> 00:22:39,270
is very easy to understand dalvik

531
00:22:36,840 --> 00:22:41,850
bytecode in this case so it's very easy

532
00:22:39,270 --> 00:22:43,950
to actually reverse it and understand

533
00:22:41,850 --> 00:22:46,230
how it goes each function is very

534
00:22:43,950 --> 00:22:48,060
clearly defined it's not it's not like

535
00:22:46,230 --> 00:22:51,750
you're reading arm instructions office

536
00:22:48,060 --> 00:22:54,090
kata through a virtual machine in that

537
00:22:51,750 --> 00:22:55,890
case I recommend that you guys see a

538
00:22:54,090 --> 00:22:57,689
talk that happened in hack in the box by

539
00:22:55,890 --> 00:22:59,340
mr. Alexander borkus who's standing

540
00:22:57,690 --> 00:23:04,050
right there about the obfuscating

541
00:22:59,340 --> 00:23:06,120
virtual machines so okay so static

542
00:23:04,050 --> 00:23:08,879
analysis stage this is what we're doing

543
00:23:06,120 --> 00:23:10,560
we're gonna enter one of those doors one

544
00:23:08,880 --> 00:23:13,170
of those main entry points and we can

545
00:23:10,560 --> 00:23:15,710
start from there we have a theory we

546
00:23:13,170 --> 00:23:18,420
have that we think that the app is

547
00:23:15,710 --> 00:23:20,670
downloading things from the c2 server

548
00:23:18,420 --> 00:23:24,480
and installing it locally and the other

549
00:23:20,670 --> 00:23:27,540
theory is that we we know that the app

550
00:23:24,480 --> 00:23:29,430
is doing some system overlays and we

551
00:23:27,540 --> 00:23:31,980
have those three doors from before the

552
00:23:29,430 --> 00:23:33,740
NL the artifact collection stage and

553
00:23:31,980 --> 00:23:36,330
we're gonna go into one of them

554
00:23:33,740 --> 00:23:39,890
whichever one that you want the one that

555
00:23:36,330 --> 00:23:42,240
I chose is one is unlock receiver and

556
00:23:39,890 --> 00:23:43,470
what unlock receiver does is that as

557
00:23:42,240 --> 00:23:46,110
soon as you enter your lock screen

558
00:23:43,470 --> 00:23:48,750
password and press the enter button and

559
00:23:46,110 --> 00:23:50,340
it's accepted this will run this piece

560
00:23:48,750 --> 00:23:52,320
of code will run immediately even if the

561
00:23:50,340 --> 00:23:55,620
app is not in the foreground so what

562
00:23:52,320 --> 00:23:58,679
this piece of code actually does I have

563
00:23:55,620 --> 00:24:00,750
a small summary on top and basically as

564
00:23:58,680 --> 00:24:02,760
soon as you run it it's going to launch

565
00:24:00,750 --> 00:24:05,610
it does this small mathematical

566
00:24:02,760 --> 00:24:08,940
calculation to determine time it's like

567
00:24:05,610 --> 00:24:11,280
I think it as far as I understood every

568
00:24:08,940 --> 00:24:13,320
60 thousand milliseconds it will launch

569
00:24:11,280 --> 00:24:15,660
it will check that if it has if it has

570
00:24:13,320 --> 00:24:17,970
launched within sixty thousand sorry

571
00:24:15,660 --> 00:24:21,420
sixty thousand seconds and it will

572
00:24:17,970 --> 00:24:24,480
launch again and it will launch last

573
00:24:21,420 --> 00:24:27,180
line in here over service the long

574
00:24:24,480 --> 00:24:30,390
running service that we found in here

575
00:24:27,180 --> 00:24:32,730
and a small analysis and here showed

576
00:24:30,390 --> 00:24:34,830
that this actually is the one

577
00:24:32,730 --> 00:24:36,600
responsible for screen overlays I know

578
00:24:34,830 --> 00:24:38,669
the codes a little bit complex in here

579
00:24:36,600 --> 00:24:40,500
but basically what it does is that as

580
00:24:38,670 --> 00:24:43,260
soon as the get request has this apk

581
00:24:40,500 --> 00:24:47,190
module JSON key

582
00:24:43,260 --> 00:24:49,169
if it exists it will go down and

583
00:24:47,190 --> 00:24:50,580
activate another function which I'm

584
00:24:49,169 --> 00:24:52,580
gonna talk about in the next slide if it

585
00:24:50,580 --> 00:24:56,730
doesn't exist it's gonna actually fetch

586
00:24:52,580 --> 00:25:00,059
a bunch of app names and it's going to

587
00:24:56,730 --> 00:25:03,840
display it either through market colon

588
00:25:00,059 --> 00:25:06,990
slash slash or nine apps callin slash

589
00:25:03,840 --> 00:25:09,330
slash it's gonna invoke that URL what

590
00:25:06,990 --> 00:25:11,790
does this URL do well mark it colon

591
00:25:09,330 --> 00:25:13,530
slash slash invokes Google Play so if

592
00:25:11,790 --> 00:25:15,750
you're right now on your browser on your

593
00:25:13,530 --> 00:25:18,660
Android browser market colon slash slash

594
00:25:15,750 --> 00:25:20,370
com dot Facebook dot katana that's the

595
00:25:18,660 --> 00:25:23,010
name of Facebook app on Android it's

596
00:25:20,370 --> 00:25:25,918
gonna launch the store page for Facebook

597
00:25:23,010 --> 00:25:29,040
and Google Play nine apps is the Google

598
00:25:25,919 --> 00:25:31,950
Play equivalent for India it's basically

599
00:25:29,040 --> 00:25:35,100
a Google Play it's a mark it's an app

600
00:25:31,950 --> 00:25:38,429
marketplace that's usually pretty famous

601
00:25:35,100 --> 00:25:40,949
in India and what it doesn't here is

602
00:25:38,429 --> 00:25:44,280
that it fetches the names of of packages

603
00:25:40,950 --> 00:25:45,660
of apps and it tries if you have Google

604
00:25:44,280 --> 00:25:47,428
Play it's gonna display it through

605
00:25:45,660 --> 00:25:49,440
Google Play if not it's gonna display

606
00:25:47,429 --> 00:25:51,000
through nine apps and it's gonna have

607
00:25:49,440 --> 00:25:52,559
that screen overlay as soon as you touch

608
00:25:51,000 --> 00:25:56,190
your button on on the Home Dashboard

609
00:25:52,559 --> 00:25:58,139
it's gonna go and activate the it's

610
00:25:56,190 --> 00:25:58,669
gonna go to the store page but why is it

611
00:25:58,140 --> 00:26:01,500
doing that

612
00:25:58,669 --> 00:26:05,190
it's basically running a click in the

613
00:26:01,500 --> 00:26:07,169
background for a network for a bunch of

614
00:26:05,190 --> 00:26:09,210
networks that are that are fetched

615
00:26:07,169 --> 00:26:11,250
another c2 server and it's telling that

616
00:26:09,210 --> 00:26:13,140
hey you just collected an advertisement

617
00:26:11,250 --> 00:26:15,780
and got redirected to the store page I'm

618
00:26:13,140 --> 00:26:18,540
gonna send a request to an attribution

619
00:26:15,780 --> 00:26:20,160
provider to tell them there was just a

620
00:26:18,540 --> 00:26:22,918
user that pressed on an advertisement

621
00:26:20,160 --> 00:26:24,630
click and that actually generates money

622
00:26:22,919 --> 00:26:26,760
that generates a lot of money for them

623
00:26:24,630 --> 00:26:31,080
there is something called click per

624
00:26:26,760 --> 00:26:34,620
click per install revenues CPI revenues

625
00:26:31,080 --> 00:26:36,689
those those make a lot of money and the

626
00:26:34,620 --> 00:26:39,199
idea behind it is that as soon as you're

627
00:26:36,690 --> 00:26:42,690
able to down to press the click in there

628
00:26:39,200 --> 00:26:45,540
possibly you will be able to open one of

629
00:26:42,690 --> 00:26:48,960
the installed apps that are installed

630
00:26:45,540 --> 00:26:50,790
through here so the c2 server's second

631
00:26:48,960 --> 00:26:53,549
functionality is that it will fetch a

632
00:26:50,790 --> 00:26:56,190
bunch of apps a bunch of apks and

633
00:26:53,549 --> 00:26:56,850
installs it locally in your device

634
00:26:56,190 --> 00:26:58,470
through

635
00:26:56,850 --> 00:27:01,040
this piece of code this piece of code if

636
00:26:58,470 --> 00:27:03,750
you give it in here for the Java devs

637
00:27:01,040 --> 00:27:06,600
Java dot IO dot file if you give it that

638
00:27:03,750 --> 00:27:08,700
file into the argument into if you pass

639
00:27:06,600 --> 00:27:10,709
it to this function and your wrong

640
00:27:08,700 --> 00:27:16,220
context that start activity it will

641
00:27:10,710 --> 00:27:18,570
install an apk on your device so that's

642
00:27:16,220 --> 00:27:19,770
it will install an apk on your device

643
00:27:18,570 --> 00:27:22,590
with all the permissions of the

644
00:27:19,770 --> 00:27:25,170
Installer application without your user

645
00:27:22,590 --> 00:27:27,330
consent there is no screen that gets

646
00:27:25,170 --> 00:27:30,120
displayed then you press yes on it so

647
00:27:27,330 --> 00:27:31,770
that's something interesting and we're

648
00:27:30,120 --> 00:27:35,520
done with the static analysis stage I

649
00:27:31,770 --> 00:27:37,800
believe I have two more minutes so what

650
00:27:35,520 --> 00:27:39,990
we found launched receiver door number

651
00:27:37,800 --> 00:27:41,340
one that we tried was door number was

652
00:27:39,990 --> 00:27:43,500
the lucky door we found everything we

653
00:27:41,340 --> 00:27:45,750
need from door number one it launches

654
00:27:43,500 --> 00:27:46,410
over service an over service is a

655
00:27:45,750 --> 00:27:49,920
long-running

656
00:27:46,410 --> 00:27:52,400
thread every 60,000 seconds is gonna

657
00:27:49,920 --> 00:27:55,710
make a fetch to the back end situ server

658
00:27:52,400 --> 00:27:58,980
gets a bunch of application names either

659
00:27:55,710 --> 00:28:03,710
it will display a store page or it will

660
00:27:58,980 --> 00:28:06,240
install the app locally that's basically

661
00:28:03,710 --> 00:28:09,930
the question is that we had the two

662
00:28:06,240 --> 00:28:11,730
questions that we had and yeah at this

663
00:28:09,930 --> 00:28:13,260
point you can continue the analysis

664
00:28:11,730 --> 00:28:15,090
stage you can even pen test the server

665
00:28:13,260 --> 00:28:18,330
if you'd like I believe I've I've

666
00:28:15,090 --> 00:28:20,909
written this I think ten or fifteen days

667
00:28:18,330 --> 00:28:23,399
ago as far as an as when I checked it it

668
00:28:20,910 --> 00:28:25,500
was the server was still live an analyst

669
00:28:23,400 --> 00:28:27,690
could contact Google Play right now just

670
00:28:25,500 --> 00:28:29,550
like check pointed however for my

671
00:28:27,690 --> 00:28:32,400
purposes we wanted to know the technique

672
00:28:29,550 --> 00:28:35,669
of why did this how did this malware do

673
00:28:32,400 --> 00:28:37,800
what it's doing and these are the

674
00:28:35,670 --> 00:28:42,390
techniques that are there and we're done

675
00:28:37,800 --> 00:28:45,149
with the analysis this I believe is my

676
00:28:42,390 --> 00:28:47,610
last slide conclusions and final

677
00:28:45,150 --> 00:28:51,540
thoughts the idea here was to keep

678
00:28:47,610 --> 00:28:53,520
everything on a very much a sane level I

679
00:28:51,540 --> 00:28:56,430
didn't enter any rabbit holes I didn't

680
00:28:53,520 --> 00:28:58,170
go too much into dalvik vm z RX Reuter

681
00:28:56,430 --> 00:29:01,050
is actually a pretty big library however

682
00:28:58,170 --> 00:29:04,020
i only picked two functions of it that

683
00:29:01,050 --> 00:29:08,850
actually do the entire problem that do

684
00:29:04,020 --> 00:29:11,430
the entire payloads that i'm looking for

685
00:29:08,850 --> 00:29:14,129
we can go into more details in it

686
00:29:11,430 --> 00:29:15,720
however it depends on the pre analysis

687
00:29:14,130 --> 00:29:19,470
stage what you're actually trying to

688
00:29:15,720 --> 00:29:21,210
achieve with this analysis so most of

689
00:29:19,470 --> 00:29:22,710
the one last thing most of an Android

690
00:29:21,210 --> 00:29:24,660
application as well as an iOS

691
00:29:22,710 --> 00:29:26,430
application is not actually written by

692
00:29:24,660 --> 00:29:28,770
the developer that saved me a lot of

693
00:29:26,430 --> 00:29:30,810
time I didn't have to reverse SQLite

694
00:29:28,770 --> 00:29:32,010
libraries because why would I it's not

695
00:29:30,810 --> 00:29:35,879
it's not something that the developer

696
00:29:32,010 --> 00:29:37,620
wrote that's pretty much it here are

697
00:29:35,880 --> 00:29:39,300
some references I believe the material

698
00:29:37,620 --> 00:29:42,179
and this slide will be shared in hacking

699
00:29:39,300 --> 00:29:43,409
the box.com so you will be able to press

700
00:29:42,180 --> 00:29:47,280
all the buttons that you want in here

701
00:29:43,410 --> 00:29:49,710
and that's pretty much it

702
00:29:47,280 --> 00:29:52,980
ah thank you so very much thank you

703
00:29:49,710 --> 00:29:55,170
Abdullah it was a nice talk looking at

704
00:29:52,980 --> 00:29:57,150
the time we currently do not have any

705
00:29:55,170 --> 00:30:00,390
time for new questions the next speaker

706
00:29:57,150 --> 00:30:02,040
is already waiting to enter the stage

707
00:30:00,390 --> 00:30:02,790
whoever has any questions you can just

708
00:30:02,040 --> 00:30:04,800
find me outside

709
00:30:02,790 --> 00:30:07,110
yeah you can answer some questions

710
00:30:04,800 --> 00:30:10,790
outside thank you for your brilliant

711
00:30:07,110 --> 00:30:10,790
talk about reversing malware

712
00:30:16,950 --> 00:30:19,010
you

