1
00:00:26,940 --> 00:00:34,770
hello-o welcome to our sharing and

2
00:00:31,610 --> 00:00:38,309
sharing is about fuzzy it is not about

3
00:00:34,770 --> 00:00:39,750
that it's quite okay and firstly let me

4
00:00:38,309 --> 00:00:42,780
introduce ourselves

5
00:00:39,750 --> 00:00:46,980
this is me my name is curating and my

6
00:00:42,780 --> 00:00:50,370
twitter account is panic III and I'm a

7
00:00:46,980 --> 00:00:54,290
senior staff engineer from China micro

8
00:00:50,370 --> 00:00:59,360
and I've used this tool to find a lot of

9
00:00:54,290 --> 00:01:06,690
vulnerabilities and got several CVS and

10
00:00:59,360 --> 00:01:11,280
last year I gave presentations in record

11
00:01:06,690 --> 00:01:17,310
you and color blue Tokyo and this is my

12
00:01:11,280 --> 00:01:21,780
chronic ginger era my name is ginger and

13
00:01:17,310 --> 00:01:24,930
I'm a worker at random echo as in the

14
00:01:21,780 --> 00:01:28,500
amount to mobile security researcher and

15
00:01:24,930 --> 00:01:34,890
I have found some fewer three years

16
00:01:28,500 --> 00:01:37,020
thank you okay this is today's agenda in

17
00:01:34,890 --> 00:01:40,050
the first part I will introduce what is

18
00:01:37,020 --> 00:01:43,949
the pending xnu and the second part is

19
00:01:40,050 --> 00:01:46,560
Excel version one to version 3 actually

20
00:01:43,950 --> 00:01:50,030
the version one is about the Cisco fuzzy

21
00:01:46,560 --> 00:01:53,880
which which was the one I have

22
00:01:50,030 --> 00:01:57,509
penetrated industry years record you and

23
00:01:53,880 --> 00:02:00,530
the pending child Excel version two is

24
00:01:57,509 --> 00:02:03,660
actually the al-kidd active fuzzing the

25
00:02:00,530 --> 00:02:06,569
version 3 is it about the possible

26
00:02:03,660 --> 00:02:08,549
fuzzing next part my colleague dream

27
00:02:06,569 --> 00:02:10,860
sugar will introduce the fastening

28
00:02:08,550 --> 00:02:14,970
visualization and at any operation and

29
00:02:10,860 --> 00:02:17,790
as a last part if we have time enough

30
00:02:14,970 --> 00:02:18,840
time I will show you some very simple

31
00:02:17,790 --> 00:02:23,970
case study

32
00:02:18,840 --> 00:02:28,379
ok let me introduce our what is pending

33
00:02:23,970 --> 00:02:31,950
axon you actually it is the axon your

34
00:02:28,379 --> 00:02:34,260
father is it now suppose cisco father

35
00:02:31,950 --> 00:02:37,649
and al qaeda father maybe in the future

36
00:02:34,260 --> 00:02:40,109
we can extend the ability to support

37
00:02:37,650 --> 00:02:44,820
cannot extension and share

38
00:02:40,110 --> 00:02:45,720
and so it is based on Coco's famous

39
00:02:44,820 --> 00:02:52,920
father

40
00:02:45,720 --> 00:02:57,210
syz color you can see this picture this

41
00:02:52,920 --> 00:03:00,839
page was created after - tiara pre head

42
00:02:57,210 --> 00:03:04,310
talk and the owner of this cornered

43
00:03:00,840 --> 00:03:08,700
created this page he mentioned that I

44
00:03:04,310 --> 00:03:11,570
had spotted his collar to support apples

45
00:03:08,700 --> 00:03:15,869
accent as you may know his collar

46
00:03:11,570 --> 00:03:20,579
supports and enjoy Linux and even

47
00:03:15,870 --> 00:03:25,320
windows / italian support Mac OS and it

48
00:03:20,580 --> 00:03:28,910
also just - Cisco falling in this talk I

49
00:03:25,320 --> 00:03:32,630
will share you about the pending

50
00:03:28,910 --> 00:03:37,079
acceleration story which supports xnu

51
00:03:32,630 --> 00:03:41,120
fuzzy include the Cisco fuzzy and al

52
00:03:37,080 --> 00:03:45,209
qaida falling this is the architecture

53
00:03:41,120 --> 00:03:49,010
funding architecture it is almost the

54
00:03:45,209 --> 00:03:51,510
same with as well the corner it has two

55
00:03:49,010 --> 00:03:54,510
components the server side and the

56
00:03:51,510 --> 00:03:58,049
client side step step and any introduce

57
00:03:54,510 --> 00:04:00,840
the workflow step one it will the server

58
00:03:58,050 --> 00:04:04,160
side will starts the kindest crime side

59
00:04:00,840 --> 00:04:06,780
and step two the syntax engine or the

60
00:04:04,160 --> 00:04:10,170
generation engine we on those the API

61
00:04:06,780 --> 00:04:14,519
patents and the corporate EP the it will

62
00:04:10,170 --> 00:04:17,399
generate some Cisco requests and the

63
00:04:14,519 --> 00:04:21,358
steps three mutation engine also can be

64
00:04:17,399 --> 00:04:25,620
rotated some parameters for this API

65
00:04:21,358 --> 00:04:30,770
cause step 4 API as future will receive

66
00:04:25,620 --> 00:04:37,620
this parameters and to the real request

67
00:04:30,770 --> 00:04:40,740
after each Cisco or alkyl car with the

68
00:04:37,620 --> 00:04:43,790
return value at the step 7 it it will

69
00:04:40,740 --> 00:04:50,160
check whether the return value has some

70
00:04:43,790 --> 00:04:53,820
hip memory disk Laura and at step 8 the

71
00:04:50,160 --> 00:05:00,030
APS killer will also update the car

72
00:04:53,820 --> 00:05:05,010
to the covers DB so this this tour is

73
00:05:00,030 --> 00:05:08,039
based on code coverage driven so I must

74
00:05:05,010 --> 00:05:11,310
add a support for the coverage in

75
00:05:08,040 --> 00:05:14,760
current axial kernel you can see these

76
00:05:11,310 --> 00:05:17,070
pictures that I developed several

77
00:05:14,760 --> 00:05:20,130
sanitizers expansion is the code

78
00:05:17,070 --> 00:05:22,170
coverage sanitizer imposed the PSD

79
00:05:20,130 --> 00:05:27,240
subsystem and the al-kidd

80
00:05:22,170 --> 00:05:31,140
subsystem in this talk I think the most

81
00:05:27,240 --> 00:05:36,780
important thing is the coverage support

82
00:05:31,140 --> 00:05:41,070
in our kit ok before we delve into the

83
00:05:36,780 --> 00:05:44,039
later sessions and then me introduce two

84
00:05:41,070 --> 00:05:46,950
terms the first one is patent the next

85
00:05:44,040 --> 00:05:50,010
one is corporis peasant is action is the

86
00:05:46,950 --> 00:05:55,050
API syntax description and as the corpus

87
00:05:50,010 --> 00:05:58,740
focus on the parameters for the API okay

88
00:05:55,050 --> 00:06:01,440
let me introduce pending xnu version 1

89
00:05:58,740 --> 00:06:04,590
this is as mentioned before this is

90
00:06:01,440 --> 00:06:08,400
actually the one I already talked about

91
00:06:04,590 --> 00:06:12,179
and that's the year blackhat EU and you

92
00:06:08,400 --> 00:06:17,310
can simply say you can take it as sis

93
00:06:12,180 --> 00:06:22,130
collar for Apple X nu and I wrote more

94
00:06:17,310 --> 00:06:25,200
than 500 API patterns also as well as

95
00:06:22,130 --> 00:06:29,760
several sanitizers including the code

96
00:06:25,200 --> 00:06:34,050
coverage and I use this tool find more

97
00:06:29,760 --> 00:06:41,300
than 50 as his car crashes including two

98
00:06:34,050 --> 00:06:44,430
for the Pantone Mac OS 10 point 14 I

99
00:06:41,300 --> 00:06:46,560
already talked about the version 1 in

100
00:06:44,430 --> 00:06:51,510
that's the year's parent ation and today

101
00:06:46,560 --> 00:06:53,640
I will give you two more chill at UM's

102
00:06:51,510 --> 00:06:56,460
the first one is about how to add

103
00:06:53,640 --> 00:06:59,250
support for BSD code coverage and the

104
00:06:56,460 --> 00:07:03,450
second one is how to enable kuno

105
00:06:59,250 --> 00:07:06,720
addressed sanitizer let's focus on the

106
00:07:03,450 --> 00:07:07,800
first question how to edit PSD equal

107
00:07:06,720 --> 00:07:10,380
coverage in two

108
00:07:07,800 --> 00:07:14,610
Karin accent your source code i

109
00:07:10,380 --> 00:07:18,360
developed a module named cake cover very

110
00:07:14,610 --> 00:07:21,600
similar to the one in linux and this

111
00:07:18,360 --> 00:07:24,210
module includes two major parts the

112
00:07:21,600 --> 00:07:26,730
first first part is the function

113
00:07:24,210 --> 00:07:29,640
sanitizer covered with specie this

114
00:07:26,730 --> 00:07:33,980
function is used to extract the code

115
00:07:29,640 --> 00:07:37,409
coverage data and the second one is I

116
00:07:33,980 --> 00:07:40,320
register itself as a kernel extension

117
00:07:37,410 --> 00:07:43,890
module to send back the code coverage

118
00:07:40,320 --> 00:07:48,750
data back to to the user mode fuzzing

119
00:07:43,890 --> 00:07:51,960
tour and in order to compare this module

120
00:07:48,750 --> 00:07:54,140
into the current acts in your source

121
00:07:51,960 --> 00:07:56,520
code we need to update some

122
00:07:54,140 --> 00:08:00,570
configuration files for example the

123
00:07:56,520 --> 00:08:05,729
master Ferrell's the first make felt or

124
00:08:00,570 --> 00:08:09,540
template and let's see this is an

125
00:08:05,730 --> 00:08:13,620
example how I register itself as a color

126
00:08:09,540 --> 00:08:17,940
extension module in inside the OSF MK it

127
00:08:13,620 --> 00:08:21,240
is very strange for I implement some

128
00:08:17,940 --> 00:08:24,480
functions next okay come open close read

129
00:08:21,240 --> 00:08:28,770
our control and please pay attention

130
00:08:24,480 --> 00:08:34,440
here I implements this K comma model in

131
00:08:28,770 --> 00:08:39,329
inside OS f MK note the PSD subsystem so

132
00:08:34,440 --> 00:08:44,310
you when your calls devfs make load

133
00:08:39,330 --> 00:08:47,730
don't use make dev macro because it is

134
00:08:44,310 --> 00:08:50,880
different between the OSF MK subsystem

135
00:08:47,730 --> 00:08:54,050
and as a PSD subsystem you can see that

136
00:08:50,880 --> 00:09:00,060
the first parameter I use the hard code

137
00:08:54,050 --> 00:09:03,479
value and you can see the picture here I

138
00:09:00,060 --> 00:09:07,260
already a sucessful successfully is

139
00:09:03,480 --> 00:09:12,000
inject our synthetic country's PC

140
00:09:07,260 --> 00:09:14,760
function into some basic blocks you now

141
00:09:12,000 --> 00:09:18,000
you can use genetic acronym of falling

142
00:09:14,760 --> 00:09:21,240
to do the further fuzzing

143
00:09:18,000 --> 00:09:27,210
smoothly here is

144
00:09:21,240 --> 00:09:31,650
here has a very small problem that if we

145
00:09:27,210 --> 00:09:35,570
want to do some fuzzing visualization it

146
00:09:31,650 --> 00:09:37,829
is not good with such kind

147
00:09:35,570 --> 00:09:41,820
instrumentation because you can see that

148
00:09:37,830 --> 00:09:44,270
there are several blocks without the

149
00:09:41,820 --> 00:09:50,040
Senate other countries PC

150
00:09:44,270 --> 00:09:52,439
instrumentation point our question - how

151
00:09:50,040 --> 00:09:55,589
to enable pizza

152
00:09:52,440 --> 00:09:57,710
you mean the node is a source code of X

153
00:09:55,590 --> 00:10:01,020
nu and compile it

154
00:09:57,710 --> 00:10:04,560
maybe in release mode debug mode and

155
00:10:01,020 --> 00:10:07,199
even kisum mode but if you try that in

156
00:10:04,560 --> 00:10:11,010
case our model you make you can get the

157
00:10:07,200 --> 00:10:14,760
output the kernel being output but if

158
00:10:11,010 --> 00:10:18,390
you try to put it with put your machine

159
00:10:14,760 --> 00:10:19,410
with kiss on Colonel you may find that

160
00:10:18,390 --> 00:10:23,310
it count

161
00:10:19,410 --> 00:10:27,870
it will feel it can't put your machine

162
00:10:23,310 --> 00:10:32,130
the real cost is that during the boot

163
00:10:27,870 --> 00:10:35,220
stage some concerns top functions will

164
00:10:32,130 --> 00:10:38,610
checks the shadow memory but the channel

165
00:10:35,220 --> 00:10:44,040
memory is not initialized at that stage

166
00:10:38,610 --> 00:10:47,400
so the workaround is as Bulow's we can

167
00:10:44,040 --> 00:10:50,310
as the below functions into the case on

168
00:10:47,400 --> 00:10:54,410
black list for Apple Apple Apple

169
00:10:50,310 --> 00:10:57,530
applause such kind then combined again

170
00:10:54,410 --> 00:11:02,730
you can post the case on kuno

171
00:10:57,530 --> 00:11:06,180
successfully okay this is pending

172
00:11:02,730 --> 00:11:08,400
execution - I will kill active fuzzy I

173
00:11:06,180 --> 00:11:13,229
think this part is the most important

174
00:11:08,400 --> 00:11:17,790
part in today's talk and I will describe

175
00:11:13,230 --> 00:11:21,560
it in details it is also it is still

176
00:11:17,790 --> 00:11:27,089
based on this collar and it so it is

177
00:11:21,560 --> 00:11:31,319
coverage children in order to make it

178
00:11:27,090 --> 00:11:35,190
works we must develop a some API

179
00:11:31,320 --> 00:11:36,720
patterns in for for the alkyl module

180
00:11:35,190 --> 00:11:39,810
but a human knows that I'll kill the

181
00:11:36,720 --> 00:11:43,769
modules most of them are closest not

182
00:11:39,810 --> 00:11:48,170
open source so we used reverse

183
00:11:43,769 --> 00:11:52,610
engineering to extract some API patents

184
00:11:48,170 --> 00:11:55,378
okay in order to users is calling for

185
00:11:52,610 --> 00:11:58,350
fuzzing our key modules we must they

186
00:11:55,379 --> 00:12:02,459
have alkyl api patents and we must they

187
00:11:58,350 --> 00:12:07,110
have the out kid APR 14 that we must

188
00:12:02,459 --> 00:12:08,660
have the module code coverage data or if

189
00:12:07,110 --> 00:12:14,250
you don't have the code coveted

190
00:12:08,660 --> 00:12:18,000
higher-order smart right and as as for

191
00:12:14,250 --> 00:12:19,620
the api patterns weak for the open

192
00:12:18,000 --> 00:12:22,199
source alkyl modules you can just

193
00:12:19,620 --> 00:12:24,269
extract to the api patterns directly

194
00:12:22,199 --> 00:12:28,229
from the source code but for those

195
00:12:24,269 --> 00:12:31,490
closest alkyl modules we mainly use the

196
00:12:28,230 --> 00:12:34,259
reverse engineering and other methods

197
00:12:31,490 --> 00:12:37,560
okay now sees the alkyl attack surface

198
00:12:34,259 --> 00:12:41,910
firstly in current xnu

199
00:12:37,560 --> 00:12:45,300
there are several subsystems in this

200
00:12:41,910 --> 00:12:48,360
talk we focus on the alkyl subsystem and

201
00:12:45,300 --> 00:12:55,649
inside the alkyl subsystems there are

202
00:12:48,360 --> 00:12:58,139
total 88 interfaces and in the next

203
00:12:55,649 --> 00:13:02,610
session in the following sections we

204
00:12:58,139 --> 00:13:06,720
only take the I'll connect method as an

205
00:13:02,610 --> 00:13:09,000
example okay how to extract the route

206
00:13:06,720 --> 00:13:11,759
connecting method patents because this

207
00:13:09,000 --> 00:13:14,459
this interface is a very famous

208
00:13:11,759 --> 00:13:18,589
interface and is a very big attack

209
00:13:14,459 --> 00:13:23,069
surface we can extract the API patterns

210
00:13:18,589 --> 00:13:26,069
maybe you can write a script to extract

211
00:13:23,069 --> 00:13:29,430
the pattern from the structural tables

212
00:13:26,069 --> 00:13:34,139
as method and as is patch but for those

213
00:13:29,430 --> 00:13:36,329
and structural code you can only use the

214
00:13:34,139 --> 00:13:41,309
reverse engineering to extract the API

215
00:13:36,329 --> 00:13:42,660
patterns okay now see the result our

216
00:13:41,309 --> 00:13:46,469
current nav

217
00:13:42,660 --> 00:13:49,079
already extract some API patterns from a

218
00:13:46,470 --> 00:13:53,610
lot of our kid modules

219
00:13:49,080 --> 00:13:58,230
for examples a celebrated family the LAV

220
00:13:53,610 --> 00:14:02,450
be family and a charity family and soul

221
00:13:58,230 --> 00:14:08,550
Nastia example the apple of the keystore

222
00:14:02,450 --> 00:14:11,820
this is an example in this module you

223
00:14:08,550 --> 00:14:15,060
can see that there are many just three

224
00:14:11,820 --> 00:14:18,020
men a master as well as the open surface

225
00:14:15,060 --> 00:14:21,630
as well as the core method and syz close

226
00:14:18,020 --> 00:14:25,079
service the most important one is as

227
00:14:21,630 --> 00:14:29,130
well as a co master after reverse

228
00:14:25,080 --> 00:14:34,200
engineering we found the suti once in

229
00:14:29,130 --> 00:14:39,800
actors for this module and you can see

230
00:14:34,200 --> 00:14:45,210
the selector with value 1 it maps to the

231
00:14:39,800 --> 00:14:48,449
function user kind close and we get the

232
00:14:45,210 --> 00:14:52,920
information that all the parameters are

233
00:14:48,450 --> 00:14:57,090
0 all these results are from reverse

234
00:14:52,920 --> 00:15:00,479
engineering and so the reverse

235
00:14:57,090 --> 00:15:04,110
engineering seems were important and the

236
00:15:00,480 --> 00:15:08,220
our father depends on it heavily so if

237
00:15:04,110 --> 00:15:12,150
we have some mistakes in the reverse

238
00:15:08,220 --> 00:15:16,140
engineering the the following generation

239
00:15:12,150 --> 00:15:19,470
or mutation fuzzing is totally wrong so

240
00:15:16,140 --> 00:15:20,960
how to review if our reverse engineering

241
00:15:19,470 --> 00:15:25,440
is right

242
00:15:20,960 --> 00:15:29,180
ok I have several methods first one

243
00:15:25,440 --> 00:15:33,060
don't depend on the reverse engineering

244
00:15:29,180 --> 00:15:35,189
so we have the positive falling took and

245
00:15:33,060 --> 00:15:38,520
combined the passive and is the active

246
00:15:35,190 --> 00:15:42,840
to make it what's that important

247
00:15:38,520 --> 00:15:46,189
important and we can also with the help

248
00:15:42,840 --> 00:15:51,870
of funding visualization to check if the

249
00:15:46,190 --> 00:15:53,100
reverse results is a right the second

250
00:15:51,870 --> 00:15:56,160
one

251
00:15:53,100 --> 00:16:00,710
currently the acuter don't support our

252
00:15:56,160 --> 00:16:03,569
kid so we must add support for the alkyd

253
00:16:00,710 --> 00:16:09,239
commercial for example

254
00:16:03,569 --> 00:16:12,988
I don't change any car in general is his

255
00:16:09,239 --> 00:16:16,230
car API skilled I just resigned they'll

256
00:16:12,989 --> 00:16:20,970
call in as well as they call method and

257
00:16:16,230 --> 00:16:23,879
you can see if there's a fuzzing request

258
00:16:20,970 --> 00:16:28,109
it will cause cure disease called and

259
00:16:23,879 --> 00:16:32,069
since the column is not empty so the

260
00:16:28,109 --> 00:16:36,179
function in inside the column will be

261
00:16:32,069 --> 00:16:38,790
coded directly and the method is

262
00:16:36,179 --> 00:16:44,869
actually the sy the call method I

263
00:16:38,790 --> 00:16:48,179
implement this function in this project

264
00:16:44,869 --> 00:16:51,299
okay let's focus on the most important

265
00:16:48,179 --> 00:16:55,559
thing how to get the code coverage from

266
00:16:51,299 --> 00:16:59,459
those close sauce al-qaida modules there

267
00:16:55,559 --> 00:17:04,109
may be several mess messes for example

268
00:16:59,459 --> 00:17:08,760
TBI SPI or even in her PT but I don't

269
00:17:04,109 --> 00:17:17,010
find any existing solution or projects

270
00:17:08,760 --> 00:17:20,459
for the Mac OS or EPOS tunnel and I

271
00:17:17,010 --> 00:17:24,529
decided to use the SPI function to get

272
00:17:20,459 --> 00:17:27,480
the call coverage for the Epis kernel

273
00:17:24,529 --> 00:17:31,139
especially for those closest alkyl

274
00:17:27,480 --> 00:17:36,149
modules I caused the SPI idea from the

275
00:17:31,139 --> 00:17:41,519
project PB il okay now see what what all

276
00:17:36,149 --> 00:17:45,449
it means this is an example of a pro FD

277
00:17:41,519 --> 00:17:49,529
kiss talk it is now this picture to

278
00:17:45,450 --> 00:17:52,710
describe some instructions before any

279
00:17:49,529 --> 00:17:56,639
SPI you can see that the first

280
00:17:52,710 --> 00:18:01,409
instruction is push RTP is a move a ppsv

281
00:17:56,639 --> 00:18:03,299
and so let's see the result after my SPI

282
00:18:01,409 --> 00:18:08,190
you can see that the first instruction

283
00:18:03,299 --> 00:18:11,789
becomes a jump instruction Chester it

284
00:18:08,190 --> 00:18:15,120
seems that it is patched and it directly

285
00:18:11,789 --> 00:18:16,500
jump to another function so what is the

286
00:18:15,120 --> 00:18:17,280
target of function you can see is

287
00:18:16,500 --> 00:18:21,930
attacked finished

288
00:18:17,280 --> 00:18:26,040
Naxos the target function seems almost

289
00:18:21,930 --> 00:18:31,520
the same with the previous original

290
00:18:26,040 --> 00:18:35,340
function except that as the at each

291
00:18:31,520 --> 00:18:39,030
basic block at the start of each basic

292
00:18:35,340 --> 00:18:41,310
block in a course shell code the the

293
00:18:39,030 --> 00:18:44,700
shell code you can implement so whatever

294
00:18:41,310 --> 00:18:48,480
you want in the shell code in in in this

295
00:18:44,700 --> 00:18:52,470
talk I just use the shell code to

296
00:18:48,480 --> 00:18:57,270
extract the code coverage okay so this

297
00:18:52,470 --> 00:19:00,750
is main idea of our spi and you can see

298
00:18:57,270 --> 00:19:04,770
this picture is an example of our with

299
00:19:00,750 --> 00:19:09,120
one result so what is the difference is

300
00:19:04,770 --> 00:19:15,030
between the before spi and the aft as bi

301
00:19:09,120 --> 00:19:19,320
you can see that before as well it only

302
00:19:15,030 --> 00:19:24,030
has one of texture section but after SPI

303
00:19:19,320 --> 00:19:28,020
it has two texture section segments the

304
00:19:24,030 --> 00:19:30,690
the next one in kenapa wrong is the

305
00:19:28,020 --> 00:19:34,800
original texture segment and is the the

306
00:19:30,690 --> 00:19:44,490
next of the right one in blue is my

307
00:19:34,800 --> 00:19:49,409
clone spi text segment segment okay this

308
00:19:44,490 --> 00:19:54,480
is the differences so let me introduce

309
00:19:49,410 --> 00:20:00,840
other details about how to do the spi

310
00:19:54,480 --> 00:20:02,850
for the kernel Marco Marco fares there

311
00:20:00,840 --> 00:20:07,709
are three paths first one you must

312
00:20:02,850 --> 00:20:10,110
update the text section and the second

313
00:20:07,710 --> 00:20:12,810
one is you must update the relocation

314
00:20:10,110 --> 00:20:16,189
and the third part is that you must

315
00:20:12,810 --> 00:20:21,530
update the macro file structure I think

316
00:20:16,190 --> 00:20:30,290
the first one is is the most important

317
00:20:21,530 --> 00:20:33,830
you must fix all the other target

318
00:20:30,290 --> 00:20:36,530
actions and in our torah we only focus

319
00:20:33,830 --> 00:20:38,659
on the instruction type or memory and

320
00:20:36,530 --> 00:20:42,129
the all new and follow those

321
00:20:38,660 --> 00:20:45,800
instructions we fix the jump table and

322
00:20:42,130 --> 00:20:49,310
fix the Neo champ and fix the operand

323
00:20:45,800 --> 00:20:54,710
value for the second part we master fix

324
00:20:49,310 --> 00:20:58,810
moko and external relocation okay just a

325
00:20:54,710 --> 00:21:03,110
jump to the first apart updates the text

326
00:20:58,810 --> 00:21:08,179
section as mentioned before for the

327
00:21:03,110 --> 00:21:14,379
original function ABC I just patch it to

328
00:21:08,180 --> 00:21:19,400
let it jump to my new SPI function

329
00:21:14,380 --> 00:21:22,400
xxxxxx and the new function is almost

330
00:21:19,400 --> 00:21:25,640
the same they it has the same three

331
00:21:22,400 --> 00:21:28,580
blocks block 1 block 2 and block 3 the

332
00:21:25,640 --> 00:21:31,220
difference is is that it costs the

333
00:21:28,580 --> 00:21:35,449
shellcode why why why why why and the

334
00:21:31,220 --> 00:21:42,550
every start instruction of the three

335
00:21:35,450 --> 00:21:46,610
basic blocks in case this is SPI and

336
00:21:42,550 --> 00:21:51,740
here is the fullness of the instruction

337
00:21:46,610 --> 00:21:56,330
type I guess this list from the ITAR

338
00:21:51,740 --> 00:21:59,870
scripts and we only focus on the memory

339
00:21:56,330 --> 00:22:04,580
type instruction and the new tab

340
00:21:59,870 --> 00:22:07,370
instruction here is an example about how

341
00:22:04,580 --> 00:22:14,030
to fix the new jam and is fixed operand

342
00:22:07,370 --> 00:22:18,679
value for example the left picture is is

343
00:22:14,030 --> 00:22:22,190
the source code of the panel view of

344
00:22:18,680 --> 00:22:26,810
apple of the keystore before spi you can

345
00:22:22,190 --> 00:22:30,650
see the the last instruction JBE short

346
00:22:26,810 --> 00:22:36,080
Norco sleepy 1/8 let's take it as an

347
00:22:30,650 --> 00:22:39,940
example we musta fix the operand t2 to

348
00:22:36,080 --> 00:22:43,129
see for this is because we add so many

349
00:22:39,940 --> 00:22:44,020
instruction points the core shell code

350
00:22:43,130 --> 00:22:47,860
at

351
00:22:44,020 --> 00:22:51,790
each basic blocks so we must fix the

352
00:22:47,860 --> 00:22:54,189
relative jump if not it will jump to the

353
00:22:51,790 --> 00:22:56,440
one wrong address

354
00:22:54,190 --> 00:23:01,870
right so we master fix the operand value

355
00:22:56,440 --> 00:23:06,190
and we we also muster fix the new jump

356
00:23:01,870 --> 00:23:10,209
too far jump this is the cost it it is

357
00:23:06,190 --> 00:23:13,179
the same reason because we add the

358
00:23:10,210 --> 00:23:18,309
instruction instrumentation points so it

359
00:23:13,179 --> 00:23:20,710
may jump other sites the original scope

360
00:23:18,309 --> 00:23:28,059
because the short jump can only jump to

361
00:23:20,710 --> 00:23:32,650
vising FF scope periscope right and this

362
00:23:28,059 --> 00:23:39,178
is an East in our tour that we replace

363
00:23:32,650 --> 00:23:39,179
the other short jumps to the non champs

364
00:23:39,780 --> 00:23:46,990
another question is about the jump table

365
00:23:42,820 --> 00:23:50,439
you may see that in Apple's Mac hole

366
00:23:46,990 --> 00:23:54,520
that you can always see some jump tables

367
00:23:50,440 --> 00:23:56,280
jump table is the data in text it is

368
00:23:54,520 --> 00:24:00,250
very special

369
00:23:56,280 --> 00:24:04,059
during in our SPI we must recognize it

370
00:24:00,250 --> 00:24:08,620
as data instead of text or everything

371
00:24:04,059 --> 00:24:11,800
will run and after recognize it we

372
00:24:08,620 --> 00:24:16,030
master fix it because every entry in the

373
00:24:11,800 --> 00:24:20,320
jump table points to the original text

374
00:24:16,030 --> 00:24:23,620
code branches we must fix it to netted

375
00:24:20,320 --> 00:24:25,659
Gemma to our new SPI texture called

376
00:24:23,620 --> 00:24:30,629
branches okay

377
00:24:25,660 --> 00:24:34,540
how to recognize it I have a workaround

378
00:24:30,630 --> 00:24:40,990
first you can check the first

379
00:24:34,540 --> 00:24:45,659
instruction ali-a is jpt - 3 of 7 this

380
00:24:40,990 --> 00:24:49,750
instruction is of type all all new and

381
00:24:45,660 --> 00:24:56,200
then we can check the tape of the target

382
00:24:49,750 --> 00:24:57,610
address TPT's so f7 it locates in inside

383
00:24:56,200 --> 00:25:03,330
the text section

384
00:24:57,610 --> 00:25:08,080
but it doesn't belong to any basic block

385
00:25:03,330 --> 00:25:12,990
then we check every entries inside this

386
00:25:08,080 --> 00:25:17,049
jump table to see if all of the entries

387
00:25:12,990 --> 00:25:21,940
jumps to the existing basic blocks

388
00:25:17,049 --> 00:25:24,790
if yes with the ticket a jump table okay

389
00:25:21,940 --> 00:25:27,730
how to recognize it and how to fix it

390
00:25:24,790 --> 00:25:31,928
during the SPI it is very simple just

391
00:25:27,730 --> 00:25:35,440
the update is the value of this jump

392
00:25:31,929 --> 00:25:41,200
table entries to make it points to the

393
00:25:35,440 --> 00:25:46,740
new code branch in the SPI text so this

394
00:25:41,200 --> 00:25:53,320
is how we fix it just the update is the

395
00:25:46,740 --> 00:25:56,020
entry entries okay the next part about

396
00:25:53,320 --> 00:25:59,889
the relocation firstly what is in

397
00:25:56,020 --> 00:26:04,059
occasion you can see an example here in

398
00:25:59,890 --> 00:26:08,290
in the at our view we can see there's an

399
00:26:04,059 --> 00:26:12,010
instruction call l3 but if you open the

400
00:26:08,290 --> 00:26:15,070
app of the keystore module with the hex

401
00:26:12,010 --> 00:26:18,940
in hex mode you can see that yes the

402
00:26:15,070 --> 00:26:19,899
avocado is ie8 but the operand value is

403
00:26:18,940 --> 00:26:24,070
0

404
00:26:19,900 --> 00:26:29,919
so how add our order or the system knows

405
00:26:24,070 --> 00:26:36,100
here is Alfre it's simple because the

406
00:26:29,919 --> 00:26:39,600
relocation tables record here that as

407
00:26:36,100 --> 00:26:44,439
the offset one eight six one

408
00:26:39,600 --> 00:26:48,480
it is the symbol l3 so here comes

409
00:26:44,440 --> 00:26:51,520
another question for us for the spi

410
00:26:48,480 --> 00:26:56,140
since we cloned the original texture

411
00:26:51,520 --> 00:27:00,100
section we must add the relocation

412
00:26:56,140 --> 00:27:05,220
entries or update the original anxious

413
00:27:00,100 --> 00:27:11,230
to Internet the system knows that our

414
00:27:05,220 --> 00:27:15,490
core l3 not call zero right

415
00:27:11,230 --> 00:27:17,580
so just update the entries in sighs

416
00:27:15,490 --> 00:27:20,409
local you know kitchen table and is a

417
00:27:17,580 --> 00:27:22,928
poster local indication table and as the

418
00:27:20,409 --> 00:27:29,110
external indication table to make it

419
00:27:22,929 --> 00:27:32,409
works right or making it works well okay

420
00:27:29,110 --> 00:27:37,779
the final part is updates macro file

421
00:27:32,409 --> 00:27:40,480
structure we need to add the SPI text

422
00:27:37,779 --> 00:27:43,570
section and as be a data section and we

423
00:27:40,480 --> 00:27:46,659
need also need to add the shell code to

424
00:27:43,570 --> 00:27:49,960
do what whatever you want and for the

425
00:27:46,659 --> 00:27:54,070
existing macro header you must update

426
00:27:49,960 --> 00:27:54,730
the watcher address and the watcher yeah

427
00:27:54,070 --> 00:27:59,769
what's your address

428
00:27:54,730 --> 00:28:04,690
for example the no command sim table nor

429
00:27:59,769 --> 00:28:09,450
command data in code and such kind okay

430
00:28:04,690 --> 00:28:15,490
this is an example of what we did for

431
00:28:09,450 --> 00:28:18,190
Marco for our kid Marco I I added tools

432
00:28:15,490 --> 00:28:21,820
segments the first one is a text segment

433
00:28:18,190 --> 00:28:24,519
and the second wise data segment and the

434
00:28:21,820 --> 00:28:32,500
the name of the text segment as you can

435
00:28:24,519 --> 00:28:38,380
see is text zero zero panic or okay as

436
00:28:32,500 --> 00:28:44,370
for adding the shellcode and we must use

437
00:28:38,380 --> 00:28:51,880
assembly code to implement your task so

438
00:28:44,370 --> 00:28:57,340
in in my at you we just use a we must we

439
00:28:51,880 --> 00:29:00,250
we use the assembly color tool to to

440
00:28:57,340 --> 00:29:04,510
just implement as the simple task just

441
00:29:00,250 --> 00:29:06,789
the call called an external function and

442
00:29:04,510 --> 00:29:11,289
you can implement the external function

443
00:29:06,789 --> 00:29:15,399
in stand alone cannot extension driver

444
00:29:11,289 --> 00:29:18,410
so you can use C language to implement

445
00:29:15,399 --> 00:29:23,850
whatever you want

446
00:29:18,410 --> 00:29:27,780
so this is the SBI summary you must fix

447
00:29:23,850 --> 00:29:30,209
or not fix the memory and all new

448
00:29:27,780 --> 00:29:33,450
instructions and the fix in occasions

449
00:29:30,210 --> 00:29:36,300
and the fix of file structure and you

450
00:29:33,450 --> 00:29:43,920
need to add the shell code to recall the

451
00:29:36,300 --> 00:29:49,139
return addresses and add two segments

452
00:29:43,920 --> 00:29:52,490
the SBI text and as be our data here is

453
00:29:49,140 --> 00:29:56,730
another question well to add these two

454
00:29:52,490 --> 00:30:00,480
segments you can see that I add the two

455
00:29:56,730 --> 00:30:05,760
SBI segments before the node command

456
00:30:00,480 --> 00:30:08,190
link added so can we push the two

457
00:30:05,760 --> 00:30:12,150
segments at the end of the node command

458
00:30:08,190 --> 00:30:16,500
at the end of the macro fell after the

459
00:30:12,150 --> 00:30:21,060
Ning added my answer here if you want to

460
00:30:16,500 --> 00:30:24,030
s be against usable demarco fell yes

461
00:30:21,060 --> 00:30:26,399
but if you want to to SBI against the

462
00:30:24,030 --> 00:30:30,330
column of the macro file the answer is

463
00:30:26,400 --> 00:30:35,150
no because if you do so the system count

464
00:30:30,330 --> 00:30:37,590
can't put Nancy why during the

465
00:30:35,150 --> 00:30:41,700
initialization they added another

466
00:30:37,590 --> 00:30:46,560
command can be updated to us smaller

467
00:30:41,700 --> 00:30:49,890
size what does it mean the system system

468
00:30:46,560 --> 00:30:54,889
module loader can do some optimization

469
00:30:49,890 --> 00:30:59,340
for the link added load command because

470
00:30:54,890 --> 00:31:04,190
inside the link added section segment

471
00:30:59,340 --> 00:31:08,879
they in many condense some strings or

472
00:31:04,190 --> 00:31:14,310
cosines for example co.design is it's a

473
00:31:08,880 --> 00:31:18,900
must during the check stage but it is

474
00:31:14,310 --> 00:31:22,679
not a master for the module itself run

475
00:31:18,900 --> 00:31:25,950
inside in the kernel so the kernel will

476
00:31:22,680 --> 00:31:30,960
do some optimization to make it makes

477
00:31:25,950 --> 00:31:34,920
the kernel memory allocated on location

478
00:31:30,960 --> 00:31:38,820
smaller you can see this picture this is

479
00:31:34,920 --> 00:31:43,590
an example if we at the SBA text or the

480
00:31:38,820 --> 00:31:47,090
SBI data and n at the end of this macro

481
00:31:43,590 --> 00:31:50,040
firm after the link added the kernel

482
00:31:47,090 --> 00:31:54,260
when it is noted into the kernel the

483
00:31:50,040 --> 00:31:59,550
kernel will recalculate the virtual size

484
00:31:54,260 --> 00:32:06,290
the memory size for this module the

485
00:31:59,550 --> 00:32:11,490
result is 0 X 4 8 0 0 it is not 0 X

486
00:32:06,290 --> 00:32:15,649
5,000 but the the kernel note no they're

487
00:32:11,490 --> 00:32:19,830
still put our SBI text at offset zero X

488
00:32:15,650 --> 00:32:26,240
3000 so absolutely it'll be a panic

489
00:32:19,830 --> 00:32:26,240
because it exists the allocated memory

490
00:32:26,810 --> 00:32:35,639
that's why we can't put this to SPI

491
00:32:31,820 --> 00:32:36,600
sections after the before sanding added

492
00:32:35,640 --> 00:32:40,710
load come on

493
00:32:36,600 --> 00:32:42,230
ok there's set some small limitations

494
00:32:40,710 --> 00:32:45,810
for the SPI

495
00:32:42,230 --> 00:32:50,760
project it doesn't support of 80 mark oh

496
00:32:45,810 --> 00:32:54,090
but I know it doesn't it is not a big

497
00:32:50,760 --> 00:32:59,129
problem and it doesn't support 32-bit

498
00:32:54,090 --> 00:33:01,709
Marko and the the macro and the master

499
00:32:59,130 --> 00:33:05,400
have free space for two more Lord of

500
00:33:01,710 --> 00:33:09,870
commands as B attacks and SPI data ok

501
00:33:05,400 --> 00:33:13,530
and the jump table identification is not

502
00:33:09,870 --> 00:33:18,929
a perfect museum but it works well let's

503
00:33:13,530 --> 00:33:25,230
see a result for current status of our

504
00:33:18,930 --> 00:33:28,710
SPI you know almost the the almost all

505
00:33:25,230 --> 00:33:33,550
the modules we have the API patterns can

506
00:33:28,710 --> 00:33:40,000
work well now ok

507
00:33:33,550 --> 00:33:43,240
if you use our SBI tour to failure

508
00:33:40,000 --> 00:33:47,590
put your machine don't don't

509
00:33:43,240 --> 00:33:54,750
reinstall your OS just use the following

510
00:33:47,590 --> 00:33:59,100
steps to recover your system okay in the

511
00:33:54,750 --> 00:34:02,980
secure in the secure recovery mode

512
00:33:59,100 --> 00:34:05,590
okay next the final one is pending axial

513
00:34:02,980 --> 00:34:08,440
to Washington's three it is about the

514
00:34:05,590 --> 00:34:11,529
I'll kill a passive fuzzy here's the

515
00:34:08,440 --> 00:34:16,600
passing fuzzy I mean it is not the one

516
00:34:11,530 --> 00:34:19,960
use you see in in common scenarios I

517
00:34:16,600 --> 00:34:24,330
don't use the hooks to I may be the

518
00:34:19,960 --> 00:34:27,760
passive fasten you understand is about

519
00:34:24,330 --> 00:34:30,819
use hooks to mutate the parameters

520
00:34:27,760 --> 00:34:33,700
during normal function call I only use

521
00:34:30,820 --> 00:34:38,440
hooks to tamper the parameters into the

522
00:34:33,699 --> 00:34:42,730
Mexico and the MongoDB and I then I use

523
00:34:38,440 --> 00:34:49,750
I quote this data into the corpus db2

524
00:34:42,730 --> 00:34:55,990
that our to consume directly vanessi and

525
00:34:49,750 --> 00:34:59,830
and other result I I use this tour the

526
00:34:55,989 --> 00:35:04,149
hooks to get a lot of a lot of the

527
00:34:59,830 --> 00:35:06,430
al-qaeda connection open data and also

528
00:35:04,150 --> 00:35:13,480
get a lot of the al-qaeda connection

529
00:35:06,430 --> 00:35:17,770
data and also get a lot of other the

530
00:35:13,480 --> 00:35:24,550
real date has the parent as a data into

531
00:35:17,770 --> 00:35:27,790
the MongoDB and finally we have also

532
00:35:24,550 --> 00:35:33,310
seen the API method parameters that we

533
00:35:27,790 --> 00:35:37,330
need need to convert this data to the

534
00:35:33,310 --> 00:35:40,150
coppers DB and you may know that Cisco

535
00:35:37,330 --> 00:35:44,049
knows concept program to fast instead

536
00:35:40,150 --> 00:35:47,200
instead of single API files program is

537
00:35:44,050 --> 00:35:47,410
actually a sequence of API calls you can

538
00:35:47,200 --> 00:35:53,319
see

539
00:35:47,410 --> 00:35:57,670
this picture as an example it may it

540
00:35:53,320 --> 00:36:00,220
caused the socket and is in use return

541
00:35:57,670 --> 00:36:04,090
value as the first parameter for the

542
00:36:00,220 --> 00:36:07,330
find API so it it has the conserved

543
00:36:04,090 --> 00:36:12,340
program I think the advantage of this

544
00:36:07,330 --> 00:36:19,569
fuzzy mode is that it can solve some

545
00:36:12,340 --> 00:36:24,010
context problem right and I also use

546
00:36:19,570 --> 00:36:27,940
this concept to do the my passive fuzzy

547
00:36:24,010 --> 00:36:31,560
I recall a sequence of API calls for

548
00:36:27,940 --> 00:36:37,840
examples the NASS the one the nihms is

549
00:36:31,560 --> 00:36:39,730
three so I recall the series three API

550
00:36:37,840 --> 00:36:43,120
call and put them together

551
00:36:39,730 --> 00:36:46,600
the first one is p0 the second one is p1

552
00:36:43,120 --> 00:36:49,720
p this the third Y is p2 the value of

553
00:36:46,600 --> 00:36:53,650
this the value is actually the md5 hash

554
00:36:49,720 --> 00:36:57,700
value for each single API call and then

555
00:36:53,650 --> 00:37:02,200
I compare them together to produce the

556
00:36:57,700 --> 00:37:07,560
program's you can see it as the picture

557
00:37:02,200 --> 00:37:10,720
as an example I the program shows that

558
00:37:07,560 --> 00:37:14,230
we firstly used as well as the open

559
00:37:10,720 --> 00:37:18,149
surface to open some our kids service

560
00:37:14,230 --> 00:37:25,090
and then cause as well as committed to

561
00:37:18,150 --> 00:37:28,710
too fast to call some our kid master so

562
00:37:25,090 --> 00:37:33,520
it can partially solve some context

563
00:37:28,710 --> 00:37:38,650
problem all right okay now C is al-qaeda

564
00:37:33,520 --> 00:37:40,780
fast summary we can compare the active

565
00:37:38,650 --> 00:37:43,150
and the passive al-qaeda fast now

566
00:37:40,780 --> 00:37:46,180
because we have the al-qaeda open and

567
00:37:43,150 --> 00:37:48,340
the core syntax description by the

568
00:37:46,180 --> 00:37:50,470
reverse engineering and we have the

569
00:37:48,340 --> 00:37:54,280
possible sequence coverage by hooks and

570
00:37:50,470 --> 00:37:58,149
we also have the courage of closest

571
00:37:54,280 --> 00:38:00,520
alkyl modules now so we can extend the

572
00:37:58,150 --> 00:38:01,560
ability of this corner to support fuzzy

573
00:38:00,520 --> 00:38:05,680
our kids

574
00:38:01,560 --> 00:38:08,200
the combination advantages here I think

575
00:38:05,680 --> 00:38:09,339
the passive Cobras can be used to file

576
00:38:08,200 --> 00:38:12,100
system alone

577
00:38:09,340 --> 00:38:15,690
it doesn't need active API patent

578
00:38:12,100 --> 00:38:19,150
developed by the researchers so it can

579
00:38:15,690 --> 00:38:22,150
make us don't rely on the reverse

580
00:38:19,150 --> 00:38:24,160
engineering so heavily and the passive

581
00:38:22,150 --> 00:38:27,310
corporates can happen reveal if the

582
00:38:24,160 --> 00:38:30,279
active patterns API pattern are correct

583
00:38:27,310 --> 00:38:33,009
and the passive Copperas gives the

584
00:38:30,280 --> 00:38:35,170
chances that even the patterns are wrong

585
00:38:33,010 --> 00:38:38,880
we can still fast in the right direction

586
00:38:35,170 --> 00:38:42,820
based on the genetic algorithm this is

587
00:38:38,880 --> 00:38:46,840
our key the phasing architecture which

588
00:38:42,820 --> 00:38:51,160
is some kind hooks to get the passive

589
00:38:46,840 --> 00:38:53,740
API sequence coppers and we can you also

590
00:38:51,160 --> 00:38:58,779
use the SBI tool to get the code

591
00:38:53,740 --> 00:39:02,890
coverage from the close foster modules

592
00:38:58,780 --> 00:39:07,060
alkyl modules and we we also have the

593
00:39:02,890 --> 00:39:11,020
dashboard to see what happens in

594
00:39:07,060 --> 00:39:15,480
everyday fuzzing so next enemy in what

595
00:39:11,020 --> 00:39:17,470
my colleague ginger to give you an

596
00:39:15,480 --> 00:39:21,750
introduction of the fuzzing

597
00:39:17,470 --> 00:39:21,750
visualization and is that any operation

598
00:39:23,190 --> 00:39:30,180
how we go this is about a fuzzing

599
00:39:27,490 --> 00:39:35,229
visualization and the courage is a

600
00:39:30,180 --> 00:39:41,140
first-class citizen in our facing it is

601
00:39:35,230 --> 00:39:44,710
a passive fuzz which has to cook many

602
00:39:41,140 --> 00:39:49,120
about it too many vaccines is al-qaeda

603
00:39:44,710 --> 00:39:56,500
so it's open and al key to connect home

604
00:39:49,120 --> 00:39:58,920
a solder that's where we have a demo

605
00:39:56,500 --> 00:39:58,920
video

606
00:40:12,450 --> 00:40:23,140
okay this is our dashboard your say we

607
00:40:17,829 --> 00:40:27,250
have 10 system I wanna see where the

608
00:40:23,140 --> 00:40:40,029
manager and ten as well father running

609
00:40:27,250 --> 00:40:43,990
on VMware fusion and the next one is odd

610
00:40:40,030 --> 00:40:47,619
Tilly it's running you can see we have

611
00:40:43,990 --> 00:40:52,319
rung of nearly 6 million programs until

612
00:40:47,619 --> 00:40:52,320
now and this number keeps growing

613
00:40:55,599 --> 00:41:05,410
this is a most exciting part it's also a

614
00:40:59,380 --> 00:41:09,760
machine you can say right it's a produce

615
00:41:05,410 --> 00:41:13,690
about yeah when penny called a and it

616
00:41:09,760 --> 00:41:18,990
keeps users away about everyday way

617
00:41:13,690 --> 00:41:29,170
usually every day we got panic oh yeah

618
00:41:18,990 --> 00:41:35,470
and the next is a it's a passing fad in

619
00:41:29,170 --> 00:41:38,650
from work yeah way justice II mmm you

620
00:41:35,470 --> 00:41:42,899
you say that's it's deep and I'm finding

621
00:41:38,650 --> 00:41:46,240
signals fattening signals is a internal

622
00:41:42,900 --> 00:41:50,770
and representation of our coded courage

623
00:41:46,240 --> 00:41:55,979
exceeded every after restart courage

624
00:41:50,770 --> 00:41:55,980
keeps growing yeah signal numbers

625
00:42:02,400 --> 00:42:09,480
copper's means that we have about nearly

626
00:42:04,770 --> 00:42:14,130
2,000 new programs and this is our

627
00:42:09,480 --> 00:42:15,000
coverage data we will choose module most

628
00:42:14,130 --> 00:42:17,089
complicated

629
00:42:15,000 --> 00:42:22,770
I will accelerate assembly is about

630
00:42:17,089 --> 00:42:25,288
Sadie acceleration is lighthouse

631
00:42:22,770 --> 00:42:30,799
integration actually we have a hidden

632
00:42:25,289 --> 00:42:30,799
map for for every function code coverage

633
00:42:50,400 --> 00:42:59,040
and the way how also let house

634
00:42:54,340 --> 00:42:59,040
integration I will show you another demo

635
00:43:05,010 --> 00:43:13,390
that house is a great tool for courage

636
00:43:09,300 --> 00:43:21,240
with realization without courage data

637
00:43:13,390 --> 00:43:30,129
and it's a lot faster yes senior hit map

638
00:43:21,240 --> 00:43:35,379
and you can click from a you can see

639
00:43:30,130 --> 00:43:38,320
that blue is a Haiti the blog you can

640
00:43:35,380 --> 00:43:43,410
even see in the compound mode that will

641
00:43:38,320 --> 00:43:43,410
be very friendly for karate review

642
00:43:53,790 --> 00:44:01,840
another one is eight different or we

643
00:43:57,640 --> 00:44:04,060
know at other on update for program they

644
00:44:01,840 --> 00:44:07,480
fix all the bugs and you'd introduce

645
00:44:04,060 --> 00:44:11,529
some new features and new API for

646
00:44:07,480 --> 00:44:14,410
security researcher way to some diva so

647
00:44:11,530 --> 00:44:16,810
as we can find older and day and we do

648
00:44:14,410 --> 00:44:20,200
some devtools and a new box and a new

649
00:44:16,810 --> 00:44:24,370
attack surface how you see you can see

650
00:44:20,200 --> 00:44:29,319
is a chance log from high syrup to or

651
00:44:24,370 --> 00:44:34,120
Mac OS modules in kernel it has open the

652
00:44:29,320 --> 00:44:40,350
to his course and one Mac travel and

653
00:44:34,120 --> 00:44:43,779
some new some new routines in subsystems

654
00:44:40,350 --> 00:44:48,720
and most importantly you can see it has

655
00:44:43,780 --> 00:44:52,980
adidas three MIG subsystems and contains

656
00:44:48,720 --> 00:44:52,980
hundreds or routines

657
00:44:54,089 --> 00:45:03,549
so how do they do that way collecting

658
00:44:59,710 --> 00:45:08,140
memories from different origins and way

659
00:45:03,549 --> 00:45:11,710
how roars in homo language and we also

660
00:45:08,140 --> 00:45:15,788
read a script in attitude passing this

661
00:45:11,710 --> 00:45:21,480
binary and roar so that we can produce

662
00:45:15,789 --> 00:45:25,690
different Jason vowels by dipping this

663
00:45:21,480 --> 00:45:31,079
Jason to us we can get was what has been

664
00:45:25,690 --> 00:45:31,079
changed in this different versions

665
00:45:32,309 --> 00:45:35,549
another demo

666
00:45:42,119 --> 00:45:49,859
yeah well choose on module and this is

667
00:45:46,630 --> 00:45:51,940
worth colonel and different nowhere seen

668
00:45:49,859 --> 00:45:57,069
Hazira and module

669
00:45:51,940 --> 00:46:00,210
yeah you see how addisam this is a

670
00:45:57,069 --> 00:46:06,069
simple chasm patch and we can see how

671
00:46:00,210 --> 00:46:08,279
yellow change the way and recurring new

672
00:46:06,069 --> 00:46:08,279
one

673
00:46:22,860 --> 00:46:36,120
oh yeah and it's our death-defying

674
00:46:33,440 --> 00:46:38,310
operation so we are not just that

675
00:46:36,120 --> 00:46:42,390
development is just a to say a lot watch

676
00:46:38,310 --> 00:46:44,549
has and the pictures way I mean the

677
00:46:42,390 --> 00:46:51,900
coverage more called an immoral attack

678
00:46:44,550 --> 00:46:57,900
surface after some reverse engineering

679
00:46:51,900 --> 00:46:59,730
we were Maria modify or HSN text and for

680
00:46:57,900 --> 00:47:02,070
files and around again and we were

681
00:46:59,730 --> 00:47:07,560
adding some text for our fuzzy

682
00:47:02,070 --> 00:47:11,810
environment here is a demo from this

683
00:47:07,560 --> 00:47:15,060
flow charting in Ida us see most of our

684
00:47:11,810 --> 00:47:18,810
code was not in blue which means that

685
00:47:15,060 --> 00:47:20,880
another hate leader at all so where it

686
00:47:18,810 --> 00:47:24,420
has to limitation first in the world

687
00:47:20,880 --> 00:47:29,610
shall check our entitlement and second

688
00:47:24,420 --> 00:47:34,100
it will check our boot arguments and so

689
00:47:29,610 --> 00:47:38,910
there should be some text to make it

690
00:47:34,100 --> 00:47:41,880
wrong yeah first maybe we can add some

691
00:47:38,910 --> 00:47:46,109
entitlements but in fact its environment

692
00:47:41,880 --> 00:47:50,280
is evel's provided so we couldn't and a

693
00:47:46,110 --> 00:47:54,920
second oh we can change the arguments in

694
00:47:50,280 --> 00:47:57,780
fact that's what really works and other

695
00:47:54,920 --> 00:48:00,260
color-block in dark and now they are

696
00:47:57,780 --> 00:48:00,260
hate heat

697
00:48:02,420 --> 00:48:13,650
next is the case study okay next I will

698
00:48:08,130 --> 00:48:15,780
introduce some very quick case study the

699
00:48:13,650 --> 00:48:19,560
fact that the one billet is found by

700
00:48:15,780 --> 00:48:24,090
this - this is four four three five it

701
00:48:19,560 --> 00:48:26,490
is a heap memory disclosure on bility

702
00:48:24,090 --> 00:48:31,580
you can see that as the location one

703
00:48:26,490 --> 00:48:35,850
point a it costs as a share in it and

704
00:48:31,580 --> 00:48:36,660
the inside the shell in it at location

705
00:48:35,850 --> 00:48:41,868
two point eight

706
00:48:36,660 --> 00:48:46,950
it I will locate some instruction memory

707
00:48:41,869 --> 00:48:52,530
without the memo set so that the memory

708
00:48:46,950 --> 00:48:56,569
may contain some garbage memory and at

709
00:48:52,530 --> 00:49:00,329
one location one point Pisa the

710
00:48:56,569 --> 00:49:05,038
structure memory is copied back to the

711
00:49:00,329 --> 00:49:09,569
user mode so what I want to show you is

712
00:49:05,039 --> 00:49:17,510
that the structure is Nexus you can see

713
00:49:09,569 --> 00:49:28,460
that the offset 0 X 2 8 it owning has

714
00:49:17,510 --> 00:49:34,980
lens to pilot hers but but at but in the

715
00:49:28,460 --> 00:49:40,200
source code it is only at offset zero X

716
00:49:34,980 --> 00:49:43,410
2 8 it only the mem set V is 0 with two

717
00:49:40,200 --> 00:49:48,660
fighters are remains the next tool

718
00:49:43,410 --> 00:49:51,868
biters unmodified so the tool next two

719
00:49:48,660 --> 00:49:56,038
batters start and offset 0 X 2 a is

720
00:49:51,869 --> 00:50:01,410
copied back to the user mode so it is it

721
00:49:56,039 --> 00:50:05,190
is not exploitable but it may but it can

722
00:50:01,410 --> 00:50:08,038
show a pattern here that the constructor

723
00:50:05,190 --> 00:50:12,150
memory if it is a lot allocated result

724
00:50:08,039 --> 00:50:15,049
without memset is all Kinnear and not

725
00:50:12,150 --> 00:50:17,760
all fighters are field for example

726
00:50:15,049 --> 00:50:20,940
expressionism heading fighters are not

727
00:50:17,760 --> 00:50:23,490
field then the structure memory is

728
00:50:20,940 --> 00:50:26,369
copied back to the user mode I think it

729
00:50:23,490 --> 00:50:28,859
can be a pattern you can use this kind

730
00:50:26,369 --> 00:50:31,230
of pattern to search the ax in your

731
00:50:28,859 --> 00:50:36,538
source code you can use some search

732
00:50:31,230 --> 00:50:40,559
engines to search it and I found several

733
00:50:36,539 --> 00:50:46,079
cases one of them is next at at location

734
00:50:40,559 --> 00:50:50,420
one point a as a max come here is 17 but

735
00:50:46,079 --> 00:50:57,289
at one point at location one point

736
00:50:50,420 --> 00:51:04,099
the count is 11 the counter can be 11

737
00:50:57,289 --> 00:51:08,750
and as this picture that the Mac hope

738
00:51:04,099 --> 00:51:11,720
all info extension count is 17 so what

739
00:51:08,750 --> 00:51:14,089
happens the structure you can see the

740
00:51:11,720 --> 00:51:17,839
structure that means under some

741
00:51:14,089 --> 00:51:23,990
condition that the reverse is filled

742
00:51:17,839 --> 00:51:28,058
with six count it's not filled and the

743
00:51:23,990 --> 00:51:35,299
memory is copied back to the user mode

744
00:51:28,059 --> 00:51:40,430
then you can get 24 fighters disclosure

745
00:51:35,299 --> 00:51:43,609
right and this case was fixed by fo

746
00:51:40,430 --> 00:51:46,629
internally before my submission so

747
00:51:43,609 --> 00:51:53,170
there's no CVE and that's another

748
00:51:46,630 --> 00:51:57,859
example 8 5 to 9 it is a very simple

749
00:51:53,170 --> 00:52:02,450
oh-oh volatility that you can see that

750
00:51:57,859 --> 00:52:07,180
at location a the RPX is controlled by

751
00:52:02,450 --> 00:52:11,868
the attack it is a very easy

752
00:52:07,180 --> 00:52:14,509
vulnerability ok so that's all for our

753
00:52:11,869 --> 00:52:18,680
presentation and we want to credit the

754
00:52:14,509 --> 00:52:21,289
following people or projects the

755
00:52:18,680 --> 00:52:26,930
scholars and at horse and to my intense

756
00:52:21,289 --> 00:52:31,250
and one my what of my colleague who

757
00:52:26,930 --> 00:52:37,069
helped have to come who help provide the

758
00:52:31,250 --> 00:52:50,859
case on black list okay that's all or if

759
00:52:37,069 --> 00:52:50,859
any in question no hands or questions

760
00:52:51,609 --> 00:52:56,589
then I ask you all to give one more big

761
00:52:54,289 --> 00:52:59,920
round of applause for Joe Bailon and

762
00:52:56,589 --> 00:52:59,920
John see you

763
00:53:00,090 --> 00:53:03,229
[Applause]

764
00:53:08,180 --> 00:53:10,240
you

