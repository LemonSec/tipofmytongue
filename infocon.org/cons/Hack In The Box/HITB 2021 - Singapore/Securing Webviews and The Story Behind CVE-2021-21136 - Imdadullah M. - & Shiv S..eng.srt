1
00:00:13,280 --> 00:00:15,200
hello everyone first of all i would like

2
00:00:15,200 --> 00:00:16,400
to thank you all for joining this

3
00:00:16,400 --> 00:00:18,400
session we'll be talking about securing

4
00:00:18,400 --> 00:00:21,279
the views and the story behind cve2021

5
00:00:21,279 --> 00:00:23,039
21136

6
00:00:23,039 --> 00:00:24,240
i'll be walking through this

7
00:00:24,240 --> 00:00:25,760
presentation with my friend and

8
00:00:25,760 --> 00:00:27,760
co-speaker imdad mohammed

9
00:00:27,760 --> 00:00:29,119
let me start this with quickly

10
00:00:29,119 --> 00:00:30,960
introducing ourselves my name is chef

11
00:00:30,960 --> 00:00:33,280
sahani i work as senior associate with

12
00:00:33,280 --> 00:00:35,200
jp morgan chase i'm one of the

13
00:00:35,200 --> 00:00:37,280
contributors in oscar msgg and also the

14
00:00:37,280 --> 00:00:38,960
author of the career matter of securing

15
00:00:38,960 --> 00:00:40,480
android applications

16
00:00:40,480 --> 00:00:42,399
over to amdadd

17
00:00:42,399 --> 00:00:44,719
oh thank you ship hi guys my name is

18
00:00:44,719 --> 00:00:47,200
india mohammed and i'm currently working

19
00:00:47,200 --> 00:00:50,160
for grab as a security engineer so at

20
00:00:50,160 --> 00:00:52,320
grab i'm leading different engineering

21
00:00:52,320 --> 00:00:55,360
teams uh in the application security

22
00:00:55,360 --> 00:00:59,199
initiative oduship

23
00:00:59,199 --> 00:01:00,960
so before we we go ahead a quick

24
00:01:00,960 --> 00:01:03,280
disclaimer any opinions that we are

25
00:01:03,280 --> 00:01:04,879
going to express over here which solely

26
00:01:04,879 --> 00:01:07,200
belongs to us and are nowhere related to

27
00:01:07,200 --> 00:01:10,479
our current or previous employers

28
00:01:10,479 --> 00:01:12,080
so basically this would be the agenda

29
00:01:12,080 --> 00:01:14,000
for today's session we'll be starting

30
00:01:14,000 --> 00:01:15,200
with uh

31
00:01:15,200 --> 00:01:17,840
introducing cves later we'll talk about

32
00:01:17,840 --> 00:01:20,159
web views wherein we'll we'll discuss

33
00:01:20,159 --> 00:01:22,400
how exactly reviews work once we have

34
00:01:22,400 --> 00:01:24,000
established the foundations we'll be

35
00:01:24,000 --> 00:01:25,840
talking about journey on cve to

36
00:01:25,840 --> 00:01:28,400
021-201136

37
00:01:28,400 --> 00:01:30,079
and data will just discuss about the

38
00:01:30,079 --> 00:01:32,000
in-depth analysis that we performed and

39
00:01:32,000 --> 00:01:33,600
submitted to google in order to claim

40
00:01:33,600 --> 00:01:34,880
the cd

41
00:01:34,880 --> 00:01:36,320
last but the least we'll talk about

42
00:01:36,320 --> 00:01:38,240
common webview related security issues

43
00:01:38,240 --> 00:01:40,159
that we have observed over time and the

44
00:01:40,159 --> 00:01:41,680
ways wherein we could prevent those

45
00:01:41,680 --> 00:01:43,520
issues and make our mobile apps secure

46
00:01:43,520 --> 00:01:44,880
and robust

47
00:01:44,880 --> 00:01:46,960
so let's

48
00:01:46,960 --> 00:01:50,320
let's start with uh cves so basically cv

49
00:01:50,320 --> 00:01:53,040
is nothing but an acronym used for

50
00:01:53,040 --> 00:01:55,439
common vulnerability exposure

51
00:01:55,439 --> 00:01:57,439
it's actually a unique identifier that

52
00:01:57,439 --> 00:01:59,600
is associated with a vulnerability in a

53
00:01:59,600 --> 00:02:03,280
publicly available software package

54
00:02:03,560 --> 00:02:05,119
cve202121136

55
00:02:05,119 --> 00:02:08,080
is actually a cv unique identifier that

56
00:02:08,080 --> 00:02:09,758
is associated with a vulnerability in

57
00:02:09,758 --> 00:02:12,319
android values implementation

58
00:02:12,319 --> 00:02:14,160
over the time what we observed was a lot

59
00:02:14,160 --> 00:02:15,599
of mobile applications were actually

60
00:02:15,599 --> 00:02:18,000
leaking users or tokens to third parties

61
00:02:18,000 --> 00:02:19,840
and when we dig deeper into it we found

62
00:02:19,840 --> 00:02:21,440
out that this was happening because of a

63
00:02:21,440 --> 00:02:23,840
flaw in chromium implementation for

64
00:02:23,840 --> 00:02:25,360
android web views

65
00:02:25,360 --> 00:02:28,080
we'll talk about the in-depth analysis

66
00:02:28,080 --> 00:02:30,319
in the upcoming slides

67
00:02:30,319 --> 00:02:32,640
now let's understand what a web view is

68
00:02:32,640 --> 00:02:34,400
so basically webview is one of the

69
00:02:34,400 --> 00:02:37,280
mobile app components that allows

70
00:02:37,280 --> 00:02:39,440
mobile developers to load web content

71
00:02:39,440 --> 00:02:41,519
directly into their mobile apps

72
00:02:41,519 --> 00:02:43,519
so you could consider web views to be

73
00:02:43,519 --> 00:02:45,840
direct web browsers for our mobile apps

74
00:02:45,840 --> 00:02:47,519
and they support the concept of code to

75
00:02:47,519 --> 00:02:49,200
use wherein the life of mobile

76
00:02:49,200 --> 00:02:51,680
developers become like it it becomes far

77
00:02:51,680 --> 00:02:53,840
more easier because they can just load

78
00:02:53,840 --> 00:02:55,760
the already existing web content into

79
00:02:55,760 --> 00:02:57,280
their mobile apps

80
00:02:57,280 --> 00:02:59,760
so if you see an image over here uh we

81
00:02:59,760 --> 00:03:01,840
just provide the url and the web content

82
00:03:01,840 --> 00:03:04,000
corresponding to that url is loaded in

83
00:03:04,000 --> 00:03:06,080
our own app through webviews

84
00:03:06,080 --> 00:03:08,000
so as i mentioned they support the

85
00:03:08,000 --> 00:03:09,920
concept of code reuse and that is why

86
00:03:09,920 --> 00:03:11,599
they are extensively used in the current

87
00:03:11,599 --> 00:03:14,319
era of mobile application development

88
00:03:14,319 --> 00:03:15,920
now we know what are their view is let's

89
00:03:15,920 --> 00:03:18,239
see how it it works so as i mentioned we

90
00:03:18,239 --> 00:03:20,400
just need to provide the url and it

91
00:03:20,400 --> 00:03:22,239
loads the content corresponding to that

92
00:03:22,239 --> 00:03:24,720
url so basically we could leverage load

93
00:03:24,720 --> 00:03:27,519
url api and we just pass the url to that

94
00:03:27,519 --> 00:03:29,680
api and the corresponding web content is

95
00:03:29,680 --> 00:03:31,760
loaded in our mobile app

96
00:03:31,760 --> 00:03:33,360
so this was a simple one wherein we have

97
00:03:33,360 --> 00:03:35,519
a normal load just provide the

98
00:03:35,519 --> 00:03:37,280
url and the corresponding content is

99
00:03:37,280 --> 00:03:38,959
loaded

100
00:03:38,959 --> 00:03:40,879
let's see what happens when we want to

101
00:03:40,879 --> 00:03:42,560
load the content which is protected

102
00:03:42,560 --> 00:03:44,720
through authentication for example we

103
00:03:44,720 --> 00:03:46,640
want to load users profile profile

104
00:03:46,640 --> 00:03:48,239
profile page

105
00:03:48,239 --> 00:03:50,560
in those scenarios where the content is

106
00:03:50,560 --> 00:03:51,920
protected through authentication we

107
00:03:51,920 --> 00:03:53,760
would need to provide auth data

108
00:03:53,760 --> 00:03:55,120
otherwise backend won't release the

109
00:03:55,120 --> 00:03:57,519
resources or the web content

110
00:03:57,519 --> 00:03:59,360
we can do so by

111
00:03:59,360 --> 00:04:02,480
leveraging the same load url ap load url

112
00:04:02,480 --> 00:04:04,000
api but this one is the overloaded

113
00:04:04,000 --> 00:04:05,760
version of the previous one

114
00:04:05,760 --> 00:04:07,840
when apart from providing the url to be

115
00:04:07,840 --> 00:04:10,080
loaded we also provide a map so

116
00:04:10,080 --> 00:04:11,920
basically this map is having key value

117
00:04:11,920 --> 00:04:14,080
pairs where key is the

118
00:04:14,080 --> 00:04:16,399
the http header name and the value is

119
00:04:16,399 --> 00:04:18,238
the corresponding value so what happens

120
00:04:18,238 --> 00:04:19,199
is

121
00:04:19,199 --> 00:04:21,040
what all headers we provide as a part of

122
00:04:21,040 --> 00:04:22,160
this map

123
00:04:22,160 --> 00:04:24,639
are being sent or attached network call

124
00:04:24,639 --> 00:04:26,800
that we'll make while loading the url

125
00:04:26,800 --> 00:04:28,720
and now what we have done is we have

126
00:04:28,720 --> 00:04:30,560
attached the authorization authorization

127
00:04:30,560 --> 00:04:32,400
header to it so now it becomes an

128
00:04:32,400 --> 00:04:35,120
authenticated request and backend would

129
00:04:35,120 --> 00:04:36,720
accept this request because we are

130
00:04:36,720 --> 00:04:38,560
passing the odd token and would release

131
00:04:38,560 --> 00:04:40,639
the protected content once that content

132
00:04:40,639 --> 00:04:42,000
reaches the front end it would be

133
00:04:42,000 --> 00:04:42,960
rendered

134
00:04:42,960 --> 00:04:43,759
so

135
00:04:43,759 --> 00:04:45,199
as i mentioned now there are two kinds

136
00:04:45,199 --> 00:04:47,040
of loads one is a normal load where we

137
00:04:47,040 --> 00:04:47,919
could

138
00:04:47,919 --> 00:04:50,240
load publicly available data

139
00:04:50,240 --> 00:04:52,000
publicly available web content the

140
00:04:52,000 --> 00:04:53,919
second one is the authenticated load

141
00:04:53,919 --> 00:04:56,000
could be leveraged whenever we need to

142
00:04:56,000 --> 00:04:57,520
access or load a content which is

143
00:04:57,520 --> 00:05:00,880
protected through authentication

144
00:05:00,880 --> 00:05:02,560
and now we know what exactly that view

145
00:05:02,560 --> 00:05:04,400
is and how they work let's understand

146
00:05:04,400 --> 00:05:07,680
deep links with help of an example

147
00:05:07,680 --> 00:05:10,160
so have you ever wondered while you are

148
00:05:10,160 --> 00:05:12,479
browsing content in your mobile app

149
00:05:12,479 --> 00:05:14,800
browser and you click on a link and it

150
00:05:14,800 --> 00:05:16,880
opens a specific content in the mobile

151
00:05:16,880 --> 00:05:18,800
app that is installed on your device

152
00:05:18,800 --> 00:05:20,320
for example if you see over here while

153
00:05:20,320 --> 00:05:22,560
googling i saw a product i click on a

154
00:05:22,560 --> 00:05:24,560
product and opens that particular

155
00:05:24,560 --> 00:05:26,000
product in the e-commerce app that is

156
00:05:26,000 --> 00:05:27,759
installed in my disk

157
00:05:27,759 --> 00:05:29,600
so this thing the things like this

158
00:05:29,600 --> 00:05:31,840
happens because of d-picks so deep link

159
00:05:31,840 --> 00:05:34,320
is nothing but a uri which helps improve

160
00:05:34,320 --> 00:05:36,720
users experience by opening a specific

161
00:05:36,720 --> 00:05:39,039
content in the mobile app

162
00:05:39,039 --> 00:05:41,360
another example could be this facebook

163
00:05:41,360 --> 00:05:42,960
deep link wherein

164
00:05:42,960 --> 00:05:44,479
uh we have

165
00:05:44,479 --> 00:05:46,639
facebook's current slash profile and the

166
00:05:46,639 --> 00:05:48,479
profile id once this deep link is

167
00:05:48,479 --> 00:05:50,479
triggered it would actually open users

168
00:05:50,479 --> 00:05:52,560
profile in the mobile app that is that

169
00:05:52,560 --> 00:05:54,880
is installed

170
00:05:54,880 --> 00:05:56,639
so now we have established the

171
00:05:56,639 --> 00:05:58,319
fundamentals that would be required to

172
00:05:58,319 --> 00:06:00,960
understand the technical details around

173
00:06:00,960 --> 00:06:03,199
the chromium cv my co-speaker and that

174
00:06:03,199 --> 00:06:05,120
will be taking over from here over to

175
00:06:05,120 --> 00:06:06,479
him that

176
00:06:06,479 --> 00:06:08,560
uh thank you for such a detailed

177
00:06:08,560 --> 00:06:10,479
information about the basics of bad

178
00:06:10,479 --> 00:06:14,000
views and deep links and uh what a cv is

179
00:06:14,000 --> 00:06:17,039
so uh let's try to understand a bit more

180
00:06:17,039 --> 00:06:21,318
about our journey towards cv20120

181
00:06:26,319 --> 00:06:28,560
so uh in this specific slide what we are

182
00:06:28,560 --> 00:06:32,240
talking about is a basic code what or

183
00:06:32,240 --> 00:06:34,560
or use case wherein we are trying to

184
00:06:34,560 --> 00:06:37,199
understand in our workflow what happens

185
00:06:37,199 --> 00:06:40,080
in case of an mobile application so here

186
00:06:40,080 --> 00:06:42,080
we have as you can see in the specific

187
00:06:42,080 --> 00:06:43,919
diagram we have three components the

188
00:06:43,919 --> 00:06:46,479
first one is our mobile application we

189
00:06:46,479 --> 00:06:48,880
have an identity service and we have a

190
00:06:48,880 --> 00:06:50,639
third party service

191
00:06:50,639 --> 00:06:53,199
so let's assume that our mobile

192
00:06:53,199 --> 00:06:55,520
application actually integrate with a

193
00:06:55,520 --> 00:06:58,639
lot of third-party services and

194
00:06:58,639 --> 00:07:00,800
uh if you if you have this mobile

195
00:07:00,800 --> 00:07:03,120
application and you click on third party

196
00:07:03,120 --> 00:07:05,360
tile inside the mobile application the

197
00:07:05,360 --> 00:07:06,479
first or

198
00:07:06,479 --> 00:07:08,880
the first http call will go to the

199
00:07:08,880 --> 00:07:11,840
identity service in this call it will

200
00:07:11,840 --> 00:07:14,319
send the client id as well as the

201
00:07:14,319 --> 00:07:17,360
redirect url the redirect url will be of

202
00:07:17,360 --> 00:07:19,360
the third party

203
00:07:19,360 --> 00:07:21,280
in this specific request in the

204
00:07:21,280 --> 00:07:24,400
authorization token we use the mobile

205
00:07:24,400 --> 00:07:26,160
application will also send the

206
00:07:26,160 --> 00:07:28,880
authorization token because this is an

207
00:07:28,880 --> 00:07:30,560
authenticated load

208
00:07:30,560 --> 00:07:34,240
now the identity service will first

209
00:07:34,240 --> 00:07:35,120
uh

210
00:07:35,120 --> 00:07:37,520
be the identity service will validate

211
00:07:37,520 --> 00:07:40,560
the authorization token of the user as

212
00:07:40,560 --> 00:07:42,880
well as it will validate the client id

213
00:07:42,880 --> 00:07:46,400
and the redirect url after it after it

214
00:07:46,400 --> 00:07:48,800
validates then it will generate an id

215
00:07:48,800 --> 00:07:51,680
token for the specific third party and

216
00:07:51,680 --> 00:07:54,160
then send it in the location editor as a

217
00:07:54,160 --> 00:07:57,199
response to our mobile application now

218
00:07:57,199 --> 00:07:59,599
as soon as uh as soon as the mobile

219
00:07:59,599 --> 00:08:02,080
application receives a 302 response

220
00:08:02,080 --> 00:08:04,400
along with the id token

221
00:08:04,400 --> 00:08:06,479
it will redirect to the third party in

222
00:08:06,479 --> 00:08:08,720
this in the last form which we are

223
00:08:08,720 --> 00:08:10,479
seeing here so here the mobile

224
00:08:10,479 --> 00:08:12,639
application is being redirected to the

225
00:08:12,639 --> 00:08:15,759
third party url along with the id token

226
00:08:15,759 --> 00:08:18,240
so this is a normal workflow which we

227
00:08:18,240 --> 00:08:20,560
which we often observe in a mobile

228
00:08:20,560 --> 00:08:22,960
application where we uh where we are

229
00:08:22,960 --> 00:08:27,440
trying to access a third-party service

230
00:08:27,440 --> 00:08:29,199
now in this slide

231
00:08:29,199 --> 00:08:31,919
let's understand the bug at a very uh

232
00:08:31,919 --> 00:08:34,640
high level so as as we said earlier

233
00:08:34,640 --> 00:08:36,559
while reviewing this flow in your mobile

234
00:08:36,559 --> 00:08:38,958
application what we observed is in the

235
00:08:38,958 --> 00:08:40,880
call where there is and redirect to the

236
00:08:40,880 --> 00:08:43,679
third party you are third party url

237
00:08:43,679 --> 00:08:46,959
along with the id token the webview the

238
00:08:46,959 --> 00:08:49,360
android webview uh which is in the

239
00:08:49,360 --> 00:08:52,240
mobile application was also forwarding

240
00:08:52,240 --> 00:08:55,200
the users authorization token to the

241
00:08:55,200 --> 00:08:56,480
third party

242
00:08:56,480 --> 00:08:59,279
so basically it's exposing the token

243
00:08:59,279 --> 00:09:02,080
which is which is required for the user

244
00:09:02,080 --> 00:09:04,880
to maintain sessions so this uses token

245
00:09:04,880 --> 00:09:07,040
what was actually being sent to the

246
00:09:07,040 --> 00:09:09,200
third party service as you can see over

247
00:09:09,200 --> 00:09:09,520
here

248
00:09:09,520 --> 00:09:12,800
[Music]

249
00:09:12,800 --> 00:09:16,000
so now that we have understood uh

250
00:09:16,000 --> 00:09:18,959
how an oauth workflow works and in which

251
00:09:18,959 --> 00:09:21,680
flow we have identified this bug let us

252
00:09:21,680 --> 00:09:24,399
see uh what was our initial observation

253
00:09:24,399 --> 00:09:26,560
so initially while

254
00:09:26,560 --> 00:09:29,120
initially what we observed is that while

255
00:09:29,120 --> 00:09:30,959
you are trying to implement in webview

256
00:09:30,959 --> 00:09:33,519
in android you would of course use load

257
00:09:33,519 --> 00:09:34,959
url and

258
00:09:34,959 --> 00:09:36,800
the url that you are trying to load in

259
00:09:36,800 --> 00:09:38,160
your webview

260
00:09:38,160 --> 00:09:40,399
so in this specific example the code

261
00:09:40,399 --> 00:09:42,320
snippet that you are actually seeing is

262
00:09:42,320 --> 00:09:44,160
that we are trying to load an

263
00:09:44,160 --> 00:09:47,600
authorization header during using the

264
00:09:47,600 --> 00:09:52,080
additional http headers so this method

265
00:09:52,080 --> 00:09:54,880
will actually do an authenticated load

266
00:09:54,880 --> 00:09:57,040
as we have seen in the previous slide

267
00:09:57,040 --> 00:09:59,360
what an authenticated load is so here we

268
00:09:59,360 --> 00:10:02,320
are trying to do an authenticated node

269
00:10:02,320 --> 00:10:04,800
and and sending the and sending the

270
00:10:04,800 --> 00:10:06,720
authorization header to this specific

271
00:10:06,720 --> 00:10:09,440
url what we observed is that

272
00:10:09,440 --> 00:10:12,959
so the uh authorization header which is

273
00:10:12,959 --> 00:10:15,600
being sent to the url was also being

274
00:10:15,600 --> 00:10:18,079
sent to any other host which was

275
00:10:18,079 --> 00:10:20,560
triggered in the specific process

276
00:10:20,560 --> 00:10:22,399
what does this means is that

277
00:10:22,399 --> 00:10:24,959
irrespective of the origin

278
00:10:24,959 --> 00:10:28,160
whenever there is a 302 redirect the

279
00:10:28,160 --> 00:10:30,560
authorization header which only belongs

280
00:10:30,560 --> 00:10:32,640
to the client was also being forwarded

281
00:10:32,640 --> 00:10:35,920
to third party

282
00:10:39,519 --> 00:10:42,240
so now that we have seen the bug at a

283
00:10:42,240 --> 00:10:44,800
very high level let's try to understand

284
00:10:44,800 --> 00:10:47,279
the timeline what are the problems that

285
00:10:47,279 --> 00:10:49,519
are phased and what what all we did from

286
00:10:49,519 --> 00:10:52,160
the from the initial observation until

287
00:10:52,160 --> 00:10:54,720
we get got a cv so back in october

288
00:10:54,720 --> 00:10:57,040
august 2019 that is when we have

289
00:10:57,040 --> 00:11:00,079
observed this during a security research

290
00:11:00,079 --> 00:11:02,240
that the header is being exposed to

291
00:11:02,240 --> 00:11:04,880
third party then in december 2019 we

292
00:11:04,880 --> 00:11:07,600
wanted to you know we suspected that

293
00:11:07,600 --> 00:11:10,399
this could be and well this could be

294
00:11:10,399 --> 00:11:12,959
vulnerability in the android premium so

295
00:11:12,959 --> 00:11:15,120
we decided to have our own

296
00:11:15,120 --> 00:11:18,079
implementation and try to replicate an

297
00:11:18,079 --> 00:11:20,959
exact scenario which we observed in a

298
00:11:20,959 --> 00:11:23,440
production environment so what we did is

299
00:11:23,440 --> 00:11:26,160
we developed our own poc application as

300
00:11:26,160 --> 00:11:28,480
well as a backend application and we

301
00:11:28,480 --> 00:11:31,519
tried to document all our observation

302
00:11:31,519 --> 00:11:34,399
and we finally submitted it to google

303
00:11:34,399 --> 00:11:37,200
so in january 2020 we got a response

304
00:11:37,200 --> 00:11:40,399
from google that they were unsure uh

305
00:11:40,399 --> 00:11:42,399
they they said that this is actually a

306
00:11:42,399 --> 00:11:45,120
feature because of compatibility issue

307
00:11:45,120 --> 00:11:47,600
with the older version of the webview

308
00:11:47,600 --> 00:11:49,680
and at that point they were unclear

309
00:11:49,680 --> 00:11:52,399
whether uh they would be able to fix it

310
00:11:52,399 --> 00:11:54,560
because they didn't know that whether it

311
00:11:54,560 --> 00:11:57,760
would break the application or not

312
00:11:57,760 --> 00:12:00,480
so uh after that there was a couple of

313
00:12:00,480 --> 00:12:02,800
back and forth conversation with google

314
00:12:02,800 --> 00:12:06,000
emphasizing on the impact as well as uh

315
00:12:06,000 --> 00:12:08,800
making them explain different use cases

316
00:12:08,800 --> 00:12:10,880
where there could be a

317
00:12:10,880 --> 00:12:14,000
leakage of users token on to the third

318
00:12:14,000 --> 00:12:15,600
party

319
00:12:15,600 --> 00:12:18,240
and finally in february 2020 google

320
00:12:18,240 --> 00:12:20,720
accepted our uh

321
00:12:20,720 --> 00:12:23,200
accepted or submitted one liberty as a

322
00:12:23,200 --> 00:12:26,160
security issues and they said they will

323
00:12:26,160 --> 00:12:28,480
need more time to fix it so they came up

324
00:12:28,480 --> 00:12:31,680
with a specific plan for the fix that

325
00:12:31,680 --> 00:12:33,519
we'll talk about in the next slide and

326
00:12:33,519 --> 00:12:36,000
finally in november 2020 the official

327
00:12:36,000 --> 00:12:41,120
fix was released in chromium version 88.

328
00:12:43,600 --> 00:12:45,120
so

329
00:12:45,120 --> 00:12:45,920
uh

330
00:12:45,920 --> 00:12:46,880
so

331
00:12:46,880 --> 00:12:49,839
we just saw or debug at a very high uh

332
00:12:49,839 --> 00:12:52,320
level now let's try to do an in-depth

333
00:12:52,320 --> 00:12:56,340
analysis of how and where the bug exists

334
00:12:56,340 --> 00:12:57,839
[Music]

335
00:12:57,839 --> 00:13:01,040
so towards my right you actually see the

336
00:13:01,040 --> 00:13:04,399
uh android poc application uh

337
00:13:04,399 --> 00:13:06,399
poc application which is a vanilla

338
00:13:06,399 --> 00:13:09,120
webview implementation uh as you can see

339
00:13:09,120 --> 00:13:11,120
we we have a button over there as soon

340
00:13:11,120 --> 00:13:13,200
as you click on a button it simply

341
00:13:13,200 --> 00:13:16,079
triggers a call to the backend which to

342
00:13:16,079 --> 00:13:18,079
our backend which we have written will

343
00:13:18,079 --> 00:13:19,760
i'll talk talk about it in the next

344
00:13:19,760 --> 00:13:21,360
slide so

345
00:13:21,360 --> 00:13:22,639
ah

346
00:13:22,639 --> 00:13:24,639
previously we spoken about authenticated

347
00:13:24,639 --> 00:13:27,040
load right so this is an example of an

348
00:13:27,040 --> 00:13:29,200
authenticated node if you can see we are

349
00:13:29,200 --> 00:13:32,079
using load url as well as we are setting

350
00:13:32,079 --> 00:13:34,560
the header is authorization

351
00:13:34,560 --> 00:13:36,639
and uh

352
00:13:36,639 --> 00:13:39,360
and basically whenever this url is

353
00:13:39,360 --> 00:13:42,240
loaded the authorization header along

354
00:13:42,240 --> 00:13:45,040
with the value in in an actual scenario

355
00:13:45,040 --> 00:13:48,079
this will contain a jwt token of the

356
00:13:48,079 --> 00:13:49,600
user and

357
00:13:49,600 --> 00:13:50,800
this will be

358
00:13:50,800 --> 00:13:53,600
sent to the loaded url so

359
00:13:53,600 --> 00:13:55,360
this was the uh

360
00:13:55,360 --> 00:13:57,760
this is a small code snippet and if any

361
00:13:57,760 --> 00:14:00,000
wants to anyone wants to understand this

362
00:14:00,000 --> 00:14:02,720
issue you can obvious we have given a

363
00:14:02,720 --> 00:14:05,279
git lab github reference over here you

364
00:14:05,279 --> 00:14:07,279
can go and have a check

365
00:14:07,279 --> 00:14:08,230
on the code

366
00:14:08,230 --> 00:14:10,240
[Music]

367
00:14:10,240 --> 00:14:12,720
so in this slide what your

368
00:14:12,720 --> 00:14:14,800
what you are able to see is a python

369
00:14:14,800 --> 00:14:18,000
flash code uh here the function hello

370
00:14:18,000 --> 00:14:20,639
world is simply doing a redirect

371
00:14:20,639 --> 00:14:24,000
302 redirect scratch pads dot po rg so

372
00:14:24,000 --> 00:14:26,880
here we have just uh taken an example of

373
00:14:26,880 --> 00:14:28,720
scratchpad.org

374
00:14:28,720 --> 00:14:30,240
which

375
00:14:30,240 --> 00:14:32,480
which will act as a third party over

376
00:14:32,480 --> 00:14:35,920
here so if you uh so if if you if you

377
00:14:35,920 --> 00:14:37,920
have seen the example what we are trying

378
00:14:37,920 --> 00:14:41,839
to replicate is an actual or workflow

379
00:14:41,839 --> 00:14:44,560
which in which there is a bug

380
00:14:44,560 --> 00:14:45,839
so the

381
00:14:45,839 --> 00:14:48,560
as soon as you click on the button the

382
00:14:48,560 --> 00:14:51,040
android poc button right it will create

383
00:14:51,040 --> 00:14:53,839
it will uh however it will

384
00:14:53,839 --> 00:14:56,800
uh it will actually request our backend

385
00:14:56,800 --> 00:14:59,120
server over here

386
00:14:59,120 --> 00:15:01,680
and then what all backing server we do

387
00:15:01,680 --> 00:15:03,040
is that it will

388
00:15:03,040 --> 00:15:05,839
it will send 302 redirect response and

389
00:15:05,839 --> 00:15:09,360
it will redirect to scratch patch.org so

390
00:15:09,360 --> 00:15:13,279
after it redirects the client to the

391
00:15:13,279 --> 00:15:15,680
third party we try to intercept the

392
00:15:15,680 --> 00:15:16,800
request in

393
00:15:16,800 --> 00:15:19,760
uh you know in burke so you can see the

394
00:15:19,760 --> 00:15:22,720
authorization token which is supposed to

395
00:15:22,720 --> 00:15:25,920
be the user session token is actually

396
00:15:25,920 --> 00:15:28,880
exposed over here to scratchpatch.org

397
00:15:28,880 --> 00:15:31,519
which is an example in our case

398
00:15:31,519 --> 00:15:34,000
of our third party service

399
00:15:34,000 --> 00:15:36,000
so this was the actual observation so

400
00:15:36,000 --> 00:15:37,680
i've captured a video where we are

401
00:15:37,680 --> 00:15:39,600
actually trying to replicate the bug so

402
00:15:39,600 --> 00:15:42,160
let's have a

403
00:15:42,240 --> 00:15:45,120
look at the demo

404
00:15:52,320 --> 00:15:53,279
so

405
00:15:53,279 --> 00:15:56,160
what you see is here uh what you see

406
00:15:56,160 --> 00:15:57,440
here

407
00:15:57,440 --> 00:15:59,440
is that towards

408
00:15:59,440 --> 00:16:04,560
site i have my uh uh i have my

409
00:16:04,560 --> 00:16:07,120
on android studio elevator and towards

410
00:16:07,120 --> 00:16:10,079
the left i am what i'm doing is actually

411
00:16:10,079 --> 00:16:12,560
uh intercepting the

412
00:16:12,560 --> 00:16:14,399
what i'm doing is actually intercepting

413
00:16:14,399 --> 00:16:17,040
the request as well as the response

414
00:16:17,040 --> 00:16:17,839
okay

415
00:16:17,839 --> 00:16:21,040
so let me let me play this video uh

416
00:16:21,040 --> 00:16:23,040
as soon as i as you see as soon as i

417
00:16:23,040 --> 00:16:25,360
click this is a legitimate request which

418
00:16:25,360 --> 00:16:28,480
is directed towards my uh identity

419
00:16:28,480 --> 00:16:30,160
service so your

420
00:16:30,160 --> 00:16:32,240
identity service here is my back in

421
00:16:32,240 --> 00:16:34,720
python code which is hosted locally here

422
00:16:34,720 --> 00:16:37,759
if you see i'm doing a get and on the

423
00:16:37,759 --> 00:16:39,759
authorization i'm sending on the

424
00:16:39,759 --> 00:16:41,680
authorization header i'm sending a

425
00:16:41,680 --> 00:16:45,719
secret header over here

426
00:16:53,040 --> 00:16:54,160
so

427
00:16:54,160 --> 00:16:56,240
as soon as i forwarded that request to

428
00:16:56,240 --> 00:16:58,800
my back end as expected my

429
00:16:58,800 --> 00:17:02,079
python code is redirecting with 302 and

430
00:17:02,079 --> 00:17:05,359
it is redirecting to scratchpatch.org

431
00:17:05,359 --> 00:17:07,520
so now let's see what happens on the

432
00:17:07,520 --> 00:17:09,599
redirection

433
00:17:09,599 --> 00:17:12,559
so after the client receives this 302

434
00:17:12,559 --> 00:17:14,000
redirection

435
00:17:14,000 --> 00:17:17,760
the expected uh the expected behavior is

436
00:17:17,760 --> 00:17:20,720
that to drop this header right so if you

437
00:17:20,720 --> 00:17:22,240
observe over here

438
00:17:22,240 --> 00:17:25,439
the host is scratch patch.org and we are

439
00:17:25,439 --> 00:17:27,760
all we are actually forwarding the

440
00:17:27,760 --> 00:17:30,320
authorization header

441
00:17:30,320 --> 00:17:33,280
which is the actual user session token

442
00:17:33,280 --> 00:17:36,799
to to the third party

443
00:17:36,799 --> 00:17:39,440
so this was the exact behavior that we

444
00:17:39,440 --> 00:17:41,520
documented and that

445
00:17:41,520 --> 00:17:44,160
as a bug report and we submitted this

446
00:17:44,160 --> 00:17:47,840
behavior to google

447
00:17:56,240 --> 00:17:57,280
so

448
00:17:57,280 --> 00:18:00,480
uh so now we have done in the uh so now

449
00:18:00,480 --> 00:18:02,559
we have understood the actual bug and

450
00:18:02,559 --> 00:18:04,080
how it happens and where it happens

451
00:18:04,080 --> 00:18:05,760
right let's try to understand what was

452
00:18:05,760 --> 00:18:07,919
the role of plan on official fix so

453
00:18:07,919 --> 00:18:09,919
while having a conversation with google

454
00:18:09,919 --> 00:18:13,280
we we had a couple of we had a couple of

455
00:18:13,280 --> 00:18:15,440
conversation focusing on the official

456
00:18:15,440 --> 00:18:18,720
fix and finally it was decided that uh

457
00:18:18,720 --> 00:18:20,720
they will remove any extra header from

458
00:18:20,720 --> 00:18:23,120
the request if the request is redirected

459
00:18:23,120 --> 00:18:25,919
to a different origin so

460
00:18:25,919 --> 00:18:28,320
they would actually observe the request

461
00:18:28,320 --> 00:18:31,440
and if the origin if the redirected

462
00:18:31,440 --> 00:18:33,280
origin is actually different from the

463
00:18:33,280 --> 00:18:35,919
request origin then they would

464
00:18:35,919 --> 00:18:37,919
uh then they would drop that header

465
00:18:37,919 --> 00:18:40,400
because that header could be sensitive

466
00:18:40,400 --> 00:18:42,320
and apart from that they wanted to

467
00:18:42,320 --> 00:18:44,960
record a matrix where uh they wanted to

468
00:18:44,960 --> 00:18:47,440
know what would happen to that sensitive

469
00:18:47,440 --> 00:18:50,320
header after the redirection and the

470
00:18:50,320 --> 00:18:52,480
third point which is a very important

471
00:18:52,480 --> 00:18:53,760
point that

472
00:18:53,760 --> 00:18:56,480
they wrote a test case where they would

473
00:18:56,480 --> 00:18:58,720
check whether this fix is actually

474
00:18:58,720 --> 00:19:00,720
working or not whether the extra header

475
00:19:00,720 --> 00:19:03,120
are actually cleared or not if the app

476
00:19:03,120 --> 00:19:06,960
loads if if if app loads the same

477
00:19:06,960 --> 00:19:09,840
redirected url into

478
00:19:09,840 --> 00:19:11,679
load url so

479
00:19:11,679 --> 00:19:13,280
if you guys are interested then you can

480
00:19:13,280 --> 00:19:16,240
actually go at this specific url and

481
00:19:16,240 --> 00:19:19,280
look at the diff as well as the uh you

482
00:19:19,280 --> 00:19:21,120
know test case that we are talking about

483
00:19:21,120 --> 00:19:24,120
here

484
00:19:24,880 --> 00:19:27,919
uh that's all from my side now i will uh

485
00:19:27,919 --> 00:19:29,760
hand it over to shiv and he will talk

486
00:19:29,760 --> 00:19:34,480
about commonly uh webview issues

487
00:19:34,480 --> 00:19:36,799
thanking that for detailed analysis on

488
00:19:36,799 --> 00:19:38,480
the chromium cve

489
00:19:38,480 --> 00:19:40,640
uh now let's understand the common web

490
00:19:40,640 --> 00:19:42,320
related security issues that we have

491
00:19:42,320 --> 00:19:44,240
observed over time

492
00:19:44,240 --> 00:19:45,520
so

493
00:19:45,520 --> 00:19:48,000
these are the four most common regulated

494
00:19:48,000 --> 00:19:49,600
security issues that we have observed

495
00:19:49,600 --> 00:19:52,160
over time the first one is lack of url

496
00:19:52,160 --> 00:19:53,360
validation

497
00:19:53,360 --> 00:19:54,640
uh whereas the second one is in

498
00:19:54,640 --> 00:19:56,400
sufficient url validation so basically

499
00:19:56,400 --> 00:19:58,720
both of these url both of these issues

500
00:19:58,720 --> 00:20:00,799
are pertaining to loading a url in a

501
00:20:00,799 --> 00:20:03,280
webview and having insufficient

502
00:20:03,280 --> 00:20:05,919
validation or no validation at all the

503
00:20:05,919 --> 00:20:07,120
third one is

504
00:20:07,120 --> 00:20:09,760
uh unintended like leakage of sensitive

505
00:20:09,760 --> 00:20:12,559
third parties so basically this category

506
00:20:12,559 --> 00:20:14,080
of issue is very similar to one we

507
00:20:14,080 --> 00:20:16,559
discussed while describing the cbe where

508
00:20:16,559 --> 00:20:18,320
unintentionally we are sharing users

509
00:20:18,320 --> 00:20:21,039
information to third party

510
00:20:21,039 --> 00:20:22,559
last but not the least is insufficient

511
00:20:22,559 --> 00:20:24,720
webview isolation wherein we use our own

512
00:20:24,720 --> 00:20:26,080
web views to

513
00:20:26,080 --> 00:20:28,400
load uh untrusted content

514
00:20:28,400 --> 00:20:30,080
so this was just a brief about these

515
00:20:30,080 --> 00:20:32,080
issues we'll talk about them in in depth

516
00:20:32,080 --> 00:20:34,559
in the upcoming slides

517
00:20:34,559 --> 00:20:36,880
so uh let's understand as i mentioned

518
00:20:36,880 --> 00:20:38,640
the the first and second issues are

519
00:20:38,640 --> 00:20:40,559
somewhat because of the amalgamation of

520
00:20:40,559 --> 00:20:42,640
deep links intents and

521
00:20:42,640 --> 00:20:45,280
uh web views so let's let's understand

522
00:20:45,280 --> 00:20:47,039
this with help of a use case so let's

523
00:20:47,039 --> 00:20:48,720
say we have

524
00:20:48,720 --> 00:20:50,480
we have two different screens i'm

525
00:20:50,480 --> 00:20:52,320
referring to them as screen just to just

526
00:20:52,320 --> 00:20:54,000
for the simplicity it would be an

527
00:20:54,000 --> 00:20:55,679
activity in the case of android and view

528
00:20:55,679 --> 00:20:58,559
controller in the case of ios so

529
00:20:58,559 --> 00:21:00,000
just for the simplicity let's call them

530
00:21:00,000 --> 00:21:02,240
screens so we have two screens and one

531
00:21:02,240 --> 00:21:04,320
screen is having a button when once that

532
00:21:04,320 --> 00:21:06,159
button is clicked it actually calls the

533
00:21:06,159 --> 00:21:08,000
second screen and second screen is

534
00:21:08,000 --> 00:21:10,159
having a web view component so

535
00:21:10,159 --> 00:21:12,320
while we are calling the second screen

536
00:21:12,320 --> 00:21:15,120
uh we are also passing a url maybe it

537
00:21:15,120 --> 00:21:17,520
could be a part of intent or a deep link

538
00:21:17,520 --> 00:21:19,360
and the url that we are passing would

539
00:21:19,360 --> 00:21:21,360
actually load in the webview component

540
00:21:21,360 --> 00:21:24,799
okay so uh and and so basically the

541
00:21:24,799 --> 00:21:26,400
first screen would have a button once we

542
00:21:26,400 --> 00:21:28,000
click on a button it would open a second

543
00:21:28,000 --> 00:21:30,240
screen which is having a webview and the

544
00:21:30,240 --> 00:21:32,159
url that we are passing while calling

545
00:21:32,159 --> 00:21:33,919
the second screen would be loaded in

546
00:21:33,919 --> 00:21:35,600
that particular

547
00:21:35,600 --> 00:21:37,200
uh web component

548
00:21:37,200 --> 00:21:38,720
so as i mentioned there could be two

549
00:21:38,720 --> 00:21:41,679
ways uh we could pass the url or we

550
00:21:41,679 --> 00:21:43,360
could invoke the second screen through a

551
00:21:43,360 --> 00:21:45,760
deep link or we could invoke the second

552
00:21:45,760 --> 00:21:48,080
screen through vanilla intents so they

553
00:21:48,080 --> 00:21:50,240
would be somewhat like this wherein i

554
00:21:50,240 --> 00:21:52,320
have a deep link and i'm calling this

555
00:21:52,320 --> 00:21:54,159
particular screen type which is webview

556
00:21:54,159 --> 00:21:56,320
and the webview url or the url to be

557
00:21:56,320 --> 00:21:58,240
loaded is passed as a deep link

558
00:21:58,240 --> 00:22:00,480
parameter the second one is vanilla

559
00:22:00,480 --> 00:22:02,480
intense wherein i'm directly calling the

560
00:22:02,480 --> 00:22:06,000
component name and uh the url to be

561
00:22:06,000 --> 00:22:08,159
loaded is sent as a part of

562
00:22:08,159 --> 00:22:09,679
extras so

563
00:22:09,679 --> 00:22:12,400
so basically just to uh

564
00:22:12,400 --> 00:22:14,080
just to just to elaborate for people who

565
00:22:14,080 --> 00:22:15,840
are not aware of intent so intents are

566
00:22:15,840 --> 00:22:18,799
kind of a messages which are used in uh

567
00:22:18,799 --> 00:22:20,559
inter process communication so you can

568
00:22:20,559 --> 00:22:23,120
call one of the application components

569
00:22:23,120 --> 00:22:24,559
through another application components

570
00:22:24,559 --> 00:22:27,679
using intents so while sending an intent

571
00:22:27,679 --> 00:22:29,679
to this particular component i'm also

572
00:22:29,679 --> 00:22:31,120
sending the

573
00:22:31,120 --> 00:22:34,240
url to be loaded as part of extras okay

574
00:22:34,240 --> 00:22:36,480
so this this was the use case now let's

575
00:22:36,480 --> 00:22:39,360
see uh if we have no valid at all so

576
00:22:39,360 --> 00:22:41,600
what what could go wrong so if i have no

577
00:22:41,600 --> 00:22:43,679
validation at all what i could do is as

578
00:22:43,679 --> 00:22:46,320
an attacker i could craft this deep link

579
00:22:46,320 --> 00:22:48,159
in such a way that i could replace the

580
00:22:48,159 --> 00:22:50,400
webview url with some malicious url so

581
00:22:50,400 --> 00:22:51,919
application was expecting some

582
00:22:51,919 --> 00:22:53,760
legitimate url based on the

583
00:22:53,760 --> 00:22:55,840
functionality but i could change that

584
00:22:55,840 --> 00:22:58,720
web url to some malicious url and the

585
00:22:58,720 --> 00:23:01,039
moment i click on or trigger the deep

586
00:23:01,039 --> 00:23:03,600
link the the component would be invoked

587
00:23:03,600 --> 00:23:05,280
and the malicious url would be loaded in

588
00:23:05,280 --> 00:23:07,039
this particular activity or view

589
00:23:07,039 --> 00:23:08,640
controller

590
00:23:08,640 --> 00:23:10,640
secondly in the case of intents the

591
00:23:10,640 --> 00:23:12,320
similar thing could happen the

592
00:23:12,320 --> 00:23:14,080
application was expecting a legitimate

593
00:23:14,080 --> 00:23:16,240
url but i could craft and craft the

594
00:23:16,240 --> 00:23:18,159
intent in such a way that i would change

595
00:23:18,159 --> 00:23:21,039
this legitimate url with malicious url

596
00:23:21,039 --> 00:23:22,720
and the moment it's triggered the

597
00:23:22,720 --> 00:23:24,480
component would invoke

598
00:23:24,480 --> 00:23:26,080
the web component would invoke the

599
00:23:26,080 --> 00:23:28,400
malicious url

600
00:23:28,400 --> 00:23:30,240
let's let's go into the code snippet so

601
00:23:30,240 --> 00:23:32,400
i have this code snippet for android

602
00:23:32,400 --> 00:23:35,200
where in i have a

603
00:23:35,200 --> 00:23:37,280
vulnerable vulnerable code snippet for

604
00:23:37,280 --> 00:23:38,960
webview demo

605
00:23:38,960 --> 00:23:40,880
deep link so basically if you see this

606
00:23:40,880 --> 00:23:42,080
deep link it

607
00:23:42,080 --> 00:23:44,960
it actually has a url in it so once this

608
00:23:44,960 --> 00:23:46,640
deep link is triggered the second

609
00:23:46,640 --> 00:23:49,279
component is invoked we pass the url out

610
00:23:49,279 --> 00:23:51,919
of it and if you see i'm using load url

611
00:23:51,919 --> 00:23:53,760
api the one we discussed while talking

612
00:23:53,760 --> 00:23:56,320
about webviews so i'm just passing this

613
00:23:56,320 --> 00:23:59,360
url to the deep link uh to the load url

614
00:23:59,360 --> 00:24:02,320
api without any validation and and uh

615
00:24:02,320 --> 00:24:04,480
the url is loaded so again like i could

616
00:24:04,480 --> 00:24:06,000
change it with some malicious url let's

617
00:24:06,000 --> 00:24:08,159
say ubicom and i triggered this deep

618
00:24:08,159 --> 00:24:11,039
link and it would load evil.com

619
00:24:11,039 --> 00:24:13,600
so again uh let's understand this with

620
00:24:13,600 --> 00:24:15,120
help of an example

621
00:24:15,120 --> 00:24:16,720
i have

622
00:24:16,720 --> 00:24:18,799
i have a webview demo app

623
00:24:18,799 --> 00:24:20,960
uh the link is available uh we will

624
00:24:20,960 --> 00:24:23,039
share it once we are sharing this tech

625
00:24:23,039 --> 00:24:25,760
so basically this vulnerable webview app

626
00:24:25,760 --> 00:24:29,279
is having an activity and uh it is uh

627
00:24:29,279 --> 00:24:31,039
the activity is having a webview

628
00:24:31,039 --> 00:24:33,440
component in it so once we are once this

629
00:24:33,440 --> 00:24:35,679
activity is loaded or like it's invoked

630
00:24:35,679 --> 00:24:37,679
we are calling the value component

631
00:24:37,679 --> 00:24:40,480
and here instead of using deep links in

632
00:24:40,480 --> 00:24:41,760
the case of previous example we are

633
00:24:41,760 --> 00:24:44,159
using intents so what happens is we are

634
00:24:44,159 --> 00:24:45,760
calling this particular activity which

635
00:24:45,760 --> 00:24:47,360
is having a webview component through an

636
00:24:47,360 --> 00:24:50,400
intent and intent is having the url to

637
00:24:50,400 --> 00:24:53,840
be loaded as extras so if you see i have

638
00:24:53,840 --> 00:24:55,919
loadview method so the moment i have

639
00:24:55,919 --> 00:24:58,080
called this activity on createmco i am

640
00:24:58,080 --> 00:25:00,400
calling loadview method and load value

641
00:25:00,400 --> 00:25:02,960
method fetches the w object out of the

642
00:25:02,960 --> 00:25:07,440
ui element and it loads the

643
00:25:07,440 --> 00:25:10,080
it loads the loads that url found

644
00:25:10,080 --> 00:25:12,559
through the edge url extras

645
00:25:12,559 --> 00:25:15,039
in the intent without any validation so

646
00:25:15,039 --> 00:25:17,279
as i mentioned what we could do is as an

647
00:25:17,279 --> 00:25:19,279
attacker we could craft an intent in

648
00:25:19,279 --> 00:25:21,360
such a way that we could change the

649
00:25:21,360 --> 00:25:23,600
legitimate url with some malicious url

650
00:25:23,600 --> 00:25:25,279
and the moment this intent is triggered

651
00:25:25,279 --> 00:25:27,440
it would load that malicious url

652
00:25:27,440 --> 00:25:31,360
uh into our app so here we are using adb

653
00:25:31,360 --> 00:25:33,520
and activity manager so basically

654
00:25:33,520 --> 00:25:35,520
through activity manager we are invoking

655
00:25:35,520 --> 00:25:36,960
this particular activity which is

656
00:25:36,960 --> 00:25:38,799
registration webview so basically this

657
00:25:38,799 --> 00:25:40,320
activity is a ui screen which is having

658
00:25:40,320 --> 00:25:43,520
a web component and in the extras if you

659
00:25:43,520 --> 00:25:46,400
see i'm passing reg url parameter which

660
00:25:46,400 --> 00:25:49,200
has the evil.com so i could change it

661
00:25:49,200 --> 00:25:50,559
with some

662
00:25:50,559 --> 00:25:52,480
some malicious url

663
00:25:52,480 --> 00:25:53,679
so let's say what happens when we

664
00:25:53,679 --> 00:25:56,640
trigger this the movement we trigger

665
00:25:56,640 --> 00:25:58,960
this particular uh

666
00:25:58,960 --> 00:26:00,720
intent uh

667
00:26:00,720 --> 00:26:02,880
through activity manager it opens

668
00:26:02,880 --> 00:26:05,600
evil.com in our own app okay

669
00:26:05,600 --> 00:26:06,480
so

670
00:26:06,480 --> 00:26:10,480
this was uh kind of a demo for no url

671
00:26:10,480 --> 00:26:12,720
validation

672
00:26:12,720 --> 00:26:15,360
now let's see

673
00:26:15,360 --> 00:26:19,039
what happens or this result

674
00:26:19,039 --> 00:26:21,039
so yeah let's see what happens when

675
00:26:21,039 --> 00:26:23,760
there is insufficient url validation

676
00:26:23,760 --> 00:26:26,559
so again we have the same webview uh

677
00:26:26,559 --> 00:26:29,600
uh same deep link uh and in this in this

678
00:26:29,600 --> 00:26:32,240
particular we have every demo app it is

679
00:26:32,240 --> 00:26:33,840
having a url but now we are performing

680
00:26:33,840 --> 00:26:36,080
validation so if you see i am parsing

681
00:26:36,080 --> 00:26:39,279
this particular deep link and i am uh

682
00:26:39,279 --> 00:26:40,640
i'm passing this deep link and

683
00:26:40,640 --> 00:26:42,640
extracting the host out of it so if you

684
00:26:42,640 --> 00:26:44,799
see i'm i'm extracting the host out of

685
00:26:44,799 --> 00:26:45,919
the uri

686
00:26:45,919 --> 00:26:47,760
object and i'm comparing it with

687
00:26:47,760 --> 00:26:49,760
shifsani.com which is kind of a white

688
00:26:49,760 --> 00:26:52,159
listed domain so i'm expecting this this

689
00:26:52,159 --> 00:26:55,360
to have only shifsani.com so i am uh

690
00:26:55,360 --> 00:26:57,039
comparing it with a white listed domain

691
00:26:57,039 --> 00:26:59,360
which is shifsani.com or a subdomain of

692
00:26:59,360 --> 00:27:02,559
shifsani.com and then if it matches then

693
00:27:02,559 --> 00:27:04,960
i'm loading a url else i am

694
00:27:04,960 --> 00:27:06,559
rejecting the load

695
00:27:06,559 --> 00:27:08,799
so if you see uh this is following

696
00:27:08,799 --> 00:27:11,840
all the standard recommended approach of

697
00:27:11,840 --> 00:27:13,360
of a validation which is a white listed

698
00:27:13,360 --> 00:27:14,480
based approach and then we are

699
00:27:14,480 --> 00:27:15,919
specifically checking for a certain

700
00:27:15,919 --> 00:27:18,640
domain but still it's insufficient

701
00:27:18,640 --> 00:27:20,960
let's understand why so basically there

702
00:27:20,960 --> 00:27:22,399
was an issue identified in the

703
00:27:22,399 --> 00:27:24,559
implementation of get host method so

704
00:27:24,559 --> 00:27:27,039
what happens is get host method behaves

705
00:27:27,039 --> 00:27:30,000
differently when when when a crafted url

706
00:27:30,000 --> 00:27:31,600
is being provided to it

707
00:27:31,600 --> 00:27:33,840
so if you see over here i have a string

708
00:27:33,840 --> 00:27:36,960
url which is actually having two domains

709
00:27:36,960 --> 00:27:38,559
so these two domains are separated

710
00:27:38,559 --> 00:27:41,039
through backslash and add symbol

711
00:27:41,039 --> 00:27:43,200
okay so one is attacker.com the other

712
00:27:43,200 --> 00:27:45,600
one is legitimate.com and these two

713
00:27:45,600 --> 00:27:47,760
domains are separated through backslash

714
00:27:47,760 --> 00:27:51,440
and add symbol and the moment this kind

715
00:27:51,440 --> 00:27:53,679
of crafted url is provided to get host

716
00:27:53,679 --> 00:27:55,200
it would actually take the second domain

717
00:27:55,200 --> 00:27:57,200
instead of first domain so it would take

718
00:27:57,200 --> 00:27:59,279
legitimate.com and would

719
00:27:59,279 --> 00:28:02,399
pass the validation but however uh when

720
00:28:02,399 --> 00:28:04,640
the same url is being passed to load url

721
00:28:04,640 --> 00:28:07,039
after validation it takes the first

722
00:28:07,039 --> 00:28:09,360
domain so this is how you could bypass

723
00:28:09,360 --> 00:28:11,679
the the implementation

724
00:28:11,679 --> 00:28:13,600
so that is why it's not recommended to

725
00:28:13,600 --> 00:28:15,760
use get host based validation you could

726
00:28:15,760 --> 00:28:18,640
read more about this in a in a very

727
00:28:18,640 --> 00:28:20,720
great report by buggy pro and hacker one

728
00:28:20,720 --> 00:28:22,880
so we have the link here uh you can you

729
00:28:22,880 --> 00:28:24,559
can you can go to this link once we

730
00:28:24,559 --> 00:28:26,080
release the deck

731
00:28:26,080 --> 00:28:28,559
so uh so basically whenever we are using

732
00:28:28,559 --> 00:28:31,279
get host based validation we should not

733
00:28:31,279 --> 00:28:33,600
rely on get host based validation just

734
00:28:33,600 --> 00:28:35,840
because it could be bypassed if a

735
00:28:35,840 --> 00:28:38,000
crafted url is being provided so

736
00:28:38,000 --> 00:28:39,679
basically this issue was actually fixed

737
00:28:39,679 --> 00:28:42,399
in api level 28 based on my access and

738
00:28:42,399 --> 00:28:44,640
however api level 27 and below in

739
00:28:44,640 --> 00:28:46,720
android us should one will do it so

740
00:28:46,720 --> 00:28:48,640
whenever we are doing a validation we

741
00:28:48,640 --> 00:28:51,120
should refrain from using get host and

742
00:28:51,120 --> 00:28:52,799
instead we should use get authority and

743
00:28:52,799 --> 00:28:55,039
steam based text we'll talk about the

744
00:28:55,039 --> 00:28:57,360
ways wherein we could do url validation

745
00:28:57,360 --> 00:29:01,120
securely in the upcoming slides

746
00:29:01,440 --> 00:29:04,399
so uh if you if you recall okay in both

747
00:29:04,399 --> 00:29:06,960
the cases uh in the first one wherein we

748
00:29:06,960 --> 00:29:09,039
have no url validation at all and in the

749
00:29:09,039 --> 00:29:10,640
second one wherein we have url

750
00:29:10,640 --> 00:29:12,640
validation using get host but it could

751
00:29:12,640 --> 00:29:13,919
be bypassed

752
00:29:13,919 --> 00:29:15,840
what could be the impact

753
00:29:15,840 --> 00:29:17,760
so basically impact somewhat remains the

754
00:29:17,760 --> 00:29:20,000
same because it totally depends upon the

755
00:29:20,000 --> 00:29:22,080
privileges of the underlying webview

756
00:29:22,080 --> 00:29:25,760
so the impact could be as severe as

757
00:29:25,760 --> 00:29:27,520
doing a remote code execution on the end

758
00:29:27,520 --> 00:29:28,960
user's device

759
00:29:28,960 --> 00:29:32,080
or just displaying some html to fish the

760
00:29:32,080 --> 00:29:34,720
users so it totally depends upon the

761
00:29:34,720 --> 00:29:36,640
privileges that the underlying webview

762
00:29:36,640 --> 00:29:38,559
is having and what we could do from

763
00:29:38,559 --> 00:29:41,200
there so let's understand few examples

764
00:29:41,200 --> 00:29:42,480
so let's say webview is having

765
00:29:42,480 --> 00:29:44,960
privileges to execute javascript in that

766
00:29:44,960 --> 00:29:46,640
case we could just run malicious

767
00:29:46,640 --> 00:29:48,000
javascript

768
00:29:48,000 --> 00:29:49,520
in the scenario when webview is

769
00:29:49,520 --> 00:29:51,279
privileged enough to have some

770
00:29:51,279 --> 00:29:53,600
javascript bridges attached so what

771
00:29:53,600 --> 00:29:55,360
javascript bridges would help is our

772
00:29:55,360 --> 00:29:57,679
javascript interface would help us we

773
00:29:57,679 --> 00:29:59,679
could call the native method that is

774
00:29:59,679 --> 00:30:02,480
java kotlin through javascript and that

775
00:30:02,480 --> 00:30:05,200
is how we could even call some sensitive

776
00:30:05,200 --> 00:30:08,000
methods and exfiltrate uses auth token

777
00:30:08,000 --> 00:30:08,960
as well

778
00:30:08,960 --> 00:30:10,480
or in certain scenarios we could

779
00:30:10,480 --> 00:30:12,559
escalate this particular attack by

780
00:30:12,559 --> 00:30:14,480
accessing local storage and content

781
00:30:14,480 --> 00:30:16,640
providers and exfiltrating those files

782
00:30:16,640 --> 00:30:17,919
and send it to

783
00:30:17,919 --> 00:30:19,600
our command and control

784
00:30:19,600 --> 00:30:22,159
so it totally depends so in both the

785
00:30:22,159 --> 00:30:24,240
cases wherein we have no url validation

786
00:30:24,240 --> 00:30:26,240
or insufficient url validation it

787
00:30:26,240 --> 00:30:28,240
totally depends upon the privileges of

788
00:30:28,240 --> 00:30:29,760
the underlying budget where the

789
00:30:29,760 --> 00:30:31,679
privileges are the more the impact would

790
00:30:31,679 --> 00:30:33,840
be

791
00:30:34,559 --> 00:30:36,720
uh so now we are through with the first

792
00:30:36,720 --> 00:30:38,880
and second issue let's talk about the

793
00:30:38,880 --> 00:30:40,480
third one which is unintended data

794
00:30:40,480 --> 00:30:41,440
leakage

795
00:30:41,440 --> 00:30:42,799
so

796
00:30:42,799 --> 00:30:45,440
this would be a family of issues having

797
00:30:45,440 --> 00:30:47,919
all the issues related to uh sharing

798
00:30:47,919 --> 00:30:49,520
unintended information with third

799
00:30:49,520 --> 00:30:50,480
parties

800
00:30:50,480 --> 00:30:52,960
so be it sharing users or tokens in

801
00:30:52,960 --> 00:30:55,360
reference headers or some query string

802
00:30:55,360 --> 00:30:56,080
or

803
00:30:56,080 --> 00:30:57,600
doing authenticated loads over third

804
00:30:57,600 --> 00:30:59,840
parties so let's again understand this

805
00:30:59,840 --> 00:31:01,519
with help of an example

806
00:31:01,519 --> 00:31:03,039
so if you see over here

807
00:31:03,039 --> 00:31:06,240
i am leaking users auth tokens to google

808
00:31:06,240 --> 00:31:07,760
tag manager and this is something which

809
00:31:07,760 --> 00:31:09,519
is very common and we have observed in a

810
00:31:09,519 --> 00:31:11,919
lot of mobile applications so

811
00:31:11,919 --> 00:31:15,200
after watch flow uh the id token is

812
00:31:15,200 --> 00:31:17,679
being uh sent to the

813
00:31:17,679 --> 00:31:20,559
third party however uh we are also

814
00:31:20,559 --> 00:31:22,000
sharing

815
00:31:22,000 --> 00:31:23,919
the id token of user to some different

816
00:31:23,919 --> 00:31:25,679
third party which is google tag manager

817
00:31:25,679 --> 00:31:26,880
over here

818
00:31:26,880 --> 00:31:29,120
or it could be doing an authenticated

819
00:31:29,120 --> 00:31:30,320
load to a third party domain so

820
00:31:30,320 --> 00:31:32,159
authenticated load is only meant to

821
00:31:32,159 --> 00:31:34,159
share our observance to our identity

822
00:31:34,159 --> 00:31:36,640
service and not are not to the third

823
00:31:36,640 --> 00:31:38,320
party service so in the scenario wherein

824
00:31:38,320 --> 00:31:40,320
we are doing authenticated load

825
00:31:40,320 --> 00:31:42,960
over our own over a third party domain

826
00:31:42,960 --> 00:31:44,799
uh we would be leaking users auth token

827
00:31:44,799 --> 00:31:47,600
so if you see over here i am sending the

828
00:31:47,600 --> 00:31:50,960
user's author token to thirdparty.com

829
00:31:50,960 --> 00:31:52,559
the third one is

830
00:31:52,559 --> 00:31:54,399
again a category of issues wherein we

831
00:31:54,399 --> 00:31:56,960
are sharing sensitive data over query

832
00:31:56,960 --> 00:31:58,559
string so if you see over there i'm

833
00:31:58,559 --> 00:32:00,720
sending users auth tokens as a part of

834
00:32:00,720 --> 00:32:01,919
query string

835
00:32:01,919 --> 00:32:04,880
and if this is the case or if if not if

836
00:32:04,880 --> 00:32:07,039
not open it it could be any sensitive

837
00:32:07,039 --> 00:32:09,519
data so let's say it could be users pii

838
00:32:09,519 --> 00:32:11,919
so in this particular case all this data

839
00:32:11,919 --> 00:32:13,840
would be logged in the backend logs and

840
00:32:13,840 --> 00:32:15,279
whoever is having access to those

841
00:32:15,279 --> 00:32:18,159
backend logs be it qa engineer be

842
00:32:18,159 --> 00:32:20,640
web developers be mobile developers or

843
00:32:20,640 --> 00:32:22,880
security engineers all of those set of

844
00:32:22,880 --> 00:32:24,640
engineers or users would have access to

845
00:32:24,640 --> 00:32:27,039
those sensitive data so that is why it's

846
00:32:27,039 --> 00:32:28,960
not recommended so whenever you need to

847
00:32:28,960 --> 00:32:30,399
send any kind of sensitive data we

848
00:32:30,399 --> 00:32:32,720
should not rely on get and send it as a

849
00:32:32,720 --> 00:32:35,600
part of query string

850
00:32:35,840 --> 00:32:38,000
so uh now we are through with the three

851
00:32:38,000 --> 00:32:40,000
issues it's this this is the last one

852
00:32:40,000 --> 00:32:42,559
which is lack of debut isolation again

853
00:32:42,559 --> 00:32:44,240
let's understand this with help of an

854
00:32:44,240 --> 00:32:46,720
example let's say we have an application

855
00:32:46,720 --> 00:32:48,559
which is onboarded with different third

856
00:32:48,559 --> 00:32:51,679
parties okay and user is able to provide

857
00:32:51,679 --> 00:32:53,679
or access services which is provided by

858
00:32:53,679 --> 00:32:56,240
our application and also access services

859
00:32:56,240 --> 00:32:58,640
provided by third-party services

860
00:32:58,640 --> 00:33:00,960
and the the user is able to access the

861
00:33:00,960 --> 00:33:02,559
third-party services through a webview

862
00:33:02,559 --> 00:33:04,080
so the movement

863
00:33:04,080 --> 00:33:06,880
user sees the tile for a third party

864
00:33:06,880 --> 00:33:08,799
the tile is being clicked it opens a web

865
00:33:08,799 --> 00:33:11,519
view and third party renders the content

866
00:33:11,519 --> 00:33:13,039
on on the web view

867
00:33:13,039 --> 00:33:15,679
so in the case we are using our own web

868
00:33:15,679 --> 00:33:18,480
views to or we are allowing partners or

869
00:33:18,480 --> 00:33:20,480
third parties to use our own web views

870
00:33:20,480 --> 00:33:22,240
and load their content

871
00:33:22,240 --> 00:33:24,559
it actually opens a door for uh

872
00:33:24,559 --> 00:33:26,480
exfiltration of data

873
00:33:26,480 --> 00:33:28,720
so today the data might be legitimate

874
00:33:28,720 --> 00:33:30,320
and expected but tomorrow let's say

875
00:33:30,320 --> 00:33:32,080
there is a breach of trust or the

876
00:33:32,080 --> 00:33:34,320
partner itself is compromised in all

877
00:33:34,320 --> 00:33:36,399
those cases the legitimate data would be

878
00:33:36,399 --> 00:33:38,240
replaced with some malicious data and

879
00:33:38,240 --> 00:33:39,840
again it totally depends upon how

880
00:33:39,840 --> 00:33:41,679
privileged that web ui is that we are

881
00:33:41,679 --> 00:33:43,120
sharing with the partner

882
00:33:43,120 --> 00:33:46,399
so if that's the case uh we would be

883
00:33:46,399 --> 00:33:48,640
again opening a door for unintended data

884
00:33:48,640 --> 00:33:51,120
leakage or

885
00:33:51,120 --> 00:33:53,279
exfiltration of data in case there is a

886
00:33:53,279 --> 00:33:55,840
breach of trust or a partner compromise

887
00:33:55,840 --> 00:33:58,320
again uh the question comes if this is a

888
00:33:58,320 --> 00:33:59,360
functional requirement of the

889
00:33:59,360 --> 00:34:01,600
application how to solve it

890
00:34:01,600 --> 00:34:04,880
so in that case uh if we want to have

891
00:34:04,880 --> 00:34:07,120
abused approach only and we want to load

892
00:34:07,120 --> 00:34:09,280
partners content over webby only we

893
00:34:09,280 --> 00:34:10,879
should rely on chrome custom tabs and

894
00:34:10,879 --> 00:34:13,520
safari view controllers we'll talk about

895
00:34:13,520 --> 00:34:16,320
them in detail in the upcoming slides

896
00:34:16,320 --> 00:34:19,119
so this was the common vibrated security

897
00:34:19,119 --> 00:34:20,960
issues that we have observed over time

898
00:34:20,960 --> 00:34:22,639
now we'll talk about the learnings and

899
00:34:22,639 --> 00:34:24,239
recommendations as the way wherein we

900
00:34:24,239 --> 00:34:25,918
could prevent these issues

901
00:34:25,918 --> 00:34:28,320
and make our uh web views secure and

902
00:34:28,320 --> 00:34:30,560
robust which would which would make our

903
00:34:30,560 --> 00:34:32,480
apps robust and secure

904
00:34:32,480 --> 00:34:34,000
so and that will be taking over from

905
00:34:34,000 --> 00:34:34,800
here

906
00:34:34,800 --> 00:34:36,639
over to vmware

907
00:34:36,639 --> 00:34:38,800
thank you thank you shiv thank you for

908
00:34:38,800 --> 00:34:41,839
the detailed explanation and uh

909
00:34:41,839 --> 00:34:44,000
uh explaining the audience about

910
00:34:44,000 --> 00:34:46,079
different kind of web views and

911
00:34:46,079 --> 00:34:48,639
different kind of common security issues

912
00:34:48,639 --> 00:34:52,960
and how we could exploit them uh so

913
00:34:52,960 --> 00:34:55,040
so so far what we have spoken about is

914
00:34:55,040 --> 00:34:57,119
that our journey from the initial

915
00:34:57,119 --> 00:35:00,640
research and towards the uh you know or

916
00:35:00,640 --> 00:35:03,040
towards getting a cv as well as we spoke

917
00:35:03,040 --> 00:35:06,079
about how uh what are the different sets

918
00:35:06,079 --> 00:35:08,560
of exploit that could actually happen

919
00:35:08,560 --> 00:35:11,040
when you are not performing and uh

920
00:35:11,040 --> 00:35:13,520
secure url validation power and attacker

921
00:35:13,520 --> 00:35:16,240
code exploit and different uh set of

922
00:35:16,240 --> 00:35:18,000
functions so

923
00:35:18,000 --> 00:35:19,440
as as as

924
00:35:19,440 --> 00:35:21,760
you know as it says

925
00:35:21,760 --> 00:35:23,920
of course we know how to exploit it and

926
00:35:23,920 --> 00:35:25,599
we know what are the different ways to

927
00:35:25,599 --> 00:35:28,720
exploit so it's also important how

928
00:35:28,720 --> 00:35:31,359
it's also important to learn how to do

929
00:35:31,359 --> 00:35:34,079
you know a secure validation how to

930
00:35:34,079 --> 00:35:37,680
implement with you securely so uh from

931
00:35:37,680 --> 00:35:39,760
year onwards i've been talking about the

932
00:35:39,760 --> 00:35:42,640
learnings and the recommendations uh the

933
00:35:42,640 --> 00:35:44,480
learnings that we

934
00:35:44,480 --> 00:35:46,800
we learned throughout this entire

935
00:35:46,800 --> 00:35:48,960
research and throughout the entire

936
00:35:48,960 --> 00:35:51,359
project

937
00:35:53,920 --> 00:35:56,480
so the first and foremost thing we like

938
00:35:56,480 --> 00:36:00,000
to talk about a secure url validation as

939
00:36:00,000 --> 00:36:02,240
you have seen in our previous slide when

940
00:36:02,240 --> 00:36:03,760
we are talking about browsable

941
00:36:03,760 --> 00:36:06,240
activities deep links webview it is

942
00:36:06,240 --> 00:36:08,640
always important to have a secure url

943
00:36:08,640 --> 00:36:11,119
validation so whenever we are loading a

944
00:36:11,119 --> 00:36:13,920
url in the webview and the url is coming

945
00:36:13,920 --> 00:36:17,440
from an untrusted resources or the url

946
00:36:17,440 --> 00:36:20,079
is coming from an intent or deeply we

947
00:36:20,079 --> 00:36:23,520
should always have a get authority check

948
00:36:23,520 --> 00:36:26,400
uh on the specific url and match it with

949
00:36:26,400 --> 00:36:29,520
the list of whitelisted domain so

950
00:36:29,520 --> 00:36:31,599
why are we suggesting get authority

951
00:36:31,599 --> 00:36:33,599
check instead of get post we have

952
00:36:33,599 --> 00:36:36,800
already seen in the past how attackers

953
00:36:36,800 --> 00:36:40,320
are able to bypass the kettle's check so

954
00:36:40,320 --> 00:36:42,640
it is always recommended to have a get

955
00:36:42,640 --> 00:36:45,200
authority check we should not directly

956
00:36:45,200 --> 00:36:47,920
load the url we should always have a get

957
00:36:47,920 --> 00:36:49,920
authority check along with that we

958
00:36:49,920 --> 00:36:52,800
should always check the protocol

959
00:36:52,800 --> 00:36:56,480
for example uh the code snippet that uh

960
00:36:56,480 --> 00:36:58,640
we are seeing in this screen is is an

961
00:36:58,640 --> 00:37:01,760
example of securing android so we have

962
00:37:01,760 --> 00:37:04,960
the function validate url over here and

963
00:37:04,960 --> 00:37:08,480
uh we are extracting the authority and

964
00:37:08,480 --> 00:37:11,200
as well as we are extracting the scheme

965
00:37:11,200 --> 00:37:14,160
so if only this both condition matches

966
00:37:14,160 --> 00:37:17,599
then only uh proceeded to load in the

967
00:37:17,599 --> 00:37:21,040
webview so that that is the uh that is

968
00:37:21,040 --> 00:37:23,359
the first set of you know

969
00:37:23,359 --> 00:37:25,280
that that is the first set of principle

970
00:37:25,280 --> 00:37:28,000
that you must follow in android and this

971
00:37:28,000 --> 00:37:30,079
is how you can do it in android so let's

972
00:37:30,079 --> 00:37:32,160
see how it can be done in

973
00:37:32,160 --> 00:37:34,880
ios so this sport snippet is a swift

974
00:37:34,880 --> 00:37:36,720
code where we are

975
00:37:36,720 --> 00:37:38,640
using the component structure the

976
00:37:38,640 --> 00:37:41,119
component structure provides the url

977
00:37:41,119 --> 00:37:43,200
component structure actually

978
00:37:43,200 --> 00:37:44,000
uh

979
00:37:44,000 --> 00:37:46,800
actually provides different properties

980
00:37:46,800 --> 00:37:48,880
with which you can have with which you

981
00:37:48,880 --> 00:37:51,359
can extract the host as well as the

982
00:37:51,359 --> 00:37:54,560
scheme from a specific url if you see at

983
00:37:54,560 --> 00:37:57,280
this port snippet we uh we

984
00:37:57,280 --> 00:38:00,000
we have a check of the url we are

985
00:38:00,000 --> 00:38:03,440
actually extracting the

986
00:38:03,440 --> 00:38:04,400
protocol

987
00:38:04,400 --> 00:38:06,160
with url

988
00:38:06,160 --> 00:38:08,880
components dot scheme as well as the

989
00:38:08,880 --> 00:38:12,480
host using url.url.post

990
00:38:12,480 --> 00:38:16,320
so if both of this condition matches

991
00:38:16,320 --> 00:38:19,200
then only it will do it then only

992
00:38:19,200 --> 00:38:21,520
both of this condition matches and if it

993
00:38:21,520 --> 00:38:23,440
matches with the list of the whitelisted

994
00:38:23,440 --> 00:38:25,839
domain then only the specific url will

995
00:38:25,839 --> 00:38:29,759
be loaded into our webview

996
00:38:31,040 --> 00:38:33,359
so when we talk about uh you know when

997
00:38:33,359 --> 00:38:35,520
we talk about view implementation it

998
00:38:35,520 --> 00:38:36,880
depends upon

999
00:38:36,880 --> 00:38:39,280
the use case or it depends upon the

1000
00:38:39,280 --> 00:38:41,200
functionality that we are trying to

1001
00:38:41,200 --> 00:38:44,240
implement so let's say your web you

1002
00:38:44,240 --> 00:38:46,160
don't have to integrate your webview

1003
00:38:46,160 --> 00:38:48,160
with your native application or you

1004
00:38:48,160 --> 00:38:51,200
don't have to share any information from

1005
00:38:51,200 --> 00:38:53,520
your native application to the webview

1006
00:38:53,520 --> 00:38:56,240
or from the webview to the native

1007
00:38:56,240 --> 00:38:58,400
application let's suppose you you want

1008
00:38:58,400 --> 00:38:59,520
to have

1009
00:38:59,520 --> 00:39:01,920
you want to isolate your webview so in

1010
00:39:01,920 --> 00:39:03,280
that case

1011
00:39:03,280 --> 00:39:05,920
chrome custom tab as well as safari view

1012
00:39:05,920 --> 00:39:08,160
controller comes into picture so

1013
00:39:08,160 --> 00:39:09,920
whenever you are trying to load a

1014
00:39:09,920 --> 00:39:12,800
third-party content we must always use

1015
00:39:12,800 --> 00:39:15,200
these two things this will what this

1016
00:39:15,200 --> 00:39:18,240
will do is it will open the web content

1017
00:39:18,240 --> 00:39:20,240
into the browser and this browser will

1018
00:39:20,240 --> 00:39:22,240
be embedded into our

1019
00:39:22,240 --> 00:39:24,640
application the web content will be

1020
00:39:24,640 --> 00:39:27,359
loaded inside our application but in

1021
00:39:27,359 --> 00:39:29,440
real it is actually the running is a

1022
00:39:29,440 --> 00:39:32,880
part of the chrome and safari process

1023
00:39:32,880 --> 00:39:33,680
so

1024
00:39:33,680 --> 00:39:36,880
what is the advantage of using a custom

1025
00:39:36,880 --> 00:39:39,280
chrome tab as well as for review control

1026
00:39:39,280 --> 00:39:41,680
the advantage is that in case the

1027
00:39:41,680 --> 00:39:44,480
legitimate content of the third party is

1028
00:39:44,480 --> 00:39:47,359
actually replaced by a malicious

1029
00:39:47,359 --> 00:39:50,320
you know content it will not anyway

1030
00:39:50,320 --> 00:39:53,280
affect our application because it is

1031
00:39:53,280 --> 00:39:55,520
running as a part of

1032
00:39:55,520 --> 00:39:58,079
different process also it actually

1033
00:39:58,079 --> 00:40:02,079
provides a a seamless user experience

1034
00:40:02,079 --> 00:40:05,440
when you act switch it from the uh

1035
00:40:05,440 --> 00:40:07,680
when you switch from a custom chrome tag

1036
00:40:07,680 --> 00:40:09,440
safari blue controller

1037
00:40:09,440 --> 00:40:10,480
our

1038
00:40:10,480 --> 00:40:14,000
so this is the reason you should use

1039
00:40:14,000 --> 00:40:16,560
uh custom chrome tab as well as safari

1040
00:40:16,560 --> 00:40:18,960
viewpoint

1041
00:40:21,440 --> 00:40:23,040
[Music]

1042
00:40:23,040 --> 00:40:25,760
so let's try to understand

1043
00:40:25,760 --> 00:40:28,400
and how you can harden your webviews in

1044
00:40:28,400 --> 00:40:32,160
android so if you look at android

1045
00:40:32,160 --> 00:40:34,480
android webviews actually have access to

1046
00:40:34,480 --> 00:40:37,040
the content provider as well as the

1047
00:40:37,040 --> 00:40:39,680
local storage by default so if your

1048
00:40:39,680 --> 00:40:42,800
functionality does not if your if your

1049
00:40:42,800 --> 00:40:44,000
the feature that you are going to

1050
00:40:44,000 --> 00:40:46,400
implement does not require this access

1051
00:40:46,400 --> 00:40:49,119
then you can explicitly set them

1052
00:40:49,119 --> 00:40:52,880
explicitly disable them using set allow

1053
00:40:52,880 --> 00:40:56,319
content access as well as set allow file

1054
00:40:56,319 --> 00:40:57,200
access

1055
00:40:57,200 --> 00:41:00,640
and you must always reduce the sensitive

1056
00:41:00,640 --> 00:41:02,800
data exposure what does this mean is

1057
00:41:02,800 --> 00:41:05,280
that you should uh you know flush the

1058
00:41:05,280 --> 00:41:07,119
cache whenever the component is no

1059
00:41:07,119 --> 00:41:10,240
longer required so in that for that

1060
00:41:10,240 --> 00:41:12,640
purpose clear cache comes into

1061
00:41:12,640 --> 00:41:13,680
picture

1062
00:41:13,680 --> 00:41:15,920
and and the last important part is

1063
00:41:15,920 --> 00:41:17,040
whenever

1064
00:41:17,040 --> 00:41:20,880
the javascript is not required it's not

1065
00:41:20,880 --> 00:41:23,680
used in in your webview then you can

1066
00:41:23,680 --> 00:41:26,400
explicitly disable that function using

1067
00:41:26,400 --> 00:41:28,400
said javascript enable

1068
00:41:28,400 --> 00:41:31,119
so now that we have seen uh how how can

1069
00:41:31,119 --> 00:41:33,520
you hardly review let's have a look how

1070
00:41:33,520 --> 00:41:36,240
this can be achieved in ios

1071
00:41:36,240 --> 00:41:38,400
so in ios there was a

1072
00:41:38,400 --> 00:41:41,359
there is a class ui webview which is

1073
00:41:41,359 --> 00:41:44,400
actually depreciated starting from ios

1074
00:41:44,400 --> 00:41:46,960
12 so that if you if your if your

1075
00:41:46,960 --> 00:41:49,680
application is having ui webview then

1076
00:41:49,680 --> 00:41:52,319
the app store will basically not accept

1077
00:41:52,319 --> 00:41:54,800
your application and it will not allow

1078
00:41:54,800 --> 00:41:57,280
to update your application

1079
00:41:57,280 --> 00:41:59,599
if you are introducing ui web

1080
00:41:59,599 --> 00:42:02,480
why because it comes with with a lot of

1081
00:42:02,480 --> 00:42:03,920
security

1082
00:42:03,920 --> 00:42:06,720
setting that is enabled by default so

1083
00:42:06,720 --> 00:42:09,280
and apart from that it also comes with

1084
00:42:09,280 --> 00:42:12,079
javascript as enabled and even you

1085
00:42:12,079 --> 00:42:14,960
cannot programmatically disable it so

1086
00:42:14,960 --> 00:42:17,599
that is the reason we should avoid using

1087
00:42:17,599 --> 00:42:19,839
ui value

1088
00:42:19,839 --> 00:42:21,839
so

1089
00:42:21,839 --> 00:42:23,839
let's so uh so

1090
00:42:23,839 --> 00:42:24,880
uh

1091
00:42:24,880 --> 00:42:28,720
the successor of ui webview is a wpa in

1092
00:42:28,720 --> 00:42:32,560
ios so wk webview comes with a lot of

1093
00:42:32,560 --> 00:42:35,680
you know security improvements and with

1094
00:42:35,680 --> 00:42:38,560
a lot of settings that are actually by

1095
00:42:38,560 --> 00:42:40,720
default disabled so

1096
00:42:40,720 --> 00:42:41,680
uh

1097
00:42:41,680 --> 00:42:44,560
so the first one is that the javascript

1098
00:42:44,560 --> 00:42:47,520
is enabled by default but you there is a

1099
00:42:47,520 --> 00:42:50,640
property javascript enabled

1100
00:42:50,640 --> 00:42:52,560
with which you can actually disable

1101
00:42:52,560 --> 00:42:55,040
javascript if you if your functionality

1102
00:42:55,040 --> 00:42:57,520
doesn't demand it the second one is that

1103
00:42:57,520 --> 00:42:59,920
hash only secure content

1104
00:42:59,920 --> 00:43:00,720
the

1105
00:43:00,720 --> 00:43:02,880
hash only secure content property will

1106
00:43:02,880 --> 00:43:05,760
make sure that the content loaded inside

1107
00:43:05,760 --> 00:43:08,079
a webview is retrieved through an

1108
00:43:08,079 --> 00:43:12,000
encrypted connection and the third

1109
00:43:12,000 --> 00:43:15,760
property is allow read access to url so

1110
00:43:15,760 --> 00:43:18,880
this property is often used to load a

1111
00:43:18,880 --> 00:43:22,160
static content from your local storage

1112
00:43:22,160 --> 00:43:24,560
so when you are trying to use the

1113
00:43:24,560 --> 00:43:27,040
specific function uh

1114
00:43:27,040 --> 00:43:30,160
inside inside your app sandbox do not

1115
00:43:30,160 --> 00:43:32,160
give access to the local storage

1116
00:43:32,160 --> 00:43:35,200
directory rather specify that specific

1117
00:43:35,200 --> 00:43:36,960
file

1118
00:43:36,960 --> 00:43:39,440
and last but not the least the security

1119
00:43:39,440 --> 00:43:42,000
sensitive settings which actually gives

1120
00:43:42,000 --> 00:43:44,480
access to the apps and box and the local

1121
00:43:44,480 --> 00:43:47,200
directories and storage are disabled by

1122
00:43:47,200 --> 00:43:51,359
default in wk webpage

1123
00:43:53,200 --> 00:43:56,400
so i i i think we are move as we are

1124
00:43:56,400 --> 00:43:58,880
moving ahead you know towards the end of

1125
00:43:58,880 --> 00:44:01,599
this presentation let's

1126
00:44:01,599 --> 00:44:04,000
let's uh let's look back and see what

1127
00:44:04,000 --> 00:44:05,920
are the learnings and what are the

1128
00:44:05,920 --> 00:44:09,680
actual key out the key takeaways from

1129
00:44:09,680 --> 00:44:12,160
the entire research and from this entire

1130
00:44:12,160 --> 00:44:14,800
journey the first and foremost point is

1131
00:44:14,800 --> 00:44:16,480
follow the principle of fleece

1132
00:44:16,480 --> 00:44:19,359
privileges while configuring the webview

1133
00:44:19,359 --> 00:44:22,560
what does this mean is that you must you

1134
00:44:22,560 --> 00:44:25,680
you should not leave your webview overly

1135
00:44:25,680 --> 00:44:26,880
permissive

1136
00:44:26,880 --> 00:44:29,280
if your functionality doesn't doesn't

1137
00:44:29,280 --> 00:44:31,760
require that specific property or that

1138
00:44:31,760 --> 00:44:34,880
specific function for example disable

1139
00:44:34,880 --> 00:44:36,800
javascript if you don't require it

1140
00:44:36,800 --> 00:44:39,119
disable the property that we

1141
00:44:39,119 --> 00:44:41,839
spoke about if your function if your you

1142
00:44:41,839 --> 00:44:44,480
know feature does not consume it

1143
00:44:44,480 --> 00:44:47,280
secondly use custom

1144
00:44:47,280 --> 00:44:50,319
chrome tab and safari view controller if

1145
00:44:50,319 --> 00:44:53,440
you are loading in untrusted content or

1146
00:44:53,440 --> 00:44:55,520
if you are trying to load a third-party

1147
00:44:55,520 --> 00:44:57,359
contact

1148
00:44:57,359 --> 00:44:59,200
thirdly if

1149
00:44:59,200 --> 00:45:02,240
if a webview is programmed to receive a

1150
00:45:02,240 --> 00:45:05,839
url from a specific deeply make sure you

1151
00:45:05,839 --> 00:45:09,440
have a strong url validation as we as as

1152
00:45:09,440 --> 00:45:11,359
we have seen in the previous slide we

1153
00:45:11,359 --> 00:45:14,319
gave two examples explaining how you can

1154
00:45:14,319 --> 00:45:15,359
retrieve

1155
00:45:15,359 --> 00:45:18,640
the protocol as well as the authority or

1156
00:45:18,640 --> 00:45:20,720
the host from a specific url have a

1157
00:45:20,720 --> 00:45:23,599
strong url validation against a set of

1158
00:45:23,599 --> 00:45:26,000
whitelisted domains

1159
00:45:26,000 --> 00:45:28,319
fourthly when you are trying to validate

1160
00:45:28,319 --> 00:45:29,520
the url

1161
00:45:29,520 --> 00:45:32,079
you must always make sure that you don't

1162
00:45:32,079 --> 00:45:36,319
use get host in android as we have seen

1163
00:45:36,319 --> 00:45:39,280
what is how insecure it is and how

1164
00:45:39,280 --> 00:45:42,000
attacker can actually bypass it so

1165
00:45:42,000 --> 00:45:44,720
always use get authority in

1166
00:45:44,720 --> 00:45:48,400
android and get host in ios and always

1167
00:45:48,400 --> 00:45:50,319
make sure that you also

1168
00:45:50,319 --> 00:45:52,560
you know check the scheme which is the

1169
00:45:52,560 --> 00:45:55,440
protocol last but

1170
00:45:55,440 --> 00:45:57,440
last but not the least this is somewhat

1171
00:45:57,440 --> 00:46:00,079
related to the cv that they actually

1172
00:46:00,079 --> 00:46:02,560
reported while while you're doing a

1173
00:46:02,560 --> 00:46:05,280
third party integration make sure that

1174
00:46:05,280 --> 00:46:07,520
no sensitive information is actually

1175
00:46:07,520 --> 00:46:09,599
shared unintentionally this is very

1176
00:46:09,599 --> 00:46:11,839
important you know while you're actually

1177
00:46:11,839 --> 00:46:12,720
very

1178
00:46:12,720 --> 00:46:14,560
let's suppose you have an application

1179
00:46:14,560 --> 00:46:16,560
with webviews and you're integrating a

1180
00:46:16,560 --> 00:46:18,640
lot of third parties so how would you

1181
00:46:18,640 --> 00:46:19,760
know that

1182
00:46:19,760 --> 00:46:21,760
what sensitive information you are

1183
00:46:21,760 --> 00:46:24,160
sharing like example the first approach

1184
00:46:24,160 --> 00:46:26,319
you can take is what google did like

1185
00:46:26,319 --> 00:46:28,800
they had a test case before releasing

1186
00:46:28,800 --> 00:46:30,880
that fix so you should you you might

1187
00:46:30,880 --> 00:46:32,800
want to have a test case which is

1188
00:46:32,800 --> 00:46:34,319
actually checking whether you're

1189
00:46:34,319 --> 00:46:36,800
forwarding any sensitive content or

1190
00:46:36,800 --> 00:46:39,680
sensitive headers to the third party

1191
00:46:39,680 --> 00:46:41,440
second thing is that you can have a

1192
00:46:41,440 --> 00:46:43,920
check on your network blog so you can

1193
00:46:43,920 --> 00:46:47,119
have your law passer uh which could

1194
00:46:47,119 --> 00:46:49,760
actually check for a sensitive content

1195
00:46:49,760 --> 00:46:53,040
based on the patent and if if it if it

1196
00:46:53,040 --> 00:46:54,720
if it looks like that you are

1197
00:46:54,720 --> 00:46:56,720
unintendedly sharing the data it will

1198
00:46:56,720 --> 00:47:01,919
raise an alarm on that specific instance

1199
00:47:04,240 --> 00:47:06,160
so we would like to thank couple of

1200
00:47:06,160 --> 00:47:08,319
people like uh

1201
00:47:08,319 --> 00:47:11,040
so we would like to thank mona vinotin

1202
00:47:11,040 --> 00:47:13,680
and changmuklin for helping us through

1203
00:47:13,680 --> 00:47:16,240
the entire analysis

1204
00:47:16,240 --> 00:47:17,280
uh

1205
00:47:17,280 --> 00:47:20,319
was involved in the complete end-to-end

1206
00:47:20,319 --> 00:47:22,960
analysis uh from start till the

1207
00:47:22,960 --> 00:47:25,280
beginning and he was he was a big

1208
00:47:25,280 --> 00:47:28,319
motivator for us

1209
00:47:30,240 --> 00:47:32,319
and these are the references that we

1210
00:47:32,319 --> 00:47:34,960
have used in our research as well as in

1211
00:47:34,960 --> 00:47:36,880
preparing the

1212
00:47:36,880 --> 00:47:39,119
presentation we we have taken a lot of

1213
00:47:39,119 --> 00:47:42,800
references from uh oops mstg we have

1214
00:47:42,800 --> 00:47:45,119
taken a lot of we have taken few of the

1215
00:47:45,119 --> 00:47:46,960
references where we are talking about

1216
00:47:46,960 --> 00:47:49,680
sensitive uh you know securing url from

1217
00:47:49,680 --> 00:47:51,359
this link and

1218
00:47:51,359 --> 00:47:54,400
this this specific link is is the is the

1219
00:47:54,400 --> 00:47:56,319
disclosure where you can go and check

1220
00:47:56,319 --> 00:47:57,040
like

1221
00:47:57,040 --> 00:47:58,880
what have we submitted and how was the

1222
00:47:58,880 --> 00:48:01,359
conversation with google and the more

1223
00:48:01,359 --> 00:48:04,240
detail about the pub

1224
00:48:04,240 --> 00:48:07,599
so finally uh this is the live slide so

1225
00:48:07,599 --> 00:48:11,119
uh thank you for joining us uh and uh if

1226
00:48:11,119 --> 00:48:13,359
you have any questions in related to

1227
00:48:13,359 --> 00:48:15,599
this specific topic in related to this

1228
00:48:15,599 --> 00:48:18,319
context you can go and ask in the

1229
00:48:18,319 --> 00:48:20,640
discord channel and we will be available

1230
00:48:20,640 --> 00:48:22,000
in the

1231
00:48:22,000 --> 00:48:23,920
we will be available to answer all your

1232
00:48:23,920 --> 00:48:25,359
questions

1233
00:48:25,359 --> 00:48:29,160
thank you thank you everyone

