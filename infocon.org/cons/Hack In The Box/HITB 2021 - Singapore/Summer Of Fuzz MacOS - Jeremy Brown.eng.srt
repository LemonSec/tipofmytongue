1
00:00:09,440 --> 00:00:11,519
hello everyone my name is jeremy brown

2
00:00:11,519 --> 00:00:14,559
and this is my presentation summer fuzz

3
00:00:14,559 --> 00:00:17,919
fuzzing mac os

4
00:00:18,000 --> 00:00:20,800
quick run through the agenda um

5
00:00:20,800 --> 00:00:22,400
do a quick intro

6
00:00:22,400 --> 00:00:23,840
uh walk through some of the different

7
00:00:23,840 --> 00:00:25,359
debugging tools

8
00:00:25,359 --> 00:00:27,519
talk about sip and app sandbox how that

9
00:00:27,519 --> 00:00:29,279
affects fuzzing

10
00:00:29,279 --> 00:00:31,599
talk about crash reporting

11
00:00:31,599 --> 00:00:33,520
what to do

12
00:00:33,520 --> 00:00:38,000
for machine sleeps and ssh types issues

13
00:00:38,000 --> 00:00:42,160
how to monitor process process execution

14
00:00:42,160 --> 00:00:43,840
enumerate handlers different file

15
00:00:43,840 --> 00:00:45,920
handlers and things like that on the

16
00:00:45,920 --> 00:00:47,840
system for attack surface

17
00:00:47,840 --> 00:00:50,399
and look at uh some of the clients and

18
00:00:50,399 --> 00:00:52,960
network services enumeration as well

19
00:00:52,960 --> 00:00:54,800
and then we'll get into the fuzzing so

20
00:00:54,800 --> 00:00:56,480
fuzzing

21
00:00:56,480 --> 00:00:59,039
command line apps fuzzing gui apps

22
00:00:59,039 --> 00:01:01,760
uh fuzzing network clients the servers

23
00:01:01,760 --> 00:01:03,680
and some of the bugs from that and then

24
00:01:03,680 --> 00:01:06,879
wrap up with a conclusion

25
00:01:07,040 --> 00:01:08,479
so who am i

26
00:01:08,479 --> 00:01:10,880
mostly interested in bug hunting fuzzing

27
00:01:10,880 --> 00:01:12,799
offensive security stuff

28
00:01:12,799 --> 00:01:14,000
you know worked at a few different

29
00:01:14,000 --> 00:01:16,479
companies before doing that

30
00:01:16,479 --> 00:01:18,640
really like breaking stuff these days

31
00:01:18,640 --> 00:01:20,880
different native code web services cloud

32
00:01:20,880 --> 00:01:22,640
containers type

33
00:01:22,640 --> 00:01:24,960
attacks

34
00:01:24,960 --> 00:01:26,799
and yeah getting in good shape before

35
00:01:26,799 --> 00:01:28,400
release has been a lot of what i've been

36
00:01:28,400 --> 00:01:30,640
doing

37
00:01:31,360 --> 00:01:33,840
so before uh getting into mac fuzzing i

38
00:01:33,840 --> 00:01:36,640
didn't know much about mac security um

39
00:01:36,640 --> 00:01:37,759
max for

40
00:01:37,759 --> 00:01:40,320
you know i didn't use one on a

41
00:01:40,320 --> 00:01:43,200
day-to-day basis for a long time until

42
00:01:43,200 --> 00:01:45,439
recently maybe the last year or so and i

43
00:01:45,439 --> 00:01:46,880
didn't know much about how to do

44
00:01:46,880 --> 00:01:48,479
debugging and things like that so a lot

45
00:01:48,479 --> 00:01:50,479
of this stuff was new to me so i was

46
00:01:50,479 --> 00:01:52,320
sort of learning as i was uh you know

47
00:01:52,320 --> 00:01:55,840
getting more information about it

48
00:01:55,840 --> 00:01:57,600
uh but i've been fuzzing for a while now

49
00:01:57,600 --> 00:01:58,719
um

50
00:01:58,719 --> 00:02:00,240
and there's a lot of events these days

51
00:02:00,240 --> 00:02:02,479
with afl plus plus and you know really

52
00:02:02,479 --> 00:02:03,920
doing state-of-the-art fuzzing build up

53
00:02:03,920 --> 00:02:05,439
on afl

54
00:02:05,439 --> 00:02:06,880
but i want to look at it at a different

55
00:02:06,880 --> 00:02:08,399
angle

56
00:02:08,399 --> 00:02:10,479
honestly i just forgot a lot of what i

57
00:02:10,479 --> 00:02:12,800
knew and what was conventional wisdom

58
00:02:12,800 --> 00:02:14,000
and things like that and i wanted to

59
00:02:14,000 --> 00:02:15,440
build something

60
00:02:15,440 --> 00:02:16,959
from scratch that really served a

61
00:02:16,959 --> 00:02:19,599
purpose for what i was looking for

62
00:02:19,599 --> 00:02:20,720
so that's what i'll be talking about

63
00:02:20,720 --> 00:02:23,200
today just the various tricks and and uh

64
00:02:23,200 --> 00:02:24,480
going over some of the tooling for

65
00:02:24,480 --> 00:02:28,959
fuzzing uh userland specifically on mac

66
00:02:29,520 --> 00:02:30,959
so um

67
00:02:30,959 --> 00:02:32,480
mostly looking at the core like the

68
00:02:32,480 --> 00:02:33,519
default

69
00:02:33,519 --> 00:02:36,400
applications on os x and os x 11 which

70
00:02:36,400 --> 00:02:38,480
are pretty similar

71
00:02:38,480 --> 00:02:41,200
you can look at the client and gui apps

72
00:02:41,200 --> 00:02:44,640
uh network apps things like that

73
00:02:44,640 --> 00:02:46,800
essentially what once you take away from

74
00:02:46,800 --> 00:02:48,239
this presentation is how to set up

75
00:02:48,239 --> 00:02:50,160
debugging how to numerate targets how to

76
00:02:50,160 --> 00:02:51,440
make

77
00:02:51,440 --> 00:02:53,920
volume research easier

78
00:02:53,920 --> 00:02:55,840
this is not about you know scaling

79
00:02:55,840 --> 00:02:58,159
fuzzing for a huge fuzzing farm

80
00:02:58,159 --> 00:03:00,239
and a lot of stuff you can do with just

81
00:03:00,239 --> 00:03:02,959
a mac at home

82
00:03:03,280 --> 00:03:05,440
a lot of the prior work uh that is is

83
00:03:05,440 --> 00:03:07,360
related or relevant is some of ben nagy

84
00:03:07,360 --> 00:03:09,200
stuff it's pretty great

85
00:03:09,200 --> 00:03:12,239
uh crash wrangler um

86
00:03:12,239 --> 00:03:15,920
and then uh the temp tempo sh uh

87
00:03:15,920 --> 00:03:17,680
zine which was a little bit of

88
00:03:17,680 --> 00:03:21,120
inspiration to get back and fuzzing

89
00:03:21,680 --> 00:03:23,599
so for debugging

90
00:03:23,599 --> 00:03:26,400
xcode and xcode tools

91
00:03:26,400 --> 00:03:28,400
you can there's a head script that i've

92
00:03:28,400 --> 00:03:32,000
referenced down there to install that um

93
00:03:32,000 --> 00:03:35,760
and you can enable developer mode

94
00:03:35,760 --> 00:03:37,760
as well to make sure that you can

95
00:03:37,760 --> 00:03:42,159
perform various uh debugging operations

96
00:03:42,560 --> 00:03:44,239
as far as debugging goes guard malloc is

97
00:03:44,239 --> 00:03:45,760
something good to turn on when you're

98
00:03:45,760 --> 00:03:47,360
fuzzing essentially you can get free

99
00:03:47,360 --> 00:03:48,319
bugs

100
00:03:48,319 --> 00:03:51,920
from um you know inserting this uh malik

101
00:03:51,920 --> 00:03:53,920
helper library that

102
00:03:53,920 --> 00:03:55,920
can can help

103
00:03:55,920 --> 00:03:57,760
find more of this subtle bugs when

104
00:03:57,760 --> 00:03:59,760
fuzzing they maybe you wouldn't find

105
00:03:59,760 --> 00:04:01,439
without the extra helper

106
00:04:01,439 --> 00:04:03,599
uh stuff in it so you can read more

107
00:04:03,599 --> 00:04:06,239
about how it works um but it's

108
00:04:06,239 --> 00:04:07,920
i mean there's different uh things in

109
00:04:07,920 --> 00:04:11,120
different platforms um as far as

110
00:04:11,120 --> 00:04:14,080
uh malik helpers go and heap debugging

111
00:04:14,080 --> 00:04:16,238
goes but garden malloc is something good

112
00:04:16,238 --> 00:04:17,358
to turn on when you're when you're

113
00:04:17,358 --> 00:04:19,440
fuzzing and this this is uh you can do

114
00:04:19,440 --> 00:04:22,079
with dyld interlibraries

115
00:04:22,079 --> 00:04:24,479
variable

116
00:04:24,960 --> 00:04:26,320
for lldb

117
00:04:26,320 --> 00:04:27,520
you can automate a lot of the crash

118
00:04:27,520 --> 00:04:30,240
triage and bucketing stuff um just by

119
00:04:30,240 --> 00:04:32,400
passing command line args

120
00:04:32,400 --> 00:04:33,840
it's really flexible for a lot of

121
00:04:33,840 --> 00:04:35,680
different things

122
00:04:35,680 --> 00:04:36,720
um

123
00:04:36,720 --> 00:04:39,199
and yeah this is how you can get

124
00:04:39,199 --> 00:04:40,160
when you're

125
00:04:40,160 --> 00:04:41,680
fuzzing and you want to get

126
00:04:41,680 --> 00:04:44,160
automatic you want to produce logs of

127
00:04:44,160 --> 00:04:45,680
you know doing triage and things like

128
00:04:45,680 --> 00:04:50,000
that you can easily do that with lodb

129
00:04:50,960 --> 00:04:53,840
sip is a very important one to

130
00:04:53,840 --> 00:04:57,280
to know about when doing research

131
00:04:57,280 --> 00:04:58,880
for you know fuzzing and debugging and

132
00:04:58,880 --> 00:05:00,720
stuff like that a lot of times you

133
00:05:00,720 --> 00:05:02,639
either want to turn it off completely or

134
00:05:02,639 --> 00:05:04,639
disable it

135
00:05:04,639 --> 00:05:05,680
disable

136
00:05:05,680 --> 00:05:07,440
certain parts of it

137
00:05:07,440 --> 00:05:09,120
because otherwise

138
00:05:09,120 --> 00:05:10,880
you're not going to get too far

139
00:05:10,880 --> 00:05:12,240
running the debugger headless for

140
00:05:12,240 --> 00:05:14,639
example

141
00:05:15,840 --> 00:05:17,360
on a physical machine

142
00:05:17,360 --> 00:05:20,320
you can just reboot into a recovery mode

143
00:05:20,320 --> 00:05:23,199
use csr util

144
00:05:23,199 --> 00:05:26,160
to to disable it completely or just turn

145
00:05:26,160 --> 00:05:28,320
on debug stuff

146
00:05:28,320 --> 00:05:30,240
if you're using vmware fusion which i

147
00:05:30,240 --> 00:05:31,919
recommend for a lot of research because

148
00:05:31,919 --> 00:05:33,360
of course you know

149
00:05:33,360 --> 00:05:35,840
vms are great for snapshotting and uh

150
00:05:35,840 --> 00:05:36,720
you know

151
00:05:36,720 --> 00:05:38,800
taking snapshots of different states and

152
00:05:38,800 --> 00:05:40,240
replaying things

153
00:05:40,240 --> 00:05:41,919
um you can do that it's a little

154
00:05:41,919 --> 00:05:45,280
different between os x and os 10.

155
00:05:45,280 --> 00:05:49,440
sorry os 11. so this is os x 10 and then

156
00:05:49,440 --> 00:05:51,280
os x 11 there's a little more trickery

157
00:05:51,280 --> 00:05:52,400
involved

158
00:05:52,400 --> 00:05:55,440
but you can still get it done

159
00:05:56,720 --> 00:05:58,080
that sandbox is another thing to

160
00:05:58,080 --> 00:06:00,960
consider when fuzzing

161
00:06:00,960 --> 00:06:02,479
again you can read more about it it's

162
00:06:02,479 --> 00:06:04,639
not talk about the sandbox itself

163
00:06:04,639 --> 00:06:07,280
but it does get in the way sometimes and

164
00:06:07,280 --> 00:06:08,319
um

165
00:06:08,319 --> 00:06:10,080
you need to

166
00:06:10,080 --> 00:06:12,400
be aware of certain things uh to you

167
00:06:12,400 --> 00:06:13,919
know where to put files and things like

168
00:06:13,919 --> 00:06:16,720
that to to make sure the sandbox doesn't

169
00:06:16,720 --> 00:06:18,080
prevent you from you know getting

170
00:06:18,080 --> 00:06:21,039
coverage on targets

171
00:06:21,039 --> 00:06:23,520
for example say mutated files and put

172
00:06:23,520 --> 00:06:25,759
them in temp and then you you know your

173
00:06:25,759 --> 00:06:28,479
target takes files as a command line to

174
00:06:28,479 --> 00:06:30,960
to open you know whatever it is pdfs or

175
00:06:30,960 --> 00:06:33,199
or or things like that

176
00:06:33,199 --> 00:06:34,479
so if you try to do that with certain

177
00:06:34,479 --> 00:06:36,160
targets um

178
00:06:36,160 --> 00:06:37,840
you it you know it just it won't work

179
00:06:37,840 --> 00:06:39,280
it'll say oh you know you're not allowed

180
00:06:39,280 --> 00:06:41,120
to open it or don't have permission or

181
00:06:41,120 --> 00:06:43,039
things like that if you check the logs

182
00:06:43,039 --> 00:06:46,319
you can see the sandbox is kicking in

183
00:06:46,319 --> 00:06:48,400
and it doesn't like uh where the file's

184
00:06:48,400 --> 00:06:50,880
coming from

185
00:06:50,880 --> 00:06:52,800
so uh you need to find another place to

186
00:06:52,800 --> 00:06:55,440
put test cases uh for if you have some

187
00:06:55,440 --> 00:06:56,319
if you run into some of those

188
00:06:56,319 --> 00:06:57,680
restrictions

189
00:06:57,680 --> 00:06:59,840
there's different container app bundle

190
00:06:59,840 --> 00:07:02,080
uh directories for a lot of different

191
00:07:02,080 --> 00:07:04,000
apps on mac and you can browse that

192
00:07:04,000 --> 00:07:05,840
directory and see the different ones for

193
00:07:05,840 --> 00:07:07,840
example for the books app

194
00:07:07,840 --> 00:07:10,800
you have a com.apple.ibooks x and the

195
00:07:10,800 --> 00:07:12,479
data directory which also has a temp

196
00:07:12,479 --> 00:07:14,400
directory inside of that

197
00:07:14,400 --> 00:07:15,840
of course you can still double click in

198
00:07:15,840 --> 00:07:17,840
an epub from from wherever and open it

199
00:07:17,840 --> 00:07:19,520
in ibooks um but if you're gonna be

200
00:07:19,520 --> 00:07:21,680
fuzzing from command line uh you just

201
00:07:21,680 --> 00:07:23,759
need to be aware of where to put it uh

202
00:07:23,759 --> 00:07:27,280
so the sandbox doesn't block it

203
00:07:27,680 --> 00:07:30,800
for crash reporting um most of the time

204
00:07:30,800 --> 00:07:32,880
i would say it's okay to disable report

205
00:07:32,880 --> 00:07:33,840
crash

206
00:07:33,840 --> 00:07:36,960
um just because it's it's um may get in

207
00:07:36,960 --> 00:07:40,080
the way of your triage program and uh i

208
00:07:40,080 --> 00:07:42,560
mean what it does every it

209
00:07:42,560 --> 00:07:43,919
when whenever there's a crash that

210
00:07:43,919 --> 00:07:46,080
happens it creates a crash log and

211
00:07:46,080 --> 00:07:49,840
triggers a bunch of other stuff um

212
00:07:49,840 --> 00:07:51,919
but uh there's actually some ways to use

213
00:07:51,919 --> 00:07:54,080
it to your advantage because for certain

214
00:07:54,080 --> 00:07:55,120
targets

215
00:07:55,120 --> 00:07:56,639
uh maybe you're fusing something

216
00:07:56,639 --> 00:07:58,639
remotely and you don't have a good way

217
00:07:58,639 --> 00:08:00,319
to check for crashes

218
00:08:00,319 --> 00:08:02,080
and you're not running in a debugger or

219
00:08:02,080 --> 00:08:03,039
something

220
00:08:03,039 --> 00:08:04,479
if you can run it in a debugger and

221
00:08:04,479 --> 00:08:06,000
attach to it of course

222
00:08:06,000 --> 00:08:08,479
you can create your own crash reports

223
00:08:08,479 --> 00:08:09,840
but if you can't

224
00:08:09,840 --> 00:08:12,240
you can actually leave uh crap report

225
00:08:12,240 --> 00:08:14,400
crash on and then you can just monitor

226
00:08:14,400 --> 00:08:17,599
the diagnostic diagnostic logs directory

227
00:08:17,599 --> 00:08:19,919
uh and just you know parse those for

228
00:08:19,919 --> 00:08:21,919
crashes and stuff like that so comes in

229
00:08:21,919 --> 00:08:26,198
pretty handy either way

230
00:08:27,199 --> 00:08:29,280
sleep uh that's another problem i ran

231
00:08:29,280 --> 00:08:31,520
into especially you know fuzzing on

232
00:08:31,520 --> 00:08:33,360
commodity hardware

233
00:08:33,360 --> 00:08:35,039
if you're fuzzing on a macbook macbook

234
00:08:35,039 --> 00:08:37,440
air and stuff like that um

235
00:08:37,440 --> 00:08:40,159
they are set up to be super eco-friendly

236
00:08:40,159 --> 00:08:43,039
so that becomes a problem when

237
00:08:43,039 --> 00:08:44,320
you got remote

238
00:08:44,320 --> 00:08:46,000
fusing sessions running but they're like

239
00:08:46,000 --> 00:08:48,399
hey let's go to sleep because

240
00:08:48,399 --> 00:08:50,399
that's going to save you know energy and

241
00:08:50,399 --> 00:08:52,839
hardware cycles and things like that

242
00:08:52,839 --> 00:08:55,680
so you need to disable a lot of

243
00:08:55,680 --> 00:08:57,440
different sleep modes

244
00:08:57,440 --> 00:08:59,760
to make sure they don't get interrupted

245
00:08:59,760 --> 00:09:01,040
there's different programs that can help

246
00:09:01,040 --> 00:09:02,240
you with that

247
00:09:02,240 --> 00:09:04,160
i learned a lot about system

248
00:09:04,160 --> 00:09:06,080
administration with max just trying to

249
00:09:06,080 --> 00:09:08,480
figure out is there a way to make sure

250
00:09:08,480 --> 00:09:10,880
this thing never goes to sleep and

251
00:09:10,880 --> 00:09:12,560
different systems are

252
00:09:12,560 --> 00:09:15,200
easier to work with than others

253
00:09:15,200 --> 00:09:17,040
but especially if you're using ssh and

254
00:09:17,040 --> 00:09:18,800
you're doing remote sessions

255
00:09:18,800 --> 00:09:20,480
which you know makes a lot of sense in a

256
00:09:20,480 --> 00:09:22,160
lot of ways you can you know those guise

257
00:09:22,160 --> 00:09:23,760
over ssh because they just pop up on the

258
00:09:23,760 --> 00:09:26,320
desktop and uh things like that the way

259
00:09:26,320 --> 00:09:28,320
mac is uh designed

260
00:09:28,320 --> 00:09:31,279
um you can also try uh

261
00:09:31,279 --> 00:09:33,200
uh sending you know some of the things

262
00:09:33,200 --> 00:09:35,200
built into fuzzers uh you could do is

263
00:09:35,200 --> 00:09:37,760
like you know just basically

264
00:09:37,760 --> 00:09:40,560
send control sequences to make sure that

265
00:09:40,560 --> 00:09:43,519
the session always thinks you're alive

266
00:09:43,519 --> 00:09:44,640
and

267
00:09:44,640 --> 00:09:46,959
it doesn't have any reason to want to go

268
00:09:46,959 --> 00:09:48,640
to sleep

269
00:09:48,640 --> 00:09:50,720
this is a battle i'm i'm pretty tired of

270
00:09:50,720 --> 00:09:51,839
fighting

271
00:09:51,839 --> 00:09:52,640
um

272
00:09:52,640 --> 00:09:55,200
and uh but you can do that and you can

273
00:09:55,200 --> 00:09:59,200
also uh mess with the ssh deconfig

274
00:09:59,200 --> 00:10:00,720
i tried a whole bunch of different uh

275
00:10:00,720 --> 00:10:03,200
configs just to try to figure this out

276
00:10:03,200 --> 00:10:04,640
and this is the one i came across that

277
00:10:04,640 --> 00:10:07,279
was been fairly successful so far so you

278
00:10:07,279 --> 00:10:11,120
can use that tcp keep live

279
00:10:11,680 --> 00:10:14,399
for monitoring process execution

280
00:10:14,399 --> 00:10:16,240
if you you know once you disable sip and

281
00:10:16,240 --> 00:10:17,680
you have debug

282
00:10:17,680 --> 00:10:19,920
capabilities and privileges

283
00:10:19,920 --> 00:10:23,680
you can use a handy dtrace

284
00:10:23,680 --> 00:10:25,519
script that's included on mac called

285
00:10:25,519 --> 00:10:27,200
newproc.d

286
00:10:27,200 --> 00:10:29,519
uh if you run that it seems to be like

287
00:10:29,519 --> 00:10:30,320
this

288
00:10:30,320 --> 00:10:32,800
this secret or something that this this

289
00:10:32,800 --> 00:10:35,120
exists um it's really great for looking

290
00:10:35,120 --> 00:10:37,839
at what commands are being executed on

291
00:10:37,839 --> 00:10:40,000
the system um you know it's especially

292
00:10:40,000 --> 00:10:42,399
useful if you're if you're

293
00:10:42,399 --> 00:10:44,240
looking at a back-end system like a web

294
00:10:44,240 --> 00:10:46,079
app that has a front end and it's doing

295
00:10:46,079 --> 00:10:48,079
admin tasks you know there's

296
00:10:48,079 --> 00:10:50,079
ways to find command execution

297
00:10:50,079 --> 00:10:51,440
to get visibility to find command

298
00:10:51,440 --> 00:10:53,200
execution bugs like that

299
00:10:53,200 --> 00:10:55,360
but uh for us it's just interesting to

300
00:10:55,360 --> 00:10:56,880
see how things are being launched and

301
00:10:56,880 --> 00:10:59,200
what commands are being executed when we

302
00:10:59,200 --> 00:11:01,279
maybe flip on certain stuff

303
00:11:01,279 --> 00:11:03,040
we're running different apps on the

304
00:11:03,040 --> 00:11:04,000
system

305
00:11:04,000 --> 00:11:06,079
so if you run a command and you grep

306
00:11:06,079 --> 00:11:07,360
stuff you care about or stuff you don't

307
00:11:07,360 --> 00:11:11,200
care about you can see what's going on

308
00:11:11,200 --> 00:11:12,720
as far as command execution goes on the

309
00:11:12,720 --> 00:11:15,360
system

310
00:11:15,360 --> 00:11:17,360
looking at the different handlers on the

311
00:11:17,360 --> 00:11:20,800
system there's a pretty cool

312
00:11:20,800 --> 00:11:22,399
app called

313
00:11:22,399 --> 00:11:24,480
swift default apps

314
00:11:24,480 --> 00:11:26,959
there's a script swda that you can run

315
00:11:26,959 --> 00:11:28,399
to get the schemes and that will give

316
00:11:28,399 --> 00:11:29,120
you

317
00:11:29,120 --> 00:11:31,680
the different uri handlers

318
00:11:31,680 --> 00:11:34,079
on the system

319
00:11:34,079 --> 00:11:36,800
so you can see there's quite a bit

320
00:11:36,800 --> 00:11:38,240
101

321
00:11:38,240 --> 00:11:39,600
when i ran this

322
00:11:39,600 --> 00:11:41,279
on a test box

323
00:11:41,279 --> 00:11:43,360
and it maps you know each one you can

324
00:11:43,360 --> 00:11:44,880
sort of get an idea of the tack surface

325
00:11:44,880 --> 00:11:47,120
as far as uri handlers go and

326
00:11:47,120 --> 00:11:48,720
and you know what the

327
00:11:48,720 --> 00:11:50,639
what is what you can execute on a system

328
00:11:50,639 --> 00:11:53,040
like that

329
00:11:53,040 --> 00:11:54,959
as far as file handler goes you can also

330
00:11:54,959 --> 00:11:56,480
get the utis

331
00:11:56,480 --> 00:11:59,120
and you can map those to the different

332
00:11:59,120 --> 00:12:00,959
apps so you can see okay you know as far

333
00:12:00,959 --> 00:12:02,880
as file formats go what is the attack

334
00:12:02,880 --> 00:12:04,720
surface we can get a pretty good picture

335
00:12:04,720 --> 00:12:05,839
of that

336
00:12:05,839 --> 00:12:08,079
quite a few of those 420 different

337
00:12:08,079 --> 00:12:10,240
formats again as

338
00:12:10,240 --> 00:12:12,399
yeah it is the

339
00:12:12,399 --> 00:12:13,680
multimedia

340
00:12:13,680 --> 00:12:16,719
world for sure

341
00:12:17,920 --> 00:12:19,360
it doesn't necessarily tell you the file

342
00:12:19,360 --> 00:12:21,200
extensions though for example with

343
00:12:21,200 --> 00:12:22,800
applescript

344
00:12:22,800 --> 00:12:25,200
you can see it's com.com apple

345
00:12:25,200 --> 00:12:27,040
applescript script

346
00:12:27,040 --> 00:12:29,040
but then if you do some more research

347
00:12:29,040 --> 00:12:30,320
you can figure out that this actually

348
00:12:30,320 --> 00:12:32,000
dot uh

349
00:12:32,000 --> 00:12:33,760
scpt file

350
00:12:33,760 --> 00:12:36,160
and and things like that so some of

351
00:12:36,160 --> 00:12:37,279
those you have to dig a little deeper

352
00:12:37,279 --> 00:12:39,440
into

353
00:12:39,440 --> 00:12:41,279
another way to look is just asking

354
00:12:41,279 --> 00:12:43,760
questions like what file types are

355
00:12:43,760 --> 00:12:45,680
included on the file system like what

356
00:12:45,680 --> 00:12:47,279
what different files are they already

357
00:12:47,279 --> 00:12:49,279
exist if they if those type of files

358
00:12:49,279 --> 00:12:52,320
exist by default then there's probably a

359
00:12:52,320 --> 00:12:54,959
program that can read them in some way

360
00:12:54,959 --> 00:12:56,399
um

361
00:12:56,399 --> 00:12:58,720
and then you can just uh if you see

362
00:12:58,720 --> 00:13:00,720
stuff you don't uh you don't know what

363
00:13:00,720 --> 00:13:02,240
it is the different file extensions you

364
00:13:02,240 --> 00:13:03,839
can google for it and

365
00:13:03,839 --> 00:13:05,839
i can give you clues to what apps may be

366
00:13:05,839 --> 00:13:08,480
handling it

367
00:13:09,920 --> 00:13:11,360
and did you know there's a notepad

368
00:13:11,360 --> 00:13:12,480
equivalent

369
00:13:12,480 --> 00:13:15,519
program on mac that parses doc and rtf

370
00:13:15,519 --> 00:13:16,480
files

371
00:13:16,480 --> 00:13:17,680
so another interesting thing about

372
00:13:17,680 --> 00:13:19,440
looking at tack surface

373
00:13:19,440 --> 00:13:21,120
you would think text edit

374
00:13:21,120 --> 00:13:22,720
just opens

375
00:13:22,720 --> 00:13:24,959
txt files which usually don't have a lot

376
00:13:24,959 --> 00:13:27,040
of attack service because

377
00:13:27,040 --> 00:13:29,120
they're parsing text

378
00:13:29,120 --> 00:13:31,360
but actually it also it opens doc and

379
00:13:31,360 --> 00:13:35,040
rtf files which are more complex formats

380
00:13:35,040 --> 00:13:38,880
and definitely increase attack service

381
00:13:39,040 --> 00:13:40,959
another thing that's interesting i came

382
00:13:40,959 --> 00:13:42,480
across is some files are actually

383
00:13:42,480 --> 00:13:44,959
directories so

384
00:13:44,959 --> 00:13:46,639
i was looking at the different file

385
00:13:46,639 --> 00:13:48,639
handlers on mac and

386
00:13:48,639 --> 00:13:50,320
i was looking to see okay you know for

387
00:13:50,320 --> 00:13:52,880
example for a calendar app there's a

388
00:13:52,880 --> 00:13:57,680
backup file test dot icpu icpu format

389
00:13:57,680 --> 00:13:58,639
if you

390
00:13:58,639 --> 00:14:00,880
double click it it opens like a file it

391
00:14:00,880 --> 00:14:03,440
opens the calendar app it you know

392
00:14:03,440 --> 00:14:05,360
everything works fine

393
00:14:05,360 --> 00:14:07,519
but if you look at it on the command

394
00:14:07,519 --> 00:14:09,680
line it's actually directory and that

395
00:14:09,680 --> 00:14:11,839
makes fuzzing more difficult because if

396
00:14:11,839 --> 00:14:13,920
you go into it thinking okay

397
00:14:13,920 --> 00:14:15,600
everything i'm mutating as a file you

398
00:14:15,600 --> 00:14:17,440
know you can do you know file

399
00:14:17,440 --> 00:14:20,079
manipulation is pretty straightforward

400
00:14:20,079 --> 00:14:22,320
but if you give it an input that is a

401
00:14:22,320 --> 00:14:23,760
directory

402
00:14:23,760 --> 00:14:26,079
that is being used as a file uh that

403
00:14:26,079 --> 00:14:27,440
gets a little more complicated so you're

404
00:14:27,440 --> 00:14:28,959
not you're not just mutating a file

405
00:14:28,959 --> 00:14:30,240
you're opening directory and then you've

406
00:14:30,240 --> 00:14:31,600
got to figure out what the right files

407
00:14:31,600 --> 00:14:33,839
to modify are that are being parsed

408
00:14:33,839 --> 00:14:35,600
because there's a whole bunch different

409
00:14:35,600 --> 00:14:38,000
you know the directory structure is

410
00:14:38,000 --> 00:14:39,760
uh contains a lot of different files

411
00:14:39,760 --> 00:14:41,360
some of which may be important some of

412
00:14:41,360 --> 00:14:43,519
which may not so

413
00:14:43,519 --> 00:14:45,360
other thing to consider when looking at

414
00:14:45,360 --> 00:14:49,279
fuzzing on different targets

415
00:14:49,360 --> 00:14:51,120
and the numeric network processes

416
00:14:51,120 --> 00:14:52,720
there's again d trace it's pretty

417
00:14:52,720 --> 00:14:56,079
awesome comes in handy here

418
00:14:56,240 --> 00:14:57,360
we can

419
00:14:57,360 --> 00:14:59,600
use different

420
00:14:59,600 --> 00:15:03,519
features of it to look at um

421
00:15:03,519 --> 00:15:05,680
what processes are

422
00:15:05,680 --> 00:15:07,600
calling receive which means you know

423
00:15:07,600 --> 00:15:09,440
they're they're taking data off the

424
00:15:09,440 --> 00:15:11,760
network essentially

425
00:15:11,760 --> 00:15:14,399
so we can um you know look at a receive

426
00:15:14,399 --> 00:15:16,160
log let that run for a while and then we

427
00:15:16,160 --> 00:15:18,800
can see what processes are actually you

428
00:15:18,800 --> 00:15:19,760
know

429
00:15:19,760 --> 00:15:21,920
parsing data and that gives you an idea

430
00:15:21,920 --> 00:15:23,600
of the attack surface

431
00:15:23,600 --> 00:15:25,120
as well

432
00:15:25,120 --> 00:15:27,760
as far as on the network side

433
00:15:27,760 --> 00:15:29,680
uh and then you can just you know run a

434
00:15:29,680 --> 00:15:33,040
good old netstat um so if you just grab

435
00:15:33,040 --> 00:15:34,560
for a listen you can see a whole bunch

436
00:15:34,560 --> 00:15:37,519
of stuff running on different ports

437
00:15:37,519 --> 00:15:39,600
and you can run lsof which is pretty

438
00:15:39,600 --> 00:15:41,120
nice as well that can give you more

439
00:15:41,120 --> 00:15:43,120
process information and more protocol

440
00:15:43,120 --> 00:15:44,320
information

441
00:15:44,320 --> 00:15:47,120
about what's running

442
00:15:47,120 --> 00:15:47,920
so

443
00:15:47,920 --> 00:15:49,519
you know you can see different stuff

444
00:15:49,519 --> 00:15:51,279
running here

445
00:15:51,279 --> 00:15:52,720
cup statement

446
00:15:52,720 --> 00:15:55,040
screen share launch d has some different

447
00:15:55,040 --> 00:15:56,480
listening services

448
00:15:56,480 --> 00:15:59,839
uh kdc all that stuff

449
00:16:00,079 --> 00:16:02,639
so as far as fuzzing goes um

450
00:16:02,639 --> 00:16:04,000
you know afl

451
00:16:04,000 --> 00:16:07,279
it's uh if you try to run it on mac um

452
00:16:07,279 --> 00:16:09,360
it's not going to work very well

453
00:16:09,360 --> 00:16:10,959
this you know a lot of the new

454
00:16:10,959 --> 00:16:13,199
developments on afl plus plus and they

455
00:16:13,199 --> 00:16:14,720
figured some of these but different bugs

456
00:16:14,720 --> 00:16:16,560
out

457
00:16:16,560 --> 00:16:18,320
and added a ton more features can't say

458
00:16:18,320 --> 00:16:20,399
enough good things about that project

459
00:16:20,399 --> 00:16:22,639
they're really you know continuing to

460
00:16:22,639 --> 00:16:24,480
push state-of-the-art for fuzzing and

461
00:16:24,480 --> 00:16:27,519
standardization um on that

462
00:16:27,519 --> 00:16:30,160
so um that's great but what about gui

463
00:16:30,160 --> 00:16:31,519
apps you know that can handle command

464
00:16:31,519 --> 00:16:32,800
line stuff but

465
00:16:32,800 --> 00:16:34,560
you know if you try to run if you try to

466
00:16:34,560 --> 00:16:36,560
fuse fontbook for example with different

467
00:16:36,560 --> 00:16:37,600
fonts

468
00:16:37,600 --> 00:16:38,560
um

469
00:16:38,560 --> 00:16:39,759
it's not really meant for that it's not

470
00:16:39,759 --> 00:16:42,240
designed it's designed for you know

471
00:16:42,240 --> 00:16:44,000
things that exit

472
00:16:44,000 --> 00:16:45,360
exit quickly

473
00:16:45,360 --> 00:16:46,959
by default

474
00:16:46,959 --> 00:16:48,880
not so much for gooeys which can stay

475
00:16:48,880 --> 00:16:51,519
open as long as you you know don't click

476
00:16:51,519 --> 00:16:53,199
x right

477
00:16:53,199 --> 00:16:54,959
and then network housing uh windows

478
00:16:54,959 --> 00:16:55,759
stuff

479
00:16:55,759 --> 00:16:57,519
there are different projects to try to

480
00:16:57,519 --> 00:16:59,360
you know handle that corner of fuzzing

481
00:16:59,360 --> 00:17:00,720
as well

482
00:17:00,720 --> 00:17:04,240
but they have their limitations too

483
00:17:04,240 --> 00:17:08,079
so uh lifos this is a project um

484
00:17:08,079 --> 00:17:10,799
i've been working on that just works

485
00:17:10,799 --> 00:17:12,880
that's the key thing i wanted something

486
00:17:12,880 --> 00:17:15,199
that would just i don't have to install

487
00:17:15,199 --> 00:17:16,079
different

488
00:17:16,079 --> 00:17:18,720
you know um i don't have to install

489
00:17:18,720 --> 00:17:20,640
different tools and different fuzzers to

490
00:17:20,640 --> 00:17:22,720
2000 different platforms

491
00:17:22,720 --> 00:17:25,119
um i want to keep the same libraries i

492
00:17:25,119 --> 00:17:27,679
just want to have something that i can

493
00:17:27,679 --> 00:17:29,520
you know run a setup script or whatever

494
00:17:29,520 --> 00:17:31,919
and it just works on linux mac and

495
00:17:31,919 --> 00:17:33,039
windows

496
00:17:33,039 --> 00:17:35,280
uh so that's why i created

497
00:17:35,280 --> 00:17:37,679
that supports file network fuzzing um

498
00:17:37,679 --> 00:17:40,320
you know clients and guise even has some

499
00:17:40,320 --> 00:17:42,480
features to do network uh interactive

500
00:17:42,480 --> 00:17:44,640
network apps like postman and filezilla

501
00:17:44,640 --> 00:17:47,039
and stuff like that

502
00:17:47,039 --> 00:17:49,039
it has automatic crash triage and

503
00:17:49,039 --> 00:17:50,400
diffing so

504
00:17:50,400 --> 00:17:51,520
once you

505
00:17:51,520 --> 00:17:53,200
once it comes across it once it detects

506
00:17:53,200 --> 00:17:54,880
the crash

507
00:17:54,880 --> 00:17:57,440
it will you know do it do a rented debug

508
00:17:57,440 --> 00:18:00,400
session it will do diffing for the uh

509
00:18:00,400 --> 00:18:02,640
input file to show you exactly what

510
00:18:02,640 --> 00:18:03,760
changed

511
00:18:03,760 --> 00:18:05,200
uh and a whole bunch of other uh

512
00:18:05,200 --> 00:18:06,960
artifacts

513
00:18:06,960 --> 00:18:09,440
so it's most useful

514
00:18:09,440 --> 00:18:11,360
for closing

515
00:18:11,360 --> 00:18:14,240
fuzzing closed source applications

516
00:18:14,240 --> 00:18:17,600
for example if you wanted to fuzz a

517
00:18:17,600 --> 00:18:19,600
cli

518
00:18:19,600 --> 00:18:21,440
that's open source i mean of course

519
00:18:21,440 --> 00:18:22,960
you're going to get

520
00:18:22,960 --> 00:18:24,960
uh you'll be able to get coverage data

521
00:18:24,960 --> 00:18:27,120
and instrumentation if you just use you

522
00:18:27,120 --> 00:18:29,039
know fl plus plus the instrument

523
00:18:29,039 --> 00:18:30,160
instrument and things like that if

524
00:18:30,160 --> 00:18:31,520
that's possible if you don't run into

525
00:18:31,520 --> 00:18:33,039
you know issues for that

526
00:18:33,039 --> 00:18:34,960
so this is more for you know it's kind

527
00:18:34,960 --> 00:18:37,200
of perfect for fuzzing mac because um

528
00:18:37,200 --> 00:18:38,640
you know most stuff in mac is close

529
00:18:38,640 --> 00:18:39,760
source right

530
00:18:39,760 --> 00:18:41,840
it's really built for bug hunters

531
00:18:41,840 --> 00:18:43,440
it's not

532
00:18:43,440 --> 00:18:45,039
it's not yeah i'll go over some of the

533
00:18:45,039 --> 00:18:46,799
trade-offs as well but

534
00:18:46,799 --> 00:18:49,840
it does some pretty neat things uh in

535
00:18:49,840 --> 00:18:52,799
orthodox fashions

536
00:18:53,120 --> 00:18:54,480
but it breaks a lot of the rules of

537
00:18:54,480 --> 00:18:56,400
modern fussing uh it doesn't do

538
00:18:56,400 --> 00:18:57,840
instrumentation that was not a goal of

539
00:18:57,840 --> 00:18:59,200
the project

540
00:18:59,200 --> 00:19:02,559
again afl plus plus is great of that

541
00:19:02,559 --> 00:19:04,559
other frameworks are too

542
00:19:04,559 --> 00:19:06,720
it's not meant for speed

543
00:19:06,720 --> 00:19:08,640
you know again instrumentation is going

544
00:19:08,640 --> 00:19:10,080
to give you a lot of the speed and

545
00:19:10,080 --> 00:19:12,640
different kernel tricks as well

546
00:19:12,640 --> 00:19:15,520
or os tricks the afl employs

547
00:19:15,520 --> 00:19:16,880
not meant for that

548
00:19:16,880 --> 00:19:18,480
it is meant to

549
00:19:18,480 --> 00:19:20,240
cover a ton of different domains and

550
00:19:20,240 --> 00:19:22,960
work across platform

551
00:19:22,960 --> 00:19:25,039
it doesn't have you know automatic i

552
00:19:25,039 --> 00:19:27,440
mean not natively uh devops integration

553
00:19:27,440 --> 00:19:29,120
where you can automatically file bugs

554
00:19:29,120 --> 00:19:31,520
and and run in you know every time

555
00:19:31,520 --> 00:19:32,880
there's a build and things like that it

556
00:19:32,880 --> 00:19:34,720
can certainly be things can certainly be

557
00:19:34,720 --> 00:19:36,000
built around that

558
00:19:36,000 --> 00:19:37,440
but most importantly it was built to

559
00:19:37,440 --> 00:19:38,559
find bugs

560
00:19:38,559 --> 00:19:42,639
and that's exactly what it does

561
00:19:42,720 --> 00:19:44,480
um yeah how do you know if fuzzer is

562
00:19:44,480 --> 00:19:46,160
doing a good job

563
00:19:46,160 --> 00:19:48,000
does it find bugs or not that's that's

564
00:19:48,000 --> 00:19:50,960
what we're going with today

565
00:19:51,440 --> 00:19:54,160
so fuzzing some of the mac intricacies

566
00:19:54,160 --> 00:19:55,039
uh

567
00:19:55,039 --> 00:19:56,080
you know we talked about before the

568
00:19:56,080 --> 00:19:57,440
sandbox stuff

569
00:19:57,440 --> 00:20:00,720
some gui apps you know uh they like

570
00:20:00,720 --> 00:20:02,640
unique file names um that's another

571
00:20:02,640 --> 00:20:04,880
thing i ran into which was if you try to

572
00:20:04,880 --> 00:20:07,360
reuse you know temp slash

573
00:20:07,360 --> 00:20:09,679
you know fuzz dot temp slash fuzz for

574
00:20:09,679 --> 00:20:10,640
example

575
00:20:10,640 --> 00:20:12,080
um

576
00:20:12,080 --> 00:20:14,720
not all apps like that they they may you

577
00:20:14,720 --> 00:20:16,720
know bail if they if they don't if they

578
00:20:16,720 --> 00:20:19,360
literally don't see the right extension

579
00:20:19,360 --> 00:20:21,440
or you know they've seen this file name

580
00:20:21,440 --> 00:20:23,440
again so they tried to cache it or try

581
00:20:23,440 --> 00:20:26,480
to refer to it back in some way

582
00:20:26,480 --> 00:20:28,000
again reading within the sandbox we

583
00:20:28,000 --> 00:20:29,919
talked about that

584
00:20:29,919 --> 00:20:31,280
and some of them are just hard to find

585
00:20:31,280 --> 00:20:32,320
directly

586
00:20:32,320 --> 00:20:36,320
there's you know xpc proxy proxy and xpc

587
00:20:36,320 --> 00:20:38,640
type stuff that comes into play and some

588
00:20:38,640 --> 00:20:40,400
things just um

589
00:20:40,400 --> 00:20:42,799
i feel like there's at apple there was

590
00:20:42,799 --> 00:20:45,600
um you know this traditional and this uh

591
00:20:45,600 --> 00:20:46,559
new

592
00:20:46,559 --> 00:20:47,520
app

593
00:20:47,520 --> 00:20:49,280
uh process that probably came out a

594
00:20:49,280 --> 00:20:51,919
while back i'm if i'm just speculating

595
00:20:51,919 --> 00:20:54,080
that a lot of apps got converted to yeah

596
00:20:54,080 --> 00:20:56,080
we're just not gonna let anyone pass

597
00:20:56,080 --> 00:20:59,039
commands uh files has commands to them

598
00:20:59,039 --> 00:21:00,159
to fuzz

599
00:21:00,159 --> 00:21:01,520
um so

600
00:21:01,520 --> 00:21:02,960
i'm just dubbing that like the classic

601
00:21:02,960 --> 00:21:04,640
way because there's still a ton of apps

602
00:21:04,640 --> 00:21:06,960
that work that way but some apps do not

603
00:21:06,960 --> 00:21:09,919
so um yeah future research is to look

604
00:21:09,919 --> 00:21:12,080
into some of the ipc uh stuff that

605
00:21:12,080 --> 00:21:14,880
happens with with certain applications

606
00:21:14,880 --> 00:21:17,840
because that could be interesting too

607
00:21:19,440 --> 00:21:20,320
so

608
00:21:20,320 --> 00:21:22,480
for targeting applications

609
00:21:22,480 --> 00:21:24,480
yeah you basically pick a

610
00:21:24,480 --> 00:21:27,360
cli pick a gui

611
00:21:27,360 --> 00:21:29,679
collect the test files

612
00:21:29,679 --> 00:21:32,240
if the target doesn't exit on on its own

613
00:21:32,240 --> 00:21:34,240
uh measure reasonable timeout like we

614
00:21:34,240 --> 00:21:36,559
said um command line apps versus gui

615
00:21:36,559 --> 00:21:39,520
apps that's the biggest difference

616
00:21:39,520 --> 00:21:41,520
you know a lot of

617
00:21:41,520 --> 00:21:44,000
command line apps will exit after they

618
00:21:44,000 --> 00:21:46,080
try to parse the file or do whatever

619
00:21:46,080 --> 00:21:47,280
operation

620
00:21:47,280 --> 00:21:49,600
guise often times do not

621
00:21:49,600 --> 00:21:51,520
so measure timeout and then you can

622
00:21:51,520 --> 00:21:53,520
start fuzzing

623
00:21:53,520 --> 00:21:55,840
so here's an example a command line

624
00:21:55,840 --> 00:21:57,760
fusing light fuzz

625
00:21:57,760 --> 00:21:59,360
where you're doing local fuzzing or

626
00:21:59,360 --> 00:22:02,080
passing the command which is the app and

627
00:22:02,080 --> 00:22:03,840
then the fuzz placeholder which just

628
00:22:03,840 --> 00:22:05,120
means

629
00:22:05,120 --> 00:22:07,919
put our fuzz file here replace the word

630
00:22:07,919 --> 00:22:09,760
fuzz with our first file internally for

631
00:22:09,760 --> 00:22:11,600
the for the fuzzer when every every

632
00:22:11,600 --> 00:22:13,840
iteration

633
00:22:14,000 --> 00:22:16,320
and your input directory is a files and

634
00:22:16,320 --> 00:22:17,600
epub

635
00:22:17,600 --> 00:22:20,240
which is just our input files or epub

636
00:22:20,240 --> 00:22:22,480
input files for the in this case

637
00:22:22,480 --> 00:22:24,880
you can select an output directory

638
00:22:24,880 --> 00:22:26,080
we're gonna be using a special temp

639
00:22:26,080 --> 00:22:28,720
directory uh instead of using

640
00:22:28,720 --> 00:22:31,840
the um you know slash temp uh slash life

641
00:22:31,840 --> 00:22:35,039
fuzz slash you know it's its own um

642
00:22:35,039 --> 00:22:38,320
directory uh for each uh session uh you

643
00:22:38,320 --> 00:22:40,960
wanna specify a special one to make sure

644
00:22:40,960 --> 00:22:43,280
that um the application actually opens

645
00:22:43,280 --> 00:22:45,600
their file properly and doesn't complain

646
00:22:45,600 --> 00:22:48,320
uh max running timeout again 10 is is

647
00:22:48,320 --> 00:22:49,360
pretty high

648
00:22:49,360 --> 00:22:50,559
but that's

649
00:22:50,559 --> 00:22:53,360
uh you know on on my test system that's

650
00:22:53,360 --> 00:22:56,400
how long it took for the books app to

651
00:22:56,400 --> 00:22:59,440
open this file so if you have faster

652
00:22:59,440 --> 00:23:00,960
systems and things like that that's

653
00:23:00,960 --> 00:23:02,400
going to be different but

654
00:23:02,400 --> 00:23:04,720
uh just giving example it you know

655
00:23:04,720 --> 00:23:06,400
things not meant for speed

656
00:23:06,400 --> 00:23:08,240
it is you're literally executing

657
00:23:08,240 --> 00:23:11,280
iterations uh one by one

658
00:23:11,280 --> 00:23:12,720
then the number of iterations you can

659
00:23:12,720 --> 00:23:14,559
put any number you want there just use a

660
00:23:14,559 --> 00:23:16,320
hundred thousand for

661
00:23:16,320 --> 00:23:19,039
a reference and we'll talk about easy uh

662
00:23:19,039 --> 00:23:22,200
in a moment

663
00:23:22,480 --> 00:23:24,799
and then with fontbook uh pretty similar

664
00:23:24,799 --> 00:23:26,080
um

665
00:23:26,080 --> 00:23:28,720
yeah so easy essentially the dash e

666
00:23:28,720 --> 00:23:30,880
command is just a feature of light fuzz

667
00:23:30,880 --> 00:23:33,679
that says recycle any of the crashes

668
00:23:33,679 --> 00:23:35,200
that you found

669
00:23:35,200 --> 00:23:37,039
make those as inputs

670
00:23:37,039 --> 00:23:38,960
once you're finished with the

671
00:23:38,960 --> 00:23:40,480
iterations

672
00:23:40,480 --> 00:23:42,640
that we're running so in this example

673
00:23:42,640 --> 00:23:44,720
after 500 000 iterations

674
00:23:44,720 --> 00:23:46,880
it would say okay did i find any crashes

675
00:23:46,880 --> 00:23:48,480
if so

676
00:23:48,480 --> 00:23:50,320
copy those crashes to a new input

677
00:23:50,320 --> 00:23:52,080
directory

678
00:23:52,080 --> 00:23:54,159
use that input directory for a new

679
00:23:54,159 --> 00:23:58,159
fuzzing session for 500 000 iterations

680
00:23:58,159 --> 00:23:58,880
so

681
00:23:58,880 --> 00:24:01,440
that way it's possible to find even new

682
00:24:01,440 --> 00:24:03,039
bugs because you're basically you're

683
00:24:03,039 --> 00:24:05,039
recycling crashes to

684
00:24:05,039 --> 00:24:07,200
you know still mutate and you know you

685
00:24:07,200 --> 00:24:08,400
could you could find potentially new

686
00:24:08,400 --> 00:24:10,720
bugs using that because of you know how

687
00:24:10,720 --> 00:24:13,360
crashes work and and memory corruption

688
00:24:13,360 --> 00:24:14,080
and

689
00:24:14,080 --> 00:24:16,880
mutating files that are different can

690
00:24:16,880 --> 00:24:18,159
trigger you know different kinds of

691
00:24:18,159 --> 00:24:20,320
crashes different places in the app so

692
00:24:20,320 --> 00:24:22,159
it's a neat little feature that's in the

693
00:24:22,159 --> 00:24:24,240
fuzzer

694
00:24:24,240 --> 00:24:27,200
and then fuzzing package util um it's

695
00:24:27,200 --> 00:24:30,159
you know a cli so you don't need a

696
00:24:30,159 --> 00:24:32,799
max timeout for it it just

697
00:24:32,799 --> 00:24:35,279
you know stops on its own after it exits

698
00:24:35,279 --> 00:24:36,640
on its own

699
00:24:36,640 --> 00:24:38,080
um

700
00:24:38,080 --> 00:24:39,679
and

701
00:24:39,679 --> 00:24:40,799
and

702
00:24:40,799 --> 00:24:42,080
you know with console apps and stuff

703
00:24:42,080 --> 00:24:44,720
like that you can also use fl fl plus

704
00:24:44,720 --> 00:24:47,039
plus and non-instrumented mode on it too

705
00:24:47,039 --> 00:24:48,799
so the the you know the primary purpose

706
00:24:48,799 --> 00:24:50,960
of life fuzz is to handle situations

707
00:24:50,960 --> 00:24:53,679
that you know afl can't handle or

708
00:24:53,679 --> 00:24:55,760
you know well i guess making afl work on

709
00:24:55,760 --> 00:24:57,679
all platforms it's pretty pretty good

710
00:24:57,679 --> 00:24:59,679
feature too

711
00:24:59,679 --> 00:25:01,919
as far as you know purpose goes

712
00:25:01,919 --> 00:25:03,760
um but you could also you know fuzz

713
00:25:03,760 --> 00:25:05,919
command line stuff on mac with in

714
00:25:05,919 --> 00:25:07,919
non-instrumented mode with afl as well

715
00:25:07,919 --> 00:25:10,240
so fyi but this is just an example to

716
00:25:10,240 --> 00:25:13,600
show you that live photos can do it too

717
00:25:13,679 --> 00:25:16,480
and uh you can also look at the output

718
00:25:16,480 --> 00:25:18,559
so there's like a global output when

719
00:25:18,559 --> 00:25:20,080
fuzzing that

720
00:25:20,080 --> 00:25:22,159
is written just so you can monitor the

721
00:25:22,159 --> 00:25:23,360
app just make sure it's working

722
00:25:23,360 --> 00:25:24,720
correctly make sure you've got command

723
00:25:24,720 --> 00:25:26,320
line args good

724
00:25:26,320 --> 00:25:28,000
you can see with this one we were filing

725
00:25:28,000 --> 00:25:30,400
package util um it looks like it was

726
00:25:30,400 --> 00:25:33,919
fuzzing xml and it mutated xml and

727
00:25:33,919 --> 00:25:34,880
um

728
00:25:34,880 --> 00:25:36,720
package util is complaining

729
00:25:36,720 --> 00:25:38,400
you can see that it is

730
00:25:38,400 --> 00:25:40,799
being fussed

731
00:25:40,799 --> 00:25:42,799
minimizing crashes is a is another

732
00:25:42,799 --> 00:25:45,120
interesting feature um so it's super

733
00:25:45,120 --> 00:25:46,640
simple the way it works

734
00:25:46,640 --> 00:25:49,760
um it literally just uh when you want to

735
00:25:49,760 --> 00:25:51,520
minimize a crash it just removes one

736
00:25:51,520 --> 00:25:54,320
bite at a time and runs the target with

737
00:25:54,320 --> 00:25:58,000
a new repro if the target crashes

738
00:25:58,000 --> 00:25:59,440
the new repro

739
00:25:59,440 --> 00:26:01,360
the new minimized

740
00:26:01,360 --> 00:26:03,520
test case

741
00:26:03,520 --> 00:26:04,960
if it crashes

742
00:26:04,960 --> 00:26:05,919
then

743
00:26:05,919 --> 00:26:08,880
continue removing the bytes so remove

744
00:26:08,880 --> 00:26:10,960
that by and then go into the next one if

745
00:26:10,960 --> 00:26:12,559
it doesn't crash

746
00:26:12,559 --> 00:26:15,200
restore that byte and or you know don't

747
00:26:15,200 --> 00:26:16,480
don't remove that byte because

748
00:26:16,480 --> 00:26:17,919
apparently it's important because the

749
00:26:17,919 --> 00:26:20,080
target didn't crash once we removed it

750
00:26:20,080 --> 00:26:22,159
the point of minimization is to get the

751
00:26:22,159 --> 00:26:24,720
smallest possible crashing test case

752
00:26:24,720 --> 00:26:28,000
um simple by byte minimization uh just

753
00:26:28,000 --> 00:26:29,520
goes one at a time

754
00:26:29,520 --> 00:26:31,840
and um

755
00:26:31,840 --> 00:26:33,679
and then for uh

756
00:26:33,679 --> 00:26:36,559
superman mode uh which i've dubbed

757
00:26:36,559 --> 00:26:38,640
it does that but it repeats the process

758
00:26:38,640 --> 00:26:41,360
until all the bytes are exhausted

759
00:26:41,360 --> 00:26:43,600
rather than a single pass

760
00:26:43,600 --> 00:26:46,000
it will go from the top bytes to the

761
00:26:46,000 --> 00:26:47,679
next one it'll say okay let's take that

762
00:26:47,679 --> 00:26:50,159
one minimize it again take that one

763
00:26:50,159 --> 00:26:52,799
minimize it again on and on until

764
00:26:52,799 --> 00:26:55,679
uh the the there's no more bytes that we

765
00:26:55,679 --> 00:26:57,279
can remove we've exhausted the

766
00:26:57,279 --> 00:26:59,919
minimization and to achieve maximum

767
00:26:59,919 --> 00:27:03,360
minimization that's the point

768
00:27:03,760 --> 00:27:05,919
um i want to mention too the kanto app

769
00:27:05,919 --> 00:27:07,600
also can give you some visibility into

770
00:27:07,600 --> 00:27:09,679
the target application so in this one

771
00:27:09,679 --> 00:27:12,000
for example if we're fuzzing the sips uh

772
00:27:12,000 --> 00:27:12,880
app

773
00:27:12,880 --> 00:27:14,320
um you can

774
00:27:14,320 --> 00:27:16,720
open a console app uh start streaming

775
00:27:16,720 --> 00:27:18,720
and you can see the different messages

776
00:27:18,720 --> 00:27:20,080
that

777
00:27:20,080 --> 00:27:22,240
the application is

778
00:27:22,240 --> 00:27:24,720
putting out

779
00:27:25,360 --> 00:27:26,640
that you can view

780
00:27:26,640 --> 00:27:28,559
so the console app's pretty handy too if

781
00:27:28,559 --> 00:27:29,840
you want to get more information about

782
00:27:29,840 --> 00:27:33,799
what's going on during fuzzing

783
00:27:36,159 --> 00:27:39,120
so fuzzing network clients so a couple

784
00:27:39,120 --> 00:27:43,039
examples here s b util and cups

785
00:27:43,039 --> 00:27:45,600
essentially you just capture pcap

786
00:27:45,600 --> 00:27:49,600
you export the uh the bytes for each

787
00:27:49,600 --> 00:27:50,960
request or

788
00:27:50,960 --> 00:27:53,200
well in this case for each response

789
00:27:53,200 --> 00:27:55,279
from a valid server

790
00:27:55,279 --> 00:27:57,679
and then you pass them to lifos

791
00:27:57,679 --> 00:27:59,600
to fuzzling

792
00:27:59,600 --> 00:28:01,440
so for this one we're using a local

793
00:28:01,440 --> 00:28:02,960
client mode

794
00:28:02,960 --> 00:28:05,039
that way we can

795
00:28:05,039 --> 00:28:09,760
launch each one and check for crashes

796
00:28:10,080 --> 00:28:11,440
pass the command line we're trying to

797
00:28:11,440 --> 00:28:14,559
view use smb util to view

798
00:28:14,559 --> 00:28:16,799
at four four five five we're using four

799
00:28:16,799 --> 00:28:18,799
four five five because uh that is the

800
00:28:18,799 --> 00:28:21,279
address of error um

801
00:28:21,279 --> 00:28:22,799
our fuzzing server

802
00:28:22,799 --> 00:28:24,640
and we don't wanna interfere with 445

803
00:28:24,640 --> 00:28:27,200
which is the actual real smb server

804
00:28:27,200 --> 00:28:29,840
running on the host

805
00:28:29,840 --> 00:28:31,679
throw in our responses

806
00:28:31,679 --> 00:28:32,640
dash p

807
00:28:32,640 --> 00:28:34,559
is just saying we're doing a session so

808
00:28:34,559 --> 00:28:36,799
we have more than one

809
00:28:36,799 --> 00:28:38,000
input

810
00:28:38,000 --> 00:28:40,320
we want to use everything that's in smb

811
00:28:40,320 --> 00:28:42,480
response directory and use that as a

812
00:28:42,480 --> 00:28:44,480
session sequentially

813
00:28:44,480 --> 00:28:46,240
so in in that directory you know we have

814
00:28:46,240 --> 00:28:48,480
like one dot bin two dot band three dot

815
00:28:48,480 --> 00:28:50,880
bin and it will play each one of those

816
00:28:50,880 --> 00:28:53,360
uh in order and randomly pick one of us

817
00:28:53,360 --> 00:28:55,200
and all that stuff

818
00:28:55,200 --> 00:28:58,799
um and then uh that's z here oh sorry i

819
00:28:58,799 --> 00:29:01,600
didn't explain that c before with ez so

820
00:29:01,600 --> 00:29:04,880
dash e reuses the crashes um if it finds

821
00:29:04,880 --> 00:29:08,640
any dash z um it enables malik debugging

822
00:29:08,640 --> 00:29:11,600
so it enables uh you know the uh guard

823
00:29:11,600 --> 00:29:13,039
malloc to

824
00:29:13,039 --> 00:29:15,440
to check for more subtle crashes so i

825
00:29:15,440 --> 00:29:17,360
just like to put easy together because

826
00:29:17,360 --> 00:29:19,840
it sounds like easy and

827
00:29:19,840 --> 00:29:22,320
that's why

828
00:29:22,480 --> 00:29:24,799
uh and then with cups we can use lp

829
00:29:24,799 --> 00:29:27,440
admin you know check for different bugs

830
00:29:27,440 --> 00:29:29,279
in it for example

831
00:29:29,279 --> 00:29:31,039
again we change the port to make sure

832
00:29:31,039 --> 00:29:32,159
that

833
00:29:32,159 --> 00:29:34,640
we don't conflict with

834
00:29:34,640 --> 00:29:38,640
the real cup server on port 631

835
00:29:39,200 --> 00:29:40,559
and

836
00:29:40,559 --> 00:29:42,640
uh yeah essentially we're pretending to

837
00:29:42,640 --> 00:29:45,440
be a malicious uh cup server to fuzz lp

838
00:29:45,440 --> 00:29:47,279
admin

839
00:29:47,279 --> 00:29:49,600
client

840
00:29:49,919 --> 00:29:52,880
as far as servers goes um

841
00:29:52,880 --> 00:29:55,200
we have a couple here and probably one

842
00:29:55,200 --> 00:29:58,240
more uh so we have the ard agent which

843
00:29:58,240 --> 00:30:01,600
is a vnc type server

844
00:30:01,600 --> 00:30:04,399
we have screen share daemon which is

845
00:30:04,399 --> 00:30:06,480
actually a vnc server

846
00:30:06,480 --> 00:30:08,399
you can read more about ard agent if you

847
00:30:08,399 --> 00:30:10,720
search for it online about how it works

848
00:30:10,720 --> 00:30:14,320
pretty interesting um how how apple uh

849
00:30:14,320 --> 00:30:16,000
you know modified that and sort of came

850
00:30:16,000 --> 00:30:16,799
up with

851
00:30:16,799 --> 00:30:18,799
something for uh for a solution for for

852
00:30:18,799 --> 00:30:20,480
different vnc stuff

853
00:30:20,480 --> 00:30:22,159
um yeah essentially same thing as

854
00:30:22,159 --> 00:30:23,840
clients capture the data

855
00:30:23,840 --> 00:30:26,320
uh export it

856
00:30:26,320 --> 00:30:28,240
and then um

857
00:30:28,240 --> 00:30:29,919
use it to fuss

858
00:30:29,919 --> 00:30:31,840
so we look at ard agent

859
00:30:31,840 --> 00:30:32,960
um

860
00:30:32,960 --> 00:30:34,960
we can see that

861
00:30:34,960 --> 00:30:38,720
know it's listening uh udp 3283

862
00:30:38,720 --> 00:30:41,440
also uh it's sued root which was also

863
00:30:41,440 --> 00:30:43,919
interesting in this um

864
00:30:43,919 --> 00:30:46,399
so that's uh that's an interesting fact

865
00:30:46,399 --> 00:30:47,919
when looking at it see what kind of

866
00:30:47,919 --> 00:30:51,120
privileges it may be running at

867
00:30:51,120 --> 00:30:52,960
with light fuzz

868
00:30:52,960 --> 00:30:53,919
we

869
00:30:53,919 --> 00:30:56,480
can instead of doing it

870
00:30:56,480 --> 00:30:58,799
as a local server mode with a command

871
00:30:58,799 --> 00:31:00,240
we're just going to do it in remote mode

872
00:31:00,240 --> 00:31:02,320
so just s

873
00:31:02,320 --> 00:31:04,960
we're going to specify the address uh

874
00:31:04,960 --> 00:31:06,720
there and then the particular packet

875
00:31:06,720 --> 00:31:08,399
because then and this one we just wanna

876
00:31:08,399 --> 00:31:09,679
we don't wanna do a session we just

877
00:31:09,679 --> 00:31:12,080
wanna do the initial packet uh that was

878
00:31:12,080 --> 00:31:13,120
captured

879
00:31:13,120 --> 00:31:14,240
for this

880
00:31:14,240 --> 00:31:15,679
and uh

881
00:31:15,679 --> 00:31:17,200
yeah catching crashes can be interesting

882
00:31:17,200 --> 00:31:19,519
for this you can enable report crash as

883
00:31:19,519 --> 00:31:21,120
we mentioned before

884
00:31:21,120 --> 00:31:22,960
and monitor the diagnostic logs for

885
00:31:22,960 --> 00:31:24,399
stuff um

886
00:31:24,399 --> 00:31:26,159
you can you know just do it

887
00:31:26,159 --> 00:31:28,399
you can implement other things if you

888
00:31:28,399 --> 00:31:29,760
can get a ard agent to running in a

889
00:31:29,760 --> 00:31:32,000
debugger of course then you can you know

890
00:31:32,000 --> 00:31:33,200
attach or

891
00:31:33,200 --> 00:31:34,960
and you know send a signal when it

892
00:31:34,960 --> 00:31:36,320
crashes

893
00:31:36,320 --> 00:31:38,960
things like that

894
00:31:40,399 --> 00:31:42,240
and then if we see

895
00:31:42,240 --> 00:31:44,159
if we use dtrace to look at receive we

896
00:31:44,159 --> 00:31:45,840
can see that while we're fuzzing you can

897
00:31:45,840 --> 00:31:47,440
check to make sure the aod agent is

898
00:31:47,440 --> 00:31:49,279
actually receiving messages and you know

899
00:31:49,279 --> 00:31:51,039
fuzzing is going good and things like

900
00:31:51,039 --> 00:31:53,200
that

901
00:31:53,679 --> 00:31:55,840
screen share demon uh looking at port

902
00:31:55,840 --> 00:31:58,320
5900

903
00:31:58,320 --> 00:32:01,120
and then for this and other processes on

904
00:32:01,120 --> 00:32:04,080
mac launch d actually runs them

905
00:32:04,080 --> 00:32:06,159
uh only upon connection

906
00:32:06,159 --> 00:32:08,000
um so

907
00:32:08,000 --> 00:32:09,600
if you didn't have a connection

908
00:32:09,600 --> 00:32:12,480
uh you may just see that launch d was

909
00:32:12,480 --> 00:32:14,159
just listening but once you once you

910
00:32:14,159 --> 00:32:16,000
just connect to it it will actually

911
00:32:16,000 --> 00:32:18,880
start the screen share d uh

912
00:32:18,880 --> 00:32:21,200
you know other apps work that way too so

913
00:32:21,200 --> 00:32:23,200
something to know um

914
00:32:23,200 --> 00:32:24,640
as well when you're when you're doing

915
00:32:24,640 --> 00:32:26,559
research

916
00:32:26,559 --> 00:32:28,320
and for this one pretty straightforward

917
00:32:28,320 --> 00:32:30,159
uh similar to

918
00:32:30,159 --> 00:32:31,840
uh the client side except we're doing

919
00:32:31,840 --> 00:32:33,600
server so again we're doing a remote

920
00:32:33,600 --> 00:32:34,640
server

921
00:32:34,640 --> 00:32:36,320
and uh

922
00:32:36,320 --> 00:32:39,120
passing that along

923
00:32:39,519 --> 00:32:42,880
and then uh there was a

924
00:32:42,880 --> 00:32:45,519
remote uh so this is you so you can also

925
00:32:45,519 --> 00:32:47,919
use report crash so mentioning forward

926
00:32:47,919 --> 00:32:49,200
crash before

927
00:32:49,200 --> 00:32:52,240
there's a feature in light fuzz where

928
00:32:52,240 --> 00:32:53,840
we can

929
00:32:53,840 --> 00:32:56,320
specify a process that we're looking for

930
00:32:56,320 --> 00:32:59,200
that would be logged for crashes

931
00:32:59,200 --> 00:33:00,320
and

932
00:33:00,320 --> 00:33:02,480
in this way we can turn on report crash

933
00:33:02,480 --> 00:33:03,919
we can fuzz

934
00:33:03,919 --> 00:33:05,919
we can turn we can say remote mode but

935
00:33:05,919 --> 00:33:07,600
still fuzz locally because we want to

936
00:33:07,600 --> 00:33:08,840
utilize report

937
00:33:08,840 --> 00:33:11,679
crash and if there's any crashes that uh

938
00:33:11,679 --> 00:33:13,279
that occur

939
00:33:13,279 --> 00:33:16,159
in uh the report crash directory

940
00:33:16,159 --> 00:33:17,600
it will save them

941
00:33:17,600 --> 00:33:19,279
uh and so at least we get some kind of

942
00:33:19,279 --> 00:33:21,679
crash log and and of course the repro go

943
00:33:21,679 --> 00:33:22,960
along with that

944
00:33:22,960 --> 00:33:25,360
so um there was a potential bug there it

945
00:33:25,360 --> 00:33:27,279
wasn't really reproducible uh but there

946
00:33:27,279 --> 00:33:30,720
was a you know a cpu resource exhaustion

947
00:33:30,720 --> 00:33:34,080
um log that uh that was found for that

948
00:33:34,080 --> 00:33:36,080
uh which was uh yeah you can know that

949
00:33:36,080 --> 00:33:37,919
the fuzzing the buzzing is working at

950
00:33:37,919 --> 00:33:38,880
least

951
00:33:38,880 --> 00:33:41,039
if nothing else

952
00:33:41,039 --> 00:33:44,080
and then we have ods agent so um

953
00:33:44,080 --> 00:33:45,440
ods agent

954
00:33:45,440 --> 00:33:46,880
is another example we're going to use

955
00:33:46,880 --> 00:33:51,360
here it's an xml based web service

956
00:33:51,360 --> 00:33:53,039
it

957
00:33:53,039 --> 00:33:54,880
uh essentially you can use it to share

958
00:33:54,880 --> 00:33:57,600
uh cd and dvd uh type stuff across the

959
00:33:57,600 --> 00:33:58,559
network

960
00:33:58,559 --> 00:34:01,039
and the default prompt uh default is to

961
00:34:01,039 --> 00:34:03,440
prompt on request for access

962
00:34:03,440 --> 00:34:05,120
so you can see here just wanna give an

963
00:34:05,120 --> 00:34:06,720
example of if you want to throw some

964
00:34:06,720 --> 00:34:09,280
format string specifiers in there

965
00:34:09,280 --> 00:34:11,040
it seems pretty timely with the wi-fi

966
00:34:11,040 --> 00:34:14,399
stuff going on with uh apple

967
00:34:14,399 --> 00:34:16,800
so you can uh

968
00:34:16,800 --> 00:34:18,159
when you're fuzzing that make them

969
00:34:18,159 --> 00:34:19,760
across the prompt because it's just

970
00:34:19,760 --> 00:34:22,320
asking if if the remote person can have

971
00:34:22,320 --> 00:34:23,599
access to it of course that can be

972
00:34:23,599 --> 00:34:25,918
turned off as well

973
00:34:25,918 --> 00:34:27,359
so for fuzzing this it actually has a

974
00:34:27,359 --> 00:34:28,639
dynamic port so you gotta figure out

975
00:34:28,639 --> 00:34:31,159
which one that is but we're going with

976
00:34:31,159 --> 00:34:34,079
56156 today

977
00:34:34,079 --> 00:34:35,839
and then give it the input files tell it

978
00:34:35,839 --> 00:34:37,440
defines a session there may be two or

979
00:34:37,440 --> 00:34:39,119
three packets in the session

980
00:34:39,119 --> 00:34:41,520
and then again use dash report crash to

981
00:34:41,520 --> 00:34:46,639
look for crashes that involve ods agent

982
00:34:47,760 --> 00:34:50,399
and i have a bonus one today

983
00:34:50,399 --> 00:34:52,560
so there's the say app which if you're

984
00:34:52,560 --> 00:34:53,760
familiar

985
00:34:53,760 --> 00:34:56,480
will read

986
00:34:56,960 --> 00:34:59,200
text files and things like that

987
00:34:59,200 --> 00:35:02,880
and say them uh through the speakers on

988
00:35:02,880 --> 00:35:03,839
mac

989
00:35:03,839 --> 00:35:05,280
so um

990
00:35:05,280 --> 00:35:07,760
you know i said i thought what the heck

991
00:35:07,760 --> 00:35:10,160
let's try that pass pass the file

992
00:35:10,160 --> 00:35:11,760
through

993
00:35:11,760 --> 00:35:13,040
let it read it

994
00:35:13,040 --> 00:35:13,920
and

995
00:35:13,920 --> 00:35:16,400
um yeah i thought i would fuzz that just

996
00:35:16,400 --> 00:35:18,000
to see if you know funnily enough there

997
00:35:18,000 --> 00:35:19,280
was any bugs

998
00:35:19,280 --> 00:35:22,320
i haven't found any yet but um

999
00:35:22,320 --> 00:35:23,760
you may want to mute your macbook if you

1000
00:35:23,760 --> 00:35:25,839
try this at home here here's here's what

1001
00:35:25,839 --> 00:35:29,160
it sounds like

1002
00:35:38,960 --> 00:35:40,800
yeah so

1003
00:35:40,800 --> 00:35:42,240
i'm just curious it's actually possible

1004
00:35:42,240 --> 00:35:44,400
to crash this thing but just got a bunch

1005
00:35:44,400 --> 00:35:45,200
of

1006
00:35:45,200 --> 00:35:48,480
you know uh bad text uh output from that

1007
00:35:48,480 --> 00:35:50,560
when i was looking at it

1008
00:35:50,560 --> 00:35:53,040
anyways just a bonus here uh fuzzing the

1009
00:35:53,040 --> 00:35:55,839
say app on mac and listening to it try

1010
00:35:55,839 --> 00:35:59,839
to pronounce uh fuzz text

1011
00:36:00,000 --> 00:36:01,359
so some of the bugs actually came out of

1012
00:36:01,359 --> 00:36:02,640
this

1013
00:36:02,640 --> 00:36:05,119
i can mention right now

1014
00:36:05,119 --> 00:36:06,400
applescript

1015
00:36:06,400 --> 00:36:09,200
colorsync syslog

1016
00:36:09,200 --> 00:36:12,640
there's some more upcoming cvs uh tbd as

1017
00:36:12,640 --> 00:36:14,640
well for different stuff

1018
00:36:14,640 --> 00:36:18,240
um but uh yeah there's

1019
00:36:18,240 --> 00:36:20,320
there was uh some interesting bugs that

1020
00:36:20,320 --> 00:36:22,720
came out of this and uh

1021
00:36:22,720 --> 00:36:24,960
sure apple will

1022
00:36:24,960 --> 00:36:26,560
have advisories and stuff for that later

1023
00:36:26,560 --> 00:36:28,799
on

1024
00:36:28,960 --> 00:36:31,040
um

1025
00:36:31,040 --> 00:36:33,280
so for conclusion yeah maybe you're more

1026
00:36:33,280 --> 00:36:34,800
interested in fuzzing on mac now

1027
00:36:34,800 --> 00:36:36,320
hopefully there's you know lowered the

1028
00:36:36,320 --> 00:36:38,560
bar as far as that goes i haven't you

1029
00:36:38,560 --> 00:36:40,480
know going into this project

1030
00:36:40,480 --> 00:36:44,480
again i didn't know much about mac um i

1031
00:36:44,480 --> 00:36:47,040
just learned a lot just just going and

1032
00:36:47,040 --> 00:36:48,320
doing it trying to figure out a lot of

1033
00:36:48,320 --> 00:36:50,400
the converting all the linux technology

1034
00:36:50,400 --> 00:36:52,640
to mac you know

1035
00:36:52,640 --> 00:36:54,960
gdb versus lldb and

1036
00:36:54,960 --> 00:36:57,200
how to do you know various activities on

1037
00:36:57,200 --> 00:36:59,520
mac and how you know i was curious if

1038
00:36:59,520 --> 00:37:00,640
any of this stuff would actually work

1039
00:37:00,640 --> 00:37:02,079
the same way but there's actually a lot

1040
00:37:02,079 --> 00:37:04,320
of crossover between linux and mac for

1041
00:37:04,320 --> 00:37:07,200
fuzzing which made things a lot easier

1042
00:37:07,200 --> 00:37:08,800
as well

1043
00:37:08,800 --> 00:37:11,200
yeah there's uh there's some you need to

1044
00:37:11,200 --> 00:37:12,720
work around certain things turn some

1045
00:37:12,720 --> 00:37:14,560
security features off if you want to you

1046
00:37:14,560 --> 00:37:16,640
know use it as a test box

1047
00:37:16,640 --> 00:37:17,839
but there's also a lot of good tools out

1048
00:37:17,839 --> 00:37:19,760
there d-trace was a great tool to use

1049
00:37:19,760 --> 00:37:21,040
for this

1050
00:37:21,040 --> 00:37:23,359
mac itself has a has some interesting

1051
00:37:23,359 --> 00:37:25,280
tools to give you visibility

1052
00:37:25,280 --> 00:37:27,359
um there's some more frameworks out

1053
00:37:27,359 --> 00:37:29,520
there such as hook case that can give

1054
00:37:29,520 --> 00:37:30,720
you some more

1055
00:37:30,720 --> 00:37:33,920
um visibility and and things as well

1056
00:37:33,920 --> 00:37:36,400
and yeah applying some unconventional

1057
00:37:36,400 --> 00:37:38,240
techniques and fuzzing you can still get

1058
00:37:38,240 --> 00:37:40,000
some good results so still shake some

1059
00:37:40,000 --> 00:37:41,359
bugs out

1060
00:37:41,359 --> 00:37:42,560
so

1061
00:37:42,560 --> 00:37:44,079
that is the end thank you very much for

1062
00:37:44,079 --> 00:37:47,960
listening appreciate it

