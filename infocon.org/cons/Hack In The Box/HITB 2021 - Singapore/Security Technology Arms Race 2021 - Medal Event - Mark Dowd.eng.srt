1
00:00:09,760 --> 00:00:11,840
okay thanks very much uh welcome to my

2
00:00:11,840 --> 00:00:13,840
presentation uh

3
00:00:13,840 --> 00:00:15,519
i'm going to be talking

4
00:00:15,519 --> 00:00:18,000
about the security technology arms race

5
00:00:18,000 --> 00:00:19,920
in 2021 so

6
00:00:19,920 --> 00:00:22,000
let's kick it off

7
00:00:22,000 --> 00:00:23,600
i've actually been working in offensive

8
00:00:23,600 --> 00:00:25,760
security for the past 20 years or so

9
00:00:25,760 --> 00:00:27,359
doing vulnerability research it's been

10
00:00:27,359 --> 00:00:28,640
my whole career

11
00:00:28,640 --> 00:00:29,599
and

12
00:00:29,599 --> 00:00:31,439
during that time i've sort of seen it uh

13
00:00:31,439 --> 00:00:33,120
blossomed from like you know a hobby

14
00:00:33,120 --> 00:00:35,440
that we started doing into a

15
00:00:35,440 --> 00:00:37,360
you know a multi-billion dollar industry

16
00:00:37,360 --> 00:00:38,640
that's being you know billions of

17
00:00:38,640 --> 00:00:40,399
dollars being invested by offense and by

18
00:00:40,399 --> 00:00:42,559
defense uh each trying to get the upper

19
00:00:42,559 --> 00:00:45,280
hand and so this talk i wanted to sort

20
00:00:45,280 --> 00:00:48,399
of look at some of those changes um and

21
00:00:48,399 --> 00:00:50,879
where we're going from here

22
00:00:50,879 --> 00:00:52,719
um obviously offense and defense is a

23
00:00:52,719 --> 00:00:54,399
pretty broad topic there's like memory

24
00:00:54,399 --> 00:00:56,399
corruption sql insertion protocols

25
00:00:56,399 --> 00:00:57,760
there's an endless amount of things that

26
00:00:57,760 --> 00:00:59,680
we could talk about this talk is going

27
00:00:59,680 --> 00:01:01,760
to focus on offensive tooling

28
00:01:01,760 --> 00:01:03,520
particularly memory corruption exploit

29
00:01:03,520 --> 00:01:04,559
chains

30
00:01:04,559 --> 00:01:06,240
that's the thing i'm most familiar with

31
00:01:06,240 --> 00:01:07,920
and so

32
00:01:07,920 --> 00:01:09,920
i figure that's the thing i'll best be

33
00:01:09,920 --> 00:01:11,119
able to speak about

34
00:01:11,119 --> 00:01:13,360
uh some of the other security topics are

35
00:01:13,360 --> 00:01:15,280
highly relevant and i will be mentioning

36
00:01:15,280 --> 00:01:17,040
them as appropriate a little bit later

37
00:01:17,040 --> 00:01:18,640
on

38
00:01:18,640 --> 00:01:20,320
um like i said we're going to be looking

39
00:01:20,320 --> 00:01:22,960
at the past present and future of uh

40
00:01:22,960 --> 00:01:25,200
offense versus defense i want to start

41
00:01:25,200 --> 00:01:27,439
off by sort of looking at um why i think

42
00:01:27,439 --> 00:01:29,439
offense enjoyed such a large advantage

43
00:01:29,439 --> 00:01:31,200
for such a long period of time

44
00:01:31,200 --> 00:01:35,119
um and uh how they started uh pretty far

45
00:01:35,119 --> 00:01:37,040
a long way ahead of defence

46
00:01:37,040 --> 00:01:39,360
and but then what strides defenses made

47
00:01:39,360 --> 00:01:41,759
and then what happens next and i think

48
00:01:41,759 --> 00:01:43,840
the takeaway from this talk

49
00:01:43,840 --> 00:01:45,600
that i want to try and show to you guys

50
00:01:45,600 --> 00:01:47,840
is the advantage offensive has enjoyed

51
00:01:47,840 --> 00:01:50,320
for the last 20 years uh is invert

52
00:01:50,320 --> 00:01:53,360
inverting in favor of defense

53
00:01:53,360 --> 00:01:56,880
um the talk is roughly uh you know

54
00:01:56,880 --> 00:01:58,719
divided into three different sections

55
00:01:58,719 --> 00:02:01,040
i'm going to talk about uh the advantage

56
00:02:01,040 --> 00:02:02,719
that i think offense has then the

57
00:02:02,719 --> 00:02:04,320
defensive gains and then the current

58
00:02:04,320 --> 00:02:05,600
state of things and what what's

59
00:02:05,600 --> 00:02:08,239
happening in the future

60
00:02:08,239 --> 00:02:10,720
um okay so offense uh you know what are

61
00:02:10,720 --> 00:02:13,120
we defending against uh why is there an

62
00:02:13,120 --> 00:02:15,920
asymmetry basically i think offensive

63
00:02:15,920 --> 00:02:18,800
has had an asymmetry uh asymmetrical

64
00:02:18,800 --> 00:02:20,800
advantage because of the amount of

65
00:02:20,800 --> 00:02:23,440
knowledge required to do offense and the

66
00:02:23,440 --> 00:02:25,760
amount of effort required um as you guys

67
00:02:25,760 --> 00:02:27,440
know offense has thrived over the past

68
00:02:27,440 --> 00:02:29,680
20 years uh vulnerabilities come out

69
00:02:29,680 --> 00:02:32,400
with frequency and exploit kids come out

70
00:02:32,400 --> 00:02:33,599
even

71
00:02:33,599 --> 00:02:34,959
against contemporary targets with the

72
00:02:34,959 --> 00:02:37,519
latest and greatest security features uh

73
00:02:37,519 --> 00:02:39,360
you know these kits still come out and

74
00:02:39,360 --> 00:02:40,640
you think well

75
00:02:40,640 --> 00:02:42,560
what is defence doing why isn't why

76
00:02:42,560 --> 00:02:44,560
isn't anything changing but actually it

77
00:02:44,560 --> 00:02:45,280
is

78
00:02:45,280 --> 00:02:46,720
it's just that offense started with

79
00:02:46,720 --> 00:02:49,120
considerable advantages

80
00:02:49,120 --> 00:02:50,879
um so

81
00:02:50,879 --> 00:02:52,720
just going over these advantages first

82
00:02:52,720 --> 00:02:55,280
of all uh the first factor is that um

83
00:02:55,280 --> 00:02:57,120
security was never really a primary

84
00:02:57,120 --> 00:02:59,920
design concern at the outset of uh the

85
00:02:59,920 --> 00:03:01,680
internet as it was gaining in popularity

86
00:03:01,680 --> 00:03:03,360
we were putting a lot of legacy devices

87
00:03:03,360 --> 00:03:06,000
on you know if we were designing devices

88
00:03:06,000 --> 00:03:08,319
from the ground up with security um they

89
00:03:08,319 --> 00:03:10,239
would have open and attestable you know

90
00:03:10,239 --> 00:03:13,920
firmwares and um you know only allow

91
00:03:13,920 --> 00:03:15,680
signed code and trusted boot and all

92
00:03:15,680 --> 00:03:17,519
that kind of thing

93
00:03:17,519 --> 00:03:19,599
it's actually a topic that however flake

94
00:03:19,599 --> 00:03:21,680
has talked extensively about in a um

95
00:03:21,680 --> 00:03:24,239
black hat key notice several years ago

96
00:03:24,239 --> 00:03:26,560
um but basically we didn't start with

97
00:03:26,560 --> 00:03:27,920
that we didn't we were putting on

98
00:03:27,920 --> 00:03:31,440
devices that didn't have a great deal of

99
00:03:31,440 --> 00:03:34,000
like security wasn't a huge concern

100
00:03:34,000 --> 00:03:35,760
when they were designed and as a result

101
00:03:35,760 --> 00:03:38,640
of that even contemporary devices today

102
00:03:38,640 --> 00:03:41,120
still rely on various legacy design

103
00:03:41,120 --> 00:03:43,280
decisions such as monolithic kernels

104
00:03:43,280 --> 00:03:46,080
versus microkernels and things like that

105
00:03:46,080 --> 00:03:47,040
but

106
00:03:47,040 --> 00:03:49,280
to be fair often we now have retrofitted

107
00:03:49,280 --> 00:03:50,799
security around it

108
00:03:50,799 --> 00:03:52,239
to try and mitigate some of the

109
00:03:52,239 --> 00:03:53,760
shortcomings of the things that we do

110
00:03:53,760 --> 00:03:55,920
have

111
00:03:55,920 --> 00:03:58,080
the second factor is that security

112
00:03:58,080 --> 00:04:00,560
boundaries were sometimes ill-defined or

113
00:04:00,560 --> 00:04:03,360
they moved you know the internet has

114
00:04:03,360 --> 00:04:05,519
has progressed over time it's evolved

115
00:04:05,519 --> 00:04:06,879
and things that we didn't consider

116
00:04:06,879 --> 00:04:08,959
security boundaries before suddenly

117
00:04:08,959 --> 00:04:11,439
become security boundaries uh the the

118
00:04:11,439 --> 00:04:13,760
biggest example i can think of it in

119
00:04:13,760 --> 00:04:16,399
fairly recent history as lock screens so

120
00:04:16,399 --> 00:04:18,639
on you know security enthusiasts mailing

121
00:04:18,639 --> 00:04:21,600
lists uh you know 10 15 years ago

122
00:04:21,600 --> 00:04:24,240
uh perhaps 15 um

123
00:04:24,240 --> 00:04:25,759
essentially

124
00:04:25,759 --> 00:04:28,080
when it when physical access came up

125
00:04:28,080 --> 00:04:29,759
people sort of said well if if you've

126
00:04:29,759 --> 00:04:31,759
got physical access it's game over like

127
00:04:31,759 --> 00:04:33,520
you can just boot into single user mode

128
00:04:33,520 --> 00:04:36,240
it's it's not relevant um but over time

129
00:04:36,240 --> 00:04:37,919
that's become increasingly relevant and

130
00:04:37,919 --> 00:04:39,360
particularly with the prolifera

131
00:04:39,360 --> 00:04:41,440
proliferation of smart devices and

132
00:04:41,440 --> 00:04:43,520
smartphones in particular

133
00:04:43,520 --> 00:04:45,040
you know even when they came out lock

134
00:04:45,040 --> 00:04:47,040
screens were kind of um not a big

135
00:04:47,040 --> 00:04:48,880
security boundary at first but now we

136
00:04:48,880 --> 00:04:51,520
consider them you know integral to the

137
00:04:51,520 --> 00:04:54,720
security of our personal information and

138
00:04:54,720 --> 00:04:57,600
so a lot of work has been put into um to

139
00:04:57,600 --> 00:04:59,120
you know making a security boundary

140
00:04:59,120 --> 00:05:00,000
there

141
00:05:00,000 --> 00:05:01,759
uh some other examples you know

142
00:05:01,759 --> 00:05:04,320
administrators loading kernel drivers

143
00:05:04,320 --> 00:05:06,160
usually like in the past feel like

144
00:05:06,160 --> 00:05:07,680
administrators can do whatever they want

145
00:05:07,680 --> 00:05:10,560
now we're like well um maybe

146
00:05:10,560 --> 00:05:12,560
they can't modify the operating system

147
00:05:12,560 --> 00:05:14,400
easily and things like that

148
00:05:14,400 --> 00:05:17,600
and so um you know because of security

149
00:05:17,600 --> 00:05:20,160
boundaries being ill-defined offense has

150
00:05:20,160 --> 00:05:21,840
an ability to

151
00:05:21,840 --> 00:05:25,120
often you know do something bad there

152
00:05:25,120 --> 00:05:27,520
um the third factor is that a lot of

153
00:05:27,520 --> 00:05:29,199
security science was really in its

154
00:05:29,199 --> 00:05:30,800
infancy when we started getting into

155
00:05:30,800 --> 00:05:32,720
offensive research

156
00:05:32,720 --> 00:05:35,759
starting around 1995 and going forward

157
00:05:35,759 --> 00:05:37,919
we didn't really have much of an idea

158
00:05:37,919 --> 00:05:40,000
what vulnerabilities looked like we were

159
00:05:40,000 --> 00:05:41,440
only

160
00:05:41,440 --> 00:05:43,039
when memory corruption started we only

161
00:05:43,039 --> 00:05:45,039
knew about simple stack overflows with

162
00:05:45,039 --> 00:05:46,960
string manipulation

163
00:05:46,960 --> 00:05:48,479
we didn't know what a lot of attack

164
00:05:48,479 --> 00:05:51,120
strategy looks looks looked like either

165
00:05:51,120 --> 00:05:54,400
because you know we hadn't explored that

166
00:05:54,400 --> 00:05:56,400
you know that kind of um

167
00:05:56,400 --> 00:05:57,600
science so

168
00:05:57,600 --> 00:05:59,199
as time has gone on we found more and

169
00:05:59,199 --> 00:06:01,840
more um complex vulnerability patterns

170
00:06:01,840 --> 00:06:04,240
and attack strategies have become more

171
00:06:04,240 --> 00:06:07,039
and more advanced as well um and so for

172
00:06:07,039 --> 00:06:08,720
defense this was a huge advantage a

173
00:06:08,720 --> 00:06:11,199
disadvantage because you know

174
00:06:11,199 --> 00:06:12,800
they've got a code base where they don't

175
00:06:12,800 --> 00:06:14,319
know what they're protecting and they

176
00:06:14,319 --> 00:06:17,039
don't know how to protect it either

177
00:06:17,039 --> 00:06:19,840
early on when i started in offensive

178
00:06:19,840 --> 00:06:22,000
research also static analysis and

179
00:06:22,000 --> 00:06:24,479
decompilation was kind of in its infancy

180
00:06:24,479 --> 00:06:26,400
and again this was more of an uh

181
00:06:26,400 --> 00:06:28,800
disadvantage for defense and offense

182
00:06:28,800 --> 00:06:31,440
you know we rely on static analysis to

183
00:06:31,440 --> 00:06:34,240
find bugs in deployed code but also you

184
00:06:34,240 --> 00:06:36,160
know put it in ides and stuff like that

185
00:06:36,160 --> 00:06:38,720
to prevent uh developers

186
00:06:38,720 --> 00:06:40,479
having vulnerabilities in the first

187
00:06:40,479 --> 00:06:43,759
place um fuzzing tech methodologies also

188
00:06:43,759 --> 00:06:44,880
obviously we

189
00:06:44,880 --> 00:06:46,800
fuzzing was a thing that existed but

190
00:06:46,800 --> 00:06:48,319
increasingly over time that's got more

191
00:06:48,319 --> 00:06:50,960
and more advanced to look for um more

192
00:06:50,960 --> 00:06:52,720
and more complicated bugs and also to do

193
00:06:52,720 --> 00:06:54,960
it at scale um you know some of the big

194
00:06:54,960 --> 00:06:56,479
advancements there

195
00:06:56,479 --> 00:07:00,000
afl uh cluster foes um from google for

196
00:07:00,000 --> 00:07:02,000
doing upscale fuzzing and then you know

197
00:07:02,000 --> 00:07:03,840
more recently javascript

198
00:07:03,840 --> 00:07:06,080
language kind of fuzzes these are things

199
00:07:06,080 --> 00:07:09,120
that only came in around 2013 and

200
00:07:09,120 --> 00:07:10,960
onwards

201
00:07:10,960 --> 00:07:12,800
and then last of course our best

202
00:07:12,800 --> 00:07:15,039
programming practices were basically

203
00:07:15,039 --> 00:07:17,599
non-existent when a lot of the

204
00:07:17,599 --> 00:07:19,199
code was written that was basically

205
00:07:19,199 --> 00:07:21,120
governing the internet in that early

206
00:07:21,120 --> 00:07:24,160
phase and over time we have increasingly

207
00:07:24,160 --> 00:07:26,080
you know had secure development life

208
00:07:26,080 --> 00:07:28,720
cycles and so on

209
00:07:28,720 --> 00:07:30,639
the defensive ecosystem also started

210
00:07:30,639 --> 00:07:32,960
small um uh when i say defensive

211
00:07:32,960 --> 00:07:34,319
ecosystem i sort of mean patch

212
00:07:34,319 --> 00:07:36,319
management and you know

213
00:07:36,319 --> 00:07:38,319
updating um

214
00:07:38,319 --> 00:07:41,280
uh when a long time ago patch management

215
00:07:41,280 --> 00:07:43,120
wasn't particularly good it was a little

216
00:07:43,120 --> 00:07:45,759
bit haphazard and also it uh patches

217
00:07:45,759 --> 00:07:47,520
weren't really forcing themselves on you

218
00:07:47,520 --> 00:07:49,280
so uh

219
00:07:49,280 --> 00:07:51,120
you know like iphones and stuff always

220
00:07:51,120 --> 00:07:53,120
constantly update but back then you have

221
00:07:53,120 --> 00:07:56,080
to opt into updates and uh people

222
00:07:56,080 --> 00:07:57,280
you know would

223
00:07:57,280 --> 00:07:59,919
would be out of date um by sometimes

224
00:07:59,919 --> 00:08:02,080
months or years uh of course also

225
00:08:02,080 --> 00:08:03,919
deploying patches at scale has its own

226
00:08:03,919 --> 00:08:06,160
complications when if you were managing

227
00:08:06,160 --> 00:08:08,080
hundreds or thousands of computers uh

228
00:08:08,080 --> 00:08:10,879
deploying patches was very non-trivial

229
00:08:10,879 --> 00:08:14,960
um and also uh detecting um attacks and

230
00:08:14,960 --> 00:08:16,479
compromises uh particularly

231
00:08:16,479 --> 00:08:18,479
sophisticated ones was essentially

232
00:08:18,479 --> 00:08:20,560
something that has been

233
00:08:20,560 --> 00:08:24,400
non-existent until fairly recently

234
00:08:24,960 --> 00:08:27,599
um we've also had technology

235
00:08:27,599 --> 00:08:29,520
breakthroughs over time sometimes these

236
00:08:29,520 --> 00:08:31,199
undermined defensive strategies and

237
00:08:31,199 --> 00:08:33,440
assumptions the most obvious that i can

238
00:08:33,440 --> 00:08:35,679
think of is various uh encryption and

239
00:08:35,679 --> 00:08:36,719
hashing

240
00:08:36,719 --> 00:08:39,200
uh breakthroughs i put md5 there as an

241
00:08:39,200 --> 00:08:40,958
example you know we used to use md5

242
00:08:40,958 --> 00:08:44,399
hashing uh as a method of authenticating

243
00:08:44,399 --> 00:08:46,720
a message and things like that and so

244
00:08:46,720 --> 00:08:49,680
basically as these algorithms get broken

245
00:08:49,680 --> 00:08:51,519
we're like oh we've got to find out

246
00:08:51,519 --> 00:08:53,279
everywhere where we use that and you

247
00:08:53,279 --> 00:08:55,279
know go and figure out how to get rid of

248
00:08:55,279 --> 00:08:56,480
it all and what we're going to replace

249
00:08:56,480 --> 00:08:58,880
it with and so on

250
00:08:58,880 --> 00:09:00,560
but most importantly the reason

251
00:09:00,560 --> 00:09:02,720
offensive had an advantage is that their

252
00:09:02,720 --> 00:09:04,959
starting points were different

253
00:09:04,959 --> 00:09:07,200
like i said when we started we didn't

254
00:09:07,200 --> 00:09:09,920
really know what vulnerabilities looked

255
00:09:09,920 --> 00:09:13,600
like and how to protect against them but

256
00:09:13,600 --> 00:09:15,600
also the starting point was millions of

257
00:09:15,600 --> 00:09:18,240
lines of internet facing code so we sort

258
00:09:18,240 --> 00:09:21,120
of went up to the defensive industry

259
00:09:21,120 --> 00:09:23,200
such as it was at the time and said okay

260
00:09:23,200 --> 00:09:24,800
so we found out memory corruption is

261
00:09:24,800 --> 00:09:26,800
kind of bad and also we think it's quite

262
00:09:26,800 --> 00:09:28,560
common can you just look over this

263
00:09:28,560 --> 00:09:31,519
multi-million line code base and deal

264
00:09:31,519 --> 00:09:33,920
with it um and see if we have any

265
00:09:33,920 --> 00:09:35,680
problems and if we do just just manage

266
00:09:35,680 --> 00:09:36,880
them also

267
00:09:36,880 --> 00:09:38,480
no down time please because we kind of

268
00:09:38,480 --> 00:09:40,800
want to use the internet so

269
00:09:40,800 --> 00:09:41,839
um

270
00:09:41,839 --> 00:09:44,080
that's obviously a complicated position

271
00:09:44,080 --> 00:09:45,600
to fight your way out of

272
00:09:45,600 --> 00:09:49,360
um and from that sort of an adage

273
00:09:49,360 --> 00:09:51,440
that was has been thrown a lot over the

274
00:09:51,440 --> 00:09:52,959
thrown around a lot over the years has

275
00:09:52,959 --> 00:09:54,800
been defense has to be right all the

276
00:09:54,800 --> 00:09:58,560
time offense has to be right just once

277
00:09:58,560 --> 00:10:00,880
um so this basically created a perfect

278
00:10:00,880 --> 00:10:03,120
storm for offense obviously as time has

279
00:10:03,120 --> 00:10:05,440
gone on uh motivation has only increased

280
00:10:05,440 --> 00:10:08,240
for doing offense you know um being able

281
00:10:08,240 --> 00:10:11,200
to do theft at scale uh and then more

282
00:10:11,200 --> 00:10:14,399
complicated attacks uh to you know

283
00:10:14,399 --> 00:10:16,720
meddling in state affairs and elections

284
00:10:16,720 --> 00:10:18,640
as we've seen more recently

285
00:10:18,640 --> 00:10:20,720
um you know being able to hack into

286
00:10:20,720 --> 00:10:23,120
someone's phone and surveil them all

287
00:10:23,120 --> 00:10:24,480
these kind of things

288
00:10:24,480 --> 00:10:26,079
are huge motivators for different

289
00:10:26,079 --> 00:10:29,120
parties and they're relatively low cost

290
00:10:29,120 --> 00:10:30,959
um they're attacking very complicated

291
00:10:30,959 --> 00:10:32,959
software which uh for

292
00:10:32,959 --> 00:10:34,800
a great period of history has had fairly

293
00:10:34,800 --> 00:10:37,920
hazard patching and detection was poor

294
00:10:37,920 --> 00:10:38,720
so

295
00:10:38,720 --> 00:10:40,880
essentially for a lot of time for a lot

296
00:10:40,880 --> 00:10:42,640
of the history of the internet uh the

297
00:10:42,640 --> 00:10:45,279
last 20 years there's been basically low

298
00:10:45,279 --> 00:10:47,600
risk of an attacker of getting caught

299
00:10:47,600 --> 00:10:49,360
and even if they get caught there's not

300
00:10:49,360 --> 00:10:51,040
really any consequences in a lot of

301
00:10:51,040 --> 00:10:53,360
cases

302
00:10:53,360 --> 00:10:56,000
so that's where defense started from um

303
00:10:56,000 --> 00:10:57,680
pretty far back so

304
00:10:57,680 --> 00:10:58,880
however

305
00:10:58,880 --> 00:11:00,959
having said that they've come a long way

306
00:11:00,959 --> 00:11:02,399
and there's been a lot of

307
00:11:02,399 --> 00:11:04,399
uh defensive strides they've made and

308
00:11:04,399 --> 00:11:06,720
and i wanted to look at those here

309
00:11:06,720 --> 00:11:09,839
so if you consider uh what defense is

310
00:11:09,839 --> 00:11:11,680
trying to achieve and i actually went

311
00:11:11,680 --> 00:11:13,519
into the technical details of this in

312
00:11:13,519 --> 00:11:17,120
great depth in an sas keynote in 2017 uh

313
00:11:17,120 --> 00:11:18,720
the video is online so you can go check

314
00:11:18,720 --> 00:11:20,480
it out if you're interested

315
00:11:20,480 --> 00:11:23,920
um but really the defensive goals uh

316
00:11:23,920 --> 00:11:25,839
the goals that defense has is one is

317
00:11:25,839 --> 00:11:28,240
raise the cost of offensive tooling

318
00:11:28,240 --> 00:11:30,000
limit the damage of

319
00:11:30,000 --> 00:11:32,560
a successful compromise and detect a

320
00:11:32,560 --> 00:11:35,040
successful compromise

321
00:11:35,040 --> 00:11:36,079
and so

322
00:11:36,079 --> 00:11:37,279
we're going to look at each of those

323
00:11:37,279 --> 00:11:39,360
separately

324
00:11:39,360 --> 00:11:41,200
so raising the cost of

325
00:11:41,200 --> 00:11:42,399
offensive

326
00:11:42,399 --> 00:11:44,160
tooling is basically

327
00:11:44,160 --> 00:11:45,600
you can consider raising the cost in

328
00:11:45,600 --> 00:11:48,079
three broad categories uh one is the

329
00:11:48,079 --> 00:11:49,920
discovery cost which is the time it

330
00:11:49,920 --> 00:11:51,839
takes to discover you know a

331
00:11:51,839 --> 00:11:54,240
vulnerability the development cost which

332
00:11:54,240 --> 00:11:56,079
is implementing a reliable exploit from

333
00:11:56,079 --> 00:11:57,920
that vulnerability and the maintenance

334
00:11:57,920 --> 00:11:59,600
cost which is keeping the exploit

335
00:11:59,600 --> 00:12:01,839
operational uh you know for any length

336
00:12:01,839 --> 00:12:04,000
of time

337
00:12:04,000 --> 00:12:06,480
um before i go into each of those costs

338
00:12:06,480 --> 00:12:08,560
i want to make one note which is pretty

339
00:12:08,560 --> 00:12:10,639
important which is the discovery and

340
00:12:10,639 --> 00:12:13,600
development costs

341
00:12:14,079 --> 00:12:16,639
of developing offensive tooling is

342
00:12:16,639 --> 00:12:18,000
rarely linear

343
00:12:18,000 --> 00:12:19,680
most of the time what happens is there's

344
00:12:19,680 --> 00:12:21,760
a large startup cost involved in finding

345
00:12:21,760 --> 00:12:23,760
the first vulnerability

346
00:12:23,760 --> 00:12:25,839
because you're familiarizing yourself

347
00:12:25,839 --> 00:12:27,680
with the algorithms being used the

348
00:12:27,680 --> 00:12:29,200
technology being used whether that's

349
00:12:29,200 --> 00:12:31,519
protocols or you know virtual machines

350
00:12:31,519 --> 00:12:34,320
and so on um and then

351
00:12:34,320 --> 00:12:35,760
you know basically the structure of the

352
00:12:35,760 --> 00:12:37,680
code base that you're looking at so

353
00:12:37,680 --> 00:12:39,360
usually what happens is it takes a long

354
00:12:39,360 --> 00:12:41,200
time to find the first bug but then

355
00:12:41,200 --> 00:12:43,680
other bugs follow much more quickly

356
00:12:43,680 --> 00:12:46,639
similarly with the development cost

357
00:12:46,639 --> 00:12:48,480
usually what happens is you familiarize

358
00:12:48,480 --> 00:12:50,560
yourself with you know the mitigations

359
00:12:50,560 --> 00:12:52,000
that are relevant for the particular

360
00:12:52,000 --> 00:12:53,200
thing you're attacking the heap

361
00:12:53,200 --> 00:12:55,600
implementation all that kind of thing

362
00:12:55,600 --> 00:12:57,360
and then you develop techniques that you

363
00:12:57,360 --> 00:12:59,839
can use in an exploit and that takes

364
00:12:59,839 --> 00:13:02,079
quite a long time but then the second

365
00:13:02,079 --> 00:13:03,760
time you go to do it you can reuse some

366
00:13:03,760 --> 00:13:05,839
or all of these techniques and so the

367
00:13:05,839 --> 00:13:08,079
development cost becomes much lower for

368
00:13:08,079 --> 00:13:09,600
the second time round

369
00:13:09,600 --> 00:13:12,480
um however flake discussed this concept

370
00:13:12,480 --> 00:13:14,959
in depth in a 2017 keynote and i've put

371
00:13:14,959 --> 00:13:18,639
the um the link to his presentation

372
00:13:18,639 --> 00:13:21,040
where he talks about basically

373
00:13:21,040 --> 00:13:23,200
you know repeatability and the cost that

374
00:13:23,200 --> 00:13:24,880
defense and offense fares for each

375
00:13:24,880 --> 00:13:26,720
mitigation that comes out and it's a

376
00:13:26,720 --> 00:13:28,240
really good uh watch if you want to go

377
00:13:28,240 --> 00:13:30,240
check it out

378
00:13:30,240 --> 00:13:32,800
um so for example um you know we once

379
00:13:32,800 --> 00:13:35,519
had a junior employee around 2013

380
00:13:35,519 --> 00:13:36,880
and uh

381
00:13:36,880 --> 00:13:38,480
sort of said like okay

382
00:13:38,480 --> 00:13:41,199
see see if you can look at chrome and

383
00:13:41,199 --> 00:13:44,000
you know create a an rce a remote a

384
00:13:44,000 --> 00:13:46,320
remote code execution exploit

385
00:13:46,320 --> 00:13:49,519
uh so that employee found no no

386
00:13:49,519 --> 00:13:51,680
vulnerabilities for about six months

387
00:13:51,680 --> 00:13:53,199
and then following that

388
00:13:53,199 --> 00:13:54,079
um

389
00:13:54,079 --> 00:13:55,360
once their knowledge had got to a

390
00:13:55,360 --> 00:13:57,040
certain point they suddenly found like

391
00:13:57,040 --> 00:13:59,120
four vulnerabilities in two weeks

392
00:13:59,120 --> 00:14:00,079
um

393
00:14:00,079 --> 00:14:02,240
again the exploit strategy took several

394
00:14:02,240 --> 00:14:04,639
months to develop but then one week or

395
00:14:04,639 --> 00:14:06,639
less for each of the other

396
00:14:06,639 --> 00:14:08,240
exploits to develop and this is not

397
00:14:08,240 --> 00:14:10,720
unusual this is the common pattern of of

398
00:14:10,720 --> 00:14:12,560
how development happens

399
00:14:12,560 --> 00:14:14,839
of how exploit development

400
00:14:14,839 --> 00:14:18,160
happens um okay so going on to uh

401
00:14:18,160 --> 00:14:20,720
discovery and um

402
00:14:20,720 --> 00:14:22,399
and development so

403
00:14:22,399 --> 00:14:24,720
discovery costs there's many things

404
00:14:24,720 --> 00:14:26,320
involved in the cost but the two major

405
00:14:26,320 --> 00:14:29,600
contributors uh one is uh improved uh

406
00:14:29,600 --> 00:14:31,920
vendor bug discovery so vendors over

407
00:14:31,920 --> 00:14:33,680
time are getting better at discovering

408
00:14:33,680 --> 00:14:35,199
discovering vulnerabilities in their own

409
00:14:35,199 --> 00:14:36,959
products or having bug

410
00:14:36,959 --> 00:14:38,480
bounties and people submit

411
00:14:38,480 --> 00:14:40,720
vulnerabilities to them

412
00:14:40,720 --> 00:14:42,560
and be able to get rid of these bugs

413
00:14:42,560 --> 00:14:44,959
before they make it to the release or

414
00:14:44,959 --> 00:14:46,639
before it

415
00:14:46,639 --> 00:14:48,800
or it doesn't you know last very long in

416
00:14:48,800 --> 00:14:50,800
the release so as an example of that you

417
00:14:50,800 --> 00:14:52,399
know google has a hundred thousand cords

418
00:14:52,399 --> 00:14:53,839
that they're continually fuzzing chrome

419
00:14:53,839 --> 00:14:56,160
on they've filed over 29 000 bugs in

420
00:14:56,160 --> 00:14:58,560
chrome since 2016 and that's not

421
00:14:58,560 --> 00:15:00,320
including you know having specialized

422
00:15:00,320 --> 00:15:02,160
groups like project zero and stuff going

423
00:15:02,160 --> 00:15:03,680
and

424
00:15:03,680 --> 00:15:06,000
you know using different methods uh to

425
00:15:06,000 --> 00:15:08,079
find vulnerabilities as well

426
00:15:08,079 --> 00:15:09,920
um the other big

427
00:15:09,920 --> 00:15:11,920
contributing cost is mitigations that

428
00:15:11,920 --> 00:15:13,360
have been introduced that are rendering

429
00:15:13,360 --> 00:15:15,680
vulnerabilities unexploitable

430
00:15:15,680 --> 00:15:17,199
most of these are what i call early

431
00:15:17,199 --> 00:15:19,120
stage mitigations which are basically

432
00:15:19,120 --> 00:15:21,279
mitigations that are attempting to stop

433
00:15:21,279 --> 00:15:22,880
an exploit in the earliest phase of

434
00:15:22,880 --> 00:15:24,800
exploitation which is the initial memory

435
00:15:24,800 --> 00:15:26,560
corruption before it can do anything

436
00:15:26,560 --> 00:15:28,160
useful so

437
00:15:28,160 --> 00:15:29,920
you can think of like stack cookies as

438
00:15:29,920 --> 00:15:32,800
an example they attempt to detect that

439
00:15:32,800 --> 00:15:34,560
you've corrupted the stack before

440
00:15:34,560 --> 00:15:36,639
anything else can happen

441
00:15:36,639 --> 00:15:37,839
and

442
00:15:37,839 --> 00:15:40,000
having these mitigations

443
00:15:40,000 --> 00:15:41,440
means that a huge number of

444
00:15:41,440 --> 00:15:43,199
vulnerabilities instantly become

445
00:15:43,199 --> 00:15:44,959
unexploitable

446
00:15:44,959 --> 00:15:46,399
in fact i would estimate that half of

447
00:15:46,399 --> 00:15:48,160
the bugs that i found in the past

448
00:15:48,160 --> 00:15:50,320
several years were unexploitable which

449
00:15:50,320 --> 00:15:52,240
is a huge difference

450
00:15:52,240 --> 00:15:55,040
sorry compared to uh you know early in

451
00:15:55,040 --> 00:15:56,079
my career where you'd find a

452
00:15:56,079 --> 00:15:58,720
vulnerability and exploit

453
00:15:58,720 --> 00:16:00,079
the fact that it was exploitable was

454
00:16:00,079 --> 00:16:03,519
more or less a foregone conclusion

455
00:16:03,600 --> 00:16:05,680
in terms of development costs there's

456
00:16:05,680 --> 00:16:08,160
there's many of them and again i don't

457
00:16:08,160 --> 00:16:10,160
have time to go into all of them

458
00:16:10,160 --> 00:16:12,880
all the mitigations play a part in this

459
00:16:12,880 --> 00:16:14,320
but

460
00:16:14,320 --> 00:16:16,160
you know i just wanted to call out the

461
00:16:16,160 --> 00:16:18,800
most the biggest ones in my mind

462
00:16:18,800 --> 00:16:20,720
one of them is code signing when it's

463
00:16:20,720 --> 00:16:23,279
done right so ios is a perfect example

464
00:16:23,279 --> 00:16:24,160
of this

465
00:16:24,160 --> 00:16:26,160
this has an enormous recurring cost

466
00:16:26,160 --> 00:16:27,519
because

467
00:16:27,519 --> 00:16:29,839
basically you can't introduce new code

468
00:16:29,839 --> 00:16:32,160
into a system unless you defeat code

469
00:16:32,160 --> 00:16:34,720
signing and essentially

470
00:16:34,720 --> 00:16:35,680
a lot of

471
00:16:35,680 --> 00:16:37,839
exploit writers for ios

472
00:16:37,839 --> 00:16:39,680
as a result of this avoid it at all

473
00:16:39,680 --> 00:16:42,000
costs and you know attack the browser

474
00:16:42,000 --> 00:16:43,839
wherever possible like obviously there's

475
00:16:43,839 --> 00:16:45,519
a number of other reasons why attacking

476
00:16:45,519 --> 00:16:48,399
the browser is useful but um

477
00:16:48,399 --> 00:16:49,519
particularly

478
00:16:49,519 --> 00:16:50,880
one of the particularly useful things

479
00:16:50,880 --> 00:16:53,120
from a technical standpoint of attacking

480
00:16:53,120 --> 00:16:56,079
the browser is that uh they have

481
00:16:56,079 --> 00:16:58,079
uh you know a javascript runtime that

482
00:16:58,079 --> 00:17:00,720
has a jit and so they introduce new

483
00:17:00,720 --> 00:17:02,800
dynamic code at runtime

484
00:17:02,800 --> 00:17:04,959
and um so you can utilize that

485
00:17:04,959 --> 00:17:07,119
functionality to basically you know

486
00:17:07,119 --> 00:17:09,039
introduce your own code and

487
00:17:09,039 --> 00:17:10,959
um to apple's credit they've done a lot

488
00:17:10,959 --> 00:17:12,880
of work in making this a lot more

489
00:17:12,880 --> 00:17:15,280
difficult to do over recent years um but

490
00:17:15,280 --> 00:17:17,760
it's still preferable to um

491
00:17:17,760 --> 00:17:19,919
you know attacking a process that just

492
00:17:19,919 --> 00:17:22,000
doesn't have a jit at all

493
00:17:22,000 --> 00:17:24,559
the other big uh i think um defensive

494
00:17:24,559 --> 00:17:27,199
win has been uh a aslr address-based

495
00:17:27,199 --> 00:17:29,280
layout resolute res

496
00:17:29,280 --> 00:17:32,400
address space layout randomization um

497
00:17:32,400 --> 00:17:33,120
and

498
00:17:33,120 --> 00:17:34,320
basically

499
00:17:34,320 --> 00:17:36,640
the fact that this exists in its various

500
00:17:36,640 --> 00:17:37,600
forms

501
00:17:37,600 --> 00:17:39,919
means info leaking of various types is

502
00:17:39,919 --> 00:17:42,480
usually necessary to make an exploit and

503
00:17:42,480 --> 00:17:46,080
this again has a high recurring cost um

504
00:17:46,080 --> 00:17:48,000
more in more recent years i find if

505
00:17:48,000 --> 00:17:49,200
you're trying to write some kind of

506
00:17:49,200 --> 00:17:50,880
exploit

507
00:17:50,880 --> 00:17:53,600
you know bypassing the aslr component is

508
00:17:53,600 --> 00:17:56,640
often where where you spend uh most of

509
00:17:56,640 --> 00:17:59,039
your time

510
00:17:59,039 --> 00:18:00,880
the third major development cost is when

511
00:18:00,880 --> 00:18:03,600
they target techniques um

512
00:18:03,600 --> 00:18:06,320
with mitigation specifically so apple uh

513
00:18:06,320 --> 00:18:08,480
does this more than anyone else really

514
00:18:08,480 --> 00:18:10,080
what they what they usually do is

515
00:18:10,080 --> 00:18:11,919
they'll look at an exploit that comes

516
00:18:11,919 --> 00:18:14,720
out as gets released by someone and then

517
00:18:14,720 --> 00:18:16,320
they'll basically

518
00:18:16,320 --> 00:18:18,160
look at some of the techniques they use

519
00:18:18,160 --> 00:18:20,080
that made the exploit

520
00:18:20,080 --> 00:18:22,559
exploitation easier or more convenient

521
00:18:22,559 --> 00:18:24,320
and they'll see if they can mitigate

522
00:18:24,320 --> 00:18:27,600
this so one popular strategy

523
00:18:27,600 --> 00:18:28,720
[Music]

524
00:18:28,720 --> 00:18:31,200
for ios kernel exploits was you would do

525
00:18:31,200 --> 00:18:32,720
some sort of um

526
00:18:32,720 --> 00:18:34,160
you know whatever memory corruption and

527
00:18:34,160 --> 00:18:36,080
your goal would be to get a kernel task

528
00:18:36,080 --> 00:18:37,520
into your process

529
00:18:37,520 --> 00:18:39,360
and a kernel task allowed you to read

530
00:18:39,360 --> 00:18:41,840
and write memory

531
00:18:41,840 --> 00:18:44,480
memory so uh they thought that was a

532
00:18:44,480 --> 00:18:46,160
little too convenient and they started

533
00:18:46,160 --> 00:18:48,080
trying to mitigate that and then people

534
00:18:48,080 --> 00:18:51,120
uh used alternative techniques um such

535
00:18:51,120 --> 00:18:53,039
as you know

536
00:18:53,039 --> 00:18:54,960
creating fake kernel tasks and so on and

537
00:18:54,960 --> 00:18:56,640
then apple tries to mitigate that

538
00:18:56,640 --> 00:18:59,360
technique so as the offensive research

539
00:18:59,360 --> 00:19:01,360
becomes public um

540
00:19:01,360 --> 00:19:02,559
uh then

541
00:19:02,559 --> 00:19:03,919
you know

542
00:19:03,919 --> 00:19:05,760
targeting those mitigation

543
00:19:05,760 --> 00:19:07,120
making mitigations to target those

544
00:19:07,120 --> 00:19:08,720
techniques specifically

545
00:19:08,720 --> 00:19:10,240
makes it so that you have to keep

546
00:19:10,240 --> 00:19:11,840
reinventing the wheel for each exploit

547
00:19:11,840 --> 00:19:13,120
that you do

548
00:19:13,120 --> 00:19:15,600
so all of these incur a potentially high

549
00:19:15,600 --> 00:19:18,480
recurring cost and take away from what i

550
00:19:18,480 --> 00:19:20,240
was saying earlier about developing a

551
00:19:20,240 --> 00:19:21,760
technique once and being able to reuse

552
00:19:21,760 --> 00:19:22,480
it

553
00:19:22,480 --> 00:19:24,080
if you have to reinvent techniques all

554
00:19:24,080 --> 00:19:26,240
the time the cost of each individual

555
00:19:26,240 --> 00:19:29,200
exploit is high rather than having one

556
00:19:29,200 --> 00:19:31,440
that costs a lot and then the next few

557
00:19:31,440 --> 00:19:34,480
costing not very much

558
00:19:35,679 --> 00:19:37,919
lastly maintenance is also an ongoing

559
00:19:37,919 --> 00:19:39,840
cost and it seems to be rarely discussed

560
00:19:39,840 --> 00:19:41,440
in um in

561
00:19:41,440 --> 00:19:43,440
you know public discourse

562
00:19:43,440 --> 00:19:46,400
but maintenance is kind of a big deal um

563
00:19:46,400 --> 00:19:48,799
software release is very frequent uh you

564
00:19:48,799 --> 00:19:50,799
know major software comes out every four

565
00:19:50,799 --> 00:19:53,600
to six weeks uh you know for like web

566
00:19:53,600 --> 00:19:55,120
browsers and for operating systems

567
00:19:55,120 --> 00:19:57,120
sometimes more aggressively

568
00:19:57,120 --> 00:19:59,360
um and keeping an exploit operational is

569
00:19:59,360 --> 00:20:00,480
a lot of work

570
00:20:00,480 --> 00:20:02,000
for each um

571
00:20:02,000 --> 00:20:04,080
for each vulnerability for each exploit

572
00:20:04,080 --> 00:20:06,240
that comes out for each sorry patch that

573
00:20:06,240 --> 00:20:07,200
comes out

574
00:20:07,200 --> 00:20:09,039
um keeping an exploit operational might

575
00:20:09,039 --> 00:20:11,120
involve doing nothing it might involve

576
00:20:11,120 --> 00:20:12,799
changing a few offsets and not doing

577
00:20:12,799 --> 00:20:16,559
much work or it might involve rewriting

578
00:20:16,559 --> 00:20:18,640
parts of the exploit or even the whole

579
00:20:18,640 --> 00:20:20,240
exploit if you know a major new

580
00:20:20,240 --> 00:20:22,720
mitigation is introduced or if there's a

581
00:20:22,720 --> 00:20:24,159
re-implementation of the heap or

582
00:20:24,159 --> 00:20:25,520
something like that

583
00:20:25,520 --> 00:20:28,240
um and so

584
00:20:28,400 --> 00:20:30,559
maintaining an exploit um

585
00:20:30,559 --> 00:20:32,559
over any significant period of time is

586
00:20:32,559 --> 00:20:35,360
quite a lot of work and this is why

587
00:20:35,360 --> 00:20:37,760
again in public discourse people often

588
00:20:37,760 --> 00:20:40,480
talk about organization stockpiling and

589
00:20:40,480 --> 00:20:42,080
i think it's largely a myth um

590
00:20:42,080 --> 00:20:44,400
specifically because of this cost

591
00:20:44,400 --> 00:20:46,320
if you think about it you know if you

592
00:20:46,320 --> 00:20:48,640
wanted to stockpile stay chrome exploits

593
00:20:48,640 --> 00:20:50,559
and you had eight of them or something

594
00:20:50,559 --> 00:20:52,480
um then basically that means every four

595
00:20:52,480 --> 00:20:54,720
to six weeks you potentially have to do

596
00:20:54,720 --> 00:20:56,320
a significant amount of maintenance on

597
00:20:56,320 --> 00:20:58,080
eight different exploits and so you

598
00:20:58,080 --> 00:20:59,280
think okay well

599
00:20:59,280 --> 00:21:01,600
i'll just borrow one technique and use

600
00:21:01,600 --> 00:21:03,919
it in all of them but if you do that and

601
00:21:03,919 --> 00:21:06,480
then that technique is broken then all

602
00:21:06,480 --> 00:21:08,559
of your exploits stop being operational

603
00:21:08,559 --> 00:21:10,640
at once which means

604
00:21:10,640 --> 00:21:12,080
you know why you're stockpiling in the

605
00:21:12,080 --> 00:21:13,200
first place

606
00:21:13,200 --> 00:21:14,080
um

607
00:21:14,080 --> 00:21:15,840
and so

608
00:21:15,840 --> 00:21:19,520
yeah um i think that's uh kind of a myth

609
00:21:19,520 --> 00:21:20,400
um

610
00:21:20,400 --> 00:21:21,679
the last thing i'll say about raising

611
00:21:21,679 --> 00:21:23,840
costs is that isolation um and i'm

612
00:21:23,840 --> 00:21:25,520
talking about sandboxing here is

613
00:21:25,520 --> 00:21:26,880
actually the primary cause of

614
00:21:26,880 --> 00:21:28,799
dramatically increased costs in

615
00:21:28,799 --> 00:21:31,280
offensive memory corruption exploits

616
00:21:31,280 --> 00:21:33,360
because it has a multiplier effect

617
00:21:33,360 --> 00:21:34,799
all of the things i talked about with

618
00:21:34,799 --> 00:21:37,039
regards to discovery and development and

619
00:21:37,039 --> 00:21:40,000
maintenance costs is multiplied if you

620
00:21:40,000 --> 00:21:41,600
have

621
00:21:41,600 --> 00:21:42,880
originally you would just have an

622
00:21:42,880 --> 00:21:44,480
exploit and you would write it get

623
00:21:44,480 --> 00:21:45,760
access to a system and you could do

624
00:21:45,760 --> 00:21:46,960
whatever you wanted

625
00:21:46,960 --> 00:21:49,360
then sandboxes came along and you're

626
00:21:49,360 --> 00:21:51,280
like okay well um

627
00:21:51,280 --> 00:21:53,280
i need an exploit to get access to a

628
00:21:53,280 --> 00:21:55,520
system and then usually what you do is

629
00:21:55,520 --> 00:21:56,640
have

630
00:21:56,640 --> 00:21:58,960
another exploit to go from

631
00:21:58,960 --> 00:22:00,480
your sandbox environment straight to

632
00:22:00,480 --> 00:22:03,120
kernel um so then you would have to have

633
00:22:03,120 --> 00:22:04,720
just two different discoveries and two

634
00:22:04,720 --> 00:22:05,919
different development costs and two

635
00:22:05,919 --> 00:22:07,039
different maintenance

636
00:22:07,039 --> 00:22:08,000
costs

637
00:22:08,000 --> 00:22:09,120
and then

638
00:22:09,120 --> 00:22:09,840
as

639
00:22:09,840 --> 00:22:12,080
time has progressed those sandboxes that

640
00:22:12,080 --> 00:22:14,640
have been introduced uh increasingly get

641
00:22:14,640 --> 00:22:16,480
more and more restrictive so then you

642
00:22:16,480 --> 00:22:19,120
might have to say okay now i need an rce

643
00:22:19,120 --> 00:22:20,720
then i need to break out of the sandbox

644
00:22:20,720 --> 00:22:23,200
specifically and then do a kernel thing

645
00:22:23,200 --> 00:22:24,640
so now you have

646
00:22:24,640 --> 00:22:26,480
three discoveries three developments and

647
00:22:26,480 --> 00:22:28,880
three maintenance and um of course the

648
00:22:28,880 --> 00:22:31,760
other problem is if any one of these uh

649
00:22:31,760 --> 00:22:34,080
in the chain becomes inoperational for

650
00:22:34,080 --> 00:22:35,919
some reason often the whole chain is

651
00:22:35,919 --> 00:22:38,720
rendered useless

652
00:22:38,720 --> 00:22:40,720
so as a result um the cost of

653
00:22:40,720 --> 00:22:43,600
exploitation has risen dramatically and

654
00:22:43,600 --> 00:22:46,159
really um most players have been priced

655
00:22:46,159 --> 00:22:47,520
out of the market to a significant

656
00:22:47,520 --> 00:22:48,640
degree

657
00:22:48,640 --> 00:22:50,880
and i'll give an example of that um

658
00:22:50,880 --> 00:22:52,320
there's no real market for stolen

659
00:22:52,320 --> 00:22:53,520
iphones

660
00:22:53,520 --> 00:22:55,039
and

661
00:22:55,039 --> 00:22:56,799
you may wonder why i bring that up and

662
00:22:56,799 --> 00:22:58,400
if you can but if you consider the

663
00:22:58,400 --> 00:23:00,400
average person's threat model

664
00:23:00,400 --> 00:23:02,000
they're carrying around a highly

665
00:23:02,000 --> 00:23:03,679
desirable piece of technology in their

666
00:23:03,679 --> 00:23:05,679
pocket for two thousand dollars that

667
00:23:05,679 --> 00:23:08,240
cost about two thousand dollars and so

668
00:23:08,240 --> 00:23:09,280
of course they'd be concerned that

669
00:23:09,280 --> 00:23:11,280
someone will steal it uh in order to

670
00:23:11,280 --> 00:23:13,039
resell it or whatever

671
00:23:13,039 --> 00:23:16,080
um but apple has made it so difficult

672
00:23:16,080 --> 00:23:17,440
to um

673
00:23:17,440 --> 00:23:19,440
to be able to reset it without

674
00:23:19,440 --> 00:23:23,600
authentication from the original user

675
00:23:23,600 --> 00:23:25,919
and also provided tools to find lost

676
00:23:25,919 --> 00:23:28,080
phones and stuff like that that it is

677
00:23:28,080 --> 00:23:30,559
simply not worth it uh for the most part

678
00:23:30,559 --> 00:23:33,520
for people to steal iphones and so you

679
00:23:33,520 --> 00:23:35,520
basically don't worry about it

680
00:23:35,520 --> 00:23:36,640
furthermore

681
00:23:36,640 --> 00:23:38,240
even if you lose your phone you leave it

682
00:23:38,240 --> 00:23:40,960
in a bar or something like that and some

683
00:23:40,960 --> 00:23:43,360
stranger finds it the the chances of

684
00:23:43,360 --> 00:23:44,799
them being able to unlock it are

685
00:23:44,799 --> 00:23:46,400
practically zero

686
00:23:46,400 --> 00:23:48,799
that the chain of um exploits that you

687
00:23:48,799 --> 00:23:50,799
need to be able to you know break pin

688
00:23:50,799 --> 00:23:52,559
authentication and then get access to

689
00:23:52,559 --> 00:23:54,640
the the data that was

690
00:23:54,640 --> 00:23:57,360
uh you know encrypted is uh quite an

691
00:23:57,360 --> 00:23:59,600
extensive and you know impressive piece

692
00:23:59,600 --> 00:24:01,200
of uh

693
00:24:01,200 --> 00:24:03,440
uh you know offensive tooling and has

694
00:24:03,440 --> 00:24:05,200
cost someone like a million dollars or

695
00:24:05,200 --> 00:24:06,080
more

696
00:24:06,080 --> 00:24:07,279
to develop

697
00:24:07,279 --> 00:24:09,440
um to the point where even parties that

698
00:24:09,440 --> 00:24:11,200
are interested in getting this like

699
00:24:11,200 --> 00:24:12,799
significantly interested like law

700
00:24:12,799 --> 00:24:15,760
enforcement uh might have trouble in you

701
00:24:15,760 --> 00:24:17,919
know retrieving this data obviously

702
00:24:17,919 --> 00:24:19,679
things like celebrate exist and

703
00:24:19,679 --> 00:24:21,200
grayshift where

704
00:24:21,200 --> 00:24:23,760
some law enforcement has access to it

705
00:24:23,760 --> 00:24:25,919
but even the people with those tools you

706
00:24:25,919 --> 00:24:27,520
know sometimes those tools don't work

707
00:24:27,520 --> 00:24:29,919
against all of the most recent devices

708
00:24:29,919 --> 00:24:31,919
and sometimes there's you know other

709
00:24:31,919 --> 00:24:33,440
circumstances such as you've got a long

710
00:24:33,440 --> 00:24:37,279
passcode where it becomes problematic

711
00:24:37,440 --> 00:24:39,279
the other thing defense tries to do is

712
00:24:39,279 --> 00:24:40,960
limit the damage of successful

713
00:24:40,960 --> 00:24:43,919
compromise so

714
00:24:43,919 --> 00:24:45,440
we've already talked about offensive

715
00:24:45,440 --> 00:24:47,440
capabilities costing more but actually

716
00:24:47,440 --> 00:24:49,600
over time they're starting to do less as

717
00:24:49,600 --> 00:24:50,640
well

718
00:24:50,640 --> 00:24:52,799
here's an example of

719
00:24:52,799 --> 00:24:55,679
you know a typical iphone chain um that

720
00:24:55,679 --> 00:24:57,520
you would see at various different

721
00:24:57,520 --> 00:25:00,559
points in the last several years so in

722
00:25:00,559 --> 00:25:04,000
2014 you could write an iphone chain and

723
00:25:04,000 --> 00:25:06,159
basically get kernel code execution you

724
00:25:06,159 --> 00:25:08,080
could inject new code after that into

725
00:25:08,080 --> 00:25:10,240
user mode and retrieve all the data no

726
00:25:10,240 --> 00:25:11,760
problem

727
00:25:11,760 --> 00:25:14,799
in 2017 kernel code execution basically

728
00:25:14,799 --> 00:25:16,640
became not possible because of a

729
00:25:16,640 --> 00:25:19,120
mitigation they introduced called ktri

730
00:25:19,120 --> 00:25:19,919
and

731
00:25:19,919 --> 00:25:21,840
so instead you would get read and write

732
00:25:21,840 --> 00:25:23,679
access to kernel memory which is still

733
00:25:23,679 --> 00:25:26,400
powerful but not quite as powerful

734
00:25:26,400 --> 00:25:28,799
and you could possibly do kernel rob but

735
00:25:28,799 --> 00:25:30,080
it was painful

736
00:25:30,080 --> 00:25:31,919
you could also still inject code into

737
00:25:31,919 --> 00:25:33,279
user mode

738
00:25:33,279 --> 00:25:35,520
but some data was inaccessible if the

739
00:25:35,520 --> 00:25:36,880
phone was locked

740
00:25:36,880 --> 00:25:38,960
fast forward again to 2020

741
00:25:38,960 --> 00:25:41,760
now you a typical iphone chain will get

742
00:25:41,760 --> 00:25:43,840
read write access to kernel memory but

743
00:25:43,840 --> 00:25:46,400
only a restricted amount of it there's a

744
00:25:46,400 --> 00:25:48,559
large part of kernel memory with uh you

745
00:25:48,559 --> 00:25:50,480
know um critical data structures related

746
00:25:50,480 --> 00:25:52,240
to memory management that even if you

747
00:25:52,240 --> 00:25:53,600
get read and write access to kernel

748
00:25:53,600 --> 00:25:55,679
memory you can't access because of a

749
00:25:55,679 --> 00:25:57,760
mitigation called ppl

750
00:25:57,760 --> 00:26:00,159
also because of another mitigation

751
00:26:00,159 --> 00:26:01,600
called um pac

752
00:26:01,600 --> 00:26:03,919
kernel rock is largely infeasible so you

753
00:26:03,919 --> 00:26:06,799
can't execute code you can't do rob

754
00:26:06,799 --> 00:26:07,919
and

755
00:26:07,919 --> 00:26:10,240
largely you can't do even use a mode

756
00:26:10,240 --> 00:26:12,640
code injection because the structures

757
00:26:12,640 --> 00:26:14,960
you need to manipulate are protected in

758
00:26:14,960 --> 00:26:17,039
a special part of kernel memory

759
00:26:17,039 --> 00:26:18,080
and

760
00:26:18,080 --> 00:26:19,520
in order to do any of those things you

761
00:26:19,520 --> 00:26:21,039
need an additional vulnerability which

762
00:26:21,039 --> 00:26:23,679
is getting around that ppl mitigation

763
00:26:23,679 --> 00:26:26,159
that i mentioned before

764
00:26:26,159 --> 00:26:28,720
so the modern iphone browser actually

765
00:26:28,720 --> 00:26:30,559
has significant limitations compared to

766
00:26:30,559 --> 00:26:32,080
previous ones

767
00:26:32,080 --> 00:26:33,360
you know they get limited access to

768
00:26:33,360 --> 00:26:36,159
kernel memory in general um

769
00:26:36,159 --> 00:26:38,000
they can't interject into other

770
00:26:38,000 --> 00:26:40,960
processes without ppl bypasses and um

771
00:26:40,960 --> 00:26:41,919
even

772
00:26:41,919 --> 00:26:43,360
and another thing that i didn't mention

773
00:26:43,360 --> 00:26:45,520
on the previous slide was retaining

774
00:26:45,520 --> 00:26:47,760
access across reboot is very challenging

775
00:26:47,760 --> 00:26:49,279
because of code signing which i talked

776
00:26:49,279 --> 00:26:50,640
about earlier

777
00:26:50,640 --> 00:26:51,679
um

778
00:26:51,679 --> 00:26:53,360
and retaining access is becoming

779
00:26:53,360 --> 00:26:55,200
increasing is increasingly important

780
00:26:55,200 --> 00:26:57,520
because as more and more time goes on

781
00:26:57,520 --> 00:26:59,200
you know you just think okay well if i

782
00:26:59,200 --> 00:27:00,799
can't retain access i'll just hack them

783
00:27:00,799 --> 00:27:01,679
again

784
00:27:01,679 --> 00:27:03,279
you know when they reboot the phone but

785
00:27:03,279 --> 00:27:06,159
really um as encryption becomes more and

786
00:27:06,159 --> 00:27:06,960
more

787
00:27:06,960 --> 00:27:08,640
ubiquitous it becomes more and more

788
00:27:08,640 --> 00:27:10,400
difficult uh to be able to launch

789
00:27:10,400 --> 00:27:12,880
attacks like um you can

790
00:27:12,880 --> 00:27:14,240
because you can't do men in the middle

791
00:27:14,240 --> 00:27:16,240
attacks and stuff so easily maybe you

792
00:27:16,240 --> 00:27:17,679
need to fish them and that might work

793
00:27:17,679 --> 00:27:19,120
once but if you need to fish them every

794
00:27:19,120 --> 00:27:20,399
time they reboot i think they're going

795
00:27:20,399 --> 00:27:23,520
to start to get suspicious

796
00:27:24,000 --> 00:27:25,760
the last thing i want to talk about for

797
00:27:25,760 --> 00:27:27,600
defensive strides is detecting

798
00:27:27,600 --> 00:27:29,919
successful compromise so

799
00:27:29,919 --> 00:27:32,159
um detection has historically been very

800
00:27:32,159 --> 00:27:32,960
poor

801
00:27:32,960 --> 00:27:34,960
early av you you could basically

802
00:27:34,960 --> 00:27:37,360
download it if you're an attacker figure

803
00:27:37,360 --> 00:27:39,039
out the signatures they have work around

804
00:27:39,039 --> 00:27:39,919
them

805
00:27:39,919 --> 00:27:41,520
um furthermore

806
00:27:41,520 --> 00:27:43,919
you could just get kernel access and

807
00:27:43,919 --> 00:27:45,840
more or less turn off a b

808
00:27:45,840 --> 00:27:47,840
um but vendors are starting to take

809
00:27:47,840 --> 00:27:50,159
advantage of scale to detect anomalies

810
00:27:50,159 --> 00:27:52,480
you know um people uh

811
00:27:52,480 --> 00:27:54,000
some of the major vendors have their

812
00:27:54,000 --> 00:27:55,840
software deployed across millions and

813
00:27:55,840 --> 00:27:57,360
millions of nodes and they can collect

814
00:27:57,360 --> 00:27:58,799
telemetry data

815
00:27:58,799 --> 00:28:00,000
and

816
00:28:00,000 --> 00:28:02,399
you know discover anomalies or like you

817
00:28:02,399 --> 00:28:04,080
know inconsistent patterns or unusual

818
00:28:04,080 --> 00:28:05,919
crashes and things like that and from

819
00:28:05,919 --> 00:28:07,600
there sort of um

820
00:28:07,600 --> 00:28:09,600
infer that uh you know a compromise has

821
00:28:09,600 --> 00:28:10,640
happened or perhaps something's

822
00:28:10,640 --> 00:28:12,559
happening worth looking into

823
00:28:12,559 --> 00:28:15,440
av vendors do that the the you know some

824
00:28:15,440 --> 00:28:17,440
of the operating system vendors do that

825
00:28:17,440 --> 00:28:20,000
and um you know cloud environments such

826
00:28:20,000 --> 00:28:23,039
as microsoft 365 actually has you know

827
00:28:23,039 --> 00:28:24,559
microsoft defender for endpoint that

828
00:28:24,559 --> 00:28:26,159
automatically looks for

829
00:28:26,159 --> 00:28:28,000
uh anomalies

830
00:28:28,000 --> 00:28:31,200
in in their cloud environment

831
00:28:31,200 --> 00:28:33,200
um in addition to those you have groups

832
00:28:33,200 --> 00:28:35,760
like google's threat analysis group um

833
00:28:35,760 --> 00:28:38,000
which you know is a group of people that

834
00:28:38,000 --> 00:28:40,000
are dedicated to um

835
00:28:40,000 --> 00:28:41,279
uh you know

836
00:28:41,279 --> 00:28:43,440
sort of pioneering more um

837
00:28:43,440 --> 00:28:45,760
sophisticated techniques in order to try

838
00:28:45,760 --> 00:28:47,919
and detect malware

839
00:28:47,919 --> 00:28:49,279
in addition to

840
00:28:49,279 --> 00:28:51,039
using scale

841
00:28:51,039 --> 00:28:53,440
and so the result is we basically have

842
00:28:53,440 --> 00:28:55,679
increasingly sophisticated apt kits

843
00:28:55,679 --> 00:28:57,440
being discovered in the wild

844
00:28:57,440 --> 00:29:00,399
initially you know most of them the apt

845
00:29:00,399 --> 00:29:02,240
kits being discovered were limited to

846
00:29:02,240 --> 00:29:04,320
desktop and server malware because

847
00:29:04,320 --> 00:29:06,320
basically windows and other desktop

848
00:29:06,320 --> 00:29:09,919
operating systems are more inspectable

849
00:29:09,919 --> 00:29:10,799
and

850
00:29:10,799 --> 00:29:12,880
more easy to deal with but now more and

851
00:29:12,880 --> 00:29:14,720
more um as this

852
00:29:14,720 --> 00:29:16,640
sophistication of detection methods

853
00:29:16,640 --> 00:29:18,799
improves mobile malware is starting to

854
00:29:18,799 --> 00:29:20,559
become discovered with increasingly

855
00:29:20,559 --> 00:29:22,640
increasing frequency uh if you're

856
00:29:22,640 --> 00:29:23,919
interested in this there's an in the

857
00:29:23,919 --> 00:29:25,919
wild database that maddie stone from

858
00:29:25,919 --> 00:29:27,840
project zero maintains

859
00:29:27,840 --> 00:29:30,960
um and it basically uh catalogs all of

860
00:29:30,960 --> 00:29:32,720
the vulnerabilities all the exploits

861
00:29:32,720 --> 00:29:34,720
that have been found in the wild

862
00:29:34,720 --> 00:29:35,840
by year

863
00:29:35,840 --> 00:29:38,880
and if you look at that database um

864
00:29:38,880 --> 00:29:42,080
you know back in 2018 and earlier

865
00:29:42,080 --> 00:29:44,000
basically all of the in the wild bugs

866
00:29:44,000 --> 00:29:46,559
were targeting windows and also didn't

867
00:29:46,559 --> 00:29:47,840
include chrome

868
00:29:47,840 --> 00:29:50,559
um as sophistication of detection you

869
00:29:50,559 --> 00:29:53,279
know improved um you go forward to 2021

870
00:29:53,279 --> 00:29:56,480
and there's like several ios several

871
00:29:56,480 --> 00:29:59,360
android and chrome vulnerabilities being

872
00:29:59,360 --> 00:30:01,919
detected now

873
00:30:01,919 --> 00:30:03,440
so i think this is leading to a power

874
00:30:03,440 --> 00:30:04,960
inversion and this is where i wanted to

875
00:30:04,960 --> 00:30:07,120
spend sort of most of the talk

876
00:30:07,120 --> 00:30:09,520
um talking about um you know where we're

877
00:30:09,520 --> 00:30:12,000
at now and uh what's

878
00:30:12,000 --> 00:30:13,600
what we're going to what offense and

879
00:30:13,600 --> 00:30:15,679
defenses are going to do in the future

880
00:30:15,679 --> 00:30:19,039
and who will gain the upper hand

881
00:30:19,039 --> 00:30:20,000
so

882
00:30:20,000 --> 00:30:21,679
this is basically divided into three

883
00:30:21,679 --> 00:30:23,919
parts um and i'll explain those parts as

884
00:30:23,919 --> 00:30:26,000
we go through them

885
00:30:26,000 --> 00:30:26,960
uh

886
00:30:26,960 --> 00:30:29,760
so memory corruption

887
00:30:29,760 --> 00:30:32,240
memory corruption as i said it's still a

888
00:30:32,240 --> 00:30:34,480
very powerful tool but um it's starting

889
00:30:34,480 --> 00:30:36,399
to erode in effectiveness

890
00:30:36,399 --> 00:30:39,279
um yes you saw with the iphone example

891
00:30:39,279 --> 00:30:41,520
uh it can basically do less and cost

892
00:30:41,520 --> 00:30:45,200
more um sandboxing first of all is

893
00:30:45,200 --> 00:30:46,720
particularly effective

894
00:30:46,720 --> 00:30:48,559
um again

895
00:30:48,559 --> 00:30:50,159
sandboxes are designed to constrain

896
00:30:50,159 --> 00:30:53,520
something to limited privileges but uh a

897
00:30:53,520 --> 00:30:56,960
huge effect of sandboxing um one is they

898
00:30:56,960 --> 00:30:58,640
like i said they increasingly get more

899
00:30:58,640 --> 00:31:00,399
and more restrictive which makes them

900
00:31:00,399 --> 00:31:01,840
increasingly more and more of a problem

901
00:31:01,840 --> 00:31:05,039
for attackers and second of all that um

902
00:31:05,039 --> 00:31:07,200
even if you can break them you have to

903
00:31:07,200 --> 00:31:09,679
be able to maintain uh that over a

904
00:31:09,679 --> 00:31:11,200
period of time so you might be able to

905
00:31:11,200 --> 00:31:12,960
break it every now and then but not

906
00:31:12,960 --> 00:31:14,880
necessarily continuously where you have

907
00:31:14,880 --> 00:31:17,679
to keep finding new flaws and new ways

908
00:31:17,679 --> 00:31:20,240
to to get around the sandbox

909
00:31:20,240 --> 00:31:22,480
so they're actually quite effective

910
00:31:22,480 --> 00:31:23,200
the

911
00:31:23,200 --> 00:31:25,600
second advantage that defense have is on

912
00:31:25,600 --> 00:31:27,200
cfi which stands for control flow

913
00:31:27,200 --> 00:31:30,080
integrity is also increasingly effective

914
00:31:30,080 --> 00:31:32,640
to prevent execution um

915
00:31:32,640 --> 00:31:35,519
the ios example i gave is uh they used

916
00:31:35,519 --> 00:31:38,320
ktrr which was a hardware mechanism uh

917
00:31:38,320 --> 00:31:41,039
combined with pac which is um

918
00:31:41,039 --> 00:31:43,519
their cfi defense and these and

919
00:31:43,519 --> 00:31:44,640
basically

920
00:31:44,640 --> 00:31:47,360
um this is increasingly effective at

921
00:31:47,360 --> 00:31:50,080
preventing you from doing you know rop

922
00:31:50,080 --> 00:31:52,480
um and uh being able to execute

923
00:31:52,480 --> 00:31:53,760
arbitrary code

924
00:31:53,760 --> 00:31:54,720
uh

925
00:31:54,720 --> 00:31:57,279
so in the ios kernel example now we

926
00:31:57,279 --> 00:31:59,120
basically are restricted to read and

927
00:31:59,120 --> 00:32:00,320
write

928
00:32:00,320 --> 00:32:02,000
you know reading and writing

929
00:32:02,000 --> 00:32:04,720
uh kernel memory and i expect this trend

930
00:32:04,720 --> 00:32:06,799
to follow with other kernels and user

931
00:32:06,799 --> 00:32:09,918
mode environments as well

932
00:32:11,679 --> 00:32:12,399
so

933
00:32:12,399 --> 00:32:14,399
in order to illustrate that you know

934
00:32:14,399 --> 00:32:17,519
typically again i talked about uh the

935
00:32:17,519 --> 00:32:20,399
anatomy of exploitate you know exploits

936
00:32:20,399 --> 00:32:24,000
in a lot more depth in 2017 talk but um

937
00:32:24,000 --> 00:32:26,159
typically a memory corruption exploit

938
00:32:26,159 --> 00:32:28,320
can consist of the early stage

939
00:32:28,320 --> 00:32:29,760
exploitation which is the initial

940
00:32:29,760 --> 00:32:32,399
corruption where you first put a program

941
00:32:32,399 --> 00:32:34,000
into an invalid state

942
00:32:34,000 --> 00:32:35,679
the second stage is

943
00:32:35,679 --> 00:32:37,679
where you sort of um

944
00:32:37,679 --> 00:32:40,159
leverage that invalid state into

945
00:32:40,159 --> 00:32:41,760
hijacking control flow and then the

946
00:32:41,760 --> 00:32:43,279
third is you put down your payload to do

947
00:32:43,279 --> 00:32:44,880
whatever you want

948
00:32:44,880 --> 00:32:46,240
um now

949
00:32:46,240 --> 00:32:47,600
increasingly

950
00:32:47,600 --> 00:32:49,760
what we're doing is having exploits that

951
00:32:49,760 --> 00:32:51,600
get arbitrary memory read write as

952
00:32:51,600 --> 00:32:53,200
opposed to getting code execution

953
00:32:53,200 --> 00:32:56,640
because code execution is uh prohibitive

954
00:32:56,640 --> 00:32:59,120
in uh in many environments

955
00:32:59,120 --> 00:33:00,000
so

956
00:33:00,000 --> 00:33:02,880
in that sense um data data only attacks

957
00:33:02,880 --> 00:33:05,519
are here um again a lot of the times you

958
00:33:05,519 --> 00:33:07,840
can gain code execution but over time

959
00:33:07,840 --> 00:33:09,360
increasingly that's becoming more and

960
00:33:09,360 --> 00:33:12,080
more restrictive and more and more um

961
00:33:12,080 --> 00:33:13,760
attackers are sort of going to do data

962
00:33:13,760 --> 00:33:15,919
only attacks

963
00:33:15,919 --> 00:33:18,080
the third defensive advantage is a data

964
00:33:18,080 --> 00:33:20,320
point pointer integrity and admittedly i

965
00:33:20,320 --> 00:33:22,159
totally made up this acronym i don't

966
00:33:22,159 --> 00:33:24,640
know or i couldn't find an acronym to

967
00:33:24,640 --> 00:33:26,640
accurately describe

968
00:33:26,640 --> 00:33:29,039
data pack and the like but um

969
00:33:29,039 --> 00:33:31,440
but uh i'll call it dpi here data

970
00:33:31,440 --> 00:33:33,679
pointer integrity has landed so

971
00:33:33,679 --> 00:33:37,039
ios has data pack um but it's you know

972
00:33:37,039 --> 00:33:38,960
part of the arm spec and it's only a

973
00:33:38,960 --> 00:33:40,880
matter of time until other operating

974
00:33:40,880 --> 00:33:42,960
systems and uh

975
00:33:42,960 --> 00:33:45,600
you know devices uh follow suit with uh

976
00:33:45,600 --> 00:33:48,880
very similar uh strategies

977
00:33:48,880 --> 00:33:50,799
uh and and following that memory tag

978
00:33:50,799 --> 00:33:52,559
which i'll talk about in a minute so

979
00:33:52,559 --> 00:33:54,399
data pack is sort of exactly the same as

980
00:33:54,399 --> 00:33:56,480
pack

981
00:33:56,480 --> 00:33:58,880
basically how they work is um when you

982
00:33:58,880 --> 00:34:00,880
store a pointer in memory inst instead

983
00:34:00,880 --> 00:34:03,360
of just storing a raw pointer

984
00:34:03,360 --> 00:34:05,760
they will take a hash of this pointer

985
00:34:05,760 --> 00:34:07,840
combined with a secret key

986
00:34:07,840 --> 00:34:09,440
and then possibly another value called a

987
00:34:09,440 --> 00:34:10,800
discriminator

988
00:34:10,800 --> 00:34:12,560
and then they'll put part of that hash

989
00:34:12,560 --> 00:34:15,679
in the top unused bits

990
00:34:15,679 --> 00:34:18,320
of a pointer and store that that in

991
00:34:18,320 --> 00:34:20,079
memory and then when they fetch the

992
00:34:20,079 --> 00:34:21,918
pointer from memory to use it they'll do

993
00:34:21,918 --> 00:34:22,800
the same

994
00:34:22,800 --> 00:34:24,719
hashing algorithm and check it against

995
00:34:24,719 --> 00:34:26,159
the unused bits in the top of the

996
00:34:26,159 --> 00:34:29,119
pointer and see like are they the same

997
00:34:29,119 --> 00:34:30,639
if the point has been corrupted then

998
00:34:30,639 --> 00:34:32,639
they know like oh

999
00:34:32,639 --> 00:34:34,239
you know they have if the hash doesn't

1000
00:34:34,239 --> 00:34:35,440
match and they're like oh the pointer

1001
00:34:35,440 --> 00:34:36,719
has been corrupted and then you can

1002
00:34:36,719 --> 00:34:38,800
crash or whatever you need to do

1003
00:34:38,800 --> 00:34:40,800
um and so

1004
00:34:40,800 --> 00:34:43,599
um so data pack is uh

1005
00:34:43,599 --> 00:34:44,960
is basically

1006
00:34:44,960 --> 00:34:47,440
just like pack except um it's concerned

1007
00:34:47,440 --> 00:34:49,520
with protecting data pointers rather

1008
00:34:49,520 --> 00:34:50,960
than function pointers and stuff like

1009
00:34:50,960 --> 00:34:52,079
that

1010
00:34:52,079 --> 00:34:54,079
and has been rolled out in ios fairly

1011
00:34:54,079 --> 00:34:56,000
recently

1012
00:34:56,000 --> 00:34:59,119
memory tagging is even more

1013
00:34:59,119 --> 00:35:00,960
is also part of the arm spec and also

1014
00:35:00,960 --> 00:35:02,400
will eventually get rolled out but it

1015
00:35:02,400 --> 00:35:04,480
has been rolled out nowhere of

1016
00:35:04,480 --> 00:35:07,119
consequence so far but um

1017
00:35:07,119 --> 00:35:09,280
it's even more restrictive than data

1018
00:35:09,280 --> 00:35:11,920
pack basically um memory tagging will

1019
00:35:11,920 --> 00:35:14,400
also allow you to detect if a pointer

1020
00:35:14,400 --> 00:35:16,240
has been corrupted but it also has

1021
00:35:16,240 --> 00:35:20,480
facilities to allow you to detect if um

1022
00:35:20,480 --> 00:35:22,240
a read or write is happening out of

1023
00:35:22,240 --> 00:35:24,640
bounds

1024
00:35:24,880 --> 00:35:26,720
from an allocated amount of memory

1025
00:35:26,720 --> 00:35:27,920
basically

1026
00:35:27,920 --> 00:35:30,400
and so it's even more stringent

1027
00:35:30,400 --> 00:35:33,280
um than you know data pack and when that

1028
00:35:33,280 --> 00:35:34,400
comes out

1029
00:35:34,400 --> 00:35:36,560
uh and this will probably take several

1030
00:35:36,560 --> 00:35:40,640
years um that's um going to be a huge uh

1031
00:35:40,640 --> 00:35:45,359
step forward in in dpi mitigations

1032
00:35:45,359 --> 00:35:48,160
um and so if you if we go

1033
00:35:48,160 --> 00:35:50,480
back and look at um you know uh the

1034
00:35:50,480 --> 00:35:53,040
structure of an exploit again i

1035
00:35:53,040 --> 00:35:54,800
basically um

1036
00:35:54,800 --> 00:35:58,800
these uh data pack and mte uh sort of

1037
00:35:58,800 --> 00:36:00,720
target the early stage exploitation the

1038
00:36:00,720 --> 00:36:02,079
initial corruption

1039
00:36:02,079 --> 00:36:03,359
um

1040
00:36:03,359 --> 00:36:05,200
and

1041
00:36:05,200 --> 00:36:06,880
the reason um

1042
00:36:06,880 --> 00:36:09,280
the reason i think these are actually a

1043
00:36:09,280 --> 00:36:11,119
huge game changer is

1044
00:36:11,119 --> 00:36:13,440
most early stage mitigations that we've

1045
00:36:13,440 --> 00:36:16,240
um created to date uh are limited to one

1046
00:36:16,240 --> 00:36:20,160
or two bug classes so you know if you um

1047
00:36:20,160 --> 00:36:22,320
we have a mitigation for stack cookies

1048
00:36:22,320 --> 00:36:25,280
if you if you deploy that mitigation

1049
00:36:25,280 --> 00:36:27,839
then basically um

1050
00:36:27,839 --> 00:36:30,400
a num most stack overflows will be

1051
00:36:30,400 --> 00:36:32,400
rendered useless some of them will still

1052
00:36:32,400 --> 00:36:34,960
be exploited exploitable but a lot of

1053
00:36:34,960 --> 00:36:36,720
them will be rendered useless

1054
00:36:36,720 --> 00:36:38,400
for the vulnerabilities that it doesn't

1055
00:36:38,400 --> 00:36:41,920
render useless however basically um it

1056
00:36:41,920 --> 00:36:44,079
like the mitigation will do little

1057
00:36:44,079 --> 00:36:45,280
or nothing

1058
00:36:45,280 --> 00:36:47,280
and um and so

1059
00:36:47,280 --> 00:36:50,160
the reason data pack and mte game

1060
00:36:50,160 --> 00:36:53,280
changes uh in in my view is that it's an

1061
00:36:53,280 --> 00:36:55,119
early stage mitigation that potentially

1062
00:36:55,119 --> 00:36:57,280
applies to you know all memory

1063
00:36:57,280 --> 00:36:58,720
corruption flaws

1064
00:36:58,720 --> 00:36:59,680
um

1065
00:36:59,680 --> 00:37:01,520
it can basically stop it at the early

1066
00:37:01,520 --> 00:37:03,680
stage of exploitation

1067
00:37:03,680 --> 00:37:05,920
and severely curtail most current

1068
00:37:05,920 --> 00:37:07,680
exploit techniques and i think that's

1069
00:37:07,680 --> 00:37:09,040
going to be

1070
00:37:09,040 --> 00:37:12,480
like a major shift um now

1071
00:37:12,480 --> 00:37:14,640
data pack is uh deployed somewhat

1072
00:37:14,640 --> 00:37:17,040
conservatively in ios low every version

1073
00:37:17,040 --> 00:37:20,160
they added you know data pack protection

1074
00:37:20,160 --> 00:37:22,880
to a few more things but um it'll take

1075
00:37:22,880 --> 00:37:25,680
another several years for really

1076
00:37:25,680 --> 00:37:27,599
both of these mitigations to be in full

1077
00:37:27,599 --> 00:37:30,240
effect but when they mature

1078
00:37:30,240 --> 00:37:32,240
i think it's going to be a huge problem

1079
00:37:32,240 --> 00:37:35,200
for memory corruption

1080
00:37:35,440 --> 00:37:36,960
um

1081
00:37:36,960 --> 00:37:37,760
now

1082
00:37:37,760 --> 00:37:40,800
a possible uh you know a possible um

1083
00:37:40,800 --> 00:37:44,160
avenue to work around this at least for

1084
00:37:44,160 --> 00:37:46,560
the first foreseeable um short term

1085
00:37:46,560 --> 00:37:49,119
future i think is uh mark micro

1086
00:37:49,119 --> 00:37:50,720
architectural flaws

1087
00:37:50,720 --> 00:37:51,839
um

1088
00:37:51,839 --> 00:37:54,000
you know there's been a large upswing in

1089
00:37:54,000 --> 00:37:55,119
particular in side channel

1090
00:37:55,119 --> 00:37:57,440
vulnerabilities to disclose secrets

1091
00:37:57,440 --> 00:37:58,960
across the security boundaries over the

1092
00:37:58,960 --> 00:38:01,359
last few years starting with um you know

1093
00:38:01,359 --> 00:38:02,880
spectre and meltdown and all that kind

1094
00:38:02,880 --> 00:38:05,280
of stuff

1095
00:38:05,280 --> 00:38:08,079
we've seen every year since then like

1096
00:38:08,079 --> 00:38:09,599
two or three other

1097
00:38:09,599 --> 00:38:11,280
you know pretty um

1098
00:38:11,280 --> 00:38:13,920
amazing uh side channel vulnerabilities

1099
00:38:13,920 --> 00:38:16,400
uh that take advantage of

1100
00:38:16,400 --> 00:38:18,240
you know using speculative execution

1101
00:38:18,240 --> 00:38:21,040
most of the time to observe to create an

1102
00:38:21,040 --> 00:38:22,800
observable side effect

1103
00:38:22,800 --> 00:38:23,839
um

1104
00:38:23,839 --> 00:38:25,359
there was a vulnerability called

1105
00:38:25,359 --> 00:38:28,320
blindside by a a research group called

1106
00:38:28,320 --> 00:38:31,920
busek that came out uh last year um that

1107
00:38:31,920 --> 00:38:34,160
was a spectacular example of this and

1108
00:38:34,160 --> 00:38:35,920
i've got the link in the slide if you

1109
00:38:35,920 --> 00:38:37,280
are not familiar with blindside and you

1110
00:38:37,280 --> 00:38:38,880
should go check it out

1111
00:38:38,880 --> 00:38:40,160
um

1112
00:38:40,160 --> 00:38:42,160
uh one thing that's interesting about

1113
00:38:42,160 --> 00:38:44,400
micro architectural flaws

1114
00:38:44,400 --> 00:38:46,000
of this nature is that they've also

1115
00:38:46,000 --> 00:38:48,079
proven several times to be possible via

1116
00:38:48,079 --> 00:38:50,240
browsers and again i've got an example

1117
00:38:50,240 --> 00:38:53,760
here um of a recent paper that came out

1118
00:38:53,760 --> 00:38:56,160
uh the link is in the slide where they

1119
00:38:56,160 --> 00:39:00,960
show um using a side channel technique

1120
00:39:00,960 --> 00:39:03,119
that they were able to do in a browser

1121
00:39:03,119 --> 00:39:04,000
even

1122
00:39:04,000 --> 00:39:06,480
when javascript is disabled

1123
00:39:06,480 --> 00:39:09,280
and so i think micro architectural flaws

1124
00:39:09,280 --> 00:39:11,440
a potential avenue for being able to

1125
00:39:11,440 --> 00:39:14,640
defeat mitigations uh particularly early

1126
00:39:14,640 --> 00:39:17,680
stage mitigation such as um mte and

1127
00:39:17,680 --> 00:39:20,640
and uh data pack um but also micro

1128
00:39:20,640 --> 00:39:22,720
architectural flaws can possibly

1129
00:39:22,720 --> 00:39:25,200
be you know used as flaws in their own

1130
00:39:25,200 --> 00:39:27,599
right and not just as an adjunct to a

1131
00:39:27,599 --> 00:39:30,320
memory corruption flaw

1132
00:39:30,320 --> 00:39:31,599
and like i said most of the

1133
00:39:31,599 --> 00:39:33,920
vulnerabilities uh microarchitectural

1134
00:39:33,920 --> 00:39:36,160
style vulnerabilities have been side

1135
00:39:36,160 --> 00:39:38,400
channels so far but uh there might be

1136
00:39:38,400 --> 00:39:40,079
other ones in the future that allow you

1137
00:39:40,079 --> 00:39:40,960
to do

1138
00:39:40,960 --> 00:39:43,680
uh that have different effects um

1139
00:39:43,680 --> 00:39:45,200
uh you know introducing code or

1140
00:39:45,200 --> 00:39:48,240
modifying memory like rohammer did and

1141
00:39:48,240 --> 00:39:49,440
um

1142
00:39:49,440 --> 00:39:51,760
if that's the case then uh i think

1143
00:39:51,760 --> 00:39:53,920
there'll actually be a you know a short

1144
00:39:53,920 --> 00:39:56,640
period of time where offense will regain

1145
00:39:56,640 --> 00:40:00,000
some of the lost ground it has

1146
00:40:03,200 --> 00:40:04,960
now

1147
00:40:04,960 --> 00:40:08,079
in the current state of things because

1148
00:40:08,079 --> 00:40:09,040
because

1149
00:40:09,040 --> 00:40:11,920
as i said over time um offensive tooling

1150
00:40:11,920 --> 00:40:14,160
is uh being being able to do a little

1151
00:40:14,160 --> 00:40:16,079
bit less than it used to uh the

1152
00:40:16,079 --> 00:40:17,920
detection of compromise becomes a little

1153
00:40:17,920 --> 00:40:20,160
bit easier for defense because if

1154
00:40:20,160 --> 00:40:21,920
telemetry runs with more privilege and

1155
00:40:21,920 --> 00:40:24,079
the offensive tooling is can possibly

1156
00:40:24,079 --> 00:40:26,160
attain then it's harder

1157
00:40:26,160 --> 00:40:28,079
to evade you have to find ways around it

1158
00:40:28,079 --> 00:40:29,440
and you might be able to do that but

1159
00:40:29,440 --> 00:40:30,960
there might be certain operations that

1160
00:40:30,960 --> 00:40:33,280
you can only do a certain way um and

1161
00:40:33,280 --> 00:40:35,760
that are easily easy to detect and if

1162
00:40:35,760 --> 00:40:38,640
you're running at lower privileges um or

1163
00:40:38,640 --> 00:40:40,880
you know have data only access then

1164
00:40:40,880 --> 00:40:42,160
you're in a

1165
00:40:42,160 --> 00:40:43,520
position where you're probably not going

1166
00:40:43,520 --> 00:40:45,359
to be able to you know sort of turn off

1167
00:40:45,359 --> 00:40:47,280
the telemetry or do anything meaningful

1168
00:40:47,280 --> 00:40:52,079
there so that's a win for defense

1169
00:40:52,079 --> 00:40:53,200
so

1170
00:40:53,200 --> 00:40:55,680
thinking about memory corruption um

1171
00:40:55,680 --> 00:40:57,200
you start to think with all these

1172
00:40:57,200 --> 00:40:59,839
mitigations particularly cfi and

1173
00:40:59,839 --> 00:41:00,960
dpi

1174
00:41:00,960 --> 00:41:02,480
are memory corruption exploits on

1175
00:41:02,480 --> 00:41:04,240
borrowed time and i think

1176
00:41:04,240 --> 00:41:07,680
uh kind of yes um but admittedly i have

1177
00:41:07,680 --> 00:41:10,240
thought this every year since uh 2004

1178
00:41:10,240 --> 00:41:12,640
when uh xps v2 came out

1179
00:41:12,640 --> 00:41:14,640
uh me and some other people at the time

1180
00:41:14,640 --> 00:41:16,400
were like well i

1181
00:41:16,400 --> 00:41:18,000
i guess memory corruption exploit

1182
00:41:18,000 --> 00:41:20,000
exploitation is kind of over and vista

1183
00:41:20,000 --> 00:41:21,440
comes out and we're like okay it's

1184
00:41:21,440 --> 00:41:24,079
definitely over now um but we've always

1185
00:41:24,079 --> 00:41:26,319
managed to work around it so take this

1186
00:41:26,319 --> 00:41:30,000
with a grain of salt but um in 2017 uh i

1187
00:41:30,000 --> 00:41:31,599
predicted that exploitable memory

1188
00:41:31,599 --> 00:41:33,119
corruption will be the exception not the

1189
00:41:33,119 --> 00:41:36,400
rule and i am going to stand by that

1190
00:41:36,400 --> 00:41:39,520
uh stand by that here

1191
00:41:39,520 --> 00:41:41,359
um if you think about why uh

1192
00:41:41,359 --> 00:41:42,960
historically memory corruption has been

1193
00:41:42,960 --> 00:41:46,400
the favored technique um it's applicable

1194
00:41:46,400 --> 00:41:48,240
to most technologies and attack vectors

1195
00:41:48,240 --> 00:41:50,240
uh this is still true you know we are

1196
00:41:50,240 --> 00:41:52,319
slowly rewriting stuff with memory safe

1197
00:41:52,319 --> 00:41:54,720
languages and things like that uh

1198
00:41:54,720 --> 00:41:56,880
rewriting uh parts of android and linux

1199
00:41:56,880 --> 00:41:58,480
kernel and rust and all that but there's

1200
00:41:58,480 --> 00:42:00,640
still a lot of things deployed that

1201
00:42:00,640 --> 00:42:03,520
are either in unsafe memory languages or

1202
00:42:03,520 --> 00:42:05,520
you know have have

1203
00:42:05,520 --> 00:42:07,359
extensive libraries behind them that are

1204
00:42:07,359 --> 00:42:09,200
written in unsafe languages

1205
00:42:09,200 --> 00:42:10,240
um

1206
00:42:10,240 --> 00:42:12,079
but still memory corruption is often the

1207
00:42:12,079 --> 00:42:14,079
most powerful you know unfettered access

1208
00:42:14,079 --> 00:42:17,760
to function and data executing code

1209
00:42:17,760 --> 00:42:19,200
when i talk about function i'm talking

1210
00:42:19,200 --> 00:42:21,119
about you know being able to access the

1211
00:42:21,119 --> 00:42:22,720
gps or turn on the microphone or

1212
00:42:22,720 --> 00:42:24,240
something

1213
00:42:24,240 --> 00:42:26,160
and then it's difficult to detect and

1214
00:42:26,160 --> 00:42:27,040
stop

1215
00:42:27,040 --> 00:42:30,000
and so with all these mitigations and uh

1216
00:42:30,000 --> 00:42:32,160
cost and everything we start to think is

1217
00:42:32,160 --> 00:42:33,839
this still true

1218
00:42:33,839 --> 00:42:34,880
um

1219
00:42:34,880 --> 00:42:37,359
it is still true to an extent but

1220
00:42:37,359 --> 00:42:39,760
memory corruption um

1221
00:42:39,760 --> 00:42:42,800
its power is starting to erode

1222
00:42:42,800 --> 00:42:45,119
as a technique it's starting to uh

1223
00:42:45,119 --> 00:42:48,240
exhibit some weaknesses um primarily

1224
00:42:48,240 --> 00:42:51,440
uh access limited access due to um cfi

1225
00:42:51,440 --> 00:42:52,800
and cpi

1226
00:42:52,800 --> 00:42:56,000
um sort of mean um that and and

1227
00:42:56,000 --> 00:42:58,240
sandboxes in particular mean that it's

1228
00:42:58,240 --> 00:43:00,480
not necessarily more powerful than other

1229
00:43:00,480 --> 00:43:02,160
types of vulnerabilities in some

1230
00:43:02,160 --> 00:43:04,560
contexts and that's an interesting thing

1231
00:43:04,560 --> 00:43:06,640
to note um

1232
00:43:06,640 --> 00:43:08,480
if you don't get code execution if you

1233
00:43:08,480 --> 00:43:10,160
can only

1234
00:43:10,160 --> 00:43:12,480
do a limited amount of either writing to

1235
00:43:12,480 --> 00:43:13,839
memory or write

1236
00:43:13,839 --> 00:43:15,520
into certain you know reading or writing

1237
00:43:15,520 --> 00:43:17,040
certain data then there might be other

1238
00:43:17,040 --> 00:43:19,200
attacks uh that you can do more

1239
00:43:19,200 --> 00:43:21,359
effectively with other techniques

1240
00:43:21,359 --> 00:43:22,480
um

1241
00:43:22,480 --> 00:43:23,520
also

1242
00:43:23,520 --> 00:43:24,400
uh

1243
00:43:24,400 --> 00:43:25,920
as i've sort of talked about before the

1244
00:43:25,920 --> 00:43:27,680
cost of memory corruption exploits has

1245
00:43:27,680 --> 00:43:29,760
gone through the roof they're very uh

1246
00:43:29,760 --> 00:43:32,720
expensive to create and maintain and uh

1247
00:43:32,720 --> 00:43:34,480
most other vulnerability classes don't

1248
00:43:34,480 --> 00:43:36,720
really suffer from that they either work

1249
00:43:36,720 --> 00:43:38,240
or they're patched

1250
00:43:38,240 --> 00:43:39,280
um

1251
00:43:39,280 --> 00:43:41,839
so with that in mind um i think

1252
00:43:41,839 --> 00:43:44,160
offensive research uh uh you know

1253
00:43:44,160 --> 00:43:46,079
exploit chains will still use memory

1254
00:43:46,079 --> 00:43:48,160
corruption but increasingly use

1255
00:43:48,160 --> 00:43:51,119
components that uh a non-memory memory

1256
00:43:51,119 --> 00:43:53,280
corruption as well to achieve some some

1257
00:43:53,280 --> 00:43:56,160
of their objectives so um of course

1258
00:43:56,160 --> 00:43:57,680
there's a never-ending amount of

1259
00:43:57,680 --> 00:43:59,200
different types of flaws that they could

1260
00:43:59,200 --> 00:44:01,359
pivot to but i'm going to just call out

1261
00:44:01,359 --> 00:44:03,680
the the most obvious or the most

1262
00:44:03,680 --> 00:44:06,720
relevant um uh currently so the first

1263
00:44:06,720 --> 00:44:09,640
one is cryptography for flaws um

1264
00:44:09,640 --> 00:44:11,680
cryptography has obviously always been

1265
00:44:11,680 --> 00:44:14,000
very important component of security it

1266
00:44:14,000 --> 00:44:16,640
underpins nearly all current security uh

1267
00:44:16,640 --> 00:44:19,440
technology in one form or another

1268
00:44:19,440 --> 00:44:20,960
um in every single layer of the

1269
00:44:20,960 --> 00:44:22,640
technology stack you have encrypted

1270
00:44:22,640 --> 00:44:25,520
communications um you know with tls uh

1271
00:44:25,520 --> 00:44:28,880
for https but also you know messaging

1272
00:44:28,880 --> 00:44:30,640
apps are all you know end-to-end

1273
00:44:30,640 --> 00:44:32,400
encrypted now um

1274
00:44:32,400 --> 00:44:34,800
and uh we use uh crypto for

1275
00:44:34,800 --> 00:44:36,480
authentication and authorization in the

1276
00:44:36,480 --> 00:44:38,800
form of certificates uh we have code

1277
00:44:38,800 --> 00:44:41,839
signing um which is uh you know both a

1278
00:44:41,839 --> 00:44:43,680
mitigation and a

1279
00:44:43,680 --> 00:44:46,480
you know authentication kind of thing um

1280
00:44:46,480 --> 00:44:48,240
you know software updates we validate

1281
00:44:48,240 --> 00:44:51,680
where they come from by uh by uh

1282
00:44:51,680 --> 00:44:54,880
cryptography and um even some you know

1283
00:44:54,880 --> 00:44:57,280
actual memory corruption mitigation such

1284
00:44:57,280 --> 00:44:59,680
as pac use cryptography in some form or

1285
00:44:59,680 --> 00:45:01,119
another

1286
00:45:01,119 --> 00:45:02,480
so

1287
00:45:02,480 --> 00:45:04,720
depending on what you break there's uh

1288
00:45:04,720 --> 00:45:06,720
amazing potential here um

1289
00:45:06,720 --> 00:45:09,520
eavesdropping uh you know being able to

1290
00:45:09,520 --> 00:45:11,040
eavesdrop on

1291
00:45:11,040 --> 00:45:12,240
on uh

1292
00:45:12,240 --> 00:45:14,319
on you know encrypted communications is

1293
00:45:14,319 --> 00:45:16,079
interesting and also potentially being

1294
00:45:16,079 --> 00:45:18,000
able to man in the middle uh you might

1295
00:45:18,000 --> 00:45:19,680
be able to do some kind of spoofing or

1296
00:45:19,680 --> 00:45:22,240
impersonation if you can you know

1297
00:45:22,240 --> 00:45:24,560
impersonate

1298
00:45:24,560 --> 00:45:27,040
an entity by forging a certificate or

1299
00:45:27,040 --> 00:45:28,160
you know

1300
00:45:28,160 --> 00:45:30,000
being able to break dnsec or something

1301
00:45:30,000 --> 00:45:31,280
like that

1302
00:45:31,280 --> 00:45:34,160
bypass code signing and trusted boot uh

1303
00:45:34,160 --> 00:45:35,359
you know

1304
00:45:35,359 --> 00:45:36,640
i've already talked about that a little

1305
00:45:36,640 --> 00:45:39,040
bit introducing evil software up

1306
00:45:39,040 --> 00:45:41,599
upgrades which um is basically uh how

1307
00:45:41,599 --> 00:45:43,599
the supply chain attacks have worked

1308
00:45:43,599 --> 00:45:45,200
although rather than

1309
00:45:45,200 --> 00:45:47,760
finding a floor in crypto they just

1310
00:45:47,760 --> 00:45:48,960
hacked a

1311
00:45:48,960 --> 00:45:51,280
instead they would just target a vendor

1312
00:45:51,280 --> 00:45:52,880
distributing software to other more

1313
00:45:52,880 --> 00:45:54,480
important vendors

1314
00:45:54,480 --> 00:45:56,960
uh as an easy way in and then ship

1315
00:45:56,960 --> 00:45:58,079
upgrades

1316
00:45:58,079 --> 00:46:00,000
um and then you know defeating some

1317
00:46:00,000 --> 00:46:02,400
mitigations as well

1318
00:46:02,400 --> 00:46:03,839
so there's been a number of recent

1319
00:46:03,839 --> 00:46:06,319
examples of this um and i think it's

1320
00:46:06,319 --> 00:46:08,720
becoming of increasing prevalence um

1321
00:46:08,720 --> 00:46:10,800
obviously ever since heartbleed uh

1322
00:46:10,800 --> 00:46:13,040
people have been doing uh well before

1323
00:46:13,040 --> 00:46:15,200
that but ev in particular since happily

1324
00:46:15,200 --> 00:46:17,839
people have been doing sort of increased

1325
00:46:17,839 --> 00:46:20,400
interest in breaking ssl there was a

1326
00:46:20,400 --> 00:46:22,880
period of time where there was open ssl

1327
00:46:22,880 --> 00:46:25,440
uh crypto floors uh you know once a a

1328
00:46:25,440 --> 00:46:27,200
year or every six months or something

1329
00:46:27,200 --> 00:46:29,200
but now the crypto floors are starting

1330
00:46:29,200 --> 00:46:31,359
to become more mainstream and showing

1331
00:46:31,359 --> 00:46:33,280
that they're useful directly in

1332
00:46:33,280 --> 00:46:37,119
compromising uh services or devices so a

1333
00:46:37,119 --> 00:46:40,000
black hat a group called orange side

1334
00:46:40,000 --> 00:46:42,000
displayed a bunch of um remote code

1335
00:46:42,000 --> 00:46:44,880
executions in microsoft exchange um that

1336
00:46:44,880 --> 00:46:47,040
among other things uh abused uh some

1337
00:46:47,040 --> 00:46:49,760
crypto flaws and it's fascinating to go

1338
00:46:49,760 --> 00:46:51,359
and read about um

1339
00:46:51,359 --> 00:46:54,000
uh how his chain worked and um again the

1340
00:46:54,000 --> 00:46:54,800
um

1341
00:46:54,800 --> 00:46:56,400
the link is on the slides there so go

1342
00:46:56,400 --> 00:46:57,599
check it out

1343
00:46:57,599 --> 00:47:00,400
um nsa last year released a crypto

1344
00:47:00,400 --> 00:47:03,920
vulnerability uh in microsoft that uh

1345
00:47:03,920 --> 00:47:05,839
concerning

1346
00:47:05,839 --> 00:47:08,560
concerning um you know ec uh

1347
00:47:08,560 --> 00:47:11,200
cryptography and you're able to forge uh

1348
00:47:11,200 --> 00:47:13,920
certificates coming from microsoft um

1349
00:47:13,920 --> 00:47:16,000
which again was um a big deal at the

1350
00:47:16,000 --> 00:47:18,480
time they called curveball uh and then

1351
00:47:18,480 --> 00:47:20,240
again last year there was a guy called

1352
00:47:20,240 --> 00:47:22,960
tom to turbot sorry if i've

1353
00:47:22,960 --> 00:47:25,119
uh mispronounced that um that presented

1354
00:47:25,119 --> 00:47:27,599
a zero log on floor which basically was

1355
00:47:27,599 --> 00:47:30,319
a crypto floor that allowed you to um in

1356
00:47:30,319 --> 00:47:33,040
an active directory environment um

1357
00:47:33,040 --> 00:47:34,960
sort of illegally authenticate and get

1358
00:47:34,960 --> 00:47:38,480
full access to a windows domain so um he

1359
00:47:38,480 --> 00:47:40,240
did a presentation about that at black

1360
00:47:40,240 --> 00:47:43,359
hat uh also definitely worth um going

1361
00:47:43,359 --> 00:47:44,880
and checking out

1362
00:47:44,880 --> 00:47:46,960
so i basically predict that crypto

1363
00:47:46,960 --> 00:47:49,040
vulnerability research is going to start

1364
00:47:49,040 --> 00:47:51,520
becoming critical components of most

1365
00:47:51,520 --> 00:47:53,119
offensive tooling within the next

1366
00:47:53,119 --> 00:47:55,760
several years

1367
00:47:56,480 --> 00:47:58,160
the second big thing i think is web

1368
00:47:58,160 --> 00:48:01,040
technology flaws so they're increasingly

1369
00:48:01,040 --> 00:48:03,599
relevant in the offensive tooling space

1370
00:48:03,599 --> 00:48:06,960
originally web technology flaws um

1371
00:48:06,960 --> 00:48:08,880
you know uh people developing offensive

1372
00:48:08,880 --> 00:48:10,400
tools didn't pay much attention to

1373
00:48:10,400 --> 00:48:12,640
because web technology flaws are

1374
00:48:12,640 --> 00:48:14,160
essentially used for

1375
00:48:14,160 --> 00:48:16,319
you know finding a bug in a particular

1376
00:48:16,319 --> 00:48:18,480
you know website or something like that

1377
00:48:18,480 --> 00:48:21,280
but increasingly as we've moved to

1378
00:48:21,280 --> 00:48:22,880
software as a service and apps and all

1379
00:48:22,880 --> 00:48:25,040
that kind of and messaging and that kind

1380
00:48:25,040 --> 00:48:26,400
of thing um

1381
00:48:26,400 --> 00:48:28,079
you know web technologies in various

1382
00:48:28,079 --> 00:48:32,480
forms are used uh throughout devices uh

1383
00:48:32,480 --> 00:48:35,280
and um are available everywhere and are

1384
00:48:35,280 --> 00:48:36,640
increasingly

1385
00:48:36,640 --> 00:48:39,839
uh relevant enabled uh when you know

1386
00:48:39,839 --> 00:48:41,920
trying to break into devices or or

1387
00:48:41,920 --> 00:48:45,200
servers um and you know security experts

1388
00:48:45,200 --> 00:48:46,559
agree and i've been talking about it

1389
00:48:46,559 --> 00:48:50,160
very recently um i i admit i'm totally

1390
00:48:50,160 --> 00:48:52,319
just i wrote my own tweet and then

1391
00:48:52,319 --> 00:48:56,559
quoted it there um but no seriously uh

1392
00:48:56,559 --> 00:48:58,160
other experts have been talking about it

1393
00:48:58,160 --> 00:49:00,400
just a few days ago alyssa assange who's

1394
00:49:00,400 --> 00:49:01,440
a um

1395
00:49:01,440 --> 00:49:03,920
well-respected vulnerability researcher

1396
00:49:03,920 --> 00:49:06,720
was talking about um you know high-level

1397
00:49:06,720 --> 00:49:09,760
uh flaws in you know web apps and stuff

1398
00:49:09,760 --> 00:49:12,319
and and uh how they're increasingly

1399
00:49:12,319 --> 00:49:14,880
relevant um and also casey ellis from

1400
00:49:14,880 --> 00:49:17,280
bug crowd there is calling out um

1401
00:49:17,280 --> 00:49:20,079
like hey this cross-site scripting um

1402
00:49:20,079 --> 00:49:21,520
that people

1403
00:49:21,520 --> 00:49:23,280
kind of write off as lame is actually

1404
00:49:23,280 --> 00:49:25,599
not only on this guy 200 grand but has

1405
00:49:25,599 --> 00:49:27,680
he's using that as a facility to break

1406
00:49:27,680 --> 00:49:28,640
into

1407
00:49:28,640 --> 00:49:29,680
uh

1408
00:49:29,680 --> 00:49:30,880
you know being able to compromise

1409
00:49:30,880 --> 00:49:32,960
microsoft teams which is like quite a

1410
00:49:32,960 --> 00:49:34,880
big deal

1411
00:49:34,880 --> 00:49:36,079
um

1412
00:49:36,079 --> 00:49:38,240
web technology flaws so they're

1413
00:49:38,240 --> 00:49:40,240
increasingly relevant um

1414
00:49:40,240 --> 00:49:42,000
in the last

1415
00:49:42,000 --> 00:49:43,599
apart from the examples that i've just

1416
00:49:43,599 --> 00:49:47,040
shown again the exchange server rce uh

1417
00:49:47,040 --> 00:49:48,960
suite of bugs that um orange style

1418
00:49:48,960 --> 00:49:51,599
presented the original entry vector was

1419
00:49:51,599 --> 00:49:54,319
an ssrf vulnerability um which is

1420
00:49:54,319 --> 00:49:55,760
amazing and

1421
00:49:55,760 --> 00:49:57,839
perhaps even more interestingly there

1422
00:49:57,839 --> 00:49:59,680
was a black hat presentation that i

1423
00:49:59,680 --> 00:50:00,800
linked to

1424
00:50:00,800 --> 00:50:04,720
i'm called pwning ios 14 with gen z bugs

1425
00:50:04,720 --> 00:50:07,520
and that also talked about using

1426
00:50:07,520 --> 00:50:10,640
basically web star flaws to be able to

1427
00:50:10,640 --> 00:50:14,160
compromise an iphone uh the initial uh

1428
00:50:14,160 --> 00:50:15,520
entry access vector is actually

1429
00:50:15,520 --> 00:50:17,440
cross-site scripting and then they use

1430
00:50:17,440 --> 00:50:19,119
these other scripting type flaws that

1431
00:50:19,119 --> 00:50:22,240
eventually leads to a tight confusing

1432
00:50:22,240 --> 00:50:24,240
type confusion slash memory corruption

1433
00:50:24,240 --> 00:50:26,720
situation but the initial getting onto

1434
00:50:26,720 --> 00:50:27,920
the device and breaking out of the

1435
00:50:27,920 --> 00:50:29,599
sandbox was basically done with web

1436
00:50:29,599 --> 00:50:32,000
style floors

1437
00:50:32,000 --> 00:50:34,319
lastly we have um protocol style attacks

1438
00:50:34,319 --> 00:50:35,680
i'm not going to spend a lot of time on

1439
00:50:35,680 --> 00:50:37,680
this because i'm running really short on

1440
00:50:37,680 --> 00:50:39,920
time so i'm going to have to go through

1441
00:50:39,920 --> 00:50:42,400
but um basically uh

1442
00:50:42,400 --> 00:50:44,599
these are less powerful but allow you to

1443
00:50:44,599 --> 00:50:46,640
potentially do things like identity

1444
00:50:46,640 --> 00:50:48,640
spoofing crossing trust domains or

1445
00:50:48,640 --> 00:50:50,480
accessing sensitive data and

1446
00:50:50,480 --> 00:50:52,480
functionality and

1447
00:50:52,480 --> 00:50:54,319
in particularly there's been a great

1448
00:50:54,319 --> 00:50:56,160
example of this recently uh natalie

1449
00:50:56,160 --> 00:50:58,640
silvanovic from project zero i did a

1450
00:50:58,640 --> 00:51:00,160
blog and followed up with a black hat

1451
00:51:00,160 --> 00:51:01,920
presentation about various chat apps

1452
00:51:01,920 --> 00:51:04,160
that she's created uh that she looked at

1453
00:51:04,160 --> 00:51:06,160
um you know signal and whatsapp and

1454
00:51:06,160 --> 00:51:08,559
several others where she found flaws

1455
00:51:08,559 --> 00:51:10,079
where you could fool a state machine

1456
00:51:10,079 --> 00:51:12,880
into you know giving unauthorized access

1457
00:51:12,880 --> 00:51:15,680
to someone's microphone or video feed so

1458
00:51:15,680 --> 00:51:17,440
definitely check that out

1459
00:51:17,440 --> 00:51:19,359
the last part of this presentation is

1460
00:51:19,359 --> 00:51:22,160
about thinking in ecosystems so

1461
00:51:22,160 --> 00:51:25,520
basically here i'm talking about um

1462
00:51:25,520 --> 00:51:27,680
you know a tech debt cost that i think

1463
00:51:27,680 --> 00:51:30,000
that offense is starting to occur um

1464
00:51:30,000 --> 00:51:31,280
essentially

1465
00:51:31,280 --> 00:51:32,880
most offensive tools are written to be

1466
00:51:32,880 --> 00:51:34,960
deployed against a single device based

1467
00:51:34,960 --> 00:51:36,800
on various assumptions that you know

1468
00:51:36,800 --> 00:51:38,400
most traffic is in an open and

1469
00:51:38,400 --> 00:51:40,559
distributed internet it's observable you

1470
00:51:40,559 --> 00:51:42,880
can fully compromise the device code can

1471
00:51:42,880 --> 00:51:45,040
be introduced at will and all the data

1472
00:51:45,040 --> 00:51:47,119
on the device can be recovered and that

1473
00:51:47,119 --> 00:51:49,839
av and apt is not sophisticated but

1474
00:51:49,839 --> 00:51:51,680
throughout this talk i think i showed

1475
00:51:51,680 --> 00:51:52,960
that most of these assumptions are

1476
00:51:52,960 --> 00:51:54,640
actually false

1477
00:51:54,640 --> 00:51:55,839
um

1478
00:51:55,839 --> 00:51:58,240
the internet is not actually as

1479
00:51:58,240 --> 00:52:00,640
distributed and as it used to be it used

1480
00:52:00,640 --> 00:52:02,000
to be the case that everyone was running

1481
00:52:02,000 --> 00:52:04,240
their own servers in-house

1482
00:52:04,240 --> 00:52:06,720
and but now increasingly the internet is

1483
00:52:06,720 --> 00:52:08,480
balconized across

1484
00:52:08,480 --> 00:52:12,400
geographic political and commercial uh

1485
00:52:12,400 --> 00:52:14,640
lines we have large commercial providers

1486
00:52:14,640 --> 00:52:17,200
you know google uh facebook amazon and

1487
00:52:17,200 --> 00:52:20,640
apple um there's regions for specific um

1488
00:52:20,640 --> 00:52:23,839
cloud infrastructure wechat um in china

1489
00:52:23,839 --> 00:52:25,599
and um you know russia has their own

1490
00:52:25,599 --> 00:52:27,359
facebook and stuff like that

1491
00:52:27,359 --> 00:52:30,240
um and then interestingly um

1492
00:52:30,240 --> 00:52:32,240
i think we're starting to or we will

1493
00:52:32,240 --> 00:52:34,800
start to see more and more um political

1494
00:52:34,800 --> 00:52:35,680
sort of

1495
00:52:35,680 --> 00:52:37,119
segmented political parts of the

1496
00:52:37,119 --> 00:52:40,559
internet um we saw in re as a result of

1497
00:52:40,559 --> 00:52:43,359
the fallout of the um the u.s election

1498
00:52:43,359 --> 00:52:45,440
last year that a bunch of right-wing

1499
00:52:45,440 --> 00:52:46,800
people sort of wanted to move over to

1500
00:52:46,800 --> 00:52:49,520
parlor because they um felt the politics

1501
00:52:49,520 --> 00:52:51,359
of twitter and facebook were

1502
00:52:51,359 --> 00:52:54,079
uh not to their liking and i think those

1503
00:52:54,079 --> 00:52:55,359
kind of movements are going to

1504
00:52:55,359 --> 00:52:57,440
increasingly happen in future

1505
00:52:57,440 --> 00:53:00,240
um so as a result of these uh cloud

1506
00:53:00,240 --> 00:53:01,839
environments most interesting data is

1507
00:53:01,839 --> 00:53:03,359
encrypted and contained in private

1508
00:53:03,359 --> 00:53:04,640
ecosystems

1509
00:53:04,640 --> 00:53:06,480
um and a lot of the code and

1510
00:53:06,480 --> 00:53:08,640
infrastructure that was traditionally

1511
00:53:08,640 --> 00:53:10,880
toast uh hosted in-house is now

1512
00:53:10,880 --> 00:53:14,160
outsourced to google um and also a you

1513
00:53:14,160 --> 00:53:16,720
know code that we run on devices now

1514
00:53:16,720 --> 00:53:18,240
you know as part of a software as a

1515
00:53:18,240 --> 00:53:19,760
service and an ecosystem and all that

1516
00:53:19,760 --> 00:53:21,119
kind of thing

1517
00:53:21,119 --> 00:53:22,000
so

1518
00:53:22,000 --> 00:53:24,800
devices now participate in uh you know

1519
00:53:24,800 --> 00:53:28,000
one or more ecosystems uh apple devices

1520
00:53:28,000 --> 00:53:30,000
you have your watch and your phone and

1521
00:53:30,000 --> 00:53:32,160
everything they all participate in a

1522
00:53:32,160 --> 00:53:34,559
local network and and further icloud

1523
00:53:34,559 --> 00:53:37,040
with your contacts and stuff like that

1524
00:53:37,040 --> 00:53:38,640
android has a google

1525
00:53:38,640 --> 00:53:40,400
ecosystem and then there's secondary

1526
00:53:40,400 --> 00:53:41,920
large clouds that we tend to use like

1527
00:53:41,920 --> 00:53:43,760
the facebook whatsapp kind of

1528
00:53:43,760 --> 00:53:46,480
functionality and wechat and so on

1529
00:53:46,480 --> 00:53:47,520
and so

1530
00:53:47,520 --> 00:53:48,480
uh

1531
00:53:48,480 --> 00:53:50,400
from an offense perspective you know you

1532
00:53:50,400 --> 00:53:51,920
start to think do these ecosystems

1533
00:53:51,920 --> 00:53:54,000
represent a significant attack surface

1534
00:53:54,000 --> 00:53:56,240
there's the potential to move laterally

1535
00:53:56,240 --> 00:53:57,040
um

1536
00:53:57,040 --> 00:53:59,839
possibly maybe you can break into

1537
00:53:59,839 --> 00:54:02,319
you know a lower security device and

1538
00:54:02,319 --> 00:54:04,960
then um using an ecosystem sort of move

1539
00:54:04,960 --> 00:54:07,440
laterally onto the higher security phone

1540
00:54:07,440 --> 00:54:08,960
or whatever

1541
00:54:08,960 --> 00:54:11,599
also you might be able to use ecosystems

1542
00:54:11,599 --> 00:54:13,599
uh to do things like persist across

1543
00:54:13,599 --> 00:54:16,319
upgrades or resets of particular devices

1544
00:54:16,319 --> 00:54:19,440
um and so it is interesting to offense

1545
00:54:19,440 --> 00:54:21,040
but you know

1546
00:54:21,040 --> 00:54:22,400
it actually presents some unique

1547
00:54:22,400 --> 00:54:24,079
political and legal challenges and this

1548
00:54:24,079 --> 00:54:27,040
is sort of just a thing for you guys to

1549
00:54:27,040 --> 00:54:29,119
stew on really um

1550
00:54:29,119 --> 00:54:31,680
uh you know

1551
00:54:31,680 --> 00:54:33,440
basically if you start using an

1552
00:54:33,440 --> 00:54:36,000
ecosystem like you know icloud or

1553
00:54:36,000 --> 00:54:37,760
whatever are you actually allowed to do

1554
00:54:37,760 --> 00:54:39,359
that um

1555
00:54:39,359 --> 00:54:41,680
you know last year or the year before i

1556
00:54:41,680 --> 00:54:42,880
oh

1557
00:54:42,880 --> 00:54:44,880
yeah 2020 um

1558
00:54:44,880 --> 00:54:48,559
basically uh you know a piece of malware

1559
00:54:48,559 --> 00:54:50,160
was found in the wild that was part of

1560
00:54:50,160 --> 00:54:53,200
nso's kit and facebook just it was being

1561
00:54:53,200 --> 00:54:54,799
launched through whatsapp and facebook

1562
00:54:54,799 --> 00:54:56,400
decided you're not allowed to do that

1563
00:54:56,400 --> 00:54:58,559
and slap them with a lawsuit uh which is

1564
00:54:58,559 --> 00:55:01,200
um you know still still ongoing so

1565
00:55:01,200 --> 00:55:04,720
um it is it is possibly the case that uh

1566
00:55:04,720 --> 00:55:07,680
although these ecosystems exist that

1567
00:55:07,680 --> 00:55:09,839
um legally and politically it'll be

1568
00:55:09,839 --> 00:55:13,200
unfeasible uh for a lot of offensive

1569
00:55:13,200 --> 00:55:14,880
players to participate

1570
00:55:14,880 --> 00:55:16,799
um but that doesn't necessarily mean

1571
00:55:16,799 --> 00:55:18,960
that offensive chains uh won't be

1572
00:55:18,960 --> 00:55:22,160
interested in these ecosystems because

1573
00:55:22,160 --> 00:55:24,079
even if it was made illegal it might be

1574
00:55:24,079 --> 00:55:25,760
off off limits to someone like law

1575
00:55:25,760 --> 00:55:28,240
enforcement or local intel agencies

1576
00:55:28,240 --> 00:55:30,079
but guess who that leaves adversary

1577
00:55:30,079 --> 00:55:33,040
nations and criminal groups so

1578
00:55:33,040 --> 00:55:34,400
if you're looking at their offensive

1579
00:55:34,400 --> 00:55:36,319
chains they can basically do it with

1580
00:55:36,319 --> 00:55:38,559
impunity um because you know they're

1581
00:55:38,559 --> 00:55:40,319
protected by living in a you know

1582
00:55:40,319 --> 00:55:42,559
non-extradition country or whatever

1583
00:55:42,559 --> 00:55:45,119
um and so this is uh an interesting

1584
00:55:45,119 --> 00:55:47,520
discussion that um you know for another

1585
00:55:47,520 --> 00:55:48,640
time that

1586
00:55:48,640 --> 00:55:50,960
uh you guys should think about

1587
00:55:50,960 --> 00:55:52,960
so i think offensive chains will be

1588
00:55:52,960 --> 00:55:56,480
ecosystem aware even if um that won't be

1589
00:55:56,480 --> 00:55:58,319
true for all of the players

1590
00:55:58,319 --> 00:56:00,559
um there's obviously some potential

1591
00:56:00,559 --> 00:56:03,119
advantages for offense there but defense

1592
00:56:03,119 --> 00:56:05,760
has the ability um to do sophisticated

1593
00:56:05,760 --> 00:56:08,400
anomaly detection again

1594
00:56:08,400 --> 00:56:10,319
because uh if you're doing stuff on

1595
00:56:10,319 --> 00:56:12,400
their infrastructure again they can look

1596
00:56:12,400 --> 00:56:14,319
at patterns of activity

1597
00:56:14,319 --> 00:56:16,400
as ml and stuff improves they might be

1598
00:56:16,400 --> 00:56:17,680
able to do better and better anomaly

1599
00:56:17,680 --> 00:56:19,839
detection go hey something something

1600
00:56:19,839 --> 00:56:22,160
unusual is happening let's check it out

1601
00:56:22,160 --> 00:56:25,359
um dino de zovi actually talked about um

1602
00:56:25,359 --> 00:56:27,119
this exact point in a summer con

1603
00:56:27,119 --> 00:56:30,240
presentation he gave a few months ago

1604
00:56:30,240 --> 00:56:32,000
and so it's definitely worth checking

1605
00:56:32,000 --> 00:56:33,920
out it's a really great presentation

1606
00:56:33,920 --> 00:56:35,599
especially for someone like me that

1607
00:56:35,599 --> 00:56:37,040
comes from a similar background as him

1608
00:56:37,040 --> 00:56:39,119
which is you know low level memory

1609
00:56:39,119 --> 00:56:41,200
corruption flaws and stuff and you know

1610
00:56:41,200 --> 00:56:43,599
starting to work out

1611
00:56:43,599 --> 00:56:45,520
you know how the cloud is structured and

1612
00:56:45,520 --> 00:56:47,599
all that kind of thing

1613
00:56:47,599 --> 00:56:50,319
um so that's basically the whole talk uh

1614
00:56:50,319 --> 00:56:52,720
in summary memory corruption i do think

1615
00:56:52,720 --> 00:56:54,480
is still the most effective strategy for

1616
00:56:54,480 --> 00:56:55,680
offense

1617
00:56:55,680 --> 00:56:57,520
but its advantages are slowly eroding

1618
00:56:57,520 --> 00:56:58,960
over time

1619
00:56:58,960 --> 00:57:00,720
they're costing more and they're doing

1620
00:57:00,720 --> 00:57:01,839
less

1621
00:57:01,839 --> 00:57:03,760
and increasingly i think offense is

1622
00:57:03,760 --> 00:57:05,680
going to replace

1623
00:57:05,680 --> 00:57:07,280
at least some of the memory corruption

1624
00:57:07,280 --> 00:57:09,359
components in chains with other logic

1625
00:57:09,359 --> 00:57:10,400
flaws

1626
00:57:10,400 --> 00:57:13,200
because uh they're increasingly relevant

1627
00:57:13,200 --> 00:57:15,520
they're going to be able to uh they're

1628
00:57:15,520 --> 00:57:18,160
much cheaper to maintain uh and they're

1629
00:57:18,160 --> 00:57:20,240
going to be able to achieve uh you know

1630
00:57:20,240 --> 00:57:21,839
the desired effect

1631
00:57:21,839 --> 00:57:23,839
and third um

1632
00:57:23,839 --> 00:57:27,200
defense has profited in two

1633
00:57:27,200 --> 00:57:29,680
large ways in recent history i think one

1634
00:57:29,680 --> 00:57:32,319
is like i said offensive tooling is able

1635
00:57:32,319 --> 00:57:34,480
to do less and less over time but more

1636
00:57:34,480 --> 00:57:36,799
importantly um i think the biggest gain

1637
00:57:36,799 --> 00:57:40,000
defense has made is um in defense is in

1638
00:57:40,000 --> 00:57:42,880
detection capability um because offense

1639
00:57:42,880 --> 00:57:44,240
can do less

1640
00:57:44,240 --> 00:57:46,720
and because defense can leverage scale

1641
00:57:46,720 --> 00:57:49,040
and cloud infrastructure and

1642
00:57:49,040 --> 00:57:51,359
you know software as a service type

1643
00:57:51,359 --> 00:57:52,720
ecosystems where they're collecting

1644
00:57:52,720 --> 00:57:55,680
telemetry they can um they're in a

1645
00:57:55,680 --> 00:57:58,480
position to be able to more accurately

1646
00:57:58,480 --> 00:58:01,680
detect um even targeted attacks at scale

1647
00:58:01,680 --> 00:58:02,799
um

1648
00:58:02,799 --> 00:58:05,200
and uh you know as

1649
00:58:05,200 --> 00:58:07,119
a lot of their detection techniques at

1650
00:58:07,119 --> 00:58:08,799
the moment might not be very good but

1651
00:58:08,799 --> 00:58:10,880
the infrastructure is in place where as

1652
00:58:10,880 --> 00:58:13,359
it improves um they've got a playing

1653
00:58:13,359 --> 00:58:15,760
field that will be advantageous to them

1654
00:58:15,760 --> 00:58:18,240
and so i think possibly what will happen

1655
00:58:18,240 --> 00:58:20,319
is the defense

1656
00:58:20,319 --> 00:58:21,760
the adage that i said at the beginning

1657
00:58:21,760 --> 00:58:23,359
of this talk defense needs to be right

1658
00:58:23,359 --> 00:58:24,960
every time offense only needs to be

1659
00:58:24,960 --> 00:58:27,760
right once will possibly be inverted if

1660
00:58:27,760 --> 00:58:30,079
you're performing an offensive attack um

1661
00:58:30,079 --> 00:58:31,440
you're going to have to make sure you

1662
00:58:31,440 --> 00:58:33,200
don't make mistakes because it'll be

1663
00:58:33,200 --> 00:58:35,599
easier and easier to get detected and

1664
00:58:35,599 --> 00:58:38,079
you're throwing more and more expensive

1665
00:58:38,079 --> 00:58:39,520
zero-day

1666
00:58:39,520 --> 00:58:40,720
at this

1667
00:58:40,720 --> 00:58:43,200
you know at your targets so

1668
00:58:43,200 --> 00:58:46,000
um yeah it's definitely uh interesting

1669
00:58:46,000 --> 00:58:47,280
times ahead

1670
00:58:47,280 --> 00:58:49,520
uh so that's the end of my presentation

1671
00:58:49,520 --> 00:58:51,520
exactly one hour

1672
00:58:51,520 --> 00:58:54,720
and i'm going to be moving over to a q a

1673
00:58:54,720 --> 00:58:56,720
i believe

1674
00:58:56,720 --> 00:58:59,119
so uh anyone that's interested in

1675
00:58:59,119 --> 00:59:00,480
following up asking questions you can

1676
00:59:00,480 --> 00:59:02,799
join the discord or

1677
00:59:02,799 --> 00:59:04,960
and they'll ask me the questions in the

1678
00:59:04,960 --> 00:59:06,160
q a

1679
00:59:06,160 --> 00:59:09,160
thanks

