1
00:00:09,599 --> 00:00:11,599
okay welcome my talk

2
00:00:11,599 --> 00:00:14,920
network is container escape in

3
00:00:14,920 --> 00:00:18,640
2021 my name is richa and i'm from arms

4
00:00:18,640 --> 00:00:19,920
group

5
00:00:19,920 --> 00:00:22,240
so first of all let me

6
00:00:22,240 --> 00:00:25,680
introduce myself and i am a platform

7
00:00:25,680 --> 00:00:28,240
infrastructure security engineer and

8
00:00:28,240 --> 00:00:29,359
group

9
00:00:29,359 --> 00:00:32,558
and my work includes security research

10
00:00:32,558 --> 00:00:34,800
and the security development

11
00:00:34,800 --> 00:00:36,800
and my interest

12
00:00:36,800 --> 00:00:39,200
includes all the low-level materials

13
00:00:39,200 --> 00:00:41,120
from the bolognese kernel the

14
00:00:41,120 --> 00:00:46,320
regeneration container and the security

15
00:00:46,480 --> 00:00:47,280
i

16
00:00:47,280 --> 00:00:49,520
i have been a security researcher for a

17
00:00:49,520 --> 00:00:51,520
long time and i

18
00:00:51,520 --> 00:00:54,480
give some talks in that school kansas

19
00:00:54,480 --> 00:00:57,199
west and assassin

20
00:00:57,199 --> 00:00:58,399
so

21
00:00:58,399 --> 00:01:01,359
okay this is the agenda

22
00:01:01,359 --> 00:01:03,520
well first of all i will talk about the

23
00:01:03,520 --> 00:01:04,799
company's

24
00:01:04,799 --> 00:01:07,280
get concept

25
00:01:07,280 --> 00:01:09,680
and also this will include some of the

26
00:01:09,680 --> 00:01:12,720
container concepted cells

27
00:01:12,720 --> 00:01:15,759
as we know container is a hot topic in

28
00:01:15,759 --> 00:01:16,880
our dish

29
00:01:16,880 --> 00:01:20,720
i'll open the container security also

30
00:01:20,720 --> 00:01:22,640
for all

31
00:01:22,640 --> 00:01:25,280
topics in security research

32
00:01:25,280 --> 00:01:27,360
as we know

33
00:01:27,360 --> 00:01:28,320
there are

34
00:01:28,320 --> 00:01:31,040
there are a lot of containers get

35
00:01:31,040 --> 00:01:34,240
message has been taught and discussed

36
00:01:34,240 --> 00:01:36,720
but as the

37
00:01:36,720 --> 00:01:38,640
traditional container here are near 1c

38
00:01:38,640 --> 00:01:41,040
container

39
00:01:41,040 --> 00:01:45,119
shares the same color with the host so

40
00:01:45,119 --> 00:01:49,360
there are always new content escape

41
00:01:49,600 --> 00:01:50,880
and so

42
00:01:50,880 --> 00:01:53,520
in the second part i will talk about my

43
00:01:53,520 --> 00:01:54,799
founding of

44
00:01:54,799 --> 00:01:57,920
three new content escape measures

45
00:01:57,920 --> 00:02:00,560
this includes following

46
00:02:00,560 --> 00:02:03,040
first of all the

47
00:02:03,040 --> 00:02:06,399
the new measure is the informant misc

48
00:02:06,399 --> 00:02:07,520
on

49
00:02:07,520 --> 00:02:10,560
the user model health escape

50
00:02:10,560 --> 00:02:13,920
then i will talk about the ebps

51
00:02:13,920 --> 00:02:18,319
escape and this is not the famous epdf

52
00:02:18,319 --> 00:02:20,720
can availability escape methods part of

53
00:02:20,720 --> 00:02:22,800
the eppf can

54
00:02:22,800 --> 00:02:26,720
use the dual container exchange itself

55
00:02:26,720 --> 00:02:30,640
the final escape measures in

56
00:02:30,640 --> 00:02:33,599
from the virtual machine monitor cup

57
00:02:33,599 --> 00:02:34,480
and

58
00:02:34,480 --> 00:02:37,599
after discuss the new

59
00:02:37,599 --> 00:02:39,680
container skip methods where i will talk

60
00:02:39,680 --> 00:02:41,840
about the difference

61
00:02:41,840 --> 00:02:42,720
and

62
00:02:42,720 --> 00:02:45,519
here we can see how to defend on this

63
00:02:45,519 --> 00:02:46,319
new

64
00:02:46,319 --> 00:02:47,599
new

65
00:02:47,599 --> 00:02:50,239
escape measures

66
00:02:50,239 --> 00:02:52,640
okay let's go

67
00:02:52,640 --> 00:02:54,879
let's first talk about the container

68
00:02:54,879 --> 00:02:57,280
sketch

69
00:02:59,680 --> 00:03:02,239
here i want to make it kind of

70
00:03:02,239 --> 00:03:05,280
in a stock uh i mean container is a

71
00:03:05,280 --> 00:03:07,599
challenge formula which means three

72
00:03:07,599 --> 00:03:09,760
container and

73
00:03:09,760 --> 00:03:13,280
is made up of namespace c group and

74
00:03:13,280 --> 00:03:16,239
overlays

75
00:03:16,239 --> 00:03:19,360
the container is a lightweight os level

76
00:03:19,360 --> 00:03:21,200
virtualization

77
00:03:21,200 --> 00:03:22,239
and

78
00:03:22,239 --> 00:03:25,120
the docker is the first influence in pre

79
00:03:25,120 --> 00:03:28,159
implementation industry so i will also

80
00:03:28,159 --> 00:03:30,239
talk about docker

81
00:03:30,239 --> 00:03:32,799
docker

82
00:03:32,799 --> 00:03:34,080
okay

83
00:03:34,080 --> 00:03:35,440
now

84
00:03:35,440 --> 00:03:38,080
container container is

85
00:03:38,080 --> 00:03:39,760
uh often compared with the

86
00:03:39,760 --> 00:03:42,239
virtualization and they

87
00:03:42,239 --> 00:03:47,599
share the same um return virtualized

88
00:03:54,480 --> 00:03:57,360
here this picture shows

89
00:03:57,360 --> 00:04:01,519
the return which virtual machine model

90
00:04:01,519 --> 00:04:03,840
there is a way where mm which are

91
00:04:03,840 --> 00:04:06,879
machine monitor and to obstruct the

92
00:04:06,879 --> 00:04:09,040
whole virtual machine tool

93
00:04:09,040 --> 00:04:11,920
to the operator to the virtual machine

94
00:04:11,920 --> 00:04:13,760
and

95
00:04:13,760 --> 00:04:16,639
the return machine can have different

96
00:04:16,639 --> 00:04:18,560
operating system and

97
00:04:18,560 --> 00:04:19,600
they are

98
00:04:19,600 --> 00:04:21,279
not aware of

99
00:04:21,279 --> 00:04:25,759
their wrong ends which return machine

100
00:04:25,759 --> 00:04:26,880
and

101
00:04:26,880 --> 00:04:28,880
and this is

102
00:04:28,880 --> 00:04:31,199
this is the

103
00:04:31,199 --> 00:04:33,280
container architecture so there is a

104
00:04:33,280 --> 00:04:36,400
docker engine who can who is used to

105
00:04:36,400 --> 00:04:39,199
create container every container also

106
00:04:39,199 --> 00:04:40,400
has his

107
00:04:40,400 --> 00:04:41,520
uh

108
00:04:41,520 --> 00:04:43,759
absolutely

109
00:04:43,759 --> 00:04:47,040
long-time environment

110
00:04:48,240 --> 00:04:50,479
um

111
00:04:51,520 --> 00:04:54,000
the most important most

112
00:04:54,000 --> 00:04:56,560
the most important difference between

113
00:04:56,560 --> 00:04:58,800
container and vm is that

114
00:04:58,800 --> 00:04:59,600
the

115
00:04:59,600 --> 00:05:02,880
container share the same kernel and

116
00:05:02,880 --> 00:05:06,800
the vm has his own kernel

117
00:05:06,800 --> 00:05:10,160
so sharing the kernel with the host is

118
00:05:10,160 --> 00:05:12,960
the biggest tank service

119
00:05:12,960 --> 00:05:16,400
of the container security

120
00:05:16,400 --> 00:05:18,880
okay so let's talk more about the

121
00:05:18,880 --> 00:05:20,800
container container is

122
00:05:20,800 --> 00:05:23,120
made up of lamps based thing groups and

123
00:05:23,120 --> 00:05:24,639
the unit address

124
00:05:24,639 --> 00:05:28,240
the lamp space is used to give different

125
00:05:28,240 --> 00:05:31,600
view of system resources to container

126
00:05:31,600 --> 00:05:34,000
the for example

127
00:05:34,000 --> 00:05:36,639
the piagging space is

128
00:05:36,639 --> 00:05:39,440
gives the containers different

129
00:05:39,440 --> 00:05:41,039
chatty number

130
00:05:41,039 --> 00:05:41,840
and

131
00:05:41,840 --> 00:05:43,039
the the

132
00:05:43,039 --> 00:05:45,120
mountain space gives the container

133
00:05:45,120 --> 00:05:46,960
different amount of points

134
00:05:46,960 --> 00:05:49,440
the network name space gives

135
00:05:49,440 --> 00:05:52,160
then gives the container different

136
00:05:52,160 --> 00:05:55,120
networking standing

137
00:05:55,120 --> 00:05:58,639
the thick groups is used to

138
00:05:58,639 --> 00:06:01,600
restrict the contents resource

139
00:06:01,600 --> 00:06:04,800
so that the container cannot consume a

140
00:06:04,800 --> 00:06:07,199
lot of the

141
00:06:07,199 --> 00:06:10,400
system resources for example

142
00:06:10,400 --> 00:06:13,759
the cpu and the memory resource

143
00:06:13,759 --> 00:06:17,520
the unifs is used to image share and

144
00:06:17,520 --> 00:06:19,039
distribution

145
00:06:19,039 --> 00:06:20,960
and

146
00:06:20,960 --> 00:06:23,039
there are a lot of containers and they

147
00:06:23,039 --> 00:06:24,000
are

148
00:06:24,000 --> 00:06:28,639
they can share some of the file systems

149
00:06:28,639 --> 00:06:34,720
so this is a unifies what does this

150
00:06:34,720 --> 00:06:37,680
okay and the same as this as we have

151
00:06:37,680 --> 00:06:39,600
said container

152
00:06:39,600 --> 00:06:42,639
securities root cause

153
00:06:42,639 --> 00:06:44,560
have a

154
00:06:44,560 --> 00:06:47,120
share the kernel

155
00:06:47,120 --> 00:06:50,639
this hazard

156
00:06:47,120 --> 00:06:50,639
the biggest attack surface

157
00:06:50,639 --> 00:06:53,280
this is because

158
00:06:53,280 --> 00:06:56,080
there is no free launch

159
00:06:56,080 --> 00:06:57,199
the way

160
00:06:57,199 --> 00:06:59,599
the way the container has a better

161
00:06:59,599 --> 00:07:02,880
performance because of share the kernel

162
00:07:02,880 --> 00:07:04,160
and

163
00:07:04,160 --> 00:07:06,560
and has less security than we are

164
00:07:06,560 --> 00:07:08,720
because also because of this share the

165
00:07:08,720 --> 00:07:10,560
kernel

166
00:07:10,560 --> 00:07:13,120
so this makes the container

167
00:07:13,120 --> 00:07:15,919
and the kernels

168
00:07:15,919 --> 00:07:19,520
weeks actually absolutely

169
00:07:19,520 --> 00:07:21,680
so here the same kernel has been the

170
00:07:21,680 --> 00:07:24,880
biggest tank service

171
00:07:25,680 --> 00:07:26,800
the most

172
00:07:26,800 --> 00:07:29,599
severity of container security container

173
00:07:29,599 --> 00:07:31,599
escape

174
00:07:31,599 --> 00:07:34,240
here this picture shows some of

175
00:07:34,240 --> 00:07:35,680
some of the

176
00:07:35,680 --> 00:07:38,639
container escape methods mostly it can

177
00:07:38,639 --> 00:07:41,599
be classified with three methods three

178
00:07:41,599 --> 00:07:43,280
kinds of methods

179
00:07:43,280 --> 00:07:45,120
the first is containerized engine

180
00:07:45,120 --> 00:07:47,520
vulnerabilities

181
00:07:47,520 --> 00:07:49,440
this means

182
00:07:49,440 --> 00:07:50,560
this

183
00:07:50,560 --> 00:07:53,039
docker-less container engine has

184
00:07:53,039 --> 00:07:56,000
has some waterproof so the container can

185
00:07:56,000 --> 00:07:58,240
leverage this liability to escape to

186
00:07:58,240 --> 00:07:59,440
host

187
00:07:59,440 --> 00:08:02,000
and the second is the pre-related cap

188
00:08:02,000 --> 00:08:05,199
and censorship amounts

189
00:08:05,919 --> 00:08:08,879
every every process you need to

190
00:08:08,879 --> 00:08:09,840
can

191
00:08:09,840 --> 00:08:12,960
have different capabilities

192
00:08:12,960 --> 00:08:16,240
completing this make new case a

193
00:08:16,240 --> 00:08:18,720
listed privileged

194
00:08:18,720 --> 00:08:21,120
system

195
00:08:21,120 --> 00:08:22,720
so if

196
00:08:22,720 --> 00:08:25,360
the container processes has

197
00:08:25,360 --> 00:08:27,919
some prevailing capabilities it can

198
00:08:27,919 --> 00:08:29,759
leverage this to

199
00:08:29,759 --> 00:08:32,159
escape to the container

200
00:08:32,159 --> 00:08:34,880
the sensor tube amounts means that

201
00:08:34,880 --> 00:08:37,120
they will change the traffic system

202
00:08:37,120 --> 00:08:40,958
length amounts to a container this is uh

203
00:08:40,958 --> 00:08:43,279
this is this sensitive monster often i

204
00:08:43,279 --> 00:08:46,560
will choose a file system and

205
00:08:46,560 --> 00:08:49,040
they are they are the

206
00:08:49,040 --> 00:08:52,240
the kernel exports the the kernel

207
00:08:52,240 --> 00:08:54,320
information and

208
00:08:54,320 --> 00:08:57,279
control options to user space and if

209
00:08:57,279 --> 00:08:58,240
this

210
00:08:58,240 --> 00:09:00,800
um fastest amounts to the container the

211
00:09:00,800 --> 00:09:03,519
container can liberate this to

212
00:09:03,519 --> 00:09:06,399
with current information and

213
00:09:06,399 --> 00:09:08,320
the contrary

214
00:09:08,320 --> 00:09:10,320
kernel behaviors

215
00:09:10,320 --> 00:09:12,959
and as we see the container share the

216
00:09:12,959 --> 00:09:14,959
same kernel with the host

217
00:09:14,959 --> 00:09:19,200
so the container can initial

218
00:09:19,200 --> 00:09:21,040
size cost to the

219
00:09:21,040 --> 00:09:23,519
come to their kernel to trigger their

220
00:09:23,519 --> 00:09:25,440
vulnerabilities in the kernel so the

221
00:09:25,440 --> 00:09:27,279
kernel vulnerabilities is

222
00:09:27,279 --> 00:09:28,640
one of the

223
00:09:28,640 --> 00:09:31,600
source of container escape

224
00:09:31,600 --> 00:09:32,480
okay

225
00:09:32,480 --> 00:09:35,360
here i will talk about mostly

226
00:09:35,360 --> 00:09:38,320
of the privileged camp and the

227
00:09:38,320 --> 00:09:41,120
the census romance and they are

228
00:09:41,120 --> 00:09:44,720
uh related with this talk uh i will hear

229
00:09:44,720 --> 00:09:47,120
here i talk about the three

230
00:09:47,120 --> 00:09:49,600
capabilities the first is campus module

231
00:09:49,600 --> 00:09:52,800
as we can see this this cam is used to

232
00:09:52,800 --> 00:09:54,399
local

233
00:09:54,399 --> 00:09:57,440
a kernel module to the kernel so if the

234
00:09:57,440 --> 00:10:02,160
container has this cap it can't load a

235
00:10:02,160 --> 00:10:06,480
a kernel kernel module to the um kernel

236
00:10:06,480 --> 00:10:09,519
and can execute the actuality code

237
00:10:09,519 --> 00:10:13,120
this is the most civility

238
00:10:13,120 --> 00:10:15,519
service camp and the second is the

239
00:10:15,519 --> 00:10:17,600
campsite admin this

240
00:10:17,600 --> 00:10:21,279
this campus means me has a lot of

241
00:10:21,279 --> 00:10:24,320
private operation for example it can use

242
00:10:24,320 --> 00:10:27,440
the jewelry amongst the red only

243
00:10:27,440 --> 00:10:31,600
month to rewrite so that we can

244
00:10:31,600 --> 00:10:34,240
we can read we can

245
00:10:34,240 --> 00:10:37,440
we can write we can write the virtual

246
00:10:37,440 --> 00:10:40,240
file systems and the control controller

247
00:10:40,240 --> 00:10:42,640
kernel

248
00:10:42,720 --> 00:10:45,519
and the third is campgs research this is

249
00:10:45,519 --> 00:10:47,680
used to

250
00:10:47,680 --> 00:10:49,680
to this camp

251
00:10:49,680 --> 00:10:53,600
is used to bypass the red and search

252
00:10:53,600 --> 00:10:56,079
permissions

253
00:10:56,079 --> 00:10:58,880
this can be used to read the host file

254
00:10:58,880 --> 00:11:01,440
in the container

255
00:11:01,440 --> 00:11:03,279
the sensitive amounts

256
00:11:03,279 --> 00:11:06,560
the sensitive amounts is

257
00:11:06,560 --> 00:11:07,519
the

258
00:11:07,519 --> 00:11:09,519
is the virtual transaction that

259
00:11:09,519 --> 00:11:11,839
currently exports

260
00:11:11,839 --> 00:11:15,680
here is here shows the idea

261
00:11:15,680 --> 00:11:17,040
it also

262
00:11:17,040 --> 00:11:18,000
also

263
00:11:18,000 --> 00:11:21,519
exports the interface of the wareface

264
00:11:21,519 --> 00:11:22,399
and

265
00:11:22,399 --> 00:11:23,440
in the

266
00:11:23,440 --> 00:11:26,000
in the container or normal process it

267
00:11:26,000 --> 00:11:30,000
can read or write to provo fs file

268
00:11:30,000 --> 00:11:31,440
in mostly

269
00:11:31,440 --> 00:11:34,240
the real handler will read some of the

270
00:11:34,240 --> 00:11:36,320
kernel information choosing

271
00:11:36,320 --> 00:11:38,880
process and the right handle can control

272
00:11:38,880 --> 00:11:42,279
kernel behavior

273
00:11:42,320 --> 00:11:44,959
okay let's uh let's talk about the user

274
00:11:44,959 --> 00:11:46,399
model helper

275
00:11:46,399 --> 00:11:48,640
program

276
00:11:48,640 --> 00:11:51,279
the user mode helper is used to run

277
00:11:51,279 --> 00:11:54,639
program from linux kernel

278
00:11:54,639 --> 00:11:57,360
here shows the normal

279
00:11:57,360 --> 00:12:01,600
normal path career as a process

280
00:12:01,600 --> 00:12:02,639
but

281
00:12:02,639 --> 00:12:04,240
the process is

282
00:12:04,240 --> 00:12:06,959
launched and the user space but the user

283
00:12:06,959 --> 00:12:11,600
mode helper is called by the kernel

284
00:12:11,600 --> 00:12:13,440
for example

285
00:12:13,440 --> 00:12:17,360
if we if the kernel decides to want to

286
00:12:17,360 --> 00:12:19,760
know the model it will call the user

287
00:12:19,760 --> 00:12:23,760
mode help mod pro and this will execute

288
00:12:23,760 --> 00:12:26,480
in the kernel

289
00:12:26,560 --> 00:12:29,120
kernel model helper is called by this

290
00:12:29,120 --> 00:12:32,399
function called motor health

291
00:12:32,399 --> 00:12:36,160
um so a lot of countries or some

292
00:12:36,160 --> 00:12:38,399
a lot of

293
00:12:38,399 --> 00:12:42,000
help has used to container escape

294
00:12:42,000 --> 00:12:45,200
uh here is the model

295
00:12:45,200 --> 00:12:48,320
so first of all the con the container

296
00:12:48,320 --> 00:12:50,079
right here

297
00:12:50,079 --> 00:12:52,800
for example let's test the message

298
00:12:52,800 --> 00:12:54,639
um

299
00:12:54,639 --> 00:12:57,440
this this test stage has something like

300
00:12:57,440 --> 00:13:00,320
you can do some malicious behavior

301
00:13:00,320 --> 00:13:02,000
managers activities

302
00:13:02,000 --> 00:13:05,279
for example you can read the shadow

303
00:13:05,279 --> 00:13:08,880
file and put here put this file in this

304
00:13:08,880 --> 00:13:11,760
uh also this terms directory

305
00:13:11,760 --> 00:13:14,480
then we can then the container parents

306
00:13:14,480 --> 00:13:15,279
can

307
00:13:15,279 --> 00:13:17,760
can right here for patch to kernel here

308
00:13:17,760 --> 00:13:21,519
this here does is and then in the host

309
00:13:21,519 --> 00:13:23,040
the kernel

310
00:13:23,040 --> 00:13:25,920
trigger the help xccv this can be

311
00:13:25,920 --> 00:13:29,360
triggered from container or the other

312
00:13:29,360 --> 00:13:32,399
the other process or the other arguments

313
00:13:32,399 --> 00:13:35,920
and then they help well well xp executed

314
00:13:35,920 --> 00:13:38,800
and read this shadow file to this

315
00:13:38,800 --> 00:13:41,199
to to the

316
00:13:41,199 --> 00:13:44,320
container process file systems

317
00:13:44,320 --> 00:13:46,240
and then the container can read this

318
00:13:46,240 --> 00:13:49,600
shadow okay this shadow is

319
00:13:49,600 --> 00:13:52,399
the content is the hosts

320
00:13:52,399 --> 00:13:54,240
it is a shadow file

321
00:13:54,240 --> 00:13:57,440
this is a this is the container escape

322
00:13:57,440 --> 00:14:01,040
of user mode helper program

323
00:14:01,040 --> 00:14:03,360
you should not have there are a lot of

324
00:14:03,360 --> 00:14:06,480
user mode health for example

325
00:14:06,480 --> 00:14:09,040
the motor probe is used to

326
00:14:09,040 --> 00:14:11,680
um know the module and the core pattern

327
00:14:11,680 --> 00:14:14,800
is used to

328
00:14:14,959 --> 00:14:18,880
to be called when they when they

329
00:14:18,880 --> 00:14:21,440
when when the program has

330
00:14:21,440 --> 00:14:23,920
has crashed the units were produced

331
00:14:23,920 --> 00:14:26,639
through their device model and really

332
00:14:26,639 --> 00:14:29,760
certainly is used in the group

333
00:14:29,760 --> 00:14:32,959
the bin format misc is used to register

334
00:14:32,959 --> 00:14:34,880
a

335
00:14:34,880 --> 00:14:37,040
user space handler

336
00:14:37,040 --> 00:14:39,600
this has been talked about but

337
00:14:39,600 --> 00:14:41,760
as fans i know there is no public

338
00:14:41,760 --> 00:14:43,680
exploits

339
00:14:43,680 --> 00:14:47,040
in fact the first method is this

340
00:14:47,040 --> 00:14:50,000
ok then let's talk about the

341
00:14:50,000 --> 00:14:53,760
new container escape methods

342
00:14:55,040 --> 00:14:57,279
the first is container escapes through

343
00:14:57,279 --> 00:14:59,760
information misc

344
00:14:59,760 --> 00:15:02,320
okay that's the first introduction the

345
00:15:02,320 --> 00:15:06,639
performance mix it is the file system

346
00:15:06,639 --> 00:15:09,519
it is in the best it is in progress

347
00:15:09,519 --> 00:15:10,560
system

348
00:15:10,560 --> 00:15:11,440
and

349
00:15:11,440 --> 00:15:14,000
this implement this communism allow

350
00:15:14,000 --> 00:15:15,440
kernel

351
00:15:15,440 --> 00:15:17,680
and our kernel

352
00:15:17,680 --> 00:15:19,839
execute any

353
00:15:19,839 --> 00:15:21,760
any any

354
00:15:21,760 --> 00:15:25,920
any format file to be executed

355
00:15:28,639 --> 00:15:31,839
because the kernel can't recognize any

356
00:15:31,839 --> 00:15:36,160
any any file of this it will call

357
00:15:36,160 --> 00:15:38,800
users based program

358
00:15:38,800 --> 00:15:41,040
registered by by the

359
00:15:41,040 --> 00:15:43,759
user space

360
00:15:44,720 --> 00:15:46,480
and

361
00:15:46,480 --> 00:15:48,959
and this allow attribute file form to be

362
00:15:48,959 --> 00:15:51,440
executed this there are a lot of use

363
00:15:51,440 --> 00:15:53,199
cases for this

364
00:15:53,199 --> 00:15:55,759
for example if we want to

365
00:15:55,759 --> 00:15:58,240
run both the application

366
00:15:58,240 --> 00:16:01,600
in english because meters itself cannot

367
00:16:01,600 --> 00:16:05,040
reject cannot not execute this button if

368
00:16:05,040 --> 00:16:07,040
we execute

369
00:16:07,040 --> 00:16:10,320
but we register a

370
00:16:10,320 --> 00:16:13,279
interpreter and then this interpreter

371
00:16:13,279 --> 00:16:14,079
can

372
00:16:14,079 --> 00:16:17,920
run our dos application

373
00:16:18,160 --> 00:16:20,079
so this mirror mix

374
00:16:20,079 --> 00:16:21,120
can

375
00:16:21,120 --> 00:16:24,800
can let the kernel execute any

376
00:16:24,800 --> 00:16:27,519
any file

377
00:16:27,680 --> 00:16:30,160
um let's show the example of the

378
00:16:30,160 --> 00:16:32,160
information misc

379
00:16:32,160 --> 00:16:33,040
here

380
00:16:33,040 --> 00:16:36,160
first of all we pre prepare a

381
00:16:36,160 --> 00:16:38,079
executable file

382
00:16:38,079 --> 00:16:41,360
here we see we call all we create of our

383
00:16:41,360 --> 00:16:44,480
lambda test format and the content is

384
00:16:44,480 --> 00:16:46,560
uh aaa

385
00:16:46,560 --> 00:16:48,880
and here we can see we we make it

386
00:16:48,880 --> 00:16:52,240
executable and here we execute it but

387
00:16:52,240 --> 00:16:55,199
let's see how how the kernel

388
00:16:55,199 --> 00:16:56,800
executed this

389
00:16:56,800 --> 00:16:59,120
first way after we prepare this

390
00:16:59,120 --> 00:17:03,120
executable file we prepare this handler

391
00:17:03,120 --> 00:17:07,679
so we pre we create a file file and

392
00:17:07,679 --> 00:17:10,240
we just we just to

393
00:17:10,240 --> 00:17:12,000
print printer

394
00:17:12,000 --> 00:17:14,400
a tester format message

395
00:17:14,400 --> 00:17:17,359
and we also should make this exclusive

396
00:17:17,359 --> 00:17:20,079
then here we registered with

397
00:17:20,079 --> 00:17:23,359
here we register a executable handler

398
00:17:23,359 --> 00:17:26,559
this handle this header will

399
00:17:26,559 --> 00:17:28,720
will

400
00:17:28,720 --> 00:17:31,360
will match will match the file that

401
00:17:31,360 --> 00:17:32,880
begins with

402
00:17:32,880 --> 00:17:35,360
three aaa

403
00:17:35,360 --> 00:17:38,640
and here we can see the information

404
00:17:38,640 --> 00:17:41,919
magical aaa and then we execute

405
00:17:41,919 --> 00:17:45,440
this refers to an executable and then we

406
00:17:45,440 --> 00:17:47,840
can see it prints the texture from that

407
00:17:47,840 --> 00:17:49,919
message which is

408
00:17:49,919 --> 00:17:52,559
the handle

409
00:17:53,520 --> 00:17:56,240
okay let's see the information

410
00:17:56,240 --> 00:17:58,720
internals this is the

411
00:17:58,720 --> 00:18:00,720
usage cash

412
00:18:00,720 --> 00:18:01,840
usage

413
00:18:01,840 --> 00:18:04,480
the register interface is in this file

414
00:18:04,480 --> 00:18:07,360
and we can show this with the

415
00:18:07,360 --> 00:18:10,000
uh implement the helper's name

416
00:18:10,000 --> 00:18:12,840
we can't clean it with

417
00:18:12,840 --> 00:18:16,880
a one plus one minus one

418
00:18:16,880 --> 00:18:18,080
to this

419
00:18:18,080 --> 00:18:20,320
here is the field of the

420
00:18:20,320 --> 00:18:23,200
data we need to register the type means

421
00:18:23,200 --> 00:18:24,080
we

422
00:18:24,080 --> 00:18:26,799
recognize the file with magical or

423
00:18:26,799 --> 00:18:29,440
extension here away with magic and the

424
00:18:29,440 --> 00:18:30,799
offset means

425
00:18:30,799 --> 00:18:33,600
where we list that to to do the match

426
00:18:33,600 --> 00:18:36,240
work and the magic is a bit

427
00:18:36,240 --> 00:18:38,160
they did her

428
00:18:38,160 --> 00:18:40,799
match and the mask is due to to show

429
00:18:40,799 --> 00:18:43,039
which patch this is running and the

430
00:18:43,039 --> 00:18:45,039
interpreter is the

431
00:18:45,039 --> 00:18:46,960
most important this

432
00:18:46,960 --> 00:18:48,880
this is the full patch of the

433
00:18:48,880 --> 00:18:50,720
interpreter that will be called by the

434
00:18:50,720 --> 00:18:53,120
kernel

435
00:18:54,480 --> 00:18:56,720
here we can say the interpreter

436
00:18:56,720 --> 00:18:58,320
is this and

437
00:18:58,320 --> 00:19:01,520
he will experience

438
00:19:01,520 --> 00:19:05,120
interprets the file with aaa as the

439
00:19:05,120 --> 00:19:07,678
beginning

440
00:19:08,000 --> 00:19:09,840
oh let's see that implement misc

441
00:19:09,840 --> 00:19:11,520
internals

442
00:19:11,520 --> 00:19:14,720
uh next parliament of romance at least

443
00:19:14,720 --> 00:19:16,320
this list

444
00:19:16,320 --> 00:19:19,120
register a lot of

445
00:19:19,120 --> 00:19:21,200
a lot of formats that

446
00:19:21,200 --> 00:19:24,080
kernel can executed for example the

447
00:19:24,080 --> 00:19:25,120
badge

448
00:19:25,120 --> 00:19:29,440
the the arf will ferment

449
00:19:29,440 --> 00:19:33,520
one way when it does exe saver uses code

450
00:19:33,520 --> 00:19:35,039
the kernel will

451
00:19:35,039 --> 00:19:37,120
search the list

452
00:19:37,120 --> 00:19:38,720
and

453
00:19:38,720 --> 00:19:41,520
if one format has been found not to

454
00:19:41,520 --> 00:19:44,240
match the the executable file

455
00:19:44,240 --> 00:19:46,000
then

456
00:19:46,000 --> 00:19:49,840
the load panel will be will be

457
00:19:49,840 --> 00:19:51,600
called and the

458
00:19:51,600 --> 00:19:54,960
file will be executed

459
00:19:54,960 --> 00:19:56,400
okay so

460
00:19:56,400 --> 00:19:59,120
let's say different misc in this

461
00:19:59,120 --> 00:20:00,400
list

462
00:20:00,400 --> 00:20:03,760
the misc format entries is insert into

463
00:20:03,760 --> 00:20:05,600
the head of the format

464
00:20:05,600 --> 00:20:07,760
here we can see the heads

465
00:20:07,760 --> 00:20:09,679
so if two hander matches the same

466
00:20:09,679 --> 00:20:12,240
executable file the misc format is

467
00:20:12,240 --> 00:20:15,919
selected this means if for example

468
00:20:15,919 --> 00:20:19,440
this difference this uh

469
00:20:19,440 --> 00:20:23,520
this entry is used to process elf this

470
00:20:23,520 --> 00:20:26,720
this entry is used to process bench file

471
00:20:26,720 --> 00:20:27,520
but

472
00:20:27,520 --> 00:20:29,440
if we

473
00:20:29,440 --> 00:20:33,039
if we registered a more

474
00:20:33,039 --> 00:20:34,640
a more

475
00:20:34,640 --> 00:20:37,919
precious match

476
00:20:37,919 --> 00:20:39,039
and

477
00:20:39,039 --> 00:20:40,480
if they

478
00:20:40,480 --> 00:20:43,520
if they if research process

479
00:20:43,520 --> 00:20:46,320
finds that our people mental

480
00:20:46,320 --> 00:20:49,520
profile is matched and it will call our

481
00:20:49,520 --> 00:20:52,400
our handler

482
00:20:54,400 --> 00:20:56,880
so this means that we can insert a new

483
00:20:56,880 --> 00:20:59,679
executable handle for elf and the bench

484
00:20:59,679 --> 00:21:00,400
this

485
00:21:00,400 --> 00:21:02,480
shows the idea

486
00:21:02,480 --> 00:21:04,799
first of all we can register

487
00:21:04,799 --> 00:21:07,039
a

488
00:21:08,240 --> 00:21:10,480
handle in operator or interpreter here

489
00:21:10,480 --> 00:21:13,440
units in the container file systems and

490
00:21:13,440 --> 00:21:17,120
it's red shadow and put here

491
00:21:17,120 --> 00:21:20,640
zoning the process can register

492
00:21:20,640 --> 00:21:22,640
a register uh

493
00:21:22,640 --> 00:21:25,919
from fermented handler and then now the

494
00:21:25,919 --> 00:21:28,159
kernel has a supplement for manhattan

495
00:21:28,159 --> 00:21:29,440
handler

496
00:21:29,440 --> 00:21:33,039
the kernel execute for example usually

497
00:21:33,039 --> 00:21:36,320
if someone excludes the the file in

498
00:21:36,320 --> 00:21:39,679
there in the host and then our

499
00:21:39,679 --> 00:21:40,720
our

500
00:21:40,720 --> 00:21:43,919
interpreter will be called and it will

501
00:21:43,919 --> 00:21:47,039
well read the shadow very shadow

502
00:21:47,039 --> 00:21:49,120
of the host and

503
00:21:49,120 --> 00:21:51,360
right in the choosing container faster

504
00:21:51,360 --> 00:21:53,760
story

505
00:21:55,600 --> 00:21:59,520
so this this this is the future of the

506
00:21:59,520 --> 00:22:00,720
containers

507
00:22:00,720 --> 00:22:03,360
escapes through different mix

508
00:22:03,360 --> 00:22:04,720
here we see

509
00:22:04,720 --> 00:22:06,240
we set this

510
00:22:06,240 --> 00:22:08,320
um this is the interpreter handle as

511
00:22:08,320 --> 00:22:10,559
this

512
00:22:10,559 --> 00:22:12,720
so it just the red shadow and put this

513
00:22:12,720 --> 00:22:15,440
file in the shadow and here we register

514
00:22:15,440 --> 00:22:17,280
a handle with this

515
00:22:17,280 --> 00:22:19,919
this means this offset means that this

516
00:22:19,919 --> 00:22:22,080
starts that mentally

517
00:22:22,080 --> 00:22:24,960
violently starts this magic uh

518
00:22:24,960 --> 00:22:27,039
muslim to the file

519
00:22:27,039 --> 00:22:29,200
which is used

520
00:22:29,200 --> 00:22:32,400
which which begins with

521
00:22:32,400 --> 00:22:35,840
this this this stress will be

522
00:22:35,840 --> 00:22:37,919
will be meant to our handler

523
00:22:37,919 --> 00:22:42,799
and the interpreter is is this

524
00:22:42,960 --> 00:22:46,480
so in our container and so

525
00:22:46,480 --> 00:22:48,640
the host prepared we can

526
00:22:48,640 --> 00:22:49,760
prepare

527
00:22:49,760 --> 00:22:51,039
a host

528
00:22:51,039 --> 00:22:53,600
host page

529
00:22:53,600 --> 00:22:56,640
here we can see this branch is

530
00:22:56,640 --> 00:22:59,280
is this bench file is matched with our

531
00:22:59,280 --> 00:23:00,320
pattern

532
00:23:00,320 --> 00:23:01,919
this begins with

533
00:23:01,919 --> 00:23:05,679
this string and the egg

534
00:23:05,679 --> 00:23:10,480
so when the host executes this this file

535
00:23:10,480 --> 00:23:13,039
into the kernel searchly

536
00:23:13,039 --> 00:23:15,919
formats lists and it will find our

537
00:23:15,919 --> 00:23:18,559
information risk is matched so the

538
00:23:18,559 --> 00:23:23,520
interpreter will be executed and it will

539
00:23:23,520 --> 00:23:25,919
it will read the shadow file and write

540
00:23:25,919 --> 00:23:29,679
it to the file systems so the con the

541
00:23:29,679 --> 00:23:32,000
container can read this shadow the

542
00:23:32,000 --> 00:23:33,679
shadow is the

543
00:23:33,679 --> 00:23:34,720
host

544
00:23:34,720 --> 00:23:37,679
shadow file

545
00:23:37,679 --> 00:23:39,760
okay here is the

546
00:23:39,760 --> 00:23:41,200
here is the

547
00:23:41,200 --> 00:23:45,039
picture of how we how how it does as

548
00:23:45,039 --> 00:23:46,240
as the

549
00:23:46,240 --> 00:23:49,840
um here we we start a container

550
00:23:49,840 --> 00:23:52,639
and notice

551
00:23:52,880 --> 00:23:54,159
when you two

552
00:23:54,159 --> 00:23:57,279
to two and the concession mean so here

553
00:23:57,279 --> 00:24:01,600
we remind this month probe a month

554
00:24:01,600 --> 00:24:04,480
remains the process fs

555
00:24:04,480 --> 00:24:06,400
from read owning to

556
00:24:06,400 --> 00:24:07,919
read writes

557
00:24:07,919 --> 00:24:10,559
and here we find the density

558
00:24:10,559 --> 00:24:12,000
um

559
00:24:12,000 --> 00:24:13,760
the the amount

560
00:24:13,760 --> 00:24:16,559
the file system of the container and

561
00:24:16,559 --> 00:24:18,799
here we write the

562
00:24:18,799 --> 00:24:21,919
the helper and here we register the

563
00:24:21,919 --> 00:24:26,559
the help they use in their interpreter

564
00:24:27,440 --> 00:24:28,799
so

565
00:24:28,799 --> 00:24:31,600
then in the host in the host we execute

566
00:24:31,600 --> 00:24:33,760
a match the file

567
00:24:33,760 --> 00:24:36,640
and we can say it it is it did nothing

568
00:24:36,640 --> 00:24:39,679
it did nothing just to read each station

569
00:24:39,679 --> 00:24:42,880
and write so in step three we can see

570
00:24:42,880 --> 00:24:44,240
them too

571
00:24:44,240 --> 00:24:47,120
then they tend tempo directory has the

572
00:24:47,120 --> 00:24:48,799
shadow file and

573
00:24:48,799 --> 00:24:49,520
we

574
00:24:49,520 --> 00:24:53,200
normally get the host file

575
00:24:56,480 --> 00:24:59,120
um okay let's see the second second

576
00:24:59,120 --> 00:25:00,720
example of

577
00:25:00,720 --> 00:25:02,159
information risk

578
00:25:02,159 --> 00:25:03,200
here we

579
00:25:03,200 --> 00:25:06,080
here just the

580
00:25:06,240 --> 00:25:09,120
example for replace the ear as well

581
00:25:09,120 --> 00:25:10,799
handler

582
00:25:10,799 --> 00:25:12,960
so oh wait

583
00:25:12,960 --> 00:25:15,440
we we we can see the

584
00:25:15,440 --> 00:25:17,440
errors program

585
00:25:17,440 --> 00:25:19,200
on hex

586
00:25:19,200 --> 00:25:21,840
and we found that in the

587
00:25:21,840 --> 00:25:25,279
in here we have two bytes so we use this

588
00:25:25,279 --> 00:25:26,840
two as a

589
00:25:26,840 --> 00:25:30,720
match and we register a handle for this

590
00:25:30,720 --> 00:25:33,360
file so when we

591
00:25:33,360 --> 00:25:36,640
so when the host executes ls we can see

592
00:25:36,640 --> 00:25:38,880
that

593
00:25:39,440 --> 00:25:41,760
we can see that the container contains

594
00:25:41,760 --> 00:25:44,720
the shadow file

595
00:25:44,799 --> 00:25:47,520
so this is this is shown and we can

596
00:25:47,520 --> 00:25:51,520
replace the erfr handle

597
00:25:51,679 --> 00:25:54,240
okay so let's talk about the second

598
00:25:54,240 --> 00:25:57,120
escape method escaped through

599
00:25:57,120 --> 00:25:59,918
ebps

600
00:26:00,240 --> 00:26:02,799
also also let's first introduce to the

601
00:26:02,799 --> 00:26:06,320
eppf concept ebpf is

602
00:26:06,320 --> 00:26:09,600
short for extended broccoli pancake

603
00:26:09,600 --> 00:26:11,279
filter it is

604
00:26:11,279 --> 00:26:16,400
originated from classic bpf in 1992

605
00:26:16,400 --> 00:26:19,120
it initially is used for packed

606
00:26:19,120 --> 00:26:20,559
filtering

607
00:26:20,559 --> 00:26:22,080
and but now it's

608
00:26:22,080 --> 00:26:23,200
it's

609
00:26:23,200 --> 00:26:26,000
used in a lot of places

610
00:26:26,000 --> 00:26:28,799
it's and restricted code to kernel at

611
00:26:28,799 --> 00:26:31,360
the wrong time

612
00:26:31,360 --> 00:26:37,200
ebpf has growing recent year very fast

613
00:26:37,200 --> 00:26:38,480
just like

614
00:26:38,480 --> 00:26:40,320
just like

615
00:26:40,320 --> 00:26:44,000
uh what javascript does for russia the

616
00:26:44,000 --> 00:26:47,200
ebps also enrich a lot of kernel in

617
00:26:47,200 --> 00:26:49,919
innovation

618
00:26:51,600 --> 00:26:54,640
ebcf has a lot of use cases for example

619
00:26:54,640 --> 00:26:56,880
the networking the changing the runtime

620
00:26:56,880 --> 00:26:58,880
security

621
00:26:58,880 --> 00:27:01,279
the first case the first use case for

622
00:27:01,279 --> 00:27:04,320
ebpf is in networking for example

623
00:27:04,320 --> 00:27:05,679
you can

624
00:27:05,679 --> 00:27:09,039
you can replace the ip tables with ebpf

625
00:27:09,039 --> 00:27:09,919
and

626
00:27:09,919 --> 00:27:12,320
also the transfer is

627
00:27:12,320 --> 00:27:15,039
is used is a is a

628
00:27:15,039 --> 00:27:18,240
important use case in for epgs and the

629
00:27:18,240 --> 00:27:21,520
recently ebpf used in the runtime

630
00:27:21,520 --> 00:27:24,640
security for example the focus

631
00:27:24,640 --> 00:27:28,799
is used to detect the

632
00:27:28,799 --> 00:27:31,600
the monitor's monitor's activities in

633
00:27:31,600 --> 00:27:32,399
the

634
00:27:32,399 --> 00:27:33,360
in the

635
00:27:33,360 --> 00:27:36,959
container or on the host

636
00:27:37,039 --> 00:27:40,159
okay this is the architecture of ebpf

637
00:27:40,159 --> 00:27:44,080
first of all we we can we program my

638
00:27:44,080 --> 00:27:47,760
programming bpf programs and maps and

639
00:27:47,760 --> 00:27:49,360
then we

640
00:27:49,360 --> 00:27:53,200
the lm llm compiler will combine this

641
00:27:53,200 --> 00:27:56,159
pro source file to batch code and

642
00:27:56,159 --> 00:27:59,360
we can use bps code to load this

643
00:27:59,360 --> 00:28:00,399
this

644
00:28:00,399 --> 00:28:03,360
program maps to kernel and uh the kernel

645
00:28:03,360 --> 00:28:06,159
will read the kernel will vary finance

646
00:28:06,159 --> 00:28:09,279
our bpf has no harm to such term and

647
00:28:09,279 --> 00:28:11,200
sometimes it will

648
00:28:11,200 --> 00:28:14,960
tie it will compare it to from the ebpf

649
00:28:14,960 --> 00:28:17,440
instruction to the machinative

650
00:28:17,440 --> 00:28:21,760
instruction and so when we have ebpf gra

651
00:28:21,760 --> 00:28:24,399
or when the ebpf grant then

652
00:28:24,399 --> 00:28:26,880
it will be attended your system call it

653
00:28:26,880 --> 00:28:30,399
working capital and the rsm on the the

654
00:28:30,399 --> 00:28:32,000
other and the other

655
00:28:32,000 --> 00:28:35,279
but some systems

656
00:28:35,520 --> 00:28:39,520
also there is maps and helps

657
00:28:43,039 --> 00:28:45,600
okay some of the core concepts

658
00:28:45,600 --> 00:28:48,799
i need to explain here abps grant type

659
00:28:48,799 --> 00:28:50,240
is

660
00:28:50,240 --> 00:28:52,399
is where ebpf

661
00:28:52,399 --> 00:28:55,760
will be executed so when the kernel

662
00:28:55,760 --> 00:28:59,679
or runs and the ebtf point

663
00:28:59,679 --> 00:29:00,640
the

664
00:29:00,640 --> 00:29:03,039
the kernel point ebpf program will be

665
00:29:03,039 --> 00:29:04,480
executed

666
00:29:04,480 --> 00:29:06,320
the ebpf map

667
00:29:06,320 --> 00:29:09,600
this is used this is used to do

668
00:29:09,600 --> 00:29:11,679
communication between the kernel and the

669
00:29:11,679 --> 00:29:14,000
user space also the

670
00:29:14,000 --> 00:29:16,640
ebpf map can be used

671
00:29:16,640 --> 00:29:20,159
between the ebpf programs different

672
00:29:20,159 --> 00:29:22,720
different program

673
00:29:22,720 --> 00:29:24,240
program types

674
00:29:24,240 --> 00:29:27,360
epf verifier is used to make ebpf

675
00:29:27,360 --> 00:29:29,760
program has no harm to the kernel for

676
00:29:29,760 --> 00:29:31,120
example the

677
00:29:31,120 --> 00:29:33,919
less tank usage or evp program is very

678
00:29:33,919 --> 00:29:35,919
limited

679
00:29:35,919 --> 00:29:37,600
ebtf help

680
00:29:37,600 --> 00:29:38,799
this is

681
00:29:38,799 --> 00:29:42,159
used this is just like library

682
00:29:42,159 --> 00:29:45,679
and the ebpf program can call this

683
00:29:45,679 --> 00:29:49,440
library to do his own work

684
00:29:49,440 --> 00:29:52,799
okay let's talk about the cable and ebpf

685
00:29:52,799 --> 00:29:56,320
kevlar is a museum network

686
00:29:56,320 --> 00:29:58,320
that can be used to

687
00:29:58,320 --> 00:30:00,960
instrument instruments the kernel and

688
00:30:00,960 --> 00:30:03,440
almost any kernel called address there

689
00:30:03,440 --> 00:30:05,039
are two cable

690
00:30:05,039 --> 00:30:08,559
several types they can of which

691
00:30:08,559 --> 00:30:11,360
which is used today which is

692
00:30:11,360 --> 00:30:13,520
instrumentation

693
00:30:13,520 --> 00:30:16,480
and the the point and the carrot probe

694
00:30:16,480 --> 00:30:19,600
is used to instrumentation and the

695
00:30:19,600 --> 00:30:21,120
function return

696
00:30:21,120 --> 00:30:22,480
points

697
00:30:22,480 --> 00:30:24,880
the ebp program can be attached to

698
00:30:24,880 --> 00:30:26,240
caprock

699
00:30:26,240 --> 00:30:30,320
so here shows the idea for example the k

700
00:30:30,320 --> 00:30:33,440
if we attend ebpf to the cable of kernel

701
00:30:33,440 --> 00:30:35,360
function and the capital

702
00:30:35,360 --> 00:30:37,679
carrick probably two also through this

703
00:30:37,679 --> 00:30:39,200
kernel function

704
00:30:39,200 --> 00:30:42,960
the recall equal pass should be this one

705
00:30:42,960 --> 00:30:44,000
when

706
00:30:44,000 --> 00:30:46,080
when they current oppose this function

707
00:30:46,080 --> 00:30:49,039
our first ep program will be executed

708
00:30:49,039 --> 00:30:51,200
and then the current function and then

709
00:30:51,200 --> 00:30:52,559
the

710
00:30:52,559 --> 00:30:54,000
caret pro

711
00:30:54,000 --> 00:30:56,559
pro ebpf program

712
00:30:56,559 --> 00:30:59,120
the abcf program can

713
00:30:59,120 --> 00:31:00,000
can

714
00:31:00,000 --> 00:31:03,440
can print comprehensive data to the

715
00:31:03,440 --> 00:31:04,559
audio

716
00:31:04,559 --> 00:31:06,640
powerful buffer

717
00:31:06,640 --> 00:31:08,399
okay let's talk about

718
00:31:08,399 --> 00:31:11,519
network and ebpf container both content

719
00:31:11,519 --> 00:31:14,399
both ebpf

720
00:31:14,399 --> 00:31:16,720
and the caprob is not aware of the c

721
00:31:16,720 --> 00:31:18,799
group and the lampship so they are

722
00:31:18,799 --> 00:31:21,120
system wide

723
00:31:21,120 --> 00:31:23,519
so if the container has camp size of the

724
00:31:23,519 --> 00:31:25,679
main or camp btf

725
00:31:25,679 --> 00:31:28,880
it can load the ebpf program in kernel

726
00:31:28,880 --> 00:31:31,679
notice this is system-wide

727
00:31:31,679 --> 00:31:34,240
so this so the container can read or

728
00:31:34,240 --> 00:31:37,840
control system level behavior

729
00:31:38,960 --> 00:31:41,519
so here it shows the

730
00:31:41,519 --> 00:31:43,120
fields the container escapes through

731
00:31:43,120 --> 00:31:44,290
ebgf

732
00:31:44,290 --> 00:31:45,440
[Music]

733
00:31:45,440 --> 00:31:48,640
so the container first

734
00:31:48,640 --> 00:31:52,320
first attached a ebps program in the yfs

735
00:31:52,320 --> 00:31:53,760
red

736
00:31:53,760 --> 00:31:55,679
cave rate block

737
00:31:55,679 --> 00:31:58,399
and then the whole story when the host

738
00:31:58,399 --> 00:32:02,559
read atc shadow or any file

739
00:32:02,559 --> 00:32:04,080
the

740
00:32:04,080 --> 00:32:07,120
uh the ffs red will be called and it

741
00:32:07,120 --> 00:32:10,159
will read into shadow and up and between

742
00:32:10,159 --> 00:32:11,679
its return

743
00:32:11,679 --> 00:32:14,880
it will call our ebps gram in this

744
00:32:14,880 --> 00:32:16,399
in this place

745
00:32:16,399 --> 00:32:18,720
we can the ebpf can

746
00:32:18,720 --> 00:32:22,720
read the data what the wave is red hand

747
00:32:22,720 --> 00:32:24,000
have loaded

748
00:32:24,000 --> 00:32:28,399
and so the container will get this data

749
00:32:28,399 --> 00:32:30,640
so here you see

750
00:32:30,640 --> 00:32:31,919
the concrete

751
00:32:31,919 --> 00:32:34,480
piercing

752
00:32:34,640 --> 00:32:36,159
first of all the

753
00:32:36,159 --> 00:32:38,080
container attention carries glove to

754
00:32:38,080 --> 00:32:41,519
this and then it reads the transparent

755
00:32:41,519 --> 00:32:43,200
and

756
00:32:43,200 --> 00:32:46,240
when f1 wherefore threat it says shadow

757
00:32:46,240 --> 00:32:50,960
it will load load the data into memory

758
00:32:50,960 --> 00:32:53,120
and some register well pointless for

759
00:32:53,120 --> 00:32:55,120
example are

760
00:32:55,120 --> 00:32:56,720
are

761
00:32:56,720 --> 00:32:58,000
30

762
00:32:58,000 --> 00:33:00,080
30 13

763
00:33:00,080 --> 00:33:00,880
and

764
00:33:00,880 --> 00:33:04,559
so the epcf program can

765
00:33:04,559 --> 00:33:05,600
read

766
00:33:05,600 --> 00:33:08,799
read from this register and print kate

767
00:33:08,799 --> 00:33:13,120
this buffer choosing container

768
00:33:13,440 --> 00:33:16,880
here choose the concept hierarchy plc

769
00:33:16,880 --> 00:33:18,000
picture

770
00:33:18,000 --> 00:33:20,960
also first of all we we start a

771
00:33:20,960 --> 00:33:24,000
container with sensor mean and the way

772
00:33:24,000 --> 00:33:27,200
then we mount the transfers

773
00:33:27,200 --> 00:33:28,799
here way

774
00:33:28,799 --> 00:33:32,320
we create a carriage probe aware press

775
00:33:32,320 --> 00:33:34,000
read

776
00:33:34,000 --> 00:33:36,960
and we load we load this program we know

777
00:33:36,960 --> 00:33:40,080
this umpf gram in kernel

778
00:33:40,080 --> 00:33:42,399
so in the second terminal we

779
00:33:42,399 --> 00:33:45,440
we can't just we read this transparent

780
00:33:45,440 --> 00:33:47,679
file and in host

781
00:33:47,679 --> 00:33:50,480
we can read each ccdo file

782
00:33:50,480 --> 00:33:52,480
and we can see

783
00:33:52,480 --> 00:33:53,840
we can see

784
00:33:53,840 --> 00:33:57,120
here we read today we read the

785
00:33:57,120 --> 00:33:59,440
repeated file of the

786
00:33:59,440 --> 00:34:02,480
utc shadow

787
00:34:02,960 --> 00:34:05,360
so this demonstrates the container

788
00:34:05,360 --> 00:34:07,360
escape three bpf

789
00:34:07,360 --> 00:34:09,839
uh in fact there are

790
00:34:09,839 --> 00:34:13,040
uh there are several topics about the

791
00:34:13,040 --> 00:34:15,839
uh ebpf can be used

792
00:34:15,839 --> 00:34:18,960
as a rootkit for example they can read

793
00:34:18,960 --> 00:34:19,839
the

794
00:34:19,839 --> 00:34:22,079
the host file they can

795
00:34:22,079 --> 00:34:24,000
they can hijack the

796
00:34:24,000 --> 00:34:26,639
execute execution

797
00:34:26,639 --> 00:34:29,918
also here the easiest plc to demonstrate

798
00:34:29,918 --> 00:34:34,639
that we can escape through ebcff

799
00:34:34,639 --> 00:34:36,879
okay let's go to the

800
00:34:36,879 --> 00:34:39,280
final methods of container escape

801
00:34:39,280 --> 00:34:43,040
escape from extra machine monitor

802
00:34:43,040 --> 00:34:44,480
uh notice

803
00:34:44,480 --> 00:34:47,599
the container is often is often running

804
00:34:47,599 --> 00:34:49,599
the way in

805
00:34:49,599 --> 00:34:50,960
and the souls

806
00:34:50,960 --> 00:34:51,839
so

807
00:34:51,839 --> 00:34:54,239
they can become elephants from both

808
00:34:54,239 --> 00:34:57,200
arctic charts for example the ram is

809
00:34:57,200 --> 00:35:00,640
a is very is

810
00:35:00,640 --> 00:35:04,560
is can be used in a in very

811
00:35:04,560 --> 00:35:06,000
flexible way

812
00:35:06,000 --> 00:35:08,880
and the container is also

813
00:35:08,880 --> 00:35:11,599
so here we often see architecture with

814
00:35:11,599 --> 00:35:12,480
this

815
00:35:12,480 --> 00:35:14,240
the kilometer virtual machine and

816
00:35:14,240 --> 00:35:17,599
running container

817
00:35:17,599 --> 00:35:20,079
about this but they

818
00:35:20,079 --> 00:35:22,000
we need to know that the way we are

819
00:35:22,000 --> 00:35:24,560
member tank surface tube

820
00:35:24,560 --> 00:35:27,759
has a one british

821
00:35:28,560 --> 00:35:30,720
in interface between us and the

822
00:35:30,720 --> 00:35:32,320
community devices is a lot of

823
00:35:32,320 --> 00:35:36,000
vulnerabilities so the vm the car writes

824
00:35:36,000 --> 00:35:39,119
with a lot of data to the devices and if

825
00:35:39,119 --> 00:35:39,920
this

826
00:35:39,920 --> 00:35:43,119
way mm has vulnerabilities the vms can

827
00:35:43,119 --> 00:35:46,640
the um can trigger this

828
00:35:48,240 --> 00:35:49,680
this is a

829
00:35:49,680 --> 00:35:50,960
tv called

830
00:35:50,960 --> 00:35:52,640
uh virtual machine

831
00:35:52,640 --> 00:35:56,440
modeling terminal basis

832
00:35:58,320 --> 00:36:01,760
um there it is kernel export device and

833
00:36:01,760 --> 00:36:03,680
the driver says when the driver

834
00:36:03,680 --> 00:36:06,160
information is recessed fs

835
00:36:06,160 --> 00:36:08,960
this satisfies

836
00:36:08,960 --> 00:36:12,480
such as such fs is like virtual is also

837
00:36:12,480 --> 00:36:16,240
a virtual file system like pro fs

838
00:36:16,240 --> 00:36:18,960
it's usually mounted and the size

839
00:36:18,960 --> 00:36:20,400
and

840
00:36:20,400 --> 00:36:21,920
it contains

841
00:36:21,920 --> 00:36:24,400
its contain node container it contains

842
00:36:24,400 --> 00:36:26,240
device in the driver information and the

843
00:36:26,240 --> 00:36:29,040
can control device behavior

844
00:36:29,040 --> 00:36:32,000
for example this is a typical

845
00:36:32,000 --> 00:36:34,480
information about about the device

846
00:36:34,480 --> 00:36:37,599
device information here we can see that

847
00:36:37,599 --> 00:36:41,200
it has a psc configuration it is right

848
00:36:41,200 --> 00:36:43,760
and read also the resource

849
00:36:43,760 --> 00:36:44,880
zero

850
00:36:44,880 --> 00:36:46,480
one two is

851
00:36:46,480 --> 00:36:48,760
uh mm-io

852
00:36:48,760 --> 00:36:51,920
or resources it is also written right

853
00:36:51,920 --> 00:36:53,040
right

854
00:36:53,040 --> 00:36:55,520
so how we can see the

855
00:36:55,520 --> 00:36:58,160
the devices that the

856
00:36:58,160 --> 00:36:59,599
uh the

857
00:36:59,599 --> 00:37:02,960
the driver the driver in the vm can

858
00:37:02,960 --> 00:37:05,119
trigger one of it is incumbent through

859
00:37:05,119 --> 00:37:06,400
mm-io

860
00:37:06,400 --> 00:37:08,720
so if we

861
00:37:08,720 --> 00:37:12,480
export this this size fs choose a

862
00:37:12,480 --> 00:37:14,160
container it

863
00:37:14,160 --> 00:37:15,359
it can

864
00:37:15,359 --> 00:37:17,040
also

865
00:37:17,040 --> 00:37:18,960
trigger the vulnerabilities through user

866
00:37:18,960 --> 00:37:21,040
space by

867
00:37:21,040 --> 00:37:22,800
writing this

868
00:37:22,800 --> 00:37:25,520
mml

869
00:37:25,680 --> 00:37:28,400
so here show the idea

870
00:37:28,400 --> 00:37:30,480
and the container can interact with the

871
00:37:30,480 --> 00:37:31,680
device

872
00:37:31,680 --> 00:37:35,839
through the ssfs of course if we need to

873
00:37:35,839 --> 00:37:38,160
you need to capture them in two

874
00:37:38,160 --> 00:37:40,640
months two months such address all the

875
00:37:40,640 --> 00:37:42,800
and the remotely successful this from

876
00:37:42,800 --> 00:37:46,240
red only to worldwide and if the virtual

877
00:37:46,240 --> 00:37:48,160
devices is

878
00:37:48,160 --> 00:37:50,880
vulnerable

879
00:37:50,880 --> 00:37:52,720
so we can

880
00:37:52,720 --> 00:37:56,960
we can tr we can read and write the mmi

881
00:37:56,960 --> 00:37:59,359
already of the device

882
00:37:59,359 --> 00:38:01,680
in container through

883
00:38:01,680 --> 00:38:04,480
csfs interface

884
00:38:04,480 --> 00:38:07,599
so here the poc i used is

885
00:38:07,599 --> 00:38:09,920
changed from the

886
00:38:09,920 --> 00:38:12,400
from from the

887
00:38:12,400 --> 00:38:16,560
uh scavenging scavenger from pangolin

888
00:38:16,560 --> 00:38:19,599
and the way

889
00:38:19,839 --> 00:38:22,240
just a few changes from here i just

890
00:38:22,240 --> 00:38:23,760
changed this

891
00:38:23,760 --> 00:38:25,280
so here's just

892
00:38:25,280 --> 00:38:27,920
first of all i start a cumulative

893
00:38:27,920 --> 00:38:30,160
machine this and then

894
00:38:30,160 --> 00:38:32,079
i

895
00:38:32,079 --> 00:38:36,480
run this i run the container and i

896
00:38:36,480 --> 00:38:40,000
i give this campsite admin on the campus

897
00:38:40,000 --> 00:38:41,280
abilities

898
00:38:41,280 --> 00:38:43,920
and then i install some of the

899
00:38:43,920 --> 00:38:46,560
package the build package

900
00:38:46,560 --> 00:38:48,200
then in the

901
00:38:48,200 --> 00:38:50,320
cumulative monthly

902
00:38:50,320 --> 00:38:52,160
size fs

903
00:38:52,160 --> 00:38:56,720
from the red only to the right then

904
00:38:56,880 --> 00:39:01,599
what excludes the x um exploit

905
00:39:01,599 --> 00:39:03,280
then in the

906
00:39:03,280 --> 00:39:05,440
in

907
00:39:05,760 --> 00:39:07,760
in the hosting process

908
00:39:07,760 --> 00:39:10,160
i give a call

909
00:39:10,160 --> 00:39:13,599
let's conference christ so this here

910
00:39:13,599 --> 00:39:16,880
here here this one here is see what it

911
00:39:16,880 --> 00:39:19,920
does so in the container

912
00:39:19,920 --> 00:39:21,920
we trigger the

913
00:39:21,920 --> 00:39:24,560
vulnerabilities in weight then cumule

914
00:39:24,560 --> 00:39:26,480
through the size fs

915
00:39:26,480 --> 00:39:28,880
which writes the mml

916
00:39:28,880 --> 00:39:31,760
and particularly viralbytes in kerbin so

917
00:39:31,760 --> 00:39:34,720
the chemical crisis and this topic is

918
00:39:34,720 --> 00:39:37,280
not about where i'm escaped so i will

919
00:39:37,280 --> 00:39:40,240
not not uh show this

920
00:39:40,240 --> 00:39:43,680
in our hotel so that's the pure senator

921
00:39:43,680 --> 00:39:44,640
can

922
00:39:44,640 --> 00:39:46,960
demonstrate the idea

923
00:39:46,960 --> 00:39:49,760
so let's talk about how we can defend

924
00:39:49,760 --> 00:39:52,320
solve this

925
00:39:54,560 --> 00:39:56,640
and we can say

926
00:39:56,640 --> 00:40:00,240
the bin format misc is a

927
00:40:00,240 --> 00:40:03,920
common user model calculator is is uh

928
00:40:03,920 --> 00:40:05,200
escape

929
00:40:05,200 --> 00:40:06,480
so there are

930
00:40:06,480 --> 00:40:09,280
several several methods

931
00:40:09,280 --> 00:40:12,640
can tune defense from this this attack

932
00:40:12,640 --> 00:40:14,240
the first thing is uh

933
00:40:14,240 --> 00:40:16,880
use a secure container for example the

934
00:40:16,880 --> 00:40:19,680
device contact because

935
00:40:19,680 --> 00:40:21,839
secure container has a

936
00:40:21,839 --> 00:40:25,680
separate kernel for for the content com

937
00:40:25,680 --> 00:40:27,920
container

938
00:40:27,920 --> 00:40:29,680
and so if

939
00:40:29,680 --> 00:40:32,240
they will not they will not share the

940
00:40:32,240 --> 00:40:34,640
kernel with the host they can't

941
00:40:34,640 --> 00:40:38,319
harm the the hand can't change the her

942
00:40:38,319 --> 00:40:42,000
hostess usable help

943
00:40:42,560 --> 00:40:45,200
then we can drop camp sessions so

944
00:40:45,200 --> 00:40:48,480
necessary so we can we can't remember

945
00:40:48,480 --> 00:40:49,760
the

946
00:40:49,760 --> 00:40:50,839
problem

947
00:40:50,839 --> 00:40:53,839
fs we can also use the user mode help

948
00:40:53,839 --> 00:40:56,480
water list

949
00:40:56,480 --> 00:40:58,800
for example the kernel contains a

950
00:40:58,800 --> 00:41:01,200
configuration for this

951
00:41:01,200 --> 00:41:04,240
uh also if we have

952
00:41:04,240 --> 00:41:06,560
if we have used the

953
00:41:06,560 --> 00:41:10,240
rsm in production we can also

954
00:41:10,240 --> 00:41:12,879
open them

955
00:41:14,720 --> 00:41:17,359
okay for the ebpf escape

956
00:41:17,359 --> 00:41:19,280
uh also first of all we can drop the

957
00:41:19,280 --> 00:41:22,319
concession country month

958
00:41:22,319 --> 00:41:23,520
then

959
00:41:23,520 --> 00:41:25,760
we can disable and provide the container

960
00:41:25,760 --> 00:41:28,000
of the evps unless

961
00:41:28,000 --> 00:41:30,960
this is not a upstream solution

962
00:41:30,960 --> 00:41:33,520
then we can also

963
00:41:33,520 --> 00:41:34,480
also

964
00:41:34,480 --> 00:41:37,040
just allow the assigned ebp program to

965
00:41:37,040 --> 00:41:39,200
be loaded into kernel this is in

966
00:41:39,200 --> 00:41:41,759
progress

967
00:41:45,040 --> 00:41:46,960
and in fact the eppf

968
00:41:46,960 --> 00:41:49,839
upgf program escape has

969
00:41:49,839 --> 00:41:52,400
has been the most epf programmer has the

970
00:41:52,400 --> 00:41:54,880
must has been demonstrated has a very

971
00:41:54,880 --> 00:41:56,319
powerful

972
00:41:56,319 --> 00:41:58,400
so we need to

973
00:41:58,400 --> 00:41:59,200
to

974
00:41:59,200 --> 00:42:02,759
harden this

975
00:42:02,880 --> 00:42:06,480
for the vm escape also we can

976
00:42:06,480 --> 00:42:08,720
we can security containers through

977
00:42:08,720 --> 00:42:11,040
secure container we end

978
00:42:11,040 --> 00:42:11,839
and

979
00:42:11,839 --> 00:42:15,520
as it will as the vulnerabilities in the

980
00:42:15,520 --> 00:42:16,880
container

981
00:42:16,880 --> 00:42:19,760
itself will don't affect the whole

982
00:42:19,760 --> 00:42:22,000
system also we can't drop to the

983
00:42:22,000 --> 00:42:24,640
capacitor that means so this we can

984
00:42:24,640 --> 00:42:28,400
cannot remove the file system

985
00:42:28,640 --> 00:42:31,520
also we need to

986
00:42:31,520 --> 00:42:34,160
we need to check and fix the virtual

987
00:42:34,160 --> 00:42:37,759
machine all right on the benches

988
00:42:39,680 --> 00:42:44,160
okay this is all my talk my so there

989
00:42:44,160 --> 00:42:48,560
i in this talk i have talked about three

990
00:42:48,560 --> 00:42:52,000
new methods on a bit container escape

991
00:42:52,000 --> 00:42:52,800
the

992
00:42:52,800 --> 00:42:54,960
user mode help is

993
00:42:54,960 --> 00:42:58,640
just is a exploit and the the container

994
00:42:58,640 --> 00:43:03,040
escape through ebpf is used is used

995
00:43:03,040 --> 00:43:06,400
to come to canada escape through our

996
00:43:06,400 --> 00:43:08,720
ebpf program and

997
00:43:08,720 --> 00:43:11,040
finally we need to also focus the

998
00:43:11,040 --> 00:43:13,359
security of virtual merchant monitor

999
00:43:13,359 --> 00:43:16,560
who's who runs who as the infrastructure

1000
00:43:16,560 --> 00:43:17,310
as wrong

1001
00:43:17,310 --> 00:43:18,560
[Music]

1002
00:43:18,560 --> 00:43:20,720
container

1003
00:43:20,720 --> 00:43:23,959
thank you

