1
00:00:09,360 --> 00:00:12,000
hi everyone and welcome to my talk my

2
00:00:12,000 --> 00:00:14,400
name is gilberton and i'm an offensive

3
00:00:14,400 --> 00:00:16,480
security engineer and researcher

4
00:00:16,480 --> 00:00:18,880
working at signia consulting

5
00:00:18,880 --> 00:00:20,720
i have over five years of experience

6
00:00:20,720 --> 00:00:22,880
within the cyber security industry

7
00:00:22,880 --> 00:00:26,160
focusing on enterprise security

8
00:00:26,160 --> 00:00:28,320
i'm originally from israel but currently

9
00:00:28,320 --> 00:00:31,519
based in singapore and today i want to

10
00:00:31,519 --> 00:00:33,920
talk with you about a

11
00:00:33,920 --> 00:00:36,000
reading and adversary simulation

12
00:00:36,000 --> 00:00:37,600
challenges

13
00:00:37,600 --> 00:00:40,320
and show you how you can adapt cacd

14
00:00:40,320 --> 00:00:43,360
concepts in order to automate tasks that

15
00:00:43,360 --> 00:00:47,120
are related to your weaponization phase

16
00:00:47,120 --> 00:00:49,919
let's dive in

17
00:00:53,920 --> 00:00:57,520
so first let me give you some context

18
00:00:57,520 --> 00:01:00,160
we have to admit it red and purple

19
00:01:00,160 --> 00:01:03,760
teaming became hardened

20
00:01:04,239 --> 00:01:06,720
throughout the past years red teamers

21
00:01:06,720 --> 00:01:09,119
are struggling with challenges

22
00:01:09,119 --> 00:01:12,080
since organizations have lifted up their

23
00:01:12,080 --> 00:01:14,159
detection capabilities and also

24
00:01:14,159 --> 00:01:18,000
integrated advanced security solutions

25
00:01:18,000 --> 00:01:20,400
this caused the execution of even basic

26
00:01:20,400 --> 00:01:23,439
tasks to get complicated

27
00:01:23,439 --> 00:01:26,159
organizations have also a variety of

28
00:01:26,159 --> 00:01:28,640
products and vendors incorporated within

29
00:01:28,640 --> 00:01:30,799
their environments

30
00:01:30,799 --> 00:01:32,799
this makes technique that techniques

31
00:01:32,799 --> 00:01:33,920
that work

32
00:01:33,920 --> 00:01:36,159
worked in one organization

33
00:01:36,159 --> 00:01:38,840
to fail or get detected on

34
00:01:38,840 --> 00:01:41,520
another logging and monitoring

35
00:01:41,520 --> 00:01:44,960
capabilities will also enhance

36
00:01:44,960 --> 00:01:47,680
we are recorded 24 7 by the big brother

37
00:01:47,680 --> 00:01:50,720
theme and it sucks siblings so avoid

38
00:01:50,720 --> 00:01:53,600
triggering alerts during an operation

39
00:01:53,600 --> 00:01:57,119
became a challenge by itself

40
00:01:57,119 --> 00:01:59,600
to handle the situation adversaries

41
00:01:59,600 --> 00:02:01,680
spend even more time on the

42
00:02:01,680 --> 00:02:04,079
weaponization phase

43
00:02:04,079 --> 00:02:06,240
and this is done prior and during the

44
00:02:06,240 --> 00:02:07,759
operation

45
00:02:07,759 --> 00:02:10,639
many times these tasks are repetitive

46
00:02:10,639 --> 00:02:14,720
and sometimes they fail due to technical

47
00:02:14,720 --> 00:02:16,319
issues that

48
00:02:16,319 --> 00:02:19,200
we all have experienced before

49
00:02:19,200 --> 00:02:21,440
let me ask you a question

50
00:02:21,440 --> 00:02:23,440
how many times have you recognized this

51
00:02:23,440 --> 00:02:25,040
same tool

52
00:02:25,040 --> 00:02:25,920
or

53
00:02:25,920 --> 00:02:28,640
how many times you helped a colleague to

54
00:02:28,640 --> 00:02:30,560
use the technique that you

55
00:02:30,560 --> 00:02:33,360
found or used

56
00:02:33,360 --> 00:02:35,840
speaking about colleagues

57
00:02:35,840 --> 00:02:38,560
while working with a growing team that

58
00:02:38,560 --> 00:02:41,760
are divided across multiple engagements

59
00:02:41,760 --> 00:02:43,760
we realized that new challenges were

60
00:02:43,760 --> 00:02:45,519
added

61
00:02:45,519 --> 00:02:47,760
these challenges include working from

62
00:02:47,760 --> 00:02:49,840
home due to the coffee they are

63
00:02:49,840 --> 00:02:51,920
back-to-back engagements

64
00:02:51,920 --> 00:02:54,480
and new developments that team members

65
00:02:54,480 --> 00:02:56,400
created got lost

66
00:02:56,400 --> 00:03:00,480
as soon as they finish their engagements

67
00:03:01,280 --> 00:03:03,440
because of that we understood that we

68
00:03:03,440 --> 00:03:05,040
want to have a better platform to

69
00:03:05,040 --> 00:03:08,080
collaborate on in my opinion we can

70
00:03:08,080 --> 00:03:09,840
enable base standard and equal

71
00:03:09,840 --> 00:03:14,080
capabilities using this kind of platform

72
00:03:14,080 --> 00:03:16,000
now

73
00:03:16,000 --> 00:03:19,519
whenever we do develop or discover a new

74
00:03:19,519 --> 00:03:21,120
capability

75
00:03:21,120 --> 00:03:24,480
we have to somehow store it right

76
00:03:24,480 --> 00:03:26,480
there are many documentations and

77
00:03:26,480 --> 00:03:29,200
methodologies out there and every day a

78
00:03:29,200 --> 00:03:31,599
new exploit technique or tool are

79
00:03:31,599 --> 00:03:33,840
released

80
00:03:34,319 --> 00:03:36,239
i'm pretty sure that you're experiencing

81
00:03:36,239 --> 00:03:38,640
the print nightmare buzz in your social

82
00:03:38,640 --> 00:03:41,920
media networks currently

83
00:03:41,920 --> 00:03:45,040
so sometimes it's how to follow and

84
00:03:45,040 --> 00:03:47,120
incorporate these methodologies

85
00:03:47,120 --> 00:03:49,840
techniques and tools into your

86
00:03:49,840 --> 00:03:53,200
methodologies and day-to-day

87
00:03:53,200 --> 00:03:55,518
jobs

88
00:03:58,000 --> 00:04:01,280
security teams are also sharing thoughts

89
00:04:01,280 --> 00:04:02,000
and

90
00:04:02,000 --> 00:04:04,480
during whole conversations or coffee

91
00:04:04,480 --> 00:04:07,840
breaks or mingling in conferences

92
00:04:07,840 --> 00:04:11,040
but memorizing and storing this entire

93
00:04:11,040 --> 00:04:14,159
content in an efficient way became

94
00:04:14,159 --> 00:04:15,439
complicated

95
00:04:15,439 --> 00:04:18,000
so until elon will provide us this newer

96
00:04:18,000 --> 00:04:21,680
link we have to find a solution

97
00:04:22,400 --> 00:04:24,720
we understood that we want to import

98
00:04:24,720 --> 00:04:27,680
more automation into our engagements

99
00:04:27,680 --> 00:04:29,840
as we want to reduce the time on

100
00:04:29,840 --> 00:04:33,440
repetitive tasks or tasks we are not

101
00:04:33,440 --> 00:04:37,520
interested in doing again

102
00:04:38,080 --> 00:04:40,479
we know that the community already

103
00:04:40,479 --> 00:04:43,680
adopted the cicd concepts

104
00:04:43,680 --> 00:04:46,479
to automate tasks that are related to

105
00:04:46,479 --> 00:04:49,600
offensive tourismation

106
00:04:49,600 --> 00:04:51,759
offensive cicd pipelines have been

107
00:04:51,759 --> 00:04:53,919
around for a couple of years with the

108
00:04:53,919 --> 00:04:57,360
goal of helping teams to automate their

109
00:04:57,360 --> 00:04:59,199
tasks

110
00:04:59,199 --> 00:05:01,600
i'm not going to talk in detail about

111
00:05:01,600 --> 00:05:03,919
cicd in general

112
00:05:03,919 --> 00:05:05,919
but we are going to dive into the

113
00:05:05,919 --> 00:05:07,680
advantages

114
00:05:07,680 --> 00:05:10,560
of having it and using it

115
00:05:10,560 --> 00:05:13,199
for offensive needs

116
00:05:13,199 --> 00:05:15,520
i truly believe that we cannot automate

117
00:05:15,520 --> 00:05:18,720
the entire team operation as we need to

118
00:05:18,720 --> 00:05:21,759
bring to bring our own expertise

119
00:05:21,759 --> 00:05:24,880
knowledge and way of thinking

120
00:05:24,880 --> 00:05:26,400
we want to have a mind behind the

121
00:05:26,400 --> 00:05:29,280
operation who can take decisions in real

122
00:05:29,280 --> 00:05:32,000
time and according to the

123
00:05:32,000 --> 00:05:34,320
feedback he receives from

124
00:05:34,320 --> 00:05:36,800
the network and the environment he is

125
00:05:36,800 --> 00:05:38,960
attacking

126
00:05:38,960 --> 00:05:41,280
then we will be able to put more focus

127
00:05:41,280 --> 00:05:44,479
on bypassing new barriers which we never

128
00:05:44,479 --> 00:05:47,359
tackled before

129
00:05:50,479 --> 00:05:53,280
we started exploring the cicd area and

130
00:05:53,280 --> 00:05:55,280
performed the research that ended up

131
00:05:55,280 --> 00:05:57,600
with a pain that we really wanted to

132
00:05:57,600 --> 00:05:59,280
solve

133
00:05:59,280 --> 00:06:02,240
this pain pushed us to design and

134
00:06:02,240 --> 00:06:04,880
develop our own offensive pipeline

135
00:06:04,880 --> 00:06:08,000
framework this is done while focusing

136
00:06:08,000 --> 00:06:11,039
the needs of our growing adversarial

137
00:06:11,039 --> 00:06:12,560
team

138
00:06:12,560 --> 00:06:16,160
so such needs included simplicity

139
00:06:16,160 --> 00:06:18,000
as being part of a growing team we

140
00:06:18,000 --> 00:06:20,880
wanted to onboard new members to use

141
00:06:20,880 --> 00:06:23,360
that concept easily

142
00:06:23,360 --> 00:06:26,960
and also make it easier for us to do the

143
00:06:26,960 --> 00:06:29,440
migration

144
00:06:29,440 --> 00:06:32,000
there is also a need for modularity

145
00:06:32,000 --> 00:06:34,639
the framework must allow the developed

146
00:06:34,639 --> 00:06:37,440
techniques to be packaged individually

147
00:06:37,440 --> 00:06:39,840
so we can mix between them when

148
00:06:39,840 --> 00:06:42,080
assembling pipelines that weaponize

149
00:06:42,080 --> 00:06:45,120
different tools

150
00:06:45,440 --> 00:06:47,520
we also wanted that the frame could be

151
00:06:47,520 --> 00:06:51,199
able to maintain itself so we don't add

152
00:06:51,199 --> 00:06:55,440
overhead on top of our tasks

153
00:06:56,000 --> 00:06:57,759
we're also looking for a system that

154
00:06:57,759 --> 00:06:59,840
anyone can contribute to because we're a

155
00:06:59,840 --> 00:07:03,520
big team we can actually

156
00:07:03,520 --> 00:07:05,440
use that

157
00:07:05,440 --> 00:07:08,080
and so we want the efforts to be gained

158
00:07:08,080 --> 00:07:10,319
from each and every team member

159
00:07:10,319 --> 00:07:12,560
instead of only one researcher

160
00:07:12,560 --> 00:07:16,800
maintaining and enriching it

161
00:07:16,800 --> 00:07:19,199
sorry

162
00:07:19,280 --> 00:07:21,759
we wanted also the environments to be

163
00:07:21,759 --> 00:07:23,840
the environment infrastructure to be

164
00:07:23,840 --> 00:07:26,319
self-managed

165
00:07:26,319 --> 00:07:29,759
as the sources and the tools that we are

166
00:07:29,759 --> 00:07:32,800
using considered malicious right and

167
00:07:32,800 --> 00:07:37,680
having the this cacd on a sub solution

168
00:07:37,680 --> 00:07:40,720
can make our tools get analyzed or

169
00:07:40,720 --> 00:07:42,840
blocked in the

170
00:07:42,840 --> 00:07:44,800
future so

171
00:07:44,800 --> 00:07:47,199
solutions can create obstacles and with

172
00:07:47,199 --> 00:07:48,800
that throughout the way and we will

173
00:07:48,800 --> 00:07:52,319
discuss about that later

174
00:07:52,479 --> 00:07:54,240
there is also a need for a demand

175
00:07:54,240 --> 00:07:56,319
because while performing red teams

176
00:07:56,319 --> 00:07:58,960
sometimes in a need for a specific tool

177
00:07:58,960 --> 00:08:02,560
i am pretty sure that you have the the

178
00:08:02,560 --> 00:08:04,879
the default set of tools that you tend

179
00:08:04,879 --> 00:08:07,199
to use in red teams but i'm also pretty

180
00:08:07,199 --> 00:08:10,720
sure that you tend to find or use a new

181
00:08:10,720 --> 00:08:14,800
tool every every everyday team to get to

182
00:08:14,800 --> 00:08:17,360
to get to something finish a

183
00:08:17,360 --> 00:08:19,280
task that

184
00:08:19,280 --> 00:08:22,960
jumped out of everything uh

185
00:08:22,960 --> 00:08:25,120
you found

186
00:08:25,120 --> 00:08:26,560
um

187
00:08:26,560 --> 00:08:29,520
we also because we also uh

188
00:08:29,520 --> 00:08:31,919
distribute the tools to each and every

189
00:08:31,919 --> 00:08:33,440
engagement we don't want the tools to

190
00:08:33,440 --> 00:08:36,479
have the same signature so anyone needs

191
00:08:36,479 --> 00:08:38,399
to get different tool we can share

192
00:08:38,399 --> 00:08:40,399
between them

193
00:08:40,399 --> 00:08:43,679
after considering these all needs we

194
00:08:43,679 --> 00:08:46,320
ended up choosing gitlab as the core of

195
00:08:46,320 --> 00:08:48,720
our framework

196
00:08:48,720 --> 00:08:50,320
if we're looking at its high level

197
00:08:50,320 --> 00:08:53,200
description we may predict that it can

198
00:08:53,200 --> 00:08:55,600
answer our needs

199
00:08:55,600 --> 00:08:57,519
let me explain you why

200
00:08:57,519 --> 00:08:59,920
we researched a variety of frameworks

201
00:08:59,920 --> 00:09:03,600
such as jenkins circle ci github actions

202
00:09:03,600 --> 00:09:06,080
and app video and up will sell this for

203
00:09:06,080 --> 00:09:08,480
the past year where we learned the power

204
00:09:08,480 --> 00:09:11,600
of having cicd concepts within your

205
00:09:11,600 --> 00:09:14,640
offensive security needs

206
00:09:14,640 --> 00:09:16,959
this tool tools did not come up with our

207
00:09:16,959 --> 00:09:19,760
needs even gitlab was not perfect

208
00:09:19,760 --> 00:09:22,000
we actually started we actually started

209
00:09:22,000 --> 00:09:25,600
going over its source code when we saw a

210
00:09:25,600 --> 00:09:28,160
possible constraint

211
00:09:28,160 --> 00:09:29,920
high level is gibberish

212
00:09:29,920 --> 00:09:31,839
let's discuss the technical aspects of

213
00:09:31,839 --> 00:09:33,680
gitlab

214
00:09:33,680 --> 00:09:35,920
so gitlab started off being code

215
00:09:35,920 --> 00:09:38,640
repository recorded code repository and

216
00:09:38,640 --> 00:09:40,240
version control

217
00:09:40,240 --> 00:09:42,560
allowing you to store your great tools

218
00:09:42,560 --> 00:09:44,160
and manage them

219
00:09:44,160 --> 00:09:47,680
gitlab also provides a useful api which

220
00:09:47,680 --> 00:09:50,480
allows you to automate anything that you

221
00:09:50,480 --> 00:09:52,399
can do manually

222
00:09:52,399 --> 00:09:54,320
it comes together with a detailed

223
00:09:54,320 --> 00:09:57,440
documentation that save you some time

224
00:09:57,440 --> 00:09:59,200
when you try to figure out how to

225
00:09:59,200 --> 00:10:01,279
approach a call

226
00:10:01,279 --> 00:10:03,600
a master feature of course is the gitlab

227
00:10:03,600 --> 00:10:04,880
cicd

228
00:10:04,880 --> 00:10:06,640
it providing you with the ability to

229
00:10:06,640 --> 00:10:09,920
create pipeline jobs which i will refer

230
00:10:09,920 --> 00:10:12,079
as recipes

231
00:10:12,079 --> 00:10:15,120
in a simple and organized manner through

232
00:10:15,120 --> 00:10:18,640
its yaml format files

233
00:10:18,640 --> 00:10:20,800
the cxd also offers multiple

234
00:10:20,800 --> 00:10:23,279
integrations to different systems where

235
00:10:23,279 --> 00:10:26,800
you can execute your job recipes

236
00:10:26,800 --> 00:10:29,519
for example as part of the ci you can

237
00:10:29,519 --> 00:10:30,839
use

238
00:10:30,839 --> 00:10:33,839
kubernetes to execute your jobs on

239
00:10:33,839 --> 00:10:36,240
specific container images

240
00:10:36,240 --> 00:10:38,000
you can do it for on docker and you can

241
00:10:38,000 --> 00:10:40,480
do it on a single server whether linux

242
00:10:40,480 --> 00:10:43,120
or windows

243
00:10:43,120 --> 00:10:44,839
it's up to

244
00:10:44,839 --> 00:10:48,720
you jobs jobs can also be executed on

245
00:10:48,720 --> 00:10:52,480
specified conditions for example uh

246
00:10:52,480 --> 00:10:54,079
once you put because the gitlab is a

247
00:10:54,079 --> 00:10:57,040
source control you once you push a new a

248
00:10:57,040 --> 00:10:59,839
commit to one of the branches it can

249
00:10:59,839 --> 00:11:02,959
trigger a pipeline to run on the changes

250
00:11:02,959 --> 00:11:04,480
you've made

251
00:11:04,480 --> 00:11:07,279
you can also trigger the pipeline and

252
00:11:07,279 --> 00:11:09,839
from the api or you can also trigger the

253
00:11:09,839 --> 00:11:12,560
pipeline after another pipeline ended

254
00:11:12,560 --> 00:11:16,800
successfully or unsuccessfully

255
00:11:16,800 --> 00:11:19,279
the multi-pipeline support allows to

256
00:11:19,279 --> 00:11:22,320
trigger several pipelines for executing

257
00:11:22,320 --> 00:11:23,440
only one

258
00:11:23,440 --> 00:11:25,040
if you think about that sometimes you

259
00:11:25,040 --> 00:11:27,839
need several type of tools or several

260
00:11:27,839 --> 00:11:29,920
tools to do the same task because we are

261
00:11:29,920 --> 00:11:30,720
not

262
00:11:30,720 --> 00:11:34,399
always a trusting one tool when we do

263
00:11:34,399 --> 00:11:36,320
our simulations

264
00:11:36,320 --> 00:11:39,120
and having a single click to weaponize

265
00:11:39,120 --> 00:11:43,200
them can benefit a lot a lot for you

266
00:11:43,200 --> 00:11:45,760
and i'm pretty sure that also this is

267
00:11:45,760 --> 00:11:48,320
just the tip of the ice though gitlab is

268
00:11:48,320 --> 00:11:50,800
a big system and i'm sure that you will

269
00:11:50,800 --> 00:11:53,200
find additional features to use in the

270
00:11:53,200 --> 00:11:56,200
future

271
00:11:57,279 --> 00:11:59,120
let's see an example of an offensive

272
00:11:59,120 --> 00:12:01,760
pipeline recipe in motion

273
00:12:01,760 --> 00:12:04,959
the pipeline starts off cloning the code

274
00:12:04,959 --> 00:12:06,880
with the code from the source control

275
00:12:06,880 --> 00:12:09,920
and in this example we use robus a

276
00:12:09,920 --> 00:12:11,760
c-sharp tool

277
00:12:11,760 --> 00:12:14,399
then it gets built using a predefined

278
00:12:14,399 --> 00:12:16,320
job a recipe

279
00:12:16,320 --> 00:12:19,279
that locates the solution file and use

280
00:12:19,279 --> 00:12:22,959
emits build to compile it

281
00:12:22,959 --> 00:12:26,000
the binary artifact then passes through

282
00:12:26,000 --> 00:12:28,720
the pipeline to the next job that

283
00:12:28,720 --> 00:12:31,680
executes confused e x on it

284
00:12:31,680 --> 00:12:34,160
and this is in order to obfuscate it and

285
00:12:34,160 --> 00:12:37,040
modify signatures that may trigger an

286
00:12:37,040 --> 00:12:40,079
alert or make the file even not being

287
00:12:40,079 --> 00:12:43,839
executed on the targeted environment

288
00:12:43,839 --> 00:12:47,200
or even deleted um

289
00:12:47,200 --> 00:12:50,720
the confused binary or the shell code

290
00:12:50,720 --> 00:12:52,720
that you will create throughout the way

291
00:12:52,720 --> 00:12:54,720
goes to the next job

292
00:12:54,720 --> 00:12:58,639
where it gets wrapped by dotnet assembly

293
00:12:58,639 --> 00:13:00,959
uh that

294
00:13:00,959 --> 00:13:04,639
so we can actually execute it from a

295
00:13:04,639 --> 00:13:08,160
powershell console

296
00:13:09,120 --> 00:13:11,839
and eventually artifacts are all

297
00:13:11,839 --> 00:13:14,560
together deployed to your favorite

298
00:13:14,560 --> 00:13:19,600
bucket aws gcp and azure storage and as

299
00:13:19,600 --> 00:13:23,440
well as to your pan drop server

300
00:13:23,440 --> 00:13:26,800
allowing the the adversary simulator the

301
00:13:26,800 --> 00:13:28,000
operator

302
00:13:28,000 --> 00:13:31,519
to pick from which hosting he wishes to

303
00:13:31,519 --> 00:13:35,600
download and execute the tool

304
00:13:35,600 --> 00:13:37,839
another partial example can go with

305
00:13:37,839 --> 00:13:40,000
invoke domain password spray

306
00:13:40,000 --> 00:13:41,040
where

307
00:13:41,040 --> 00:13:43,199
it doesn't get

308
00:13:43,199 --> 00:13:45,519
it doesn't need to get built but

309
00:13:45,519 --> 00:13:48,959
aggregated from few powershell files

310
00:13:48,959 --> 00:13:52,480
this is another job you can define

311
00:13:52,480 --> 00:13:54,800
then the combined powershell script

312
00:13:54,800 --> 00:13:57,519
passes through to the next stage where

313
00:13:57,519 --> 00:14:02,399
it gets obfuscated using chimera

314
00:14:02,399 --> 00:14:04,240
chimera is an obfuscation script

315
00:14:04,240 --> 00:14:05,600
designed to

316
00:14:05,600 --> 00:14:06,800
basically

317
00:14:06,800 --> 00:14:11,680
bypass ansi and iot antivirus solutions

318
00:14:11,680 --> 00:14:13,279
when you try to execute powershell

319
00:14:13,279 --> 00:14:14,639
scripts

320
00:14:14,639 --> 00:14:16,880
the obfuscated script then goes directly

321
00:14:16,880 --> 00:14:18,639
to the last job

322
00:14:18,639 --> 00:14:22,160
in the pipeline uh and get deployed to

323
00:14:22,160 --> 00:14:25,680
the point drop often server

324
00:14:25,680 --> 00:14:27,680
in the same way we may may add

325
00:14:27,680 --> 00:14:30,720
additional sources of different tools

326
00:14:30,720 --> 00:14:33,760
and define their pipelines

327
00:14:33,760 --> 00:14:35,920
and recipes with jobs

328
00:14:35,920 --> 00:14:37,199
that are

329
00:14:37,199 --> 00:14:39,600
we already developed

330
00:14:39,600 --> 00:14:42,399
and this is where the modularity

331
00:14:42,399 --> 00:14:46,079
plays its significant role

332
00:14:46,079 --> 00:14:47,600
for dessert

333
00:14:47,600 --> 00:14:49,519
we can use the pipeline triggering

334
00:14:49,519 --> 00:14:52,720
options or gitlab api to trigger

335
00:14:52,720 --> 00:14:55,199
multiple pipelines based on different

336
00:14:55,199 --> 00:14:57,040
grouping

337
00:14:57,040 --> 00:14:59,360
and this is enable you

338
00:14:59,360 --> 00:15:01,199
to

339
00:15:01,199 --> 00:15:03,680
create and weaponize tools based on

340
00:15:03,680 --> 00:15:06,079
different kind of needs as i mentioned

341
00:15:06,079 --> 00:15:08,079
before

342
00:15:08,079 --> 00:15:11,199
finally it enables us to weaponize tens

343
00:15:11,199 --> 00:15:15,359
and hundreds of tools in minutes

344
00:15:17,600 --> 00:15:20,639
we took this type of example and started

345
00:15:20,639 --> 00:15:23,440
building an infrastructure to support

346
00:15:23,440 --> 00:15:24,959
the operation

347
00:15:24,959 --> 00:15:28,560
we started off of course with a

348
00:15:28,560 --> 00:15:30,880
a gitlab server gitlab instance that

349
00:15:30,880 --> 00:15:33,920
come with the built in ci cd

350
00:15:33,920 --> 00:15:35,839
and also

351
00:15:35,839 --> 00:15:38,720
we chose to execute our jobs to build

352
00:15:38,720 --> 00:15:39,600
and

353
00:15:39,600 --> 00:15:41,920
execute and operate skate and all the

354
00:15:41,920 --> 00:15:43,759
things that we're doing on a kubernetes

355
00:15:43,759 --> 00:15:45,199
cluster

356
00:15:45,199 --> 00:15:47,120
and this coverage cluster came with a

357
00:15:47,120 --> 00:15:49,120
linux node pool

358
00:15:49,120 --> 00:15:52,160
and we also made a windows notebook

359
00:15:52,160 --> 00:15:54,480
since we believe that sometimes we'll be

360
00:15:54,480 --> 00:15:56,480
in a need to

361
00:15:56,480 --> 00:15:59,199
create the tasks the tasks on a windows

362
00:15:59,199 --> 00:16:02,399
related container image sometimes you

363
00:16:02,399 --> 00:16:03,600
need to

364
00:16:03,600 --> 00:16:05,440
build dotnet or

365
00:16:05,440 --> 00:16:08,240
zippers plus for windows or go or test

366
00:16:08,240 --> 00:16:11,440
on windows servers or workstations

367
00:16:11,440 --> 00:16:13,040
so

368
00:16:13,040 --> 00:16:14,720
i know that because this is because the

369
00:16:14,720 --> 00:16:16,560
targeted environment is windows so

370
00:16:16,560 --> 00:16:19,360
testing and having the building process

371
00:16:19,360 --> 00:16:23,199
on windows can be very beneficial

372
00:16:23,199 --> 00:16:24,880
and now

373
00:16:24,880 --> 00:16:28,079
the kubernetes cluster has to somehow

374
00:16:28,079 --> 00:16:30,880
communicate with the gitlab instance and

375
00:16:30,880 --> 00:16:32,880
for that gitlab created something called

376
00:16:32,880 --> 00:16:34,720
gitlab

377
00:16:34,720 --> 00:16:37,199
and this is a health deployment that you

378
00:16:37,199 --> 00:16:39,839
can provide to your kubernetes and it's

379
00:16:39,839 --> 00:16:42,560
kind of proxying your jobs

380
00:16:42,560 --> 00:16:44,480
from the pipelines into a kubernetes

381
00:16:44,480 --> 00:16:47,279
cluster translating them into ports that

382
00:16:47,279 --> 00:16:48,320
contain

383
00:16:48,320 --> 00:16:50,720
two different containers one that you

384
00:16:50,720 --> 00:16:53,279
specify to actually do the job that you

385
00:16:53,279 --> 00:16:55,759
intended to do and the other another one

386
00:16:55,759 --> 00:16:57,920
with the helper the helper container

387
00:16:57,920 --> 00:17:00,880
that does the git cloning and artifact

388
00:17:00,880 --> 00:17:03,199
collection from the job

389
00:17:03,199 --> 00:17:06,240
now currently gitlab does not is not

390
00:17:06,240 --> 00:17:10,400
supporting a building on using pods

391
00:17:10,400 --> 00:17:13,520
using running jobs on a windows related

392
00:17:13,520 --> 00:17:14,559
images

393
00:17:14,559 --> 00:17:16,720
and we created a workaround for that

394
00:17:16,720 --> 00:17:20,400
with another windows runner

395
00:17:20,400 --> 00:17:22,000
that basically

396
00:17:22,000 --> 00:17:24,720
can work with windows related images

397
00:17:24,720 --> 00:17:27,280
that contain the powershell call

398
00:17:27,280 --> 00:17:28,880
program

399
00:17:28,880 --> 00:17:31,039
and libraries

400
00:17:31,039 --> 00:17:33,760
uh this kubernetes cluster is also

401
00:17:33,760 --> 00:17:36,480
accessible to a container registry

402
00:17:36,480 --> 00:17:39,039
that where you can store your customized

403
00:17:39,039 --> 00:17:41,120
uh your customized containers that you

404
00:17:41,120 --> 00:17:44,799
you use for building or let's say

405
00:17:44,799 --> 00:17:46,880
the one with ms build or the one with

406
00:17:46,880 --> 00:17:48,559
the obfuscation that contain the

407
00:17:48,559 --> 00:17:51,200
confuser and all its dependencies you

408
00:17:51,200 --> 00:17:54,400
can just pull it and write or

409
00:17:54,400 --> 00:17:57,120
execute it right away on the binary or

410
00:17:57,120 --> 00:17:58,840
tool you want to

411
00:17:58,840 --> 00:18:00,559
obfuscate

412
00:18:00,559 --> 00:18:02,160
now after having

413
00:18:02,160 --> 00:18:03,600
some tests with this kind of

414
00:18:03,600 --> 00:18:06,000
infrastructure we decided to go with it

415
00:18:06,000 --> 00:18:08,799
into a google cloud

416
00:18:08,799 --> 00:18:11,360
and we use this google cloud services

417
00:18:11,360 --> 00:18:13,760
together with the google cloud storage

418
00:18:13,760 --> 00:18:14,720
to

419
00:18:14,720 --> 00:18:16,240
host some

420
00:18:16,240 --> 00:18:20,160
utilities we needed during the pipeline

421
00:18:20,160 --> 00:18:21,039
uh

422
00:18:21,039 --> 00:18:22,320
also

423
00:18:22,320 --> 00:18:24,480
we added a federal rule for us to

424
00:18:24,480 --> 00:18:26,640
operate the world system

425
00:18:26,640 --> 00:18:29,440
and by the way this is the single point

426
00:18:29,440 --> 00:18:30,160
you

427
00:18:30,160 --> 00:18:31,440
you have to

428
00:18:31,440 --> 00:18:33,440
operate and maintain the the gitlab

429
00:18:33,440 --> 00:18:35,840
instance itself everything was sitting

430
00:18:35,840 --> 00:18:38,160
on a single gcp project where you can

431
00:18:38,160 --> 00:18:40,880
manage everything in one place

432
00:18:40,880 --> 00:18:42,400
and eventually

433
00:18:42,400 --> 00:18:44,640
the gitlab server the gitlab instance

434
00:18:44,640 --> 00:18:47,440
will be able to pull a git git

435
00:18:47,440 --> 00:18:51,120
repositories from remote paths

436
00:18:51,120 --> 00:18:54,160
then you will be able to create for them

437
00:18:54,160 --> 00:18:56,400
kind of recipes and

438
00:18:56,400 --> 00:18:59,520
build and recognize them

439
00:18:59,520 --> 00:19:02,880
and after having this this

440
00:19:02,880 --> 00:19:05,440
infrastructure and the framework in the

441
00:19:05,440 --> 00:19:06,640
gcp

442
00:19:06,640 --> 00:19:09,520
we built a telephone script that can

443
00:19:09,520 --> 00:19:11,039
enable you

444
00:19:11,039 --> 00:19:12,080
to

445
00:19:12,080 --> 00:19:14,160
deploy the same environment

446
00:19:14,160 --> 00:19:15,760
into your cloud

447
00:19:15,760 --> 00:19:18,400
subscription

448
00:19:18,559 --> 00:19:19,440
now

449
00:19:19,440 --> 00:19:22,559
as part of of this script we created as

450
00:19:22,559 --> 00:19:24,960
part of this framework and this that

451
00:19:24,960 --> 00:19:26,880
this script is part of

452
00:19:26,880 --> 00:19:30,799
and we created a framework named scalabs

453
00:19:30,799 --> 00:19:33,919
and in a high level this framework can

454
00:19:33,919 --> 00:19:36,720
empower red teams by enabling them to

455
00:19:36,720 --> 00:19:38,400
put more focus

456
00:19:38,400 --> 00:19:41,120
on what they need to do instead of how

457
00:19:41,120 --> 00:19:42,320
to do it

458
00:19:42,320 --> 00:19:45,440
the how will be predefined by them by

459
00:19:45,440 --> 00:19:48,880
their researchers by their operators but

460
00:19:48,880 --> 00:19:49,760
it

461
00:19:49,760 --> 00:19:52,320
the the concept is to define it only

462
00:19:52,320 --> 00:19:55,120
once and focus on what is the next step

463
00:19:55,120 --> 00:19:57,280
one what is the next task that you need

464
00:19:57,280 --> 00:19:58,160
to do

465
00:19:58,160 --> 00:20:00,799
and this is done with recipes with yama

466
00:20:00,799 --> 00:20:03,520
format files that are that in a

467
00:20:03,520 --> 00:20:06,799
repository repository that we created

468
00:20:06,799 --> 00:20:08,960
together with the infrastructure that

469
00:20:08,960 --> 00:20:10,960
you will be able to deploy into into

470
00:20:10,960 --> 00:20:14,159
your gcp account

471
00:20:14,559 --> 00:20:16,240
uh

472
00:20:16,240 --> 00:20:19,440
all you need basically to

473
00:20:19,440 --> 00:20:21,360
download and deploy the same environment

474
00:20:21,360 --> 00:20:24,799
is a gcp subscription and a web browser

475
00:20:24,799 --> 00:20:26,240
you can refer to the project's

476
00:20:26,240 --> 00:20:30,720
repository and follow the instructions

477
00:20:32,159 --> 00:20:33,840
i want also to share with you the

478
00:20:33,840 --> 00:20:37,039
difficulties that almost killed

479
00:20:37,039 --> 00:20:38,000
the

480
00:20:38,000 --> 00:20:40,640
the infrastructure technologies we we

481
00:20:40,640 --> 00:20:42,559
chose

482
00:20:42,559 --> 00:20:46,559
so the first one is a lack of support

483
00:20:46,559 --> 00:20:51,039
by gitlab to actually use windows based

484
00:20:51,039 --> 00:20:52,159
nodes

485
00:20:52,159 --> 00:20:55,120
to build and run our reports on

486
00:20:55,120 --> 00:20:57,520
so this is an open issue i'm pretty sure

487
00:20:57,520 --> 00:21:00,559
that it will be soon sold and it seems

488
00:21:00,559 --> 00:21:01,840
to be on the

489
00:21:01,840 --> 00:21:02,880
next

490
00:21:02,880 --> 00:21:04,480
next version

491
00:21:04,480 --> 00:21:06,080
and

492
00:21:06,080 --> 00:21:07,200
but we

493
00:21:07,200 --> 00:21:10,000
had a back in the days when we created

494
00:21:10,000 --> 00:21:12,000
this framework we found a workaround for

495
00:21:12,000 --> 00:21:12,799
that

496
00:21:12,799 --> 00:21:15,840
and this is because gitlab allows you to

497
00:21:15,840 --> 00:21:17,440
execute

498
00:21:17,440 --> 00:21:18,480
posts

499
00:21:18,480 --> 00:21:20,480
and jobs on

500
00:21:20,480 --> 00:21:22,720
linux related nodes

501
00:21:22,720 --> 00:21:26,960
and which also contain powershell code

502
00:21:26,960 --> 00:21:29,840
and the publisher code we use to

503
00:21:29,840 --> 00:21:33,520
actually build windows containers

504
00:21:33,520 --> 00:21:34,400
and

505
00:21:34,400 --> 00:21:37,440
found that if we import powershell code

506
00:21:37,440 --> 00:21:39,280
we install powershell code into the

507
00:21:39,280 --> 00:21:42,000
container image of windows

508
00:21:42,000 --> 00:21:43,440
and

509
00:21:43,440 --> 00:21:46,880
we can actually use it and work around

510
00:21:46,880 --> 00:21:49,039
over this lack of support

511
00:21:49,039 --> 00:21:51,760
and gitlab works in that way that

512
00:21:51,760 --> 00:21:54,960
each job takes a create support in your

513
00:21:54,960 --> 00:21:57,200
humanities cluster that contain two

514
00:21:57,200 --> 00:22:00,320
different containers one helper that

515
00:22:00,320 --> 00:22:02,480
downloads uh that

516
00:22:02,480 --> 00:22:06,480
perform the git cloning and send out the

517
00:22:06,480 --> 00:22:09,280
the artifact and do more

518
00:22:09,280 --> 00:22:10,640
more things for preparing the

519
00:22:10,640 --> 00:22:12,799
environment and the container that you

520
00:22:12,799 --> 00:22:15,520
specify for building or creating the job

521
00:22:15,520 --> 00:22:16,799
you need

522
00:22:16,799 --> 00:22:19,360
and they are working together so we had

523
00:22:19,360 --> 00:22:21,520
also to

524
00:22:21,520 --> 00:22:24,000
install the pwsatch into the helper

525
00:22:24,000 --> 00:22:27,520
container and change it through our

526
00:22:27,520 --> 00:22:28,880
gitlab

527
00:22:28,880 --> 00:22:31,200
that i saw i showed

528
00:22:31,200 --> 00:22:32,640
before

529
00:22:32,640 --> 00:22:36,400
in the architectural slide

530
00:22:36,400 --> 00:22:37,360
now

531
00:22:37,360 --> 00:22:40,799
the next thing that this lack of support

532
00:22:40,799 --> 00:22:42,879
and

533
00:22:44,159 --> 00:22:45,840
this lack of support

534
00:22:45,840 --> 00:22:48,240
prevented us from doing from using is

535
00:22:48,240 --> 00:22:51,840
the the nice way that gitlab allows us

536
00:22:51,840 --> 00:22:55,360
to collect the artifacts from a job

537
00:22:55,360 --> 00:22:58,799
imagine that you are now building uh

538
00:22:58,799 --> 00:23:00,000
uh

539
00:23:00,000 --> 00:23:02,000
your offensive tool using csharp on a

540
00:23:02,000 --> 00:23:04,159
windows container and you want to

541
00:23:04,159 --> 00:23:06,640
collect the executable send it to job

542
00:23:06,640 --> 00:23:08,960
artifacts so the next job in the

543
00:23:08,960 --> 00:23:11,120
pipeline will be able to to pick that

544
00:23:11,120 --> 00:23:13,840
gitlab created this way in order to do

545
00:23:13,840 --> 00:23:15,760
to do that and this is a very nice and

546
00:23:15,760 --> 00:23:18,400
clean way but because of the lack of

547
00:23:18,400 --> 00:23:22,240
support in windows it doesn't um it

548
00:23:22,240 --> 00:23:25,440
doesn't succeed in finding the gitlab

549
00:23:25,440 --> 00:23:28,320
runner helper because it's it

550
00:23:28,320 --> 00:23:31,520
attempts to do that in a linux structure

551
00:23:31,520 --> 00:23:33,919
so we find a workaround when we take the

552
00:23:33,919 --> 00:23:36,640
gitlab helper by navi

553
00:23:36,640 --> 00:23:38,480
and use the artifact uploader

554
00:23:38,480 --> 00:23:40,559
functionality together with environment

555
00:23:40,559 --> 00:23:44,000
variables that already there in the job

556
00:23:44,000 --> 00:23:46,080
variables we didn't need to create new

557
00:23:46,080 --> 00:23:47,840
variables for that

558
00:23:47,840 --> 00:23:50,720
and just upload it to the job artifacts

559
00:23:50,720 --> 00:23:53,760
and then we actually can use a different

560
00:23:53,760 --> 00:23:56,640
kind of container different kind of job

561
00:23:56,640 --> 00:23:58,640
to pick it up

562
00:23:58,640 --> 00:24:01,279
now the second feeling that almost

563
00:24:01,279 --> 00:24:04,320
killed us is the google kubernetes

564
00:24:04,320 --> 00:24:06,240
engine windows images

565
00:24:06,240 --> 00:24:08,400
it offers only two different windows

566
00:24:08,400 --> 00:24:10,400
images and they both come with

567
00:24:10,400 --> 00:24:13,200
pre-installed windows defender now

568
00:24:13,200 --> 00:24:15,440
imagine that you're building a malicious

569
00:24:15,440 --> 00:24:16,960
tool on

570
00:24:16,960 --> 00:24:20,080
up inside a container on our windows

571
00:24:20,080 --> 00:24:21,360
and

572
00:24:21,360 --> 00:24:23,039
related node

573
00:24:23,039 --> 00:24:26,240
and the defender deletes it deletes your

574
00:24:26,240 --> 00:24:28,720
compiled deny on the second

575
00:24:28,720 --> 00:24:30,480
you're building

576
00:24:30,480 --> 00:24:31,600
um

577
00:24:31,600 --> 00:24:35,120
it also provide this nice um

578
00:24:35,120 --> 00:24:38,559
log to your screen and but you also add

579
00:24:38,559 --> 00:24:39,919
the uh

580
00:24:39,919 --> 00:24:42,480
we also succeed in

581
00:24:42,480 --> 00:24:44,640
walk around over that one

582
00:24:44,640 --> 00:24:49,120
uh so we attached the windows pool with

583
00:24:49,120 --> 00:24:51,520
a startup script that

584
00:24:51,520 --> 00:24:54,960
each time a node is provisioned by the

585
00:24:54,960 --> 00:24:57,840
kubernetes cluster it run it executing

586
00:24:57,840 --> 00:24:59,520
the startup script portion startup

587
00:24:59,520 --> 00:25:00,400
script

588
00:25:00,400 --> 00:25:02,559
that basically disable the windows

589
00:25:02,559 --> 00:25:03,840
defender

590
00:25:03,840 --> 00:25:06,799
if you want you can also add another

591
00:25:06,799 --> 00:25:08,640
powershell script into that script in

592
00:25:08,640 --> 00:25:10,960
order to modify your

593
00:25:10,960 --> 00:25:14,720
hosting node server

594
00:25:14,720 --> 00:25:17,039
um

595
00:25:18,320 --> 00:25:22,879
now it's the demo time let's

596
00:25:26,840 --> 00:25:30,559
start so we start off referring to the

597
00:25:30,559 --> 00:25:34,400
scallops project and where we can find

598
00:25:34,400 --> 00:25:37,840
basically all the deployment scripts

599
00:25:37,840 --> 00:25:39,039
based on

600
00:25:39,039 --> 00:25:41,039
telephone

601
00:25:41,039 --> 00:25:43,360
and we can find the

602
00:25:43,360 --> 00:25:46,240
instructions on how to clone it and

603
00:25:46,240 --> 00:25:49,919
and deploy it into our gcp

604
00:25:49,919 --> 00:25:52,159
as you can see i have only one

605
00:25:52,159 --> 00:25:54,400
instance in my gcp is a point drop

606
00:25:54,400 --> 00:25:55,520
server

607
00:25:55,520 --> 00:25:57,039
for this demo

608
00:25:57,039 --> 00:26:00,559
and this one as you can see

609
00:26:01,279 --> 00:26:05,679
now it's empty but we will fill it up

610
00:26:07,679 --> 00:26:11,120
the kubernetes engine is also empty

611
00:26:11,120 --> 00:26:13,760
there are container redisplays here that

612
00:26:13,760 --> 00:26:15,919
are related to windows

613
00:26:15,919 --> 00:26:18,559
i added them beforehand in order to be

614
00:26:18,559 --> 00:26:22,639
able to use them during the pipeline

615
00:26:23,039 --> 00:26:25,279
the storage contained the container

616
00:26:25,279 --> 00:26:27,120
registry as a storage type because this

617
00:26:27,120 --> 00:26:29,600
is the way google are using to store

618
00:26:29,600 --> 00:26:32,559
containers it's kind of reflected out of

619
00:26:32,559 --> 00:26:34,880
that and also the secrets manager where

620
00:26:34,880 --> 00:26:36,960
we use we will use to store secrets

621
00:26:36,960 --> 00:26:38,720
related to our environment such as the

622
00:26:38,720 --> 00:26:40,960
gitlab password api keys

623
00:26:40,960 --> 00:26:43,440
certificates and certificates and other

624
00:26:43,440 --> 00:26:46,440
stuff

625
00:26:52,720 --> 00:26:54,690
let's get back to where we've been

626
00:26:54,690 --> 00:26:56,320
[Music]

627
00:26:56,320 --> 00:26:57,200
okay

628
00:26:57,200 --> 00:27:00,080
so we're waiting to the cloud shell to

629
00:27:00,080 --> 00:27:04,640
load and now we will clone the scallops

630
00:27:04,640 --> 00:27:07,640
repository

631
00:27:07,840 --> 00:27:11,440
and we now have to edit the config and

632
00:27:11,440 --> 00:27:14,480
telephone variables

633
00:27:14,480 --> 00:27:18,159
this is according to our needs and

634
00:27:18,159 --> 00:27:19,279
let's see

635
00:27:19,279 --> 00:27:21,200
so we have three different required

636
00:27:21,200 --> 00:27:24,159
parameters this is the project id the

637
00:27:24,159 --> 00:27:27,360
full project id from your gcp project

638
00:27:27,360 --> 00:27:30,879
in this case scalabs demo

639
00:27:31,520 --> 00:27:34,640
and also an operator ip so we will open

640
00:27:34,640 --> 00:27:36,640
the rule in the firewall for you to be

641
00:27:36,640 --> 00:27:40,559
able to login into your gitlab instance

642
00:27:40,559 --> 00:27:43,600
let me take the

643
00:27:43,600 --> 00:27:45,679
external ip

644
00:27:45,679 --> 00:27:48,720
and also let's give it a name info name

645
00:27:48,720 --> 00:27:52,159
we'll call it demo one

646
00:27:58,559 --> 00:28:02,039
save the file

647
00:28:05,679 --> 00:28:10,480
and let's initialize that telephone

648
00:28:10,480 --> 00:28:13,679
to reinstall the necessary libraries and

649
00:28:13,679 --> 00:28:16,679
models

650
00:28:21,440 --> 00:28:24,320
and then we will be able to apply the

651
00:28:24,320 --> 00:28:29,399
resources into this project

652
00:28:35,440 --> 00:28:36,720
see that we're

653
00:28:36,720 --> 00:28:39,440
actually mentioning the config tf that

654
00:28:39,440 --> 00:28:42,320
we just created

655
00:28:43,120 --> 00:28:44,960
okay

656
00:28:44,960 --> 00:28:46,080
so

657
00:28:46,080 --> 00:28:49,679
now it calculates the resources and also

658
00:28:49,679 --> 00:28:51,440
we have to authorize

659
00:28:51,440 --> 00:28:55,760
it to use the this project

660
00:28:56,960 --> 00:28:59,440
there are 50 resources in total to be

661
00:28:59,440 --> 00:29:01,200
added

662
00:29:01,200 --> 00:29:03,440
hitting yes

663
00:29:03,440 --> 00:29:04,559
and

664
00:29:04,559 --> 00:29:09,120
resources are starting to get deployed

665
00:29:09,120 --> 00:29:12,760
we'll skip that

666
00:29:22,880 --> 00:29:24,840
don't want you to

667
00:29:24,840 --> 00:29:30,959
wait takes around 10 to 15 minutes

668
00:29:32,080 --> 00:29:35,120
and we have all the resources completed

669
00:29:35,120 --> 00:29:37,120
and deployed successfully

670
00:29:37,120 --> 00:29:40,799
as you can see we have the gitlab

671
00:29:40,799 --> 00:29:43,600
external ipe

672
00:29:43,600 --> 00:29:46,240
and we will be able to reach it to reach

673
00:29:46,240 --> 00:29:49,360
it because we just provided our external

674
00:29:49,360 --> 00:29:52,240
ip address for

675
00:29:52,840 --> 00:29:56,880
it now the root password of this gitlab

676
00:29:56,880 --> 00:29:59,679
instance is stored in a designated

677
00:29:59,679 --> 00:30:02,320
secret that we created you can see the

678
00:30:02,320 --> 00:30:04,559
name of the secret within the next

679
00:30:04,559 --> 00:30:06,159
variable

680
00:30:06,159 --> 00:30:08,799
demo gitlab root password

681
00:30:08,799 --> 00:30:11,120
let's refresh the secret manager because

682
00:30:11,120 --> 00:30:14,399
there are additions

683
00:30:17,279 --> 00:30:22,360
and we can extract the load password

684
00:30:25,760 --> 00:30:28,320
sign in

685
00:30:29,039 --> 00:30:31,120
great as you can see we have the

686
00:30:31,120 --> 00:30:32,960
monitoring which is a default project

687
00:30:32,960 --> 00:30:34,880
coming with gitlab and the scallops

688
00:30:34,880 --> 00:30:37,840
recipes which was imported automatically

689
00:30:37,840 --> 00:30:39,200
using the

690
00:30:39,200 --> 00:30:41,200
deployment

691
00:30:41,200 --> 00:30:46,080
the scallops recipes contain all the

692
00:30:46,080 --> 00:30:49,039
yamas and tools that are the recipes

693
00:30:49,039 --> 00:30:50,559
that are required

694
00:30:50,559 --> 00:30:51,679
to do

695
00:30:51,679 --> 00:30:54,399
some jobs and that you

696
00:30:54,399 --> 00:30:56,399
need to weaponize you to

697
00:30:56,399 --> 00:30:58,720
of course that this is just an example

698
00:30:58,720 --> 00:31:01,279
jobs that you can learn from and you

699
00:31:01,279 --> 00:31:04,960
will have to extend it a lot and test it

700
00:31:04,960 --> 00:31:08,080
and but there is a lot of value already

701
00:31:08,080 --> 00:31:09,760
in there

702
00:31:09,760 --> 00:31:11,840
let's see

703
00:31:11,840 --> 00:31:13,840
some of the features that scallops

704
00:31:13,840 --> 00:31:16,480
recipes pipeline offers so the first

705
00:31:16,480 --> 00:31:19,360
thing is deployment initialization

706
00:31:19,360 --> 00:31:20,559
so

707
00:31:20,559 --> 00:31:23,120
once we deployed everything to our gcp

708
00:31:23,120 --> 00:31:25,440
we really want to import additional

709
00:31:25,440 --> 00:31:28,880
tools to our environment and also we

710
00:31:28,880 --> 00:31:33,360
want to have additional containers and

711
00:31:33,360 --> 00:31:36,320
to use doing it through our jobs

712
00:31:36,320 --> 00:31:38,159
so we have the health check as well to

713
00:31:38,159 --> 00:31:40,640
check that we can actually execute

714
00:31:40,640 --> 00:31:43,360
things on linux and on windows as well

715
00:31:43,360 --> 00:31:44,960
we have the feature check we want to

716
00:31:44,960 --> 00:31:46,720
check that our

717
00:31:46,720 --> 00:31:48,240
api key

718
00:31:48,240 --> 00:31:49,760
function and

719
00:31:49,760 --> 00:31:52,799
is authorized to do the stuff we need

720
00:31:52,799 --> 00:31:54,559
and

721
00:31:54,559 --> 00:31:57,678
now i want to show you

722
00:31:58,000 --> 00:32:00,399
the jobs and what each of them does

723
00:32:00,399 --> 00:32:02,640
i really like the web ide to explore the

724
00:32:02,640 --> 00:32:04,159
files and

725
00:32:04,159 --> 00:32:07,440
as well as to commit new changes when

726
00:32:07,440 --> 00:32:08,559
there are

727
00:32:08,559 --> 00:32:13,120
not so many just to kind of save here

728
00:32:13,120 --> 00:32:16,000
uh the gitlab ci is the master yummy for

729
00:32:16,000 --> 00:32:19,519
this scallops recipes and now we saw we

730
00:32:19,519 --> 00:32:22,080
saw that it executes the

731
00:32:22,080 --> 00:32:24,080
these four stages

732
00:32:24,080 --> 00:32:26,960
uh that are coming from jobs within a

733
00:32:26,960 --> 00:32:30,159
reference yaml files

734
00:32:30,159 --> 00:32:31,679
let's see the

735
00:32:31,679 --> 00:32:35,679
os trigger yaml file

736
00:32:40,559 --> 00:32:43,519
so we have two different jobs here both

737
00:32:43,519 --> 00:32:46,399
at the health check stage

738
00:32:46,399 --> 00:32:48,159
they are running one of them is running

739
00:32:48,159 --> 00:32:50,320
on the linux

740
00:32:50,320 --> 00:32:53,440
related server and the second one on

741
00:32:53,440 --> 00:32:54,559
windows

742
00:32:54,559 --> 00:32:56,399
with a designated

743
00:32:56,399 --> 00:32:59,519
windows and linux related images

744
00:32:59,519 --> 00:33:01,600
they just check that they can schedule

745
00:33:01,600 --> 00:33:04,640
on windows and linux

746
00:33:04,640 --> 00:33:06,960
respectively

747
00:33:06,960 --> 00:33:08,799
the second thing is the variable check

748
00:33:08,799 --> 00:33:11,679
we want to check that we have api access

749
00:33:11,679 --> 00:33:15,600
to the gitlab so we can use and other

750
00:33:15,600 --> 00:33:18,080
other functionalities

751
00:33:18,080 --> 00:33:19,279
by

752
00:33:19,279 --> 00:33:21,679
initializing the world environment and

753
00:33:21,679 --> 00:33:25,240
making it

754
00:33:27,279 --> 00:33:30,240
so the third the third job is related to

755
00:33:30,240 --> 00:33:32,159
building containers

756
00:33:32,159 --> 00:33:35,440
and let's see what this job does it uses

757
00:33:35,440 --> 00:33:37,120
a

758
00:33:37,120 --> 00:33:41,199
technology by google named kaniko

759
00:33:41,440 --> 00:33:45,519
and it basically built all containers

760
00:33:45,519 --> 00:33:48,000
as you can see here it didn't reach data

761
00:33:48,000 --> 00:33:48,960
yet

762
00:33:48,960 --> 00:33:51,840
but it built on containers that are

763
00:33:51,840 --> 00:33:55,039
listed as docker files under ci maintain

764
00:33:55,039 --> 00:33:57,519
dockerfiles linux

765
00:33:57,519 --> 00:33:59,360
you can see all the different docker

766
00:33:59,360 --> 00:34:00,880
files we have here

767
00:34:00,880 --> 00:34:02,799
they all will be pushed to our container

768
00:34:02,799 --> 00:34:05,039
registry in addition to the containers

769
00:34:05,039 --> 00:34:08,480
that you've seen there before

770
00:34:09,440 --> 00:34:11,040
so

771
00:34:11,040 --> 00:34:12,879
the last stage that we

772
00:34:12,879 --> 00:34:15,520
we are using here is the tools important

773
00:34:15,520 --> 00:34:18,079
this is a very powerful feature

774
00:34:18,079 --> 00:34:18,839
that

775
00:34:18,839 --> 00:34:22,159
basically allows you to import new tools

776
00:34:22,159 --> 00:34:24,399
to the gitlab instance by specifying

777
00:34:24,399 --> 00:34:26,560
them as a code

778
00:34:26,560 --> 00:34:29,079
you can see that it goes to tools

779
00:34:29,079 --> 00:34:31,520
index.json file

780
00:34:31,520 --> 00:34:34,960
and compels its contents with the

781
00:34:34,960 --> 00:34:38,000
existing projects within the instance

782
00:34:38,000 --> 00:34:41,918
and it uses the api key to do so

783
00:34:41,918 --> 00:34:46,000
eventually it imports the

784
00:34:46,000 --> 00:34:48,800
the new project that were not existed in

785
00:34:48,800 --> 00:34:51,520
the instance

786
00:34:51,839 --> 00:34:55,599
we'll have an example of that as well

787
00:34:55,760 --> 00:34:57,920
if we're looking at the tools index we

788
00:34:57,920 --> 00:35:00,160
can see all the tools that will be

789
00:35:00,160 --> 00:35:03,359
imported once the job that we are

790
00:35:03,359 --> 00:35:06,640
currently running will be finished

791
00:35:06,640 --> 00:35:08,640
this is an array of objects containing

792
00:35:08,640 --> 00:35:11,359
the name the git path where we want to

793
00:35:11,359 --> 00:35:13,839
import the visibility level who we want

794
00:35:13,839 --> 00:35:17,680
to have access to and the ci config path

795
00:35:17,680 --> 00:35:20,240
where we actually have the recipe to

796
00:35:20,240 --> 00:35:22,000
weaponize that tool

797
00:35:22,000 --> 00:35:24,079
and in that case it's here right here

798
00:35:24,079 --> 00:35:27,320
the wci.yaml

799
00:35:27,440 --> 00:35:28,640
where we

800
00:35:28,640 --> 00:35:32,800
set some variables include and reference

801
00:35:32,800 --> 00:35:34,000
additional

802
00:35:34,000 --> 00:35:35,359
yaml files

803
00:35:35,359 --> 00:35:38,079
and pass it through differ three stages

804
00:35:38,079 --> 00:35:43,000
of building obfuscating and deploying

805
00:35:49,839 --> 00:35:52,000
if we're taking a look at the building

806
00:35:52,000 --> 00:35:54,160
stage

807
00:35:54,160 --> 00:35:58,560
the it's a job that builds sharp tools

808
00:35:58,560 --> 00:35:59,760
now

809
00:35:59,760 --> 00:36:02,880
this job is running on a container that

810
00:36:02,880 --> 00:36:05,040
we created for it

811
00:36:05,040 --> 00:36:07,200
and you can see the container here in

812
00:36:07,200 --> 00:36:10,160
the registry we're actually

813
00:36:10,160 --> 00:36:13,839
pulling it air from there

814
00:36:14,560 --> 00:36:17,040
sorry

815
00:36:17,040 --> 00:36:19,440
and we're actually running this on this

816
00:36:19,440 --> 00:36:21,839
container on kubernetes

817
00:36:21,839 --> 00:36:23,520
through the kubernetes runner we're

818
00:36:23,520 --> 00:36:27,359
restoring the packages that are required

819
00:36:27,359 --> 00:36:28,720
and building

820
00:36:28,720 --> 00:36:31,680
with the release configuration from the

821
00:36:31,680 --> 00:36:35,200
solution path that we specified

822
00:36:35,200 --> 00:36:37,760
during the

823
00:36:37,760 --> 00:36:40,160
recipe

824
00:36:40,160 --> 00:36:43,200
and every job gets the repository into

825
00:36:43,200 --> 00:36:46,480
his workspace every time it starts

826
00:36:46,480 --> 00:36:50,000
eventually we are uploading the

827
00:36:50,000 --> 00:36:52,400
artifact the compiled rubios into the

828
00:36:52,400 --> 00:36:55,520
job artifact we can use it for the next

829
00:36:55,520 --> 00:36:57,760
pipeline for example for the

830
00:36:57,760 --> 00:37:00,560
confuser to run the obfuscation

831
00:37:00,560 --> 00:37:04,440
techniques over it

832
00:37:08,240 --> 00:37:11,119
let's see the obfuscation and

833
00:37:11,119 --> 00:37:14,000
the frustration part under the surface

834
00:37:14,000 --> 00:37:15,680
stations

835
00:37:15,680 --> 00:37:19,640
and confuse the edx

836
00:37:23,680 --> 00:37:26,640
so we have another uh

837
00:37:26,640 --> 00:37:29,680
another job and that we actually

838
00:37:29,680 --> 00:37:32,400
uh fetching the previous artifact this

839
00:37:32,400 --> 00:37:34,640
is part this is the the workaround we

840
00:37:34,640 --> 00:37:36,640
spoke about

841
00:37:36,640 --> 00:37:38,000
we're fetching the previous of the

842
00:37:38,000 --> 00:37:40,000
artifacts from previous job we're

843
00:37:40,000 --> 00:37:42,800
running everything on a container that

844
00:37:42,800 --> 00:37:45,040
designated to do so

845
00:37:45,040 --> 00:37:47,760
it's another container and

846
00:37:47,760 --> 00:37:50,079
store stored at our container registry

847
00:37:50,079 --> 00:37:51,839
containing all the necessary

848
00:37:51,839 --> 00:37:55,280
dependencies for computer

849
00:37:55,280 --> 00:37:58,400
and actually from line 23 we are

850
00:37:58,400 --> 00:38:01,440
starting the the operation of

851
00:38:01,440 --> 00:38:03,680
obfuscating our tool

852
00:38:03,680 --> 00:38:06,720
with it's very specific uh parameters i

853
00:38:06,720 --> 00:38:08,720
have said but this can be also

854
00:38:08,720 --> 00:38:11,200
configurable or forwarded from a

855
00:38:11,200 --> 00:38:13,119
variable environment variable that you

856
00:38:13,119 --> 00:38:15,599
can use

857
00:38:15,599 --> 00:38:18,880
eventually we're copying the obfuscated

858
00:38:18,880 --> 00:38:23,359
artifact and upload it to the

859
00:38:23,359 --> 00:38:26,400
job artifacts so the next job in the

860
00:38:26,400 --> 00:38:30,160
pipeline will be able to pick it

861
00:38:31,200 --> 00:38:34,640
so the next job is related to deploying

862
00:38:34,640 --> 00:38:37,119
so here is the deploying the file into

863
00:38:37,119 --> 00:38:39,280
our pan drop server

864
00:38:39,280 --> 00:38:41,839
it will be under ci deployers in that

865
00:38:41,839 --> 00:38:44,400
structure

866
00:38:45,359 --> 00:38:49,520
and we can see that basically it runs it

867
00:38:49,520 --> 00:38:52,079
requires the point of url and the right

868
00:38:52,079 --> 00:38:52,880
key

869
00:38:52,880 --> 00:38:56,000
it runs on a different operating system

870
00:38:56,000 --> 00:38:58,720
and different container notice that we

871
00:38:58,720 --> 00:39:01,119
are using this will through the same

872
00:39:01,119 --> 00:39:02,960
pipeline we are changing operating

873
00:39:02,960 --> 00:39:05,680
systems and containers

874
00:39:05,680 --> 00:39:08,480
and eventually it gets the file from the

875
00:39:08,480 --> 00:39:10,000
previous

876
00:39:10,000 --> 00:39:13,359
job and deployed through the fondue prl

877
00:39:13,359 --> 00:39:16,078
and right key

878
00:39:18,160 --> 00:39:20,400
well as we will be able to see it over

879
00:39:20,400 --> 00:39:21,680
here

880
00:39:21,680 --> 00:39:24,640
but we must provide it the url and right

881
00:39:24,640 --> 00:39:27,359
key in order for it to find the relevant

882
00:39:27,359 --> 00:39:31,359
server to upload to and succeed

883
00:39:41,200 --> 00:39:44,160
let's execute the robust

884
00:39:44,160 --> 00:39:47,598
the rubio's pipeline

885
00:39:54,560 --> 00:39:56,400
we also can see that the

886
00:39:56,400 --> 00:39:58,800
the the initialization pipeline has

887
00:39:58,800 --> 00:40:01,280
proceeded and finished with the health

888
00:40:01,280 --> 00:40:04,400
check and now it's on the feature check

889
00:40:04,400 --> 00:40:07,200
the check variable was failed but we

890
00:40:07,200 --> 00:40:08,560
will

891
00:40:08,560 --> 00:40:12,400
we will check right right now why

892
00:40:19,119 --> 00:40:21,520
as you can see because we

893
00:40:21,520 --> 00:40:23,599
use the container that does not include

894
00:40:23,599 --> 00:40:27,520
c or l and by navi it couldn't use it so

895
00:40:27,520 --> 00:40:30,160
it found an error and failed stopped the

896
00:40:30,160 --> 00:40:31,760
job

897
00:40:31,760 --> 00:40:34,720
and we will be able to change that by

898
00:40:34,720 --> 00:40:37,359
not using col using something else

899
00:40:37,359 --> 00:40:40,079
or using a container image that contains

900
00:40:40,079 --> 00:40:43,680
url we can also install this url before

901
00:40:43,680 --> 00:40:47,078
doing the operation

902
00:41:04,000 --> 00:41:06,720
so once all the jobs and stages have

903
00:41:06,720 --> 00:41:08,319
completed we can take a look at the

904
00:41:08,319 --> 00:41:10,560
build container job

905
00:41:10,560 --> 00:41:14,240
and this job was actually actually took

906
00:41:14,240 --> 00:41:16,560
all the docker files that you've seen

907
00:41:16,560 --> 00:41:18,640
and added them to here let's refresh to

908
00:41:18,640 --> 00:41:21,799
see it

909
00:41:21,839 --> 00:41:24,640
as you can see three different

910
00:41:24,640 --> 00:41:27,440
container images that build out of the

911
00:41:27,440 --> 00:41:30,240
docker files we listed

912
00:41:30,240 --> 00:41:34,279
under our linux

913
00:41:35,119 --> 00:41:37,359
the last job was the tools importer

914
00:41:37,359 --> 00:41:38,640
which should

915
00:41:38,640 --> 00:41:41,280
add the projects into here if we refresh

916
00:41:41,280 --> 00:41:42,960
it

917
00:41:42,960 --> 00:41:45,119
we can see all the additional projects

918
00:41:45,119 --> 00:41:50,079
that just added to our gitlab instance

919
00:41:50,960 --> 00:41:54,560
this is a very powerful feature

920
00:41:55,920 --> 00:41:57,920
because we just added rubios we didn't

921
00:41:57,920 --> 00:42:00,319
have it before now we can actually

922
00:42:00,319 --> 00:42:03,839
execute its pipeline

923
00:42:04,000 --> 00:42:05,920
the recipe already

924
00:42:05,920 --> 00:42:08,640
already been to the scallops recipes and

925
00:42:08,640 --> 00:42:11,680
the rubios is pointing at it so he knows

926
00:42:11,680 --> 00:42:12,880
what to do

927
00:42:12,880 --> 00:42:15,359
you will be able to see that it will use

928
00:42:15,359 --> 00:42:18,480
the build confuser okay obfuscate and

929
00:42:18,480 --> 00:42:20,400
deploy stages

930
00:42:20,400 --> 00:42:23,920
and with the same thing we

931
00:42:23,920 --> 00:42:27,400
mentioned before

932
00:42:36,800 --> 00:42:38,560
at this time it will not be deployed to

933
00:42:38,560 --> 00:42:40,960
pandrop because we didn't supply the

934
00:42:40,960 --> 00:42:43,839
pandora url and right key for it to

935
00:42:43,839 --> 00:42:45,280
locate and

936
00:42:45,280 --> 00:42:48,079
access it so the pawn drop deployed fun

937
00:42:48,079 --> 00:42:51,599
web job will be failed

938
00:42:56,800 --> 00:42:59,040
now we can see what happens behind this

939
00:42:59,040 --> 00:43:01,839
behind the scenes when we are creating a

940
00:43:01,839 --> 00:43:04,480
job we have the

941
00:43:04,480 --> 00:43:07,440
google kubernetes engine nodes here

942
00:43:07,440 --> 00:43:10,000
and we also have

943
00:43:10,000 --> 00:43:12,160
the ports and the deployments that are

944
00:43:12,160 --> 00:43:14,640
related to this cluster

945
00:43:14,640 --> 00:43:17,440
the first one is the gitlab linux gitlab

946
00:43:17,440 --> 00:43:19,839
runner and the third one is the windows

947
00:43:19,839 --> 00:43:23,040
that we spoke about processing our jobs

948
00:43:23,040 --> 00:43:25,520
the second one is the actual build job

949
00:43:25,520 --> 00:43:27,520
that we are seeing here

950
00:43:27,520 --> 00:43:28,400
it

951
00:43:28,400 --> 00:43:32,640
created a randomized character

952
00:43:32,960 --> 00:43:34,160
pod

953
00:43:34,160 --> 00:43:35,040
that

954
00:43:35,040 --> 00:43:38,079
pulled the container that we specified

955
00:43:38,079 --> 00:43:41,200
together with the helper container that

956
00:43:41,200 --> 00:43:44,240
it needs to get to get in order

957
00:43:44,240 --> 00:43:45,040
to

958
00:43:45,040 --> 00:43:47,520
finish the job successfully

959
00:43:47,520 --> 00:43:49,760
you can see the events until the

960
00:43:49,760 --> 00:43:51,920
container are starting

961
00:43:51,920 --> 00:43:54,160
everything else that happens can be seen

962
00:43:54,160 --> 00:43:58,240
at the con at the reports log

963
00:43:59,280 --> 00:44:01,280
from here we can see also what happens

964
00:44:01,280 --> 00:44:04,319
inside the the container

965
00:44:04,319 --> 00:44:06,640
and we can we will be able to see that

966
00:44:06,640 --> 00:44:09,440
progress is actually get built

967
00:44:09,440 --> 00:44:10,720
using

968
00:44:10,720 --> 00:44:11,920
ms build

969
00:44:11,920 --> 00:44:14,800
and the compiled artifact

970
00:44:14,800 --> 00:44:17,680
is collected and uploaded

971
00:44:17,680 --> 00:44:19,040
to our

972
00:44:19,040 --> 00:44:22,440
job artifacts

973
00:44:24,480 --> 00:44:26,880
this is the area where we upload it and

974
00:44:26,880 --> 00:44:31,040
it it's available on the right side

975
00:44:31,280 --> 00:44:35,040
so we can download or browse it to a

976
00:44:35,040 --> 00:44:37,520
kind of check ourselves

977
00:44:37,520 --> 00:44:40,400
and models things um

978
00:44:40,400 --> 00:44:43,280
we don't must to deploy it somewhere

979
00:44:43,280 --> 00:44:45,760
else in order to access the file we just

980
00:44:45,760 --> 00:44:47,839
need that this is in case you're trying

981
00:44:47,839 --> 00:44:50,640
to operate already

982
00:44:50,640 --> 00:44:53,680
so the computer expert

983
00:44:53,680 --> 00:44:56,000
will be taking the

984
00:44:56,000 --> 00:44:58,480
their compiled rubios

985
00:44:58,480 --> 00:45:00,400
and also

986
00:45:00,400 --> 00:45:01,359
create

987
00:45:01,359 --> 00:45:02,960
his job to

988
00:45:02,960 --> 00:45:06,319
connect to obfuscate it

989
00:45:06,319 --> 00:45:08,160
and give us

990
00:45:08,160 --> 00:45:10,799
the output

991
00:45:13,119 --> 00:45:14,880
takes the container from the same place

992
00:45:14,880 --> 00:45:17,040
we've seen and now we can see that it's

993
00:45:17,040 --> 00:45:20,319
still pulling the the container from our

994
00:45:20,319 --> 00:45:23,800
container registry

995
00:45:33,359 --> 00:45:35,280
so the job was done and you can take a

996
00:45:35,280 --> 00:45:36,560
look

997
00:45:36,560 --> 00:45:39,880
on the results

998
00:45:55,680 --> 00:45:58,000
we can see that it was obfuscated using

999
00:45:58,000 --> 00:46:01,359
the confuser with our predefined job

1000
00:46:01,359 --> 00:46:02,720
and the

1001
00:46:02,720 --> 00:46:04,720
rubiosx was

1002
00:46:04,720 --> 00:46:08,960
obfuscated and the obfuscated version

1003
00:46:08,960 --> 00:46:12,800
was uploaded to the job artifact where

1004
00:46:12,800 --> 00:46:16,480
we can see on the right side

1005
00:46:16,480 --> 00:46:18,800
the pipeline was considered failed

1006
00:46:18,800 --> 00:46:22,720
because not all jobs were succeeded

1007
00:46:22,720 --> 00:46:23,839
to pass

1008
00:46:23,839 --> 00:46:25,599
and this is because the pawn drop

1009
00:46:25,599 --> 00:46:27,599
deployed front drop job

1010
00:46:27,599 --> 00:46:30,240
was failed

1011
00:46:34,160 --> 00:46:36,079
now let's say we want to import another

1012
00:46:36,079 --> 00:46:37,040
tune

1013
00:46:37,040 --> 00:46:39,200
we can add another object into that

1014
00:46:39,200 --> 00:46:40,319
array

1015
00:46:40,319 --> 00:46:45,119
and specify and build its recipe

1016
00:46:45,760 --> 00:46:49,040
let's copy an example

1017
00:46:50,640 --> 00:46:52,960
we will take the sharp block tool for

1018
00:46:52,960 --> 00:46:55,040
this example

1019
00:46:55,040 --> 00:46:58,240
copy its git path

1020
00:47:03,280 --> 00:47:06,640
don't forget to change the name

1021
00:47:06,640 --> 00:47:08,800
we'll keep the visibility internal and

1022
00:47:08,800 --> 00:47:12,240
we have to point it at some recipe and

1023
00:47:12,240 --> 00:47:13,280
yaml

1024
00:47:13,280 --> 00:47:17,839
that will inspect it how to build itself

1025
00:47:17,839 --> 00:47:19,839
now because this file does not exist we

1026
00:47:19,839 --> 00:47:23,280
will have to create it by our own

1027
00:47:23,280 --> 00:47:27,200
so it will be under ci tools controllers

1028
00:47:27,200 --> 00:47:30,558
as any tool here

1029
00:47:35,520 --> 00:47:38,240
and we'll take an example from how we

1030
00:47:38,240 --> 00:47:40,400
did with rubios but

1031
00:47:40,400 --> 00:47:43,680
this time we will use only the building

1032
00:47:43,680 --> 00:47:46,640
stage engine

1033
00:47:48,000 --> 00:47:50,960
we'll have also to clear the variables

1034
00:47:50,960 --> 00:47:54,240
and switch them with a

1035
00:47:54,240 --> 00:47:55,119
with

1036
00:47:55,119 --> 00:47:58,880
the related tools variables

1037
00:47:59,280 --> 00:48:01,680
clean also the build and

1038
00:48:01,680 --> 00:48:02,480
uh

1039
00:48:02,480 --> 00:48:05,040
this is sorry the obfuscate and deploy

1040
00:48:05,040 --> 00:48:07,040
parts

1041
00:48:07,040 --> 00:48:09,599
keeping only building the tool to see to

1042
00:48:09,599 --> 00:48:13,119
see if we can do that

1043
00:48:13,599 --> 00:48:15,440
specifying we have to specify the

1044
00:48:15,440 --> 00:48:18,160
solution for the next job

1045
00:48:18,160 --> 00:48:20,720
for the build job to find it

1046
00:48:20,720 --> 00:48:22,640
and since we want to collect the

1047
00:48:22,640 --> 00:48:24,559
artifact we need to specify the

1048
00:48:24,559 --> 00:48:26,400
executable file name

1049
00:48:26,400 --> 00:48:30,480
and we need to specify the correct path

1050
00:48:30,480 --> 00:48:32,559
we'll try to extract it from the cs

1051
00:48:32,559 --> 00:48:35,839
approach file

1052
00:48:35,839 --> 00:48:39,040
under the release configuration

1053
00:48:39,040 --> 00:48:42,880
you can see that it's under bin release

1054
00:48:44,880 --> 00:48:46,720
specify it

1055
00:48:46,720 --> 00:48:49,599
you can flip the to forward slash it's

1056
00:48:49,599 --> 00:48:52,240
not a problem

1057
00:48:52,240 --> 00:48:55,599
now we have to commit the the changes

1058
00:48:55,599 --> 00:48:58,079
that we've made

1059
00:48:58,079 --> 00:49:02,000
into this repository so

1060
00:49:02,000 --> 00:49:03,440
the

1061
00:49:03,440 --> 00:49:05,520
sharp block tool will be able to get

1062
00:49:05,520 --> 00:49:08,400
imported and to read

1063
00:49:08,400 --> 00:49:09,200
its

1064
00:49:09,200 --> 00:49:12,078
yummy recipe

1065
00:49:12,400 --> 00:49:16,960
since that other things were changed

1066
00:49:16,960 --> 00:49:18,240
nothing here

1067
00:49:18,240 --> 00:49:21,118
just a new line

1068
00:49:23,119 --> 00:49:25,359
see

1069
00:49:25,599 --> 00:49:27,760
obvious as well

1070
00:49:27,760 --> 00:49:28,720
again

1071
00:49:28,720 --> 00:49:30,880
new line

1072
00:49:30,880 --> 00:49:33,760
you can delete it

1073
00:49:35,359 --> 00:49:36,640
still here

1074
00:49:36,640 --> 00:49:38,960
never mind

1075
00:49:38,960 --> 00:49:40,640
and

1076
00:49:40,640 --> 00:49:44,559
let's commit and see you can see that

1077
00:49:44,559 --> 00:49:48,160
there is a new tool imported to the tool

1078
00:49:48,160 --> 00:49:51,680
in to the tools index

1079
00:49:54,400 --> 00:49:57,960
and a new file

1080
00:50:05,119 --> 00:50:08,240
committing the changes

1081
00:50:10,839 --> 00:50:13,599
great as you can see a pipeline was

1082
00:50:13,599 --> 00:50:15,760
already triggered by

1083
00:50:15,760 --> 00:50:18,480
this commit uh to import the tool that

1084
00:50:18,480 --> 00:50:21,680
that we've just added and this pipeline

1085
00:50:21,680 --> 00:50:23,839
is automatically

1086
00:50:23,839 --> 00:50:26,079
created using the conditions i mentioned

1087
00:50:26,079 --> 00:50:27,760
before

1088
00:50:27,760 --> 00:50:31,280
now what it does it takes a as i

1089
00:50:31,280 --> 00:50:33,520
said it takes that in the tools index

1090
00:50:33,520 --> 00:50:36,480
and it sees that there is a missing tool

1091
00:50:36,480 --> 00:50:39,760
in the instance and we it will import it

1092
00:50:39,760 --> 00:50:42,960
in few seconds

1093
00:50:48,000 --> 00:50:51,200
you can see also a pod that actually

1094
00:50:51,200 --> 00:50:53,440
assigned for that

1095
00:50:53,440 --> 00:50:56,000
containing a pod that contains

1096
00:50:56,000 --> 00:50:58,000
two containers this time

1097
00:50:58,000 --> 00:51:01,520
linux related containers ubuntu and the

1098
00:51:01,520 --> 00:51:04,800
gitlab runner helper

1099
00:51:06,160 --> 00:51:08,720
and we can see that it succeeded and

1100
00:51:08,720 --> 00:51:11,599
another tool was imported to our project

1101
00:51:11,599 --> 00:51:13,839
list

1102
00:51:15,040 --> 00:51:18,640
let's go to the main page

1103
00:51:19,599 --> 00:51:21,839
we'll be able to see sharp look right

1104
00:51:21,839 --> 00:51:24,240
away

1105
00:51:26,240 --> 00:51:31,479
and even execute its python

1106
00:51:45,839 --> 00:51:47,760
you can see that it contains the build

1107
00:51:47,760 --> 00:51:51,119
job as we defined it to do

1108
00:51:51,119 --> 00:51:53,359
and now it will attempt to to build it

1109
00:51:53,359 --> 00:51:54,880
using the

1110
00:51:54,880 --> 00:51:57,440
job that we already redefined and use

1111
00:51:57,440 --> 00:52:00,079
the same job for rubios and other

1112
00:52:00,079 --> 00:52:03,720
c-sharp tools

1113
00:52:05,520 --> 00:52:09,400
see that the job has succeeded

1114
00:52:18,800 --> 00:52:19,760
now

1115
00:52:19,760 --> 00:52:22,559
let's move on

1116
00:52:23,760 --> 00:52:25,920
another cool thing within the scallops

1117
00:52:25,920 --> 00:52:27,680
recipes pipeline

1118
00:52:27,680 --> 00:52:31,520
is that you can basically create docker

1119
00:52:31,520 --> 00:52:34,960
container container images from a docker

1120
00:52:34,960 --> 00:52:36,240
file

1121
00:52:36,240 --> 00:52:39,599
and this is goes with the with coding

1122
00:52:39,599 --> 00:52:41,680
your infrastructure coding everything

1123
00:52:41,680 --> 00:52:42,800
you need

1124
00:52:42,800 --> 00:52:44,319
and also

1125
00:52:44,319 --> 00:52:45,200
the

1126
00:52:45,200 --> 00:52:47,119
uh

1127
00:52:47,119 --> 00:52:49,200
the the jobs that you will need to

1128
00:52:49,200 --> 00:52:52,240
execute during your pipelines

1129
00:52:52,240 --> 00:52:56,640
so before that we will see the uh

1130
00:52:56,800 --> 00:52:59,599
multi-pipeline support and we can see

1131
00:52:59,599 --> 00:53:01,359
that there are

1132
00:53:01,359 --> 00:53:03,119
there is a trigger for three different

1133
00:53:03,119 --> 00:53:04,640
turns

1134
00:53:04,640 --> 00:53:07,760
the power up the rubios and the guardian

1135
00:53:07,760 --> 00:53:11,040
now these tools are these pipeline these

1136
00:53:11,040 --> 00:53:13,520
jobs will trigger their the related

1137
00:53:13,520 --> 00:53:15,920
repository and

1138
00:53:15,920 --> 00:53:18,240
related repository tools

1139
00:53:18,240 --> 00:53:21,200
and by triggering the scallops recipes

1140
00:53:21,200 --> 00:53:23,760
pipeline and providing the relevant

1141
00:53:23,760 --> 00:53:24,960
variable

1142
00:53:24,960 --> 00:53:28,839
to execute them

1143
00:53:30,960 --> 00:53:32,800
if we run the pipeline of scallops

1144
00:53:32,800 --> 00:53:34,480
recipes

1145
00:53:34,480 --> 00:53:38,000
and specify the var the cn multitrigger

1146
00:53:38,000 --> 00:53:43,200
variable with the desired a value that

1147
00:53:43,200 --> 00:53:47,520
contained in the different trigger jobs

1148
00:53:47,520 --> 00:53:50,000
you can actually make them trigger

1149
00:53:50,000 --> 00:53:53,839
the relevant repositories

1150
00:53:55,119 --> 00:53:57,119
if you want to deploy them to our

1151
00:53:57,119 --> 00:53:58,800
pundlab server

1152
00:53:58,800 --> 00:54:01,359
we have to specify its url and its side

1153
00:54:01,359 --> 00:54:06,200
key and we can do that right now

1154
00:54:10,880 --> 00:54:13,520
and the key

1155
00:54:13,599 --> 00:54:16,640
this is a customized pawn drop available

1156
00:54:16,640 --> 00:54:20,040
in my github

1157
00:54:26,559 --> 00:54:29,839
hitting run pipeline

1158
00:54:36,319 --> 00:54:39,040
and we can see three different

1159
00:54:39,040 --> 00:54:42,640
downstream pipelines that will trigger

1160
00:54:42,640 --> 00:54:44,160
and

1161
00:54:44,160 --> 00:54:46,559
to make our

1162
00:54:46,559 --> 00:54:50,720
and weaponize our related tools

1163
00:54:51,440 --> 00:54:54,400
let's keep this

1164
00:54:58,079 --> 00:55:00,720
and before we show that the related

1165
00:55:00,720 --> 00:55:03,920
recipes were triggered with their

1166
00:55:03,920 --> 00:55:07,839
respective stages

1167
00:55:08,480 --> 00:55:12,720
i don't want you to wait for that time

1168
00:55:14,960 --> 00:55:17,280
okay once all have finished and we can

1169
00:55:17,280 --> 00:55:20,000
see that also the deploy pan drop was

1170
00:55:20,000 --> 00:55:22,960
succeeded everything is green

1171
00:55:22,960 --> 00:55:25,440
we'll be able to see that these files

1172
00:55:25,440 --> 00:55:29,599
these binaries were added to here

1173
00:55:33,599 --> 00:55:35,200
you can see the three different tools

1174
00:55:35,200 --> 00:55:37,599
that we just triggered their pipelines

1175
00:55:37,599 --> 00:55:41,119
submitted their a binaries right to our

1176
00:55:41,119 --> 00:55:45,240
pandrop hosting server

1177
00:55:53,760 --> 00:55:55,839
getting back to the scallops repository

1178
00:55:55,839 --> 00:55:58,839
pipeline

1179
00:56:03,280 --> 00:56:06,160
uh we can we saw that the the container

1180
00:56:06,160 --> 00:56:08,160
builder support that builds the three

1181
00:56:08,160 --> 00:56:10,799
these three different docker files

1182
00:56:10,799 --> 00:56:12,720
and let's say we want to build another

1183
00:56:12,720 --> 00:56:14,240
local file

1184
00:56:14,240 --> 00:56:17,839
so what we do is adding a new

1185
00:56:17,839 --> 00:56:18,880
file

1186
00:56:18,880 --> 00:56:21,520
let's say ximena

1187
00:56:21,520 --> 00:56:26,119
dash 2 dot docker file

1188
00:56:30,240 --> 00:56:32,480
and for this for this example we will

1189
00:56:32,480 --> 00:56:34,960
just uh copy

1190
00:56:34,960 --> 00:56:37,359
the content of the other docker file

1191
00:56:37,359 --> 00:56:39,520
other camera docker file

1192
00:56:39,520 --> 00:56:40,400
but

1193
00:56:40,400 --> 00:56:42,720
we will change

1194
00:56:42,720 --> 00:56:47,279
the base image for the docker file

1195
00:56:48,799 --> 00:56:51,119
can change it to

1196
00:56:51,119 --> 00:56:54,799
ubuntu 20 or maybe

1197
00:56:54,799 --> 00:56:59,720
a ubuntu 20 maybe ubuntu latest

1198
00:57:02,400 --> 00:57:07,079
now we have to commit this docker file

1199
00:57:12,960 --> 00:57:14,960
we can see it added here

1200
00:57:14,960 --> 00:57:17,359
and we can run actually the pipeline of

1201
00:57:17,359 --> 00:57:20,000
the scallops recipes

1202
00:57:20,000 --> 00:57:21,520
and use

1203
00:57:21,520 --> 00:57:24,559
another variable called dockerfile build

1204
00:57:24,559 --> 00:57:25,760
linux

1205
00:57:25,760 --> 00:57:28,400
where you have to specify the prefix of

1206
00:57:28,400 --> 00:57:30,799
your docker file name

1207
00:57:30,799 --> 00:57:35,119
that is existing other dockerfiles linux

1208
00:57:35,119 --> 00:57:38,720
the specified camera-2

1209
00:57:38,720 --> 00:57:42,400
and the build linux container was a

1210
00:57:42,400 --> 00:57:45,520
trigger within our pipeline

1211
00:57:45,520 --> 00:57:48,880
and eventually we'll be able to see it

1212
00:57:48,880 --> 00:57:53,079
in our container registry

1213
00:58:00,319 --> 00:58:03,440
refresh it and

1214
00:58:03,599 --> 00:58:08,280
a new container image was added

1215
00:58:27,119 --> 00:58:29,839
so this is all for this demo i hope you

1216
00:58:29,839 --> 00:58:33,040
enjoyed this is a very nice example you

1217
00:58:33,040 --> 00:58:34,480
can actually

1218
00:58:34,480 --> 00:58:38,559
learn from and over develop and design

1219
00:58:38,559 --> 00:58:40,720
new capabilities for yourself for your

1220
00:58:40,720 --> 00:58:43,280
team and also contribute back to the

1221
00:58:43,280 --> 00:58:46,160
scallops recipes repository

1222
00:58:46,160 --> 00:58:49,440
hosted in our github

1223
00:58:49,440 --> 00:58:52,960
let's move on a few words about the

1224
00:58:52,960 --> 00:58:56,079
cloud costs um

1225
00:58:56,079 --> 00:58:58,480
we can divide them to idle time and per

1226
00:58:58,480 --> 00:59:00,559
job time because when we are actually

1227
00:59:00,559 --> 00:59:02,960
running pipelines we are

1228
00:59:02,960 --> 00:59:06,640
provisioning node images that we are uh

1229
00:59:06,640 --> 00:59:08,799
running the ports and containers over

1230
00:59:08,799 --> 00:59:11,280
them but they are disposing fast right

1231
00:59:11,280 --> 00:59:13,440
after you five to ten minutes right

1232
00:59:13,440 --> 00:59:14,720
after you finish

1233
00:59:14,720 --> 00:59:17,520
your uh your job pipelines

1234
00:59:17,520 --> 00:59:20,559
and on the idle side you have a gitlab

1235
00:59:20,559 --> 00:59:23,359
instance and a linux node that are

1236
00:59:23,359 --> 00:59:24,720
actively

1237
00:59:24,720 --> 00:59:27,119
always on to serve you when you need

1238
00:59:27,119 --> 00:59:27,920
them

1239
00:59:27,920 --> 00:59:31,040
when you need this framework

1240
00:59:31,040 --> 00:59:33,680
and they cost most of the credit

1241
00:59:33,680 --> 00:59:37,119
and so unless you don't actually plan to

1242
00:59:37,119 --> 00:59:40,880
supply the weaponized tool to the world

1243
00:59:40,880 --> 00:59:43,680
uh security community

1244
00:59:43,680 --> 00:59:47,680
you will be end up around 100 usd

1245
00:59:47,680 --> 00:59:50,240
by using this framework and deployment

1246
00:59:50,240 --> 00:59:52,160
you can also turn off the gitlab

1247
00:59:52,160 --> 00:59:53,680
instance or

1248
00:59:53,680 --> 00:59:55,040
some of the

1249
00:59:55,040 --> 00:59:57,119
cluster nodes but

1250
00:59:57,119 --> 01:00:01,319
it it's up to you

1251
01:00:02,000 --> 01:00:03,920
additional thoughts that came up to my

1252
01:00:03,920 --> 01:00:06,000
mind during creating

1253
01:00:06,000 --> 01:00:08,559
the framework the design and this

1254
01:00:08,559 --> 01:00:10,799
presentation is that

1255
01:00:10,799 --> 01:00:12,799
this is a community can be a community

1256
01:00:12,799 --> 01:00:14,400
driven framework

1257
01:00:14,400 --> 01:00:16,559
i mean because we have the scallops

1258
01:00:16,559 --> 01:00:19,440
recipes repository that is hosted in

1259
01:00:19,440 --> 01:00:22,240
github anyone can deploy the same

1260
01:00:22,240 --> 01:00:24,559
infrastructure to his self

1261
01:00:24,559 --> 01:00:26,160
and

1262
01:00:26,160 --> 01:00:28,319
designing recipes designing new

1263
01:00:28,319 --> 01:00:30,960
techniques models and contribute back to

1264
01:00:30,960 --> 01:00:33,280
the community in the same way that

1265
01:00:33,280 --> 01:00:35,119
people do today with cobblestack

1266
01:00:35,119 --> 01:00:38,000
aggressive scripts

1267
01:00:38,000 --> 01:00:40,640
also you will be able to see that many

1268
01:00:40,640 --> 01:00:43,599
tasks that you will we tend to do in

1269
01:00:43,599 --> 01:00:46,480
adversary simulations and red team uh

1270
01:00:46,480 --> 01:00:48,480
now are faster

1271
01:00:48,480 --> 01:00:51,280
and this will uh

1272
01:00:51,280 --> 01:00:53,920
come up with a new need to process this

1273
01:00:53,920 --> 01:00:56,559
data because you will use it used to do

1274
01:00:56,559 --> 01:00:59,440
it to one a tool and look at the results

1275
01:00:59,440 --> 01:01:01,920
of the previous one trying to figure out

1276
01:01:01,920 --> 01:01:03,520
what you're going to do what are your

1277
01:01:03,520 --> 01:01:06,240
next steps

1278
01:01:06,240 --> 01:01:09,040
also maybe you thought about using c2

1279
01:01:09,040 --> 01:01:12,000
that it it's that it does your tasks in

1280
01:01:12,000 --> 01:01:14,400
an effective way very fast

1281
01:01:14,400 --> 01:01:17,839
we didn't plan to

1282
01:01:18,640 --> 01:01:21,040
stop using them but you can use them in

1283
01:01:21,040 --> 01:01:23,359
conjunction since command and control

1284
01:01:23,359 --> 01:01:24,640
servers

1285
01:01:24,640 --> 01:01:28,000
are not always mostly updated and not

1286
01:01:28,000 --> 01:01:29,920
always containing all the tools you need

1287
01:01:29,920 --> 01:01:32,160
in the way you need to execute them

1288
01:01:32,160 --> 01:01:34,240
and so this can be a great way to work

1289
01:01:34,240 --> 01:01:35,520
in conjunction

1290
01:01:35,520 --> 01:01:37,280
imagine you are

1291
01:01:37,280 --> 01:01:40,799
cooling your a grunt your bitcoin your

1292
01:01:40,799 --> 01:01:43,520
engine whatever you're using

1293
01:01:43,520 --> 01:01:45,599
and obfuscating it

1294
01:01:45,599 --> 01:01:48,079
adding a loader method adding bypass

1295
01:01:48,079 --> 01:01:50,480
methods and hosting it back to somewhere

1296
01:01:50,480 --> 01:01:53,280
in the internet where the targeted

1297
01:01:53,280 --> 01:01:54,799
and well you can download it and you'll

1298
01:01:54,799 --> 01:01:57,839
target an environment and use it

1299
01:01:57,839 --> 01:02:00,319
on your day-to-day work

1300
01:02:00,319 --> 01:02:03,039
and i also listed here references to

1301
01:02:03,039 --> 01:02:05,280
technologies that are part of this

1302
01:02:05,280 --> 01:02:06,480
framework

1303
01:02:06,480 --> 01:02:08,960
you can take a look in order to extend

1304
01:02:08,960 --> 01:02:10,319
your knowledge

1305
01:02:10,319 --> 01:02:12,960
and also feel free to come out to me

1306
01:02:12,960 --> 01:02:15,520
asking questions

1307
01:02:15,520 --> 01:02:18,000
and also to thank anyone who took part

1308
01:02:18,000 --> 01:02:20,000
in helping me with the framework the

1309
01:02:20,000 --> 01:02:22,799
design the presentation itself

1310
01:02:22,799 --> 01:02:26,240
and thank you very much and also

1311
01:02:26,240 --> 01:02:28,559
thank you for staying up

1312
01:02:28,559 --> 01:02:32,000
and i hope you enjoyed this talk i hope

1313
01:02:32,000 --> 01:02:34,640
to see you in singapore sometime

1314
01:02:34,640 --> 01:02:37,839
and maybe the next hacking the box

1315
01:02:37,839 --> 01:02:40,000
i hope you consider to adopt this acd

1316
01:02:40,000 --> 01:02:42,559
concept into your red teams i hope to

1317
01:02:42,559 --> 01:02:44,160
get feedback from you about the

1318
01:02:44,160 --> 01:02:45,920
infrastructure itself

1319
01:02:45,920 --> 01:02:48,240
and i will be taking on the discord

1320
01:02:48,240 --> 01:02:50,000
server your questions

1321
01:02:50,000 --> 01:02:54,400
and comments on this presentation and

1322
01:02:54,400 --> 01:02:59,960
everything else so see you there bye bye

