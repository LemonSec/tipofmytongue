1
00:00:12,160 --> 00:00:14,559
hello everyone thank you for giving us

2
00:00:14,559 --> 00:00:17,760
the opportunity to tell you about our

3
00:00:17,760 --> 00:00:19,520
latest research

4
00:00:19,520 --> 00:00:22,400
into attacking jdbc

5
00:00:22,400 --> 00:00:25,279
first of all let me introduce our team i

6
00:00:25,279 --> 00:00:28,000
am chain hong kong my partner shien zhen

7
00:00:28,000 --> 00:00:30,800
and i are both from the security team of

8
00:00:30,800 --> 00:00:32,960
alibaba cloud

9
00:00:32,960 --> 00:00:36,320
we are responsible for alibaba cloud web

10
00:00:36,320 --> 00:00:38,800
application firewall defense system

11
00:00:38,800 --> 00:00:41,120
construction

12
00:00:41,120 --> 00:00:44,399
including related attack on defense

13
00:00:44,399 --> 00:00:47,680
technology research

14
00:00:51,440 --> 00:00:53,760
in this talk we start with the

15
00:00:53,760 --> 00:00:57,440
derivation of jdbc attacks including the

16
00:00:57,440 --> 00:01:00,719
jdbc concept and root cause of

17
00:01:00,719 --> 00:01:02,559
vulnerability

18
00:01:02,559 --> 00:01:06,000
then we will share some new ways of

19
00:01:06,000 --> 00:01:09,520
exploiting jdbc we found

20
00:01:09,520 --> 00:01:13,080
now let's go

21
00:01:16,240 --> 00:01:19,759
the first question is a voice jdbc and

22
00:01:19,759 --> 00:01:22,080
jdbc attack

23
00:01:22,080 --> 00:01:24,000
for java application

24
00:01:24,000 --> 00:01:26,479
lei wants to connect to a particular

25
00:01:26,479 --> 00:01:29,920
database especially relational database

26
00:01:29,920 --> 00:01:34,880
it use a standard set of api called jdbc

27
00:01:34,880 --> 00:01:38,159
the phone name of jdbc is java database

28
00:01:38,159 --> 00:01:41,159
connectivity

29
00:01:44,079 --> 00:01:46,799
and its main link in the java sql

30
00:01:46,799 --> 00:01:48,720
package in jdk

31
00:01:48,720 --> 00:01:52,159
jdbc drivers are center-side adapters

32
00:01:52,159 --> 00:01:54,479
installed installed on a cylinder

33
00:01:54,479 --> 00:01:56,880
machine no on the server

34
00:01:56,880 --> 00:02:00,079
it can cover requester from java program

35
00:02:00,079 --> 00:02:01,759
to vertical

36
00:02:01,759 --> 00:02:05,360
dbms can understand

37
00:02:05,520 --> 00:02:09,280
jdbc drivers provide jdbc specific

38
00:02:09,280 --> 00:02:12,080
implementation for different databases

39
00:02:12,080 --> 00:02:18,480
such as mysql oracle db2 and so on

40
00:02:18,480 --> 00:02:22,319
for developers jdbc helped them to share

41
00:02:22,319 --> 00:02:24,720
the specifics of

42
00:02:24,720 --> 00:02:28,160
individual database

43
00:02:32,879 --> 00:02:36,160
now let's see our typical code for

44
00:02:36,160 --> 00:02:41,680
creating to a database through jdbc

45
00:02:41,920 --> 00:02:45,920
first he lost a specific driver a name

46
00:02:45,920 --> 00:02:46,879
involved

47
00:02:46,879 --> 00:02:49,360
driver general manager

48
00:02:49,360 --> 00:02:52,640
connection measure to add a connection

49
00:02:52,640 --> 00:02:57,238
to a specific database

50
00:03:04,159 --> 00:03:07,680
our following show assembler attacker

51
00:03:07,680 --> 00:03:10,959
can control a connection url and we will

52
00:03:10,959 --> 00:03:12,959
discuss some of the

53
00:03:12,959 --> 00:03:16,319
attacks in this case

54
00:03:16,720 --> 00:03:19,440
in the case of controllable jdbc

55
00:03:19,440 --> 00:03:22,560
connection the basket attack idea is of

56
00:03:22,560 --> 00:03:25,280
the followed

57
00:03:25,440 --> 00:03:28,480
the attackers

58
00:03:28,599 --> 00:03:31,200
manufacturer and trigger of jdbc

59
00:03:31,200 --> 00:03:32,480
connection

60
00:03:32,480 --> 00:03:36,720
then the jdbc standard connect tool

61
00:03:36,720 --> 00:03:39,280
miniature server specified by the

62
00:03:39,280 --> 00:03:41,920
attacker

63
00:03:42,000 --> 00:03:44,799
attackers often take advantage of some

64
00:03:44,799 --> 00:03:48,239
security flaw or some higher privilege

65
00:03:48,239 --> 00:03:51,280
feature in the jdbc driver

66
00:03:51,280 --> 00:03:54,560
the trick they trigger these problems by

67
00:03:54,560 --> 00:03:58,000
contracting a specific return data from

68
00:03:58,000 --> 00:04:00,400
the meniscus server

69
00:04:00,400 --> 00:04:03,760
finally they will result in

70
00:04:03,760 --> 00:04:06,239
remote code execution or other

71
00:04:06,239 --> 00:04:07,490
vulnerability

72
00:04:07,490 --> 00:04:10,669
[Music]

73
00:04:12,640 --> 00:04:14,640
let's have a look at some of the

74
00:04:14,640 --> 00:04:17,600
exploits that have been disclosed and

75
00:04:17,600 --> 00:04:19,199
tagged in deep

76
00:04:19,199 --> 00:04:21,918
analyzed for the cause of

77
00:04:21,918 --> 00:04:24,919
vulnerability

78
00:04:29,360 --> 00:04:32,479
starting with my sql center arbitrary

79
00:04:32,479 --> 00:04:36,639
file reading one probability

80
00:04:37,040 --> 00:04:40,000
and this vulnerability is caused by the

81
00:04:40,000 --> 00:04:42,960
mysql future lan has exceeded for a long

82
00:04:42,960 --> 00:04:43,919
time

83
00:04:43,919 --> 00:04:46,560
the future is letter law law the data

84
00:04:46,560 --> 00:04:48,720
local in file statement can read the

85
00:04:48,720 --> 00:04:53,840
silent files and send them to the server

86
00:04:53,840 --> 00:04:56,080
there is no doubt that this future is

87
00:04:56,080 --> 00:04:58,479
very dangerous and

88
00:04:58,479 --> 00:05:01,520
my sql document documentation

89
00:05:01,520 --> 00:05:03,520
clearly states that

90
00:05:03,520 --> 00:05:06,400
the silence uh

91
00:05:06,400 --> 00:05:09,280
science student connect to any untrusted

92
00:05:09,280 --> 00:05:11,039
server

93
00:05:11,039 --> 00:05:13,039
but the truth is

94
00:05:13,039 --> 00:05:17,039
there is always a hard to be sure

95
00:05:17,039 --> 00:05:20,240
and since this is the specification of

96
00:05:20,240 --> 00:05:21,680
mysql

97
00:05:21,680 --> 00:05:24,400
it can vary more silent

98
00:05:24,400 --> 00:05:29,919
including the mysql jdbc driver

99
00:05:30,080 --> 00:05:33,680
an attacker can forge or manipulate my

100
00:05:33,680 --> 00:05:36,479
my sql server and after the cylinder

101
00:05:36,479 --> 00:05:37,759
connects

102
00:05:37,759 --> 00:05:40,639
the signature will foster send some

103
00:05:40,639 --> 00:05:42,320
inviting

104
00:05:42,320 --> 00:05:45,199
query package with such other set send

105
00:05:45,199 --> 00:05:48,400
query package to send them send them

106
00:05:48,400 --> 00:05:50,560
trust trusted

107
00:05:50,560 --> 00:05:53,680
then the manuscript server can send a

108
00:05:53,680 --> 00:05:54,560
file

109
00:05:54,560 --> 00:05:57,280
transfer packet specificating to read

110
00:05:57,280 --> 00:06:01,400
any file from the silent

111
00:06:07,520 --> 00:06:11,199
the second one is uh my sql jdbc

112
00:06:11,199 --> 00:06:14,759
standard desiralization

113
00:06:14,880 --> 00:06:18,479
serialization vulnerabilities

114
00:06:18,479 --> 00:06:22,800
the bug exceed when my sql jdbc cdbc

115
00:06:22,800 --> 00:06:24,479
driver directly

116
00:06:24,479 --> 00:06:27,680
the serialized serializes certain types

117
00:06:27,680 --> 00:06:29,759
of data returned by the

118
00:06:29,759 --> 00:06:32,479
server which can result in

119
00:06:32,479 --> 00:06:37,039
rce or e4 law if gadgets are of a

120
00:06:37,039 --> 00:06:40,039
property

121
00:06:49,440 --> 00:06:52,160
using the statement interceptor the

122
00:06:52,160 --> 00:06:55,599
property provided by the driver

123
00:06:55,599 --> 00:06:57,360
you can set an

124
00:06:57,360 --> 00:06:59,759
interceptor to perform additional

125
00:06:59,759 --> 00:07:02,800
operations before or after the second

126
00:07:02,800 --> 00:07:06,000
kind of statement

127
00:07:06,080 --> 00:07:09,919
so the four attacking chair is led first

128
00:07:09,919 --> 00:07:11,520
sailor statement

129
00:07:11,520 --> 00:07:14,639
interceptor attribute to server status

130
00:07:14,639 --> 00:07:18,319
diff interceptor class

131
00:07:18,960 --> 00:07:20,479
we

132
00:07:20,479 --> 00:07:21,599
when we

133
00:07:21,599 --> 00:07:23,039
auditing

134
00:07:23,039 --> 00:07:25,919
server stats div interceptor code you

135
00:07:25,919 --> 00:07:28,479
can see that this interceptor allows the

136
00:07:28,479 --> 00:07:30,639
senator to send a special

137
00:07:30,639 --> 00:07:33,199
query specific query to

138
00:07:33,199 --> 00:07:35,199
server

139
00:07:35,199 --> 00:07:37,919
in addition the gate object master is

140
00:07:37,919 --> 00:07:40,960
used to processor return the

141
00:07:40,960 --> 00:07:43,359
column

142
00:07:43,759 --> 00:07:46,160
in okay object master the driver will

143
00:07:46,160 --> 00:07:48,560
directly call a read object messenger

144
00:07:48,560 --> 00:07:51,840
for this serialization

145
00:07:51,840 --> 00:07:53,039
or for

146
00:07:53,039 --> 00:07:57,560
bringing blob types

147
00:08:07,039 --> 00:08:09,599
therefore the server's either content

148
00:08:09,599 --> 00:08:11,520
server side

149
00:08:11,520 --> 00:08:12,560
by the

150
00:08:12,560 --> 00:08:15,680
bio-attacker can trigger deserialization

151
00:08:15,680 --> 00:08:18,400
vulnerabilities as long as the e-return

152
00:08:18,400 --> 00:08:20,319
force-filed

153
00:08:20,319 --> 00:08:24,199
serialize the data

154
00:08:29,840 --> 00:08:32,559
of course the class and property names

155
00:08:32,559 --> 00:08:33,279
of

156
00:08:33,279 --> 00:08:35,679
interceptors are different in various

157
00:08:35,679 --> 00:08:38,640
versions of jdbc driver

158
00:08:38,640 --> 00:08:41,838
as show in the table

159
00:08:48,320 --> 00:08:49,440
okay

160
00:08:49,440 --> 00:08:53,040
jdbc attack technology is usually a good

161
00:08:53,040 --> 00:08:56,880
attack options in the following scenario

162
00:08:56,880 --> 00:08:59,360
for example final

163
00:08:59,360 --> 00:09:03,279
final new gadgets such as the texture or

164
00:09:03,279 --> 00:09:06,320
fast situation gadgets

165
00:09:06,320 --> 00:09:09,600
that's because in some gator center or

166
00:09:09,600 --> 00:09:11,920
construction measure

167
00:09:11,920 --> 00:09:16,240
they will india initial as a database

168
00:09:16,240 --> 00:09:18,560
connection directly

169
00:09:18,560 --> 00:09:19,600
with

170
00:09:19,600 --> 00:09:23,680
with jdbc attacker we can achieve rce or

171
00:09:23,680 --> 00:09:28,239
arbitrary file reading vulnerabilities

172
00:09:28,800 --> 00:09:32,320
and it's easy to add this data data or

173
00:09:32,320 --> 00:09:35,200
construction method to the original

174
00:09:35,200 --> 00:09:38,080
get to the chain

175
00:09:38,240 --> 00:09:40,480
another example is some application in

176
00:09:40,480 --> 00:09:42,000
property

177
00:09:42,000 --> 00:09:45,040
is is called some jdbc configuration

178
00:09:45,040 --> 00:09:46,959
interface

179
00:09:46,959 --> 00:09:50,640
such as the stream voltage

180
00:09:51,680 --> 00:09:54,160
springboot is one of the most widely

181
00:09:54,160 --> 00:09:57,279
used java frameworks

182
00:09:57,279 --> 00:09:59,920
supreme stream builder altitude

183
00:09:59,920 --> 00:10:04,839
is a stable project of springboard

184
00:10:05,120 --> 00:10:07,519
ft2o brings

185
00:10:07,519 --> 00:10:10,079
production ready future to our

186
00:10:10,079 --> 00:10:13,519
application developers often use it to

187
00:10:13,519 --> 00:10:16,959
monitor their airport

188
00:10:16,959 --> 00:10:20,480
gathering matches understanding traffic

189
00:10:20,480 --> 00:10:25,040
all the standard for our database

190
00:10:31,680 --> 00:10:33,440
there are many

191
00:10:33,440 --> 00:10:36,079
dangerous configuration

192
00:10:36,079 --> 00:10:38,640
typically jdbc configuration which can

193
00:10:38,640 --> 00:10:39,920
be

194
00:10:39,920 --> 00:10:42,240
many many fueled by an attacker to

195
00:10:42,240 --> 00:10:45,120
specific application connect to many

196
00:10:45,120 --> 00:10:46,800
shots database

197
00:10:46,800 --> 00:10:50,160
and then attackers can exploit with a

198
00:10:50,160 --> 00:10:53,120
jdbc attack

199
00:10:54,240 --> 00:10:56,720
also the attacker technology can also be

200
00:10:56,720 --> 00:10:59,440
used to finishing or creating honeypots

201
00:10:59,440 --> 00:11:02,640
to counter attackers

202
00:11:02,640 --> 00:11:05,760
now here are some typical

203
00:11:05,760 --> 00:11:09,760
examples of jdbc attack

204
00:11:11,680 --> 00:11:15,120
the first typical example is a weblogic

205
00:11:15,120 --> 00:11:17,760
one vulnerability discovered by sri

206
00:11:17,760 --> 00:11:20,880
anxion in 2020

207
00:11:20,880 --> 00:11:25,160
the cv number is a cbe2022934

208
00:11:28,079 --> 00:11:31,600
because the jdbc configuration interface

209
00:11:31,600 --> 00:11:34,880
interface create create create a jdbc

210
00:11:34,880 --> 00:11:38,720
data source form of weblogic based

211
00:11:38,720 --> 00:11:40,480
system has no

212
00:11:40,480 --> 00:11:44,800
appropriate approach populator is a csrf

213
00:11:44,800 --> 00:11:47,360
token check

214
00:11:47,360 --> 00:11:49,519
therefore the attacker can easily launch

215
00:11:49,519 --> 00:11:53,440
a csi attack together with the

216
00:11:53,440 --> 00:11:54,800
jdbc

217
00:11:54,800 --> 00:11:57,680
and finally can achieve our impact of

218
00:11:57,680 --> 00:12:00,239
rce

219
00:12:06,160 --> 00:12:08,880
in the backstage of some application of

220
00:12:08,880 --> 00:12:11,519
also usually has a function of jdbc

221
00:12:11,519 --> 00:12:14,000
configuration such as some

222
00:12:14,000 --> 00:12:16,240
content manager system

223
00:12:16,240 --> 00:12:17,040
or

224
00:12:17,040 --> 00:12:20,320
backstage image system of various

225
00:12:20,320 --> 00:12:22,839
middleware

226
00:12:22,839 --> 00:12:26,240
likeness backstage of for

227
00:12:26,240 --> 00:12:29,040
wider fly the jbc connection can be

228
00:12:29,040 --> 00:12:30,720
reconfigured

229
00:12:30,720 --> 00:12:33,519
and because the driver for h2 is

230
00:12:33,519 --> 00:12:36,720
built-in you can achieve a rce using h2

231
00:12:36,720 --> 00:12:39,920
jdbc attack

232
00:12:42,959 --> 00:12:45,680
another example is when spring boot has

233
00:12:45,680 --> 00:12:50,000
a h2 control enabled we can use h2s cdbc

234
00:12:50,000 --> 00:12:54,560
connection to achieve rce attacks

235
00:12:57,600 --> 00:13:00,800
attacks on the h2 mentioned above all

236
00:13:00,800 --> 00:13:02,079
have also

237
00:13:02,079 --> 00:13:04,000
been disclosed

238
00:13:04,000 --> 00:13:05,279
h2s

239
00:13:05,279 --> 00:13:08,880
jdbc wire connections poster initial

240
00:13:08,880 --> 00:13:11,200
parameter to execution and

241
00:13:11,200 --> 00:13:12,000
in

242
00:13:12,000 --> 00:13:13,040
in the

243
00:13:13,040 --> 00:13:14,800
initialized in

244
00:13:14,800 --> 00:13:17,279
sql set segment

245
00:13:17,279 --> 00:13:18,639
in this case

246
00:13:18,639 --> 00:13:21,440
right create form can be used to import

247
00:13:21,440 --> 00:13:25,839
an external sql script

248
00:13:26,320 --> 00:13:28,480
and using the

249
00:13:28,480 --> 00:13:29,680
crea

250
00:13:29,680 --> 00:13:33,200
using a creator creator

251
00:13:33,200 --> 00:13:36,639
any areas function statement is an

252
00:13:36,639 --> 00:13:38,480
is a

253
00:13:38,480 --> 00:13:41,040
in an internal screen allow you to

254
00:13:41,040 --> 00:13:43,600
defend a function using a java source

255
00:13:43,600 --> 00:13:44,639
code

256
00:13:44,639 --> 00:13:45,600
and then

257
00:13:45,600 --> 00:13:48,800
we can invoke it immortal function using

258
00:13:48,800 --> 00:13:50,800
the core statement to trigger the

259
00:13:50,800 --> 00:13:55,719
execution of the java code

260
00:14:04,720 --> 00:14:07,760
regarding the exploiter for h2 driver it

261
00:14:07,760 --> 00:14:11,440
can be noted that it require a use of

262
00:14:11,440 --> 00:14:14,480
run screen flow statements

263
00:14:14,480 --> 00:14:16,720
which is a disadvantage to complete

264
00:14:16,720 --> 00:14:19,040
attack because the landscape long

265
00:14:19,040 --> 00:14:20,560
statement

266
00:14:20,560 --> 00:14:22,800
which

267
00:14:22,800 --> 00:14:25,920
uh neither senator connect to the

268
00:14:25,920 --> 00:14:28,720
attacker's http server

269
00:14:28,720 --> 00:14:30,240
this

270
00:14:30,240 --> 00:14:33,279
this is a subject for net network

271
00:14:33,279 --> 00:14:35,120
restrictions

272
00:14:35,120 --> 00:14:36,320
in fact

273
00:14:36,320 --> 00:14:39,600
since h2 is an embedded embedded

274
00:14:39,600 --> 00:14:42,000
database it's impossible to find an

275
00:14:42,000 --> 00:14:42,959
attack

276
00:14:42,959 --> 00:14:45,600
that doesn't require any

277
00:14:45,600 --> 00:14:48,560
external connections

278
00:14:48,560 --> 00:14:51,839
uh i i first found an attacker that take

279
00:14:51,839 --> 00:14:55,199
advantage of groovy st

280
00:14:55,199 --> 00:14:58,720
just from augmentation to lead to

281
00:14:58,720 --> 00:15:02,160
remote code execution

282
00:15:02,880 --> 00:15:06,029
[Applause]

283
00:15:06,639 --> 00:15:09,120
so first let's go back to where we

284
00:15:09,120 --> 00:15:10,399
started

285
00:15:10,399 --> 00:15:13,040
why we had to use the right script from

286
00:15:13,040 --> 00:15:14,800
statement

287
00:15:14,800 --> 00:15:17,839
even though the initial property provide

288
00:15:17,839 --> 00:15:20,000
a condition to skew

289
00:15:20,000 --> 00:15:24,079
execute any sql statement

290
00:15:24,079 --> 00:15:27,760
but after testing we found that you it

291
00:15:27,760 --> 00:15:31,040
wasn't possible to introduce

292
00:15:31,040 --> 00:15:35,360
multiple multiple sql statement

293
00:15:35,360 --> 00:15:38,560
and follow create any areas function

294
00:15:38,560 --> 00:15:41,680
statement additional cost element is

295
00:15:41,680 --> 00:15:43,600
necessary

296
00:15:43,600 --> 00:15:46,160
so it means it takes a

297
00:15:46,160 --> 00:15:49,040
muni of two statements to complete the

298
00:15:49,040 --> 00:15:51,040
attack

299
00:15:51,040 --> 00:15:53,279
the

300
00:15:53,440 --> 00:15:56,000
the last nine square from statement is

301
00:15:56,000 --> 00:15:59,040
used to introduce an external square

302
00:15:59,040 --> 00:16:00,079
tool is

303
00:16:00,079 --> 00:16:02,160
to is kill the amount multiple

304
00:16:02,160 --> 00:16:04,320
statements so

305
00:16:04,320 --> 00:16:07,519
if this can be reduced to a single sql

306
00:16:07,519 --> 00:16:10,880
set sentence to accomplish

307
00:16:10,880 --> 00:16:14,320
to remote color execution then there is

308
00:16:14,320 --> 00:16:17,890
no need to get an external connection

309
00:16:17,890 --> 00:16:20,160
[Music]

310
00:16:20,160 --> 00:16:22,959
so we went through the source code for

311
00:16:22,959 --> 00:16:27,279
the creator areas of statement

312
00:16:27,279 --> 00:16:30,079
and found then defend the java message

313
00:16:30,079 --> 00:16:33,680
source code in creator editors statement

314
00:16:33,680 --> 00:16:35,519
was all handy

315
00:16:35,519 --> 00:16:39,759
handy over to the source compare class

316
00:16:39,759 --> 00:16:42,000
there are three kinds of processing

317
00:16:42,000 --> 00:16:44,560
logic in the source compare

318
00:16:44,560 --> 00:16:48,079
for java javascript and groovy

319
00:16:48,079 --> 00:16:52,079
all of the all of which are compelled in

320
00:16:52,079 --> 00:16:56,079
order to finally executed the any earth

321
00:16:56,079 --> 00:16:58,479
function

322
00:17:00,480 --> 00:17:03,680
and the groove is present as cash our

323
00:17:03,680 --> 00:17:05,599
eye

324
00:17:05,599 --> 00:17:06,559
and

325
00:17:06,559 --> 00:17:09,199
we immediately realized lair along with

326
00:17:09,199 --> 00:17:12,240
hakim jenkins part 2 shared by orangey

327
00:17:12,240 --> 00:17:14,160
in 2019

328
00:17:14,160 --> 00:17:18,160
is the same scenarios sunrise scenario

329
00:17:18,160 --> 00:17:20,640
and can be

330
00:17:20,640 --> 00:17:22,000
attacked with

331
00:17:22,000 --> 00:17:24,400
meta programming

332
00:17:24,400 --> 00:17:29,039
as other original using the st tester

333
00:17:29,039 --> 00:17:30,559
annotation

334
00:17:30,559 --> 00:17:34,559
well layla developer is probably is pro

335
00:17:34,559 --> 00:17:38,320
st dualing complete computation compare

336
00:17:38,320 --> 00:17:40,400
attention and perform

337
00:17:40,400 --> 00:17:44,080
a session on the st

338
00:17:44,559 --> 00:17:47,679
as the poc show we can exchange our code

339
00:17:47,679 --> 00:17:48,559
in

340
00:17:48,559 --> 00:17:52,000
in a session the broadcast can trigger a

341
00:17:52,000 --> 00:17:55,400
java code

342
00:18:00,160 --> 00:18:01,440
however

343
00:18:01,440 --> 00:18:04,240
in the real world groovy's dependency

344
00:18:04,240 --> 00:18:07,760
are no viewer into h2 so this attack

345
00:18:07,760 --> 00:18:10,240
depends on whether groovy

346
00:18:10,240 --> 00:18:12,960
companions are including into are

347
00:18:12,960 --> 00:18:15,919
included into the application

348
00:18:15,919 --> 00:18:19,120
this was obviou or it was obviously not

349
00:18:19,120 --> 00:18:20,480
very

350
00:18:20,480 --> 00:18:23,039
generic

351
00:18:24,720 --> 00:18:27,600
so we continue to look for another

352
00:18:27,600 --> 00:18:30,320
attack searching in

353
00:18:30,320 --> 00:18:32,400
searching of the source code we quickly

354
00:18:32,400 --> 00:18:35,280
discover that in addition to the creator

355
00:18:35,280 --> 00:18:37,679
areas statement there is another

356
00:18:37,679 --> 00:18:40,160
statement that they can introduce

357
00:18:40,160 --> 00:18:41,760
user defined the

358
00:18:41,760 --> 00:18:44,240
source code

359
00:18:44,240 --> 00:18:46,799
and in the you know phrasing of the

360
00:18:46,799 --> 00:18:50,400
create trigger statement

361
00:18:50,640 --> 00:18:54,480
we can call lord from source method of

362
00:18:54,480 --> 00:18:58,640
the trigger object class also as shown

363
00:18:58,640 --> 00:19:01,760
we pro we presently surprised to find

364
00:19:01,760 --> 00:19:04,000
that in this method the javascript

365
00:19:04,000 --> 00:19:09,120
source code is only the compiled also

366
00:19:09,120 --> 00:19:12,000
it kills

367
00:19:12,000 --> 00:19:13,360
and kills the

368
00:19:13,360 --> 00:19:15,840
other source correction

369
00:19:15,840 --> 00:19:18,320
he caused

370
00:19:18,320 --> 00:19:20,960
evil messed up directly

371
00:19:20,960 --> 00:19:21,919
and

372
00:19:21,919 --> 00:19:24,559
since screen engine was finally used for

373
00:19:24,559 --> 00:19:27,679
execution and there was no sandbox we

374
00:19:27,679 --> 00:19:30,559
could introduce any java class we wanted

375
00:19:30,559 --> 00:19:33,918
in javascript

376
00:19:35,200 --> 00:19:37,840
so with this we can easily achieve the

377
00:19:37,840 --> 00:19:42,160
purpose of rce without a neo for call or

378
00:19:42,160 --> 00:19:45,120
other statements

379
00:19:45,120 --> 00:19:47,840
as the poc shows javascript

380
00:19:47,840 --> 00:19:50,720
the star with javascript commands and we

381
00:19:50,720 --> 00:19:51,520
can

382
00:19:51,520 --> 00:19:53,679
simply use the runtime

383
00:19:53,679 --> 00:19:58,679
exact method to achieve rce

384
00:20:06,880 --> 00:20:07,840
next

385
00:20:07,840 --> 00:20:10,640
let's see what other database can be

386
00:20:10,640 --> 00:20:11,840
attached

387
00:20:11,840 --> 00:20:17,199
besides h2 and mysql database

388
00:20:19,200 --> 00:20:24,480
first let's look at ibm's db2 database

389
00:20:24,480 --> 00:20:28,000
following the previous is experience of

390
00:20:28,000 --> 00:20:31,679
attacking my sql driver

391
00:20:31,679 --> 00:20:34,799
we found a hint about about

392
00:20:34,799 --> 00:20:37,200
vulnerabilities are likely to appear in

393
00:20:37,200 --> 00:20:40,960
properties such as auto serializer used

394
00:20:40,960 --> 00:20:44,159
in mysql

395
00:20:44,159 --> 00:20:47,440
so we look through the document of db2

396
00:20:47,440 --> 00:20:49,679
jdbc driver to search

397
00:20:49,679 --> 00:20:53,600
suspicious properties

398
00:20:54,640 --> 00:20:57,280
i noticed a property called a cylinder

399
00:20:57,280 --> 00:21:01,280
reducer server list gender name

400
00:21:01,280 --> 00:21:03,760
of discrete in a documentary this

401
00:21:03,760 --> 00:21:06,880
program supports a senator to provide

402
00:21:06,880 --> 00:21:09,760
additional server location after the

403
00:21:09,760 --> 00:21:12,559
trail in the first connection it can

404
00:21:12,559 --> 00:21:15,280
connect it can connect to the standard

405
00:21:15,280 --> 00:21:17,200
standard by server

406
00:21:17,200 --> 00:21:21,120
and the standard by server information

407
00:21:21,120 --> 00:21:26,559
is a look at look up through the ndi

408
00:21:28,480 --> 00:21:31,039
so it's easy to imagine that if we

409
00:21:31,039 --> 00:21:34,159
provide a many short standing address

410
00:21:34,159 --> 00:21:36,799
and control a cylinder to fail the first

411
00:21:36,799 --> 00:21:38,480
connection

412
00:21:38,480 --> 00:21:42,559
the center will do up the specific many

413
00:21:42,559 --> 00:21:46,799
many many shots the ndi address

414
00:21:47,360 --> 00:21:49,440
and this is a

415
00:21:49,440 --> 00:21:54,440
notorious gender injection vulnerability

416
00:21:58,559 --> 00:22:00,640
it can also be found in the driver's

417
00:22:00,640 --> 00:22:03,440
decompared code delay the

418
00:22:03,440 --> 00:22:06,559
contacts rule measure is valid code for

419
00:22:06,559 --> 00:22:09,039
query

420
00:22:09,200 --> 00:22:12,240
referring to the use of gender injection

421
00:22:12,240 --> 00:22:16,000
vulnerabilities the attacker can say

422
00:22:16,000 --> 00:22:19,360
many shots at our dip service

423
00:22:19,360 --> 00:22:20,720
when

424
00:22:20,720 --> 00:22:23,440
when the cylinder connects to ldlp

425
00:22:23,440 --> 00:22:26,559
service for curry he can easily complete

426
00:22:26,559 --> 00:22:29,360
the rc attack using

427
00:22:29,360 --> 00:22:32,320
max cylinder to load remote codebase or

428
00:22:32,320 --> 00:22:36,640
other gender injection attack measure

429
00:22:36,640 --> 00:22:40,400
gender injection attacks are not a focus

430
00:22:40,400 --> 00:22:42,880
of this discard discussion

431
00:22:42,880 --> 00:22:45,039
uh

432
00:22:45,039 --> 00:22:47,679
the various viruses poise have been

433
00:22:47,679 --> 00:22:52,840
disclosed and variable online

434
00:23:02,960 --> 00:23:04,720
and

435
00:23:04,720 --> 00:23:06,840
our next target is a

436
00:23:06,840 --> 00:23:10,039
motorcycle monostrep is an open source

437
00:23:10,039 --> 00:23:14,400
implementation of the jcr specification

438
00:23:14,400 --> 00:23:17,440
and standard api

439
00:23:19,679 --> 00:23:22,720
the phone name of cci is a contender

440
00:23:22,720 --> 00:23:27,120
repository api for java

441
00:23:28,480 --> 00:23:31,840
is a specification for java

442
00:23:31,840 --> 00:23:34,799
platform application program interface

443
00:23:34,799 --> 00:23:36,320
to

444
00:23:36,320 --> 00:23:39,440
to assess the contented responsibility

445
00:23:39,440 --> 00:23:41,440
responsibilities in

446
00:23:41,440 --> 00:23:45,200
in a uniform manner

447
00:23:45,919 --> 00:23:49,600
using the jcr api you can get data from

448
00:23:49,600 --> 00:23:52,880
a variety of different systems including

449
00:23:52,880 --> 00:23:56,720
file systems relational database and so

450
00:23:56,720 --> 00:23:59,720
on

451
00:24:04,960 --> 00:24:08,480
a standard ac dcr connection for model

452
00:24:08,480 --> 00:24:09,600
shifts

453
00:24:09,600 --> 00:24:11,600
is in the

454
00:24:11,600 --> 00:24:14,880
format is information above

455
00:24:14,880 --> 00:24:17,520
which require responsibility name to

456
00:24:17,520 --> 00:24:20,640
make a connection to specific ripple

457
00:24:20,640 --> 00:24:22,000
in this way

458
00:24:22,000 --> 00:24:22,960
then

459
00:24:22,960 --> 00:24:26,400
the ndis gene in connection url gets our

460
00:24:26,400 --> 00:24:28,880
attention

461
00:24:29,279 --> 00:24:30,840
and we

462
00:24:30,840 --> 00:24:33,760
reasonably extremely in addition to

463
00:24:33,760 --> 00:24:37,360
supporting the jcr political other plato

464
00:24:37,360 --> 00:24:41,678
such as ldap ldip

465
00:24:41,760 --> 00:24:44,400
should also be supported

466
00:24:44,400 --> 00:24:47,520
and after trying eternally you can

467
00:24:47,520 --> 00:24:49,360
indeed in interact

468
00:24:49,360 --> 00:24:53,520
you need a jndi ui request to a specific

469
00:24:53,520 --> 00:24:56,159
ldip server

470
00:24:56,159 --> 00:24:59,760
so this is another typical ndi injection

471
00:24:59,760 --> 00:25:02,760
vulnerabilities

472
00:25:12,320 --> 00:25:15,360
continue our research we decided to try

473
00:25:15,360 --> 00:25:17,520
an attack on

474
00:25:17,520 --> 00:25:21,200
a patch derby because it can be used as

475
00:25:21,200 --> 00:25:23,679
an invented database just like h2

476
00:25:23,679 --> 00:25:26,000
database

477
00:25:26,000 --> 00:25:28,559
with embedded database it's usually

478
00:25:28,559 --> 00:25:32,320
easier to implant a text because the

479
00:25:32,320 --> 00:25:35,200
server and scientist can exceed in the

480
00:25:35,200 --> 00:25:38,080
same program

481
00:25:38,799 --> 00:25:40,320
we found a

482
00:25:40,320 --> 00:25:43,440
special code fragmenter when we

483
00:25:43,440 --> 00:25:46,400
we were looking for sensitive calls in

484
00:25:46,400 --> 00:25:49,600
the v driver code

485
00:25:50,000 --> 00:25:54,000
in the circuit connection class

486
00:25:55,039 --> 00:25:58,159
he called the reader jms directory in

487
00:25:58,159 --> 00:26:02,000
the rhythm messaging method

488
00:26:05,200 --> 00:26:07,520
this method is used in

489
00:26:07,520 --> 00:26:08,640
the

490
00:26:08,640 --> 00:26:11,200
real of geometry is used in java to

491
00:26:11,200 --> 00:26:12,559
design this

492
00:26:12,559 --> 00:26:15,840
this series input stream this called

493
00:26:15,840 --> 00:26:18,960
fragment of you obviously may have a

494
00:26:18,960 --> 00:26:23,120
desired literature probabilities

495
00:26:23,120 --> 00:26:25,679
in fact from a security code point of

496
00:26:25,679 --> 00:26:28,400
view this list of sorted connection

497
00:26:28,400 --> 00:26:32,000
class is suspicious

498
00:26:32,880 --> 00:26:36,400
you can see flow is a constructor method

499
00:26:36,400 --> 00:26:39,679
he was a socket and wrapped the socket

500
00:26:39,679 --> 00:26:42,799
after stream and input stream into

501
00:26:42,799 --> 00:26:45,440
object output stream and object input

502
00:26:45,440 --> 00:26:47,760
stream

503
00:26:48,559 --> 00:26:51,760
the reader message image seems to

504
00:26:51,760 --> 00:26:54,400
raise and

505
00:26:54,720 --> 00:26:55,919
reach a

506
00:26:55,919 --> 00:26:56,960
pleasure

507
00:26:56,960 --> 00:27:00,080
pleasures at a circuit infrastream if we

508
00:27:00,080 --> 00:27:03,200
can communicate with the weapon software

509
00:27:03,200 --> 00:27:06,159
we will probably be able to trigger the

510
00:27:06,159 --> 00:27:09,120
deterioration vulnerabilities

511
00:27:09,120 --> 00:27:12,799
so we go back invocation chain and see

512
00:27:12,799 --> 00:27:17,799
whether to call a reader message method

513
00:27:20,880 --> 00:27:24,000
we found the layla cora is a

514
00:27:24,000 --> 00:27:26,640
is the inner class

515
00:27:26,640 --> 00:27:29,200
master is receiver three

516
00:27:29,200 --> 00:27:31,760
three the for all for replication

517
00:27:31,760 --> 00:27:35,840
message transmit class

518
00:27:42,799 --> 00:27:45,840
as you can guess from the class name and

519
00:27:45,840 --> 00:27:47,360
package name

520
00:27:47,360 --> 00:27:50,799
this code of snap is related to dobby's

521
00:27:50,799 --> 00:27:53,919
ability to replicate

522
00:27:53,919 --> 00:27:56,000
duplicate database

523
00:27:56,000 --> 00:27:58,880
so i went through adobe documentation

524
00:27:58,880 --> 00:28:00,480
session on

525
00:28:00,480 --> 00:28:03,039
replicating a database

526
00:28:03,039 --> 00:28:04,559
and then that

527
00:28:04,559 --> 00:28:07,840
database replication can be initiated

528
00:28:07,840 --> 00:28:11,039
using connection properties

529
00:28:11,039 --> 00:28:13,919
this is exactly what we want because the

530
00:28:13,919 --> 00:28:15,520
connection property

531
00:28:15,520 --> 00:28:18,879
is controllable

532
00:28:22,240 --> 00:28:26,320
in fact if we go if we go all the way

533
00:28:26,320 --> 00:28:30,320
out the question you can see that where

534
00:28:30,320 --> 00:28:32,559
whether this reader is started that

535
00:28:32,559 --> 00:28:34,559
depends on the

536
00:28:34,559 --> 00:28:38,880
star master properties is enabled

537
00:28:38,880 --> 00:28:40,559
as the code show

538
00:28:40,559 --> 00:28:44,159
is a it's a star replication master boot

539
00:28:44,159 --> 00:28:46,640
method used for judgment

540
00:28:46,640 --> 00:28:49,360
and in the code we can finally we can

541
00:28:49,360 --> 00:28:52,320
specify which host the software connect

542
00:28:52,320 --> 00:28:54,880
tool by controlling the

543
00:28:54,880 --> 00:28:57,200
slave host property

544
00:28:57,200 --> 00:29:00,159
so we can set the star master property

545
00:29:00,159 --> 00:29:01,279
to true

546
00:29:01,279 --> 00:29:02,159
and

547
00:29:02,159 --> 00:29:04,799
select host property to the address of

548
00:29:04,799 --> 00:29:08,399
the manager's server

549
00:29:08,720 --> 00:29:11,039
then we will try to connect to the

550
00:29:11,039 --> 00:29:13,919
manager snap server and

551
00:29:13,919 --> 00:29:16,640
communicate

552
00:29:18,720 --> 00:29:20,240
at this point

553
00:29:20,240 --> 00:29:25,360
we return our manishas crs data will be

554
00:29:25,360 --> 00:29:27,760
will be this theorize the

555
00:29:27,760 --> 00:29:28,799
next

556
00:29:28,799 --> 00:29:31,360
achieving the effect of remote code

557
00:29:31,360 --> 00:29:32,030
execution

558
00:29:32,030 --> 00:29:35,069
[Music]

559
00:29:35,440 --> 00:29:38,240
so the managers connection demo as shown

560
00:29:38,240 --> 00:29:41,480
in the code

561
00:29:42,880 --> 00:29:46,080
another malicious slave server code is

562
00:29:46,080 --> 00:29:49,039
as follows it's very simple the

563
00:29:49,039 --> 00:29:51,760
many shots draft server can return crs

564
00:29:51,760 --> 00:29:54,320
data directly after the connection is

565
00:29:54,320 --> 00:29:56,879
received

566
00:30:03,630 --> 00:30:05,679
[Music]

567
00:30:05,679 --> 00:30:09,760
so let's let's move on looking at sqlite

568
00:30:09,760 --> 00:30:12,640
which is also an inventing database

569
00:30:12,640 --> 00:30:15,200
we trace the code for its connection and

570
00:30:15,200 --> 00:30:17,679
find that when the jdbc wireless is

571
00:30:17,679 --> 00:30:19,919
controllable

572
00:30:19,919 --> 00:30:23,279
we can define its resource name in the

573
00:30:23,279 --> 00:30:26,960
open method as show code

574
00:30:27,600 --> 00:30:28,799
and we

575
00:30:28,799 --> 00:30:31,279
following following into the check

576
00:30:31,279 --> 00:30:34,799
resource method we can see that the url

577
00:30:34,799 --> 00:30:37,279
can contracted by resource name called

578
00:30:37,279 --> 00:30:40,480
open stream messer

579
00:30:40,559 --> 00:30:41,279
so

580
00:30:41,279 --> 00:30:44,960
this can be used to completely add a ssi

581
00:30:44,960 --> 00:30:47,039
attack such as

582
00:30:47,039 --> 00:30:51,840
define the jdbc url which will show

583
00:30:52,960 --> 00:30:56,399
and using the jdbc io can send an http

584
00:30:56,399 --> 00:31:00,080
request to species 3 ipm

585
00:31:00,080 --> 00:31:01,600
however

586
00:31:01,600 --> 00:31:06,240
ssi program bits are not enough

587
00:31:10,559 --> 00:31:12,480
using sqlx

588
00:31:12,480 --> 00:31:14,240
resources

589
00:31:14,240 --> 00:31:16,720
practical we can connect to the

590
00:31:16,720 --> 00:31:19,440
specified ip to download specific

591
00:31:19,440 --> 00:31:21,679
database files

592
00:31:21,679 --> 00:31:22,399
so

593
00:31:22,399 --> 00:31:24,960
if the jdbc url is under our control we

594
00:31:24,960 --> 00:31:27,279
can control the database files the

595
00:31:27,279 --> 00:31:29,600
silent open

596
00:31:29,600 --> 00:31:30,840
based on

597
00:31:30,840 --> 00:31:34,959
it how should we attack

598
00:31:40,720 --> 00:31:43,279
refer to 2019

599
00:31:43,279 --> 00:31:47,840
33 c3 topic select code execution from

600
00:31:47,840 --> 00:31:49,519
start using

601
00:31:49,519 --> 00:31:51,039
sqlite

602
00:31:51,039 --> 00:31:54,159
we can consider a

603
00:31:54,159 --> 00:31:56,960
scenario that there are controllable

604
00:31:56,960 --> 00:31:59,519
database url and

605
00:31:59,519 --> 00:32:03,440
uncontrollable slack statement

606
00:32:05,360 --> 00:32:09,360
a brief code is shown in the finger

607
00:32:09,360 --> 00:32:12,720
the uio is controllable but the sql

608
00:32:12,720 --> 00:32:14,799
statement elemental executed are

609
00:32:14,799 --> 00:32:17,360
non-controllable

610
00:32:17,360 --> 00:32:19,519
in a controllable database file there

611
00:32:19,519 --> 00:32:20,799
are

612
00:32:20,799 --> 00:32:23,600
the data defension language statement

613
00:32:23,600 --> 00:32:27,039
used to create a table or create a view

614
00:32:27,039 --> 00:32:29,919
this this data defension language

615
00:32:29,919 --> 00:32:32,640
statement actually appear in

616
00:32:32,640 --> 00:32:34,320
print text

617
00:32:34,320 --> 00:32:36,159
in database file

618
00:32:36,159 --> 00:32:38,799
so if we

619
00:32:38,799 --> 00:32:41,679
if we inspect that

620
00:32:41,679 --> 00:32:44,480
uncontrollable settlement is a snacks

621
00:32:44,480 --> 00:32:47,440
staff long security table

622
00:32:47,440 --> 00:32:50,960
we can create a view named security to

623
00:32:50,960 --> 00:32:54,480
hedge accuracy elemental to skew a sub

624
00:32:54,480 --> 00:32:58,640
query defined in quicker view ddl

625
00:32:58,640 --> 00:33:02,159
in this way we can transform the sql

626
00:33:02,159 --> 00:33:05,279
statement that we can we can control

627
00:33:05,279 --> 00:33:08,240
into the query statement that we can

628
00:33:08,240 --> 00:33:11,240
control

629
00:33:16,159 --> 00:33:19,519
now let's move on the next step

630
00:33:19,519 --> 00:33:23,440
if we have a controlled connection we

631
00:33:23,440 --> 00:33:27,279
can open a lot extension option on

632
00:33:27,279 --> 00:33:29,039
sqlite

633
00:33:29,039 --> 00:33:29,840
so

634
00:33:29,840 --> 00:33:32,640
if we have a controlled file

635
00:33:32,640 --> 00:33:37,120
we can rce by loading this extension

636
00:33:37,120 --> 00:33:40,320
in fact extension is a dynamic link

637
00:33:40,320 --> 00:33:44,080
library or shared object

638
00:33:44,320 --> 00:33:47,519
so in stack of statement a lot extension

639
00:33:47,519 --> 00:33:51,120
function can not a dll

640
00:33:51,120 --> 00:33:54,559
or so and it's it you could say

641
00:33:54,559 --> 00:33:59,039
sqli3 extension in need function

642
00:33:59,440 --> 00:34:04,399
we can simply put a evo code in sqlite 3

643
00:34:04,399 --> 00:34:06,559
attention in data function

644
00:34:06,559 --> 00:34:10,960
and trigger evil code execution

645
00:34:14,879 --> 00:34:18,639
getting a major file is not always easy

646
00:34:18,639 --> 00:34:20,879
since the sqlite

647
00:34:20,879 --> 00:34:22,639
often both

648
00:34:22,639 --> 00:34:24,320
memory

649
00:34:24,320 --> 00:34:26,719
corruptions vulnerabilities

650
00:34:26,719 --> 00:34:30,159
we can explore these memory combustion

651
00:34:30,159 --> 00:34:32,159
to attack

652
00:34:32,159 --> 00:34:35,280
a show in the code of baffle we can use

653
00:34:35,280 --> 00:34:36,480
mega and

654
00:34:36,480 --> 00:34:40,320
poc to create a local sqlite database

655
00:34:40,320 --> 00:34:42,159
file

656
00:34:42,159 --> 00:34:46,399
with many shows security view

657
00:34:46,480 --> 00:34:49,359
many guns is a number of vulnerabilities

658
00:34:49,359 --> 00:34:52,719
an xd in sqlite caused by memory called

659
00:34:52,719 --> 00:34:54,800
russians

660
00:34:54,800 --> 00:34:58,160
then special jdbc connection to download

661
00:34:58,160 --> 00:35:01,440
our database file and open it when the

662
00:35:01,440 --> 00:35:03,280
code runs to

663
00:35:03,280 --> 00:35:07,119
query for security table the mega lens

664
00:35:07,119 --> 00:35:10,720
poc is triggered to cause the jvm to

665
00:35:10,720 --> 00:35:13,720
crash

666
00:35:22,400 --> 00:35:25,200
finally let's take a look at how open

667
00:35:25,200 --> 00:35:28,320
source software defends against jdbc

668
00:35:28,320 --> 00:35:31,320
attacks

669
00:35:31,520 --> 00:35:34,880
obviously in the previous attack measure

670
00:35:34,880 --> 00:35:36,880
we can find that

671
00:35:36,880 --> 00:35:38,960
vulnerability usually appear in some

672
00:35:38,960 --> 00:35:43,040
dangerous therapy wire l properties

673
00:35:43,040 --> 00:35:46,160
so some open source software attacks now

674
00:35:46,160 --> 00:35:50,000
method of fitting sensitive attribute to

675
00:35:50,000 --> 00:35:51,200
fix such

676
00:35:51,200 --> 00:35:54,078
vulnerabilities

677
00:35:54,960 --> 00:35:57,200
both

678
00:35:57,599 --> 00:36:00,079
derby and apache dolphin scheduler have

679
00:36:00,079 --> 00:36:01,839
been exposed to

680
00:36:01,839 --> 00:36:05,599
mysql jdbc digitalization or abilities

681
00:36:05,599 --> 00:36:07,839
in the past

682
00:36:07,839 --> 00:36:08,640
so

683
00:36:08,640 --> 00:36:11,440
they are there are two open source of

684
00:36:11,440 --> 00:36:13,359
where we started

685
00:36:13,359 --> 00:36:15,359
the three number four two

686
00:36:15,359 --> 00:36:18,560
vulnerabilities are three twenty twenty

687
00:36:18,560 --> 00:36:19,359
one

688
00:36:19,359 --> 00:36:23,440
two two six nine one nine and cve twenty

689
00:36:23,440 --> 00:36:27,839
twenty one one nine seven four

690
00:36:32,079 --> 00:36:33,839
the

691
00:36:33,839 --> 00:36:37,359
a patch of hashtabby defends a white

692
00:36:37,359 --> 00:36:38,839
list of

693
00:36:38,839 --> 00:36:42,160
properties properties known in the white

694
00:36:42,160 --> 00:36:45,520
list are not allowed

695
00:36:46,560 --> 00:36:48,000
and

696
00:36:48,000 --> 00:36:50,240
apache dolphin scheduler removes

697
00:36:50,240 --> 00:36:55,240
scientific properties from arguments

698
00:36:59,359 --> 00:37:02,720
so we want to know that is there a new

699
00:37:02,720 --> 00:37:08,079
israeli way to bypass property filter

700
00:37:08,079 --> 00:37:10,160
we chose a

701
00:37:10,160 --> 00:37:12,880
apache w which used the

702
00:37:12,880 --> 00:37:15,200
514f

703
00:37:15,200 --> 00:37:20,919
my sql connector version as our target

704
00:37:25,520 --> 00:37:27,599
for this fix the

705
00:37:27,599 --> 00:37:30,800
the first idea is to see if the filter

706
00:37:30,800 --> 00:37:32,880
parameters messer is

707
00:37:32,880 --> 00:37:35,280
consistent with the jdbc connection

708
00:37:35,280 --> 00:37:38,160
processing parameter measure

709
00:37:38,160 --> 00:37:40,880
you can see in adobe's source called

710
00:37:40,880 --> 00:37:42,560
layla filter use

711
00:37:42,560 --> 00:37:44,000
the

712
00:37:44,000 --> 00:37:46,720
mysql connector default pressure url

713
00:37:46,720 --> 00:37:47,920
mixer

714
00:37:47,920 --> 00:37:52,400
so by default they are consistent

715
00:37:54,640 --> 00:37:57,760
therefore we jump out of the of this idr

716
00:37:57,760 --> 00:38:00,320
and take a look at the overall jdbc

717
00:38:00,320 --> 00:38:04,359
driver loading logic

718
00:38:06,560 --> 00:38:08,880
for the

719
00:38:11,599 --> 00:38:13,280
for the

720
00:38:13,280 --> 00:38:16,720
loading of jdbc driver they use the spi

721
00:38:16,720 --> 00:38:18,240
technology

722
00:38:18,240 --> 00:38:21,359
spi the phone name of spi is the java

723
00:38:21,359 --> 00:38:23,520
service provider interface

724
00:38:23,520 --> 00:38:24,400
for

725
00:38:24,400 --> 00:38:28,560
jdbc all register driver are stored in

726
00:38:28,560 --> 00:38:29,359
the

727
00:38:29,359 --> 00:38:33,359
java sql driver fire

728
00:38:33,359 --> 00:38:34,920
in

729
00:38:34,920 --> 00:38:39,040
5140s version of my sql connector there

730
00:38:39,040 --> 00:38:42,400
are two register driver one is the most

731
00:38:42,400 --> 00:38:44,880
common jdbc driver

732
00:38:44,880 --> 00:38:49,920
the other is fabric my sql driver

733
00:38:56,480 --> 00:38:57,359
and

734
00:38:57,359 --> 00:39:00,480
this fabric my sql driver has catch our

735
00:39:00,480 --> 00:39:01,599
attention

736
00:39:01,599 --> 00:39:04,560
refer to mysql driver documentation you

737
00:39:04,560 --> 00:39:07,520
can see that fabric my sql driver is

738
00:39:07,520 --> 00:39:09,520
used to connect to

739
00:39:09,520 --> 00:39:12,560
my sql fabric system

740
00:39:12,560 --> 00:39:16,000
my sql fabric is a system for management

741
00:39:16,000 --> 00:39:20,640
farm floor of my sql servers

742
00:39:23,359 --> 00:39:26,079
then we study researching in the soft

743
00:39:26,079 --> 00:39:27,520
code of

744
00:39:27,520 --> 00:39:30,400
fabric my sql driver

745
00:39:30,400 --> 00:39:33,359
if you pass in a url let's start with

746
00:39:33,359 --> 00:39:36,160
the format of the quotient it goes into

747
00:39:36,160 --> 00:39:38,400
the fabric driver's processing

748
00:39:38,400 --> 00:39:41,400
logic

749
00:39:46,000 --> 00:39:47,920
you can see that in the

750
00:39:47,920 --> 00:39:50,880
in the code of the connection url is

751
00:39:50,880 --> 00:39:53,599
controlled by

752
00:39:53,599 --> 00:39:58,000
conquered by the fabric protocol hoster

753
00:39:58,000 --> 00:39:59,599
and port of

754
00:39:59,599 --> 00:40:00,090
payment

755
00:40:00,090 --> 00:40:02,480
[Music]

756
00:40:02,480 --> 00:40:04,240
payment

757
00:40:04,240 --> 00:40:07,760
transfer fabric protocol payment we can

758
00:40:07,760 --> 00:40:12,960
finally is default to http protocol

759
00:40:13,359 --> 00:40:16,480
intel a fabric connection method

760
00:40:16,480 --> 00:40:20,400
in this case you can see that user large

761
00:40:20,400 --> 00:40:24,839
xml rpc standard

762
00:40:27,599 --> 00:40:30,480
continue to follow up we found that

763
00:40:30,480 --> 00:40:32,720
it finally makes an

764
00:40:32,720 --> 00:40:36,319
html rpc called in the aerosafe call

765
00:40:36,319 --> 00:40:37,440
master

766
00:40:37,440 --> 00:40:39,680
we can specify

767
00:40:39,680 --> 00:40:44,640
specific hostel and part of this code

768
00:40:45,760 --> 00:40:46,560
so

769
00:40:46,560 --> 00:40:50,000
it looks like we have got an ssi

770
00:40:50,000 --> 00:40:51,839
vulnerability

771
00:40:51,839 --> 00:40:53,200
it's not enough

772
00:40:53,200 --> 00:40:56,640
similar to my sql deterioration

773
00:40:56,640 --> 00:41:00,560
vulnerability we want to see if the

774
00:41:00,560 --> 00:41:02,079
fabric of my

775
00:41:02,079 --> 00:41:04,800
sql driver had made any errors in

776
00:41:04,800 --> 00:41:08,800
processing the returned data

777
00:41:12,560 --> 00:41:16,000
it is clearly visible in the code that

778
00:41:16,000 --> 00:41:19,200
you use the new sax pressure method

779
00:41:19,200 --> 00:41:20,560
masterful

780
00:41:20,560 --> 00:41:24,800
of the xx pressure factory class

781
00:41:24,800 --> 00:41:27,520
and it directly to get a

782
00:41:27,520 --> 00:41:30,079
ss pressure

783
00:41:30,079 --> 00:41:33,119
and the sx pressure battery doesn't send

784
00:41:33,119 --> 00:41:34,640
any security or

785
00:41:34,640 --> 00:41:36,240
attributes

786
00:41:36,240 --> 00:41:38,079
so it's a an

787
00:41:38,079 --> 00:41:40,000
obvious

788
00:41:40,000 --> 00:41:44,160
xml vulnerability xml is internal in

789
00:41:44,160 --> 00:41:46,319
tiny vulnerabilities

790
00:41:46,319 --> 00:41:49,520
which can finally can cause optic fire

791
00:41:49,520 --> 00:41:53,200
reading or ssis

792
00:41:56,800 --> 00:42:00,160
so the idea of attack is very clear we

793
00:42:00,160 --> 00:42:01,920
first can try a

794
00:42:01,920 --> 00:42:05,200
specific jdbc wire to interlock

795
00:42:05,200 --> 00:42:09,119
processing logic of fabric driver

796
00:42:09,119 --> 00:42:12,480
and then we set the host and port in the

797
00:42:12,480 --> 00:42:15,760
jdbc url to our

798
00:42:15,760 --> 00:42:18,720
http server

799
00:42:19,040 --> 00:42:21,599
when the senator makes a connection you

800
00:42:21,599 --> 00:42:25,839
will send an xml rpc request to our

801
00:42:25,839 --> 00:42:26,960
server

802
00:42:26,960 --> 00:42:28,960
we control the senator to return our

803
00:42:28,960 --> 00:42:32,160
many shots xml document

804
00:42:32,160 --> 00:42:37,119
then xxe or vrts will be triggered when

805
00:42:37,119 --> 00:42:42,560
the senator process this xml document

806
00:42:42,640 --> 00:42:45,280
we can read the corresponding

807
00:42:45,280 --> 00:42:48,480
files from the center by using the out

808
00:42:48,480 --> 00:42:52,000
of standard xml external entity attack

809
00:42:52,000 --> 00:42:55,000
technology

810
00:43:02,319 --> 00:43:05,119
so the connection code of the cylinder

811
00:43:05,119 --> 00:43:07,359
is shown in the finger we can trigger

812
00:43:07,359 --> 00:43:10,480
the x-axis vulnerability without any

813
00:43:10,480 --> 00:43:13,839
attribute appearance

814
00:43:18,240 --> 00:43:21,280
when the manager manages tv sub service

815
00:43:21,280 --> 00:43:23,839
call is shown in this finger

816
00:43:23,839 --> 00:43:27,280
contractor many sure time xml document

817
00:43:27,280 --> 00:43:30,000
is easy

818
00:43:33,920 --> 00:43:37,280
so let's our research on jdbc attacks is

819
00:43:37,280 --> 00:43:40,400
very dangerous to lay on attacker to

820
00:43:40,400 --> 00:43:44,160
control jdbc urls

821
00:43:44,160 --> 00:43:46,720
we recommend that if you certainly use

822
00:43:46,720 --> 00:43:50,079
the defined ear use you must straightly

823
00:43:50,079 --> 00:43:53,520
restrict the contents of jdbc files

824
00:43:53,520 --> 00:43:54,640
including

825
00:43:54,640 --> 00:43:57,680
the properties protocol

826
00:43:57,680 --> 00:44:00,079
and so on

827
00:44:00,079 --> 00:44:03,960
so thank you very much

