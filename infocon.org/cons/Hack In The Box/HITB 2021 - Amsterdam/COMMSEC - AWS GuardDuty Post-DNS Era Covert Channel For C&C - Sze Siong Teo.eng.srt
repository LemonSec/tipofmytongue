1
00:00:14,880 --> 00:00:20,880
hi thanks for joining this presentation i'm 
tio today i'm going to talk about covert  

2
00:00:20,880 --> 00:00:25,599
channels for cnc and data x filtration 
techniques to evade gut duty detection  

3
00:00:26,800 --> 00:00:31,600
before i start i would like to mention that 
the contents expressed in this presentation  

4
00:00:31,600 --> 00:00:36,320
are solely my own and do not express 
the views or opinions of my employer  

5
00:00:38,240 --> 00:00:44,640
so who am i i have presented at hack in the box 16 
years ago and i'm glad to be back again this year  

6
00:00:45,760 --> 00:00:49,120
i spend most of my working 
years as a software developer  

7
00:00:49,120 --> 00:00:52,640
then move into sysm in devops 
kind of role and eventually  

8
00:00:52,640 --> 00:00:57,840
transition into an infosec guy if you want 
to reach out to me this is my linkedin id

9
00:01:02,720 --> 00:01:05,280
here's the list of items i'm 
going to talk about today  

10
00:01:06,240 --> 00:01:12,560
we will start with an overview of dns tunneling 
network ideas host based ideas and same  

11
00:01:13,680 --> 00:01:19,520
then we will explore and improve covert channel 
technique that makes use of popular cloud services  

12
00:01:20,880 --> 00:01:26,479
after that we'll take a look at how amazon 
guard duty works compared to ids and sim  

13
00:01:27,120 --> 00:01:31,040
and also the techniques that we 
can use to evade detection by it  

14
00:01:32,800 --> 00:01:38,640
this is followed by a proof of concept and 
live demo finally i'll talk about some of  

15
00:01:38,640 --> 00:01:43,760
the common mistakes that people make when 
using aws along with the mitigation tips

16
00:01:47,520 --> 00:01:52,800
first let's take a look at the timeline of 
different command and control channels used by  

17
00:01:52,800 --> 00:02:00,479
track actors in the last three decades during 
the 1990s there were many unix hacking tools  

18
00:02:00,480 --> 00:02:06,320
distributed in the form of postscripts 
and c source code as far as i can remember  

19
00:02:06,320 --> 00:02:12,640
they are usually distributed on those frag 
magazine websites if some of you here are  

20
00:02:12,640 --> 00:02:18,160
old enough you probably might have heard of 
red tools like netbars back orifice and sub 7.  

21
00:02:20,080 --> 00:02:25,840
most of the linux and windows hacking tools that 
time were using direct tcp for cnc communications  

22
00:02:27,280 --> 00:02:32,240
back then networks was simpler because every 
computer that is connected to the internet  

23
00:02:32,240 --> 00:02:39,680
gets an individual public ib address i remember 
during the late 90s sub 7 released an updated  

24
00:02:39,680 --> 00:02:46,880
version that started to use irc channel for 
cnc communication dns tunneling was introduced  

25
00:02:46,880 --> 00:02:52,480
around the same time when oscar pearson shared 
his proof of concept on backtrack mailing list  

26
00:02:54,000 --> 00:03:00,720
for many years http protocol is used by most 
malware as the cnc channel to communicate with  

27
00:03:00,720 --> 00:03:09,120
the attackers server even today until 2014 
we started to see reports that reddit github  

28
00:03:09,120 --> 00:03:16,000
twitter and instagram were being used as the cnc 
channel however these are mostly cnc channels  

29
00:03:16,000 --> 00:03:22,560
used by malware that run on the end users 
personal computers most of these cnc channels  

30
00:03:22,560 --> 00:03:31,840
will fail to work when it comes to corporate 
servers with strict firewall outbound rules  

31
00:03:32,400 --> 00:03:38,160
among all dimensional channels the only technique 
that is tricky to block is dns tunneling  

32
00:03:39,520 --> 00:03:44,400
when a compromise host wants to communicate 
with the attacker it doesn't need to send a  

33
00:03:44,400 --> 00:03:52,000
direct dns query to the cnc server instead it 
sends the dns query to any trusted recursive dns  

34
00:03:52,000 --> 00:03:58,640
server used by the host just like any normal 
program will do what happens is the attacker  

35
00:03:58,640 --> 00:04:03,760
has already set up a domain name and hosts 
it using their own authoritative dns server  

36
00:04:05,120 --> 00:04:12,000
so all uncached queries for the attacker's domain 
name that is received by any requested dns will  

37
00:04:12,000 --> 00:04:18,640
eventually reach the attacker's authoritative dns 
this makes it difficult to block dns tunneling  

38
00:04:19,200 --> 00:04:24,320
because there is no way a firewall can tell 
if a dns query is legitimate or malicious

39
00:04:26,880 --> 00:04:29,600
for the firewall perspective it can only see that  

40
00:04:30,240 --> 00:04:33,680
all dns requests are being sent 
to the same recursive dns server  

41
00:04:35,280 --> 00:04:40,640
the reason that dns service cannot be blocked 
because applications needed to resolve external  

42
00:04:40,640 --> 00:04:46,960
hostnames for various reasons such as to pull 
os updates or access external apis and so on

43
00:04:51,520 --> 00:04:56,400
nevertheless the standard dns 
protocol is not encrypted so  

44
00:04:56,400 --> 00:05:04,719
dns exfiltration and cnc activities can be seen by 
network ids what about dns over https and tos then  

45
00:05:06,000 --> 00:05:11,760
well it depends on what kind of environment we 
are looking at covert channels using an encrypted  

46
00:05:11,760 --> 00:05:16,560
protocol in corporate office network can be 
difficult to detect when they use support443  

47
00:05:17,920 --> 00:05:21,760
because any users can be loading 
a website via https protocol  

48
00:05:23,440 --> 00:05:28,960
for server environment encrypted dns can be 
detected in the same way as any other suspicious  

49
00:05:28,960 --> 00:05:36,400
https traffic we've seen this is because 
data xu activity can cause a sudden influx of  

50
00:05:36,400 --> 00:05:41,280
outbound https request to an external ip 
making a standout from the other traffic  

51
00:05:42,800 --> 00:05:46,480
in this talk we'll mainly focus on 
evasion techniques in a server environment

52
00:05:50,000 --> 00:05:57,520
some organizations deploy network-based ideas like 
snork zeek or surrey cutter these solutions work  

53
00:05:57,520 --> 00:06:03,680
like wireshark by picking into all the network 
packets that flow through them the detection is  

54
00:06:03,680 --> 00:06:08,800
not foolproof because they use signature databases 
and rules to check the packet haters and content  

55
00:06:10,640 --> 00:06:16,960
besides it has limited insights on encrypted 
traffic like https so it can't tell whether  

56
00:06:16,960 --> 00:06:24,159
a request is get paused post approved and 
to which url accept for the ip address also  

57
00:06:24,720 --> 00:06:28,880
deep packet inspection doesn't scale very 
well when it comes to networks with high

58
00:06:28,880 --> 00:06:39,360
throughput another type of ideas deployed 
by some organizations is the whole space ids  

59
00:06:40,640 --> 00:06:46,159
this type of ids works by installing an 
agent inside a server to monitor and analyze  

60
00:06:46,160 --> 00:06:53,520
various areas like file system integrity process 
creation network connections and application logs  

61
00:06:54,480 --> 00:06:59,520
it is usually difficult to evade detection 
from it unless you can gain access to the host  

62
00:06:59,520 --> 00:07:04,320
through some sort of code execution within the 
same process memory of the compromised service  

63
00:07:06,160 --> 00:07:13,600
however host-based ids is not widely deployed 
for a few reasons for example there are concerns  

64
00:07:13,600 --> 00:07:18,880
on performance impact and stability on the 
host as some of them uses kernel mode hooks  

65
00:07:19,760 --> 00:07:25,039
this type of hook can sometimes cause problems to 
certain applications or crash the whole system if  

66
00:07:25,040 --> 00:07:32,240
it is buggy whole space ids is usually not very 
platform agnostic due to the use of kernel modules  

67
00:07:33,040 --> 00:07:37,600
and some organizations have service running 
very overhead that is no longer supported  

68
00:07:38,960 --> 00:07:44,320
in windows kernel mode hook is no longer 
allowed since 64 bit due to page patch  

69
00:07:44,320 --> 00:07:49,280
guard and microsoft requires kernel drivers to 
be signed before it can be loaded by windows  

70
00:07:51,040 --> 00:07:55,440
another problem with host based 
ids is that it can get quite noisy  

71
00:07:55,440 --> 00:07:59,360
due to rapid application changes 
in modern software delivery process

72
00:08:03,920 --> 00:08:09,920
nowadays many organizations prefer to use sim over 
ids but of course they both can work together as  

73
00:08:09,920 --> 00:08:17,280
well in my opinion it is more powerful as it works 
at a higher level on top of various data sources  

74
00:08:18,560 --> 00:08:25,680
for example we can feed it with the logs 
from vpn ad dns web applications and  

75
00:08:25,680 --> 00:08:31,920
endpoint security like antivirus then it can 
aggregate those data to provide insights like  

76
00:08:31,920 --> 00:08:38,400
traffic patterns for anomaly detection alerting 
rules and actions can also be configured on top  

77
00:08:38,400 --> 00:08:43,840
of these insights to block and attack 
automatically it is essential to have sim  

78
00:08:44,480 --> 00:08:50,240
because it can simplify investigation during 
a security incident and identify the scope of  

79
00:08:50,240 --> 00:08:54,560
a data breach especially when you need to 
comply with legal requirements like gdpr

80
00:08:58,560 --> 00:09:05,199
we have briefly gone through how dns tunneling 
ids and sim works now we'll take a look at  

81
00:09:05,200 --> 00:09:10,160
an improved technique for the covert channel 
using popular cloud services to evade detection

82
00:09:12,640 --> 00:09:15,920
most organizations today use 
some sort of cloud services like  

83
00:09:16,720 --> 00:09:25,200
github new relic cloudflare and so on for example 
if an organization uses github their ci cd servers  

84
00:09:25,200 --> 00:09:29,600
would need to connect to github to fetch the 
application source code during the build process

85
00:09:32,000 --> 00:09:37,040
the same thing applies when an application 
needs to send or receive data from any other  

86
00:09:37,040 --> 00:09:44,480
cloud services due to this reason the ip range of 
these cloud services are normally white listed in  

87
00:09:44,480 --> 00:09:54,080
their theme and allowed by the firewall to see how 
these trust ip addresses can be used by malware  

88
00:09:54,080 --> 00:10:00,640
we will need to work backward assume that we are 
the attacker and our target for data exfiltration  

89
00:10:01,280 --> 00:10:07,680
is a server running in a secure network that 
server sits behind the firewall and does not  

90
00:10:07,680 --> 00:10:13,520
have any public ip address the only way it can 
reach the internet is through a nut gateway  

91
00:10:14,880 --> 00:10:19,920
and that server uses the internet to fetch 
repositories from github and get os patches  

92
00:10:20,880 --> 00:10:25,840
let's say we're going to use to compromise 
that server through a supply chain attack

93
00:10:29,360 --> 00:10:34,640
before the attack will need to prepare a few 
things first is to gather the ip range of the  

94
00:10:34,640 --> 00:10:40,880
popular cloud services we don't have to gather 
the ip range of every cloud service but we need  

95
00:10:40,880 --> 00:10:47,520
to pick them based on a few criteria like look for 
those that are widely used by many organizations  

96
00:10:48,560 --> 00:10:54,719
then check and see if they have their api and 
ib range documented publicly in their website  

97
00:10:56,000 --> 00:10:59,840
and most importantly the service must have 
the ability to store and retrieve data  

98
00:11:01,280 --> 00:11:07,760
second we also need to select a few popular 
cdn services and gather their ip range  

99
00:11:09,520 --> 00:11:14,000
third we have to create accounts for 
these selected cloud services to obtain  

100
00:11:14,000 --> 00:11:22,160
the api keys for using them and also set up our 
cnc server behind the select cdns the last step  

101
00:11:22,160 --> 00:11:27,839
is to embed the api keys and collect the ip range 
data into the supply chain malware for later use

102
00:11:32,880 --> 00:11:36,800
in the supply chain malware the 
way how it establishes the cnc  

103
00:11:36,800 --> 00:11:39,599
channel is the crucial part to evade ids detection

104
00:11:41,680 --> 00:11:46,239
it needs to monitor all the operating 
system connections for at least 24 hours  

105
00:11:47,120 --> 00:11:53,360
and continuously look for any remote ip address 
that matches any of the embedded ip range data  

106
00:11:54,560 --> 00:11:57,920
this should be done as often 
as every one to two seconds  

107
00:11:57,920 --> 00:12:02,160
but it is a very lightweight operation 
so it's not going to cause any cpu spy

108
00:12:04,640 --> 00:12:10,800
on linux this can be achieved by reading 
slash proc tcp as a file slash prog tcp  

109
00:12:11,920 --> 00:12:17,760
pro net tcp as far sorry while on windows 
the same information can be retrieved through  

110
00:12:17,760 --> 00:12:23,840
get tcp table api call if there is no 
matching ip address file after 24 hours  

111
00:12:24,560 --> 00:12:28,800
the next step is to look into the 
operating systems package repository config  

112
00:12:30,480 --> 00:12:37,840
we want to look for our hostname with ip address 
that matches any of the embedded ip range data  

113
00:12:38,880 --> 00:12:45,600
so now we have three possible outcomes first 
if a matching cloud service ip address is found  

114
00:12:46,240 --> 00:12:53,200
then the malware can use that cloud service 
storage as cnc channel to exchange data second  

115
00:12:53,920 --> 00:12:56,800
if a matching cdn hib address is found  

116
00:12:57,760 --> 00:13:03,200
then the malware can use that cdn endpoint to 
talk to the cnc server that was set up previously  

117
00:13:05,040 --> 00:13:10,480
and third if there is no matching ip address 
file just default to any of the selected cdn  

118
00:13:11,360 --> 00:13:16,560
and the malware will have to use the endpoint 
of that cdn to talk to the cnc server  

119
00:13:17,920 --> 00:13:23,040
the first two outcomes will blend in the 
cnc traffic as legitimate source usage  

120
00:13:23,840 --> 00:13:30,000
this can help to stay invisible from the ids 
and sim detection the third outcome might  

121
00:13:30,000 --> 00:13:35,760
potentially trigger ids or sim alert but there's 
a high chance it may be treated as a false alarm  

122
00:13:36,400 --> 00:13:43,040
why because when the source engine see an ip 
address that belongs to a reputable cdn they  

123
00:13:43,040 --> 00:13:47,839
might think it is some applications downloading 
updates that is being hosted behind cdn

124
00:13:51,360 --> 00:13:54,800
i'll now talk about the main 
topic of this presentation  

125
00:13:54,800 --> 00:14:01,839
got duty evasion amazon got duties 
managed detection service from aws  

126
00:14:03,680 --> 00:14:11,040
according to the aws website gut duty works by 
analyzing data source from cloudtrail vpc flow  

127
00:14:11,040 --> 00:14:17,120
logs and dns it also uses thread intelligence 
feed and machine learning to detect anomaly in  

128
00:14:17,120 --> 00:14:24,640
the aws account and one important thing to keep 
in mind is iem is used everywhere to call aws api

129
00:14:28,000 --> 00:14:32,560
now let's assume that our target for 
data exfiltration is a server running in  

130
00:14:32,560 --> 00:14:40,319
aws and all dependent services are aws products 
to avoid gut duty detection the malware must not  

131
00:14:40,320 --> 00:14:46,960
call any api service using the compromised host's 
iem credential so we don't leave any trades in  

132
00:14:46,960 --> 00:14:53,360
cloudtrail and we don't want it to communicate 
with any ip address that is not trusted by aws  

133
00:14:54,960 --> 00:15:00,320
also we can't use dns to perform data 
exfiltration since gut duty can detect that

134
00:15:04,880 --> 00:15:11,840
so what do we need to establish a cnc channel 
while making sure gut duty is happy we need a  

135
00:15:11,840 --> 00:15:18,400
medium for data exchange between the malware 
and cnc server that doesn't require aws api  

136
00:15:20,000 --> 00:15:28,000
that medium for data exchange must be trusted by 
aws to pass god duties check the implementation  

137
00:15:28,000 --> 00:15:32,720
should be simple enough that we don't need 
any extra crypto libraries for authentication  

138
00:15:33,840 --> 00:15:39,840
and it should use https protocol to blend 
in like performing a usual res api call

139
00:15:43,280 --> 00:15:48,480
actually there are many options to evade gut duty 
but due to time constraint i'll show three of the  

140
00:15:48,480 --> 00:15:56,880
ways to do it first option embed the access 
the im user access key of the attackers in  

141
00:15:56,880 --> 00:16:05,280
in the mailway this method allows the use of any 
database resources like s3 sqs dynamodb and so on  

142
00:16:06,400 --> 00:16:12,400
it is similar to many malware cnc channel 
except that the malware interacts with adobe's  

143
00:16:12,400 --> 00:16:19,439
endpoint instead of some unknown ip address the 
disadvantage of this option is when someone found  

144
00:16:19,440 --> 00:16:25,040
the access key in the backdoor code they can use 
it to get the database account id and im username  

145
00:16:26,560 --> 00:16:32,239
then they will straight away know it is a backdoor 
the moment they discover that account id does not  

146
00:16:32,240 --> 00:16:41,040
belong to them and this method requires hmac and 
sha256l256 algorithm to assign the api request  

147
00:16:41,040 --> 00:16:45,040
but it is not ideal to add more code or 
additional dependency in the backdoor  

148
00:16:46,160 --> 00:16:51,040
on the side note this method will not generate 
cloudtrail lock in the compromise host account  

149
00:16:51,040 --> 00:16:53,520
because it is using the attacker's access key

150
00:16:59,120 --> 00:17:06,319
the second option is to set up the cnc server 
hiding behind the amazon cloudfront cdn this  

151
00:17:06,319 --> 00:17:11,839
method does not require signing the request but 
the chances of getting detected by gut duties  

152
00:17:11,839 --> 00:17:20,639
are known i've only done limited tests and gut 
duty did not detect it however we don't know if  

153
00:17:20,640 --> 00:17:29,040
god duty might start flagging outgoing connections 
from ec2 to cloudfront in the future amazon linux  

154
00:17:29,040 --> 00:17:36,960
2 yum repository is hosted on s3 directly so s3 
will be a more trusted service than cloudfront

155
00:17:41,520 --> 00:17:45,840
the next option is to use the 
attackers s3 bucket with pre-signed url  

156
00:17:46,720 --> 00:17:49,600
this method does not require 
signing the request as well  

157
00:17:50,480 --> 00:17:56,160
and s3 bucket is preferred since amazon 
linux tools package repo is using it  

158
00:17:57,760 --> 00:18:05,200
although s3 preset url has limited validity but 
we can work around it this is the most preferred  

159
00:18:05,200 --> 00:18:13,840
option among the tree and let's take a look 
at how our proof concept uses this approach  

160
00:18:14,640 --> 00:18:21,440
before i proceed to the demo let's take a look 
briefly how it works in this poc we use a s3  

161
00:18:21,440 --> 00:18:28,240
bucket as the media for data exchange between 
the compromise host and the attacker first the  

162
00:18:28,240 --> 00:18:34,480
attacker starts a cnc service by generating 
pre-signed url as channel files that can be  

163
00:18:34,480 --> 00:18:40,400
accessed publicly by the malware the service will 
keep refreshing the pre-signed url in these files  

164
00:18:40,960 --> 00:18:47,440
every 24 hours to maintain its validity at the 
same time the service will also pull the bucket  

165
00:18:47,440 --> 00:18:54,480
periodically for any session creation request 
files this is shown in step 3. basically the  

166
00:18:55,120 --> 00:19:01,040
cnc service is now running and waiting for any 
compromise host that tries to communicate with it  

167
00:19:02,480 --> 00:19:08,880
in step two when the malware starts running 
in a compromise host it will randomly pick  

168
00:19:08,880 --> 00:19:14,080
one of the channels and use the pre-signed url 
to create a session request file in the bucket

169
00:19:17,360 --> 00:19:22,719
now the now step the step 3 ad the 
attacker's site sees the session request  

170
00:19:23,680 --> 00:19:27,600
it will create a private session based 
on the session id pickup by the malware

171
00:19:29,760 --> 00:19:32,560
as the new private session id is created  

172
00:19:33,200 --> 00:19:38,240
the malware will now pull for server message 
using the session id as shown in step 4.

173
00:19:41,440 --> 00:19:46,000
so any messages from the service will 
be executed by the malware in step 5  

174
00:19:46,960 --> 00:19:51,840
and the output is then written back 
to the bucket with the present url  

175
00:19:52,720 --> 00:19:57,440
so in the final step the service will 
read the output from the bucket to display  

176
00:19:58,080 --> 00:20:05,840
and it repeats the whole cycle or all 
over again now let's look at the demo

177
00:20:13,440 --> 00:20:19,760
so in my aws account i've created this 
bucket name hitb screen conference 2021 ams  

178
00:20:19,760 --> 00:20:34,080
bucket as you can see from here this this is the 
s3 bucket that will be used for data exchange  

179
00:20:34,080 --> 00:20:38,159
so uh here are my proof of concept 
codes and now i'll run this um  

180
00:20:38,160 --> 00:20:47,840
cnc server on my local machine as you can see 
that uh okay this is my local machine user

181
00:20:55,040 --> 00:20:58,639
so now the service is started on my local machine  

182
00:20:58,640 --> 00:21:03,680
and it is making use of the s3 
bucket as the data exchange media

183
00:21:06,880 --> 00:21:15,840
before i access into the ec2 that i'm running 
in aws let me show you the guide duty status

184
00:21:20,720 --> 00:21:25,680
so i did a refresh and we can see that 
the the last scene findings is a day ago  

185
00:21:25,680 --> 00:21:29,840
and these are all the sample findings 
that i generate using the gut duty tool

186
00:21:36,880 --> 00:21:43,840
now i'm going to ssh into my ec2 instance 
to run the proof of concept malware

187
00:21:47,680 --> 00:21:54,480
okay as you can see this is the ipaddress 
that i've created ec2 earlier which is here

188
00:21:55,520 --> 00:21:57,840
3.250.87

189
00:22:00,320 --> 00:22:02,320
and this is running in aws

190
00:22:05,440 --> 00:22:11,840
and earlier i've prepared the file 
um this cnc client overshoot i i can  

191
00:22:12,560 --> 00:22:19,760
show you and take a look so it is um kept as 
simple as possible only using a http client  

192
00:22:21,040 --> 00:22:26,639
and yeah the proof of concept code can be 
obtained in the link that i provided in the slide

193
00:22:34,320 --> 00:22:40,320
so the moment i start this cnc client 
it will start to establish the session  

194
00:22:41,280 --> 00:22:46,080
via the s3 bucket that we've created as you 
can see that the session has been established  

195
00:22:46,080 --> 00:22:54,320
now so it's basically just waiting for command 
from the attacker which is on my local machine  

196
00:22:54,320 --> 00:22:58,639
so on my local machine this cnc service 
is basically like a reverse shell  

197
00:22:58,640 --> 00:23:03,440
whatever command that i type here will be 
executed on the malware host so let's take a look

198
00:23:07,680 --> 00:23:11,440
so you can see that the union dash a 
it goes over here on the remote host  

199
00:23:12,000 --> 00:23:14,480
and i get the output redirected back

200
00:23:17,040 --> 00:23:24,720
to show again i'll run who am i my local user here 
is jekyll but on the remote host is easy to user

201
00:23:27,280 --> 00:23:30,720
and okay uh let's check the d

202
00:23:30,720 --> 00:23:35,840
space

203
00:23:40,080 --> 00:23:42,000
and also list the files in the current

204
00:23:42,000 --> 00:23:49,840
folder

205
00:23:52,240 --> 00:23:56,400
this proof of concept can be modified 
easily to perform file transfer as well  

206
00:23:57,680 --> 00:24:07,920
now let's take a look at gut duty again we can see 
that there's no new findings here even though i  

207
00:24:07,920 --> 00:24:15,440
refresh and the last scene is is the one that is 
a day ago because god duty it doesn't detect any  

208
00:24:16,480 --> 00:24:20,960
actions to or any read or write 
activity to astrid market as malicious

209
00:24:25,440 --> 00:24:31,200
it it may take a few moments for gut duty to 
process uh the logs like vbc flow logs dns  

210
00:24:31,200 --> 00:24:36,480
locks and and also like cloudtrail so we will 
come back again later and take a look again  

211
00:24:37,200 --> 00:24:45,840
let's move on to the final slide  

212
00:24:47,680 --> 00:24:56,480
basically here the common fallacy about aws first 
is that many aws users believe that it is safe to  

213
00:24:56,480 --> 00:25:04,320
allow all egress traffic to aws services the 
problem is remember that aws is a public cloud  

214
00:25:05,040 --> 00:25:11,120
most of the managed resources are shared among 
different customers in fact tightening egress  

215
00:25:11,120 --> 00:25:19,679
traffic is as important as tightening ingress 
traffic so by using aws private link endpoint  

216
00:25:19,680 --> 00:25:25,920
we can restrict the traffic to a specific bucket 
through the endpoint policy this will help to  

217
00:25:25,920 --> 00:25:31,440
protect your hosts from s3x filtration which 
makes the earlier shown technique won't work  

218
00:25:32,880 --> 00:25:40,400
the second fallacy using ip tables in ec2 is the 
same as security groups this is not true because  

219
00:25:40,400 --> 00:25:45,920
iptables of a compromise host can be changed 
if the attacker got root access on the system  

220
00:25:46,880 --> 00:25:50,640
but security groups works at 80-bit 
account level outside of the host  

221
00:25:52,400 --> 00:25:56,320
also when security group is tempered 
it can show up in cloudtrail  

222
00:25:56,960 --> 00:26:03,760
this allows us to write lambda function to monitor 
cloudtrail for any security group that changes and  

223
00:26:03,760 --> 00:26:10,400
trigger alerts whenever necessary therefore it is 
recommended to use security groups over iptables  

224
00:26:12,160 --> 00:26:17,680
and the third fallacy having got duties 
enough for overall security monitoring  

225
00:26:19,520 --> 00:26:26,400
amazon gut duty is good in monitoring a 
subset of security issues maybe like 70 to 80  

226
00:26:26,400 --> 00:26:33,760
of common trade unfortunately a lot of data 
breach can happen and stay undetected for years  

227
00:26:33,760 --> 00:26:42,400
due to the missing visibility of that 20 percent 
so in order to achieve good security visibility  

228
00:26:42,400 --> 00:26:49,600
it is essential to continuously tweak and improve 
the seam in your organization now let's take a  

229
00:26:49,600 --> 00:26:56,480
look at the final uh do a final check on the gut 
duty to see if it detects my s3 exfiltration demo

230
00:27:00,400 --> 00:27:05,840
so i doing a refresh again and we can 
see that there's no new findings at all

231
00:27:09,680 --> 00:27:12,880
well a final run we can see that okay the uptime

232
00:27:15,760 --> 00:27:21,040
yeah it's basically still 
running fine with no detection

233
00:27:24,880 --> 00:27:31,600
so yeah basically that's all for my 
presentation and i'm going to shut this now see  

234
00:27:32,480 --> 00:27:39,760
it got disconnected and shut down the 
instance okay um the proof of concept code cam  

235
00:27:39,760 --> 00:27:48,480
can be obtained through this link github.com ssdo 
hitb scree conference 2021 ems poc repository  

236
00:27:50,000 --> 00:27:52,400
and that's all for my presentation thank

237
00:27:52,400 --> 00:27:58,480
you

