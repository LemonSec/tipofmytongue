1
00:00:15,200 --> 00:00:16,560
hello from italy

2
00:00:16,560 --> 00:00:18,640
and welcome to our beautiful talk the

3
00:00:18,640 --> 00:00:20,800
rise of potatoes privilege escalation

4
00:00:20,800 --> 00:00:21,760
immuno services

5
00:00:21,760 --> 00:00:25,039
and not only as cooper said this is not

6
00:00:25,039 --> 00:00:25,439
the

7
00:00:25,439 --> 00:00:27,680
this is not a pre-recorded talk but it's

8
00:00:27,680 --> 00:00:28,880
live streaming

9
00:00:28,880 --> 00:00:31,359
so first of all i want to apologize for

10
00:00:31,359 --> 00:00:32,558
my bad english

11
00:00:32,558 --> 00:00:34,480
and for some mistake but as you can

12
00:00:34,480 --> 00:00:35,680
imagine uh i'm

13
00:00:35,680 --> 00:00:38,719
not able to stop and record the game

14
00:00:38,719 --> 00:00:41,760
okay so i hope that all that all we

15
00:00:41,760 --> 00:00:44,719
will talk about is clear to you okay

16
00:00:44,719 --> 00:00:47,280
back to us

17
00:00:47,840 --> 00:00:49,600
a little bit about me yes i'm andrea

18
00:00:49,600 --> 00:00:52,079
pierini i'm a nike idea architect and

19
00:00:52,079 --> 00:00:55,360
security manager with a long experience

20
00:00:55,360 --> 00:00:58,160
i'm also passionate about i.t security

21
00:00:58,160 --> 00:00:58,640
and

22
00:00:58,640 --> 00:01:01,120
during my spare time among other obvious

23
00:01:01,120 --> 00:01:02,320
i

24
00:01:02,320 --> 00:01:06,080
sometimes like to do some research and

25
00:01:06,080 --> 00:01:07,600
find the vulnerabilities

26
00:01:07,600 --> 00:01:09,840
in especially in windows environments

27
00:01:09,840 --> 00:01:12,320
and especially with my friend

28
00:01:12,320 --> 00:01:15,119
antonio if you want to get in touch with

29
00:01:15,119 --> 00:01:17,520
me or read my blog about my findings

30
00:01:17,520 --> 00:01:21,200
these are the top the contacts and now

31
00:01:21,200 --> 00:01:25,119
let's go to antonio

32
00:01:25,119 --> 00:01:28,240
yes thanks andrea hi everyone

33
00:01:28,240 --> 00:01:30,960
welcome to our live talk i'm antonio

34
00:01:30,960 --> 00:01:32,000
comaczy

35
00:01:32,000 --> 00:01:34,240
and i work as a system engineer at

36
00:01:34,240 --> 00:01:35,600
sentinel one

37
00:01:35,600 --> 00:01:37,759
my main interests are in malware

38
00:01:37,759 --> 00:01:39,680
analysis reverse engineering windows

39
00:01:39,680 --> 00:01:42,320
internals and of sv security

40
00:01:42,320 --> 00:01:45,360
and on the right you can find my public

41
00:01:45,360 --> 00:01:46,079
channel

42
00:01:46,079 --> 00:01:47,759
you can find my twitter account and my

43
00:01:47,759 --> 00:01:50,560
github account in which i often publish

44
00:01:50,560 --> 00:01:54,079
my researches and also my fancy tools

45
00:01:54,079 --> 00:01:57,040
i'm also a ctf player and i enjoy to

46
00:01:57,040 --> 00:01:58,719
play in my free time

47
00:01:58,719 --> 00:02:00,880
and i'm also a proud member of donkey's

48
00:02:00,880 --> 00:02:01,759
team

49
00:02:01,759 --> 00:02:04,799
back to you andrea okay so first of all

50
00:02:04,799 --> 00:02:06,320
why distort well

51
00:02:06,320 --> 00:02:10,160
the initial can you please go back

52
00:02:10,160 --> 00:02:12,640
antonio

53
00:02:16,720 --> 00:02:20,959
so um our initial idea was to

54
00:02:20,959 --> 00:02:23,040
if you can give me the the previous

55
00:02:23,040 --> 00:02:25,359
slide

56
00:02:27,360 --> 00:02:30,319
but this is live streaming some

57
00:02:30,319 --> 00:02:31,760
technical problems

58
00:02:31,760 --> 00:02:34,239
can happen okay why this talk because

59
00:02:34,239 --> 00:02:36,480
our initial idea was to give you

60
00:02:36,480 --> 00:02:38,720
an update on all the techniques we

61
00:02:38,720 --> 00:02:40,160
discovered but not only

62
00:02:40,160 --> 00:02:43,440
not only only but also other researchers

63
00:02:43,440 --> 00:02:46,319
and to perform a privilege escalation

64
00:02:46,319 --> 00:02:48,000
when you have a compromised service

65
00:02:48,000 --> 00:02:48,640
account

66
00:02:48,640 --> 00:02:51,519
by abusing impersonation privileges so

67
00:02:51,519 --> 00:02:52,239
in

68
00:02:52,239 --> 00:02:54,319
the last years the moroccan and juicy

69
00:02:54,319 --> 00:02:55,920
potato exploits

70
00:02:55,920 --> 00:02:58,560
were heavily used to abuse these

71
00:02:58,560 --> 00:02:59,760
privileges but

72
00:02:59,760 --> 00:03:02,159
starting from two or three years ago

73
00:03:02,159 --> 00:03:04,239
microsoft silently fixed this

74
00:03:04,239 --> 00:03:06,480
and uh from a certain starting from a

75
00:03:06,480 --> 00:03:07,519
certain

76
00:03:07,519 --> 00:03:09,280
windows version it is no more possible

77
00:03:09,280 --> 00:03:12,480
to abuse with our potato exploit

78
00:03:12,480 --> 00:03:15,760
so we decided to do some research in

79
00:03:15,760 --> 00:03:17,200
order to find

80
00:03:17,200 --> 00:03:18,879
some workarounds and this will be

81
00:03:18,879 --> 00:03:21,920
discussed in our presentation

82
00:03:21,920 --> 00:03:24,640
but at some point we asked ourselves can

83
00:03:24,640 --> 00:03:25,200
we get

84
00:03:25,200 --> 00:03:27,920
rid of the impersonation privileges do

85
00:03:27,920 --> 00:03:28,239
you

86
00:03:28,239 --> 00:03:30,080
do we really need the impersonation

87
00:03:30,080 --> 00:03:31,360
privileges because we

88
00:03:31,360 --> 00:03:34,159
what we had in mind was if we can use

89
00:03:34,159 --> 00:03:35,760
our potato techniques without

90
00:03:35,760 --> 00:03:37,599
impersonation privileges

91
00:03:37,599 --> 00:03:41,040
so that the standard normal user can uh

92
00:03:41,040 --> 00:03:43,760
escalate privileges this week this would

93
00:03:43,760 --> 00:03:45,200
be really really fun

94
00:03:45,200 --> 00:03:50,798
and also dangerous okay so next slide

95
00:03:54,480 --> 00:03:58,000
okay the very quickly the agenda we will

96
00:03:58,000 --> 00:04:00,400
first introduce some basic concept i i

97
00:04:00,400 --> 00:04:01,200
think

98
00:04:01,200 --> 00:04:04,319
these concepts are well known to all of

99
00:04:04,319 --> 00:04:05,120
you

100
00:04:05,120 --> 00:04:07,280
but about to serve this we'll talk about

101
00:04:07,280 --> 00:04:09,200
services and impersonation essentially

102
00:04:09,200 --> 00:04:11,599
but i think it's a good starting point

103
00:04:11,599 --> 00:04:14,560
for the next step of the presentation

104
00:04:14,560 --> 00:04:17,120
where antonio will speak about all these

105
00:04:17,120 --> 00:04:18,720
techniques to perform privilege

106
00:04:18,720 --> 00:04:20,478
escalation by abusing

107
00:04:20,478 --> 00:04:23,520
service account finally we will

108
00:04:23,520 --> 00:04:26,320
show you how we were able to relay our

109
00:04:26,320 --> 00:04:27,360
potatoes

110
00:04:27,360 --> 00:04:30,240
and then we will give you some hints

111
00:04:30,240 --> 00:04:30,639
about

112
00:04:30,639 --> 00:04:32,639
mitigations and then the final

113
00:04:32,639 --> 00:04:35,280
conclusions

114
00:04:36,160 --> 00:04:38,479
okay let's start with the windows

115
00:04:38,479 --> 00:04:39,919
services

116
00:04:39,919 --> 00:04:41,919
what is the windows services well it's a

117
00:04:41,919 --> 00:04:43,680
particular process which runs on

118
00:04:43,680 --> 00:04:45,360
background in a separate session and

119
00:04:45,360 --> 00:04:47,120
without user interaction

120
00:04:47,120 --> 00:04:49,360
it's very similar similar to a classic

121
00:04:49,360 --> 00:04:50,479
linux demon

122
00:04:50,479 --> 00:04:52,800
why is the service so important because

123
00:04:52,800 --> 00:04:54,880
as you probably know all windows

124
00:04:54,880 --> 00:04:57,520
components are running through a service

125
00:04:57,520 --> 00:05:00,639
and being demons they have an exposed

126
00:05:00,639 --> 00:05:01,600
attack surface

127
00:05:01,600 --> 00:05:03,520
and a very interesting actual face

128
00:05:03,520 --> 00:05:04,800
because usually they

129
00:05:04,800 --> 00:05:08,000
they run with high privileges

130
00:05:08,000 --> 00:05:10,400
the windows services must be we run with

131
00:05:10,400 --> 00:05:12,160
a special type of user

132
00:05:12,160 --> 00:05:14,240
it's the service user account and the

133
00:05:14,240 --> 00:05:17,280
configuration of the service are done to

134
00:05:17,280 --> 00:05:21,119
dedicate the registry keys

135
00:05:22,160 --> 00:05:24,960
how can you recognize a service from the

136
00:05:24,960 --> 00:05:26,400
process point of view well

137
00:05:26,400 --> 00:05:29,120
first of all all services have have as

138
00:05:29,120 --> 00:05:30,479
the parent process

139
00:05:30,479 --> 00:05:32,880
the services dot dot xc which is the

140
00:05:32,880 --> 00:05:34,479
service control manager

141
00:05:34,479 --> 00:05:37,520
they live in session zero and from the

142
00:05:37,520 --> 00:05:38,479
programmers

143
00:05:38,479 --> 00:05:40,800
point of view they make the calls to

144
00:05:40,800 --> 00:05:42,160
dedicated apis

145
00:05:42,160 --> 00:05:44,080
in order to interact with the service

146
00:05:44,080 --> 00:05:45,440
control managers

147
00:05:45,440 --> 00:05:48,160
such as sv install svc main control

148
00:05:48,160 --> 00:05:48,639
lender

149
00:05:48,639 --> 00:05:52,080
and so on how does the kernel recognize

150
00:05:52,080 --> 00:05:55,520
the service well um in the access token

151
00:05:55,520 --> 00:05:56,720
on the service

152
00:05:56,720 --> 00:05:59,840
there is a special uh group a special

153
00:05:59,840 --> 00:06:01,520
seed which is the service

154
00:06:01,520 --> 00:06:06,080
seed the group so if uh process

155
00:06:06,080 --> 00:06:08,000
in an access token of the process has

156
00:06:08,000 --> 00:06:09,520
this talk as this

157
00:06:09,520 --> 00:06:11,680
belongs to this group it will be a

158
00:06:11,680 --> 00:06:14,160
service

159
00:06:14,720 --> 00:06:17,759
then we have the service account uh so

160
00:06:17,759 --> 00:06:19,759
in order to run a service you need a

161
00:06:19,759 --> 00:06:20,720
special

162
00:06:20,720 --> 00:06:24,080
let's say special

163
00:06:24,080 --> 00:06:26,639
windows account and this windows account

164
00:06:26,639 --> 00:06:27,120
don't

165
00:06:27,120 --> 00:06:29,600
need to have the password managed the

166
00:06:29,600 --> 00:06:31,600
password is managed internally

167
00:06:31,600 --> 00:06:33,919
we have different services account type

168
00:06:33,919 --> 00:06:35,440
the local system which is the most

169
00:06:35,440 --> 00:06:37,600
powerful then we have the local service

170
00:06:37,600 --> 00:06:38,960
network service account

171
00:06:38,960 --> 00:06:41,840
and finally managed and virtual accounts

172
00:06:41,840 --> 00:06:42,240
all

173
00:06:42,240 --> 00:06:45,360
these accounts has have to

174
00:06:45,360 --> 00:06:47,759
be granted the right to log on as a

175
00:06:47,759 --> 00:06:50,080
service which is the logon type five

176
00:06:50,080 --> 00:06:52,639
so you can even run a service with a

177
00:06:52,639 --> 00:06:53,919
standard user

178
00:06:53,919 --> 00:06:56,960
so a normal user you create as long as

179
00:06:56,960 --> 00:06:57,919
you grant

180
00:06:57,919 --> 00:07:00,840
to this user the logon as a service

181
00:07:00,840 --> 00:07:03,840
right

182
00:07:04,560 --> 00:07:07,280
so uh

183
00:07:07,680 --> 00:07:10,639
see the in the earlier windows version

184
00:07:10,639 --> 00:07:11,680
starting from

185
00:07:11,680 --> 00:07:14,960
up up to windows 2003 and these

186
00:07:14,960 --> 00:07:18,240
all services run a system as you can

187
00:07:18,240 --> 00:07:19,360
imagine this was

188
00:07:19,360 --> 00:07:21,680
this was very dangerous because once you

189
00:07:21,680 --> 00:07:22,639
compromised

190
00:07:22,639 --> 00:07:26,400
service you compromised the old machine

191
00:07:26,400 --> 00:07:29,360
so some mitigation which that microsoft

192
00:07:29,360 --> 00:07:32,880
called windows 77 came to rescue

193
00:07:32,880 --> 00:07:35,840
at least this was the the initial goal

194
00:07:35,840 --> 00:07:36,400
you can

195
00:07:36,400 --> 00:07:38,240
find some great references here in the

196
00:07:38,240 --> 00:07:41,360
bottom of the slide

197
00:07:43,599 --> 00:07:46,879
so let's understand better what exactly

198
00:07:46,879 --> 00:07:47,919
microsoft did

199
00:07:47,919 --> 00:07:50,800
in order to harden to restrict the power

200
00:07:50,800 --> 00:07:52,319
of the windows service account well

201
00:07:52,319 --> 00:07:54,160
first of all they introduced

202
00:07:54,160 --> 00:07:56,400
two special accounts local service and

203
00:07:56,400 --> 00:07:57,599
network service account

204
00:07:57,599 --> 00:07:59,840
instead of system which has less

205
00:07:59,840 --> 00:08:02,080
privileges than the system account

206
00:08:02,080 --> 00:08:03,840
but they still have impersonation

207
00:08:03,840 --> 00:08:05,440
probabilities

208
00:08:05,440 --> 00:08:08,960
and you can also restrict

209
00:08:08,960 --> 00:08:11,280
the privileges of the particular service

210
00:08:11,280 --> 00:08:13,440
via a configuration in

211
00:08:13,440 --> 00:08:15,840
order that you can assign to the service

212
00:08:15,840 --> 00:08:17,840
only the needed privileges so if a

213
00:08:17,840 --> 00:08:19,280
service does not need

214
00:08:19,280 --> 00:08:21,680
the impersonation privilege he will run

215
00:08:21,680 --> 00:08:22,560
without

216
00:08:22,560 --> 00:08:24,400
this privilege this is the least

217
00:08:24,400 --> 00:08:26,160
privileged best practice as you can

218
00:08:26,160 --> 00:08:27,919
understand

219
00:08:27,919 --> 00:08:29,840
not only you can also assign to the

220
00:08:29,840 --> 00:08:31,840
service the right respective token what

221
00:08:31,840 --> 00:08:32,719
does this mean

222
00:08:32,719 --> 00:08:35,120
that the service by default has only

223
00:08:35,120 --> 00:08:37,120
read access to the resources

224
00:08:37,120 --> 00:08:39,760
until you explicitly grant flight

225
00:08:39,760 --> 00:08:41,039
results

226
00:08:41,039 --> 00:08:44,720
right access to uh dedicated resource

227
00:08:44,720 --> 00:08:46,800
this is a fine draining and very

228
00:08:46,800 --> 00:08:48,080
powerful

229
00:08:48,080 --> 00:08:54,160
way to limit the

230
00:08:54,160 --> 00:08:57,680
how can i say that to limit the service

231
00:08:57,680 --> 00:09:00,560
okay then we have also the services

232
00:09:00,560 --> 00:09:02,240
hidden vehicle accounts

233
00:09:02,240 --> 00:09:04,800
this means that each service is accessed

234
00:09:04,800 --> 00:09:06,480
in the access token of each service

235
00:09:06,480 --> 00:09:08,399
there is a unique ownership each

236
00:09:08,399 --> 00:09:11,600
service has is a unique user okay which

237
00:09:11,600 --> 00:09:13,200
has a using ownership

238
00:09:13,200 --> 00:09:15,279
this seed is not crosstalking is not

239
00:09:15,279 --> 00:09:17,200
shared across different services

240
00:09:17,200 --> 00:09:20,000
and you can assign specific permission

241
00:09:20,000 --> 00:09:21,120
to the seeds so

242
00:09:21,120 --> 00:09:24,160
if you need to let this particular

243
00:09:24,160 --> 00:09:26,320
only this particular service access a

244
00:09:26,320 --> 00:09:28,160
folder file or what else

245
00:09:28,160 --> 00:09:31,600
you can find green these two services

246
00:09:31,600 --> 00:09:33,600
leaving session zero as we talked before

247
00:09:33,600 --> 00:09:35,839
and this should in theory

248
00:09:35,839 --> 00:09:38,320
not interact with other sessions so it's

249
00:09:38,320 --> 00:09:38,959
a

250
00:09:38,959 --> 00:09:42,959
safety boundary services also run with a

251
00:09:42,959 --> 00:09:44,959
particular integrity level which is the

252
00:09:44,959 --> 00:09:47,040
system level we have the low level

253
00:09:47,040 --> 00:09:49,040
medium level high level and system level

254
00:09:49,040 --> 00:09:51,440
which is the highest one

255
00:09:51,440 --> 00:09:54,240
and this is useful in user interface

256
00:09:54,240 --> 00:09:56,800
privilege isolation what does this mean

257
00:09:56,800 --> 00:09:59,680
that a process running with a lower

258
00:09:59,680 --> 00:10:00,720
integrity level

259
00:10:00,720 --> 00:10:04,160
cannot send messages cannot interact

260
00:10:04,160 --> 00:10:06,959
with a service with a process with a

261
00:10:06,959 --> 00:10:07,519
higher

262
00:10:07,519 --> 00:10:10,079
intelligent level having services the

263
00:10:10,079 --> 00:10:11,360
highest

264
00:10:11,360 --> 00:10:15,120
integrity level they are protected

265
00:10:17,040 --> 00:10:20,160
oh sorry for it okay now let's talk a

266
00:10:20,160 --> 00:10:21,680
little bit about impersonation

267
00:10:21,680 --> 00:10:25,360
uh microsoft says impersonation is the

268
00:10:25,360 --> 00:10:27,519
ability of a thread to execute in a

269
00:10:27,519 --> 00:10:29,279
secure context that is different from

270
00:10:29,279 --> 00:10:30,959
the context of the process that owns the

271
00:10:30,959 --> 00:10:31,440
thread

272
00:10:31,440 --> 00:10:35,519
what does this mean it means that

273
00:10:35,920 --> 00:10:37,920
impersonation means that you have you

274
00:10:37,920 --> 00:10:39,279
can execute code

275
00:10:39,279 --> 00:10:41,760
on behalf another user and this is

276
00:10:41,760 --> 00:10:43,200
impersonation

277
00:10:43,200 --> 00:10:46,399
so in order um to execute code when we

278
00:10:46,399 --> 00:10:47,760
have another user

279
00:10:47,760 --> 00:10:50,480
you have to obtain the token of this

280
00:10:50,480 --> 00:10:52,160
user and once you have obtained this

281
00:10:52,160 --> 00:10:52,720
token

282
00:10:52,720 --> 00:10:55,120
in order to impersonate this token

283
00:10:55,120 --> 00:10:56,560
because then you can run

284
00:10:56,560 --> 00:10:58,959
processor or a thread on behalf of this

285
00:10:58,959 --> 00:11:00,959
user you need a special privilege

286
00:11:00,959 --> 00:11:03,440
which is the impersonation privilege and

287
00:11:03,440 --> 00:11:05,279
this is the prerequisite for all the

288
00:11:05,279 --> 00:11:07,680
techniques we will be shown

289
00:11:07,680 --> 00:11:12,319
except our promote potato zero exploit

290
00:11:12,959 --> 00:11:15,279
so what is the link between services and

291
00:11:15,279 --> 00:11:16,480
impersonation

292
00:11:16,480 --> 00:11:19,040
privileges well if you run the group

293
00:11:19,040 --> 00:11:20,320
policy editor

294
00:11:20,320 --> 00:11:22,320
under the user write acceptment you will

295
00:11:22,320 --> 00:11:24,959
see that all the value service account

296
00:11:24,959 --> 00:11:28,640
including the service group have this

297
00:11:28,640 --> 00:11:32,640
privilege granted if you try to remove

298
00:11:32,640 --> 00:11:34,800
this privilege

299
00:11:34,800 --> 00:11:36,640
windows will warn you sorry you cannot

300
00:11:36,640 --> 00:11:38,480
do that but because by default

301
00:11:38,480 --> 00:11:40,839
the service account needs this

302
00:11:40,839 --> 00:11:43,519
privileges

303
00:11:43,519 --> 00:11:46,240
okay this was all i hope it's clear and

304
00:11:46,240 --> 00:11:46,720
now

305
00:11:46,720 --> 00:11:49,279
we go to the juicy part which antonio

306
00:11:49,279 --> 00:11:50,000
will

307
00:11:50,000 --> 00:11:53,760
show you back to you antonio

308
00:11:54,639 --> 00:11:58,480
okay let me take control here

309
00:11:58,480 --> 00:12:01,760
okay in this part i am going to show

310
00:12:01,760 --> 00:12:04,399
all of the techniques in order to

311
00:12:04,399 --> 00:12:05,920
achieve privilege escalation

312
00:12:05,920 --> 00:12:08,800
starting from a service so once we have

313
00:12:08,800 --> 00:12:10,000
compromised a service that

314
00:12:10,000 --> 00:12:12,240
runs with the service account that all

315
00:12:12,240 --> 00:12:13,760
these impersonation privileges

316
00:12:13,760 --> 00:12:16,160
you can run one of those techniques in

317
00:12:16,160 --> 00:12:18,320
order to escalate your privileges to the

318
00:12:18,320 --> 00:12:19,680
system account that is the

319
00:12:19,680 --> 00:12:23,440
most pre-legit user on the system and

320
00:12:23,440 --> 00:12:26,560
what i am going to do is to list all of

321
00:12:26,560 --> 00:12:27,680
these techniques with

322
00:12:27,680 --> 00:12:30,160
all the various details clearly by

323
00:12:30,160 --> 00:12:32,000
ordering in the release date

324
00:12:32,000 --> 00:12:34,320
and consider that all of those

325
00:12:34,320 --> 00:12:35,200
techniques

326
00:12:35,200 --> 00:12:38,399
are being classified as one fix so

327
00:12:38,399 --> 00:12:40,480
all of these techniques will work on

328
00:12:40,480 --> 00:12:42,880
every updated windows machine

329
00:12:42,880 --> 00:12:44,959
let's start with the first one rogue

330
00:12:44,959 --> 00:12:46,800
winner ram raw winram

331
00:12:46,800 --> 00:12:50,720
has been released on 6 december 2019

332
00:12:50,720 --> 00:12:53,120
by decoder that is andrea splintercore

333
00:12:53,120 --> 00:12:54,000
myself

334
00:12:54,000 --> 00:12:57,680
and roberto and briefly what does this

335
00:12:57,680 --> 00:12:58,160
technique

336
00:12:58,160 --> 00:13:00,800
it's tricking the bit service that is

337
00:13:00,800 --> 00:13:02,320
running as a system

338
00:13:02,320 --> 00:13:06,399
to authenticate on a malicious

339
00:13:06,399 --> 00:13:09,519
winram http server and this

340
00:13:09,519 --> 00:13:12,959
will result in a ntlm challenge response

341
00:13:12,959 --> 00:13:14,240
authentication

342
00:13:14,240 --> 00:13:15,920
and of course what we have done is

343
00:13:15,920 --> 00:13:18,639
implementing this http server that will

344
00:13:18,639 --> 00:13:19,360
perform

345
00:13:19,360 --> 00:13:22,320
this authentication over http and we are

346
00:13:22,320 --> 00:13:23,600
able to steal

347
00:13:23,600 --> 00:13:26,160
to grab and steal the system token what

348
00:13:26,160 --> 00:13:27,440
are the requirements

349
00:13:27,440 --> 00:13:29,760
of this technique is that the winner

350
00:13:29,760 --> 00:13:30,720
import

351
00:13:30,720 --> 00:13:34,320
that is the 5985 by default

352
00:13:34,320 --> 00:13:37,120
is available for listening and by

353
00:13:37,120 --> 00:13:37,920
default

354
00:13:37,920 --> 00:13:40,720
this technique is useful only on windows

355
00:13:40,720 --> 00:13:41,839
clients because

356
00:13:41,839 --> 00:13:43,600
as you may know on windows servers the

357
00:13:43,600 --> 00:13:45,360
winner ram service

358
00:13:45,360 --> 00:13:47,680
it's running by default but not only

359
00:13:47,680 --> 00:13:50,000
those clients

360
00:13:50,000 --> 00:13:53,519
how we recognized this strange behavior

361
00:13:53,519 --> 00:13:53,839
so

362
00:13:53,839 --> 00:13:55,760
let's start what is the strange behavior

363
00:13:55,760 --> 00:13:57,680
the street behavior is that

364
00:13:57,680 --> 00:14:01,040
every time you try to instantiate a bit

365
00:14:01,040 --> 00:14:04,240
object okay the bits object will

366
00:14:04,240 --> 00:14:07,360
perform an authentication to the winner

367
00:14:07,360 --> 00:14:10,000
import that is the 5985

368
00:14:10,000 --> 00:14:13,199
so if no one is listening on this port

369
00:14:13,199 --> 00:14:16,480
these will go to uh this big service

370
00:14:16,480 --> 00:14:17,199
will shout

371
00:14:17,199 --> 00:14:20,560
no one okay and what we have done

372
00:14:20,560 --> 00:14:24,000
is to just inspect what is uh receive

373
00:14:24,000 --> 00:14:24,720
what is

374
00:14:24,720 --> 00:14:26,560
what we receive on this port with a

375
00:14:26,560 --> 00:14:28,480
classic netcat uh

376
00:14:28,480 --> 00:14:32,160
listener and what we have observed

377
00:14:32,160 --> 00:14:35,519
is that we receive these authenticated

378
00:14:35,519 --> 00:14:37,199
privileged authenticated

379
00:14:37,199 --> 00:14:39,760
requests through http in the class in

380
00:14:39,760 --> 00:14:40,480
the classic

381
00:14:40,480 --> 00:14:43,519
negotiate adder of the http adder

382
00:14:43,519 --> 00:14:47,440
so our idea was what about if we

383
00:14:47,440 --> 00:14:50,000
try to authenticate this authentication

384
00:14:50,000 --> 00:14:51,440
so we perform the

385
00:14:51,440 --> 00:14:54,880
ntlm challenge response schema

386
00:14:54,880 --> 00:14:58,000
and we'll see what kind of token

387
00:14:58,000 --> 00:15:00,959
will give back will be given back by

388
00:15:00,959 --> 00:15:02,320
this service

389
00:15:02,320 --> 00:15:04,079
and this is what we have implemented

390
00:15:04,079 --> 00:15:05,920
here rogwinram

391
00:15:05,920 --> 00:15:08,959
is basically a minimal web server that

392
00:15:08,959 --> 00:15:09,680
perform

393
00:15:09,680 --> 00:15:13,040
ntl authentication over http

394
00:15:13,040 --> 00:15:16,399
uh here i'm showing a little

395
00:15:16,399 --> 00:15:18,720
picture in which on the left there is

396
00:15:18,720 --> 00:15:19,680
the dcom and

397
00:15:19,680 --> 00:15:22,480
in our case it's the bits object that is

398
00:15:22,480 --> 00:15:24,480
trying to authenticate to us

399
00:15:24,480 --> 00:15:26,160
and on the right that there is the

400
00:15:26,160 --> 00:15:27,920
server we

401
00:15:27,920 --> 00:15:31,120
the this server is run by our

402
00:15:31,120 --> 00:15:34,240
rogue winner so let's start on the first

403
00:15:34,240 --> 00:15:35,600
message that we received the first

404
00:15:35,600 --> 00:15:37,440
message we received it's the

405
00:15:37,440 --> 00:15:40,160
type one message the negotiate message

406
00:15:40,160 --> 00:15:40,560
and

407
00:15:40,560 --> 00:15:44,320
this message uh we receive this mesh

408
00:15:44,320 --> 00:15:46,639
message of course this message is base64

409
00:15:46,639 --> 00:15:48,480
encoded so we unpack this

410
00:15:48,480 --> 00:15:51,519
this message and we will use the

411
00:15:51,519 --> 00:15:54,800
api offered by windows in order to

412
00:15:54,800 --> 00:15:56,959
accept this security context and the

413
00:15:56,959 --> 00:15:59,279
code is called the accept secret context

414
00:15:59,279 --> 00:16:02,560
and magically this will perform

415
00:16:02,560 --> 00:16:06,560
some some rpc connection

416
00:16:06,560 --> 00:16:10,079
to us elsas will give back us the type 2

417
00:16:10,079 --> 00:16:10,959
message

418
00:16:10,959 --> 00:16:14,880
this type 2 message we just encode it in

419
00:16:14,880 --> 00:16:16,959
basic c4 and we send it back to the

420
00:16:16,959 --> 00:16:18,880
client like

421
00:16:18,880 --> 00:16:22,240
we just um are following the classic

422
00:16:22,240 --> 00:16:22,800
protocol

423
00:16:22,800 --> 00:16:26,320
ntlm okay and once we give back this

424
00:16:26,320 --> 00:16:27,279
type two message

425
00:16:27,279 --> 00:16:29,839
magically our decon will send back us

426
00:16:29,839 --> 00:16:31,199
the type three message

427
00:16:31,199 --> 00:16:35,360
that is the authenticate message and

428
00:16:35,360 --> 00:16:38,079
these once we receive this we can call

429
00:16:38,079 --> 00:16:38,639
again

430
00:16:38,639 --> 00:16:40,639
accept security context and magically

431
00:16:40,639 --> 00:16:42,720
assass will create in our process space

432
00:16:42,720 --> 00:16:44,720
the security context of system

433
00:16:44,720 --> 00:16:46,639
and once you have in your process space

434
00:16:46,639 --> 00:16:48,880
the security context of any user you can

435
00:16:48,880 --> 00:16:51,519
just query for the token of this context

436
00:16:51,519 --> 00:16:53,360
and of course it will result in what in

437
00:16:53,360 --> 00:16:56,000
a system token stealing

438
00:16:56,000 --> 00:16:58,480
this is a demo that i have drafted on

439
00:16:58,480 --> 00:16:59,680
the right

440
00:16:59,680 --> 00:17:02,880
i am i am the attacker of course and i'm

441
00:17:02,880 --> 00:17:04,799
preparing my listener to receive the

442
00:17:04,799 --> 00:17:07,039
connection of the privileged process so

443
00:17:07,039 --> 00:17:09,520
the process that will be run as a system

444
00:17:09,520 --> 00:17:11,839
on the left i have the attacker that has

445
00:17:11,839 --> 00:17:12,559
been able

446
00:17:12,559 --> 00:17:15,679
to compromise a service process that is

447
00:17:15,679 --> 00:17:17,199
running as local service

448
00:17:17,199 --> 00:17:20,480
the attacker check that the

449
00:17:20,480 --> 00:17:23,039
this service process holds the

450
00:17:23,039 --> 00:17:25,119
impersonation privileges

451
00:17:25,119 --> 00:17:27,439
and the attacker will run rogue winner m

452
00:17:27,439 --> 00:17:28,160
our with

453
00:17:28,160 --> 00:17:31,039
our exploit and we ask to run a

454
00:17:31,039 --> 00:17:32,480
privileged process to

455
00:17:32,480 --> 00:17:35,440
send rvs shell back on the localhost

456
00:17:35,440 --> 00:17:37,200
okay on the port that will be run

457
00:17:37,200 --> 00:17:40,559
the netcat listener and

458
00:17:40,559 --> 00:17:43,760
what will happen is that all the flow

459
00:17:43,760 --> 00:17:44,320
that i

460
00:17:44,320 --> 00:17:46,000
have explained in last slides will be

461
00:17:46,000 --> 00:17:47,919
performed by our tool by our

462
00:17:47,919 --> 00:17:51,440
winner and in the end winram

463
00:17:51,440 --> 00:17:54,480
will tell you okay i have created the

464
00:17:54,480 --> 00:17:55,039
system

465
00:17:55,039 --> 00:17:58,160
the system security context i am able to

466
00:17:58,160 --> 00:18:00,720
create a process with this token and

467
00:18:00,720 --> 00:18:02,160
magically

468
00:18:02,160 --> 00:18:04,880
our listener that is waiting for the

469
00:18:04,880 --> 00:18:06,640
privileged connection will finally

470
00:18:06,640 --> 00:18:07,919
receive the

471
00:18:07,919 --> 00:18:09,679
process running as a system and of

472
00:18:09,679 --> 00:18:11,120
course the attacker has achieved

473
00:18:11,120 --> 00:18:12,880
local privilege escalation with this

474
00:18:12,880 --> 00:18:14,320
technique

475
00:18:14,320 --> 00:18:17,360
let's jump on the next one next one is

476
00:18:17,360 --> 00:18:19,600
rook potato rock potato has been

477
00:18:19,600 --> 00:18:22,400
released on the 11th of may 2020

478
00:18:22,400 --> 00:18:25,520
outdoors andrea and myself brief

479
00:18:25,520 --> 00:18:27,360
description how it works

480
00:18:27,360 --> 00:18:30,080
briefly so we tricks the communication

481
00:18:30,080 --> 00:18:31,679
service in contacting

482
00:18:31,679 --> 00:18:35,039
a rogue oxide solver our under our

483
00:18:35,039 --> 00:18:36,080
control

484
00:18:36,080 --> 00:18:40,080
and these we have written some code in

485
00:18:40,080 --> 00:18:41,120
order to force

486
00:18:41,120 --> 00:18:43,760
rpcss that is the decom activator that

487
00:18:43,760 --> 00:18:44,480
is

488
00:18:44,480 --> 00:18:47,600
a very uh privileged process into

489
00:18:47,600 --> 00:18:48,720
writing

490
00:18:48,720 --> 00:18:51,360
to an a controlled enemy pipe and this

491
00:18:51,360 --> 00:18:53,360
will result in an authentication over an

492
00:18:53,360 --> 00:18:55,600
empty by network service

493
00:18:55,600 --> 00:18:57,679
account but this network service account

494
00:18:57,679 --> 00:19:00,320
we will see that is

495
00:19:00,320 --> 00:19:03,840
a reality is it has more privileges than

496
00:19:03,840 --> 00:19:06,480
what we should have and we are and we

497
00:19:06,480 --> 00:19:08,640
are able to abuse these privileges

498
00:19:08,640 --> 00:19:11,039
in this token and perform the token

499
00:19:11,039 --> 00:19:12,559
hidrampi technique to

500
00:19:12,559 --> 00:19:15,760
steal a system what are the requirements

501
00:19:15,760 --> 00:19:18,160
the requirements are that the machine

502
00:19:18,160 --> 00:19:20,240
the attacker machine can make a notebond

503
00:19:20,240 --> 00:19:22,000
connection port 135

504
00:19:22,000 --> 00:19:25,120
that is the oxide resolution that will

505
00:19:25,120 --> 00:19:26,000
be performed

506
00:19:26,000 --> 00:19:28,640
in a malicious way and of course smb

507
00:19:28,640 --> 00:19:31,840
running and decom running

508
00:19:32,160 --> 00:19:35,760
so let's split the attack flow of

509
00:19:35,760 --> 00:19:38,160
rogue potato in four main steps okay

510
00:19:38,160 --> 00:19:40,799
because the attack is quite

511
00:19:40,799 --> 00:19:43,840
it's quite articulated

512
00:19:43,840 --> 00:19:47,120
the first step step one we are

513
00:19:47,120 --> 00:19:49,600
trying to we are just tricking the dd

514
00:19:49,600 --> 00:19:50,640
connotations

515
00:19:50,640 --> 00:19:52,960
service by trigger the eye storage

516
00:19:52,960 --> 00:19:54,160
object

517
00:19:54,160 --> 00:19:57,520
what it means this

518
00:19:57,520 --> 00:19:59,760
is a discovery by james forshoe in a

519
00:19:59,760 --> 00:20:02,159
vulnerability in 2015

520
00:20:02,159 --> 00:20:04,559
in which he found a way to trick the

521
00:20:04,559 --> 00:20:05,919
decom activation service with

522
00:20:05,919 --> 00:20:09,280
a particularly with a particular martial

523
00:20:09,280 --> 00:20:10,000
ad object

524
00:20:10,000 --> 00:20:13,120
okay so how it works

525
00:20:13,120 --> 00:20:15,760
first we pick a class id to create an

526
00:20:15,760 --> 00:20:18,159
object activation request so a cli said

527
00:20:18,159 --> 00:20:21,360
is just an id to identify

528
00:20:21,360 --> 00:20:24,400
a class that will be implemented by an

529
00:20:24,400 --> 00:20:24,960
object

530
00:20:24,960 --> 00:20:29,039
okay and once you uh pick a clsd you are

531
00:20:29,039 --> 00:20:30,000
just telling

532
00:20:30,000 --> 00:20:33,039
the decom activator to impersonate the

533
00:20:33,039 --> 00:20:35,120
user configured for that class

534
00:20:35,120 --> 00:20:36,640
okay of course in our case we were

535
00:20:36,640 --> 00:20:39,120
interested in the clcd configured with

536
00:20:39,120 --> 00:20:40,320
the system user

537
00:20:40,320 --> 00:20:42,880
that is the most powerful on the system

538
00:20:42,880 --> 00:20:45,120
once the object is created

539
00:20:45,120 --> 00:20:47,360
we initialize it to a marshalled object

540
00:20:47,360 --> 00:20:48,480
so we just give

541
00:20:48,480 --> 00:20:52,159
some row stream bytes and of course

542
00:20:52,159 --> 00:20:56,240
this object will be it will inherits the

543
00:20:56,240 --> 00:20:58,240
properties of the eye storage object

544
00:20:58,240 --> 00:21:01,679
because this is a way to

545
00:21:01,679 --> 00:21:04,320
activate particular objects in the

546
00:21:04,320 --> 00:21:05,520
activator

547
00:21:05,520 --> 00:21:07,760
in the mastered object we are following

548
00:21:07,760 --> 00:21:08,720
a particular

549
00:21:08,720 --> 00:21:11,440
that is of course just a stream of bytes

550
00:21:11,440 --> 00:21:13,760
we are following a particular standard

551
00:21:13,760 --> 00:21:15,760
that is the object ref standard

552
00:21:15,760 --> 00:21:19,760
that it allows to specify particular

553
00:21:19,760 --> 00:21:20,559
headers

554
00:21:20,559 --> 00:21:23,200
of the of the bytes of this martial art

555
00:21:23,200 --> 00:21:24,000
object

556
00:21:24,000 --> 00:21:26,640
and in one of the other you can specify

557
00:21:26,640 --> 00:21:27,919
the ip

558
00:21:27,919 --> 00:21:30,880
over oxidase order and what we have done

559
00:21:30,880 --> 00:21:32,000
is to

560
00:21:32,000 --> 00:21:35,280
specify the ip of a remote machine that

561
00:21:35,280 --> 00:21:37,360
is all under our control and we will

562
00:21:37,360 --> 00:21:38,000
implement

563
00:21:38,000 --> 00:21:40,640
a multitude success over there so when

564
00:21:40,640 --> 00:21:41,679
the activator will

565
00:21:41,679 --> 00:21:44,880
mash up the object what it will happen

566
00:21:44,880 --> 00:21:45,679
is that

567
00:21:45,679 --> 00:21:48,240
the activator will say okay this object

568
00:21:48,240 --> 00:21:50,000
i need to query

569
00:21:50,000 --> 00:21:52,960
these oxidase over remotely because i'm

570
00:21:52,960 --> 00:21:54,000
not able

571
00:21:54,000 --> 00:21:57,520
to give the proper

572
00:21:57,520 --> 00:22:00,880
binding information of this object so

573
00:22:00,880 --> 00:22:04,159
this will trigger a oxide resolution

574
00:22:04,159 --> 00:22:07,840
to our malicious server

575
00:22:07,840 --> 00:22:11,039
step two is exactly what we have done to

576
00:22:11,039 --> 00:22:12,720
implement these malicious

577
00:22:12,720 --> 00:22:15,919
rogue this malicious oxy resolver

578
00:22:15,919 --> 00:22:19,039
so the oxy resolution

579
00:22:19,039 --> 00:22:21,360
is made through this call resolve

580
00:22:21,360 --> 00:22:22,880
oxytoco

581
00:22:22,880 --> 00:22:25,440
and what you have done is to implement

582
00:22:25,440 --> 00:22:26,000
this rpc

583
00:22:26,000 --> 00:22:28,480
server that is our rogue oxy resolver

584
00:22:28,480 --> 00:22:29,120
and

585
00:22:29,120 --> 00:22:32,720
we'll and we have written the code to

586
00:22:32,720 --> 00:22:35,039
give back to the client the victim

587
00:22:35,039 --> 00:22:36,320
client a

588
00:22:36,320 --> 00:22:40,240
poisoned answer so at first

589
00:22:40,240 --> 00:22:43,520
we listened for connection the port 135

590
00:22:43,520 --> 00:22:45,120
that is the default port used for the

591
00:22:45,120 --> 00:22:47,200
oxy resolution

592
00:22:47,200 --> 00:22:50,159
and we in order to uh not implement our

593
00:22:50,159 --> 00:22:52,080
oxidized orbital linux

594
00:22:52,080 --> 00:22:55,360
we have forwarded these uh

595
00:22:55,360 --> 00:22:57,120
resolution back to the windows machine

596
00:22:57,120 --> 00:22:58,960
that will run the auxiliary solder

597
00:22:58,960 --> 00:23:00,799
so at first we have run a network

598
00:23:00,799 --> 00:23:02,000
director

599
00:23:02,000 --> 00:23:04,240
and uh of course on the on the machine

600
00:23:04,240 --> 00:23:05,679
on the client we have

601
00:23:05,679 --> 00:23:08,240
implemented our robox resolute with the

602
00:23:08,240 --> 00:23:11,520
rpc runtime function that windows offer

603
00:23:11,520 --> 00:23:13,600
and we have written the code for the

604
00:23:13,600 --> 00:23:15,600
resolvoxy2 function

605
00:23:15,600 --> 00:23:17,600
what we have done in this poisson and as

606
00:23:17,600 --> 00:23:19,200
well at first

607
00:23:19,200 --> 00:23:22,480
we told the client to use rpc overnight

608
00:23:22,480 --> 00:23:22,960
pipe

609
00:23:22,960 --> 00:23:25,280
that of course will use smb as the

610
00:23:25,280 --> 00:23:26,080
transport

611
00:23:26,080 --> 00:23:29,840
protocol and the second thing

612
00:23:29,840 --> 00:23:32,960
is that we have you said apart

613
00:23:32,960 --> 00:23:35,679
validation bypass

614
00:23:35,679 --> 00:23:40,240
okay so in this way we are tricking the

615
00:23:40,240 --> 00:23:42,880
the client into contacting a mid-pipe

616
00:23:42,880 --> 00:23:43,520
that is

617
00:23:43,520 --> 00:23:46,000
non-accident this technique has been

618
00:23:46,000 --> 00:23:46,799
borrowed by

619
00:23:46,799 --> 00:23:49,120
uh clement la broad jonas in one of

620
00:23:49,120 --> 00:23:50,559
their technique called the prince

621
00:23:50,559 --> 00:23:52,159
whoever the prince buffer

622
00:23:52,159 --> 00:23:54,799
that i will show in the next slides so

623
00:23:54,799 --> 00:23:55,679
what we have done

624
00:23:55,679 --> 00:23:59,200
is to use a

625
00:23:59,200 --> 00:24:02,400
binding information we are using a

626
00:24:02,400 --> 00:24:05,360
slash and what they have found out is

627
00:24:05,360 --> 00:24:06,080
that

628
00:24:06,080 --> 00:24:09,200
using the slash in uh the ost name

629
00:24:09,200 --> 00:24:11,440
of the band information it will be

630
00:24:11,440 --> 00:24:13,279
converted in a prepend

631
00:24:13,279 --> 00:24:16,880
of the pad used for dynamic pipe

632
00:24:16,880 --> 00:24:19,440
so the activator our css instead of

633
00:24:19,440 --> 00:24:21,200
using the default limit pipe that is

634
00:24:21,200 --> 00:24:22,559
pipe ep mapper

635
00:24:22,559 --> 00:24:25,440
it will connect it will try to connect

636
00:24:25,440 --> 00:24:25,760
to

637
00:24:25,760 --> 00:24:28,720
anonymity existing limit pipe so pi pro

638
00:24:28,720 --> 00:24:30,640
potato pipe

639
00:24:30,640 --> 00:24:34,480
and these of course if no if someone can

640
00:24:34,480 --> 00:24:37,039
intercept this connection it could be

641
00:24:37,039 --> 00:24:39,120
impersonated

642
00:24:39,120 --> 00:24:42,320
and this is what we actually done so

643
00:24:42,320 --> 00:24:45,360
there is uh someone that is trying to

644
00:24:45,360 --> 00:24:46,720
connect when made pi

645
00:24:46,720 --> 00:24:50,240
nonexistent so we

646
00:24:50,240 --> 00:24:52,799
run a list on this number pipe and we

647
00:24:52,799 --> 00:24:55,760
try to impersonate this connection

648
00:24:55,760 --> 00:24:57,840
so how we realize that this function

649
00:24:57,840 --> 00:25:00,400
very simple we just

650
00:25:00,400 --> 00:25:03,600
used the windows function to

651
00:25:03,600 --> 00:25:07,120
run a named pipe server on a specific

652
00:25:07,120 --> 00:25:08,000
email pipe

653
00:25:08,000 --> 00:25:11,120
consider that every user can run an

654
00:25:11,120 --> 00:25:14,320
animated pipe on every pad but of course

655
00:25:14,320 --> 00:25:15,120
that pad

656
00:25:15,120 --> 00:25:18,080
not the bus must not be already busy

657
00:25:18,080 --> 00:25:19,919
okay in this case that was the case

658
00:25:19,919 --> 00:25:22,880
so this pipe was free and no one was

659
00:25:22,880 --> 00:25:24,320
listening on that

660
00:25:24,320 --> 00:25:27,600
so we have run this email pipe server

661
00:25:27,600 --> 00:25:30,159
and we weighted the connection from the

662
00:25:30,159 --> 00:25:32,400
privileged authentication and we call it

663
00:25:32,400 --> 00:25:34,080
impersonator pipe in order to

664
00:25:34,080 --> 00:25:35,440
impersonate the client

665
00:25:35,440 --> 00:25:40,400
this is something that is that is

666
00:25:40,400 --> 00:25:42,799
enabled that is available and it is

667
00:25:42,799 --> 00:25:43,520
allowed

668
00:25:43,520 --> 00:25:45,440
uh on the windows if you have in

669
00:25:45,440 --> 00:25:47,679
personal privileges of course

670
00:25:47,679 --> 00:25:50,559
so once we have done this we we thought

671
00:25:50,559 --> 00:25:51,120
okay

672
00:25:51,120 --> 00:25:53,520
let's investigate with the kind of

673
00:25:53,520 --> 00:25:56,880
permission we have in the token

674
00:25:56,880 --> 00:26:00,080
and of course what you have uh

675
00:26:00,080 --> 00:26:02,960
we've seen is that yes we got an

676
00:26:02,960 --> 00:26:05,840
authentication as network service

677
00:26:05,840 --> 00:26:08,559
we we expect an authentication system

678
00:26:08,559 --> 00:26:09,840
but in this case we got an

679
00:26:09,840 --> 00:26:11,520
authentication as a network service

680
00:26:11,520 --> 00:26:13,200
and the personalization level the token

681
00:26:13,200 --> 00:26:15,200
is impersonation so it could be useful

682
00:26:15,200 --> 00:26:16,159
for us

683
00:26:16,159 --> 00:26:18,080
for use this token because we could

684
00:26:18,080 --> 00:26:19,360
impersonate

685
00:26:19,360 --> 00:26:20,960
and achieve code execution with this

686
00:26:20,960 --> 00:26:23,039
user and

687
00:26:23,039 --> 00:26:26,799
the thing that we have advice at some

688
00:26:26,799 --> 00:26:30,960
moment later it's a very powerful thing

689
00:26:30,960 --> 00:26:34,080
we have seen that in this token yes it's

690
00:26:34,080 --> 00:26:35,679
a network service token

691
00:26:35,679 --> 00:26:38,400
but it contains a very powerful led that

692
00:26:38,400 --> 00:26:39,520
are the led of

693
00:26:39,520 --> 00:26:42,960
rpcss that is a very critical process

694
00:26:42,960 --> 00:26:46,000
and that was a nice surprise for us

695
00:26:46,000 --> 00:26:48,960
because with this the first thing that

696
00:26:48,960 --> 00:26:50,880
came in our mind is that okay

697
00:26:50,880 --> 00:26:53,200
we are able to open and grab still the

698
00:26:53,200 --> 00:26:54,720
token from rpcss

699
00:26:54,720 --> 00:26:58,480
that is bingo and the step four

700
00:26:58,480 --> 00:27:00,799
is exactly what we have done so we have

701
00:27:00,799 --> 00:27:02,640
we have

702
00:27:02,640 --> 00:27:06,240
we have all the requirements to steal

703
00:27:06,240 --> 00:27:08,640
this privilege token just let's just

704
00:27:08,640 --> 00:27:09,520
implement

705
00:27:09,520 --> 00:27:12,240
this technique that is called together

706
00:27:12,240 --> 00:27:13,279
in order to

707
00:27:13,279 --> 00:27:16,880
steal the system token this is the last

708
00:27:16,880 --> 00:27:17,520
ch

709
00:27:17,520 --> 00:27:20,240
chain the last step sorry of the chain

710
00:27:20,240 --> 00:27:20,880
and

711
00:27:20,880 --> 00:27:22,880
this is the token key drum technique

712
00:27:22,880 --> 00:27:24,000
that it's

713
00:27:24,000 --> 00:27:25,840
a quite well known technique and the

714
00:27:25,840 --> 00:27:27,520
first time has been discussed

715
00:27:27,520 --> 00:27:31,120
discussed by cesar ceruto in 2008

716
00:27:31,120 --> 00:27:34,240
and what it basically does

717
00:27:34,240 --> 00:27:37,360
it's that once you have the rights to

718
00:27:37,360 --> 00:27:38,159
open

719
00:27:38,159 --> 00:27:42,559
and duplicate remote remote process

720
00:27:42,559 --> 00:27:46,320
you can get all the handles of this

721
00:27:46,320 --> 00:27:48,080
process in this case we were interested

722
00:27:48,080 --> 00:27:48,480
in the

723
00:27:48,480 --> 00:27:51,760
process id of rpcss and

724
00:27:51,760 --> 00:27:53,279
what you have done is opening the

725
00:27:53,279 --> 00:27:55,120
process list all the handles

726
00:27:55,120 --> 00:27:57,760
for each handle try to duplicate it and

727
00:27:57,760 --> 00:27:59,760
get the handle type

728
00:27:59,760 --> 00:28:02,240
and if the handle type is the token and

729
00:28:02,240 --> 00:28:04,080
owner of this token system

730
00:28:04,080 --> 00:28:07,360
it mostly represents a system token

731
00:28:07,360 --> 00:28:10,559
so we try to impersonate it and launch

732
00:28:10,559 --> 00:28:12,559
launch a process with this token with

733
00:28:12,559 --> 00:28:14,320
one of two api calls

734
00:28:14,320 --> 00:28:17,520
that windows offer and of course in the

735
00:28:17,520 --> 00:28:19,520
end what we have it's our process that

736
00:28:19,520 --> 00:28:20,960
will be run with this

737
00:28:20,960 --> 00:28:22,880
very powerful and privileged system

738
00:28:22,880 --> 00:28:25,120
token

739
00:28:25,120 --> 00:28:27,840
this is a demo that we have drafted so

740
00:28:27,840 --> 00:28:30,000
what we have here we have on the right

741
00:28:30,000 --> 00:28:33,039
the attacker and the attacker is the

742
00:28:33,039 --> 00:28:35,760
machine team zero zero six

743
00:28:35,760 --> 00:28:38,399
and on the left sorry it's the ten zero

744
00:28:38,399 --> 00:28:39,600
zero thread attacker and

745
00:28:39,600 --> 00:28:41,279
on the left we have the attacker that is

746
00:28:41,279 --> 00:28:43,360
connected on a web shell

747
00:28:43,360 --> 00:28:45,919
that is he has been able to upload on

748
00:28:45,919 --> 00:28:49,600
this web server and that is the 1006.

749
00:28:49,600 --> 00:28:51,679
so the attacker in this case has been

750
00:28:51,679 --> 00:28:52,799
able to

751
00:28:52,799 --> 00:28:55,600
upload a web shell on this iis web

752
00:28:55,600 --> 00:28:56,559
server

753
00:28:56,559 --> 00:28:58,880
for example you could have achieved a

754
00:28:58,880 --> 00:29:00,799
exploitation a remote code execution or

755
00:29:00,799 --> 00:29:02,399
a sql injection by

756
00:29:02,399 --> 00:29:05,760
writing a web shell and the first thing

757
00:29:05,760 --> 00:29:06,240
he

758
00:29:06,240 --> 00:29:09,279
wanted to achieve is what is to

759
00:29:09,279 --> 00:29:12,480
run code not with the application pool

760
00:29:12,480 --> 00:29:14,960
but with the maximum privileges on the

761
00:29:14,960 --> 00:29:17,279
system that is the system account

762
00:29:17,279 --> 00:29:20,640
so it runs the root potato at first

763
00:29:20,640 --> 00:29:23,919
oh sorry it first of course it runs the

764
00:29:23,919 --> 00:29:26,159
net cut listener okay so this listener

765
00:29:26,159 --> 00:29:27,919
will receive the privileged process

766
00:29:27,919 --> 00:29:29,600
running the system

767
00:29:29,600 --> 00:29:32,240
then it run the redirector in order to

768
00:29:32,240 --> 00:29:33,440
forward the malicious

769
00:29:33,440 --> 00:29:35,279
oxy resolution back to the windows

770
00:29:35,279 --> 00:29:36,720
machine that will run the rogue

771
00:29:36,720 --> 00:29:41,120
auxiliary so the rpc server it checks

772
00:29:41,120 --> 00:29:43,679
the actual privileges of this web shell

773
00:29:43,679 --> 00:29:44,159
and

774
00:29:44,159 --> 00:29:46,480
this is configured with the default

775
00:29:46,480 --> 00:29:48,720
configuration of is with the default

776
00:29:48,720 --> 00:29:49,360
pool

777
00:29:49,360 --> 00:29:52,559
and this configuration will give this

778
00:29:52,559 --> 00:29:54,640
account impersonation privileges this is

779
00:29:54,640 --> 00:29:56,320
the actual default configuration of

780
00:29:56,320 --> 00:29:57,360
every is

781
00:29:57,360 --> 00:29:59,919
web server and then the attacker run rug

782
00:29:59,919 --> 00:30:00,799
potato

783
00:30:00,799 --> 00:30:03,360
and uh tell to look potato to run a

784
00:30:03,360 --> 00:30:04,159
process

785
00:30:04,159 --> 00:30:06,159
with the rubber shell with netcat for

786
00:30:06,159 --> 00:30:07,760
example

787
00:30:07,760 --> 00:30:10,480
so potato will start this magic it will

788
00:30:10,480 --> 00:30:10,799
start

789
00:30:10,799 --> 00:30:13,039
all the threads that will implement what

790
00:30:13,039 --> 00:30:14,720
all these steps that they have just

791
00:30:14,720 --> 00:30:17,520
shown in the latest slides

792
00:30:17,520 --> 00:30:20,640
so the first step will trigger

793
00:30:20,640 --> 00:30:22,159
and trick to the economic division

794
00:30:22,159 --> 00:30:24,080
service so

795
00:30:24,080 --> 00:30:27,600
we use we pick an arbitrary cls id in

796
00:30:27,600 --> 00:30:28,240
this case

797
00:30:28,240 --> 00:30:31,600
we use bits okay that is our favorite

798
00:30:31,600 --> 00:30:33,760
target for this kind of attack

799
00:30:33,760 --> 00:30:36,000
and what it will happen that of course

800
00:30:36,000 --> 00:30:37,039
we will send

801
00:30:37,039 --> 00:30:38,960
the martial art object the row stream

802
00:30:38,960 --> 00:30:41,520
bytes of using object standard

803
00:30:41,520 --> 00:30:45,279
and once the activator will a marshal

804
00:30:45,279 --> 00:30:49,120
this object it will find the ip

805
00:30:49,120 --> 00:30:52,559
of our linux linux machine and it will

806
00:30:52,559 --> 00:30:53,679
try to

807
00:30:53,679 --> 00:30:56,880
make a not bound resolve oxide oxy

808
00:30:56,880 --> 00:30:57,840
resolution

809
00:30:57,840 --> 00:31:00,720
to our linux machine of course as we

810
00:31:00,720 --> 00:31:01,519
said we

811
00:31:01,519 --> 00:31:04,720
forward back this resolution to the rpc

812
00:31:04,720 --> 00:31:05,279
server

813
00:31:05,279 --> 00:31:07,840
running locally on the target machine on

814
00:31:07,840 --> 00:31:09,760
the victim machine

815
00:31:09,760 --> 00:31:11,440
and on the victim machine we have the

816
00:31:11,440 --> 00:31:13,440
thread that is

817
00:31:13,440 --> 00:31:16,880
getting these

818
00:31:16,880 --> 00:31:18,559
oxy resolution this malicious oxy

819
00:31:18,559 --> 00:31:19,919
resolution and

820
00:31:19,919 --> 00:31:23,120
it will as well with the poison end uh

821
00:31:23,120 --> 00:31:23,919
with the poison

822
00:31:23,919 --> 00:31:27,120
as well so in this way we tell to

823
00:31:27,120 --> 00:31:30,480
go to connect to our malicious mid pipe

824
00:31:30,480 --> 00:31:31,200
that is pipe

825
00:31:31,200 --> 00:31:35,039
potato pipe epi map and then

826
00:31:35,039 --> 00:31:37,200
we got triggered the step three the step

827
00:31:37,200 --> 00:31:38,799
three it's exactly

828
00:31:38,799 --> 00:31:41,679
our activator that is connecting to our

829
00:31:41,679 --> 00:31:42,880
net pipe

830
00:31:42,880 --> 00:31:44,960
and this thread will impersonate this

831
00:31:44,960 --> 00:31:46,000
connection

832
00:31:46,000 --> 00:31:49,519
and we'll just perform the token kidnap

833
00:31:49,519 --> 00:31:50,480
technique

834
00:31:50,480 --> 00:31:52,320
and the token kidnapping technique is

835
00:31:52,320 --> 00:31:54,000
telling us the step four

836
00:31:54,000 --> 00:31:57,039
okay i was able to grab and steal the

837
00:31:57,039 --> 00:31:58,799
token from the process space

838
00:31:58,799 --> 00:32:01,840
of our css and

839
00:32:01,840 --> 00:32:04,720
then it create a project with this token

840
00:32:04,720 --> 00:32:06,559
and in the end what we have is that the

841
00:32:06,559 --> 00:32:07,679
attacker

842
00:32:07,679 --> 00:32:09,679
has been able to achieve local

843
00:32:09,679 --> 00:32:12,159
pre-escalation with the system account

844
00:32:12,159 --> 00:32:15,360
in this way with this technique just a

845
00:32:15,360 --> 00:32:16,000
note or

846
00:32:16,000 --> 00:32:18,559
potato rook potato is very powerful

847
00:32:18,559 --> 00:32:19,919
because it works

848
00:32:19,919 --> 00:32:22,640
by default on every windows client and

849
00:32:22,640 --> 00:32:23,600
server

850
00:32:23,600 --> 00:32:28,080
installation then we have juicy two

851
00:32:28,080 --> 00:32:31,679
released on 13th of may 2020 by andrea

852
00:32:31,679 --> 00:32:35,440
and me myself how it was it

853
00:32:35,440 --> 00:32:37,600
all it works very similarly to rock

854
00:32:37,600 --> 00:32:39,279
potato but in this case

855
00:32:39,279 --> 00:32:42,799
we use rpc over tcp instead of rpco

856
00:32:42,799 --> 00:32:45,039
varnamet pipe

857
00:32:45,039 --> 00:32:46,320
what are the requirements of this

858
00:32:46,320 --> 00:32:48,399
technique that of course machine must

859
00:32:48,399 --> 00:32:52,399
make a network connection to port 135

860
00:32:52,399 --> 00:32:55,120
decom running and by default these

861
00:32:55,120 --> 00:32:55,840
affects

862
00:32:55,840 --> 00:32:58,399
only windows clients no windows servers

863
00:32:58,399 --> 00:33:01,919
and i will show in some moments why

864
00:33:01,919 --> 00:33:04,720
so as i said gc2 it's very similar to

865
00:33:04,720 --> 00:33:05,840
rook potato

866
00:33:05,840 --> 00:33:09,279
so instead of using rpc over tcp

867
00:33:09,279 --> 00:33:12,640
over named pi we are using rpg over tcp

868
00:33:12,640 --> 00:33:15,440
so we are changing the variable of the

869
00:33:15,440 --> 00:33:17,760
reso boxes to call

870
00:33:17,760 --> 00:33:20,880
and of course gc2 is juicy potato

871
00:33:20,880 --> 00:33:21,840
reloaded

872
00:33:21,840 --> 00:33:24,799
and that it works on latest updated

873
00:33:24,799 --> 00:33:26,320
windows systems

874
00:33:26,320 --> 00:33:29,440
consider that when uh juicy potato still

875
00:33:29,440 --> 00:33:30,080
works

876
00:33:30,080 --> 00:33:32,799
on older windows installation like the

877
00:33:32,799 --> 00:33:34,360
one before

878
00:33:34,360 --> 00:33:37,200
2011 so sorry

879
00:33:37,200 --> 00:33:41,120
1803 okay so you are able still to use

880
00:33:41,120 --> 00:33:42,799
uc body on those servers on those

881
00:33:42,799 --> 00:33:43,440
machines

882
00:33:43,440 --> 00:33:45,519
but for servers that are above these

883
00:33:45,519 --> 00:33:47,760
versions you can use these or the others

884
00:33:47,760 --> 00:33:49,919
technique

885
00:33:49,919 --> 00:33:51,519
so what did change of course it's the

886
00:33:51,519 --> 00:33:53,279
step three or four it's

887
00:33:53,279 --> 00:33:57,600
different in this resolve oxy2

888
00:33:57,600 --> 00:34:00,960
we tell okay do not use anymore named pi

889
00:34:00,960 --> 00:34:01,519
but you

890
00:34:01,519 --> 00:34:05,039
use rpc over tcp in this case

891
00:34:05,039 --> 00:34:07,519
in the square brackets you have to

892
00:34:07,519 --> 00:34:08,719
specify

893
00:34:08,719 --> 00:34:11,280
not anymore the pad of animate pipe but

894
00:34:11,280 --> 00:34:12,639
you need to specify

895
00:34:12,639 --> 00:34:14,960
the tcp port that will be used by the

896
00:34:14,960 --> 00:34:17,679
rpc server

897
00:34:17,679 --> 00:34:20,719
and of course we are returning 999 and

898
00:34:20,719 --> 00:34:21,520
on this

899
00:34:21,520 --> 00:34:25,199
port tcp port we are running an rpc

900
00:34:25,199 --> 00:34:27,599
server that must implement the ira m2

901
00:34:27,599 --> 00:34:29,280
unknown interface

902
00:34:29,280 --> 00:34:32,719
and in this server in this rpc server we

903
00:34:32,719 --> 00:34:34,159
will impersonate

904
00:34:34,159 --> 00:34:36,239
the authentication the security bar in

905
00:34:36,239 --> 00:34:38,320
the security callback of the rpc server

906
00:34:38,320 --> 00:34:40,480
and we will perform values of the

907
00:34:40,480 --> 00:34:42,719
malicious or at least we will run an

908
00:34:42,719 --> 00:34:45,199
arbitrary process

909
00:34:45,199 --> 00:34:50,319
of system in this security callback

910
00:34:51,119 --> 00:34:53,119
why there is so many limitations with

911
00:34:53,119 --> 00:34:54,879
this technique because

912
00:34:54,879 --> 00:34:57,040
what we have found out is that most of

913
00:34:57,040 --> 00:34:59,200
the cls ids that we were using

914
00:34:59,200 --> 00:35:02,800
were tans and an identification token

915
00:35:02,800 --> 00:35:06,880
that if you don't know every token in

916
00:35:06,880 --> 00:35:08,000
windows

917
00:35:08,000 --> 00:35:11,119
it's not usable for achieving code

918
00:35:11,119 --> 00:35:11,839
execution

919
00:35:11,839 --> 00:35:13,920
okay there are different levels of the

920
00:35:13,920 --> 00:35:15,200
token you have

921
00:35:15,200 --> 00:35:17,280
delegation token impersonation token

922
00:35:17,280 --> 00:35:18,960
identification token and another

923
00:35:18,960 --> 00:35:21,520
anonymous token the impersonation

924
00:35:21,520 --> 00:35:22,560
delegation token

925
00:35:22,560 --> 00:35:25,359
allows you to impersonate this token and

926
00:35:25,359 --> 00:35:27,440
perform operation on the alpha that user

927
00:35:27,440 --> 00:35:28,960
identification token

928
00:35:28,960 --> 00:35:31,599
it does not allow it it does not allow

929
00:35:31,599 --> 00:35:32,240
it

930
00:35:32,240 --> 00:35:34,480
it just allowed to perform limited

931
00:35:34,480 --> 00:35:36,079
operation on the

932
00:35:36,079 --> 00:35:38,400
uh seeds inside the token okay for

933
00:35:38,400 --> 00:35:40,320
example querying the groups et cetera et

934
00:35:40,320 --> 00:35:41,359
cetera

935
00:35:41,359 --> 00:35:43,280
why this bible happened because by

936
00:35:43,280 --> 00:35:44,880
default

937
00:35:44,880 --> 00:35:47,599
on rpc are defined the security cost

938
00:35:47,599 --> 00:35:48,640
that is this tract

939
00:35:48,640 --> 00:35:51,200
that you see here and one of the field

940
00:35:51,200 --> 00:35:52,640
of this track is

941
00:35:52,640 --> 00:35:54,640
it can say it contains the impersonation

942
00:35:54,640 --> 00:35:56,000
impersonation type

943
00:35:56,000 --> 00:35:59,359
constant and this constant is set

944
00:35:59,359 --> 00:36:03,040
by default to it's a variable

945
00:36:03,040 --> 00:36:05,200
it's a variable but it will hold one of

946
00:36:05,200 --> 00:36:07,200
the known constants for rpc

947
00:36:07,200 --> 00:36:10,480
in pesticide and by default this

948
00:36:10,480 --> 00:36:14,079
value is set to identification so every

949
00:36:14,079 --> 00:36:16,560
authentication is downgraded to an

950
00:36:16,560 --> 00:36:18,320
identification token

951
00:36:18,320 --> 00:36:22,000
but what we have found out is that

952
00:36:22,000 --> 00:36:24,160
it can be possible to override this

953
00:36:24,160 --> 00:36:25,280
behavior

954
00:36:25,280 --> 00:36:27,359
so you can do this at code level for

955
00:36:27,359 --> 00:36:29,280
example by calling call initialize

956
00:36:29,280 --> 00:36:30,240
security

957
00:36:30,240 --> 00:36:33,200
or you can do it by the uh with a

958
00:36:33,200 --> 00:36:34,560
particular registry key

959
00:36:34,560 --> 00:36:37,119
that is the one that i'm showing it at

960
00:36:37,119 --> 00:36:38,720
reborn

961
00:36:38,720 --> 00:36:40,880
so what we have done is just okay let's

962
00:36:40,880 --> 00:36:42,400
enumerate if there are

963
00:36:42,400 --> 00:36:45,680
some class id that could be useful for

964
00:36:45,680 --> 00:36:45,920
us

965
00:36:45,920 --> 00:36:48,240
that will give us back an impersonation

966
00:36:48,240 --> 00:36:49,599
token instead of an

967
00:36:49,599 --> 00:36:53,119
identification and this is the result

968
00:36:53,119 --> 00:36:56,160
as you can see there are some uh

969
00:36:56,160 --> 00:36:58,640
clsd that instead of returning

970
00:36:58,640 --> 00:36:59,599
identification

971
00:36:59,599 --> 00:37:01,760
level token it returns impersonation

972
00:37:01,760 --> 00:37:03,280
level token

973
00:37:03,280 --> 00:37:07,599
and what we have found out is that

974
00:37:07,599 --> 00:37:10,320
some cld were impersonating the another

975
00:37:10,320 --> 00:37:12,320
user that was the user logged on in

976
00:37:12,320 --> 00:37:13,760
another session

977
00:37:13,760 --> 00:37:16,800
and this was a crucial for us

978
00:37:16,800 --> 00:37:19,040
for the chapter that will be shown by

979
00:37:19,040 --> 00:37:20,240
andrea in the next slide

980
00:37:20,240 --> 00:37:21,680
the really important authentication

981
00:37:21,680 --> 00:37:24,880
because this was one of the

982
00:37:24,880 --> 00:37:27,200
things that helped us to get rid of the

983
00:37:27,200 --> 00:37:28,800
impersonation of trilogies but

984
00:37:28,800 --> 00:37:31,760
let's get back to gc2 one of these you

985
00:37:31,760 --> 00:37:33,119
as you can see

986
00:37:33,119 --> 00:37:34,960
two of these are run as a system so

987
00:37:34,960 --> 00:37:38,480
 get back to us

988
00:37:38,480 --> 00:37:42,079
token system system token and one of it

989
00:37:42,079 --> 00:37:45,440
was a default service that is installed

990
00:37:45,440 --> 00:37:47,440
on windows clients okay that is the

991
00:37:47,440 --> 00:37:49,359
activex installer service

992
00:37:49,359 --> 00:37:51,839
so if you use this lsd and you perform

993
00:37:51,839 --> 00:37:54,400
all of these

994
00:37:54,400 --> 00:37:56,400
operations that are shown you are able

995
00:37:56,400 --> 00:37:58,960
to achieve previous escalation this way

996
00:37:58,960 --> 00:38:02,079
unfortunately this clsd is not

997
00:38:02,079 --> 00:38:03,440
available on the windows service

998
00:38:03,440 --> 00:38:05,839
installation so this technique

999
00:38:05,839 --> 00:38:10,480
is available only on windows clients

1000
00:38:10,480 --> 00:38:12,560
then there are other non-potential

1001
00:38:12,560 --> 00:38:13,520
technique

1002
00:38:13,520 --> 00:38:15,520
i just want to mention that those

1003
00:38:15,520 --> 00:38:16,560
techniques are

1004
00:38:16,560 --> 00:38:18,320
those techniques are we are not because

1005
00:38:18,320 --> 00:38:20,320
are less important or less powerful but

1006
00:38:20,320 --> 00:38:21,599
just because

1007
00:38:21,599 --> 00:38:23,839
for the name you know that these are

1008
00:38:23,839 --> 00:38:25,520
non-potential techniques

1009
00:38:25,520 --> 00:38:27,680
so the first one is the network service

1010
00:38:27,680 --> 00:38:29,440
impersonation that has been discovered

1011
00:38:29,440 --> 00:38:31,119
on 25th of april

1012
00:38:31,119 --> 00:38:34,160
2010 20 by james forshore

1013
00:38:34,160 --> 00:38:37,119
it discussed it in this blog post

1014
00:38:37,119 --> 00:38:38,640
sharing a local session a little too

1015
00:38:38,640 --> 00:38:39,520
much

1016
00:38:39,520 --> 00:38:42,800
and basically he found out that there is

1017
00:38:42,800 --> 00:38:45,920
an optimization that is performed by

1018
00:38:45,920 --> 00:38:47,520
assassins internally

1019
00:38:47,520 --> 00:38:50,720
that could be exploited so what you have

1020
00:38:50,720 --> 00:38:53,040
is found out is that if you can trick

1021
00:38:53,040 --> 00:38:54,720
network service account

1022
00:38:54,720 --> 00:38:56,880
to write to perform a loopback

1023
00:38:56,880 --> 00:38:58,079
authentication over an

1024
00:38:58,079 --> 00:39:01,760
it pipe you will find and of course you

1025
00:39:01,760 --> 00:39:02,000
are

1026
00:39:02,000 --> 00:39:03,599
you need to be able to impersonate this

1027
00:39:03,599 --> 00:39:05,440
authentication you will found

1028
00:39:05,440 --> 00:39:08,079
that yes this token is still of yourself

1029
00:39:08,079 --> 00:39:09,280
not a service

1030
00:39:09,280 --> 00:39:12,320
but inside it will be it will contains a

1031
00:39:12,320 --> 00:39:13,599
very powerful led

1032
00:39:13,599 --> 00:39:16,800
so the powerful led that

1033
00:39:16,800 --> 00:39:19,760
this lead is the rpcs sled that can

1034
00:39:19,760 --> 00:39:21,920
allow you to steal

1035
00:39:21,920 --> 00:39:24,640
the token from rpcss that contains a

1036
00:39:24,640 --> 00:39:26,560
pile of treasures for example the system

1037
00:39:26,560 --> 00:39:27,440
token

1038
00:39:27,440 --> 00:39:30,000
and this is also something that you have

1039
00:39:30,000 --> 00:39:32,320
used with rogue potato if you remember

1040
00:39:32,320 --> 00:39:34,800
i told i talked about the token dropping

1041
00:39:34,800 --> 00:39:36,560
technique to steal the

1042
00:39:36,560 --> 00:39:40,000
token from rpcss

1043
00:39:40,000 --> 00:39:43,280
then we have prince to may 2nd of

1044
00:39:43,280 --> 00:39:45,040
may 2020

1045
00:39:45,040 --> 00:39:48,480
uh discovered by clement labro and jonas

1046
00:39:48,480 --> 00:39:52,320
and basically they found a vulnerable

1047
00:39:52,320 --> 00:39:54,800
exposure rpg interface that is part of

1048
00:39:54,800 --> 00:39:56,960
the principler service

1049
00:39:56,960 --> 00:39:59,520
and the view said the pad validation

1050
00:39:59,520 --> 00:40:00,800
bypass

1051
00:40:00,800 --> 00:40:03,839
bug and they

1052
00:40:03,839 --> 00:40:06,800
tricked this privileged process a

1053
00:40:06,800 --> 00:40:09,040
privileged service principle or service

1054
00:40:09,040 --> 00:40:13,200
into writing on control and embed pipe

1055
00:40:13,200 --> 00:40:16,800
of the attacker and of course once this

1056
00:40:16,800 --> 00:40:20,319
connection to the named pipe occurs the

1057
00:40:20,319 --> 00:40:22,240
in person this authentication will steal

1058
00:40:22,240 --> 00:40:25,839
the token

1059
00:40:26,240 --> 00:40:28,319
at the bottom i have left i have been

1060
00:40:28,319 --> 00:40:30,400
very quick on these techniques because

1061
00:40:30,400 --> 00:40:32,480
the scope of this talk was more on the

1062
00:40:32,480 --> 00:40:33,760
potions technique

1063
00:40:33,760 --> 00:40:36,800
but i strongly recommend that you read

1064
00:40:36,800 --> 00:40:39,359
this blog post by them that they left at

1065
00:40:39,359 --> 00:40:41,359
the bottom

1066
00:40:41,359 --> 00:40:43,520
so now it's the chapter of rallying

1067
00:40:43,520 --> 00:40:44,720
potential authentication

1068
00:40:44,720 --> 00:40:48,319
and i will pass the ball to andrea

1069
00:40:48,319 --> 00:40:51,440
okay thank you antonio

1070
00:40:51,440 --> 00:40:53,680
i hope you agree that it was a really

1071
00:40:53,680 --> 00:40:55,280
great overview

1072
00:40:55,280 --> 00:40:58,880
so um so far um what we saw is um

1073
00:40:58,880 --> 00:41:00,880
that we always intercepted the

1074
00:41:00,880 --> 00:41:02,480
mediterranean authentication

1075
00:41:02,480 --> 00:41:04,319
trying to steal a token and

1076
00:41:04,319 --> 00:41:06,400
impersonating it

1077
00:41:06,400 --> 00:41:09,839
what we told you at the beginnings

1078
00:41:09,839 --> 00:41:12,880
is was is there a different way to abuse

1079
00:41:12,880 --> 00:41:14,800
these authentications and this is what

1080
00:41:14,800 --> 00:41:15,200
we

1081
00:41:15,200 --> 00:41:18,720
will see in the last chapter

1082
00:41:18,720 --> 00:41:22,160
oh i have always problems

1083
00:41:24,240 --> 00:41:27,680
can you skip antonio okay

1084
00:41:27,680 --> 00:41:31,200
okay what was our basic idea so um

1085
00:41:31,200 --> 00:41:34,960
what if we relay our rpc authentication

1086
00:41:34,960 --> 00:41:36,800
triggered by our famous

1087
00:41:36,800 --> 00:41:39,599
potato exploit instead of impersonating

1088
00:41:39,599 --> 00:41:41,920
because if this is possible

1089
00:41:41,920 --> 00:41:44,720
we can get rid of impersonation

1090
00:41:44,720 --> 00:41:45,440
privileges

1091
00:41:45,440 --> 00:41:47,839
and the standard user can escalate

1092
00:41:47,839 --> 00:41:48,720
privileges

1093
00:41:48,720 --> 00:41:52,560
okay but the first problem is that we

1094
00:41:52,560 --> 00:41:54,480
have to find a suitable authentication

1095
00:41:54,480 --> 00:41:56,000
because as you could see

1096
00:41:56,000 --> 00:41:58,240
most of the authentication taking place

1097
00:41:58,240 --> 00:41:59,760
in our potato techniques

1098
00:41:59,760 --> 00:42:02,960
were authentication performed by uh

1099
00:42:02,960 --> 00:42:05,440
service account system accounts and so

1100
00:42:05,440 --> 00:42:06,079
on

1101
00:42:06,079 --> 00:42:08,400
these accounts are not so useful if we

1102
00:42:08,400 --> 00:42:10,240
want to relay the authentication

1103
00:42:10,240 --> 00:42:13,680
to another host and another protocol but

1104
00:42:13,680 --> 00:42:16,480
and antonio already mentioned this we

1105
00:42:16,480 --> 00:42:18,560
also saw that there are some particular

1106
00:42:18,560 --> 00:42:22,000
cls ids that if they are um activated

1107
00:42:22,000 --> 00:42:24,560
from session zero zero they will trigger

1108
00:42:24,560 --> 00:42:25,920
the authentication

1109
00:42:25,920 --> 00:42:28,240
of the first user connected to an

1110
00:42:28,240 --> 00:42:30,079
interactive session

1111
00:42:30,079 --> 00:42:33,280
so imagine that if you have a shell as a

1112
00:42:33,280 --> 00:42:36,079
standard user in a session zero

1113
00:42:36,079 --> 00:42:38,560
and the domain admin is logged in the

1114
00:42:38,560 --> 00:42:40,240
remote desktop for example

1115
00:42:40,240 --> 00:42:43,040
you can trigger the authentication of

1116
00:42:43,040 --> 00:42:44,480
the domain i mean which is

1117
00:42:44,480 --> 00:42:49,520
very cool okay next like this

1118
00:42:55,119 --> 00:42:58,560
sorry okay i will try to

1119
00:42:58,560 --> 00:43:01,920
skip the slides now okay so

1120
00:43:01,920 --> 00:43:05,520
antialmer lane um in the recent years

1121
00:43:05,520 --> 00:43:07,440
most of the received researches and

1122
00:43:07,440 --> 00:43:09,520
subsequent mitigations about ntlm

1123
00:43:09,520 --> 00:43:10,240
relaying

1124
00:43:10,240 --> 00:43:13,440
were on protocols such as mdhttp and so

1125
00:43:13,440 --> 00:43:14,400
on

1126
00:43:14,400 --> 00:43:16,640
there is not so much documentation about

1127
00:43:16,640 --> 00:43:17,680
rpc

1128
00:43:17,680 --> 00:43:21,119
and especially when we have

1129
00:43:21,119 --> 00:43:24,079
as in our scenario and we have to relay

1130
00:43:24,079 --> 00:43:24,640
um

1131
00:43:24,640 --> 00:43:27,520
the authentication from an rpc client

1132
00:43:27,520 --> 00:43:28,160
okay

1133
00:43:28,160 --> 00:43:31,119
and what we did is first of all is it

1134
00:43:31,119 --> 00:43:32,880
possible to relay the authentication

1135
00:43:32,880 --> 00:43:34,319
from that receipt line to other

1136
00:43:34,319 --> 00:43:37,359
protocols that's http and up and smd

1137
00:43:37,359 --> 00:43:40,720
we did some tests in our lab and

1138
00:43:40,720 --> 00:43:43,359
and it worked so that was a good

1139
00:43:43,359 --> 00:43:45,359
starting point for us

1140
00:43:45,359 --> 00:43:47,680
it worked with some limitation first of

1141
00:43:47,680 --> 00:43:49,760
all um the client call

1142
00:43:49,760 --> 00:43:51,839
has to set the authentication level

1143
00:43:51,839 --> 00:43:53,920
connect the authentication level to

1144
00:43:53,920 --> 00:43:54,720
connect

1145
00:43:54,720 --> 00:43:58,400
which is a very basic and most unsecure

1146
00:43:58,400 --> 00:44:01,119
let's say unsecured identification level

1147
00:44:01,119 --> 00:44:02,880
and then we have to

1148
00:44:02,880 --> 00:44:06,400
bypass bypass or taking consideration

1149
00:44:06,400 --> 00:44:07,599
the anti-land

1150
00:44:07,599 --> 00:44:10,240
mitigation for relaying such as signing

1151
00:44:10,240 --> 00:44:12,800
message integrity checks and so on

1152
00:44:12,800 --> 00:44:15,920
so this is what's the challenge and in

1153
00:44:15,920 --> 00:44:16,400
our

1154
00:44:16,400 --> 00:44:18,960
scenario in our potato scenario too

1155
00:44:18,960 --> 00:44:20,640
interesting of the mtm authentication

1156
00:44:20,640 --> 00:44:22,400
took place the oxy resolution

1157
00:44:22,400 --> 00:44:25,520
and the iran unknown interface code so

1158
00:44:25,520 --> 00:44:26,480
let's see

1159
00:44:26,480 --> 00:44:30,400
these two authentication more in detail

1160
00:44:30,480 --> 00:44:33,280
okay it worked

1161
00:44:34,240 --> 00:44:38,560
so um if we trigger an activation

1162
00:44:38,560 --> 00:44:41,440
of with one of this particular cls id

1163
00:44:41,440 --> 00:44:42,720
which i repeat

1164
00:44:42,720 --> 00:44:46,000
in person in the current user the client

1165
00:44:46,000 --> 00:44:48,400
will perform an authenticated opposite

1166
00:44:48,400 --> 00:44:51,520
resolution request

1167
00:44:51,520 --> 00:44:54,560
if we capture this traffic for example

1168
00:44:54,560 --> 00:44:57,040
with a wireshark we can see that the

1169
00:44:57,040 --> 00:45:00,560
ntlm authentication sign flag is set

1170
00:45:00,560 --> 00:45:03,520
so this is not useful for us if you want

1171
00:45:03,520 --> 00:45:04,319
to do relay

1172
00:45:04,319 --> 00:45:08,720
we cannot have this flag set

1173
00:45:08,880 --> 00:45:11,839
what happens then

1174
00:45:12,560 --> 00:45:17,200
next slide okay as antonio told you

1175
00:45:17,200 --> 00:45:19,599
we implemented our fake oxy dissolver

1176
00:45:19,599 --> 00:45:20,480
okay

1177
00:45:20,480 --> 00:45:22,800
and in our fake oxy resolver we have

1178
00:45:22,800 --> 00:45:24,640
several parameters which are on the

1179
00:45:24,640 --> 00:45:26,079
under our control and

1180
00:45:26,079 --> 00:45:27,760
a couple of them are very very

1181
00:45:27,760 --> 00:45:29,119
interesting for us

1182
00:45:29,119 --> 00:45:31,599
the first one is the authentication

1183
00:45:31,599 --> 00:45:32,240
level

1184
00:45:32,240 --> 00:45:35,359
we can here set the authentication level

1185
00:45:35,359 --> 00:45:37,599
telling to the client that all

1186
00:45:37,599 --> 00:45:38,400
subsequent

1187
00:45:38,400 --> 00:45:41,119
uh authentication should not be signed

1188
00:45:41,119 --> 00:45:43,280
by simply setting the loud articulation

1189
00:45:43,280 --> 00:45:45,359
level to connect so we have control

1190
00:45:45,359 --> 00:45:48,960
on this parameter not only in the

1191
00:45:48,960 --> 00:45:53,040
oxy binding string we will return the

1192
00:45:53,040 --> 00:45:55,599
connection information in order to let

1193
00:45:55,599 --> 00:45:57,680
the client connect to our

1194
00:45:57,680 --> 00:46:00,480
local release server how does we do this

1195
00:46:00,480 --> 00:46:01,200
simply

1196
00:46:01,200 --> 00:46:04,319
by specifying the epi address and the

1197
00:46:04,319 --> 00:46:06,480
port to connect to

1198
00:46:06,480 --> 00:46:08,800
and also the protocol which should be

1199
00:46:08,800 --> 00:46:10,960
the ptcp

1200
00:46:10,960 --> 00:46:12,480
then we have another interesting

1201
00:46:12,480 --> 00:46:14,079
parameter that we can

1202
00:46:14,079 --> 00:46:17,599
manipulate it's the authentication type

1203
00:46:17,599 --> 00:46:20,000
what we discovered is that if we set it

1204
00:46:20,000 --> 00:46:21,520
to win and a t

1205
00:46:21,520 --> 00:46:25,040
again the subsequent um authentication

1206
00:46:25,040 --> 00:46:28,240
will not have the sign flag if we set it

1207
00:46:28,240 --> 00:46:31,040
for example to negotiate the

1208
00:46:31,040 --> 00:46:32,000
authentication

1209
00:46:32,000 --> 00:46:34,079
then sign flag in the authentication

1210
00:46:34,079 --> 00:46:35,440
will again be set

1211
00:46:35,440 --> 00:46:38,560
so by controlling these two parameters

1212
00:46:38,560 --> 00:46:42,720
we are sure that the next authentication

1213
00:46:42,720 --> 00:46:44,640
will not have the sign flagship and

1214
00:46:44,640 --> 00:46:47,040
potentially we can then relay this

1215
00:46:47,040 --> 00:46:48,880
what happens when we return to the

1216
00:46:48,880 --> 00:46:51,680
client this binding information

1217
00:46:51,680 --> 00:46:54,560
the client will antonio's already told

1218
00:46:54,560 --> 00:46:55,280
you this

1219
00:46:55,280 --> 00:46:57,680
the client will perform an either an

1220
00:46:57,680 --> 00:47:00,240
authenticated iran release to call

1221
00:47:00,240 --> 00:47:03,839
to our local um relay server

1222
00:47:03,839 --> 00:47:06,319
we will intercept this call and then

1223
00:47:06,319 --> 00:47:07,119
forward it

1224
00:47:07,119 --> 00:47:12,319
to the real relay and that's how it work

1225
00:47:14,720 --> 00:47:16,480
okay sorry but i didn't click on the

1226
00:47:16,480 --> 00:47:17,839
slide here we can see that the time

1227
00:47:17,839 --> 00:47:19,520
stack was not set okay

1228
00:47:19,520 --> 00:47:22,960
so this is good for us this is diagram

1229
00:47:22,960 --> 00:47:25,440
like not said review we are okay we can

1230
00:47:25,440 --> 00:47:27,760
relay this one

1231
00:47:27,760 --> 00:47:31,040
okay this was the theory but now uh

1232
00:47:31,040 --> 00:47:32,400
we had to implement it and we

1233
00:47:32,400 --> 00:47:34,079
implemented it in our tool the remote

1234
00:47:34,079 --> 00:47:35,680
potatoes here our

1235
00:47:35,680 --> 00:47:38,640
soul of the tool and this is the big

1236
00:47:38,640 --> 00:47:39,200
picture

1237
00:47:39,200 --> 00:47:41,839
it seems quite complex but i think it's

1238
00:47:41,839 --> 00:47:42,960
very easy

1239
00:47:42,960 --> 00:47:45,680
if you follow me a little bit okay i

1240
00:47:45,680 --> 00:47:46,960
will explain it as

1241
00:47:46,960 --> 00:47:50,000
a as best as i can but remember

1242
00:47:50,000 --> 00:47:52,160
and i speak with my hand so if you look

1243
00:47:52,160 --> 00:47:53,599
at my hand probably a little bit

1244
00:47:53,599 --> 00:47:55,599
more clearer so let's start from the

1245
00:47:55,599 --> 00:47:57,200
beginning

1246
00:47:57,200 --> 00:48:00,480
what do you need editing machine where

1247
00:48:00,480 --> 00:48:03,920
a user prefer the privilege uses

1248
00:48:03,920 --> 00:48:06,160
such a domain that means logged in then

1249
00:48:06,160 --> 00:48:08,240
we need our attacker machine

1250
00:48:08,240 --> 00:48:10,640
okay and this machine this must be

1251
00:48:10,640 --> 00:48:11,520
reachable uh

1252
00:48:11,520 --> 00:48:15,200
reachable on party cp 135

1253
00:48:15,200 --> 00:48:17,520
from this machine we need a shell on

1254
00:48:17,520 --> 00:48:19,520
victim machine in session zero

1255
00:48:19,520 --> 00:48:22,960
this can be for example a winner m sshl

1256
00:48:22,960 --> 00:48:26,160
or maybe also some

1257
00:48:26,160 --> 00:48:29,760
vulnerable task schedule task

1258
00:48:29,760 --> 00:48:32,160
so that we can gain a shell in session

1259
00:48:32,160 --> 00:48:32,880
zero

1260
00:48:32,880 --> 00:48:35,520
we will copy our exploit on the beating

1261
00:48:35,520 --> 00:48:36,640
machine

1262
00:48:36,640 --> 00:48:40,000
and we launch it so

1263
00:48:40,000 --> 00:48:42,480
the first thing it will do is to trigger

1264
00:48:42,480 --> 00:48:44,640
trigger our dcom activation service with

1265
00:48:44,640 --> 00:48:46,000
one of this particular

1266
00:48:46,000 --> 00:48:49,920
cnsme and in this activation service

1267
00:48:49,920 --> 00:48:52,240
we specify the ip address of the

1268
00:48:52,240 --> 00:48:54,160
auxiliary solver the ip address of the

1269
00:48:54,160 --> 00:48:54,960
resolver

1270
00:48:54,960 --> 00:48:58,400
is our vc machine so we will receive

1271
00:48:58,400 --> 00:49:00,720
an authenticated call on our victim on

1272
00:49:00,720 --> 00:49:02,240
an attacker machine

1273
00:49:02,240 --> 00:49:05,520
which we will redirect to the remote our

1274
00:49:05,520 --> 00:49:07,920
remote the potato spider to the part who

1275
00:49:07,920 --> 00:49:11,760
implements the roboxy resolver

1276
00:49:12,559 --> 00:49:15,440
and this is it and then we will return

1277
00:49:15,440 --> 00:49:16,160
again

1278
00:49:16,160 --> 00:49:18,559
a string binding where we tell the

1279
00:49:18,559 --> 00:49:21,119
client to connect

1280
00:49:21,119 --> 00:49:24,559
to our local relay

1281
00:49:24,559 --> 00:49:26,640
with the dedicated protocol and by

1282
00:49:26,640 --> 00:49:28,480
setting all these parameters

1283
00:49:28,480 --> 00:49:32,079
in order to be sure that the subsequent

1284
00:49:32,079 --> 00:49:35,200
item release call will not be

1285
00:49:35,200 --> 00:49:38,480
authenticated so in our

1286
00:49:38,480 --> 00:49:41,200
local relay we will perform a cross

1287
00:49:41,200 --> 00:49:42,720
relay

1288
00:49:42,720 --> 00:49:46,160
across relay from fpc to our http

1289
00:49:46,160 --> 00:49:49,200
we will then forward this um

1290
00:49:49,200 --> 00:49:51,599
authentication and capture this time in

1291
00:49:51,599 --> 00:49:52,640
http

1292
00:49:52,640 --> 00:49:55,599
to our attacker machine where ntlm relay

1293
00:49:55,599 --> 00:49:55,920
x

1294
00:49:55,920 --> 00:49:58,960
is running and then we will do the final

1295
00:49:58,960 --> 00:50:01,040
relay to the destination host

1296
00:50:01,040 --> 00:50:04,480
with the destination protocol okay

1297
00:50:04,480 --> 00:50:07,760
we have now um enable the gif which will

1298
00:50:07,760 --> 00:50:08,559
explain you

1299
00:50:08,559 --> 00:50:10,400
how it is possible to perform this

1300
00:50:10,400 --> 00:50:13,359
attack for example standard user gaining

1301
00:50:13,359 --> 00:50:15,040
domain admin privileges

1302
00:50:15,040 --> 00:50:18,079
it's an animated gif and i cannot stop

1303
00:50:18,079 --> 00:50:18,319
it

1304
00:50:18,319 --> 00:50:21,200
so i hope that i can synchronize i will

1305
00:50:21,200 --> 00:50:21,760
only

1306
00:50:21,760 --> 00:50:24,160
show you some same few words because i

1307
00:50:24,160 --> 00:50:25,200
think

1308
00:50:25,200 --> 00:50:29,920
if you look at the video it's very

1309
00:50:29,920 --> 00:50:34,000
simple to understand okay okay

1310
00:50:34,000 --> 00:50:36,040
here we are so um

1311
00:50:36,040 --> 00:50:38,160
[Music]

1312
00:50:38,160 --> 00:50:40,880
we have a standard user who cannot

1313
00:50:40,880 --> 00:50:42,640
access the main controller obviously

1314
00:50:42,640 --> 00:50:43,839
because they have no

1315
00:50:43,839 --> 00:50:47,119
special privileges so we will now

1316
00:50:47,119 --> 00:50:49,520
obtain a shell in sessions here on the

1317
00:50:49,520 --> 00:50:52,400
beating machine

1318
00:50:52,839 --> 00:50:56,240
okay this user winner and user one

1319
00:50:56,240 --> 00:50:59,680
has no privileges he can only do winram

1320
00:50:59,680 --> 00:51:02,400
connections okay and then he will launch

1321
00:51:02,400 --> 00:51:03,359
the

1322
00:51:03,359 --> 00:51:06,000
our remote potato exploit with all the

1323
00:51:06,000 --> 00:51:09,839
necessary parameters

1324
00:51:11,520 --> 00:51:15,520
okay the ip address

1325
00:51:15,520 --> 00:51:17,520
where we specify the ip address of our

1326
00:51:17,520 --> 00:51:20,400
attacker machine

1327
00:51:21,520 --> 00:51:24,640
and then the port and then we will

1328
00:51:24,640 --> 00:51:27,839
uh clearly forward the oxide resolution

1329
00:51:27,839 --> 00:51:30,079
request to the remote potato running on

1330
00:51:30,079 --> 00:51:31,440
the vt machine

1331
00:51:31,440 --> 00:51:34,319
and launch finally launch mtm and relay

1332
00:51:34,319 --> 00:51:35,760
x

1333
00:51:35,760 --> 00:51:37,920
everything was fine i i know it was a

1334
00:51:37,920 --> 00:51:40,640
very fast but as you can see here

1335
00:51:40,640 --> 00:51:42,400
first of all the winner and user has now

1336
00:51:42,400 --> 00:51:44,880
regulation get changes privileges and

1337
00:51:44,880 --> 00:51:47,040
he's member of the domain admin group so

1338
00:51:47,040 --> 00:51:48,800
that he can now finally

1339
00:51:48,800 --> 00:51:50,960
obtain a system shell on the domain

1340
00:51:50,960 --> 00:51:52,000
controller

1341
00:51:52,000 --> 00:51:55,680
okay that's it

1342
00:51:58,319 --> 00:52:00,480
let's check if he really is member of

1343
00:52:00,480 --> 00:52:01,440
enterprise that means

1344
00:52:01,440 --> 00:52:03,839
he's member of enterprise so standard

1345
00:52:03,839 --> 00:52:04,880
user

1346
00:52:04,880 --> 00:52:08,240
can gain in this scenario domain admin

1347
00:52:08,240 --> 00:52:08,960
privileges

1348
00:52:08,960 --> 00:52:12,559
and this is has not been fixed

1349
00:52:12,640 --> 00:52:14,480
last but not least the strange case of

1350
00:52:14,480 --> 00:52:16,160
sme relay because as i told you

1351
00:52:16,160 --> 00:52:19,119
um we were also able to relate to from

1352
00:52:19,119 --> 00:52:20,800
rpc to smd

1353
00:52:20,800 --> 00:52:22,640
but there are two limitations in this

1354
00:52:22,640 --> 00:52:25,200
case the first one is that obviously

1355
00:52:25,200 --> 00:52:28,319
the the sign flag has not been set and

1356
00:52:28,319 --> 00:52:31,119
also that the identify flag

1357
00:52:31,119 --> 00:52:33,359
which tells which type of token should

1358
00:52:33,359 --> 00:52:34,640
be um created

1359
00:52:34,640 --> 00:52:37,119
has not to be set because if this flag

1360
00:52:37,119 --> 00:52:39,599
is set the smb server is not able to

1361
00:52:39,599 --> 00:52:41,200
impersonate the client

1362
00:52:41,200 --> 00:52:43,359
what we saw is that for example for the

1363
00:52:43,359 --> 00:52:44,400
cls id

1364
00:52:44,400 --> 00:52:47,119
of the picker host the identify flag was

1365
00:52:47,119 --> 00:52:48,079
not set

1366
00:52:48,079 --> 00:52:50,800
and we had a quick and dirty idea we

1367
00:52:50,800 --> 00:52:51,359
simply

1368
00:52:51,359 --> 00:52:54,240
unset the flag and magically it worked

1369
00:52:54,240 --> 00:52:54,640
so

1370
00:52:54,640 --> 00:52:58,480
we found a way to bypass this limitation

1371
00:52:58,480 --> 00:53:01,040
but this was true until the november

1372
00:53:01,040 --> 00:53:02,160
patch tuesday

1373
00:53:02,160 --> 00:53:05,119
of 2020 because after this patch we

1374
00:53:05,119 --> 00:53:07,200
discovered that it was no more possible

1375
00:53:07,200 --> 00:53:09,359
to perform this operation altering the

1376
00:53:09,359 --> 00:53:10,079
flag

1377
00:53:10,079 --> 00:53:12,000
so what it seems is that the method

1378
00:53:12,000 --> 00:53:13,359
integrity check

1379
00:53:13,359 --> 00:53:15,599
is always performed even his signing of

1380
00:53:15,599 --> 00:53:17,760
this notable but before dispatch

1381
00:53:17,760 --> 00:53:20,000
the nick was performed only when signing

1382
00:53:20,000 --> 00:53:21,520
was enabled

1383
00:53:21,520 --> 00:53:25,119
okay that's all i back to you antonio

1384
00:53:25,119 --> 00:53:25,599
with the

1385
00:53:25,599 --> 00:53:29,839
conclusions and some news okay

1386
00:53:34,800 --> 00:53:38,480
and you are mute yeah sorry

1387
00:53:38,480 --> 00:53:42,640
thanks andrea let me go back okay

1388
00:53:42,640 --> 00:53:46,160
so what news we have so

1389
00:53:46,160 --> 00:53:49,680
we what we achieved is that

1390
00:53:49,680 --> 00:53:53,680
uh cross social relay is also possible

1391
00:53:53,680 --> 00:53:54,400
so

1392
00:53:54,400 --> 00:53:57,119
what was the idea is that uh getting a

1393
00:53:57,119 --> 00:53:59,040
shell in session zero is not for

1394
00:53:59,040 --> 00:54:02,720
so common for regular users so the

1395
00:54:02,720 --> 00:54:05,760
uh if we could have a way to

1396
00:54:05,760 --> 00:54:09,119
uh achieve uh cross

1397
00:54:09,119 --> 00:54:10,640
cross session relay so for example

1398
00:54:10,640 --> 00:54:12,480
triggering the authentication of another

1399
00:54:12,480 --> 00:54:13,680
user another session

1400
00:54:13,680 --> 00:54:16,880
that could be uh much more impactful so

1401
00:54:16,880 --> 00:54:17,760
for example

1402
00:54:17,760 --> 00:54:20,319
a common scenario could be if you have a

1403
00:54:20,319 --> 00:54:21,520
remote association

1404
00:54:21,520 --> 00:54:23,520
and multiple users are connected or if

1405
00:54:23,520 --> 00:54:24,559
you connect

1406
00:54:24,559 --> 00:54:28,000
to a jump station machine and

1407
00:54:28,000 --> 00:54:31,119
in reality there already exists this

1408
00:54:31,119 --> 00:54:34,480
um the way to activate com

1409
00:54:34,480 --> 00:54:36,880
object cross section and this is done

1410
00:54:36,880 --> 00:54:38,240
through the session moniker

1411
00:54:38,240 --> 00:54:40,480
okay the problem with that is that you

1412
00:54:40,480 --> 00:54:41,599
cannot combine

1413
00:54:41,599 --> 00:54:43,680
the high storage activation that is the

1414
00:54:43,680 --> 00:54:45,839
one that is used by the potato exploits

1415
00:54:45,839 --> 00:54:49,280
with the session moniker objects but

1416
00:54:49,280 --> 00:54:52,640
is it is it that really true

1417
00:54:52,640 --> 00:54:56,640
well uh luckily enough james forshore

1418
00:54:56,640 --> 00:54:58,720
uh inspired by our remote potito

1419
00:54:58,720 --> 00:55:00,480
conducted

1420
00:55:00,480 --> 00:55:03,599
his own research and it demonstrates a

1421
00:55:03,599 --> 00:55:04,720
way

1422
00:55:04,720 --> 00:55:08,160
that with a kind uh

1423
00:55:08,160 --> 00:55:11,760
with uh some undocumented way there is

1424
00:55:11,760 --> 00:55:15,119
the opportunity to target the session

1425
00:55:15,119 --> 00:55:16,880
before triggering the storage the

1426
00:55:16,880 --> 00:55:18,559
storage object

1427
00:55:18,559 --> 00:55:22,240
so in this way if you have any shell

1428
00:55:22,240 --> 00:55:25,119
with any normal user on a machine and

1429
00:55:25,119 --> 00:55:26,400
you are able to

1430
00:55:26,400 --> 00:55:28,480
grab and steal the authentication of

1431
00:55:28,480 --> 00:55:30,720
another user that is currently logged on

1432
00:55:30,720 --> 00:55:34,000
very very powerful and of

1433
00:55:34,000 --> 00:55:37,359
course uh the we try to implement

1434
00:55:37,359 --> 00:55:40,799
these two um these two uh concepts these

1435
00:55:40,799 --> 00:55:42,000
two topics so the

1436
00:55:42,000 --> 00:55:44,160
cross section so the session monica

1437
00:55:44,160 --> 00:55:45,119
activation

1438
00:55:45,119 --> 00:55:47,680
with the eye storage object and we have

1439
00:55:47,680 --> 00:55:49,119
found out that

1440
00:55:49,119 --> 00:55:52,240
you are able to uh

1441
00:55:52,240 --> 00:55:54,880
impersonate to trigger the intelligent

1442
00:55:54,880 --> 00:55:56,480
authentication of another user in

1443
00:55:56,480 --> 00:55:58,400
another session even if you are not from

1444
00:55:58,400 --> 00:55:59,599
session zero

1445
00:55:59,599 --> 00:56:01,359
even if you are have not a shell in

1446
00:56:01,359 --> 00:56:03,040
session zero so this

1447
00:56:03,040 --> 00:56:05,119
is very powerful because you can get rid

1448
00:56:05,119 --> 00:56:08,559
of session zero limitation

1449
00:56:08,720 --> 00:56:10,720
this is last part some mitigation in

1450
00:56:10,720 --> 00:56:12,079
order to fight the

1451
00:56:12,079 --> 00:56:15,440
um reage escalation through the service

1452
00:56:15,440 --> 00:56:17,280
processes service account and also to

1453
00:56:17,280 --> 00:56:18,559
fight remote potential

1454
00:56:18,559 --> 00:56:22,400
the first one is uh the

1455
00:56:22,400 --> 00:56:23,920
opportunity the configuration that you

1456
00:56:23,920 --> 00:56:25,599
you can make on the services

1457
00:56:25,599 --> 00:56:28,000
in order to add the right restricted

1458
00:56:28,000 --> 00:56:29,760
seed that if you remember is something

1459
00:56:29,760 --> 00:56:30,000
that

1460
00:56:30,000 --> 00:56:32,160
andrea talked about in the windows

1461
00:56:32,160 --> 00:56:33,839
service ordering

1462
00:56:33,839 --> 00:56:35,760
chapter and you can do this with the

1463
00:56:35,760 --> 00:56:37,680
service control by just specifying see

1464
00:56:37,680 --> 00:56:38,559
the type

1465
00:56:38,559 --> 00:56:40,480
specifying the service and the

1466
00:56:40,480 --> 00:56:42,480
attributes restricted

1467
00:56:42,480 --> 00:56:45,520
you can also use virtual service

1468
00:56:45,520 --> 00:56:46,640
accounts

1469
00:56:46,640 --> 00:56:48,720
okay or of course you can create also

1470
00:56:48,720 --> 00:56:49,839
your own with

1471
00:56:49,839 --> 00:56:52,880
uh some seed mapping that you can

1472
00:56:52,880 --> 00:56:54,880
configure with lsas

1473
00:56:54,880 --> 00:56:57,040
that you can find in the article from

1474
00:56:57,040 --> 00:56:58,000
gs4 show

1475
00:56:58,000 --> 00:57:00,480
and if you want a practical guide in

1476
00:57:00,480 --> 00:57:02,240
order to guide you for example make an

1477
00:57:02,240 --> 00:57:04,799
arduino configuration of ies

1478
00:57:04,799 --> 00:57:06,960
you can find also the blog of andrea

1479
00:57:06,960 --> 00:57:08,480
that will guide you through

1480
00:57:08,480 --> 00:57:10,960
all the configuration in order to

1481
00:57:10,960 --> 00:57:12,319
restrict the attack

1482
00:57:12,319 --> 00:57:15,359
the attacker to not reach or achieve

1483
00:57:15,359 --> 00:57:17,920
a process with impersonation privileges

1484
00:57:17,920 --> 00:57:20,240
and of course the last but not least

1485
00:57:20,240 --> 00:57:21,599
you also need to remove the

1486
00:57:21,599 --> 00:57:23,920
impersonation privileges by specifying

1487
00:57:23,920 --> 00:57:25,440
the only required privileges for the

1488
00:57:25,440 --> 00:57:26,240
service

1489
00:57:26,240 --> 00:57:28,000
okay so you can do with service control

1490
00:57:28,000 --> 00:57:29,280
specifying previews

1491
00:57:29,280 --> 00:57:31,760
name of the service and all the required

1492
00:57:31,760 --> 00:57:33,200
privileges for your service

1493
00:57:33,200 --> 00:57:36,400
usually your service depends on what

1494
00:57:36,400 --> 00:57:39,599
it has to do it has to do but usually it

1495
00:57:39,599 --> 00:57:40,880
does not require

1496
00:57:40,880 --> 00:57:44,319
the impersonation privileges

1497
00:57:44,319 --> 00:57:47,359
and some mitigation against the ntlm

1498
00:57:47,359 --> 00:57:49,920
relay attacks that by consequence we

1499
00:57:49,920 --> 00:57:51,839
also mitigate the remote potential zero

1500
00:57:51,839 --> 00:57:52,799
exploit

1501
00:57:52,799 --> 00:57:55,200
it's the class the classic mitigation

1502
00:57:55,200 --> 00:57:56,319
for uh the

1503
00:57:56,319 --> 00:57:59,440
uh ntr ntlm relay attacks

1504
00:57:59,440 --> 00:58:01,760
so on the server side you can you must

1505
00:58:01,760 --> 00:58:02,799
configure

1506
00:58:02,799 --> 00:58:06,240
um token checking for hdp so if you

1507
00:58:06,240 --> 00:58:06,799
configure

1508
00:58:06,799 --> 00:58:10,160
it through a group policy to

1509
00:58:10,160 --> 00:58:13,200
allow or if not require

1510
00:58:13,200 --> 00:58:16,559
it cannot be possible anymore to relay

1511
00:58:16,559 --> 00:58:19,280
authentication over http for ldap you

1512
00:58:19,280 --> 00:58:20,960
can configure the

1513
00:58:20,960 --> 00:58:23,359
policy requires signature for null adapt

1514
00:58:23,359 --> 00:58:24,160
connection

1515
00:58:24,160 --> 00:58:26,640
so in this way the server will always

1516
00:58:26,640 --> 00:58:27,440
check that

1517
00:58:27,440 --> 00:58:30,880
the signing is enabled and for smb

1518
00:58:30,880 --> 00:58:33,040
of course you must configure you should

1519
00:58:33,040 --> 00:58:34,799
configure the smb signing

1520
00:58:34,799 --> 00:58:36,799
by setting the group policy digital

1521
00:58:36,799 --> 00:58:39,599
design server communication to always

1522
00:58:39,599 --> 00:58:41,040
this is already done to domain

1523
00:58:41,040 --> 00:58:43,520
controllers so you can also apply this

1524
00:58:43,520 --> 00:58:44,880
to servers and client

1525
00:58:44,880 --> 00:58:47,200
but of course make sure that you don't

1526
00:58:47,200 --> 00:58:51,839
break anything else

1527
00:58:52,000 --> 00:58:56,480
conclusion forces admin is

1528
00:58:56,480 --> 00:58:58,799
never rely on default windows 7

1529
00:58:58,799 --> 00:58:59,920
configuration for

1530
00:58:59,920 --> 00:59:01,920
for segregating the services because

1531
00:59:01,920 --> 00:59:03,520
remember that also microsoft do not

1532
00:59:03,520 --> 00:59:04,079
consider

1533
00:59:04,079 --> 00:59:06,000
it a security boundary but just a safety

1534
00:59:06,000 --> 00:59:08,240
boundary for penetration tester always

1535
00:59:08,240 --> 00:59:09,520
run where my priv

1536
00:59:09,520 --> 00:59:11,200
and remember that you have a series of

1537
00:59:11,200 --> 00:59:12,720
techniques that allow you to

1538
00:59:12,720 --> 00:59:14,400
with one click to achieve previous

1539
00:59:14,400 --> 00:59:16,799
escalation for service provider please

1540
00:59:16,799 --> 00:59:19,839
do not sell web service by sharing the

1541
00:59:19,839 --> 00:59:20,559
same

1542
00:59:20,559 --> 00:59:22,960
is and creating a new virtual lost at

1543
00:59:22,960 --> 00:59:25,119
least not with default configuration

1544
00:59:25,119 --> 00:59:27,520
and also one last point i want to leave

1545
00:59:27,520 --> 00:59:28,880
you is that

1546
00:59:28,880 --> 00:59:30,799
do not trust the multi-session user

1547
00:59:30,799 --> 00:59:32,000
isolation because

1548
00:59:32,000 --> 00:59:35,359
it can be broken by remote potential 0.

1549
00:59:35,359 --> 00:59:37,200
thank you all feel free to reach out

1550
00:59:37,200 --> 00:59:38,720
those are our contacts

1551
00:59:38,720 --> 00:59:41,440
and we are more than glad to answer all

1552
00:59:41,440 --> 00:59:47,839
of your questions

