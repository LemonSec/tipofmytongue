1
00:00:15,200 --> 00:00:16,160
hi everyone

2
00:00:16,160 --> 00:00:18,800
my name is tim marinosov and i have my

3
00:00:18,800 --> 00:00:19,760
co-speaker today

4
00:00:19,760 --> 00:00:22,800
alexis tenikov we are the part of

5
00:00:22,800 --> 00:00:25,119
premium village organizers and our

6
00:00:25,119 --> 00:00:26,320
presentation today

7
00:00:26,320 --> 00:00:28,480
is post world should be afraid of

8
00:00:28,480 --> 00:00:30,400
hands-on payment devices

9
00:00:30,400 --> 00:00:31,279
we are going to talk about

10
00:00:31,279 --> 00:00:33,760
vulnerabilities that we found in two

11
00:00:33,760 --> 00:00:34,320
biggest

12
00:00:34,320 --> 00:00:36,320
point-of-sale vendors how this

13
00:00:36,320 --> 00:00:38,800
vulnerabilities can be used what attacks

14
00:00:38,800 --> 00:00:39,920
can be done

15
00:00:39,920 --> 00:00:43,360
and many more so for the purpose of this

16
00:00:43,360 --> 00:00:44,320
presentation

17
00:00:44,320 --> 00:00:47,840
we call it the pos world and in this

18
00:00:47,840 --> 00:00:49,280
post world we have

19
00:00:49,280 --> 00:00:52,559
many different entities but at the top

20
00:00:52,559 --> 00:00:54,800
of everything we have pci

21
00:00:54,800 --> 00:00:58,719
payment card industry console which is

22
00:00:58,719 --> 00:01:00,320
responsible for

23
00:01:00,320 --> 00:01:03,440
maintaining pci dss or data

24
00:01:03,440 --> 00:01:06,560
security standard which explains how car

25
00:01:06,560 --> 00:01:09,600
data should be transmitted stored

26
00:01:09,600 --> 00:01:11,520
and so on and so on and protected

27
00:01:11,520 --> 00:01:13,280
against hackers

28
00:01:13,280 --> 00:01:16,320
then we have two biggest car brands visa

29
00:01:16,320 --> 00:01:17,600
and mastercard

30
00:01:17,600 --> 00:01:20,960
we have different variety of

31
00:01:20,960 --> 00:01:22,880
point of sale vendors but the biggest

32
00:01:22,880 --> 00:01:24,880
and one we are talking about today are

33
00:01:24,880 --> 00:01:27,200
very phone and jennica

34
00:01:27,200 --> 00:01:29,040
then you have obviously issues and

35
00:01:29,040 --> 00:01:31,280
acquiring banks who are responsible for

36
00:01:31,280 --> 00:01:34,799
handling and sending money

37
00:01:34,799 --> 00:01:37,439
between accounts you have merchants

38
00:01:37,439 --> 00:01:38,079
shops

39
00:01:38,079 --> 00:01:42,640
who are selling goods to customers

40
00:01:42,640 --> 00:01:45,280
which are the cardholders essentially

41
00:01:45,280 --> 00:01:46,000
and

42
00:01:46,000 --> 00:01:49,119
we obviously have hackers here so

43
00:01:49,119 --> 00:01:51,680
in our threat model hackers can be

44
00:01:51,680 --> 00:01:52,799
either

45
00:01:52,799 --> 00:01:54,960
malicious customers or malicious

46
00:01:54,960 --> 00:01:56,240
merchants

47
00:01:56,240 --> 00:01:58,799
so if you look at the payment process

48
00:01:58,799 --> 00:01:59,600
you can see

49
00:01:59,600 --> 00:02:02,479
that malicious customers for example can

50
00:02:02,479 --> 00:02:03,439
modify

51
00:02:03,439 --> 00:02:06,479
point of sale for the purpose of

52
00:02:06,479 --> 00:02:08,479
collecting car date and selling it on

53
00:02:08,479 --> 00:02:10,000
the dark market

54
00:02:10,000 --> 00:02:13,280
but if you'll be able to infect the

55
00:02:13,280 --> 00:02:15,680
terminal if you are for example a

56
00:02:15,680 --> 00:02:16,720
malicious

57
00:02:16,720 --> 00:02:18,640
merchant you will be able to affect the

58
00:02:18,640 --> 00:02:19,920
further process

59
00:02:19,920 --> 00:02:23,360
uh of the car transmitting

60
00:02:23,360 --> 00:02:28,959
and for example send uh unauthorized

61
00:02:28,959 --> 00:02:32,319
data to the issuing aquarium banks so

62
00:02:32,319 --> 00:02:34,400
unauthorized transactions will be

63
00:02:34,400 --> 00:02:35,760
accepted

64
00:02:35,760 --> 00:02:37,280
we're going to talk about this a little

65
00:02:37,280 --> 00:02:39,920
bit later

66
00:02:40,000 --> 00:02:43,920
pci says that there are certain rules

67
00:02:43,920 --> 00:02:44,720
about

68
00:02:44,720 --> 00:02:47,280
how car data should be handled and they

69
00:02:47,280 --> 00:02:48,239
have

70
00:02:48,239 --> 00:02:51,040
few documents about point of sale

71
00:02:51,040 --> 00:02:51,760
terminals

72
00:02:51,760 --> 00:02:55,360
or pin parts so we have pci pts

73
00:02:55,360 --> 00:02:58,239
or pin transaction security document we

74
00:02:58,239 --> 00:03:00,720
have pd security requirements which is

75
00:03:00,720 --> 00:03:01,680
pin entry

76
00:03:01,680 --> 00:03:04,319
device requirements and there are

77
00:03:04,319 --> 00:03:06,560
hundreds of pages different questionary

78
00:03:06,560 --> 00:03:08,800
requirements so on and so on

79
00:03:08,800 --> 00:03:10,640
but briefly speaking we are talking

80
00:03:10,640 --> 00:03:12,319
about few

81
00:03:12,319 --> 00:03:14,640
major things so first is obviously do

82
00:03:14,640 --> 00:03:15,840
not store

83
00:03:15,840 --> 00:03:19,040
sample process sensitive data card

84
00:03:19,040 --> 00:03:22,080
holder data without encryption

85
00:03:22,080 --> 00:03:24,799
things like pin codes track 2 data from

86
00:03:24,799 --> 00:03:26,080
magnetic stripe

87
00:03:26,080 --> 00:03:29,120
or cvv codes from the back side

88
00:03:29,120 --> 00:03:32,720
of the cart next specifically

89
00:03:32,720 --> 00:03:36,799
two terminals uh each terminal

90
00:03:36,799 --> 00:03:40,400
should be temper protected

91
00:03:40,400 --> 00:03:43,440
so protected against any

92
00:03:43,440 --> 00:03:46,480
opening drilling trying to extract any

93
00:03:46,480 --> 00:03:47,519
data

94
00:03:47,519 --> 00:03:50,640
and whenever this was detected

95
00:03:50,640 --> 00:03:53,200
terminal should act so it should delete

96
00:03:53,200 --> 00:03:54,799
all sensitive data

97
00:03:54,799 --> 00:03:57,040
such as encryption keys payment apps and

98
00:03:57,040 --> 00:03:58,799
so on and so on

99
00:03:58,799 --> 00:04:02,640
it actually not specified what exact

100
00:04:02,640 --> 00:04:06,000
data should be deleted and in the end

101
00:04:06,000 --> 00:04:09,280
you device should indicate that uh

102
00:04:09,280 --> 00:04:11,920
it was compromised so essentially turn

103
00:04:11,920 --> 00:04:12,400
your

104
00:04:12,400 --> 00:04:15,200
itself into a brick so it won't be

105
00:04:15,200 --> 00:04:18,238
functional anymore

106
00:04:18,238 --> 00:04:21,279
and in our world we have obviously

107
00:04:21,279 --> 00:04:21,918
hackers

108
00:04:21,918 --> 00:04:25,120
because stealing uh

109
00:04:25,120 --> 00:04:27,120
payment data is a very lucrative

110
00:04:27,120 --> 00:04:28,639
business for them

111
00:04:28,639 --> 00:04:31,120
but before we'll start talking about the

112
00:04:31,120 --> 00:04:32,639
history of hacking

113
00:04:32,639 --> 00:04:34,400
i want to show the difference between

114
00:04:34,400 --> 00:04:36,720
two very similar definitions so we have

115
00:04:36,720 --> 00:04:39,360
post terminals and post systems

116
00:04:39,360 --> 00:04:43,280
and sometimes they might be

117
00:04:43,280 --> 00:04:45,759
mixed so when we're talking about post

118
00:04:45,759 --> 00:04:47,360
terminals definitions are

119
00:04:47,360 --> 00:04:50,880
pause pin part pdq or just a terminal

120
00:04:50,880 --> 00:04:53,919
where post systems can be called

121
00:04:53,919 --> 00:04:56,320
cash registers as well what's the

122
00:04:56,320 --> 00:04:57,280
difference

123
00:04:57,280 --> 00:04:59,600
if you're talking about the big machine

124
00:04:59,600 --> 00:05:01,840
with windows on board with the keyboard

125
00:05:01,840 --> 00:05:05,039
barcode reader where the cashier

126
00:05:05,039 --> 00:05:07,360
puts money in you are talking about post

127
00:05:07,360 --> 00:05:08,560
system

128
00:05:08,560 --> 00:05:11,360
when on the other hand the device where

129
00:05:11,360 --> 00:05:12,720
you enter your cart

130
00:05:12,720 --> 00:05:16,080
and enter your pin code is post terminal

131
00:05:16,080 --> 00:05:18,400
or pin pad and obviously they are not

132
00:05:18,400 --> 00:05:20,080
the same

133
00:05:20,080 --> 00:05:23,039
if you read about how hundreds thousands

134
00:05:23,039 --> 00:05:24,000
of devices

135
00:05:24,000 --> 00:05:27,120
were hacked and car data was stolen

136
00:05:27,120 --> 00:05:30,240
you probably will be reading about uh

137
00:05:30,240 --> 00:05:33,360
malware which was installed on

138
00:05:33,360 --> 00:05:36,800
post systems and the same

139
00:05:36,800 --> 00:05:39,680
if you google post hacking or try to

140
00:05:39,680 --> 00:05:40,880
find any videos

141
00:05:40,880 --> 00:05:44,240
or different white papers you

142
00:05:44,240 --> 00:05:46,240
highly likely will meet information

143
00:05:46,240 --> 00:05:47,520
about

144
00:05:47,520 --> 00:05:49,840
compromising and hacking post systems

145
00:05:49,840 --> 00:05:52,240
and installing malware there

146
00:05:52,240 --> 00:05:54,400
but obviously there were hacks of

147
00:05:54,400 --> 00:05:56,400
point-of-sale terminals in the past as

148
00:05:56,400 --> 00:05:57,120
well

149
00:05:57,120 --> 00:05:59,680
so researchers from university of

150
00:05:59,680 --> 00:06:00,880
cambridge

151
00:06:00,880 --> 00:06:03,919
run tetris on the device back in the day

152
00:06:03,919 --> 00:06:07,680
infected the boss terminal which was

153
00:06:07,680 --> 00:06:08,960
quite good

154
00:06:08,960 --> 00:06:12,319
then we had researchers from sr labs

155
00:06:12,319 --> 00:06:16,479
who found vulnerabilities in one of the

156
00:06:16,479 --> 00:06:18,880
biggest popular the most popular model

157
00:06:18,880 --> 00:06:20,479
in europe

158
00:06:20,479 --> 00:06:22,319
we ourselves made some research in the

159
00:06:22,319 --> 00:06:24,880
past so in 2017 we had a

160
00:06:24,880 --> 00:06:26,960
presentation about vulnerabilities in

161
00:06:26,960 --> 00:06:30,240
mobile point of sale systems

162
00:06:30,240 --> 00:06:33,680
but now i will pass the microphone to

163
00:06:33,680 --> 00:06:34,319
alexi

164
00:06:34,319 --> 00:06:37,919
and he will talk about what

165
00:06:37,919 --> 00:06:40,479
what these devices how these devices

166
00:06:40,479 --> 00:06:41,280
look like

167
00:06:41,280 --> 00:06:44,319
what vulnerabilities they have and how

168
00:06:44,319 --> 00:06:47,440
hackers can attack them hi there

169
00:06:47,440 --> 00:06:50,319
thanks timur the first step in order to

170
00:06:50,319 --> 00:06:52,000
make your own evil and weapon at

171
00:06:52,000 --> 00:06:54,080
creature is understanding in

172
00:06:54,080 --> 00:06:57,199
its weaknesses and internals

173
00:06:57,199 --> 00:06:59,599
basically every terminal hides from your

174
00:06:59,599 --> 00:07:01,840
bunch of legacy code technologies and

175
00:07:01,840 --> 00:07:03,759
strange approaches

176
00:07:03,759 --> 00:07:05,199
and it's great to understand world

177
00:07:05,199 --> 00:07:06,720
technologies takes starting from

178
00:07:06,720 --> 00:07:08,720
hardware

179
00:07:08,720 --> 00:07:10,720
in this talk we don't have enough time

180
00:07:10,720 --> 00:07:12,720
to describe point of sale hardware in

181
00:07:12,720 --> 00:07:13,840
details

182
00:07:13,840 --> 00:07:15,680
but we have already published this

183
00:07:15,680 --> 00:07:17,599
information on deep cohen payload

184
00:07:17,599 --> 00:07:18,960
village

185
00:07:18,960 --> 00:07:20,800
more details you will find on the

186
00:07:20,800 --> 00:07:22,800
village youtube channel

187
00:07:22,800 --> 00:07:25,280
i'd recommend to you to pay attention to

188
00:07:25,280 --> 00:07:27,680
this channel because it also contain

189
00:07:27,680 --> 00:07:30,319
other useful information and now we are

190
00:07:30,319 --> 00:07:31,840
going to shed light on software

191
00:07:31,840 --> 00:07:34,560
components

192
00:07:34,560 --> 00:07:37,120
it's time to weaponize your post

193
00:07:37,120 --> 00:07:38,720
terminal

194
00:07:38,720 --> 00:07:40,560
we should keep in mind that we are going

195
00:07:40,560 --> 00:07:42,639
to break into secured well protected and

196
00:07:42,639 --> 00:07:44,479
certified devices

197
00:07:44,479 --> 00:07:46,080
when the vendor goes to pci

198
00:07:46,080 --> 00:07:48,720
certification he should satisfy pci

199
00:07:48,720 --> 00:07:51,520
rules and fill a form like previously

200
00:07:51,520 --> 00:07:53,039
discussed one

201
00:07:53,039 --> 00:07:55,840
suddenly this successful certification

202
00:07:55,840 --> 00:07:58,000
itself don't guarantee that device is

203
00:07:58,000 --> 00:08:00,800
completely unhackable

204
00:08:00,800 --> 00:08:02,720
the first creature to weaponize is

205
00:08:02,720 --> 00:08:04,160
ingenico pinpat

206
00:08:04,160 --> 00:08:07,199
let it be slowpoke our findings affect

207
00:08:07,199 --> 00:08:09,759
the whole product line of such terminals

208
00:08:09,759 --> 00:08:12,400
there is basically no difference is it

209
00:08:12,400 --> 00:08:13,360
portable or

210
00:08:13,360 --> 00:08:15,840
counter top they all built using the

211
00:08:15,840 --> 00:08:16,960
same hardware

212
00:08:16,960 --> 00:08:19,199
and uses the same talium 2 operating

213
00:08:19,199 --> 00:08:20,400
system

214
00:08:20,400 --> 00:08:22,639
this is just an example of this series

215
00:08:22,639 --> 00:08:25,199
but i sure this kind of terminals

216
00:08:25,199 --> 00:08:27,919
is well known for all of you it is

217
00:08:27,919 --> 00:08:29,599
expectable

218
00:08:29,599 --> 00:08:31,280
that all the communications to the bank

219
00:08:31,280 --> 00:08:32,799
servers are encrypted

220
00:08:32,799 --> 00:08:35,599
but there is an alternative way to get

221
00:08:35,599 --> 00:08:36,719
into it

222
00:08:36,719 --> 00:08:40,958
the maintenance tools and special modes

223
00:08:40,958 --> 00:08:42,799
the main software for server section is

224
00:08:42,799 --> 00:08:44,080
called llt

225
00:08:44,080 --> 00:08:46,640
it is usually used for application and

226
00:08:46,640 --> 00:08:48,320
operating system

227
00:08:48,320 --> 00:08:50,880
logs collection firmware upload and

228
00:08:50,880 --> 00:08:52,000
operating system

229
00:08:52,000 --> 00:08:54,880
and application updates to connect a pin

230
00:08:54,880 --> 00:08:56,880
pad to lt software

231
00:08:56,880 --> 00:08:59,279
you should boot the device with special

232
00:08:59,279 --> 00:09:01,040
key combination

233
00:09:01,040 --> 00:09:04,320
what does this mod hide

234
00:09:04,320 --> 00:09:08,080
first of all it uses worst range way to

235
00:09:08,080 --> 00:09:10,399
establish connection to the device

236
00:09:10,399 --> 00:09:12,399
the terminal itself is recognized as a

237
00:09:12,399 --> 00:09:14,640
virtual com port when usb cable is

238
00:09:14,640 --> 00:09:15,839
connected

239
00:09:15,839 --> 00:09:18,480
llt software brings up pvp connection

240
00:09:18,480 --> 00:09:19,120
over this

241
00:09:19,120 --> 00:09:21,920
virtual com port when this connection is

242
00:09:21,920 --> 00:09:23,839
established the pin pad initiates

243
00:09:23,839 --> 00:09:24,560
connection to

244
00:09:24,560 --> 00:09:28,399
pc6000 tcp port and weighs a response

245
00:09:28,399 --> 00:09:30,320
from llt software

246
00:09:30,320 --> 00:09:32,320
usually the llt software sends the

247
00:09:32,320 --> 00:09:34,640
command to pinpad to open ftp

248
00:09:34,640 --> 00:09:37,200
server in order to get access to some

249
00:09:37,200 --> 00:09:39,680
part of device file system

250
00:09:39,680 --> 00:09:42,080
the interesting thing here is the code

251
00:09:42,080 --> 00:09:44,320
credentials for every step

252
00:09:44,320 --> 00:09:46,399
also no one has an ability to change

253
00:09:46,399 --> 00:09:47,839
these passwords

254
00:09:47,839 --> 00:09:50,000
because they are part of operating

255
00:09:50,000 --> 00:09:52,320
system binaries

256
00:09:52,320 --> 00:09:55,760
the protocol on 6000 tcp port used to

257
00:09:55,760 --> 00:09:56,160
open

258
00:09:56,160 --> 00:10:00,160
ftp server is called ntpt3

259
00:10:00,160 --> 00:10:02,079
it is completely insecure with

260
00:10:02,079 --> 00:10:05,040
absolutely no authentication

261
00:10:05,040 --> 00:10:08,640
and other integrity control mechanisms

262
00:10:08,640 --> 00:10:10,800
by exploiting this vulnerability and

263
00:10:10,800 --> 00:10:12,640
having direct connection to terminals

264
00:10:12,640 --> 00:10:15,120
usb and attacker gain access to internal

265
00:10:15,120 --> 00:10:15,600
ftp

266
00:10:15,600 --> 00:10:18,399
servers it also has some undocumented

267
00:10:18,399 --> 00:10:19,760
comments

268
00:10:19,760 --> 00:10:23,839
lte is allowed to read only file system

269
00:10:23,839 --> 00:10:26,720
the directories host and swap one

270
00:10:26,720 --> 00:10:28,240
vulnerability allows

271
00:10:28,240 --> 00:10:31,200
reading any files whose absolute path is

272
00:10:31,200 --> 00:10:31,760
less

273
00:10:31,760 --> 00:10:35,519
than 17 characters long

274
00:10:35,519 --> 00:10:37,040
it allows an attacker to obtain

275
00:10:37,040 --> 00:10:38,720
cryptographic keys

276
00:10:38,720 --> 00:10:40,959
and manipulate traffic between point of

277
00:10:40,959 --> 00:10:43,120
sale and acquire

278
00:10:43,120 --> 00:10:45,279
also some extra functions of this

279
00:10:45,279 --> 00:10:46,160
protocol

280
00:10:46,160 --> 00:10:49,040
are buggy too

281
00:10:49,200 --> 00:10:51,200
the third interesting finding in this

282
00:10:51,200 --> 00:10:53,120
chain is trace protocol

283
00:10:53,120 --> 00:10:56,160
with no authentication and encryption

284
00:10:56,160 --> 00:10:58,399
trace mode is intended to monitor

285
00:10:58,399 --> 00:11:00,240
performance of banking application

286
00:11:00,240 --> 00:11:03,360
during development for post debugging

287
00:11:03,360 --> 00:11:05,920
and assist developer feedback

288
00:11:05,920 --> 00:11:07,519
capabilities

289
00:11:07,519 --> 00:11:09,680
by using this protocol and having direct

290
00:11:09,680 --> 00:11:11,920
connection to the terminals interfaces

291
00:11:11,920 --> 00:11:13,519
for example usb

292
00:11:13,519 --> 00:11:15,519
an attacker gain access to terminal

293
00:11:15,519 --> 00:11:16,880
operating system

294
00:11:16,880 --> 00:11:19,279
and application internals via trace

295
00:11:19,279 --> 00:11:21,440
command line interface

296
00:11:21,440 --> 00:11:25,120
anyone has access to this command line

297
00:11:25,120 --> 00:11:27,360
interface just using the config file

298
00:11:27,360 --> 00:11:28,560
magic

299
00:11:28,560 --> 00:11:30,320
and the trace 2 from software

300
00:11:30,320 --> 00:11:32,240
development kit

301
00:11:32,240 --> 00:11:34,480
example of trace tool output is the

302
00:11:34,480 --> 00:11:37,040
following

303
00:11:38,079 --> 00:11:40,399
this command line interface has help

304
00:11:40,399 --> 00:11:42,480
commands in order to get description for

305
00:11:42,480 --> 00:11:44,720
every available comment

306
00:11:44,720 --> 00:11:46,720
but a research wouldn't be complete

307
00:11:46,720 --> 00:11:49,519
without bunch of non-declared comments

308
00:11:49,519 --> 00:11:51,920
as you may see it exposes to attacker

309
00:11:51,920 --> 00:11:53,839
additional function

310
00:11:53,839 --> 00:11:56,800
to get hardware and software status and

311
00:11:56,800 --> 00:12:00,719
some additional debug capabilities

312
00:12:00,800 --> 00:12:03,680
as a result this sim debug mode allows

313
00:12:03,680 --> 00:12:06,000
full control of the pin pad

314
00:12:06,000 --> 00:12:08,399
the exposed commands allow to allocate

315
00:12:08,399 --> 00:12:10,160
and delocate memory

316
00:12:10,160 --> 00:12:13,360
display the contents of all files

317
00:12:13,360 --> 00:12:15,600
of the terminal internal file system

318
00:12:15,600 --> 00:12:17,760
including encryption keys

319
00:12:17,760 --> 00:12:20,079
and to suspend resume and terminate

320
00:12:20,079 --> 00:12:24,079
processes and threads

321
00:12:24,079 --> 00:12:25,920
the example attraction error is

322
00:12:25,920 --> 00:12:27,120
classical

323
00:12:27,120 --> 00:12:29,440
allocate a memory for malicious code

324
00:12:29,440 --> 00:12:30,480
then

325
00:12:30,480 --> 00:12:33,360
write malicious code to allocated memory

326
00:12:33,360 --> 00:12:36,320
suspend and modify a non-important task

327
00:12:36,320 --> 00:12:39,519
in order to point to our

328
00:12:39,519 --> 00:12:43,360
code and then just resume suspended task

329
00:12:43,360 --> 00:12:46,720
finally we have code execution on

330
00:12:46,720 --> 00:12:49,680
any italian based angelinica terminals

331
00:12:49,680 --> 00:12:51,600
is it a good result for such

332
00:12:51,600 --> 00:12:54,720
research definitely yes

333
00:12:54,720 --> 00:12:57,519
is it a good news for their customers

334
00:12:57,519 --> 00:12:59,680
probably no

335
00:12:59,680 --> 00:13:02,720
but anyway we have another creatures in

336
00:13:02,720 --> 00:13:06,320
our research

337
00:13:06,320 --> 00:13:08,000
the next question is well known very

338
00:13:08,000 --> 00:13:10,160
foreign terminals this is an example of

339
00:13:10,160 --> 00:13:14,160
their vx series terminal vx520

340
00:13:14,160 --> 00:13:16,000
let's figure out what can we do with

341
00:13:16,000 --> 00:13:17,519
this curvature

342
00:13:17,519 --> 00:13:20,480
the entire vx product client uses vx5

343
00:13:20,480 --> 00:13:21,920
operating system

344
00:13:21,920 --> 00:13:24,160
it is proprietary one as in previous

345
00:13:24,160 --> 00:13:25,360
example

346
00:13:25,360 --> 00:13:27,440
executables for verrex operating system

347
00:13:27,440 --> 00:13:29,440
has dot out extension with their

348
00:13:29,440 --> 00:13:32,240
own binary format and should be signed

349
00:13:32,240 --> 00:13:35,600
in order to be executed on the pin pad

350
00:13:35,600 --> 00:13:37,839
the default password for this type of

351
00:13:37,839 --> 00:13:40,160
pin pair discussed many many times but

352
00:13:40,160 --> 00:13:41,600
no one changes it

353
00:13:41,600 --> 00:13:44,320
you can find the same password even in

354
00:13:44,320 --> 00:13:45,440
ancient

355
00:13:45,440 --> 00:13:48,560
zone xl pin pads from 18th of previous

356
00:13:48,560 --> 00:13:50,000
century

357
00:13:50,000 --> 00:13:52,000
to enter the service mode you have to

358
00:13:52,000 --> 00:13:53,360
press f2 and

359
00:13:53,360 --> 00:13:56,560
f4 keys during the boot of pin pad

360
00:13:56,560 --> 00:13:59,680
and enter the password this mod allows

361
00:13:59,680 --> 00:14:00,480
to modify

362
00:14:00,480 --> 00:14:03,120
internal variables and obtain technical

363
00:14:03,120 --> 00:14:04,320
information about

364
00:14:04,320 --> 00:14:07,519
the exact pin pad model and text install

365
00:14:07,519 --> 00:14:09,199
updates

366
00:14:09,199 --> 00:14:12,240
example of such variable is go variable

367
00:14:12,240 --> 00:14:14,399
it should contain an executable file

368
00:14:14,399 --> 00:14:16,720
name for autorun when terminal

369
00:14:16,720 --> 00:14:20,320
return is turned on

370
00:14:21,279 --> 00:14:24,399
the vx5 base terminal has a file system

371
00:14:24,399 --> 00:14:26,399
divided to multiple drives

372
00:14:26,399 --> 00:14:28,320
some of them mentioned in documentation

373
00:14:28,320 --> 00:14:29,680
but some of them

374
00:14:29,680 --> 00:14:32,000
are used internally by the vendor and

375
00:14:32,000 --> 00:14:33,519
are contained

376
00:14:33,519 --> 00:14:36,320
run drive some partition on non-flash

377
00:14:36,320 --> 00:14:37,279
drive

378
00:14:37,279 --> 00:14:39,519
drives related to boot block and

379
00:14:39,519 --> 00:14:42,000
additional file systems

380
00:14:42,000 --> 00:14:44,480
the drives mentioned below the list are

381
00:14:44,480 --> 00:14:45,839
marked as reserved and

382
00:14:45,839 --> 00:14:47,839
written by a variac separating system

383
00:14:47,839 --> 00:14:49,920
during production

384
00:14:49,920 --> 00:14:51,839
this is very interesting thing because

385
00:14:51,839 --> 00:14:53,839
we haven't found any useful information

386
00:14:53,839 --> 00:14:55,600
related to these drives

387
00:14:55,600 --> 00:14:59,360
in any sources in the recent reason

388
00:14:59,360 --> 00:15:01,680
we paid attention to them and found some

389
00:15:01,680 --> 00:15:04,399
gifts from developers

390
00:15:04,399 --> 00:15:07,519
we all know that all executable files

391
00:15:07,519 --> 00:15:10,000
should have their digital signatures but

392
00:15:10,000 --> 00:15:10,639
the drive

393
00:15:10,639 --> 00:15:14,240
t is another case its contents

394
00:15:14,240 --> 00:15:18,480
can be modified and all the binaries

395
00:15:18,480 --> 00:15:20,800
you can find there are trusted by

396
00:15:20,800 --> 00:15:22,959
operating system by default

397
00:15:22,959 --> 00:15:25,360
you can modify the configuration file on

398
00:15:25,360 --> 00:15:26,079
file system

399
00:15:26,079 --> 00:15:29,759
menu in order to execute any of dot out

400
00:15:29,759 --> 00:15:32,399
files from drive t

401
00:15:32,399 --> 00:15:35,120
the most interesting of findings on the

402
00:15:35,120 --> 00:15:37,440
internal and undocumented file system is

403
00:15:37,440 --> 00:15:37,759
the

404
00:15:37,759 --> 00:15:41,440
shell binary probably a once upon time

405
00:15:41,440 --> 00:15:44,560
this was used for recovery and debugging

406
00:15:44,560 --> 00:15:46,399
but now it's just legacy piece of

407
00:15:46,399 --> 00:15:48,399
executable code

408
00:15:48,399 --> 00:15:51,600
to execute it we should modify go and r

409
00:15:51,600 --> 00:15:52,560
variable

410
00:15:52,560 --> 00:15:55,839
as you can see on this slide

411
00:15:56,639 --> 00:15:58,399
the results of this modification is the

412
00:15:58,399 --> 00:16:00,240
following instead of merchant

413
00:16:00,240 --> 00:16:02,240
application the pin parts cited the kind

414
00:16:02,240 --> 00:16:03,360
of shell

415
00:16:03,360 --> 00:16:05,600
it is accessible via serial port and

416
00:16:05,600 --> 00:16:07,360
maintenance cable

417
00:16:07,360 --> 00:16:10,240
it has an ability to run signed binaries

418
00:16:10,240 --> 00:16:12,160
list and dump contents

419
00:16:12,160 --> 00:16:15,440
of the file system upload new files

420
00:16:15,440 --> 00:16:19,519
to the pin pad and some other comments

421
00:16:19,519 --> 00:16:21,519
it is very useful but we still don't

422
00:16:21,519 --> 00:16:22,800
have an ability to run

423
00:16:22,800 --> 00:16:26,800
our unsigned code as a result we can

424
00:16:26,800 --> 00:16:28,800
upload any files execute

425
00:16:28,800 --> 00:16:31,120
signed binaries modifier configuration

426
00:16:31,120 --> 00:16:32,399
of the device

427
00:16:32,399 --> 00:16:34,639
but we are still limited by digital

428
00:16:34,639 --> 00:16:36,639
signature checks

429
00:16:36,639 --> 00:16:39,040
in this case we already have extended

430
00:16:39,040 --> 00:16:40,000
user input

431
00:16:40,000 --> 00:16:42,720
from the merchant application to some

432
00:16:42,720 --> 00:16:44,399
internal commands

433
00:16:44,399 --> 00:16:46,320
once a merged application is limited to

434
00:16:46,320 --> 00:16:49,199
the encrypted tms server interaction

435
00:16:49,199 --> 00:16:52,240
and whereas from bank to bank let's

436
00:16:52,240 --> 00:16:55,360
focus to vendor specific issues

437
00:16:55,360 --> 00:16:58,320
we need to look what can we do with some

438
00:16:58,320 --> 00:17:01,120
shell commands

439
00:17:01,360 --> 00:17:03,839
when we tried to file the user input for

440
00:17:03,839 --> 00:17:04,880
some comments

441
00:17:04,880 --> 00:17:07,919
we've got a crash we passed too many

442
00:17:07,919 --> 00:17:08,640
symbols

443
00:17:08,640 --> 00:17:10,880
to shell command and we got classic

444
00:17:10,880 --> 00:17:13,199
buffer overflow

445
00:17:13,199 --> 00:17:17,280
also useful scene is in this crash

446
00:17:17,280 --> 00:17:19,919
is output on the display we can see

447
00:17:19,919 --> 00:17:21,359
crash addresses

448
00:17:21,359 --> 00:17:24,880
and some register contents as you may be

449
00:17:24,880 --> 00:17:28,400
noticed 13 in hex

450
00:17:28,400 --> 00:17:32,000
in the least significant bit of cpsr

451
00:17:32,000 --> 00:17:35,039
register means that we got a crash in

452
00:17:35,039 --> 00:17:36,640
supervisor mode

453
00:17:36,640 --> 00:17:40,000
it equals to the crash in vx5 operating

454
00:17:40,000 --> 00:17:42,640
system kernel

455
00:17:42,640 --> 00:17:45,039
the investigation of this crash points

456
00:17:45,039 --> 00:17:46,880
as to buffer overflow

457
00:17:46,880 --> 00:17:50,480
inverse operating system system call

458
00:17:50,480 --> 00:17:53,600
as you can you can see on the cd code

459
00:17:53,600 --> 00:17:56,000
there is a classical memory copy mistake

460
00:17:56,000 --> 00:17:57,440
on the stack

461
00:17:57,440 --> 00:18:00,240
additionally it is needed to be said

462
00:18:00,240 --> 00:18:01,039
that

463
00:18:01,039 --> 00:18:03,200
there is no measures turned on in order

464
00:18:03,200 --> 00:18:05,520
to prevent code execution

465
00:18:05,520 --> 00:18:08,000
finally we have got a code execution on

466
00:18:08,000 --> 00:18:09,120
any vertex

467
00:18:09,120 --> 00:18:12,400
device because they all have the same

468
00:18:12,400 --> 00:18:13,520
code base

469
00:18:13,520 --> 00:18:15,520
but another interesting thing is the

470
00:18:15,520 --> 00:18:19,280
case in the boot chain

471
00:18:19,440 --> 00:18:21,760
every window reinvented their own boot

472
00:18:21,760 --> 00:18:22,640
order

473
00:18:22,640 --> 00:18:25,360
in the case of pin pad devices sometimes

474
00:18:25,360 --> 00:18:26,799
the boot order chain

475
00:18:26,799 --> 00:18:30,640
is very long it also has a lot of legacy

476
00:18:30,640 --> 00:18:32,320
because almost all of these

477
00:18:32,320 --> 00:18:34,960
operating systems developed before

478
00:18:34,960 --> 00:18:36,960
traditional secure boot approach became

479
00:18:36,960 --> 00:18:38,400
a mainstream

480
00:18:38,400 --> 00:18:40,559
after reset a zero stage boot loader

481
00:18:40,559 --> 00:18:42,400
should be started

482
00:18:42,400 --> 00:18:45,520
usually it is located inside mcu in form

483
00:18:45,520 --> 00:18:47,200
of mask rom

484
00:18:47,200 --> 00:18:49,600
it loads the next step bootloader from

485
00:18:49,600 --> 00:18:50,880
flash memory

486
00:18:50,880 --> 00:18:53,600
and checks its cryptographic signature

487
00:18:53,600 --> 00:18:55,280
using the key stored

488
00:18:55,280 --> 00:19:00,400
in otp rom and any other secure memory

489
00:19:00,400 --> 00:19:02,720
every next bootloader also should check

490
00:19:02,720 --> 00:19:04,960
the cryptographic signature of

491
00:19:04,960 --> 00:19:08,640
every loaded piece of code etc etc

492
00:19:08,640 --> 00:19:10,960
finally when operating system loads an

493
00:19:10,960 --> 00:19:12,320
application it also

494
00:19:12,320 --> 00:19:15,840
should check its signature

495
00:19:16,080 --> 00:19:18,320
now you see the works operating system

496
00:19:18,320 --> 00:19:19,280
terminal

497
00:19:19,280 --> 00:19:22,840
boot log output internally it is called

498
00:19:22,840 --> 00:19:26,720
sbi as you may see it can work with usb

499
00:19:26,720 --> 00:19:27,760
sticks and

500
00:19:27,760 --> 00:19:30,000
in this case it loads works operating

501
00:19:30,000 --> 00:19:31,600
system kernel

502
00:19:31,600 --> 00:19:33,200
please look at the operating system

503
00:19:33,200 --> 00:19:35,120
kernel output

504
00:19:35,120 --> 00:19:37,679
here you can see the broadcom cpu model

505
00:19:37,679 --> 00:19:38,480
that

506
00:19:38,480 --> 00:19:40,400
was previously rebranded to internal

507
00:19:40,400 --> 00:19:42,080
verify name

508
00:19:42,080 --> 00:19:44,640
this bootloader is located at the start

509
00:19:44,640 --> 00:19:46,799
of non-flash memory

510
00:19:46,799 --> 00:19:48,960
the purpose of interaction with usb

511
00:19:48,960 --> 00:19:49,840
flash is factor

512
00:19:49,840 --> 00:19:53,520
restore if usb stick is recognized

513
00:19:53,520 --> 00:19:56,240
it goes to look for science script file

514
00:19:56,240 --> 00:19:58,720
that executes a sequence of actions to

515
00:19:58,720 --> 00:19:59,120
burn

516
00:19:59,120 --> 00:20:02,640
you operating system kernel for example

517
00:20:02,640 --> 00:20:04,400
another interesting ability of this

518
00:20:04,400 --> 00:20:07,200
script is to put the bootloader to low

519
00:20:07,200 --> 00:20:09,360
level command line interface

520
00:20:09,360 --> 00:20:12,720
however we don't have any examples of

521
00:20:12,720 --> 00:20:15,760
science scripts

522
00:20:15,840 --> 00:20:18,240
when we had a look into bootloader we

523
00:20:18,240 --> 00:20:18,960
found

524
00:20:18,960 --> 00:20:22,720
some protocol handler if you dive deeper

525
00:20:22,720 --> 00:20:24,000
we faced with the

526
00:20:24,000 --> 00:20:26,320
same protocol as used in usual

527
00:20:26,320 --> 00:20:28,720
maintenance for terminal loading

528
00:20:28,720 --> 00:20:31,360
the utility for this protocol is called

529
00:20:31,360 --> 00:20:32,559
ddl

530
00:20:32,559 --> 00:20:36,000
and can be found in the internet

531
00:20:36,000 --> 00:20:38,559
and finally there is another classic

532
00:20:38,559 --> 00:20:41,679
memory copy related black was found

533
00:20:41,679 --> 00:20:43,679
the weak logic is contained in the

534
00:20:43,679 --> 00:20:45,440
update format parser

535
00:20:45,440 --> 00:20:47,520
and allowed us to write any memory

536
00:20:47,520 --> 00:20:50,080
regions without any restrictions

537
00:20:50,080 --> 00:20:51,919
the most fast way to exploit this

538
00:20:51,919 --> 00:20:54,000
vulnerability is to call restricted part

539
00:20:54,000 --> 00:20:55,760
of bootloader

540
00:20:55,760 --> 00:20:58,240
as we have mentioned before there is

541
00:20:58,240 --> 00:21:00,000
very useful command line interface

542
00:21:00,000 --> 00:21:05,280
parser and now we are able to call it

543
00:21:05,600 --> 00:21:07,280
as you can see this command line

544
00:21:07,280 --> 00:21:09,440
interface prompt called without

545
00:21:09,440 --> 00:21:13,360
valid signal script file this mod allows

546
00:21:13,360 --> 00:21:16,080
us to access the wall file system to

547
00:21:16,080 --> 00:21:17,120
dump and burn

548
00:21:17,120 --> 00:21:20,159
in the regions of flash memory to load

549
00:21:20,159 --> 00:21:21,679
any code into memory

550
00:21:21,679 --> 00:21:24,960
and pass execution to it

551
00:21:24,960 --> 00:21:27,360
as a result this pin pad can be

552
00:21:27,360 --> 00:21:28,400
exploited

553
00:21:28,400 --> 00:21:30,240
using the physical connection before

554
00:21:30,240 --> 00:21:33,840
operating system is loaded

555
00:21:34,159 --> 00:21:37,200
the last case is linux based mx series

556
00:21:37,200 --> 00:21:38,480
very phone

557
00:21:38,480 --> 00:21:42,080
this is one of most recent pin pad model

558
00:21:42,080 --> 00:21:45,039
and it is also pci certified it has

559
00:21:45,039 --> 00:21:46,720
advanced permission settings like

560
00:21:46,720 --> 00:21:47,679
supervisor

561
00:21:47,679 --> 00:21:51,200
user and maintenance mods also the road

562
00:21:51,200 --> 00:21:51,760
user

563
00:21:51,760 --> 00:21:54,159
isn't allowed to get access to different

564
00:21:54,159 --> 00:21:55,200
files on the pin

565
00:21:55,200 --> 00:21:58,799
pad file system during to

566
00:21:58,799 --> 00:22:01,679
role based access control settings we

567
00:22:01,679 --> 00:22:03,919
have already seen the research related

568
00:22:03,919 --> 00:22:04,960
to these models

569
00:22:04,960 --> 00:22:09,039
at dif con 25 three years ago

570
00:22:09,039 --> 00:22:12,080
the mx series of verifone pin pads

571
00:22:12,080 --> 00:22:14,960
already were hacked but in some reasons

572
00:22:14,960 --> 00:22:15,760
we have seen

573
00:22:15,760 --> 00:22:17,840
exactly the same problems on our

574
00:22:17,840 --> 00:22:20,320
projects with the latest firmwares

575
00:22:20,320 --> 00:22:22,400
the exploitation chain is default

576
00:22:22,400 --> 00:22:24,400
password for system mode

577
00:22:24,400 --> 00:22:27,520
command injection in maintenance mode

578
00:22:27,520 --> 00:22:29,760
privilege escalation based on vendor

579
00:22:29,760 --> 00:22:30,720
service

580
00:22:30,720 --> 00:22:33,280
and finally rate condition in role based

581
00:22:33,280 --> 00:22:36,159
access control configuration

582
00:22:36,159 --> 00:22:38,000
this presentation describes all the

583
00:22:38,000 --> 00:22:40,880
steps how to get into this model

584
00:22:40,880 --> 00:22:43,440
but this is not the end of a story about

585
00:22:43,440 --> 00:22:46,320
mx series

586
00:22:46,880 --> 00:22:50,480
in the bootlock we see the same chip

587
00:22:50,480 --> 00:22:55,200
what already known as bcm5a

588
00:22:55,200 --> 00:22:57,120
surprisingly faced with the same

589
00:22:57,120 --> 00:22:58,320
bootloader as

590
00:22:58,320 --> 00:23:01,919
in where x5 pin pads but in this case it

591
00:23:01,919 --> 00:23:04,799
loads not the proprietary kernel model

592
00:23:04,799 --> 00:23:08,720
it loads u-boot finally it has literally

593
00:23:08,720 --> 00:23:09,280
the same

594
00:23:09,280 --> 00:23:11,679
code and can be exploited in the same

595
00:23:11,679 --> 00:23:14,559
way before operating system is loaded

596
00:23:14,559 --> 00:23:17,039
that's almost all about technical parts

597
00:23:17,039 --> 00:23:18,880
of terminal weaponizing

598
00:23:18,880 --> 00:23:21,440
and i am going to pass our virtual floor

599
00:23:21,440 --> 00:23:23,039
to tmur

600
00:23:23,039 --> 00:23:26,320
so now let's try and determine rules

601
00:23:26,320 --> 00:23:29,440
of this post world so i think rule

602
00:23:29,440 --> 00:23:30,159
number one

603
00:23:30,159 --> 00:23:33,120
is that if pci console doesn't require

604
00:23:33,120 --> 00:23:35,440
any specific

605
00:23:35,440 --> 00:23:38,320
thin you probably won't find them in

606
00:23:38,320 --> 00:23:40,640
modern point-of-sale terminals

607
00:23:40,640 --> 00:23:43,679
for example pci console doesn't say that

608
00:23:43,679 --> 00:23:46,960
firmware should be deleted during tamper

609
00:23:46,960 --> 00:23:47,760
protection

610
00:23:47,760 --> 00:23:52,000
and they never delete a

611
00:23:52,000 --> 00:23:54,400
major piece of firmware mostly just

612
00:23:54,400 --> 00:23:55,039
encryption

613
00:23:55,039 --> 00:23:58,320
keys and even with encryption keys

614
00:23:58,320 --> 00:24:00,880
pci doesn't specify how exactly these

615
00:24:00,880 --> 00:24:02,799
keys should be deleted wiped

616
00:24:02,799 --> 00:24:06,080
in most secure way and that's why every

617
00:24:06,080 --> 00:24:08,000
vendor decides to do

618
00:24:08,000 --> 00:24:10,720
their own implementation of deleting

619
00:24:10,720 --> 00:24:11,520
keys

620
00:24:11,520 --> 00:24:13,919
and many more discrepancies you can find

621
00:24:13,919 --> 00:24:15,840
in in different vendors

622
00:24:15,840 --> 00:24:19,279
so rule number two i guess is that

623
00:24:19,279 --> 00:24:22,559
uh for many many years

624
00:24:22,559 --> 00:24:26,159
vendors are trying to do proprietary

625
00:24:26,159 --> 00:24:27,039
everything they

626
00:24:27,039 --> 00:24:29,760
did proprietary operating system

627
00:24:29,760 --> 00:24:30,960
specific

628
00:24:30,960 --> 00:24:33,600
custom outputs physical outputs

629
00:24:33,600 --> 00:24:35,200
proprietary protocols

630
00:24:35,200 --> 00:24:37,919
they had a lot of special modes and kill

631
00:24:37,919 --> 00:24:38,720
switches

632
00:24:38,720 --> 00:24:41,360
which allowed them to get access to

633
00:24:41,360 --> 00:24:43,440
maintenance and so on and so on

634
00:24:43,440 --> 00:24:46,000
and as you can see they didn't bring

635
00:24:46,000 --> 00:24:47,039
them

636
00:24:47,039 --> 00:24:51,200
to a very good end in the end so

637
00:24:51,200 --> 00:24:54,480
preparatory software is not the best way

638
00:24:54,480 --> 00:24:58,080
to maintain security uh it's quite

639
00:24:58,080 --> 00:25:00,240
interesting to look at what can

640
00:25:00,240 --> 00:25:02,720
and can be done with two groups of

641
00:25:02,720 --> 00:25:03,360
devices

642
00:25:03,360 --> 00:25:05,520
you see on verifone you don't have

643
00:25:05,520 --> 00:25:08,000
dedicated chip for cryptography

644
00:25:08,000 --> 00:25:10,880
where ingenica actually has a specific

645
00:25:10,880 --> 00:25:13,600
chip where all cryptographic features

646
00:25:13,600 --> 00:25:17,120
functions are executed and

647
00:25:17,120 --> 00:25:19,120
the only one difference is that you can

648
00:25:19,120 --> 00:25:21,520
actually clone terminals

649
00:25:21,520 --> 00:25:23,440
in joining the terminals and you can't

650
00:25:23,440 --> 00:25:25,679
keep the persistency after rebooting

651
00:25:25,679 --> 00:25:27,360
so which time you need to compromise

652
00:25:27,360 --> 00:25:30,240
device once it's been turned on and off

653
00:25:30,240 --> 00:25:33,360
however you still are able to

654
00:25:33,360 --> 00:25:35,760
clone cards called pin calls and track

655
00:25:35,760 --> 00:25:36,799
to data so

656
00:25:36,799 --> 00:25:39,520
how is this possible if device use a

657
00:25:39,520 --> 00:25:40,480
dedicated

658
00:25:40,480 --> 00:25:42,240
chip for encryption which can't be

659
00:25:42,240 --> 00:25:44,159
compromised you see

660
00:25:44,159 --> 00:25:46,640
if you will think about that you would

661
00:25:46,640 --> 00:25:47,360
assume

662
00:25:47,360 --> 00:25:50,880
that once pin code is entered on on a

663
00:25:50,880 --> 00:25:51,600
pin part

664
00:25:51,600 --> 00:25:53,840
information is sent directly to that

665
00:25:53,840 --> 00:25:55,360
dedicated chip

666
00:25:55,360 --> 00:25:58,080
where it has been encrypted sent to the

667
00:25:58,080 --> 00:25:58,960
main

668
00:25:58,960 --> 00:26:01,120
application and then it will be sent

669
00:26:01,120 --> 00:26:02,480
over the internet

670
00:26:02,480 --> 00:26:05,279
uh to the issuance acquiring bank

671
00:26:05,279 --> 00:26:06,640
however in fact

672
00:26:06,640 --> 00:26:10,000
it's not uh that in fact

673
00:26:10,000 --> 00:26:13,440
information from from the pinpat is sent

674
00:26:13,440 --> 00:26:16,000
to the main application and only after

675
00:26:16,000 --> 00:26:18,960
that main application communicate with a

676
00:26:18,960 --> 00:26:22,240
dedicated chip so ping so

677
00:26:22,240 --> 00:26:24,960
pin code will be encrypted and then send

678
00:26:24,960 --> 00:26:27,039
over the internet already encapsulated

679
00:26:27,039 --> 00:26:29,679
because that's the main goal to protect

680
00:26:29,679 --> 00:26:32,159
data

681
00:26:32,559 --> 00:26:35,919
to protect cardholder details from

682
00:26:35,919 --> 00:26:38,320
being intercepted over the internet over

683
00:26:38,320 --> 00:26:40,240
the internet not

684
00:26:40,240 --> 00:26:43,760
on the point of cell terminal and as you

685
00:26:43,760 --> 00:26:44,799
can imagine

686
00:26:44,799 --> 00:26:48,240
if hackers will be able to

687
00:26:48,240 --> 00:26:51,679
maintain and run a specific malware

688
00:26:51,679 --> 00:26:52,000
which

689
00:26:52,000 --> 00:26:55,440
will be looking in memory

690
00:26:55,440 --> 00:26:58,720
and collect pin codes or track 2 data

691
00:26:58,720 --> 00:27:01,520
this information can be stolen before it

692
00:27:01,520 --> 00:27:04,080
will be encrypted therefore

693
00:27:04,080 --> 00:27:07,200
data protection is not as good as you

694
00:27:07,200 --> 00:27:09,919
would have expected

695
00:27:09,919 --> 00:27:12,799
now to make a fully functional clone of

696
00:27:12,799 --> 00:27:14,000
the terminal

697
00:27:14,000 --> 00:27:17,360
you need to steal

698
00:27:17,360 --> 00:27:20,720
or extract a few different

699
00:27:20,720 --> 00:27:23,760
encryption keys so it should be key for

700
00:27:23,760 --> 00:27:26,159
network encryption for encrypting the

701
00:27:26,159 --> 00:27:27,039
pin

702
00:27:27,039 --> 00:27:29,520
message authentication code keys and so

703
00:27:29,520 --> 00:27:30,320
on and so on

704
00:27:30,320 --> 00:27:32,240
but once you've done it you'll be able

705
00:27:32,240 --> 00:27:34,080
to create a functional clone of the

706
00:27:34,080 --> 00:27:36,000
terminal which can be used

707
00:27:36,000 --> 00:27:40,320
to mean to facilitate more fraud

708
00:27:41,039 --> 00:27:43,520
you can read more about that in in our

709
00:27:43,520 --> 00:27:47,120
white paper on our website

710
00:27:47,360 --> 00:27:50,720
initially when we started this project

711
00:27:50,720 --> 00:27:54,159
it came from the bank who said to us

712
00:27:54,159 --> 00:27:57,360
hey what uh hackers can do

713
00:27:57,360 --> 00:28:00,240
with compromised terminals can they

714
00:28:00,240 --> 00:28:02,000
facilitate fraud can they

715
00:28:02,000 --> 00:28:05,120
do some fraudulent transactions we we

716
00:28:05,120 --> 00:28:07,200
won't be able to expect

717
00:28:07,200 --> 00:28:09,919
and this is how this research started

718
00:28:09,919 --> 00:28:10,720
and we actually

719
00:28:10,720 --> 00:28:14,559
proved to to the bank that uh

720
00:28:14,559 --> 00:28:17,120
once you compromise the device you can

721
00:28:17,120 --> 00:28:17,760
do

722
00:28:17,760 --> 00:28:20,880
a lot of things with cards stolen

723
00:28:20,880 --> 00:28:24,880
data and and uh do a lot of unauthorized

724
00:28:24,880 --> 00:28:25,760
transactions

725
00:28:25,760 --> 00:28:26,960
which can't be done in normal

726
00:28:26,960 --> 00:28:29,360
circumstances we actually even made a

727
00:28:29,360 --> 00:28:31,440
separate research on that topic

728
00:28:31,440 --> 00:28:34,000
it's available on paymentvillage.org you

729
00:28:34,000 --> 00:28:35,120
can read about that

730
00:28:35,120 --> 00:28:39,039
so it's basically about how

731
00:28:39,039 --> 00:28:42,320
transactions can be done purchases

732
00:28:42,320 --> 00:28:43,760
without knowing pain

733
00:28:43,760 --> 00:28:46,320
and how this affects modern requirements

734
00:28:46,320 --> 00:28:48,880
of psd2 legislation about contactless

735
00:28:48,880 --> 00:28:51,279
transactions

736
00:28:51,279 --> 00:28:54,320
so a lot of questions remain

737
00:28:54,320 --> 00:28:56,799
at this point for example we still i'm

738
00:28:56,799 --> 00:28:57,440
not sure

739
00:28:57,440 --> 00:29:00,480
how many devices are on the market and

740
00:29:00,480 --> 00:29:02,640
are still vulnerable because each device

741
00:29:02,640 --> 00:29:04,240
should be updated

742
00:29:04,240 --> 00:29:07,360
almost manually and uh for example

743
00:29:07,360 --> 00:29:09,279
ingenicon never presented

744
00:29:09,279 --> 00:29:12,080
any updates to us so we don't even know

745
00:29:12,080 --> 00:29:13,919
how secure they are

746
00:29:13,919 --> 00:29:17,520
uh also we don't know is it actually

747
00:29:17,520 --> 00:29:20,159
possible to downgrade firmware on

748
00:29:20,159 --> 00:29:22,799
ingenica or verifying point of sales

749
00:29:22,799 --> 00:29:24,840
because we for example still have

750
00:29:24,840 --> 00:29:27,360
vulnerable firmwares and as you can

751
00:29:27,360 --> 00:29:28,240
imagine

752
00:29:28,240 --> 00:29:32,159
downgraded attacks are quite popular for

753
00:29:32,159 --> 00:29:35,360
different type of firmware so i would

754
00:29:35,360 --> 00:29:36,000
like to say

755
00:29:36,000 --> 00:29:39,279
thanks to all of our team this work

756
00:29:39,279 --> 00:29:41,360
would not be done without them so thank

757
00:29:41,360 --> 00:29:42,480
you so much

758
00:29:42,480 --> 00:29:44,720
uh if you have any questions you can

759
00:29:44,720 --> 00:29:46,399
reach us out twitter

760
00:29:46,399 --> 00:29:49,720
email uh or send a form on

761
00:29:49,720 --> 00:29:51,120
paymentvillage.org

762
00:29:51,120 --> 00:29:55,840
so thank you thanks everyone

