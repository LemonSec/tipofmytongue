1
00:00:15,440 --> 00:00:15,839
hi

2
00:00:15,839 --> 00:00:19,039
everyone welcome to my presentation

3
00:00:19,039 --> 00:00:21,760
today i want to share a story about how

4
00:00:21,760 --> 00:00:22,400
i found

5
00:00:22,400 --> 00:00:25,039
16 microsoft office excel

6
00:00:25,039 --> 00:00:26,480
vulnerabilities

7
00:00:26,480 --> 00:00:31,359
in 6 months i'm changing

8
00:00:31,359 --> 00:00:34,559
let me first introduce myself i am a

9
00:00:34,559 --> 00:00:36,480
security researcher expert

10
00:00:36,480 --> 00:00:39,760
from dbapp security leading lab

11
00:00:39,760 --> 00:00:42,800
i previously worked at chi hu stanley

12
00:00:42,800 --> 00:00:45,600
advanced street analyze team

13
00:00:45,600 --> 00:00:49,320
i once spoke at bluehead shanghai

14
00:00:49,320 --> 00:00:52,320
2016-19 conference

15
00:00:52,320 --> 00:00:55,039
i mainly focused on vulnerability

16
00:00:55,039 --> 00:00:55,760
research

17
00:00:55,760 --> 00:00:59,039
and in the wild silver day hunting

18
00:00:59,039 --> 00:01:02,000
i have gained more than 25 cv

19
00:01:02,000 --> 00:01:03,120
acknowledgements

20
00:01:03,120 --> 00:01:06,320
from microsoft and adobe and

21
00:01:06,320 --> 00:01:09,680
i was ranked as top 39

22
00:01:09,680 --> 00:01:12,960
in the 2020 msrc most vendor

23
00:01:12,960 --> 00:01:16,640
the most valuable security research list

24
00:01:16,640 --> 00:01:19,680
i with my team have captured several in

25
00:01:19,680 --> 00:01:20,320
the world

26
00:01:20,320 --> 00:01:23,200
zero days on windows platform in the

27
00:01:23,200 --> 00:01:23,600
past

28
00:01:23,600 --> 00:01:27,200
three years including office ie

29
00:01:27,200 --> 00:01:30,560
flash and windows kernel the most

30
00:01:30,560 --> 00:01:31,280
recently

31
00:01:31,280 --> 00:01:34,799
in the world zero day we hunted is cve

32
00:01:34,799 --> 00:01:38,799
2021 1732

33
00:01:38,799 --> 00:01:43,159
this is a win 32k privilege escalation

34
00:01:43,159 --> 00:01:44,479
vulnerabilities

35
00:01:44,479 --> 00:01:47,759
which affects windows 10 18

36
00:01:47,759 --> 00:01:54,799
3 to windows 10 2002.

37
00:01:54,799 --> 00:01:58,079
this is the agenda of my presentation i

38
00:01:58,079 --> 00:02:00,799
basically will tell my story in this

39
00:02:00,799 --> 00:02:02,880
order

40
00:02:02,880 --> 00:02:05,920
at the beginning of 2020 i decided to

41
00:02:05,920 --> 00:02:06,320
learn

42
00:02:06,320 --> 00:02:09,280
something about fuzzing i first read

43
00:02:09,280 --> 00:02:10,239
some papers

44
00:02:10,239 --> 00:02:13,680
about file including finding security

45
00:02:13,680 --> 00:02:14,800
vulnerabilities

46
00:02:14,800 --> 00:02:18,080
with modern fuzzing technologies

47
00:02:18,080 --> 00:02:20,640
after learning the basic concepts about

48
00:02:20,640 --> 00:02:21,520
fuzzing

49
00:02:21,520 --> 00:02:24,400
i decided to do some fusing job on

50
00:02:24,400 --> 00:02:26,640
windows platform

51
00:02:26,640 --> 00:02:29,440
my goal was to get a cv number from

52
00:02:29,440 --> 00:02:32,239
microsoft

53
00:02:34,840 --> 00:02:36,720
surviving

54
00:02:36,720 --> 00:02:39,200
there are many further tools for linux

55
00:02:39,200 --> 00:02:40,000
platform

56
00:02:40,000 --> 00:02:44,400
such as afl live faster and hunger file

57
00:02:44,400 --> 00:02:47,280
but there are less faster on windows

58
00:02:47,280 --> 00:02:48,560
platform

59
00:02:48,560 --> 00:02:51,920
when asl is a great tool however

60
00:02:51,920 --> 00:02:54,640
it cannot handle large and complex

61
00:02:54,640 --> 00:02:55,519
software

62
00:02:55,519 --> 00:02:58,720
such as microsoft office

63
00:02:58,720 --> 00:03:01,440
over the past three years hungary's own

64
00:03:01,440 --> 00:03:01,920
box

65
00:03:01,920 --> 00:03:06,080
a windows platform were found by afl

66
00:03:06,080 --> 00:03:08,319
which means there are basically no

67
00:03:08,319 --> 00:03:10,319
chance to find more bugs

68
00:03:10,319 --> 00:03:13,360
through it some researchers

69
00:03:13,360 --> 00:03:16,480
make some improvements on wing fl

70
00:03:16,480 --> 00:03:19,440
and find more bugs based on their custom

71
00:03:19,440 --> 00:03:21,360
wing afm

72
00:03:21,360 --> 00:03:24,319
from my perspective i want to choose a

73
00:03:24,319 --> 00:03:25,200
target

74
00:03:25,200 --> 00:03:28,480
which is less targeted by with fm

75
00:03:28,480 --> 00:03:33,840
and i am familiar with this target

76
00:03:35,040 --> 00:03:37,440
there are several candidates adobe

77
00:03:37,440 --> 00:03:38,319
reader

78
00:03:38,319 --> 00:03:42,319
internet explorer and microsoft office

79
00:03:42,319 --> 00:03:46,159
let's review them one by one

80
00:03:46,159 --> 00:03:49,840
adobe reader was heavily fast by wing fl

81
00:03:49,840 --> 00:03:53,120
at the year of 2018. internet

82
00:03:53,120 --> 00:03:56,080
explorer was heavily fast at the matter

83
00:03:56,080 --> 00:03:57,319
during

84
00:03:57,319 --> 00:04:01,760
2017 2018 and 2019

85
00:04:01,760 --> 00:04:04,159
few people have done effective office

86
00:04:04,159 --> 00:04:05,599
funding work

87
00:04:05,599 --> 00:04:08,560
but there do have some such as jacob's

88
00:04:08,560 --> 00:04:10,000
couples presentation

89
00:04:10,000 --> 00:04:15,840
and poc 2018

90
00:04:16,079 --> 00:04:19,600
it seems that microsoft office is a good

91
00:04:19,600 --> 00:04:21,279
candidate for me

92
00:04:21,279 --> 00:04:25,440
but here comes two questions number one

93
00:04:25,440 --> 00:04:27,759
is it possible to find a park in

94
00:04:27,759 --> 00:04:29,440
microsoft office

95
00:04:29,440 --> 00:04:31,840
and several months for a newcomer

96
00:04:31,840 --> 00:04:33,120
advising

97
00:04:33,120 --> 00:04:36,880
number two microsoft office consists of

98
00:04:36,880 --> 00:04:38,720
multiply components

99
00:04:38,720 --> 00:04:42,400
should i choose word point point excel

100
00:04:42,400 --> 00:04:45,840
or other component too fast

101
00:04:45,840 --> 00:04:49,280
let me first answer the first question

102
00:04:49,280 --> 00:04:52,560
i am a newcomer in fasting but i have

103
00:04:52,560 --> 00:04:54,720
extensive experience in office

104
00:04:54,720 --> 00:04:56,880
vulnerability analyze

105
00:04:56,880 --> 00:04:59,919
so it's possible for me to find a bug in

106
00:04:59,919 --> 00:05:03,440
my in microsoft office

107
00:05:03,440 --> 00:05:06,320
to answer the second question i continue

108
00:05:06,320 --> 00:05:08,960
i counted the microsoft office cve

109
00:05:08,960 --> 00:05:10,160
numbers

110
00:05:10,160 --> 00:05:14,800
and their distribution from 2017 to 2020

111
00:05:14,800 --> 00:05:17,600
the initial statistical time is up to

112
00:05:17,600 --> 00:05:18,240
april

113
00:05:18,240 --> 00:05:21,520
2020 and i updated

114
00:05:21,520 --> 00:05:24,560
the static the statistical data in june

115
00:05:24,560 --> 00:05:27,440
2020

116
00:05:28,320 --> 00:05:31,440
here is up to jin 2020 statistical

117
00:05:31,440 --> 00:05:33,600
results

118
00:05:33,600 --> 00:05:37,039
note the column of phase represents

119
00:05:37,039 --> 00:05:39,919
office vulnerabilities that do not

120
00:05:39,919 --> 00:05:40,639
specify

121
00:05:40,639 --> 00:05:43,840
specific components which means

122
00:05:43,840 --> 00:05:47,360
that there may be word point point excel

123
00:05:47,360 --> 00:05:52,960
outlook or other vulnerabilities

124
00:05:52,960 --> 00:05:55,360
we can learn something from the above

125
00:05:55,360 --> 00:05:56,639
table

126
00:05:56,639 --> 00:06:00,080
number one around 2018 microsoft

127
00:06:00,080 --> 00:06:03,280
made a change to the to the disclosure

128
00:06:03,280 --> 00:06:03,840
number

129
00:06:03,840 --> 00:06:06,560
of office vulnerabilities to make the

130
00:06:06,560 --> 00:06:09,039
classification more detailed

131
00:06:09,039 --> 00:06:13,840
number two from 2017 to 2020

132
00:06:13,840 --> 00:06:16,600
the excel components has the most

133
00:06:16,600 --> 00:06:17,840
vulnerabilities

134
00:06:17,840 --> 00:06:21,600
almost every year number three

135
00:06:21,600 --> 00:06:24,960
from 2017 to 2020 the powerpoint

136
00:06:24,960 --> 00:06:27,840
component has the least vulnerabilities

137
00:06:27,840 --> 00:06:28,319
almost

138
00:06:28,319 --> 00:06:30,960
every year

139
00:06:31,440 --> 00:06:34,319
if a security research invests the same

140
00:06:34,319 --> 00:06:37,039
amount of time in security testing for

141
00:06:37,039 --> 00:06:39,120
each office component

142
00:06:39,120 --> 00:06:42,800
excel is obviously the most hopeful one

143
00:06:42,800 --> 00:06:45,919
and point point is the list word

144
00:06:45,919 --> 00:06:49,039
and outlook are in the middle if i can

145
00:06:49,039 --> 00:06:50,880
choose only one target

146
00:06:50,880 --> 00:06:56,240
it will be excel so let's find

147
00:07:00,840 --> 00:07:02,800
excel

148
00:07:02,800 --> 00:07:06,800
now i have select excel as my target

149
00:07:06,800 --> 00:07:09,520
before starting fuzzing i need to

150
00:07:09,520 --> 00:07:10,400
evaluate

151
00:07:10,400 --> 00:07:13,039
the visibility of the basic steps

152
00:07:13,039 --> 00:07:13,680
involved

153
00:07:13,680 --> 00:07:17,360
in excel files a common fuzzing process

154
00:07:17,360 --> 00:07:21,440
usually includes the following stages

155
00:07:21,440 --> 00:07:24,639
steve how to collect seed

156
00:07:24,639 --> 00:07:28,400
mutated how to mutate detection

157
00:07:28,400 --> 00:07:31,919
how to catch exceptions chart

158
00:07:31,919 --> 00:07:34,720
how to classify and deduplicate crash

159
00:07:34,720 --> 00:07:36,000
files

160
00:07:36,000 --> 00:07:39,520
reproducer how to reproduce the crash

161
00:07:39,520 --> 00:07:42,800
report how to report the vulnerability

162
00:07:42,800 --> 00:07:44,639
to the vendor

163
00:07:44,639 --> 00:07:48,800
let's examine them one by one

164
00:07:50,560 --> 00:07:53,120
before starting excel i need to collect

165
00:07:53,120 --> 00:07:55,440
some excel files and switch

166
00:07:55,440 --> 00:07:58,240
i've counting the file types involved in

167
00:07:58,240 --> 00:08:00,000
the excel vulnerabilities

168
00:08:00,000 --> 00:08:03,919
announced by zdi in the last three years

169
00:08:03,919 --> 00:08:06,560
i realized that the proportion of

170
00:08:06,560 --> 00:08:07,680
vulnerabilities

171
00:08:07,680 --> 00:08:11,120
in the openxml format is far less than

172
00:08:11,120 --> 00:08:12,160
that of the

173
00:08:12,160 --> 00:08:16,080
ole 2 format so i began to focus on

174
00:08:16,080 --> 00:08:19,840
xls files at some exploration

175
00:08:19,840 --> 00:08:24,239
the source of my space is as follows

176
00:08:24,840 --> 00:08:27,840
here

177
00:08:28,879 --> 00:08:32,320
manifest totally tells us that the more

178
00:08:32,320 --> 00:08:33,599
files are not

179
00:08:33,599 --> 00:08:36,799
better than the biggers better

180
00:08:36,799 --> 00:08:39,360
so i need to minimize the collected

181
00:08:39,360 --> 00:08:41,200
excel files

182
00:08:41,200 --> 00:08:44,880
if the first tool is with fl you can use

183
00:08:44,880 --> 00:08:46,640
the built-in components

184
00:08:46,640 --> 00:08:50,640
to distribute pcs files i don't want to

185
00:08:50,640 --> 00:08:52,240
use win-fl

186
00:08:52,240 --> 00:08:55,360
so i need to implement this function by

187
00:08:55,360 --> 00:08:57,600
myself

188
00:08:57,600 --> 00:09:00,240
while trying to solve the above problem

189
00:09:00,240 --> 00:09:01,600
i saw two blocks

190
00:09:01,600 --> 00:09:05,600
by the group cover unfortunately

191
00:09:05,600 --> 00:09:08,560
at the time of writing this presentation

192
00:09:08,560 --> 00:09:10,480
these blocks are no longer

193
00:09:10,480 --> 00:09:13,920
accessible but i read these two articles

194
00:09:13,920 --> 00:09:14,880
in detail

195
00:09:14,880 --> 00:09:18,399
at that time although it is no longer

196
00:09:18,399 --> 00:09:19,680
possible to obtain

197
00:09:19,680 --> 00:09:21,839
relevant knowledge from the author's

198
00:09:21,839 --> 00:09:22,959
blog

199
00:09:22,959 --> 00:09:26,080
jacob copper once showed his experience

200
00:09:26,080 --> 00:09:30,880
at the poc 2018 conference

201
00:09:32,640 --> 00:09:36,000
however the ideas of crops distillation

202
00:09:36,000 --> 00:09:39,279
are similar between different chores for

203
00:09:39,279 --> 00:09:40,880
the software you want to

204
00:09:40,880 --> 00:09:44,399
fast first select a model then use the

205
00:09:44,399 --> 00:09:46,720
tools at initial stage

206
00:09:46,720 --> 00:09:50,320
to make statistical and model coverage

207
00:09:50,320 --> 00:09:52,640
the goal of this is to select the

208
00:09:52,640 --> 00:09:54,080
smallest number of

209
00:09:54,080 --> 00:09:57,760
files with higher list model coverage

210
00:09:57,760 --> 00:10:00,880
and hope that these files are as small

211
00:10:00,880 --> 00:10:05,200
as possible

212
00:10:05,200 --> 00:10:07,760
with the help of static current and

213
00:10:07,760 --> 00:10:09,519
dynamic execution

214
00:10:09,519 --> 00:10:12,640
i distilled a set of excel saves

215
00:10:12,640 --> 00:10:15,760
in an exact acceptable time

216
00:10:15,760 --> 00:10:20,000
as the initial state for my fuzzy

217
00:10:21,920 --> 00:10:25,040
mutation algorithm is an important part

218
00:10:25,040 --> 00:10:26,000
of fast

219
00:10:26,000 --> 00:10:29,600
and its quality direct affects the

220
00:10:29,600 --> 00:10:31,519
result of fuzz

221
00:10:31,519 --> 00:10:34,079
i transplant the following mutation

222
00:10:34,079 --> 00:10:35,120
algorithms

223
00:10:35,120 --> 00:10:39,440
in congo 5 including beef

224
00:10:39,440 --> 00:10:43,760
increased bite decreased bite negative 5

225
00:10:43,760 --> 00:10:48,320
by its a number column by

226
00:10:48,320 --> 00:10:52,640
80 and sub for the remaining mutation

227
00:10:52,640 --> 00:10:54,560
methods in hunger files

228
00:10:54,560 --> 00:10:58,240
i have to carefully emulate evaluation

229
00:10:58,240 --> 00:11:01,279
i choose not to transplant

230
00:11:01,279 --> 00:11:04,320
i also integrate all the values of the

231
00:11:04,320 --> 00:11:05,680
bytes replacement

232
00:11:05,680 --> 00:11:08,800
part of afl knight further

233
00:11:08,800 --> 00:11:12,079
and handle files and constructed

234
00:11:12,079 --> 00:11:15,839
a mutation values replacement table

235
00:11:15,839 --> 00:11:19,519
covering these three phasors

236
00:11:21,200 --> 00:11:23,519
the detection part can be simply

237
00:11:23,519 --> 00:11:24,560
abstracted

238
00:11:24,560 --> 00:11:28,000
into automatic start of the program open

239
00:11:28,000 --> 00:11:28,800
file

240
00:11:28,800 --> 00:11:32,399
monitor process and catch the exception

241
00:11:32,399 --> 00:11:35,120
there are many good solutions on github

242
00:11:35,120 --> 00:11:35,519
which

243
00:11:35,519 --> 00:11:39,040
are generally implanted by when app

244
00:11:39,040 --> 00:11:42,079
dbg or pydbg

245
00:11:42,079 --> 00:11:44,880
the number gun by jacob's couple is a

246
00:11:44,880 --> 00:11:47,839
good example

247
00:11:48,399 --> 00:11:51,120
in order to improve catch rate of hip

248
00:11:51,120 --> 00:11:52,480
memory access

249
00:11:52,480 --> 00:11:55,920
exceptions i use global flags to enable

250
00:11:55,920 --> 00:11:56,639
page heap

251
00:11:56,639 --> 00:11:59,839
for excel process

252
00:12:01,519 --> 00:12:04,240
during the filing process hundreds of

253
00:12:04,240 --> 00:12:06,880
crash files will be collected

254
00:12:06,880 --> 00:12:09,760
how to effectively classify them is

255
00:12:09,760 --> 00:12:11,120
assigned

256
00:12:11,120 --> 00:12:14,800
based on the existing exiting experience

257
00:12:14,800 --> 00:12:17,600
i mainly pay attention to the following

258
00:12:17,600 --> 00:12:19,440
conditions

259
00:12:19,440 --> 00:12:22,399
number one access valuation the

260
00:12:22,399 --> 00:12:23,839
exception code

261
00:12:23,839 --> 00:12:28,240
is 0x

262
00:12:28,240 --> 00:12:32,320
3 1605

263
00:12:32,320 --> 00:12:34,639
microsoft doesn't accept the state

264
00:12:34,639 --> 00:12:35,600
exertion

265
00:12:35,600 --> 00:12:39,360
vulnerabilities such as zero x

266
00:12:39,360 --> 00:12:43,040
c five zero f

267
00:12:43,040 --> 00:12:46,079
d number two non-zero part turn

268
00:12:46,079 --> 00:12:46,720
reference

269
00:12:46,720 --> 00:12:50,160
exception microsoft doesn't

270
00:12:50,160 --> 00:12:52,160
accept non-pointer reference

271
00:12:52,160 --> 00:12:54,240
vulnerabilities

272
00:12:54,240 --> 00:12:56,720
based on the above consideration my

273
00:12:56,720 --> 00:12:58,399
classification ruler

274
00:12:58,399 --> 00:13:01,760
is to distinguish a non-pointer

275
00:13:01,760 --> 00:13:04,240
reference from a not non-pointer

276
00:13:04,240 --> 00:13:05,440
reference

277
00:13:05,440 --> 00:13:08,399
distinguish access validation from other

278
00:13:08,399 --> 00:13:09,279
exception

279
00:13:09,279 --> 00:13:12,800
types under this ruler those

280
00:13:12,800 --> 00:13:15,839
noun lose not non-pointer with

281
00:13:15,839 --> 00:13:19,040
an exception code of zero

282
00:13:19,040 --> 00:13:22,480
x stay five sixty zero

283
00:13:22,480 --> 00:13:25,600
five are the crash that i need to focus

284
00:13:25,600 --> 00:13:27,839
on

285
00:13:29,200 --> 00:13:32,079
my classification ruler for microsoft

286
00:13:32,079 --> 00:13:34,079
office excel exception

287
00:13:34,079 --> 00:13:36,959
is as follows

288
00:13:37,519 --> 00:13:40,720
non-non-pointer reference including read

289
00:13:40,720 --> 00:13:41,920
access validation

290
00:13:41,920 --> 00:13:44,959
and right access validation

291
00:13:44,959 --> 00:13:46,959
read access validation include

292
00:13:46,959 --> 00:13:48,480
out-of-bound create and

293
00:13:48,480 --> 00:13:50,560
use act free read write access

294
00:13:50,560 --> 00:13:53,199
foundation include add-on boundary write

295
00:13:53,199 --> 00:13:56,800
and use after free write

296
00:13:57,120 --> 00:14:00,079
in terms of real-time synchronization of

297
00:14:00,079 --> 00:14:01,600
the fast results

298
00:14:01,600 --> 00:14:04,880
across multiply virtual machines

299
00:14:04,880 --> 00:14:08,079
i use a ftp server which serves

300
00:14:08,079 --> 00:14:11,279
in a virtual machine as a result server

301
00:14:11,279 --> 00:14:14,880
and install the pui ftp live model in

302
00:14:14,880 --> 00:14:15,519
server

303
00:14:15,519 --> 00:14:18,160
and client

304
00:14:19,920 --> 00:14:22,959
not all crash files can be reproduced

305
00:14:22,959 --> 00:14:26,720
so i write write a reproducer based on

306
00:14:26,720 --> 00:14:28,000
my father

307
00:14:28,000 --> 00:14:31,360
this reproducer is used to reproduce the

308
00:14:31,360 --> 00:14:32,560
crash results

309
00:14:32,560 --> 00:14:34,880
in various four patch office

310
00:14:34,880 --> 00:14:36,320
environments

311
00:14:36,320 --> 00:14:40,639
and record the reproduced results

312
00:14:40,639 --> 00:14:43,680
i make multiply office environments

313
00:14:43,680 --> 00:14:46,959
to reproduce the crash files including

314
00:14:46,959 --> 00:14:50,000
but not limited to this

315
00:14:50,000 --> 00:14:53,600
office 2007 of a 2010

316
00:14:53,600 --> 00:14:57,519
office 2013

317
00:14:57,519 --> 00:15:02,240
of 2016 and only 2019

318
00:15:02,240 --> 00:15:05,360
each version i make a no patch

319
00:15:05,360 --> 00:15:09,600
environment and a full patch environment

320
00:15:09,680 --> 00:15:12,880
for those reproduced by the producer

321
00:15:12,880 --> 00:15:16,560
i will perform some manual check a first

322
00:15:16,560 --> 00:15:17,760
part

323
00:15:17,760 --> 00:15:20,959
these files are regarded as value valid

324
00:15:20,959 --> 00:15:27,040
variability files

325
00:15:27,040 --> 00:15:29,519
when a crash file is successfully

326
00:15:29,519 --> 00:15:30,720
reproduced

327
00:15:30,720 --> 00:15:33,920
it can be automatically generated

328
00:15:33,920 --> 00:15:38,320
a professional report with have a bug id

329
00:15:38,320 --> 00:15:41,440
it should be notes that but id can only

330
00:15:41,440 --> 00:15:43,120
run on windows 10

331
00:15:43,120 --> 00:15:46,959
so a windows 10 plus office environment

332
00:15:46,959 --> 00:15:49,279
with the latest office and full patch

333
00:15:49,279 --> 00:15:50,079
version

334
00:15:50,079 --> 00:15:54,399
it will be made

335
00:15:54,399 --> 00:15:57,680
is the bug id report i generate from

336
00:15:57,680 --> 00:16:01,839
one of my excel vulnerabilities

337
00:16:03,600 --> 00:16:06,560
once you have the bug id report you can

338
00:16:06,560 --> 00:16:08,639
submit the vulnerabilities to

339
00:16:08,639 --> 00:16:12,320
msrc msrc research project

340
00:16:12,320 --> 00:16:16,399
and as follows the specific format

341
00:16:16,399 --> 00:16:19,199
of the vulnerabilities report can be

342
00:16:19,199 --> 00:16:21,360
referred to here

343
00:16:21,360 --> 00:16:24,160
the pro and black id reports can be

344
00:16:24,160 --> 00:16:28,319
applicated as attachments

345
00:16:29,360 --> 00:16:32,480
my entire fast machine is only one

346
00:16:32,480 --> 00:16:33,279
computer

347
00:16:33,279 --> 00:16:36,320
with the following configuration i

348
00:16:36,320 --> 00:16:39,440
7 8 7 0 0

349
00:16:39,440 --> 00:16:44,560
12 cores 16 g ddr3 ram

350
00:16:44,560 --> 00:16:48,399
3 point g primary prefrequence

351
00:16:48,399 --> 00:16:51,680
1t tdd in addition i

352
00:16:51,680 --> 00:16:54,560
also have a laptop for reproduction at

353
00:16:54,560 --> 00:16:56,800
the report generation

354
00:16:56,800 --> 00:17:01,040
these are all my fuzzing equipment

355
00:17:03,279 --> 00:17:06,400
throughout the process i encountered add

356
00:17:06,400 --> 00:17:07,039
to list

357
00:17:07,039 --> 00:17:10,480
the following problems dialog

358
00:17:10,480 --> 00:17:13,679
click virtual machine size speed of

359
00:17:13,679 --> 00:17:14,959
execution

360
00:17:14,959 --> 00:17:18,640
version switching fund advantage

361
00:17:18,640 --> 00:17:21,760
crash management let's

362
00:17:21,760 --> 00:17:25,839
see them one by one the excel software

363
00:17:25,839 --> 00:17:28,880
has various dialog boxes during the

364
00:17:28,880 --> 00:17:30,000
exceeds

365
00:17:30,000 --> 00:17:33,600
executing process some dialog boxes

366
00:17:33,600 --> 00:17:36,240
such as safe mode can be resolved by

367
00:17:36,240 --> 00:17:38,320
clicking the registry

368
00:17:38,320 --> 00:17:41,760
while others need to be manually clicked

369
00:17:41,760 --> 00:17:44,799
my way of solving these dialog boxes

370
00:17:44,799 --> 00:17:47,840
are as follows number one

371
00:17:47,840 --> 00:17:50,799
before each start of the file or the end

372
00:17:50,799 --> 00:17:51,760
of the file

373
00:17:51,760 --> 00:17:54,880
clean up the relevant registry item

374
00:17:54,880 --> 00:17:58,160
number two at a simple simulation click

375
00:17:58,160 --> 00:17:59,919
toll during the filing

376
00:17:59,919 --> 00:18:02,640
such as starting a separate thread for

377
00:18:02,640 --> 00:18:03,280
window

378
00:18:03,280 --> 00:18:06,559
in enumeration and dialog clip

379
00:18:06,559 --> 00:18:09,440
a good example is google sandbox human

380
00:18:09,440 --> 00:18:11,679
plugin

381
00:18:11,679 --> 00:18:14,480
these messengers can only handle most of

382
00:18:14,480 --> 00:18:18,080
the dialogue boxyclick problems

383
00:18:18,080 --> 00:18:20,880
there are still some dialog boxes that i

384
00:18:20,880 --> 00:18:21,919
cannot

385
00:18:21,919 --> 00:18:25,280
solve but there is need there is no need

386
00:18:25,280 --> 00:18:26,640
to be perfect

387
00:18:26,640 --> 00:18:30,240
it is enough to do this

388
00:18:33,120 --> 00:18:36,559
i use vmworld too fast during the filing

389
00:18:36,559 --> 00:18:37,600
process

390
00:18:37,600 --> 00:18:40,640
a large number of files are generated in

391
00:18:40,640 --> 00:18:42,400
each virtual machine

392
00:18:42,400 --> 00:18:45,679
these files will gradually increase the

393
00:18:45,679 --> 00:18:48,080
size of each virtual machine

394
00:18:48,080 --> 00:18:51,840
over time the disk overhead of the host

395
00:18:51,840 --> 00:18:54,960
will increase significantly usually

396
00:18:54,960 --> 00:18:56,400
several to thousands of

397
00:18:56,400 --> 00:19:00,080
gbs per virtual machine

398
00:19:00,400 --> 00:19:03,760
in order to solve these problems

399
00:19:03,760 --> 00:19:07,039
you must ensure that current fuzzer has

400
00:19:07,039 --> 00:19:09,520
effectively cleaned up the files

401
00:19:09,520 --> 00:19:12,480
generated by the previous files before

402
00:19:12,480 --> 00:19:14,960
starting the next file

403
00:19:14,960 --> 00:19:18,880
mainly the following folders

404
00:19:19,280 --> 00:19:21,919
otherwise once the number of files

405
00:19:21,919 --> 00:19:22,720
execution

406
00:19:22,720 --> 00:19:25,360
increase the size of the virtual machine

407
00:19:25,360 --> 00:19:26,720
will explode

408
00:19:26,720 --> 00:19:30,320
as a result faster will stop

409
00:19:30,320 --> 00:19:33,600
in addition to above operations i also

410
00:19:33,600 --> 00:19:34,960
dism

411
00:19:34,960 --> 00:19:38,559
the ism plus plus 12 to regularly clean

412
00:19:38,559 --> 00:19:40,320
up the temp file

413
00:19:40,320 --> 00:19:43,039
insider each virtual machine and

414
00:19:43,039 --> 00:19:44,320
configure the

415
00:19:44,320 --> 00:19:46,720
virtual machine to automatically clean

416
00:19:46,720 --> 00:19:47,919
up disk after

417
00:19:47,919 --> 00:19:51,679
shutting down in this way the size of

418
00:19:51,679 --> 00:19:52,000
each

419
00:19:52,000 --> 00:19:54,640
virtual machine will be automatically

420
00:19:54,640 --> 00:19:55,360
reduced

421
00:19:55,360 --> 00:19:58,559
after shutdown and the size of each

422
00:19:58,559 --> 00:20:01,280
virtual machine can be restored to the

423
00:20:01,280 --> 00:20:02,960
original size

424
00:20:02,960 --> 00:20:06,000
at a fixed interval such as

425
00:20:06,000 --> 00:20:10,320
field field works thus creating a basis

426
00:20:10,320 --> 00:20:16,320
for consequently for continuous fasting

427
00:20:19,440 --> 00:20:22,720
speed of execution when other conditions

428
00:20:22,720 --> 00:20:23,280
remain

429
00:20:23,280 --> 00:20:26,640
unchanged the speed of fusing directly

430
00:20:26,640 --> 00:20:29,840
affects the output efficiency

431
00:20:29,840 --> 00:20:33,200
of some testing and evaluation

432
00:20:33,200 --> 00:20:36,159
i think the main factor affecting excel

433
00:20:36,159 --> 00:20:37,120
fast

434
00:20:37,120 --> 00:20:40,559
as far as file size

435
00:20:40,559 --> 00:20:43,760
of this version the stability of

436
00:20:43,760 --> 00:20:44,720
filezilla

437
00:20:44,720 --> 00:20:48,400
this io cpu calls wrap and primary

438
00:20:48,400 --> 00:20:50,320
fragrance

439
00:20:50,320 --> 00:20:52,879
file size

440
00:20:56,159 --> 00:20:59,440
in the crop's distillation stage i

441
00:20:59,440 --> 00:21:02,640
have selected as small as steve

442
00:21:02,640 --> 00:21:06,000
as possible when ensuring coverage

443
00:21:06,000 --> 00:21:09,120
from a statistical point of view for

444
00:21:09,120 --> 00:21:09,919
excel

445
00:21:09,919 --> 00:21:14,240
files smaller than 400 kb

446
00:21:14,240 --> 00:21:16,360
are more likely to produce

447
00:21:16,360 --> 00:21:19,360
vulnerabilities

448
00:21:20,880 --> 00:21:23,440
there are many versions of office the

449
00:21:23,440 --> 00:21:24,880
higher the version

450
00:21:24,880 --> 00:21:27,520
the slower the opening speed from

451
00:21:27,520 --> 00:21:29,120
another perspective

452
00:21:29,120 --> 00:21:31,360
the higher the version the largest

453
00:21:31,360 --> 00:21:32,480
amount of code

454
00:21:32,480 --> 00:21:34,280
and the number of potential

455
00:21:34,280 --> 00:21:36,159
vulnerabilities

456
00:21:36,159 --> 00:21:39,280
i need to make some trade-offs

457
00:21:39,280 --> 00:21:42,640
after a period of evaluation i decide to

458
00:21:42,640 --> 00:21:44,720
focus on vulnerabilities

459
00:21:44,720 --> 00:21:48,559
which exist from office 2007

460
00:21:48,559 --> 00:21:51,600
to office 2019

461
00:21:51,600 --> 00:21:55,440
after making this choice i can speed up

462
00:21:55,440 --> 00:21:58,159
fuzzing by choosing to execute to

463
00:21:58,159 --> 00:21:59,760
execute the file

464
00:21:59,760 --> 00:22:02,960
in a lower office version although

465
00:22:02,960 --> 00:22:03,799
office

466
00:22:03,799 --> 00:22:07,120
2007 and office 2010

467
00:22:07,120 --> 00:22:10,000
have successfully was injured from the

468
00:22:10,000 --> 00:22:11,760
spot list

469
00:22:11,760 --> 00:22:14,799
they are useful if scratch file which

470
00:22:14,799 --> 00:22:16,240
collected in these

471
00:22:16,240 --> 00:22:18,960
environments can affect the latest

472
00:22:18,960 --> 00:22:19,760
version of

473
00:22:19,760 --> 00:22:22,880
office software the manifest

474
00:22:22,880 --> 00:22:26,200
environment i finally chose it offers

475
00:22:26,200 --> 00:22:27,919
2010.

476
00:22:27,919 --> 00:22:31,039
after mainly fine tuning my father can

477
00:22:31,039 --> 00:22:31,360
be

478
00:22:31,360 --> 00:22:34,559
stabilized on 10 virtual machines

479
00:22:34,559 --> 00:22:37,280
and each virtual machine executes an

480
00:22:37,280 --> 00:22:37,919
average

481
00:22:37,919 --> 00:22:42,240
of fifteen thousand five per day

482
00:22:42,240 --> 00:22:48,640
that is around about 150 files per day

483
00:22:50,320 --> 00:22:54,000
the stability of father if a father

484
00:22:54,000 --> 00:22:57,280
is unstable and crushes itself

485
00:22:57,280 --> 00:23:01,200
by executing that is that some fathers

486
00:23:01,200 --> 00:23:02,000
that use

487
00:23:02,000 --> 00:23:05,360
wing app dbg may have this problem

488
00:23:05,360 --> 00:23:09,679
on x6 six phone environments

489
00:23:09,679 --> 00:23:12,960
so i mainly run my father on x

490
00:23:12,960 --> 00:23:16,400
eight six environments after observing

491
00:23:16,400 --> 00:23:19,520
an improvement for a long period of time

492
00:23:19,520 --> 00:23:22,799
my father has achieved relative good

493
00:23:22,799 --> 00:23:24,400
stability

494
00:23:24,400 --> 00:23:29,360
it can run for weeks without problems

495
00:23:33,280 --> 00:23:36,320
this problem discuss this problem was

496
00:23:36,320 --> 00:23:38,799
discovered through observation

497
00:23:38,799 --> 00:23:42,320
my fuzzing environment use hdd

498
00:23:42,320 --> 00:23:45,120
when using vmware to open multiply

499
00:23:45,120 --> 00:23:46,799
virtual machines

500
00:23:46,799 --> 00:23:50,320
i open up to 11 virtual machines on a

501
00:23:50,320 --> 00:23:52,480
single computer

502
00:23:52,480 --> 00:23:55,520
this io will become very stark

503
00:23:55,520 --> 00:24:00,159
during due to the limitation of this i o

504
00:24:00,159 --> 00:24:02,720
five of inner virtual machines will

505
00:24:02,720 --> 00:24:04,640
cause vmware itself

506
00:24:04,640 --> 00:24:08,039
to hang out for a long time which

507
00:24:08,039 --> 00:24:11,520
significantly affects the fan speed

508
00:24:11,520 --> 00:24:14,320
sometimes the fast in a single virtual

509
00:24:14,320 --> 00:24:15,279
machine

510
00:24:15,279 --> 00:24:19,520
and abnormally it is necessary

511
00:24:19,520 --> 00:24:22,159
to clean up the environment in the

512
00:24:22,159 --> 00:24:23,120
virtual machine

513
00:24:23,120 --> 00:24:26,480
and restart the fuzzing or restart the

514
00:24:26,480 --> 00:24:27,120
relative

515
00:24:27,120 --> 00:24:30,159
virtual machine to resolve the fuzzing

516
00:24:30,159 --> 00:24:33,279
this problem this process is a waste of

517
00:24:33,279 --> 00:24:34,320
time

518
00:24:34,320 --> 00:24:39,360
so i think ssd will improve a lot

519
00:24:40,480 --> 00:24:43,520
the number of cpu cores and the rev

520
00:24:43,520 --> 00:24:45,440
capacity directly

521
00:24:45,440 --> 00:24:48,240
determine the maximum number of virtual

522
00:24:48,240 --> 00:24:49,360
machines

523
00:24:49,360 --> 00:24:52,960
that can be opened at the same time

524
00:24:52,960 --> 00:24:56,000
bigger to encounters the better the

525
00:24:56,000 --> 00:24:56,720
primary

526
00:24:56,720 --> 00:24:59,440
frequency directly affects the open

527
00:24:59,440 --> 00:25:00,000
speed

528
00:25:00,000 --> 00:25:03,120
of the program the bigger the premium

529
00:25:03,120 --> 00:25:06,479
frequency the better

530
00:25:09,039 --> 00:25:12,320
during fuzzing it is necessary to

531
00:25:12,320 --> 00:25:15,279
consider the inconsistencies

532
00:25:15,279 --> 00:25:18,640
of processing the same file by different

533
00:25:18,640 --> 00:25:22,960
architecture attackers x86

534
00:25:22,960 --> 00:25:26,159
and x64 different

535
00:25:26,159 --> 00:25:29,360
patches no notepads and full patch

536
00:25:29,360 --> 00:25:32,559
and different language versions chinese

537
00:25:32,559 --> 00:25:35,679
and english i mainly consider the

538
00:25:35,679 --> 00:25:36,320
following

539
00:25:36,320 --> 00:25:40,880
things files that cannot be triggered

540
00:25:40,880 --> 00:25:44,159
on x 8 6 can be triggered

541
00:25:44,159 --> 00:25:47,440
under x 6 4

542
00:25:47,440 --> 00:25:50,000
fires that cannot be triggered in a

543
00:25:50,000 --> 00:25:51,039
lower patch

544
00:25:51,039 --> 00:25:53,279
environment can be triggered in a

545
00:25:53,279 --> 00:25:54,840
fighter patch

546
00:25:54,840 --> 00:25:58,240
environment files that can be triggered

547
00:25:58,240 --> 00:26:00,640
in the cannot be triggered in the

548
00:26:00,640 --> 00:26:02,240
english environment

549
00:26:02,240 --> 00:26:04,080
can be triggered in the chinese

550
00:26:04,080 --> 00:26:05,840
environment

551
00:26:05,840 --> 00:26:09,039
therefore i tested above things with

552
00:26:09,039 --> 00:26:09,760
each set

553
00:26:09,760 --> 00:26:12,799
of 6 files and get some

554
00:26:12,799 --> 00:26:16,000
actual crashes

555
00:26:19,600 --> 00:26:23,520
finding strategy i think this

556
00:26:23,520 --> 00:26:26,559
part is the most important of my excel

557
00:26:26,559 --> 00:26:28,240
filing

558
00:26:28,240 --> 00:26:31,360
what i have is a machine consists of

559
00:26:31,360 --> 00:26:33,678
this

560
00:26:33,919 --> 00:26:37,120
what i want are option as

561
00:26:37,120 --> 00:26:39,919
much vulnerabilities as possible in the

562
00:26:39,919 --> 00:26:41,679
shortest time

563
00:26:41,679 --> 00:26:44,720
finding vulnerabilities that exist

564
00:26:44,720 --> 00:26:47,919
in our version of office

565
00:26:47,919 --> 00:26:50,840
this forced me to do many thoughts and

566
00:26:50,840 --> 00:26:52,159
exploration

567
00:26:52,159 --> 00:26:56,799
on how to configure filing strategies

568
00:27:00,240 --> 00:27:03,440
my experience are fast advantages

569
00:27:03,440 --> 00:27:08,240
including bad not limited to firing

570
00:27:08,240 --> 00:27:11,520
skip the first 512

571
00:27:11,520 --> 00:27:14,559
bytes of the header of the ole 2

572
00:27:14,559 --> 00:27:17,679
files during mutation to improve

573
00:27:17,679 --> 00:27:20,880
the effectiveness of mutation

574
00:27:20,880 --> 00:27:24,080
using older version of orphans

575
00:27:24,080 --> 00:27:27,440
for fast fuzzing to improve the speed of

576
00:27:27,440 --> 00:27:31,440
fasting use smaller excel files

577
00:27:31,440 --> 00:27:34,000
for fuzzing to increase the speed of

578
00:27:34,000 --> 00:27:35,120
filing

579
00:27:35,120 --> 00:27:38,480
use google to collect xls files

580
00:27:38,480 --> 00:27:41,200
which were made with old versions of

581
00:27:41,200 --> 00:27:42,000
excel

582
00:27:42,000 --> 00:27:45,520
in the 1990s and 2000s

583
00:27:45,520 --> 00:27:48,159
and added them to the initial sales

584
00:27:48,159 --> 00:27:49,840
collection

585
00:27:49,840 --> 00:27:52,880
select office attack surface that may

586
00:27:52,880 --> 00:27:53,279
cause

587
00:27:53,279 --> 00:27:56,480
problems based on my experience

588
00:27:56,480 --> 00:28:00,480
for example piper table and

589
00:28:00,480 --> 00:28:05,279
then select relative files for funding

590
00:28:05,440 --> 00:28:08,159
for a period of time select the excel

591
00:28:08,159 --> 00:28:08,960
files

592
00:28:08,960 --> 00:28:12,080
that is most likely to cause problems

593
00:28:12,080 --> 00:28:15,120
in the current results and increase the

594
00:28:15,120 --> 00:28:16,159
propagation

595
00:28:16,159 --> 00:28:19,520
of them because the files that cause a

596
00:28:19,520 --> 00:28:20,720
problem often

597
00:28:20,720 --> 00:28:24,960
cause other similar problems

598
00:28:25,840 --> 00:28:29,679
for the files only use one mutation

599
00:28:29,679 --> 00:28:30,559
aggressor

600
00:28:30,559 --> 00:28:33,840
for fuzzing within a period of time

601
00:28:33,840 --> 00:28:36,480
and continue to observation the

602
00:28:36,480 --> 00:28:37,679
effectiveness

603
00:28:37,679 --> 00:28:40,880
of the current mutation everything if

604
00:28:40,880 --> 00:28:42,399
there are still more new

605
00:28:42,399 --> 00:28:46,159
output after a week continue to fast

606
00:28:46,159 --> 00:28:49,039
if there are almost no new outputs after

607
00:28:49,039 --> 00:28:50,080
a week

608
00:28:50,080 --> 00:28:53,120
switching to another switch to another

609
00:28:53,120 --> 00:28:56,399
mutation algorithm

610
00:28:56,480 --> 00:28:59,520
categories the size of speed fire

611
00:28:59,520 --> 00:29:03,080
such as zero to 100 kb

612
00:29:03,080 --> 00:29:06,600
101 to 400 kb

613
00:29:06,600 --> 00:29:09,520
401 to 1 mb

614
00:29:09,520 --> 00:29:12,799
and larger than 1 and b and

615
00:29:12,799 --> 00:29:16,240
test hc set of a specific size

616
00:29:16,240 --> 00:29:20,000
in a specific size in a specific

617
00:29:20,000 --> 00:29:23,679
period of time the same file

618
00:29:23,679 --> 00:29:26,399
will be tested in full patch and no

619
00:29:26,399 --> 00:29:26,880
patch

620
00:29:26,880 --> 00:29:29,600
environments in chinese and english

621
00:29:29,600 --> 00:29:30,799
environments

622
00:29:30,799 --> 00:29:33,840
and in x h

623
00:29:33,840 --> 00:29:41,840
6 and x 6 4 environments

624
00:29:42,799 --> 00:29:45,840
as more and more results are obtained

625
00:29:45,840 --> 00:29:46,240
from

626
00:29:46,240 --> 00:29:49,279
fuzzing how to manage these 5 crash

627
00:29:49,279 --> 00:29:52,320
files has become a very important

628
00:29:52,320 --> 00:29:56,000
thing i mainly consider the following

629
00:29:56,000 --> 00:29:57,760
conditions

630
00:29:57,760 --> 00:30:01,120
how to merge the same casing generated

631
00:30:01,120 --> 00:30:04,240
in different files machines how to

632
00:30:04,240 --> 00:30:07,360
exclude clutch cases that have appeared

633
00:30:07,360 --> 00:30:10,559
before the newly aided crash files

634
00:30:10,559 --> 00:30:13,520
regarding how to merge the same cases

635
00:30:13,520 --> 00:30:14,399
generated

636
00:30:14,399 --> 00:30:17,600
in different fast machines i have

637
00:30:17,600 --> 00:30:20,320
explained in the section mensah the

638
00:30:20,320 --> 00:30:21,039
large

639
00:30:21,039 --> 00:30:24,240
implantment challenge above i

640
00:30:24,240 --> 00:30:27,279
use a ftp server to receive crash

641
00:30:27,279 --> 00:30:30,480
files across virtual machines

642
00:30:30,480 --> 00:30:33,600
if a crash file has the same model and

643
00:30:33,600 --> 00:30:35,279
the same crash address

644
00:30:35,279 --> 00:30:38,559
with a previous file the server

645
00:30:38,559 --> 00:30:42,080
will reject it every once

646
00:30:42,080 --> 00:30:45,360
in a while i will drop out all the crash

647
00:30:45,360 --> 00:30:46,000
files

648
00:30:46,000 --> 00:30:49,360
in the ftp server and reproduce them

649
00:30:49,360 --> 00:30:52,480
in a full patch environment with the

650
00:30:52,480 --> 00:30:53,279
help of

651
00:30:53,279 --> 00:30:57,120
my reproducer i make several

652
00:30:57,120 --> 00:31:00,480
full patch environments but only one is

653
00:31:00,480 --> 00:31:01,279
frequent

654
00:31:01,279 --> 00:31:05,840
is frequently used only those newly

655
00:31:05,840 --> 00:31:07,519
appeared crash files

656
00:31:07,519 --> 00:31:11,120
need to be exam therefore

657
00:31:11,120 --> 00:31:14,720
i use a person script to set all crash

658
00:31:14,720 --> 00:31:15,519
files

659
00:31:15,519 --> 00:31:19,039
produced by the reproducer

660
00:31:19,039 --> 00:31:22,320
to a local database this database

661
00:31:22,320 --> 00:31:25,440
is just a simple folder list but

662
00:31:25,440 --> 00:31:29,600
it is very effective when the number of

663
00:31:29,600 --> 00:31:30,720
crash cases

664
00:31:30,720 --> 00:31:34,559
in the database becomes more and more

665
00:31:34,559 --> 00:31:37,600
the newly appeared crash files will be

666
00:31:37,600 --> 00:31:38,159
filled

667
00:31:38,159 --> 00:31:41,760
and filled and sometimes

668
00:31:41,760 --> 00:31:44,240
the vulnerability rate of these new

669
00:31:44,240 --> 00:31:44,880
files

670
00:31:44,880 --> 00:31:48,640
will be higher and higher

671
00:31:49,360 --> 00:31:53,039
after half a year of fuzzing i reported

672
00:31:53,039 --> 00:31:53,840
a total

673
00:31:53,840 --> 00:31:58,399
of 20 excel vulnerabilities to microsoft

674
00:31:58,399 --> 00:32:01,679
two of them were marked as valid

675
00:32:01,679 --> 00:32:05,360
but will not be fixed immediately

676
00:32:05,360 --> 00:32:08,559
one was knocked as one fixed

677
00:32:08,559 --> 00:32:11,480
the remaining six the remaining 17

678
00:32:11,480 --> 00:32:12,640
vulnerabilities

679
00:32:12,640 --> 00:32:16,480
are all fixed and helped me receive

680
00:32:16,480 --> 00:32:21,360
16 cv acknowledgments from microsoft

681
00:32:21,360 --> 00:32:25,600
one of them is duplicate

682
00:32:27,600 --> 00:32:30,880
this table is a summary of my files

683
00:32:30,880 --> 00:32:33,440
results

684
00:32:34,399 --> 00:32:38,960
logic o here refers to office 2010

685
00:32:38,960 --> 00:32:47,120
of a 2013 office 2016 and office 2019

686
00:32:47,120 --> 00:32:51,919
and case 61461

687
00:32:51,919 --> 00:32:55,120
has been fixed in the january

688
00:32:55,120 --> 00:32:59,279
2021 patch day but it is dumpling key

689
00:32:59,279 --> 00:33:01,440
i have not tricked down his

690
00:33:01,440 --> 00:33:02,799
corresponding cv

691
00:33:02,799 --> 00:33:07,279
number below i showed some cases

692
00:33:07,279 --> 00:33:10,480
by my father

693
00:33:10,480 --> 00:33:14,399
cve 2020 1494

694
00:33:14,399 --> 00:33:18,159
is an unlockable memory right i see

695
00:33:18,159 --> 00:33:21,600
in excel process we can say

696
00:33:21,600 --> 00:33:27,279
it crashed at memory mode function

697
00:33:27,279 --> 00:33:30,480
this vulnerability effect from

698
00:33:30,480 --> 00:33:38,720
office 2010 to over 2019

699
00:33:38,720 --> 00:33:43,279
cv 2020 17126

700
00:33:43,279 --> 00:33:47,360
is an out of bound retention in excel

701
00:33:47,360 --> 00:33:50,799
process we can say it is also

702
00:33:50,799 --> 00:33:53,840
crashed at memory mode

703
00:33:53,840 --> 00:33:57,360
this vulnerability a affects

704
00:33:57,360 --> 00:34:00,399
from office 2010

705
00:34:00,399 --> 00:34:04,080
to office 2019

706
00:34:04,080 --> 00:34:07,440
let's see the third one cve

707
00:34:07,440 --> 00:34:10,719
2020 one seven one two seven

708
00:34:10,719 --> 00:34:13,839
is unused after free red as you in

709
00:34:13,839 --> 00:34:18,480
excel process it is a nice um

710
00:34:18,480 --> 00:34:22,159
we can say it tries to

711
00:34:22,159 --> 00:34:25,679
read a virtual function table from easy

712
00:34:25,679 --> 00:34:29,679
x and save it to eax

713
00:34:29,679 --> 00:34:32,719
and it try to read

714
00:34:32,719 --> 00:34:36,560
a function address from eax

715
00:34:36,560 --> 00:34:39,918
plus it and call this address

716
00:34:39,918 --> 00:34:43,239
so i think it is a nice ui

717
00:34:43,239 --> 00:34:46,839
unfortunately this vulnerability only

718
00:34:46,839 --> 00:34:50,079
affects of phrase 2010

719
00:34:50,079 --> 00:34:55,359
but i still think it's a nice uf

720
00:34:55,359 --> 00:34:58,240
for now my first mentor has the

721
00:34:58,240 --> 00:34:58,800
following

722
00:34:58,800 --> 00:35:02,560
shortcomings as mentioned earlier

723
00:35:02,560 --> 00:35:05,599
in order to improve the speed and effect

724
00:35:05,599 --> 00:35:08,960
efficiency of fuzzing i selectively

725
00:35:08,960 --> 00:35:11,920
ignored some potential vulnerabilities

726
00:35:11,920 --> 00:35:15,079
in terms of strategy such as

727
00:35:15,079 --> 00:35:16,720
vulnerabilities only

728
00:35:16,720 --> 00:35:19,599
in the newer office version the first

729
00:35:19,599 --> 00:35:22,000
method in this presentation

730
00:35:22,000 --> 00:35:24,960
is added as the vulnerabilities that

731
00:35:24,960 --> 00:35:25,440
affect

732
00:35:25,440 --> 00:35:28,079
all of its version due to the

733
00:35:28,079 --> 00:35:29,119
limitations

734
00:35:29,119 --> 00:35:32,160
of my testing method lodge those

735
00:35:32,160 --> 00:35:33,359
vulnerabilities

736
00:35:33,359 --> 00:35:37,040
that only exist in the latest version of

737
00:35:37,040 --> 00:35:38,160
office

738
00:35:38,160 --> 00:35:41,280
but not in the lower version of office

739
00:35:41,280 --> 00:35:43,680
can not be found through my fuzzing

740
00:35:43,680 --> 00:35:45,680
method

741
00:35:45,680 --> 00:35:48,400
if the current disk can be replaced with

742
00:35:48,400 --> 00:35:49,359
ssd

743
00:35:49,359 --> 00:35:51,760
the file with write speed will be

744
00:35:51,760 --> 00:35:52,880
significantly

745
00:35:52,880 --> 00:35:56,400
increased which can improve this

746
00:35:56,400 --> 00:35:59,359
fighting speed will not

747
00:35:59,359 --> 00:36:02,240
the mutation aggressor can still be

748
00:36:02,240 --> 00:36:03,359
improved

749
00:36:03,359 --> 00:36:07,520
according to observations out

750
00:36:07,520 --> 00:36:09,839
after transplanting the hunger phase

751
00:36:09,839 --> 00:36:10,720
mutation

752
00:36:10,720 --> 00:36:14,160
i reserved to my custom father the fast

753
00:36:14,160 --> 00:36:15,119
output

754
00:36:15,119 --> 00:36:18,720
has increased significantly which shows

755
00:36:18,720 --> 00:36:19,359
that

756
00:36:19,359 --> 00:36:22,160
an effective mutation algorithm can

757
00:36:22,160 --> 00:36:25,280
greatly improve the fast output

758
00:36:25,280 --> 00:36:28,800
if i continue adding better mutation and

759
00:36:28,800 --> 00:36:29,520
reserve

760
00:36:29,520 --> 00:36:32,560
to the current file framework it can

761
00:36:32,560 --> 00:36:37,040
further improve the results

762
00:36:37,119 --> 00:36:40,480
the start and stop time of excel process

763
00:36:40,480 --> 00:36:43,760
is too expensive if there is a better

764
00:36:43,760 --> 00:36:44,240
way

765
00:36:44,240 --> 00:36:47,680
for stimulating excel execute process

766
00:36:47,680 --> 00:36:50,800
it will significantly reduce the opening

767
00:36:50,800 --> 00:36:52,079
and closing time

768
00:36:52,079 --> 00:36:55,440
of the excel process and the fun speed

769
00:36:55,440 --> 00:36:58,560
can be greatly improved

770
00:36:58,560 --> 00:37:01,359
the craft installation answered in this

771
00:37:01,359 --> 00:37:02,480
presentation

772
00:37:02,480 --> 00:37:06,079
use data code coverage statistics

773
00:37:06,079 --> 00:37:08,240
compared with dynamic coverage

774
00:37:08,240 --> 00:37:09,839
statistics

775
00:37:09,839 --> 00:37:12,880
this statistical method has

776
00:37:12,880 --> 00:37:16,400
lower coverage accuracy only a rough

777
00:37:16,400 --> 00:37:17,040
coverage

778
00:37:17,040 --> 00:37:20,079
assessment can be done so there is

779
00:37:20,079 --> 00:37:24,240
room for improvement the initial seed

780
00:37:24,240 --> 00:37:24,880
set

781
00:37:24,880 --> 00:37:28,079
used by my father is limited

782
00:37:28,079 --> 00:37:31,839
its all non-malware sls files and viral

783
00:37:31,839 --> 00:37:32,720
totals

784
00:37:32,720 --> 00:37:36,560
can be used for craft distillation

785
00:37:36,560 --> 00:37:39,920
the coverage results will be better and

786
00:37:39,920 --> 00:37:43,359
there will be more output

787
00:37:44,960 --> 00:37:48,320
acknowledgment special thanks to jacob's

788
00:37:48,320 --> 00:37:49,760
campus blocks

789
00:37:49,760 --> 00:37:52,920
the topics he shared at poc

790
00:37:52,920 --> 00:37:56,240
2020 conference his

791
00:37:56,240 --> 00:37:59,920
open source phenomena project and as

792
00:37:59,920 --> 00:38:03,200
these files he generously shared

793
00:38:03,200 --> 00:38:06,800
all of which helped me a lot

794
00:38:06,800 --> 00:38:10,160
and special thanks to kik yao jupa

795
00:38:10,160 --> 00:38:13,520
some of his fun ideas have inspired me

796
00:38:13,520 --> 00:38:16,000
a lot

797
00:38:16,960 --> 00:38:29,200
thank you for your attention thank you

