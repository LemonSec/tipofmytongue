1
00:00:15,519 --> 00:00:17,279
we're going to talk about our chilling

2
00:00:17,279 --> 00:00:17,760
uh

3
00:00:17,760 --> 00:00:19,680
framework and then uh there are a few

4
00:00:19,680 --> 00:00:21,359
things that we're going to do today so

5
00:00:21,359 --> 00:00:24,000
let me sort out the uh the introduction

6
00:00:24,000 --> 00:00:24,800
part

7
00:00:24,800 --> 00:00:29,039
uh we're gonna we're gonna

8
00:00:29,039 --> 00:00:31,679
introduce a little bit of uh uh on our

9
00:00:31,679 --> 00:00:32,960
chilling framework that's what we're

10
00:00:32,960 --> 00:00:33,440
gonna do

11
00:00:33,440 --> 00:00:35,600
that's number one and then uh we're

12
00:00:35,600 --> 00:00:38,480
gonna talk we're gonna show a bit on uh

13
00:00:38,480 --> 00:00:40,559
the demo part and we're gonna talk about

14
00:00:40,559 --> 00:00:41,680
how we how we

15
00:00:41,680 --> 00:00:43,520
walk around with how we work together

16
00:00:43,520 --> 00:00:44,800
with our r2

17
00:00:44,800 --> 00:00:47,280
and uh then we're gonna show our very

18
00:00:47,280 --> 00:00:50,160
last guess that we promised on the uh

19
00:00:50,160 --> 00:00:52,399
on the abstract which is uh how we can

20
00:00:52,399 --> 00:00:53,760
make entire

21
00:00:53,760 --> 00:00:58,719
ebm uh uh engineer more fun

22
00:00:58,719 --> 00:01:01,760
so uh the topic mainly is going to cover

23
00:01:01,760 --> 00:01:02,320
chilling

24
00:01:02,320 --> 00:01:05,119
anna and r2 so uh the twitter is down

25
00:01:05,119 --> 00:01:05,438
there

26
00:01:05,438 --> 00:01:07,119
so if you guys have any questions are

27
00:01:07,119 --> 00:01:09,040
always you know keeping to us

28
00:01:09,040 --> 00:01:11,840
uh the developer side so you know the

29
00:01:11,840 --> 00:01:13,200
call there for us to end

30
00:01:13,200 --> 00:01:15,680
us is pretty much friendly i mean they

31
00:01:15,680 --> 00:01:17,600
they came to our chat with them chat and

32
00:01:17,600 --> 00:01:19,840
we go to their place and talk so yeah

33
00:01:19,840 --> 00:01:22,080
that is uh what we're gonna do today

34
00:01:22,080 --> 00:01:25,280
and uh again

35
00:01:25,280 --> 00:01:28,159
all right the slide is smoothing okay uh

36
00:01:28,159 --> 00:01:29,600
i work for jd.com

37
00:01:29,600 --> 00:01:32,400
all right uh i i stationed in china

38
00:01:32,400 --> 00:01:34,320
right now so i cannot say any bad things

39
00:01:34,320 --> 00:01:35,119
about the

40
00:01:35,119 --> 00:01:37,759
chinese government just in case uh to

41
00:01:37,759 --> 00:01:39,600
keep my

42
00:01:39,600 --> 00:01:42,240
career and my life going smooth right

43
00:01:42,240 --> 00:01:43,759
over here

44
00:01:43,759 --> 00:01:45,600
and most of the time i'll be doing a

45
00:01:45,600 --> 00:01:48,640
chilling framework and

46
00:01:48,640 --> 00:01:52,560
during the olden days

47
00:01:53,200 --> 00:01:55,200
when conference still a conference

48
00:01:55,200 --> 00:01:57,520
everybody can meet everybody in person

49
00:01:57,520 --> 00:02:00,000
uh we do design some badge for hacking

50
00:02:00,000 --> 00:02:01,840
the box

51
00:02:01,840 --> 00:02:03,360
so we have the singapore ones you know

52
00:02:03,360 --> 00:02:05,280
you can see the the amsterdam's one

53
00:02:05,280 --> 00:02:08,160
the the china the china ones and uh yeah

54
00:02:08,160 --> 00:02:10,479
so uh this is uh what basically are what

55
00:02:10,479 --> 00:02:10,878
i do

56
00:02:10,878 --> 00:02:13,440
and uh the different uh talks the

57
00:02:13,440 --> 00:02:15,040
different thoughts that uh i would like

58
00:02:15,040 --> 00:02:16,560
to list in the slides that's

59
00:02:16,560 --> 00:02:19,520
everything about me uh introduction for

60
00:02:19,520 --> 00:02:22,319
uh answer show and

61
00:02:22,319 --> 00:02:24,640
i will leave it to them uh basically uh

62
00:02:24,640 --> 00:02:26,319
we work in the same department you know

63
00:02:26,319 --> 00:02:26,800
we

64
00:02:26,800 --> 00:02:29,200
we we meet each other almost every day

65
00:02:29,200 --> 00:02:30,720
and uh

66
00:02:30,720 --> 00:02:35,200
this is uh our intimate relationship

67
00:02:35,200 --> 00:02:36,879
so they should have their own

68
00:02:36,879 --> 00:02:38,480
introduction so i'm not going to say a

69
00:02:38,480 --> 00:02:41,200
lot of things over here

70
00:02:41,200 --> 00:02:44,319
okay uh why chilling framework and uh

71
00:02:44,319 --> 00:02:46,480
what is the passion within this entire

72
00:02:46,480 --> 00:02:48,000
open source project that uh

73
00:02:48,000 --> 00:02:51,680
we get involved into

74
00:02:51,680 --> 00:02:54,959
so uh i when i first stepped into uh

75
00:02:54,959 --> 00:02:56,720
when i first stepped into china the

76
00:02:56,720 --> 00:02:59,120
only the the one one of the first few

77
00:02:59,120 --> 00:03:00,800
major tasks that uh

78
00:03:00,800 --> 00:03:02,640
that uh that i would like to achieve you

79
00:03:02,640 --> 00:03:04,239
know as a as a

80
00:03:04,239 --> 00:03:06,640
as a screen consultant in china it's uh

81
00:03:06,640 --> 00:03:07,760
iot

82
00:03:07,760 --> 00:03:14,159
and that is back in uh 2018 2017

83
00:03:14,159 --> 00:03:16,159
right so what i wanted to do over here

84
00:03:16,159 --> 00:03:17,280
it's uh

85
00:03:17,280 --> 00:03:20,720
uh i i do during the entire time that

86
00:03:20,720 --> 00:03:23,440
when when we are doing research on iot

87
00:03:23,440 --> 00:03:24,640
there is a lot of

88
00:03:24,640 --> 00:03:27,920
bug that i keep on repeating itself

89
00:03:27,920 --> 00:03:31,200
uh and only exists in

90
00:03:31,200 --> 00:03:33,760
i discovered the same bar and the the

91
00:03:33,760 --> 00:03:35,760
the the same exploitation techniques

92
00:03:35,760 --> 00:03:36,080
that

93
00:03:36,080 --> 00:03:39,280
we can repeating using in iot and uh the

94
00:03:39,280 --> 00:03:40,159
same technique

95
00:03:40,159 --> 00:03:42,239
and the same the same but it doesn't

96
00:03:42,239 --> 00:03:43,280
really exist in

97
00:03:43,280 --> 00:03:45,760
x86 anymore but you know the same thing

98
00:03:45,760 --> 00:03:46,480
flows back to

99
00:03:46,480 --> 00:03:49,360
iot and what we are what we are really

100
00:03:49,360 --> 00:03:49,760
uh

101
00:03:49,760 --> 00:03:52,400
uh wanted to uh to do over here it's uh

102
00:03:52,400 --> 00:03:54,400
we don't have a proper tools

103
00:03:54,400 --> 00:03:56,239
and we don't have the same old

104
00:03:56,239 --> 00:03:57,439
experience that

105
00:03:57,439 --> 00:03:59,920
we for for debugging for emulation for

106
00:03:59,920 --> 00:04:01,920
instrumentation or

107
00:04:01,920 --> 00:04:05,040
uh emulation and doing hot patch or

108
00:04:05,040 --> 00:04:06,959
different kind of apis that

109
00:04:06,959 --> 00:04:10,080
couldn't bring us to that kind of uh

110
00:04:10,080 --> 00:04:13,120
debugging uh experience so what we

111
00:04:13,120 --> 00:04:14,640
wanted to do and what we

112
00:04:14,640 --> 00:04:16,959
are but during that time the only thing

113
00:04:16,959 --> 00:04:18,720
was exist in my mind it's uh

114
00:04:18,720 --> 00:04:21,839
i wanted to bring whatever things that

115
00:04:21,839 --> 00:04:23,680
we have in x86

116
00:04:23,680 --> 00:04:25,520
whatever things that we have in the

117
00:04:25,520 --> 00:04:27,440
modern days debug modern days

118
00:04:27,440 --> 00:04:29,280
in malaysia and modern days in binary

119
00:04:29,280 --> 00:04:31,520
instrumentation i wanted to bring

120
00:04:31,520 --> 00:04:34,479
all these experience goals into iot and

121
00:04:34,479 --> 00:04:36,080
whatever platforms that

122
00:04:36,080 --> 00:04:39,120
that that uh baby can do so

123
00:04:39,120 --> 00:04:42,400
that is the main passion and that is why

124
00:04:42,400 --> 00:04:45,919
i wanted to start achieving framework

125
00:04:45,919 --> 00:04:48,400
so when when when we tried to start this

126
00:04:48,400 --> 00:04:49,440
entire project

127
00:04:49,440 --> 00:04:50,960
there are a lot of people come come over

128
00:04:50,960 --> 00:04:53,040
and ask us you know

129
00:04:53,040 --> 00:04:56,000
they are virtual machines so there are

130
00:04:56,000 --> 00:04:57,840
virtual machines you know like qemu that

131
00:04:57,840 --> 00:04:59,440
you can actually put up the firmware and

132
00:04:59,440 --> 00:05:00,320
run

133
00:05:00,320 --> 00:05:03,440
a jnu debugger or whatsoever and uh yes

134
00:05:03,440 --> 00:05:05,360
you you are able to do that but there

135
00:05:05,360 --> 00:05:06,720
are a few things or there are a few

136
00:05:06,720 --> 00:05:08,080
platforms that

137
00:05:08,080 --> 00:05:09,680
you know whatever what you mentioned

138
00:05:09,680 --> 00:05:11,680
that exists couldn't solve that

139
00:05:11,680 --> 00:05:12,800
particular issue

140
00:05:12,800 --> 00:05:15,280
so if you're looking at a master boot

141
00:05:15,280 --> 00:05:16,560
record

142
00:05:16,560 --> 00:05:19,120
we don't have anything that allows you

143
00:05:19,120 --> 00:05:20,960
to do an instrumentation

144
00:05:20,960 --> 00:05:24,960
uh uh uh uh ufi you know you cannot do

145
00:05:24,960 --> 00:05:26,479
instrumentation you can do

146
00:05:26,479 --> 00:05:28,880
actual emulations and you cannot do

147
00:05:28,880 --> 00:05:31,280
instrumentation you can't even really

148
00:05:31,280 --> 00:05:33,600
debug the thing properly and uh

149
00:05:33,600 --> 00:05:35,360
especially smart contracts my contract

150
00:05:35,360 --> 00:05:36,160
has been there for

151
00:05:36,160 --> 00:05:39,120
so many years and to do a reverse

152
00:05:39,120 --> 00:05:40,960
engineering and debugging smart contract

153
00:05:40,960 --> 00:05:41,840
it's always

154
00:05:41,840 --> 00:05:44,960
a big huge pain so

155
00:05:44,960 --> 00:05:46,479
and then you know things like uh you

156
00:05:46,479 --> 00:05:48,880
have all the pin out for all the smaller

157
00:05:48,880 --> 00:05:49,840
bots and then

158
00:05:49,840 --> 00:05:51,680
how about if we bump into things like

159
00:05:51,680 --> 00:05:53,600
you know empty and debug

160
00:05:53,600 --> 00:05:57,520
or we need to uh debug a bit uh

161
00:05:57,520 --> 00:06:00,960
uh lower uh a bit lower

162
00:06:00,960 --> 00:06:03,039
uh types of architecture you know things

163
00:06:03,039 --> 00:06:07,039
like qualcomm qualcomm edl

164
00:06:09,199 --> 00:06:11,039
and all these things so how we can

165
00:06:11,039 --> 00:06:13,280
actually bring all these things and

166
00:06:13,280 --> 00:06:15,600
and and put into one platform that

167
00:06:15,600 --> 00:06:18,080
enables to emulate all this platform and

168
00:06:18,080 --> 00:06:20,800
we can have a overall experience the

169
00:06:20,800 --> 00:06:23,440
same experience that we have in x86

170
00:06:23,440 --> 00:06:25,199
and we're going to bring into all these

171
00:06:25,199 --> 00:06:27,680
kind of uh little platforms that nobody

172
00:06:27,680 --> 00:06:28,479
really

173
00:06:28,479 --> 00:06:31,600
cares to build any tools

174
00:06:31,600 --> 00:06:34,160
so that's that's a pretty much uh uh uh

175
00:06:34,160 --> 00:06:36,000
our chilling uh framework

176
00:06:36,000 --> 00:06:38,479
we uh we support all all different kinds

177
00:06:38,479 --> 00:06:39,120
of uh

178
00:06:39,120 --> 00:06:41,280
uh cpu architecture and we are still

179
00:06:41,280 --> 00:06:43,440
adding it uh based on uh

180
00:06:43,440 --> 00:06:45,440
our requests from our community or you

181
00:06:45,440 --> 00:06:47,280
know whatever pr that uh we have

182
00:06:47,280 --> 00:06:50,400
received and uh for now we support we

183
00:06:50,400 --> 00:06:52,720
are able to emulate windows doors ufr

184
00:06:52,720 --> 00:06:53,199
you know

185
00:06:53,199 --> 00:06:56,319
comma edl uh we have things like

186
00:06:56,319 --> 00:06:58,880
uh mbr of course that screen is not mbr

187
00:06:58,880 --> 00:06:59,440
but you know

188
00:06:59,440 --> 00:07:03,120
mbr mbr uh of course linux mac os and

189
00:07:03,120 --> 00:07:04,479
now we are still working for a few

190
00:07:04,479 --> 00:07:06,319
different things you know like uh

191
00:07:06,319 --> 00:07:08,240
we're looking at mcu we're looking at uh

192
00:07:08,240 --> 00:07:09,759
things like uh m1

193
00:07:09,759 --> 00:07:13,280
mac os and uh we try to put in a

194
00:07:13,280 --> 00:07:16,000
debugger so along the way when we are

195
00:07:16,000 --> 00:07:17,759
working on our r2 uh

196
00:07:17,759 --> 00:07:19,759
uh debugger then we realize that there

197
00:07:19,759 --> 00:07:21,280
are more things that we can book

198
00:07:21,280 --> 00:07:23,520
together with the call left team so that

199
00:07:23,520 --> 00:07:25,199
is the main

200
00:07:25,199 --> 00:07:26,800
uh things that we're gonna talk today

201
00:07:26,800 --> 00:07:28,400
and uh the different kind of

202
00:07:28,400 --> 00:07:30,720
extensions that i'll be building the

203
00:07:30,720 --> 00:07:32,800
build into a shielding framework

204
00:07:32,800 --> 00:07:35,360
the the additional things that we put in

205
00:07:35,360 --> 00:07:36,960
is the instrumentation so the

206
00:07:36,960 --> 00:07:38,720
instrumentation i will not cover

207
00:07:38,720 --> 00:07:40,880
it a lot i mean we will discuss in the

208
00:07:40,880 --> 00:07:41,919
previous attack

209
00:07:41,919 --> 00:07:43,360
over your head in the box and some other

210
00:07:43,360 --> 00:07:45,599
conference so uh the instrumentation

211
00:07:45,599 --> 00:07:48,319
part we can go into a few levels uh

212
00:07:48,319 --> 00:07:50,560
to cover it up briefly we can go into

213
00:07:50,560 --> 00:07:52,479
hardware level we can go into cpu level

214
00:07:52,479 --> 00:07:54,160
we can go into file level we can go into

215
00:07:54,160 --> 00:07:56,160
memories levels so these are the few

216
00:07:56,160 --> 00:07:57,599
instrumentations that are

217
00:07:57,599 --> 00:08:00,560
that uh recover which is a quite white

218
00:08:00,560 --> 00:08:01,440
in the sense of

219
00:08:01,440 --> 00:08:04,560
uh or how we cover it of course uh you

220
00:08:04,560 --> 00:08:05,280
know

221
00:08:05,280 --> 00:08:07,280
and then the base layer that will be the

222
00:08:07,280 --> 00:08:10,000
entire chilling

223
00:08:10,840 --> 00:08:12,240
framework

224
00:08:12,240 --> 00:08:14,479
okay so uh the uh features and

225
00:08:14,479 --> 00:08:15,680
functionality again

226
00:08:15,680 --> 00:08:18,479
to cover it uh briefly we we do a cross

227
00:08:18,479 --> 00:08:20,319
platform we do a cross architecture

228
00:08:20,319 --> 00:08:22,240
when i mention about cross cross uh

229
00:08:22,240 --> 00:08:23,520
platform and across

230
00:08:23,520 --> 00:08:27,199
architecture the the definition over

231
00:08:27,199 --> 00:08:28,560
here is uh

232
00:08:28,560 --> 00:08:32,240
we are not only emulating uh

233
00:08:32,240 --> 00:08:35,279
x86 32-bit or 34-bit or all the way to

234
00:08:35,279 --> 00:08:37,200
arm arm64 maps you know or different

235
00:08:37,200 --> 00:08:37,599
kind of

236
00:08:37,599 --> 00:08:41,039
oss we always try to make sure when we

237
00:08:41,039 --> 00:08:42,799
can emulate that that os

238
00:08:42,799 --> 00:08:43,760
all right we can emulate the

239
00:08:43,760 --> 00:08:46,160
architecture of the os we try to make

240
00:08:46,160 --> 00:08:47,680
sure chilean framework can front

241
00:08:47,680 --> 00:08:49,839
on that architecture os of course not

242
00:08:49,839 --> 00:08:52,800
uvf i and mbr in this specific case

243
00:08:52,800 --> 00:08:55,920
but we know windows mac os linux dsd

244
00:08:55,920 --> 00:08:57,680
should be able to do the uh

245
00:08:57,680 --> 00:09:00,399
emulation or run on top of the few uh

246
00:09:00,399 --> 00:09:01,279
oss

247
00:09:01,279 --> 00:09:03,040
all right and then we support multiple

248
00:09:03,040 --> 00:09:05,360
file format for for analysis of purposes

249
00:09:05,360 --> 00:09:06,720
all the way from you know

250
00:09:06,720 --> 00:09:10,720
p uh elf ufi or ms-dos

251
00:09:10,720 --> 00:09:13,839
compound okay and the entire emulations

252
00:09:13,839 --> 00:09:14,320
uh and

253
00:09:14,320 --> 00:09:16,560
instrumentation everything it's in uh

254
00:09:16,560 --> 00:09:18,000
isolated environment

255
00:09:18,000 --> 00:09:21,600
so it's pretty much a sandbox and then

256
00:09:21,600 --> 00:09:24,880
we designed a series of a great api to

257
00:09:24,880 --> 00:09:26,720
access to all the different layers

258
00:09:26,720 --> 00:09:28,160
like what i mentioned just now you know

259
00:09:28,160 --> 00:09:29,680
all the way from my hardware from one

260
00:09:29,680 --> 00:09:31,279
gpo io from

261
00:09:31,279 --> 00:09:33,519
all the way to a file system to cpu to

262
00:09:33,519 --> 00:09:34,399
memory

263
00:09:34,399 --> 00:09:37,040
so you can easily manipulate better uh

264
00:09:37,040 --> 00:09:37,519
uh

265
00:09:37,519 --> 00:09:39,920
uh memory during runtime all right you

266
00:09:39,920 --> 00:09:41,680
can easily manipulate the cpu register

267
00:09:41,680 --> 00:09:44,480
during runtime or you can easily change

268
00:09:44,480 --> 00:09:46,800
uh whatever file system the file reading

269
00:09:46,800 --> 00:09:47,920
io sequence or

270
00:09:47,920 --> 00:09:50,560
or what kind of file is your binary

271
00:09:50,560 --> 00:09:51,360
reading

272
00:09:51,360 --> 00:09:54,399
during runtime okay so uh

273
00:09:54,399 --> 00:09:56,560
and then of course everything we will

274
00:09:56,560 --> 00:09:57,600
choose uh

275
00:09:57,600 --> 00:10:01,200
python uh we we had a great

276
00:10:01,200 --> 00:10:03,839
argument and discussion uh when we

277
00:10:03,839 --> 00:10:05,200
started the project and

278
00:10:05,200 --> 00:10:07,680
the reason why we chose python it's uh

279
00:10:07,680 --> 00:10:09,760
it's very easy

280
00:10:09,760 --> 00:10:12,079
for a lot of people to join the project

281
00:10:12,079 --> 00:10:13,040
into the project

282
00:10:13,040 --> 00:10:14,720
and then uh you know easier for people

283
00:10:14,720 --> 00:10:16,720
to understand the code easier for people

284
00:10:16,720 --> 00:10:17,440
to do

285
00:10:17,440 --> 00:10:20,720
to to uh to join the project join toward

286
00:10:20,720 --> 00:10:22,720
the year community to submit pr

287
00:10:22,720 --> 00:10:24,959
you know to understand how os works we

288
00:10:24,959 --> 00:10:26,880
even have uh we even receive one or two

289
00:10:26,880 --> 00:10:28,720
feedbacks you know from uh

290
00:10:28,720 --> 00:10:31,920
from uh uh europe they actually bring

291
00:10:31,920 --> 00:10:32,320
such

292
00:10:32,320 --> 00:10:34,399
framework into the classroom to explain

293
00:10:34,399 --> 00:10:36,399
how os is working you know

294
00:10:36,399 --> 00:10:38,800
uh because we emulate the entire os how

295
00:10:38,800 --> 00:10:40,640
the os run binaries and all these things

296
00:10:40,640 --> 00:10:40,959
so

297
00:10:40,959 --> 00:10:44,480
this uh well i think

298
00:10:44,480 --> 00:10:48,000
we built something fun on top of a

299
00:10:48,000 --> 00:10:49,839
language that everybody can understand

300
00:10:49,839 --> 00:10:51,519
so

301
00:10:51,519 --> 00:10:54,880
uh try not to ask us why python again

302
00:10:54,880 --> 00:10:57,279
you know i i i think we did a very good

303
00:10:57,279 --> 00:10:58,160
explanation

304
00:10:58,160 --> 00:11:02,240
over here so our even goes into

305
00:11:02,240 --> 00:11:04,800
the little bit details like profiling os

306
00:11:04,800 --> 00:11:06,160
profiling support

307
00:11:06,160 --> 00:11:08,720
so basically what does uh os profiling

308
00:11:08,720 --> 00:11:09,360
support is

309
00:11:09,360 --> 00:11:12,000
uh you can always change your settings

310
00:11:12,000 --> 00:11:13,680
within one or two files and then

311
00:11:13,680 --> 00:11:15,360
it will change the entire environment of

312
00:11:15,360 --> 00:11:17,279
your os including you know language

313
00:11:17,279 --> 00:11:20,320
keyboard type so for windows uh

314
00:11:20,320 --> 00:11:22,560
these are the things that uh that uh

315
00:11:22,560 --> 00:11:23,680
that are from the

316
00:11:23,680 --> 00:11:26,800
community the anti-virus uh uh the

317
00:11:26,800 --> 00:11:28,399
anti-rust groups are community they

318
00:11:28,399 --> 00:11:28,959
think that

319
00:11:28,959 --> 00:11:31,120
you know for chilling to analyze whereas

320
00:11:31,120 --> 00:11:32,800
there are some virus defects keyboard

321
00:11:32,800 --> 00:11:33,519
and not

322
00:11:33,519 --> 00:11:37,200
to run on a specific language keyboard

323
00:11:37,200 --> 00:11:38,480
so

324
00:11:38,480 --> 00:11:40,000
you know because friends never attacks

325
00:11:40,000 --> 00:11:42,160
friends right so they uh

326
00:11:42,160 --> 00:11:44,240
they add in these features so they can

327
00:11:44,240 --> 00:11:46,640
change the keyboard language uh

328
00:11:46,640 --> 00:11:48,640
on the fly just by changing one file and

329
00:11:48,640 --> 00:11:50,320
then they can monitor the behavior for

330
00:11:50,320 --> 00:11:51,200
the uh

331
00:11:51,200 --> 00:11:54,560
for their malware so of course uh

332
00:11:54,560 --> 00:11:56,240
later we will look at you know how we

333
00:11:56,240 --> 00:11:57,760
can support our ethereum home can

334
00:11:57,760 --> 00:11:59,440
support canada's funds contract

335
00:11:59,440 --> 00:12:02,880
uh uh and then uh you know ethiopia was

336
00:12:02,880 --> 00:12:03,279
m

337
00:12:03,279 --> 00:12:04,560
so these are the few things that we're

338
00:12:04,560 --> 00:12:06,959
gonna bring into the uh

339
00:12:06,959 --> 00:12:11,200
uh the entire framework

340
00:12:11,200 --> 00:12:14,880
so uh there is some similar project

341
00:12:14,880 --> 00:12:17,839
okay so uh a lot of people when it comes

342
00:12:17,839 --> 00:12:19,279
to iotd

343
00:12:19,279 --> 00:12:21,760
they are doing qmu user mode all right

344
00:12:21,760 --> 00:12:24,079
uh some of them is doing a user call but

345
00:12:24,079 --> 00:12:25,360
usercon they don't

346
00:12:25,360 --> 00:12:27,680
really have any update recently if i'm

347
00:12:27,680 --> 00:12:29,040
not mistaken

348
00:12:29,040 --> 00:12:35,360
and then uh i think uh in a 2018

349
00:12:35,360 --> 00:12:38,800
uh some group of uh uh it was

350
00:12:38,800 --> 00:12:42,639
uh it was a carbon black i think they

351
00:12:42,639 --> 00:12:45,600
come up with a project called beanie

352
00:12:45,600 --> 00:12:48,320
written in gold length uh not much

353
00:12:48,320 --> 00:12:49,279
development uh

354
00:12:49,279 --> 00:12:52,399
uh uh ever since uh you know after being

355
00:12:52,399 --> 00:12:53,279
released so

356
00:12:53,279 --> 00:12:56,000
i'm not too sure whether it's the golang

357
00:12:56,000 --> 00:12:57,279
affecting the uh

358
00:12:57,279 --> 00:13:01,120
the project uh status or what

359
00:13:01,120 --> 00:13:02,800
okay i'm not matching colleen over here

360
00:13:02,800 --> 00:13:04,320
but uh yeah yeah that's

361
00:13:04,320 --> 00:13:07,440
pretty much uh and then now we have a

362
00:13:07,440 --> 00:13:09,920
wine wine mine is pretty much they only

363
00:13:09,920 --> 00:13:10,959
can emulate

364
00:13:10,959 --> 00:13:14,399
windows in in in a linux environment

365
00:13:14,399 --> 00:13:16,880
and uh it's not sandbox they don't have

366
00:13:16,880 --> 00:13:17,440
a

367
00:13:17,440 --> 00:13:19,600
instrumentation so it's purely a

368
00:13:19,600 --> 00:13:20,880
emulation

369
00:13:20,880 --> 00:13:25,360
engine just like uh uh qemu

370
00:13:26,000 --> 00:13:28,959
okay and then uh fire i came up with us

371
00:13:28,959 --> 00:13:31,440
big easy

372
00:13:31,440 --> 00:13:33,600
like two years ago last year somewhere

373
00:13:33,600 --> 00:13:34,720
around last year

374
00:13:34,720 --> 00:13:37,360
so uh running on windows uh very good

375
00:13:37,360 --> 00:13:39,440
project and uh

376
00:13:39,440 --> 00:13:41,360
and uh uh i'm not too sure about the

377
00:13:41,360 --> 00:13:44,880
development uh recently

378
00:13:45,040 --> 00:13:48,399
uh and then uh zeros uh yes

379
00:13:48,399 --> 00:13:50,720
they they they're still very active and

380
00:13:50,720 --> 00:13:53,279
uh i think uh

381
00:13:53,279 --> 00:13:55,920
uh the only the only downside it's they

382
00:13:55,920 --> 00:13:57,440
are not supporting a different kind of

383
00:13:57,440 --> 00:13:59,600
os like uh what we are trying to do

384
00:13:59,600 --> 00:14:02,000
so that is uh xenos so these these are

385
00:14:02,000 --> 00:14:04,399
the these this field are the very very

386
00:14:04,399 --> 00:14:06,399
similar project that uh that you guys

387
00:14:06,399 --> 00:14:08,480
can see and then uh

388
00:14:08,480 --> 00:14:10,800
both of them it's not really doing what

389
00:14:10,800 --> 00:14:12,560
we are doing uh right now and then

390
00:14:12,560 --> 00:14:16,560
we try to move further to bring uh more

391
00:14:16,560 --> 00:14:19,279
uh that to bring the same experience

392
00:14:19,279 --> 00:14:20,880
into all the different platform and

393
00:14:20,880 --> 00:14:24,160
all the all the different os's

394
00:14:24,160 --> 00:14:27,519
for reverse engineers

395
00:14:27,600 --> 00:14:29,920
so the entire design it's uh that is

396
00:14:29,920 --> 00:14:32,880
designed for chilling framework it's

397
00:14:32,880 --> 00:14:35,120
it's a framework it's not the tools so

398
00:14:35,120 --> 00:14:37,199
we don't have any intention to build

399
00:14:37,199 --> 00:14:39,920
a tools so that is the reason why we

400
00:14:39,920 --> 00:14:41,760
received quite a fair bit of our project

401
00:14:41,760 --> 00:14:44,399
just to name a field over here uh they

402
00:14:44,399 --> 00:14:45,199
convert

403
00:14:45,199 --> 00:14:47,440
they build tools on top of our chilling

404
00:14:47,440 --> 00:14:49,680
framework that is what we are we always

405
00:14:49,680 --> 00:14:53,440
intended uh during the empire during the

406
00:14:53,440 --> 00:14:56,000
initial design so uh cheating framework

407
00:14:56,000 --> 00:14:58,079
as the base and then you have all the

408
00:14:58,079 --> 00:14:59,360
different tools like a

409
00:14:59,360 --> 00:15:03,360
efi faster uh uh uh

410
00:15:03,360 --> 00:15:06,320
file inside part of our inside uh

411
00:15:06,320 --> 00:15:07,120
plug-in

412
00:15:07,120 --> 00:15:10,720
okay and then uh this is a vac uh bac3

413
00:15:10,720 --> 00:15:15,279
emulator so we always wanted to see uh

414
00:15:15,279 --> 00:15:17,440
all the different kind of a project we

415
00:15:17,440 --> 00:15:19,920
we even have a a

416
00:15:19,920 --> 00:15:23,040
generic unpacker uh i think we receive

417
00:15:23,040 --> 00:15:23,600
it like

418
00:15:23,600 --> 00:15:25,279
we saw in like what a couple of days

419
00:15:25,279 --> 00:15:27,040
back that fully runs on our shilling

420
00:15:27,040 --> 00:15:27,839
framework

421
00:15:27,839 --> 00:15:30,480
so we started to see more project on top

422
00:15:30,480 --> 00:15:32,399
of our chilling framework and

423
00:15:32,399 --> 00:15:35,600
uh and uh they brings

424
00:15:35,600 --> 00:15:37,600
more value and and the way how they

425
00:15:37,600 --> 00:15:39,040
design the tools is actually quite

426
00:15:39,040 --> 00:15:40,880
amazing so uh

427
00:15:40,880 --> 00:15:43,120
we we do expect to see more and more

428
00:15:43,120 --> 00:15:44,079
different kind of

429
00:15:44,079 --> 00:15:46,079
tools that runs on top of the uh uh

430
00:15:46,079 --> 00:15:48,240
chilling framework

431
00:15:48,240 --> 00:15:50,560
okay and i i mentioned a couple of times

432
00:15:50,560 --> 00:15:53,440
of instrumentation so i guess it's

433
00:15:53,440 --> 00:15:56,639
okay or it's uh it's right for me to do

434
00:15:56,639 --> 00:15:58,160
an explanation on uh

435
00:15:58,160 --> 00:16:00,320
what is instrumentation so you guys will

436
00:16:00,320 --> 00:16:01,440
have very

437
00:16:01,440 --> 00:16:06,240
uh uh uh a better idea on you know why

438
00:16:06,240 --> 00:16:07,839
the illumination tools should come with

439
00:16:07,839 --> 00:16:09,680
your instrumentation and why this is

440
00:16:09,680 --> 00:16:11,199
important for for reverse

441
00:16:11,199 --> 00:16:13,758
engineers

442
00:16:14,959 --> 00:16:17,519
so uh we have two parts over here the

443
00:16:17,519 --> 00:16:19,519
upper part and the lower part the upper

444
00:16:19,519 --> 00:16:19,839
part

445
00:16:19,839 --> 00:16:23,680
is where you started to run a binary or

446
00:16:23,680 --> 00:16:26,240
smart contract in

447
00:16:26,240 --> 00:16:29,199
the sense of our very last uh uh uh

448
00:16:29,199 --> 00:16:30,639
session which is the the

449
00:16:30,639 --> 00:16:33,759
the evm demo all right your

450
00:16:33,759 --> 00:16:36,320
file sequence is always uh starts from a

451
00:16:36,320 --> 00:16:37,120
to b to c

452
00:16:37,120 --> 00:16:39,920
to d to e to f all right so this is how

453
00:16:39,920 --> 00:16:41,759
a binary or smart

454
00:16:41,759 --> 00:16:43,839
smart contract should execute okay of

455
00:16:43,839 --> 00:16:45,360
course uh most of the cases

456
00:16:45,360 --> 00:16:48,560
it's not always a one-way flow they will

457
00:16:48,560 --> 00:16:49,279
come back and

458
00:16:49,279 --> 00:16:52,399
back and forth back and forth and uh hey

459
00:16:52,399 --> 00:16:53,920
you you know the entire idea you know

460
00:16:53,920 --> 00:16:55,680
it's always from uh to start until the

461
00:16:55,680 --> 00:16:56,000
uh

462
00:16:56,000 --> 00:16:59,519
the very end okay so the instrumentation

463
00:16:59,519 --> 00:17:01,839
that the idea for instrumentation is we

464
00:17:01,839 --> 00:17:02,720
wanted

465
00:17:02,720 --> 00:17:05,679
reverse engineer all right to have the

466
00:17:05,679 --> 00:17:06,720
same method

467
00:17:06,720 --> 00:17:08,640
when they try to execute a binary if

468
00:17:08,640 --> 00:17:10,720
they wanted to change the pipe code

469
00:17:10,720 --> 00:17:14,319
or or that or the binary inside

470
00:17:14,319 --> 00:17:17,119
the binary code inside a specific file

471
00:17:17,119 --> 00:17:18,880
they can do it on the spot

472
00:17:18,880 --> 00:17:21,599
and then they don't have to execute a

473
00:17:21,599 --> 00:17:23,439
you can start from b

474
00:17:23,439 --> 00:17:25,919
and then you can go to a d and then you

475
00:17:25,919 --> 00:17:27,359
can stop you know e and then you can

476
00:17:27,359 --> 00:17:27,839
start

477
00:17:27,839 --> 00:17:30,080
all over again so along the way you

478
00:17:30,080 --> 00:17:32,160
cannot you you cannot replace the

479
00:17:32,160 --> 00:17:34,480
the function call you can alter the

480
00:17:34,480 --> 00:17:35,360
memory

481
00:17:35,360 --> 00:17:37,440
so these are the few things that the few

482
00:17:37,440 --> 00:17:38,559
examples that uh

483
00:17:38,559 --> 00:17:41,600
uh a reverse engineer can do or

484
00:17:41,600 --> 00:17:44,400
even uh uh when you design a father

485
00:17:44,400 --> 00:17:46,160
there are certain place that you want to

486
00:17:46,160 --> 00:17:47,919
to to replace the functions to make sure

487
00:17:47,919 --> 00:17:49,600
that executions run faster

488
00:17:49,600 --> 00:17:53,120
or to skip certain functions uh

489
00:17:53,120 --> 00:17:55,360
so you don't have to run it you just can

490
00:17:55,360 --> 00:17:56,240
uh return

491
00:17:56,240 --> 00:17:58,799
whatever results that uh that you are

492
00:17:58,799 --> 00:17:59,679
expecting

493
00:17:59,679 --> 00:18:01,440
so these are the few things that uh that

494
00:18:01,440 --> 00:18:03,360
uh that you can do

495
00:18:03,360 --> 00:18:05,760
okay so it's uh it comes in very handy

496
00:18:05,760 --> 00:18:07,440
for for reverse engineers for

497
00:18:07,440 --> 00:18:08,960
for whoever wanted to run the faster

498
00:18:08,960 --> 00:18:11,120
whatsoever

499
00:18:11,120 --> 00:18:12,799
so that that that is a brief

500
00:18:12,799 --> 00:18:16,080
introduction for for instrumentation

501
00:18:16,080 --> 00:18:20,640
okay so uh i will pass the floor to uh

502
00:18:20,640 --> 00:18:21,520
to uh

503
00:18:21,520 --> 00:18:25,120
uh it's a shell all right and then uh

504
00:18:25,120 --> 00:18:28,400
before he thinks uh i talk too much

505
00:18:28,400 --> 00:18:30,640
okay so let's start in this session i

506
00:18:30,640 --> 00:18:32,240
will introduce the story of

507
00:18:32,240 --> 00:18:36,080
cheating and radar 2. so so firstly the

508
00:18:36,080 --> 00:18:38,160
stories

509
00:18:38,160 --> 00:18:40,559
so firstly the story starts with chin

510
00:18:40,559 --> 00:18:41,520
and red

511
00:18:41,520 --> 00:18:43,679
but for a long time i'm considered and

512
00:18:43,679 --> 00:18:45,520
considering which

513
00:18:45,520 --> 00:18:48,559
and chile new south static analysis so

514
00:18:48,559 --> 00:18:50,720
so i'm found so so i found some

515
00:18:50,720 --> 00:18:51,760
alternative

516
00:18:51,760 --> 00:18:54,799
you know we all use the eddy but

517
00:18:54,799 --> 00:18:57,840
but indeed i hate other person so

518
00:18:57,840 --> 00:18:59,840
so we found the red dial tool and and

519
00:18:59,840 --> 00:19:01,200
the room will

520
00:19:01,200 --> 00:19:03,200
change right there too i think that that

521
00:19:03,200 --> 00:19:05,440
is our best choice

522
00:19:05,440 --> 00:19:07,840
so firstly why were there two chilean

523
00:19:07,840 --> 00:19:08,880
framework provide

524
00:19:08,880 --> 00:19:11,120
almost the best dynamic instrumentation

525
00:19:11,120 --> 00:19:12,080
experiences

526
00:19:12,080 --> 00:19:14,480
ever since i think for example we have

527
00:19:14,480 --> 00:19:16,799
the system emulation we have a flexible

528
00:19:16,799 --> 00:19:18,080
hook and snapshot

529
00:19:18,080 --> 00:19:20,080
and we have the full control of our

530
00:19:20,080 --> 00:19:21,520
sandbox for example

531
00:19:21,520 --> 00:19:23,679
your outer score author function you

532
00:19:23,679 --> 00:19:25,840
alter the original control flow

533
00:19:25,840 --> 00:19:28,400
so so for very very long time i'm

534
00:19:28,400 --> 00:19:29,039
thinking of

535
00:19:29,039 --> 00:19:30,799
what's next so the first thing the

536
00:19:30,799 --> 00:19:32,080
static analysis and

537
00:19:32,080 --> 00:19:34,160
and the second is symbolic execution

538
00:19:34,160 --> 00:19:35,360
yeah that's our

539
00:19:35,360 --> 00:19:37,760
story today but you know that the two

540
00:19:37,760 --> 00:19:38,720
things are both

541
00:19:38,720 --> 00:19:41,039
very complex thing so i think we should

542
00:19:41,039 --> 00:19:42,720
stand on the shoot the shooter of

543
00:19:42,720 --> 00:19:45,280
gents but of course but the the chance

544
00:19:45,280 --> 00:19:46,320
should be free once

545
00:19:46,320 --> 00:19:48,320
yes i i have to say again i hit at the

546
00:19:48,320 --> 00:19:50,320
passenger and and you won't see i die in

547
00:19:50,320 --> 00:19:51,840
this session although

548
00:19:51,840 --> 00:19:53,919
although although they are they are they

549
00:19:53,919 --> 00:19:55,919
are on my desktop but but i won't use

550
00:19:55,919 --> 00:19:57,840
them in this session

551
00:19:57,840 --> 00:20:00,320
so so as i said just now rather to the

552
00:20:00,320 --> 00:20:03,280
best alternative

553
00:20:04,080 --> 00:20:07,120
so so why are there two rather two

554
00:20:07,120 --> 00:20:09,360
or i see r2 actually the swiss knife of

555
00:20:09,360 --> 00:20:11,360
the reverse engineer you know but it all

556
00:20:11,360 --> 00:20:13,440
but it also had almost the steepest

557
00:20:13,440 --> 00:20:14,720
learning curve

558
00:20:14,720 --> 00:20:16,799
because it follows unique philosophy you

559
00:20:16,799 --> 00:20:19,120
know and the source is your best friend

560
00:20:19,120 --> 00:20:21,919
the talk of the r2 is really bad to be

561
00:20:21,919 --> 00:20:22,960
honest

562
00:20:22,960 --> 00:20:25,440
so you could find almost everything you

563
00:20:25,440 --> 00:20:27,440
need for security analysis for example

564
00:20:27,440 --> 00:20:29,200
disassembly control flow graph

565
00:20:29,200 --> 00:20:32,400
and debugging all of those other

566
00:20:32,400 --> 00:20:33,679
other teams have some similar

567
00:20:33,679 --> 00:20:36,240
functionality but my writer has had more

568
00:20:36,240 --> 00:20:37,280
complete one

569
00:20:37,280 --> 00:20:38,960
and there are tons of utilities for

570
00:20:38,960 --> 00:20:42,080
example the question mark is my favorite

571
00:20:42,080 --> 00:20:45,679
so what we really focus on is the esl

572
00:20:45,679 --> 00:20:47,520
or we say invaluable strings

573
00:20:47,520 --> 00:20:48,880
intermediate language

574
00:20:48,880 --> 00:20:51,600
it it uses reverse polished notation and

575
00:20:51,600 --> 00:20:53,679
a design for interpretation and suitable

576
00:20:53,679 --> 00:20:57,039
for symbolic execution

577
00:20:57,440 --> 00:21:00,559
so for next so fine integration

578
00:21:00,559 --> 00:21:03,679
the the story the story goes to how how

579
00:21:03,679 --> 00:21:04,000
we

580
00:21:04,000 --> 00:21:07,840
integrate the r2 to our team framework

581
00:21:07,840 --> 00:21:10,720
and at that time i was considering

582
00:21:10,720 --> 00:21:12,880
integrating r2 to change remote the

583
00:21:12,880 --> 00:21:14,880
octopipe with only available python

584
00:21:14,880 --> 00:21:15,600
bindings

585
00:21:15,600 --> 00:21:17,919
but it requires a right to being stored

586
00:21:17,919 --> 00:21:19,039
system wide

587
00:21:19,039 --> 00:21:21,200
but but you know we always hope the help

588
00:21:21,200 --> 00:21:23,840
ceiling to be installed easily and

589
00:21:23,840 --> 00:21:26,559
and used and used by one command just

590
00:21:26,559 --> 00:21:28,640
pip install and you're ready to go

591
00:21:28,640 --> 00:21:31,919
so so so i don't think r2 is a is a good

592
00:21:31,919 --> 00:21:32,720
choice

593
00:21:32,720 --> 00:21:34,640
so and also sometimes we will have to

594
00:21:34,640 --> 00:21:37,840
call the low-level apis

595
00:21:37,840 --> 00:21:40,080
and another and another choices are long

596
00:21:40,080 --> 00:21:42,400
along the another way is wrong it runs a

597
00:21:42,400 --> 00:21:43,039
person

598
00:21:43,039 --> 00:21:45,679
interpreter in r2 it seems good but we

599
00:21:45,679 --> 00:21:47,760
expect to run standalone not

600
00:21:47,760 --> 00:21:50,480
no no but we wouldn't want to run

601
00:21:50,480 --> 00:21:52,559
ourselves in another application

602
00:21:52,559 --> 00:21:55,679
and it also require full system-wide r2

603
00:21:55,679 --> 00:21:56,880
installation

604
00:21:56,880 --> 00:22:00,960
so i i decided to invent the wheel

605
00:22:00,960 --> 00:22:03,919
so here comes actually bar uh first

606
00:22:03,919 --> 00:22:06,240
first i have to explain what is rebar uh

607
00:22:06,240 --> 00:22:08,480
artworks believe two parts the

608
00:22:08,480 --> 00:22:11,679
uh the ping the bean are being r and

609
00:22:11,679 --> 00:22:14,400
for example here for example we can go

610
00:22:14,400 --> 00:22:14,880
to

611
00:22:14,880 --> 00:22:18,320
red dial okay you can

612
00:22:18,320 --> 00:22:22,000
as you can see being r and and the

613
00:22:22,000 --> 00:22:24,559
leap r it is really two parts the leap

614
00:22:24,559 --> 00:22:26,720
is a core of the r2 provides

615
00:22:26,720 --> 00:22:29,440
all the all the apis we need but and

616
00:22:29,440 --> 00:22:31,440
also our two headers is clean enough to

617
00:22:31,440 --> 00:22:32,400
do all 2g

618
00:22:32,400 --> 00:22:34,559
generation so the binding effects are

619
00:22:34,559 --> 00:22:36,240
generated automatically with the type

620
00:22:36,240 --> 00:22:38,320
sleep and the git fci

621
00:22:38,320 --> 00:22:41,200
so for example here here it is an

622
00:22:41,200 --> 00:22:42,480
example of the

623
00:22:42,480 --> 00:22:44,720
of our api and after cell auto

624
00:22:44,720 --> 00:22:46,400
generation and the sound very hard

625
00:22:46,400 --> 00:22:49,039
in fact we will get we get the testing

626
00:22:49,039 --> 00:22:50,240
code like this

627
00:22:50,240 --> 00:22:54,000
so basically we could have a try

628
00:22:54,000 --> 00:22:56,880
here install installation into very

629
00:22:56,880 --> 00:22:58,000
simple

630
00:22:58,000 --> 00:23:01,440
three or three install r2d bar or you

631
00:23:01,440 --> 00:23:02,720
can use the argument

632
00:23:02,720 --> 00:23:06,640
upgrade the latest version should be

633
00:23:06,640 --> 00:23:09,120
five point two power one point plus one

634
00:23:09,120 --> 00:23:10,799
and you can open

635
00:23:10,799 --> 00:23:14,080
a piston combiner and uh and the

636
00:23:14,080 --> 00:23:15,520
encouraging type

637
00:23:15,520 --> 00:23:18,799
import uh r2 anonymous import

638
00:23:18,799 --> 00:23:22,880
import with r and and firstly we create

639
00:23:22,880 --> 00:23:23,440
a r

640
00:23:23,440 --> 00:23:25,760
core

641
00:23:26,990 --> 00:23:30,069
[Applause]

642
00:23:32,559 --> 00:23:36,799
then we can we can execute a combined

643
00:23:36,799 --> 00:23:39,840
about seven question mark this command

644
00:23:39,840 --> 00:23:40,240
will

645
00:23:40,240 --> 00:23:43,600
will will get this com one will

646
00:23:43,600 --> 00:23:47,600
will prompt you uh easter egg

647
00:23:47,600 --> 00:23:50,559
yeah what are you doing so let's do this

648
00:23:50,559 --> 00:23:53,520
to let do this in python code

649
00:23:53,520 --> 00:23:57,520
after creating a core we use a

650
00:23:57,520 --> 00:24:00,559
r r4 r4

651
00:24:00,559 --> 00:24:04,080
command command command

652
00:24:04,080 --> 00:24:07,120
command yes command string and and

653
00:24:07,120 --> 00:24:10,159
and use that acro just now and create

654
00:24:10,159 --> 00:24:10,880
the

655
00:24:10,880 --> 00:24:13,919
screen buffer

656
00:24:13,919 --> 00:24:19,840
and uh one two three

657
00:24:24,080 --> 00:24:25,679
yeah let's see if you you get you get a

658
00:24:25,679 --> 00:24:27,679
pointer towards for a

659
00:24:27,679 --> 00:24:31,360
category you have to see tabs

660
00:24:31,360 --> 00:24:34,559
there stream

661
00:24:34,559 --> 00:24:39,279
at oh oh oh oh

662
00:24:39,279 --> 00:24:42,000
sorry have fun

663
00:24:44,240 --> 00:24:47,919
and shrink yes you get it

664
00:24:47,919 --> 00:24:50,720
so so the in fact the the usage of

665
00:24:50,720 --> 00:24:52,720
activity is very very verbal since you

666
00:24:52,720 --> 00:24:54,240
since we are using the

667
00:24:54,240 --> 00:24:56,799
the most low the most low level api but

668
00:24:56,799 --> 00:24:58,320
it can be used to implement

669
00:24:58,320 --> 00:25:01,039
archive in minutes and the build of many

670
00:25:01,039 --> 00:25:02,960
interesting tools

671
00:25:02,960 --> 00:25:05,520
so for next the story of symbolic

672
00:25:05,520 --> 00:25:07,919
execution stars

673
00:25:07,919 --> 00:25:09,600
first of all i have to introduce what

674
00:25:09,600 --> 00:25:11,440
what in symbolic execution although

675
00:25:11,440 --> 00:25:13,039
i think some guys may have may have you

676
00:25:13,039 --> 00:25:15,039
have already

677
00:25:15,039 --> 00:25:17,440
been familiar with that uh i can

678
00:25:17,440 --> 00:25:19,039
introduce inject in two lines

679
00:25:19,039 --> 00:25:21,600
in normal cases you know x equals one

680
00:25:21,600 --> 00:25:23,600
then x plus one equals two two

681
00:25:23,600 --> 00:25:25,520
but for symbolic execution you know x

682
00:25:25,520 --> 00:25:27,120
plus y equals to two

683
00:25:27,120 --> 00:25:29,520
then x then you know x equals 1 where x

684
00:25:29,520 --> 00:25:31,200
is our symbolic value

685
00:25:31,200 --> 00:25:34,159
so so it's it's another in is another

686
00:25:34,159 --> 00:25:36,000
way is the other way

687
00:25:36,000 --> 00:25:40,400
so and also many symbolic execution

688
00:25:40,400 --> 00:25:43,600
framework or lag anger it use it

689
00:25:43,600 --> 00:25:47,200
it use an intermediate language so the

690
00:25:47,200 --> 00:25:48,960
essential of an intermediate language

691
00:25:48,960 --> 00:25:51,679
lies in it can reduce it can reduce the

692
00:25:51,679 --> 00:25:53,919
large instruction size for example

693
00:25:53,919 --> 00:25:57,360
x x86 the snare side to macro operations

694
00:25:57,360 --> 00:25:59,760
and it's easy to implement an instrument

695
00:25:59,760 --> 00:26:01,200
and the most important is cross

696
00:26:01,200 --> 00:26:02,400
architectures

697
00:26:02,400 --> 00:26:05,919
so among among all the or not among many

698
00:26:05,919 --> 00:26:08,000
intermediary language itself is a really

699
00:26:08,000 --> 00:26:09,919
good choice the first day

700
00:26:09,919 --> 00:26:12,320
again and again is free it's it's open

701
00:26:12,320 --> 00:26:13,520
source and free and

702
00:26:13,520 --> 00:26:17,279
valuable and easy to interpret so

703
00:26:17,279 --> 00:26:19,679
also i could give you a very short

704
00:26:19,679 --> 00:26:20,640
example

705
00:26:20,640 --> 00:26:24,000
for example also is that what what esl

706
00:26:24,000 --> 00:26:27,039
looked like for example a

707
00:26:27,039 --> 00:26:30,159
e one for example uh

708
00:26:30,159 --> 00:26:32,559
this one uh as i said just now it's

709
00:26:32,559 --> 00:26:34,799
reverse polish notation so

710
00:26:34,799 --> 00:26:38,080
so you get one two and and you get a a

711
00:26:38,080 --> 00:26:39,440
plus or b

712
00:26:39,440 --> 00:26:42,880
so so you'll get three and and for

713
00:26:42,880 --> 00:26:43,520
example

714
00:26:43,520 --> 00:26:46,720
for a more complex one

715
00:26:46,799 --> 00:26:50,880
for example one rex equals

716
00:26:50,880 --> 00:26:54,159
and you can get and you can get

717
00:26:54,159 --> 00:26:58,400
rx equals one and for example

718
00:26:58,400 --> 00:27:01,440
our x no oh yes

719
00:27:01,440 --> 00:27:05,039
and one two with

720
00:27:05,039 --> 00:27:07,840
you know with

721
00:27:08,480 --> 00:27:12,720
rf eco and you get three

722
00:27:14,000 --> 00:27:16,480
you get three so it's easy the reversing

723
00:27:16,480 --> 00:27:17,679
polish notation and

724
00:27:17,679 --> 00:27:21,200
very easy to implement

725
00:27:21,200 --> 00:27:24,240
so so how symbolic took equation is

726
00:27:24,240 --> 00:27:26,559
implemented in a more generated way

727
00:27:26,559 --> 00:27:30,080
the core concept is state the state uh

728
00:27:30,080 --> 00:27:32,480
the state includes a full memory and the

729
00:27:32,480 --> 00:27:34,720
red and register at a specific time

730
00:27:34,720 --> 00:27:36,880
and increase the constraint to reach

731
00:27:36,880 --> 00:27:37,760
that state

732
00:27:37,760 --> 00:27:40,480
and it should be immutable so generous

733
00:27:40,480 --> 00:27:42,799
during style is the first way you input

734
00:27:42,799 --> 00:27:45,360
symbolic values and execute and gather

735
00:27:45,360 --> 00:27:46,960
constraint constraints

736
00:27:46,960 --> 00:27:48,320
and recent point and solve the

737
00:27:48,320 --> 00:27:50,720
constraints and evaluate the same values

738
00:27:50,720 --> 00:27:52,880
uh for example on the right figure for

739
00:27:52,880 --> 00:27:54,720
the uh the initial state is

740
00:27:54,720 --> 00:27:57,440
it one and the constraint is h equals

741
00:27:57,440 --> 00:27:58,240
equals to

742
00:27:58,240 --> 00:28:01,520
one and and there is and there is a

743
00:28:01,520 --> 00:28:04,559
and there is if statement and and

744
00:28:04,559 --> 00:28:07,679
if a a l equals to zero you guessed

745
00:28:07,679 --> 00:28:10,880
a two and if a l not e code doesn't

746
00:28:10,880 --> 00:28:13,039
equals to zero you get state three

747
00:28:13,039 --> 00:28:16,320
all the three states um

748
00:28:16,320 --> 00:28:19,679
that are not equal and the ah and ar

749
00:28:19,679 --> 00:28:21,840
here may be symbolic values

750
00:28:21,840 --> 00:28:23,679
so when the engine reaches state we

751
00:28:23,679 --> 00:28:24,880
would like uh say

752
00:28:24,880 --> 00:28:28,399
state to oct3 we use uh sat silver

753
00:28:28,399 --> 00:28:30,880
these three to e value to evaluate the

754
00:28:30,880 --> 00:28:31,520
value of

755
00:28:31,520 --> 00:28:34,080
h of a l and for large and complex

756
00:28:34,080 --> 00:28:34,880
algorithm

757
00:28:34,880 --> 00:28:37,520
sim simple execution can really save

758
00:28:37,520 --> 00:28:40,159
lots of time

759
00:28:40,159 --> 00:28:43,520
so so in this integration integration

760
00:28:43,520 --> 00:28:45,679
with chin and the radar 2 what shining

761
00:28:45,679 --> 00:28:46,960
can really do

762
00:28:46,960 --> 00:28:49,840
the most important part that we can we

763
00:28:49,840 --> 00:28:52,240
can achieve component reuse

764
00:28:52,240 --> 00:28:54,480
so there are two parts the first part

765
00:28:54,480 --> 00:28:56,000
the system emulation

766
00:28:56,000 --> 00:28:58,880
for example for example in a complex

767
00:28:58,880 --> 00:28:59,440
function

768
00:28:59,440 --> 00:29:01,919
there are some print printf and the pro

769
00:29:01,919 --> 00:29:02,720
and proofs

770
00:29:02,720 --> 00:29:05,279
so for this function chillingcam can

771
00:29:05,279 --> 00:29:06,159
reuse it

772
00:29:06,159 --> 00:29:09,360
is cisco emulation and also for binary

773
00:29:09,360 --> 00:29:12,640
load and memory setup

774
00:29:12,640 --> 00:29:15,120
symbolic during symbolic execution you

775
00:29:15,120 --> 00:29:17,279
need to set up memory and the setup

776
00:29:17,279 --> 00:29:19,919
and the setup memory my ping and the

777
00:29:19,919 --> 00:29:20,559
loader

778
00:29:20,559 --> 00:29:23,600
load the symbol load the load the data

779
00:29:23,600 --> 00:29:26,720
so all this code can be reused within uh

780
00:29:26,720 --> 00:29:27,200
within

781
00:29:27,200 --> 00:29:30,480
our existing code base so our goal

782
00:29:30,480 --> 00:29:32,799
also although that user can always

783
00:29:32,799 --> 00:29:34,960
switch underlying engine

784
00:29:34,960 --> 00:29:36,559
while keeping the high level api

785
00:29:36,559 --> 00:29:39,120
unchecked

786
00:29:39,520 --> 00:29:41,840
so although there are some difficulties

787
00:29:41,840 --> 00:29:44,000
in fact implementation is much much more

788
00:29:44,000 --> 00:29:44,880
complex than

789
00:29:44,880 --> 00:29:48,000
i expected about two weeks ago

790
00:29:48,000 --> 00:29:50,480
r2 itself have us to itself of course

791
00:29:50,480 --> 00:29:51,919
implement implement

792
00:29:51,919 --> 00:29:55,440
esl but it doesn't have memory rewrite

793
00:29:55,440 --> 00:29:58,240
implemented so we have to do it all and

794
00:29:58,240 --> 00:30:00,799
secondly we can use r2 register

795
00:30:00,799 --> 00:30:03,200
implementation for example we can use

796
00:30:03,200 --> 00:30:05,600
freelancer ieee or this command

797
00:30:05,600 --> 00:30:08,480
because because ss just said we have to

798
00:30:08,480 --> 00:30:08,960
store

799
00:30:08,960 --> 00:30:11,919
symbolic values and and and the actual

800
00:30:11,919 --> 00:30:13,440
information you can only store

801
00:30:13,440 --> 00:30:16,880
integers so as a result we did free

802
00:30:16,880 --> 00:30:19,600
implementation of esl and it may become

803
00:30:19,600 --> 00:30:21,360
another emulation engine to replace

804
00:30:21,360 --> 00:30:22,480
unicorn

805
00:30:22,480 --> 00:30:25,760
and symbolic execution is never a silver

806
00:30:25,760 --> 00:30:26,559
belief

807
00:30:26,559 --> 00:30:28,640
first of all it's really really really

808
00:30:28,640 --> 00:30:30,720
slow since we have since we have to keep

809
00:30:30,720 --> 00:30:32,159
each state immutable

810
00:30:32,159 --> 00:30:35,279
and the state explosion for complex

811
00:30:35,279 --> 00:30:36,480
function and then makes

812
00:30:36,480 --> 00:30:39,600
it almost unacceptable slow

813
00:30:39,600 --> 00:30:42,240
so next we'll show you the demo the

814
00:30:42,240 --> 00:30:43,440
simple crack me

815
00:30:43,440 --> 00:30:46,240
first of all the the source the source

816
00:30:46,240 --> 00:30:47,039
is

817
00:30:47,039 --> 00:30:50,880
the source source the program source

818
00:30:50,880 --> 00:30:54,000
here as you can see it's a simple c

819
00:30:54,000 --> 00:30:56,559
program and you and you get you get the

820
00:30:56,559 --> 00:30:57,279
input from

821
00:30:57,279 --> 00:31:00,640
std standard input and the test input

822
00:31:00,640 --> 00:31:04,000
and the input in fact is is an xor

823
00:31:04,000 --> 00:31:08,080
secret with uh with their x57

824
00:31:08,080 --> 00:31:10,399
and if if the and the if the reality

825
00:31:10,399 --> 00:31:11,600
correctly return

826
00:31:11,600 --> 00:31:13,679
it returns one and then if and any

827
00:31:13,679 --> 00:31:16,080
character is not correct return zero

828
00:31:16,080 --> 00:31:19,279
and the flag is very very easy to to so

829
00:31:19,279 --> 00:31:20,799
for example

830
00:31:20,799 --> 00:31:23,360
you for example use testing and for

831
00:31:23,360 --> 00:31:24,320
example

832
00:31:24,320 --> 00:31:28,480
when we know stack for example

833
00:31:28,480 --> 00:31:33,440
and we have and we have the files

834
00:31:33,440 --> 00:31:36,880
and we can uh

835
00:31:36,880 --> 00:31:43,279
and we can xor it with 0x57

836
00:31:44,000 --> 00:31:47,360
and and the way and we can contact them

837
00:31:47,360 --> 00:31:48,320
to die

838
00:31:48,320 --> 00:31:51,039
yes and and under the correct the

839
00:31:51,039 --> 00:31:53,120
correct flag is cheating framework

840
00:31:53,120 --> 00:31:56,320
inside we can oh oh

841
00:31:56,320 --> 00:31:59,519
remember this file is a is a it

842
00:31:59,519 --> 00:32:02,559
is an amd6v4 file but again

843
00:32:02,559 --> 00:32:05,120
our framework is cross architecture so

844
00:32:05,120 --> 00:32:06,480
we don't need to

845
00:32:06,480 --> 00:32:10,240
so we don't need a real virtual machine

846
00:32:10,240 --> 00:32:13,760
since there's in this mac and we can use

847
00:32:13,760 --> 00:32:14,159
two

848
00:32:14,159 --> 00:32:18,480
out too wrong and and to test our

849
00:32:18,480 --> 00:32:22,000
thing to test our flag yeah and this

850
00:32:22,000 --> 00:32:22,480
correct

851
00:32:22,480 --> 00:32:24,880
of course if you into any other thing

852
00:32:24,880 --> 00:32:27,200
yeah if we should try again

853
00:32:27,200 --> 00:32:30,559
so so next uh

854
00:32:30,559 --> 00:32:34,720
so next week we can analyze it with r2

855
00:32:34,720 --> 00:32:38,240
so firstly input r2 oh there is another

856
00:32:38,240 --> 00:32:39,200
and easter egg

857
00:32:39,200 --> 00:32:43,120
and adjust again so if you input

858
00:32:43,120 --> 00:32:45,919
enough enough a and it will tell an r2

859
00:32:45,919 --> 00:32:47,679
developer is coming to a place to

860
00:32:47,679 --> 00:32:49,440
manually analyze this program please

861
00:32:49,440 --> 00:32:50,480
wait for it

862
00:32:50,480 --> 00:32:53,840
okay so just four is enough and

863
00:32:53,840 --> 00:32:57,120
and we can find our our

864
00:32:57,120 --> 00:33:00,799
our our function

865
00:33:02,000 --> 00:33:05,840
f2 f f4

866
00:33:05,840 --> 00:33:09,039
f what sorry i forget

867
00:33:09,039 --> 00:33:12,799
let's forget okay we can get

868
00:33:12,799 --> 00:33:16,158
our syntax

869
00:33:17,039 --> 00:33:20,080
oh oh sorry i forget i can use seek

870
00:33:20,080 --> 00:33:24,960
directly oh

871
00:33:24,960 --> 00:33:28,240
so i have to restart i just defined that

872
00:33:28,240 --> 00:33:29,360
location

873
00:33:29,360 --> 00:33:32,559
with the sim dot text so this this time

874
00:33:32,559 --> 00:33:35,760
we stick through here and the pd bring

875
00:33:35,760 --> 00:33:37,360
the design line

876
00:33:37,360 --> 00:33:40,399
yeah that's a function and and r2 has a

877
00:33:40,399 --> 00:33:42,240
visual mode

878
00:33:42,240 --> 00:33:44,960
and in this mode we can view the control

879
00:33:44,960 --> 00:33:45,679
flow graph

880
00:33:45,679 --> 00:33:50,159
yeah what's the shortcut

881
00:33:50,159 --> 00:33:53,840
sorry i forget the shortcut

882
00:33:54,000 --> 00:33:57,279
oh i remember b

883
00:33:58,399 --> 00:34:00,719
oof

884
00:34:04,840 --> 00:34:07,840
oops

885
00:34:09,040 --> 00:34:11,599
go down

886
00:34:12,639 --> 00:34:15,199
so in the graph mode we can we can see

887
00:34:15,199 --> 00:34:16,879
the the real logic

888
00:34:16,879 --> 00:34:19,599
firstly in the function entrance we get

889
00:34:19,599 --> 00:34:21,440
the input and we jump to

890
00:34:21,440 --> 00:34:24,560
the zero x double one d four and

891
00:34:24,560 --> 00:34:26,399
and the way and we retrieve one byte

892
00:34:26,399 --> 00:34:28,159
from the secret and test if

893
00:34:28,159 --> 00:34:31,440
zero if if if

894
00:34:31,440 --> 00:34:35,440
it's uh if it's not zero

895
00:34:35,440 --> 00:34:37,440
it means that the com the the compress

896
00:34:37,440 --> 00:34:39,520
the comparison is over and we

897
00:34:39,520 --> 00:34:43,440
return one and if it's it's not there if

898
00:34:43,440 --> 00:34:46,879
if it's there if it's not zero it goes

899
00:34:46,879 --> 00:34:48,239
to this branch and

900
00:34:48,239 --> 00:34:51,119
and the test input with the secret and

901
00:34:51,119 --> 00:34:52,000
and the test

902
00:34:52,000 --> 00:34:55,280
and test the result and so basically

903
00:34:55,280 --> 00:34:57,520
basically the most important comparison

904
00:34:57,520 --> 00:34:58,400
is here

905
00:34:58,400 --> 00:35:01,680
let's compare cl and er

906
00:35:01,680 --> 00:35:05,839
this one compares let's compare

907
00:35:05,839 --> 00:35:09,359
cl and a l here

908
00:35:09,359 --> 00:35:12,400
double one c five this one so we so we

909
00:35:12,400 --> 00:35:14,079
just hook here and

910
00:35:14,079 --> 00:35:16,560
and uh and when when our our symbolic

911
00:35:16,560 --> 00:35:17,200
execution

912
00:35:17,200 --> 00:35:19,359
engine reached this state way we stopped

913
00:35:19,359 --> 00:35:22,560
the result the input flag

914
00:35:22,560 --> 00:35:26,000
so next i will show you the code

915
00:35:26,000 --> 00:35:29,119
where the code okay here so firstly

916
00:35:29,119 --> 00:35:31,760
this is the file path for convenient i i

917
00:35:31,760 --> 00:35:32,880
hard coded

918
00:35:32,880 --> 00:35:35,680
and you create our r2 instance and the

919
00:35:35,680 --> 00:35:37,040
open open file

920
00:35:37,040 --> 00:35:39,520
or even generally wrong since it's very

921
00:35:39,520 --> 00:35:40,560
slow

922
00:35:40,560 --> 00:35:44,079
so so during surround let's see the code

923
00:35:44,079 --> 00:35:46,800
firstly just like i did before we

924
00:35:46,800 --> 00:35:48,560
analyze the analyze the

925
00:35:48,560 --> 00:35:51,119
file and we stick to the target function

926
00:35:51,119 --> 00:35:52,880
and we create the engine

927
00:35:52,880 --> 00:35:55,520
and and select and select the existing

928
00:35:55,520 --> 00:35:58,480
key enchanting api we you're mapping for

929
00:35:58,480 --> 00:36:01,599
here we could shoot the mapping for

930
00:36:01,599 --> 00:36:05,200
here and and we and we get our target

931
00:36:05,200 --> 00:36:06,800
function and we

932
00:36:06,800 --> 00:36:08,960
and we set the stock and we read the

933
00:36:08,960 --> 00:36:10,720
flag no note there there

934
00:36:10,720 --> 00:36:12,880
there is a symbolic value we don't know

935
00:36:12,880 --> 00:36:14,560
the actual content of the flag

936
00:36:14,560 --> 00:36:18,720
and we we write a symbolic value here

937
00:36:18,720 --> 00:36:21,280
and we hook the state there there here

938
00:36:21,280 --> 00:36:22,560
is our callback

939
00:36:22,560 --> 00:36:25,680
and and we we start emulation in the

940
00:36:25,680 --> 00:36:26,720
callback we

941
00:36:26,720 --> 00:36:30,000
we test we're going to reach 0x

942
00:36:30,000 --> 00:36:33,119
0x c7 here

943
00:36:33,119 --> 00:36:36,240
here this jump in this jump

944
00:36:36,240 --> 00:36:39,119
and and we will add the constraint and

945
00:36:39,119 --> 00:36:40,160
we check whether

946
00:36:40,160 --> 00:36:43,280
it's to satisfy these three and and we

947
00:36:43,280 --> 00:36:45,680
and we pre and if if you said my three

948
00:36:45,680 --> 00:36:47,440
and we print the flag

949
00:36:47,440 --> 00:36:50,240
and you can see the result of the script

950
00:36:50,240 --> 00:36:50,720
uh

951
00:36:50,720 --> 00:36:54,800
printer flag correctly so

952
00:36:54,800 --> 00:36:57,920
so as you can see all these all the

953
00:36:57,920 --> 00:37:00,720
api is designed like current chain api

954
00:37:00,720 --> 00:37:00,960
and

955
00:37:00,960 --> 00:37:03,760
they would be put under q qr name space

956
00:37:03,760 --> 00:37:05,440
after integration let your element

957
00:37:05,440 --> 00:37:06,480
rewrite and correct

958
00:37:06,480 --> 00:37:09,119
rx and calculate the demand that you're

959
00:37:09,119 --> 00:37:10,000
mapping for

960
00:37:10,000 --> 00:37:12,800
and such as now the use the the all

961
00:37:12,800 --> 00:37:13,280
these

962
00:37:13,280 --> 00:37:15,599
all these underlying engines are

963
00:37:15,599 --> 00:37:17,599
transparent to the

964
00:37:17,599 --> 00:37:21,119
high-level users so for future

965
00:37:21,119 --> 00:37:23,520
so for future in fact lots of extra code

966
00:37:23,520 --> 00:37:25,680
and test case for corner cases needs to

967
00:37:25,680 --> 00:37:26,320
be done

968
00:37:26,320 --> 00:37:28,000
especially the memory and regis

969
00:37:28,000 --> 00:37:29,760
implementation you you know

970
00:37:29,760 --> 00:37:33,119
they are implemented by by me and

971
00:37:33,119 --> 00:37:35,440
and i'm sure i'm very very sure there

972
00:37:35,440 --> 00:37:37,599
are there are some still very many boxes

973
00:37:37,599 --> 00:37:38,400
for them

974
00:37:38,400 --> 00:37:40,800
and and i have to rearrange the code to

975
00:37:40,800 --> 00:37:42,880
integrate the symbolic execution engine

976
00:37:42,880 --> 00:37:44,640
to cheating to base better

977
00:37:44,640 --> 00:37:46,560
the uh by the way the codes will be

978
00:37:46,560 --> 00:37:47,760
released after some

979
00:37:47,760 --> 00:37:50,079
alteration and refactor and the most

980
00:37:50,079 --> 00:37:52,160
important one that i have to speed up

981
00:37:52,160 --> 00:37:54,560
the symbolic execution by optimizing the

982
00:37:54,560 --> 00:37:55,599
memory copy

983
00:37:55,599 --> 00:37:58,640
for example if the state for example we

984
00:37:58,640 --> 00:37:59,280
can

985
00:37:59,280 --> 00:38:02,400
we can discard the the obvious wrong

986
00:38:02,400 --> 00:38:05,119
wrong path for example some parts if it

987
00:38:05,119 --> 00:38:06,960
is the result is reducing the crash

988
00:38:06,960 --> 00:38:10,160
and we discard this branch so we so it

989
00:38:10,160 --> 00:38:12,240
can reduce our search base

990
00:38:12,240 --> 00:38:14,720
another optimization may be clw

991
00:38:14,720 --> 00:38:15,599
copyright

992
00:38:15,599 --> 00:38:18,480
so there are many many things to to do

993
00:38:18,480 --> 00:38:18,720
and

994
00:38:18,720 --> 00:38:20,800
and also we can make contributions to

995
00:38:20,800 --> 00:38:23,040
c-type sleep whether to during our test

996
00:38:23,040 --> 00:38:24,000
and usage

997
00:38:24,000 --> 00:38:26,400
and we can integrate chilean and r2 in

998
00:38:26,400 --> 00:38:28,079
the other way by running changing

999
00:38:28,079 --> 00:38:28,640
instead

1000
00:38:28,640 --> 00:38:31,599
r2 like like uh like i introduced just

1001
00:38:31,599 --> 00:38:33,440
now

1002
00:38:33,440 --> 00:38:36,079
so so the last is the credits first of

1003
00:38:36,079 --> 00:38:37,920
all credits are two for the next project

1004
00:38:37,920 --> 00:38:38,880
and the credit c

1005
00:38:38,880 --> 00:38:40,720
types leaves for art 2d by

1006
00:38:40,720 --> 00:38:43,040
implementation and the credit is also

1007
00:38:43,040 --> 00:38:44,640
for the implementing reference and

1008
00:38:44,640 --> 00:38:46,560
anchor for the design reference

1009
00:38:46,560 --> 00:38:48,480
and this way for the accent server and

1010
00:38:48,480 --> 00:38:49,599
lastly very

1011
00:38:49,599 --> 00:38:52,400
thanks pancake for the timeline help

1012
00:38:52,400 --> 00:38:54,800
that's all thank you

1013
00:38:54,800 --> 00:38:58,160
so uh today i want to show you another

1014
00:38:58,160 --> 00:39:01,040
achievements ability which is

1015
00:39:01,040 --> 00:39:05,359
an ethic smart contract nfs so

1016
00:39:05,359 --> 00:39:08,720
this this time we make a eth smart

1017
00:39:08,720 --> 00:39:09,359
contract

1018
00:39:09,359 --> 00:39:12,560
and it says framework uh is a part of

1019
00:39:12,560 --> 00:39:15,040
healing and

1020
00:39:15,040 --> 00:39:18,800
wavefully to to a new layer

1021
00:39:18,800 --> 00:39:22,560
which namely the engineer

1022
00:39:22,560 --> 00:39:26,400
that means we can do a series work

1023
00:39:26,400 --> 00:39:30,640
on this evm engine or we can develop

1024
00:39:30,640 --> 00:39:33,760
special tools based on this for

1025
00:39:33,760 --> 00:39:37,359
more targeted direction

1026
00:39:37,359 --> 00:39:41,040
generally if we want to emulate

1027
00:39:41,040 --> 00:39:44,720
a smart contract for uncertainty

1028
00:39:44,720 --> 00:39:49,359
and they should uh okay um

1029
00:39:49,359 --> 00:39:53,200
we reach the creator both blockchain and

1030
00:39:53,200 --> 00:39:54,640
the host vm

1031
00:39:54,640 --> 00:39:57,760
but in our engine since we will be

1032
00:39:57,760 --> 00:40:01,040
gonna be very easy the engine

1033
00:40:01,040 --> 00:40:04,160
integrates on chain and vm

1034
00:40:04,160 --> 00:40:07,760
uh what we need to do is just uh

1035
00:40:07,760 --> 00:40:11,920
create a class name evm emulator

1036
00:40:11,920 --> 00:40:15,920
and also changing to any each

1037
00:40:15,920 --> 00:40:19,760
history harder framework hard forks is

1038
00:40:19,760 --> 00:40:23,440
spotted in our engine

1039
00:40:23,520 --> 00:40:26,880
the engine provides a lot of function

1040
00:40:26,880 --> 00:40:28,400
for nss

1041
00:40:28,400 --> 00:40:30,880
include the uh smart contract uh

1042
00:40:30,880 --> 00:40:32,079
emulator with

1043
00:40:32,079 --> 00:40:36,079
inspire instrumentation and

1044
00:40:36,079 --> 00:40:39,599
smart static nss

1045
00:40:39,599 --> 00:40:42,640
dynamic dynamic

1046
00:40:42,640 --> 00:40:45,440
debugger fuzzing and vulnerability the

1047
00:40:45,440 --> 00:40:46,160
attack

1048
00:40:46,160 --> 00:40:49,520
and more so

1049
00:40:49,520 --> 00:40:52,720
now i want to show

1050
00:40:52,720 --> 00:40:56,960
is a static anastas

1051
00:40:56,960 --> 00:41:00,160
function as you can see

1052
00:41:00,160 --> 00:41:03,920
we just create a tuning class

1053
00:41:03,920 --> 00:41:07,359
and input a

1054
00:41:07,359 --> 00:41:11,760
contract by code on there is a string

1055
00:41:11,760 --> 00:41:14,960
so we can recover it through

1056
00:41:14,960 --> 00:41:18,079
bytes then we can use

1057
00:41:18,079 --> 00:41:23,280
and set its code by code to

1058
00:41:23,359 --> 00:41:26,640
to emphasize either structure and then

1059
00:41:26,640 --> 00:41:27,680
we can

1060
00:41:27,680 --> 00:41:31,040
either disassemble this two

1061
00:41:31,040 --> 00:41:34,079
instructions then we can answer that

1062
00:41:34,079 --> 00:41:34,720
function

1063
00:41:34,720 --> 00:41:37,760
sign so let's run it

1064
00:41:37,760 --> 00:41:40,000
now

1065
00:41:42,960 --> 00:41:47,040
so stay d to here

1066
00:41:47,040 --> 00:41:52,240
or we are in this item

1067
00:41:54,079 --> 00:41:58,000
so let's try one you see

1068
00:41:58,000 --> 00:42:01,200
this is four part of this uh

1069
00:42:01,200 --> 00:42:04,560
smart contract by code

1070
00:42:04,560 --> 00:42:06,799
and

1071
00:42:11,680 --> 00:42:15,760
then we will show

1072
00:42:15,760 --> 00:42:18,560
this example

1073
00:42:19,280 --> 00:42:22,160
yeah you'll see

1074
00:42:23,119 --> 00:42:27,520
we can cover the backhoe to installment

1075
00:42:27,520 --> 00:42:31,760
in instructions then we will

1076
00:42:31,760 --> 00:42:35,359
analyze the function information in this

1077
00:42:35,359 --> 00:42:38,000
byte code

1078
00:42:40,880 --> 00:42:44,079
the input three so here you

1079
00:42:44,079 --> 00:42:47,200
you will see this is a function

1080
00:42:47,200 --> 00:42:50,560
sign and we detect

1081
00:42:50,560 --> 00:42:54,480
the name and argument of this function

1082
00:42:54,480 --> 00:42:58,160
and you can see we found two

1083
00:42:58,160 --> 00:43:02,000
probably uh function name here

1084
00:43:02,000 --> 00:43:05,200
so we must detect the

1085
00:43:05,200 --> 00:43:08,960
on deeply and we will find

1086
00:43:08,960 --> 00:43:12,319
finally we will this

1087
00:43:12,319 --> 00:43:16,720
function name is right

1088
00:43:16,880 --> 00:43:19,119
so

1089
00:43:21,599 --> 00:43:24,880
maybe time is out but

1090
00:43:24,880 --> 00:43:28,000
there is an example i want to show and

1091
00:43:28,000 --> 00:43:29,760
this is a very interesting

1092
00:43:29,760 --> 00:43:33,839
vulnerability so as you see um

1093
00:43:33,839 --> 00:43:37,680
the uh the the

1094
00:43:37,680 --> 00:43:41,680
attractor will

1095
00:43:41,680 --> 00:43:44,879
call this on and

1096
00:43:46,800 --> 00:43:50,720
it will into this virtual face

1097
00:43:50,720 --> 00:43:54,800
then it's wrong here uh and you see

1098
00:43:54,800 --> 00:43:58,160
you know if we uh if we

1099
00:43:58,160 --> 00:44:02,079
deport and deposit and

1100
00:44:02,079 --> 00:44:05,119
yeah and we'll draw it immediately it

1101
00:44:05,119 --> 00:44:06,480
will fail

1102
00:44:06,480 --> 00:44:09,040
the interview field it will go back and

1103
00:44:09,040 --> 00:44:10,720
revert one eth to

1104
00:44:10,720 --> 00:44:13,839
attacker and uh you know

1105
00:44:13,839 --> 00:44:16,880
it will jump to this function and then

1106
00:44:16,880 --> 00:44:17,520
it will

1107
00:44:17,520 --> 00:44:20,319
run with strong phase function again

1108
00:44:20,319 --> 00:44:22,960
this is a loop until

1109
00:44:22,960 --> 00:44:26,480
the balance of of this structure

1110
00:44:26,480 --> 00:44:30,000
construct contract is

1111
00:44:30,000 --> 00:44:33,760
less than one engage so finally

1112
00:44:33,760 --> 00:44:38,560
the attacker will get all eks in this

1113
00:44:38,560 --> 00:44:42,480
contactor contract

1114
00:44:42,480 --> 00:44:44,720
so

1115
00:44:46,000 --> 00:44:51,839
we we can run this process

1116
00:45:02,960 --> 00:45:08,720
and the real interesting

1117
00:45:09,359 --> 00:45:13,280
okay you'll see uh at first the

1118
00:45:13,280 --> 00:45:16,319
way uh the victim and the actor

1119
00:45:16,319 --> 00:45:20,079
uh attacker both have 100

1120
00:45:20,079 --> 00:45:24,160
each and we deploy the

1121
00:45:24,160 --> 00:45:27,839
uh defy contract which is a

1122
00:45:27,839 --> 00:45:32,319
victim contract and uh and the

1123
00:45:32,319 --> 00:45:33,119
difference

1124
00:45:33,119 --> 00:45:36,240
he proceeds from 20

1125
00:45:36,240 --> 00:45:39,440
each to this contract and we

1126
00:45:39,440 --> 00:45:42,480
deploy um attack

1127
00:45:42,480 --> 00:45:46,640
attack contracts then we

1128
00:45:46,640 --> 00:45:50,160
start we start contract finally

1129
00:45:50,160 --> 00:45:53,440
we will steal all the

1130
00:45:53,440 --> 00:45:58,880
each in in the between contract

1131
00:45:59,119 --> 00:46:03,119
and we make a dynamic

1132
00:46:03,119 --> 00:46:06,240
dynamic debugger

1133
00:46:06,240 --> 00:46:10,319
just open the qr debugger

1134
00:46:10,319 --> 00:46:15,839
and run we will try

1135
00:46:17,760 --> 00:46:21,280
okay now we can use debugger like

1136
00:46:21,280 --> 00:46:24,480
we can step in

1137
00:46:25,359 --> 00:46:29,839
and we can disassembly

1138
00:46:30,800 --> 00:46:35,200
and lines then we can make a

1139
00:46:35,200 --> 00:46:38,480
breakpoint at

1140
00:46:38,480 --> 00:46:41,200
16.

1141
00:46:41,599 --> 00:46:46,319
then that's wrong we also can

1142
00:46:46,319 --> 00:46:49,440
uncheck the memory of the

1143
00:46:49,440 --> 00:46:55,359
of this of this with the virtual machine

1144
00:46:55,520 --> 00:46:59,200
then finally we can run

1145
00:46:59,200 --> 00:47:02,560
you see we will it will run in a huge

1146
00:47:02,560 --> 00:47:03,440
loop

1147
00:47:03,440 --> 00:47:06,800
and finally it will you know

1148
00:47:06,800 --> 00:47:10,000
it will recur and we got

1149
00:47:10,000 --> 00:47:14,160
the guys so uh

1150
00:47:14,160 --> 00:47:17,960
with the debugger and with the

1151
00:47:17,960 --> 00:47:20,559
instrumentation and the green point you

1152
00:47:20,559 --> 00:47:21,599
can do

1153
00:47:21,599 --> 00:47:25,280
you can do a condition

1154
00:47:25,280 --> 00:47:28,319
condition breakpoint

1155
00:47:28,319 --> 00:47:31,520
this is another store okay so

1156
00:47:31,520 --> 00:47:34,400
that's all i want to show you today now

1157
00:47:34,400 --> 00:47:36,800
today

1158
00:47:36,839 --> 00:47:38,960
okay so i'm

1159
00:47:38,960 --> 00:47:42,310
i'm finished uh

1160
00:47:42,310 --> 00:47:44,880
[Music]

1161
00:47:44,880 --> 00:47:48,559
your screen sir that's great all right

1162
00:47:50,839 --> 00:47:53,200
okay

1163
00:47:53,200 --> 00:47:56,400
so okay well uh a few more slides before

1164
00:47:56,400 --> 00:47:57,920
we end all right hopefully we're not

1165
00:47:57,920 --> 00:48:00,160
taking too much time and uh

1166
00:48:00,160 --> 00:48:03,520
that was the evm uh demo okay

1167
00:48:03,520 --> 00:48:05,760
and uh like what we say in the slides

1168
00:48:05,760 --> 00:48:07,760
i'm never tell you everything so we

1169
00:48:07,760 --> 00:48:08,800
still have more things

1170
00:48:08,800 --> 00:48:11,599
that will be uh still watching release

1171
00:48:11,599 --> 00:48:12,079
uh

1172
00:48:12,079 --> 00:48:15,119
so stay tuned for the code update so a

1173
00:48:15,119 --> 00:48:16,240
few more things okay

1174
00:48:16,240 --> 00:48:18,400
uh hopefully we'll be able to release a

1175
00:48:18,400 --> 00:48:19,440
unicorn tool

1176
00:48:19,440 --> 00:48:23,280
by uh this year hopefully

1177
00:48:23,280 --> 00:48:25,200
we're gonna have a unicorn version too

1178
00:48:25,200 --> 00:48:26,800
that uh gonna support more

1179
00:48:26,800 --> 00:48:29,839
cpu instructions and more cpu type okay

1180
00:48:29,839 --> 00:48:33,040
uh we are also gonna do uh forward to

1181
00:48:33,040 --> 00:48:33,520
host

1182
00:48:33,520 --> 00:48:35,599
implementation hopefully this will solve

1183
00:48:35,599 --> 00:48:36,559
our

1184
00:48:36,559 --> 00:48:39,359
cisco missing issue uh and then uh of

1185
00:48:39,359 --> 00:48:40,640
course we're gonna support our more

1186
00:48:40,640 --> 00:48:41,359
iphone

1187
00:48:41,359 --> 00:48:44,800
mic os m1 emulation all right and then

1188
00:48:44,800 --> 00:48:48,000
yes the eta for smart contracts uh

1189
00:48:48,000 --> 00:48:50,720
first evn and soon wsm and you guys are

1190
00:48:50,720 --> 00:48:52,640
really seeing they are

1191
00:48:52,640 --> 00:48:55,040
uh you releasing the uh the demo just

1192
00:48:55,040 --> 00:48:56,079
now so uh

1193
00:48:56,079 --> 00:49:00,000
and uh once uh uh social finished the uh

1194
00:49:00,000 --> 00:49:02,240
the r2 integration we also be releasing

1195
00:49:02,240 --> 00:49:03,920
so this year it's going to be another

1196
00:49:03,920 --> 00:49:06,079
fantastic year for us to to

1197
00:49:06,079 --> 00:49:08,160
to to do different kind of uh you know

1198
00:49:08,160 --> 00:49:09,119
activities and

1199
00:49:09,119 --> 00:49:12,000
code release and all the uh exciting

1200
00:49:12,000 --> 00:49:13,200
features that we're going to

1201
00:49:13,200 --> 00:49:15,599
throw into the community so always join

1202
00:49:15,599 --> 00:49:16,400
us

1203
00:49:16,400 --> 00:49:18,720
uh make pull requests uh send send us

1204
00:49:18,720 --> 00:49:20,480
more code so we uh we will have more

1205
00:49:20,480 --> 00:49:21,359
people to work

1206
00:49:21,359 --> 00:49:24,640
together on the uh yeah project okay

1207
00:49:24,640 --> 00:49:26,960
so uh these are the uh information about

1208
00:49:26,960 --> 00:49:27,839
our cheating

1209
00:49:27,839 --> 00:49:30,640
framework our website our github our

1210
00:49:30,640 --> 00:49:31,359
documents

1211
00:49:31,359 --> 00:49:35,200
you know if the documents ever work

1212
00:49:35,200 --> 00:49:37,760
uh join our telegram group okay we are

1213
00:49:37,760 --> 00:49:38,880
always there and then

1214
00:49:38,880 --> 00:49:41,040
we are always there to help all right

1215
00:49:41,040 --> 00:49:43,119
and also follow our twitter

1216
00:49:43,119 --> 00:49:45,680
uh please start our project that is part

1217
00:49:45,680 --> 00:49:48,079
of our kpi before we lose our job and we

1218
00:49:48,079 --> 00:49:50,319
cannot maintain the project anymore so

1219
00:49:50,319 --> 00:49:52,240
that's it ladies and gentlemen thank you

1220
00:49:52,240 --> 00:49:59,440
very much thank you for your time

1221
00:49:59,440 --> 00:50:01,520
you

