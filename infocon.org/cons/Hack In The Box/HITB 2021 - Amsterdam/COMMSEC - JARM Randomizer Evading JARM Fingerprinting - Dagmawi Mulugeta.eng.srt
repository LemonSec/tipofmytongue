1
00:00:15,920 --> 00:00:16,320
hi

2
00:00:16,320 --> 00:00:18,400
and welcome to hack in the box 2021

3
00:00:18,400 --> 00:00:20,480
amsterdam i hope you're doing well

4
00:00:20,480 --> 00:00:22,160
and you're excited to be learning about

5
00:00:22,160 --> 00:00:24,240
tls ssl fingerprinting and

6
00:00:24,240 --> 00:00:26,160
overcoming it today we'll be talking

7
00:00:26,160 --> 00:00:27,920
about jr randomizer which does

8
00:00:27,920 --> 00:00:31,119
exactly that so let me start by

9
00:00:31,119 --> 00:00:32,159
introducing myself

10
00:00:32,159 --> 00:00:34,559
my name is dagumawi mujigera i am

11
00:00:34,559 --> 00:00:36,800
currently a threat research engineer at

12
00:00:36,800 --> 00:00:37,760
netscope

13
00:00:37,760 --> 00:00:40,079
previously i've held positions as a

14
00:00:40,079 --> 00:00:40,800
researcher

15
00:00:40,800 --> 00:00:43,040
a software engineer and developer at

16
00:00:43,040 --> 00:00:44,559
multiple companies

17
00:00:44,559 --> 00:00:47,440
i have my masters in cyber security from

18
00:00:47,440 --> 00:00:49,120
drexel university

19
00:00:49,120 --> 00:00:52,399
and my interests span capture the flags

20
00:00:52,399 --> 00:00:54,640
exploit development and abuse and

21
00:00:54,640 --> 00:00:56,719
general research of cloud applications

22
00:00:56,719 --> 00:00:59,520
as well

23
00:00:59,520 --> 00:01:02,160
cool so let's talk about what the rest

24
00:01:02,160 --> 00:01:04,000
of this talk is going to be

25
00:01:04,000 --> 00:01:06,159
we will start by or the goal of this

26
00:01:06,159 --> 00:01:07,119
presentation

27
00:01:07,119 --> 00:01:09,280
is to talk about ssl tls fingerprinting

28
00:01:09,280 --> 00:01:10,640
and take a look under the hood

29
00:01:10,640 --> 00:01:13,840
of j3 and jr and then we'll talk about

30
00:01:13,840 --> 00:01:14,560
how

31
00:01:14,560 --> 00:01:17,600
jr fingerprinting particularly isn't

32
00:01:17,600 --> 00:01:20,560
bulletproof as a loan tool and then we

33
00:01:20,560 --> 00:01:22,080
will segue into how

34
00:01:22,080 --> 00:01:24,159
minor side server side changes or

35
00:01:24,159 --> 00:01:26,400
configuration tweaks result in

36
00:01:26,400 --> 00:01:29,119
different jr fingerprints and finally we

37
00:01:29,119 --> 00:01:31,280
will package all this up and present

38
00:01:31,280 --> 00:01:33,439
or provide a tool to switch between

39
00:01:33,439 --> 00:01:35,680
these configurations to return

40
00:01:35,680 --> 00:01:39,200
a different and desired jrm signature

41
00:01:39,200 --> 00:01:42,640
cool so let's start by talking about

42
00:01:42,640 --> 00:01:43,119
what

43
00:01:43,119 --> 00:01:46,880
are what j3 and jrm are

44
00:01:46,880 --> 00:01:49,360
to do this we need to take a step back

45
00:01:49,360 --> 00:01:52,720
and talk about the tls or ssl handshake

46
00:01:52,720 --> 00:01:55,520
so tls and its predecessor ssl are

47
00:01:55,520 --> 00:01:58,000
generally used to encrypt communication

48
00:01:58,000 --> 00:01:58,640
between

49
00:01:58,640 --> 00:02:00,960
applications like internet browsers and

50
00:02:00,960 --> 00:02:02,320
target servers

51
00:02:02,320 --> 00:02:04,320
right so typically when you type in your

52
00:02:04,320 --> 00:02:06,840
username or your password to log into

53
00:02:06,840 --> 00:02:10,000
facebook.com right this

54
00:02:10,000 --> 00:02:13,120
data is passed back and forth uh in an

55
00:02:13,120 --> 00:02:14,720
encrypted fashion so someone in the

56
00:02:14,720 --> 00:02:16,080
middle can't read

57
00:02:16,080 --> 00:02:18,239
that that data and this encryption is

58
00:02:18,239 --> 00:02:20,879
set up in what's called a tls handshake

59
00:02:20,879 --> 00:02:22,959
so you have a diagram on the side of

60
00:02:22,959 --> 00:02:24,800
what a typical handshake looks like

61
00:02:24,800 --> 00:02:27,360
the client or the browser initiates it

62
00:02:27,360 --> 00:02:28,480
by sending a

63
00:02:28,480 --> 00:02:32,080
client hello that contains

64
00:02:32,080 --> 00:02:34,319
crypto cryptographic algorithms that are

65
00:02:34,319 --> 00:02:35,360
supported

66
00:02:35,360 --> 00:02:38,080
by the client uh these are referred to

67
00:02:38,080 --> 00:02:39,120
as deciphers

68
00:02:39,120 --> 00:02:41,120
uh some versioning details about what

69
00:02:41,120 --> 00:02:42,640
the tls handshake

70
00:02:42,640 --> 00:02:44,879
should look like uh the supported

71
00:02:44,879 --> 00:02:46,640
extensions the list of compression

72
00:02:46,640 --> 00:02:47,680
methods and other

73
00:02:47,680 --> 00:02:50,160
you know session related parameters as

74
00:02:50,160 --> 00:02:51,280
well

75
00:02:51,280 --> 00:02:53,920
in response the server sends back its

76
00:02:53,920 --> 00:02:54,400
own

77
00:02:54,400 --> 00:02:57,440
server hello message when a satisfactory

78
00:02:57,440 --> 00:02:59,280
set of algorithms have been selected and

79
00:02:59,280 --> 00:03:02,159
they've been confirmed

80
00:03:02,480 --> 00:03:05,040
subsequently after doing all this um the

81
00:03:05,040 --> 00:03:06,959
server and client will proceed

82
00:03:06,959 --> 00:03:09,680
to verify each other's authenticity via

83
00:03:09,680 --> 00:03:11,280
digital certificates

84
00:03:11,280 --> 00:03:14,879
and derive session keys uh to

85
00:03:14,879 --> 00:03:16,879
tunnel the remaining traffic in an

86
00:03:16,879 --> 00:03:18,239
encrypted fashion

87
00:03:18,239 --> 00:03:20,800
now one thing to note these packets are

88
00:03:20,800 --> 00:03:21,920
heavily reliant

89
00:03:21,920 --> 00:03:23,840
on the packages and methods and

90
00:03:23,840 --> 00:03:25,440
operating systems that are used to

91
00:03:25,440 --> 00:03:26,239
derive it

92
00:03:26,239 --> 00:03:29,519
so when building these applications uh

93
00:03:29,519 --> 00:03:31,920
the selected packages in the libraries

94
00:03:31,920 --> 00:03:33,680
and what platform we choose to run our

95
00:03:33,680 --> 00:03:34,319
application

96
00:03:34,319 --> 00:03:37,599
on severely influence these um

97
00:03:37,599 --> 00:03:40,319
these parameters in these packets cool

98
00:03:40,319 --> 00:03:42,400
so let's talk about what j3 does

99
00:03:42,400 --> 00:03:44,080
now that we know what the tls handshake

100
00:03:44,080 --> 00:03:47,200
looks like so ja3 was a tool that was

101
00:03:47,200 --> 00:03:48,799
introduced by salesforce

102
00:03:48,799 --> 00:03:52,159
in 2017 uh and the goal is really to

103
00:03:52,159 --> 00:03:53,040
fingerprint

104
00:03:53,040 --> 00:03:56,159
these tls client hello packages right so

105
00:03:56,159 --> 00:03:57,920
that first initial bit

106
00:03:57,920 --> 00:03:59,920
of that tls handshake where the client

107
00:03:59,920 --> 00:04:01,599
sends this client hello message we want

108
00:04:01,599 --> 00:04:02,959
to fingerprint those

109
00:04:02,959 --> 00:04:06,560
and we will look at specific field

110
00:04:06,560 --> 00:04:08,560
in that tls client hello bucket and

111
00:04:08,560 --> 00:04:09,599
these fields are

112
00:04:09,599 --> 00:04:12,720
the tls version the supported ciphers

113
00:04:12,720 --> 00:04:14,319
the extensions

114
00:04:14,319 --> 00:04:16,000
right that lift the curves or the

115
00:04:16,000 --> 00:04:18,399
supported groups in the elliptic curve

116
00:04:18,399 --> 00:04:21,040
point format so these five fields are

117
00:04:21,040 --> 00:04:21,759
what we

118
00:04:21,759 --> 00:04:24,240
grab out of these tls kind hello packet

119
00:04:24,240 --> 00:04:25,280
and then we will

120
00:04:25,280 --> 00:04:27,600
aggregate them together and hash to

121
00:04:27,600 --> 00:04:29,199
produce that final

122
00:04:29,199 --> 00:04:31,280
fingerprint and the reason we did this

123
00:04:31,280 --> 00:04:32,560
is it's quite

124
00:04:32,560 --> 00:04:35,199
useful to identify and usual clients

125
00:04:35,199 --> 00:04:36,479
within a network

126
00:04:36,479 --> 00:04:39,040
so by taking these fingerprints we can

127
00:04:39,040 --> 00:04:40,080
actually group

128
00:04:40,080 --> 00:04:42,000
client applications like google chrome

129
00:04:42,000 --> 00:04:43,360
browsers and internet

130
00:04:43,360 --> 00:04:45,680
uh internet explorer browsers and your

131
00:04:45,680 --> 00:04:47,840
uh you know your system

132
00:04:47,840 --> 00:04:50,880
like clients like uh slack and all these

133
00:04:50,880 --> 00:04:52,479
things can be grouped together within

134
00:04:52,479 --> 00:04:53,199
the network

135
00:04:53,199 --> 00:04:55,680
by just fingerprinting this portion of

136
00:04:55,680 --> 00:04:58,320
that tls handshake

137
00:04:58,320 --> 00:04:59,840
so now that we've talked a little bit

138
00:04:59,840 --> 00:05:01,919
what about what ja3 does let's talk a

139
00:05:01,919 --> 00:05:03,680
little bit about what jr does

140
00:05:03,680 --> 00:05:07,120
so jr as opposed to j3 is a server-side

141
00:05:07,120 --> 00:05:08,639
fingerprinting technique

142
00:05:08,639 --> 00:05:11,759
meaning that j3 was used to

143
00:05:11,759 --> 00:05:14,240
passively fingerprint client-side

144
00:05:14,240 --> 00:05:15,680
applications by looking

145
00:05:15,680 --> 00:05:18,800
at specific fields in their tls client

146
00:05:18,800 --> 00:05:20,000
hello packet

147
00:05:20,000 --> 00:05:23,199
jr is an active fingerprinting tool

148
00:05:23,199 --> 00:05:26,479
that reaches out to servers and grabs

149
00:05:26,479 --> 00:05:28,240
their server responses meaning they'll

150
00:05:28,240 --> 00:05:30,160
grab their server hellos

151
00:05:30,160 --> 00:05:32,880
uh and fingerprint uh or grab certain

152
00:05:32,880 --> 00:05:34,400
fields from those server hills and

153
00:05:34,400 --> 00:05:36,400
fingerprint those fields to grab

154
00:05:36,400 --> 00:05:39,520
to identify that the hash or the

155
00:05:39,520 --> 00:05:41,759
fingerprint for a specific server

156
00:05:41,759 --> 00:05:44,000
so it's used to fingerprint server holes

157
00:05:44,000 --> 00:05:45,360
in the ssl handshake

158
00:05:45,360 --> 00:05:47,759
so as opposed to the five fields in the

159
00:05:47,759 --> 00:05:50,479
tls client hello packet or in j3

160
00:05:50,479 --> 00:05:52,720
in the server side hello packet jr just

161
00:05:52,720 --> 00:05:54,720
looks at three fields the tls version

162
00:05:54,720 --> 00:05:56,000
that gets sent back

163
00:05:56,000 --> 00:05:58,240
the cipher that was chosen by the server

164
00:05:58,240 --> 00:05:59,440
to

165
00:05:59,440 --> 00:06:01,440
continue the rest of the the handshake

166
00:06:01,440 --> 00:06:02,880
and the tls

167
00:06:02,880 --> 00:06:06,000
extensions that are supported as part

168
00:06:06,000 --> 00:06:09,680
of that server hello response

169
00:06:09,680 --> 00:06:12,240
so let's talk a little bit about how jr

170
00:06:12,240 --> 00:06:12,960
works

171
00:06:12,960 --> 00:06:16,960
so jr works by actively sending 10

172
00:06:16,960 --> 00:06:20,240
customized tls client hello packets to a

173
00:06:20,240 --> 00:06:21,440
target server

174
00:06:21,440 --> 00:06:23,680
and then capturing that server's

175
00:06:23,680 --> 00:06:24,720
responses

176
00:06:24,720 --> 00:06:26,960
and these client hello packets are

177
00:06:26,960 --> 00:06:29,199
specifically designed and engineered to

178
00:06:29,199 --> 00:06:30,080
draw out the

179
00:06:30,080 --> 00:06:32,400
most unique responses from a target

180
00:06:32,400 --> 00:06:33,120
server

181
00:06:33,120 --> 00:06:35,280
so asking it questions like does this

182
00:06:35,280 --> 00:06:37,360
server support tls 1.3

183
00:06:37,360 --> 00:06:39,440
or if we order the cipher as a specific

184
00:06:39,440 --> 00:06:40,639
type of way

185
00:06:40,639 --> 00:06:42,400
what which cipher would it pick what if

186
00:06:42,400 --> 00:06:43,919
we shuffled them around and maybe we

187
00:06:43,919 --> 00:06:44,800
would drop some

188
00:06:44,800 --> 00:06:46,639
sort which cycle would pick then so

189
00:06:46,639 --> 00:06:48,560
asking questions like this

190
00:06:48,560 --> 00:06:50,800
grabbing those responses and then

191
00:06:50,800 --> 00:06:52,639
aggregating them together

192
00:06:52,639 --> 00:06:55,360
to give that jr fingerprint is the

193
00:06:55,360 --> 00:06:56,720
process it follows

194
00:06:56,720 --> 00:06:59,120
and we can see the configuration

195
00:06:59,120 --> 00:06:59,840
selected

196
00:06:59,840 --> 00:07:03,039
for these 10 tls client hello packets

197
00:07:03,039 --> 00:07:06,000
in the pi drum implementation uh on the

198
00:07:06,000 --> 00:07:06,479
slide

199
00:07:06,479 --> 00:07:08,880
so pi drum is the python implementation

200
00:07:08,880 --> 00:07:09,520
of jr

201
00:07:09,520 --> 00:07:11,759
those open sourced by palo alto networks

202
00:07:11,759 --> 00:07:12,960
and we can see

203
00:07:12,960 --> 00:07:14,479
the kind of the nature of these

204
00:07:14,479 --> 00:07:16,000
configurations for each of these

205
00:07:16,000 --> 00:07:19,919
client hello packets that get sent out

206
00:07:22,479 --> 00:07:24,880
and after grabbing all these responses

207
00:07:24,880 --> 00:07:26,240
it aggregates it together

208
00:07:26,240 --> 00:07:29,120
to our jr magazine together together to

209
00:07:29,120 --> 00:07:30,560
give a fingerprint

210
00:07:30,560 --> 00:07:33,039
so what exactly is this fingerprint this

211
00:07:33,039 --> 00:07:34,479
fingerprint is actually a

212
00:07:34,479 --> 00:07:37,199
fuzzy hash fingerprint that is made up

213
00:07:37,199 --> 00:07:37,520
of

214
00:07:37,520 --> 00:07:40,960
two consecutive 30 character and 32

215
00:07:40,960 --> 00:07:42,319
character blocks

216
00:07:42,319 --> 00:07:45,280
the first 30 character block is actually

217
00:07:45,280 --> 00:07:46,080
the tls

218
00:07:46,080 --> 00:07:48,720
version and the cipher for each of the

219
00:07:48,720 --> 00:07:49,759
server herbals

220
00:07:49,759 --> 00:07:53,199
that got sent back so each of these uh

221
00:07:53,199 --> 00:07:55,919
three characters represents that one

222
00:07:55,919 --> 00:07:58,400
response for that uh specific

223
00:07:58,400 --> 00:08:01,840
hello packet and the second block is

224
00:08:01,840 --> 00:08:05,440
the sha 256 hash uh of the

225
00:08:05,440 --> 00:08:08,240
tls extension so this is a truncated

226
00:08:08,240 --> 00:08:09,759
version it's not the complete version

227
00:08:09,759 --> 00:08:10,319
but

228
00:08:10,319 --> 00:08:12,240
that that makes up that second block and

229
00:08:12,240 --> 00:08:14,319
then when you concatenate these together

230
00:08:14,319 --> 00:08:17,280
together you have that 162 character

231
00:08:17,280 --> 00:08:18,720
block that is the jr

232
00:08:18,720 --> 00:08:22,400
fingerprint and you can see the figure

233
00:08:22,400 --> 00:08:25,599
in the slide for where that line is

234
00:08:25,599 --> 00:08:27,039
drawn for a few different

235
00:08:27,039 --> 00:08:29,360
domains that were jr but they were

236
00:08:29,360 --> 00:08:31,680
fingerprinted using jr

237
00:08:31,680 --> 00:08:34,958
so what jr is used for and now that we

238
00:08:34,958 --> 00:08:35,839
see in that

239
00:08:35,839 --> 00:08:38,399
picture right it's useful for two things

240
00:08:38,399 --> 00:08:39,039
the first

241
00:08:39,039 --> 00:08:41,679
is we can group servers together by

242
00:08:41,679 --> 00:08:42,880
configuration

243
00:08:42,880 --> 00:08:45,360
so as you can see by as you can see in

244
00:08:45,360 --> 00:08:46,800
the slide for google

245
00:08:46,800 --> 00:08:49,120
youtube and blogger that jr fingerprint

246
00:08:49,120 --> 00:08:51,360
is actually the same and this is because

247
00:08:51,360 --> 00:08:53,440
the the infrastructure for these are the

248
00:08:53,440 --> 00:08:55,040
underlying operating system and

249
00:08:55,040 --> 00:08:56,560
application that were

250
00:08:56,560 --> 00:08:58,560
these servers run on top of are actually

251
00:08:58,560 --> 00:09:00,720
similar so you can group these servers

252
00:09:00,720 --> 00:09:01,200
together

253
00:09:01,200 --> 00:09:03,279
you can say these group of servers

254
00:09:03,279 --> 00:09:05,040
belong to google and these belong to

255
00:09:05,040 --> 00:09:05,600
netscope

256
00:09:05,600 --> 00:09:09,440
these belong to apple etc and the second

257
00:09:09,440 --> 00:09:11,920
is we can identify malware command and

258
00:09:11,920 --> 00:09:13,600
control infrastructure

259
00:09:13,600 --> 00:09:16,480
in popular uh attack frameworks like

260
00:09:16,480 --> 00:09:18,000
cobalt strike and similar c2

261
00:09:18,000 --> 00:09:18,880
infrastructure that's

262
00:09:18,880 --> 00:09:22,320
normally very difficult to detect

263
00:09:22,320 --> 00:09:24,240
and defend against you can easily

264
00:09:24,240 --> 00:09:26,000
identify using a fingerprinting

265
00:09:26,000 --> 00:09:26,800
technique

266
00:09:26,800 --> 00:09:29,839
uh like this like jr and the rest of

267
00:09:29,839 --> 00:09:31,279
these presentation

268
00:09:31,279 --> 00:09:34,320
uh will be focused on on jr we'll

269
00:09:34,320 --> 00:09:36,959
we'll touch base with ja3 a little bit

270
00:09:36,959 --> 00:09:39,040
later on but most of

271
00:09:39,040 --> 00:09:40,959
the work we're doing here and the

272
00:09:40,959 --> 00:09:43,680
research is

273
00:09:43,680 --> 00:09:46,479
is around here

274
00:09:48,640 --> 00:09:51,120
so what are some challenges with using

275
00:09:51,120 --> 00:09:52,480
jr what are some

276
00:09:52,480 --> 00:09:54,880
weaknesses of this implementation that

277
00:09:54,880 --> 00:09:57,200
uh you need to keep an eye out for when

278
00:09:57,200 --> 00:09:59,760
you run a jr scanner jr fingerprint in

279
00:09:59,760 --> 00:10:02,560
your defenses

280
00:10:02,800 --> 00:10:04,800
as we mentioned earlier on in the

281
00:10:04,800 --> 00:10:05,920
presentation

282
00:10:05,920 --> 00:10:08,399
jrm and ga3 and taylor's fingerprinting

283
00:10:08,399 --> 00:10:09,680
is very much

284
00:10:09,680 --> 00:10:11,839
tied to the operating system the

285
00:10:11,839 --> 00:10:14,120
packages and libraries and other custom

286
00:10:14,120 --> 00:10:15,519
configurations

287
00:10:15,519 --> 00:10:17,920
of the server side application for

288
00:10:17,920 --> 00:10:19,040
example

289
00:10:19,040 --> 00:10:22,240
cobalt strike jr is actually

290
00:10:22,240 --> 00:10:26,240
the gr for java 11 tls stack so

291
00:10:26,240 --> 00:10:27,519
when we're on the internet and we're

292
00:10:27,519 --> 00:10:29,120
trying to identify cobalt c2

293
00:10:29,120 --> 00:10:30,000
infrastructure

294
00:10:30,000 --> 00:10:32,640
and we identify the cobalt strike c2 jr

295
00:10:32,640 --> 00:10:34,480
we're actually identifying

296
00:10:34,480 --> 00:10:37,519
that java application that's running

297
00:10:37,519 --> 00:10:40,959
on uh on that specific package or using

298
00:10:40,959 --> 00:10:43,200
that specific package

299
00:10:43,200 --> 00:10:46,560
so when would this cause uh

300
00:10:46,560 --> 00:10:48,720
issues firstly when you're using it by

301
00:10:48,720 --> 00:10:49,680
itself

302
00:10:49,680 --> 00:10:51,839
it can cause a few detection issues

303
00:10:51,839 --> 00:10:54,079
firstly there can be a higher rate of

304
00:10:54,079 --> 00:10:56,000
false positives as we've shown in the

305
00:10:56,000 --> 00:10:58,000
example above it can be

306
00:10:58,000 --> 00:11:01,200
quite difficult to identify exactly

307
00:11:01,200 --> 00:11:03,680
what we're looking at as opposed to the

308
00:11:03,680 --> 00:11:04,399
framework

309
00:11:04,399 --> 00:11:06,399
infrastructure or framework and

310
00:11:06,399 --> 00:11:08,240
operating system that it's running on

311
00:11:08,240 --> 00:11:10,240
and this is especially enhanced when

312
00:11:10,240 --> 00:11:11,680
we're

313
00:11:11,680 --> 00:11:13,680
looking at common libraries or tools

314
00:11:13,680 --> 00:11:15,279
that use common libraries and operating

315
00:11:15,279 --> 00:11:17,440
system sockets for communication because

316
00:11:17,440 --> 00:11:19,760
you're pushing that further down which

317
00:11:19,760 --> 00:11:22,320
makes it a little bit hazy to identify

318
00:11:22,320 --> 00:11:25,040
secondly we can see that switching some

319
00:11:25,040 --> 00:11:26,480
configurations around

320
00:11:26,480 --> 00:11:28,160
or maybe using a proxy or a blue

321
00:11:28,160 --> 00:11:30,880
balancer which results in a completely

322
00:11:30,880 --> 00:11:33,040
completely different fingerprint which

323
00:11:33,040 --> 00:11:33,920
makes this

324
00:11:33,920 --> 00:11:37,200
uh even more unreliable when it's using

325
00:11:37,200 --> 00:11:38,320
it by itself

326
00:11:38,320 --> 00:11:40,880
although jr plus other intelligence has

327
00:11:40,880 --> 00:11:42,000
been proven to be

328
00:11:42,000 --> 00:11:45,760
quite useful it is as part of a grouped

329
00:11:45,760 --> 00:11:49,760
uh detection scheme as part of a group

330
00:11:49,760 --> 00:11:53,600
approach so while it's not

331
00:11:53,600 --> 00:11:57,680
completely trivial to uh get a new jr

332
00:11:57,680 --> 00:11:59,440
fingerprint you know as opposed to

333
00:11:59,440 --> 00:12:01,600
mechanisms like the user agent string

334
00:12:01,600 --> 00:12:03,440
which is just a header and the request

335
00:12:03,440 --> 00:12:05,120
you can change

336
00:12:05,120 --> 00:12:07,519
jr by itself is actually not bulletproof

337
00:12:07,519 --> 00:12:11,839
as well

338
00:12:12,639 --> 00:12:14,880
so now that we've talked a little bit

339
00:12:14,880 --> 00:12:15,760
about

340
00:12:15,760 --> 00:12:18,399
what grm is what uh the weaknesses and

341
00:12:18,399 --> 00:12:21,440
challenges are and how it works

342
00:12:21,440 --> 00:12:23,760
let's talk a little bit about how the

343
00:12:23,760 --> 00:12:25,839
server-side changes or the server-side

344
00:12:25,839 --> 00:12:26,480
tweaks

345
00:12:26,480 --> 00:12:28,959
uh specifically a tls version and the

346
00:12:28,959 --> 00:12:30,160
cypher supported

347
00:12:30,160 --> 00:12:33,360
by the server would affect

348
00:12:33,360 --> 00:12:37,200
the overall gr fingerprint

349
00:12:37,200 --> 00:12:40,480
so this was a test that was run on a mac

350
00:12:40,480 --> 00:12:43,839
os system using pi jr for

351
00:12:43,839 --> 00:12:47,120
fingerprinting pi jr is the library the

352
00:12:47,120 --> 00:12:49,839
library implementation of jr that was

353
00:12:49,839 --> 00:12:52,160
introduced by palo alto networks

354
00:12:52,160 --> 00:12:55,120
and what we did was we used the ssl

355
00:12:55,120 --> 00:12:57,920
library in python to cycle through

356
00:12:57,920 --> 00:13:01,040
the supported tls versions and ciphers

357
00:13:01,040 --> 00:13:04,160
and we spun up a server and we

358
00:13:04,160 --> 00:13:05,200
fingerprinted that

359
00:13:05,200 --> 00:13:08,320
using jr or pi jr and we tried to see

360
00:13:08,320 --> 00:13:10,320
what the resulting g arms were

361
00:13:10,320 --> 00:13:13,120
and as you can see from our findings

362
00:13:13,120 --> 00:13:14,720
changing the tls version and the

363
00:13:14,720 --> 00:13:16,399
supported cipher

364
00:13:16,399 --> 00:13:18,399
server side actually changes the jr

365
00:13:18,399 --> 00:13:21,440
fingerprint a decent amount

366
00:13:21,440 --> 00:13:24,079
so how can we use this to evade jr now

367
00:13:24,079 --> 00:13:25,519
that we know that changes

368
00:13:25,519 --> 00:13:27,920
in server side configs can actually

369
00:13:27,920 --> 00:13:28,639
result

370
00:13:28,639 --> 00:13:30,880
in a completely new fingerprint how can

371
00:13:30,880 --> 00:13:32,560
we use this knowledge

372
00:13:32,560 --> 00:13:34,880
as a red team operator or penetration

373
00:13:34,880 --> 00:13:35,600
tester

374
00:13:35,600 --> 00:13:39,199
to give ourselves the the

375
00:13:39,199 --> 00:13:41,199
upper hand when evading jr

376
00:13:41,199 --> 00:13:43,920
fingerprinting

377
00:13:44,639 --> 00:13:47,440
so before we get into evading grm

378
00:13:47,440 --> 00:13:48,320
fingerprinting

379
00:13:48,320 --> 00:13:50,160
let's talk a little bit about ga3

380
00:13:50,160 --> 00:13:52,800
transport j3 transport was

381
00:13:52,800 --> 00:13:57,040
presented in 2019 by the cu cyber team

382
00:13:57,040 --> 00:13:59,040
and it's a gold library that's

383
00:13:59,040 --> 00:14:01,199
specifically used to evade

384
00:14:01,199 --> 00:14:04,480
client side j3 fingerprinting so

385
00:14:04,480 --> 00:14:06,000
if you remember from our initial

386
00:14:06,000 --> 00:14:08,560
presentation of day three j3 is used

387
00:14:08,560 --> 00:14:11,760
to passively fingerprint client hello

388
00:14:11,760 --> 00:14:13,600
packages to identify

389
00:14:13,600 --> 00:14:15,440
what kind of application made that

390
00:14:15,440 --> 00:14:17,600
request so things like your browser

391
00:14:17,600 --> 00:14:21,680
versus you know slack client or

392
00:14:21,680 --> 00:14:23,360
or some malware that may be on your

393
00:14:23,360 --> 00:14:24,800
system right

394
00:14:24,800 --> 00:14:27,920
j3 can be a pretty useful tool to

395
00:14:27,920 --> 00:14:30,560
fingerprint and identify these client

396
00:14:30,560 --> 00:14:32,720
applications

397
00:14:32,720 --> 00:14:35,040
j3 transport is a library that you can

398
00:14:35,040 --> 00:14:37,600
incorporate in a goal

399
00:14:37,600 --> 00:14:39,920
executable or go binary to evade this

400
00:14:39,920 --> 00:14:42,320
kind of fingerprinting

401
00:14:42,320 --> 00:14:44,560
in this talk we'll present jade arm

402
00:14:44,560 --> 00:14:46,800
randomizer which is the server side

403
00:14:46,800 --> 00:14:48,160
you can really think of it as a

404
00:14:48,160 --> 00:14:50,880
server-side equivalent for ga3 transport

405
00:14:50,880 --> 00:14:53,279
and it achieves evasion by cycling

406
00:14:53,279 --> 00:14:55,440
through these supported configurations

407
00:14:55,440 --> 00:14:58,560
to give the desired jr fingerprint for

408
00:14:58,560 --> 00:15:00,320
red team operators and penetration

409
00:15:00,320 --> 00:15:02,480
testers so let's talk a little bit about

410
00:15:02,480 --> 00:15:03,920
jr randomizer itself

411
00:15:03,920 --> 00:15:06,480
at the heart of it it cycles through the

412
00:15:06,480 --> 00:15:09,040
supported configuration server side

413
00:15:09,040 --> 00:15:11,760
to enable a different fingerprint or a

414
00:15:11,760 --> 00:15:13,279
different desired fingerprint

415
00:15:13,279 --> 00:15:16,800
for the operator some dependencies are

416
00:15:16,800 --> 00:15:20,160
uh pip it's written in python 3.9 so you

417
00:15:20,160 --> 00:15:21,760
need to have that installed when you run

418
00:15:21,760 --> 00:15:22,399
this

419
00:15:22,399 --> 00:15:25,440
pi jrm showdown and pi binaries are also

420
00:15:25,440 --> 00:15:26,000
required

421
00:15:26,000 --> 00:15:28,240
for additional functionality so the

422
00:15:28,240 --> 00:15:30,000
current features for this tool

423
00:15:30,000 --> 00:15:32,079
are to iterate and identify valid

424
00:15:32,079 --> 00:15:33,839
configurations during setup

425
00:15:33,839 --> 00:15:35,920
so this is really this is really useful

426
00:15:35,920 --> 00:15:37,519
so you don't have to do that footwork

427
00:15:37,519 --> 00:15:38,639
yourself

428
00:15:38,639 --> 00:15:40,880
secondly it will check the generated or

429
00:15:40,880 --> 00:15:43,040
the valid j arms for your system

430
00:15:43,040 --> 00:15:45,279
on binary agent showdown to make sure to

431
00:15:45,279 --> 00:15:47,519
give you some more insight on the usage

432
00:15:47,519 --> 00:15:50,639
of the specific jr that you want

433
00:15:50,639 --> 00:15:52,399
thirdly you can cross check these

434
00:15:52,399 --> 00:15:53,839
specific jade arms

435
00:15:53,839 --> 00:15:56,639
against a known red team tool list to

436
00:15:56,639 --> 00:15:57,759
make sure that

437
00:15:57,759 --> 00:16:00,800
you're not using the ones that have been

438
00:16:00,800 --> 00:16:04,639
associated with public

439
00:16:04,639 --> 00:16:07,040
command and control tools and finally it

440
00:16:07,040 --> 00:16:09,199
gives you the ability to cycle through

441
00:16:09,199 --> 00:16:11,600
or rotate configurations at specific

442
00:16:11,600 --> 00:16:12,399
intervals

443
00:16:12,399 --> 00:16:14,320
so you make sure you have a different jr

444
00:16:14,320 --> 00:16:15,440
fingerprint

445
00:16:15,440 --> 00:16:19,519
at the desired time interval

446
00:16:20,639 --> 00:16:22,639
so where is the placement of a tool like

447
00:16:22,639 --> 00:16:23,920
this so really

448
00:16:23,920 --> 00:16:26,720
it is a python proxy that is meant to be

449
00:16:26,720 --> 00:16:27,600
placed

450
00:16:27,600 --> 00:16:29,199
in front of a command and controlled

451
00:16:29,199 --> 00:16:31,519
server so as you can see without the

452
00:16:31,519 --> 00:16:34,560
randomizer this would be what a typical

453
00:16:34,560 --> 00:16:35,920
deployment would look like in an

454
00:16:35,920 --> 00:16:39,440
engagement with the randomizer you put

455
00:16:39,440 --> 00:16:41,600
that this python proxy on the same

456
00:16:41,600 --> 00:16:43,199
system or a different system

457
00:16:43,199 --> 00:16:46,000
that's in line with that traffic right

458
00:16:46,000 --> 00:16:47,839
and you can use this alongside cobalt

459
00:16:47,839 --> 00:16:49,920
strike to evade fingerprinting of the

460
00:16:49,920 --> 00:16:51,519
cobalt strike tool itself

461
00:16:51,519 --> 00:16:53,600
you can use jr randomizer to cycle

462
00:16:53,600 --> 00:16:56,880
through these configurations

463
00:17:00,720 --> 00:17:02,800
so let's talk a little bit about the

464
00:17:02,800 --> 00:17:04,559
setup process and what this tool gives

465
00:17:04,559 --> 00:17:05,039
you

466
00:17:05,039 --> 00:17:07,199
when you do that setup the setup is

467
00:17:07,199 --> 00:17:09,199
actually required for this tool to run

468
00:17:09,199 --> 00:17:10,959
so it can identify the supported

469
00:17:10,959 --> 00:17:12,959
configurations on the system

470
00:17:12,959 --> 00:17:15,199
and it also helps you lay that kind of

471
00:17:15,199 --> 00:17:16,799
groundwork that's required to run the

472
00:17:16,799 --> 00:17:18,799
proxy successfully later on

473
00:17:18,799 --> 00:17:20,720
and what it does is the first thing is

474
00:17:20,720 --> 00:17:22,640
it grabs those list of ciphers that

475
00:17:22,640 --> 00:17:24,559
support it on the system

476
00:17:24,559 --> 00:17:26,720
right and then it finds all the possible

477
00:17:26,720 --> 00:17:27,760
j arms by

478
00:17:27,760 --> 00:17:29,600
rotating through the tls versions of the

479
00:17:29,600 --> 00:17:32,240
supported ciphers and it validates them

480
00:17:32,240 --> 00:17:34,000
and once it validates them it tells you

481
00:17:34,000 --> 00:17:35,280
how many g

482
00:17:35,280 --> 00:17:37,120
arms that it found that it can support

483
00:17:37,120 --> 00:17:39,440
on the server side and how many tls

484
00:17:39,440 --> 00:17:41,280
cipher pairs generated those g

485
00:17:41,280 --> 00:17:44,400
arms and if you've supplied a api key

486
00:17:44,400 --> 00:17:46,320
for binary edge or showdown it grabs

487
00:17:46,320 --> 00:17:48,400
those metrics for the j arms

488
00:17:48,400 --> 00:17:51,360
uh and the usage on the internet and

489
00:17:51,360 --> 00:17:51,840
it'll

490
00:17:51,840 --> 00:17:54,000
give you some statistics on that as well

491
00:17:54,000 --> 00:17:55,280
and once it's

492
00:17:55,280 --> 00:17:57,039
laid all this out it'll give you the

493
00:17:57,039 --> 00:17:58,400
community to run

494
00:17:58,400 --> 00:18:00,720
so you can have that proxy deployed and

495
00:18:00,720 --> 00:18:02,960
ready

496
00:18:04,240 --> 00:18:06,240
so let's talk a little bit about one

497
00:18:06,240 --> 00:18:08,480
test run on on a

498
00:18:08,480 --> 00:18:11,039
mac os system and let's analyze some of

499
00:18:11,039 --> 00:18:12,480
the the findings

500
00:18:12,480 --> 00:18:15,200
so on the on the mac os system we

501
00:18:15,200 --> 00:18:15,919
identify

502
00:18:15,919 --> 00:18:20,160
31 possible j arms across 48 tls cipher

503
00:18:20,160 --> 00:18:22,080
pairs

504
00:18:22,080 --> 00:18:25,280
and in in this table we can see

505
00:18:25,280 --> 00:18:28,799
the top five j arms

506
00:18:28,799 --> 00:18:32,320
when sorted by occurrence in shogun

507
00:18:32,320 --> 00:18:35,760
right and we've also co-referenced or

508
00:18:35,760 --> 00:18:36,720
correlated

509
00:18:36,720 --> 00:18:38,960
the gr fingerprint against the gnome

510
00:18:38,960 --> 00:18:41,600
list of red team

511
00:18:41,600 --> 00:18:45,039
a publicly available repo to grab that

512
00:18:45,039 --> 00:18:45,679
usage

513
00:18:45,679 --> 00:18:48,799
as well so the important things to note

514
00:18:48,799 --> 00:18:52,320
here are two tls and cipher pairs can

515
00:18:52,320 --> 00:18:54,480
regenerate the same jr as you can see

516
00:18:54,480 --> 00:18:57,360
for the fifth entry 18 tls cipher

517
00:18:57,360 --> 00:18:58,880
appearance this is actually generated

518
00:18:58,880 --> 00:19:00,960
the same

519
00:19:00,960 --> 00:19:04,480
jr fingerprint and while it might not be

520
00:19:04,480 --> 00:19:05,919
completely obvious

521
00:19:05,919 --> 00:19:07,919
here because this is showing the top

522
00:19:07,919 --> 00:19:09,280
five but if you

523
00:19:09,280 --> 00:19:11,200
if you saw that complete list there is a

524
00:19:11,200 --> 00:19:13,280
sway towards python product

525
00:19:13,280 --> 00:19:16,799
and lastly the you you can see that that

526
00:19:16,799 --> 00:19:17,760
second jr

527
00:19:17,760 --> 00:19:20,080
field actually matched five red team

528
00:19:20,080 --> 00:19:21,919
tools so as a red team

529
00:19:21,919 --> 00:19:23,520
operator you might want to keep that in

530
00:19:23,520 --> 00:19:26,720
mind and maybe avoid that specific entry

531
00:19:26,720 --> 00:19:29,440
um to maintain operating operational

532
00:19:29,440 --> 00:19:31,200
security

533
00:19:31,200 --> 00:19:33,280
and all these uh the binary edge

534
00:19:33,280 --> 00:19:34,559
showdown the

535
00:19:34,559 --> 00:19:37,760
red team tools are are all supported by

536
00:19:37,760 --> 00:19:40,559
the randomizer itself so these are

537
00:19:40,559 --> 00:19:42,160
statistics you can pull out if you

538
00:19:42,160 --> 00:19:43,039
wanted to

539
00:19:43,039 --> 00:19:45,200
to run this on your system and get some

540
00:19:45,200 --> 00:19:47,120
some stats back

541
00:19:47,120 --> 00:19:48,960
so let's talk a little bit about the two

542
00:19:48,960 --> 00:19:51,039
use cases that we feel

543
00:19:51,039 --> 00:19:53,440
the field really benefit from there is a

544
00:19:53,440 --> 00:19:54,960
configuration file

545
00:19:54,960 --> 00:19:56,720
present in that repository so if you

546
00:19:56,720 --> 00:19:58,880
wanted a specific configuration you can

547
00:19:58,880 --> 00:19:59,520
achieve it

548
00:19:59,520 --> 00:20:01,200
but these are the two that we feel are

549
00:20:01,200 --> 00:20:03,200
very important for people in the field

550
00:20:03,200 --> 00:20:06,159
the first is to serve one preferred jr

551
00:20:06,159 --> 00:20:08,000
so you've done that analysis that we saw

552
00:20:08,000 --> 00:20:09,360
in that previous slide

553
00:20:09,360 --> 00:20:11,360
and you found that g-arm fingerprint

554
00:20:11,360 --> 00:20:13,360
that you want to run that meets your

555
00:20:13,360 --> 00:20:16,559
criteria for uh for operations

556
00:20:16,559 --> 00:20:19,280
so you can grab that configuration set

557
00:20:19,280 --> 00:20:21,200
it in that configuration file and it'll

558
00:20:21,200 --> 00:20:23,520
run for that jr fingerprint

559
00:20:23,520 --> 00:20:26,640
for as long as you want the second

560
00:20:26,640 --> 00:20:28,559
is maybe you want to cycle through these

561
00:20:28,559 --> 00:20:30,880
configurations every five seconds or

562
00:20:30,880 --> 00:20:32,880
every day or every month

563
00:20:32,880 --> 00:20:35,120
you can set that in the configuration

564
00:20:35,120 --> 00:20:36,320
file as well

565
00:20:36,320 --> 00:20:38,320
and it'll cycle through the supported

566
00:20:38,320 --> 00:20:39,520
configurations

567
00:20:39,520 --> 00:20:41,520
uh with a little bit of downtime to swap

568
00:20:41,520 --> 00:20:44,000
out the or restart that server

569
00:20:44,000 --> 00:20:47,039
and you'll have that a new jr

570
00:20:47,039 --> 00:20:50,799
that's supported on your system as well

571
00:20:52,480 --> 00:20:55,280
so what are some limitations from using

572
00:20:55,280 --> 00:20:56,080
this tool

573
00:20:56,080 --> 00:20:58,000
one there's a finite number of

574
00:20:58,000 --> 00:21:01,039
signatures like we presented earlier

575
00:21:01,039 --> 00:21:02,320
and we've talked about many times in

576
00:21:02,320 --> 00:21:04,400
this presentation these fingerprints are

577
00:21:04,400 --> 00:21:06,080
very reliant on

578
00:21:06,080 --> 00:21:08,240
the the underlying operating system the

579
00:21:08,240 --> 00:21:10,000
packages libraries so

580
00:21:10,000 --> 00:21:12,400
you will not have that infinite space

581
00:21:12,400 --> 00:21:14,320
where you can generate that specific jr

582
00:21:14,320 --> 00:21:16,480
that you want you are limited by

583
00:21:16,480 --> 00:21:19,039
the signatures that are supported on

584
00:21:19,039 --> 00:21:19,520
your

585
00:21:19,520 --> 00:21:22,880
your system right

586
00:21:22,880 --> 00:21:25,440
secondly the client compatibility check

587
00:21:25,440 --> 00:21:27,840
is very much required so

588
00:21:27,840 --> 00:21:30,559
what we've done here is or in the setup

589
00:21:30,559 --> 00:21:32,240
process we've checked

590
00:21:32,240 --> 00:21:34,559
the server uh the server has checked

591
00:21:34,559 --> 00:21:36,559
whether it can negotiate a successful

592
00:21:36,559 --> 00:21:37,360
handshake

593
00:21:37,360 --> 00:21:39,919
itself with a server that it stood up

594
00:21:39,919 --> 00:21:42,559
and if it passes that check then we

595
00:21:42,559 --> 00:21:44,000
give that a check mark for those

596
00:21:44,000 --> 00:21:45,760
configurations but you also want to make

597
00:21:45,760 --> 00:21:46,320
sure

598
00:21:46,320 --> 00:21:47,760
that the client you're packaging and

599
00:21:47,760 --> 00:21:49,679
deploying on these red team engagements

600
00:21:49,679 --> 00:21:50,480
or these

601
00:21:50,480 --> 00:21:52,240
uh you know penetration test assessments

602
00:21:52,240 --> 00:21:53,760
you want to make sure that client can

603
00:21:53,760 --> 00:21:55,280
also successfully make

604
00:21:55,280 --> 00:21:57,440
a handshake with the python proxy to

605
00:21:57,440 --> 00:21:58,559
make sure there isn't

606
00:21:58,559 --> 00:22:01,280
you know an issue setting up a

607
00:22:01,280 --> 00:22:03,360
connection there

608
00:22:03,360 --> 00:22:06,559
um thirdly jr randomizer does not make

609
00:22:06,559 --> 00:22:08,960
any changes or any uh have any type of

610
00:22:08,960 --> 00:22:09,760
support

611
00:22:09,760 --> 00:22:11,919
to mangle the traffic itself to avoid

612
00:22:11,919 --> 00:22:13,919
detection right so the traffic itself

613
00:22:13,919 --> 00:22:16,960
might be identified by other

614
00:22:16,960 --> 00:22:19,039
behavior based methods or other c2

615
00:22:19,039 --> 00:22:21,840
traffic identification methods

616
00:22:21,840 --> 00:22:23,280
and lastly and this is the most

617
00:22:23,280 --> 00:22:24,880
important one this is

618
00:22:24,880 --> 00:22:28,000
not exhaustive yet right

619
00:22:28,000 --> 00:22:30,080
we have done a decent amount of work

620
00:22:30,080 --> 00:22:31,440
here but it's not

621
00:22:31,440 --> 00:22:34,240
complete this is meant to be a step in

622
00:22:34,240 --> 00:22:35,919
the direction to fully evade

623
00:22:35,919 --> 00:22:36,960
fingerprinting

624
00:22:36,960 --> 00:22:38,960
and we feel that this is important

625
00:22:38,960 --> 00:22:40,880
enough to share with the community

626
00:22:40,880 --> 00:22:42,799
but there's definitely a lot more work

627
00:22:42,799 --> 00:22:44,799
that that needs to be done here

628
00:22:44,799 --> 00:22:46,880
right and some of the work that uh we'll

629
00:22:46,880 --> 00:22:49,120
do to improve this is one will scale

630
00:22:49,120 --> 00:22:51,919
to generate a larger list of signatures

631
00:22:51,919 --> 00:22:52,480
for sure

632
00:22:52,480 --> 00:22:55,919
that to tackle number one um secondly

633
00:22:55,919 --> 00:22:58,320
we would like to have functionality

634
00:22:58,320 --> 00:22:59,919
where you can just point this

635
00:22:59,919 --> 00:23:01,760
at a server and say i want that server's

636
00:23:01,760 --> 00:23:04,080
jr and you can achieve that

637
00:23:04,080 --> 00:23:08,000
configuration as well and lastly uh we

638
00:23:08,000 --> 00:23:09,679
trying to come up with and this is more

639
00:23:09,679 --> 00:23:11,520
on the defensive side we want to come up

640
00:23:11,520 --> 00:23:12,000
with

641
00:23:12,000 --> 00:23:14,000
a tls based fingerprinting technique

642
00:23:14,000 --> 00:23:16,240
that is more difficult to evade

643
00:23:16,240 --> 00:23:19,200
than than jrm and j3 and both of these

644
00:23:19,200 --> 00:23:19,520
are

645
00:23:19,520 --> 00:23:21,919
are you know amazing to include uh

646
00:23:21,919 --> 00:23:23,840
require are great to include as part of

647
00:23:23,840 --> 00:23:24,320
your

648
00:23:24,320 --> 00:23:26,400
your tooling infrastructure and we want

649
00:23:26,400 --> 00:23:27,840
to add on and

650
00:23:27,840 --> 00:23:30,879
improve these as well

651
00:23:33,280 --> 00:23:35,840
finally we want to give amazing

652
00:23:35,840 --> 00:23:36,720
recognition

653
00:23:36,720 --> 00:23:39,520
for the salesforce engineering team for

654
00:23:39,520 --> 00:23:41,440
jn3 and jr

655
00:23:41,440 --> 00:23:43,919
they have done an amazing job at

656
00:23:43,919 --> 00:23:45,120
identifying

657
00:23:45,120 --> 00:23:48,000
these phenomena and packaging them up or

658
00:23:48,000 --> 00:23:50,240
releasing them for the community

659
00:23:50,240 --> 00:23:53,600
and they also did a great job of of

660
00:23:53,600 --> 00:23:58,159
documenting and um coming up with cool

661
00:23:58,159 --> 00:24:01,760
gifs uh as part of their blog which i

662
00:24:01,760 --> 00:24:03,360
shamelessly borrowed for this

663
00:24:03,360 --> 00:24:06,320
presentation uh and the cu cyber team

664
00:24:06,320 --> 00:24:08,480
for j3 transport which uh

665
00:24:08,480 --> 00:24:10,640
these two teams really kind of laid out

666
00:24:10,640 --> 00:24:12,320
the groundwork to do this

667
00:24:12,320 --> 00:24:14,720
um to do this project and bring jr

668
00:24:14,720 --> 00:24:16,159
randomizer to you guys

669
00:24:16,159 --> 00:24:19,200
and in the spirit of of matching

670
00:24:19,200 --> 00:24:22,799
um j3 jr g3 transport we are

671
00:24:22,799 --> 00:24:25,840
open sourcing gm randomizer and we hope

672
00:24:25,840 --> 00:24:26,480
you guys

673
00:24:26,480 --> 00:24:28,240
you know take it play around with it

674
00:24:28,240 --> 00:24:29,760
make changes um

675
00:24:29,760 --> 00:24:33,440
as well

676
00:24:33,440 --> 00:24:35,679
so let's talk a little bit about uh what

677
00:24:35,679 --> 00:24:37,279
the takeaways are and we can

678
00:24:37,279 --> 00:24:39,840
conclude this presentation so the

679
00:24:39,840 --> 00:24:40,960
takeaways

680
00:24:40,960 --> 00:24:44,400
are first the jn3 and jr what are they

681
00:24:44,400 --> 00:24:46,799
how we can use these in our systems how

682
00:24:46,799 --> 00:24:47,600
they work

683
00:24:47,600 --> 00:24:50,320
and talked a little bit about the

684
00:24:50,320 --> 00:24:51,520
background for these

685
00:24:51,520 --> 00:24:54,640
um secondly we talked about how

686
00:24:54,640 --> 00:24:57,760
jr is really not reliable as a

687
00:24:57,760 --> 00:25:00,080
loan tool by itself to fingerprint these

688
00:25:00,080 --> 00:25:01,360
servers

689
00:25:01,360 --> 00:25:04,480
right thirdly we showed that just minor

690
00:25:04,480 --> 00:25:06,400
server side changes and configuration

691
00:25:06,400 --> 00:25:08,159
tweaks actually result

692
00:25:08,159 --> 00:25:11,279
in different jr fingerprints and finally

693
00:25:11,279 --> 00:25:12,799
we packaged all this

694
00:25:12,799 --> 00:25:15,760
up and presented it as jr randomizer a

695
00:25:15,760 --> 00:25:17,440
tool that you can use to cycle through

696
00:25:17,440 --> 00:25:18,640
these configurations

697
00:25:18,640 --> 00:25:20,799
and red teamers and operating red team

698
00:25:20,799 --> 00:25:22,480
operators and penetration testers can

699
00:25:22,480 --> 00:25:23,760
actually use

700
00:25:23,760 --> 00:25:27,440
to maintain operational security

701
00:25:27,440 --> 00:25:29,600
and finally this is an active area of

702
00:25:29,600 --> 00:25:31,440
research that we very much are involved

703
00:25:31,440 --> 00:25:31,840
in

704
00:25:31,840 --> 00:25:33,919
so keep an eye out on our blog for the

705
00:25:33,919 --> 00:25:36,080
latest from our research and tools and

706
00:25:36,080 --> 00:25:36,720
other

707
00:25:36,720 --> 00:25:40,400
uh interesting stuff as well

708
00:25:40,880 --> 00:25:43,200
finally if you need to follow me reach

709
00:25:43,200 --> 00:25:44,080
out to me uh

710
00:25:44,080 --> 00:25:46,559
message me uh that's my twitter handle

711
00:25:46,559 --> 00:25:47,360
my linkedin

712
00:25:47,360 --> 00:25:50,400
uh is right there github link will also

713
00:25:50,400 --> 00:25:50,720
be

714
00:25:50,720 --> 00:25:52,960
uh available for you guys so feel free

715
00:25:52,960 --> 00:25:54,480
to reach out on any of these

716
00:25:54,480 --> 00:25:56,880
and if you want to keep uh keep up with

717
00:25:56,880 --> 00:25:58,559
us and what we do here and let's go

718
00:25:58,559 --> 00:26:02,400
um yeah follow our blog and

719
00:26:02,400 --> 00:26:05,600
see what cool stuff we have awesome

720
00:26:05,600 --> 00:26:06,320
thank you for

721
00:26:06,320 --> 00:26:08,159
very much for your attention i hope you

722
00:26:08,159 --> 00:26:10,400
got something out of this presentation

723
00:26:10,400 --> 00:26:12,880
and i hope that you enjoy the rest of

724
00:26:12,880 --> 00:26:16,130
your time here at hack in the box 2021

725
00:26:16,130 --> 00:26:19,289
[Music]

726
00:26:20,919 --> 00:26:23,919
amsterdam

