1
00:00:14,920 --> 00:00:16,239
so

2
00:00:16,239 --> 00:00:18,400
hi there i'm going to talk about

3
00:00:18,400 --> 00:00:19,279
heaven's gate

4
00:00:19,279 --> 00:00:22,560
in this talk and briefly talk about

5
00:00:22,560 --> 00:00:26,240
how a world 64 program is created

6
00:00:26,240 --> 00:00:30,400
and reversing the whole world 64 layer

7
00:00:30,400 --> 00:00:33,440
by microsoft from this

8
00:00:33,440 --> 00:00:36,399
i got some findings that is interesting

9
00:00:36,399 --> 00:00:37,520
to be abused

10
00:00:37,520 --> 00:00:40,320
in the wild in the end i will release

11
00:00:40,320 --> 00:00:40,719
two

12
00:00:40,719 --> 00:00:42,879
new attack methods could be able

13
00:00:42,879 --> 00:00:45,280
overused based on this talk

14
00:00:45,280 --> 00:00:48,399
i mentioned how my currently work at tx1

15
00:00:48,399 --> 00:00:49,440
networks

16
00:00:49,440 --> 00:00:52,239
and i do this research during i'm

17
00:00:52,239 --> 00:00:53,039
working at

18
00:00:53,039 --> 00:00:56,800
scicraft as a internship and i have more

19
00:00:56,800 --> 00:00:57,840
than 10 years

20
00:00:57,840 --> 00:01:01,120
experience to play in reverse

21
00:01:01,120 --> 00:01:04,080
malware and exploit on windows and i

22
00:01:04,080 --> 00:01:05,199
just wrote a book

23
00:01:05,199 --> 00:01:08,479
named windows apd wolf where basically

24
00:01:08,479 --> 00:01:09,439
talking about

25
00:01:09,439 --> 00:01:13,119
windows hacking tricks and

26
00:01:13,119 --> 00:01:16,400
uh here's today's today's outline first

27
00:01:16,400 --> 00:01:20,080
uh we will discuss how uh anti-malware

28
00:01:20,080 --> 00:01:23,520
working in a 32-bit mode and why we need

29
00:01:23,520 --> 00:01:24,240
to use

30
00:01:24,240 --> 00:01:27,280
this kind of a trick named humans get to

31
00:01:27,280 --> 00:01:29,439
bypass this kind of potential

32
00:01:29,439 --> 00:01:33,040
by antivirus then second

33
00:01:33,040 --> 00:01:35,400
it's important for us to know the

34
00:01:35,400 --> 00:01:36,560
implementation

35
00:01:36,560 --> 00:01:40,079
of wall 64 layer we will share some

36
00:01:40,079 --> 00:01:42,159
interesting findings they could be

37
00:01:42,159 --> 00:01:43,280
abused from

38
00:01:43,280 --> 00:01:46,320
reversing findings uh for example how

39
00:01:46,320 --> 00:01:49,600
a wow 64 program is created

40
00:01:49,600 --> 00:01:53,200
as a process and you will find less

41
00:01:53,200 --> 00:01:56,880
a fixed path from 32 to 64

42
00:01:56,880 --> 00:01:59,920
just inside the wow 64

43
00:01:59,920 --> 00:02:02,960
layer finally you will find less

44
00:02:02,960 --> 00:02:05,520
point is there's a translator i will

45
00:02:05,520 --> 00:02:06,799
call it translator

46
00:02:06,799 --> 00:02:11,360
using the 64 api and the api to simulate

47
00:02:11,360 --> 00:02:14,480
any 32 interrupt

48
00:02:14,480 --> 00:02:17,599
and based on those findings

49
00:02:17,599 --> 00:02:20,720
we create a whole new method

50
00:02:20,720 --> 00:02:24,959
to abuse the whole wall 64 layer by

51
00:02:24,959 --> 00:02:27,120
microsoft

52
00:02:27,120 --> 00:02:31,040
the first one is wow grail he basically

53
00:02:31,040 --> 00:02:34,160
built a whole new path directly to

54
00:02:34,160 --> 00:02:37,360
code the translator we just mentioned

55
00:02:37,360 --> 00:02:41,040
it can make us more more easier to

56
00:02:41,040 --> 00:02:43,680
knock on the human sketch again but more

57
00:02:43,680 --> 00:02:44,959
stable than

58
00:02:44,959 --> 00:02:48,319
other ones say and the other one

59
00:02:48,319 --> 00:02:51,920
the other poc is wall injector

60
00:02:51,920 --> 00:02:55,200
he basically do the process injection

61
00:02:55,200 --> 00:02:58,239
just explore a thread

62
00:02:58,239 --> 00:03:02,800
snatch up in wow 64 process

63
00:03:02,800 --> 00:03:05,760
so first we need to talk about what's

64
00:03:05,760 --> 00:03:06,560
the health

65
00:03:06,560 --> 00:03:09,440
for my way i mean we need to define what

66
00:03:09,440 --> 00:03:10,400
the hell for

67
00:03:10,400 --> 00:03:14,239
my way on a victim

68
00:03:14,239 --> 00:03:17,840
installer anti-malware so we are briefly

69
00:03:17,840 --> 00:03:18,640
talking about

70
00:03:18,640 --> 00:03:22,480
the hips design by anti-malware

71
00:03:22,480 --> 00:03:25,040
and look at the picture this picture is

72
00:03:25,040 --> 00:03:26,720
mentioned by

73
00:03:26,720 --> 00:03:30,159
in 2021 post and these features

74
00:03:30,159 --> 00:03:33,840
show a normal anti-api codes from

75
00:03:33,840 --> 00:03:37,760
32-bit to 64-bit on windows

76
00:03:37,760 --> 00:03:40,799
for example when as rat is

77
00:03:40,799 --> 00:03:43,680
just jumping to a 32-bit anti-resource

78
00:03:43,680 --> 00:03:44,480
route

79
00:03:44,480 --> 00:03:47,680
then the threat will walk into the wall

80
00:03:47,680 --> 00:03:51,599
64 layer then this 32-bit

81
00:03:51,599 --> 00:03:54,799
system interrupt will get translated

82
00:03:54,799 --> 00:03:58,400
into 64 bit and finally

83
00:03:58,400 --> 00:04:01,519
the wow 64 layer will call the

84
00:04:01,519 --> 00:04:02,959
anti-resource thread

85
00:04:02,959 --> 00:04:05,840
64-bit

86
00:04:06,319 --> 00:04:09,439
so from here you can see basically

87
00:04:09,439 --> 00:04:12,319
the while cc4 layer basically is a

88
00:04:12,319 --> 00:04:14,319
translator layer

89
00:04:14,319 --> 00:04:17,040
and here's another picture also

90
00:04:17,040 --> 00:04:18,399
mentioned by firearm

91
00:04:18,399 --> 00:04:22,000
if there is a any anti-malware program

92
00:04:22,000 --> 00:04:23,199
is installed on

93
00:04:23,199 --> 00:04:26,560
the victim there should be a lot of

94
00:04:26,560 --> 00:04:31,280
hook placed on the 32-bit anti-api

95
00:04:31,280 --> 00:04:33,680
uh for example just just like this

96
00:04:33,680 --> 00:04:34,479
feature is

97
00:04:34,479 --> 00:04:37,520
anti-resource thread is hooked and

98
00:04:37,520 --> 00:04:41,360
when any malware tried to abuse

99
00:04:41,360 --> 00:04:45,040
anti-api like anti-rhythm threat and

100
00:04:45,040 --> 00:04:48,320
anti-malware will get notified in no

101
00:04:48,320 --> 00:04:49,680
time because

102
00:04:49,680 --> 00:04:53,520
it got a hook here on the api

103
00:04:53,520 --> 00:04:56,960
malware try to use so however in

104
00:04:56,960 --> 00:05:00,080
in a wow wow 64 process

105
00:05:00,080 --> 00:05:04,160
164 process basically is a 32-bit

106
00:05:04,160 --> 00:05:07,280
program right so there should be

107
00:05:07,280 --> 00:05:11,039
no any hook installed on the 64-bit

108
00:05:11,039 --> 00:05:12,479
anti-apis

109
00:05:12,479 --> 00:05:15,039
so here's a cool idea it's called

110
00:05:15,039 --> 00:05:17,360
heavens get

111
00:05:17,360 --> 00:05:21,039
because we can assume there's no any

112
00:05:21,039 --> 00:05:24,720
hook is placed on the 64-bit

113
00:05:24,720 --> 00:05:28,320
so we can assume uh the

114
00:05:28,320 --> 00:05:31,840
64 api is clear it is a lot

115
00:05:31,840 --> 00:05:34,479
it is clear api we can just directly

116
00:05:34,479 --> 00:05:35,280
call them

117
00:05:35,280 --> 00:05:38,240
and bypass this kind of detention by

118
00:05:38,240 --> 00:05:39,680
anti-malware

119
00:05:39,680 --> 00:05:41,840
so in this kind of trick name

120
00:05:41,840 --> 00:05:42,800
heavensgate

121
00:05:42,800 --> 00:05:46,240
we use a lot of step

122
00:05:46,240 --> 00:05:49,199
just like we are writing a windows gel

123
00:05:49,199 --> 00:05:49,919
code

124
00:05:49,919 --> 00:05:54,160
so first we need to get the pb block

125
00:05:54,160 --> 00:05:58,400
64 bit pb block by the gs segment

126
00:05:58,400 --> 00:06:01,280
and from the pb block there is an

127
00:06:01,280 --> 00:06:02,080
element

128
00:06:02,080 --> 00:06:05,600
named ldr element and this element

129
00:06:05,600 --> 00:06:08,800
make us able to list all

130
00:06:08,800 --> 00:06:12,639
64-bit uh dll modules

131
00:06:12,639 --> 00:06:15,680
in 64-bit so we can

132
00:06:15,680 --> 00:06:20,160
enumerate all the dl module and find the

133
00:06:20,160 --> 00:06:23,360
ntdo modules emerging best

134
00:06:23,360 --> 00:06:27,600
basically we get the emerge base and

135
00:06:27,600 --> 00:06:31,199
let's uv p module is loaded

136
00:06:31,199 --> 00:06:34,720
on the imagebase dl emerging base so

137
00:06:34,720 --> 00:06:37,520
we can check the export adjust table and

138
00:06:37,520 --> 00:06:39,440
find the

139
00:06:39,440 --> 00:06:42,560
anti-api what i want and we can just

140
00:06:42,560 --> 00:06:46,560
call the 64-bit

141
00:06:46,560 --> 00:06:49,919
api we want and just call them directly

142
00:06:49,919 --> 00:06:52,960
just like we are writing a 64-bit

143
00:06:52,960 --> 00:06:55,520
share code

144
00:06:56,560 --> 00:06:59,199
and this kind of attack have been

145
00:06:59,199 --> 00:07:00,720
studied about

146
00:07:00,720 --> 00:07:04,479
8 years old order from the first

147
00:07:04,479 --> 00:07:08,800
post is by reworf in 2011

148
00:07:08,800 --> 00:07:12,160
this post basically it explores

149
00:07:12,160 --> 00:07:14,639
this kind of attack there's more and

150
00:07:14,639 --> 00:07:15,360
more people

151
00:07:15,360 --> 00:07:18,319
trying to make the follow-up study and

152
00:07:18,319 --> 00:07:19,520
at least a

153
00:07:19,520 --> 00:07:22,400
useful poster here i have read them low

154
00:07:22,400 --> 00:07:22,880
sports

155
00:07:22,880 --> 00:07:25,759
is very useful i use them as a reference

156
00:07:25,759 --> 00:07:26,880
and

157
00:07:26,880 --> 00:07:30,319
this post try to keep uh use this kind

158
00:07:30,319 --> 00:07:31,919
of show code using

159
00:07:31,919 --> 00:07:35,520
attack method but actually if

160
00:07:35,520 --> 00:07:39,759
uh anybody try to use lowe's poc

161
00:07:39,759 --> 00:07:42,800
you will you will find it's very hard

162
00:07:42,800 --> 00:07:45,840
very difficult to use in practice for

163
00:07:45,840 --> 00:07:46,479
example

164
00:07:46,479 --> 00:07:49,759
and that's very difficult and not stable

165
00:07:49,759 --> 00:07:50,720
enough to use

166
00:07:50,720 --> 00:07:54,960
in 32-bit cpl plus if you try to use

167
00:07:54,960 --> 00:07:58,160
64-bit anti-api and

168
00:07:58,160 --> 00:08:02,080
with 64 coin convention and 64 data

169
00:08:02,080 --> 00:08:02,639
structure

170
00:08:02,639 --> 00:08:06,720
in 32-bit c purpose compiler

171
00:08:06,720 --> 00:08:10,479
is very hard to use this is

172
00:08:10,479 --> 00:08:13,520
the first problem to use and here's

173
00:08:13,520 --> 00:08:16,560
another bigger problem is

174
00:08:16,560 --> 00:08:20,879
uh actually after the memory layout

175
00:08:20,879 --> 00:08:24,720
of wow 64 process after

176
00:08:24,720 --> 00:08:28,639
from windows windows 7 to windows a

177
00:08:28,639 --> 00:08:31,759
here's a normal wow 64 process memory

178
00:08:31,759 --> 00:08:32,640
layout

179
00:08:32,640 --> 00:08:35,760
and here's the um

180
00:08:35,760 --> 00:08:39,200
164 process memory layout after

181
00:08:39,200 --> 00:08:42,159
windows 8 and you can see the difference

182
00:08:42,159 --> 00:08:44,080
this feature is from deal live

183
00:08:44,080 --> 00:08:47,279
and you can see the difference between

184
00:08:47,279 --> 00:08:50,560
windows 7 and after windows 8

185
00:08:50,560 --> 00:08:55,920
and you can see uh the nt the anti deal

186
00:08:55,920 --> 00:08:59,839
32 bit and 64 bit is both

187
00:08:59,839 --> 00:09:03,200
under the four gigabyte

188
00:09:03,200 --> 00:09:05,680
the address is under the four gigabytes

189
00:09:05,680 --> 00:09:07,120
e so

190
00:09:07,120 --> 00:09:10,880
from 32 bit ntdl or

191
00:09:10,880 --> 00:09:14,160
64 ntdo module you can see

192
00:09:14,160 --> 00:09:17,360
both of them the address is very easy to

193
00:09:17,360 --> 00:09:18,240
use

194
00:09:18,240 --> 00:09:22,800
in 32 bit because the address is

195
00:09:22,800 --> 00:09:26,160
totally is under the four gigabyte

196
00:09:26,160 --> 00:09:29,600
so it's very easy to use but

197
00:09:29,600 --> 00:09:32,959
uh the memory is changed

198
00:09:32,959 --> 00:09:36,560
after windows 8 and you can see

199
00:09:36,560 --> 00:09:40,240
the 64 anti-deal module

200
00:09:40,240 --> 00:09:43,760
have the reload cat have been relocated

201
00:09:43,760 --> 00:09:47,600
to a new address above four gigabyte

202
00:09:47,600 --> 00:09:51,440
so the address is basically

203
00:09:51,440 --> 00:09:54,959
very difficult to use uh just in

204
00:09:54,959 --> 00:09:58,160
a 32-bit it's very hard to use so

205
00:09:58,160 --> 00:10:02,079
it's another big problem so in this talk

206
00:10:02,079 --> 00:10:06,320
i created a new i create a new poc

207
00:10:06,320 --> 00:10:09,839
name while well just we can maybe we can

208
00:10:09,839 --> 00:10:10,320
just

209
00:10:10,320 --> 00:10:14,000
use the translator of the translator

210
00:10:14,000 --> 00:10:17,600
inside the wall 64 layer and we can use

211
00:10:17,600 --> 00:10:19,040
the translator

212
00:10:19,040 --> 00:10:22,480
directly to simulate every

213
00:10:22,480 --> 00:10:25,680
every 32 bit into 64 but

214
00:10:25,680 --> 00:10:30,480
we can just use it as a new heaven skit

215
00:10:30,480 --> 00:10:32,560
before we talk about lowe's attack

216
00:10:32,560 --> 00:10:34,720
detail we need to figure out

217
00:10:34,720 --> 00:10:37,760
how while 64 layer works

218
00:10:37,760 --> 00:10:41,440
by reversing engineering and first one

219
00:10:41,440 --> 00:10:46,160
is initialization of 164 process and

220
00:10:46,160 --> 00:10:47,279
here is a function

221
00:10:47,279 --> 00:10:50,800
named bt cpu simulated function and this

222
00:10:50,800 --> 00:10:51,519
function

223
00:10:51,519 --> 00:10:54,320
basically is an entry function for any

224
00:10:54,320 --> 00:10:56,480
wow 64 process

225
00:10:56,480 --> 00:10:59,600
and you can see on the picture here

226
00:10:59,600 --> 00:11:03,200
basically this function just do only one

227
00:11:03,200 --> 00:11:03,920
thing is

228
00:11:03,920 --> 00:11:06,240
call another function named wrong

229
00:11:06,240 --> 00:11:07,920
simulated co-function

230
00:11:07,920 --> 00:11:11,200
and it's an infinity loop just just

231
00:11:11,200 --> 00:11:14,560
to do call this function

232
00:11:14,560 --> 00:11:16,880
and at the beginning of wrong

233
00:11:16,880 --> 00:11:19,120
symmetrical function you can see here

234
00:11:19,120 --> 00:11:22,560
and it make a copy of loads in macro

235
00:11:22,560 --> 00:11:23,200
copy of

236
00:11:23,200 --> 00:11:26,160
those important ridges by just push

237
00:11:26,160 --> 00:11:26,959
instruction

238
00:11:26,959 --> 00:11:30,560
here push push push push and

239
00:11:30,560 --> 00:11:34,160
a big pointer is right here you can see

240
00:11:34,160 --> 00:11:37,200
uh register r12

241
00:11:37,200 --> 00:11:41,440
was set to adjust of tb block

242
00:11:41,440 --> 00:11:45,360
and r15 register r15

243
00:11:45,360 --> 00:11:49,040
is set to a pointer list name

244
00:11:49,040 --> 00:11:53,120
turbo sunk dispatch so there's a lot of

245
00:11:53,120 --> 00:11:56,880
function point will be keep inside of

246
00:11:56,880 --> 00:12:00,399
this list a turbo sunken dispatch list

247
00:12:00,399 --> 00:12:01,360
list

248
00:12:01,360 --> 00:12:05,279
and r13 was set to a

249
00:12:05,279 --> 00:12:08,880
just of thread contacts for

250
00:12:08,880 --> 00:12:13,200
32-bit threat inside while 64 process

251
00:12:13,200 --> 00:12:16,480
so you can see here our 13 was

252
00:12:16,480 --> 00:12:20,000
0.2 r12 and

253
00:12:20,000 --> 00:12:23,279
add at offset here

254
00:12:23,279 --> 00:12:26,639
and this offset is kept a

255
00:12:26,639 --> 00:12:29,839
address of thread contacts in

256
00:12:29,839 --> 00:12:33,279
wow 64 process and

257
00:12:33,279 --> 00:12:37,040
we just say about the turbo this page

258
00:12:37,040 --> 00:12:39,920
sunk a list table is a is a function

259
00:12:39,920 --> 00:12:41,200
pointer table

260
00:12:41,200 --> 00:12:44,000
and in this function table you can see

261
00:12:44,000 --> 00:12:44,639
there is

262
00:12:44,639 --> 00:12:47,200
a lot of function pointer here and

263
00:12:47,200 --> 00:12:48,560
totally there's a

264
00:12:48,560 --> 00:12:52,480
32 different function pointer right here

265
00:12:52,480 --> 00:12:55,360
and only thing we need to know is the

266
00:12:55,360 --> 00:12:56,720
last one

267
00:12:56,720 --> 00:13:00,560
is cpup return from simulated code

268
00:13:00,560 --> 00:13:04,240
and the first one is turbo dispatch

269
00:13:04,240 --> 00:13:07,360
jumper adjust end function and

270
00:13:07,360 --> 00:13:10,639
list2 function is most important one

271
00:13:10,639 --> 00:13:14,000
in this list and cpup

272
00:13:14,000 --> 00:13:16,399
return from simulated code this function

273
00:13:16,399 --> 00:13:17,120
basically

274
00:13:17,120 --> 00:13:19,440
is from the name you can see this is a

275
00:13:19,440 --> 00:13:20,240
function

276
00:13:20,240 --> 00:13:23,680
for 32-bit program when e need to

277
00:13:23,680 --> 00:13:24,560
transform

278
00:13:24,560 --> 00:13:28,000
into 64 and this is the first

279
00:13:28,000 --> 00:13:31,200
first copy function from 32-bit

280
00:13:31,200 --> 00:13:35,120
to 64-bit this is a first one

281
00:13:35,120 --> 00:13:38,320
first one copy function for 32 bit

282
00:13:38,320 --> 00:13:41,920
to use and turbo display

283
00:13:41,920 --> 00:13:44,000
page function jump address and list

284
00:13:44,000 --> 00:13:45,199
function

285
00:13:45,199 --> 00:13:48,800
this is a copy function too but in this

286
00:13:48,800 --> 00:13:51,519
function we'll call the translator

287
00:13:51,519 --> 00:13:54,800
inside while 64 layer

288
00:13:54,800 --> 00:13:57,360
and if we can access the list function

289
00:13:57,360 --> 00:13:59,120
pointer

290
00:13:59,120 --> 00:14:01,760
we have known about the should be at

291
00:14:01,760 --> 00:14:02,160
least

292
00:14:02,160 --> 00:14:05,360
a post pointer to the thread contacts

293
00:14:05,360 --> 00:14:08,800
and there should be a translator inside

294
00:14:08,800 --> 00:14:12,800
while 64 layer and two imposing copy

295
00:14:12,800 --> 00:14:13,600
function

296
00:14:13,600 --> 00:14:17,279
for 32-bit program so next part

297
00:14:17,279 --> 00:14:20,399
we need to know about is the chambering

298
00:14:20,399 --> 00:14:23,440
how to make the 32 system code

299
00:14:23,440 --> 00:14:26,480
walk into 64-bit

300
00:14:26,480 --> 00:14:29,040
and here's a sample here you can see

301
00:14:29,040 --> 00:14:30,720
when a 32-bit

302
00:14:30,720 --> 00:14:34,399
anti-resource route was invoked and

303
00:14:34,399 --> 00:14:37,600
the thread from here will jump into the

304
00:14:37,600 --> 00:14:38,079
gauge

305
00:14:38,079 --> 00:14:41,440
here so on this sketch is

306
00:14:41,440 --> 00:14:45,760
on the module while 64 cpu dll module

307
00:14:45,760 --> 00:14:48,079
and on this sketch you can see it

308
00:14:48,079 --> 00:14:48,959
basically

309
00:14:48,959 --> 00:14:52,399
use a intel file junk to change

310
00:14:52,399 --> 00:14:55,680
the cs segment from 23 to

311
00:14:55,680 --> 00:14:59,279
33 from here to here so now

312
00:14:59,279 --> 00:15:02,320
from here this line you can see intel

313
00:15:02,320 --> 00:15:03,839
cpu will cheat

314
00:15:03,839 --> 00:15:06,320
the following assembly called machine

315
00:15:06,320 --> 00:15:07,279
code as

316
00:15:07,279 --> 00:15:10,639
64 bit so now we can use

317
00:15:10,639 --> 00:15:14,079
64 64-bit assembly code here

318
00:15:14,079 --> 00:15:18,079
and we just talked about regis r15

319
00:15:18,079 --> 00:15:21,279
is set to a pointer list turbo sunk

320
00:15:21,279 --> 00:15:24,880
dispatch so in this instruction

321
00:15:24,880 --> 00:15:27,600
we have say it will jump into the last

322
00:15:27,600 --> 00:15:28,720
one function

323
00:15:28,720 --> 00:15:32,079
cpup return from simulated code

324
00:15:32,079 --> 00:15:34,480
this function and this function we just

325
00:15:34,480 --> 00:15:35,839
mentioned

326
00:15:35,839 --> 00:15:39,519
it is first copy function from

327
00:15:39,519 --> 00:15:43,279
bit into 64 bit

328
00:15:43,279 --> 00:15:46,880
and in at the beginning of

329
00:15:46,880 --> 00:15:49,920
cpup return from simulated code this

330
00:15:49,920 --> 00:15:51,040
function here

331
00:15:51,040 --> 00:15:54,639
and it try to make a a snake shop for

332
00:15:54,639 --> 00:15:55,279
the current

333
00:15:55,279 --> 00:15:58,320
threat and the snake shop is safe

334
00:15:58,320 --> 00:16:02,240
at the largest ah 13 so you can see here

335
00:16:02,240 --> 00:16:05,440
he tried to keep current edi

336
00:16:05,440 --> 00:16:09,040
esi ebx ebp lows

337
00:16:09,040 --> 00:16:12,959
register will be keep on the register

338
00:16:12,959 --> 00:16:16,639
r13 and after the snapshot

339
00:16:16,639 --> 00:16:19,440
is done it's done and you can see the

340
00:16:19,440 --> 00:16:19,920
threat

341
00:16:19,920 --> 00:16:23,040
will jump into the function

342
00:16:23,040 --> 00:16:25,920
is the first copy function is turbo

343
00:16:25,920 --> 00:16:26,560
dispatch

344
00:16:26,560 --> 00:16:29,040
jumper adjust end we just mentioned and

345
00:16:29,040 --> 00:16:30,160
this function will

346
00:16:30,160 --> 00:16:33,759
call call the translator function here

347
00:16:33,759 --> 00:16:34,959
you can see

348
00:16:34,959 --> 00:16:36,959
list function is the translator function

349
00:16:36,959 --> 00:16:38,720
named wall64

350
00:16:38,720 --> 00:16:42,320
system service ex and in this function

351
00:16:42,320 --> 00:16:44,639
you will try to try to use this

352
00:16:44,639 --> 00:16:47,759
list translator function to help us

353
00:16:47,759 --> 00:16:50,880
simulate the system interrupt

354
00:16:50,880 --> 00:16:54,000
it will receive a 32-bit system call

355
00:16:54,000 --> 00:16:54,560
number

356
00:16:54,560 --> 00:16:59,599
and 32-bit parameter list

357
00:17:00,079 --> 00:17:03,759
and after the lpi is simulate stone

358
00:17:03,759 --> 00:17:06,640
and remember we just have a snapshot on

359
00:17:06,640 --> 00:17:07,599
the richest

360
00:17:07,599 --> 00:17:10,400
ascertain it's trying to get a recover

361
00:17:10,400 --> 00:17:12,079
from the snake shop here

362
00:17:12,079 --> 00:17:15,280
so we can get a recover from

363
00:17:15,280 --> 00:17:18,319
from the snail shop we just said and

364
00:17:18,319 --> 00:17:20,640
jump back to the return address and

365
00:17:20,640 --> 00:17:21,359
continue

366
00:17:21,359 --> 00:17:25,919
ranked into 32-bit program

367
00:17:25,919 --> 00:17:27,520
we kept talking about there's a

368
00:17:27,520 --> 00:17:29,360
translator function

369
00:17:29,360 --> 00:17:32,640
named wow system service ex so

370
00:17:32,640 --> 00:17:35,840
we will get more deeper close to it by

371
00:17:35,840 --> 00:17:38,000
reversing engineering

372
00:17:38,000 --> 00:17:41,200
and just like everybody have knew this

373
00:17:41,200 --> 00:17:42,720
code number lay

374
00:17:42,720 --> 00:17:46,000
actually is 16 bit value keep

375
00:17:46,000 --> 00:17:49,520
by the register ex and basically

376
00:17:49,520 --> 00:17:52,799
lay is not just a value and there

377
00:17:52,799 --> 00:17:54,960
actually is a data structure

378
00:17:54,960 --> 00:17:58,080
named wow 64 system service

379
00:17:58,080 --> 00:18:01,120
this data structure i have list here and

380
00:18:01,120 --> 00:18:01,760
you can see

381
00:18:01,760 --> 00:18:05,440
in this data structure uh the higher 4

382
00:18:05,440 --> 00:18:06,000
bit

383
00:18:06,000 --> 00:18:09,039
is cisco table index

384
00:18:09,039 --> 00:18:12,160
and the lower 12 bit is

385
00:18:12,160 --> 00:18:16,240
cisco function number of the cisco

386
00:18:16,240 --> 00:18:20,000
table and the internal of

387
00:18:20,000 --> 00:18:23,200
wow systems service ex function

388
00:18:23,200 --> 00:18:26,799
we just say lay this call number here

389
00:18:26,799 --> 00:18:29,120
just this argument you can see we just

390
00:18:29,120 --> 00:18:30,799
say this cisco

391
00:18:30,799 --> 00:18:34,000
is made of cisco table index

392
00:18:34,000 --> 00:18:36,799
and function number so that is not

393
00:18:36,799 --> 00:18:37,600
difficult for

394
00:18:37,600 --> 00:18:40,799
us to notice lay this code number

395
00:18:40,799 --> 00:18:43,760
actually that is a key of two dimension

396
00:18:43,760 --> 00:18:45,200
array

397
00:18:45,200 --> 00:18:48,799
if you try to use ida pro to decompile

398
00:18:48,799 --> 00:18:52,320
the system module 164

399
00:18:52,320 --> 00:18:56,880
cpu dot dll and you can see

400
00:18:56,880 --> 00:18:59,120
there's a function pointer list here

401
00:18:59,120 --> 00:18:59,919
then

402
00:18:59,919 --> 00:19:03,520
sd w hnt32

403
00:19:03,520 --> 00:19:07,280
jump table and there's a lot of function

404
00:19:07,280 --> 00:19:10,400
here and those functions are used to

405
00:19:10,400 --> 00:19:11,120
read

406
00:19:11,120 --> 00:19:14,720
32-bit interrupt and simulate

407
00:19:14,720 --> 00:19:18,160
lowe's 32-bit interrupt into

408
00:19:18,160 --> 00:19:22,320
60 into 64-bit

409
00:19:22,320 --> 00:19:25,520
uh interrupts so uh basically

410
00:19:25,520 --> 00:19:27,840
you can see there's a lot of function

411
00:19:27,840 --> 00:19:28,799
and

412
00:19:28,799 --> 00:19:32,240
uh those functions are used to help us

413
00:19:32,240 --> 00:19:35,440
transform our 32-bit

414
00:19:35,440 --> 00:19:39,200
interrupt into 64-bit

415
00:19:39,200 --> 00:19:42,240
interrupt so they actually i have just

416
00:19:42,240 --> 00:19:42,640
say

417
00:19:42,640 --> 00:19:45,679
there's a key here in argument first

418
00:19:45,679 --> 00:19:49,440
argument so so that we can find a match1

419
00:19:49,440 --> 00:19:52,240
function from this jumper table by the

420
00:19:52,240 --> 00:19:52,880
key

421
00:19:52,880 --> 00:19:56,000
so you can see the there's a code here

422
00:19:56,000 --> 00:19:59,679
it does use the cisco table as a key

423
00:19:59,679 --> 00:20:03,360
to look up a match one function to use

424
00:20:03,360 --> 00:20:06,400
here just use e as a key of

425
00:20:06,400 --> 00:20:10,720
two dimension array from this jump table

426
00:20:10,720 --> 00:20:15,280
and if we find a match one function from

427
00:20:15,280 --> 00:20:18,400
least jump table and we can use the

428
00:20:18,400 --> 00:20:20,960
function pointer to transform our

429
00:20:20,960 --> 00:20:24,640
32-bit interrupt into 64

430
00:20:24,640 --> 00:20:27,679
interrupt so we can just

431
00:20:27,679 --> 00:20:31,840
at the end of 164 system service ex

432
00:20:31,840 --> 00:20:33,679
function you can see

433
00:20:33,679 --> 00:20:37,360
it directly use the function we just

434
00:20:37,360 --> 00:20:38,240
look up

435
00:20:38,240 --> 00:20:41,679
and call it directly then finish the

436
00:20:41,679 --> 00:20:43,120
simulated

437
00:20:43,120 --> 00:20:47,039
so it's very easy simple

438
00:20:47,039 --> 00:20:50,559
design just look up a match

439
00:20:50,559 --> 00:20:53,200
one function point and use the function

440
00:20:53,200 --> 00:20:53,760
point

441
00:20:53,760 --> 00:20:56,799
to change use it as a function to

442
00:20:56,799 --> 00:20:57,520
transform

443
00:20:57,520 --> 00:21:01,200
our 32-bit interrupt into 64

444
00:21:01,200 --> 00:21:05,360
interrupt so let us make a recap

445
00:21:05,360 --> 00:21:08,400
put all the thing all together and

446
00:21:08,400 --> 00:21:12,559
if we try to call a 32-bit windows api

447
00:21:12,559 --> 00:21:15,919
first it will change the intel cpu mode

448
00:21:15,919 --> 00:21:17,280
from 32 bit

449
00:21:17,280 --> 00:21:20,960
to 64 bit by changing cs segment

450
00:21:20,960 --> 00:21:24,559
value and make a snatch up

451
00:21:24,559 --> 00:21:27,280
for current thread contacts at the

452
00:21:27,280 --> 00:21:28,080
register

453
00:21:28,080 --> 00:21:32,080
r13 then run into the translator

454
00:21:32,080 --> 00:21:36,159
function while system service ex in here

455
00:21:36,159 --> 00:21:38,400
we can find a correct table function

456
00:21:38,400 --> 00:21:40,000
from the jump table

457
00:21:40,000 --> 00:21:43,600
they help us to transform our 32 32-bit

458
00:21:43,600 --> 00:21:46,720
interrupt into 64-bit

459
00:21:46,720 --> 00:21:50,559
and we call it we call a turbo function

460
00:21:50,559 --> 00:21:52,559
directly

461
00:21:52,559 --> 00:21:55,679
in lay turbo function it will invoke the

462
00:21:55,679 --> 00:21:56,960
current

463
00:21:56,960 --> 00:22:00,000
64 bit anti-api

464
00:22:00,000 --> 00:22:02,799
and finally the interrupt will be sent

465
00:22:02,799 --> 00:22:03,280
to

466
00:22:03,280 --> 00:22:06,960
the 64-bit kernel and finish the job we

467
00:22:06,960 --> 00:22:08,320
want

468
00:22:08,320 --> 00:22:11,440
and after the task all done and

469
00:22:11,440 --> 00:22:13,919
let's read the need to get a recover

470
00:22:13,919 --> 00:22:15,440
from the snail shop that we just

471
00:22:15,440 --> 00:22:18,799
created and jump back to the 32-bit

472
00:22:18,799 --> 00:22:22,159
program then continue running

473
00:22:22,159 --> 00:22:25,520
so there are three points for us to ever

474
00:22:25,520 --> 00:22:26,159
use

475
00:22:26,159 --> 00:22:29,280
first if we can change our cs segment

476
00:22:29,280 --> 00:22:29,919
value

477
00:22:29,919 --> 00:22:33,679
then we can change the cs we can change

478
00:22:33,679 --> 00:22:37,520
intel cpu to in 32 bit

479
00:22:37,520 --> 00:22:40,559
or 64 bit and

480
00:22:40,559 --> 00:22:44,640
there is a register r13 always point to

481
00:22:44,640 --> 00:22:47,919
a 32-bit thread contacts so if

482
00:22:47,919 --> 00:22:51,280
we can write into this memory we can

483
00:22:51,280 --> 00:22:52,799
control

484
00:22:52,799 --> 00:22:56,159
next program counter will be will be

485
00:22:56,159 --> 00:22:59,919
recovered and we can control the 32-bit

486
00:22:59,919 --> 00:23:01,919
program will jump back to

487
00:23:01,919 --> 00:23:05,919
whatever and

488
00:23:06,000 --> 00:23:09,120
finally finally pointer is uh

489
00:23:09,120 --> 00:23:13,679
there is always a 160 system service ex

490
00:23:13,679 --> 00:23:16,640
that is used as a translator for us to

491
00:23:16,640 --> 00:23:17,679
simulate

492
00:23:17,679 --> 00:23:20,640
simulate any 32-bit system interrupt

493
00:23:20,640 --> 00:23:21,280
into

494
00:23:21,280 --> 00:23:24,960
64 kernel

495
00:23:28,320 --> 00:23:31,200
so here i'm going to going to talk about

496
00:23:31,200 --> 00:23:32,159
my first

497
00:23:32,159 --> 00:23:35,520
poc i call it wow grill

498
00:23:35,520 --> 00:23:37,600
and we have talked about the whole

499
00:23:37,600 --> 00:23:39,200
system interrupt

500
00:23:39,200 --> 00:23:43,919
running from 32 bit to 64 bit on windows

501
00:23:43,919 --> 00:23:47,360
and there is a wow 64 layer help us

502
00:23:47,360 --> 00:23:51,039
simulate our 32-bit interrupt

503
00:23:51,039 --> 00:23:54,240
into 64-bit and finally

504
00:23:54,240 --> 00:23:57,679
this layer while 64-layer will call the

505
00:23:57,679 --> 00:23:59,840
correct 64-bit

506
00:23:59,840 --> 00:24:03,919
version anti-api to finish our behavior

507
00:24:03,919 --> 00:24:04,640
and

508
00:24:04,640 --> 00:24:07,440
however after reversing engineering we

509
00:24:07,440 --> 00:24:07,840
have

510
00:24:07,840 --> 00:24:10,799
new there is a translator function just

511
00:24:10,799 --> 00:24:11,679
inside

512
00:24:11,679 --> 00:24:15,120
of inside list wow 64

513
00:24:15,120 --> 00:24:18,720
layer so actually this

514
00:24:18,720 --> 00:24:22,080
translator function then wall 64 system

515
00:24:22,080 --> 00:24:23,279
service ex

516
00:24:23,279 --> 00:24:26,320
that is made by microsoft and

517
00:24:26,320 --> 00:24:29,600
stable enough and easy to use so here's

518
00:24:29,600 --> 00:24:31,440
a cool idea

519
00:24:31,440 --> 00:24:35,360
and this cool idea is we if we can

520
00:24:35,360 --> 00:24:39,039
look at this translator function

521
00:24:39,039 --> 00:24:42,960
and actually we can send our 32-bit

522
00:24:42,960 --> 00:24:46,080
cisco to it directly

523
00:24:46,080 --> 00:24:49,840
and in this poc wow grill i use a

524
00:24:49,840 --> 00:24:51,440
windows share call trick

525
00:24:51,440 --> 00:24:54,480
to locate list translator function

526
00:24:54,480 --> 00:24:57,919
in 64 bit and send

527
00:24:57,919 --> 00:25:02,480
our cisco request to it directly

528
00:25:02,480 --> 00:25:05,039
and actually we don't read we don't need

529
00:25:05,039 --> 00:25:05,919
to use

530
00:25:05,919 --> 00:25:08,799
the all the paths might be checked by

531
00:25:08,799 --> 00:25:10,240
the antivirus

532
00:25:10,240 --> 00:25:13,760
so here is a simple demo and

533
00:25:13,760 --> 00:25:17,039
this this demo is totally

534
00:25:17,039 --> 00:25:19,840
open source project for you guys to test

535
00:25:19,840 --> 00:25:20,799
here

536
00:25:20,799 --> 00:25:23,840
and here's an easy demo for

537
00:25:23,840 --> 00:25:27,120
for here and you can see

538
00:25:27,120 --> 00:25:31,200
and i install a antivirus here

539
00:25:31,200 --> 00:25:34,720
and i update it to the lattice

540
00:25:34,720 --> 00:25:38,320
and in a protection i have enabled heaps

541
00:25:38,320 --> 00:25:39,679
potential

542
00:25:39,679 --> 00:25:43,279
and real-time files again position is em

543
00:25:43,279 --> 00:25:47,600
is enable two and first i use a typical

544
00:25:47,600 --> 00:25:50,480
malware behavior process inject process

545
00:25:50,480 --> 00:25:51,440
following

546
00:25:51,440 --> 00:25:54,480
is wrong pe and you can see these

547
00:25:54,480 --> 00:25:57,360
anti-virus can detect it directly and

548
00:25:57,360 --> 00:25:58,320
remove

549
00:25:58,320 --> 00:26:02,320
this malware file but if i change

550
00:26:02,320 --> 00:26:05,520
the loads windows api inside

551
00:26:05,520 --> 00:26:09,279
the rom pe then you can see

552
00:26:09,279 --> 00:26:12,400
i use this kind of new trick

553
00:26:12,400 --> 00:26:15,840
wow grill and try to make

554
00:26:15,840 --> 00:26:18,960
our picabo exe file

555
00:26:18,960 --> 00:26:22,960
be processing ingestion into calculator

556
00:26:22,960 --> 00:26:26,559
exe file and you can see here our

557
00:26:26,559 --> 00:26:30,000
process following is successful

558
00:26:30,000 --> 00:26:33,760
we can ingestion our malware file into

559
00:26:33,760 --> 00:26:38,000
system program and the antivirus

560
00:26:38,000 --> 00:26:41,440
now able to detect it

561
00:26:41,440 --> 00:26:44,960
so it's a first first demo here

562
00:26:44,960 --> 00:26:53,600
let's talk about the next one

563
00:26:53,600 --> 00:26:56,640
and the final poc i call it wow

564
00:26:56,640 --> 00:26:59,919
injector and that is also an

565
00:26:59,919 --> 00:27:03,039
injection trick but the difference is

566
00:27:03,039 --> 00:27:06,559
it didn't bypass the hooks installed by

567
00:27:06,559 --> 00:27:10,559
antivirus but not able to be detected

568
00:27:10,559 --> 00:27:11,760
too

569
00:27:11,760 --> 00:27:15,120
and this workflow we just talked about

570
00:27:15,120 --> 00:27:18,559
before and that is a full execution flow

571
00:27:18,559 --> 00:27:19,440
from

572
00:27:19,440 --> 00:27:22,880
bit to 64 bit and back to

573
00:27:22,880 --> 00:27:25,919
32 bit again

574
00:27:25,919 --> 00:27:29,039
and but here in here the interesting

575
00:27:29,039 --> 00:27:30,080
thing is

576
00:27:30,080 --> 00:27:33,360
the threat running from running from 32

577
00:27:33,360 --> 00:27:34,080
bit to

578
00:27:34,080 --> 00:27:37,840
64 bit it was saved as knee shot

579
00:27:37,840 --> 00:27:41,679
on the adjust of register r13

580
00:27:41,679 --> 00:27:45,120
and the address is also recorded

581
00:27:45,120 --> 00:27:48,320
unless 64-bit version of

582
00:27:48,320 --> 00:27:51,360
teb block and

583
00:27:51,360 --> 00:27:55,279
after 32-bit interrupt get finished

584
00:27:55,279 --> 00:27:58,320
the thread will fetch the snare shaft

585
00:27:58,320 --> 00:28:01,440
from the regis r13

586
00:28:01,440 --> 00:28:05,039
and become bad to the previous

587
00:28:05,039 --> 00:28:08,320
threat status and continue running

588
00:28:08,320 --> 00:28:12,080
a 32-bit program

589
00:28:12,080 --> 00:28:15,279
so let's if we can leak the address

590
00:28:15,279 --> 00:28:18,559
of the snail shop and we can we can

591
00:28:18,559 --> 00:28:20,559
write the scenario of 2

592
00:28:20,559 --> 00:28:24,480
and we can also change the next

593
00:28:24,480 --> 00:28:27,679
return address to a new destination

594
00:28:27,679 --> 00:28:31,039
for example we can change it to a new

595
00:28:31,039 --> 00:28:35,279
destination like share code so

596
00:28:35,279 --> 00:28:38,559
we have sele snail shop is recalled

597
00:28:38,559 --> 00:28:41,840
on a 60 64-bit

598
00:28:41,840 --> 00:28:45,120
version of tb block right so

599
00:28:45,120 --> 00:28:48,480
the luckily things is when the

600
00:28:48,480 --> 00:28:52,159
while 64 process is created during the

601
00:28:52,159 --> 00:28:53,360
kernel function

602
00:28:53,360 --> 00:28:56,799
mi create peb or tb

603
00:28:56,799 --> 00:28:59,520
this function will allocate a large

604
00:28:59,520 --> 00:29:00,240
memory

605
00:29:00,240 --> 00:29:03,279
and divided it into

606
00:29:03,279 --> 00:29:07,320
four block teb60 64

607
00:29:07,320 --> 00:29:10,720
teb-32 and pb64

608
00:29:10,720 --> 00:29:14,080
and pb32 so let

609
00:29:14,080 --> 00:29:18,399
if we can leak one of the four block

610
00:29:18,399 --> 00:29:21,600
and the address of the other

611
00:29:21,600 --> 00:29:24,840
three block also predictable too

612
00:29:24,840 --> 00:29:27,760
so if we can leak

613
00:29:27,760 --> 00:29:30,880
adjust of 64 bit

614
00:29:30,880 --> 00:29:34,240
tb block and we can also

615
00:29:34,240 --> 00:29:37,679
get the adjust of snatch up two

616
00:29:37,679 --> 00:29:41,120
so here is a final demo here i call it

617
00:29:41,120 --> 00:29:44,799
wow injector and here is the

618
00:29:44,799 --> 00:29:47,840
here is a link to the github here let's

619
00:29:47,840 --> 00:29:50,559
see the demo

620
00:29:50,559 --> 00:29:52,879
and

621
00:29:53,600 --> 00:29:57,440
here is the demo of wow injector and

622
00:29:57,440 --> 00:30:00,640
here you can see is the

623
00:30:00,640 --> 00:30:04,640
lattice windows version and

624
00:30:04,640 --> 00:30:08,159
i update it to the last version of

625
00:30:08,159 --> 00:30:12,640
anti-malway and

626
00:30:15,679 --> 00:30:18,320
it will need to take some time and

627
00:30:18,320 --> 00:30:20,399
install the final

628
00:30:20,399 --> 00:30:23,919
signature of my way and i check

629
00:30:23,919 --> 00:30:27,440
the the module of anti-malware

630
00:30:27,440 --> 00:30:32,320
is the lattice and

631
00:30:32,640 --> 00:30:37,440
here i enable four heaps potential

632
00:30:37,440 --> 00:30:40,799
on this victim and i try to use

633
00:30:40,799 --> 00:30:46,080
wget command to gather mimikai's my way

634
00:30:46,080 --> 00:30:49,679
drop it into this victim

635
00:30:49,679 --> 00:30:54,159
and you can see when i try to

636
00:30:54,159 --> 00:30:57,279
download a mimikai's malway into this

637
00:30:57,279 --> 00:30:58,720
victim

638
00:30:58,720 --> 00:31:04,880
and here

639
00:31:04,880 --> 00:31:07,919
and here you can see after i

640
00:31:07,919 --> 00:31:11,519
drop the malware mimikai's into this

641
00:31:11,519 --> 00:31:12,320
victim and

642
00:31:12,320 --> 00:31:16,399
execute it and you can see

643
00:31:16,399 --> 00:31:19,760
this anti-malware will detect

644
00:31:19,760 --> 00:31:25,440
it and remove it immediately

645
00:31:25,440 --> 00:31:29,519
and you can see if i try to use

646
00:31:29,519 --> 00:31:33,039
this kind of trick while injector

647
00:31:33,039 --> 00:31:36,279
to ingestion this

648
00:31:36,279 --> 00:31:40,000
msgbox exe file so you can see

649
00:31:40,000 --> 00:31:43,039
i use wow injector to do process

650
00:31:43,039 --> 00:31:44,240
hollowing

651
00:31:44,240 --> 00:31:47,120
i use this injector to do process

652
00:31:47,120 --> 00:31:48,320
following

653
00:31:48,320 --> 00:31:52,799
into the uh

654
00:31:52,799 --> 00:31:55,919
notepad exe file

655
00:31:55,919 --> 00:31:58,559
and you can see i can bypass the whole

656
00:31:58,559 --> 00:31:59,360
heaps

657
00:31:59,360 --> 00:32:03,039
potential and i ingestion

658
00:32:03,039 --> 00:32:06,320
this msgbox exe file into

659
00:32:06,320 --> 00:32:10,080
a notepad so i want to try if

660
00:32:10,080 --> 00:32:13,200
mimikai's malware will be detected

661
00:32:13,200 --> 00:32:16,559
but if i drop it from the network

662
00:32:16,559 --> 00:32:19,840
and ingestion it directly

663
00:32:19,840 --> 00:32:22,960
into a system program

664
00:32:22,960 --> 00:32:26,559
and you can see here and

665
00:32:26,559 --> 00:32:29,840
i use this kind of trick to ingestion it

666
00:32:29,840 --> 00:32:35,279
into a cmd exe file

667
00:32:41,440 --> 00:32:44,159
and here you can see uh basically

668
00:32:44,159 --> 00:32:46,960
mimikai's malware cannot be wrong on

669
00:32:46,960 --> 00:32:50,159
this antivirus victim but

670
00:32:50,159 --> 00:32:52,960
here if i try to use this kind of

671
00:32:52,960 --> 00:32:53,919
injection trick

672
00:32:53,919 --> 00:32:57,519
and mimika's payload injection

673
00:32:57,519 --> 00:33:02,080
it into the victim

674
00:33:02,080 --> 00:33:04,960
and you can see mimikaze is able to run

675
00:33:04,960 --> 00:33:05,519
and

676
00:33:05,519 --> 00:33:09,039
not to be detected on this victim

677
00:33:09,039 --> 00:33:12,240
totally bypass the anti-malware's hips

678
00:33:12,240 --> 00:33:14,320
potential

679
00:33:14,320 --> 00:33:17,918
so here's the final demo

680
00:33:20,960 --> 00:33:25,840
okay so

681
00:33:27,919 --> 00:33:30,799
if anyone get any question it's my

682
00:33:30,799 --> 00:33:32,240
pleasure to answer

683
00:33:32,240 --> 00:33:35,840
and contact me by mail or twitter

684
00:33:35,840 --> 00:33:39,840
or facebook thanks for listening

