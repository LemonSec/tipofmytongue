1
00:00:15,519 --> 00:00:16,480
hello

2
00:00:16,480 --> 00:00:19,119
this is sun myung in team punchline from

3
00:00:19,119 --> 00:00:20,400
south korea

4
00:00:20,400 --> 00:00:23,279
in this time i do presentation about

5
00:00:23,279 --> 00:00:24,880
client side.taken

6
00:00:24,880 --> 00:00:27,599
live streaming services using grid

7
00:00:27,599 --> 00:00:29,599
computing

8
00:00:29,599 --> 00:00:32,000
it was our project that we did for

9
00:00:32,000 --> 00:00:33,120
several months

10
00:00:33,120 --> 00:00:36,239
in 2020

11
00:00:37,920 --> 00:00:40,160
we are the member of best of the best in

12
00:00:40,160 --> 00:00:41,200
south korea

13
00:00:41,200 --> 00:00:44,000
we are interested in offensive security

14
00:00:44,000 --> 00:00:46,879
and volunteering

15
00:00:47,360 --> 00:00:49,680
grid computing is the method of using

16
00:00:49,680 --> 00:00:51,280
multiple computers

17
00:00:51,280 --> 00:00:53,840
these are distributed but connected by

18
00:00:53,840 --> 00:00:54,640
networks

19
00:00:54,640 --> 00:00:57,199
to work together to accomplish a big

20
00:00:57,199 --> 00:00:59,839
task

21
00:00:59,920 --> 00:01:02,000
grade competing is called by different

22
00:01:02,000 --> 00:01:04,799
names depending on the type of resources

23
00:01:04,799 --> 00:01:12,640
it shares and we focused on data grid

24
00:01:12,640 --> 00:01:15,200
their services using data grid computing

25
00:01:15,200 --> 00:01:17,600
are widely used in platforms that

26
00:01:17,600 --> 00:01:18,159
provide

27
00:01:18,159 --> 00:01:22,080
p2p based services

28
00:01:23,200 --> 00:01:25,759
among them we analyze the korean

29
00:01:25,759 --> 00:01:26,479
services

30
00:01:26,479 --> 00:01:29,280
of three live streaming platforms which

31
00:01:29,280 --> 00:01:31,040
were in high demand due to

32
00:01:31,040 --> 00:01:34,640
copied 19. live streaming services are

33
00:01:34,640 --> 00:01:37,600
also called anti-broadcasting in general

34
00:01:37,600 --> 00:01:40,479
and on live tv it is a service that

35
00:01:40,479 --> 00:01:42,880
allows anyone to broadcast their own

36
00:01:42,880 --> 00:01:44,000
content

37
00:01:44,000 --> 00:01:45,759
live streaming service platforms in

38
00:01:45,759 --> 00:01:47,200
korea are using

39
00:01:47,200 --> 00:01:50,320
technology called grid computing

40
00:01:50,320 --> 00:01:53,759
to serve ex to solve expensive network

41
00:01:53,759 --> 00:01:54,960
usage cost

42
00:01:54,960 --> 00:01:58,880
due to a large data drops

43
00:01:58,880 --> 00:02:01,360
grid computing generally refers to a

44
00:02:01,360 --> 00:02:03,280
parallel distributed computing

45
00:02:03,280 --> 00:02:04,640
technology

46
00:02:04,640 --> 00:02:06,960
in real time streaming service the

47
00:02:06,960 --> 00:02:08,959
service user computer is

48
00:02:08,959 --> 00:02:12,160
used to transmit data from a client

49
00:02:12,160 --> 00:02:14,640
to another client during the high

50
00:02:14,640 --> 00:02:15,840
quality broadcast

51
00:02:15,840 --> 00:02:18,959
transmission process

52
00:02:19,840 --> 00:02:22,560
the project was carried out on three

53
00:02:22,560 --> 00:02:25,280
target platforms in the following ways

54
00:02:25,280 --> 00:02:28,400
first of all the test environment was

55
00:02:28,400 --> 00:02:29,520
configured to

56
00:02:29,520 --> 00:02:33,440
avoid damage to other clients or servers

57
00:02:33,440 --> 00:02:36,800
and later the project was carried out

58
00:02:36,800 --> 00:02:39,920
through process execution flow analysis

59
00:02:39,920 --> 00:02:42,480
data protocol analysis and data

60
00:02:42,480 --> 00:02:43,599
modulation

61
00:02:43,599 --> 00:02:48,560
code analysis and crash analysis

62
00:02:49,440 --> 00:02:52,319
these are uh hard things we got on

63
00:02:52,319 --> 00:02:53,200
analysis

64
00:02:53,200 --> 00:02:56,319
unlike general programs it was difficult

65
00:02:56,319 --> 00:02:58,720
to analyze because various elements

66
00:02:58,720 --> 00:03:02,159
such as web browser if github file

67
00:03:02,159 --> 00:03:05,280
network package will interrupt in

68
00:03:05,280 --> 00:03:06,239
addition

69
00:03:06,239 --> 00:03:09,360
there were anti-debug issues including

70
00:03:09,360 --> 00:03:11,040
dominar protector

71
00:03:11,040 --> 00:03:13,840
but we could overcome it by using radar

72
00:03:13,840 --> 00:03:15,040
for the hooking

73
00:03:15,040 --> 00:03:17,840
and writing automation code using memory

74
00:03:17,840 --> 00:03:20,080
dom

75
00:03:20,640 --> 00:03:23,680
the core program used for grid computing

76
00:03:23,680 --> 00:03:24,080
was

77
00:03:24,080 --> 00:03:27,360
protected by www.protector so it was

78
00:03:27,360 --> 00:03:29,760
impossible to see the source code using

79
00:03:29,760 --> 00:03:30,799
binary ninja

80
00:03:30,799 --> 00:03:34,720
or ida where to solve this problem

81
00:03:34,720 --> 00:03:37,040
we first compact this binary to a

82
00:03:37,040 --> 00:03:38,879
redouble level

83
00:03:38,879 --> 00:03:42,799
using early debug script

84
00:03:42,799 --> 00:03:46,319
also after bypassing the anti-default

85
00:03:46,319 --> 00:03:47,040
techniques

86
00:03:47,040 --> 00:03:50,080
and the analysis was conducted

87
00:03:50,080 --> 00:03:53,439
through memory dump and

88
00:03:53,439 --> 00:03:57,040
in the case of binaries protected in

89
00:03:57,040 --> 00:03:58,080
windows

90
00:03:58,080 --> 00:04:01,519
are not protected by anything the case

91
00:04:01,519 --> 00:04:02,879
of the mac

92
00:04:02,879 --> 00:04:04,959
so we could decompile it and then we

93
00:04:04,959 --> 00:04:06,159
could analyze more

94
00:04:06,159 --> 00:04:09,519
easily now

95
00:04:09,519 --> 00:04:12,000
let me explain the behavioral structure

96
00:04:12,000 --> 00:04:13,200
of the binaries

97
00:04:13,200 --> 00:04:16,639
used for the grid when watching a

98
00:04:16,639 --> 00:04:17,358
broadcast

99
00:04:17,358 --> 00:04:19,680
the manager program that runs in the

100
00:04:19,680 --> 00:04:20,399
background

101
00:04:20,399 --> 00:04:23,520
or executed by a browser extension

102
00:04:23,520 --> 00:04:26,639
also executes the updater and the

103
00:04:26,639 --> 00:04:29,199
updater checks the version of the

104
00:04:29,199 --> 00:04:32,880
local file before updating after that

105
00:04:32,880 --> 00:04:35,680
the updaters launch another program for

106
00:04:35,680 --> 00:04:37,360
video data communication

107
00:04:37,360 --> 00:04:42,880
it is called stream up

108
00:04:42,880 --> 00:04:45,440
uh the streamer excluded in this way

109
00:04:45,440 --> 00:04:45,919
first

110
00:04:45,919 --> 00:04:49,199
communicates with the main server and

111
00:04:49,199 --> 00:04:52,880
receives the ip and port number of the

112
00:04:52,880 --> 00:04:53,520
client

113
00:04:53,520 --> 00:04:57,600
it will connect to from the server

114
00:04:57,600 --> 00:04:59,919
with this information the streamer

115
00:04:59,919 --> 00:05:02,320
performs p2p communication and

116
00:05:02,320 --> 00:05:05,520
sends and receive video data

117
00:05:05,520 --> 00:05:09,360
this data is passed to web browser and

118
00:05:09,360 --> 00:05:10,720
application

119
00:05:10,720 --> 00:05:15,039
included and made available for watching

120
00:05:16,880 --> 00:05:20,000
when a streamer sends and receive data

121
00:05:20,000 --> 00:05:20,479
through

122
00:05:20,479 --> 00:05:23,280
socket communication between clients the

123
00:05:23,280 --> 00:05:24,000
relationship

124
00:05:24,000 --> 00:05:27,039
between the users is largely classified

125
00:05:27,039 --> 00:05:27,680
into

126
00:05:27,680 --> 00:05:30,960
two types as follows

127
00:05:31,360 --> 00:05:33,840
the three structure grid is in the form

128
00:05:33,840 --> 00:05:35,039
of a tree

129
00:05:35,039 --> 00:05:38,080
of data structure and data is

130
00:05:38,080 --> 00:05:41,919
exchanged between clients

131
00:05:42,320 --> 00:05:45,280
the mesh based grid structure has a form

132
00:05:45,280 --> 00:05:46,080
in which

133
00:05:46,080 --> 00:05:49,199
the server transmits data to clients in

134
00:05:49,199 --> 00:05:50,800
a group

135
00:05:50,800 --> 00:05:53,520
and then each other in the group send

136
00:05:53,520 --> 00:05:55,600
and receive video data

137
00:05:55,600 --> 00:05:58,880
company a and company b are using three

138
00:05:58,880 --> 00:05:59,440
based

139
00:05:59,440 --> 00:06:02,400
structure and component c is using mesh

140
00:06:02,400 --> 00:06:02,880
based

141
00:06:02,880 --> 00:06:07,440
grid structure

142
00:06:07,440 --> 00:06:09,840
from this process structure we want to

143
00:06:09,840 --> 00:06:11,199
suggest that

144
00:06:11,199 --> 00:06:14,400
hotel surfaces

145
00:06:15,520 --> 00:06:17,440
although all three platforms are

146
00:06:17,440 --> 00:06:19,759
different we are able to find the

147
00:06:19,759 --> 00:06:21,840
variety of vulnerabilities

148
00:06:21,840 --> 00:06:25,919
from a common attack surface

149
00:06:26,400 --> 00:06:29,039
through analysis of software of company

150
00:06:29,039 --> 00:06:30,240
a

151
00:06:30,240 --> 00:06:32,840
we could find vulnerability in three

152
00:06:32,840 --> 00:06:34,960
surfaces especially

153
00:06:34,960 --> 00:06:37,759
request data is now applicable to

154
00:06:37,759 --> 00:06:38,960
company a

155
00:06:38,960 --> 00:06:41,360
company a is using three base degree to

156
00:06:41,360 --> 00:06:43,520
structural state

157
00:06:43,520 --> 00:06:45,840
and it doesn't need to transmit because

158
00:06:45,840 --> 00:06:47,360
data structurally

159
00:06:47,360 --> 00:06:50,479
because it unitarily transmits data

160
00:06:50,479 --> 00:06:54,960
from the parent node to the child node

161
00:06:56,240 --> 00:06:58,960
as a result of analyzing company b we

162
00:06:58,960 --> 00:06:59,680
could find

163
00:06:59,680 --> 00:07:02,400
several vulnerabilities on two or text

164
00:07:02,400 --> 00:07:05,120
surfaces

165
00:07:05,120 --> 00:07:08,080
and then last one uh result analyzing

166
00:07:08,080 --> 00:07:09,039
company c

167
00:07:09,039 --> 00:07:11,280
we found some vulnerabilities on four

168
00:07:11,280 --> 00:07:12,720
texture places

169
00:07:12,720 --> 00:07:15,199
especially we found a way to downgrade

170
00:07:15,199 --> 00:07:18,240
to the previous version of update file

171
00:07:18,240 --> 00:07:23,199
including this we found in our surfaces

172
00:07:23,759 --> 00:07:27,199
now let me explain the text effects we

173
00:07:27,199 --> 00:07:28,240
have suggested

174
00:07:28,240 --> 00:07:31,840
one by one

175
00:07:32,720 --> 00:07:35,440
this is the first texture phase it

176
00:07:35,440 --> 00:07:36,720
occurs by the

177
00:07:36,720 --> 00:07:39,919
user software streamify

178
00:07:39,919 --> 00:07:41,840
communicates with domain server

179
00:07:41,840 --> 00:07:44,240
streamify communicates with the main

180
00:07:44,240 --> 00:07:44,800
server

181
00:07:44,800 --> 00:07:48,160
such as transmitting ram availability or

182
00:07:48,160 --> 00:07:51,599
receiving pr list to be connected

183
00:07:51,599 --> 00:07:54,639
this is also the first thing to do in

184
00:07:54,639 --> 00:07:56,319
the whole process

185
00:07:56,319 --> 00:07:58,560
information leakage occurs during this

186
00:07:58,560 --> 00:08:01,680
communication process

187
00:08:02,879 --> 00:08:05,440
although the analysis can be found in

188
00:08:05,440 --> 00:08:06,800
this table

189
00:08:06,800 --> 00:08:09,440
through pec analysis we found only one

190
00:08:09,440 --> 00:08:10,319
vulnerability

191
00:08:10,319 --> 00:08:14,560
in company c in this surface

192
00:08:15,120 --> 00:08:17,680
in the case of company c the server

193
00:08:17,680 --> 00:08:20,400
transmission of private ip to establish

194
00:08:20,400 --> 00:08:21,360
a connection

195
00:08:21,360 --> 00:08:24,319
to clients in the same network at this

196
00:08:24,319 --> 00:08:25,759
time

197
00:08:25,759 --> 00:08:28,319
since private ip is transmitted even

198
00:08:28,319 --> 00:08:30,479
when not in the same network

199
00:08:30,479 --> 00:08:33,039
unnecessary information is transmitted

200
00:08:33,039 --> 00:08:34,799
from the server

201
00:08:34,799 --> 00:08:37,440
since this is unnecessary information

202
00:08:37,440 --> 00:08:38,000
that

203
00:08:38,000 --> 00:08:41,200
can identify an individual it is an

204
00:08:41,200 --> 00:08:43,039
information leakage

205
00:08:43,039 --> 00:08:46,000
in fact we could get a total of 70 ip

206
00:08:46,000 --> 00:08:46,720
information

207
00:08:46,720 --> 00:08:50,480
in 2 hours from a broadcast is about 2

208
00:08:50,480 --> 00:08:54,399
000 years

209
00:08:54,399 --> 00:08:57,680
our next object surface is

210
00:08:57,680 --> 00:09:00,800
the communication section with the

211
00:09:00,800 --> 00:09:04,080
update server all three platforms have

212
00:09:04,080 --> 00:09:05,200
the same flow

213
00:09:05,200 --> 00:09:08,320
process and they communicate with the

214
00:09:08,320 --> 00:09:11,440
updates solver using an update file

215
00:09:11,440 --> 00:09:14,640
at this time if the victim and

216
00:09:14,640 --> 00:09:16,880
the attacker are on the same network

217
00:09:16,880 --> 00:09:22,080
article can use dso text surface

218
00:09:22,080 --> 00:09:25,560
as a result of the arrashes

219
00:09:25,560 --> 00:09:27,920
vulnerabilities were found on two

220
00:09:27,920 --> 00:09:29,120
platforms

221
00:09:29,120 --> 00:09:32,000
when one client wants to watch the

222
00:09:32,000 --> 00:09:33,279
broadcast

223
00:09:33,279 --> 00:09:35,120
the update file is automatically

224
00:09:35,120 --> 00:09:36,800
executed to check

225
00:09:36,800 --> 00:09:40,240
whether or not it is updated an attacker

226
00:09:40,240 --> 00:09:41,839
can force measures called

227
00:09:41,839 --> 00:09:45,760
to execute by tampering with delta phi

228
00:09:45,760 --> 00:09:50,560
through dns spring

229
00:09:50,560 --> 00:09:53,760
this slide shows the detail of

230
00:09:53,760 --> 00:09:58,080
update file tempering on company a

231
00:09:58,080 --> 00:10:00,959
album figures are the code that update

232
00:10:00,959 --> 00:10:04,160
process exclusive another process there

233
00:10:04,160 --> 00:10:06,640
are no verification routine before virus

234
00:10:06,640 --> 00:10:09,439
questionnaire sd

235
00:10:10,560 --> 00:10:13,920
so we could temper delta file by dns

236
00:10:13,920 --> 00:10:14,560
spoofing

237
00:10:14,560 --> 00:10:18,959
and limit called execution as root

238
00:10:21,490 --> 00:10:24,669
[Music]

239
00:10:27,930 --> 00:10:30,839
[Music]

240
00:10:30,839 --> 00:10:33,839
foreign

241
00:10:38,640 --> 00:10:41,760
next is compensate a live figure is the

242
00:10:41,760 --> 00:10:42,399
code that

243
00:10:42,399 --> 00:10:45,519
check the file signature therefore we

244
00:10:45,519 --> 00:10:46,560
can

245
00:10:46,560 --> 00:10:50,079
tamper or update file to arbitrary file

246
00:10:50,079 --> 00:10:52,959
but we can still downgrade it to

247
00:10:52,959 --> 00:10:54,720
previous version of it

248
00:10:54,720 --> 00:10:57,360
because previous version 5 also use very

249
00:10:57,360 --> 00:10:59,600
despised signature

250
00:10:59,600 --> 00:11:01,839
if there are some vulnerabilities in

251
00:11:01,839 --> 00:11:03,360
earlier version of it

252
00:11:03,360 --> 00:11:07,920
this vulnerability will be useful

253
00:11:08,560 --> 00:11:12,959
next is occurs in the process

254
00:11:12,959 --> 00:11:16,079
of communication between clients in

255
00:11:16,079 --> 00:11:18,320
order to send and receive data between

256
00:11:18,320 --> 00:11:19,120
clients

257
00:11:19,120 --> 00:11:22,320
various data is sent and received after

258
00:11:22,320 --> 00:11:23,440
socket connection

259
00:11:23,440 --> 00:11:26,720
for establishment the first of them

260
00:11:26,720 --> 00:11:30,880
the initial data will be explained

261
00:11:31,200 --> 00:11:33,519
the initial data is for connection

262
00:11:33,519 --> 00:11:35,519
during peer-to-peer

263
00:11:35,519 --> 00:11:38,959
communication between clients we could

264
00:11:38,959 --> 00:11:39,440
find

265
00:11:39,440 --> 00:11:43,519
five vulnerabilities about this space

266
00:11:43,519 --> 00:11:47,279
in all platforms we analyze the initial

267
00:11:47,279 --> 00:11:48,880
data after the

268
00:11:48,880 --> 00:11:52,000
connection process

269
00:11:52,079 --> 00:11:55,120
as a result the scaling video a hip

270
00:11:55,120 --> 00:11:56,000
overflow

271
00:11:56,000 --> 00:11:59,600
denial of service were found

272
00:12:01,440 --> 00:12:04,240
in the case of company a the initial

273
00:12:04,240 --> 00:12:05,920
data is authenticated

274
00:12:05,920 --> 00:12:10,399
after p2p connection at normal flow

275
00:12:10,399 --> 00:12:13,760
and the video data is received in this

276
00:12:13,760 --> 00:12:14,480
process

277
00:12:14,480 --> 00:12:17,839
we notice that only the initial data is

278
00:12:17,839 --> 00:12:20,800
an authentication process that can

279
00:12:20,800 --> 00:12:21,519
receive

280
00:12:21,519 --> 00:12:25,040
video data found vulnerabilities that

281
00:12:25,040 --> 00:12:27,440
allow an attacker who is not

282
00:12:27,440 --> 00:12:28,480
participating

283
00:12:28,480 --> 00:12:31,600
in the channel to send initial date

284
00:12:31,600 --> 00:12:35,600
to the client in the channel forcing

285
00:12:35,600 --> 00:12:39,839
the data to be hijacked

286
00:12:40,000 --> 00:12:43,360
this is meaningful in that unauthorized

287
00:12:43,360 --> 00:12:46,160
data such as private channel channel

288
00:12:46,160 --> 00:12:47,680
parallels

289
00:12:47,680 --> 00:12:50,800
and paid lecture

290
00:12:50,959 --> 00:12:53,680
that are not disclosed to people can

291
00:12:53,680 --> 00:12:55,360
also be stolen

292
00:12:55,360 --> 00:12:57,760
it can also lead to personal information

293
00:12:57,760 --> 00:12:58,959
regarding that

294
00:12:58,959 --> 00:13:01,760
it can correct certain people's watching

295
00:13:01,760 --> 00:13:04,240
history

296
00:13:05,600 --> 00:13:08,240
i will load that code using python like

297
00:13:08,240 --> 00:13:10,480
that

298
00:13:12,240 --> 00:13:14,880
through this demo video you can see the

299
00:13:14,880 --> 00:13:15,600
process

300
00:13:15,600 --> 00:13:21,839
of the video being hijacked

301
00:13:44,959 --> 00:13:49,839
i did

302
00:13:49,839 --> 00:13:51,920
we could find the same valuability in

303
00:13:51,920 --> 00:13:53,120
company b

304
00:13:53,120 --> 00:13:57,040
a data needs to be sent three times

305
00:13:57,040 --> 00:13:59,279
to be authenticated and for stealing

306
00:13:59,279 --> 00:14:01,040
video data

307
00:14:01,040 --> 00:14:03,519
it initially transmits the channel id

308
00:14:03,519 --> 00:14:05,760
given to the channel

309
00:14:05,760 --> 00:14:08,320
it then receives the first sequence and

310
00:14:08,320 --> 00:14:08,880
the last

311
00:14:08,880 --> 00:14:12,800
sequence from the receiving client

312
00:14:12,800 --> 00:14:15,839
if we set the sequence in between we

313
00:14:15,839 --> 00:14:18,480
could receive the video data from the

314
00:14:18,480 --> 00:14:20,959
sequence

315
00:14:21,760 --> 00:14:24,399
in addition in company b we could find

316
00:14:24,399 --> 00:14:25,760
heap of flow

317
00:14:25,760 --> 00:14:28,800
due to data length modulation the

318
00:14:28,800 --> 00:14:30,800
response data for

319
00:14:30,800 --> 00:14:33,600
the initial data included the data

320
00:14:33,600 --> 00:14:35,760
length value

321
00:14:35,760 --> 00:14:38,959
if the attacker receives the initial

322
00:14:38,959 --> 00:14:40,560
data from the victim

323
00:14:40,560 --> 00:14:42,839
and modulates the lens value when

324
00:14:42,839 --> 00:14:44,000
responding

325
00:14:44,000 --> 00:14:46,160
there is no rooting for check about the

326
00:14:46,160 --> 00:14:47,120
length value

327
00:14:47,120 --> 00:14:50,880
so it is passed as an argument of the

328
00:14:50,880 --> 00:14:55,839
member function and the heap of overflow

329
00:14:56,839 --> 00:14:58,399
occurs

330
00:14:58,399 --> 00:15:01,440
next is those vulnerability due to

331
00:15:01,440 --> 00:15:05,440
the initial data modulation in company c

332
00:15:05,440 --> 00:15:07,680
in the case of competency the ticket

333
00:15:07,680 --> 00:15:09,519
information is transmitted to

334
00:15:09,519 --> 00:15:12,560
check the client is normal user for

335
00:15:12,560 --> 00:15:14,320
service at the beginning of the

336
00:15:14,320 --> 00:15:15,760
connection

337
00:15:15,760 --> 00:15:18,240
at this time when the length header of

338
00:15:18,240 --> 00:15:19,920
the ticket is tempered

339
00:15:19,920 --> 00:15:22,800
it is larger than the length defined in

340
00:15:22,800 --> 00:15:23,279
the

341
00:15:23,279 --> 00:15:26,160
calculated structure and process to a

342
00:15:26,160 --> 00:15:29,600
different french statement

343
00:15:30,079 --> 00:15:33,199
afterwards the process was terminated

344
00:15:33,199 --> 00:15:34,160
with an

345
00:15:34,160 --> 00:15:37,120
error message which allowed a denial of

346
00:15:37,120 --> 00:15:40,959
service attack

347
00:15:40,959 --> 00:15:43,759
this is a denial of service attack at

348
00:15:43,759 --> 00:15:46,480
company c

349
00:15:48,240 --> 00:15:54,000
okay next surfaces

350
00:15:54,000 --> 00:15:56,399
likewise it occurs in the process of

351
00:15:56,399 --> 00:15:58,639
communication between clients

352
00:15:58,639 --> 00:16:01,600
clients request other clients for

353
00:16:01,600 --> 00:16:02,959
necessary data

354
00:16:02,959 --> 00:16:07,199
and this data is called request data

355
00:16:07,199 --> 00:16:10,000
company a is not only covered in this

356
00:16:10,000 --> 00:16:10,800
section

357
00:16:10,800 --> 00:16:13,600
because the video data is unitarily

358
00:16:13,600 --> 00:16:15,519
passed to the child node

359
00:16:15,519 --> 00:16:18,399
there is no need to request video data

360
00:16:18,399 --> 00:16:23,199
from other clients

361
00:16:23,199 --> 00:16:25,600
in this section we were only able to

362
00:16:25,600 --> 00:16:28,240
find vulnerabilities in conveniency

363
00:16:28,240 --> 00:16:30,800
basically we could induce denial of

364
00:16:30,800 --> 00:16:32,000
service attack

365
00:16:32,000 --> 00:16:35,839
in windows 10. the details of this

366
00:16:35,839 --> 00:16:38,160
attack will be explained in the next

367
00:16:38,160 --> 00:16:40,560
slide

368
00:16:41,600 --> 00:16:44,720
when client receives a request packet

369
00:16:44,720 --> 00:16:47,279
a stream of process passes the packet

370
00:16:47,279 --> 00:16:49,199
like this figure

371
00:16:49,199 --> 00:16:52,079
you first process the one byte data

372
00:16:52,079 --> 00:16:54,240
which is the number of requests

373
00:16:54,240 --> 00:16:57,839
usually uh the value of this builder is

374
00:16:57,839 --> 00:16:58,720
one

375
00:16:58,720 --> 00:17:01,600
then it passes the four bytes data which

376
00:17:01,600 --> 00:17:02,720
is video

377
00:17:02,720 --> 00:17:07,119
class number however if we alter

378
00:17:07,119 --> 00:17:10,720
the request number field it overlays the

379
00:17:10,720 --> 00:17:13,599
packet and the process terminates based

380
00:17:13,599 --> 00:17:14,480
on

381
00:17:14,480 --> 00:17:19,760
with the error message

382
00:17:19,760 --> 00:17:23,119
okay this is

383
00:17:23,119 --> 00:17:26,559
victim's screen you can see that it is

384
00:17:26,559 --> 00:17:28,400
connected with other clients

385
00:17:28,400 --> 00:17:33,840
and this is attacker screen

386
00:17:36,480 --> 00:17:39,039
like that this part of it can cause a

387
00:17:39,039 --> 00:17:39,840
denial of

388
00:17:39,840 --> 00:17:42,240
service

389
00:17:43,440 --> 00:17:46,390
you can see

390
00:17:46,390 --> 00:17:48,320
[Music]

391
00:17:48,320 --> 00:17:53,120
okay next is about the video data

392
00:17:53,120 --> 00:17:55,200
in this section we could find many

393
00:17:55,200 --> 00:17:56,480
valuations for

394
00:17:56,480 --> 00:18:01,360
all platforms

395
00:18:01,360 --> 00:18:04,160
we analyze the video data so we could

396
00:18:04,160 --> 00:18:04,559
find

397
00:18:04,559 --> 00:18:07,280
heap overflow that occurs in all

398
00:18:07,280 --> 00:18:08,160
environments

399
00:18:08,160 --> 00:18:11,840
except android we also found a pro

400
00:18:11,840 --> 00:18:14,080
pilot broadcasting vulnerability that

401
00:18:14,080 --> 00:18:16,480
could allow screen tempering and

402
00:18:16,480 --> 00:18:20,000
full control of other user screen

403
00:18:20,000 --> 00:18:22,720
in the case of screen modulation and

404
00:18:22,720 --> 00:18:25,679
pilot broadcasting vulnerabilities

405
00:18:25,679 --> 00:18:28,880
it is caused by big data integrity

406
00:18:28,880 --> 00:18:31,679
purification

407
00:18:34,240 --> 00:18:36,880
heap overflow in company a as a result

408
00:18:36,880 --> 00:18:38,480
of protocol lashes

409
00:18:38,480 --> 00:18:41,840
there is a 16 byte header containing the

410
00:18:41,840 --> 00:18:42,799
data lensing

411
00:18:42,799 --> 00:18:46,080
or video data at this time if the lens

412
00:18:46,080 --> 00:18:47,760
value is altered and

413
00:18:47,760 --> 00:18:50,080
transmitted to clients there is no

414
00:18:50,080 --> 00:18:51,120
waiting for check

415
00:18:51,120 --> 00:18:54,240
the lens value as shown in the code

416
00:18:54,240 --> 00:18:57,039
and the heap of flow occurs in the main

417
00:18:57,039 --> 00:18:57,760
copy

418
00:18:57,760 --> 00:19:00,799
function this probability

419
00:19:00,799 --> 00:19:04,000
occurs in both mac

420
00:19:04,000 --> 00:19:11,840
windows and ios

421
00:19:21,440 --> 00:19:24,000
next in component a we could find a

422
00:19:24,000 --> 00:19:26,320
valuability that could limitly change

423
00:19:26,320 --> 00:19:26,960
video

424
00:19:26,960 --> 00:19:30,640
of other clients or it is caused by

425
00:19:30,640 --> 00:19:33,679
big data integrated verification

426
00:19:33,679 --> 00:19:35,919
in usual case clients who want to watch

427
00:19:35,919 --> 00:19:37,600
broadcaster a

428
00:19:37,600 --> 00:19:40,960
can you see can watch

429
00:19:40,960 --> 00:19:43,760
it because other client who is in higher

430
00:19:43,760 --> 00:19:46,960
hierarchy sandy

431
00:19:48,480 --> 00:19:51,280
and then the pilot broadcasting case by

432
00:19:51,280 --> 00:19:52,000
hooking the

433
00:19:52,000 --> 00:19:55,200
send and receive function with brita

434
00:19:55,200 --> 00:19:58,160
the attacker could drop all the original

435
00:19:58,160 --> 00:20:00,559
video data ends and

436
00:20:00,559 --> 00:20:03,280
the another video data to change the

437
00:20:03,280 --> 00:20:03,840
video

438
00:20:03,840 --> 00:20:07,280
and voice of other clients since the

439
00:20:07,280 --> 00:20:09,760
attacker can relay broadcast b

440
00:20:09,760 --> 00:20:12,960
attacker can force the victim to watch

441
00:20:12,960 --> 00:20:20,400
any video or thicker ones like that

442
00:20:20,400 --> 00:20:22,320
uh this video is about pilot

443
00:20:22,320 --> 00:20:25,120
broadcasting company a

444
00:20:25,120 --> 00:20:28,240
the left screen is victim's screen and

445
00:20:28,240 --> 00:20:30,480
right side is attackers one

446
00:20:30,480 --> 00:20:33,120
you can see the victim screen is changed

447
00:20:33,120 --> 00:20:33,760
the

448
00:20:33,760 --> 00:20:38,879
one though no one controlling

449
00:20:39,720 --> 00:20:42,839
[Music]

450
00:20:45,220 --> 00:20:46,840
[Applause]

451
00:20:46,840 --> 00:20:48,070
okay

452
00:20:48,070 --> 00:20:53,669
[Music]

453
00:20:54,400 --> 00:20:57,120
grid executive file of company b

454
00:20:57,120 --> 00:21:00,480
processes the video data received from

455
00:21:00,480 --> 00:21:03,280
other clients and sends it to the

456
00:21:03,280 --> 00:21:05,039
browser

457
00:21:05,039 --> 00:21:07,760
when the dummy data with video data is

458
00:21:07,760 --> 00:21:08,799
sent

459
00:21:08,799 --> 00:21:11,520
the receiving client to send it to the

460
00:21:11,520 --> 00:21:12,000
browser

461
00:21:12,000 --> 00:21:15,440
after processing the data

462
00:21:15,520 --> 00:21:17,760
in this case the video is stopped

463
00:21:17,760 --> 00:21:19,360
limited because

464
00:21:19,360 --> 00:21:22,000
there is a problem with the process of

465
00:21:22,000 --> 00:21:24,000
sending data

466
00:21:24,000 --> 00:21:26,799
to the browser

467
00:21:28,640 --> 00:21:30,720
the next vulnerability is picture

468
00:21:30,720 --> 00:21:31,840
distortion

469
00:21:31,840 --> 00:21:35,520
in component b updated the picture is

470
00:21:35,520 --> 00:21:36,799
victim screen

471
00:21:36,799 --> 00:21:39,919
the screen was mutated by attacker

472
00:21:39,919 --> 00:21:42,400
thus we could know that does not verify

473
00:21:42,400 --> 00:21:43,120
the

474
00:21:43,120 --> 00:21:46,320
integrity of the video data

475
00:21:46,320 --> 00:21:49,200
company b is using 3 best structure so

476
00:21:49,200 --> 00:21:49,600
we

477
00:21:49,600 --> 00:21:51,919
think it can be expanded to pilot

478
00:21:51,919 --> 00:21:53,039
broadcasting

479
00:21:53,039 --> 00:21:56,000
like company a

480
00:21:57,440 --> 00:22:01,039
and incompet uh company b are based

481
00:22:01,039 --> 00:22:03,440
based on analyzing data protocol and

482
00:22:03,440 --> 00:22:05,120
binary file

483
00:22:05,120 --> 00:22:07,280
the sequence number is assigned to the

484
00:22:07,280 --> 00:22:08,400
first eight bytes

485
00:22:08,400 --> 00:22:11,120
after header field when the sequence

486
00:22:11,120 --> 00:22:12,960
number is processed

487
00:22:12,960 --> 00:22:16,000
uh the value of signed long long time

488
00:22:16,000 --> 00:22:19,200
is used as an index through the

489
00:22:19,200 --> 00:22:22,559
percent operation sometimes

490
00:22:22,559 --> 00:22:25,600
some part of the date can

491
00:22:25,600 --> 00:22:28,720
be tampered with by an attacker

492
00:22:28,720 --> 00:22:31,600
also value used like index can be

493
00:22:31,600 --> 00:22:32,880
narrative

494
00:22:32,880 --> 00:22:35,440
this allows the process to access to

495
00:22:35,440 --> 00:22:36,640
arbitrarily

496
00:22:36,640 --> 00:22:40,320
memory an article could exploit this

497
00:22:40,320 --> 00:22:42,320
vulnerability to limitly

498
00:22:42,320 --> 00:22:46,799
dominate the victims process

499
00:22:48,559 --> 00:22:50,480
unless there is a picture distortion in

500
00:22:50,480 --> 00:22:53,840
company c you can see the broken screen

501
00:22:53,840 --> 00:22:57,280
that is big time screen the screen can

502
00:22:57,280 --> 00:22:58,320
be tampered with

503
00:22:58,320 --> 00:23:00,960
as shown in the picture when the video

504
00:23:00,960 --> 00:23:01,600
data

505
00:23:01,600 --> 00:23:04,960
is sent after looking at the wsa send

506
00:23:04,960 --> 00:23:05,679
function

507
00:23:05,679 --> 00:23:09,520
using friday so we couldn't know that

508
00:23:09,520 --> 00:23:10,880
does not verify

509
00:23:10,880 --> 00:23:13,679
the integrity of the video data but

510
00:23:13,679 --> 00:23:15,280
complexity only sends

511
00:23:15,280 --> 00:23:18,320
data about the requested data

512
00:23:18,320 --> 00:23:21,360
in mesh based structure so it will be

513
00:23:21,360 --> 00:23:22,159
hard to

514
00:23:22,159 --> 00:23:26,400
expand to pilot broadcasting

515
00:23:26,400 --> 00:23:28,559
in this demo video you can see the

516
00:23:28,559 --> 00:23:29,679
victim screen

517
00:23:29,679 --> 00:23:33,360
is broken by an attacker

518
00:23:33,360 --> 00:23:37,840
you see

519
00:23:37,840 --> 00:23:40,400
now we found multiple border with this

520
00:23:40,400 --> 00:23:41,919
one five or this surface

521
00:23:41,919 --> 00:23:45,120
we suggest you can see a table of the

522
00:23:45,120 --> 00:23:46,880
types of vulnerabilities

523
00:23:46,880 --> 00:23:51,840
summarized for its platforms

524
00:23:52,480 --> 00:23:54,799
this is a description of the

525
00:23:54,799 --> 00:23:55,919
vulnerabilities

526
00:23:55,919 --> 00:23:59,440
found and how to patch and prevent these

527
00:23:59,440 --> 00:24:02,480
vulnerabilities structurally great

528
00:24:02,480 --> 00:24:04,480
comforting in live streaming service

529
00:24:04,480 --> 00:24:07,520
is dangerous because

530
00:24:07,520 --> 00:24:10,240
the received data from other clients can

531
00:24:10,240 --> 00:24:11,520
be mutated

532
00:24:11,520 --> 00:24:14,960
therefore from a secret point of view

533
00:24:14,960 --> 00:24:16,799
it is important to ensure the

534
00:24:16,799 --> 00:24:18,960
reliability and integrity

535
00:24:18,960 --> 00:24:21,440
of data sent and received between

536
00:24:21,440 --> 00:24:22,720
clients

537
00:24:22,720 --> 00:24:25,279
in addition in the case of tree-based

538
00:24:25,279 --> 00:24:26,240
structure

539
00:24:26,240 --> 00:24:28,640
it is necessary to distribute the data

540
00:24:28,640 --> 00:24:30,240
flow because

541
00:24:30,240 --> 00:24:33,039
the parent node user can completely

542
00:24:33,039 --> 00:24:33,600
control

543
00:24:33,600 --> 00:24:37,520
the data flow of the child

544
00:24:39,120 --> 00:24:47,760
thank you for listening

