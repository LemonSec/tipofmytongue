1
00:00:14,960 --> 00:00:16,960
hello everyone today we are going to

2
00:00:16,960 --> 00:00:17,680
share our

3
00:00:17,680 --> 00:00:20,480
writing practice of how to attack our

4
00:00:20,480 --> 00:00:22,400
native kubernetes

5
00:00:22,400 --> 00:00:25,519
as you can see the trend of cloud native

6
00:00:25,519 --> 00:00:29,199
and containerization is coming rapidly

7
00:00:29,199 --> 00:00:31,199
security issues are becoming

8
00:00:31,199 --> 00:00:33,920
increasingly prominent

9
00:00:33,920 --> 00:00:36,320
in this talk firstly we will introduce

10
00:00:36,320 --> 00:00:37,200
the attacks

11
00:00:37,200 --> 00:00:38,800
against the cloud container

12
00:00:38,800 --> 00:00:41,600
infrastructure and new challenges to the

13
00:00:41,600 --> 00:00:42,960
right team

14
00:00:42,960 --> 00:00:45,120
then we will show the details of

15
00:00:45,120 --> 00:00:47,120
different attack techniques

16
00:00:47,120 --> 00:00:49,200
and finally we are going to show the

17
00:00:49,200 --> 00:00:51,120
attacks we encountered

18
00:00:51,120 --> 00:00:53,280
during the construction of the clone

19
00:00:53,280 --> 00:00:55,120
native right team

20
00:00:55,120 --> 00:00:57,840
in addition to let everyone get started

21
00:00:57,840 --> 00:00:58,239
with

22
00:00:58,239 --> 00:01:00,879
container penetration we will also

23
00:01:00,879 --> 00:01:03,199
introduce our open source container

24
00:01:03,199 --> 00:01:04,720
exploitation tool

25
00:01:04,720 --> 00:01:08,159
called cdk according to the honeypot

26
00:01:08,159 --> 00:01:09,760
data we collected from

27
00:01:09,760 --> 00:01:13,119
different cloud vendors in 2020 we can

28
00:01:13,119 --> 00:01:14,080
see that

29
00:01:14,080 --> 00:01:16,479
attacks on traditional visual machines

30
00:01:16,479 --> 00:01:18,080
are growing slowly

31
00:01:18,080 --> 00:01:21,040
however attacks on container

32
00:01:21,040 --> 00:01:22,320
infrastructure are

33
00:01:22,320 --> 00:01:25,040
increasing swiftly because on the one

34
00:01:25,040 --> 00:01:27,520
hand container instances are growing

35
00:01:27,520 --> 00:01:28,320
rapidly

36
00:01:28,320 --> 00:01:31,439
on public cloud on the other hand

37
00:01:31,439 --> 00:01:34,240
we do found some bot nights are

38
00:01:34,240 --> 00:01:35,040
spreading

39
00:01:35,040 --> 00:01:39,920
using the vulnerabilities of containers

40
00:01:39,920 --> 00:01:41,920
based on the data we observed on the

41
00:01:41,920 --> 00:01:42,720
cloud

42
00:01:42,720 --> 00:01:45,840
we noticed that botnets have increased

43
00:01:45,840 --> 00:01:47,520
their attention to continual

44
00:01:47,520 --> 00:01:48,479
vulnerabilities

45
00:01:48,479 --> 00:01:51,600
in the past two years of the 25

46
00:01:51,600 --> 00:01:54,000
cloud oriented bot knights observed in

47
00:01:54,000 --> 00:01:55,280
2020

48
00:01:55,280 --> 00:01:58,240
about 28 percent have its own container

49
00:01:58,240 --> 00:01:59,520
is priced

50
00:01:59,520 --> 00:02:02,079
and the proportion reached 53 in this

51
00:02:02,079 --> 00:02:03,439
year

52
00:02:03,439 --> 00:02:05,600
the figure on the right represents

53
00:02:05,600 --> 00:02:07,520
several common attack measures

54
00:02:07,520 --> 00:02:10,479
and representative one night families

55
00:02:10,479 --> 00:02:12,560
including the well-known

56
00:02:12,560 --> 00:02:14,800
docker hub backdoor image and

57
00:02:14,800 --> 00:02:15,840
unauthorized

58
00:02:15,840 --> 00:02:18,959
excise to the public interfaces of

59
00:02:18,959 --> 00:02:22,239
docker and kubernetes cluster

60
00:02:22,239 --> 00:02:25,200
it is worth mentioning that we found

61
00:02:25,200 --> 00:02:25,520
that

62
00:02:25,520 --> 00:02:29,599
in 2020 a bot knight called borg

63
00:02:29,599 --> 00:02:31,840
has integrated darker escape

64
00:02:31,840 --> 00:02:33,360
vulnerabilities

65
00:02:33,360 --> 00:02:36,080
and the ability to produce kubernetes

66
00:02:36,080 --> 00:02:37,040
lateral movement

67
00:02:37,040 --> 00:02:40,800
attacks which means that attackers have

68
00:02:40,800 --> 00:02:43,280
paid more attention to the automated

69
00:02:43,280 --> 00:02:44,720
exploitation

70
00:02:44,720 --> 00:02:48,319
of the container environment

71
00:02:48,480 --> 00:02:50,319
while the infrastructure used by

72
00:02:50,319 --> 00:02:52,640
enterprises is going to change

73
00:02:52,640 --> 00:02:55,120
the right team's tax skills must also be

74
00:02:55,120 --> 00:02:56,720
innovated

75
00:02:56,720 --> 00:02:58,879
right teams generally divide their

76
00:02:58,879 --> 00:03:01,360
positions into two categories

77
00:03:01,360 --> 00:03:04,000
the positions in the production network

78
00:03:04,000 --> 00:03:06,959
and the positions in the office network

79
00:03:06,959 --> 00:03:09,840
for traditional adc environment the

80
00:03:09,840 --> 00:03:10,560
basic

81
00:03:10,560 --> 00:03:13,920
goal of penetrating production network

82
00:03:13,920 --> 00:03:16,720
is to get a shell of a server and then

83
00:03:16,720 --> 00:03:17,519
we use

84
00:03:17,519 --> 00:03:19,280
different skills to collect the

85
00:03:19,280 --> 00:03:21,040
information such as

86
00:03:21,040 --> 00:03:23,920
house live detection for scanning and

87
00:03:23,920 --> 00:03:25,920
produce the lateral movement to get

88
00:03:25,920 --> 00:03:28,159
other targets

89
00:03:28,159 --> 00:03:30,239
but now when enterprises view

90
00:03:30,239 --> 00:03:33,280
applications on call native kubernetes

91
00:03:33,280 --> 00:03:35,920
after writing obtaining the shell of the

92
00:03:35,920 --> 00:03:38,159
production network through application

93
00:03:38,159 --> 00:03:39,599
vulnerabilities

94
00:03:39,599 --> 00:03:42,640
is quite different from pawnee and idc

95
00:03:42,640 --> 00:03:45,680
server this time you will get a shell in

96
00:03:45,680 --> 00:03:47,680
a container with a slim

97
00:03:47,680 --> 00:03:51,360
environment and limited local resources

98
00:03:51,360 --> 00:03:54,239
at this time if the right team does not

99
00:03:54,239 --> 00:03:55,040
understand

100
00:03:55,040 --> 00:03:58,480
the security design and implementation

101
00:03:58,480 --> 00:03:58,879
of

102
00:03:58,879 --> 00:04:01,519
cloud cognitive technology it will be

103
00:04:01,519 --> 00:04:05,120
hard to get the knife stage

104
00:04:05,120 --> 00:04:07,680
on the other hand the measures of attack

105
00:04:07,680 --> 00:04:10,400
personal computers in office network

106
00:04:10,400 --> 00:04:12,959
are similar to the traditional skills

107
00:04:12,959 --> 00:04:15,360
but the lateral movement from pc to

108
00:04:15,360 --> 00:04:17,120
production network will be very

109
00:04:17,120 --> 00:04:18,478
different

110
00:04:18,478 --> 00:04:22,560
in idc staff usually depend on pam

111
00:04:22,560 --> 00:04:25,199
jam servers and other devices that use

112
00:04:25,199 --> 00:04:26,160
ssh

113
00:04:26,160 --> 00:04:29,680
to log in and manage servers but now

114
00:04:29,680 --> 00:04:31,600
different applications are running in

115
00:04:31,600 --> 00:04:32,720
containers and

116
00:04:32,720 --> 00:04:35,520
use kubernetes for deployment scaling

117
00:04:35,520 --> 00:04:37,280
and management

118
00:04:37,280 --> 00:04:40,400
developers are no longer use ssh for the

119
00:04:40,400 --> 00:04:41,199
operation

120
00:04:41,199 --> 00:04:44,160
but full code ctl or secondary

121
00:04:44,160 --> 00:04:45,440
development tools

122
00:04:45,440 --> 00:04:48,639
like dashboard with the web console

123
00:04:48,639 --> 00:04:51,840
so the target of the write team on pc is

124
00:04:51,840 --> 00:04:54,160
searching the configuration file

125
00:04:54,160 --> 00:04:57,199
instead of the credentials of ssh or

126
00:04:57,199 --> 00:05:00,720
jam server of course with the rise of

127
00:05:00,720 --> 00:05:02,639
devops technology

128
00:05:02,639 --> 00:05:05,280
writings can attack the internal devops

129
00:05:05,280 --> 00:05:08,639
platform to get their job done

130
00:05:08,639 --> 00:05:10,479
these changes also brought new

131
00:05:10,479 --> 00:05:12,560
challenges to the writing

132
00:05:12,560 --> 00:05:14,720
before arbitrary files with high

133
00:05:14,720 --> 00:05:16,160
permissions were almost

134
00:05:16,160 --> 00:05:19,199
equivalent to rce on linux but this

135
00:05:19,199 --> 00:05:22,160
is no longer the case in containers the

136
00:05:22,160 --> 00:05:23,199
information

137
00:05:23,199 --> 00:05:25,199
life circle and permissions of the

138
00:05:25,199 --> 00:05:26,560
container shell

139
00:05:26,560 --> 00:05:30,160
are extremely limited in many cases

140
00:05:30,160 --> 00:05:32,320
we don't have the permission to execute

141
00:05:32,320 --> 00:05:34,639
some commonly used commands

142
00:05:34,639 --> 00:05:37,840
such as p trees s trees and you even

143
00:05:37,840 --> 00:05:38,400
need to

144
00:05:38,400 --> 00:05:41,600
install duplicate and curl

145
00:05:41,600 --> 00:05:44,400
at the same time kubernetes will bring

146
00:05:44,400 --> 00:05:46,080
new container network

147
00:05:46,080 --> 00:05:49,199
dns and security features

148
00:05:49,199 --> 00:05:52,400
obviously the red team needs

149
00:05:52,400 --> 00:05:56,719
new knowledge skills and tools

150
00:05:56,960 --> 00:05:59,680
okay next we are going to show a

151
00:05:59,680 --> 00:06:00,400
practical

152
00:06:00,400 --> 00:06:04,080
attack technique everything starts

153
00:06:04,080 --> 00:06:07,360
with a shell or container you can get a

154
00:06:07,360 --> 00:06:08,880
container shell

155
00:06:08,880 --> 00:06:12,080
from some pfc application

156
00:06:12,080 --> 00:06:15,199
by a vulnerability like a pip unit

157
00:06:15,199 --> 00:06:20,960
remote code execute cve 2017-9841

158
00:06:20,960 --> 00:06:24,639
after this you will encode a different

159
00:06:24,639 --> 00:06:25,440
environment

160
00:06:25,440 --> 00:06:28,639
from the idc your purpose

161
00:06:28,639 --> 00:06:32,840
is to get more permissions of the entire

162
00:06:32,840 --> 00:06:34,000
service

163
00:06:34,000 --> 00:06:36,960
such as opting permissions of other

164
00:06:36,960 --> 00:06:37,759
containers

165
00:06:37,759 --> 00:06:41,199
and parts escape to the current node

166
00:06:41,199 --> 00:06:45,199
of kubernetes updating the master node

167
00:06:45,199 --> 00:06:48,319
obtaining the api server an email

168
00:06:48,319 --> 00:06:49,520
obtaining the cloud

169
00:06:49,520 --> 00:06:52,800
account where the hosting cluster

170
00:06:52,800 --> 00:06:55,840
is located the attack service

171
00:06:55,840 --> 00:06:59,599
of the cloud native ka workloads

172
00:06:59,599 --> 00:07:01,759
is based on what resource can be

173
00:07:01,759 --> 00:07:02,720
assessed

174
00:07:02,720 --> 00:07:05,199
by the container shell we got in

175
00:07:05,199 --> 00:07:07,599
kubernetes network

176
00:07:07,599 --> 00:07:10,000
in it is for kubernetes container

177
00:07:10,000 --> 00:07:11,280
network

178
00:07:11,280 --> 00:07:14,319
you can access more parts

179
00:07:14,319 --> 00:07:17,520
of other product container parts

180
00:07:17,520 --> 00:07:21,199
of the kubernetes service parts

181
00:07:21,199 --> 00:07:24,479
of the current node and other node

182
00:07:24,479 --> 00:07:27,520
the service of the masternode and the

183
00:07:27,520 --> 00:07:28,400
compiledness

184
00:07:28,400 --> 00:07:31,759
service of kubernetes in the past

185
00:07:31,759 --> 00:07:35,120
our goal were mostly the agent

186
00:07:35,120 --> 00:07:39,199
mast server database of the ss password

187
00:07:39,199 --> 00:07:42,319
or it automation master controller

188
00:07:42,319 --> 00:07:43,120
server

189
00:07:43,120 --> 00:07:47,759
and so on include it but not limited to

190
00:07:47,759 --> 00:07:52,240
solder stacks matcher and support master

191
00:07:52,240 --> 00:07:55,360
but in the kubernetes network

192
00:07:55,360 --> 00:07:57,680
this kind of centralized power is

193
00:07:57,680 --> 00:07:58,400
unified

194
00:07:58,400 --> 00:08:01,440
into api server obtaining

195
00:08:01,440 --> 00:08:04,400
the main punches of the api server on

196
00:08:04,400 --> 00:08:05,520
the root commissions

197
00:08:05,520 --> 00:08:08,560
of the master node we'll announce the

198
00:08:08,560 --> 00:08:11,120
end of the war

199
00:08:11,120 --> 00:08:14,000
container escape is like the red team

200
00:08:14,000 --> 00:08:14,720
will try

201
00:08:14,720 --> 00:08:18,400
first after getting a shell of container

202
00:08:18,400 --> 00:08:21,759
as so on this page we cash out an ic

203
00:08:21,759 --> 00:08:23,120
vulnerability

204
00:08:23,120 --> 00:08:27,199
in a possible grass sql container

205
00:08:27,199 --> 00:08:30,400
we can only obtain a limit process list

206
00:08:30,400 --> 00:08:34,000
and permissions restricted by secret

207
00:08:34,000 --> 00:08:36,799
and knee space to better understand the

208
00:08:36,799 --> 00:08:39,120
method of a container escape

209
00:08:39,120 --> 00:08:41,599
you should know that the process in the

210
00:08:41,599 --> 00:08:42,399
container

211
00:08:42,399 --> 00:08:45,680
is essentially just a normal process of

212
00:08:45,680 --> 00:08:46,640
linux

213
00:08:46,640 --> 00:08:50,000
all the behaviors of the process inside

214
00:08:50,000 --> 00:08:50,959
the container

215
00:08:50,959 --> 00:08:54,080
are transparent to the host

216
00:08:54,080 --> 00:08:56,880
therefore nature of the container escape

217
00:08:56,880 --> 00:08:58,000
is very different

218
00:08:58,000 --> 00:09:01,200
from hardware virtualization

219
00:09:01,200 --> 00:09:04,640
vm escape executing qatar container

220
00:09:04,640 --> 00:09:07,360
in my option the process of container

221
00:09:07,360 --> 00:09:08,000
escape

222
00:09:08,000 --> 00:09:11,440
it led a registry process obtained and

223
00:09:11,440 --> 00:09:12,320
restricted

224
00:09:12,320 --> 00:09:15,440
full permissions occating

225
00:09:15,440 --> 00:09:18,959
more privilege for process originally

226
00:09:18,959 --> 00:09:19,839
restricted

227
00:09:19,839 --> 00:09:22,880
by the group and in space it is

228
00:09:22,880 --> 00:09:26,320
much more closer to the privileged

229
00:09:26,320 --> 00:09:29,440
escape relation in the linux host

230
00:09:29,440 --> 00:09:31,760
if you cannot escape in current

231
00:09:31,760 --> 00:09:32,560
container

232
00:09:32,560 --> 00:09:35,440
you may have to think about other gods

233
00:09:35,440 --> 00:09:36,640
in the ka

234
00:09:36,640 --> 00:09:40,240
network normally you try to get

235
00:09:40,240 --> 00:09:42,880
the following types of information

236
00:09:42,880 --> 00:09:45,440
information about the current node

237
00:09:45,440 --> 00:09:48,560
which net space the current pod is

238
00:09:48,560 --> 00:09:51,920
located is that default netspace

239
00:09:51,920 --> 00:09:55,680
where is the current port what is the ip

240
00:09:55,680 --> 00:09:56,560
subnet

241
00:09:56,560 --> 00:09:59,760
of the node server ka service and

242
00:09:59,760 --> 00:10:02,959
custom info can also be helpful in order

243
00:10:02,959 --> 00:10:03,360
to

244
00:10:03,360 --> 00:10:05,680
let everyone understand the service and

245
00:10:05,680 --> 00:10:06,560
need space

246
00:10:06,560 --> 00:10:10,160
better and service then as based on

247
00:10:10,160 --> 00:10:14,399
this tool here are two simple examples

248
00:10:14,399 --> 00:10:17,519
the thing as usual contact about will be

249
00:10:17,519 --> 00:10:21,680
present in every ka custom by default

250
00:10:21,680 --> 00:10:24,800
which correspond to the kubernetes

251
00:10:24,800 --> 00:10:28,160
service under the default space

252
00:10:28,160 --> 00:10:30,640
and point to the api server of the

253
00:10:30,640 --> 00:10:32,320
current cluster

254
00:10:32,320 --> 00:10:34,399
when i create a new namespace need

255
00:10:34,399 --> 00:10:35,839
attention and then

256
00:10:35,839 --> 00:10:38,079
create a service named force the

257
00:10:38,079 --> 00:10:39,760
following thing as you call

258
00:10:39,760 --> 00:10:42,720
will be generate you can rather the yam

259
00:10:42,720 --> 00:10:44,000
of config file

260
00:10:44,000 --> 00:10:46,880
used to create the service on the right

261
00:10:46,880 --> 00:10:47,519
side

262
00:10:47,519 --> 00:10:50,320
this yammer file comes from k8 default

263
00:10:50,320 --> 00:10:51,040
service

264
00:10:51,040 --> 00:10:55,200
native kubernetes the four things as

265
00:10:55,200 --> 00:10:59,519
recorded on the up left are all point to

266
00:10:59,519 --> 00:11:02,480
this service as mentioned above we can

267
00:11:02,480 --> 00:11:03,839
easily obtain

268
00:11:03,839 --> 00:11:07,279
the next base information of the current

269
00:11:07,279 --> 00:11:07,920
pod

270
00:11:07,920 --> 00:11:11,120
in the dns configuration similarly

271
00:11:11,120 --> 00:11:14,240
we obtain a service ip or product ip

272
00:11:14,240 --> 00:11:18,880
we can also easily use the dns revocab

273
00:11:18,880 --> 00:11:21,680
to obtain the corresponding port name

274
00:11:21,680 --> 00:11:22,480
service name

275
00:11:22,480 --> 00:11:25,519
and next base name later we will

276
00:11:25,519 --> 00:11:28,720
introduce multiple attacks against node

277
00:11:28,720 --> 00:11:31,040
server of ka

278
00:11:31,040 --> 00:11:33,760
and the it information of the current

279
00:11:33,760 --> 00:11:34,800
node server

280
00:11:34,800 --> 00:11:37,760
will be obtained from the arp cache

281
00:11:37,760 --> 00:11:39,200
tables

282
00:11:39,200 --> 00:11:42,720
from the current container the default

283
00:11:42,720 --> 00:11:43,519
service

284
00:11:43,519 --> 00:11:46,240
and the currency terminate space such as

285
00:11:46,240 --> 00:11:47,040
the privacy

286
00:11:47,040 --> 00:11:50,079
version kubernetes service in

287
00:11:50,079 --> 00:11:53,680
different space an ip point

288
00:11:53,680 --> 00:11:57,440
by kubernetes can also be used

289
00:11:57,440 --> 00:12:02,639
to infer the ip subnet of ka service

290
00:12:02,639 --> 00:12:05,440
which is the avaya information you can

291
00:12:05,440 --> 00:12:05,920
start

292
00:12:05,920 --> 00:12:09,360
host discovery and pod scanning

293
00:12:09,360 --> 00:12:11,600
of course if you want to carry out this

294
00:12:11,600 --> 00:12:13,760
kind of behave

295
00:12:13,760 --> 00:12:16,720
you need to know the rule of the

296
00:12:16,720 --> 00:12:17,839
security system

297
00:12:17,839 --> 00:12:21,360
used by the tech company in your device

298
00:12:21,360 --> 00:12:26,560
such as hids egr and an ids

299
00:12:26,560 --> 00:12:30,000
and the normal circumstances if you have

300
00:12:30,000 --> 00:12:31,519
the rule the permissions of the

301
00:12:31,519 --> 00:12:33,360
container the method of

302
00:12:33,360 --> 00:12:36,880
post scanning is almost the same as the

303
00:12:36,880 --> 00:12:40,399
traditional idc what you need

304
00:12:40,399 --> 00:12:44,240
to pay attention is if the ke cluster

305
00:12:44,240 --> 00:12:45,360
use services

306
00:12:45,360 --> 00:12:49,360
such as istio then translation

307
00:12:49,360 --> 00:12:52,720
method will bring a wrong result

308
00:12:52,720 --> 00:12:54,880
how to judge whether the cluster is

309
00:12:54,880 --> 00:12:56,160
using istio

310
00:12:56,160 --> 00:12:59,600
or not you can use cpk-run

311
00:12:59,600 --> 00:13:03,600
steel check to detect the noun

312
00:13:03,920 --> 00:13:06,800
it is detection logic is based on sto

313
00:13:06,800 --> 00:13:07,839
inject

314
00:13:07,839 --> 00:13:11,200
into the metadata of the http

315
00:13:11,200 --> 00:13:17,040
request header according to the metadata

316
00:13:17,040 --> 00:13:21,360
and decode you can even get a lot of

317
00:13:21,360 --> 00:13:24,880
information about current pod and the ka

318
00:13:24,880 --> 00:13:26,560
cutter

319
00:13:26,560 --> 00:13:29,519
which is difficult for you to get on the

320
00:13:29,519 --> 00:13:32,240
ordinary ka network

321
00:13:32,240 --> 00:13:35,360
the picture on this page descripts why

322
00:13:35,360 --> 00:13:37,839
the istio network is special

323
00:13:37,839 --> 00:13:40,639
all your requests the sponsor will be

324
00:13:40,639 --> 00:13:41,440
hijacked

325
00:13:41,440 --> 00:13:44,880
proceed and management via the sidecar

326
00:13:44,880 --> 00:13:45,519
container

327
00:13:45,519 --> 00:13:48,880
of istio the request you send

328
00:13:48,880 --> 00:13:52,959
the response you receive will be changed

329
00:13:52,959 --> 00:13:56,320
if you want to perform point scanning

330
00:13:56,320 --> 00:13:59,920
in istio network we think

331
00:13:59,920 --> 00:14:03,279
the best practice is to use

332
00:14:03,279 --> 00:14:06,480
tools like a map only use

333
00:14:06,480 --> 00:14:10,240
icmp feature to do host discovery

334
00:14:10,240 --> 00:14:12,639
and determine whether the point is open

335
00:14:12,639 --> 00:14:14,839
by the application layer

336
00:14:14,839 --> 00:14:18,000
detection after obtaining the disaster

337
00:14:18,000 --> 00:14:21,360
of the pod scanning which service

338
00:14:21,360 --> 00:14:25,680
are noting my words the results we got

339
00:14:25,680 --> 00:14:28,959
can be divided into three types

340
00:14:28,959 --> 00:14:32,800
pause on ka products

341
00:14:32,800 --> 00:14:36,000
pause on node server

342
00:14:36,000 --> 00:14:40,320
and products from kubernetes service

343
00:14:40,320 --> 00:14:43,600
this page shows a lower of each key

344
00:14:43,600 --> 00:14:44,720
component

345
00:14:44,720 --> 00:14:47,120
when user execute commands with couple

346
00:14:47,120 --> 00:14:48,639
code

347
00:14:48,639 --> 00:14:52,560
including api server kubernetes docker

348
00:14:52,560 --> 00:14:55,920
ka dashboard kuber code policy

349
00:14:55,920 --> 00:14:59,760
support command and etcd the draw of the

350
00:14:59,760 --> 00:15:01,680
components

351
00:15:01,680 --> 00:15:05,120
cross-bound to resist if loss

352
00:15:05,120 --> 00:15:08,560
service are controlled by

353
00:15:08,560 --> 00:15:12,639
the drive team and those components

354
00:15:12,639 --> 00:15:15,920
are easy to unauthorize configurations

355
00:15:15,920 --> 00:15:19,040
in the private network

356
00:15:19,040 --> 00:15:22,560
except the bus obtaining

357
00:15:22,560 --> 00:15:26,000
the certificate api keyed password

358
00:15:26,000 --> 00:15:29,680
and token about ka composer end

359
00:15:29,680 --> 00:15:32,800
in the private net is also the way we

360
00:15:32,800 --> 00:15:35,040
are going

361
00:15:35,040 --> 00:15:37,839
if you really cannot find a target in

362
00:15:37,839 --> 00:15:38,839
the private

363
00:15:38,839 --> 00:15:42,160
network you may try the cloud native

364
00:15:42,160 --> 00:15:45,759
api gateway all the current

365
00:15:45,759 --> 00:15:48,079
cloud network api gateway open source

366
00:15:48,079 --> 00:15:49,600
solution

367
00:15:49,600 --> 00:15:53,279
do not have a complete authentication

368
00:15:53,279 --> 00:15:54,480
function

369
00:15:54,480 --> 00:15:58,160
like lex ka with the feature of the

370
00:15:58,160 --> 00:16:01,440
phoenix ability dynamical and remote

371
00:16:01,440 --> 00:16:02,560
config

372
00:16:02,560 --> 00:16:04,959
many project of solution in the open

373
00:16:04,959 --> 00:16:05,920
source branch

374
00:16:05,920 --> 00:16:09,519
can access the main api in the remote

375
00:16:09,519 --> 00:16:12,639
the second most popular api gateway

376
00:16:12,639 --> 00:16:16,079
project api six have a

377
00:16:16,079 --> 00:16:18,720
default access key and the drive team

378
00:16:18,720 --> 00:16:20,800
can easily get a shell by running a

379
00:16:20,800 --> 00:16:23,120
lower code

380
00:16:23,120 --> 00:16:25,680
when we control api gateway we can

381
00:16:25,680 --> 00:16:26,399
connect

382
00:16:26,399 --> 00:16:29,279
controller and hijack the node source

383
00:16:29,279 --> 00:16:30,000
trafficker

384
00:16:30,000 --> 00:16:33,600
which is the management by cloud native

385
00:16:33,600 --> 00:16:37,360
cluster more importantly obtaining the

386
00:16:37,360 --> 00:16:38,480
api gateway

387
00:16:38,480 --> 00:16:41,199
can break through the elimination of

388
00:16:41,199 --> 00:16:43,440
network isolation

389
00:16:43,440 --> 00:16:46,000
and get access of the other private

390
00:16:46,000 --> 00:16:46,720
network

391
00:16:46,720 --> 00:16:50,720
and public network the same reason

392
00:16:50,720 --> 00:16:54,240
for container escaping

393
00:16:54,240 --> 00:16:57,920
after the relative of tens

394
00:16:57,920 --> 00:17:00,959
custom permissions generally

395
00:17:00,959 --> 00:17:04,640
they are not certified which are only

396
00:17:04,640 --> 00:17:07,520
obtaining the permissions of pods and

397
00:17:07,520 --> 00:17:09,280
containers

398
00:17:09,280 --> 00:17:12,799
the dreaded team will create posts and

399
00:17:12,799 --> 00:17:16,000
containers start with privilege

400
00:17:16,000 --> 00:17:19,039
to obtain node permissions

401
00:17:19,039 --> 00:17:21,679
which are used to obtain the full

402
00:17:21,679 --> 00:17:23,119
permissions

403
00:17:23,119 --> 00:17:27,199
for container process and node process

404
00:17:27,199 --> 00:17:30,720
you can use the node select label

405
00:17:30,720 --> 00:17:34,000
to select the target node server

406
00:17:34,000 --> 00:17:37,280
and get a router except

407
00:17:37,280 --> 00:17:41,039
the master node if you want to find some

408
00:17:41,039 --> 00:17:41,919
credential

409
00:17:41,919 --> 00:17:44,960
of a cloud account you can find it

410
00:17:44,960 --> 00:17:48,720
in a following patch the multi-files

411
00:17:48,720 --> 00:17:51,600
the kubernetes search by cooper code get

412
00:17:51,600 --> 00:17:52,160
yammo

413
00:17:52,160 --> 00:17:56,480
result the hardcore ak in project

414
00:17:56,480 --> 00:17:59,520
the etcd the cloud platform

415
00:17:59,520 --> 00:18:03,760
features the cloud metadata api

416
00:18:03,760 --> 00:18:07,200
and the ka port in master node

417
00:18:07,200 --> 00:18:09,919
now we are gonna show a real world case

418
00:18:09,919 --> 00:18:10,799
option red

419
00:18:10,799 --> 00:18:14,400
team in 2020 which contains a lot of

420
00:18:14,400 --> 00:18:15,919
command native

421
00:18:15,919 --> 00:18:20,160
and container related knowledge

422
00:18:20,160 --> 00:18:23,039
this time our goal is a company engaged

423
00:18:23,039 --> 00:18:25,440
in the financial industry

424
00:18:25,440 --> 00:18:28,559
all their online applications and office

425
00:18:28,559 --> 00:18:29,440
applications

426
00:18:29,440 --> 00:18:33,280
are all running on kubernetes

427
00:18:33,280 --> 00:18:36,240
they hope assess their overall security

428
00:18:36,240 --> 00:18:38,240
commercial results

429
00:18:38,240 --> 00:18:41,840
from the public networks to the private

430
00:18:41,840 --> 00:18:42,559
network

431
00:18:42,559 --> 00:18:46,080
it is no end at employees not using

432
00:18:46,080 --> 00:18:47,039
phishing

433
00:18:47,039 --> 00:18:50,480
but only using vulnerabilities

434
00:18:50,480 --> 00:18:54,160
to obtain their custom permissions

435
00:18:54,160 --> 00:18:57,679
which are any interaction with staff

436
00:18:57,679 --> 00:19:00,799
we found that they built a sales

437
00:19:00,799 --> 00:19:02,000
developer

438
00:19:02,000 --> 00:19:05,440
jewish house system so that employees

439
00:19:05,440 --> 00:19:07,919
can work at home and only a mobile

440
00:19:07,919 --> 00:19:09,120
device

441
00:19:09,120 --> 00:19:12,640
this is our first breakthrough

442
00:19:12,640 --> 00:19:15,600
after investigation we found that all

443
00:19:15,600 --> 00:19:16,799
the private domains

444
00:19:16,799 --> 00:19:19,840
of the target company are all in the

445
00:19:19,840 --> 00:19:23,120
subdomain which is inaudible and some

446
00:19:23,120 --> 00:19:24,320
private domain

447
00:19:24,320 --> 00:19:27,120
can be also be placed on the public

448
00:19:27,120 --> 00:19:29,600
network

449
00:19:29,840 --> 00:19:32,640
they are all in the scenic recon point

450
00:19:32,640 --> 00:19:36,320
to a gateway on the public network

451
00:19:36,320 --> 00:19:39,440
just like below but

452
00:19:39,440 --> 00:19:42,320
if the red team directly access the

453
00:19:42,320 --> 00:19:44,240
private oa domain

454
00:19:44,240 --> 00:19:47,520
from the public network in a browser

455
00:19:47,520 --> 00:19:51,600
it will return completed which http

456
00:19:51,600 --> 00:19:55,679
senders code 403

457
00:19:55,679 --> 00:19:59,440
other http requests from staffs

458
00:19:59,440 --> 00:20:01,600
in the tech company want to pass the

459
00:20:01,600 --> 00:20:02,880
gateway

460
00:20:02,880 --> 00:20:06,159
and access the oe website for work

461
00:20:06,159 --> 00:20:10,080
two things are required one is the vpn

462
00:20:10,080 --> 00:20:13,919
and the others is the session token

463
00:20:13,919 --> 00:20:17,440
indicating the staff's identity

464
00:20:17,440 --> 00:20:20,480
in the http request copy

465
00:20:20,480 --> 00:20:23,600
about the staff identity because the 80

466
00:20:23,600 --> 00:20:24,480
credentials

467
00:20:24,480 --> 00:20:28,000
of the employees my bookstores cracking

468
00:20:28,000 --> 00:20:29,039
of the microsoft

469
00:20:29,039 --> 00:20:32,720
server active sync which is exploited

470
00:20:32,720 --> 00:20:36,080
on the public network however

471
00:20:36,080 --> 00:20:38,400
we have been unable to get the

472
00:20:38,400 --> 00:20:40,799
application of the

473
00:20:40,799 --> 00:20:44,159
private vpn cad for a long time

474
00:20:44,159 --> 00:20:48,080
we began to analyze the security issues

475
00:20:48,080 --> 00:20:52,240
in this design imagine that

476
00:20:52,360 --> 00:20:53,840
zgateway.inner.com

477
00:20:53,840 --> 00:20:57,679
is open on the public network

478
00:20:57,679 --> 00:21:00,720
with the method of releasing the source

479
00:21:00,720 --> 00:21:01,600
ip

480
00:21:01,600 --> 00:21:05,280
of the http request is that

481
00:21:05,280 --> 00:21:08,880
vpn client important so that

482
00:21:08,880 --> 00:21:11,360
i try to file the http request that we

483
00:21:11,360 --> 00:21:12,799
send to

484
00:21:12,799 --> 00:21:16,559
zero trust gateway and set some htv

485
00:21:16,559 --> 00:21:19,600
head values to different parameter ip

486
00:21:19,600 --> 00:21:22,880
such as the client ip head about forward

487
00:21:22,880 --> 00:21:26,400
and remote adr in the end

488
00:21:26,400 --> 00:21:29,679
i found that when htv requests sent to

489
00:21:29,679 --> 00:21:33,280
literal charts gateway carry which

490
00:21:33,280 --> 00:21:38,320
the tar forward 4 http header

491
00:21:38,320 --> 00:21:41,440
and the value is a private network ip

492
00:21:41,440 --> 00:21:44,960
salvage chain then we can access the oe

493
00:21:44,960 --> 00:21:47,520
login page

494
00:21:47,520 --> 00:21:50,880
coupon with the employee identity

495
00:21:50,880 --> 00:21:55,200
that we got in the microsoft

496
00:21:55,200 --> 00:21:58,159
service activity sync now we can access

497
00:21:58,159 --> 00:21:59,200
the network

498
00:21:59,200 --> 00:22:02,240
of the text oa

499
00:22:02,720 --> 00:22:06,320
the office network is a new world after

500
00:22:06,320 --> 00:22:09,919
long explorations we finally found a new

501
00:22:09,919 --> 00:22:10,720
breakthrough

502
00:22:10,720 --> 00:22:14,480
in web service for serverless

503
00:22:14,480 --> 00:22:19,600
domain name is serbless.inno.com

504
00:22:19,600 --> 00:22:22,720
when the url of a new

505
00:22:22,720 --> 00:22:26,240
jit project is provided to the web

506
00:22:26,240 --> 00:22:28,080
service

507
00:22:28,080 --> 00:22:30,799
serverless service will have a public

508
00:22:30,799 --> 00:22:31,840
container

509
00:22:31,840 --> 00:22:36,080
to clone and download the project code

510
00:22:36,080 --> 00:22:40,320
install dependencies and refactor

511
00:22:40,320 --> 00:22:43,600
this is a very imagined native feature

512
00:22:43,600 --> 00:22:44,960
for us

513
00:22:44,960 --> 00:22:47,360
we found that there are several ways to

514
00:22:47,360 --> 00:22:50,000
get a shot in this container

515
00:22:50,000 --> 00:22:53,280
first container inject

516
00:22:53,280 --> 00:22:58,799
in url permanent wing data clone execute

517
00:22:58,799 --> 00:23:01,840
second when install node.js depends in

518
00:23:01,840 --> 00:23:03,440
package

519
00:23:03,440 --> 00:23:07,440
construct a special package.json file

520
00:23:07,440 --> 00:23:10,640
to control the public container using

521
00:23:10,640 --> 00:23:11,600
methods such as

522
00:23:11,600 --> 00:23:14,960
pre-installed also evo

523
00:23:14,960 --> 00:23:17,840
python package and using the low-level

524
00:23:17,840 --> 00:23:19,360
issues of city chrome

525
00:23:19,360 --> 00:23:22,400
to the several modules and go get

526
00:23:22,400 --> 00:23:25,600
can get a shout too

527
00:23:26,000 --> 00:23:29,039
all in all we got the jewelry shell

528
00:23:29,039 --> 00:23:32,559
of this public container and found that

529
00:23:32,559 --> 00:23:34,799
this container starts with system

530
00:23:34,799 --> 00:23:37,280
autonomy capability

531
00:23:37,280 --> 00:23:40,240
there are many escape methods suitable

532
00:23:40,240 --> 00:23:43,360
for this type of container

533
00:23:43,360 --> 00:23:46,480
now you can use our open source tool cdk

534
00:23:46,480 --> 00:23:49,760
to detect and escape such container

535
00:23:49,760 --> 00:23:53,760
easily use cdk evaluate

536
00:23:53,760 --> 00:23:57,200
to detect capabilities and use cdk

537
00:23:57,200 --> 00:24:01,039
run rewrite c group device or cdk

538
00:24:01,039 --> 00:24:04,640
run multiple separate commands to escape

539
00:24:04,640 --> 00:24:07,520
this container

540
00:24:08,159 --> 00:24:11,600
now we can access files and get a shell

541
00:24:11,600 --> 00:24:13,679
in the node server of the public

542
00:24:13,679 --> 00:24:15,840
container great

543
00:24:15,840 --> 00:24:19,039
we know that all ages

544
00:24:19,039 --> 00:24:22,480
that acting on containers should

545
00:24:22,480 --> 00:24:26,240
run only host cytaka containers

546
00:24:26,240 --> 00:24:30,240
or democratic containers which privilege

547
00:24:30,240 --> 00:24:34,159
we define lots of self-developer areas

548
00:24:34,159 --> 00:24:37,360
on this host and we found a very

549
00:24:37,360 --> 00:24:38,159
interesting

550
00:24:38,159 --> 00:24:41,279
agent named xiaoi web

551
00:24:41,279 --> 00:24:45,039
console agents and got his binary

552
00:24:45,039 --> 00:24:49,200
project cmd lights and config files

553
00:24:49,200 --> 00:24:52,320
the program is written by golem

554
00:24:52,320 --> 00:24:55,039
and we know that this agent is to

555
00:24:55,039 --> 00:24:55,840
support

556
00:24:55,840 --> 00:24:59,600
web console filters how does

557
00:24:59,600 --> 00:25:02,720
the develops in the target

558
00:25:02,720 --> 00:25:07,200
company manage layout containers

559
00:25:07,200 --> 00:25:11,039
it is a short the web console filter

560
00:25:11,039 --> 00:25:14,640
that you can call bash in the container

561
00:25:14,640 --> 00:25:18,400
to execute commands in the web console

562
00:25:18,400 --> 00:25:23,520
the agent will listen on port

563
00:25:23,960 --> 00:25:26,080
3333

564
00:25:26,080 --> 00:25:29,360
the following http request

565
00:25:29,360 --> 00:25:33,159
concrete instruction of document

566
00:25:33,159 --> 00:25:36,559
exec subcommand

567
00:25:36,559 --> 00:25:39,919
in the end the agent actually called

568
00:25:39,919 --> 00:25:43,679
the default local unix socket

569
00:25:43,679 --> 00:25:47,120
of docker you can see a simplified

570
00:25:47,120 --> 00:25:48,080
process

571
00:25:48,080 --> 00:25:50,880
of creating a web console structure in

572
00:25:50,880 --> 00:25:52,640
the lower left corner

573
00:25:52,640 --> 00:25:56,320
of this page but

574
00:25:56,320 --> 00:25:59,679
how do we get all the content ids with

575
00:25:59,679 --> 00:26:03,679
6-4 character on each server

576
00:26:03,679 --> 00:26:07,919
this is obviously impossible

577
00:26:07,919 --> 00:26:10,640
but the man who was using docker

578
00:26:10,640 --> 00:26:11,600
container

579
00:26:11,600 --> 00:26:16,000
loser we can repay the entire

580
00:26:16,000 --> 00:26:19,200
container id by using the first

581
00:26:19,200 --> 00:26:24,880
field ticket of the container id

582
00:26:24,880 --> 00:26:28,159
in docker unique socket this feature is

583
00:26:28,159 --> 00:26:30,240
also separate

584
00:26:30,240 --> 00:26:34,400
for example if only two containers

585
00:26:34,400 --> 00:26:37,520
only host like below

586
00:26:37,520 --> 00:26:41,120
one i put in four months ago

587
00:26:41,120 --> 00:26:46,240
the other one exists in two days ago

588
00:26:46,240 --> 00:26:51,919
or their container id start with c

589
00:26:51,919 --> 00:26:52,640
request

590
00:26:52,640 --> 00:26:55,440
of the dividend container id will return

591
00:26:55,440 --> 00:26:57,520
different results

592
00:26:57,520 --> 00:27:01,520
including the following three users

593
00:27:01,520 --> 00:27:04,320
container id multiple container id not

594
00:27:04,320 --> 00:27:05,600
for

595
00:27:05,600 --> 00:27:08,799
i did not study so we can use

596
00:27:08,799 --> 00:27:12,080
docker sort id feature too fast

597
00:27:12,080 --> 00:27:16,000
or container sort id on or no server

598
00:27:16,000 --> 00:27:20,080
of kubernetes culture

599
00:27:20,080 --> 00:27:22,480
since we can get a shell of all

600
00:27:22,480 --> 00:27:24,000
containers

601
00:27:24,000 --> 00:27:29,039
on the kubernetes clusters

602
00:27:29,360 --> 00:27:34,960
now we focus on another agent

603
00:27:34,960 --> 00:27:38,080
it is an agent that connect

604
00:27:38,080 --> 00:27:42,000
logs it use

605
00:27:42,000 --> 00:27:45,440
demo set to deploy

606
00:27:45,440 --> 00:27:50,240
and drunks k a node servers

607
00:27:50,240 --> 00:27:53,679
it use a k a demo set

608
00:27:53,679 --> 00:27:57,039
yaml file like this

609
00:27:57,039 --> 00:28:00,159
this is almost the default setting

610
00:28:00,159 --> 00:28:04,159
in the official level of electric bits

611
00:28:04,159 --> 00:28:08,000
many extreme many escape tricks can

612
00:28:08,000 --> 00:28:11,279
work here it is both privileged

613
00:28:11,279 --> 00:28:13,919
to mount the route directly to the

614
00:28:13,919 --> 00:28:14,799
container

615
00:28:14,799 --> 00:28:18,000
for logging obviously we only need to

616
00:28:18,000 --> 00:28:18,399
use

617
00:28:18,399 --> 00:28:21,440
the 3333 part

618
00:28:21,440 --> 00:28:24,640
of the web console agent about

619
00:28:24,640 --> 00:28:26,720
to control the container style by this

620
00:28:26,720 --> 00:28:27,840
data set

621
00:28:27,840 --> 00:28:30,559
and is capable to get a root shell for

622
00:28:30,559 --> 00:28:32,640
any noticeable

623
00:28:32,640 --> 00:28:35,440
unleash them said issue let all

624
00:28:35,440 --> 00:28:36,399
kubernetes

625
00:28:36,399 --> 00:28:39,840
notice run a copy of the pot

626
00:28:39,840 --> 00:28:42,720
all nodes of this cluster are in our

627
00:28:42,720 --> 00:28:43,600
grasp

628
00:28:43,600 --> 00:28:47,279
now in the end

629
00:28:47,279 --> 00:28:50,000
we achieve our goal and we can control

630
00:28:50,000 --> 00:28:51,120
all the resources

631
00:28:51,120 --> 00:28:54,799
of the tech company on the cloud

632
00:28:54,799 --> 00:28:59,200
here are some simple tips first

633
00:28:59,200 --> 00:29:01,600
we should pay attention to the

634
00:29:01,600 --> 00:29:02,559
kuberconfig

635
00:29:02,559 --> 00:29:05,760
file and its permission

636
00:29:05,760 --> 00:29:08,960
second it's important to

637
00:29:08,960 --> 00:29:11,919
obtain the security id and security key

638
00:29:11,919 --> 00:29:13,919
of the cloud api

639
00:29:13,919 --> 00:29:16,799
third in this case we call the master

640
00:29:16,799 --> 00:29:17,919
node sha

641
00:29:17,919 --> 00:29:21,840
and the admin cover configure files

642
00:29:21,840 --> 00:29:26,159
of ka cluster in the last

643
00:29:26,159 --> 00:29:29,200
fourth after escape the nodusha

644
00:29:29,200 --> 00:29:32,399
allowed us to do more things

645
00:29:32,399 --> 00:29:36,000
finally although we did not have a cdk

646
00:29:36,000 --> 00:29:39,200
at that time it is much more conveniency

647
00:29:39,200 --> 00:29:43,120
to use tools like cdk

648
00:29:43,360 --> 00:29:46,640
okay by now we talk a lot about how to

649
00:29:46,640 --> 00:29:48,960
identify and exploit container

650
00:29:48,960 --> 00:29:50,080
vulnerabilities

651
00:29:50,080 --> 00:29:52,320
which is quite a common problem in

652
00:29:52,320 --> 00:29:53,440
writing

653
00:29:53,440 --> 00:29:55,520
so with that problem in hand and

654
00:29:55,520 --> 00:29:58,240
particularly think about the automation

655
00:29:58,240 --> 00:30:01,600
we created a tool called cdk

656
00:30:01,600 --> 00:30:04,960
writing go and release as a bannery

657
00:30:04,960 --> 00:30:07,440
it's not a framework it's a binary to do

658
00:30:07,440 --> 00:30:09,279
the autopilot stuff

659
00:30:09,279 --> 00:30:12,480
inside a container or kubernetes part

660
00:30:12,480 --> 00:30:16,080
it helped us to perform container recon

661
00:30:16,080 --> 00:30:18,640
then use pulse exploitation and later

662
00:30:18,640 --> 00:30:21,360
movements in kubernetes cluster

663
00:30:21,360 --> 00:30:24,480
and i did make the github repo public

664
00:30:24,480 --> 00:30:25,520
available

665
00:30:25,520 --> 00:30:28,320
so you can find its price and examples

666
00:30:28,320 --> 00:30:29,679
over there

667
00:30:29,679 --> 00:30:31,919
it contains three main functional

668
00:30:31,919 --> 00:30:32,880
modules

669
00:30:32,880 --> 00:30:35,760
after we hack into the container upload

670
00:30:35,760 --> 00:30:38,720
the cdk into that container and then we

671
00:30:38,720 --> 00:30:41,279
use the evaluate command to find the

672
00:30:41,279 --> 00:30:41,919
weakness

673
00:30:41,919 --> 00:30:44,320
in current environment it will

674
00:30:44,320 --> 00:30:45,360
automatically

675
00:30:45,360 --> 00:30:47,919
obtain the fingerprint sensitive

676
00:30:47,919 --> 00:30:50,159
information and vulnerabilities inside

677
00:30:50,159 --> 00:30:51,360
the container

678
00:30:51,360 --> 00:30:53,520
then we can search for corresponding

679
00:30:53,520 --> 00:30:54,640
exploits

680
00:30:54,640 --> 00:30:57,039
based on the weakness evaluated by the

681
00:30:57,039 --> 00:30:58,720
tool

682
00:30:58,720 --> 00:31:01,600
the sprite model integrates dozens of

683
00:31:01,600 --> 00:31:04,960
commonly used container attack exploits

684
00:31:04,960 --> 00:31:07,039
which can automatically complete

685
00:31:07,039 --> 00:31:08,559
operations

686
00:31:08,559 --> 00:31:11,840
such as container escape extraction

687
00:31:11,840 --> 00:31:14,399
projections and lateral movement in the

688
00:31:14,399 --> 00:31:16,640
kubernetes cluster

689
00:31:16,640 --> 00:31:19,760
in addition we also restored some linux

690
00:31:19,760 --> 00:31:20,399
commands

691
00:31:20,399 --> 00:31:23,360
and network tools commonly used in pen

692
00:31:23,360 --> 00:31:24,320
testing

693
00:31:24,320 --> 00:31:27,440
to facilitate the penetration process

694
00:31:27,440 --> 00:31:30,480
in any slim container image

695
00:31:30,480 --> 00:31:33,200
in the current major release we added a

696
00:31:33,200 --> 00:31:35,679
lightweight version for cdk

697
00:31:35,679 --> 00:31:38,640
it's prepared for short live container

698
00:31:38,640 --> 00:31:39,360
shells

699
00:31:39,360 --> 00:31:42,320
such as serverless and functions we

700
00:31:42,320 --> 00:31:44,880
added build tags in source code

701
00:31:44,880 --> 00:31:47,360
and cut a few is priced to make the

702
00:31:47,360 --> 00:31:48,799
binary lighter

703
00:31:48,799 --> 00:31:51,840
just a 2mb file but contains

704
00:31:51,840 --> 00:31:55,440
90 percent of cdk employees

705
00:31:55,440 --> 00:31:58,000
you may also pick up useful splice in

706
00:31:58,000 --> 00:31:59,519
cdk source code

707
00:31:59,519 --> 00:32:02,640
to build your own lightweight binary

708
00:32:02,640 --> 00:32:04,960
so that's a brief introduction of how to

709
00:32:04,960 --> 00:32:07,440
attack cloud native kubernetes

710
00:32:07,440 --> 00:32:09,600
thank you for your time and the slides

711
00:32:09,600 --> 00:32:10,559
will be available

712
00:32:10,559 --> 00:32:13,360
on conference white side hope you enjoy

713
00:32:13,360 --> 00:32:14,720
watching it

714
00:32:14,720 --> 00:32:17,919
any feedbacks or new ideas about

715
00:32:17,919 --> 00:32:20,880
container exploitation you can post it

716
00:32:20,880 --> 00:32:22,640
to online chat box

717
00:32:22,640 --> 00:32:26,880
or create an issue in our github project

718
00:32:26,880 --> 00:32:36,640
again thank you so much

