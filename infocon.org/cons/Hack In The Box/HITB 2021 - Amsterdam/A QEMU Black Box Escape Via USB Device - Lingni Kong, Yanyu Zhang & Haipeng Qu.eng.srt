1
00:00:15,839 --> 00:00:17,199
hello everyone

2
00:00:17,199 --> 00:00:21,439
i'm fyi a senior security researcher

3
00:00:21,439 --> 00:00:24,480
at cheating technology

4
00:00:24,480 --> 00:00:27,599
i'm gonna present a disaster caused by a

5
00:00:27,599 --> 00:00:28,640
bug

6
00:00:28,640 --> 00:00:31,359
a blood blackboard escape of cumule

7
00:00:31,359 --> 00:00:32,399
based on the

8
00:00:32,399 --> 00:00:35,520
usb device

9
00:00:35,520 --> 00:00:39,040
i will analyze a vulnerability in cumule

10
00:00:39,040 --> 00:00:42,320
which has an important impact on the

11
00:00:42,320 --> 00:00:44,399
public cloud

12
00:00:44,399 --> 00:00:48,320
i will also share a new exploit method

13
00:00:48,320 --> 00:00:51,600
our new exploit method can be used to

14
00:00:51,600 --> 00:00:52,239
escape

15
00:00:52,239 --> 00:00:55,520
the public cloud without any additional

16
00:00:55,520 --> 00:00:57,360
information

17
00:00:57,360 --> 00:01:00,879
which we call a blog post escape

18
00:01:00,879 --> 00:01:04,480
now let's start

19
00:01:07,360 --> 00:01:10,159
i come from the chetan security research

20
00:01:10,159 --> 00:01:11,200
lab

21
00:01:11,200 --> 00:01:14,240
our security research lab has researched

22
00:01:14,240 --> 00:01:17,280
lots of practical targets in recent

23
00:01:17,280 --> 00:01:21,280
years including ps4 jailbreak

24
00:01:21,280 --> 00:01:24,799
android routine iot offensive research

25
00:01:24,799 --> 00:01:27,840
and so on furthermore

26
00:01:27,840 --> 00:01:30,479
we play ctf with team bloop and t

27
00:01:30,479 --> 00:01:31,840
delivers

28
00:01:31,840 --> 00:01:34,560
we are also the organizer of real world

29
00:01:34,560 --> 00:01:35,920
ctf

30
00:01:35,920 --> 00:01:39,439
we create many hard and real challenges

31
00:01:39,439 --> 00:01:43,040
every year if you are interested in

32
00:01:43,040 --> 00:01:46,399
it we welcome you to participate in

33
00:01:46,399 --> 00:01:49,600
our ctf game

34
00:01:51,040 --> 00:01:54,079
and my partner linny

35
00:01:54,079 --> 00:01:57,040
come from the information security lab

36
00:01:57,040 --> 00:01:57,280
of

37
00:01:57,280 --> 00:02:00,799
ocean university of china they also play

38
00:02:00,799 --> 00:02:01,759
ctf

39
00:02:01,759 --> 00:02:06,399
and now they are focusing on automated

40
00:02:06,840 --> 00:02:08,720
exploits if you are

41
00:02:08,720 --> 00:02:11,920
a software engineer or a security

42
00:02:11,920 --> 00:02:13,040
researcher

43
00:02:13,040 --> 00:02:14,720
you'll probably have used the

44
00:02:14,720 --> 00:02:16,879
virtualization software

45
00:02:16,879 --> 00:02:20,080
such as virtualbox qmu

46
00:02:20,080 --> 00:02:24,000
vmware workstation and so on

47
00:02:24,000 --> 00:02:27,200
but you probably have not heard about

48
00:02:27,200 --> 00:02:30,720
virtual machine escape what is a virtual

49
00:02:30,720 --> 00:02:33,680
machine escape

50
00:02:33,680 --> 00:02:37,280
in normal circumstances guest os

51
00:02:37,280 --> 00:02:41,519
runs on the hypervisor when the guest os

52
00:02:41,519 --> 00:02:45,040
executes some sensitive instructions

53
00:02:45,040 --> 00:02:48,319
all communicates with the hardware

54
00:02:48,319 --> 00:02:52,239
hypervisor will handle it the host

55
00:02:52,239 --> 00:02:55,599
emulates virtual hardware and handles

56
00:02:55,599 --> 00:02:56,319
rtc

57
00:02:56,319 --> 00:02:59,760
requests for the guest

58
00:02:59,760 --> 00:03:03,040
guest ois is isolated from

59
00:03:03,040 --> 00:03:07,599
each other and can not affect host wise

60
00:03:07,599 --> 00:03:11,040
however if there are some

61
00:03:11,040 --> 00:03:14,480
vulnerabilities existing in the host

62
00:03:14,480 --> 00:03:16,640
emulation part

63
00:03:16,640 --> 00:03:19,760
it's possible for the guest os to

64
00:03:19,760 --> 00:03:24,640
escape the virtual machine environment

65
00:03:25,040 --> 00:03:28,480
guest os can communicate with the

66
00:03:28,480 --> 00:03:31,239
motor hardware and exploit the

67
00:03:31,239 --> 00:03:32,879
vulnerabilities

68
00:03:32,879 --> 00:03:36,239
in this way it can execute arbitrary

69
00:03:36,239 --> 00:03:36,799
codes

70
00:03:36,799 --> 00:03:40,080
on the host and this is

71
00:03:40,080 --> 00:03:44,640
this is the virtual machine escape

72
00:03:45,440 --> 00:03:48,319
now before we start the vulnerability

73
00:03:48,319 --> 00:03:48,640
and

74
00:03:48,640 --> 00:03:51,760
exploit let's see how the cumule

75
00:03:51,760 --> 00:03:55,040
kvm the most popular public virtual

76
00:03:55,040 --> 00:03:57,519
machine

77
00:03:58,840 --> 00:04:00,560
works

78
00:04:00,560 --> 00:04:03,840
is an open source emulator it's

79
00:04:03,840 --> 00:04:07,439
developed for emulating many old

80
00:04:07,439 --> 00:04:10,799
or new devices and

81
00:04:10,799 --> 00:04:14,159
the kvm is a shot of

82
00:04:14,159 --> 00:04:17,199
kernel based virtual machine it's a

83
00:04:17,199 --> 00:04:18,399
kernel module

84
00:04:18,399 --> 00:04:21,440
which encapsulates intel vmx

85
00:04:21,440 --> 00:04:26,560
or amd svm for the user space

86
00:04:27,520 --> 00:04:30,800
so they are combined to get

87
00:04:30,800 --> 00:04:34,000
better experience cumule will

88
00:04:34,000 --> 00:04:36,960
emulate many devices for the guest

89
00:04:36,960 --> 00:04:38,400
virtual machine

90
00:04:38,400 --> 00:04:41,759
including net card disk

91
00:04:41,759 --> 00:04:45,520
graphics card and so on

92
00:04:45,520 --> 00:04:48,639
kvm will emulate the cpu

93
00:04:48,639 --> 00:04:51,360
and memory for the guest virtual machine

94
00:04:51,360 --> 00:04:52,160
by using

95
00:04:52,160 --> 00:04:56,880
vmx or svm

96
00:04:56,880 --> 00:05:01,120
q mu will use l control and double kvm

97
00:05:01,120 --> 00:05:05,520
which is a api provided by the kvm

98
00:05:05,520 --> 00:05:08,639
to control kvm build and run

99
00:05:08,639 --> 00:05:12,080
guest virtual machines

100
00:05:15,600 --> 00:05:19,600
and the live world which is widely used

101
00:05:19,600 --> 00:05:21,600
when you run a qmil kvm

102
00:05:21,600 --> 00:05:24,960
virtual machine is a site of open source

103
00:05:24,960 --> 00:05:26,240
apis

104
00:05:26,240 --> 00:05:29,520
demons and management toys

105
00:05:29,520 --> 00:05:33,840
for managing hardware virtualization

106
00:05:33,840 --> 00:05:38,080
in short it offers many documented api

107
00:05:38,080 --> 00:05:41,440
for users and software engineers

108
00:05:41,440 --> 00:05:45,280
to manage and run virtual machines

109
00:05:45,280 --> 00:05:50,559
most public cloud providers use lab word

110
00:05:51,600 --> 00:05:54,560
so what's the attack surface of a

111
00:05:54,560 --> 00:05:55,280
labward

112
00:05:55,280 --> 00:05:58,400
virtual machine we all know that

113
00:05:58,400 --> 00:06:01,759
the most important attack surface of a

114
00:06:01,759 --> 00:06:03,039
virtual machine

115
00:06:03,039 --> 00:06:06,080
is the virtual device lab

116
00:06:06,080 --> 00:06:08,880
work creates virtual machine with some

117
00:06:08,880 --> 00:06:10,800
volt io devices

118
00:06:10,800 --> 00:06:14,400
uhci with hid connected

119
00:06:14,400 --> 00:06:18,800
and graphic card serious vga

120
00:06:18,800 --> 00:06:22,319
is all the virtual devices you have

121
00:06:22,319 --> 00:06:25,440
when you start a virtual machine managed

122
00:06:25,440 --> 00:06:28,880
by the live world

123
00:06:29,919 --> 00:06:33,520
world io is an i o para virtualization

124
00:06:33,520 --> 00:06:36,800
solution is designed for faster

125
00:06:36,800 --> 00:06:40,880
and lighter so the logic of the vl

126
00:06:40,880 --> 00:06:41,680
device

127
00:06:41,680 --> 00:06:45,360
is simple and it also has field code and

128
00:06:45,360 --> 00:06:49,280
cv yes

129
00:06:49,280 --> 00:06:52,479
serious vga is an old graphics

130
00:06:52,479 --> 00:06:55,840
card there are some vulnerabilities

131
00:06:55,840 --> 00:06:58,880
found in serious vga but

132
00:06:58,880 --> 00:07:02,240
most of them exist in the

133
00:07:02,240 --> 00:07:05,599
process of graphics related memory

134
00:07:05,599 --> 00:07:06,880
operations

135
00:07:06,880 --> 00:07:11,520
on an independent continuous hip memory

136
00:07:11,520 --> 00:07:14,960
it means that even if you've got a hip

137
00:07:14,960 --> 00:07:16,960
overflow vulnerability

138
00:07:16,960 --> 00:07:19,759
you are only able to crash the virtual

139
00:07:19,759 --> 00:07:22,160
machine

140
00:07:23,440 --> 00:07:26,720
and the last target uhci

141
00:07:26,720 --> 00:07:30,080
with hid connected uhci

142
00:07:30,080 --> 00:07:33,840
is short for universal host controller

143
00:07:33,840 --> 00:07:37,479
interface is also known as usb

144
00:07:37,479 --> 00:07:40,639
1.0 hid

145
00:07:40,639 --> 00:07:44,639
is short for human interface device

146
00:07:44,639 --> 00:07:47,840
for example it includes the mouse and

147
00:07:47,840 --> 00:07:51,840
the keyboard we use every day

148
00:07:51,840 --> 00:07:55,599
so why is it hard to escape

149
00:07:55,599 --> 00:07:59,840
from the public cloud imagine that

150
00:07:59,840 --> 00:08:02,879
you are a security researcher and work

151
00:08:02,879 --> 00:08:05,840
for a public cloud provider

152
00:08:05,840 --> 00:08:08,800
your company is still using an old

153
00:08:08,800 --> 00:08:09,440
version

154
00:08:09,440 --> 00:08:13,840
of cumulm think it's dangerous

155
00:08:13,840 --> 00:08:17,039
but your boss needs you to prove that

156
00:08:17,039 --> 00:08:21,120
an attacker can easily attack your clone

157
00:08:21,120 --> 00:08:24,319
how do you prove that it's hard

158
00:08:24,319 --> 00:08:27,360
to prove that before because

159
00:08:27,360 --> 00:08:31,520
first we lack good vulnerabilities

160
00:08:31,520 --> 00:08:34,399
all the vulnerabilities you found cannot

161
00:08:34,399 --> 00:08:34,719
be

162
00:08:34,719 --> 00:08:38,839
used to escape the live world virtual

163
00:08:38,839 --> 00:08:40,799
machine second

164
00:08:40,799 --> 00:08:43,919
it's hard for an attacker to obtain some

165
00:08:43,919 --> 00:08:44,240
k

166
00:08:44,240 --> 00:08:47,760
information almost every escape

167
00:08:47,760 --> 00:08:50,880
exploit needs additional information

168
00:08:50,880 --> 00:08:54,000
like the boundary of cumule it's

169
00:08:54,000 --> 00:08:58,000
hard for an attacker to get this

170
00:08:58,000 --> 00:09:01,519
so that's why we think that blackpool's

171
00:09:01,519 --> 00:09:02,160
escape

172
00:09:02,160 --> 00:09:05,279
is important when we analyze the

173
00:09:05,279 --> 00:09:06,160
security

174
00:09:06,160 --> 00:09:09,839
of the public cloud

175
00:09:11,200 --> 00:09:14,480
now let's start analyzing cve

176
00:09:14,480 --> 00:09:18,800
202 14364

177
00:09:18,800 --> 00:09:21,200
the most important vulnerability in

178
00:09:21,200 --> 00:09:22,880
commune

179
00:09:22,880 --> 00:09:26,560
is a vulnerability existing in the qmil

180
00:09:26,560 --> 00:09:29,760
usb device

181
00:09:29,920 --> 00:09:32,959
this vulnerability was reported to

182
00:09:32,959 --> 00:09:37,519
red hat on august 13 2012

183
00:09:37,519 --> 00:09:40,640
and the red hat fixed and disclosed

184
00:09:40,640 --> 00:09:43,680
the vulnerability on august

185
00:09:43,680 --> 00:09:46,800
24 2012 before

186
00:09:46,800 --> 00:09:50,240
analyzing the cost of it we need to

187
00:09:50,240 --> 00:09:50,720
learn

188
00:09:50,720 --> 00:09:54,000
how usb packet transfers from the

189
00:09:54,000 --> 00:09:58,399
guest os to qmu first

190
00:10:00,640 --> 00:10:04,720
let's take uhci as an example

191
00:10:04,720 --> 00:10:08,399
the driver in guest ois will send

192
00:10:08,399 --> 00:10:12,000
usb packets by writing 4 registers

193
00:10:12,000 --> 00:10:15,040
of uhci including

194
00:10:15,040 --> 00:10:18,560
fl base address low fl base

195
00:10:18,560 --> 00:10:21,680
address high fr number and

196
00:10:21,680 --> 00:10:24,800
command when writing

197
00:10:24,800 --> 00:10:28,880
the command register it's possible

198
00:10:28,880 --> 00:10:32,399
to make the uhci starts to prepare

199
00:10:32,399 --> 00:10:36,399
a structure which stands for the usb

200
00:10:36,399 --> 00:10:39,920
package we want to send then

201
00:10:39,920 --> 00:10:43,040
the usb package will be transferred

202
00:10:43,040 --> 00:10:46,560
from the uhci to the end control

203
00:10:46,560 --> 00:10:47,519
endpoint

204
00:10:47,519 --> 00:10:52,000
of data endpoint of the usb device

205
00:10:52,000 --> 00:10:54,959
the vulnerability we are talking about

206
00:10:54,959 --> 00:10:55,839
exists

207
00:10:55,839 --> 00:10:58,880
in the processing of the uhci

208
00:10:58,880 --> 00:11:02,640
transfer usb package

209
00:11:02,800 --> 00:11:06,160
so how do qmu transfer packets

210
00:11:06,160 --> 00:11:10,399
from uhci to the usb device

211
00:11:10,399 --> 00:11:13,600
first there are three types of usb

212
00:11:13,600 --> 00:11:17,839
packets in the usb transmission protocol

213
00:11:17,839 --> 00:11:21,360
including setup detailing

214
00:11:21,360 --> 00:11:25,120
and data out qmu will check

215
00:11:25,120 --> 00:11:28,880
the type of the usb package

216
00:11:28,880 --> 00:11:32,160
if the type of the packet is set

217
00:11:32,160 --> 00:11:35,360
up then it will check if

218
00:11:35,360 --> 00:11:40,640
is a deal out or they are in package

219
00:11:41,120 --> 00:11:44,560
a dear old setup usb packet

220
00:11:44,560 --> 00:11:47,839
means that the driver or you

221
00:11:47,839 --> 00:11:50,880
want to set some control information of

222
00:11:50,880 --> 00:11:51,360
this

223
00:11:51,360 --> 00:11:55,120
usb device a deal in

224
00:11:55,120 --> 00:11:58,320
setup usb packet means that

225
00:11:58,320 --> 00:12:01,519
the driver or you want to get some

226
00:12:01,519 --> 00:12:03,200
control information

227
00:12:03,200 --> 00:12:06,880
from the usb device

228
00:12:07,120 --> 00:12:10,639
if it's a tear out setup usb

229
00:12:10,639 --> 00:12:14,320
packet then the qmil will wait for

230
00:12:14,320 --> 00:12:18,880
the data of this setup packet

231
00:12:18,880 --> 00:12:22,839
and you need to send another data out

232
00:12:22,839 --> 00:12:26,320
packet once the data

233
00:12:26,320 --> 00:12:29,440
has been padded all of this

234
00:12:29,440 --> 00:12:32,959
will be sent to the control endpoint

235
00:12:32,959 --> 00:12:36,638
of the usb device

236
00:12:36,800 --> 00:12:41,120
if is a dr in setup packet

237
00:12:41,120 --> 00:12:44,720
then the qmu will just transfer it

238
00:12:44,720 --> 00:12:47,760
to the control endpoint of the usb

239
00:12:47,760 --> 00:12:52,160
device there will be some back data from

240
00:12:52,160 --> 00:12:52,959
the usb

241
00:12:52,959 --> 00:12:56,240
device you'll need to send

242
00:12:56,240 --> 00:12:59,519
another data in packet to read

243
00:12:59,519 --> 00:13:06,240
the data back

244
00:13:06,240 --> 00:13:10,399
if is a data in package or a data out

245
00:13:10,399 --> 00:13:14,560
packet cumule will just transfer it

246
00:13:14,560 --> 00:13:19,200
to the data endpoint of the usb device

247
00:13:19,200 --> 00:13:22,800
this is the general logic of cumule

248
00:13:22,800 --> 00:13:27,199
processing packet transmission

249
00:13:28,240 --> 00:13:31,279
the vulnerability we are talking about

250
00:13:31,279 --> 00:13:34,079
is in the processing of the setup

251
00:13:34,079 --> 00:13:36,560
package

252
00:13:36,880 --> 00:13:39,680
here is some code in the function due

253
00:13:39,680 --> 00:13:41,680
token setup

254
00:13:41,680 --> 00:13:44,800
this function is used in cumule to

255
00:13:44,800 --> 00:13:45,360
handle

256
00:13:45,360 --> 00:13:49,360
setup packets as the code shows

257
00:13:49,360 --> 00:13:52,480
it copies the data in the usb

258
00:13:52,480 --> 00:13:56,720
packet to the setup buffer first

259
00:13:56,720 --> 00:14:00,079
the data of the usb packet comes

260
00:14:00,079 --> 00:14:03,440
from the guest which means that we can

261
00:14:03,440 --> 00:14:05,680
control it

262
00:14:05,680 --> 00:14:09,040
then it clears the setup index

263
00:14:09,040 --> 00:14:12,800
and the actual lines next

264
00:14:12,800 --> 00:14:16,720
it gets a set of lines by combining

265
00:14:16,720 --> 00:14:20,240
the 6 byte and the 7th byte in the

266
00:14:20,240 --> 00:14:24,000
setup buffer the setup lines

267
00:14:24,000 --> 00:14:26,399
stands for the detailed lines of the

268
00:14:26,399 --> 00:14:27,920
control information

269
00:14:27,920 --> 00:14:31,360
we want to get outside

270
00:14:31,360 --> 00:14:34,639
then it compares setup lines

271
00:14:34,639 --> 00:14:37,760
with the size of the data buffer

272
00:14:37,760 --> 00:14:41,279
if it's bigger than the check fields

273
00:14:41,279 --> 00:14:44,959
but before returning this function

274
00:14:44,959 --> 00:14:48,480
does not clear the setup lines

275
00:14:48,480 --> 00:14:51,839
so here comes a problem

276
00:14:51,839 --> 00:14:54,639
let's see what happens when we send

277
00:14:54,639 --> 00:14:56,079
another data out

278
00:14:56,079 --> 00:14:59,600
usb packet

279
00:14:59,600 --> 00:15:03,680
cumule uses a function named token out

280
00:15:03,680 --> 00:15:07,519
to handle it as the code shows

281
00:15:07,519 --> 00:15:11,600
if the setup state is set up state data

282
00:15:11,600 --> 00:15:15,519
it will copy data between the usb packet

283
00:15:15,519 --> 00:15:19,199
we send and the data buffer by using

284
00:15:19,199 --> 00:15:22,319
the setup lines

285
00:15:22,399 --> 00:15:26,800
so how do we build a poc we can build a

286
00:15:26,800 --> 00:15:27,600
poc

287
00:15:27,600 --> 00:15:31,680
in three steps first we send an

288
00:15:31,680 --> 00:15:35,440
eight byte setup packet the sixth byte

289
00:15:35,440 --> 00:15:38,959
is 0x80 and

290
00:15:38,959 --> 00:15:42,720
the seventh byte is zero we will set

291
00:15:42,720 --> 00:15:46,639
setup state to be set up state data

292
00:15:46,639 --> 00:15:49,920
after sending it

293
00:15:50,079 --> 00:15:53,360
second we send another

294
00:15:53,360 --> 00:15:57,120
byte setup packet the 6 byte

295
00:15:57,120 --> 00:16:00,160
and the 7th byte is 0x

296
00:16:00,160 --> 00:16:03,199
ff this package will

297
00:16:03,199 --> 00:16:06,639
size setup lines big enough and

298
00:16:06,639 --> 00:16:10,399
it will fill in the check

299
00:16:10,800 --> 00:16:14,160
suddenly we send an unbite

300
00:16:14,160 --> 00:16:18,000
data out packet then there will be an

301
00:16:18,000 --> 00:16:21,680
overflow right to the data buffer

302
00:16:21,680 --> 00:16:24,800
so that's the vulnerability and how we

303
00:16:24,800 --> 00:16:26,079
build a poc

304
00:16:26,079 --> 00:16:28,479
for it

305
00:16:29,759 --> 00:16:34,839
now let me share our black box escape

306
00:16:34,839 --> 00:16:36,880
method first

307
00:16:36,880 --> 00:16:40,160
why do we need blackboard's escape

308
00:16:40,160 --> 00:16:43,440
just like the example i took before

309
00:16:43,440 --> 00:16:46,560
it's hard for an attacker to get some

310
00:16:46,560 --> 00:16:46,880
key

311
00:16:46,880 --> 00:16:50,160
information like humus version on the

312
00:16:50,160 --> 00:16:52,720
binary field of cumule

313
00:16:52,720 --> 00:16:55,839
so it's important for us to find a

314
00:16:55,839 --> 00:16:56,800
method

315
00:16:56,800 --> 00:17:00,639
which does not need this

316
00:17:01,360 --> 00:17:04,720
so what do we have now after building

317
00:17:04,720 --> 00:17:06,640
the poc

318
00:17:06,640 --> 00:17:10,000
it's upwards that we can do out of bound

319
00:17:10,000 --> 00:17:13,199
read and write of the data buffer

320
00:17:13,199 --> 00:17:17,199
between 0 to 0x fff

321
00:17:17,199 --> 00:17:20,400
so how do we bring some k

322
00:17:20,400 --> 00:17:24,160
information after

323
00:17:24,160 --> 00:17:27,919
analyzing the usb device structure

324
00:17:27,919 --> 00:17:30,880
we found that the usb described

325
00:17:30,880 --> 00:17:32,640
structure pointer

326
00:17:32,640 --> 00:17:35,919
contains the description of this

327
00:17:35,919 --> 00:17:38,960
usb device

328
00:17:38,960 --> 00:17:42,320
we all know that every usb device

329
00:17:42,320 --> 00:17:46,080
has its own vendor id and product id

330
00:17:46,080 --> 00:17:49,360
for the driver to identify

331
00:17:49,360 --> 00:17:53,360
what this usb device is

332
00:17:53,840 --> 00:17:56,880
kumu emulates this by using the usb

333
00:17:56,880 --> 00:17:59,039
description structure

334
00:17:59,039 --> 00:18:03,280
we can get all the usb description id

335
00:18:03,280 --> 00:18:06,320
in the guest by sending some normal

336
00:18:06,320 --> 00:18:09,919
usb packets so

337
00:18:09,919 --> 00:18:13,360
here comes the idea of arbitrary address

338
00:18:13,360 --> 00:18:16,720
reading we can override

339
00:18:16,720 --> 00:18:20,480
the pointer of the usb description

340
00:18:20,480 --> 00:18:23,520
and then get the usb description

341
00:18:23,520 --> 00:18:29,840
id back to do an arbitrary address read

342
00:18:30,559 --> 00:18:34,320
now we can do arbitrary address read

343
00:18:34,320 --> 00:18:37,760
if we want to run some commands in the

344
00:18:37,760 --> 00:18:39,120
hostwise

345
00:18:39,120 --> 00:18:42,880
to prove that we escape from the guest

346
00:18:42,880 --> 00:18:46,160
virtual machine using the system

347
00:18:46,160 --> 00:18:46,960
function

348
00:18:46,960 --> 00:18:50,320
in the left c is a way to do it

349
00:18:50,320 --> 00:18:53,679
so next we try to get the address

350
00:18:53,679 --> 00:18:57,360
of the system function we find

351
00:18:57,360 --> 00:19:00,799
that the usb endpoint structure has a

352
00:19:00,799 --> 00:19:01,600
pointer

353
00:19:01,600 --> 00:19:04,799
to the usb device

354
00:19:04,799 --> 00:19:08,000
and there is a free function pointer in

355
00:19:08,000 --> 00:19:08,960
the usb

356
00:19:08,960 --> 00:19:13,120
device state structure

357
00:19:13,600 --> 00:19:16,880
but this free pointer does not

358
00:19:16,880 --> 00:19:22,160
point to the free function in the left c

359
00:19:22,799 --> 00:19:26,640
it points to the plt segment in a shared

360
00:19:26,640 --> 00:19:27,919
library

361
00:19:27,919 --> 00:19:31,120
we pass the code in the plt

362
00:19:31,120 --> 00:19:34,559
segment and read back the address stored

363
00:19:34,559 --> 00:19:37,600
in the gold segment finally

364
00:19:37,600 --> 00:19:40,640
we get the free function address in lab

365
00:19:40,640 --> 00:19:42,880
c

366
00:19:44,880 --> 00:19:46,880
after guiding the address of the

367
00:19:46,880 --> 00:19:48,160
function 3

368
00:19:48,160 --> 00:19:50,400
we get the address of the function

369
00:19:50,400 --> 00:19:51,280
system

370
00:19:51,280 --> 00:19:55,679
like dividend eof does in pawn toys

371
00:19:55,679 --> 00:19:58,880
we search for the erf magic number

372
00:19:58,880 --> 00:20:02,559
forward first to get the base address

373
00:20:02,559 --> 00:20:06,080
of the lab c then

374
00:20:06,080 --> 00:20:08,559
we find the dividend string and the

375
00:20:08,559 --> 00:20:10,640
dividend symbol sections

376
00:20:10,640 --> 00:20:15,120
by passing the header of the erf

377
00:20:15,120 --> 00:20:18,559
and finally we search for the system

378
00:20:18,559 --> 00:20:19,280
string

379
00:20:19,280 --> 00:20:22,559
in the dividend string section and

380
00:20:22,559 --> 00:20:26,000
get the offset of the system function

381
00:20:26,000 --> 00:20:29,840
in the dividend symbol section

382
00:20:29,840 --> 00:20:33,200
now we get the address

383
00:20:33,200 --> 00:20:37,039
of the function system then

384
00:20:37,039 --> 00:20:41,200
we consider how we control the workflow

385
00:20:41,200 --> 00:20:45,200
we find that there is a function pointer

386
00:20:45,200 --> 00:20:49,039
in the hid state structure

387
00:20:49,039 --> 00:20:52,240
we are able to call it by sending some

388
00:20:52,240 --> 00:20:55,840
usb package to the control endpoint

389
00:20:55,840 --> 00:20:59,600
of the hid device so

390
00:20:59,600 --> 00:21:03,520
we overwrite the event function pointer

391
00:21:03,520 --> 00:21:06,720
to the address of set of the system

392
00:21:06,720 --> 00:21:10,159
and overwrite the head of the hid state

393
00:21:10,159 --> 00:21:11,200
strategy

394
00:21:11,200 --> 00:21:14,640
to the command we want to execute

395
00:21:14,640 --> 00:21:18,480
and finally we successfully escaped

396
00:21:18,480 --> 00:21:21,760
from the guest

397
00:21:26,159 --> 00:21:29,600
here is a demo we recorded we use

398
00:21:29,600 --> 00:21:32,799
word manager to run the guest virtual

399
00:21:32,799 --> 00:21:35,200
machine

400
00:21:42,080 --> 00:21:46,879
and finally we pop a calculator

401
00:21:47,440 --> 00:21:51,200
here comes a conclusion first

402
00:21:51,200 --> 00:21:54,320
i think that send boxes are

403
00:21:54,320 --> 00:21:57,039
necessary even in public cloud

404
00:21:57,039 --> 00:21:58,799
environments

405
00:21:58,799 --> 00:22:02,320
sandbox is a good toy to protect

406
00:22:02,320 --> 00:22:05,760
the vulnerable part and it has been

407
00:22:05,760 --> 00:22:06,960
widely used

408
00:22:06,960 --> 00:22:10,000
in browsers however

409
00:22:10,000 --> 00:22:12,960
there may be a lot of work to be done on

410
00:22:12,960 --> 00:22:13,840
the design

411
00:22:13,840 --> 00:22:17,679
of the sandbox second

412
00:22:17,679 --> 00:22:20,640
good vulnerabilities can do a lot of

413
00:22:20,640 --> 00:22:22,960
interesting things

414
00:22:22,960 --> 00:22:26,080
escaping from the guests is only one of

415
00:22:26,080 --> 00:22:27,039
them

416
00:22:27,039 --> 00:22:30,000
like the vulnerabilities we show we are

417
00:22:30,000 --> 00:22:32,480
also able to dump the memory of the

418
00:22:32,480 --> 00:22:34,480
cumule process

419
00:22:34,480 --> 00:22:38,240
we can get all the fields including qmu

420
00:22:38,240 --> 00:22:42,880
many shared libraries and so on

421
00:22:42,880 --> 00:22:45,440
it's even possible to run some share

422
00:22:45,440 --> 00:22:46,559
codes

423
00:22:46,559 --> 00:22:49,840
if there is a sandbox we can test

424
00:22:49,840 --> 00:22:53,120
the samples in our cell codes and try to

425
00:22:53,120 --> 00:22:53,840
bypass

426
00:22:53,840 --> 00:22:57,600
it so good vulnerabilities

427
00:22:57,600 --> 00:23:00,960
bring us more possibilities

428
00:23:00,960 --> 00:23:04,799
and third the skills used in ctf

429
00:23:04,799 --> 00:23:08,159
are really helpful someone has told me

430
00:23:08,159 --> 00:23:08,720
that

431
00:23:08,720 --> 00:23:12,400
the skills you learn in ctf are useless

432
00:23:12,400 --> 00:23:15,919
in real vulnerability but in our exploit

433
00:23:15,919 --> 00:23:16,799
method

434
00:23:16,799 --> 00:23:23,520
we use many skills in ctf

435
00:23:23,520 --> 00:23:26,880
and that's all we want to share we also

436
00:23:26,880 --> 00:23:29,840
wrote a white paper which contains all

437
00:23:29,840 --> 00:23:32,240
the technical details

438
00:23:32,240 --> 00:23:35,280
if you've got any questions about all of

439
00:23:35,280 --> 00:23:36,080
this

440
00:23:36,080 --> 00:23:38,960
you can contact me through twitter

441
00:23:38,960 --> 00:23:40,880
here's my twitter

442
00:23:40,880 --> 00:23:51,120
that's all thanks for your watching

