1
00:00:15,519 --> 00:00:15,839
hi

2
00:00:15,839 --> 00:00:17,600
and welcome to our presentation about

3
00:00:17,600 --> 00:00:18,880
mac os security

4
00:00:18,880 --> 00:00:22,240
escaping the sandbox and bypassing tcc

5
00:00:22,240 --> 00:00:25,039
my name is dan cooper i'm and i'm here

6
00:00:25,039 --> 00:00:26,400
today with my colleague thai's all

7
00:00:26,400 --> 00:00:28,640
kamada

8
00:00:28,640 --> 00:00:31,679
we work for a computer computer is a

9
00:00:31,679 --> 00:00:33,600
security company in the netherlands we

10
00:00:33,600 --> 00:00:35,680
offer services like

11
00:00:35,680 --> 00:00:39,840
penetration testing training etc

12
00:00:39,840 --> 00:00:41,840
and specifically we work for the

13
00:00:41,840 --> 00:00:43,120
research department

14
00:00:43,120 --> 00:00:46,320
sector 7 where we conduct security risk

15
00:00:46,320 --> 00:00:48,879
research

16
00:00:49,920 --> 00:00:54,160
we researched the internals of mac os

17
00:00:54,160 --> 00:00:55,760
security

18
00:00:55,760 --> 00:00:57,920
but you might also known us from our

19
00:00:57,920 --> 00:00:58,879
entrance in

20
00:00:58,879 --> 00:01:00,480
this year's pawn to one competition

21
00:01:00,480 --> 00:01:03,120
where we have demonstrated a zero day

22
00:01:03,120 --> 00:01:04,239
attack against the

23
00:01:04,239 --> 00:01:08,000
zoom video conferencing client

24
00:01:08,080 --> 00:01:11,280
so suppose the hypothetical situation

25
00:01:11,280 --> 00:01:12,080
that you have

26
00:01:12,080 --> 00:01:15,840
code execution on a macos installation

27
00:01:15,840 --> 00:01:18,880
as an unprivileged user

28
00:01:18,880 --> 00:01:22,000
how do you get from that starting point

29
00:01:22,000 --> 00:01:25,600
to having access to either

30
00:01:25,600 --> 00:01:29,040
root on files or accessing

31
00:01:29,040 --> 00:01:32,799
stuff like the camera and microphone etc

32
00:01:32,799 --> 00:01:35,920
which hurdles you then have to overcome

33
00:01:35,920 --> 00:01:37,520
those are topics we would like to

34
00:01:37,520 --> 00:01:39,680
discuss with you today

35
00:01:39,680 --> 00:01:43,119
so for that we divided the presentation

36
00:01:43,119 --> 00:01:45,439
in two parts first i will take you

37
00:01:45,439 --> 00:01:47,119
through all the

38
00:01:47,119 --> 00:01:50,079
current mitigation techniques that are

39
00:01:50,079 --> 00:01:51,040
implemented in

40
00:01:51,040 --> 00:01:54,720
a modern macos installation and secondly

41
00:01:54,720 --> 00:01:57,119
my colleague ties will

42
00:01:57,119 --> 00:01:58,320
walk you through some of the

43
00:01:58,320 --> 00:02:00,399
vulnerabilities we have found during our

44
00:02:00,399 --> 00:02:01,759
research

45
00:02:01,759 --> 00:02:04,000
for this we have to know that many of

46
00:02:04,000 --> 00:02:05,759
the vulnerabilities we have discovered

47
00:02:05,759 --> 00:02:10,959
are still unfixed

48
00:02:10,959 --> 00:02:13,520
so i will give apple some more time to

49
00:02:13,520 --> 00:02:15,120
fix those vulnerabilities but as a

50
00:02:15,120 --> 00:02:15,920
consequence

51
00:02:15,920 --> 00:02:18,560
we can discuss many of the concepts we

52
00:02:18,560 --> 00:02:19,920
have used but we cannot

53
00:02:19,920 --> 00:02:22,400
share any very specific details about

54
00:02:22,400 --> 00:02:24,480
the vulnerabilities

55
00:02:24,480 --> 00:02:27,280
so let's start with the security

56
00:02:27,280 --> 00:02:28,640
mechanisms of

57
00:02:28,640 --> 00:02:31,680
in macos and

58
00:02:31,680 --> 00:02:34,480
i will just go buy them one by one and

59
00:02:34,480 --> 00:02:36,160
give an explanation

60
00:02:36,160 --> 00:02:38,319
on how each technique works and what it

61
00:02:38,319 --> 00:02:39,440
implies

62
00:02:39,440 --> 00:02:41,440
so the first technique we would like to

63
00:02:41,440 --> 00:02:44,400
talk you to about is gatekeeper

64
00:02:44,400 --> 00:02:46,319
and gatekeeper is actually the code name

65
00:02:46,319 --> 00:02:48,480
for something that is well known as code

66
00:02:48,480 --> 00:02:49,120
signing

67
00:02:49,120 --> 00:02:52,160
and it was introduced in macos lion

68
00:02:52,160 --> 00:02:54,800
which was a long time ago and it's

69
00:02:54,800 --> 00:02:55,360
currently

70
00:02:55,360 --> 00:02:59,280
required if users would like to

71
00:02:59,280 --> 00:03:00,959
install an application that it's signed

72
00:03:00,959 --> 00:03:02,400
by apple

73
00:03:02,400 --> 00:03:04,800
users still have the option to also

74
00:03:04,800 --> 00:03:07,040
install applications that are unsigned

75
00:03:07,040 --> 00:03:10,400
but they have to explicitly approve

76
00:03:10,400 --> 00:03:12,720
running that app in their privacy and

77
00:03:12,720 --> 00:03:15,360
security settings

78
00:03:15,360 --> 00:03:18,879
the verification of the code signature

79
00:03:18,879 --> 00:03:22,560
is handled by a kernel extension

80
00:03:22,560 --> 00:03:26,159
which is accompanied by a user daemon

81
00:03:26,159 --> 00:03:30,159
for the signature verification

82
00:03:30,159 --> 00:03:33,280
an important part of code signing

83
00:03:33,280 --> 00:03:37,360
is what mac os calls entitlements

84
00:03:37,360 --> 00:03:40,480
the same technique also applies to ios

85
00:03:40,480 --> 00:03:43,760
but every code site application can be

86
00:03:43,760 --> 00:03:46,239
given a very fine-grained set of

87
00:03:46,239 --> 00:03:49,360
permission by apple

88
00:03:49,360 --> 00:03:52,560
which are called the entitlements and

89
00:03:52,560 --> 00:03:54,879
very specific permissions are given out

90
00:03:54,879 --> 00:03:57,040
to specific applications for example vpn

91
00:03:57,040 --> 00:03:59,120
application needs to

92
00:03:59,120 --> 00:04:00,879
make changes to the current network

93
00:04:00,879 --> 00:04:02,560
stack so

94
00:04:02,560 --> 00:04:04,400
the vpn software will get a very

95
00:04:04,400 --> 00:04:07,200
specific entitlement for that

96
00:04:07,200 --> 00:04:11,040
and what currently is happening is that

97
00:04:11,040 --> 00:04:13,200
to make the attack servers for a

98
00:04:13,200 --> 00:04:15,040
specific application that requires

99
00:04:15,040 --> 00:04:16,000
certain

100
00:04:16,000 --> 00:04:18,560
entitlements as small as possible is

101
00:04:18,560 --> 00:04:19,519
that

102
00:04:19,519 --> 00:04:22,160
those entitlements are only given out to

103
00:04:22,160 --> 00:04:23,759
small helper demons

104
00:04:23,759 --> 00:04:25,280
which will be signed and giving a

105
00:04:25,280 --> 00:04:27,280
specific entitlements

106
00:04:27,280 --> 00:04:30,639
and their larger application will use

107
00:04:30,639 --> 00:04:32,960
an inter-process communication system

108
00:04:32,960 --> 00:04:33,680
which

109
00:04:33,680 --> 00:04:37,040
on mac os is typically xbc

110
00:04:37,040 --> 00:04:40,840
to actually talk to the smaller helper

111
00:04:40,840 --> 00:04:42,560
demon

112
00:04:42,560 --> 00:04:45,759
so having code signing is an important

113
00:04:45,759 --> 00:04:47,120
security mechanism

114
00:04:47,120 --> 00:04:50,160
in the macos ecosystem

115
00:04:50,160 --> 00:04:53,520
but it is important to realize that

116
00:04:53,520 --> 00:04:57,040
once an application has a specific

117
00:04:57,040 --> 00:05:00,240
entitlement and is signed that signature

118
00:05:00,240 --> 00:05:01,120
is valid

119
00:05:01,120 --> 00:05:04,320
uh basically forever so if

120
00:05:04,320 --> 00:05:06,800
you as a malware developer for example

121
00:05:06,800 --> 00:05:08,000
you would like to have

122
00:05:08,000 --> 00:05:11,360
certain privileges within the macos

123
00:05:11,360 --> 00:05:14,720
ecosystem what you can do is just

124
00:05:14,720 --> 00:05:16,560
download an older version of some

125
00:05:16,560 --> 00:05:18,560
software that has a known probability in

126
00:05:18,560 --> 00:05:18,960
it

127
00:05:18,960 --> 00:05:21,759
but does have a signature with the

128
00:05:21,759 --> 00:05:24,960
entitlement you would like to to use

129
00:05:24,960 --> 00:05:27,120
and since the signature is still valid

130
00:05:27,120 --> 00:05:28,000
you could just

131
00:05:28,000 --> 00:05:29,840
use the vulnerability in the software

132
00:05:29,840 --> 00:05:31,039
and you can

133
00:05:31,039 --> 00:05:34,400
you will have the same privilege

134
00:05:36,400 --> 00:05:39,280
there is a tool which you can use to

135
00:05:39,280 --> 00:05:39,840
look for

136
00:05:39,840 --> 00:05:41,199
the entitlements of a specific

137
00:05:41,199 --> 00:05:43,199
application for example this is the

138
00:05:43,199 --> 00:05:43,919
output for

139
00:05:43,919 --> 00:05:47,199
the ps utility and to get process

140
00:05:47,199 --> 00:05:48,240
information

141
00:05:48,240 --> 00:05:50,080
you will need a special entitlement

142
00:05:50,080 --> 00:05:51,759
called task for paid parallel

143
00:05:51,759 --> 00:05:55,280
which allows bs to get information about

144
00:05:55,280 --> 00:05:58,159
a different process

145
00:05:58,560 --> 00:06:01,680
you can also look at the code signatures

146
00:06:01,680 --> 00:06:05,120
for each application and basically what

147
00:06:05,120 --> 00:06:06,560
happens is that every

148
00:06:06,560 --> 00:06:10,160
static code page in a mac o binary

149
00:06:10,160 --> 00:06:13,120
will have a specific code signature over

150
00:06:13,120 --> 00:06:13,840
that

151
00:06:13,840 --> 00:06:16,239
segment

152
00:06:17,199 --> 00:06:18,960
the code segment is typically at the end

153
00:06:18,960 --> 00:06:21,199
of the binary you can extract it you can

154
00:06:21,199 --> 00:06:24,400
unpack it etc

155
00:06:24,400 --> 00:06:26,880
so another thing to realize is that the

156
00:06:26,880 --> 00:06:28,800
binary itself is signed

157
00:06:28,800 --> 00:06:31,520
and it is checked upon every execution

158
00:06:31,520 --> 00:06:34,160
so if you change the binary the next

159
00:06:34,160 --> 00:06:35,919
time the application will start

160
00:06:35,919 --> 00:06:38,720
it will have an invalid signature the

161
00:06:38,720 --> 00:06:39,440
resource

162
00:06:39,440 --> 00:06:42,319
sources however although there are also

163
00:06:42,319 --> 00:06:43,120
signs

164
00:06:43,120 --> 00:06:46,319
they are only checked once but only

165
00:06:46,319 --> 00:06:48,960
and only if there is a specific

166
00:06:48,960 --> 00:06:50,000
quarantine bit

167
00:06:50,000 --> 00:06:53,199
set on the the application so if you

168
00:06:53,199 --> 00:06:55,039
change the resources of an application

169
00:06:55,039 --> 00:06:56,160
after it's

170
00:06:56,160 --> 00:06:59,440
run the first time uh the code signature

171
00:06:59,440 --> 00:07:01,120
will not be validated for those

172
00:07:01,120 --> 00:07:03,840
resources

173
00:07:03,840 --> 00:07:06,000
that might pose a threat but it does

174
00:07:06,000 --> 00:07:06,880
also

175
00:07:06,880 --> 00:07:09,599
this is done due to the performance

176
00:07:09,599 --> 00:07:11,520
impact it will otherwise have on

177
00:07:11,520 --> 00:07:13,360
loading an application because if there

178
00:07:13,360 --> 00:07:14,720
is a lot of resources

179
00:07:14,720 --> 00:07:16,560
then you also have to hash the entire

180
00:07:16,560 --> 00:07:18,560
file to check the uh

181
00:07:18,560 --> 00:07:20,319
the signature of the resource for every

182
00:07:20,319 --> 00:07:24,880
execution which is very time consuming

183
00:07:24,880 --> 00:07:27,759
so in a later mac os release mac os

184
00:07:27,759 --> 00:07:29,280
mojave

185
00:07:29,280 --> 00:07:31,199
we have something which called a

186
00:07:31,199 --> 00:07:33,360
hardened runtime

187
00:07:33,360 --> 00:07:36,080
this is enforced for apps that are

188
00:07:36,080 --> 00:07:38,160
installed via the app store

189
00:07:38,160 --> 00:07:41,199
and basically it protects the app from

190
00:07:41,199 --> 00:07:43,599
various forms of

191
00:07:43,599 --> 00:07:47,199
process injection so it prohibits some

192
00:07:47,199 --> 00:07:49,759
environment variables to dynamically

193
00:07:49,759 --> 00:07:54,319
load different shared libraries etc

194
00:07:54,560 --> 00:07:56,639
so this is something that is enforced

195
00:07:56,639 --> 00:07:58,639
for apps that are installed from the app

196
00:07:58,639 --> 00:07:59,520
store

197
00:07:59,520 --> 00:08:01,440
we come back to in heart at runtime at a

198
00:08:01,440 --> 00:08:04,960
later point in this presentation

199
00:08:04,960 --> 00:08:08,080
next is seat belts which

200
00:08:08,080 --> 00:08:11,680
is the app sandbox implementation in

201
00:08:11,680 --> 00:08:15,440
in macos it has been around since macos

202
00:08:15,440 --> 00:08:17,440
leopards

203
00:08:17,440 --> 00:08:19,919
and it is enforced for almost all

204
00:08:19,919 --> 00:08:22,080
applications

205
00:08:22,080 --> 00:08:24,879
so apps from the app store will get a

206
00:08:24,879 --> 00:08:27,680
specific

207
00:08:27,680 --> 00:08:31,199
sandbox profile

208
00:08:31,280 --> 00:08:34,719
and since mac os lion

209
00:08:34,719 --> 00:08:36,479
it's also the case that every

210
00:08:36,479 --> 00:08:38,000
application will get its separate

211
00:08:38,000 --> 00:08:39,519
container

212
00:08:39,519 --> 00:08:42,479
which is similar to ios where in the

213
00:08:42,479 --> 00:08:44,240
application will have its documents

214
00:08:44,240 --> 00:08:46,320
folder etc

215
00:08:46,320 --> 00:08:48,080
the implementation of seatbelt is

216
00:08:48,080 --> 00:08:50,080
handled by the sandbox

217
00:08:50,080 --> 00:08:53,360
kernel extension and accompany daemon

218
00:08:53,360 --> 00:08:56,959
which runs in user space

219
00:08:57,760 --> 00:09:00,000
so the sandbox profiles are written in

220
00:09:00,000 --> 00:09:01,920
the scheme language

221
00:09:01,920 --> 00:09:05,600
and can be found within the file system

222
00:09:05,600 --> 00:09:08,399
and the sandbox implementation has hooks

223
00:09:08,399 --> 00:09:10,080
in all system calls

224
00:09:10,080 --> 00:09:13,440
so entire in across the entire kernel

225
00:09:13,440 --> 00:09:14,080
tree

226
00:09:14,080 --> 00:09:16,800
you will see calls to check if the

227
00:09:16,800 --> 00:09:19,120
specific system call is allowed

228
00:09:19,120 --> 00:09:22,160
within the current sandbox profile

229
00:09:22,160 --> 00:09:23,440
and the profile is based on the

230
00:09:23,440 --> 00:09:25,600
entitlement of an application as some

231
00:09:25,600 --> 00:09:26,240
kind of

232
00:09:26,240 --> 00:09:29,120
entitlements require some additional

233
00:09:29,120 --> 00:09:30,800
sandbox

234
00:09:30,800 --> 00:09:33,439
exceptions

235
00:09:34,399 --> 00:09:38,240
this is an example a sandbox profile

236
00:09:38,240 --> 00:09:39,200
this is for the

237
00:09:39,200 --> 00:09:41,760
imessage address book application where

238
00:09:41,760 --> 00:09:43,200
you can see it can communicate with

239
00:09:43,200 --> 00:09:45,200
certain services and can read or write

240
00:09:45,200 --> 00:09:48,080
certain files

241
00:09:49,440 --> 00:09:51,440
the next protection mechanism we would

242
00:09:51,440 --> 00:09:52,480
like to talk you to

243
00:09:52,480 --> 00:09:55,120
about is system integrity protection or

244
00:09:55,120 --> 00:09:57,120
sip

245
00:09:57,120 --> 00:10:02,160
it was released in macos el capitan

246
00:10:02,160 --> 00:10:04,399
it is sometimes referred to as rootless

247
00:10:04,399 --> 00:10:05,279
and internal

248
00:10:05,279 --> 00:10:07,440
it's internally it's often referred to

249
00:10:07,440 --> 00:10:08,720
by as csr

250
00:10:08,720 --> 00:10:11,120
which stands for configurable software

251
00:10:11,120 --> 00:10:12,640
restrictions

252
00:10:12,640 --> 00:10:15,120
and it is aimed at limiting the power

253
00:10:15,120 --> 00:10:17,760
the root user has on a system

254
00:10:17,760 --> 00:10:20,079
as apple described it typically on a

255
00:10:20,079 --> 00:10:21,279
pre-alcatent

256
00:10:21,279 --> 00:10:24,079
system the attacker was only one

257
00:10:24,079 --> 00:10:25,920
password prompt away from getting

258
00:10:25,920 --> 00:10:29,440
full system access most systems only had

259
00:10:29,440 --> 00:10:30,240
one user

260
00:10:30,240 --> 00:10:33,839
the user also has system privileges

261
00:10:33,839 --> 00:10:36,399
so if you have access to the user

262
00:10:36,399 --> 00:10:38,320
account you typically only need

263
00:10:38,320 --> 00:10:40,640
the password so you can escalate your

264
00:10:40,640 --> 00:10:42,720
privileges to root

265
00:10:42,720 --> 00:10:45,440
and then you could modify any part of

266
00:10:45,440 --> 00:10:46,959
the system

267
00:10:46,959 --> 00:10:51,120
so uh system integrity protection is a

268
00:10:51,120 --> 00:10:53,920
at limiting the power the root user has

269
00:10:53,920 --> 00:10:54,959
it restricts

270
00:10:54,959 --> 00:10:58,000
file uh modifications it restricts

271
00:10:58,000 --> 00:10:59,760
the loading of kernel and system

272
00:10:59,760 --> 00:11:01,279
extensions it

273
00:11:01,279 --> 00:11:03,519
restricts things like process debugging

274
00:11:03,519 --> 00:11:05,519
so you cannot

275
00:11:05,519 --> 00:11:08,079
attach a debugger to many system

276
00:11:08,079 --> 00:11:10,640
processes

277
00:11:11,839 --> 00:11:15,200
if a specific file or directory is

278
00:11:15,200 --> 00:11:16,880
protected by

279
00:11:16,880 --> 00:11:20,000
sip is something you can check by

280
00:11:20,000 --> 00:11:22,079
requesting the extended attributes on

281
00:11:22,079 --> 00:11:25,279
the file on directory

282
00:11:25,279 --> 00:11:27,440
for example you can see that the entire

283
00:11:27,440 --> 00:11:30,360
slash bin directory has an attribute of

284
00:11:30,360 --> 00:11:31,680
com.apple.rootless

285
00:11:31,680 --> 00:11:33,360
which means that that directory is

286
00:11:33,360 --> 00:11:34,140
protected by

287
00:11:34,140 --> 00:11:35,920
[Applause]

288
00:11:35,920 --> 00:11:38,399
by system integrity protection and the

289
00:11:38,399 --> 00:11:40,560
ls binary is restricted which means you

290
00:11:40,560 --> 00:11:42,000
cannot read or write or you can

291
00:11:42,000 --> 00:11:43,200
overwrite

292
00:11:43,200 --> 00:11:45,920
to the binary

293
00:11:46,320 --> 00:11:48,560
so basically the technical

294
00:11:48,560 --> 00:11:50,320
implementation of system integrity

295
00:11:50,320 --> 00:11:51,360
protection is

296
00:11:51,360 --> 00:11:56,800
just another a sandbox profile

297
00:11:56,800 --> 00:11:59,920
you can look at the configuration uh

298
00:11:59,920 --> 00:12:03,360
in a modern mac system and sip

299
00:12:03,360 --> 00:12:08,240
is enforced by a configuration variable

300
00:12:08,240 --> 00:12:11,760
so um that variable is

301
00:12:11,760 --> 00:12:15,600
placed in nvram so you

302
00:12:15,600 --> 00:12:18,800
uh um so system boot it will read that

303
00:12:18,800 --> 00:12:20,639
variable it will know system integrity

304
00:12:20,639 --> 00:12:22,160
protection is turned on

305
00:12:22,160 --> 00:12:25,440
um and it will enforce it from

306
00:12:25,440 --> 00:12:29,120
early boot stage um you can change that

307
00:12:29,120 --> 00:12:31,760
variable of course uh by just setting

308
00:12:31,760 --> 00:12:33,200
resetting the nvram

309
00:12:33,200 --> 00:12:35,839
variable however setting the specific

310
00:12:35,839 --> 00:12:36,959
variable for

311
00:12:36,959 --> 00:12:41,200
disabling zip is also protected by zip

312
00:12:41,200 --> 00:12:42,959
so if you would like to disable it you

313
00:12:42,959 --> 00:12:44,959
can boot into a recovery mode

314
00:12:44,959 --> 00:12:47,680
change the nvram variable reboot and

315
00:12:47,680 --> 00:12:49,920
then the system will boot without a

316
00:12:49,920 --> 00:12:53,839
zip protection enabled

317
00:12:55,440 --> 00:12:57,760
so

318
00:12:58,560 --> 00:13:01,120
another thing that is recent in modern

319
00:13:01,120 --> 00:13:02,959
macos operating system is something that

320
00:13:02,959 --> 00:13:05,120
is called transparency consent and

321
00:13:05,120 --> 00:13:06,399
control

322
00:13:06,399 --> 00:13:11,200
or tcc for short and

323
00:13:11,519 --> 00:13:14,000
you have probably seen this as a macos

324
00:13:14,000 --> 00:13:15,279
user when

325
00:13:15,279 --> 00:13:17,519
an application that requires access to

326
00:13:17,519 --> 00:13:18,399
your request

327
00:13:18,399 --> 00:13:21,440
access to your camera or microphone this

328
00:13:21,440 --> 00:13:25,680
is something that is handled by tcc

329
00:13:25,680 --> 00:13:29,600
so this is done to further limit

330
00:13:29,600 --> 00:13:32,240
the access normal access a typical

331
00:13:32,240 --> 00:13:33,680
application has

332
00:13:33,680 --> 00:13:35,440
so typical application can no longer

333
00:13:35,440 --> 00:13:37,760
directly access your camera it first

334
00:13:37,760 --> 00:13:39,760
needs to ask permission

335
00:13:39,760 --> 00:13:42,079
before it's allowed to get the camera

336
00:13:42,079 --> 00:13:44,399
feed

337
00:13:44,720 --> 00:13:48,320
it was introduced in mojave and

338
00:13:48,320 --> 00:13:51,199
it is basically a dynamic sandbox for

339
00:13:51,199 --> 00:13:53,199
privacy sensitive subsystems

340
00:13:53,199 --> 00:13:55,760
and whereas the sandbox we talked about

341
00:13:55,760 --> 00:13:56,720
earlier is

342
00:13:56,720 --> 00:13:59,920
a static sandbox it won't change over

343
00:13:59,920 --> 00:14:00,800
time

344
00:14:00,800 --> 00:14:04,320
tcc is dynamic as in users can

345
00:14:04,320 --> 00:14:07,760
give access or also revoke access

346
00:14:07,760 --> 00:14:09,600
so permissions are inherited from the

347
00:14:09,600 --> 00:14:12,160
parent process

348
00:14:12,160 --> 00:14:15,279
and the permission an application has is

349
00:14:15,279 --> 00:14:17,120
stored with the bundle id

350
00:14:17,120 --> 00:14:20,240
and the developer id so the same

351
00:14:20,240 --> 00:14:24,240
thing applies here as to gatekeeper

352
00:14:24,240 --> 00:14:27,360
the code signing system namely that

353
00:14:27,360 --> 00:14:30,720
if an application has specific set in

354
00:14:30,720 --> 00:14:31,519
permissions

355
00:14:31,519 --> 00:14:34,800
you could just run an older version of

356
00:14:34,800 --> 00:14:36,240
the same app which has a known

357
00:14:36,240 --> 00:14:38,480
variability and you as an attacker

358
00:14:38,480 --> 00:14:42,000
will also will be able to also inherit

359
00:14:42,000 --> 00:14:43,279
that

360
00:14:43,279 --> 00:14:45,839
permission

361
00:14:46,880 --> 00:14:51,199
so how this works is you'll have two tcc

362
00:14:51,199 --> 00:14:54,320
demons running or at

363
00:14:54,320 --> 00:14:56,880
minimum of two basically for each user

364
00:14:56,880 --> 00:14:59,680
will have its own demand running

365
00:14:59,680 --> 00:15:02,240
and the daemon will have an open

366
00:15:02,240 --> 00:15:04,399
connection to a database file

367
00:15:04,399 --> 00:15:06,399
the content of the database file is

368
00:15:06,399 --> 00:15:07,760
protected

369
00:15:07,760 --> 00:15:10,959
by by system integrity protection so you

370
00:15:10,959 --> 00:15:14,959
cannot write directly to that file

371
00:15:14,959 --> 00:15:18,320
but how it works if as soon as

372
00:15:18,320 --> 00:15:21,440
your an application requests access

373
00:15:21,440 --> 00:15:25,360
to a specific functionality

374
00:15:25,600 --> 00:15:27,760
the underlying demons will start

375
00:15:27,760 --> 00:15:29,199
communicating with each other to

376
00:15:29,199 --> 00:15:31,920
see if you already have that app already

377
00:15:31,920 --> 00:15:32,880
has access

378
00:15:32,880 --> 00:15:34,399
for example if you would like to record

379
00:15:34,399 --> 00:15:35,920
audio that is

380
00:15:35,920 --> 00:15:40,079
done via the core d audio subsystem it

381
00:15:40,079 --> 00:15:40,800
will

382
00:15:40,800 --> 00:15:44,160
send a message to the tcc daemon

383
00:15:44,160 --> 00:15:46,639
to see if that specific application

384
00:15:46,639 --> 00:15:48,000
already has access

385
00:15:48,000 --> 00:15:51,920
and if not the tcc demon will

386
00:15:51,920 --> 00:15:53,440
send a message to the notification

387
00:15:53,440 --> 00:15:55,360
center and that will show the pop-up to

388
00:15:55,360 --> 00:15:56,480
see if you

389
00:15:56,480 --> 00:15:59,360
if you want to either accept or deny the

390
00:15:59,360 --> 00:16:00,079
the

391
00:16:00,079 --> 00:16:02,560
request

392
00:16:03,120 --> 00:16:06,079
for this the tcc dieben has some very

393
00:16:06,079 --> 00:16:06,800
specific

394
00:16:06,800 --> 00:16:09,040
entitlements that no other application

395
00:16:09,040 --> 00:16:12,880
has namely the notification center tcc

396
00:16:12,880 --> 00:16:14,880
entitlement and the tcc manager

397
00:16:14,880 --> 00:16:16,399
entitlement so it can also

398
00:16:16,399 --> 00:16:19,440
write to the database

399
00:16:19,920 --> 00:16:22,000
the last thing i would like to talk to

400
00:16:22,000 --> 00:16:23,040
you about is

401
00:16:23,040 --> 00:16:25,759
the signed system volume which is

402
00:16:25,759 --> 00:16:26,800
relatively new

403
00:16:26,800 --> 00:16:29,680
since big sur

404
00:16:30,000 --> 00:16:32,560
the first step were introduced in a

405
00:16:32,560 --> 00:16:34,880
previous version of macos

406
00:16:34,880 --> 00:16:36,959
with the introduction of the apple file

407
00:16:36,959 --> 00:16:38,800
system which is the new file system

408
00:16:38,800 --> 00:16:40,079
replacing the

409
00:16:40,079 --> 00:16:44,800
hfs uh all the file system

410
00:16:44,800 --> 00:16:48,000
and in a current mac os installation the

411
00:16:48,000 --> 00:16:50,320
system volume and the data volume are

412
00:16:50,320 --> 00:16:51,199
separated

413
00:16:51,199 --> 00:16:54,560
which means that the system volume holds

414
00:16:54,560 --> 00:16:57,680
all mac os core files

415
00:16:57,680 --> 00:17:00,480
which won't change over time only with

416
00:17:00,480 --> 00:17:01,040
an os

417
00:17:01,040 --> 00:17:05,199
upgrade those are on a different volume

418
00:17:05,199 --> 00:17:07,039
than all your data

419
00:17:07,039 --> 00:17:08,880
files so like your documents but also

420
00:17:08,880 --> 00:17:13,120
the customly installed application etc

421
00:17:13,439 --> 00:17:17,039
and this makes a very complex

422
00:17:17,039 --> 00:17:20,319
file tree which base which

423
00:17:20,319 --> 00:17:22,799
apple describes as a bi-directional

424
00:17:22,799 --> 00:17:24,240
wormhole

425
00:17:24,240 --> 00:17:27,280
in path reversal they use

426
00:17:27,280 --> 00:17:29,360
a technique called firm links to

427
00:17:29,360 --> 00:17:30,320
basically map

428
00:17:30,320 --> 00:17:33,360
certain points of the data

429
00:17:33,360 --> 00:17:36,400
volume over the system volume

430
00:17:36,400 --> 00:17:40,400
so that you get a a full

431
00:17:40,400 --> 00:17:43,600
file tree where certain files or

432
00:17:43,600 --> 00:17:45,440
directories will be writable where

433
00:17:45,440 --> 00:17:48,000
others are located on the system volume

434
00:17:48,000 --> 00:17:51,360
and they will be read-only

435
00:17:51,840 --> 00:17:56,000
so the read-only

436
00:17:56,000 --> 00:17:59,039
system volume was introduced in macos

437
00:17:59,039 --> 00:18:01,679
catalina

438
00:18:01,679 --> 00:18:04,799
and it protects the

439
00:18:04,799 --> 00:18:07,919
macos file system from tampering

440
00:18:07,919 --> 00:18:12,080
only in catalina if you had

441
00:18:12,080 --> 00:18:15,039
root privileges or camera access you

442
00:18:15,039 --> 00:18:16,080
could remount

443
00:18:16,080 --> 00:18:18,559
the system volume as writable and you

444
00:18:18,559 --> 00:18:20,960
could still make changes to the core

445
00:18:20,960 --> 00:18:24,240
file system in mac os big sur

446
00:18:24,240 --> 00:18:28,080
this has been upgraded to also add a

447
00:18:28,080 --> 00:18:30,080
cryptographic signature over all

448
00:18:30,080 --> 00:18:32,799
data on the system volume so even if you

449
00:18:32,799 --> 00:18:35,039
remount the entire system volume as

450
00:18:35,039 --> 00:18:38,400
being read and writeable then you could

451
00:18:38,400 --> 00:18:39,200
still not

452
00:18:39,200 --> 00:18:41,440
change or you could change the files on

453
00:18:41,440 --> 00:18:42,400
the system volume

454
00:18:42,400 --> 00:18:44,640
but the system would no longer boot that

455
00:18:44,640 --> 00:18:46,880
specific version of the file system

456
00:18:46,880 --> 00:18:48,640
because the cryptographic signature is

457
00:18:48,640 --> 00:18:51,120
invalid

458
00:18:51,840 --> 00:18:54,559
so this is implemented by using a merkle

459
00:18:54,559 --> 00:18:56,240
tree

460
00:18:56,240 --> 00:18:58,480
and the merkle tree is validated on

461
00:18:58,480 --> 00:18:59,679
every boot

462
00:18:59,679 --> 00:19:02,480
so the hash metadata is stored within

463
00:19:02,480 --> 00:19:06,080
the apfs file system

464
00:19:06,080 --> 00:19:07,840
and the root node which is called the

465
00:19:07,840 --> 00:19:09,760
seal is cryptographically signed by

466
00:19:09,760 --> 00:19:11,200
apple

467
00:19:11,200 --> 00:19:14,320
if the seal is broken the system will

468
00:19:14,320 --> 00:19:18,720
reboot from a previous snapshot

469
00:19:19,679 --> 00:19:21,840
the relevant data structure are well

470
00:19:21,840 --> 00:19:23,919
documented within the apple file system

471
00:19:23,919 --> 00:19:24,640
references

472
00:19:24,640 --> 00:19:29,600
if you are curious about the the details

473
00:19:29,840 --> 00:19:31,840
so then comes the question okay but then

474
00:19:31,840 --> 00:19:35,520
how are system updates installed

475
00:19:35,520 --> 00:19:39,360
for this mac os has a permanently hidden

476
00:19:39,360 --> 00:19:43,039
update volume so you won't see it in the

477
00:19:43,039 --> 00:19:47,200
disk utility application but it is there

478
00:19:47,200 --> 00:19:49,120
and it contains a snapshot of your

479
00:19:49,120 --> 00:19:50,880
bricks or installation

480
00:19:50,880 --> 00:19:54,960
and patches are applied to this

481
00:19:54,960 --> 00:19:58,480
specific snapshot and if everything

482
00:19:58,480 --> 00:20:00,640
succeeds the snapshot is sealed

483
00:20:00,640 --> 00:20:02,799
and the system is rebooted and it will

484
00:20:02,799 --> 00:20:03,679
then

485
00:20:03,679 --> 00:20:06,799
boot from the new snapshot which has a

486
00:20:06,799 --> 00:20:09,120
valid signature but if somehow the

487
00:20:09,120 --> 00:20:10,320
update fails

488
00:20:10,320 --> 00:20:12,480
the system will just continue booting

489
00:20:12,480 --> 00:20:14,400
from the previous snapshots and it can

490
00:20:14,400 --> 00:20:15,600
try again

491
00:20:15,600 --> 00:20:17,520
this also makes the update process a

492
00:20:17,520 --> 00:20:19,440
little bit

493
00:20:19,440 --> 00:20:25,440
more robust you can use the disk util

494
00:20:28,000 --> 00:20:31,360
utility to check if your current

495
00:20:31,360 --> 00:20:33,600
running snapshot indeed has a seal that

496
00:20:33,600 --> 00:20:36,720
has been verified

497
00:20:36,720 --> 00:20:39,280
so during our research on the specific

498
00:20:39,280 --> 00:20:41,120
details about this implementation for

499
00:20:41,120 --> 00:20:41,919
this

500
00:20:41,919 --> 00:20:45,120
presentation we came across a

501
00:20:45,120 --> 00:20:48,400
reproducible kernel crash

502
00:20:48,400 --> 00:20:51,760
when entering some commands so it might

503
00:20:51,760 --> 00:20:53,039
be that there are still some

504
00:20:53,039 --> 00:20:54,880
vulnerabilities there in the

505
00:20:54,880 --> 00:20:59,120
newly added uh cryptographic seal

506
00:20:59,120 --> 00:21:01,600
so we might get back to you at that at a

507
00:21:01,600 --> 00:21:04,080
later point

508
00:21:04,080 --> 00:21:05,840
so to give a short introduction about

509
00:21:05,840 --> 00:21:07,679
all the things we talked about

510
00:21:07,679 --> 00:21:10,400
uh the code signing guarantees that the

511
00:21:10,400 --> 00:21:12,159
code was published by specific

512
00:21:12,159 --> 00:21:13,200
organization and

513
00:21:13,200 --> 00:21:16,640
was not altered uh after the fact

514
00:21:16,640 --> 00:21:22,559
the seatbelt handles the static

515
00:21:22,559 --> 00:21:25,840
permission an app has like read or write

516
00:21:25,840 --> 00:21:28,000
access to specific

517
00:21:28,000 --> 00:21:31,600
locations and tcc handles user control

518
00:21:31,600 --> 00:21:33,760
permissions like camera access screen

519
00:21:33,760 --> 00:21:35,200
recording access etc

520
00:21:35,200 --> 00:21:38,559
those are dynamic sip guarantees the

521
00:21:38,559 --> 00:21:40,640
integrity of a system as a whole

522
00:21:40,640 --> 00:21:44,000
so that you cannot change the uh

523
00:21:44,000 --> 00:21:46,960
certain key parts of the the operating

524
00:21:46,960 --> 00:21:47,600
system

525
00:21:47,600 --> 00:21:50,000
and the signed system volume prevents

526
00:21:50,000 --> 00:21:51,919
modification of system files and make

527
00:21:51,919 --> 00:21:53,840
sure that every reboot it is a

528
00:21:53,840 --> 00:21:57,120
in a known good state

529
00:21:57,679 --> 00:22:00,720
so if you look at how

530
00:22:00,720 --> 00:22:05,039
important apple considers those

531
00:22:05,039 --> 00:22:06,960
protection mechanism you can of course

532
00:22:06,960 --> 00:22:09,440
look at the

533
00:22:09,440 --> 00:22:12,080
amount of bug bounties they will are

534
00:22:12,080 --> 00:22:14,880
willing to reward for vulnerabilities

535
00:22:14,880 --> 00:22:17,520
circumventing those protection

536
00:22:17,520 --> 00:22:19,200
mechanisms

537
00:22:19,200 --> 00:22:23,039
and you can see they the tcc

538
00:22:23,039 --> 00:22:24,159
vulnerabilities

539
00:22:24,159 --> 00:22:26,320
are up to a hundred thousand dollars

540
00:22:26,320 --> 00:22:27,200
which

541
00:22:27,200 --> 00:22:30,799
uh implies that they really believe

542
00:22:30,799 --> 00:22:33,840
in the implementation of tcc and its

543
00:22:33,840 --> 00:22:36,480
effectiveness in protecting their user

544
00:22:36,480 --> 00:22:38,480
data

545
00:22:38,480 --> 00:22:42,000
so this was all about the internals of

546
00:22:42,000 --> 00:22:42,720
mac os

547
00:22:42,720 --> 00:22:44,960
and how it tries to protect the data

548
00:22:44,960 --> 00:22:46,000
from its user

549
00:22:46,000 --> 00:22:48,000
i'm going to hand over the rest of the

550
00:22:48,000 --> 00:22:49,520
presentation to ties he

551
00:22:49,520 --> 00:22:51,360
will talk about some of the research we

552
00:22:51,360 --> 00:22:53,039
have done and vulnerabilities we have

553
00:22:53,039 --> 00:22:54,159
found

554
00:22:54,159 --> 00:22:57,840
so thais you're up

555
00:22:59,919 --> 00:23:03,200
okay i'm going to

556
00:23:03,200 --> 00:23:04,559
i'm going to talk about a couple of the

557
00:23:04,559 --> 00:23:06,000
vulnerabilities we found as a

558
00:23:06,000 --> 00:23:07,360
demonstration of these

559
00:23:07,360 --> 00:23:10,159
security mechanisms mainly to

560
00:23:10,159 --> 00:23:11,679
demonstrate how they can fail

561
00:23:11,679 --> 00:23:14,720
or how they can protect certain parts

562
00:23:14,720 --> 00:23:16,480
but also to show that there are still

563
00:23:16,480 --> 00:23:18,320
some weaknesses in many of these

564
00:23:18,320 --> 00:23:19,919
protections

565
00:23:19,919 --> 00:23:23,120
stuff that apple hasn't really gotten

566
00:23:23,120 --> 00:23:25,039
right or maybe applications haven't

567
00:23:25,039 --> 00:23:27,360
really picked up on

568
00:23:27,360 --> 00:23:29,600
and the first one of those is privileged

569
00:23:29,600 --> 00:23:31,840
updaters and that's going to be

570
00:23:31,840 --> 00:23:33,679
mainly adobe acrobat but there's also

571
00:23:33,679 --> 00:23:36,159
some others that we'll cover later

572
00:23:36,159 --> 00:23:38,880
this is an example of where code signing

573
00:23:38,880 --> 00:23:40,240
is important

574
00:23:40,240 --> 00:23:42,559
even in third party applications so not

575
00:23:42,559 --> 00:23:44,480
in the system itself within third party

576
00:23:44,480 --> 00:23:47,200
applications

577
00:23:49,039 --> 00:23:51,279
uh first of all there are some systems

578
00:23:51,279 --> 00:23:53,200
there with a main user

579
00:23:53,200 --> 00:23:55,440
uh who does not have an administrator

580
00:23:55,440 --> 00:23:56,400
account so

581
00:23:56,400 --> 00:23:59,919
it's uh as a standard user for example

582
00:23:59,919 --> 00:24:02,000
and maybe your computer is using school

583
00:24:02,000 --> 00:24:04,000
or maybe a computer used by child or a

584
00:24:04,000 --> 00:24:05,760
parent or teacher as the

585
00:24:05,760 --> 00:24:09,520
administer user but the normal user the

586
00:24:09,520 --> 00:24:11,360
day-to-day user has a standard user

587
00:24:11,360 --> 00:24:13,279
account

588
00:24:13,279 --> 00:24:15,679
this can create an issue because

589
00:24:15,679 --> 00:24:17,440
non-admin users are not allowed to

590
00:24:17,440 --> 00:24:18,799
change

591
00:24:18,799 --> 00:24:21,440
anything in the applications folder so

592
00:24:21,440 --> 00:24:22,720
how can

593
00:24:22,720 --> 00:24:25,039
updates be installed in this case there

594
00:24:25,039 --> 00:24:26,720
are many applications that try to

595
00:24:26,720 --> 00:24:28,559
install updates automatically without

596
00:24:28,559 --> 00:24:31,520
any interaction from the user and in

597
00:24:31,520 --> 00:24:33,440
order to do that the application needs

598
00:24:33,440 --> 00:24:34,640
to write to the

599
00:24:34,640 --> 00:24:37,200
applications folder but the user itself

600
00:24:37,200 --> 00:24:39,760
does not have permission to do that

601
00:24:39,760 --> 00:24:42,720
so there's one quite simple solution for

602
00:24:42,720 --> 00:24:44,320
that which many applications have

603
00:24:44,320 --> 00:24:45,360
adapted

604
00:24:45,360 --> 00:24:48,720
in the same way that's to use a service

605
00:24:48,720 --> 00:24:50,400
which is running as roots to handle the

606
00:24:50,400 --> 00:24:52,159
installation

607
00:24:52,159 --> 00:24:54,080
this is often known as a privileged

608
00:24:54,080 --> 00:24:56,240
helper tool

609
00:24:56,240 --> 00:24:58,960
how this works is typically like this so

610
00:24:58,960 --> 00:25:00,320
the application itself

611
00:25:00,320 --> 00:25:02,320
checks for updates and then downloads a

612
00:25:02,320 --> 00:25:03,679
new update package

613
00:25:03,679 --> 00:25:06,159
and communicates with the service in

614
00:25:06,159 --> 00:25:08,640
order to handle the installation

615
00:25:08,640 --> 00:25:10,400
there are two checks here that are very

616
00:25:10,400 --> 00:25:12,840
important for the security of this

617
00:25:12,840 --> 00:25:14,159
process

618
00:25:14,159 --> 00:25:17,120
first of all the service should verify

619
00:25:17,120 --> 00:25:18,880
that the incoming connection or the

620
00:25:18,880 --> 00:25:20,720
incoming request

621
00:25:20,720 --> 00:25:22,960
really originates from the legitimate

622
00:25:22,960 --> 00:25:24,080
application

623
00:25:24,080 --> 00:25:25,919
otherwise it might install something

624
00:25:25,919 --> 00:25:28,000
completely different

625
00:25:28,000 --> 00:25:31,440
and second the update package should be

626
00:25:31,440 --> 00:25:32,159
signed

627
00:25:32,159 --> 00:25:34,320
now how this works typically depends on

628
00:25:34,320 --> 00:25:36,799
the type of package that is used

629
00:25:36,799 --> 00:25:39,279
but one common method is to use macos

630
00:25:39,279 --> 00:25:42,320
package files which can have a signature

631
00:25:42,320 --> 00:25:46,400
embedded in them if those checks pass

632
00:25:46,400 --> 00:25:49,440
the installation can proceed but if is

633
00:25:49,440 --> 00:25:51,039
there if there's something wrong then

634
00:25:51,039 --> 00:25:54,159
there might be privilege escalation here

635
00:25:54,159 --> 00:25:56,960
so how this can often go wrong is that

636
00:25:56,960 --> 00:25:58,000
the first step

637
00:25:58,000 --> 00:26:01,200
there might be an incorrect code signing

638
00:26:01,200 --> 00:26:02,240
check

639
00:26:02,240 --> 00:26:04,320
uh sometimes the code saying check is

640
00:26:04,320 --> 00:26:05,520
completely missing

641
00:26:05,520 --> 00:26:07,200
or there might be a process injection

642
00:26:07,200 --> 00:26:11,120
vulnerability we'll cover those later

643
00:26:11,120 --> 00:26:13,440
the second step can also go wrong and

644
00:26:13,440 --> 00:26:14,880
that's often the time of check

645
00:26:14,880 --> 00:26:17,440
time of use type of vulnerability what

646
00:26:17,440 --> 00:26:18,880
this means is that the

647
00:26:18,880 --> 00:26:21,279
service checks the package and then

648
00:26:21,279 --> 00:26:23,679
installs it but in between those steps

649
00:26:23,679 --> 00:26:26,320
the applica the something else changes

650
00:26:26,320 --> 00:26:28,480
the contents of the update package

651
00:26:28,480 --> 00:26:30,400
and then it installs something different

652
00:26:30,400 --> 00:26:32,159
from what it checked

653
00:26:32,159 --> 00:26:33,919
and if you have the combination of those

654
00:26:33,919 --> 00:26:35,520
two vulnerabilities

655
00:26:35,520 --> 00:26:36,799
then there's the potential for

656
00:26:36,799 --> 00:26:38,640
privileged escalation

657
00:26:38,640 --> 00:26:39,760
and even though you need two

658
00:26:39,760 --> 00:26:42,159
vulnerabilities here it is very common

659
00:26:42,159 --> 00:26:43,600
that both of those are both

660
00:26:43,600 --> 00:26:46,240
are present in applications that use an

661
00:26:46,240 --> 00:26:49,520
update mechanism like this

662
00:26:49,679 --> 00:26:53,520
for example adobe acrobat was found to

663
00:26:53,520 --> 00:26:54,720
be vulnerable

664
00:26:54,720 --> 00:26:57,039
this was found by joe bin sun of tencent

665
00:26:57,039 --> 00:26:59,840
security xango lab

666
00:26:59,840 --> 00:27:01,840
there was no code turning check at all

667
00:27:01,840 --> 00:27:03,760
and it was possible to use a sim link

668
00:27:03,760 --> 00:27:04,960
for the update package

669
00:27:04,960 --> 00:27:07,600
so then you could change the package in

670
00:27:07,600 --> 00:27:08,480
between the

671
00:27:08,480 --> 00:27:10,960
coaching check and the installation by

672
00:27:10,960 --> 00:27:13,039
pointing the sim link to a different

673
00:27:13,039 --> 00:27:16,640
package he documented this vulnerability

674
00:27:16,640 --> 00:27:18,399
quite well

675
00:27:18,399 --> 00:27:21,039
but then i and somebody else at the same

676
00:27:21,039 --> 00:27:21,520
time

677
00:27:21,520 --> 00:27:24,240
uh shizaba fitzel from offensive

678
00:27:24,240 --> 00:27:25,600
security

679
00:27:25,600 --> 00:27:28,559
uh looked at it zizaba was a bit earlier

680
00:27:28,559 --> 00:27:31,279
and reported this earlier

681
00:27:31,279 --> 00:27:34,000
so he found that the code signing check

682
00:27:34,000 --> 00:27:34,640
was

683
00:27:34,640 --> 00:27:37,200
implemented incorrectly they used method

684
00:27:37,200 --> 00:27:37,760
which was

685
00:27:37,760 --> 00:27:40,320
quite easy to temper it and it was

686
00:27:40,320 --> 00:27:42,159
possible to use a hard link to the

687
00:27:42,159 --> 00:27:43,600
update package

688
00:27:43,600 --> 00:27:45,760
this case they moved the update package

689
00:27:45,760 --> 00:27:47,679
to a different location which meant that

690
00:27:47,679 --> 00:27:49,440
any hard links to the same file

691
00:27:49,440 --> 00:27:52,640
were kept intact so by

692
00:27:52,640 --> 00:27:54,240
changing the hard linked file it is

693
00:27:54,240 --> 00:27:55,760
possible to change it in between

694
00:27:55,760 --> 00:27:56,320
checking

695
00:27:56,320 --> 00:27:59,360
and installing

696
00:27:59,360 --> 00:28:01,360
i looked at it a little bit later but

697
00:28:01,360 --> 00:28:03,039
before the back update

698
00:28:03,039 --> 00:28:05,679
update was released and i noticed that

699
00:28:05,679 --> 00:28:08,000
what when the update was released that

700
00:28:08,000 --> 00:28:10,880
my exploit still worked with a few

701
00:28:10,880 --> 00:28:12,880
tweaks

702
00:28:12,880 --> 00:28:14,880
they implemented a correct code signing

703
00:28:14,880 --> 00:28:16,880
check but it was unfinished it always

704
00:28:16,880 --> 00:28:18,720
returned true

705
00:28:18,720 --> 00:28:20,480
and it was possible to use an open file

706
00:28:20,480 --> 00:28:22,320
descriptor for the same file for the

707
00:28:22,320 --> 00:28:24,960
update file because it was still moved

708
00:28:24,960 --> 00:28:27,520
so as you may know a file descriptor in

709
00:28:27,520 --> 00:28:29,360
macos

710
00:28:29,360 --> 00:28:31,679
is a handle to access a file you can

711
00:28:31,679 --> 00:28:33,360
read or write to it

712
00:28:33,360 --> 00:28:35,520
and the permissions for the file are

713
00:28:35,520 --> 00:28:37,120
only checked when you open that file

714
00:28:37,120 --> 00:28:39,279
descriptor so if you open a file

715
00:28:39,279 --> 00:28:40,559
and then you move it to a different

716
00:28:40,559 --> 00:28:42,880
location and you change its permissions

717
00:28:42,880 --> 00:28:44,640
and you're still allowed to read to it

718
00:28:44,640 --> 00:28:46,320
even though you may not be allowed to

719
00:28:46,320 --> 00:28:47,679
open it again

720
00:28:47,679 --> 00:28:50,799
due to the permissions so i rewarded

721
00:28:50,799 --> 00:28:52,559
that to adobe and now

722
00:28:52,559 --> 00:28:54,559
i think it's finally fixed correctly and

723
00:28:54,559 --> 00:28:56,640
it's no longer possible to use this for

724
00:28:56,640 --> 00:28:58,480
privilege escalation

725
00:28:58,480 --> 00:29:00,320
but maybe i'm wrong maybe somebody else

726
00:29:00,320 --> 00:29:02,159
finds the trick that kaepernick

727
00:29:02,159 --> 00:29:06,640
we used to bypass this again

728
00:29:06,640 --> 00:29:08,159
many other applications that have been

729
00:29:08,159 --> 00:29:10,480
found to be vulnerable in a similar way

730
00:29:10,480 --> 00:29:12,159
google chrome had a vulnerability like

731
00:29:12,159 --> 00:29:13,679
this at some point

732
00:29:13,679 --> 00:29:16,960
microsoft auto update for office at

733
00:29:16,960 --> 00:29:19,840
this type of vulnerability microsoft

734
00:29:19,840 --> 00:29:21,600
teams had a similar credibility too

735
00:29:21,600 --> 00:29:24,320
recently and there's not a named company

736
00:29:24,320 --> 00:29:25,760
that's still at a disclosure that we

737
00:29:25,760 --> 00:29:27,520
cannot talk about

738
00:29:27,520 --> 00:29:31,679
just yet but this is

739
00:29:31,679 --> 00:29:34,640
even a more big bigger problem here than

740
00:29:34,640 --> 00:29:36,159
it may seem

741
00:29:36,159 --> 00:29:38,960
because mac os users are very used to

742
00:29:38,960 --> 00:29:40,640
just deleting an application if they

743
00:29:40,640 --> 00:29:42,480
want to install it

744
00:29:42,480 --> 00:29:44,480
if you no longer need it then you just

745
00:29:44,480 --> 00:29:46,000
drag it to the trash

746
00:29:46,000 --> 00:29:49,120
and then it's gone but if you do that

747
00:29:49,120 --> 00:29:51,120
then most of the time the privileged

748
00:29:51,120 --> 00:29:53,120
updater is still there

749
00:29:53,120 --> 00:29:54,880
because it was not part of the

750
00:29:54,880 --> 00:29:56,640
application bundle

751
00:29:56,640 --> 00:29:59,120
and it might still be installed and

752
00:29:59,120 --> 00:30:00,399
because as i mentioned

753
00:30:00,399 --> 00:30:03,360
the application handles the checking for

754
00:30:03,360 --> 00:30:05,679
updates and downloading

755
00:30:05,679 --> 00:30:07,760
the service by itself will not update

756
00:30:07,760 --> 00:30:08,799
itself

757
00:30:08,799 --> 00:30:11,279
so it's very well possible that if you

758
00:30:11,279 --> 00:30:13,360
have used adobe acrobat in the past

759
00:30:13,360 --> 00:30:15,760
at some point that you still have

760
00:30:15,760 --> 00:30:18,080
vulnerable updater installed

761
00:30:18,080 --> 00:30:19,919
even though you have deleted the tobacco

762
00:30:19,919 --> 00:30:21,600
bits

763
00:30:21,600 --> 00:30:23,440
it can still be that the updater is

764
00:30:23,440 --> 00:30:25,600
still there

765
00:30:25,600 --> 00:30:27,520
so check your launch agents or launch

766
00:30:27,520 --> 00:30:30,880
demons for stuff that still

767
00:30:30,880 --> 00:30:34,240
can be started automatically

768
00:30:34,240 --> 00:30:36,080
so therefore it's also good to make sure

769
00:30:36,080 --> 00:30:37,600
that if you implement something like

770
00:30:37,600 --> 00:30:38,480
this that you

771
00:30:38,480 --> 00:30:41,120
implement a sort of self-destruct

772
00:30:41,120 --> 00:30:41,840
mechanism

773
00:30:41,840 --> 00:30:43,919
if the application is gone that the

774
00:30:43,919 --> 00:30:45,600
privilege updater

775
00:30:45,600 --> 00:30:50,000
also installs itself

776
00:30:50,000 --> 00:30:52,559
next one uh it's about open and safe

777
00:30:52,559 --> 00:30:53,520
panels

778
00:30:53,520 --> 00:30:56,640
uh and i mean this by that

779
00:30:56,640 --> 00:30:59,360
so it's a very it appears to be a very

780
00:30:59,360 --> 00:31:00,240
boring

781
00:31:00,240 --> 00:31:03,039
part of the mac os ui but from a

782
00:31:03,039 --> 00:31:04,559
sandboxing point of view this is

783
00:31:04,559 --> 00:31:06,080
actually a very

784
00:31:06,080 --> 00:31:10,480
complicated piece of technology because

785
00:31:10,480 --> 00:31:13,360
the contents of the panel can see all of

786
00:31:13,360 --> 00:31:14,240
your files

787
00:31:14,240 --> 00:31:16,399
everything you have with the application

788
00:31:16,399 --> 00:31:18,799
maybe sandbox so it's possible to see a

789
00:31:18,799 --> 00:31:19,519
file there

790
00:31:19,519 --> 00:31:20,880
even though the application itself

791
00:31:20,880 --> 00:31:22,640
cannot read it

792
00:31:22,640 --> 00:31:25,840
and the way this works is by using a

793
00:31:25,840 --> 00:31:27,600
separate service

794
00:31:27,600 --> 00:31:30,640
so there is a open and safe panel

795
00:31:30,640 --> 00:31:32,640
service which is drawing the contents of

796
00:31:32,640 --> 00:31:33,200
the

797
00:31:33,200 --> 00:31:35,919
panel and the application itself is

798
00:31:35,919 --> 00:31:37,519
providing the window

799
00:31:37,519 --> 00:31:39,440
so if you're used to web applications

800
00:31:39,440 --> 00:31:41,120
this is kind of like having an iframe

801
00:31:41,120 --> 00:31:43,120
within a web application

802
00:31:43,120 --> 00:31:45,679
where the contents are being drawn by

803
00:31:45,679 --> 00:31:47,120
something else

804
00:31:47,120 --> 00:31:49,600
so this open safe panel service is an

805
00:31:49,600 --> 00:31:50,240
xpc

806
00:31:50,240 --> 00:31:52,320
service which does have access to all of

807
00:31:52,320 --> 00:31:53,679
your files

808
00:31:53,679 --> 00:31:55,440
and then when you select the file you

809
00:31:55,440 --> 00:31:57,039
click the open button

810
00:31:57,039 --> 00:31:59,200
temporary access to that files being

811
00:31:59,200 --> 00:32:00,720
given to the application so then the

812
00:32:00,720 --> 00:32:02,080
application can save

813
00:32:02,080 --> 00:32:05,439
your file or open it

814
00:32:05,519 --> 00:32:08,640
temporarily so i think this is a very

815
00:32:08,640 --> 00:32:10,320
interesting security boundary that

816
00:32:10,320 --> 00:32:12,240
probably hasn't received much attention

817
00:32:12,240 --> 00:32:14,080
yet but it's quite important

818
00:32:14,080 --> 00:32:17,519
for sandboxing one thing i noticed

819
00:32:17,519 --> 00:32:20,799
was that this is all entirely a private

820
00:32:20,799 --> 00:32:22,880
api there's no public part of this that

821
00:32:22,880 --> 00:32:24,559
you can use

822
00:32:24,559 --> 00:32:26,399
one of the important classes in this is

823
00:32:26,399 --> 00:32:28,320
the ns remote view

824
00:32:28,320 --> 00:32:30,559
this is the class that is providing the

825
00:32:30,559 --> 00:32:31,600
drawing of the

826
00:32:31,600 --> 00:32:36,080
contents of the panel this says

827
00:32:36,080 --> 00:32:38,880
for mac os for objective c classes you

828
00:32:38,880 --> 00:32:40,720
can inspect at runtime

829
00:32:40,720 --> 00:32:42,880
methods that it supports so even though

830
00:32:42,880 --> 00:32:44,880
it is a private api you can look at all

831
00:32:44,880 --> 00:32:46,880
of the methods this has

832
00:32:46,880 --> 00:32:48,559
one thing i found was that it has a

833
00:32:48,559 --> 00:32:50,240
snapshot method

834
00:32:50,240 --> 00:32:52,399
which as you may expect from the name

835
00:32:52,399 --> 00:32:54,480
takes a snapshot of the panel

836
00:32:54,480 --> 00:32:57,279
returns it to the application so for

837
00:32:57,279 --> 00:32:58,000
this

838
00:32:58,000 --> 00:33:00,880
way it is it is used it is quite a big

839
00:33:00,880 --> 00:33:02,240
vulnerability

840
00:33:02,240 --> 00:33:03,840
because it means that the sandbox

841
00:33:03,840 --> 00:33:06,080
application even though it doesn't have

842
00:33:06,080 --> 00:33:07,760
access to your files

843
00:33:07,760 --> 00:33:10,240
normally it can't list your documents

844
00:33:10,240 --> 00:33:11,840
folder for example

845
00:33:11,840 --> 00:33:14,159
it can take a snapshot of your open

846
00:33:14,159 --> 00:33:16,240
panel to get a preview of files and that

847
00:33:16,240 --> 00:33:20,240
directory listing of a specific folder

848
00:33:20,480 --> 00:33:25,840
so we have a demo video of that

849
00:33:34,880 --> 00:33:36,840
so you can see here this is the actual

850
00:33:36,840 --> 00:33:38,720
panel

851
00:33:38,720 --> 00:33:40,080
and now the application has taken a

852
00:33:40,080 --> 00:33:42,720
snapshot so this this snapshot part

853
00:33:42,720 --> 00:33:44,960
is accessible by the application but the

854
00:33:44,960 --> 00:33:48,720
other contents of that window are not

855
00:33:49,200 --> 00:33:50,799
and apple fixed this in the big sur

856
00:33:50,799 --> 00:33:52,799
release by adding another

857
00:33:52,799 --> 00:33:55,120
entitlement check if you want to use a

858
00:33:55,120 --> 00:33:56,720
snapshot method that you need to have a

859
00:33:56,720 --> 00:34:00,799
specific entitlement in order to use it

860
00:34:02,080 --> 00:34:05,679
next one is the sandbox escape we found

861
00:34:05,679 --> 00:34:06,000
using

862
00:34:06,000 --> 00:34:08,960
system preferences

863
00:34:09,359 --> 00:34:11,599
one thing that's interesting about the

864
00:34:11,599 --> 00:34:13,679
mac application sandbox

865
00:34:13,679 --> 00:34:16,960
that on ios you cannot do is that you

866
00:34:16,960 --> 00:34:19,440
can use fork and exec

867
00:34:19,440 --> 00:34:22,960
so for example you can use ls by

868
00:34:22,960 --> 00:34:26,879
calling system and then it just executes

869
00:34:26,879 --> 00:34:30,000
and it inherits the same sandbox as the

870
00:34:30,000 --> 00:34:33,040
application that uses it

871
00:34:33,040 --> 00:34:36,480
so ls here can read the root folder with

872
00:34:36,480 --> 00:34:38,480
other folders it would not have access

873
00:34:38,480 --> 00:34:39,918
to

874
00:34:39,918 --> 00:34:42,239
this was interesting that this is

875
00:34:42,239 --> 00:34:43,918
possible

876
00:34:43,918 --> 00:34:46,879
and there's also one other thing about

877
00:34:46,879 --> 00:34:48,399
sandbox and that is that

878
00:34:48,399 --> 00:34:50,079
if you try to do something that is not

879
00:34:50,079 --> 00:34:52,879
allowed then it usually just returns an

880
00:34:52,879 --> 00:34:55,760
error message or an error code

881
00:34:55,760 --> 00:34:57,440
but it doesn't terminate your

882
00:34:57,440 --> 00:34:58,960
application

883
00:34:58,960 --> 00:35:00,640
there's one exception to that and that

884
00:35:00,640 --> 00:35:02,079
is trying to

885
00:35:02,079 --> 00:35:05,119
exit enforce the sandbox

886
00:35:05,119 --> 00:35:07,839
while you are already sandboxed so if

887
00:35:07,839 --> 00:35:08,720
you try to launch

888
00:35:08,720 --> 00:35:11,040
safari from a sandbox application safari

889
00:35:11,040 --> 00:35:13,760
itself being a sandbox application

890
00:35:13,760 --> 00:35:15,200
the kernel will terminate it because

891
00:35:15,200 --> 00:35:18,079
it's trying to initiate a new sandbox

892
00:35:18,079 --> 00:35:19,760
so as you can see this is the message

893
00:35:19,760 --> 00:35:21,920
that you can you will get in your log if

894
00:35:21,920 --> 00:35:22,880
you try to execute

895
00:35:22,880 --> 00:35:26,880
safari from the sandbox application

896
00:35:27,119 --> 00:35:28,960
but other applications which are not

897
00:35:28,960 --> 00:35:31,920
sandboxed you can launch from a sandbox

898
00:35:31,920 --> 00:35:34,079
application and then they're suddenly

899
00:35:34,079 --> 00:35:36,960
running within the sandbox

900
00:35:36,960 --> 00:35:38,800
we tried this with a lot of applications

901
00:35:38,800 --> 00:35:42,720
and we found some interesting results

902
00:35:43,280 --> 00:35:46,560
system preferences we noticed was

903
00:35:46,560 --> 00:35:50,640
working fine and many other applications

904
00:35:50,640 --> 00:35:52,400
they were hanging or they were

905
00:35:52,400 --> 00:35:53,920
permanently waiting for something that

906
00:35:53,920 --> 00:35:56,079
they were never going to

907
00:35:56,079 --> 00:35:58,640
complete like this utility but system

908
00:35:58,640 --> 00:35:59,920
preferences was running

909
00:35:59,920 --> 00:36:02,320
and you could do anything with it so the

910
00:36:02,320 --> 00:36:03,200
the

911
00:36:03,200 --> 00:36:06,240
sensitive security preferences uh were

912
00:36:06,240 --> 00:36:08,720
working as they shoot

913
00:36:08,720 --> 00:36:10,800
which is very surprising because those

914
00:36:10,800 --> 00:36:12,640
are very sensitive permissions that you

915
00:36:12,640 --> 00:36:15,119
can change there

916
00:36:15,119 --> 00:36:17,119
by looking in activity monitor it was

917
00:36:17,119 --> 00:36:18,720
clear why this was the case

918
00:36:18,720 --> 00:36:21,040
so system preferences itself was now

919
00:36:21,040 --> 00:36:23,200
sandboxed as you can see here

920
00:36:23,200 --> 00:36:26,240
but it uses different services in this

921
00:36:26,240 --> 00:36:28,960
case these are xpc services

922
00:36:28,960 --> 00:36:31,200
and some of those were sandboxed but

923
00:36:31,200 --> 00:36:32,400
others weren't

924
00:36:32,400 --> 00:36:35,280
because xbc services are large

925
00:36:35,280 --> 00:36:37,599
separately from the application

926
00:36:37,599 --> 00:36:39,599
they do not do not need to be sandboxed

927
00:36:39,599 --> 00:36:42,400
when launched by a sandbox application

928
00:36:42,400 --> 00:36:45,520
so as you can see here the

929
00:36:45,520 --> 00:36:48,640
account profile preference pane was not

930
00:36:48,640 --> 00:36:50,079
sandboxed

931
00:36:50,079 --> 00:36:52,320
but there were other parts that were

932
00:36:52,320 --> 00:36:53,760
sandboxed

933
00:36:53,760 --> 00:36:56,720
so apple used a similar technology here

934
00:36:56,720 --> 00:36:57,520
as the

935
00:36:57,520 --> 00:37:00,640
open panel to draw the contents of the

936
00:37:00,640 --> 00:37:02,640
system preferences window from a

937
00:37:02,640 --> 00:37:03,920
different service

938
00:37:03,920 --> 00:37:06,880
so the security preference is running in

939
00:37:06,880 --> 00:37:08,880
a different process from the main system

940
00:37:08,880 --> 00:37:12,079
preferences application

941
00:37:12,240 --> 00:37:14,000
but there are also other preference

942
00:37:14,000 --> 00:37:16,320
panes that you can install as a user

943
00:37:16,320 --> 00:37:19,520
so these are bundles

944
00:37:19,520 --> 00:37:22,160
there's a translation happening using a

945
00:37:22,160 --> 00:37:24,000
legacy loader application that can be

946
00:37:24,000 --> 00:37:24,480
used

947
00:37:24,480 --> 00:37:27,680
to load those bundles into the new

948
00:37:27,680 --> 00:37:31,839
xpc services type of reference page

949
00:37:31,839 --> 00:37:33,520
now this was an interesting trick but

950
00:37:33,520 --> 00:37:34,880
there was really no

951
00:37:34,880 --> 00:37:37,760
security impact yet but then i noticed

952
00:37:37,760 --> 00:37:39,520
something else

953
00:37:39,520 --> 00:37:41,520
system preferences was creating a number

954
00:37:41,520 --> 00:37:43,920
of files within the container of this

955
00:37:43,920 --> 00:37:45,599
application

956
00:37:45,599 --> 00:37:48,320
within the cache file cache folder where

957
00:37:48,320 --> 00:37:50,880
application keeps its cache files

958
00:37:50,880 --> 00:37:53,760
thus creating three files one of those

959
00:37:53,760 --> 00:37:54,800
is the

960
00:37:54,800 --> 00:37:57,920
user cache file which contained a list

961
00:37:57,920 --> 00:37:59,599
of the third party preferences

962
00:37:59,599 --> 00:38:03,040
panes that the user had installed

963
00:38:03,040 --> 00:38:06,720
so these are bundles

964
00:38:06,720 --> 00:38:09,520
and it didn't verify the contents of

965
00:38:09,520 --> 00:38:10,720
this cache file

966
00:38:10,720 --> 00:38:13,119
and it was located within the container

967
00:38:13,119 --> 00:38:14,800
of my application

968
00:38:14,800 --> 00:38:16,480
so this meant that i could do the

969
00:38:16,480 --> 00:38:18,320
following i would launch system

970
00:38:18,320 --> 00:38:20,079
preferences within my application

971
00:38:20,079 --> 00:38:21,280
container

972
00:38:21,280 --> 00:38:24,079
i wait for it to create sketch file i

973
00:38:24,079 --> 00:38:25,760
terminate the application which is

974
00:38:25,760 --> 00:38:27,680
allowed because it is running within my

975
00:38:27,680 --> 00:38:30,160
own container

976
00:38:30,160 --> 00:38:32,079
and then i modify the cache file to

977
00:38:32,079 --> 00:38:34,079
point it to a different bundle for the

978
00:38:34,079 --> 00:38:37,040
for specific preference pane i launched

979
00:38:37,040 --> 00:38:39,200
system preferences again

980
00:38:39,200 --> 00:38:41,119
and then i wait for the user to click on

981
00:38:41,119 --> 00:38:43,280
the modified preference pane

982
00:38:43,280 --> 00:38:45,359
what happens is that a different bundle

983
00:38:45,359 --> 00:38:46,320
is being loaded

984
00:38:46,320 --> 00:38:49,359
in a non-sandboxed xbc service

985
00:38:49,359 --> 00:38:51,920
which means that it is executing outside

986
00:38:51,920 --> 00:38:53,839
of a sandbox

987
00:38:53,839 --> 00:38:56,720
we have a demonstration of this here so

988
00:38:56,720 --> 00:38:58,960
first of all to show that it is not

989
00:38:58,960 --> 00:39:02,240
that this is sandboxed as you can see

990
00:39:02,240 --> 00:39:03,040
there it is

991
00:39:03,040 --> 00:39:05,759
sandboxed

992
00:39:06,560 --> 00:39:09,680
launches system preferences terminates

993
00:39:09,680 --> 00:39:10,320
it

994
00:39:10,320 --> 00:39:14,800
and now it's launching it again

995
00:39:14,800 --> 00:39:16,480
the user clicks on the preference pane

996
00:39:16,480 --> 00:39:19,599
and calculator starts

997
00:39:19,599 --> 00:39:22,480
now this is a sandbox escape but it's

998
00:39:22,480 --> 00:39:24,480
not very

999
00:39:24,480 --> 00:39:26,320
interesting because it requires user

1000
00:39:26,320 --> 00:39:28,079
interaction the user needs to open that

1001
00:39:28,079 --> 00:39:29,440
preference pane

1002
00:39:29,440 --> 00:39:31,119
and the chances of the user doing that

1003
00:39:31,119 --> 00:39:33,280
when you just spontaneously open system

1004
00:39:33,280 --> 00:39:34,560
preferences

1005
00:39:34,560 --> 00:39:37,599
is a bit low so i looked for a way to

1006
00:39:37,599 --> 00:39:41,119
open a specific reference pane at first

1007
00:39:41,119 --> 00:39:41,599
i looked

1008
00:39:41,599 --> 00:39:45,839
at using a different specific ure scheme

1009
00:39:45,839 --> 00:39:49,040
it's used to be supported

1010
00:39:49,040 --> 00:39:50,720
but this is no longer allowed for third

1011
00:39:50,720 --> 00:39:52,560
party preference page so you can load a

1012
00:39:52,560 --> 00:39:54,560
specific graph in spain from apple

1013
00:39:54,560 --> 00:39:58,000
but not a third party page

1014
00:39:58,000 --> 00:39:59,839
but there is something new in preference

1015
00:39:59,839 --> 00:40:01,599
paints and that is the ability to add

1016
00:40:01,599 --> 00:40:02,720
alerts

1017
00:40:02,720 --> 00:40:04,240
so what you've probably seen is this

1018
00:40:04,240 --> 00:40:06,720
batch of system preferences

1019
00:40:06,720 --> 00:40:08,480
when there's an update waiting you see

1020
00:40:08,480 --> 00:40:10,079
this badge

1021
00:40:10,079 --> 00:40:12,160
appearing because there's something that

1022
00:40:12,160 --> 00:40:13,839
needs to

1023
00:40:13,839 --> 00:40:17,200
be installed now any any preference pane

1024
00:40:17,200 --> 00:40:18,960
can add this alert even a third party

1025
00:40:18,960 --> 00:40:20,160
prep in spain

1026
00:40:20,160 --> 00:40:22,319
and if you start system preferences the

1027
00:40:22,319 --> 00:40:23,839
first time

1028
00:40:23,839 --> 00:40:26,480
after a new alert has been added then it

1029
00:40:26,480 --> 00:40:28,079
will automatically open the

1030
00:40:28,079 --> 00:40:30,960
preference pane that added this alert so

1031
00:40:30,960 --> 00:40:31,520
i could

1032
00:40:31,520 --> 00:40:34,640
shorten the attack to this create a new

1033
00:40:34,640 --> 00:40:36,160
user cache file

1034
00:40:36,160 --> 00:40:38,800
add an alert for uh an injected

1035
00:40:38,800 --> 00:40:40,000
preference pane

1036
00:40:40,000 --> 00:40:42,960
and then start system preferences and

1037
00:40:42,960 --> 00:40:44,720
this made the attack much faster

1038
00:40:44,720 --> 00:40:47,839
um it's uh we have another recording of

1039
00:40:47,839 --> 00:40:48,400
it but you

1040
00:40:48,400 --> 00:40:50,240
really need to be pay attention to even

1041
00:40:50,240 --> 00:40:53,839
see system references starting

1042
00:40:54,000 --> 00:40:56,160
it's first demonstrating again that it

1043
00:40:56,160 --> 00:41:07,839
is sandboxed

1044
00:41:09,040 --> 00:41:12,480
another calculator to show that it is

1045
00:41:12,480 --> 00:41:16,480
running in sandbox cloud

1046
00:41:16,480 --> 00:41:18,240
apple fixed this also in the big sur

1047
00:41:18,240 --> 00:41:20,319
update now system provinces

1048
00:41:20,319 --> 00:41:21,520
automatically exits

1049
00:41:21,520 --> 00:41:24,079
if it is within sandbox which makes

1050
00:41:24,079 --> 00:41:26,000
sense because it's not expecting to ever

1051
00:41:26,000 --> 00:41:28,880
be in the same box

1052
00:41:30,240 --> 00:41:33,440
next step is electron

1053
00:41:33,440 --> 00:41:36,160
and how tcc is often vulnerable when

1054
00:41:36,160 --> 00:41:39,680
used on electron applications

1055
00:41:40,800 --> 00:41:44,640
so as dan mentioned tcc permissions are

1056
00:41:44,640 --> 00:41:46,880
stored based on two things the bundle

1057
00:41:46,880 --> 00:41:48,800
identifier of the application

1058
00:41:48,800 --> 00:41:52,160
and the developer identifier this means

1059
00:41:52,160 --> 00:41:53,680
that the version of the application and

1060
00:41:53,680 --> 00:41:55,520
the path on the file system

1061
00:41:55,520 --> 00:41:57,440
are not relevant to the permissions it

1062
00:41:57,440 --> 00:41:58,720
has

1063
00:41:58,720 --> 00:42:00,079
this means that if you download an

1064
00:42:00,079 --> 00:42:02,560
upgrade then that upgrade automatically

1065
00:42:02,560 --> 00:42:04,800
still has the tcc permissions that you

1066
00:42:04,800 --> 00:42:07,200
gave it

1067
00:42:08,480 --> 00:42:10,240
and also what don mentioned is that the

1068
00:42:10,240 --> 00:42:12,319
code signing check only checks the

1069
00:42:12,319 --> 00:42:14,880
executable itself now with a hardened

1070
00:42:14,880 --> 00:42:16,560
rin time this also means that the

1071
00:42:16,560 --> 00:42:18,240
libraries and frameworks are being

1072
00:42:18,240 --> 00:42:19,280
checked

1073
00:42:19,280 --> 00:42:21,359
with any interpreted code within the

1074
00:42:21,359 --> 00:42:23,440
application is not checked automatically

1075
00:42:23,440 --> 00:42:23,920
by the

1076
00:42:23,920 --> 00:42:27,040
by gatekeeper only if an application is

1077
00:42:27,040 --> 00:42:29,440
downloaded from the internet

1078
00:42:29,440 --> 00:42:32,319
and electron apps contain most of their

1079
00:42:32,319 --> 00:42:35,759
code is javascript class

1080
00:42:36,000 --> 00:42:38,720
so there's this attack that works on all

1081
00:42:38,720 --> 00:42:40,720
electron applications

1082
00:42:40,720 --> 00:42:42,480
you copy the application to a writable

1083
00:42:42,480 --> 00:42:44,560
location if it's an application so you

1084
00:42:44,560 --> 00:42:45,359
cannot

1085
00:42:45,359 --> 00:42:49,280
just change it replace javascript with

1086
00:42:49,280 --> 00:42:51,200
some malicious javascript

1087
00:42:51,200 --> 00:42:53,599
launched a modified application and now

1088
00:42:53,599 --> 00:42:55,440
any tfcc permissions that

1089
00:42:55,440 --> 00:42:57,920
the user gave to that application are

1090
00:42:57,920 --> 00:42:58,720
usable

1091
00:42:58,720 --> 00:43:01,280
from your malicious javascript and the

1092
00:43:01,280 --> 00:43:03,680
code signing of macos doesn't detect

1093
00:43:03,680 --> 00:43:07,760
this and as it happens

1094
00:43:07,760 --> 00:43:10,079
many of the application many of the

1095
00:43:10,079 --> 00:43:12,400
electron applications that you may have

1096
00:43:12,400 --> 00:43:14,319
often require access to your camera or

1097
00:43:14,319 --> 00:43:15,680
your microphone

1098
00:43:15,680 --> 00:43:17,280
so these are all applications that are

1099
00:43:17,280 --> 00:43:19,040
written

1100
00:43:19,040 --> 00:43:21,839
in with electron and many users will

1101
00:43:21,839 --> 00:43:23,520
have given

1102
00:43:23,520 --> 00:43:25,680
webcam or microphone permissions to at

1103
00:43:25,680 --> 00:43:28,079
least one of these

1104
00:43:28,079 --> 00:43:30,480
and as a user there's really no good way

1105
00:43:30,480 --> 00:43:32,640
to protect yourself against this

1106
00:43:32,640 --> 00:43:35,760
because you cannot temporarily give

1107
00:43:35,760 --> 00:43:36,400
permission

1108
00:43:36,400 --> 00:43:39,280
to your microphone or to your camera

1109
00:43:39,280 --> 00:43:41,359
using tcc

1110
00:43:41,359 --> 00:43:44,960
um the best thing you can do is monitor

1111
00:43:44,960 --> 00:43:45,280
if

1112
00:43:45,280 --> 00:43:47,200
your webcam is being used while you

1113
00:43:47,200 --> 00:43:48,960
don't expect it to

1114
00:43:48,960 --> 00:43:52,079
for example you can use oversight to see

1115
00:43:52,079 --> 00:43:54,000
if your microphone is being used or your

1116
00:43:54,000 --> 00:43:56,160
webcam is being used

1117
00:43:56,160 --> 00:43:58,000
and then you know that something is

1118
00:43:58,000 --> 00:43:59,680
using it even though you don't expect it

1119
00:43:59,680 --> 00:44:01,839
to

1120
00:44:01,839 --> 00:44:04,800
and the problem is even broader than

1121
00:44:04,800 --> 00:44:05,119
that

1122
00:44:05,119 --> 00:44:08,400
than just electron in many applications

1123
00:44:08,400 --> 00:44:10,800
because library validation is relatively

1124
00:44:10,800 --> 00:44:11,920
new

1125
00:44:11,920 --> 00:44:14,160
so for many applications you can find an

1126
00:44:14,160 --> 00:44:15,280
older copy

1127
00:44:15,280 --> 00:44:17,200
which doesn't have library validation

1128
00:44:17,200 --> 00:44:19,280
yet you can download that

1129
00:44:19,280 --> 00:44:21,599
you place any library launch that

1130
00:44:21,599 --> 00:44:23,119
modified application

1131
00:44:23,119 --> 00:44:24,880
and then you can use all of the tcc

1132
00:44:24,880 --> 00:44:26,720
permissions of the application even

1133
00:44:26,720 --> 00:44:28,640
though you're using an older version

1134
00:44:28,640 --> 00:44:31,680
it still has the permissions that the

1135
00:44:31,680 --> 00:44:33,119
application has

1136
00:44:33,119 --> 00:44:34,800
this is really a vulnerability that an

1137
00:44:34,800 --> 00:44:36,800
application itself cannot protect itself

1138
00:44:36,800 --> 00:44:37,200
from

1139
00:44:37,200 --> 00:44:39,520
it's something that is a problem in the

1140
00:44:39,520 --> 00:44:41,440
design of tcc

1141
00:44:41,440 --> 00:44:43,040
and apple would need to find a solution

1142
00:44:43,040 --> 00:44:45,440
for this

1143
00:44:46,640 --> 00:44:48,319
finally we're going to talk about

1144
00:44:48,319 --> 00:44:51,839
process injection

1145
00:44:51,920 --> 00:44:53,920
as we mentioned before process injection

1146
00:44:53,920 --> 00:44:55,920
can be used to communicate with

1147
00:44:55,920 --> 00:44:57,920
a privileged helper tool for example to

1148
00:44:57,920 --> 00:44:59,920
install an update

1149
00:44:59,920 --> 00:45:01,280
which can also use it to steal

1150
00:45:01,280 --> 00:45:03,040
permissions

1151
00:45:03,040 --> 00:45:04,800
in the same way that you can modify an

1152
00:45:04,800 --> 00:45:06,240
electron application

1153
00:45:06,240 --> 00:45:07,839
if you can inject code into another

1154
00:45:07,839 --> 00:45:09,839
application then you can borrow the dcc

1155
00:45:09,839 --> 00:45:11,839
informations then that that application

1156
00:45:11,839 --> 00:45:13,920
has

1157
00:45:13,920 --> 00:45:18,000
the one thing we found was

1158
00:45:18,000 --> 00:45:20,240
we found two generic process injection

1159
00:45:20,240 --> 00:45:21,920
techniques

1160
00:45:21,920 --> 00:45:23,920
and then we tried to find what is the

1161
00:45:23,920 --> 00:45:25,359
impact of these what

1162
00:45:25,359 --> 00:45:27,760
is the full range of things that you can

1163
00:45:27,760 --> 00:45:28,880
do using just

1164
00:45:28,880 --> 00:45:31,920
a process injection vulnerability so we

1165
00:45:31,920 --> 00:45:33,119
looked at

1166
00:45:33,119 --> 00:45:35,520
what can we do if we inject into apple's

1167
00:45:35,520 --> 00:45:37,520
own applications

1168
00:45:37,520 --> 00:45:39,760
now these vulnerabilities are still

1169
00:45:39,760 --> 00:45:41,359
being worked on by apple

1170
00:45:41,359 --> 00:45:43,200
they applied some mitigations but they

1171
00:45:43,200 --> 00:45:45,520
are still

1172
00:45:45,520 --> 00:45:47,520
they still asked us to not disclose the

1173
00:45:47,520 --> 00:45:48,960
full details

1174
00:45:48,960 --> 00:45:51,680
so we cannot give all details but we can

1175
00:45:51,680 --> 00:45:52,319
describe

1176
00:45:52,319 --> 00:45:54,400
how if you have this vulnerability you

1177
00:45:54,400 --> 00:45:57,200
can exploit it

1178
00:45:58,560 --> 00:46:02,079
so suppose you have a process injection

1179
00:46:02,079 --> 00:46:04,800
vulnerability into any application may

1180
00:46:04,800 --> 00:46:07,119
be found that you can escape a sandbox

1181
00:46:07,119 --> 00:46:09,359
you can escalate privileges for normal

1182
00:46:09,359 --> 00:46:10,800
use with the roots

1183
00:46:10,800 --> 00:46:13,040
and you can bypass zip file system

1184
00:46:13,040 --> 00:46:14,079
restrictions

1185
00:46:14,079 --> 00:46:16,240
so any files that are protected by zip

1186
00:46:16,240 --> 00:46:17,280
you can modify

1187
00:46:17,280 --> 00:46:19,680
or read even though that should not be

1188
00:46:19,680 --> 00:46:22,078
allowed

1189
00:46:22,319 --> 00:46:25,359
first of all sandbox escape is a bit

1190
00:46:25,359 --> 00:46:26,960
boring

1191
00:46:26,960 --> 00:46:29,920
if you can inject into any non-sandbox

1192
00:46:29,920 --> 00:46:31,280
process

1193
00:46:31,280 --> 00:46:34,000
then you have a sandbox escape because

1194
00:46:34,000 --> 00:46:35,760
then you're executing outside of your

1195
00:46:35,760 --> 00:46:38,160
sandbox in a different application

1196
00:46:38,160 --> 00:46:40,720
which is a sandbox escape and we cannot

1197
00:46:40,720 --> 00:46:42,000
give more details than that

1198
00:46:42,000 --> 00:46:46,560
for this specific probability

1199
00:46:46,560 --> 00:46:50,000
privilege escalation is more interesting

1200
00:46:50,000 --> 00:46:52,079
there are a number of applications that

1201
00:46:52,079 --> 00:46:53,599
apple includes

1202
00:46:53,599 --> 00:46:55,599
which have an entitlement that looks

1203
00:46:55,599 --> 00:46:56,880
like this

1204
00:46:56,880 --> 00:47:00,000
so they have a authorization services

1205
00:47:00,000 --> 00:47:00,880
entitlement

1206
00:47:00,880 --> 00:47:03,760
with an array and that array can include

1207
00:47:03,760 --> 00:47:05,920
a number of different things

1208
00:47:05,920 --> 00:47:07,440
one of those is installing apple

1209
00:47:07,440 --> 00:47:09,599
software or apple software as a standard

1210
00:47:09,599 --> 00:47:10,960
user

1211
00:47:10,960 --> 00:47:13,839
and where this is used is in for example

1212
00:47:13,839 --> 00:47:14,800
boot camp

1213
00:47:14,800 --> 00:47:17,599
but also install command line developer

1214
00:47:17,599 --> 00:47:19,359
tools

1215
00:47:19,359 --> 00:47:21,760
this entitlement allows an application

1216
00:47:21,760 --> 00:47:23,280
to install a new

1217
00:47:23,280 --> 00:47:26,400
apple site package without the user

1218
00:47:26,400 --> 00:47:28,319
entering their password

1219
00:47:28,319 --> 00:47:30,160
so these applications can install

1220
00:47:30,160 --> 00:47:31,920
something some new components that they

1221
00:47:31,920 --> 00:47:34,960
may need for something

1222
00:47:36,400 --> 00:47:38,720
so we can install a new package but it

1223
00:47:38,720 --> 00:47:40,800
has to be signed by apple

1224
00:47:40,800 --> 00:47:42,480
now luckily we didn't have to look

1225
00:47:42,480 --> 00:47:44,800
through all packages signed by apple

1226
00:47:44,800 --> 00:47:47,839
because somebody else elias morat found

1227
00:47:47,839 --> 00:47:50,000
that the post install script of a

1228
00:47:50,000 --> 00:47:51,200
specific

1229
00:47:51,200 --> 00:47:53,760
package the macos public weather access

1230
00:47:53,760 --> 00:47:55,200
utility

1231
00:47:55,200 --> 00:47:57,520
can execute code as root if you install

1232
00:47:57,520 --> 00:47:59,680
it

1233
00:47:59,839 --> 00:48:02,160
this is the other vulnerabilities in our

1234
00:48:02,160 --> 00:48:03,839
blog post are now fixed

1235
00:48:03,839 --> 00:48:05,760
but because this package was signed and

1236
00:48:05,760 --> 00:48:07,760
it still has a valid signature that

1237
00:48:07,760 --> 00:48:09,359
apple isn't revoked

1238
00:48:09,359 --> 00:48:11,440
you can still install it to exploit this

1239
00:48:11,440 --> 00:48:13,359
issue

1240
00:48:13,359 --> 00:48:16,640
how this works is that it tries to run

1241
00:48:16,640 --> 00:48:19,280
a command relative to the disk that you

1242
00:48:19,280 --> 00:48:20,720
install it on

1243
00:48:20,720 --> 00:48:22,400
but it doesn't check that the disk you

1244
00:48:22,400 --> 00:48:24,240
install it on actually has mac os

1245
00:48:24,240 --> 00:48:26,800
on it so if you install to a new ram

1246
00:48:26,800 --> 00:48:27,920
disk or

1247
00:48:27,920 --> 00:48:29,440
some other type of disk that doesn't

1248
00:48:29,440 --> 00:48:31,520
have

1249
00:48:31,520 --> 00:48:33,839
normal mac os files then to still try to

1250
00:48:33,839 --> 00:48:35,359
run this command

1251
00:48:35,359 --> 00:48:38,000
so by creating this specific path it is

1252
00:48:38,000 --> 00:48:39,200
possible to execute

1253
00:48:39,200 --> 00:48:42,480
a script as root

1254
00:48:42,480 --> 00:48:45,359
by a application that has this

1255
00:48:45,359 --> 00:48:46,559
entitlement

1256
00:48:46,559 --> 00:48:48,400
so by injecting into an application with

1257
00:48:48,400 --> 00:48:49,680
the authorization

1258
00:48:49,680 --> 00:48:51,520
entitlement to install applesign

1259
00:48:51,520 --> 00:48:53,520
software and then installing this

1260
00:48:53,520 --> 00:48:55,040
package to a disk

1261
00:48:55,040 --> 00:48:59,119
it's possible to execute code as root

1262
00:49:00,880 --> 00:49:04,400
finally to bypass zip file system

1263
00:49:04,400 --> 00:49:05,920
restrictions

1264
00:49:05,920 --> 00:49:08,319
we found a application included in the

1265
00:49:08,319 --> 00:49:09,520
mac os

1266
00:49:09,520 --> 00:49:13,200
bixer beta disk image which has a very

1267
00:49:13,200 --> 00:49:14,880
powerful entitlement this is the

1268
00:49:14,880 --> 00:49:16,000
rootless install

1269
00:49:16,000 --> 00:49:19,520
heritable this means that it is exempt

1270
00:49:19,520 --> 00:49:20,319
from any

1271
00:49:20,319 --> 00:49:22,960
file system restrictions and also that

1272
00:49:22,960 --> 00:49:23,599
it is a

1273
00:49:23,599 --> 00:49:25,359
heritable entitlement which means any

1274
00:49:25,359 --> 00:49:27,599
sub-processes at starts

1275
00:49:27,599 --> 00:49:30,880
also have this entitlement which means

1276
00:49:30,880 --> 00:49:31,280
that

1277
00:49:31,280 --> 00:49:33,599
it can write to any location which is

1278
00:49:33,599 --> 00:49:36,480
protected by sip

1279
00:49:36,559 --> 00:49:39,839
which it is not yet fully

1280
00:49:39,839 --> 00:49:42,400
equal to kernel code execution but you

1281
00:49:42,400 --> 00:49:42,880
can

1282
00:49:42,880 --> 00:49:45,920
use this to load a kernel extension uh

1283
00:49:45,920 --> 00:49:46,800
as long as

1284
00:49:46,800 --> 00:49:49,599
it designed without usual authorization

1285
00:49:49,599 --> 00:49:51,280
so if you want full kernel

1286
00:49:51,280 --> 00:49:53,200
uh code execution that you need to find

1287
00:49:53,200 --> 00:49:54,480
the vulnerable

1288
00:49:54,480 --> 00:49:56,880
kernel extension or something else but

1289
00:49:56,880 --> 00:49:57,520
it is

1290
00:49:57,520 --> 00:50:00,559
pretty close to that uh we have a

1291
00:50:00,559 --> 00:50:02,640
demo video of all three vulnerabilities

1292
00:50:02,640 --> 00:50:04,000
here

1293
00:50:04,000 --> 00:50:06,000
so first we demonstrate this application

1294
00:50:06,000 --> 00:50:08,400
sandbox and then we

1295
00:50:08,400 --> 00:50:10,880
go through all three steps and then

1296
00:50:10,880 --> 00:50:12,640
demonstrate that we have

1297
00:50:12,640 --> 00:50:16,799
bypassed zip file system restrictions

1298
00:50:20,880 --> 00:50:23,200
so here you see this application was

1299
00:50:23,200 --> 00:50:24,640
indeed sandboxed

1300
00:50:24,640 --> 00:50:28,160
we start a reverse shell

1301
00:50:31,040 --> 00:50:32,640
now the privileged escalation step is

1302
00:50:32,640 --> 00:50:34,880
running which is a bit slower because it

1303
00:50:34,880 --> 00:50:36,400
needs to do the

1304
00:50:36,400 --> 00:50:39,200
installing of package and then the zip

1305
00:50:39,200 --> 00:50:42,240
which is quite quickly

1306
00:50:42,400 --> 00:50:43,839
as you can see this is now running as

1307
00:50:43,839 --> 00:50:45,680
root and

1308
00:50:45,680 --> 00:50:47,520
to demonstrate that we have root access

1309
00:50:47,520 --> 00:50:49,440
we go to the system policy

1310
00:50:49,440 --> 00:50:54,400
configuration directory which is where

1311
00:50:54,400 --> 00:50:56,000
your approved kernel extensions are

1312
00:50:56,000 --> 00:50:58,000
stored as you can see we can create a

1313
00:50:58,000 --> 00:51:00,800
new file there

1314
00:51:01,839 --> 00:51:05,680
so some some of our thoughts about these

1315
00:51:05,680 --> 00:51:09,200
security measures do they actually work

1316
00:51:09,200 --> 00:51:13,040
first of all tcc tcc is still pretty new

1317
00:51:13,040 --> 00:51:15,680
it's not well known by developers if you

1318
00:51:15,680 --> 00:51:18,559
report a vulnerability related to dcc

1319
00:51:18,559 --> 00:51:20,160
then often you need to completely

1320
00:51:20,160 --> 00:51:22,000
explain everything about it before

1321
00:51:22,000 --> 00:51:24,640
they even realize that it is actually a

1322
00:51:24,640 --> 00:51:26,319
vulnerability

1323
00:51:26,319 --> 00:51:28,319
and you only need one application to be

1324
00:51:28,319 --> 00:51:29,839
vulnerable

1325
00:51:29,839 --> 00:51:33,359
with a tcc permission to have malware

1326
00:51:33,359 --> 00:51:34,000
that can

1327
00:51:34,000 --> 00:51:36,800
also get that permission there are many

1328
00:51:36,800 --> 00:51:37,599
applications

1329
00:51:37,599 --> 00:51:39,839
electron but also other applications

1330
00:51:39,839 --> 00:51:42,160
that did not have library validation

1331
00:51:42,160 --> 00:51:44,079
that are inherently vulnerable that

1332
00:51:44,079 --> 00:51:46,240
cannot be protected using the current

1333
00:51:46,240 --> 00:51:51,200
code signing mechanism that macos uses

1334
00:51:51,200 --> 00:51:54,720
sandboxing sandboxing on mac os

1335
00:51:54,720 --> 00:51:57,200
benefits a lot from the research on ios

1336
00:51:57,200 --> 00:51:57,839
so

1337
00:51:57,839 --> 00:51:59,359
there's a lot of active research from

1338
00:51:59,359 --> 00:52:01,119
ios for kernel vulnerabilities for

1339
00:52:01,119 --> 00:52:02,319
jailbreaks

1340
00:52:02,319 --> 00:52:04,480
and those often also apply to mac os

1341
00:52:04,480 --> 00:52:05,680
which

1342
00:52:05,680 --> 00:52:09,280
gives those parts a lot of attention

1343
00:52:09,280 --> 00:52:11,440
there's also higher level layers for

1344
00:52:11,440 --> 00:52:12,319
sandboxing

1345
00:52:12,319 --> 00:52:15,760
like the open battle and this appears to

1346
00:52:15,760 --> 00:52:17,280
be completely unexplored

1347
00:52:17,280 --> 00:52:19,760
attack service because something as

1348
00:52:19,760 --> 00:52:21,920
simple as taking a snapshot from

1349
00:52:21,920 --> 00:52:26,480
a different view is still here and

1350
00:52:26,480 --> 00:52:28,079
those types of vulnerabilities should be

1351
00:52:28,079 --> 00:52:33,280
easy to spot if somebody looks at that

1352
00:52:33,280 --> 00:52:35,599
finally there might be some questions

1353
00:52:35,599 --> 00:52:37,040
for you about how this is

1354
00:52:37,040 --> 00:52:39,599
applied to windows or linux i have to

1355
00:52:39,599 --> 00:52:40,480
say

1356
00:52:40,480 --> 00:52:42,240
we know a lot less about those systems

1357
00:52:42,240 --> 00:52:44,559
than we know about mac os

1358
00:52:44,559 --> 00:52:48,480
so take this with a grain of salt

1359
00:52:48,480 --> 00:52:51,599
but as far as we know

1360
00:52:52,480 --> 00:52:55,040
there's no security boundary between

1361
00:52:55,040 --> 00:52:56,800
different processes running as the same

1362
00:52:56,800 --> 00:52:57,680
user

1363
00:52:57,680 --> 00:52:59,920
on windows and linux unless you opt in

1364
00:52:59,920 --> 00:53:01,599
to sandboxing so

1365
00:53:01,599 --> 00:53:05,200
uvb or sc linux then there's a

1366
00:53:05,200 --> 00:53:07,440
security boundary but otherwise all

1367
00:53:07,440 --> 00:53:08,559
applications can

1368
00:53:08,559 --> 00:53:11,760
access all hardware features or all

1369
00:53:11,760 --> 00:53:12,720
files that are

1370
00:53:12,720 --> 00:53:16,720
accessible to that user so tcc

1371
00:53:16,720 --> 00:53:18,960
in that regard is a completely extra

1372
00:53:18,960 --> 00:53:21,040
security layer that is not applicable to

1373
00:53:21,040 --> 00:53:22,960
their systems at all

1374
00:53:22,960 --> 00:53:27,200
and if you break through tcc

1375
00:53:27,200 --> 00:53:29,280
then that doesn't make mac os less

1376
00:53:29,280 --> 00:53:31,040
secure than windows or linux because

1377
00:53:31,040 --> 00:53:31,520
those

1378
00:53:31,520 --> 00:53:34,720
that layer is not there at all

1379
00:53:34,720 --> 00:53:36,880
however there's another way of looking

1380
00:53:36,880 --> 00:53:37,839
at it

1381
00:53:37,839 --> 00:53:41,520
that process injection on mac os

1382
00:53:41,520 --> 00:53:43,760
is now a very big issue if you have a

1383
00:53:43,760 --> 00:53:46,400
generic process injection technique

1384
00:53:46,400 --> 00:53:48,960
then as we have demonstrated we can

1385
00:53:48,960 --> 00:53:49,440
escape

1386
00:53:49,440 --> 00:53:51,520
the sandbox privilege escalator root and

1387
00:53:51,520 --> 00:53:53,680
then even bypass zip

1388
00:53:53,680 --> 00:53:55,920
so because the assumption is that

1389
00:53:55,920 --> 00:53:56,960
process injection

1390
00:53:56,960 --> 00:53:58,720
is not possible there are many

1391
00:53:58,720 --> 00:54:00,160
technologies or many

1392
00:54:00,160 --> 00:54:03,680
parts of the system built only on the

1393
00:54:03,680 --> 00:54:06,800
assumption that it is not possible while

1394
00:54:06,800 --> 00:54:08,640
windows and linux the assumption is that

1395
00:54:08,640 --> 00:54:10,480
process injection is just something that

1396
00:54:10,480 --> 00:54:11,680
happens

1397
00:54:11,680 --> 00:54:14,480
which means that it's very difficult to

1398
00:54:14,480 --> 00:54:16,319
compare those measures to

1399
00:54:16,319 --> 00:54:19,359
windows and linux

1400
00:54:20,480 --> 00:54:24,000
finally conclusion apple is trying to

1401
00:54:24,000 --> 00:54:25,520
bring the security of mac os to the

1402
00:54:25,520 --> 00:54:27,680
level of ios but it still has a long way

1403
00:54:27,680 --> 00:54:28,720
to go

1404
00:54:28,720 --> 00:54:30,559
there's a lot of work needed from

1405
00:54:30,559 --> 00:54:32,400
application developers

1406
00:54:32,400 --> 00:54:35,040
because stuff like this is not easy to

1407
00:54:35,040 --> 00:54:36,559
implement

1408
00:54:36,559 --> 00:54:39,760
and existing applications

1409
00:54:39,760 --> 00:54:41,520
apple doesn't want to break existing

1410
00:54:41,520 --> 00:54:43,359
applications all the time

1411
00:54:43,359 --> 00:54:45,839
there they slowly introduce new security

1412
00:54:45,839 --> 00:54:46,960
measures

1413
00:54:46,960 --> 00:54:48,640
but they cannot enforce the same

1414
00:54:48,640 --> 00:54:50,400
restrictions as on ios

1415
00:54:50,400 --> 00:54:53,359
in one go so that's why the current

1416
00:54:53,359 --> 00:54:54,559
measures

1417
00:54:54,559 --> 00:54:58,880
are good but they still require a lot of

1418
00:55:01,960 --> 00:55:04,960
work

