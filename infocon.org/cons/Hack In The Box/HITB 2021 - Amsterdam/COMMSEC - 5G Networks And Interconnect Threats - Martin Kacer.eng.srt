1
00:00:15,200 --> 00:00:17,279
hello my name is martin gacher

2
00:00:17,279 --> 00:00:19,279
i'm working as a security researcher for

3
00:00:19,279 --> 00:00:20,480
mobilion

4
00:00:20,480 --> 00:00:23,039
and during this talk i would like to

5
00:00:23,039 --> 00:00:24,880
cover 5g mobile networks and the

6
00:00:24,880 --> 00:00:27,840
interconnect threats

7
00:00:28,240 --> 00:00:30,640
first allow me to introduce the company

8
00:00:30,640 --> 00:00:31,359
so

9
00:00:31,359 --> 00:00:33,760
mobilium is a global company with global

10
00:00:33,760 --> 00:00:34,719
footprint

11
00:00:34,719 --> 00:00:36,960
mainly providing the roaming and network

12
00:00:36,960 --> 00:00:38,480
solutions

13
00:00:38,480 --> 00:00:41,600
fraud and risk testing monitoring mainly

14
00:00:41,600 --> 00:00:43,040
for the mobile operators and the

15
00:00:43,040 --> 00:00:44,160
carriers

16
00:00:44,160 --> 00:00:46,800
but also security solutions like

17
00:00:46,800 --> 00:00:47,920
signaling firewalls

18
00:00:47,920 --> 00:00:52,559
threat intelligence and other products

19
00:00:53,600 --> 00:00:55,920
i'm security consultant working for

20
00:00:55,920 --> 00:00:57,120
mobilium

21
00:00:57,120 --> 00:00:58,800
in the past i developed open source

22
00:00:58,800 --> 00:01:00,399
signaling firewall

23
00:01:00,399 --> 00:01:03,199
did some wireshark contributions and

24
00:01:03,199 --> 00:01:05,519
also contributed to the gsma security

25
00:01:05,519 --> 00:01:08,080
guidelines for mobile operators

26
00:01:08,080 --> 00:01:11,520
covering ss7 diameter gtpc and 5g

27
00:01:11,520 --> 00:01:14,240
protocols and also did some android

28
00:01:14,240 --> 00:01:16,880
development

29
00:01:17,920 --> 00:01:20,880
now during this talk let's focus on the

30
00:01:20,880 --> 00:01:21,840
interconnects

31
00:01:21,840 --> 00:01:24,080
so basically interconnects is something

32
00:01:24,080 --> 00:01:26,240
like private networks between the mobile

33
00:01:26,240 --> 00:01:29,360
network operators

34
00:01:29,439 --> 00:01:31,680
mainly they are used to allow the

35
00:01:31,680 --> 00:01:32,960
roaming

36
00:01:32,960 --> 00:01:34,720
while the subscriber is moving between

37
00:01:34,720 --> 00:01:36,640
one country and other

38
00:01:36,640 --> 00:01:39,759
another and these are private networks

39
00:01:39,759 --> 00:01:40,320
compared

40
00:01:40,320 --> 00:01:43,680
to the internet for example and

41
00:01:43,680 --> 00:01:46,880
5g introduced new architecture and

42
00:01:46,880 --> 00:01:49,520
basically new core networks also so

43
00:01:49,520 --> 00:01:51,600
let's cover this

44
00:01:51,600 --> 00:01:54,079
so basically there exists two models how

45
00:01:54,079 --> 00:01:55,280
the 5g could be

46
00:01:55,280 --> 00:01:58,560
deployed one is called non-standalone

47
00:01:58,560 --> 00:02:01,200
architecture basically this means that

48
00:02:01,200 --> 00:02:01,680
the

49
00:02:01,680 --> 00:02:04,960
5g run will be deployed but the core

50
00:02:04,960 --> 00:02:06,799
network will remain the same so this

51
00:02:06,799 --> 00:02:08,479
will be basically the evolved packet

52
00:02:08,479 --> 00:02:09,119
core

53
00:02:09,119 --> 00:02:11,430
4g network just the run will be

54
00:02:11,430 --> 00:02:12,640
[Music]

55
00:02:12,640 --> 00:02:15,360
5g in this scenario the interconnection

56
00:02:15,360 --> 00:02:17,440
between mobile operators will remain the

57
00:02:17,440 --> 00:02:21,280
same diameter gtpc and gdpu

58
00:02:21,280 --> 00:02:24,560
uh the second model is 5g standalone

59
00:02:24,560 --> 00:02:26,720
architecture which means that there will

60
00:02:26,720 --> 00:02:27,840
be 5g run

61
00:02:27,840 --> 00:02:30,400
but in the same time also 5g core

62
00:02:30,400 --> 00:02:31,360
network

63
00:02:31,360 --> 00:02:32,959
and now if there would be

64
00:02:32,959 --> 00:02:34,840
interconnections between

65
00:02:34,840 --> 00:02:38,560
operators there will be 5g interconnects

66
00:02:38,560 --> 00:02:43,360
using protocols like http 2 and gdpu

67
00:02:43,680 --> 00:02:46,000
here is just the overview how it looks

68
00:02:46,000 --> 00:02:47,040
like so

69
00:02:47,040 --> 00:02:50,720
behind the 5g neuron we can have 4g

70
00:02:50,720 --> 00:02:54,400
or 5g core network

71
00:02:54,400 --> 00:02:56,640
in this talk let's focus on the 5g

72
00:02:56,640 --> 00:02:58,480
standalone architecture because from the

73
00:02:58,480 --> 00:02:59,599
security

74
00:02:59,599 --> 00:03:02,959
perspective if there is 4g core we need

75
00:03:02,959 --> 00:03:04,239
to apply the similar

76
00:03:04,239 --> 00:03:06,560
security like for the diameter security

77
00:03:06,560 --> 00:03:09,920
and gdpc security

78
00:03:10,239 --> 00:03:13,519
here is the evolution so uh from 4g

79
00:03:13,519 --> 00:03:17,120
to 5g there were several changes

80
00:03:17,120 --> 00:03:19,200
so for the authentication and mobility

81
00:03:19,200 --> 00:03:21,920
management in the past in 2g 3g

82
00:03:21,920 --> 00:03:24,640
mainly the ss7 protocol and with map has

83
00:03:24,640 --> 00:03:25,680
been used

84
00:03:25,680 --> 00:03:28,400
in 4g this was replaced by the diameter

85
00:03:28,400 --> 00:03:29,360
and in 5g

86
00:03:29,360 --> 00:03:32,080
we will use hdp2 to deliver basically

87
00:03:32,080 --> 00:03:32,879
the

88
00:03:32,879 --> 00:03:34,640
subscriber profile authenticate the

89
00:03:34,640 --> 00:03:36,000
subscriber

90
00:03:36,000 --> 00:03:38,319
and other messages for the session

91
00:03:38,319 --> 00:03:39,120
management

92
00:03:39,120 --> 00:03:43,040
in 2g 3g and even 4g the gtpc

93
00:03:43,040 --> 00:03:45,280
protocol has been used to establish the

94
00:03:45,280 --> 00:03:46,239
sessions

95
00:03:46,239 --> 00:03:49,760
in 5g also the http 2 will be used to

96
00:03:49,760 --> 00:03:51,440
replace the gdpc

97
00:03:51,440 --> 00:03:54,080
for the user plane encapsulation so

98
00:03:54,080 --> 00:03:55,840
basically where the

99
00:03:55,840 --> 00:03:58,560
ip packets are encapsulated between the

100
00:03:58,560 --> 00:03:59,439
core networks

101
00:03:59,439 --> 00:04:03,690
basically always the same is used gdpu

102
00:04:03,690 --> 00:04:05,519
[Music]

103
00:04:05,519 --> 00:04:07,439
uh regarding the network elements

104
00:04:07,439 --> 00:04:09,920
evolution so basically these are the

105
00:04:09,920 --> 00:04:13,200
uh systems which are inside the core

106
00:04:13,200 --> 00:04:14,720
network

107
00:04:14,720 --> 00:04:17,918
in the 2g 3g and 4g we use the more

108
00:04:17,918 --> 00:04:20,478
the name like network element in the 5g

109
00:04:20,478 --> 00:04:22,960
because it will be service based

110
00:04:22,960 --> 00:04:25,680
architecture name network function is

111
00:04:25,680 --> 00:04:27,600
used

112
00:04:27,600 --> 00:04:30,000
so we see that uh the network elements

113
00:04:30,000 --> 00:04:31,040
names are now

114
00:04:31,040 --> 00:04:33,680
changed in 5gb will have udm so this is

115
00:04:33,680 --> 00:04:34,479
the main

116
00:04:34,479 --> 00:04:36,560
subscriber database storing the

117
00:04:36,560 --> 00:04:38,960
subscriptions of the users

118
00:04:38,960 --> 00:04:42,960
msc vlr in 4g and 5g

119
00:04:42,960 --> 00:04:45,360
this network element is not there simply

120
00:04:45,360 --> 00:04:46,880
because the voice is not

121
00:04:46,880 --> 00:04:50,479
natively supported by the core

122
00:04:50,479 --> 00:04:54,160
but ims ip multimedia subsystem deliver

123
00:04:54,160 --> 00:04:57,280
the voice service so the

124
00:04:57,280 --> 00:05:00,800
4g and 5g is something similar like

125
00:05:00,800 --> 00:05:02,639
providing the ipv error for the

126
00:05:02,639 --> 00:05:04,720
subscribers

127
00:05:04,720 --> 00:05:08,479
hgsn or mme sjw has now evolved into amf

128
00:05:08,479 --> 00:05:11,360
smf upf so access mobility management

129
00:05:11,360 --> 00:05:12,960
functions session management function

130
00:05:12,960 --> 00:05:14,560
and the user plan function

131
00:05:14,560 --> 00:05:18,880
the ggsn or pgw in 4g is now in 5g

132
00:05:18,880 --> 00:05:22,000
smf upf

133
00:05:23,440 --> 00:05:26,479
5g regarding roaming and interconnects

134
00:05:26,479 --> 00:05:29,840
uh introduced significant improvement

135
00:05:29,840 --> 00:05:31,120
regarding the security

136
00:05:31,120 --> 00:05:33,759
so now all the interconnections should

137
00:05:33,759 --> 00:05:34,960
be protected by

138
00:05:34,960 --> 00:05:38,160
n32 interface this interface should be

139
00:05:38,160 --> 00:05:41,120
interfaced between the mno to mno

140
00:05:41,120 --> 00:05:43,120
basically mobile network operator to

141
00:05:43,120 --> 00:05:45,680
other mobile network operator and

142
00:05:45,680 --> 00:05:47,520
providing mainly the authenticity

143
00:05:47,520 --> 00:05:49,360
so to prevent some message spoofing

144
00:05:49,360 --> 00:05:51,919
integrity that the messages has been not

145
00:05:51,919 --> 00:05:54,000
changed by some party in the middle

146
00:05:54,000 --> 00:05:56,360
and also confidentiality full

147
00:05:56,360 --> 00:05:57,759
confidentiality or

148
00:05:57,759 --> 00:06:00,720
at least to protect certain fields

149
00:06:00,720 --> 00:06:03,440
inside the signalization

150
00:06:03,440 --> 00:06:06,479
here on the network edge

151
00:06:06,479 --> 00:06:08,800
should be deployed sep basically which

152
00:06:08,800 --> 00:06:11,039
is security edge protection proxy

153
00:06:11,039 --> 00:06:14,240
and these network functions should

154
00:06:14,240 --> 00:06:15,520
basically

155
00:06:15,520 --> 00:06:18,840
uh terminate or establish the n32

156
00:06:18,840 --> 00:06:21,919
interconnect regarding the n32

157
00:06:21,919 --> 00:06:25,039
so it is divided into two

158
00:06:25,039 --> 00:06:28,880
separate uh let's say sub interfaces and

159
00:06:28,880 --> 00:06:30,080
40 to c

160
00:06:30,080 --> 00:06:32,639
which is really direct set to sep over

161
00:06:32,639 --> 00:06:33,680
tls

162
00:06:33,680 --> 00:06:35,759
this is basically kind of handshake and

163
00:06:35,759 --> 00:06:37,840
to negotiate on the security

164
00:06:37,840 --> 00:06:39,440
capabilities

165
00:06:39,440 --> 00:06:42,479
and second is n32f this one is

166
00:06:42,479 --> 00:06:44,560
to deliver actually the signaling

167
00:06:44,560 --> 00:06:45,680
messages

168
00:06:45,680 --> 00:06:48,080
after the handshake so it can be

169
00:06:48,080 --> 00:06:49,840
protected by using tls

170
00:06:49,840 --> 00:06:51,759
this is something if there is really

171
00:06:51,759 --> 00:06:53,360
direct link

172
00:06:53,360 --> 00:06:56,479
be from one operator to other then we

173
00:06:56,479 --> 00:06:58,800
can rely on the transport security

174
00:06:58,800 --> 00:07:01,120
and the second is kind of application

175
00:07:01,120 --> 00:07:02,000
layer

176
00:07:02,000 --> 00:07:04,400
security this is basically brings

177
00:07:04,400 --> 00:07:06,400
protocol for n40 to interconnect

178
00:07:06,400 --> 00:07:08,080
security

179
00:07:08,080 --> 00:07:11,199
uh this was designed to

180
00:07:11,199 --> 00:07:14,960
allow also some parties in the middle

181
00:07:14,960 --> 00:07:18,319
like roaming up or

182
00:07:18,319 --> 00:07:21,680
some http proxy which can forward

183
00:07:21,680 --> 00:07:25,280
the n32 message but basically still the

184
00:07:25,280 --> 00:07:27,360
mobile operators could

185
00:07:27,360 --> 00:07:30,080
secure somehow the messages with some

186
00:07:30,080 --> 00:07:30,960
signatures

187
00:07:30,960 --> 00:07:33,759
or integrity or even confidentiality of

188
00:07:33,759 --> 00:07:35,919
certain fields

189
00:07:35,919 --> 00:07:39,840
regarding all these so

190
00:07:39,840 --> 00:07:42,080
keys should be exchanged between mobile

191
00:07:42,080 --> 00:07:43,199
operators

192
00:07:43,199 --> 00:07:45,199
and this is covered by the 5g key

193
00:07:45,199 --> 00:07:47,360
management procedure

194
00:07:47,360 --> 00:07:51,440
so it is public document gsma fs34

195
00:07:51,440 --> 00:07:54,560
defining how the operators could

196
00:07:54,560 --> 00:07:56,879
exchange basically the keys to enable

197
00:07:56,879 --> 00:07:58,160
this

198
00:07:58,160 --> 00:08:01,520
5g roaming current stage is manual but

199
00:08:01,520 --> 00:08:03,759
in the future it is expected to automate

200
00:08:03,759 --> 00:08:06,319
the process

201
00:08:06,879 --> 00:08:09,840
here is just the overview so it can be

202
00:08:09,840 --> 00:08:11,199
seen on this picture that

203
00:08:11,199 --> 00:08:14,319
n32c should be direct links between the

204
00:08:14,319 --> 00:08:18,639
operators while n32f could be direct

205
00:08:18,639 --> 00:08:22,000
or even could be go through

206
00:08:22,000 --> 00:08:26,400
for example some intermediate proxy

207
00:08:26,400 --> 00:08:29,199
from mno2 over for example roaming up

208
00:08:29,199 --> 00:08:29,759
towards

209
00:08:29,759 --> 00:08:35,120
mno4 and the similar even if there are

210
00:08:35,120 --> 00:08:38,640
two hops in the middle in this way still

211
00:08:38,640 --> 00:08:42,320
some uh mno to mno security could be

212
00:08:42,320 --> 00:08:43,519
provided even in

213
00:08:43,519 --> 00:08:46,480
if there are intermediate hopes without

214
00:08:46,480 --> 00:08:47,519
this protocol

215
00:08:47,519 --> 00:08:49,519
uh basically it will be more like hope

216
00:08:49,519 --> 00:08:51,120
by hope security

217
00:08:51,120 --> 00:08:54,640
and the originating and terminating mno

218
00:08:54,640 --> 00:08:59,040
could not really verify the the messages

219
00:08:59,040 --> 00:09:01,440
or protect even by encryption certain

220
00:09:01,440 --> 00:09:03,519
fields

221
00:09:03,519 --> 00:09:06,320
uh still even if this has been

222
00:09:06,320 --> 00:09:07,519
introduced in 5g

223
00:09:07,519 --> 00:09:10,160
which is significant improvement still

224
00:09:10,160 --> 00:09:12,480
there are possible attack vectors

225
00:09:12,480 --> 00:09:14,800
and basically in this picture or diagram

226
00:09:14,800 --> 00:09:15,920
it is seen that

227
00:09:15,920 --> 00:09:18,080
if the mno3 interconnects some third

228
00:09:18,080 --> 00:09:19,360
party

229
00:09:19,360 --> 00:09:22,480
and this third party sends some illegal

230
00:09:22,480 --> 00:09:23,200
message

231
00:09:23,200 --> 00:09:25,040
still the message can be tunneled

232
00:09:25,040 --> 00:09:26,240
through the secure

233
00:09:26,240 --> 00:09:29,920
interconnection towards the mno4 network

234
00:09:29,920 --> 00:09:31,920
in this way for example the message can

235
00:09:31,920 --> 00:09:33,519
target mno4

236
00:09:33,519 --> 00:09:37,920
subscribers or possibly inbound drummers

237
00:09:37,920 --> 00:09:40,240
in mno4 network for example which are

238
00:09:40,240 --> 00:09:42,480
not belonging to mmno3

239
00:09:42,480 --> 00:09:44,800
so there is no reason why this kind of

240
00:09:44,800 --> 00:09:46,000
messages should be

241
00:09:46,000 --> 00:09:50,080
allowed towards the manual floor

242
00:09:50,080 --> 00:09:53,360
this means basically that still there is

243
00:09:53,360 --> 00:09:54,320
need for

244
00:09:54,320 --> 00:09:58,240
application layer firewalling inside

245
00:09:58,240 --> 00:10:00,880
the protocol or inside the communication

246
00:10:00,880 --> 00:10:01,360
and

247
00:10:01,360 --> 00:10:03,920
there is still need for some signaling

248
00:10:03,920 --> 00:10:04,720
firewall

249
00:10:04,720 --> 00:10:10,160
inside or after decrypting the n32

250
00:10:10,160 --> 00:10:12,519
regarding this there exist document gsma

251
00:10:12,519 --> 00:10:15,040
fs36 which

252
00:10:15,040 --> 00:10:17,680
performs some risk assessment and

253
00:10:17,680 --> 00:10:21,279
classification of the 5g messages

254
00:10:21,279 --> 00:10:24,240
and additionally for 5g messages you can

255
00:10:24,240 --> 00:10:25,760
also refer to this

256
00:10:25,760 --> 00:10:28,079
public repository and it includes

257
00:10:28,079 --> 00:10:28,800
basically

258
00:10:28,800 --> 00:10:31,519
open api or the scheme defining the

259
00:10:31,519 --> 00:10:33,120
messages which is very

260
00:10:33,120 --> 00:10:35,519
useful

261
00:10:37,200 --> 00:10:40,560
5g messages and interconnect filtering

262
00:10:40,560 --> 00:10:42,480
so basically the messages could be

263
00:10:42,480 --> 00:10:45,360
classified based on the

264
00:10:45,360 --> 00:10:48,640
on the way how they should be used

265
00:10:48,640 --> 00:10:50,560
there exists also entropy element

266
00:10:50,560 --> 00:10:52,320
messages only this means

267
00:10:52,320 --> 00:10:55,680
that some messages should not be used

268
00:10:55,680 --> 00:10:59,040
between the operators and should

269
00:10:59,040 --> 00:11:02,320
really stay just within the same network

270
00:11:02,320 --> 00:11:04,240
they are winning the gsm error

271
00:11:04,240 --> 00:11:06,240
classifiers category 1 and

272
00:11:06,240 --> 00:11:07,920
these messages could be dropped when

273
00:11:07,920 --> 00:11:09,600
received from the interconnect

274
00:11:09,600 --> 00:11:11,519
then there are messages which need to be

275
00:11:11,519 --> 00:11:13,120
allowed basically because we have the

276
00:11:13,120 --> 00:11:14,959
roaming between the networks there could

277
00:11:14,959 --> 00:11:17,279
be communication from vpn visited

278
00:11:17,279 --> 00:11:18,959
network to home network

279
00:11:18,959 --> 00:11:21,760
or in opposite way these are could be

280
00:11:21,760 --> 00:11:22,480
classified

281
00:11:22,480 --> 00:11:24,560
or are classified within the gsms

282
00:11:24,560 --> 00:11:26,720
category 2 and category 3.

283
00:11:26,720 --> 00:11:28,480
additionally in 5g there could be also

284
00:11:28,480 --> 00:11:30,800
other messages like

285
00:11:30,800 --> 00:11:33,360
network to network communication even if

286
00:11:33,360 --> 00:11:34,000
there is not

287
00:11:34,000 --> 00:11:37,200
involve subscriber and uh

288
00:11:37,200 --> 00:11:40,720
for example also there for in later

289
00:11:40,720 --> 00:11:42,079
releases there could be

290
00:11:42,079 --> 00:11:44,880
sms service and this is more like a

291
00:11:44,880 --> 00:11:45,760
party to b

292
00:11:45,760 --> 00:11:48,880
party communication uh

293
00:11:48,880 --> 00:11:51,040
so it is a bit different than the

294
00:11:51,040 --> 00:11:52,240
roaming situation

295
00:11:52,240 --> 00:11:56,399
and also other messages

296
00:11:56,399 --> 00:11:59,200
regarding your testing or if you are

297
00:11:59,200 --> 00:12:00,160
interested

298
00:12:00,160 --> 00:12:03,760
uh in uh testing uh 5g

299
00:12:03,760 --> 00:12:05,920
and set up some lab environment you can

300
00:12:05,920 --> 00:12:07,519
use these

301
00:12:07,519 --> 00:12:11,839
projects so one is free 5g core

302
00:12:11,839 --> 00:12:15,360
so it is open source project second

303
00:12:15,360 --> 00:12:19,839
is gnbc basically 5g run simulator

304
00:12:19,839 --> 00:12:21,839
this is useful that if you are not

305
00:12:21,839 --> 00:12:23,839
willing to use real physical sim card

306
00:12:23,839 --> 00:12:24,399
with some

307
00:12:24,399 --> 00:12:27,360
card reader how you can attach basically

308
00:12:27,360 --> 00:12:28,959
or simulate the attach

309
00:12:28,959 --> 00:12:31,600
of the ue which can be useful if you are

310
00:12:31,600 --> 00:12:32,240
willing then

311
00:12:32,240 --> 00:12:34,880
later on to test for example some http 2

312
00:12:34,880 --> 00:12:37,360
messages towards the core

313
00:12:37,360 --> 00:12:40,000
uh regarding the client for this testing

314
00:12:40,000 --> 00:12:42,000
so basically you can use

315
00:12:42,000 --> 00:12:44,639
or you can uh try to use open api

316
00:12:44,639 --> 00:12:45,600
generators to

317
00:12:45,600 --> 00:12:47,839
generate the client and the server for

318
00:12:47,839 --> 00:12:49,920
you other way is really just to write

319
00:12:49,920 --> 00:12:51,839
your http

320
00:12:51,839 --> 00:12:55,360
2 client directly for the testing

321
00:12:55,360 --> 00:12:58,079
basically without the generators

322
00:12:58,079 --> 00:13:00,399
regarding the limitations of free 5g

323
00:13:00,399 --> 00:13:01,839
core

324
00:13:01,839 --> 00:13:05,279
currently there is no sep or no out

325
00:13:05,279 --> 00:13:09,040
authentication of the nrf

326
00:13:09,040 --> 00:13:10,880
regarding the setup so you can do

327
00:13:10,880 --> 00:13:13,760
something similar

328
00:13:13,760 --> 00:13:18,000
for example install ubuntu vm

329
00:13:18,000 --> 00:13:21,040
inside deploy free 5g core and

330
00:13:21,040 --> 00:13:24,320
install gnbc then

331
00:13:24,320 --> 00:13:27,040
uh from the host or even directly from

332
00:13:27,040 --> 00:13:28,320
the ubuntu vm

333
00:13:28,320 --> 00:13:30,639
you can use your http to client to

334
00:13:30,639 --> 00:13:32,480
inject the messages

335
00:13:32,480 --> 00:13:34,880
and send it and test it towards the core

336
00:13:34,880 --> 00:13:36,720
so on the left panel you see just the

337
00:13:36,720 --> 00:13:38,079
examples how to

338
00:13:38,079 --> 00:13:41,120
or of the running below

339
00:13:41,120 --> 00:13:44,639
regarding the open api generators so

340
00:13:44,639 --> 00:13:47,920
uh if you are familiar with previous

341
00:13:47,920 --> 00:13:48,800
generations

342
00:13:48,800 --> 00:13:52,639
and protocols like ss7 there was use

343
00:13:52,639 --> 00:13:55,519
asn one like abstract syntax notation

344
00:13:55,519 --> 00:13:57,360
which was basically some kind of

345
00:13:57,360 --> 00:14:00,639
scheme and based on these you were able

346
00:14:00,639 --> 00:14:01,040
by

347
00:14:01,040 --> 00:14:05,440
using sn1 compilers to generate

348
00:14:05,440 --> 00:14:08,959
the encoder or decoder for the payload

349
00:14:08,959 --> 00:14:12,800
something similar is used for the http 2

350
00:14:12,800 --> 00:14:16,240
and open api so basically these

351
00:14:16,240 --> 00:14:19,040
uh define or prescribe the messages how

352
00:14:19,040 --> 00:14:20,880
they should look like how the api should

353
00:14:20,880 --> 00:14:21,839
look like

354
00:14:21,839 --> 00:14:23,600
and after you can compile your code

355
00:14:23,600 --> 00:14:25,920
which will create some skeleton of the

356
00:14:25,920 --> 00:14:29,120
client and the server but

357
00:14:29,120 --> 00:14:31,279
alternative is also you can write your

358
00:14:31,279 --> 00:14:32,560
custom client

359
00:14:32,560 --> 00:14:36,720
why mainly because http 2 and json

360
00:14:36,720 --> 00:14:40,079
messages are really easy to encode

361
00:14:40,079 --> 00:14:43,199
and it is there is no significant

362
00:14:43,199 --> 00:14:46,560
hex or byte encoding like

363
00:14:46,560 --> 00:14:49,680
uh in ssn there was bear or some tlv

364
00:14:49,680 --> 00:14:52,959
encoding in the diameter

365
00:14:54,000 --> 00:14:57,040
here is simple example of http 2

366
00:14:57,040 --> 00:15:00,079
python client so it is really easy

367
00:15:00,079 --> 00:15:02,639
you can open the connection towards the

368
00:15:02,639 --> 00:15:05,120
target target ip address and port using

369
00:15:05,120 --> 00:15:07,199
the http 2

370
00:15:07,199 --> 00:15:10,000
and then just send the get request for

371
00:15:10,000 --> 00:15:10,880
example

372
00:15:10,880 --> 00:15:13,920
for target url and similar

373
00:15:13,920 --> 00:15:16,240
something similar for post so you will

374
00:15:16,240 --> 00:15:18,320
just

375
00:15:18,320 --> 00:15:21,680
define the target ip port post

376
00:15:21,680 --> 00:15:24,399
url and then the payload so basically

377
00:15:24,399 --> 00:15:26,800
inside is the json additionally you can

378
00:15:26,800 --> 00:15:27,519
specify

379
00:15:27,519 --> 00:15:32,079
for example the message headers

380
00:15:33,279 --> 00:15:36,639
and then you read just the response back

381
00:15:36,639 --> 00:15:39,680
now let's imagine that the free 5g core

382
00:15:39,680 --> 00:15:42,079
is some real target network and we can

383
00:15:42,079 --> 00:15:44,160
imagine that by using our client

384
00:15:44,160 --> 00:15:48,480
we will try to inject some messages

385
00:15:48,480 --> 00:15:52,079
towards the target plnm so we can start

386
00:15:52,079 --> 00:15:52,880
maybe with

387
00:15:52,880 --> 00:15:56,000
one example this is search nf instances

388
00:15:56,000 --> 00:15:58,240
the the client or the producers of these

389
00:15:58,240 --> 00:15:59,600
messages should be

390
00:15:59,600 --> 00:16:02,320
basically network functions or scp or

391
00:16:02,320 --> 00:16:02,880
nrf

392
00:16:02,880 --> 00:16:05,920
and consumer is the nrf nrf is some

393
00:16:05,920 --> 00:16:06,880
network element

394
00:16:06,880 --> 00:16:10,320
which acts as some

395
00:16:10,320 --> 00:16:12,959
some registrar function that every

396
00:16:12,959 --> 00:16:14,000
network functions

397
00:16:14,000 --> 00:16:16,639
should register towards the nrf and nrf

398
00:16:16,639 --> 00:16:18,320
also provide the information

399
00:16:18,320 --> 00:16:20,880
what network functions are registered

400
00:16:20,880 --> 00:16:21,759
there

401
00:16:21,759 --> 00:16:24,800
so it works basically in both ways

402
00:16:24,800 --> 00:16:27,600
there is also a possibility that the 1p

403
00:16:27,600 --> 00:16:29,519
element to other communicates

404
00:16:29,519 --> 00:16:32,160
there is nrf to nrf interface and

405
00:16:32,160 --> 00:16:33,440
basically it can query

406
00:16:33,440 --> 00:16:35,519
also what are the target network

407
00:16:35,519 --> 00:16:37,040
elements

408
00:16:37,040 --> 00:16:39,440
so you can see that we can craft easily

409
00:16:39,440 --> 00:16:42,720
message http get towards the target url

410
00:16:42,720 --> 00:16:45,680
and there we have like we are acting

411
00:16:45,680 --> 00:16:46,079
like

412
00:16:46,079 --> 00:16:49,680
amf and querying the nrf and asking

413
00:16:49,680 --> 00:16:50,000
please

414
00:16:50,000 --> 00:16:54,959
provide us the udms in the plm network

415
00:16:55,199 --> 00:16:59,680
now here is just the overview how it can

416
00:16:59,680 --> 00:17:01,759
look like so we can receive this message

417
00:17:01,759 --> 00:17:03,600
from one mno1

418
00:17:03,600 --> 00:17:06,240
towards the ml2 and reaching the nrf

419
00:17:06,240 --> 00:17:07,760
gear

420
00:17:07,760 --> 00:17:09,919
basically the impact will be topology

421
00:17:09,919 --> 00:17:10,880
discovery

422
00:17:10,880 --> 00:17:13,119
and how the response looks like so this

423
00:17:13,119 --> 00:17:15,679
is just capture from the wireshark

424
00:17:15,679 --> 00:17:17,919
that after sending our get request we

425
00:17:17,919 --> 00:17:19,679
received 200 ok

426
00:17:19,679 --> 00:17:22,880
and the payload back and we can see now

427
00:17:22,880 --> 00:17:24,000
we

428
00:17:24,000 --> 00:17:25,839
have also all the details like ip

429
00:17:25,839 --> 00:17:28,559
address and at instance id

430
00:17:28,559 --> 00:17:32,799
and even like uh service name

431
00:17:32,799 --> 00:17:36,720
so all the apis which are supported by

432
00:17:36,720 --> 00:17:37,360
the target

433
00:17:37,360 --> 00:17:40,880
network function so this can be useful

434
00:17:40,880 --> 00:17:43,120
to perform some network discovery

435
00:17:43,120 --> 00:17:46,160
topology discovery of the target network

436
00:17:46,160 --> 00:17:48,400
other example of additional message is

437
00:17:48,400 --> 00:17:50,320
the register nf instance

438
00:17:50,320 --> 00:17:53,520
so here this mesh switch it is produced

439
00:17:53,520 --> 00:17:53,840
by

440
00:17:53,840 --> 00:17:56,880
network function or scp towards the nrf

441
00:17:56,880 --> 00:17:59,520
now the difference is that the register

442
00:17:59,520 --> 00:18:00,640
or registration

443
00:18:00,640 --> 00:18:02,400
should be done within the interrupt

444
00:18:02,400 --> 00:18:04,640
element only so for example if such

445
00:18:04,640 --> 00:18:05,840
message is received through the

446
00:18:05,840 --> 00:18:06,720
interconnect

447
00:18:06,720 --> 00:18:10,880
it should be blocked

448
00:18:10,880 --> 00:18:14,000
to prevent some not which behavior in

449
00:18:14,000 --> 00:18:15,120
the network

450
00:18:15,120 --> 00:18:17,280
here we can see how it is easy to grab

451
00:18:17,280 --> 00:18:18,640
the message so

452
00:18:18,640 --> 00:18:21,760
just sending the delete regarding or

453
00:18:21,760 --> 00:18:24,240
towards the target url and here should

454
00:18:24,240 --> 00:18:26,720
be some nf instance id

455
00:18:26,720 --> 00:18:29,039
uh this we can retrieve through the

456
00:18:29,039 --> 00:18:30,000
search

457
00:18:30,000 --> 00:18:33,520
as seen on the previous slides

458
00:18:33,520 --> 00:18:35,440
here is just the global picture like one

459
00:18:35,440 --> 00:18:37,200
network can send it towards the other

460
00:18:37,200 --> 00:18:38,559
network

461
00:18:38,559 --> 00:18:41,200
uh send register target nf and possibly

462
00:18:41,200 --> 00:18:42,000
can

463
00:18:42,000 --> 00:18:45,120
maybe disrupt the service that the nrf

464
00:18:45,120 --> 00:18:48,480
and rf will be not able or

465
00:18:48,480 --> 00:18:50,960
will be not consider the target network

466
00:18:50,960 --> 00:18:54,480
function as registered anymore

467
00:18:54,799 --> 00:18:58,080
other example of next message is get

468
00:18:58,080 --> 00:19:00,160
free gpp registration

469
00:19:00,160 --> 00:19:02,880
now the producer is network exposure

470
00:19:02,880 --> 00:19:03,840
function

471
00:19:03,840 --> 00:19:08,000
consumer or the targeted system is udm

472
00:19:08,000 --> 00:19:10,559
there is not much description in current

473
00:19:10,559 --> 00:19:11,919
3gpp releases

474
00:19:11,919 --> 00:19:15,600
but it is intra plm message only so

475
00:19:15,600 --> 00:19:18,480
it should be not normally allowed from

476
00:19:18,480 --> 00:19:19,919
the interconnect

477
00:19:19,919 --> 00:19:22,480
example is quite simple we can send the

478
00:19:22,480 --> 00:19:23,039
http

479
00:19:23,039 --> 00:19:26,720
get towards the target you you url then

480
00:19:26,720 --> 00:19:27,600
there is the

481
00:19:27,600 --> 00:19:29,760
emcee and we are asking for the

482
00:19:29,760 --> 00:19:34,160
registration of amf free gpp access

483
00:19:34,480 --> 00:19:36,880
and here is the global picture like one

484
00:19:36,880 --> 00:19:38,799
network can send this message towards

485
00:19:38,799 --> 00:19:40,400
the other network here we have

486
00:19:40,400 --> 00:19:44,480
our udm and by this message

487
00:19:44,480 --> 00:19:46,720
basically attacker can retrieve the

488
00:19:46,720 --> 00:19:47,840
subscriber

489
00:19:47,840 --> 00:19:50,880
route location like what is the current

490
00:19:50,880 --> 00:19:51,520
amf

491
00:19:51,520 --> 00:19:54,879
serving the subscriber

492
00:19:55,520 --> 00:19:58,160
this can be some precondition for later

493
00:19:58,160 --> 00:19:59,919
attacks so we will see it on the

494
00:19:59,919 --> 00:20:01,280
following slides

495
00:20:01,280 --> 00:20:02,880
here is the example of the free gpp

496
00:20:02,880 --> 00:20:05,760
registration get free gpp registration

497
00:20:05,760 --> 00:20:08,080
response so we can see

498
00:20:08,080 --> 00:20:12,080
that mcc mnc are provided

499
00:20:12,080 --> 00:20:15,360
then we see the mf instance id so

500
00:20:15,360 --> 00:20:18,320
all the information which can uh help us

501
00:20:18,320 --> 00:20:20,400
to identify really the exact

502
00:20:20,400 --> 00:20:23,120
amf which is serving the given

503
00:20:23,120 --> 00:20:25,760
subscriber

504
00:20:25,840 --> 00:20:29,039
now provide location info so

505
00:20:29,039 --> 00:20:32,840
here producer is the udm consumer is the

506
00:20:32,840 --> 00:20:34,960
amf and

507
00:20:34,960 --> 00:20:38,159
we have some free gpp description

508
00:20:38,159 --> 00:20:41,600
here the hp lmn

509
00:20:41,600 --> 00:20:43,919
communicates towards the vp lmn and this

510
00:20:43,919 --> 00:20:44,960
is basically normal

511
00:20:44,960 --> 00:20:48,320
service that the gmlc should be allowed

512
00:20:48,320 --> 00:20:49,440
to go locate the

513
00:20:49,440 --> 00:20:52,240
target subscriber the elegance scenario

514
00:20:52,240 --> 00:20:52,640
is

515
00:20:52,640 --> 00:20:56,480
if the different network then

516
00:20:56,480 --> 00:20:58,080
what is not the home network of the

517
00:20:58,080 --> 00:21:00,080
subscriber is trying to go locate

518
00:21:00,080 --> 00:21:02,880
the target here is also the example

519
00:21:02,880 --> 00:21:03,600
request

520
00:21:03,600 --> 00:21:06,559
so we can see that we just inject the

521
00:21:06,559 --> 00:21:07,200
post

522
00:21:07,200 --> 00:21:10,320
towards the target mc

523
00:21:10,320 --> 00:21:13,679
and requesting all information what we

524
00:21:13,679 --> 00:21:14,960
can get

525
00:21:14,960 --> 00:21:18,320
now here is the global picture again

526
00:21:18,320 --> 00:21:20,400
mno1 send this message to towards the

527
00:21:20,400 --> 00:21:22,640
mno2 towards the amf to retrieve the

528
00:21:22,640 --> 00:21:23,120
exact

529
00:21:23,120 --> 00:21:26,720
location and now

530
00:21:26,720 --> 00:21:29,280
how the response looks like so we can

531
00:21:29,280 --> 00:21:30,080
see

532
00:21:30,080 --> 00:21:32,400
it there is quite everything we can see

533
00:21:32,400 --> 00:21:33,360
there is mcc

534
00:21:33,360 --> 00:21:36,720
mnc and we have also cell id

535
00:21:36,720 --> 00:21:39,440
and the ue location timestamp so

536
00:21:39,440 --> 00:21:40,159
basically

537
00:21:40,159 --> 00:21:42,320
cell id can be later translated into

538
00:21:42,320 --> 00:21:44,240
exact go location like

539
00:21:44,240 --> 00:21:46,880
logan into latitude of the subscriber

540
00:21:46,880 --> 00:21:49,039
and we can really precisely track

541
00:21:49,039 --> 00:21:52,240
the subscriber why this is

542
00:21:52,240 --> 00:21:55,840
uh somehow risky mainly because what we

543
00:21:55,840 --> 00:21:58,960
see currently in ss7 or diameter

544
00:21:58,960 --> 00:22:01,280
in the existing networks there are

545
00:22:01,280 --> 00:22:02,240
really

546
00:22:02,240 --> 00:22:05,760
active surveillance by some

547
00:22:05,760 --> 00:22:08,880
surveillance companies or or state

548
00:22:08,880 --> 00:22:13,039
even agencies using this

549
00:22:13,039 --> 00:22:16,240
as a way to go locate the phones go

550
00:22:16,240 --> 00:22:18,960
locate the subscribers actively

551
00:22:18,960 --> 00:22:21,840
and this can be expected also to to

552
00:22:21,840 --> 00:22:26,559
happen in the 5g regarding

553
00:22:26,559 --> 00:22:28,559
implementation specific vulnerabilities

554
00:22:28,559 --> 00:22:29,840
so the above was

555
00:22:29,840 --> 00:22:32,960
mainly uh covering uh

556
00:22:32,960 --> 00:22:35,520
some generic cases according to

557
00:22:35,520 --> 00:22:37,360
specification if there is some lack

558
00:22:37,360 --> 00:22:40,640
of the filtering now of course depending

559
00:22:40,640 --> 00:22:43,039
on the implementation of the target 5g

560
00:22:43,039 --> 00:22:44,000
network

561
00:22:44,000 --> 00:22:46,159
there could be also uh specific

562
00:22:46,159 --> 00:22:47,760
vulnerabilities like parameter

563
00:22:47,760 --> 00:22:48,400
injections

564
00:22:48,400 --> 00:22:51,200
even sql sql injections json the

565
00:22:51,200 --> 00:22:54,559
serialization attacks buffer overflows

566
00:22:54,559 --> 00:22:57,440
or out issues lack of maybe granular

567
00:22:57,440 --> 00:23:00,080
access control access token abuses and

568
00:23:00,080 --> 00:23:02,080
even others vulnerabilities which can be

569
00:23:02,080 --> 00:23:04,320
really implementation or even deployment

570
00:23:04,320 --> 00:23:06,240
specific

571
00:23:06,240 --> 00:23:09,360
here is just a free 5g core example of

572
00:23:09,360 --> 00:23:11,840
some injection of the parameter

573
00:23:11,840 --> 00:23:13,679
by crafting or using the following

574
00:23:13,679 --> 00:23:15,600
requests so basically sending the

575
00:23:15,600 --> 00:23:19,360
http get towards the udm we can inject

576
00:23:19,360 --> 00:23:22,000
the parameter p element id

577
00:23:22,000 --> 00:23:25,039
and as you see it is not properly formed

578
00:23:25,039 --> 00:23:26,159
so it is not some

579
00:23:26,159 --> 00:23:29,919
ncc mnc there but really message name

580
00:23:29,919 --> 00:23:33,440
which is later on used by the udm towers

581
00:23:33,440 --> 00:23:35,360
the udr

582
00:23:35,360 --> 00:23:37,919
here is also trace what is here what can

583
00:23:37,919 --> 00:23:40,320
be seen

584
00:23:41,120 --> 00:23:45,039
so we can see that by sending this

585
00:23:45,039 --> 00:23:48,480
message with the injection

586
00:23:48,480 --> 00:23:51,760
after udm sent

587
00:23:51,760 --> 00:23:54,640
towards udr different message which was

588
00:23:54,640 --> 00:23:57,039
not expected like authentication data

589
00:23:57,039 --> 00:23:58,880
authentication subscription which is

590
00:23:58,880 --> 00:23:59,600
actually

591
00:23:59,600 --> 00:24:02,720
uh querying the aoc data and then the

592
00:24:02,720 --> 00:24:04,000
udr responds

593
00:24:04,000 --> 00:24:07,440
back with the aoc data uh

594
00:24:07,440 --> 00:24:12,080
fortunately uh towards our http client

595
00:24:12,080 --> 00:24:16,159
the response from udr was not for verbit

596
00:24:16,159 --> 00:24:18,240
why this is risky because normally the

597
00:24:18,240 --> 00:24:21,120
udr should be not directly accessible

598
00:24:21,120 --> 00:24:24,240
and should be accessible only internally

599
00:24:24,240 --> 00:24:28,320
within the plmn not from the roaming

600
00:24:28,320 --> 00:24:30,320
so this is kind of exposure and

601
00:24:30,320 --> 00:24:32,960
something new in 5g that now even the

602
00:24:32,960 --> 00:24:36,000
auc can be somehow reached through

603
00:24:36,000 --> 00:24:39,120
specified messages

604
00:24:40,000 --> 00:24:42,480
and here is the flow how it looks like

605
00:24:42,480 --> 00:24:44,720
so basically the http 2 client

606
00:24:44,720 --> 00:24:46,799
was sending the message with the

607
00:24:46,799 --> 00:24:48,240
injection

608
00:24:48,240 --> 00:24:51,360
towards the udn udm

609
00:24:51,360 --> 00:24:54,720
was not properly sanitizing the

610
00:24:54,720 --> 00:24:57,360
parameter and just forwarded it towards

611
00:24:57,360 --> 00:24:58,400
the udr

612
00:24:58,400 --> 00:25:00,559
this means that udr interpreted as a

613
00:25:00,559 --> 00:25:02,240
different message and send back the

614
00:25:02,240 --> 00:25:04,080
query authentication subscriber data

615
00:25:04,080 --> 00:25:04,799
response

616
00:25:04,799 --> 00:25:07,919
fortunately the udm did not forego

617
00:25:07,919 --> 00:25:11,200
the message to our client here i opened

618
00:25:11,200 --> 00:25:12,240
also

619
00:25:12,240 --> 00:25:15,520
github issue for this to basically fix

620
00:25:15,520 --> 00:25:17,120
this

621
00:25:17,120 --> 00:25:20,080
this is just a example of some

622
00:25:20,080 --> 00:25:22,000
vendor-specific vulnerabilities which

623
00:25:22,000 --> 00:25:23,360
can be really introduced by the

624
00:25:23,360 --> 00:25:24,559
implementation

625
00:25:24,559 --> 00:25:27,679
and it

626
00:25:27,679 --> 00:25:30,080
can be really uh dependent on the target

627
00:25:30,080 --> 00:25:32,400
technology

628
00:25:32,400 --> 00:25:34,240
here is also example of other risky

629
00:25:34,240 --> 00:25:35,440
messages so

630
00:25:35,440 --> 00:25:37,919
all these apis really it really depends

631
00:25:37,919 --> 00:25:40,080
what the target network will support

632
00:25:40,080 --> 00:25:43,600
if it will be uh like release 15

633
00:25:43,600 --> 00:25:46,559
compliant or release 16 or even

634
00:25:46,559 --> 00:25:50,559
even more and here is examples of some

635
00:25:50,559 --> 00:25:53,120
additional geolocation messages or even

636
00:25:53,120 --> 00:25:54,880
there could be done the impersonation

637
00:25:54,880 --> 00:25:55,760
like

638
00:25:55,760 --> 00:26:00,400
rogue we can register basically rogue

639
00:26:00,400 --> 00:26:02,000
amf towards the udm

640
00:26:02,000 --> 00:26:05,279
or rogue smf and

641
00:26:05,279 --> 00:26:08,840
later on this can be abused then

642
00:26:08,840 --> 00:26:12,000
also uh there would be sms messages so

643
00:26:12,000 --> 00:26:14,480
we can see maybe some sms spam

644
00:26:14,480 --> 00:26:16,400
or spoofing and there are plenty of

645
00:26:16,400 --> 00:26:18,159
other messages you can check the open

646
00:26:18,159 --> 00:26:18,720
api

647
00:26:18,720 --> 00:26:20,960
so there are really plenty of messages

648
00:26:20,960 --> 00:26:25,440
and uh quite significant attack surface

649
00:26:25,440 --> 00:26:27,600
and now regarding the conclusion so

650
00:26:27,600 --> 00:26:28,880
basically the

651
00:26:28,880 --> 00:26:31,520
in 5g the significant improvement is

652
00:26:31,520 --> 00:26:31,919
that

653
00:26:31,919 --> 00:26:33,520
the interconnects are really

654
00:26:33,520 --> 00:26:35,679
confidentially integrated

655
00:26:35,679 --> 00:26:38,240
authenticity has been introduced on

656
00:26:38,240 --> 00:26:39,520
interconnects

657
00:26:39,520 --> 00:26:42,960
their n32 and even n9 should be

658
00:26:42,960 --> 00:26:46,000
protected uh however regarding the

659
00:26:46,000 --> 00:26:47,840
signaling attacks there

660
00:26:47,840 --> 00:26:50,080
this still could be received inside the

661
00:26:50,080 --> 00:26:51,360
n42 tunnel

662
00:26:51,360 --> 00:26:53,840
and therefore we need some application

663
00:26:53,840 --> 00:26:55,360
filtering

664
00:26:55,360 --> 00:26:58,559
and in 5g still the security controls

665
00:26:58,559 --> 00:26:59,120
which

666
00:26:59,120 --> 00:27:01,919
would be needed are signaling fireball

667
00:27:01,919 --> 00:27:04,000
signaling intrusion detection systems

668
00:27:04,000 --> 00:27:07,039
basically this could be separate system

669
00:27:07,039 --> 00:27:08,880
which continuously audit

670
00:27:08,880 --> 00:27:12,240
if the firewall or other filtering is uh

671
00:27:12,240 --> 00:27:15,039
efficient and if it is working properly

672
00:27:15,039 --> 00:27:16,799
straight intelligence

673
00:27:16,799 --> 00:27:19,279
to see the really the global picture who

674
00:27:19,279 --> 00:27:21,600
are the

675
00:27:21,600 --> 00:27:25,200
sources of the illegal activity or what

676
00:27:25,200 --> 00:27:28,799
really attacks are being exploited

677
00:27:28,799 --> 00:27:32,240
in the wild and which are more

678
00:27:32,240 --> 00:27:34,320
maybe just theoretical one and which are

679
00:27:34,320 --> 00:27:35,520
really tried

680
00:27:35,520 --> 00:27:39,120
to to the networks and then some regular

681
00:27:39,120 --> 00:27:40,320
vulnerability scanning

682
00:27:40,320 --> 00:27:43,439
and security audits

683
00:27:44,799 --> 00:27:47,279
so thank you very much for listening to

684
00:27:47,279 --> 00:27:48,240
this talk

685
00:27:48,240 --> 00:27:51,360
feel free also to contact

686
00:27:51,360 --> 00:27:54,399
us or contact directly me and we can try

687
00:27:54,399 --> 00:27:56,240
to provide

688
00:27:56,240 --> 00:28:03,840
answers thank you very much

689
00:28:05,039 --> 00:28:07,120
you

