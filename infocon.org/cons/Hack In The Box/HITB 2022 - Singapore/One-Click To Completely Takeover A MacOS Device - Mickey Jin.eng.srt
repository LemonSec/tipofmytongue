1
00:00:06,620 --> 00:00:09,599
welcome to my presentation

2
00:00:09,599 --> 00:00:13,500
today I'm going to show an explosion on

3
00:00:13,500 --> 00:00:17,340
Apple Mac diverse just from one click to

4
00:00:17,340 --> 00:00:20,240
complete takeover

5
00:00:20,760 --> 00:00:21,840
first

6
00:00:21,840 --> 00:00:25,199
let me make a brief introduction

7
00:00:25,199 --> 00:00:27,180
I am Mickey G

8
00:00:27,180 --> 00:00:30,119
a security researcher from Trend Micro

9
00:00:30,119 --> 00:00:33,719
my main job is to analyze some mobile

10
00:00:33,719 --> 00:00:37,559
and hunt for zero day vulnerabilities

11
00:00:37,559 --> 00:00:40,260
now I had many effects on the security

12
00:00:40,260 --> 00:00:43,020
of Apple products

13
00:00:43,020 --> 00:00:45,239
over the past two years

14
00:00:45,239 --> 00:00:48,719
I have submitted over 100 reports to

15
00:00:48,719 --> 00:00:50,219
Apple

16
00:00:50,219 --> 00:00:54,000
and got more than CBE credits from them

17
00:00:54,000 --> 00:00:57,539
I usually enjoy reversing and debugging

18
00:00:57,539 --> 00:01:00,539
and this is my Twitter Handler

19
00:01:00,539 --> 00:01:02,039
h1t

20
00:01:02,039 --> 00:01:06,559
welcome to follow me on Twitter thanks

21
00:01:06,720 --> 00:01:10,380
okay here is my agenda

22
00:01:10,380 --> 00:01:11,580
first

23
00:01:11,580 --> 00:01:14,820
I will explain the motivation to take

24
00:01:14,820 --> 00:01:16,619
such an explosion

25
00:01:16,619 --> 00:01:19,860
then I will cover some related texts in

26
00:01:19,860 --> 00:01:21,360
the real world

27
00:01:21,360 --> 00:01:24,540
next I will talk about the challenges I

28
00:01:24,540 --> 00:01:28,080
encountered and how I overcame them

29
00:01:28,080 --> 00:01:30,600
then there are the details of the

30
00:01:30,600 --> 00:01:33,180
vulnerabilities I discovered for this

31
00:01:33,180 --> 00:01:35,220
expression

32
00:01:35,220 --> 00:01:37,740
I will provide an awesome demo by

33
00:01:37,740 --> 00:01:39,780
changing this box together

34
00:01:39,780 --> 00:01:42,619
before the end I will share another

35
00:01:42,619 --> 00:01:45,119
vulnerability which I discovered during

36
00:01:45,119 --> 00:01:46,500
the research

37
00:01:46,500 --> 00:01:49,020
finally I will make a summary and show

38
00:01:49,020 --> 00:01:51,899
the code Repository

39
00:01:51,899 --> 00:01:52,979
so

40
00:01:52,979 --> 00:01:57,380
why do I want to dig such an explosion

41
00:01:58,020 --> 00:02:00,360
the reason is simple

42
00:02:00,360 --> 00:02:03,119
apple offers General spark bounties for

43
00:02:03,119 --> 00:02:04,979
explosions

44
00:02:04,979 --> 00:02:07,799
here if my chance can be divided into

45
00:02:07,799 --> 00:02:09,479
two categories

46
00:02:09,479 --> 00:02:12,959
one click and zero click

47
00:02:12,959 --> 00:02:16,020
and the Apple has already give given the

48
00:02:16,020 --> 00:02:19,620
definitions one click refers to an

49
00:02:19,620 --> 00:02:20,640
exploit

50
00:02:20,640 --> 00:02:22,860
requiring user interaction to

51
00:02:22,860 --> 00:02:26,099
successfully gain access or execution

52
00:02:26,099 --> 00:02:28,560
for example the user collects a

53
00:02:28,560 --> 00:02:32,400
malicious link or opens a malicious file

54
00:02:32,400 --> 00:02:35,040
zero click prefers to exploit

55
00:02:35,040 --> 00:02:38,700
requiring no user interaction to do that

56
00:02:38,700 --> 00:02:41,940
for example being our Network or in

57
00:02:41,940 --> 00:02:44,760
proximity is sufficient

58
00:02:44,760 --> 00:02:47,580
sensitive sensitive data refers to some

59
00:02:47,580 --> 00:02:50,220
privacy items that should be protected

60
00:02:50,220 --> 00:02:51,599
by TCC

61
00:02:51,599 --> 00:02:57,360
such as contacts nodes photos and so on

62
00:02:57,360 --> 00:03:00,660
so you might be wondering is there any

63
00:03:00,660 --> 00:03:03,360
related attacks before

64
00:03:03,360 --> 00:03:06,300
next let's take a look at some place

65
00:03:06,300 --> 00:03:09,720
classic case about zero click and one

66
00:03:09,720 --> 00:03:12,300
click in the real world over the past

67
00:03:12,300 --> 00:03:14,900
two years

68
00:03:15,360 --> 00:03:18,659
here are two zero click attack cases

69
00:03:18,659 --> 00:03:21,180
the first one is about a message

70
00:03:21,180 --> 00:03:22,920
exploitation

71
00:03:22,920 --> 00:03:26,760
this is a classic research by Samuel

72
00:03:26,760 --> 00:03:29,819
grope from Google project zero

73
00:03:29,819 --> 00:03:31,980
the root cause is a memory corruption

74
00:03:31,980 --> 00:03:35,159
issue in the NSR cable API

75
00:03:35,159 --> 00:03:37,620
triggered by the deterioration of a

76
00:03:37,620 --> 00:03:39,420
message data

77
00:03:39,420 --> 00:03:41,879
after exploiting the bug for remote code

78
00:03:41,879 --> 00:03:44,280
execution he attacked the mountain box

79
00:03:44,280 --> 00:03:48,420
process to escape the sandbox by reusing

80
00:03:48,420 --> 00:03:50,040
the same bug

81
00:03:50,040 --> 00:03:53,519
finally he found the iPhone remotely by

82
00:03:53,519 --> 00:03:55,739
sending some crafty iMessage data

83
00:03:55,739 --> 00:03:59,760
without any user interaction

84
00:03:59,760 --> 00:04:02,280
the second case is the Pegasus firewall

85
00:04:02,280 --> 00:04:05,760
which is developed by an ISO group and

86
00:04:05,760 --> 00:04:08,220
disclosed by citizen app

87
00:04:08,220 --> 00:04:10,799
it is used at least two zero days in the

88
00:04:10,799 --> 00:04:11,819
attack

89
00:04:11,819 --> 00:04:15,350
the first one is cve 2021-30860

90
00:04:15,350 --> 00:04:17,040
[Applause]

91
00:04:17,040 --> 00:04:20,160
it is used for remote code execution

92
00:04:20,160 --> 00:04:23,340
it is a very common integer overflow

93
00:04:23,340 --> 00:04:25,259
vulnerability in the core Graphics

94
00:04:25,259 --> 00:04:26,520
framework

95
00:04:26,520 --> 00:04:30,120
triggered by passing jbq2 stream in PDF

96
00:04:30,120 --> 00:04:32,460
from a message attachment

97
00:04:32,460 --> 00:04:36,419
but if exploitation is really advanced

98
00:04:36,419 --> 00:04:40,860
in order to bypass AFL and Pac it builds

99
00:04:40,860 --> 00:04:43,740
a touring complete machine inside a PDF

100
00:04:43,740 --> 00:04:46,080
document file

101
00:04:46,080 --> 00:04:50,820
and the second zero day is CV 2021 31010

102
00:04:50,820 --> 00:04:53,820
which is used to attack the nonsense box

103
00:04:53,820 --> 00:04:55,560
xpc service

104
00:04:55,560 --> 00:04:58,020
to escape the sandbox

105
00:04:58,020 --> 00:04:59,160
finally

106
00:04:59,160 --> 00:05:01,500
the attacker can also take frog control

107
00:05:01,500 --> 00:05:04,139
of the Target's iPhone without any user

108
00:05:04,139 --> 00:05:06,500
interaction

109
00:05:06,780 --> 00:05:08,340
next

110
00:05:08,340 --> 00:05:11,699
here are two one click attack cases

111
00:05:11,699 --> 00:05:14,580
the first one is a watering hole

112
00:05:14,580 --> 00:05:17,100
Campaign which is discovered by Google

113
00:05:17,100 --> 00:05:18,840
tag

114
00:05:18,840 --> 00:05:22,800
it used and and day and a real day in if

115
00:05:22,800 --> 00:05:24,600
exploitation

116
00:05:24,600 --> 00:05:28,740
City 2021 1789 is the end date for

117
00:05:28,740 --> 00:05:30,660
remote code Fusion

118
00:05:30,660 --> 00:05:33,300
this is the jit compiler optimization

119
00:05:33,300 --> 00:05:35,820
issue in webkit

120
00:05:35,820 --> 00:05:38,820
triggered by opening a web page with a

121
00:05:38,820 --> 00:05:41,280
malicious JavaScript payload

122
00:05:41,280 --> 00:05:44,600
and then CBE 2021

123
00:05:44,600 --> 00:05:47,520
30689 is the zero day for local

124
00:05:47,520 --> 00:05:49,139
privilege escalation

125
00:05:49,139 --> 00:05:50,880
it is the port type confusion

126
00:05:50,880 --> 00:05:53,580
vulnerability in the xmu kernel

127
00:05:53,580 --> 00:05:56,160
triggered by the Xenu system called net

128
00:05:56,160 --> 00:05:57,240
message

129
00:05:57,240 --> 00:05:59,940
the second one clear case is about

130
00:05:59,940 --> 00:06:01,800
gatekeeper bypass

131
00:06:01,800 --> 00:06:04,860
the blog post titled audio maps are

132
00:06:04,860 --> 00:06:09,680
belong to us gives the details of CDE

133
00:06:09,740 --> 00:06:12,780
2021.00657 which is actively exploited

134
00:06:12,780 --> 00:06:15,660
by malware flare in the white

135
00:06:15,660 --> 00:06:18,240
in the bypassed Mac OS file content

136
00:06:18,240 --> 00:06:20,940
GateKeeper and the notarization

137
00:06:20,940 --> 00:06:22,199
requirements

138
00:06:22,199 --> 00:06:25,199
once the user opens a fake document it

139
00:06:25,199 --> 00:06:27,780
is pumped

140
00:06:27,780 --> 00:06:31,800
after studying the old classic cases now

141
00:06:31,800 --> 00:06:35,460
I want to dig a one-click exploration by

142
00:06:35,460 --> 00:06:37,698
myself

143
00:06:37,740 --> 00:06:41,039
here is my summary of the flowchart of

144
00:06:41,039 --> 00:06:43,500
the challenges that need to overcome

145
00:06:43,500 --> 00:06:46,440
first whether it is a zero click attack

146
00:06:46,440 --> 00:06:48,479
or one click attack

147
00:06:48,479 --> 00:06:51,419
the goal is to gain the ability to run

148
00:06:51,419 --> 00:06:53,759
arbitrary code remotely on the target

149
00:06:53,759 --> 00:06:55,319
machine

150
00:06:55,319 --> 00:06:58,020
of course the execution permission at

151
00:06:58,020 --> 00:07:00,780
this stage is often very low

152
00:07:00,780 --> 00:07:03,960
and the way we are likely be restricted

153
00:07:03,960 --> 00:07:05,880
in an application sandbox

154
00:07:05,880 --> 00:07:08,580
so next we usually need to find a

155
00:07:08,580 --> 00:07:11,039
vulnerability to escape the sandbox

156
00:07:11,039 --> 00:07:13,740
and again privilege escalation through

157
00:07:13,740 --> 00:07:16,139
another vulnerability

158
00:07:16,139 --> 00:07:19,340
to execute actually Kono code

159
00:07:19,340 --> 00:07:21,840
execution is the highest privilege of

160
00:07:21,840 --> 00:07:23,699
the operating system

161
00:07:23,699 --> 00:07:27,120
so if we can break the kernel then we

162
00:07:27,120 --> 00:07:29,880
are the king of the target machine

163
00:07:29,880 --> 00:07:32,400
in addition to this there are two

164
00:07:32,400 --> 00:07:36,060
Network specific vulnerabilities there

165
00:07:36,060 --> 00:07:39,240
are sip bypass and TCC bypass

166
00:07:39,240 --> 00:07:43,319
I will discuss them in detail later

167
00:07:43,319 --> 00:07:44,419
foreign

168
00:07:44,419 --> 00:07:47,819
so these are the vulnerabilities I

169
00:07:47,819 --> 00:07:50,280
discovered for the explosion

170
00:07:50,280 --> 00:07:53,660
first I exploited lcv 2022

171
00:07:53,660 --> 00:07:57,479
22616 to bypass the protection of macro

172
00:07:57,479 --> 00:08:00,300
Escape keeper to get the ability to

173
00:08:00,300 --> 00:08:02,460
execute code remotely

174
00:08:02,460 --> 00:08:05,099
then I will get get root privilege

175
00:08:05,099 --> 00:08:08,599
escalation by exploding CBE 2022

176
00:08:08,599 --> 00:08:10,500
639

177
00:08:10,500 --> 00:08:13,259
next I will bypass the system Integrity

178
00:08:13,259 --> 00:08:16,500
protection to modify some critic system

179
00:08:16,500 --> 00:08:21,040
files by exploding cve 2022

180
00:08:21,040 --> 00:08:22,580
[Music]

181
00:08:22,580 --> 00:08:25,680
2671-26712 finally I can get actually

182
00:08:25,680 --> 00:08:28,080
Chrono code execution with the Sip

183
00:08:28,080 --> 00:08:30,180
bypass primitive I got

184
00:08:30,180 --> 00:08:32,820
however the last one is related to

185
00:08:32,820 --> 00:08:35,399
another Untouchable day so I couldn't

186
00:08:35,399 --> 00:08:39,380
share the details here at this time

187
00:08:39,958 --> 00:08:42,299
so the first step is to get a remote

188
00:08:42,299 --> 00:08:43,320
share

189
00:08:43,320 --> 00:08:45,779
here I will exploit a gatekeeper bypass

190
00:08:45,779 --> 00:08:48,980
issue to achieve it

191
00:08:49,680 --> 00:08:52,080
okay let's take a look at the details

192
00:08:52,080 --> 00:08:54,779
about Mac OS GateKeeper

193
00:08:54,779 --> 00:08:57,779
it is designed to ensure that only

194
00:08:57,779 --> 00:09:01,080
trusted software runs on your Mac

195
00:09:01,080 --> 00:09:03,839
for apps from the App Store Apple

196
00:09:03,839 --> 00:09:06,680
reviews each app before it is accepted

197
00:09:06,680 --> 00:09:10,440
and signs it to ensure that it hasn't

198
00:09:10,440 --> 00:09:12,899
been temporary or altered

199
00:09:12,899 --> 00:09:15,600
four apps outside the App Store there

200
00:09:15,600 --> 00:09:17,640
are three three security features for

201
00:09:17,640 --> 00:09:19,019
the protection

202
00:09:19,019 --> 00:09:24,500
file content gatekeeper and notarization

203
00:09:24,959 --> 00:09:27,060
file contains is the security feature

204
00:09:27,060 --> 00:09:29,880
introduced in OS X Network

205
00:09:29,880 --> 00:09:32,760
when a user first opens the downloaded

206
00:09:32,760 --> 00:09:36,300
file such as an application file content

207
00:09:36,300 --> 00:09:39,060
will pop up a warning dialogue to the

208
00:09:39,060 --> 00:09:40,019
user

209
00:09:40,019 --> 00:09:42,360
that requires explicit confirmation

210
00:09:42,360 --> 00:09:45,360
before allowing the file to execute

211
00:09:45,360 --> 00:09:48,000
the idea is to ensure that the user

212
00:09:48,000 --> 00:09:50,580
understands that they are indeed opening

213
00:09:50,580 --> 00:09:51,720
an application

214
00:09:51,720 --> 00:09:55,080
even if it looks like a picture or a

215
00:09:55,080 --> 00:09:56,459
document

216
00:09:56,459 --> 00:09:59,040
it should be noted that even if the

217
00:09:59,040 --> 00:10:02,220
application is signed and notarized the

218
00:10:02,220 --> 00:10:05,519
file content prompt will still appear

219
00:10:05,519 --> 00:10:08,820
unfortunately naive users keep infecting

220
00:10:08,820 --> 00:10:09,899
themselves

221
00:10:09,899 --> 00:10:12,420
they often ignore the fire content

222
00:10:12,420 --> 00:10:14,899
alerts

223
00:10:15,540 --> 00:10:17,940
then Apple introduced another security

224
00:10:17,940 --> 00:10:22,440
feature gatekeeper in OS X Lion

225
00:10:22,440 --> 00:10:25,740
it is built based on file content

226
00:10:25,740 --> 00:10:27,540
it checks the code signing information

227
00:10:27,540 --> 00:10:31,140
of downloaded items and blocks those

228
00:10:31,140 --> 00:10:33,300
without a developer ID

229
00:10:33,300 --> 00:10:35,220
if the prompt

230
00:10:35,220 --> 00:10:38,459
if if the downloaded application is not

231
00:10:38,459 --> 00:10:41,100
designed sign it will prompt a lot

232
00:10:41,100 --> 00:10:43,080
Direction like this

233
00:10:43,080 --> 00:10:46,560
however mobile could still be resigned

234
00:10:46,560 --> 00:10:50,300
with the value that developer ID

235
00:10:50,640 --> 00:10:52,620
to compare this

236
00:10:52,620 --> 00:10:55,500
Apple requires the legal software

237
00:10:55,500 --> 00:10:59,820
to be notarized since Nicholas Catalina

238
00:10:59,820 --> 00:11:02,279
macquest developers have to submit their

239
00:11:02,279 --> 00:11:05,880
application to Apple for notarization

240
00:11:05,880 --> 00:11:08,820
then Apple will scan the application to

241
00:11:08,820 --> 00:11:11,459
make sure it is not a malware

242
00:11:11,459 --> 00:11:14,399
once approved the application will be

243
00:11:14,399 --> 00:11:16,740
awarded with the ticket

244
00:11:16,740 --> 00:11:19,500
the tickets towards Miracles caregiver

245
00:11:19,500 --> 00:11:22,380
that the app is not right by Apple

246
00:11:22,380 --> 00:11:24,779
and could be trusted

247
00:11:24,779 --> 00:11:28,440
finally users can be confident about the

248
00:11:28,440 --> 00:11:31,260
software they run doesn't contain no

249
00:11:31,260 --> 00:11:33,060
mobile

250
00:11:33,060 --> 00:11:37,320
if the software is not notarized then it

251
00:11:37,320 --> 00:11:39,660
will be blocked and the system will

252
00:11:39,660 --> 00:11:43,640
prompt the alert dialog like this

253
00:11:45,420 --> 00:11:49,320
you might be wondering how does Mac OS

254
00:11:49,320 --> 00:11:52,079
know to analyze the file in order to

255
00:11:52,079 --> 00:11:54,420
possibly display a file content get

256
00:11:54,420 --> 00:11:57,420
people or notarized prompt

257
00:11:57,420 --> 00:12:00,120
the answer is the special file extended

258
00:12:00,120 --> 00:12:01,339
attribute

259
00:12:01,339 --> 00:12:05,220
com.apple dot quarantine

260
00:12:05,220 --> 00:12:06,899
all the files downloaded from the

261
00:12:06,899 --> 00:12:07,800
internet

262
00:12:07,800 --> 00:12:10,380
will be attached with the special

263
00:12:10,380 --> 00:12:12,360
quarantine attribute

264
00:12:12,360 --> 00:12:15,779
also if the downloaded file is active

265
00:12:15,779 --> 00:12:18,839
then all the files inside should also be

266
00:12:18,839 --> 00:12:19,980
contained

267
00:12:19,980 --> 00:12:23,339
note that only the applications with the

268
00:12:23,339 --> 00:12:25,680
quarantine attribute will be scanned by

269
00:12:25,680 --> 00:12:27,300
GateKeeper

270
00:12:27,300 --> 00:12:30,300
if a file doesn't have the continue to

271
00:12:30,300 --> 00:12:33,180
build Mac OS will assume it as a local

272
00:12:33,180 --> 00:12:36,060
file then none of the checks will be

273
00:12:36,060 --> 00:12:39,300
performed and thus no problems will be

274
00:12:39,300 --> 00:12:40,920
displayed

275
00:12:40,920 --> 00:12:45,000
we can use the system command a HTTR

276
00:12:45,000 --> 00:12:47,579
to access the extended attribute of a

277
00:12:47,579 --> 00:12:50,220
file here we can see that

278
00:12:50,220 --> 00:12:52,620
in addition to the quarantine attribute

279
00:12:52,620 --> 00:12:55,440
there is another attribute that because

280
00:12:55,440 --> 00:12:59,779
the UI information you downloaded

281
00:13:01,019 --> 00:13:03,779
Network system browser Safari has the

282
00:13:03,779 --> 00:13:06,360
default feature to open State files

283
00:13:06,360 --> 00:13:08,459
automatically after downloading

284
00:13:08,459 --> 00:13:10,760
the save files include pictures

285
00:13:10,760 --> 00:13:14,700
documents archives and so on

286
00:13:14,700 --> 00:13:17,339
in my opinion this is a dangerous

287
00:13:17,339 --> 00:13:20,279
feature for two reasons

288
00:13:20,279 --> 00:13:21,720
first

289
00:13:21,720 --> 00:13:24,899
open files automatically makes remote

290
00:13:24,899 --> 00:13:28,980
attack easier because save files are not

291
00:13:28,980 --> 00:13:30,480
really safe

292
00:13:30,480 --> 00:13:32,639
a large number of file format passing

293
00:13:32,639 --> 00:13:35,100
vulnerabilities have been disclosed in

294
00:13:35,100 --> 00:13:35,940
history

295
00:13:35,940 --> 00:13:38,760
and second it is especially dangerous

296
00:13:38,760 --> 00:13:41,820
for acute application bundles

297
00:13:41,820 --> 00:13:44,579
because system launch service will

298
00:13:44,579 --> 00:13:47,760
automatically register the URL scheme in

299
00:13:47,760 --> 00:13:49,920
the info playlist file

300
00:13:49,920 --> 00:13:52,800
hello attacker could then access the URL

301
00:13:52,800 --> 00:13:55,320
scheme to prompt the user to open the

302
00:13:55,320 --> 00:13:57,660
downloaded application remotely

303
00:13:57,660 --> 00:14:00,540
therefore it is recommended to disable

304
00:14:00,540 --> 00:14:03,180
the feature in Safari preference when

305
00:14:03,180 --> 00:14:06,260
you go to a new map device

306
00:14:07,560 --> 00:14:09,139
CBE

307
00:14:09,139 --> 00:14:11,639
2021-22616 is the gatekeeper bypass

308
00:14:11,639 --> 00:14:14,160
vulnerability I discovered

309
00:14:14,160 --> 00:14:16,740
the POC here is simple

310
00:14:16,740 --> 00:14:20,459
I just created an application that pops

311
00:14:20,459 --> 00:14:23,880
up a calculator by using a batch script

312
00:14:23,880 --> 00:14:28,440
and then compressed it into a gzip file

313
00:14:28,440 --> 00:14:30,420
after the GC file is downloaded by

314
00:14:30,420 --> 00:14:33,660
Safari it will be authened

315
00:14:33,660 --> 00:14:35,940
it will be automatically decompressed

316
00:14:35,940 --> 00:14:37,980
due to the dangerous feature we talked

317
00:14:37,980 --> 00:14:40,279
before

318
00:14:40,500 --> 00:14:42,300
and then the Arcade files will be

319
00:14:42,300 --> 00:14:44,880
changed after the compression

320
00:14:44,880 --> 00:14:47,160
we can check the

321
00:14:47,160 --> 00:14:50,100
attribute to quarantine attributes using

322
00:14:50,100 --> 00:14:53,300
the system command

323
00:14:53,639 --> 00:14:56,279
here we can see that the gcp file itself

324
00:14:56,279 --> 00:14:59,699
is contained and the extended attribute

325
00:14:59,699 --> 00:15:01,980
indicates that it is downloaded by

326
00:15:01,980 --> 00:15:03,420
Safari

327
00:15:03,420 --> 00:15:06,600
however the inner zip file is not

328
00:15:06,600 --> 00:15:08,459
quarantined

329
00:15:08,459 --> 00:15:10,920
and that's my POC application is not

330
00:15:10,920 --> 00:15:12,660
continue to

331
00:15:12,660 --> 00:15:16,079
therefore my POC application can bypass

332
00:15:16,079 --> 00:15:18,720
all the checks from file contain get

333
00:15:18,720 --> 00:15:21,120
keeper and notarization

334
00:15:21,120 --> 00:15:25,940
it could be launched without any prompts

335
00:15:26,399 --> 00:15:29,120
the root cause exists in the xpc service

336
00:15:29,120 --> 00:15:31,320
sandbox broker

337
00:15:31,320 --> 00:15:34,440
it is responsible for decompressing our

338
00:15:34,440 --> 00:15:36,720
kids automatically

339
00:15:36,720 --> 00:15:39,540
as you can see from the unactive method

340
00:15:39,540 --> 00:15:40,440
here

341
00:15:40,440 --> 00:15:45,060
it writes the decompressed data directly

342
00:15:45,060 --> 00:15:48,120
however it forgets to apply the content

343
00:15:48,120 --> 00:15:50,540
attribute

344
00:15:52,680 --> 00:15:55,800
now the patch for the issue is also

345
00:15:55,800 --> 00:15:57,000
simple

346
00:15:57,000 --> 00:15:59,519
it just duplicates the current thing

347
00:15:59,519 --> 00:16:02,060
attribute

348
00:16:02,540 --> 00:16:06,000
okay now we can run arbitrary command

349
00:16:06,000 --> 00:16:08,040
remotely on the target machine

350
00:16:08,040 --> 00:16:10,199
luckily we don't have sandbox

351
00:16:10,199 --> 00:16:12,600
restrictions but we need more

352
00:16:12,600 --> 00:16:13,980
permissions

353
00:16:13,980 --> 00:16:19,639
so next we will escalate our privileges

354
00:16:19,800 --> 00:16:22,320
there are some no ways to escalate

355
00:16:22,320 --> 00:16:23,519
privileges

356
00:16:23,519 --> 00:16:26,339
the first is to attack the system Corner

357
00:16:26,339 --> 00:16:28,199
directly

358
00:16:28,199 --> 00:16:30,779
we can hunt for some memory corruption

359
00:16:30,779 --> 00:16:33,600
issues from the Xenu kernel and the

360
00:16:33,600 --> 00:16:35,880
connect extensions surviving

361
00:16:35,880 --> 00:16:38,940
but since some new medications were

362
00:16:38,940 --> 00:16:42,899
introduced is getting harder to exploit

363
00:16:42,899 --> 00:16:45,540
the second is to abuse the features on

364
00:16:45,540 --> 00:16:48,660
some root processes such as spelling

365
00:16:48,660 --> 00:16:50,100
child process

366
00:16:50,100 --> 00:16:53,100
reading or writing some special files

367
00:16:53,100 --> 00:16:54,839
and so on

368
00:16:54,839 --> 00:16:57,600
the third is to attack some root demand

369
00:16:57,600 --> 00:17:00,240
service via IPC

370
00:17:00,240 --> 00:17:02,160
and there are many other ways for

371
00:17:02,160 --> 00:17:04,919
example Dynamic Library hijacking

372
00:17:04,919 --> 00:17:08,640
abusing the suyd binaries and so on

373
00:17:08,640 --> 00:17:11,760
here I will try to attack a root demand

374
00:17:11,760 --> 00:17:14,699
service because it is a common way and

375
00:17:14,699 --> 00:17:17,459
easy to exploit

376
00:17:17,459 --> 00:17:20,220
I found an attractive package demand

377
00:17:20,220 --> 00:17:24,179
service named Su her body

378
00:17:24,179 --> 00:17:28,020
it is a helpful process for software

379
00:17:28,020 --> 00:17:29,160
update

380
00:17:29,160 --> 00:17:32,640
it has many attractive advantages

381
00:17:32,640 --> 00:17:33,840
first

382
00:17:33,840 --> 00:17:36,179
it is not sandboxed

383
00:17:36,179 --> 00:17:38,820
this means we don't have to take the

384
00:17:38,820 --> 00:17:41,100
sandbox restrictions into consideration

385
00:17:41,100 --> 00:17:44,880
after we compromise this demand service

386
00:17:44,880 --> 00:17:46,020
second

387
00:17:46,020 --> 00:17:48,660
it is rounding at the root

388
00:17:48,660 --> 00:17:51,240
it means that we can get the root

389
00:17:51,240 --> 00:17:53,940
privilege as expected once it is

390
00:17:53,940 --> 00:17:55,740
compromised

391
00:17:55,740 --> 00:17:59,840
third it has the special entitlement

392
00:17:59,840 --> 00:18:02,580
com.apple.rooter installed in store

393
00:18:02,580 --> 00:18:05,340
which grants the process special

394
00:18:05,340 --> 00:18:10,320
permission to bypass SRP restriction

395
00:18:10,320 --> 00:18:11,580
additionally

396
00:18:11,580 --> 00:18:15,240
it explodes some IPC service routines to

397
00:18:15,240 --> 00:18:17,580
unprivileged clients

398
00:18:17,580 --> 00:18:20,880
last but not the least some other

399
00:18:20,880 --> 00:18:23,880
vulnerabilities have been reported in

400
00:18:23,880 --> 00:18:27,140
this demon service before

401
00:18:27,660 --> 00:18:30,960
the main logic of the DMM process is

402
00:18:30,960 --> 00:18:34,679
implemented in the class as you helper

403
00:18:34,679 --> 00:18:39,620
either register an IPC server named

404
00:18:39,620 --> 00:18:42,900
com.apple.subd while the API bootstrap

405
00:18:42,900 --> 00:18:44,820
checking

406
00:18:44,820 --> 00:18:47,580
the IPC client has already been

407
00:18:47,580 --> 00:18:50,340
implemented in the private software

408
00:18:50,340 --> 00:18:52,860
update framework

409
00:18:52,860 --> 00:18:55,039
the class as you have a proxy

410
00:18:55,039 --> 00:18:57,299
encapsulates all the client-side

411
00:18:57,299 --> 00:19:00,120
interface to communicate with the IPC

412
00:19:00,120 --> 00:19:01,140
server

413
00:19:01,140 --> 00:19:04,980
if you use API bootstrap lookup 2 to

414
00:19:04,980 --> 00:19:07,200
open the IPC Connection by the service

415
00:19:07,200 --> 00:19:09,559
name

416
00:19:09,660 --> 00:19:11,640
there are 45

417
00:19:11,640 --> 00:19:14,100
service routines implemented on the

418
00:19:14,100 --> 00:19:15,660
server side

419
00:19:15,660 --> 00:19:18,120
and it has the corresponding delegate

420
00:19:18,120 --> 00:19:21,120
method from the client side

421
00:19:21,120 --> 00:19:23,940
we can review them one by one

422
00:19:23,940 --> 00:19:26,700
24 for possible

423
00:19:26,700 --> 00:19:28,380
memorabilities

424
00:19:28,380 --> 00:19:31,500
however not all of them are available to

425
00:19:31,500 --> 00:19:34,919
unprivileged clients because the server

426
00:19:34,919 --> 00:19:37,980
has a right authorization mechanism to

427
00:19:37,980 --> 00:19:40,679
verify whether the service request is

428
00:19:40,679 --> 00:19:45,240
from an from the legitimate client

429
00:19:45,240 --> 00:19:47,940
next let's see how the authorization

430
00:19:47,940 --> 00:19:50,880
mechanism works

431
00:19:50,880 --> 00:19:53,220
before the client requests the IPC

432
00:19:53,220 --> 00:19:56,220
service routine it needs to generate an

433
00:19:56,220 --> 00:19:59,220
authorization object through API

434
00:19:59,220 --> 00:20:01,980
authorization create

435
00:20:01,980 --> 00:20:06,299
and then make it as an external form to

436
00:20:06,299 --> 00:20:08,820
transform the operation object to the

437
00:20:08,820 --> 00:20:12,139
server for verification

438
00:20:12,360 --> 00:20:15,059
next when the server receives the

439
00:20:15,059 --> 00:20:17,520
authorization object it determines

440
00:20:17,520 --> 00:20:21,000
whether the specific rise can be granted

441
00:20:21,000 --> 00:20:23,240
to the client by checking the

442
00:20:23,240 --> 00:20:26,460
authorization object and the uid of the

443
00:20:26,460 --> 00:20:28,700
client

444
00:20:28,980 --> 00:20:31,260
the following is an example of a service

445
00:20:31,260 --> 00:20:34,320
routine handling flow first when the

446
00:20:34,320 --> 00:20:37,080
client requests a service routine it

447
00:20:37,080 --> 00:20:40,380
costs a specific method of the Su helper

448
00:20:40,380 --> 00:20:41,520
proxy class

449
00:20:41,520 --> 00:20:44,340
and then serialize the request into a

450
00:20:44,340 --> 00:20:46,980
mac message buffer which is then sent to

451
00:20:46,980 --> 00:20:50,400
the server side by the system kernel

452
00:20:50,400 --> 00:20:54,200
when the server receives an IPC request

453
00:20:54,200 --> 00:20:56,820
it will check whether the specific

454
00:20:56,820 --> 00:21:00,059
rights will previously granted to the

455
00:21:00,059 --> 00:21:01,620
client yeah

456
00:21:01,620 --> 00:21:03,539
it will call the real service routine

457
00:21:03,539 --> 00:21:05,220
through the class as you helper

458
00:21:05,220 --> 00:21:10,400
otherwise it will reject the IPC request

459
00:21:11,460 --> 00:21:14,820
the issue exists in the special IPC

460
00:21:14,820 --> 00:21:17,220
interface named the prepare install

461
00:21:17,220 --> 00:21:19,140
assistance with pass

462
00:21:19,140 --> 00:21:21,780
it costs the rear service routine

463
00:21:21,780 --> 00:21:24,419
directly without validating the client's

464
00:21:24,419 --> 00:21:26,100
rights

465
00:21:26,100 --> 00:21:28,080
after diving into the internal

466
00:21:28,080 --> 00:21:30,720
implementation of the service routine I

467
00:21:30,720 --> 00:21:34,080
found that it will try to load a bundle

468
00:21:34,080 --> 00:21:37,860
named OS installer setup framework

469
00:21:37,860 --> 00:21:40,440
however the boundary path could be

470
00:21:40,440 --> 00:21:44,179
controlled from the IPC client

471
00:21:44,659 --> 00:21:48,780
so my first attempt was to load a

472
00:21:48,780 --> 00:21:50,400
malicious founder into the demand

473
00:21:50,400 --> 00:21:51,299
process

474
00:21:51,299 --> 00:21:54,900
in order to in order to to share its

475
00:21:54,900 --> 00:21:58,140
good privilege and the special ruthless

476
00:21:58,140 --> 00:21:59,760
entitlement

477
00:21:59,760 --> 00:22:02,460
but I found that having the wrong time

478
00:22:02,460 --> 00:22:04,980
is enabled by default for system

479
00:22:04,980 --> 00:22:06,659
processes

480
00:22:06,659 --> 00:22:10,080
and only episode Dynamic libraries are

481
00:22:10,080 --> 00:22:12,059
alluded to load

482
00:22:12,059 --> 00:22:14,880
however if we can find an older version

483
00:22:14,880 --> 00:22:17,400
vulnerable and apple science Dynamic

484
00:22:17,400 --> 00:22:19,500
Library we can get it loaded for

485
00:22:19,500 --> 00:22:22,039
exploitation

486
00:22:22,740 --> 00:22:25,919
my second attempt was to let it load the

487
00:22:25,919 --> 00:22:28,919
original framework as expected

488
00:22:28,919 --> 00:22:31,500
then I found the method

489
00:22:31,500 --> 00:22:33,539
startup server will be called

490
00:22:33,539 --> 00:22:36,299
immediately once it is loaded

491
00:22:36,299 --> 00:22:38,039
in this method

492
00:22:38,039 --> 00:22:41,520
since suvd is running as root we will

493
00:22:41,520 --> 00:22:44,780
enter the Earth branch

494
00:22:45,179 --> 00:22:47,940
then it will submit a job in the domain

495
00:22:47,940 --> 00:22:50,340
of system launch d

496
00:22:50,340 --> 00:22:52,620
so the job to be launched we are wrong

497
00:22:52,620 --> 00:22:55,679
we are also wrong as a root user

498
00:22:55,679 --> 00:22:58,440
through debugging I found the job path

499
00:22:58,440 --> 00:23:01,980
is an accurable named OS installer setup

500
00:23:01,980 --> 00:23:03,120
d

501
00:23:03,120 --> 00:23:05,760
it is inside the directory controlled

502
00:23:05,760 --> 00:23:07,980
from the IBC client

503
00:23:07,980 --> 00:23:10,559
so we can directly write arbitrary

504
00:23:10,559 --> 00:23:12,960
payload in the job path to enjoy the

505
00:23:12,960 --> 00:23:15,620
root privilege

506
00:23:16,940 --> 00:23:21,539
I put the PLC and demo

507
00:23:21,539 --> 00:23:24,379
for your reference

508
00:23:24,659 --> 00:23:27,299
now Apple addressed the issue by

509
00:23:27,299 --> 00:23:30,000
validating the client's right before

510
00:23:30,000 --> 00:23:31,380
calling the

511
00:23:31,380 --> 00:23:34,820
special service routine

512
00:23:35,580 --> 00:23:39,240
next step is to bypass the system

513
00:23:39,240 --> 00:23:42,179
Integrity protection

514
00:23:42,179 --> 00:23:44,640
system Integrity protection is a

515
00:23:44,640 --> 00:23:48,360
security feature introduced in OS X EI

516
00:23:48,360 --> 00:23:49,620
capture

517
00:23:49,620 --> 00:23:52,440
it is also known as ruthless

518
00:23:52,440 --> 00:23:55,200
this means that even if you have root

519
00:23:55,200 --> 00:23:56,280
privilege

520
00:23:56,280 --> 00:23:58,200
it is not enough to make some

521
00:23:58,200 --> 00:23:59,820
modifications

522
00:23:59,820 --> 00:24:02,100
it protects the entire system from

523
00:24:02,100 --> 00:24:05,640
temporary from multiple perspectives

524
00:24:05,640 --> 00:24:08,640
first if it denies your debugger from

525
00:24:08,640 --> 00:24:11,880
attaching to Epsilon process

526
00:24:11,880 --> 00:24:14,820
second it prevents you from modifying

527
00:24:14,820 --> 00:24:17,220
creative system files

528
00:24:17,220 --> 00:24:20,460
next it prevents you from loading online

529
00:24:20,460 --> 00:24:22,320
extension

530
00:24:22,320 --> 00:24:25,679
and it will also restrict some retrace

531
00:24:25,679 --> 00:24:27,659
actions

532
00:24:27,659 --> 00:24:30,000
it is enabled by default

533
00:24:30,000 --> 00:24:33,179
and it can only be disabled in recovery

534
00:24:33,179 --> 00:24:34,679
mode

535
00:24:34,679 --> 00:24:38,900
which means a reboot is required

536
00:24:40,260 --> 00:24:43,380
file system protection can be sort of as

537
00:24:43,380 --> 00:24:46,080
a special sandbox applied to the entire

538
00:24:46,080 --> 00:24:47,100
system

539
00:24:47,100 --> 00:24:49,440
the configuration can be found from the

540
00:24:49,440 --> 00:24:54,020
file named brutally storage config

541
00:24:54,360 --> 00:24:57,120
take the location slash Library slash

542
00:24:57,120 --> 00:24:59,220
apple as an example

543
00:24:59,220 --> 00:25:01,740
from the output of the system command

544
00:25:01,740 --> 00:25:06,360
EOS we can see that it is restricted

545
00:25:06,360 --> 00:25:10,520
and it has a special extended attribute

546
00:25:10,520 --> 00:25:12,480
chrome.apple.rooter list

547
00:25:12,480 --> 00:25:15,659
and if we try to touch a file inside

548
00:25:15,659 --> 00:25:19,440
this location it will return the error

549
00:25:19,440 --> 00:25:22,740
operation not permitted even if I

550
00:25:22,740 --> 00:25:26,960
execute the command with root privilege

551
00:25:28,500 --> 00:25:31,140
you might be wondering how does the

552
00:25:31,140 --> 00:25:36,000
operating system update the system files

553
00:25:36,000 --> 00:25:37,799
the answer is within the special

554
00:25:37,799 --> 00:25:39,720
entitlements

555
00:25:39,720 --> 00:25:41,940
entitlements are embedded in the code

556
00:25:41,940 --> 00:25:44,580
scan nature of the actual rule when

557
00:25:44,580 --> 00:25:46,440
cosine

558
00:25:46,440 --> 00:25:49,500
it is used to Grant special permission

559
00:25:49,500 --> 00:25:51,360
to the actionable

560
00:25:51,360 --> 00:25:53,880
we can use the system command code PSI

561
00:25:53,880 --> 00:25:58,080
to check the entitlements like this

562
00:25:58,080 --> 00:26:00,480
some special entitlements can only be

563
00:26:00,480 --> 00:26:02,220
used by Apple

564
00:26:02,220 --> 00:26:05,120
here the entitlement

565
00:26:05,120 --> 00:26:07,799
com.apple.realist.install is only signed

566
00:26:07,799 --> 00:26:11,779
with a few system commands

567
00:26:11,880 --> 00:26:14,580
this entitlement grants the permissions

568
00:26:14,580 --> 00:26:17,100
to modify system files for special

569
00:26:17,100 --> 00:26:20,520
purpose such as updating the operating

570
00:26:20,520 --> 00:26:22,320
system

571
00:26:22,320 --> 00:26:25,860
the next entitlement is more powerful it

572
00:26:25,860 --> 00:26:27,960
not only has the permission except

573
00:26:27,960 --> 00:26:28,799
before

574
00:26:28,799 --> 00:26:32,460
but can also be inherited by all of its

575
00:26:32,460 --> 00:26:35,240
child processes

576
00:26:36,539 --> 00:26:40,020
so I wrote a script to scan all the

577
00:26:40,020 --> 00:26:41,940
applicables with the special

578
00:26:41,940 --> 00:26:44,700
entitlements from the entire operating

579
00:26:44,700 --> 00:26:45,600
system

580
00:26:45,600 --> 00:26:48,419
and from the following list as my

581
00:26:48,419 --> 00:26:51,539
candidates for sip bypass

582
00:26:51,539 --> 00:26:55,140
finally I choose the xpc service system

583
00:26:55,140 --> 00:26:59,220
sharp Service as my target

584
00:26:59,220 --> 00:27:02,400
in normal scenario and xpc service

585
00:27:02,400 --> 00:27:05,100
should check the signature and the

586
00:27:05,100 --> 00:27:07,620
entitlements of the incoming client

587
00:27:07,620 --> 00:27:10,980
in the delegate method named should

588
00:27:10,980 --> 00:27:13,200
accept new connection

589
00:27:13,200 --> 00:27:15,960
if the incoming client doesn't miss

590
00:27:15,960 --> 00:27:19,320
certain requirements then the FC service

591
00:27:19,320 --> 00:27:22,200
should reject the client's Connection by

592
00:27:22,200 --> 00:27:25,039
returning node

593
00:27:25,740 --> 00:27:29,580
however in the system shop service I

594
00:27:29,580 --> 00:27:32,220
found that it has no validation of

595
00:27:32,220 --> 00:27:35,220
incoming clients in its delegate method

596
00:27:35,220 --> 00:27:38,820
and is always written yes

597
00:27:38,820 --> 00:27:42,299
this means that any process can make xpc

598
00:27:42,299 --> 00:27:46,158
requests to the service

599
00:27:47,100 --> 00:27:50,159
it accepts connection from clients by

600
00:27:50,159 --> 00:27:53,580
using SV sharp service protocol

601
00:27:53,580 --> 00:27:57,120
the protocol has only one method named

602
00:27:57,120 --> 00:27:58,799
shavu is option

603
00:27:58,799 --> 00:28:02,100
so we can make a malicious xpc request

604
00:28:02,100 --> 00:28:06,539
to the service and ask it to help shaft

605
00:28:06,539 --> 00:28:08,940
from Shopify from one place to another

606
00:28:08,940 --> 00:28:11,360
place

607
00:28:11,700 --> 00:28:15,000
in fact there was already an xpc client

608
00:28:15,000 --> 00:28:17,039
in the system

609
00:28:17,039 --> 00:28:20,039
the sharp command within the packaged

610
00:28:20,039 --> 00:28:23,880
package kit framework has an uppercase X

611
00:28:23,880 --> 00:28:27,000
option to connect to the privileged

612
00:28:27,000 --> 00:28:30,320
system shop xpc service

613
00:28:31,980 --> 00:28:35,100
so the POC is very simple

614
00:28:35,100 --> 00:28:38,700
and requires only one line

615
00:28:38,700 --> 00:28:41,640
invoke the sharp command with the

616
00:28:41,640 --> 00:28:43,620
uppercase X option

617
00:28:43,620 --> 00:28:46,860
to read and write the Sip protected

618
00:28:46,860 --> 00:28:49,760
files directly

619
00:28:52,740 --> 00:28:56,039
Apple addressed the issue in two steps

620
00:28:56,039 --> 00:28:57,240
first

621
00:28:57,240 --> 00:29:00,059
remove the shaft service framework

622
00:29:00,059 --> 00:29:03,000
and of course along with the vulnerable

623
00:29:03,000 --> 00:29:04,919
xpc service

624
00:29:04,919 --> 00:29:07,200
for the system command shaft

625
00:29:07,200 --> 00:29:11,659
remove the options for xpc

626
00:29:12,419 --> 00:29:14,700
the patch seems perfect

627
00:29:14,700 --> 00:29:18,179
but is it enough

628
00:29:18,179 --> 00:29:21,240
the old mannerable xpc service is still

629
00:29:21,240 --> 00:29:23,039
signed with the special utilities

630
00:29:23,039 --> 00:29:24,299
entitlement

631
00:29:24,299 --> 00:29:28,140
so can I launch the old vulnerable xpc

632
00:29:28,140 --> 00:29:30,720
service from the new OS

633
00:29:30,720 --> 00:29:35,539
if yes it will be a bypass again

634
00:29:35,880 --> 00:29:39,539
to Peru my concept I developed a new

635
00:29:39,539 --> 00:29:42,179
application from the xcode template with

636
00:29:42,179 --> 00:29:43,919
an activity service inside the

637
00:29:43,919 --> 00:29:46,559
application bundle then open the build

638
00:29:46,559 --> 00:29:49,080
application from the directory replace

639
00:29:49,080 --> 00:29:52,320
the build xpc service Bounder with the

640
00:29:52,320 --> 00:29:55,140
other vulnerable one finally the

641
00:29:55,140 --> 00:29:57,659
application can launch the order

642
00:29:57,659 --> 00:30:01,380
xpc service and send malicious xpc

643
00:30:01,380 --> 00:30:05,880
requests to the twitch to bypass FIP

644
00:30:05,880 --> 00:30:08,159
after I submitted this report to Apple

645
00:30:08,159 --> 00:30:12,740
Apple adjusted it again and assigned cve

646
00:30:12,740 --> 00:30:16,740
2022 32826

647
00:30:18,360 --> 00:30:21,480
now there is no xpc client from the

648
00:30:21,480 --> 00:30:22,919
system

649
00:30:22,919 --> 00:30:26,520
so I have to implement the xpc client by

650
00:30:26,520 --> 00:30:29,700
myself here is the code

651
00:30:29,700 --> 00:30:33,000
first create an xpc connection using the

652
00:30:33,000 --> 00:30:34,860
xpc service name

653
00:30:34,860 --> 00:30:37,860
then set the remote protocol

654
00:30:37,860 --> 00:30:40,620
and finally called the special xpc

655
00:30:40,620 --> 00:30:43,020
service routine with the connection

656
00:30:43,020 --> 00:30:46,740
proxy remotely

657
00:30:47,460 --> 00:30:50,640
now the patch is adding an additional

658
00:30:50,640 --> 00:30:52,919
validation for the auto sign excavator

659
00:30:52,919 --> 00:30:57,419
in the amfi cone extension

660
00:30:57,419 --> 00:31:00,000
it prevents though it prevents the old

661
00:31:00,000 --> 00:31:01,620
vulnerable activity service from

662
00:31:01,620 --> 00:31:04,158
launching

663
00:31:04,940 --> 00:31:09,000
finally I can get actually kernel code

664
00:31:09,000 --> 00:31:13,140
execution via the Sip bypass primitive I

665
00:31:13,140 --> 00:31:14,820
got

666
00:31:14,820 --> 00:31:17,159
unfortunately I couldn't show it here

667
00:31:17,159 --> 00:31:18,179
right now

668
00:31:18,179 --> 00:31:21,899
due to another unpatched field day

669
00:31:21,899 --> 00:31:23,520
however

670
00:31:23,520 --> 00:31:25,919
we can directly bypass the TCC

671
00:31:25,919 --> 00:31:29,820
protection via the Sip bypass primitive

672
00:31:29,820 --> 00:31:33,918
to access the user privacy

673
00:31:34,440 --> 00:31:38,279
TCC is short for transparent consent and

674
00:31:38,279 --> 00:31:39,480
control

675
00:31:39,480 --> 00:31:42,659
it is a security feature introduced in

676
00:31:42,659 --> 00:31:45,600
Mac OS Mojave

677
00:31:45,600 --> 00:31:49,020
it is designed to protect your privacy

678
00:31:49,020 --> 00:31:52,260
from the following items such as

679
00:31:52,260 --> 00:31:57,020
microphone camera address book

680
00:31:57,020 --> 00:32:00,720
private private photos and so on

681
00:32:00,720 --> 00:32:03,960
you can set the Privacy permissions for

682
00:32:03,960 --> 00:32:07,919
each application from system preferences

683
00:32:07,919 --> 00:32:11,760
this is an example of the TCC prompt one

684
00:32:11,760 --> 00:32:14,279
song application wants to access your

685
00:32:14,279 --> 00:32:16,820
address book

686
00:32:17,159 --> 00:32:18,840
in fact

687
00:32:18,840 --> 00:32:21,960
all users configuration data is stored

688
00:32:21,960 --> 00:32:26,760
in sqlite database named pcc.db

689
00:32:26,760 --> 00:32:29,340
there are two locations

690
00:32:29,340 --> 00:32:31,500
one is for the global

691
00:32:31,500 --> 00:32:34,080
which is restricted and the Sip

692
00:32:34,080 --> 00:32:35,399
protected

693
00:32:35,399 --> 00:32:37,980
we need the router is related

694
00:32:37,980 --> 00:32:40,919
entitlements to modify it

695
00:32:40,919 --> 00:32:44,220
and the other one is for each user

696
00:32:44,220 --> 00:32:47,720
it is protected by TCC itself

697
00:32:47,720 --> 00:32:50,760
we need the four disk of success

698
00:32:50,760 --> 00:32:54,260
permission to modify it

699
00:32:55,080 --> 00:32:58,679
from the access table of the database we

700
00:32:58,679 --> 00:33:02,039
can see the service column is the

701
00:33:02,039 --> 00:33:05,159
specific TCC permission items

702
00:33:05,159 --> 00:33:08,399
the client column is the boundary ID or

703
00:33:08,399 --> 00:33:12,779
absolute path to the request Target

704
00:33:12,779 --> 00:33:16,200
the Australian column is the decision

705
00:33:16,200 --> 00:33:19,799
zero means denied one is all known

706
00:33:19,799 --> 00:33:22,940
two means a lot

707
00:33:24,840 --> 00:33:27,419
there are two tcct demand service

708
00:33:27,419 --> 00:33:29,760
running on the system

709
00:33:29,760 --> 00:33:32,279
one is for the global running at the

710
00:33:32,279 --> 00:33:33,120
root

711
00:33:33,120 --> 00:33:35,700
the other one is for each user

712
00:33:35,700 --> 00:33:38,159
running as a normal user

713
00:33:38,159 --> 00:33:40,740
the team name process is responsible for

714
00:33:40,740 --> 00:33:43,679
validating the entitlements hold by the

715
00:33:43,679 --> 00:33:45,120
main actionable

716
00:33:45,120 --> 00:33:48,960
and handling all kinds of xpc requests

717
00:33:48,960 --> 00:33:52,140
if we are query the database to decide

718
00:33:52,140 --> 00:33:55,679
whether the requested TCC permission can

719
00:33:55,679 --> 00:33:58,679
be granted to a specific process

720
00:33:58,679 --> 00:34:01,380
and it will also update the database

721
00:34:01,380 --> 00:34:04,200
when user changes the TCC configurations

722
00:34:04,200 --> 00:34:07,019
from system preferences

723
00:34:07,019 --> 00:34:10,320
has the ability to modify the protected

724
00:34:10,320 --> 00:34:12,480
database because

725
00:34:12,480 --> 00:34:16,820
the special utilized entitlement

726
00:34:18,839 --> 00:34:21,300
there are some special entitlements for

727
00:34:21,300 --> 00:34:22,679
tcc2

728
00:34:22,679 --> 00:34:25,980
the entitlement TCC or law grants the

729
00:34:25,980 --> 00:34:28,859
permission to access the TCC items

730
00:34:28,859 --> 00:34:32,219
directly without prompting the user

731
00:34:32,219 --> 00:34:34,980
the value for the entitlementer key is

732
00:34:34,980 --> 00:34:38,159
an array which lists all the TCC

733
00:34:38,159 --> 00:34:40,500
permissions it has

734
00:34:40,500 --> 00:34:42,659
when it needs to access the

735
00:34:42,659 --> 00:34:46,219
corresponding TCC item CCT demon process

736
00:34:46,219 --> 00:34:49,320
will approve the access requests

737
00:34:49,320 --> 00:34:53,520
directly without querying the database

738
00:34:53,520 --> 00:34:55,980
the second entitlement TCC manager

739
00:34:55,980 --> 00:34:59,160
allows the client to request the tcct

740
00:34:59,160 --> 00:35:03,619
team service to update the TCC database

741
00:35:03,619 --> 00:35:05,599
foreign

742
00:35:05,599 --> 00:35:08,940
there are many ways to bypass the TCC

743
00:35:08,940 --> 00:35:10,680
protection

744
00:35:10,680 --> 00:35:14,099
we can directly exploit the design flaws

745
00:35:14,099 --> 00:35:16,200
of the tcct demand

746
00:35:16,200 --> 00:35:19,079
and the most frequently frequently used

747
00:35:19,079 --> 00:35:22,339
method is abusing the special TCC

748
00:35:22,339 --> 00:35:25,020
entitlements mentioned earlier

749
00:35:25,020 --> 00:35:28,200
moreover there is an awesome blackhead

750
00:35:28,200 --> 00:35:31,500
topic related to TCC bypass

751
00:35:31,500 --> 00:35:33,480
the link is here

752
00:35:33,480 --> 00:35:36,480
you can learn more about KCC bypass from

753
00:35:36,480 --> 00:35:39,060
their presentation slides

754
00:35:39,060 --> 00:35:41,880
here I just modify the protected

755
00:35:41,880 --> 00:35:45,839
database directly to bypass DCC with the

756
00:35:45,839 --> 00:35:50,060
Sip bypass primitive I got

757
00:35:51,180 --> 00:35:55,279
now let's watch the demo

758
00:36:05,640 --> 00:36:06,720
huh

759
00:36:06,720 --> 00:36:09,000
first let's take a look at the file

760
00:36:09,000 --> 00:36:13,400
directory structure on the hack server

761
00:36:16,680 --> 00:36:21,300
then using python to start a HTTP server

762
00:36:21,300 --> 00:36:23,280
I have created a claim virtual machine

763
00:36:23,280 --> 00:36:26,720
using the app

764
00:36:27,420 --> 00:36:31,640
we can check the target system variable

765
00:36:35,040 --> 00:36:39,200
and the Sip status is enabled

766
00:36:39,920 --> 00:36:44,400
now the temp directory is empty

767
00:36:44,400 --> 00:36:46,800
checking the TCP configuration in the

768
00:36:46,800 --> 00:36:48,060
Target system

769
00:36:48,060 --> 00:36:51,300
no application has been granted any TCP

770
00:36:51,300 --> 00:36:53,660
permissions

771
00:36:54,359 --> 00:36:57,900
now the victim is trying to access the

772
00:36:57,900 --> 00:37:00,780
phishing URL Safari is downloading the

773
00:37:00,780 --> 00:37:04,200
Json file from the efficient URL and

774
00:37:04,200 --> 00:37:06,060
automatically decompress it after

775
00:37:06,060 --> 00:37:08,720
downloaded

776
00:37:09,060 --> 00:37:12,180
currently no NC command is running

777
00:37:12,180 --> 00:37:14,339
now the victim is trying to open the

778
00:37:14,339 --> 00:37:16,200
downloaded a fake image

779
00:37:16,200 --> 00:37:18,900
it will open a real image and create a

780
00:37:18,900 --> 00:37:21,560
reverse share

781
00:37:23,040 --> 00:37:25,079
now the attacker connects to the reverse

782
00:37:25,079 --> 00:37:27,060
shell to app to execute arbitrary

783
00:37:27,060 --> 00:37:30,500
commands as a normal user

784
00:37:34,020 --> 00:37:36,359
the next stage of the pillows are under

785
00:37:36,359 --> 00:37:39,060
configuration have been deployed to the

786
00:37:39,060 --> 00:37:41,960
temp directory

787
00:37:51,619 --> 00:37:55,200
before executing the Erp exploit for

788
00:37:55,200 --> 00:37:58,460
root privilege acceleration

789
00:37:59,000 --> 00:38:03,380
we can check the target system

790
00:38:04,560 --> 00:38:08,820
now no down statement registered and no

791
00:38:08,820 --> 00:38:11,480
root shell

792
00:38:30,660 --> 00:38:35,299
now running the Erp exploit

793
00:38:38,339 --> 00:38:42,320
and express successfully

794
00:38:45,119 --> 00:38:48,180
the Erp exploit register a long

795
00:38:48,180 --> 00:38:50,540
statement named the Comm dot

796
00:38:50,540 --> 00:38:54,079
demo.reverse shell

797
00:38:55,320 --> 00:38:57,900
and the drops and Equitable named root

798
00:38:57,900 --> 00:39:00,140
share

799
00:39:10,020 --> 00:39:12,240
the reverse root shell will connect to

800
00:39:12,240 --> 00:39:17,160
the health server on Port 1337

801
00:39:22,980 --> 00:39:25,440
creating a hack server listening on Port

802
00:39:25,440 --> 00:39:28,339
1337

803
00:39:30,060 --> 00:39:32,040
then the reverse root share connection

804
00:39:32,040 --> 00:39:35,000
is successful

805
00:39:35,700 --> 00:39:38,280
the hack can run arbitrary commands as

806
00:39:38,280 --> 00:39:40,700
root

807
00:39:40,740 --> 00:39:43,079
trying to touch a file in a root-owned

808
00:39:43,079 --> 00:39:45,500
directory

809
00:39:55,140 --> 00:39:57,900
and the file touches successfully

810
00:39:57,900 --> 00:40:00,500
all right

811
00:40:04,800 --> 00:40:07,680
trying to access the private desktop

812
00:40:07,680 --> 00:40:12,140
directory which is protected by TCC

813
00:40:16,020 --> 00:40:18,060
but no permission

814
00:40:18,060 --> 00:40:21,060
now trying to take a screenshot on the

815
00:40:21,060 --> 00:40:23,660
Technical Machine

816
00:40:33,240 --> 00:40:37,939
and the capture screen is then empty

817
00:40:38,820 --> 00:40:40,859
checking the TCG configuration in the

818
00:40:40,859 --> 00:40:41,880
Target system

819
00:40:41,880 --> 00:40:47,060
is not granted any TCC permissions

820
00:41:00,599 --> 00:41:04,859
now replacing the protected TCC DB via

821
00:41:04,859 --> 00:41:08,660
the Sip bypass primitive

822
00:41:28,400 --> 00:41:31,020
aggravating and restarting the reverse

823
00:41:31,020 --> 00:41:33,660
root shell for the TCC configuration to

824
00:41:33,660 --> 00:41:35,520
take effect

825
00:41:35,520 --> 00:41:37,920
now we can see the root shell has got

826
00:41:37,920 --> 00:41:41,180
the TCC permissions

827
00:41:45,800 --> 00:41:51,000
restarting the hack server on Port 1337

828
00:42:01,920 --> 00:42:04,500
trying to access the private desktop

829
00:42:04,500 --> 00:42:06,800
again

830
00:42:11,099 --> 00:42:14,280
and now we can go get the secret files

831
00:42:14,280 --> 00:42:16,460
inside

832
00:42:23,700 --> 00:42:27,500
and try to take a screenshot again

833
00:42:36,720 --> 00:42:40,040
screenshot successfully

834
00:43:01,079 --> 00:43:05,180
and you have been helped

835
00:43:07,060 --> 00:43:10,139
[Music]

836
00:43:11,220 --> 00:43:14,598
okay yes

837
00:43:19,319 --> 00:43:23,240
let's back to my slides

838
00:43:29,280 --> 00:43:31,920
before wrapping up I would like to share

839
00:43:31,920 --> 00:43:34,440
another vulnerability to bypass TCC

840
00:43:34,440 --> 00:43:39,020
which I discovered during my research

841
00:43:39,240 --> 00:43:42,300
now let's recall the demand loader

842
00:43:42,300 --> 00:43:44,640
through the process as you have a d we

843
00:43:44,640 --> 00:43:46,680
talked about earlier

844
00:43:46,680 --> 00:43:49,079
it has the special ruthless entitlement

845
00:43:49,079 --> 00:43:52,440
and this means it has more privilege

846
00:43:52,440 --> 00:43:55,619
than for disk access permission

847
00:43:55,619 --> 00:43:59,520
there are 45 survey routines

848
00:43:59,520 --> 00:44:02,160
and all the motto of most of them

849
00:44:02,160 --> 00:44:04,920
requires root authorization there are

850
00:44:04,920 --> 00:44:09,260
still great targets for PCC bypass

851
00:44:09,920 --> 00:44:13,560
the issue exists in the service routine

852
00:44:13,560 --> 00:44:17,099
named registered personalized manifest

853
00:44:17,099 --> 00:44:21,680
for product key in foreground

854
00:44:21,680 --> 00:44:26,579
it is only available to root IPC clients

855
00:44:26,579 --> 00:44:29,339
note that the parameters

856
00:44:29,339 --> 00:44:31,980
manifest manifest directory and the

857
00:44:31,980 --> 00:44:34,920
product key can be controlled by an

858
00:44:34,920 --> 00:44:36,359
attacker

859
00:44:36,359 --> 00:44:39,599
and then the service routine will copy

860
00:44:39,599 --> 00:44:42,599
the files from the Manifest directory to

861
00:44:42,599 --> 00:44:44,540
this location

862
00:44:44,540 --> 00:44:46,400
foreign

863
00:44:46,400 --> 00:44:50,300
parts are controllable

864
00:44:51,540 --> 00:44:54,780
so I have two expired ideas

865
00:44:54,780 --> 00:44:57,660
the first is to make a more formed

866
00:44:57,660 --> 00:45:00,599
product key for path traversal

867
00:45:00,599 --> 00:45:03,599
in order to overwrite arbitrary sip

868
00:45:03,599 --> 00:45:05,520
protected files

869
00:45:05,520 --> 00:45:07,500
but it failed

870
00:45:07,500 --> 00:45:11,040
because there is a sanitization for the

871
00:45:11,040 --> 00:45:12,599
product key

872
00:45:12,599 --> 00:45:15,660
here in the math in the function it

873
00:45:15,660 --> 00:45:19,380
checks for special characters to prevent

874
00:45:19,380 --> 00:45:22,920
path traversal attacks

875
00:45:22,920 --> 00:45:25,920
my second attempt was to have the

876
00:45:25,920 --> 00:45:28,319
Manifest directory point to a TCC

877
00:45:28,319 --> 00:45:30,420
protected location

878
00:45:30,420 --> 00:45:32,640
the demon service can read the TCC

879
00:45:32,640 --> 00:45:35,460
protected contents due to its

880
00:45:35,460 --> 00:45:37,619
entitlement

881
00:45:37,619 --> 00:45:41,040
then the service will help me copy the

882
00:45:41,040 --> 00:45:43,260
TCC protected contents to the

883
00:45:43,260 --> 00:45:44,700
destination path

884
00:45:44,700 --> 00:45:47,700
and the destination path is readable by

885
00:45:47,700 --> 00:45:49,939
everyone

886
00:45:51,780 --> 00:45:54,839
the POC is simple with a few lines of

887
00:45:54,839 --> 00:45:55,859
code

888
00:45:55,859 --> 00:45:58,500
after generating the root authorization

889
00:45:58,500 --> 00:46:02,760
we can access the IPC service routine to

890
00:46:02,760 --> 00:46:05,339
register personalized manifests for

891
00:46:05,339 --> 00:46:07,020
product key

892
00:46:07,020 --> 00:46:10,140
then have the Manifest directory point

893
00:46:10,140 --> 00:46:12,240
to a privacy location

894
00:46:12,240 --> 00:46:15,240
finally the Privacy data will be copied

895
00:46:15,240 --> 00:46:19,260
to another location that we can access

896
00:46:19,260 --> 00:46:23,839
we can also watch the demo video

897
00:46:38,180 --> 00:46:42,919
the Sip status is also enabled

898
00:46:49,140 --> 00:46:51,420
trying to access the address book

899
00:46:51,420 --> 00:46:55,079
directly from the terminal

900
00:46:55,079 --> 00:46:57,180
and don't Grant the terminal TCC

901
00:46:57,180 --> 00:47:00,980
permissions to access the address book

902
00:47:11,819 --> 00:47:14,640
learning the exploit program to still

903
00:47:14,640 --> 00:47:18,379
date from the address book

904
00:47:22,460 --> 00:47:25,200
then we can read the address book data

905
00:47:25,200 --> 00:47:28,399
from the directory

906
00:47:44,880 --> 00:47:47,480
okay

907
00:47:50,640 --> 00:47:55,098
let's come back to my slides

908
00:48:00,900 --> 00:48:03,540
now the patch is adding entitlement

909
00:48:03,540 --> 00:48:07,319
checks for the incoming IBC clients the

910
00:48:07,319 --> 00:48:10,260
required the requesting clients must

911
00:48:10,260 --> 00:48:11,160
have the entitlement

912
00:48:11,160 --> 00:48:14,160
com.apple.private.flt

913
00:48:18,240 --> 00:48:22,160
okay let's make a summary

914
00:48:22,319 --> 00:48:25,260
from the previous cases we will now

915
00:48:25,260 --> 00:48:28,740
realize that Apple systems

916
00:48:28,740 --> 00:48:31,800
including Macos and iOS

917
00:48:31,800 --> 00:48:34,680
are not as skilled as we thought

918
00:48:34,680 --> 00:48:37,319
so remember to keep your device up to

919
00:48:37,319 --> 00:48:39,079
date

920
00:48:39,079 --> 00:48:43,319
and and don't click don't click on the

921
00:48:43,319 --> 00:48:46,619
URLs from Uncharted strangers

922
00:48:46,619 --> 00:48:49,020
and don't use priority the software

923
00:48:49,020 --> 00:48:52,260
watch out for the children's inside

924
00:48:52,260 --> 00:48:55,740
next for security researchers

925
00:48:55,740 --> 00:48:59,099
I think logic bugs are very powerful

926
00:48:59,099 --> 00:49:02,640
they are easy to exploit and can work

927
00:49:02,640 --> 00:49:06,480
across platforms both are inter and arm

928
00:49:06,480 --> 00:49:08,400
platforms

929
00:49:08,400 --> 00:49:11,579
you can get more by chaining back

930
00:49:11,579 --> 00:49:13,440
together

931
00:49:13,440 --> 00:49:16,560
the source code of my story chain was

932
00:49:16,560 --> 00:49:19,500
submitted to the Galaxy GitHub

933
00:49:19,500 --> 00:49:22,440
here for your rep for research purpose

934
00:49:22,440 --> 00:49:24,619
only

935
00:49:25,800 --> 00:49:28,680
here are the links for your reference

936
00:49:28,680 --> 00:49:32,660
and thanks that's all

937
00:49:37,099 --> 00:49:39,960
thank you um if anybody wants the links

938
00:49:39,960 --> 00:49:41,940
the slides should be uploaded in the

939
00:49:41,940 --> 00:49:43,740
next few hours or by the day so you

940
00:49:43,740 --> 00:49:44,880
don't have to take a picture I'll be

941
00:49:44,880 --> 00:49:46,140
online

942
00:49:46,140 --> 00:49:48,300
um we've got a couple of questions Tim

943
00:49:48,300 --> 00:49:49,440
Apple

944
00:49:49,440 --> 00:49:51,599
is there an easy way to run arbitrary

945
00:49:51,599 --> 00:49:54,119
programs in the Mac OS sandbox

946
00:49:54,119 --> 00:49:55,800
it would be nice if Apple made

947
00:49:55,800 --> 00:49:57,780
sandboxing easier for regular users

948
00:49:57,780 --> 00:50:00,000
running untrusted apps that don't opt

949
00:50:00,000 --> 00:50:02,160
into a sandbox

950
00:50:02,160 --> 00:50:05,640
uh running archery programs in sandbox

951
00:50:05,640 --> 00:50:08,579
within the sandbox restriction

952
00:50:08,579 --> 00:50:12,660
and there is the case to attack the

953
00:50:12,660 --> 00:50:15,300
system corner from sandbox directly

954
00:50:15,300 --> 00:50:16,920
so

955
00:50:16,920 --> 00:50:19,619
some some next service can be accessible

956
00:50:19,619 --> 00:50:22,800
even Inside the Box the sandbox

957
00:50:22,800 --> 00:50:25,339
configuration is in a

958
00:50:25,339 --> 00:50:27,780
config file

959
00:50:27,780 --> 00:50:30,780
so it is it is possible

960
00:50:30,780 --> 00:50:34,200
by editing the config file yeah okay

961
00:50:34,200 --> 00:50:36,960
steam here

962
00:50:36,960 --> 00:50:40,020
no nothing Apple okay

963
00:50:40,020 --> 00:50:41,940
um and Anonymous uh great talk your

964
00:50:41,940 --> 00:50:43,560
presentation was very clear and easy to

965
00:50:43,560 --> 00:50:45,480
follow I'm curious how long did it take

966
00:50:45,480 --> 00:50:47,940
from start to finish to discover the

967
00:50:47,940 --> 00:50:50,400
entire exploit chain also were there any

968
00:50:50,400 --> 00:50:52,200
parts that you initially found promising

969
00:50:52,200 --> 00:50:54,780
that turned out to be dead ends thank

970
00:50:54,780 --> 00:50:55,440
you

971
00:50:55,440 --> 00:50:58,020
hola

972
00:50:58,020 --> 00:51:00,920
um I can't remember

973
00:51:01,160 --> 00:51:04,920
months days hours

974
00:51:04,920 --> 00:51:07,700
month month

975
00:51:08,460 --> 00:51:11,160
any any parts you found uh promising

976
00:51:11,160 --> 00:51:13,140
that turned out to be a rabbit hole a

977
00:51:13,140 --> 00:51:15,500
dead end

978
00:51:21,240 --> 00:51:22,920
um

979
00:51:22,920 --> 00:51:26,599
no no okay

980
00:51:27,300 --> 00:51:29,059
everything turned out to be an exploit

981
00:51:29,059 --> 00:51:31,980
any other questions guys

982
00:51:31,980 --> 00:51:35,540
no thanks again Mickey

