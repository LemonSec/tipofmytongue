1
00:00:05,839 --> 00:00:08,179
hello everyone

2
00:00:08,179 --> 00:00:11,880
thank you for coming here this year was

3
00:00:11,880 --> 00:00:13,740
a little bit more challenging and I had

4
00:00:13,740 --> 00:00:15,900
to switch now to another laptop so this

5
00:00:15,900 --> 00:00:19,500
is this will be a real live uh technique

6
00:00:19,500 --> 00:00:21,600
which I am showing you uh because the

7
00:00:21,600 --> 00:00:24,680
good thing is that for web 3

8
00:00:24,680 --> 00:00:27,480
exploitation techniques most of the time

9
00:00:27,480 --> 00:00:30,180
uh you just need a browser some

10
00:00:30,180 --> 00:00:33,840
extensions like metamask or polka.js and

11
00:00:33,840 --> 00:00:36,059
you you will be good to go for the more

12
00:00:36,059 --> 00:00:38,399
Advanced Techniques you will need some

13
00:00:38,399 --> 00:00:41,520
python maybe uh or some Rust

14
00:00:41,520 --> 00:00:45,239
but we will get into this details later

15
00:00:45,239 --> 00:00:48,660
because in order to get to uh the

16
00:00:48,660 --> 00:00:50,940
hacking and the techniques themselves

17
00:00:50,940 --> 00:00:55,020
we need to know the basics how web3 is

18
00:00:55,020 --> 00:00:59,280
working what it uh means anyways and and

19
00:00:59,280 --> 00:01:01,680
which plot more platforms we are working

20
00:01:01,680 --> 00:01:05,339
with so first I will talk about ethereum

21
00:01:05,339 --> 00:01:08,340
hacking uh solidity smart contract

22
00:01:08,340 --> 00:01:11,640
hacking specifically how you can make

23
00:01:11,640 --> 00:01:14,299
transactions and then how you can

24
00:01:14,299 --> 00:01:17,040
make malicious transactions like a

25
00:01:17,040 --> 00:01:19,860
re-entrancy attack which probably uh

26
00:01:19,860 --> 00:01:21,420
most people who are interested in

27
00:01:21,420 --> 00:01:23,700
cryptocurrency security know about it

28
00:01:23,700 --> 00:01:28,140
and then we will look into some uh some

29
00:01:28,140 --> 00:01:30,000
actual hacks that happened

30
00:01:30,000 --> 00:01:32,400
some replay attacks

31
00:01:32,400 --> 00:01:35,520
um which I will hopefully be able to

32
00:01:35,520 --> 00:01:39,060
reproduce on on this Mac which I haven't

33
00:01:39,060 --> 00:01:41,520
tried before but I just need the remix

34
00:01:41,520 --> 00:01:44,040
ID so probably it will work the same way

35
00:01:44,040 --> 00:01:47,280
uh as on my own laptop

36
00:01:47,280 --> 00:01:50,220
we will also look into a substrate and

37
00:01:50,220 --> 00:01:53,460
rust because the web 3 ecosystem is not

38
00:01:53,460 --> 00:01:56,939
full uh without uh the Rust part of it

39
00:01:56,939 --> 00:01:59,399
and this topic is pretty new rust is

40
00:01:59,399 --> 00:02:02,280
becoming hot and

41
00:02:02,280 --> 00:02:04,680
uh this is the reason why I brought it

42
00:02:04,680 --> 00:02:08,459
in and we will look into uh possible

43
00:02:08,459 --> 00:02:10,560
ways where you can uh which you can

44
00:02:10,560 --> 00:02:13,920
utilize to find uh issues like uh the

45
00:02:13,920 --> 00:02:17,160
denial of service in the notes or or

46
00:02:17,160 --> 00:02:19,340
Logic box or other

47
00:02:19,340 --> 00:02:22,860
vulnerabilities inside uh inside

48
00:02:22,860 --> 00:02:26,640
substrate and substrate is the system on

49
00:02:26,640 --> 00:02:29,760
which polkadot kuzama and many others

50
00:02:29,760 --> 00:02:31,500
are running

51
00:02:31,500 --> 00:02:35,099
um there will be a smaller example on uh

52
00:02:35,099 --> 00:02:38,099
on the from web 2 to web3 kind of

53
00:02:38,099 --> 00:02:39,840
exploitation because

54
00:02:39,840 --> 00:02:43,519
right now there are no clear web 3

55
00:02:43,519 --> 00:02:46,920
systems most of the time we are

56
00:02:46,920 --> 00:02:48,900
um still using some web2 technologies

57
00:02:48,900 --> 00:02:51,000
like DNS

58
00:02:51,000 --> 00:02:53,400
um in order to get to your smart

59
00:02:53,400 --> 00:02:55,980
contracts and to interact with the

60
00:02:55,980 --> 00:02:57,780
crypto notes

61
00:02:57,780 --> 00:02:59,280
and

62
00:02:59,280 --> 00:03:01,459
I will speak a little bit

63
00:03:01,459 --> 00:03:03,780
really just a little bit about social

64
00:03:03,780 --> 00:03:06,420
engineering and some more Advanced

65
00:03:06,420 --> 00:03:09,480
Techniques uh in the end of the talk

66
00:03:09,480 --> 00:03:11,159
okay

67
00:03:11,159 --> 00:03:13,019
who am I

68
00:03:13,019 --> 00:03:16,379
um I started uh with cryptocurrencies

69
00:03:16,379 --> 00:03:19,920
somewhere around 2013 in Budapest hacker

70
00:03:19,920 --> 00:03:22,739
space Hungary that's where I first heard

71
00:03:22,739 --> 00:03:25,739
about uh Bitcoin and what it is and I

72
00:03:25,739 --> 00:03:26,940
was really

73
00:03:26,940 --> 00:03:29,700
happy to hear that there is a new system

74
00:03:29,700 --> 00:03:32,400
which is decentralized and it can

75
00:03:32,400 --> 00:03:35,400
transfer values from A to B and I

76
00:03:35,400 --> 00:03:37,739
started to really like it and since then

77
00:03:37,739 --> 00:03:39,300
I'm

78
00:03:39,300 --> 00:03:43,019
um I'm I'm into the scene from security

79
00:03:43,019 --> 00:03:44,940
point of view before that I was doing

80
00:03:44,940 --> 00:03:47,459
penetration testing and security

81
00:03:47,459 --> 00:03:50,580
research and I switched to a

82
00:03:50,580 --> 00:03:53,459
cryptocurrency only security and

83
00:03:53,459 --> 00:03:55,019
research

84
00:03:55,019 --> 00:03:59,040
um since 2019 or something like that and

85
00:03:59,040 --> 00:04:02,040
that's when cctf started this is the

86
00:04:02,040 --> 00:04:04,200
cryptocurrency hacking challenge which

87
00:04:04,200 --> 00:04:06,540
is present right here we have the crypto

88
00:04:06,540 --> 00:04:09,720
CTF Village so if you want to play the

89
00:04:09,720 --> 00:04:12,180
game uh I hope this talk will inspire

90
00:04:12,180 --> 00:04:13,080
you

91
00:04:13,080 --> 00:04:17,160
and give you some ideas on on how to

92
00:04:17,160 --> 00:04:19,738
actually play the game because what

93
00:04:19,738 --> 00:04:22,079
we've seen on the previous rounds that

94
00:04:22,079 --> 00:04:24,900
most people uh have issues getting

95
00:04:24,900 --> 00:04:26,639
started

96
00:04:26,639 --> 00:04:29,400
um and and we try to build up these

97
00:04:29,400 --> 00:04:31,620
presentations workshops and and all

98
00:04:31,620 --> 00:04:32,520
these

99
00:04:32,520 --> 00:04:35,400
um materials that that help you to

100
00:04:35,400 --> 00:04:38,460
to actually play and uh succeed in the

101
00:04:38,460 --> 00:04:41,520
game uh this is totally non-profit and

102
00:04:41,520 --> 00:04:43,620
we started as fun and it just grew

103
00:04:43,620 --> 00:04:46,380
itself crucial is a company which I'm

104
00:04:46,380 --> 00:04:49,020
founder of doing Audits and other

105
00:04:49,020 --> 00:04:51,840
Security Services and I'm also a member

106
00:04:51,840 --> 00:04:55,080
of the polkadot project as a head

107
00:04:55,080 --> 00:04:57,780
ambassador of Eastern Europe

108
00:04:57,780 --> 00:05:00,900
that's the things I like and

109
00:05:00,900 --> 00:05:03,300
um okay let's jump into this what is

110
00:05:03,300 --> 00:05:06,300
web3 what uh do we need to understand so

111
00:05:06,300 --> 00:05:08,460
first of all it's a question to you and

112
00:05:08,460 --> 00:05:11,699
please raise your hands if you wrote any

113
00:05:11,699 --> 00:05:13,979
smart contracts before in solidity rust

114
00:05:13,979 --> 00:05:16,740
or or whatever

115
00:05:16,740 --> 00:05:18,500
okay

116
00:05:18,500 --> 00:05:22,199
uh next question please raise your hands

117
00:05:22,199 --> 00:05:25,259
if you uh interacted with any smart

118
00:05:25,259 --> 00:05:27,180
contracts or made any transactions

119
00:05:27,180 --> 00:05:29,400
before

120
00:05:29,400 --> 00:05:33,060
okay uh tell me if it was was it a

121
00:05:33,060 --> 00:05:35,340
solidity based

122
00:05:35,340 --> 00:05:39,180
Okay cool so as I see most of you uh

123
00:05:39,180 --> 00:05:43,860
will need uh the the basic knowledge uh

124
00:05:43,860 --> 00:05:47,160
I suppose that you already know some

125
00:05:47,160 --> 00:05:50,039
hacking in web 2 and how vaptive

126
00:05:50,039 --> 00:05:52,259
topologies look like what is a back-end

127
00:05:52,259 --> 00:05:55,259
front end how they interact with it with

128
00:05:55,259 --> 00:05:58,020
each other a little bit about networking

129
00:05:58,020 --> 00:06:02,220
so uh I explain you the difference

130
00:06:02,220 --> 00:06:06,600
um because the point of web3 uh ethereum

131
00:06:06,600 --> 00:06:09,840
polka dot and whatever project we are

132
00:06:09,840 --> 00:06:12,479
speaking about is that there is no uh

133
00:06:12,479 --> 00:06:14,940
back end of the way there is in web 2 so

134
00:06:14,940 --> 00:06:18,000
you need to think about the whole system

135
00:06:18,000 --> 00:06:20,639
very differently because when you make a

136
00:06:20,639 --> 00:06:23,280
transaction it's not just going to one

137
00:06:23,280 --> 00:06:25,440
node it is broadcasted all over the

138
00:06:25,440 --> 00:06:28,139
network and what is very common in those

139
00:06:28,139 --> 00:06:32,940
systems is that you cannot change the

140
00:06:32,940 --> 00:06:36,120
execution once you once you made the

141
00:06:36,120 --> 00:06:38,400
transaction and it got mined and that's

142
00:06:38,400 --> 00:06:40,620
very different from web2 because in in

143
00:06:40,620 --> 00:06:44,460
web 2 you have a SQL injection and you

144
00:06:44,460 --> 00:06:47,220
just fix the fix it on the back end and

145
00:06:47,220 --> 00:06:49,919
then in web3 you cannot do this so when

146
00:06:49,919 --> 00:06:52,500
you make uh or code a smart contract

147
00:06:52,500 --> 00:06:56,520
that is most of the time immutable there

148
00:06:56,520 --> 00:06:58,259
are some tricks to to create some

149
00:06:58,259 --> 00:07:00,360
proxies before that

150
00:07:00,360 --> 00:07:03,120
um but but you should think about the

151
00:07:03,120 --> 00:07:06,660
whole thing as once it's deployed once

152
00:07:06,660 --> 00:07:09,300
you send the transactions and deployed

153
00:07:09,300 --> 00:07:11,220
your smart contract in this transaction

154
00:07:11,220 --> 00:07:13,979
it's out there and you cannot change

155
00:07:13,979 --> 00:07:16,919
this and solidity is the name of the

156
00:07:16,919 --> 00:07:19,440
language that ethereum is using that

157
00:07:19,440 --> 00:07:22,080
will be our first example

158
00:07:22,080 --> 00:07:25,860
uh coin is the is the

159
00:07:25,860 --> 00:07:28,080
um is the value that is used for the

160
00:07:28,080 --> 00:07:30,599
transaction you need to pay

161
00:07:30,599 --> 00:07:33,720
um the base fees uh to to get your

162
00:07:33,720 --> 00:07:36,660
transaction mine and on top of the coins

163
00:07:36,660 --> 00:07:39,240
there are the tokens which I will show

164
00:07:39,240 --> 00:07:42,900
you if you who heard about erc20

165
00:07:42,900 --> 00:07:46,800
okay erc20 is a token standard that

166
00:07:46,800 --> 00:07:50,460
means in solidity which is similar to

167
00:07:50,460 --> 00:07:53,099
JavaScript kind of

168
00:07:53,099 --> 00:07:56,400
um you can write your code and you can

169
00:07:56,400 --> 00:07:58,740
make a logic which implements the token

170
00:07:58,740 --> 00:08:01,560
logic and this erc20 is the standard for

171
00:08:01,560 --> 00:08:03,539
that I will show you the code example

172
00:08:03,539 --> 00:08:07,319
and also show you what kind of issues uh

173
00:08:07,319 --> 00:08:10,259
we face in this world

174
00:08:10,259 --> 00:08:13,919
so let's uh let's move on to a few other

175
00:08:13,919 --> 00:08:17,280
things Inc is very similar to solidity

176
00:08:17,280 --> 00:08:20,280
but in Rust and for the polka dot

177
00:08:20,280 --> 00:08:21,440
ecosystem

178
00:08:21,440 --> 00:08:24,720
and signing will be another very

179
00:08:24,720 --> 00:08:27,720
important topic for now because each

180
00:08:27,720 --> 00:08:30,180
time you make a transaction you do it by

181
00:08:30,180 --> 00:08:32,820
signing with your wallet and this can

182
00:08:32,820 --> 00:08:35,940
also lead to vulnerabilities uh which I

183
00:08:35,940 --> 00:08:38,039
will uh present here

184
00:08:38,039 --> 00:08:40,919
for example many Bridge hacks if you

185
00:08:40,919 --> 00:08:43,799
heard about breach hacks and so uh so

186
00:08:43,799 --> 00:08:46,800
that some issues were uh happening with

187
00:08:46,800 --> 00:08:48,600
the with the signatures it's very open

188
00:08:48,600 --> 00:08:52,080
often a replay attack

189
00:08:52,080 --> 00:08:55,440
so how does an ethereum transaction work

190
00:08:55,440 --> 00:08:59,519
so so what are the details inside uh the

191
00:08:59,519 --> 00:09:01,680
transaction and how do we put this

192
00:09:01,680 --> 00:09:02,760
together

193
00:09:02,760 --> 00:09:06,060
so first of all you are sending this

194
00:09:06,060 --> 00:09:09,720
transaction to an address uh there is

195
00:09:09,720 --> 00:09:12,660
some data inside which is the evm

196
00:09:12,660 --> 00:09:15,180
bytecode evm is the ethereum virtual

197
00:09:15,180 --> 00:09:17,459
machine so once you make a transaction

198
00:09:17,459 --> 00:09:20,940
and your transaction is deploying a

199
00:09:20,940 --> 00:09:24,180
smart contract if there are let's say 10

200
00:09:24,180 --> 00:09:25,800
000 ethereum nodes

201
00:09:25,800 --> 00:09:28,560
this execution your bytecode will be

202
00:09:28,560 --> 00:09:31,500
executed on on all the nodes meaning

203
00:09:31,500 --> 00:09:34,740
it's not really uh

204
00:09:34,740 --> 00:09:39,600
not really uh friendly to make like a

205
00:09:39,600 --> 00:09:42,180
like big uh transactions and big

206
00:09:42,180 --> 00:09:44,640
executions because it is the same thing

207
00:09:44,640 --> 00:09:47,279
is run everywhere it is needed because

208
00:09:47,279 --> 00:09:52,200
the consensus needs to be uh agreeing on

209
00:09:52,200 --> 00:09:56,820
on the execution output so uh there is

210
00:09:56,820 --> 00:09:59,640
no way that that some some smart

211
00:09:59,640 --> 00:10:02,640
contracts behave differently if they do

212
00:10:02,640 --> 00:10:05,160
then there will be an issue uh in the

213
00:10:05,160 --> 00:10:06,660
concepts within the system and this

214
00:10:06,660 --> 00:10:09,180
needs to be solved and it is of course

215
00:10:09,180 --> 00:10:12,540
automatically solved and this is a lower

216
00:10:12,540 --> 00:10:15,240
level of the of the system

217
00:10:15,240 --> 00:10:18,240
so let's say we have put together uh the

218
00:10:18,240 --> 00:10:21,779
transaction uh with the address where we

219
00:10:21,779 --> 00:10:23,760
are sending with the data which is

220
00:10:23,760 --> 00:10:26,279
either you don't don't really send data

221
00:10:26,279 --> 00:10:29,700
just you say okay I send my coins from

222
00:10:29,700 --> 00:10:31,860
my address to that address and that's it

223
00:10:31,860 --> 00:10:33,779
that's a normal transaction

224
00:10:33,779 --> 00:10:36,420
and uh that that's actually the eater

225
00:10:36,420 --> 00:10:37,980
value

226
00:10:37,980 --> 00:10:40,740
um and there is announce because the the

227
00:10:40,740 --> 00:10:42,779
transactions need to be different and

228
00:10:42,779 --> 00:10:45,120
there is the gas uh there is a gas price

229
00:10:45,120 --> 00:10:46,140
and limit

230
00:10:46,140 --> 00:10:48,779
what do we use the gas the gas is

231
00:10:48,779 --> 00:10:52,380
actually uh an amount of ether which you

232
00:10:52,380 --> 00:10:54,600
pay for the execution fee so whenever

233
00:10:54,600 --> 00:10:57,120
you interact with a smart contract in

234
00:10:57,120 --> 00:10:58,740
the ethereum system

235
00:10:58,740 --> 00:11:01,380
there is a guest feed and the gas fee

236
00:11:01,380 --> 00:11:03,899
needs to be paid from your ethereum

237
00:11:03,899 --> 00:11:06,720
balance otherwise if there would be no

238
00:11:06,720 --> 00:11:08,760
gas fee in the system then everyone

239
00:11:08,760 --> 00:11:12,060
would be just uh sorry everyone would be

240
00:11:12,060 --> 00:11:13,320
just um

241
00:11:13,320 --> 00:11:15,959
running unlimited amount of execution

242
00:11:15,959 --> 00:11:18,079
and it would take down the whole network

243
00:11:18,079 --> 00:11:21,540
so once you put this together then you

244
00:11:21,540 --> 00:11:24,180
sign the transaction this is happening

245
00:11:24,180 --> 00:11:28,019
with ecdsa keys in uh in ethereum

246
00:11:28,019 --> 00:11:31,800
and after you assign it you will find uh

247
00:11:31,800 --> 00:11:34,800
basically any ethereum client that is

248
00:11:34,800 --> 00:11:38,480
connected to the to the ethereum network

249
00:11:38,480 --> 00:11:42,120
and you send it as a broadcast and it

250
00:11:42,120 --> 00:11:45,120
starts to get propagated gets mine and

251
00:11:45,120 --> 00:11:46,140
so on

252
00:11:46,140 --> 00:11:48,480
and that is the consensus part which is

253
00:11:48,480 --> 00:11:51,240
not part of the of this talk but more

254
00:11:51,240 --> 00:11:54,180
likely how do we get there that we make

255
00:11:54,180 --> 00:11:56,880
this transaction and how can we uh

256
00:11:56,880 --> 00:11:59,360
assign and how can we

257
00:11:59,360 --> 00:12:02,120
make this transaction happen

258
00:12:02,120 --> 00:12:06,600
once the the transaction is mined out uh

259
00:12:06,600 --> 00:12:10,200
then uh it uh it will be finalized if

260
00:12:10,200 --> 00:12:12,540
you omit some mistakes if you send very

261
00:12:12,540 --> 00:12:17,459
low uh gas gas fees for example it might

262
00:12:17,459 --> 00:12:21,360
not be mined out and uh gets uh rejected

263
00:12:21,360 --> 00:12:24,300
or if you have some logic issues and it

264
00:12:24,300 --> 00:12:25,519
cannot

265
00:12:25,519 --> 00:12:28,980
execute the way uh it should be then it

266
00:12:28,980 --> 00:12:32,339
also get rejected by the first node you

267
00:12:32,339 --> 00:12:34,560
are sending it to

268
00:12:34,560 --> 00:12:37,680
so what tools do we use to make that

269
00:12:37,680 --> 00:12:40,079
happen

270
00:12:40,079 --> 00:12:40,680
um

271
00:12:40,680 --> 00:12:44,040
these are the core tools that most of

272
00:12:44,040 --> 00:12:47,399
the time uh you can use uh to name them

273
00:12:47,399 --> 00:12:51,959
who who saw the folks before

274
00:12:51,959 --> 00:12:55,079
okay couple of you okay

275
00:12:55,079 --> 00:12:58,320
this is called metamask so if you search

276
00:12:58,320 --> 00:13:01,620
for the metamask wallet uh this is a

277
00:13:01,620 --> 00:13:03,480
browser Odon

278
00:13:03,480 --> 00:13:07,079
which you can install actually

279
00:13:07,079 --> 00:13:09,060
um you can you can do a lot of things

280
00:13:09,060 --> 00:13:11,639
without that but uh when you want to

281
00:13:11,639 --> 00:13:14,940
make the actual transaction uh on a live

282
00:13:14,940 --> 00:13:17,639
Network then the metamask is very

283
00:13:17,639 --> 00:13:20,279
convenient to use uh the only drawback

284
00:13:20,279 --> 00:13:22,680
with metamask is that it it is not

285
00:13:22,680 --> 00:13:25,320
directly contacting an ethereum node it

286
00:13:25,320 --> 00:13:29,100
is using infuro uh infuro provides API

287
00:13:29,100 --> 00:13:32,220
services to metamask users and and

288
00:13:32,220 --> 00:13:34,620
that's a kind of centralized server so

289
00:13:34,620 --> 00:13:36,240
when we speak about decentralized

290
00:13:36,240 --> 00:13:39,060
ethereum you need to know that most

291
00:13:39,060 --> 00:13:41,220
people use metamask and metamask is

292
00:13:41,220 --> 00:13:44,880
reliant on on infurah which is uh which

293
00:13:44,880 --> 00:13:46,920
is somewhat breaking this model

294
00:13:46,920 --> 00:13:49,200
but let's say it's fine

295
00:13:49,200 --> 00:13:51,959
um we have uh truffle and ganache they

296
00:13:51,959 --> 00:13:54,600
are often used together you can run your

297
00:13:54,600 --> 00:13:57,839
local blockchain uh with ganache you

298
00:13:57,839 --> 00:14:01,320
just start it and it starts a local

299
00:14:01,320 --> 00:14:04,920
ethereum node and we truffle you can use

300
00:14:04,920 --> 00:14:08,160
uh JavaScript and solidity together and

301
00:14:08,160 --> 00:14:10,620
make automated tasks

302
00:14:10,620 --> 00:14:14,220
python is also very useful

303
00:14:14,220 --> 00:14:17,820
um I will show you some examples uh on

304
00:14:17,820 --> 00:14:19,680
how to use

305
00:14:19,680 --> 00:14:24,779
um python for generating keys

306
00:14:24,779 --> 00:14:26,940
um and and assigned messages

307
00:14:26,940 --> 00:14:31,019
for a more advanced uh usage on the

308
00:14:31,019 --> 00:14:34,139
middle that's the octopus logo

309
00:14:34,139 --> 00:14:36,540
um and it is used for reverse

310
00:14:36,540 --> 00:14:38,579
engineering playing with the byte code

311
00:14:38,579 --> 00:14:42,000
it is not just good for solidity it can

312
00:14:42,000 --> 00:14:45,360
be used for uh for a vasum as well was

313
00:14:45,360 --> 00:14:49,260
um is uh is the Smart contract

314
00:14:49,260 --> 00:14:50,300
um

315
00:14:50,300 --> 00:14:53,699
execution platform uh which which is

316
00:14:53,699 --> 00:14:56,399
used in uh in substrate polkadot and

317
00:14:56,399 --> 00:14:57,959
kusama

318
00:14:57,959 --> 00:15:00,959
and what is the most interesting for us

319
00:15:00,959 --> 00:15:06,000
now uh for this talk is the remix IDE

320
00:15:06,000 --> 00:15:08,579
which is running from your browser you

321
00:15:08,579 --> 00:15:11,399
just need to open it and very soon we

322
00:15:11,399 --> 00:15:15,019
will see some examples

323
00:15:15,060 --> 00:15:18,360
so starter technique we want to interact

324
00:15:18,360 --> 00:15:21,839
with the smart contract uh what kind of

325
00:15:21,839 --> 00:15:25,500
techniques can we think about it uh the

326
00:15:25,500 --> 00:15:28,260
funny thing still in web3 and on all the

327
00:15:28,260 --> 00:15:30,779
cryptocurrency projects we still see

328
00:15:30,779 --> 00:15:33,660
issues which people just accidentally

329
00:15:33,660 --> 00:15:36,480
find they are not looking for it they

330
00:15:36,480 --> 00:15:38,220
are just trying to understand what is

331
00:15:38,220 --> 00:15:39,260
going on

332
00:15:39,260 --> 00:15:42,660
calling functions and and playing with

333
00:15:42,660 --> 00:15:46,199
them and accidentally killing and uh and

334
00:15:46,199 --> 00:15:48,839
losing uh or making projects lose

335
00:15:48,839 --> 00:15:50,760
hundreds of Millions

336
00:15:50,760 --> 00:15:54,420
it's a it's a bit older uh story this is

337
00:15:54,420 --> 00:15:58,079
the multisig issue from parity and this

338
00:15:58,079 --> 00:16:01,079
was uh one of the first big incident

339
00:16:01,079 --> 00:16:03,540
that happened and it was not really a

340
00:16:03,540 --> 00:16:07,380
very complicated uh issue after this

341
00:16:07,380 --> 00:16:09,480
presentation hopefully you will be able

342
00:16:09,480 --> 00:16:12,779
to uh um exploit this very simple

343
00:16:12,779 --> 00:16:15,000
techniques and call some functions

344
00:16:15,000 --> 00:16:17,699
because this uh this issue was basically

345
00:16:17,699 --> 00:16:19,320
that the guy was trying to figure out

346
00:16:19,320 --> 00:16:21,240
how the system works he was calling some

347
00:16:21,240 --> 00:16:23,940
functions and realized that

348
00:16:23,940 --> 00:16:27,000
um when you and deploy a smart contract

349
00:16:27,000 --> 00:16:29,760
there is a Constructor which runs and it

350
00:16:29,760 --> 00:16:32,339
was not initialized we figured out oh I

351
00:16:32,339 --> 00:16:35,339
can call the call the initialize a

352
00:16:35,339 --> 00:16:37,079
function become the owner of the

353
00:16:37,079 --> 00:16:40,259
contract and and then kill it because

354
00:16:40,259 --> 00:16:43,560
there is self-destruct option in some

355
00:16:43,560 --> 00:16:46,380
smart contracts it's not mandatory but

356
00:16:46,380 --> 00:16:48,300
it's possible

357
00:16:48,300 --> 00:16:49,079
um

358
00:16:49,079 --> 00:16:52,320
the next example which is also not too

359
00:16:52,320 --> 00:16:53,959
complicated

360
00:16:53,959 --> 00:16:57,420
and the question again before I I get

361
00:16:57,420 --> 00:16:59,459
into details who used blockchain

362
00:16:59,459 --> 00:17:03,000
Explorer before any blockchain Explorer

363
00:17:03,000 --> 00:17:07,439
uh-huh okay uh I will show you uh this a

364
00:17:07,439 --> 00:17:09,419
little bit more detail how this works

365
00:17:09,419 --> 00:17:11,939
but this is actually a screenshot from a

366
00:17:11,939 --> 00:17:14,699
blockchain Explorer because whenever you

367
00:17:14,699 --> 00:17:17,760
send a transaction and call a function

368
00:17:17,760 --> 00:17:21,299
in a smart contract you can clearly uh

369
00:17:21,299 --> 00:17:24,839
see what was called and the arguments

370
00:17:24,839 --> 00:17:26,760
that were passed

371
00:17:26,760 --> 00:17:29,520
so what could we what could go wrong

372
00:17:29,520 --> 00:17:33,120
in case of uh of this red banano that's

373
00:17:33,120 --> 00:17:35,940
a meme coin it's a really fun project uh

374
00:17:35,940 --> 00:17:39,120
but uh they figured out it's not enough

375
00:17:39,120 --> 00:17:41,640
if they have their own blockchain which

376
00:17:41,640 --> 00:17:43,860
many blockchain projects figure out of

377
00:17:43,860 --> 00:17:47,039
course because they want to do swaps and

378
00:17:47,039 --> 00:17:48,780
they want to switch to other tokens so

379
00:17:48,780 --> 00:17:51,539
whenever you want to let's say

380
00:17:51,539 --> 00:17:52,140
um

381
00:17:52,140 --> 00:17:54,960
make a trade between ethereum and

382
00:17:54,960 --> 00:17:58,320
Bitcoin you need some Bridge uh that

383
00:17:58,320 --> 00:18:01,200
that takes care of this exchange most of

384
00:18:01,200 --> 00:18:03,559
the time these are web 2 services

385
00:18:03,559 --> 00:18:07,140
decentralized node.js or or JavaScript

386
00:18:07,140 --> 00:18:10,380
or whatever uh they they based on there

387
00:18:10,380 --> 00:18:12,360
is no real

388
00:18:12,360 --> 00:18:13,020
um

389
00:18:13,020 --> 00:18:15,780
ERC for that or standard so everyone

390
00:18:15,780 --> 00:18:17,640
implements their own stuff and that's

391
00:18:17,640 --> 00:18:19,679
why things can go really wrong

392
00:18:19,679 --> 00:18:22,020
because the guys implemented the back

393
00:18:22,020 --> 00:18:24,419
end that was signing the transactions

394
00:18:24,419 --> 00:18:27,840
but uh but they were on two different

395
00:18:27,840 --> 00:18:30,720
blockchains so you could take banana

396
00:18:30,720 --> 00:18:35,039
tokens on a polygon and binance and what

397
00:18:35,039 --> 00:18:37,380
was happening from the attackware point

398
00:18:37,380 --> 00:18:39,600
of view was really simple all the

399
00:18:39,600 --> 00:18:42,679
attacker had to do is just to swap out

400
00:18:42,679 --> 00:18:46,260
the uh the receipt that the back end was

401
00:18:46,260 --> 00:18:48,720
generating because the back-end sign yes

402
00:18:48,720 --> 00:18:51,600
you send me x amount of banana and for

403
00:18:51,600 --> 00:18:54,419
this I gave you the tokens

404
00:18:54,419 --> 00:18:58,500
um but what the developers forgot is to

405
00:18:58,500 --> 00:19:01,320
um to deal with the replay attack and

406
00:19:01,320 --> 00:19:03,720
the attacker just copied from the

407
00:19:03,720 --> 00:19:07,620
blockchain Explorer the the the data and

408
00:19:07,620 --> 00:19:09,419
uh and sent or created another

409
00:19:09,419 --> 00:19:13,919
transaction on BSC binance Network and

410
00:19:13,919 --> 00:19:16,500
they got double the tokens prints are

411
00:19:16,500 --> 00:19:19,380
repeat you had like double amount of of

412
00:19:19,380 --> 00:19:20,580
talk seconds

413
00:19:20,580 --> 00:19:22,980
how we know that the attacker was not

414
00:19:22,980 --> 00:19:25,980
really Advanced is is that the guys were

415
00:19:25,980 --> 00:19:29,280
asking for help in the in the chat from

416
00:19:29,280 --> 00:19:31,799
the developers how to make transactions

417
00:19:31,799 --> 00:19:34,080
and how this works and this and that but

418
00:19:34,080 --> 00:19:36,000
the developers didn't figure out that

419
00:19:36,000 --> 00:19:38,039
that there is an actual hack and the

420
00:19:38,039 --> 00:19:40,679
guys figured it out uh they they

421
00:19:40,679 --> 00:19:44,299
installed maybe I don't know a couple of

422
00:19:44,299 --> 00:19:48,000
uh 100 000 bananas as I remember not not

423
00:19:48,000 --> 00:19:51,900
too much worth maybe 10 15K USD worth

424
00:19:51,900 --> 00:19:55,799
but then some transactions were actually

425
00:19:55,799 --> 00:19:58,440
restored uh there were two two guys

426
00:19:58,440 --> 00:20:01,559
attacking the system one of the guys

427
00:20:01,559 --> 00:20:05,820
returned it because they were clearly uh

428
00:20:05,820 --> 00:20:08,220
no one and and everyone know who they

429
00:20:08,220 --> 00:20:10,740
are and one of them was like okay I give

430
00:20:10,740 --> 00:20:13,140
it back it's better

431
00:20:13,140 --> 00:20:16,200
so it's still on the level where you do

432
00:20:16,200 --> 00:20:19,020
not need to be Advanced to go on a

433
00:20:19,020 --> 00:20:22,799
blockchain uh Explorer but let's see how

434
00:20:22,799 --> 00:20:24,780
it works

435
00:20:24,780 --> 00:20:26,100
um

436
00:20:26,100 --> 00:20:30,179
I will I will try to be uh ask quick as

437
00:20:30,179 --> 00:20:32,600
possible

438
00:20:33,240 --> 00:20:37,820
um so let's say uh for example

439
00:20:39,299 --> 00:20:43,919
we want to uh interact

440
00:20:43,919 --> 00:20:46,740
with the crypto CTF smart contract that

441
00:20:46,740 --> 00:20:48,960
was not the original presentation but

442
00:20:48,960 --> 00:20:51,360
this is now a good example because the

443
00:20:51,360 --> 00:20:53,760
original uh

444
00:20:53,760 --> 00:20:56,039
presentation is on on my

445
00:20:56,039 --> 00:20:59,460
um laptop but that's fine because

446
00:20:59,460 --> 00:21:02,460
cctf is also running on the blockchain

447
00:21:02,460 --> 00:21:06,059
so if you uh go down

448
00:21:06,059 --> 00:21:08,460
here and we look at the blockchain

449
00:21:08,460 --> 00:21:10,559
Explorer Tada that's how the blockchain

450
00:21:10,559 --> 00:21:13,440
exporter looks like it's not uh not

451
00:21:13,440 --> 00:21:15,480
really complicated if you have seen some

452
00:21:15,480 --> 00:21:20,400
crypto systems what you can see here is

453
00:21:20,400 --> 00:21:23,160
the transactions that were sent by the

454
00:21:23,160 --> 00:21:25,880
users you can see who or which address

455
00:21:25,880 --> 00:21:28,740
was sending someone for example

456
00:21:28,740 --> 00:21:31,860
generated a cool address which started

457
00:21:31,860 --> 00:21:34,380
with lead you can generate with the

458
00:21:34,380 --> 00:21:36,120
vanity generator if you want some funny

459
00:21:36,120 --> 00:21:39,659
addresses and you can check out them out

460
00:21:39,659 --> 00:21:43,380
one by one uh if you click on the TX

461
00:21:43,380 --> 00:21:47,340
hash it will show you some details if

462
00:21:47,340 --> 00:21:49,500
you click on see more then you see what

463
00:21:49,500 --> 00:21:52,260
was actually called and uh what I show

464
00:21:52,260 --> 00:21:55,799
you from the banana was very similar so

465
00:21:55,799 --> 00:21:58,080
the guide to Statue copy the the

466
00:21:58,080 --> 00:22:02,460
parameters that were actually generated

467
00:22:02,460 --> 00:22:05,520
by by the the front end and the back end

468
00:22:05,520 --> 00:22:08,400
together so everything was automated for

469
00:22:08,400 --> 00:22:10,980
them they didn't even need to touch

470
00:22:10,980 --> 00:22:12,900
JavaScript or anything

471
00:22:12,900 --> 00:22:15,900
they just had to figure out how to send

472
00:22:15,900 --> 00:22:17,760
the same transaction on another Network

473
00:22:17,760 --> 00:22:20,820
which is not not too not too complicated

474
00:22:20,820 --> 00:22:23,820
if you know how to sign

475
00:22:23,820 --> 00:22:25,200
um

476
00:22:25,200 --> 00:22:29,700
okay so a little uh more information on

477
00:22:29,700 --> 00:22:33,780
this and how you can actually

478
00:22:33,780 --> 00:22:34,559
um

479
00:22:34,559 --> 00:22:36,539
communicate with the smart contract

480
00:22:36,539 --> 00:22:40,020
there are two ways the lucky way is when

481
00:22:40,020 --> 00:22:42,360
the source code is verified that means

482
00:22:42,360 --> 00:22:44,700
that the smart contract original source

483
00:22:44,700 --> 00:22:48,360
code has been shared online and was

484
00:22:48,360 --> 00:22:50,820
uploaded to the Explorer this is a

485
00:22:50,820 --> 00:22:52,799
really nice thing because then then we

486
00:22:52,799 --> 00:22:54,900
we know everything all the functions and

487
00:22:54,900 --> 00:22:56,700
everything we can call

488
00:22:56,700 --> 00:22:59,039
the other way which is the hard way when

489
00:22:59,039 --> 00:23:01,500
the source code is not shared and you

490
00:23:01,500 --> 00:23:03,059
have only the byte code that's when

491
00:23:03,059 --> 00:23:04,740
octopus comes in and your reverse

492
00:23:04,740 --> 00:23:06,600
engineering skill which is a thousand

493
00:23:06,600 --> 00:23:09,000
times harder than than going on the

494
00:23:09,000 --> 00:23:11,520
front end and clicking on read and write

495
00:23:11,520 --> 00:23:15,360
contracts or using remix or or travel to

496
00:23:15,360 --> 00:23:18,299
to write your exploits

497
00:23:18,299 --> 00:23:21,840
so when you want to uh do anything with

498
00:23:21,840 --> 00:23:24,960
the contract you need to know uh What uh

499
00:23:24,960 --> 00:23:29,700
what values uh exist on in the storage

500
00:23:29,700 --> 00:23:31,440
um of the smart contract

501
00:23:31,440 --> 00:23:34,320
you go on a read contract and you can go

502
00:23:34,320 --> 00:23:37,740
through all the all the fields and and

503
00:23:37,740 --> 00:23:39,480
query

504
00:23:39,480 --> 00:23:41,340
um the the information

505
00:23:41,340 --> 00:23:44,700
if you want to query for example the uh

506
00:23:44,700 --> 00:23:49,679
the the flex and uh and um and the

507
00:23:49,679 --> 00:23:51,659
Player points and so on

508
00:23:51,659 --> 00:23:54,960
so it's pretty straightforward it does

509
00:23:54,960 --> 00:23:58,559
not create a transaction it is just

510
00:23:58,559 --> 00:24:02,039
reading and blockchain expert is nice it

511
00:24:02,039 --> 00:24:04,860
is doing it uh for us for free you do

512
00:24:04,860 --> 00:24:09,900
not need to pay but to write and make

513
00:24:09,900 --> 00:24:10,559
um

514
00:24:10,559 --> 00:24:14,039
changes you are you can go to the right

515
00:24:14,039 --> 00:24:18,419
contract and submit the flex for this to

516
00:24:18,419 --> 00:24:22,100
use you need the fox you need a metamask

517
00:24:22,100 --> 00:24:25,679
uh which I do not know if it works on

518
00:24:25,679 --> 00:24:30,179
Safari uh if not uh is it okay if I put

519
00:24:30,179 --> 00:24:33,080
Firefox on it

520
00:24:34,320 --> 00:24:38,220
Okay cool so uh so we will have a fire

521
00:24:38,220 --> 00:24:39,630
folks soon on this machine

522
00:24:39,630 --> 00:24:42,779
[Music]

523
00:24:42,900 --> 00:24:45,179
we are really starting from the from the

524
00:24:45,179 --> 00:24:48,179
very Basics because uh if you if you

525
00:24:48,179 --> 00:24:50,280
want to do the whole thing on a brand

526
00:24:50,280 --> 00:24:52,740
new laptop a brand new device then

527
00:24:52,740 --> 00:24:55,880
that's actually it

528
00:24:56,580 --> 00:24:58,460
yep

529
00:24:58,460 --> 00:25:01,620
and I'm not a Mac User so

530
00:25:01,620 --> 00:25:03,780
that's that's the the real life thing

531
00:25:03,780 --> 00:25:05,039
here

532
00:25:05,039 --> 00:25:05,880
um

533
00:25:05,880 --> 00:25:07,260
so

534
00:25:07,260 --> 00:25:09,900
we will have metamask installed very

535
00:25:09,900 --> 00:25:13,380
soon and then we can connect the

536
00:25:13,380 --> 00:25:16,140
blockchain Explorer to metamask

537
00:25:16,140 --> 00:25:19,799
and uh and then you have the balance uh

538
00:25:19,799 --> 00:25:22,200
you can send the transactions in this

539
00:25:22,200 --> 00:25:26,820
case we have a way uh or a contact in

540
00:25:26,820 --> 00:25:29,159
cctf if someone doesn't have demotic

541
00:25:29,159 --> 00:25:31,380
because it is running on on polygon

542
00:25:31,380 --> 00:25:33,419
chain and motik is the coin which is

543
00:25:33,419 --> 00:25:35,880
needed to pay the fees then you can

544
00:25:35,880 --> 00:25:37,620
message someone and you get some tips

545
00:25:37,620 --> 00:25:39,539
and then you can make the the

546
00:25:39,539 --> 00:25:41,520
transaction on the

547
00:25:41,520 --> 00:25:43,620
on the live net

548
00:25:43,620 --> 00:25:47,700
okay what else uh

549
00:25:47,700 --> 00:25:52,020
remix Dot ethereum.org

550
00:25:52,799 --> 00:25:54,918
um

551
00:25:56,640 --> 00:25:59,940
so why Firefox is getting installed in

552
00:25:59,940 --> 00:26:03,900
the in the background uh I show you the

553
00:26:03,900 --> 00:26:06,480
idea I was talking about

554
00:26:06,480 --> 00:26:10,380
and what what do you think uh do you

555
00:26:10,380 --> 00:26:12,059
think we can

556
00:26:12,059 --> 00:26:13,320
um

557
00:26:13,320 --> 00:26:14,940
we can

558
00:26:14,940 --> 00:26:19,559
create a cryptocurrency token in 10

559
00:26:19,559 --> 00:26:20,700
minutes

560
00:26:20,700 --> 00:26:24,000
raise your hands if you can do this

561
00:26:24,000 --> 00:26:25,980
okay five minutes

562
00:26:25,980 --> 00:26:28,620
one minute

563
00:26:28,620 --> 00:26:31,919
okay okay we will see

564
00:26:31,919 --> 00:26:34,980
um we will uh use an already existing

565
00:26:34,980 --> 00:26:38,700
code because that's what erc20 tokens do

566
00:26:38,700 --> 00:26:42,240
most developers just just copy what

567
00:26:42,240 --> 00:26:45,059
already exists and

568
00:26:45,059 --> 00:26:46,760
um

569
00:26:46,760 --> 00:26:50,658
and and they reuse it

570
00:26:50,820 --> 00:26:54,000
so I quickly created this GitHub

571
00:26:54,000 --> 00:26:56,700
repository before the presentation and I

572
00:26:56,700 --> 00:26:58,200
had to switch

573
00:26:58,200 --> 00:27:00,779
um so you can actually find all the

574
00:27:00,779 --> 00:27:03,840
solidity code that uh I was I was

575
00:27:03,840 --> 00:27:08,100
preparing this is erc20. soul uh so we

576
00:27:08,100 --> 00:27:10,919
will really quickly Implement hack in

577
00:27:10,919 --> 00:27:14,520
the Box uh token

578
00:27:14,520 --> 00:27:18,659
or pack in the Box don't mind that

579
00:27:18,659 --> 00:27:19,200
um

580
00:27:19,200 --> 00:27:21,720
and go through what it does and and what

581
00:27:21,720 --> 00:27:25,260
possible issues uh we can have

582
00:27:25,260 --> 00:27:30,059
so we can you can start the the timer

583
00:27:30,059 --> 00:27:33,740
of one minute

584
00:27:34,799 --> 00:27:37,340
so that's that that's a standard erc20

585
00:27:37,340 --> 00:27:41,220
nobody uh really bothers with that

586
00:27:41,220 --> 00:27:43,620
you need to compile it so so from

587
00:27:43,620 --> 00:27:46,500
solidity you need to turn this into uh

588
00:27:46,500 --> 00:27:49,679
evm compatible bytecode

589
00:27:49,679 --> 00:27:53,100
and it is really nice that in ethereum

590
00:27:53,100 --> 00:27:56,220
ecosystem evm is kind of simple virtual

591
00:27:56,220 --> 00:27:59,580
machine so you can uh just simply deploy

592
00:27:59,580 --> 00:28:02,760
it and then bam you already have the

593
00:28:02,760 --> 00:28:06,480
token in your uh in your browser so we

594
00:28:06,480 --> 00:28:08,580
already have deployed it I guess it was

595
00:28:08,580 --> 00:28:11,880
under a minute uh if you do the same uh

596
00:28:11,880 --> 00:28:15,120
by choosing up there uh the environment

597
00:28:15,120 --> 00:28:18,360
and injected provider that that can be

598
00:28:18,360 --> 00:28:22,080
uh metamask and that can go on any main

599
00:28:22,080 --> 00:28:25,260
chain uh ethereum polygon binance

600
00:28:25,260 --> 00:28:27,360
whatever chain you can you can send the

601
00:28:27,360 --> 00:28:28,980
transactions

602
00:28:28,980 --> 00:28:32,400
and an extra trick uh if you use this

603
00:28:32,400 --> 00:28:34,980
add address option you can insert the

604
00:28:34,980 --> 00:28:37,100
already existing smart contract address

605
00:28:37,100 --> 00:28:40,200
and if you have the code you just insert

606
00:28:40,200 --> 00:28:42,360
the code let's say this would be

607
00:28:42,360 --> 00:28:45,720
actually uh deployed somewhere this code

608
00:28:45,720 --> 00:28:48,960
then I would do the same insert the

609
00:28:48,960 --> 00:28:51,900
solidity file here and use the add

610
00:28:51,900 --> 00:28:55,140
address option to the deployed smart

611
00:28:55,140 --> 00:28:58,919
contract address and then it loads all

612
00:28:58,919 --> 00:29:01,200
the functions for me which then I can

613
00:29:01,200 --> 00:29:04,980
call and I can also read all the uh all

614
00:29:04,980 --> 00:29:08,360
the variables from the storage

615
00:29:08,360 --> 00:29:10,260
so

616
00:29:10,260 --> 00:29:10,980
um

617
00:29:10,980 --> 00:29:14,100
what what what does this code do uh I

618
00:29:14,100 --> 00:29:17,360
will try to make it

619
00:29:17,360 --> 00:29:21,379
larger by zooming

620
00:29:22,799 --> 00:29:26,279
who can help me on how to zoom on Mac

621
00:29:26,279 --> 00:29:28,559
inside the browser

622
00:29:28,559 --> 00:29:32,658
thank you so uh

623
00:29:33,059 --> 00:29:36,120
most of the of the of the cryptocurrency

624
00:29:36,120 --> 00:29:39,240
projects don't really do more than this

625
00:29:39,240 --> 00:29:43,020
so you can be surprised or might not be

626
00:29:43,020 --> 00:29:46,020
surprised actually why we see so many

627
00:29:46,020 --> 00:29:48,299
scams because people can call their

628
00:29:48,299 --> 00:29:50,159
tokens whatever create some fancy

629
00:29:50,159 --> 00:29:52,200
looking website and say oh we have a

630
00:29:52,200 --> 00:29:55,080
token and that's the magic while in

631
00:29:55,080 --> 00:29:57,960
reality they don't really have more than

632
00:29:57,960 --> 00:30:02,039
than what we just did copying a token uh

633
00:30:02,039 --> 00:30:04,799
probably they they figure out the total

634
00:30:04,799 --> 00:30:08,460
Supply which is which is just a variable

635
00:30:08,460 --> 00:30:11,340
in the code and that's the that's the

636
00:30:11,340 --> 00:30:13,440
craziest thing actually about about the

637
00:30:13,440 --> 00:30:15,600
whole Webster blockchain cryptocurrency

638
00:30:15,600 --> 00:30:19,799
word that you write code you define the

639
00:30:19,799 --> 00:30:23,340
your own token Supply and transfer fees

640
00:30:23,340 --> 00:30:25,679
and all the details and you basically

641
00:30:25,679 --> 00:30:27,779
create a currency

642
00:30:27,779 --> 00:30:29,820
it's a question if this currency is

643
00:30:29,820 --> 00:30:33,000
accepted anywhere or not but but it's

644
00:30:33,000 --> 00:30:36,000
really like that you you could uh you

645
00:30:36,000 --> 00:30:40,320
quoted the word around yourself

646
00:30:40,320 --> 00:30:41,460
um

647
00:30:41,460 --> 00:30:44,279
now it's a little bit more zoomed can we

648
00:30:44,279 --> 00:30:46,980
or if you tell me how to do this it's a

649
00:30:46,980 --> 00:30:49,580
bit faster Maybe

650
00:30:49,580 --> 00:30:53,279
ah okay oh that's so simple

651
00:30:53,279 --> 00:30:56,580
it's more simple than i3

652
00:30:56,580 --> 00:30:57,299
um

653
00:30:57,299 --> 00:31:01,860
okay so we have a bunch of constant

654
00:31:01,860 --> 00:31:04,140
variables which Define what the smart

655
00:31:04,140 --> 00:31:06,539
contracts are doing the events are just

656
00:31:06,539 --> 00:31:09,779
giving you some uh some information on

657
00:31:09,779 --> 00:31:12,659
what has been executed uh the mopping is

658
00:31:12,659 --> 00:31:14,760
solidity type of

659
00:31:14,760 --> 00:31:18,059
a specific thing it Maps an address to a

660
00:31:18,059 --> 00:31:21,059
uint or you can map an address to

661
00:31:21,059 --> 00:31:23,960
another mapping which connects together

662
00:31:23,960 --> 00:31:27,840
the address and the number

663
00:31:27,840 --> 00:31:29,940
I don't want to go in too much in the

664
00:31:29,940 --> 00:31:33,360
details but I want to point out one very

665
00:31:33,360 --> 00:31:35,940
important and very very specific thing

666
00:31:35,940 --> 00:31:38,159
which we call single point of failure

667
00:31:38,159 --> 00:31:41,100
and this is the admin account because

668
00:31:41,100 --> 00:31:43,380
everything I told you that there are a

669
00:31:43,380 --> 00:31:45,720
lot of notes it decentralized it is so

670
00:31:45,720 --> 00:31:47,640
nice that that the code is running

671
00:31:47,640 --> 00:31:50,580
everywhere it cannot be stopped and and

672
00:31:50,580 --> 00:31:54,179
all these things but when you write a an

673
00:31:54,179 --> 00:31:56,899
erc20 standard

674
00:31:56,899 --> 00:32:01,080
and and that's what 99 percent kind of

675
00:32:01,080 --> 00:32:04,740
project Implement is uh is a centralized

676
00:32:04,740 --> 00:32:08,899
admin which is one single private key

677
00:32:08,899 --> 00:32:12,419
that uh that is uh that is behind that

678
00:32:12,419 --> 00:32:16,140
so this admin meanwhile I'm I'm trying

679
00:32:16,140 --> 00:32:20,100
to check if uh if we have this Firefox

680
00:32:20,100 --> 00:32:22,200
installed

681
00:32:22,200 --> 00:32:25,580
which I guess we have

682
00:32:29,880 --> 00:32:34,340
ah okay okay it's

683
00:32:37,799 --> 00:32:40,919
and meanwhile we learn to exploit smart

684
00:32:40,919 --> 00:32:43,559
contracts we also learn to use a Mac

685
00:32:43,559 --> 00:32:47,178
I should sell this to Apple I guess

686
00:32:47,399 --> 00:32:49,919
uh okay

687
00:32:49,919 --> 00:32:54,260
pretty simple uh in the add-ons you just

688
00:32:54,260 --> 00:32:56,760
search for

689
00:32:56,760 --> 00:32:59,658
metamask

690
00:33:00,720 --> 00:33:03,899
and you use the one that is actually

691
00:33:03,899 --> 00:33:05,340
verified

692
00:33:05,340 --> 00:33:08,779
uh still not monitored by Mozilla but

693
00:33:08,779 --> 00:33:12,419
there will be a very funny talk very

694
00:33:12,419 --> 00:33:15,480
interesting uh talk tomorrow about how

695
00:33:15,480 --> 00:33:18,679
these scams are working and how people

696
00:33:18,679 --> 00:33:22,260
uh are signing uh transactions they

697
00:33:22,260 --> 00:33:25,140
shouldn't and I really recommend the ZX

698
00:33:25,140 --> 00:33:27,779
talk about that

699
00:33:27,779 --> 00:33:30,539
um so here you can just go through the

700
00:33:30,539 --> 00:33:35,039
menu and create your wallet you type

701
00:33:35,039 --> 00:33:39,260
a secure password which you remember

702
00:33:40,559 --> 00:33:42,960
and of course you never save it

703
00:33:42,960 --> 00:33:44,880
in the browser

704
00:33:44,880 --> 00:33:47,159
if you haven't done this before check

705
00:33:47,159 --> 00:33:48,899
out the video

706
00:33:48,899 --> 00:33:52,440
and never show this to anyone I have to

707
00:33:52,440 --> 00:33:56,480
because that's part of the demo but uh

708
00:33:56,480 --> 00:34:00,120
who used these seed words before raise

709
00:34:00,120 --> 00:34:01,919
your hands please

710
00:34:01,919 --> 00:34:03,480
okay

711
00:34:03,480 --> 00:34:05,880
so what is this

712
00:34:05,880 --> 00:34:08,940
with these words you can restore your uh

713
00:34:08,940 --> 00:34:11,879
wallet on any device where metamask is

714
00:34:11,879 --> 00:34:15,480
installed your Android iPhone uh Mac

715
00:34:15,480 --> 00:34:19,980
ThinkPad whatever you have uh using

716
00:34:19,980 --> 00:34:23,040
the same words so you this is something

717
00:34:23,040 --> 00:34:25,918
you need to keep really secure and not

718
00:34:25,918 --> 00:34:28,619
to hopefully write it on a paper and put

719
00:34:28,619 --> 00:34:31,139
uh put it on your monitor

720
00:34:31,139 --> 00:34:34,619
but maybe to place it in your safe or

721
00:34:34,619 --> 00:34:37,080
save it somewhere super secure

722
00:34:37,080 --> 00:34:40,379
definitely don't uh put it on your on

723
00:34:40,379 --> 00:34:42,540
your desktop

724
00:34:42,540 --> 00:34:45,530
so after after you save this

725
00:34:45,530 --> 00:34:47,820
[Music]

726
00:34:47,820 --> 00:34:52,940
I just securely save it for myself

727
00:34:55,320 --> 00:34:57,660
uh you need to confirm that of course

728
00:34:57,660 --> 00:35:00,839
because uh metamask won't tell you do

729
00:35:00,839 --> 00:35:02,640
that before so we quickly go through

730
00:35:02,640 --> 00:35:03,900
this

731
00:35:03,900 --> 00:35:07,440
Elite asset prepared these are run

732
00:35:07,440 --> 00:35:08,940
onwards

733
00:35:08,940 --> 00:35:12,240
uh which some people actually can

734
00:35:12,240 --> 00:35:14,700
remember there is this brain wallet idea

735
00:35:14,700 --> 00:35:17,280
also which I don't recommend but but a

736
00:35:17,280 --> 00:35:20,640
fun thing to know about that uh that

737
00:35:20,640 --> 00:35:22,800
there are there is some logic you can

738
00:35:22,800 --> 00:35:25,200
build in your head and remember the

739
00:35:25,200 --> 00:35:28,500
words so you don't actually store these

740
00:35:28,500 --> 00:35:30,900
words anywhere physically other than

741
00:35:30,900 --> 00:35:32,400
your brain

742
00:35:32,400 --> 00:35:34,800
but if you forgot it then you might lose

743
00:35:34,800 --> 00:35:37,200
all your cryptocurrencies

744
00:35:37,200 --> 00:35:43,020
uh so uh metamask uh is now able to

745
00:35:43,020 --> 00:35:45,660
interact with the remix ID so I just

746
00:35:45,660 --> 00:35:46,859
open

747
00:35:46,859 --> 00:35:48,500
remix.etherium.org

748
00:35:48,500 --> 00:35:51,359
[Music]

749
00:35:51,359 --> 00:35:54,780
and then I can connect uh

750
00:35:54,780 --> 00:35:56,280
metamask

751
00:35:56,280 --> 00:35:59,099
uh to to remix

752
00:35:59,099 --> 00:36:02,099
through the uh

753
00:36:02,099 --> 00:36:03,900
through the last option which is the

754
00:36:03,900 --> 00:36:06,300
deploy and run transaction and you can

755
00:36:06,300 --> 00:36:08,460
choose the injected provider metamask

756
00:36:08,460 --> 00:36:10,980
then metamask pops up

757
00:36:10,980 --> 00:36:14,040
and you say next you want to connect

758
00:36:14,040 --> 00:36:16,380
account one

759
00:36:16,380 --> 00:36:20,040
connect and then it's done and after

760
00:36:20,040 --> 00:36:23,240
this if we would issue a transaction

761
00:36:23,240 --> 00:36:28,980
then it would mean that we are going on

762
00:36:28,980 --> 00:36:30,720
the on the main chain

763
00:36:30,720 --> 00:36:32,460
we don't have ethereum on this account

764
00:36:32,460 --> 00:36:35,280
but but this is the process

765
00:36:35,280 --> 00:36:39,060
okay uh hopefully this was a really

766
00:36:39,060 --> 00:36:40,859
clear thing you just installed an add-on

767
00:36:40,859 --> 00:36:43,079
you have the remix ID

768
00:36:43,079 --> 00:36:45,420
um and and you can start making

769
00:36:45,420 --> 00:36:48,060
transactions the same process goes with

770
00:36:48,060 --> 00:36:51,180
the Explorer which I explained

771
00:36:51,180 --> 00:36:53,820
okay uh

772
00:36:53,820 --> 00:36:56,160
I think we are a little bit short on

773
00:36:56,160 --> 00:37:02,118
time so I I show you quickly how to uh

774
00:37:02,160 --> 00:37:08,339
how to uh deploy and uh and run

775
00:37:08,339 --> 00:37:10,680
an actual exploit

776
00:37:10,680 --> 00:37:13,320
so

777
00:37:13,320 --> 00:37:16,020
one thing you can do uh if you do not

778
00:37:16,020 --> 00:37:17,640
know anything about cryptocurrency

779
00:37:17,640 --> 00:37:19,500
hacking and that's three you just go

780
00:37:19,500 --> 00:37:21,839
straight for the wallet and you go webto

781
00:37:21,839 --> 00:37:24,839
way you do social engineering and and

782
00:37:24,839 --> 00:37:26,339
the general techniques everyone already

783
00:37:26,339 --> 00:37:29,339
know about you don't need to be a master

784
00:37:29,339 --> 00:37:32,339
of web3 you just steal the private keys

785
00:37:32,339 --> 00:37:35,579
in any ways you can or you make uh you

786
00:37:35,579 --> 00:37:38,099
need to know some web3 though for that

787
00:37:38,099 --> 00:37:41,940
or you you make a website uh where you

788
00:37:41,940 --> 00:37:44,160
um inject malicious JavaScript that

789
00:37:44,160 --> 00:37:47,700
makes uh makes metamos pop up and show

790
00:37:47,700 --> 00:37:50,339
some transaction transactions people

791
00:37:50,339 --> 00:37:53,760
were very likely click on a sign and in

792
00:37:53,760 --> 00:37:55,440
detail this will be explained tomorrow

793
00:37:55,440 --> 00:37:57,480
why and how

794
00:37:57,480 --> 00:38:00,839
uh so we have a an example for a Rand

795
00:38:00,839 --> 00:38:03,180
Transit attack here what is a

796
00:38:03,180 --> 00:38:04,680
re-entrency attack

797
00:38:04,680 --> 00:38:08,000
uh what it does uh this is a very common

798
00:38:08,000 --> 00:38:12,040
uh common issue is

799
00:38:12,040 --> 00:38:15,780
[Music]

800
00:38:15,780 --> 00:38:18,839
is that you call a function

801
00:38:18,839 --> 00:38:20,339
and

802
00:38:20,339 --> 00:38:22,140
you

803
00:38:22,140 --> 00:38:26,640
basically jump out of the execution look

804
00:38:26,640 --> 00:38:27,900
at this line

805
00:38:27,900 --> 00:38:32,040
because this MSG sender.call sends into

806
00:38:32,040 --> 00:38:34,980
the sender address which can be for

807
00:38:34,980 --> 00:38:37,560
example a smart contract and we can say

808
00:38:37,560 --> 00:38:40,440
okay don't continue at the execution but

809
00:38:40,440 --> 00:38:42,420
let's call the same function again

810
00:38:42,420 --> 00:38:43,920
and

811
00:38:43,920 --> 00:38:47,880
you just repeat it until you uh move on

812
00:38:47,880 --> 00:38:49,680
in the execution you remove all the

813
00:38:49,680 --> 00:38:52,200
balances and then in the end you say

814
00:38:52,200 --> 00:38:54,359
okay now I zero my balance but before

815
00:38:54,359 --> 00:38:58,800
that I repeat the course so so this is a

816
00:38:58,800 --> 00:39:02,820
Rand trans example and it is implemented

817
00:39:02,820 --> 00:39:04,680
as an ethereum wall so you can put your

818
00:39:04,680 --> 00:39:06,780
ethereum into the smart contract because

819
00:39:06,780 --> 00:39:08,640
that's a vault and that's what Waltz

820
00:39:08,640 --> 00:39:09,900
does

821
00:39:09,900 --> 00:39:11,460
and

822
00:39:11,460 --> 00:39:16,520
we can have a look at the exploit

823
00:39:23,720 --> 00:39:26,420
so you create another

824
00:39:26,420 --> 00:39:29,390
uh smart contract

825
00:39:29,390 --> 00:39:30,660
[Music]

826
00:39:30,660 --> 00:39:33,900
and this also shows you how to interact

827
00:39:33,900 --> 00:39:37,079
with another contract so let's say the

828
00:39:37,079 --> 00:39:40,619
first example is this Vault it

829
00:39:40,619 --> 00:39:42,900
needs to be compiled first

830
00:39:42,900 --> 00:39:46,260
done and then

831
00:39:46,260 --> 00:39:50,099
what we do is inside our

832
00:39:50,099 --> 00:39:52,980
browser environment we deploy it

833
00:39:52,980 --> 00:39:55,560
and it gets into the deployed contracts

834
00:39:55,560 --> 00:39:56,400
list

835
00:39:56,400 --> 00:39:58,680
we can call the deposit deposit

836
00:39:58,680 --> 00:40:02,700
functions and bump

837
00:40:02,700 --> 00:40:03,900
so

838
00:40:03,900 --> 00:40:09,560
from here we can copy the uh the the

839
00:40:09,560 --> 00:40:12,119
addresses and see all the all the

840
00:40:12,119 --> 00:40:15,359
details but what we actually need is the

841
00:40:15,359 --> 00:40:17,880
is the address of the smart contract you

842
00:40:17,880 --> 00:40:20,339
can also copy it from here and then when

843
00:40:20,339 --> 00:40:23,040
you deploy the the next uh the actual

844
00:40:23,040 --> 00:40:25,079
attacker smart contract that doesn't do

845
00:40:25,079 --> 00:40:29,220
anything else just calls the uh

846
00:40:29,220 --> 00:40:31,920
the the atar vault

847
00:40:31,920 --> 00:40:33,720
and

848
00:40:33,720 --> 00:40:35,640
and when you are called the attack

849
00:40:35,640 --> 00:40:38,520
function it keeps calling it and makes

850
00:40:38,520 --> 00:40:41,940
this uh this uh this attack where you

851
00:40:41,940 --> 00:40:46,680
jump back to the execution so let's

852
00:40:46,680 --> 00:40:49,200
um compile that as well

853
00:40:49,200 --> 00:40:51,119
and

854
00:40:51,119 --> 00:40:52,680
go down

855
00:40:52,680 --> 00:40:56,040
if you want to deploy that then you need

856
00:40:56,040 --> 00:40:58,740
to pass the address and that's the trick

857
00:40:58,740 --> 00:41:01,079
you create an interface that's why we

858
00:41:01,079 --> 00:41:02,880
have in the Constructor this this

859
00:41:02,880 --> 00:41:07,140
interface declaration and with this you

860
00:41:07,140 --> 00:41:08,460
will specify that you want to

861
00:41:08,460 --> 00:41:10,320
communicate with another smart contract

862
00:41:10,320 --> 00:41:12,599
so you can't just communicate from your

863
00:41:12,599 --> 00:41:15,380
metavask with a smart contact you can

864
00:41:15,380 --> 00:41:18,119
communicate between smart contracts as

865
00:41:18,119 --> 00:41:19,619
well

866
00:41:19,619 --> 00:41:21,540
and

867
00:41:21,540 --> 00:41:24,720
basically you you just need to uh fill

868
00:41:24,720 --> 00:41:27,119
uh the Vault with some money and from

869
00:41:27,119 --> 00:41:30,300
the attack you can you can empty it uh

870
00:41:30,300 --> 00:41:33,780
by calling the video function and you

871
00:41:33,780 --> 00:41:37,200
can withdraw more uh than originally a

872
00:41:37,200 --> 00:41:39,780
logic would intend

873
00:41:39,780 --> 00:41:43,740
uh how much time do I still have

874
00:41:43,740 --> 00:41:46,680
ah okay because this was resetted a bit

875
00:41:46,680 --> 00:41:50,460
okay so now I won't click all this

876
00:41:50,460 --> 00:41:54,119
together uh you need to play Maybe cctf

877
00:41:54,119 --> 00:41:57,359
to to do it but that's uh that's a

878
00:41:57,359 --> 00:41:59,640
pretty standard issue we've seen in many

879
00:41:59,640 --> 00:42:02,760
smart contracts and I wanted to talk

880
00:42:02,760 --> 00:42:07,800
about uh a bit rust and the other

881
00:42:07,800 --> 00:42:11,460
um other systems because we don't just

882
00:42:11,460 --> 00:42:17,160
have solidity and erc20 in uh in this

883
00:42:17,160 --> 00:42:20,460
ecosystem but way more fun and way more

884
00:42:20,460 --> 00:42:23,060
possibilities

885
00:42:23,460 --> 00:42:25,380
um I guess that's how I get back to the

886
00:42:25,380 --> 00:42:27,920
slideshow

887
00:42:28,859 --> 00:42:32,700
they eat Cajun uh you can find a link to

888
00:42:32,700 --> 00:42:37,140
this on on the cctf site uh and on my uh

889
00:42:37,140 --> 00:42:41,160
GitHub and uh gitty uh this is a python

890
00:42:41,160 --> 00:42:43,440
tool this is something I don't try now

891
00:42:43,440 --> 00:42:46,260
on Mac because I I might got issues

892
00:42:46,260 --> 00:42:49,260
running python on this Mac but but a

893
00:42:49,260 --> 00:42:53,040
very simple tool and what it does is uh

894
00:42:53,040 --> 00:42:55,920
generating all the all the signatures

895
00:42:55,920 --> 00:42:59,460
that you might need while uh trying to

896
00:42:59,460 --> 00:43:01,260
uh hack and

897
00:43:01,260 --> 00:43:05,819
make or run replay attacks or or send uh

898
00:43:05,819 --> 00:43:08,940
Flex to cctf

899
00:43:08,940 --> 00:43:11,160
so the next topic I wanted to talk about

900
00:43:11,160 --> 00:43:14,880
is uh is substrate and how can you go

901
00:43:14,880 --> 00:43:17,940
deeper because right now uh you can

902
00:43:17,940 --> 00:43:20,460
imagine ethereum as the core system and

903
00:43:20,460 --> 00:43:22,920
even uh the the virtual machine is a

904
00:43:22,920 --> 00:43:24,780
higher level and solidity is the

905
00:43:24,780 --> 00:43:27,359
freaking high level which is a bunch of

906
00:43:27,359 --> 00:43:30,300
JavaScript techish uh stuff together we

907
00:43:30,300 --> 00:43:32,700
generate some kind of bytecode that that

908
00:43:32,700 --> 00:43:34,140
runs there

909
00:43:34,140 --> 00:43:34,920
um

910
00:43:34,920 --> 00:43:39,180
but ethereum is not really easy to uh to

911
00:43:39,180 --> 00:43:40,740
modify so let's say you want to have

912
00:43:40,740 --> 00:43:42,240
your own blockchain and run something

913
00:43:42,240 --> 00:43:44,520
new uh you probably don't want to Fork

914
00:43:44,520 --> 00:43:46,800
ethereum but want to use substrate for

915
00:43:46,800 --> 00:43:49,020
that which provides you the the base

916
00:43:49,020 --> 00:43:51,060
libraries for networking so you will

917
00:43:51,060 --> 00:43:53,819
have lip peer-to-peer on uh on the on

918
00:43:53,819 --> 00:43:55,560
the lowest level which you don't even

919
00:43:55,560 --> 00:43:59,579
need to touch there are some consensus

920
00:43:59,579 --> 00:44:01,980
built into substrate which you can just

921
00:44:01,980 --> 00:44:06,359
uh uh basically choose uh before you

922
00:44:06,359 --> 00:44:08,940
compile all is written in Rust and then

923
00:44:08,940 --> 00:44:12,420
you can use a polar system

924
00:44:12,420 --> 00:44:17,579
uh which uh I will speak about

925
00:44:17,579 --> 00:44:19,319
um and the polar system helps you to

926
00:44:19,319 --> 00:44:22,200
implement whatever uh system you want to

927
00:44:22,200 --> 00:44:25,319
run on your blockchain uh in super short

928
00:44:25,319 --> 00:44:28,319
and and I'm I'm 100 sure this will be

929
00:44:28,319 --> 00:44:31,079
too much information in a minute but uh

930
00:44:31,079 --> 00:44:34,140
I implant this this idea in your head

931
00:44:34,140 --> 00:44:36,180
and you will your head will process it

932
00:44:36,180 --> 00:44:38,400
and maybe tomorrow will wake up and you

933
00:44:38,400 --> 00:44:40,020
will know polka dot

934
00:44:40,020 --> 00:44:43,079
uh so what is happening uh in uh in the

935
00:44:43,079 --> 00:44:46,440
polka dot ecosystem and all this uh all

936
00:44:46,440 --> 00:44:49,800
this cross chain consensus uh xcmp

937
00:44:49,800 --> 00:44:53,099
mechanism words is that now we are able

938
00:44:53,099 --> 00:44:56,640
to send messages between uh blockchains

939
00:44:56,640 --> 00:45:00,000
if they implement xcmp or if they

940
00:45:00,000 --> 00:45:03,359
connect together uh through through the

941
00:45:03,359 --> 00:45:08,339
uh polka dot uh polets or or modules

942
00:45:08,339 --> 00:45:10,200
um so there are there is this photo

943
00:45:10,200 --> 00:45:13,079
chain system uh which these are these

944
00:45:13,079 --> 00:45:15,060
are all of them are very hackable points

945
00:45:15,060 --> 00:45:16,619
so that's why I'm talking about that

946
00:45:16,619 --> 00:45:18,720
this these are really interesting points

947
00:45:18,720 --> 00:45:21,240
which uh haven't been discovered too

948
00:45:21,240 --> 00:45:23,400
much because rust is getting hot and

949
00:45:23,400 --> 00:45:25,319
polkadot is also getting hot and and

950
00:45:25,319 --> 00:45:27,599
these are the parts of the system that I

951
00:45:27,599 --> 00:45:31,140
think need way more uh attention so you

952
00:45:31,140 --> 00:45:32,940
have a relay chain which is in this case

953
00:45:32,940 --> 00:45:36,000
polkadot or kuzama they do the same they

954
00:45:36,000 --> 00:45:39,000
they provide security uh for the whole

955
00:45:39,000 --> 00:45:42,599
uh whole network and you can create your

956
00:45:42,599 --> 00:45:45,300
own power chain get on the auctions and

957
00:45:45,300 --> 00:45:47,099
and connect to it then you will have

958
00:45:47,099 --> 00:45:49,400
some shared security

959
00:45:49,400 --> 00:45:54,240
okay uh how do we get inside this how do

960
00:45:54,240 --> 00:45:57,960
we uh connect to to that system and

961
00:45:57,960 --> 00:46:01,140
where do we uh test anyways so which I

962
00:46:01,140 --> 00:46:04,680
mentioned is is the whole ecosystem and

963
00:46:04,680 --> 00:46:07,500
it is based on substrate and substrate

964
00:46:07,500 --> 00:46:11,400
has this uh runtime and executive mode

965
00:46:11,400 --> 00:46:14,099
which you don't even need to touch for

966
00:46:14,099 --> 00:46:17,160
the start but the runtime modules which

967
00:46:17,160 --> 00:46:19,380
is the frame system that's where you can

968
00:46:19,380 --> 00:46:21,780
actually insert your pallets and if you

969
00:46:21,780 --> 00:46:24,020
have a look at the chaos scope project

970
00:46:24,020 --> 00:46:26,940
that's uh that's a palette that will

971
00:46:26,940 --> 00:46:31,319
send all the uh fuzzing and those and

972
00:46:31,319 --> 00:46:33,839
and all this kind of General

973
00:46:33,839 --> 00:46:35,060
um

974
00:46:35,060 --> 00:46:38,280
ethics to the system and you can Tinker

975
00:46:38,280 --> 00:46:40,619
with it and figure out if a project that

976
00:46:40,619 --> 00:46:43,740
is based on substrate has some issues

977
00:46:43,740 --> 00:46:46,500
and it helps you to figure out also how

978
00:46:46,500 --> 00:46:49,560
to uh exploit them

979
00:46:49,560 --> 00:46:53,099
um so chaos palette is one way to hack a

980
00:46:53,099 --> 00:46:55,560
substrate uh substrate you get from

981
00:46:55,560 --> 00:46:58,859
substrate IO you can get some some other

982
00:46:58,859 --> 00:47:01,140
ideas from the how not to build a

983
00:47:01,140 --> 00:47:05,760
palette and see what people uh Miss

984
00:47:05,760 --> 00:47:08,520
and we got to the point where we are

985
00:47:08,520 --> 00:47:10,500
back to the smart contract level and in

986
00:47:10,500 --> 00:47:12,660
this ecosystem it's called Inc which is

987
00:47:12,660 --> 00:47:15,119
a palette which implements wasn't and

988
00:47:15,119 --> 00:47:18,420
wasn't is the web assembly

989
00:47:18,420 --> 00:47:21,540
um execution environment where you can

990
00:47:21,540 --> 00:47:25,380
run your byte code which you can also uh

991
00:47:25,380 --> 00:47:29,480
write in or compile from rust

992
00:47:30,060 --> 00:47:34,680
for uh for the Ink Smart contracts

993
00:47:34,680 --> 00:47:36,720
um you need to have three things

994
00:47:36,720 --> 00:47:39,720
basically there is a command substrate

995
00:47:39,720 --> 00:47:43,140
substrate contracts node that actually a

996
00:47:43,140 --> 00:47:45,480
substrate node with the with the ink

997
00:47:45,480 --> 00:47:49,020
ball at inside you can just run that you

998
00:47:49,020 --> 00:47:51,420
can use polka.js you install the same

999
00:47:51,420 --> 00:47:54,619
way as metamask it just looks different

1000
00:47:54,619 --> 00:47:58,140
I mean for the uh for the start of it's

1001
00:47:58,140 --> 00:48:00,540
it's in depth it's super different but

1002
00:48:00,540 --> 00:48:02,760
uh for the beginning you will just see

1003
00:48:02,760 --> 00:48:05,040
another wallet then you can interact

1004
00:48:05,040 --> 00:48:07,980
with your local node and then contracts

1005
00:48:07,980 --> 00:48:11,579
UI is basically Dynamics in this uh in

1006
00:48:11,579 --> 00:48:14,400
this environment and you can look at the

1007
00:48:14,400 --> 00:48:17,220
link at the bottom to see what are the

1008
00:48:17,220 --> 00:48:19,579
actual differences performance security

1009
00:48:19,579 --> 00:48:23,040
actually most of the issues uh that

1010
00:48:23,040 --> 00:48:25,079
exist in solidity have been already

1011
00:48:25,079 --> 00:48:28,800
fixed in ink and we have haven't done so

1012
00:48:28,800 --> 00:48:31,440
many ink audits so it's an actual

1013
00:48:31,440 --> 00:48:32,819
challenge if you want to do something

1014
00:48:32,819 --> 00:48:35,099
hard then then this is a very good

1015
00:48:35,099 --> 00:48:38,460
starting point because this is a not yet

1016
00:48:38,460 --> 00:48:40,680
uncovered area we know a hell a lot

1017
00:48:40,680 --> 00:48:44,160
about solidity and its issues but we do

1018
00:48:44,160 --> 00:48:47,339
not know so much about ink and this is

1019
00:48:47,339 --> 00:48:50,220
uh kind of spilling the tea information

1020
00:48:50,220 --> 00:48:52,859
here because because there is a lot of

1021
00:48:52,859 --> 00:48:55,859
interesting stuff going on

1022
00:48:55,859 --> 00:48:56,420
um

1023
00:48:56,420 --> 00:49:00,619
what uh web3 is not meant to be uh

1024
00:49:00,619 --> 00:49:03,780
that's important to mention is this is

1025
00:49:03,780 --> 00:49:06,000
not the the pump and dumb game which you

1026
00:49:06,000 --> 00:49:08,760
see the pump and dump uh and and all the

1027
00:49:08,760 --> 00:49:11,220
racquels are what I saw at the beginning

1028
00:49:11,220 --> 00:49:13,380
that some people just

1029
00:49:13,380 --> 00:49:15,960
um just make some very simple uh quote

1030
00:49:15,960 --> 00:49:17,880
they copy from someone and make some

1031
00:49:17,880 --> 00:49:20,880
marketing and a news and then people buy

1032
00:49:20,880 --> 00:49:23,520
and they dump it so in short this is

1033
00:49:23,520 --> 00:49:25,200
what is happening technically in the

1034
00:49:25,200 --> 00:49:27,119
background that that they just pay some

1035
00:49:27,119 --> 00:49:29,460
guys 510k for deploying the contract and

1036
00:49:29,460 --> 00:49:31,859
and maybe giving their face that that

1037
00:49:31,859 --> 00:49:33,960
they they made a project

1038
00:49:33,960 --> 00:49:36,240
but that's that's really not what the

1039
00:49:36,240 --> 00:49:38,400
actual value is so please be aware of

1040
00:49:38,400 --> 00:49:41,700
all these scams

1041
00:49:41,700 --> 00:49:43,140
so

1042
00:49:43,140 --> 00:49:45,660
about scams

1043
00:49:45,660 --> 00:49:49,680
um this is how uh the transaction in

1044
00:49:49,680 --> 00:49:52,800
metamask Works uh I know what this is

1045
00:49:52,800 --> 00:49:54,599
but I really wonder if you can figure

1046
00:49:54,599 --> 00:49:57,180
this out what is happening when you see

1047
00:49:57,180 --> 00:49:58,500
this because

1048
00:49:58,500 --> 00:50:00,900
that's what the standard metamask user

1049
00:50:00,900 --> 00:50:03,720
sees and this is a freaking big issue uh

1050
00:50:03,720 --> 00:50:06,540
right now and there are a lot of social

1051
00:50:06,540 --> 00:50:09,000
engineering and phishing attacks because

1052
00:50:09,000 --> 00:50:11,460
the users do not know but they are

1053
00:50:11,460 --> 00:50:13,440
actually signing and you can create a

1054
00:50:13,440 --> 00:50:16,560
website where uh you put together some

1055
00:50:16,560 --> 00:50:19,500
transactions which actually uh instruct

1056
00:50:19,500 --> 00:50:23,300
the blockchain to uh send the nfts or

1057
00:50:23,300 --> 00:50:25,859
cryptocurrency uh to the attackers

1058
00:50:25,859 --> 00:50:29,099
wallet and the user will just see that

1059
00:50:29,099 --> 00:50:32,520
oh some byte code uh legit looking

1060
00:50:32,520 --> 00:50:34,980
website and they will

1061
00:50:34,980 --> 00:50:37,680
probably confirm it not all the

1062
00:50:37,680 --> 00:50:39,720
attackers are bright so I just leave it

1063
00:50:39,720 --> 00:50:41,760
as a joke that they they have the same

1064
00:50:41,760 --> 00:50:44,520
issues which we saw on uh web 2 they are

1065
00:50:44,520 --> 00:50:47,819
not really able to write and and uh they

1066
00:50:47,819 --> 00:50:49,920
they make the same same thing so so

1067
00:50:49,920 --> 00:50:53,640
there is nothing new regarding that

1068
00:50:53,640 --> 00:50:56,760
Advanced Techniques if you want to uh go

1069
00:50:56,760 --> 00:50:59,099
really deep uh these are the topics I

1070
00:50:59,099 --> 00:51:02,700
recommend uh to look into uh if you are

1071
00:51:02,700 --> 00:51:05,099
working with solidity that's uh this

1072
00:51:05,099 --> 00:51:06,900
interesting

1073
00:51:06,900 --> 00:51:09,059
um topic is the contract hacking the

1074
00:51:09,059 --> 00:51:11,940
proxy contract hacking because at the

1075
00:51:11,940 --> 00:51:15,000
beginning I said that smart contracts

1076
00:51:15,000 --> 00:51:18,839
are immutable but if you uh build a

1077
00:51:18,839 --> 00:51:22,260
smart contract that uh that that is

1078
00:51:22,260 --> 00:51:24,240
proxying all the transactions to another

1079
00:51:24,240 --> 00:51:26,880
one then you can replace the reference

1080
00:51:26,880 --> 00:51:30,180
to to the storage uh and the logic and

1081
00:51:30,180 --> 00:51:32,339
then you can basically do anything after

1082
00:51:32,339 --> 00:51:34,800
this this is kind of a hack which is

1083
00:51:34,800 --> 00:51:38,280
implemented in many projects to to be

1084
00:51:38,280 --> 00:51:40,559
able to fix some issues but this is the

1085
00:51:40,559 --> 00:51:42,960
heckish way to to solve issues in

1086
00:51:42,960 --> 00:51:46,020
ethereum and there are some really funky

1087
00:51:46,020 --> 00:51:48,839
libraries for that which we know they

1088
00:51:48,839 --> 00:51:51,119
had issues and we still know that they

1089
00:51:51,119 --> 00:51:54,000
still have some issues uh so again some

1090
00:51:54,000 --> 00:51:55,980
spilled tea

1091
00:51:55,980 --> 00:51:58,920
um and if you want to go into a very

1092
00:51:58,920 --> 00:52:03,420
interesting part uh of of the of the

1093
00:52:03,420 --> 00:52:04,500
um

1094
00:52:04,500 --> 00:52:06,780
ethereum where you don't have the source

1095
00:52:06,780 --> 00:52:09,180
code then reverse engineering and using

1096
00:52:09,180 --> 00:52:11,520
octopus can reveal many things because

1097
00:52:11,520 --> 00:52:13,559
there are very few people who are

1098
00:52:13,559 --> 00:52:15,240
actually looking into smart contracts

1099
00:52:15,240 --> 00:52:18,359
and vulnerabilities uh in in the system

1100
00:52:18,359 --> 00:52:20,819
that are live which we don't have the

1101
00:52:20,819 --> 00:52:23,700
smart code for but still there are many

1102
00:52:23,700 --> 00:52:27,200
patterns that can be uh that can be

1103
00:52:27,200 --> 00:52:30,839
found and also exploited you might need

1104
00:52:30,839 --> 00:52:34,319
some assembly knowledge but evm assembly

1105
00:52:34,319 --> 00:52:37,079
is not as complicated as you might think

1106
00:52:37,079 --> 00:52:39,720
uh constances are network attacks that's

1107
00:52:39,720 --> 00:52:42,119
the the actual hard part where you would

1108
00:52:42,119 --> 00:52:45,540
need math finally

1109
00:52:45,540 --> 00:52:47,780
flash loan attacks

1110
00:52:47,780 --> 00:52:50,760
it's also it's it's not just related to

1111
00:52:50,760 --> 00:52:54,140
solidity but that's a general uh issue

1112
00:52:54,140 --> 00:52:58,380
uh in it it is uh it is a an attack

1113
00:52:58,380 --> 00:53:01,319
where you a flash loan is not an attack

1114
00:53:01,319 --> 00:53:03,420
itself it is the flashlight which

1115
00:53:03,420 --> 00:53:06,000
implements uh a quick

1116
00:53:06,000 --> 00:53:09,660
um transaction inside one block time and

1117
00:53:09,660 --> 00:53:11,700
you make the attack in one transaction

1118
00:53:11,700 --> 00:53:13,559
and you take the money and if the the

1119
00:53:13,559 --> 00:53:16,800
logic is flowed then you take more money

1120
00:53:16,800 --> 00:53:19,260
out of the loan or not or do not pay

1121
00:53:19,260 --> 00:53:22,260
back the loan but but keep the keep the

1122
00:53:22,260 --> 00:53:24,839
tokens or keep more

1123
00:53:24,839 --> 00:53:27,300
um all the logic bugs you can imagine uh

1124
00:53:27,300 --> 00:53:29,099
minor extracted value and I really

1125
00:53:29,099 --> 00:53:31,800
recommend reading this this is a latest

1126
00:53:31,800 --> 00:53:34,740
uh attack or one of the latest attack

1127
00:53:34,740 --> 00:53:38,059
which is more deep level on how ethereum

1128
00:53:38,059 --> 00:53:41,520
uh blocks our mind and some people

1129
00:53:41,520 --> 00:53:45,480
figured out if you follow a specific

1130
00:53:45,480 --> 00:53:50,160
uh pattern in in the timestamp then you

1131
00:53:50,160 --> 00:53:53,400
will get uh mind more likely than the

1132
00:53:53,400 --> 00:53:56,280
honest Miners and there is no check or

1133
00:53:56,280 --> 00:53:58,380
no fix right now for ethereum and some

1134
00:53:58,380 --> 00:54:00,300
miners are exploiting it already for

1135
00:54:00,300 --> 00:54:02,880
nearly I think one and a half two years

1136
00:54:02,880 --> 00:54:04,980
and this is very interesting because you

1137
00:54:04,980 --> 00:54:07,140
can cheat mining in a way where you

1138
00:54:07,140 --> 00:54:10,260
don't get uh slashed or you don't get uh

1139
00:54:10,260 --> 00:54:13,280
any penalty

1140
00:54:13,280 --> 00:54:17,700
so maybe it was a lot of information but

1141
00:54:17,700 --> 00:54:22,200
I hope you liked uh what you saw you can

1142
00:54:22,200 --> 00:54:25,500
find me here in front of the main stage

1143
00:54:25,500 --> 00:54:29,520
if you have questions uh you can find uh

1144
00:54:29,520 --> 00:54:33,119
find me anytime uh if you need any uh

1145
00:54:33,119 --> 00:54:36,359
links or whatever you can uh message me

1146
00:54:36,359 --> 00:54:40,859
on on Matrix or Twitter or in the cctf

1147
00:54:40,859 --> 00:54:42,960
room or if you need some audits then you

1148
00:54:42,960 --> 00:54:45,780
can you can also find us

1149
00:54:45,780 --> 00:54:48,800
um so thank you very much

1150
00:54:53,579 --> 00:54:55,140
thank you very much

1151
00:54:55,140 --> 00:54:56,760
um again all the slides will be uploaded

1152
00:54:56,760 --> 00:54:58,800
today tomorrow or by Day After Tomorrow

1153
00:54:58,800 --> 00:55:00,960
the latest so if you miss anything you

1154
00:55:00,960 --> 00:55:03,059
can always just check it out online uh

1155
00:55:03,059 --> 00:55:05,099
we've got a couple of questions

1156
00:55:05,099 --> 00:55:07,920
good following check effect interaction

1157
00:55:07,920 --> 00:55:10,079
suffice in preventing most of the

1158
00:55:10,079 --> 00:55:13,400
solidity pitfalls

1159
00:55:16,339 --> 00:55:21,480
in short uh no because uh there are very

1160
00:55:21,480 --> 00:55:24,960
very specific

1161
00:55:24,960 --> 00:55:29,160
um things how solidity was developed and

1162
00:55:29,160 --> 00:55:31,260
you can't uh can't just solve these

1163
00:55:31,260 --> 00:55:34,020
issues by uh by some some higher level

1164
00:55:34,020 --> 00:55:37,680
logic so you you need to make sure that

1165
00:55:37,680 --> 00:55:40,380
all the consensus and all the lawyer or

1166
00:55:40,380 --> 00:55:43,260
lower layers in uh in solidity match

1167
00:55:43,260 --> 00:55:45,960
other transactions speaking not just

1168
00:55:45,960 --> 00:55:48,240
about the guest fees but all the all the

1169
00:55:48,240 --> 00:55:50,819
consensus logic

1170
00:55:50,819 --> 00:55:52,920
okay

1171
00:55:52,920 --> 00:55:54,900
um and the second question could you

1172
00:55:54,900 --> 00:55:57,059
share some example resources on how a

1173
00:55:57,059 --> 00:55:58,980
newbie or someone who's new to this can

1174
00:55:58,980 --> 00:56:02,579
learn to audit smart contracts

1175
00:56:02,579 --> 00:56:03,359
um

1176
00:56:03,359 --> 00:56:05,700
this talk was meant to be something like

1177
00:56:05,700 --> 00:56:08,640
that uh even though I wanted to continue

1178
00:56:08,640 --> 00:56:12,660
my talk from besides Budapest uh you can

1179
00:56:12,660 --> 00:56:16,319
I think find it on YouTube uh this is a

1180
00:56:16,319 --> 00:56:19,260
somewhat more simple version of of this

1181
00:56:19,260 --> 00:56:22,800
talk I just added more topics and a

1182
00:56:22,800 --> 00:56:25,680
little bit more advanced information but

1183
00:56:25,680 --> 00:56:28,559
I think uh I think you can find a lot of

1184
00:56:28,559 --> 00:56:31,920
information on how to hack solidity so

1185
00:56:31,920 --> 00:56:34,079
when you want to get into smart contract

1186
00:56:34,079 --> 00:56:36,059
auditing I recommend starting with

1187
00:56:36,059 --> 00:56:37,740
solidity and if you want to learn

1188
00:56:37,740 --> 00:56:40,079
solidity that's not the newest though

1189
00:56:40,079 --> 00:56:43,920
but crypto zombies uh is a is a very

1190
00:56:43,920 --> 00:56:45,559
good tutorial I think it's

1191
00:56:45,559 --> 00:56:47,839
cryptozombies.io

1192
00:56:47,839 --> 00:56:50,880
and you just go through the tutorial you

1193
00:56:50,880 --> 00:56:54,240
learn solidity on a basic level you then

1194
00:56:54,240 --> 00:56:55,800
you will understand the code and what's

1195
00:56:55,800 --> 00:56:57,900
happening and then you can move on with

1196
00:56:57,900 --> 00:57:00,119
the exploitation techniques

1197
00:57:00,119 --> 00:57:03,720
all right thank you I think is there any

1198
00:57:03,720 --> 00:57:07,819
more questions from the crowd no more

