1
00:00:06,680 --> 00:00:09,120
hello everyone

2
00:00:09,120 --> 00:00:10,200
um

3
00:00:10,200 --> 00:00:12,719
what would you think if I told you that

4
00:00:12,719 --> 00:00:15,000
it is possible to stealthily create

5
00:00:15,000 --> 00:00:19,020
invisible accounts and win the systems

6
00:00:19,020 --> 00:00:21,060
hi I'm Sebastian Castro and today we're

7
00:00:21,060 --> 00:00:23,880
gonna be discussing uh this question

8
00:00:23,880 --> 00:00:26,460
with this research called suborner a

9
00:00:26,460 --> 00:00:27,720
Windows bribery for invisible

10
00:00:27,720 --> 00:00:29,099
persistence

11
00:00:29,099 --> 00:00:31,560
I'm super excited to be here this is a

12
00:00:31,560 --> 00:00:34,620
research I released two weeks ago in Las

13
00:00:34,620 --> 00:00:37,559
Vegas at black hat and today I am

14
00:00:37,559 --> 00:00:40,320
expecting to share more details about

15
00:00:40,320 --> 00:00:42,600
this new attack

16
00:00:42,600 --> 00:00:45,719
so I hope you enjoyed this talk as much

17
00:00:45,719 --> 00:00:47,280
as I do

18
00:00:47,280 --> 00:00:49,440
so this is a little about me

19
00:00:49,440 --> 00:00:51,480
um infosec nerd I've been working in the

20
00:00:51,480 --> 00:00:53,460
information security field for about 10

21
00:00:53,460 --> 00:00:54,660
years

22
00:00:54,660 --> 00:00:56,219
um terrible of Microsoft Paint you will

23
00:00:56,219 --> 00:00:58,379
notice that later but I use it to

24
00:00:58,379 --> 00:01:00,719
explain myself better

25
00:01:00,719 --> 00:01:02,640
um I'm doing my PhD in Computer Sciences

26
00:01:02,640 --> 00:01:04,920
and also I'm working currently with the

27
00:01:04,920 --> 00:01:08,640
product Security Office R D team at AMD

28
00:01:08,640 --> 00:01:11,100
and I have presented before different

29
00:01:11,100 --> 00:01:13,320
conferences like black hat besides Derby

30
00:01:13,320 --> 00:01:17,220
Cannon other talks other conferences

31
00:01:17,220 --> 00:01:19,560
this is a really little disclaimer and

32
00:01:19,560 --> 00:01:23,340
this is a research that uh belongs to me

33
00:01:23,340 --> 00:01:25,979
it not it has nothing to do with any of

34
00:01:25,979 --> 00:01:28,020
my responsibilities with my current

35
00:01:28,020 --> 00:01:31,259
employers and everybody everybody does

36
00:01:31,259 --> 00:01:33,780
not necessarily represent my employer's

37
00:01:33,780 --> 00:01:35,900
ideas

38
00:01:35,900 --> 00:01:38,460
acknowledgment uh thank you for everyone

39
00:01:38,460 --> 00:01:41,040
that supported me family and friends uh

40
00:01:41,040 --> 00:01:42,900
researchers that have contributed to

41
00:01:42,900 --> 00:01:46,320
this area that for sure has helped me to

42
00:01:46,320 --> 00:01:48,119
be here

43
00:01:48,119 --> 00:01:50,100
um especially in the people that have a

44
00:01:50,100 --> 00:01:52,979
lot of mimikatz by the impact team the

45
00:01:52,979 --> 00:01:55,560
Microsoft team have been discussing uh

46
00:01:55,560 --> 00:01:57,899
this attack with Microsoft incident

47
00:01:57,899 --> 00:01:59,159
response team

48
00:01:59,159 --> 00:02:00,960
then the stack Overflow of course and

49
00:02:00,960 --> 00:02:03,720
the infosec community

50
00:02:03,720 --> 00:02:06,719
all right so uh this is going to be the

51
00:02:06,719 --> 00:02:08,639
agenda of the talk

52
00:02:08,639 --> 00:02:11,940
first of all I would like to I would

53
00:02:11,940 --> 00:02:14,040
like you to understand exactly why I

54
00:02:14,040 --> 00:02:16,379
believe this research is important and

55
00:02:16,379 --> 00:02:18,540
why I decided to start

56
00:02:18,540 --> 00:02:20,879
This research of trying to support

57
00:02:20,879 --> 00:02:23,160
Windows

58
00:02:23,160 --> 00:02:24,900
after that I would like to explain you

59
00:02:24,900 --> 00:02:27,660
what is this a new attack what it's all

60
00:02:27,660 --> 00:02:29,819
about and share some details about the

61
00:02:29,819 --> 00:02:32,459
attack itself

62
00:02:32,459 --> 00:02:33,780
um in the middle of the presentation

63
00:02:33,780 --> 00:02:36,660
I'll probably deep dive the details of

64
00:02:36,660 --> 00:02:40,020
how I ended up finding a way to create

65
00:02:40,020 --> 00:02:42,420
some uh let's say a

66
00:02:42,420 --> 00:02:45,420
yeah this is kind of stealthy accounts

67
00:02:45,420 --> 00:02:47,220
um I'm planning to do later uh live

68
00:02:47,220 --> 00:02:49,680
demonstration against the latest Windows

69
00:02:49,680 --> 00:02:52,680
11 system I have just updated it like 30

70
00:02:52,680 --> 00:02:55,680
minutes ago so I'm planning to do a live

71
00:02:55,680 --> 00:02:57,360
demonstration I like I like the more

72
00:02:57,360 --> 00:02:59,280
like you know the video so

73
00:02:59,280 --> 00:03:01,739
hopefully it's going to be uh been good

74
00:03:01,739 --> 00:03:03,180
and after that we're going to discuss

75
00:03:03,180 --> 00:03:06,000
about what's next for this attack

76
00:03:06,000 --> 00:03:09,120
all right so let's start it so let's

77
00:03:09,120 --> 00:03:11,040
talk about first why

78
00:03:11,040 --> 00:03:14,700
I decided to start to start this journey

79
00:03:14,700 --> 00:03:17,760
so back in the day like 2007 when I

80
00:03:17,760 --> 00:03:19,379
wanted to about to become like a lead

81
00:03:19,379 --> 00:03:21,060
hacker when I was starting pretty much

82
00:03:21,060 --> 00:03:23,700
one of the very first Google queries I

83
00:03:23,700 --> 00:03:26,819
did was how to create an invisible user

84
00:03:26,819 --> 00:03:28,860
on Windows

85
00:03:28,860 --> 00:03:29,819
um

86
00:03:29,819 --> 00:03:32,879
and despite of trying so hard to find a

87
00:03:32,879 --> 00:03:34,860
way to you know to create an invisible

88
00:03:34,860 --> 00:03:37,920
account I couldn't find

89
00:03:37,920 --> 00:03:40,140
something that actually helped me out to

90
00:03:40,140 --> 00:03:42,360
create an invisible account

91
00:03:42,360 --> 00:03:45,480
15 year later years later if you do the

92
00:03:45,480 --> 00:03:47,879
same query in Google you'll get around

93
00:03:47,879 --> 00:03:51,239
for 439 Million results

94
00:03:51,239 --> 00:03:53,700
so ideally you respect okay probably

95
00:03:53,700 --> 00:03:55,860
someone has found a way to create

96
00:03:55,860 --> 00:03:57,599
invisible accounts

97
00:03:57,599 --> 00:04:00,540
so yeah let me show you some of the main

98
00:04:00,540 --> 00:04:03,599
the principle the posts that do the

99
00:04:03,599 --> 00:04:04,739
answers of these questions that you will

100
00:04:04,739 --> 00:04:05,879
find in Google

101
00:04:05,879 --> 00:04:09,480
so this is a post from uh the windows

102
00:04:09,480 --> 00:04:12,480
Club where someone is claiming that you

103
00:04:12,480 --> 00:04:14,519
can create a hidden administrator

104
00:04:14,519 --> 00:04:17,279
account by creating these bad files so

105
00:04:17,279 --> 00:04:19,380
everyone that knows a little about like

106
00:04:19,380 --> 00:04:20,940
Windows knows that actually this does

107
00:04:20,940 --> 00:04:23,340
not create an invisible account right so

108
00:04:23,340 --> 00:04:25,500
probably this is not the best way to do

109
00:04:25,500 --> 00:04:26,400
it

110
00:04:26,400 --> 00:04:29,040
what about this

111
00:04:29,040 --> 00:04:31,680
um apparently someone else is trying to

112
00:04:31,680 --> 00:04:33,419
figure out a way to create invisible

113
00:04:33,419 --> 00:04:36,479
account as well and in this case this

114
00:04:36,479 --> 00:04:38,460
user wants to create an administrator

115
00:04:38,460 --> 00:04:40,080
account hidden

116
00:04:40,080 --> 00:04:41,520
right

117
00:04:41,520 --> 00:04:43,919
and then we see that

118
00:04:43,919 --> 00:04:46,860
um a 10 years awarded Windows MVP says

119
00:04:46,860 --> 00:04:50,100
that he only knows two ways to create

120
00:04:50,100 --> 00:04:53,280
invisible accounts and the wind systems

121
00:04:53,280 --> 00:04:56,160
and apparently they only are hidden from

122
00:04:56,160 --> 00:04:58,919
the sign in the screen which is not

123
00:04:58,919 --> 00:05:01,940
ideal right

124
00:05:02,160 --> 00:05:05,400
in a more Cooperative perspective if we

125
00:05:05,400 --> 00:05:08,699
think about the my tree attack framework

126
00:05:08,699 --> 00:05:12,419
that covers 19 persistence techniques

127
00:05:12,419 --> 00:05:14,820
that I have classified as the identity

128
00:05:14,820 --> 00:05:18,060
manipulation at and external implants

129
00:05:18,060 --> 00:05:21,120
and none of them actually refer to ways

130
00:05:21,120 --> 00:05:23,880
to create invisible accounts so let me

131
00:05:23,880 --> 00:05:26,039
show you I have classified this 19

132
00:05:26,039 --> 00:05:28,199
persistence techniques as identity

133
00:05:28,199 --> 00:05:30,240
manipulation which has to do pretty much

134
00:05:30,240 --> 00:05:32,759
of modifying the identities that are

135
00:05:32,759 --> 00:05:35,039
being used in an operating system on any

136
00:05:35,039 --> 00:05:37,320
piece of software

137
00:05:37,320 --> 00:05:38,639
um you know in this case they're

138
00:05:38,639 --> 00:05:40,680
referring to account manipulation create

139
00:05:40,680 --> 00:05:42,479
accounts and these embellied accounts

140
00:05:42,479 --> 00:05:44,280
which involve attacks that are from are

141
00:05:44,280 --> 00:05:47,039
familiar to all of us like golden ticket

142
00:05:47,039 --> 00:05:49,860
silver ticket simply creating a new

143
00:05:49,860 --> 00:05:51,780
account and things like that

144
00:05:51,780 --> 00:05:55,740
and there are a whole bunch of different

145
00:05:55,740 --> 00:05:57,300
persistence techniques that are

146
00:05:57,300 --> 00:05:59,820
referring to external implants that

147
00:05:59,820 --> 00:06:02,759
actually require to install an

148
00:06:02,759 --> 00:06:04,620
additional software to the

149
00:06:04,620 --> 00:06:07,320
to the victim so it can be you know

150
00:06:07,320 --> 00:06:10,080
batching uh any something in the race we

151
00:06:10,080 --> 00:06:12,300
created a new service uh even

152
00:06:12,300 --> 00:06:14,160
compromising the you know firmware

153
00:06:14,160 --> 00:06:17,520
things like that so it's additional for

154
00:06:17,520 --> 00:06:20,039
software right so from all of these

155
00:06:20,039 --> 00:06:22,199
persistence techniques if we take a look

156
00:06:22,199 --> 00:06:24,419
at a unique procedures that are being

157
00:06:24,419 --> 00:06:26,039
described they might throw attack

158
00:06:26,039 --> 00:06:29,580
framework 63 of the 85 unique

159
00:06:29,580 --> 00:06:32,280
procedures which is pretty much the apts

160
00:06:32,280 --> 00:06:34,400
that are being uh

161
00:06:34,400 --> 00:06:36,360
described

162
00:06:36,360 --> 00:06:39,060
as a way to explain this persistence

163
00:06:39,060 --> 00:06:42,660
techniques in Mitra 63 of the 85 you

164
00:06:42,660 --> 00:06:45,539
somehow a an identity manipulation so

165
00:06:45,539 --> 00:06:46,740
definitely

166
00:06:46,740 --> 00:06:49,020
uh the identity manipulation persistence

167
00:06:49,020 --> 00:06:51,600
techniques are the way to go they're

168
00:06:51,600 --> 00:06:53,340
being used by uh

169
00:06:53,340 --> 00:06:56,580
by many uh adversaries right now

170
00:06:56,580 --> 00:06:59,160
and that is why there have there has

171
00:06:59,160 --> 00:07:01,800
been so much so much research about uh

172
00:07:01,800 --> 00:07:03,900
the identity manipulation so we know a

173
00:07:03,900 --> 00:07:06,060
lot of tools like mimikats rubias in

174
00:07:06,060 --> 00:07:08,819
packets a lot of tools that uh there are

175
00:07:08,819 --> 00:07:11,819
modules that Metasploit Implement to try

176
00:07:11,819 --> 00:07:14,460
to modify the accounts and the

177
00:07:14,460 --> 00:07:15,840
identities that are being used in the

178
00:07:15,840 --> 00:07:18,120
operating system and I mean

179
00:07:18,120 --> 00:07:20,580
it's it's expected this is expected

180
00:07:20,580 --> 00:07:22,979
because that's the process that the

181
00:07:22,979 --> 00:07:26,039
actual operating system uses to

182
00:07:26,039 --> 00:07:28,380
um give permissions and privilege to

183
00:07:28,380 --> 00:07:30,539
their users right but what's the problem

184
00:07:30,539 --> 00:07:32,520
here

185
00:07:32,520 --> 00:07:35,460
as far as I know none of these tools

186
00:07:35,460 --> 00:07:40,020
actually craft an invisible local user

187
00:07:40,020 --> 00:07:42,780
Windows systems right they can for sure

188
00:07:42,780 --> 00:07:45,360
extract some sensitive data from the

189
00:07:45,360 --> 00:07:48,900
accounts like the ntlm hash some uh

190
00:07:48,900 --> 00:07:53,099
cached hashes but none of them can

191
00:07:53,099 --> 00:07:56,280
actually craft or create a hidden local

192
00:07:56,280 --> 00:07:59,699
account right

193
00:07:59,699 --> 00:08:01,819
foreign

194
00:08:01,819 --> 00:08:04,620
ER attack

195
00:08:04,620 --> 00:08:07,560
suborner persistent attack uh

196
00:08:07,560 --> 00:08:10,319
it's a new persistence technique that

197
00:08:10,319 --> 00:08:13,380
will allow us to stealthily Forge custom

198
00:08:13,380 --> 00:08:15,240
invisible accounts

199
00:08:15,240 --> 00:08:17,780
that will have the capability of

200
00:08:17,780 --> 00:08:21,360
impersonate any identity that is already

201
00:08:21,360 --> 00:08:22,979
in the victim

202
00:08:22,979 --> 00:08:26,220
and it's gonna work on every Windows NT

203
00:08:26,220 --> 00:08:29,580
system so this works from Windows XP to

204
00:08:29,580 --> 00:08:31,800
Windows 11 and this works from Windows

205
00:08:31,800 --> 00:08:34,880
Server 2003 to Windows Server

206
00:08:34,880 --> 00:08:37,679
2022. I haven't tested this in Windows

207
00:08:37,679 --> 00:08:41,940
95 for obvious reasons but uh I ideally

208
00:08:41,940 --> 00:08:43,919
this would work on all of them I've

209
00:08:43,919 --> 00:08:45,779
tested this and all the other

210
00:08:45,779 --> 00:08:49,160
anti-operating systems

211
00:08:49,380 --> 00:08:51,779
so the idea with this attack is that

212
00:08:51,779 --> 00:08:54,000
only who created the suborner account

213
00:08:54,000 --> 00:08:57,000
will easily know the username and the

214
00:08:57,000 --> 00:08:58,440
password

215
00:08:58,440 --> 00:09:00,420
this is the authentication process and

216
00:09:00,420 --> 00:09:03,000
after the authorization the subordinary

217
00:09:03,000 --> 00:09:06,000
attack will impersonate any account that

218
00:09:06,000 --> 00:09:08,100
it's already there so we are getting

219
00:09:08,100 --> 00:09:10,320
stealthy right in the process of the

220
00:09:10,320 --> 00:09:12,600
authentication I'm getting so and we are

221
00:09:12,600 --> 00:09:14,339
getting some stealthiness after the

222
00:09:14,339 --> 00:09:15,899
authentic authentication and

223
00:09:15,899 --> 00:09:18,120
authorization

224
00:09:18,120 --> 00:09:20,580
so this is how it looked like I'm gonna

225
00:09:20,580 --> 00:09:22,260
be brief here because I am gonna be

226
00:09:22,260 --> 00:09:24,180
doing sharing some details about this

227
00:09:24,180 --> 00:09:27,240
later so this is what we are doing we

228
00:09:27,240 --> 00:09:29,279
are pretty much creating something that

229
00:09:29,279 --> 00:09:31,320
looks like the machine account

230
00:09:31,320 --> 00:09:32,640
we are specifying the password

231
00:09:32,640 --> 00:09:36,800
specifying the RIT of the account

232
00:09:36,839 --> 00:09:39,720
um here we are we can see that we have

233
00:09:39,720 --> 00:09:42,360
just created this account

234
00:09:42,360 --> 00:09:45,000
and after that if we try to authenticate

235
00:09:45,000 --> 00:09:47,940
to the victim with this new pair of

236
00:09:47,940 --> 00:09:49,860
credentials we'll see that in this case

237
00:09:49,860 --> 00:09:52,200
we are using PSX at the in packets

238
00:09:52,200 --> 00:09:54,120
version of PSX

239
00:09:54,120 --> 00:09:57,600
we'll see that we will get a

240
00:09:57,600 --> 00:09:59,100
custom uh

241
00:09:59,100 --> 00:10:01,260
common prompt remote a remote system

242
00:10:01,260 --> 00:10:02,880
command prompt

243
00:10:02,880 --> 00:10:06,180
and we will see that this new account is

244
00:10:06,180 --> 00:10:07,680
not going to be visible in the net

245
00:10:07,680 --> 00:10:10,380
user's interface we're going to be uh

246
00:10:10,380 --> 00:10:12,180
deep typing this a little later but this

247
00:10:12,180 --> 00:10:15,000
is the whole idea so before talking

248
00:10:15,000 --> 00:10:17,820
about how uh what's this process done

249
00:10:17,820 --> 00:10:20,339
let me share you

250
00:10:20,339 --> 00:10:23,100
um sorry to share with you how it's

251
00:10:23,100 --> 00:10:24,959
usually the creation of accounts and

252
00:10:24,959 --> 00:10:26,940
manipulation accounts here so for to do

253
00:10:26,940 --> 00:10:28,980
this I would like you to think about

254
00:10:28,980 --> 00:10:31,980
this super basic scenario where we have

255
00:10:31,980 --> 00:10:35,100
an attacker that has already compromised

256
00:10:35,100 --> 00:10:36,180
a victim

257
00:10:36,180 --> 00:10:38,339
but there is an administrator that is

258
00:10:38,339 --> 00:10:40,740
constantly looking inside the Spectrum

259
00:10:40,740 --> 00:10:44,779
for any indicator of compromise

260
00:10:45,600 --> 00:10:48,300
start simple let's take a look at the

261
00:10:48,300 --> 00:10:50,220
very first initially scenario which is

262
00:10:50,220 --> 00:10:53,279
pretty much adding a new user uh I think

263
00:10:53,279 --> 00:10:55,620
we've done everyone here probably have

264
00:10:55,620 --> 00:10:58,380
has done this creating a basic user via

265
00:10:58,380 --> 00:10:59,820
the comma prompt

266
00:10:59,820 --> 00:11:03,480
so if you as a user be at the net user

267
00:11:03,480 --> 00:11:04,980
application

268
00:11:04,980 --> 00:11:07,860
you can do it super easily that's the

269
00:11:07,860 --> 00:11:10,260
API that is exposed by the operating

270
00:11:10,260 --> 00:11:12,839
system for you to create the account the

271
00:11:12,839 --> 00:11:15,899
so when you do this you you create this

272
00:11:15,899 --> 00:11:17,760
new identity that you can use to access

273
00:11:17,760 --> 00:11:19,500
the machine later

274
00:11:19,500 --> 00:11:21,360
but unfortunately this is going to be

275
00:11:21,360 --> 00:11:23,820
reported as a Windows Event in this case

276
00:11:23,820 --> 00:11:26,220
it's going to be the 4720 event and of

277
00:11:26,220 --> 00:11:27,779
course this is easy to spot via

278
00:11:27,779 --> 00:11:30,180
administrator or an EDR or any solution

279
00:11:30,180 --> 00:11:32,579
that it's installed there

280
00:11:32,579 --> 00:11:34,800
if the administrator takes a look takes

281
00:11:34,800 --> 00:11:37,200
a look at the net users interface you

282
00:11:37,200 --> 00:11:39,300
will see that this new account has been

283
00:11:39,300 --> 00:11:40,560
created

284
00:11:40,560 --> 00:11:42,120
and of course it's going to be super

285
00:11:42,120 --> 00:11:43,880
easy to remove the access to the

286
00:11:43,880 --> 00:11:45,839
adversary right

287
00:11:45,839 --> 00:11:49,640
so this doesn't work

288
00:11:49,680 --> 00:11:52,260
so let's see what happens if we append

289
00:11:52,260 --> 00:11:54,540
the dollar sign so this has been a

290
00:11:54,540 --> 00:11:57,300
technique that has been recently uh

291
00:11:57,300 --> 00:11:59,220
popularized but some researchers like

292
00:11:59,220 --> 00:12:01,680
Ben 10 from trust attack and the thing

293
00:12:01,680 --> 00:12:04,500
is that when you create a username an

294
00:12:04,500 --> 00:12:07,320
identity that has a dollar sign appended

295
00:12:07,320 --> 00:12:10,140
and is in its username this account is

296
00:12:10,140 --> 00:12:12,060
going to be interpreted by the operating

297
00:12:12,060 --> 00:12:16,339
system as a managed service account

298
00:12:17,100 --> 00:12:19,560
so if we try to do the same thing net

299
00:12:19,560 --> 00:12:21,899
user but only adding a dollar sign at

300
00:12:21,899 --> 00:12:23,100
the very end

301
00:12:23,100 --> 00:12:27,540
we'll get the same event uh registered

302
00:12:27,540 --> 00:12:29,459
in the event log then it's going to be a

303
00:12:29,459 --> 00:12:32,220
4720 but if the administrator wants to

304
00:12:32,220 --> 00:12:37,200
take a look at the net users output

305
00:12:37,200 --> 00:12:39,300
it was there's not going to be like the

306
00:12:39,300 --> 00:12:41,940
account we have just created but

307
00:12:41,940 --> 00:12:44,040
the event it's gonna be registered in

308
00:12:44,040 --> 00:12:46,920
the event log right so in this case it

309
00:12:46,920 --> 00:12:49,700
was a slightly more

310
00:12:49,700 --> 00:12:53,519
stealthy but it was easy to spot due to

311
00:12:53,519 --> 00:12:55,800
the analysis of the Windows Event log

312
00:12:55,800 --> 00:12:58,380
so again it's not possible in this way

313
00:12:58,380 --> 00:13:01,380
to create an investable account right so

314
00:13:01,380 --> 00:13:03,420
this also failed

315
00:13:03,420 --> 00:13:05,940
so let's get a little more advanced and

316
00:13:05,940 --> 00:13:08,339
let's try to create a machine account by

317
00:13:08,339 --> 00:13:11,880
directly calling the net API 32 function

318
00:13:11,880 --> 00:13:14,940
as a net user ad so what we need to do

319
00:13:14,940 --> 00:13:16,700
this it's pretty much

320
00:13:16,700 --> 00:13:19,920
uh create this structure that will

321
00:13:19,920 --> 00:13:22,560
contain all the data of the account we

322
00:13:22,560 --> 00:13:24,600
want to create so as you can see here we

323
00:13:24,600 --> 00:13:26,459
need to specify for the user info one

324
00:13:26,459 --> 00:13:27,660
for instance this is one of the

325
00:13:27,660 --> 00:13:31,200
structures that you use to call the the

326
00:13:31,200 --> 00:13:34,680
net is red function from the net net API

327
00:13:34,680 --> 00:13:37,260
32 API

328
00:13:37,260 --> 00:13:38,399
um

329
00:13:38,399 --> 00:13:40,560
you need to specify the username you

330
00:13:40,560 --> 00:13:42,480
also specify the Privileges which is in

331
00:13:42,480 --> 00:13:44,519
this case is zero one or two this will

332
00:13:44,519 --> 00:13:46,920
Define if the user's administrator a

333
00:13:46,920 --> 00:13:49,200
username or a standard user or a guest

334
00:13:49,200 --> 00:13:51,660
and you specify the flags that will

335
00:13:51,660 --> 00:13:53,820
Define the type of account so in this

336
00:13:53,820 --> 00:13:54,560
case

337
00:13:54,560 --> 00:13:57,839
1000 stands for uh workstation trust

338
00:13:57,839 --> 00:13:59,459
account which is the flags that

339
00:13:59,459 --> 00:14:01,260
represent the machine account

340
00:14:01,260 --> 00:14:03,779
so if we do this and we craft somehow an

341
00:14:03,779 --> 00:14:05,880
executable that will try to create this

342
00:14:05,880 --> 00:14:07,380
account

343
00:14:07,380 --> 00:14:10,220
and we execute it this is going to be

344
00:14:10,220 --> 00:14:12,720
registering a different event in this

345
00:14:12,720 --> 00:14:15,540
case it's going to be 47 41 Which is

346
00:14:15,540 --> 00:14:20,279
less uh commonly uh monitored as 4720

347
00:14:20,279 --> 00:14:22,680
but still it's going to be registered in

348
00:14:22,680 --> 00:14:24,680
the account if we if the administrator

349
00:14:24,680 --> 00:14:28,740
takes a look at the net user's output

350
00:14:28,740 --> 00:14:31,440
the account is not going to be there

351
00:14:31,440 --> 00:14:34,380
but it's also possible to see that

352
00:14:34,380 --> 00:14:37,079
someone created an account with this

353
00:14:37,079 --> 00:14:39,540
different identifier right

354
00:14:39,540 --> 00:14:41,820
and of course it's possible to remove

355
00:14:41,820 --> 00:14:44,639
the access to the adversary so none of

356
00:14:44,639 --> 00:14:46,440
these three scenarios worked what is

357
00:14:46,440 --> 00:14:48,360
wrong the this battery account is

358
00:14:48,360 --> 00:14:50,940
detected right after its creation

359
00:14:50,940 --> 00:14:53,579
Through the Windows events or if there's

360
00:14:53,579 --> 00:14:55,320
something like an EDR that is something

361
00:14:55,320 --> 00:14:57,959
uh like a API called sequence analysis

362
00:14:57,959 --> 00:15:00,500
it's easy to spot that someone has

363
00:15:00,500 --> 00:15:04,199
invoked the the API that in intended to

364
00:15:04,199 --> 00:15:06,779
create new accounts and it's also easy

365
00:15:06,779 --> 00:15:09,660
to spot after risk creation but some

366
00:15:09,660 --> 00:15:11,579
user management application applications

367
00:15:11,579 --> 00:15:14,899
like the net users

368
00:15:14,940 --> 00:15:17,220
and what's the thing if you want to

369
00:15:17,220 --> 00:15:20,100
persist a high privileged access you

370
00:15:20,100 --> 00:15:21,720
will need to

371
00:15:21,720 --> 00:15:25,139
add this account to an admin group

372
00:15:25,139 --> 00:15:28,440
which is also a easy to spot

373
00:15:28,440 --> 00:15:30,959
and the other problem is that the API

374
00:15:30,959 --> 00:15:34,880
that is used to create new identities

375
00:15:34,880 --> 00:15:38,040
in bits to modify all the attributes

376
00:15:38,040 --> 00:15:40,380
that are actually involved in the

377
00:15:40,380 --> 00:15:43,440
account creation process

378
00:15:43,440 --> 00:15:46,519
so what can we do

379
00:15:48,000 --> 00:15:51,779
it would be ideal to find a way to you

380
00:15:51,779 --> 00:15:54,660
know just uh bright micro bright windows

381
00:15:54,660 --> 00:15:56,399
and say

382
00:15:56,399 --> 00:15:57,199
um

383
00:15:57,199 --> 00:16:00,180
why won't we create when we create an

384
00:16:00,180 --> 00:16:02,459
account without you know reporting that

385
00:16:02,459 --> 00:16:04,740
to everywhere in the you know the event

386
00:16:04,740 --> 00:16:06,779
lock and things like that

387
00:16:06,779 --> 00:16:10,500
and uh to do this we need exactly who to

388
00:16:10,500 --> 00:16:13,079
buy from the old the authentication and

389
00:16:13,079 --> 00:16:15,540
authorization process

390
00:16:15,540 --> 00:16:18,420
so if we take a look up a hike level

391
00:16:18,420 --> 00:16:20,760
overview of how the authentication and

392
00:16:20,760 --> 00:16:23,040
authorization process works with Windows

393
00:16:23,040 --> 00:16:25,980
this is a high level

394
00:16:25,980 --> 00:16:27,480
um these are like the credentials

395
00:16:27,480 --> 00:16:29,639
management applications that are being

396
00:16:29,639 --> 00:16:32,040
used to create accounts in this case we

397
00:16:32,040 --> 00:16:35,639
are using the net user ad API

398
00:16:35,639 --> 00:16:38,759
um so if we try to create an account

399
00:16:38,759 --> 00:16:40,139
we're going to be communicating

400
00:16:40,139 --> 00:16:42,120
communicating to this API

401
00:16:42,120 --> 00:16:44,399
then the information is going to be sent

402
00:16:44,399 --> 00:16:48,540
to the lsass process that will try to

403
00:16:48,540 --> 00:16:51,420
query the LSA policy to define the way

404
00:16:51,420 --> 00:16:54,240
we are going to be creating this account

405
00:16:54,240 --> 00:16:56,240
and after that it everything

406
00:16:56,240 --> 00:16:58,860
went well

407
00:16:58,860 --> 00:17:00,899
all the account information is going to

408
00:17:00,899 --> 00:17:03,660
be written into the sum so this is the

409
00:17:03,660 --> 00:17:06,839
important part here every all of the the

410
00:17:06,839 --> 00:17:10,020
details of the local account uh are

411
00:17:10,020 --> 00:17:11,880
going to be registered in the Sam and

412
00:17:11,880 --> 00:17:14,339
right after this they'll say it's it's

413
00:17:14,339 --> 00:17:16,199
going to be calling the event logger

414
00:17:16,199 --> 00:17:18,119
that is going to be reporting the

415
00:17:18,119 --> 00:17:20,339
account creation

416
00:17:20,339 --> 00:17:23,099
and if everything uh went well the

417
00:17:23,099 --> 00:17:25,380
account is going to be done so this is a

418
00:17:25,380 --> 00:17:27,660
high level overview of the process

419
00:17:27,660 --> 00:17:29,820
so the idea of the supporter attack it's

420
00:17:29,820 --> 00:17:32,400
really simple not that we notice why

421
00:17:32,400 --> 00:17:35,700
don't we try to write this time directly

422
00:17:35,700 --> 00:17:39,059
with the data that we already know

423
00:17:39,059 --> 00:17:41,580
that it's needed or the operating system

424
00:17:41,580 --> 00:17:43,679
to create a new account

425
00:17:43,679 --> 00:17:46,799
and let's say try to pay your bribe to

426
00:17:46,799 --> 00:17:48,240
the event logger to not saying anything

427
00:17:48,240 --> 00:17:49,919
this is the whole idea of the attack

428
00:17:49,919 --> 00:17:52,799
it's it's super simple

429
00:17:52,799 --> 00:17:54,960
um so we provide to write everything of

430
00:17:54,960 --> 00:17:56,580
the all the account information to the

431
00:17:56,580 --> 00:17:59,520
Sam without calling the event logger and

432
00:17:59,520 --> 00:18:01,740
uh try to make this account as stealthy

433
00:18:01,740 --> 00:18:04,380
as possible so we'll I'll try to explain

434
00:18:04,380 --> 00:18:06,660
all the details uh

435
00:18:06,660 --> 00:18:08,940
later so

436
00:18:08,940 --> 00:18:11,580
the support on dynamically crafts this

437
00:18:11,580 --> 00:18:13,799
subordinary account without using the

438
00:18:13,799 --> 00:18:17,460
net win32 API in this case for exploring

439
00:18:17,460 --> 00:18:19,740
says that they'd use a rat

440
00:18:19,740 --> 00:18:21,900
we are adding some extra style to the

441
00:18:21,900 --> 00:18:23,520
subordinary account by appending this

442
00:18:23,520 --> 00:18:25,860
dollar sign because remember every

443
00:18:25,860 --> 00:18:28,679
account that has this username uh with a

444
00:18:28,679 --> 00:18:30,120
dollar sign up and it's going to be

445
00:18:30,120 --> 00:18:33,539
interpreted as a managed service account

446
00:18:33,539 --> 00:18:35,340
and we are going to be leveraging

447
00:18:35,340 --> 00:18:37,799
something that is called the account

448
00:18:37,799 --> 00:18:40,679
control bits that will Define the type

449
00:18:40,679 --> 00:18:43,380
of account we are creating

450
00:18:43,380 --> 00:18:45,419
all right so that's another view of the

451
00:18:45,419 --> 00:18:47,580
whole attack

452
00:18:47,580 --> 00:18:52,620
so let me talk about the process you

453
00:18:52,620 --> 00:18:55,679
know I already had this idea so

454
00:18:55,679 --> 00:18:58,020
I would like to develop it and this is

455
00:18:58,020 --> 00:19:00,120
like the the one when the struggle

456
00:19:00,120 --> 00:19:02,820
begins so what I try to do first is try

457
00:19:02,820 --> 00:19:05,340
to understand the authentication and

458
00:19:05,340 --> 00:19:09,059
authorization process or local accounts

459
00:19:09,059 --> 00:19:11,480
all right

460
00:19:11,580 --> 00:19:14,640
so this is the high level overview that

461
00:19:14,640 --> 00:19:17,100
I have just uh showed you

462
00:19:17,100 --> 00:19:19,860
but actually this is a little more

463
00:19:19,860 --> 00:19:22,799
complex if we take a look at some of the

464
00:19:22,799 --> 00:19:25,500
modules that are actually involved in

465
00:19:25,500 --> 00:19:27,480
the process of an account creation I

466
00:19:27,480 --> 00:19:30,360
mean there's a lot you can see that the

467
00:19:30,360 --> 00:19:31,980
credential management applications

468
00:19:31,980 --> 00:19:35,520
involve many dlls and many executables

469
00:19:35,520 --> 00:19:38,039
that uh we are not going to be

470
00:19:38,039 --> 00:19:40,799
discussing right now we can see that

471
00:19:40,799 --> 00:19:43,140
also we are seeing some authentication

472
00:19:43,140 --> 00:19:46,200
providers that are related to the active

473
00:19:46,200 --> 00:19:48,960
directory authentication in this case we

474
00:19:48,960 --> 00:19:50,360
can see that uh there are some

475
00:19:50,360 --> 00:19:52,140
authentication providers like the

476
00:19:52,140 --> 00:19:55,919
kerberus dll the kdcsurface.dll

477
00:19:55,919 --> 00:19:58,620
and uh we also see that there's a

478
00:19:58,620 --> 00:20:00,539
communication to the

479
00:20:00,539 --> 00:20:03,539
um domain controller via the the ntdsa

480
00:20:03,539 --> 00:20:05,820
dll but we don't care about that right

481
00:20:05,820 --> 00:20:07,980
now because we are focusing

482
00:20:07,980 --> 00:20:10,740
on the creation of a new local account

483
00:20:10,740 --> 00:20:14,340
so we can ignore them for now

484
00:20:14,340 --> 00:20:17,820
so we would like to focus on on the

485
00:20:17,820 --> 00:20:21,240
authentication provider msb1 odll which

486
00:20:21,240 --> 00:20:23,340
is in charge of the authentication

487
00:20:23,340 --> 00:20:26,039
creation and communication with the Sam

488
00:20:26,039 --> 00:20:28,320
service to create local accounts

489
00:20:28,320 --> 00:20:30,179
we're going to be talking about the risk

490
00:20:30,179 --> 00:20:32,340
security reference Monitor and all the

491
00:20:32,340 --> 00:20:33,780
credential management applications that

492
00:20:33,780 --> 00:20:35,900
are being involved with this process so

493
00:20:35,900 --> 00:20:39,679
let's make it simple let's try to

494
00:20:39,679 --> 00:20:43,620
go step by step with the authentication

495
00:20:43,620 --> 00:20:48,739
process for a local account so

496
00:20:49,640 --> 00:20:52,740
whenever we try to authenticate against

497
00:20:52,740 --> 00:20:56,400
a Windows system we can do it with

498
00:20:56,400 --> 00:20:59,880
different types of let's say inputs we

499
00:20:59,880 --> 00:21:02,760
can specify a username and a password we

500
00:21:02,760 --> 00:21:06,480
can do it with a with a pin we can do it

501
00:21:06,480 --> 00:21:09,480
with a smart card and each of these

502
00:21:09,480 --> 00:21:11,820
processes uses something called a

503
00:21:11,820 --> 00:21:15,179
credential provider so in this case if

504
00:21:15,179 --> 00:21:16,740
we are using a username and a password

505
00:21:16,740 --> 00:21:18,480
we're going to be using a specific

506
00:21:18,480 --> 00:21:20,940
specific credential provider in this

507
00:21:20,940 --> 00:21:22,799
case let's say that we are using the

508
00:21:22,799 --> 00:21:24,720
credential provider that it's intended

509
00:21:24,720 --> 00:21:27,660
to authenticate via username and

510
00:21:27,660 --> 00:21:30,179
password the basic one this is going to

511
00:21:30,179 --> 00:21:33,799
be processed by the win logon

512
00:21:33,960 --> 00:21:35,820
module

513
00:21:35,820 --> 00:21:37,640
that after

514
00:21:37,640 --> 00:21:40,440
processing the username and password

515
00:21:40,440 --> 00:21:41,700
entered

516
00:21:41,700 --> 00:21:43,799
the credential provider is going to

517
00:21:43,799 --> 00:21:47,220
translate the password to the ntlm

518
00:21:47,220 --> 00:21:49,679
version of it and after that the win

519
00:21:49,679 --> 00:21:52,559
Logan process is going to add the login

520
00:21:52,559 --> 00:21:55,679
Sid which will describe this particular

521
00:21:55,679 --> 00:21:57,299
login attempt

522
00:21:57,299 --> 00:21:59,340
for this username and this path for for

523
00:21:59,340 --> 00:22:02,460
yeah for this particular specific event

524
00:22:02,460 --> 00:22:05,340
after that the local process is going to

525
00:22:05,340 --> 00:22:07,200
be sending this information to the LSA

526
00:22:07,200 --> 00:22:08,820
service

527
00:22:08,820 --> 00:22:12,539
which will also try to communicate and

528
00:22:12,539 --> 00:22:14,400
send this data to the authentication

529
00:22:14,400 --> 00:22:16,039
provider called

530
00:22:16,039 --> 00:22:19,020
msv100.tll in this case win logon is

531
00:22:19,020 --> 00:22:22,200
going to be calling uh the LSA logon

532
00:22:22,200 --> 00:22:24,480
user function that will set this

533
00:22:24,480 --> 00:22:28,020
information username ntlm hash and the

534
00:22:28,020 --> 00:22:29,640
login Sid that will describe the login

535
00:22:29,640 --> 00:22:30,900
attempt

536
00:22:30,900 --> 00:22:32,520
then this information is going to be

537
00:22:32,520 --> 00:22:35,159
sent to the Sam service which will try

538
00:22:35,159 --> 00:22:37,860
to retrieve all the information of the

539
00:22:37,860 --> 00:22:39,480
account so pretty much what some service

540
00:22:39,480 --> 00:22:42,960
does here is try to verify that there's

541
00:22:42,960 --> 00:22:46,679
a username that exists exists with this

542
00:22:46,679 --> 00:22:49,740
inside the sap database and it will

543
00:22:49,740 --> 00:22:52,200
verify the password the ntlm hash

544
00:22:52,200 --> 00:22:54,000
actually matches

545
00:22:54,000 --> 00:22:55,919
if everything went well

546
00:22:55,919 --> 00:22:58,020
uh the same server is going to say uh

547
00:22:58,020 --> 00:22:59,820
yeah everything apparently it's it's

548
00:22:59,820 --> 00:23:02,720
it's good and the msb1 oh it's a

549
00:23:02,720 --> 00:23:05,039
validate the information that has been

550
00:23:05,039 --> 00:23:07,260
sent against the information that has

551
00:23:07,260 --> 00:23:11,039
been stored in the Sam registry High

552
00:23:11,039 --> 00:23:14,039
since we had a successful Authentication

553
00:23:14,039 --> 00:23:17,280
the LSS process is going to report these

554
00:23:17,280 --> 00:23:19,200
two events to the event logger saying

555
00:23:19,200 --> 00:23:21,360
okay someone authenticated successfully

556
00:23:21,360 --> 00:23:24,840
and it's the register uh it's going to

557
00:23:24,840 --> 00:23:26,640
be registered uh the event of the

558
00:23:26,640 --> 00:23:28,140
authentication is going to be registered

559
00:23:28,140 --> 00:23:30,780
in the security lock

560
00:23:30,780 --> 00:23:32,880
after this this the authorization

561
00:23:32,880 --> 00:23:34,320
process start

562
00:23:34,320 --> 00:23:36,659
so now that we had a successful

563
00:23:36,659 --> 00:23:38,159
Authentication

564
00:23:38,159 --> 00:23:40,559
we had a username password with a

565
00:23:40,559 --> 00:23:42,419
specific login Sid that will describe

566
00:23:42,419 --> 00:23:43,860
the slogan attempt

567
00:23:43,860 --> 00:23:47,520
and since it was successful the lsas

568
00:23:47,520 --> 00:23:51,900
process will append this luid identifier

569
00:23:51,900 --> 00:23:54,600
for this session saying okay I am

570
00:23:54,600 --> 00:23:57,960
creating this uh I'm starting this

571
00:23:57,960 --> 00:24:00,360
authorization process for this

572
00:24:00,360 --> 00:24:03,840
particular log on Sid attempt and this

573
00:24:03,840 --> 00:24:06,419
luid will describe this process

574
00:24:06,419 --> 00:24:10,860
so what is going to happen is that uh

575
00:24:10,860 --> 00:24:13,980
the security reference monitor that is

576
00:24:13,980 --> 00:24:15,419
being a

577
00:24:15,419 --> 00:24:18,360
nursing communication between the LSA SS

578
00:24:18,360 --> 00:24:19,980
process and the security reference

579
00:24:19,980 --> 00:24:21,720
monitor that starts at the very

580
00:24:21,720 --> 00:24:24,320
beginning uh it's an alpc connection

581
00:24:24,320 --> 00:24:26,400
they are going to be communicating

582
00:24:26,400 --> 00:24:29,940
together to forge what will describe the

583
00:24:29,940 --> 00:24:32,760
principle uh the primary access token

584
00:24:32,760 --> 00:24:35,700
the primary access token it's gonna be

585
00:24:35,700 --> 00:24:39,659
the way that the operating system has to

586
00:24:39,659 --> 00:24:42,179
describe the permissions of the account

587
00:24:42,179 --> 00:24:45,659
right so in this case after a successful

588
00:24:45,659 --> 00:24:48,360
authentication and the start of an

589
00:24:48,360 --> 00:24:50,580
authorization there's going to be a

590
00:24:50,580 --> 00:24:52,500
creation of the very initial access

591
00:24:52,500 --> 00:24:54,299
token

592
00:24:54,299 --> 00:24:57,720
and then after that

593
00:24:57,720 --> 00:25:00,360
the LSA as a service it's gonna try to

594
00:25:00,360 --> 00:25:02,580
add some of the additional permissions

595
00:25:02,580 --> 00:25:05,520
that this initial access token doesn't

596
00:25:05,520 --> 00:25:06,360
have

597
00:25:06,360 --> 00:25:09,179
based on the the policies that are that

598
00:25:09,179 --> 00:25:11,640
are described in the LSA policy all of

599
00:25:11,640 --> 00:25:14,460
the permissions of this uh this username

600
00:25:14,460 --> 00:25:16,200
are going to be appended to this access

601
00:25:16,200 --> 00:25:18,059
token

602
00:25:18,059 --> 00:25:21,360
so pretty much this is the process

603
00:25:21,360 --> 00:25:24,059
um it's a high level overview so what we

604
00:25:24,059 --> 00:25:26,880
need here is a username

605
00:25:26,880 --> 00:25:31,200
we need a password or an nclm hash and

606
00:25:31,200 --> 00:25:33,960
we somehow need to know exactly how to

607
00:25:33,960 --> 00:25:36,480
craft the access token this is the basic

608
00:25:36,480 --> 00:25:37,919
idea that we need to know to

609
00:25:37,919 --> 00:25:40,140
successfully create a standard account

610
00:25:40,140 --> 00:25:42,480
right

611
00:25:42,480 --> 00:25:45,960
so now now that we know that

612
00:25:45,960 --> 00:25:48,600
um what I did later was try to create a

613
00:25:48,600 --> 00:25:50,700
local account writing directly to the

614
00:25:50,700 --> 00:25:54,299
Sam so what we need is a username an

615
00:25:54,299 --> 00:25:57,419
ntlm hash and somehow try to craft this

616
00:25:57,419 --> 00:26:00,000
access token that will describe the

617
00:26:00,000 --> 00:26:02,220
security context of the user after a

618
00:26:02,220 --> 00:26:03,539
successful authentication and

619
00:26:03,539 --> 00:26:06,120
authorization process

620
00:26:06,120 --> 00:26:09,559
so we know also that this information is

621
00:26:09,559 --> 00:26:14,100
somehow stored in the sum right but we

622
00:26:14,100 --> 00:26:16,679
didn't know initially exactly where

623
00:26:16,679 --> 00:26:19,799
so what I did here is okay this is how

624
00:26:19,799 --> 00:26:23,039
the registry Hive looks like for uh an

625
00:26:23,039 --> 00:26:26,580
account that it's in Windows 11. but

626
00:26:26,580 --> 00:26:29,159
what I did is pretty simple I you know

627
00:26:29,159 --> 00:26:31,440
travel back to time and I tried to

628
00:26:31,440 --> 00:26:34,080
analyze how the sound looks like in a

629
00:26:34,080 --> 00:26:36,480
Windows XP machine and they only have

630
00:26:36,480 --> 00:26:38,340
these two particular entry switch which

631
00:26:38,340 --> 00:26:41,940
are the F entry and the B entry right

632
00:26:41,940 --> 00:26:44,159
so what I guess is that okay probably

633
00:26:44,159 --> 00:26:48,620
the information I need it's only there

634
00:26:48,779 --> 00:26:51,659
what's the problem here of course so

635
00:26:51,659 --> 00:26:53,220
um if we take a look for instance at the

636
00:26:53,220 --> 00:26:55,080
B binary

637
00:26:55,080 --> 00:26:57,240
we don't have like an actual structure

638
00:26:57,240 --> 00:26:59,039
of actually how the information is

639
00:26:59,039 --> 00:27:01,740
stored in here right so one of the

640
00:27:01,740 --> 00:27:03,659
processes that I did was try to

641
00:27:03,659 --> 00:27:06,539
recollect as much information as I could

642
00:27:06,539 --> 00:27:08,760
from you know internet resources and

643
00:27:08,760 --> 00:27:11,279
reverse engineering and try to release

644
00:27:11,279 --> 00:27:15,480
uh sorry to describe the uh the

645
00:27:15,480 --> 00:27:17,520
structure of this

646
00:27:17,520 --> 00:27:20,820
B file so what this is how the structure

647
00:27:20,820 --> 00:27:22,679
looks like

648
00:27:22,679 --> 00:27:24,120
um

649
00:27:24,120 --> 00:27:25,860
as you can see here there are a lot of

650
00:27:25,860 --> 00:27:28,919
information like username the full name

651
00:27:28,919 --> 00:27:33,360
the comment and uh there's also uh an a

652
00:27:33,360 --> 00:27:35,460
version of the LM hash and ntlm hash and

653
00:27:35,460 --> 00:27:38,159
until and history starting here and one

654
00:27:38,159 --> 00:27:39,960
of the problems here is that the V size

655
00:27:39,960 --> 00:27:41,820
is dynamic dynamic

656
00:27:41,820 --> 00:27:44,340
and this makes sense because of course

657
00:27:44,340 --> 00:27:47,539
the username values and uh comment

658
00:27:47,539 --> 00:27:50,159
values like this they don't have a

659
00:27:50,159 --> 00:27:52,980
specific fixed size right

660
00:27:52,980 --> 00:27:55,740
so the structure actually looks like

661
00:27:55,740 --> 00:27:58,559
this if we take a look at the username

662
00:27:58,559 --> 00:28:00,919
we'll see that the very first part

663
00:28:00,919 --> 00:28:05,419
contains the headers of which value

664
00:28:06,120 --> 00:28:08,640
if we take a look at the header the

665
00:28:08,640 --> 00:28:10,380
structure is going to describe initially

666
00:28:10,380 --> 00:28:17,299
an offset uh from the ox CC let's say uh

667
00:28:17,299 --> 00:28:20,880
address inside the the binary it will

668
00:28:20,880 --> 00:28:24,120
also contain the length in unicoid in

669
00:28:24,120 --> 00:28:26,400
Unicode of the value that we are storing

670
00:28:26,400 --> 00:28:29,640
and there's like an unknown value that

671
00:28:29,640 --> 00:28:31,200
is also installing here because I mean

672
00:28:31,200 --> 00:28:33,480
remember that Windows is closed source

673
00:28:33,480 --> 00:28:36,480
of of course these structures are not uh

674
00:28:36,480 --> 00:28:38,220
you know open source so you don't have

675
00:28:38,220 --> 00:28:40,200
we don't have access to them so this is

676
00:28:40,200 --> 00:28:42,179
pretty much how it looks like for now I

677
00:28:42,179 --> 00:28:45,480
have I don't know what this unknown uh

678
00:28:45,480 --> 00:28:48,380
field uh is intended for is intended to

679
00:28:48,380 --> 00:28:51,240
but uh it's not necessary for all

680
00:28:51,240 --> 00:28:54,600
purposes so this is how the headers look

681
00:28:54,600 --> 00:28:58,679
like and then the values are

682
00:28:58,679 --> 00:29:02,700
in the offset from oxac if we take a

683
00:29:02,700 --> 00:29:04,500
look here uh

684
00:29:04,500 --> 00:29:06,240
in the particular case of the username

685
00:29:06,240 --> 00:29:08,220
we see that F4

686
00:29:08,220 --> 00:29:12,480
which is uh 244 decimal it's going to be

687
00:29:12,480 --> 00:29:15,659
pointing to the actual value of the

688
00:29:15,659 --> 00:29:19,260
username field right so in this case

689
00:29:19,260 --> 00:29:22,140
um this is the suborner and the dollar

690
00:29:22,140 --> 00:29:25,440
sign Unicode only code version we'll see

691
00:29:25,440 --> 00:29:28,380
that the length is 18 and we don't care

692
00:29:28,380 --> 00:29:30,659
about the unknown value so we know that

693
00:29:30,659 --> 00:29:31,919
this is the structure of the B value

694
00:29:31,919 --> 00:29:34,500
entry right

695
00:29:34,500 --> 00:29:36,539
this is pretty much how it looks like

696
00:29:36,539 --> 00:29:38,880
but remember that we don't need to

697
00:29:38,880 --> 00:29:42,360
actually try to understand all of these

698
00:29:42,360 --> 00:29:44,820
values we only need to understand the

699
00:29:44,820 --> 00:29:46,679
username

700
00:29:46,679 --> 00:29:48,299
and somewhat

701
00:29:48,299 --> 00:29:51,659
the ntlm hash so we know that the B

702
00:29:51,659 --> 00:29:54,000
binaries cannot contain the username and

703
00:29:54,000 --> 00:29:57,360
it's going to contain the ntlm hash

704
00:29:57,360 --> 00:30:00,480
so I know how to craft a username but

705
00:30:00,480 --> 00:30:02,700
the ntlm hash was a little more tricky

706
00:30:02,700 --> 00:30:07,320
so what I did was try to understand how

707
00:30:07,320 --> 00:30:11,159
the tools uh extract the ntlm hash from

708
00:30:11,159 --> 00:30:14,820
the sum so I try to analyze okay what

709
00:30:14,820 --> 00:30:17,700
does mimikat do when trying to extract

710
00:30:17,700 --> 00:30:20,820
the secrets from the sum reviews uh

711
00:30:20,820 --> 00:30:23,399
sorry packet and Metasploit and try to

712
00:30:23,399 --> 00:30:29,220
analyze how this Sam hash is uh

713
00:30:29,220 --> 00:30:32,100
used to store the ntlm hash so what's

714
00:30:32,100 --> 00:30:35,220
the problem in the sum the

715
00:30:35,220 --> 00:30:39,179
the ntlm hash is not stored as it is

716
00:30:39,179 --> 00:30:42,299
there are some uh ways that the

717
00:30:42,299 --> 00:30:44,340
operating system converts it from ntlm

718
00:30:44,340 --> 00:30:46,679
to a Sam hash that it's Unique for each

719
00:30:46,679 --> 00:30:47,640
system

720
00:30:47,640 --> 00:30:50,360
so what I did is pretty much try to

721
00:30:50,360 --> 00:30:54,000
extract the information try to analyze

722
00:30:54,000 --> 00:30:56,220
how many cuts for instance extracts this

723
00:30:56,220 --> 00:30:59,220
information and try to replicate the

724
00:30:59,220 --> 00:31:01,980
process that the operating system does

725
00:31:01,980 --> 00:31:05,760
to actually convert from an ntlm hash to

726
00:31:05,760 --> 00:31:08,360
the Sam hash that will actually contain

727
00:31:08,360 --> 00:31:10,580
the password

728
00:31:10,580 --> 00:31:13,200
that it's going to be a unique some hash

729
00:31:13,200 --> 00:31:16,080
for each system right

730
00:31:16,080 --> 00:31:18,840
so this is how the process looks like uh

731
00:31:18,840 --> 00:31:21,000
initially it will

732
00:31:21,000 --> 00:31:24,120
uh verify if there's a Windows 10 uh

733
00:31:24,120 --> 00:31:28,260
version uh 1607 or greater

734
00:31:28,260 --> 00:31:30,480
then it's gonna try to calculate the

735
00:31:30,480 --> 00:31:32,520
ntlm hash so in this case we're starting

736
00:31:32,520 --> 00:31:35,760
from the password uh to the Sam hash so

737
00:31:35,760 --> 00:31:37,260
we're going to calculate the ntlm hash

738
00:31:37,260 --> 00:31:39,419
and it will split it into halts

739
00:31:39,419 --> 00:31:41,520
and each two how each of the halves is

740
00:31:41,520 --> 00:31:43,340
going to be calculated with a desk key

741
00:31:43,340 --> 00:31:47,039
that uh that takes some information that

742
00:31:47,039 --> 00:31:50,039
it's Unique for each operating system

743
00:31:50,039 --> 00:31:52,200
um like the boot key and things like

744
00:31:52,200 --> 00:31:54,240
that and uh all this information is

745
00:31:54,240 --> 00:31:56,580
going to be encrypted and contacted as a

746
00:31:56,580 --> 00:31:59,640
new Dash hash

747
00:31:59,640 --> 00:32:02,159
and then it's going to be the

748
00:32:02,159 --> 00:32:04,620
calculation of the sampkey that is going

749
00:32:04,620 --> 00:32:08,100
to be uh pretty much used to calculate

750
00:32:08,100 --> 00:32:11,039
the very last Sam hash so before Windows

751
00:32:11,039 --> 00:32:13,740
10 uh 1607

752
00:32:13,740 --> 00:32:17,399
you Windows used to use md5 to do this

753
00:32:17,399 --> 00:32:21,779
hashing after that they are using AES so

754
00:32:21,779 --> 00:32:24,179
that this is why we are doing the

755
00:32:24,179 --> 00:32:25,740
validation if the system we are

756
00:32:25,740 --> 00:32:29,340
attacking is Windows 10 1607 or greater

757
00:32:29,340 --> 00:32:31,679
and after calculating the Sam hash we

758
00:32:31,679 --> 00:32:34,500
know for sure that we have crafted

759
00:32:34,500 --> 00:32:38,460
uh successfully this Windows system so

760
00:32:38,460 --> 00:32:41,940
this uh the the conversion from the mtlm

761
00:32:41,940 --> 00:32:44,580
hash to the Sam hash key

762
00:32:44,580 --> 00:32:46,740
right

763
00:32:46,740 --> 00:32:50,220
so after this we are going to try to

764
00:32:50,220 --> 00:32:53,159
write these changes to the B structure

765
00:32:53,159 --> 00:32:54,720
right

766
00:32:54,720 --> 00:32:57,380
so

767
00:32:58,080 --> 00:33:00,899
this is how it looks like a process we

768
00:33:00,899 --> 00:33:03,360
have just done is try to write the

769
00:33:03,360 --> 00:33:04,320
username

770
00:33:04,320 --> 00:33:06,659
to the v file

771
00:33:06,659 --> 00:33:09,899
we try to convert the ntlm hash to the

772
00:33:09,899 --> 00:33:12,779
Sam hash key and try to store it in the

773
00:33:12,779 --> 00:33:14,700
B binary

774
00:33:14,700 --> 00:33:18,179
but what we do with the uh

775
00:33:18,179 --> 00:33:21,000
way to describe the you know the the

776
00:33:21,000 --> 00:33:23,419
security context how can we how can we

777
00:33:23,419 --> 00:33:26,220
try to

778
00:33:26,220 --> 00:33:27,840
um somehow

779
00:33:27,840 --> 00:33:29,220
patch

780
00:33:29,220 --> 00:33:31,440
the permissions that they want to

781
00:33:31,440 --> 00:33:35,299
impersonate in the in the registry hive

782
00:33:35,299 --> 00:33:37,679
so after trying to create an invisible

783
00:33:37,679 --> 00:33:39,539
account what I did is try to make it

784
00:33:39,539 --> 00:33:40,980
invisible

785
00:33:40,980 --> 00:33:43,919
so now take a look let's take a look at

786
00:33:43,919 --> 00:33:46,140
the if F binary

787
00:33:46,140 --> 00:33:48,720
their finally it's easy because the size

788
00:33:48,720 --> 00:33:52,320
is fixed so they this binary does not

789
00:33:52,320 --> 00:33:55,559
contain any particular Dynamic uh let's

790
00:33:55,559 --> 00:33:59,159
say uh all the the sizes of the values

791
00:33:59,159 --> 00:34:03,179
here are fixed so it's easy to forge

792
00:34:03,179 --> 00:34:06,240
but we are only interested in two

793
00:34:06,240 --> 00:34:08,760
particular values here

794
00:34:08,760 --> 00:34:10,859
the first one is going to be the rid

795
00:34:10,859 --> 00:34:12,179
copy

796
00:34:12,179 --> 00:34:14,639
that this is going to be used by the

797
00:34:14,639 --> 00:34:16,500
security reference monitor to actually

798
00:34:16,500 --> 00:34:18,780
craft the access token

799
00:34:18,780 --> 00:34:22,020
and we're gonna be interested in the

800
00:34:22,020 --> 00:34:24,659
account bits that will

801
00:34:24,659 --> 00:34:28,440
pretty much describe the type of account

802
00:34:28,440 --> 00:34:31,560
we are going to be creating so

803
00:34:31,560 --> 00:34:34,679
what I did so to impersonate an account

804
00:34:34,679 --> 00:34:37,739
is to leverage an attack that I released

805
00:34:37,739 --> 00:34:42,359
four years ago also at black hat 2018

806
00:34:42,359 --> 00:34:45,179
which is called rid hijacking

807
00:34:45,179 --> 00:34:48,359
so what we do with this attack is we

808
00:34:48,359 --> 00:34:50,760
abuse the way that the security

809
00:34:50,760 --> 00:34:53,219
reference monitor crafts the primary

810
00:34:53,219 --> 00:34:54,839
access token

811
00:34:54,839 --> 00:34:58,560
and the problem with the the pro the way

812
00:34:58,560 --> 00:35:01,080
that Windows creates this access token

813
00:35:01,080 --> 00:35:04,020
is that they base this creation

814
00:35:04,020 --> 00:35:06,960
and this particular rid copy that it's

815
00:35:06,960 --> 00:35:10,140
stored in the F binary so

816
00:35:10,140 --> 00:35:12,720
what I we are doing here it's specify

817
00:35:12,720 --> 00:35:15,900
what is the account that we that we want

818
00:35:15,900 --> 00:35:18,540
to impersonate I'm not gonna Deep dive

819
00:35:18,540 --> 00:35:20,099
in the details of the already hijacking

820
00:35:20,099 --> 00:35:21,900
if you if you want to take a look at

821
00:35:21,900 --> 00:35:23,940
this there are some

822
00:35:23,940 --> 00:35:26,940
blog post I have written about it but

823
00:35:26,940 --> 00:35:29,640
this is what we are doing to pretty much

824
00:35:29,640 --> 00:35:33,720
uh impersonate any account that it's uh

825
00:35:33,720 --> 00:35:35,520
in already there in the system that we

826
00:35:35,520 --> 00:35:37,619
are attacking okay

827
00:35:37,619 --> 00:35:40,020
so to sum it up what we are doing is

828
00:35:40,020 --> 00:35:43,440
okay we are somewhat forging the access

829
00:35:43,440 --> 00:35:47,099
token to impersonate any account in the

830
00:35:47,099 --> 00:35:50,579
system by leveraging the rad hijacking

831
00:35:50,579 --> 00:35:52,220
attack

832
00:35:52,220 --> 00:35:55,740
we are also creating a username with an

833
00:35:55,740 --> 00:35:58,140
appended dollar sign and try to write it

834
00:35:58,140 --> 00:36:00,480
to the B structure

835
00:36:00,480 --> 00:36:03,000
and we are oh sorry I forgot and we are

836
00:36:03,000 --> 00:36:04,800
also writing the data

837
00:36:04,800 --> 00:36:07,200
um of the password to the hash

838
00:36:07,200 --> 00:36:10,680
to the Sam hatch and writing that to the

839
00:36:10,680 --> 00:36:12,660
V structure right

840
00:36:12,660 --> 00:36:16,500
but wait yeah there's more so

841
00:36:16,500 --> 00:36:17,900
after this

842
00:36:17,900 --> 00:36:20,820
what we try to do was analyze exactly

843
00:36:20,820 --> 00:36:23,099
how

844
00:36:23,099 --> 00:36:27,960
the net user API actually describes

845
00:36:27,960 --> 00:36:30,599
the type of an account and how the type

846
00:36:30,599 --> 00:36:32,760
of account we are creating and how this

847
00:36:32,760 --> 00:36:34,619
reflects in the Sun

848
00:36:34,619 --> 00:36:36,359
so what I did is pretty much analyze

849
00:36:36,359 --> 00:36:38,280
okay this has to do with the account

850
00:36:38,280 --> 00:36:41,339
bits so this is pretty much the values

851
00:36:41,339 --> 00:36:43,859
of the the current values that are being

852
00:36:43,859 --> 00:36:46,800
used to describe some uh of the account

853
00:36:46,800 --> 00:36:48,900
types that we can create and the

854
00:36:48,900 --> 00:36:50,579
operating system

855
00:36:50,579 --> 00:36:52,500
so

856
00:36:52,500 --> 00:36:55,800
what we are doing here is

857
00:36:55,800 --> 00:36:58,740
try to understand okay

858
00:36:58,740 --> 00:37:01,140
if you remember the example that we took

859
00:37:01,140 --> 00:37:03,300
a look at at the very beginning when we

860
00:37:03,300 --> 00:37:05,940
try we try to craft our own account by

861
00:37:05,940 --> 00:37:10,680
specifying the Privileges and the flags

862
00:37:10,680 --> 00:37:13,800
what happens is that the net user

863
00:37:13,800 --> 00:37:17,700
netizer ad function it's gonna write the

864
00:37:17,700 --> 00:37:20,460
type of account in this particular part

865
00:37:20,460 --> 00:37:25,160
of the F binary so if we change

866
00:37:25,380 --> 00:37:28,500
um this value to let's say 80 this is

867
00:37:28,500 --> 00:37:30,240
going to be interpreted as a machine

868
00:37:30,240 --> 00:37:34,200
account right so to sum it up the simple

869
00:37:34,200 --> 00:37:36,119
the simple way to see the subordinary

870
00:37:36,119 --> 00:37:40,500
attack is this so we have a username

871
00:37:40,500 --> 00:37:43,380
that is going to be appended with the

872
00:37:43,380 --> 00:37:44,579
dollar sign so it's going to be

873
00:37:44,579 --> 00:37:47,579
interpreted as a managed service account

874
00:37:47,579 --> 00:37:51,300
we're gonna try to craft the ntlm hash

875
00:37:51,300 --> 00:37:53,400
and to a Sam hash and write it directly

876
00:37:53,400 --> 00:37:55,680
to the sum

877
00:37:55,680 --> 00:37:57,660
we are going to somehow leverage their

878
00:37:57,660 --> 00:38:01,380
ID hijacking to actually impersonate any

879
00:38:01,380 --> 00:38:04,020
account that it's already there

880
00:38:04,020 --> 00:38:06,960
and we're gonna leverage the account

881
00:38:06,960 --> 00:38:09,660
control bits to describe this account as

882
00:38:09,660 --> 00:38:11,880
a machine account

883
00:38:11,880 --> 00:38:17,940
so that that's the to border attack

884
00:38:17,940 --> 00:38:20,700
in this case uh

885
00:38:20,700 --> 00:38:22,920
we successfully created a custom account

886
00:38:22,920 --> 00:38:26,220
without using the win32 API limitations

887
00:38:26,220 --> 00:38:28,320
and as you can see

888
00:38:28,320 --> 00:38:30,900
we can we could modify some of the

889
00:38:30,900 --> 00:38:32,940
attributes that are not modifiable

890
00:38:32,940 --> 00:38:35,660
through the win32 API

891
00:38:35,660 --> 00:38:38,099
right in this case for instance we're

892
00:38:38,099 --> 00:38:40,140
modifying the rid that is being used for

893
00:38:40,140 --> 00:38:43,619
the primary access token degeneration

894
00:38:43,619 --> 00:38:46,859
so okay okay demo time

895
00:38:46,859 --> 00:38:49,740
um this is what I have developed to

896
00:38:49,740 --> 00:38:52,020
automatize the attack so what I did is

897
00:38:52,020 --> 00:38:56,359
create a c-sharp solution that will

898
00:38:56,359 --> 00:38:59,220
Forge this account it will try to craft

899
00:38:59,220 --> 00:39:01,619
all of the sound register crease keys

900
00:39:01,619 --> 00:39:04,740
that will describe and and

901
00:39:04,740 --> 00:39:07,800
local identity without call without the

902
00:39:07,800 --> 00:39:09,240
limits of the API

903
00:39:09,240 --> 00:39:12,000
and it works on all windows and 36

904
00:39:12,000 --> 00:39:13,920
entity systems

905
00:39:13,920 --> 00:39:16,200
so these are the parameters of the

906
00:39:16,200 --> 00:39:19,200
current tool oh right now we can create

907
00:39:19,200 --> 00:39:22,260
uh specify a username we can specify the

908
00:39:22,260 --> 00:39:23,760
password we want to set to this account

909
00:39:23,760 --> 00:39:27,599
we can specify the rid of this account

910
00:39:27,599 --> 00:39:30,680
we can also

911
00:39:30,680 --> 00:39:32,940
specify the account that we want to

912
00:39:32,940 --> 00:39:34,440
impersonate

913
00:39:34,440 --> 00:39:36,839
we are going to copy some of the values

914
00:39:36,839 --> 00:39:39,119
of an account on already sister and we

915
00:39:39,119 --> 00:39:41,820
can set that in the template parameter

916
00:39:41,820 --> 00:39:44,220
and we can also uh

917
00:39:44,220 --> 00:39:46,619
decide if we want to create this as a

918
00:39:46,619 --> 00:39:49,440
machine account or no

919
00:39:49,440 --> 00:39:51,720
this is going to be the demo scenario uh

920
00:39:51,720 --> 00:39:53,220
it's going to be super simple so it's

921
00:39:53,220 --> 00:39:55,380
going to be an attacker machine and a

922
00:39:55,380 --> 00:39:56,880
big the machine it's going to be a

923
00:39:56,880 --> 00:39:58,980
Windows 11 system that I have just

924
00:39:58,980 --> 00:40:02,339
updated like one hour ago

925
00:40:02,339 --> 00:40:04,800
um I do like the excitement of live

926
00:40:04,800 --> 00:40:10,099
demonstrations instead of videos so

927
00:40:10,380 --> 00:40:13,500
this is gonna be the

928
00:40:13,500 --> 00:40:15,960
attacking machine it's a black Arch

929
00:40:15,960 --> 00:40:17,760
Linux super simple this is going to be

930
00:40:17,760 --> 00:40:19,940
the

931
00:40:19,980 --> 00:40:22,920
um IP address of the machine

932
00:40:22,920 --> 00:40:24,960
so these machines are

933
00:40:24,960 --> 00:40:27,540
they have visibility one to each other

934
00:40:27,540 --> 00:40:31,040
and this is gonna be

935
00:40:32,579 --> 00:40:34,680
the windows 11 system we're gonna be

936
00:40:34,680 --> 00:40:36,359
attacking right

937
00:40:36,359 --> 00:40:38,760
so let's take a look first at the users

938
00:40:38,760 --> 00:40:41,520
that are here that users

939
00:40:41,520 --> 00:40:42,960
we'll see that we only have

940
00:40:42,960 --> 00:40:45,060
administrator account

941
00:40:45,060 --> 00:40:46,920
we have the user account that this is

942
00:40:46,920 --> 00:40:49,859
the one we are using using remember this

943
00:40:49,859 --> 00:40:51,720
is a persistence attack so we have

944
00:40:51,720 --> 00:40:53,520
already compromised the system we are

945
00:40:53,520 --> 00:40:56,579
trying to factor somehow this system in

946
00:40:56,579 --> 00:40:59,180
a stealthy way

947
00:40:59,400 --> 00:41:01,920
now let's take a look also of the early

948
00:41:01,920 --> 00:41:04,700
user manager

949
00:41:09,960 --> 00:41:13,619
oh sir

950
00:41:16,500 --> 00:41:18,960
so this is going to be another user

951
00:41:18,960 --> 00:41:21,900
interface that will show show us what

952
00:41:21,900 --> 00:41:24,359
identities are here we see that we don't

953
00:41:24,359 --> 00:41:27,980
see any work identity here

954
00:41:28,260 --> 00:41:29,579
um if we take a look at the

955
00:41:29,579 --> 00:41:31,619
administrator this is going to be the

956
00:41:31,619 --> 00:41:32,820
account that we are going to be

957
00:41:32,820 --> 00:41:34,320
impersonating

958
00:41:34,320 --> 00:41:36,180
we see here that this account is

959
00:41:36,180 --> 00:41:37,320
disabled

960
00:41:37,320 --> 00:41:40,320
but still despite of being disabled will

961
00:41:40,320 --> 00:41:42,540
have the capability of impersonating

962
00:41:42,540 --> 00:41:44,460
this account

963
00:41:44,460 --> 00:41:46,079
right

964
00:41:46,079 --> 00:41:49,980
let's also take a look at uh

965
00:41:49,980 --> 00:41:51,240
something that is really important let

966
00:41:51,240 --> 00:41:53,480
me show you that this is an updated

967
00:41:53,480 --> 00:41:56,660
Windows system

968
00:41:58,020 --> 00:42:00,540
I updated this like uh yeah one hour ago

969
00:42:00,540 --> 00:42:03,420
let me show you the patches here

970
00:42:03,420 --> 00:42:05,940
system info

971
00:42:05,940 --> 00:42:08,940
mm-hmm

972
00:42:09,060 --> 00:42:11,820
so these are the patches

973
00:42:11,820 --> 00:42:14,339
you want to double check

974
00:42:14,339 --> 00:42:16,320
oops

975
00:42:16,320 --> 00:42:17,839
okay

976
00:42:17,839 --> 00:42:21,020
all right

977
00:42:21,240 --> 00:42:24,119
so let's also take a look at the

978
00:42:24,119 --> 00:42:27,900
Windows 11 user management interface

979
00:42:27,900 --> 00:42:31,020
so if we take a look at the users here

980
00:42:31,020 --> 00:42:32,820
other users

981
00:42:32,820 --> 00:42:36,680
will not see any particular account

982
00:42:36,900 --> 00:42:37,680
um

983
00:42:37,680 --> 00:42:40,920
so yeah we only have these accounts and

984
00:42:40,920 --> 00:42:42,359
let's also take a look at the event

985
00:42:42,359 --> 00:42:44,960
lawyer

986
00:42:46,920 --> 00:42:48,839
this is the current status of the event

987
00:42:48,839 --> 00:42:52,079
logger we don't see any particular uh

988
00:42:52,079 --> 00:42:54,540
strange strange event so let me take

989
00:42:54,540 --> 00:42:57,320
this real quick

990
00:42:57,359 --> 00:42:59,280
there we go

991
00:42:59,280 --> 00:43:01,319
we don't see anything weird here let me

992
00:43:01,319 --> 00:43:03,900
some some a little bit

993
00:43:03,900 --> 00:43:06,060
this is the current status we're going

994
00:43:06,060 --> 00:43:08,160
to see in a particular event ID

995
00:43:08,160 --> 00:43:10,560
I'm sorry about that line I told you I'm

996
00:43:10,560 --> 00:43:12,240
terrible at Microsoft Paint and you know

997
00:43:12,240 --> 00:43:13,619
drawing

998
00:43:13,619 --> 00:43:14,819
um

999
00:43:14,819 --> 00:43:18,060
so yeah this is it

1000
00:43:18,060 --> 00:43:20,520
so what we are gonna do

1001
00:43:20,520 --> 00:43:23,220
is try to create a subordinary account

1002
00:43:23,220 --> 00:43:25,079
right

1003
00:43:25,079 --> 00:43:26,640
so

1004
00:43:26,640 --> 00:43:30,060
I'm gonna be using crack my backsec to

1005
00:43:30,060 --> 00:43:33,540
uh validate that we have created this

1006
00:43:33,540 --> 00:43:34,440
account

1007
00:43:34,440 --> 00:43:37,619
so this is a target IP address

1008
00:43:37,619 --> 00:43:39,720
the account we are going to be creating

1009
00:43:39,720 --> 00:43:42,599
is suborner dollar sign and the password

1010
00:43:42,599 --> 00:43:45,720
is going to be password.1 and we are

1011
00:43:45,720 --> 00:43:47,339
going to be trying to query the LSA

1012
00:43:47,339 --> 00:43:50,099
Secrets right so

1013
00:43:50,099 --> 00:43:52,319
let's try to run this command just to

1014
00:43:52,319 --> 00:43:53,940
show you that I have not

1015
00:43:53,940 --> 00:43:56,940
somehow created this account

1016
00:43:56,940 --> 00:43:59,160
before the demonstration right so we'll

1017
00:43:59,160 --> 00:44:01,380
see here that for sure we don't have

1018
00:44:01,380 --> 00:44:02,640
access

1019
00:44:02,640 --> 00:44:06,119
we see the status log on failure

1020
00:44:06,119 --> 00:44:07,680
because of course this account does not

1021
00:44:07,680 --> 00:44:08,940
exist

1022
00:44:08,940 --> 00:44:11,040
right

1023
00:44:11,040 --> 00:44:14,099
so if we try to burn windows we can use

1024
00:44:14,099 --> 00:44:16,560
the solution I have double load and C

1025
00:44:16,560 --> 00:44:18,980
sharp

1026
00:44:19,980 --> 00:44:22,380
you can specify the username in this

1027
00:44:22,380 --> 00:44:25,640
case it's going to be subordinary

1028
00:44:27,619 --> 00:44:31,200
let me extend this a little bit

1029
00:44:31,200 --> 00:44:34,859
and password is gonna be password dot

1030
00:44:34,859 --> 00:44:36,660
one right

1031
00:44:36,660 --> 00:44:39,119
and we're all set we have just created

1032
00:44:39,119 --> 00:44:40,800
our own account we can see some of the

1033
00:44:40,800 --> 00:44:42,540
details here

1034
00:44:42,540 --> 00:44:45,359
we are creating this account uh to

1035
00:44:45,359 --> 00:44:47,220
bordner dollar sign we're specifying the

1036
00:44:47,220 --> 00:44:48,180
password

1037
00:44:48,180 --> 00:44:50,099
the rid is going to be automatically

1038
00:44:50,099 --> 00:44:51,720
assigned based on the accounts that

1039
00:44:51,720 --> 00:44:53,280
already sister

1040
00:44:53,280 --> 00:44:55,980
by default it's going to be uh trying to

1041
00:44:55,980 --> 00:44:58,220
impersonate the

1042
00:44:58,220 --> 00:45:01,920
500 rid account which is uh is the

1043
00:45:01,920 --> 00:45:03,839
built-in administrator

1044
00:45:03,839 --> 00:45:06,119
and it's going to try to copy all of the

1045
00:45:06,119 --> 00:45:08,280
other

1046
00:45:08,280 --> 00:45:10,319
attributes of the account and we're

1047
00:45:10,319 --> 00:45:11,760
going to specify that this account is

1048
00:45:11,760 --> 00:45:13,440
going to be a machine account

1049
00:45:13,440 --> 00:45:14,760
we are creating the account we're

1050
00:45:14,760 --> 00:45:17,099
forging each uh you have a key and the

1051
00:45:17,099 --> 00:45:19,859
Via key V key or encrypting password and

1052
00:45:19,859 --> 00:45:22,200
writing the changes to registry so yeah

1053
00:45:22,200 --> 00:45:24,839
let's take a look at the first at the

1054
00:45:24,839 --> 00:45:26,339
event logger

1055
00:45:26,339 --> 00:45:29,180
so let's try to

1056
00:45:29,180 --> 00:45:34,399
see if there's any change here

1057
00:45:35,400 --> 00:45:39,440
okay there's something what is this

1058
00:45:42,240 --> 00:45:46,500
so this is the crap of exit uh attempt

1059
00:45:46,500 --> 00:45:48,839
that we had early right that's the only

1060
00:45:48,839 --> 00:45:51,440
change we have

1061
00:45:52,020 --> 00:45:54,440
right

1062
00:45:54,599 --> 00:45:56,520
but aside from that we don't see any you

1063
00:45:56,520 --> 00:45:58,800
know 4720 or any particular event that

1064
00:45:58,800 --> 00:46:01,020
describe that an account has been

1065
00:46:01,020 --> 00:46:03,000
created

1066
00:46:03,000 --> 00:46:04,440
right

1067
00:46:04,440 --> 00:46:07,380
let's take a look at the

1068
00:46:07,380 --> 00:46:09,960
account itself uh

1069
00:46:09,960 --> 00:46:11,220
here

1070
00:46:11,220 --> 00:46:14,280
yeah net users

1071
00:46:14,280 --> 00:46:17,220
so we're gonna see that there are no any

1072
00:46:17,220 --> 00:46:19,440
supporter account we have the same

1073
00:46:19,440 --> 00:46:21,000
accounts that we

1074
00:46:21,000 --> 00:46:23,400
had before actually executing this

1075
00:46:23,400 --> 00:46:24,300
program

1076
00:46:24,300 --> 00:46:26,339
if we take a look also at the user

1077
00:46:26,339 --> 00:46:29,900
interface here let me open this again

1078
00:46:29,900 --> 00:46:33,740
for it to refresh

1079
00:46:35,700 --> 00:46:38,099
we're gonna see that

1080
00:46:38,099 --> 00:46:40,319
there is no subordinary account here

1081
00:46:40,319 --> 00:46:42,680
either

1082
00:46:42,920 --> 00:46:44,940
administrator account this is still

1083
00:46:44,940 --> 00:46:48,420
disabled we haven't changed that

1084
00:46:48,420 --> 00:46:50,960
right

1085
00:46:51,720 --> 00:46:55,020
let's take a look also at the windows 11

1086
00:46:55,020 --> 00:46:57,420
user management application which is the

1087
00:46:57,420 --> 00:46:59,579
users

1088
00:46:59,579 --> 00:47:01,140
other users

1089
00:47:01,140 --> 00:47:06,000
so let me try to come to accounts it's

1090
00:47:06,000 --> 00:47:09,599
going to be a user and oops sorry and

1091
00:47:09,599 --> 00:47:11,940
family and other users yeah we don't see

1092
00:47:11,940 --> 00:47:15,599
the account we have just created but

1093
00:47:15,599 --> 00:47:19,859
if we try to run this command again

1094
00:47:19,859 --> 00:47:23,520
same command user supporter password and

1095
00:47:23,520 --> 00:47:25,079
LSA

1096
00:47:25,079 --> 00:47:26,160
they're going to be successfully

1097
00:47:26,160 --> 00:47:28,140
connecting to the account and retrieving

1098
00:47:28,140 --> 00:47:30,660
the LSA information right

1099
00:47:30,660 --> 00:47:34,980
we can also try to connect with PSX

1100
00:47:34,980 --> 00:47:36,680
with the same account

1101
00:47:36,680 --> 00:47:39,540
subordinary password.1

1102
00:47:39,540 --> 00:47:42,259
let's define

1103
00:47:43,400 --> 00:47:46,260
that we successfully have a common

1104
00:47:46,260 --> 00:47:47,940
prompt a remote command prompt with

1105
00:47:47,940 --> 00:47:50,220
these particular credentials if we take

1106
00:47:50,220 --> 00:47:52,680
a look at net users we will not see the

1107
00:47:52,680 --> 00:47:54,359
account even after a successful

1108
00:47:54,359 --> 00:47:56,819
authentication if we try to take a look

1109
00:47:56,819 --> 00:47:58,440
at the actual let's say let's use

1110
00:47:58,440 --> 00:48:01,099
Virtual Warner

1111
00:48:01,500 --> 00:48:03,660
we'll see that there's no such user to

1112
00:48:03,660 --> 00:48:06,240
burner right

1113
00:48:06,240 --> 00:48:10,459
we take a look at the net local group

1114
00:48:10,619 --> 00:48:13,619
administrators

1115
00:48:14,280 --> 00:48:16,920
will not see the also border account but

1116
00:48:16,920 --> 00:48:18,540
despite of

1117
00:48:18,540 --> 00:48:23,099
not being there we have successfully got

1118
00:48:23,099 --> 00:48:25,700
uh High privileged

1119
00:48:25,700 --> 00:48:28,980
common prompt against the victim so this

1120
00:48:28,980 --> 00:48:30,660
is how it looks like

1121
00:48:30,660 --> 00:48:32,400
I'm glad the live demonstration worked

1122
00:48:32,400 --> 00:48:34,619
well

1123
00:48:34,619 --> 00:48:36,660
um so yeah let's jump back

1124
00:48:36,660 --> 00:48:38,040
you know yeah I like the excitement of

1125
00:48:38,040 --> 00:48:39,540
doing live demonstration instead of

1126
00:48:39,540 --> 00:48:42,240
videos so yeah

1127
00:48:42,240 --> 00:48:42,900
um

1128
00:48:42,900 --> 00:48:44,640
of course I had a video you know just a

1129
00:48:44,640 --> 00:48:47,220
backup but yeah I'm glad it worked so

1130
00:48:47,220 --> 00:48:49,500
yeah uh so what's next for this attack

1131
00:48:49,500 --> 00:48:52,859
of course I communicated this the msft

1132
00:48:52,859 --> 00:48:55,920
into the response team

1133
00:48:55,920 --> 00:48:58,560
um I talked to them before releasing

1134
00:48:58,560 --> 00:49:01,319
this to black hat but and they told me

1135
00:49:01,319 --> 00:49:03,540
that this is a persistence attack and it

1136
00:49:03,540 --> 00:49:05,460
makes sense we have already compromised

1137
00:49:05,460 --> 00:49:08,280
system this is not considered as an

1138
00:49:08,280 --> 00:49:10,619
actual vulnerability it's more like it's

1139
00:49:10,619 --> 00:49:13,619
a persistence inspector so I would think

1140
00:49:13,619 --> 00:49:16,140
that they are not planning to patch this

1141
00:49:16,140 --> 00:49:20,520
uh in the near future right

1142
00:49:20,819 --> 00:49:24,960
so it's all bad so uh one month ago

1143
00:49:24,960 --> 00:49:27,480
um I was thinking that probably this

1144
00:49:27,480 --> 00:49:29,940
type of accounts can be leveraged and as

1145
00:49:29,940 --> 00:49:33,839
a let's say uh offensive defensive way

1146
00:49:33,839 --> 00:49:38,099
to our trick adversaries uh let's say

1147
00:49:38,099 --> 00:49:40,380
you can you can be an assist admin that

1148
00:49:40,380 --> 00:49:43,079
can try to forge one of these hidden

1149
00:49:43,079 --> 00:49:44,700
accounts and uh

1150
00:49:44,700 --> 00:49:47,579
uh hide them from the from adversaries

1151
00:49:47,579 --> 00:49:49,079
and you can use them to pretty much uh

1152
00:49:49,079 --> 00:49:50,940
you know try to run services or anything

1153
00:49:50,940 --> 00:49:52,740
that it's useful for your uh the

1154
00:49:52,740 --> 00:49:56,220
functionality of uh of your system

1155
00:49:56,220 --> 00:49:58,380
this of course can be detected when it's

1156
00:49:58,380 --> 00:50:00,119
by inspection

1157
00:50:00,119 --> 00:50:02,640
um I know for sure that some uh friends

1158
00:50:02,640 --> 00:50:05,460
of mine are are working on finding new

1159
00:50:05,460 --> 00:50:07,560
ways to detect this uh you know the

1160
00:50:07,560 --> 00:50:10,020
pattern that the current solution uh to

1161
00:50:10,020 --> 00:50:12,660
burn our solution tries to leverage but

1162
00:50:12,660 --> 00:50:15,540
ideally what I'm trying to do is uh you

1163
00:50:15,540 --> 00:50:16,980
know improve the way that we are

1164
00:50:16,980 --> 00:50:19,619
fortunately the this account uh so the

1165
00:50:19,619 --> 00:50:21,540
automated detection is going to be

1166
00:50:21,540 --> 00:50:23,760
harder ideal in the future and even

1167
00:50:23,760 --> 00:50:26,940
though this is not a local account it's

1168
00:50:26,940 --> 00:50:29,819
definitely useful in uh and you know

1169
00:50:29,819 --> 00:50:31,980
active regulatory environments right of

1170
00:50:31,980 --> 00:50:34,920
course this doesn't work in a against

1171
00:50:34,920 --> 00:50:36,900
domain controllers because the

1172
00:50:36,900 --> 00:50:39,180
authentication there it's different we

1173
00:50:39,180 --> 00:50:41,720
don't actually use the msb10

1174
00:50:41,720 --> 00:50:44,339
authentication provider so there's node

1175
00:50:44,339 --> 00:50:47,280
actually you cannot patch that directly

1176
00:50:47,280 --> 00:50:48,900
a domain controller but you can patch

1177
00:50:48,900 --> 00:50:50,880
anything like a server worker station

1178
00:50:50,880 --> 00:50:53,400
that it's already there

1179
00:50:53,400 --> 00:50:55,800
so what's next ideally what I want to do

1180
00:50:55,800 --> 00:50:58,740
it's I don't want to rely on the win32

1181
00:50:58,740 --> 00:50:59,940
API

1182
00:50:59,940 --> 00:51:02,339
to create local accounts what I want to

1183
00:51:02,339 --> 00:51:05,280
do is pretty much have total control of

1184
00:51:05,280 --> 00:51:08,099
each of the attributes that a local

1185
00:51:08,099 --> 00:51:11,460
account has without relying on the you

1186
00:51:11,460 --> 00:51:14,579
know on the API and its limits

1187
00:51:14,579 --> 00:51:17,220
this is the initial Vector that I I

1188
00:51:17,220 --> 00:51:19,800
found but ideally what I want to do is

1189
00:51:19,800 --> 00:51:22,380
use this somewhat like let's say like a

1190
00:51:22,380 --> 00:51:25,140
harness for fussing and try to find if

1191
00:51:25,140 --> 00:51:27,660
there's any particular

1192
00:51:27,660 --> 00:51:30,059
um you know different type of account

1193
00:51:30,059 --> 00:51:32,420
that we can create based on the

1194
00:51:32,420 --> 00:51:35,579
attributes that now we can control

1195
00:51:35,579 --> 00:51:38,400
right and probably this can be useful to

1196
00:51:38,400 --> 00:51:40,800
find right now we are creating invisible

1197
00:51:40,800 --> 00:51:44,280
accounts that can be detected by some

1198
00:51:44,280 --> 00:51:46,680
patterns but probably can end up finding

1199
00:51:46,680 --> 00:51:48,960
any other type of account with different

1200
00:51:48,960 --> 00:51:51,059
properties that we are not aware of

1201
00:51:51,059 --> 00:51:52,440
right

1202
00:51:52,440 --> 00:51:55,559
and that's it yeah it's uh I hope you

1203
00:51:55,559 --> 00:51:58,500
enjoyed this talk as much as I do I hope

1204
00:51:58,500 --> 00:52:02,099
you uh are uh as excited as me to try

1205
00:52:02,099 --> 00:52:05,220
this new tool all for yourselves and

1206
00:52:05,220 --> 00:52:08,040
yeah let's uh try to support the planet

1207
00:52:08,040 --> 00:52:10,880
and uh do some references about the talk

1208
00:52:10,880 --> 00:52:13,200
and these are some details if you want

1209
00:52:13,200 --> 00:52:14,760
to take a look at the GitHub repository

1210
00:52:14,760 --> 00:52:17,460
of the tool if you trust me you can

1211
00:52:17,460 --> 00:52:20,880
understand that QR code there's going to

1212
00:52:20,880 --> 00:52:22,260
be the blog post there's going to be the

1213
00:52:22,260 --> 00:52:25,440
GitHub uh that's information and thank

1214
00:52:25,440 --> 00:52:27,780
you so much for coming it's my pleasure

1215
00:52:27,780 --> 00:52:31,280
and I hope you enjoyed it

1216
00:52:34,160 --> 00:52:36,960
foreign thank you I think we've got some

1217
00:52:36,960 --> 00:52:38,880
questions

1218
00:52:38,880 --> 00:52:41,040
um so it's the only way to detect this

1219
00:52:41,040 --> 00:52:43,380
is scaffold auditing of user accounts in

1220
00:52:43,380 --> 00:52:45,359
the same registry

1221
00:52:45,359 --> 00:52:47,460
as far as I know

1222
00:52:47,460 --> 00:52:49,740
yes I know that there are some people

1223
00:52:49,740 --> 00:52:53,280
working on some Powershell solutions to

1224
00:52:53,280 --> 00:52:55,079
actually

1225
00:52:55,079 --> 00:52:55,819
um

1226
00:52:55,819 --> 00:52:59,040
analyze the way we are writing directly

1227
00:52:59,040 --> 00:53:00,660
to the to the

1228
00:53:00,660 --> 00:53:03,059
to the Sun I know there are some

1229
00:53:03,059 --> 00:53:04,380
solutions that

1230
00:53:04,380 --> 00:53:05,940
uh

1231
00:53:05,940 --> 00:53:08,460
try to trace

1232
00:53:08,460 --> 00:53:11,839
let's say um

1233
00:53:12,900 --> 00:53:15,059
the registry values that are being used

1234
00:53:15,059 --> 00:53:18,300
to uh graft the Sam hash you know so

1235
00:53:18,300 --> 00:53:20,339
whenever you are let's say using

1236
00:53:20,339 --> 00:53:22,680
mimikats and you try to extract the

1237
00:53:22,680 --> 00:53:24,599
secrets from the sum you need to

1238
00:53:24,599 --> 00:53:27,000
particularly extract some values that

1239
00:53:27,000 --> 00:53:28,980
are stored in a certain places in the

1240
00:53:28,980 --> 00:53:31,260
registry so there are some tools that

1241
00:53:31,260 --> 00:53:34,079
they're actually leveraging that so for

1242
00:53:34,079 --> 00:53:38,099
now it's not only auditing the some

1243
00:53:38,099 --> 00:53:41,520
registry uh in the sense of the user

1244
00:53:41,520 --> 00:53:44,460
accounts data but also the let's say the

1245
00:53:44,460 --> 00:53:46,319
registry hives that are being queried

1246
00:53:46,319 --> 00:53:48,900
but some tools like mimikats when they

1247
00:53:48,900 --> 00:53:51,240
try to for instance uh extract the

1248
00:53:51,240 --> 00:53:54,599
secrets uh and try to you know decrypt

1249
00:53:54,599 --> 00:53:56,339
the Sam hash to the ntlm hash I know

1250
00:53:56,339 --> 00:53:57,960
that there are some some solutions that

1251
00:53:57,960 --> 00:54:00,240
extract this data from different values

1252
00:54:00,240 --> 00:54:03,839
that the uh some register types that

1253
00:54:03,839 --> 00:54:05,520
have directly to do with the user

1254
00:54:05,520 --> 00:54:08,400
account if that makes sense

1255
00:54:08,400 --> 00:54:09,900
there's a person who asked this question

1256
00:54:09,900 --> 00:54:11,400
here

1257
00:54:11,400 --> 00:54:14,220
okay I'll give you a gift shortly

1258
00:54:14,220 --> 00:54:16,740
um the next question so it avoids the

1259
00:54:16,740 --> 00:54:19,440
windows user account creation event 4720

1260
00:54:19,440 --> 00:54:21,359
but when using the Invincible account

1261
00:54:21,359 --> 00:54:23,760
remotely would there be a Windows user

1262
00:54:23,760 --> 00:54:24,920
logon event

1263
00:54:24,920 --> 00:54:28,740
so yes this is going to be interesting

1264
00:54:28,740 --> 00:54:32,040
because uh the event is gonna be

1265
00:54:32,040 --> 00:54:35,339
registered not as the account we have

1266
00:54:35,339 --> 00:54:36,660
created

1267
00:54:36,660 --> 00:54:38,400
so that's the account we are

1268
00:54:38,400 --> 00:54:42,420
impersonating right so pretty much what

1269
00:54:42,420 --> 00:54:45,599
I'm doing is trying to authenticate with

1270
00:54:45,599 --> 00:54:48,420
the supporter account and right now I'm

1271
00:54:48,420 --> 00:54:50,220
impersonating the administrator account

1272
00:54:50,220 --> 00:54:53,819
that it's disabled by default right

1273
00:54:53,819 --> 00:54:55,740
so that's easy to detect you know if

1274
00:54:55,740 --> 00:54:57,660
someone is trying to log on with an

1275
00:54:57,660 --> 00:54:59,640
account that it's disabled that's kind

1276
00:54:59,640 --> 00:55:02,220
of weird but this is for example right

1277
00:55:02,220 --> 00:55:04,859
but if instead you impersonate an

1278
00:55:04,859 --> 00:55:07,619
account that it's already there the the

1279
00:55:07,619 --> 00:55:09,599
logon is going to be registered with

1280
00:55:09,599 --> 00:55:11,880
that account right so of course I'm sure

1281
00:55:11,880 --> 00:55:14,579
there's going to be some uh tooling that

1282
00:55:14,579 --> 00:55:16,319
will try to detect some weird behavior

1283
00:55:16,319 --> 00:55:18,480
in the Windows Event log but for now we

1284
00:55:18,480 --> 00:55:20,880
are pretty much impersonating uh these

1285
00:55:20,880 --> 00:55:23,040
accounts right so yeah great question so

1286
00:55:23,040 --> 00:55:25,140
whoever who asked that yeah

1287
00:55:25,140 --> 00:55:28,559
uh who asked that question you as well

1288
00:55:28,559 --> 00:55:30,599
yeah

1289
00:55:30,599 --> 00:55:33,119
um can you log in my RDP and windows log

1290
00:55:33,119 --> 00:55:36,900
on screen too so yes but this depends on

1291
00:55:36,900 --> 00:55:39,119
the account you are crafting as far as I

1292
00:55:39,119 --> 00:55:40,559
have tried

1293
00:55:40,559 --> 00:55:43,200
um machine accounts oops sorry machine

1294
00:55:43,200 --> 00:55:46,920
accounts don't have the

1295
00:55:46,920 --> 00:55:49,260
interactive logon that is being used by

1296
00:55:49,260 --> 00:55:51,839
RDP and log on the screen

1297
00:55:51,839 --> 00:55:55,680
so what you may want to do is create

1298
00:55:55,680 --> 00:55:58,440
this account by setting the flag as a

1299
00:55:58,440 --> 00:56:01,260
machine account as false you will lose

1300
00:56:01,260 --> 00:56:04,800
some stealthiness but you'll have the

1301
00:56:04,800 --> 00:56:07,500
capabilities of login interactively via

1302
00:56:07,500 --> 00:56:11,040
rgp and a login screen right I'm sure

1303
00:56:11,040 --> 00:56:13,440
I'm I'm trying to find if there's any

1304
00:56:13,440 --> 00:56:15,780
particular account control bit that I

1305
00:56:15,780 --> 00:56:17,819
can modify that will allow me to

1306
00:56:17,819 --> 00:56:20,640
authenticate interactively and remotely

1307
00:56:20,640 --> 00:56:22,800
as we have shown here

1308
00:56:22,800 --> 00:56:25,020
do you know Windows network based logins

1309
00:56:25,020 --> 00:56:26,819
would there be logs or still no logs for

1310
00:56:26,819 --> 00:56:29,280
64 465.

1311
00:56:29,280 --> 00:56:32,700
um you mean for for interactive logon

1312
00:56:32,700 --> 00:56:34,079
um I think it's going to be the same

1313
00:56:34,079 --> 00:56:36,300
behavior I haven't tried the you know

1314
00:56:36,300 --> 00:56:39,420
interactive logons uh just just yet but

1315
00:56:39,420 --> 00:56:41,640
my guess is that it's gonna be uh the

1316
00:56:41,640 --> 00:56:43,559
same behavior but I mean yeah feel free

1317
00:56:43,559 --> 00:56:46,020
to try and please let me know I mean uh

1318
00:56:46,020 --> 00:56:49,099
this was that question

1319
00:56:49,260 --> 00:56:50,940
okay

1320
00:56:50,940 --> 00:56:52,380
um and the last question if the user

1321
00:56:52,380 --> 00:56:54,599
account is so hidden invisible how then

1322
00:56:54,599 --> 00:56:56,700
can such a persistent be removed or

1323
00:56:56,700 --> 00:56:59,000
remediated

1324
00:56:59,000 --> 00:57:03,859
oh then okay so

1325
00:57:03,900 --> 00:57:07,020
ideally what you want to do here is

1326
00:57:07,020 --> 00:57:08,819
constantly monitor the sum register you

1327
00:57:08,819 --> 00:57:11,520
have and look for

1328
00:57:11,520 --> 00:57:12,420
um

1329
00:57:12,420 --> 00:57:15,359
any particular change in the registry

1330
00:57:15,359 --> 00:57:19,140
Hive that contains the user accounts

1331
00:57:19,140 --> 00:57:21,599
information right so we are actually

1332
00:57:21,599 --> 00:57:24,720
crafting an account all by ourselves

1333
00:57:24,720 --> 00:57:27,240
so what you can do is after monitoring

1334
00:57:27,240 --> 00:57:28,920
if there's any change

1335
00:57:28,920 --> 00:57:30,900
any new account that has been created

1336
00:57:30,900 --> 00:57:34,079
without using the net user API

1337
00:57:34,079 --> 00:57:37,380
or any API that is intended to create a

1338
00:57:37,380 --> 00:57:40,380
new identities you should remove that

1339
00:57:40,380 --> 00:57:41,640
right

1340
00:57:41,640 --> 00:57:44,700
so this attack for now is creating new

1341
00:57:44,700 --> 00:57:47,880
accounts ideally what what I'm planning

1342
00:57:47,880 --> 00:57:50,460
to do okay it's it's easy to detect like

1343
00:57:50,460 --> 00:57:52,200
okay we have created an account we have

1344
00:57:52,200 --> 00:57:55,319
created a new identity but with this you

1345
00:57:55,319 --> 00:57:57,960
can also somehow modify the attributes

1346
00:57:57,960 --> 00:57:59,640
of the accounts that are already there

1347
00:57:59,640 --> 00:58:01,260
right

1348
00:58:01,260 --> 00:58:04,140
so that's the next step as well I forgot

1349
00:58:04,140 --> 00:58:05,760
to mention but this question remind me

1350
00:58:05,760 --> 00:58:08,339
reminded me to to I mean to talk about

1351
00:58:08,339 --> 00:58:10,140
that like right now we are creating

1352
00:58:10,140 --> 00:58:13,380
accounts but after that after this we

1353
00:58:13,380 --> 00:58:15,359
can try to use this tool to modify

1354
00:58:15,359 --> 00:58:18,240
accounts that that are already there

1355
00:58:18,240 --> 00:58:20,460
so we will get some more stealthiness

1356
00:58:20,460 --> 00:58:22,680
without you know writing a whole new

1357
00:58:22,680 --> 00:58:24,480
account data

1358
00:58:24,480 --> 00:58:26,160
that solves the question

1359
00:58:26,160 --> 00:58:28,619
all right thank you um any more

1360
00:58:28,619 --> 00:58:29,700
questions

1361
00:58:29,700 --> 00:58:31,740
sure

1362
00:58:31,740 --> 00:58:34,740
yes

1363
00:58:36,299 --> 00:58:39,119
yes yes that's a great question I I

1364
00:58:39,119 --> 00:58:41,819
think I mentioned that in a the very

1365
00:58:41,819 --> 00:58:44,099
beginning of the of the tooling I was

1366
00:58:44,099 --> 00:58:46,920
talking about they have described they

1367
00:58:46,920 --> 00:58:49,440
have described some instructions

1368
00:58:49,440 --> 00:58:50,339
um

1369
00:58:50,339 --> 00:58:52,319
some functions some functionality is to

1370
00:58:52,319 --> 00:58:53,339
actually

1371
00:58:53,339 --> 00:58:54,420
change

1372
00:58:54,420 --> 00:58:57,599
the ntlm hash that actually they uh that

1373
00:58:57,599 --> 00:58:59,160
tool is an open source tool that

1374
00:58:59,160 --> 00:59:00,780
contains some of the

1375
00:59:00,780 --> 00:59:03,660
structures I leveraged here to extract

1376
00:59:03,660 --> 00:59:06,480
and uh and write the data I know that

1377
00:59:06,480 --> 00:59:09,000
they can modify the password and I know

1378
00:59:09,000 --> 00:59:10,319
they can uh

1379
00:59:10,319 --> 00:59:13,079
for the latest versions of Windows they

1380
00:59:13,079 --> 00:59:17,099
can remove the password by removing the

1381
00:59:17,099 --> 00:59:20,160
ntlm hash I mean the same hash key that

1382
00:59:20,160 --> 00:59:22,140
is stored in the same but they they

1383
00:59:22,140 --> 00:59:23,819
don't have the capability of creating

1384
00:59:23,819 --> 00:59:25,559
new accounts they have the the

1385
00:59:25,559 --> 00:59:29,640
possibility of uh writing a new uh a new

1386
00:59:29,640 --> 00:59:32,040
password and removing the password that

1387
00:59:32,040 --> 00:59:34,559
I think that's the initial uh intention

1388
00:59:34,559 --> 00:59:36,839
that the principal or intention of the

1389
00:59:36,839 --> 00:59:38,819
program like changing passwords but yeah

1390
00:59:38,819 --> 00:59:40,200
I heavily

1391
00:59:40,200 --> 00:59:41,640
um I mean took I took some information

1392
00:59:41,640 --> 00:59:44,359
from for this tooling to from the change

1393
00:59:44,359 --> 00:59:47,400
change password the solution the Linux

1394
00:59:47,400 --> 00:59:50,540
solution yes

1395
00:59:50,579 --> 00:59:52,819
foreign

1396
00:59:56,099 --> 00:59:58,380
does it list your newly created account

1397
00:59:58,380 --> 01:00:01,260
after you've run sabona and if you run

1398
01:00:01,260 --> 01:00:03,660
oh and listen listen to this I haven't

1399
01:00:03,660 --> 01:00:06,780
tried that I haven't used the the that

1400
01:00:06,780 --> 01:00:10,020
tool to to detect this new account but

1401
01:00:10,020 --> 01:00:11,940
that that's something that I like to try

1402
01:00:11,940 --> 01:00:14,160
yeah I haven't tried that I thought okay

1403
01:00:14,160 --> 01:00:16,200
okay yeah probably probably we can use

1404
01:00:16,200 --> 01:00:17,520
that tool to detect this type of

1405
01:00:17,520 --> 01:00:21,180
accounts yes but I haven't tried it

1406
01:00:21,180 --> 01:00:23,280
thank you all right and we just have one

1407
01:00:23,280 --> 01:00:25,260
more question that came up can net API

1408
01:00:25,260 --> 01:00:29,420
32 be used to remove such accounts

1409
01:00:29,520 --> 01:00:31,640
um

1410
01:00:34,400 --> 01:00:37,859
I don't I haven't tried it I mean we can

1411
01:00:37,859 --> 01:00:39,420
try that right now we have to set up but

1412
01:00:39,420 --> 01:00:41,339
uh

1413
01:00:41,339 --> 01:00:44,220
I haven't used you know net user this

1414
01:00:44,220 --> 01:00:45,720
particular account on delete I don't

1415
01:00:45,720 --> 01:00:47,339
think it's gonna work

1416
01:00:47,339 --> 01:00:49,559
uh because the account is not being

1417
01:00:49,559 --> 01:00:52,859
listed you know if you remember we uh oh

1418
01:00:52,859 --> 01:00:54,059
you want me to try it okay yeah let's

1419
01:00:54,059 --> 01:00:55,680
try it um

1420
01:00:55,680 --> 01:00:56,579
foreign

1421
01:00:56,579 --> 01:00:58,140
yeah so

1422
01:00:58,140 --> 01:00:59,520
um

1423
01:00:59,520 --> 01:01:00,780
yeah

1424
01:01:00,780 --> 01:01:03,180
I don't know that's a good question yeah

1425
01:01:03,180 --> 01:01:04,319
that's a good thing for the live

1426
01:01:04,319 --> 01:01:06,839
demonstrations you can solve

1427
01:01:06,839 --> 01:01:11,460
so let user subordinary slash tail

1428
01:01:11,460 --> 01:01:12,839
there's no such user until yeah

1429
01:01:12,839 --> 01:01:15,359
apparently you cannot remove it good

1430
01:01:15,359 --> 01:01:17,700
question yeah but apparently you cannot

1431
01:01:17,700 --> 01:01:20,099
remove them with this approach let's

1432
01:01:20,099 --> 01:01:23,599
double check if you we still have access

1433
01:01:23,599 --> 01:01:26,760
yep no we're still there so could you

1434
01:01:26,760 --> 01:01:28,559
show us the event logs from the last

1435
01:01:28,559 --> 01:01:29,940
login

1436
01:01:29,940 --> 01:01:31,680
um the remote login that you did sure

1437
01:01:31,680 --> 01:01:34,640
yeah um

1438
01:01:37,400 --> 01:01:41,180
let me see

1439
01:01:50,460 --> 01:01:53,040
oh no where is this

1440
01:01:53,040 --> 01:01:56,299
oh this one okay

1441
01:01:56,819 --> 01:01:59,480
here

1442
01:02:01,380 --> 01:02:04,099
you go

1443
01:02:11,640 --> 01:02:14,220
any particular thing you wanna

1444
01:02:14,220 --> 01:02:16,500
I'm guessing that it's the the special

1445
01:02:16,500 --> 01:02:19,079
login that's being shown is that

1446
01:02:19,079 --> 01:02:21,059
um your account logging in and does that

1447
01:02:21,059 --> 01:02:22,859
show up as uh the administrator account

1448
01:02:22,859 --> 01:02:24,900
now

1449
01:02:24,900 --> 01:02:27,299
see

1450
01:02:27,299 --> 01:02:30,299
details

1451
01:02:30,780 --> 01:02:33,380
oops

1452
01:02:44,000 --> 01:02:46,740
it's fine

1453
01:02:46,740 --> 01:02:48,660
okay

1454
01:02:48,660 --> 01:02:52,399
yeah hold on I done

1455
01:02:55,980 --> 01:02:58,380
I mean yeah let me show you that later

1456
01:02:58,380 --> 01:03:00,000
because

1457
01:03:00,000 --> 01:03:03,680
I don't know what's going on hold on

1458
01:03:05,339 --> 01:03:09,078
I'm trying to yeah like

1459
01:03:11,700 --> 01:03:14,160
oops oh no I'm okay I'm running out of

1460
01:03:14,160 --> 01:03:16,380
time but uh yeah let me show you right

1461
01:03:16,380 --> 01:03:18,599
now it's it's fine but

1462
01:03:18,599 --> 01:03:20,160
foreign

1463
01:03:20,160 --> 01:03:22,740
sure sure yeah but yeah thank you so

1464
01:03:22,740 --> 01:03:24,240
much any other question you you guys

1465
01:03:24,240 --> 01:03:26,419
have

1466
01:03:29,280 --> 01:03:30,720
no

1467
01:03:30,720 --> 01:03:34,040
sorry with the okay

1468
01:03:34,680 --> 01:03:36,240
are you gonna show it or are you gonna

1469
01:03:36,240 --> 01:03:37,980
show it outside I'm gonna show them

1470
01:03:37,980 --> 01:03:39,780
myself because I'm I ran out of time but

1471
01:03:39,780 --> 01:03:40,740
oh yeah

1472
01:03:40,740 --> 01:03:42,480
um yeah so who's who's interested to see

1473
01:03:42,480 --> 01:03:45,180
that can can yeah sure sure

1474
01:03:45,180 --> 01:03:47,040
um we can do some experiments after

1475
01:03:47,040 --> 01:03:49,079
let's give Sebastian another round of

1476
01:03:49,079 --> 01:03:52,460
applause yeah thank you

