1
00:00:07,799 --> 00:00:11,580
hi everyone the title of my talk today

2
00:00:11,580 --> 00:00:14,639
is following the MCO of connected

3
00:00:14,639 --> 00:00:18,480
vehicle for security and safety

4
00:00:18,480 --> 00:00:22,740
first let me introduce myself my name is

5
00:00:22,740 --> 00:00:26,460
ho Chen AKA flag Sky you can call me

6
00:00:26,460 --> 00:00:27,660
flanger

7
00:00:27,660 --> 00:00:30,000
I am formerly Auto

8
00:00:30,000 --> 00:00:33,540
the auto is a leader in China's new

9
00:00:33,540 --> 00:00:36,300
energy bitco Market

10
00:00:36,300 --> 00:00:39,899
I'm currently a secretary inspector at

11
00:00:39,899 --> 00:00:42,480
the order responsible for the

12
00:00:42,480 --> 00:00:45,360
information security of the vehicle

13
00:00:45,360 --> 00:00:48,780
domain controllers including penetration

14
00:00:48,780 --> 00:00:52,520
testing vulnerability mining security

15
00:00:52,520 --> 00:00:57,079
architecture design and so on

16
00:00:57,539 --> 00:01:00,680
before joining in the auto I worked at

17
00:01:00,680 --> 00:01:04,799
2360 for five years mainly in the field

18
00:01:04,799 --> 00:01:08,280
of bug hunting I'm focused on Android

19
00:01:08,280 --> 00:01:10,560
and Linux color

20
00:01:10,560 --> 00:01:13,619
now I'm very interesting connected car

21
00:01:13,619 --> 00:01:17,400
security and Hardware security but I'm

22
00:01:17,400 --> 00:01:20,220
still a newcomer and hope to communicate

23
00:01:20,220 --> 00:01:23,060
with you guys

24
00:01:24,619 --> 00:01:27,900
today I would like to introduce to you a

25
00:01:27,900 --> 00:01:31,500
tour called MCO fast that we developed

26
00:01:31,500 --> 00:01:34,259
the main function of this tool is to

27
00:01:34,259 --> 00:01:36,840
find the MCU software of our domain

28
00:01:36,840 --> 00:01:37,860
controller

29
00:01:37,860 --> 00:01:40,380
how many detail why we designed this

30
00:01:40,380 --> 00:01:44,340
tool and how it works the first part

31
00:01:44,340 --> 00:01:47,579
in the background introduction I will

32
00:01:47,579 --> 00:01:50,280
introduce the common attack Map Attack

33
00:01:50,280 --> 00:01:54,060
methods under the ee architecture of the

34
00:01:54,060 --> 00:01:55,799
current smart car

35
00:01:55,799 --> 00:01:58,680
and the Huawei pay attention to the

36
00:01:58,680 --> 00:02:02,340
software security test team MCU

37
00:02:02,340 --> 00:02:04,979
it also includes difference between

38
00:02:04,979 --> 00:02:08,299
Safety and Security

39
00:02:08,580 --> 00:02:11,760
the second part talks about the detailed

40
00:02:11,760 --> 00:02:14,819
design of the MCU fast and how to

41
00:02:14,819 --> 00:02:18,660
realize coverage guided intelligent fat

42
00:02:18,660 --> 00:02:22,620
with the help of Hardware debugger

43
00:02:22,620 --> 00:02:25,739
the third part is a demo productive

44
00:02:25,739 --> 00:02:30,420
which is a filing the value of a canvas

45
00:02:30,420 --> 00:02:33,079
application

46
00:02:33,780 --> 00:02:36,900
and the fourth part is a conclusion and

47
00:02:36,900 --> 00:02:41,780
the perspective of Future Works

48
00:02:42,300 --> 00:02:44,099
the first part the background

49
00:02:44,099 --> 00:02:45,980
introduction

50
00:02:45,980 --> 00:02:49,980
in recent years the ee architecture of

51
00:02:49,980 --> 00:02:54,239
smart cars had involved repeatedly from

52
00:02:54,239 --> 00:02:56,360
the initial

53
00:02:56,360 --> 00:02:59,580
distributed e-architecture to the

54
00:02:59,580 --> 00:03:03,180
centralized e-architecture

55
00:03:03,660 --> 00:03:06,900
now we are in the second generation the

56
00:03:06,900 --> 00:03:09,000
second generation is the functional

57
00:03:09,000 --> 00:03:12,000
domain architecture in this architecture

58
00:03:12,000 --> 00:03:15,120
the original single function controller

59
00:03:15,120 --> 00:03:18,900
is integrated into different domains

60
00:03:18,900 --> 00:03:23,099
according to their functional category

61
00:03:23,099 --> 00:03:26,300
for example uh

62
00:03:26,300 --> 00:03:29,940
for example the power domain the GCS

63
00:03:29,940 --> 00:03:32,640
domain the body domain intelligent

64
00:03:32,640 --> 00:03:34,680
driving domain and the intelligent

65
00:03:34,680 --> 00:03:37,099
cockpit domain

66
00:03:37,099 --> 00:03:40,500
the evolution of ee architecture Auto

67
00:03:40,500 --> 00:03:42,659
Hydro great impact on information

68
00:03:42,659 --> 00:03:46,620
security both for the attackers and for

69
00:03:46,620 --> 00:03:49,700
the Defenders

70
00:03:49,700 --> 00:03:53,519
let's take a the current mystery

71
00:03:53,519 --> 00:03:56,760
architecture and as an example to talk

72
00:03:56,760 --> 00:04:00,239
about the common attack path

73
00:04:00,239 --> 00:04:02,760
that's for let's first look at the

74
00:04:02,760 --> 00:04:06,060
functional division of each domain

75
00:04:06,060 --> 00:04:09,599
uh in this picture the TCU means domain

76
00:04:09,599 --> 00:04:12,480
control unit you can see three DC or

77
00:04:12,480 --> 00:04:13,519
here

78
00:04:13,519 --> 00:04:21,798
the HMI 8as powertrain or Chase's DCU

79
00:04:22,500 --> 00:04:25,680
phone from the perspective of functional

80
00:04:25,680 --> 00:04:28,380
division the most vulnerable to attack

81
00:04:28,380 --> 00:04:32,400
is definitely the HMI because the

82
00:04:32,400 --> 00:04:35,880
external connection links are all on the

83
00:04:35,880 --> 00:04:40,740
HMI system such as Bluetooth Wi-Fi 5G

84
00:04:40,740 --> 00:04:42,360
and so on

85
00:04:42,360 --> 00:04:45,680
under the ESP

86
00:04:45,680 --> 00:04:48,900
APS related to vehicle control are all

87
00:04:48,900 --> 00:04:52,160
linked to the powertrain domain

88
00:04:52,160 --> 00:04:55,040
therefore there is a possible attacks

89
00:04:55,040 --> 00:04:57,360
linked like this

90
00:04:57,360 --> 00:05:01,500
take the HMI first and then attack into

91
00:05:01,500 --> 00:05:04,919
a rects with the power chain domain that

92
00:05:04,919 --> 00:05:07,259
exploits the vulnerability of power

93
00:05:07,259 --> 00:05:10,699
chain DCU and then since come

94
00:05:10,699 --> 00:05:14,580
arbitrary can command to control ESP AV

95
00:05:14,580 --> 00:05:17,460
and so on

96
00:05:17,460 --> 00:05:21,479
the MCU file the MCU files we propose is

97
00:05:21,479 --> 00:05:24,600
designed to test the MCU software on the

98
00:05:24,600 --> 00:05:29,000
dcu3 it is a poetry and this is the

99
00:05:29,000 --> 00:05:32,460
domain because the poetry and the chases

100
00:05:32,460 --> 00:05:35,699
domain is the most critical domain

101
00:05:35,699 --> 00:05:36,919
controller in

102
00:05:36,919 --> 00:05:40,580
a modern car

103
00:05:40,639 --> 00:05:45,360
so we can have a chlorine uh

104
00:05:45,360 --> 00:05:47,759
the domain the power chain on the

105
00:05:47,759 --> 00:05:51,180
chassis domain are fake the Hecker

106
00:05:51,180 --> 00:05:53,880
ultimate goal and its information

107
00:05:53,880 --> 00:05:57,300
security and the functional safety

108
00:05:57,300 --> 00:06:00,199
critical system

109
00:06:01,139 --> 00:06:04,320
just now we mentioned a functional

110
00:06:04,320 --> 00:06:06,600
safety and the information secret

111
00:06:06,600 --> 00:06:08,180
security

112
00:06:08,180 --> 00:06:11,280
method take a brief look at the

113
00:06:11,280 --> 00:06:14,780
relationship between the

114
00:06:15,180 --> 00:06:18,000
we all know that we are there there is

115
00:06:18,000 --> 00:06:20,639
code there will be bugs if this box can

116
00:06:20,639 --> 00:06:23,759
be checked by attacker then this is an

117
00:06:23,759 --> 00:06:26,520
information security problem

118
00:06:26,520 --> 00:06:28,740
if the bug is

119
00:06:28,740 --> 00:06:32,220
figured and intentionally or randomly it

120
00:06:32,220 --> 00:06:34,560
will be considered a functional safety

121
00:06:34,560 --> 00:06:36,060
issue

122
00:06:36,060 --> 00:06:37,639
in the past

123
00:06:37,639 --> 00:06:40,759
major oems speed more addition to

124
00:06:40,759 --> 00:06:44,400
functional safety often ignoring the

125
00:06:44,400 --> 00:06:46,940
importance of information security

126
00:06:46,940 --> 00:06:50,460
because they believe that the relevant

127
00:06:50,460 --> 00:06:54,479
DCU is not directly connected to the

128
00:06:54,479 --> 00:06:57,600
internet this thing is difficult to be

129
00:06:57,600 --> 00:06:58,919
attracted

130
00:06:58,919 --> 00:07:03,120
but in fact once a functional critical

131
00:07:03,120 --> 00:07:05,880
functional safety critical system is

132
00:07:05,880 --> 00:07:10,699
attracted the result will be photo

133
00:07:13,259 --> 00:07:15,360
because of the Safety and Security of

134
00:07:15,360 --> 00:07:17,819
MCU is so important there are already

135
00:07:17,819 --> 00:07:20,599
many test methods in actual

136
00:07:20,599 --> 00:07:24,360
software development including following

137
00:07:24,360 --> 00:07:28,020
the like the Code walkthrough we could

138
00:07:28,020 --> 00:07:30,240
walk throughs are mainly menu code

139
00:07:30,240 --> 00:07:32,660
audits the

140
00:07:32,660 --> 00:07:35,580
semi-formal verification and formal

141
00:07:35,580 --> 00:07:36,680
verification

142
00:07:36,680 --> 00:07:40,340
use mathematical methods to verify code

143
00:07:40,340 --> 00:07:44,599
but this cost is very high

144
00:07:44,599 --> 00:07:49,680
it's rarely used in in practice

145
00:07:49,680 --> 00:07:53,580
and in practice the unit test is the

146
00:07:53,580 --> 00:07:55,440
interface test

147
00:07:55,440 --> 00:07:59,160
and the photo injection test static code

148
00:07:59,160 --> 00:08:02,880
analysis are still the main testing

149
00:08:02,880 --> 00:08:04,880
method

150
00:08:04,880 --> 00:08:08,699
usually the effective of the test will

151
00:08:08,699 --> 00:08:11,759
have several indicator such as a

152
00:08:11,759 --> 00:08:14,940
statement coverage Branch coverage and

153
00:08:14,940 --> 00:08:17,340
CTC and so on

154
00:08:17,340 --> 00:08:20,940
how to avoid software Barclay the

155
00:08:20,940 --> 00:08:23,099
concern of both informations if

156
00:08:23,099 --> 00:08:25,520
information secured at the

157
00:08:25,520 --> 00:08:28,080
functional safety

158
00:08:28,080 --> 00:08:30,680
I have been doing Linux Android

159
00:08:30,680 --> 00:08:33,958
vulnerability money before so I'm

160
00:08:33,958 --> 00:08:36,779
familiar with efl and I consider

161
00:08:36,779 --> 00:08:42,479
applying efl to MCU security testing

162
00:08:44,159 --> 00:08:46,980
so I think coverage guided value maybe

163
00:08:46,980 --> 00:08:51,540
helpful in MCU software security test

164
00:08:51,540 --> 00:08:55,740
and the MCU MCO file is not intended to

165
00:08:55,740 --> 00:08:59,040
replace existing testing methods but to

166
00:08:59,040 --> 00:09:02,459
add the testing possibilities

167
00:09:02,459 --> 00:09:05,940
after all there are Never Enough wish to

168
00:09:05,940 --> 00:09:09,240
test especially the vehicle control

169
00:09:09,240 --> 00:09:12,060
systems

170
00:09:12,060 --> 00:09:14,700
although fighting we all know funding is

171
00:09:14,700 --> 00:09:17,160
a very effective way to fund software

172
00:09:17,160 --> 00:09:18,180
box

173
00:09:18,180 --> 00:09:20,760
but they asked there are many challenges

174
00:09:20,760 --> 00:09:24,839
in applying it to the MCO environment

175
00:09:24,839 --> 00:09:28,560
the next let's analyze it below and try

176
00:09:28,560 --> 00:09:31,980
to solve these challenges

177
00:09:31,980 --> 00:09:35,180
first let's take a XP

178
00:09:35,180 --> 00:09:40,320
as 32G Azure example which is currently

179
00:09:40,320 --> 00:09:43,140
the most used controller in the vehicle

180
00:09:43,140 --> 00:09:45,560
environment

181
00:09:45,620 --> 00:09:49,560
this process is com composed of three

182
00:09:49,560 --> 00:09:54,140
cortex M7 log step course up to

183
00:09:54,140 --> 00:09:58,200
80 MB SRM usually running Autos are

184
00:09:58,200 --> 00:10:00,660
offering authors

185
00:10:00,660 --> 00:10:03,959
there are many challenges to apply MCU

186
00:10:03,959 --> 00:10:07,440
fog to this environment first

187
00:10:07,440 --> 00:10:10,640
the physical memory is really very small

188
00:10:10,640 --> 00:10:15,839
8 MB is clearly not enough

189
00:10:15,839 --> 00:10:19,320
second or real-time operating system

190
00:10:19,320 --> 00:10:24,120
without an mmu or tax line will address

191
00:10:24,120 --> 00:10:25,320
space

192
00:10:25,320 --> 00:10:29,220
the third the software developed on MCU

193
00:10:29,220 --> 00:10:33,959
really really use gccl column so some

194
00:10:33,959 --> 00:10:36,800
cool injections supported by GCC Oakland

195
00:10:36,800 --> 00:10:40,699
cannot be used here

196
00:10:41,100 --> 00:10:42,850
foreign

197
00:10:42,850 --> 00:10:45,970
[Music]

198
00:10:47,180 --> 00:10:50,160
guided funding we will fit two major

199
00:10:50,160 --> 00:10:52,560
problems

200
00:10:52,560 --> 00:10:55,860
how to choose memory access and how to

201
00:10:55,860 --> 00:10:59,000
choose code coverage

202
00:11:00,540 --> 00:11:05,339
uh we propose a solution the answer is

203
00:11:05,339 --> 00:11:09,800
to use a hardware assisted debugger

204
00:11:11,339 --> 00:11:14,600
the hardware debug user objects

205
00:11:14,600 --> 00:11:17,220
nutrients refer to the process of

206
00:11:17,220 --> 00:11:21,000
capturing data that illustrates how the

207
00:11:21,000 --> 00:11:23,760
components in your design are operating

208
00:11:23,760 --> 00:11:27,120
security and performing

209
00:11:27,120 --> 00:11:30,839
are provide many Hardware trees ability

210
00:11:30,839 --> 00:11:34,079
they are called the tree sausage such as

211
00:11:34,079 --> 00:11:39,140
the etm RTM HTM STM

212
00:11:40,860 --> 00:11:44,279
for example the etm is provide process

213
00:11:44,279 --> 00:11:47,600
stream entries through an ATB component

214
00:11:47,600 --> 00:11:51,300
complete report you can configure the

215
00:11:51,300 --> 00:11:53,640
etm through the Cosi APB program

216
00:11:53,640 --> 00:11:55,560
interface

217
00:11:55,560 --> 00:11:59,160
the HTM makes path information variable

218
00:11:59,160 --> 00:12:03,720
that you can't infer from the etm under

219
00:12:03,720 --> 00:12:07,800
the IDM and FTM are application driven

220
00:12:07,800 --> 00:12:11,040
resources that generates three speeds

221
00:12:11,040 --> 00:12:13,740
down based on software written to the

222
00:12:13,740 --> 00:12:15,600
program interface

223
00:12:15,600 --> 00:12:18,180
we can see that different tree sources

224
00:12:18,180 --> 00:12:21,120
are suitable for different sceneries

225
00:12:21,120 --> 00:12:24,180
we are using etm to help us collect

226
00:12:24,180 --> 00:12:28,019
Chase data it is enough for coverage

227
00:12:28,019 --> 00:12:31,500
regarded farming so let's take a look at

228
00:12:31,500 --> 00:12:36,420
the characteristic of etm in detail

229
00:12:36,420 --> 00:12:39,959
the etm supports own chip and off-chip

230
00:12:39,959 --> 00:12:42,779
cheese mode different modes are suitable

231
00:12:42,779 --> 00:12:46,260
for different scenery the only on chip

232
00:12:46,260 --> 00:12:50,459
mode Trace theater in temporarily stored

233
00:12:50,459 --> 00:12:53,060
in a temporary buffer inside of the Chip

234
00:12:53,060 --> 00:12:58,139
And the external debug residator in a

235
00:12:58,139 --> 00:12:59,880
non-real Time

236
00:12:59,880 --> 00:13:03,839
usually the internal buffer is basically

237
00:13:03,839 --> 00:13:07,079
really small in order to prevent it from

238
00:13:07,079 --> 00:13:10,740
being erased you always need to set the

239
00:13:10,740 --> 00:13:12,779
chase filter

240
00:13:12,779 --> 00:13:15,620
foreign

241
00:13:20,400 --> 00:13:23,100
[Music]

242
00:13:23,100 --> 00:13:26,700
however on chip mode also has benefits

243
00:13:26,700 --> 00:13:29,940
it will be much faster

244
00:13:29,940 --> 00:13:34,940
and it only needs the gtag interface

245
00:13:35,519 --> 00:13:40,279
next the off chip mode the off-chip mode

246
00:13:40,279 --> 00:13:43,380
exports shift data to an external debug

247
00:13:43,380 --> 00:13:44,820
in real time

248
00:13:44,820 --> 00:13:50,279
which required tpio and all swo support

249
00:13:50,279 --> 00:13:53,519
the advantage of of Chip is that the

250
00:13:53,519 --> 00:13:55,639
internal storage

251
00:13:55,639 --> 00:13:58,980
buffer is not limited and more data can

252
00:13:58,980 --> 00:14:00,120
be stored

253
00:14:00,120 --> 00:14:03,899
TCS can last for a long time

254
00:14:03,899 --> 00:14:06,959
but of Chip requires additional Hardware

255
00:14:06,959 --> 00:14:10,760
pins and the hot and

256
00:14:10,760 --> 00:14:15,139
additional Hardware debugger

257
00:14:15,899 --> 00:14:20,220
next we summarize the characteristic of

258
00:14:20,220 --> 00:14:23,940
BTM lithium is a chest source

259
00:14:23,940 --> 00:14:26,399
uh it's a part of armed cosine

260
00:14:26,399 --> 00:14:27,839
architecture

261
00:14:27,839 --> 00:14:30,660
it can support instruction and the data

262
00:14:30,660 --> 00:14:31,860
trees

263
00:14:31,860 --> 00:14:35,300
and it had a

264
00:14:35,300 --> 00:14:38,579
characteristic named filter which can

265
00:14:38,579 --> 00:14:42,060
reduce the amount of drift data

266
00:14:42,060 --> 00:14:45,720
and it is called Purity 3 liter

267
00:14:45,720 --> 00:14:48,839
can be generated

268
00:14:48,839 --> 00:14:51,420
both on chip and off-chip modes are

269
00:14:51,420 --> 00:14:52,500
supported

270
00:14:52,500 --> 00:14:55,399
and the most important

271
00:14:55,399 --> 00:15:01,160
most arm-based chips supports ETF

272
00:15:03,360 --> 00:15:07,320
now we know the arms etm we also need to

273
00:15:07,320 --> 00:15:10,560
know how to get the etm data so we need

274
00:15:10,560 --> 00:15:15,420
a tool here we use we use the chase 32

275
00:15:15,420 --> 00:15:17,959
tool set from load bar

276
00:15:17,959 --> 00:15:21,839
32 consists of several parts the first

277
00:15:21,839 --> 00:15:25,380
part is the software GUI name the Power

278
00:15:25,380 --> 00:15:27,680
view

279
00:15:27,899 --> 00:15:31,800
under the on the hardware part it has

280
00:15:31,800 --> 00:15:34,139
power debug and powerches

281
00:15:34,139 --> 00:15:37,620
the power debug is used for the detect

282
00:15:37,620 --> 00:15:40,139
debugging and also supports on chip

283
00:15:40,139 --> 00:15:43,440
trades the power chairs can support all

284
00:15:43,440 --> 00:15:44,940
scriptures

285
00:15:44,940 --> 00:15:47,699
and it had much more high-speed memory

286
00:15:47,699 --> 00:15:50,940
to storage data in real time

287
00:15:50,940 --> 00:15:53,100
mostly importantly

288
00:15:53,100 --> 00:15:55,339
the change 32 almost

289
00:15:55,339 --> 00:15:58,980
almost scores all chips including arm

290
00:15:58,980 --> 00:16:03,959
cortex a cortex or cortex M but also the

291
00:16:03,959 --> 00:16:07,320
Three core risk 5 and so on

292
00:16:07,320 --> 00:16:11,160
uh our MC offer to use only cortex and

293
00:16:11,160 --> 00:16:13,459
support

294
00:16:14,760 --> 00:16:17,760
next let's take a look at

295
00:16:17,760 --> 00:16:20,760
332 to obtain

296
00:16:20,760 --> 00:16:22,860
etm data

297
00:16:22,860 --> 00:16:25,019
this picture is a configuration

298
00:16:25,019 --> 00:16:31,639
interface of j32 is Chase 32.

299
00:16:31,980 --> 00:16:34,500
the first part is the trace model

300
00:16:34,500 --> 00:16:37,339
selection

301
00:16:37,380 --> 00:16:41,279
we choose the on-chip trace mode here

302
00:16:41,279 --> 00:16:44,459
the second part is the usage of the

303
00:16:44,459 --> 00:16:47,160
chase buffer

304
00:16:47,160 --> 00:16:50,459
because of the uncapable mode we chose

305
00:16:50,459 --> 00:16:53,699
the Cheese Bar for a very small here the

306
00:16:53,699 --> 00:16:56,759
fifo mode means that if the trees buffer

307
00:16:56,759 --> 00:16:59,399
is full the older detail will be

308
00:16:59,399 --> 00:17:03,500
overwritten by the newer data

309
00:17:04,079 --> 00:17:06,079
the third part

310
00:17:06,079 --> 00:17:10,500
Auto arm and auto initial

311
00:17:10,500 --> 00:17:13,020
the auto initial means that every time

312
00:17:13,020 --> 00:17:16,079
you restart the previous trip data will

313
00:17:16,079 --> 00:17:17,480
be cleared

314
00:17:17,480 --> 00:17:22,140
these two Auto Armor means that the

315
00:17:22,140 --> 00:17:25,799
truth will pause and the program is and

316
00:17:25,799 --> 00:17:29,040
the program is paused and the start as

317
00:17:29,040 --> 00:17:32,700
the program starts but also initial and

318
00:17:32,700 --> 00:17:34,919
Autumn these two commands are very

319
00:17:34,919 --> 00:17:37,340
useful

320
00:17:37,740 --> 00:17:40,380
the fourth part is the second part of

321
00:17:40,380 --> 00:17:44,960
ETF let's look at it in detail

322
00:17:46,020 --> 00:17:49,020
etm also supports many options

323
00:17:49,020 --> 00:17:51,780
you can see the large part document for

324
00:17:51,780 --> 00:17:53,120
detailed

325
00:17:53,120 --> 00:17:56,280
here I only introduced one of the most

326
00:17:56,280 --> 00:17:59,880
important functions here the filter

327
00:17:59,880 --> 00:18:02,600
the filter support code and data filter

328
00:18:02,600 --> 00:18:07,140
and setting sheets a filter can quickly

329
00:18:07,140 --> 00:18:10,260
reduce the amount of this data it's very

330
00:18:10,260 --> 00:18:13,020
helpful in on clip mode

331
00:18:13,020 --> 00:18:17,340
and the filter can be done with the

332
00:18:17,340 --> 00:18:19,620
the filter setting can be done with the

333
00:18:19,620 --> 00:18:21,860
following command

334
00:18:21,860 --> 00:18:26,899
uh it's very it's very simple right

335
00:18:27,179 --> 00:18:30,240
finally let me show you the coverage in

336
00:18:30,240 --> 00:18:32,820
the fifth the coverage in the field can

337
00:18:32,820 --> 00:18:36,020
recall the data of each Chase and

338
00:18:36,020 --> 00:18:39,600
analyze it with the source code and form

339
00:18:39,600 --> 00:18:43,219
a analysis report

340
00:18:44,280 --> 00:18:48,720
but this we this function will obviously

341
00:18:48,720 --> 00:18:51,840
slow down the value so I don't I didn't

342
00:18:51,840 --> 00:18:55,380
tell you about this feature as I told to

343
00:18:55,380 --> 00:18:59,280
save the chase raw data and start

344
00:18:59,280 --> 00:19:01,799
another process to generate coverage

345
00:19:01,799 --> 00:19:05,179
report in parallel

346
00:19:05,580 --> 00:19:08,760
find the line let's talk about the API

347
00:19:08,760 --> 00:19:11,220
support every 32

348
00:19:11,220 --> 00:19:13,200
all the functions of transfer

349
00:19:13,200 --> 00:19:15,299
information above can be done through

350
00:19:15,299 --> 00:19:18,200
the API which the body language such as

351
00:19:18,200 --> 00:19:21,860
person or c

352
00:19:22,679 --> 00:19:26,340
after introducing the etm and trade 32

353
00:19:26,340 --> 00:19:29,220
let me introduce the overall

354
00:19:29,220 --> 00:19:32,700
architecture of MCO file

355
00:19:32,700 --> 00:19:37,380
the core agent of m05 is based on efl we

356
00:19:37,380 --> 00:19:39,840
add we add a middle layer between the

357
00:19:39,840 --> 00:19:42,720
efl and the MCU Target

358
00:19:42,720 --> 00:19:46,740
this middle layer is responsible for

359
00:19:46,740 --> 00:19:49,500
communicating with the debugger and

360
00:19:49,500 --> 00:19:52,799
controlling the target to run or pause

361
00:19:52,799 --> 00:19:55,799
but at the same time it will monitor the

362
00:19:55,799 --> 00:19:58,860
running status of the MCU such as

363
00:19:58,860 --> 00:20:00,440
collecting crash information

364
00:20:00,440 --> 00:20:02,039
[Music]

365
00:20:02,039 --> 00:20:05,100
most importantly it will be responsible

366
00:20:05,100 --> 00:20:09,419
for collecting etm data and the feeding

367
00:20:09,419 --> 00:20:13,799
the profit data into efl then a value

368
00:20:13,799 --> 00:20:18,799
Loop is formed and the Picture Show

369
00:20:21,179 --> 00:20:24,840
we let's summarize the advantage of the

370
00:20:24,840 --> 00:20:27,140
our Enfield file

371
00:20:27,140 --> 00:20:30,960
first it started to realize

372
00:20:30,960 --> 00:20:35,580
um any compilers such as GCC clone

373
00:20:35,580 --> 00:20:39,140
and there is no need to

374
00:20:39,140 --> 00:20:42,539
recombine the code or instrument the

375
00:20:42,539 --> 00:20:43,440
code

376
00:20:43,440 --> 00:20:47,160
and it's a very smart coverage guarded

377
00:20:47,160 --> 00:20:51,080
funding and it's not blind

378
00:20:52,620 --> 00:20:56,640
next I will show you a specific test

379
00:20:56,640 --> 00:21:01,020
demo which is a real application case in

380
00:21:01,020 --> 00:21:05,039
our product development

381
00:21:07,320 --> 00:21:10,080
so take a look at the composition of

382
00:21:10,080 --> 00:21:12,419
this environment

383
00:21:12,419 --> 00:21:15,600
the first part is the chase 32 power

384
00:21:15,600 --> 00:21:17,100
debug

385
00:21:17,100 --> 00:21:18,059
yeah

386
00:21:18,059 --> 00:21:21,720
which supports own ship trees and used

387
00:21:21,720 --> 00:21:25,799
to control the target MCU and monitor

388
00:21:25,799 --> 00:21:30,539
the running status and MCU

389
00:21:31,380 --> 00:21:34,860
under the second import is uh USB can

390
00:21:34,860 --> 00:21:39,380
device it is used it is used to collect

391
00:21:39,380 --> 00:21:42,179
initial seed couples

392
00:21:42,179 --> 00:21:45,840
and then it is you need to send the

393
00:21:45,840 --> 00:21:49,020
mutated candida to the Target device in

394
00:21:49,020 --> 00:21:51,299
the following Loop

395
00:21:51,299 --> 00:21:55,200
the third part in our it's our MCU

396
00:21:55,200 --> 00:22:00,380
device is a arm cortex M7 based MCU

397
00:22:00,380 --> 00:22:04,520
development development board

398
00:22:04,520 --> 00:22:09,320
let's take a look at the demo video

399
00:22:10,140 --> 00:22:14,720
pay attention to the chief buffer status

400
00:22:14,880 --> 00:22:18,440
it can be seen that the usage read

401
00:22:18,440 --> 00:22:22,620
is constantly changing because the M

402
00:22:22,620 --> 00:22:25,760
Theory constantly suspending

403
00:22:25,760 --> 00:22:30,059
pulse collecting the ecam data and the

404
00:22:30,059 --> 00:22:33,059
re executing under the control of

405
00:22:33,059 --> 00:22:35,760
airfare

406
00:22:35,760 --> 00:22:39,659
you can see that when the usage reader

407
00:22:39,659 --> 00:22:43,260
remains constant the program should

408
00:22:43,260 --> 00:22:47,039
encounter an error at this time in fact

409
00:22:47,039 --> 00:22:51,620
it did trigger bargaining our program

410
00:22:51,900 --> 00:22:54,360
I see that it only takes less than two

411
00:22:54,360 --> 00:22:55,320
minutes

412
00:22:55,320 --> 00:22:57,980
to find the

413
00:22:58,020 --> 00:22:59,780
of the airbag

414
00:22:59,780 --> 00:23:03,720
but due to the confidential reasons the

415
00:23:03,720 --> 00:23:08,000
details of this bug cannot be shown

416
00:23:16,020 --> 00:23:20,299
the last part of the conclusion

417
00:23:23,780 --> 00:23:28,020
we use the Army TM data and Chase 32

418
00:23:28,020 --> 00:23:31,080
power debug which is under the MCU first

419
00:23:31,080 --> 00:23:34,980
to achieve to achieve a coverage guided

420
00:23:34,980 --> 00:23:36,900
value

421
00:23:36,900 --> 00:23:41,880
and the com combination of etm and the

422
00:23:41,880 --> 00:23:45,900
clip 32 a really powerful and helpful

423
00:23:45,900 --> 00:23:49,260
uh these two higher Province proving

424
00:23:49,260 --> 00:23:51,720
proven effective in our production

425
00:23:51,720 --> 00:23:55,140
environment and we have found several

426
00:23:55,140 --> 00:23:58,400
bugs with this tool

427
00:23:58,740 --> 00:24:01,200
but in addition

428
00:24:01,200 --> 00:24:05,820
the exiting mcos Dio hydraulota allowed

429
00:24:05,820 --> 00:24:07,740
to be optimized

430
00:24:07,740 --> 00:24:12,480
the first the funniest video is slow now

431
00:24:12,480 --> 00:24:16,080
under the we have two we are trying to

432
00:24:16,080 --> 00:24:18,720
improve the final speed

433
00:24:18,720 --> 00:24:23,159
under the second we are adapting an MCO

434
00:24:23,159 --> 00:24:26,840
file to test the ball MCU application

435
00:24:26,840 --> 00:24:29,659
and it's a really

436
00:24:29,659 --> 00:24:33,799
time cost hard work

437
00:24:34,020 --> 00:24:38,340
finally we are developing off chip based

438
00:24:38,340 --> 00:24:42,480
value and we believe that a lot of

439
00:24:42,480 --> 00:24:44,520
storage space through the brain more

440
00:24:44,520 --> 00:24:47,179
possibilities

441
00:24:48,020 --> 00:24:52,500
At Last I will open source Ms MCU first

442
00:24:52,500 --> 00:24:55,860
on GitHub later and you can communicate

443
00:24:55,860 --> 00:24:59,159
with me at any time the following is my

444
00:24:59,159 --> 00:25:02,960
email under GitHub address

445
00:25:03,080 --> 00:25:07,799
okay that's all the all of my talk thank

446
00:25:07,799 --> 00:25:11,299
you for listening thank you

