1
00:00:05,880 --> 00:00:08,039
hello everyone and welcome to this

2
00:00:08,039 --> 00:00:10,559
Workshop about temperature injection

3
00:00:10,559 --> 00:00:13,559
before I get started I just want to do a

4
00:00:13,559 --> 00:00:16,680
little check in the room does anyone is

5
00:00:16,680 --> 00:00:18,119
familiar with temperature injection

6
00:00:18,119 --> 00:00:19,619
already

7
00:00:19,619 --> 00:00:22,080
exploited only one people okay so I will

8
00:00:22,080 --> 00:00:24,060
need to be a little more

9
00:00:24,060 --> 00:00:26,699
uh thorough on every explanation so to

10
00:00:26,699 --> 00:00:28,740
follow along I've built some Dockers for

11
00:00:28,740 --> 00:00:30,420
you so you will need to download them

12
00:00:30,420 --> 00:00:33,420
from um you can just duplicate them from

13
00:00:33,420 --> 00:00:35,160
bi.tk

14
00:00:35,160 --> 00:00:39,199
slash Docker compose the channel

15
00:00:43,559 --> 00:00:46,218
let's

16
00:00:47,219 --> 00:00:49,760
try

17
00:00:54,780 --> 00:00:56,820
opening the internet sign and just run

18
00:00:56,820 --> 00:01:00,260
Docker compose up

19
00:01:00,600 --> 00:01:03,620
is the URL

20
00:01:12,619 --> 00:01:16,280
is it big enough yeah

21
00:01:19,920 --> 00:01:22,159
foreign

22
00:01:54,720 --> 00:01:57,500
foreign

23
00:02:01,399 --> 00:02:03,780
file you can just run the cloud compose

24
00:02:03,780 --> 00:02:06,960
up and you will be able to access four

25
00:02:06,960 --> 00:02:08,580
different websites

26
00:02:08,580 --> 00:02:11,760
and we'll start with the first one

27
00:02:11,760 --> 00:02:13,739
so this is the website we're going to

28
00:02:13,739 --> 00:02:16,080
attack today it's a simple python

29
00:02:16,080 --> 00:02:18,360
application let me zoom in a bit more is

30
00:02:18,360 --> 00:02:20,160
it big enough okay

31
00:02:20,160 --> 00:02:22,739
so it's a little patent application when

32
00:02:22,739 --> 00:02:25,260
you can submit uh paste paste bin

33
00:02:25,260 --> 00:02:27,840
basically so I can put a test

34
00:02:27,840 --> 00:02:31,379
um hello in the box and my secret I want

35
00:02:31,379 --> 00:02:33,840
to to save it's like oh this

36
00:02:33,840 --> 00:02:37,800
this is the secret

37
00:02:37,800 --> 00:02:39,360
so I can save some secret on this

38
00:02:39,360 --> 00:02:42,480
website uh I got a URL with a key

39
00:02:42,480 --> 00:02:45,080
and everything is uh encrypted

40
00:02:45,080 --> 00:02:46,980
client-side so it's end-to-end

41
00:02:46,980 --> 00:02:49,200
encryption and I can share this link

42
00:02:49,200 --> 00:02:50,580
with other people

43
00:02:50,580 --> 00:02:52,680
but what we are trying to do is actually

44
00:02:52,680 --> 00:02:55,260
exploit this website

45
00:02:55,260 --> 00:02:57,959
in this website there is a contact page

46
00:02:57,959 --> 00:02:59,760
when you can submit an email and a

47
00:02:59,760 --> 00:03:01,080
message

48
00:03:01,080 --> 00:03:02,760
to the admin

49
00:03:02,760 --> 00:03:05,160
and after some digging this is something

50
00:03:05,160 --> 00:03:07,560
I found in Black Mountain basically

51
00:03:07,560 --> 00:03:09,300
there is an email you can submit your

52
00:03:09,300 --> 00:03:10,560
email

53
00:03:10,560 --> 00:03:14,879
here bit K at yes weak

54
00:03:14,879 --> 00:03:17,580
if I send the email if I try to send it

55
00:03:17,580 --> 00:03:20,159
send the mail to the admin but actually

56
00:03:20,159 --> 00:03:22,379
there is a complete injection in the

57
00:03:22,379 --> 00:03:25,019
email field

58
00:03:25,019 --> 00:03:27,019
foreign

59
00:03:27,019 --> 00:03:29,700
it's not visible there but we I will

60
00:03:29,700 --> 00:03:32,179
show you in a bit

61
00:03:32,879 --> 00:03:34,680
so what is temperature injection for

62
00:03:34,680 --> 00:03:36,180
because a lot of you don't know a lot

63
00:03:36,180 --> 00:03:38,099
about temperature injection I will show

64
00:03:38,099 --> 00:03:39,659
you another website so you can access

65
00:03:39,659 --> 00:03:42,659
this one at follow along it's uh ssti

66
00:03:42,659 --> 00:03:45,959
let me put it in bigger

67
00:03:45,959 --> 00:03:48,379
uh

68
00:03:59,220 --> 00:04:01,860
yeah

69
00:04:01,860 --> 00:04:03,959
so what is temperature injection in a

70
00:04:03,959 --> 00:04:06,900
lot of websites uh when the developer

71
00:04:06,900 --> 00:04:08,159
building the website they use some

72
00:04:08,159 --> 00:04:11,159
templates to provide a page for example

73
00:04:11,159 --> 00:04:16,320
I can do a basic uh H1 tag and

74
00:04:16,320 --> 00:04:19,918
hello and the name of the user

75
00:04:19,918 --> 00:04:21,540
and here in double brackets you can put

76
00:04:21,540 --> 00:04:23,520
some variables so if I put a number it

77
00:04:23,520 --> 00:04:26,100
will just render my title with a number

78
00:04:26,100 --> 00:04:28,620
but if I can do some operation

79
00:04:28,620 --> 00:04:31,440
and stuff like that but usually the user

80
00:04:31,440 --> 00:04:33,120
is never supposed to provide you with a

81
00:04:33,120 --> 00:04:36,419
template only the developers are writing

82
00:04:36,419 --> 00:04:38,100
template and the user are supposed to

83
00:04:38,100 --> 00:04:40,199
provide the variable that will get into

84
00:04:40,199 --> 00:04:42,780
the top plate like a name or something

85
00:04:42,780 --> 00:04:46,680
but sometimes uh you you can manage to

86
00:04:46,680 --> 00:04:48,660
write templates and this is where the

87
00:04:48,660 --> 00:04:51,240
the issue come in

88
00:04:51,240 --> 00:04:52,740
so with temperature injection you get

89
00:04:52,740 --> 00:04:54,540
basically accessed you can write some

90
00:04:54,540 --> 00:04:56,880
python code and it will get executed

91
00:04:56,880 --> 00:04:59,520
like here I just did a simple addition

92
00:04:59,520 --> 00:05:02,520
but if I want to do something more nasty

93
00:05:02,520 --> 00:05:05,100
like calling a comment it's doable and

94
00:05:05,100 --> 00:05:07,440
in a lot of

95
00:05:07,440 --> 00:05:09,840
uh out to say it's like

96
00:05:09,840 --> 00:05:11,820
so this is python Cloud but it's not

97
00:05:11,820 --> 00:05:13,199
exactly python called here we are

98
00:05:13,199 --> 00:05:15,600
running Jin jacket and ginger code is

99
00:05:15,600 --> 00:05:18,720
not python if I do for example prints

100
00:05:18,720 --> 00:05:20,580
and I try to run this the print function

101
00:05:20,580 --> 00:05:22,500
is undefined we are in the sandbox we

102
00:05:22,500 --> 00:05:24,479
are not have access to all the python we

103
00:05:24,479 --> 00:05:26,520
would like to to use

104
00:05:26,520 --> 00:05:28,380
so the first step we are gonna we go

105
00:05:28,380 --> 00:05:30,780
first thing we're gonna do it's write

106
00:05:30,780 --> 00:05:33,840
full python code so how are we able to

107
00:05:33,840 --> 00:05:36,660
recover uh to get access to all the

108
00:05:36,660 --> 00:05:39,479
python code we want to execute

109
00:05:39,479 --> 00:05:41,340
one thing is nice is we can do

110
00:05:41,340 --> 00:05:43,860
introspection here for example if I put

111
00:05:43,860 --> 00:05:46,020
an empty list

112
00:05:46,020 --> 00:05:48,479
and I try to access like a class

113
00:05:48,479 --> 00:05:51,240
variable I can access I can dig inside

114
00:05:51,240 --> 00:05:55,259
every object inside python

115
00:05:55,259 --> 00:05:57,960
so this is cool but this is not all we

116
00:05:57,960 --> 00:06:00,180
want what we will what I would really

117
00:06:00,180 --> 00:06:04,520
want to do it's something like import

118
00:06:04,620 --> 00:06:08,580
to process and do a process that check

119
00:06:08,580 --> 00:06:11,820
output I don't know ID or something like

120
00:06:11,820 --> 00:06:14,160
this but if I try to run this code it's

121
00:06:14,160 --> 00:06:16,259
not valid it's it's not valid Ginger

122
00:06:16,259 --> 00:06:18,419
code you cannot do that

123
00:06:18,419 --> 00:06:20,039
so the first thing we want to do is

124
00:06:20,039 --> 00:06:22,500
recover all the built-ins from python to

125
00:06:22,500 --> 00:06:26,000
be able to execute arbitrary code

126
00:06:26,160 --> 00:06:29,220
and there is an easy way to do that

127
00:06:29,220 --> 00:06:32,039
so in ginger if you put a random

128
00:06:32,039 --> 00:06:33,780
variable here

129
00:06:33,780 --> 00:06:35,940
I will just get an empty string because

130
00:06:35,940 --> 00:06:38,639
in ginger all viable are just replaced

131
00:06:38,639 --> 00:06:41,759
by the undefined variable

132
00:06:41,759 --> 00:06:43,800
so if I look at the class of this

133
00:06:43,800 --> 00:06:45,600
undefined thing I will remove the H1

134
00:06:45,600 --> 00:06:48,440
because it's too big

135
00:06:49,680 --> 00:06:51,840
it's treatable so you got this undefined

136
00:06:51,840 --> 00:06:52,860
class

137
00:06:52,860 --> 00:06:56,639
so this is a bit weird but that means I

138
00:06:56,639 --> 00:06:58,860
can use any variable

139
00:06:58,860 --> 00:07:00,539
and look at it

140
00:07:00,539 --> 00:07:02,639
if I look at the init

141
00:07:02,639 --> 00:07:03,360
um

142
00:07:03,360 --> 00:07:05,759
function

143
00:07:05,759 --> 00:07:08,400
this is a bone method in it of a gen

144
00:07:08,400 --> 00:07:10,080
Define class

145
00:07:10,080 --> 00:07:13,680
but in Python since python 3.10 there is

146
00:07:13,680 --> 00:07:17,639
actually a hidden thing attached to

147
00:07:17,639 --> 00:07:20,220
every function of of every function from

148
00:07:20,220 --> 00:07:21,300
every class

149
00:07:21,300 --> 00:07:25,380
if I try to access built-ins

150
00:07:26,940 --> 00:07:28,740
I will get access to all the buildings

151
00:07:28,740 --> 00:07:32,039
from python and from here I can call the

152
00:07:32,039 --> 00:07:34,680
I can access other function like the

153
00:07:34,680 --> 00:07:38,340
eval function or the exact function

154
00:07:38,340 --> 00:07:42,360
and with exec I can know uh

155
00:07:42,360 --> 00:07:45,300
import any python code I want

156
00:07:45,300 --> 00:07:48,360
so if I do Imports process this is

157
00:07:48,360 --> 00:07:50,160
doable here

158
00:07:50,160 --> 00:07:52,259
the issue with that

159
00:07:52,259 --> 00:07:55,080
here we we can now run arbitrary python

160
00:07:55,080 --> 00:07:57,000
code inside our template

161
00:07:57,000 --> 00:07:59,819
the problem with that is we don't have

162
00:07:59,819 --> 00:08:01,979
the output anymore because exec is not

163
00:08:01,979 --> 00:08:03,840
returning any value it's just running

164
00:08:03,840 --> 00:08:06,120
the code and if I try to do a print like

165
00:08:06,120 --> 00:08:08,400
print 42

166
00:08:08,400 --> 00:08:11,160
the prints run but it's not showing here

167
00:08:11,160 --> 00:08:14,099
why because it's actually just printing

168
00:08:14,099 --> 00:08:17,220
into STD out let me just

169
00:08:17,220 --> 00:08:19,819
flush

170
00:08:19,860 --> 00:08:22,740
yeah I got the output here but this is

171
00:08:22,740 --> 00:08:24,599
useless if you're an attacker because

172
00:08:24,599 --> 00:08:27,599
you don't have access to the console log

173
00:08:27,599 --> 00:08:29,940
so the next thing you want to do is

174
00:08:29,940 --> 00:08:31,979
manage to change this blind injection

175
00:08:31,979 --> 00:08:35,539
into a non-blind injection

176
00:08:35,580 --> 00:08:38,099
and there is an easy way to do that

177
00:08:38,099 --> 00:08:40,260
because we are running python code and

178
00:08:40,260 --> 00:08:42,120
python nothing is private everything is

179
00:08:42,120 --> 00:08:43,140
public

180
00:08:43,140 --> 00:08:45,480
and you get access to some nice helper

181
00:08:45,480 --> 00:08:47,580
function from flask

182
00:08:47,580 --> 00:08:50,160
here I can import from flask

183
00:08:50,160 --> 00:08:52,279
um

184
00:08:52,980 --> 00:08:54,420
Imports

185
00:08:54,420 --> 00:08:57,959
current app

186
00:08:57,959 --> 00:08:59,760
and what current sap is it's just a

187
00:08:59,760 --> 00:09:01,440
reference to the actual application

188
00:09:01,440 --> 00:09:03,120
running

189
00:09:03,120 --> 00:09:05,820
but you can also import some nice Alpha

190
00:09:05,820 --> 00:09:11,220
function called after this request

191
00:09:11,220 --> 00:09:14,100
this function is a function that take a

192
00:09:14,100 --> 00:09:15,779
function as an input so you can use it

193
00:09:15,779 --> 00:09:17,040
as a decorator

194
00:09:17,040 --> 00:09:20,040
so I can say okay after this request

195
00:09:20,040 --> 00:09:22,560
run this function so

196
00:09:22,560 --> 00:09:25,620
let's let's call it hook

197
00:09:25,620 --> 00:09:28,920
let's take a near number of arguments we

198
00:09:28,920 --> 00:09:31,260
don't really care about them

199
00:09:31,260 --> 00:09:34,260
quarks

200
00:09:34,680 --> 00:09:37,560
and here we will be able to just replace

201
00:09:37,560 --> 00:09:41,040
the expected output of the function

202
00:09:41,040 --> 00:09:42,480
so

203
00:09:42,480 --> 00:09:45,440
here I will import from flask the make

204
00:09:45,440 --> 00:09:47,760
response function

205
00:09:47,760 --> 00:09:51,439
I will create a response

206
00:09:58,560 --> 00:10:02,160
and if I try to run the code okay

207
00:10:02,160 --> 00:10:04,200
I'm still in double quotes over there so

208
00:10:04,200 --> 00:10:06,180
I need to use single quotes here

209
00:10:06,180 --> 00:10:07,860
this this will happen a lot during the

210
00:10:07,860 --> 00:10:09,060
talk

211
00:10:09,060 --> 00:10:13,320
and if I run this I got the yellow back

212
00:10:13,320 --> 00:10:15,779
so here in my python code

213
00:10:15,779 --> 00:10:16,320
um

214
00:10:16,320 --> 00:10:18,540
I'm able to run completely adversary

215
00:10:18,540 --> 00:10:20,160
python code and be able to get the

216
00:10:20,160 --> 00:10:21,300
output

217
00:10:21,300 --> 00:10:23,760
this is very useful if you are doing

218
00:10:23,760 --> 00:10:25,800
some exploitation and you have like

219
00:10:25,800 --> 00:10:28,560
blind injection this make the whole

220
00:10:28,560 --> 00:10:30,240
injection not blind anymore

221
00:10:30,240 --> 00:10:33,180
even if the the return value is not

222
00:10:33,180 --> 00:10:36,360
shown at all like here in this example

223
00:10:36,360 --> 00:10:38,220
yeah there is temperature injection in

224
00:10:38,220 --> 00:10:41,399
the email field but I got no outputs but

225
00:10:41,399 --> 00:10:44,279
if I use this kind of payload

226
00:10:44,279 --> 00:10:46,920
which is a bit too big for this but it's

227
00:10:46,920 --> 00:10:47,880
doable

228
00:10:47,880 --> 00:10:51,860
you will be able to get the outputs

229
00:10:52,200 --> 00:10:54,779
so this is the basics of template

230
00:10:54,779 --> 00:10:57,240
injection and we are trying we will try

231
00:10:57,240 --> 00:10:59,220
to write some software to to exploit the

232
00:10:59,220 --> 00:11:01,500
other website

233
00:11:01,500 --> 00:11:05,000
so let's start with that

234
00:11:17,279 --> 00:11:19,939
foreign

235
00:11:31,820 --> 00:11:34,680
so let's look what the request look like

236
00:11:34,680 --> 00:11:37,980
when we send the when we send the

237
00:11:37,980 --> 00:11:40,160
message

238
00:11:40,800 --> 00:11:42,839
so when we send it's just a simple post

239
00:11:42,839 --> 00:11:45,839
request is it readable yeah just a

240
00:11:45,839 --> 00:11:48,839
simple post request with some some data

241
00:11:48,839 --> 00:11:50,880
so let's build something like that so we

242
00:11:50,880 --> 00:11:53,640
can be able to exploit it later

243
00:11:53,640 --> 00:11:58,319
so a new file I'll call it exploit.py

244
00:12:05,820 --> 00:12:08,459
I will import request let me zoom in a

245
00:12:08,459 --> 00:12:09,300
bit

246
00:12:09,300 --> 00:12:11,040
okay

247
00:12:11,040 --> 00:12:15,000
so let's write a function Dev send

248
00:12:15,000 --> 00:12:18,680
payload with our payload

249
00:12:18,899 --> 00:12:22,560
and we will do request.post the URL is

250
00:12:22,560 --> 00:12:24,959
this one

251
00:12:24,959 --> 00:12:28,160
copy URL

252
00:12:28,579 --> 00:12:32,279
localhost IP contact okay and the data

253
00:12:32,279 --> 00:12:35,000
is

254
00:12:35,100 --> 00:12:37,760
mail

255
00:12:37,920 --> 00:12:42,240
with my payload and

256
00:12:42,240 --> 00:12:44,700
the message which I don't really care

257
00:12:44,700 --> 00:12:46,820
about

258
00:12:53,760 --> 00:12:57,480
and let's just return the actual HTML

259
00:12:57,480 --> 00:12:59,760
code add the text

260
00:12:59,760 --> 00:13:01,860
so now if I try to send the payload

261
00:13:01,860 --> 00:13:07,399
let's try test and print the output

262
00:13:07,620 --> 00:13:11,000
I can close this I think

263
00:13:22,800 --> 00:13:27,800
okay connection error what is happening

264
00:13:28,680 --> 00:13:30,660
and

265
00:13:30,660 --> 00:13:34,819
the board is good why is that

266
00:13:38,700 --> 00:13:41,240
why

267
00:13:49,079 --> 00:13:53,300
the API you will not appear contact

268
00:14:00,600 --> 00:14:03,380
this is weird

269
00:14:03,839 --> 00:14:07,339
why is my request not working

270
00:14:07,770 --> 00:14:11,799
[Music]

271
00:14:14,519 --> 00:14:17,180
oh

272
00:14:28,019 --> 00:14:30,380
okay

273
00:14:35,519 --> 00:14:38,540
Gerald is wrong

274
00:14:40,860 --> 00:14:44,180
I think it's fine mate

275
00:14:44,459 --> 00:14:48,540
I mean if I just try to this

276
00:14:48,540 --> 00:14:51,199
okay

277
00:14:51,300 --> 00:14:53,040
how do you realize

278
00:14:53,040 --> 00:14:55,939
actually fine

279
00:15:02,100 --> 00:15:04,860
and if I if I try to do like

280
00:15:04,860 --> 00:15:08,180
headers uh

281
00:15:24,600 --> 00:15:26,839
foreign

282
00:15:28,260 --> 00:15:30,600
so I managed to do it I just tricked the

283
00:15:30,600 --> 00:15:32,820
server into doing that

284
00:15:32,820 --> 00:15:35,639
and this is the actual response I

285
00:15:35,639 --> 00:15:38,279
expecting I'm expecting on a

286
00:15:38,279 --> 00:15:40,920
so let's send an email send first

287
00:15:40,920 --> 00:15:44,100
contact request response is an email was

288
00:15:44,100 --> 00:15:46,560
sent to the admin so something right

289
00:15:46,560 --> 00:15:49,459
went wrong

290
00:15:50,360 --> 00:15:53,899
something went wrong

291
00:15:54,240 --> 00:15:58,940
and the payload is test message

292
00:16:11,519 --> 00:16:14,279
why is it not sending the

293
00:16:14,279 --> 00:16:16,199
request

294
00:16:16,199 --> 00:16:19,880
uh test this

295
00:16:30,420 --> 00:16:31,620
I don't know what's happening with my

296
00:16:31,620 --> 00:16:34,639
python package but

297
00:16:37,920 --> 00:16:39,920
um

298
00:16:41,339 --> 00:16:45,320
data data is good

299
00:16:45,660 --> 00:16:48,660
uh

300
00:17:20,040 --> 00:17:22,339
foreign

301
00:17:27,780 --> 00:17:31,340
I'm sorry for the delay

302
00:17:31,340 --> 00:17:35,418
why something went from

303
00:17:57,679 --> 00:18:01,380
let me just stop my antivirus

304
00:18:01,380 --> 00:18:04,580
it's probably missing stuff

305
00:18:08,340 --> 00:18:11,178
okay

306
00:18:12,059 --> 00:18:14,480
and

307
00:18:18,480 --> 00:18:21,799
okay it should be better

308
00:18:24,120 --> 00:18:28,039
I put that over there

309
00:18:33,480 --> 00:18:34,980
I still got something went wrong but at

310
00:18:34,980 --> 00:18:37,140
least it's working now and what I'm

311
00:18:37,140 --> 00:18:39,480
missing in the request post oh it's

312
00:18:39,480 --> 00:18:41,580
jayegson data okay

313
00:18:41,580 --> 00:18:44,600
we're back on track

314
00:18:47,100 --> 00:18:49,620
okay so we can just send basic email

315
00:18:49,620 --> 00:18:51,840
like that and now we would try to do the

316
00:18:51,840 --> 00:18:53,160
our exploit

317
00:18:53,160 --> 00:18:55,140
so this is the we'll take the exploiter

318
00:18:55,140 --> 00:18:59,059
road earlier just to test it

319
00:18:59,940 --> 00:19:02,220
so this is the wall payload so because I

320
00:19:02,220 --> 00:19:04,500
don't want to escape this every time I

321
00:19:04,500 --> 00:19:06,120
do my payload I will write a small

322
00:19:06,120 --> 00:19:08,280
Stager

323
00:19:08,280 --> 00:19:10,080
what they can do it's inside of my mail

324
00:19:10,080 --> 00:19:15,299
I will put the beginning of the attack

325
00:19:15,299 --> 00:19:18,480
so first I want to recover the built-ins

326
00:19:18,480 --> 00:19:22,340
and run the code

327
00:19:23,880 --> 00:19:26,160
here but because I don't want to escape

328
00:19:26,160 --> 00:19:28,200
my code all the time what I will do is I

329
00:19:28,200 --> 00:19:30,360
will access the actual request and put

330
00:19:30,360 --> 00:19:32,460
an extra parameter let me show what I

331
00:19:32,460 --> 00:19:33,900
mean

332
00:19:33,900 --> 00:19:37,380
yeah if you look at a flask

333
00:19:37,380 --> 00:19:39,120
from flask you can import the current

334
00:19:39,120 --> 00:19:40,440
request

335
00:19:40,440 --> 00:19:44,600
by just importing a request

336
00:19:45,600 --> 00:19:47,820
and in request you can access all the

337
00:19:47,820 --> 00:19:49,799
parameter let me show you for example if

338
00:19:49,799 --> 00:19:52,039
I do deer of

339
00:19:52,039 --> 00:19:53,700
uh

340
00:19:53,700 --> 00:19:57,360
request dot August

341
00:19:57,360 --> 00:20:00,299
oh that

342
00:20:00,299 --> 00:20:04,700
that's request.orgs it's uh

343
00:20:15,679 --> 00:20:18,600
request oh yeah

344
00:20:18,600 --> 00:20:20,640
in my request if I want to access other

345
00:20:20,640 --> 00:20:22,799
parameter I can just access requests

346
00:20:22,799 --> 00:20:24,539
that get Json

347
00:20:24,539 --> 00:20:27,600
so what what I will do is I will send an

348
00:20:27,600 --> 00:20:29,039
extra parameter that is not actually

349
00:20:29,039 --> 00:20:32,880
used by the application with my payload

350
00:20:32,880 --> 00:20:36,179
so here what I will execute is uh I will

351
00:20:36,179 --> 00:20:40,140
do exec I need my codes I will do

352
00:20:40,140 --> 00:20:44,340
from flask import request

353
00:20:44,340 --> 00:20:50,520
but also after this request

354
00:20:50,520 --> 00:20:53,580
I will redefine my after this request

355
00:20:53,580 --> 00:20:55,939
book

356
00:20:58,280 --> 00:21:01,380
with any arguments I don't really care I

357
00:21:01,380 --> 00:21:02,880
don't really care about that usually you

358
00:21:02,880 --> 00:21:04,980
get a single argument which is the

359
00:21:04,980 --> 00:21:06,539
original response but we don't want the

360
00:21:06,539 --> 00:21:08,580
response now

361
00:21:08,580 --> 00:21:11,400
uh I will import request here uh

362
00:21:11,400 --> 00:21:12,960
actually

363
00:21:12,960 --> 00:21:14,760
import request

364
00:21:14,760 --> 00:21:17,460
why importing this here is because the

365
00:21:17,460 --> 00:21:20,400
code is running the weird State and

366
00:21:20,400 --> 00:21:21,900
sometimes you don't take access to the

367
00:21:21,900 --> 00:21:24,059
thing you imported before so import this

368
00:21:24,059 --> 00:21:25,559
inside the

369
00:21:25,559 --> 00:21:28,500
function make it way easier

370
00:21:28,500 --> 00:21:33,179
and here I will just exec

371
00:21:33,179 --> 00:21:38,640
the request that get Json and it is this

372
00:21:38,640 --> 00:21:40,440
is the object of my request and I will

373
00:21:40,440 --> 00:21:42,179
access the payload thing I will create

374
00:21:42,179 --> 00:21:45,020
in a sec

375
00:21:45,840 --> 00:21:49,158
uh exact payload

376
00:21:50,039 --> 00:21:54,360
that's a lot of codes and

377
00:21:55,140 --> 00:21:57,000
also what I will do is I will redefine

378
00:21:57,000 --> 00:21:58,799
the print function because if I try to

379
00:21:58,799 --> 00:22:01,260
print I show you uh before it will just

380
00:22:01,260 --> 00:22:03,960
print to STD out which is useless for me

381
00:22:03,960 --> 00:22:06,419
so let's let's make a small print

382
00:22:06,419 --> 00:22:08,640
function

383
00:22:08,640 --> 00:22:11,880
uh and let's build a another a buffer

384
00:22:11,880 --> 00:22:12,960
also

385
00:22:12,960 --> 00:22:15,179
uh buff

386
00:22:15,179 --> 00:22:17,520
which is an empty string uh print will

387
00:22:17,520 --> 00:22:21,059
take any amount of argument and we will

388
00:22:21,059 --> 00:22:23,820
do uh both

389
00:22:23,820 --> 00:22:28,820
uh the spring print something and when I

390
00:22:28,919 --> 00:22:31,640
so okay let's just

391
00:22:31,640 --> 00:22:34,620
check everything

392
00:22:34,620 --> 00:22:36,840
so if it's so the mail is not all of

393
00:22:36,840 --> 00:22:37,559
that

394
00:22:37,559 --> 00:22:40,080
so it will recover the built-in and get

395
00:22:40,080 --> 00:22:42,480
access to exec ook

396
00:22:42,480 --> 00:22:45,539
uh the current request to execute this

397
00:22:45,539 --> 00:22:46,740
code instead

398
00:22:46,740 --> 00:22:48,539
in this code I will get the request

399
00:22:48,539 --> 00:22:50,820
object in the request object I will get

400
00:22:50,820 --> 00:22:53,820
the form data with the payload I will

401
00:22:53,820 --> 00:22:57,000
execute it and return everything I put

402
00:22:57,000 --> 00:22:59,419
in print

403
00:23:00,120 --> 00:23:02,240
and

404
00:23:02,240 --> 00:23:06,720
and now I can do my uh add the payload

405
00:23:06,720 --> 00:23:09,419
thing here

406
00:23:09,419 --> 00:23:12,299
let's see if it's work so payload and my

407
00:23:12,299 --> 00:23:14,340
payload will be just a print

408
00:23:14,340 --> 00:23:15,600
test

409
00:23:15,600 --> 00:23:17,880
it's probably won't be walking the first

410
00:23:17,880 --> 00:23:20,360
try but

411
00:23:20,820 --> 00:23:23,100
okay didn't work

412
00:23:23,100 --> 00:23:25,880
why because yeah I forgot to put the

413
00:23:25,880 --> 00:23:30,080
actual template injection

414
00:23:30,419 --> 00:23:33,240
there and there

415
00:23:33,240 --> 00:23:34,919
and

416
00:23:34,919 --> 00:23:36,960
something went wrong so what went wrong

417
00:23:36,960 --> 00:23:39,299
I don't know

418
00:23:39,299 --> 00:23:42,179
let's try something simpler let's just

419
00:23:42,179 --> 00:23:45,840
come on this code and

420
00:23:45,840 --> 00:23:48,980
right test

421
00:23:49,140 --> 00:23:53,600
okay what did I broke

422
00:23:54,120 --> 00:23:57,840
uh make response I didn't import it

423
00:23:57,840 --> 00:24:00,840
test

424
00:24:07,080 --> 00:24:09,559
okay

425
00:24:10,700 --> 00:24:14,960
from flasking for this frequency

426
00:24:18,659 --> 00:24:21,380
but the

427
00:24:25,559 --> 00:24:27,179
um let me try that in the in the

428
00:24:27,179 --> 00:24:29,480
playground

429
00:24:38,520 --> 00:24:41,299
what did I forget

430
00:24:42,299 --> 00:24:44,280
the exact front flasking but after this

431
00:24:44,280 --> 00:24:47,000
request after this request

432
00:24:47,000 --> 00:24:49,980
from flasking pot make response pattern

433
00:24:49,980 --> 00:24:51,600
make response

434
00:24:51,600 --> 00:24:53,760
Let's test

435
00:24:53,760 --> 00:24:56,880
oh what is this current is this no it's

436
00:24:56,880 --> 00:24:59,240
fine

437
00:25:09,059 --> 00:25:11,700
oh make oh yeah

438
00:25:11,700 --> 00:25:13,320
response

439
00:25:13,320 --> 00:25:15,799
okay

440
00:25:19,440 --> 00:25:21,299
so I'm not gonna run the code and when I

441
00:25:21,299 --> 00:25:24,240
add this is working I got my test back

442
00:25:24,240 --> 00:25:26,580
that mean here we had like a totally

443
00:25:26,580 --> 00:25:28,320
blind temperature injection we didn't

444
00:25:28,320 --> 00:25:30,480
knew what was rendering but we

445
00:25:30,480 --> 00:25:31,620
transformed our blind temperature

446
00:25:31,620 --> 00:25:33,480
injection into a non-blind Complex

447
00:25:33,480 --> 00:25:34,860
injection

448
00:25:34,860 --> 00:25:36,659
so this is nice and if you are doing bug

449
00:25:36,659 --> 00:25:38,940
bouncy like that you probably what you

450
00:25:38,940 --> 00:25:41,279
want to do next is just not printing

451
00:25:41,279 --> 00:25:42,900
tests because printing test is cool but

452
00:25:42,900 --> 00:25:44,100
it's useless

453
00:25:44,100 --> 00:25:49,039
we will import the soup process model

454
00:25:49,200 --> 00:25:51,360
and from the sub process module we will

455
00:25:51,360 --> 00:25:54,480
actually get the check output method

456
00:25:54,480 --> 00:25:57,299
check output just take a command run it

457
00:25:57,299 --> 00:26:01,279
and give you back the the outputs

458
00:26:01,320 --> 00:26:05,100
so make response we'll do the

459
00:26:05,100 --> 00:26:07,080
I will rebuild what I did before with

460
00:26:07,080 --> 00:26:09,720
the the print thingy

461
00:26:09,720 --> 00:26:12,200
so

462
00:26:12,779 --> 00:26:15,860
I still have it like

463
00:26:18,179 --> 00:26:22,380
okay and make response

464
00:26:22,380 --> 00:26:26,720
is this running something went wrong

465
00:26:36,539 --> 00:26:39,679
I broke everything again

466
00:26:39,900 --> 00:26:43,200
from flask import request return make

467
00:26:43,200 --> 00:26:46,159
response oh

468
00:26:48,900 --> 00:26:51,679
okay

469
00:26:53,640 --> 00:26:56,460
and here we will do we'll once again get

470
00:26:56,460 --> 00:26:58,520
the payload so the payload is equal to

471
00:26:58,520 --> 00:27:03,659
the request get chosen

472
00:27:03,659 --> 00:27:07,980
payload I'm going to use single code

473
00:27:07,980 --> 00:27:11,539
if I put payload here

474
00:27:11,940 --> 00:27:14,100
so here you can see I can use extra

475
00:27:14,100 --> 00:27:16,260
argument I have defined that they are

476
00:27:16,260 --> 00:27:17,640
not usually used by the application but

477
00:27:17,640 --> 00:27:18,900
because I got access to the word request

478
00:27:18,900 --> 00:27:21,179
I can use this and I will just exact

479
00:27:21,179 --> 00:27:24,120
this code so exec the payload and I will

480
00:27:24,120 --> 00:27:28,260
build my simple print function

481
00:27:28,260 --> 00:27:30,860
uh

482
00:27:37,679 --> 00:27:40,980
it's the single and the buffer

483
00:27:40,980 --> 00:27:42,440
here

484
00:27:42,440 --> 00:27:46,220
exec and buff

485
00:27:48,659 --> 00:27:51,679
something went wrong

486
00:28:01,500 --> 00:28:04,799
what didn't what it went from

487
00:28:04,799 --> 00:28:07,400
figures

488
00:28:11,820 --> 00:28:15,678
make response

489
00:28:17,880 --> 00:28:21,860
if I don't exactness

490
00:28:23,640 --> 00:28:26,400
what is the mistake

491
00:28:26,400 --> 00:28:27,960
okay

492
00:28:27,960 --> 00:28:30,779
this thing with my buffer

493
00:28:30,779 --> 00:28:32,760
so anyway

494
00:28:32,760 --> 00:28:35,539
let's let's continue

495
00:28:35,700 --> 00:28:37,260
so now we can run the code so let's

496
00:28:37,260 --> 00:28:39,360
check what's actually uh running on the

497
00:28:39,360 --> 00:28:41,340
server

498
00:28:41,340 --> 00:28:44,460
so if I try to import uh so I said it's

499
00:28:44,460 --> 00:28:46,679
a process from

500
00:28:46,679 --> 00:28:51,419
the process Imports

501
00:28:52,559 --> 00:28:55,679
check outputs

502
00:28:55,679 --> 00:28:58,500
here we can just run a command so let's

503
00:28:58,500 --> 00:29:01,559
run ID I will put shell equal true so I

504
00:29:01,559 --> 00:29:05,360
can just type stuff if I want

505
00:29:06,360 --> 00:29:07,620
and

506
00:29:07,620 --> 00:29:11,000
I broke something again

507
00:29:17,279 --> 00:29:21,140
oh yeah the codes

508
00:29:22,860 --> 00:29:25,140
okay so I'm running my python code but

509
00:29:25,140 --> 00:29:26,940
I'm running my code and I see this and

510
00:29:26,940 --> 00:29:28,200
this is what happened to me during a bug

511
00:29:28,200 --> 00:29:31,380
Bounty is yes I got an sc on the server

512
00:29:31,380 --> 00:29:34,320
which is pretty cool usually but I see

513
00:29:34,320 --> 00:29:36,899
that I have like a very basic user with

514
00:29:36,899 --> 00:29:39,059
low privileges

515
00:29:39,059 --> 00:29:42,179
and if I try to look around

516
00:29:42,179 --> 00:29:45,779
I will see some files but everything is

517
00:29:45,779 --> 00:29:47,820
in read-only

518
00:29:47,820 --> 00:29:48,960
and

519
00:29:48,960 --> 00:29:49,500
um

520
00:29:49,500 --> 00:29:52,679
also if I look at the at the application

521
00:29:52,679 --> 00:29:54,360
code

522
00:29:54,360 --> 00:29:57,500
uh that's good

523
00:30:01,460 --> 00:30:04,140
let me open that a little bit more so I

524
00:30:04,140 --> 00:30:05,520
can look at the application code I see

525
00:30:05,520 --> 00:30:06,840
the application is dropping the

526
00:30:06,840 --> 00:30:09,720
privileges so I'm running as nobody

527
00:30:09,720 --> 00:30:13,740
and it's very very basic stuff and I can

528
00:30:13,740 --> 00:30:15,960
basically do nothing because there is no

529
00:30:15,960 --> 00:30:18,299
data on the server if I try to access

530
00:30:18,299 --> 00:30:22,580
the database let me show you

531
00:30:23,520 --> 00:30:24,720
here

532
00:30:24,720 --> 00:30:26,640
um

533
00:30:26,640 --> 00:30:29,120
foreign

534
00:30:33,779 --> 00:30:38,000
and if I cut the roots that py

535
00:30:41,100 --> 00:30:43,380
so when we save a secret it's just

536
00:30:43,380 --> 00:30:45,840
getting the the secret from the the

537
00:30:45,840 --> 00:30:47,340
request

538
00:30:47,340 --> 00:30:50,159
and storing it inside the database

539
00:30:50,159 --> 00:30:51,480
but I don't have access to these

540
00:30:51,480 --> 00:30:53,340
database and anyway everything is

541
00:30:53,340 --> 00:30:55,320
encrypted as we see before

542
00:30:55,320 --> 00:30:58,200
so I got an se but what is the actual

543
00:30:58,200 --> 00:31:00,059
impact of this bug

544
00:31:00,059 --> 00:31:02,760
I can do basically nothing I got no

545
00:31:02,760 --> 00:31:06,000
access to the files I got no access to

546
00:31:06,000 --> 00:31:10,860
the data so yeah I see but it's what's

547
00:31:10,860 --> 00:31:12,000
the point

548
00:31:12,000 --> 00:31:14,399
and this is what we are trying to to

549
00:31:14,399 --> 00:31:16,260
bypass so what can we do in this

550
00:31:16,260 --> 00:31:18,000
situation

551
00:31:18,000 --> 00:31:20,100
so I came across this and I started to

552
00:31:20,100 --> 00:31:23,100
think okay so I cannot I cannot back the

553
00:31:23,100 --> 00:31:25,799
the python file because if I try to do

554
00:31:25,799 --> 00:31:28,380
it well I'm not able to do it because it

555
00:31:28,380 --> 00:31:31,320
belong to roots and I'm nobody

556
00:31:31,320 --> 00:31:34,260
but it got me thinking and I started to

557
00:31:34,260 --> 00:31:36,600
look at the the process running on the

558
00:31:36,600 --> 00:31:39,240
on the docker okay there is no PS on in

559
00:31:39,240 --> 00:31:41,460
this one

560
00:31:41,460 --> 00:31:43,679
but what's happening is there is a

561
00:31:43,679 --> 00:31:45,419
single process

562
00:31:45,419 --> 00:31:48,240
um but the process is running as my user

563
00:31:48,240 --> 00:31:50,580
because this is what I this is what I

564
00:31:50,580 --> 00:31:53,700
get when I try to to see who I am so

565
00:31:53,700 --> 00:31:55,799
because my user is running the process I

566
00:31:55,799 --> 00:31:57,120
should be able to access the process

567
00:31:57,120 --> 00:31:59,580
memory and if I'm able to access the

568
00:31:59,580 --> 00:32:01,620
process memory I should be able to find

569
00:32:01,620 --> 00:32:04,200
inside the memory the function

570
00:32:04,200 --> 00:32:06,899
responsible to make the response and if

571
00:32:06,899 --> 00:32:08,640
I'm able to find this in memory I should

572
00:32:08,640 --> 00:32:10,740
also be able to replace it zero clean

573
00:32:10,740 --> 00:32:14,580
memory without touching the file system

574
00:32:14,580 --> 00:32:17,720
so how can we do that

575
00:32:18,059 --> 00:32:20,279
let's continue

576
00:32:20,279 --> 00:32:22,679
um to do that we will look at flags at

577
00:32:22,679 --> 00:32:26,059
flask internal stuff

578
00:32:26,060 --> 00:32:29,280
[Music]

579
00:32:30,179 --> 00:32:33,000
oh I got the the thing here which is

580
00:32:33,000 --> 00:32:34,559
quite nice

581
00:32:34,559 --> 00:32:39,020
I got some notes I will replace this one

582
00:32:41,059 --> 00:32:45,539
with that and put single put the

583
00:32:45,539 --> 00:32:49,340
and there

584
00:32:51,779 --> 00:32:54,260
and

585
00:32:56,460 --> 00:32:58,440
they broke everything again

586
00:32:58,440 --> 00:33:01,820
from Flash Print to

587
00:33:09,840 --> 00:33:12,740
plus it's not

588
00:33:19,500 --> 00:33:23,100
so I got this this this return makes

589
00:33:23,100 --> 00:33:25,980
response

590
00:33:25,980 --> 00:33:29,179
which should be running

591
00:33:30,539 --> 00:33:34,460
like the Json payload

592
00:33:41,820 --> 00:33:46,580
let's try on the playground again

593
00:33:49,500 --> 00:33:52,860
animated string a little uh why did I

594
00:33:52,860 --> 00:33:55,039
forget

595
00:34:01,440 --> 00:34:04,380
18.

596
00:34:04,380 --> 00:34:06,980
here

597
00:34:12,000 --> 00:34:14,540
what

598
00:34:19,619 --> 00:34:22,220
okay

599
00:34:23,639 --> 00:34:27,679
I just need an extra backslash I think

600
00:34:30,300 --> 00:34:32,580
so okay this is what I tried to do

601
00:34:32,580 --> 00:34:35,159
before with the print thing this is made

602
00:34:35,159 --> 00:34:37,739
way better so now I can run just any

603
00:34:37,739 --> 00:34:39,659
python code over there and I don't need

604
00:34:39,659 --> 00:34:41,699
to to escape it anymore

605
00:34:41,699 --> 00:34:44,280
and this will be helpful because right

606
00:34:44,280 --> 00:34:46,679
now I'm showing you all of this here and

607
00:34:46,679 --> 00:34:48,359
I'm lacking a

608
00:34:48,359 --> 00:34:50,639
syntax highlighting so I will just

609
00:34:50,639 --> 00:34:52,139
create a new file which I call

610
00:34:52,139 --> 00:34:55,139
payload.py

611
00:34:55,199 --> 00:34:58,859
and we will just read the the payload.py

612
00:34:58,859 --> 00:35:01,740
file uh from and submit it so it's

613
00:35:01,740 --> 00:35:04,140
easier to read so we got this

614
00:35:04,140 --> 00:35:06,420
and the payload will just be

615
00:35:06,420 --> 00:35:10,020
open payload.py.3

616
00:35:10,859 --> 00:35:14,040
and now if I do just print

617
00:35:14,040 --> 00:35:16,260
test

618
00:35:16,260 --> 00:35:19,320
okay so we can see we will see a little

619
00:35:19,320 --> 00:35:21,300
bit better what we're doing

620
00:35:21,300 --> 00:35:23,220
so okay I was talking earlier about

621
00:35:23,220 --> 00:35:25,859
in-memory attacks so let's try to do

622
00:35:25,859 --> 00:35:28,140
that one thing it's cool in Python is

623
00:35:28,140 --> 00:35:30,000
because everything is public we will be

624
00:35:30,000 --> 00:35:32,460
able to access a lot of stuff so from

625
00:35:32,460 --> 00:35:33,780
flask

626
00:35:33,780 --> 00:35:36,500
uh

627
00:35:37,980 --> 00:35:40,740
we can import uh the current the

628
00:35:40,740 --> 00:35:42,780
currents app

629
00:35:42,780 --> 00:35:47,099
let's just rename it up so it's shorter

630
00:35:47,099 --> 00:35:49,859
but look at what I can do is because I

631
00:35:49,859 --> 00:35:51,300
can do whatever I want and the code is

632
00:35:51,300 --> 00:35:52,980
running inside the python process I can

633
00:35:52,980 --> 00:35:55,380
just Define the new new route if I want

634
00:35:55,380 --> 00:35:58,500
but I can also look at other routes so

635
00:35:58,500 --> 00:36:01,680
let me show you and

636
00:36:01,680 --> 00:36:04,140
in Flash all the

637
00:36:04,140 --> 00:36:07,500
older routes are stocked uh stored

638
00:36:07,500 --> 00:36:12,060
inside a view function object so let me

639
00:36:12,060 --> 00:36:14,880
show you what I I say so if I try to

640
00:36:14,880 --> 00:36:18,079
look what's inside the app

641
00:36:19,859 --> 00:36:22,079
there is a bunch of stuff which is built

642
00:36:22,079 --> 00:36:23,880
in from flask

643
00:36:23,880 --> 00:36:26,640
but in the interesting thing is the view

644
00:36:26,640 --> 00:36:29,060
function

645
00:36:29,520 --> 00:36:31,260
The View function is actually a

646
00:36:31,260 --> 00:36:34,020
dictionary inside flask that which that

647
00:36:34,020 --> 00:36:37,440
will match every uh root name to its

648
00:36:37,440 --> 00:36:39,660
actual function

649
00:36:39,660 --> 00:36:42,180
the thing we want to do is because what

650
00:36:42,180 --> 00:36:44,099
we want to do is to

651
00:36:44,099 --> 00:36:47,880
steal all the secrets from the admin

652
00:36:47,880 --> 00:36:51,599
we will go to the the page so api.save

653
00:36:51,599 --> 00:36:53,400
and we will replace this for this

654
00:36:53,400 --> 00:36:57,359
function so if I look at this api.save

655
00:36:57,359 --> 00:36:59,520
this is the actual function that run

656
00:36:59,520 --> 00:37:01,800
when we call the page

657
00:37:01,800 --> 00:37:04,500
let's let's keep a copy of this one so

658
00:37:04,500 --> 00:37:07,440
original is this one

659
00:37:07,440 --> 00:37:09,900
so we keep a copy of this function and

660
00:37:09,900 --> 00:37:11,160
we will create a new function to replace

661
00:37:11,160 --> 00:37:14,060
it so

662
00:37:14,060 --> 00:37:18,240
uh so let's when I mean a bad thing or I

663
00:37:18,240 --> 00:37:19,880
don't know

664
00:37:19,880 --> 00:37:23,040
malicious funk

665
00:37:23,040 --> 00:37:26,220
let's take any arguments and any name

666
00:37:26,220 --> 00:37:27,599
the arguments because we don't know what

667
00:37:27,599 --> 00:37:29,460
the function is supposed to receive

668
00:37:29,460 --> 00:37:31,260
actually we know because we look at the

669
00:37:31,260 --> 00:37:33,119
source code just before but most of the

670
00:37:33,119 --> 00:37:34,740
time you don't know

671
00:37:34,740 --> 00:37:36,900
and what we will do is we we will call

672
00:37:36,900 --> 00:37:38,339
the original function

673
00:37:38,339 --> 00:37:41,960
with the original arguments

674
00:37:42,839 --> 00:37:46,380
and the original named argument

675
00:37:46,380 --> 00:37:48,300
and we can just return that if we

676
00:37:48,300 --> 00:37:51,000
replace so

677
00:37:51,000 --> 00:37:52,560
so we have our our malicious function

678
00:37:52,560 --> 00:37:54,720
and now here we can just

679
00:37:54,720 --> 00:37:58,320
replace the original uh the reference to

680
00:37:58,320 --> 00:38:01,940
the original function by our fake one

681
00:38:02,520 --> 00:38:04,980
okay but here we are just doing what the

682
00:38:04,980 --> 00:38:06,839
original is doing what we want to do is

683
00:38:06,839 --> 00:38:08,940
store the password

684
00:38:08,940 --> 00:38:11,339
so the password will be accessible from

685
00:38:11,339 --> 00:38:13,500
the request

686
00:38:13,500 --> 00:38:17,040
if we look at the source code let me let

687
00:38:17,040 --> 00:38:20,599
me comment that for a sec

688
00:38:30,680 --> 00:38:32,339
clicked

689
00:38:32,339 --> 00:38:36,259
what's that p y

690
00:38:42,359 --> 00:38:45,799
and that's right oh

691
00:38:48,619 --> 00:38:51,420
if you look at the original application

692
00:38:51,420 --> 00:38:54,440
okay so it's

693
00:38:55,020 --> 00:38:57,599
uh

694
00:38:57,599 --> 00:39:00,780
not decode because

695
00:39:00,780 --> 00:39:02,640
of course if you look at the original

696
00:39:02,640 --> 00:39:04,980
application uh

697
00:39:04,980 --> 00:39:08,400
the the secrets and the title uh are

698
00:39:08,400 --> 00:39:10,560
getting uh they received from the

699
00:39:10,560 --> 00:39:12,660
request from jizen

700
00:39:12,660 --> 00:39:14,339
so we'll do the same thing I'll try to

701
00:39:14,339 --> 00:39:16,700
store it

702
00:39:18,060 --> 00:39:21,300
so here I will get my form

703
00:39:21,300 --> 00:39:27,800
so form will be a request dot get Json

704
00:39:28,560 --> 00:39:30,780
I will create a

705
00:39:30,780 --> 00:39:35,520
temporary database so let's call it DB

706
00:39:35,520 --> 00:39:38,099
which will be just just be an array

707
00:39:38,099 --> 00:39:40,020
and every time we receive a request what

708
00:39:40,020 --> 00:39:43,200
I will do is DB I will append inside my

709
00:39:43,200 --> 00:39:46,200
DB the form and I will get

710
00:39:46,200 --> 00:39:46,500
[Music]

711
00:39:46,500 --> 00:39:47,520
um

712
00:39:47,520 --> 00:39:50,220
the secrets and the title so I get the

713
00:39:50,220 --> 00:39:53,060
title

714
00:39:53,280 --> 00:39:56,000
and

715
00:39:56,000 --> 00:39:58,859
form that gets

716
00:39:58,859 --> 00:40:00,540
secrets

717
00:40:00,540 --> 00:40:02,960
so no every time someone

718
00:40:02,960 --> 00:40:07,800
submits a new secret to the website

719
00:40:07,800 --> 00:40:09,420
the original function will recall so

720
00:40:09,420 --> 00:40:11,160
everything will be rocking as like

721
00:40:11,160 --> 00:40:12,900
before it will be invisible for the the

722
00:40:12,900 --> 00:40:15,420
user but everything will be stored in

723
00:40:15,420 --> 00:40:17,820
this DB object

724
00:40:17,820 --> 00:40:21,000
and what we can do is say okay if in the

725
00:40:21,000 --> 00:40:22,079
form

726
00:40:22,079 --> 00:40:25,079
if

727
00:40:26,400 --> 00:40:29,280
form that gets I don't know uh let's

728
00:40:29,280 --> 00:40:32,160
hack if there is a parameter called Arc

729
00:40:32,160 --> 00:40:34,260
inside of it instead of calling the

730
00:40:34,260 --> 00:40:36,119
original function

731
00:40:36,119 --> 00:40:38,520
I will just return the list of the

732
00:40:38,520 --> 00:40:40,980
password I've installed so I will make a

733
00:40:40,980 --> 00:40:43,460
response

734
00:40:44,060 --> 00:40:48,180
and I can just do print and I will print

735
00:40:48,180 --> 00:40:50,579
the DB

736
00:40:50,579 --> 00:40:54,020
else I will return the original

737
00:41:00,180 --> 00:41:04,440
let's return the DB like that

738
00:41:04,440 --> 00:41:05,700
and now I can replace the original

739
00:41:05,700 --> 00:41:08,460
function by mine and let's just print a

740
00:41:08,460 --> 00:41:10,859
message to say it's hooked

741
00:41:10,859 --> 00:41:14,579
Prince ook and here we'll

742
00:41:14,579 --> 00:41:18,260
just print uh

743
00:41:19,440 --> 00:41:23,780
malicious thank cold

744
00:41:24,180 --> 00:41:27,180
uh let's do some

745
00:41:27,180 --> 00:41:31,020
flashing also just in case

746
00:41:31,020 --> 00:41:32,940
I don't think I need it

747
00:41:32,940 --> 00:41:36,079
so if I run this code

748
00:41:37,140 --> 00:41:40,500
oh yeah because I got this after that so

749
00:41:40,500 --> 00:41:42,660
I still do that but I should I see the

750
00:41:42,660 --> 00:41:44,579
ook in the beginning

751
00:41:44,579 --> 00:41:47,460
and now I think every time I will uh try

752
00:41:47,460 --> 00:41:49,260
to store a secret everything should be

753
00:41:49,260 --> 00:41:52,260
working as usual so let's let's test

754
00:41:52,260 --> 00:41:57,440
this so test and Secret

755
00:41:58,859 --> 00:42:01,260
I try to save it and everything broke so

756
00:42:01,260 --> 00:42:04,859
I think I broke my website no

757
00:42:04,859 --> 00:42:07,560
Yeah I broke the website so this is also

758
00:42:07,560 --> 00:42:09,540
something I want to show you is doing

759
00:42:09,540 --> 00:42:10,740
this kind of stuff

760
00:42:10,740 --> 00:42:13,020
is a lot of fun but you can very easily

761
00:42:13,020 --> 00:42:15,119
broke the World website completely and

762
00:42:15,119 --> 00:42:16,500
when that happened I had just restart

763
00:42:16,500 --> 00:42:17,760
the docker

764
00:42:17,760 --> 00:42:20,220
oh yeah the DB is not defined so I just

765
00:42:20,220 --> 00:42:22,500
restart everything

766
00:42:22,500 --> 00:42:25,560
I got DB there and DB is not defined

767
00:42:25,560 --> 00:42:28,099
what

768
00:42:29,099 --> 00:42:32,520
and oh let's let's store it in the app

769
00:42:32,520 --> 00:42:35,660
so let's do

770
00:42:35,960 --> 00:42:41,720
app.db and equal to something like that

771
00:42:44,880 --> 00:42:47,700
okay let's hook everything I can remove

772
00:42:47,700 --> 00:42:50,118
that

773
00:42:52,020 --> 00:42:54,839
so it's hooked again uh this time if I

774
00:42:54,839 --> 00:42:57,480
try to save I still got an error and the

775
00:42:57,480 --> 00:42:59,220
error is

776
00:42:59,220 --> 00:43:02,419
app is not defined

777
00:43:02,880 --> 00:43:05,480
okay

778
00:43:06,300 --> 00:43:07,980
yeah because like I said earlier like

779
00:43:07,980 --> 00:43:09,240
this code is replace the original

780
00:43:09,240 --> 00:43:11,760
function but because it's running in a

781
00:43:11,760 --> 00:43:13,380
different context I don't have access to

782
00:43:13,380 --> 00:43:16,079
the thing outside of it so I will just

783
00:43:16,079 --> 00:43:19,560
uh I will just import the app here uh

784
00:43:19,560 --> 00:43:22,859
import current APP as app

785
00:43:22,859 --> 00:43:24,480
and now I should be able to get access

786
00:43:24,480 --> 00:43:26,700
to it

787
00:43:26,700 --> 00:43:29,040
so I will I need to restart everything

788
00:43:29,040 --> 00:43:30,660
again because

789
00:43:30,660 --> 00:43:33,060
I broke the website

790
00:43:33,060 --> 00:43:35,400
I hook oh

791
00:43:35,400 --> 00:43:38,640
it's hooked now and if I run

792
00:43:38,640 --> 00:43:41,779
still got an error

793
00:43:41,819 --> 00:43:45,619
original is not defined

794
00:43:46,680 --> 00:43:49,140
okay let's do something

795
00:43:49,140 --> 00:43:51,119
let's wrap everything

796
00:43:51,119 --> 00:43:53,520
inside the function

797
00:43:53,520 --> 00:43:55,859
this is just to avoid all the issue of

798
00:43:55,859 --> 00:43:58,920
uh of undefined stuff I will just wrap

799
00:43:58,920 --> 00:44:01,260
everything inside of this and I will

800
00:44:01,260 --> 00:44:05,119
record my and I will call this function

801
00:44:09,020 --> 00:44:11,160
up up

802
00:44:11,160 --> 00:44:13,319
here

803
00:44:13,319 --> 00:44:17,839
here okay I can just restart that

804
00:44:21,060 --> 00:44:23,400
is not defined

805
00:44:23,400 --> 00:44:25,940
oh

806
00:44:34,020 --> 00:44:36,839
okay no it should be good

807
00:44:36,839 --> 00:44:39,540
if I try to save no okay so I can save

808
00:44:39,540 --> 00:44:41,640
my secret

809
00:44:41,640 --> 00:44:44,160
but actually my malicious code should

810
00:44:44,160 --> 00:44:45,420
have been running inside of the original

811
00:44:45,420 --> 00:44:46,560
one

812
00:44:46,560 --> 00:44:49,079
so now I will try to do a call request

813
00:44:49,079 --> 00:44:50,460
so Kell

814
00:44:50,460 --> 00:44:51,839
um

815
00:44:51,839 --> 00:44:54,060
what's the website name again is this

816
00:44:54,060 --> 00:44:56,299
one

817
00:44:57,119 --> 00:44:59,780
slash

818
00:45:00,960 --> 00:45:04,980
so it's this one and the URL is api.save

819
00:45:04,980 --> 00:45:07,700
so

820
00:45:08,819 --> 00:45:11,880
this we want some data and in the data

821
00:45:11,880 --> 00:45:14,400
we want uh

822
00:45:14,400 --> 00:45:16,800
it's Json data

823
00:45:16,800 --> 00:45:19,260
and we said if there is Arc it will we

824
00:45:19,260 --> 00:45:23,339
reply with our thing so reply we don't

825
00:45:23,339 --> 00:45:25,560
really care what's inside of it

826
00:45:25,560 --> 00:45:28,200
and H

827
00:45:28,200 --> 00:45:30,960
content

828
00:45:30,960 --> 00:45:35,480
sorry application slash Json

829
00:45:38,160 --> 00:45:40,319
so here I do the request again and now I

830
00:45:40,319 --> 00:45:41,640
got access to the secret from other

831
00:45:41,640 --> 00:45:43,500
users

832
00:45:43,500 --> 00:45:45,660
and this is just a basically this is

833
00:45:45,660 --> 00:45:48,359
just the basics before the secret so now

834
00:45:48,359 --> 00:45:50,520
I can have a back door installing the

835
00:45:50,520 --> 00:45:52,440
application but I never touch a single

836
00:45:52,440 --> 00:45:54,480
file so if you are trying to do some

837
00:45:54,480 --> 00:45:56,579
blue team or some defense just

838
00:45:56,579 --> 00:45:58,619
monitoring the file is not enough you

839
00:45:58,619 --> 00:46:01,079
can you can still get completely Act

840
00:46:01,079 --> 00:46:03,000
but the issue is because the application

841
00:46:03,000 --> 00:46:06,380
is fully uh

842
00:46:06,560 --> 00:46:09,180
encrypted the secret is still encrypted

843
00:46:09,180 --> 00:46:10,980
I got some base64 and I cannot read it

844
00:46:10,980 --> 00:46:13,680
it's AES encrypted

845
00:46:13,680 --> 00:46:15,540
so what I really want to do

846
00:46:15,540 --> 00:46:18,780
is to inject some malicious code inside

847
00:46:18,780 --> 00:46:21,720
the the HTML

848
00:46:21,720 --> 00:46:24,180
so I can put an exercise inside the HTML

849
00:46:24,180 --> 00:46:26,520
and with the xss I can just read the

850
00:46:26,520 --> 00:46:27,599
data

851
00:46:27,599 --> 00:46:30,540
so let's let's do that

852
00:46:30,540 --> 00:46:34,380
so instead of hooking the the API

853
00:46:34,380 --> 00:46:37,319
function we're gonna hook the the first

854
00:46:37,319 --> 00:46:39,300
the index

855
00:46:39,300 --> 00:46:42,060
so let's look at that so I can keep my

856
00:46:42,060 --> 00:46:44,640
hook over there

857
00:46:44,640 --> 00:46:47,099
I just don't call this one uh let's make

858
00:46:47,099 --> 00:46:49,579
a new one

859
00:46:51,900 --> 00:46:53,220
okay

860
00:46:53,220 --> 00:46:54,660
um

861
00:46:54,660 --> 00:46:56,819
let's look at the name of the function

862
00:46:56,819 --> 00:46:59,599
first so

863
00:47:01,460 --> 00:47:04,740
and we're gonna print app that view

864
00:47:04,740 --> 00:47:06,480
function I want to know the name of the

865
00:47:06,480 --> 00:47:08,720
function

866
00:47:10,200 --> 00:47:11,760
so the name of the function there is the

867
00:47:11,760 --> 00:47:14,099
static which return all the the static

868
00:47:14,099 --> 00:47:15,180
files

869
00:47:15,180 --> 00:47:18,119
we have JP save we pick API contact and

870
00:47:18,119 --> 00:47:19,440
you get the index function this is the

871
00:47:19,440 --> 00:47:21,180
function I want to replace this is the

872
00:47:21,180 --> 00:47:23,940
function that I just showed up the page

873
00:47:23,940 --> 00:47:25,680
so we'll do the same thing as I did

874
00:47:25,680 --> 00:47:27,060
before

875
00:47:27,060 --> 00:47:29,520
but instead of doing all of that I will

876
00:47:29,520 --> 00:47:32,220
do something else so let's keep a save

877
00:47:32,220 --> 00:47:34,680
of this one

878
00:47:34,680 --> 00:47:39,078
okay we got a copy just in case

879
00:47:39,180 --> 00:47:41,460
okay so my malicious this time we really

880
00:47:41,460 --> 00:47:44,339
don't want to do the index.save with the

881
00:47:44,339 --> 00:47:46,380
appear to save we're on the index and we

882
00:47:46,380 --> 00:47:50,180
will return the original so to

883
00:47:51,660 --> 00:47:54,660
return

884
00:47:54,900 --> 00:47:58,579
um make response

885
00:48:00,000 --> 00:48:01,619
test

886
00:48:01,619 --> 00:48:04,440
and we will replace the original

887
00:48:04,440 --> 00:48:07,619
so this is the index okay

888
00:48:07,619 --> 00:48:09,839
now if I go to the website I I have the

889
00:48:09,839 --> 00:48:12,000
website like rocking normally

890
00:48:12,000 --> 00:48:14,700
but if I oh send it to the other screen

891
00:48:14,700 --> 00:48:20,339
but if I run this code it will oh

892
00:48:20,339 --> 00:48:24,560
I need to call the drop

893
00:48:25,920 --> 00:48:27,480
so this will replace replace the

894
00:48:27,480 --> 00:48:28,980
original with mine and we just written

895
00:48:28,980 --> 00:48:31,680
test so let's just see if it works

896
00:48:31,680 --> 00:48:33,540
now if I try to refresh the website I

897
00:48:33,540 --> 00:48:36,180
just got test so I replaced the the code

898
00:48:36,180 --> 00:48:38,160
with that but this is

899
00:48:38,160 --> 00:48:39,839
a bit obvious that website is broken

900
00:48:39,839 --> 00:48:41,819
this is this is not what I want to do

901
00:48:41,819 --> 00:48:45,020
let me just restart everything

902
00:48:45,780 --> 00:48:47,640
so what I will do instead I will call

903
00:48:47,640 --> 00:48:49,680
the original function like I did before

904
00:48:49,680 --> 00:48:52,740
so original with the original args

905
00:48:52,740 --> 00:48:55,140
and quarks

906
00:48:55,140 --> 00:48:57,060
so this will be the HTML that will be

907
00:48:57,060 --> 00:48:59,280
returned and what I can do is HTML that

908
00:48:59,280 --> 00:49:00,119
replace

909
00:49:00,119 --> 00:49:03,180
I will replace the the end of the body

910
00:49:03,180 --> 00:49:06,000
tag for example

911
00:49:06,000 --> 00:49:08,640
with uh I will just put the same thing

912
00:49:08,640 --> 00:49:12,078
and here I can just add a script

913
00:49:12,480 --> 00:49:15,900
all right let's just do an alert file

914
00:49:15,900 --> 00:49:17,520
okay and because I don't want to restart

915
00:49:17,520 --> 00:49:19,619
my server all the time I will keep a

916
00:49:19,619 --> 00:49:23,780
reference to the original function so

917
00:49:23,819 --> 00:49:27,180
here uh after yeah when I hook my my

918
00:49:27,180 --> 00:49:29,460
function I lose the original one but I

919
00:49:29,460 --> 00:49:31,200
want to keep it in I want to keep it for

920
00:49:31,200 --> 00:49:32,220
later

921
00:49:32,220 --> 00:49:35,839
so what I'm going to do is

922
00:49:39,359 --> 00:49:41,160
we're gonna set

923
00:49:41,160 --> 00:49:45,618
attitude of original uh

924
00:49:46,020 --> 00:49:48,720
so the original is the view function but

925
00:49:48,720 --> 00:49:50,460
if I replace this and I run the code

926
00:49:50,460 --> 00:49:52,920
again this view will be this malicious

927
00:49:52,920 --> 00:49:55,700
function so

928
00:49:56,040 --> 00:49:58,200
if

929
00:49:58,200 --> 00:50:01,700
you get at it here uh the of original

930
00:50:01,700 --> 00:50:05,040
and we'll look at

931
00:50:05,040 --> 00:50:07,759
her age

932
00:50:20,280 --> 00:50:25,560
okay and I will set here malicious

933
00:50:25,619 --> 00:50:28,260
thing that's

934
00:50:28,260 --> 00:50:30,740
set

935
00:50:35,819 --> 00:50:38,400
original

936
00:50:38,400 --> 00:50:40,619
so here I just add the original as an

937
00:50:40,619 --> 00:50:43,200
extra parameter to the malicious

938
00:50:43,200 --> 00:50:44,099
function

939
00:50:44,099 --> 00:50:46,680
so I can just hook it again and it won't

940
00:50:46,680 --> 00:50:48,119
I won't need to restart all my Docker

941
00:50:48,119 --> 00:50:49,319
all the time

942
00:50:49,319 --> 00:50:51,240
this is just because I don't want to do

943
00:50:51,240 --> 00:50:54,119
this every time so yeah let's try to see

944
00:50:54,119 --> 00:50:55,920
if this work

945
00:50:55,920 --> 00:50:58,020
so I run the code nothing is happening

946
00:50:58,020 --> 00:51:00,720
but if I try to refresh the web page I

947
00:51:00,720 --> 00:51:03,839
got an error what's the error this time

948
00:51:03,839 --> 00:51:06,599
and in

949
00:51:06,599 --> 00:51:11,099
replace is not oh okay so this is not

950
00:51:11,099 --> 00:51:14,280
this is a response

951
00:51:14,280 --> 00:51:18,000
so let's just remove that and see if I

952
00:51:18,000 --> 00:51:19,380
run this

953
00:51:19,380 --> 00:51:22,319
okay so I got my test

954
00:51:22,319 --> 00:51:25,980
and what is inside HTML I don't know so

955
00:51:25,980 --> 00:51:27,839
let's print I think it's a response

956
00:51:27,839 --> 00:51:30,140
object

957
00:51:30,780 --> 00:51:33,720
if I go there actually got test again

958
00:51:33,720 --> 00:51:37,279
but if I look at my log

959
00:51:37,500 --> 00:51:40,619
uh string and language is thank oh yeah

960
00:51:40,619 --> 00:51:42,559
it's

961
00:51:42,559 --> 00:51:44,940
HTML dot

962
00:51:44,940 --> 00:51:46,140
um

963
00:51:46,140 --> 00:51:49,098
what is it again

964
00:51:50,660 --> 00:51:55,559
it's a response object test and print

965
00:51:55,559 --> 00:51:57,960
the HTML

966
00:51:57,960 --> 00:52:00,619
Flash

967
00:52:00,619 --> 00:52:02,579
true let's

968
00:52:02,579 --> 00:52:05,579
look again let's refresh and look at the

969
00:52:05,579 --> 00:52:06,960
log

970
00:52:06,960 --> 00:52:08,460
so this is my response and in my

971
00:52:08,460 --> 00:52:10,920
response I should have the

972
00:52:10,920 --> 00:52:14,540
the actual code somewhere

973
00:52:16,520 --> 00:52:19,260
she's trying to get better I think this

974
00:52:19,260 --> 00:52:22,160
is the function I want to call

975
00:52:25,920 --> 00:52:28,800
so this is the actual HTML code let's

976
00:52:28,800 --> 00:52:32,960
run again run the test oh

977
00:52:34,640 --> 00:52:36,960
absent condition with the responsibility

978
00:52:36,960 --> 00:52:39,380
okay

979
00:52:40,730 --> 00:52:42,900
[Music]

980
00:52:42,900 --> 00:52:46,440
why didn't I get the original data

981
00:52:46,440 --> 00:52:49,339
I can

982
00:52:51,119 --> 00:52:52,980
oh

983
00:52:52,980 --> 00:52:54,300
it's

984
00:52:54,300 --> 00:52:57,300
working

985
00:52:58,400 --> 00:53:00,180
exception

986
00:53:00,180 --> 00:53:03,319
and get that

987
00:53:03,720 --> 00:53:06,720
uh

988
00:53:17,660 --> 00:53:23,180
do I have other things instead

989
00:53:23,700 --> 00:53:27,558
get oh it's just the data I think

990
00:53:38,819 --> 00:53:41,780
oh I didn't hooked look

991
00:53:41,780 --> 00:53:46,280
refresh is everything broken again

992
00:53:46,619 --> 00:53:51,059
what micro responsive test

993
00:53:51,059 --> 00:53:53,900
let's just restart

994
00:53:55,140 --> 00:53:57,618
sorry

995
00:53:58,859 --> 00:54:01,800
no it won't you cannot do a dash in a

996
00:54:01,800 --> 00:54:04,220
function name

997
00:54:05,640 --> 00:54:08,400
uh let me just this is started again I

998
00:54:08,400 --> 00:54:10,800
will hook again

999
00:54:10,800 --> 00:54:12,240
here

1000
00:54:12,240 --> 00:54:15,420
and if I refresh I get an error and the

1001
00:54:15,420 --> 00:54:16,980
error is

1002
00:54:16,980 --> 00:54:19,800
implicit seconds conversion the response

1003
00:54:19,800 --> 00:54:22,940
object is in directors

1004
00:54:26,040 --> 00:54:28,759
what

1005
00:54:31,920 --> 00:54:34,740
and if I just do that

1006
00:54:34,740 --> 00:54:36,720
I think I can just cast it as a string

1007
00:54:36,720 --> 00:54:40,279
and it will be working fine

1008
00:54:42,900 --> 00:54:47,720
icons trend is it

1009
00:54:50,220 --> 00:54:54,259
is this working as if I want

1010
00:54:55,500 --> 00:54:59,240
stream response and

1011
00:55:02,940 --> 00:55:06,260
I don't know why I get this

1012
00:55:07,079 --> 00:55:09,119
anyway we will do something we will do

1013
00:55:09,119 --> 00:55:11,339
it in another way

1014
00:55:11,339 --> 00:55:13,140
um

1015
00:55:13,140 --> 00:55:15,740
original

1016
00:55:16,140 --> 00:55:19,940
print so dear

1017
00:55:20,579 --> 00:55:22,740
oh let's let's look at the vowels I

1018
00:55:22,740 --> 00:55:23,760
think

1019
00:55:23,760 --> 00:55:28,040
it gets more information this way

1020
00:55:28,619 --> 00:55:31,160
what

1021
00:55:41,400 --> 00:55:44,839
I think I broke everything again

1022
00:55:52,440 --> 00:55:55,380
what did they work

1023
00:55:55,380 --> 00:55:59,119
oh I need a data

1024
00:56:00,359 --> 00:56:02,880
okay

1025
00:56:02,880 --> 00:56:07,980
and I want to print the vowels this time

1026
00:56:07,980 --> 00:56:12,119
okay and here should be able to

1027
00:56:12,119 --> 00:56:14,099
see them

1028
00:56:14,099 --> 00:56:17,119
I need to flush

1029
00:56:22,680 --> 00:56:27,180
run that run that and I'm fine okay

1030
00:56:27,180 --> 00:56:29,460
I got the error the file name the file

1031
00:56:29,460 --> 00:56:31,500
name is basically index.html so I can

1032
00:56:31,500 --> 00:56:33,119
just read the file and I will replace it

1033
00:56:33,119 --> 00:56:35,280
so

1034
00:56:35,280 --> 00:56:37,079
let's do that we don't want to call the

1035
00:56:37,079 --> 00:56:39,780
original again we just do a copies so

1036
00:56:39,780 --> 00:56:42,200
open

1037
00:56:46,559 --> 00:56:50,960
the trade this is ghtml

1038
00:56:52,200 --> 00:56:55,619
now we can replace the thingy and return

1039
00:56:55,619 --> 00:56:59,960
original HTML and return the vacation

1040
00:57:02,160 --> 00:57:04,520
okay because the file that do not exist

1041
00:57:04,520 --> 00:57:07,759
it's in

1042
00:57:14,220 --> 00:57:17,280
not natural logic traits and plates I

1043
00:57:17,280 --> 00:57:18,540
don't know where is the flight let's

1044
00:57:18,540 --> 00:57:21,660
just use our injection to test it from

1045
00:57:21,660 --> 00:57:25,500
the process import check output

1046
00:57:25,500 --> 00:57:28,520
uh let's command that

1047
00:57:28,520 --> 00:57:31,680
print check output

1048
00:57:31,680 --> 00:57:34,578
Alice

1049
00:57:36,660 --> 00:57:41,359
and we need the shell is true

1050
00:57:43,380 --> 00:57:49,579
and let's just decode it and Dot decode

1051
00:57:50,099 --> 00:57:55,020
okay so where is my index.html

1052
00:57:55,800 --> 00:57:59,460
do we have one this

1053
00:57:59,460 --> 00:58:01,880
what

1054
00:58:02,400 --> 00:58:05,660
Roots Dot py

1055
00:58:06,599 --> 00:58:10,099
this is the contact the index

1056
00:58:10,920 --> 00:58:12,839
okay let's trip

1057
00:58:12,839 --> 00:58:15,839
app.py

1058
00:58:17,280 --> 00:58:20,520
path index.html okay it's from list

1059
00:58:20,520 --> 00:58:22,740
so

1060
00:58:22,740 --> 00:58:26,058
if I look at this

1061
00:58:27,300 --> 00:58:31,640
I should have my index that HTML yeah

1062
00:58:31,740 --> 00:58:35,579
so this index.html I can call this again

1063
00:58:35,579 --> 00:58:38,339
and that

1064
00:58:38,339 --> 00:58:40,140
so this should work and now I got access

1065
00:58:40,140 --> 00:58:42,420
to the page again but I've added an xss

1066
00:58:42,420 --> 00:58:45,180
inside the page so it

1067
00:58:45,180 --> 00:58:49,279
and I forgot to return the thing

1068
00:58:50,160 --> 00:58:53,099
I put some my fingers there and I think

1069
00:58:53,099 --> 00:58:55,920
I broke uh I broke something in the

1070
00:58:55,920 --> 00:58:57,119
conversion because I don't have access

1071
00:58:57,119 --> 00:59:00,140
to the rest of it

1072
00:59:00,240 --> 00:59:01,920
oh yeah because I replaced the index

1073
00:59:01,920 --> 00:59:03,960
like if I go to any page now I think

1074
00:59:03,960 --> 00:59:05,700
it's it's broke

1075
00:59:05,700 --> 00:59:08,880
but you know you get the ID so I will

1076
00:59:08,880 --> 00:59:10,500
just check if

1077
00:59:10,500 --> 00:59:12,540
um

1078
00:59:12,540 --> 00:59:17,700
if a request that path is equal to slash

1079
00:59:17,700 --> 00:59:20,419
I will do that

1080
00:59:24,900 --> 00:59:29,420
else I will return the original

1081
00:59:30,059 --> 00:59:35,220
with call with the arcs and quarks

1082
00:59:35,220 --> 00:59:39,240
book again refresh and I broke what did

1083
00:59:39,240 --> 00:59:40,740
I broke

1084
00:59:40,740 --> 00:59:44,299
request is not defined okay

1085
00:59:49,740 --> 00:59:52,500
so the buff is not found here God makes

1086
00:59:52,500 --> 00:59:53,880
assist again but I got the website

1087
00:59:53,880 --> 00:59:55,140
working again

1088
00:59:55,140 --> 00:59:57,240
so now what I can do is I can just add

1089
00:59:57,240 --> 00:59:59,160
some JavaScript code that will

1090
00:59:59,160 --> 00:59:59,760
um

1091
00:59:59,760 --> 01:00:02,400
look at the at the secret I'm currently

1092
01:00:02,400 --> 01:00:03,839
typing

1093
01:00:03,839 --> 01:00:05,880
and I will be able to steal it so

1094
01:00:05,880 --> 01:00:08,280
basically I just took an SE that was

1095
01:00:08,280 --> 01:00:12,180
useless and elevated my SCE to an xss to

1096
01:00:12,180 --> 01:00:14,400
get some real impacts so usually it's

1097
01:00:14,400 --> 01:00:15,960
all the way around when you're doing

1098
01:00:15,960 --> 01:00:18,900
back bouncy or CTF or veteran testing

1099
01:00:18,900 --> 01:00:20,880
you don't want the exercise from the SC

1100
01:00:20,880 --> 01:00:23,520
but here the SC is useless but the xss

1101
01:00:23,520 --> 01:00:27,720
has real value so everything is reversed

1102
01:00:27,720 --> 01:00:29,640
so this is what thing we can do and we

1103
01:00:29,640 --> 01:00:32,099
can also create new routes if you want

1104
01:00:32,099 --> 01:00:36,000
for example uh from flask I can

1105
01:00:36,000 --> 01:00:39,119
here I can define a completely new thing

1106
01:00:39,119 --> 01:00:41,240
so I can do

1107
01:00:41,240 --> 01:00:44,700
app.root like to do slash fake

1108
01:00:44,700 --> 01:00:45,839
live

1109
01:00:45,839 --> 01:00:48,859
fake root

1110
01:00:49,140 --> 01:00:52,500
that we just returned uh hello this is

1111
01:00:52,500 --> 01:00:54,960
fake

1112
01:00:54,960 --> 01:00:57,299
and if I run my code again

1113
01:00:57,299 --> 01:01:01,819
I should be able to access the Slash

1114
01:01:03,119 --> 01:01:05,040
so I can create competitor new black

1115
01:01:05,040 --> 01:01:07,559
doors so what you can do is have once

1116
01:01:07,559 --> 01:01:08,700
you get your first temperature injection

1117
01:01:08,700 --> 01:01:11,099
you can create a new back door that will

1118
01:01:11,099 --> 01:01:13,380
wait for your inputs that will evaluate

1119
01:01:13,380 --> 01:01:16,200
it give you back the the results

1120
01:01:16,200 --> 01:01:18,780
and Patch the actual tablet injection so

1121
01:01:18,780 --> 01:01:21,180
nobody can steal it from you and this is

1122
01:01:21,180 --> 01:01:23,819
the kind of stuff I used a lot in CTF so

1123
01:01:23,819 --> 01:01:26,760
what I did during toilet injection CTF I

1124
01:01:26,760 --> 01:01:28,559
created a

1125
01:01:28,559 --> 01:01:30,599
a back door like this

1126
01:01:30,599 --> 01:01:32,760
and every time another team was

1127
01:01:32,760 --> 01:01:36,000
submitting submitting a payload I will

1128
01:01:36,000 --> 01:01:37,380
just look at all the team all the

1129
01:01:37,380 --> 01:01:39,059
payloads they were submitting so it was

1130
01:01:39,059 --> 01:01:40,799
a lot of fun to do and you can learn a

1131
01:01:40,799 --> 01:01:43,200
lot from what other team are doing but

1132
01:01:43,200 --> 01:01:45,780
sadly I didn't find anything as cool as

1133
01:01:45,780 --> 01:01:47,819
this usually there was a payload a more

1134
01:01:47,819 --> 01:01:49,440
basic

1135
01:01:49,440 --> 01:01:51,540
but it is a nice trick so you can do

1136
01:01:51,540 --> 01:01:52,980
that in Python because everything is

1137
01:01:52,980 --> 01:01:54,180
public

1138
01:01:54,180 --> 01:01:56,220
and also this is working in Python

1139
01:01:56,220 --> 01:01:58,200
because the application is basically a

1140
01:01:58,200 --> 01:01:59,940
single process and every time you do a

1141
01:01:59,940 --> 01:02:01,920
request this process is underlying the

1142
01:02:01,920 --> 01:02:03,599
the request but it's still the same

1143
01:02:03,599 --> 01:02:05,339
process for every request

1144
01:02:05,339 --> 01:02:07,500
if you have an application in PHP for

1145
01:02:07,500 --> 01:02:09,960
example in PHP it start a process for

1146
01:02:09,960 --> 01:02:11,339
every request so you cannot do stuff

1147
01:02:11,339 --> 01:02:13,140
like that

1148
01:02:13,140 --> 01:02:15,599
but it got me thinking yes python is a

1149
01:02:15,599 --> 01:02:18,240
pretty popular language in burgundy and

1150
01:02:18,240 --> 01:02:20,400
CTF and stuff like that but not a lot of

1151
01:02:20,400 --> 01:02:22,980
websites use python there is a lot more

1152
01:02:22,980 --> 01:02:26,640
website built in JavaScript and with

1153
01:02:26,640 --> 01:02:27,780
node.js

1154
01:02:27,780 --> 01:02:30,359
so I say node.js is basically the same

1155
01:02:30,359 --> 01:02:31,920
thing you have a single process that is

1156
01:02:31,920 --> 01:02:33,599
underlying all the requests

1157
01:02:33,599 --> 01:02:35,160
so I should be able to do something like

1158
01:02:35,160 --> 01:02:37,440
that also in JavaScript so let's try to

1159
01:02:37,440 --> 01:02:39,740
do that

1160
01:02:40,260 --> 01:02:42,660
so I got exactly the same website but

1161
01:02:42,660 --> 01:02:44,640
this time it's made with JavaScript uh

1162
01:02:44,640 --> 01:02:47,339
with Express and view as a templating

1163
01:02:47,339 --> 01:02:48,960
engine

1164
01:02:48,960 --> 01:02:51,720
and I also got the same playground

1165
01:02:51,720 --> 01:02:54,119
websites so you can you can do some

1166
01:02:54,119 --> 01:02:56,160
testing

1167
01:02:56,160 --> 01:02:58,680
uh the same thing happened in JavaScript

1168
01:02:58,680 --> 01:03:00,599
you don't have access to anything uh

1169
01:03:00,599 --> 01:03:03,000
right here it's not complete you don't

1170
01:03:03,000 --> 01:03:05,400
have access to the the process variable

1171
01:03:05,400 --> 01:03:07,920
but the thing you can do is just create

1172
01:03:07,920 --> 01:03:10,020
an empty string or access any variable

1173
01:03:10,020 --> 01:03:12,900
and look at its Constructor

1174
01:03:12,900 --> 01:03:14,940
The Constructor of a string in

1175
01:03:14,940 --> 01:03:16,559
JavaScript

1176
01:03:16,559 --> 01:03:19,079
is the function string

1177
01:03:19,079 --> 01:03:21,599
and the Constructor of the Constructor

1178
01:03:21,599 --> 01:03:23,940
of the string function

1179
01:03:23,940 --> 01:03:26,520
is the function function

1180
01:03:26,520 --> 01:03:28,079
so you get access to the function

1181
01:03:28,079 --> 01:03:31,020
function it's a lot of function

1182
01:03:31,020 --> 01:03:33,720
but what this function is doing is it

1183
01:03:33,720 --> 01:03:37,380
take as a parameter a string and it will

1184
01:03:37,380 --> 01:03:39,240
create a function with this string for

1185
01:03:39,240 --> 01:03:40,260
example

1186
01:03:40,260 --> 01:03:42,480
I will just return 32.

1187
01:03:42,480 --> 01:03:44,339
so this will create the function that

1188
01:03:44,339 --> 01:03:46,980
will return 42 and I can just call this

1189
01:03:46,980 --> 01:03:49,280
function

1190
01:03:49,680 --> 01:03:52,799
so this is basically eval

1191
01:03:52,799 --> 01:03:57,299
and with this I can just ask the

1192
01:03:57,299 --> 01:04:00,299
has to written me process which is the

1193
01:04:00,299 --> 01:04:03,119
object the main object of JavaScript the

1194
01:04:03,119 --> 01:04:05,520
main reference to the process and with

1195
01:04:05,520 --> 01:04:10,099
the process we got access to require

1196
01:04:10,099 --> 01:04:12,059
usually

1197
01:04:12,059 --> 01:04:17,819
process dot main module I think that we

1198
01:04:17,819 --> 01:04:19,020
require

1199
01:04:19,020 --> 01:04:20,160
yeah

1200
01:04:20,160 --> 01:04:22,020
so we can access to the required

1201
01:04:22,020 --> 01:04:23,339
function and with the require we can

1202
01:04:23,339 --> 01:04:26,220
import a thing like FS or stuff like

1203
01:04:26,220 --> 01:04:27,720
that

1204
01:04:27,720 --> 01:04:29,700
so let's do that again we will use the

1205
01:04:29,700 --> 01:04:33,059
same payload I used before but this time

1206
01:04:33,059 --> 01:04:34,859
in my exploit

1207
01:04:34,859 --> 01:04:35,940
um

1208
01:04:35,940 --> 01:04:39,900
I will load payload.gs

1209
01:04:39,900 --> 01:04:43,559
and the exploits instead of running the

1210
01:04:43,559 --> 01:04:45,180
pivot

1211
01:04:45,180 --> 01:04:47,899
Js

1212
01:04:48,599 --> 01:04:51,540
and let's create a new one

1213
01:04:51,540 --> 01:04:54,119
rename explode

1214
01:04:54,119 --> 01:04:56,660
yes

1215
01:05:03,780 --> 01:05:06,480
and the template this time is a bit

1216
01:05:06,480 --> 01:05:07,740
different

1217
01:05:07,740 --> 01:05:10,859
so we got the string we want to do the

1218
01:05:10,859 --> 01:05:14,040
Constructor that Constructor here we

1219
01:05:14,040 --> 01:05:16,200
will inject our actual payload and we

1220
01:05:16,200 --> 01:05:18,420
will run it

1221
01:05:18,420 --> 01:05:21,119
and instead of doing this like that

1222
01:05:21,119 --> 01:05:25,380
let's just do do I get access to

1223
01:05:25,380 --> 01:05:27,300
A2B in between

1224
01:05:27,300 --> 01:05:30,409
[Music]

1225
01:05:38,819 --> 01:05:42,299
okay so what I will do I will do like I

1226
01:05:42,299 --> 01:05:44,339
did before a little bit of staging but

1227
01:05:44,339 --> 01:05:45,900
instead of submitting in an extra

1228
01:05:45,900 --> 01:05:48,540
parameter because I in

1229
01:05:48,540 --> 01:05:51,059
in Gs the issue is you don't have a nice

1230
01:05:51,059 --> 01:05:54,059
helpers like currants app or the request

1231
01:05:54,059 --> 01:05:55,859
you don't have access to that

1232
01:05:55,859 --> 01:05:58,920
so I will just put the payload as base64

1233
01:05:58,920 --> 01:06:01,619
so it's so I got no issue with codes and

1234
01:06:01,619 --> 01:06:03,359
stuff like that

1235
01:06:03,359 --> 01:06:07,339
so here I will just return uh evolved

1236
01:06:07,339 --> 01:06:10,260
and to to base64 it's basically a new

1237
01:06:10,260 --> 01:06:12,799
buffer

1238
01:06:13,220 --> 01:06:17,700
with the payload that will be there

1239
01:06:17,700 --> 01:06:19,859
uh tailored

1240
01:06:19,859 --> 01:06:21,480
and

1241
01:06:21,480 --> 01:06:26,160
the buffer is in place 64.

1242
01:06:26,579 --> 01:06:30,599
to to string

1243
01:06:31,079 --> 01:06:35,039
is it so okay I will new buffer to

1244
01:06:35,039 --> 01:06:39,119
string I'm missing something here

1245
01:06:39,119 --> 01:06:43,440
okay and here I will just uh replace

1246
01:06:43,440 --> 01:06:47,000
payload with

1247
01:06:47,640 --> 01:06:50,900
my payload

1248
01:06:51,780 --> 01:06:55,980
uh from base64 and port

1249
01:06:55,980 --> 01:07:00,859
maybe 64 in code

1250
01:07:01,859 --> 01:07:03,380
open

1251
01:07:03,380 --> 01:07:06,510
[Music]

1252
01:07:10,260 --> 01:07:14,960
pay that just the trade

1253
01:07:18,660 --> 01:07:19,920
that

1254
01:07:19,920 --> 01:07:22,559
uh

1255
01:07:22,559 --> 01:07:25,260
I think this is good

1256
01:07:25,260 --> 01:07:27,539
and in the pillow.js I will just try to

1257
01:07:27,539 --> 01:07:29,099
do like a

1258
01:07:29,099 --> 01:07:32,640
just written 32 if I try to run exploit

1259
01:07:32,640 --> 01:07:35,359
GS

1260
01:07:35,700 --> 01:07:39,379
and byte objectives oh yeah

1261
01:07:43,520 --> 01:07:47,400
let's write in bytes

1262
01:07:47,400 --> 01:07:51,140
okay something went wrong

1263
01:07:51,240 --> 01:07:55,200
why though this is not required anymore

1264
01:07:55,200 --> 01:07:57,299
let's try something simpler in the

1265
01:07:57,299 --> 01:07:59,420
beginning

1266
01:08:02,339 --> 01:08:04,559
same thing went from y

1267
01:08:04,559 --> 01:08:06,900
uh because then I'm still trying to

1268
01:08:06,900 --> 01:08:08,760
submit GS payload to the flask

1269
01:08:08,760 --> 01:08:10,319
application

1270
01:08:10,319 --> 01:08:13,220
this would be better

1271
01:08:14,160 --> 01:08:15,240
this is better

1272
01:08:15,240 --> 01:08:16,439
so

1273
01:08:16,439 --> 01:08:20,880
here I can just put that back in

1274
01:08:20,880 --> 01:08:23,040
I can run the code so my guess is the

1275
01:08:23,040 --> 01:08:24,359
code is running but I don't have access

1276
01:08:24,359 --> 01:08:26,279
to the output

1277
01:08:26,279 --> 01:08:30,179
and sadly there is no easy tricks to to

1278
01:08:30,179 --> 01:08:34,920
do to get access to to the output

1279
01:08:34,920 --> 01:08:37,380
so we are a bit blind here

1280
01:08:37,380 --> 01:08:40,319
but the the real the real challenges

1281
01:08:40,319 --> 01:08:42,540
will be how do they get access through a

1282
01:08:42,540 --> 01:08:45,359
reference to the express

1283
01:08:45,359 --> 01:08:49,198
object to the server object application

1284
01:08:49,198 --> 01:08:51,238
and to do that we're gonna need to use

1285
01:08:51,238 --> 01:08:54,238
some JavaScript Blackmagic

1286
01:08:54,238 --> 01:08:55,799
like

1287
01:08:55,799 --> 01:08:58,319
to get access to the reference uh to

1288
01:08:58,319 --> 01:08:59,520
this preference we're gonna use

1289
01:08:59,520 --> 01:09:01,439
something called

1290
01:09:01,439 --> 01:09:02,238
um

1291
01:09:02,238 --> 01:09:05,339
async ooks

1292
01:09:05,339 --> 01:09:08,279
let me uh

1293
01:09:08,279 --> 01:09:09,979
oh

1294
01:09:09,979 --> 01:09:14,520
what is I think so I think look let's oh

1295
01:09:14,520 --> 01:09:16,979
I don't have Internet it's okay

1296
01:09:16,979 --> 01:09:19,020
I think ooks what what this is it's a

1297
01:09:19,020 --> 01:09:21,420
very it's an expirito uh module from

1298
01:09:21,420 --> 01:09:23,520
node.js

1299
01:09:23,520 --> 01:09:26,520
which uh allow you to create a hook that

1300
01:09:26,520 --> 01:09:29,939
will be run every time nothing context

1301
01:09:29,939 --> 01:09:32,279
is created

1302
01:09:32,279 --> 01:09:36,540
let's let's see if I can google.com

1303
01:09:43,560 --> 01:09:47,279
okay I think oops not GSR

1304
01:09:47,279 --> 01:09:48,719
I guess someone already visited the

1305
01:09:48,719 --> 01:09:50,399
website

1306
01:09:50,399 --> 01:09:53,100
so this is just include module so this

1307
01:09:53,100 --> 01:09:54,960
is very low level stuff

1308
01:09:54,960 --> 01:09:57,420
basically almost nobody used this thing

1309
01:09:57,420 --> 01:09:59,580
in real life but what we can do is Yes

1310
01:09:59,580 --> 01:10:01,260
Trade A Hook and the hook will be run

1311
01:10:01,260 --> 01:10:03,660
every time and I think uh context is

1312
01:10:03,660 --> 01:10:05,940
executed but I think context are

1313
01:10:05,940 --> 01:10:07,620
executed like all the time in JavaScript

1314
01:10:07,620 --> 01:10:09,780
for example every time you do async

1315
01:10:09,780 --> 01:10:13,020
await but even a simple console.log is

1316
01:10:13,020 --> 01:10:16,560
actually a a listing process

1317
01:10:16,560 --> 01:10:18,780
and this is a bit of an issue because

1318
01:10:18,780 --> 01:10:20,760
that means doing your hook you cannot

1319
01:10:20,760 --> 01:10:22,920
use console.log because if you use that

1320
01:10:22,920 --> 01:10:24,960
it will just basically do an infinite

1321
01:10:24,960 --> 01:10:26,880
Loop because it will create a Lessing

1322
01:10:26,880 --> 01:10:29,460
process that will be hooked again

1323
01:10:29,460 --> 01:10:32,760
so we are still going to use that

1324
01:10:32,760 --> 01:10:36,300
and by using that the every time the

1325
01:10:36,300 --> 01:10:38,760
server receive a request the request is

1326
01:10:38,760 --> 01:10:40,860
handle but the socket module and the

1327
01:10:40,860 --> 01:10:44,520
socket module use asynchronous code

1328
01:10:44,520 --> 01:10:46,620
so we should be able to get a reference

1329
01:10:46,620 --> 01:10:48,719
to the application through that

1330
01:10:48,719 --> 01:10:51,960
and to do that I will show you uh how it

1331
01:10:51,960 --> 01:10:53,820
works so

1332
01:10:53,820 --> 01:10:56,780
first we're gonna recover the require

1333
01:10:56,780 --> 01:10:59,820
function so this function is just in

1334
01:10:59,820 --> 01:11:03,179
process that main module that's required

1335
01:11:03,179 --> 01:11:06,060
so I can use it later

1336
01:11:06,060 --> 01:11:09,000
I will create my hooks

1337
01:11:09,000 --> 01:11:11,340
so how do I create a hook I need to

1338
01:11:11,340 --> 01:11:15,239
require so I think

1339
01:11:15,239 --> 01:11:17,699
hook this is the modular ones

1340
01:11:17,699 --> 01:11:21,960
and I will use the function create books

1341
01:11:21,960 --> 01:11:25,380
trade hook so create hook take a single

1342
01:11:25,380 --> 01:11:27,540
parameter with return object

1343
01:11:27,540 --> 01:11:30,840
and is its object we want to call the

1344
01:11:30,840 --> 01:11:32,880
the function at the initialization of

1345
01:11:32,880 --> 01:11:35,760
just asynchronous process

1346
01:11:35,760 --> 01:11:40,260
so in inits and this function take a

1347
01:11:40,260 --> 01:11:42,179
four parameter

1348
01:11:42,179 --> 01:11:44,460
we will get access to an async ID which

1349
01:11:44,460 --> 01:11:46,440
is unique for its request to get a type

1350
01:11:46,440 --> 01:11:52,759
we got a trigger async ID

1351
01:11:52,860 --> 01:11:56,219
and also get access to the resource

1352
01:11:56,219 --> 01:11:59,760
so let's let's write this function

1353
01:11:59,760 --> 01:12:01,620
so the thing we want to recover is the

1354
01:12:01,620 --> 01:12:04,380
app but we don't have it yet

1355
01:12:04,380 --> 01:12:07,699
luckily like I told you before

1356
01:12:07,699 --> 01:12:10,020
sometimes uh

1357
01:12:10,020 --> 01:12:12,900
but I mean every time you get a request

1358
01:12:12,900 --> 01:12:15,120
a new version process is created and I

1359
01:12:15,120 --> 01:12:18,179
can get access to that using uh this

1360
01:12:18,179 --> 01:12:21,840
simple line which is inside the resource

1361
01:12:21,840 --> 01:12:23,340
which is the the resource allocated to

1362
01:12:23,340 --> 01:12:25,199
the lasting process

1363
01:12:25,199 --> 01:12:28,739
if I look at the args and I look at the

1364
01:12:28,739 --> 01:12:30,780
first arcs and I look at stream and I

1365
01:12:30,780 --> 01:12:37,679
look at server dot row at least centers

1366
01:12:37,699 --> 01:12:41,040
and I call this with request

1367
01:12:41,040 --> 01:12:43,140
and I look at the first arguments this

1368
01:12:43,140 --> 01:12:46,500
is the actual node application

1369
01:12:46,500 --> 01:12:49,080
how did you find this uh by a lot of

1370
01:12:49,080 --> 01:12:51,239
trial and error so this I will give I

1371
01:12:51,239 --> 01:12:53,640
give you the solution but what I did is

1372
01:12:53,640 --> 01:12:56,340
basically I run this I think I'll try to

1373
01:12:56,340 --> 01:12:58,260
log what was happening

1374
01:12:58,260 --> 01:13:00,420
and because it's too difficult to detect

1375
01:13:00,420 --> 01:13:03,900
uh when it's when it's the the right uh

1376
01:13:03,900 --> 01:13:06,960
I think I think process I just try that

1377
01:13:06,960 --> 01:13:09,420
and if it's fail I just say okay no

1378
01:13:09,420 --> 01:13:10,800
worry I don't care

1379
01:13:10,800 --> 01:13:13,860
I just return if it's not the the good

1380
01:13:13,860 --> 01:13:16,580
the good thing

1381
01:13:16,739 --> 01:13:18,239
like you need to put it around so okay

1382
01:13:18,239 --> 01:13:20,460
so now I got access to my app

1383
01:13:20,460 --> 01:13:22,560
and we want to do the same thing we did

1384
01:13:22,560 --> 01:13:25,199
before with the the python application

1385
01:13:25,199 --> 01:13:27,360
which is recovering the list of function

1386
01:13:27,360 --> 01:13:28,739
of view function

1387
01:13:28,739 --> 01:13:31,320
in Python it was a dictionary mapping a

1388
01:13:31,320 --> 01:13:33,480
function name with the actual function

1389
01:13:33,480 --> 01:13:35,280
and in JavaScript it's a bit different

1390
01:13:35,280 --> 01:13:38,100
it's an array of function which will be

1391
01:13:38,100 --> 01:13:41,340
all called in in succession and once a

1392
01:13:41,340 --> 01:13:42,960
function is the right one it will just

1393
01:13:42,960 --> 01:13:44,640
return the data and stop calling the

1394
01:13:44,640 --> 01:13:46,820
rest

1395
01:13:47,159 --> 01:13:53,100
so okay let's create a fake so our

1396
01:13:53,100 --> 01:13:57,000
malicious view so

1397
01:13:57,000 --> 01:14:00,000
malicious

1398
01:14:00,659 --> 01:14:03,659
in express the all the functions take

1399
01:14:03,659 --> 01:14:05,760
two parameters which is the request and

1400
01:14:05,760 --> 01:14:07,800
the response usually called just track

1401
01:14:07,800 --> 01:14:10,219
and rest

1402
01:14:10,860 --> 01:14:13,980
and also the next that mean if you don't

1403
01:14:13,980 --> 01:14:16,500
want to handle the the request we can

1404
01:14:16,500 --> 01:14:17,880
just call the next function and we will

1405
01:14:17,880 --> 01:14:22,159
ask the next Handler what to do

1406
01:14:22,500 --> 01:14:25,920
and here we can just do a race.send and

1407
01:14:25,920 --> 01:14:29,659
send our message back send hello

1408
01:14:30,179 --> 01:14:34,320
okay and to to use this this function so

1409
01:14:34,320 --> 01:14:36,719
we can use simply the app that used the

1410
01:14:36,719 --> 01:14:39,120
of

1411
01:14:39,120 --> 01:14:40,560
of Express

1412
01:14:40,560 --> 01:14:43,560
with our malicious function the issue is

1413
01:14:43,560 --> 01:14:46,140
it this will be put at the end of all

1414
01:14:46,140 --> 01:14:47,640
the

1415
01:14:47,640 --> 01:14:50,460
the potential Handler and I don't want

1416
01:14:50,460 --> 01:14:51,900
that because it will never be run there

1417
01:14:51,900 --> 01:14:53,219
is always another function running

1418
01:14:53,219 --> 01:14:55,020
before

1419
01:14:55,020 --> 01:14:58,500
so not a problem I can just recover this

1420
01:14:58,500 --> 01:14:59,760
so

1421
01:14:59,760 --> 01:15:01,260
if I look at the app there is an

1422
01:15:01,260 --> 01:15:03,719
underscore router and use this router

1423
01:15:03,719 --> 01:15:05,340
and there is the stack with the list of

1424
01:15:05,340 --> 01:15:06,179
function

1425
01:15:06,179 --> 01:15:08,880
let me show you what I mean

1426
01:15:08,880 --> 01:15:13,199
here on the playground

1427
01:15:13,199 --> 01:15:15,000
uh

1428
01:15:15,000 --> 01:15:19,400
is it working if I just do like that no

1429
01:15:20,120 --> 01:15:24,000
I should have access to the app on a no

1430
01:15:24,000 --> 01:15:25,500
it's not defined

1431
01:15:25,500 --> 01:15:28,020
sadly so you have to believe me I will

1432
01:15:28,020 --> 01:15:29,940
show you later so there is a router the

1433
01:15:29,940 --> 01:15:32,640
stack and this will be uh uh the place

1434
01:15:32,640 --> 01:15:34,260
where all the functions are

1435
01:15:34,260 --> 01:15:36,960
I will just pop the last one which is my

1436
01:15:36,960 --> 01:15:38,820
actual function

1437
01:15:38,820 --> 01:15:40,980
why I used app.use because there is a

1438
01:15:40,980 --> 01:15:43,560
lot of internal stuff that expresses is

1439
01:15:43,560 --> 01:15:45,840
doing I don't want to handle myself so I

1440
01:15:45,840 --> 01:15:48,239
just say Okay use this I remove it from

1441
01:15:48,239 --> 01:15:49,860
the back and I will just put it in the

1442
01:15:49,860 --> 01:15:51,540
front

1443
01:15:51,540 --> 01:15:54,840
so app.fruiter.stack

1444
01:15:54,840 --> 01:15:58,020
and I will use a splice to inject it and

1445
01:15:58,020 --> 01:15:59,640
I don't want to put it right in the

1446
01:15:59,640 --> 01:16:01,620
beginning because in the beginning there

1447
01:16:01,620 --> 01:16:03,900
is two unless that are made by uh

1448
01:16:03,900 --> 01:16:07,020
Express which are just going to pass the

1449
01:16:07,020 --> 01:16:08,400
request for me because I don't want to

1450
01:16:08,400 --> 01:16:11,820
do all the uh HTTP passing I will let

1451
01:16:11,820 --> 01:16:13,679
Express handle it

1452
01:16:13,679 --> 01:16:15,540
so I'll just put it at position two in

1453
01:16:15,540 --> 01:16:16,380
the stack

1454
01:16:16,380 --> 01:16:18,360
actually position three so these two two

1455
01:16:18,360 --> 01:16:22,560
steps before and I will put my layer

1456
01:16:22,560 --> 01:16:26,040
and once all of that is done

1457
01:16:26,040 --> 01:16:30,199
I can just disable my hooks

1458
01:16:32,640 --> 01:16:35,699
because this will be run at every single

1459
01:16:35,699 --> 01:16:38,640
async process so this will basically run

1460
01:16:38,640 --> 01:16:41,219
maybe 20 times for each request I don't

1461
01:16:41,219 --> 01:16:43,739
want that to be running all the time

1462
01:16:43,739 --> 01:16:45,900
and now I can just hooks dot enable

1463
01:16:45,900 --> 01:16:48,900
enable

1464
01:16:49,500 --> 01:16:50,760
so let's

1465
01:16:50,760 --> 01:16:53,040
go through that again

1466
01:16:53,040 --> 01:16:54,960
so this code will be sent to the server

1467
01:16:54,960 --> 01:16:58,140
it will register a hook

1468
01:16:58,140 --> 01:17:02,880
if the application find if we find the

1469
01:17:02,880 --> 01:17:05,699
request inside the parameter we store it

1470
01:17:05,699 --> 01:17:08,040
in the app

1471
01:17:08,040 --> 01:17:10,500
once we got our app we can put a

1472
01:17:10,500 --> 01:17:12,960
malicious functions and after that we

1473
01:17:12,960 --> 01:17:15,679
disable the hook

1474
01:17:17,400 --> 01:17:22,199
okay and to make the thing easier

1475
01:17:22,199 --> 01:17:23,699
I will do

1476
01:17:23,699 --> 01:17:25,219
um

1477
01:17:25,219 --> 01:17:28,520
and then

1478
01:17:36,360 --> 01:17:40,140
it has that send this should be fine

1479
01:17:40,140 --> 01:17:42,960
let's try to run that the first time so

1480
01:17:42,960 --> 01:17:45,000
if we have that that mean now every

1481
01:17:45,000 --> 01:17:47,040
request will just send hello and the

1482
01:17:47,040 --> 01:17:48,960
website will be basically broken but

1483
01:17:48,960 --> 01:17:51,739
it's fine

1484
01:17:51,960 --> 01:17:53,940
there is like

1485
01:17:53,940 --> 01:17:55,739
100 shares it's not working on the first

1486
01:17:55,739 --> 01:17:57,679
try but

1487
01:17:57,679 --> 01:18:01,679
exploit yes

1488
01:18:03,560 --> 01:18:07,520
I got the same issues before

1489
01:18:13,860 --> 01:18:17,000
what is happening with

1490
01:18:41,159 --> 01:18:44,299
I don't get what's happening

1491
01:19:03,900 --> 01:19:06,500
foreign

1492
01:19:15,540 --> 01:19:20,300
okay it says something went wrong why

1493
01:19:20,540 --> 01:19:24,480
luckily I got a copy of that I can just

1494
01:19:24,480 --> 01:19:27,300
copy paste this

1495
01:19:27,300 --> 01:19:29,060
let's see if I've got more information

1496
01:19:29,060 --> 01:19:33,020
written 32

1497
01:19:33,300 --> 01:19:36,300
and to me this is not the my code

1498
01:19:36,300 --> 01:19:39,199
and

1499
01:19:40,560 --> 01:19:45,659
is this the right one looks looks unable

1500
01:19:45,659 --> 01:19:47,110
process

1501
01:19:47,110 --> 01:19:50,188
[Music]

1502
01:20:02,820 --> 01:20:05,640
okay what is not working properly I

1503
01:20:05,640 --> 01:20:10,800
think it's something inside of this so

1504
01:20:12,900 --> 01:20:15,080
foreign

1505
01:20:20,850 --> 01:20:23,929
[Music]

1506
01:20:31,560 --> 01:20:34,580
they forgot something

1507
01:20:57,300 --> 01:20:59,360
um

1508
01:21:00,179 --> 01:21:02,719
all right

1509
01:21:04,380 --> 01:21:06,600
I don't have the

1510
01:21:06,600 --> 01:21:08,580
the error

1511
01:21:08,580 --> 01:21:11,219
let's try to do that in

1512
01:21:11,219 --> 01:21:15,620
let's print the the actual payload

1513
01:21:15,659 --> 01:21:17,719
um

1514
01:21:22,560 --> 01:21:27,140
so this should be running and it's not

1515
01:21:29,900 --> 01:21:33,440
in the playground

1516
01:21:34,620 --> 01:21:37,679
as you cannot find module I think

1517
01:21:37,679 --> 01:21:40,320
because it's I think hooks

1518
01:21:40,320 --> 01:21:42,360
my guess is

1519
01:21:42,360 --> 01:21:44,760
yeah

1520
01:21:44,760 --> 01:21:47,400
it's I think looks

1521
01:21:47,400 --> 01:21:52,199
okay GS I think ooks so let's run that

1522
01:21:52,199 --> 01:21:55,560
again an email was sent to the admin but

1523
01:21:55,560 --> 01:21:57,300
not every time I open the website I

1524
01:21:57,300 --> 01:22:00,300
should have uh I should have broken the

1525
01:22:00,300 --> 01:22:01,320
website

1526
01:22:01,320 --> 01:22:03,780
and I got hello instead so I was able to

1527
01:22:03,780 --> 01:22:05,760
get the reference to the to the express

1528
01:22:05,760 --> 01:22:07,920
object and replace the thing in memory

1529
01:22:07,920 --> 01:22:10,520
again

1530
01:22:10,800 --> 01:22:13,679
okay and now we are that's uh this broke

1531
01:22:13,679 --> 01:22:15,840
everything so I need to restart it I

1532
01:22:15,840 --> 01:22:19,100
want to do like the same thing as before

1533
01:22:19,199 --> 01:22:22,560
so instead of uh just uh sending hello

1534
01:22:22,560 --> 01:22:25,620
we can check up the request so if the

1535
01:22:25,620 --> 01:22:27,780
request that path

1536
01:22:27,780 --> 01:22:30,480
is the path we want so if it's the index

1537
01:22:30,480 --> 01:22:32,340
we will do something we will do

1538
01:22:32,340 --> 01:22:33,659
something else

1539
01:22:33,659 --> 01:22:37,560
and okay I will once again read the

1540
01:22:37,560 --> 01:22:39,780
index.html

1541
01:22:39,780 --> 01:22:45,000
um so if I want to run some code some

1542
01:22:45,300 --> 01:22:48,920
some command I can require

1543
01:22:48,920 --> 01:22:52,640
child process

1544
01:22:55,440 --> 01:22:58,920
here I will remove that

1545
01:22:58,920 --> 01:23:02,800
and CP that exact thing ID

1546
01:23:02,800 --> 01:23:04,860
[Music]

1547
01:23:04,860 --> 01:23:09,620
and we just rest that send

1548
01:23:10,199 --> 01:23:13,199
and execute that

1549
01:23:13,199 --> 01:23:15,480
so I sent my first request everything is

1550
01:23:15,480 --> 01:23:18,000
a rock it's install all my hook recover

1551
01:23:18,000 --> 01:23:21,179
the app and put the fake root in uh the

1552
01:23:21,179 --> 01:23:25,920
fake thing the malicious uh function and

1553
01:23:25,920 --> 01:23:28,440
if I call the the thing again this time

1554
01:23:28,440 --> 01:23:30,480
it will just exact my code and I get

1555
01:23:30,480 --> 01:23:33,480
here uh exact number the group

1556
01:23:33,480 --> 01:23:34,380
Etc

1557
01:23:34,380 --> 01:23:36,360
so now every time I go to the website I

1558
01:23:36,360 --> 01:23:37,500
got this again

1559
01:23:37,500 --> 01:23:42,360
uh oh it just sent me bytes so my broad

1560
01:23:42,360 --> 01:23:45,420
my browser tried to download it but it's

1561
01:23:45,420 --> 01:23:47,960
the same thing

1562
01:23:48,060 --> 01:23:50,400
okay and now we can do what we did

1563
01:23:50,400 --> 01:23:53,940
before which is a

1564
01:23:53,940 --> 01:23:59,040
let's get Fs this time and you do FS

1565
01:23:59,040 --> 01:24:04,620
with file sync it was in this index.html

1566
01:24:05,520 --> 01:24:09,260
if I do that I should uh

1567
01:24:10,020 --> 01:24:13,800
so if rec.path

1568
01:24:14,040 --> 01:24:18,239
if if it's not slash let's just uh do

1569
01:24:18,239 --> 01:24:20,640
the next thing

1570
01:24:20,640 --> 01:24:24,260
let's just ignore the request

1571
01:24:26,880 --> 01:24:31,199
and if it's slash we will get index.html

1572
01:24:31,199 --> 01:24:33,239
and we will replace what we did before

1573
01:24:33,239 --> 01:24:36,239
body

1574
01:24:38,640 --> 01:24:42,659
with script alert

1575
01:24:49,640 --> 01:24:54,420
this should be okay I can

1576
01:24:54,420 --> 01:24:56,880
just removed this I don't need it

1577
01:24:56,880 --> 01:24:58,620
anymore

1578
01:24:58,620 --> 01:25:00,719
let's run that

1579
01:25:00,719 --> 01:25:03,000
anybody was sent to the admin and if I

1580
01:25:03,000 --> 01:25:05,520
go to the index

1581
01:25:05,520 --> 01:25:07,679
with facing that replace is not a

1582
01:25:07,679 --> 01:25:11,420
function uh what is it

1583
01:25:16,140 --> 01:25:18,140
um

1584
01:25:21,780 --> 01:25:25,140
oh this should be it's downloading

1585
01:25:25,140 --> 01:25:27,420
something let's scale the page to see

1586
01:25:27,420 --> 01:25:31,380
what's actually happening

1587
01:25:37,980 --> 01:25:42,500
I think I broke the content type

1588
01:25:44,460 --> 01:25:48,860
oh this is a okay so two string

1589
01:25:50,580 --> 01:25:52,860
I think it's just a byte buffer instead

1590
01:25:52,860 --> 01:25:54,980
of

1591
01:25:55,440 --> 01:25:58,199
instead of a classic string

1592
01:25:58,199 --> 01:26:01,020
okay let's so it's run oh I don't want

1593
01:26:01,020 --> 01:26:03,480
this I want this and you know if I curl

1594
01:26:03,480 --> 01:26:05,639
I should see my alert one yeah

1595
01:26:05,639 --> 01:26:08,120
yeah

1596
01:26:08,280 --> 01:26:10,739
not this one and this one so I've got my

1597
01:26:10,739 --> 01:26:12,000
alerts but the website is still working

1598
01:26:12,000 --> 01:26:14,820
so once again I managed to backdoor the

1599
01:26:14,820 --> 01:26:17,159
application without actually touching a

1600
01:26:17,159 --> 01:26:21,480
single file on the on the wall docker

1601
01:26:21,480 --> 01:26:23,580
and that's basically all I wanted to

1602
01:26:23,580 --> 01:26:24,780
show you today

1603
01:26:24,780 --> 01:26:26,580
so if you got any question if you want

1604
01:26:26,580 --> 01:26:30,480
me to go back on some specific points

1605
01:26:30,480 --> 01:26:33,678
to help you understand it better

1606
01:26:35,820 --> 01:26:37,500
I don't know

1607
01:26:37,500 --> 01:26:40,980
do anyone has any question about uh all

1608
01:26:40,980 --> 01:26:43,339
of that

1609
01:26:54,840 --> 01:26:57,840
no

1610
01:26:58,739 --> 01:27:00,840
so thank you everyone if there is a oh

1611
01:27:00,840 --> 01:27:03,080
yeah

1612
01:27:06,139 --> 01:27:08,880
will you be able to access your Xbox

1613
01:27:08,880 --> 01:27:12,360
scripts after this Workshop uh they're

1614
01:27:12,360 --> 01:27:13,980
not released yet I'm planning to do a

1615
01:27:13,980 --> 01:27:16,080
blog post about all of that it should be

1616
01:27:16,080 --> 01:27:18,360
released like I think next week or in

1617
01:27:18,360 --> 01:27:19,679
two weeks

1618
01:27:19,679 --> 01:27:22,440
but you can still download all the

1619
01:27:22,440 --> 01:27:23,960
Dockers

1620
01:27:23,960 --> 01:27:25,860
uh

1621
01:27:25,860 --> 01:27:30,080
from the website earlier

1622
01:27:32,179 --> 01:27:36,480
on bi.tk slash the

1623
01:27:36,480 --> 01:27:39,360
composted channels it should be in lower

1624
01:27:39,360 --> 01:27:40,860
score

1625
01:27:40,860 --> 01:27:42,360
so here you have the dokyo if you want

1626
01:27:42,360 --> 01:27:44,659
to train

1627
01:27:46,020 --> 01:27:48,480
okay thank you I'll be looking for the

1628
01:27:48,480 --> 01:27:51,780
blog post sorry yeah and I will share

1629
01:27:51,780 --> 01:27:53,940
everything but I can show you something

1630
01:27:53,940 --> 01:27:57,540
else if I have it over there

1631
01:27:57,540 --> 01:28:00,380
foreign

1632
01:28:44,600 --> 01:28:47,340
okay so I will show you a tool I build

1633
01:28:47,340 --> 01:28:49,380
with uh I will be available also in two

1634
01:28:49,380 --> 01:28:51,840
weeks that automatically Autumn do all

1635
01:28:51,840 --> 01:28:54,120
of this but automatically

1636
01:28:54,120 --> 01:28:56,100
I'm just building the application it

1637
01:28:56,100 --> 01:28:59,179
just gives me a sec

1638
01:29:08,940 --> 01:29:11,659
it's a bit slow

1639
01:29:12,000 --> 01:29:15,000
or

1640
01:29:15,440 --> 01:29:17,940
yeah it will be on Twitter you can

1641
01:29:17,940 --> 01:29:20,400
follow me at um

1642
01:29:20,400 --> 01:29:23,179
BK

1643
01:29:27,960 --> 01:29:30,960
on the yes react Twitter also it will be

1644
01:29:30,960 --> 01:29:33,540
probably on the yes react blog post blog

1645
01:29:33,540 --> 01:29:35,880
so you can find me over there

1646
01:29:35,880 --> 01:29:39,679
let's open this

1647
01:29:43,260 --> 01:29:45,420
so this is a tool I built to automate

1648
01:29:45,420 --> 01:29:48,000
this kind of attacks

1649
01:29:48,000 --> 01:29:51,420
uh I can just grab a payload from here I

1650
01:29:51,420 --> 01:29:53,940
want to like I will do it on flask I

1651
01:29:53,940 --> 01:29:57,659
want a ginger ssti payload it will just

1652
01:29:57,659 --> 01:29:59,760
build a pellet for me

1653
01:29:59,760 --> 01:30:04,699
I can copy past it and run it uh

1654
01:30:05,400 --> 01:30:09,500
I will run it here for example

1655
01:30:10,440 --> 01:30:12,360
so nothing happened but basically what

1656
01:30:12,360 --> 01:30:15,960
it did it's install uh in memory a

1657
01:30:15,960 --> 01:30:18,659
parasite uh

1658
01:30:18,659 --> 01:30:21,360
a malicious ad agent and now I can see

1659
01:30:21,360 --> 01:30:25,199
all the actual route of the website

1660
01:30:25,199 --> 01:30:27,239
I can even check the source code

1661
01:30:27,239 --> 01:30:30,380
directly from My Backdoor

1662
01:30:30,380 --> 01:30:33,120
I can

1663
01:30:33,120 --> 01:30:36,600
I have a nice shell ready which Trend

1664
01:30:36,600 --> 01:30:39,360
which render code remotely

1665
01:30:39,360 --> 01:30:41,159
I can also look at the file system

1666
01:30:41,159 --> 01:30:43,980
directly so I can see everything that's

1667
01:30:43,980 --> 01:30:46,560
in inside the target

1668
01:30:46,560 --> 01:30:49,679
but another nice thing is you can easily

1669
01:30:49,679 --> 01:30:52,500
hook roots for example here I call the

1670
01:30:52,500 --> 01:30:55,500
original function but I can just uh

1671
01:30:55,500 --> 01:30:57,239
say Okay return

1672
01:30:57,239 --> 01:30:57,980
um

1673
01:30:57,980 --> 01:31:03,259
from flask in ports make response

1674
01:31:06,780 --> 01:31:10,199
hello and I want to hook the index

1675
01:31:10,199 --> 01:31:12,360
I will try to hook it it turns to green

1676
01:31:12,360 --> 01:31:15,060
and if I try now to go to the index I

1677
01:31:15,060 --> 01:31:16,320
should have hello

1678
01:31:16,320 --> 01:31:18,360
and I can also just say okay I don't

1679
01:31:18,360 --> 01:31:20,400
want to hook it anymore I can unhook the

1680
01:31:20,400 --> 01:31:23,040
route go back and everything is working

1681
01:31:23,040 --> 01:31:25,440
just like before

1682
01:31:25,440 --> 01:31:28,920
so I plan also to share this tool my

1683
01:31:28,920 --> 01:31:30,360
boss don't want me to share it because

1684
01:31:30,360 --> 01:31:32,760
they think it's maybe too that dangerous

1685
01:31:32,760 --> 01:31:35,699
but I will try to share it with you so

1686
01:31:35,699 --> 01:31:38,159
this will be also another way to

1687
01:31:38,159 --> 01:31:40,199
to use this kind of technique uh during

1688
01:31:40,199 --> 01:31:42,780
one of your pen tests but also if you

1689
01:31:42,780 --> 01:31:44,280
find a temperature injection in real

1690
01:31:44,280 --> 01:31:45,900
life during a big bouncy or pen test

1691
01:31:45,900 --> 01:31:47,639
make sure you have the permission to do

1692
01:31:47,639 --> 01:31:49,800
this kind of attacks because this can be

1693
01:31:49,800 --> 01:31:51,300
very destructive

1694
01:31:51,300 --> 01:31:54,600
uh I like I showed you before I crash my

1695
01:31:54,600 --> 01:31:56,639
own website maybe 10 times today even

1696
01:31:56,639 --> 01:31:57,480
more

1697
01:31:57,480 --> 01:31:59,699
so it will happen to you if you do it in

1698
01:31:59,699 --> 01:32:01,199
production it's gonna be bad because you

1699
01:32:01,199 --> 01:32:02,820
need to restart everything and sometimes

1700
01:32:02,820 --> 01:32:04,980
it's not easy to restart the server

1701
01:32:04,980 --> 01:32:07,560
and also you can think of it it's the

1702
01:32:07,560 --> 01:32:09,300
same if you are doing a pen test you

1703
01:32:09,300 --> 01:32:11,460
will never put a back door in a PHP file

1704
01:32:11,460 --> 01:32:14,159
for example think of it as the same

1705
01:32:14,159 --> 01:32:16,080
thing so don't don't do this in

1706
01:32:16,080 --> 01:32:16,920
production if you don't have the

1707
01:32:16,920 --> 01:32:19,260
authorization this was all an exercise

1708
01:32:19,260 --> 01:32:22,260
to understand better like okay if I get

1709
01:32:22,260 --> 01:32:24,780
SC in the docker is it still an

1710
01:32:24,780 --> 01:32:26,880
impactful vulnerability or no and with

1711
01:32:26,880 --> 01:32:30,060
this I just proved that it's still a big

1712
01:32:30,060 --> 01:32:33,659
impact even if everything is writtenly

1713
01:32:33,659 --> 01:32:36,780
so that's all I had to say today I think

1714
01:32:36,780 --> 01:32:38,639
actually we have another question from

1715
01:32:38,639 --> 01:32:41,219
the slider if you had access to the file

1716
01:32:41,219 --> 01:32:42,900
system continue to just plan an engine

1717
01:32:42,900 --> 01:32:44,940
onto the server uh no because the world

1718
01:32:44,940 --> 01:32:48,060
Docker is mounted in readily uh so I

1719
01:32:48,060 --> 01:32:50,159
cannot write on the server and another

1720
01:32:50,159 --> 01:32:52,020
thing is in docker

1721
01:32:52,020 --> 01:32:54,659
if this is a python application or a

1722
01:32:54,659 --> 01:32:57,060
JavaScript application

1723
01:32:57,060 --> 01:33:00,239
you need to restart the process for the

1724
01:33:00,239 --> 01:33:02,219
modification on the file to take to take

1725
01:33:02,219 --> 01:33:04,800
uh to work actually but if you will stop

1726
01:33:04,800 --> 01:33:06,420
the process in the docker you just stop

1727
01:33:06,420 --> 01:33:08,820
the docker so there is no way to restart

1728
01:33:08,820 --> 01:33:11,159
the process so no accessing the file

1729
01:33:11,159 --> 01:33:12,600
system is not a

1730
01:33:12,600 --> 01:33:15,840
it's not doable in this case

1731
01:33:15,840 --> 01:33:17,760
okay do we have any more questions from

1732
01:33:17,760 --> 01:33:19,199
the floor

1733
01:33:19,199 --> 01:33:21,060
okay if not let's give our Applause for

1734
01:33:21,060 --> 01:33:22,650
our Lookers here

1735
01:33:22,650 --> 01:33:25,820
[Applause]

