1
00:00:07,460 --> 00:00:09,480
Okay so

2
00:00:09,480 --> 00:00:13,799
how did this adventure come about

3
00:00:13,799 --> 00:00:16,139
it all started when the neighborhood I

4
00:00:16,139 --> 00:00:18,960
live in in South Africa decided for

5
00:00:18,960 --> 00:00:20,760
security purposes that we wanted to be

6
00:00:20,760 --> 00:00:25,100
able to close our neighborhood so our

7
00:00:25,100 --> 00:00:28,820
local Administration does allow

8
00:00:28,820 --> 00:00:32,159
neighborhoods to uh to apply to close

9
00:00:32,159 --> 00:00:34,980
the area you know to close streets off

10
00:00:34,980 --> 00:00:37,680
with security gates and so on

11
00:00:37,680 --> 00:00:39,540
um to

12
00:00:39,540 --> 00:00:43,280
try and prevent crime in the area

13
00:00:43,559 --> 00:00:45,899
and so what we decided to do we wanted

14
00:00:45,899 --> 00:00:48,719
to do was to put automated gates at two

15
00:00:48,719 --> 00:00:51,960
entrances block off two others with

16
00:00:51,960 --> 00:00:53,340
permanent Gates and then we'd have a

17
00:00:53,340 --> 00:00:55,620
boom gate for for visitors

18
00:00:55,620 --> 00:00:59,039
but we also wanted to allow residents to

19
00:00:59,039 --> 00:01:02,100
use those two automated Gates

20
00:01:02,100 --> 00:01:04,979
um as they as they needed to

21
00:01:04,979 --> 00:01:08,040
and also we had a requirement that those

22
00:01:08,040 --> 00:01:10,260
Gates be opened at particular times of

23
00:01:10,260 --> 00:01:12,900
the day to allow traffic to pass through

24
00:01:12,900 --> 00:01:15,420
during peak hours

25
00:01:15,420 --> 00:01:17,760
so this talk is going to cover a few

26
00:01:17,760 --> 00:01:19,560
aspects of the journey

27
00:01:19,560 --> 00:01:22,439
um why we close why we chose key lock

28
00:01:22,439 --> 00:01:24,540
what key lock actually is and what it

29
00:01:24,540 --> 00:01:28,560
implies and how it works as well as my

30
00:01:28,560 --> 00:01:31,380
experience in obtaining full access to

31
00:01:31,380 --> 00:01:36,659
both the receiver and the transmitters

32
00:01:36,659 --> 00:01:39,780
and while it does focus on a particular

33
00:01:39,780 --> 00:01:41,240
manufacturer

34
00:01:41,240 --> 00:01:43,860
I won't be revealing the manufacturer

35
00:01:43,860 --> 00:01:44,900
key

36
00:01:44,900 --> 00:01:48,180
primarily because we're still using

37
00:01:48,180 --> 00:01:50,880
these remotes in our closure yeah we've

38
00:01:50,880 --> 00:01:53,100
got a reasonable sized investment in

39
00:01:53,100 --> 00:01:55,500
them and of course there are probably

40
00:01:55,500 --> 00:01:57,240
hundreds of thousands of other people

41
00:01:57,240 --> 00:02:00,320
who are also using these same

42
00:02:00,320 --> 00:02:03,000
transmitters and receivers and the

43
00:02:03,000 --> 00:02:04,939
manufacturer when I informed them about

44
00:02:04,939 --> 00:02:07,619
you know my ability to recover this key

45
00:02:07,619 --> 00:02:10,380
basically said we don't have a plan

46
00:02:10,380 --> 00:02:14,400
we've got no no plan to replace them to

47
00:02:14,400 --> 00:02:16,080
recall them or anything like like that

48
00:02:16,080 --> 00:02:19,680
to just be simply too expensive and

49
00:02:19,680 --> 00:02:23,660
we've got no kind of you know upgrade

50
00:02:23,660 --> 00:02:25,980
procedures or anything like that that we

51
00:02:25,980 --> 00:02:28,140
have in place so unfortunately I won't

52
00:02:28,140 --> 00:02:31,200
be sharing the key but it's

53
00:02:31,200 --> 00:02:34,319
probably easy enough for anybody to

54
00:02:34,319 --> 00:02:36,959
follow what I've done

55
00:02:36,959 --> 00:02:39,300
um given the sort of breadcrumbs I'll be

56
00:02:39,300 --> 00:02:41,780
laying down

57
00:02:42,780 --> 00:02:44,519
Okay so

58
00:02:44,519 --> 00:02:46,440
we wanted to have something that was

59
00:02:46,440 --> 00:02:48,959
better than your average gate opener and

60
00:02:48,959 --> 00:02:51,060
especially considering that this uh this

61
00:02:51,060 --> 00:02:55,440
adventure started uh around 2008 2009

62
00:02:55,440 --> 00:02:57,180
time frame

63
00:02:57,180 --> 00:02:58,319
um

64
00:02:58,319 --> 00:03:01,920
when the time of rolling codes wasn't

65
00:03:01,920 --> 00:03:04,379
actually all that common so we wanted to

66
00:03:04,379 --> 00:03:06,120
have better than uh than those average

67
00:03:06,120 --> 00:03:09,000
gate openers because of part smart

68
00:03:09,000 --> 00:03:12,000
people like Andrew Mohawk or Andrew NoHo

69
00:03:12,000 --> 00:03:13,220
because he is now

70
00:03:13,220 --> 00:03:15,800
who demonstrated back in

71
00:03:15,800 --> 00:03:19,459
2012 how to Snoop and replay

72
00:03:19,459 --> 00:03:21,780
fixed code remotes

73
00:03:21,780 --> 00:03:24,780
so he managed to decode the bit pattern

74
00:03:24,780 --> 00:03:28,739
transmitted and replay those using a

75
00:03:28,739 --> 00:03:30,720
cheap transmitter

76
00:03:30,720 --> 00:03:32,700
um and I'm confusing up my data

77
00:03:32,700 --> 00:03:34,739
obviously we started this journey in

78
00:03:34,739 --> 00:03:37,920
2009 as a security person I was already

79
00:03:37,920 --> 00:03:40,500
aware of the possibilities Andrew

80
00:03:40,500 --> 00:03:42,420
obviously demonstrated this a little bit

81
00:03:42,420 --> 00:03:43,799
later

82
00:03:43,799 --> 00:03:44,580
um

83
00:03:44,580 --> 00:03:48,540
and so if you are able to to replay a

84
00:03:48,540 --> 00:03:50,220
transmitter code

85
00:03:50,220 --> 00:03:50,879
um

86
00:03:50,879 --> 00:03:53,640
then obviously all the security of your

87
00:03:53,640 --> 00:03:56,459
closure starts to go out the window

88
00:03:56,459 --> 00:03:57,420
um

89
00:03:57,420 --> 00:04:01,140
and you know it wouldn't be a um a great

90
00:04:01,140 --> 00:04:03,540
setup for a community of 150 households

91
00:04:03,540 --> 00:04:05,519
you have to go out and buy new

92
00:04:05,519 --> 00:04:08,640
transmitters and new receivers

93
00:04:08,640 --> 00:04:10,739
uh and so right off the bat we wanted to

94
00:04:10,739 --> 00:04:12,120
make sure

95
00:04:12,120 --> 00:04:13,439
um that we would have something a bit

96
00:04:13,439 --> 00:04:14,879
better than that

97
00:04:14,879 --> 00:04:16,560
the other thing

98
00:04:16,560 --> 00:04:20,339
um is that we I previously previously

99
00:04:20,339 --> 00:04:23,460
lived in a smaller community of

100
00:04:23,460 --> 00:04:27,120
townhouses and was very familiar with

101
00:04:27,120 --> 00:04:30,360
the sort of flag days when you know if a

102
00:04:30,360 --> 00:04:32,040
remote got stolen you wanted to change

103
00:04:32,040 --> 00:04:34,919
the code and all of the residents had to

104
00:04:34,919 --> 00:04:37,500
come to the gates all at once to change

105
00:04:37,500 --> 00:04:39,360
to the new value so that you could cycle

106
00:04:39,360 --> 00:04:41,759
cycle those codes and so when you've got

107
00:04:41,759 --> 00:04:45,419
150 households with you know two or

108
00:04:45,419 --> 00:04:47,580
three remotes each that becomes a

109
00:04:47,580 --> 00:04:50,460
massive undertaking to coordinate

110
00:04:50,460 --> 00:04:52,740
so Centurion gate motors are pretty much

111
00:04:52,740 --> 00:04:56,580
the gold standard in South Africa I'm

112
00:04:56,580 --> 00:04:58,080
not aware of anybody else that has

113
00:04:58,080 --> 00:05:01,199
anything near to the market penetration

114
00:05:01,199 --> 00:05:04,080
um we ended up choosing the the D5 Evo

115
00:05:04,080 --> 00:05:05,880
which is a really sophisticated

116
00:05:05,880 --> 00:05:07,680
controller

117
00:05:07,680 --> 00:05:09,780
um it's got things like time of day

118
00:05:09,780 --> 00:05:12,419
settings to open and close the gates at

119
00:05:12,419 --> 00:05:15,060
particular times which is perfect for

120
00:05:15,060 --> 00:05:18,120
our Access Control permit where we had

121
00:05:18,120 --> 00:05:21,120
to open a tulal peak traffic to pass

122
00:05:21,120 --> 00:05:23,460
and it also has a built-in receiver for

123
00:05:23,460 --> 00:05:25,680
remotes which make use of the key lock

124
00:05:25,680 --> 00:05:28,919
system sounds perfect

125
00:05:28,919 --> 00:05:31,500
um except it was only capable of

126
00:05:31,500 --> 00:05:34,380
learning up to 500 remotes

127
00:05:34,380 --> 00:05:37,139
um 500 buttons sorry

128
00:05:37,139 --> 00:05:38,940
um and of course each transmitter can

129
00:05:38,940 --> 00:05:42,479
have up to four batons

130
00:05:42,479 --> 00:05:44,820
and while it may have been feasible to

131
00:05:44,820 --> 00:05:48,720
manage the remotes for 150 of 150

132
00:05:48,720 --> 00:05:51,000
households and it would get really tight

133
00:05:51,000 --> 00:05:54,360
if we had to deal with more than than

134
00:05:54,360 --> 00:05:56,460
two per household it wouldn't have been

135
00:05:56,460 --> 00:06:00,500
possible to coordinate those remotes

136
00:06:00,500 --> 00:06:03,000
enrollment between the two different

137
00:06:03,000 --> 00:06:05,580
Gates that we needed to that we wanted

138
00:06:05,580 --> 00:06:06,900
to manage

139
00:06:06,900 --> 00:06:09,500
huh

140
00:06:09,900 --> 00:06:13,440
and so we ended up with a receiver from

141
00:06:13,440 --> 00:06:15,020
a company called show Electronics

142
00:06:15,020 --> 00:06:18,720
they're complex receiver this is a

143
00:06:18,720 --> 00:06:20,699
device that can accommodate up to 8 000

144
00:06:20,699 --> 00:06:24,060
enrolled transmitters split across two

145
00:06:24,060 --> 00:06:26,639
relays which is perfect because at some

146
00:06:26,639 --> 00:06:28,979
at one end of the the road we had two

147
00:06:28,979 --> 00:06:31,319
gates you know opening and closing in in

148
00:06:31,319 --> 00:06:33,840
opposite directions

149
00:06:33,840 --> 00:06:35,880
so then the matter of actually managing

150
00:06:35,880 --> 00:06:39,720
those transmitters arose since we had

151
00:06:39,720 --> 00:06:41,340
two gates we wanted to synchronize them

152
00:06:41,340 --> 00:06:44,660
and have a backup obviously in case of

153
00:06:44,660 --> 00:06:49,139
lightning damage or any other reason

154
00:06:49,139 --> 00:06:51,720
so showotronics provides an application

155
00:06:51,720 --> 00:06:54,120
that allows you to interface directly

156
00:06:54,120 --> 00:06:56,900
with the receiver over a USB port

157
00:06:56,900 --> 00:07:00,120
and enroll remotes into that application

158
00:07:00,120 --> 00:07:02,699
directly unfortunately the app was

159
00:07:02,699 --> 00:07:03,979
terrible

160
00:07:03,979 --> 00:07:09,000
and so I it was because it was a net app

161
00:07:09,000 --> 00:07:10,979
decompil it to try and figure out

162
00:07:10,979 --> 00:07:13,380
exactly how it's communicating with the

163
00:07:13,380 --> 00:07:15,720
remote look at the format of the values

164
00:07:15,720 --> 00:07:17,520
that it's receiving and storing and try

165
00:07:17,520 --> 00:07:19,680
and figure out which parts are important

166
00:07:19,680 --> 00:07:22,139
and which parts are less important and

167
00:07:22,139 --> 00:07:24,479
you know figure out things like cyclic

168
00:07:24,479 --> 00:07:27,840
redundancy checks and that sort of thing

169
00:07:27,840 --> 00:07:30,060
um and so I re-implemented their

170
00:07:30,060 --> 00:07:32,580
application using uh using Java because

171
00:07:32,580 --> 00:07:35,639
that's what I knew at the time

172
00:07:35,639 --> 00:07:39,360
um and was able to enroll 400 or 500

173
00:07:39,360 --> 00:07:44,599
remotes uh fairly easily at the time

174
00:07:49,319 --> 00:07:52,259
okay so so what is key lock actually

175
00:07:52,259 --> 00:07:53,280
um

176
00:07:53,280 --> 00:07:57,539
key lock was founded on was founded by

177
00:07:57,539 --> 00:08:00,240
um some South Africans actually a

178
00:08:00,240 --> 00:08:02,039
company called nanotech back in the late

179
00:08:02,039 --> 00:08:04,620
80s so it's definitely been around for a

180
00:08:04,620 --> 00:08:06,720
long time I think it was sort of

181
00:08:06,720 --> 00:08:08,639
revolutionary back in the day to use

182
00:08:08,639 --> 00:08:11,539
these these rolling codes

183
00:08:11,539 --> 00:08:14,000
but their principles were basically

184
00:08:14,000 --> 00:08:16,560
secure remote control systems can only

185
00:08:16,560 --> 00:08:19,020
be implemented if two conditions are met

186
00:08:19,020 --> 00:08:21,419
a large number of possible combinations

187
00:08:21,419 --> 00:08:23,940
must be available and the system may

188
00:08:23,940 --> 00:08:25,620
never respond twice to the same

189
00:08:25,620 --> 00:08:28,560
transmitted code and that obviously

190
00:08:28,560 --> 00:08:31,560
prevents replay attacks from being

191
00:08:31,560 --> 00:08:32,820
effective

192
00:08:32,820 --> 00:08:36,059
and so the first requirement is achieved

193
00:08:36,059 --> 00:08:40,020
by transmitting a 66-bit code word

194
00:08:40,020 --> 00:08:42,360
um so there's that large number of

195
00:08:42,360 --> 00:08:44,940
possible combinations

196
00:08:44,940 --> 00:08:46,020
um

197
00:08:46,020 --> 00:08:48,360
and then the second requirement is

198
00:08:48,360 --> 00:08:51,360
achieved by including a 16-bit increment

199
00:08:51,360 --> 00:08:52,980
encounter

200
00:08:52,980 --> 00:08:56,100
that the that is synchronized between

201
00:08:56,100 --> 00:08:58,560
the transmitter and the receiver and so

202
00:08:58,560 --> 00:09:00,620
if the receiver

203
00:09:00,620 --> 00:09:03,060
receives a transmission with the same

204
00:09:03,060 --> 00:09:05,880
code word or a previous code word then

205
00:09:05,880 --> 00:09:08,700
it knows that it should ignore those

206
00:09:08,700 --> 00:09:12,019
those Transmissions

207
00:09:13,440 --> 00:09:15,480
um but hold on you may be thinking that

208
00:09:15,480 --> 00:09:17,700
if the if it's just a simple counter

209
00:09:17,700 --> 00:09:19,440
yeah once the

210
00:09:19,440 --> 00:09:21,300
um the eavesdropper looks at the

211
00:09:21,300 --> 00:09:22,740
transmission that they've captured they

212
00:09:22,740 --> 00:09:24,600
could simply increment the counter

213
00:09:24,600 --> 00:09:27,360
so this approach or this attack is

214
00:09:27,360 --> 00:09:30,240
foiled by encrypting the counter and

215
00:09:30,240 --> 00:09:32,279
some other data

216
00:09:32,279 --> 00:09:34,860
um using a key shared between the

217
00:09:34,860 --> 00:09:39,060
receiver and the transmitter and so you

218
00:09:39,060 --> 00:09:41,399
end up with a 32-bit value which is

219
00:09:41,399 --> 00:09:44,040
encrypted and essentially or effectively

220
00:09:44,040 --> 00:09:45,779
random

221
00:09:45,779 --> 00:09:46,820
um

222
00:09:46,820 --> 00:09:51,420
that prevents those kinds of attacks

223
00:09:51,420 --> 00:09:55,860
so it's not uh technically a 66-bit key

224
00:09:55,860 --> 00:09:59,640
space anymore 34 of those bits are are

225
00:09:59,640 --> 00:10:02,880
readable and uh and predictable

226
00:10:02,880 --> 00:10:06,600
but the remaining 32 bits are sufficient

227
00:10:06,600 --> 00:10:08,580
to prevent Brute Force attacks

228
00:10:08,580 --> 00:10:10,920
considering that it is an encrypted

229
00:10:10,920 --> 00:10:12,300
value

230
00:10:12,300 --> 00:10:14,940
um and so you've got a four billion

231
00:10:14,940 --> 00:10:17,339
number key space at one second per day

232
00:10:17,339 --> 00:10:19,740
you're looking at you know thousands of

233
00:10:19,740 --> 00:10:24,300
days to successfully send one value and

234
00:10:24,300 --> 00:10:26,580
then you'd have to start completely from

235
00:10:26,580 --> 00:10:30,060
scratch to to send the next value if you

236
00:10:30,060 --> 00:10:33,018
wanted to repeat that

237
00:10:35,519 --> 00:10:38,940
one of the the key

238
00:10:38,940 --> 00:10:41,640
um usability requirements

239
00:10:41,640 --> 00:10:43,620
um that that comes out of having this

240
00:10:43,620 --> 00:10:45,720
rolling code is that there needs to be

241
00:10:45,720 --> 00:10:48,600
the ability to re-synchronize the

242
00:10:48,600 --> 00:10:49,740
counters

243
00:10:49,740 --> 00:10:51,600
so if the

244
00:10:51,600 --> 00:10:54,060
transmitter is operated out of range of

245
00:10:54,060 --> 00:10:56,459
the receiver for example your kids

246
00:10:56,459 --> 00:10:59,160
playing with it inside the house and the

247
00:10:59,160 --> 00:11:02,220
receivers hundreds of meters away

248
00:11:02,220 --> 00:11:03,120
um

249
00:11:03,120 --> 00:11:05,100
you know what happens

250
00:11:05,100 --> 00:11:07,260
so the principle that key lock operates

251
00:11:07,260 --> 00:11:09,920
under is that there is a blocked

252
00:11:09,920 --> 00:11:12,660
32k window

253
00:11:12,660 --> 00:11:17,940
so the 32 768 values behind your your

254
00:11:17,940 --> 00:11:20,519
current a recorded value in the receiver

255
00:11:20,519 --> 00:11:23,100
is considered to be blocked

256
00:11:23,100 --> 00:11:24,660
um considering this is a 16-bit number

257
00:11:24,660 --> 00:11:26,240
that's sort of half of the window

258
00:11:26,240 --> 00:11:30,000
there's an open window of 16 values

259
00:11:30,000 --> 00:11:31,079
ahead

260
00:11:31,079 --> 00:11:34,079
so if you have pressed the transmitter

261
00:11:34,079 --> 00:11:37,079
button less than 16 times the next time

262
00:11:37,079 --> 00:11:38,579
that you press the button within range

263
00:11:38,579 --> 00:11:39,899
of the receiver it will immediately

264
00:11:39,899 --> 00:11:44,160
accept it and and operate but if you are

265
00:11:44,160 --> 00:11:48,240
up to 32 000 values ahead of the the

266
00:11:48,240 --> 00:11:51,360
recorded value in the receiver if you

267
00:11:51,360 --> 00:11:54,560
press the button twice and the receiver

268
00:11:54,560 --> 00:11:57,720
receives two consecutive values it will

269
00:11:57,720 --> 00:11:59,519
immediately re-synchronize so if you

270
00:11:59,519 --> 00:12:00,779
know you press the button and it doesn't

271
00:12:00,779 --> 00:12:02,700
work your immediate reaction is just to

272
00:12:02,700 --> 00:12:05,700
press it again and that's how it it

273
00:12:05,700 --> 00:12:07,140
re-synchronizes

274
00:12:07,140 --> 00:12:10,920
so that's quite a a clever approach

275
00:12:10,920 --> 00:12:14,820
and we'll revisit this in a minute

276
00:12:14,820 --> 00:12:18,000
okay so the format of the transmission

277
00:12:18,000 --> 00:12:20,820
over the air it's using amplitude shift

278
00:12:20,820 --> 00:12:22,440
keying on off keying

279
00:12:22,440 --> 00:12:24,420
and

280
00:12:24,420 --> 00:12:27,360
um there is the principle the concept of

281
00:12:27,360 --> 00:12:29,880
an elemental time period

282
00:12:29,880 --> 00:12:35,220
and if your bit is less than two or well

283
00:12:35,220 --> 00:12:38,279
is in the order of sorry if your high

284
00:12:38,279 --> 00:12:41,399
signal is two Elemental periods high and

285
00:12:41,399 --> 00:12:43,260
one elemental period low that's

286
00:12:43,260 --> 00:12:46,920
considered to be a zero and if it is one

287
00:12:46,920 --> 00:12:48,420
elemental period higher and two

288
00:12:48,420 --> 00:12:50,100
Elemental periods low then it's

289
00:12:50,100 --> 00:12:53,060
considered to be a one

290
00:12:53,480 --> 00:12:56,880
so over the air your um your

291
00:12:56,880 --> 00:13:00,480
transmission has a preamble a blank

292
00:13:00,480 --> 00:13:04,620
space for the header 66 bits of

293
00:13:04,620 --> 00:13:07,320
um of transmission of which 32 bits are

294
00:13:07,320 --> 00:13:10,139
encrypted and 34 bits are clear text and

295
00:13:10,139 --> 00:13:11,820
then there's a guide time to Signal the

296
00:13:11,820 --> 00:13:15,200
end of that transmission

297
00:13:17,300 --> 00:13:21,839
and so you can break that down the

298
00:13:21,839 --> 00:13:24,600
encrypted portion is

299
00:13:24,600 --> 00:13:25,639
um

300
00:13:25,639 --> 00:13:28,079
within the encrypted portion is that

301
00:13:28,079 --> 00:13:29,720
16-bit counter

302
00:13:29,720 --> 00:13:33,360
sorry some discrimination bits which

303
00:13:33,360 --> 00:13:35,339
allow you to verify that you've

304
00:13:35,339 --> 00:13:37,620
decrypted this correctly those

305
00:13:37,620 --> 00:13:40,380
discrimination bits are 10 bits of the

306
00:13:40,380 --> 00:13:44,639
serial number of the transmitter

307
00:13:44,639 --> 00:13:45,300
um

308
00:13:45,300 --> 00:13:49,680
and then there are some some additional

309
00:13:49,680 --> 00:13:52,380
bits that represent the buttons so four

310
00:13:52,380 --> 00:13:53,880
buttons

311
00:13:53,880 --> 00:13:54,779
um

312
00:13:54,779 --> 00:13:57,300
which can ultimately end up signaling up

313
00:13:57,300 --> 00:13:59,579
to 15 values so if you hold down the

314
00:13:59,579 --> 00:14:01,620
buttons in combination well I guess it's

315
00:14:01,620 --> 00:14:03,180
14 values

316
00:14:03,180 --> 00:14:05,040
um technically and I can explain how

317
00:14:05,040 --> 00:14:07,380
that comes up and then you've got the

318
00:14:07,380 --> 00:14:09,060
the serial number transmitted in clear

319
00:14:09,060 --> 00:14:12,660
text the buttons again repeated and then

320
00:14:12,660 --> 00:14:15,060
two flags for a repeating transmission

321
00:14:15,060 --> 00:14:18,540
so you've the first submission or the

322
00:14:18,540 --> 00:14:20,399
first transmission would not have that

323
00:14:20,399 --> 00:14:22,620
but if you hold the button down it will

324
00:14:22,620 --> 00:14:24,959
repeat the transmission until you

325
00:14:24,959 --> 00:14:26,220
release that

326
00:14:26,220 --> 00:14:28,200
and then there's a voltage low signal

327
00:14:28,200 --> 00:14:30,120
which can give you a heads up to change

328
00:14:30,120 --> 00:14:33,380
the battery of your transmitter

329
00:14:36,540 --> 00:14:39,500
Okay so

330
00:14:39,560 --> 00:14:43,680
the counter is encrypted using a shared

331
00:14:43,680 --> 00:14:46,800
symmetric key known by both the

332
00:14:46,800 --> 00:14:48,839
transmitter and the receiver so the

333
00:14:48,839 --> 00:14:51,240
question arises how is this

334
00:14:51,240 --> 00:14:54,300
a key derived how is it shared between

335
00:14:54,300 --> 00:14:57,779
the receiver and the transmitter

336
00:14:57,779 --> 00:14:59,639
so the key lock documentation actually

337
00:14:59,639 --> 00:15:03,959
leaves the the key derivation function

338
00:15:03,959 --> 00:15:06,240
um up to the implementer

339
00:15:06,240 --> 00:15:08,040
although there is a reference

340
00:15:08,040 --> 00:15:10,860
implementation that appears to be used

341
00:15:10,860 --> 00:15:12,300
in practice

342
00:15:12,300 --> 00:15:13,980
there are two forms of learning or

343
00:15:13,980 --> 00:15:16,680
enrollment for a key lock remote a

344
00:15:16,680 --> 00:15:19,260
normal learn and secure learn

345
00:15:19,260 --> 00:15:21,540
so in the normal learn process the key

346
00:15:21,540 --> 00:15:24,779
is derived from a combination of a

347
00:15:24,779 --> 00:15:27,240
64-bit manufacturer key

348
00:15:27,240 --> 00:15:31,139
which obviously should be protected

349
00:15:31,139 --> 00:15:34,560
um you know very very carefully and the

350
00:15:34,560 --> 00:15:37,980
unique 24 28-bit serial number of the

351
00:15:37,980 --> 00:15:39,000
transmitter

352
00:15:39,000 --> 00:15:42,060
and that is used as an input into the

353
00:15:42,060 --> 00:15:44,100
manufacturer chosen key derivation

354
00:15:44,100 --> 00:15:46,139
function

355
00:15:46,139 --> 00:15:48,480
so that same function is used in the

356
00:15:48,480 --> 00:15:53,639
receiver to derive a key when you go

357
00:15:53,639 --> 00:15:55,800
through the learning process so you

358
00:15:55,800 --> 00:15:57,540
typically press a button on the receiver

359
00:15:57,540 --> 00:15:59,459
press the button on the transmitter

360
00:15:59,459 --> 00:16:03,120
twice to confirm the

361
00:16:03,120 --> 00:16:05,820
um the transmitter and then the receiver

362
00:16:05,820 --> 00:16:08,880
will derive that key and store it with

363
00:16:08,880 --> 00:16:11,399
the record of the button and which relay

364
00:16:11,399 --> 00:16:14,779
it should operate Etc

365
00:16:15,899 --> 00:16:18,079
foreign

366
00:16:22,139 --> 00:16:25,980
by implication what this means is that

367
00:16:25,980 --> 00:16:30,000
the receiver must contain a copy of that

368
00:16:30,000 --> 00:16:32,699
manufacturer key which is the crown

369
00:16:32,699 --> 00:16:35,459
jewels essentially of that

370
00:16:35,459 --> 00:16:37,980
manufacturer's transmitter receiver

371
00:16:37,980 --> 00:16:41,639
ecosystem any

372
00:16:41,699 --> 00:16:43,500
transmitters that are programmed with

373
00:16:43,500 --> 00:16:46,380
that key or the key derivation well with

374
00:16:46,380 --> 00:16:48,600
a key derived from that manufacturer key

375
00:16:48,600 --> 00:16:50,820
can be considered compatible so you can

376
00:16:50,820 --> 00:16:53,699
enroll transmitters onto any receiver

377
00:16:53,699 --> 00:16:56,160
that has that same key

378
00:16:56,160 --> 00:16:59,459
which is a nice feature it means that as

379
00:16:59,459 --> 00:17:02,040
a as a user you don't have to go through

380
00:17:02,040 --> 00:17:05,939
any kind of key management issues so

381
00:17:05,939 --> 00:17:09,000
that 99 of the population are not going

382
00:17:09,000 --> 00:17:10,679
to care about

383
00:17:10,679 --> 00:17:12,419
um the unfortunate part is that they

384
00:17:12,419 --> 00:17:15,599
don't actually give you the option uh to

385
00:17:15,599 --> 00:17:18,599
to set up your own keys so this is

386
00:17:18,599 --> 00:17:20,400
ultimately one of the outcomes of the

387
00:17:20,400 --> 00:17:22,439
research that I've been able to do is

388
00:17:22,439 --> 00:17:24,839
that you can set up your own ecosystem

389
00:17:24,839 --> 00:17:27,980
with your own manufacturer key

390
00:17:27,980 --> 00:17:30,380
and prevent

391
00:17:30,380 --> 00:17:34,880
enrollment of you know non

392
00:17:34,880 --> 00:17:37,679
non-compatible remotes

393
00:17:37,679 --> 00:17:39,840
so the problem with the normal learn

394
00:17:39,840 --> 00:17:43,320
process is that one of the inputs into

395
00:17:43,320 --> 00:17:46,620
the key derivation function is exposed

396
00:17:46,620 --> 00:17:49,860
every time that you press the button it

397
00:17:49,860 --> 00:17:54,539
sends that that serial number and so the

398
00:17:54,539 --> 00:17:57,660
the key obviously is derived from that

399
00:17:57,660 --> 00:17:59,640
so if you know what the manufacturer key

400
00:17:59,640 --> 00:18:01,880
is and you're observing a transmission

401
00:18:01,880 --> 00:18:04,740
that contains the serial number you can

402
00:18:04,740 --> 00:18:07,740
immediately derive the key and you can

403
00:18:07,740 --> 00:18:09,660
make your own Transmissions

404
00:18:09,660 --> 00:18:11,760
and so

405
00:18:11,760 --> 00:18:15,720
um the there is an alternative

406
00:18:15,720 --> 00:18:18,240
um enrollment process called the secure

407
00:18:18,240 --> 00:18:19,100
learn

408
00:18:19,100 --> 00:18:23,039
but that needs to be

409
00:18:23,039 --> 00:18:25,860
set up from the beginning so the the

410
00:18:25,860 --> 00:18:28,620
transmitter needs to be programmed as a

411
00:18:28,620 --> 00:18:31,559
secure learn transmitter and the

412
00:18:31,559 --> 00:18:35,160
receiver needs to be set up as a secure

413
00:18:35,160 --> 00:18:37,200
learn transceiver as well a receiver as

414
00:18:37,200 --> 00:18:38,160
well

415
00:18:38,160 --> 00:18:41,100
um and the way that works is that a key

416
00:18:41,100 --> 00:18:44,400
that the key derivation function does

417
00:18:44,400 --> 00:18:47,820
not necessarily depend on the uh the

418
00:18:47,820 --> 00:18:50,460
serial number anymore the manufacturer

419
00:18:50,460 --> 00:18:52,799
can choose a different value maybe it's

420
00:18:52,799 --> 00:18:54,539
the serial number plus 10 or you know

421
00:18:54,539 --> 00:18:55,740
whatever

422
00:18:55,740 --> 00:18:57,440
um

423
00:18:57,440 --> 00:19:02,640
and that value is then transmitted using

424
00:19:02,640 --> 00:19:04,260
a special combination of buttons

425
00:19:04,260 --> 00:19:05,820
typically you're going to press all four

426
00:19:05,820 --> 00:19:08,460
buttons on the on the transmitter that

427
00:19:08,460 --> 00:19:11,580
transmits the key uh well a

428
00:19:11,580 --> 00:19:13,740
a seed sorry

429
00:19:13,740 --> 00:19:16,620
uh to the receiver the receiver then

430
00:19:16,620 --> 00:19:19,100
passes that seed through the key

431
00:19:19,100 --> 00:19:22,919
derivation function and Associates it

432
00:19:22,919 --> 00:19:27,059
with the transmitter serial number

433
00:19:27,059 --> 00:19:29,760
so it's not derived specifically from

434
00:19:29,760 --> 00:19:31,559
the serial number it's simply associated

435
00:19:31,559 --> 00:19:34,140
with it and as a result next time the

436
00:19:34,140 --> 00:19:37,500
the serial number is transmitted the

437
00:19:37,500 --> 00:19:39,120
receiver can look up the appropriate

438
00:19:39,120 --> 00:19:43,440
seed and uh and uh come up with that uh

439
00:19:43,440 --> 00:19:47,340
with that under with the shared key

440
00:19:47,340 --> 00:19:48,080
um

441
00:19:48,080 --> 00:19:52,380
99.9 I think do not use this

442
00:19:52,380 --> 00:19:54,900
um the system it may be more in use in

443
00:19:54,900 --> 00:19:58,020
in cars than in residential systems so

444
00:19:58,020 --> 00:20:00,539
just to mention that that key lock has

445
00:20:00,539 --> 00:20:03,480
been used in a number of manufacturer

446
00:20:03,480 --> 00:20:07,440
vehicle manufacturers Toyota Jaguar I

447
00:20:07,440 --> 00:20:09,120
think Tesla was using key lock at some

448
00:20:09,120 --> 00:20:11,280
point I know they've moved on to to

449
00:20:11,280 --> 00:20:13,320
Bluetooth

450
00:20:13,320 --> 00:20:13,980
um

451
00:20:13,980 --> 00:20:16,760
currently

452
00:20:17,220 --> 00:20:19,740
um right okay so that's the key

453
00:20:19,740 --> 00:20:22,640
derivation function

454
00:20:22,740 --> 00:20:25,200
so in the normal learn process the

455
00:20:25,200 --> 00:20:27,000
manufacturer knows that key derivation

456
00:20:27,000 --> 00:20:29,760
function uh and the manufacturer key

457
00:20:29,760 --> 00:20:32,580
obviously the transmitter contains a

458
00:20:32,580 --> 00:20:35,640
shared key which is derived using that

459
00:20:35,640 --> 00:20:37,620
key derivation function and the serial

460
00:20:37,620 --> 00:20:38,520
number

461
00:20:38,520 --> 00:20:41,520
of that individual transmitter

462
00:20:41,520 --> 00:20:45,299
and so the the transmitter sends its

463
00:20:45,299 --> 00:20:47,220
serial number and that encrypted counter

464
00:20:47,220 --> 00:20:49,080
and the other values as well the

465
00:20:49,080 --> 00:20:51,360
receiver contains that key derivation

466
00:20:51,360 --> 00:20:53,220
function as well and the manufacturer

467
00:20:53,220 --> 00:20:55,620
key it receives the serial number

468
00:20:55,620 --> 00:20:58,620
derives the shared key and decrypts the

469
00:20:58,620 --> 00:21:00,900
counter and checks it against the stored

470
00:21:00,900 --> 00:21:03,780
value and decides whether to open the

471
00:21:03,780 --> 00:21:06,860
relay or not

472
00:21:08,039 --> 00:21:12,179
so this is the uh the standard or this

473
00:21:12,179 --> 00:21:14,580
sort of uh reference

474
00:21:14,580 --> 00:21:15,780
um key gen

475
00:21:15,780 --> 00:21:18,539
implementation

476
00:21:18,539 --> 00:21:19,380
um

477
00:21:19,380 --> 00:21:22,440
I receive a 32-bit serial number which

478
00:21:22,440 --> 00:21:24,720
is actually only 28 bits so we mask out

479
00:21:24,720 --> 00:21:26,520
the top

480
00:21:26,520 --> 00:21:29,220
um top four bits

481
00:21:29,220 --> 00:21:30,000
um

482
00:21:30,000 --> 00:21:33,000
decrypt the serial number masks with a

483
00:21:33,000 --> 00:21:36,900
six in that in those high four bits

484
00:21:36,900 --> 00:21:39,299
um using the manufacturer key

485
00:21:39,299 --> 00:21:40,280
um

486
00:21:40,280 --> 00:21:43,760
all that with the serial number again

487
00:21:43,760 --> 00:21:46,980
decrypted with the two in the in the tie

488
00:21:46,980 --> 00:21:50,460
those High bits and then that is how you

489
00:21:50,460 --> 00:21:54,659
derive that original 64 that 64-bit key

490
00:21:54,659 --> 00:21:58,880
so it's kind of the value repeated twice

491
00:21:59,220 --> 00:22:01,200
um

492
00:22:01,200 --> 00:22:03,120
although the you know it ends up with

493
00:22:03,120 --> 00:22:06,480
two very different 32-bit values

494
00:22:06,480 --> 00:22:10,020
um because the the decryption is mutated

495
00:22:10,020 --> 00:22:12,600
by the the six and the two uh in those

496
00:22:12,600 --> 00:22:13,919
bits

497
00:22:13,919 --> 00:22:15,659
okay

498
00:22:15,659 --> 00:22:18,720
okay so attacks that have been tried

499
00:22:18,720 --> 00:22:21,480
against the key lock system

500
00:22:21,480 --> 00:22:25,980
um dating back to 2007 2008 time frames

501
00:22:25,980 --> 00:22:26,720
um

502
00:22:26,720 --> 00:22:30,419
cryptanalysis of the non-linear feedback

503
00:22:30,419 --> 00:22:32,940
shift register and the the crypto

504
00:22:32,940 --> 00:22:37,140
algorithms reduced the effort to brute

505
00:22:37,140 --> 00:22:40,320
force a single key

506
00:22:40,320 --> 00:22:40,980
um

507
00:22:40,980 --> 00:22:43,679
down to approximately two weeks of FPA

508
00:22:43,679 --> 00:22:48,059
just fpga assisted calculations so that

509
00:22:48,059 --> 00:22:50,159
would allow you to eavesdrop on a on a

510
00:22:50,159 --> 00:22:51,480
single transmission

511
00:22:51,480 --> 00:22:55,200
uh and derive the

512
00:22:55,200 --> 00:22:57,000
um the individual key for that

513
00:22:57,000 --> 00:22:59,159
particular transmitter would allow you

514
00:22:59,159 --> 00:23:00,539
to derive

515
00:23:00,539 --> 00:23:02,539
um that key and so you could then

516
00:23:02,539 --> 00:23:06,299
transmit a a second instance or you know

517
00:23:06,299 --> 00:23:07,919
increment the counter to an appropriate

518
00:23:07,919 --> 00:23:10,159
value

519
00:23:10,440 --> 00:23:12,360
um no that doesn't buy you a heck of a

520
00:23:12,360 --> 00:23:14,520
lot that only compromises a single

521
00:23:14,520 --> 00:23:16,799
device and that's quite a lot of work to

522
00:23:16,799 --> 00:23:18,600
put in

523
00:23:18,600 --> 00:23:21,600
um side Channel attacks are a completely

524
00:23:21,600 --> 00:23:24,600
different Beast that allows you to well

525
00:23:24,600 --> 00:23:26,100
the process of a side Channel attack

526
00:23:26,100 --> 00:23:27,960
allows you to do things like monitoring

527
00:23:27,960 --> 00:23:30,179
the power consumption of the IC or of

528
00:23:30,179 --> 00:23:31,860
the receiver

529
00:23:31,860 --> 00:23:32,940
um

530
00:23:32,940 --> 00:23:35,460
while it's operating and particularly

531
00:23:35,460 --> 00:23:37,380
while it's doing the cryptographic

532
00:23:37,380 --> 00:23:39,240
operations

533
00:23:39,240 --> 00:23:43,559
um and by using very sensitive power

534
00:23:43,559 --> 00:23:45,539
monitoring tools you can actually

535
00:23:45,539 --> 00:23:47,400
determine

536
00:23:47,400 --> 00:23:51,120
um possibly statistically what crypto

537
00:23:51,120 --> 00:23:54,380
algorithms are being performed based on

538
00:23:54,380 --> 00:23:58,260
the you know on the values that the

539
00:23:58,260 --> 00:24:00,179
cryptographic algorithms are Computing

540
00:24:00,179 --> 00:24:02,340
based on how much power is actually

541
00:24:02,340 --> 00:24:05,039
consumed at a particular time

542
00:24:05,039 --> 00:24:07,980
so that's uh some pretty serious rocket

543
00:24:07,980 --> 00:24:11,280
scientists a little bit above my level

544
00:24:11,280 --> 00:24:13,919
um but ultimately if you are targeting

545
00:24:13,919 --> 00:24:15,960
the transmitter you can get again only

546
00:24:15,960 --> 00:24:18,960
one key if you manage to do that on a

547
00:24:18,960 --> 00:24:21,539
receiver you could retrieve the

548
00:24:21,539 --> 00:24:24,000
manufacturer key and ultimately crack

549
00:24:24,000 --> 00:24:27,799
the the entire ecosystem

550
00:24:28,500 --> 00:24:31,020
and then replay attacks

551
00:24:31,020 --> 00:24:34,260
um work by jamming one transmission

552
00:24:34,260 --> 00:24:37,260
while recording it and that prevents the

553
00:24:37,260 --> 00:24:40,620
receiver from actually operating on that

554
00:24:40,620 --> 00:24:44,220
and then what you do is jam and record a

555
00:24:44,220 --> 00:24:47,100
second transmission while replaying the

556
00:24:47,100 --> 00:24:48,360
first one

557
00:24:48,360 --> 00:24:50,039
so you know if it doesn't work the first

558
00:24:50,039 --> 00:24:52,559
if the transmission doesn't work the

559
00:24:52,559 --> 00:24:53,880
first time you're going to press the

560
00:24:53,880 --> 00:24:55,919
button again

561
00:24:55,919 --> 00:24:58,860
if you record the first transmission and

562
00:24:58,860 --> 00:25:00,900
replay it when the second one is being

563
00:25:00,900 --> 00:25:02,580
pressed

564
00:25:02,580 --> 00:25:04,860
you can keep that second transmission

565
00:25:04,860 --> 00:25:06,360
for yourself

566
00:25:06,360 --> 00:25:08,940
and that means that you have an

567
00:25:08,940 --> 00:25:11,220
opportunity to use that at a time of

568
00:25:11,220 --> 00:25:12,299
your choosing

569
00:25:12,299 --> 00:25:14,460
for example once the person has walked

570
00:25:14,460 --> 00:25:16,440
away from their car you can press the

571
00:25:16,440 --> 00:25:18,720
button unlock the car and potentially

572
00:25:18,720 --> 00:25:20,460
drive off with it

573
00:25:20,460 --> 00:25:22,320
um it's not going to allow you to unlock

574
00:25:22,320 --> 00:25:24,360
it a second time or a lock

575
00:25:24,360 --> 00:25:26,400
um you know any time in the future but

576
00:25:26,400 --> 00:25:27,659
that does at least give you the

577
00:25:27,659 --> 00:25:30,779
opportunity to to enter

578
00:25:30,779 --> 00:25:33,539
um the car

579
00:25:33,539 --> 00:25:36,720
but you do lose out if the um if the

580
00:25:36,720 --> 00:25:38,520
person you know presses the button a

581
00:25:38,520 --> 00:25:40,860
third time if you're not intercepting

582
00:25:40,860 --> 00:25:43,260
and replaying if you're not prepared to

583
00:25:43,260 --> 00:25:44,940
to intercept and replay your your

584
00:25:44,940 --> 00:25:47,940
previous content as soon as a legitimate

585
00:25:47,940 --> 00:25:49,740
transmission increments the counter

586
00:25:49,740 --> 00:25:52,919
you've lost out on the opportunity to

587
00:25:52,919 --> 00:25:55,679
use that recorded one

588
00:25:55,679 --> 00:25:58,620
so this was demonstrated by Sammy kamkar

589
00:25:58,620 --> 00:26:02,039
back in 2015.

590
00:26:04,320 --> 00:26:05,760
attack

591
00:26:05,760 --> 00:26:10,039
um but not terribly practical

592
00:26:10,380 --> 00:26:11,940
recently

593
00:26:11,940 --> 00:26:13,559
um in

594
00:26:13,559 --> 00:26:17,159
to like may I think

595
00:26:17,159 --> 00:26:17,820
um

596
00:26:17,820 --> 00:26:20,039
the rollback attack was demonstrated

597
00:26:20,039 --> 00:26:22,080
where

598
00:26:22,080 --> 00:26:24,779
um they show that you can unlock your

599
00:26:24,779 --> 00:26:28,320
your car with simply

600
00:26:28,320 --> 00:26:30,960
capturing by simply capturing two two

601
00:26:30,960 --> 00:26:32,940
consecutive Transmissions

602
00:26:32,940 --> 00:26:36,539
and if that sounds Vaguely Familiar it

603
00:26:36,539 --> 00:26:39,179
should because it made me think

604
00:26:39,179 --> 00:26:42,659
immediately of the key lock window that

605
00:26:42,659 --> 00:26:45,140
we talked about

606
00:26:45,900 --> 00:26:48,620
um where if you have two Transmissions

607
00:26:48,620 --> 00:26:52,440
within this resync 32k window that you

608
00:26:52,440 --> 00:26:55,500
can immediately re-synchronize the the

609
00:26:55,500 --> 00:26:58,799
transmitter with the receiver

610
00:26:58,799 --> 00:27:02,460
but there's that block 32k window that

611
00:27:02,460 --> 00:27:04,980
you're supposed to check that the

612
00:27:04,980 --> 00:27:07,500
Transmissions are not within that

613
00:27:07,500 --> 00:27:10,140
window first

614
00:27:10,140 --> 00:27:12,419
and I'm not saying that these

615
00:27:12,419 --> 00:27:14,820
manufacturers are using key lock

616
00:27:14,820 --> 00:27:17,340
but it seems to me like the

617
00:27:17,340 --> 00:27:19,740
implementation of the receiver simply

618
00:27:19,740 --> 00:27:22,380
omitted one single if statement

619
00:27:22,380 --> 00:27:25,500
that if the Transmissions are less than

620
00:27:25,500 --> 00:27:27,120
the current counter

621
00:27:27,120 --> 00:27:30,480
then ignore those Transmissions

622
00:27:30,480 --> 00:27:32,400
and so if you capture two historical

623
00:27:32,400 --> 00:27:35,159
Transmissions from a transmitter you

624
00:27:35,159 --> 00:27:36,740
could simply

625
00:27:36,740 --> 00:27:39,539
re-synchronize and and use that second

626
00:27:39,539 --> 00:27:42,299
transmission to open or operate the

627
00:27:42,299 --> 00:27:44,720
receiver

628
00:27:44,760 --> 00:27:47,880
so that made me that made me laugh and

629
00:27:47,880 --> 00:27:51,200
face palm quite hard

630
00:27:51,480 --> 00:27:54,539
okay so apart from rollback and roll Jam

631
00:27:54,539 --> 00:27:55,400
um

632
00:27:55,400 --> 00:27:58,080
there are two main

633
00:27:58,080 --> 00:28:00,600
ways that a that a key lock system can

634
00:28:00,600 --> 00:28:03,000
fail if the manufacturer key is

635
00:28:03,000 --> 00:28:04,799
compromised

636
00:28:04,799 --> 00:28:07,500
um and so you can create forged

637
00:28:07,500 --> 00:28:09,059
transmitters

638
00:28:09,059 --> 00:28:12,600
which can gain access to whatever it is

639
00:28:12,600 --> 00:28:14,580
that is controlled by the key lock

640
00:28:14,580 --> 00:28:15,659
receiver

641
00:28:15,659 --> 00:28:20,640
or a forged transmitter can deny access

642
00:28:20,640 --> 00:28:23,100
and the way it can deny access is simply

643
00:28:23,100 --> 00:28:26,760
by incrementing the counter Beyond where

644
00:28:26,760 --> 00:28:28,460
the legitimate

645
00:28:28,460 --> 00:28:31,919
transmitter can re-enroll itself or

646
00:28:31,919 --> 00:28:34,260
resynchronize itself

647
00:28:34,260 --> 00:28:38,100
so if you jump a number of Transmissions

648
00:28:38,100 --> 00:28:39,860
into the future

649
00:28:39,860 --> 00:28:44,460
into that 32 gig 32k blocked window

650
00:28:44,460 --> 00:28:45,960
you're going to have to press your

651
00:28:45,960 --> 00:28:49,620
transmitter 32 000 times in order to get

652
00:28:49,620 --> 00:28:52,500
back into synchronization and so that's

653
00:28:52,500 --> 00:28:55,020
unlikely to happen when that happens

654
00:28:55,020 --> 00:28:57,000
you're probably just going to decide

655
00:28:57,000 --> 00:28:59,820
that that transmitter is broken and try

656
00:28:59,820 --> 00:29:01,500
and re-enroll it but you'd have to go

657
00:29:01,500 --> 00:29:04,320
through that whole process first

658
00:29:04,320 --> 00:29:07,980
so ultimately how can we get hold of

659
00:29:07,980 --> 00:29:11,179
that manufacturer key

660
00:29:11,279 --> 00:29:12,840
so

661
00:29:12,840 --> 00:29:14,220
I wasn't

662
00:29:14,220 --> 00:29:16,740
in a position to try and do power

663
00:29:16,740 --> 00:29:19,980
analysis and that was you know um sort

664
00:29:19,980 --> 00:29:23,700
of beyond my level of of curiosity shall

665
00:29:23,700 --> 00:29:26,039
we say besides which it had already been

666
00:29:26,039 --> 00:29:30,120
uh pretty thoroughly demonstrated

667
00:29:30,120 --> 00:29:31,740
um years before

668
00:29:31,740 --> 00:29:34,980
the one year I was at Defcon and I

669
00:29:34,980 --> 00:29:37,980
bought a uh a thing called a Blackmagic

670
00:29:37,980 --> 00:29:41,580
probe which is an open source JTAG and

671
00:29:41,580 --> 00:29:45,179
single wire debug debugger and what that

672
00:29:45,179 --> 00:29:49,620
gives you is the ability to access the

673
00:29:49,620 --> 00:29:54,539
debug ports on on microprocessors and a

674
00:29:54,539 --> 00:29:57,200
bunch of others

675
00:29:57,720 --> 00:29:59,100
um so when I got home I was like yeah

676
00:29:59,100 --> 00:30:01,740
okay you know I've got this JTAG adapter

677
00:30:01,740 --> 00:30:03,419
what am I going to do with it

678
00:30:03,419 --> 00:30:04,799
um and I've got a whole bunch of Dev

679
00:30:04,799 --> 00:30:06,419
boards at home

680
00:30:06,419 --> 00:30:08,100
um but all of them had firmware on them

681
00:30:08,100 --> 00:30:10,500
that I had already programmed uh myself

682
00:30:10,500 --> 00:30:12,840
uh so that wasn't much of an adventure

683
00:30:12,840 --> 00:30:15,360
trying to pull it off again and then I

684
00:30:15,360 --> 00:30:17,100
remembered that I had this uh this

685
00:30:17,100 --> 00:30:18,840
complex receiver

686
00:30:18,840 --> 00:30:20,640
two of which were obviously in the the

687
00:30:20,640 --> 00:30:23,760
gates but I had another one that I used

688
00:30:23,760 --> 00:30:26,580
for enrolling new remotes

689
00:30:26,580 --> 00:30:30,000
um as needed and this is based on an

690
00:30:30,000 --> 00:30:34,980
stm32 f-103 our microprocessor

691
00:30:34,980 --> 00:30:35,820
um

692
00:30:35,820 --> 00:30:38,039
which is the same as you would find in a

693
00:30:38,039 --> 00:30:41,340
you know cheap blue pull div board

694
00:30:41,340 --> 00:30:42,779
um and I thought this was it would be a

695
00:30:42,779 --> 00:30:44,640
great opportunity for me to learn about

696
00:30:44,640 --> 00:30:47,820
you know some lower level hardware and

697
00:30:47,820 --> 00:30:49,919
reverse engineering firmware and that

698
00:30:49,919 --> 00:30:51,179
sort of thing

699
00:30:51,179 --> 00:30:52,679
um and especially since I hadn't done

700
00:30:52,679 --> 00:30:55,320
anything like that before

701
00:30:55,320 --> 00:30:57,720
so I carefully matched the pins on the

702
00:30:57,720 --> 00:30:59,940
debug header of the um the show

703
00:30:59,940 --> 00:31:01,799
Electronics board which they they had

704
00:31:01,799 --> 00:31:04,860
for programming it in the in the factory

705
00:31:04,860 --> 00:31:07,580
and you know between that and the micro

706
00:31:07,580 --> 00:31:09,600
microcontroller and you sort of figure

707
00:31:09,600 --> 00:31:12,240
out which pin is connected to which

708
00:31:12,240 --> 00:31:14,760
um and figure out which is the TDI and

709
00:31:14,760 --> 00:31:17,700
the tdo and the various pins

710
00:31:17,700 --> 00:31:20,760
and I hooked up my Blackmagic probe and

711
00:31:20,760 --> 00:31:22,460
I pulled off the firmware

712
00:31:22,460 --> 00:31:25,500
and this was a complete

713
00:31:25,500 --> 00:31:28,200
um you know mind blown situation for me

714
00:31:28,200 --> 00:31:31,020
because I was expecting it to fail

715
00:31:31,020 --> 00:31:35,340
uh if you think about it the firmware on

716
00:31:35,340 --> 00:31:38,279
this microcontroller must contain the

717
00:31:38,279 --> 00:31:40,260
manufacturer key and if you can just

718
00:31:40,260 --> 00:31:43,380
pull it off then that manufacturer key

719
00:31:43,380 --> 00:31:46,679
is now Within Reach with very little

720
00:31:46,679 --> 00:31:49,580
effort so far

721
00:31:50,140 --> 00:31:50,640
[Music]

722
00:31:50,640 --> 00:31:52,020
um

723
00:31:52,020 --> 00:31:55,080
so I mean that was a huge anti-climax I

724
00:31:55,080 --> 00:31:58,919
was completely expecting to be uh denied

725
00:31:58,919 --> 00:32:00,720
um because you know they should have

726
00:32:00,720 --> 00:32:03,179
enabled code readout protection uh and

727
00:32:03,179 --> 00:32:04,679
then have to try various things like

728
00:32:04,679 --> 00:32:07,200
glitching to try and uh and bypass that

729
00:32:07,200 --> 00:32:09,899
but not at all just sort of fell into my

730
00:32:09,899 --> 00:32:12,380
lap on the first opportunity which was

731
00:32:12,380 --> 00:32:15,000
anticlimactic to be sure

732
00:32:15,000 --> 00:32:18,240
okay so now I've got this firmware image

733
00:32:18,240 --> 00:32:22,260
it's a 128k blob

734
00:32:22,260 --> 00:32:25,919
um you know how can I make sense of it

735
00:32:25,919 --> 00:32:28,799
um so the first thing I did was uh look

736
00:32:28,799 --> 00:32:32,159
for you know decompilers and reverse

737
00:32:32,159 --> 00:32:35,520
engineering tools and uh I settled on

738
00:32:35,520 --> 00:32:38,820
gidra which had been released by The the

739
00:32:38,820 --> 00:32:41,520
NSA I'm not saying that I trust them but

740
00:32:41,520 --> 00:32:42,720
uh

741
00:32:42,720 --> 00:32:45,299
um I decided to use it anyway

742
00:32:45,299 --> 00:32:47,539
and that has built-in support for

743
00:32:47,539 --> 00:32:50,760
decompiling and reverse engineering bare

744
00:32:50,760 --> 00:32:52,679
metal arm binaries

745
00:32:52,679 --> 00:32:54,720
so this was quite a learning code for me

746
00:32:54,720 --> 00:32:57,960
I hadn't done any reverse engineering at

747
00:32:57,960 --> 00:33:00,380
a machine code level before you have to

748
00:33:00,380 --> 00:33:03,120
decompiled Java classes and net classes

749
00:33:03,120 --> 00:33:05,100
and that sort of thing but that's a very

750
00:33:05,100 --> 00:33:09,080
different different kettle of fish

751
00:33:11,159 --> 00:33:13,980
um one of the tools that I found very

752
00:33:13,980 --> 00:33:17,399
useful was something called SVD loader

753
00:33:17,399 --> 00:33:19,980
an SVD file is a description of the

754
00:33:19,980 --> 00:33:23,340
hardware at a register level and so what

755
00:33:23,340 --> 00:33:25,679
that means is it Associates you know

756
00:33:25,679 --> 00:33:27,840
registers by number with an actual

757
00:33:27,840 --> 00:33:30,600
description of what that register does

758
00:33:30,600 --> 00:33:32,220
and what it means in the particular

759
00:33:32,220 --> 00:33:36,440
context of that microcontroller

760
00:33:36,480 --> 00:33:37,620
um

761
00:33:37,620 --> 00:33:40,679
and so what that means is that when you

762
00:33:40,679 --> 00:33:43,620
decompile the binary instead of looking

763
00:33:43,620 --> 00:33:47,760
at a number like you know debt five zero

764
00:33:47,760 --> 00:33:50,399
zero zero zero one four uh you can

765
00:33:50,399 --> 00:33:51,480
actually see something a bit more

766
00:33:51,480 --> 00:33:53,399
intelligent like

767
00:33:53,399 --> 00:33:57,179
um you know references to uh you know

768
00:33:57,179 --> 00:33:59,580
the system status register or or

769
00:33:59,580 --> 00:34:01,440
something along those lines and so that

770
00:34:01,440 --> 00:34:02,880
really makes it a lot easier to

771
00:34:02,880 --> 00:34:05,640
understand what uh what's actually

772
00:34:05,640 --> 00:34:07,679
happening

773
00:34:07,679 --> 00:34:10,320
and while that doesn't didn't end up

774
00:34:10,320 --> 00:34:13,560
leading me to uh to the manufacturer key

775
00:34:13,560 --> 00:34:16,199
to the relevant functions it did make

776
00:34:16,199 --> 00:34:19,500
the initial understanding of what I was

777
00:34:19,500 --> 00:34:22,980
looking at a lot easier

778
00:34:22,980 --> 00:34:25,859
um you know if you're in a completely

779
00:34:25,859 --> 00:34:28,260
foreign land uh does help to have some

780
00:34:28,260 --> 00:34:29,879
road signs

781
00:34:29,879 --> 00:34:30,899
um to make it a little bit more

782
00:34:30,899 --> 00:34:33,239
comfortable

783
00:34:33,239 --> 00:34:35,399
okay so the next approach that I took

784
00:34:35,399 --> 00:34:37,859
was to try and

785
00:34:37,859 --> 00:34:38,760
um

786
00:34:38,760 --> 00:34:42,179
find a string which is displayed when

787
00:34:42,179 --> 00:34:43,320
you're going through the enrollment

788
00:34:43,320 --> 00:34:45,480
process so it says something like you

789
00:34:45,480 --> 00:34:47,699
know press the button you know press the

790
00:34:47,699 --> 00:34:49,980
first button on the transmitter to

791
00:34:49,980 --> 00:34:52,080
enroll so I look for the string press

792
00:34:52,080 --> 00:34:54,418
and I managed to find it

793
00:34:54,418 --> 00:34:55,560
um

794
00:34:55,560 --> 00:34:57,420
and then I was going to look for you

795
00:34:57,420 --> 00:35:00,480
know references to that and I went down

796
00:35:00,480 --> 00:35:03,240
a whole rabbit hole and it turns out

797
00:35:03,240 --> 00:35:04,740
that what I was looking at was actually

798
00:35:04,740 --> 00:35:07,560
display related code and not the code

799
00:35:07,560 --> 00:35:10,440
that received the transmission or the

800
00:35:10,440 --> 00:35:13,859
code that was trying to to decrypt those

801
00:35:13,859 --> 00:35:16,140
secret values

802
00:35:16,140 --> 00:35:18,960
so that didn't take me to uh to the

803
00:35:18,960 --> 00:35:21,359
crypto code either

804
00:35:21,359 --> 00:35:24,720
then I found a Blog by a guy named David

805
00:35:24,720 --> 00:35:29,220
Lodge which was very very helpful and

806
00:35:29,220 --> 00:35:32,579
this ended up taking me to

807
00:35:32,579 --> 00:35:33,540
um

808
00:35:33,540 --> 00:35:35,880
to those uh to that manufacturer key

809
00:35:35,880 --> 00:35:38,520
although I did go down some unproductive

810
00:35:38,520 --> 00:35:41,940
rabbit holes as well uh initially

811
00:35:41,940 --> 00:35:44,760
so the tips are basically to always look

812
00:35:44,760 --> 00:35:46,800
for Strings and constants so I tried the

813
00:35:46,800 --> 00:35:48,359
strings approach

814
00:35:48,359 --> 00:35:49,140
um

815
00:35:49,140 --> 00:35:51,839
I then started trying to look for for

816
00:35:51,839 --> 00:35:54,240
constants that appear in the uh the

817
00:35:54,240 --> 00:35:55,920
crypto algorithm now the crypto

818
00:35:55,920 --> 00:35:59,579
algorithm that that key lock uses while

819
00:35:59,579 --> 00:36:03,000
not being you know published it's under

820
00:36:03,000 --> 00:36:05,460
non-disclosure agreement there are

821
00:36:05,460 --> 00:36:07,200
implementations of it out on the

822
00:36:07,200 --> 00:36:09,900
internet uh you know some people have uh

823
00:36:09,900 --> 00:36:13,200
leaked the the data sheets and other

824
00:36:13,200 --> 00:36:15,420
people have re-implemented it their own

825
00:36:15,420 --> 00:36:16,560
way

826
00:36:16,560 --> 00:36:21,000
and so when I was looking at at key lock

827
00:36:21,000 --> 00:36:25,560
I Avenged I initially found the

828
00:36:25,560 --> 00:36:27,500
um the sort of re-implemented versions

829
00:36:27,500 --> 00:36:30,240
and and so I was looking for constants

830
00:36:30,240 --> 00:36:31,980
that appeared in that re-implemented

831
00:36:31,980 --> 00:36:34,220
version

832
00:36:37,079 --> 00:36:41,040
and was completely unsuccessful

833
00:36:41,040 --> 00:36:44,099
um the it turns out that the

834
00:36:44,099 --> 00:36:46,680
re-implemented version was more

835
00:36:46,680 --> 00:36:48,300
efficient than the original

836
00:36:48,300 --> 00:36:51,900
manufacturer's code or you know simpler

837
00:36:51,900 --> 00:36:54,960
conceptually and so the constants that

838
00:36:54,960 --> 00:36:57,560
they used they had like you know

839
00:36:57,560 --> 00:37:00,839
528 as a as a consonant for example

840
00:37:00,839 --> 00:37:04,680
and it turns out that it was like 20

841
00:37:04,680 --> 00:37:08,280
times 19 or whatever 219 or something

842
00:37:08,280 --> 00:37:10,440
along those lines

843
00:37:10,440 --> 00:37:12,060
um that was actually split up into two

844
00:37:12,060 --> 00:37:14,339
constants in the manufacturer's original

845
00:37:14,339 --> 00:37:15,960
algorithm

846
00:37:15,960 --> 00:37:17,880
and so

847
00:37:17,880 --> 00:37:20,160
um while I was unable to find you know

848
00:37:20,160 --> 00:37:24,720
uh 528 when I started looking for the

849
00:37:24,720 --> 00:37:27,480
constants in the original algorithm

850
00:37:27,480 --> 00:37:30,540
um I did find those pretty quickly it

851
00:37:30,540 --> 00:37:33,300
took me almost immediately to the uh to

852
00:37:33,300 --> 00:37:34,920
the crypto key

853
00:37:34,920 --> 00:37:37,020
which was uh

854
00:37:37,020 --> 00:37:40,020
quite satisfying I have to say

855
00:37:40,020 --> 00:37:42,119
um so yeah so look for those strings and

856
00:37:42,119 --> 00:37:44,400
constants make guesses about the

857
00:37:44,400 --> 00:37:47,400
original source and if you can find the

858
00:37:47,400 --> 00:37:50,160
original Source whether it's uh you know

859
00:37:50,160 --> 00:37:53,220
Elite data sheet or a you know a

860
00:37:53,220 --> 00:37:55,980
re-implementation of it that that may

861
00:37:55,980 --> 00:37:58,740
help you if you can find a function that

862
00:37:58,740 --> 00:38:01,020
you recognize and then work backwards to

863
00:38:01,020 --> 00:38:03,240
identify other functions so this

864
00:38:03,240 --> 00:38:04,980
function calls that function I've

865
00:38:04,980 --> 00:38:06,960
identified this function so the function

866
00:38:06,960 --> 00:38:09,900
that's calling it must be

867
00:38:09,900 --> 00:38:11,900
um you know that Etc

868
00:38:11,900 --> 00:38:14,339
and it helps if they use open source

869
00:38:14,339 --> 00:38:17,160
code so that you can crib from it

870
00:38:17,160 --> 00:38:17,820
um

871
00:38:17,820 --> 00:38:20,099
open source or at least

872
00:38:20,099 --> 00:38:21,900
um you know source code that you can

873
00:38:21,900 --> 00:38:24,079
find

874
00:38:25,800 --> 00:38:27,900
okay so

875
00:38:27,900 --> 00:38:31,200
um my first approach was to put a logic

876
00:38:31,200 --> 00:38:34,380
analyzer on the radio chip that is part

877
00:38:34,380 --> 00:38:36,780
of the of the dev board well of the

878
00:38:36,780 --> 00:38:38,660
receiver board

879
00:38:38,660 --> 00:38:42,300
and I wanted to to implement the decoder

880
00:38:42,300 --> 00:38:44,940
on a PC which is obviously a much

881
00:38:44,940 --> 00:38:47,119
friendlier environment to develop in

882
00:38:47,119 --> 00:38:51,180
than a an embedded device where you're

883
00:38:51,180 --> 00:38:52,920
going through compile cycles and you

884
00:38:52,920 --> 00:38:55,619
don't actually have any good output

885
00:38:55,619 --> 00:38:59,339
mechanisms and so I used the sigrock

886
00:38:59,339 --> 00:39:02,400
project uh this is pulse view

887
00:39:02,400 --> 00:39:06,180
um and a cheap you know ten dollar logic

888
00:39:06,180 --> 00:39:07,980
analyzer

889
00:39:07,980 --> 00:39:09,000
um

890
00:39:09,000 --> 00:39:13,320
and I implemented the key lock decoder

891
00:39:13,320 --> 00:39:19,320
as a pulse view or sigrock Plugin

892
00:39:19,859 --> 00:39:22,800
so after much trial and error I was

893
00:39:22,800 --> 00:39:25,260
eventually able to to isolate the actual

894
00:39:25,260 --> 00:39:28,079
you know transmission bits that you can

895
00:39:28,079 --> 00:39:29,240
see

896
00:39:29,240 --> 00:39:32,160
part of the problem is that when you're

897
00:39:32,160 --> 00:39:35,700
monitoring the radio there's a whole lot

898
00:39:35,700 --> 00:39:38,940
of ambient noise that is picked up at

899
00:39:38,940 --> 00:39:40,980
the same time so it's not a nice clean

900
00:39:40,980 --> 00:39:43,740
signal there's you know tons of you know

901
00:39:43,740 --> 00:39:46,500
ups and downs surrounding it

902
00:39:46,500 --> 00:39:48,480
obviously the transmitter ends up being

903
00:39:48,480 --> 00:39:51,240
a stronger signal but

904
00:39:51,240 --> 00:39:51,780
um

905
00:39:51,780 --> 00:39:54,000
you know actually discriminating noise

906
00:39:54,000 --> 00:39:56,220
from the legitimate signal when all

907
00:39:56,220 --> 00:39:58,140
you're getting is ones and zeros ends up

908
00:39:58,140 --> 00:39:59,940
being a little bit tricky and so what I

909
00:39:59,940 --> 00:40:02,520
ended up doing was

910
00:40:02,520 --> 00:40:06,320
I used a

911
00:40:06,720 --> 00:40:09,540
basically an external switch to trigger

912
00:40:09,540 --> 00:40:12,000
the transmitter and I used the logic

913
00:40:12,000 --> 00:40:15,480
analyzer on that switch to show when

914
00:40:15,480 --> 00:40:17,579
that switch went high and then when it

915
00:40:17,579 --> 00:40:19,440
went low which actually pointed me to

916
00:40:19,440 --> 00:40:22,920
the exact time frame that the the radio

917
00:40:22,920 --> 00:40:25,079
chip in the transmitter was was active

918
00:40:25,079 --> 00:40:27,000
and that allowed me to narrow it down

919
00:40:27,000 --> 00:40:30,060
and then work on you know decoding that

920
00:40:30,060 --> 00:40:33,740
using my my python code

921
00:40:35,760 --> 00:40:39,060
um and this will be open source

922
00:40:39,060 --> 00:40:41,760
um I haven't quite got it cleaned up as

923
00:40:41,760 --> 00:40:43,800
nicely as I would like

924
00:40:43,800 --> 00:40:46,260
um but it will be submitted to the uh to

925
00:40:46,260 --> 00:40:48,980
the Sig rock project

926
00:40:50,099 --> 00:40:52,260
uh and that includes the the encryption

927
00:40:52,260 --> 00:40:53,880
and decryption

928
00:40:53,880 --> 00:40:55,020
um

929
00:40:55,020 --> 00:40:57,000
code so you can actually if you know

930
00:40:57,000 --> 00:40:59,460
what the manufacturer key is you can

931
00:40:59,460 --> 00:41:01,680
fill that in and it'll show you what the

932
00:41:01,680 --> 00:41:04,339
the decrypted value is and the the

933
00:41:04,339 --> 00:41:07,440
effectively the the counter and the

934
00:41:07,440 --> 00:41:11,119
discriminatory bits and so on

935
00:41:12,420 --> 00:41:14,880
so once you you know you line those two

936
00:41:14,880 --> 00:41:16,980
up you can actually see the the

937
00:41:16,980 --> 00:41:19,500
similarities and it's it's quite quite

938
00:41:19,500 --> 00:41:22,160
reassuring

939
00:41:22,260 --> 00:41:24,060
Okay so

940
00:41:24,060 --> 00:41:26,579
once I've figured out how to decode it I

941
00:41:26,579 --> 00:41:27,839
was comfortable enough that I had the

942
00:41:27,839 --> 00:41:29,280
algorithms right and the manufacturer

943
00:41:29,280 --> 00:41:30,839
key right

944
00:41:30,839 --> 00:41:31,920
um

945
00:41:31,920 --> 00:41:34,619
then comes a choice of you know what

946
00:41:34,619 --> 00:41:37,140
sort of firmware am I going to build so

947
00:41:37,140 --> 00:41:39,540
I ran into a project called ESP home

948
00:41:39,540 --> 00:41:43,619
which is an arduino-based Internet of

949
00:41:43,619 --> 00:41:45,660
Things development environment that

950
00:41:45,660 --> 00:41:47,780
makes it easy for you to build

951
00:41:47,780 --> 00:41:51,300
smart devices and connected to

952
00:41:51,300 --> 00:41:53,520
um to the internet essentially it's

953
00:41:53,520 --> 00:41:56,280
designed for the esp8266 and the sp32

954
00:41:56,280 --> 00:42:00,240
processors which have got Wi-Fi built in

955
00:42:00,240 --> 00:42:00,839
um

956
00:42:00,839 --> 00:42:02,640
and those are

957
00:42:02,640 --> 00:42:06,180
a very different Beast to the arm stm32

958
00:42:06,180 --> 00:42:08,220
processor that's actually in the

959
00:42:08,220 --> 00:42:10,280
receiver of this complex

960
00:42:10,280 --> 00:42:13,380
making up the the complex receivable

961
00:42:13,380 --> 00:42:15,359
so fortunately there is an Arduino

962
00:42:15,359 --> 00:42:18,020
implementation for the stm32 processor

963
00:42:18,020 --> 00:42:22,500
and what I decided to do was Port ESP

964
00:42:22,500 --> 00:42:29,280
home from the esp8266 to the stm32

965
00:42:29,280 --> 00:42:30,960
um and

966
00:42:30,960 --> 00:42:34,980
it was well not not the most complex of

967
00:42:34,980 --> 00:42:37,500
uh of processes which is very fortunate

968
00:42:37,500 --> 00:42:40,140
because I am

969
00:42:40,140 --> 00:42:44,160
what I consider to be a cargo cult or C

970
00:42:44,160 --> 00:42:46,079
plus plus programmer you know I copy

971
00:42:46,079 --> 00:42:48,240
what I see other people doing and if it

972
00:42:48,240 --> 00:42:50,520
doesn't work then I uh you know the Gods

973
00:42:50,520 --> 00:42:53,540
Must be angry with me

974
00:42:55,740 --> 00:42:57,119
um

975
00:42:57,119 --> 00:43:00,359
yeah so while keylock was not uh amongst

976
00:43:00,359 --> 00:43:03,359
the sorry um so ESP home already had

977
00:43:03,359 --> 00:43:06,740
support for decoding transmitters and

978
00:43:06,740 --> 00:43:09,660
receivers so they they had support for

979
00:43:09,660 --> 00:43:12,359
decoding infrared Transmissions from

980
00:43:12,359 --> 00:43:14,040
like you know regular remote controls

981
00:43:14,040 --> 00:43:15,540
and that sort of thing

982
00:43:15,540 --> 00:43:17,160
um and while there was no key lock

983
00:43:17,160 --> 00:43:20,180
implementation it was a pretty simple

984
00:43:20,180 --> 00:43:24,180
matter to to implement that using the

985
00:43:24,180 --> 00:43:26,640
framework that they already had so

986
00:43:26,640 --> 00:43:30,359
um the ESP Home Project provided a huge

987
00:43:30,359 --> 00:43:32,460
amount of infrastructure and saved me

988
00:43:32,460 --> 00:43:34,020
from having to implement that all myself

989
00:43:34,020 --> 00:43:37,920
so that was very helpful

990
00:43:37,920 --> 00:43:40,619
um so there's a few hundred lines of

991
00:43:40,619 --> 00:43:43,440
code making up a diff to the ESP home

992
00:43:43,440 --> 00:43:45,180
project

993
00:43:45,180 --> 00:43:48,000
um that I have

994
00:43:48,000 --> 00:43:51,480
in a in a repository it hasn't been

995
00:43:51,480 --> 00:43:54,780
accepted but I'm going to be

996
00:43:54,780 --> 00:43:57,960
um you know forward porting it to their

997
00:43:57,960 --> 00:44:00,200
their latest efforts they've actually

998
00:44:00,200 --> 00:44:03,900
expanded their their support for

999
00:44:03,900 --> 00:44:06,500
additional platforms they've now got

1000
00:44:06,500 --> 00:44:09,540
support for a bunch of of additional

1001
00:44:09,540 --> 00:44:13,099
platforms including the the two-year

1002
00:44:13,099 --> 00:44:16,740
microprocessors which is quite neat

1003
00:44:16,740 --> 00:44:17,040
foreign

1004
00:44:17,040 --> 00:44:18,800
[Music]

1005
00:44:18,800 --> 00:44:22,740
so then I implemented the key lock

1006
00:44:22,740 --> 00:44:25,140
crypto algorithms

1007
00:44:25,140 --> 00:44:25,800
um

1008
00:44:25,800 --> 00:44:29,400
as well as the the decoders for the for

1009
00:44:29,400 --> 00:44:31,560
the key lock protocol

1010
00:44:31,560 --> 00:44:34,140
um so that ended up being just a you

1011
00:44:34,140 --> 00:44:36,960
know a couple of hundred lines of code

1012
00:44:36,960 --> 00:44:40,260
um for the for the decoder

1013
00:44:40,260 --> 00:44:44,460
you know less than 150 lines of code for

1014
00:44:44,460 --> 00:44:46,440
the decryption and then this is an

1015
00:44:46,440 --> 00:44:47,880
interesting part

1016
00:44:47,880 --> 00:44:50,040
uh it's based on code that I found on

1017
00:44:50,040 --> 00:44:53,700
GitHub that omitted some of the key

1018
00:44:53,700 --> 00:44:56,460
details like how to actually derive the

1019
00:44:56,460 --> 00:44:57,720
key that you program into the

1020
00:44:57,720 --> 00:45:01,760
transmitter but the HTS 301 is a common

1021
00:45:01,760 --> 00:45:05,339
IC that is made by microchip which now

1022
00:45:05,339 --> 00:45:07,940
owns the key lock

1023
00:45:07,940 --> 00:45:11,339
patent or the board key lock

1024
00:45:11,339 --> 00:45:12,420
um

1025
00:45:12,420 --> 00:45:14,640
and you know it's a common chip that

1026
00:45:14,640 --> 00:45:17,400
you'll find in transmitters so what this

1027
00:45:17,400 --> 00:45:20,060
now allows you to do is you can program

1028
00:45:20,060 --> 00:45:26,099
your own keys and serial numbers into a

1029
00:45:26,099 --> 00:45:28,859
transmitter that uses the HDs 301 chip

1030
00:45:28,859 --> 00:45:31,520
or is compatible with the programming

1031
00:45:31,520 --> 00:45:33,839
mechanism which is quite neat so

1032
00:45:33,839 --> 00:45:36,720
ultimately what this gives you is the

1033
00:45:36,720 --> 00:45:39,599
ability to create your own ecosystem of

1034
00:45:39,599 --> 00:45:43,400
transmitters and receivers

1035
00:45:44,400 --> 00:45:46,980
okay so we have a quick sort of

1036
00:45:46,980 --> 00:45:50,579
demonstration we're connected over a USB

1037
00:45:50,579 --> 00:45:54,000
serial port to the

1038
00:45:54,000 --> 00:45:56,280
um to the complex receiver and when you

1039
00:45:56,280 --> 00:45:59,339
press the transmitter buttons uh you can

1040
00:45:59,339 --> 00:46:01,500
see the

1041
00:46:01,500 --> 00:46:04,680
the serial number as well as the

1042
00:46:04,680 --> 00:46:07,440
sequence number which is being received

1043
00:46:07,440 --> 00:46:12,420
so 4ba 4bb 4bc 4bd as you press the

1044
00:46:12,420 --> 00:46:16,140
button again and again

1045
00:46:16,140 --> 00:46:18,660
so you know achievements unlocked I was

1046
00:46:18,660 --> 00:46:22,380
very chuffed with myself but My ultimate

1047
00:46:22,380 --> 00:46:27,000
objective was to integrate this into a

1048
00:46:27,000 --> 00:46:29,460
sort of home automation platform

1049
00:46:29,460 --> 00:46:31,859
um partially because microchip has got a

1050
00:46:31,859 --> 00:46:34,619
patent on remote keyless entry but

1051
00:46:34,619 --> 00:46:36,720
they've got nothing on home automation

1052
00:46:36,720 --> 00:46:39,599
so I figured I was being clever by

1053
00:46:39,599 --> 00:46:42,440
avoiding that

1054
00:46:42,560 --> 00:46:45,540
so in order to bring it online

1055
00:46:45,540 --> 00:46:49,380
um I wanted to to move away from having

1056
00:46:49,380 --> 00:46:50,700
a PC

1057
00:46:50,700 --> 00:46:53,700
uh listening to this serial port and

1058
00:46:53,700 --> 00:46:56,040
then trying to pause the uh the receiver

1059
00:46:56,040 --> 00:46:58,319
data out of it

1060
00:46:58,319 --> 00:47:01,800
um so that brought me back to the esp32

1061
00:47:01,800 --> 00:47:04,079
dev board that I had lying around

1062
00:47:04,079 --> 00:47:05,819
um which is where the ESP Home Project

1063
00:47:05,819 --> 00:47:08,819
originally started so

1064
00:47:08,819 --> 00:47:13,200
what I thought that I would do the

1065
00:47:13,200 --> 00:47:16,700
the receiver board had a display

1066
00:47:16,700 --> 00:47:20,520
mounted using that that double row

1067
00:47:20,520 --> 00:47:22,319
header and that double row header

1068
00:47:22,319 --> 00:47:26,040
included pins for 5 volts and a bunch of

1069
00:47:26,040 --> 00:47:28,260
other things but amongst that

1070
00:47:28,260 --> 00:47:30,660
were two pins which were connected to

1071
00:47:30,660 --> 00:47:33,839
the serial Port while a Serial port on

1072
00:47:33,839 --> 00:47:35,940
the stm32

1073
00:47:35,940 --> 00:47:36,599
um

1074
00:47:36,599 --> 00:47:39,000
and so what I figured was I would

1075
00:47:39,000 --> 00:47:43,500
connect the esp32 and the stm32 using

1076
00:47:43,500 --> 00:47:45,180
that serial port and allow them to

1077
00:47:45,180 --> 00:47:47,700
communicate with each other the scm-32

1078
00:47:47,700 --> 00:47:49,260
would then report

1079
00:47:49,260 --> 00:47:50,599
any

1080
00:47:50,599 --> 00:47:54,540
Transmissions received to the esp32 and

1081
00:47:54,540 --> 00:47:56,700
the esp32 would push those out over

1082
00:47:56,700 --> 00:48:01,160
Wi-Fi to to home assistant

1083
00:48:02,160 --> 00:48:03,140
um

1084
00:48:03,140 --> 00:48:05,099
and um

1085
00:48:05,099 --> 00:48:07,920
and that that worked pretty well uh the

1086
00:48:07,920 --> 00:48:11,040
remaining question then was what sort of

1087
00:48:11,040 --> 00:48:12,960
communications protocol do I use over

1088
00:48:12,960 --> 00:48:14,819
the serial Port

1089
00:48:14,819 --> 00:48:18,180
um should I create something of my own

1090
00:48:18,180 --> 00:48:20,220
um or is there something that I can work

1091
00:48:20,220 --> 00:48:22,560
from already

1092
00:48:22,560 --> 00:48:27,240
so the ESP Home Project did have a sort

1093
00:48:27,240 --> 00:48:30,480
of extender protocol designed for

1094
00:48:30,480 --> 00:48:32,339
communicating with a little Arduino

1095
00:48:32,339 --> 00:48:35,579
microprocessors like the STM not the STM

1096
00:48:35,579 --> 00:48:39,119
sorry the the atmol 328s and that sort

1097
00:48:39,119 --> 00:48:40,500
of thing

1098
00:48:40,500 --> 00:48:42,119
um but it was very limited it didn't

1099
00:48:42,119 --> 00:48:44,819
include support which was basically just

1100
00:48:44,819 --> 00:48:47,160
for binary switches and possibly some

1101
00:48:47,160 --> 00:48:49,380
analog things and I didn't think that

1102
00:48:49,380 --> 00:48:51,960
that was a great choice to use

1103
00:48:51,960 --> 00:48:53,940
but

1104
00:48:53,940 --> 00:48:56,520
ESP home already also had an

1105
00:48:56,520 --> 00:48:59,880
implementation of an API that allows

1106
00:48:59,880 --> 00:49:03,000
home assistant to interrogate your

1107
00:49:03,000 --> 00:49:06,240
microprocessor over Wi-Fi so it can

1108
00:49:06,240 --> 00:49:09,300
query things like text and analog and

1109
00:49:09,300 --> 00:49:11,160
switches and send and receive

1110
00:49:11,160 --> 00:49:13,140
instructions and that sort of thing and

1111
00:49:13,140 --> 00:49:15,660
so what I thought would be a a good

1112
00:49:15,660 --> 00:49:19,619
approach would be to implement the same

1113
00:49:19,619 --> 00:49:23,940
API over the serial Port so all I needed

1114
00:49:23,940 --> 00:49:26,700
to do then was Implement a client for

1115
00:49:26,700 --> 00:49:28,920
that API over the serial port and I

1116
00:49:28,920 --> 00:49:31,680
could pass through effectively all of

1117
00:49:31,680 --> 00:49:33,960
those endpoints so the receiver actually

1118
00:49:33,960 --> 00:49:36,420
has a bunch of switches and you know

1119
00:49:36,420 --> 00:49:39,599
kind of toggle the relays press buttons

1120
00:49:39,599 --> 00:49:42,300
and that sort of thing so I figured it

1121
00:49:42,300 --> 00:49:44,339
would be a good thing to be able to to

1122
00:49:44,339 --> 00:49:48,540
expose those over the Wi-Fi as well

1123
00:49:48,540 --> 00:49:50,940
uh and so

1124
00:49:50,940 --> 00:49:51,780
um

1125
00:49:51,780 --> 00:49:56,280
a few hundred well two thousand lines of

1126
00:49:56,280 --> 00:49:57,839
code later

1127
00:49:57,839 --> 00:49:59,880
um I had an implementation of a client

1128
00:49:59,880 --> 00:50:01,560
to the API

1129
00:50:01,560 --> 00:50:04,800
um that could operate and uh communicate

1130
00:50:04,800 --> 00:50:09,060
between that stm32 and the esp32 to

1131
00:50:09,060 --> 00:50:12,900
share those those values

1132
00:50:12,900 --> 00:50:15,780
and this then allows you to

1133
00:50:15,780 --> 00:50:20,400
um to treat a remote receiver similarly

1134
00:50:20,400 --> 00:50:24,060
to an NFC tag which home assistant

1135
00:50:24,060 --> 00:50:28,140
already had support for and so you can

1136
00:50:28,140 --> 00:50:31,140
see that it's receiving

1137
00:50:31,140 --> 00:50:34,619
a transmission and then once a home

1138
00:50:34,619 --> 00:50:36,839
assistant has that transmission you can

1139
00:50:36,839 --> 00:50:39,839
you know trigger all sorts of actions

1140
00:50:39,839 --> 00:50:43,440
based on that turning lights on opening

1141
00:50:43,440 --> 00:50:44,940
Gates

1142
00:50:44,940 --> 00:50:47,760
um whatever you decide that you want to

1143
00:50:47,760 --> 00:50:50,400
do with that and this was ultimately

1144
00:50:50,400 --> 00:50:54,319
where I wanted to go with this

1145
00:50:57,540 --> 00:50:59,940
um so then I mentioned

1146
00:50:59,940 --> 00:51:00,780
um

1147
00:51:00,780 --> 00:51:04,020
okay so the way

1148
00:51:04,020 --> 00:51:09,119
you configure ESP home uh using yaml

1149
00:51:09,119 --> 00:51:11,579
um so you define the pins that the radio

1150
00:51:11,579 --> 00:51:13,920
is connected to

1151
00:51:13,920 --> 00:51:15,300
um

1152
00:51:15,300 --> 00:51:18,059
and then you've got things like a Lambda

1153
00:51:18,059 --> 00:51:20,640
which is your old code which can run

1154
00:51:20,640 --> 00:51:24,240
when triggered and so when you receive a

1155
00:51:24,240 --> 00:51:27,119
transmission if you are able to decrypt

1156
00:51:27,119 --> 00:51:30,020
it successfully then

1157
00:51:30,020 --> 00:51:34,260
formatted into a buffer and we're going

1158
00:51:34,260 --> 00:51:37,680
to send that buffer

1159
00:51:37,680 --> 00:51:40,440
um by publishing the new state

1160
00:51:40,440 --> 00:51:43,740
to any listeners and listeners are

1161
00:51:43,740 --> 00:51:46,140
things like the API or anything else

1162
00:51:46,140 --> 00:51:48,660
that is registered in interest in this

1163
00:51:48,660 --> 00:51:51,740
particular entity

1164
00:51:51,740 --> 00:51:54,240
and if you aren't able to decrypt it

1165
00:51:54,240 --> 00:51:56,819
then you you can print it out but in a

1166
00:51:56,819 --> 00:51:58,260
slightly different format so that

1167
00:51:58,260 --> 00:52:00,859
whoever is receiving that can know that

1168
00:52:00,859 --> 00:52:04,559
somebody's trying to do something dodgy

1169
00:52:04,559 --> 00:52:05,220
um

1170
00:52:05,220 --> 00:52:07,680
but I was unable to to decrypt that

1171
00:52:07,680 --> 00:52:10,700
value successfully

1172
00:52:15,599 --> 00:52:16,559
um and that's actually kind of

1173
00:52:16,559 --> 00:52:18,540
interesting because

1174
00:52:18,540 --> 00:52:21,180
um I don't think any of the sort of mass

1175
00:52:21,180 --> 00:52:25,380
Market receivers ever tell you that you

1176
00:52:25,380 --> 00:52:28,079
know we've picked up a transmission that

1177
00:52:28,079 --> 00:52:30,839
we were unable to decrypt you know it

1178
00:52:30,839 --> 00:52:33,240
made sense we could parse it you know it

1179
00:52:33,240 --> 00:52:34,619
seems legit

1180
00:52:34,619 --> 00:52:37,079
uh in in that respect it's not just

1181
00:52:37,079 --> 00:52:40,079
noise that we've uh tried to decode

1182
00:52:40,079 --> 00:52:43,380
um but this looks like a replay attack

1183
00:52:43,380 --> 00:52:45,359
so yeah you don't get those alerts from

1184
00:52:45,359 --> 00:52:49,400
a from a mass Market uh receiver

1185
00:52:49,800 --> 00:52:54,059
um and then this is an example of

1186
00:52:54,059 --> 00:52:56,819
um setting up programming of the

1187
00:52:56,819 --> 00:52:59,099
transmitter so the same ESP home

1188
00:52:59,099 --> 00:53:03,000
instance that is reporting the

1189
00:53:03,000 --> 00:53:06,059
um you know the the Transmissions that

1190
00:53:06,059 --> 00:53:08,339
have been received can actually be

1191
00:53:08,339 --> 00:53:09,720
programmed

1192
00:53:09,720 --> 00:53:13,859
to code the serial number into a new

1193
00:53:13,859 --> 00:53:15,540
transmitter

1194
00:53:15,540 --> 00:53:17,339
which is actually kind of neat so you

1195
00:53:17,339 --> 00:53:19,500
could actually set outside

1196
00:53:19,500 --> 00:53:21,359
um you know our gates

1197
00:53:21,359 --> 00:53:23,040
wait for somebody to press the button

1198
00:53:23,040 --> 00:53:25,260
decode it figure out what the current

1199
00:53:25,260 --> 00:53:27,059
sequence number is for that particular

1200
00:53:27,059 --> 00:53:29,579
transmitter program a new transmitter

1201
00:53:29,579 --> 00:53:32,579
that will transmit the next sequence

1202
00:53:32,579 --> 00:53:34,260
number

1203
00:53:34,260 --> 00:53:36,720
and so you can simply you know press the

1204
00:53:36,720 --> 00:53:38,880
button on that transmitter and operate

1205
00:53:38,880 --> 00:53:41,940
the gate immediately

1206
00:53:41,940 --> 00:53:43,440
so that's

1207
00:53:43,440 --> 00:53:44,040
um

1208
00:53:44,040 --> 00:53:46,440
as you can imagine quite a flaw

1209
00:53:46,440 --> 00:53:49,020
ultimately in

1210
00:53:49,020 --> 00:53:50,819
um yeah if you are able to recover that

1211
00:53:50,819 --> 00:53:52,680
manufacturer key

1212
00:53:52,680 --> 00:53:53,880
um

1213
00:53:53,880 --> 00:53:56,220
so outstanding features

1214
00:53:56,220 --> 00:53:57,839
um persistent recording of counters and

1215
00:53:57,839 --> 00:54:01,319
replay uh detection so actually saying

1216
00:54:01,319 --> 00:54:03,480
that hey you know this was a replay

1217
00:54:03,480 --> 00:54:04,319
um

1218
00:54:04,319 --> 00:54:06,540
the API the client API that I've

1219
00:54:06,540 --> 00:54:08,819
implemented doesn't handle

1220
00:54:08,819 --> 00:54:12,180
desynchronization particularly well

1221
00:54:12,180 --> 00:54:14,780
um and then there are some

1222
00:54:14,780 --> 00:54:17,460
implementation details with regards to

1223
00:54:17,460 --> 00:54:19,260
different kinds of of entities in the

1224
00:54:19,260 --> 00:54:22,020
client API that I still need to work on

1225
00:54:22,020 --> 00:54:23,240
um and there is

1226
00:54:23,240 --> 00:54:26,960
one strangeness with that HCS 301

1227
00:54:26,960 --> 00:54:29,700
initial sequence number when you're

1228
00:54:29,700 --> 00:54:32,000
programming it you should be able to

1229
00:54:32,000 --> 00:54:34,500
specify at what sequence number it

1230
00:54:34,500 --> 00:54:36,000
should start

1231
00:54:36,000 --> 00:54:37,859
um this seems erratic to me I haven't

1232
00:54:37,859 --> 00:54:40,160
been able to actually get it to to

1233
00:54:40,160 --> 00:54:42,780
transmit the sequence number that I tell

1234
00:54:42,780 --> 00:54:45,960
it to start at it ends up being some

1235
00:54:45,960 --> 00:54:47,640
kind of weird random value I haven't

1236
00:54:47,640 --> 00:54:51,420
actually figured out that part 100 at

1237
00:54:51,420 --> 00:54:53,520
this point

1238
00:54:53,520 --> 00:54:56,460
but the code is available on GitHub

1239
00:54:56,460 --> 00:54:59,760
um there are three branches stm32 Port

1240
00:54:59,760 --> 00:55:04,500
the API client port and the the key lock

1241
00:55:04,500 --> 00:55:07,500
implementation

1242
00:55:08,300 --> 00:55:10,440
and thank you very much for for

1243
00:55:10,440 --> 00:55:13,380
listening uh to my story

1244
00:55:13,380 --> 00:55:16,520
if there are any questions

1245
00:55:18,420 --> 00:55:19,680
thank you

1246
00:55:19,680 --> 00:55:21,780
um we do have a question

1247
00:55:21,780 --> 00:55:25,140
Mr Doss I'm new to Rolling hopping code

1248
00:55:25,140 --> 00:55:27,720
mechanisms why do key log and similar

1249
00:55:27,720 --> 00:55:30,180
protocols not use timestamps to prevent

1250
00:55:30,180 --> 00:55:31,619
replay attacks

1251
00:55:31,619 --> 00:55:33,180
Okay so

1252
00:55:33,180 --> 00:55:35,280
there's a couple of complications that

1253
00:55:35,280 --> 00:55:37,579
come up when you start talking about

1254
00:55:37,579 --> 00:55:40,740
timestamps the

1255
00:55:40,740 --> 00:55:43,020
the first of them is that it is

1256
00:55:43,020 --> 00:55:45,960
expensive to

1257
00:55:45,960 --> 00:55:48,200
to actually keep time

1258
00:55:48,200 --> 00:55:51,420
you know you you need

1259
00:55:51,420 --> 00:55:54,180
a fairly accurate Crystal

1260
00:55:54,180 --> 00:55:57,300
um you know you have to provide power to

1261
00:55:57,300 --> 00:56:00,540
the system that is maintaining the time

1262
00:56:00,540 --> 00:56:01,140
um

1263
00:56:01,140 --> 00:56:03,420
so it ends up

1264
00:56:03,420 --> 00:56:07,020
draining the battery more than if you

1265
00:56:07,020 --> 00:56:08,880
simply turn off until a button is

1266
00:56:08,880 --> 00:56:10,260
pressed

1267
00:56:10,260 --> 00:56:13,440
um you've also got issues in terms of

1268
00:56:13,440 --> 00:56:15,660
maintaining accurate time

1269
00:56:15,660 --> 00:56:18,660
so if you need to

1270
00:56:18,660 --> 00:56:19,260
um

1271
00:56:19,260 --> 00:56:21,119
you know you may need to deal with

1272
00:56:21,119 --> 00:56:24,839
temperature compensation so uh clocks

1273
00:56:24,839 --> 00:56:27,720
speed up or slow down depending on the

1274
00:56:27,720 --> 00:56:30,500
temperature the ambient temperature

1275
00:56:30,500 --> 00:56:34,680
and as a result it can be

1276
00:56:34,680 --> 00:56:36,960
yeah kind of difficult to make sure that

1277
00:56:36,960 --> 00:56:38,819
you maintain that precise time

1278
00:56:38,819 --> 00:56:40,680
synchronization

1279
00:56:40,680 --> 00:56:43,079
more recent versions of the key lock

1280
00:56:43,079 --> 00:56:46,079
algorithm do do time I think I think

1281
00:56:46,079 --> 00:56:49,400
things like the DS

1282
00:56:49,400 --> 00:56:52,140
32 something or other

1283
00:56:52,140 --> 00:56:52,920
um

1284
00:56:52,920 --> 00:56:55,920
time keeping Chip have made that a lot

1285
00:56:55,920 --> 00:56:59,400
easier and not quite as as onerous but

1286
00:56:59,400 --> 00:57:01,380
keeping in mind that the system was

1287
00:57:01,380 --> 00:57:05,099
designed in you know the late 80s where

1288
00:57:05,099 --> 00:57:08,339
these sorts of chips were not available

1289
00:57:08,339 --> 00:57:10,020
um now you know you can point to them

1290
00:57:10,020 --> 00:57:11,579
and say Hey you know it would be easy to

1291
00:57:11,579 --> 00:57:14,760
do uh yes now now it is a lot easier to

1292
00:57:14,760 --> 00:57:15,720
do

1293
00:57:15,720 --> 00:57:18,599
all right thank you and another one I

1294
00:57:18,599 --> 00:57:20,280
missed the part on why did you have to

1295
00:57:20,280 --> 00:57:24,059
Port ESP home to stm32 wouldn't it be

1296
00:57:24,059 --> 00:57:25,800
possible to implement keylog transmitter

1297
00:57:25,800 --> 00:57:29,040
in esp32 directly which as far as I

1298
00:57:29,040 --> 00:57:31,079
understand already supports some 433

1299
00:57:31,079 --> 00:57:35,400
megahertz transceivers yes so

1300
00:57:35,400 --> 00:57:38,339
um the problem that faced me was that

1301
00:57:38,339 --> 00:57:41,339
the receiver that I had

1302
00:57:41,339 --> 00:57:46,099
wasn't using 433 megahertz it's using uh

1303
00:57:46,099 --> 00:57:50,700
403.92 as their carrier frequency and

1304
00:57:50,700 --> 00:57:53,280
this is a license frequency in South

1305
00:57:53,280 --> 00:57:56,760
Africa and so you don't actually find

1306
00:57:56,760 --> 00:57:58,740
general purpose receivers and

1307
00:57:58,740 --> 00:58:00,000
transmitters on that particular

1308
00:58:00,000 --> 00:58:01,579
frequency

1309
00:58:01,579 --> 00:58:05,339
and so I needed to make do with the

1310
00:58:05,339 --> 00:58:07,859
hardware that I had access to that the

1311
00:58:07,859 --> 00:58:10,079
manufacturer had built and that was

1312
00:58:10,079 --> 00:58:13,400
using an stm32 yes

1313
00:58:13,400 --> 00:58:17,339
much like I was tapping the the line

1314
00:58:17,339 --> 00:58:21,599
between the radio and the stm32 with my

1315
00:58:21,599 --> 00:58:24,119
logic analyzer I could have tapped that

1316
00:58:24,119 --> 00:58:26,220
line and you know routed that directly

1317
00:58:26,220 --> 00:58:28,980
to the esp32

1318
00:58:28,980 --> 00:58:30,000
um

1319
00:58:30,000 --> 00:58:32,940
I actually implemented that while I was

1320
00:58:32,940 --> 00:58:34,619
testing

1321
00:58:34,619 --> 00:58:35,700
um

1322
00:58:35,700 --> 00:58:37,859
some things uh in the you know the last

1323
00:58:37,859 --> 00:58:41,400
few days so yes you can do it on the

1324
00:58:41,400 --> 00:58:44,520
um the esp32 as well but you know I had

1325
00:58:44,520 --> 00:58:47,280
a board that was wired up

1326
00:58:47,280 --> 00:58:50,819
um using an stm32 and the radio itself

1327
00:58:50,819 --> 00:58:52,799
all on one piece of Hardware so that's

1328
00:58:52,799 --> 00:58:56,819
why I chose to Port it uh to the s1032

1329
00:58:56,819 --> 00:58:58,980
all right thank you

1330
00:58:58,980 --> 00:59:01,380
um I guess

1331
00:59:01,380 --> 00:59:02,940
um is the person who asked this question

1332
00:59:02,940 --> 00:59:05,460
here we have a gift for you a cool hitb

1333
00:59:05,460 --> 00:59:07,559
hat

1334
00:59:07,559 --> 00:59:11,480
there you go swallow mirrors

1335
00:59:11,700 --> 00:59:13,680
um thank you

1336
00:59:13,680 --> 00:59:15,599
um let's give uh speaker a round of

1337
00:59:15,599 --> 00:59:16,799
applause again

1338
00:59:16,799 --> 00:59:19,400
thank you

