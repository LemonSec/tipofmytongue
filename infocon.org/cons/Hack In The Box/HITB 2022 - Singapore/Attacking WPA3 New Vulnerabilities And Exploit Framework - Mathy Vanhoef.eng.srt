1
00:00:05,880 --> 00:00:08,700
okay good morning everyone thank you for

2
00:00:08,700 --> 00:00:10,200
the introduction

3
00:00:10,200 --> 00:00:11,760
so today I'll be talking a little bit

4
00:00:11,760 --> 00:00:16,980
about wpa3 on Wi-Fi security so maybe to

5
00:00:16,980 --> 00:00:18,900
set the stage

6
00:00:18,900 --> 00:00:21,240
when I'm talking here about exploits

7
00:00:21,240 --> 00:00:23,880
against wpa3 I'm not immediately talking

8
00:00:23,880 --> 00:00:26,519
about recovering the Wi-Fi password

9
00:00:26,519 --> 00:00:28,080
um we have been getting better at

10
00:00:28,080 --> 00:00:29,939
security so that fortunately has been

11
00:00:29,939 --> 00:00:31,679
getting harder to just recover the

12
00:00:31,679 --> 00:00:32,759
password

13
00:00:32,759 --> 00:00:34,380
but there are still a lot of fun things

14
00:00:34,380 --> 00:00:37,079
we can do with wpa3 we can mess with the

15
00:00:37,079 --> 00:00:39,000
bandwidth of other users we can still

16
00:00:39,000 --> 00:00:41,040
disconnect users we can still crash

17
00:00:41,040 --> 00:00:42,719
devices

18
00:00:42,719 --> 00:00:45,059
um and in some cases we can still have

19
00:00:45,059 --> 00:00:46,920
some previous attacks where getting the

20
00:00:46,920 --> 00:00:49,320
password is easier

21
00:00:49,320 --> 00:00:51,840
now before we get to that let me quickly

22
00:00:51,840 --> 00:00:53,760
introduce myself

23
00:00:53,760 --> 00:00:55,680
um well there already wasn't a good

24
00:00:55,680 --> 00:00:57,539
introduction so I'm a professor at k11

25
00:00:57,539 --> 00:01:01,320
University and I really do research over

26
00:01:01,320 --> 00:01:04,319
the full Network stack so a lot of my

27
00:01:04,319 --> 00:01:06,299
past work have been about Wi-Fi security

28
00:01:06,299 --> 00:01:09,420
but I do network security in general and

29
00:01:09,420 --> 00:01:11,939
I try to bridge the gap between theory

30
00:01:11,939 --> 00:01:13,920
and practice

31
00:01:13,920 --> 00:01:16,200
and yeah today I'll be talking a little

32
00:01:16,200 --> 00:01:20,759
bit about Wi-Fi security and wpa3 and I

33
00:01:20,759 --> 00:01:22,259
first want to give some history about

34
00:01:22,259 --> 00:01:25,140
Wi-Fi security and what all happened in

35
00:01:25,140 --> 00:01:26,820
the past

36
00:01:26,820 --> 00:01:29,100
so if you look at the beginning of wi-fi

37
00:01:29,100 --> 00:01:32,280
security in the early 2000s

38
00:01:32,280 --> 00:01:36,000
we had WPA one on Two And at the time

39
00:01:36,000 --> 00:01:38,460
these were really the best kind of

40
00:01:38,460 --> 00:01:42,119
protocols we could have for Wi-Fi

41
00:01:42,119 --> 00:01:44,640
but if we look back

42
00:01:44,640 --> 00:01:48,420
the security and WPA2 is really quite

43
00:01:48,420 --> 00:01:49,920
lacking

44
00:01:49,920 --> 00:01:51,840
and why is that the case

45
00:01:51,840 --> 00:01:54,540
well first and for all it's because WPA2

46
00:01:54,540 --> 00:01:56,520
is vulnerable to offline dictionary

47
00:01:56,520 --> 00:01:57,600
attacks

48
00:01:57,600 --> 00:02:00,600
meaning an attacker can capture a

49
00:02:00,600 --> 00:02:02,460
handshake that a client uses to connect

50
00:02:02,460 --> 00:02:04,799
it to a WPA2 Network

51
00:02:04,799 --> 00:02:06,780
that attacker can take the frames that

52
00:02:06,780 --> 00:02:09,179
are exchanged during the handshake and

53
00:02:09,179 --> 00:02:11,340
then use that information to try to

54
00:02:11,340 --> 00:02:14,459
Brute Force the password offline without

55
00:02:14,459 --> 00:02:17,459
even being near the Wi-Fi network

56
00:02:17,459 --> 00:02:21,180
and this is a well-known attack

57
00:02:21,180 --> 00:02:23,700
now WPA2 also has some weaknesses that

58
00:02:23,700 --> 00:02:27,840
are maybe less mentioned in the past and

59
00:02:27,840 --> 00:02:30,480
one of them is that wk2 does not offer

60
00:02:30,480 --> 00:02:32,220
forward secrecy

61
00:02:32,220 --> 00:02:34,379
meaning you can capture the traffic of a

62
00:02:34,379 --> 00:02:37,319
WPA2 Network today without knowing the

63
00:02:37,319 --> 00:02:39,840
password but if in a year or two you

64
00:02:39,840 --> 00:02:41,400
learn the password you can go back in

65
00:02:41,400 --> 00:02:44,220
time on decrypt data that you captured

66
00:02:44,220 --> 00:02:46,379
before

67
00:02:46,379 --> 00:02:49,920
on the third problem which will also

68
00:02:49,920 --> 00:02:52,500
focus on in this stock

69
00:02:52,500 --> 00:02:56,280
is that in WPA2 only data frames are

70
00:02:56,280 --> 00:02:57,540
protected

71
00:02:57,540 --> 00:03:00,720
and you also have management frames that

72
00:03:00,720 --> 00:03:03,239
as the name implies they manage the

73
00:03:03,239 --> 00:03:04,680
connection between a client on the

74
00:03:04,680 --> 00:03:06,840
access point those are actually not

75
00:03:06,840 --> 00:03:09,360
protected at all

76
00:03:09,360 --> 00:03:11,220
and there's one famous attack that

77
00:03:11,220 --> 00:03:12,540
results from this called the

78
00:03:12,540 --> 00:03:14,280
authentication attack

79
00:03:14,280 --> 00:03:17,159
so who here has heard about the

80
00:03:17,159 --> 00:03:18,780
de-authentication attack before against

81
00:03:18,780 --> 00:03:20,220
Wi-Fi

82
00:03:20,220 --> 00:03:24,480
so I see some hands and basically it's a

83
00:03:24,480 --> 00:03:26,459
very simple attack you as an attacker

84
00:03:26,459 --> 00:03:29,099
can spoof plain text the authentication

85
00:03:29,099 --> 00:03:32,220
frames to forcibly disconnect the client

86
00:03:32,220 --> 00:03:33,840
from a network

87
00:03:33,840 --> 00:03:36,599
and this is because WPA2 does not

88
00:03:36,599 --> 00:03:40,019
protect management frames

89
00:03:40,019 --> 00:03:41,400
and

90
00:03:41,400 --> 00:03:44,459
yeah we were using WPA2 for quite a long

91
00:03:44,459 --> 00:03:46,560
time for quite a long time there were

92
00:03:46,560 --> 00:03:48,840
also no real advancements in Wi-Fi

93
00:03:48,840 --> 00:03:50,519
security

94
00:03:50,519 --> 00:03:52,140
and that started to change around

95
00:03:52,140 --> 00:03:55,140
2016-2017.

96
00:03:56,040 --> 00:03:58,260
um at that point we discovered the key

97
00:03:58,260 --> 00:03:59,700
reinstallation attacks or the crack

98
00:03:59,700 --> 00:04:03,120
attack against WPA2 and yeah it allowed

99
00:04:03,120 --> 00:04:04,860
you to decrypt some frames to replay

100
00:04:04,860 --> 00:04:06,959
some frames as well

101
00:04:06,959 --> 00:04:10,799
but perhaps more important than what an

102
00:04:10,799 --> 00:04:12,840
attacker can do with this attack

103
00:04:12,840 --> 00:04:16,019
is the influence that it had on I would

104
00:04:16,019 --> 00:04:18,238
say the Wi-Fi community so the IEEE on

105
00:04:18,238 --> 00:04:19,858
the Wi-Fi lines

106
00:04:19,858 --> 00:04:23,100
because after this discovery I feel that

107
00:04:23,100 --> 00:04:25,199
they finally took security a bit more

108
00:04:25,199 --> 00:04:27,120
serious

109
00:04:27,120 --> 00:04:29,220
um because yeah this crack attack also

110
00:04:29,220 --> 00:04:31,080
was a flaw in the standard so they

111
00:04:31,080 --> 00:04:34,199
started now to also Define and release

112
00:04:34,199 --> 00:04:37,680
new security protocols

113
00:04:37,680 --> 00:04:40,440
um that that is how we got wp3 and the

114
00:04:40,440 --> 00:04:42,180
year after the release of the crack

115
00:04:42,180 --> 00:04:45,240
attack the Wi-Fi lines finally made wpa3

116
00:04:45,240 --> 00:04:49,020
public and to give a quick background

117
00:04:49,020 --> 00:04:52,759
about what wpa3 is

118
00:04:52,759 --> 00:04:57,300
wpa3 introduces two main additions on

119
00:04:57,300 --> 00:05:00,479
top of WPA2 I would say

120
00:05:00,479 --> 00:05:03,840
the first is that with wpa3

121
00:05:03,840 --> 00:05:06,360
your device will new and you will use a

122
00:05:06,360 --> 00:05:08,280
new handshake to connect and

123
00:05:08,280 --> 00:05:10,800
authenticate with the network

124
00:05:10,800 --> 00:05:13,199
on this handshake is called the

125
00:05:13,199 --> 00:05:15,600
simultaneous authentication of equals

126
00:05:15,600 --> 00:05:18,540
handshake that's the technical term in

127
00:05:18,540 --> 00:05:20,940
practice it's often called the dragonfly

128
00:05:20,940 --> 00:05:22,639
handshake

129
00:05:22,639 --> 00:05:25,320
arms yeah this handshake provides the

130
00:05:25,320 --> 00:05:27,060
usual properties so you have mutual

131
00:05:27,060 --> 00:05:29,400
authentication meaning you authenticate

132
00:05:29,400 --> 00:05:31,620
the network of the network authenticates

133
00:05:31,620 --> 00:05:34,080
the clients uh on this handshake

134
00:05:34,080 --> 00:05:36,240
negotiates a new session key that will

135
00:05:36,240 --> 00:05:39,539
be used to encrypt data frames

136
00:05:39,539 --> 00:05:41,520
the most important thing here is that

137
00:05:41,520 --> 00:05:46,560
WPA 3 will also offer forward secrecy on

138
00:05:46,560 --> 00:05:48,360
that prevents this offline dictionary

139
00:05:48,360 --> 00:05:49,919
attacks

140
00:05:49,919 --> 00:05:51,960
on the practice that basically means

141
00:05:51,960 --> 00:05:54,780
that you can use a relatively short

142
00:05:54,780 --> 00:05:57,539
password while still being secure

143
00:05:57,539 --> 00:05:59,639
because if you use a short password with

144
00:05:59,639 --> 00:06:01,860
WPA2 then you could brute force that

145
00:06:01,860 --> 00:06:04,680
offline but will wpa3 that becomes

146
00:06:04,680 --> 00:06:07,620
harder because with wp3 the idea is that

147
00:06:07,620 --> 00:06:09,840
the only way to verify as a password is

148
00:06:09,840 --> 00:06:12,120
correct is to really try to connect with

149
00:06:12,120 --> 00:06:15,500
that password to the network

150
00:06:17,400 --> 00:06:20,759
the second important addition of wpa3

151
00:06:20,759 --> 00:06:23,880
is that it requires the use of what is

152
00:06:23,880 --> 00:06:26,520
called management frame protection

153
00:06:26,520 --> 00:06:28,199
that basically means that these

154
00:06:28,199 --> 00:06:30,660
management frames so think is the

155
00:06:30,660 --> 00:06:32,280
authentication frames that can be used

156
00:06:32,280 --> 00:06:34,080
to disconnect the client

157
00:06:34,080 --> 00:06:36,840
they are now authenticated meaning an

158
00:06:36,840 --> 00:06:39,419
adversary cannot spoof them

159
00:06:39,419 --> 00:06:41,400
so the idea behind management frame

160
00:06:41,400 --> 00:06:43,080
protection is on one hand to prevent

161
00:06:43,080 --> 00:06:46,319
these denial of service attacks on some

162
00:06:46,319 --> 00:06:47,940
other frames are also some other

163
00:06:47,940 --> 00:06:49,880
management frames are also authenticated

164
00:06:49,880 --> 00:06:52,440
uh when you use management frame

165
00:06:52,440 --> 00:06:54,740
protection

166
00:06:54,840 --> 00:06:56,100
so that's

167
00:06:56,100 --> 00:06:59,419
quick history behind wpa3

168
00:06:59,419 --> 00:07:01,620
to give a comparison with some other

169
00:07:01,620 --> 00:07:04,620
attacks in the past so in 2019 we

170
00:07:04,620 --> 00:07:06,360
discovered a dragon blood attack against

171
00:07:06,360 --> 00:07:08,039
wpa3

172
00:07:08,039 --> 00:07:10,259
to give a high-level explanation of what

173
00:07:10,259 --> 00:07:13,860
this attack did basically we discovered

174
00:07:13,860 --> 00:07:16,380
that the time it takes for an access

175
00:07:16,380 --> 00:07:19,319
point or a client to reply to a

176
00:07:19,319 --> 00:07:21,180
handshake message

177
00:07:21,180 --> 00:07:23,099
that leaks some information about the

178
00:07:23,099 --> 00:07:25,139
password

179
00:07:25,139 --> 00:07:27,120
so basically we as an attacker can try

180
00:07:27,120 --> 00:07:30,660
to initiate an incomplete handshake with

181
00:07:30,660 --> 00:07:32,580
a network even when we don't know the

182
00:07:32,580 --> 00:07:34,500
password but we can see how long it

183
00:07:34,500 --> 00:07:36,060
takes for the access point to respond

184
00:07:36,060 --> 00:07:38,039
and that leaks some information about

185
00:07:38,039 --> 00:07:40,919
the password meaning we can still with

186
00:07:40,919 --> 00:07:42,660
that information with that timing

187
00:07:42,660 --> 00:07:44,880
information do offline Brute Force

188
00:07:44,880 --> 00:07:49,199
attacks against a wp3 password

189
00:07:49,199 --> 00:07:51,000
until you may be thinking oh timing

190
00:07:51,000 --> 00:07:53,699
attacks that might be hard in practice

191
00:07:53,699 --> 00:07:54,780
um

192
00:07:54,780 --> 00:07:57,240
but we discovered that these attacks are

193
00:07:57,240 --> 00:07:59,460
quite feasible because often an access

194
00:07:59,460 --> 00:08:01,919
point isn't the most high performance

195
00:08:01,919 --> 00:08:04,860
device especially a home router on there

196
00:08:04,860 --> 00:08:06,599
these timing differences were really

197
00:08:06,599 --> 00:08:10,039
noticeable in practice

198
00:08:12,840 --> 00:08:14,960
another recent addition

199
00:08:14,960 --> 00:08:18,660
on top of wp3 and this is the last piece

200
00:08:18,660 --> 00:08:21,120
of history of wi-fi security that I want

201
00:08:21,120 --> 00:08:22,740
to introduce

202
00:08:22,740 --> 00:08:25,440
is that wp3 not only has this protocol

203
00:08:25,440 --> 00:08:27,660
to protect your home network there is

204
00:08:27,660 --> 00:08:30,900
now also an extension of wpa3 which is

205
00:08:30,900 --> 00:08:34,559
called SAE public key and this is used

206
00:08:34,559 --> 00:08:37,380
to protect hotspot Networks

207
00:08:37,380 --> 00:08:38,640
so

208
00:08:38,640 --> 00:08:40,500
yeah imagine the case where you have a

209
00:08:40,500 --> 00:08:42,120
conference like here

210
00:08:42,120 --> 00:08:43,080
um

211
00:08:43,080 --> 00:08:45,300
or you have

212
00:08:45,300 --> 00:08:48,480
say a coffee shop where you have a Wi-Fi

213
00:08:48,480 --> 00:08:51,240
network then often what people do is

214
00:08:51,240 --> 00:08:53,339
they give the password of the network to

215
00:08:53,339 --> 00:08:56,220
all the attendees onto everyone that

216
00:08:56,220 --> 00:08:57,480
visits

217
00:08:57,480 --> 00:09:01,140
now if you use WPA2

218
00:09:01,140 --> 00:09:02,880
there is actually little Advantage

219
00:09:02,880 --> 00:09:05,040
towards using encryption and then giving

220
00:09:05,040 --> 00:09:07,860
the password to everyone because if I as

221
00:09:07,860 --> 00:09:09,480
an attacker know the password of the

222
00:09:09,480 --> 00:09:11,580
network I can simply set up a copy of

223
00:09:11,580 --> 00:09:12,720
the network

224
00:09:12,720 --> 00:09:14,399
and then the protection you use doesn't

225
00:09:14,399 --> 00:09:17,399
really matter anyway so with WPA2 using

226
00:09:17,399 --> 00:09:19,320
a password to protect a hotspot Network

227
00:09:19,320 --> 00:09:21,600
like a conference network is actually

228
00:09:21,600 --> 00:09:24,240
quite meaningless

229
00:09:24,240 --> 00:09:27,839
but with this SAE PK protocol you can

230
00:09:27,839 --> 00:09:30,060
actually protect a hotspot using a

231
00:09:30,060 --> 00:09:31,440
password

232
00:09:31,440 --> 00:09:33,720
while an attacker even if the attacker

233
00:09:33,720 --> 00:09:35,399
knows the password will not be able to

234
00:09:35,399 --> 00:09:38,040
set up a clone of that Network

235
00:09:38,040 --> 00:09:40,920
and I will explain later in talk how

236
00:09:40,920 --> 00:09:43,620
this is done but basically this new

237
00:09:43,620 --> 00:09:47,880
protocol relies on public key encryption

238
00:09:47,880 --> 00:09:49,860
okay so that's a quick history about

239
00:09:49,860 --> 00:09:52,500
Wi-Fi security

240
00:09:52,500 --> 00:09:54,600
let's now get into

241
00:09:54,600 --> 00:09:56,940
the more meat of the talk namely

242
00:09:56,940 --> 00:10:00,120
attacking some parts of wpa3

243
00:10:00,120 --> 00:10:02,100
and in this talk I'm going to focus on

244
00:10:02,100 --> 00:10:04,080
two aspects the first one is to attack

245
00:10:04,080 --> 00:10:06,540
this management frame protection to

246
00:10:06,540 --> 00:10:07,920
still perform the Nile of service

247
00:10:07,920 --> 00:10:11,220
attacks against a wpa3 network and also

248
00:10:11,220 --> 00:10:13,320
some other vulnerabilities on a few of

249
00:10:13,320 --> 00:10:16,500
these attacks are not yet patched so I

250
00:10:16,500 --> 00:10:18,480
guess you can still consider them zero

251
00:10:18,480 --> 00:10:20,399
days because no patches available for

252
00:10:20,399 --> 00:10:21,720
some of them

253
00:10:21,720 --> 00:10:23,880
and I'll also be talking about some tool

254
00:10:23,880 --> 00:10:25,800
that we made to actually perform these

255
00:10:25,800 --> 00:10:27,779
attacks

256
00:10:27,779 --> 00:10:29,640
okay so let's get started with

257
00:10:29,640 --> 00:10:32,640
management frame protection and

258
00:10:32,640 --> 00:10:34,440
let me first make sure that we're on the

259
00:10:34,440 --> 00:10:37,980
same page here so to repeat part of the

260
00:10:37,980 --> 00:10:39,540
introduction

261
00:10:39,540 --> 00:10:42,839
in Wi-Fi there are three types of frames

262
00:10:42,839 --> 00:10:45,000
so you have your data frames here that

263
00:10:45,000 --> 00:10:47,820
are encrypted when you use WPA2

264
00:10:47,820 --> 00:10:49,380
but apart from that you also have

265
00:10:49,380 --> 00:10:51,000
management frames like the

266
00:10:51,000 --> 00:10:53,040
authentication frames once you have

267
00:10:53,040 --> 00:10:54,660
control frames to acknowledge messages

268
00:10:54,660 --> 00:10:57,180
uh more at the I would say the physical

269
00:10:57,180 --> 00:10:58,380
layer

270
00:10:58,380 --> 00:11:01,560
and wk2 only protected data frames

271
00:11:01,560 --> 00:11:03,540
because management frame protection was

272
00:11:03,540 --> 00:11:04,740
not required

273
00:11:04,740 --> 00:11:07,680
but with wpa3 these management frames

274
00:11:07,680 --> 00:11:10,380
now do have to be protected

275
00:11:10,380 --> 00:11:12,000
and what does that mean that the

276
00:11:12,000 --> 00:11:13,560
management frames have to be protected

277
00:11:13,560 --> 00:11:15,779
well that means that the authentication

278
00:11:15,779 --> 00:11:18,720
on this Association frames have to be

279
00:11:18,720 --> 00:11:21,000
protected on the ideas that that

280
00:11:21,000 --> 00:11:22,920
prevents these trivial denial of service

281
00:11:22,920 --> 00:11:24,839
attacks where you can disconnect a

282
00:11:24,839 --> 00:11:26,040
client

283
00:11:26,040 --> 00:11:28,160
and there's also some other types of

284
00:11:28,160 --> 00:11:31,079
action frames which are management

285
00:11:31,079 --> 00:11:32,940
frames that are protected

286
00:11:32,940 --> 00:11:36,000
uh but these are less important for our

287
00:11:36,000 --> 00:11:37,680
talk

288
00:11:37,680 --> 00:11:39,899
now one very interesting observation is

289
00:11:39,899 --> 00:11:42,899
that management frame protection

290
00:11:42,899 --> 00:11:46,920
has existed now for more than 12 13

291
00:11:46,920 --> 00:11:50,100
years by now but only now is it becoming

292
00:11:50,100 --> 00:11:51,240
required

293
00:11:51,240 --> 00:11:53,459
so that is actually really surprising

294
00:11:53,459 --> 00:11:55,980
because this has existed for more than a

295
00:11:55,980 --> 00:11:58,260
decade but people never used it in

296
00:11:58,260 --> 00:12:00,439
practice

297
00:12:00,600 --> 00:12:03,899
and why was that the case well I think

298
00:12:03,899 --> 00:12:05,399
the main reason was yeah it's not

299
00:12:05,399 --> 00:12:08,220
required so as a vendor you won't

300
00:12:08,220 --> 00:12:10,079
immediately implement it because yeah

301
00:12:10,079 --> 00:12:12,420
it's not required on the implementations

302
00:12:12,420 --> 00:12:14,640
that did exist were often buggy aren't

303
00:12:14,640 --> 00:12:16,500
might result in your clients not being

304
00:12:16,500 --> 00:12:18,959
able to connect

305
00:12:18,959 --> 00:12:22,019
but now with wpa3 management frames is

306
00:12:22,019 --> 00:12:23,040
required

307
00:12:23,040 --> 00:12:24,899
um that's why we looked at the security

308
00:12:24,899 --> 00:12:27,660
of management frame protection aren't we

309
00:12:27,660 --> 00:12:30,480
analyzed the standard so we did a manual

310
00:12:30,480 --> 00:12:33,120
and Analysis of the standard to see

311
00:12:33,120 --> 00:12:35,519
whether all the cases are covered and

312
00:12:35,519 --> 00:12:37,920
then we also did in a sense an audit of

313
00:12:37,920 --> 00:12:40,320
some implementations to see if we can

314
00:12:40,320 --> 00:12:44,220
still find the Nile of service attacks

315
00:12:44,220 --> 00:12:46,920
let's first give a summary of

316
00:12:46,920 --> 00:12:49,500
the findings we found when analyzing the

317
00:12:49,500 --> 00:12:51,000
standard

318
00:12:51,000 --> 00:12:52,860
the first surprising thing that we found

319
00:12:52,860 --> 00:12:55,800
is that some management frames are still

320
00:12:55,800 --> 00:12:57,779
not protected

321
00:12:57,779 --> 00:12:59,639
even when you use management frame

322
00:12:59,639 --> 00:13:01,320
protection

323
00:13:01,320 --> 00:13:05,220
so do I would say more exotic cases are

324
00:13:05,220 --> 00:13:07,139
that you have some

325
00:13:07,139 --> 00:13:10,079
atom frames which are used for power

326
00:13:10,079 --> 00:13:13,380
management in ad hoc networks and you

327
00:13:13,380 --> 00:13:15,660
have some timing advertisement frames

328
00:13:15,660 --> 00:13:17,880
that are used in vehicular Networks

329
00:13:17,880 --> 00:13:21,060
these are management frames but for some

330
00:13:21,060 --> 00:13:23,220
reason they are not protected so as an

331
00:13:23,220 --> 00:13:24,959
adversary you can still spoof with them

332
00:13:24,959 --> 00:13:27,600
so you can probably still drain the

333
00:13:27,600 --> 00:13:29,399
batteries of a device in an adult

334
00:13:29,399 --> 00:13:31,500
network to uh

335
00:13:31,500 --> 00:13:34,440
attack devices

336
00:13:34,440 --> 00:13:37,680
third important management frame that is

337
00:13:37,680 --> 00:13:40,380
not protected when you use wpa3

338
00:13:40,380 --> 00:13:42,720
are beacons

339
00:13:42,720 --> 00:13:45,300
on beacons they basically announced the

340
00:13:45,300 --> 00:13:47,579
presence of a network so they are sent

341
00:13:47,579 --> 00:13:50,160
uh periodically so you have 10 beacons

342
00:13:50,160 --> 00:13:53,279
generally per second on all Wi-Fi

343
00:13:53,279 --> 00:13:55,440
networks will use beacons to announce

344
00:13:55,440 --> 00:13:58,019
the presence of a network

345
00:13:58,019 --> 00:14:00,480
so even if you had a have a hidden Wi-Fi

346
00:14:00,480 --> 00:14:03,000
network that hidden Wi-Fi network will

347
00:14:03,000 --> 00:14:05,700
still continuously be sending Beacon

348
00:14:05,700 --> 00:14:07,920
frames it's just that those Beacon

349
00:14:07,920 --> 00:14:09,839
frames don't contain the actual human

350
00:14:09,839 --> 00:14:12,000
readable name of the network but even a

351
00:14:12,000 --> 00:14:15,240
hidden Wi-Fi network uses Beacon frames

352
00:14:15,240 --> 00:14:16,620
and

353
00:14:16,620 --> 00:14:18,980
yeah there is an optional defense that

354
00:14:18,980 --> 00:14:22,200
protects these Beacon frames but it's

355
00:14:22,200 --> 00:14:25,139
not required as part of wpa3 so in

356
00:14:25,139 --> 00:14:26,639
practice these Beacon frames are not

357
00:14:26,639 --> 00:14:30,420
protected and you can mess with them

358
00:14:30,420 --> 00:14:32,880
so then the question becomes okay even

359
00:14:32,880 --> 00:14:34,500
with wpa3

360
00:14:34,500 --> 00:14:37,019
we have plain text unprotected Beacon

361
00:14:37,019 --> 00:14:38,220
frames

362
00:14:38,220 --> 00:14:41,760
what can we do with that as an attacker

363
00:14:41,760 --> 00:14:44,279
and there are actually quite some fun

364
00:14:44,279 --> 00:14:47,459
things we that we can do by uh spoofing

365
00:14:47,459 --> 00:14:49,199
Beacon frames

366
00:14:49,199 --> 00:14:51,899
the first is that Beacon frames they

367
00:14:51,899 --> 00:14:54,540
advertise the maximum transmission power

368
00:14:54,540 --> 00:14:57,120
in a Wi-Fi network

369
00:14:57,120 --> 00:14:59,279
and we can then spoof a beacon frame

370
00:14:59,279 --> 00:15:01,560
that will lower the maximum transmission

371
00:15:01,560 --> 00:15:04,800
power of a client and that may then

372
00:15:04,800 --> 00:15:06,600
cause the client to disconnect from the

373
00:15:06,600 --> 00:15:09,060
network because the client will use such

374
00:15:09,060 --> 00:15:10,920
a low transmission power that the access

375
00:15:10,920 --> 00:15:15,079
point won't receive its frames anymore

376
00:15:15,120 --> 00:15:18,199
and there is even a custom extension by

377
00:15:18,199 --> 00:15:22,860
Cisco to beacons that again allows an

378
00:15:22,860 --> 00:15:25,139
attacker to lower the maximum

379
00:15:25,139 --> 00:15:27,720
transmission power of a client

380
00:15:27,720 --> 00:15:29,220
in fact we found an interesting

381
00:15:29,220 --> 00:15:31,560
implementation in this so Linux has

382
00:15:31,560 --> 00:15:34,139
basic support for this Cisco extension

383
00:15:34,139 --> 00:15:36,779
in the kernel on there we found that if

384
00:15:36,779 --> 00:15:40,079
we use a negative value for the maximum

385
00:15:40,079 --> 00:15:41,699
transmission power

386
00:15:41,699 --> 00:15:43,740
then Linux the kernel doesn't know what

387
00:15:43,740 --> 00:15:45,420
to do and it will simply disconnect from

388
00:15:45,420 --> 00:15:46,380
the network

389
00:15:46,380 --> 00:15:48,899
so if you want to disconnect a Linux

390
00:15:48,899 --> 00:15:51,660
client from a wpa3 network you can

391
00:15:51,660 --> 00:15:54,180
simply spoof a plain text Beacon and put

392
00:15:54,180 --> 00:15:57,240
a negative transmission power

393
00:15:57,240 --> 00:16:00,360
now let's actually see a quick demo of

394
00:16:00,360 --> 00:16:01,560
this

395
00:16:01,560 --> 00:16:04,199
so here we have a client it can still

396
00:16:04,199 --> 00:16:07,680
visit a website normally

397
00:16:07,680 --> 00:16:09,839
now as an attacker we're going to spoof

398
00:16:09,839 --> 00:16:12,420
some Beacon frames in this case we

399
00:16:12,420 --> 00:16:14,940
inject 10 Beacon frames to make sure at

400
00:16:14,940 --> 00:16:18,300
least one is received by the client

401
00:16:18,300 --> 00:16:21,180
and if we now look in the debug output

402
00:16:21,180 --> 00:16:22,860
of the victim we can indeed see that the

403
00:16:22,860 --> 00:16:24,720
beacon frame was received are not

404
00:16:24,720 --> 00:16:27,300
limited its transmission power

405
00:16:27,300 --> 00:16:29,160
now if we look at this malicious Beacon

406
00:16:29,160 --> 00:16:31,440
and Wireshark we can also see there's an

407
00:16:31,440 --> 00:16:33,720
element here which specifies a power

408
00:16:33,720 --> 00:16:35,519
constraint

409
00:16:35,519 --> 00:16:37,680
now and if the victim now tries to

410
00:16:37,680 --> 00:16:39,480
reload the page

411
00:16:39,480 --> 00:16:41,399
you can see that the page

412
00:16:41,399 --> 00:16:43,740
can be loaded if we try to visit another

413
00:16:43,740 --> 00:16:47,820
page this page also isn't loading

414
00:16:47,820 --> 00:16:49,740
and the reason why is because this

415
00:16:49,740 --> 00:16:51,300
victim is now using such a low

416
00:16:51,300 --> 00:16:54,420
transmission power that its frames just

417
00:16:54,420 --> 00:16:57,360
no longer reach the access point

418
00:16:57,360 --> 00:16:59,880
so this is a fun little denial of

419
00:16:59,880 --> 00:17:01,860
service attack

420
00:17:01,860 --> 00:17:04,020
the interesting part of this attack is

421
00:17:04,020 --> 00:17:06,839
that beacons are also broadcast frames

422
00:17:06,839 --> 00:17:09,000
meaning by spoofing a single Beacon

423
00:17:09,000 --> 00:17:10,919
you're essentially attacking all

424
00:17:10,919 --> 00:17:13,799
connected clients at once so in that

425
00:17:13,799 --> 00:17:15,480
sense it's also quite an efficient

426
00:17:15,480 --> 00:17:17,780
attack

427
00:17:19,740 --> 00:17:21,480
so that's the first attack that's

428
00:17:21,480 --> 00:17:23,699
possible with

429
00:17:23,699 --> 00:17:26,959
by spoofing beacons

430
00:17:27,179 --> 00:17:30,120
a second attack that's possible

431
00:17:30,120 --> 00:17:32,580
is that we can

432
00:17:32,580 --> 00:17:34,320
force a client

433
00:17:34,320 --> 00:17:36,720
to wait a longer time before they will

434
00:17:36,720 --> 00:17:39,059
transmit frames

435
00:17:39,059 --> 00:17:41,220
so if you're a bit familiar with how a

436
00:17:41,220 --> 00:17:43,860
wireless network works usually when a

437
00:17:43,860 --> 00:17:47,520
device wants to send some data over the

438
00:17:47,520 --> 00:17:49,679
wireless medium the device will first

439
00:17:49,679 --> 00:17:51,900
check okay is someone else transmitting

440
00:17:51,900 --> 00:17:54,960
and if someone else is transmitting

441
00:17:54,960 --> 00:17:57,059
it will wait a random amount of time

442
00:17:57,059 --> 00:18:01,020
before trying to transmit again

443
00:18:01,020 --> 00:18:05,340
on the time that the client Waits

444
00:18:05,340 --> 00:18:07,559
this amount of time

445
00:18:07,559 --> 00:18:11,720
is specified in the beacon as well

446
00:18:11,820 --> 00:18:13,740
so what we as an attacker can do we can

447
00:18:13,740 --> 00:18:16,080
spoof a beacon that basically says okay

448
00:18:16,080 --> 00:18:18,299
if you want to try to transmit a frame

449
00:18:18,299 --> 00:18:20,520
first wait a long time before you

450
00:18:20,520 --> 00:18:22,860
transmit it that's the summary

451
00:18:22,860 --> 00:18:24,660
um this basically means that we can

452
00:18:24,660 --> 00:18:27,059
lower the bandwidth of a victim because

453
00:18:27,059 --> 00:18:29,100
we can cause this big victim to always

454
00:18:29,100 --> 00:18:31,080
wait a long time before the victim will

455
00:18:31,080 --> 00:18:34,620
send the next Wi-Fi frame

456
00:18:34,620 --> 00:18:37,620
and here we again have a demo of this so

457
00:18:37,620 --> 00:18:40,200
in this case I think it was either an

458
00:18:40,200 --> 00:18:42,000
Android or an iPhone

459
00:18:42,000 --> 00:18:44,400
and we can see without an attack present

460
00:18:44,400 --> 00:18:48,360
we have around 10 megabit speed

461
00:18:48,360 --> 00:18:51,360
we now again inject some beacons

462
00:18:51,360 --> 00:18:53,100
we hear we set these malicious

463
00:18:53,100 --> 00:18:55,020
parameters that cause the client to wait

464
00:18:55,020 --> 00:18:57,780
a long time before sending the next

465
00:18:57,780 --> 00:19:00,179
frame so these are called the back of

466
00:19:00,179 --> 00:19:02,160
parameters

467
00:19:02,160 --> 00:19:03,900
Mr client now

468
00:19:03,900 --> 00:19:06,179
does a new speed test we can see that

469
00:19:06,179 --> 00:19:08,220
the bandwidth indeed has significantly

470
00:19:08,220 --> 00:19:10,620
decreased

471
00:19:10,620 --> 00:19:12,840
so yeah you can imagine if you're at a

472
00:19:12,840 --> 00:19:14,640
hotel or some Network and you notice

473
00:19:14,640 --> 00:19:17,400
that the your Internet is slow you can

474
00:19:17,400 --> 00:19:18,780
perform this attack to lower the band

475
00:19:18,780 --> 00:19:20,400
with other people and then you will have

476
00:19:20,400 --> 00:19:23,360
a faster internet

477
00:19:26,400 --> 00:19:28,620
there are also some other attacks

478
00:19:28,620 --> 00:19:31,559
possible by spoofing beacons these are a

479
00:19:31,559 --> 00:19:33,620
bit more technical attacks so you can

480
00:19:33,620 --> 00:19:36,059
establish a special machine in the

481
00:19:36,059 --> 00:19:37,380
middle position

482
00:19:37,380 --> 00:19:39,480
which is then useful to perform more

483
00:19:39,480 --> 00:19:41,160
advanced attacks like a key

484
00:19:41,160 --> 00:19:44,580
reinstallation attack and so on

485
00:19:44,580 --> 00:19:47,400
my spoofing beacons you can also trick a

486
00:19:47,400 --> 00:19:50,039
client into staying awake longer than it

487
00:19:50,039 --> 00:19:52,500
normally would so say against an iot

488
00:19:52,500 --> 00:19:55,380
client you can abuse this to make the

489
00:19:55,380 --> 00:19:57,299
client stay awake for a long time so you

490
00:19:57,299 --> 00:19:59,419
can deplete the battery

491
00:19:59,419 --> 00:20:02,100
and so on

492
00:20:02,100 --> 00:20:04,620
and what's the defense against this well

493
00:20:04,620 --> 00:20:07,980
one possible defense is to use this

494
00:20:07,980 --> 00:20:10,440
Beacon protection defense

495
00:20:10,440 --> 00:20:13,080
and when you use Beacon protection which

496
00:20:13,080 --> 00:20:16,440
is an optional feature of wpa3 then

497
00:20:16,440 --> 00:20:18,240
Beacon frames will get authenticated

498
00:20:18,240 --> 00:20:20,760
meaning an adversary will not be able to

499
00:20:20,760 --> 00:20:23,700
spoof these Beacon frames anymore

500
00:20:23,700 --> 00:20:26,220
and yeah Beacon protection is actually a

501
00:20:26,220 --> 00:20:28,080
defense that uh

502
00:20:28,080 --> 00:20:31,080
we created on published ourself it has

503
00:20:31,080 --> 00:20:33,299
meanwhile been standardized by the IEEE

504
00:20:33,299 --> 00:20:38,220
and is now an optional feature of wpa3

505
00:20:39,600 --> 00:20:41,520
so that covers

506
00:20:41,520 --> 00:20:43,559
some of the attacks that are possible by

507
00:20:43,559 --> 00:20:46,440
spoofing beacons

508
00:20:46,440 --> 00:20:49,020
we also analyzed

509
00:20:49,020 --> 00:20:51,960
some other aspects of the standard

510
00:20:51,960 --> 00:20:53,400
and

511
00:20:53,400 --> 00:20:55,679
I'm not going to bore you too much with

512
00:20:55,679 --> 00:20:57,240
the details of the standard but I do

513
00:20:57,240 --> 00:20:59,160
want to give you a high level overview

514
00:20:59,160 --> 00:21:01,980
so you have a bit of feeling with it

515
00:21:01,980 --> 00:21:04,160
um there are basically 10 main rules

516
00:21:04,160 --> 00:21:07,440
that specify how a client on access

517
00:21:07,440 --> 00:21:09,600
point should behave

518
00:21:09,600 --> 00:21:11,460
and these rules are quite complex

519
00:21:11,460 --> 00:21:12,660
because

520
00:21:12,660 --> 00:21:15,780
um a lot of these rules are conditional

521
00:21:15,780 --> 00:21:18,480
on some parameters for example whether a

522
00:21:18,480 --> 00:21:20,160
rule applies depends on whether the

523
00:21:20,160 --> 00:21:21,600
client supports it whether the access

524
00:21:21,600 --> 00:21:24,720
point supports it uh whether the key is

525
00:21:24,720 --> 00:21:27,600
already negotiated and so on

526
00:21:27,600 --> 00:21:29,940
and yeah here you don't need to read

527
00:21:29,940 --> 00:21:31,919
this but this is how these rules look

528
00:21:31,919 --> 00:21:33,960
like so you can see they're not that

529
00:21:33,960 --> 00:21:37,880
trivial to parse and

530
00:21:38,220 --> 00:21:40,380
the words here that are highlighted in

531
00:21:40,380 --> 00:21:42,360
both those are some of the conditions

532
00:21:42,360 --> 00:21:44,340
that must be true and if those

533
00:21:44,340 --> 00:21:46,620
conditions are true then this rules

534
00:21:46,620 --> 00:21:48,360
applies

535
00:21:48,360 --> 00:21:50,460
so if you have to implement this as a

536
00:21:50,460 --> 00:21:52,080
programmer you have to carefully read

537
00:21:52,080 --> 00:21:54,539
all these conditions check for them and

538
00:21:54,539 --> 00:21:56,100
only if these conditions are true

539
00:21:56,100 --> 00:21:59,340
implement the behavior so it's not that

540
00:21:59,340 --> 00:22:02,940
easy to implement this correctly

541
00:22:02,940 --> 00:22:04,380
in fact

542
00:22:04,380 --> 00:22:06,419
we found that in the standard there are

543
00:22:06,419 --> 00:22:07,980
even some rules that contradict each

544
00:22:07,980 --> 00:22:09,539
other

545
00:22:09,539 --> 00:22:11,940
so for example there are two rules that

546
00:22:11,940 --> 00:22:13,919
specify how you should handle

547
00:22:13,919 --> 00:22:16,200
unprotected the authentication frames

548
00:22:16,200 --> 00:22:18,120
while you are still connecting to a

549
00:22:18,120 --> 00:22:18,919
network

550
00:22:18,919 --> 00:22:21,900
on some say okay just drop these but

551
00:22:21,900 --> 00:22:24,299
other parts of the same standards say oh

552
00:22:24,299 --> 00:22:26,580
you have to start this special sa query

553
00:22:26,580 --> 00:22:29,480
to see whether the client is still alive

554
00:22:29,480 --> 00:22:32,760
but basically this this just shows that

555
00:22:32,760 --> 00:22:35,580
the standard is quite complex meaning

556
00:22:35,580 --> 00:22:38,039
it's also hard to implement correctly as

557
00:22:38,039 --> 00:22:39,539
a programmer

558
00:22:39,539 --> 00:22:42,419
on some special edge cases are also

559
00:22:42,419 --> 00:22:43,919
undefined

560
00:22:43,919 --> 00:22:46,080
so there are some scenarios where the

561
00:22:46,080 --> 00:22:47,940
standard doesn't say explicitly how a

562
00:22:47,940 --> 00:22:50,880
device should behave meaning yeah then

563
00:22:50,880 --> 00:22:52,380
it's up to the programmer how to

564
00:22:52,380 --> 00:22:55,200
implement this on these programmers are

565
00:22:55,200 --> 00:22:57,840
not always Security Experts so sometimes

566
00:22:57,840 --> 00:23:00,120
that can go wrong

567
00:23:00,120 --> 00:23:02,220
so basically in my opinion the standard

568
00:23:02,220 --> 00:23:03,659
can be more clear

569
00:23:03,659 --> 00:23:05,760
ly the standard is unclear and that

570
00:23:05,760 --> 00:23:09,840
might lead to some implementation issues

571
00:23:09,840 --> 00:23:12,299
and there's in fact one rule in the

572
00:23:12,299 --> 00:23:13,860
standard which is

573
00:23:13,860 --> 00:23:16,919
very clearly insecure

574
00:23:16,919 --> 00:23:19,020
basically there's there's one rule that

575
00:23:19,020 --> 00:23:21,539
says okay the receiver shall process

576
00:23:21,539 --> 00:23:24,480
unprotected frames

577
00:23:24,480 --> 00:23:28,140
that's of course not what you want now

578
00:23:28,140 --> 00:23:30,120
this does occur in the edge case so

579
00:23:30,120 --> 00:23:32,700
basically the standard is saying while

580
00:23:32,700 --> 00:23:35,220
you are still connecting to a network

581
00:23:35,220 --> 00:23:37,320
meaning you don't yet have keys to

582
00:23:37,320 --> 00:23:40,880
authenticate these frames

583
00:23:40,880 --> 00:23:44,159
and it's also hard to you cannot

584
00:23:44,159 --> 00:23:45,419
authenticate the frame so what are you

585
00:23:45,419 --> 00:23:46,860
going to do

586
00:23:46,860 --> 00:23:48,600
and in this case the standard says okay

587
00:23:48,600 --> 00:23:50,520
just accept them

588
00:23:50,520 --> 00:23:52,620
and as an attacker of course you can

589
00:23:52,620 --> 00:23:54,240
abuse this because when a client is

590
00:23:54,240 --> 00:23:56,400
connecting to the network you can spoof

591
00:23:56,400 --> 00:23:58,980
these uh plain text these

592
00:23:58,980 --> 00:24:00,720
unauthenticated the authentication or

593
00:24:00,720 --> 00:24:03,600
this is disassociation frames to cause

594
00:24:03,600 --> 00:24:04,980
the handshake to cause the connection

595
00:24:04,980 --> 00:24:08,419
process to fail

596
00:24:08,460 --> 00:24:10,799
now this is a bit unfortunate

597
00:24:10,799 --> 00:24:13,500
because it's actually quite easy to

598
00:24:13,500 --> 00:24:15,539
defend against this attack

599
00:24:15,539 --> 00:24:19,080
namely what you can do is

600
00:24:19,080 --> 00:24:21,240
when you receive one of these plain text

601
00:24:21,240 --> 00:24:24,179
frames instead of immediately exact

602
00:24:24,179 --> 00:24:25,799
accepting it

603
00:24:25,799 --> 00:24:27,840
you can just start a timer instead of

604
00:24:27,840 --> 00:24:31,260
disconnecting and if before this timer

605
00:24:31,260 --> 00:24:33,720
expires

606
00:24:33,720 --> 00:24:36,780
the connection process progresses

607
00:24:36,780 --> 00:24:39,240
meaning the next phase of the handshake

608
00:24:39,240 --> 00:24:42,120
has been successfully executed then you

609
00:24:42,120 --> 00:24:43,799
basically know oh actually this client

610
00:24:43,799 --> 00:24:45,299
is still connected because it's still

611
00:24:45,299 --> 00:24:47,940
standing frames meaning this

612
00:24:47,940 --> 00:24:50,280
the authentication frame probably was

613
00:24:50,280 --> 00:24:51,780
from an attacker

614
00:24:51,780 --> 00:24:53,760
while on the other hand if you notice

615
00:24:53,760 --> 00:24:55,500
that there is indeed no progress if the

616
00:24:55,500 --> 00:24:57,900
client indeed isn't sending frames after

617
00:24:57,900 --> 00:24:59,700
one or two seconds then you can indeed

618
00:24:59,700 --> 00:25:01,140
disconnect the client

619
00:25:01,140 --> 00:25:05,059
so that would be a much better solution

620
00:25:05,700 --> 00:25:07,980
now how can we fix these issues here so

621
00:25:07,980 --> 00:25:09,960
we have some of these edge cases that

622
00:25:09,960 --> 00:25:13,020
are badly handled in the standard

623
00:25:13,020 --> 00:25:15,059
while a long-term fix is to Simply

624
00:25:15,059 --> 00:25:16,919
always require management frame

625
00:25:16,919 --> 00:25:20,220
protection so even with WPA2 because

626
00:25:20,220 --> 00:25:22,679
that would simplify the rules in the

627
00:25:22,679 --> 00:25:23,820
standard

628
00:25:23,820 --> 00:25:26,100
of course in practice you can't really

629
00:25:26,100 --> 00:25:27,900
do this in practice you need backwards

630
00:25:27,900 --> 00:25:31,140
compatibility so in a sense this this is

631
00:25:31,140 --> 00:25:34,260
a dream for maybe in 10 years

632
00:25:34,260 --> 00:25:36,419
what can we do in the meantime in the

633
00:25:36,419 --> 00:25:39,299
meantime we can uh update the standards

634
00:25:39,299 --> 00:25:41,880
to make these rules more clear that's

635
00:25:41,880 --> 00:25:44,940
exactly what we did we uh presented some

636
00:25:44,940 --> 00:25:47,460
updates to these standards aren't

637
00:25:47,460 --> 00:25:50,279
presented them at IEEE meetings on yeah

638
00:25:50,279 --> 00:25:53,480
hopefully they will be adopted

639
00:25:54,120 --> 00:25:56,520
okay so that covers some analysis of the

640
00:25:56,520 --> 00:25:59,279
standards and I want to get back to

641
00:25:59,279 --> 00:26:01,380
looking at implementations to really

642
00:26:01,380 --> 00:26:03,900
audit some code to see how management

643
00:26:03,900 --> 00:26:05,760
frame protection is implemented in

644
00:26:05,760 --> 00:26:06,960
practice

645
00:26:06,960 --> 00:26:09,539
and

646
00:26:09,539 --> 00:26:12,059
our goal here

647
00:26:12,059 --> 00:26:14,340
is to look for a tax

648
00:26:14,340 --> 00:26:16,799
that still allow you to disconnect the

649
00:26:16,799 --> 00:26:19,799
client from a wpa3 network

650
00:26:19,799 --> 00:26:21,960
because currently our assumption is that

651
00:26:21,960 --> 00:26:24,720
with a wpa3 network it uses management

652
00:26:24,720 --> 00:26:26,700
frame protection therefore these

653
00:26:26,700 --> 00:26:28,380
de-authentication attacks are no longer

654
00:26:28,380 --> 00:26:30,779
possible but my message here will be

655
00:26:30,779 --> 00:26:32,640
that actually these disconnection

656
00:26:32,640 --> 00:26:34,740
attacks are still feasible by abusing

657
00:26:34,740 --> 00:26:37,320
implementation flaws

658
00:26:37,320 --> 00:26:39,419
and concretely what we did is we

659
00:26:39,419 --> 00:26:41,640
inspected some

660
00:26:41,640 --> 00:26:44,520
open source implementations

661
00:26:44,520 --> 00:26:46,799
and we looked for

662
00:26:46,799 --> 00:26:48,539
functions

663
00:26:48,539 --> 00:26:51,720
in a Wi-Fi client or in a client that

664
00:26:51,720 --> 00:26:53,760
caused a client to disconnect from the

665
00:26:53,760 --> 00:26:56,520
network and we then looked whether we

666
00:26:56,520 --> 00:26:58,740
can trigger these disconnection

667
00:26:58,740 --> 00:27:01,260
functions basically

668
00:27:01,260 --> 00:27:04,140
and maybe to briefly go back to the

669
00:27:04,140 --> 00:27:06,720
previous slides why are these denial of

670
00:27:06,720 --> 00:27:08,520
service attacks actually very useful in

671
00:27:08,520 --> 00:27:09,419
practice

672
00:27:09,419 --> 00:27:11,820
well the first one is okay an attacker

673
00:27:11,820 --> 00:27:13,200
might be purely interested in

674
00:27:13,200 --> 00:27:14,580
disconnecting the client from the

675
00:27:14,580 --> 00:27:17,460
network so that's one obvious use case

676
00:27:17,460 --> 00:27:21,299
but another important advantage of these

677
00:27:21,299 --> 00:27:23,580
disconnection attacks is that they are

678
00:27:23,580 --> 00:27:26,340
often the first step in more advanced

679
00:27:26,340 --> 00:27:28,620
attacks

680
00:27:28,620 --> 00:27:30,419
so if you look at previous attacks on

681
00:27:30,419 --> 00:27:32,580
Wi-Fi like the crack attack the frag

682
00:27:32,580 --> 00:27:34,919
attack on the Dragon Blood attack they

683
00:27:34,919 --> 00:27:37,200
all target the handshake that is being

684
00:27:37,200 --> 00:27:41,120
executed when you connect to the network

685
00:27:41,340 --> 00:27:43,260
of course once a client is already

686
00:27:43,260 --> 00:27:45,360
connected to the network that means you

687
00:27:45,360 --> 00:27:46,679
cannot perform these attacks because

688
00:27:46,679 --> 00:27:50,340
there's no handshake going on

689
00:27:50,340 --> 00:27:52,140
but if we have these disconnectioned

690
00:27:52,140 --> 00:27:53,700
text and even if a client is already

691
00:27:53,700 --> 00:27:55,799
connected we can use these denial of

692
00:27:55,799 --> 00:27:57,299
service attacks to disconnect the client

693
00:27:57,299 --> 00:27:59,159
from the network then the client will

694
00:27:59,159 --> 00:28:01,140
immediately reconnect and then we can

695
00:28:01,140 --> 00:28:02,640
try to perform these more advanced

696
00:28:02,640 --> 00:28:03,600
attacks

697
00:28:03,600 --> 00:28:05,460
so these attacks that we see they have

698
00:28:05,460 --> 00:28:07,260
as purpose of course a denial of service

699
00:28:07,260 --> 00:28:10,080
attacks but they also are a first step

700
00:28:10,080 --> 00:28:13,799
in more advanced attacks typically

701
00:28:13,799 --> 00:28:15,659
until what we did is we looked at some

702
00:28:15,659 --> 00:28:18,840
implementations uh and we saw whether we

703
00:28:18,840 --> 00:28:20,820
can trigger some of these disconnections

704
00:28:20,820 --> 00:28:24,480
by spoofing plain text frames and we

705
00:28:24,480 --> 00:28:25,980
first looked at open source

706
00:28:25,980 --> 00:28:27,419
implementations and then we checked

707
00:28:27,419 --> 00:28:29,340
whether our attacks also worked against

708
00:28:29,340 --> 00:28:32,580
closed Source devices

709
00:28:32,580 --> 00:28:35,880
and yeah we indeed found some fun stuff

710
00:28:35,880 --> 00:28:38,760
there again so

711
00:28:38,760 --> 00:28:42,659
we again have our previous uh case where

712
00:28:42,659 --> 00:28:45,000
we can spoof Beacon frames because

713
00:28:45,000 --> 00:28:47,460
Beacon frames are

714
00:28:47,460 --> 00:28:49,620
plain text they are unauthenticated

715
00:28:49,620 --> 00:28:52,080
meaning they are easy to spoof

716
00:28:52,080 --> 00:28:53,760
and basically we found some new

717
00:28:53,760 --> 00:28:55,860
implementation vulnerabilities and how

718
00:28:55,860 --> 00:28:59,179
Beacon frames are handled

719
00:28:59,179 --> 00:29:03,360
to give a high level explanation here

720
00:29:03,360 --> 00:29:06,419
a beacon frame also contains the current

721
00:29:06,419 --> 00:29:08,700
channel on bandwidth that a Wi-Fi

722
00:29:08,700 --> 00:29:10,559
network supports

723
00:29:10,559 --> 00:29:13,860
for example a beacon can say hey I'm a

724
00:29:13,860 --> 00:29:18,720
Wi-Fi network on channel 60 and I have a

725
00:29:18,720 --> 00:29:21,539
40 megahertz bandwidth

726
00:29:21,539 --> 00:29:25,580
uh and it can give all those details

727
00:29:26,220 --> 00:29:28,320
what we as an attacker can do we can

728
00:29:28,320 --> 00:29:31,380
actually spoof a beacon with an invalid

729
00:29:31,380 --> 00:29:34,080
channel on bandwidth combination

730
00:29:34,080 --> 00:29:36,120
and

731
00:29:36,120 --> 00:29:38,700
to give a summary of this

732
00:29:38,700 --> 00:29:43,679
not all bandwidth sizes are allowed in

733
00:29:43,679 --> 00:29:48,059
every country uh basically meaning

734
00:29:48,059 --> 00:29:51,299
here is one specific example if you

735
00:29:51,299 --> 00:29:53,460
spoof a beacon that says okay I'm a

736
00:29:53,460 --> 00:29:56,460
Wi-Fi network on channel one and yeah my

737
00:29:56,460 --> 00:29:58,620
secondary channel is below the primary

738
00:29:58,620 --> 00:30:01,140
uh this is just a technical way to

739
00:30:01,140 --> 00:30:03,179
specify on which frequency the network

740
00:30:03,179 --> 00:30:04,740
operates

741
00:30:04,740 --> 00:30:07,679
this specific case is invalid in a lot

742
00:30:07,679 --> 00:30:10,080
of countries and a lot of regulatory

743
00:30:10,080 --> 00:30:13,620
environments meaning most clients when

744
00:30:13,620 --> 00:30:15,840
they receive this information they will

745
00:30:15,840 --> 00:30:17,279
think oh

746
00:30:17,279 --> 00:30:19,320
the Wi-Fi network is suddenly using a

747
00:30:19,320 --> 00:30:21,299
different channel on bandwidth

748
00:30:21,299 --> 00:30:23,640
I am not allowed to use that bandwidth

749
00:30:23,640 --> 00:30:27,020
meaning I will disconnect

750
00:30:28,320 --> 00:30:30,720
and we tested this attack against Linux

751
00:30:30,720 --> 00:30:33,840
and windows so we as an attacker spoof a

752
00:30:33,840 --> 00:30:36,179
beacon with this invalid Channel and

753
00:30:36,179 --> 00:30:39,179
bandwidth combination and then Linux on

754
00:30:39,179 --> 00:30:42,120
Windows will disconnect even if they are

755
00:30:42,120 --> 00:30:45,320
using wpa3

756
00:30:48,360 --> 00:30:50,700
we also discovered

757
00:30:50,700 --> 00:30:52,080
the second implementation

758
00:30:52,080 --> 00:30:54,000
vulnerabilities on how some clients

759
00:30:54,000 --> 00:30:56,039
handle Beacon frames

760
00:30:56,039 --> 00:30:58,260
and this is actually a very general

761
00:30:58,260 --> 00:31:00,059
attack

762
00:31:00,059 --> 00:31:02,100
namely a beacon frame

763
00:31:02,100 --> 00:31:04,620
it can also contain a special Channel

764
00:31:04,620 --> 00:31:07,080
switch announcement

765
00:31:07,080 --> 00:31:08,760
and

766
00:31:08,760 --> 00:31:10,980
when is this used normally in practice

767
00:31:10,980 --> 00:31:13,440
well

768
00:31:13,440 --> 00:31:15,600
when a Wi-Fi network is operating in the

769
00:31:15,600 --> 00:31:17,600
5 gigahertz uh

770
00:31:17,600 --> 00:31:21,539
bandwidth then

771
00:31:21,539 --> 00:31:24,000
clients on access points

772
00:31:24,000 --> 00:31:26,520
are required to support what is called

773
00:31:26,520 --> 00:31:29,658
radar detection

774
00:31:29,820 --> 00:31:32,399
on the reason why is that

775
00:31:32,399 --> 00:31:34,679
yeah a Wi-Fi network on a five gigahertz

776
00:31:34,679 --> 00:31:36,659
Channel might interfere with a weather

777
00:31:36,659 --> 00:31:39,059
radar on the ideas that if an access

778
00:31:39,059 --> 00:31:42,299
point detects nearby weather radar on

779
00:31:42,299 --> 00:31:44,399
its channel the access point will switch

780
00:31:44,399 --> 00:31:46,140
to a different channel to avoid

781
00:31:46,140 --> 00:31:49,020
interference with the weather radar

782
00:31:49,020 --> 00:31:51,299
and when on access point then detects a

783
00:31:51,299 --> 00:31:53,880
nearby weather radar so when it detects

784
00:31:53,880 --> 00:31:56,460
these radar pulses

785
00:31:56,460 --> 00:31:59,100
the access point will also tell clients

786
00:31:59,100 --> 00:32:02,580
okay I detected a weather radar I'm now

787
00:32:02,580 --> 00:32:05,700
going to switch to a different Channel

788
00:32:05,700 --> 00:32:09,000
onto this channel switch announcement is

789
00:32:09,000 --> 00:32:12,419
included in plain text in these beacons

790
00:32:12,419 --> 00:32:14,580
on here you see again a screenshot from

791
00:32:14,580 --> 00:32:17,580
from Wireshark so here you are basically

792
00:32:17,580 --> 00:32:19,860
saying okay my new channel is going to

793
00:32:19,860 --> 00:32:22,919
be Channel 11 and I'm going to switch to

794
00:32:22,919 --> 00:32:23,760
that

795
00:32:23,760 --> 00:32:28,520
um very soon in one time unit

796
00:32:28,559 --> 00:32:29,700
so

797
00:32:29,700 --> 00:32:32,399
yeah and then practice we can abuse this

798
00:32:32,399 --> 00:32:34,200
to spoof beacons

799
00:32:34,200 --> 00:32:36,360
to trick clients into switching to a

800
00:32:36,360 --> 00:32:39,120
different Channel and

801
00:32:39,120 --> 00:32:41,100
yeah the clients will switch to this

802
00:32:41,100 --> 00:32:42,659
different Channel but the real access

803
00:32:42,659 --> 00:32:45,899
point is not on this channel of course

804
00:32:45,899 --> 00:32:47,700
meaning the client will see hey the

805
00:32:47,700 --> 00:32:49,620
access point is now gone it's not on

806
00:32:49,620 --> 00:32:51,539
this new channel and eventually the

807
00:32:51,539 --> 00:32:54,779
client will again disconnect

808
00:32:54,779 --> 00:32:56,520
armed

809
00:32:56,520 --> 00:32:58,919
yeah this is a very general attack a lot

810
00:32:58,919 --> 00:33:01,440
of devices are vulnerable to this so we

811
00:33:01,440 --> 00:33:03,539
tested this against Linux against Mac OS

812
00:33:03,539 --> 00:33:06,960
also iPad OS iOS on Windows

813
00:33:06,960 --> 00:33:09,360
on all of these devices

814
00:33:09,360 --> 00:33:11,760
support the channel switch announcement

815
00:33:11,760 --> 00:33:14,220
meaning all of them will switch to this

816
00:33:14,220 --> 00:33:16,500
channel that we tell it to and

817
00:33:16,500 --> 00:33:18,059
eventually these clients will then

818
00:33:18,059 --> 00:33:21,260
disconnect from the network

819
00:33:24,620 --> 00:33:26,159
so

820
00:33:26,159 --> 00:33:27,720
those are some of the attacks we

821
00:33:27,720 --> 00:33:29,100
discovered that are possible using

822
00:33:29,100 --> 00:33:31,459
beacons

823
00:33:31,740 --> 00:33:34,500
we also discovered another interesting

824
00:33:34,500 --> 00:33:36,299
attack

825
00:33:36,299 --> 00:33:38,100
namely we found

826
00:33:38,100 --> 00:33:39,299
uh

827
00:33:39,299 --> 00:33:41,760
this fairly recent router which also

828
00:33:41,760 --> 00:33:44,279
supports wpa3

829
00:33:44,279 --> 00:33:47,039
we found that if we flood this router

830
00:33:47,039 --> 00:33:50,640
with a lot of handshake messages

831
00:33:50,640 --> 00:33:53,760
so here we have the SAE handshake so the

832
00:33:53,760 --> 00:33:56,640
dragonfly handshake of wpa3

833
00:33:56,640 --> 00:33:59,279
if we flood it with a lot of handshake

834
00:33:59,279 --> 00:34:00,539
messages

835
00:34:00,539 --> 00:34:02,880
eventually this router will just crash

836
00:34:02,880 --> 00:34:05,600
on reboot

837
00:34:06,720 --> 00:34:08,699
on the reason why is that internally

838
00:34:08,699 --> 00:34:10,980
there is an out of memory issue which

839
00:34:10,980 --> 00:34:12,239
leads to

840
00:34:12,239 --> 00:34:13,679
um yeah

841
00:34:13,679 --> 00:34:15,960
in a sense memory allocation will fail

842
00:34:15,960 --> 00:34:17,580
and then you get a null pointer to

843
00:34:17,580 --> 00:34:18,540
reference

844
00:34:18,540 --> 00:34:20,219
and the interesting thing is this really

845
00:34:20,219 --> 00:34:24,540
happens in the driver of the router so I

846
00:34:24,540 --> 00:34:27,359
also expect that other routers that use

847
00:34:27,359 --> 00:34:29,699
the same driver will also be vulnerable

848
00:34:29,699 --> 00:34:32,699
to this attack and

849
00:34:32,699 --> 00:34:35,099
yeah what is actually a bit funny about

850
00:34:35,099 --> 00:34:38,099
this case is that

851
00:34:38,099 --> 00:34:40,139
this vulnerability here

852
00:34:40,139 --> 00:34:43,379
is present in what is called the

853
00:34:43,379 --> 00:34:47,899
anti-clogging feature of wpa3

854
00:34:48,839 --> 00:34:52,280
now what does that mean here so

855
00:34:52,280 --> 00:34:56,760
wpa3 actually has a built-in defense to

856
00:34:56,760 --> 00:34:58,500
prevent

857
00:34:58,500 --> 00:35:00,180
against floating attacks because

858
00:35:00,180 --> 00:35:02,540
basically the wpa3 handshake is

859
00:35:02,540 --> 00:35:06,119
computationally quite expensive and with

860
00:35:06,119 --> 00:35:08,400
wp3 they added this anti-clogging

861
00:35:08,400 --> 00:35:11,760
defense where if an attacker tries to

862
00:35:11,760 --> 00:35:13,619
flood a lot of messages there's

863
00:35:13,619 --> 00:35:17,760
basically a basic defense to um prevent

864
00:35:17,760 --> 00:35:20,760
the client to prevent an attacker from

865
00:35:20,760 --> 00:35:23,760
flooding the access point

866
00:35:23,760 --> 00:35:25,680
the thing is that this anti-clogging

867
00:35:25,680 --> 00:35:27,359
defense is actually very trivial to

868
00:35:27,359 --> 00:35:29,940
bypass so when the Dragon Blood attacks

869
00:35:29,940 --> 00:35:31,320
we showed that this anti-clogging

870
00:35:31,320 --> 00:35:33,540
defense is actually quite useless in

871
00:35:33,540 --> 00:35:35,940
practice so in my opinion there is

872
00:35:35,940 --> 00:35:38,700
really very little reason to implement

873
00:35:38,700 --> 00:35:42,900
this but it turns out that yeah here

874
00:35:42,900 --> 00:35:45,240
this vendor implemented this defense

875
00:35:45,240 --> 00:35:48,180
incorrectly which actually led to a more

876
00:35:48,180 --> 00:35:50,760
severe denial of service vulnerability

877
00:35:50,760 --> 00:35:53,640
so by implementing this defense which is

878
00:35:53,640 --> 00:35:55,920
in my opinion useless they actually

879
00:35:55,920 --> 00:35:57,660
caused themselves to be vulnerable to a

880
00:35:57,660 --> 00:36:00,480
much more serious vulnerability

881
00:36:00,480 --> 00:36:02,520
so I think this is also a good General

882
00:36:02,520 --> 00:36:04,800
lesson here if we think that a certain

883
00:36:04,800 --> 00:36:07,920
defense is useless then it's best just

884
00:36:07,920 --> 00:36:10,079
to not implement it because you might be

885
00:36:10,079 --> 00:36:13,400
increasing the attack surface

886
00:36:16,680 --> 00:36:18,480
okay

887
00:36:18,480 --> 00:36:21,000
we also discovered some other attacks I

888
00:36:21,000 --> 00:36:22,800
will just highlight them very briefly

889
00:36:22,800 --> 00:36:26,099
against Linux we can also even after a

890
00:36:26,099 --> 00:36:28,500
client is connected spoof plain text

891
00:36:28,500 --> 00:36:32,160
handshake messages owned by spoofing

892
00:36:32,160 --> 00:36:35,160
specially crafted handshake messages we

893
00:36:35,160 --> 00:36:36,960
can also cause Linux clients to again

894
00:36:36,960 --> 00:36:41,160
disconnect even when they're using wpa3

895
00:36:41,160 --> 00:36:43,859
under also there are also some attacks

896
00:36:43,859 --> 00:36:46,140
possible too that allow you to replay

897
00:36:46,140 --> 00:36:48,720
management frames um

898
00:36:48,720 --> 00:36:50,339
but this is that is quite a specific

899
00:36:50,339 --> 00:36:53,040
attack if you're interested to this um

900
00:36:53,040 --> 00:36:54,780
then you can read more about our

901
00:36:54,780 --> 00:36:57,420
research online

902
00:36:57,420 --> 00:37:00,240
what I instead want to focus on now is

903
00:37:00,240 --> 00:37:03,180
how we implemented these attacks on how

904
00:37:03,180 --> 00:37:05,820
we test it for them

905
00:37:05,820 --> 00:37:07,560
so

906
00:37:07,560 --> 00:37:09,420
yeah basically in our research we are

907
00:37:09,420 --> 00:37:12,000
doing a lot of Wi-Fi experiments and we

908
00:37:12,000 --> 00:37:15,000
want to make it easier to perform Wi-Fi

909
00:37:15,000 --> 00:37:17,099
experiments

910
00:37:17,099 --> 00:37:20,280
on to do this me together with some

911
00:37:20,280 --> 00:37:23,160
colleagues from Northeastern University

912
00:37:23,160 --> 00:37:26,820
we created a Wi-Fi testing framework to

913
00:37:26,820 --> 00:37:28,500
more easily perform some Wi-Fi

914
00:37:28,500 --> 00:37:30,119
experiments

915
00:37:30,119 --> 00:37:32,520
on this testing framework is built on

916
00:37:32,520 --> 00:37:35,640
top of the Linux climbing client so the

917
00:37:35,640 --> 00:37:38,220
Linux ostp client

918
00:37:38,220 --> 00:37:39,540
and

919
00:37:39,540 --> 00:37:42,060
yeah we create we created a framework on

920
00:37:42,060 --> 00:37:43,920
top of that so that we can easily

921
00:37:43,920 --> 00:37:47,280
Implement tests using python

922
00:37:47,280 --> 00:37:50,760
and what is the advantage of building a

923
00:37:50,760 --> 00:37:52,980
testing framework on top of Linux and on

924
00:37:52,980 --> 00:37:55,740
top of the open source Linux client

925
00:37:55,740 --> 00:37:57,900
well the advantage is that this allows

926
00:37:57,900 --> 00:38:01,200
us to reuse some functionality of Linux

927
00:38:01,200 --> 00:38:03,180
so for example when we are now

928
00:38:03,180 --> 00:38:06,119
implementing some Wi-Fi test cases we

929
00:38:06,119 --> 00:38:10,619
can reuse functionality of Linux to

930
00:38:10,619 --> 00:38:12,720
scan for example for the network that we

931
00:38:12,720 --> 00:38:14,940
are trying to Target and when we are

932
00:38:14,940 --> 00:38:17,460
targeting a client we can very easily

933
00:38:17,460 --> 00:38:18,900
set up

934
00:38:18,900 --> 00:38:21,359
in a sense our own access point which

935
00:38:21,359 --> 00:38:23,160
will transmit beacons

936
00:38:23,160 --> 00:38:25,020
so normally you would have to manually

937
00:38:25,020 --> 00:38:27,300
Implement code to scan for a network or

938
00:38:27,300 --> 00:38:30,119
to periodically broadcast beacons but

939
00:38:30,119 --> 00:38:32,520
yeah the Linux already has that code so

940
00:38:32,520 --> 00:38:35,359
why not reuse it

941
00:38:35,520 --> 00:38:40,220
some other advantages is that

942
00:38:40,500 --> 00:38:41,820
a lot of

943
00:38:41,820 --> 00:38:45,079
Wi-Fi tools

944
00:38:45,180 --> 00:38:48,000
when they inject a Wi-Fi frame

945
00:38:48,000 --> 00:38:50,820
this Frame will not be retransmitted if

946
00:38:50,820 --> 00:38:54,380
it is not acknowledged by the receiver

947
00:38:55,380 --> 00:38:57,660
but by using our framework if you send

948
00:38:57,660 --> 00:39:00,000
the frame to a victim and if this victim

949
00:39:00,000 --> 00:39:01,980
then doesn't send an acknowledgment in

950
00:39:01,980 --> 00:39:03,540
response

951
00:39:03,540 --> 00:39:05,280
by using the framework it will actually

952
00:39:05,280 --> 00:39:07,260
automatically retransmit that frame so

953
00:39:07,260 --> 00:39:10,079
your attacks are more reliable

954
00:39:10,079 --> 00:39:13,320
another important aspect is that

955
00:39:13,320 --> 00:39:15,720
yeah these days we all use a lot of

956
00:39:15,720 --> 00:39:18,540
smartphones on mobile devices on these

957
00:39:18,540 --> 00:39:21,000
devices often go into sleep mode and

958
00:39:21,000 --> 00:39:23,460
that is often also an obstacle when

959
00:39:23,460 --> 00:39:26,040
testing a device because when you are

960
00:39:26,040 --> 00:39:27,780
performing when you are injecting a

961
00:39:27,780 --> 00:39:29,099
Wi-Fi frame

962
00:39:29,099 --> 00:39:31,260
it might actually be that the moment you

963
00:39:31,260 --> 00:39:33,839
send it your smartphone is asleep

964
00:39:33,839 --> 00:39:36,720
so you might then be thinking okay my

965
00:39:36,720 --> 00:39:39,000
phone isn't crashing or whatever the

966
00:39:39,000 --> 00:39:41,160
attack doesn't work but actually you

967
00:39:41,160 --> 00:39:43,020
just sent a frame at the wrong time and

968
00:39:43,020 --> 00:39:45,599
your smartphone was asleep

969
00:39:45,599 --> 00:39:47,880
with our framework and basically again

970
00:39:47,880 --> 00:39:49,740
because we reuse the functionality of

971
00:39:49,740 --> 00:39:52,680
Linux our injected frames will be queued

972
00:39:52,680 --> 00:39:54,900
until the device actually wakes up so

973
00:39:54,900 --> 00:39:57,839
you are have a bigger guarantee that the

974
00:39:57,839 --> 00:39:59,820
frames will actually be received when

975
00:39:59,820 --> 00:40:02,520
you are testing a device

976
00:40:02,520 --> 00:40:04,920
and

977
00:40:04,920 --> 00:40:09,240
let me give you a quick feeling of how

978
00:40:09,240 --> 00:40:11,640
these tests are implemented so yeah

979
00:40:11,640 --> 00:40:13,140
obviously you don't need to be able to

980
00:40:13,140 --> 00:40:14,280
read this

981
00:40:14,280 --> 00:40:16,800
but I just want to highlight

982
00:40:16,800 --> 00:40:19,560
how do you how you how you use this

983
00:40:19,560 --> 00:40:23,220
framework and the idea is that you first

984
00:40:23,220 --> 00:40:26,099
Define some triggers when a certain

985
00:40:26,099 --> 00:40:29,220
action should happen so for example with

986
00:40:29,220 --> 00:40:31,260
our framework you can say when you are

987
00:40:31,260 --> 00:40:34,380
connected to a network then you inject a

988
00:40:34,380 --> 00:40:36,359
Wi-Fi frame

989
00:40:36,359 --> 00:40:40,440
and you can further tweak these Triggers

990
00:40:40,440 --> 00:40:43,740
on these actions and you can also write

991
00:40:43,740 --> 00:40:46,980
some custom functions that have

992
00:40:46,980 --> 00:40:49,619
that can be executed but basically the

993
00:40:49,619 --> 00:40:52,320
idea behind our framework is that yeah

994
00:40:52,320 --> 00:40:55,079
you have some triggers available and in

995
00:40:55,079 --> 00:40:56,700
response to these triggers you can

996
00:40:56,700 --> 00:40:59,160
program a certain action that should

997
00:40:59,160 --> 00:41:01,099
happen

998
00:41:01,099 --> 00:41:04,560
arms our framework also has a library

999
00:41:04,560 --> 00:41:06,780
with some common Wi-Fi functionality

1000
00:41:06,780 --> 00:41:10,020
like decrypting frames we reuse the

1001
00:41:10,020 --> 00:41:12,300
scapey library of python in case you are

1002
00:41:12,300 --> 00:41:14,339
familiar with that

1003
00:41:14,339 --> 00:41:16,079
another thing that I want to highlight

1004
00:41:16,079 --> 00:41:18,000
is that

1005
00:41:18,000 --> 00:41:21,359
to perform basic Wi-Fi experiments

1006
00:41:21,359 --> 00:41:23,940
and also to use our framework you don't

1007
00:41:23,940 --> 00:41:26,220
actually need a physical Wi-Fi

1008
00:41:26,220 --> 00:41:28,980
network card so that might be useful if

1009
00:41:28,980 --> 00:41:30,780
you're ever trying to experiment with

1010
00:41:30,780 --> 00:41:34,260
Wi-Fi Linux has a special driver called

1011
00:41:34,260 --> 00:41:36,839
Mac 802.11

1012
00:41:36,839 --> 00:41:40,140
Hardware simulator where basically you

1013
00:41:40,140 --> 00:41:42,780
can simulate a Wi-Fi network card

1014
00:41:42,780 --> 00:41:45,480
meaning that you can perform experiments

1015
00:41:45,480 --> 00:41:47,700
on Linux and a virtual machine without

1016
00:41:47,700 --> 00:41:50,280
actually needing equipment and that's my

1017
00:41:50,280 --> 00:41:52,560
opinion very useful to start playing

1018
00:41:52,560 --> 00:41:55,740
around with Wi-Fi security on Wi-Fi in

1019
00:41:55,740 --> 00:41:57,919
general

1020
00:42:00,420 --> 00:42:01,440
um that's

1021
00:42:01,440 --> 00:42:05,240
less important okay

1022
00:42:06,180 --> 00:42:07,740
the last thing that I want to mention

1023
00:42:07,740 --> 00:42:10,400
here about this framework is that

1024
00:42:10,400 --> 00:42:13,200
originally we implemented this framework

1025
00:42:13,200 --> 00:42:15,599
really as a testing on auditing

1026
00:42:15,599 --> 00:42:19,680
framework to test your own devices which

1027
00:42:19,680 --> 00:42:21,420
basically means that

1028
00:42:21,420 --> 00:42:24,180
to execute these test cases you need the

1029
00:42:24,180 --> 00:42:25,920
password of the network

1030
00:42:25,920 --> 00:42:27,780
for example if there's a trigger that

1031
00:42:27,780 --> 00:42:29,760
says once you have successfully

1032
00:42:29,760 --> 00:42:32,040
connected to the network then injects on

1033
00:42:32,040 --> 00:42:34,200
frame well you can only successfully

1034
00:42:34,200 --> 00:42:35,760
connect to the network if you have the

1035
00:42:35,760 --> 00:42:37,260
password

1036
00:42:37,260 --> 00:42:39,540
so our original goal of this network was

1037
00:42:39,540 --> 00:42:42,359
really to act as a testing framework

1038
00:42:42,359 --> 00:42:45,839
however you can fairly easily convert

1039
00:42:45,839 --> 00:42:48,480
this to what I would call an exploit

1040
00:42:48,480 --> 00:42:51,240
framework by using triggers that are

1041
00:42:51,240 --> 00:42:52,200
possible

1042
00:42:52,200 --> 00:42:54,960
even when you don't know the password of

1043
00:42:54,960 --> 00:42:58,020
the network so instead of saying once

1044
00:42:58,020 --> 00:42:59,760
you've connected to a network inject the

1045
00:42:59,760 --> 00:43:01,680
malicious malicious frame you can

1046
00:43:01,680 --> 00:43:03,839
instead say okay once you detected a

1047
00:43:03,839 --> 00:43:06,420
network then inject the frame so in a

1048
00:43:06,420 --> 00:43:08,099
sense this testing framework can be

1049
00:43:08,099 --> 00:43:09,960
easily turned into an exploitation

1050
00:43:09,960 --> 00:43:11,400
framework

1051
00:43:11,400 --> 00:43:13,440
and yeah we have the link to the

1052
00:43:13,440 --> 00:43:15,960
framework here at the bottom the

1053
00:43:15,960 --> 00:43:18,359
conclusion slide will have this link

1054
00:43:18,359 --> 00:43:20,819
again in case you want to take a picture

1055
00:43:20,819 --> 00:43:23,520
of it but basically we now added some

1056
00:43:23,520 --> 00:43:26,460
support to also yeah not just test

1057
00:43:26,460 --> 00:43:31,200
devices but to also attack Networks

1058
00:43:32,819 --> 00:43:34,680
okay so now in the

1059
00:43:34,680 --> 00:43:36,839
last part of the talk so we now covered

1060
00:43:36,839 --> 00:43:38,940
management frame protection and what you

1061
00:43:38,940 --> 00:43:41,640
can all do with that

1062
00:43:41,640 --> 00:43:44,339
this last part of the talk I want to

1063
00:43:44,339 --> 00:43:47,220
focus a bit on this new hotspot protocol

1064
00:43:47,220 --> 00:43:50,400
to secure Wi-Fi hotspots

1065
00:43:50,400 --> 00:43:52,500
and this is a sense

1066
00:43:52,500 --> 00:43:54,420
yeah you you could say it's an optional

1067
00:43:54,420 --> 00:43:57,720
part of wpa3 in a way

1068
00:43:57,720 --> 00:43:59,640
so what is the goal of this new protocol

1069
00:43:59,640 --> 00:44:02,880
this new SAE PK protocol

1070
00:44:02,880 --> 00:44:05,700
the idea is that we want to authenticate

1071
00:44:05,700 --> 00:44:08,940
a hotspot using only a password

1072
00:44:08,940 --> 00:44:11,460
but prevent an adversary from using this

1073
00:44:11,460 --> 00:44:13,800
password to clone the network

1074
00:44:13,800 --> 00:44:16,020
because with WPA2 if I know the password

1075
00:44:16,020 --> 00:44:18,119
of the network I can simply plug in my

1076
00:44:18,119 --> 00:44:20,099
own router fill in the same network name

1077
00:44:20,099 --> 00:44:22,079
and password and then people would

1078
00:44:22,079 --> 00:44:23,760
connect to it

1079
00:44:23,760 --> 00:44:26,040
but we want to prevent this we still

1080
00:44:26,040 --> 00:44:27,839
want to be able to hand out a password

1081
00:44:27,839 --> 00:44:29,760
to users

1082
00:44:29,760 --> 00:44:32,640
but only with this password an attacker

1083
00:44:32,640 --> 00:44:34,200
shouldn't be able to set up a clone of

1084
00:44:34,200 --> 00:44:36,480
the network

1085
00:44:36,480 --> 00:44:38,760
and how is this accomplished

1086
00:44:38,760 --> 00:44:43,280
well to give a high level overview

1087
00:44:43,440 --> 00:44:46,800
the network so the access point

1088
00:44:46,800 --> 00:44:48,359
will generate

1089
00:44:48,359 --> 00:44:52,380
their own public and private key pair

1090
00:44:52,380 --> 00:44:54,480
and then the Wi-Fi password will be

1091
00:44:54,480 --> 00:44:56,640
derived from the public key

1092
00:44:56,640 --> 00:44:59,160
so the idea is that as a user you no

1093
00:44:59,160 --> 00:45:01,740
longer get to pick your own password of

1094
00:45:01,740 --> 00:45:04,020
the network so you can no longer pick a

1095
00:45:04,020 --> 00:45:05,760
list of words or some random characters

1096
00:45:05,760 --> 00:45:08,220
that's no longer the case the password

1097
00:45:08,220 --> 00:45:12,119
will now be automatically generated

1098
00:45:12,119 --> 00:45:15,000
on the idea is that

1099
00:45:15,000 --> 00:45:16,440
when a client

1100
00:45:16,440 --> 00:45:19,619
now connects to the access point

1101
00:45:19,619 --> 00:45:22,319
the access point will send its public

1102
00:45:22,319 --> 00:45:24,180
key to the client

1103
00:45:24,180 --> 00:45:26,339
and the client will then be able to use

1104
00:45:26,339 --> 00:45:28,619
this generated password

1105
00:45:28,619 --> 00:45:30,839
to verify the authenticity of this

1106
00:45:30,839 --> 00:45:33,660
public key that it received

1107
00:45:33,660 --> 00:45:37,380
so basically this Wi-Fi password in the

1108
00:45:37,380 --> 00:45:39,780
sense acts as a signature of the public

1109
00:45:39,780 --> 00:45:43,200
key that the client can use to to verify

1110
00:45:43,200 --> 00:45:44,940
the authenticity of the public key that

1111
00:45:44,940 --> 00:45:47,220
it receives

1112
00:45:47,220 --> 00:45:49,079
so basically this is what is mentioned

1113
00:45:49,079 --> 00:45:51,000
here when a client connects to the

1114
00:45:51,000 --> 00:45:52,680
network the network will send the public

1115
00:45:52,680 --> 00:45:55,020
key to the client

1116
00:45:55,020 --> 00:45:57,240
the client uses this automatically

1117
00:45:57,240 --> 00:45:59,700
generated password to verify the

1118
00:45:59,700 --> 00:46:01,800
authenticity of the public key

1119
00:46:01,800 --> 00:46:03,839
and then the access point will prove

1120
00:46:03,839 --> 00:46:06,359
that it possesses the private key that

1121
00:46:06,359 --> 00:46:09,680
corresponds to that public key

1122
00:46:11,760 --> 00:46:13,140
so

1123
00:46:13,140 --> 00:46:15,960
a takeaway message here is that the

1124
00:46:15,960 --> 00:46:17,760
password forms a signature of the public

1125
00:46:17,760 --> 00:46:19,140
key

1126
00:46:19,140 --> 00:46:21,119
so that's the one thing I want you to

1127
00:46:21,119 --> 00:46:25,020
remember if you ever see this as a e p k

1128
00:46:25,020 --> 00:46:27,660
protocol again here the Wi-Fi password

1129
00:46:27,660 --> 00:46:30,540
acts as a signature to establish trust

1130
00:46:30,540 --> 00:46:32,520
in a public key

1131
00:46:32,520 --> 00:46:35,099
now how is this accomplished in practice

1132
00:46:35,099 --> 00:46:38,760
so how is this password generated

1133
00:46:38,760 --> 00:46:41,460
well this password is generated by

1134
00:46:41,460 --> 00:46:45,240
taking the hash of the SSID so the name

1135
00:46:45,240 --> 00:46:48,000
of the Wi-Fi network

1136
00:46:48,000 --> 00:46:52,200
and also of the public key of course

1137
00:46:52,200 --> 00:46:54,180
which in this case is a point of the on

1138
00:46:54,180 --> 00:46:55,920
the elliptic curve but okay that's less

1139
00:46:55,920 --> 00:46:57,359
important for us

1140
00:46:57,359 --> 00:47:00,480
and then we also have this third well

1141
00:47:00,480 --> 00:47:03,480
this second parameter here in the middle

1142
00:47:03,480 --> 00:47:07,440
what do we mean with the modifier M here

1143
00:47:07,440 --> 00:47:09,359
well this is actually fairly simple it's

1144
00:47:09,359 --> 00:47:12,180
simply a number that starts from a

1145
00:47:12,180 --> 00:47:13,440
random value

1146
00:47:13,440 --> 00:47:15,960
on this then incremented by one

1147
00:47:15,960 --> 00:47:18,119
until the output of the hash function

1148
00:47:18,119 --> 00:47:21,119
starts with a certain amount of zero

1149
00:47:21,119 --> 00:47:23,480
bytes

1150
00:47:23,760 --> 00:47:25,440
so that's what mentioned is what is

1151
00:47:25,440 --> 00:47:28,760
mentioned here basically

1152
00:47:30,720 --> 00:47:32,640
basically this can be a security

1153
00:47:32,640 --> 00:47:34,680
parameter of the network

1154
00:47:34,680 --> 00:47:37,020
because this modifier M okay it's a

1155
00:47:37,020 --> 00:47:38,940
random number it's incremented until one

1156
00:47:38,940 --> 00:47:41,579
until the hash output starts with either

1157
00:47:41,579 --> 00:47:46,040
three or five zero bytes

1158
00:47:46,260 --> 00:47:49,560
and whether you pick three or five zero

1159
00:47:49,560 --> 00:47:51,119
bytes that's an Ascent in a sense

1160
00:47:51,119 --> 00:47:53,940
decides the security of the password

1161
00:47:53,940 --> 00:47:56,400
so if you require here that the output

1162
00:47:56,400 --> 00:47:58,500
must start with five zero bytes then you

1163
00:47:58,500 --> 00:48:00,000
will end up with a more secure password

1164
00:48:00,000 --> 00:48:02,400
basically

1165
00:48:02,400 --> 00:48:05,280
now let me make this a bit more concrete

1166
00:48:05,280 --> 00:48:08,160
so let's say that we actually generate a

1167
00:48:08,160 --> 00:48:10,440
password in this way then an example

1168
00:48:10,440 --> 00:48:12,240
password will look like the following

1169
00:48:12,240 --> 00:48:14,640
sequence of letters here so the output

1170
00:48:14,640 --> 00:48:17,880
of this hash function the first leading

1171
00:48:17,880 --> 00:48:20,099
zero bytes they are removed then you

1172
00:48:20,099 --> 00:48:21,599
take a

1173
00:48:21,599 --> 00:48:24,060
some bits there are some remaining bits

1174
00:48:24,060 --> 00:48:25,440
and you convert them into a human

1175
00:48:25,440 --> 00:48:27,180
readable form

1176
00:48:27,180 --> 00:48:29,760
and the length of the password here here

1177
00:48:29,760 --> 00:48:31,440
is decided by the network as

1178
00:48:31,440 --> 00:48:33,720
administrator so if you want you can

1179
00:48:33,720 --> 00:48:36,720
also use a longer password to make the

1180
00:48:36,720 --> 00:48:41,359
protocol even more secure if you want to

1181
00:48:41,579 --> 00:48:44,880
and yeah in the weakest possible

1182
00:48:44,880 --> 00:48:47,940
configuration this this password has to

1183
00:48:47,940 --> 00:48:51,119
encode at least 52 bits of output of the

1184
00:48:51,119 --> 00:48:53,720
hash function

1185
00:48:54,480 --> 00:48:56,760
now let me try to give a bit of

1186
00:48:56,760 --> 00:49:00,900
intuition on why it's now much harder to

1187
00:49:00,900 --> 00:49:03,420
attack this protocol

1188
00:49:03,420 --> 00:49:05,400
let's say that we as an attacker now

1189
00:49:05,400 --> 00:49:07,260
know the password

1190
00:49:07,260 --> 00:49:09,720
of the Wi-Fi network so we as an

1191
00:49:09,720 --> 00:49:12,780
attacker are given this password

1192
00:49:12,780 --> 00:49:16,020
then the question is can we now set up a

1193
00:49:16,020 --> 00:49:18,839
rogue copy of that Network

1194
00:49:18,839 --> 00:49:20,880
where clients will successfully connect

1195
00:49:20,880 --> 00:49:23,339
to so the question is if we have this

1196
00:49:23,339 --> 00:49:24,480
password

1197
00:49:24,480 --> 00:49:27,780
what do we have to do in order to set up

1198
00:49:27,780 --> 00:49:30,839
a rogue clone of this network

1199
00:49:30,839 --> 00:49:32,220
well

1200
00:49:32,220 --> 00:49:34,560
what we as an attacker have to do is

1201
00:49:34,560 --> 00:49:37,260
yeah we have to find our own public and

1202
00:49:37,260 --> 00:49:40,680
private key on our own modifier values

1203
00:49:40,680 --> 00:49:43,380
or our own counter value that will

1204
00:49:43,380 --> 00:49:47,300
result in the same hash output

1205
00:49:47,640 --> 00:49:49,619
so the question here is that if you want

1206
00:49:49,619 --> 00:49:51,960
to do a naive attack we basically have

1207
00:49:51,960 --> 00:49:54,180
to find our own public and private key

1208
00:49:54,180 --> 00:49:56,760
that will result in the same password as

1209
00:49:56,760 --> 00:49:59,359
the real Network

1210
00:50:00,240 --> 00:50:03,119
so basically we have to as an attacker

1211
00:50:03,119 --> 00:50:05,160
we can generate our own public key and

1212
00:50:05,160 --> 00:50:08,339
then try a lot of modifier values so a

1213
00:50:08,339 --> 00:50:10,260
lot of counter values until we have the

1214
00:50:10,260 --> 00:50:11,880
same hash output

1215
00:50:11,880 --> 00:50:13,980
and what's the complexity of this so how

1216
00:50:13,980 --> 00:50:15,660
long does that attack take

1217
00:50:15,660 --> 00:50:16,800
well

1218
00:50:16,800 --> 00:50:18,960
and the weakest possible security

1219
00:50:18,960 --> 00:50:21,599
setting the hash output has to start

1220
00:50:21,599 --> 00:50:23,700
with three zero bytes

1221
00:50:23,700 --> 00:50:25,500
meaning we have a

1222
00:50:25,500 --> 00:50:29,160
complexity of 2 to the power 24 and then

1223
00:50:29,160 --> 00:50:31,140
the remaining bits must also equal this

1224
00:50:31,140 --> 00:50:34,260
password on the minimum password length

1225
00:50:34,260 --> 00:50:37,619
and codes at least 52 bits of this hash

1226
00:50:37,619 --> 00:50:39,119
output

1227
00:50:39,119 --> 00:50:41,220
so basically if you want to perform a

1228
00:50:41,220 --> 00:50:43,740
very naive attack you have to perform

1229
00:50:43,740 --> 00:50:47,220
almost 2 to the power 80 operations and

1230
00:50:47,220 --> 00:50:49,619
this is pretty much infeasible for an

1231
00:50:49,619 --> 00:50:51,540
ordinary user

1232
00:50:51,540 --> 00:50:54,599
and this is why it's not possible to

1233
00:50:54,599 --> 00:50:57,119
perform this attack in practice

1234
00:50:57,119 --> 00:51:01,040
so I hope that that is a bit clear

1235
00:51:01,980 --> 00:51:03,839
there is a bit of a more theoretical

1236
00:51:03,839 --> 00:51:06,599
attack against this because as an

1237
00:51:06,599 --> 00:51:08,819
attacker what we are in a sense doing is

1238
00:51:08,819 --> 00:51:12,059
we are inverting this hash function and

1239
00:51:12,059 --> 00:51:14,400
to invert a hash function

1240
00:51:14,400 --> 00:51:17,160
you could also use rainbow tables

1241
00:51:17,160 --> 00:51:20,280
so there is a bit more theoretical

1242
00:51:20,280 --> 00:51:22,440
attack where you construct can construct

1243
00:51:22,440 --> 00:51:24,960
a rainbow table for a specific network

1244
00:51:24,960 --> 00:51:27,660
name and

1245
00:51:27,660 --> 00:51:29,520
once you construct this rainbow table

1246
00:51:29,520 --> 00:51:31,619
you can then use it to attack any

1247
00:51:31,619 --> 00:51:34,740
network with a given name so for example

1248
00:51:34,740 --> 00:51:36,660
you can construct a rainbow table for

1249
00:51:36,660 --> 00:51:39,119
the network name Starbucks and then you

1250
00:51:39,119 --> 00:51:40,800
can use that table to more efficiently

1251
00:51:40,800 --> 00:51:42,540
attack all networks that are called

1252
00:51:42,540 --> 00:51:44,640
Starbucks

1253
00:51:44,640 --> 00:51:45,900
um

1254
00:51:45,900 --> 00:51:47,760
Yeah so basically the name of the

1255
00:51:47,760 --> 00:51:50,460
network acts as a seat to make these

1256
00:51:50,460 --> 00:51:53,819
rainbow table attacks uh more uh time

1257
00:51:53,819 --> 00:51:54,900
consuming

1258
00:51:54,900 --> 00:51:57,000
now these attacks are

1259
00:51:57,000 --> 00:51:59,940
still very theoretical for example a

1260
00:51:59,940 --> 00:52:01,740
rainbow table would be about 60

1261
00:52:01,740 --> 00:52:05,160
terabytes uh large and even with such a

1262
00:52:05,160 --> 00:52:08,460
large table breaking a password I mean

1263
00:52:08,460 --> 00:52:10,859
we estimate this we still still take two

1264
00:52:10,859 --> 00:52:13,260
weeks on a Amazon instance that has

1265
00:52:13,260 --> 00:52:17,040
powerful gpus so yeah this attack exists

1266
00:52:17,040 --> 00:52:21,059
in theory and practice Yeah it's maybe

1267
00:52:21,059 --> 00:52:23,220
on the verge of practicality but it's

1268
00:52:23,220 --> 00:52:26,280
definitely not a trivial attack

1269
00:52:26,280 --> 00:52:27,660
um and you can prevent this by using

1270
00:52:27,660 --> 00:52:29,220
long passwords

1271
00:52:29,220 --> 00:52:31,680
or by using the security parameter where

1272
00:52:31,680 --> 00:52:33,839
you make the hash output start with five

1273
00:52:33,839 --> 00:52:36,540
zero bytes

1274
00:52:36,540 --> 00:52:38,700
so these are this is a more theoretical

1275
00:52:38,700 --> 00:52:40,740
attack

1276
00:52:40,740 --> 00:52:42,900
what is however

1277
00:52:42,900 --> 00:52:44,760
a much easier attack against these

1278
00:52:44,760 --> 00:52:47,040
hotspot Networks

1279
00:52:47,040 --> 00:52:50,819
is to use very simple network based

1280
00:52:50,819 --> 00:52:53,160
attacks

1281
00:52:53,160 --> 00:52:56,579
because yeah the goal of SAE PK is to

1282
00:52:56,579 --> 00:52:58,859
prevent an adversary from cloning the

1283
00:52:58,859 --> 00:53:01,460
access point

1284
00:53:01,740 --> 00:53:03,599
and the reason why we want to prevent

1285
00:53:03,599 --> 00:53:05,339
this is because the adversary can

1286
00:53:05,339 --> 00:53:07,380
otherwise intercept our traffic right I

1287
00:53:07,380 --> 00:53:10,140
mean that's what we want to prevent

1288
00:53:10,140 --> 00:53:11,339
but

1289
00:53:11,339 --> 00:53:13,440
there are also other attacks that we can

1290
00:53:13,440 --> 00:53:16,440
perform to intercept the traffic of a

1291
00:53:16,440 --> 00:53:19,140
victim in a Wi-Fi network

1292
00:53:19,140 --> 00:53:20,460
um

1293
00:53:20,460 --> 00:53:22,500
what attack is that well

1294
00:53:22,500 --> 00:53:25,260
we can just perform attacks at the

1295
00:53:25,260 --> 00:53:27,839
network layer because this is a hotspot

1296
00:53:27,839 --> 00:53:30,540
network network meaning we as an

1297
00:53:30,540 --> 00:53:32,819
attacker can connect to the hotspot and

1298
00:53:32,819 --> 00:53:35,040
then use typical network-based attacks

1299
00:53:35,040 --> 00:53:37,500
such as ARP poisoning

1300
00:53:37,500 --> 00:53:38,280
um

1301
00:53:38,280 --> 00:53:40,859
to redirect the traffic of a victim

1302
00:53:40,859 --> 00:53:43,440
towards ourselves

1303
00:53:43,440 --> 00:53:46,200
on the reason why is because the saepk

1304
00:53:46,200 --> 00:53:47,400
standard

1305
00:53:47,400 --> 00:53:49,859
doesn't prohibit clients to client

1306
00:53:49,859 --> 00:53:51,660
traffic

1307
00:53:51,660 --> 00:53:55,020
so so if you implement this protocol

1308
00:53:55,020 --> 00:53:56,940
according to the standard then clients

1309
00:53:56,940 --> 00:53:58,980
are still able to commute communicate

1310
00:53:58,980 --> 00:54:01,440
with each other directly meaning attacks

1311
00:54:01,440 --> 00:54:04,680
like our poisoning is still possible

1312
00:54:04,680 --> 00:54:07,319
so I assume our poisoning is well known

1313
00:54:07,319 --> 00:54:10,319
but to give a very quick background

1314
00:54:10,319 --> 00:54:13,020
about it basically we as an attacker can

1315
00:54:13,020 --> 00:54:15,300
connect to the same network

1316
00:54:15,300 --> 00:54:17,640
um we can basically tell the clients hey

1317
00:54:17,640 --> 00:54:20,280
I'm the default gateway now send all the

1318
00:54:20,280 --> 00:54:23,040
traffic towards the internet to me then

1319
00:54:23,040 --> 00:54:24,960
the adversary will forward this to the

1320
00:54:24,960 --> 00:54:27,119
real Gateway so to the

1321
00:54:27,119 --> 00:54:29,880
to the router and we can do the same to

1322
00:54:29,880 --> 00:54:32,400
the Gateway we can tell the Gateway hey

1323
00:54:32,400 --> 00:54:34,559
I actually have the IP address of the

1324
00:54:34,559 --> 00:54:36,780
client meaning the Gateway will send the

1325
00:54:36,780 --> 00:54:38,700
victim's traffic to the attacker and

1326
00:54:38,700 --> 00:54:40,200
then the attacker can forward it to the

1327
00:54:40,200 --> 00:54:42,119
client so yeah this is a very

1328
00:54:42,119 --> 00:54:43,980
straightforward attack

1329
00:54:43,980 --> 00:54:45,420
um if you don't know about this I

1330
00:54:45,420 --> 00:54:46,500
recommend that you read it online

1331
00:54:46,500 --> 00:54:48,480
because it's also very easy to perform

1332
00:54:48,480 --> 00:54:51,020
this attack

1333
00:54:52,980 --> 00:54:54,720
a second vulnerability that is still

1334
00:54:54,720 --> 00:54:57,119
possible in these hotspot networks and

1335
00:54:57,119 --> 00:54:59,220
this is the the last thing I want to

1336
00:54:59,220 --> 00:55:00,839
cover so we still have time for some

1337
00:55:00,839 --> 00:55:01,859
questions

1338
00:55:01,859 --> 00:55:04,680
is that

1339
00:55:04,680 --> 00:55:07,559
in a Wi-Fi network

1340
00:55:07,559 --> 00:55:10,980
we also have broadcast traffic so

1341
00:55:10,980 --> 00:55:13,500
broadcast on multi-cost packets

1342
00:55:13,500 --> 00:55:14,760
and

1343
00:55:14,760 --> 00:55:16,619
the way that these are protected in a

1344
00:55:16,619 --> 00:55:19,559
Wi-Fi network is that there is basically

1345
00:55:19,559 --> 00:55:23,220
one symmetric key that all clients

1346
00:55:23,220 --> 00:55:25,619
possess on that key will be used to

1347
00:55:25,619 --> 00:55:27,599
decrypt broadcast traffic

1348
00:55:27,599 --> 00:55:30,540
and yeah because every client has this

1349
00:55:30,540 --> 00:55:33,180
key every client can also then abuse

1350
00:55:33,180 --> 00:55:35,520
this key to spoof broadcast on

1351
00:55:35,520 --> 00:55:36,960
multi-cost traffic

1352
00:55:36,960 --> 00:55:38,520
so

1353
00:55:38,520 --> 00:55:41,460
basically in a hotspot broadcast traffic

1354
00:55:41,460 --> 00:55:43,680
is not properly protected on an

1355
00:55:43,680 --> 00:55:45,660
adversary can also spoof broadcast

1356
00:55:45,660 --> 00:55:47,220
traffic

1357
00:55:47,220 --> 00:55:50,160
and in fact an adversary can even spoof

1358
00:55:50,160 --> 00:55:53,700
unicast IP packets in a broadcast Wi-Fi

1359
00:55:53,700 --> 00:55:57,480
frame so we tested the following devices

1360
00:55:57,480 --> 00:56:00,839
here and against these devices we can

1361
00:56:00,839 --> 00:56:04,680
put a plane a unicast IP packet

1362
00:56:04,680 --> 00:56:08,660
and a broadcast Wi-Fi frame

1363
00:56:09,359 --> 00:56:12,900
so the summary there is

1364
00:56:12,900 --> 00:56:15,900
we can abuse this shared

1365
00:56:15,900 --> 00:56:18,480
key that is used to protect broadcast

1366
00:56:18,480 --> 00:56:19,800
traffic

1367
00:56:19,800 --> 00:56:22,559
to inject plain text to inject unicast

1368
00:56:22,559 --> 00:56:26,720
IP packets to any client in the network

1369
00:56:31,020 --> 00:56:32,940
Okay so

1370
00:56:32,940 --> 00:56:35,099
we now saw a lot of

1371
00:56:35,099 --> 00:56:37,740
possible attacks on the last thing I

1372
00:56:37,740 --> 00:56:39,960
want to do is to give a overview of the

1373
00:56:39,960 --> 00:56:42,059
framework that we made so if you scan

1374
00:56:42,059 --> 00:56:43,680
the following QR code you will have a

1375
00:56:43,680 --> 00:56:47,280
link to our framework on GitHub and some

1376
00:56:47,280 --> 00:56:48,839
of the attacks that we discussed today

1377
00:56:48,839 --> 00:56:51,960
are available in this framework along

1378
00:56:51,960 --> 00:56:53,940
with some other vulnerabilities that

1379
00:56:53,940 --> 00:56:56,220
some other people discovered so if you

1380
00:56:56,220 --> 00:56:57,720
want to perform some of these attacks

1381
00:56:57,720 --> 00:57:02,579
you can uh visit our GitHub page

1382
00:57:02,579 --> 00:57:04,800
conclusion is that wpa3 is still

1383
00:57:04,800 --> 00:57:06,660
affected by disconnection attacks

1384
00:57:06,660 --> 00:57:09,359
meaning even when using wpa3 you can

1385
00:57:09,359 --> 00:57:12,660
disconnect the client from the network

1386
00:57:12,660 --> 00:57:15,059
the second thing to remember is in this

1387
00:57:15,059 --> 00:57:18,059
special Hardware hotspot networks you

1388
00:57:18,059 --> 00:57:20,400
can still intercept traffic of a victim

1389
00:57:20,400 --> 00:57:23,579
by using network based attacks like ARP

1390
00:57:23,579 --> 00:57:25,140
poisoning

1391
00:57:25,140 --> 00:57:27,180
oh with that I would like to thank you

1392
00:57:27,180 --> 00:57:28,680
for your attention if there are any

1393
00:57:28,680 --> 00:57:32,110
questions uh feel free to ask them

1394
00:57:32,110 --> 00:57:35,700
[Applause]

1395
00:57:35,700 --> 00:57:37,680
thank you mithi yeah I think there are a

1396
00:57:37,680 --> 00:57:39,660
few questions the first one is about

1397
00:57:39,660 --> 00:57:42,119
side Channel attacks could you describe

1398
00:57:42,119 --> 00:57:44,040
a general methodology and the tools

1399
00:57:44,040 --> 00:57:46,079
required and how to discover potential

1400
00:57:46,079 --> 00:57:48,540
vulnerabilities

1401
00:57:48,540 --> 00:57:50,280
yeah so that's a good question

1402
00:57:50,280 --> 00:57:52,020
um

1403
00:57:52,020 --> 00:57:53,940
I know in a lot of previous research

1404
00:57:53,940 --> 00:57:56,520
people discovered these uh side Channel

1405
00:57:56,520 --> 00:57:59,160
attacks manually so a lot of the new

1406
00:57:59,160 --> 00:58:01,079
side Channel attacks are discovered

1407
00:58:01,079 --> 00:58:04,500
manually there are some research tools

1408
00:58:04,500 --> 00:58:07,400
that allow you to automatically do this

1409
00:58:07,400 --> 00:58:10,440
where you can have two runs of a program

1410
00:58:10,440 --> 00:58:11,880
and then see whether different

1411
00:58:11,880 --> 00:58:14,220
instructions are executed in those two

1412
00:58:14,220 --> 00:58:15,839
runs

1413
00:58:15,839 --> 00:58:20,280
those are used usually research tools

1414
00:58:20,280 --> 00:58:22,140
I haven't used them myself but they

1415
00:58:22,140 --> 00:58:23,880
exist but the summary is usually people

1416
00:58:23,880 --> 00:58:25,619
discover this manually

1417
00:58:25,619 --> 00:58:28,079
all right uh did a person ask the

1418
00:58:28,079 --> 00:58:31,140
question is the person here

1419
00:58:31,140 --> 00:58:33,540
nope okay

1420
00:58:33,540 --> 00:58:35,520
um second question can compromise the

1421
00:58:35,520 --> 00:58:38,099
iot devices which are connected to wpa3

1422
00:58:38,099 --> 00:58:40,020
access points perform the attacks

1423
00:58:40,020 --> 00:58:41,760
mentioned earlier on which is the

1424
00:58:41,760 --> 00:58:44,579
draining of batteries of the router who

1425
00:58:44,579 --> 00:58:47,339
have enabled Beacon protection is there

1426
00:58:47,339 --> 00:58:50,640
a mitigation against such attacks

1427
00:58:50,640 --> 00:58:52,819
foreign

1428
00:58:52,980 --> 00:58:55,020
so I think if you have Beacon protection

1429
00:58:55,020 --> 00:58:58,020
enabled then

1430
00:58:58,020 --> 00:58:59,940
these battery draining attacks are to

1431
00:58:59,940 --> 00:59:01,380
the best of my knowledge no longer

1432
00:59:01,380 --> 00:59:02,819
possible

1433
00:59:02,819 --> 00:59:03,720
um

1434
00:59:03,720 --> 00:59:05,940
yeah protecting against all denial of

1435
00:59:05,940 --> 00:59:08,579
service attacks is generally hard but at

1436
00:59:08,579 --> 00:59:10,020
least these easy denial of service

1437
00:59:10,020 --> 00:59:11,579
attacks that are

1438
00:59:11,579 --> 00:59:14,280
that we did by spoofing the beacons they

1439
00:59:14,280 --> 00:59:16,380
would no longer be possible so I would

1440
00:59:16,380 --> 00:59:18,359
say that the message there is yes enable

1441
00:59:18,359 --> 00:59:20,220
Beacon protection because that prevents

1442
00:59:20,220 --> 00:59:21,839
these attacks

1443
00:59:21,839 --> 00:59:23,940
all right thanks

1444
00:59:23,940 --> 00:59:25,740
um one just came in I guess uh does the

1445
00:59:25,740 --> 00:59:28,319
group key attack apply if client client

1446
00:59:28,319 --> 00:59:31,260
communication is disabled

1447
00:59:31,260 --> 00:59:33,059
that's a good question

1448
00:59:33,059 --> 00:59:35,059
um

1449
00:59:35,339 --> 00:59:37,740
I think it depends how client to client

1450
00:59:37,740 --> 00:59:41,118
communication is disabled

1451
00:59:42,839 --> 00:59:44,460
so it depends how a vendor implement

1452
00:59:44,460 --> 00:59:46,740
this sometimes if you select a switch to

1453
00:59:46,740 --> 00:59:48,599
disable client to client communication

1454
00:59:48,599 --> 00:59:51,059
it will really prevent clients from

1455
00:59:51,059 --> 00:59:54,839
sending data to each other ones also

1456
00:59:54,839 --> 00:59:56,900
um

1457
00:59:56,940 --> 00:59:59,819
yeah prohibits broadcast traffic so you

1458
00:59:59,819 --> 01:00:01,440
can no longer perform

1459
01:00:01,440 --> 01:00:04,500
so you can no longer abuse the group key

1460
01:00:04,500 --> 01:00:07,680
but this depends a bit on the device

1461
01:00:07,680 --> 01:00:09,059
I think

1462
01:00:09,059 --> 01:00:11,099
in general

1463
01:00:11,099 --> 01:00:11,880
um

1464
01:00:11,880 --> 01:00:14,040
is that if you prohibit client to client

1465
01:00:14,040 --> 01:00:15,480
traffic

1466
01:00:15,480 --> 01:00:18,119
I can imagine in several cases and maybe

1467
01:00:18,119 --> 01:00:20,520
many cases abusing the group key is

1468
01:00:20,520 --> 01:00:22,680
probably still possible so it's best to

1469
01:00:22,680 --> 01:00:25,440
make sure that you disable both client

1470
01:00:25,440 --> 01:00:27,299
to client traffic aren't you make sure

1471
01:00:27,299 --> 01:00:30,660
that abuse of the group key is prevented

1472
01:00:30,660 --> 01:00:31,200
um

1473
01:00:31,200 --> 01:00:32,940
and if you want more information on this

1474
01:00:32,940 --> 01:00:35,040
there's also a standard called pass

1475
01:00:35,040 --> 01:00:37,140
point that goes into bit this in a bit

1476
01:00:37,140 --> 01:00:38,520
more detail

1477
01:00:38,520 --> 01:00:40,559
all right thank you is the person who

1478
01:00:40,559 --> 01:00:42,240
asked this question here

1479
01:00:42,240 --> 01:00:44,339
nope all right

1480
01:00:44,339 --> 01:00:45,780
um if there's nothing else

1481
01:00:45,780 --> 01:00:48,900
oh no there is one more what about more

1482
01:00:48,900 --> 01:00:51,720
modern Android version devices unicast

1483
01:00:51,720 --> 01:00:54,000
packer in broadcast frame did you

1484
01:00:54,000 --> 01:00:55,680
examine why Pixel phone was not

1485
01:00:55,680 --> 01:00:59,400
vulnerable but modern Linux is

1486
01:00:59,400 --> 01:01:03,480
so we didn't confirm this in detail

1487
01:01:03,480 --> 01:01:06,299
um but I do have a hunch my hunch is

1488
01:01:06,299 --> 01:01:07,260
that

1489
01:01:07,260 --> 01:01:10,020
the Android device that we tested tested

1490
01:01:10,020 --> 01:01:12,299
so the pixel if I recall correctly the

1491
01:01:12,299 --> 01:01:14,400
pixel 4 XL

1492
01:01:14,400 --> 01:01:16,500
I think it's because it's using a custom

1493
01:01:16,500 --> 01:01:18,839
Wi-Fi driver on top of the Linux kernel

1494
01:01:18,839 --> 01:01:21,359
that is somehow blocking this with the

1495
01:01:21,359 --> 01:01:23,640
Linux kernel itself

1496
01:01:23,640 --> 01:01:26,400
um allows unicast packets in broadcast

1497
01:01:26,400 --> 01:01:30,180
Wi-Fi frames there is a kernel option to

1498
01:01:30,180 --> 01:01:33,540
block unicast IP packets in group Wi-Fi

1499
01:01:33,540 --> 01:01:35,640
frames but by default it's not enabled

1500
01:01:35,640 --> 01:01:37,380
for some reason

1501
01:01:37,380 --> 01:01:39,299
so yeah I think it's because on Android

1502
01:01:39,299 --> 01:01:41,220
the driver

1503
01:01:41,220 --> 01:01:43,799
maybe of broadcom or whatever vendor on

1504
01:01:43,799 --> 01:01:45,240
top of the Linux kernel is somehow

1505
01:01:45,240 --> 01:01:47,880
preventing this that's my hunch

1506
01:01:47,880 --> 01:01:50,040
all right thank you for the question is

1507
01:01:50,040 --> 01:01:51,420
there any more

1508
01:01:51,420 --> 01:01:52,440
no

1509
01:01:52,440 --> 01:01:57,020
all right thanks again uh Matty

