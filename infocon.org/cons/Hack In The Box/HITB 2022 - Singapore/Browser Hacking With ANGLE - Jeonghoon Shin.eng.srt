1
00:00:05,819 --> 00:00:07,220
mm-hmm

2
00:00:07,220 --> 00:00:11,760
hello uh good afternoon guys uh thank

3
00:00:11,760 --> 00:00:15,299
you for being here I'm changing from

4
00:00:15,299 --> 00:00:18,960
South Korea today I'm talking about the

5
00:00:18,960 --> 00:00:21,359
Journey of browser hacking with anger

6
00:00:21,359 --> 00:00:23,699
but uh

7
00:00:23,699 --> 00:00:26,760
before we start are let me tell you one

8
00:00:26,760 --> 00:00:28,160
of my concerns

9
00:00:28,160 --> 00:00:31,859
that is I can't speak English very well

10
00:00:31,859 --> 00:00:33,780
and

11
00:00:33,780 --> 00:00:36,320
myself

12
00:00:39,180 --> 00:00:42,180
okay

13
00:00:42,300 --> 00:00:43,940
sorry

14
00:00:43,940 --> 00:00:47,640
if if I can make eye contact with you

15
00:00:47,640 --> 00:00:52,559
guys uh because uh I'm reading my script

16
00:00:52,559 --> 00:00:56,039
it is not because I don't like you

17
00:00:56,039 --> 00:00:59,640
please please be kind to me so let me

18
00:00:59,640 --> 00:01:02,360
introduce myself

19
00:01:03,000 --> 00:01:07,400
so I'm working on theory for five years

20
00:01:07,400 --> 00:01:10,619
also my position is security researcher

21
00:01:10,619 --> 00:01:13,979
and I usually focusing on browser and

22
00:01:13,979 --> 00:01:16,860
color researching also I mentor of the

23
00:01:16,860 --> 00:01:20,939
best of the best program called pob pob

24
00:01:20,939 --> 00:01:24,299
is a cyber security education program in

25
00:01:24,299 --> 00:01:27,060
South Korea it has been operating for 11

26
00:01:27,060 --> 00:01:30,360
years and has educating about 1400

27
00:01:30,360 --> 00:01:33,360
students

28
00:01:33,619 --> 00:01:37,380
in competitions like Defcon you can see

29
00:01:37,380 --> 00:01:39,840
there are many teams that below are EOS

30
00:01:39,840 --> 00:01:42,299
students belong to

31
00:01:42,299 --> 00:01:45,659
uh also I have traveled to some

32
00:01:45,659 --> 00:01:47,759
countries around the world country

33
00:01:47,759 --> 00:01:51,479
conference speaking uh those are those

34
00:01:51,479 --> 00:01:52,439
are

35
00:01:52,439 --> 00:01:55,140
that I talked about before the copy the

36
00:01:55,140 --> 00:01:56,100
issue

37
00:01:56,100 --> 00:01:59,040
um that copies should have been resolved

38
00:01:59,040 --> 00:02:01,320
yet but this time Singapore will be

39
00:02:01,320 --> 00:02:04,320
added to this list

40
00:02:04,320 --> 00:02:08,580
so people restart uh I share what I got

41
00:02:08,580 --> 00:02:11,340
from anger Journey this blog list is

42
00:02:11,340 --> 00:02:13,319
what I report to Chrome

43
00:02:13,319 --> 00:02:16,860
I had a lot of good experience with the

44
00:02:16,860 --> 00:02:18,720
Chromebook bounty

45
00:02:18,720 --> 00:02:21,599
if you think your bug is not exploitable

46
00:02:21,599 --> 00:02:24,599
to report it to a chromium ball Bunch

47
00:02:24,599 --> 00:02:26,899
problem

48
00:02:27,000 --> 00:02:28,560
and

49
00:02:28,560 --> 00:02:32,220
this list is about I reported to GDI and

50
00:02:32,220 --> 00:02:35,400
apple the first few are reported through

51
00:02:35,400 --> 00:02:38,940
July and why not one was reputed through

52
00:02:38,940 --> 00:02:39,780
Apple

53
00:02:39,780 --> 00:02:42,959
those are the those are the rewards I

54
00:02:42,959 --> 00:02:46,200
got from Angry for about one year

55
00:02:46,200 --> 00:02:49,500
so now let's get started begin with

56
00:02:49,500 --> 00:02:51,540
today agenda

57
00:02:51,540 --> 00:02:54,379
this is agenda for today

58
00:02:54,379 --> 00:02:57,540
we figure out we figure out angle

59
00:02:57,540 --> 00:03:00,300
project and web check components and

60
00:03:00,300 --> 00:03:03,180
look at the box I found in Anger project

61
00:03:03,180 --> 00:03:05,940
and root cause analysis for them

62
00:03:05,940 --> 00:03:08,700
finally we are going to look at how to

63
00:03:08,700 --> 00:03:11,540
exploit the Safari browser video within

64
00:03:11,540 --> 00:03:15,079
exploratory vulnerability

65
00:03:15,720 --> 00:03:19,019
so let's start with the definition of an

66
00:03:19,019 --> 00:03:22,140
angle angle stand for almost native

67
00:03:22,140 --> 00:03:26,220
Graphics layer engine in short it

68
00:03:26,220 --> 00:03:29,760
converts open-air apis to Hardware API

69
00:03:29,760 --> 00:03:32,099
support by each OS

70
00:03:32,099 --> 00:03:37,739
so it translation from gr es2 3 and 3.1

71
00:03:37,739 --> 00:03:42,060
and 3.2 to work on desktop opengl and

72
00:03:42,060 --> 00:03:44,700
directly directed to be the 9 and 11

73
00:03:44,700 --> 00:03:47,340
also metal backends

74
00:03:47,340 --> 00:03:50,220
metal metal sound of

75
00:03:50,220 --> 00:03:52,140
metal sounds are a little bit strange

76
00:03:52,140 --> 00:03:55,620
and better is poor Mac and IOS backends

77
00:03:55,620 --> 00:03:59,599
as you know DirectX is for Windows

78
00:03:59,599 --> 00:04:02,819
in one sentence we can say that angle is

79
00:04:02,819 --> 00:04:07,080
a wrapper around open JDS so next next

80
00:04:07,080 --> 00:04:09,299
looking for angular architecture

81
00:04:09,299 --> 00:04:11,900
architecture

82
00:04:12,260 --> 00:04:15,659
this figure is this figure is a

83
00:04:15,659 --> 00:04:17,940
simplified representation of angle

84
00:04:17,940 --> 00:04:21,358
architecture for their understanding I

85
00:04:21,358 --> 00:04:23,580
will explain the course cause of draw

86
00:04:23,580 --> 00:04:26,040
array method which which is obtained

87
00:04:26,040 --> 00:04:29,000
used in anger

88
00:04:29,000 --> 00:04:31,919
this figure is the file where the draw

89
00:04:31,919 --> 00:04:35,539
array method is defined

90
00:04:37,139 --> 00:04:39,780
entry point entry point includes the

91
00:04:39,780 --> 00:04:42,360
validation and context part in

92
00:04:42,360 --> 00:04:44,880
validation part it verifies the

93
00:04:44,880 --> 00:04:47,759
arguments and types of each function

94
00:04:47,759 --> 00:04:50,280
the context part caused our actual

95
00:04:50,280 --> 00:04:52,560
function and converts it for each us

96
00:04:52,560 --> 00:04:54,020
back end

97
00:04:54,020 --> 00:04:58,020
this picture this figure is an entry

98
00:04:58,020 --> 00:05:00,600
point overdrawals

99
00:05:00,600 --> 00:05:03,780
if you look at this

100
00:05:03,780 --> 00:05:05,820
if we look at this you can see that

101
00:05:05,820 --> 00:05:08,400
there are validate and context call

102
00:05:08,400 --> 00:05:11,120
right

103
00:05:12,080 --> 00:05:15,419
if we pass the validate part we reach

104
00:05:15,419 --> 00:05:17,900
this code

105
00:05:19,560 --> 00:05:20,820
this code

106
00:05:20,820 --> 00:05:24,120
in here culture draw always implements

107
00:05:24,120 --> 00:05:26,400
for each action again

108
00:05:26,400 --> 00:05:29,340
to implements to implement the draw

109
00:05:29,340 --> 00:05:32,520
array for each second angle implements

110
00:05:32,520 --> 00:05:36,539
the cloud class method as voucher uh and

111
00:05:36,539 --> 00:05:40,860
inherits it from the again sorry and

112
00:05:40,860 --> 00:05:43,320
inherit in it from the vegan

113
00:05:43,320 --> 00:05:46,219
implementation class

114
00:05:49,100 --> 00:05:51,900
next let's check the M implementation

115
00:05:51,900 --> 00:05:54,198
class

116
00:05:56,039 --> 00:05:58,560
uh look at the code true array is

117
00:05:58,560 --> 00:06:01,940
defined as a virtual

118
00:06:02,539 --> 00:06:05,940
uh inherit the context in progress from

119
00:06:05,940 --> 00:06:09,539
each backend and make the actual draw

120
00:06:09,539 --> 00:06:13,139
array method also we look at draw RS in

121
00:06:13,139 --> 00:06:17,120
the file configand as an example

122
00:06:19,139 --> 00:06:23,400
uh just reject the com the context input

123
00:06:23,400 --> 00:06:26,160
class is in highly prone better for con

124
00:06:26,160 --> 00:06:32,180
GL and direct direct reading 9 and 11 to

125
00:06:32,580 --> 00:06:37,199
Implement actual muscle also uh the the

126
00:06:37,199 --> 00:06:39,539
other method are similarly implemented

127
00:06:39,539 --> 00:06:42,600
as I say let's check birth control array

128
00:06:42,600 --> 00:06:44,340
method

129
00:06:44,340 --> 00:06:46,380
uh

130
00:06:46,380 --> 00:06:48,780
this code is the draw array in the upper

131
00:06:48,780 --> 00:06:51,199
configand rule looking at the code

132
00:06:51,199 --> 00:06:54,060
looking at the code

133
00:06:54,060 --> 00:06:56,940
call the setup draw method and call the

134
00:06:56,940 --> 00:06:58,319
draw method

135
00:06:58,319 --> 00:07:01,800
this code use a Discord use the barcon

136
00:07:01,800 --> 00:07:03,720
backend as an example

137
00:07:03,720 --> 00:07:07,139
so metal anti-rex 3D are also

138
00:07:07,139 --> 00:07:09,479
implemented with the same structure as

139
00:07:09,479 --> 00:07:11,719
this

140
00:07:12,000 --> 00:07:15,840
so next let's check the let's check the

141
00:07:15,840 --> 00:07:18,840
order of course from Webster to angle

142
00:07:18,840 --> 00:07:23,699
webshare 2 and entry point over angle

143
00:07:23,699 --> 00:07:27,240
uh webshare is our JavaScript API for

144
00:07:27,240 --> 00:07:30,660
rendering 2D and 3D Graphics within any

145
00:07:30,660 --> 00:07:33,060
compatible web browser without the use

146
00:07:33,060 --> 00:07:36,479
of external programs webchain use angle

147
00:07:36,479 --> 00:07:39,240
project as a backend to support the

148
00:07:39,240 --> 00:07:41,340
same level of rendering on multiple

149
00:07:41,340 --> 00:07:44,280
platforms website has two major protons

150
00:07:44,280 --> 00:07:48,000
webshare 1 and webshare 2. also website

151
00:07:48,000 --> 00:07:52,099
2 is includes Capture One web share one

152
00:07:52,099 --> 00:07:54,440
in additionally

153
00:07:54,440 --> 00:07:57,660
does stand for Rapture are defined by

154
00:07:57,660 --> 00:08:00,380
Chronos group

155
00:08:00,720 --> 00:08:02,160
uh

156
00:08:02,160 --> 00:08:04,800
it is an architecture that includes

157
00:08:04,800 --> 00:08:06,120
webchair

158
00:08:06,120 --> 00:08:08,639
angular angular architecture is the same

159
00:08:08,639 --> 00:08:12,680
only add to the web SharePoint

160
00:08:12,840 --> 00:08:16,080
it is also based on webkit browser

161
00:08:16,080 --> 00:08:18,780
Chrome browser use an interface named

162
00:08:18,780 --> 00:08:21,900
Gres interface on the in the comment

163
00:08:21,900 --> 00:08:23,180
purpose system

164
00:08:23,180 --> 00:08:26,520
they are used at interface to call angle

165
00:08:26,520 --> 00:08:28,020
entry points

166
00:08:28,020 --> 00:08:31,259
however however we will explain explain

167
00:08:31,259 --> 00:08:34,020
based on the Safari browser

168
00:08:34,020 --> 00:08:35,339
now

169
00:08:35,339 --> 00:08:37,799
let's look at the process of reaching

170
00:08:37,799 --> 00:08:41,940
the range angle entry point in rapture

171
00:08:41,940 --> 00:08:47,360
so also we use draw arrest as an example

172
00:08:47,640 --> 00:08:50,339
ah before that

173
00:08:50,339 --> 00:08:52,399
before that

174
00:08:52,399 --> 00:08:56,100
we check the idea where draw arrest is

175
00:08:56,100 --> 00:08:57,600
defined

176
00:08:57,600 --> 00:09:00,480
uh usually muscle then usually can call

177
00:09:00,480 --> 00:09:03,420
in web browser or Define in either files

178
00:09:03,420 --> 00:09:07,680
in other words in other words if if we

179
00:09:07,680 --> 00:09:10,440
look at idea we can check the function

180
00:09:10,440 --> 00:09:13,339
that can be called

181
00:09:14,220 --> 00:09:18,839
uh this uh this is the implementation

182
00:09:18,839 --> 00:09:21,440
code of web challenge

183
00:09:21,440 --> 00:09:24,600
there is a couple of validation and

184
00:09:24,600 --> 00:09:27,779
after that the draw arrays of the M

185
00:09:27,779 --> 00:09:31,160
context of that chord

186
00:09:31,640 --> 00:09:34,740
and content and context is a context

187
00:09:34,740 --> 00:09:37,500
sorry and context is your graphics

188
00:09:37,500 --> 00:09:40,320
contextual object and it's defined in

189
00:09:40,320 --> 00:09:43,260
your head file next we'll leave the

190
00:09:43,260 --> 00:09:47,779
graphics Graphics contextual object

191
00:09:49,080 --> 00:09:53,700
so looking at this class draw array is a

192
00:09:53,700 --> 00:09:56,700
virtual method so we need to find we

193
00:09:56,700 --> 00:09:59,160
need to find class that inherits this

194
00:09:59,160 --> 00:10:01,680
class and implements the draw array

195
00:10:01,680 --> 00:10:04,099
method

196
00:10:06,959 --> 00:10:11,220
Scrappy context gr angle class in Harris

197
00:10:11,220 --> 00:10:14,220
Graphics contextual class and as you can

198
00:10:14,220 --> 00:10:18,000
see Define the draw array method

199
00:10:18,000 --> 00:10:20,399
the following the following are the draw

200
00:10:20,399 --> 00:10:23,720
already defined in this class

201
00:10:23,720 --> 00:10:27,920
look at this code of

202
00:10:29,399 --> 00:10:33,120
it's called dot GL true true array is

203
00:10:33,120 --> 00:10:35,279
being called and

204
00:10:35,279 --> 00:10:38,220
as we saw at the beginning of the angle

205
00:10:38,220 --> 00:10:41,160
architecture this method calls entry

206
00:10:41,160 --> 00:10:45,120
point of angle draw arrays okay that's

207
00:10:45,120 --> 00:10:48,060
it we run about angle and Rapture

208
00:10:48,060 --> 00:10:50,100
architecture

209
00:10:50,100 --> 00:10:53,579
next let's take a look at the one day

210
00:10:53,579 --> 00:10:58,320
vulnerability in the angry project

211
00:10:58,320 --> 00:11:01,680
so I will describe the full Vlog I found

212
00:11:01,680 --> 00:11:04,440
or there or there are more books but

213
00:11:04,440 --> 00:11:07,500
photoshake of time I describe the four

214
00:11:07,500 --> 00:11:11,100
volt that I think or interesting and we

215
00:11:11,100 --> 00:11:15,300
exploit we and we exploit transports in

216
00:11:15,300 --> 00:11:19,279
the exploration part of this talk

217
00:11:20,459 --> 00:11:24,480
hmm the prospog to analyze is the web

218
00:11:24,480 --> 00:11:28,500
checkbox that I first reported also PLC

219
00:11:28,500 --> 00:11:29,820
is so simple

220
00:11:29,820 --> 00:11:31,980
so there was no difficult in the

221
00:11:31,980 --> 00:11:33,120
analysis

222
00:11:33,120 --> 00:11:36,120
the root cause of this bug is that there

223
00:11:36,120 --> 00:11:39,180
is no validation of width height and

224
00:11:39,180 --> 00:11:42,720
depth when when using the text storage

225
00:11:42,720 --> 00:11:46,640
text story method

226
00:11:46,940 --> 00:11:51,060
a prototype of text through or prototype

227
00:11:51,060 --> 00:11:54,180
over text through this 3D is here

228
00:11:54,180 --> 00:11:56,359
foreign

229
00:12:01,339 --> 00:12:05,040
except for Target internal format

230
00:12:05,040 --> 00:12:06,140
uh

231
00:12:06,140 --> 00:12:10,500
texture text 3G 3D space pipe or rubber

232
00:12:10,500 --> 00:12:13,160
over the uh or rabbit over

233
00:12:13,160 --> 00:12:15,420
three-dimensional texture or two

234
00:12:15,420 --> 00:12:18,720
dimensional array texture also the text

235
00:12:18,720 --> 00:12:20,880
through this reading method is entirely

236
00:12:20,880 --> 00:12:23,399
called to inch initialized pro component

237
00:12:23,399 --> 00:12:25,800
data method we covered the next track

238
00:12:25,800 --> 00:12:30,000
slide for your information the texture

239
00:12:30,000 --> 00:12:33,360
is an object that contains one more one

240
00:12:33,360 --> 00:12:34,440
more

241
00:12:34,440 --> 00:12:37,260
one or more image that or have the same

242
00:12:37,260 --> 00:12:40,560
Imaging also the texture has a limited

243
00:12:40,560 --> 00:12:42,739
size

244
00:12:42,779 --> 00:12:47,279
uh hip or hip based bubble Pro occurs in

245
00:12:47,279 --> 00:12:50,120
the comment 3.

246
00:12:50,120 --> 00:12:52,579
of this function

247
00:12:52,579 --> 00:12:57,000
first get test row with offset data

248
00:12:57,000 --> 00:13:00,860
point method in command 1.

249
00:13:01,279 --> 00:13:05,040
when cooling offset data pointer Y and T

250
00:13:05,040 --> 00:13:08,600
are used as a parameter

251
00:13:08,600 --> 00:13:12,779
why and she Y and C are Loop counter for

252
00:13:12,779 --> 00:13:15,240
depths and Heights

253
00:13:15,240 --> 00:13:18,180
this value is passed by user when

254
00:13:18,180 --> 00:13:20,899
calling texts through this 3D

255
00:13:20,899 --> 00:13:24,120
as you can see

256
00:13:24,120 --> 00:13:26,880
as you can see the offset data for Intel

257
00:13:26,880 --> 00:13:29,820
gas or memory space to be accessed as Y

258
00:13:29,820 --> 00:13:32,579
and G Based on data without any

259
00:13:32,579 --> 00:13:34,139
verification

260
00:13:34,139 --> 00:13:38,579
also testro is used to use it to get

261
00:13:38,579 --> 00:13:42,180
test pixel in command 2.

262
00:13:42,180 --> 00:13:47,239
okay there is no verification here

263
00:13:47,519 --> 00:13:50,180
if

264
00:13:50,880 --> 00:13:54,779
if the attacker pass or tabs H and V

265
00:13:54,779 --> 00:13:57,120
that is largest rather than the current

266
00:13:57,120 --> 00:14:00,720
exercise then autobound read occurs when

267
00:14:00,720 --> 00:14:03,000
trying to access test picture in the

268
00:14:03,000 --> 00:14:05,660
bank copy

269
00:14:05,940 --> 00:14:10,620
uh so this is the PS code ProBook

270
00:14:10,620 --> 00:14:13,500
it is not so simple right

271
00:14:13,500 --> 00:14:16,500
discussion

272
00:14:17,060 --> 00:14:20,399
this visual cast after running qcb

273
00:14:20,399 --> 00:14:23,639
window debugger to get this result we

274
00:14:23,639 --> 00:14:26,160
need to attach the GPU process of the

275
00:14:26,160 --> 00:14:29,899
Chrome browser that render process

276
00:14:30,420 --> 00:14:33,300
next let's look at the

277
00:14:33,300 --> 00:14:35,160
uh sorry

278
00:14:35,160 --> 00:14:37,920
next let's look at an interesting use of

279
00:14:37,920 --> 00:14:41,940
the frivolc this bug this is a bug that

280
00:14:41,940 --> 00:14:44,940
occurred in draw array method but but

281
00:14:44,940 --> 00:14:48,120
that doesn't but that does not mean it

282
00:14:48,120 --> 00:14:50,880
is not problem in the draw arrays draw

283
00:14:50,880 --> 00:14:53,040
or raise the server verification before

284
00:14:53,040 --> 00:14:54,180
drawing

285
00:14:54,180 --> 00:14:57,120
when do this there was a problem with

286
00:14:57,120 --> 00:14:59,579
the object being verified verified

287
00:14:59,579 --> 00:15:01,079
verified

288
00:15:01,079 --> 00:15:04,980
the full type is used after free this is

289
00:15:04,980 --> 00:15:07,980
caused by not validating already delete

290
00:15:07,980 --> 00:15:10,260
already delete text object in the draw

291
00:15:10,260 --> 00:15:13,740
array verification process also our this

292
00:15:13,740 --> 00:15:15,839
bulk pattern helps to find an

293
00:15:15,839 --> 00:15:20,300
exploitable vulnerability in safari

294
00:15:23,399 --> 00:15:26,220
this function is called internally when

295
00:15:26,220 --> 00:15:29,339
through array is called if you look at

296
00:15:29,339 --> 00:15:33,240
comment one use after free occurs occurs

297
00:15:33,240 --> 00:15:36,000
when you use a texture that has already

298
00:15:36,000 --> 00:15:38,839
been removed

299
00:15:39,959 --> 00:15:42,660
this function is one of one of the

300
00:15:42,660 --> 00:15:44,579
functions that draw arrays validate

301
00:15:44,579 --> 00:15:48,019
several State before drawing

302
00:15:50,279 --> 00:15:52,019
uh

303
00:15:52,019 --> 00:15:55,199
looking at the code commands uh it is

304
00:15:55,199 --> 00:15:58,560
expected to be a function that validate

305
00:15:58,560 --> 00:16:01,440
whether a rendering feedback loop exists

306
00:16:01,440 --> 00:16:03,180
in the frame but for people people

307
00:16:03,180 --> 00:16:07,920
drawing it seems weird to mention to

308
00:16:07,920 --> 00:16:10,139
mention of texture object in the rainbow

309
00:16:10,139 --> 00:16:11,820
popular validation function validation

310
00:16:11,820 --> 00:16:12,839
function

311
00:16:12,839 --> 00:16:16,320
but according to openj standard it is

312
00:16:16,320 --> 00:16:19,320
testified that the prime purple object

313
00:16:19,320 --> 00:16:22,139
should be should be used as a texture or

314
00:16:22,139 --> 00:16:24,360
rendered render report object as the

315
00:16:24,360 --> 00:16:27,019
rendering Target

316
00:16:27,300 --> 00:16:30,899
this code is part of the push code as

317
00:16:30,899 --> 00:16:34,440
you can see two trigger is so simple too

318
00:16:34,440 --> 00:16:37,500
you just need to remove the bound attack

319
00:16:37,500 --> 00:16:40,019
bounded boundary texture paper occurring

320
00:16:40,019 --> 00:16:44,160
through arrays if if you want complete

321
00:16:44,160 --> 00:16:47,100
complete pH code can be found by

322
00:16:47,100 --> 00:16:49,320
searching product issue issue number or

323
00:16:49,320 --> 00:16:54,079
title on the crbox.com

324
00:16:55,019 --> 00:16:57,540
this is the result carrying with other

325
00:16:57,540 --> 00:17:00,360
say integer next we move on to

326
00:17:00,360 --> 00:17:03,380
safariable vulnerabilities

327
00:17:03,380 --> 00:17:07,980
ah as we knew Safari use angle 2. so

328
00:17:07,980 --> 00:17:11,160
when testing angry bug are so when

329
00:17:11,160 --> 00:17:13,559
testing angle ball we should test

330
00:17:13,559 --> 00:17:15,900
whether they can be triggered in Chrome

331
00:17:15,900 --> 00:17:18,359
safely and Firebox

332
00:17:18,359 --> 00:17:20,939
this ball can be triggered in Chrome and

333
00:17:20,939 --> 00:17:22,380
Safari browser

334
00:17:22,380 --> 00:17:26,459
and the bug type is a hip hip based

335
00:17:26,459 --> 00:17:27,959
bubble flow

336
00:17:27,959 --> 00:17:30,559
caused by insufficient parameter

337
00:17:30,559 --> 00:17:35,660
parameter validation of this method

338
00:17:37,500 --> 00:17:39,480
also uh

339
00:17:39,480 --> 00:17:42,000
the

340
00:17:42,000 --> 00:17:43,740
also the

341
00:17:43,740 --> 00:17:46,380
this method is a wrapper method that

342
00:17:46,380 --> 00:17:49,080
cores through array multiple times

343
00:17:49,080 --> 00:17:52,200
it is not the is not the report capture

344
00:17:52,200 --> 00:17:55,380
method so to use this function we need

345
00:17:55,380 --> 00:17:57,660
to enable some extension

346
00:17:57,660 --> 00:18:00,539
to enable the extension is shown in the

347
00:18:00,539 --> 00:18:03,080
Future Part

348
00:18:03,299 --> 00:18:06,539
this code is webches through multi-draw

349
00:18:06,539 --> 00:18:09,179
array webchair method already we know

350
00:18:09,179 --> 00:18:13,020
this is not a part of angle it is web

351
00:18:13,020 --> 00:18:16,160
share part in the supply browser so so

352
00:18:16,160 --> 00:18:19,799
uh the problem is

353
00:18:19,799 --> 00:18:22,200
this point

354
00:18:22,200 --> 00:18:23,340
uh

355
00:18:23,340 --> 00:18:26,100
problem is this point not enough

356
00:18:26,100 --> 00:18:28,980
validation or sorry not enough

357
00:18:28,980 --> 00:18:31,320
validation for throw count

358
00:18:31,320 --> 00:18:34,020
let's take a closer look at the validate

359
00:18:34,020 --> 00:18:36,780
offset method

360
00:18:36,780 --> 00:18:39,960
in this code to check through already

361
00:18:39,960 --> 00:18:42,960
sorry throw count and offset or less

362
00:18:42,960 --> 00:18:46,200
than the size it means the size variable

363
00:18:46,200 --> 00:18:49,080
should be greater than draw count and

364
00:18:49,080 --> 00:18:52,620
offset but the problem is if the sum of

365
00:18:52,620 --> 00:18:55,679
draw count and offset is greater than

366
00:18:55,679 --> 00:18:59,280
size it is not checked checked

367
00:18:59,280 --> 00:19:04,340
so it leads to our hair based opal flow

368
00:19:05,340 --> 00:19:10,760
this is this is part of pH code first

369
00:19:11,340 --> 00:19:14,400
to use multi-drill array you must use

370
00:19:14,400 --> 00:19:17,520
the cat extension method like this code

371
00:19:17,520 --> 00:19:21,720
next we call record multi-drill array

372
00:19:21,720 --> 00:19:22,919
rapture

373
00:19:22,919 --> 00:19:24,360
at this point

374
00:19:24,360 --> 00:19:27,480
we passed we passed through count and

375
00:19:27,480 --> 00:19:30,059
offset bigger than the probite or rate

376
00:19:30,059 --> 00:19:33,480
size so as a result a heat best bubble

377
00:19:33,480 --> 00:19:36,380
Pro occurs

378
00:19:38,460 --> 00:19:41,059
this is the result carrying with other

379
00:19:41,059 --> 00:19:44,880
sanitation and this ball can this ball

380
00:19:44,880 --> 00:19:47,220
can trigger the Chrome browser as the

381
00:19:47,220 --> 00:19:49,820
same QC

382
00:19:50,760 --> 00:19:53,940
next uh we will dip digging into the

383
00:19:53,940 --> 00:19:57,059
exploitable web show box

384
00:19:57,059 --> 00:19:59,640
this bug also occurs when validate

385
00:19:59,640 --> 00:20:02,039
validating several States in true or

386
00:20:02,039 --> 00:20:05,220
less in anger this bug occurs in the

387
00:20:05,220 --> 00:20:08,419
transformed periodic feature

388
00:20:08,419 --> 00:20:12,600
transport also transform feedback use a

389
00:20:12,600 --> 00:20:15,419
verbal object of angle

390
00:20:15,419 --> 00:20:18,000
to validate transform feedback before

391
00:20:18,000 --> 00:20:20,880
calling ah sorry to validate transform

392
00:20:20,880 --> 00:20:22,740
feedback before calling through always

393
00:20:22,740 --> 00:20:25,980
at this time the already deleted proper

394
00:20:25,980 --> 00:20:27,500
is used

395
00:20:27,500 --> 00:20:29,760
before drawing

396
00:20:29,760 --> 00:20:33,419
in true array method to validate about

397
00:20:33,419 --> 00:20:36,080
transform feedback object at this point

398
00:20:36,080 --> 00:20:40,020
can use the already deleted deleted

399
00:20:40,020 --> 00:20:42,780
proper object in the transform feedback

400
00:20:42,780 --> 00:20:43,860
object

401
00:20:43,860 --> 00:20:46,260
uh so

402
00:20:46,260 --> 00:20:49,140
transform feedback use a purple object

403
00:20:49,140 --> 00:20:51,000
to store the

404
00:20:51,000 --> 00:20:54,179
output of the vertex Trader the stored

405
00:20:54,179 --> 00:20:57,299
value in the pop object is used by GPU

406
00:20:57,299 --> 00:21:00,120
for pastor drawing

407
00:21:00,120 --> 00:21:03,059
also for your information transform

408
00:21:03,059 --> 00:21:06,080
feedback is available start with webgl2

409
00:21:06,080 --> 00:21:09,840
and almost among the three main browser

410
00:21:09,840 --> 00:21:12,419
Safari was the latest to support it

411
00:21:12,419 --> 00:21:16,620
since the party 15. however

412
00:21:16,620 --> 00:21:18,120
I

413
00:21:18,120 --> 00:21:20,820
horrible I never used webshare for

414
00:21:20,820 --> 00:21:24,600
anything other than bug hunting so I

415
00:21:24,600 --> 00:21:28,740
don't know the detail of how it works

416
00:21:28,740 --> 00:21:30,840
okay

417
00:21:30,840 --> 00:21:33,539
the phone pattern is similar to the gas

418
00:21:33,539 --> 00:21:37,200
and flow texture Pro in comment one the

419
00:21:37,200 --> 00:21:39,539
code find the proper object from the

420
00:21:39,539 --> 00:21:42,740
purple handle array

421
00:21:44,059 --> 00:21:47,700
however the purple hand proper handle

422
00:21:47,700 --> 00:21:49,559
object

423
00:21:49,559 --> 00:21:53,039
the football handle may contain the Limu

424
00:21:53,039 --> 00:21:56,100
proper option and as a result the code

425
00:21:56,100 --> 00:22:00,120
the crush crash occurs in Command 2 when

426
00:22:00,120 --> 00:22:02,520
cat current purple access the already

427
00:22:02,520 --> 00:22:05,658
deleted pop object

428
00:22:08,940 --> 00:22:11,240
three

429
00:22:13,919 --> 00:22:15,360
uh

430
00:22:15,360 --> 00:22:18,659
before people analyzing in GTA look at

431
00:22:18,659 --> 00:22:21,900
the purple and resource class

432
00:22:21,900 --> 00:22:25,140
as you can see proper class inherit from

433
00:22:25,140 --> 00:22:26,940
resource class

434
00:22:26,940 --> 00:22:29,700
and in the resource class Define a

435
00:22:29,700 --> 00:22:34,460
structure called and usage reference

436
00:22:35,220 --> 00:22:37,799
sorry

437
00:22:37,799 --> 00:22:39,419
here

438
00:22:39,419 --> 00:22:41,760
uh

439
00:22:41,760 --> 00:22:44,280
this this structure is important

440
00:22:44,280 --> 00:22:47,760
important for our history we will use

441
00:22:47,760 --> 00:22:50,100
this each chapter three ball to choose

442
00:22:50,100 --> 00:22:53,520
the ortical desired value into the M you

443
00:22:53,520 --> 00:22:56,480
say the reference field

444
00:22:56,640 --> 00:23:00,419
now analyze analyze uh where the crash

445
00:23:00,419 --> 00:23:01,260
point

446
00:23:01,260 --> 00:23:03,960
if we remember correctly the crash

447
00:23:03,960 --> 00:23:07,200
occurs in the set proper write method

448
00:23:07,200 --> 00:23:08,520
if

449
00:23:08,520 --> 00:23:11,640
if you look at the method code it

450
00:23:11,640 --> 00:23:14,880
received the proper value and calls the

451
00:23:14,880 --> 00:23:17,220
set right dependence method

452
00:23:17,220 --> 00:23:20,580
after that the member method of resource

453
00:23:20,580 --> 00:23:23,340
class core set used by command block

454
00:23:23,340 --> 00:23:25,320
with Q3

455
00:23:25,320 --> 00:23:28,919
at this point the second argument is set

456
00:23:28,919 --> 00:23:31,340
to true

457
00:23:33,919 --> 00:23:35,460
next

458
00:23:35,460 --> 00:23:39,360
let's look inside this method

459
00:23:39,360 --> 00:23:41,899
uh

460
00:23:42,360 --> 00:23:45,720
since the writing argument is true it

461
00:23:45,720 --> 00:23:48,419
enters the input statement

462
00:23:48,419 --> 00:23:51,299
so our value is put in the member

463
00:23:51,299 --> 00:23:54,780
variable of the M usage reference as you

464
00:23:54,780 --> 00:23:57,659
can see both

465
00:23:57,659 --> 00:24:00,240
as you can see those

466
00:24:00,240 --> 00:24:04,820
variable type or volume type

467
00:24:05,760 --> 00:24:09,840
after that put the put the value in the

468
00:24:09,840 --> 00:24:12,240
same the proper Q serial field at this

469
00:24:12,240 --> 00:24:14,760
point return value of the max method

470
00:24:14,760 --> 00:24:20,039
what was already 6. I found this Pi I

471
00:24:20,039 --> 00:24:23,539
found this by debug

472
00:24:25,520 --> 00:24:30,419
I'm not sure exactly what this pill does

473
00:24:30,419 --> 00:24:35,100
uh this code is part of plc2 trigger the

474
00:24:35,100 --> 00:24:37,080
bug initially

475
00:24:37,080 --> 00:24:40,140
this is this is the page code of use

476
00:24:40,140 --> 00:24:44,280
transform feedback feature in webj2

477
00:24:44,280 --> 00:24:48,900
as you can see uh this

478
00:24:48,900 --> 00:24:50,940
sorry this

479
00:24:50,940 --> 00:24:53,280
people calling through arrays just

480
00:24:53,280 --> 00:24:57,059
delete the purple object this deleted

481
00:24:57,059 --> 00:24:59,880
pop-up object was bound to transform

482
00:24:59,880 --> 00:25:02,659
feedback Target

483
00:25:03,600 --> 00:25:06,980
here here

484
00:25:08,520 --> 00:25:11,100
so this is the result with other

485
00:25:11,100 --> 00:25:13,559
Sanitation

486
00:25:13,559 --> 00:25:17,760
uh so far a total of poor bugs have been

487
00:25:17,760 --> 00:25:19,799
analyzed

488
00:25:19,799 --> 00:25:22,980
this is this is the location of box in

489
00:25:22,980 --> 00:25:25,740
the web share architecture where we look

490
00:25:25,740 --> 00:25:29,400
at today uh I didn't have time to cover

491
00:25:29,400 --> 00:25:33,419
them or but anger is still one of my my

492
00:25:33,419 --> 00:25:36,720
good Auto factors because it has to

493
00:25:36,720 --> 00:25:41,279
communicate with the GPU GPU it needs

494
00:25:41,279 --> 00:25:45,120
more more permission than a renderer and

495
00:25:45,120 --> 00:25:48,360
uh whenever the GS standard is update

496
00:25:48,360 --> 00:25:52,740
the web check feature is also updated

497
00:25:52,740 --> 00:25:56,580
also a web GPU is to be optionally

498
00:25:56,580 --> 00:25:57,960
released soon

499
00:25:57,960 --> 00:26:01,260
this part will be our good Auto vector

500
00:26:01,260 --> 00:26:04,799
next I will discover the detail of how

501
00:26:04,799 --> 00:26:09,779
to export we just look at look at

502
00:26:09,779 --> 00:26:13,799
so uh finally we list the more

503
00:26:13,799 --> 00:26:15,900
interesting parts

504
00:26:15,900 --> 00:26:20,039
in this part I explain I explain how to

505
00:26:20,039 --> 00:26:22,440
exploit the transform feedback block

506
00:26:22,440 --> 00:26:24,419
that we looked at

507
00:26:24,419 --> 00:26:28,140
pause at all or rest recap to what we

508
00:26:28,140 --> 00:26:30,360
have

509
00:26:30,360 --> 00:26:34,039
as you can see from this figure

510
00:26:34,919 --> 00:26:38,820
we can control two variable of n you say

511
00:26:38,820 --> 00:26:40,620
the reference structure or already

512
00:26:40,620 --> 00:26:43,740
delete proper object

513
00:26:43,740 --> 00:26:47,880
now let's see how let's let's see how we

514
00:26:47,880 --> 00:26:51,059
can stably allocate memory that has been

515
00:26:51,059 --> 00:26:55,080
deleted to find a way to reallocate we

516
00:26:55,080 --> 00:26:57,659
must know how the proper object is

517
00:26:57,659 --> 00:27:00,120
allocated

518
00:27:00,120 --> 00:27:03,240
uh as you can see uh some some purple

519
00:27:03,240 --> 00:27:05,700
object created by the crate purple

520
00:27:05,700 --> 00:27:08,960
method when called create proper method

521
00:27:08,960 --> 00:27:11,940
internally called create bubble of the

522
00:27:11,940 --> 00:27:14,100
context class

523
00:27:14,100 --> 00:27:17,400
this method is also called the or locate

524
00:27:17,400 --> 00:27:20,640
new object vessel

525
00:27:20,640 --> 00:27:24,000
at this point uh at this point allocates

526
00:27:24,000 --> 00:27:27,419
a proper object using a new operator

527
00:27:27,419 --> 00:27:30,840
or is also a performance class does not

528
00:27:30,840 --> 00:27:33,720
operate the new operator so it is

529
00:27:33,720 --> 00:27:38,720
allocate allocated to the normal here

530
00:27:41,400 --> 00:27:45,840
uh for the or for the allocation of the

531
00:27:45,840 --> 00:27:49,380
of the free multiple object I use the

532
00:27:49,380 --> 00:27:51,120
purple data method

533
00:27:51,120 --> 00:27:53,840
when we call this method as you can see

534
00:27:53,840 --> 00:27:57,179
allocate and initialize initialized

535
00:27:57,179 --> 00:28:00,419
memory with cat0 field for 4.

536
00:28:00,419 --> 00:28:03,020
in that method

537
00:28:03,020 --> 00:28:06,980
in the method use add Auto function so

538
00:28:06,980 --> 00:28:12,419
for the list we can easily sorry we can

539
00:28:12,419 --> 00:28:15,120
easily allocate in the delete proper

540
00:28:15,120 --> 00:28:16,799
object

541
00:28:16,799 --> 00:28:18,419
so

542
00:28:18,419 --> 00:28:22,559
um now look at the expert look at the

543
00:28:22,559 --> 00:28:25,500
exploitation steps I explain uh five

544
00:28:25,500 --> 00:28:28,740
steps but before that let's run the

545
00:28:28,740 --> 00:28:32,659
basic of JS object

546
00:28:34,500 --> 00:28:36,840
okay

547
00:28:36,840 --> 00:28:39,900
people hip spray step explain to the

548
00:28:39,900 --> 00:28:43,440
butterfly of of JS object used in

549
00:28:43,440 --> 00:28:45,120
JavaScript quote

550
00:28:45,120 --> 00:28:47,460
check it check it with a simple

551
00:28:47,460 --> 00:28:50,520
JavaScript program as you can see

552
00:28:50,520 --> 00:28:53,059
foreign

553
00:28:55,220 --> 00:28:58,559
to arrays and push value of different

554
00:28:58,559 --> 00:28:59,820
type

555
00:28:59,820 --> 00:29:03,299
after that uh check the check the result

556
00:29:03,299 --> 00:29:06,840
of array and array 2. with the term cell

557
00:29:06,840 --> 00:29:09,120
function thumb side function is

558
00:29:09,120 --> 00:29:13,140
Javascript quantity function

559
00:29:13,140 --> 00:29:16,980
so now let's look at

560
00:29:16,980 --> 00:29:19,740
look at the result of array

561
00:29:19,740 --> 00:29:21,240
left side

562
00:29:21,240 --> 00:29:24,240
foreign

563
00:29:25,820 --> 00:29:29,399
type became array with double because it

564
00:29:29,399 --> 00:29:34,159
puts a value value of double types

565
00:29:34,159 --> 00:29:35,880
here

566
00:29:35,880 --> 00:29:37,399
next

567
00:29:37,399 --> 00:29:41,100
to type become became array with

568
00:29:41,100 --> 00:29:45,120
configures because it puts a value of

569
00:29:45,120 --> 00:29:48,779
it first or value of object type

570
00:29:48,779 --> 00:29:50,179
now

571
00:29:50,179 --> 00:29:53,640
let's see what this code looks like in

572
00:29:53,640 --> 00:29:56,000
memory

573
00:29:58,820 --> 00:30:02,520
this figure is a memory representing the

574
00:30:02,520 --> 00:30:04,980
two arrays created in the previous

575
00:30:04,980 --> 00:30:08,399
the blue color is a double type array

576
00:30:08,399 --> 00:30:11,640
and the other is contiguous type array

577
00:30:11,640 --> 00:30:13,919
first

578
00:30:13,919 --> 00:30:17,279
we first looking at the Double tripod

579
00:30:17,279 --> 00:30:21,020
right it points

580
00:30:22,500 --> 00:30:26,760
it points to a value of 1.1

581
00:30:26,760 --> 00:30:31,200
and of this you can of this

582
00:30:31,200 --> 00:30:34,500
you can see the value indicate to the

583
00:30:34,500 --> 00:30:36,539
length of this array

584
00:30:36,539 --> 00:30:37,740
so

585
00:30:37,740 --> 00:30:38,340
um

586
00:30:38,340 --> 00:30:42,120
JS object has two type of ranks it is

587
00:30:42,120 --> 00:30:44,940
called Vector length and popular public

588
00:30:44,940 --> 00:30:47,940
lengths the backgrounds is a is a

589
00:30:47,940 --> 00:30:50,340
writable size public length is a

590
00:30:50,340 --> 00:30:54,059
readable size and when we use the length

591
00:30:54,059 --> 00:30:56,940
property of some array get a public

592
00:30:56,940 --> 00:30:58,679
length value

593
00:30:58,679 --> 00:31:02,760
in shortly when we when we do out of

594
00:31:02,760 --> 00:31:05,520
bound read and write we need to modify

595
00:31:05,520 --> 00:31:08,700
the modify the vector ranks

596
00:31:08,700 --> 00:31:12,120
next uh looking at the continuous type

597
00:31:12,120 --> 00:31:14,779
butterfly

598
00:31:15,659 --> 00:31:18,899
uh hit point it points to a value of

599
00:31:18,899 --> 00:31:21,299
some object

600
00:31:21,299 --> 00:31:23,340
and of this

601
00:31:23,340 --> 00:31:25,679
you can see the value indicate to the

602
00:31:25,679 --> 00:31:28,740
length of this array you can see that it

603
00:31:28,740 --> 00:31:30,840
has the same structure as double type

604
00:31:30,840 --> 00:31:33,260
array

605
00:31:34,919 --> 00:31:37,159
foreign

606
00:31:41,700 --> 00:31:44,220
this code this code is the hip spray

607
00:31:44,220 --> 00:31:47,399
plot in the exploit the purpose of this

608
00:31:47,399 --> 00:31:50,399
is to spray the butterfly in memory as

609
00:31:50,399 --> 00:31:54,779
checked in Step 0 0. at this point the

610
00:31:54,779 --> 00:31:59,360
overview bit of butterfly or Peak state

611
00:32:01,460 --> 00:32:05,600
these bits are fixed

612
00:32:06,539 --> 00:32:09,899
using this we can predict to Spread

613
00:32:09,899 --> 00:32:13,580
spread butterfly address

614
00:32:18,080 --> 00:32:21,419
when Step One is executed many

615
00:32:21,419 --> 00:32:24,120
butterflies are created in memory

616
00:32:24,120 --> 00:32:27,720
as you can see the spread memory has the

617
00:32:27,720 --> 00:32:31,380
same shape as the on the one on the

618
00:32:31,380 --> 00:32:33,500
right

619
00:32:33,960 --> 00:32:35,220
keep

620
00:32:35,220 --> 00:32:39,000
ah keep this shape keep this shape in

621
00:32:39,000 --> 00:32:41,580
the mind it used until the end of this

622
00:32:41,580 --> 00:32:43,820
talk

623
00:32:45,240 --> 00:32:48,899
now talking about spray code

624
00:32:48,899 --> 00:32:50,399
the

625
00:32:50,399 --> 00:32:52,919
the value the value of parameter is

626
00:32:52,919 --> 00:32:56,159
important we should we should put the

627
00:32:56,159 --> 00:32:58,799
predicted multiply orders in the value

628
00:32:58,799 --> 00:33:00,779
variator

629
00:33:00,779 --> 00:33:04,440
the value value must point to this

630
00:33:04,440 --> 00:33:06,799
memory

631
00:33:07,320 --> 00:33:10,639
to this memory

632
00:33:11,899 --> 00:33:14,700
uh looking at

633
00:33:14,700 --> 00:33:18,019
looking at this right

634
00:33:20,120 --> 00:33:24,659
looking at this line we add offset Ox 5D

635
00:33:24,659 --> 00:33:27,260
through the value

636
00:33:30,960 --> 00:33:35,399
if offset ox5d is added to Value it

637
00:33:35,399 --> 00:33:39,860
points to the length sorry if offset

638
00:33:39,860 --> 00:33:44,640
ox5d is added to Value it points to the

639
00:33:44,640 --> 00:33:47,279
vector length over another double type

640
00:33:47,279 --> 00:33:49,019
array

641
00:33:49,019 --> 00:33:52,260
right here like that

642
00:33:52,260 --> 00:33:55,140
uh if the bug is triggered after this

643
00:33:55,140 --> 00:33:57,899
the value becomes the amp usage

644
00:33:57,899 --> 00:34:00,419
reference field of the feed of the

645
00:34:00,419 --> 00:34:03,299
delete pop object

646
00:34:03,299 --> 00:34:05,220
next

647
00:34:05,220 --> 00:34:10,460
this code is part of trigger function uh

648
00:34:11,099 --> 00:34:14,460
after after calling after calling delete

649
00:34:14,460 --> 00:34:17,540
proper it attempts to reallocate by

650
00:34:17,540 --> 00:34:20,639
proper data on the already fluid memory

651
00:34:20,639 --> 00:34:23,119
location

652
00:34:23,820 --> 00:34:25,699
the we are located

653
00:34:25,699 --> 00:34:30,080
value is in this array

654
00:34:33,418 --> 00:34:37,918
uh before trigger the bug put the value

655
00:34:37,918 --> 00:34:43,020
at index 55 of the this array

656
00:34:43,020 --> 00:34:45,480
55d sorry

657
00:34:45,480 --> 00:34:48,960
after that we trigger the block index

658
00:34:48,960 --> 00:34:53,339
so index 55 is the location of M usage

659
00:34:53,339 --> 00:34:55,440
reference field I found

660
00:34:55,440 --> 00:34:58,639
of I debug

661
00:34:59,960 --> 00:35:04,320
as we know when trigger the work we can

662
00:35:04,320 --> 00:35:07,800
reach this method

663
00:35:07,800 --> 00:35:10,560
at this point and you say the reference

664
00:35:10,560 --> 00:35:12,960
reference should be replaced with

665
00:35:12,960 --> 00:35:15,839
exactly the value we want

666
00:35:15,839 --> 00:35:18,119
the target we want to change is the

667
00:35:18,119 --> 00:35:21,480
vector ranks and index 0 over the the

668
00:35:21,480 --> 00:35:23,880
double type array in the spread for the

669
00:35:23,880 --> 00:35:24,960
price

670
00:35:24,960 --> 00:35:26,700
let's look at

671
00:35:26,700 --> 00:35:30,560
let's look at this a little more

672
00:35:31,980 --> 00:35:33,599
this figure

673
00:35:33,599 --> 00:35:35,220
this figure

674
00:35:35,220 --> 00:35:37,800
shows what the trigger function does

675
00:35:37,800 --> 00:35:40,500
if the amp usage reference field has

676
00:35:40,500 --> 00:35:43,800
been reallocated it's a little

677
00:35:43,800 --> 00:35:47,880
reallocated it updates CMD

678
00:35:47,880 --> 00:35:50,700
CMD purple Q3

679
00:35:50,700 --> 00:35:55,380
and CPU readmen need think

680
00:35:55,380 --> 00:35:59,280
and CPU read the map.bilt as I mentioned

681
00:35:59,280 --> 00:36:03,119
the backgrounds of double array and the

682
00:36:03,119 --> 00:36:07,400
index 0 or change to those value

683
00:36:09,660 --> 00:36:12,380
so so

684
00:36:12,380 --> 00:36:16,859
the vector ranks was changed from 5 to o

685
00:36:16,859 --> 00:36:21,900
x o x 65. now this already can be out of

686
00:36:21,900 --> 00:36:23,820
bound read and write

687
00:36:23,820 --> 00:36:28,640
using this to force it with Next Step

688
00:36:29,220 --> 00:36:32,400
for now we can call this array that has

689
00:36:32,400 --> 00:36:37,400
been resized by a fog or corrupted array

690
00:36:37,500 --> 00:36:40,619
so look at this right

691
00:36:40,619 --> 00:36:43,740
uh the index 8 of the corrupted array

692
00:36:43,740 --> 00:36:46,320
has the length period of another double

693
00:36:46,320 --> 00:36:47,880
type array

694
00:36:47,880 --> 00:36:50,520
we chain we change the length of this

695
00:36:50,520 --> 00:36:54,680
array to 13 sorry a

696
00:36:56,520 --> 00:36:58,859
change 13 sorry a

697
00:36:58,859 --> 00:37:02,520
so now we have our fake array of the

698
00:37:02,520 --> 00:37:05,060
large size

699
00:37:08,460 --> 00:37:11,760
now we can now we can do something with

700
00:37:11,760 --> 00:37:14,400
this pack already one of them for stable

701
00:37:14,400 --> 00:37:16,680
exploitation we can get our valid

702
00:37:16,680 --> 00:37:20,480
structure ID of Terrys object

703
00:37:21,000 --> 00:37:23,700
um this code this code is carrying a

704
00:37:23,700 --> 00:37:26,880
valid structure ID it is it is a bit

705
00:37:26,880 --> 00:37:30,359
comp it is a little bit complicated but

706
00:37:30,359 --> 00:37:31,800
it is fun

707
00:37:31,800 --> 00:37:34,560
it is easy to understand The Code by

708
00:37:34,560 --> 00:37:38,220
parallel called by following it uh line

709
00:37:38,220 --> 00:37:40,079
by line

710
00:37:40,079 --> 00:37:45,240
right by line also the red box is a

711
00:37:45,240 --> 00:37:48,359
double array and green box

712
00:37:48,359 --> 00:37:52,160
is a configure survey

713
00:37:52,500 --> 00:37:56,160
looking at looking at the first line

714
00:37:56,160 --> 00:38:00,720
we we put the fake structure ID into the

715
00:38:00,720 --> 00:38:04,200
index 0 or fake array

716
00:38:04,200 --> 00:38:09,319
then then the memory change like this

717
00:38:12,660 --> 00:38:16,380
in next slide we put the index 5 value

718
00:38:16,380 --> 00:38:19,440
of fake array into the index one or fake

719
00:38:19,440 --> 00:38:21,800
array

720
00:38:23,579 --> 00:38:26,579
after that change the value of index 5

721
00:38:26,579 --> 00:38:32,700
or fake array to Value Plus ox60 so c0

722
00:38:32,700 --> 00:38:35,400
mm-hmm

723
00:38:35,400 --> 00:38:37,140
this is a

724
00:38:37,140 --> 00:38:39,780
H sorry this is the memory shape that

725
00:38:39,780 --> 00:38:44,180
was executed before a lot

726
00:38:44,900 --> 00:38:48,359
in browser exploitation a lot is also

727
00:38:48,359 --> 00:38:50,040
good breakpoint

728
00:38:50,040 --> 00:38:53,280
also could break points uh could break

729
00:38:53,280 --> 00:38:55,500
point of course if you have done your

730
00:38:55,500 --> 00:38:58,500
exploit should should be removed or

731
00:38:58,500 --> 00:38:59,940
message

732
00:38:59,940 --> 00:39:03,780
so as you can see the value of index 5

733
00:39:03,780 --> 00:39:07,500
of pay query point to the index 0 of

734
00:39:07,500 --> 00:39:09,780
vehicle a

735
00:39:09,780 --> 00:39:12,200
questions

736
00:39:13,440 --> 00:39:16,200
as I mentioned the green box is

737
00:39:16,200 --> 00:39:19,079
contiguous array we are currently

738
00:39:19,079 --> 00:39:22,440
refreshing the index 0 of this

739
00:39:22,440 --> 00:39:25,400
contiguous array

740
00:39:28,020 --> 00:39:29,160
so

741
00:39:29,160 --> 00:39:32,220
when we access the index 0 in this

742
00:39:32,220 --> 00:39:35,460
contiguous array it will recognize the

743
00:39:35,460 --> 00:39:37,920
red box as an object

744
00:39:37,920 --> 00:39:42,780
recognize this uh recognize this address

745
00:39:42,780 --> 00:39:45,599
as the structure ID of the fake object

746
00:39:45,599 --> 00:39:49,140
then the address of tempo array is

747
00:39:49,140 --> 00:39:52,020
recognized as a butterfly pointer

748
00:39:52,020 --> 00:39:54,800
for this

749
00:39:54,980 --> 00:39:59,040
for this what will happen if we lead the

750
00:39:59,040 --> 00:40:04,040
index 0 of the continuous array

751
00:40:05,099 --> 00:40:09,920
the answer is the next slide

752
00:40:10,440 --> 00:40:14,720
uh looking at the next slide

753
00:40:15,359 --> 00:40:18,180
uh leads the index zero value over

754
00:40:18,180 --> 00:40:21,900
continuous array at this time the index

755
00:40:21,900 --> 00:40:25,859
0 0 value is patch patch based on the

756
00:40:25,859 --> 00:40:28,260
change the butterfly for now as you can

757
00:40:28,260 --> 00:40:30,380
see

758
00:40:30,599 --> 00:40:32,339
butterfly

759
00:40:32,339 --> 00:40:34,680
as you can see butterfly point to the

760
00:40:34,680 --> 00:40:36,300
10th array address

761
00:40:36,300 --> 00:40:37,500
so

762
00:40:37,500 --> 00:40:40,920
get structured ID stored in the actual

763
00:40:40,920 --> 00:40:44,839
temp array like this

764
00:40:46,579 --> 00:40:51,980
uh so you can you can't use this

765
00:40:53,820 --> 00:40:56,520
uh we almost there

766
00:40:56,520 --> 00:40:59,700
uh finally uh we only need to explain

767
00:40:59,700 --> 00:41:02,280
how to make the address all and fake

768
00:41:02,280 --> 00:41:04,140
object Primitives

769
00:41:04,140 --> 00:41:07,079
uh let's look at the order let's look at

770
00:41:07,079 --> 00:41:08,880
the others or method

771
00:41:08,880 --> 00:41:13,700
we need to focus on this Redbox

772
00:41:14,160 --> 00:41:18,119
first put the object first address you

773
00:41:18,119 --> 00:41:22,260
want to you want to find out in find out

774
00:41:22,260 --> 00:41:27,380
into index one of continuous array

775
00:41:27,839 --> 00:41:31,260
and after that it read it reads using

776
00:41:31,260 --> 00:41:34,320
fake array as you know fake already is

777
00:41:34,320 --> 00:41:38,339
double type array so okay then you can

778
00:41:38,339 --> 00:41:41,099
get an object object address in double

779
00:41:41,099 --> 00:41:43,579
permit

780
00:41:44,280 --> 00:41:47,400
now turn on the fake pack of the code

781
00:41:47,400 --> 00:41:51,180
similar to address of all method but a

782
00:41:51,180 --> 00:41:52,380
little bit different

783
00:41:52,380 --> 00:41:54,780
first we need to create we need to

784
00:41:54,780 --> 00:41:57,420
create a fake object in memory

785
00:41:57,420 --> 00:42:00,960
after that put the topic put the fake

786
00:42:00,960 --> 00:42:04,920
object address to the index 6 of fake

787
00:42:04,920 --> 00:42:07,280
array

788
00:42:09,140 --> 00:42:12,540
Now read the index one of continuous

789
00:42:12,540 --> 00:42:16,079
array the fake object pointed to by

790
00:42:16,079 --> 00:42:20,339
address is recognized as an as on object

791
00:42:20,339 --> 00:42:22,260
at this time

792
00:42:22,260 --> 00:42:25,260
Peg object must have a valid structure

793
00:42:25,260 --> 00:42:29,220
ID so that an error does not occurs

794
00:42:29,220 --> 00:42:32,160
the core of others of a fake object

795
00:42:32,160 --> 00:42:35,820
Primitives strong and store and load

796
00:42:35,820 --> 00:42:38,940
through arrays of different type from

797
00:42:38,940 --> 00:42:41,540
one shared butterfly

798
00:42:41,540 --> 00:42:45,320
so that's it

799
00:42:45,660 --> 00:42:47,220
um

800
00:42:47,220 --> 00:42:52,800
uh I I have posted I have posted what we

801
00:42:52,800 --> 00:42:55,380
have around so far on GitHub that this

802
00:42:55,380 --> 00:42:58,440
guitar and as a small solution for my

803
00:42:58,440 --> 00:43:01,140
English I'm also posting a version of

804
00:43:01,140 --> 00:43:04,560
this slide with my script now I switched

805
00:43:04,560 --> 00:43:07,099
to switch to public

806
00:43:07,099 --> 00:43:10,980
uh okay finally let's take a look at the

807
00:43:10,980 --> 00:43:13,640
demo

808
00:43:40,319 --> 00:43:42,740
much

809
00:43:45,180 --> 00:43:47,520
okay first

810
00:43:47,520 --> 00:43:49,079
three

811
00:43:49,079 --> 00:43:51,619
ah

812
00:43:52,040 --> 00:43:56,420
first uh check the browser version

813
00:43:56,520 --> 00:43:58,500
here

814
00:43:58,500 --> 00:44:00,859
sorry

815
00:44:03,140 --> 00:44:06,540
okay check the browser project and after

816
00:44:06,540 --> 00:44:10,279
that try to exploit

817
00:44:12,599 --> 00:44:14,900
foreign

818
00:44:25,099 --> 00:44:29,400
because uh it it occurs to one one

819
00:44:29,400 --> 00:44:33,480
predictive predicted butterfly address

820
00:44:33,480 --> 00:44:34,680
and

821
00:44:34,680 --> 00:44:39,660
then explore is keep running sorry

822
00:44:39,920 --> 00:44:42,900
exploit or restart

823
00:44:42,900 --> 00:44:46,579
the browser and

824
00:44:51,599 --> 00:44:54,619
ah restart

825
00:44:54,619 --> 00:44:57,839
our browser exploitation because

826
00:44:57,839 --> 00:45:00,660
um I'm in fact I prepared it for

827
00:45:00,660 --> 00:45:03,540
submission to font one so I only need to

828
00:45:03,540 --> 00:45:08,300
be successful successful in three times

829
00:45:12,900 --> 00:45:16,920
if the found array message is shown our

830
00:45:16,920 --> 00:45:20,060
export is success

831
00:45:24,599 --> 00:45:27,599
then

832
00:45:29,099 --> 00:45:31,440
crash the render browser

833
00:45:31,440 --> 00:45:36,240
so but the exploit is not the full

834
00:45:36,240 --> 00:45:39,000
explore chain so I only change to value

835
00:45:39,000 --> 00:45:41,780
of letters

836
00:45:43,200 --> 00:45:45,500
as you can see uh

837
00:45:45,500 --> 00:45:50,220
1337 can confirms so

838
00:45:50,220 --> 00:45:53,000
that's it

839
00:46:00,300 --> 00:46:03,960
uh thanks for listening to this store if

840
00:46:03,960 --> 00:46:06,180
you have experienced any trouble due to

841
00:46:06,180 --> 00:46:09,599
my English please complain on Twitter

842
00:46:09,599 --> 00:46:12,079
thanks

843
00:46:17,240 --> 00:46:19,560
thank you um there are a couple of

844
00:46:19,560 --> 00:46:20,520
questions

845
00:46:20,520 --> 00:46:23,099
uh what are some of the tools you use as

846
00:46:23,099 --> 00:46:24,839
part of your workflow for finding and

847
00:46:24,839 --> 00:46:29,599
debugging these vulnerabilities oh I

848
00:46:30,300 --> 00:46:34,079
um Truth for projecting or code auditing

849
00:46:34,079 --> 00:46:38,099
I make on my browser

850
00:46:38,099 --> 00:46:43,400
and debugging just lldb on Mac OS

851
00:46:43,440 --> 00:46:45,359
have you published your father is it

852
00:46:45,359 --> 00:46:48,960
available for people oh yeah I think I

853
00:46:48,960 --> 00:46:51,119
think I think a football league Crosser

854
00:46:51,119 --> 00:46:54,480
is uh that good for me because uh the

855
00:46:54,480 --> 00:46:56,420
other person already

856
00:46:56,420 --> 00:47:00,540
found that many box yeah okay thanks

857
00:47:00,540 --> 00:47:01,140
um

858
00:47:01,140 --> 00:47:04,020
if anybody answered anybody asked this

859
00:47:04,020 --> 00:47:05,099
question

860
00:47:05,099 --> 00:47:07,920
Anonymous all right are you able to

861
00:47:07,920 --> 00:47:10,440
share any limitations with angle

862
00:47:10,440 --> 00:47:11,760
oh

863
00:47:11,760 --> 00:47:16,500
limitation any limitation ah

864
00:47:16,500 --> 00:47:19,980
sorry uh anger is just a rapper rapper

865
00:47:19,980 --> 00:47:24,000
open jail yes so the

866
00:47:24,000 --> 00:47:27,000
means limitation I don't know what is

867
00:47:27,000 --> 00:47:30,920
limitation means uh

868
00:47:36,540 --> 00:47:39,660
but anger is a

869
00:47:39,660 --> 00:47:43,560
just I mentioned just opengl es report

870
00:47:43,560 --> 00:47:46,680
functions and they are some validation

871
00:47:46,680 --> 00:47:48,420
part and

872
00:47:48,420 --> 00:47:54,359
uh is uh only some developer make the

873
00:47:54,359 --> 00:47:58,079
validation routine and then this part

874
00:47:58,079 --> 00:47:59,359
that part

875
00:47:59,359 --> 00:48:02,060
maybe will be

876
00:48:02,060 --> 00:48:04,880
copied corruptedly

877
00:48:04,880 --> 00:48:07,200
mistake some mistake

878
00:48:07,200 --> 00:48:10,260
that part so uh

879
00:48:10,260 --> 00:48:12,660
if ah

880
00:48:12,660 --> 00:48:16,140
if my answer is not your correctly

881
00:48:16,140 --> 00:48:18,060
answered

882
00:48:18,060 --> 00:48:22,140
can I calm down and answer you

883
00:48:22,140 --> 00:48:24,480
come down yeah sure whoever asked that I

884
00:48:24,480 --> 00:48:26,339
guess it might be easier or if you want

885
00:48:26,339 --> 00:48:29,940
to explain now

886
00:48:29,940 --> 00:48:32,339
okay okay maybe they'll find you later

887
00:48:32,339 --> 00:48:34,740
okay all right uh thank you can we give

888
00:48:34,740 --> 00:48:37,939
him a round of applause again please

