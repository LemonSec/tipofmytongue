1
00:00:05,940 --> 00:00:07,859
yeah thanks everyone

2
00:00:07,859 --> 00:00:09,599
um for joining

3
00:00:09,599 --> 00:00:11,340
um my talk is about exploiting race

4
00:00:11,340 --> 00:00:13,440
conditions in web applications and I am

5
00:00:13,440 --> 00:00:14,940
very excited because this is the first

6
00:00:14,940 --> 00:00:16,560
time for me being in Singapore and I

7
00:00:16,560 --> 00:00:19,619
feel Hornet that my tour got accepted

8
00:00:19,619 --> 00:00:21,960
before we start with the start with the

9
00:00:21,960 --> 00:00:25,080
talk I want to say a few words about me

10
00:00:25,080 --> 00:00:28,439
so I'm a senior application security

11
00:00:28,439 --> 00:00:31,260
specialist at Sage so basically what I

12
00:00:31,260 --> 00:00:34,079
do is I support our software development

13
00:00:34,079 --> 00:00:35,520
teams in securing the software

14
00:00:35,520 --> 00:00:37,620
development life cycle by integrating

15
00:00:37,620 --> 00:00:40,280
tools securing pipelines General

16
00:00:40,280 --> 00:00:43,079
devsecops approach and shifting security

17
00:00:43,079 --> 00:00:44,280
left

18
00:00:44,280 --> 00:00:46,320
so I have a background in penetration

19
00:00:46,320 --> 00:00:48,840
testing and on the side I'm lecturing

20
00:00:48,840 --> 00:00:51,840
secure coding on the dhbw university in

21
00:00:51,840 --> 00:00:54,719
Germany I have a master degree in I.T

22
00:00:54,719 --> 00:00:56,340
Security Management and what I'm going

23
00:00:56,340 --> 00:00:59,879
to present you today this talk is a lot

24
00:00:59,879 --> 00:01:02,399
of of my research I did as my master

25
00:01:02,399 --> 00:01:03,899
dissertation

26
00:01:03,899 --> 00:01:07,020
and I have a couple of certifications

27
00:01:07,020 --> 00:01:10,680
I love open source project I have my own

28
00:01:10,680 --> 00:01:13,439
ones I contribute to open source project

29
00:01:13,439 --> 00:01:15,780
and especially in adsec for example two

30
00:01:15,780 --> 00:01:18,479
of us set and all everything you will

31
00:01:18,479 --> 00:01:20,900
find today in the slides and

32
00:01:20,900 --> 00:01:23,820
the the tool I've developed is

33
00:01:23,820 --> 00:01:25,140
everything published on my GitHub

34
00:01:25,140 --> 00:01:28,799
repository so all open source

35
00:01:28,799 --> 00:01:32,220
uh now the agenda today so we start with

36
00:01:32,220 --> 00:01:34,320
a short theory about what are race

37
00:01:34,320 --> 00:01:35,820
conditions at all

38
00:01:35,820 --> 00:01:38,579
then we have a wonderful web application

39
00:01:38,579 --> 00:01:41,340
so this was implemented to show real

40
00:01:41,340 --> 00:01:43,200
vulnerabilities real race condition

41
00:01:43,200 --> 00:01:46,200
vulnerabilities they are all inspired by

42
00:01:46,200 --> 00:01:48,360
a real bug Bounty reports by write-ups

43
00:01:48,360 --> 00:01:51,060
uh so yeah we needed that unable web

44
00:01:51,060 --> 00:01:53,100
application just to demonstrate also the

45
00:01:53,100 --> 00:01:54,979
attack tool which will be the next step

46
00:01:54,979 --> 00:01:58,079
uh so I've developed a new attack tool

47
00:01:58,079 --> 00:01:59,159
to exploit race condition

48
00:01:59,159 --> 00:02:01,619
vulnerabilities

49
00:02:01,619 --> 00:02:04,079
um then if I showed you this tool in

50
00:02:04,079 --> 00:02:07,079
live demo and we wrap this up with a

51
00:02:07,079 --> 00:02:08,220
conclusion

52
00:02:08,220 --> 00:02:10,800
so let's go to the theory

53
00:02:10,800 --> 00:02:13,319
what our race condition so when you

54
00:02:13,319 --> 00:02:15,420
Google race condition on uh you will

55
00:02:15,420 --> 00:02:19,379
find this ovas definition and I only

56
00:02:19,379 --> 00:02:21,660
want to focus on very last sentences of

57
00:02:21,660 --> 00:02:24,060
this definition uh it says race

58
00:02:24,060 --> 00:02:26,040
conditions by the nature they are very

59
00:02:26,040 --> 00:02:28,680
difficult to test for and they totally

60
00:02:28,680 --> 00:02:30,720
agree and there's also the impression I

61
00:02:30,720 --> 00:02:32,760
got up with speaking some of you folks

62
00:02:32,760 --> 00:02:36,840
uh before this talk so um

63
00:02:36,840 --> 00:02:39,060
yeah it's when testing for race

64
00:02:39,060 --> 00:02:41,459
conditions it's all about timing so it's

65
00:02:41,459 --> 00:02:43,440
very difficult to reproduce and and

66
00:02:43,440 --> 00:02:46,260
stuff like that and also miter they

67
00:02:46,260 --> 00:02:48,540
mentioned on their website also uh it's

68
00:02:48,540 --> 00:02:51,300
a research step so I think there's

69
00:02:51,300 --> 00:02:53,879
little known about race conditions and

70
00:02:53,879 --> 00:02:56,400
there's still much to learn about them

71
00:02:56,400 --> 00:02:59,519
how we improve our exploitation and our

72
00:02:59,519 --> 00:03:02,160
tool set to to find them or protect us

73
00:03:02,160 --> 00:03:04,319
from race condition vulnerabilities

74
00:03:04,319 --> 00:03:06,239
and also

75
00:03:06,239 --> 00:03:08,879
um for example I think it's often

76
00:03:08,879 --> 00:03:11,340
overlooked by a penetration test because

77
00:03:11,340 --> 00:03:13,500
for example it's currently not mentioned

78
00:03:13,500 --> 00:03:16,260
in the ovas testing guide so

79
00:03:16,260 --> 00:03:18,900
um yeah it's it was mentioned in the

80
00:03:18,900 --> 00:03:20,340
overs testing guide and previous version

81
00:03:20,340 --> 00:03:23,640
but it's not currently but again what

82
00:03:23,640 --> 00:03:25,739
are race conditions I didn't explain it

83
00:03:25,739 --> 00:03:28,260
yet so race conditions they they are

84
00:03:28,260 --> 00:03:30,239
when you have a shared resource this

85
00:03:30,239 --> 00:03:32,640
could be a file on the device systems

86
00:03:32,640 --> 00:03:35,099
can be data on database and you have

87
00:03:35,099 --> 00:03:37,680
multiple processes accessing or working

88
00:03:37,680 --> 00:03:39,900
with this shared data with this in the

89
00:03:39,900 --> 00:03:42,120
database and

90
00:03:42,120 --> 00:03:44,720
a race condition occurs when you have

91
00:03:44,720 --> 00:03:49,080
overlapping processes uh like multiple

92
00:03:49,080 --> 00:03:50,940
processing working with the shared data

93
00:03:50,940 --> 00:03:53,220
and then you get unintended results

94
00:03:53,220 --> 00:03:55,500
that's the race condition

95
00:03:55,500 --> 00:03:58,500
unintended results by multiple parallel

96
00:03:58,500 --> 00:04:01,080
processes working on the same shared

97
00:04:01,080 --> 00:04:02,159
data

98
00:04:02,159 --> 00:04:03,360
so

99
00:04:03,360 --> 00:04:06,720
knock knock with the rest condition so

100
00:04:06,720 --> 00:04:08,459
that's a common choke about race

101
00:04:08,459 --> 00:04:11,099
conditions so this is one example how

102
00:04:11,099 --> 00:04:12,720
one could look like like you have one

103
00:04:12,720 --> 00:04:14,760
process doing the knock knock and the

104
00:04:14,760 --> 00:04:16,260
who is there and then you have another

105
00:04:16,260 --> 00:04:19,079
process jumping in in between this and

106
00:04:19,079 --> 00:04:21,418
doing the Race condition like that there

107
00:04:21,418 --> 00:04:24,859
is a time delay somewhere

108
00:04:25,380 --> 00:04:28,800
but then does this became a security

109
00:04:28,800 --> 00:04:31,620
issue why do we need to care so there

110
00:04:31,620 --> 00:04:35,580
are many examples and I will have a few

111
00:04:35,580 --> 00:04:38,460
of them for you so um

112
00:04:38,460 --> 00:04:41,040
it's often like for for example when you

113
00:04:41,040 --> 00:04:44,160
uh would be an anti-proof force in

114
00:04:44,160 --> 00:04:46,080
mechanism where you have for example a

115
00:04:46,080 --> 00:04:48,840
rate limit so if you can bypass that

116
00:04:48,840 --> 00:04:50,460
rate limit then it becomes a security

117
00:04:50,460 --> 00:04:54,060
issue or also other scenarios we've seen

118
00:04:54,060 --> 00:04:56,360
and also later implemented in the

119
00:04:56,360 --> 00:05:00,240
demo application is uh you can like when

120
00:05:00,240 --> 00:05:02,460
you have a banking account and your

121
00:05:02,460 --> 00:05:04,680
withdraw money and you can overspend

122
00:05:04,680 --> 00:05:07,020
your banking account so that is a check

123
00:05:07,020 --> 00:05:09,540
which prevents you from overspending by

124
00:05:09,540 --> 00:05:11,520
the by exploiting the race condition

125
00:05:11,520 --> 00:05:13,919
vulnerability you are able to overspend

126
00:05:13,919 --> 00:05:16,979
your account and and things like that

127
00:05:16,979 --> 00:05:19,919
um for example multiple voting uh you

128
00:05:19,919 --> 00:05:22,320
know Twitter you have you can like uh

129
00:05:22,320 --> 00:05:25,020
press like on the Tweet there and it's

130
00:05:25,020 --> 00:05:28,440
only allowed to to vote once per account

131
00:05:28,440 --> 00:05:30,600
yeah but actually this is a real

132
00:05:30,600 --> 00:05:32,520
vulnerability report uh Twitter was

133
00:05:32,520 --> 00:05:34,380
vulnerable to this race condition that's

134
00:05:34,380 --> 00:05:37,259
why I'm mentioning it so if you are able

135
00:05:37,259 --> 00:05:39,180
to submit multiple votes so you can

136
00:05:39,180 --> 00:05:41,460
tamper this uh that's uh that's also

137
00:05:41,460 --> 00:05:43,919
then a security issue and even

138
00:05:43,919 --> 00:05:46,380
uh cross site reaches Factory they are

139
00:05:46,380 --> 00:05:49,380
designed to be used only once what if

140
00:05:49,380 --> 00:05:52,979
you can uh reuse them multiple times

141
00:05:52,979 --> 00:05:55,620
um by exploiting a race condition so

142
00:05:55,620 --> 00:05:57,259
there are plenty of

143
00:05:57,259 --> 00:06:00,300
uh examples

144
00:06:00,300 --> 00:06:03,300
um I brought two very big examples with

145
00:06:03,300 --> 00:06:06,479
me here in slides because uh they had a

146
00:06:06,479 --> 00:06:09,720
really big back Bounty payout uh one was

147
00:06:09,720 --> 00:06:13,620
here from from last year AWS uh Cognito

148
00:06:13,620 --> 00:06:15,900
this was able to someone a researcher

149
00:06:15,900 --> 00:06:18,660
was able to bypass uh the password

150
00:06:18,660 --> 00:06:21,600
preset code the the rate limiting on

151
00:06:21,600 --> 00:06:24,900
this one so they had a rate limit thing

152
00:06:24,900 --> 00:06:25,919
for

153
00:06:25,919 --> 00:06:28,020
um that you are only allowed to submit

154
00:06:28,020 --> 00:06:32,400
20 times a six digit code

155
00:06:32,400 --> 00:06:35,520
and by and because of the race condition

156
00:06:35,520 --> 00:06:37,380
vulnerability the researcher was able to

157
00:06:37,380 --> 00:06:40,139
submit more than 1 000 uh tries of that

158
00:06:40,139 --> 00:06:44,819
uh six digit code and and also the other

159
00:06:44,819 --> 00:06:48,539
example in AWS and Microsoft

160
00:06:48,539 --> 00:06:51,120
um in in the password reset in the login

161
00:06:51,120 --> 00:06:53,400
function it was

162
00:06:53,400 --> 00:06:55,919
um the same issue and that this led to

163
00:06:55,919 --> 00:06:58,500
account takeover which I think does have

164
00:06:58,500 --> 00:07:00,300
a very high or critical impact and

165
00:07:00,300 --> 00:07:02,039
that's why the web Bounty paired was

166
00:07:02,039 --> 00:07:04,860
that high so for Instagram it was thirty

167
00:07:04,860 --> 00:07:07,139
thousand dollars and for Microsoft it

168
00:07:07,139 --> 00:07:08,880
was fifty thousand dollars for that

169
00:07:08,880 --> 00:07:11,039
researcher and I just wanted to show you

170
00:07:11,039 --> 00:07:13,380
this example that race conditions can

171
00:07:13,380 --> 00:07:16,620
have a really high impact uh yeah

172
00:07:16,620 --> 00:07:18,479
so um

173
00:07:18,479 --> 00:07:22,380
I also brought a PHP example with me a

174
00:07:22,380 --> 00:07:25,860
short code snippet and my question is

175
00:07:25,860 --> 00:07:28,740
can you spot the race condition so for

176
00:07:28,740 --> 00:07:31,020
PHP it's a

177
00:07:31,020 --> 00:07:33,560
by Nature it's a multiple

178
00:07:33,560 --> 00:07:35,300
multi-processing

179
00:07:35,300 --> 00:07:38,400
language and

180
00:07:38,400 --> 00:07:40,199
um yeah when you when you see that code

181
00:07:40,199 --> 00:07:42,120
here I brought you it's only the seven

182
00:07:42,120 --> 00:07:43,380
line of codes but there's a race

183
00:07:43,380 --> 00:07:46,440
condition in it and very similar

184
00:07:46,440 --> 00:07:48,900
examples if you go to the official PHP

185
00:07:48,900 --> 00:07:51,479
dogs then search for functions for the

186
00:07:51,479 --> 00:07:53,880
MySQL functions over there you will find

187
00:07:53,880 --> 00:07:55,800
these examples this is that's what you

188
00:07:55,800 --> 00:07:57,840
see in stack Overflow that's a real code

189
00:07:57,840 --> 00:07:59,160
snippet but

190
00:07:59,160 --> 00:08:00,960
they are vulnerable to race conditions

191
00:08:00,960 --> 00:08:03,599
and you what development developer do

192
00:08:03,599 --> 00:08:05,280
they look something up and take over the

193
00:08:05,280 --> 00:08:08,520
phone they copy the code and uh yeah

194
00:08:08,520 --> 00:08:12,539
so um what does this code does here is

195
00:08:12,539 --> 00:08:14,759
um it's like a withdrawal function like

196
00:08:14,759 --> 00:08:17,280
I mentioned you have the table users you

197
00:08:17,280 --> 00:08:19,860
you have the credit and then in on line

198
00:08:19,860 --> 00:08:22,680
four you check if there's still enough

199
00:08:22,680 --> 00:08:25,800
amount to withdrawal on your credit and

200
00:08:25,800 --> 00:08:27,720
then I

201
00:08:27,720 --> 00:08:30,060
you withdraw the amount of money from

202
00:08:30,060 --> 00:08:31,860
your credit and then you in line six you

203
00:08:31,860 --> 00:08:34,440
update the the users tables again with

204
00:08:34,440 --> 00:08:36,899
you credit

205
00:08:36,899 --> 00:08:39,179
so a withdrawal function with like a

206
00:08:39,179 --> 00:08:42,120
banking account and uh yeah there's a

207
00:08:42,120 --> 00:08:44,700
race window between line two and six so

208
00:08:44,700 --> 00:08:49,620
there are is a very small uh time window

209
00:08:49,620 --> 00:08:50,519
um

210
00:08:50,519 --> 00:08:51,959
which

211
00:08:51,959 --> 00:08:55,080
um yeah another process could

212
00:08:55,080 --> 00:08:58,080
um hit in and then um yeah there's a

213
00:08:58,080 --> 00:09:01,440
small delay in only in milliseconds but

214
00:09:01,440 --> 00:09:03,300
um if someone is sending multiple

215
00:09:03,300 --> 00:09:05,580
requests and at this end point and he's

216
00:09:05,580 --> 00:09:07,339
catching the right moment the right time

217
00:09:07,339 --> 00:09:10,920
only milliseconds of time then this he

218
00:09:10,920 --> 00:09:13,680
could work on a uh yeah not recent

219
00:09:13,680 --> 00:09:17,839
version of the credit table here

220
00:09:17,959 --> 00:09:19,560
and

221
00:09:19,560 --> 00:09:22,440
um I I've only uh edited three

222
00:09:22,440 --> 00:09:24,600
suggestions how you can can fix this

223
00:09:24,600 --> 00:09:26,279
solution but I could have made a whole

224
00:09:26,279 --> 00:09:29,760
presentation only about preventing race

225
00:09:29,760 --> 00:09:31,320
conditions and different coding

226
00:09:31,320 --> 00:09:35,100
languages so that's only a few ideas so

227
00:09:35,100 --> 00:09:37,200
you could add a logging before locking

228
00:09:37,200 --> 00:09:39,779
before line two and after line six just

229
00:09:39,779 --> 00:09:42,660
that no one else can work on this shared

230
00:09:42,660 --> 00:09:44,820
resource at the same time this is the

231
00:09:44,820 --> 00:09:47,399
most obvious one

232
00:09:47,399 --> 00:09:51,000
um I I liked solution too because this

233
00:09:51,000 --> 00:09:53,880
is like a fail safe solution you can add

234
00:09:53,880 --> 00:09:55,620
additional condition to the updates

235
00:09:55,620 --> 00:09:59,640
statement so where you compare the

236
00:09:59,640 --> 00:10:01,560
additional condition that you compare is

237
00:10:01,560 --> 00:10:03,000
the credit did The Temper in the

238
00:10:03,000 --> 00:10:05,940
meantime was it changed so then you

239
00:10:05,940 --> 00:10:09,120
could just say Okay fail uh

240
00:10:09,120 --> 00:10:12,300
um so it got changed to um

241
00:10:12,300 --> 00:10:14,100
um creating the media Maybe by another

242
00:10:14,100 --> 00:10:16,860
process and that's how you could also

243
00:10:16,860 --> 00:10:18,360
detect the race condition uh

244
00:10:18,360 --> 00:10:20,640
vulnerability because you have this fail

245
00:10:20,640 --> 00:10:23,399
option then you can say Okay

246
00:10:23,399 --> 00:10:25,200
um I add a sensor I did a detection

247
00:10:25,200 --> 00:10:28,080
point in my uh application and then I

248
00:10:28,080 --> 00:10:30,720
make alerted and notify me that there

249
00:10:30,720 --> 00:10:32,220
was a race condition somewhere in my

250
00:10:32,220 --> 00:10:35,100
code that would be nice idea and also

251
00:10:35,100 --> 00:10:38,339
last option but not least is you could

252
00:10:38,339 --> 00:10:41,760
change the whole code to select for

253
00:10:41,760 --> 00:10:44,220
update statement if it's possible I

254
00:10:44,220 --> 00:10:45,779
think in that case it would be possible

255
00:10:45,779 --> 00:10:49,320
to write everything into one SQL

256
00:10:49,320 --> 00:10:52,260
statement all the everything because if

257
00:10:52,260 --> 00:10:55,079
you uh have everything in one SQL

258
00:10:55,079 --> 00:10:57,360
statement there won't be any time delay

259
00:10:57,360 --> 00:11:00,839
so you don't have a race window of

260
00:11:00,839 --> 00:11:02,459
course if you have multiple SQL

261
00:11:02,459 --> 00:11:05,339
statements uh next to this order then

262
00:11:05,339 --> 00:11:08,040
that is again A Time window between them

263
00:11:08,040 --> 00:11:12,540
yeah but it's this example in PHP and we

264
00:11:12,540 --> 00:11:13,920
could do this with other languages as

265
00:11:13,920 --> 00:11:16,920
well but yeah

266
00:11:16,920 --> 00:11:18,180
yeah so

267
00:11:18,180 --> 00:11:20,220
um let's go to the vulnerable web

268
00:11:20,220 --> 00:11:22,560
application the demo

269
00:11:22,560 --> 00:11:24,720
so um I I've implemented free attack

270
00:11:24,720 --> 00:11:26,880
scenarios they're all inspired by real

271
00:11:26,880 --> 00:11:28,980
real examples

272
00:11:28,980 --> 00:11:32,220
um the first one challenge one

273
00:11:32,220 --> 00:11:34,339
is to withdraw money

274
00:11:34,339 --> 00:11:37,019
uh if you have like the code I just

275
00:11:37,019 --> 00:11:38,579
showed

276
00:11:38,579 --> 00:11:41,579
then uh or the challenge tool the vote

277
00:11:41,579 --> 00:11:43,320
must submission like the like

278
00:11:43,320 --> 00:11:44,940
indications this example from the

279
00:11:44,940 --> 00:11:45,959
Twitter code

280
00:11:45,959 --> 00:11:49,079
and Challenge free is the examples I

281
00:11:49,079 --> 00:11:50,480
showed you from the multi-factor

282
00:11:50,480 --> 00:11:53,100
autophagation that you try to bypass a

283
00:11:53,100 --> 00:11:54,779
rate Limited

284
00:11:54,779 --> 00:11:58,260
so I also added a CVSs score on all

285
00:11:58,260 --> 00:12:00,480
these challenges just to show you uh the

286
00:12:00,480 --> 00:12:02,399
different impact this could have

287
00:12:02,399 --> 00:12:05,300
um yeah

288
00:12:05,339 --> 00:12:08,339
so uh you can try it by your own also so

289
00:12:08,339 --> 00:12:10,380
this vulnerable web application is

290
00:12:10,380 --> 00:12:13,800
published on GitHub it's based on a

291
00:12:13,800 --> 00:12:17,880
Docker compose PHP Maria DB so the

292
00:12:17,880 --> 00:12:20,880
latest versions and you see on the right

293
00:12:20,880 --> 00:12:23,399
side there's a screenshot from from this

294
00:12:23,399 --> 00:12:26,279
demo application I did not care much

295
00:12:26,279 --> 00:12:29,339
about HTML and design because the race

296
00:12:29,339 --> 00:12:31,140
condition is in the back end somewhere

297
00:12:31,140 --> 00:12:34,740
it's in the PHP logic so not not that

298
00:12:34,740 --> 00:12:36,420
much the sign of the one of the web

299
00:12:36,420 --> 00:12:38,160
application but this does this it's

300
00:12:38,160 --> 00:12:39,180
Sharp

301
00:12:39,180 --> 00:12:41,160
so yeah

302
00:12:41,160 --> 00:12:45,899
then the next one uh I tried to detect

303
00:12:45,899 --> 00:12:47,820
or prevent that race condition I just

304
00:12:47,820 --> 00:12:50,120
implemented in in the demo application

305
00:12:50,120 --> 00:12:52,740
uh yeah you know my job title is

306
00:12:52,740 --> 00:12:55,019
application security specialist I do

307
00:12:55,019 --> 00:12:58,019
these secure sdlc stuffs and then I

308
00:12:58,019 --> 00:13:00,779
tried very hard I deployed everything I

309
00:13:00,779 --> 00:13:04,380
have like I have uh added a proxy web

310
00:13:04,380 --> 00:13:05,940
application firewall in front of

311
00:13:05,940 --> 00:13:07,440
everything deploy the runtime

312
00:13:07,440 --> 00:13:09,899
application sales protection I've run

313
00:13:09,899 --> 00:13:13,139
steady code analysis I did Dynamic

314
00:13:13,139 --> 00:13:14,880
application security testing with

315
00:13:14,880 --> 00:13:17,940
overstep I tried everything I could but

316
00:13:17,940 --> 00:13:19,980
you see on the right side this

317
00:13:19,980 --> 00:13:22,440
screenshot from a commercial uh steady

318
00:13:22,440 --> 00:13:24,480
code analysis I don't want to trap drop

319
00:13:24,480 --> 00:13:27,060
any commercial names of the tools I've

320
00:13:27,060 --> 00:13:28,500
used but

321
00:13:28,500 --> 00:13:31,560
um yeah you see it detected some issues

322
00:13:31,560 --> 00:13:33,959
in in my code like a hard-coded secret

323
00:13:33,959 --> 00:13:37,380
of course it's a POC uh test but it did

324
00:13:37,380 --> 00:13:38,399
not find a race condition

325
00:13:38,399 --> 00:13:40,680
vulnerabilities I and I think they were

326
00:13:40,680 --> 00:13:42,620
very obvious

327
00:13:42,620 --> 00:13:46,019
and yeah and even the vendors the static

328
00:13:46,019 --> 00:13:48,240
code and I just I I use the claim to

329
00:13:48,240 --> 00:13:50,519
they claim to detect race condition

330
00:13:50,519 --> 00:13:52,680
vulnerabilities in PHP but they didn't

331
00:13:52,680 --> 00:13:59,639
so uh yeah what what can can we do now I

332
00:13:59,639 --> 00:14:03,060
but I I think this this resource

333
00:14:03,060 --> 00:14:05,519
um in the following conclusion that we

334
00:14:05,519 --> 00:14:08,040
we still need penetration testing we

335
00:14:08,040 --> 00:14:10,980
still need a human thinking about test

336
00:14:10,980 --> 00:14:13,139
cases and thinking he knows the business

337
00:14:13,139 --> 00:14:15,060
logic best and

338
00:14:15,060 --> 00:14:17,160
um you saw that there are a lot of ifs

339
00:14:17,160 --> 00:14:19,500
if you test for race conditions like you

340
00:14:19,500 --> 00:14:22,200
need like a monetizing somewhere like

341
00:14:22,200 --> 00:14:24,240
withdrawing it needs to make sense to

342
00:14:24,240 --> 00:14:25,800
exploit it that it becomes a real

343
00:14:25,800 --> 00:14:28,500
security issue and I think there's only

344
00:14:28,500 --> 00:14:32,639
a human can do by doing tests and

345
00:14:32,639 --> 00:14:35,339
um yeah a dynamic applications you could

346
00:14:35,339 --> 00:14:37,560
security testing tools maybe sometimes

347
00:14:37,560 --> 00:14:41,399
can't and but I I was shocked that the

348
00:14:41,399 --> 00:14:44,699
SAS tooling didn't find it so

349
00:14:44,699 --> 00:14:47,100
um I I hope that at least that this

350
00:14:47,100 --> 00:14:48,720
would protect us

351
00:14:48,720 --> 00:14:53,279
so let's go to the attack tool and try

352
00:14:53,279 --> 00:14:55,199
to attack what we just implemented the

353
00:14:55,199 --> 00:14:58,320
vulnerable test cases into our code and

354
00:14:58,320 --> 00:15:00,720
I before I do so I want to also show you

355
00:15:00,720 --> 00:15:03,000
the existing testing tool landscape you

356
00:15:03,000 --> 00:15:05,940
have like the common tools you can use

357
00:15:05,940 --> 00:15:09,300
RC exploit erase the web is raise the

358
00:15:09,300 --> 00:15:11,699
web he did the guy who implemented it

359
00:15:11,699 --> 00:15:14,160
did a very good presentation on it a

360
00:15:14,160 --> 00:15:16,800
race Pawn security racer is a browser

361
00:15:16,800 --> 00:15:19,440
add-on and of course the turbo Intruder

362
00:15:19,440 --> 00:15:21,000
which is also very common to test for

363
00:15:21,000 --> 00:15:22,380
race conditions

364
00:15:22,380 --> 00:15:25,740
so all these tools tools they they have

365
00:15:25,740 --> 00:15:27,600
like two types how that how they work

366
00:15:27,600 --> 00:15:30,180
the first one is you have a parallel

367
00:15:30,180 --> 00:15:33,000
function uh which means each HTTP

368
00:15:33,000 --> 00:15:35,160
request you send does have its own

369
00:15:35,160 --> 00:15:37,980
connection and then they use one tricks

370
00:15:37,980 --> 00:15:40,320
not all of them but some do this one

371
00:15:40,320 --> 00:15:42,720
trick that they have the last byte of

372
00:15:42,720 --> 00:15:45,660
the HTTP request and then you send this

373
00:15:45,660 --> 00:15:48,060
a little bit delayed and then uh yeah

374
00:15:48,060 --> 00:15:49,320
this improves

375
00:15:49,320 --> 00:15:51,300
um the speed a lot because you can

376
00:15:51,300 --> 00:15:54,000
pre-load a lot of requests and then send

377
00:15:54,000 --> 00:15:55,440
the last byte from all these three

378
00:15:55,440 --> 00:15:58,740
quests at once and then uh you have

379
00:15:58,740 --> 00:16:00,720
um all your very small time window

380
00:16:00,720 --> 00:16:03,540
between each request and that's why they

381
00:16:03,540 --> 00:16:05,459
work like this and then you also have

382
00:16:05,459 --> 00:16:08,100
the pipeline function uh where you can

383
00:16:08,100 --> 00:16:11,100
add multiple HTTP requests into one TCP

384
00:16:11,100 --> 00:16:14,160
frame uh this also saves a lot of time

385
00:16:14,160 --> 00:16:17,579
so like I mentioned uh risk exploiting

386
00:16:17,579 --> 00:16:19,199
race condition is all about time you

387
00:16:19,199 --> 00:16:21,600
need a very small small time window and

388
00:16:21,600 --> 00:16:25,019
that's why we care a lot of the

389
00:16:25,019 --> 00:16:27,360
performance of our sending our HTTP

390
00:16:27,360 --> 00:16:30,480
requests and I I want to mention curl

391
00:16:30,480 --> 00:16:34,440
because I I researched a lot I uh back

392
00:16:34,440 --> 00:16:37,259
Bounty reports writers and everyone some

393
00:16:37,259 --> 00:16:39,240
of these reports they just change

394
00:16:39,240 --> 00:16:41,339
multiple curl requests with the end

395
00:16:41,339 --> 00:16:44,100
operator I mean the stores it's short

396
00:16:44,100 --> 00:16:46,320
but there is a way better option you

397
00:16:46,320 --> 00:16:48,720
could use that because curl introduced

398
00:16:48,720 --> 00:16:51,839
in 2019 a new flag is called parallel or

399
00:16:51,839 --> 00:16:55,139
minus set and that's this like sending

400
00:16:55,139 --> 00:16:57,240
multiple curl requests at once it's very

401
00:16:57,240 --> 00:16:59,759
good and improves the performance of

402
00:16:59,759 --> 00:17:01,560
your if you press request if you use

403
00:17:01,560 --> 00:17:04,079
Curl so I haven't seen this anywhere

404
00:17:04,079 --> 00:17:05,699
that's why I want to mention it because

405
00:17:05,699 --> 00:17:07,799
it's still an option to to use Curl with

406
00:17:07,799 --> 00:17:09,299
the parallel function

407
00:17:09,299 --> 00:17:12,000
um yeah so

408
00:17:12,000 --> 00:17:13,859
um but now now I want to present you to

409
00:17:13,859 --> 00:17:16,020
to attack tool I've developed some

410
00:17:16,020 --> 00:17:17,819
improvement from the existing tool

411
00:17:17,819 --> 00:17:20,939
landscape so that's my proposed Tool uh

412
00:17:20,939 --> 00:17:22,799
basically it's uh

413
00:17:22,799 --> 00:17:25,199
a browser extension

414
00:17:25,199 --> 00:17:27,419
um to intercept the request while you

415
00:17:27,419 --> 00:17:30,000
work with the application and then you

416
00:17:30,000 --> 00:17:32,520
can select a request you want to attack

417
00:17:32,520 --> 00:17:34,020
like

418
00:17:34,020 --> 00:17:36,299
um could be any API coil of your

419
00:17:36,299 --> 00:17:38,220
application you selected forward it to

420
00:17:38,220 --> 00:17:40,140
to the tool

421
00:17:40,140 --> 00:17:44,340
um and but it does also have over step

422
00:17:44,340 --> 00:17:46,679
integration uh so you don't need to use

423
00:17:46,679 --> 00:17:49,080
the browser add-on you and it also just

424
00:17:49,080 --> 00:17:51,840
have a API so you could integrate it

425
00:17:51,840 --> 00:17:54,840
into CI CD testing if you want

426
00:17:54,840 --> 00:17:55,980
um

427
00:17:55,980 --> 00:17:58,200
yeah so it's just about selecting the

428
00:17:58,200 --> 00:18:00,419
the request you want to attack and then

429
00:18:00,419 --> 00:18:03,900
you forward it to the to a dispatcher so

430
00:18:03,900 --> 00:18:06,900
now you need a race in a routine

431
00:18:06,900 --> 00:18:09,059
infrastructure to set it up so I wanted

432
00:18:09,059 --> 00:18:10,980
to I didn't want to run this on my local

433
00:18:10,980 --> 00:18:13,080
machine I wanted to have the best

434
00:18:13,080 --> 00:18:14,700
performance I could get so that I wanted

435
00:18:14,700 --> 00:18:16,799
this to be on a data center anywhere

436
00:18:16,799 --> 00:18:19,200
deployed maybe next to my target that I

437
00:18:19,200 --> 00:18:20,760
want to attack because I want a very

438
00:18:20,760 --> 00:18:23,520
short delay on everything and and then

439
00:18:23,520 --> 00:18:25,140
was also different from the existing

440
00:18:25,140 --> 00:18:27,059
tools that I want to take use of

441
00:18:27,059 --> 00:18:30,000
multiple servers doing this I multiple

442
00:18:30,000 --> 00:18:32,760
server sending parallel requests and try

443
00:18:32,760 --> 00:18:34,799
to get these requests with a very short

444
00:18:34,799 --> 00:18:37,919
delay in between so uh that's

445
00:18:37,919 --> 00:18:40,799
um yeah what you can see here then uh

446
00:18:40,799 --> 00:18:42,960
like this this routine infrastructure

447
00:18:42,960 --> 00:18:45,360
this this Patcher is forwarding to the

448
00:18:45,360 --> 00:18:47,640
other servers and then the the request

449
00:18:47,640 --> 00:18:50,400
gets sent in parallel with a very short

450
00:18:50,400 --> 00:18:53,000
delay

451
00:18:54,000 --> 00:18:56,940
yeah that's that's the um some some

452
00:18:56,940 --> 00:18:59,340
stats here from from testing this out so

453
00:18:59,340 --> 00:19:01,740
uh what you see in that case I use two

454
00:19:01,740 --> 00:19:03,780
Ray servers two sending two servers

455
00:19:03,780 --> 00:19:06,600
sending parallel requests and uh you see

456
00:19:06,600 --> 00:19:08,960
there was an overlapping so each point

457
00:19:08,960 --> 00:19:12,539
means one HTTP request processed on the

458
00:19:12,539 --> 00:19:15,780
Target and I wanted to have a very very

459
00:19:15,780 --> 00:19:17,100
short delay because it's all about

460
00:19:17,100 --> 00:19:20,039
millisecond milliseconds here and you

461
00:19:20,039 --> 00:19:22,080
see by using multiple servers you can

462
00:19:22,080 --> 00:19:26,880
get more request uh processed on a very

463
00:19:26,880 --> 00:19:29,400
same time on on your Target and this

464
00:19:29,400 --> 00:19:31,679
makes exploitation a successful

465
00:19:31,679 --> 00:19:33,780
exploitation makes it more success uh

466
00:19:33,780 --> 00:19:36,720
yeah probability problem

467
00:19:36,720 --> 00:19:40,559
so um yeah you see in in average for

468
00:19:40,559 --> 00:19:43,799
that test case it was a 1.92

469
00:19:43,799 --> 00:19:46,980
milliseconds uh between each request

470
00:19:46,980 --> 00:19:49,919
that uh came to the Target I didn't use

471
00:19:49,919 --> 00:19:52,500
the metric uh request per seconds or

472
00:19:52,500 --> 00:19:55,380
something I I wanted to see the the real

473
00:19:55,380 --> 00:19:57,960
time on the target between each uh

474
00:19:57,960 --> 00:19:59,580
request being processed by because

475
00:19:59,580 --> 00:20:01,919
that's what's matter when you exploit

476
00:20:01,919 --> 00:20:03,299
the race conditions the time on the

477
00:20:03,299 --> 00:20:05,520
Target and not what the tool is able to

478
00:20:05,520 --> 00:20:08,580
send how many requested to it's only the

479
00:20:08,580 --> 00:20:10,980
time of the Target and

480
00:20:10,980 --> 00:20:12,720
yeah

481
00:20:12,720 --> 00:20:15,360
good yeah let's uh take a look into the

482
00:20:15,360 --> 00:20:19,260
demo uh how it works in action

483
00:20:19,260 --> 00:20:20,580
so

484
00:20:20,580 --> 00:20:22,080
um we have this

485
00:20:22,080 --> 00:20:24,660
vulnerable web application we this time

486
00:20:24,660 --> 00:20:28,860
I show it to you with the browser add-in

487
00:20:28,860 --> 00:20:31,080
and I started monitoring on the

488
00:20:31,080 --> 00:20:33,120
browserden

489
00:20:33,120 --> 00:20:35,700
um so you see on the left there are the

490
00:20:35,700 --> 00:20:37,320
challenges I've implemented like the

491
00:20:37,320 --> 00:20:40,500
proof of conception uh I I'm now trying

492
00:20:40,500 --> 00:20:42,980
to attack the one which is doing the

493
00:20:42,980 --> 00:20:46,580
votes like I I should be only able to

494
00:20:46,580 --> 00:20:49,860
submit one vote for one picture like uh

495
00:20:49,860 --> 00:20:52,559
or one fitter feed only once from one

496
00:20:52,559 --> 00:20:54,539
user ID so there's a limitation

497
00:20:54,539 --> 00:20:56,460
implemented by the business logic of the

498
00:20:56,460 --> 00:20:58,860
application and now I am trying to

499
00:20:58,860 --> 00:21:01,980
attack that uh that request which is

500
00:21:01,980 --> 00:21:06,500
doing this which is submitting the vote

501
00:21:06,600 --> 00:21:10,140
so I'm now forwarding this uh request to

502
00:21:10,140 --> 00:21:12,900
my dispatcher on my race routine

503
00:21:12,900 --> 00:21:15,539
infrastructure and you see there's also

504
00:21:15,539 --> 00:21:19,140
a list of servers so this is the servers

505
00:21:19,140 --> 00:21:21,600
which are going to execute acute the

506
00:21:21,600 --> 00:21:26,520
actual HTTP request to the targets

507
00:21:26,520 --> 00:21:27,419
um

508
00:21:27,419 --> 00:21:29,820
so now you want to dispatcher and now we

509
00:21:29,820 --> 00:21:33,600
started the racing and here we see it

510
00:21:33,600 --> 00:21:35,220
worked and now I go back to the

511
00:21:35,220 --> 00:21:37,640
application

512
00:21:37,799 --> 00:21:40,320
and when I

513
00:21:40,320 --> 00:21:41,039
um

514
00:21:41,039 --> 00:21:44,820
refresh the fuel now I see I was able to

515
00:21:44,820 --> 00:21:48,299
submit multiple likes from the same user

516
00:21:48,299 --> 00:21:52,559
ID so I was able to bypass this bypass

517
00:21:52,559 --> 00:21:54,720
this limitation uh some involutable

518
00:21:54,720 --> 00:21:57,919
likes by one user ID

519
00:21:59,700 --> 00:22:03,620
so let's remove it worked

520
00:22:07,200 --> 00:22:10,559
let's come to the conclusion

521
00:22:10,559 --> 00:22:11,960
um

522
00:22:11,960 --> 00:22:14,820
testing of race condition needs a very

523
00:22:14,820 --> 00:22:16,440
good understanding of your business

524
00:22:16,440 --> 00:22:19,620
logic uh you need to know which places

525
00:22:19,620 --> 00:22:22,679
it makes sense to to exploit it to get

526
00:22:22,679 --> 00:22:25,080
some benefit from it

527
00:22:25,080 --> 00:22:29,460
and we saw that the only way to to find

528
00:22:29,460 --> 00:22:32,159
them really can sometimes be only a

529
00:22:32,159 --> 00:22:34,260
penetration test or by using a manual

530
00:22:34,260 --> 00:22:35,580
attack tool

531
00:22:35,580 --> 00:22:38,940
uh We've we've proven that secure stlc

532
00:22:38,940 --> 00:22:42,000
practice do not always help we still

533
00:22:42,000 --> 00:22:46,380
need a human to do this job and and I

534
00:22:46,380 --> 00:22:48,179
want to spread awareness about this type

535
00:22:48,179 --> 00:22:49,559
of vulnerability that's why we are

536
00:22:49,559 --> 00:22:53,340
having this talk also because I think uh

537
00:22:53,340 --> 00:22:55,559
race condition is a very underestimated

538
00:22:55,559 --> 00:22:58,740
topic uh it can do harm and I think

539
00:22:58,740 --> 00:23:00,179
there are a lot still a lot of

540
00:23:00,179 --> 00:23:01,980
applications out there vulnerable to

541
00:23:01,980 --> 00:23:03,299
this

542
00:23:03,299 --> 00:23:04,919
um it's just so a little known about

543
00:23:04,919 --> 00:23:06,720
this like my Dimension this is a

544
00:23:06,720 --> 00:23:08,700
research Gap and everyone is talking

545
00:23:08,700 --> 00:23:11,280
about overs top 10 and testing for them

546
00:23:11,280 --> 00:23:15,419
but not exactly the same with um race

547
00:23:15,419 --> 00:23:19,200
conditions and also there's um yeah use

548
00:23:19,200 --> 00:23:22,820
look like use the proposed attack tool

549
00:23:22,820 --> 00:23:26,640
with a distributed architecture you can

550
00:23:26,640 --> 00:23:28,620
find this on GitHub

551
00:23:28,620 --> 00:23:32,220
so thank you very very much

552
00:23:32,220 --> 00:23:34,740
if you have any questions I am happy to

553
00:23:34,740 --> 00:23:37,100
take them

554
00:23:42,200 --> 00:23:46,020
all right so first question uh may I

555
00:23:46,020 --> 00:23:47,400
know who asked the first question raise

556
00:23:47,400 --> 00:23:48,900
your hand please all right please

557
00:23:48,900 --> 00:23:51,140
proceed to the back to receive a prize

558
00:23:51,140 --> 00:23:54,000
uh first how could existing tools be

559
00:23:54,000 --> 00:23:56,940
augmented to find race conditions

560
00:23:56,940 --> 00:23:58,260
yeah

561
00:23:58,260 --> 00:24:00,720
um my tool is based on the existing

562
00:24:00,720 --> 00:24:02,820
tools of their knowledge I just improved

563
00:24:02,820 --> 00:24:06,059
what they did by using more servers than

564
00:24:06,059 --> 00:24:09,059
then do they do but they do their job

565
00:24:09,059 --> 00:24:10,380
and you can use them to find race

566
00:24:10,380 --> 00:24:13,919
conditions if the Target service maybe

567
00:24:13,919 --> 00:24:17,820
has a bigger time delay so yeah

568
00:24:17,820 --> 00:24:21,360
okay next are there any web app

569
00:24:21,360 --> 00:24:23,580
Frameworks or programming languages that

570
00:24:23,580 --> 00:24:25,980
are safe from race conditions from the

571
00:24:25,980 --> 00:24:27,299
get-go

572
00:24:27,299 --> 00:24:30,360
I don't think I

573
00:24:30,360 --> 00:24:32,580
had any because uh you you work with

574
00:24:32,580 --> 00:24:34,679
threats or multi-process language nearly

575
00:24:34,679 --> 00:24:35,700
everywhere

576
00:24:35,700 --> 00:24:39,480
and uh yeah the prevention techniques

577
00:24:39,480 --> 00:24:42,419
for every uh programming language

578
00:24:42,419 --> 00:24:44,280
yeah so

579
00:24:44,280 --> 00:24:47,820
that's all different right so yeah all

580
00:24:47,820 --> 00:24:50,039
different all right next what's the best

581
00:24:50,039 --> 00:24:52,500
way to be safe from rate limit attacks

582
00:24:52,500 --> 00:24:55,559
also how can we make people realize that

583
00:24:55,559 --> 00:24:57,299
it is also an issue Worth to be

584
00:24:57,299 --> 00:24:59,720
considered

585
00:25:00,120 --> 00:25:02,640
yeah it depends how how safe you're

586
00:25:02,640 --> 00:25:04,799
right and everything is because we saw

587
00:25:04,799 --> 00:25:06,539
some examples that a rate limited was

588
00:25:06,539 --> 00:25:10,039
able to buy be bypassed so yeah maybe

589
00:25:10,039 --> 00:25:12,720
depends on the type of rate limit that

590
00:25:12,720 --> 00:25:14,640
this is safe from the rate limited must

591
00:25:14,640 --> 00:25:18,240
be safe on Race conditions first and

592
00:25:18,240 --> 00:25:19,260
um

593
00:25:19,260 --> 00:25:22,500
yeah I I try to to uh share awareness

594
00:25:22,500 --> 00:25:23,760
about this vulnerability by having this

595
00:25:23,760 --> 00:25:25,559
talk so that's I hope that we can make

596
00:25:25,559 --> 00:25:27,779
people aware

597
00:25:27,779 --> 00:25:29,220
all right if there are no further

598
00:25:29,220 --> 00:25:30,779
questions could you give a hand for our

599
00:25:30,779 --> 00:25:34,039
last presenter yeah thank you

600
00:25:35,220 --> 00:25:37,559
all right thank you very much so we have

601
00:25:37,559 --> 00:25:39,900
actually come to the end oh sorry one

602
00:25:39,900 --> 00:25:42,059
more question

603
00:25:42,059 --> 00:25:45,559
all right sure let me hand you the mic

604
00:25:47,640 --> 00:25:50,640
now it's live so let's try to be back in

605
00:25:50,640 --> 00:25:53,100
the previous uh conference where we have

606
00:25:53,100 --> 00:25:54,960
live questions yeah

607
00:25:54,960 --> 00:25:57,059
um so thanks you thanks so much for the

608
00:25:57,059 --> 00:25:58,320
presentation and I just would like to

609
00:25:58,320 --> 00:26:00,179
know if you try to make rest condition

610
00:26:00,179 --> 00:26:02,640
to different backends so usually it's

611
00:26:02,640 --> 00:26:05,820
happening with a statement and update in

612
00:26:05,820 --> 00:26:10,200
some DB so we have several technology uh

613
00:26:10,200 --> 00:26:11,299
with

614
00:26:11,299 --> 00:26:14,400
databases and nosql not whatever so did

615
00:26:14,400 --> 00:26:16,440
you try to see if there is some of them

616
00:26:16,440 --> 00:26:19,020
that more robust against rest condition

617
00:26:19,020 --> 00:26:20,580
because they

618
00:26:20,580 --> 00:26:23,580
enter fastly or they answered eventually

619
00:26:23,580 --> 00:26:26,340
or they are not a lock or whatever so do

620
00:26:26,340 --> 00:26:30,059
you make some testing or just yeah try

621
00:26:30,059 --> 00:26:32,640
to see if the back end can play a little

622
00:26:32,640 --> 00:26:35,400
bit about avoiding rust Collision I

623
00:26:35,400 --> 00:26:36,960
haven't compared different Technologies

624
00:26:36,960 --> 00:26:39,240
or backends I just did this with the

625
00:26:39,240 --> 00:26:42,900
demo application which was everything by

626
00:26:42,900 --> 00:26:46,500
uh default settings so Malia DB PHP and

627
00:26:46,500 --> 00:26:50,000
and so on but I think there are some uh

628
00:26:50,000 --> 00:26:53,059
database Concepts out there like

629
00:26:53,059 --> 00:26:56,159
Atomic and so on I think there are ones

630
00:26:56,159 --> 00:26:58,380
that might be not vulnerable but I I

631
00:26:58,380 --> 00:27:00,480
can't name them

632
00:27:00,480 --> 00:27:03,720
ah thank you all right all right thank

633
00:27:03,720 --> 00:27:06,240
you uh two more questions actually so

634
00:27:06,240 --> 00:27:09,600
first uh do you consider instrumenting

635
00:27:09,600 --> 00:27:12,659
the database rather than the HTTP layer

636
00:27:12,659 --> 00:27:17,120
to attempt to identify race conditions

637
00:27:18,480 --> 00:27:20,760
um yeah I I think uh it's you should

638
00:27:20,760 --> 00:27:23,159
check it on the business logic so more

639
00:27:23,159 --> 00:27:24,299
on the

640
00:27:24,299 --> 00:27:27,840
um yeah you can also uh check how long

641
00:27:27,840 --> 00:27:30,720
your database query took time uh that's

642
00:27:30,720 --> 00:27:32,700
because that's what's meta uh what does

643
00:27:32,700 --> 00:27:35,159
matter and not the HTTP request timing

644
00:27:35,159 --> 00:27:37,440
of yeah of the HTTP request because

645
00:27:37,440 --> 00:27:39,480
there could be a delay until it's

646
00:27:39,480 --> 00:27:42,480
processed on the on the target yeah

647
00:27:42,480 --> 00:27:46,020
all right uh any insight into race

648
00:27:46,020 --> 00:27:48,240
condition race conditions in binary

649
00:27:48,240 --> 00:27:50,640
executables yeah they are there as well

650
00:27:50,640 --> 00:27:53,940
I think it's often more common to in

651
00:27:53,940 --> 00:27:55,559
other in research I saw a lot of

652
00:27:55,559 --> 00:27:57,960
research about binary uh race conditions

653
00:27:57,960 --> 00:28:00,360
also in Linux uh there are a lot of uh

654
00:28:00,360 --> 00:28:03,360
talk to vulnerabilities but uh my talk

655
00:28:03,360 --> 00:28:05,760
tried to focus only on the web

656
00:28:05,760 --> 00:28:08,400
application side of it yeah

657
00:28:08,400 --> 00:28:10,860
all right our last call uh anyone from

658
00:28:10,860 --> 00:28:13,679
the floor any other questions

659
00:28:13,679 --> 00:28:16,990
if not all right thank you brilliant

660
00:28:16,990 --> 00:28:21,670
[Applause]

