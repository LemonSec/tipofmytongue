1
00:00:06,799 --> 00:00:09,420
ah hello everyone thank you for joining

2
00:00:09,420 --> 00:00:12,120
in so today I'm going to talk about the

3
00:00:12,120 --> 00:00:14,280
landscape of script-based attacks and

4
00:00:14,280 --> 00:00:16,560
the filec attacks and how we are using

5
00:00:16,560 --> 00:00:18,660
machine learning to stop these attacks

6
00:00:18,660 --> 00:00:22,460
uh using amsi

7
00:00:22,500 --> 00:00:25,080
so first of all who am I I'm thank you

8
00:00:25,080 --> 00:00:26,820
girl I'm security researcher in

9
00:00:26,820 --> 00:00:29,039
Microsoft Defender research team I work

10
00:00:29,039 --> 00:00:31,800
in looking at the new campaigns attacks

11
00:00:31,800 --> 00:00:34,140
which comes up when when we look at the

12
00:00:34,140 --> 00:00:36,960
attacks it sits about near to like

13
00:00:36,960 --> 00:00:39,120
because our customer or if we look at

14
00:00:39,120 --> 00:00:40,860
the client base is around 1 billion

15
00:00:40,860 --> 00:00:44,160
machines and we we got the attacks and

16
00:00:44,160 --> 00:00:46,620
the campaigns is is pretty unique and

17
00:00:46,620 --> 00:00:48,600
pretty interesting and we have to think

18
00:00:48,600 --> 00:00:51,660
of the ways to write detections for

19
00:00:51,660 --> 00:00:53,760
these attacks at larger scale and

20
00:00:53,760 --> 00:00:56,340
efficiently so this is my day today I

21
00:00:56,340 --> 00:00:58,260
work in in writing machine learning

22
00:00:58,260 --> 00:01:00,780
models writing cloud with detections and

23
00:01:00,780 --> 00:01:03,480
and help customers from from these

24
00:01:03,480 --> 00:01:06,199
server tags

25
00:01:06,420 --> 00:01:09,479
okay so the agenda of this talk will be

26
00:01:09,479 --> 00:01:12,000
like first I will walk through like

27
00:01:12,000 --> 00:01:13,979
what's the landscape of current

28
00:01:13,979 --> 00:01:16,380
landscape of script based and filex

29
00:01:16,380 --> 00:01:17,460
attacks

30
00:01:17,460 --> 00:01:21,180
and then we will look at how the amsi is

31
00:01:21,180 --> 00:01:24,600
helpful in stopping these obfuscated or

32
00:01:24,600 --> 00:01:26,460
file as Scripts

33
00:01:26,460 --> 00:01:28,920
and then we will look at how Microsoft

34
00:01:28,920 --> 00:01:30,780
Defender client and the cloud

35
00:01:30,780 --> 00:01:34,140
integration work and the MC is help or

36
00:01:34,140 --> 00:01:37,020
integrated in this whole scenario

37
00:01:37,020 --> 00:01:39,299
and then I will walk you through how

38
00:01:39,299 --> 00:01:41,220
these clients and Cloud cloud-based

39
00:01:41,220 --> 00:01:43,320
models are built in terms of various

40
00:01:43,320 --> 00:01:45,240
labeling techniques featurization

41
00:01:45,240 --> 00:01:46,979
techniques which we used

42
00:01:46,979 --> 00:01:49,320
and then finally a case study from our

43
00:01:49,320 --> 00:01:53,159
blogs in real time which we have seen

44
00:01:53,159 --> 00:01:56,759
so first okay in last few years there is

45
00:01:56,759 --> 00:01:59,700
a big shift in like from a PE based

46
00:01:59,700 --> 00:02:02,880
attached to non-pe based attack so for

47
00:02:02,880 --> 00:02:06,240
example like even still today in 2022

48
00:02:06,240 --> 00:02:09,479
macro page document is one of the one of

49
00:02:09,479 --> 00:02:11,640
the initial attack vectors in which

50
00:02:11,640 --> 00:02:14,459
these attackers use for their campaigns

51
00:02:14,459 --> 00:02:17,099
so you have an email which have a macro

52
00:02:17,099 --> 00:02:19,319
document as an attachment which is

53
00:02:19,319 --> 00:02:21,480
having a VBA code downloading further

54
00:02:21,480 --> 00:02:23,940
payloads or either you have a zip file

55
00:02:23,940 --> 00:02:26,340
which is which is like having a VB

56
00:02:26,340 --> 00:02:28,440
script or JavaScript and and which

57
00:02:28,440 --> 00:02:30,180
further do their things when they got

58
00:02:30,180 --> 00:02:32,220
downloaded and executed

59
00:02:32,220 --> 00:02:35,220
so second when when these macro document

60
00:02:35,220 --> 00:02:37,620
or the script files when they got

61
00:02:37,620 --> 00:02:39,660
executed they further download their

62
00:02:39,660 --> 00:02:41,879
payload and a lot of them are like file

63
00:02:41,879 --> 00:02:44,280
less they just execute it on the Fly

64
00:02:44,280 --> 00:02:46,860
they don't need to be on the disk so it

65
00:02:46,860 --> 00:02:49,200
is it is like no trace on the disk they

66
00:02:49,200 --> 00:02:51,900
just do in memory everything and it is

67
00:02:51,900 --> 00:02:54,660
easy to bypass lot of the Epp and media

68
00:02:54,660 --> 00:02:56,900
product

69
00:02:57,300 --> 00:03:00,239
and when when they got executed they do

70
00:03:00,239 --> 00:03:02,040
like a persistent network connection

71
00:03:02,040 --> 00:03:05,400
like connecting back to CNC what not and

72
00:03:05,400 --> 00:03:07,440
all these can happen in fly

73
00:03:07,440 --> 00:03:09,840
then finally there are a lot of these

74
00:03:09,840 --> 00:03:12,360
like Advanced framework like Powershell

75
00:03:12,360 --> 00:03:15,959
Empire Kodiak sharp bound Bloodhound

76
00:03:15,959 --> 00:03:18,239
whatever you can think of lot of these

77
00:03:18,239 --> 00:03:19,980
Frameworks are written in Powershell

78
00:03:19,980 --> 00:03:23,040
because it's so easy and flexible to

79
00:03:23,040 --> 00:03:25,560
write and and change so it can buy

80
00:03:25,560 --> 00:03:29,459
bypass today's security stack so this is

81
00:03:29,459 --> 00:03:31,319
like if you look at the whole like

82
00:03:31,319 --> 00:03:34,560
attack chain these skip based files are

83
00:03:34,560 --> 00:03:36,540
used other these file less codes are

84
00:03:36,540 --> 00:03:38,459
used in each part of the attack chain

85
00:03:38,459 --> 00:03:41,640
and and we need a durable solution to

86
00:03:41,640 --> 00:03:44,159
stop these

87
00:03:44,159 --> 00:03:46,799
so now let's say an example so this is a

88
00:03:46,799 --> 00:03:49,319
simple example in which uh this is the

89
00:03:49,319 --> 00:03:51,420
email which which is having attachment

90
00:03:51,420 --> 00:03:54,420
of our Word documents and if we look at

91
00:03:54,420 --> 00:03:58,500
the VBA code that is quite obfuscated so

92
00:03:58,500 --> 00:04:01,799
it is difficult to to write uh like a

93
00:04:01,799 --> 00:04:03,900
generic detections on these type of

94
00:04:03,900 --> 00:04:06,060
obfuscation code because even if you

95
00:04:06,060 --> 00:04:07,860
write it for for this particular

96
00:04:07,860 --> 00:04:10,799
obfuscation technique it is easy to

97
00:04:10,799 --> 00:04:12,599
change it for the attacker and that will

98
00:04:12,599 --> 00:04:16,260
like break the whole detection

99
00:04:16,260 --> 00:04:18,720
now in the second example this is about

100
00:04:18,720 --> 00:04:21,720
the trickbot campaign in which this is a

101
00:04:21,720 --> 00:04:23,639
very common electric bot campaign

102
00:04:23,639 --> 00:04:26,340
Javascript file and as you can again see

103
00:04:26,340 --> 00:04:30,180
it's it's obfuscated and even if someone

104
00:04:30,180 --> 00:04:32,400
tried to write as genetic detection as

105
00:04:32,400 --> 00:04:35,280
they can these of educations are easy to

106
00:04:35,280 --> 00:04:37,919
change and break the detection so we

107
00:04:37,919 --> 00:04:41,040
need a way to to write this detection at

108
00:04:41,040 --> 00:04:45,020
a scalable and a generic way

109
00:04:45,360 --> 00:04:49,620
so here's this another thing so when we

110
00:04:49,620 --> 00:04:51,960
talk about these file less and Skip

111
00:04:51,960 --> 00:04:54,540
based attack what we have seen 96

112
00:04:54,540 --> 00:04:57,360
percent of them are like the first time

113
00:04:57,360 --> 00:04:59,820
attack so the second time when we see in

114
00:04:59,820 --> 00:05:02,520
these files or scripts they got changed

115
00:05:02,520 --> 00:05:04,139
so something like either the obfuscation

116
00:05:04,139 --> 00:05:06,000
got changed or some part of their code

117
00:05:06,000 --> 00:05:08,580
got changed so in order to give a

118
00:05:08,580 --> 00:05:11,699
durable detection we have to stop like

119
00:05:11,699 --> 00:05:13,800
the first attack or the first time when

120
00:05:13,800 --> 00:05:16,020
these are executing on the trying to

121
00:05:16,020 --> 00:05:18,900
execute on the customer side so here's

122
00:05:18,900 --> 00:05:21,000
some stats like if we look at the first

123
00:05:21,000 --> 00:05:24,660
time download of a file of a script file

124
00:05:24,660 --> 00:05:27,060
the first time it got downloaded around

125
00:05:27,060 --> 00:05:31,380
600k and as that hour passes because at

126
00:05:31,380 --> 00:05:33,120
the first time it got downloaded all the

127
00:05:33,120 --> 00:05:34,620
researchers start looking at this

128
00:05:34,620 --> 00:05:36,539
releasing detection and then it got

129
00:05:36,539 --> 00:05:39,120
detected but as we see as the time

130
00:05:39,120 --> 00:05:41,880
passes these detections these downloads

131
00:05:41,880 --> 00:05:44,340
slow down because the particular script

132
00:05:44,340 --> 00:05:47,280
got changed and and and and now it's a

133
00:05:47,280 --> 00:05:49,020
new script and and we have to detect

134
00:05:49,020 --> 00:05:51,180
those new script so

135
00:05:51,180 --> 00:05:53,580
the the problem here is we have to

136
00:05:53,580 --> 00:05:56,400
detect the script at the first time when

137
00:05:56,400 --> 00:05:58,320
they released in the wild and in the

138
00:05:58,320 --> 00:06:01,500
real time in instead of depending on the

139
00:06:01,500 --> 00:06:04,199
uh manual approach of writing heuristic

140
00:06:04,199 --> 00:06:06,360
big detection or something which which

141
00:06:06,360 --> 00:06:09,360
can prevent the second customer also so

142
00:06:09,360 --> 00:06:12,360
in the in in this type of scenarios

143
00:06:12,360 --> 00:06:14,400
machine learning really helps a lot

144
00:06:14,400 --> 00:06:17,639
because instead of uh like relying on

145
00:06:17,639 --> 00:06:19,560
the manual approach it's more of a

146
00:06:19,560 --> 00:06:22,440
proactive approach in which we will it

147
00:06:22,440 --> 00:06:24,360
like a machine learning algorithm will

148
00:06:24,360 --> 00:06:26,520
try to look at the pattern instead of a

149
00:06:26,520 --> 00:06:28,620
fixed rules we will give it a data set

150
00:06:28,620 --> 00:06:30,360
it will try to look at the pattern and

151
00:06:30,360 --> 00:06:32,220
based on those pattern it will try to

152
00:06:32,220 --> 00:06:34,259
predict what the next pattern will look

153
00:06:34,259 --> 00:06:36,139
like

154
00:06:36,139 --> 00:06:39,300
so before going to the ml part I will

155
00:06:39,300 --> 00:06:42,660
first like to talk about amsi what is

156
00:06:42,660 --> 00:06:45,120
the MC and how it is helpful here

157
00:06:45,120 --> 00:06:47,580
because in the previous examples as we

158
00:06:47,580 --> 00:06:51,060
have seen like most of these scripts are

159
00:06:51,060 --> 00:06:54,060
obfuscated but when they execute it at

160
00:06:54,060 --> 00:06:57,240
the runtime they they they call like

161
00:06:57,240 --> 00:07:00,120
some of the uh like the com object or

162
00:07:00,120 --> 00:07:02,520
some of the functions in in inside the

163
00:07:02,520 --> 00:07:05,280
system which are de-of-festated at some

164
00:07:05,280 --> 00:07:09,539
point so MCA help in logging these these

165
00:07:09,539 --> 00:07:12,120
function calls and it parapeter so what

166
00:07:12,120 --> 00:07:14,160
actually it is at the high level it's an

167
00:07:14,160 --> 00:07:17,039
open interface and you can use this

168
00:07:17,039 --> 00:07:19,020
interface to get your application

169
00:07:19,020 --> 00:07:21,840
content scanned what that mean is for

170
00:07:21,840 --> 00:07:23,340
example tomorrow if I write my

171
00:07:23,340 --> 00:07:26,340
application I can use this interface and

172
00:07:26,340 --> 00:07:28,740
and say that okay I want to get my

173
00:07:28,740 --> 00:07:31,620
application content data scanned by any

174
00:07:31,620 --> 00:07:34,500
registered AV product on that device

175
00:07:34,500 --> 00:07:37,139
so like excuse me so right now it's

176
00:07:37,139 --> 00:07:39,539
support like file based scanning is

177
00:07:39,539 --> 00:07:42,060
support memory based scanning stream

178
00:07:42,060 --> 00:07:45,240
based scanning and content and URL based

179
00:07:45,240 --> 00:07:46,979
scanning so if any of these scenarios

180
00:07:46,979 --> 00:07:49,740
are fine this interface can be used the

181
00:07:49,740 --> 00:07:52,199
content can be passed to the registered

182
00:07:52,199 --> 00:07:54,360
AV it will try to verdict whether it's

183
00:07:54,360 --> 00:07:55,919
the malicious content or the clean

184
00:07:55,919 --> 00:07:58,199
content

185
00:07:58,199 --> 00:08:00,840
so I I would like to walk you through

186
00:08:00,840 --> 00:08:03,300
how the evolution of uh or I will say

187
00:08:03,300 --> 00:08:06,060
integration of This MC have happened

188
00:08:06,060 --> 00:08:09,419
with various engine types so in 2015

189
00:08:09,419 --> 00:08:12,060
with the launch of Windows 10 it is

190
00:08:12,060 --> 00:08:13,800
integrated first with the Powershell

191
00:08:13,800 --> 00:08:17,940
vbscript JavaScript and USC so when

192
00:08:17,940 --> 00:08:19,919
Whenever there is a Powershell script

193
00:08:19,919 --> 00:08:22,379
which got compiled so it comes to this

194
00:08:22,379 --> 00:08:24,120
function and there is a function inside

195
00:08:24,120 --> 00:08:26,460
it which is like perform Security check

196
00:08:26,460 --> 00:08:29,039
and if we look at deep inside this

197
00:08:29,039 --> 00:08:32,219
function uh what happen is it it calls

198
00:08:32,219 --> 00:08:34,620
the scan content function and pass the

199
00:08:34,620 --> 00:08:37,320
script which is getting compiled for to

200
00:08:37,320 --> 00:08:40,080
the registered AV to scan and and give

201
00:08:40,080 --> 00:08:41,820
the verdict whether it's a clean or the

202
00:08:41,820 --> 00:08:44,039
malicious case

203
00:08:44,039 --> 00:08:47,519
so and and in Powershell as we know that

204
00:08:47,519 --> 00:08:50,580
there are a lot of these a lot of these

205
00:08:50,580 --> 00:08:53,700
commandlets as well for example IEX uh

206
00:08:53,700 --> 00:08:55,200
using Powershell with these encoded

207
00:08:55,200 --> 00:08:57,300
commands and all so if any of these

208
00:08:57,300 --> 00:08:59,640
commandlets are called so the dynamic

209
00:08:59,640 --> 00:09:02,580
content at the run time will also get

210
00:09:02,580 --> 00:09:06,000
passed to the registered AV or or EDR

211
00:09:06,000 --> 00:09:08,279
product to scan it and give whether it's

212
00:09:08,279 --> 00:09:11,839
a clean or a malicious scenario

213
00:09:12,000 --> 00:09:14,160
so by looking at the success of it in

214
00:09:14,160 --> 00:09:18,120
2015 the next it got integrated in 2017

215
00:09:18,120 --> 00:09:20,700
with the JavaScript and viviscript with

216
00:09:20,700 --> 00:09:22,860
the behavior instrumentation so what I

217
00:09:22,860 --> 00:09:25,980
mean by that in in the PE side when the

218
00:09:25,980 --> 00:09:29,040
PE file got executed it calls certain

219
00:09:29,040 --> 00:09:32,160
apis and all and we have like sandboxes

220
00:09:32,160 --> 00:09:35,640
like Cuckoos and a lot of these ways to

221
00:09:35,640 --> 00:09:38,279
log all of these API calls to see what

222
00:09:38,279 --> 00:09:40,920
exactly a PE file is using similarly

223
00:09:40,920 --> 00:09:44,700
when a Javascript file got executed it

224
00:09:44,700 --> 00:09:47,640
calls com objects and its matters to

225
00:09:47,640 --> 00:09:49,380
interact with the systems like whether

226
00:09:49,380 --> 00:09:52,380
it's want to uh query a registry make a

227
00:09:52,380 --> 00:09:54,420
network connection right write some file

228
00:09:54,420 --> 00:09:56,279
to the search term so all of the things

229
00:09:56,279 --> 00:09:58,380
you can think of to interact with the OS

230
00:09:58,380 --> 00:10:00,180
level that can happen with the com

231
00:10:00,180 --> 00:10:02,580
objects and this matter and all of those

232
00:10:02,580 --> 00:10:05,279
objects are monitored and and locked

233
00:10:05,279 --> 00:10:09,660
with MC and and the uh the and that is

234
00:10:09,660 --> 00:10:12,899
like a pure uh dophisticated uh methods

235
00:10:12,899 --> 00:10:14,700
and its parameters so you can look at it

236
00:10:14,700 --> 00:10:16,860
and see okay is there any malicious

237
00:10:16,860 --> 00:10:18,959
pattern in it and why detections on

238
00:10:18,959 --> 00:10:20,700
those

239
00:10:20,700 --> 00:10:23,820
so then in 2018 it get integrated with

240
00:10:23,820 --> 00:10:27,839
VBA macro code in 2019 uh it got

241
00:10:27,839 --> 00:10:31,019
integrated with wmi and these use cases

242
00:10:31,019 --> 00:10:33,779
uh comes off when we see that the attack

243
00:10:33,779 --> 00:10:37,380
patterns ask uh like shifting to these

244
00:10:37,380 --> 00:10:39,320
scenarios more for example

245
00:10:39,320 --> 00:10:43,140
18 like VBA macro thing is a big deal

246
00:10:43,140 --> 00:10:45,120
like most of the initial attack vectors

247
00:10:45,120 --> 00:10:47,579
start with that so uh we try to

248
00:10:47,579 --> 00:10:49,980
integrate with the VBA macro to

249
00:10:49,980 --> 00:10:53,760
to lock the data in 2019 uh these

250
00:10:53,760 --> 00:10:56,339
attackers are using wmi queries to do

251
00:10:56,339 --> 00:10:58,860
all sort of stuff like they want to uh

252
00:10:58,860 --> 00:11:00,420
do persistent they want to move

253
00:11:00,420 --> 00:11:02,700
literally to the other system within the

254
00:11:02,700 --> 00:11:05,100
network so that's why we integrated with

255
00:11:05,100 --> 00:11:10,140
the wmi and then in 2021 like uh they

256
00:11:10,140 --> 00:11:12,480
shifted from like there's a shift I will

257
00:11:12,480 --> 00:11:15,240
say not fully but quite a big shift from

258
00:11:15,240 --> 00:11:18,060
a VBA to Excel for macros because it is

259
00:11:18,060 --> 00:11:20,640
very easy to write these Excel for macro

260
00:11:20,640 --> 00:11:23,339
codes and and you can execute like a

261
00:11:23,339 --> 00:11:25,800
small small functions and that way you

262
00:11:25,800 --> 00:11:28,200
easily bypass the whole detection but

263
00:11:28,200 --> 00:11:30,480
with the MC integration now all of those

264
00:11:30,480 --> 00:11:34,220
methods calling are locked

265
00:11:34,860 --> 00:11:39,480
so uh now I will give a example of uh

266
00:11:39,480 --> 00:11:42,000
what are uh like some of the these com

267
00:11:42,000 --> 00:11:46,680
methods and and its logging looks like

268
00:11:46,680 --> 00:11:49,380
so for example as I mentioned like uh

269
00:11:49,380 --> 00:11:51,480
when the JavaScript or vbscript files

270
00:11:51,480 --> 00:11:55,260
are called we are we we This MC thing uh

271
00:11:55,260 --> 00:11:57,420
just uh logs this method and it's

272
00:11:57,420 --> 00:11:59,700
parameter and it's synchronously pass

273
00:11:59,700 --> 00:12:02,399
the the whole content uh to the

274
00:12:02,399 --> 00:12:04,680
registered AV for scanning so for

275
00:12:04,680 --> 00:12:06,600
example here are some of the triggers so

276
00:12:06,600 --> 00:12:09,120
if this function if W script dot shell

277
00:12:09,120 --> 00:12:12,839
dot run is called in JavaScript uh the

278
00:12:12,839 --> 00:12:15,180
uh the execution of the script stop

279
00:12:15,180 --> 00:12:18,000
there and it will wait for the uh

280
00:12:18,000 --> 00:12:20,940
verdict uh from the from the registered

281
00:12:20,940 --> 00:12:23,519
uh AV product whether the content itself

282
00:12:23,519 --> 00:12:25,320
is malicious or not and if it is

283
00:12:25,320 --> 00:12:27,839
malicious uh synchronously the whole

284
00:12:27,839 --> 00:12:30,420
execution is stopped there and and and

285
00:12:30,420 --> 00:12:33,240
then the script can also be remediated

286
00:12:33,240 --> 00:12:36,120
from the file from the system so the

287
00:12:36,120 --> 00:12:38,640
whole attacks is totally stopped and

288
00:12:38,640 --> 00:12:41,120
remediated

289
00:12:42,120 --> 00:12:44,399
okay now let's look at the example of

290
00:12:44,399 --> 00:12:47,040
the initial problem where we started we

291
00:12:47,040 --> 00:12:50,639
have this uh obfuscated JavaScript it is

292
00:12:50,639 --> 00:12:53,220
doing a lot of stuff like I don't know

293
00:12:53,220 --> 00:12:55,740
like initializing array calling this

294
00:12:55,740 --> 00:12:57,540
function maybe it is doing diffuscation

295
00:12:57,540 --> 00:13:00,420
in here but when this script got

296
00:13:00,420 --> 00:13:04,320
executed in runtime we got this type of

297
00:13:04,320 --> 00:13:07,139
lock from the MC and and which is

298
00:13:07,139 --> 00:13:11,100
nothing just like those com objects its

299
00:13:11,100 --> 00:13:13,139
matters and whatever is there in the

300
00:13:13,139 --> 00:13:15,660
parameters which are get called so now

301
00:13:15,660 --> 00:13:18,120
if we look at it it's much easier to

302
00:13:18,120 --> 00:13:20,459
read these type of logs and try to

303
00:13:20,459 --> 00:13:23,399
identify what's happening uh in this

304
00:13:23,399 --> 00:13:26,639
Javascript file and when any of the

305
00:13:26,639 --> 00:13:29,579
suspicious trigger is found so there is

306
00:13:29,579 --> 00:13:31,620
a certain suspicious trigger because we

307
00:13:31,620 --> 00:13:34,500
can't just send every single MC call to

308
00:13:34,500 --> 00:13:36,480
the registered AV product for scanning

309
00:13:36,480 --> 00:13:38,579
because that will be too much of an

310
00:13:38,579 --> 00:13:42,000
overhead and and that can also uh hinder

311
00:13:42,000 --> 00:13:45,300
the optimization of the uh performance

312
00:13:45,300 --> 00:13:47,040
of the system so there are certain

313
00:13:47,040 --> 00:13:49,920
suspicious triggers uh and if any of

314
00:13:49,920 --> 00:13:52,200
those are seen then the execution will

315
00:13:52,200 --> 00:13:54,720
stop and then the content itself will

316
00:13:54,720 --> 00:13:59,779
pass to the AV product to to scan and

317
00:13:59,779 --> 00:14:02,100
identify whether it's a clean scenario

318
00:14:02,100 --> 00:14:04,740
or a malicious scenario

319
00:14:04,740 --> 00:14:07,860
again in this example this script got

320
00:14:07,860 --> 00:14:11,160
executed but there is no suspicious

321
00:14:11,160 --> 00:14:14,160
trigger so in this case we will not pass

322
00:14:14,160 --> 00:14:16,800
this content to the engine for scanning

323
00:14:16,800 --> 00:14:18,959
because there is no suspicious uh

324
00:14:18,959 --> 00:14:21,300
trigger so we just leave it we just base

325
00:14:21,300 --> 00:14:24,480
wait and lock all of this data in a

326
00:14:24,480 --> 00:14:27,180
cyclic buffer so this cyclic buffer keep

327
00:14:27,180 --> 00:14:29,880
on logging all of all of this data until

328
00:14:29,880 --> 00:14:33,500
a suspicious trigger is found

329
00:14:35,700 --> 00:14:38,760
so now we have seen like how MC is

330
00:14:38,760 --> 00:14:41,339
helpful to to look at the script

331
00:14:41,339 --> 00:14:44,459
executions and try to identify what it

332
00:14:44,459 --> 00:14:46,800
is what what is happening within the

333
00:14:46,800 --> 00:14:50,279
script now we need to use this data to

334
00:14:50,279 --> 00:14:52,620
write more durable and generic uh

335
00:14:52,620 --> 00:14:54,959
detections but before going for that I

336
00:14:54,959 --> 00:14:57,660
want to touch in a little bit about how

337
00:14:57,660 --> 00:14:59,639
the Microsoft defender of Windows

338
00:14:59,639 --> 00:15:02,399
Defender uh client and Cloud integration

339
00:15:02,399 --> 00:15:03,779
works

340
00:15:03,779 --> 00:15:06,360
so for example on the left side you can

341
00:15:06,360 --> 00:15:09,120
see this is any customer machine or any

342
00:15:09,120 --> 00:15:11,240
machine which is having Defender client

343
00:15:11,240 --> 00:15:13,800
on the right side we have the Microsoft

344
00:15:13,800 --> 00:15:16,920
Defender Cloud which is running uh like

345
00:15:16,920 --> 00:15:18,600
all of these Cloud instance is running

346
00:15:18,600 --> 00:15:22,260
all over the world so when any of these

347
00:15:22,260 --> 00:15:24,420
uh script file for example this is one

348
00:15:24,420 --> 00:15:26,940
of the script file when it is seen on a

349
00:15:26,940 --> 00:15:30,420
machine it got executed Defender client

350
00:15:30,420 --> 00:15:34,620
scan the behavior it it uh it it look at

351
00:15:34,620 --> 00:15:36,779
the when the skip file this got executed

352
00:15:36,779 --> 00:15:39,959
it generated the MC log uh and Defender

353
00:15:39,959 --> 00:15:43,380
client scan that get that behavior send

354
00:15:43,380 --> 00:15:46,440
the certain metadata to the cloud which

355
00:15:46,440 --> 00:15:48,839
is like we have the process tree we have

356
00:15:48,839 --> 00:15:51,660
the fuzzy hashes and we we have certain

357
00:15:51,660 --> 00:15:54,420
ml feature vectors which is required for

358
00:15:54,420 --> 00:15:57,060
our machine learning models uh which can

359
00:15:57,060 --> 00:15:59,339
help us to identify whether the pattern

360
00:15:59,339 --> 00:16:02,100
itself is clean or malicious so we send

361
00:16:02,100 --> 00:16:05,040
this uh this type of feature Vector to

362
00:16:05,040 --> 00:16:06,060
the cloud

363
00:16:06,060 --> 00:16:09,240
and then in the cloud we have the

364
00:16:09,240 --> 00:16:13,079
real-time ml models which which got

365
00:16:13,079 --> 00:16:16,500
integrated with this decided rules logic

366
00:16:16,500 --> 00:16:19,019
and which also take information from

367
00:16:19,019 --> 00:16:21,240
other systems for example

368
00:16:21,240 --> 00:16:24,420
if if when this script file got executed

369
00:16:24,420 --> 00:16:26,940
we need to have information like when

370
00:16:26,940 --> 00:16:30,600
was this file seen first in the wild or

371
00:16:30,600 --> 00:16:33,060
how many times does this file seen

372
00:16:33,060 --> 00:16:34,920
because this type of information is

373
00:16:34,920 --> 00:16:37,560
really helpful if a file is seen for

374
00:16:37,560 --> 00:16:40,019
example 10 million times the chances are

375
00:16:40,019 --> 00:16:42,600
probably that is clean if that file is

376
00:16:42,600 --> 00:16:45,300
seen one year ago or two years ago the

377
00:16:45,300 --> 00:16:48,000
chances are that is clean so these type

378
00:16:48,000 --> 00:16:50,100
of global age and privilege information

379
00:16:50,100 --> 00:16:52,560
are really helpful while deciding

380
00:16:52,560 --> 00:16:55,139
whether a particular script or the

381
00:16:55,139 --> 00:16:58,920
content is malicious or clean

382
00:16:58,920 --> 00:17:02,519
next we we also got uh integration with

383
00:17:02,519 --> 00:17:04,439
our other products like smart screen

384
00:17:04,439 --> 00:17:09,839
Office 365 Office 365 ATP and all of

385
00:17:09,839 --> 00:17:12,179
these information in together work on

386
00:17:12,179 --> 00:17:14,640
the decider rule to finally give the

387
00:17:14,640 --> 00:17:17,280
verdict whether it is a clean scenario

388
00:17:17,280 --> 00:17:19,260
or a malicious scenario if that's the

389
00:17:19,260 --> 00:17:21,720
case the defender clients will stop the

390
00:17:21,720 --> 00:17:23,939
execution of the script and the whole of

391
00:17:23,939 --> 00:17:25,919
this happened in the millisecond so on

392
00:17:25,919 --> 00:17:27,720
the client side the user will not even

393
00:17:27,720 --> 00:17:29,340
able to identify whether it's coming

394
00:17:29,340 --> 00:17:31,799
from the client or the cloud and and in

395
00:17:31,799 --> 00:17:34,559
the in this case which is amsi case all

396
00:17:34,559 --> 00:17:37,080
of this happen synchronously so the

397
00:17:37,080 --> 00:17:40,200
execution of the script stopped here and

398
00:17:40,200 --> 00:17:43,320
it will wait from the cloud verdict to

399
00:17:43,320 --> 00:17:45,960
identify uh whatever decision the cloud

400
00:17:45,960 --> 00:17:48,500
gives

401
00:17:48,840 --> 00:17:51,539
now the now there's one problem with

402
00:17:51,539 --> 00:17:54,720
this like every time when this file got

403
00:17:54,720 --> 00:17:58,320
executed Defender client can't just ask

404
00:17:58,320 --> 00:18:00,539
to the cloud because that is like think

405
00:18:00,539 --> 00:18:03,419
of it one machine can make hundreds or

406
00:18:03,419 --> 00:18:05,580
thousands of requests and if we are

407
00:18:05,580 --> 00:18:08,400
talking about around billion machines

408
00:18:08,400 --> 00:18:11,220
how many requests are like how many

409
00:18:11,220 --> 00:18:13,380
requests will that become in a day so

410
00:18:13,380 --> 00:18:15,900
that will be like a too much of a like a

411
00:18:15,900 --> 00:18:18,299
cost and overhead for the cloud to

412
00:18:18,299 --> 00:18:21,120
consume all of it is this data and this

413
00:18:21,120 --> 00:18:24,480
Pond back like uh in in a reliable time

414
00:18:24,480 --> 00:18:27,179
so what we did in this case is we

415
00:18:27,179 --> 00:18:29,400
developed client models so these client

416
00:18:29,400 --> 00:18:31,380
models are the lightweight models

417
00:18:31,380 --> 00:18:34,440
because we want our engine to be more

418
00:18:34,440 --> 00:18:36,960
optimized and performance oriented so

419
00:18:36,960 --> 00:18:40,020
these client based models takes like

420
00:18:40,020 --> 00:18:42,900
small like a lightweight features and

421
00:18:42,900 --> 00:18:45,179
then if they find the uh the whole

422
00:18:45,179 --> 00:18:48,780
behavior is suspicious then is send that

423
00:18:48,780 --> 00:18:51,600
particular Behavior to the cloud and

424
00:18:51,600 --> 00:18:54,539
again the they will wait on the deciding

425
00:18:54,539 --> 00:18:57,660
logic and depending on that if the if

426
00:18:57,660 --> 00:19:00,780
the cloud says it is malicious then it

427
00:19:00,780 --> 00:19:03,780
just blocked the script execution so

428
00:19:03,780 --> 00:19:06,480
this is how our client models fit in in

429
00:19:06,480 --> 00:19:10,020
this and help to to send each and every

430
00:19:10,020 --> 00:19:12,900
query to the cloud and and ask for the

431
00:19:12,900 --> 00:19:15,320
verdict

432
00:19:16,260 --> 00:19:20,460
so now as we already talked about uh

433
00:19:20,460 --> 00:19:23,100
like what is a problem statement which

434
00:19:23,100 --> 00:19:25,320
we want to detect this skip based and

435
00:19:25,320 --> 00:19:29,220
file as attacks and how amsi is helpful

436
00:19:29,220 --> 00:19:32,640
for us to deophis kids or get the

437
00:19:32,640 --> 00:19:35,100
runtime execution of the attack and then

438
00:19:35,100 --> 00:19:37,919
how Microsoft Defender is using this

439
00:19:37,919 --> 00:19:40,200
client or Cloud technology in sync

440
00:19:40,200 --> 00:19:44,100
together to stop it so now let's see how

441
00:19:44,100 --> 00:19:47,100
these ml models are built like uh

442
00:19:47,100 --> 00:19:48,900
because as I mentioned in the previous

443
00:19:48,900 --> 00:19:50,820
slide we have client based model we have

444
00:19:50,820 --> 00:19:52,919
cloud-based models but how these models

445
00:19:52,919 --> 00:19:55,260
are built so in this case it's a simple

446
00:19:55,260 --> 00:19:59,640
uh supervised uh learning problem like a

447
00:19:59,640 --> 00:20:01,440
classification problem because we just

448
00:20:01,440 --> 00:20:03,740
want to classify whether a particular

449
00:20:03,740 --> 00:20:06,360
behavior is a clean Behavior or a

450
00:20:06,360 --> 00:20:09,539
malicious behavior so so in order to do

451
00:20:09,539 --> 00:20:13,679
that we we started with this uh like I

452
00:20:13,679 --> 00:20:16,320
will say a ml model life cycle in which

453
00:20:16,320 --> 00:20:18,360
the first step is collecting the data

454
00:20:18,360 --> 00:20:21,240
second is featurizing the data whatever

455
00:20:21,240 --> 00:20:23,700
the data which we are getting third is

456
00:20:23,700 --> 00:20:25,559
that this is a supervised learning class

457
00:20:25,559 --> 00:20:28,860
binary classification problem we need to

458
00:20:28,860 --> 00:20:31,799
give some label data which will specify

459
00:20:31,799 --> 00:20:34,860
okay these are the malicious level these

460
00:20:34,860 --> 00:20:36,660
are the clean level and now the

461
00:20:36,660 --> 00:20:38,520
algorithm will predict what will be the

462
00:20:38,520 --> 00:20:40,980
future clean or malicious cases so which

463
00:20:40,980 --> 00:20:42,960
will be the fourth step like choosing

464
00:20:42,960 --> 00:20:45,179
the right algorithms according to a

465
00:20:45,179 --> 00:20:48,360
scenario and then deploying these uh

466
00:20:48,360 --> 00:20:51,299
Finance models uh in the client and the

467
00:20:51,299 --> 00:20:54,240
cloud so they can work in sync in real

468
00:20:54,240 --> 00:20:56,340
time so I will walk you each of walk

469
00:20:56,340 --> 00:20:59,460
through each of these steps uh like what

470
00:20:59,460 --> 00:21:01,559
are the different techniques and ways we

471
00:21:01,559 --> 00:21:02,580
use

472
00:21:02,580 --> 00:21:05,520
uh to do that

473
00:21:05,520 --> 00:21:07,620
so first step which is about collecting

474
00:21:07,620 --> 00:21:09,780
the data so if I talk about the data

475
00:21:09,780 --> 00:21:10,740
source

476
00:21:10,740 --> 00:21:13,440
so one of the biggest data source is our

477
00:21:13,440 --> 00:21:16,140
real-time Telemetry so as I mentioned uh

478
00:21:16,140 --> 00:21:17,880
the Telemetry is coming from around

479
00:21:17,880 --> 00:21:20,760
billions of machines so all of the data

480
00:21:20,760 --> 00:21:23,340
is coming to the cloud and we have a

481
00:21:23,340 --> 00:21:25,020
pretty good set of data set which can

482
00:21:25,020 --> 00:21:27,480
help in to identify the pattern the

483
00:21:27,480 --> 00:21:30,000
second way we use it we detonate a lot

484
00:21:30,000 --> 00:21:32,940
of these malicious and clean scenario in

485
00:21:32,940 --> 00:21:35,159
in-house sandboxing detonation system

486
00:21:35,159 --> 00:21:37,740
which will give us the extra logic or

487
00:21:37,740 --> 00:21:40,799
extra data which we may know may or may

488
00:21:40,799 --> 00:21:44,159
not get from our real-time Telemetry and

489
00:21:44,159 --> 00:21:45,900
third is we also get the data from

490
00:21:45,900 --> 00:21:48,059
various third party sources like virus

491
00:21:48,059 --> 00:21:51,059
total versus lab and other places where

492
00:21:51,059 --> 00:21:53,520
the uh from where the public fields are

493
00:21:53,520 --> 00:21:57,120
available so in first case we collect

494
00:21:57,120 --> 00:21:59,640
all of this data and and to give some

495
00:21:59,640 --> 00:22:01,380
numbers like here we are talking about

496
00:22:01,380 --> 00:22:03,840
like petabytes of data which is coming

497
00:22:03,840 --> 00:22:06,840
like every day and we usually train the

498
00:22:06,840 --> 00:22:10,320
models for uh like around two or three

499
00:22:10,320 --> 00:22:12,720
months of day data to have like a rich

500
00:22:12,720 --> 00:22:15,780
data set and which is quite new as well

501
00:22:15,780 --> 00:22:17,880
and also help us to identify the old

502
00:22:17,880 --> 00:22:21,419
patterns which are there in the wild

503
00:22:21,419 --> 00:22:23,400
so now the fact first step is done which

504
00:22:23,400 --> 00:22:25,980
is collecting the data second step is

505
00:22:25,980 --> 00:22:28,799
about featurizing the data but before

506
00:22:28,799 --> 00:22:31,320
talking about featurizing the data I

507
00:22:31,320 --> 00:22:33,780
want to show what the data looks like so

508
00:22:33,780 --> 00:22:36,720
as I mentioned like at the high level uh

509
00:22:36,720 --> 00:22:39,419
we when the skip got executed Defender

510
00:22:39,419 --> 00:22:43,620
client uh scan the script Behavior it

511
00:22:43,620 --> 00:22:45,960
sends the ml feature Vector but how does

512
00:22:45,960 --> 00:22:48,179
this feature Vector looks like

513
00:22:48,179 --> 00:22:51,720
so in the case of uh MC Behavior

514
00:22:51,720 --> 00:22:54,780
instrumentation as I mentioned uh when

515
00:22:54,780 --> 00:22:57,960
these scripts got executed they they

516
00:22:57,960 --> 00:23:01,080
usually call this com objects and com

517
00:23:01,080 --> 00:23:04,020
methods along with this parameter so if

518
00:23:04,020 --> 00:23:07,679
we look at one of the MC Behavior log it

519
00:23:07,679 --> 00:23:10,080
will be divided into com object so we

520
00:23:10,080 --> 00:23:13,380
normalize.com those com objects and we

521
00:23:13,380 --> 00:23:16,440
find that they are roughly around 64 com

522
00:23:16,440 --> 00:23:18,720
object name references which are useful

523
00:23:18,720 --> 00:23:22,559
for us to identify like the different uh

524
00:23:22,559 --> 00:23:25,799
uh like a set of things which we want to

525
00:23:25,799 --> 00:23:28,679
Monitor and then the second is out of

526
00:23:28,679 --> 00:23:32,159
these com object is around 190 function

527
00:23:32,159 --> 00:23:36,000
of methods which is which is doing uh uh

528
00:23:36,000 --> 00:23:39,659
this stuff uh of into of using the OS

529
00:23:39,659 --> 00:23:42,179
resources and then whatever is the

530
00:23:42,179 --> 00:23:44,520
function argument we just character n

531
00:23:44,520 --> 00:23:47,880
gram is so I will tell in the for the

532
00:23:47,880 --> 00:23:51,059
slides it's like uh what is these n

533
00:23:51,059 --> 00:23:54,000
grams features means and how do we do it

534
00:23:54,000 --> 00:23:57,059
but now let's look at this example

535
00:23:57,059 --> 00:24:00,659
so in which we have this MC log which we

536
00:24:00,659 --> 00:24:02,820
have seen in the past as well

537
00:24:02,820 --> 00:24:05,520
so this is the com object so these are

538
00:24:05,520 --> 00:24:08,280
the 64 com objects like one of those 64

539
00:24:08,280 --> 00:24:10,679
com objects then we have this com

540
00:24:10,679 --> 00:24:14,039
functions so which is odd of those 200

541
00:24:14,039 --> 00:24:16,679
com functions we pick and then we have

542
00:24:16,679 --> 00:24:19,620
this character and grams parameters and

543
00:24:19,620 --> 00:24:21,539
these parameters can be anything because

544
00:24:21,539 --> 00:24:24,900
think of it like if someone is trying to

545
00:24:24,900 --> 00:24:29,700
execute a like A1 dot exe binary or

546
00:24:29,700 --> 00:24:32,460
maybe trying to create a new process or

547
00:24:32,460 --> 00:24:36,960
maybe trying to uh trying to call

548
00:24:36,960 --> 00:24:39,179
another function and and it also take

549
00:24:39,179 --> 00:24:41,700
input from a machine or the user data so

550
00:24:41,700 --> 00:24:45,120
these parameters can vary a lot so we

551
00:24:45,120 --> 00:24:47,760
can't predict like how much variability

552
00:24:47,760 --> 00:24:50,880
is there in these function parameters so

553
00:24:50,880 --> 00:24:54,600
we try to engram it and try to do it in

554
00:24:54,600 --> 00:24:57,000
a best possible way that will cover the

555
00:24:57,000 --> 00:25:00,539
genericness of this parameters

556
00:25:00,539 --> 00:25:03,059
and this is the second example in which

557
00:25:03,059 --> 00:25:07,320
I talked about the Powershell script at

558
00:25:07,320 --> 00:25:10,320
the uh when they got compiled and the

559
00:25:10,320 --> 00:25:13,080
dynamic loaded content so for example uh

560
00:25:13,080 --> 00:25:15,059
in this case when this evil function is

561
00:25:15,059 --> 00:25:16,860
called whatever the data is there in

562
00:25:16,860 --> 00:25:21,299
this VC bc7 variable uh when this thing

563
00:25:21,299 --> 00:25:24,480
got executed at the at the dynamic

564
00:25:24,480 --> 00:25:26,940
loaded part this content is there in the

565
00:25:26,940 --> 00:25:29,940
MC log and it can get featureized using

566
00:25:29,940 --> 00:25:32,100
character and ground and that can help

567
00:25:32,100 --> 00:25:35,279
us as a feature Vector in our model

568
00:25:35,279 --> 00:25:39,840
so now we talked about what does or how

569
00:25:39,840 --> 00:25:42,779
does a feature look like but

570
00:25:42,779 --> 00:25:45,539
if we if we try to look at the numbers

571
00:25:45,539 --> 00:25:48,539
like in terms of how how much these

572
00:25:48,539 --> 00:25:51,240
features become so for example we have

573
00:25:51,240 --> 00:25:55,320
one MC log which is some X and B and we

574
00:25:55,320 --> 00:25:58,559
have if we think that there are x m c

575
00:25:58,559 --> 00:26:01,620
logs and each of it is xmb and from one

576
00:26:01,620 --> 00:26:05,159
document xmb log each of it is xmb so

577
00:26:05,159 --> 00:26:08,039
how big the feature set will become

578
00:26:08,039 --> 00:26:11,279
so and and when we character and gram it

579
00:26:11,279 --> 00:26:13,200
we do it four character five character

580
00:26:13,200 --> 00:26:16,320
up to 14 characters which depends on the

581
00:26:16,320 --> 00:26:19,320
use cases and we are doing this for for

582
00:26:19,320 --> 00:26:22,799
for each documents having X and C log

583
00:26:22,799 --> 00:26:26,580
and which is having X number of uh size

584
00:26:26,580 --> 00:26:29,100
of ease and M C buffers and we collect

585
00:26:29,100 --> 00:26:31,679
our n gram it does become too much

586
00:26:31,679 --> 00:26:36,000
so even if so first what we did is we we

587
00:26:36,000 --> 00:26:39,659
try to apply this technique in which if

588
00:26:39,659 --> 00:26:42,299
we find that if a particular feature is

589
00:26:42,299 --> 00:26:44,880
having less than certain count then we

590
00:26:44,880 --> 00:26:48,059
discard those uh features because those

591
00:26:48,059 --> 00:26:50,640
are so Less in number that will not help

592
00:26:50,640 --> 00:26:53,820
us to identify the behavior so we

593
00:26:53,820 --> 00:26:55,500
thought okay we have we apply this

594
00:26:55,500 --> 00:26:57,480
technique that will definitely reduce

595
00:26:57,480 --> 00:27:02,880
some uh some feature set but again like

596
00:27:02,880 --> 00:27:05,400
when we try to look at the distinctness

597
00:27:05,400 --> 00:27:08,520
of it it's a lot like it's around 100K

598
00:27:08,520 --> 00:27:11,159
features which is too expensive we can't

599
00:27:11,159 --> 00:27:13,440
deploy these 100K features on the client

600
00:27:13,440 --> 00:27:15,600
ml models because that that will

601
00:27:15,600 --> 00:27:18,059
definitely hinder the performance of our

602
00:27:18,059 --> 00:27:21,419
of our uh client engine and then

603
00:27:21,419 --> 00:27:23,400
customers will definitely not be happy

604
00:27:23,400 --> 00:27:24,840
with this scenario

605
00:27:24,840 --> 00:27:26,580
so what we did

606
00:27:26,580 --> 00:27:29,640
this is a uh this is one of the uh

607
00:27:29,640 --> 00:27:33,299
feature trimming uh algorithm which is

608
00:27:33,299 --> 00:27:37,380
essay hdca so what it does it does it

609
00:27:37,380 --> 00:27:40,200
uses L1 regularization and we can

610
00:27:40,200 --> 00:27:43,440
specify that we want top X number of

611
00:27:43,440 --> 00:27:45,299
features for example we want top

612
00:27:45,299 --> 00:27:47,640
thousand features so according to the

613
00:27:47,640 --> 00:27:49,679
variability of the features and its

614
00:27:49,679 --> 00:27:52,080
distinctions it will this algorithm will

615
00:27:52,080 --> 00:27:54,960
give us top 10 top thousand features out

616
00:27:54,960 --> 00:27:56,940
of those 100K features

617
00:27:56,940 --> 00:28:00,179
so we use this particular algorithm to

618
00:28:00,179 --> 00:28:02,220
down select our features which use L1

619
00:28:02,220 --> 00:28:04,260
regularization and we are happy because

620
00:28:04,260 --> 00:28:06,840
now we just have around 1000 features

621
00:28:06,840 --> 00:28:09,200
which is perfectly fine for our client

622
00:28:09,200 --> 00:28:13,279
for client based scenarios

623
00:28:13,320 --> 00:28:14,520
so now

624
00:28:14,520 --> 00:28:17,400
as we have such a good client model why

625
00:28:17,400 --> 00:28:19,620
do we even need like a cloud model like

626
00:28:19,620 --> 00:28:22,740
we have already featurized the whole MC

627
00:28:22,740 --> 00:28:25,740
log as we have seen in the past we have

628
00:28:25,740 --> 00:28:28,980
got uh we have downgraded the feature

629
00:28:28,980 --> 00:28:31,679
2000 features which work fine for our

630
00:28:31,679 --> 00:28:34,020
performances then why do we even need a

631
00:28:34,020 --> 00:28:36,000
cloud-based model

632
00:28:36,000 --> 00:28:38,279
so first of all as I mentioned before

633
00:28:38,279 --> 00:28:40,980
Cloud have a lot of extra information

634
00:28:40,980 --> 00:28:43,380
which is not available in the client for

635
00:28:43,380 --> 00:28:45,720
example the global fire Information Age

636
00:28:45,720 --> 00:28:48,600
privilege privilege which is like how

637
00:28:48,600 --> 00:28:51,120
all this particular file is when it is

638
00:28:51,120 --> 00:28:53,159
seen for the first time how many times

639
00:28:53,159 --> 00:28:55,740
this particular file is seen so this

640
00:28:55,740 --> 00:28:58,440
type of information help in deciding

641
00:28:58,440 --> 00:29:01,380
whether whether the particular scenario

642
00:29:01,380 --> 00:29:03,720
is malicious or clean

643
00:29:03,720 --> 00:29:06,720
second we can deploy other features like

644
00:29:06,720 --> 00:29:09,419
we can use fuzzy hashing we can use

645
00:29:09,419 --> 00:29:11,940
cluster hashing all these expensive

646
00:29:11,940 --> 00:29:14,520
features which requires like high CPU

647
00:29:14,520 --> 00:29:17,340
High memory Jeep even gpus these are not

648
00:29:17,340 --> 00:29:19,440
available to us on the client but on the

649
00:29:19,440 --> 00:29:22,620
cloud we can use all of them and and it

650
00:29:22,620 --> 00:29:26,700
will not cost in terms of performance

651
00:29:26,700 --> 00:29:29,880
third it is easy to update these MLM

652
00:29:29,880 --> 00:29:32,039
models because if we build a client

653
00:29:32,039 --> 00:29:34,380
based model we have to ship it to the

654
00:29:34,380 --> 00:29:36,779
client and it will take a whole life

655
00:29:36,779 --> 00:29:39,179
cycle to ship it to the client but if it

656
00:29:39,179 --> 00:29:41,039
is a cloud-based model so this

657
00:29:41,039 --> 00:29:43,200
cloud-based model will automatically get

658
00:29:43,200 --> 00:29:45,539
update updated to the cloud and it will

659
00:29:45,539 --> 00:29:48,000
not even get enhanced to the adversaries

660
00:29:48,000 --> 00:29:51,120
because if somehow think of it uh if a

661
00:29:51,120 --> 00:29:53,640
CL if an adversary or attacker get get

662
00:29:53,640 --> 00:29:56,940
in hand on the uh on the Windows

663
00:29:56,940 --> 00:29:58,559
Defender client it tries to reverse

664
00:29:58,559 --> 00:30:00,299
engineer trying to somehow figure out

665
00:30:00,299 --> 00:30:01,919
what the logic detection Logics are

666
00:30:01,919 --> 00:30:04,380
going on but it will not be possible

667
00:30:04,380 --> 00:30:06,240
with the cloud models because that is

668
00:30:06,240 --> 00:30:09,000
running in the cloud and and and that is

669
00:30:09,000 --> 00:30:11,220
not directly in hand to the attacker's

670
00:30:11,220 --> 00:30:12,360
hand

671
00:30:12,360 --> 00:30:15,539
and then finally it is easy to fix the

672
00:30:15,539 --> 00:30:19,500
FP or FN scenarios because again uh for

673
00:30:19,500 --> 00:30:21,600
the client based model we need to update

674
00:30:21,600 --> 00:30:24,360
the model ship it to the client then the

675
00:30:24,360 --> 00:30:26,640
new detection will come in but for the

676
00:30:26,640 --> 00:30:28,980
cloud it will happen in the cloud in the

677
00:30:28,980 --> 00:30:32,100
real time so it will not uh have to go

678
00:30:32,100 --> 00:30:35,100
through that whole cycle

679
00:30:35,100 --> 00:30:38,279
so now we have discussed two steps in

680
00:30:38,279 --> 00:30:40,919
our in our machine learning life cycle

681
00:30:40,919 --> 00:30:43,039
which is about collecting the data

682
00:30:43,039 --> 00:30:46,020
featurizing the data now I I want to

683
00:30:46,020 --> 00:30:49,559
talk about labeling the data so because

684
00:30:49,559 --> 00:30:52,260
this is the supervised machine learning

685
00:30:52,260 --> 00:30:55,080
scenario in v in which we need already

686
00:30:55,080 --> 00:30:57,899
labeled data so in this we actually use

687
00:30:57,899 --> 00:31:00,240
these two approaches so first is

688
00:31:00,240 --> 00:31:02,340
labeling the data based on the caller

689
00:31:02,340 --> 00:31:04,380
files I will walk you through what does

690
00:31:04,380 --> 00:31:07,320
it exactly means and second is meta

691
00:31:07,320 --> 00:31:11,520
labels so let's look at the first method

692
00:31:11,520 --> 00:31:13,460
so this this

693
00:31:13,460 --> 00:31:16,440
mail.javascript file which got executed

694
00:31:16,440 --> 00:31:18,659
by seek script process

695
00:31:18,659 --> 00:31:22,080
it generated certain MC buffer stream

696
00:31:22,080 --> 00:31:25,200
now if we already know if this if this

697
00:31:25,200 --> 00:31:28,799
mail.js file is malicious we can label

698
00:31:28,799 --> 00:31:31,320
This MC buffers streams also as

699
00:31:31,320 --> 00:31:32,460
malicious

700
00:31:32,460 --> 00:31:35,100
so this way we can generate our labels

701
00:31:35,100 --> 00:31:38,279
but this methodology when we try to do

702
00:31:38,279 --> 00:31:40,679
it we figured out the quality of the

703
00:31:40,679 --> 00:31:43,020
labels are good but the quantity is not

704
00:31:43,020 --> 00:31:45,779
good enough because these buffers can

705
00:31:45,779 --> 00:31:48,419
can vary a lot and sometimes we have the

706
00:31:48,419 --> 00:31:50,640
files available and even in some cases

707
00:31:50,640 --> 00:31:54,559
think of a scenario where a file less

708
00:31:54,559 --> 00:31:58,020
Powershell command got executed in that

709
00:31:58,020 --> 00:32:00,600
case when it got executed it's just the

710
00:32:00,600 --> 00:32:03,419
code which is running in memory there is

711
00:32:03,419 --> 00:32:05,940
no Associated caller file with that so

712
00:32:05,940 --> 00:32:08,399
in that case if we we don't have any

713
00:32:08,399 --> 00:32:11,279
caller file how can we label a MC buffer

714
00:32:11,279 --> 00:32:14,220
itself so this approach it gives us good

715
00:32:14,220 --> 00:32:16,320
quality enables but the quantity is not

716
00:32:16,320 --> 00:32:18,059
good enough

717
00:32:18,059 --> 00:32:20,640
so then we comes up with this second

718
00:32:20,640 --> 00:32:24,179
approach which we call it meta labels

719
00:32:24,179 --> 00:32:26,880
so in this there are certain assumptions

720
00:32:26,880 --> 00:32:30,240
what we assume that attackers somehow

721
00:32:30,240 --> 00:32:32,460
start with a malicious file at some

722
00:32:32,460 --> 00:32:35,399
point that means a machine is a machine

723
00:32:35,399 --> 00:32:38,279
got compromised it has it executes

724
00:32:38,279 --> 00:32:40,860
something and we we for some of our

725
00:32:40,860 --> 00:32:44,159
detection logic stop that uh particular

726
00:32:44,159 --> 00:32:46,320
scenario so we know that a malicious

727
00:32:46,320 --> 00:32:49,020
activity happened on that machines and

728
00:32:49,020 --> 00:32:52,140
then we try to look at that activity and

729
00:32:52,140 --> 00:32:54,840
identify what is happening before after

730
00:32:54,840 --> 00:32:57,779
and within that particular scenario so

731
00:32:57,779 --> 00:33:01,980
in this illustration this uh pink color

732
00:33:01,980 --> 00:33:05,279
zero thing will specify the clean files

733
00:33:05,279 --> 00:33:08,100
first seen on the device this one will

734
00:33:08,100 --> 00:33:10,080
represent the malware file is seen on

735
00:33:10,080 --> 00:33:13,320
the device and this is the hash which we

736
00:33:13,320 --> 00:33:15,840
want to identify whether it's a clean or

737
00:33:15,840 --> 00:33:18,720
or malicious so think of it like this we

738
00:33:18,720 --> 00:33:22,140
have this machine timeline in which uh

739
00:33:22,140 --> 00:33:24,000
there are certain clean files which are

740
00:33:24,000 --> 00:33:26,399
running like a lot of things which

741
00:33:26,399 --> 00:33:29,279
normal user do then there is a malicious

742
00:33:29,279 --> 00:33:32,760
activity happen line detected it and

743
00:33:32,760 --> 00:33:35,279
then within that activity there's this

744
00:33:35,279 --> 00:33:38,220
hash which is a MC buffer which we want

745
00:33:38,220 --> 00:33:40,980
to identify whether it's a clean or a

746
00:33:40,980 --> 00:33:43,260
malicious scenario

747
00:33:43,260 --> 00:33:46,740
so we can say that okay this thing is

748
00:33:46,740 --> 00:33:49,580
happening within the activity of two

749
00:33:49,580 --> 00:33:51,659
malware samples

750
00:33:51,659 --> 00:33:54,480
so possibly it is malicious possibly it

751
00:33:54,480 --> 00:33:56,279
is not malicious we don't know for sure

752
00:33:56,279 --> 00:33:58,620
so

753
00:33:58,620 --> 00:34:00,840
can we associate directly it to the

754
00:34:00,840 --> 00:34:03,600
malware I don't know I can say with some

755
00:34:03,600 --> 00:34:06,480
severity but I'm not 100 sure so what

756
00:34:06,480 --> 00:34:09,239
about if I look at this particular hash

757
00:34:09,239 --> 00:34:12,300
and check the other machines like if

758
00:34:12,300 --> 00:34:15,599
this hash is seen on other machines what

759
00:34:15,599 --> 00:34:18,300
are the aggregation or percentage or

760
00:34:18,300 --> 00:34:21,080
chance of this hash on other machines

761
00:34:21,080 --> 00:34:23,940
encounter within a malicious case so

762
00:34:23,940 --> 00:34:27,239
what we did instead of one machine we

763
00:34:27,239 --> 00:34:30,599
look at n number of machines so now when

764
00:34:30,599 --> 00:34:33,359
this hash is seen we try to look at

765
00:34:33,359 --> 00:34:36,540
different time time frame windows so

766
00:34:36,540 --> 00:34:39,839
within one minute window the chances of

767
00:34:39,839 --> 00:34:43,619
this hash a a card uh when a malicious

768
00:34:43,619 --> 00:34:46,918
event happened and we look at it across

769
00:34:46,918 --> 00:34:48,839
all the machines similarly we look at

770
00:34:48,839 --> 00:34:51,839
the 15 minute window we look at the 16

771
00:34:51,839 --> 00:34:55,080
minute window 90 minute window 120

772
00:34:55,080 --> 00:34:57,599
minute window up till two days window so

773
00:34:57,599 --> 00:34:59,339
what we are trying to do we are trying

774
00:34:59,339 --> 00:35:01,940
to calculate the percentage of the time

775
00:35:01,940 --> 00:35:04,680
the first encounter of the malware

776
00:35:04,680 --> 00:35:06,839
happened and within different window

777
00:35:06,839 --> 00:35:09,960
whether this hash is there or not and

778
00:35:09,960 --> 00:35:12,180
based on that we are trying to calculate

779
00:35:12,180 --> 00:35:14,820
whether it is a clean or a malicious

780
00:35:14,820 --> 00:35:16,619
scenario

781
00:35:16,619 --> 00:35:20,480
but the problem with this uh thing is

782
00:35:20,480 --> 00:35:24,720
these uh MC Behavior hashes can change

783
00:35:24,720 --> 00:35:28,200
for example there is a JavaScript file

784
00:35:28,200 --> 00:35:31,140
which takes some user data and then do

785
00:35:31,140 --> 00:35:33,480
certain activity so in that case the

786
00:35:33,480 --> 00:35:36,540
exact hash got changed depending on the

787
00:35:36,540 --> 00:35:39,480
each machine so that means

788
00:35:39,480 --> 00:35:42,720
it all these hashes are not same so we

789
00:35:42,720 --> 00:35:45,900
can't say whether whether a particular

790
00:35:45,900 --> 00:35:48,180
hash is seen in all the machine and how

791
00:35:48,180 --> 00:35:50,640
many of those are aggregation is seen

792
00:35:50,640 --> 00:35:53,160
within the first minute or n minute time

793
00:35:53,160 --> 00:35:55,560
period Frame Window so what we did in

794
00:35:55,560 --> 00:35:57,960
that scenario instead of looking at the

795
00:35:57,960 --> 00:36:01,140
exact hash we try to look at the similar

796
00:36:01,140 --> 00:36:04,980
hashes for example now this hash will

797
00:36:04,980 --> 00:36:08,640
represent based on several things first

798
00:36:08,640 --> 00:36:10,859
is definitely the general Behavior

799
00:36:10,859 --> 00:36:14,579
second is the file name pattern and then

800
00:36:14,579 --> 00:36:17,339
there are n number of fuzzy hashes which

801
00:36:17,339 --> 00:36:19,440
Define the characteristic of a

802
00:36:19,440 --> 00:36:21,540
particular hash so that way now we are

803
00:36:21,540 --> 00:36:24,780
not just looking at one same exact hash

804
00:36:24,780 --> 00:36:26,880
we are looking at

805
00:36:26,880 --> 00:36:30,900
similar hashes and then we applying the

806
00:36:30,900 --> 00:36:33,240
same way which we described before which

807
00:36:33,240 --> 00:36:36,420
is like if that similar hash is seen

808
00:36:36,420 --> 00:36:39,300
within different time frame window and

809
00:36:39,300 --> 00:36:41,339
then what are the chances of those

810
00:36:41,339 --> 00:36:43,800
similar hashes seen within a malware

811
00:36:43,800 --> 00:36:47,579
event happen on different machines so

812
00:36:47,579 --> 00:36:51,359
when we when we did this exercise and

813
00:36:51,359 --> 00:36:55,200
and make a a code to automatically do

814
00:36:55,200 --> 00:36:58,800
that for us we find that okay this logic

815
00:36:58,800 --> 00:37:03,180
is pretty robust but the generic rule

816
00:37:03,180 --> 00:37:06,599
will not serve the best purpose which we

817
00:37:06,599 --> 00:37:09,240
are thinking to label the data so we

818
00:37:09,240 --> 00:37:11,339
taught why not to just build build

819
00:37:11,339 --> 00:37:13,619
another model which automatically

820
00:37:13,619 --> 00:37:17,700
generate labels for us so what we did we

821
00:37:17,700 --> 00:37:20,520
take this hash and similar hashes Around

822
00:37:20,520 --> 00:37:23,099
It Whatever information we discussed

823
00:37:23,099 --> 00:37:27,480
take that as a features of our meta

824
00:37:27,480 --> 00:37:29,940
label model then

825
00:37:29,940 --> 00:37:32,160
these features describe whether a

826
00:37:32,160 --> 00:37:34,980
behavior or a particular uh like a

827
00:37:34,980 --> 00:37:37,920
behavior and and its features is best

828
00:37:37,920 --> 00:37:39,839
describing a scenario

829
00:37:39,839 --> 00:37:43,440
we aggregate it with our first labeling

830
00:37:43,440 --> 00:37:46,320
method in which we know from the start

831
00:37:46,320 --> 00:37:49,859
that if a caller file is malicious the

832
00:37:49,859 --> 00:37:52,980
chances are the behavior hash is also

833
00:37:52,980 --> 00:37:55,859
malicious we integrated it with the

834
00:37:55,859 --> 00:37:59,099
logic of a clean or a healthy machine so

835
00:37:59,099 --> 00:38:03,240
there are like lot of machines uh from

836
00:38:03,240 --> 00:38:05,339
where we we mostly get the clean

837
00:38:05,339 --> 00:38:08,460
Telemetry so we can assume that okay in

838
00:38:08,460 --> 00:38:10,380
last 90 minutes there is no detection

839
00:38:10,380 --> 00:38:12,660
seen in this machine so whatever data

840
00:38:12,660 --> 00:38:14,460
which is coming from these machines are

841
00:38:14,460 --> 00:38:16,920
probably clean so we use that as a clean

842
00:38:16,920 --> 00:38:19,079
label set and we have our malicious

843
00:38:19,079 --> 00:38:21,839
label set these are the features we

844
00:38:21,839 --> 00:38:24,180
train the model on the light GBM

845
00:38:24,180 --> 00:38:27,119
algorithm and what it can do is it

846
00:38:27,119 --> 00:38:29,940
generates us the labels data which is

847
00:38:29,940 --> 00:38:32,760
like now the each hash can give you the

848
00:38:32,760 --> 00:38:34,920
probability that the malware happened

849
00:38:34,920 --> 00:38:37,220
depending on the

850
00:38:37,220 --> 00:38:39,780
characteristic on different machine it

851
00:38:39,780 --> 00:38:43,140
counter so this actually solves the

852
00:38:43,140 --> 00:38:46,859
problem of uh like the quantity of the

853
00:38:46,859 --> 00:38:49,619
labels which we have before so now we

854
00:38:49,619 --> 00:38:51,900
have very good quality labels and good

855
00:38:51,900 --> 00:38:55,440
quantity labels so uh so which is good

856
00:38:55,440 --> 00:38:59,240
to train our models

857
00:38:59,400 --> 00:39:02,460
so now uh the three steps of building

858
00:39:02,460 --> 00:39:04,980
the models is is complete is about

859
00:39:04,980 --> 00:39:07,020
collecting the data featurizing the data

860
00:39:07,020 --> 00:39:09,180
labeling the data now the only thing

861
00:39:09,180 --> 00:39:11,339
left is to choose the right algorithm

862
00:39:11,339 --> 00:39:13,980
and there are a lot of these algorithms

863
00:39:13,980 --> 00:39:16,260
which are there which work quite good in

864
00:39:16,260 --> 00:39:18,480
different scenarios but when we train

865
00:39:18,480 --> 00:39:21,599
our models uh on on all of these what

866
00:39:21,599 --> 00:39:24,359
what we figured out that in case of

867
00:39:24,359 --> 00:39:27,060
client-side models are logistic

868
00:39:27,060 --> 00:39:30,480
regression works really good because

869
00:39:30,480 --> 00:39:33,180
uh in in case of clouds client-side

870
00:39:33,180 --> 00:39:36,380
model we are only taking one feature Set

871
00:39:36,380 --> 00:39:39,119
uh and and we are taking even the

872
00:39:39,119 --> 00:39:41,160
smaller feature set so logistic

873
00:39:41,160 --> 00:39:43,560
regression works best in that scenario

874
00:39:43,560 --> 00:39:46,440
but in case of cloud models we are we

875
00:39:46,440 --> 00:39:48,000
are adding lot of other informations

876
00:39:48,000 --> 00:39:51,960
like fuzzy hashing process tree of of

877
00:39:51,960 --> 00:39:54,780
the event happen and and a cluster

878
00:39:54,780 --> 00:39:58,220
hashes uh so all of these uh I will say

879
00:39:58,220 --> 00:40:03,720
uh features which is very high uh like

880
00:40:03,720 --> 00:40:06,240
which take more con like a CPU

881
00:40:06,240 --> 00:40:09,599
consumption so those uh features uh got

882
00:40:09,599 --> 00:40:11,160
trained pretty well in average

883
00:40:11,160 --> 00:40:14,520
perception algorithm so yeah so this

884
00:40:14,520 --> 00:40:16,380
this when when this part is done we

885
00:40:16,380 --> 00:40:18,359
check the Precision and the recall of

886
00:40:18,359 --> 00:40:21,960
the models it works pretty well so we

887
00:40:21,960 --> 00:40:23,820
then deploy the models and the client

888
00:40:23,820 --> 00:40:26,220
and the cloud and and start looking at

889
00:40:26,220 --> 00:40:28,380
the data which we are blocking

890
00:40:28,380 --> 00:40:32,579
so right now uh like for each of the uh

891
00:40:32,579 --> 00:40:34,980
script scenarios we build different more

892
00:40:34,980 --> 00:40:37,260
uh models for example for Powershell

893
00:40:37,260 --> 00:40:38,880
there's a separate model for client and

894
00:40:38,880 --> 00:40:41,520
Cloud similarly for other cases and all

895
00:40:41,520 --> 00:40:42,900
of these are running in the real time

896
00:40:42,900 --> 00:40:45,359
and helping the customer to stop these

897
00:40:45,359 --> 00:40:46,980
attacks

898
00:40:46,980 --> 00:40:50,099
so now let's look at the case study uh

899
00:40:50,099 --> 00:40:53,060
from the blocks or or which these uh

900
00:40:53,060 --> 00:40:55,980
models are right now blocking

901
00:40:55,980 --> 00:40:59,640
so this is uh like uh part of one of the

902
00:40:59,640 --> 00:41:01,619
trick board banking Campaign which is

903
00:41:01,619 --> 00:41:03,900
specifically Target uh the reason in the

904
00:41:03,900 --> 00:41:06,060
Brazil so what we've seen in this case

905
00:41:06,060 --> 00:41:08,579
that initially when this campaign start

906
00:41:08,579 --> 00:41:12,180
it starts with one uh one city and in

907
00:41:12,180 --> 00:41:14,820
next one or two R itself it is spread it

908
00:41:14,820 --> 00:41:17,339
across the whole place and and it is

909
00:41:17,339 --> 00:41:20,220
having the similar pattern uh uh like

910
00:41:20,220 --> 00:41:22,619
the whole attack lifestyle cycle it is

911
00:41:22,619 --> 00:41:26,579
it is almost the same so when when the

912
00:41:26,579 --> 00:41:29,940
company start start with uh email which

913
00:41:29,940 --> 00:41:32,460
is having a Word document which is

914
00:41:32,460 --> 00:41:34,619
having a macro code which is further

915
00:41:34,619 --> 00:41:37,800
downloading a Javascript file the rename

916
00:41:37,800 --> 00:41:40,980
the or change the extension to that uh

917
00:41:40,980 --> 00:41:43,020
but it's the Javascript file which

918
00:41:43,020 --> 00:41:45,060
further downloads the trickbot cam

919
00:41:45,060 --> 00:41:48,180
trickbot payload and execute it on the

920
00:41:48,180 --> 00:41:50,700
fly but now as this client and the cloud

921
00:41:50,700 --> 00:41:53,940
models are in place in production so in

922
00:41:53,940 --> 00:41:57,000
the first time when we see that Word

923
00:41:57,000 --> 00:41:58,140
document

924
00:41:58,140 --> 00:42:01,079
so how it worked when this word document

925
00:42:01,079 --> 00:42:03,780
is seen first on the client we extract

926
00:42:03,780 --> 00:42:06,780
the features our client model will

927
00:42:06,780 --> 00:42:09,420
identify that okay this is a suspicious

928
00:42:09,420 --> 00:42:10,619
activity

929
00:42:10,619 --> 00:42:13,320
uh why not uh to send it to the cloud

930
00:42:13,320 --> 00:42:15,660
for the verdict so in the cloud or

931
00:42:15,660 --> 00:42:18,000
real-time models try to identify whether

932
00:42:18,000 --> 00:42:19,980
it's a clean or a malicious they

933
00:42:19,980 --> 00:42:22,980
identify as a malicious case they also

934
00:42:22,980 --> 00:42:25,020
ask the information from other product

935
00:42:25,020 --> 00:42:27,720
which I mentioned before and then based

936
00:42:27,720 --> 00:42:30,180
on that they just block this in the real

937
00:42:30,180 --> 00:42:33,240
time so we have seen like as in the

938
00:42:33,240 --> 00:42:35,520
previous slide as I've shown we have

939
00:42:35,520 --> 00:42:36,540
seen

940
00:42:36,540 --> 00:42:38,640
or the first problem which we talked

941
00:42:38,640 --> 00:42:41,520
about we want to stop this stack on the

942
00:42:41,520 --> 00:42:44,280
first customer machine or when it was

943
00:42:44,280 --> 00:42:46,440
seen first so this is like a proactive

944
00:42:46,440 --> 00:42:48,720
approach so when it is first seen we

945
00:42:48,720 --> 00:42:51,119
stopped it and it is based not on a

946
00:42:51,119 --> 00:42:54,420
specific manual pattern or signature it

947
00:42:54,420 --> 00:42:57,480
is based on the uh like a larger set of

948
00:42:57,480 --> 00:42:59,460
data which we have seen or which is

949
00:42:59,460 --> 00:43:01,800
feeded to the model and it automatically

950
00:43:01,800 --> 00:43:04,460
blocked it

951
00:43:04,740 --> 00:43:07,859
so now the few ke takeaways which is

952
00:43:07,859 --> 00:43:09,660
just I want to summarize the whole

953
00:43:09,660 --> 00:43:13,440
presentation uh so first there is a big

954
00:43:13,440 --> 00:43:16,140
shift from P based attacks to non-p

955
00:43:16,140 --> 00:43:18,900
based attacks and it is used in overall

956
00:43:18,900 --> 00:43:21,680
all part of the attack chain

957
00:43:21,680 --> 00:43:24,540
integration of the MC is really helpful

958
00:43:24,540 --> 00:43:28,619
because it help us to uh like uh to look

959
00:43:28,619 --> 00:43:31,740
at the behaviors of this script and file

960
00:43:31,740 --> 00:43:34,380
less scenarios at real time

961
00:43:34,380 --> 00:43:37,680
ml is really helpful tool if anyone can

962
00:43:37,680 --> 00:43:40,380
build these ml models to identify the

963
00:43:40,380 --> 00:43:44,060
patterns and and it is it is helpful to

964
00:43:44,060 --> 00:43:48,319
uh in instead of writing generic or the

965
00:43:48,319 --> 00:43:51,420
detection to specific case to look at

966
00:43:51,420 --> 00:43:54,300
the patterns and then uh write the

967
00:43:54,300 --> 00:43:57,000
detections and then the combination and

968
00:43:57,000 --> 00:43:59,400
the of client and clouds are are really

969
00:43:59,400 --> 00:44:01,260
helpful and it works perfectly because

970
00:44:01,260 --> 00:44:04,020
if you only build a client model that is

971
00:44:04,020 --> 00:44:07,500
also not uh uh like uh fulfill the whole

972
00:44:07,500 --> 00:44:09,540
task or if you only build the cloud

973
00:44:09,540 --> 00:44:12,420
model that for that you have to ask to

974
00:44:12,420 --> 00:44:14,520
the cloud every time that is like a too

975
00:44:14,520 --> 00:44:17,280
much of a cost but if you combine both

976
00:44:17,280 --> 00:44:19,920
then the the client will do the task of

977
00:44:19,920 --> 00:44:21,480
first level of filtering and the cloud

978
00:44:21,480 --> 00:44:24,000
will do the task of blocking it

979
00:44:24,000 --> 00:44:28,319
so yeah uh that's what the talk is about

980
00:44:28,319 --> 00:44:31,319
and I want to thank uh some of my peer

981
00:44:31,319 --> 00:44:33,480
uh colleagues who will not able to join

982
00:44:33,480 --> 00:44:36,060
me but uh part of this project Jeff

983
00:44:36,060 --> 00:44:39,119
Hamish and Andrea uh these guys help in

984
00:44:39,119 --> 00:44:42,000
building this this in this project and

985
00:44:42,000 --> 00:44:44,700
uh from from initial stage to deploying

986
00:44:44,700 --> 00:44:46,980
it and now it's all available to the

987
00:44:46,980 --> 00:44:49,079
customers

988
00:44:49,079 --> 00:44:54,319
So yeah thank you if you guys have

989
00:44:57,119 --> 00:44:59,280
thank you one kid I think we got a fair

990
00:44:59,280 --> 00:45:00,540
few questions

991
00:45:00,540 --> 00:45:02,700
uh the first one is one common attack

992
00:45:02,700 --> 00:45:04,980
involves disabling MC by for example

993
00:45:04,980 --> 00:45:07,500
breaking um see Open session or hooking

994
00:45:07,500 --> 00:45:10,140
UMC to provide fake information is this

995
00:45:10,140 --> 00:45:11,339
something that's considered in the

996
00:45:11,339 --> 00:45:12,420
analysis

997
00:45:12,420 --> 00:45:14,520
yeah so that's a really good question

998
00:45:14,520 --> 00:45:16,200
and actually that's like one of the

999
00:45:16,200 --> 00:45:18,300
biggest pain point we have also seen

1000
00:45:18,300 --> 00:45:21,720
that there are all of these new ways to

1001
00:45:21,720 --> 00:45:24,599
bypass MC which keeps on coming and

1002
00:45:24,599 --> 00:45:27,480
there are also like uh from the from the

1003
00:45:27,480 --> 00:45:29,700
dissection side of it we try to write

1004
00:45:29,700 --> 00:45:32,579
detections try to stop that but uh I

1005
00:45:32,579 --> 00:45:33,839
will say we are working on a very

1006
00:45:33,839 --> 00:45:38,640
durable way to stop it uh to stop it uh

1007
00:45:38,640 --> 00:45:41,880
at at a root level instead of fixing it

1008
00:45:41,880 --> 00:45:43,859
at the surface level you're working it

1009
00:45:43,859 --> 00:45:46,560
on fixing it or the root label but uh

1010
00:45:46,560 --> 00:45:49,319
this model for this specific case I will

1011
00:45:49,319 --> 00:45:52,200
say this will work when the MC data will

1012
00:45:52,200 --> 00:45:54,359
come to us but there are other models

1013
00:45:54,359 --> 00:45:58,140
because uh as as for Microsoft Defender

1014
00:45:58,140 --> 00:46:00,119
product itself we have different machine

1015
00:46:00,119 --> 00:46:01,859
learning model for different scenarios

1016
00:46:01,859 --> 00:46:03,300
for example we have machine learning

1017
00:46:03,300 --> 00:46:05,520
model for detecting PE files we have

1018
00:46:05,520 --> 00:46:08,040
models for detecting skip file itself

1019
00:46:08,040 --> 00:46:10,500
and this these are the models to detect

1020
00:46:10,500 --> 00:46:13,440
based on the MC buffer law box which we

1021
00:46:13,440 --> 00:46:16,740
got at the execution of the script uh

1022
00:46:16,740 --> 00:46:18,480
script files

1023
00:46:18,480 --> 00:46:20,700
any idea when we'll be able to see that

1024
00:46:20,700 --> 00:46:23,359
um see bypass not be a bypass anymore

1025
00:46:23,359 --> 00:46:26,640
it's hard to give a timeline this is

1026
00:46:26,640 --> 00:46:28,980
coming very soon okay

1027
00:46:28,980 --> 00:46:31,140
um it's Anonymous here

1028
00:46:31,140 --> 00:46:32,819
that's you that's your question all

1029
00:46:32,819 --> 00:46:35,040
right okay I'll pass this to you shortly

1030
00:46:35,040 --> 00:46:37,319
uh

1031
00:46:37,319 --> 00:46:39,180
second question I'm assuming the client

1032
00:46:39,180 --> 00:46:41,280
ml models are much smaller than those in

1033
00:46:41,280 --> 00:46:43,260
the cloud than the model that sends

1034
00:46:43,260 --> 00:46:45,180
suspicious files be checked against the

1035
00:46:45,180 --> 00:46:47,700
cloud be very weak in this instance

1036
00:46:47,700 --> 00:46:50,280
okay so

1037
00:46:50,280 --> 00:46:53,160
um yeah so this client model has at

1038
00:46:53,160 --> 00:46:55,560
first levels of filtering but along with

1039
00:46:55,560 --> 00:46:58,079
these client models there are various

1040
00:46:58,079 --> 00:47:01,140
other scenarios as well so it is not

1041
00:47:01,140 --> 00:47:03,540
just based on the client model that we

1042
00:47:03,540 --> 00:47:07,260
are sending the uh uh like a request to

1043
00:47:07,260 --> 00:47:09,780
the cloud we have various other

1044
00:47:09,780 --> 00:47:12,480
detection Logics as well so if there is

1045
00:47:12,480 --> 00:47:15,119
any suspicious event happen which is not

1046
00:47:15,119 --> 00:47:17,760
based on ML it's just simple logic that

1047
00:47:17,760 --> 00:47:20,579
if a Windward process is is launching a

1048
00:47:20,579 --> 00:47:22,319
Powershell which is launching a CMD

1049
00:47:22,319 --> 00:47:24,599
maybe this is a bit suspicious event

1050
00:47:24,599 --> 00:47:27,180
this it even itself will send to the

1051
00:47:27,180 --> 00:47:29,400
cloud and then will Cloud will take a

1052
00:47:29,400 --> 00:47:31,380
decision based on that so client model

1053
00:47:31,380 --> 00:47:34,140
help us to make first level of filtering

1054
00:47:34,140 --> 00:47:36,780
but that is not the only way to send the

1055
00:47:36,780 --> 00:47:38,880
request of the suspicious things to the

1056
00:47:38,880 --> 00:47:39,780
cloud

1057
00:47:39,780 --> 00:47:42,300
all right thank you is this Anonymous

1058
00:47:42,300 --> 00:47:44,220
here

1059
00:47:44,220 --> 00:47:47,220
nope all right uh next question what if

1060
00:47:47,220 --> 00:47:49,440
the malware simply blocks requests calls

1061
00:47:49,440 --> 00:47:50,940
to the cloud

1062
00:47:50,940 --> 00:47:52,859
okay

1063
00:47:52,859 --> 00:47:55,920
so yeah that's a good question like if

1064
00:47:55,920 --> 00:47:58,260
malware is able to block the request to

1065
00:47:58,260 --> 00:48:01,800
the cloud that means first thing is they

1066
00:48:01,800 --> 00:48:04,619
have to figure out how the defender is

1067
00:48:04,619 --> 00:48:06,660
sending requests to the cloud because

1068
00:48:06,660 --> 00:48:09,180
it's not that simple way like directly

1069
00:48:09,180 --> 00:48:11,160
looking at the request and and and and

1070
00:48:11,160 --> 00:48:15,540
and then by passing that either what I

1071
00:48:15,540 --> 00:48:18,180
can at because in this case and if there

1072
00:48:18,180 --> 00:48:20,819
is more context I will say if a malware

1073
00:48:20,819 --> 00:48:22,920
is using a specific technique is it

1074
00:48:22,920 --> 00:48:26,099
actually blocking the whole cloud like

1075
00:48:26,099 --> 00:48:28,260
any network connectivity from a machine

1076
00:48:28,260 --> 00:48:30,780
to the cloud then in that case

1077
00:48:30,780 --> 00:48:32,400
definitely these models will not work

1078
00:48:32,400 --> 00:48:34,319
because the whole connectivity to the

1079
00:48:34,319 --> 00:48:36,599
internet is stopped so none of the

1080
00:48:36,599 --> 00:48:39,740
request will goes to the cloud but

1081
00:48:39,740 --> 00:48:43,500
specifically if attacker try to look for

1082
00:48:43,500 --> 00:48:45,720
how the defender is communicating with

1083
00:48:45,720 --> 00:48:47,940
the cloud and try to block that traffic

1084
00:48:47,940 --> 00:48:50,220
and all those things then definitely

1085
00:48:50,220 --> 00:48:53,160
it's a it's a long process but if

1086
00:48:53,160 --> 00:48:55,740
they're able to do that then yeah then

1087
00:48:55,740 --> 00:48:58,200
the cloud protection as a whole will not

1088
00:48:58,200 --> 00:49:00,599
be available but uh there are definitely

1089
00:49:00,599 --> 00:49:02,099
a lot of the client-side protection

1090
00:49:02,099 --> 00:49:04,680
which is there not just on the ml side

1091
00:49:04,680 --> 00:49:06,560
but on the other

1092
00:49:06,560 --> 00:49:08,880
generic detection which is there which

1093
00:49:08,880 --> 00:49:11,460
can help the house of the purpose

1094
00:49:11,460 --> 00:49:13,680
all right thank you

1095
00:49:13,680 --> 00:49:16,500
um is the Telemetry propriety or closed

1096
00:49:16,500 --> 00:49:18,660
if so will Microsoft be open to open up

1097
00:49:18,660 --> 00:49:21,480
these data uh for machines that they own

1098
00:49:21,480 --> 00:49:23,640
or to the community public to perform

1099
00:49:23,640 --> 00:49:25,859
their own machine learning and hunting

1100
00:49:25,859 --> 00:49:28,920
okay so this is like a customer data so

1101
00:49:28,920 --> 00:49:31,319
uh we also that's why don't store this

1102
00:49:31,319 --> 00:49:33,599
data is like a fraction of the metadata

1103
00:49:33,599 --> 00:49:35,880
or the things which is there in the

1104
00:49:35,880 --> 00:49:38,280
cloud cloud because of the reasons and

1105
00:49:38,280 --> 00:49:40,440
all but there are definitely like the

1106
00:49:40,440 --> 00:49:44,579
malicious data set uh which can be uh

1107
00:49:44,579 --> 00:49:47,339
open for everyone to consume and build

1108
00:49:47,339 --> 00:49:49,980
their models or or if they want to do

1109
00:49:49,980 --> 00:49:52,800
hunting based on that but a lot of them

1110
00:49:52,800 --> 00:49:56,099
can't be shared as the customer data all

1111
00:49:56,099 --> 00:49:58,740
right msdic has some data models on it

1112
00:49:58,740 --> 00:50:00,660
yeah Mystic yeah

1113
00:50:00,660 --> 00:50:02,819
how often are these how often are the

1114
00:50:02,819 --> 00:50:04,319
models on the client side regularly

1115
00:50:04,319 --> 00:50:06,000
updated okay that's a good question

1116
00:50:06,000 --> 00:50:08,880
because uh clients and model get updated

1117
00:50:08,880 --> 00:50:12,240
every day so new data comes in they get

1118
00:50:12,240 --> 00:50:15,780
trained so we have a whole like uh uh I

1119
00:50:15,780 --> 00:50:17,640
will say workflow life cycle in which

1120
00:50:17,640 --> 00:50:19,380
did the new data come in model got

1121
00:50:19,380 --> 00:50:21,240
trained it will get automatically get

1122
00:50:21,240 --> 00:50:24,359
deployed to the uh client side and it

1123
00:50:24,359 --> 00:50:26,819
get updated to the customer so once in a

1124
00:50:26,819 --> 00:50:29,099
day this whole updation happened and

1125
00:50:29,099 --> 00:50:31,200
similarly in the cloud it even happened

1126
00:50:31,200 --> 00:50:33,540
even faster like couple of times in a

1127
00:50:33,540 --> 00:50:36,119
day but if there is something which we

1128
00:50:36,119 --> 00:50:38,579
require to push it even earlier we can

1129
00:50:38,579 --> 00:50:40,619
do that as well because it is in the

1130
00:50:40,619 --> 00:50:42,180
cloud

1131
00:50:42,180 --> 00:50:46,759
all right thank you any more questions

1132
00:50:46,980 --> 00:50:49,319
no all right thanks again thank you very

1133
00:50:49,319 --> 00:50:51,740
much guys

