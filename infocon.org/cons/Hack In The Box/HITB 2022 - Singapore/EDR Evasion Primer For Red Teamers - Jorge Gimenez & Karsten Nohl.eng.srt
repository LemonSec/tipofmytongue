1
00:00:06,740 --> 00:00:09,179
very good afternoon

2
00:00:09,179 --> 00:00:11,099
um so good to be back at conferences

3
00:00:11,099 --> 00:00:14,460
after a long time we missed you all and

4
00:00:14,460 --> 00:00:17,279
great to be speaking to you today

5
00:00:17,279 --> 00:00:19,680
um we we go to conferences a lot to to

6
00:00:19,680 --> 00:00:20,880
share

7
00:00:20,880 --> 00:00:23,400
um insights from our research and from

8
00:00:23,400 --> 00:00:26,580
our Consulting work in Security today we

9
00:00:26,580 --> 00:00:28,800
do a bit of both on a very relevant

10
00:00:28,800 --> 00:00:32,640
topic which is evading EDR EDR stands

11
00:00:32,640 --> 00:00:35,340
for endpoint detection and response it's

12
00:00:35,340 --> 00:00:37,739
basically your modern antivirus that

13
00:00:37,739 --> 00:00:40,020
should keep you safe from malware but

14
00:00:40,020 --> 00:00:41,940
we'll show you today that it really

15
00:00:41,940 --> 00:00:45,480
doesn't or contribute a little bit but

16
00:00:45,480 --> 00:00:47,160
definitely is not a cure all for the

17
00:00:47,160 --> 00:00:49,260
malware problem

18
00:00:49,260 --> 00:00:52,620
um we have a bit of background on how

19
00:00:52,620 --> 00:00:54,960
edrs generally work we'll then explain

20
00:00:54,960 --> 00:00:57,239
how to get around to protection measures

21
00:00:57,239 --> 00:00:59,640
and we'll discuss a little bit at the

22
00:00:59,640 --> 00:01:01,680
end what additional controls you would

23
00:01:01,680 --> 00:01:03,899
need to actually be safe from malware if

24
00:01:03,899 --> 00:01:05,820
that's even possible

25
00:01:05,820 --> 00:01:08,159
um this would be interesting uh for you

26
00:01:08,159 --> 00:01:10,260
if you have not heard of EDS before

27
00:01:10,260 --> 00:01:12,960
obviously a lot of the techniques though

28
00:01:12,960 --> 00:01:14,760
that we cover are well documented in

29
00:01:14,760 --> 00:01:16,920
other places we didn't reinvent the

30
00:01:16,920 --> 00:01:20,360
wheel here EDR version is a popular

31
00:01:20,360 --> 00:01:23,460
technique among red teamers so if you

32
00:01:23,460 --> 00:01:24,960
haven't been exposed to the topic yet

33
00:01:24,960 --> 00:01:27,060
this is a great place to start but if

34
00:01:27,060 --> 00:01:29,580
you do know a lot about edrs already I

35
00:01:29,580 --> 00:01:31,320
think we brought an overview that you

36
00:01:31,320 --> 00:01:33,299
would not have seen anywhere else which

37
00:01:33,299 --> 00:01:35,100
division techniques work against which

38
00:01:35,100 --> 00:01:36,960
Solutions exactly what you should be

39
00:01:36,960 --> 00:01:40,020
focusing on to have a very effective EDR

40
00:01:40,020 --> 00:01:42,540
evasion setup right

41
00:01:42,540 --> 00:01:45,299
um was that Set uh why are we talking to

42
00:01:45,299 --> 00:01:46,560
you about this

43
00:01:46,560 --> 00:01:50,820
um here with my colleague who's a retima

44
00:01:50,820 --> 00:01:53,340
um we both work in berlinet as our Labs

45
00:01:53,340 --> 00:01:54,780
um and as part of the red team

46
00:01:54,780 --> 00:01:57,240
activities of course we have to break

47
00:01:57,240 --> 00:01:59,759
into companies and basically in a

48
00:01:59,759 --> 00:02:01,920
multi-week or sometimes multi-month

49
00:02:01,920 --> 00:02:03,840
Journey take over the entire company

50
00:02:03,840 --> 00:02:06,659
that's the job of a red team and more

51
00:02:06,659 --> 00:02:08,940
often than not of course we encounter an

52
00:02:08,940 --> 00:02:12,599
EDR in the process I'm Carson I'm not

53
00:02:12,599 --> 00:02:14,220
doing red teaming so much I'm more

54
00:02:14,220 --> 00:02:15,420
focusing on other critical

55
00:02:15,420 --> 00:02:17,819
infrastructure telcos and whatnot but

56
00:02:17,819 --> 00:02:20,220
increasingly too we encounter EDR

57
00:02:20,220 --> 00:02:22,379
systems and similar so if your evasion

58
00:02:22,379 --> 00:02:25,140
just belongs into the toolbox of a

59
00:02:25,140 --> 00:02:28,200
versatile hacker these days which is why

60
00:02:28,200 --> 00:02:30,840
we are running our own small EDR test

61
00:02:30,840 --> 00:02:33,900
lab we have to so for instance when we

62
00:02:33,900 --> 00:02:36,360
encounter a new EDR doing a red team

63
00:02:36,360 --> 00:02:39,300
engagement instead of trying out our

64
00:02:39,300 --> 00:02:41,160
samples in in that environment

65
00:02:41,160 --> 00:02:43,800
government we run it in our own test lab

66
00:02:43,800 --> 00:02:45,660
until we're reasonably sure that it's

67
00:02:45,660 --> 00:02:48,000
not going to trigger any alerts so you

68
00:02:48,000 --> 00:02:51,120
need that test lab environment and

69
00:02:51,120 --> 00:02:53,640
um it's it's set up probably exactly how

70
00:02:53,640 --> 00:02:55,739
you would expect there's all kinds of

71
00:02:55,739 --> 00:02:58,500
virtual machines running that you have

72
00:02:58,500 --> 00:03:00,360
different edrs or the same media and

73
00:03:00,360 --> 00:03:02,519
different configuration running and then

74
00:03:02,519 --> 00:03:04,500
we put the same malware vectors into all

75
00:03:04,500 --> 00:03:06,420
of them and see which ones trigger which

76
00:03:06,420 --> 00:03:08,700
ones don't until finally we find samples

77
00:03:08,700 --> 00:03:11,159
that none of them detect anymore and

78
00:03:11,159 --> 00:03:12,780
those are then good to go from red

79
00:03:12,780 --> 00:03:14,819
teaming engagement

80
00:03:14,819 --> 00:03:16,920
um all right so

81
00:03:16,920 --> 00:03:18,480
um I'll cover the background and then

82
00:03:18,480 --> 00:03:20,159
Jorge is going to give you the more

83
00:03:20,159 --> 00:03:23,180
interesting results so let's start with

84
00:03:23,180 --> 00:03:26,819
how EDR systems in general work

85
00:03:26,819 --> 00:03:28,680
um they combine three analysis

86
00:03:28,680 --> 00:03:30,720
techniques two of which you already know

87
00:03:30,720 --> 00:03:33,300
from antivirus and the third one is

88
00:03:33,300 --> 00:03:35,580
really what what makes EDS different

89
00:03:35,580 --> 00:03:38,159
from from antivirus so the two known

90
00:03:38,159 --> 00:03:40,319
from antiviruses static analysis where

91
00:03:40,319 --> 00:03:43,080
basically you just look at a file and

92
00:03:43,080 --> 00:03:44,819
just from looking at the file you have

93
00:03:44,819 --> 00:03:47,640
to decide is it a virus or not

94
00:03:47,640 --> 00:03:51,000
Dynamic analysis runs the file but often

95
00:03:51,000 --> 00:03:53,159
in a sandbox environment or some kind of

96
00:03:53,159 --> 00:03:55,560
a virtual machine and then decides based

97
00:03:55,560 --> 00:03:57,319
on the behavior in that virtual machine

98
00:03:57,319 --> 00:04:00,180
whether it's malicious or not in

99
00:04:00,180 --> 00:04:02,459
behavioral analysis the part that is new

100
00:04:02,459 --> 00:04:05,700
for edrs that runs the potential virus

101
00:04:05,700 --> 00:04:07,440
on your actual computer

102
00:04:07,440 --> 00:04:09,840
and observes it and then has to decide

103
00:04:09,840 --> 00:04:11,939
pretty quickly is it a virus or not

104
00:04:11,939 --> 00:04:14,099
because you already started it right so

105
00:04:14,099 --> 00:04:16,199
you have to to quickly kill it if you

106
00:04:16,199 --> 00:04:18,899
think it's malicious right so let's zoom

107
00:04:18,899 --> 00:04:20,579
into each of those

108
00:04:20,579 --> 00:04:23,040
um a little bit more static analysis

109
00:04:23,040 --> 00:04:26,280
right it's probably easiest to explain

110
00:04:26,280 --> 00:04:28,820
um you you take any kind of executable

111
00:04:28,820 --> 00:04:32,340
and when it's downloaded or at the time

112
00:04:32,340 --> 00:04:34,860
that it's about to be executed

113
00:04:34,860 --> 00:04:37,139
um you you pass it for all kinds of

114
00:04:37,139 --> 00:04:38,340
information

115
00:04:38,340 --> 00:04:39,840
um could be for instance a p addresses

116
00:04:39,840 --> 00:04:41,580
could be hashes all kinds of information

117
00:04:41,580 --> 00:04:44,580
that you might have seen in azamawa

118
00:04:44,580 --> 00:04:46,440
samples right if you're communicating

119
00:04:46,440 --> 00:04:48,180
for instance with the same command and

120
00:04:48,180 --> 00:04:50,160
control infrastructure so then you learn

121
00:04:50,160 --> 00:04:52,560
okay this is another copy of that same

122
00:04:52,560 --> 00:04:54,180
virus I knew before this is how

123
00:04:54,180 --> 00:04:56,280
antivirus used to work you basically

124
00:04:56,280 --> 00:04:58,440
infer from all the viruses that you have

125
00:04:58,440 --> 00:05:01,139
seen in the past that this again is a

126
00:05:01,139 --> 00:05:03,900
new virus this is pretty simple to

127
00:05:03,900 --> 00:05:06,419
circumvent by obfuscating or even

128
00:05:06,419 --> 00:05:08,520
encrypting all that interesting

129
00:05:08,520 --> 00:05:10,500
information so basically you take the

130
00:05:10,500 --> 00:05:13,080
virus you encrypt it so that in the file

131
00:05:13,080 --> 00:05:15,300
itself there are no IP addresses or

132
00:05:15,300 --> 00:05:17,220
known hashes anymore

133
00:05:17,220 --> 00:05:19,800
um and then basically the only part that

134
00:05:19,800 --> 00:05:21,479
that could be detected is of course your

135
00:05:21,479 --> 00:05:23,220
decryption routine at the very beginning

136
00:05:23,220 --> 00:05:25,500
of the file so as long as you obviously

137
00:05:25,500 --> 00:05:27,720
get that enough your

138
00:05:27,720 --> 00:05:30,240
usually save from static analysis so

139
00:05:30,240 --> 00:05:33,000
this is mostly an outdated analysis

140
00:05:33,000 --> 00:05:34,919
technique of course they still throw it

141
00:05:34,919 --> 00:05:36,900
in the back more helps more of course so

142
00:05:36,900 --> 00:05:38,940
modern engines run this kind of in

143
00:05:38,940 --> 00:05:40,620
parallel to

144
00:05:40,620 --> 00:05:42,660
um the other stuff so let's come to the

145
00:05:42,660 --> 00:05:45,180
second one Dynamic analysis again this

146
00:05:45,180 --> 00:05:47,520
is when you take your your

147
00:05:47,520 --> 00:05:49,500
um potentially malicious binary and you

148
00:05:49,500 --> 00:05:51,419
run it but you run it in a shielded

149
00:05:51,419 --> 00:05:54,360
environment referred to as a Sandbox now

150
00:05:54,360 --> 00:05:56,280
this time

151
00:05:56,280 --> 00:05:58,080
um the the model will actually start

152
00:05:58,080 --> 00:06:00,720
decrypting itself so it will disclose

153
00:06:00,720 --> 00:06:03,120
things like IP addresses for instance by

154
00:06:03,120 --> 00:06:05,039
way of opening network connections so

155
00:06:05,039 --> 00:06:07,320
again you're basically looking for those

156
00:06:07,320 --> 00:06:08,940
known

157
00:06:08,940 --> 00:06:12,660
um bads indicators of compromise like IP

158
00:06:12,660 --> 00:06:15,539
addresses but this time the malware

159
00:06:15,539 --> 00:06:16,979
doesn't have a way of hiding it anymore

160
00:06:16,979 --> 00:06:18,960
it has to communicate with the IP

161
00:06:18,960 --> 00:06:21,180
address of course right you can also

162
00:06:21,180 --> 00:06:24,780
look for malicious behavior say the

163
00:06:24,780 --> 00:06:28,080
marbleware to create a user or

164
00:06:28,080 --> 00:06:30,860
start reading some some process memory

165
00:06:30,860 --> 00:06:33,479
else's for instance right so these are

166
00:06:33,479 --> 00:06:35,759
very suspicious things that usually only

167
00:06:35,759 --> 00:06:38,460
viruses do so based on that and that

168
00:06:38,460 --> 00:06:40,740
only you can then decide this is a virus

169
00:06:40,740 --> 00:06:42,960
I'm going to delete this this cannot run

170
00:06:42,960 --> 00:06:45,419
on the actual system right

171
00:06:45,419 --> 00:06:46,199
um

172
00:06:46,199 --> 00:06:48,120
and this in theory is actually a very

173
00:06:48,120 --> 00:06:49,919
powerful technique because if your list

174
00:06:49,919 --> 00:06:51,419
of malicious behavior includes

175
00:06:51,419 --> 00:06:53,460
everything that the virus would possibly

176
00:06:53,460 --> 00:06:55,440
want to do you're constraining it to

177
00:06:55,440 --> 00:06:57,060
basically be useless

178
00:06:57,060 --> 00:06:59,100
the way viruses get around this though

179
00:06:59,100 --> 00:07:02,400
is by detecting the sandbox itself so at

180
00:07:02,400 --> 00:07:04,199
the very beginning the virus will check

181
00:07:04,199 --> 00:07:06,060
is this a normal computer that I'm

182
00:07:06,060 --> 00:07:08,100
running or is this a Sandbox and if it's

183
00:07:08,100 --> 00:07:09,780
a Sandbox it's just not going to do

184
00:07:09,780 --> 00:07:12,180
anything malicious right so how do you

185
00:07:12,180 --> 00:07:14,100
know that you're running in a sandbox

186
00:07:14,100 --> 00:07:16,620
there's certain generic characteristics

187
00:07:16,620 --> 00:07:19,380
um it usually has just one CPU it has a

188
00:07:19,380 --> 00:07:22,319
limited amount of memory but it's also

189
00:07:22,319 --> 00:07:24,240
um pretty specific things that you can

190
00:07:24,240 --> 00:07:26,400
code into your virus so imagine you're

191
00:07:26,400 --> 00:07:29,580
sending viruses to specific people

192
00:07:29,580 --> 00:07:31,440
right and you want exactly that person

193
00:07:31,440 --> 00:07:34,500
to open that copy of the virus you can

194
00:07:34,500 --> 00:07:35,520
check

195
00:07:35,520 --> 00:07:37,500
from the virus binary whether the user

196
00:07:37,500 --> 00:07:39,840
account exists right that user does that

197
00:07:39,840 --> 00:07:42,180
user account exist on Windows and if it

198
00:07:42,180 --> 00:07:44,280
doesn't that indicates that it's running

199
00:07:44,280 --> 00:07:45,840
on some kind of other machine could be

200
00:07:45,840 --> 00:07:47,400
the sandbox so you just don't do

201
00:07:47,400 --> 00:07:48,960
anything malicious right so there's

202
00:07:48,960 --> 00:07:51,780
there's many ways to to avoid being

203
00:07:51,780 --> 00:07:53,819
being sandboxed and detected that way

204
00:07:53,819 --> 00:07:55,979
which is then why

205
00:07:55,979 --> 00:07:57,900
um the Eds Solutions introduced this

206
00:07:57,900 --> 00:08:00,060
third analysis technique and that's

207
00:08:00,060 --> 00:08:03,240
called behavioral analysis so this time

208
00:08:03,240 --> 00:08:05,699
you you run the the malware again uh but

209
00:08:05,699 --> 00:08:08,699
not in a sandbox but on real computer

210
00:08:08,699 --> 00:08:11,580
and you check on it very closely to see

211
00:08:11,580 --> 00:08:13,740
what it's doing and

212
00:08:13,740 --> 00:08:15,840
um the way this works I have to give you

213
00:08:15,840 --> 00:08:17,699
a little bit more context so

214
00:08:17,699 --> 00:08:19,979
um whenever any process starts well

215
00:08:19,979 --> 00:08:21,660
typically it could be model could be

216
00:08:21,660 --> 00:08:22,800
anything else

217
00:08:22,800 --> 00:08:25,080
um it loads certain libraries those

218
00:08:25,080 --> 00:08:26,940
libraries uh used to intact with the

219
00:08:26,940 --> 00:08:28,560
operating system right it's just too

220
00:08:28,560 --> 00:08:30,240
message to to interact with the

221
00:08:30,240 --> 00:08:32,099
operating system kernel directly so you

222
00:08:32,099 --> 00:08:34,140
use those libraries as kind of a buffer

223
00:08:34,140 --> 00:08:37,080
right as soon as those libraries are

224
00:08:37,080 --> 00:08:39,419
loaded into the process memory the EDR

225
00:08:39,419 --> 00:08:42,599
in green here will overwrite parts of

226
00:08:42,599 --> 00:08:45,060
these libraries to hook itself into it

227
00:08:45,060 --> 00:08:46,380
so

228
00:08:46,380 --> 00:08:49,080
the malware calls the library the

229
00:08:49,080 --> 00:08:50,940
library is now supposed to call the

230
00:08:50,940 --> 00:08:53,100
kernel but instead calls the EDI instead

231
00:08:53,100 --> 00:08:54,720
gives it some information and basically

232
00:08:54,720 --> 00:08:57,540
asks for permission to proceed right so

233
00:08:57,540 --> 00:08:59,399
at different points during the execution

234
00:08:59,399 --> 00:09:02,040
DDR learns information about this

235
00:09:02,040 --> 00:09:04,019
process and each time can decide this is

236
00:09:04,019 --> 00:09:06,060
malicious or this is not malicious right

237
00:09:06,060 --> 00:09:08,580
so look at this from the perspective of

238
00:09:08,580 --> 00:09:11,399
the malware for instance as we said at

239
00:09:11,399 --> 00:09:13,680
the beginning it usually uh keeps all

240
00:09:13,680 --> 00:09:15,420
the interesting stuff encrypted so that

241
00:09:15,420 --> 00:09:17,040
the static analysis doesn't work so

242
00:09:17,040 --> 00:09:18,839
what's the first thing the malware does

243
00:09:18,839 --> 00:09:22,740
it has to allocate some new memory

244
00:09:22,740 --> 00:09:25,260
it has to decrypt its payload into that

245
00:09:25,260 --> 00:09:28,860
memory and then execute that that new

246
00:09:28,860 --> 00:09:31,339
code from that new memory right so

247
00:09:31,339 --> 00:09:34,339
allocate copy into and then execute

248
00:09:34,339 --> 00:09:37,080
those three steps in that order are

249
00:09:37,080 --> 00:09:39,180
almost always a virus

250
00:09:39,180 --> 00:09:41,160
right and the EDR through these hooks

251
00:09:41,160 --> 00:09:43,080
learns that exactly these three things

252
00:09:43,080 --> 00:09:45,660
happen in that order and it will stop

253
00:09:45,660 --> 00:09:48,180
the malware basically a millisecond

254
00:09:48,180 --> 00:09:50,100
before it was about to execute in that

255
00:09:50,100 --> 00:09:51,720
third step it says no if those things

256
00:09:51,720 --> 00:09:54,060
happen in this order malicious stop

257
00:09:54,060 --> 00:09:56,100
right so it's playing with fire a little

258
00:09:56,100 --> 00:09:57,899
bit right you've got very close to more

259
00:09:57,899 --> 00:09:59,880
executing right

260
00:09:59,880 --> 00:10:00,660
um

261
00:10:00,660 --> 00:10:02,820
so that's what we're up against when we

262
00:10:02,820 --> 00:10:04,920
in our EDR test lab have to circumvent

263
00:10:04,920 --> 00:10:06,180
edrs now

264
00:10:06,180 --> 00:10:08,459
um and I'll just very briefly go over

265
00:10:08,459 --> 00:10:09,839
the techniques

266
00:10:09,839 --> 00:10:11,820
um in in one overview and then Hawker is

267
00:10:11,820 --> 00:10:14,880
going to fill in all the details so

268
00:10:14,880 --> 00:10:16,800
um what we're going to look at next uh

269
00:10:16,800 --> 00:10:19,440
are basically different ways of evading

270
00:10:19,440 --> 00:10:21,540
um this behavioral detection all of

271
00:10:21,540 --> 00:10:24,240
those start by

272
00:10:24,240 --> 00:10:26,580
um or we're prepared to to evade static

273
00:10:26,580 --> 00:10:29,040
analysis and dynamic analysis that goes

274
00:10:29,040 --> 00:10:30,899
without saying we don't want to make it

275
00:10:30,899 --> 00:10:32,820
too easy for the solution and then we're

276
00:10:32,820 --> 00:10:35,220
playing around with these different ways

277
00:10:35,220 --> 00:10:37,800
um of getting around the behavioral

278
00:10:37,800 --> 00:10:39,420
analysis part

279
00:10:39,420 --> 00:10:41,040
um we have some samples that don't try

280
00:10:41,040 --> 00:10:42,660
this at all kind of as a reference case

281
00:10:42,660 --> 00:10:45,000
right that they run as if they're up

282
00:10:45,000 --> 00:10:47,339
against an antivirus solution say

283
00:10:47,339 --> 00:10:48,600
um and then there are three actual

284
00:10:48,600 --> 00:10:50,459
evasion techniques and

285
00:10:50,459 --> 00:10:52,760
um just in a nutshell what they do is

286
00:10:52,760 --> 00:10:56,040
the first evasion technique overwrites

287
00:10:56,040 --> 00:10:58,980
again what the EDR had overwritten so

288
00:10:58,980 --> 00:11:00,899
basically restores the original system

289
00:11:00,899 --> 00:11:03,120
Library so that these hooks go away

290
00:11:03,120 --> 00:11:05,820
the second evasion technique it takes

291
00:11:05,820 --> 00:11:07,860
directly with the kernel so basically

292
00:11:07,860 --> 00:11:10,079
going around the overwritten system

293
00:11:10,079 --> 00:11:12,120
library and the third technique this is

294
00:11:12,120 --> 00:11:13,740
the most interesting

295
00:11:13,740 --> 00:11:16,500
um uses just very small code fragments

296
00:11:16,500 --> 00:11:18,600
basically single instructions from the

297
00:11:18,600 --> 00:11:20,820
libraries and by just using those

298
00:11:20,820 --> 00:11:22,740
instructions they they don't trigger the

299
00:11:22,740 --> 00:11:23,940
hooks

300
00:11:23,940 --> 00:11:25,680
um again Hawker knows a lot more about

301
00:11:25,680 --> 00:11:28,459
this so over to him yep

302
00:11:28,459 --> 00:11:31,800
yeah it works uh so yeah as we have

303
00:11:31,800 --> 00:11:34,560
pension EVR is going to place its hooks

304
00:11:34,560 --> 00:11:36,839
inside ntdll that means that it's going

305
00:11:36,839 --> 00:11:39,480
to modify ntdll in the moment in the

306
00:11:39,480 --> 00:11:41,160
memory of our process

307
00:11:41,160 --> 00:11:43,680
to analyze our behavior and see what we

308
00:11:43,680 --> 00:11:45,480
are actually doing

309
00:11:45,480 --> 00:11:46,740
so

310
00:11:46,740 --> 00:11:48,360
the first thing you you can think about

311
00:11:48,360 --> 00:11:49,680
and the first technique that comes to

312
00:11:49,680 --> 00:11:51,180
your mind is that you want to remove

313
00:11:51,180 --> 00:11:53,519
those hooks you want to restore your

314
00:11:53,519 --> 00:11:56,339
email into dll before the EDR has ever

315
00:11:56,339 --> 00:11:59,540
interacted with it with it

316
00:11:59,700 --> 00:12:02,100
um to do this we need to override our

317
00:12:02,100 --> 00:12:05,279
entityll in memory and that means that

318
00:12:05,279 --> 00:12:07,500
there was a time in which entityll was

319
00:12:07,500 --> 00:12:10,019
unmodified and there has to be a fresh

320
00:12:10,019 --> 00:12:12,300
copy of ntdll around our Windows system

321
00:12:12,300 --> 00:12:15,720
that doesn't contain this these EDR

322
00:12:15,720 --> 00:12:18,060
hooks because it is designed to be that

323
00:12:18,060 --> 00:12:20,040
way Windows needs to work with these

324
00:12:20,040 --> 00:12:22,019
fresh ntdlls and they have to be there

325
00:12:22,019 --> 00:12:24,779
they are only modified once the EDR is

326
00:12:24,779 --> 00:12:27,000
loaded in our process

327
00:12:27,000 --> 00:12:29,700
to obtain a fresh copy of ntll we can

328
00:12:29,700 --> 00:12:32,220
approach different ways right the first

329
00:12:32,220 --> 00:12:34,920
way would be read entityll directly from

330
00:12:34,920 --> 00:12:37,980
disk we know that nttll was unmodified

331
00:12:37,980 --> 00:12:42,120
before the EDR modified it in memory so

332
00:12:42,120 --> 00:12:44,639
if we just go to the arena location and

333
00:12:44,639 --> 00:12:46,860
map it in our process and overwrite them

334
00:12:46,860 --> 00:12:50,160
into the overwritten into dll then we'll

335
00:12:50,160 --> 00:12:52,800
get a copy of entity interior will be in

336
00:12:52,800 --> 00:12:55,019
over process without being modified

337
00:12:55,019 --> 00:12:57,360
without any hooks

338
00:12:57,360 --> 00:12:59,519
another another approach to this same

339
00:12:59,519 --> 00:13:01,800
problem was disclosed by the folks of

340
00:13:01,800 --> 00:13:04,920
sector seven and uh involves a starting

341
00:13:04,920 --> 00:13:07,560
a process in a suspended State and

342
00:13:07,560 --> 00:13:10,680
copying ntll from there before the EDR

343
00:13:10,680 --> 00:13:12,600
has placed its hooks in the new

344
00:13:12,600 --> 00:13:15,779
suspended process this is because DDR is

345
00:13:15,779 --> 00:13:18,120
only placing its hooks in a certain

346
00:13:18,120 --> 00:13:20,820
moment of the execution

347
00:13:20,820 --> 00:13:23,220
with both approach uh we are going to

348
00:13:23,220 --> 00:13:25,260
obtain the same results and as long as

349
00:13:25,260 --> 00:13:27,600
we can obtain a fresh copy of ntdll

350
00:13:27,600 --> 00:13:29,760
which should be good to go our objective

351
00:13:29,760 --> 00:13:31,560
is the same so we can really get

352
00:13:31,560 --> 00:13:33,060
creative there are a lot of ways of

353
00:13:33,060 --> 00:13:33,860
actually

354
00:13:33,860 --> 00:13:36,600
obtaining the same the same the same

355
00:13:36,600 --> 00:13:39,959
objective no matter how we do it we just

356
00:13:39,959 --> 00:13:42,120
need to attain a fresh copy of ntdll and

357
00:13:42,120 --> 00:13:46,260
we write over uh in memory ntdll in this

358
00:13:46,260 --> 00:13:48,720
case ideally the EDR would see nothing

359
00:13:48,720 --> 00:13:50,820
but obviously there are different hook

360
00:13:50,820 --> 00:13:53,279
implementations and DDR sometimes play

361
00:13:53,279 --> 00:13:55,200
schools in another way for the passports

362
00:13:55,200 --> 00:13:56,720
of this talk we are only talking about

363
00:13:56,720 --> 00:14:00,899
hooking techniques that focus on ntdll

364
00:14:00,899 --> 00:14:02,639
also

365
00:14:02,639 --> 00:14:04,620
we came across a problem when we are

366
00:14:04,620 --> 00:14:06,300
doing this technique the first thing we

367
00:14:06,300 --> 00:14:09,540
face is that accessing ntdll is a wide

368
00:14:09,540 --> 00:14:11,639
common flag activity and that's because

369
00:14:11,639 --> 00:14:13,800
basically every threat actor is do was

370
00:14:13,800 --> 00:14:16,740
doing that to remove the entire ntdll

371
00:14:16,740 --> 00:14:18,899
hooks because it's basically what the

372
00:14:18,899 --> 00:14:20,579
first thing you think about when you

373
00:14:20,579 --> 00:14:22,860
want to override your ntdll

374
00:14:22,860 --> 00:14:25,260
and also the second thing we face is

375
00:14:25,260 --> 00:14:27,360
that the API calls we are actually using

376
00:14:27,360 --> 00:14:30,240
to override ntdll are also hooked so

377
00:14:30,240 --> 00:14:32,220
it's a bit uncomfortable because the EDR

378
00:14:32,220 --> 00:14:34,560
is actually seeing what we are doing in

379
00:14:34,560 --> 00:14:36,360
the meantime so it's like

380
00:14:36,360 --> 00:14:39,240
you the EDR knows that you are trying to

381
00:14:39,240 --> 00:14:41,339
remove the things that allow him to see

382
00:14:41,339 --> 00:14:42,180
you

383
00:14:42,180 --> 00:14:43,980
so probably you are going to also get

384
00:14:43,980 --> 00:14:46,680
killed if you go this way

385
00:14:46,680 --> 00:14:49,800
so to overcome this problem let's go and

386
00:14:49,800 --> 00:14:51,779
face a different approach and in this

387
00:14:51,779 --> 00:14:53,639
case we are going to talk about one

388
00:14:53,639 --> 00:14:55,740
technique that does it in a completely

389
00:14:55,740 --> 00:14:57,779
different way in this case we are

390
00:14:57,779 --> 00:15:00,180
avoiding removing the hooks from our

391
00:15:00,180 --> 00:15:02,639
from our process but instead we are

392
00:15:02,639 --> 00:15:04,380
going to interact them interact with the

393
00:15:04,380 --> 00:15:05,880
kernel directly without going through

394
00:15:05,880 --> 00:15:08,220
ntdll this technique is called direct

395
00:15:08,220 --> 00:15:10,920
system calls and it has been pretty much

396
00:15:10,920 --> 00:15:14,220
used for the last year in almost every

397
00:15:14,220 --> 00:15:16,380
every loader out there

398
00:15:16,380 --> 00:15:18,180
what we do in this technique is that

399
00:15:18,180 --> 00:15:19,980
basically we Implement our own system

400
00:15:19,980 --> 00:15:22,760
calls directly in oval malware

401
00:15:22,760 --> 00:15:25,260
to implement these scores we need one

402
00:15:25,260 --> 00:15:27,480
parameter that is called system service

403
00:15:27,480 --> 00:15:30,540
number the SSN is a simple parameter

404
00:15:30,540 --> 00:15:32,399
that allows us to identify which system

405
00:15:32,399 --> 00:15:34,320
call we are using in this case you can

406
00:15:34,320 --> 00:15:36,660
see that number 18 refers to

407
00:15:36,660 --> 00:15:39,000
anti-allocate virtual memory the problem

408
00:15:39,000 --> 00:15:41,940
we Face also with this approach is that

409
00:15:41,940 --> 00:15:44,760
obviously this system system service

410
00:15:44,760 --> 00:15:46,680
number varies from Windows version to

411
00:15:46,680 --> 00:15:49,680
Windows version that means that if we

412
00:15:49,680 --> 00:15:51,839
want to Target a certain uh certain if

413
00:15:51,839 --> 00:15:53,519
we know the target we are targeting and

414
00:15:53,519 --> 00:15:55,500
we know exactly the system version we

415
00:15:55,500 --> 00:15:57,480
are targeting we could hard call the

416
00:15:57,480 --> 00:15:59,579
system the system service number but

417
00:15:59,579 --> 00:16:01,560
that's never the case obviously you

418
00:16:01,560 --> 00:16:03,060
never know when you are what you are

419
00:16:03,060 --> 00:16:06,180
targeting to avoid this you can also

420
00:16:06,180 --> 00:16:08,820
obtain this number dynamically inferring

421
00:16:08,820 --> 00:16:10,680
it from the functions of the of the of

422
00:16:10,680 --> 00:16:13,560
ntdll that are not hooked we are not

423
00:16:13,560 --> 00:16:16,079
going to go deep into this because it's

424
00:16:16,079 --> 00:16:19,320
it will be much harder to understand uh

425
00:16:19,320 --> 00:16:21,240
but there's a lot of work on the on on

426
00:16:21,240 --> 00:16:23,040
the on the on the area and if you can

427
00:16:23,040 --> 00:16:24,779
you can check this Whispers too who have

428
00:16:24,779 --> 00:16:27,180
made easy to weaponize this technique

429
00:16:27,180 --> 00:16:29,339
the second thing we need is basically

430
00:16:29,339 --> 00:16:31,079
the Cisco instruction is a Cisco

431
00:16:31,079 --> 00:16:32,339
instruction that is going to change over

432
00:16:32,339 --> 00:16:34,320
context and interact directly with the

433
00:16:34,320 --> 00:16:35,459
kernel

434
00:16:35,459 --> 00:16:37,560
um once we have in we have specified the

435
00:16:37,560 --> 00:16:39,180
correct system service system service

436
00:16:39,180 --> 00:16:40,440
number

437
00:16:40,440 --> 00:16:44,100
and here again we see another problem as

438
00:16:44,100 --> 00:16:45,779
you can see this would be this wouldn't

439
00:16:45,779 --> 00:16:46,860
be any problem because we are

440
00:16:46,860 --> 00:16:49,199
interacting directly with ntl okay bit

441
00:16:49,199 --> 00:16:51,240
on memory without going through the EDR

442
00:16:51,240 --> 00:16:54,660
hook but because we are using the Cisco

443
00:16:54,660 --> 00:16:57,240
instruction directly in our malware we

444
00:16:57,240 --> 00:17:00,000
might get flagged in static analysis is

445
00:17:00,000 --> 00:17:02,459
you if you think about it I can think of

446
00:17:02,459 --> 00:17:04,980
really or basically I can think of no

447
00:17:04,980 --> 00:17:07,020
normal issue software that performs

448
00:17:07,020 --> 00:17:08,939
system goals directly without going

449
00:17:08,939 --> 00:17:11,280
through ntdll so that's a no-go and

450
00:17:11,280 --> 00:17:13,140
that's an off second friendly thing to

451
00:17:13,140 --> 00:17:14,880
do and the EDR might flag this

452
00:17:14,880 --> 00:17:16,799
statically by just including the word

453
00:17:16,799 --> 00:17:17,760
Cisco

454
00:17:17,760 --> 00:17:20,699
the assembly instruction and also one

455
00:17:20,699 --> 00:17:22,859
thing we need to notice is that we are

456
00:17:22,859 --> 00:17:24,959
creating a loader and injecting our our

457
00:17:24,959 --> 00:17:27,540
payload in a thread but the problem is

458
00:17:27,540 --> 00:17:30,179
that we are not unhooking uh our process

459
00:17:30,179 --> 00:17:33,540
and that means that only the loader is

460
00:17:33,540 --> 00:17:35,580
made in DDR but everything we do after

461
00:17:35,580 --> 00:17:39,480
that it's um it's subject to analysis by

462
00:17:39,480 --> 00:17:41,700
the EDR so if we the command control is

463
00:17:41,700 --> 00:17:44,280
interactive for example with um with

464
00:17:44,280 --> 00:17:45,900
this with the system and is doing some

465
00:17:45,900 --> 00:17:47,820
API calls those are also going to be

466
00:17:47,820 --> 00:17:49,799
analyzed so you need to be really

467
00:17:49,799 --> 00:17:51,780
careful once you have injected

468
00:17:51,780 --> 00:17:54,179
successfully in a process

469
00:17:54,179 --> 00:17:56,039
to avoid the first problem the problem

470
00:17:56,039 --> 00:17:58,380
in which we specify exactly the Cisco

471
00:17:58,380 --> 00:18:00,539
instruction in our assembly code we can

472
00:18:00,539 --> 00:18:03,179
use technique that we can call in direct

473
00:18:03,179 --> 00:18:05,340
system calls really it's a different

474
00:18:05,340 --> 00:18:07,260
approach to the same same Technique we

475
00:18:07,260 --> 00:18:09,299
saw before in the direct system course

476
00:18:09,299 --> 00:18:12,539
we are also going to still specify the

477
00:18:12,539 --> 00:18:15,120
same assembly instruction in our code

478
00:18:15,120 --> 00:18:17,580
you can also get this system service

479
00:18:17,580 --> 00:18:19,620
number dynamically but instead of

480
00:18:19,620 --> 00:18:21,840
actually calling Cisco what we are going

481
00:18:21,840 --> 00:18:24,120
to do to do is that we are going to take

482
00:18:24,120 --> 00:18:26,220
a different a different direction we are

483
00:18:26,220 --> 00:18:28,260
going to jump to one Cisco instruction

484
00:18:28,260 --> 00:18:31,320
we can find inside ntdll that way what

485
00:18:31,320 --> 00:18:33,120
we accomplish is that we are not calling

486
00:18:33,120 --> 00:18:35,880
Cisco directly from our malware which is

487
00:18:35,880 --> 00:18:38,039
quite suspicious but we are calling

488
00:18:38,039 --> 00:18:40,679
Cisco directly from ntdll which avoids

489
00:18:40,679 --> 00:18:42,660
being detected by the EDR in static

490
00:18:42,660 --> 00:18:45,240
analysis and also is way more object

491
00:18:45,240 --> 00:18:47,039
friendly because instruction is being

492
00:18:47,039 --> 00:18:49,380
called from ntdll after the hooks are

493
00:18:49,380 --> 00:18:50,340
placed

494
00:18:50,340 --> 00:18:52,620
um and that's how it's supposed to be

495
00:18:52,620 --> 00:18:55,440
these systems this this CIS calls should

496
00:18:55,440 --> 00:18:57,059
be called from ntdll because that's how

497
00:18:57,059 --> 00:19:00,260
Windows is assigned to work

498
00:19:00,780 --> 00:19:02,700
now before going to the actual results

499
00:19:02,700 --> 00:19:04,919
let's discuss a bit some things about

500
00:19:04,919 --> 00:19:07,260
Windows for those who are not used to it

501
00:19:07,260 --> 00:19:09,059
uh we are going to see basically two

502
00:19:09,059 --> 00:19:10,620
different formats

503
00:19:10,620 --> 00:19:11,400
um

504
00:19:11,400 --> 00:19:13,679
before continuing obviously the best

505
00:19:13,679 --> 00:19:15,299
technique you can do you can use would

506
00:19:15,299 --> 00:19:17,160
be to combine both right to combine

507
00:19:17,160 --> 00:19:19,620
indirect system calls and unhooking to

508
00:19:19,620 --> 00:19:21,960
create a perfect loader that uh doesn't

509
00:19:21,960 --> 00:19:23,820
have hooks in place and I can't inject

510
00:19:23,820 --> 00:19:26,280
without actually no DDR noticing but

511
00:19:26,280 --> 00:19:27,960
that's that's pretty complex and you can

512
00:19:27,960 --> 00:19:29,820
infer that from the context of this talk

513
00:19:29,820 --> 00:19:31,679
that will that wouldn't that won't be

514
00:19:31,679 --> 00:19:32,820
included here

515
00:19:32,820 --> 00:19:35,940
and just again let's go back to here

516
00:19:35,940 --> 00:19:37,200
um we are going to see two different

517
00:19:37,200 --> 00:19:39,480
formats the first format is dot XA which

518
00:19:39,480 --> 00:19:41,820
is the normal binary format you can

519
00:19:41,820 --> 00:19:44,760
expect is the binary that you can uh you

520
00:19:44,760 --> 00:19:46,260
can think about that you just download

521
00:19:46,260 --> 00:19:48,360
and execute because of this it is

522
00:19:48,360 --> 00:19:50,160
designed to be run independently it's

523
00:19:50,160 --> 00:19:51,539
designed to be run

524
00:19:51,539 --> 00:19:53,880
and also because of this has its own

525
00:19:53,880 --> 00:19:55,799
memory space it's inside the process and

526
00:19:55,799 --> 00:19:57,960
it's contained inside

527
00:19:57,960 --> 00:20:00,059
the nature of this of this type of

528
00:20:00,059 --> 00:20:03,120
binary uh makes DDR way more suspicious

529
00:20:03,120 --> 00:20:05,640
because it is designed to be run

530
00:20:05,640 --> 00:20:08,460
independently so the EDR is going more

531
00:20:08,460 --> 00:20:10,620
likely going to inspect these files much

532
00:20:10,620 --> 00:20:13,860
more closer compared to dlls instead

533
00:20:13,860 --> 00:20:15,840
with dlls we have the windows

534
00:20:15,840 --> 00:20:18,440
implementation of Linux server libraries

535
00:20:18,440 --> 00:20:21,179
these dlls need a host process to be

536
00:20:21,179 --> 00:20:22,860
loaded in so they cannot be run

537
00:20:22,860 --> 00:20:25,799
independently and because of this reason

538
00:20:25,799 --> 00:20:27,620
they don't have its own memory space

539
00:20:27,620 --> 00:20:30,000
they share the memory space with the

540
00:20:30,000 --> 00:20:33,240
host process so for the EDR is way more

541
00:20:33,240 --> 00:20:34,799
way harder to detect what is actually

542
00:20:34,799 --> 00:20:36,900
happening because the malicious actions

543
00:20:36,900 --> 00:20:41,000
are coming from a non-malicious process

544
00:20:41,039 --> 00:20:42,840
now Carson is going to show with you

545
00:20:42,840 --> 00:20:45,780
some results of our test lab and what

546
00:20:45,780 --> 00:20:48,419
happened yeah good good stuff so three

547
00:20:48,419 --> 00:20:51,600
different techniques to evade this

548
00:20:51,600 --> 00:20:53,880
um Behavior Analysis

549
00:20:53,880 --> 00:20:56,220
um here now the results from from our

550
00:20:56,220 --> 00:20:58,200
test lab there's a lot of stuff packed

551
00:20:58,200 --> 00:20:59,820
on this slide so let me let me unpack

552
00:20:59,820 --> 00:21:01,020
that for you

553
00:21:01,020 --> 00:21:02,520
um maybe let's start in the left side

554
00:21:02,520 --> 00:21:04,620
there's uh these these five different

555
00:21:04,620 --> 00:21:07,200
test cases basically the first two don't

556
00:21:07,200 --> 00:21:09,299
try to evade anything about the behavior

557
00:21:09,299 --> 00:21:11,700
analysis in fact the the first one

558
00:21:11,700 --> 00:21:13,500
doesn't even try to

559
00:21:13,500 --> 00:21:15,360
um detect the sandbox right so it's

560
00:21:15,360 --> 00:21:18,000
really a base case that technically even

561
00:21:18,000 --> 00:21:19,860
an antivirus system should have picked

562
00:21:19,860 --> 00:21:22,620
up the antivirus system that we ran for

563
00:21:22,620 --> 00:21:23,880
reference did not pick this up

564
00:21:23,880 --> 00:21:26,880
surprisingly but of course the the Eds

565
00:21:26,880 --> 00:21:28,020
did

566
00:21:28,020 --> 00:21:30,600
um the next case then avoided the

567
00:21:30,600 --> 00:21:32,520
sandbox using the techniques we showed

568
00:21:32,520 --> 00:21:34,080
earlier basically figuring out I'm

569
00:21:34,080 --> 00:21:35,580
running in a sandbox hence I'm not going

570
00:21:35,580 --> 00:21:38,039
to do anything malicious and then these

571
00:21:38,039 --> 00:21:39,900
three build up on that sandbox evasion

572
00:21:39,900 --> 00:21:41,820
with the three techniques that Jorge has

573
00:21:41,820 --> 00:21:44,100
has explained right

574
00:21:44,100 --> 00:21:47,280
um so uh and then we run this for for

575
00:21:47,280 --> 00:21:50,039
these two cases with the XC and the dll

576
00:21:50,039 --> 00:21:52,620
as just motivated right

577
00:21:52,620 --> 00:21:53,340
um

578
00:21:53,340 --> 00:21:55,679
again a lot to unpack here

579
00:21:55,679 --> 00:21:57,360
um on the right hand side you see the

580
00:21:57,360 --> 00:21:59,760
antivirus didn't see anything so some

581
00:21:59,760 --> 00:22:01,440
initial evidence that edrs are not

582
00:22:01,440 --> 00:22:03,659
useless right that's that's good but

583
00:22:03,659 --> 00:22:04,980
also there's too much red here to

584
00:22:04,980 --> 00:22:07,320
conclude that The Cure All let's zoom

585
00:22:07,320 --> 00:22:09,000
into a few places

586
00:22:09,000 --> 00:22:11,000
um

587
00:22:11,000 --> 00:22:14,100
and how hiding inside a dll might be

588
00:22:14,100 --> 00:22:16,440
advantageous to basically confuse the

589
00:22:16,440 --> 00:22:19,679
EDR DDR will remember oh this is an exit

590
00:22:19,679 --> 00:22:21,299
file that somebody downloaded now they

591
00:22:21,299 --> 00:22:23,159
clicked on it now it's executing it will

592
00:22:23,159 --> 00:22:25,500
observe this very carefully whereas with

593
00:22:25,500 --> 00:22:28,080
the dll the dll is put somewhere in the

594
00:22:28,080 --> 00:22:30,059
file system and then the EDR kind of

595
00:22:30,059 --> 00:22:32,100
forgets about it and at some point

596
00:22:32,100 --> 00:22:33,600
something completely different will

597
00:22:33,600 --> 00:22:36,480
launch and lot Lotus dll so it's checked

598
00:22:36,480 --> 00:22:38,940
much less carefully so it appears and

599
00:22:38,940 --> 00:22:41,340
we'll have a demo in a few minutes to to

600
00:22:41,340 --> 00:22:44,220
to show how exactly this site loading or

601
00:22:44,220 --> 00:22:47,520
hijacking of The ll's Works

602
00:22:47,520 --> 00:22:51,539
um so the clear evidence that the dlls

603
00:22:51,539 --> 00:22:54,780
are better than than executables

604
00:22:54,780 --> 00:22:57,120
um next one oops

605
00:22:57,120 --> 00:22:58,799
um

606
00:22:58,799 --> 00:23:01,380
Cobalt strike and and sliver are two

607
00:23:01,380 --> 00:23:04,140
standard tools um to use basically

608
00:23:04,140 --> 00:23:05,700
hacking tools to use for command and

609
00:23:05,700 --> 00:23:08,280
control and to to basically abuse the

610
00:23:08,280 --> 00:23:10,320
system after infection

611
00:23:10,320 --> 00:23:11,820
um Cobalt strike is much more popular

612
00:23:11,820 --> 00:23:14,760
than sliver and much more popular use so

613
00:23:14,760 --> 00:23:17,640
it appears that the edrs focus on

614
00:23:17,640 --> 00:23:19,799
exactly Cobalt strike Behavior rather

615
00:23:19,799 --> 00:23:21,780
than detecting malware in general

616
00:23:21,780 --> 00:23:23,700
they're trying to detect specifically

617
00:23:23,700 --> 00:23:26,039
Cobalt strike right at least that's what

618
00:23:26,039 --> 00:23:28,799
these results seem to suggest right and

619
00:23:28,799 --> 00:23:30,960
that's in line with our experience where

620
00:23:30,960 --> 00:23:33,419
in our test lab we try to avoid the most

621
00:23:33,419 --> 00:23:35,880
popular hacking tools because those tend

622
00:23:35,880 --> 00:23:37,799
to reflect more and then you go to

623
00:23:37,799 --> 00:23:39,840
something less popular to sliver or in

624
00:23:39,840 --> 00:23:41,220
our case even to something completely

625
00:23:41,220 --> 00:23:44,159
custom if you want to be extra sure that

626
00:23:44,159 --> 00:23:45,900
you're not triggering something more

627
00:23:45,900 --> 00:23:48,059
signature based on Cobalt strike or a

628
00:23:48,059 --> 00:23:49,980
tool like this but that you could only

629
00:23:49,980 --> 00:23:51,720
really trigger the behavioral part of

630
00:23:51,720 --> 00:23:54,059
the analysis

631
00:23:54,059 --> 00:23:56,059
um

632
00:23:56,580 --> 00:23:59,580
next oh finally I should say

633
00:23:59,580 --> 00:24:01,559
um we see that there are some evasion

634
00:24:01,559 --> 00:24:04,559
techniques that work universally so you

635
00:24:04,559 --> 00:24:06,480
don't need to prepare your Evasion for

636
00:24:06,480 --> 00:24:09,299
one specific EDR solution these these

637
00:24:09,299 --> 00:24:11,159
letter to techniques directs is called

638
00:24:11,159 --> 00:24:14,340
indirect is called in our lab we're able

639
00:24:14,340 --> 00:24:17,220
to circumvent every single

640
00:24:17,220 --> 00:24:19,679
um solution and you saw it on the slides

641
00:24:19,679 --> 00:24:20,820
earlier these Solutions are

642
00:24:20,820 --> 00:24:22,799
representative of kind of different

643
00:24:22,799 --> 00:24:24,840
parts of the market

644
00:24:24,840 --> 00:24:26,760
um we're not going to tell you which is

645
00:24:26,760 --> 00:24:28,500
which because we because don't want to

646
00:24:28,500 --> 00:24:30,780
put blame on one specific vendor but

647
00:24:30,780 --> 00:24:32,640
showing kind of ecosystem-wide issues

648
00:24:32,640 --> 00:24:35,039
but the ones that we did list earlier

649
00:24:35,039 --> 00:24:36,900
there's of course kind of the the

650
00:24:36,900 --> 00:24:38,940
default go-to option Microsoft Defender

651
00:24:38,940 --> 00:24:40,980
for endpoint which a lot of companies

652
00:24:40,980 --> 00:24:42,360
have as part of the Microsoft

653
00:24:42,360 --> 00:24:43,860
subscriptions

654
00:24:43,860 --> 00:24:46,320
um then we tested one that grew out of

655
00:24:46,320 --> 00:24:49,140
an antivirus company semantic EDR they

656
00:24:49,140 --> 00:24:50,580
were a little bit late to the game but

657
00:24:50,580 --> 00:24:52,860
they have an edl product too now um and

658
00:24:52,860 --> 00:24:54,539
then there was one that's kind of an

659
00:24:54,539 --> 00:24:57,419
original EDR Sentinel one right and

660
00:24:57,419 --> 00:24:59,280
these three kind of represent the whole

661
00:24:59,280 --> 00:25:01,799
spectrum of of the marketers as far as

662
00:25:01,799 --> 00:25:05,100
we can tell and all of them were evaded

663
00:25:05,100 --> 00:25:06,120
using

664
00:25:06,120 --> 00:25:09,780
um the very same techniques okay

665
00:25:09,780 --> 00:25:12,059
um but that's only half of the story so

666
00:25:12,059 --> 00:25:14,760
so far in the story we have

667
00:25:14,760 --> 00:25:17,039
started executing

668
00:25:17,039 --> 00:25:19,320
um a malicious program without the EDR

669
00:25:19,320 --> 00:25:20,940
saying no you're not allowed to execute

670
00:25:20,940 --> 00:25:23,760
so we're running code on the machine now

671
00:25:23,760 --> 00:25:25,860
but that code hasn't done anything yet

672
00:25:25,860 --> 00:25:28,799
right so it hasn't

673
00:25:28,799 --> 00:25:30,720
copied any files it hasn't created any

674
00:25:30,720 --> 00:25:32,940
user account none of that stuff so next

675
00:25:32,940 --> 00:25:34,440
we're going to look at

676
00:25:34,440 --> 00:25:36,120
um whether ddrs have a chance of

677
00:25:36,120 --> 00:25:37,919
detecting it after it starts doing

678
00:25:37,919 --> 00:25:39,779
malicious stuff because you'd imagine

679
00:25:39,779 --> 00:25:42,539
DDR has a lot of heuristics about the

680
00:25:42,539 --> 00:25:46,320
behavior after executing as well and

681
00:25:46,320 --> 00:25:48,480
um yeah again

682
00:25:48,480 --> 00:25:51,299
um pretty disappointing results

683
00:25:51,299 --> 00:25:53,400
so yeah as we discussed now we are going

684
00:25:53,400 --> 00:25:55,320
to mention what we do once we have

685
00:25:55,320 --> 00:25:57,419
successfully injected in a process and

686
00:25:57,419 --> 00:25:59,760
now we have and once we have a common

687
00:25:59,760 --> 00:26:01,200
and control connection and we can

688
00:26:01,200 --> 00:26:04,080
interact with the beating computer

689
00:26:04,080 --> 00:26:06,659
um let's let's separate this this uh

690
00:26:06,659 --> 00:26:08,340
this example in two different things the

691
00:26:08,340 --> 00:26:09,659
first things are the core functionality

692
00:26:09,659 --> 00:26:12,179
of our of our Command controls of both

693
00:26:12,179 --> 00:26:13,980
Cobalt and slipper and the second part

694
00:26:13,980 --> 00:26:15,779
will be Community extensions things that

695
00:26:15,779 --> 00:26:17,940
the community can can build to make our

696
00:26:17,940 --> 00:26:19,440
tools better

697
00:26:19,440 --> 00:26:21,299
if we look at the golf functionality for

698
00:26:21,299 --> 00:26:23,760
example we can see certain things like

699
00:26:23,760 --> 00:26:25,620
basically all of the stuff you can see

700
00:26:25,620 --> 00:26:27,779
here are stuff that we need to conduct

701
00:26:27,779 --> 00:26:29,520
our red team engagements are things

702
00:26:29,520 --> 00:26:32,820
without uh without those would be much

703
00:26:32,820 --> 00:26:34,980
harder to conduct over engagements the

704
00:26:34,980 --> 00:26:36,419
first thing for example will be open

705
00:26:36,419 --> 00:26:38,820
asox Channel which allows you once you

706
00:26:38,820 --> 00:26:40,679
are inside once you have compromised a

707
00:26:40,679 --> 00:26:42,360
system computer to people take through

708
00:26:42,360 --> 00:26:44,760
the network and to access those Apache

709
00:26:44,760 --> 00:26:46,799
Tomcat servers with the full passwords

710
00:26:46,799 --> 00:26:48,539
those Legacy servers that you can find

711
00:26:48,539 --> 00:26:50,159
in in organizations in huge

712
00:26:50,159 --> 00:26:51,779
organizations

713
00:26:51,779 --> 00:26:53,640
also we can see that as filtration

714
00:26:53,640 --> 00:26:55,740
that's a typical approach we can see for

715
00:26:55,740 --> 00:26:57,840
login and document from the computer or

716
00:26:57,840 --> 00:26:59,600
even like uh

717
00:26:59,600 --> 00:27:01,620
exfiltration data from there to show

718
00:27:01,620 --> 00:27:03,600
some proof both were completely

719
00:27:03,600 --> 00:27:05,880
undetected in all of the tests we did in

720
00:27:05,880 --> 00:27:08,820
all three edrs also we can see some

721
00:27:08,820 --> 00:27:10,860
detection starting with key logging but

722
00:27:10,860 --> 00:27:13,919
only in one EDR and it was cobal strike

723
00:27:13,919 --> 00:27:16,320
so we can we think that this was mainly

724
00:27:16,320 --> 00:27:19,620
based on fingerprinting on how uh cover

725
00:27:19,620 --> 00:27:21,840
strike performs key logging I know but

726
00:27:21,840 --> 00:27:24,059
the key login activity itself

727
00:27:24,059 --> 00:27:26,760
if we go to the last core functionality

728
00:27:26,760 --> 00:27:28,080
that we usually use in our red team

729
00:27:28,080 --> 00:27:30,360
engagement we see exact assembly and

730
00:27:30,360 --> 00:27:32,220
this starts being one of the

731
00:27:32,220 --> 00:27:34,260
capabilities that allow us to improve

732
00:27:34,260 --> 00:27:36,240
the the over command and control and add

733
00:27:36,240 --> 00:27:38,159
new capabilities in execute the same

734
00:27:38,159 --> 00:27:39,900
because we are doing basically is

735
00:27:39,900 --> 00:27:42,900
executing C sharp binaries inside a

736
00:27:42,900 --> 00:27:45,720
process in this case both coveted strike

737
00:27:45,720 --> 00:27:47,400
and sleeper is a technique called fork

738
00:27:47,400 --> 00:27:49,200
and run which basically creates a new

739
00:27:49,200 --> 00:27:51,900
process and executes

740
00:27:51,900 --> 00:27:54,779
um uh execute the binary directly in the

741
00:27:54,779 --> 00:27:57,179
memory of that process surprisingly and

742
00:27:57,179 --> 00:27:59,220
because it has been quite abused for the

743
00:27:59,220 --> 00:28:02,100
past years it was detected in color

744
00:28:02,100 --> 00:28:04,440
strike in all three edrs and only ones

745
00:28:04,440 --> 00:28:07,080
in slipper but still any technique based

746
00:28:07,080 --> 00:28:08,940
on fork and run is definitely a no-go

747
00:28:08,940 --> 00:28:11,580
because in a new process the EDR like

748
00:28:11,580 --> 00:28:13,500
the process is completely hooked and the

749
00:28:13,500 --> 00:28:16,020
analysis is quite heavy on that

750
00:28:16,020 --> 00:28:18,779
also we can avoid using execute assembly

751
00:28:18,779 --> 00:28:20,279
at all because we can use for example

752
00:28:20,279 --> 00:28:23,779
Beacon object files which are basically

753
00:28:23,779 --> 00:28:26,100
applications built by the community that

754
00:28:26,100 --> 00:28:27,960
allow us to enhance Global strike and

755
00:28:27,960 --> 00:28:29,940
execute inside the same process inside

756
00:28:29,940 --> 00:28:32,279
the same Bitcoin we run some tools at

757
00:28:32,279 --> 00:28:33,720
sarpham which is a pretty well known

758
00:28:33,720 --> 00:28:36,000
tool to enumerate it directory and that

759
00:28:36,000 --> 00:28:37,860
was completely undetected

760
00:28:37,860 --> 00:28:41,340
also another shisha another bof another

761
00:28:41,340 --> 00:28:43,559
Beacon object file you can use is inline

762
00:28:43,559 --> 00:28:45,419
execute assembly which mimics the

763
00:28:45,419 --> 00:28:47,100
results from execute assembly but

764
00:28:47,100 --> 00:28:48,659
executes that in the same process

765
00:28:48,659 --> 00:28:50,640
without doing fork and run and

766
00:28:50,640 --> 00:28:52,500
surprisingly for us this technique was

767
00:28:52,500 --> 00:28:54,600
completely undetected in all three edrs

768
00:28:54,600 --> 00:28:56,580
so we can still have the execute

769
00:28:56,580 --> 00:28:58,260
assembly Behavior which has actually

770
00:28:58,260 --> 00:29:01,140
been detected

771
00:29:01,140 --> 00:29:03,000
um the things we can take from here is

772
00:29:03,000 --> 00:29:06,299
that obviously Google strike is the is

773
00:29:06,299 --> 00:29:09,299
the way more uh is the the most detected

774
00:29:09,299 --> 00:29:11,100
uh command control out there because

775
00:29:11,100 --> 00:29:13,260
basically every EDR is working against

776
00:29:13,260 --> 00:29:15,360
cobal strike but if you see you you use

777
00:29:15,360 --> 00:29:17,940
other EDR use other command and control

778
00:29:17,940 --> 00:29:20,940
you are most likely uh it will be easier

779
00:29:20,940 --> 00:29:23,520
for you to be undetected also we can see

780
00:29:23,520 --> 00:29:25,440
that all the detections we found were

781
00:29:25,440 --> 00:29:27,360
basically on the core functionality of

782
00:29:27,360 --> 00:29:29,399
both command and controls which means

783
00:29:29,399 --> 00:29:31,260
that as long as we start building new

784
00:29:31,260 --> 00:29:33,840
capabilities or modifying the the

785
00:29:33,840 --> 00:29:36,360
in-house capabilities we are going to be

786
00:29:36,360 --> 00:29:39,919
much harder to protect the edrs are are

787
00:29:39,919 --> 00:29:42,600
having a really hard time detecting or

788
00:29:42,600 --> 00:29:45,860
axioms dynamically

789
00:29:47,159 --> 00:29:50,159
but we have talked about only one part

790
00:29:50,159 --> 00:29:52,500
of the of the picture right because we

791
00:29:52,500 --> 00:29:54,480
have talked about how to build these

792
00:29:54,480 --> 00:29:56,960
payloads how to build uh over over

793
00:29:56,960 --> 00:29:59,760
binary to drop it into a server but the

794
00:29:59,760 --> 00:30:01,559
EDR isn't only looking at that DDI is

795
00:30:01,559 --> 00:30:02,640
looking at everything that happens

796
00:30:02,640 --> 00:30:05,700
before and after the execution so let's

797
00:30:05,700 --> 00:30:07,559
see a full end-to-end kill chain to show

798
00:30:07,559 --> 00:30:09,240
you some of the things that we did in

799
00:30:09,240 --> 00:30:11,279
our engagements to actually bypass our

800
00:30:11,279 --> 00:30:12,960
real EDR

801
00:30:12,960 --> 00:30:15,059
the first thing in this case I'm going

802
00:30:15,059 --> 00:30:17,100
to show you some some bypasses we need

803
00:30:17,100 --> 00:30:19,140
to do in order to act to accomplish this

804
00:30:19,140 --> 00:30:21,720
obviously this is not part of a talk by

805
00:30:21,720 --> 00:30:23,100
itself but they are easy to understand

806
00:30:23,100 --> 00:30:25,080
and I think you will see the demo better

807
00:30:25,080 --> 00:30:28,020
if I explain this the first thing we are

808
00:30:28,020 --> 00:30:29,880
going to do is to create a link file a

809
00:30:29,880 --> 00:30:31,620
shortcut basically that points to a

810
00:30:31,620 --> 00:30:34,020
Microsoft application points to a binary

811
00:30:34,020 --> 00:30:36,000
that is on the file system but the

812
00:30:36,000 --> 00:30:38,220
problem we need is that uh we want the

813
00:30:38,220 --> 00:30:39,840
user to download this file but

814
00:30:39,840 --> 00:30:41,880
unfortunately unfortunately we cannot do

815
00:30:41,880 --> 00:30:44,880
it through a browser so to bypass this

816
00:30:44,880 --> 00:30:46,440
protection what we are going to do is

817
00:30:46,440 --> 00:30:48,600
basically compress this file into a zip

818
00:30:48,600 --> 00:30:51,360
file and then we are good to go

819
00:30:51,360 --> 00:30:53,100
the second step we are going to face is

820
00:30:53,100 --> 00:30:55,679
app Locker which is a really way common

821
00:30:55,679 --> 00:30:57,600
Protections in Windows environments that

822
00:30:57,600 --> 00:30:59,760
prevent us from running certain binaries

823
00:30:59,760 --> 00:31:01,740
in this case what we are doing to

824
00:31:01,740 --> 00:31:03,779
overcome this is making this shortcut

825
00:31:03,779 --> 00:31:05,760
that the user is downloading going to

826
00:31:05,760 --> 00:31:08,340
mshta which is a common binary that you

827
00:31:08,340 --> 00:31:10,380
can find inside windows

828
00:31:10,380 --> 00:31:13,860
Ms sta also allow us to download HTA

829
00:31:13,860 --> 00:31:16,380
files which are HTML applications from a

830
00:31:16,380 --> 00:31:18,120
remote server and execute them so

831
00:31:18,120 --> 00:31:19,919
actually when the user clicks on the

832
00:31:19,919 --> 00:31:21,360
shortcut it's going to download a

833
00:31:21,360 --> 00:31:23,520
payload from our server and execute the

834
00:31:23,520 --> 00:31:26,100
first stage overdropper this is not

835
00:31:26,100 --> 00:31:27,539
going to be malicious at all what it's

836
00:31:27,539 --> 00:31:29,460
going to do is only going to open a PDF

837
00:31:29,460 --> 00:31:32,520
document and then download over real dll

838
00:31:32,520 --> 00:31:34,559
or real malware into the themes folder

839
00:31:34,559 --> 00:31:36,600
and there and they're due to dll

840
00:31:36,600 --> 00:31:38,340
hijacking and this and due to the fact

841
00:31:38,340 --> 00:31:40,620
that teams is looking for one concrete

842
00:31:40,620 --> 00:31:43,320
dll the malware is going to be executed

843
00:31:43,320 --> 00:31:45,840
every time the user opens Microsoft

844
00:31:45,840 --> 00:31:46,919
teams

845
00:31:46,919 --> 00:31:49,080
but I think this will be way easier

846
00:31:49,080 --> 00:31:52,440
seeing if I show you a demo

847
00:31:52,440 --> 00:31:55,380
in this case I receive an email and yeah

848
00:31:55,380 --> 00:31:57,600
I just open the email and opened the

849
00:31:57,600 --> 00:32:00,120
link because I have a an EDR system that

850
00:32:00,120 --> 00:32:01,440
is obviously

851
00:32:01,440 --> 00:32:02,820
really Advanced and it's going to

852
00:32:02,820 --> 00:32:03,840
protect me against everything that

853
00:32:03,840 --> 00:32:06,840
happens to me so since it's legit so I

854
00:32:06,840 --> 00:32:08,940
download it

855
00:32:08,940 --> 00:32:10,940
um

856
00:32:10,940 --> 00:32:13,080
takes a bit

857
00:32:13,080 --> 00:32:14,820
and as you can see it's again as I

858
00:32:14,820 --> 00:32:15,659
mentioned

859
00:32:15,659 --> 00:32:17,279
um C file

860
00:32:17,279 --> 00:32:21,899
so I open the file and here inside you

861
00:32:21,899 --> 00:32:25,399
can see oh sorry

862
00:32:26,299 --> 00:32:29,039
you can see that it looks like a PDF it

863
00:32:29,039 --> 00:32:31,020
doesn't have a link extension but if you

864
00:32:31,020 --> 00:32:32,580
look closely it says that it's a type

865
00:32:32,580 --> 00:32:35,220
shortcut and one way unzip it you can

866
00:32:35,220 --> 00:32:37,740
see also

867
00:32:37,740 --> 00:32:40,740
that it looks like a PDF it has an icon

868
00:32:40,740 --> 00:32:42,480
of our natural PDF so the user can be

869
00:32:42,480 --> 00:32:44,100
tweaking to thinking that this actually

870
00:32:44,100 --> 00:32:45,659
is a PDF

871
00:32:45,659 --> 00:32:49,100
hope sorry

872
00:32:49,500 --> 00:32:52,340
foreign

873
00:32:53,659 --> 00:32:57,779
the PDF we open the link file and oh my

874
00:32:57,779 --> 00:32:58,440
God

875
00:32:58,440 --> 00:33:00,200
sorry

876
00:33:00,200 --> 00:33:03,120
just stay inside the window yeah we open

877
00:33:03,120 --> 00:33:05,100
the PDF file and we can see that on the

878
00:33:05,100 --> 00:33:06,840
teams folder there's no Pro there's no

879
00:33:06,840 --> 00:33:08,399
dll file

880
00:33:08,399 --> 00:33:11,399
we open the we open the link file and it

881
00:33:11,399 --> 00:33:15,059
shows us a real PDF in this case there's

882
00:33:15,059 --> 00:33:17,340
there's nothing harm harmful here what

883
00:33:17,340 --> 00:33:19,080
we are doing is completely okay but in

884
00:33:19,080 --> 00:33:21,960
the background a dll has been downloaded

885
00:33:21,960 --> 00:33:23,820
that basically is going to allow us to

886
00:33:23,820 --> 00:33:25,919
get execution now let's see what happens

887
00:33:25,919 --> 00:33:29,299
if we open Microsoft teams

888
00:33:31,860 --> 00:33:33,299
as you can see we have received a

889
00:33:33,299 --> 00:33:35,399
session and we have now full control of

890
00:33:35,399 --> 00:33:37,500
that computer that computer is running a

891
00:33:37,500 --> 00:33:39,659
full EDR and every evasion system

892
00:33:39,659 --> 00:33:41,580
activated so now let's see what we can

893
00:33:41,580 --> 00:33:44,460
do to interact with this system we can

894
00:33:44,460 --> 00:33:46,679
conduct anything that we I talk about on

895
00:33:46,679 --> 00:33:49,380
the dynamic dynamic Behavior we can for

896
00:33:49,380 --> 00:33:50,399
example

897
00:33:50,399 --> 00:33:52,559
list files and you'll see that we are

898
00:33:52,559 --> 00:33:54,840
inside the teams folder as expected we

899
00:33:54,840 --> 00:33:57,480
can even enumerate different processes

900
00:33:57,480 --> 00:34:00,299
and see what is inside the computer what

901
00:34:00,299 --> 00:34:01,980
other system or defensive measures we

902
00:34:01,980 --> 00:34:03,360
are facing

903
00:34:03,360 --> 00:34:05,880
and finally we can do something that is

904
00:34:05,880 --> 00:34:06,960
not really useful for red team

905
00:34:06,960 --> 00:34:08,699
engagements but it's quite scary and

906
00:34:08,699 --> 00:34:10,619
it's taking a screenshots in this case

907
00:34:10,619 --> 00:34:12,119
we are taking one screenshot I'm going

908
00:34:12,119 --> 00:34:14,580
to move uh the PDF a bit to show you

909
00:34:14,580 --> 00:34:16,859
that it's really a screenshot of the

910
00:34:16,859 --> 00:34:18,060
moment

911
00:34:18,060 --> 00:34:19,139
um

912
00:34:19,139 --> 00:34:22,040
it's going to take a bit

913
00:34:24,739 --> 00:34:27,619
okay there you go and now you'll see

914
00:34:27,619 --> 00:34:30,540
that we have the same screenshots I

915
00:34:30,540 --> 00:34:32,460
showed you before and then we have fully

916
00:34:32,460 --> 00:34:35,339
compromised a computer that has an EDR

917
00:34:35,339 --> 00:34:36,899
system in place

918
00:34:36,899 --> 00:34:38,940
the key to this and the lesson we can

919
00:34:38,940 --> 00:34:41,460
learn from this is that the the best way

920
00:34:41,460 --> 00:34:44,040
of actually evading an EDR is that the

921
00:34:44,040 --> 00:34:46,219
touching the execution from the download

922
00:34:46,219 --> 00:34:49,739
as you can see our first stage has to

923
00:34:49,739 --> 00:34:52,020
have done nothing malicious it just

924
00:34:52,020 --> 00:34:54,719
downloads a PDF document opens a PDF

925
00:34:54,719 --> 00:34:56,699
document and downloads a file into a

926
00:34:56,699 --> 00:34:59,640
random folder but actually the the EDR

927
00:34:59,640 --> 00:35:01,500
doesn't correlate those two weapons and

928
00:35:01,500 --> 00:35:04,080
doesn't think that our actual downloaded

929
00:35:04,080 --> 00:35:05,640
file is conducting anything but because

930
00:35:05,640 --> 00:35:08,580
indeed it's not doing it anything but

931
00:35:08,580 --> 00:35:11,880
so the key to a ddrs is to detach these

932
00:35:11,880 --> 00:35:13,920
two things the execution and the loader

933
00:35:13,920 --> 00:35:15,900
and the download and keep them together

934
00:35:15,900 --> 00:35:18,800
keep them as long as possible

935
00:35:18,800 --> 00:35:21,720
and separate them as much as possible to

936
00:35:21,720 --> 00:35:23,520
make the EDR doesn't correlate those two

937
00:35:23,520 --> 00:35:24,900
events

938
00:35:24,900 --> 00:35:27,960
all right yeah very nice so again this

939
00:35:27,960 --> 00:35:30,960
was executing a malware

940
00:35:30,960 --> 00:35:32,460
um innovation of the browser security

941
00:35:32,460 --> 00:35:35,339
features the Microsoft built-in Windows

942
00:35:35,339 --> 00:35:38,280
security features and the EDR

943
00:35:38,280 --> 00:35:39,960
um on a fully patched I guess this

944
00:35:39,960 --> 00:35:42,540
Windows 10 machine

945
00:35:42,540 --> 00:35:44,880
um so where does this leave us

946
00:35:44,880 --> 00:35:46,560
um what what is the protection level now

947
00:35:46,560 --> 00:35:50,339
that we can expect from a fully featured

948
00:35:50,339 --> 00:35:52,800
area

949
00:35:52,800 --> 00:35:54,540
well let's first ask a slightly

950
00:35:54,540 --> 00:35:56,339
different question do we do we even need

951
00:35:56,339 --> 00:35:58,140
edrs and endpoints

952
00:35:58,140 --> 00:36:00,839
because there is an alternative and

953
00:36:00,839 --> 00:36:02,220
um

954
00:36:02,220 --> 00:36:03,599
I should add one more piece of

955
00:36:03,599 --> 00:36:05,579
information of how we configure the Eds

956
00:36:05,579 --> 00:36:07,320
in our test lab we switch on every

957
00:36:07,320 --> 00:36:08,820
single feature that they have we make it

958
00:36:08,820 --> 00:36:11,040
as difficult for us as possible except

959
00:36:11,040 --> 00:36:14,119
for one feature we don't allow them to

960
00:36:14,119 --> 00:36:17,280
send the executable to the cloud have

961
00:36:17,280 --> 00:36:19,020
some kind of cloud analysis done and

962
00:36:19,020 --> 00:36:20,700
then use the results is that again a

963
00:36:20,700 --> 00:36:22,619
Sandbox analysis that's not behavioral

964
00:36:22,619 --> 00:36:24,240
analysis

965
00:36:24,240 --> 00:36:26,400
um and also we are more interested in

966
00:36:26,400 --> 00:36:28,140
what happens on the endpoint can you

967
00:36:28,140 --> 00:36:30,540
detect malware on the endpoint yes or no

968
00:36:30,540 --> 00:36:33,180
that's what the EDR started to do but we

969
00:36:33,180 --> 00:36:34,619
wanted to add that bit of information

970
00:36:34,619 --> 00:36:36,900
what happens if you do upload it to the

971
00:36:36,900 --> 00:36:39,240
cloud not to that specifically the oven

972
00:36:39,240 --> 00:36:42,240
is cloud but to the more generic Cloud

973
00:36:42,240 --> 00:36:45,320
virus total they run about 70

974
00:36:45,320 --> 00:36:48,240
antivirus engines or I guess EDR engines

975
00:36:48,240 --> 00:36:49,980
but without behavioral analysis

976
00:36:49,980 --> 00:36:51,540
obviously right they don't have access

977
00:36:51,540 --> 00:36:54,660
to your endpoint and those samples that

978
00:36:54,660 --> 00:36:57,599
we're able to evade every single EDR

979
00:36:57,599 --> 00:37:00,240
solution they are detected by about a

980
00:37:00,240 --> 00:37:02,160
quarter of the engines running in virus

981
00:37:02,160 --> 00:37:03,119
level

982
00:37:03,119 --> 00:37:06,540
so not all hope is lost but

983
00:37:06,540 --> 00:37:07,859
interestingly this is the older

984
00:37:07,859 --> 00:37:09,540
technique right this is dynamic analysis

985
00:37:09,540 --> 00:37:11,400
running something in a sandbox and

986
00:37:11,400 --> 00:37:13,980
trying to decide whether it's

987
00:37:13,980 --> 00:37:16,500
um or not I should say that some of

988
00:37:16,500 --> 00:37:18,540
these could be actually what is then

989
00:37:18,540 --> 00:37:22,140
fault false positive so they oops that

990
00:37:22,140 --> 00:37:24,480
detect that it's a malware

991
00:37:24,480 --> 00:37:25,800
um but they're detected for the wrong

992
00:37:25,800 --> 00:37:28,020
reasons right so they might have falsely

993
00:37:28,020 --> 00:37:30,180
triggered on something else

994
00:37:30,180 --> 00:37:32,940
um but it can be reasonably sure that

995
00:37:32,940 --> 00:37:35,400
not all of them are false positives

996
00:37:35,400 --> 00:37:37,140
you guys need to do something to bring

997
00:37:37,140 --> 00:37:39,500
this back

998
00:37:41,099 --> 00:37:43,820
wake up

999
00:37:44,820 --> 00:37:47,640
yeah so we upload this to to virus total

1000
00:37:47,640 --> 00:37:50,579
and it does get detected well on the

1001
00:37:50,579 --> 00:37:52,920
endpoint itself where uh you should be

1002
00:37:52,920 --> 00:37:55,440
able to to do much deeper analysis it

1003
00:37:55,440 --> 00:37:57,420
does not get detected right so perhaps

1004
00:37:57,420 --> 00:38:00,119
the the answer to malware isn't more

1005
00:38:00,119 --> 00:38:03,900
analysis on the endpoint but just more

1006
00:38:03,900 --> 00:38:06,240
analysis of stuff that is ingested into

1007
00:38:06,240 --> 00:38:08,400
the organization

1008
00:38:08,400 --> 00:38:10,140
um before it hits the end point right

1009
00:38:10,140 --> 00:38:12,300
most malware comes through something

1010
00:38:12,300 --> 00:38:15,599
cloudy right some websites

1011
00:38:15,599 --> 00:38:18,359
um some emails for instance chat

1012
00:38:18,359 --> 00:38:20,820
messages right so why not run it through

1013
00:38:20,820 --> 00:38:24,119
something in the pipeline there

1014
00:38:24,119 --> 00:38:24,839
um

1015
00:38:24,839 --> 00:38:27,180
yeah I can I can continue with just

1016
00:38:27,180 --> 00:38:28,740
audio track but it'll be nice to have

1017
00:38:28,740 --> 00:38:31,578
the picture back

1018
00:38:32,760 --> 00:38:34,859
um so uh coming back to that question do

1019
00:38:34,859 --> 00:38:37,619
we need edrs on endpoints at all

1020
00:38:37,619 --> 00:38:39,780
um in our experience actually yes

1021
00:38:39,780 --> 00:38:44,220
not because there are 100 uh

1022
00:38:44,220 --> 00:38:46,740
keeping you 100 safe

1023
00:38:46,740 --> 00:38:49,079
um but because they are making the

1024
00:38:49,079 --> 00:38:52,740
hacking Journey somewhat more complex

1025
00:38:52,740 --> 00:38:55,740
so let's let's use a um a kind of an

1026
00:38:55,740 --> 00:38:58,500
average example here when we are asked

1027
00:38:58,500 --> 00:39:01,380
to break into a large corporation and

1028
00:39:01,380 --> 00:39:03,359
take over the entire company basically

1029
00:39:03,359 --> 00:39:05,940
from active directory down it takes us

1030
00:39:05,940 --> 00:39:08,520
including preparation about eight weeks

1031
00:39:08,520 --> 00:39:10,980
okay so full-fledged red team engagement

1032
00:39:10,980 --> 00:39:13,560
four people eight weeks it's a lot of

1033
00:39:13,560 --> 00:39:14,880
work but there's of course a lot of

1034
00:39:14,880 --> 00:39:16,859
ground to cover also in those

1035
00:39:16,859 --> 00:39:19,560
organizations right so

1036
00:39:19,560 --> 00:39:21,000
um

1037
00:39:21,000 --> 00:39:24,960
if at any point we encounter an EDR in

1038
00:39:24,960 --> 00:39:27,359
such a hacking Journey we know okay this

1039
00:39:27,359 --> 00:39:29,940
is a lot of additional work for us

1040
00:39:29,940 --> 00:39:30,780
um

1041
00:39:30,780 --> 00:39:33,720
typically of those four people one of

1042
00:39:33,720 --> 00:39:34,640
them

1043
00:39:34,640 --> 00:39:37,260
will be signed you know you take care of

1044
00:39:37,260 --> 00:39:39,780
the idea whenever we uh we we plan an

1045
00:39:39,780 --> 00:39:41,940
action you tell us whether you think DDR

1046
00:39:41,940 --> 00:39:43,800
uh would be suspicious of that and

1047
00:39:43,800 --> 00:39:46,619
advise us how we can be more careful

1048
00:39:46,619 --> 00:39:48,780
he'll prepare all the the evasion

1049
00:39:48,780 --> 00:39:51,300
techniques everything so about let's say

1050
00:39:51,300 --> 00:39:53,400
half of your time will go on just the

1051
00:39:53,400 --> 00:39:55,140
idiot track so

1052
00:39:55,140 --> 00:39:57,720
um it was eight weeks before if half a

1053
00:39:57,720 --> 00:39:59,760
person is busy half of the time now it

1054
00:39:59,760 --> 00:40:02,280
became nine weeks already so to just

1055
00:40:02,280 --> 00:40:04,800
give you the the roughest rough estimate

1056
00:40:04,800 --> 00:40:07,500
uh that I've probably ever done well at

1057
00:40:07,500 --> 00:40:09,540
this 12

1058
00:40:09,540 --> 00:40:11,880
um of of hacking time

1059
00:40:11,880 --> 00:40:15,020
um to an ADR Journey

1060
00:40:22,339 --> 00:40:26,180
should we try this adapter

1061
00:40:26,690 --> 00:40:29,800
[Applause]

1062
00:40:31,619 --> 00:40:34,640
that was going to work

1063
00:40:44,280 --> 00:40:46,700
yes

1064
00:40:53,040 --> 00:40:55,200
it's not detecting any monitor otherwise

1065
00:40:55,200 --> 00:40:58,578
it will change its resolution

1066
00:41:10,500 --> 00:41:12,540
I don't know I don't think it's on this

1067
00:41:12,540 --> 00:41:15,240
side I did this this was fine before I

1068
00:41:15,240 --> 00:41:16,440
think it's somewhere in your chain

1069
00:41:16,440 --> 00:41:19,220
further down

1070
00:41:20,940 --> 00:41:24,260
oh now it found something

1071
00:41:34,260 --> 00:41:36,540
so if if a typical red team journey is

1072
00:41:36,540 --> 00:41:38,760
eight weeks and the EDR adds one more

1073
00:41:38,760 --> 00:41:41,640
week that's 12 more it doesn't sound

1074
00:41:41,640 --> 00:41:44,220
like a lot but if every single security

1075
00:41:44,220 --> 00:41:47,220
control you had added 12 that's pretty

1076
00:41:47,220 --> 00:41:48,540
good you have what like 50 security

1077
00:41:48,540 --> 00:41:51,480
controls in a big organization so not

1078
00:41:51,480 --> 00:41:54,180
every control adds that much hence edrs

1079
00:41:54,180 --> 00:41:56,700
as much as we criticize them today are

1080
00:41:56,700 --> 00:41:59,820
among the best one thing you can do but

1081
00:41:59,820 --> 00:42:02,160
they're not enough they need to play in

1082
00:42:02,160 --> 00:42:04,500
concert with a lot of other controls to

1083
00:42:04,500 --> 00:42:06,359
always add a few percent and a few

1084
00:42:06,359 --> 00:42:08,579
percent until eventually

1085
00:42:08,579 --> 00:42:10,619
um it's so effortful to hack an

1086
00:42:10,619 --> 00:42:12,540
organization that a hacker will just

1087
00:42:12,540 --> 00:42:16,680
give up and go somewhere easier right so

1088
00:42:16,680 --> 00:42:19,020
um what are other ideas

1089
00:42:19,020 --> 00:42:21,240
um what are other controls that you

1090
00:42:21,240 --> 00:42:25,339
think will slow down hackers any ideas

1091
00:42:26,280 --> 00:42:30,260
what do red teamers really hate

1092
00:42:32,460 --> 00:42:34,859
how about application allow listing

1093
00:42:34,859 --> 00:42:37,020
right so if you if you have a list of

1094
00:42:37,020 --> 00:42:38,880
all the programs you run

1095
00:42:38,880 --> 00:42:40,859
um and you say only those programs are

1096
00:42:40,859 --> 00:42:43,859
allowed to run in in an environment it's

1097
00:42:43,859 --> 00:42:46,800
very difficult to install malware you

1098
00:42:46,800 --> 00:42:48,839
have to resort to what's referred to as

1099
00:42:48,839 --> 00:42:51,119
living off the land technique so

1100
00:42:51,119 --> 00:42:52,859
basically using stuff that's already

1101
00:42:52,859 --> 00:42:55,320
installed and allowed and the more you

1102
00:42:55,320 --> 00:42:56,880
lock down an endpoint the more difficult

1103
00:42:56,880 --> 00:42:59,400
that becomes right so that's probably

1104
00:42:59,400 --> 00:43:02,339
about as effective as an ADR it doesn't

1105
00:43:02,339 --> 00:43:04,740
cost an excessive license fee like some

1106
00:43:04,740 --> 00:43:06,839
of these EDR Solutions so it might be

1107
00:43:06,839 --> 00:43:09,480
more bang for the buck but it puts more

1108
00:43:09,480 --> 00:43:12,060
burden on you as the organization rather

1109
00:43:12,060 --> 00:43:13,980
than leaving it all to a DDR vendor so

1110
00:43:13,980 --> 00:43:16,079
that's definitely that needs to be part

1111
00:43:16,079 --> 00:43:17,579
of the concept

1112
00:43:17,579 --> 00:43:18,540
um

1113
00:43:18,540 --> 00:43:19,319
thank you

1114
00:43:19,319 --> 00:43:21,480
as we said earlier you should heavily

1115
00:43:21,480 --> 00:43:23,099
monitor everything that's ingested into

1116
00:43:23,099 --> 00:43:25,500
your organization it used to be mostly

1117
00:43:25,500 --> 00:43:28,380
office files office macros Microsoft has

1118
00:43:28,380 --> 00:43:31,140
put a stop to that recently so uh now

1119
00:43:31,140 --> 00:43:33,060
basically overnight all the hackers have

1120
00:43:33,060 --> 00:43:35,339
switched to uh link files like that

1121
00:43:35,339 --> 00:43:36,660
technique that

1122
00:43:36,660 --> 00:43:39,780
um that Jorge has has shown you today

1123
00:43:39,780 --> 00:43:41,339
um but what's the last time that you

1124
00:43:41,339 --> 00:43:43,020
received a link file from anybody

1125
00:43:43,020 --> 00:43:45,359
outside of your organization right that

1126
00:43:45,359 --> 00:43:48,540
never happens so why are they even

1127
00:43:48,540 --> 00:43:50,280
making it through to through email

1128
00:43:50,280 --> 00:43:52,380
gateways even when put into a zip files

1129
00:43:52,380 --> 00:43:54,839
just do not permit link files to be

1130
00:43:54,839 --> 00:43:56,520
ingested in your organization again

1131
00:43:56,520 --> 00:43:59,700
you're adding a few percentage points uh

1132
00:43:59,700 --> 00:44:02,040
to the hacking effort right what are the

1133
00:44:02,040 --> 00:44:04,819
ideas you guys tell me

1134
00:44:04,819 --> 00:44:07,020
anybody working at a company that

1135
00:44:07,020 --> 00:44:09,920
doesn't want to get hacked

1136
00:44:11,160 --> 00:44:13,560
anything in the in the area of zero

1137
00:44:13,560 --> 00:44:15,599
trust or what Microsoft often refers to

1138
00:44:15,599 --> 00:44:17,760
as T tier zero

1139
00:44:17,760 --> 00:44:19,680
um model so basically the idea of

1140
00:44:19,680 --> 00:44:21,660
segregating privileged users from

1141
00:44:21,660 --> 00:44:23,520
non-privileged users that's super

1142
00:44:23,520 --> 00:44:25,319
powerful in slowing down red teamers

1143
00:44:25,319 --> 00:44:27,660
basically the idea is that if I take

1144
00:44:27,660 --> 00:44:29,880
over a user endpoint I can put as much

1145
00:44:29,880 --> 00:44:32,520
malware on there as I want because that

1146
00:44:32,520 --> 00:44:34,619
that user and aiming point will never be

1147
00:44:34,619 --> 00:44:36,420
exposed to user accounts that have

1148
00:44:36,420 --> 00:44:40,619
privileged accounts those are basically

1149
00:44:40,619 --> 00:44:42,420
living in a completely separate part of

1150
00:44:42,420 --> 00:44:43,560
the active directory and they're

1151
00:44:43,560 --> 00:44:45,599
shielded there so I can hack that

1152
00:44:45,599 --> 00:44:47,339
endpoint as much as I want I'm never

1153
00:44:47,339 --> 00:44:49,319
going to take over the entire active

1154
00:44:49,319 --> 00:44:51,540
directory by just waiting there for an

1155
00:44:51,540 --> 00:44:53,700
administrator to log in again it will

1156
00:44:53,700 --> 00:44:56,760
add percentages to your hacking journey

1157
00:44:56,760 --> 00:44:59,400
and they multiply through right the EDR

1158
00:44:59,400 --> 00:45:00,839
slows us down

1159
00:45:00,839 --> 00:45:03,420
um the

1160
00:45:03,420 --> 00:45:06,480
um yeah

1161
00:45:08,099 --> 00:45:11,300
it's going to be played there

1162
00:45:11,880 --> 00:45:13,859
all right

1163
00:45:13,859 --> 00:45:16,460
um what else

1164
00:45:16,920 --> 00:45:19,800
local firewall is good sure yeah

1165
00:45:19,800 --> 00:45:22,079
um probably not

1166
00:45:22,079 --> 00:45:24,180
um to prevent the first computer from

1167
00:45:24,180 --> 00:45:25,619
being infected

1168
00:45:25,619 --> 00:45:28,680
um but chances are that that person

1169
00:45:28,680 --> 00:45:32,460
that clicks on a PDF looking link file

1170
00:45:32,460 --> 00:45:35,040
inside the zip that's not your windows

1171
00:45:35,040 --> 00:45:37,200
administrator that's some random person

1172
00:45:37,200 --> 00:45:39,300
in the organization and from that

1173
00:45:39,300 --> 00:45:41,460
computer you now want to break out and

1174
00:45:41,460 --> 00:45:43,560
hack other computers right so of course

1175
00:45:43,560 --> 00:45:45,780
any kind of network segregation and

1176
00:45:45,780 --> 00:45:48,300
firewalling helps with containing the

1177
00:45:48,300 --> 00:45:50,460
hacker it won't contain forever right

1178
00:45:50,460 --> 00:45:53,880
those firewalls uh have holes in them

1179
00:45:53,880 --> 00:45:56,160
um but you know again it adds percentage

1180
00:45:56,160 --> 00:45:58,140
points it adds hours or days to the

1181
00:45:58,140 --> 00:45:59,520
hacking journey and that's really your

1182
00:45:59,520 --> 00:46:01,740
goal here to to drive this up to maybe

1183
00:46:01,740 --> 00:46:03,720
double the effort ultimately at which

1184
00:46:03,720 --> 00:46:06,119
point you're not the most attractive uh

1185
00:46:06,119 --> 00:46:07,740
Target anymore for instance to somebody

1186
00:46:07,740 --> 00:46:09,960
like a ransomware gang that just wants

1187
00:46:09,960 --> 00:46:12,180
some quick money right

1188
00:46:12,180 --> 00:46:13,619
um

1189
00:46:13,619 --> 00:46:15,359
you know I guess I'm just going to

1190
00:46:15,359 --> 00:46:17,819
continue with without slides for now

1191
00:46:17,819 --> 00:46:20,460
um last idea and the one that you should

1192
00:46:20,460 --> 00:46:24,180
um that that oh there we go yeah

1193
00:46:24,180 --> 00:46:26,720
okay

1194
00:46:27,960 --> 00:46:31,339
what do you mean it just here

1195
00:46:31,619 --> 00:46:35,339
um wait oh I see okay

1196
00:46:35,339 --> 00:46:37,460
um

1197
00:46:40,040 --> 00:46:42,119
we basically already went through this

1198
00:46:42,119 --> 00:46:43,260
entire list

1199
00:46:43,260 --> 00:46:45,060
um so the one idea that we haven't

1200
00:46:45,060 --> 00:46:46,800
discussed yet and if you just want to do

1201
00:46:46,800 --> 00:46:49,020
one thing to make your organization more

1202
00:46:49,020 --> 00:46:51,980
secure today do this thing

1203
00:46:51,980 --> 00:46:55,200
make it harder for the Elsa's process

1204
00:46:55,200 --> 00:46:56,640
that's basically where all the the

1205
00:46:56,640 --> 00:46:58,260
passwords are stored locally to be

1206
00:46:58,260 --> 00:46:59,220
dumped

1207
00:46:59,220 --> 00:47:02,280
there's a configuration parameter run as

1208
00:47:02,280 --> 00:47:05,400
a protected process for some reason it's

1209
00:47:05,400 --> 00:47:07,740
not set by default on Windows versions

1210
00:47:07,740 --> 00:47:10,140
before Windows 11 Windows 11 made this

1211
00:47:10,140 --> 00:47:12,119
default so if you have anything prior to

1212
00:47:12,119 --> 00:47:14,160
Windows 11 running in your environment

1213
00:47:14,160 --> 00:47:16,800
set this parameter today and the next

1214
00:47:16,800 --> 00:47:18,300
red team is going to hit you for it

1215
00:47:18,300 --> 00:47:20,220
right it really makes their life more

1216
00:47:20,220 --> 00:47:22,859
difficult right not impossible none of

1217
00:47:22,859 --> 00:47:24,900
these make it impossible but you know

1218
00:47:24,900 --> 00:47:26,520
race wisdom

1219
00:47:26,520 --> 00:47:28,619
um all right

1220
00:47:28,619 --> 00:47:29,880
um so

1221
00:47:29,880 --> 00:47:32,339
um to to conclude on this part and then

1222
00:47:32,339 --> 00:47:34,500
I've uh one more thing for y'all

1223
00:47:34,500 --> 00:47:35,940
um

1224
00:47:35,940 --> 00:47:39,780
edrs are complex Solutions but they over

1225
00:47:39,780 --> 00:47:41,520
promise on their capabilities if we're

1226
00:47:41,520 --> 00:47:43,319
as we've clearly seen

1227
00:47:43,319 --> 00:47:46,380
um they do not detect most malware if it

1228
00:47:46,380 --> 00:47:47,460
is

1229
00:47:47,460 --> 00:47:48,119
um

1230
00:47:48,119 --> 00:47:50,640
evading was well-documented techniques

1231
00:47:50,640 --> 00:47:52,200
we showed nothing that that wasn't

1232
00:47:52,200 --> 00:47:54,720
documented elsewhere today

1233
00:47:54,720 --> 00:47:57,119
um and as long as they're not using

1234
00:47:57,119 --> 00:47:59,819
Cobalt strike so idiots are mostly

1235
00:47:59,819 --> 00:48:02,280
Cobalt strike detecting tools these days

1236
00:48:02,280 --> 00:48:03,540
right

1237
00:48:03,540 --> 00:48:06,300
plus a few heuristics that that make the

1238
00:48:06,300 --> 00:48:09,119
retima paranoid in not wanting to touch

1239
00:48:09,119 --> 00:48:10,560
certain things and that's exactly why

1240
00:48:10,560 --> 00:48:12,300
you should use them right to make the

1241
00:48:12,300 --> 00:48:14,099
red team apparent

1242
00:48:14,099 --> 00:48:15,540
um it's like people putting a security

1243
00:48:15,540 --> 00:48:19,920
uh a a plate of a security monitoring

1244
00:48:19,920 --> 00:48:21,480
company outside of the house without

1245
00:48:21,480 --> 00:48:24,540
subscribing to that service right the

1246
00:48:24,540 --> 00:48:26,460
thief is Paranoid by just seeing that

1247
00:48:26,460 --> 00:48:27,900
right and they'll be much more careful

1248
00:48:27,900 --> 00:48:29,880
not to trigger any of the alerts that

1249
00:48:29,880 --> 00:48:32,940
may or may not even be there right

1250
00:48:32,940 --> 00:48:34,680
um Okay so

1251
00:48:34,680 --> 00:48:38,339
idiots at 12 but that's the best case

1252
00:48:38,339 --> 00:48:39,720
I have one more thing for you and that's

1253
00:48:39,720 --> 00:48:42,960
a few uh cves that that dropped today

1254
00:48:42,960 --> 00:48:45,480
um we looked at another EDR tool this is

1255
00:48:45,480 --> 00:48:47,940
not one of the three I mentioned earlier

1256
00:48:47,940 --> 00:48:50,339
um and we actually found that you can

1257
00:48:50,339 --> 00:48:52,200
um not just circumventence protection

1258
00:48:52,200 --> 00:48:55,079
but that you can use the EDR against the

1259
00:48:55,079 --> 00:48:57,420
organization because EDI again is

1260
00:48:57,420 --> 00:48:59,520
complex software so it too can have

1261
00:48:59,520 --> 00:49:01,980
software bugs and if your EDR introduces

1262
00:49:01,980 --> 00:49:03,240
additional software bugs into

1263
00:49:03,240 --> 00:49:04,859
environment it's doing exactly the

1264
00:49:04,859 --> 00:49:06,420
opposite of what it's supposed to do

1265
00:49:06,420 --> 00:49:09,599
protect you right so in this particular

1266
00:49:09,599 --> 00:49:12,420
um tool we found basically two sets of

1267
00:49:12,420 --> 00:49:15,540
of vulnerabilities One deals with uh

1268
00:49:15,540 --> 00:49:17,940
default credentials as stupid as that

1269
00:49:17,940 --> 00:49:19,260
sounds of course sure there's

1270
00:49:19,260 --> 00:49:21,359
credentials everywhere and uh even

1271
00:49:21,359 --> 00:49:23,160
before credentials and security tools

1272
00:49:23,160 --> 00:49:26,819
the other one is more API security so

1273
00:49:26,819 --> 00:49:30,119
the solution has default credentials for

1274
00:49:30,119 --> 00:49:32,099
its management interface so a lot of

1275
00:49:32,099 --> 00:49:34,200
these EDR Solutions have not just a

1276
00:49:34,200 --> 00:49:36,000
piece running on endpoint but a

1277
00:49:36,000 --> 00:49:38,520
management backend that all the alerts

1278
00:49:38,520 --> 00:49:40,020
are reported to but from where you can

1279
00:49:40,020 --> 00:49:41,940
basically orchestrate your Fleet of

1280
00:49:41,940 --> 00:49:44,040
videos and you see really nice

1281
00:49:44,040 --> 00:49:46,859
configuration parameters basically uh

1282
00:49:46,859 --> 00:49:49,140
giving the hacker not just the option to

1283
00:49:49,140 --> 00:49:50,819
switch off all of these things but also

1284
00:49:50,819 --> 00:49:52,560
a lot of telemetry about what's

1285
00:49:52,560 --> 00:49:54,480
happening in the environment uh really

1286
00:49:54,480 --> 00:49:56,339
uh Treasure Trove of information if you

1287
00:49:56,339 --> 00:49:58,800
can access it and yes it does have a

1288
00:49:58,800 --> 00:50:00,839
default password and

1289
00:50:00,839 --> 00:50:01,440
um

1290
00:50:01,440 --> 00:50:03,900
it wasn't changed everywhere right I

1291
00:50:03,900 --> 00:50:05,460
think that's rectified now

1292
00:50:05,460 --> 00:50:07,680
um we we've been in uh responsible

1293
00:50:07,680 --> 00:50:10,140
disclosure with this vendor uh for some

1294
00:50:10,140 --> 00:50:11,339
time now

1295
00:50:11,339 --> 00:50:13,079
um but that's not to say that other

1296
00:50:13,079 --> 00:50:14,579
vendors don't make the exact same

1297
00:50:14,579 --> 00:50:16,260
mistakes right

1298
00:50:16,260 --> 00:50:19,260
um the other set of problems uh are more

1299
00:50:19,260 --> 00:50:21,839
around API security uh and again an

1300
00:50:21,839 --> 00:50:24,000
authentication issue or in this case the

1301
00:50:24,000 --> 00:50:25,560
complete lack of any type of

1302
00:50:25,560 --> 00:50:28,800
authentication for things like get all

1303
00:50:28,800 --> 00:50:30,780
the deception users

1304
00:50:30,780 --> 00:50:31,460
um

1305
00:50:31,460 --> 00:50:34,500
get exclusion profiles

1306
00:50:34,500 --> 00:50:37,200
um get the the file monitor the list of

1307
00:50:37,200 --> 00:50:40,200
monitored files right so again excellent

1308
00:50:40,200 --> 00:50:43,260
Telemetry for the hacker to know what

1309
00:50:43,260 --> 00:50:44,760
you should not touch but also to know

1310
00:50:44,760 --> 00:50:46,200
what you consider important in your

1311
00:50:46,200 --> 00:50:49,260
environment right so again those bugs

1312
00:50:49,260 --> 00:50:52,140
have been fixed the cves were published

1313
00:50:52,140 --> 00:50:54,000
today and hopefully

1314
00:50:54,000 --> 00:50:56,119
all of the what we presented today

1315
00:50:56,119 --> 00:50:59,760
inspires you as a as a retimer to to

1316
00:50:59,760 --> 00:51:02,099
Really uh spend some some quality time

1317
00:51:02,099 --> 00:51:03,900
with idiots and really learn how they

1318
00:51:03,900 --> 00:51:06,119
work it's not that difficult as I hope

1319
00:51:06,119 --> 00:51:07,559
we motivated

1320
00:51:07,559 --> 00:51:09,900
um and uh you just need it in your tool

1321
00:51:09,900 --> 00:51:12,599
chain and as a as a blue teamer just be

1322
00:51:12,599 --> 00:51:14,520
aware that you know while idiosa

1323
00:51:14,520 --> 00:51:16,200
definitely a must-have tool they're not

1324
00:51:16,200 --> 00:51:19,079
a cure-all and uh balance it with other

1325
00:51:19,079 --> 00:51:21,420
controls that you need in parallel

1326
00:51:21,420 --> 00:51:23,640
um and don't don't trust the marketing

1327
00:51:23,640 --> 00:51:25,619
basically around EDR that they solve

1328
00:51:25,619 --> 00:51:27,059
marketing

1329
00:51:27,059 --> 00:51:29,579
um yeah was that uh thank you very much

1330
00:51:29,579 --> 00:51:33,319
and we invite your questions

1331
00:51:35,330 --> 00:51:36,740
[Applause]

1332
00:51:36,740 --> 00:51:40,140
thank you very much George and uh

1333
00:51:40,140 --> 00:51:42,780
custom and apologies for the slides

1334
00:51:42,780 --> 00:51:43,740
issue they're a bit of a technical

1335
00:51:43,740 --> 00:51:45,540
glitch thank you very much for bearing

1336
00:51:45,540 --> 00:51:46,980
with us through that

1337
00:51:46,980 --> 00:51:49,800
so we've got a few questions up on slido

1338
00:51:49,800 --> 00:51:52,200
here I think the top one there

1339
00:51:52,200 --> 00:51:55,200
is there a decent open source EDR out

1340
00:51:55,200 --> 00:51:56,880
there available what would be some

1341
00:51:56,880 --> 00:52:00,240
challenges in creating one

1342
00:52:00,240 --> 00:52:03,000
you want me to answer that so

1343
00:52:03,000 --> 00:52:05,700
um edias are mostly found in the windows

1344
00:52:05,700 --> 00:52:08,460
world because malware is mostly found in

1345
00:52:08,460 --> 00:52:10,140
the windows world right the way that

1346
00:52:10,140 --> 00:52:12,180
Linux systems are abused is not usually

1347
00:52:12,180 --> 00:52:13,559
through malware it's definitely not

1348
00:52:13,559 --> 00:52:15,300
through through people

1349
00:52:15,300 --> 00:52:17,819
um downloading zip files with link files

1350
00:52:17,819 --> 00:52:20,579
and opening PDFs so that's very much a

1351
00:52:20,579 --> 00:52:23,700
Windows perhaps Mac world right but

1352
00:52:23,700 --> 00:52:25,380
there is a set of security tools more

1353
00:52:25,380 --> 00:52:27,720
referred to as host intrusion detection

1354
00:52:27,720 --> 00:52:29,220
systems

1355
00:52:29,220 --> 00:52:31,559
um and of course many of them are open

1356
00:52:31,559 --> 00:52:34,140
sources of course you know order D can

1357
00:52:34,140 --> 00:52:35,700
basically give you a lot of telemetry

1358
00:52:35,700 --> 00:52:37,440
then there's a software package called

1359
00:52:37,440 --> 00:52:38,960
Wazoo

1360
00:52:38,960 --> 00:52:41,880
w-a-z-u-h that uses a lot of that

1361
00:52:41,880 --> 00:52:43,740
Telemetry and you can do detection Rules

1362
00:52:43,740 --> 00:52:45,780
by just pumping

1363
00:52:45,780 --> 00:52:47,400
um your audit D information into

1364
00:52:47,400 --> 00:52:50,040
something like elasticsearch or Splunk

1365
00:52:50,040 --> 00:52:52,920
you can do a lot of analysis there but

1366
00:52:52,920 --> 00:52:55,099
it doesn't use any of those

1367
00:52:55,099 --> 00:52:58,380
analysis techniques we discussed today

1368
00:52:58,380 --> 00:53:01,380
um I've not seen that in an open source

1369
00:53:01,380 --> 00:53:03,420
way on Linux

1370
00:53:03,420 --> 00:53:05,160
um and it would kind of defeat to post

1371
00:53:05,160 --> 00:53:06,480
too

1372
00:53:06,480 --> 00:53:09,839
if we knew exactly how an ETR

1373
00:53:09,839 --> 00:53:12,300
is circumvent so that you have to to

1374
00:53:12,300 --> 00:53:14,400
play a little bit with obscurity to be

1375
00:53:14,400 --> 00:53:16,380
effective

1376
00:53:16,380 --> 00:53:19,680
thank you moving on to the next one uh

1377
00:53:19,680 --> 00:53:21,420
for the test lab which I think he showed

1378
00:53:21,420 --> 00:53:24,059
early on in the environment there it was

1379
00:53:24,059 --> 00:53:25,740
mentioned in the slides the upload

1380
00:53:25,740 --> 00:53:28,079
function is disabled however this means

1381
00:53:28,079 --> 00:53:30,059
missing out analytics functions that the

1382
00:53:30,059 --> 00:53:32,339
EDR performs in the cloud which you'll

1383
00:53:32,339 --> 00:53:35,040
not find out until actual usage how do

1384
00:53:35,040 --> 00:53:36,660
you overcome this analysis feature on

1385
00:53:36,660 --> 00:53:38,540
the EDR server side

1386
00:53:38,540 --> 00:53:41,579
I mean technically maybe it's a

1387
00:53:41,579 --> 00:53:43,619
confusion we are actually using the

1388
00:53:43,619 --> 00:53:45,720
cloud services of the EDR we are

1389
00:53:45,720 --> 00:53:47,579
actually using that information the only

1390
00:53:47,579 --> 00:53:48,960
thing we are missing here is that we are

1391
00:53:48,960 --> 00:53:51,000
not sharing our samples because that

1392
00:53:51,000 --> 00:53:52,859
would mean that if he gets compromised

1393
00:53:52,859 --> 00:53:55,800
once basically those that data is going

1394
00:53:55,800 --> 00:53:57,720
to be extended to to other other

1395
00:53:57,720 --> 00:53:59,280
executions as we don't and we don't want

1396
00:53:59,280 --> 00:54:00,540
that that's the only thing we are

1397
00:54:00,540 --> 00:54:02,099
missing in our test lab but every

1398
00:54:02,099 --> 00:54:04,020
capability of the EDR including

1399
00:54:04,020 --> 00:54:06,119
including the including the the back end

1400
00:54:06,119 --> 00:54:08,280
and everything of all the analysis that

1401
00:54:08,280 --> 00:54:10,380
the backend is performing is still there

1402
00:54:10,380 --> 00:54:12,359
and we are still considering that for

1403
00:54:12,359 --> 00:54:15,000
our analysis purposes and and we should

1404
00:54:15,000 --> 00:54:17,520
add that that's kind of a standard

1405
00:54:17,520 --> 00:54:19,260
deployment too

1406
00:54:19,260 --> 00:54:21,119
um for for two reasons

1407
00:54:21,119 --> 00:54:23,400
um companies don't necessarily upload

1408
00:54:23,400 --> 00:54:25,859
everything that hits the end point right

1409
00:54:25,859 --> 00:54:28,559
um one on the most critical service of

1410
00:54:28,559 --> 00:54:30,180
course that server is not supposed to

1411
00:54:30,180 --> 00:54:32,280
communicate with the internet at all so

1412
00:54:32,280 --> 00:54:33,900
it doesn't have that direct connectivity

1413
00:54:33,900 --> 00:54:36,559
but but then at least in Europe

1414
00:54:36,559 --> 00:54:38,819
companies just don't upload everything

1415
00:54:38,819 --> 00:54:41,160
into some U.S cloud providers Cloud that

1416
00:54:41,160 --> 00:54:42,780
hits the endpoint right they don't want

1417
00:54:42,780 --> 00:54:45,180
to by default have everything analyzed

1418
00:54:45,180 --> 00:54:47,339
by another company rather they want the

1419
00:54:47,339 --> 00:54:49,980
analysis to run within their premises so

1420
00:54:49,980 --> 00:54:52,920
for all of those reasons we uh we chose

1421
00:54:52,920 --> 00:54:56,040
to to switch off that feature but yeah

1422
00:54:56,040 --> 00:54:57,960
we also wouldn't have mattered

1423
00:54:57,960 --> 00:54:59,700
behavioral analysis so everything that

1424
00:54:59,700 --> 00:55:02,040
happens in the cloud by definition is

1425
00:55:02,040 --> 00:55:04,079
not behavioral analysis on your endpoint

1426
00:55:04,079 --> 00:55:08,099
it is again put again in a sandbox and I

1427
00:55:08,099 --> 00:55:09,420
would make the point that that might

1428
00:55:09,420 --> 00:55:11,160
actually be the better way to do stuff

1429
00:55:11,160 --> 00:55:14,220
because in theory a Sandbox is perfect

1430
00:55:14,220 --> 00:55:16,140
as long as we can make sure nobody

1431
00:55:16,140 --> 00:55:18,119
detects the sandbox right if you can

1432
00:55:18,119 --> 00:55:20,520
enumerate all of these ways and avoid

1433
00:55:20,520 --> 00:55:22,260
all the ways that people find out that

1434
00:55:22,260 --> 00:55:23,880
they're in the sandbox this is the way

1435
00:55:23,880 --> 00:55:26,280
to go that doesn't need to be complex

1436
00:55:26,280 --> 00:55:28,440
possibly buggy software running on

1437
00:55:28,440 --> 00:55:31,339
everybody's endpoint

1438
00:55:32,780 --> 00:55:35,579
are there any instances where you cannot

1439
00:55:35,579 --> 00:55:38,220
obtain an EDR to test against and if so

1440
00:55:38,220 --> 00:55:39,839
how do you approach testing and figure

1441
00:55:39,839 --> 00:55:43,680
out bypass methods against the EDR

1442
00:55:43,680 --> 00:55:47,099
I mean technically that's usually some

1443
00:55:47,099 --> 00:55:49,200
scenario we can face right like uh but

1444
00:55:49,200 --> 00:55:51,599
what we do like in this in this

1445
00:55:51,599 --> 00:55:54,300
presentation we have faced uh embedding

1446
00:55:54,300 --> 00:55:56,099
the EDR using the most common approach

1447
00:55:56,099 --> 00:55:58,319
to process injection but usually what we

1448
00:55:58,319 --> 00:56:00,839
do in our Packers is to we build the

1449
00:56:00,839 --> 00:56:02,579
best thing we can do and we try to be as

1450
00:56:02,579 --> 00:56:04,920
stealthy as possible and that includes

1451
00:56:04,920 --> 00:56:05,700
um

1452
00:56:05,700 --> 00:56:07,260
realizing that we are going to face

1453
00:56:07,260 --> 00:56:09,780
maybe a media that we we don't know

1454
00:56:09,780 --> 00:56:12,059
about so we just try to be as stealthy

1455
00:56:12,059 --> 00:56:13,980
as possible and we just try to build the

1456
00:56:13,980 --> 00:56:17,160
best uh the best payload uh we could and

1457
00:56:17,160 --> 00:56:20,880
hopefully uh that lands the the host uh

1458
00:56:20,880 --> 00:56:23,400
the user host and it executes but you'll

1459
00:56:23,400 --> 00:56:25,740
you never know it's always like a a game

1460
00:56:25,740 --> 00:56:28,020
with DVR in which if you don't have the

1461
00:56:28,020 --> 00:56:29,880
EDR you never know if it's really going

1462
00:56:29,880 --> 00:56:32,599
to bypass it

1463
00:56:33,540 --> 00:56:35,819
have you played with zip binary file

1464
00:56:35,819 --> 00:56:38,520
sizes in in my experience files larger

1465
00:56:38,520 --> 00:56:40,380
than 50 megabytes can help bypassing

1466
00:56:40,380 --> 00:56:41,700
with Cloud analysis is that something

1467
00:56:41,700 --> 00:56:43,559
you come across

1468
00:56:43,559 --> 00:56:45,839
I know that sometimes

1469
00:56:45,839 --> 00:56:47,700
um that sometimes when you use a really

1470
00:56:47,700 --> 00:56:49,920
heavy process it can access the

1471
00:56:49,920 --> 00:56:52,680
resources of the EDR and then it stops

1472
00:56:52,680 --> 00:56:55,859
uh basically stops the analysis but I

1473
00:56:55,859 --> 00:56:58,260
never try big simple binary files

1474
00:56:58,260 --> 00:57:00,660
because mainly you need to download them

1475
00:57:00,660 --> 00:57:02,520
on the on the host computer and usually

1476
00:57:02,520 --> 00:57:04,440
if they are big it's going to take time

1477
00:57:04,440 --> 00:57:06,599
and the user is probably

1478
00:57:06,599 --> 00:57:09,180
probably won't like them so that's my

1479
00:57:09,180 --> 00:57:11,940
experience but I try and yeah

1480
00:57:11,940 --> 00:57:13,619
thanks

1481
00:57:13,619 --> 00:57:16,200
any chance for ndr evasion primer for

1482
00:57:16,200 --> 00:57:18,300
red team is as the next challenge

1483
00:57:18,300 --> 00:57:20,099
well probably not before it becomes

1484
00:57:20,099 --> 00:57:21,119
relevant

1485
00:57:21,119 --> 00:57:22,740
um in in our work that that has never

1486
00:57:22,740 --> 00:57:24,839
been relevant and we're doing dozens of

1487
00:57:24,839 --> 00:57:26,880
red team exercises against you know

1488
00:57:26,880 --> 00:57:28,380
anything insurance companies power

1489
00:57:28,380 --> 00:57:30,000
utilities

1490
00:57:30,000 --> 00:57:32,760
um telcos we have never been tripped up

1491
00:57:32,760 --> 00:57:34,980
by by anything ndr

1492
00:57:34,980 --> 00:57:37,140
so if you're investing money in this

1493
00:57:37,140 --> 00:57:38,760
area right now

1494
00:57:38,760 --> 00:57:40,559
um maybe it's to get some compliance

1495
00:57:40,559 --> 00:57:42,960
check mark or some some marketing

1496
00:57:42,960 --> 00:57:44,700
material that you can handle on in your

1497
00:57:44,700 --> 00:57:47,579
organization but don't think that it

1498
00:57:47,579 --> 00:57:49,680
actually slows down hackers

1499
00:57:49,680 --> 00:57:51,900
um penetrating a network that's fairly

1500
00:57:51,900 --> 00:57:53,220
straightforward

1501
00:57:53,220 --> 00:57:54,900
um where would the malicious dll

1502
00:57:54,900 --> 00:57:56,819
downloaded from the internet need to

1503
00:57:56,819 --> 00:57:59,400
reside in order for teams.exe to load it

1504
00:57:59,400 --> 00:58:01,020
instead of the intended legitimate dll

1505
00:58:01,020 --> 00:58:04,020
okay this is funny because actually it's

1506
00:58:04,020 --> 00:58:06,480
kind of stupid that team is installed in

1507
00:58:06,480 --> 00:58:08,400
the local updated folder of your user

1508
00:58:08,400 --> 00:58:10,680
which means that basically the user can

1509
00:58:10,680 --> 00:58:12,540
write there without any

1510
00:58:12,540 --> 00:58:14,000
um

1511
00:58:14,000 --> 00:58:16,680
it's not in the program program file

1512
00:58:16,680 --> 00:58:18,900
folder but it's a local app data so

1513
00:58:18,900 --> 00:58:20,520
that's the reason we are able to exploit

1514
00:58:20,520 --> 00:58:24,000
this um this path so easily so it would

1515
00:58:24,000 --> 00:58:26,099
be local update Microsoft teams Uh

1516
00:58:26,099 --> 00:58:28,500
current but generally speaking it needs

1517
00:58:28,500 --> 00:58:30,359
to go either into the Windows system

1518
00:58:30,359 --> 00:58:32,460
directory where all the dlls live that's

1519
00:58:32,460 --> 00:58:34,319
kind of the default place or the local

1520
00:58:34,319 --> 00:58:36,900
directory where teams lives

1521
00:58:36,900 --> 00:58:39,059
um that's where we put it or any

1522
00:58:39,059 --> 00:58:41,099
directory in the path right so all of

1523
00:58:41,099 --> 00:58:42,960
them are looked at before teams gives up

1524
00:58:42,960 --> 00:58:46,640
and says this dll doesn't exist

1525
00:58:47,160 --> 00:58:49,740
have you encountered any effective EDR

1526
00:58:49,740 --> 00:58:51,780
that was able to detect your attack post

1527
00:58:51,780 --> 00:58:53,640
injection based on process memory

1528
00:58:53,640 --> 00:58:55,980
anomalies

1529
00:58:55,980 --> 00:58:58,980
I mean in this exact scenario we didn't

1530
00:58:58,980 --> 00:59:01,020
because in our samples

1531
00:59:01,020 --> 00:59:04,440
it hasn't happened but I wouldn't be I

1532
00:59:04,440 --> 00:59:06,180
wouldn't be surprised if it happens uh

1533
00:59:06,180 --> 00:59:09,599
usually using these techniques some edrs

1534
00:59:09,599 --> 00:59:12,000
if you don't build a perfect uh build a

1535
00:59:12,000 --> 00:59:13,980
different hooking methods and then you

1536
00:59:13,980 --> 00:59:15,839
need to overcome them by working a

1537
00:59:15,839 --> 00:59:16,980
different way so I won't be too

1538
00:59:16,980 --> 00:59:19,260
surprised if this uh if this happens

1539
00:59:19,260 --> 00:59:21,420
specifically because once you're doing

1540
00:59:21,420 --> 00:59:23,339
something suspicious and the process and

1541
00:59:23,339 --> 00:59:26,339
EDR analyze your memory region it's

1542
00:59:26,339 --> 00:59:27,720
going to detect that there's a cowboy

1543
00:59:27,720 --> 00:59:29,160
structure called there completely

1544
00:59:29,160 --> 00:59:31,440
unencrypted unless you perform some

1545
00:59:31,440 --> 00:59:34,079
memory tricks but we're not covering

1546
00:59:34,079 --> 00:59:36,240
them here and yeah I won't be too

1547
00:59:36,240 --> 00:59:38,579
surprised if that happens and and see

1548
00:59:38,579 --> 00:59:39,299
the

1549
00:59:39,299 --> 00:59:42,000
um it almost doesn't matter whether or

1550
00:59:42,000 --> 00:59:44,280
not EDR systems can do this

1551
00:59:44,280 --> 00:59:47,040
as long as the retimer says they could

1552
00:59:47,040 --> 00:59:49,859
the retima will be more careful when

1553
00:59:49,859 --> 00:59:52,380
they see an IDI solution and that's most

1554
00:59:52,380 --> 00:59:54,299
of the value you'll get out of the EDR

1555
00:59:54,299 --> 00:59:56,540
not the idiot actually doing anything

1556
00:59:56,540 --> 00:59:59,579
but them being so obscure about what

1557
00:59:59,579 --> 01:00:02,339
they do that the red team will be slower

1558
01:00:02,339 --> 01:00:04,319
or the real hacker will be slower

1559
01:00:04,319 --> 01:00:06,540
navigating environment it's almost Scare

1560
01:00:06,540 --> 01:00:09,299
Tactics but it works right as long as

1561
01:00:09,299 --> 01:00:10,859
that don't tell us what they do and as

1562
01:00:10,859 --> 01:00:12,960
long as they keep changing it we will be

1563
01:00:12,960 --> 01:00:14,940
much more careful

1564
01:00:14,940 --> 01:00:16,980
because

1565
01:00:16,980 --> 01:00:19,440
have you seen any EDR that uses good

1566
01:00:19,440 --> 01:00:21,000
software architecture and segregation

1567
01:00:21,000 --> 01:00:22,859
techniques that limit the blast radius

1568
01:00:22,859 --> 01:00:25,680
of a compromise in the EDR itself I'll

1569
01:00:25,680 --> 01:00:27,740
add post tricks

1570
01:00:27,740 --> 01:00:32,760
not me like I wasn't part of the of the

1571
01:00:32,760 --> 01:00:34,500
things that really close today so I

1572
01:00:34,500 --> 01:00:35,880
haven't exactly looked at the

1573
01:00:35,880 --> 01:00:38,160
implications of the of the EDR

1574
01:00:38,160 --> 01:00:42,299
compromise so in my case not really

1575
01:00:42,299 --> 01:00:44,160
um but I think we should mention one

1576
01:00:44,160 --> 01:00:45,960
thing that of course an EDR would be

1577
01:00:45,960 --> 01:00:47,940
extremely powerful when run in the

1578
01:00:47,940 --> 01:00:49,799
kernel rather than in the user space

1579
01:00:49,799 --> 01:00:51,720
remember how all of these unlocking

1580
01:00:51,720 --> 01:00:53,880
techniques work you take something that

1581
01:00:53,880 --> 01:00:55,740
the IDI are put there and you as the

1582
01:00:55,740 --> 01:00:58,079
virus you just override it that's only

1583
01:00:58,079 --> 01:00:59,819
possible because the idea doesn't have

1584
01:00:59,819 --> 01:01:01,380
any special permissions on your system

1585
01:01:01,380 --> 01:01:03,119
it's just running as as yet another

1586
01:01:03,119 --> 01:01:05,819
process right if you were to put the

1587
01:01:05,819 --> 01:01:07,799
idea into the kernel that wouldn't be

1588
01:01:07,799 --> 01:01:09,599
possible anymore there the it could

1589
01:01:09,599 --> 01:01:11,400
really learn all of that Telemetry with

1590
01:01:11,400 --> 01:01:14,220
no virus being able to take it away from

1591
01:01:14,220 --> 01:01:16,740
them why don't we put edos into the

1592
01:01:16,740 --> 01:01:19,440
kernel exactly for that reason exactly

1593
01:01:19,440 --> 01:01:22,319
because they're not uh proven secure

1594
01:01:22,319 --> 01:01:24,420
security software that we can rely on

1595
01:01:24,420 --> 01:01:26,280
but because they're very complex and

1596
01:01:26,280 --> 01:01:29,460
probably full of software bugs

1597
01:01:29,460 --> 01:01:31,619
and a quick one to finish off have you

1598
01:01:31,619 --> 01:01:32,760
tried your techniques against

1599
01:01:32,760 --> 01:01:34,680
crowdstrike falcon

1600
01:01:34,680 --> 01:01:36,780
I know there's I know that it's a good

1601
01:01:36,780 --> 01:01:38,700
EDR but I've I didn't have the

1602
01:01:38,700 --> 01:01:40,680
opportunity to test it but based on what

1603
01:01:40,680 --> 01:01:42,780
I've heard I know that it performs like

1604
01:01:42,780 --> 01:01:44,339
uh it has good techniques and good

1605
01:01:44,339 --> 01:01:46,920
memory uh like good detection rate but

1606
01:01:46,920 --> 01:01:48,960
unfortunately I wasn't able to to test

1607
01:01:48,960 --> 01:01:50,880
that one but we're happy to test it for

1608
01:01:50,880 --> 01:01:52,559
you if you happen to have a crowdstrike

1609
01:01:52,559 --> 01:01:54,660
installation yeah

1610
01:01:54,660 --> 01:01:56,220
perfect well thank you very much for

1611
01:01:56,220 --> 01:01:59,720
your answers and please thank you again

