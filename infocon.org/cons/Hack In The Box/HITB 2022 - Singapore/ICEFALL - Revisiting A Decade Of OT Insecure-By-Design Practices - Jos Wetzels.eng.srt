1
00:00:08,780 --> 00:00:12,240
all right hello everyone and uh welcome

2
00:00:12,240 --> 00:00:14,460
my name is Hills wetzels and I'm a

3
00:00:14,460 --> 00:00:16,260
security researcher with forescouts

4
00:00:16,260 --> 00:00:18,240
Federal apps and today we'll be talking

5
00:00:18,240 --> 00:00:20,580
about a bundle of OT vulnerabilities we

6
00:00:20,580 --> 00:00:24,259
uncovered dubbed ice fall

7
00:00:25,680 --> 00:00:28,080
so first about a little bit about

8
00:00:28,080 --> 00:00:30,599
Federal Labs we're a part of forescout

9
00:00:30,599 --> 00:00:32,940
which offers a visibility assessment and

10
00:00:32,940 --> 00:00:35,219
control platform for Enterprise

11
00:00:35,219 --> 00:00:38,700
OT iot and iomt environments Federal

12
00:00:38,700 --> 00:00:40,559
Labs is involved in threat intelligence

13
00:00:40,559 --> 00:00:43,020
and vulnerability research and in the

14
00:00:43,020 --> 00:00:44,280
past we've performed large-scale

15
00:00:44,280 --> 00:00:47,040
vulnerability Research into TCP Stacks

16
00:00:47,040 --> 00:00:49,739
Medical Supply components and conceptual

17
00:00:49,739 --> 00:00:53,460
ransomware for iot and iot

18
00:00:53,460 --> 00:00:56,340
so as a lot of you are likely well aware

19
00:00:56,340 --> 00:00:58,739
more than a decade ago digital Bond

20
00:00:58,739 --> 00:01:00,960
initiated project base camp which was

21
00:01:00,960 --> 00:01:03,300
modeled after the fireship project and

22
00:01:03,300 --> 00:01:05,159
aimed to show just how pervasive the

23
00:01:05,159 --> 00:01:07,799
lack of basic security controls in ICS

24
00:01:07,799 --> 00:01:10,380
equipment was they looked into multiple

25
00:01:10,380 --> 00:01:12,840
products by multiple vendors and found

26
00:01:12,840 --> 00:01:15,240
what is by now common knowledge our tea

27
00:01:15,240 --> 00:01:17,040
products lack the most basic security

28
00:01:17,040 --> 00:01:20,280
controls this lack of basic security

29
00:01:20,280 --> 00:01:22,740
controls has its roots in the historical

30
00:01:22,740 --> 00:01:25,320
deployment of this stuff interested air

31
00:01:25,320 --> 00:01:28,080
gap networks but this situation is by

32
00:01:28,080 --> 00:01:30,840
now a distant past it and OT are more

33
00:01:30,840 --> 00:01:32,820
interconnected than ever before and even

34
00:01:32,820 --> 00:01:34,680
Wireless and Cloud Technologies are

35
00:01:34,680 --> 00:01:36,900
making Hardware in this space

36
00:01:36,900 --> 00:01:39,600
now in the past decade a lot has changed

37
00:01:39,600 --> 00:01:42,420
in OT security as well first of all in

38
00:01:42,420 --> 00:01:44,100
terms of awareness and recognition of

39
00:01:44,100 --> 00:01:46,380
this problem and secondly with the event

40
00:01:46,380 --> 00:01:48,180
of various standards driven security

41
00:01:48,180 --> 00:01:49,759
efforts such as

42
00:01:49,759 --> 00:01:53,759
ic62443 nerd Sip and so forth but time

43
00:01:53,759 --> 00:01:55,439
and again trivial vulnerabilities

44
00:01:55,439 --> 00:01:58,799
continue to pop up in OT products and

45
00:01:58,799 --> 00:02:01,140
since we get a lot of customer asks to

46
00:02:01,140 --> 00:02:02,939
look into and support specific OT

47
00:02:02,939 --> 00:02:05,700
systems we set out to do a checkup of

48
00:02:05,700 --> 00:02:07,979
the progress made on insecure by design

49
00:02:07,979 --> 00:02:11,340
by taking a sizable sample of actively

50
00:02:11,340 --> 00:02:13,800
deployed OT products and investigating

51
00:02:13,800 --> 00:02:16,520
their security posture

52
00:02:16,520 --> 00:02:19,560
the reason why we focused on basic

53
00:02:19,560 --> 00:02:21,540
security issues is because real world

54
00:02:21,540 --> 00:02:23,640
attackers have shown that they abuse

55
00:02:23,640 --> 00:02:25,200
this stuff in practice building

56
00:02:25,200 --> 00:02:27,239
Frameworks uh for manipulating

57
00:02:27,239 --> 00:02:29,459
inherently in Secure protocols and

58
00:02:29,459 --> 00:02:31,440
abusing sensitive native functionality

59
00:02:31,440 --> 00:02:34,579
on plcs

60
00:02:35,459 --> 00:02:38,220
now this is one of the most well-known

61
00:02:38,220 --> 00:02:40,920
issues in OT right so why revisit it

62
00:02:40,920 --> 00:02:43,560
well the problem is that risk management

63
00:02:43,560 --> 00:02:46,620
is Complicated by any sort of opacity

64
00:02:46,620 --> 00:02:48,900
and if you want to know whether progress

65
00:02:48,900 --> 00:02:51,060
is being made on this front in the

66
00:02:51,060 --> 00:02:53,519
actual install base or what is actually

67
00:02:53,519 --> 00:02:55,560
under the hood of a particular security

68
00:02:55,560 --> 00:02:58,260
control and whether a product is to be

69
00:02:58,260 --> 00:03:00,200
considered insecure by Design or not

70
00:03:00,200 --> 00:03:02,640
you'll have to dig a little bit deeper

71
00:03:02,640 --> 00:03:04,980
you cannot simply assume that every

72
00:03:04,980 --> 00:03:07,440
proprietary system that you encounter is

73
00:03:07,440 --> 00:03:10,080
and will remain equally broken to all

74
00:03:10,080 --> 00:03:12,060
the stuff that that should be seen in

75
00:03:12,060 --> 00:03:12,959
the past

76
00:03:12,959 --> 00:03:15,900
now security mechanisms are sometimes

77
00:03:15,900 --> 00:03:18,000
for example retrofitted on insecure

78
00:03:18,000 --> 00:03:19,860
protocols and authentication

79
00:03:19,860 --> 00:03:22,260
implementations can change over time so

80
00:03:22,260 --> 00:03:23,879
what has been broken in the past might

81
00:03:23,879 --> 00:03:25,800
not be broken anymore

82
00:03:25,800 --> 00:03:27,420
um or it might still be broken but in a

83
00:03:27,420 --> 00:03:28,860
very different way

84
00:03:28,860 --> 00:03:30,780
plus it's not enough to know that

85
00:03:30,780 --> 00:03:33,720
something is insecure in general which

86
00:03:33,720 --> 00:03:36,480
means very little you need to know in

87
00:03:36,480 --> 00:03:39,060
what way something is insecure after all

88
00:03:39,060 --> 00:03:40,920
there's a fairly big difference between

89
00:03:40,920 --> 00:03:42,959
being able to change a set point on the

90
00:03:42,959 --> 00:03:45,120
device or gaining remote code execution

91
00:03:45,120 --> 00:03:48,239
on it and this kind of info is necessary

92
00:03:48,239 --> 00:03:50,400
if you want to justify the right

93
00:03:50,400 --> 00:03:53,040
compensator controls because you can

94
00:03:53,040 --> 00:03:54,900
make informed decisions based on

95
00:03:54,900 --> 00:03:57,540
speculation derived from General truth

96
00:03:57,540 --> 00:03:59,659
alone

97
00:03:59,659 --> 00:04:02,519
for example consider making decisions

98
00:04:02,519 --> 00:04:05,280
around segmentation and hardening if I'm

99
00:04:05,280 --> 00:04:07,739
faced with the choice to let some

100
00:04:07,739 --> 00:04:09,780
proprietary protocol through a firewall

101
00:04:09,780 --> 00:04:12,840
and maybe expose myself to all kinds of

102
00:04:12,840 --> 00:04:15,840
risks that I need to mitigate VPN

103
00:04:15,840 --> 00:04:18,839
tunnels Network re-architecting I'd like

104
00:04:18,839 --> 00:04:21,238
to know what kind of risks I'm actually

105
00:04:21,238 --> 00:04:23,699
exposing myself to first before I make

106
00:04:23,699 --> 00:04:26,940
those decisions and if I'm relying on

107
00:04:26,940 --> 00:04:28,979
the vendors advertised security features

108
00:04:28,979 --> 00:04:30,960
so maybe I can save on some compensating

109
00:04:30,960 --> 00:04:34,380
controls I'd like to have some idea of

110
00:04:34,380 --> 00:04:36,000
the robustness before I make that

111
00:04:36,000 --> 00:04:37,320
decision as well

112
00:04:37,320 --> 00:04:39,600
if all of these systems are just black

113
00:04:39,600 --> 00:04:41,400
boxes to me and there is no public

114
00:04:41,400 --> 00:04:43,320
documentation of

115
00:04:43,320 --> 00:04:45,720
if something is insecure and how exactly

116
00:04:45,720 --> 00:04:48,120
it's insecure I have two options which

117
00:04:48,120 --> 00:04:51,000
is either blindly trusting a vendor and

118
00:04:51,000 --> 00:04:52,800
I'm going to have a lot of unaddressed

119
00:04:52,800 --> 00:04:55,259
risk or I can just default to assuming

120
00:04:55,259 --> 00:04:57,419
that everything is insecure in the worst

121
00:04:57,419 --> 00:04:59,460
possible way and I'm gonna need a very

122
00:04:59,460 --> 00:05:01,979
big budget

123
00:05:01,979 --> 00:05:05,160
so let's start with an overview of these

124
00:05:05,160 --> 00:05:08,100
issues that we uncovered

125
00:05:08,100 --> 00:05:10,919
in total we uncovered 56 issues

126
00:05:10,919 --> 00:05:13,199
affecting more than 10 vendors and this

127
00:05:13,199 --> 00:05:15,720
includes dcss such as the Emerson Delta

128
00:05:15,720 --> 00:05:18,300
V Innovation systems safety controllers

129
00:05:18,300 --> 00:05:20,820
like the Honeywell safety manager PLC

130
00:05:20,820 --> 00:05:23,100
such as the Saya Burgess vcd the Omron

131
00:05:23,100 --> 00:05:26,340
sismac and the yokogawa stardom and of

132
00:05:26,340 --> 00:05:28,139
the vulnerabilities we uncovered the

133
00:05:28,139 --> 00:05:30,360
majority consisted of compromise of

134
00:05:30,360 --> 00:05:32,100
credentials and firmware manipulation

135
00:05:32,100 --> 00:05:34,740
issues followed by remote code execution

136
00:05:34,740 --> 00:05:37,199
and configuration manipulation so a lot

137
00:05:37,199 --> 00:05:39,180
of these issues were fairly trivial

138
00:05:39,180 --> 00:05:42,539
issues low hanging fruit that was still

139
00:05:42,539 --> 00:05:44,039
present in in

140
00:05:44,039 --> 00:05:46,259
new releases of firmware and systems

141
00:05:46,259 --> 00:05:48,539
that are still in active use in the

142
00:05:48,539 --> 00:05:50,759
install base

143
00:05:50,759 --> 00:05:53,460
now we disclose these issues to vendors

144
00:05:53,460 --> 00:05:55,680
through sisa providing a disclosure

145
00:05:55,680 --> 00:05:57,900
deadline of more than 90 days ahead of

146
00:05:57,900 --> 00:05:59,940
publication and in some cases we

147
00:05:59,940 --> 00:06:01,740
extended the deadline if the situation

148
00:06:01,740 --> 00:06:04,979
called for it unfortunately some vendors

149
00:06:04,979 --> 00:06:07,139
only started investigating our reports

150
00:06:07,139 --> 00:06:09,060
very close to the publication deadline

151
00:06:09,060 --> 00:06:11,100
and as a result some issues and

152
00:06:11,100 --> 00:06:13,020
responses are still in disclosure

153
00:06:13,020 --> 00:06:15,780
currently in addition some vendors

154
00:06:15,780 --> 00:06:17,940
request the details to be restricted to

155
00:06:17,940 --> 00:06:20,699
product bulletins only luckily in other

156
00:06:20,699 --> 00:06:23,100
cases we had experiences with vendors

157
00:06:23,100 --> 00:06:24,960
that were a little more Supple and that

158
00:06:24,960 --> 00:06:26,699
even led to speeding up of a journal

159
00:06:26,699 --> 00:06:28,860
secure protocol development effort which

160
00:06:28,860 --> 00:06:30,720
is always an interesting win in this

161
00:06:30,720 --> 00:06:33,660
regard Caesar maintains a dedicated page

162
00:06:33,660 --> 00:06:35,699
with detailed mitigations and affected

163
00:06:35,699 --> 00:06:38,840
versions that you can see on the slide

164
00:06:38,840 --> 00:06:41,400
however none of the advisories that have

165
00:06:41,400 --> 00:06:42,900
been published nor this presentation

166
00:06:42,900 --> 00:06:45,120
will disclose the full technical details

167
00:06:45,120 --> 00:06:49,500
of these issues for the obvious reasons

168
00:06:49,500 --> 00:06:51,660
so in order to get an impression of how

169
00:06:51,660 --> 00:06:53,699
many systems were impacted by these

170
00:06:53,699 --> 00:06:55,740
issues we performed some open source

171
00:06:55,740 --> 00:06:58,080
intelligence including on Showdown which

172
00:06:58,080 --> 00:07:00,000
showed that several thousand vulnerable

173
00:07:00,000 --> 00:07:02,940
devices were exposed to the internet

174
00:07:02,940 --> 00:07:04,979
in addition we looked at our own device

175
00:07:04,979 --> 00:07:07,199
Cloud which holds data of tens of

176
00:07:07,199 --> 00:07:09,479
thousands of customer devices and found

177
00:07:09,479 --> 00:07:11,100
that manufacturing Healthcare and

178
00:07:11,100 --> 00:07:12,600
government facilities were most

179
00:07:12,600 --> 00:07:14,580
represented those certain critical

180
00:07:14,580 --> 00:07:16,560
systems were heavily represented in oil

181
00:07:16,560 --> 00:07:19,520
and gas and utilities as well

182
00:07:19,520 --> 00:07:22,620
we also found that the majority of

183
00:07:22,620 --> 00:07:24,539
affected product families that we looked

184
00:07:24,539 --> 00:07:26,639
at had some form of security

185
00:07:26,639 --> 00:07:29,280
certification and even though the issues

186
00:07:29,280 --> 00:07:31,259
that they suffered from were fairly

187
00:07:31,259 --> 00:07:32,460
trivial

188
00:07:32,460 --> 00:07:34,800
this is problematic because while

189
00:07:34,800 --> 00:07:37,020
obviously security certifications aren't

190
00:07:37,020 --> 00:07:38,520
a guarantee of a product being

191
00:07:38,520 --> 00:07:42,180
unhackable there's Nuance to the levels

192
00:07:42,180 --> 00:07:44,460
at which they get certified however

193
00:07:44,460 --> 00:07:47,759
certifications often seen as a seal of

194
00:07:47,759 --> 00:07:49,800
approval of meeting a certain minimum

195
00:07:49,800 --> 00:07:52,800
bar and in the case of certain products

196
00:07:52,800 --> 00:07:54,780
that was simply not the case and that

197
00:07:54,780 --> 00:07:57,479
leads to a false sense of security now

198
00:07:57,479 --> 00:08:00,060
there are several issues contributing to

199
00:08:00,060 --> 00:08:02,400
this problem which is the effort

200
00:08:02,400 --> 00:08:04,560
required to certify into re-certify

201
00:08:04,560 --> 00:08:06,599
products especially at the higher

202
00:08:06,599 --> 00:08:08,639
certification levels which sometimes

203
00:08:08,639 --> 00:08:11,639
leads vendors to not re-certify a

204
00:08:11,639 --> 00:08:13,319
product they just get it certified once

205
00:08:13,319 --> 00:08:15,120
and then do don't do the recertification

206
00:08:15,120 --> 00:08:18,660
effort but they advertise it as based on

207
00:08:18,660 --> 00:08:20,819
this particular standard instead

208
00:08:20,819 --> 00:08:23,580
secondly the target of evaluation is

209
00:08:23,580 --> 00:08:25,379
often fairly limited and the security

210
00:08:25,379 --> 00:08:27,120
definitions in the standards can be

211
00:08:27,120 --> 00:08:29,340
quite opaque and finally many

212
00:08:29,340 --> 00:08:31,440
certification efforts perform a lot of

213
00:08:31,440 --> 00:08:33,120
functional testing

214
00:08:33,120 --> 00:08:35,399
so a security requirement is tested to

215
00:08:35,399 --> 00:08:37,799
be present or not but no indication of

216
00:08:37,799 --> 00:08:39,539
robustness is obtained within the

217
00:08:39,539 --> 00:08:41,940
limited amount of time dedicated to this

218
00:08:41,940 --> 00:08:44,520
evaluation effort and this holds all the

219
00:08:44,520 --> 00:08:46,920
more so for proprietary protocols about

220
00:08:46,920 --> 00:08:49,200
which the auditor will know nothing

221
00:08:49,200 --> 00:08:51,540
so having some sort of advisory for

222
00:08:51,540 --> 00:08:53,880
security issues relating to this or that

223
00:08:53,880 --> 00:08:56,519
feature in a product can serve as a

224
00:08:56,519 --> 00:08:58,860
future reference for Auditors who don't

225
00:08:58,860 --> 00:09:01,260
have the required SME knowledge during

226
00:09:01,260 --> 00:09:05,060
the certification trajectory

227
00:09:05,100 --> 00:09:07,920
so let's take a deeper dive into a

228
00:09:07,920 --> 00:09:10,140
recurring category of issues broken

229
00:09:10,140 --> 00:09:12,180
authentication schemes and improper

230
00:09:12,180 --> 00:09:13,680
fixes for them

231
00:09:13,680 --> 00:09:16,140
while a lot of OT systems like any

232
00:09:16,140 --> 00:09:18,360
security controls to begin with it's

233
00:09:18,360 --> 00:09:20,459
become more common over the past decade

234
00:09:20,459 --> 00:09:22,500
to integrate at least some sort of

235
00:09:22,500 --> 00:09:24,600
authentication scheme on sensitive

236
00:09:24,600 --> 00:09:27,300
operator or engineering interfaces

237
00:09:27,300 --> 00:09:29,760
in practice these are often of subcore

238
00:09:29,760 --> 00:09:32,779
quality however

239
00:09:40,279 --> 00:09:43,019
now the first example I want to walk you

240
00:09:43,019 --> 00:09:46,320
through is the Siemens wincy COA scada

241
00:09:46,320 --> 00:09:49,019
system it's popular scada system used in

242
00:09:49,019 --> 00:09:51,120
oil and gas water management power

243
00:09:51,120 --> 00:09:53,820
generation and places like CERN

244
00:09:53,820 --> 00:09:56,820
it has an operator UI which essentially

245
00:09:56,820 --> 00:09:59,760
talks to a dedicated proxy by wrapping a

246
00:09:59,760 --> 00:10:01,740
proprietary insecure protocol called

247
00:10:01,740 --> 00:10:05,640
PVSS in TLS and then the proxy unwraps

248
00:10:05,640 --> 00:10:07,440
it again and and talks to these various

249
00:10:07,440 --> 00:10:10,019
components of the scada system uh in the

250
00:10:10,019 --> 00:10:12,720
back using this PVSS protocol so

251
00:10:12,720 --> 00:10:15,120
essentially it's a way to to have some

252
00:10:15,120 --> 00:10:16,920
sort of a security wrapper around an

253
00:10:16,920 --> 00:10:19,080
insecure by Design protocol

254
00:10:19,080 --> 00:10:21,720
now in order for an operator to

255
00:10:21,720 --> 00:10:23,399
authenticate there are three different

256
00:10:23,399 --> 00:10:26,100
modes first of which is client-side

257
00:10:26,100 --> 00:10:28,620
authentication this is the default mode

258
00:10:28,620 --> 00:10:31,740
prior to version 3.17 and it is

259
00:10:31,740 --> 00:10:34,440
preferred for SSO integration

260
00:10:34,440 --> 00:10:36,120
the second mode is server-side

261
00:10:36,120 --> 00:10:38,220
authentication which is the default

262
00:10:38,220 --> 00:10:41,399
starting from 3.17 but it's sometimes

263
00:10:41,399 --> 00:10:43,200
switched out in favor of client-side

264
00:10:43,200 --> 00:10:45,959
authentication for SSO reasons now

265
00:10:45,959 --> 00:10:48,420
finally there's gerberos Authentication

266
00:10:48,420 --> 00:10:50,100
now the issue with this client-side

267
00:10:50,100 --> 00:10:51,660
authentication mode that's fairly

268
00:10:51,660 --> 00:10:53,940
popular is that it stores the

269
00:10:53,940 --> 00:10:56,640
credentials as points in the scada

270
00:10:56,640 --> 00:10:59,339
database and the client just sends PVSS

271
00:10:59,339 --> 00:11:02,040
requests for these credentials fetches

272
00:11:02,040 --> 00:11:04,980
them to the operator UI application and

273
00:11:04,980 --> 00:11:06,839
then validates them locally for example

274
00:11:06,839 --> 00:11:09,180
against an active directory

275
00:11:09,180 --> 00:11:12,180
but the attacker can obviously just skip

276
00:11:12,180 --> 00:11:13,980
all this by writing their own malicious

277
00:11:13,980 --> 00:11:15,860
client which talks to this proxy

278
00:11:15,860 --> 00:11:19,680
transports PVSS over this proxy and then

279
00:11:19,680 --> 00:11:22,079
just interacts with the database in any

280
00:11:22,079 --> 00:11:24,360
way at once or maybe even fetches the

281
00:11:24,360 --> 00:11:27,420
credentials that are stored there so

282
00:11:27,420 --> 00:11:30,839
this is an example of an authentication

283
00:11:30,839 --> 00:11:34,560
mode that you'd be inclined to not use

284
00:11:34,560 --> 00:11:36,540
especially one you know that the default

285
00:11:36,540 --> 00:11:38,040
has become server-side authentication

286
00:11:38,040 --> 00:11:40,260
but then if you want integration with

287
00:11:40,260 --> 00:11:42,839
SSO it's very popular to do it in this

288
00:11:42,839 --> 00:11:44,519
way through client-side authentication

289
00:11:44,519 --> 00:11:47,519
so there's a reason why you might want

290
00:11:47,519 --> 00:11:50,040
to opt for this even in in the newest

291
00:11:50,040 --> 00:11:52,800
versions of Windsor COA but that exposes

292
00:11:52,800 --> 00:11:56,220
you to various issues that you might not

293
00:11:56,220 --> 00:11:58,560
be aware of if you do not know how this

294
00:11:58,560 --> 00:12:01,518
works under the hood

295
00:12:01,680 --> 00:12:04,079
next thing we uh we took a look at was

296
00:12:04,079 --> 00:12:07,019
the Motorola mdlc protocol which is a

297
00:12:07,019 --> 00:12:09,540
scada to R2 U1 protocol that can be

298
00:12:09,540 --> 00:12:11,519
transported over a variety of channels

299
00:12:11,519 --> 00:12:14,700
such as IP serial radio microwave you

300
00:12:14,700 --> 00:12:17,220
name it it doesn't have explicit

301
00:12:17,220 --> 00:12:19,620
authentication features but there are

302
00:12:19,620 --> 00:12:21,720
two pre-shared key based encryption

303
00:12:21,720 --> 00:12:23,399
modes so essentially if you want to talk

304
00:12:23,399 --> 00:12:26,279
to one of these rtus and the encryption

305
00:12:26,279 --> 00:12:28,200
mode is enabled you need to possess the

306
00:12:28,200 --> 00:12:30,060
right pre-shared key to encrypt the

307
00:12:30,060 --> 00:12:32,459
packet so you know the rtu Can decrypt

308
00:12:32,459 --> 00:12:36,360
it and say this is a valid packet now in

309
00:12:36,360 --> 00:12:40,079
newer rtus there's the as256 modes in

310
00:12:40,079 --> 00:12:42,839
older rtus however including the ace

311
00:12:42,839 --> 00:12:44,579
thousand RDU which is still widely

312
00:12:44,579 --> 00:12:46,980
deployed there is a mode that is

313
00:12:46,980 --> 00:12:48,360
essentially the tiny encryption

314
00:12:48,360 --> 00:12:51,300
algorithm in the ECB mode of operation

315
00:12:51,300 --> 00:12:54,420
now this mode was also supported by

316
00:12:54,420 --> 00:12:56,399
newer rtus for reasons of backward

317
00:12:56,399 --> 00:12:58,980
compatibility or networks with mixed

318
00:12:58,980 --> 00:13:01,860
rtus up until recently because of the

319
00:13:01,860 --> 00:13:03,000
disclosure

320
00:13:03,000 --> 00:13:06,600
of course using any block Cipher in ECB

321
00:13:06,600 --> 00:13:08,519
mode means that you're opening yourself

322
00:13:08,519 --> 00:13:11,040
up to various types of attacks now in

323
00:13:11,040 --> 00:13:12,720
plain text attacks block swapping

324
00:13:12,720 --> 00:13:15,480
attacks because it doesn't guarantee

325
00:13:15,480 --> 00:13:18,120
integrity and confidentiality above the

326
00:13:18,120 --> 00:13:20,820
Block Level which is nicely illustrated

327
00:13:20,820 --> 00:13:23,760
by the notorious ECB Penguin on the

328
00:13:23,760 --> 00:13:25,200
right of the slide where you can see

329
00:13:25,200 --> 00:13:26,459
that you know you have these

330
00:13:26,459 --> 00:13:28,320
cryptographic assurances at the Block

331
00:13:28,320 --> 00:13:30,360
Level but they don't hold above the

332
00:13:30,360 --> 00:13:31,620
Block Level because it's just block

333
00:13:31,620 --> 00:13:33,540
after block after block

334
00:13:33,540 --> 00:13:37,079
and this this essentially means that if

335
00:13:37,079 --> 00:13:39,660
you're using this this DEA ECB mode of

336
00:13:39,660 --> 00:13:41,880
encryption you're opening yourself up to

337
00:13:41,880 --> 00:13:43,920
various types of attacks that are not

338
00:13:43,920 --> 00:13:45,720
immediately clear because it's not

339
00:13:45,720 --> 00:13:47,579
publicly documented that it actually

340
00:13:47,579 --> 00:13:50,100
uses this particular algorithm in this

341
00:13:50,100 --> 00:13:52,019
particular mode of operation which makes

342
00:13:52,019 --> 00:13:54,000
it all the harder to do some sort of

343
00:13:54,000 --> 00:13:57,240
risk management around this

344
00:13:57,240 --> 00:14:00,180
next there are the Saya Burgess PCD plls

345
00:14:00,180 --> 00:14:02,160
used a lot in machine automation

346
00:14:02,160 --> 00:14:04,740
building automation also sometimes in

347
00:14:04,740 --> 00:14:05,839
gas management

348
00:14:05,839 --> 00:14:08,820
and they use the asbas protocol which is

349
00:14:08,820 --> 00:14:10,740
originally a Serial Master Slave

350
00:14:10,740 --> 00:14:12,839
protocol this protocol does have

351
00:14:12,839 --> 00:14:15,120
explicit authentication and that

352
00:14:15,120 --> 00:14:18,000
essentially works by writing to a static

353
00:14:18,000 --> 00:14:20,100
address so you have a data point with a

354
00:14:20,100 --> 00:14:22,200
static address and you authenticate by

355
00:14:22,200 --> 00:14:23,540
writing to it

356
00:14:23,540 --> 00:14:26,459
unfortunately what you write to it is a

357
00:14:26,459 --> 00:14:29,639
32-bit hash of the password and that's

358
00:14:29,639 --> 00:14:31,560
derived from essentially concatenating

359
00:14:31,560 --> 00:14:35,940
to CRC 16 hashes of the password and

360
00:14:35,940 --> 00:14:38,339
this is trivially insecure in multiple

361
00:14:38,339 --> 00:14:40,019
ways it's vulnerable to a ton of

362
00:14:40,019 --> 00:14:41,459
collisions because it's not a

363
00:14:41,459 --> 00:14:44,160
cryptographic hash it's replayable

364
00:14:44,160 --> 00:14:46,500
because there's no nuns involved so if I

365
00:14:46,500 --> 00:14:48,240
observe it over the wire I can just

366
00:14:48,240 --> 00:14:49,860
replay it and I don't even need to know

367
00:14:49,860 --> 00:14:52,199
the password and on top of that the

368
00:14:52,199 --> 00:14:55,320
whole mechanism Works based on Mac and

369
00:14:55,320 --> 00:14:58,079
IP based wide lifting of white listing

370
00:14:58,079 --> 00:14:59,880
so what essentially happens is that once

371
00:14:59,880 --> 00:15:02,339
I authenticate the PLC puts me in a

372
00:15:02,339 --> 00:15:04,380
white list but it's built on top of a

373
00:15:04,380 --> 00:15:06,779
UDP protocol so you're still left with

374
00:15:06,779 --> 00:15:08,459
all the issues related to that

375
00:15:08,459 --> 00:15:11,459
regardless of the lack of quality of the

376
00:15:11,459 --> 00:15:12,480
mechanism

377
00:15:12,480 --> 00:15:15,320
and and if you had a more

378
00:15:15,320 --> 00:15:18,420
mature mechanism you could have maybe

379
00:15:18,420 --> 00:15:20,779
done it in such a way that you

380
00:15:20,779 --> 00:15:22,560
cryptographically couple the

381
00:15:22,560 --> 00:15:24,720
authentication phase to any subsequent

382
00:15:24,720 --> 00:15:26,100
messages so you have some sort of

383
00:15:26,100 --> 00:15:27,839
signing of these messages and then it

384
00:15:27,839 --> 00:15:29,639
doesn't matter that you're using UDP but

385
00:15:29,639 --> 00:15:31,800
they didn't do that so regardless of the

386
00:15:31,800 --> 00:15:33,600
authentication you have this secondary

387
00:15:33,600 --> 00:15:35,540
issue

388
00:15:35,540 --> 00:15:37,920
another interesting case with some

389
00:15:37,920 --> 00:15:40,680
overlap here are the Emerson control

390
00:15:40,680 --> 00:15:43,139
wave plcs and they're very popular in

391
00:15:43,139 --> 00:15:45,600
oil and gas I use a lot in pipelining

392
00:15:45,600 --> 00:15:48,000
infrastructure they have a proprietary

393
00:15:48,000 --> 00:15:50,940
protocol called psap IP which is an IP

394
00:15:50,940 --> 00:15:53,339
flavor of an older serial protocol by

395
00:15:53,339 --> 00:15:57,300
predecessor Bristol Badcock rtus it has

396
00:15:57,300 --> 00:15:59,160
password authentication for engineering

397
00:15:59,160 --> 00:16:01,079
operations like starting and stopping

398
00:16:01,079 --> 00:16:03,660
the PLC and downloading logic but again

399
00:16:03,660 --> 00:16:06,360
enforces this using a Mac IP based

400
00:16:06,360 --> 00:16:09,420
whitelist on a UDP protocol so there you

401
00:16:09,420 --> 00:16:11,719
go already

402
00:16:12,000 --> 00:16:13,980
on top of that there are three

403
00:16:13,980 --> 00:16:16,500
authentication modes historically only

404
00:16:16,500 --> 00:16:18,600
simple authentication which is just a

405
00:16:18,600 --> 00:16:21,000
plain text password broken in obvious

406
00:16:21,000 --> 00:16:23,220
way and then they had a secure

407
00:16:23,220 --> 00:16:25,500
authentication mode where the PLC sends

408
00:16:25,500 --> 00:16:28,019
you an 8-bit key and you encrypt the

409
00:16:28,019 --> 00:16:29,880
password using that 8-bit key and send

410
00:16:29,880 --> 00:16:32,579
it back to the PLC which I mean is

411
00:16:32,579 --> 00:16:34,440
broken in many ways I mean an 8-bit key

412
00:16:34,440 --> 00:16:37,259
is way too small but also the key is

413
00:16:37,259 --> 00:16:40,500
sent to you in plain text so you know uh

414
00:16:40,500 --> 00:16:42,899
if I can sniff traffic I just see it

415
00:16:42,899 --> 00:16:44,579
coming to me and I can decrypt the

416
00:16:44,579 --> 00:16:48,180
password and that is that then currently

417
00:16:48,180 --> 00:16:50,820
they are using secure mode 2 which is

418
00:16:50,820 --> 00:16:52,920
undocumented but it's essentially the

419
00:16:52,920 --> 00:16:55,500
same as secure mode except with a bigger

420
00:16:55,500 --> 00:16:58,019
key and a different algorithm so now the

421
00:16:58,019 --> 00:17:01,440
PLC sent you 64-bit key you encrypt the

422
00:17:01,440 --> 00:17:03,600
password and then you send it back to

423
00:17:03,600 --> 00:17:05,099
the PLC again

424
00:17:05,099 --> 00:17:07,859
this is fundamentally bad design three

425
00:17:07,859 --> 00:17:09,599
times over and it speaks to a

426
00:17:09,599 --> 00:17:11,400
fundamental misunderstanding of how a

427
00:17:11,400 --> 00:17:13,079
challenge response mechanism is supposed

428
00:17:13,079 --> 00:17:15,240
to work this could have been addressed

429
00:17:15,240 --> 00:17:17,339
twice once when you introduced secure

430
00:17:17,339 --> 00:17:18,660
mode then when you introduced secure

431
00:17:18,660 --> 00:17:21,119
mode 2 but it wasn't done so

432
00:17:21,119 --> 00:17:24,839
unfortunately two missed chance

433
00:17:24,839 --> 00:17:27,660
according to Emerson however these are

434
00:17:27,660 --> 00:17:30,120
not vulnerabilities they feel these

435
00:17:30,120 --> 00:17:31,679
issues are adequately addressed in the

436
00:17:31,679 --> 00:17:34,020
control wave manual which basically says

437
00:17:34,020 --> 00:17:37,200
that if you want enhanced security you

438
00:17:37,200 --> 00:17:40,740
can install a VPN and a firewall now of

439
00:17:40,740 --> 00:17:43,260
course enhanced security kind of implies

440
00:17:43,260 --> 00:17:45,480
that existing controls offer some form

441
00:17:45,480 --> 00:17:48,299
of basic security which in my opinion is

442
00:17:48,299 --> 00:17:51,539
not the case on top of that the proposed

443
00:17:51,539 --> 00:17:53,340
reference design which you can see on

444
00:17:53,340 --> 00:17:55,500
the right of the slide it doesn't offer

445
00:17:55,500 --> 00:17:57,900
any protection against this issue at the

446
00:17:57,900 --> 00:18:00,419
side level itself so what it proposes is

447
00:18:00,419 --> 00:18:04,140
you have the remote location where the

448
00:18:04,140 --> 00:18:05,760
engineering workstation is and then you

449
00:18:05,760 --> 00:18:07,860
have the satellite site where the PLC

450
00:18:07,860 --> 00:18:10,440
lives and you put a side-to-side VPN

451
00:18:10,440 --> 00:18:12,539
connection between them but if you have

452
00:18:12,539 --> 00:18:14,820
any sort of compromise at the site

453
00:18:14,820 --> 00:18:16,860
location where you know the the control

454
00:18:16,860 --> 00:18:18,720
wave is and there isn't adequate

455
00:18:18,720 --> 00:18:20,640
segmentation there

456
00:18:20,640 --> 00:18:22,559
um which you might not do because you're

457
00:18:22,559 --> 00:18:24,419
led to believe that you know maybe it is

458
00:18:24,419 --> 00:18:26,160
Authentication is good enough especially

459
00:18:26,160 --> 00:18:28,500
if I introduce this side to side VPN

460
00:18:28,500 --> 00:18:30,419
then you have residual risk there which

461
00:18:30,419 --> 00:18:33,360
is unaddressed so not considering

462
00:18:33,360 --> 00:18:34,799
there's a vulnerability and not

463
00:18:34,799 --> 00:18:36,720
mentioning what kind of quality of

464
00:18:36,720 --> 00:18:38,700
security you can expect of secure mode 2

465
00:18:38,700 --> 00:18:40,380
might lead to

466
00:18:40,380 --> 00:18:42,360
accepting more risk than you actually

467
00:18:42,360 --> 00:18:44,039
have an appetite for and that's

468
00:18:44,039 --> 00:18:47,419
unfortunate in my opinion

469
00:18:52,020 --> 00:18:54,360
so an example of an incomplete rather

470
00:18:54,360 --> 00:18:56,760
than an improper bug fix would be the

471
00:18:56,760 --> 00:18:59,160
yokugawa stardom plcs which are very big

472
00:18:59,160 --> 00:19:02,460
in mining they have a talented

473
00:19:02,460 --> 00:19:04,200
maintenance interface that has had

474
00:19:04,200 --> 00:19:06,179
multiple prior issues with hard-coded

475
00:19:06,179 --> 00:19:09,059
credentials in 2018 and even though

476
00:19:09,059 --> 00:19:11,580
these issues were fixed we found another

477
00:19:11,580 --> 00:19:13,799
set of hard-coded credentials affecting

478
00:19:13,799 --> 00:19:16,740
duplex controllers specifically and the

479
00:19:16,740 --> 00:19:19,020
fact that the same issue affecting the

480
00:19:19,020 --> 00:19:20,760
same interface but in a slightly

481
00:19:20,760 --> 00:19:22,980
different part of the firmware was left

482
00:19:22,980 --> 00:19:25,380
in there after fixing two similar cases

483
00:19:25,380 --> 00:19:28,140
kind of suggests that bug fixing was

484
00:19:28,140 --> 00:19:30,600
treated as a one-off so bug gets

485
00:19:30,600 --> 00:19:32,340
reported and the engineer starts with

486
00:19:32,340 --> 00:19:35,039
fixing this specific bug and that is

487
00:19:35,039 --> 00:19:37,500
that rather than being followed up with

488
00:19:37,500 --> 00:19:39,299
variant hunting where you look for Okay

489
00:19:39,299 --> 00:19:41,520
so we've had this issue you know twice

490
00:19:41,520 --> 00:19:43,200
are there any other hard-coded

491
00:19:43,200 --> 00:19:45,360
credentials Within These code base and

492
00:19:45,360 --> 00:19:47,160
that is that is the way you'd want to do

493
00:19:47,160 --> 00:19:48,600
it but unfortunately that that

494
00:19:48,600 --> 00:19:52,039
apparently hasn't happened here

495
00:19:52,260 --> 00:19:54,960
finally we find an example pointing

496
00:19:54,960 --> 00:19:56,880
towards a similar lack of variant

497
00:19:56,880 --> 00:19:59,100
hunting with the Emerson Delta V DCS

498
00:19:59,100 --> 00:20:01,559
controllers it's a very big DCS system

499
00:20:01,559 --> 00:20:04,559
used a lot in oil and gas and these

500
00:20:04,559 --> 00:20:06,480
controllers are essentially configured

501
00:20:06,480 --> 00:20:08,580
rather than programmed with a strategy

502
00:20:08,580 --> 00:20:11,400
download from an integrated workstation

503
00:20:11,400 --> 00:20:13,740
and server environment

504
00:20:13,740 --> 00:20:17,280
um now first of all most controllers up

505
00:20:17,280 --> 00:20:18,780
to the most recent version had

506
00:20:18,780 --> 00:20:21,059
hard-coded credentials for the so-called

507
00:20:21,059 --> 00:20:24,360
read-only telnet interface which is a a

508
00:20:24,360 --> 00:20:27,179
main limited maintenance interface in

509
00:20:27,179 --> 00:20:29,160
addition several other hard-coded

510
00:20:29,160 --> 00:20:31,740
credentials were present with were

511
00:20:31,740 --> 00:20:34,140
technically tied to FTP and SSH

512
00:20:34,140 --> 00:20:35,820
maintenance interfaces that were

513
00:20:35,820 --> 00:20:39,320
disabled by default so very limited risk

514
00:20:39,320 --> 00:20:41,940
unfortunately and this was not mentioned

515
00:20:41,940 --> 00:20:45,240
in in the Emerson advisory if you manage

516
00:20:45,240 --> 00:20:46,980
to get access to these controllers

517
00:20:46,980 --> 00:20:49,080
through another Channel perhaps a code

518
00:20:49,080 --> 00:20:51,059
execution vulnerability or some kind of

519
00:20:51,059 --> 00:20:53,520
other shell axis you could use these

520
00:20:53,520 --> 00:20:55,020
hard-coded credentials for local

521
00:20:55,020 --> 00:20:57,120
privilege escalation and that is a

522
00:20:57,120 --> 00:20:58,679
factor that unfortunately wasn't

523
00:20:58,679 --> 00:21:01,260
mentioned in addition to these

524
00:21:01,260 --> 00:21:03,299
hard-coded credentials there is a

525
00:21:03,299 --> 00:21:05,460
maintenance Talent interface and that

526
00:21:05,460 --> 00:21:08,220
offers access to a shell on these

527
00:21:08,220 --> 00:21:10,679
controllers this interface uses an

528
00:21:10,679 --> 00:21:13,620
insecure authentication algorithm that

529
00:21:13,620 --> 00:21:15,780
is present on the M controllers and the

530
00:21:15,780 --> 00:21:17,580
S controllers and the P controllers and

531
00:21:17,580 --> 00:21:20,340
the safety instrumented controllers up

532
00:21:20,340 --> 00:21:23,039
to a very recent version after which it

533
00:21:23,039 --> 00:21:25,860
was silently patched and this

534
00:21:25,860 --> 00:21:27,720
authentication algorithm consists

535
00:21:27,720 --> 00:21:30,360
essentially of a Homebrew crypto

536
00:21:30,360 --> 00:21:32,760
algorithm which is not really

537
00:21:32,760 --> 00:21:35,700
cryptographically secure in any way but

538
00:21:35,700 --> 00:21:37,559
on top of that there's no secret being

539
00:21:37,559 --> 00:21:39,000
used there's no secret key there's no

540
00:21:39,000 --> 00:21:42,780
secret negotiated instead it relies on a

541
00:21:42,780 --> 00:21:45,780
predictable seat smaller than 16 bits so

542
00:21:45,780 --> 00:21:47,520
as soon as an attacker reverse Engineers

543
00:21:47,520 --> 00:21:49,679
this mechanism they can reproduce it and

544
00:21:49,679 --> 00:21:51,419
they get shell access to these

545
00:21:51,419 --> 00:21:53,340
controllers which is even worse than

546
00:21:53,340 --> 00:21:54,960
being able to download a malicious

547
00:21:54,960 --> 00:21:57,539
strategy to it because you have very low

548
00:21:57,539 --> 00:21:59,820
level access at that point

549
00:21:59,820 --> 00:22:02,159
what's interesting is that this is not

550
00:22:02,159 --> 00:22:04,500
the first time that Delta V has suffered

551
00:22:04,500 --> 00:22:06,539
from hard-coded credential issues either

552
00:22:06,539 --> 00:22:08,760
and they suffered from these issues in

553
00:22:08,760 --> 00:22:11,820
2014 on a different interface and that

554
00:22:11,820 --> 00:22:15,120
kind of shows that they too did not

555
00:22:15,120 --> 00:22:16,919
follow this up with variant hunting

556
00:22:16,919 --> 00:22:19,679
across different parts of the system

557
00:22:19,679 --> 00:22:21,840
that that apparently is a recurring

558
00:22:21,840 --> 00:22:23,460
issue

559
00:22:23,460 --> 00:22:26,640
so all of these examples lead us to the

560
00:22:26,640 --> 00:22:27,659
question

561
00:22:27,659 --> 00:22:30,360
when is something actually secure by

562
00:22:30,360 --> 00:22:33,480
Design now most standards have some

563
00:22:33,480 --> 00:22:35,400
functional requirements uh something

564
00:22:35,400 --> 00:22:37,500
shall have capability X or capability

565
00:22:37,500 --> 00:22:40,500
why it shall not do Z but they offer no

566
00:22:40,500 --> 00:22:42,900
guidance on how to make this robust in a

567
00:22:42,900 --> 00:22:45,299
technically explicit manner in this

568
00:22:45,299 --> 00:22:49,080
research alone we found 22 cves related

569
00:22:49,080 --> 00:22:51,539
to Broken authentication well if we look

570
00:22:51,539 --> 00:22:53,880
at a selection of similar issues on

571
00:22:53,880 --> 00:22:55,679
different products from the last five

572
00:22:55,679 --> 00:22:58,740
years we can easily find 28 cves with

573
00:22:58,740 --> 00:23:01,500
similar root causes and this suggests

574
00:23:01,500 --> 00:23:04,020
that although some progress is being

575
00:23:04,020 --> 00:23:07,260
made in retrofitting or adding these

576
00:23:07,260 --> 00:23:09,360
these these security controls on these

577
00:23:09,360 --> 00:23:12,240
particular systems it's very hard to

578
00:23:12,240 --> 00:23:14,340
trust the quality of these controls they

579
00:23:14,340 --> 00:23:16,500
they're essentially broken across the

580
00:23:16,500 --> 00:23:18,240
board and this is not a particular fault

581
00:23:18,240 --> 00:23:20,820
of any individual vendor it it happens

582
00:23:20,820 --> 00:23:24,720
time and again among all of them in

583
00:23:24,720 --> 00:23:27,360
addition being secure by Design isn't

584
00:23:27,360 --> 00:23:29,460
enough things need to be secure by

585
00:23:29,460 --> 00:23:31,860
default rather than relying on some how

586
00:23:31,860 --> 00:23:33,780
to harden guidance hidden somewhere at

587
00:23:33,780 --> 00:23:35,159
the end of a menu

588
00:23:35,159 --> 00:23:38,340
also bug fixes ought to address the root

589
00:23:38,340 --> 00:23:40,440
cause of an issue not they shouldn't

590
00:23:40,440 --> 00:23:42,179
just you know replace one hard-coded

591
00:23:42,179 --> 00:23:43,380
credential with an already should

592
00:23:43,380 --> 00:23:46,260
address the actual root cause and it

593
00:23:46,260 --> 00:23:47,940
should be followed by variant hunting if

594
00:23:47,940 --> 00:23:50,760
you if you get reported one particular

595
00:23:50,760 --> 00:23:53,760
issue or two particular issues over the

596
00:23:53,760 --> 00:23:55,320
years that should trigger an

597
00:23:55,320 --> 00:23:57,539
investigation saying is this a recurring

598
00:23:57,539 --> 00:23:59,760
issue among this particular code base so

599
00:23:59,760 --> 00:24:01,500
you can eliminate it instead of having

600
00:24:01,500 --> 00:24:03,659
just this ad hoc fixing cycle depending

601
00:24:03,659 --> 00:24:05,460
on the attention of an individual

602
00:24:05,460 --> 00:24:08,220
researcher and I would think that this

603
00:24:08,220 --> 00:24:11,700
is what a standard certified sdlc should

604
00:24:11,700 --> 00:24:15,140
be able to guarantee right

605
00:24:15,360 --> 00:24:18,960
so to summarize this part please no more

606
00:24:18,960 --> 00:24:20,780
potemkin security

607
00:24:20,780 --> 00:24:23,880
subpar security controls can result in a

608
00:24:23,880 --> 00:24:25,740
false sense of security that can

609
00:24:25,740 --> 00:24:27,539
actually be worse than a clear sense of

610
00:24:27,539 --> 00:24:30,120
insecurity or at least you will be able

611
00:24:30,120 --> 00:24:31,799
to take these compensating controls

612
00:24:31,799 --> 00:24:33,659
because you know how insecure you are

613
00:24:33,659 --> 00:24:36,960
instead of relying on controls that are

614
00:24:36,960 --> 00:24:39,120
far more porous than you might be led to

615
00:24:39,120 --> 00:24:40,740
believe

616
00:24:40,740 --> 00:24:43,320
um secondly secure by Design and secure

617
00:24:43,320 --> 00:24:45,419
by default can only work with clear

618
00:24:45,419 --> 00:24:47,520
technically explicit minimum

619
00:24:47,520 --> 00:24:50,100
requirements and in-depth independent

620
00:24:50,100 --> 00:24:51,840
validation that goes beyond just

621
00:24:51,840 --> 00:24:54,799
functional test

622
00:25:01,799 --> 00:25:03,539
now

623
00:25:03,539 --> 00:25:06,240
during the research there are some

624
00:25:06,240 --> 00:25:09,059
classes of issues that require a little

625
00:25:09,059 --> 00:25:10,740
bit of more Nuance when you're looking

626
00:25:10,740 --> 00:25:11,880
at them

627
00:25:11,880 --> 00:25:13,860
and their particular impact I will take

628
00:25:13,860 --> 00:25:16,260
a brief look at a few of these issues

629
00:25:16,260 --> 00:25:18,900
where if you just look at the

630
00:25:18,900 --> 00:25:20,820
vulnerability in isolation you might be

631
00:25:20,820 --> 00:25:22,200
allowed to believe that it's actually

632
00:25:22,200 --> 00:25:24,240
worse than it is considering mitigations

633
00:25:24,240 --> 00:25:27,059
that might be available or maybe you

634
00:25:27,059 --> 00:25:29,100
might be aware of certain standard type

635
00:25:29,100 --> 00:25:31,320
of mitigations for these issues but

636
00:25:31,320 --> 00:25:33,720
because of all kinds of caveats it

637
00:25:33,720 --> 00:25:36,120
doesn't quite apply in that manner in

638
00:25:36,120 --> 00:25:38,100
that particular case and it it is kind

639
00:25:38,100 --> 00:25:41,279
of a showcase for the depth of of

640
00:25:41,279 --> 00:25:43,260
familiarity with a particular system

641
00:25:43,260 --> 00:25:45,360
that you need to have in order to be

642
00:25:45,360 --> 00:25:48,179
able to make the right call on what

643
00:25:48,179 --> 00:25:50,460
level of of risk a particular issue

644
00:25:50,460 --> 00:25:53,220
actually poses to you

645
00:25:53,220 --> 00:25:55,679
so first of all there's the issue with

646
00:25:55,679 --> 00:25:57,960
supply chain vulnerabilities in the past

647
00:25:57,960 --> 00:25:59,640
few years we've seen more and more

648
00:25:59,640 --> 00:26:01,140
supply chain issues across the

649
00:26:01,140 --> 00:26:04,740
technology stack in OT from rtos's sdks

650
00:26:04,740 --> 00:26:06,900
and protocol Stacks to run times and

651
00:26:06,900 --> 00:26:09,779
remote access Solutions now what happens

652
00:26:09,779 --> 00:26:12,179
all too often is that a vulnerability

653
00:26:12,179 --> 00:26:14,880
affecting some supply chain component

654
00:26:14,880 --> 00:26:17,760
high up but that is discovered in one

655
00:26:17,760 --> 00:26:19,980
particular product that just uses this

656
00:26:19,980 --> 00:26:22,799
component doesn't make its way up the

657
00:26:22,799 --> 00:26:24,960
chain again and then back down to all

658
00:26:24,960 --> 00:26:26,960
the other offended vendors

659
00:26:26,960 --> 00:26:29,940
sometimes it's because discoverers of an

660
00:26:29,940 --> 00:26:32,700
issue are unaware of the issue uh that

661
00:26:32,700 --> 00:26:35,520
it's actually a part of a third party

662
00:26:35,520 --> 00:26:37,200
component instead of this particular

663
00:26:37,200 --> 00:26:39,419
product so it just gets reported for the

664
00:26:39,419 --> 00:26:41,580
one product and then nobody ever learns

665
00:26:41,580 --> 00:26:44,220
where it's actually located in other

666
00:26:44,220 --> 00:26:47,159
cases the vendors of that third-party

667
00:26:47,159 --> 00:26:49,559
component themselves might not have a

668
00:26:49,559 --> 00:26:51,360
complete overview of their entire

669
00:26:51,360 --> 00:26:54,120
Downstream supply chain because there's

670
00:26:54,120 --> 00:26:57,120
intermediate system integrators there

671
00:26:57,120 --> 00:27:00,179
are white label vendors and oems that

672
00:27:00,179 --> 00:27:02,039
maybe take this particular component

673
00:27:02,039 --> 00:27:04,440
that take some some embedded board they

674
00:27:04,440 --> 00:27:07,799
slap it together they resell it to a lot

675
00:27:07,799 --> 00:27:09,720
of different vendors that put just a

676
00:27:09,720 --> 00:27:11,580
brand sticker and some some additional

677
00:27:11,580 --> 00:27:13,799
software on it and at each of these

678
00:27:13,799 --> 00:27:16,679
layers there is only a partial view of

679
00:27:16,679 --> 00:27:18,240
the supply chain so it requires

680
00:27:18,240 --> 00:27:21,600
complicated coordination complicated uh

681
00:27:21,600 --> 00:27:23,640
visibility into the supply chains in

682
00:27:23,640 --> 00:27:26,220
order to get that information out to all

683
00:27:26,220 --> 00:27:28,919
these different parts these and these

684
00:27:28,919 --> 00:27:31,860
kind of situations lead to unnecessary

685
00:27:31,860 --> 00:27:34,200
vulnerability collisions and risk

686
00:27:34,200 --> 00:27:35,460
climates

687
00:27:35,460 --> 00:27:37,679
an example of this that we encountered

688
00:27:37,679 --> 00:27:39,900
during this research a lot is the

689
00:27:39,900 --> 00:27:44,880
proconos runtime this is an IEC 611313

690
00:27:44,880 --> 00:27:48,179
runtime similar to for example code says

691
00:27:48,179 --> 00:27:49,520
or isograph

692
00:27:49,520 --> 00:27:52,500
originally by KW soft now owned by

693
00:27:52,500 --> 00:27:55,380
Phoenix contact it's used by their

694
00:27:55,380 --> 00:27:58,559
products but also by many oems system

695
00:27:58,559 --> 00:28:00,779
integrators and white label vendors

696
00:28:00,779 --> 00:28:02,159
under many different integration

697
00:28:02,159 --> 00:28:05,100
commissions you might for example have

698
00:28:05,100 --> 00:28:08,039
different runtime versions you might for

699
00:28:08,039 --> 00:28:10,200
example have different protocols that

700
00:28:10,200 --> 00:28:12,779
belong to this runtime you have the

701
00:28:12,779 --> 00:28:14,760
socom protocol you have the Ade protocol

702
00:28:14,760 --> 00:28:17,159
but you can also use these runtimes with

703
00:28:17,159 --> 00:28:19,620
your own proprietary protocol

704
00:28:19,620 --> 00:28:23,520
so one thing we frequently encountered

705
00:28:23,520 --> 00:28:25,860
um when we were at a customer and they

706
00:28:25,860 --> 00:28:28,140
had a particular PLC or a particular PLC

707
00:28:28,140 --> 00:28:30,240
family in an environment was that after

708
00:28:30,240 --> 00:28:32,340
some investigation it turned out to run

709
00:28:32,340 --> 00:28:34,620
Pro con OS but this wasn't immediately

710
00:28:34,620 --> 00:28:37,740
clear from the outside because the PLC

711
00:28:37,740 --> 00:28:39,600
didn't advertise that it wasn't

712
00:28:39,600 --> 00:28:40,919
mentioned you know maybe in the

713
00:28:40,919 --> 00:28:44,700
advertising materials uh maybe it didn't

714
00:28:44,700 --> 00:28:46,440
use the conventional protocols that

715
00:28:46,440 --> 00:28:48,059
you'd use for fingerprinting but it used

716
00:28:48,059 --> 00:28:50,580
their own proprietary protocol and the

717
00:28:50,580 --> 00:28:52,440
problem here is that if you want to get

718
00:28:52,440 --> 00:28:55,320
an idea of the security posture of a

719
00:28:55,320 --> 00:28:58,860
particular PLC and you don't know these

720
00:28:58,860 --> 00:29:00,539
third-party components that are in there

721
00:29:00,539 --> 00:29:03,059
they might have a long history of

722
00:29:03,059 --> 00:29:05,220
well-known vulnerabilities in the case

723
00:29:05,220 --> 00:29:07,679
of broken OS those are unauthenticated

724
00:29:07,679 --> 00:29:09,480
engineering protocols where you can

725
00:29:09,480 --> 00:29:11,159
start and stop the PLC and download

726
00:29:11,159 --> 00:29:14,279
logic to it without authentication and

727
00:29:14,279 --> 00:29:16,260
you can get remote code execution

728
00:29:16,260 --> 00:29:18,059
through unsigned logic so you can just

729
00:29:18,059 --> 00:29:19,919
download your logic it's unsigned change

730
00:29:19,919 --> 00:29:22,320
it's unauthenticated to do the logic and

731
00:29:22,320 --> 00:29:24,179
you can get code execution on the PLC

732
00:29:24,179 --> 00:29:26,340
but if you don't know you're using this

733
00:29:26,340 --> 00:29:28,500
runtime you're oblivious to the fact

734
00:29:28,500 --> 00:29:30,539
that you're exposed to all these risks

735
00:29:30,539 --> 00:29:33,179
especially given that public proof of

736
00:29:33,179 --> 00:29:35,100
Concepts have been available for some of

737
00:29:35,100 --> 00:29:38,640
these issues for years but either no CVS

738
00:29:38,640 --> 00:29:41,039
were assigned to some of them or the

739
00:29:41,039 --> 00:29:43,500
corresponding CVS were only assigned to

740
00:29:43,500 --> 00:29:46,080
Phoenix contact products

741
00:29:46,080 --> 00:29:49,559
so due to the lack of software bills of

742
00:29:49,559 --> 00:29:51,539
materials in this case vulnerabilities

743
00:29:51,539 --> 00:29:54,659
get rediscovered a lot and an example

744
00:29:54,659 --> 00:29:57,960
here is that there's a cve from 2016 for

745
00:29:57,960 --> 00:30:00,779
the yokogawa startup plcs which on the

746
00:30:00,779 --> 00:30:03,860
surface seems unrelated to any of them

747
00:30:03,860 --> 00:30:08,539
all right should be good now

748
00:30:08,640 --> 00:30:10,200
so

749
00:30:10,200 --> 00:30:12,779
yeah during this work we identified

750
00:30:12,779 --> 00:30:14,820
various additional affected parties

751
00:30:14,820 --> 00:30:16,380
which you can see on the right of the

752
00:30:16,380 --> 00:30:18,899
slide these include some big names like

753
00:30:18,899 --> 00:30:23,459
ABB gluca Advent Yaskawa

754
00:30:23,580 --> 00:30:25,679
um and this is far from complete this is

755
00:30:25,679 --> 00:30:27,179
just the sample selection that we

756
00:30:27,179 --> 00:30:29,340
identified there are way more parties

757
00:30:29,340 --> 00:30:32,460
using this and we suggested that these

758
00:30:32,460 --> 00:30:33,960
parties would be included in the

759
00:30:33,960 --> 00:30:36,480
original CVS so the CVS that were

760
00:30:36,480 --> 00:30:38,179
originally issued for Phoenix contact

761
00:30:38,179 --> 00:30:40,440
augment them with these different

762
00:30:40,440 --> 00:30:42,720
parties that are also affected so that

763
00:30:42,720 --> 00:30:44,580
people using these systems know that

764
00:30:44,580 --> 00:30:46,880
they're exposed to this kind of risk

765
00:30:46,880 --> 00:30:49,320
unfortunately this hasn't happened yet

766
00:30:49,320 --> 00:30:51,360
for various reasons might still happen

767
00:30:51,360 --> 00:30:53,760
in the future but unfortunately it

768
00:30:53,760 --> 00:30:55,679
hasn't happened yet but this ideally is

769
00:30:55,679 --> 00:30:57,659
the way you you deal with these sort of

770
00:30:57,659 --> 00:31:00,020
issues

771
00:31:00,120 --> 00:31:02,659
next example are firmware updates

772
00:31:02,659 --> 00:31:04,799
malicious firmware updates and OT

773
00:31:04,799 --> 00:31:07,080
context are a little bit of a mix back

774
00:31:07,080 --> 00:31:09,240
to the attacker uh since on the one hand

775
00:31:09,240 --> 00:31:11,279
they're noisy as they require a

776
00:31:11,279 --> 00:31:12,960
controller reboot which will likely

777
00:31:12,960 --> 00:31:15,419
interrupt the operational process and

778
00:31:15,419 --> 00:31:17,520
Trigger alarms but on the other hand

779
00:31:17,520 --> 00:31:19,380
they're very powerful since they allow

780
00:31:19,380 --> 00:31:21,240
for persistence and mass breaking of

781
00:31:21,240 --> 00:31:22,860
controllers

782
00:31:22,860 --> 00:31:25,260
of all the products that we looked at

783
00:31:25,260 --> 00:31:27,840
only 51 percent had any sort of

784
00:31:27,840 --> 00:31:29,820
authentication for performing these

785
00:31:29,820 --> 00:31:31,200
updates

786
00:31:31,200 --> 00:31:34,080
um and only 22 percent performed some

787
00:31:34,080 --> 00:31:37,020
sort of firmware signing now the

788
00:31:37,020 --> 00:31:38,820
majority of firmware updates took place

789
00:31:38,820 --> 00:31:41,460
over ethernet uh which combined with the

790
00:31:41,460 --> 00:31:43,320
lack of authentication and signing is

791
00:31:43,320 --> 00:31:45,299
particularly worrying but it was a

792
00:31:45,299 --> 00:31:47,399
minority which only did firmware updates

793
00:31:47,399 --> 00:31:50,640
over SD card USB or serial where at

794
00:31:50,640 --> 00:31:52,380
least the risk is reduced to a

795
00:31:52,380 --> 00:31:54,720
compromised engineering workstation or

796
00:31:54,720 --> 00:31:56,220
media converter

797
00:31:56,220 --> 00:31:59,100
however it is important to note that

798
00:31:59,100 --> 00:32:01,559
even if you do sign your firmware you

799
00:32:01,559 --> 00:32:03,419
need to do this in the right way which

800
00:32:03,419 --> 00:32:05,279
means signing by the vendor and

801
00:32:05,279 --> 00:32:07,440
validating by the device in end-to-end

802
00:32:07,440 --> 00:32:11,539
fashion in an asymmetric fashion

803
00:32:12,000 --> 00:32:13,679
an example where this doesn't go

804
00:32:13,679 --> 00:32:16,320
completely right are the Emerson Delta V

805
00:32:16,320 --> 00:32:18,480
DCS controllers these controllers speak

806
00:32:18,480 --> 00:32:20,880
a variety of unauthenticated proprietary

807
00:32:20,880 --> 00:32:23,880
protocols which are spoken between the

808
00:32:23,880 --> 00:32:25,679
controllers and between workstations and

809
00:32:25,679 --> 00:32:27,659
servers and the controllers and they

810
00:32:27,659 --> 00:32:29,279
allow for various things starting and

811
00:32:29,279 --> 00:32:30,659
stopping the controller firmware

812
00:32:30,659 --> 00:32:33,360
manipulation configuration changes and

813
00:32:33,360 --> 00:32:34,260
so on

814
00:32:34,260 --> 00:32:37,799
in addition prior to version 14.3

815
00:32:37,799 --> 00:32:40,620
controller firm words are unsigned and

816
00:32:40,620 --> 00:32:44,220
only use CRC now Emerson considered this

817
00:32:44,220 --> 00:32:47,220
issue resolved in 14.3 because the

818
00:32:47,220 --> 00:32:49,620
update tool there now um that that

819
00:32:49,620 --> 00:32:51,299
resides on the engineering workstation

820
00:32:51,299 --> 00:32:53,700
that you can see on the top

821
00:32:53,700 --> 00:32:55,980
of the bottom right of the slide this

822
00:32:55,980 --> 00:32:58,320
update tool now validates the RSA

823
00:32:58,320 --> 00:33:00,059
signature that is present in the

824
00:33:00,059 --> 00:33:02,460
firmware manifest file before flashing

825
00:33:02,460 --> 00:33:04,320
the firmware to the controller

826
00:33:04,320 --> 00:33:06,840
but this really only protects the

827
00:33:06,840 --> 00:33:08,880
firmware as it travels from the vendor

828
00:33:08,880 --> 00:33:10,500
to the engineering workstation it

829
00:33:10,500 --> 00:33:12,840
doesn't protect against any attacker

830
00:33:12,840 --> 00:33:15,539
that directly talks to these controllers

831
00:33:15,539 --> 00:33:17,340
that just bypasses the engineering

832
00:33:17,340 --> 00:33:19,500
workstation and manages to directly

833
00:33:19,500 --> 00:33:21,559
speak these protocols to this controller

834
00:33:21,559 --> 00:33:24,539
it also doesn't protect against a

835
00:33:24,539 --> 00:33:26,100
compromised engineering workstation

836
00:33:26,100 --> 00:33:29,039
which you know is a prime Crown Jewel

837
00:33:29,039 --> 00:33:32,340
Target in OT environments and even

838
00:33:32,340 --> 00:33:34,860
though if you compromise in AWS you can

839
00:33:34,860 --> 00:33:37,620
already do a lot you'd still not want

840
00:33:37,620 --> 00:33:39,960
immediately that an attacker is able to

841
00:33:39,960 --> 00:33:42,299
have the most low level type of access

842
00:33:42,299 --> 00:33:44,580
to this controllers you want that extra

843
00:33:44,580 --> 00:33:46,500
barrier that is enforced by the

844
00:33:46,500 --> 00:33:48,120
controller itself there

845
00:33:48,120 --> 00:33:49,380
now

846
00:33:49,380 --> 00:33:51,720
Emerson considers this issue further

847
00:33:51,720 --> 00:33:53,820
mitigated because in the Delta V

848
00:33:53,820 --> 00:33:56,279
reference architecture which is shown on

849
00:33:56,279 --> 00:33:58,380
the bottom right of the slide the

850
00:33:58,380 --> 00:33:59,700
controller is in the area control

851
00:33:59,700 --> 00:34:02,580
Network portion are segmented from the

852
00:34:02,580 --> 00:34:05,820
workstations and the servers by using

853
00:34:05,820 --> 00:34:08,820
the firewall ipd component that is part

854
00:34:08,820 --> 00:34:11,639
of of the Delta V solution since

855
00:34:11,639 --> 00:34:14,580
controllers can be software locked that

856
00:34:14,580 --> 00:34:16,139
means that you know you put them in a

857
00:34:16,139 --> 00:34:17,820
software lock State and then certain

858
00:34:17,820 --> 00:34:19,560
engineering operations can take place

859
00:34:19,560 --> 00:34:23,040
anymore you need to unlock them by

860
00:34:23,040 --> 00:34:25,619
sending an unlock message over one of

861
00:34:25,619 --> 00:34:27,839
these protocols and essentially with the

862
00:34:27,839 --> 00:34:30,418
firewall ipd does is it drops this

863
00:34:30,418 --> 00:34:33,239
message so it doesn't go from you know

864
00:34:33,239 --> 00:34:35,219
the the workstations or servers to the

865
00:34:35,219 --> 00:34:37,679
controllers unless a physical override

866
00:34:37,679 --> 00:34:40,440
is initiated on the firewall epd or the

867
00:34:40,440 --> 00:34:43,139
controllers themselves so technically a

868
00:34:43,139 --> 00:34:45,899
good measure to reduce risk they are in

869
00:34:45,899 --> 00:34:48,899
a certain manner however an attacker can

870
00:34:48,899 --> 00:34:51,000
still wait until a legitimate

871
00:34:51,000 --> 00:34:53,159
engineering window where these messages

872
00:34:53,159 --> 00:34:55,859
are no longer dropped by the firewall in

873
00:34:55,859 --> 00:34:58,140
order to send one of these messages and

874
00:34:58,140 --> 00:34:59,640
then perform their engineering actions

875
00:34:59,640 --> 00:35:00,780
otherwise

876
00:35:00,780 --> 00:35:03,420
and attacker can also just compromise

877
00:35:03,420 --> 00:35:05,700
the ews and wait until legitimate

878
00:35:05,700 --> 00:35:07,680
engineering window and and push the

879
00:35:07,680 --> 00:35:09,359
malicious firmware that way because the

880
00:35:09,359 --> 00:35:12,060
validation only happens on the ews

881
00:35:12,060 --> 00:35:13,200
itself

882
00:35:13,200 --> 00:35:16,800
so the problem here is that while the

883
00:35:16,800 --> 00:35:19,560
risk is somewhat mitigated it there's

884
00:35:19,560 --> 00:35:22,260
still residual risk left and if you do

885
00:35:22,260 --> 00:35:24,839
not explicitly address this if you do

886
00:35:24,839 --> 00:35:26,880
not explicitly mention this is the

887
00:35:26,880 --> 00:35:28,800
residual risk that is left and these are

888
00:35:28,800 --> 00:35:30,240
the attacker scenarios that are still

889
00:35:30,240 --> 00:35:32,599
possible that people might blindly

890
00:35:32,599 --> 00:35:35,400
accept something that they're not

891
00:35:35,400 --> 00:35:38,780
actually willing to accept

892
00:35:39,420 --> 00:35:41,940
so a second point that requires some

893
00:35:41,940 --> 00:35:44,640
Nuance here our vulnerabilities related

894
00:35:44,640 --> 00:35:48,240
to unsigned PLC logic now generally

895
00:35:48,240 --> 00:35:50,400
speaking as shown on the bottom of the

896
00:35:50,400 --> 00:35:52,800
slide the logic which you use to program

897
00:35:52,800 --> 00:35:55,619
a PLC is typically combined compiled to

898
00:35:55,619 --> 00:35:58,400
either native machine code

899
00:35:58,400 --> 00:36:01,079
or to some sort of a proprietary

900
00:36:01,079 --> 00:36:03,480
bytecode or scripting language this is

901
00:36:03,480 --> 00:36:05,880
the transfer to the PLC where there is a

902
00:36:05,880 --> 00:36:08,099
logic runtime that executes it either

903
00:36:08,099 --> 00:36:10,680
directly through a code loader or it

904
00:36:10,680 --> 00:36:12,839
runs it on a VM or a script interpreter

905
00:36:12,839 --> 00:36:15,480
or maybe it dispatches it to a dedicated

906
00:36:15,480 --> 00:36:17,760
logic code processor which can be a

907
00:36:17,760 --> 00:36:20,160
microcontroller or an Asic or an fpga or

908
00:36:20,160 --> 00:36:22,020
something in that direction

909
00:36:22,020 --> 00:36:24,660
in the controllers that we looked at the

910
00:36:24,660 --> 00:36:27,240
vast majority executes their logic as

911
00:36:27,240 --> 00:36:29,940
native machine gun none of them signed

912
00:36:29,940 --> 00:36:32,099
this logic so there's there's maybe some

913
00:36:32,099 --> 00:36:33,780
sort of authentication on the

914
00:36:33,780 --> 00:36:35,760
engineering interface but there's no

915
00:36:35,760 --> 00:36:38,280
signing of the logic and only a handful

916
00:36:38,280 --> 00:36:40,859
apply some sort of sandboxing to this

917
00:36:40,859 --> 00:36:43,500
native machine code that gets executed

918
00:36:43,500 --> 00:36:46,140
this is particularly dangerous because

919
00:36:46,140 --> 00:36:49,619
most plcs have a real-time operating

920
00:36:49,619 --> 00:36:52,500
system that does not have support for

921
00:36:52,500 --> 00:36:55,680
memory uh or privileged segmentation

922
00:36:55,680 --> 00:36:58,320
and they also do not have in many cases

923
00:36:58,320 --> 00:37:01,800
the hardware or the software to instruct

924
00:37:01,800 --> 00:37:03,839
the hardware to do these things

925
00:37:03,839 --> 00:37:06,599
um to use an mpu or an mmu to enforce

926
00:37:06,599 --> 00:37:08,700
segmentation between different tasks or

927
00:37:08,700 --> 00:37:10,740
between different compartments on the

928
00:37:10,740 --> 00:37:13,859
PLC so once you get code execution it's

929
00:37:13,859 --> 00:37:15,900
very quickly game over in terms of what

930
00:37:15,900 --> 00:37:19,140
you can do internally on a PLC there

931
00:37:19,140 --> 00:37:23,040
and it matters that that this is

932
00:37:23,040 --> 00:37:25,320
different from plc's with a different

933
00:37:25,320 --> 00:37:28,560
architecture because if all I can do is

934
00:37:28,560 --> 00:37:31,619
run unauthenticated uh unsigned logic

935
00:37:31,619 --> 00:37:34,440
but I'm restricted to you know a

936
00:37:34,440 --> 00:37:36,720
bytecode interpreter I will first have

937
00:37:36,720 --> 00:37:38,640
to break out of this virtual machine and

938
00:37:38,640 --> 00:37:40,440
that's an extra hurdle that has to be

939
00:37:40,440 --> 00:37:43,800
taken there so the impact of different

940
00:37:43,800 --> 00:37:46,200
and sign logic downloads is not always

941
00:37:46,200 --> 00:37:48,480
the same obviously

942
00:37:48,480 --> 00:37:50,579
an example of this

943
00:37:50,579 --> 00:37:52,140
um that we encountered in the research

944
00:37:52,140 --> 00:37:54,780
is the Omron sismac family uh they have

945
00:37:54,780 --> 00:37:56,940
the older C family which consists of

946
00:37:56,940 --> 00:38:01,079
cscg and CP controllers and here the

947
00:38:01,079 --> 00:38:03,060
logic is compiled to a proprietary

948
00:38:03,060 --> 00:38:05,220
bytecode which is executed by a

949
00:38:05,220 --> 00:38:07,320
dedicated Asic as you can see in the

950
00:38:07,320 --> 00:38:10,260
middle of the slide on the newer M

951
00:38:10,260 --> 00:38:12,960
families however for reasons of of

952
00:38:12,960 --> 00:38:15,800
economy and reasons of modifiability

953
00:38:15,800 --> 00:38:19,200
logic is now like a most modern PLC is

954
00:38:19,200 --> 00:38:22,560
compiled to an unsigned x86 machine code

955
00:38:22,560 --> 00:38:23,640
format

956
00:38:23,640 --> 00:38:26,220
and this means that even if in both

957
00:38:26,220 --> 00:38:28,800
cases the logic that gets downloaded is

958
00:38:28,800 --> 00:38:31,260
unsigned you have a little bit of a

959
00:38:31,260 --> 00:38:33,660
difference in impact and actually the

960
00:38:33,660 --> 00:38:37,020
older C families has a lesser impact

961
00:38:37,020 --> 00:38:38,520
here because you're constrained to

962
00:38:38,520 --> 00:38:41,400
whatever the byte code on the Asic can

963
00:38:41,400 --> 00:38:43,500
do which is very different than being

964
00:38:43,500 --> 00:38:46,320
able to execute unconstrained low-level

965
00:38:46,320 --> 00:38:49,079
machine code on the newer end Series

966
00:38:49,079 --> 00:38:51,780
this is like a kind of nuance that you

967
00:38:51,780 --> 00:38:53,760
can only really get a grip on if you

968
00:38:53,760 --> 00:38:55,320
know a little bit about the internals of

969
00:38:55,320 --> 00:38:57,480
these plcs

970
00:38:57,480 --> 00:38:59,460
another example of the difference in

971
00:38:59,460 --> 00:39:01,619
Impact is with the Honeywell safety

972
00:39:01,619 --> 00:39:04,680
manager says this is a sil3 safety

973
00:39:04,680 --> 00:39:06,300
controller used in various critical

974
00:39:06,300 --> 00:39:08,339
applications similar to the the

975
00:39:08,339 --> 00:39:10,500
Schneider tree connects and the

976
00:39:10,500 --> 00:39:11,880
engineering software which is called

977
00:39:11,880 --> 00:39:14,400
Safety station compiles safety

978
00:39:14,400 --> 00:39:16,260
instrumented functions which essentially

979
00:39:16,260 --> 00:39:20,220
are um safety loop diagrams to unsigned

980
00:39:20,220 --> 00:39:22,260
native machine code again and this is

981
00:39:22,260 --> 00:39:24,180
then wrapped in a project file format

982
00:39:24,180 --> 00:39:26,820
downloaded to the controller using again

983
00:39:26,820 --> 00:39:28,619
an unauthenticated protocol called

984
00:39:28,619 --> 00:39:31,260
Safety Builder after receiving this

985
00:39:31,260 --> 00:39:33,720
download the communication module sends

986
00:39:33,720 --> 00:39:36,119
it over the backplane to the CPU module

987
00:39:36,119 --> 00:39:39,119
which executes it directly on the CPU

988
00:39:39,119 --> 00:39:41,460
leading to unconstrained code execution

989
00:39:41,460 --> 00:39:44,359
in the heart of the safety controller

990
00:39:44,359 --> 00:39:46,680
interestingly however

991
00:39:46,680 --> 00:39:49,140
even though there are similar issues in

992
00:39:49,140 --> 00:39:51,420
in the newer s 300 family

993
00:39:51,420 --> 00:39:53,880
this doesn't apply because they are the

994
00:39:53,880 --> 00:39:55,800
sieve diagrams are compiled to a

995
00:39:55,800 --> 00:39:58,560
mnemonic bytecode and

996
00:39:58,560 --> 00:40:01,320
in inverse way to the Omron system here

997
00:40:01,320 --> 00:40:03,480
the newer family uses a bytecode

998
00:40:03,480 --> 00:40:05,640
interpreter and as such has a lesser

999
00:40:05,640 --> 00:40:08,760
impact for any un uh unwanted malicious

1000
00:40:08,760 --> 00:40:11,099
logic downloads that would be on the

1001
00:40:11,099 --> 00:40:14,660
older safety manager families

1002
00:40:21,780 --> 00:40:24,180
finally there's some new ones to be made

1003
00:40:24,180 --> 00:40:26,940
regarding mode switches

1004
00:40:26,940 --> 00:40:29,099
these are very traditional defense in OT

1005
00:40:29,099 --> 00:40:31,640
against malicious configuration logic

1006
00:40:31,640 --> 00:40:34,320
downloads firmware updates and so on

1007
00:40:34,320 --> 00:40:36,540
they essentially consist of a physical

1008
00:40:36,540 --> 00:40:39,180
switch on the controller which regulates

1009
00:40:39,180 --> 00:40:41,520
the PLC mode of operation

1010
00:40:41,520 --> 00:40:44,460
and this essentially enforces that

1011
00:40:44,460 --> 00:40:46,440
before you can do certain engineering

1012
00:40:46,440 --> 00:40:48,660
operations you need someone with

1013
00:40:48,660 --> 00:40:50,160
physical presence rather than an

1014
00:40:50,160 --> 00:40:52,320
attacker who only has logical access to

1015
00:40:52,320 --> 00:40:53,240
the network

1016
00:40:53,240 --> 00:40:55,859
and you have these different modes which

1017
00:40:55,859 --> 00:40:57,540
can be run mode where the logic is

1018
00:40:57,540 --> 00:40:59,280
operational and executing but you cannot

1019
00:40:59,280 --> 00:41:01,920
do a certain engineering operations or

1020
00:41:01,920 --> 00:41:03,660
you have program mode where maybe the

1021
00:41:03,660 --> 00:41:05,160
logic is not running but you can do

1022
00:41:05,160 --> 00:41:07,440
these engineering operations sometimes

1023
00:41:07,440 --> 00:41:09,540
you have a remote mode where you can do

1024
00:41:09,540 --> 00:41:10,320
both

1025
00:41:10,320 --> 00:41:12,660
and this mode switches come in various

1026
00:41:12,660 --> 00:41:13,859
forms Sometimes they come with a

1027
00:41:13,859 --> 00:41:16,140
physical key as you can see on on the

1028
00:41:16,140 --> 00:41:17,760
left with the famous triconics key

1029
00:41:17,760 --> 00:41:20,280
switch uh sometimes it's just a toggle

1030
00:41:20,280 --> 00:41:21,660
Button as you can see on some of the

1031
00:41:21,660 --> 00:41:23,359
Schneider Electric motorcorn families

1032
00:41:23,359 --> 00:41:26,940
now what's important here is that not

1033
00:41:26,940 --> 00:41:28,859
all mode switches offer the kind of

1034
00:41:28,859 --> 00:41:30,480
protection that you're looking for here

1035
00:41:30,480 --> 00:41:33,720
there's several pitfalls first of all

1036
00:41:33,720 --> 00:41:36,300
you want a distinct run and program mode

1037
00:41:36,300 --> 00:41:38,820
this needs to be mutually exclusive so

1038
00:41:38,820 --> 00:41:40,619
if you're running the logic you should

1039
00:41:40,619 --> 00:41:43,140
not be able to do the engineering and if

1040
00:41:43,140 --> 00:41:44,940
you are able to do the engineering the

1041
00:41:44,940 --> 00:41:46,740
logic should not be running

1042
00:41:46,740 --> 00:41:49,320
that's also why you want to avoid a

1043
00:41:49,320 --> 00:41:51,900
remote mode because it's very seductive

1044
00:41:51,900 --> 00:41:53,820
to an engineer to just leave it

1045
00:41:53,820 --> 00:41:56,760
permanently in remote mode where you can

1046
00:41:56,760 --> 00:41:58,200
do the engineering and it's running

1047
00:41:58,200 --> 00:42:00,119
while if you have mutually exclusive

1048
00:42:00,119 --> 00:42:03,260
modes you force the engineer you either

1049
00:42:03,260 --> 00:42:06,180
do the maintenance and the engineering

1050
00:42:06,180 --> 00:42:08,099
or you have it running and once you're

1051
00:42:08,099 --> 00:42:09,480
done engineering if you want to get it

1052
00:42:09,480 --> 00:42:10,980
up running again you put it in run mode

1053
00:42:10,980 --> 00:42:13,380
and that way it's not up to the

1054
00:42:13,380 --> 00:42:16,320
engineer's own discipline to um to

1055
00:42:16,320 --> 00:42:19,280
enforce this mode switch state

1056
00:42:19,280 --> 00:42:23,099
we looked at the support for these types

1057
00:42:23,099 --> 00:42:24,839
of switches and you can see on the right

1058
00:42:24,839 --> 00:42:27,420
of the slide that the vast majority of

1059
00:42:27,420 --> 00:42:29,460
the products we look at do not have this

1060
00:42:29,460 --> 00:42:31,560
strict mutually exclusive separation

1061
00:42:31,560 --> 00:42:33,660
between these modes of operation only 17

1062
00:42:33,660 --> 00:42:35,940
actually had this kind of hard

1063
00:42:35,940 --> 00:42:37,380
distinction

1064
00:42:37,380 --> 00:42:40,560
secondly you want to avoid having a

1065
00:42:40,560 --> 00:42:42,780
virtual switch setting in the soft

1066
00:42:42,780 --> 00:42:45,119
engineering software where sometimes you

1067
00:42:45,119 --> 00:42:47,339
have a physical mode switch but in the

1068
00:42:47,339 --> 00:42:49,440
engineering software you can override it

1069
00:42:49,440 --> 00:42:51,240
you can just take engineering actions

1070
00:42:51,240 --> 00:42:53,339
you can say go to run mode go to program

1071
00:42:53,339 --> 00:42:55,380
mode and that overrides whatever is

1072
00:42:55,380 --> 00:42:58,260
happening in the mode switch on the PLC

1073
00:42:58,260 --> 00:42:59,940
you don't want any functionality like

1074
00:42:59,940 --> 00:43:00,900
that

1075
00:43:00,900 --> 00:43:03,720
third you should be aware of exception

1076
00:43:03,720 --> 00:43:06,000
modes which configure the PLC to ignore

1077
00:43:06,000 --> 00:43:07,319
the switch settings

1078
00:43:07,319 --> 00:43:10,260
and finally some plcs are not configured

1079
00:43:10,260 --> 00:43:12,420
to require these these the switch Jacks

1080
00:43:12,420 --> 00:43:14,040
prior to engineering operations by

1081
00:43:14,040 --> 00:43:16,260
default you need to explicitly enable

1082
00:43:16,260 --> 00:43:20,160
that so be aware of that as well

1083
00:43:20,160 --> 00:43:22,319
an example of this is the Emerson

1084
00:43:22,319 --> 00:43:24,599
control wave PLC that we talked about a

1085
00:43:24,599 --> 00:43:27,180
little bit earlier firmware updates here

1086
00:43:27,180 --> 00:43:29,460
are again unsigned and this is

1087
00:43:29,460 --> 00:43:31,740
especially troubling given that they

1088
00:43:31,740 --> 00:43:34,440
happen over this bsap IP protocol we

1089
00:43:34,440 --> 00:43:36,420
talked about with all its authentication

1090
00:43:36,420 --> 00:43:37,680
issues

1091
00:43:37,680 --> 00:43:40,020
again unfortunately Emerson didn't

1092
00:43:40,020 --> 00:43:41,640
consider it as a vulnerability either

1093
00:43:41,640 --> 00:43:44,160
because they said there is a key switch

1094
00:43:44,160 --> 00:43:46,200
they can be set to run mode there's a

1095
00:43:46,200 --> 00:43:48,480
configuration setting which can be set

1096
00:43:48,480 --> 00:43:50,880
to disable any remote changes

1097
00:43:50,880 --> 00:43:53,520
the problem is that this key switch also

1098
00:43:53,520 --> 00:43:55,800
has a remote mode

1099
00:43:55,800 --> 00:43:59,220
um and that essentially means that this

1100
00:43:59,220 --> 00:44:01,740
barrier of Defense puts all the owners

1101
00:44:01,740 --> 00:44:04,740
on risk control on the discipline of the

1102
00:44:04,740 --> 00:44:08,460
engineers because if they screw up there

1103
00:44:08,460 --> 00:44:10,680
and they leave it in remote mode you

1104
00:44:10,680 --> 00:44:12,300
don't have proper authentication to

1105
00:44:12,300 --> 00:44:14,400
prevent the downloads you don't have

1106
00:44:14,400 --> 00:44:17,040
firmware signing to prevent malicious

1107
00:44:17,040 --> 00:44:19,920
firmware and then you know it's left to

1108
00:44:19,920 --> 00:44:21,780
the the individual discipline of the

1109
00:44:21,780 --> 00:44:24,119
engineer there which puts a lot of risk

1110
00:44:24,119 --> 00:44:27,300
on on potential human failure the other

1111
00:44:27,300 --> 00:44:29,819
option that they have is the application

1112
00:44:29,819 --> 00:44:32,339
lock setting the problem there is that

1113
00:44:32,339 --> 00:44:34,200
it is not set by default so you need to

1114
00:44:34,200 --> 00:44:36,060
dig into the manual and you need to set

1115
00:44:36,060 --> 00:44:37,920
this setting during commissioning and

1116
00:44:37,920 --> 00:44:39,839
that essentially disables all remote

1117
00:44:39,839 --> 00:44:41,880
engineering so that that makes the

1118
00:44:41,880 --> 00:44:43,619
decision like look we we don't just

1119
00:44:43,619 --> 00:44:45,660
don't do remote engineering on this

1120
00:44:45,660 --> 00:44:48,060
particular PLC which is sacrificing a

1121
00:44:48,060 --> 00:44:52,819
lot of of engineering uh effort there

1122
00:44:53,400 --> 00:44:55,980
a final example of why there's a lot of

1123
00:44:55,980 --> 00:44:58,500
ifs and butts to mode switches is the

1124
00:44:58,500 --> 00:45:01,140
Honeywell safety manager we just saw

1125
00:45:01,140 --> 00:45:03,420
that logic downloads there unsigned and

1126
00:45:03,420 --> 00:45:05,520
authenticated and they can give an

1127
00:45:05,520 --> 00:45:07,980
attacker remote code execution on on the

1128
00:45:07,980 --> 00:45:09,540
safety

1129
00:45:09,540 --> 00:45:13,260
manage your CPU module luckily there's

1130
00:45:13,260 --> 00:45:15,359
quite a few key switches involved here

1131
00:45:15,359 --> 00:45:17,280
the safety manager is an example of a

1132
00:45:17,280 --> 00:45:19,380
very good mode switch design where

1133
00:45:19,380 --> 00:45:21,420
there's Mutual exclusive run and idle

1134
00:45:21,420 --> 00:45:24,420
modes before downloading the logic or

1135
00:45:24,420 --> 00:45:26,640
firmware the switch must be set to idle

1136
00:45:26,640 --> 00:45:28,500
then after the downloading you need to

1137
00:45:28,500 --> 00:45:30,359
trigger a fault reset which means

1138
00:45:30,359 --> 00:45:32,280
turning another key switch on the body

1139
00:45:32,280 --> 00:45:34,319
and key module

1140
00:45:34,319 --> 00:45:37,140
except however when there is a setting

1141
00:45:37,140 --> 00:45:39,119
enabled that is called remote load or

1142
00:45:39,119 --> 00:45:42,000
remote reset and enabling these features

1143
00:45:42,000 --> 00:45:44,160
needs a one-time physical key turn

1144
00:45:44,160 --> 00:45:45,319
during

1145
00:45:45,319 --> 00:45:47,280
initialization and commissioning and

1146
00:45:47,280 --> 00:45:49,440
stuff like that but if this has been

1147
00:45:49,440 --> 00:45:52,380
enabled for historical reasons and you

1148
00:45:52,380 --> 00:45:55,020
have not documented this in your isms

1149
00:45:55,020 --> 00:45:57,359
this might be a major blind spot because

1150
00:45:57,359 --> 00:45:59,339
you you might have enabled this at some

1151
00:45:59,339 --> 00:46:01,200
point for remote engineering purposes

1152
00:46:01,200 --> 00:46:03,480
that you know where physical presence

1153
00:46:03,480 --> 00:46:06,000
was cumbersome or impossible for some

1154
00:46:06,000 --> 00:46:07,800
reason you haven't documented it in your

1155
00:46:07,800 --> 00:46:10,200
isms maybe you have it somewhere in some

1156
00:46:10,200 --> 00:46:13,020
engineering documents but then when you

1157
00:46:13,020 --> 00:46:15,060
started you know making you doing your

1158
00:46:15,060 --> 00:46:16,680
risk management over these particular

1159
00:46:16,680 --> 00:46:19,440
systems you assumed you know we're

1160
00:46:19,440 --> 00:46:20,700
protected because we got the key

1161
00:46:20,700 --> 00:46:23,460
switches even though you know you don't

1162
00:46:23,460 --> 00:46:25,619
have the overview of whether or not this

1163
00:46:25,619 --> 00:46:27,720
feature was enabled so this is one of

1164
00:46:27,720 --> 00:46:29,220
these nuances where you need to know

1165
00:46:29,220 --> 00:46:30,780
quite a lot about the individual system

1166
00:46:30,780 --> 00:46:33,780
you cannot just rely on is there a key

1167
00:46:33,780 --> 00:46:35,940
switch and are we using this key switch

1168
00:46:35,940 --> 00:46:39,680
in the proper fashion

1169
00:46:39,720 --> 00:46:42,300
so with that in mind let's take a quick

1170
00:46:42,300 --> 00:46:44,220
look at some of the reverse engineering

1171
00:46:44,220 --> 00:46:46,560
effort that went into understanding many

1172
00:46:46,560 --> 00:46:48,660
of the proprietary protocols and systems

1173
00:46:48,660 --> 00:46:50,099
that we analyzed as part of this

1174
00:46:50,099 --> 00:46:52,500
research so we can get a little bit of a

1175
00:46:52,500 --> 00:46:54,540
feeling for the attacker effort required

1176
00:46:54,540 --> 00:46:58,020
to replicate some of these capabilities

1177
00:46:58,020 --> 00:47:01,380
now in terms of the scada DCS and

1178
00:47:01,380 --> 00:47:03,599
Engineering software these were mostly

1179
00:47:03,599 --> 00:47:05,640
Windows software packages that were

1180
00:47:05,640 --> 00:47:08,640
typically very large multiple gigabytes

1181
00:47:08,640 --> 00:47:12,599
of code hundreds of dlls and a lot of

1182
00:47:12,599 --> 00:47:15,300
complicated features like MFC codeatl

1183
00:47:15,300 --> 00:47:17,520
code com inter-process communication

1184
00:47:17,520 --> 00:47:19,079
stuff like that

1185
00:47:19,079 --> 00:47:22,339
uh the vast majority of code for both

1186
00:47:22,339 --> 00:47:24,660
windows software and firmware was

1187
00:47:24,660 --> 00:47:26,460
written in C plus plus which always

1188
00:47:26,460 --> 00:47:28,280
makes reversing a bit more cumbersome

1189
00:47:28,280 --> 00:47:31,859
and while the embedded devices typically

1190
00:47:31,859 --> 00:47:34,980
resemble non-consumer devices a lot of

1191
00:47:34,980 --> 00:47:38,579
arm and power PC combined with VX works

1192
00:47:38,579 --> 00:47:41,640
and qnx for example there were quite a

1193
00:47:41,640 --> 00:47:44,460
few Regional outliers

1194
00:47:44,460 --> 00:47:46,560
um like for example you saw it in a lot

1195
00:47:46,560 --> 00:47:49,020
of like the Asian systems you see

1196
00:47:49,020 --> 00:47:51,900
operating systems like os9 or itron with

1197
00:47:51,900 --> 00:47:53,579
a lot of like Super H architecture

1198
00:47:53,579 --> 00:47:55,740
systems and that requires building some

1199
00:47:55,740 --> 00:47:58,260
Custom Tool chains there

1200
00:47:58,260 --> 00:48:00,660
all in all the systems we looked at

1201
00:48:00,660 --> 00:48:02,460
represent the selection of typical

1202
00:48:02,460 --> 00:48:05,040
non-trivial OT code bases to reverse

1203
00:48:05,040 --> 00:48:06,260
engineer

1204
00:48:06,260 --> 00:48:08,700
regardless we found that reverse

1205
00:48:08,700 --> 00:48:10,319
engineering a single proprietary

1206
00:48:10,319 --> 00:48:12,300
protocol typically took between a day

1207
00:48:12,300 --> 00:48:14,700
and two weeks of reverse engineering

1208
00:48:14,700 --> 00:48:17,400
effort while a complex multi-protocol

1209
00:48:17,400 --> 00:48:19,859
system could take up to six months of

1210
00:48:19,859 --> 00:48:21,660
reverse engineering effort to truly

1211
00:48:21,660 --> 00:48:24,000
understand what is all going on in these

1212
00:48:24,000 --> 00:48:26,339
protocols and in these firmers and these

1213
00:48:26,339 --> 00:48:28,380
parts of the different software

1214
00:48:28,380 --> 00:48:31,200
components while this is obviously quite

1215
00:48:31,200 --> 00:48:33,420
a bit of effort and it requires certain

1216
00:48:33,420 --> 00:48:36,000
skills it is within the capabilities of

1217
00:48:36,000 --> 00:48:38,160
a fairly small team with the right

1218
00:48:38,160 --> 00:48:40,920
incentives rather than being the sole

1219
00:48:40,920 --> 00:48:42,780
domain of large organizations with

1220
00:48:42,780 --> 00:48:45,300
dozens of Highly skilled Engineers as is

1221
00:48:45,300 --> 00:48:47,099
sometimes the picture that is painted

1222
00:48:47,099 --> 00:48:48,540
for developing these kind of

1223
00:48:48,540 --> 00:48:51,119
capabilities

1224
00:48:51,119 --> 00:48:53,520
and that brings us to mitigations and

1225
00:48:53,520 --> 00:48:56,060
conclusions

1226
00:49:02,040 --> 00:49:05,040
so mitigating these issues is no trivial

1227
00:49:05,040 --> 00:49:07,260
task and will require a multi-pronged

1228
00:49:07,260 --> 00:49:09,839
effort starting with ensuring that you

1229
00:49:09,839 --> 00:49:12,180
have good asset inventories you do

1230
00:49:12,180 --> 00:49:13,940
monitoring with DPI capabilities

1231
00:49:13,940 --> 00:49:16,680
secondly you should enforce segmentation

1232
00:49:16,680 --> 00:49:19,859
controls in the network informed by good

1233
00:49:19,859 --> 00:49:22,200
protocol knowledge rather than just

1234
00:49:22,200 --> 00:49:25,200
white lists of ports you should use

1235
00:49:25,200 --> 00:49:27,480
native hardening capabilities like these

1236
00:49:27,480 --> 00:49:29,660
mode switches on the plcs and consult

1237
00:49:29,660 --> 00:49:33,180
SME expertise on these specific devices

1238
00:49:33,180 --> 00:49:35,280
what the particular risks are and how it

1239
00:49:35,280 --> 00:49:37,200
actually works under the hood and

1240
00:49:37,200 --> 00:49:38,880
finally asset owners should actively

1241
00:49:38,880 --> 00:49:41,099
procure for secure by Design products

1242
00:49:41,099 --> 00:49:42,660
while working towards consequence

1243
00:49:42,660 --> 00:49:45,780
reduction with via cyber PHA and CCE

1244
00:49:45,780 --> 00:49:48,060
methodologies

1245
00:49:48,060 --> 00:49:50,819
in conclusion we've seen that insecure

1246
00:49:50,819 --> 00:49:53,040
by Design issues continue to persist in

1247
00:49:53,040 --> 00:49:56,280
production install basis despite more

1248
00:49:56,280 --> 00:49:58,260
than a decade of harning efforts

1249
00:49:58,260 --> 00:50:00,240
and in order to address this we will

1250
00:50:00,240 --> 00:50:02,520
also need to get a clearer picture of

1251
00:50:02,520 --> 00:50:05,160
what's secure by Design actually means

1252
00:50:05,160 --> 00:50:08,640
since one many security controls that

1253
00:50:08,640 --> 00:50:12,780
are have been added to be fair do turn

1254
00:50:12,780 --> 00:50:15,060
out to be trivially broken across the

1255
00:50:15,060 --> 00:50:17,280
board not with money any individual

1256
00:50:17,280 --> 00:50:20,119
vendor it's it's mostly across the board

1257
00:50:20,119 --> 00:50:22,619
products with these broker controls

1258
00:50:22,619 --> 00:50:24,480
continue to be certified at some level

1259
00:50:24,480 --> 00:50:26,520
and in many cases glaring

1260
00:50:26,520 --> 00:50:28,740
vulnerabilities are sometimes still

1261
00:50:28,740 --> 00:50:31,140
dismissed because there's some advice

1262
00:50:31,140 --> 00:50:34,020
pointing to compensating controls even

1263
00:50:34,020 --> 00:50:36,119
if the risk is not actually fully

1264
00:50:36,119 --> 00:50:37,760
controlled for and there's still some

1265
00:50:37,760 --> 00:50:40,980
unmentioned residual risk present there

1266
00:50:40,980 --> 00:50:43,700
we also see quite a few Security

1267
00:50:43,700 --> 00:50:46,380
retrofits on top of Legacy stuff that

1268
00:50:46,380 --> 00:50:48,780
misses the point like doing IP based

1269
00:50:48,780 --> 00:50:52,380
ACLS on top of UDP protocols

1270
00:50:52,380 --> 00:50:54,900
um fixes frequently don't actually

1271
00:50:54,900 --> 00:50:57,420
address the root cause and when they do

1272
00:50:57,420 --> 00:50:59,640
and how something is fixed identical

1273
00:50:59,640 --> 00:51:01,740
vulnerabilities in the same code basis

1274
00:51:01,740 --> 00:51:04,740
aren't picked up uh because of a lack of

1275
00:51:04,740 --> 00:51:07,020
variant hunting which suggests immature

1276
00:51:07,020 --> 00:51:09,839
secure development life cycles and

1277
00:51:09,839 --> 00:51:13,020
finally devices should be secure by

1278
00:51:13,020 --> 00:51:15,240
default rather than giving the system

1279
00:51:15,240 --> 00:51:17,700
integrator enough rope to hang

1280
00:51:17,700 --> 00:51:19,819
themselves with through complicated

1281
00:51:19,819 --> 00:51:22,319
commissioning and and initialization

1282
00:51:22,319 --> 00:51:25,619
procedures so I'd like to close out with

1283
00:51:25,619 --> 00:51:27,960
a common call to action and that's been

1284
00:51:27,960 --> 00:51:30,720
made a million times before but weren't

1285
00:51:30,720 --> 00:51:32,520
repeating nonetheless

1286
00:51:32,520 --> 00:51:34,859
to device manufacturers they should

1287
00:51:34,859 --> 00:51:36,720
really start properly securing OG

1288
00:51:36,720 --> 00:51:38,640
devices and protocols

1289
00:51:38,640 --> 00:51:41,040
asset owners should actively procure for

1290
00:51:41,040 --> 00:51:42,900
secure products and hold manufacturers

1291
00:51:42,900 --> 00:51:45,180
to higher standards than even they have

1292
00:51:45,180 --> 00:51:47,099
been doing through the standards driven

1293
00:51:47,099 --> 00:51:50,040
efforts The Wider security communities

1294
00:51:50,040 --> 00:51:51,900
should continue to ensure that security

1295
00:51:51,900 --> 00:51:54,599
controls the pop-up in OG products are

1296
00:51:54,599 --> 00:51:56,579
actually robust and not just some form

1297
00:51:56,579 --> 00:51:58,920
of potemkin security

1298
00:51:58,920 --> 00:52:01,260
and that's that thank you for listening

1299
00:52:01,260 --> 00:52:03,420
and if there's any questions I'll take

1300
00:52:03,420 --> 00:52:05,839
them now

1301
00:52:06,660 --> 00:52:09,839
but thank you so uh yours is actually

1302
00:52:09,839 --> 00:52:12,119
available with us on Zoom so can I just

1303
00:52:12,119 --> 00:52:13,980
check can you hear us

1304
00:52:13,980 --> 00:52:16,380
hi I can hear you can you hear me oh yes

1305
00:52:16,380 --> 00:52:18,420
yes we can hear you fantastic so big

1306
00:52:18,420 --> 00:52:21,180
robot um five to ten minutes so let's uh

1307
00:52:21,180 --> 00:52:23,520
answer some questions so the first

1308
00:52:23,520 --> 00:52:26,400
question is uh is this culture of

1309
00:52:26,400 --> 00:52:29,660
insecure design in OT due to

1310
00:52:29,660 --> 00:52:31,740
interoperability and backwards

1311
00:52:31,740 --> 00:52:34,680
compatibility requirements or due to a

1312
00:52:34,680 --> 00:52:36,240
lack of business case for security

1313
00:52:36,240 --> 00:52:40,099
patching and redesigning secure systems

1314
00:52:40,099 --> 00:52:45,300
so I think in in a large uh factor is

1315
00:52:45,300 --> 00:52:47,280
that you know these systems they they

1316
00:52:47,280 --> 00:52:49,740
have initially been designed as insecure

1317
00:52:49,740 --> 00:52:52,440
by design for historical reasons and

1318
00:52:52,440 --> 00:52:55,559
then as as you asked uh many of these

1319
00:52:55,559 --> 00:52:57,180
systems need to maintain backwards

1320
00:52:57,180 --> 00:53:00,240
compatibility both to older components

1321
00:53:00,240 --> 00:53:02,160
um to other systems which they need some

1322
00:53:02,160 --> 00:53:04,559
integration capabilities with

1323
00:53:04,559 --> 00:53:06,240
um as well as the the inability to

1324
00:53:06,240 --> 00:53:08,640
change certain protocols so certain

1325
00:53:08,640 --> 00:53:11,640
insecure by design features continue to

1326
00:53:11,640 --> 00:53:14,520
persist even in newer systems

1327
00:53:14,520 --> 00:53:16,440
um and and might have some security

1328
00:53:16,440 --> 00:53:19,500
controls bolted on top but redesigning

1329
00:53:19,500 --> 00:53:21,059
um these these entire systems or even

1330
00:53:21,059 --> 00:53:23,220
components that are part of a larger

1331
00:53:23,220 --> 00:53:25,859
system without breaking compatibility is

1332
00:53:25,859 --> 00:53:28,740
is very hard to do so yeah this is this

1333
00:53:28,740 --> 00:53:30,900
is for a large part largely due to uh

1334
00:53:30,900 --> 00:53:33,300
backwards compatibility uh and Legacy

1335
00:53:33,300 --> 00:53:36,059
concerns rather than there being no

1336
00:53:36,059 --> 00:53:38,400
business case which increasingly there

1337
00:53:38,400 --> 00:53:41,460
is hmm I see I see all right uh before

1338
00:53:41,460 --> 00:53:43,200
we move on to the next question actually

1339
00:53:43,200 --> 00:53:45,599
may I know uh by raising who asked this

1340
00:53:45,599 --> 00:53:46,980
question

1341
00:53:46,980 --> 00:53:48,960
yeah so actually you got the top most

1342
00:53:48,960 --> 00:53:50,520
voted question so please proceed to the

1343
00:53:50,520 --> 00:53:52,740
back later to receive a small price all

1344
00:53:52,740 --> 00:53:55,020
right all right the next question

1345
00:53:55,020 --> 00:53:58,619
uh it seems that insecure by Design is

1346
00:53:58,619 --> 00:54:00,540
the default standard for most of the OT

1347
00:54:00,540 --> 00:54:03,480
industry and the manufacturer seems like

1348
00:54:03,480 --> 00:54:05,220
they do not really care about it at all

1349
00:54:05,220 --> 00:54:07,680
what would it take for it to actually

1350
00:54:07,680 --> 00:54:10,079
raise or move the security standards

1351
00:54:10,079 --> 00:54:11,960
higher

1352
00:54:11,960 --> 00:54:15,540
so I I think there's there's several

1353
00:54:15,540 --> 00:54:18,900
things that would make them move the

1354
00:54:18,900 --> 00:54:20,940
needle on on the security posture of

1355
00:54:20,940 --> 00:54:22,619
these systems

1356
00:54:22,619 --> 00:54:24,960
um but what we've seen is that while

1357
00:54:24,960 --> 00:54:27,440
standards driven efforts have helped

1358
00:54:27,440 --> 00:54:31,079
they in many cases have also helped to

1359
00:54:31,079 --> 00:54:32,819
kind of

1360
00:54:32,819 --> 00:54:34,980
um mystify the actual robustness of

1361
00:54:34,980 --> 00:54:37,140
these controls so what would really help

1362
00:54:37,140 --> 00:54:39,780
is more pressure from actually the

1363
00:54:39,780 --> 00:54:42,420
customer base from the asset owners

1364
00:54:42,420 --> 00:54:46,800
um that should demand that vendors offer

1365
00:54:46,800 --> 00:54:48,359
a higher level of security than they

1366
00:54:48,359 --> 00:54:50,339
have been offering and they could do

1367
00:54:50,339 --> 00:54:52,380
that by making something like secure

1368
00:54:52,380 --> 00:54:55,140
procurement to default so if you are

1369
00:54:55,140 --> 00:54:57,599
procuring for new equipment

1370
00:54:57,599 --> 00:54:59,460
um whether it's a Greenfield project a

1371
00:54:59,460 --> 00:55:02,839
Brownfield project whatever integrate a

1372
00:55:02,839 --> 00:55:07,380
security test or AAA penetration test or

1373
00:55:07,380 --> 00:55:09,839
or some sort of in-depth technical

1374
00:55:09,839 --> 00:55:12,000
investigation of the security controls

1375
00:55:12,000 --> 00:55:15,540
of this product into your RFP as part of

1376
00:55:15,540 --> 00:55:17,460
the the acquisition process that that

1377
00:55:17,460 --> 00:55:20,099
would definitely help uh driving up up

1378
00:55:20,099 --> 00:55:22,380
the pressure on on vendors Beyond just

1379
00:55:22,380 --> 00:55:25,079
checking boxes

1380
00:55:25,079 --> 00:55:28,020
all right uh last two questions very

1381
00:55:28,020 --> 00:55:31,020
quickly uh with Virtual Mode switches in

1382
00:55:31,020 --> 00:55:33,359
your experience are vendors aware of the

1383
00:55:33,359 --> 00:55:36,359
limitations as in inquiry assumed to be

1384
00:55:36,359 --> 00:55:39,119
physical and not virtual

1385
00:55:39,119 --> 00:55:41,940
so the vendors are are definitely aware

1386
00:55:41,940 --> 00:55:45,660
when a mode switch is is virtual

1387
00:55:45,660 --> 00:55:48,599
um the problem is that these are often

1388
00:55:48,599 --> 00:55:51,660
treated in in in the last few years

1389
00:55:51,660 --> 00:55:54,599
decade plus as a security measure while

1390
00:55:54,599 --> 00:55:56,760
they're not necessarily designed as such

1391
00:55:56,760 --> 00:56:00,480
they're designed as an an operational uh

1392
00:56:00,480 --> 00:56:02,819
safety measure essentially to to ensure

1393
00:56:02,819 --> 00:56:04,260
that while you're working on the device

1394
00:56:04,260 --> 00:56:06,900
it's it's not running or to ensure that

1395
00:56:06,900 --> 00:56:08,760
you can only do these modifications once

1396
00:56:08,760 --> 00:56:10,440
you have the proper work order and stuff

1397
00:56:10,440 --> 00:56:13,800
like that so from a purely operational

1398
00:56:13,800 --> 00:56:15,359
point of view with virtual switch is

1399
00:56:15,359 --> 00:56:16,980
good enough because like the engineer

1400
00:56:16,980 --> 00:56:19,200
goes over there he sets the PLC in

1401
00:56:19,200 --> 00:56:21,300
programming mode then does exchanges and

1402
00:56:21,300 --> 00:56:22,800
takes it out of programming mode again

1403
00:56:22,800 --> 00:56:25,079
but if you if you treat this as a

1404
00:56:25,079 --> 00:56:27,059
security measure where you want this to

1405
00:56:27,059 --> 00:56:28,680
be some sort of a hard lock you need to

1406
00:56:28,680 --> 00:56:30,180
be aware is this actually a physical

1407
00:56:30,180 --> 00:56:32,579
switch or not and the vendor will

1408
00:56:32,579 --> 00:56:34,380
definitely know this

1409
00:56:34,380 --> 00:56:35,940
um but this lack of knowledge is often

1410
00:56:35,940 --> 00:56:37,619
on part of the asset owners and The

1411
00:56:37,619 --> 00:56:39,540
Operators and the and the engine years

1412
00:56:39,540 --> 00:56:40,800
so

1413
00:56:40,800 --> 00:56:43,200
um yeah they they often don't completely

1414
00:56:43,200 --> 00:56:45,660
know how a product works under the hood

1415
00:56:45,660 --> 00:56:48,300
um and that that that kind of becomes a

1416
00:56:48,300 --> 00:56:50,160
problem when you start using these these

1417
00:56:50,160 --> 00:56:54,059
native features as as security measures

1418
00:56:54,059 --> 00:56:56,940
all right now the very last question uh

1419
00:56:56,940 --> 00:56:58,920
are the physical Keys themselves

1420
00:56:58,920 --> 00:57:01,700
considered of the security of the device

1421
00:57:01,700 --> 00:57:04,380
or is it just a proof of physical

1422
00:57:04,380 --> 00:57:07,079
presence how bad is it to always leave

1423
00:57:07,079 --> 00:57:09,480
leave the key in the machine

1424
00:57:09,480 --> 00:57:11,220
yeah that's that's a very good question

1425
00:57:11,220 --> 00:57:13,559
I I'd say that depends on your threat

1426
00:57:13,559 --> 00:57:16,980
model I'd say in general the the biggest

1427
00:57:16,980 --> 00:57:19,680
added benefit is

1428
00:57:19,680 --> 00:57:21,780
um a proof of physical presence which is

1429
00:57:21,780 --> 00:57:23,520
why in some systems it's just a button

1430
00:57:23,520 --> 00:57:26,460
and non-natural key the vast majority of

1431
00:57:26,460 --> 00:57:28,200
keys that you encounter that are used

1432
00:57:28,200 --> 00:57:30,119
for mode switches are not secure Keys

1433
00:57:30,119 --> 00:57:32,400
like you can just you know open them

1434
00:57:32,400 --> 00:57:34,200
with a paper clip it doesn't even take

1435
00:57:34,200 --> 00:57:37,020
lock picking skills so from a physical

1436
00:57:37,020 --> 00:57:39,480
security point of view where you're

1437
00:57:39,480 --> 00:57:42,059
trying to guard against you know someone

1438
00:57:42,059 --> 00:57:43,859
who might have physical access to the

1439
00:57:43,859 --> 00:57:46,380
plant it's not that much of a of a

1440
00:57:46,380 --> 00:57:48,300
security measure it's really to to

1441
00:57:48,300 --> 00:57:50,220
enforce approval physical presence

1442
00:57:50,220 --> 00:57:52,559
against an attacker who only has remote

1443
00:57:52,559 --> 00:57:55,819
logical network access

1444
00:57:55,920 --> 00:57:58,020
all right and though these are all the

1445
00:57:58,020 --> 00:57:59,460
questions that we have thank you very

1446
00:57:59,460 --> 00:58:01,380
much for your time use all the way from

1447
00:58:01,380 --> 00:58:03,480
the Netherlands right can we run off for

1448
00:58:03,480 --> 00:58:05,599
him

