1
00:00:14,390 --> 00:00:17,120
order to facilitate enterprise adoption

2
00:00:17,120 --> 00:00:19,270
and try to mitigate some of these risks

3
00:00:19,270 --> 00:00:21,440
security solutions have been developed

4
00:00:21,440 --> 00:00:24,080
such as secure containers which claim to

5
00:00:24,080 --> 00:00:27,140
provide enterprise-grade security for

6
00:00:27,140 --> 00:00:29,720
Android devices because of this there's

7
00:00:29,720 --> 00:00:31,939
an increasing need to be able to assess

8
00:00:31,939 --> 00:00:33,950
the security claims of such

9
00:00:33,950 --> 00:00:37,880
enterprise-class applications and their

10
00:00:37,880 --> 00:00:42,980
vendors you know during this talk we

11
00:00:42,980 --> 00:00:44,780
will walk you through many of the

12
00:00:44,780 --> 00:00:46,550
real-world threats and attack vectors

13
00:00:46,550 --> 00:00:48,829
those threats might use to try to obtain

14
00:00:48,829 --> 00:00:51,379
your data you know more or less we're

15
00:00:51,379 --> 00:00:53,840
now carrying very powerful portable

16
00:00:53,840 --> 00:00:56,600
devices which store extremely sensitive

17
00:00:56,600 --> 00:00:59,329
data these devices are almost always on

18
00:00:59,329 --> 00:01:01,519
and almost always connected they're not

19
00:01:01,519 --> 00:01:04,309
like laptops which you use and you shut

20
00:01:04,309 --> 00:01:07,520
down hopefully we're constantly using

21
00:01:07,520 --> 00:01:09,050
these devices they come with us

22
00:01:09,050 --> 00:01:11,510
everywhere after dinner of drinking on

23
00:01:11,510 --> 00:01:14,570
our trips personal and work even to the

24
00:01:14,570 --> 00:01:17,180
bathroom they also constantly have a

25
00:01:17,180 --> 00:01:19,520
stream of data flowing in and out over

26
00:01:19,520 --> 00:01:23,720
cell networks Wi-Fi bluetooth etc so

27
00:01:23,720 --> 00:01:26,360
many new pieces into this mix with all

28
00:01:26,360 --> 00:01:29,540
that in mind our data security models

29
00:01:29,540 --> 00:01:33,560
based off non-smartphone standard

30
00:01:33,560 --> 00:01:36,369
wireless phones really all that relevant

31
00:01:36,369 --> 00:01:39,290
you know also lots of marketing claims

32
00:01:39,290 --> 00:01:41,170
are being made you know what are they

33
00:01:41,170 --> 00:01:43,759
what do they mean how do they compare to

34
00:01:43,759 --> 00:01:48,350
threats and attack vectors you know in

35
00:01:48,350 --> 00:01:51,649
other words if your data is secured at

36
00:01:51,649 --> 00:01:54,380
rest but it's never at rest is it really

37
00:01:54,380 --> 00:01:57,079
that secure yeah finally we're going to

38
00:01:57,079 --> 00:01:59,240
explore a few techniques you can use to

39
00:01:59,240 --> 00:02:01,700
verify if you really are secure from the

40
00:02:01,700 --> 00:02:04,090
different threats and attack vectors

41
00:02:04,090 --> 00:02:06,850
before we go before going much further

42
00:02:06,850 --> 00:02:09,229
for those of you who don't have too much

43
00:02:09,229 --> 00:02:10,880
Android experience I wanted to go over

44
00:02:10,880 --> 00:02:13,190
some basics that will help you

45
00:02:13,190 --> 00:02:14,690
understand some of the more technical

46
00:02:14,690 --> 00:02:16,730
information we'll go over later in this

47
00:02:16,730 --> 00:02:19,730
talk android at its core is an

48
00:02:19,730 --> 00:02:22,879
amalgamation of linux and java with a

49
00:02:22,879 --> 00:02:25,220
little google magic sprinkled in you

50
00:02:25,220 --> 00:02:27,680
know as such some of the same techniques

51
00:02:27,680 --> 00:02:27,950
you

52
00:02:27,950 --> 00:02:29,690
is while auditing linux and java

53
00:02:29,690 --> 00:02:32,019
applications can be ported to android

54
00:02:32,019 --> 00:02:36,110
there were some modifications now

55
00:02:36,110 --> 00:02:38,000
android applications for the most part

56
00:02:38,000 --> 00:02:40,670
are written in java but run within it's

57
00:02:40,670 --> 00:02:42,920
called the dalvik virtual machine dalvik

58
00:02:42,920 --> 00:02:45,050
was designed to be able to run multiple

59
00:02:45,050 --> 00:02:47,330
applications and separate VMs

60
00:02:47,330 --> 00:02:49,370
concurrently but it still relies on the

61
00:02:49,370 --> 00:02:51,739
Linux kernel for low-level memory

62
00:02:51,739 --> 00:02:54,049
management and threading the side note

63
00:02:54,049 --> 00:02:56,780
android does also support running native

64
00:02:56,780 --> 00:02:59,450
code which usually is used in security

65
00:02:59,450 --> 00:03:01,420
or performance sensitive applications

66
00:03:01,420 --> 00:03:04,569
android also by design attempts to do

67
00:03:04,569 --> 00:03:07,579
application sandboxing such sandboxes

68
00:03:07,579 --> 00:03:10,120
are set up based on privilege separation

69
00:03:10,120 --> 00:03:12,739
each application runs with its own

70
00:03:12,739 --> 00:03:15,170
identity in other words user ID and

71
00:03:15,170 --> 00:03:17,840
group ID this was designed so

72
00:03:17,840 --> 00:03:20,269
applications by default don't have

73
00:03:20,269 --> 00:03:22,130
permissions to perform negative tasks

74
00:03:22,130 --> 00:03:24,019
that could affect other parts of the

75
00:03:24,019 --> 00:03:26,660
system these aren't all that differences

76
00:03:26,660 --> 00:03:28,160
but are some of the relevant ones to the

77
00:03:28,160 --> 00:03:33,590
stock enterprise-class applications yeah

78
00:03:33,590 --> 00:03:35,810
let's talk a little bit about Android in

79
00:03:35,810 --> 00:03:37,790
the enterprise androids currently

80
00:03:37,790 --> 00:03:40,489
focused towards the consumer market you

81
00:03:40,489 --> 00:03:42,470
know it it lacks reliable central

82
00:03:42,470 --> 00:03:44,780
management features such as like

83
00:03:44,780 --> 00:03:46,400
granular access control security

84
00:03:46,400 --> 00:03:48,980
policies device analytics as well as the

85
00:03:48,980 --> 00:03:51,109
means to secure data at rest such as

86
00:03:51,109 --> 00:03:54,109
full debt disk encryption Android also

87
00:03:54,109 --> 00:03:56,269
latch the ability to allow applications

88
00:03:56,269 --> 00:03:58,459
to easily encrypt their data in a way

89
00:03:58,459 --> 00:04:00,440
that would keep it secure from road

90
00:04:00,440 --> 00:04:02,500
applications such as spyware or malware

91
00:04:02,500 --> 00:04:05,090
more or less right now android has a

92
00:04:05,090 --> 00:04:07,069
very limited set of features that would

93
00:04:07,069 --> 00:04:08,680
help keep it secure in enterprise

94
00:04:08,680 --> 00:04:12,109
android 3.0 is changing some of that you

95
00:04:12,109 --> 00:04:13,880
know it's implementing some more

96
00:04:13,880 --> 00:04:15,680
enterprise type features such as full

97
00:04:15,680 --> 00:04:18,048
disk encryption remote password reset

98
00:04:18,048 --> 00:04:20,570
and a few other features though android

99
00:04:20,570 --> 00:04:22,220
3 isn't being released for smartphones

100
00:04:22,220 --> 00:04:25,910
and some of these features might land up

101
00:04:25,910 --> 00:04:28,849
an Android Ice Cream Sandwich you know

102
00:04:28,849 --> 00:04:30,979
let's talk a little bit about what the

103
00:04:30,979 --> 00:04:33,650
male situation looks like Android

104
00:04:33,650 --> 00:04:36,380
currently relies on active sync for any

105
00:04:36,380 --> 00:04:38,690
kind of enterprise male unfortunately

106
00:04:38,690 --> 00:04:40,590
for us activesync comes with a whole

107
00:04:40,590 --> 00:04:43,230
set of its own issues by default has a

108
00:04:43,230 --> 00:04:45,510
very limited set of security features in

109
00:04:45,510 --> 00:04:47,940
the features it does have are not always

110
00:04:47,940 --> 00:04:50,970
the most supported or stable it also

111
00:04:50,970 --> 00:04:53,460
relies on the android certificate store

112
00:04:53,460 --> 00:04:56,820
for SSL verification which may not

113
00:04:56,820 --> 00:04:59,550
always be the most up-to-date aside from

114
00:04:59,550 --> 00:05:01,320
how activesync sends information over

115
00:05:01,320 --> 00:05:03,270
the air we should look at how data is

116
00:05:03,270 --> 00:05:06,180
stored on on the device it currently

117
00:05:06,180 --> 00:05:08,040
relies purely on the android security

118
00:05:08,040 --> 00:05:10,230
boundaries and the choices of the users

119
00:05:10,230 --> 00:05:11,850
to protect the data in other words the

120
00:05:11,850 --> 00:05:18,390
data is completely unencrypted okay do

121
00:05:18,390 --> 00:05:20,160
these security gaps we've seen an

122
00:05:20,160 --> 00:05:21,390
emergence of order called

123
00:05:21,390 --> 00:05:23,700
enterprise-class applications these

124
00:05:23,700 --> 00:05:26,310
applications attempt in multiple ways to

125
00:05:26,310 --> 00:05:27,780
improve the security and manageability

126
00:05:27,780 --> 00:05:30,840
of devices they provide the ability to

127
00:05:30,840 --> 00:05:33,930
do remote analytics remote wipe hazard

128
00:05:33,930 --> 00:05:35,760
management application whitelisting and

129
00:05:35,760 --> 00:05:38,400
blacklisting as well in some cases as

130
00:05:38,400 --> 00:05:41,250
credential uploading communications are

131
00:05:41,250 --> 00:05:43,680
usually handled by SSL tune from the

132
00:05:43,680 --> 00:05:47,940
server a lot of the these features have

133
00:05:47,940 --> 00:05:50,370
been taken from blackberry enterprise

134
00:05:50,370 --> 00:05:52,110
server just more or less than the gold

135
00:05:52,110 --> 00:05:54,300
standard of enterprise mail for a long

136
00:05:54,300 --> 00:05:57,240
time good or bad blackberry does have

137
00:05:57,240 --> 00:05:59,580
tight software and hardware and Grayson

138
00:05:59,580 --> 00:06:01,650
this allows them to build their software

139
00:06:01,650 --> 00:06:03,660
and security with ties directly to the

140
00:06:03,660 --> 00:06:06,180
hardware you know though we are seeing

141
00:06:06,180 --> 00:06:08,400
certain enterprise-class vendors working

142
00:06:08,400 --> 00:06:11,130
directly with the hardware vendors to

143
00:06:11,130 --> 00:06:15,630
improve integration yeah now on to

144
00:06:15,630 --> 00:06:17,520
secure containers you know secure

145
00:06:17,520 --> 00:06:19,860
containers attempt to provide data

146
00:06:19,860 --> 00:06:22,760
segregation they encrypt enterprise mail

147
00:06:22,760 --> 00:06:25,920
contacts calendar some files may be on

148
00:06:25,920 --> 00:06:28,290
the device in order to keep it separate

149
00:06:28,290 --> 00:06:30,570
from your personal data these containers

150
00:06:30,570 --> 00:06:33,390
usually rely on a pin that's separate

151
00:06:33,390 --> 00:06:35,700
from the standard enterprise and android

152
00:06:35,700 --> 00:06:39,810
pin let's talk a little bit about the

153
00:06:39,810 --> 00:06:41,310
marketing claims made by some of these

154
00:06:41,310 --> 00:06:43,500
companies you know first one I found

155
00:06:43,500 --> 00:06:45,990
very interesting governments have tested

156
00:06:45,990 --> 00:06:47,970
and the product and approved it for

157
00:06:47,970 --> 00:06:49,510
their most

158
00:06:49,510 --> 00:06:52,200
sensitive deployments kind of scary

159
00:06:52,200 --> 00:06:54,340
potentially top-secret information on

160
00:06:54,340 --> 00:06:57,010
these devices another one several

161
00:06:57,010 --> 00:06:59,490
security conscious enterprises have

162
00:06:59,490 --> 00:07:02,500
approved the use after rigorous internal

163
00:07:02,500 --> 00:07:05,230
or third-party pen testing can we see

164
00:07:05,230 --> 00:07:06,790
these tests you know how come this

165
00:07:06,790 --> 00:07:09,400
information isn't published finally

166
00:07:09,400 --> 00:07:12,190
helps the government agencies comply

167
00:07:12,190 --> 00:07:15,910
with DOD directive 8100 to homeland

168
00:07:15,910 --> 00:07:18,910
security directive 12 and federal

169
00:07:18,910 --> 00:07:21,430
Information Security Management Act talk

170
00:07:21,430 --> 00:07:23,920
a little bit about DOD directive 8100

171
00:07:23,920 --> 00:07:25,810
too there's more or less written as

172
00:07:25,810 --> 00:07:28,870
guidelines to secure wireless devices it

173
00:07:28,870 --> 00:07:34,750
was published in 2004 that was 0 3 years

174
00:07:34,750 --> 00:07:37,690
before the first android beta even

175
00:07:37,690 --> 00:07:40,390
showed up on the market by now this

176
00:07:40,390 --> 00:07:42,700
document is over seven years old I would

177
00:07:42,700 --> 00:07:44,380
think the threats and attack vectors in

178
00:07:44,380 --> 00:07:45,790
the last seven years have changed a

179
00:07:45,790 --> 00:07:49,740
little bit you know well this stuff this

180
00:07:49,740 --> 00:07:51,940
documents mostly needed for compliance

181
00:07:51,940 --> 00:07:54,520
if it was used in the design of these

182
00:07:54,520 --> 00:07:59,560
applications it's a little bit scary you

183
00:07:59,560 --> 00:08:01,840
know another security claim forms remote

184
00:08:01,840 --> 00:08:04,510
wipe of enterprise data yeah this is a

185
00:08:04,510 --> 00:08:07,600
nice feature to have for a checkbox this

186
00:08:07,600 --> 00:08:09,370
is help in this situation your device

187
00:08:09,370 --> 00:08:11,740
might be stolen but I have a strong

188
00:08:11,740 --> 00:08:13,300
feeling that most sophisticated

189
00:08:13,300 --> 00:08:15,970
attackers would probably just stick your

190
00:08:15,970 --> 00:08:18,130
device in a Faraday cage or pull pull

191
00:08:18,130 --> 00:08:22,770
the sim okay more marketing claims

192
00:08:22,770 --> 00:08:25,750
corporate data is highly secure highly

193
00:08:25,750 --> 00:08:27,640
secure from hope I think that's a big

194
00:08:27,640 --> 00:08:29,290
part of what this talk is about at least

195
00:08:29,290 --> 00:08:31,990
personally I'd like to know when someone

196
00:08:31,990 --> 00:08:33,669
is saying my sensitive corporate data is

197
00:08:33,669 --> 00:08:35,950
secure who's that secure from is it a

198
00:08:35,950 --> 00:08:40,990
random phone thief or governments okay

199
00:08:40,990 --> 00:08:43,240
over-the-air transmissions are and

200
00:08:43,240 --> 00:08:45,850
enterprise data at rest on the devices

201
00:08:45,850 --> 00:08:48,160
are secured with industry-leading AES

202
00:08:48,160 --> 00:08:51,510
192 cool nothing wrong with AES 192

203
00:08:51,510 --> 00:08:54,010
let's talk about the usage over-the-air

204
00:08:54,010 --> 00:08:57,460
transmissions is a es 192 used on its

205
00:08:57,460 --> 00:09:00,400
own or they relying on SSL how does that

206
00:09:00,400 --> 00:09:02,450
configured who handles certificates

207
00:09:02,450 --> 00:09:06,230
now on to the data whose heroes phone is

208
00:09:06,230 --> 00:09:08,900
currently off raise your hand exactly

209
00:09:08,900 --> 00:09:12,050
yeah how often you shut your shut off

210
00:09:12,050 --> 00:09:14,540
your phone do you set it up and you go

211
00:09:14,540 --> 00:09:17,180
to bed I know I don't how about when

212
00:09:17,180 --> 00:09:19,040
you're walking on the street you know

213
00:09:19,040 --> 00:09:20,360
how about when you're at a hacker

214
00:09:20,360 --> 00:09:22,280
convention with some of the best hackers

215
00:09:22,280 --> 00:09:26,150
in the world that's what I thought yeah

216
00:09:26,150 --> 00:09:27,920
now let's talk a little bit about Phipps

217
00:09:27,920 --> 00:09:30,560
you know what is Fitz you know what's

218
00:09:30,560 --> 00:09:33,530
the Phipps module solo chip in there is

219
00:09:33,530 --> 00:09:36,430
it's just some copy and paste code yeah

220
00:09:36,430 --> 00:09:39,440
yeah then missed which is a National

221
00:09:39,440 --> 00:09:41,540
Institute standards of Technology issued

222
00:09:41,540 --> 00:09:44,270
the fifth 140 publication series to

223
00:09:44,270 --> 00:09:45,800
coordinate requirements and standards

224
00:09:45,800 --> 00:09:48,290
for cryptographic molecules that include

225
00:09:48,290 --> 00:09:50,720
both hardware and software components so

226
00:09:50,720 --> 00:09:52,010
one talk a little bit about the

227
00:09:52,010 --> 00:09:54,530
different fits levels well on the side

228
00:09:54,530 --> 00:09:57,410
note most of the enterprise applications

229
00:09:57,410 --> 00:10:01,070
we've seen say they owe fips 140-2 level

230
00:10:01,070 --> 00:10:04,280
dash to level one secure whatever that

231
00:10:04,280 --> 00:10:08,150
means ok vips level one more or less

232
00:10:08,150 --> 00:10:11,240
means at least one approved crypto I've

233
00:10:11,240 --> 00:10:14,060
algorithm is used by the application or

234
00:10:14,060 --> 00:10:16,130
the module that the module is

235
00:10:16,130 --> 00:10:19,430
self-contained and it's approved and

236
00:10:19,430 --> 00:10:22,190
reviewed software module more or less

237
00:10:22,190 --> 00:10:24,970
these modules have to correctly

238
00:10:24,970 --> 00:10:28,240
implement the crypto algorithms and

239
00:10:28,240 --> 00:10:30,950
shouldn't let others pass around actual

240
00:10:30,950 --> 00:10:33,200
key information callers should only have

241
00:10:33,200 --> 00:10:35,960
key handles level two should show

242
00:10:35,960 --> 00:10:38,600
evidence of tampering three detect and

243
00:10:38,600 --> 00:10:40,310
respond to attempts at physical access

244
00:10:40,310 --> 00:10:44,450
for detect fluctuations in environmental

245
00:10:44,450 --> 00:10:46,520
conditions if the temperature rises

246
00:10:46,520 --> 00:10:48,380
around the device potentially it will

247
00:10:48,380 --> 00:10:52,490
shut off okay now that we've talked a

248
00:10:52,490 --> 00:10:54,830
little bit about what the claims are I

249
00:10:54,830 --> 00:10:56,180
want to talk about what the actual

250
00:10:56,180 --> 00:10:58,820
threats to your data are remember these

251
00:10:58,820 --> 00:11:01,490
are applications that are meant for you

252
00:11:01,490 --> 00:11:03,950
know CEOs of enterprises government

253
00:11:03,950 --> 00:11:05,870
agencies these are not computer or

254
00:11:05,870 --> 00:11:08,150
consumer applications you know so the

255
00:11:08,150 --> 00:11:09,620
threats and who might be after your data

256
00:11:09,620 --> 00:11:14,060
might be a little different firstly a

257
00:11:14,060 --> 00:11:14,950
malicious hacker

258
00:11:14,950 --> 00:11:18,010
you know just the average hacker maybe a

259
00:11:18,010 --> 00:11:20,800
little bit better you know they mostly

260
00:11:20,800 --> 00:11:23,500
going over internet probably won't have

261
00:11:23,500 --> 00:11:26,290
access to the phone itself but can still

262
00:11:26,290 --> 00:11:30,100
be pretty powerful next one would be say

263
00:11:30,100 --> 00:11:33,160
corporate espionage you know a competing

264
00:11:33,160 --> 00:11:35,230
company wants access to your data maybe

265
00:11:35,230 --> 00:11:37,900
steal plans for missiles things like

266
00:11:37,900 --> 00:11:41,380
that you know they do have most likely

267
00:11:41,380 --> 00:11:43,420
highly technical resources and large

268
00:11:43,420 --> 00:11:47,020
financial resources now government

269
00:11:47,020 --> 00:11:49,780
entities they may be able to get access

270
00:11:49,780 --> 00:11:52,150
to your phone fairly often are you going

271
00:11:52,150 --> 00:11:53,800
through security when you travel you

272
00:11:53,800 --> 00:11:56,740
know do they stop you randomly you don't

273
00:11:56,740 --> 00:11:59,230
know they also may have control the

274
00:11:59,230 --> 00:12:00,670
infrastructure you're using from the

275
00:12:00,670 --> 00:12:02,740
cell phone that works the wired networks

276
00:12:02,740 --> 00:12:04,330
you name it they may have control over

277
00:12:04,330 --> 00:12:06,670
it they have large technical resources

278
00:12:06,670 --> 00:12:09,670
and large financial resources finally

279
00:12:09,670 --> 00:12:12,520
your significant other yeah chances are

280
00:12:12,520 --> 00:12:13,600
they're technical and financial

281
00:12:13,600 --> 00:12:16,570
resources aren't all that high but they

282
00:12:16,570 --> 00:12:17,950
may want to know what data you have on

283
00:12:17,950 --> 00:12:21,730
your device okay let's see what they're

284
00:12:21,730 --> 00:12:25,420
after thereafter potentially email sense

285
00:12:25,420 --> 00:12:28,330
of documents and files credentials text

286
00:12:28,330 --> 00:12:30,280
messages contact lists call logs

287
00:12:30,280 --> 00:12:32,440
calendars you know say if you have any

288
00:12:32,440 --> 00:12:35,500
code or plans on your phone you know

289
00:12:35,500 --> 00:12:37,230
which kind of sensitive data you have so

290
00:12:37,230 --> 00:12:41,290
imagine that let's talk about where the

291
00:12:41,290 --> 00:12:44,920
data reside classify mostly three areas

292
00:12:44,920 --> 00:12:47,500
it will be on the server so you know

293
00:12:47,500 --> 00:12:49,810
your mail server etc will be in the air

294
00:12:49,810 --> 00:12:51,970
think about that how much sensitive data

295
00:12:51,970 --> 00:12:53,650
is floating around in the air right now

296
00:12:53,650 --> 00:12:57,070
all around and finally it'll be on the

297
00:12:57,070 --> 00:13:00,760
device two areas one in the flash man or

298
00:13:00,760 --> 00:13:05,400
whatever or Ram if it's being accessed

299
00:13:05,400 --> 00:13:08,050
let's talk about how these threats might

300
00:13:08,050 --> 00:13:10,930
actually try to obtain the data they

301
00:13:10,930 --> 00:13:13,210
might try to steal the device wallets

302
00:13:13,210 --> 00:13:15,520
powered on you know this is when the

303
00:13:15,520 --> 00:13:17,110
least sophisticated but one of the most

304
00:13:17,110 --> 00:13:19,750
serious attacks you know with the device

305
00:13:19,750 --> 00:13:21,970
that's on we can not only access with on

306
00:13:21,970 --> 00:13:23,710
the flash but potentially the data

307
00:13:23,710 --> 00:13:26,020
that's stored in RAM let's look at some

308
00:13:26,020 --> 00:13:27,110
of the ways we can actually

309
00:13:27,110 --> 00:13:29,329
the ram contents you know maybe some

310
00:13:29,329 --> 00:13:31,190
ways through Android itself you know is

311
00:13:31,190 --> 00:13:33,410
USB debugging enabled if it is we can

312
00:13:33,410 --> 00:13:35,600
easily obtain root access through adb

313
00:13:35,600 --> 00:13:37,670
using different exploits what if it's

314
00:13:37,670 --> 00:13:39,950
not can we bypass the lock screen as

315
00:13:39,950 --> 00:13:41,990
we've seen multiple vulnerabilities have

316
00:13:41,990 --> 00:13:44,240
been found in it another area that's not

317
00:13:44,240 --> 00:13:45,980
talked about too much is cold boot

318
00:13:45,980 --> 00:13:48,079
attacks now cold boot attacks on the

319
00:13:48,079 --> 00:13:49,820
mobile platform are extremely difficult

320
00:13:49,820 --> 00:13:51,529
to pull off may require a lot of

321
00:13:51,529 --> 00:13:53,350
technical and financial resources to

322
00:13:53,350 --> 00:13:55,670
potential ways doing them would be a

323
00:13:55,670 --> 00:13:57,890
software or hardware based attack now

324
00:13:57,890 --> 00:13:59,930
South Korea would require gaining root

325
00:13:59,930 --> 00:14:01,790
rebooting the device and cutting grep

326
00:14:01,790 --> 00:14:05,110
through memory say flashing it etc

327
00:14:05,110 --> 00:14:07,339
hardware would actually require you to

328
00:14:07,339 --> 00:14:09,709
pull off the chips or somehow read them

329
00:14:09,709 --> 00:14:11,690
while they're being accessed neither are

330
00:14:11,690 --> 00:14:14,329
very easy but it is potential with

331
00:14:14,329 --> 00:14:17,570
enough financial resources another one

332
00:14:17,570 --> 00:14:20,000
to possibly think about is jtag a lot of

333
00:14:20,000 --> 00:14:21,680
your phone's still have or some

334
00:14:21,680 --> 00:14:23,300
earphones still have a jtag interface

335
00:14:23,300 --> 00:14:25,310
you know depending on the board

336
00:14:25,310 --> 00:14:27,200
configuration they may allow a debug

337
00:14:27,200 --> 00:14:31,269
access ramp though it's highly unlikely

338
00:14:32,230 --> 00:14:34,730
what's another let's talk a little bit

339
00:14:34,730 --> 00:14:36,440
more about if the device can be

340
00:14:36,440 --> 00:14:38,630
protected in these circumstances you

341
00:14:38,630 --> 00:14:40,010
know one of the relevant marketing

342
00:14:40,010 --> 00:14:42,680
claims to this is data is highly secure

343
00:14:42,680 --> 00:14:46,459
so can your data be protected in some

344
00:14:46,459 --> 00:14:48,949
circumstances more or less if nothing

345
00:14:48,949 --> 00:14:50,660
sensitive isn't in RAM when the device

346
00:14:50,660 --> 00:14:52,850
is stolen you did it could potentially

347
00:14:52,850 --> 00:14:55,279
be protected you know how much you

348
00:14:55,279 --> 00:14:58,880
secure that sensitive data it should

349
00:14:58,880 --> 00:15:01,880
immediately be zero tized when it's done

350
00:15:01,880 --> 00:15:06,649
within ram so another attack vector the

351
00:15:06,649 --> 00:15:09,980
device is stolen waltz off you know only

352
00:15:09,980 --> 00:15:13,519
flash may be available and the ways to

353
00:15:13,519 --> 00:15:15,500
get access to flash are pretty similar

354
00:15:15,500 --> 00:15:17,180
the ways to get access to ram you know

355
00:15:17,180 --> 00:15:19,880
we could use USB debugging or bypassing

356
00:15:19,880 --> 00:15:22,790
the loft screen but we also have a

357
00:15:22,790 --> 00:15:24,350
couple of other attack vectors we can

358
00:15:24,350 --> 00:15:27,860
use there's some more practical ways to

359
00:15:27,860 --> 00:15:30,949
get to flash via hardware you know the

360
00:15:30,949 --> 00:15:32,750
actual reading of flash tips of

361
00:15:32,750 --> 00:15:34,699
fairmount easier than reading ram but

362
00:15:34,699 --> 00:15:38,060
again it's not that easy

363
00:15:38,060 --> 00:15:40,280
and you know you don't have the but you

364
00:15:40,280 --> 00:15:41,570
don't have to worry about data lawsuits

365
00:15:41,570 --> 00:15:46,160
time and another really interesting way

366
00:15:46,160 --> 00:15:48,200
is over USB you know certain companies

367
00:15:48,200 --> 00:15:50,540
are now releasing hardware devices that

368
00:15:50,540 --> 00:15:53,030
can read the flash directly over the USB

369
00:15:53,030 --> 00:15:54,770
port you know these devices are being

370
00:15:54,770 --> 00:15:56,600
sold publicly and have been shown to

371
00:15:56,600 --> 00:15:58,670
work in multiple cases yeah the most

372
00:15:58,670 --> 00:16:01,850
popular is to see you fed device the

373
00:16:01,850 --> 00:16:04,100
latest version claims to support direct

374
00:16:04,100 --> 00:16:06,560
bit by bit copying as well as the

375
00:16:06,560 --> 00:16:10,850
ability to bypass al off-screen and the

376
00:16:10,850 --> 00:16:12,800
only thing they're currently limited to

377
00:16:12,800 --> 00:16:15,170
certain Android devices but that list is

378
00:16:15,170 --> 00:16:17,570
growing and Samsung is supposedly next

379
00:16:17,570 --> 00:16:20,330
on it based on what we know you fed has

380
00:16:20,330 --> 00:16:22,790
created different exploits to be able to

381
00:16:22,790 --> 00:16:27,170
do this it's really cool stuff let's see

382
00:16:27,170 --> 00:16:29,870
now what the device powered off can the

383
00:16:29,870 --> 00:16:31,910
data be protected you know relevant

384
00:16:31,910 --> 00:16:34,610
claim would be it is secure at rest well

385
00:16:34,610 --> 00:16:37,100
I believe it can be protected how might

386
00:16:37,100 --> 00:16:40,310
that be done a strong password based key

387
00:16:40,310 --> 00:16:43,100
derivation another would be a

388
00:16:43,100 --> 00:16:45,260
server-side key meaning that the

389
00:16:45,260 --> 00:16:46,760
decryption key is actually kept on the

390
00:16:46,760 --> 00:16:49,070
server and has to be sent down every

391
00:16:49,070 --> 00:16:52,940
time you want to ask the data see

392
00:16:52,940 --> 00:16:55,370
another interesting attack vector would

393
00:16:55,370 --> 00:16:58,070
be if someone borrows your device one of

394
00:16:58,070 --> 00:17:00,050
us takes your device in return it when

395
00:17:00,050 --> 00:17:01,940
might this happen say while you're

396
00:17:01,940 --> 00:17:04,579
sleeping or passed out if you're stopped

397
00:17:04,579 --> 00:17:06,319
at the border you know they grab your

398
00:17:06,319 --> 00:17:08,210
device we've seen that before save Moxie

399
00:17:08,210 --> 00:17:11,380
Marlinspike stop war driving you know

400
00:17:11,380 --> 00:17:14,869
police pull you over in the states at

401
00:17:14,869 --> 00:17:16,849
least certain states are now it's now

402
00:17:16,849 --> 00:17:18,319
legal to search your phone when you're

403
00:17:18,319 --> 00:17:20,869
pulled over while driving and another

404
00:17:20,869 --> 00:17:22,250
thing you feds are actually being

405
00:17:22,250 --> 00:17:24,680
heavily used by police now think about

406
00:17:24,680 --> 00:17:26,930
that you get pulled over and within five

407
00:17:26,930 --> 00:17:29,300
minutes the police legally have a full

408
00:17:29,300 --> 00:17:32,960
copy of your device yeah again these are

409
00:17:32,960 --> 00:17:34,760
similar attack vectors as a stolen

410
00:17:34,760 --> 00:17:37,450
device but some slight differences one

411
00:17:37,450 --> 00:17:40,160
its time limited less likelihood of the

412
00:17:40,160 --> 00:17:44,450
chips being removed and attacked but the

413
00:17:44,450 --> 00:17:46,520
difference is the device can come back

414
00:17:46,520 --> 00:17:48,860
to you modified more or less your

415
00:17:48,860 --> 00:17:50,870
attacker could install malware back

416
00:17:50,870 --> 00:17:53,570
doors that give them very strong

417
00:17:53,570 --> 00:17:56,120
foothold into a persistent attack you

418
00:17:56,120 --> 00:17:57,650
know back door on a sensitive device

419
00:17:57,650 --> 00:18:00,260
without the user knowing the wiser you

420
00:18:00,260 --> 00:18:02,600
know any device any information that

421
00:18:02,600 --> 00:18:05,809
comes on it after you it's been returned

422
00:18:05,809 --> 00:18:09,170
you know maybe stolen you know so say it

423
00:18:09,170 --> 00:18:10,370
is taken while you're sleeping that

424
00:18:10,370 --> 00:18:13,190
could be potentially 100% covert you may

425
00:18:13,190 --> 00:18:18,800
never know so can it be protected in

426
00:18:18,800 --> 00:18:21,460
this case in some circumstances

427
00:18:21,460 --> 00:18:23,780
one-nothing sensitive can be in RAM if

428
00:18:23,780 --> 00:18:26,720
the device is Stonewall on and the

429
00:18:26,720 --> 00:18:29,300
device can't be used afterwards how

430
00:18:29,300 --> 00:18:31,240
might you potentially secure it again

431
00:18:31,240 --> 00:18:35,059
sensitive information to be derived full

432
00:18:35,059 --> 00:18:36,650
disk encryption should be used with a

433
00:18:36,650 --> 00:18:39,020
separate boot key so if someone gets the

434
00:18:39,020 --> 00:18:40,820
device while it's off they can't modify

435
00:18:40,820 --> 00:18:43,280
the data that's on there and then tamper

436
00:18:43,280 --> 00:18:44,960
detection some companies are now trying

437
00:18:44,960 --> 00:18:46,580
to build in if someone starts messing

438
00:18:46,580 --> 00:18:48,080
with the settings enable on USB

439
00:18:48,080 --> 00:18:50,929
debugging so and so forth that the

440
00:18:50,929 --> 00:18:55,700
applications shut down another area to

441
00:18:55,700 --> 00:18:59,030
look at is network based attacks man in

442
00:18:59,030 --> 00:19:02,270
the middle or passive interception you

443
00:19:02,270 --> 00:19:04,550
know some of the threats may actually

444
00:19:04,550 --> 00:19:07,100
have control of the cellular providers

445
00:19:07,100 --> 00:19:09,260
you know certain governments so so and

446
00:19:09,260 --> 00:19:11,510
so forth have full access to that you

447
00:19:11,510 --> 00:19:13,340
know then let's also look at cellular

448
00:19:13,340 --> 00:19:15,230
protocol vulnerabilities there's been a

449
00:19:15,230 --> 00:19:17,600
lot of talk about that vulnerabilities

450
00:19:17,600 --> 00:19:21,620
in GSM wimax so and so forth femtocell

451
00:19:21,620 --> 00:19:23,360
issues you know connecting to a

452
00:19:23,360 --> 00:19:24,710
femtocell there's actually talk on that

453
00:19:24,710 --> 00:19:26,540
I think a little later today can't wait

454
00:19:26,540 --> 00:19:30,290
to see that Wi-Fi a lot of phones still

455
00:19:30,290 --> 00:19:32,960
automatically connect to Wi-Fi access

456
00:19:32,960 --> 00:19:36,260
points around them and finally SSL you

457
00:19:36,260 --> 00:19:38,360
know if ssl is not configured correctly

458
00:19:38,360 --> 00:19:41,360
and certificate verification isn't done

459
00:19:41,360 --> 00:19:45,290
easy to get in there couple more that

460
00:19:45,290 --> 00:19:48,110
are a little bit newer baseband exploits

461
00:19:48,110 --> 00:19:50,750
which could potentially give remote root

462
00:19:50,750 --> 00:19:53,750
access to these devices as well as have

463
00:19:53,750 --> 00:19:56,120
the potential for a persistent back door

464
00:19:56,120 --> 00:19:59,210
on the device without it running an app

465
00:19:59,210 --> 00:20:02,540
code another interesting one is a former

466
00:20:02,540 --> 00:20:03,410
over the Arab

467
00:20:03,410 --> 00:20:06,260
if someone were to say bypass signature

468
00:20:06,260 --> 00:20:08,330
checks or do their own signing this

469
00:20:08,330 --> 00:20:10,760
could cause major damage and again you

470
00:20:10,760 --> 00:20:12,230
can push it completely back doored

471
00:20:12,230 --> 00:20:16,280
firmware so Kim the data be protecting

472
00:20:16,280 --> 00:20:19,160
this case ah the relevant claims for

473
00:20:19,160 --> 00:20:21,380
this really are patented intense

474
00:20:21,380 --> 00:20:24,890
security in aes 192 we believe the data

475
00:20:24,890 --> 00:20:27,340
could potentially be protected how

476
00:20:27,340 --> 00:20:30,050
properly implement SSL to prevent most

477
00:20:30,050 --> 00:20:32,980
attacks a big thing to also do is

478
00:20:32,980 --> 00:20:35,980
certificate fingerprinting don't rely

479
00:20:35,980 --> 00:20:38,990
entirely on external route cas you want

480
00:20:38,990 --> 00:20:41,800
to make sure that certificates are legit

481
00:20:41,800 --> 00:20:44,540
you know final kind of area we're going

482
00:20:44,540 --> 00:20:46,010
to look at is application based attacks

483
00:20:46,010 --> 00:20:48,680
you know let's start with malware you

484
00:20:48,680 --> 00:20:50,720
know again we're seeing lots of people

485
00:20:50,720 --> 00:20:52,550
downloading malware from the app markets

486
00:20:52,550 --> 00:20:54,830
even there's the potential of getting it

487
00:20:54,830 --> 00:20:57,230
from Android vulnerabilities say browser

488
00:20:57,230 --> 00:21:00,770
or PDF based maybe the mail I'm going to

489
00:21:00,770 --> 00:21:03,590
break it now learn to two areas user

490
00:21:03,590 --> 00:21:06,590
land and route you know with userland

491
00:21:06,590 --> 00:21:08,360
it's mostly contained within the

492
00:21:08,360 --> 00:21:10,100
standard android security boundaries

493
00:21:10,100 --> 00:21:13,670
with root it can access flash and ram

494
00:21:13,670 --> 00:21:16,460
and then there's also the standard

495
00:21:16,460 --> 00:21:18,760
application vulnerabilities and

496
00:21:18,760 --> 00:21:20,810
enterprise-class applications you know

497
00:21:20,810 --> 00:21:23,090
permissions issues buffer overflows if

498
00:21:23,090 --> 00:21:24,560
they're using a lot of native code and

499
00:21:24,560 --> 00:21:29,900
just misconfigured settings so can the

500
00:21:29,900 --> 00:21:31,850
day to be protected in the case of

501
00:21:31,850 --> 00:21:36,040
malware and the user land I'd say yes

502
00:21:36,040 --> 00:21:39,080
how application whitelisting and

503
00:21:39,080 --> 00:21:41,720
blacklisting could help you know if you

504
00:21:41,720 --> 00:21:43,010
prevent the malware from getting on

505
00:21:43,010 --> 00:21:46,310
there in the first place then you reduce

506
00:21:46,310 --> 00:21:48,140
the chances of actually having issues

507
00:21:48,140 --> 00:21:50,450
with your application another which some

508
00:21:50,450 --> 00:21:54,020
of these enterprise-class applications

509
00:21:54,020 --> 00:21:57,010
are looking at is granular OS controls

510
00:21:57,010 --> 00:21:59,960
take more control of the OS and prevent

511
00:21:59,960 --> 00:22:03,110
certain calls from even being 60 earth

512
00:22:03,110 --> 00:22:05,990
from even succeeding and finally in 10

513
00:22:05,990 --> 00:22:08,930
filtering do not allow anything to

514
00:22:08,930 --> 00:22:10,490
communicate with your application if

515
00:22:10,490 --> 00:22:11,510
it's doing any kind

516
00:22:11,510 --> 00:22:15,560
sort of work what data can't be

517
00:22:15,560 --> 00:22:18,410
protected from anything that obtains

518
00:22:18,410 --> 00:22:20,030
higher level permissions in the seer

519
00:22:20,030 --> 00:22:22,310
secure container so Maori with root

520
00:22:22,310 --> 00:22:24,890
access baseband exploits and firmware

521
00:22:24,890 --> 00:22:26,900
over the error exploits these are some

522
00:22:26,900 --> 00:22:30,890
really scary areas that have very few if

523
00:22:30,890 --> 00:22:33,170
any protections from walking around

524
00:22:33,170 --> 00:22:35,150
someone causes you know baseband

525
00:22:35,150 --> 00:22:36,860
actually boom all your sensitive data

526
00:22:36,860 --> 00:22:39,500
could be gone now that we've kind of

527
00:22:39,500 --> 00:22:41,330
gone over some of the different threats

528
00:22:41,330 --> 00:22:44,000
attack vectors you know how secure

529
00:22:44,000 --> 00:22:46,580
containers could do things let's look at

530
00:22:46,580 --> 00:22:48,460
how to actually verify if they are and

531
00:22:48,460 --> 00:22:50,660
with that I'm going to turn it over to

532
00:22:50,660 --> 00:22:53,360
mark to dive into the actual techniques

533
00:22:53,360 --> 00:22:56,270
you can use to verify the claims or to

534
00:22:56,270 --> 00:22:58,430
break enterprise-class applications and

535
00:22:58,430 --> 00:23:03,460
secure containers mark Thank You month

536
00:23:09,610 --> 00:23:12,440
so now we are going to see how can

537
00:23:12,440 --> 00:23:14,330
verify if we are protected with these

538
00:23:14,330 --> 00:23:16,400
applications we're going to show

539
00:23:16,400 --> 00:23:18,200
techniques and tools we used to

540
00:23:18,200 --> 00:23:19,970
reverse-engineer autoquest class

541
00:23:19,970 --> 00:23:23,150
applications and take your containers we

542
00:23:23,150 --> 00:23:25,700
first determine how we can what we

543
00:23:25,700 --> 00:23:27,860
expect to see in an application we then

544
00:23:27,860 --> 00:23:30,230
show how to reverse-engineer them with

545
00:23:30,230 --> 00:23:33,260
existing tools and we will see other

546
00:23:33,260 --> 00:23:35,090
issues we are looking for when we did

547
00:23:35,090 --> 00:23:36,860
that we talked about the deadly

548
00:23:36,860 --> 00:23:38,840
candidate code paths will also show how

549
00:23:38,840 --> 00:23:41,450
to do structured and unstructured memory

550
00:23:41,450 --> 00:23:43,910
analysis and we also show how we can

551
00:23:43,910 --> 00:23:45,860
modify an application as well as using

552
00:23:45,860 --> 00:23:48,110
dynamic analysis in order to audit it

553
00:23:48,110 --> 00:23:52,070
better so how is an application

554
00:23:52,070 --> 00:23:54,710
organized each application is installed

555
00:23:54,710 --> 00:23:57,140
and compiled into one single file an

556
00:23:57,140 --> 00:23:59,750
unread package which is basically zip

557
00:23:59,750 --> 00:24:02,090
compressed files this APK contains

558
00:24:02,090 --> 00:24:04,280
several files the manifests which is an

559
00:24:04,280 --> 00:24:05,630
alkaloid file which contains an

560
00:24:05,630 --> 00:24:07,670
application name version also allowed

561
00:24:07,670 --> 00:24:09,980
activity and other permissions it's

562
00:24:09,980 --> 00:24:12,260
mostly based on white list there are

563
00:24:12,260 --> 00:24:14,150
some signature files as a transfer data

564
00:24:14,150 --> 00:24:17,630
integrity of the package so package

565
00:24:17,630 --> 00:24:19,520
shouldn't be modified by sending them

566
00:24:19,520 --> 00:24:21,830
with the developer ski well except that

567
00:24:21,830 --> 00:24:23,900
application ourself signs so you can

568
00:24:23,900 --> 00:24:26,210
actually modify them and resign them

569
00:24:26,210 --> 00:24:29,270
with your own key so there are also some

570
00:24:29,270 --> 00:24:30,980
resource file sometimes they are native

571
00:24:30,980 --> 00:24:34,190
libraries the text the the classes that

572
00:24:34,190 --> 00:24:36,380
Dex file is a crew of the package it

573
00:24:36,380 --> 00:24:39,170
contains all the dalvik VM bytecode the

574
00:24:39,170 --> 00:24:40,970
signal time-coded all of the application

575
00:24:40,970 --> 00:24:42,950
classes and this is one of the main

576
00:24:42,950 --> 00:24:44,570
difference with one of the difference

577
00:24:44,570 --> 00:24:47,120
with a Java VM machine where class file

578
00:24:47,120 --> 00:24:49,070
already are they are referenced at one

579
00:24:49,070 --> 00:24:54,080
time so our goal is to be able to fully

580
00:24:54,080 --> 00:24:55,520
understand what an application does

581
00:24:55,520 --> 00:24:57,650
those enterprise application they have

582
00:24:57,650 --> 00:24:59,570
obfuscation and marrow reversing of an

583
00:24:59,570 --> 00:25:00,880
application with the single tool

584
00:25:00,880 --> 00:25:03,770
wondering / code is not at most

585
00:25:03,770 --> 00:25:06,200
practical so the idea is to understand

586
00:25:06,200 --> 00:25:07,820
the application flow in order to look

587
00:25:07,820 --> 00:25:09,770
for logic or design issues but also

588
00:25:09,770 --> 00:25:12,520
specific issues relative to encryption

589
00:25:12,520 --> 00:25:15,140
did I mean secure container very

590
00:25:15,140 --> 00:25:16,760
specific so that's why we wanted to have

591
00:25:16,760 --> 00:25:19,600
a real understanding of the floor

592
00:25:19,600 --> 00:25:22,160
so we start from the beginning the

593
00:25:22,160 --> 00:25:23,840
andhra des des kay had a client that i

594
00:25:23,840 --> 00:25:25,370
lo to connect to the server on the phone

595
00:25:25,370 --> 00:25:27,890
if the begin mode is enabled so the app

596
00:25:27,890 --> 00:25:29,809
needs to be pulled off the phone and a

597
00:25:29,809 --> 00:25:33,530
deep unzipped first we want to convert

598
00:25:33,530 --> 00:25:35,630
the decks pile into more readable code

599
00:25:35,630 --> 00:25:37,280
so there are several solutions to do

600
00:25:37,280 --> 00:25:41,809
that back Molly and director compacted

601
00:25:41,809 --> 00:25:44,150
by into in simple assembly like syntax

602
00:25:44,150 --> 00:25:46,850
so we have to just mean but with dalvik

603
00:25:46,850 --> 00:25:49,700
opcodes so Jasmine is a syntax that are

604
00:25:49,700 --> 00:25:51,860
being created for describing GBM class

605
00:25:51,860 --> 00:25:54,440
in the first place so we'd prefer back

606
00:25:54,440 --> 00:25:56,240
smelly to the to the deck sir because

607
00:25:56,240 --> 00:25:58,610
the application can be recompiled using

608
00:25:58,610 --> 00:26:00,770
smelly a solution i've also been

609
00:26:00,770 --> 00:26:02,840
developed to decompile the Dex file into

610
00:26:02,840 --> 00:26:05,059
a jar right but there are usually lots

611
00:26:05,059 --> 00:26:07,340
of inconsistency an error in the the

612
00:26:07,340 --> 00:26:11,600
compiled code so here are some examples

613
00:26:11,600 --> 00:26:14,000
of medical compared to the Java

614
00:26:14,000 --> 00:26:19,100
equivalent so as you can see we have one

615
00:26:19,100 --> 00:26:22,070
line of Java which is very basic ternary

616
00:26:22,070 --> 00:26:24,740
operation and we have like a assistant

617
00:26:24,740 --> 00:26:28,370
life of medical well it's it's readable

618
00:26:28,370 --> 00:26:30,020
like the smelly is like close to

619
00:26:30,020 --> 00:26:31,250
assembly but there are lots of

620
00:26:31,250 --> 00:26:33,740
information annotations debug info line

621
00:26:33,740 --> 00:26:36,530
info but it's still way more painful

622
00:26:36,530 --> 00:26:39,470
than Java so I know lots of people in

623
00:26:39,470 --> 00:26:41,660
this room the North like driver I'm not

624
00:26:41,660 --> 00:26:43,730
the biggest fan either but you have to

625
00:26:43,730 --> 00:26:45,230
admit that Java is definitely more

626
00:26:45,230 --> 00:26:47,059
practical in your case you form to

627
00:26:47,059 --> 00:26:48,800
understand the flow a scoopful throw

628
00:26:48,800 --> 00:26:52,010
better so yeah we are talking about

629
00:26:52,010 --> 00:26:53,960
analyzing very big application here so

630
00:26:53,960 --> 00:26:55,550
so that's what we have to read the

631
00:26:55,550 --> 00:26:57,950
better from from the stallion so our

632
00:26:57,950 --> 00:27:00,080
goal would be to read occurred as close

633
00:27:00,080 --> 00:27:02,690
as Jeff as possible for now so let's see

634
00:27:02,690 --> 00:27:04,429
how pair from the two laptops about

635
00:27:04,429 --> 00:27:07,280
dexter ja regarding the combining these

636
00:27:07,280 --> 00:27:12,200
files so yeah here an example of a

637
00:27:12,200 --> 00:27:16,070
pretty bad decapitation so it's not

638
00:27:16,070 --> 00:27:18,110
application this car doesn't mean

639
00:27:18,110 --> 00:27:20,480
anything it just an ink I conversion

640
00:27:20,480 --> 00:27:22,700
which is as to the difficulty in

641
00:27:22,700 --> 00:27:25,010
reversing decks format into java storm

642
00:27:25,010 --> 00:27:28,760
at so we're going to talk about the

643
00:27:28,760 --> 00:27:30,430
difference with it to the 24

644
00:27:30,430 --> 00:27:33,020
cassie is written in java are combining

645
00:27:33,020 --> 00:27:34,820
two by perform at this is one big text

646
00:27:34,820 --> 00:27:37,010
file that Vicki's of service to base

647
00:27:37,010 --> 00:27:38,600
which leads us to having slightly

648
00:27:38,600 --> 00:27:40,940
different op codes but also led total

649
00:27:40,940 --> 00:27:44,330
code but the issue that concerns us

650
00:27:44,330 --> 00:27:48,140
regarding this decompiling issue our

651
00:27:48,140 --> 00:27:50,030
first of all that the so we're going to

652
00:27:50,030 --> 00:27:52,070
talk about the JDM obstruct your first

653
00:27:52,070 --> 00:27:55,100
in the java vm format java classes

654
00:27:55,100 --> 00:27:57,230
replicate elements in constant pools

655
00:27:57,230 --> 00:27:59,330
within the multiple class files this

656
00:27:59,330 --> 00:28:01,880
pools reference to method name classes

657
00:28:01,880 --> 00:28:05,240
and constants the X compiler eliminates

658
00:28:05,240 --> 00:28:07,930
a replication it quite a bit create

659
00:28:07,930 --> 00:28:10,970
single pool and eliminate an inline

660
00:28:10,970 --> 00:28:13,970
constant value into the bytecode so

661
00:28:13,970 --> 00:28:15,980
determining types is way more difficult

662
00:28:15,980 --> 00:28:18,650
since we have direct constant into the

663
00:28:18,650 --> 00:28:21,290
code one of the other issue that java

664
00:28:21,290 --> 00:28:23,570
bytecode structure loosely a structure

665
00:28:23,570 --> 00:28:26,510
loosely me Roscoe Wells David Baker does

666
00:28:26,510 --> 00:28:28,790
not make it way more difficult to

667
00:28:28,790 --> 00:28:31,850
recover into Java code you're not issue

668
00:28:31,850 --> 00:28:34,220
that David types are ambiguous sum up

669
00:28:34,220 --> 00:28:35,810
codes are the same for integers and

670
00:28:35,810 --> 00:28:38,270
floats which lead to very Hardy

671
00:28:38,270 --> 00:28:41,090
combinations so right well should you

672
00:28:41,090 --> 00:28:42,890
try to like you're only compiler and

673
00:28:42,890 --> 00:28:45,800
solve these issues or maybe not maybe

674
00:28:45,800 --> 00:28:48,530
you want to to have a bit of the two

675
00:28:48,530 --> 00:28:51,410
worlds having like the advantages of

676
00:28:51,410 --> 00:28:54,440
smelly within some Java deco painting

677
00:28:54,440 --> 00:28:57,830
pass from deck structure so what we want

678
00:28:57,830 --> 00:29:02,330
to have here some accuracy of us medical

679
00:29:02,330 --> 00:29:05,750
and yea big ogre v / up using the extra

680
00:29:05,750 --> 00:29:11,240
jar so what we can do is to find

681
00:29:11,240 --> 00:29:14,150
inconsistency in consistent method in

682
00:29:14,150 --> 00:29:16,460
java decompiler by usually pretty

683
00:29:16,460 --> 00:29:19,280
specific and can be spotted quickly so

684
00:29:19,280 --> 00:29:21,800
here are some examples under if you can

685
00:29:21,800 --> 00:29:24,110
see so it's both the inconsistent code

686
00:29:24,110 --> 00:29:26,480
there are like a pretty precise pattern

687
00:29:26,480 --> 00:29:27,890
when you see that kind of code it

688
00:29:27,890 --> 00:29:30,290
usually it certification or anything

689
00:29:30,290 --> 00:29:33,620
it's just a wrong the competition so in

690
00:29:33,620 --> 00:29:35,720
that case you many you can manually

691
00:29:35,720 --> 00:29:39,530
convert this method or you can do that

692
00:29:39,530 --> 00:29:41,370
as you read through the code and

693
00:29:41,370 --> 00:29:44,400
for specific issues but yeah so Dexter

694
00:29:44,400 --> 00:29:46,620
Jack can we have a lot of code a good

695
00:29:46,620 --> 00:29:48,030
part of it is still available and

696
00:29:48,030 --> 00:29:50,550
correct but just when you see some

697
00:29:50,550 --> 00:29:52,530
specific pattern of inconsistent code

698
00:29:52,530 --> 00:29:54,510
you can just repast replace it with

699
00:29:54,510 --> 00:29:57,330
medical or we mean if the code is used

700
00:29:57,330 --> 00:29:59,850
allowed by the application you can just

701
00:29:59,850 --> 00:30:05,070
reverse it manually we also use some

702
00:30:05,070 --> 00:30:08,510
visualization tool so and regard here

703
00:30:08,510 --> 00:30:12,180
user applique to take an applicator with

704
00:30:12,180 --> 00:30:15,960
laser probe and application as you can

705
00:30:15,960 --> 00:30:19,530
see you have each as you can see the

706
00:30:19,530 --> 00:30:21,600
whole application all the links within

707
00:30:21,600 --> 00:30:24,150
the altar calls from some curves and

708
00:30:24,150 --> 00:30:26,220
everything so it's way easy two ways

709
00:30:26,220 --> 00:30:32,790
easier to with a control flow so now we

710
00:30:32,790 --> 00:30:35,220
have the skin hand that verify if we are

711
00:30:35,220 --> 00:30:37,559
protected a secure container must

712
00:30:37,559 --> 00:30:39,559
provide a certain degree of protection

713
00:30:39,559 --> 00:30:42,090
depending on the scenario attack we want

714
00:30:42,090 --> 00:30:44,040
to be protected from we're going to look

715
00:30:44,040 --> 00:30:47,100
for different potential issues first of

716
00:30:47,100 --> 00:30:49,110
all the protection schema and encryption

717
00:30:49,110 --> 00:30:51,420
design we are going to be looking at how

718
00:30:51,420 --> 00:30:53,790
the data is encrypted and this

719
00:30:53,790 --> 00:30:55,170
information will allow us to determine

720
00:30:55,170 --> 00:30:57,660
how to do an attack on the phone that is

721
00:30:57,660 --> 00:31:00,630
off for our first step this could say

722
00:31:00,630 --> 00:31:03,510
let's say they they use a es which is

723
00:31:03,510 --> 00:31:05,730
good but what did they use aesthetically

724
00:31:05,730 --> 00:31:07,530
in the application it would make the

725
00:31:07,530 --> 00:31:10,020
encryption kind of worthless right same

726
00:31:10,020 --> 00:31:12,510
thing with recruiting the key insert

727
00:31:12,510 --> 00:31:13,860
with some static data on the device

728
00:31:13,860 --> 00:31:17,700
let's say the EMI we find stands what is

729
00:31:17,700 --> 00:31:19,950
they use very low on so picky no idea

730
00:31:19,950 --> 00:31:22,740
ECB mode it's going to be easier to find

731
00:31:22,740 --> 00:31:26,429
the key the Calusa derive the key which

732
00:31:26,429 --> 00:31:27,809
is a quick also derive the encryption

733
00:31:27,809 --> 00:31:29,460
key from the password is in personal

734
00:31:29,460 --> 00:31:32,340
base p derivation she's bitter but what

735
00:31:32,340 --> 00:31:34,830
is a user a low number of iteration and

736
00:31:34,830 --> 00:31:36,300
you can just grid fast as the password

737
00:31:36,300 --> 00:31:39,540
using like a GPU cluster or a single GPU

738
00:31:39,540 --> 00:31:42,179
with your machine let's say also they

739
00:31:42,179 --> 00:31:44,070
don't choose of souls with the password

740
00:31:44,070 --> 00:31:47,340
or things waited to password encryption

741
00:31:47,340 --> 00:31:50,280
our plane tech basketball in files using

742
00:31:50,280 --> 00:31:52,090
obfuscation basically

743
00:31:52,090 --> 00:31:55,059
so it's definitely it wouldn't be a good

744
00:31:55,059 --> 00:31:56,350
thing and you could look for those

745
00:31:56,350 --> 00:31:59,590
issues so they definitely large number

746
00:31:59,590 --> 00:32:01,059
of potential issue within an encryption

747
00:32:01,059 --> 00:32:05,679
and the schema is a projection schema so

748
00:32:05,679 --> 00:32:07,900
now we want to look at how cryptographic

749
00:32:07,900 --> 00:32:11,140
meteora hundred by the application let's

750
00:32:11,140 --> 00:32:13,299
say we have too many places I owe to

751
00:32:13,299 --> 00:32:15,970
protect the data request the first name

752
00:32:15,970 --> 00:32:17,620
would be to drive the key from the users

753
00:32:17,620 --> 00:32:19,330
password is in password basically a

754
00:32:19,330 --> 00:32:21,309
vessel function with a very high amount

755
00:32:21,309 --> 00:32:23,409
of iteration and a rather complex

756
00:32:23,409 --> 00:32:24,820
password that would be one of the

757
00:32:24,820 --> 00:32:27,490
problem with this implementation and the

758
00:32:27,490 --> 00:32:29,200
second one and maybe better but less

759
00:32:29,200 --> 00:32:31,000
practical would be to have a server-side

760
00:32:31,000 --> 00:32:33,760
key protected with a pin and only if you

761
00:32:33,760 --> 00:32:36,820
tries arrange for a private in those two

762
00:32:36,820 --> 00:32:39,880
scenario the question is how long should

763
00:32:39,880 --> 00:32:42,520
this suit iski be kept in memory and

764
00:32:42,520 --> 00:32:45,270
what attack what are the attacks denials

765
00:32:45,270 --> 00:32:47,649
we'd want to help or that are protected

766
00:32:47,649 --> 00:32:49,090
when the phone is on and the screen

767
00:32:49,090 --> 00:32:52,059
locks if they use strips modules and

768
00:32:52,059 --> 00:32:54,669
very ties our encryption key after after

769
00:32:54,669 --> 00:32:56,559
you this wouldn't be practical they

770
00:32:56,559 --> 00:32:58,809
would need to with the user we need to

771
00:32:58,809 --> 00:33:00,789
retype the password at each a single

772
00:33:00,789 --> 00:33:03,789
each for each request so let's say the

773
00:33:03,789 --> 00:33:05,950
keys or it dies only when the lock

774
00:33:05,950 --> 00:33:08,409
screen kicks in that can be fine and

775
00:33:08,409 --> 00:33:10,840
particular types of funny stallion it

776
00:33:10,840 --> 00:33:12,039
will be one of the thing you would be

777
00:33:12,039 --> 00:33:15,909
looking for in a secure container now

778
00:33:15,909 --> 00:33:18,010
also some more specific things ready to

779
00:33:18,010 --> 00:33:19,450
secure container you could be looking

780
00:33:19,450 --> 00:33:22,539
for how how is the password recovery

781
00:33:22,539 --> 00:33:24,460
function walking if they use password

782
00:33:24,460 --> 00:33:26,559
basically generation how can you retweet

783
00:33:26,559 --> 00:33:28,630
the key if you lose your password how

784
00:33:28,630 --> 00:33:30,669
can you reset it without the key of the

785
00:33:30,669 --> 00:33:33,159
password the specificity is supposed to

786
00:33:33,159 --> 00:33:34,840
be needed in order to decrypt the data

787
00:33:34,840 --> 00:33:37,059
they would have to store your password

788
00:33:37,059 --> 00:33:39,010
or his server side or maybe they used

789
00:33:39,010 --> 00:33:41,169
something else that whoever you to

790
00:33:41,169 --> 00:33:44,460
retrieve all reset the password

791
00:33:51,110 --> 00:33:52,559
huh

792
00:33:52,559 --> 00:33:55,180
ok

793
00:33:55,180 --> 00:33:58,420
yeah so you could also be looking for

794
00:33:58,420 --> 00:34:01,780
enzyme permission some other issues are

795
00:34:01,780 --> 00:34:03,220
the insert accessible side of the

796
00:34:03,220 --> 00:34:05,290
application how much can we do with

797
00:34:05,290 --> 00:34:09,610
those should be an area where user and

798
00:34:09,610 --> 00:34:11,770
malware could play in and it's come on

799
00:34:11,770 --> 00:34:14,409
VIN ability so some more specific if you

800
00:34:14,409 --> 00:34:16,630
can be wise like lock screen process

801
00:34:16,630 --> 00:34:18,760
what how do they log the phone

802
00:34:18,760 --> 00:34:21,190
connection credentials if they use the

803
00:34:21,190 --> 00:34:24,070
keystore like a hospital pissed off all

804
00:34:24,070 --> 00:34:25,750
those issue could could lead to making

805
00:34:25,750 --> 00:34:27,550
the seeker patina completely useless

806
00:34:27,550 --> 00:34:29,650
again most of the threats it would

807
00:34:29,650 --> 00:34:31,570
basically make the secure container just

808
00:34:31,570 --> 00:34:39,940
a layer of obfuscation so yeah you don't

809
00:34:39,940 --> 00:34:42,130
want to secure container to be like this

810
00:34:42,130 --> 00:34:49,300
cat keeping your secret safe so let's

811
00:34:49,300 --> 00:34:51,130
talk about reverse engineering of magic

812
00:34:51,130 --> 00:34:54,070
card so the cause the app is rarely in

813
00:34:54,070 --> 00:34:55,989
native code but you can it can be very

814
00:34:55,989 --> 00:34:58,210
interesting to look at some specific

815
00:34:58,210 --> 00:35:01,080
crypto function or other native course

816
00:35:01,080 --> 00:35:03,070
although you have to know what to look

817
00:35:03,070 --> 00:35:05,320
for just functional school using the

818
00:35:05,320 --> 00:35:07,570
Java and native interface which enable

819
00:35:07,570 --> 00:35:09,490
java code to interact with the two

820
00:35:09,490 --> 00:35:11,740
native code so you can use either pro

821
00:35:11,740 --> 00:35:13,690
which is a great tool to reading arm and

822
00:35:13,690 --> 00:35:15,700
some code and help you to find the

823
00:35:15,700 --> 00:35:22,900
asians more easily so what who are we

824
00:35:22,900 --> 00:35:24,490
looking for we want to know what they

825
00:35:24,490 --> 00:35:25,750
used to encrypt the data tags there you

826
00:35:25,750 --> 00:35:27,750
have if they use any external libraries

827
00:35:27,750 --> 00:35:30,400
other implementing the old code would

828
00:35:30,400 --> 00:35:33,670
there be some native code bags also they

829
00:35:33,670 --> 00:35:35,550
might be using some commercial libraries

830
00:35:35,550 --> 00:35:37,810
that could be some open source code that

831
00:35:37,810 --> 00:35:39,670
you could have a look at so the

832
00:35:39,670 --> 00:35:41,440
commutation if you find that would be

833
00:35:41,440 --> 00:35:44,740
better than reading some some native

834
00:35:44,740 --> 00:35:49,090
code let's talk about memory analysis we

835
00:35:49,090 --> 00:35:50,440
are going to go through this section and

836
00:35:50,440 --> 00:35:52,510
determine what is available and memory

837
00:35:52,510 --> 00:35:56,020
LOL so here you want to specify some we

838
00:35:56,020 --> 00:35:58,450
want verify some scenarios you want to

839
00:35:58,450 --> 00:36:00,520
be sure the data is protected when the

840
00:36:00,520 --> 00:36:03,310
device is locked and on i disgust you

841
00:36:03,310 --> 00:36:05,740
don't want to device to be stolen put in

842
00:36:05,740 --> 00:36:08,079
a fighh the bag too remote

843
00:36:08,079 --> 00:36:10,749
remote wipe and having someone access to

844
00:36:10,749 --> 00:36:14,200
memory one way on Anna's are in order to

845
00:36:14,200 --> 00:36:16,719
find this information if you know what

846
00:36:16,719 --> 00:36:19,359
you're looking for you can you can be

847
00:36:19,359 --> 00:36:21,880
looking for specific things such as your

848
00:36:21,880 --> 00:36:24,609
own password in the memory you can look

849
00:36:24,609 --> 00:36:26,200
for pass your password ash reading

850
00:36:26,200 --> 00:36:28,630
several ashing algorithm or you can be

851
00:36:28,630 --> 00:36:31,479
looking for any encryption key if it's

852
00:36:31,479 --> 00:36:33,400
in memory someone has been find it and

853
00:36:33,400 --> 00:36:35,529
you want to do you want to do that when

854
00:36:35,529 --> 00:36:39,099
the phone is on you can also look for

855
00:36:39,099 --> 00:36:41,589
Java objectives such as list and follow

856
00:36:41,589 --> 00:36:43,660
pointers in memory to see if any

857
00:36:43,660 --> 00:36:45,579
information can be found manually using

858
00:36:45,579 --> 00:36:47,859
these techniques so yeah by obtaining

859
00:36:47,859 --> 00:36:49,089
the remember you can find other things

860
00:36:49,089 --> 00:36:52,209
like five descriptor and open files on

861
00:36:52,209 --> 00:36:54,430
open files on network connection we can

862
00:36:54,430 --> 00:36:55,959
be very useful to do some memory

863
00:36:55,959 --> 00:37:00,400
analysis so how would you do that there

864
00:37:00,400 --> 00:37:02,319
are several way to obtain memory turn

865
00:37:02,319 --> 00:37:04,269
the easiest way is when you have access

866
00:37:04,269 --> 00:37:05,739
to the device once you bypass the lock

867
00:37:05,739 --> 00:37:07,359
screen and Goten root access for

868
00:37:07,359 --> 00:37:09,969
instance another good way to get the

869
00:37:09,969 --> 00:37:11,680
memory dump would be to simply use the

870
00:37:11,680 --> 00:37:14,949
product file system on Linux um that

871
00:37:14,949 --> 00:37:18,670
would show all the process as files but

872
00:37:18,670 --> 00:37:20,650
still very accurate and using the food

873
00:37:20,650 --> 00:37:23,769
such as Memphis or we compile farm would

874
00:37:23,769 --> 00:37:26,769
be way better although the dalvik VM

875
00:37:26,769 --> 00:37:28,959
made it easier it can generate memory

876
00:37:28,959 --> 00:37:31,449
profiling them in response to signal's

877
00:37:31,449 --> 00:37:33,699
the garbage collector condemn to ash

878
00:37:33,699 --> 00:37:35,589
profile which is a heap profiler file

879
00:37:35,589 --> 00:37:37,930
containing a lot of in structural

880
00:37:37,930 --> 00:37:40,839
information despite this trip with

881
00:37:40,839 --> 00:37:42,940
dalvik specific data and you can read it

882
00:37:42,940 --> 00:37:46,630
with any java application accepting Java

883
00:37:46,630 --> 00:37:52,239
as profiles let's see how how do we want

884
00:37:52,239 --> 00:37:54,339
to read how could you read this memory

885
00:37:54,339 --> 00:37:56,859
them a new structure way to just be

886
00:37:56,859 --> 00:37:59,049
would be to just flip for strings or

887
00:37:59,049 --> 00:38:01,660
specific data like part of keys that you

888
00:38:01,660 --> 00:38:04,719
know I always said that way you could

889
00:38:04,719 --> 00:38:07,119
just use grape or the strings

890
00:38:07,119 --> 00:38:09,249
application on Linux but you have to

891
00:38:09,249 --> 00:38:11,709
know that strings on the dalvik debit

892
00:38:11,709 --> 00:38:15,239
Springer utf-16 so you'll be looking for

893
00:38:15,239 --> 00:38:18,069
details so one character would be to

894
00:38:18,069 --> 00:38:20,270
base the first base

895
00:38:20,270 --> 00:38:23,900
zero usually sorry ties and so this

896
00:38:23,900 --> 00:38:26,150
would be a way but I mean I profound a

897
00:38:26,150 --> 00:38:28,340
pencil i prefer visualvm which is an

898
00:38:28,340 --> 00:38:31,130
application reading edge profiles so you

899
00:38:31,130 --> 00:38:34,010
can do a lot of things with that this is

900
00:38:34,010 --> 00:38:38,270
an example in the next slide where so

901
00:38:38,270 --> 00:38:40,690
here we we have to hide some things but

902
00:38:40,690 --> 00:38:45,380
we basically do oql query and we will be

903
00:38:45,380 --> 00:38:48,350
looking for we can do regex and look for

904
00:38:48,350 --> 00:38:51,860
specific springs in the memory them so

905
00:38:51,860 --> 00:38:54,830
here we can see like some sequin request

906
00:38:54,830 --> 00:38:58,910
some password some fields name password

907
00:38:58,910 --> 00:39:02,360
and some cemetery boots that could

908
00:39:02,360 --> 00:39:06,530
interest us so the next part is

909
00:39:06,530 --> 00:39:08,720
modifying an application so why would

910
00:39:08,720 --> 00:39:12,080
you modify an application it would help

911
00:39:12,080 --> 00:39:14,210
us load it an application better and see

912
00:39:14,210 --> 00:39:17,810
what an attacker can do you can find

913
00:39:17,810 --> 00:39:20,540
stands motivated all certificates to use

914
00:39:20,540 --> 00:39:22,730
a proxy using a like the proxy

915
00:39:22,730 --> 00:39:24,470
certificates in the case the application

916
00:39:24,470 --> 00:39:26,090
that is Owen kissed all you don't want

917
00:39:26,090 --> 00:39:28,550
to travel your proxy certificate I mean

918
00:39:28,550 --> 00:39:31,310
this is too difficult to inject that as

919
00:39:31,310 --> 00:39:34,970
I said close be stripped off but an HTTP

920
00:39:34,970 --> 00:39:36,710
use but the server will have to accept

921
00:39:36,710 --> 00:39:39,830
it specific could be looking for to like

922
00:39:39,830 --> 00:39:42,140
lockscreen bypass potentially if they

923
00:39:42,140 --> 00:39:43,820
don't do it right you could do that with

924
00:39:43,820 --> 00:39:46,600
modifying in modifying the application

925
00:39:46,600 --> 00:39:49,460
so modifying an application would allow

926
00:39:49,460 --> 00:39:50,810
you to leverage the application itself

927
00:39:50,810 --> 00:39:53,690
to do any deification for you let's say

928
00:39:53,690 --> 00:39:56,180
they have password hash the password has

929
00:39:56,180 --> 00:39:58,700
a very appreciated in the file that they

930
00:39:58,700 --> 00:40:00,890
go through a lot of function in the

931
00:40:00,890 --> 00:40:03,650
application you can just dump it out in

932
00:40:03,650 --> 00:40:05,150
the log file when the application

933
00:40:05,150 --> 00:40:07,910
verifies the password hunter so it could

934
00:40:07,910 --> 00:40:09,620
save you a lot of time and shows that

935
00:40:09,620 --> 00:40:11,540
participation is really pointless for

936
00:40:11,540 --> 00:40:14,270
android applications you could also

937
00:40:14,270 --> 00:40:17,150
obviously had debug logs stacked rice

938
00:40:17,150 --> 00:40:19,550
specific locations so it would be really

939
00:40:19,550 --> 00:40:24,350
helpful to to audit application so how

940
00:40:24,350 --> 00:40:26,690
would you do that so you can decompile

941
00:40:26,690 --> 00:40:28,070
the applications are some tools that

942
00:40:28,070 --> 00:40:30,680
make it way better way easier for you

943
00:40:30,680 --> 00:40:33,670
such as a peek a tool that will give you

944
00:40:33,670 --> 00:40:36,010
medical you can then modify is recompile

945
00:40:36,010 --> 00:40:37,780
it with the same tour or you can also

946
00:40:37,780 --> 00:40:40,089
write Java code compile it using deck

947
00:40:40,089 --> 00:40:42,520
sir the nude backs money to get it back

948
00:40:42,520 --> 00:40:45,490
in the smiley format but the application

949
00:40:45,490 --> 00:40:47,680
is designed the hungry 16 will not

950
00:40:47,680 --> 00:40:49,510
install any application that is not

951
00:40:49,510 --> 00:40:51,430
signed but you can sell time the

952
00:40:51,430 --> 00:40:53,589
application so since we are no

953
00:40:53,589 --> 00:40:58,510
certificate authorities needed so let's

954
00:40:58,510 --> 00:41:02,079
talk about dynamic analysis it can be

955
00:41:02,079 --> 00:41:03,430
very useful to understand what an

956
00:41:03,430 --> 00:41:05,020
application does we are going to go

957
00:41:05,020 --> 00:41:08,319
through some available tools so estrace

958
00:41:08,319 --> 00:41:10,240
could be used to monitor system caused

959
00:41:10,240 --> 00:41:13,089
by koala built into the pod to network

960
00:41:13,089 --> 00:41:15,910
and Phi's can it can attach it can be

961
00:41:15,910 --> 00:41:18,099
attached to the application process but

962
00:41:18,099 --> 00:41:19,569
to surprise the application form it

963
00:41:19,569 --> 00:41:22,180
starts by hooking a zygote process and

964
00:41:22,180 --> 00:41:24,490
follow the phone this is a good process

965
00:41:24,490 --> 00:41:26,980
being fork when an application in

966
00:41:26,980 --> 00:41:29,890
started GDB can help the bring some

967
00:41:29,890 --> 00:41:31,920
native Native parts of the application

968
00:41:31,920 --> 00:41:35,049
you can have a GD b remote server setup

969
00:41:35,049 --> 00:41:38,319
of the phone and connect to it GT ms

970
00:41:38,319 --> 00:41:40,420
could be used to it from the raid sdk

971
00:41:40,420 --> 00:41:43,900
can generate prices you can read with

972
00:41:43,900 --> 00:41:48,510
tools such as traceview and james wisdom

973
00:41:50,940 --> 00:41:53,589
also have some tools that are a bit more

974
00:41:53,589 --> 00:41:57,069
efficient jdb it was very used to debate

975
00:41:57,069 --> 00:41:59,200
with java classes it's not race you call

976
00:41:59,200 --> 00:42:02,650
supported by the dalvik VM so yeah and

977
00:42:02,650 --> 00:42:04,150
some kind of request so scarred and

978
00:42:04,150 --> 00:42:05,650
crashes are quakecon so it's not the

979
00:42:05,650 --> 00:42:08,589
best tool you might want to use java

980
00:42:08,589 --> 00:42:12,400
debug java debug wire protocol the JD WP

981
00:42:12,400 --> 00:42:15,760
which can talk to the Java debugger and

982
00:42:15,760 --> 00:42:17,770
can do a lot of a lot of other things

983
00:42:17,770 --> 00:42:19,960
you can hukum dalvik methods and I

984
00:42:19,960 --> 00:42:23,859
process States etc unreg also it's a

985
00:42:23,859 --> 00:42:27,880
very good to using a JD WP and ddms to

986
00:42:27,880 --> 00:42:29,680
cook who can later then it's quick table

987
00:42:29,680 --> 00:42:33,670
so you can do lot of things so again

988
00:42:33,670 --> 00:42:36,160
with the future of dynamic and Asus on

989
00:42:36,160 --> 00:42:39,030
other ways some people have done some

990
00:42:39,030 --> 00:42:41,460
index have done a semi

991
00:42:41,460 --> 00:42:44,849
congestion but no not for you nor your

992
00:42:44,849 --> 00:42:47,940
practical IP is out there yet but you

993
00:42:47,940 --> 00:42:49,530
can do some very interesting things with

994
00:42:49,530 --> 00:42:52,440
that using the Java dynamic proxy to

995
00:42:52,440 --> 00:42:55,050
inject bytecode on the fly so yeah it's

996
00:42:55,050 --> 00:42:57,030
great a great things that's all that we

997
00:42:57,030 --> 00:43:00,150
could do with that so now you know how

998
00:43:00,150 --> 00:43:01,530
to find vulnerabilities are insecure

999
00:43:01,530 --> 00:43:03,690
containers and how we process that we

1000
00:43:03,690 --> 00:43:05,940
proceeded to test them I'm gonna get

1001
00:43:05,940 --> 00:43:12,540
over to Matt to conclude the talk okay

1002
00:43:12,540 --> 00:43:14,609
oh I'm going to kind of wrap this up a

1003
00:43:14,609 --> 00:43:16,980
little bit about you know what we found

1004
00:43:16,980 --> 00:43:20,369
when actually doing testing biggest

1005
00:43:20,369 --> 00:43:23,520
thing we were marketing claims yeah so

1006
00:43:23,520 --> 00:43:25,320
some of the claims may be a hundred

1007
00:43:25,320 --> 00:43:27,660
percent true but are they relevant again

1008
00:43:27,660 --> 00:43:30,660
this goes back to you know so a big

1009
00:43:30,660 --> 00:43:33,420
claim is your data is secure at rest but

1010
00:43:33,420 --> 00:43:36,570
if your data is never at rest does it

1011
00:43:36,570 --> 00:43:39,869
matter if it's secure personally I don't

1012
00:43:39,869 --> 00:43:43,710
know I don't know if it would your

1013
00:43:43,710 --> 00:43:46,950
determine what secure means to you you

1014
00:43:46,950 --> 00:43:49,650
know do you need your device to be

1015
00:43:49,650 --> 00:43:51,930
secure if a random person steals it or

1016
00:43:51,930 --> 00:43:54,720
random thief or do you need it secure

1017
00:43:54,720 --> 00:43:56,190
from a government entity you know

1018
00:43:56,190 --> 00:43:59,010
someone who could potentially throw you

1019
00:43:59,010 --> 00:44:00,570
know one hundred thousand dollars of

1020
00:44:00,570 --> 00:44:02,940
equipment unlimited technical resources

1021
00:44:02,940 --> 00:44:05,330
and whatever they need to get your data

1022
00:44:05,330 --> 00:44:08,210
you know there's a big difference there

1023
00:44:08,210 --> 00:44:11,490
now as for penetration test results you

1024
00:44:11,490 --> 00:44:13,020
know in threat models and these

1025
00:44:13,020 --> 00:44:15,240
companies like to tell how secure they

1026
00:44:15,240 --> 00:44:17,640
are and they even say they've been

1027
00:44:17,640 --> 00:44:19,950
tested why don't they release the

1028
00:44:19,950 --> 00:44:25,859
results yeah let's test it yourself you

1029
00:44:25,859 --> 00:44:28,440
know once you have an idea of kind of

1030
00:44:28,440 --> 00:44:32,970
where you want to be secure and how who

1031
00:44:32,970 --> 00:44:34,710
you want to be secure from you know

1032
00:44:34,710 --> 00:44:37,980
Justin we just gave you the techniques

1033
00:44:37,980 --> 00:44:40,230
and tools you can use more or less the

1034
00:44:40,230 --> 00:44:42,960
exact things we did to look for issues

1035
00:44:42,960 --> 00:44:45,810
you know go out and see if things are

1036
00:44:45,810 --> 00:44:48,180
really as secure as they claim you know

1037
00:44:48,180 --> 00:44:52,260
some tips for that watch the RAM

1038
00:44:52,260 --> 00:44:55,800
you know insecure ram usage can lead to

1039
00:44:55,800 --> 00:44:59,310
many bad things not properly clearing

1040
00:44:59,310 --> 00:45:02,100
things out whatever they may be could

1041
00:45:02,100 --> 00:45:06,150
cause major issues review the crypto you

1042
00:45:06,150 --> 00:45:09,300
know verify their using they have

1043
00:45:09,300 --> 00:45:12,600
property usage also look out for

1044
00:45:12,600 --> 00:45:14,820
outdated crypto implementations you know

1045
00:45:14,820 --> 00:45:17,070
are they using up-to-date standards are

1046
00:45:17,070 --> 00:45:19,530
they using you know something from a

1047
00:45:19,530 --> 00:45:22,350
while ago and again if you think about

1048
00:45:22,350 --> 00:45:25,040
fifths it just needs an approved

1049
00:45:25,040 --> 00:45:28,860
algorithm Fitz is kind of old it may

1050
00:45:28,860 --> 00:45:32,210
have approved but it may not be the best

1051
00:45:32,210 --> 00:45:35,580
also look out for basic things like no

1052
00:45:35,580 --> 00:45:40,200
salt or no IV these can quickly and

1053
00:45:40,200 --> 00:45:44,070
easily make an attackers job that much

1054
00:45:44,070 --> 00:45:48,230
easier don't rely on the Android

1055
00:45:48,230 --> 00:45:51,150
protections to keep you safe you know as

1056
00:45:51,150 --> 00:45:53,130
we've seen walk screen can be bypassed

1057
00:45:53,130 --> 00:45:56,940
and flash can be read without debugging

1058
00:45:56,940 --> 00:45:59,480
enabled you know that you fed devices

1059
00:45:59,480 --> 00:46:01,500
really interesting things you know they

1060
00:46:01,500 --> 00:46:04,560
literally plug in and can make a copy of

1061
00:46:04,560 --> 00:46:08,520
your device even if you have the screen

1062
00:46:08,520 --> 00:46:12,210
locked and no debugging enabled anything

1063
00:46:12,210 --> 00:46:17,790
like that very interesting stuff and

1064
00:46:17,790 --> 00:46:19,800
finally be careful with your sensitive

1065
00:46:19,800 --> 00:46:22,020
data yeah nothing is one hundred percent

1066
00:46:22,020 --> 00:46:26,940
secure the more attack vectors there are

1067
00:46:26,940 --> 00:46:30,120
the harder it is to secure this you know

1068
00:46:30,120 --> 00:46:31,710
it's like your phone has so many ways

1069
00:46:31,710 --> 00:46:34,560
into it it's not like a laptop where you

1070
00:46:34,560 --> 00:46:35,940
plug it in or you get all wild less

1071
00:46:35,940 --> 00:46:37,260
that's the way in your phone is

1072
00:46:37,260 --> 00:46:39,390
constantly on constantly on some sort of

1073
00:46:39,390 --> 00:46:41,670
wireless network constantly exchanging

1074
00:46:41,670 --> 00:46:45,030
data and it's also on you all the time

1075
00:46:45,030 --> 00:46:49,080
everywhere you go so easier methods to

1076
00:46:49,080 --> 00:46:51,030
get into it and easier methods get

1077
00:46:51,030 --> 00:46:55,050
access to it you know again phone has a

1078
00:46:55,050 --> 00:46:57,210
very large threat surface be very

1079
00:46:57,210 --> 00:47:00,570
careful with that and finally you know

1080
00:47:00,570 --> 00:47:04,800
secure containers if done right

1081
00:47:04,800 --> 00:47:09,630
let me restate that done right could be

1082
00:47:09,630 --> 00:47:14,460
secure relatively you know again we have

1083
00:47:14,460 --> 00:47:15,900
attack vectors out there that are

1084
00:47:15,900 --> 00:47:18,780
working at a whole nother level you know

1085
00:47:18,780 --> 00:47:21,810
baseband exploits and for more over the

1086
00:47:21,810 --> 00:47:24,780
air no matter what you know these may

1087
00:47:24,780 --> 00:47:27,750
get your data so that's where it comes

1088
00:47:27,750 --> 00:47:32,430
in with those things in mind you know

1089
00:47:32,430 --> 00:47:34,620
you really want to be carrying data

1090
00:47:34,620 --> 00:47:38,330
that's that sensitive personally I don't

1091
00:47:38,330 --> 00:47:42,170
so with that we're going to close it up

1092
00:47:42,170 --> 00:47:45,030
just like to say thanks to a few people

1093
00:47:45,030 --> 00:47:50,040
you know I sec partners great place Alex

1094
00:47:50,040 --> 00:47:51,720
Thomas he's one of the partners been

1095
00:47:51,720 --> 00:47:54,330
great help on this talk Justine Osborne

1096
00:47:54,330 --> 00:47:56,430
she was originally supposed to be here

1097
00:47:56,430 --> 00:47:59,700
but couldn't make it Jesse burns david

1098
00:47:59,700 --> 00:48:03,510
teel our actual boss Paul Young was

1099
00:48:03,510 --> 00:48:07,110
really awesome help at a very last

1100
00:48:07,110 --> 00:48:11,000
minute and finally erin go to Fiore and

1101
00:48:11,000 --> 00:48:14,430
that is it well thank you very much i

1102
00:48:14,430 --> 00:48:15,780
say partners hacking the box thanks

1103
00:48:15,780 --> 00:48:17,760
youtube for making a particular time to

1104
00:48:17,760 --> 00:48:19,650
come to hack in the Box this year thank

1105
00:48:19,650 --> 00:48:22,100
you very much

