1
00:00:07,600 --> 00:00:09,660
you

2
00:00:13,340 --> 00:00:18,390
awesome well thank you for<font color="#E5E5E5"> coming</font><font color="#CCCCCC"> again</font>

3
00:00:15,780 --> 00:00:20,820
<font color="#CCCCCC">my name is Daniel Bohannon I'm a really</font>

4
00:00:18,390 --> 00:00:24,000
<font color="#E5E5E5">big coffee some would say snob I would</font>

5
00:00:20,820 --> 00:00:26,310
say connoisseur<font color="#E5E5E5"> but and yeah this talk</font>

6
00:00:24,000 --> 00:00:28,259
is<font color="#CCCCCC"> invoke da sophistication techniques</font>

7
00:00:26,310 --> 00:00:29,759
<font color="#E5E5E5">for</font><font color="#CCCCCC"> fin style dose level command</font><font color="#E5E5E5"> office</font>

8
00:00:28,260 --> 00:00:31,770
<font color="#CCCCCC">Gatien and hopefully by the end of</font><font color="#E5E5E5"> this</font>

9
00:00:29,759 --> 00:00:33,290
talk this syntax I'm using here<font color="#E5E5E5"> that</font>

10
00:00:31,770 --> 00:00:36,570
will<font color="#E5E5E5"> make a little bit more sense</font><font color="#CCCCCC"> a</font>

11
00:00:33,290 --> 00:00:41,100
little<font color="#CCCCCC"> bit</font><font color="#E5E5E5"> about me I'm a blue</font><font color="#CCCCCC"> Timur I</font>

12
00:00:36,570 --> 00:00:43,079
work for<font color="#CCCCCC"> Mandy at</font><font color="#E5E5E5"> far I kind of my story</font>

13
00:00:41,100 --> 00:00:44,910
is I started<font color="#E5E5E5"> out in IT operations</font><font color="#CCCCCC"> than</font>

14
00:00:43,079 --> 00:00:46,500
security operations then moved into

15
00:00:44,910 --> 00:00:48,538
Incident Response consulting with Mandy

16
00:00:46,500 --> 00:00:49,980
<font color="#CCCCCC">I did that</font><font color="#E5E5E5"> for about two</font><font color="#CCCCCC"> years</font><font color="#E5E5E5"> and</font>

17
00:00:48,539 --> 00:00:52,890
really fell in love<font color="#E5E5E5"> just with the</font>

18
00:00:49,980 --> 00:00:55,140
detection research<font color="#E5E5E5"> I'm kind</font><font color="#CCCCCC"> of</font><font color="#E5E5E5"> taking</font>

19
00:00:52,890 --> 00:00:56,429
<font color="#CCCCCC">ideas and applying them</font><font color="#E5E5E5"> at scale and</font><font color="#CCCCCC"> so</font>

20
00:00:55,140 --> 00:00:58,519
<font color="#E5E5E5">that's what I do now on the advanced</font>

21
00:00:56,429 --> 00:01:01,710
<font color="#E5E5E5">practices team at</font><font color="#CCCCCC"> far I'm</font><font color="#E5E5E5"> and their</font>

22
00:00:58,519 --> 00:01:04,349
<font color="#CCCCCC">twitter</font><font color="#E5E5E5"> handle blog</font><font color="#CCCCCC"> I have an</font><font color="#E5E5E5"> obsession</font>

23
00:01:01,710 --> 00:01:06,150
with with obfuscation for the purposes

24
00:01:04,349 --> 00:01:07,559
of better detecting it<font color="#E5E5E5"> I'm some the</font>

25
00:01:06,150 --> 00:01:09,390
author of a few projects here in<font color="#E5E5E5"> bow</font>

26
00:01:07,560 --> 00:01:12,230
confiscation<font color="#E5E5E5"> and invoke</font><font color="#CCCCCC"> Cradle crafter</font>

27
00:01:09,390 --> 00:01:15,330
<font color="#CCCCCC">PowerShell obfuscation frameworks I</font>

28
00:01:12,230 --> 00:01:17,520
co-developed revoke obfuscation<font color="#E5E5E5"> with Lee</font>

29
00:01:15,330 --> 00:01:19,140
<font color="#E5E5E5">Holmes from Microsoft which is</font><font color="#CCCCCC"> revoke</font>

30
00:01:17,520 --> 00:01:20,910
confiscation is<font color="#E5E5E5"> basically using data</font>

31
00:01:19,140 --> 00:01:22,980
science<font color="#E5E5E5"> to detect obviously added</font>

32
00:01:20,910 --> 00:01:25,890
PowerShell commands and scripts and<font color="#E5E5E5"> then</font>

33
00:01:22,980 --> 00:01:29,730
today<font color="#E5E5E5"> invoked</font><font color="#CCCCCC"> a sophistication</font><font color="#E5E5E5"> which is</font>

34
00:01:25,890 --> 00:01:31,590
command<font color="#E5E5E5"> exe obfuscation so a brief</font>

35
00:01:29,730 --> 00:01:33,830
disclaimer<font color="#CCCCCC"> none of the stuff I'm saying</font>

36
00:01:31,590 --> 00:01:38,070
is pointing directly to any one client

37
00:01:33,830 --> 00:01:39,270
or customer<font color="#CCCCCC"> Fri</font><font color="#E5E5E5"> mandiant most of all</font>

38
00:01:38,070 --> 00:01:41,970
were<font color="#CCCCCC"> talking about is things we've never</font>

39
00:01:39,270 --> 00:01:45,929
<font color="#E5E5E5">seen in the wild before but yeah don't</font>

40
00:01:41,970 --> 00:01:47,250
draw any conclusions there so<font color="#E5E5E5"> post-lunch</font>

41
00:01:45,930 --> 00:01:48,990
<font color="#E5E5E5">how do we keep the energy high what are</font>

42
00:01:47,250 --> 00:01:50,130
we going<font color="#E5E5E5"> to be talking about</font><font color="#CCCCCC"> I'm</font><font color="#E5E5E5"> going</font>

43
00:01:48,990 --> 00:01:51,449
<font color="#E5E5E5">to start just with kind of a</font><font color="#CCCCCC"> high-level</font>

44
00:01:50,130 --> 00:01:54,360
overview of<font color="#E5E5E5"> the state of obfuscation</font>

45
00:01:51,450 --> 00:01:56,670
today<font color="#E5E5E5"> and then we're gonna dive</font><font color="#CCCCCC"> right in</font>

46
00:01:54,360 --> 00:01:58,440
<font color="#CCCCCC">and look at three case studies from</font><font color="#E5E5E5"> this</font>

47
00:01:56,670 --> 00:01:59,910
past year of office<font color="#CCCCCC"> Gatien in the wild</font>

48
00:01:58,440 --> 00:02:01,800
by some pretty interesting threat groups

49
00:01:59,910 --> 00:02:03,899
<font color="#E5E5E5">in these three case</font><font color="#CCCCCC"> studies are really</font>

50
00:02:01,800 --> 00:02:05,850
<font color="#E5E5E5">what drove me I'm down this road</font><font color="#CCCCCC"> of</font>

51
00:02:03,900 --> 00:02:07,830
research<font color="#CCCCCC"> and then we're gonna look at</font>

52
00:02:05,850 --> 00:02:09,959
<font color="#E5E5E5">office</font><font color="#CCCCCC"> cating legitimate binary names on</font>

53
00:02:07,830 --> 00:02:11,819
the command<font color="#CCCCCC"> line and</font><font color="#E5E5E5"> then we're gonna</font>

54
00:02:09,959 --> 00:02:13,670
look a little bit deeper<font color="#CCCCCC"> until I'm</font>

55
00:02:11,819 --> 00:02:15,569
calling character insertion obfuscation

56
00:02:13,670 --> 00:02:17,579
<font color="#E5E5E5">characters you can insert into any</font>

57
00:02:15,569 --> 00:02:19,679
command on the command line<font color="#CCCCCC"> to try</font><font color="#E5E5E5"> to</font>

58
00:02:17,580 --> 00:02:21,270
break rigid detections<font color="#CCCCCC"> and then we're</font>

59
00:02:19,680 --> 00:02:23,430
<font color="#E5E5E5">going to combine all those pieces into</font>

60
00:02:21,270 --> 00:02:25,290
more advanced payload like obfuscation

61
00:02:23,430 --> 00:02:26,510
of the entire command<font color="#E5E5E5"> then we're gonna</font>

62
00:02:25,290 --> 00:02:28,700
<font color="#E5E5E5">do a demo of invoked</font>

63
00:02:26,510 --> 00:02:32,629
<font color="#E5E5E5">sophistication and then we'll talk about</font>

64
00:02:28,700 --> 00:02:35,420
detecting the ossification<font color="#E5E5E5"> and so yeah</font>

65
00:02:32,629 --> 00:02:37,040
<font color="#CCCCCC">state</font><font color="#E5E5E5"> of office</font><font color="#CCCCCC"> keishon</font><font color="#E5E5E5"> so from a red</font>

66
00:02:35,420 --> 00:02:40,309
team perspective<font color="#E5E5E5"> obfuscation is great</font>

67
00:02:37,040 --> 00:02:42,590
because<font color="#E5E5E5"> it takes a little effort</font><font color="#CCCCCC"> to</font>

68
00:02:40,310 --> 00:02:44,180
basically<font color="#E5E5E5"> get big gains</font><font color="#CCCCCC"> in the whole</font>

69
00:02:42,590 --> 00:02:45,739
point that<font color="#CCCCCC"> I research this is again as a</font>

70
00:02:44,180 --> 00:02:47,569
defender I'm trying to<font color="#E5E5E5"> figure</font><font color="#CCCCCC"> out what</font>

71
00:02:45,739 --> 00:02:50,239
are all<font color="#E5E5E5"> the ways</font><font color="#CCCCCC"> that I can mess up</font><font color="#E5E5E5"> my</font>

72
00:02:47,569 --> 00:02:52,250
own detection<font color="#CCCCCC"> and let me</font><font color="#E5E5E5"> figure that out</font>

73
00:02:50,239 --> 00:02:55,340
first so<font color="#CCCCCC"> I can</font><font color="#E5E5E5"> make my detection more</font>

74
00:02:52,250 --> 00:02:56,659
robust<font color="#CCCCCC"> and</font><font color="#E5E5E5"> so I don't mean there's</font>

75
00:02:55,340 --> 00:02:58,220
office<font color="#E5E5E5"> and frameworks for so many</font>

76
00:02:56,659 --> 00:03:00,709
languages<font color="#E5E5E5"> available for free out there</font>

77
00:02:58,220 --> 00:03:02,000
<font color="#E5E5E5">and even though I may be biased</font><font color="#CCCCCC"> I don't</font>

78
00:03:00,709 --> 00:03:03,530
<font color="#E5E5E5">really see the slowing down anytime soon</font>

79
00:03:02,000 --> 00:03:05,629
<font color="#E5E5E5">just because it's so</font><font color="#CCCCCC"> effective and</font><font color="#E5E5E5"> we</font>

80
00:03:03,530 --> 00:03:07,190
see so many attackers continually being

81
00:03:05,629 --> 00:03:10,220
creative<font color="#E5E5E5"> and how they office</font><font color="#CCCCCC"> skate to</font>

82
00:03:07,190 --> 00:03:11,720
get around detection<font color="#E5E5E5"> from the blue team</font>

83
00:03:10,220 --> 00:03:13,540
perspective<font color="#CCCCCC"> and there's actually been</font>

84
00:03:11,720 --> 00:03:15,709
<font color="#CCCCCC">some significant improvements in</font>

85
00:03:13,540 --> 00:03:18,078
capabilities and visibility<font color="#CCCCCC"> over the</font>

86
00:03:15,709 --> 00:03:19,909
past several years<font color="#E5E5E5"> that</font><font color="#CCCCCC"> doesn't mean</font>

87
00:03:18,079 --> 00:03:21,260
many<font color="#E5E5E5"> people are</font><font color="#CCCCCC"> actually taking</font>

88
00:03:19,909 --> 00:03:23,450
advantage<font color="#E5E5E5"> of</font><font color="#CCCCCC"> this</font><font color="#E5E5E5"> additional visibility</font>

89
00:03:21,260 --> 00:03:26,358
<font color="#E5E5E5">but you have things like Microsoft's</font><font color="#CCCCCC"> AMS</font>

90
00:03:23,450 --> 00:03:27,798
<font color="#CCCCCC">I the anti-malware scan interface on etw</font>

91
00:03:26,359 --> 00:03:28,940
which has been around<font color="#E5E5E5"> forever but it's</font>

92
00:03:27,799 --> 00:03:31,280
kind of<font color="#E5E5E5"> being rediscovered in the</font>

93
00:03:28,940 --> 00:03:32,359
security world<font color="#CCCCCC"> for event tracing for</font>

94
00:03:31,280 --> 00:03:34,129
<font color="#E5E5E5">Windows for additional visibility</font>

95
00:03:32,359 --> 00:03:35,930
<font color="#CCCCCC">without</font><font color="#E5E5E5"> having to write your own kernel</font>

96
00:03:34,129 --> 00:03:37,399
drivers and stuff<font color="#E5E5E5"> like that</font><font color="#CCCCCC"> um you</font><font color="#E5E5E5"> have</font>

97
00:03:35,930 --> 00:03:38,629
signature<font color="#E5E5E5"> list detection approaches</font>

98
00:03:37,400 --> 00:03:41,030
which is what this<font color="#CCCCCC"> is here</font><font color="#E5E5E5"> this is</font><font color="#CCCCCC"> the</font>

99
00:03:38,629 --> 00:03:42,980
little<font color="#CCCCCC"> gif of the Revo</font><font color="#E5E5E5"> Confiscation work</font>

100
00:03:41,030 --> 00:03:44,000
that<font color="#E5E5E5"> Lee and</font><font color="#CCCCCC"> I did but there's always</font>

101
00:03:42,980 --> 00:03:46,399
room<font color="#CCCCCC"> for improvement</font>

102
00:03:44,000 --> 00:03:48,500
because attackers don't stop being

103
00:03:46,400 --> 00:03:50,629
innovative<font color="#E5E5E5"> they see these</font><font color="#CCCCCC"> improvements</font>

104
00:03:48,500 --> 00:03:52,519
and<font color="#E5E5E5"> they say okay well maybe we'll just</font>

105
00:03:50,629 --> 00:03:54,668
choose softer targets that aren't taking

106
00:03:52,519 --> 00:03:56,930
<font color="#CCCCCC">advantage</font><font color="#E5E5E5"> of this additional visibility</font>

107
00:03:54,669 --> 00:03:58,190
<font color="#CCCCCC">maybe we'll</font><font color="#E5E5E5"> just disable that visibility</font>

108
00:03:56,930 --> 00:04:00,139
<font color="#E5E5E5">you know you look at any kind of</font>

109
00:03:58,190 --> 00:04:01,849
<font color="#E5E5E5">off-the-shelf</font><font color="#CCCCCC"> Empire download or now it</font>

110
00:04:00,139 --> 00:04:03,319
starts with an Z you know script<font color="#CCCCCC"> lock</font>

111
00:04:01,849 --> 00:04:05,268
logging disablement and all this kind of

112
00:04:03,319 --> 00:04:07,310
stuff<font color="#CCCCCC"> and most people run that without</font>

113
00:04:05,269 --> 00:04:08,660
<font color="#E5E5E5">knowing what it is and it doesn't matter</font>

114
00:04:07,310 --> 00:04:10,129
in most contexts because variously

115
00:04:08,660 --> 00:04:12,220
people even<font color="#E5E5E5"> have that enabled in</font>

116
00:04:10,129 --> 00:04:14,388
PowerShell<font color="#E5E5E5"> on their endpoints</font><font color="#CCCCCC"> anyways</font>

117
00:04:12,220 --> 00:04:16,459
but attackers could<font color="#E5E5E5"> also just shift</font>

118
00:04:14,389 --> 00:04:17,989
their tradecraft<font color="#CCCCCC"> to languages</font><font color="#E5E5E5"> that just</font>

119
00:04:16,459 --> 00:04:23,000
don't provide this additional<font color="#CCCCCC"> level</font><font color="#E5E5E5"> of</font>

120
00:04:17,988 --> 00:04:24,739
visibility so my response to<font color="#E5E5E5"> all this is</font>

121
00:04:23,000 --> 00:04:26,599
again to try<font color="#E5E5E5"> to enumerate a problem</font>

122
00:04:24,740 --> 00:04:28,310
space that we start to see<font color="#CCCCCC"> that we've</font>

123
00:04:26,599 --> 00:04:31,370
<font color="#E5E5E5">already seen attackers taking baby steps</font>

124
00:04:28,310 --> 00:04:33,349
in and then<font color="#E5E5E5"> enumerate that as best I can</font>

125
00:04:31,370 --> 00:04:34,550
<font color="#E5E5E5">to basically create our own detection</font><font color="#CCCCCC"> x'</font>

126
00:04:33,349 --> 00:04:36,680
and<font color="#E5E5E5"> then sharing</font><font color="#CCCCCC"> that</font><font color="#E5E5E5"> research with a</font>

127
00:04:34,550 --> 00:04:38,930
community so that others can<font color="#CCCCCC"> also go</font>

128
00:04:36,680 --> 00:04:40,340
about<font color="#E5E5E5"> detecting it so this is all about</font>

129
00:04:38,930 --> 00:04:42,860
<font color="#CCCCCC">command XE</font>

130
00:04:40,340 --> 00:04:45,260
<font color="#E5E5E5">Fiske ation</font><font color="#CCCCCC"> and from a defender</font>

131
00:04:42,860 --> 00:04:47,030
perspective<font color="#E5E5E5"> most of the time a lot of</font>

132
00:04:45,260 --> 00:04:49,039
<font color="#E5E5E5">different I</font><font color="#CCCCCC"> talked to they really</font>

133
00:04:47,030 --> 00:04:51,950
focused primarily on command<font color="#E5E5E5"> exit</font><font color="#CCCCCC"> II and</font>

134
00:04:49,040 --> 00:04:53,120
certain arguments being present some

135
00:04:51,950 --> 00:04:54,830
other things<font color="#E5E5E5"> you can look</font><font color="#CCCCCC"> for our</font><font color="#E5E5E5"> like</font>

136
00:04:53,120 --> 00:04:56,420
parent-child process<font color="#CCCCCC"> relationship so</font>

137
00:04:54,830 --> 00:04:58,940
command<font color="#CCCCCC"> actually launched by Explorer</font>

138
00:04:56,420 --> 00:05:00,830
would probably be less interesting<font color="#CCCCCC"> than</font>

139
00:04:58,940 --> 00:05:03,490
<font color="#E5E5E5">command</font><font color="#CCCCCC"> exiting wash by windward or</font>

140
00:05:00,830 --> 00:05:05,960
<font color="#CCCCCC">Excel or OneNote or something like that</font>

141
00:05:03,490 --> 00:05:07,550
<font color="#CCCCCC">you can also look</font><font color="#E5E5E5"> at command as in terms</font>

142
00:05:05,960 --> 00:05:09,140
of the source of action on<font color="#E5E5E5"> something so</font>

143
00:05:07,550 --> 00:05:10,610
command creating a certain file or

144
00:05:09,140 --> 00:05:12,590
modifying a registry or something like

145
00:05:10,610 --> 00:05:14,780
<font color="#E5E5E5">that</font><font color="#CCCCCC"> but the problem is command is</font><font color="#E5E5E5"> used</font>

146
00:05:12,590 --> 00:05:17,570
by<font color="#E5E5E5"> everything because it's</font><font color="#CCCCCC"> it's command</font>

147
00:05:14,780 --> 00:05:21,830
<font color="#E5E5E5">so how do you</font><font color="#CCCCCC"> really tell malicious from</font>

148
00:05:17,570 --> 00:05:23,840
non-malicious so first let's<font color="#E5E5E5"> look at</font>

149
00:05:21,830 --> 00:05:27,560
three case studies<font color="#CCCCCC"> of obfuscation in the</font>

150
00:05:23,840 --> 00:05:30,770
wild<font color="#CCCCCC"> Nick Carr he's actually my manager</font>

151
00:05:27,560 --> 00:05:32,270
<font color="#CCCCCC">and we co-authored this blog post last</font>

152
00:05:30,770 --> 00:05:36,409
<font color="#E5E5E5">June and it highlights three different</font>

153
00:05:32,270 --> 00:05:37,969
threat groups<font color="#CCCCCC"> fin 8 fin 7 and</font><font color="#E5E5E5"> apt 32</font><font color="#CCCCCC"> and</font>

154
00:05:36,410 --> 00:05:39,830
so we're just<font color="#CCCCCC"> gonna</font><font color="#E5E5E5"> do a</font><font color="#CCCCCC"> high-level</font>

155
00:05:37,970 --> 00:05:43,520
<font color="#CCCCCC">overview of those different techniques</font>

156
00:05:39,830 --> 00:05:45,500
so last<font color="#E5E5E5"> February we saw fin</font><font color="#CCCCCC"> 8 using this</font>

157
00:05:43,520 --> 00:05:47,330
technique<font color="#E5E5E5"> and this was basically in an</font>

158
00:05:45,500 --> 00:05:49,370
office gated macro but what they're

159
00:05:47,330 --> 00:05:50,719
<font color="#CCCCCC">doing is they're</font><font color="#E5E5E5"> basically setting this</font>

160
00:05:49,370 --> 00:05:52,100
<font color="#CCCCCC">PowerShell command they're basically</font>

161
00:05:50,720 --> 00:05:53,810
<font color="#E5E5E5">using environment variables at a lot of</font>

162
00:05:52,100 --> 00:05:54,920
<font color="#CCCCCC">different levels so this bottom one</font><font color="#E5E5E5"> is</font>

163
00:05:53,810 --> 00:05:57,190
their<font color="#CCCCCC"> PowerShell command which are</font>

164
00:05:54,920 --> 00:05:59,690
putting in one<font color="#E5E5E5"> environment variable</font>

165
00:05:57,190 --> 00:06:01,490
<font color="#CCCCCC">Microsoft Update</font><font color="#E5E5E5"> Catalog at the top and</font>

166
00:05:59,690 --> 00:06:03,050
then they're putting<font color="#E5E5E5"> this this</font>

167
00:06:01,490 --> 00:06:04,490
PowerShell dash which is<font color="#E5E5E5"> going to</font><font color="#CCCCCC"> save</font>

168
00:06:03,050 --> 00:06:06,440
<font color="#E5E5E5">how it run PowerShell but take the</font>

169
00:06:04,490 --> 00:06:07,910
commander standard input<font color="#E5E5E5"> they set that</font>

170
00:06:06,440 --> 00:06:11,450
into the second environment variable<font color="#E5E5E5"> and</font>

171
00:06:07,910 --> 00:06:13,490
they do command<font color="#E5E5E5"> /c echo</font><font color="#CCCCCC"> in var</font><font color="#E5E5E5"> one pipe</font>

172
00:06:11,450 --> 00:06:14,870
in<font color="#E5E5E5"> bar two so from a defenders</font>

173
00:06:13,490 --> 00:06:16,640
perspective all you'd see is when we're

174
00:06:14,870 --> 00:06:18,230
<font color="#CCCCCC">running and it would spawn this upper</font>

175
00:06:16,640 --> 00:06:19,520
<font color="#E5E5E5">command right here</font><font color="#CCCCCC"> and because it's</font>

176
00:06:18,230 --> 00:06:22,250
using<font color="#E5E5E5"> process level environment</font>

177
00:06:19,520 --> 00:06:24,020
<font color="#E5E5E5">variables then you</font><font color="#CCCCCC"> actually don't see</font>

178
00:06:22,250 --> 00:06:26,480
<font color="#E5E5E5">what it's being resolved it's all done</font>

179
00:06:24,020 --> 00:06:29,150
in memory so they're using standard

180
00:06:26,480 --> 00:06:30,830
input<font color="#CCCCCC"> and environment variable hiding to</font>

181
00:06:29,150 --> 00:06:32,989
basically<font color="#E5E5E5"> keep a lot of their juicy</font>

182
00:06:30,830 --> 00:06:36,440
information<font color="#E5E5E5"> off of the command line so</font>

183
00:06:32,990 --> 00:06:41,390
that<font color="#CCCCCC"> was</font><font color="#E5E5E5"> really cool next case study apt</font>

184
00:06:36,440 --> 00:06:43,550
<font color="#E5E5E5">32 also known as ocean Lotus</font><font color="#CCCCCC"> so the if T</font>

185
00:06:41,390 --> 00:06:45,770
<font color="#CCCCCC">32 loves to use a lot of open source</font>

186
00:06:43,550 --> 00:06:48,230
<font color="#E5E5E5">tradecraft</font><font color="#CCCCCC"> basically as soon as Casey</font>

187
00:06:45,770 --> 00:06:51,169
Smith<font color="#E5E5E5"> tweet something then within a few</font>

188
00:06:48,230 --> 00:06:52,880
hours<font color="#CCCCCC"> apt 32 is right on it</font><font color="#E5E5E5"> and so in</font>

189
00:06:51,170 --> 00:06:53,960
this case<font color="#CCCCCC"> they're using the</font><font color="#E5E5E5"> squid we do</font>

190
00:06:52,880 --> 00:06:56,840
the register of 32

191
00:06:53,960 --> 00:06:57,979
<font color="#CCCCCC">scratch</font><font color="#E5E5E5"> a dll downloader and initially</font>

192
00:06:56,840 --> 00:07:00,169
they were using<font color="#E5E5E5"> carrots which is</font>

193
00:06:57,979 --> 00:07:02,560
commands escape characters to break up

194
00:07:00,169 --> 00:07:04,490
HTTP to try<font color="#E5E5E5"> to break defenders</font>

195
00:07:02,560 --> 00:07:07,729
signatures<font color="#E5E5E5"> that we're looking for</font>

196
00:07:04,490 --> 00:07:08,990
<font color="#E5E5E5">/i : HTTP etc but then they also</font>

197
00:07:07,729 --> 00:07:10,490
switched up and started using double

198
00:07:08,990 --> 00:07:11,990
quotes<font color="#CCCCCC"> and</font><font color="#E5E5E5"> then we'll talk more about</font>

199
00:07:10,490 --> 00:07:13,970
double quotes shortly but double quotes

200
00:07:11,990 --> 00:07:15,949
in and I've talked about<font color="#CCCCCC"> this a couple</font>

201
00:07:13,970 --> 00:07:17,389
times<font color="#E5E5E5"> or just tweeted out random random</font>

202
00:07:15,949 --> 00:07:19,039
thoughts<font color="#CCCCCC"> like why</font><font color="#E5E5E5"> aren't more people</font>

203
00:07:17,389 --> 00:07:21,110
<font color="#E5E5E5">using double quotes</font><font color="#CCCCCC"> because it's a far</font>

204
00:07:19,039 --> 00:07:21,830
more effective<font color="#E5E5E5"> office</font><font color="#CCCCCC"> keishon character</font>

205
00:07:21,110 --> 00:07:24,500
than the carrot

206
00:07:21,830 --> 00:07:26,840
it applies to any binary<font color="#CCCCCC"> spawn</font><font color="#E5E5E5"> by</font>

207
00:07:24,500 --> 00:07:28,970
command<font color="#CCCCCC"> but it's</font><font color="#E5E5E5"> really</font><font color="#CCCCCC"> just not</font><font color="#E5E5E5"> used</font>

208
00:07:26,840 --> 00:07:30,320
that<font color="#E5E5E5"> much again kind of surprising</font>

209
00:07:28,970 --> 00:07:31,759
because<font color="#E5E5E5"> it's so much more effective most</font>

210
00:07:30,320 --> 00:07:35,389
defenders are looking for carrots but

211
00:07:31,759 --> 00:07:39,440
not double quotes the last one this

212
00:07:35,389 --> 00:07:41,479
single example<font color="#E5E5E5"> blew my mind and started</font>

213
00:07:39,440 --> 00:07:44,900
this<font color="#CCCCCC"> entire research for me 9 or 10</font>

214
00:07:41,479 --> 00:07:47,210
months<font color="#CCCCCC"> ago so thin 7 fin</font><font color="#E5E5E5"> 7 and 85032</font>

215
00:07:44,900 --> 00:07:48,710
compete for first place<font color="#CCCCCC"> in my heart</font><font color="#E5E5E5"> of</font>

216
00:07:47,210 --> 00:07:50,719
<font color="#CCCCCC">the most tasteful</font><font color="#E5E5E5"> and creative office</font>

217
00:07:48,710 --> 00:07:51,830
<font color="#CCCCCC">Gatien like it's really</font><font color="#E5E5E5"> cool the stuff</font>

218
00:07:50,720 --> 00:07:54,080
that they're<font color="#CCCCCC"> doing</font><font color="#E5E5E5"> they're really small</font>

219
00:07:51,830 --> 00:07:56,750
tweaks<font color="#E5E5E5"> so in this case this</font><font color="#CCCCCC"> is actually</font>

220
00:07:54,080 --> 00:07:59,570
<font color="#E5E5E5">the contents of a link file and what fin</font>

221
00:07:56,750 --> 00:08:01,400
<font color="#CCCCCC">7 did was in</font><font color="#E5E5E5"> the middle here</font><font color="#CCCCCC"> they're</font>

222
00:07:59,570 --> 00:08:04,099
echoing out this office<font color="#CCCCCC"> gated</font><font color="#E5E5E5"> JavaScript</font>

223
00:08:01,400 --> 00:08:06,289
into this<font color="#E5E5E5"> text file in</font><font color="#CCCCCC"> the JavaScript</font>

224
00:08:04,099 --> 00:08:07,370
here they're<font color="#CCCCCC"> doing concatenation 4</font>

225
00:08:06,289 --> 00:08:08,990
instead<font color="#E5E5E5"> of eval they're doing</font>

226
00:08:07,370 --> 00:08:10,940
concatenation<font color="#E5E5E5"> of these sub strings and</font>

227
00:08:08,990 --> 00:08:13,310
then doing a from char code on the ASCII

228
00:08:10,940 --> 00:08:16,460
value 101 for the<font color="#E5E5E5"> e so pretty cool</font><font color="#CCCCCC"> stuff</font>

229
00:08:13,310 --> 00:08:19,130
there<font color="#E5E5E5"> but</font><font color="#CCCCCC"> what I want</font><font color="#E5E5E5"> you to</font><font color="#CCCCCC"> notice here</font>

230
00:08:16,460 --> 00:08:22,400
<font color="#E5E5E5">is these two red</font><font color="#CCCCCC"> boxes and when I saw</font>

231
00:08:19,130 --> 00:08:24,440
this it didn't make<font color="#E5E5E5"> any</font><font color="#CCCCCC"> sense for me</font><font color="#E5E5E5"> I</font>

232
00:08:22,400 --> 00:08:26,659
was<font color="#E5E5E5"> really confused</font><font color="#CCCCCC"> primarily</font><font color="#E5E5E5"> because</font><font color="#CCCCCC"> of</font>

233
00:08:24,440 --> 00:08:29,509
these<font color="#E5E5E5"> two</font><font color="#CCCCCC"> app signs in the W script and</font>

234
00:08:26,659 --> 00:08:30,979
jscript<font color="#E5E5E5"> so let's</font><font color="#CCCCCC"> look at it up here</font><font color="#E5E5E5"> the</font>

235
00:08:29,509 --> 00:08:32,839
the essence of<font color="#E5E5E5"> the command is we have</font>

236
00:08:30,979 --> 00:08:35,718
command C or<font color="#E5E5E5"> setting this</font><font color="#CCCCCC"> W script</font>

237
00:08:32,839 --> 00:08:38,599
command and to<font color="#E5E5E5"> process level</font><font color="#CCCCCC"> environment</font>

238
00:08:35,719 --> 00:08:40,610
variable X what they then do is after

239
00:08:38,599 --> 00:08:42,289
<font color="#E5E5E5">they write out the JavaScript at the end</font>

240
00:08:40,610 --> 00:08:44,720
they basically echo the contents of X

241
00:08:42,289 --> 00:08:46,189
<font color="#E5E5E5">into command this is basically spawning</font>

242
00:08:44,720 --> 00:08:48,170
another command process where it's

243
00:08:46,190 --> 00:08:50,810
taking the input<font color="#E5E5E5"> or just taking</font><font color="#CCCCCC"> the</font>

244
00:08:48,170 --> 00:08:51,829
<font color="#E5E5E5">commander standard input but the one</font>

245
00:08:50,810 --> 00:08:53,390
they do is they have<font color="#E5E5E5"> they put this</font>

246
00:08:51,829 --> 00:08:54,920
garbage delimiter they use the<font color="#E5E5E5"> @ sign</font>

247
00:08:53,390 --> 00:08:56,899
and they put it in<font color="#E5E5E5"> W script and jscript</font>

248
00:08:54,920 --> 00:08:59,479
<font color="#E5E5E5">now this didn't make any sense to</font><font color="#CCCCCC"> me</font>

249
00:08:56,899 --> 00:09:01,070
because<font color="#E5E5E5"> I've</font><font color="#CCCCCC"> never seen the @ sign work</font>

250
00:08:59,480 --> 00:09:03,550
that way and when you try to do<font color="#E5E5E5"> W</font>

251
00:09:01,070 --> 00:09:06,320
<font color="#CCCCCC">script.js script without</font><font color="#E5E5E5"> sign it fails</font>

252
00:09:03,550 --> 00:09:07,609
but<font color="#CCCCCC"> if you'll</font><font color="#E5E5E5"> notice at the end when</font>

253
00:09:06,320 --> 00:09:10,640
they call that<font color="#E5E5E5"> X</font>

254
00:09:07,610 --> 00:09:13,010
variable it actually creates space after

255
00:09:10,640 --> 00:09:15,620
<font color="#E5E5E5">and then put this in</font><font color="#CCCCCC"> taxon now this</font>

256
00:09:13,010 --> 00:09:17,000
Intex does is it's actually<font color="#E5E5E5"> a native to</font>

257
00:09:15,620 --> 00:09:19,220
command<font color="#CCCCCC"> exit ii and it's a string</font>

258
00:09:17,000 --> 00:09:20,870
replacement syntax<font color="#CCCCCC"> so it says</font><font color="#E5E5E5"> okay you</font>

259
00:09:19,220 --> 00:09:23,030
put a<font color="#E5E5E5"> colon and then</font><font color="#CCCCCC"> the</font><font color="#E5E5E5"> string in this</font>

260
00:09:20,870 --> 00:09:24,860
<font color="#CCCCCC">case it's a single character replace</font>

261
00:09:23,030 --> 00:09:26,060
every instance<font color="#CCCCCC"> of that string with</font>

262
00:09:24,860 --> 00:09:28,040
<font color="#E5E5E5">whatever is on the</font><font color="#CCCCCC"> right side</font><font color="#E5E5E5"> of the</font>

263
00:09:26,060 --> 00:09:29,000
equal sign<font color="#E5E5E5"> in this case there's</font><font color="#CCCCCC"> nothing</font>

264
00:09:28,040 --> 00:09:31,459
on the right side<font color="#E5E5E5"> so they're basically</font>

265
00:09:29,000 --> 00:09:34,220
<font color="#E5E5E5">saying take this variable and remove</font>

266
00:09:31,460 --> 00:09:37,490
every app in memory before<font color="#E5E5E5"> we pass it to</font>

267
00:09:34,220 --> 00:09:40,520
command<font color="#E5E5E5"> now when I saw this I was like</font>

268
00:09:37,490 --> 00:09:43,070
<font color="#E5E5E5">oh my gosh that is so tasteful how cool</font>

269
00:09:40,520 --> 00:09:44,540
is<font color="#CCCCCC"> that</font><font color="#E5E5E5"> and I had no idea that command</font>

270
00:09:43,070 --> 00:09:48,980
<font color="#CCCCCC">actually was capable</font><font color="#E5E5E5"> of that and</font><font color="#CCCCCC"> they</font>

271
00:09:44,540 --> 00:09:51,860
<font color="#E5E5E5">just used one little sliver of this so</font>

272
00:09:48,980 --> 00:09:53,840
needless to say we we basically<font color="#E5E5E5"> my boss</font>

273
00:09:51,860 --> 00:09:55,490
found<font color="#CCCCCC"> fin seven playing around</font><font color="#E5E5E5"> this</font>

274
00:09:53,840 --> 00:09:57,110
payload on a Wednesday<font color="#E5E5E5"> we wrote this</font>

275
00:09:55,490 --> 00:09:59,270
blog person on a Thursday published it

276
00:09:57,110 --> 00:10:00,560
on a Friday I spent all weekend messing

277
00:09:59,270 --> 00:10:03,530
around with<font color="#E5E5E5"> this concept and wrote this</font>

278
00:10:00,560 --> 00:10:06,739
POC called out<font color="#E5E5E5"> thin coded command fin</font>

279
00:10:03,530 --> 00:10:08,209
coded as fin sevens encoded to kind of

280
00:10:06,740 --> 00:10:10,520
explore this concept<font color="#CCCCCC"> a little</font><font color="#E5E5E5"> bit and I</font>

281
00:10:08,210 --> 00:10:11,750
released it<font color="#E5E5E5"> on a Sunday</font><font color="#CCCCCC"> in as soon as I</font>

282
00:10:10,520 --> 00:10:13,160
pushed it<font color="#E5E5E5"> out I just kind of sat back</font>

283
00:10:11,750 --> 00:10:14,870
<font color="#CCCCCC">and thought I wonder</font><font color="#E5E5E5"> if there's</font><font color="#CCCCCC"> more</font>

284
00:10:13,160 --> 00:10:16,400
here<font color="#CCCCCC"> you know it's really cool</font><font color="#E5E5E5"> it</font>

285
00:10:14,870 --> 00:10:17,900
offends<font color="#E5E5E5"> someone did this but I had no</font>

286
00:10:16,400 --> 00:10:18,590
<font color="#E5E5E5">idea command</font><font color="#CCCCCC"> I actually</font><font color="#E5E5E5"> supported this</font>

287
00:10:17,900 --> 00:10:20,420
capability

288
00:10:18,590 --> 00:10:22,580
what else does command<font color="#E5E5E5"> actually support</font>

289
00:10:20,420 --> 00:10:23,660
that<font color="#CCCCCC"> maybe we've just never seen but</font><font color="#E5E5E5"> we</font>

290
00:10:22,580 --> 00:10:25,550
should<font color="#CCCCCC"> probably start looking for</font>

291
00:10:23,660 --> 00:10:27,709
because<font color="#E5E5E5"> perhaps</font><font color="#CCCCCC"> fin seven knows about it</font>

292
00:10:25,550 --> 00:10:29,349
perhaps<font color="#E5E5E5"> other groups know about it and</font>

293
00:10:27,710 --> 00:10:32,140
<font color="#E5E5E5">that's what really started</font><font color="#CCCCCC"> this entire</font>

294
00:10:29,350 --> 00:10:36,200
<font color="#E5E5E5">kind of research topic</font><font color="#CCCCCC"> from me</font>

295
00:10:32,140 --> 00:10:38,120
so implications of this<font color="#CCCCCC"> research</font><font color="#E5E5E5"> for</font>

296
00:10:36,200 --> 00:10:40,190
<font color="#E5E5E5">defenders I would say this affects both</font>

297
00:10:38,120 --> 00:10:43,280
<font color="#CCCCCC">dynamic and static detection it affects</font>

298
00:10:40,190 --> 00:10:45,170
<font color="#E5E5E5">static more but initially my thoughts</font>

299
00:10:43,280 --> 00:10:47,360
were well what<font color="#E5E5E5"> defenders even find is</font>

300
00:10:45,170 --> 00:10:49,579
<font color="#E5E5E5">interesting if</font><font color="#CCCCCC"> if this office casein is</font>

301
00:10:47,360 --> 00:10:50,750
removed dynamically because as defenders

302
00:10:49,580 --> 00:10:52,520
they pretty much care what<font color="#E5E5E5"> do I see in</font>

303
00:10:50,750 --> 00:10:54,170
<font color="#CCCCCC">real time right</font><font color="#E5E5E5"> what do I see in</font><font color="#CCCCCC"> forty</font>

304
00:10:52,520 --> 00:10:56,480
<font color="#CCCCCC">six eighty eight</font><font color="#E5E5E5"> or system on Eid one</font>

305
00:10:54,170 --> 00:10:59,089
what do I see for my data sources<font color="#CCCCCC"> are</font>

306
00:10:56,480 --> 00:11:00,740
these<font color="#E5E5E5"> characters still present</font><font color="#CCCCCC"> and in</font>

307
00:10:59,090 --> 00:11:03,410
some cases they're not<font color="#E5E5E5"> but in some cases</font>

308
00:11:00,740 --> 00:11:05,630
they are and so just<font color="#E5E5E5"> if the initial</font>

309
00:11:03,410 --> 00:11:06,980
examples don't seem to to bother you as

310
00:11:05,630 --> 00:11:09,020
a<font color="#E5E5E5"> defender then we'll get to some that</font>

311
00:11:06,980 --> 00:11:11,980
<font color="#E5E5E5">maybe</font><font color="#CCCCCC"> will kind of kind</font><font color="#E5E5E5"> of change that</font>

312
00:11:09,020 --> 00:11:11,980
paradigm a little bit

313
00:11:14,990 --> 00:11:19,529
so what we're<font color="#E5E5E5"> gonna do is we're gonna be</font>

314
00:11:18,270 --> 00:11:21,779
able<font color="#CCCCCC"> up by the end</font><font color="#E5E5E5"> of this talk to take</font>

315
00:11:19,529 --> 00:11:23,310
any arbitrary<font color="#E5E5E5"> input command something</font>

316
00:11:21,779 --> 00:11:27,120
<font color="#E5E5E5">even</font><font color="#CCCCCC"> just like</font><font color="#E5E5E5"> a simple</font><font color="#CCCCCC"> echo statement</font>

317
00:11:23,310 --> 00:11:28,949
<font color="#E5E5E5">and add layer upon layer</font><font color="#CCCCCC"> upon layer of</font>

318
00:11:27,120 --> 00:11:32,550
<font color="#CCCCCC">our</font><font color="#E5E5E5"> fist</font><font color="#CCCCCC"> ocation to get something</font><font color="#E5E5E5"> like</font>

319
00:11:28,950 --> 00:11:35,130
<font color="#CCCCCC">that so hang on tight</font><font color="#E5E5E5"> we're gonna move</font>

320
00:11:32,550 --> 00:11:37,829
really fast<font color="#CCCCCC"> all this</font><font color="#E5E5E5"> information is in</font>

321
00:11:35,130 --> 00:11:39,450
the<font color="#E5E5E5"> 36 page white paper</font><font color="#CCCCCC"> that I put out</font>

322
00:11:37,830 --> 00:11:40,620
<font color="#E5E5E5">two weeks ago</font><font color="#CCCCCC"> at blackhat with</font><font color="#E5E5E5"> this</font>

323
00:11:39,450 --> 00:11:42,930
initial research<font color="#E5E5E5"> has all this</font>

324
00:11:40,620 --> 00:11:43,890
information<font color="#CCCCCC"> and a</font><font color="#E5E5E5"> lot more but we're</font>

325
00:11:42,930 --> 00:11:46,319
going to<font color="#E5E5E5"> do is we're going to take all</font>

326
00:11:43,890 --> 00:11:47,640
these pieces<font color="#E5E5E5"> we're going to stack them</font>

327
00:11:46,320 --> 00:11:49,830
on top<font color="#CCCCCC"> of each</font><font color="#E5E5E5"> other to be able</font><font color="#CCCCCC"> to</font>

328
00:11:47,640 --> 00:11:52,500
basically<font color="#CCCCCC"> apply this is wall</font><font color="#E5E5E5"> of</font>

329
00:11:49,830 --> 00:11:56,339
obfuscation on any input argument<font color="#E5E5E5"> or</font>

330
00:11:52,500 --> 00:11:59,400
command and<font color="#CCCCCC"> run it out</font><font color="#E5E5E5"> of command XE so</font>

331
00:11:56,339 --> 00:12:01,170
let's go first we're going to take baby

332
00:11:59,400 --> 00:12:03,050
<font color="#E5E5E5">steps</font><font color="#CCCCCC"> office skating binary names so</font>

333
00:12:01,170 --> 00:12:05,370
again as a defender<font color="#E5E5E5"> I see a lot of</font>

334
00:12:03,050 --> 00:12:07,079
signatures<font color="#CCCCCC"> and detection z'</font><font color="#E5E5E5"> and rules</font>

335
00:12:05,370 --> 00:12:09,240
that<font color="#CCCCCC"> are written for</font><font color="#E5E5E5"> things</font><font color="#CCCCCC"> like</font><font color="#E5E5E5"> okay</font>

336
00:12:07,080 --> 00:12:11,400
<font color="#E5E5E5">let's say that</font><font color="#CCCCCC"> we see command</font><font color="#E5E5E5"> XE has a</font>

337
00:12:09,240 --> 00:12:13,589
process running<font color="#CCCCCC"> and we see these</font>

338
00:12:11,400 --> 00:12:14,730
arguments<font color="#E5E5E5"> if those things are true</font><font color="#CCCCCC"> then</font>

339
00:12:13,589 --> 00:12:16,830
you know say hey<font color="#E5E5E5"> this looks suspicious</font>

340
00:12:14,730 --> 00:12:18,810
or something like<font color="#E5E5E5"> that</font><font color="#CCCCCC"> well aside from</font>

341
00:12:16,830 --> 00:12:20,790
the<font color="#CCCCCC"> fact that attackers like</font><font color="#E5E5E5"> to just</font>

342
00:12:18,810 --> 00:12:23,130
rename binaries<font color="#CCCCCC"> so if they</font><font color="#E5E5E5"> just first</font>

343
00:12:20,790 --> 00:12:24,810
copy command<font color="#E5E5E5"> XE to benign dot X and then</font>

344
00:12:23,130 --> 00:12:27,540
run all<font color="#E5E5E5"> their stuff are you</font><font color="#CCCCCC"> gonna see</font>

345
00:12:24,810 --> 00:12:28,530
benign<font color="#CCCCCC"> da</font><font color="#E5E5E5"> XE /</font><font color="#CCCCCC"> C blah blah blah</font><font color="#E5E5E5"> right</font>

346
00:12:27,540 --> 00:12:30,930
that's one issue

347
00:12:28,530 --> 00:12:33,030
<font color="#E5E5E5">another issue is there's a lot of</font><font color="#CCCCCC"> um</font>

348
00:12:30,930 --> 00:12:35,040
command<font color="#CCCCCC"> XE kind of substitutes I guess</font>

349
00:12:33,030 --> 00:12:36,540
you could<font color="#E5E5E5"> say so if you're looking</font><font color="#CCCCCC"> for</font>

350
00:12:35,040 --> 00:12:37,890
<font color="#E5E5E5">like parent-child process relationships</font>

351
00:12:36,540 --> 00:12:39,480
of<font color="#CCCCCC"> Windward</font><font color="#E5E5E5"> spawning command or</font>

352
00:12:37,890 --> 00:12:41,189
<font color="#E5E5E5">something like that</font><font color="#CCCCCC"> well are you also</font>

353
00:12:39,480 --> 00:12:43,470
looking<font color="#CCCCCC"> for</font><font color="#E5E5E5"> windward spawning for files</font>

354
00:12:41,190 --> 00:12:44,900
or<font color="#CCCCCC"> pca</font><font color="#E5E5E5"> lua</font><font color="#CCCCCC"> there's a lot</font><font color="#E5E5E5"> of other</font>

355
00:12:43,470 --> 00:12:47,550
binaries that<font color="#CCCCCC"> are kind of in-between</font>

356
00:12:44,900 --> 00:12:49,500
<font color="#E5E5E5">intermediate programs that will break</font>

357
00:12:47,550 --> 00:12:52,380
that initial<font color="#E5E5E5"> parent-child process chain</font>

358
00:12:49,500 --> 00:12:54,300
and there's a<font color="#E5E5E5"> really good list here by a</font>

359
00:12:52,380 --> 00:12:56,100
friend of<font color="#E5E5E5"> mine oddvar</font><font color="#CCCCCC"> mo that the</font>

360
00:12:54,300 --> 00:12:57,900
binaries that<font color="#E5E5E5"> do other things and so it</font>

361
00:12:56,100 --> 00:12:59,610
has a lot of these there but a lot of

362
00:12:57,900 --> 00:13:00,990
<font color="#E5E5E5">defenders aren't really I'm looking at</font>

363
00:12:59,610 --> 00:13:02,940
that<font color="#E5E5E5"> and some</font><font color="#CCCCCC"> of them are only available</font>

364
00:13:00,990 --> 00:13:04,200
<font color="#E5E5E5">in later operating systems so attackers</font>

365
00:13:02,940 --> 00:13:05,310
are a little<font color="#E5E5E5"> less likely</font><font color="#CCCCCC"> to pick that up</font>

366
00:13:04,200 --> 00:13:07,020
because<font color="#CCCCCC"> they want their stuff</font><font color="#E5E5E5"> to work</font>

367
00:13:05,310 --> 00:13:08,329
across<font color="#E5E5E5"> the</font><font color="#CCCCCC"> board but still there's a</font><font color="#E5E5E5"> lot</font>

368
00:13:07,020 --> 00:13:10,439
of additional binaries to look for

369
00:13:08,330 --> 00:13:12,209
however<font color="#CCCCCC"> I'm</font><font color="#E5E5E5"> not talking</font><font color="#CCCCCC"> about</font><font color="#E5E5E5"> either of</font>

370
00:13:10,440 --> 00:13:14,220
<font color="#E5E5E5">those things what I'm talking about is</font>

371
00:13:12,209 --> 00:13:16,199
ways<font color="#E5E5E5"> to obfuscate</font><font color="#CCCCCC"> the legitimate binary</font>

372
00:13:14,220 --> 00:13:19,620
name<font color="#E5E5E5"> on the command line</font><font color="#CCCCCC"> but</font><font color="#E5E5E5"> to</font>

373
00:13:16,200 --> 00:13:21,209
<font color="#CCCCCC">obfuscate it so one way we</font><font color="#E5E5E5"> can do this</font>

374
00:13:19,620 --> 00:13:23,160
is we can use<font color="#E5E5E5"> known environment</font>

375
00:13:21,209 --> 00:13:25,349
variables and<font color="#E5E5E5"> take concatenation of</font>

376
00:13:23,160 --> 00:13:27,540
their<font color="#E5E5E5"> sub strings so what do I mean</font><font color="#CCCCCC"> well</font>

377
00:13:25,350 --> 00:13:28,290
if we just<font color="#E5E5E5"> echo program data on my</font>

378
00:13:27,540 --> 00:13:32,009
system

379
00:13:28,290 --> 00:13:34,319
<font color="#CCCCCC">drive is</font><font color="#E5E5E5"> C program data so what if we</font>

380
00:13:32,009 --> 00:13:35,910
take the very<font color="#CCCCCC"> first character and then</font>

381
00:13:34,320 --> 00:13:37,529
<font color="#E5E5E5">the ninth and tenth character and piece</font>

382
00:13:35,910 --> 00:13:39,149
that together<font color="#CCCCCC"> well we can use</font><font color="#E5E5E5"> this</font>

383
00:13:37,529 --> 00:13:42,089
substring syntax for environment

384
00:13:39,149 --> 00:13:44,310
variables and do just<font color="#E5E5E5"> that so</font><font color="#CCCCCC"> here's an</font>

385
00:13:42,089 --> 00:13:46,670
<font color="#CCCCCC">example of CMD and this is an example of</font>

386
00:13:44,310 --> 00:13:49,079
<font color="#CCCCCC">powershell</font><font color="#E5E5E5"> where some of the characters</font>

387
00:13:46,670 --> 00:13:54,360
<font color="#CCCCCC">we just have in plain</font><font color="#E5E5E5"> text and aren't</font>

388
00:13:49,079 --> 00:13:57,719
using<font color="#CCCCCC"> substrings this is</font><font color="#E5E5E5"> far more</font>

389
00:13:54,360 --> 00:13:58,889
effective<font color="#E5E5E5"> like in batch files because if</font>

390
00:13:57,720 --> 00:14:00,990
you actually<font color="#E5E5E5"> copy and paste this on the</font>

391
00:13:58,889 --> 00:14:02,519
command line<font color="#E5E5E5"> then you</font><font color="#CCCCCC"> actually won't</font><font color="#E5E5E5"> see</font>

392
00:14:00,990 --> 00:14:04,589
any of<font color="#CCCCCC"> the substring syntax it will all</font>

393
00:14:02,519 --> 00:14:08,459
resolve right there on the command<font color="#CCCCCC"> line</font>

394
00:14:04,589 --> 00:14:09,810
<font color="#E5E5E5">but</font><font color="#CCCCCC"> it's still something however</font><font color="#E5E5E5"> I was</font>

395
00:14:08,459 --> 00:14:11,008
wanting<font color="#E5E5E5"> to figure out could I find a way</font>

396
00:14:09,810 --> 00:14:13,258
to do this where<font color="#E5E5E5"> it doesn't resolve on</font>

397
00:14:11,009 --> 00:14:15,089
the command<font color="#CCCCCC"> line</font><font color="#E5E5E5"> and so the</font><font color="#CCCCCC"> answer is</font>

398
00:14:13,259 --> 00:14:18,449
yes and<font color="#E5E5E5"> the way that I get around that</font>

399
00:14:15,089 --> 00:14:20,699
is trying<font color="#CCCCCC"> to find internal commands that</font>

400
00:14:18,449 --> 00:14:22,109
don't spawn an additional binary<font color="#E5E5E5"> so a</font>

401
00:14:20,699 --> 00:14:23,758
lot<font color="#E5E5E5"> of commands that attackers use</font>

402
00:14:22,110 --> 00:14:25,980
actually spawn additional binaries like

403
00:14:23,759 --> 00:14:29,399
fine string Who<font color="#E5E5E5"> am I if config stuff</font>

404
00:14:25,980 --> 00:14:30,720
like that but<font color="#E5E5E5"> set</font><font color="#CCCCCC"> Assos and F type are</font>

405
00:14:29,399 --> 00:14:31,579
the three ones that I<font color="#E5E5E5"> found to be</font><font color="#CCCCCC"> really</font>

406
00:14:30,720 --> 00:14:34,139
<font color="#E5E5E5">useful</font>

407
00:14:31,579 --> 00:14:36,449
so set will show you all<font color="#E5E5E5"> the environment</font>

408
00:14:34,139 --> 00:14:37,920
variables and<font color="#E5E5E5"> their values a social F</font>

409
00:14:36,449 --> 00:14:39,839
type are related a so so it's going<font color="#E5E5E5"> to</font>

410
00:14:37,920 --> 00:14:42,240
<font color="#E5E5E5">show the association of a file</font><font color="#CCCCCC"> extension</font>

411
00:14:39,839 --> 00:14:47,819
to the<font color="#CCCCCC"> Association type so in this case</font>

412
00:14:42,240 --> 00:14:50,190
we can see<font color="#CCCCCC"> ACC</font><font color="#E5E5E5"> DC is access file dot 16</font>

413
00:14:47,819 --> 00:14:52,709
etc<font color="#E5E5E5"> F type is going to</font><font color="#CCCCCC"> basically map</font>

414
00:14:50,190 --> 00:14:55,949
that<font color="#CCCCCC"> Association type with the binary</font>

415
00:14:52,709 --> 00:14:57,149
<font color="#E5E5E5">that's going to run it but what does</font>

416
00:14:55,949 --> 00:14:58,829
this even matter<font color="#E5E5E5"> what how do</font><font color="#CCCCCC"> I even</font>

417
00:14:57,149 --> 00:15:00,750
stumble upon these basically I was

418
00:14:58,829 --> 00:15:03,719
looking for any internal command<font color="#E5E5E5"> that</font>

419
00:15:00,750 --> 00:15:05,550
<font color="#E5E5E5">produce a standard output anything that</font>

420
00:15:03,720 --> 00:15:06,839
contained<font color="#E5E5E5"> a string I was</font><font color="#CCCCCC"> interested in</font>

421
00:15:05,550 --> 00:15:10,979
in this<font color="#E5E5E5"> case I'm</font><font color="#CCCCCC"> interested in the</font>

422
00:15:06,839 --> 00:15:12,959
string CMD or<font color="#CCCCCC"> PowerShell</font><font color="#E5E5E5"> that's it so</font>

423
00:15:10,980 --> 00:15:14,819
<font color="#E5E5E5">let's take set as an example if I run</font>

424
00:15:12,959 --> 00:15:16,649
set and<font color="#CCCCCC"> just do</font><font color="#E5E5E5"> fine string PowerShell</font>

425
00:15:14,819 --> 00:15:18,420
<font color="#CCCCCC">I'll see I get two results back one is</font>

426
00:15:16,649 --> 00:15:20,339
the path variable<font color="#CCCCCC"> the other is PS module</font>

427
00:15:18,420 --> 00:15:21,300
path well the path<font color="#CCCCCC"> variable is probably</font>

428
00:15:20,339 --> 00:15:23,189
going<font color="#E5E5E5"> to be different</font><font color="#CCCCCC"> on a lot</font><font color="#E5E5E5"> of</font>

429
00:15:21,300 --> 00:15:24,870
<font color="#E5E5E5">different systems so an attacker may</font>

430
00:15:23,189 --> 00:15:26,849
instead choose something like PS module

431
00:15:24,870 --> 00:15:28,740
path so in this case we can just<font color="#E5E5E5"> do fine</font>

432
00:15:26,850 --> 00:15:30,209
string<font color="#E5E5E5"> PSM and that's the only thing</font>

433
00:15:28,740 --> 00:15:32,810
that comes back<font color="#E5E5E5"> is FPS</font><font color="#CCCCCC"> module path</font>

434
00:15:30,209 --> 00:15:35,399
awesome<font color="#E5E5E5"> and in the source code</font><font color="#CCCCCC"> of</font>

435
00:15:32,810 --> 00:15:37,170
<font color="#CCCCCC">investigation anywhere where I could</font>

436
00:15:35,399 --> 00:15:38,160
there's just these massive arrays of<font color="#E5E5E5"> all</font>

437
00:15:37,170 --> 00:15:40,439
<font color="#E5E5E5">these different sub strings I'll</font>

438
00:15:38,160 --> 00:15:41,630
<font color="#E5E5E5">randomly get selected every time so that</font>

439
00:15:40,439 --> 00:15:43,610
defenders aren't<font color="#E5E5E5"> writing bad</font>

440
00:15:41,630 --> 00:15:46,730
just off of funds<font color="#E5E5E5"> during PSM or</font>

441
00:15:43,610 --> 00:15:49,790
something<font color="#CCCCCC"> like</font><font color="#E5E5E5"> that so now that we have</font>

442
00:15:46,730 --> 00:15:51,710
<font color="#CCCCCC">this value what we want to do is</font>

443
00:15:49,790 --> 00:15:53,030
<font color="#E5E5E5">basically extract the string</font><font color="#CCCCCC"> PowerShell</font>

444
00:15:51,710 --> 00:15:54,980
<font color="#CCCCCC">and in this case there's two instances</font>

445
00:15:53,030 --> 00:15:56,810
and<font color="#E5E5E5"> we want to do is find delimiter</font>

446
00:15:54,980 --> 00:15:58,820
characters that are<font color="#CCCCCC"> case-sensitive to</font>

447
00:15:56,810 --> 00:16:01,130
<font color="#E5E5E5">basically be able to lift</font><font color="#CCCCCC"> PowerShell out</font>

448
00:15:58,820 --> 00:16:03,530
of this command<font color="#E5E5E5"> or out of this output so</font>

449
00:16:01,130 --> 00:16:04,910
the<font color="#CCCCCC"> lowercase</font><font color="#E5E5E5"> s and the backslash are</font>

450
00:16:03,530 --> 00:16:07,579
the characters<font color="#E5E5E5"> that are</font><font color="#CCCCCC"> on either side</font>

451
00:16:04,910 --> 00:16:09,079
of those<font color="#CCCCCC"> PowerShell strings so if we</font>

452
00:16:07,580 --> 00:16:10,850
make those our delimiter it actually

453
00:16:09,080 --> 00:16:13,190
chops<font color="#E5E5E5"> up there's a lot of</font><font color="#CCCCCC"> instances of</font><font color="#E5E5E5"> s</font>

454
00:16:10,850 --> 00:16:15,290
and backslash<font color="#E5E5E5"> so chops up this into 13</font>

455
00:16:13,190 --> 00:16:16,640
pieces<font color="#E5E5E5"> where the</font><font color="#CCCCCC"> fourth and the 11th</font>

456
00:16:15,290 --> 00:16:19,339
<font color="#E5E5E5">feasts are the ones that were interested</font>

457
00:16:16,640 --> 00:16:21,800
<font color="#CCCCCC">in now how do we</font><font color="#E5E5E5"> actually run this on</font>

458
00:16:19,340 --> 00:16:23,540
<font color="#E5E5E5">the command line</font><font color="#CCCCCC"> and lift these out</font><font color="#E5E5E5"> well</font>

459
00:16:21,800 --> 00:16:25,640
we use the<font color="#CCCCCC"> for loop because the internal</font>

460
00:16:23,540 --> 00:16:28,880
<font color="#E5E5E5">for loop</font><font color="#CCCCCC"> and command supports demeanors</font>

461
00:16:25,640 --> 00:16:31,670
<font color="#E5E5E5">so we basically do is at the end we run</font>

462
00:16:28,880 --> 00:16:33,950
our command set<font color="#CCCCCC"> find string PSM we</font>

463
00:16:31,670 --> 00:16:36,469
define these delimiter x' in this case

464
00:16:33,950 --> 00:16:38,450
we<font color="#CCCCCC"> ask</font><font color="#E5E5E5"> for the</font><font color="#CCCCCC"> forth token so when we</font>

465
00:16:36,470 --> 00:16:40,550
run<font color="#CCCCCC"> that it produces and lifts that</font>

466
00:16:38,450 --> 00:16:42,200
<font color="#E5E5E5">string</font><font color="#CCCCCC"> powershell out and in this case</font>

467
00:16:40,550 --> 00:16:44,510
we're actually just<font color="#CCCCCC"> saying run</font><font color="#E5E5E5"> whatever</font>

468
00:16:42,200 --> 00:16:47,240
comes out which is<font color="#CCCCCC"> PowerShell</font><font color="#E5E5E5"> so it runs</font>

469
00:16:44,510 --> 00:16:48,170
<font color="#CCCCCC">powershell and interactively so this is</font>

470
00:16:47,240 --> 00:16:52,090
not<font color="#CCCCCC"> going to show</font><font color="#E5E5E5"> up on the command line</font>

471
00:16:48,170 --> 00:16:52,089
<font color="#E5E5E5">and then actually enters into</font><font color="#CCCCCC"> PowerShell</font>

472
00:16:52,180 --> 00:16:56,109
so that's office gating binary names and

473
00:16:54,890 --> 00:16:58,340
<font color="#CCCCCC">that'll come into</font><font color="#E5E5E5"> play in a little bit</font>

474
00:16:56,110 --> 00:17:02,270
next<font color="#E5E5E5"> let's look at character insertion</font>

475
00:16:58,340 --> 00:17:03,980
obfuscation so the the<font color="#CCCCCC"> caret character</font>

476
00:17:02,270 --> 00:17:05,449
again<font color="#E5E5E5"> is probably one the most commonly</font>

477
00:17:03,980 --> 00:17:06,770
used office<font color="#CCCCCC"> Kishin characters for</font>

478
00:17:05,449 --> 00:17:08,900
command exe

479
00:17:06,770 --> 00:17:10,579
it's the escape character<font color="#CCCCCC"> for command</font><font color="#E5E5E5"> XE</font>

480
00:17:08,900 --> 00:17:12,860
and if you escape<font color="#E5E5E5"> something that has no</font>

481
00:17:10,579 --> 00:17:14,810
escapable meaning then it just is kind

482
00:17:12,859 --> 00:17:16,969
<font color="#E5E5E5">of a carrot and nothing else which is</font>

483
00:17:14,810 --> 00:17:18,438
great<font color="#E5E5E5"> for attackers</font><font color="#CCCCCC"> because they can</font>

484
00:17:16,970 --> 00:17:20,150
basically put carrot<font color="#E5E5E5"> some places to</font><font color="#CCCCCC"> get</font>

485
00:17:18,439 --> 00:17:22,640
<font color="#E5E5E5">around rigid detections that the fingers</font>

486
00:17:20,150 --> 00:17:24,980
might have I mentioned<font color="#E5E5E5"> apt</font><font color="#CCCCCC"> thirty twos</font>

487
00:17:22,640 --> 00:17:27,280
use of double quotes<font color="#E5E5E5"> again it's far</font><font color="#CCCCCC"> more</font>

488
00:17:24,980 --> 00:17:30,350
<font color="#CCCCCC">flexible than the</font><font color="#E5E5E5"> caret character</font>

489
00:17:27,280 --> 00:17:31,420
<font color="#E5E5E5">encapsulating</font><font color="#CCCCCC"> parenthesis this was one</font>

490
00:17:30,350 --> 00:17:33,770
that<font color="#E5E5E5"> I actually came across</font>

491
00:17:31,420 --> 00:17:35,330
investigating some newscaster activity

492
00:17:33,770 --> 00:17:36,710
and I don't<font color="#E5E5E5"> really think they were</font><font color="#CCCCCC"> using</font>

493
00:17:35,330 --> 00:17:38,810
it for obfuscation purposes but<font color="#E5E5E5"> I've</font>

494
00:17:36,710 --> 00:17:40,670
never<font color="#E5E5E5"> seen it used</font><font color="#CCCCCC"> before but basically</font>

495
00:17:38,810 --> 00:17:42,230
<font color="#CCCCCC">you</font><font color="#E5E5E5"> can take commands and sub commands</font>

496
00:17:40,670 --> 00:17:44,810
and wrap it<font color="#E5E5E5"> with as many layers</font><font color="#CCCCCC"> of</font>

497
00:17:42,230 --> 00:17:47,300
<font color="#E5E5E5">evenly balanced parentheses as well now</font>

498
00:17:44,810 --> 00:17:48,620
this could<font color="#E5E5E5"> be important if you have some</font>

499
00:17:47,300 --> 00:17:50,720
rigid detection that's looking for

500
00:17:48,620 --> 00:17:53,090
things like<font color="#E5E5E5"> multiple commands chained</font>

501
00:17:50,720 --> 00:17:54,710
together with ampersands<font color="#E5E5E5"> or pipe pipe or</font>

502
00:17:53,090 --> 00:17:55,220
something<font color="#CCCCCC"> like that and if you're only</font>

503
00:17:54,710 --> 00:17:56,539
<font color="#E5E5E5">looking for</font>

504
00:17:55,220 --> 00:17:57,860
<font color="#E5E5E5">white space</font><font color="#CCCCCC"> between those</font><font color="#E5E5E5"> then</font>

505
00:17:56,539 --> 00:18:01,580
parentheses are now going<font color="#E5E5E5"> to break that</font>

506
00:17:57,860 --> 00:18:02,899
detection in isolation all these things

507
00:18:01,580 --> 00:18:04,370
don't<font color="#E5E5E5"> really seem to be that</font><font color="#CCCCCC"> effective</font>

508
00:18:02,900 --> 00:18:06,320
<font color="#E5E5E5">if we start to merge all these things</font>

509
00:18:04,370 --> 00:18:07,850
together<font color="#E5E5E5"> it really makes us as defenders</font>

510
00:18:06,320 --> 00:18:09,879
have to try really hard to<font color="#E5E5E5"> take into</font>

511
00:18:07,850 --> 00:18:12,350
account<font color="#CCCCCC"> all</font><font color="#E5E5E5"> these possibilities</font>

512
00:18:09,880 --> 00:18:14,539
<font color="#E5E5E5">um</font><font color="#CCCCCC"> leading and trailing special</font>

513
00:18:12,350 --> 00:18:15,830
characters this<font color="#E5E5E5"> is one I've never seen</font>

514
00:18:14,539 --> 00:18:17,840
<font color="#E5E5E5">this use in the wild but basically</font>

515
00:18:15,830 --> 00:18:20,539
there's commas and semicolons that can

516
00:18:17,840 --> 00:18:22,428
be used in anywhere where<font color="#CCCCCC"> whitespace is</font>

517
00:18:20,539 --> 00:18:25,820
used as<font color="#E5E5E5"> the delimiter character in</font>

518
00:18:22,429 --> 00:18:27,020
command<font color="#CCCCCC"> X II so I came across this</font><font color="#E5E5E5"> just</font>

519
00:18:25,820 --> 00:18:28,789
writing a fuzzing script to basically

520
00:18:27,020 --> 00:18:30,139
pipe in all these different<font color="#E5E5E5"> random</font>

521
00:18:28,789 --> 00:18:31,908
characters and then see is this still a

522
00:18:30,140 --> 00:18:35,000
valid command<font color="#E5E5E5"> I mean these are the two</font>

523
00:18:31,909 --> 00:18:37,789
<font color="#E5E5E5">characters that bubbled up</font><font color="#CCCCCC"> and so yeah</font>

524
00:18:35,000 --> 00:18:40,309
if you think like command space slash

525
00:18:37,789 --> 00:18:43,700
<font color="#CCCCCC">sees space calc</font><font color="#E5E5E5"> you can actually</font><font color="#CCCCCC"> replace</font>

526
00:18:40,309 --> 00:18:45,530
<font color="#E5E5E5">all those spaces with as many commas and</font>

527
00:18:43,700 --> 00:18:47,200
semicolons as you want<font color="#E5E5E5"> so that could be</font>

528
00:18:45,530 --> 00:18:49,610
<font color="#E5E5E5">really</font><font color="#CCCCCC"> fun if</font><font color="#E5E5E5"> we start to add those up</font>

529
00:18:47,200 --> 00:18:51,260
<font color="#E5E5E5">standard input argument hiding and we</font>

530
00:18:49,610 --> 00:18:53,990
<font color="#E5E5E5">mentioned</font><font color="#CCCCCC"> that</font><font color="#E5E5E5"> in the fin 8 example a</font>

531
00:18:51,260 --> 00:18:56,929
few<font color="#E5E5E5"> other ones that this is actually</font>

532
00:18:53,990 --> 00:18:58,549
<font color="#E5E5E5">from an older blog for from not for</font>

533
00:18:56,929 --> 00:19:00,140
myself<font color="#CCCCCC"> for</font><font color="#E5E5E5"> several years ago</font><font color="#CCCCCC"> basically</font>

534
00:18:58,549 --> 00:19:02,080
for batch file office<font color="#CCCCCC"> keishon you can</font>

535
00:19:00,140 --> 00:19:04,400
basically intersperse<font color="#E5E5E5"> non-existent</font>

536
00:19:02,080 --> 00:19:06,500
<font color="#E5E5E5">environment</font><font color="#CCCCCC"> variables</font><font color="#E5E5E5"> and those simply</font>

537
00:19:04,400 --> 00:19:08,929
be<font color="#E5E5E5"> removed when the command runs this</font>

538
00:19:06,500 --> 00:19:10,280
does not<font color="#E5E5E5"> work on the command line</font><font color="#CCCCCC"> but</font>

539
00:19:08,929 --> 00:19:11,980
from a batch file perspective it's a

540
00:19:10,280 --> 00:19:14,899
nice way to<font color="#E5E5E5"> get some good static evasion</font>

541
00:19:11,980 --> 00:19:16,159
static detection of evasion<font color="#CCCCCC"> you can use</font>

542
00:19:14,900 --> 00:19:17,450
custom environment variables where you

543
00:19:16,159 --> 00:19:19,700
<font color="#E5E5E5">basically set</font><font color="#CCCCCC"> environment variable</font>

544
00:19:17,450 --> 00:19:21,830
values and call<font color="#E5E5E5"> that value</font><font color="#CCCCCC"> in</font><font color="#E5E5E5"> the same</font>

545
00:19:19,700 --> 00:19:23,419
<font color="#E5E5E5">session or use existing</font>

546
00:19:21,830 --> 00:19:27,889
environment variables<font color="#CCCCCC"> like</font><font color="#E5E5E5"> I mentioned</font>

547
00:19:23,419 --> 00:19:31,460
<font color="#E5E5E5">earlier so when I</font><font color="#CCCCCC"> released this out fin</font>

548
00:19:27,890 --> 00:19:33,020
coded command<font color="#E5E5E5"> a</font><font color="#CCCCCC"> PFC</font><font color="#E5E5E5"> part of that POC</font>

549
00:19:31,460 --> 00:19:34,340
included a couple<font color="#E5E5E5"> of these environment</font>

550
00:19:33,020 --> 00:19:36,500
variables<font color="#CCCCCC"> substring syntaxes for</font>

551
00:19:34,340 --> 00:19:38,000
<font color="#E5E5E5">commander powershell there's 20 got</font>

552
00:19:36,500 --> 00:19:39,770
tweeted this out and<font color="#E5E5E5"> then like an hour</font>

553
00:19:38,000 --> 00:19:42,860
later this guy replies<font color="#E5E5E5"> back where this</font>

554
00:19:39,770 --> 00:19:44,960
entire command encoded in this<font color="#CCCCCC"> wave and</font>

555
00:19:42,860 --> 00:19:46,729
<font color="#CCCCCC">something the tool basically the way I</font>

556
00:19:44,960 --> 00:19:48,049
built it you can have any input<font color="#E5E5E5"> command</font>

557
00:19:46,730 --> 00:19:49,700
and it<font color="#E5E5E5"> will basically create these</font>

558
00:19:48,049 --> 00:19:51,918
random sub string concatenation<font color="#CCCCCC"> of</font>

559
00:19:49,700 --> 00:19:56,390
<font color="#E5E5E5">environment variables and</font><font color="#CCCCCC"> produce</font>

560
00:19:51,919 --> 00:19:58,940
payloads like this so after after

561
00:19:56,390 --> 00:20:00,409
<font color="#E5E5E5">digging into this technique for me I was</font>

562
00:19:58,940 --> 00:20:02,210
really<font color="#E5E5E5"> curious has this already been</font>

563
00:20:00,409 --> 00:20:04,280
used before<font color="#CCCCCC"> did</font><font color="#E5E5E5"> we see it hackers using</font>

564
00:20:02,210 --> 00:20:05,720
this<font color="#CCCCCC"> that</font><font color="#E5E5E5"> maybe we've missed before and</font>

565
00:20:04,280 --> 00:20:08,299
so<font color="#E5E5E5"> doing some interesting retro hunts</font>

566
00:20:05,720 --> 00:20:08,960
<font color="#E5E5E5">and virustotal this techniques been used</font>

567
00:20:08,299 --> 00:20:11,600
for why

568
00:20:08,960 --> 00:20:15,289
while this is this is samples from 2012

569
00:20:11,600 --> 00:20:16,699
of the Devourer<font color="#E5E5E5"> malware but there's no</font>

570
00:20:15,289 --> 00:20:18,230
doubt this this technique is<font color="#CCCCCC"> they</font><font color="#E5E5E5"> come</font>

571
00:20:16,700 --> 00:20:20,120
<font color="#E5E5E5">back a lot longer than</font><font color="#CCCCCC"> that</font><font color="#E5E5E5"> of just</font>

572
00:20:18,230 --> 00:20:23,149
using concatenated<font color="#CCCCCC"> substrings</font><font color="#E5E5E5"> from</font>

573
00:20:20,120 --> 00:20:25,010
environment variables another one here

574
00:20:23,149 --> 00:20:26,719
this<font color="#E5E5E5"> is pretty from a really cool tool</font>

575
00:20:25,010 --> 00:20:28,580
this it's like one<font color="#E5E5E5"> of the smallest</font>

576
00:20:26,720 --> 00:20:30,049
<font color="#E5E5E5">obfuscators have ever found</font><font color="#CCCCCC"> like source</font>

577
00:20:28,580 --> 00:20:32,059
code is<font color="#E5E5E5"> really small but like it's it's</font>

578
00:20:30,049 --> 00:20:33,559
a<font color="#E5E5E5"> really cool concept</font><font color="#CCCCCC"> and that's</font>

579
00:20:32,059 --> 00:20:35,418
basically instead<font color="#E5E5E5"> of using no</font>

580
00:20:33,559 --> 00:20:38,418
environment<font color="#E5E5E5"> variables just start a batch</font>

581
00:20:35,419 --> 00:20:39,799
file<font color="#E5E5E5"> with with the full</font><font color="#CCCCCC"> alphabet</font><font color="#E5E5E5"> into</font><font color="#CCCCCC"> a</font>

582
00:20:38,419 --> 00:20:42,770
custom environment variable and then the

583
00:20:39,799 --> 00:20:44,480
rest<font color="#E5E5E5"> of your payload is then substrings</font>

584
00:20:42,770 --> 00:20:45,649
<font color="#CCCCCC">of that custom environment variable</font><font color="#E5E5E5"> so</font>

585
00:20:44,480 --> 00:20:48,080
this<font color="#CCCCCC"> is an</font><font color="#E5E5E5"> open source tool it's been</font>

586
00:20:45,649 --> 00:20:53,330
out for<font color="#CCCCCC"> I</font><font color="#E5E5E5"> think two years now</font><font color="#CCCCCC"> and here's</font>

587
00:20:48,080 --> 00:20:55,340
a decoded version of that command<font color="#CCCCCC"> and</font>

588
00:20:53,330 --> 00:20:58,580
the third<font color="#E5E5E5"> example is</font><font color="#CCCCCC"> using a tool called</font>

589
00:20:55,340 --> 00:21:00,139
batch encryption<font color="#E5E5E5"> and the office</font><font color="#CCCCCC"> gated</font>

590
00:20:58,580 --> 00:21:02,570
batch files only<font color="#E5E5E5"> one piece of the full</font>

591
00:21:00,140 --> 00:21:04,429
component<font color="#E5E5E5"> but basically it's initially</font>

592
00:21:02,570 --> 00:21:05,928
setting<font color="#E5E5E5"> it's creating a custom</font>

593
00:21:04,429 --> 00:21:07,610
environment variable and the name<font color="#CCCCCC"> of</font>

594
00:21:05,929 --> 00:21:09,320
<font color="#E5E5E5">that variable is single quote that's it</font>

595
00:21:07,610 --> 00:21:10,969
<font color="#E5E5E5">and then</font><font color="#CCCCCC"> they basically use known</font>

596
00:21:09,320 --> 00:21:13,250
environment<font color="#CCCCCC"> variable sub strings to set</font>

597
00:21:10,970 --> 00:21:15,860
that initial<font color="#CCCCCC"> value</font><font color="#E5E5E5"> and then they call</font>

598
00:21:13,250 --> 00:21:17,840
sub strings of that value that<font color="#E5E5E5"> single</font>

599
00:21:15,860 --> 00:21:19,370
quote<font color="#E5E5E5"> in the rest of their command so</font><font color="#CCCCCC"> it</font>

600
00:21:17,840 --> 00:21:20,750
gets pretty<font color="#CCCCCC"> crazy pretty</font><font color="#E5E5E5"> fast there's a</font>

601
00:21:19,370 --> 00:21:24,770
lot more<font color="#E5E5E5"> information this was a very</font>

602
00:21:20,750 --> 00:21:27,399
interesting<font color="#CCCCCC"> phishing document</font><font color="#E5E5E5"> so if</font>

603
00:21:24,770 --> 00:21:29,210
there's any well<font color="#E5E5E5"> I don't say that</font><font color="#CCCCCC"> I</font>

604
00:21:27,399 --> 00:21:30,590
would advise<font color="#CCCCCC"> you to</font><font color="#E5E5E5"> look at the white</font>

605
00:21:29,210 --> 00:21:32,210
paper if you're interested in what this

606
00:21:30,590 --> 00:21:33,590
document<font color="#E5E5E5"> was and where it came from and</font>

607
00:21:32,210 --> 00:21:37,909
some of the<font color="#E5E5E5"> potential political</font>

608
00:21:33,590 --> 00:21:39,379
<font color="#E5E5E5">motivations behind this one so advanced</font>

609
00:21:37,909 --> 00:21:42,919
payload office<font color="#CCCCCC"> keishon how do we put all</font>

610
00:21:39,380 --> 00:21:44,840
these pieces together<font color="#E5E5E5"> well if we start</font>

611
00:21:42,919 --> 00:21:47,029
<font color="#CCCCCC">with</font><font color="#E5E5E5"> this command here</font>

612
00:21:44,840 --> 00:21:48,678
<font color="#E5E5E5">III assemble this command if there's any</font>

613
00:21:47,029 --> 00:21:52,059
defenders<font color="#CCCCCC"> then the first part may look</font>

614
00:21:48,679 --> 00:21:56,240
pretty common<font color="#E5E5E5"> comm spec</font><font color="#CCCCCC"> bc start Beaman</font>

615
00:21:52,059 --> 00:21:59,600
<font color="#E5E5E5">so if anyone</font><font color="#CCCCCC"> has ever</font><font color="#E5E5E5"> used comm spec any</font>

616
00:21:56,240 --> 00:22:01,070
of their payloads there's a good<font color="#E5E5E5"> chance</font>

617
00:21:59,600 --> 00:22:02,750
that's<font color="#E5E5E5"> gotten detected if you're like</font>

618
00:22:01,070 --> 00:22:04,428
setting it in registry or services or

619
00:22:02,750 --> 00:22:06,770
something<font color="#E5E5E5"> like that</font><font color="#CCCCCC"> Metasploit a lot of</font>

620
00:22:04,429 --> 00:22:08,570
other tools<font color="#E5E5E5"> we use calm spec but</font><font color="#CCCCCC"> I use</font>

621
00:22:06,770 --> 00:22:10,158
this have the command<font color="#CCCCCC"> because I wanted</font>

622
00:22:08,570 --> 00:22:11,658
to<font color="#E5E5E5"> use something that defenders would</font>

623
00:22:10,159 --> 00:22:13,250
<font color="#E5E5E5">probably laugh at and say well I detect</font>

624
00:22:11,659 --> 00:22:14,539
<font color="#E5E5E5">that and then see well how can we mess</font>

625
00:22:13,250 --> 00:22:16,549
around<font color="#E5E5E5"> with this that maybe we won't</font>

626
00:22:14,539 --> 00:22:17,960
detect it<font color="#CCCCCC"> because</font><font color="#E5E5E5"> ultimately that should</font>

627
00:22:16,549 --> 00:22:19,580
be our<font color="#CCCCCC"> job is to always question our</font>

628
00:22:17,960 --> 00:22:21,770
assumptions<font color="#E5E5E5"> question what's possible</font>

629
00:22:19,580 --> 00:22:22,500
from a syntactical perspective so that

630
00:22:21,770 --> 00:22:26,400
<font color="#CCCCCC">we can all get</font>

631
00:22:22,500 --> 00:22:27,720
together<font color="#E5E5E5"> so this first part calms</font><font color="#CCCCCC"> back</font>

632
00:22:26,400 --> 00:22:32,640
is the environment<font color="#CCCCCC"> variable with a full</font>

633
00:22:27,720 --> 00:22:37,500
path to<font color="#E5E5E5"> command XE</font><font color="#CCCCCC"> b exit code c the</font>

634
00:22:32,640 --> 00:22:39,680
remainder is arguments etc<font color="#E5E5E5"> so if we have</font>

635
00:22:37,500 --> 00:22:42,480
defenders who are looking for<font color="#CCCCCC"> calm spec</font>

636
00:22:39,680 --> 00:22:44,160
<font color="#CCCCCC">in registry</font><font color="#E5E5E5"> and services and event logs</font>

637
00:22:42,480 --> 00:22:45,840
and stuff like that<font color="#E5E5E5"> what are ways</font><font color="#CCCCCC"> that</font>

638
00:22:44,160 --> 00:22:48,060
<font color="#CCCCCC">we</font><font color="#E5E5E5"> can still get the same value of calm</font>

639
00:22:45,840 --> 00:22:52,800
spec but not show up as<font color="#E5E5E5"> percent calms</font>

640
00:22:48,060 --> 00:22:54,929
back<font color="#E5E5E5"> percent one way is with these</font>

641
00:22:52,800 --> 00:22:56,370
<font color="#CCCCCC">twenty seven characters</font><font color="#E5E5E5"> we can</font><font color="#CCCCCC"> use sub</font>

642
00:22:54,930 --> 00:22:58,290
strings that will<font color="#E5E5E5"> still produce the same</font>

643
00:22:56,370 --> 00:22:59,820
twenty seven characters so<font color="#CCCCCC"> i'm saying</font>

644
00:22:58,290 --> 00:23:01,620
<font color="#E5E5E5">give me the environment variable</font><font color="#CCCCCC"> comp</font>

645
00:22:59,820 --> 00:23:03,600
spec and give me this the substring

646
00:23:01,620 --> 00:23:05,429
starting from the 0th index going<font color="#CCCCCC"> twenty</font>

647
00:23:03,600 --> 00:23:06,750
<font color="#CCCCCC">seven or starting with a negative</font>

648
00:23:05,430 --> 00:23:08,190
starting from the<font color="#E5E5E5"> end and going back</font>

649
00:23:06,750 --> 00:23:10,620
twenty seven characters and then giving

650
00:23:08,190 --> 00:23:12,060
me the next<font color="#E5E5E5"> twenty seven right these</font>

651
00:23:10,620 --> 00:23:15,479
four will still produce the exact<font color="#CCCCCC"> same</font>

652
00:23:12,060 --> 00:23:17,820
value<font color="#CCCCCC"> in addition we can use even larger</font>

653
00:23:15,480 --> 00:23:18,990
values and start from the<font color="#CCCCCC"> 0th and go out</font>

654
00:23:17,820 --> 00:23:20,370
<font color="#CCCCCC">for thirteen hundred and</font><font color="#E5E5E5"> thirty seven</font>

655
00:23:18,990 --> 00:23:22,050
characters<font color="#E5E5E5"> it doesn't matter it's going</font>

656
00:23:20,370 --> 00:23:25,229
<font color="#CCCCCC">to give</font><font color="#E5E5E5"> us the same value which is the</font>

657
00:23:22,050 --> 00:23:26,280
path<font color="#CCCCCC"> to command</font><font color="#E5E5E5"> XE another thing we can</font>

658
00:23:25,230 --> 00:23:28,440
do is<font color="#E5E5E5"> using environment variable</font>

659
00:23:26,280 --> 00:23:30,570
substitution which is what<font color="#CCCCCC"> fin seven was</font>

660
00:23:28,440 --> 00:23:32,070
using but for<font color="#E5E5E5"> different purposes we can</font>

661
00:23:30,570 --> 00:23:34,200
say okay give me the<font color="#CCCCCC"> comm spec that</font>

662
00:23:32,070 --> 00:23:36,149
value but replace back slashes with

663
00:23:34,200 --> 00:23:38,250
<font color="#E5E5E5">forward slashes which will still execute</font>

664
00:23:36,150 --> 00:23:41,970
<font color="#CCCCCC">perfectly fine or we can use values that</font>

665
00:23:38,250 --> 00:23:43,230
we know won't exist so let's choose two

666
00:23:41,970 --> 00:23:45,510
<font color="#E5E5E5">of these and keep office getting them a</font>

667
00:23:43,230 --> 00:23:47,310
little further we can randomize the case

668
00:23:45,510 --> 00:23:49,110
of the environment variable we can

669
00:23:47,310 --> 00:23:50,850
<font color="#CCCCCC">actually add significant whitespace in</font>

670
00:23:49,110 --> 00:23:53,550
certain places for these<font color="#E5E5E5"> environment</font>

671
00:23:50,850 --> 00:23:56,250
variables<font color="#CCCCCC"> and</font><font color="#E5E5E5"> then we can explicitly</font>

672
00:23:53,550 --> 00:23:58,230
sign the indexes so<font color="#E5E5E5"> i don't know about</font>

673
00:23:56,250 --> 00:24:00,030
you but<font color="#E5E5E5"> seeing a positive</font><font color="#CCCCCC"> or negative</font>

674
00:23:58,230 --> 00:24:01,050
sign<font color="#E5E5E5"> zero it's kind of a</font><font color="#CCCCCC"> suspicious</font>

675
00:24:00,030 --> 00:24:05,399
thing<font color="#E5E5E5"> on the command line</font><font color="#CCCCCC"> but</font>

676
00:24:01,050 --> 00:24:06,720
technically it's possible so we'll go

677
00:24:05,400 --> 00:24:08,610
with<font color="#E5E5E5"> a second option</font><font color="#CCCCCC"> and</font><font color="#E5E5E5"> put that back</font>

678
00:24:06,720 --> 00:24:09,960
<font color="#E5E5E5">into our command now a really important</font>

679
00:24:08,610 --> 00:24:12,270
<font color="#CCCCCC">thing here is</font><font color="#E5E5E5"> that context is crucial</font>

680
00:24:09,960 --> 00:24:14,130
this<font color="#E5E5E5"> will work if you copy it</font><font color="#CCCCCC"> into a</font>

681
00:24:12,270 --> 00:24:15,750
command prompt<font color="#E5E5E5"> or if you're in a context</font>

682
00:24:14,130 --> 00:24:17,940
that understands<font color="#E5E5E5"> this is being</font>

683
00:24:15,750 --> 00:24:20,640
interpreted by command<font color="#E5E5E5"> XE like w script</font>

684
00:24:17,940 --> 00:24:22,260
<font color="#E5E5E5">that show this will not work</font><font color="#CCCCCC"> if you copy</font>

685
00:24:20,640 --> 00:24:24,030
<font color="#E5E5E5">and</font><font color="#CCCCCC"> paste it</font><font color="#E5E5E5"> into registry like</font><font color="#CCCCCC"> a</font>

686
00:24:22,260 --> 00:24:24,480
<font color="#CCCCCC">scheduled</font><font color="#E5E5E5"> task or service or something</font>

687
00:24:24,030 --> 00:24:26,310
<font color="#E5E5E5">like that</font>

688
00:24:24,480 --> 00:24:27,720
basically in those<font color="#E5E5E5"> context there's</font>

689
00:24:26,310 --> 00:24:30,419
literally<font color="#CCCCCC"> like a finally replace on</font>

690
00:24:27,720 --> 00:24:32,700
<font color="#CCCCCC">percent comm spec percent to replace it</font>

691
00:24:30,420 --> 00:24:34,500
with community but those<font color="#E5E5E5"> contexts don't</font>

692
00:24:32,700 --> 00:24:35,530
understand this crazy substitution

693
00:24:34,500 --> 00:24:37,240
syntax

694
00:24:35,530 --> 00:24:38,649
the context of<font color="#CCCCCC"> commanda actually is</font>

695
00:24:37,240 --> 00:24:40,390
really<font color="#E5E5E5"> important for this initial</font>

696
00:24:38,650 --> 00:24:43,870
technique to work<font color="#E5E5E5"> if the very first</font>

697
00:24:40,390 --> 00:24:45,070
thing<font color="#CCCCCC"> is command so let's keep going for</font>

698
00:24:43,870 --> 00:24:47,770
the<font color="#CCCCCC"> rest</font><font color="#E5E5E5"> of the command we can randomize</font>

699
00:24:45,070 --> 00:24:51,220
the case<font color="#CCCCCC"> we can also</font><font color="#E5E5E5"> remove a lot of</font>

700
00:24:47,770 --> 00:24:52,870
white<font color="#CCCCCC"> space so</font><font color="#E5E5E5"> we had BC start B min</font>

701
00:24:51,220 --> 00:24:53,890
with white space we can actually smash

702
00:24:52,870 --> 00:24:56,409
all those<font color="#CCCCCC"> together</font>

703
00:24:53,890 --> 00:24:59,110
and the interpreter understands argument

704
00:24:56,410 --> 00:25:01,210
by argument how to parse it out<font color="#CCCCCC"> a fun</font>

705
00:24:59,110 --> 00:25:02,590
fact here if you'll notice<font color="#E5E5E5"> our conflict</font>

706
00:25:01,210 --> 00:25:05,410
variable again is<font color="#E5E5E5"> going to expand</font><font color="#CCCCCC"> to</font>

707
00:25:02,590 --> 00:25:07,840
command<font color="#E5E5E5"> X</font><font color="#CCCCCC"> E and then</font><font color="#E5E5E5"> we have /b starting</font>

708
00:25:05,410 --> 00:25:08,710
next with no<font color="#CCCCCC"> whitespace</font><font color="#E5E5E5"> the interesting</font>

709
00:25:07,840 --> 00:25:11,709
<font color="#E5E5E5">thing is that the operating system</font>

710
00:25:08,710 --> 00:25:12,760
<font color="#E5E5E5">actually forces an extra whitespace</font><font color="#CCCCCC"> when</font>

711
00:25:11,710 --> 00:25:14,620
you<font color="#CCCCCC"> actually</font><font color="#E5E5E5"> look at it either in the</font>

712
00:25:12,760 --> 00:25:16,930
command line<font color="#E5E5E5"> logs or through live</font>

713
00:25:14,620 --> 00:25:18,879
<font color="#E5E5E5">process auditing and it</font><font color="#CCCCCC"> actually adds</font>

714
00:25:16,930 --> 00:25:19,990
this<font color="#E5E5E5"> white space so</font><font color="#CCCCCC"> here's an example of</font>

715
00:25:18,880 --> 00:25:22,450
you can have a<font color="#E5E5E5"> detection that is a</font>

716
00:25:19,990 --> 00:25:24,610
hundred<font color="#CCCCCC"> percent awesome</font><font color="#E5E5E5"> at statically</font>

717
00:25:22,450 --> 00:25:26,830
detecting a rule that's<font color="#E5E5E5"> in registry or</font>

718
00:25:24,610 --> 00:25:28,810
services or<font color="#E5E5E5"> something like</font><font color="#CCCCCC"> that but</font><font color="#E5E5E5"> will</font>

719
00:25:26,830 --> 00:25:31,770
fail<font color="#CCCCCC"> if you don't take</font><font color="#E5E5E5"> into account the</font>

720
00:25:28,810 --> 00:25:34,629
way that is it's processed<font color="#E5E5E5"> after</font><font color="#CCCCCC"> it</font><font color="#E5E5E5"> runs</font>

721
00:25:31,770 --> 00:25:36,070
so sometimes you actually<font color="#E5E5E5"> need</font><font color="#CCCCCC"> to tune</font>

722
00:25:34,630 --> 00:25:37,990
your detection<font color="#E5E5E5"> to have different for</font>

723
00:25:36,070 --> 00:25:39,189
static and<font color="#E5E5E5"> dynamic or to basically make</font>

724
00:25:37,990 --> 00:25:40,570
it<font color="#E5E5E5"> in such</font><font color="#CCCCCC"> a</font><font color="#E5E5E5"> way that it can handle both</font>

725
00:25:39,190 --> 00:25:42,010
scenarios that's why it's important to

726
00:25:40,570 --> 00:25:46,770
<font color="#E5E5E5">test your data sources to know which</font>

727
00:25:42,010 --> 00:25:50,110
which data source am i working with so

728
00:25:46,770 --> 00:25:53,860
we can reorder<font color="#E5E5E5"> ano to</font><font color="#CCCCCC"> noa doesn't matter</font>

729
00:25:50,110 --> 00:25:55,209
we can also add<font color="#CCCCCC"> whitespace we can add</font>

730
00:25:53,860 --> 00:25:56,439
all those commas and semicolons we

731
00:25:55,210 --> 00:25:58,510
talked about<font color="#CCCCCC"> any orbit</font><font color="#E5E5E5"> there's a white</font>

732
00:25:56,440 --> 00:26:02,200
<font color="#E5E5E5">space used as a delimiter</font><font color="#CCCCCC"> we can add any</font>

733
00:25:58,510 --> 00:26:03,250
<font color="#CCCCCC">number of commas and semicolons</font><font color="#E5E5E5"> we can</font>

734
00:26:02,200 --> 00:26:05,650
then add<font color="#E5E5E5"> several different layers</font><font color="#CCCCCC"> of</font>

735
00:26:03,250 --> 00:26:07,570
carrots<font color="#E5E5E5"> and we add different layers to</font>

736
00:26:05,650 --> 00:26:09,430
<font color="#E5E5E5">basically escape themselves so they</font>

737
00:26:07,570 --> 00:26:12,580
still<font color="#CCCCCC"> persist in the lower layers of sub</font>

738
00:26:09,430 --> 00:26:14,740
<font color="#E5E5E5">process executions and if you'll see if</font>

739
00:26:12,580 --> 00:26:17,320
we<font color="#CCCCCC"> actually run this command then start</font>

740
00:26:14,740 --> 00:26:19,750
<font color="#CCCCCC">from</font><font color="#E5E5E5"> the bottom up</font><font color="#CCCCCC"> there's</font><font color="#E5E5E5"> four process</font>

741
00:26:17,320 --> 00:26:21,820
executions<font color="#E5E5E5"> we have the fine string of</font>

742
00:26:19,750 --> 00:26:23,620
this own process the final<font color="#E5E5E5"> net status is</font>

743
00:26:21,820 --> 00:26:25,179
an own process and<font color="#CCCCCC"> this intermediate</font>

744
00:26:23,620 --> 00:26:26,530
<font color="#E5E5E5">process here and we're going to talk</font>

745
00:26:25,180 --> 00:26:28,150
<font color="#CCCCCC">about this later but the highlighted</font>

746
00:26:26,530 --> 00:26:29,620
blue<font color="#CCCCCC"> portion this</font><font color="#E5E5E5"> is</font><font color="#CCCCCC"> a really</font>

747
00:26:28,150 --> 00:26:30,940
fascinating artifact of<font color="#E5E5E5"> the operating</font>

748
00:26:29,620 --> 00:26:32,800
system<font color="#CCCCCC"> that's</font><font color="#E5E5E5"> produced in certain cases</font>

749
00:26:30,940 --> 00:26:36,670
<font color="#E5E5E5">but</font><font color="#CCCCCC"> basically if you ever see</font><font color="#E5E5E5"> command on</font>

750
00:26:32,800 --> 00:26:39,580
<font color="#E5E5E5">exit</font><font color="#CCCCCC"> II space space /s space /d space</font>

751
00:26:36,670 --> 00:26:42,010
<font color="#CCCCCC">slash z no space double</font><font color="#E5E5E5"> quote space and</font>

752
00:26:39,580 --> 00:26:44,500
then something then<font color="#E5E5E5"> that's indicative of</font>

753
00:26:42,010 --> 00:26:46,030
<font color="#E5E5E5">this operating system</font><font color="#CCCCCC"> performing</font><font color="#E5E5E5"> this</font>

754
00:26:44,500 --> 00:26:47,320
additional execution which can actually

755
00:26:46,030 --> 00:26:49,059
<font color="#E5E5E5">be really</font><font color="#CCCCCC"> helpful for</font><font color="#E5E5E5"> some detections</font>

756
00:26:47,320 --> 00:26:51,519
<font color="#CCCCCC">but again we'll talk about that</font><font color="#E5E5E5"> later</font>

757
00:26:49,059 --> 00:26:53,860
but as you<font color="#E5E5E5"> might notice well the netstat</font>

758
00:26:51,519 --> 00:26:56,559
command is not obfuscated it<font color="#E5E5E5"> didn't</font>

759
00:26:53,860 --> 00:26:58,149
carry<font color="#CCCCCC"> any of</font><font color="#E5E5E5"> those carrots or commas or</font>

760
00:26:56,559 --> 00:27:01,210
semicolons<font color="#CCCCCC"> like did this</font><font color="#E5E5E5"> really bias</font>

761
00:26:58,149 --> 00:27:02,498
anything<font color="#CCCCCC"> and this</font><font color="#E5E5E5"> is why I said that a</font>

762
00:27:01,210 --> 00:27:03,610
lot<font color="#E5E5E5"> of defenders would</font><font color="#CCCCCC"> maybe</font><font color="#E5E5E5"> look at</font>

763
00:27:02,499 --> 00:27:05,230
this<font color="#E5E5E5"> and say why don't</font><font color="#CCCCCC"> we care about</font>

764
00:27:03,610 --> 00:27:07,779
this<font color="#E5E5E5"> because dynamically it resolves I'm</font>

765
00:27:05,230 --> 00:27:09,039
still gonna<font color="#E5E5E5"> find the child process well</font>

766
00:27:07,779 --> 00:27:11,379
<font color="#E5E5E5">there are things we can do</font>

767
00:27:09,039 --> 00:27:14,549
so combos and semicolons and carrots

768
00:27:11,379 --> 00:27:17,620
don't<font color="#E5E5E5"> persist into this process but a</font>

769
00:27:14,549 --> 00:27:19,929
double quote<font color="#E5E5E5"> would so as long</font><font color="#CCCCCC"> as we used</font>

770
00:27:17,620 --> 00:27:22,508
evenly paired double quotes<font color="#E5E5E5"> they will</font>

771
00:27:19,929 --> 00:27:24,159
persist<font color="#CCCCCC"> in the child processes</font><font color="#E5E5E5"> now the</font>

772
00:27:22,509 --> 00:27:25,629
carrot didn't persist because<font color="#CCCCCC"> netstat</font>

773
00:27:24,159 --> 00:27:27,450
doesn't have any concept<font color="#E5E5E5"> of the carrot</font>

774
00:27:25,629 --> 00:27:29,889
it's not an escape<font color="#CCCCCC"> character</font><font color="#E5E5E5"> to netstat</font>

775
00:27:27,450 --> 00:27:31,360
but technically the double quote doesn't

776
00:27:29,889 --> 00:27:33,428
<font color="#E5E5E5">have any meaning either but</font><font color="#CCCCCC"> since it</font>

777
00:27:31,360 --> 00:27:35,740
came<font color="#CCCCCC"> from command</font><font color="#E5E5E5"> as a parent process</font>

778
00:27:33,429 --> 00:27:38,080
<font color="#E5E5E5">somewhere in that chain it persists down</font>

779
00:27:35,740 --> 00:27:40,210
and it's kind of an artifact of how the

780
00:27:38,080 --> 00:27:42,070
arguments are assembled and<font color="#E5E5E5"> it'll</font>

781
00:27:40,210 --> 00:27:43,539
persist into that final process so now

782
00:27:42,070 --> 00:27:46,119
as a defender if I was<font color="#E5E5E5"> looking for net</font>

783
00:27:43,539 --> 00:27:47,889
<font color="#E5E5E5">stat ano or Inouye or etc</font><font color="#CCCCCC"> I'm gonna have</font>

784
00:27:46,119 --> 00:27:50,110
to deal<font color="#CCCCCC"> with double quotes appearing</font>

785
00:27:47,889 --> 00:27:52,899
<font color="#E5E5E5">almost anywhere in the argument for any</font>

786
00:27:50,110 --> 00:27:55,748
child process<font color="#E5E5E5"> that starts to suck it's a</font>

787
00:27:52,899 --> 00:27:57,070
lot<font color="#CCCCCC"> of</font><font color="#E5E5E5"> extra work</font><font color="#CCCCCC"> for us so invoke</font>

788
00:27:55,749 --> 00:27:59,230
<font color="#CCCCCC">association will basically take any</font>

789
00:27:57,070 --> 00:28:01,299
arbitrary<font color="#E5E5E5"> command and if you start your</font>

790
00:27:59,230 --> 00:28:02,379
<font color="#E5E5E5">command with this extra office</font><font color="#CCCCCC"> Gatien of</font>

791
00:28:01,299 --> 00:28:03,789
like double<font color="#CCCCCC"> quotes or something like</font>

792
00:28:02,379 --> 00:28:06,369
<font color="#E5E5E5">that it'll</font><font color="#CCCCCC"> maintain that throughout all</font>

793
00:28:03,789 --> 00:28:07,600
the layers of obfuscation<font color="#CCCCCC"> this is</font>

794
00:28:06,369 --> 00:28:08,889
actually<font color="#E5E5E5"> really difficult</font><font color="#CCCCCC"> because with</font>

795
00:28:07,600 --> 00:28:11,080
<font color="#E5E5E5">powershell obfuscation you can actually</font>

796
00:28:08,889 --> 00:28:12,908
<font color="#E5E5E5">harness the power of like the abstract</font>

797
00:28:11,080 --> 00:28:14,980
syntax tree<font color="#E5E5E5"> there tokenizer to know of</font>

798
00:28:12,909 --> 00:28:16,119
this command which part is a command

799
00:28:14,980 --> 00:28:18,490
what's an argument what's a string

800
00:28:16,119 --> 00:28:20,379
<font color="#E5E5E5">command have any of that stuff so</font><font color="#CCCCCC"> this</font>

801
00:28:18,490 --> 00:28:22,029
slide<font color="#CCCCCC"> is my world's tiniest violin</font>

802
00:28:20,379 --> 00:28:23,529
looking for some sympathy basically

803
00:28:22,029 --> 00:28:25,269
<font color="#E5E5E5">there were several</font><font color="#CCCCCC"> fringe cases</font><font color="#E5E5E5"> of this</font>

804
00:28:23,529 --> 00:28:26,559
project really<font color="#E5E5E5"> hard because you're</font>

805
00:28:25,269 --> 00:28:32,619
basically<font color="#CCCCCC"> working with</font><font color="#E5E5E5"> no additional</font>

806
00:28:26,559 --> 00:28:34,600
<font color="#CCCCCC">visibility</font><font color="#E5E5E5"> but it is still possible so</font>

807
00:28:32,619 --> 00:28:37,959
again<font color="#E5E5E5"> for the defenders who may say</font><font color="#CCCCCC"> okay</font>

808
00:28:34,600 --> 00:28:39,490
well<font color="#CCCCCC"> okay dynamically maybe nets that</font>

809
00:28:37,960 --> 00:28:41,200
will show up with double quotes<font color="#CCCCCC"> I'll</font>

810
00:28:39,490 --> 00:28:43,779
just remove double quotes<font color="#E5E5E5"> first and then</font>

811
00:28:41,200 --> 00:28:45,610
apply<font color="#E5E5E5"> my rules and go from there well I</font>

812
00:28:43,779 --> 00:28:47,889
would<font color="#E5E5E5"> argue there's still tremendous</font>

813
00:28:45,610 --> 00:28:50,619
value and looking for the presence of

814
00:28:47,889 --> 00:28:52,779
<font color="#CCCCCC">obfuscation even if you have a way to</font>

815
00:28:50,619 --> 00:28:55,119
decode<font color="#CCCCCC"> it</font><font color="#E5E5E5"> the presence of office</font><font color="#CCCCCC"> Gatien</font>

816
00:28:52,779 --> 00:28:56,619
gives you insight in maybe there's

817
00:28:55,119 --> 00:28:58,059
something<font color="#CCCCCC"> shady going</font><font color="#E5E5E5"> on here like</font>

818
00:28:56,619 --> 00:29:00,039
<font color="#CCCCCC">that's a signal in and of itself</font><font color="#E5E5E5"> like</font>

819
00:28:58,059 --> 00:29:02,240
why is there an obfuscation attempt here

820
00:29:00,039 --> 00:29:04,370
<font color="#E5E5E5">and a to counter that</font>

821
00:29:02,240 --> 00:29:07,100
I'd also<font color="#E5E5E5"> say there are a lot of things</font>

822
00:29:04,370 --> 00:29:08,659
that<font color="#E5E5E5"> you can do from command</font><font color="#CCCCCC"> XE</font><font color="#E5E5E5"> that</font>

823
00:29:07,100 --> 00:29:10,010
never spawn a child<font color="#E5E5E5"> process that I would</font>

824
00:29:08,660 --> 00:29:13,160
still like<font color="#E5E5E5"> to</font><font color="#CCCCCC"> know about</font><font color="#E5E5E5"> even if it's</font>

825
00:29:10,010 --> 00:29:16,100
just<font color="#CCCCCC"> in</font><font color="#E5E5E5"> this crazy encoded blob creating</font>

826
00:29:13,160 --> 00:29:18,140
files<font color="#CCCCCC"> maybe</font><font color="#E5E5E5"> the attacker wants to echo</font>

827
00:29:16,100 --> 00:29:20,030
something<font color="#CCCCCC"> to sinkhole on your cloud</font>

828
00:29:18,140 --> 00:29:22,100
<font color="#E5E5E5">security product by echoing you know</font>

829
00:29:20,030 --> 00:29:24,710
<font color="#E5E5E5">localhost into your host file for</font><font color="#CCCCCC"> that</font>

830
00:29:22,100 --> 00:29:26,870
<font color="#E5E5E5">like that's a big deal and if all these</font>

831
00:29:24,710 --> 00:29:28,309
commands in red are totally office gated

832
00:29:26,870 --> 00:29:29,780
and<font color="#E5E5E5"> looks nothing like that and there's</font>

833
00:29:28,309 --> 00:29:32,809
no child process I<font color="#E5E5E5"> would still want to</font>

834
00:29:29,780 --> 00:29:34,428
<font color="#E5E5E5">know about it</font><font color="#CCCCCC"> so I propose there's still</font>

835
00:29:32,809 --> 00:29:36,230
value<font color="#CCCCCC"> in detecting</font><font color="#E5E5E5"> office</font><font color="#CCCCCC"> Gatien in and</font>

836
00:29:34,429 --> 00:29:38,300
of itself<font color="#E5E5E5"> plus if you put in the legwork</font>

837
00:29:36,230 --> 00:29:39,679
to<font color="#E5E5E5"> do that here</font><font color="#CCCCCC"> then</font><font color="#E5E5E5"> you get the benefit</font>

838
00:29:38,300 --> 00:29:41,030
<font color="#CCCCCC">of being able</font><font color="#E5E5E5"> to search statically in a</font>

839
00:29:39,679 --> 00:29:42,980
lot<font color="#E5E5E5"> of places</font><font color="#CCCCCC"> for</font><font color="#E5E5E5"> these obfuscation</font>

840
00:29:41,030 --> 00:29:44,510
techniques which<font color="#E5E5E5"> is how I found the</font>

841
00:29:42,980 --> 00:29:48,710
previous office<font color="#CCCCCC"> keishon techniques of</font>

842
00:29:44,510 --> 00:29:51,470
those crazy office gated batch files so

843
00:29:48,710 --> 00:29:53,059
let's<font color="#CCCCCC"> say you're a red teamer</font><font color="#E5E5E5"> and your</font>

844
00:29:51,470 --> 00:29:54,890
target<font color="#E5E5E5"> is looking for all these</font>

845
00:29:53,059 --> 00:29:56,420
different<font color="#CCCCCC"> characters</font><font color="#E5E5E5"> right there on the</font>

846
00:29:54,890 --> 00:29:58,309
game they're looking for commas for

847
00:29:56,420 --> 00:30:01,190
semicolons for carrots for double quotes

848
00:29:58,309 --> 00:30:02,120
<font color="#E5E5E5">all this stuff and you know if you try</font>

849
00:30:01,190 --> 00:30:05,420
to use one<font color="#CCCCCC"> of</font><font color="#E5E5E5"> those techniques you're</font>

850
00:30:02,120 --> 00:30:07,550
gonna get burned at this point the

851
00:30:05,420 --> 00:30:09,590
research<font color="#E5E5E5"> I really was wondering can I</font>

852
00:30:07,550 --> 00:30:11,960
get<font color="#CCCCCC"> away with murder on the command line</font>

853
00:30:09,590 --> 00:30:15,399
without<font color="#E5E5E5"> these characters because if I</font>

854
00:30:11,960 --> 00:30:19,580
can then I need<font color="#E5E5E5"> to have detection for it</font>

855
00:30:15,400 --> 00:30:21,080
so basically this led<font color="#E5E5E5"> me to count with</font>

856
00:30:19,580 --> 00:30:23,059
four different<font color="#CCCCCC"> ways</font><font color="#E5E5E5"> to encode entire</font>

857
00:30:21,080 --> 00:30:24,379
payloads without having to use a single

858
00:30:23,059 --> 00:30:27,620
one of these<font color="#CCCCCC"> characters but still having</font>

859
00:30:24,380 --> 00:30:32,200
the option to if I want to so the first

860
00:30:27,620 --> 00:30:35,120
<font color="#CCCCCC">one is concatenation so netstat</font><font color="#E5E5E5"> you know</font>

861
00:30:32,200 --> 00:30:36,830
another fun<font color="#CCCCCC"> thing we can do is</font><font color="#E5E5E5"> instead</font>

862
00:30:35,120 --> 00:30:40,699
of<font color="#CCCCCC"> tak ano we can actually use a slash</font>

863
00:30:36,830 --> 00:30:42,649
<font color="#E5E5E5">now</font><font color="#CCCCCC"> this</font><font color="#E5E5E5"> actually might burn a lot of</font>

864
00:30:40,700 --> 00:30:45,559
<font color="#E5E5E5">detection</font><font color="#CCCCCC"> x' because kind</font><font color="#E5E5E5"> of the side</font>

865
00:30:42,650 --> 00:30:47,750
<font color="#E5E5E5">bonus anywhere where you see a dash or a</font>

866
00:30:45,559 --> 00:30:49,550
forward slash<font color="#E5E5E5"> there's a good chance that</font>

867
00:30:47,750 --> 00:30:51,080
<font color="#E5E5E5">they're interchangeable</font><font color="#CCCCCC"> so if you're</font>

868
00:30:49,550 --> 00:30:53,659
<font color="#CCCCCC">writing detections based on W scripts</font>

869
00:30:51,080 --> 00:30:56,240
slash<font color="#E5E5E5"> no logo you can</font><font color="#CCCCCC"> use a dash instead</font>

870
00:30:53,660 --> 00:30:58,040
<font color="#E5E5E5">or if you have</font><font color="#CCCCCC"> PowerShell detection that</font>

871
00:30:56,240 --> 00:31:01,040
are looking<font color="#E5E5E5"> for</font><font color="#CCCCCC"> a dash and coded command</font>

872
00:30:58,040 --> 00:31:03,649
<font color="#E5E5E5">you can use slash</font><font color="#CCCCCC"> encoded command</font><font color="#E5E5E5"> same</font>

873
00:31:01,040 --> 00:31:05,629
with register a lot of detect detection

874
00:31:03,650 --> 00:31:08,059
<font color="#E5E5E5">czar written looking for slash I HTTP</font>

875
00:31:05,630 --> 00:31:09,350
but<font color="#E5E5E5"> you can use a dash instead</font><font color="#CCCCCC"> I'm in</font>

876
00:31:08,059 --> 00:31:11,178
fun fact for<font color="#E5E5E5"> this one if you look at the</font>

877
00:31:09,350 --> 00:31:13,129
<font color="#E5E5E5">URL</font><font color="#CCCCCC"> you can actually change</font><font color="#E5E5E5"> four slashes</font>

878
00:31:11,179 --> 00:31:14,390
<font color="#E5E5E5">to backward slashes and some languages</font>

879
00:31:13,130 --> 00:31:15,539
<font color="#CCCCCC">like PowerShell you can actually</font><font color="#E5E5E5"> use a</font>

880
00:31:14,390 --> 00:31:17,789
<font color="#E5E5E5">forward in the back or</font>

881
00:31:15,539 --> 00:31:20,700
or than afford etc and it gets<font color="#E5E5E5"> really</font>

882
00:31:17,789 --> 00:31:22,080
crazy<font color="#E5E5E5"> really fast so it's important they</font>

883
00:31:20,700 --> 00:31:23,999
got to poke at these commands<font color="#CCCCCC"> to</font><font color="#E5E5E5"> see hey</font>

884
00:31:22,080 --> 00:31:25,739
when I write this detection<font color="#CCCCCC"> does</font><font color="#E5E5E5"> it</font>

885
00:31:23,999 --> 00:31:27,479
always have to<font color="#E5E5E5"> be a</font><font color="#CCCCCC"> dash</font><font color="#E5E5E5"> or can it also</font>

886
00:31:25,739 --> 00:31:29,220
<font color="#CCCCCC">be a slash and if that's</font><font color="#E5E5E5"> the case I want</font>

887
00:31:27,479 --> 00:31:30,840
<font color="#CCCCCC">to</font><font color="#E5E5E5"> look for both and maybe I want to</font>

888
00:31:29,220 --> 00:31:32,100
look for the slash exclusively<font color="#E5E5E5"> because</font>

889
00:31:30,840 --> 00:31:34,168
it's really<font color="#E5E5E5"> weird and no one should ever</font>

890
00:31:32,100 --> 00:31:37,259
do that so if anyone does then I want to

891
00:31:34,169 --> 00:31:38,369
know about it<font color="#CCCCCC"> so what we're gonna</font><font color="#E5E5E5"> do is</font>

892
00:31:37,259 --> 00:31:40,019
we're going to take our command and

893
00:31:38,369 --> 00:31:41,580
<font color="#E5E5E5">we're gonna set it into a process level</font>

894
00:31:40,019 --> 00:31:44,070
<font color="#E5E5E5">environment variable in this case we'll</font>

895
00:31:41,580 --> 00:31:45,600
just<font color="#E5E5E5"> call it comm for command and let's</font>

896
00:31:44,070 --> 00:31:48,059
just echo<font color="#CCCCCC"> that comm</font><font color="#E5E5E5"> just to make sure</font><font color="#CCCCCC"> it</font>

897
00:31:45,600 --> 00:31:50,219
actually set the value right<font color="#CCCCCC"> now if we</font>

898
00:31:48,059 --> 00:31:51,570
echo<font color="#E5E5E5"> it and the first example here we</font>

899
00:31:50,220 --> 00:31:54,179
actually<font color="#E5E5E5"> don't see the value we</font><font color="#CCCCCC"> just see</font>

900
00:31:51,570 --> 00:31:56,580
<font color="#E5E5E5">percent come percent and the reason</font><font color="#CCCCCC"> is</font>

901
00:31:54,179 --> 00:31:58,799
is<font color="#CCCCCC"> that</font><font color="#E5E5E5"> command actually is not going to</font>

902
00:31:56,580 --> 00:32:01,199
automatically expand that value in the

903
00:31:58,799 --> 00:32:03,389
<font color="#E5E5E5">current session two ways we could do</font>

904
00:32:01,200 --> 00:32:05,489
<font color="#CCCCCC">that</font><font color="#E5E5E5"> not the only way so in the bottom</font>

905
00:32:03,389 --> 00:32:07,529
example<font color="#CCCCCC"> if we</font><font color="#E5E5E5"> just spawn a child process</font>

906
00:32:05,489 --> 00:32:09,330
<font color="#CCCCCC">and then echo</font><font color="#E5E5E5"> percent come percent it</font>

907
00:32:07,529 --> 00:32:11,519
works because<font color="#CCCCCC"> a child process as in the</font>

908
00:32:09,330 --> 00:32:13,590
subsequent child process will

909
00:32:11,519 --> 00:32:15,479
automatically expand the value but if we

910
00:32:13,590 --> 00:32:17,309
want to stay<font color="#CCCCCC"> in the same session</font><font color="#E5E5E5"> we can</font>

911
00:32:15,479 --> 00:32:19,349
use this call internal command which

912
00:32:17,309 --> 00:32:21,960
says expand the value of this variable

913
00:32:19,349 --> 00:32:23,220
<font color="#E5E5E5">so</font><font color="#CCCCCC"> in</font><font color="#E5E5E5"> that case when we echo % comm</font>

914
00:32:21,960 --> 00:32:25,830
forcement we actually get the<font color="#E5E5E5"> Nets a</font>

915
00:32:23,220 --> 00:32:28,379
command so let's use that<font color="#E5E5E5"> so we're gonna</font>

916
00:32:25,830 --> 00:32:30,119
call<font color="#E5E5E5"> % comm percent and as we can see it</font>

917
00:32:28,379 --> 00:32:31,738
runs our netstat command<font color="#CCCCCC"> awesome</font>

918
00:32:30,119 --> 00:32:34,978
baby steps we can set our command in a

919
00:32:31,739 --> 00:32:36,720
variable<font color="#E5E5E5"> and execute it</font><font color="#CCCCCC"> what we can then</font>

920
00:32:34,979 --> 00:32:39,779
<font color="#E5E5E5">do</font><font color="#CCCCCC"> is chop up</font><font color="#E5E5E5"> our command into a couple</font>

921
00:32:36,720 --> 00:32:42,299
<font color="#CCCCCC">variables</font><font color="#E5E5E5"> let's say 3</font><font color="#CCCCCC"> and then call the</font>

922
00:32:39,779 --> 00:32:44,580
reassembly<font color="#CCCCCC"> of com1 com2 and com3 and it</font>

923
00:32:42,299 --> 00:32:47,849
also<font color="#CCCCCC"> executes it just fine now in</font><font color="#E5E5E5"> this</font>

924
00:32:44,580 --> 00:32:50,309
case this is screenshots from<font color="#CCCCCC"> sis Mon of</font>

925
00:32:47,849 --> 00:32:54,330
the process execution<font color="#CCCCCC"> and if you'll</font>

926
00:32:50,309 --> 00:32:56,070
<font color="#E5E5E5">notice here for a</font><font color="#CCCCCC"> % comm</font><font color="#E5E5E5"> 1% anywhere</font>

927
00:32:54,330 --> 00:32:57,749
where there's<font color="#CCCCCC"> 1% in your command there's</font>

928
00:32:56,070 --> 00:33:00,330
actually<font color="#CCCCCC"> two percents</font><font color="#E5E5E5"> in this and this</font>

929
00:32:57,749 --> 00:33:02,849
is actually from a bug in<font color="#E5E5E5"> a parsing bug</font>

930
00:33:00,330 --> 00:33:04,799
in system on<font color="#E5E5E5"> I erased a blog post on it</font>

931
00:33:02,849 --> 00:33:07,080
<font color="#E5E5E5">a</font><font color="#CCCCCC"> couple</font><font color="#E5E5E5"> weeks ago</font><font color="#CCCCCC"> where</font><font color="#E5E5E5"> basically it's</font>

932
00:33:04,799 --> 00:33:08,340
<font color="#CCCCCC">not properly escaping</font><font color="#E5E5E5"> dipper since and</font>

933
00:33:07,080 --> 00:33:09,509
it can actually<font color="#E5E5E5"> bite you in a couple of</font>

934
00:33:08,340 --> 00:33:11,668
weird ways so basically if you're using

935
00:33:09,509 --> 00:33:13,080
system on<font color="#E5E5E5"> it's a defender</font><font color="#CCCCCC"> then</font>

936
00:33:11,669 --> 00:33:14,639
definitely check how you're using those

937
00:33:13,080 --> 00:33:17,039
<font color="#E5E5E5">because any rules</font><font color="#CCCCCC"> written to look for</font>

938
00:33:14,639 --> 00:33:21,359
single percents will get potentially

939
00:33:17,039 --> 00:33:22,799
broken on this kind of stuff so<font color="#E5E5E5"> we can</font>

940
00:33:21,359 --> 00:33:24,658
<font color="#E5E5E5">also reorder the substring is that we</font>

941
00:33:22,799 --> 00:33:26,999
set as long as we reorder them back in

942
00:33:24,659 --> 00:33:28,679
the call then we can also set the

943
00:33:26,999 --> 00:33:29,250
reassembly<font color="#E5E5E5"> into an additional</font><font color="#CCCCCC"> variable</font>

944
00:33:28,679 --> 00:33:34,470
called fine

945
00:33:29,250 --> 00:33:35,460
and then call that<font color="#E5E5E5"> final variable so we</font>

946
00:33:34,470 --> 00:33:37,260
actually<font color="#E5E5E5"> want</font><font color="#CCCCCC"> to launch this final</font>

947
00:33:35,460 --> 00:33:39,450
command<font color="#CCCCCC"> there are five options</font><font color="#E5E5E5"> in in</font>

948
00:33:37,260 --> 00:33:41,879
<font color="#E5E5E5">Maga sophistication handle this one is</font>

949
00:33:39,450 --> 00:33:43,290
the default which if possible<font color="#E5E5E5"> and the</font>

950
00:33:41,880 --> 00:33:45,360
<font color="#E5E5E5">only times this isn't possible</font><font color="#CCCCCC"> is if you</font>

951
00:33:43,290 --> 00:33:47,310
have certain<font color="#E5E5E5"> like pipes or different</font>

952
00:33:45,360 --> 00:33:49,169
characters<font color="#E5E5E5"> that</font><font color="#CCCCCC"> need special escaping it</font>

953
00:33:47,310 --> 00:33:50,700
gets really<font color="#CCCCCC"> tricky with call but</font>

954
00:33:49,170 --> 00:33:52,380
<font color="#E5E5E5">basically if</font><font color="#CCCCCC"> we can do it then let's</font>

955
00:33:50,700 --> 00:33:54,540
<font color="#E5E5E5">just use call so we don't have to spawn</font>

956
00:33:52,380 --> 00:33:57,440
a child<font color="#E5E5E5"> process otherwise</font><font color="#CCCCCC"> we can spawn a</font>

957
00:33:54,540 --> 00:34:00,149
child process<font color="#CCCCCC"> and either</font><font color="#E5E5E5"> say command C</font>

958
00:33:57,440 --> 00:34:03,330
final<font color="#E5E5E5"> variable or we can echo the final</font>

959
00:34:00,150 --> 00:34:04,800
variable into a child process<font color="#E5E5E5"> options</font>

960
00:34:03,330 --> 00:34:06,510
<font color="#CCCCCC">four</font><font color="#E5E5E5"> and</font><font color="#CCCCCC"> five</font><font color="#E5E5E5"> are just the same except</font>

961
00:34:04,800 --> 00:34:08,790
for<font color="#E5E5E5"> using PowerShell instead of command</font>

962
00:34:06,510 --> 00:34:10,649
<font color="#E5E5E5">so basically an invoked ossification</font><font color="#CCCCCC"> if</font>

963
00:34:08,790 --> 00:34:12,449
your<font color="#CCCCCC"> input command</font><font color="#E5E5E5"> you actually want it</font>

964
00:34:10,649 --> 00:34:13,918
to<font color="#E5E5E5"> be run</font><font color="#CCCCCC"> by PowerShell in the end then</font>

965
00:34:12,449 --> 00:34:15,629
<font color="#CCCCCC">you</font><font color="#E5E5E5"> can specify</font><font color="#CCCCCC"> that and say hey the</font>

966
00:34:13,918 --> 00:34:17,759
final binary to run this is gonna be

967
00:34:15,629 --> 00:34:20,489
PowerShell and then I'll<font color="#E5E5E5"> handle in the</font>

968
00:34:17,760 --> 00:34:22,800
tool all<font color="#CCCCCC"> the command level da</font>

969
00:34:20,489 --> 00:34:27,928
sophistication<font color="#E5E5E5"> escaping on top of</font>

970
00:34:22,800 --> 00:34:28,980
PowerShell level escaping so all the

971
00:34:27,929 --> 00:34:31,230
building blocks<font color="#CCCCCC"> we talked about before</font>

972
00:34:28,980 --> 00:34:32,760
<font color="#CCCCCC">let's</font><font color="#E5E5E5"> say if your diff the the person</font>

973
00:34:31,230 --> 00:34:34,139
you're<font color="#E5E5E5"> going up against is not looking</font>

974
00:34:32,760 --> 00:34:35,669
for all the carrots<font color="#E5E5E5"> and crazy stuff we</font>

975
00:34:34,139 --> 00:34:37,200
can add all that back<font color="#CCCCCC"> into this command</font>

976
00:34:35,668 --> 00:34:39,049
and the tool<font color="#E5E5E5"> will handle the matically</font>

977
00:34:37,199 --> 00:34:41,668
so we can go<font color="#E5E5E5"> back and randomize the case</font>

978
00:34:39,050 --> 00:34:44,010
<font color="#E5E5E5">remove</font><font color="#CCCCCC"> whitespace</font><font color="#E5E5E5"> add whitespace</font>

979
00:34:41,668 --> 00:34:46,489
<font color="#CCCCCC">comments</font><font color="#E5E5E5"> and</font><font color="#CCCCCC"> semicolons crazy carrots</font>

980
00:34:44,010 --> 00:34:49,169
<font color="#E5E5E5">parentheses and this is our command now</font>

981
00:34:46,489 --> 00:34:50,790
and when we run<font color="#E5E5E5"> it we'll see it</font>

982
00:34:49,168 --> 00:34:53,310
translates back to a single<font color="#CCCCCC"> child</font>

983
00:34:50,790 --> 00:34:54,899
process of<font color="#E5E5E5"> nets</font><font color="#CCCCCC"> that you know and</font><font color="#E5E5E5"> again</font>

984
00:34:53,310 --> 00:34:56,210
<font color="#E5E5E5">we could add double</font><font color="#CCCCCC"> quotes in there</font><font color="#E5E5E5"> if</font>

985
00:34:54,899 --> 00:34:58,799
we<font color="#E5E5E5"> wanted to break up</font><font color="#CCCCCC"> those arguments</font>

986
00:34:56,210 --> 00:35:01,110
<font color="#E5E5E5">now one case that was really</font><font color="#CCCCCC"> really</font>

987
00:34:58,800 --> 00:35:02,160
<font color="#CCCCCC">frustrating for</font><font color="#E5E5E5"> me is this</font><font color="#CCCCCC"> is fine if we</font>

988
00:35:01,110 --> 00:35:03,540
have these double quotes that<font color="#CCCCCC"> are</font>

989
00:35:02,160 --> 00:35:06,930
<font color="#CCCCCC">adjacent</font><font color="#E5E5E5"> but what if we want</font><font color="#CCCCCC"> non</font>

990
00:35:03,540 --> 00:35:07,920
<font color="#CCCCCC">adjacent</font><font color="#E5E5E5"> double quotes there's a huge</font>

991
00:35:06,930 --> 00:35:11,669
<font color="#CCCCCC">difference here</font><font color="#E5E5E5"> when you're using</font>

992
00:35:07,920 --> 00:35:13,710
concatenation because if we try<font color="#CCCCCC"> to</font><font color="#E5E5E5"> just</font>

993
00:35:11,670 --> 00:35:15,330
change<font color="#E5E5E5"> the pair double quotes to non</font>

994
00:35:13,710 --> 00:35:17,040
adjacent double quotes<font color="#E5E5E5"> this</font><font color="#CCCCCC"> will</font>

995
00:35:15,330 --> 00:35:19,080
<font color="#CCCCCC">actually fail and it fails because</font>

996
00:35:17,040 --> 00:35:21,480
<font color="#E5E5E5">there's no way on the command prompt to</font>

997
00:35:19,080 --> 00:35:23,160
actually escape<font color="#E5E5E5"> double quotes the only</font>

998
00:35:21,480 --> 00:35:24,180
reason this works is for the<font color="#CCCCCC"> adjacent</font>

999
00:35:23,160 --> 00:35:25,950
double quotes it's almost like you took

1000
00:35:24,180 --> 00:35:27,810
<font color="#E5E5E5">your whole argument and broke it into</font>

1001
00:35:25,950 --> 00:35:29,970
<font color="#CCCCCC">two pieces and</font><font color="#E5E5E5"> just have them adjacent</font>

1002
00:35:27,810 --> 00:35:31,799
side by side<font color="#E5E5E5"> so when you start to move</font>

1003
00:35:29,970 --> 00:35:33,120
those double quotes<font color="#E5E5E5"> not side by side it</font>

1004
00:35:31,800 --> 00:35:36,360
gets<font color="#CCCCCC"> really weird and actually doesn't</font>

1005
00:35:33,120 --> 00:35:38,130
work<font color="#E5E5E5"> so it led</font><font color="#CCCCCC"> me to come up to this</font>

1006
00:35:36,360 --> 00:35:41,520
<font color="#E5E5E5">four-step solution to basically be</font><font color="#CCCCCC"> able</font>

1007
00:35:38,130 --> 00:35:43,170
to have the final process<font color="#E5E5E5"> run with a non</font>

1008
00:35:41,520 --> 00:35:44,850
<font color="#E5E5E5">adjacent</font><font color="#CCCCCC"> double</font>

1009
00:35:43,170 --> 00:35:47,250
and here's what I did anywhere<font color="#E5E5E5"> where I</font>

1010
00:35:44,850 --> 00:35:49,970
want a<font color="#CCCCCC"> non-adjacent double quote</font><font color="#E5E5E5"> I first</font>

1011
00:35:47,250 --> 00:35:51,930
set it to adjacent<font color="#CCCCCC"> pair double quotes</font>

1012
00:35:49,970 --> 00:35:53,910
the next thing I do is<font color="#CCCCCC"> I set an</font>

1013
00:35:51,930 --> 00:35:56,009
<font color="#CCCCCC">environment variable</font><font color="#E5E5E5"> that</font><font color="#CCCCCC"> contains quote</font>

1014
00:35:53,910 --> 00:35:59,370
quote in this case I'll<font color="#CCCCCC"> just call it</font>

1015
00:35:56,010 --> 00:36:02,280
quotes<font color="#E5E5E5"> then in our very final variable</font>

1016
00:35:59,370 --> 00:36:03,720
at the<font color="#E5E5E5"> end</font><font color="#CCCCCC"> I basically</font><font color="#E5E5E5"> use that string</font>

1017
00:36:02,280 --> 00:36:05,430
<font color="#CCCCCC">substitution and say I want</font><font color="#E5E5E5"> you to</font>

1018
00:36:03,720 --> 00:36:07,919
<font color="#E5E5E5">replace every instance</font><font color="#CCCCCC"> of quote quote</font>

1019
00:36:05,430 --> 00:36:10,859
<font color="#E5E5E5">with a single quote the</font><font color="#CCCCCC"> only problem</font><font color="#E5E5E5"> is</font>

1020
00:36:07,920 --> 00:36:12,180
I<font color="#E5E5E5"> can't</font><font color="#CCCCCC"> just put a single</font><font color="#E5E5E5"> double quote</font>

1021
00:36:10,860 --> 00:36:13,440
right there<font color="#E5E5E5"> because that will break the</font>

1022
00:36:12,180 --> 00:36:15,930
whole thing anyways we have to have

1023
00:36:13,440 --> 00:36:18,330
evenly<font color="#E5E5E5"> paired quotes</font><font color="#CCCCCC"> so what I do is I</font>

1024
00:36:15,930 --> 00:36:19,649
say give<font color="#CCCCCC"> me a single character a single</font>

1025
00:36:18,330 --> 00:36:21,779
substring character of this quotes

1026
00:36:19,650 --> 00:36:25,590
variable which in memory is going<font color="#CCCCCC"> to be</font>

1027
00:36:21,780 --> 00:36:27,630
<font color="#CCCCCC">one double quote the</font><font color="#E5E5E5"> only problem here</font>

1028
00:36:25,590 --> 00:36:29,760
<font color="#E5E5E5">is that the percent quotes percent is</font>

1029
00:36:27,630 --> 00:36:31,350
inside of the percent final percent and

1030
00:36:29,760 --> 00:36:32,700
so this percents<font color="#E5E5E5"> are battling</font><font color="#CCCCCC"> with each</font>

1031
00:36:31,350 --> 00:36:35,610
other<font color="#CCCCCC"> so that doesn't</font><font color="#E5E5E5"> work</font>

1032
00:36:32,700 --> 00:36:38,149
so it<font color="#E5E5E5"> led</font><font color="#CCCCCC"> me to try</font><font color="#E5E5E5"> to find a way</font><font color="#CCCCCC"> to</font>

1033
00:36:35,610 --> 00:36:40,500
expand<font color="#CCCCCC"> a</font><font color="#E5E5E5"> variable without using percent</font>

1034
00:36:38,150 --> 00:36:43,050
turns out if<font color="#E5E5E5"> you're running Vista or</font>

1035
00:36:40,500 --> 00:36:45,900
<font color="#CCCCCC">later you can use slash of Vista flag</font>

1036
00:36:43,050 --> 00:36:47,700
now if you do<font color="#E5E5E5"> this it will allow you to</font>

1037
00:36:45,900 --> 00:36:48,750
instead<font color="#CCCCCC"> of using percent for that</font>

1038
00:36:47,700 --> 00:36:50,819
variable<font color="#E5E5E5"> you can</font><font color="#CCCCCC"> actually use</font>

1039
00:36:48,750 --> 00:36:52,320
exclamation<font color="#CCCCCC"> points for</font><font color="#E5E5E5"> that variable so</font>

1040
00:36:50,820 --> 00:36:54,690
now<font color="#E5E5E5"> we have exclamation point variable</font>

1041
00:36:52,320 --> 00:36:56,250
<font color="#E5E5E5">one inside</font><font color="#CCCCCC"> of</font><font color="#E5E5E5"> percent variable two so</font>

1042
00:36:54,690 --> 00:36:57,630
the<font color="#CCCCCC"> exo the percents aren't battling</font>

1043
00:36:56,250 --> 00:36:59,190
each<font color="#E5E5E5"> other and this will</font><font color="#CCCCCC"> actually run</font>

1044
00:36:57,630 --> 00:37:03,350
the command just fine so our final

1045
00:36:59,190 --> 00:37:05,370
<font color="#E5E5E5">command has</font><font color="#CCCCCC"> non-adjacent double quotes</font>

1046
00:37:03,350 --> 00:37:07,890
<font color="#E5E5E5">now I have to admit</font><font color="#CCCCCC"> this is actually a</font>

1047
00:37:05,370 --> 00:37:10,080
bit of<font color="#E5E5E5"> a troll there's no Vista flag if</font>

1048
00:37:07,890 --> 00:37:13,049
you actually<font color="#E5E5E5"> look at commands help menu</font>

1049
00:37:10,080 --> 00:37:15,810
<font color="#E5E5E5">there's a</font><font color="#CCCCCC"> /v colon on flag which is</font>

1050
00:37:13,050 --> 00:37:18,180
<font color="#E5E5E5">enabling delayed VAR variable expansion</font>

1051
00:37:15,810 --> 00:37:20,549
but what I found is<font color="#CCCCCC"> that</font><font color="#E5E5E5"> in addition</font><font color="#CCCCCC"> to</font>

1052
00:37:18,180 --> 00:37:24,330
V<font color="#E5E5E5"> colon on you could use any substring</font>

1053
00:37:20,550 --> 00:37:26,970
of that and then<font color="#E5E5E5"> slash V almost anything</font>

1054
00:37:24,330 --> 00:37:30,120
under the Sun as long as it's not<font color="#E5E5E5"> V :</font>

1055
00:37:26,970 --> 00:37:31,859
off so in the tool you basically will

1056
00:37:30,120 --> 00:37:33,960
select the if you ever do anything<font color="#CCCCCC"> that</font>

1057
00:37:31,860 --> 00:37:35,370
<font color="#CCCCCC">requires this</font><font color="#E5E5E5"> V option it'll</font><font color="#CCCCCC"> basically</font>

1058
00:37:33,960 --> 00:37:36,830
<font color="#CCCCCC">just do some random</font><font color="#E5E5E5"> crazy string and</font>

1059
00:37:35,370 --> 00:37:39,330
<font color="#E5E5E5">that's all configurable in the tool but</font>

1060
00:37:36,830 --> 00:37:41,279
again a<font color="#E5E5E5"> lot of these flags are a lot</font>

1061
00:37:39,330 --> 00:37:43,980
more<font color="#CCCCCC"> flexible than I</font><font color="#E5E5E5"> originally gave</font>

1062
00:37:41,280 --> 00:37:45,240
them<font color="#CCCCCC"> credit for</font><font color="#E5E5E5"> in addition the</font>

1063
00:37:43,980 --> 00:37:47,370
environment variable names<font color="#E5E5E5"> don't have to</font>

1064
00:37:45,240 --> 00:37:49,229
make any sense<font color="#E5E5E5"> right</font><font color="#CCCCCC"> come one come two</font>

1065
00:37:47,370 --> 00:37:50,970
<font color="#CCCCCC">come three makes for a little bit easier</font>

1066
00:37:49,230 --> 00:37:52,470
<font color="#CCCCCC">example</font><font color="#E5E5E5"> but we could also just use</font><font color="#CCCCCC"> one</font>

1067
00:37:50,970 --> 00:37:54,390
<font color="#CCCCCC">hundred percent</font><font color="#E5E5E5"> of special characters</font><font color="#CCCCCC"> as</font>

1068
00:37:52,470 --> 00:37:56,040
the<font color="#E5E5E5"> environment variable names</font>

1069
00:37:54,390 --> 00:37:58,980
or<font color="#E5E5E5"> different amounts of</font><font color="#CCCCCC"> whitespace</font>

1070
00:37:56,040 --> 00:38:01,820
<font color="#E5E5E5">followed by any one character so it can</font>

1071
00:37:58,980 --> 00:38:04,800
actually<font color="#E5E5E5"> get pretty ugly</font><font color="#CCCCCC"> pretty fast so</font>

1072
00:38:01,820 --> 00:38:07,080
<font color="#CCCCCC">dude</font><font color="#E5E5E5"> how can you call yourself a</font>

1073
00:38:04,800 --> 00:38:08,760
defender and<font color="#CCCCCC"> do this</font><font color="#E5E5E5"> kind of horrible</font>

1074
00:38:07,080 --> 00:38:09,900
<font color="#E5E5E5">stuff like this sucks like what are you</font>

1075
00:38:08,760 --> 00:38:11,790
trying<font color="#CCCCCC"> to do well</font>

1076
00:38:09,900 --> 00:38:12,720
I<font color="#E5E5E5"> start with concatenation because</font>

1077
00:38:11,790 --> 00:38:14,550
<font color="#CCCCCC">they've</font><font color="#E5E5E5"> actually seen it used in</font><font color="#CCCCCC"> the</font>

1078
00:38:12,720 --> 00:38:16,200
<font color="#E5E5E5">wild but in really small</font><font color="#CCCCCC"> pieces</font>

1079
00:38:14,550 --> 00:38:18,030
typically attackers will use this just

1080
00:38:16,200 --> 00:38:20,339
<font color="#E5E5E5">to</font><font color="#CCCCCC"> concatenate the string PowerShell</font>

1081
00:38:18,030 --> 00:38:21,540
before launching<font color="#CCCCCC"> a PowerShell</font><font color="#E5E5E5"> command so</font>

1082
00:38:20,340 --> 00:38:22,740
this is from<font color="#E5E5E5"> a link file</font><font color="#CCCCCC"> or</font><font color="#E5E5E5"> they</font>

1083
00:38:21,540 --> 00:38:24,210
basically<font color="#CCCCCC"> chopped up PowerShell on the</font>

1084
00:38:22,740 --> 00:38:26,509
three<font color="#E5E5E5"> variables and then reassemble it</font>

1085
00:38:24,210 --> 00:38:28,620
in<font color="#E5E5E5"> a child</font><font color="#CCCCCC"> process</font><font color="#E5E5E5"> looks familiar right</font>

1086
00:38:26,510 --> 00:38:30,630
<font color="#CCCCCC">in this one they actually have a</font><font color="#E5E5E5"> lot</font><font color="#CCCCCC"> of</font>

1087
00:38:28,620 --> 00:38:31,980
garbage character or garbage values

1088
00:38:30,630 --> 00:38:33,780
being set<font color="#E5E5E5"> and variables they'd never</font>

1089
00:38:31,980 --> 00:38:36,450
<font color="#CCCCCC">even use this just</font><font color="#E5E5E5"> to kind of you know</font>

1090
00:38:33,780 --> 00:38:37,710
<font color="#CCCCCC">clutter up the command</font><font color="#E5E5E5"> and then</font><font color="#CCCCCC"> this one</font>

1091
00:38:36,450 --> 00:38:40,200
is<font color="#E5E5E5"> the same</font><font color="#CCCCCC"> thing there's also some</font>

1092
00:38:37,710 --> 00:38:42,030
additional<font color="#E5E5E5"> carrots so concatenation has</font>

1093
00:38:40,200 --> 00:38:43,890
been used in the wild<font color="#E5E5E5"> but attackers have</font>

1094
00:38:42,030 --> 00:38:45,800
typically only<font color="#E5E5E5"> used</font><font color="#CCCCCC"> for really limited</font>

1095
00:38:43,890 --> 00:38:48,299
circumstances like the string<font color="#CCCCCC"> powershell</font>

1096
00:38:45,800 --> 00:38:49,650
<font color="#CCCCCC">i've not seen it really effectively be</font>

1097
00:38:48,300 --> 00:38:52,040
used<font color="#CCCCCC"> on the entire command like we just</font>

1098
00:38:49,650 --> 00:38:55,200
walked<font color="#CCCCCC"> through in the previous example</font>

1099
00:38:52,040 --> 00:38:56,940
<font color="#E5E5E5">so with that being said the next three</font>

1100
00:38:55,200 --> 00:38:58,859
<font color="#E5E5E5">the kind of the last three payload</font>

1101
00:38:56,940 --> 00:39:01,320
techniques are ones<font color="#E5E5E5"> that we've never</font>

1102
00:38:58,860 --> 00:39:03,750
<font color="#E5E5E5">seen in the</font><font color="#CCCCCC"> wild this is all kind of</font><font color="#E5E5E5"> a</font>

1103
00:39:01,320 --> 00:39:06,810
<font color="#E5E5E5">product from this research</font><font color="#CCCCCC"> and when I</font>

1104
00:39:03,750 --> 00:39:09,420
say I haven't<font color="#E5E5E5"> seen it in</font><font color="#CCCCCC"> the wild what</font>

1105
00:39:06,810 --> 00:39:11,400
that means is I've<font color="#E5E5E5"> looked for it like a</font>

1106
00:39:09,420 --> 00:39:13,770
lot<font color="#E5E5E5"> in like public and private file</font>

1107
00:39:11,400 --> 00:39:15,210
<font color="#E5E5E5">repository sandbox execution reports and</font>

1108
00:39:13,770 --> 00:39:16,470
running as in point detection<font color="#E5E5E5"> for over</font>

1109
00:39:15,210 --> 00:39:18,900
<font color="#CCCCCC">ten million</font><font color="#E5E5E5"> in points all around</font><font color="#CCCCCC"> the</font>

1110
00:39:16,470 --> 00:39:20,459
world<font color="#E5E5E5"> I've not seen prior to</font><font color="#CCCCCC"> this</font>

1111
00:39:18,900 --> 00:39:21,960
research being released<font color="#E5E5E5"> I've not seen a</font>

1112
00:39:20,460 --> 00:39:26,580
<font color="#E5E5E5">single instance of anything like what</font>

1113
00:39:21,960 --> 00:39:30,660
we're about<font color="#CCCCCC"> to talk about so let's let's</font>

1114
00:39:26,580 --> 00:39:33,029
trudge<font color="#E5E5E5"> on forward the for loop the for</font>

1115
00:39:30,660 --> 00:39:34,680
<font color="#E5E5E5">loop is freaking awesome</font><font color="#CCCCCC"> it gives us</font>

1116
00:39:33,030 --> 00:39:36,840
some<font color="#CCCCCC"> incredible capabilities we already</font>

1117
00:39:34,680 --> 00:39:38,399
saw a little<font color="#E5E5E5"> snippet of this</font><font color="#CCCCCC"> in how</font><font color="#E5E5E5"> we</font>

1118
00:39:36,840 --> 00:39:41,460
<font color="#E5E5E5">were able</font><font color="#CCCCCC"> to produce binary names on the</font>

1119
00:39:38,400 --> 00:39:42,630
for<font color="#CCCCCC"> loop but what we can do is again if</font>

1120
00:39:41,460 --> 00:39:44,520
you look<font color="#E5E5E5"> at</font><font color="#CCCCCC"> the help menu when we</font><font color="#E5E5E5"> talk</font>

1121
00:39:42,630 --> 00:39:47,670
about<font color="#E5E5E5"> that variable expansion it says</font>

1122
00:39:44,520 --> 00:39:49,259
the<font color="#CCCCCC"> Farson tax expands etc which</font><font color="#E5E5E5"> is</font>

1123
00:39:47,670 --> 00:39:51,240
quite a<font color="#E5E5E5"> different thing</font><font color="#CCCCCC"> when inside of a</font>

1124
00:39:49,260 --> 00:39:52,860
for<font color="#CCCCCC"> loop that is a huge understatement</font>

1125
00:39:51,240 --> 00:39:54,660
because<font color="#E5E5E5"> it is an extremely different</font>

1126
00:39:52,860 --> 00:39:56,580
<font color="#E5E5E5">thing inside</font><font color="#CCCCCC"> of a for loop it's amazing</font>

1127
00:39:54,660 --> 00:39:59,069
what you can do so<font color="#CCCCCC"> let's take our same</font>

1128
00:39:56,580 --> 00:40:00,840
netstat command<font color="#E5E5E5"> and we're gonna make</font>

1129
00:39:59,070 --> 00:40:02,730
<font color="#CCCCCC">sure we</font><font color="#E5E5E5"> add that</font><font color="#CCCCCC"> /v</font><font color="#E5E5E5"> because we want</font>

1130
00:40:00,840 --> 00:40:05,310
variable expansion in this<font color="#E5E5E5"> in this</font>

1131
00:40:02,730 --> 00:40:07,740
<font color="#E5E5E5">example</font><font color="#CCCCCC"> um another fun</font><font color="#E5E5E5"> fact</font>

1132
00:40:05,310 --> 00:40:08,049
so /c a lot of defenders will say<font color="#CCCCCC"> okay I</font>

1133
00:40:07,740 --> 00:40:09,698
know

1134
00:40:08,049 --> 00:40:11,079
hackers can<font color="#E5E5E5"> rename command</font><font color="#CCCCCC"> XE</font><font color="#E5E5E5"> to</font>

1135
00:40:09,699 --> 00:40:13,179
something else<font color="#E5E5E5"> so I'm just gonna anchor</font>

1136
00:40:11,079 --> 00:40:15,699
<font color="#E5E5E5">my command on if the argument</font><font color="#CCCCCC"> can name</font>

1137
00:40:13,179 --> 00:40:17,170
<font color="#E5E5E5">slash</font><font color="#CCCCCC"> C</font><font color="#E5E5E5"> then it's probably command</font><font color="#CCCCCC"> and</font>

1138
00:40:15,699 --> 00:40:20,229
I'll look for the<font color="#E5E5E5"> rest of the things</font>

1139
00:40:17,170 --> 00:40:22,509
there well if you scroll<font color="#E5E5E5"> down on the</font>

1140
00:40:20,229 --> 00:40:25,239
help<font color="#CCCCCC"> menu</font><font color="#E5E5E5"> you'll find</font><font color="#CCCCCC"> this thing</font><font color="#E5E5E5"> that</font>

1141
00:40:22,509 --> 00:40:29,140
also for compatibility reasons<font color="#E5E5E5"> /r is the</font>

1142
00:40:25,239 --> 00:40:31,509
same as<font color="#CCCCCC"> slash C so any detection</font><font color="#E5E5E5"> that</font>

1143
00:40:29,140 --> 00:40:33,699
relies on slash<font color="#CCCCCC"> C and the attacker could</font>

1144
00:40:31,509 --> 00:40:34,900
totally just<font color="#E5E5E5"> use</font><font color="#CCCCCC"> slash R and I've</font><font color="#E5E5E5"> never</font>

1145
00:40:33,699 --> 00:40:36,579
seen this<font color="#E5E5E5"> season the</font><font color="#CCCCCC"> while but like</font>

1146
00:40:34,900 --> 00:40:39,009
that's<font color="#E5E5E5"> pretty cool right</font><font color="#CCCCCC"> like just slash</font>

1147
00:40:36,579 --> 00:40:40,479
<font color="#CCCCCC">R okay so I'm just gonna</font><font color="#E5E5E5"> replace slash</font>

1148
00:40:39,009 --> 00:40:42,579
see with slash<font color="#E5E5E5"> are now and that works</font>

1149
00:40:40,479 --> 00:40:43,868
perfectly fine and so as a defender when

1150
00:40:42,579 --> 00:40:47,829
<font color="#E5E5E5">I'm</font><font color="#CCCCCC"> running</font><font color="#E5E5E5"> detections I want to look</font>

1151
00:40:43,869 --> 00:40:49,479
for<font color="#E5E5E5"> slash v /c /</font><font color="#CCCCCC"> R so CR V is the way</font>

1152
00:40:47,829 --> 00:40:51,009
that I remember<font color="#CCCCCC"> those two anchors CN are</font>

1153
00:40:49,479 --> 00:40:54,549
interchangeable and V for variable

1154
00:40:51,009 --> 00:40:56,769
expansion another fun<font color="#E5E5E5"> fact the</font>

1155
00:40:54,549 --> 00:41:00,519
<font color="#CCCCCC">whitespace between</font><font color="#E5E5E5"> each of these</font>

1156
00:40:56,769 --> 00:41:02,169
arguments before<font color="#CCCCCC"> the / - your</font><font color="#E5E5E5"> / v or / c</font>

1157
00:41:00,519 --> 00:41:04,178
or<font color="#E5E5E5"> / r is when I'm calling a troll</font>

1158
00:41:02,170 --> 00:41:06,249
opportunity<font color="#E5E5E5"> which means you can put</font>

1159
00:41:04,179 --> 00:41:07,900
anything you<font color="#CCCCCC"> want there like literally</font>

1160
00:41:06,249 --> 00:41:09,939
<font color="#CCCCCC">almost anything you</font><font color="#E5E5E5"> want</font><font color="#CCCCCC"> and it's not</font>

1161
00:41:07,900 --> 00:41:12,429
executed it's just like<font color="#CCCCCC"> characters</font>

1162
00:41:09,939 --> 00:41:15,189
sitting there out<font color="#CCCCCC"> in</font><font color="#E5E5E5"> the ethers so this</font>

1163
00:41:12,429 --> 00:41:17,559
command perfectly runs<font color="#E5E5E5"> netstat</font><font color="#CCCCCC"> another</font>

1164
00:41:15,189 --> 00:41:19,538
thing you could do<font color="#E5E5E5"> as</font><font color="#CCCCCC"> an attacker</font><font color="#E5E5E5"> is</font><font color="#CCCCCC"> if</font>

1165
00:41:17,559 --> 00:41:22,660
you'll do this what do<font color="#E5E5E5"> you think runs</font>

1166
00:41:19,539 --> 00:41:26,259
when you run this command would you

1167
00:41:22,660 --> 00:41:28,149
expect<font color="#E5E5E5"> his output the path variable well</font>

1168
00:41:26,259 --> 00:41:28,839
actually no because<font color="#E5E5E5"> backslash c doesn't</font>

1169
00:41:28,150 --> 00:41:31,809
mean anything

1170
00:41:28,839 --> 00:41:34,449
it's /c right which there happens to be

1171
00:41:31,809 --> 00:41:36,130
one<font color="#CCCCCC"> right here</font><font color="#E5E5E5"> and it's a slash R</font>

1172
00:41:34,449 --> 00:41:38,049
<font color="#E5E5E5">instead of a slash seat so there's tons</font>

1173
00:41:36,130 --> 00:41:40,569
of white space here<font color="#CCCCCC"> and</font><font color="#E5E5E5"> as long as we're</font>

1174
00:41:38,049 --> 00:41:42,579
staying underneath<font color="#E5E5E5"> the 8191 character</font>

1175
00:41:40,569 --> 00:41:44,079
limit of command<font color="#CCCCCC"> that XE we can do</font>

1176
00:41:42,579 --> 00:41:45,729
something<font color="#CCCCCC"> like</font><font color="#E5E5E5"> this so this is the</font>

1177
00:41:44,079 --> 00:41:47,319
<font color="#E5E5E5">actual command that gets run so we paste</font>

1178
00:41:45,729 --> 00:41:49,359
that into command<font color="#E5E5E5"> and the only thing</font>

1179
00:41:47,319 --> 00:41:50,469
that<font color="#E5E5E5"> comes out as</font><font color="#CCCCCC"> netstat</font><font color="#E5E5E5"> so if you're a</font>

1180
00:41:49,359 --> 00:41:52,089
defender<font color="#CCCCCC"> and you're scrolling through</font>

1181
00:41:50,469 --> 00:41:54,130
looking at logs and<font color="#E5E5E5"> you see command back</font>

1182
00:41:52,089 --> 00:41:55,569
slash the echo<font color="#E5E5E5"> you may keep going but</font>

1183
00:41:54,130 --> 00:41:57,609
not recognizing that<font color="#CCCCCC"> scrollbar the</font>

1184
00:41:55,569 --> 00:42:00,489
horizontal was like that big<font color="#E5E5E5"> there's</font>

1185
00:41:57,609 --> 00:42:02,519
this command<font color="#E5E5E5"> way out there so text</font>

1186
00:42:00,489 --> 00:42:05,259
wrapping for<font color="#E5E5E5"> the win</font>

1187
00:42:02,519 --> 00:42:07,209
so anyways<font color="#E5E5E5"> let's go back so we</font><font color="#CCCCCC"> have a</font>

1188
00:42:05,259 --> 00:42:08,499
netstat command for for coding what

1189
00:42:07,209 --> 00:42:09,910
we're going to<font color="#E5E5E5"> do is</font><font color="#CCCCCC"> we're going</font><font color="#E5E5E5"> to</font>

1190
00:42:08,499 --> 00:42:11,410
<font color="#E5E5E5">basically the only</font><font color="#CCCCCC"> thing we need</font><font color="#E5E5E5"> is the</font>

1191
00:42:09,910 --> 00:42:15,489
unique characters to reassemble<font color="#E5E5E5"> the</font>

1192
00:42:11,410 --> 00:42:17,949
<font color="#E5E5E5">final command so for net stat a know</font><font color="#CCCCCC"> any</font>

1193
00:42:15,489 --> 00:42:19,269
<font color="#CCCCCC">TS space</font><font color="#E5E5E5"> /ao or the only unique</font>

1194
00:42:17,949 --> 00:42:21,579
characters that<font color="#CCCCCC"> we need they can come in</font>

1195
00:42:19,269 --> 00:42:21,759
any order but<font color="#E5E5E5"> we're</font><font color="#CCCCCC"> gonna set</font><font color="#E5E5E5"> that into</font>

1196
00:42:21,579 --> 00:42:24,370
the

1197
00:42:21,760 --> 00:42:25,900
variable called unique<font color="#E5E5E5"> what we're then</font>

1198
00:42:24,370 --> 00:42:28,000
going to do is we're<font color="#E5E5E5"> going to set a for</font>

1199
00:42:25,900 --> 00:42:30,490
<font color="#E5E5E5">loop that contains the index values to</font>

1200
00:42:28,000 --> 00:42:33,930
reassemble<font color="#E5E5E5"> this command so net stat is</font>

1201
00:42:30,490 --> 00:42:37,540
going to start with<font color="#CCCCCC"> 0 from n1 for the EE</font>

1202
00:42:33,930 --> 00:42:39,250
etc so net stat<font color="#E5E5E5"> a no are those index</font>

1203
00:42:37,540 --> 00:42:40,570
values and we're<font color="#E5E5E5"> gonna end with one</font><font color="#CCCCCC"> more</font>

1204
00:42:39,250 --> 00:42:42,070
<font color="#E5E5E5">value that's just kind of our book in</font>

1205
00:42:40,570 --> 00:42:44,700
right I'm just saying hey when you hit

1206
00:42:42,070 --> 00:42:48,240
<font color="#E5E5E5">this value then we're done reassembling</font>

1207
00:42:44,700 --> 00:42:51,279
so then for each<font color="#CCCCCC"> of these</font><font color="#E5E5E5"> we're going to</font>

1208
00:42:48,240 --> 00:42:54,279
have<font color="#E5E5E5"> this final</font><font color="#CCCCCC"> variable and we're going</font>

1209
00:42:51,280 --> 00:42:56,110
<font color="#CCCCCC">to set in</font><font color="#E5E5E5"> each iteration the substring</font>

1210
00:42:54,280 --> 00:42:58,000
of<font color="#CCCCCC"> the unique value so basically we're</font>

1211
00:42:56,110 --> 00:42:59,980
gonna append<font color="#E5E5E5"> on to this final variable</font>

1212
00:42:58,000 --> 00:43:02,950
<font color="#E5E5E5">character by character</font><font color="#CCCCCC"> each iteration</font>

1213
00:42:59,980 --> 00:43:05,230
<font color="#E5E5E5">each piece each letter of</font><font color="#CCCCCC"> the</font><font color="#E5E5E5"> original</font>

1214
00:43:02,950 --> 00:43:07,810
payload and for each iteration we're

1215
00:43:05,230 --> 00:43:10,690
gonna check<font color="#CCCCCC"> and say hey</font><font color="#E5E5E5"> are you this</font>

1216
00:43:07,810 --> 00:43:12,490
book in value<font color="#E5E5E5"> if you are then finish</font>

1217
00:43:10,690 --> 00:43:14,890
your<font color="#CCCCCC"> loop and come out and</font><font color="#E5E5E5"> then actually</font>

1218
00:43:12,490 --> 00:43:17,560
<font color="#CCCCCC">just call the final</font><font color="#E5E5E5"> variable and execute</font>

1219
00:43:14,890 --> 00:43:18,910
it this equals equals is actually a

1220
00:43:17,560 --> 00:43:20,500
literal<font color="#E5E5E5"> string comparison so it's</font>

1221
00:43:18,910 --> 00:43:23,920
<font color="#E5E5E5">looking for the actual string 1 3 3 7</font>

1222
00:43:20,500 --> 00:43:25,510
<font color="#E5E5E5">but you can also use e equal greater</font>

1223
00:43:23,920 --> 00:43:27,310
<font color="#E5E5E5">than equal greater than etc for the</font>

1224
00:43:25,510 --> 00:43:28,540
compare<font color="#E5E5E5"> op operators and this is all</font>

1225
00:43:27,310 --> 00:43:31,120
randomly selected in the tool when you

1226
00:43:28,540 --> 00:43:33,250
run it so when we run<font color="#E5E5E5"> this</font><font color="#CCCCCC"> we'll</font>

1227
00:43:31,120 --> 00:43:34,720
actually see<font color="#CCCCCC"> it's standard output</font><font color="#E5E5E5"> you'll</font>

1228
00:43:33,250 --> 00:43:36,430
see each iteration<font color="#CCCCCC"> none of it actually</font>

1229
00:43:34,720 --> 00:43:37,709
<font color="#E5E5E5">hits the command-line</font><font color="#CCCCCC"> and</font><font color="#E5E5E5"> at the end</font>

1230
00:43:36,430 --> 00:43:40,089
<font color="#CCCCCC">I'll actually run the final payload</font>

1231
00:43:37,710 --> 00:43:42,940
<font color="#E5E5E5">netstat</font><font color="#CCCCCC"> and no does</font><font color="#E5E5E5"> not show up</font><font color="#CCCCCC"> in</font>

1232
00:43:40,090 --> 00:43:44,430
command X<font color="#E5E5E5"> these arguments anywhere</font><font color="#CCCCCC"> it</font>

1233
00:43:42,940 --> 00:43:48,640
<font color="#E5E5E5">obviously will run as a child process</font>

1234
00:43:44,430 --> 00:43:50,890
<font color="#E5E5E5">but yeah it's</font><font color="#CCCCCC"> pretty</font><font color="#E5E5E5"> crazy the things</font>

1235
00:43:48,640 --> 00:43:52,240
you can do there<font color="#CCCCCC"> and what we can do to</font>

1236
00:43:50,890 --> 00:43:53,950
make<font color="#CCCCCC"> it</font><font color="#E5E5E5"> even more office</font><font color="#CCCCCC"> catered</font><font color="#E5E5E5"> is add</font>

1237
00:43:52,240 --> 00:43:55,689
a<font color="#E5E5E5"> lot of extra garbage characters in</font>

1238
00:43:53,950 --> 00:43:58,240
there<font color="#CCCCCC"> I'm</font><font color="#E5E5E5"> and then update our index</font>

1239
00:43:55,690 --> 00:44:01,630
values and it will still reassemble it

1240
00:43:58,240 --> 00:44:03,220
no issue and as with<font color="#E5E5E5"> a previous example</font>

1241
00:44:01,630 --> 00:44:05,470
we can wrap all the underlying<font color="#E5E5E5"> character</font>

1242
00:44:03,220 --> 00:44:07,750
insertion techniques in so we can add

1243
00:44:05,470 --> 00:44:09,669
randomized casing removing white space

1244
00:44:07,750 --> 00:44:12,160
adding<font color="#E5E5E5"> white space commas and semicolons</font>

1245
00:44:09,670 --> 00:44:14,860
carrots<font color="#E5E5E5"> parentheses and explicit signing</font>

1246
00:44:12,160 --> 00:44:18,580
positive<font color="#E5E5E5"> or negative for all the index</font>

1247
00:44:14,860 --> 00:44:20,950
values one more opportunity that I

1248
00:44:18,580 --> 00:44:22,870
<font color="#E5E5E5">built-in is basically when you set your</font>

1249
00:44:20,950 --> 00:44:24,339
<font color="#CCCCCC">an unique value you can basically say I</font>

1250
00:44:22,870 --> 00:44:26,290
want<font color="#E5E5E5"> you to start with this custom</font>

1251
00:44:24,340 --> 00:44:27,820
message and then any more characters

1252
00:44:26,290 --> 00:44:30,880
that are needed in<font color="#E5E5E5"> my command</font><font color="#CCCCCC"> I will</font>

1253
00:44:27,820 --> 00:44:32,170
just<font color="#E5E5E5"> type</font><font color="#CCCCCC"> in those to the end</font><font color="#E5E5E5"> so there's</font>

1254
00:44:30,880 --> 00:44:33,790
no reason the attackers can't have fun

1255
00:44:32,170 --> 00:44:35,380
like they're already<font color="#E5E5E5"> making us work a</font>

1256
00:44:33,790 --> 00:44:36,549
lot to decode their stuff

1257
00:44:35,380 --> 00:44:38,799
<font color="#CCCCCC">and</font><font color="#E5E5E5"> find in the first place but they</font>

1258
00:44:36,549 --> 00:44:39,970
could<font color="#E5E5E5"> still put you know heartwarming</font>

1259
00:44:38,799 --> 00:44:41,288
messages and their payloads if they

1260
00:44:39,970 --> 00:44:45,879
wanted<font color="#E5E5E5"> to so I was trying</font><font color="#CCCCCC"> to facilitate</font>

1261
00:44:41,289 --> 00:44:47,740
<font color="#CCCCCC">that so we talked</font><font color="#E5E5E5"> about concatenation we</font>

1262
00:44:45,880 --> 00:44:49,960
talked about<font color="#E5E5E5"> for loop encoding or for</font>

1263
00:44:47,740 --> 00:44:51,758
coding<font color="#E5E5E5"> the third one is reversal which</font>

1264
00:44:49,960 --> 00:44:53,980
is really similar<font color="#E5E5E5"> it's using the for</font>

1265
00:44:51,759 --> 00:44:55,960
loop<font color="#E5E5E5"> or introducing the /l so instead of</font>

1266
00:44:53,980 --> 00:44:57,730
having<font color="#E5E5E5"> to spell out all the indexes</font><font color="#CCCCCC"> we</font>

1267
00:44:55,960 --> 00:44:58,390
can just say start<font color="#E5E5E5"> from this</font><font color="#CCCCCC"> value work</font>

1268
00:44:57,730 --> 00:45:00,490
backwards

1269
00:44:58,390 --> 00:45:01,839
you know decrement by negative one until

1270
00:45:00,490 --> 00:45:03,490
<font color="#E5E5E5">you get to zero and then you're done</font>

1271
00:45:01,839 --> 00:45:07,740
so we basically put our command in

1272
00:45:03,490 --> 00:45:09,819
reverse<font color="#E5E5E5"> and then it will reassemble</font><font color="#CCCCCC"> it</font>

1273
00:45:07,740 --> 00:45:10,808
<font color="#CCCCCC">and we can also</font><font color="#E5E5E5"> add</font><font color="#CCCCCC"> in garbage</font>

1274
00:45:09,819 --> 00:45:16,420
characters in there and update our

1275
00:45:10,809 --> 00:45:17,829
<font color="#E5E5E5">values so reversal if you'll</font><font color="#CCCCCC"> notice at</font>

1276
00:45:16,420 --> 00:45:19,269
the end<font color="#CCCCCC"> of the for coding anytime we</font>

1277
00:45:17,829 --> 00:45:20,980
have<font color="#E5E5E5"> a for loop at the</font><font color="#CCCCCC"> end</font><font color="#E5E5E5"> we don't</font>

1278
00:45:19,269 --> 00:45:22,258
<font color="#E5E5E5">actually just call final we call final</font>

1279
00:45:20,980 --> 00:45:24,609
but some weird<font color="#E5E5E5"> substring why is that</font>

1280
00:45:22,259 --> 00:45:26,410
well the first<font color="#CCCCCC"> time in</font><font color="#E5E5E5"> that for loop</font>

1281
00:45:24,609 --> 00:45:27,730
that<font color="#CCCCCC"> the final value is set the</font><font color="#E5E5E5"> final</font>

1282
00:45:26,410 --> 00:45:30,848
value<font color="#E5E5E5"> doesn't have anything so it</font>

1283
00:45:27,730 --> 00:45:33,190
literally sets the string<font color="#E5E5E5"> bang a final</font>

1284
00:45:30,849 --> 00:45:34,799
bang<font color="#E5E5E5"> so that's seven characters long so</font>

1285
00:45:33,190 --> 00:45:37,960
we<font color="#E5E5E5"> basically need a way to remove that</font>

1286
00:45:34,799 --> 00:45:39,430
<font color="#CCCCCC">bang final bang from the</font><font color="#E5E5E5"> final value so</font>

1287
00:45:37,960 --> 00:45:41,470
what we<font color="#E5E5E5"> can do is we can do a negative</font>

1288
00:45:39,430 --> 00:45:43,240
index<font color="#E5E5E5"> and just go back</font><font color="#CCCCCC"> the length of the</font>

1289
00:45:41,470 --> 00:45:45,640
final command<font color="#E5E5E5"> and then start that way</font>

1290
00:45:43,240 --> 00:45:47,410
forward we can also do a positive<font color="#CCCCCC"> and</font>

1291
00:45:45,640 --> 00:45:50,589
say start from zero and<font color="#CCCCCC"> go</font><font color="#E5E5E5"> forward seven</font>

1292
00:45:47,410 --> 00:45:53,950
to jump over<font color="#CCCCCC"> that bang final bang or we</font>

1293
00:45:50,589 --> 00:45:55,180
can<font color="#CCCCCC"> use this</font><font color="#E5E5E5"> substitution syntax and if</font>

1294
00:45:53,950 --> 00:45:57,069
<font color="#CCCCCC">you notice from the substitution syntax</font>

1295
00:45:55,180 --> 00:45:59,410
starts with an asterisk<font color="#CCCCCC"> that</font><font color="#E5E5E5"> means if</font>

1296
00:45:57,069 --> 00:46:01,299
you<font color="#CCCCCC"> find this string in the argument</font>

1297
00:45:59,410 --> 00:46:03,098
going<font color="#E5E5E5"> left to right</font><font color="#CCCCCC"> then replace that</font>

1298
00:46:01,299 --> 00:46:04,930
string and<font color="#E5E5E5"> everything leading up to it</font>

1299
00:46:03,099 --> 00:46:06,339
with whatever is on the<font color="#CCCCCC"> right side</font><font color="#E5E5E5"> of</font>

1300
00:46:04,930 --> 00:46:08,919
the<font color="#CCCCCC"> ecole in this case there's nothing</font>

1301
00:46:06,339 --> 00:46:10,359
<font color="#E5E5E5">so it says fine final bang and anything</font>

1302
00:46:08,920 --> 00:46:11,980
leading up to it and then completely

1303
00:46:10,359 --> 00:46:14,380
remove out of the command<font color="#E5E5E5"> and start with</font>

1304
00:46:11,980 --> 00:46:15,849
what's left<font color="#E5E5E5"> and all these options are</font>

1305
00:46:14,380 --> 00:46:18,670
randomly<font color="#CCCCCC"> selected in every payload that</font>

1306
00:46:15,849 --> 00:46:21,430
<font color="#CCCCCC">the tool generates</font><font color="#E5E5E5"> the very last one</font><font color="#CCCCCC"> is</font>

1307
00:46:18,670 --> 00:46:22,750
fin coding and so basically<font color="#E5E5E5"> what we're</font>

1308
00:46:21,430 --> 00:46:24,190
<font color="#E5E5E5">gonna do is select characters and this</font>

1309
00:46:22,750 --> 00:46:26,109
<font color="#E5E5E5">is similar</font><font color="#CCCCCC"> to the out fin coda to</font>

1310
00:46:24,190 --> 00:46:28,839
<font color="#E5E5E5">command POC that</font><font color="#CCCCCC"> are released a year</font><font color="#E5E5E5"> ago</font>

1311
00:46:26,109 --> 00:46:30,549
<font color="#E5E5E5">or last year but basically you can</font><font color="#CCCCCC"> take</font>

1312
00:46:28,839 --> 00:46:32,680
characters so like let's say we want to

1313
00:46:30,549 --> 00:46:34,779
take<font color="#CCCCCC"> every character</font><font color="#E5E5E5"> T and that stat and</font>

1314
00:46:32,680 --> 00:46:36,910
replace it with<font color="#CCCCCC"> a capital Z</font><font color="#E5E5E5"> so we</font>

1315
00:46:34,779 --> 00:46:38,559
replace that<font color="#CCCCCC"> and then we have to add an</font>

1316
00:46:36,910 --> 00:46:41,049
additional command to say substitute in

1317
00:46:38,559 --> 00:46:44,049
memory<font color="#E5E5E5"> capital Z's with lowercase T's</font>

1318
00:46:41,049 --> 00:46:45,460
and then set<font color="#CCCCCC"> that and sub one and then</font>

1319
00:46:44,049 --> 00:46:47,589
<font color="#E5E5E5">we'll just execute this variable called</font>

1320
00:46:45,460 --> 00:46:49,040
sub one<font color="#E5E5E5"> we'll do it again and say</font>

1321
00:46:47,589 --> 00:46:51,590
<font color="#CCCCCC">alright</font><font color="#E5E5E5"> replace</font>

1322
00:46:49,040 --> 00:46:55,190
replace all lowercase<font color="#E5E5E5"> a</font><font color="#CCCCCC"> z' with</font><font color="#E5E5E5"> sevens</font>

1323
00:46:51,590 --> 00:46:56,960
<font color="#CCCCCC">doing other substitutions replace ends</font>

1324
00:46:55,190 --> 00:46:58,160
with question marks<font color="#CCCCCC"> etc and so you can</font>

1325
00:46:56,960 --> 00:46:59,270
go<font color="#E5E5E5"> through as many layers as</font><font color="#CCCCCC"> you want</font>

1326
00:46:58,160 --> 00:47:01,250
and<font color="#E5E5E5"> just as long</font><font color="#CCCCCC"> as you're</font><font color="#E5E5E5"> pulling out</font>

1327
00:46:59,270 --> 00:47:03,290
character by character<font color="#CCCCCC"> piecing it back</font>

1328
00:47:01,250 --> 00:47:05,390
together in<font color="#E5E5E5"> memory when I wrote the</font><font color="#CCCCCC"> the</font>

1329
00:47:03,290 --> 00:47:07,100
<font color="#CCCCCC">PSC I didn't know about the variable</font>

1330
00:47:05,390 --> 00:47:08,569
expansion<font color="#E5E5E5"> so for each</font><font color="#CCCCCC"> one of</font><font color="#E5E5E5"> these</font>

1331
00:47:07,100 --> 00:47:10,190
substitutions<font color="#CCCCCC"> I just want a new child</font>

1332
00:47:08,570 --> 00:47:11,720
process so literally the process tree

1333
00:47:10,190 --> 00:47:13,400
was like command command command

1334
00:47:11,720 --> 00:47:15,500
commands like it was so noisy it was so

1335
00:47:13,400 --> 00:47:16,430
ugly<font color="#E5E5E5"> because I had to do</font><font color="#CCCCCC"> additional</font>

1336
00:47:15,500 --> 00:47:20,480
child<font color="#E5E5E5"> processes</font>

1337
00:47:16,430 --> 00:47:21,799
<font color="#E5E5E5">I</font><font color="#CCCCCC"> had to do layers</font><font color="#E5E5E5"> of escaping so this</font>

1338
00:47:20,480 --> 00:47:23,690
is one layer of<font color="#CCCCCC"> escaping for</font><font color="#E5E5E5"> the</font>

1339
00:47:21,800 --> 00:47:25,760
<font color="#E5E5E5">ampersand to chain all the commands this</font>

1340
00:47:23,690 --> 00:47:27,680
<font color="#E5E5E5">is two layers</font><font color="#CCCCCC"> this is three layers so as</font>

1341
00:47:25,760 --> 00:47:29,180
<font color="#CCCCCC">you can see there were like a crazy</font>

1342
00:47:27,680 --> 00:47:31,730
amount<font color="#E5E5E5"> of carrots in those commands so</font>

1343
00:47:29,180 --> 00:47:33,259
really ugly<font color="#E5E5E5"> thin coating as we did in</font>

1344
00:47:31,730 --> 00:47:35,210
the<font color="#E5E5E5"> top here that's all within a single</font>

1345
00:47:33,260 --> 00:47:39,860
process<font color="#E5E5E5"> and all in memory so it's a lot</font>

1346
00:47:35,210 --> 00:47:42,980
cleaner so with that let's do a quick

1347
00:47:39,860 --> 00:47:45,710
<font color="#E5E5E5">demo so please don't use this tool</font><font color="#CCCCCC"> for</font>

1348
00:47:42,980 --> 00:47:47,960
evil and if<font color="#E5E5E5"> you're</font><font color="#CCCCCC"> fin 7th in a or a t32</font>

1349
00:47:45,710 --> 00:47:51,260
<font color="#E5E5E5">and don't call this work evil just you</font>

1350
00:47:47,960 --> 00:47:52,730
know don't don't use it at all<font color="#CCCCCC"> and in</font>

1351
00:47:51,260 --> 00:47:53,900
this tool it's<font color="#E5E5E5"> live on</font><font color="#CCCCCC"> my github I</font>

1352
00:47:52,730 --> 00:47:56,210
release it<font color="#CCCCCC"> just two</font><font color="#E5E5E5"> weeks ago at</font>

1353
00:47:53,900 --> 00:47:58,040
blackhat<font color="#E5E5E5"> so you're welcome</font><font color="#CCCCCC"> to download</font>

1354
00:47:56,210 --> 00:47:59,630
<font color="#E5E5E5">and use it but basically if you've used</font>

1355
00:47:58,040 --> 00:48:01,460
in<font color="#CCCCCC"> Bell confiscation or</font><font color="#E5E5E5"> any of those</font>

1356
00:47:59,630 --> 00:48:03,440
tools the interface will seem really

1357
00:48:01,460 --> 00:48:06,470
similar<font color="#CCCCCC"> so try</font><font color="#E5E5E5"> to kind of the same look</font>

1358
00:48:03,440 --> 00:48:08,090
<font color="#CCCCCC">in field but this</font><font color="#E5E5E5"> is the animated ASCII</font>

1359
00:48:06,470 --> 00:48:11,810
<font color="#CCCCCC">are just adding in this kind of</font>

1360
00:48:08,090 --> 00:48:13,220
efficient to<font color="#E5E5E5"> produce that payload but</font>

1361
00:48:11,810 --> 00:48:15,020
it's gonna have the same tutorial and

1362
00:48:13,220 --> 00:48:19,160
help menu that the other office<font color="#CCCCCC"> Gatien</font>

1363
00:48:15,020 --> 00:48:20,450
tools have<font color="#E5E5E5"> and so if we're good tutorial</font>

1364
00:48:19,160 --> 00:48:22,069
<font color="#E5E5E5">it'll show you how to set your command</font>

1365
00:48:20,450 --> 00:48:24,230
or the<font color="#CCCCCC"> command path and how to set the</font>

1366
00:48:22,070 --> 00:48:25,550
final binary for example if it's like if

1367
00:48:24,230 --> 00:48:27,650
you<font color="#E5E5E5"> want it to be a PowerShell command</font>

1368
00:48:25,550 --> 00:48:30,680
<font color="#E5E5E5">so we have binary encoding and payload</font>

1369
00:48:27,650 --> 00:48:31,610
so<font color="#E5E5E5"> binary is the first one this is</font>

1370
00:48:30,680 --> 00:48:33,529
basically<font color="#CCCCCC"> just going</font><font color="#E5E5E5"> to produce an</font>

1371
00:48:31,610 --> 00:48:35,060
obfuscated<font color="#E5E5E5"> command-line syntax to</font>

1372
00:48:33,530 --> 00:48:38,180
produce the binary<font color="#CCCCCC"> day in PowerShell</font><font color="#E5E5E5"> or</font>

1373
00:48:35,060 --> 00:48:39,350
command<font color="#CCCCCC"> so in this case if we choose the</font>

1374
00:48:38,180 --> 00:48:40,609
higher option number<font color="#E5E5E5"> three</font><font color="#CCCCCC"> it's</font>

1375
00:48:39,350 --> 00:48:42,440
<font color="#CCCCCC">basically going to do the crazy for loop</font>

1376
00:48:40,610 --> 00:48:43,850
encoding<font color="#CCCCCC"> copy to the clipboard paste it</font>

1377
00:48:42,440 --> 00:48:45,470
in the command<font color="#E5E5E5"> as you can see it</font>

1378
00:48:43,850 --> 00:48:48,740
produces a string<font color="#E5E5E5"> PowerShell and drops</font>

1379
00:48:45,470 --> 00:48:50,629
<font color="#E5E5E5">into a power shell prompt cool so the</font>

1380
00:48:48,740 --> 00:48:52,520
binary stuff is just<font color="#E5E5E5"> kind</font><font color="#CCCCCC"> of</font><font color="#E5E5E5"> like a</font>

1381
00:48:50,630 --> 00:48:54,470
<font color="#E5E5E5">little side option</font><font color="#CCCCCC"> encoding you</font>

1382
00:48:52,520 --> 00:48:55,250
basically<font color="#E5E5E5"> when you set command</font><font color="#CCCCCC"> so it's</font>

1383
00:48:54,470 --> 00:48:58,759
just<font color="#E5E5E5"> set of command</font>

1384
00:48:55,250 --> 00:49:00,050
let's do ping 888 as our<font color="#CCCCCC"> input command</font>

1385
00:48:58,760 --> 00:49:02,180
and<font color="#E5E5E5"> the let's do environment variable</font>

1386
00:49:00,050 --> 00:49:02,789
encoding<font color="#E5E5E5"> at any point you can</font><font color="#CCCCCC"> do show or</font>

1387
00:49:02,180 --> 00:49:04,410
show options

1388
00:49:02,789 --> 00:49:06,390
see what your command set what<font color="#CCCCCC"> off the</font>

1389
00:49:04,410 --> 00:49:09,178
<font color="#CCCCCC">station</font><font color="#E5E5E5"> options you've added so if we do</font>

1390
00:49:06,390 --> 00:49:11,640
option<font color="#CCCCCC"> 1 it will basically intersperse</font>

1391
00:49:09,179 --> 00:49:13,049
environment<font color="#E5E5E5"> variable substrings option 3</font>

1392
00:49:11,640 --> 00:49:14,819
<font color="#CCCCCC">we'll make the whole thing sub strings</font>

1393
00:49:13,049 --> 00:49:16,499
with like crazy<font color="#CCCCCC"> whitespace</font><font color="#E5E5E5"> and stuff and</font>

1394
00:49:14,819 --> 00:49:20,400
as you<font color="#E5E5E5"> can see it resolves</font><font color="#CCCCCC"> to our ping</font>

1395
00:49:16,499 --> 00:49:22,229
8888<font color="#E5E5E5"> that's the second one but the real</font>

1396
00:49:20,400 --> 00:49:24,509
meat of<font color="#E5E5E5"> the project here is in the</font>

1397
00:49:22,229 --> 00:49:25,859
payload section<font color="#E5E5E5"> which</font><font color="#CCCCCC"> has the four we</font>

1398
00:49:24,509 --> 00:49:28,140
<font color="#E5E5E5">just talked about concatenation fin</font>

1399
00:49:25,859 --> 00:49:29,848
coding for coding etc so<font color="#E5E5E5"> let's take us</font>

1400
00:49:28,140 --> 00:49:31,589
actually set a PowerShell<font color="#E5E5E5"> command and</font>

1401
00:49:29,849 --> 00:49:33,809
set the final binary to be<font color="#E5E5E5"> PowerShell</font>

1402
00:49:31,589 --> 00:49:35,699
we'll paste that in and<font color="#CCCCCC"> again we can go</font>

1403
00:49:33,809 --> 00:49:37,019
to show and see there's our PowerShell

1404
00:49:35,699 --> 00:49:38,999
command and we've set the binary to be

1405
00:49:37,019 --> 00:49:40,709
PowerShell<font color="#E5E5E5"> good to go</font><font color="#CCCCCC"> let's look</font><font color="#E5E5E5"> at</font>

1406
00:49:38,999 --> 00:49:42,238
concatenation everything is<font color="#E5E5E5"> three</font>

1407
00:49:40,709 --> 00:49:45,089
obfuscation<font color="#CCCCCC"> profile it's kind of low</font>

1408
00:49:42,239 --> 00:49:46,890
medium<font color="#E5E5E5"> high so</font><font color="#CCCCCC"> if</font><font color="#E5E5E5"> we do a</font><font color="#CCCCCC"> 1 it basically</font>

1409
00:49:45,089 --> 00:49:48,419
you know<font color="#E5E5E5"> kind of keeps it as condensed</font>

1410
00:49:46,890 --> 00:49:49,890
as possible and we<font color="#CCCCCC"> can paste</font><font color="#E5E5E5"> that in and</font>

1411
00:49:48,419 --> 00:49:52,859
<font color="#E5E5E5">see</font><font color="#CCCCCC"> that it runs our PowerShell command</font>

1412
00:49:49,890 --> 00:49:55,828
we can<font color="#E5E5E5"> go</font><font color="#CCCCCC"> 3 with a high office keishon</font>

1413
00:49:52,859 --> 00:49:58,499
level and that's the<font color="#E5E5E5"> command that</font>

1414
00:49:55,829 --> 00:50:01,939
decided to<font color="#E5E5E5"> produce and we can run it and</font>

1415
00:49:58,499 --> 00:50:05,729
see<font color="#CCCCCC"> that</font><font color="#E5E5E5"> it runs our PowerShell command</font>

1416
00:50:01,939 --> 00:50:07,049
pretty sucky so let's go to for coding

1417
00:50:05,729 --> 00:50:09,598
is<font color="#CCCCCC"> the last example here and we'll just</font>

1418
00:50:07,049 --> 00:50:10,919
<font color="#CCCCCC">go straight to the option</font><font color="#E5E5E5"> 3 and that's</font>

1419
00:50:09,599 --> 00:50:14,249
the for coding command that comes out

1420
00:50:10,919 --> 00:50:17,069
<font color="#CCCCCC">paste it in</font><font color="#E5E5E5"> and see</font><font color="#CCCCCC"> that it works and so</font>

1421
00:50:14,249 --> 00:50:19,379
<font color="#E5E5E5">kind of as a fun finale and exercise was</font>

1422
00:50:17,069 --> 00:50:21,058
for<font color="#E5E5E5"> myself what if I take a payload and</font>

1423
00:50:19,380 --> 00:50:22,319
host it<font color="#CCCCCC"> on</font><font color="#E5E5E5"> this bitly link and</font><font color="#CCCCCC"> I'll run</font>

1424
00:50:21,059 --> 00:50:23,909
<font color="#E5E5E5">it through</font><font color="#CCCCCC"> all the office Gatien tools</font>

1425
00:50:22,319 --> 00:50:25,439
I've done so<font color="#CCCCCC"> far</font><font color="#E5E5E5"> so</font><font color="#CCCCCC"> invoked cradle'</font>

1426
00:50:23,909 --> 00:50:27,659
crafter will<font color="#CCCCCC"> produce this office gated</font>

1427
00:50:25,439 --> 00:50:29,158
cradle<font color="#CCCCCC"> I then take that output put it in</font>

1428
00:50:27,659 --> 00:50:30,509
the invoke confiscation and<font color="#E5E5E5"> do around a</font>

1429
00:50:29,159 --> 00:50:31,589
token layer<font color="#E5E5E5"> office</font><font color="#CCCCCC"> Gatien which</font><font color="#E5E5E5"> I then</font>

1430
00:50:30,509 --> 00:50:33,299
put his input in<font color="#CCCCCC"> invoke da</font>

1431
00:50:31,589 --> 00:50:35,130
<font color="#CCCCCC">sophistication which produces this</font>

1432
00:50:33,299 --> 00:50:36,569
command and now when I paste this

1433
00:50:35,130 --> 00:50:38,549
command into the command prompt

1434
00:50:36,569 --> 00:50:40,109
interactively you see all this output

1435
00:50:38,549 --> 00:50:41,369
this<font color="#E5E5E5"> will be present</font><font color="#CCCCCC"> in standard output</font>

1436
00:50:40,109 --> 00:50:43,049
<font color="#CCCCCC">and it's running a little slow because I</font>

1437
00:50:41,369 --> 00:50:44,729
was beating the<font color="#CCCCCC"> crap out</font><font color="#E5E5E5"> of my VM this</font>

1438
00:50:43,049 --> 00:50:46,979
day when I did this demo but basically

1439
00:50:44,729 --> 00:50:48,629
character by character loop by loop<font color="#E5E5E5"> it's</font>

1440
00:50:46,979 --> 00:50:50,729
appending each character to<font color="#CCCCCC"> the final</font>

1441
00:50:48,630 --> 00:50:52,349
command and<font color="#E5E5E5"> reassemble get in memory</font>

1442
00:50:50,729 --> 00:50:54,359
none of this hits<font color="#CCCCCC"> command-line</font><font color="#E5E5E5"> and when</font>

1443
00:50:52,349 --> 00:50:55,949
it finally<font color="#E5E5E5"> gets done reassembling it</font>

1444
00:50:54,359 --> 00:50:57,749
will then echo it into an obfuscated

1445
00:50:55,949 --> 00:51:00,709
version of the string<font color="#E5E5E5"> powershell</font><font color="#CCCCCC"> tac</font>

1446
00:50:57,749 --> 00:51:05,988
<font color="#CCCCCC">which will take</font><font color="#E5E5E5"> it a standard input and</font>

1447
00:51:00,709 --> 00:51:05,989
<font color="#CCCCCC">then it will</font><font color="#E5E5E5"> run</font>

1448
00:51:06,120 --> 00:51:18,400
so that was<font color="#E5E5E5"> torture getting that getting</font>

1449
00:51:09,250 --> 00:51:20,830
<font color="#E5E5E5">that level to work so detecting</font>

1450
00:51:18,400 --> 00:51:22,270
ossification<font color="#CCCCCC"> again</font><font color="#E5E5E5"> the whole reason I</font>

1451
00:51:20,830 --> 00:51:24,040
did<font color="#CCCCCC"> any</font><font color="#E5E5E5"> this research was we saw</font>

1452
00:51:22,270 --> 00:51:26,080
attackers using<font color="#E5E5E5"> these baby step off the</font>

1453
00:51:24,040 --> 00:51:27,400
station techniques in the wild and I

1454
00:51:26,080 --> 00:51:29,590
didn't want to<font color="#CCCCCC"> get burned I didn't want</font>

1455
00:51:27,400 --> 00:51:32,230
to miss any of<font color="#E5E5E5"> this</font><font color="#CCCCCC"> Co activity</font><font color="#E5E5E5"> used by</font>

1456
00:51:29,590 --> 00:51:34,000
<font color="#CCCCCC">this fin</font><font color="#E5E5E5"> and apt</font><font color="#CCCCCC"> groups and so</font><font color="#E5E5E5"> I wanted</font>

1457
00:51:32,230 --> 00:51:36,250
to see what's possible<font color="#CCCCCC"> and I wrote this</font>

1458
00:51:34,000 --> 00:51:37,750
tool<font color="#E5E5E5"> kind</font><font color="#CCCCCC"> of is</font><font color="#E5E5E5"> like a custom fuzzer to</font>

1459
00:51:36,250 --> 00:51:40,330
<font color="#E5E5E5">basically test my detection and help me</font>

1460
00:51:37,750 --> 00:51:41,590
build them<font color="#CCCCCC"> so from a high level some of</font>

1461
00:51:40,330 --> 00:51:42,549
<font color="#E5E5E5">the things some of the kind of concepts</font>

1462
00:51:41,590 --> 00:51:43,960
you can<font color="#E5E5E5"> look for and there's a ton</font><font color="#CCCCCC"> more</font>

1463
00:51:42,550 --> 00:51:45,580
<font color="#E5E5E5">information in the white paper where I</font>

1464
00:51:43,960 --> 00:51:48,090
break down<font color="#E5E5E5"> even have some sample reg X's</font>

1465
00:51:45,580 --> 00:51:50,890
<font color="#E5E5E5">and stuff like that but looking for like</font>

1466
00:51:48,090 --> 00:51:52,420
really<font color="#E5E5E5"> long argument links your mileage</font>

1467
00:51:50,890 --> 00:51:53,529
<font color="#E5E5E5">may</font><font color="#CCCCCC"> vary the detection so we have to</font>

1468
00:51:52,420 --> 00:51:55,510
<font color="#E5E5E5">write have to work for all of</font><font color="#CCCCCC"> our</font>

1469
00:51:53,530 --> 00:51:57,940
clients<font color="#CCCCCC"> all around the world and so</font><font color="#E5E5E5"> we</font>

1470
00:51:55,510 --> 00:51:59,650
have a slightly different constraints we

1471
00:51:57,940 --> 00:52:00,790
<font color="#CCCCCC">have to offer</font><font color="#E5E5E5"> it under as opposed</font><font color="#CCCCCC"> to if</font>

1472
00:51:59,650 --> 00:52:03,190
let's say<font color="#E5E5E5"> we're doing operational</font>

1473
00:52:00,790 --> 00:52:04,450
<font color="#E5E5E5">security for one or two environments</font><font color="#CCCCCC"> you</font>

1474
00:52:03,190 --> 00:52:07,120
can<font color="#CCCCCC"> also look for</font><font color="#E5E5E5"> high frequency</font><font color="#CCCCCC"> of</font>

1475
00:52:04,450 --> 00:52:08,589
<font color="#E5E5E5">these off the station characters um one</font>

1476
00:52:07,120 --> 00:52:10,839
thing<font color="#E5E5E5"> I found to be really valuable is</font>

1477
00:52:08,590 --> 00:52:12,550
looking for these internal commands that

1478
00:52:10,840 --> 00:52:14,860
are<font color="#E5E5E5"> like kind</font><font color="#CCCCCC"> of the building blocks to</font>

1479
00:52:12,550 --> 00:52:16,660
<font color="#E5E5E5">all this obfuscation stuff like call set</font>

1480
00:52:14,860 --> 00:52:18,460
find and find string<font color="#CCCCCC"> or</font><font color="#E5E5E5"> good ones as</font>

1481
00:52:16,660 --> 00:52:20,920
well<font color="#E5E5E5"> and saying do I see any of</font><font color="#CCCCCC"> these</font>

1482
00:52:18,460 --> 00:52:22,660
strings that<font color="#E5E5E5"> are broken up by carrots</font><font color="#CCCCCC"> or</font>

1483
00:52:20,920 --> 00:52:25,330
maybe that<font color="#E5E5E5"> are immediately followed by a</font>

1484
00:52:22,660 --> 00:52:27,339
preceded by the comma or semicolon etc

1485
00:52:25,330 --> 00:52:29,319
these<font color="#E5E5E5"> are really really good ways</font><font color="#CCCCCC"> to</font>

1486
00:52:27,340 --> 00:52:31,840
catch a lot<font color="#CCCCCC"> of this</font><font color="#E5E5E5"> activity</font><font color="#CCCCCC"> I'm looking</font>

1487
00:52:29,320 --> 00:52:35,020
for<font color="#CCCCCC"> unusual</font><font color="#E5E5E5"> execution flag</font><font color="#CCCCCC"> /v is used</font>

1488
00:52:31,840 --> 00:52:37,300
legitimately by some some products<font color="#E5E5E5"> out</font>

1489
00:52:35,020 --> 00:52:39,310
<font color="#CCCCCC">there in the world</font><font color="#E5E5E5"> but</font><font color="#CCCCCC"> /r</font><font color="#E5E5E5"> again I've</font>

1490
00:52:37,300 --> 00:52:41,140
still never seen it used so that<font color="#E5E5E5"> could</font>

1491
00:52:39,310 --> 00:52:43,540
be<font color="#E5E5E5"> a good indicator looking for</font><font color="#CCCCCC"> this</font>

1492
00:52:41,140 --> 00:52:44,470
variable substring syntax<font color="#E5E5E5"> and looking</font>

1493
00:52:43,540 --> 00:52:46,360
for all<font color="#E5E5E5"> this stuff on the command line</font>

1494
00:52:44,470 --> 00:52:48,339
<font color="#E5E5E5">looking for in</font><font color="#CCCCCC"> the registry and event</font>

1495
00:52:46,360 --> 00:52:50,200
logs<font color="#E5E5E5"> service</font><font color="#CCCCCC"> information as well as if</font>

1496
00:52:48,340 --> 00:52:52,570
<font color="#E5E5E5">you have</font><font color="#CCCCCC"> virustotal intelligence account</font>

1497
00:52:50,200 --> 00:52:53,710
just like grating some the<font color="#CCCCCC"> our rules</font><font color="#E5E5E5"> go</font>

1498
00:52:52,570 --> 00:52:57,460
into<font color="#CCCCCC"> town seeing what's out</font><font color="#E5E5E5"> there in the</font>

1499
00:52:53,710 --> 00:53:00,010
wild<font color="#CCCCCC"> I mentioned before the the</font>

1500
00:52:57,460 --> 00:53:02,350
substring artifact<font color="#E5E5E5"> so that space space</font>

1501
00:53:00,010 --> 00:53:05,350
<font color="#E5E5E5">SDC with that interesting spacing there</font>

1502
00:53:02,350 --> 00:53:08,290
<font color="#E5E5E5">this happens when you have</font><font color="#CCCCCC"> a sub command</font>

1503
00:53:05,350 --> 00:53:10,210
<font color="#CCCCCC">that's run like</font><font color="#E5E5E5"> in our context this is a</font>

1504
00:53:08,290 --> 00:53:11,740
sub command that's because it's executed

1505
00:53:10,210 --> 00:53:13,570
as a sub command in this<font color="#E5E5E5"> for loop</font><font color="#CCCCCC"> all</font>

1506
00:53:11,740 --> 00:53:15,850
<font color="#CCCCCC">right that's going</font><font color="#E5E5E5"> to produce this one</font>

1507
00:53:13,570 --> 00:53:17,710
additional execution but you live<font color="#CCCCCC"> in</font>

1508
00:53:15,850 --> 00:53:18,430
<font color="#E5E5E5">those that we run set as an internal</font>

1509
00:53:17,710 --> 00:53:20,109
<font color="#E5E5E5">command</font>

1510
00:53:18,430 --> 00:53:22,450
you pipe contents<font color="#E5E5E5"> into an additional</font>

1511
00:53:20,109 --> 00:53:24,369
binary which<font color="#CCCCCC"> fine</font><font color="#E5E5E5"> string is actually</font><font color="#CCCCCC"> a</font>

1512
00:53:22,450 --> 00:53:26,410
binary<font color="#E5E5E5"> then that will produce an</font>

1513
00:53:24,369 --> 00:53:30,849
additional internal<font color="#E5E5E5"> sub command with the</font>

1514
00:53:26,410 --> 00:53:33,339
same SDC variables<font color="#E5E5E5"> and so when you</font>

1515
00:53:30,849 --> 00:53:34,480
actually we<font color="#CCCCCC"> actually are writing</font>

1516
00:53:33,339 --> 00:53:35,558
detection for the stuff you<font color="#CCCCCC"> can also</font>

1517
00:53:34,480 --> 00:53:37,510
write detections against these

1518
00:53:35,559 --> 00:53:39,670
interesting sub command artifacts that

1519
00:53:37,510 --> 00:53:41,890
<font color="#E5E5E5">are generated by default and fun fact if</font>

1520
00:53:39,670 --> 00:53:44,470
as an attacker you'd rename command<font color="#E5E5E5"> XE</font>

1521
00:53:41,890 --> 00:53:47,859
to benign<font color="#CCCCCC"> X</font><font color="#E5E5E5"> let's say and you</font><font color="#CCCCCC"> run this</font>

1522
00:53:44,470 --> 00:53:50,589
command these these sub artifacts will

1523
00:53:47,859 --> 00:53:52,420
still run from command<font color="#CCCCCC"> XE</font><font color="#E5E5E5"> so it actually</font>

1524
00:53:50,589 --> 00:53:56,020
doesn't<font color="#E5E5E5"> take the the name of the buyer</font>

1525
00:53:52,420 --> 00:53:59,380
you're running out of<font color="#E5E5E5"> so I suffer from</font>

1526
00:53:56,020 --> 00:54:01,690
FOMO<font color="#E5E5E5"> as a defender but for me it's a</font>

1527
00:53:59,380 --> 00:54:03,910
fear<font color="#E5E5E5"> of missing obfuscation so because</font>

1528
00:54:01,690 --> 00:54:05,530
I'm<font color="#CCCCCC"> obsessed</font><font color="#E5E5E5"> with it and</font><font color="#CCCCCC"> I</font><font color="#E5E5E5"> love finding</font>

1529
00:54:03,910 --> 00:54:06,759
it<font color="#E5E5E5"> and especially</font><font color="#CCCCCC"> wouldn't find</font><font color="#E5E5E5"> finding</font>

1530
00:54:05,530 --> 00:54:09,550
cool attacker activity when they're

1531
00:54:06,760 --> 00:54:10,290
trying<font color="#E5E5E5"> to evade</font><font color="#CCCCCC"> detection it makes me</font>

1532
00:54:09,550 --> 00:54:13,450
really happy

1533
00:54:10,290 --> 00:54:15,430
<font color="#E5E5E5">so to help</font><font color="#CCCCCC"> facilitate this</font><font color="#E5E5E5"> it's really</font>

1534
00:54:13,450 --> 00:54:17,500
<font color="#E5E5E5">hard releasing research and tools like</font>

1535
00:54:15,430 --> 00:54:19,750
<font color="#CCCCCC">this</font><font color="#E5E5E5"> because a script</font><font color="#CCCCCC"> Kitty can benefit</font>

1536
00:54:17,500 --> 00:54:22,750
from day one but<font color="#E5E5E5"> it's really hard</font><font color="#CCCCCC"> for</font>

1537
00:54:19,750 --> 00:54:25,540
defenders<font color="#E5E5E5"> to really benefit as quickly</font>

1538
00:54:22,750 --> 00:54:27,609
<font color="#CCCCCC">and so in the</font><font color="#E5E5E5"> interactive tool there's</font>

1539
00:54:25,540 --> 00:54:29,890
only a subset<font color="#CCCCCC"> of obfuscation</font><font color="#E5E5E5"> that is</font>

1540
00:54:27,609 --> 00:54:31,660
built into<font color="#E5E5E5"> the tool when you're using it</font>

1541
00:54:29,890 --> 00:54:33,308
interactively<font color="#E5E5E5"> when you interact with all</font>

1542
00:54:31,660 --> 00:54:36,220
the<font color="#E5E5E5"> underlying functions every single</font>

1543
00:54:33,309 --> 00:54:37,839
one<font color="#E5E5E5"> of these payload operations has over</font>

1544
00:54:36,220 --> 00:54:40,270
<font color="#E5E5E5">20 different arguments that you can put</font>

1545
00:54:37,839 --> 00:54:42,308
in to<font color="#CCCCCC"> vary all like the percentage of</font>

1546
00:54:40,270 --> 00:54:43,210
like carrots and<font color="#E5E5E5"> like random stuff</font><font color="#CCCCCC"> like</font>

1547
00:54:42,309 --> 00:54:45,160
that

1548
00:54:43,210 --> 00:54:47,230
and so I wanted<font color="#E5E5E5"> to make it easier for</font>

1549
00:54:45,160 --> 00:54:50,649
defenders to use the full value of the

1550
00:54:47,230 --> 00:54:52,150
tool<font color="#CCCCCC"> but</font><font color="#E5E5E5"> kind of kind of limit offensive</font>

1551
00:54:50,650 --> 00:54:55,150
people<font color="#E5E5E5"> unless it</font><font color="#CCCCCC"> actually go to the</font>

1552
00:54:52,150 --> 00:54:57,430
underlying functions and to<font color="#E5E5E5"> really kind</font>

1553
00:54:55,150 --> 00:54:59,170
of drive<font color="#CCCCCC"> the point home I release with</font>

1554
00:54:57,430 --> 00:55:00,460
the tool the test<font color="#CCCCCC"> harness that</font><font color="#E5E5E5"> I used</font>

1555
00:54:59,170 --> 00:55:01,930
and this<font color="#E5E5E5"> is basically what I've done</font>

1556
00:55:00,460 --> 00:55:03,280
with all my office<font color="#CCCCCC"> Gatien</font><font color="#E5E5E5"> tools I treat</font>

1557
00:55:01,930 --> 00:55:04,629
it as a custom fuzzer and then I should

1558
00:55:03,280 --> 00:55:06,430
narrate<font color="#E5E5E5"> thousands and thousands</font><font color="#CCCCCC"> and</font>

1559
00:55:04,630 --> 00:55:07,960
thousands<font color="#CCCCCC"> of examples</font><font color="#E5E5E5"> and then test my</font>

1560
00:55:06,430 --> 00:55:09,819
detection ideas to see did I detect all

1561
00:55:07,960 --> 00:55:11,680
these things<font color="#E5E5E5"> so actually</font><font color="#CCCCCC"> release</font><font color="#E5E5E5"> the</font>

1562
00:55:09,819 --> 00:55:14,380
test<font color="#CCCCCC"> harness with this tool and you can</font>

1563
00:55:11,680 --> 00:55:15,250
just run<font color="#CCCCCC"> invoke Gauss's test harness</font><font color="#E5E5E5"> and</font>

1564
00:55:14,380 --> 00:55:17,619
if you don't want to run any of<font color="#E5E5E5"> the</font>

1565
00:55:15,250 --> 00:55:20,230
tools then I uploaded<font color="#CCCCCC"> 4,000</font><font color="#E5E5E5"> samples</font>

1566
00:55:17,619 --> 00:55:22,150
<font color="#E5E5E5">again with a full wide range every</font>

1567
00:55:20,230 --> 00:55:24,150
single execution randomizes all those<font color="#E5E5E5"> 20</font>

1568
00:55:22,150 --> 00:55:26,140
arguments so you get like a lot<font color="#E5E5E5"> crazier</font>

1569
00:55:24,150 --> 00:55:28,660
fluctuations in the output than you ever

1570
00:55:26,140 --> 00:55:30,368
would using the interactive tool but

1571
00:55:28,660 --> 00:55:32,020
with<font color="#E5E5E5"> invoke test harness what you can do</font>

1572
00:55:30,369 --> 00:55:32,290
is<font color="#E5E5E5"> there's this array where you can put</font>

1573
00:55:32,020 --> 00:55:34,330
in

1574
00:55:32,290 --> 00:55:36,040
any regex terms to start to look for

1575
00:55:34,330 --> 00:55:39,160
<font color="#E5E5E5">certain concepts from an</font><font color="#CCCCCC"> attachment</font>

1576
00:55:36,040 --> 00:55:40,960
perspective<font color="#E5E5E5"> so I actually</font><font color="#CCCCCC"> started with</font>

1577
00:55:39,160 --> 00:55:42,279
these<font color="#E5E5E5"> two these are the two of the rules</font>

1578
00:55:40,960 --> 00:55:45,250
<font color="#E5E5E5">that I had is come on basic starting</font>

1579
00:55:42,280 --> 00:55:46,810
points in the the code release so you

1580
00:55:45,250 --> 00:55:48,520
<font color="#E5E5E5">can put those rules</font><font color="#CCCCCC"> in there</font><font color="#E5E5E5"> and then</font>

1581
00:55:46,810 --> 00:55:50,980
generate a hundred<font color="#E5E5E5"> events and then say</font>

1582
00:55:48,520 --> 00:55:52,240
<font color="#E5E5E5">okay oh I</font><font color="#CCCCCC"> only detected the tool as you</font>

1583
00:55:50,980 --> 00:55:53,320
said you detected<font color="#E5E5E5"> thirty three of the</font>

1584
00:55:52,240 --> 00:55:55,089
hundred events<font color="#E5E5E5"> and here are the rules</font>

1585
00:55:53,320 --> 00:55:56,260
they matched on so then you can start<font color="#CCCCCC"> to</font>

1586
00:55:55,090 --> 00:55:58,360
look at<font color="#E5E5E5"> the things you</font><font color="#CCCCCC"> missed it's like</font>

1587
00:55:56,260 --> 00:55:59,950
hey what about<font color="#E5E5E5"> this rule evaded this</font>

1588
00:55:58,360 --> 00:56:01,900
detection<font color="#E5E5E5"> or what's a new detection I</font>

1589
00:55:59,950 --> 00:56:03,879
need to do so<font color="#E5E5E5"> this is the exact process</font>

1590
00:56:01,900 --> 00:56:06,760
<font color="#E5E5E5">I went</font><font color="#CCCCCC"> through</font><font color="#E5E5E5"> four months building out</font>

1591
00:56:03,880 --> 00:56:11,640
all the<font color="#CCCCCC"> detection</font><font color="#E5E5E5"> that we use for</font><font color="#CCCCCC"> all of</font>

1592
00:56:06,760 --> 00:56:14,560
our<font color="#E5E5E5"> clients so I can't stress enough how</font>

1593
00:56:11,640 --> 00:56:16,299
how<font color="#E5E5E5"> I've tried to make this as easy as</font>

1594
00:56:14,560 --> 00:56:17,470
<font color="#E5E5E5">possible</font><font color="#CCCCCC"> for defenders to use the data</font>

1595
00:56:16,300 --> 00:56:18,760
right out of the gate and again if you

1596
00:56:17,470 --> 00:56:21,310
don't<font color="#E5E5E5"> want</font><font color="#CCCCCC"> to run this tool units</font>

1597
00:56:18,760 --> 00:56:23,020
download as text files<font color="#E5E5E5"> of the</font><font color="#CCCCCC"> 4,000</font>

1598
00:56:21,310 --> 00:56:24,850
different<font color="#E5E5E5"> options or you can actually</font>

1599
00:56:23,020 --> 00:56:26,140
<font color="#E5E5E5">download</font><font color="#CCCCCC"> security or system on EBT</font><font color="#E5E5E5"> X</font>

1600
00:56:24,850 --> 00:56:28,120
<font color="#E5E5E5">Files</font><font color="#CCCCCC"> if you actually</font><font color="#E5E5E5"> wanna write</font>

1601
00:56:26,140 --> 00:56:30,040
detection<font color="#E5E5E5"> against all the sub command</font>

1602
00:56:28,120 --> 00:56:31,000
executions<font color="#E5E5E5"> and stuff like that</font><font color="#CCCCCC"> so again</font>

1603
00:56:30,040 --> 00:56:32,650
as a defender<font color="#CCCCCC"> you can just download</font>

1604
00:56:31,000 --> 00:56:34,390
these text files<font color="#E5E5E5"> if you want</font><font color="#CCCCCC"> and start</font>

1605
00:56:32,650 --> 00:56:37,660
grepping like your list<font color="#E5E5E5"> of rules to</font>

1606
00:56:34,390 --> 00:56:40,870
<font color="#E5E5E5">start to build out the</font><font color="#CCCCCC"> texans and this</font>

1607
00:56:37,660 --> 00:56:43,420
is the<font color="#CCCCCC"> exact process</font><font color="#E5E5E5"> that I used so kind</font>

1608
00:56:40,870 --> 00:56:44,920
<font color="#E5E5E5">of the key takeaways attackers are using</font>

1609
00:56:43,420 --> 00:56:48,250
more creative command argument<font color="#E5E5E5"> office</font>

1610
00:56:44,920 --> 00:56:50,950
<font color="#CCCCCC">keishon techniques</font><font color="#E5E5E5"> command</font><font color="#CCCCCC"> XE supports</font>

1611
00:56:48,250 --> 00:56:53,620
the it's definitely far more rigid than

1612
00:56:50,950 --> 00:56:55,600
<font color="#CCCCCC">PowerShell but it still supports</font><font color="#E5E5E5"> a crazy</font>

1613
00:56:53,620 --> 00:56:57,569
<font color="#E5E5E5">amount of kind of</font><font color="#CCCCCC"> combined able</font>

1614
00:56:55,600 --> 00:57:01,480
interchangeable<font color="#CCCCCC"> office Gatien techniques</font>

1615
00:56:57,570 --> 00:57:03,250
<font color="#CCCCCC">and we as defenders you know we have to</font>

1616
00:57:01,480 --> 00:57:05,200
match the<font color="#E5E5E5"> same level of</font><font color="#CCCCCC"> creativity that</font>

1617
00:57:03,250 --> 00:57:07,480
<font color="#CCCCCC">the attackers</font><font color="#E5E5E5"> used to kind of think</font>

1618
00:57:05,200 --> 00:57:09,160
differently about detecting as well as

1619
00:57:07,480 --> 00:57:11,350
trying to kind of approach these new

1620
00:57:09,160 --> 00:57:15,970
problem spaces<font color="#E5E5E5"> before they become really</font>

1621
00:57:11,350 --> 00:57:17,740
<font color="#CCCCCC">big problems so with that I just have to</font>

1622
00:57:15,970 --> 00:57:19,569
give a huge<font color="#CCCCCC"> shout</font><font color="#E5E5E5"> out</font><font color="#CCCCCC"> to some of my</font>

1623
00:57:17,740 --> 00:57:20,890
<font color="#E5E5E5">co-workers Nick Carr</font><font color="#CCCCCC"> matt</font><font color="#E5E5E5"> done what he'd</font>

1624
00:57:19,570 --> 00:57:24,160
<font color="#E5E5E5">been with</font><font color="#CCCCCC"> Noah on the advanced practices</font>

1625
00:57:20,890 --> 00:57:26,500
team that really<font color="#E5E5E5"> make this kind of</font>

1626
00:57:24,160 --> 00:57:28,089
research<font color="#CCCCCC"> super fun because we get to</font>

1627
00:57:26,500 --> 00:57:30,070
apply<font color="#CCCCCC"> it</font><font color="#E5E5E5"> and actually see attackers</font>

1628
00:57:28,090 --> 00:57:31,240
<font color="#E5E5E5">doing some really interesting stuff and</font>

1629
00:57:30,070 --> 00:57:33,370
<font color="#E5E5E5">I have to give a huge</font><font color="#CCCCCC"> shout out to my</font>

1630
00:57:31,240 --> 00:57:35,200
wife<font color="#E5E5E5"> Paige because she puts up with</font><font color="#CCCCCC"> a</font>

1631
00:57:33,370 --> 00:57:39,160
ton of research<font color="#E5E5E5"> that's after hours on</font>

1632
00:57:35,200 --> 00:57:40,480
<font color="#E5E5E5">this stuff</font><font color="#CCCCCC"> the yeah that this is this is</font>

1633
00:57:39,160 --> 00:57:42,430
<font color="#CCCCCC">a huge</font><font color="#E5E5E5"> endeavor over the past nine</font>

1634
00:57:40,480 --> 00:57:44,170
months<font color="#E5E5E5"> with a lot of hours going into</font>

1635
00:57:42,430 --> 00:57:46,450
this<font color="#E5E5E5"> and so just the big things</font>

1636
00:57:44,170 --> 00:57:49,690
<font color="#E5E5E5">to them for for letting me pursue this</font>

1637
00:57:46,450 --> 00:57:52,058
obsession<font color="#E5E5E5"> so with that the code is</font><font color="#CCCCCC"> on my</font>

1638
00:57:49,690 --> 00:57:53,589
github<font color="#CCCCCC"> the white</font><font color="#E5E5E5"> paper is located here</font>

1639
00:57:52,059 --> 00:57:55,000
<font color="#CCCCCC">the slides for</font><font color="#E5E5E5"> this talk will be</font>

1640
00:57:53,589 --> 00:57:56,440
published as soon as this talk is over<font color="#E5E5E5"> I</font>

1641
00:57:55,000 --> 00:57:57,670
think<font color="#CCCCCC"> it'll be tweeted out on the hack</font>

1642
00:57:56,440 --> 00:58:01,650
<font color="#E5E5E5">in the box</font>

1643
00:57:57,670 --> 00:58:01,650
and yeah thank<font color="#E5E5E5"> you so</font><font color="#CCCCCC"> much</font><font color="#E5E5E5"> for your time</font>

1644
00:58:04,890 --> 00:58:10,779
so there's a<font color="#E5E5E5"> blinking two minutes up</font>

1645
00:58:07,420 --> 00:58:13,780
here<font color="#CCCCCC"> actually I don't</font><font color="#E5E5E5"> know if you're the</font>

1646
00:58:10,780 --> 00:58:16,150
the QA monitor<font color="#E5E5E5"> moderator something yeah</font>

1647
00:58:13,780 --> 00:58:18,250
we<font color="#CCCCCC"> still have some time to spend I don't</font>

1648
00:58:16,150 --> 00:58:26,319
have any questions<font color="#E5E5E5"> so we have a Q&A</font>

1649
00:58:18,250 --> 00:58:28,299
<font color="#E5E5E5">session hey Daniel</font><font color="#CCCCCC"> first of</font><font color="#E5E5E5"> all I'm</font>

1650
00:58:26,319 --> 00:58:30,970
<font color="#CCCCCC">really impressed</font><font color="#E5E5E5"> by this research</font>

1651
00:58:28,299 --> 00:58:33,299
<font color="#CCCCCC">crudest year that was mind-blowing</font>

1652
00:58:30,970 --> 00:58:36,669
to be honest I've seen quite<font color="#E5E5E5"> a few</font>

1653
00:58:33,299 --> 00:58:38,140
application related<font color="#E5E5E5"> talks</font><font color="#CCCCCC"> before but</font>

1654
00:58:36,670 --> 00:58:39,970
none of them to this extent is

1655
00:58:38,140 --> 00:58:41,020
especially<font color="#CCCCCC"> enough from</font><font color="#E5E5E5"> both</font><font color="#CCCCCC"> sides</font><font color="#E5E5E5"> like</font>

1656
00:58:39,970 --> 00:58:42,848
both from the offensive and defensive

1657
00:58:41,020 --> 00:58:44,589
sides on top of having tools released

1658
00:58:42,849 --> 00:58:46,740
alongside it so I'll<font color="#CCCCCC"> definitely look</font>

1659
00:58:44,589 --> 00:58:49,328
<font color="#E5E5E5">into the white paper but my question was</font>

1660
00:58:46,740 --> 00:58:51,399
<font color="#E5E5E5">related to the one of the earlier points</font>

1661
00:58:49,329 --> 00:58:53,559
you mentioned<font color="#CCCCCC"> which was that</font><font color="#E5E5E5"> none as far</font>

1662
00:58:51,400 --> 00:58:57,339
as I understood none of<font color="#CCCCCC"> this applies to</font>

1663
00:58:53,559 --> 00:58:59,650
things<font color="#E5E5E5"> like</font><font color="#CCCCCC"> ronke</font><font color="#E5E5E5"> services</font><font color="#CCCCCC"> and scheduled</font>

1664
00:58:57,339 --> 00:59:02,470
tasks so basically the persistence part

1665
00:58:59,650 --> 00:59:05,049
yeah of<font color="#CCCCCC"> the</font><font color="#E5E5E5"> kill chain and so my</font>

1666
00:59:02,470 --> 00:59:07,390
<font color="#CCCCCC">question is did I</font><font color="#E5E5E5"> understand</font><font color="#CCCCCC"> that</font>

1667
00:59:05,049 --> 00:59:11,500
correctly how much of it<font color="#CCCCCC"> then</font><font color="#E5E5E5"> applied to</font>

1668
00:59:07,390 --> 00:59:12,430
<font color="#CCCCCC">it</font><font color="#E5E5E5"> and if not where does that put the</font>

1669
00:59:11,500 --> 00:59:14,950
attacker

1670
00:59:12,430 --> 00:59:16,390
you know alongside the<font color="#E5E5E5"> clip chain is</font><font color="#CCCCCC"> is</font>

1671
00:59:14,950 --> 00:59:19,149
this<font color="#E5E5E5"> something</font><font color="#CCCCCC"> that would only</font><font color="#E5E5E5"> happen</font>

1672
00:59:16,390 --> 00:59:21,848
<font color="#E5E5E5">you know during execution yeah how can</font>

1673
00:59:19,150 --> 00:59:24,640
it happen<font color="#E5E5E5"> earlier in other parts of of</font>

1674
00:59:21,849 --> 00:59:28,030
assistance<font color="#CCCCCC"> yeah</font><font color="#E5E5E5"> no that's a great</font>

1675
00:59:24,640 --> 00:59:30,040
<font color="#E5E5E5">question so the</font><font color="#CCCCCC"> only</font><font color="#E5E5E5"> part that doesn't</font>

1676
00:59:28,030 --> 00:59:32,109
work<font color="#E5E5E5"> the only part that's context</font>

1677
00:59:30,040 --> 00:59:33,849
<font color="#E5E5E5">specific is if the very first mine area</font>

1678
00:59:32,109 --> 00:59:35,500
you have which in this case<font color="#E5E5E5"> the DA</font><font color="#CCCCCC"> so</font>

1679
00:59:33,849 --> 00:59:37,630
<font color="#CCCCCC">station everything is commander XE right</font>

1680
00:59:35,500 --> 00:59:40,000
<font color="#CCCCCC">so if you're not using command</font><font color="#E5E5E5"> actually</font>

1681
00:59:37,630 --> 00:59:42,700
<font color="#E5E5E5">as the very first thing in the</font>

1682
00:59:40,000 --> 00:59:44,140
persistence item there's a lot of<font color="#E5E5E5"> slides</font>

1683
00:59:42,700 --> 00:59:46,000
come on come on come on<font color="#CCCCCC"> weird how my</font>

1684
00:59:44,140 --> 00:59:47,980
<font color="#E5E5E5">using the for loop we're using for using</font>

1685
00:59:46,000 --> 00:59:49,990
<font color="#E5E5E5">comm spec with that crazy substring</font>

1686
00:59:47,980 --> 00:59:52,150
<font color="#E5E5E5">stuff like this</font>

1687
00:59:49,990 --> 00:59:53,589
so this calm spec thing if you paste

1688
00:59:52,150 --> 00:59:55,540
this and<font color="#CCCCCC"> to command prompt it will run</font>

1689
00:59:53,589 --> 00:59:57,880
<font color="#CCCCCC">WP shell it'll</font><font color="#E5E5E5"> run but if this is the</font>

1690
00:59:55,540 --> 01:00:01,180
exact value that<font color="#E5E5E5"> an attacker</font><font color="#CCCCCC"> paces a run</font>

1691
00:59:57,880 --> 01:00:02,200
or services it won't run all the office

1692
01:00:01,180 --> 01:00:04,480
kitchen<font color="#E5E5E5"> we talked about will work</font>

1693
01:00:02,200 --> 01:00:06,250
perfectly fine anywhere except<font color="#E5E5E5"> the very</font>

1694
01:00:04,480 --> 01:00:08,440
first thing the context has<font color="#CCCCCC"> to</font>

1695
01:00:06,250 --> 01:00:12,160
understand this is command<font color="#CCCCCC"> XE</font>

1696
01:00:08,440 --> 01:00:13,750
so that being<font color="#E5E5E5"> said the the for coding</font>

1697
01:00:12,160 --> 01:00:15,640
the<font color="#E5E5E5"> fin coding all stuff will</font><font color="#CCCCCC"> work</font>

1698
01:00:13,750 --> 01:00:17,410
perfectly fine and you will<font color="#E5E5E5"> find it in</font>

1699
01:00:15,640 --> 01:00:19,150
registry or services or something<font color="#E5E5E5"> like</font>

1700
01:00:17,410 --> 01:00:20,770
<font color="#CCCCCC">that</font><font color="#E5E5E5"> but the very it has to start with</font>

1701
01:00:19,150 --> 01:00:22,360
<font color="#E5E5E5">something meaningful for the very first</font>

1702
01:00:20,770 --> 01:00:24,850
command XE so it still is<font color="#E5E5E5"> gonna be</font>

1703
01:00:22,360 --> 01:00:28,120
command XE<font color="#CCCCCC"> more percent</font><font color="#E5E5E5"> COMSEC percent</font>

1704
01:00:24,850 --> 01:00:29,980
or something<font color="#E5E5E5"> like that but but yeah so</font>

1705
01:00:28,120 --> 01:00:31,720
for<font color="#E5E5E5"> all the detection</font><font color="#CCCCCC"> that I wrote I</font>

1706
01:00:29,980 --> 01:00:33,310
wrote<font color="#E5E5E5"> them as static and dynamic and so</font>

1707
01:00:31,720 --> 01:00:37,240
I'm looking<font color="#E5E5E5"> for this stuff process</font>

1708
01:00:33,310 --> 01:00:39,310
arguments registry services<font color="#E5E5E5"> some other</font>

1709
01:00:37,240 --> 01:00:40,870
artifacts<font color="#CCCCCC"> your our rules looking for you</font>

1710
01:00:39,310 --> 01:00:42,340
know public<font color="#E5E5E5"> sources and stuff like that</font>

1711
01:00:40,870 --> 01:00:44,620
to look for like macros containing<font color="#E5E5E5"> this</font>

1712
01:00:42,340 --> 01:00:45,730
kind<font color="#E5E5E5"> of syntax</font><font color="#CCCCCC"> or you know</font><font color="#E5E5E5"> snort</font><font color="#CCCCCC"> SIG's</font>

1713
01:00:44,620 --> 01:00:48,069
<font color="#E5E5E5">looking for the stuff going over the</font>

1714
01:00:45,730 --> 01:00:50,320
wire but but yeah the only difference

1715
01:00:48,070 --> 01:00:52,420
again is<font color="#E5E5E5"> the very</font><font color="#CCCCCC"> first mention of</font>

1716
01:00:50,320 --> 01:00:54,010
command XE has to make<font color="#E5E5E5"> sense to its</font>

1717
01:00:52,420 --> 01:00:56,290
context<font color="#CCCCCC"> but everything else worked</font>

1718
01:00:54,010 --> 01:01:00,070
perfectly fine<font color="#CCCCCC"> so really good question</font>

1719
01:00:56,290 --> 01:01:02,950
<font color="#E5E5E5">Thanks any others</font><font color="#CCCCCC"> get one in the middle</font>

1720
01:01:00,070 --> 01:01:04,450
there I've got two questions have<font color="#E5E5E5"> you</font>

1721
01:01:02,950 --> 01:01:07,089
talked to Microsoft<font color="#CCCCCC"> about adding the</font>

1722
01:01:04,450 --> 01:01:09,160
flag to basically<font color="#CCCCCC"> do this Kate it's and</font>

1723
01:01:07,090 --> 01:01:12,010
they have<font color="#E5E5E5"> your tragedy obfuscating it</font>

1724
01:01:09,160 --> 01:01:14,009
yourself<font color="#CCCCCC"> yeah</font><font color="#E5E5E5"> yeah</font><font color="#CCCCCC"> really</font><font color="#E5E5E5"> good question</font>

1725
01:01:12,010 --> 01:01:17,380
<font color="#CCCCCC">so actually I reached</font><font color="#E5E5E5"> out to Microsoft</font>

1726
01:01:14,010 --> 01:01:21,400
six months ago<font color="#E5E5E5"> and gave them some early</font>

1727
01:01:17,380 --> 01:01:23,830
<font color="#CCCCCC">examples and said hey is there any talk</font>

1728
01:01:21,400 --> 01:01:25,600
<font color="#E5E5E5">of basically like the amazing level of</font>

1729
01:01:23,830 --> 01:01:26,830
logging<font color="#CCCCCC"> that the PowerShell team has</font>

1730
01:01:25,600 --> 01:01:28,299
added<font color="#CCCCCC"> to PowerShell it's just phenomenal</font>

1731
01:01:26,830 --> 01:01:30,220
module logging the script law

1732
01:01:28,300 --> 01:01:32,140
transcription so I said is there any

1733
01:01:30,220 --> 01:01:33,370
<font color="#CCCCCC">roadmap to get some of this</font><font color="#E5E5E5"> into command</font>

1734
01:01:32,140 --> 01:01:35,049
<font color="#CCCCCC">actually because all</font><font color="#E5E5E5"> these</font><font color="#CCCCCC"> things are</font>

1735
01:01:33,370 --> 01:01:38,170
<font color="#CCCCCC">happening in memory but</font><font color="#E5E5E5"> there's no</font>

1736
01:01:35,050 --> 01:01:39,610
visibility into<font color="#E5E5E5"> it I don't</font><font color="#CCCCCC"> know</font><font color="#E5E5E5"> that</font>

1737
01:01:38,170 --> 01:01:40,750
it's actually<font color="#CCCCCC"> on</font><font color="#E5E5E5"> on their</font><font color="#CCCCCC"> roadmap</font><font color="#E5E5E5"> or</font>

1738
01:01:39,610 --> 01:01:42,580
<font color="#E5E5E5">anything at that point</font><font color="#CCCCCC"> I couldn't hand</font>

1739
01:01:40,750 --> 01:01:43,990
over all<font color="#CCCCCC"> the research</font><font color="#E5E5E5"> and I basically</font>

1740
01:01:42,580 --> 01:01:45,310
<font color="#E5E5E5">gave several</font><font color="#CCCCCC"> examples and so there's a</font>

1741
01:01:43,990 --> 01:01:46,720
lot<font color="#CCCCCC"> of scenarios here in which they'll</font>

1742
01:01:45,310 --> 01:01:49,990
never spawn a child process<font color="#E5E5E5"> and</font>

1743
01:01:46,720 --> 01:01:53,290
defenders would really care to know<font color="#E5E5E5"> so I</font>

1744
01:01:49,990 --> 01:01:54,310
can't speak<font color="#E5E5E5"> for them</font><font color="#CCCCCC"> I don't know if</font>

1745
01:01:53,290 --> 01:01:58,240
there's any<font color="#E5E5E5"> additional work being done</font>

1746
01:01:54,310 --> 01:02:01,060
<font color="#E5E5E5">by them to D</font><font color="#CCCCCC"> obfuscate</font><font color="#E5E5E5"> for me</font><font color="#CCCCCC"> there's</font>

1747
01:01:58,240 --> 01:02:02,799
not any current work<font color="#E5E5E5"> so people</font><font color="#CCCCCC"> are still</font>

1748
01:02:01,060 --> 01:02:03,759
asking<font color="#CCCCCC"> me to build the obfuscators for</font>

1749
01:02:02,800 --> 01:02:08,440
invocation

1750
01:02:03,760 --> 01:02:10,660
<font color="#E5E5E5">which is not a public one as of yet</font>

1751
01:02:08,440 --> 01:02:13,240
<font color="#CCCCCC">I won't say whether there will be one or</font>

1752
01:02:10,660 --> 01:02:14,859
<font color="#CCCCCC">not but it's a it's a crazy hard</font>

1753
01:02:13,240 --> 01:02:16,569
<font color="#E5E5E5">undertaking to reverse all this stuff</font>

1754
01:02:14,859 --> 01:02:18,369
systematically and with<font color="#CCCCCC"> DA</font>

1755
01:02:16,569 --> 01:02:19,839
sophistication<font color="#E5E5E5"> they're like with</font>

1756
01:02:18,369 --> 01:02:21,880
<font color="#E5E5E5">PowerShell you at least are able</font><font color="#CCCCCC"> to use</font>

1757
01:02:19,839 --> 01:02:23,680
the dotnet tokenizer<font color="#E5E5E5"> as well as the</font>

1758
01:02:21,880 --> 01:02:25,089
abstract syntax tree to take this gnarly

1759
01:02:23,680 --> 01:02:26,710
office<font color="#CCCCCC"> gated a command and say alright</font>

1760
01:02:25,089 --> 01:02:28,299
show me<font color="#E5E5E5"> the array show me the</font><font color="#CCCCCC"> strings to</font>

1761
01:02:26,710 --> 01:02:30,510
kind of reassemble that stuff<font color="#E5E5E5"> there's</font>

1762
01:02:28,300 --> 01:02:32,490
nothing like that<font color="#CCCCCC"> for this so</font>

1763
01:02:30,510 --> 01:02:35,530
systematically at the office<font color="#CCCCCC"> gating it I</font>

1764
01:02:32,490 --> 01:02:37,750
can't think<font color="#CCCCCC"> of a way to do it with still</font>

1765
01:02:35,530 --> 01:02:39,970
maintaining my sanity<font color="#E5E5E5"> I'm sure some</font>

1766
01:02:37,750 --> 01:02:42,220
people<font color="#CCCCCC"> who are</font><font color="#E5E5E5"> like you know memory whiz</font>

1767
01:02:39,970 --> 01:02:45,459
<font color="#E5E5E5">people could potentially</font><font color="#CCCCCC"> find</font><font color="#E5E5E5"> some</font>

1768
01:02:42,220 --> 01:02:47,169
<font color="#E5E5E5">interesting ways</font><font color="#CCCCCC"> practically as</font>

1769
01:02:45,460 --> 01:02:50,410
defenders<font color="#E5E5E5"> if you see this kind of stuff</font>

1770
01:02:47,170 --> 01:02:52,420
<font color="#CCCCCC">run then my advice and definitely this</font>

1771
01:02:50,410 --> 01:02:53,770
<font color="#CCCCCC">is a VM because</font><font color="#E5E5E5"> there if if you're a</font>

1772
01:02:52,420 --> 01:02:55,450
savvy attacker you can<font color="#CCCCCC"> actually make</font>

1773
01:02:53,770 --> 01:02:56,530
this backfire<font color="#CCCCCC"> for defenders but</font>

1774
01:02:55,450 --> 01:02:58,569
basically after<font color="#E5E5E5"> we do all</font><font color="#CCCCCC"> this crazy</font>

1775
01:02:56,530 --> 01:03:00,760
<font color="#E5E5E5">stuff</font><font color="#CCCCCC"> we still</font><font color="#E5E5E5"> have to call the thing at</font>

1776
01:02:58,569 --> 01:03:01,990
the<font color="#CCCCCC"> end</font><font color="#E5E5E5"> right we still have to call</font><font color="#CCCCCC"> it's</font>

1777
01:03:00,760 --> 01:03:04,060
always setting it in a variable<font color="#E5E5E5"> and then</font>

1778
01:03:01,990 --> 01:03:05,020
<font color="#E5E5E5">calling</font><font color="#CCCCCC"> it or piping it into</font><font color="#E5E5E5"> standard</font>

1779
01:03:04,060 --> 01:03:08,020
input or something like<font color="#E5E5E5"> that so</font>

1780
01:03:05,020 --> 01:03:09,579
basically<font color="#E5E5E5"> in a VM take the office gated</font>

1781
01:03:08,020 --> 01:03:11,680
command and just changed that<font color="#E5E5E5"> call to an</font>

1782
01:03:09,579 --> 01:03:13,210
echo<font color="#E5E5E5"> or if it's echoing the thing into</font>

1783
01:03:11,680 --> 01:03:14,710
command<font color="#E5E5E5"> just remove the pipe command and</font>

1784
01:03:13,210 --> 01:03:16,569
yours<font color="#E5E5E5"> echoing</font><font color="#CCCCCC"> a standard output the</font>

1785
01:03:14,710 --> 01:03:18,430
result<font color="#E5E5E5"> but again do it in the VM because</font>

1786
01:03:16,569 --> 01:03:19,960
if the attacker has creative options<font color="#E5E5E5"> in</font>

1787
01:03:18,430 --> 01:03:21,190
here then even<font color="#CCCCCC"> just echoing it could</font>

1788
01:03:19,960 --> 01:03:24,460
actually pipe stuff into<font color="#CCCCCC"> other things</font>

1789
01:03:21,190 --> 01:03:25,569
<font color="#CCCCCC">and execute</font><font color="#E5E5E5"> it without you knowing it so</font>

1790
01:03:24,460 --> 01:03:26,770
yeah I<font color="#CCCCCC"> think I'm at time</font><font color="#E5E5E5"> on to be</font>

1791
01:03:25,569 --> 01:03:28,690
<font color="#CCCCCC">respectful</font><font color="#E5E5E5"> the next speakers time</font><font color="#CCCCCC"> but</font>

1792
01:03:26,770 --> 01:03:30,730
please<font color="#E5E5E5"> I'll be around all day so please</font>

1793
01:03:28,690 --> 01:03:32,050
<font color="#E5E5E5">come find me to say hello and really</font>

1794
01:03:30,730 --> 01:03:34,270
this<font color="#E5E5E5"> is my first half in the</font><font color="#CCCCCC"> box</font><font color="#E5E5E5"> first</font>

1795
01:03:32,050 --> 01:03:35,530
time in Amsterdam<font color="#E5E5E5"> been really</font><font color="#CCCCCC"> awesome</font>

1796
01:03:34,270 --> 01:03:37,450
and looking<font color="#E5E5E5"> forward to meeting you all</font>

1797
01:03:35,530 --> 01:03:39,660
<font color="#E5E5E5">so thank you very much what applause</font>

1798
01:03:37,450 --> 01:03:39,660
guys

