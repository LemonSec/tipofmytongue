1
00:00:12,590 --> 00:00:18,390
hello everyone<font color="#E5E5E5"> I'm going to speak about</font>

2
00:00:15,630 --> 00:00:19,650
fuzzing<font color="#E5E5E5"> JavaScript engines for fun and</font>

3
00:00:18,390 --> 00:00:23,010
<font color="#CCCCCC">profit</font>

4
00:00:19,650 --> 00:00:25,799
this talk<font color="#CCCCCC"> is gonna be about how me and</font>

5
00:00:23,010 --> 00:00:28,470
<font color="#E5E5E5">my colleague tried to false teach our</font>

6
00:00:25,800 --> 00:00:30,900
<font color="#CCCCCC">scrap engines in a different way</font><font color="#E5E5E5"> we</font>

7
00:00:28,470 --> 00:00:33,750
tried a<font color="#E5E5E5"> new approach but it might</font><font color="#CCCCCC"> not</font><font color="#E5E5E5"> be</font>

8
00:00:30,900 --> 00:00:37,620
perfect<font color="#CCCCCC"> and</font><font color="#E5E5E5"> you might think</font><font color="#CCCCCC"> that it's</font>

9
00:00:33,750 --> 00:00:40,079
<font color="#E5E5E5">kind of abstract but yeah please listen</font>

10
00:00:37,620 --> 00:00:43,500
carefully<font color="#CCCCCC"> yeah</font>

11
00:00:40,079 --> 00:00:46,500
before I start<font color="#E5E5E5"> my speech I'm going to</font>

12
00:00:43,500 --> 00:00:49,370
introduce<font color="#CCCCCC"> myself and my colleague my</font>

13
00:00:46,500 --> 00:00:52,620
name is<font color="#CCCCCC"> Adam Lee and a member of</font><font color="#E5E5E5"> a</font>

14
00:00:49,370 --> 00:00:55,140
hacking group in Korea named SSG<font color="#E5E5E5"> and I'm</font>

15
00:00:52,620 --> 00:00:58,949
still an undergrad student<font color="#CCCCCC"> in Sejong</font>

16
00:00:55,140 --> 00:01:01,680
University and I've worked as<font color="#CCCCCC"> the intern</font>

17
00:00:58,949 --> 00:01:04,649
at 49 headquarters in Sunnyvale<font color="#E5E5E5"> last</font>

18
00:01:01,680 --> 00:01:07,560
year and I'm an alumnus<font color="#CCCCCC"> of b.o.b which</font>

19
00:01:04,650 --> 00:01:09,799
is Korea's<font color="#E5E5E5"> next generation security</font>

20
00:01:07,560 --> 00:01:12,360
experts<font color="#E5E5E5"> educational program and</font>

21
00:01:09,799 --> 00:01:15,990
<font color="#E5E5E5">currently I'm working</font><font color="#CCCCCC"> as a security</font>

22
00:01:12,360 --> 00:01:19,860
<font color="#CCCCCC">consultant in a company which</font><font color="#E5E5E5"> I prefer</font>

23
00:01:15,990 --> 00:01:22,830
<font color="#E5E5E5">not to name at this moment and this is</font>

24
00:01:19,860 --> 00:01:26,549
my colleague he is sitting<font color="#CCCCCC"> down</font><font color="#E5E5E5"> there</font>

25
00:01:22,830 --> 00:01:28,500
while I<font color="#CCCCCC"> present here</font><font color="#E5E5E5"> and he is</font><font color="#CCCCCC"> also a</font>

26
00:01:26,549 --> 00:01:31,079
<font color="#E5E5E5">member of the same hacking group I</font>

27
00:01:28,500 --> 00:01:34,259
belong to and he<font color="#E5E5E5"> is working as a</font>

28
00:01:31,079 --> 00:01:37,169
researcher at a company named<font color="#E5E5E5"> theory he</font>

29
00:01:34,259 --> 00:01:41,579
was my mentor when<font color="#CCCCCC"> I was part of the POV</font>

30
00:01:37,170 --> 00:01:45,960
<font color="#E5E5E5">program and he proudly says that he's a</font>

31
00:01:41,579 --> 00:01:49,139
<font color="#CCCCCC">full-time daddy</font><font color="#E5E5E5"> so yeah we're going to</font>

32
00:01:45,960 --> 00:01:51,270
present<font color="#CCCCCC"> about what we did in this order</font>

33
00:01:49,140 --> 00:01:54,659
<font color="#CCCCCC">so we're going to</font><font color="#E5E5E5"> give an overview about</font>

34
00:01:51,270 --> 00:01:58,520
<font color="#CCCCCC">what</font><font color="#E5E5E5"> we</font><font color="#CCCCCC"> aim to</font><font color="#E5E5E5"> do and how we did it</font><font color="#CCCCCC"> and</font>

35
00:01:54,659 --> 00:02:02,700
then give<font color="#E5E5E5"> specifics about our</font><font color="#CCCCCC"> father</font>

36
00:01:58,520 --> 00:02:04,770
<font color="#CCCCCC">describe each part in detail and then</font>

37
00:02:02,700 --> 00:02:09,509
give a conclusion<font color="#CCCCCC"> and then end the</font>

38
00:02:04,770 --> 00:02:12,290
presentation<font color="#E5E5E5"> so to start this is what we</font>

39
00:02:09,508 --> 00:02:13,559
<font color="#CCCCCC">use to do what we wanted to</font><font color="#E5E5E5"> do was find</font>

40
00:02:12,290 --> 00:02:17,000
<font color="#CCCCCC">vulnerabilities</font>

41
00:02:13,560 --> 00:02:20,100
in browser JavaScript engines such as v8

42
00:02:17,000 --> 00:02:23,010
JavaScript core chakracore<font color="#CCCCCC"> spidermonkey</font>

43
00:02:20,100 --> 00:02:24,000
and for doing<font color="#E5E5E5"> this we wanted</font><font color="#CCCCCC"> to utilize</font>

44
00:02:23,010 --> 00:02:28,859
the<font color="#E5E5E5"> father</font>

45
00:02:24,000 --> 00:02:31,620
so um<font color="#E5E5E5"> why father and why browser why</font>

46
00:02:28,860 --> 00:02:35,310
<font color="#CCCCCC">JavaScript</font><font color="#E5E5E5"> so we prepared the answers</font>

47
00:02:31,620 --> 00:02:38,220
for<font color="#E5E5E5"> that we decided</font><font color="#CCCCCC"> to target browsers</font>

48
00:02:35,310 --> 00:02:40,470
because<font color="#E5E5E5"> everyone uses browsers so if a</font>

49
00:02:38,220 --> 00:02:43,020
browser is vulnerable<font color="#E5E5E5"> a lot of people</font>

50
00:02:40,470 --> 00:02:45,450
are prone to<font color="#E5E5E5"> attacks users like normal</font>

51
00:02:43,020 --> 00:02:48,840
users can be affected by malware or any

52
00:02:45,450 --> 00:02:51,119
kind of<font color="#E5E5E5"> other things</font><font color="#CCCCCC"> without their</font>

53
00:02:48,840 --> 00:02:53,400
<font color="#CCCCCC">knowledge and give the attacker control</font>

54
00:02:51,120 --> 00:02:57,390
over their machines<font color="#E5E5E5"> and get ransomware</font>

55
00:02:53,400 --> 00:02:59,640
attacks<font color="#CCCCCC"> are sectoral</font><font color="#E5E5E5"> and web standards</font>

56
00:02:57,390 --> 00:03:01,950
are continuously being<font color="#CCCCCC"> updated</font><font color="#E5E5E5"> so</font><font color="#CCCCCC"> new</font>

57
00:02:59,640 --> 00:03:03,690
features are added<font color="#E5E5E5"> continuously so we</font>

58
00:03:01,950 --> 00:03:05,730
thought<font color="#E5E5E5"> if there</font><font color="#CCCCCC"> are</font><font color="#E5E5E5"> more changes</font><font color="#CCCCCC"> to</font>

59
00:03:03,690 --> 00:03:08,400
code<font color="#E5E5E5"> so aren't there going</font><font color="#CCCCCC"> to be more</font>

60
00:03:05,730 --> 00:03:10,260
<font color="#CCCCCC">chances</font><font color="#E5E5E5"> of bugs</font><font color="#CCCCCC"> and that's why we</font>

61
00:03:08,400 --> 00:03:13,739
thought that web browser<font color="#CCCCCC"> security is a</font>

62
00:03:10,260 --> 00:03:16,920
really important research area and<font color="#E5E5E5"> now</font>

63
00:03:13,739 --> 00:03:19,410
why<font color="#E5E5E5"> javascript we select the JavaScript</font>

64
00:03:16,920 --> 00:03:22,350
as our<font color="#E5E5E5"> target because javascript is</font>

65
00:03:19,410 --> 00:03:25,620
comparatively easier to exploit<font color="#CCCCCC"> than</font>

66
00:03:22,350 --> 00:03:29,459
<font color="#CCCCCC">dome objects so this is an example</font><font color="#E5E5E5"> of a</font>

67
00:03:25,620 --> 00:03:32,519
<font color="#CCCCCC">dome bug</font><font color="#E5E5E5"> I can't see what is wrong here</font>

68
00:03:29,459 --> 00:03:35,549
<font color="#E5E5E5">personally</font><font color="#CCCCCC"> and what you see here below</font>

69
00:03:32,519 --> 00:03:38,660
<font color="#E5E5E5">is a screenshot from</font><font color="#CCCCCC"> the comments made</font>

70
00:03:35,549 --> 00:03:41,280
<font color="#CCCCCC">by various</font><font color="#E5E5E5"> researchers</font><font color="#CCCCCC"> they were</font>

71
00:03:38,660 --> 00:03:43,680
debating<font color="#E5E5E5"> about what the problem and this</font>

72
00:03:41,280 --> 00:03:45,840
don't bug could be but they couldn't

73
00:03:43,680 --> 00:03:47,850
find<font color="#E5E5E5"> out and if you see here you</font><font color="#CCCCCC"> can</font>

74
00:03:45,840 --> 00:03:49,590
know that<font color="#CCCCCC"> they just say</font><font color="#E5E5E5"> if you can't</font>

75
00:03:47,850 --> 00:03:51,480
figure out<font color="#E5E5E5"> the cause here then let's</font>

76
00:03:49,590 --> 00:03:54,090
just change the<font color="#CCCCCC"> security check to a</font>

77
00:03:51,480 --> 00:03:57,480
check they just<font color="#E5E5E5"> close this issue and</font>

78
00:03:54,090 --> 00:04:00,000
then that was<font color="#E5E5E5"> it so from this you know</font>

79
00:03:57,480 --> 00:04:03,630
<font color="#CCCCCC">that javascript is</font><font color="#E5E5E5"> comparatively easier</font>

80
00:04:00,000 --> 00:04:06,390
to exploit than<font color="#E5E5E5"> some objects and other</font>

81
00:04:03,630 --> 00:04:09,690
<font color="#E5E5E5">reasons are the documentation of ACMA</font>

82
00:04:06,390 --> 00:04:12,899
script is<font color="#E5E5E5"> really well maintained Xmas</font>

83
00:04:09,690 --> 00:04:14,790
<font color="#E5E5E5">crib is the standard for JavaScript so</font>

84
00:04:12,900 --> 00:04:16,918
if that is<font color="#E5E5E5"> really well maintained</font><font color="#CCCCCC"> you</font>

85
00:04:14,790 --> 00:04:18,510
can refer to<font color="#E5E5E5"> it whenever you want</font><font color="#CCCCCC"> if you</font>

86
00:04:16,918 --> 00:04:20,548
can't understand anything in the

87
00:04:18,510 --> 00:04:24,480
JavaScript code<font color="#CCCCCC"> and it's really easy to</font>

88
00:04:20,548 --> 00:04:27,179
refer<font color="#E5E5E5"> to and moreover</font><font color="#CCCCCC"> if is</font>

89
00:04:24,480 --> 00:04:30,060
is found it<font color="#CCCCCC"> will work on</font><font color="#E5E5E5"> similar GS</font>

90
00:04:27,180 --> 00:04:32,550
engine versions like if you<font color="#E5E5E5"> find a bug</font>

91
00:04:30,060 --> 00:04:35,160
in the<font color="#E5E5E5"> WebKit</font><font color="#CCCCCC"> it will</font><font color="#E5E5E5"> work in Safari</font>

92
00:04:32,550 --> 00:04:37,350
<font color="#E5E5E5">it'll work in</font><font color="#CCCCCC"> PlayStation</font><font color="#E5E5E5"> if it has the</font>

93
00:04:35,160 --> 00:04:42,090
similar<font color="#CCCCCC"> GS engine version then</font><font color="#E5E5E5"> it'll</font>

94
00:04:37,350 --> 00:04:45,180
<font color="#CCCCCC">work and then now why fuzzing</font><font color="#E5E5E5"> because it</font>

95
00:04:42,090 --> 00:04:47,460
saves time it creates many<font color="#CCCCCC"> pests cases</font>

96
00:04:45,180 --> 00:04:49,380
in a short time<font color="#CCCCCC"> you can</font><font color="#E5E5E5"> focus on other</font>

97
00:04:47,460 --> 00:04:50,969
word<font color="#E5E5E5"> you can play you can go party you</font>

98
00:04:49,380 --> 00:04:53,780
can do<font color="#CCCCCC"> anything</font><font color="#E5E5E5"> else while</font><font color="#CCCCCC"> the</font><font color="#E5E5E5"> computer</font>

99
00:04:50,970 --> 00:04:56,760
runs<font color="#E5E5E5"> defaulter so if you can't find bugs</font>

100
00:04:53,780 --> 00:04:58,950
and if<font color="#E5E5E5"> you can't find bugs by source</font>

101
00:04:56,760 --> 00:05:00,980
code<font color="#E5E5E5"> auditing you have somewhere else to</font>

102
00:04:58,950 --> 00:05:04,110
turn to

103
00:05:00,980 --> 00:05:06,930
that was these<font color="#CCCCCC"> were the reasons why we</font>

104
00:05:04,110 --> 00:05:08,700
<font color="#CCCCCC">selected our target as JavaScript web</font>

105
00:05:06,930 --> 00:05:12,480
browsers and why we<font color="#CCCCCC"> decided</font><font color="#E5E5E5"> to use</font>

106
00:05:08,700 --> 00:05:14,789
fuzzing and<font color="#E5E5E5"> this is how we did</font><font color="#CCCCCC"> it</font><font color="#E5E5E5"> we</font>

107
00:05:12,480 --> 00:05:17,250
<font color="#E5E5E5">decided to create something called which</font>

108
00:05:14,790 --> 00:05:19,010
<font color="#E5E5E5">something we call a javascript fuzzing</font>

109
00:05:17,250 --> 00:05:22,740
factory which is<font color="#E5E5E5"> basically a platform</font>

110
00:05:19,010 --> 00:05:25,950
<font color="#E5E5E5">for the fathers and the</font><font color="#CCCCCC"> father's will be</font>

111
00:05:22,740 --> 00:05:29,010
managed<font color="#E5E5E5"> the notes of the father's will</font>

112
00:05:25,950 --> 00:05:31,830
be managed<font color="#E5E5E5"> by using docker</font><font color="#CCCCCC"> and we will</font>

113
00:05:29,010 --> 00:05:36,030
make<font color="#E5E5E5"> our father</font><font color="#CCCCCC"> create test cases</font><font color="#E5E5E5"> based</font>

114
00:05:31,830 --> 00:05:37,770
on existing one-day cases so there's<font color="#E5E5E5"> an</font>

115
00:05:36,030 --> 00:05:41,219
ice cream there

116
00:05:37,770 --> 00:05:43,740
<font color="#CCCCCC">I drew it</font><font color="#E5E5E5"> just to explain this concept</font>

117
00:05:41,220 --> 00:05:46,470
<font color="#E5E5E5">you</font><font color="#CCCCCC"> can think of</font><font color="#E5E5E5"> that blue bow look up</font>

118
00:05:43,740 --> 00:05:49,980
as our<font color="#E5E5E5"> JavaScript fuzzing Factory and</font>

119
00:05:46,470 --> 00:05:53,100
the ice creams<font color="#E5E5E5"> as our docker notes and</font>

120
00:05:49,980 --> 00:05:58,470
the cherries on top as our<font color="#E5E5E5"> father's so</font>

121
00:05:53,100 --> 00:06:00,090
yeah<font color="#E5E5E5"> so and most importantly but because</font>

122
00:05:58,470 --> 00:06:04,290
we didn't<font color="#CCCCCC"> have much knowledge about</font>

123
00:06:00,090 --> 00:06:06,510
lexical analysis or compilers we decided

124
00:06:04,290 --> 00:06:09,030
that the test cases<font color="#CCCCCC"> don't</font><font color="#E5E5E5"> need to make</font>

125
00:06:06,510 --> 00:06:10,860
sense<font color="#E5E5E5"> as in the code doesn't need to</font>

126
00:06:09,030 --> 00:06:13,919
have<font color="#E5E5E5"> any meaning to it it</font><font color="#CCCCCC"> just needs to</font>

127
00:06:10,860 --> 00:06:17,340
<font color="#E5E5E5">create crashes so that's why we targeted</font>

128
00:06:13,920 --> 00:06:21,020
existing<font color="#CCCCCC"> aandhi cases</font><font color="#E5E5E5"> and here are the</font>

129
00:06:17,340 --> 00:06:24,960
characteristics<font color="#E5E5E5"> and environment of our</font>

130
00:06:21,020 --> 00:06:27,840
<font color="#E5E5E5">JavaScript fuzzing Factory we</font><font color="#CCCCCC"> use in</font>

131
00:06:24,960 --> 00:06:30,570
memory fuzzing<font color="#CCCCCC"> and for management as I</font>

132
00:06:27,840 --> 00:06:32,049
said before we<font color="#CCCCCC"> use D Tucker and</font><font color="#E5E5E5"> for</font>

133
00:06:30,570 --> 00:06:34,569
creation of test cases

134
00:06:32,050 --> 00:06:37,150
we used both mutation and generation

135
00:06:34,569 --> 00:06:39,699
mutation would be based on existing<font color="#E5E5E5"> one</font>

136
00:06:37,150 --> 00:06:43,080
days and generation would<font color="#E5E5E5"> be done by</font>

137
00:06:39,699 --> 00:06:46,150
using dictionaries<font color="#E5E5E5"> for JavaScript syntax</font>

138
00:06:43,080 --> 00:06:49,270
<font color="#CCCCCC">and for our environment</font><font color="#E5E5E5"> our fathoms our</font>

139
00:06:46,150 --> 00:06:54,729
server use the Amazon<font color="#CCCCCC"> ec2 service eight</font>

140
00:06:49,270 --> 00:06:58,109
gigabytes of RAM and<font color="#CCCCCC"> four CPU core</font><font color="#E5E5E5"> and</font>

141
00:06:54,729 --> 00:07:02,650
this<font color="#E5E5E5"> is our overall structure like as I</font>

142
00:06:58,110 --> 00:07:03,849
explained before I put it into a diagram

143
00:07:02,650 --> 00:07:05,948
<font color="#E5E5E5">here</font>

144
00:07:03,849 --> 00:07:09,550
<font color="#E5E5E5">that's our JavaScript floating Factory</font>

145
00:07:05,949 --> 00:07:12,789
it'll be it gets managed by a web

146
00:07:09,550 --> 00:07:15,219
<font color="#E5E5E5">interface and you can manage the Dockers</font>

147
00:07:12,789 --> 00:07:17,889
from that and the Dockers contain the

148
00:07:15,219 --> 00:07:20,530
nodes each node makes use of the<font color="#CCCCCC"> phaser</font>

149
00:07:17,889 --> 00:07:22,719
and there<font color="#E5E5E5"> you'll see weird names like</font>

150
00:07:20,530 --> 00:07:27,628
<font color="#CCCCCC">Paulo Benjamin but that's just the names</font>

151
00:07:22,719 --> 00:07:30,340
we gave to the mutation based generator

152
00:07:27,629 --> 00:07:32,740
yeah the mutation based father and the

153
00:07:30,340 --> 00:07:37,029
Benjamin would<font color="#E5E5E5"> be the generation based</font>

154
00:07:32,740 --> 00:07:39,940
<font color="#E5E5E5">buzzer so basically Bella generates test</font>

155
00:07:37,029 --> 00:07:42,880
cases by analyzing existing one days and

156
00:07:39,940 --> 00:07:46,569
Benjamin just generates new test cases

157
00:07:42,880 --> 00:07:48,969
<font color="#E5E5E5">and they would both test out those test</font>

158
00:07:46,569 --> 00:07:50,830
<font color="#CCCCCC">cases</font><font color="#E5E5E5"> in the</font><font color="#CCCCCC"> Jas engine it would be</font>

159
00:07:48,969 --> 00:07:52,870
monitored and if there's a crash<font color="#E5E5E5"> it will</font>

160
00:07:50,830 --> 00:07:56,080
be<font color="#E5E5E5"> collected in our trash collector</font>

161
00:07:52,870 --> 00:07:58,240
which would be later analyzed or

162
00:07:56,080 --> 00:08:02,770
anything<font color="#E5E5E5"> just in case you could report</font>

163
00:07:58,240 --> 00:08:04,919
and get some<font color="#E5E5E5"> more cash and we'll go into</font>

164
00:08:02,770 --> 00:08:07,210
details about<font color="#E5E5E5"> all these parts</font><font color="#CCCCCC"> right now</font>

165
00:08:04,919 --> 00:08:10,090
first we'll explain first<font color="#E5E5E5"> I'll explain</font>

166
00:08:07,210 --> 00:08:12,310
<font color="#E5E5E5">about the JavaScript fuzzing Factory as</font>

167
00:08:10,090 --> 00:08:16,508
I said it<font color="#E5E5E5"> has the management platform it</font>

168
00:08:12,310 --> 00:08:21,159
uses nodejs<font color="#CCCCCC"> API</font><font color="#E5E5E5"> to control the doctor</font>

169
00:08:16,509 --> 00:08:22,930
and the doctors contain the nodes the

170
00:08:21,159 --> 00:08:25,060
docker contains<font color="#E5E5E5"> the</font><font color="#CCCCCC"> nodes which have</font>

171
00:08:22,930 --> 00:08:30,490
<font color="#CCCCCC">CGAs engines and</font><font color="#E5E5E5"> if others running</font>

172
00:08:25,060 --> 00:08:33,219
<font color="#E5E5E5">inside it and our JavaScript fuzzing</font>

173
00:08:30,490 --> 00:08:38,620
factory uses in memory for things so we

174
00:08:33,219 --> 00:08:40,599
did this just<font color="#CCCCCC"> to save disk IO</font><font color="#E5E5E5"> we do this</font>

175
00:08:38,620 --> 00:08:42,220
by making<font color="#CCCCCC"> changes to the JavaScript</font>

176
00:08:40,599 --> 00:08:45,460
engine<font color="#E5E5E5"> code</font>

177
00:08:42,220 --> 00:08:47,680
if you see this<font color="#E5E5E5"> code here it is a</font>

178
00:08:45,460 --> 00:08:51,250
screenshot from<font color="#E5E5E5"> the actual JavaScript</font>

179
00:08:47,680 --> 00:08:53,800
engine code from JavaScript core there's

180
00:08:51,250 --> 00:08:56,710
a function named<font color="#CCCCCC"> fetch script</font><font color="#E5E5E5"> from local</font>

181
00:08:53,800 --> 00:08:59,079
file system<font color="#CCCCCC"> and if</font><font color="#E5E5E5"> you follow inside</font>

182
00:08:56,710 --> 00:09:01,180
this function<font color="#E5E5E5"> there's another one which</font>

183
00:08:59,080 --> 00:09:04,420
says fill buffer with contents of file

184
00:09:01,180 --> 00:09:07,180
<font color="#E5E5E5">and within it you see</font><font color="#CCCCCC"> that it has</font><font color="#E5E5E5"> every</font>

185
00:09:04,420 --> 00:09:11,140
through which it reads<font color="#CCCCCC"> tjs files GL</font>

186
00:09:07,180 --> 00:09:13,300
scripts which it uses<font color="#E5E5E5"> like if we throw</font>

187
00:09:11,140 --> 00:09:16,030
in our test cases it would use this

188
00:09:13,300 --> 00:09:19,810
function<font color="#E5E5E5"> to read our J's file and test</font>

189
00:09:16,030 --> 00:09:22,870
it out in<font color="#E5E5E5"> the engine</font><font color="#CCCCCC"> so every creates</font>

190
00:09:19,810 --> 00:09:25,030
<font color="#CCCCCC">the style so to reduce this we need to</font>

191
00:09:22,870 --> 00:09:27,640
make changes<font color="#CCCCCC"> to</font><font color="#E5E5E5"> code and we wanted</font><font color="#CCCCCC"> to do</font>

192
00:09:25,030 --> 00:09:31,089
this just because we wanted to<font color="#E5E5E5"> reduce</font>

193
00:09:27,640 --> 00:09:34,900
<font color="#E5E5E5">this IO we will see if our</font><font color="#CCCCCC"> disk</font><font color="#E5E5E5"> and it</font>

194
00:09:31,090 --> 00:09:38,410
<font color="#CCCCCC">would also save time</font><font color="#E5E5E5"> so this is what we</font>

195
00:09:34,900 --> 00:09:41,110
did<font color="#CCCCCC"> um the screen the code</font><font color="#E5E5E5"> above is the</font>

196
00:09:38,410 --> 00:09:44,770
<font color="#E5E5E5">original code and the code below is the</font>

197
00:09:41,110 --> 00:09:46,720
one we changed<font color="#E5E5E5"> in the place where that</font>

198
00:09:44,770 --> 00:09:50,140
fetch scripts from local file system

199
00:09:46,720 --> 00:09:55,600
function was we deleted<font color="#E5E5E5"> that function</font>

200
00:09:50,140 --> 00:09:59,230
right<font color="#E5E5E5"> and then added more lines which</font>

201
00:09:55,600 --> 00:10:04,000
would read the J's files<font color="#E5E5E5"> as standard</font>

202
00:09:59,230 --> 00:10:07,120
input<font color="#CCCCCC"> and then</font><font color="#E5E5E5"> we compared the</font><font color="#CCCCCC"> results</font>

203
00:10:04,000 --> 00:10:11,190
so the above picture is a screenshot

204
00:10:07,120 --> 00:10:14,560
<font color="#CCCCCC">from the</font><font color="#E5E5E5"> results of running the actual</font>

205
00:10:11,190 --> 00:10:17,740
<font color="#E5E5E5">original JavaScript engine code and</font><font color="#CCCCCC"> ye</font>

206
00:10:14,560 --> 00:10:21,640
below<font color="#CCCCCC"> one su</font><font color="#E5E5E5"> 1 which we edited and if</font>

207
00:10:17,740 --> 00:10:24,910
you see there the<font color="#E5E5E5"> three numbers at the</font>

208
00:10:21,640 --> 00:10:27,100
right<font color="#E5E5E5"> show the average disk</font><font color="#CCCCCC"> is</font><font color="#E5E5E5"> made</font>

209
00:10:24,910 --> 00:10:29,230
within<font color="#CCCCCC"> one minute five minutes and</font>

210
00:10:27,100 --> 00:10:32,430
<font color="#CCCCCC">fifteen</font><font color="#E5E5E5"> minutes respectively</font>

211
00:10:29,230 --> 00:10:39,670
and you can see that there<font color="#CCCCCC"> is</font>

212
00:10:32,430 --> 00:10:41,250
significantly less disk IO and now to

213
00:10:39,670 --> 00:10:43,839
<font color="#E5E5E5">explain our fathers</font>

214
00:10:41,250 --> 00:10:47,950
there's Bella<font color="#E5E5E5"> and Benjamin like I</font>

215
00:10:43,840 --> 00:10:51,430
explained<font color="#E5E5E5"> before so Bella is</font><font color="#CCCCCC"> the one</font>

216
00:10:47,950 --> 00:10:54,190
which<font color="#CCCCCC"> is mutation based we apply it will</font>

217
00:10:51,430 --> 00:10:54,520
apply mutations on<font color="#E5E5E5"> existing one days by</font>

218
00:10:54,190 --> 00:10:57,550
fine

219
00:10:54,520 --> 00:10:59,319
patterns from it and this was done

220
00:10:57,550 --> 00:11:02,290
because there are too many<font color="#CCCCCC"> pest cases</font>

221
00:10:59,320 --> 00:11:04,300
there<font color="#E5E5E5"> are too many cases</font><font color="#CCCCCC"> there and it's</font>

222
00:11:02,290 --> 00:11:06,550
really hard to<font color="#CCCCCC"> find the patterns from</font>

223
00:11:04,300 --> 00:11:10,000
existing one<font color="#E5E5E5"> days like all of them</font>

224
00:11:06,550 --> 00:11:12,939
you<font color="#E5E5E5"> can't analyze all the files so we</font>

225
00:11:10,000 --> 00:11:15,790
just selected some<font color="#CCCCCC"> of them and</font><font color="#E5E5E5"> we did</font>

226
00:11:12,940 --> 00:11:17,740
this by creating templates from some of

227
00:11:15,790 --> 00:11:21,610
the existing one days which we selected

228
00:11:17,740 --> 00:11:26,160
we selected those one<font color="#CCCCCC"> days based on the</font>

229
00:11:21,610 --> 00:11:31,150
number<font color="#CCCCCC"> of vulnerabilities</font><font color="#E5E5E5"> found recently</font>

230
00:11:26,160 --> 00:11:34,689
<font color="#E5E5E5">we</font><font color="#CCCCCC"> found that from optimization</font>

231
00:11:31,150 --> 00:11:37,300
there were some a lot of vulnerabilities

232
00:11:34,690 --> 00:11:41,230
recently so<font color="#CCCCCC"> we</font><font color="#E5E5E5"> selected some of them and</font>

233
00:11:37,300 --> 00:11:43,750
we<font color="#CCCCCC"> made</font><font color="#E5E5E5"> minimal changes to them to</font>

234
00:11:41,230 --> 00:11:45,970
create<font color="#E5E5E5"> random chance files and to do</font>

235
00:11:43,750 --> 00:11:49,150
this you can see there that<font color="#E5E5E5"> there's</font>

236
00:11:45,970 --> 00:11:53,320
something<font color="#E5E5E5"> called Lego it's just a naming</font>

237
00:11:49,150 --> 00:11:56,770
<font color="#E5E5E5">thing we did</font><font color="#CCCCCC"> it is our</font><font color="#E5E5E5"> approach to</font>

238
00:11:53,320 --> 00:12:00,640
creating the new<font color="#CCCCCC"> J's syntax</font><font color="#E5E5E5"> so it was a</font>

239
00:11:56,770 --> 00:12:02,740
<font color="#E5E5E5">named Lego fire I mean um if we create a</font>

240
00:12:00,640 --> 00:12:05,260
<font color="#E5E5E5">new TS syntax and make a new file so</font>

241
00:12:02,740 --> 00:12:08,320
that<font color="#CCCCCC"> it</font><font color="#E5E5E5"> would be a template for</font><font color="#CCCCCC"> the new</font>

242
00:12:05,260 --> 00:12:10,600
test cases<font color="#E5E5E5"> we would name that file as</font>

243
00:12:08,320 --> 00:12:13,780
Lego fire and that was that would be the

244
00:12:10,600 --> 00:12:17,410
name given<font color="#CCCCCC"> to</font><font color="#E5E5E5"> the templates so what we</font>

245
00:12:13,780 --> 00:12:19,660
did is<font color="#CCCCCC"> we parsed the one day pocs</font><font color="#E5E5E5"> for</font>

246
00:12:17,410 --> 00:12:21,780
making the<font color="#E5E5E5"> Lego file and from the Lego</font>

247
00:12:19,660 --> 00:12:25,709
file<font color="#CCCCCC"> we would create</font><font color="#E5E5E5"> new thing as files</font>

248
00:12:21,780 --> 00:12:29,220
<font color="#E5E5E5">the Lego files will have parts where</font>

249
00:12:25,710 --> 00:12:32,140
randomized parts would<font color="#CCCCCC"> be inserted</font><font color="#E5E5E5"> and</font>

250
00:12:29,220 --> 00:12:35,470
we excluded whatever was not important

251
00:12:32,140 --> 00:12:41,290
<font color="#E5E5E5">because we chose only one of only a few</font>

252
00:12:35,470 --> 00:12:44,230
<font color="#CCCCCC">one day files and next</font><font color="#E5E5E5"> is Benjamin which</font>

253
00:12:41,290 --> 00:12:48,969
is generation based we<font color="#E5E5E5"> did this by</font>

254
00:12:44,230 --> 00:12:51,220
making use of input<font color="#CCCCCC"> grammar</font><font color="#E5E5E5"> so this was</font>

255
00:12:48,970 --> 00:12:53,590
<font color="#E5E5E5">done by creating</font><font color="#CCCCCC"> Instagrammer by using</font>

256
00:12:51,220 --> 00:12:56,590
library we created libraries for

257
00:12:53,590 --> 00:13:03,310
<font color="#E5E5E5">separate aspects separate parts of the</font>

258
00:12:56,590 --> 00:13:05,470
<font color="#E5E5E5">J's file but we faced a problem that all</font>

259
00:13:03,310 --> 00:13:07,790
the test<font color="#CCCCCC"> cases we were generating had a</font>

260
00:13:05,470 --> 00:13:10,640
fixed form but

261
00:13:07,790 --> 00:13:14,709
we wanted<font color="#E5E5E5"> to do was randomization so to</font>

262
00:13:10,640 --> 00:13:18,110
solve<font color="#CCCCCC"> this</font><font color="#E5E5E5"> we decided to make api's and</font>

263
00:13:14,710 --> 00:13:22,610
this is just<font color="#E5E5E5"> an example</font><font color="#CCCCCC"> apart from the</font>

264
00:13:18,110 --> 00:13:25,460
<font color="#E5E5E5">API</font><font color="#CCCCCC"> so what we did</font><font color="#E5E5E5"> was</font><font color="#CCCCCC"> for every part</font><font color="#E5E5E5"> of</font>

265
00:13:22,610 --> 00:13:28,000
the GS file<font color="#E5E5E5"> for example</font><font color="#CCCCCC"> in the</font><font color="#E5E5E5"> J's code</font>

266
00:13:25,460 --> 00:13:31,250
you can find<font color="#CCCCCC"> for loops you can find</font>

267
00:13:28,000 --> 00:13:33,620
variable declarations<font color="#E5E5E5"> and whatever</font>

268
00:13:31,250 --> 00:13:36,620
<font color="#E5E5E5">whatever you would just generate</font>

269
00:13:33,620 --> 00:13:40,220
functions for<font color="#E5E5E5"> each of them and use it</font>

270
00:13:36,620 --> 00:13:44,480
like<font color="#E5E5E5"> an API this is an example and this</font>

271
00:13:40,220 --> 00:13:46,370
is how you use<font color="#CCCCCC"> it if you see here at</font><font color="#E5E5E5"> the</font>

272
00:13:44,480 --> 00:13:49,070
<font color="#CCCCCC">top it says fuzz</font>

273
00:13:46,370 --> 00:13:52,490
blah blah blah<font color="#CCCCCC"> there's a</font><font color="#E5E5E5"> function called</font>

274
00:13:49,070 --> 00:13:55,340
<font color="#CCCCCC">potential wah</font><font color="#E5E5E5"> which is just used to call</font>

275
00:13:52,490 --> 00:13:59,390
the<font color="#E5E5E5"> API and under that</font><font color="#CCCCCC"> you can see it</font>

276
00:13:55,340 --> 00:14:01,370
being used<font color="#CCCCCC"> in js4 set variable J a</font>

277
00:13:59,390 --> 00:14:03,980
<font color="#CCCCCC">scatter</font><font color="#E5E5E5"> or setter all of these are</font>

278
00:14:01,370 --> 00:14:10,070
<font color="#CCCCCC">declared in our API file and you just</font>

279
00:14:03,980 --> 00:14:12,830
call them to use it so if you make one

280
00:14:10,070 --> 00:14:17,390
<font color="#E5E5E5">file in such a way it would just</font>

281
00:14:12,830 --> 00:14:21,590
<font color="#E5E5E5">randomize</font><font color="#CCCCCC"> the new JS files in this form</font>

282
00:14:17,390 --> 00:14:25,490
so<font color="#CCCCCC"> it would just insert random things</font><font color="#E5E5E5"> it</font>

283
00:14:21,590 --> 00:14:26,990
<font color="#CCCCCC">would</font><font color="#E5E5E5"> have a fixed sequence like it will</font>

284
00:14:25,490 --> 00:14:30,950
have a for<font color="#CCCCCC"> loop if it's a set</font><font color="#E5E5E5"> of</font>

285
00:14:26,990 --> 00:14:35,140
variable and in turn<font color="#E5E5E5"> but all the little</font>

286
00:14:30,950 --> 00:14:40,600
<font color="#E5E5E5">parts in it will be randomized and</font>

287
00:14:35,140 --> 00:14:43,340
lastly is our a crash collector<font color="#E5E5E5"> it uses</font>

288
00:14:40,600 --> 00:14:46,910
<font color="#CCCCCC">regular expression to</font><font color="#E5E5E5"> collect the</font>

289
00:14:43,340 --> 00:14:51,590
crashes so<font color="#E5E5E5"> this is an example of what we</font>

290
00:14:46,910 --> 00:14:55,219
used a checks if<font color="#CCCCCC"> the register</font><font color="#E5E5E5"> is null or</font>

291
00:14:51,590 --> 00:14:57,980
<font color="#CCCCCC">not</font><font color="#E5E5E5"> and if it is it just throws</font><font color="#CCCCCC"> it</font>

292
00:14:55,220 --> 00:15:01,850
already says no let's<font color="#CCCCCC"> just not keep this</font>

293
00:14:57,980 --> 00:15:04,190
and if it is it keeps it and if there is

294
00:15:01,850 --> 00:15:07,490
no register it will just classify<font color="#CCCCCC"> it as</font>

295
00:15:04,190 --> 00:15:09,290
unknown<font color="#E5E5E5"> and keep it in our trash</font>

296
00:15:07,490 --> 00:15:12,680
<font color="#CCCCCC">collector</font><font color="#E5E5E5"> so basically there are three</font>

297
00:15:09,290 --> 00:15:15,319
<font color="#CCCCCC">types</font><font color="#E5E5E5"> of classifications</font><font color="#CCCCCC"> one there's no</font>

298
00:15:12,680 --> 00:15:18,469
register second there is a register but

299
00:15:15,320 --> 00:15:19,610
it has no<font color="#E5E5E5"> value third it has some kind</font>

300
00:15:18,470 --> 00:15:22,460
<font color="#E5E5E5">of</font><font color="#CCCCCC"> value and</font><font color="#E5E5E5"> that</font>

301
00:15:19,610 --> 00:15:25,490
so in this picture<font color="#E5E5E5"> you</font><font color="#CCCCCC"> can see that</font>

302
00:15:22,460 --> 00:15:28,070
<font color="#CCCCCC">there's a register</font><font color="#E5E5E5"> EAX and there's</font>

303
00:15:25,490 --> 00:15:33,470
nothing in it so it's basically<font color="#CCCCCC"> no so it</font>

304
00:15:28,070 --> 00:15:36,910
would be classified<font color="#CCCCCC"> in that way and so</font>

305
00:15:33,470 --> 00:15:39,320
this is the overall structure<font color="#E5E5E5"> once again</font>

306
00:15:36,910 --> 00:15:41,360
if you could if you couldn't get it

307
00:15:39,320 --> 00:15:44,690
before<font color="#E5E5E5"> when I explained it</font><font color="#CCCCCC"> without</font>

308
00:15:41,360 --> 00:15:46,370
explaining the little parts in it this

309
00:15:44,690 --> 00:15:49,250
<font color="#E5E5E5">is the JavaScript floating factory</font>

310
00:15:46,370 --> 00:15:52,550
making<font color="#E5E5E5"> use of the web interface task</font>

311
00:15:49,250 --> 00:15:55,520
management and use this<font color="#E5E5E5"> our</font><font color="#CCCCCC"> talker</font><font color="#E5E5E5"> to</font>

312
00:15:52,550 --> 00:15:57,800
manage the nodes each node<font color="#E5E5E5"> has our</font>

313
00:15:55,520 --> 00:16:01,460
<font color="#CCCCCC">father and DJ s engine in it</font>

314
00:15:57,800 --> 00:16:04,609
the father contains Bella<font color="#E5E5E5"> and Benjamin</font>

315
00:16:01,460 --> 00:16:08,570
Bella<font color="#E5E5E5"> contain Bella generates test cases</font>

316
00:16:04,610 --> 00:16:11,570
based on mutation<font color="#CCCCCC"> benjamin creates test</font>

317
00:16:08,570 --> 00:16:15,680
cases based on generation both are

318
00:16:11,570 --> 00:16:17,990
thrown into the<font color="#CCCCCC"> JS engine they are</font>

319
00:16:15,680 --> 00:16:19,640
monitored and if there's a crash<font color="#CCCCCC"> it is</font>

320
00:16:17,990 --> 00:16:24,830
collected in the crash collector<font color="#CCCCCC"> based</font>

321
00:16:19,640 --> 00:16:27,670
on our v6 pattern so back to the<font color="#E5E5E5"> point</font>

322
00:16:24,830 --> 00:16:31,730
it's like<font color="#CCCCCC"> an ask</font><font color="#E5E5E5"> ice cream sundae JFS</font>

323
00:16:27,670 --> 00:16:36,050
inside it the doctor notes and on it the

324
00:16:31,730 --> 00:16:38,480
father and<font color="#E5E5E5"> our chase engine and to show</font>

325
00:16:36,050 --> 00:16:42,020
the results<font color="#E5E5E5"> this is one of the results</font>

326
00:16:38,480 --> 00:16:43,730
<font color="#CCCCCC">we had it was a crash produced by using</font>

327
00:16:42,020 --> 00:16:46,750
Benjamin<font color="#E5E5E5"> which is the one which</font>

328
00:16:43,730 --> 00:16:49,730
generates<font color="#E5E5E5"> test cases based on generation</font>

329
00:16:46,750 --> 00:16:55,340
<font color="#CCCCCC">our target for</font><font color="#E5E5E5"> this was</font><font color="#CCCCCC"> safari</font>

330
00:16:49,730 --> 00:16:57,800
javascriptcore<font color="#E5E5E5"> and this one occurred due</font>

331
00:16:55,340 --> 00:17:00,860
to a heap overflow<font color="#CCCCCC"> heap buffer overflow</font>

332
00:16:57,800 --> 00:17:04,609
in the web assembly while parsing<font color="#E5E5E5"> the</font>

333
00:17:00,860 --> 00:17:07,849
section headers<font color="#E5E5E5"> and now</font><font color="#CCCCCC"> i'm going</font><font color="#E5E5E5"> to</font>

334
00:17:04,609 --> 00:17:10,659
<font color="#CCCCCC">show you oh no before that i'm going</font><font color="#E5E5E5"> to</font>

335
00:17:07,849 --> 00:17:10,659
show you this crash

336
00:17:18,040 --> 00:17:34,909
<font color="#E5E5E5">okay not</font><font color="#CCCCCC"> I was a test</font><font color="#E5E5E5"> I'm not sure if</font>

337
00:17:26,660 --> 00:17:39,110
everyone<font color="#E5E5E5"> can see it clearly huh yeah</font><font color="#CCCCCC"> so</font>

338
00:17:34,910 --> 00:17:43,030
this terminal is already set to<font color="#E5E5E5"> the</font>

339
00:17:39,110 --> 00:17:47,178
directory in my desktop<font color="#CCCCCC"> just for this</font>

340
00:17:43,030 --> 00:17:50,389
conference<font color="#CCCCCC"> this</font><font color="#E5E5E5"> is the latest</font><font color="#CCCCCC"> version of</font>

341
00:17:47,179 --> 00:17:52,790
<font color="#E5E5E5">Safari</font><font color="#CCCCCC"> and I'm just going to show you a</font>

342
00:17:50,390 --> 00:17:54,940
demo of<font color="#E5E5E5"> the trash we found which</font>

343
00:17:52,790 --> 00:17:58,909
<font color="#CCCCCC">explained right</font><font color="#E5E5E5"> now which was found by</font>

344
00:17:54,940 --> 00:18:00,040
using the test cases generated by

345
00:17:58,910 --> 00:18:10,730
Benjamin

346
00:18:00,040 --> 00:18:15,980
so yeah<font color="#CCCCCC"> just run</font><font color="#E5E5E5"> the PLC file and you</font>

347
00:18:10,730 --> 00:18:25,160
can<font color="#CCCCCC"> see it occurring yes that was the</font>

348
00:18:15,980 --> 00:18:29,710
demo<font color="#E5E5E5"> of the crash we found and then</font>

349
00:18:25,160 --> 00:18:29,710
we'll show<font color="#CCCCCC"> you a demo of our</font><font color="#E5E5E5"> father</font>

350
00:18:41,770 --> 00:18:48,309
um okay<font color="#CCCCCC"> I can't</font>

351
00:18:57,260 --> 00:19:03,559
<font color="#E5E5E5">okay so this is our web management</font>

352
00:19:01,280 --> 00:19:17,120
<font color="#E5E5E5">platform for our</font><font color="#CCCCCC"> JavaScript</font><font color="#E5E5E5"> fuzzing</font>

353
00:19:03,559 --> 00:19:18,889
<font color="#E5E5E5">Factory hmm yeah</font>

354
00:19:17,120 --> 00:19:20,840
once you log in<font color="#CCCCCC"> this is what you see</font>

355
00:19:18,890 --> 00:19:27,140
<font color="#CCCCCC">nevermind</font><font color="#E5E5E5"> the UI were not really good</font>

356
00:19:20,840 --> 00:19:34,389
designers so you click<font color="#E5E5E5"> Add host enter</font>

357
00:19:27,140 --> 00:19:45,230
the<font color="#CCCCCC"> hostname mm let's say</font><font color="#E5E5E5"> it be demo</font>

358
00:19:34,390 --> 00:19:47,600
host IP address was<font color="#E5E5E5"> okay and here you</font>

359
00:19:45,230 --> 00:19:49,880
need to<font color="#CCCCCC"> enter the root password because</font>

360
00:19:47,600 --> 00:19:55,750
<font color="#E5E5E5">the doctor needs it to configure your</font>

361
00:19:49,880 --> 00:19:55,750
containers and please don't access it

362
00:19:59,380 --> 00:20:03,340
<font color="#E5E5E5">okay it's taking time</font>

363
00:20:13,430 --> 00:20:25,870
ah<font color="#CCCCCC"> did I do</font><font color="#E5E5E5"> something wrong or is it</font>

364
00:20:23,330 --> 00:20:25,870
<font color="#CCCCCC">just low</font>

365
00:20:31,690 --> 00:20:35,490
<font color="#E5E5E5">okay let's just</font><font color="#CCCCCC"> do it again</font>

366
00:21:04,640 --> 00:21:11,130
huh there it is<font color="#CCCCCC"> you can see that the</font>

367
00:21:08,250 --> 00:21:15,210
host<font color="#E5E5E5"> has</font><font color="#CCCCCC"> been added</font><font color="#E5E5E5"> and if you click on</font>

368
00:21:11,130 --> 00:21:18,290
<font color="#E5E5E5">it you can see</font><font color="#CCCCCC"> it'll</font><font color="#E5E5E5"> show your</font>

369
00:21:15,210 --> 00:21:22,820
containers your buzzers and<font color="#CCCCCC"> the images</font>

370
00:21:18,290 --> 00:21:22,820
<font color="#E5E5E5">and now I'm going to add the buzzer</font>

371
00:21:39,180 --> 00:21:53,220
hopefully I'm<font color="#CCCCCC"> not making any typos okay</font>

372
00:21:57,450 --> 00:22:02,980
click on<font color="#E5E5E5"> add buzzer and you can see that</font>

373
00:22:00,220 --> 00:22:12,730
it's<font color="#E5E5E5"> been</font><font color="#CCCCCC"> added</font><font color="#E5E5E5"> now</font><font color="#CCCCCC"> we will add our</font>

374
00:22:02,980 --> 00:22:14,280
container<font color="#CCCCCC"> mmm</font><font color="#E5E5E5"> we'll set our target to</font>

375
00:22:12,730 --> 00:22:17,020
<font color="#E5E5E5">chakracore</font>

376
00:22:14,280 --> 00:22:19,300
the father's being selected if you

377
00:22:17,020 --> 00:22:22,510
because we want our container to run

378
00:22:19,300 --> 00:22:28,710
right away<font color="#E5E5E5"> we're gonna say yes and click</font>

379
00:22:22,510 --> 00:22:28,710
on<font color="#E5E5E5"> add container it takes a while</font>

380
00:22:39,210 --> 00:22:42,200
<font color="#E5E5E5">hmm</font>

381
00:22:45,350 --> 00:22:54,139
<font color="#CCCCCC">okay</font><font color="#E5E5E5"> you can see that</font><font color="#CCCCCC"> it's been added</font>

382
00:22:47,419 --> 00:23:01,029
and it's running<font color="#E5E5E5"> if you click on stop</font>

383
00:22:54,139 --> 00:23:01,029
<font color="#CCCCCC">it'll stop</font><font color="#E5E5E5"> running and you can resume it</font>

384
00:23:01,659 --> 00:23:15,139
hmm yeah<font color="#E5E5E5"> this is all this is the demo of</font>

385
00:23:05,690 --> 00:23:19,850
our<font color="#E5E5E5"> Father and back to</font><font color="#CCCCCC"> back to</font><font color="#E5E5E5"> the</font>

386
00:23:15,139 --> 00:23:22,789
<font color="#E5E5E5">presentation okay</font>

387
00:23:19,850 --> 00:23:25,939
<font color="#CCCCCC">we're as you can see were still far from</font>

388
00:23:22,789 --> 00:23:29,049
perfect<font color="#CCCCCC"> we're</font><font color="#E5E5E5"> not perfect</font>

389
00:23:25,940 --> 00:23:32,690
we need good code coverage and because

390
00:23:29,049 --> 00:23:35,690
<font color="#CCCCCC">jmf is small and scale compared to the</font>

391
00:23:32,690 --> 00:23:40,399
<font color="#CCCCCC">server's</font><font color="#E5E5E5"> using</font><font color="#CCCCCC"> B being used in other big</font>

392
00:23:35,690 --> 00:23:42,620
<font color="#E5E5E5">companies</font><font color="#CCCCCC"> it has limitations and there</font>

393
00:23:40,399 --> 00:23:44,600
are limitations<font color="#CCCCCC"> to creating different</font>

394
00:23:42,620 --> 00:23:46,699
<font color="#CCCCCC">types of T as templates because</font><font color="#E5E5E5"> as</font>

395
00:23:44,600 --> 00:23:51,279
mentioned before while explaining

396
00:23:46,700 --> 00:23:56,179
Benjamin it<font color="#E5E5E5"> uses the sequence of the API</font>

397
00:23:51,279 --> 00:23:59,600
specified by a user so if one person

398
00:23:56,179 --> 00:24:02,330
codes for the the templates for the<font color="#E5E5E5"> API</font>

399
00:23:59,600 --> 00:24:03,949
then it<font color="#E5E5E5"> can be limited</font><font color="#CCCCCC"> because not</font>

400
00:24:02,330 --> 00:24:06,830
everyone<font color="#CCCCCC"> has different</font><font color="#E5E5E5"> types of</font>

401
00:24:03,950 --> 00:24:09,620
imaginations or kind of patterns they

402
00:24:06,830 --> 00:24:12,649
would like<font color="#CCCCCC"> to</font><font color="#E5E5E5"> use in generating</font><font color="#CCCCCC"> gujiya</font>

403
00:24:09,620 --> 00:24:15,559
syntax<font color="#E5E5E5"> so the sequence of the API usage</font>

404
00:24:12,649 --> 00:24:19,658
may be limited and we<font color="#E5E5E5"> also have a few</font>

405
00:24:15,559 --> 00:24:25,549
<font color="#E5E5E5">minor</font><font color="#CCCCCC"> bots which we still need to</font><font color="#E5E5E5"> fix</font>

406
00:24:19,659 --> 00:24:28,009
<font color="#CCCCCC">and for our future</font><font color="#E5E5E5"> plans we think we can</font>

407
00:24:25,549 --> 00:24:31,190
we will we<font color="#CCCCCC"> are going</font><font color="#E5E5E5"> to keep track of</font>

408
00:24:28,009 --> 00:24:33,830
the ACMA script updates because as we

409
00:24:31,190 --> 00:24:35,990
said ACMA script is<font color="#CCCCCC"> the standard for</font>

410
00:24:33,830 --> 00:24:38,029
<font color="#CCCCCC">javascript so if there are</font><font color="#E5E5E5"> changes to</font>

411
00:24:35,990 --> 00:24:42,799
<font color="#E5E5E5">the ACMA script code there will be</font>

412
00:24:38,029 --> 00:24:44,899
changes to<font color="#CCCCCC"> the</font><font color="#E5E5E5"> GS engine</font><font color="#CCCCCC"> too so we're</font>

413
00:24:42,799 --> 00:24:47,889
going to<font color="#E5E5E5"> keep track</font><font color="#CCCCCC"> of them</font><font color="#E5E5E5"> and the ACMA</font>

414
00:24:44,899 --> 00:24:51,559
script updates<font color="#E5E5E5"> will be applied to our</font>

415
00:24:47,889 --> 00:24:54,379
<font color="#CCCCCC">father's so that it can be used</font><font color="#E5E5E5"> and we</font>

416
00:24:51,559 --> 00:24:56,960
hope<font color="#CCCCCC"> to enhance our JavaScript fuzzing</font>

417
00:24:54,379 --> 00:24:58,129
factory to support other vectors<font color="#CCCCCC"> other</font>

418
00:24:56,960 --> 00:25:04,720
than<font color="#CCCCCC"> Jas engine</font>

419
00:24:58,130 --> 00:25:07,760
such as graphics library or GPU<font color="#E5E5E5"> yeah</font>

420
00:25:04,720 --> 00:25:09,980
that is the<font color="#CCCCCC"> end of my presentation</font><font color="#E5E5E5"> and</font>

421
00:25:07,760 --> 00:25:21,070
<font color="#E5E5E5">if</font><font color="#CCCCCC"> you</font><font color="#E5E5E5"> have any questions I would be</font>

422
00:25:09,980 --> 00:25:21,070
happy<font color="#CCCCCC"> to</font><font color="#E5E5E5"> answer yes okay very specific</font>

423
00:25:21,400 --> 00:25:29,240
yes<font color="#CCCCCC"> so Cheers</font>

424
00:25:23,210 --> 00:25:33,680
so on<font color="#E5E5E5"> this light 26 you got a</font><font color="#CCCCCC"> crush from</font>

425
00:25:29,240 --> 00:25:36,470
<font color="#CCCCCC">MS HTML from</font><font color="#E5E5E5"> Dom does it mean that your</font>

426
00:25:33,680 --> 00:25:40,160
father is also fuzzing<font color="#CCCCCC"> JavaScript</font><font color="#E5E5E5"> that</font>

427
00:25:36,470 --> 00:25:43,720
contains Dom mutations<font color="#E5E5E5"> no no this</font>

428
00:25:40,160 --> 00:25:46,190
<font color="#E5E5E5">picture was just used to explain the</font>

429
00:25:43,720 --> 00:26:01,100
<font color="#CCCCCC">rejects which we use the pattern which</font>

430
00:25:46,190 --> 00:26:03,980
we use all right thank you<font color="#CCCCCC"> okay did you</font>

431
00:26:01,100 --> 00:26:07,550
base your<font color="#CCCCCC"> father's on anything or this</font>

432
00:26:03,980 --> 00:26:10,700
<font color="#CCCCCC">you're writing briefly from scratch can</font>

433
00:26:07,550 --> 00:26:13,730
you can see<font color="#CCCCCC"> that you did</font><font color="#E5E5E5"> you base your</font>

434
00:26:10,700 --> 00:26:15,500
father's on any<font color="#E5E5E5"> previous work or did you</font>

435
00:26:13,730 --> 00:26:21,920
completely<font color="#E5E5E5"> write them from scratch</font>

436
00:26:15,500 --> 00:26:29,900
herself<font color="#CCCCCC"> we</font><font color="#E5E5E5"> try to do it completely from</font>

437
00:26:21,920 --> 00:26:31,910
<font color="#E5E5E5">scratch just because there wasn't</font>

438
00:26:29,900 --> 00:26:36,950
<font color="#E5E5E5">anything else that they did or was there</font>

439
00:26:31,910 --> 00:26:41,630
another choice<font color="#CCCCCC"> oh no oh no we did</font>

440
00:26:36,950 --> 00:26:43,790
<font color="#CCCCCC">everything from</font><font color="#E5E5E5"> scratch but because we</font>

441
00:26:41,630 --> 00:26:47,360
<font color="#CCCCCC">made use of libraries</font><font color="#E5E5E5"> those libraries</font>

442
00:26:43,790 --> 00:26:51,170
could refer to<font color="#E5E5E5"> to reference to other</font>

443
00:26:47,360 --> 00:26:56,949
code<font color="#CCCCCC"> previously written by other</font>

444
00:26:51,170 --> 00:26:56,950
developers<font color="#E5E5E5"> thank you</font>

445
00:27:07,260 --> 00:27:15,210
how many exploitable vulnerabilities<font color="#CCCCCC"> you</font>

446
00:27:11,280 --> 00:27:19,560
have discovered<font color="#CCCCCC"> the PI of</font><font color="#E5E5E5"> other such as</font>

447
00:27:15,210 --> 00:27:25,020
<font color="#CCCCCC">checkered coat</font><font color="#E5E5E5"> okay we don't have that</font>

448
00:27:19,560 --> 00:27:26,550
many<font color="#E5E5E5"> but we have reported about</font><font color="#CCCCCC"> 10 and I</font>

449
00:27:25,020 --> 00:27:28,050
believe it was huge

450
00:27:26,550 --> 00:27:47,149
there were two chocolate court cases

451
00:27:28,050 --> 00:27:47,149
yeah<font color="#CCCCCC"> krome</font><font color="#E5E5E5"> yeah okay any other questions</font>

452
00:27:51,620 --> 00:28:05,370
do you get had a<font color="#E5E5E5"> sleaze savvy savvy save</font>

453
00:27:57,210 --> 00:28:14,760
a number<font color="#CCCCCC"> 30 number I didn't I didn't get</font>

454
00:28:05,370 --> 00:28:17,219
what<font color="#E5E5E5"> you say so he asked that how</font><font color="#CCCCCC"> many</font>

455
00:28:14,760 --> 00:28:23,070
exploitable<font color="#CCCCCC"> one event it is</font><font color="#E5E5E5"> how we found</font>

456
00:28:17,220 --> 00:28:26,730
<font color="#E5E5E5">so tell us</font><font color="#CCCCCC"> pry them to called</font><font color="#E5E5E5"> Scotian</font>

457
00:28:23,070 --> 00:28:28,679
remote code execution or some some<font color="#E5E5E5"> other</font>

458
00:28:26,730 --> 00:28:31,560
X is<font color="#E5E5E5"> a fact</font>

459
00:28:28,680 --> 00:28:35,130
could you explain<font color="#CCCCCC"> the effects of your</font>

460
00:28:31,560 --> 00:28:38,510
exploit<font color="#E5E5E5"> hole on a</font><font color="#CCCCCC"> Bailey</font><font color="#E5E5E5"> pace okay</font>

461
00:28:35,130 --> 00:28:52,770
<font color="#CCCCCC">example remotely codex cruise execution</font>

462
00:28:38,510 --> 00:28:57,330
okay okay okay can I call up my

463
00:28:52,770 --> 00:28:58,770
<font color="#E5E5E5">colleague who helped up Cody how</font>

464
00:28:57,330 --> 00:29:05,000
Christopher<font color="#E5E5E5"> I forward to putting</font>

465
00:28:58,770 --> 00:29:05,000
anything<font color="#CCCCCC"> on connect about</font><font color="#E5E5E5"> it could go on</font>

466
00:29:27,430 --> 00:29:38,060
<font color="#E5E5E5">okay</font><font color="#CCCCCC"> you were asking about</font><font color="#E5E5E5"> the impacts</font>

467
00:29:34,070 --> 00:29:40,669
<font color="#CCCCCC">of the</font><font color="#E5E5E5"> path reported by us yeah</font><font color="#CCCCCC"> impacts</font>

468
00:29:38,060 --> 00:29:49,700
<font color="#CCCCCC">elfia whenever it</font><font color="#E5E5E5"> is the path you found</font>

469
00:29:40,670 --> 00:29:54,160
okay -<font color="#E5E5E5"> two of our reporting's last year</font>

470
00:29:49,700 --> 00:29:58,340
were related<font color="#CCCCCC"> to our C</font><font color="#E5E5E5"> Remora more more</font>

471
00:29:54,160 --> 00:30:11,330
remote control execution<font color="#CCCCCC"> yeah yeah okay</font>

472
00:29:58,340 --> 00:30:14,780
<font color="#E5E5E5">thank you</font><font color="#CCCCCC"> is the faster available for</font>

473
00:30:11,330 --> 00:30:17,510
everybody<font color="#E5E5E5"> to</font><font color="#CCCCCC"> download or</font><font color="#E5E5E5"> yeah yes yes we</font>

474
00:30:14,780 --> 00:30:19,730
<font color="#E5E5E5">will</font><font color="#CCCCCC"> we will</font><font color="#E5E5E5"> make it available</font><font color="#CCCCCC"> for every</font>

475
00:30:17,510 --> 00:30:23,000
month but as I<font color="#CCCCCC"> said we have a few minor</font>

476
00:30:19,730 --> 00:30:26,690
bugs<font color="#E5E5E5"> so when those are fixed then it</font>

477
00:30:23,000 --> 00:30:28,810
will be<font color="#E5E5E5"> released on github I see thank</font>

478
00:30:26,690 --> 00:30:28,810
<font color="#CCCCCC">you</font>

479
00:30:39,620 --> 00:30:50,010
are there any more questions<font color="#CCCCCC"> he's got</font>

480
00:30:43,530 --> 00:30:52,649
one okay then I'd like<font color="#E5E5E5"> to</font><font color="#CCCCCC"> ask</font><font color="#E5E5E5"> for a big</font>

481
00:30:50,010 --> 00:30:57,299
<font color="#E5E5E5">round of applause for areum Lee</font>

482
00:30:52,650 --> 00:30:57,299
[Applause]

