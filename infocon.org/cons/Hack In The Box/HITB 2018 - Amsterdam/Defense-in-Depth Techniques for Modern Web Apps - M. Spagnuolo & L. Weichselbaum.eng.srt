1
00:00:12,590 --> 00:00:16,740
hello and welcome everyone<font color="#CCCCCC"> to our</font>

2
00:00:15,059 --> 00:00:18,619
<font color="#E5E5E5">presentation about</font><font color="#CCCCCC"> defense</font><font color="#E5E5E5"> in depth</font>

3
00:00:16,740 --> 00:00:21,720
techniques for<font color="#E5E5E5"> modern web</font><font color="#CCCCCC"> applications</font>

4
00:00:18,619 --> 00:00:24,170
<font color="#E5E5E5">there's a couple of really cool features</font>

5
00:00:21,720 --> 00:00:26,848
<font color="#CCCCCC">in the browser platform</font><font color="#E5E5E5"> that basically</font>

6
00:00:24,170 --> 00:00:30,179
<font color="#E5E5E5">support developers to build like a</font>

7
00:00:26,849 --> 00:00:32,910
safety<font color="#E5E5E5"> net in case that primary defense</font>

8
00:00:30,179 --> 00:00:34,980
mechanism fail and you know<font color="#E5E5E5"> especially</font>

9
00:00:32,910 --> 00:00:37,919
<font color="#E5E5E5">for</font><font color="#CCCCCC"> sensitive applications</font><font color="#E5E5E5"> like you know</font>

10
00:00:34,980 --> 00:00:41,669
<font color="#E5E5E5">Gmail or banking sites</font><font color="#CCCCCC"> you really want</font>

11
00:00:37,920 --> 00:00:44,120
to have some second layer of<font color="#E5E5E5"> defense in</font>

12
00:00:41,670 --> 00:00:46,890
case something went goes wrong right

13
00:00:44,120 --> 00:00:50,669
<font color="#CCCCCC">briefly</font><font color="#E5E5E5"> about us</font><font color="#CCCCCC"> this is Michaela</font><font color="#E5E5E5"> I'm</font>

14
00:00:46,890 --> 00:00:53,730
<font color="#E5E5E5">Lucas we both from Google Zurich</font>

15
00:00:50,670 --> 00:00:55,620
and yeah I think<font color="#CCCCCC"> is our third or</font><font color="#E5E5E5"> fourth</font>

16
00:00:53,730 --> 00:01:00,059
<font color="#CCCCCC">time here at</font><font color="#E5E5E5"> hack in the box</font><font color="#CCCCCC"> we're</font>

17
00:00:55,620 --> 00:01:01,468
always here<font color="#CCCCCC"> as super awesome and you're</font>

18
00:01:00,059 --> 00:01:04,768
<font color="#E5E5E5">basically working in a special focus</font>

19
00:01:01,469 --> 00:01:08,970
<font color="#E5E5E5">area at Google so we basically try to</font>

20
00:01:04,769 --> 00:01:11,520
fit you know mitigation techniques into

21
00:01:08,970 --> 00:01:13,798
our products<font color="#E5E5E5"> you</font><font color="#CCCCCC"> know like Gmail</font><font color="#E5E5E5"> or</font>

22
00:01:11,520 --> 00:01:15,390
<font color="#E5E5E5">these big products</font><font color="#CCCCCC"> they're here for a</font>

23
00:01:13,799 --> 00:01:18,420
long time<font color="#CCCCCC"> and it's not trivial to</font>

24
00:01:15,390 --> 00:01:24,080
<font color="#E5E5E5">basically retrofit them and enable some</font>

25
00:01:18,420 --> 00:01:28,560
things like CSP<font color="#CCCCCC"> or other stuff</font><font color="#E5E5E5"> right yes</font>

26
00:01:24,080 --> 00:01:29,850
<font color="#E5E5E5">so we have a pretty long</font><font color="#CCCCCC"> agenda today we</font>

27
00:01:28,560 --> 00:01:31,890
first<font color="#E5E5E5"> will talk about content</font><font color="#CCCCCC"> security</font>

28
00:01:29,850 --> 00:01:33,539
policy because this is<font color="#E5E5E5"> something we have</font>

29
00:01:31,890 --> 00:01:36,900
been<font color="#CCCCCC"> working and contributing to</font><font color="#E5E5E5"> for the</font>

30
00:01:33,540 --> 00:01:38,460
last<font color="#CCCCCC"> couple of</font><font color="#E5E5E5"> years and yeah we built</font>

31
00:01:36,900 --> 00:01:40,770
up<font color="#CCCCCC"> quite some knowledge there we wanted</font>

32
00:01:38,460 --> 00:01:43,229
to share<font color="#CCCCCC"> that with</font><font color="#E5E5E5"> you guys then we'll</font>

33
00:01:40,770 --> 00:01:46,890
talk about<font color="#E5E5E5"> sub resource integrity</font><font color="#CCCCCC"> same</font>

34
00:01:43,229 --> 00:01:51,079
<font color="#CCCCCC">side cookies side isolation</font><font color="#E5E5E5"> Corp from</font>

35
00:01:46,890 --> 00:01:55,909
origin response header and then<font color="#E5E5E5"> some</font>

36
00:01:51,079 --> 00:01:59,158
<font color="#E5E5E5">probably upcoming very promising new</font>

37
00:01:55,909 --> 00:02:05,130
techniques like sub origins origin

38
00:01:59,159 --> 00:02:06,950
policy<font color="#E5E5E5"> and feature policy so but for now</font>

39
00:02:05,130 --> 00:02:10,348
we'll<font color="#E5E5E5"> start with</font><font color="#CCCCCC"> content security policy</font>

40
00:02:06,950 --> 00:02:13,830
<font color="#CCCCCC">I don't know how many</font><font color="#E5E5E5"> of you know about</font>

41
00:02:10,348 --> 00:02:15,829
CSB<font color="#CCCCCC"> it has been around for quite</font><font color="#E5E5E5"> a while</font>

42
00:02:13,830 --> 00:02:19,760
<font color="#CCCCCC">I think I</font><font color="#E5E5E5"> don't know almost</font><font color="#CCCCCC"> ten years</font>

43
00:02:15,830 --> 00:02:21,960
<font color="#E5E5E5">it's really</font><font color="#CCCCCC"> complex and</font><font color="#E5E5E5"> there's a lot of</font>

44
00:02:19,760 --> 00:02:23,609
misconceptions around<font color="#E5E5E5"> it and we</font>

45
00:02:21,960 --> 00:02:25,500
basically<font color="#E5E5E5"> wanted to bust some myths here</font>

46
00:02:23,610 --> 00:02:27,870
and wanted to<font color="#CCCCCC"> demonstrate and explain</font>

47
00:02:25,500 --> 00:02:29,750
<font color="#E5E5E5">some best practices how to really roll</font>

48
00:02:27,870 --> 00:02:32,730
it out that is<font color="#CCCCCC"> like an effective defense</font>

49
00:02:29,750 --> 00:02:36,270
<font color="#E5E5E5">especially for cross-site scripting so</font>

50
00:02:32,730 --> 00:02:38,130
CSP is a response header<font color="#E5E5E5"> so it's</font>

51
00:02:36,270 --> 00:02:40,620
<font color="#E5E5E5">basically sent from the server</font><font color="#CCCCCC"> to the</font>

52
00:02:38,130 --> 00:02:43,320
client and the browser<font color="#E5E5E5"> takes that header</font>

53
00:02:40,620 --> 00:02:46,050
and basically allows the developer to

54
00:02:43,320 --> 00:02:48,120
restrict<font color="#E5E5E5"> certain features in</font><font color="#CCCCCC"> the web</font>

55
00:02:46,050 --> 00:02:51,570
platform for that application

56
00:02:48,120 --> 00:02:53,550
and we use<font color="#CCCCCC"> that</font><font color="#E5E5E5"> to</font><font color="#CCCCCC"> basically mitigate</font>

57
00:02:51,570 --> 00:02:56,100
cross-site scripting<font color="#E5E5E5"> it is very</font>

58
00:02:53,550 --> 00:02:58,560
important to<font color="#CCCCCC"> highlight here that is like</font>

59
00:02:56,100 --> 00:03:00,810
not<font color="#E5E5E5"> a replacement for careful input</font>

60
00:02:58,560 --> 00:03:04,140
validation<font color="#CCCCCC"> and also not a replacement</font>

61
00:03:00,810 --> 00:03:05,940
for<font color="#E5E5E5"> output</font><font color="#CCCCCC"> encoding and it's a basically</font>

62
00:03:04,140 --> 00:03:07,619
second line of defense right it's not

63
00:03:05,940 --> 00:03:09,750
something that<font color="#E5E5E5"> you would roll</font><font color="#CCCCCC"> out</font><font color="#E5E5E5"> as</font>

64
00:03:07,620 --> 00:03:12,060
your<font color="#E5E5E5"> only line of</font><font color="#CCCCCC"> defense unfortunately</font>

65
00:03:09,750 --> 00:03:14,160
we<font color="#E5E5E5"> right here at some</font><font color="#CCCCCC"> some times right</font>

66
00:03:12,060 --> 00:03:15,510
from pen testers that they find

67
00:03:14,160 --> 00:03:17,070
cross-site scripting and then they

68
00:03:15,510 --> 00:03:18,660
report at the company and they say oh

69
00:03:17,070 --> 00:03:20,910
you<font color="#CCCCCC"> have a CSP it's blocked by the C</font>

70
00:03:18,660 --> 00:03:23,280
<font color="#CCCCCC">spiritual</font><font color="#E5E5E5"> but we might don't fix the SSS</font>

71
00:03:20,910 --> 00:03:24,720
right so yeah you have<font color="#CCCCCC"> to fix the</font>

72
00:03:23,280 --> 00:03:28,080
underlying<font color="#E5E5E5"> box right it's like really a</font>

73
00:03:24,720 --> 00:03:29,459
second layer of<font color="#E5E5E5"> defense so what is CSP</font>

74
00:03:28,080 --> 00:03:31,350
not<font color="#CCCCCC"> I</font><font color="#E5E5E5"> already said it it's not a</font>

75
00:03:29,459 --> 00:03:34,470
replacement for secure coding practices

76
00:03:31,350 --> 00:03:36,810
and it's also not a mechanism<font color="#E5E5E5"> to prevent</font>

77
00:03:34,470 --> 00:03:39,900
<font color="#E5E5E5">data exfiltration</font><font color="#CCCCCC"> I have a slide on</font><font color="#E5E5E5"> that</font>

78
00:03:36,810 --> 00:03:43,019
<font color="#E5E5E5">particular later but this is also a</font>

79
00:03:39,900 --> 00:03:48,860
<font color="#E5E5E5">common misconception which we often see</font>

80
00:03:43,019 --> 00:03:51,269
around CSP<font color="#CCCCCC"> CSP is actually super complex</font>

81
00:03:48,860 --> 00:03:53,820
<font color="#E5E5E5">it's as I said it's around for a long</font>

82
00:03:51,269 --> 00:03:58,140
<font color="#E5E5E5">time</font><font color="#CCCCCC"> and they kept like you know adding</font>

83
00:03:53,820 --> 00:04:02,970
features to<font color="#E5E5E5"> this</font><font color="#CCCCCC"> pack and in the end it</font>

84
00:03:58,140 --> 00:04:06,570
basically can do a lot<font color="#CCCCCC"> of things but not</font>

85
00:04:02,970 --> 00:04:08,400
all<font color="#CCCCCC"> of</font><font color="#E5E5E5"> these things work you</font><font color="#CCCCCC"> know it's</font>

86
00:04:06,570 --> 00:04:13,140
it's<font color="#E5E5E5"> not trivial and it's also not</font>

87
00:04:08,400 --> 00:04:14,910
intuitive unfortunately so I only had a

88
00:04:13,140 --> 00:04:18,539
place on the slide<font color="#CCCCCC"> for like</font><font color="#E5E5E5"> six use</font>

89
00:04:14,910 --> 00:04:20,548
<font color="#E5E5E5">cases</font><font color="#CCCCCC"> I think there's more most</font>

90
00:04:18,540 --> 00:04:23,729
promising and most prominent one<font color="#CCCCCC"> is</font>

91
00:04:20,548 --> 00:04:25,560
probably using<font color="#E5E5E5"> CSP as a defense defense</font>

92
00:04:23,729 --> 00:04:27,120
defense<font color="#E5E5E5"> in depth protection against</font>

93
00:04:25,560 --> 00:04:30,180
cross-site scripting

94
00:04:27,120 --> 00:04:34,050
<font color="#E5E5E5">you can also use it to protect against</font>

95
00:04:30,180 --> 00:04:36,360
UI level attacks<font color="#E5E5E5"> right</font><font color="#CCCCCC"> there are some</font>

96
00:04:34,050 --> 00:04:40,710
<font color="#E5E5E5">really sophisticated attacks with styles</font>

97
00:04:36,360 --> 00:04:43,889
you<font color="#CCCCCC"> can do</font><font color="#E5E5E5"> we'll talk about a key log or</font>

98
00:04:40,710 --> 00:04:47,400
<font color="#E5E5E5">a password key</font><font color="#CCCCCC"> logo using</font><font color="#E5E5E5"> style sheets</font>

99
00:04:43,889 --> 00:04:51,720
<font color="#E5E5E5">later on so you can use the</font><font color="#CCCCCC"> stealth</font>

100
00:04:47,400 --> 00:04:53,638
<font color="#E5E5E5">sauce directive to mitigate that then</font>

101
00:04:51,720 --> 00:04:56,070
just<font color="#CCCCCC"> a couple</font><font color="#E5E5E5"> of things that are</font>

102
00:04:53,639 --> 00:04:58,830
basically<font color="#E5E5E5"> not really</font><font color="#CCCCCC"> related to CSP</font><font color="#E5E5E5"> but</font>

103
00:04:56,070 --> 00:05:01,199
<font color="#CCCCCC">they</font><font color="#E5E5E5"> basically use CSP as a delivery</font>

104
00:04:58,830 --> 00:05:03,870
mechanism<font color="#E5E5E5"> right so for example there's</font>

105
00:05:01,199 --> 00:05:06,030
like upgrade insecure requests and block

106
00:05:03,870 --> 00:05:09,120
all mixed<font color="#CCCCCC"> content that is like somehow</font>

107
00:05:06,030 --> 00:05:11,820
<font color="#E5E5E5">in the HTTP</font><font color="#CCCCCC"> realm</font><font color="#E5E5E5"> it's quite</font><font color="#CCCCCC"> useful but</font>

108
00:05:09,120 --> 00:05:14,720
personally I consider<font color="#E5E5E5"> these you know not</font>

109
00:05:11,820 --> 00:05:19,830
really<font color="#E5E5E5"> in the core focus area of CSP</font>

110
00:05:14,720 --> 00:05:21,780
also frame Ancestors is something that

111
00:05:19,830 --> 00:05:23,520
they probably<font color="#CCCCCC"> just</font><font color="#E5E5E5"> added to CSP because</font>

112
00:05:21,780 --> 00:05:27,809
it's a nice transport mechanism and<font color="#E5E5E5"> you</font>

113
00:05:23,520 --> 00:05:29,520
can you<font color="#E5E5E5"> know</font><font color="#CCCCCC"> have you have more</font>

114
00:05:27,810 --> 00:05:33,389
granularity<font color="#CCCCCC"> of what you can specify in</font>

115
00:05:29,520 --> 00:05:37,530
<font color="#E5E5E5">frame Ancestors compared to the framing</font>

116
00:05:33,389 --> 00:05:39,030
headers<font color="#CCCCCC"> and then there's also some use</font>

117
00:05:37,530 --> 00:05:41,489
<font color="#CCCCCC">cases where</font><font color="#E5E5E5"> you basically just want</font><font color="#CCCCCC"> to</font>

118
00:05:39,030 --> 00:05:44,250
<font color="#E5E5E5">send us USB</font><font color="#CCCCCC"> that blocks everything that</font>

119
00:05:41,490 --> 00:05:46,979
can<font color="#CCCCCC"> be a</font><font color="#E5E5E5"> mitigation if you're hosting</font>

120
00:05:44,250 --> 00:05:49,080
like user provided content uploads right

121
00:05:46,979 --> 00:05:51,210
and you basically<font color="#E5E5E5"> want</font><font color="#CCCCCC"> to make sure</font><font color="#E5E5E5"> that</font>

122
00:05:49,080 --> 00:05:53,310
the basic<font color="#CCCCCC"> in never executes</font><font color="#E5E5E5"> then you</font>

123
00:05:51,210 --> 00:05:57,570
could for example set<font color="#E5E5E5"> a block all header</font>

124
00:05:53,310 --> 00:05:59,639
<font color="#E5E5E5">and last but not least some people also</font>

125
00:05:57,570 --> 00:06:03,210
<font color="#CCCCCC">try to prevent data exfiltration with</font>

126
00:05:59,639 --> 00:06:06,180
CSP<font color="#E5E5E5"> unfortunately this is doomed to fail</font>

127
00:06:03,210 --> 00:06:08,669
but<font color="#CCCCCC"> a lot of</font><font color="#E5E5E5"> people still do that and I</font>

128
00:06:06,180 --> 00:06:10,620
have a slide<font color="#CCCCCC"> on</font><font color="#E5E5E5"> that as well later</font><font color="#CCCCCC"> so I</font>

129
00:06:08,669 --> 00:06:11,130
just recommend to you like don't<font color="#CCCCCC"> even</font>

130
00:06:10,620 --> 00:06:12,780
try<font color="#E5E5E5"> it</font>

131
00:06:11,130 --> 00:06:15,030
in the<font color="#E5E5E5"> best case</font><font color="#CCCCCC"> it slows down</font><font color="#E5E5E5"> the</font>

132
00:06:12,780 --> 00:06:19,830
attacker but it's not a real mitigation

133
00:06:15,030 --> 00:06:23,609
right<font color="#CCCCCC"> so in our talk will mostly focus</font>

134
00:06:19,830 --> 00:06:26,460
<font color="#CCCCCC">on the XSS part because this part is</font>

135
00:06:23,610 --> 00:06:27,990
<font color="#CCCCCC">already complicated enough</font><font color="#E5E5E5"> and we could</font>

136
00:06:26,460 --> 00:06:31,580
probably feel<font color="#CCCCCC"> like two or three talks</font>

137
00:06:27,990 --> 00:06:36,390
<font color="#E5E5E5">just with these topics here</font><font color="#CCCCCC"> there is</font>

138
00:06:31,580 --> 00:06:38,099
about<font color="#E5E5E5"> three flavors of</font><font color="#CCCCCC"> csps</font><font color="#E5E5E5"> that can be</font>

139
00:06:36,390 --> 00:06:40,590
used<font color="#E5E5E5"> to mitigate cross-site scripting</font>

140
00:06:38,099 --> 00:06:41,919
<font color="#E5E5E5">there is a very popular widely spaced</font>

141
00:06:40,590 --> 00:06:46,330
years

142
00:06:41,919 --> 00:06:50,049
you<font color="#CCCCCC"> basically</font><font color="#E5E5E5"> have a list of hosts or</font>

143
00:06:46,330 --> 00:06:52,659
origins that you allow<font color="#CCCCCC"> the site to load</font>

144
00:06:50,050 --> 00:06:55,780
scripts from<font color="#E5E5E5"> we have been talking about</font>

145
00:06:52,659 --> 00:06:57,188
this case<font color="#E5E5E5"> this</font><font color="#CCCCCC"> particular form of CSP in</font>

146
00:06:55,780 --> 00:06:59,020
the last year and<font color="#E5E5E5"> the</font><font color="#CCCCCC"> year before and</font>

147
00:06:57,189 --> 00:07:01,120
it's kind<font color="#CCCCCC"> of</font><font color="#E5E5E5"> inherently broken</font>

148
00:06:59,020 --> 00:07:03,370
unfortunately<font color="#E5E5E5"> so what we usually</font>

149
00:07:01,120 --> 00:07:08,319
<font color="#E5E5E5">recommend these days is using a non</font>

150
00:07:03,370 --> 00:07:10,060
<font color="#E5E5E5">space CSP or hash-based</font><font color="#CCCCCC"> csps very</font>

151
00:07:08,319 --> 00:07:11,560
quickly about<font color="#E5E5E5"> the</font><font color="#CCCCCC"> Vitis based csps I</font>

152
00:07:10,060 --> 00:07:15,180
<font color="#E5E5E5">really don't want</font><font color="#CCCCCC"> to spend too much time</font>

153
00:07:11,560 --> 00:07:17,639
<font color="#E5E5E5">on them but they're basically broken and</font>

154
00:07:15,180 --> 00:07:21,639
there's a research paper which we

155
00:07:17,639 --> 00:07:24,669
submitted in the November 2016<font color="#CCCCCC"> and it</font>

156
00:07:21,639 --> 00:07:26,050
basically has<font color="#E5E5E5"> like a lot of</font><font color="#CCCCCC"> pie passes</font>

157
00:07:24,669 --> 00:07:28,539
for widely spaced<font color="#E5E5E5"> DSPs</font>

158
00:07:26,050 --> 00:07:30,639
in general and we<font color="#E5E5E5"> basically found out</font>

159
00:07:28,539 --> 00:07:32,830
that like we first some<font color="#E5E5E5"> list and some</font>

160
00:07:30,639 --> 00:07:36,759
rules<font color="#E5E5E5"> you basically can bypass like</font>

161
00:07:32,830 --> 00:07:38,500
almost<font color="#CCCCCC"> 94% of all</font><font color="#E5E5E5"> the web's</font><font color="#CCCCCC"> Vitus based</font>

162
00:07:36,759 --> 00:07:39,969
CSP is like we'd be crawled<font color="#CCCCCC"> we use the</font>

163
00:07:38,500 --> 00:07:43,060
Google<font color="#CCCCCC"> crawler and crawl like for all</font>

164
00:07:39,969 --> 00:07:44,889
the<font color="#E5E5E5"> policies we could find and they were</font>

165
00:07:43,060 --> 00:07:47,979
really<font color="#E5E5E5"> not strong medications</font>

166
00:07:44,889 --> 00:07:52,449
unfortunately so what we<font color="#CCCCCC"> proposed</font>

167
00:07:47,979 --> 00:07:54,039
<font color="#E5E5E5">instead is using non-space</font><font color="#CCCCCC"> CSPs they're</font>

168
00:07:52,449 --> 00:07:57,279
quite<font color="#E5E5E5"> different compared to the white</font>

169
00:07:54,039 --> 00:08:00,128
<font color="#CCCCCC">base 12 are tightly</font><font color="#E5E5E5"> spaced ones</font><font color="#CCCCCC"> they</font>

170
00:07:57,279 --> 00:08:02,020
<font color="#E5E5E5">basically are what is really nice</font>

171
00:08:00,129 --> 00:08:03,669
they're always the<font color="#CCCCCC"> same for</font><font color="#E5E5E5"> every site</font>

172
00:08:02,020 --> 00:08:06,370
<font color="#E5E5E5">so you don't have to come up</font><font color="#CCCCCC"> with a new</font>

173
00:08:03,669 --> 00:08:09,609
CSP for every deployment<font color="#CCCCCC"> you basically</font>

174
00:08:06,370 --> 00:08:12,610
<font color="#CCCCCC">just have a nonce token that</font><font color="#E5E5E5"> changes for</font>

175
00:08:09,610 --> 00:08:16,169
<font color="#E5E5E5">every response and that should be</font>

176
00:08:12,610 --> 00:08:20,080
unguessable<font color="#E5E5E5"> by the attacker right like</font>

177
00:08:16,169 --> 00:08:22,359
xsrf token so the idea is the token<font color="#E5E5E5"> is</font>

178
00:08:20,080 --> 00:08:25,060
the random number the random token is in

179
00:08:22,360 --> 00:08:28,259
the header and the random token also has

180
00:08:25,060 --> 00:08:31,569
to be<font color="#E5E5E5"> in</font><font color="#CCCCCC"> every</font><font color="#E5E5E5"> script tag on the</font><font color="#CCCCCC"> page as</font>

181
00:08:28,259 --> 00:08:33,370
in<font color="#CCCCCC"> a nonce</font><font color="#E5E5E5"> attribute and only if the</font>

182
00:08:31,569 --> 00:08:34,930
nonce<font color="#E5E5E5"> attribute matches the nonce value</font>

183
00:08:33,370 --> 00:08:39,750
in the header<font color="#E5E5E5"> that script will be</font>

184
00:08:34,929 --> 00:08:41,799
executed<font color="#CCCCCC"> it's really nice</font><font color="#E5E5E5"> because it's</font>

185
00:08:39,750 --> 00:08:42,969
significantly less fragile<font color="#E5E5E5"> than the</font>

186
00:08:41,799 --> 00:08:45,790
<font color="#CCCCCC">widely</font><font color="#E5E5E5"> spaced</font><font color="#CCCCCC"> CSP</font>

187
00:08:42,969 --> 00:08:47,440
because with the battlespace<font color="#CCCCCC"> piece you</font>

188
00:08:45,790 --> 00:08:51,760
have<font color="#CCCCCC"> the problem that</font><font color="#E5E5E5"> you know if some</font>

189
00:08:47,440 --> 00:08:54,730
path changes your<font color="#CCCCCC"> site breaks right the</font>

190
00:08:51,760 --> 00:08:56,110
non-space CSP is much more robust

191
00:08:54,730 --> 00:08:58,300
you basically<font color="#CCCCCC"> nonce the script X</font>

192
00:08:56,110 --> 00:09:00,430
directly<font color="#E5E5E5"> and then it</font><font color="#CCCCCC"> doesn't matter</font><font color="#E5E5E5"> if</font>

193
00:08:58,300 --> 00:09:03,849
the content<font color="#E5E5E5"> changes or the the source of</font>

194
00:09:00,430 --> 00:09:05,380
the script<font color="#E5E5E5"> is loaded changes</font><font color="#CCCCCC"> and it also</font>

195
00:09:03,850 --> 00:09:09,060
does<font color="#CCCCCC"> not have all the</font><font color="#E5E5E5"> rightly spaced</font>

196
00:09:05,380 --> 00:09:11,830
bypasses which is a really<font color="#E5E5E5"> nice feature</font>

197
00:09:09,060 --> 00:09:14,199
<font color="#CCCCCC">super</font><font color="#E5E5E5"> quick recap how does</font><font color="#CCCCCC"> a non spaced</font>

198
00:09:11,830 --> 00:09:16,930
<font color="#E5E5E5">USB</font><font color="#CCCCCC"> Brooke on the Left we have a</font>

199
00:09:14,200 --> 00:09:18,640
<font color="#CCCCCC">monitored example.com</font><font color="#E5E5E5"> it is served with</font>

200
00:09:16,930 --> 00:09:22,870
<font color="#E5E5E5">this content security policy which</font>

201
00:09:18,640 --> 00:09:24,760
restricts<font color="#CCCCCC"> a script source and the</font>

202
00:09:22,870 --> 00:09:26,620
browser basically<font color="#E5E5E5"> allows these two</font>

203
00:09:24,760 --> 00:09:28,330
scripts<font color="#E5E5E5"> to execute like it's an inner</font>

204
00:09:26,620 --> 00:09:30,160
script and<font color="#CCCCCC"> the source</font><font color="#E5E5E5"> script they both</font>

205
00:09:28,330 --> 00:09:32,740
have to write a correct nonce<font color="#E5E5E5"> attribute</font>

206
00:09:30,160 --> 00:09:35,230
value that match the header value so

207
00:09:32,740 --> 00:09:37,360
they execute an attacker<font color="#E5E5E5"> on the other</font>

208
00:09:35,230 --> 00:09:39,250
hand does<font color="#CCCCCC"> not know the nonce value in</font>

209
00:09:37,360 --> 00:09:41,470
the header<font color="#E5E5E5"> because it's basically a</font>

210
00:09:39,250 --> 00:09:44,260
one-time token right<font color="#E5E5E5"> every response has</font>

211
00:09:41,470 --> 00:09:46,800
a new value<font color="#CCCCCC"> so he can not inject</font><font color="#E5E5E5"> a</font>

212
00:09:44,260 --> 00:09:49,870
script with<font color="#CCCCCC"> the correct nonce tag and</font>

213
00:09:46,800 --> 00:09:51,250
not some<font color="#E5E5E5"> people sorry and the browser</font>

214
00:09:49,870 --> 00:09:56,500
will<font color="#CCCCCC"> basically block these executions</font>

215
00:09:51,250 --> 00:09:59,260
<font color="#E5E5E5">just the basic idea behind it</font><font color="#CCCCCC"> so what's</font>

216
00:09:56,500 --> 00:10:01,960
the problem a<font color="#E5E5E5"> non space CSP is actually</font>

217
00:09:59,260 --> 00:10:06,340
around<font color="#E5E5E5"> for a while now</font><font color="#CCCCCC"> but it is</font><font color="#E5E5E5"> almost</font>

218
00:10:01,960 --> 00:10:09,730
not used in the public<font color="#CCCCCC"> the big</font><font color="#E5E5E5"> problem</font>

219
00:10:06,340 --> 00:10:13,630
is that<font color="#E5E5E5"> it is very very hard to</font><font color="#CCCCCC"> nonce</font>

220
00:10:09,730 --> 00:10:15,880
<font color="#E5E5E5">every single script tag</font><font color="#CCCCCC"> especially it is</font>

221
00:10:13,630 --> 00:10:19,000
<font color="#E5E5E5">hard if you don't control the entire</font>

222
00:10:15,880 --> 00:10:21,280
JavaScript landscape right<font color="#CCCCCC"> if you if you</font>

223
00:10:19,000 --> 00:10:23,740
load<font color="#E5E5E5"> Google Analytics if you load I</font>

224
00:10:21,280 --> 00:10:25,990
don't know a Twitter widget<font color="#E5E5E5"> or a like</font>

225
00:10:23,740 --> 00:10:29,410
button<font color="#CCCCCC"> or something</font><font color="#E5E5E5"> that you source from</font>

226
00:10:25,990 --> 00:10:31,420
a third<font color="#CCCCCC"> party you basically don't</font>

227
00:10:29,410 --> 00:10:34,240
control if these<font color="#E5E5E5"> source scripts then</font>

228
00:10:31,420 --> 00:10:36,160
load<font color="#E5E5E5"> child</font><font color="#CCCCCC"> scripts and you basically</font>

229
00:10:34,240 --> 00:10:37,870
<font color="#E5E5E5">cannot</font><font color="#CCCCCC"> launch this trial scripts right</font>

230
00:10:36,160 --> 00:10:39,130
<font color="#E5E5E5">because the the source code is out</font><font color="#CCCCCC"> of</font>

231
00:10:37,870 --> 00:10:42,370
<font color="#CCCCCC">your control you load it from</font><font color="#E5E5E5"> a third</font>

232
00:10:39,130 --> 00:10:44,260
<font color="#E5E5E5">party site so that</font><font color="#CCCCCC"> breaks if it breaks</font>

233
00:10:42,370 --> 00:10:45,880
you cannot roll it out because I mean

234
00:10:44,260 --> 00:10:47,350
it's a defense-in-depth mechanism and

235
00:10:45,880 --> 00:10:51,189
<font color="#E5E5E5">you want to have a functional</font>

236
00:10:47,350 --> 00:10:53,140
application after<font color="#E5E5E5"> all right so strict</font>

237
00:10:51,190 --> 00:10:57,780
dynamic is really really useful<font color="#CCCCCC"> here</font>

238
00:10:53,140 --> 00:11:01,090
<font color="#CCCCCC">because it transitively propagates Trust</font>

239
00:10:57,780 --> 00:11:05,709
from initially trusted scripts to child

240
00:11:01,090 --> 00:11:08,620
scripts over<font color="#CCCCCC"> certain API so this is</font>

241
00:11:05,710 --> 00:11:10,360
really<font color="#E5E5E5"> game changer</font><font color="#CCCCCC"> so</font><font color="#E5E5E5"> you'll</font>

242
00:11:08,620 --> 00:11:11,980
later on a slide we basically because of

243
00:11:10,360 --> 00:11:14,290
<font color="#CCCCCC">that we were able to</font><font color="#E5E5E5"> roll out the strict</font>

244
00:11:11,980 --> 00:11:17,920
CSP policies<font color="#CCCCCC"> which announced</font><font color="#E5E5E5"> based on</font>

245
00:11:14,290 --> 00:11:20,110
over 50% of all outgoing<font color="#CCCCCC"> google</font><font color="#E5E5E5"> text</font>

246
00:11:17,920 --> 00:11:22,689
HTML traffic right<font color="#E5E5E5"> which is really</font>

247
00:11:20,110 --> 00:11:24,850
massive right because it's like a lot of

248
00:11:22,690 --> 00:11:26,140
applications and with the previous

249
00:11:24,850 --> 00:11:28,000
<font color="#CCCCCC">whitelist</font><font color="#E5E5E5"> based model which was even</font>

250
00:11:26,140 --> 00:11:33,310
<font color="#E5E5E5">more also insecure that would have never</font>

251
00:11:28,000 --> 00:11:35,950
<font color="#E5E5E5">been possible</font><font color="#CCCCCC"> yes</font><font color="#E5E5E5"> so this</font><font color="#CCCCCC"> is how strict</font>

252
00:11:33,310 --> 00:11:39,099
dynamic works the<font color="#CCCCCC"> area in theory the</font>

253
00:11:35,950 --> 00:11:43,030
green box shows a script tag<font color="#E5E5E5"> or in the</font>

254
00:11:39,100 --> 00:11:43,870
HTML markup<font color="#E5E5E5"> it is non state comes from</font>

255
00:11:43,030 --> 00:11:46,630
<font color="#E5E5E5">the server right</font>

256
00:11:43,870 --> 00:11:49,060
but this script<font color="#E5E5E5"> then creates child</font>

257
00:11:46,630 --> 00:11:52,890
scripts<font color="#E5E5E5"> via document create element and</font>

258
00:11:49,060 --> 00:11:55,300
then later document.body.appendchild<font color="#CCCCCC"> and</font>

259
00:11:52,890 --> 00:11:57,220
usually<font color="#E5E5E5"> without strict dynamic this</font>

260
00:11:55,300 --> 00:11:58,689
would be blocked from running because<font color="#E5E5E5"> it</font>

261
00:11:57,220 --> 00:12:01,300
does not have<font color="#CCCCCC"> to nonce attribute set</font>

262
00:11:58,690 --> 00:12:03,550
right but because<font color="#CCCCCC"> of Swift dynamic it is</font>

263
00:12:01,300 --> 00:12:07,030
allowed to<font color="#E5E5E5"> run the child script the</font>

264
00:12:03,550 --> 00:12:09,400
<font color="#E5E5E5">borrowed GS and this basically makes</font>

265
00:12:07,030 --> 00:12:12,939
like module loading work like widgets

266
00:12:09,400 --> 00:12:16,630
work and it's<font color="#E5E5E5"> really useful</font><font color="#CCCCCC"> at the same</font>

267
00:12:12,940 --> 00:12:19,240
time you know<font color="#E5E5E5"> prominent or like very</font>

268
00:12:16,630 --> 00:12:21,520
common Dom<font color="#CCCCCC"> access patterns like document</font>

269
00:12:19,240 --> 00:12:25,420
<font color="#CCCCCC">write and document</font><font color="#E5E5E5"> body dot inner HTML</font>

270
00:12:21,520 --> 00:12:27,460
or internal in<font color="#E5E5E5"> HTML is not allowed to</font>

271
00:12:25,420 --> 00:12:33,280
create scripts right because they

272
00:12:27,460 --> 00:12:37,600
<font color="#CCCCCC">basically take an parsed</font><font color="#E5E5E5"> text and you</font>

273
00:12:33,280 --> 00:12:38,949
know<font color="#E5E5E5"> that's a very</font><font color="#CCCCCC"> common</font><font color="#E5E5E5"> sink for it's</font>

274
00:12:37,600 --> 00:12:43,390
<font color="#CCCCCC">very common reason for cross-site</font>

275
00:12:38,950 --> 00:12:45,910
<font color="#E5E5E5">scripting Dom XSS so this is great right</font>

276
00:12:43,390 --> 00:12:48,100
<font color="#CCCCCC">it</font><font color="#E5E5E5"> allows you to roll out a CSP there's</font>

277
00:12:45,910 --> 00:12:51,520
one culprit here<font color="#E5E5E5"> you really</font><font color="#CCCCCC"> need to make</font>

278
00:12:48,100 --> 00:12:55,480
<font color="#CCCCCC">sure that in this case this</font><font color="#E5E5E5"> this</font>

279
00:12:51,520 --> 00:12:57,790
<font color="#E5E5E5">parameter did a scripted source is not</font>

280
00:12:55,480 --> 00:12:59,470
user controllable right because if the

281
00:12:57,790 --> 00:13:03,550
user can<font color="#E5E5E5"> control that it basically</font>

282
00:12:59,470 --> 00:13:06,730
bypasses the the CSP<font color="#CCCCCC"> that's a</font><font color="#E5E5E5"> trade-off</font>

283
00:13:03,550 --> 00:13:08,800
<font color="#CCCCCC">for making it deployable</font><font color="#E5E5E5"> but it is a</font>

284
00:13:06,730 --> 00:13:11,680
good trade-off<font color="#CCCCCC"> in my opinion</font><font color="#E5E5E5"> because you</font>

285
00:13:08,800 --> 00:13:14,380
<font color="#CCCCCC">basically get rid of reflected</font><font color="#E5E5E5"> stored</font>

286
00:13:11,680 --> 00:13:19,329
across the strictest scripting and the

287
00:13:14,380 --> 00:13:22,220
big portion of the Dom XSS right so it's

288
00:13:19,330 --> 00:13:27,010
<font color="#E5E5E5">strictly better than not</font><font color="#CCCCCC"> having a CSP</font>

289
00:13:22,220 --> 00:13:30,470
so as I said it can get pretty<font color="#E5E5E5"> confusing</font>

290
00:13:27,010 --> 00:13:34,270
<font color="#CCCCCC">so if you dive deeper</font><font color="#E5E5E5"> only on the nonce</font>

291
00:13:30,470 --> 00:13:36,590
and hash-based<font color="#CCCCCC"> CSPs</font><font color="#E5E5E5"> we can have like a</font>

292
00:13:34,270 --> 00:13:40,100
pyramid with different levels<font color="#CCCCCC"> of</font>

293
00:13:36,590 --> 00:13:41,710
security guarantees and on the one hand

294
00:13:40,100 --> 00:13:43,820
and the different<font color="#CCCCCC"> levels of like</font>

295
00:13:41,710 --> 00:13:46,760
deployment difficulty on<font color="#E5E5E5"> the other hand</font>

296
00:13:43,820 --> 00:13:50,270
<font color="#E5E5E5">so at Google we basically used like</font>

297
00:13:46,760 --> 00:13:52,610
these level<font color="#CCCCCC"> 1 policies mostly these</font><font color="#E5E5E5"> are</font>

298
00:13:50,270 --> 00:13:56,600
like non-space<font color="#CCCCCC"> csps we have strict</font>

299
00:13:52,610 --> 00:13:59,180
dynamic and unsafe<font color="#E5E5E5"> evil</font><font color="#CCCCCC"> the nice thing</font>

300
00:13:56,600 --> 00:14:02,050
is<font color="#E5E5E5"> especially in our case it's really</font>

301
00:13:59,180 --> 00:14:05,209
<font color="#E5E5E5">easy to roll them out because we have</font>

302
00:14:02,050 --> 00:14:06,920
very<font color="#E5E5E5"> good templating systems that are</font>

303
00:14:05,210 --> 00:14:09,530
<font color="#E5E5E5">context sensitive</font><font color="#CCCCCC"> and that basically</font>

304
00:14:06,920 --> 00:14:12,560
automatically<font color="#E5E5E5"> norms all</font><font color="#CCCCCC"> the script tags</font>

305
00:14:09,530 --> 00:14:13,760
on the page<font color="#CCCCCC"> so quite often it's just a</font>

306
00:14:12,560 --> 00:14:15,560
matter of<font color="#E5E5E5"> like turning it on</font><font color="#CCCCCC"> and</font>

307
00:14:13,760 --> 00:14:18,350
framework and it works<font color="#E5E5E5"> out of the</font><font color="#CCCCCC"> box</font>

308
00:14:15,560 --> 00:14:19,729
<font color="#E5E5E5">and it gives us some pretty good</font>

309
00:14:18,350 --> 00:14:22,280
guarantees for<font color="#E5E5E5"> the amount of work</font>

310
00:14:19,730 --> 00:14:25,370
required<font color="#E5E5E5"> as I said like</font><font color="#CCCCCC"> store reflected</font>

311
00:14:22,280 --> 00:14:27,459
<font color="#CCCCCC">XSS is mitigated XSS</font><font color="#E5E5E5"> through like</font>

312
00:14:25,370 --> 00:14:29,690
<font color="#CCCCCC">JavaScript your</font><font color="#E5E5E5"> eyes is mitigated</font><font color="#CCCCCC"> and</font>

313
00:14:27,460 --> 00:14:34,160
most of the Dom XSS vectors are

314
00:14:29,690 --> 00:14:36,890
mitigated<font color="#E5E5E5"> since we most of the Google</font>

315
00:14:34,160 --> 00:14:40,640
<font color="#CCCCCC">applications are</font><font color="#E5E5E5"> based on closure</font><font color="#CCCCCC"> we did</font>

316
00:14:36,890 --> 00:14:42,170
not have any straight dynamic bypasses

317
00:14:40,640 --> 00:14:46,430
on the closure<font color="#E5E5E5"> application yet which is</font>

318
00:14:42,170 --> 00:14:48,620
<font color="#E5E5E5">also quite</font><font color="#CCCCCC"> good but you know ideally</font><font color="#E5E5E5"> we</font>

319
00:14:46,430 --> 00:14:51,620
would move up the pyramid<font color="#E5E5E5"> especially</font>

320
00:14:48,620 --> 00:14:53,900
evil is<font color="#E5E5E5"> something I really dislike and</font>

321
00:14:51,620 --> 00:14:57,140
<font color="#E5E5E5">we are basically working around like</font>

322
00:14:53,900 --> 00:14:59,270
refactoring the<font color="#CCCCCC"> users of</font><font color="#E5E5E5"> evil to come</font>

323
00:14:57,140 --> 00:15:01,910
basically such<font color="#E5E5E5"> become basically</font><font color="#CCCCCC"> blocked</font>

324
00:14:59,270 --> 00:15:03,410
<font color="#E5E5E5">entirely because</font><font color="#CCCCCC"> if you remove unsaved</font>

325
00:15:01,910 --> 00:15:06,380
<font color="#E5E5E5">people you basically</font><font color="#CCCCCC"> also get rid</font><font color="#E5E5E5"> of the</font>

326
00:15:03,410 --> 00:15:09,230
attack vectors that<font color="#E5E5E5"> are based because of</font>

327
00:15:06,380 --> 00:15:12,710
based on like putting user input into

328
00:15:09,230 --> 00:15:14,390
evil<font color="#E5E5E5"> and then in rare cases we really</font>

329
00:15:12,710 --> 00:15:19,070
<font color="#E5E5E5">control the entire JavaScript stack</font>

330
00:15:14,390 --> 00:15:21,080
right<font color="#E5E5E5"> and</font><font color="#CCCCCC"> we're I don't know maybe new</font>

331
00:15:19,070 --> 00:15:23,870
applications<font color="#E5E5E5"> you can try to have</font>

332
00:15:21,080 --> 00:15:25,790
<font color="#CCCCCC">unknowns</font><font color="#E5E5E5"> or hash only policy without any</font>

333
00:15:23,870 --> 00:15:28,040
strict dynamic but it's really

334
00:15:25,790 --> 00:15:29,930
restricting because you cannot<font color="#E5E5E5"> use any</font>

335
00:15:28,040 --> 00:15:33,469
<font color="#CCCCCC">third-party widgets or anything else</font>

336
00:15:29,930 --> 00:15:35,719
<font color="#E5E5E5">right but some applications can do it</font>

337
00:15:33,470 --> 00:15:36,050
and you're<font color="#CCCCCC"> on the right corner</font><font color="#E5E5E5"> I put</font>

338
00:15:35,720 --> 00:15:38,990
white

339
00:15:36,050 --> 00:15:41,890
<font color="#CCCCCC">based ESP is because they're almost</font>

340
00:15:38,990 --> 00:15:44,779
<font color="#CCCCCC">impossible to get right there's some</font>

341
00:15:41,890 --> 00:15:48,380
exceptions to<font color="#CCCCCC"> that rule but</font><font color="#E5E5E5"> it's it's I</font>

342
00:15:44,779 --> 00:15:52,760
would<font color="#E5E5E5"> not try it</font><font color="#CCCCCC"> this</font><font color="#E5E5E5"> is basically</font><font color="#CCCCCC"> how</font>

343
00:15:48,380 --> 00:15:54,980
it looks like we used<font color="#CCCCCC"> B</font><font color="#E5E5E5"> this base policy</font>

344
00:15:52,760 --> 00:15:56,450
<font color="#E5E5E5">we also restrict</font><font color="#CCCCCC"> object source and base</font>

345
00:15:54,980 --> 00:15:59,360
<font color="#CCCCCC">arrived because</font><font color="#E5E5E5"> that would be common</font>

346
00:15:56,450 --> 00:16:02,180
<font color="#E5E5E5">bypass patterns and if you go up the</font>

347
00:15:59,360 --> 00:16:08,029
pyramid<font color="#E5E5E5"> these</font><font color="#CCCCCC"> keywords</font><font color="#E5E5E5"> get removed like</font>

348
00:16:02,180 --> 00:16:10,459
<font color="#CCCCCC">unsafe</font><font color="#E5E5E5"> evil and strict dynamic yes</font><font color="#CCCCCC"> we</font>

349
00:16:08,029 --> 00:16:14,300
also wanted to update<font color="#CCCCCC"> you with some new</font>

350
00:16:10,459 --> 00:16:16,779
<font color="#CCCCCC">upcoming features in CSP free there is</font>

351
00:16:14,300 --> 00:16:22,089
<font color="#CCCCCC">unsaved hashed attributes which is</font>

352
00:16:16,779 --> 00:16:25,370
coming<font color="#CCCCCC"> it's really interesting</font><font color="#E5E5E5"> because</font>

353
00:16:22,089 --> 00:16:28,220
<font color="#E5E5E5">you often have the problem that if you</font>

354
00:16:25,370 --> 00:16:30,790
roll out<font color="#E5E5E5"> a useful CSP that does not have</font>

355
00:16:28,220 --> 00:16:34,579
unsafe<font color="#E5E5E5"> inline you have to remove all the</font>

356
00:16:30,790 --> 00:16:37,640
<font color="#E5E5E5">inline event handlers for example are on</font>

357
00:16:34,579 --> 00:16:40,040
click<font color="#CCCCCC"> to submit or you know some use</font>

358
00:16:37,640 --> 00:16:41,959
like link link<font color="#CCCCCC"> tags with</font><font color="#E5E5E5"> JavaScript</font>

359
00:16:40,040 --> 00:16:44,240
<font color="#E5E5E5">equals words here are Travis crypt</font><font color="#CCCCCC"> :</font>

360
00:16:41,959 --> 00:16:46,040
<font color="#CCCCCC">wait zero</font><font color="#E5E5E5"> for backward</font><font color="#CCCCCC"> compatibility to</font>

361
00:16:44,240 --> 00:16:50,839
make a dick tag<font color="#E5E5E5"> render a rendered as</font>

362
00:16:46,040 --> 00:16:52,130
link<font color="#E5E5E5"> node browsers and first it can be a</font>

363
00:16:50,839 --> 00:16:54,170
lot of<font color="#E5E5E5"> work to refactor this but that's</font>

364
00:16:52,130 --> 00:16:56,930
<font color="#E5E5E5">not a problem the problem</font><font color="#CCCCCC"> is if</font><font color="#E5E5E5"> you have</font>

365
00:16:54,170 --> 00:16:59,390
some<font color="#CCCCCC"> third-party code that</font><font color="#E5E5E5"> creates</font>

366
00:16:56,930 --> 00:17:01,459
elements with inline event handlers<font color="#CCCCCC"> you</font>

367
00:16:59,390 --> 00:17:05,540
<font color="#E5E5E5">basically cannot enable CSP because</font>

368
00:17:01,459 --> 00:17:07,458
these will break as well<font color="#E5E5E5"> and unsafe</font><font color="#CCCCCC"> taft</font>

369
00:17:05,540 --> 00:17:12,168
<font color="#E5E5E5">octopus basically expands the concepts</font>

370
00:17:07,459 --> 00:17:14,270
of hashes for CSP to these inline event

371
00:17:12,169 --> 00:17:16,550
handlers<font color="#E5E5E5"> so in this case you'll</font>

372
00:17:14,270 --> 00:17:19,119
<font color="#CCCCCC">basically generate the hash for do</font>

373
00:17:16,550 --> 00:17:21,530
submit<font color="#E5E5E5"> and you add it to the policy and</font>

374
00:17:19,119 --> 00:17:25,698
then this one<font color="#E5E5E5"> would also be allowed</font><font color="#CCCCCC"> to</font>

375
00:17:21,530 --> 00:17:27,678
<font color="#E5E5E5">execute</font><font color="#CCCCCC"> it</font><font color="#E5E5E5"> it does not have many</font>

376
00:17:25,699 --> 00:17:29,179
downsides but in<font color="#CCCCCC"> theory</font><font color="#E5E5E5"> you could reuse</font>

377
00:17:27,679 --> 00:17:32,690
<font color="#E5E5E5">these event handlers like you could</font>

378
00:17:29,179 --> 00:17:35,179
inject<font color="#E5E5E5"> a new tag that says a new image</font>

379
00:17:32,690 --> 00:17:36,410
tag<font color="#E5E5E5"> and it says on</font><font color="#CCCCCC"> arrow to submit so</font>

380
00:17:35,179 --> 00:17:39,230
that is<font color="#E5E5E5"> something that is</font><font color="#CCCCCC"> possible in</font>

381
00:17:36,410 --> 00:17:41,179
<font color="#E5E5E5">this attack model but you</font><font color="#CCCCCC"> would not get</font>

382
00:17:39,230 --> 00:17:42,380
direct script execution right but you

383
00:17:41,179 --> 00:17:45,340
might could build<font color="#E5E5E5"> instruct in</font>

384
00:17:42,380 --> 00:17:45,340
interesting constructs

385
00:17:47,080 --> 00:17:50,799
but one really<font color="#CCCCCC"> cool thing about</font><font color="#E5E5E5"> that is</font>

386
00:17:49,179 --> 00:17:52,899
that this<font color="#E5E5E5"> is the first time that</font>

387
00:17:50,799 --> 00:17:55,090
<font color="#E5E5E5">basically allows you</font><font color="#CCCCCC"> to generate</font><font color="#E5E5E5"> a CSP</font>

388
00:17:52,899 --> 00:17:58,539
on the fly<font color="#E5E5E5"> so if you for example have a</font>

389
00:17:55,090 --> 00:18:01,418
static content that is not<font color="#E5E5E5"> user</font><font color="#CCCCCC"> in</font>

390
00:17:58,539 --> 00:18:04,299
<font color="#E5E5E5">principle you could basically have</font><font color="#CCCCCC"> a</font>

391
00:18:01,419 --> 00:18:07,179
<font color="#E5E5E5">proxy that nonsense all the script tags</font>

392
00:18:04,299 --> 00:18:11,110
<font color="#CCCCCC">and hashes the inline event</font><font color="#E5E5E5"> handlers and</font>

393
00:18:07,179 --> 00:18:13,539
by that you<font color="#CCCCCC"> could basically you know</font>

394
00:18:11,110 --> 00:18:15,279
restrict a big portion of the Dom XSS

395
00:18:13,539 --> 00:18:17,620
attack surface of<font color="#CCCCCC"> stack static content</font>

396
00:18:15,279 --> 00:18:19,809
sites<font color="#CCCCCC"> fully</font><font color="#E5E5E5"> automatic without having to</font>

397
00:18:17,620 --> 00:18:21,158
manually refactoring them<font color="#CCCCCC"> this is</font>

398
00:18:19,809 --> 00:18:24,850
something<font color="#CCCCCC"> we're</font><font color="#E5E5E5"> very interested</font><font color="#CCCCCC"> in and</font>

399
00:18:21,159 --> 00:18:26,830
<font color="#CCCCCC">we'll you know</font><font color="#E5E5E5"> try to deploy in the</font>

400
00:18:24,850 --> 00:18:30,789
coming months so<font color="#E5E5E5"> we haven't tried yet</font>

401
00:18:26,830 --> 00:18:32,189
but<font color="#CCCCCC"> it's might be</font><font color="#E5E5E5"> promising and then</font>

402
00:18:30,789 --> 00:18:35,860
just<font color="#E5E5E5"> another interesting</font><font color="#CCCCCC"> one which is uh</font>

403
00:18:32,190 --> 00:18:38,860
unsafe inline attributes<font color="#E5E5E5"> this is not</font>

404
00:18:35,860 --> 00:18:40,959
<font color="#E5E5E5">SPECT yet but it's a proposal</font><font color="#CCCCCC"> it came up</font>

405
00:18:38,860 --> 00:18:45,418
again<font color="#E5E5E5"> because</font><font color="#CCCCCC"> very recently there</font><font color="#E5E5E5"> was a</font>

406
00:18:40,960 --> 00:18:49,330
CSS key logger<font color="#CCCCCC"> that used the stylesheet</font>

407
00:18:45,419 --> 00:18:53,230
<font color="#CCCCCC">like</font><font color="#E5E5E5"> clear elect selectors</font><font color="#CCCCCC"> to steal</font>

408
00:18:49,330 --> 00:18:54,428
passwords from input fields<font color="#E5E5E5"> and it's</font>

409
00:18:53,230 --> 00:18:57,399
actually really<font color="#E5E5E5"> cool what you can do</font>

410
00:18:54,429 --> 00:18:59,769
with CSS right<font color="#E5E5E5"> so if you have two cycles</font>

411
00:18:57,399 --> 00:19:03,489
<font color="#CCCCCC">you can also try to restrict style</font>

412
00:18:59,769 --> 00:19:05,289
source right<font color="#E5E5E5"> move CSP</font><font color="#CCCCCC"> but in some cases</font>

413
00:19:03,490 --> 00:19:08,980
it's even<font color="#E5E5E5"> harder than restricting script</font>

414
00:19:05,289 --> 00:19:11,490
source because it is<font color="#E5E5E5"> extremely common to</font>

415
00:19:08,980 --> 00:19:14,440
use inline<font color="#CCCCCC"> Styles</font><font color="#E5E5E5"> right on pages and</font>

416
00:19:11,490 --> 00:19:18,480
refactoring<font color="#E5E5E5"> all of these is a lot of</font>

417
00:19:14,440 --> 00:19:22,120
work<font color="#CCCCCC"> and again if you have third-party</font>

418
00:19:18,480 --> 00:19:24,130
<font color="#E5E5E5">widgets</font><font color="#CCCCCC"> you cannot refactor it</font><font color="#E5E5E5"> right so</font>

419
00:19:22,120 --> 00:19:26,529
what you can do is with unsafe<font color="#E5E5E5"> inline</font>

420
00:19:24,130 --> 00:19:31,720
<font color="#E5E5E5">attributes you can</font><font color="#CCCCCC"> basically blank it</font>

421
00:19:26,529 --> 00:19:35,380
allow all inline<font color="#E5E5E5"> styles that's not great</font>

422
00:19:31,720 --> 00:19:37,179
<font color="#E5E5E5">but there is a significant</font><font color="#CCCCCC"> improvement</font>

423
00:19:35,380 --> 00:19:39,340
over unsafe inline in general right

424
00:19:37,179 --> 00:19:40,690
<font color="#E5E5E5">because if you just have unsafe inline</font>

425
00:19:39,340 --> 00:19:43,418
is like if you<font color="#CCCCCC"> don't</font><font color="#E5E5E5"> have any protection</font>

426
00:19:40,690 --> 00:19:46,330
<font color="#E5E5E5">if you have unsafe inline attributes and</font>

427
00:19:43,419 --> 00:19:51,820
still hash or nonce the actual style

428
00:19:46,330 --> 00:19:54,189
<font color="#E5E5E5">blocks</font><font color="#CCCCCC"> it is an</font><font color="#E5E5E5"> improvement</font><font color="#CCCCCC"> because in</font>

429
00:19:51,820 --> 00:19:57,549
contrast<font color="#E5E5E5"> to</font><font color="#CCCCCC"> two scripts the style</font>

430
00:19:54,190 --> 00:19:59,770
attributes are actually significantly

431
00:19:57,549 --> 00:20:00,850
less powerful than the<font color="#E5E5E5"> style blocks so</font>

432
00:19:59,770 --> 00:20:02,800
you don't have to<font color="#CCCCCC"> select</font>

433
00:20:00,850 --> 00:20:04,780
in the<font color="#E5E5E5"> style attributes so you cannot</font>

434
00:20:02,800 --> 00:20:07,360
carry<font color="#E5E5E5"> out these kind of fancy attacks</font>

435
00:20:04,780 --> 00:20:10,379
with CSS which very often rely on very

436
00:20:07,360 --> 00:20:12,939
powerful constructs like selectors<font color="#CCCCCC"> so</font>

437
00:20:10,380 --> 00:20:15,730
<font color="#CCCCCC">this is one attack vector you could</font>

438
00:20:12,940 --> 00:20:16,960
mitigate with that<font color="#E5E5E5"> you know ideally you</font>

439
00:20:15,730 --> 00:20:18,700
<font color="#E5E5E5">would just refactor all the inline</font>

440
00:20:16,960 --> 00:20:21,580
<font color="#E5E5E5">styles and just</font><font color="#CCCCCC"> hash announce all the</font>

441
00:20:18,700 --> 00:20:27,010
style blocks<font color="#E5E5E5"> but you know it might be a</font>

442
00:20:21,580 --> 00:20:28,899
stepping stone<font color="#E5E5E5"> to go there yeah and one</font>

443
00:20:27,010 --> 00:20:32,020
slide on<font color="#E5E5E5"> why we don't</font><font color="#CCCCCC"> recommend to use</font>

444
00:20:28,900 --> 00:20:33,490
<font color="#CCCCCC">USB to prevent data exfiltration we</font><font color="#E5E5E5"> edit</font>

445
00:20:32,020 --> 00:20:37,420
this<font color="#CCCCCC"> slide because we have seen this</font>

446
00:20:33,490 --> 00:20:39,640
quite often<font color="#E5E5E5"> and it's usually not a</font><font color="#CCCCCC"> good</font>

447
00:20:37,420 --> 00:20:40,780
<font color="#E5E5E5">idea because</font><font color="#CCCCCC"> the TLDR</font><font color="#E5E5E5"> is once you have a</font>

448
00:20:39,640 --> 00:20:44,080
JavaScript execution

449
00:20:40,780 --> 00:20:46,360
you can basically you know<font color="#E5E5E5"> you basically</font>

450
00:20:44,080 --> 00:20:48,429
<font color="#CCCCCC">have to hold that platform at your hands</font>

451
00:20:46,360 --> 00:20:50,530
<font color="#E5E5E5">right and it's so</font><font color="#CCCCCC"> powerful and there's</font>

452
00:20:48,430 --> 00:20:51,820
so many ways<font color="#E5E5E5"> to exfiltrate data if you</font>

453
00:20:50,530 --> 00:20:54,610
<font color="#CCCCCC">have once</font><font color="#E5E5E5"> you have JavaScript execution</font>

454
00:20:51,820 --> 00:20:55,780
that it's basically<font color="#E5E5E5"> the CSP is not</font>

455
00:20:54,610 --> 00:20:58,719
powerful enough<font color="#CCCCCC"> to</font><font color="#E5E5E5"> prevent that</font>

456
00:20:55,780 --> 00:21:00,910
basically so I want<font color="#E5E5E5"> very trivial example</font>

457
00:20:58,720 --> 00:21:04,420
is you could<font color="#E5E5E5"> attacker could just write a</font>

458
00:21:00,910 --> 00:21:08,170
link tag with the<font color="#E5E5E5"> document cookie in the</font>

459
00:21:04,420 --> 00:21:11,560
path<font color="#E5E5E5"> and that then click that</font><font color="#CCCCCC"> link CSP</font>

460
00:21:08,170 --> 00:21:13,780
cannot restrict navigation right so

461
00:21:11,560 --> 00:21:15,639
there's even<font color="#E5E5E5"> if you block everything if</font>

462
00:21:13,780 --> 00:21:17,320
you see speed is like no<font color="#CCCCCC"> way to exit</font>

463
00:21:15,640 --> 00:21:19,300
prevent this data exfiltration once you

464
00:21:17,320 --> 00:21:21,460
have script execution right<font color="#E5E5E5"> and there</font>

465
00:21:19,300 --> 00:21:25,389
are other examples<font color="#E5E5E5"> like</font><font color="#CCCCCC"> postmessage</font><font color="#E5E5E5"> DNS</font>

466
00:21:21,460 --> 00:21:27,970
prefetch window dot open<font color="#E5E5E5"> and others so</font>

467
00:21:25,390 --> 00:21:29,950
the goal is really<font color="#CCCCCC"> to prevent the script</font>

468
00:21:27,970 --> 00:21:31,900
execution in the first place<font color="#E5E5E5"> not to</font>

469
00:21:29,950 --> 00:21:37,240
<font color="#E5E5E5">prevent data exfiltration</font><font color="#CCCCCC"> once someone</font>

470
00:21:31,900 --> 00:21:39,100
<font color="#CCCCCC">has a script execution right so two</font>

471
00:21:37,240 --> 00:21:41,290
slides about CSP at<font color="#E5E5E5"> Google I already</font>

472
00:21:39,100 --> 00:21:42,820
mentioned<font color="#E5E5E5"> last in like during the</font><font color="#CCCCCC"> last</font>

473
00:21:41,290 --> 00:21:46,120
<font color="#CCCCCC">twelve or eighteen</font><font color="#E5E5E5"> months we basically</font>

474
00:21:42,820 --> 00:21:48,790
were able to<font color="#E5E5E5"> ramp out ramp up CSP</font>

475
00:21:46,120 --> 00:21:53,649
<font color="#E5E5E5">courage to over 50% of all the</font><font color="#CCCCCC"> outgoing</font>

476
00:21:48,790 --> 00:21:56,200
a Google traffic like text HTML Google

477
00:21:53,650 --> 00:21:59,380
<font color="#CCCCCC">traffic and we focused on a sensitive</font>

478
00:21:56,200 --> 00:22:03,430
stuff like account<font color="#E5E5E5"> log in</font><font color="#CCCCCC"> Gmail Docs and</font>

479
00:21:59,380 --> 00:22:04,960
drive<font color="#E5E5E5"> and stuff like that and we're not</font>

480
00:22:03,430 --> 00:22:07,210
<font color="#E5E5E5">there yet right</font><font color="#CCCCCC"> to still a long way</font><font color="#E5E5E5"> to</font>

481
00:22:04,960 --> 00:22:10,050
go but the goal would be to<font color="#E5E5E5"> basically</font>

482
00:22:07,210 --> 00:22:11,920
enforce it<font color="#E5E5E5"> on all new launches and</font>

483
00:22:10,050 --> 00:22:14,860
especially<font color="#E5E5E5"> in all the sensitive</font>

484
00:22:11,920 --> 00:22:17,500
applications<font color="#E5E5E5"> and we also investigating</font>

485
00:22:14,860 --> 00:22:19,928
how we can get<font color="#E5E5E5"> rid of</font><font color="#CCCCCC"> unsafe Evo we</font>

486
00:22:17,500 --> 00:22:21,610
basically have it in some core libraries

487
00:22:19,929 --> 00:22:24,070
that are<font color="#CCCCCC"> loaded almost everywhere so we</font>

488
00:22:21,610 --> 00:22:27,459
<font color="#E5E5E5">cannot remove it at the moment</font><font color="#CCCCCC"> but</font><font color="#E5E5E5"> we're</font>

489
00:22:24,070 --> 00:22:30,189
trying to<font color="#E5E5E5"> you know to change that and</font>

490
00:22:27,460 --> 00:22:32,020
also<font color="#E5E5E5"> in some places</font><font color="#CCCCCC"> we were</font>

491
00:22:30,190 --> 00:22:36,600
experimenting<font color="#CCCCCC"> if we can get</font><font color="#E5E5E5"> rid of</font>

492
00:22:32,020 --> 00:22:40,870
<font color="#E5E5E5">strict dynamic but that's very hard and</font>

493
00:22:36,600 --> 00:22:43,299
only books in some<font color="#E5E5E5"> cases we have</font><font color="#CCCCCC"> a</font>

494
00:22:40,870 --> 00:22:45,010
<font color="#E5E5E5">couple of cool tools that we use also</font>

495
00:22:43,299 --> 00:22:47,620
internally and<font color="#CCCCCC"> that are open sourced</font><font color="#E5E5E5"> and</font>

496
00:22:45,010 --> 00:22:49,960
externally available with<font color="#E5E5E5"> the CSP</font>

497
00:22:47,620 --> 00:22:52,090
evaluator<font color="#E5E5E5"> you basically paste a content</font>

498
00:22:49,960 --> 00:22:55,540
security policy and<font color="#CCCCCC"> it tells</font><font color="#E5E5E5"> you if that</font>

499
00:22:52,090 --> 00:22:56,949
policy<font color="#E5E5E5"> is useful to mitigate cross-site</font>

500
00:22:55,540 --> 00:23:00,490
scripting<font color="#CCCCCC"> if there's anything</font><font color="#E5E5E5"> read it's</font>

501
00:22:56,950 --> 00:23:02,740
usually a<font color="#E5E5E5"> bad sign</font><font color="#CCCCCC"> and internally</font><font color="#E5E5E5"> we</font>

502
00:23:00,490 --> 00:23:04,630
also have very powerful<font color="#E5E5E5"> tools</font><font color="#CCCCCC"> that</font>

503
00:23:02,740 --> 00:23:07,299
basically monitor this<font color="#E5E5E5"> USP coverage of</font>

504
00:23:04,630 --> 00:23:09,520
<font color="#E5E5E5">outgoing traffic that you know crunch</font>

505
00:23:07,299 --> 00:23:12,490
<font color="#E5E5E5">together like the millions of CSP</font>

506
00:23:09,520 --> 00:23:14,590
reports we<font color="#E5E5E5"> receive deduplicate them and</font>

507
00:23:12,490 --> 00:23:16,360
provide like actionable items for

508
00:23:14,590 --> 00:23:19,240
developers<font color="#E5E5E5"> especially in the rollout</font>

509
00:23:16,360 --> 00:23:21,340
phase<font color="#CCCCCC"> to remove CSP blockers like inline</font>

510
00:23:19,240 --> 00:23:23,290
<font color="#CCCCCC">event handlers or you know if someone</font>

511
00:23:21,340 --> 00:23:26,290
forgot to<font color="#CCCCCC"> nonce</font><font color="#E5E5E5"> script or something</font><font color="#CCCCCC"> like</font>

512
00:23:23,290 --> 00:23:27,970
that<font color="#E5E5E5"> and with that</font><font color="#CCCCCC"> I'm handing over to</font>

513
00:23:26,290 --> 00:23:32,320
Mickey<font color="#E5E5E5"> talk about some resource</font>

514
00:23:27,970 --> 00:23:34,570
integrity awesome so that was CSP<font color="#E5E5E5"> right</font>

515
00:23:32,320 --> 00:23:37,299
it was the the<font color="#E5E5E5"> the top mitigation</font>

516
00:23:34,570 --> 00:23:39,850
against cross-site scripting<font color="#CCCCCC"> we like</font><font color="#E5E5E5"> to</font>

517
00:23:37,299 --> 00:23:42,490
introduce you some other mitigations

518
00:23:39,850 --> 00:23:45,790
that<font color="#E5E5E5"> are part of the web platform</font><font color="#CCCCCC"> not</font>

519
00:23:42,490 --> 00:23:48,520
all<font color="#CCCCCC"> of them are implemented and</font><font color="#E5E5E5"> I would</font>

520
00:23:45,790 --> 00:23:50,710
say which browser support which but they

521
00:23:48,520 --> 00:23:53,918
are<font color="#E5E5E5"> very interesting and some are very</font>

522
00:23:50,710 --> 00:23:56,799
low<font color="#CCCCCC"> effort to implement</font><font color="#E5E5E5"> in</font><font color="#CCCCCC"> your web</font>

523
00:23:53,919 --> 00:23:58,510
sites and so we would really<font color="#E5E5E5"> like to see</font>

524
00:23:56,799 --> 00:24:01,450
some the adoption of some of them to

525
00:23:58,510 --> 00:24:04,240
actually increase in the wild so for

526
00:24:01,450 --> 00:24:07,000
example one such example of an easy

527
00:24:04,240 --> 00:24:10,630
<font color="#E5E5E5">mitigation to adopt is sub resource and</font>

528
00:24:07,000 --> 00:24:15,220
integrity<font color="#E5E5E5"> or SR I basically a lot of</font>

529
00:24:10,630 --> 00:24:17,380
<font color="#E5E5E5">websites have to source external scripts</font>

530
00:24:15,220 --> 00:24:21,309
<font color="#E5E5E5">with a script tag from a third party</font>

531
00:24:17,380 --> 00:24:23,890
usually<font color="#E5E5E5"> a CDN</font><font color="#CCCCCC"> and</font><font color="#E5E5E5"> the problem with that</font>

532
00:24:21,309 --> 00:24:26,860
<font color="#E5E5E5">is that you are executing in your web</font>

533
00:24:23,890 --> 00:24:29,590
origin<font color="#CCCCCC"> basically untrusted</font><font color="#E5E5E5"> JavaScript</font>

534
00:24:26,860 --> 00:24:32,469
right<font color="#E5E5E5"> you you trust it but if for</font>

535
00:24:29,590 --> 00:24:34,928
example the CDN gets hacked<font color="#E5E5E5"> the content</font>

536
00:24:32,470 --> 00:24:36,850
of<font color="#CCCCCC"> that JavaScript can change and</font><font color="#E5E5E5"> can</font>

537
00:24:34,929 --> 00:24:39,669
become malicious<font color="#E5E5E5"> and this is a vector</font>

538
00:24:36,850 --> 00:24:40,330
<font color="#E5E5E5">for for example</font><font color="#CCCCCC"> large-scale attacks of</font>

539
00:24:39,669 --> 00:24:44,590
<font color="#CCCCCC">webworms</font>

540
00:24:40,330 --> 00:24:46,600
this has<font color="#E5E5E5"> happened in the</font><font color="#CCCCCC"> past</font><font color="#E5E5E5"> and a very</font>

541
00:24:44,590 --> 00:24:49,059
simple mitigation against that is having

542
00:24:46,600 --> 00:24:51,850
some<font color="#CCCCCC"> kind of</font><font color="#E5E5E5"> integrity check of the</font>

543
00:24:49,059 --> 00:24:54,940
content of<font color="#E5E5E5"> JavaScript that you are</font>

544
00:24:51,850 --> 00:24:57,969
<font color="#E5E5E5">including so in supported supporting</font>

545
00:24:54,940 --> 00:25:00,669
browsers<font color="#CCCCCC"> will have a table</font><font color="#E5E5E5"> about that</font>

546
00:24:57,970 --> 00:25:03,400
it's as easy as<font color="#E5E5E5"> adding an integrity tag</font>

547
00:25:00,669 --> 00:25:08,500
and sorry attribute to the script tag

548
00:25:03,400 --> 00:25:11,710
you just do integrity and<font color="#E5E5E5"> a sha hash of</font>

549
00:25:08,500 --> 00:25:15,429
the<font color="#CCCCCC"> contents of</font><font color="#E5E5E5"> the javascript file you</font>

550
00:25:11,710 --> 00:25:17,800
are<font color="#E5E5E5"> including so there are tools to to</font>

551
00:25:15,429 --> 00:25:20,340
compute the<font color="#E5E5E5"> hash</font><font color="#CCCCCC"> you can go to for</font>

552
00:25:17,800 --> 00:25:23,460
example<font color="#E5E5E5"> SSRI hash org or</font><font color="#CCCCCC"> your just</font>

553
00:25:20,340 --> 00:25:28,270
<font color="#CCCCCC">Google or Bing</font>

554
00:25:23,460 --> 00:25:30,760
<font color="#CCCCCC">SSRI hash</font><font color="#E5E5E5"> generator and cross-origin</font>

555
00:25:28,270 --> 00:25:33,309
<font color="#CCCCCC">anonymous is actually not</font><font color="#E5E5E5"> part</font><font color="#CCCCCC"> of SSRI</font>

556
00:25:30,760 --> 00:25:35,890
it's part of course<font color="#E5E5E5"> specification just</font>

557
00:25:33,309 --> 00:25:37,960
means that the<font color="#E5E5E5"> etc xhr does not send</font>

558
00:25:35,890 --> 00:25:41,830
credentials because<font color="#E5E5E5"> you also want that</font>

559
00:25:37,960 --> 00:25:45,520
<font color="#CCCCCC">extra bit so nowadays if you look at for</font>

560
00:25:41,830 --> 00:25:47,949
<font color="#E5E5E5">example jQuery jQuery official web</font><font color="#CCCCCC"> page</font>

561
00:25:45,520 --> 00:25:51,070
<font color="#CCCCCC">it will automatically ask you to copy</font>

562
00:25:47,950 --> 00:25:51,909
<font color="#CCCCCC">paste</font><font color="#E5E5E5"> tag that has SSRI which is really</font>

563
00:25:51,070 --> 00:25:54,189
cool

564
00:25:51,909 --> 00:25:55,990
<font color="#E5E5E5">I would like to see this more adopted in</font>

565
00:25:54,190 --> 00:25:59,950
the<font color="#CCCCCC"> wild because</font><font color="#E5E5E5"> it's a very easy way</font><font color="#CCCCCC"> of</font>

566
00:25:55,990 --> 00:26:01,870
stopping<font color="#CCCCCC"> these kind of attacks so</font>

567
00:25:59,950 --> 00:26:04,530
browser support for<font color="#CCCCCC"> a3 is pretty good I</font>

568
00:26:01,870 --> 00:26:10,658
would say<font color="#E5E5E5"> all real browsers</font><font color="#CCCCCC"> supported</font>

569
00:26:04,530 --> 00:26:13,990
<font color="#CCCCCC">Firefox Chrome Safari a new edge</font><font color="#E5E5E5"> so</font>

570
00:26:10,659 --> 00:26:17,460
that's and of course<font color="#E5E5E5"> it degrades</font>

571
00:26:13,990 --> 00:26:19,870
gracefully for<font color="#CCCCCC"> old</font><font color="#E5E5E5"> browsers so basically</font>

572
00:26:17,460 --> 00:26:23,470
it<font color="#CCCCCC"> just gets ignored it's an attribute</font>

573
00:26:19,870 --> 00:26:26,500
<font color="#CCCCCC">that gets ignored</font><font color="#E5E5E5"> so there's no drawback</font>

574
00:26:23,470 --> 00:26:28,840
to actually use<font color="#E5E5E5"> it things like cookies</font>

575
00:26:26,500 --> 00:26:30,669
are very<font color="#CCCCCC"> interesting mitigation agur</font>

576
00:26:28,840 --> 00:26:33,418
against cross-site request forgery

577
00:26:30,669 --> 00:26:36,419
<font color="#E5E5E5">so in in cross-site request forgery</font>

578
00:26:33,419 --> 00:26:36,419
attacks

579
00:26:36,720 --> 00:26:41,920
<font color="#CCCCCC">basically when an attacker</font><font color="#E5E5E5"> tricks</font><font color="#CCCCCC"> the</font>

580
00:26:39,940 --> 00:26:43,840
browser to send an authentic

581
00:26:41,920 --> 00:26:45,610
<font color="#CCCCCC">get it request to a vulnerable</font><font color="#E5E5E5"> website</font>

582
00:26:43,840 --> 00:26:47,919
<font color="#CCCCCC">the problem is that that</font><font color="#E5E5E5"> request is</font>

583
00:26:45,610 --> 00:26:50,889
authenticated<font color="#E5E5E5"> so it's sent along with</font>

584
00:26:47,920 --> 00:26:54,820
<font color="#CCCCCC">the cookies of the user even</font><font color="#E5E5E5"> if the</font>

585
00:26:50,890 --> 00:26:57,310
navigation is across sites<font color="#E5E5E5"> right so it</font>

586
00:26:54,820 --> 00:26:59,200
<font color="#E5E5E5">is from the embedding let's say</font><font color="#CCCCCC"> evil.com</font>

587
00:26:57,310 --> 00:27:03,909
<font color="#E5E5E5">that has an image or a form</font><font color="#CCCCCC"> to</font>

588
00:26:59,200 --> 00:27:07,180
<font color="#E5E5E5">vulnerable bank.com</font><font color="#CCCCCC"> and the idea is what</font>

589
00:27:03,910 --> 00:27:09,580
if<font color="#E5E5E5"> developers could restrict cookies to</font>

590
00:27:07,180 --> 00:27:13,690
<font color="#E5E5E5">actually be signed only if they there is</font>

591
00:27:09,580 --> 00:27:17,320
no cross site navigation<font color="#CCCCCC"> so now only</font><font color="#E5E5E5"> if</font>

592
00:27:13,690 --> 00:27:20,230
the navigation is same site<font color="#E5E5E5"> and the idea</font>

593
00:27:17,320 --> 00:27:23,370
<font color="#E5E5E5">is to add a flag to the cookie called</font>

594
00:27:20,230 --> 00:27:27,460
same<font color="#CCCCCC"> site</font><font color="#E5E5E5"> that</font><font color="#CCCCCC"> could have two</font><font color="#E5E5E5"> values</font>

595
00:27:23,370 --> 00:27:29,860
<font color="#E5E5E5">strict and</font><font color="#CCCCCC"> locks if you use strict</font>

596
00:27:27,460 --> 00:27:32,560
<font color="#E5E5E5">cookie cookies are never sent when there</font>

597
00:27:29,860 --> 00:27:35,050
is<font color="#E5E5E5"> cross site navigation when there is</font>

598
00:27:32,560 --> 00:27:37,149
<font color="#E5E5E5">lacks cookies are not sent when there is</font>

599
00:27:35,050 --> 00:27:41,070
<font color="#E5E5E5">cross site navigation and there is an</font>

600
00:27:37,150 --> 00:27:43,960
unsafe<font color="#E5E5E5"> HTTP method such as post post</font>

601
00:27:41,070 --> 00:27:48,070
<font color="#E5E5E5">this means that for</font><font color="#CCCCCC"> example if you</font>

602
00:27:43,960 --> 00:27:51,700
receive<font color="#E5E5E5"> an email on your</font><font color="#CCCCCC"> Gmail or</font><font color="#E5E5E5"> yahoo</font>

603
00:27:48,070 --> 00:27:54,010
mail and you click<font color="#E5E5E5"> on it</font><font color="#CCCCCC"> this is a get</font>

604
00:27:51,700 --> 00:27:56,080
request right<font color="#E5E5E5"> and if you's tricked you</font>

605
00:27:54,010 --> 00:27:58,090
would not send<font color="#E5E5E5"> cookies at all so for</font>

606
00:27:56,080 --> 00:28:00,129
<font color="#E5E5E5">example your session would kind of</font>

607
00:27:58,090 --> 00:28:03,000
disappear so this might be<font color="#CCCCCC"> surprising to</font>

608
00:28:00,130 --> 00:28:06,250
<font color="#E5E5E5">some users so you have to wait the two</font>

609
00:28:03,000 --> 00:28:08,980
the<font color="#E5E5E5"> two levels of security in a strict</font>

610
00:28:06,250 --> 00:28:11,950
<font color="#E5E5E5">and locks give if you really have all</font>

611
00:28:08,980 --> 00:28:15,340
<font color="#E5E5E5">the side of the action with side effects</font>

612
00:28:11,950 --> 00:28:18,220
<font color="#CCCCCC">that has post or</font><font color="#E5E5E5"> boot or whatever then</font>

613
00:28:15,340 --> 00:28:20,800
you can use<font color="#CCCCCC"> relax</font><font color="#E5E5E5"> but the best would</font><font color="#CCCCCC"> be</font>

614
00:28:18,220 --> 00:28:23,710
<font color="#CCCCCC">to use strict</font><font color="#E5E5E5"> but then you have to take</font>

615
00:28:20,800 --> 00:28:26,139
care<font color="#E5E5E5"> into that</font><font color="#CCCCCC"> basically links external</font>

616
00:28:23,710 --> 00:28:29,380
links external navigation will have the

617
00:28:26,140 --> 00:28:33,490
user not logged<font color="#E5E5E5"> in when they jump on in</font>

618
00:28:29,380 --> 00:28:36,040
your<font color="#E5E5E5"> website the support for some</font><font color="#CCCCCC"> say</font>

619
00:28:33,490 --> 00:28:38,830
<font color="#CCCCCC">sim site cookie</font><font color="#E5E5E5"> is a little bit more</font>

620
00:28:36,040 --> 00:28:40,659
limited<font color="#CCCCCC"> Firefox just adopted adopted it</font>

621
00:28:38,830 --> 00:28:42,550
which is great news

622
00:28:40,660 --> 00:28:44,890
<font color="#E5E5E5">chrome</font><font color="#CCCCCC"> has it for a</font><font color="#E5E5E5"> couple of major</font>

623
00:28:42,550 --> 00:28:48,810
version and unfortunately there is no

624
00:28:44,890 --> 00:28:48,810
<font color="#E5E5E5">Safari nor edge support</font>

625
00:28:52,380 --> 00:28:57,430
let's talk about something<font color="#CCCCCC"> different</font>

626
00:28:54,160 --> 00:29:02,620
<font color="#CCCCCC">site isolation Corp</font><font color="#E5E5E5"> and from origin so</font>

627
00:28:57,430 --> 00:29:05,230
<font color="#CCCCCC">this steps out of the the pure web word</font>

628
00:29:02,620 --> 00:29:07,270
<font color="#E5E5E5">this is not against web vulnerability is</font>

629
00:29:05,230 --> 00:29:08,560
not against cross-site scripting or

630
00:29:07,270 --> 00:29:12,280
cross-site request forgery

631
00:29:08,560 --> 00:29:14,889
<font color="#CCCCCC">it is</font><font color="#E5E5E5"> mostly against let's see more</font>

632
00:29:12,280 --> 00:29:16,930
<font color="#E5E5E5">low-level</font><font color="#CCCCCC"> attacks</font><font color="#E5E5E5"> it is ensuring that</font>

633
00:29:14,890 --> 00:29:19,720
<font color="#E5E5E5">pages from different</font><font color="#CCCCCC"> web sites get</font>

634
00:29:16,930 --> 00:29:23,650
rendered<font color="#CCCCCC"> into</font><font color="#E5E5E5"> different processes in</font><font color="#CCCCCC"> the</font>

635
00:29:19,720 --> 00:29:26,830
<font color="#E5E5E5">operating system</font><font color="#CCCCCC"> this is done</font><font color="#E5E5E5"> to isolate</font>

636
00:29:23,650 --> 00:29:29,200
the<font color="#CCCCCC"> renderer</font><font color="#E5E5E5"> process in chromium here we</font>

637
00:29:26,830 --> 00:29:31,629
are<font color="#CCCCCC"> mostly talking about chromium only</font>

638
00:29:29,200 --> 00:29:34,870
this<font color="#E5E5E5"> is a because it's pretty much</font>

639
00:29:31,630 --> 00:29:36,520
designed<font color="#E5E5E5"> dependent other browsers have a</font>

640
00:29:34,870 --> 00:29:38,860
different way of using<font color="#E5E5E5"> a renderer</font>

641
00:29:36,520 --> 00:29:41,740
process don't ever render<font color="#CCCCCC"> process or</font>

642
00:29:38,860 --> 00:29:44,800
they have it<font color="#E5E5E5"> you know in a</font><font color="#CCCCCC"> different way</font>

643
00:29:41,740 --> 00:29:48,370
<font color="#CCCCCC">while chromium has a renderer process</font>

644
00:29:44,800 --> 00:29:51,159
and then has<font color="#E5E5E5"> sandboxes this goes one</font>

645
00:29:48,370 --> 00:29:54,010
step further<font color="#CCCCCC"> and basically says all the</font>

646
00:29:51,160 --> 00:29:58,290
data<font color="#E5E5E5"> ideally of one website has to be</font>

647
00:29:54,010 --> 00:30:01,360
<font color="#E5E5E5">constrained and limited to one process</font>

648
00:29:58,290 --> 00:30:03,070
<font color="#CCCCCC">it also blocks</font><font color="#E5E5E5"> process the process from</font>

649
00:30:01,360 --> 00:30:08,020
<font color="#E5E5E5">receiving sensitive data from other</font>

650
00:30:03,070 --> 00:30:12,250
<font color="#E5E5E5">sites in with some techniques</font><font color="#CCCCCC"> this</font><font color="#E5E5E5"> can</font>

651
00:30:08,020 --> 00:30:13,960
be enabled<font color="#E5E5E5"> is a chrome flag you do</font>

652
00:30:12,250 --> 00:30:15,970
chrome flags and then<font color="#CCCCCC"> you search</font><font color="#E5E5E5"> for a</font>

653
00:30:13,960 --> 00:30:19,240
strict<font color="#CCCCCC"> site isolation</font><font color="#E5E5E5"> and you enable it</font>

654
00:30:15,970 --> 00:30:21,670
<font color="#E5E5E5">it's not enabled</font><font color="#CCCCCC"> by default it will be</font>

655
00:30:19,240 --> 00:30:24,310
<font color="#E5E5E5">probably</font><font color="#CCCCCC"> in a while it's not</font><font color="#E5E5E5"> enabled by</font>

656
00:30:21,670 --> 00:30:26,230
<font color="#E5E5E5">default</font><font color="#CCCCCC"> because</font><font color="#E5E5E5"> it used to break a very</font>

657
00:30:24,310 --> 00:30:28,899
very very small<font color="#CCCCCC"> percentage of</font><font color="#E5E5E5"> websites</font>

658
00:30:26,230 --> 00:30:30,580
<font color="#CCCCCC">mostly they were very plug-in heavy</font><font color="#E5E5E5"> they</font>

659
00:30:28,900 --> 00:30:32,920
had<font color="#E5E5E5"> external plugins for their other</font>

660
00:30:30,580 --> 00:30:34,870
working and they they were<font color="#CCCCCC"> not</font>

661
00:30:32,920 --> 00:30:37,780
compatible with<font color="#E5E5E5"> this strict process</font>

662
00:30:34,870 --> 00:30:41,860
<font color="#E5E5E5">isolation so why am i bringing this up</font>

663
00:30:37,780 --> 00:30:43,270
<font color="#E5E5E5">like now like</font><font color="#CCCCCC"> this</font><font color="#E5E5E5"> is a might be</font>

664
00:30:41,860 --> 00:30:45,699
surprising<font color="#CCCCCC"> my chrome has pretty good</font>

665
00:30:43,270 --> 00:30:48,160
<font color="#E5E5E5">security already with sandbox why we</font>

666
00:30:45,700 --> 00:30:49,620
need the<font color="#CCCCCC"> extra isolation well you might</font>

667
00:30:48,160 --> 00:30:51,520
have<font color="#CCCCCC"> heard</font><font color="#E5E5E5"> of Spectre and meltdown</font>

668
00:30:49,620 --> 00:30:54,459
vulnerabilities

669
00:30:51,520 --> 00:30:56,889
this makes exploitation on the web of

670
00:30:54,460 --> 00:31:01,290
<font color="#CCCCCC">specially spectrum vulnerability much</font>

671
00:30:56,890 --> 00:31:05,049
much harder<font color="#CCCCCC"> there are some theoretical</font>

672
00:31:01,290 --> 00:31:07,360
<font color="#E5E5E5">exploits that try to put</font>

673
00:31:05,049 --> 00:31:10,350
attacker controlled payloads<font color="#E5E5E5"> either as a</font>

674
00:31:07,360 --> 00:31:13,719
resource<font color="#E5E5E5"> such as an image or as a</font>

675
00:31:10,350 --> 00:31:16,449
document like HTML in<font color="#CCCCCC"> the context of a</font>

676
00:31:13,720 --> 00:31:19,269
page<font color="#CCCCCC"> and</font><font color="#E5E5E5"> then try to exfiltrate it</font><font color="#CCCCCC"> by</font>

677
00:31:16,450 --> 00:31:22,289
exploiting<font color="#E5E5E5"> the speculative attack of</font>

678
00:31:19,269 --> 00:31:24,460
spectra so this became this was

679
00:31:22,289 --> 00:31:26,470
reprioritized<font color="#CCCCCC"> and this became more</font>

680
00:31:24,460 --> 00:31:28,330
important<font color="#E5E5E5"> so you might have read</font>

681
00:31:26,470 --> 00:31:31,019
somewhere<font color="#CCCCCC"> if you use</font><font color="#E5E5E5"> Chrome enables</font>

682
00:31:28,330 --> 00:31:33,939
strict<font color="#CCCCCC"> site isolation to protect against</font>

683
00:31:31,019 --> 00:31:37,600
spectrum

684
00:31:33,940 --> 00:31:41,730
<font color="#E5E5E5">what is Corp Corp is important part of</font>

685
00:31:37,600 --> 00:31:44,379
<font color="#E5E5E5">Saia at site isolation that basically</font>

686
00:31:41,730 --> 00:31:46,799
restricts which<font color="#CCCCCC"> cross-origin data is</font>

687
00:31:44,379 --> 00:31:51,549
sent to<font color="#E5E5E5"> render process or a process</font>

688
00:31:46,799 --> 00:31:54,489
limiting<font color="#E5E5E5"> the</font><font color="#CCCCCC"> access to such data an</font>

689
00:31:51,549 --> 00:31:57,158
<font color="#E5E5E5">example is for example if attacker as I</font>

690
00:31:54,489 --> 00:32:00,129
said tries to load a document like an

691
00:31:57,159 --> 00:32:04,590
<font color="#CCCCCC">HTML file</font><font color="#E5E5E5"> that he controls in an image</font>

692
00:32:00,129 --> 00:32:08,230
tag<font color="#E5E5E5"> that would be blocked with with Korb</font>

693
00:32:04,590 --> 00:32:11,230
<font color="#CCCCCC">this is as I said before mostly for</font>

694
00:32:08,230 --> 00:32:14,289
<font color="#E5E5E5">mitigating against speculative side such</font>

695
00:32:11,230 --> 00:32:15,940
an alert acts like spectra<font color="#CCCCCC"> this is</font><font color="#E5E5E5"> which</font>

696
00:32:14,289 --> 00:32:18,220
will be<font color="#CCCCCC"> enabled by default</font><font color="#E5E5E5"> it will be</font>

697
00:32:15,940 --> 00:32:21,190
part of site isolation when<font color="#CCCCCC"> sighted</font>

698
00:32:18,220 --> 00:32:23,940
<font color="#E5E5E5">solution is enabled there is another</font>

699
00:32:21,190 --> 00:32:27,399
<font color="#E5E5E5">proposal that it's actually pretty old</font>

700
00:32:23,940 --> 00:32:30,730
proposal that now has regained steam

701
00:32:27,399 --> 00:32:33,129
<font color="#CCCCCC">it's called from origin from</font><font color="#E5E5E5"> already</font>

702
00:32:30,730 --> 00:32:35,350
very simply put<font color="#E5E5E5"> is if this is delivered</font>

703
00:32:33,129 --> 00:32:36,998
with a header so<font color="#CCCCCC"> don't the two I said</font>

704
00:32:35,350 --> 00:32:38,769
before suicide isolation is a setting in

705
00:32:36,999 --> 00:32:42,399
<font color="#CCCCCC">the browser</font><font color="#E5E5E5"> this is</font><font color="#CCCCCC"> a header like Conn</font>

706
00:32:38,769 --> 00:32:42,820
security policy like the ones we'll see

707
00:32:42,399 --> 00:32:45,488
later

708
00:32:42,820 --> 00:32:48,340
so from origin<font color="#E5E5E5"> basically a webmaster can</font>

709
00:32:45,489 --> 00:32:51,460
put from origin to all the<font color="#E5E5E5"> documents of</font>

710
00:32:48,340 --> 00:32:53,289
<font color="#E5E5E5">the resources to prevent prevent them</font>

711
00:32:51,460 --> 00:32:55,809
from being loaded<font color="#E5E5E5"> and included by</font>

712
00:32:53,289 --> 00:32:57,580
<font color="#CCCCCC">non-white listed origins</font><font color="#E5E5E5"> so I have a lot</font>

713
00:32:55,809 --> 00:33:03,460
of<font color="#E5E5E5"> images</font><font color="#CCCCCC"> and</font><font color="#E5E5E5"> I don't want these images</font>

714
00:32:57,580 --> 00:33:05,470
to<font color="#CCCCCC"> be loaded from whatever</font><font color="#E5E5E5"> com so yes</font>

715
00:33:03,460 --> 00:33:07,480
sure this mitigate inline linking like

716
00:33:05,470 --> 00:33:10,330
there are even some attacks were

717
00:33:07,480 --> 00:33:13,600
bandwidth<font color="#CCCCCC"> leaching</font><font color="#E5E5E5"> this kind of things</font>

718
00:33:10,330 --> 00:33:15,399
you could inflate the bill<font color="#E5E5E5"> the hosting</font>

719
00:33:13,600 --> 00:33:18,790
<font color="#E5E5E5">bill of</font><font color="#CCCCCC"> someone by just including in</font>

720
00:33:15,399 --> 00:33:21,939
some<font color="#CCCCCC"> high traffic forum</font><font color="#E5E5E5"> or soar 4chan</font>

721
00:33:18,790 --> 00:33:26,620
like all the heaviest resources that you

722
00:33:21,940 --> 00:33:28,290
have<font color="#CCCCCC"> but this</font><font color="#E5E5E5"> goes even further in</font>

723
00:33:26,620 --> 00:33:35,229
mitigating attacks such<font color="#CCCCCC"> as</font><font color="#E5E5E5"> its spectra</font>

724
00:33:28,290 --> 00:33:38,790
<font color="#CCCCCC">so it is</font><font color="#E5E5E5"> a interesting extra that is in</font>

725
00:33:35,230 --> 00:33:42,040
the<font color="#E5E5E5"> hands of web developers to restrict</font>

726
00:33:38,790 --> 00:33:47,678
<font color="#E5E5E5">basically all the resources from being</font>

727
00:33:42,040 --> 00:33:49,600
loaded from<font color="#E5E5E5"> outside so here are some</font>

728
00:33:47,679 --> 00:33:53,110
upcoming<font color="#E5E5E5"> mitigations that are not</font>

729
00:33:49,600 --> 00:33:57,280
implemented yet<font color="#CCCCCC"> but that we would really</font>

730
00:33:53,110 --> 00:34:01,389
like<font color="#E5E5E5"> to see happening soon and yeah this</font>

731
00:33:57,280 --> 00:34:04,059
<font color="#E5E5E5">needs of course</font><font color="#CCCCCC"> let's say full consensus</font>

732
00:34:01,390 --> 00:34:07,360
from<font color="#E5E5E5"> the community in the industry w3</font>

733
00:34:04,059 --> 00:34:10,840
and every every other actor

734
00:34:07,360 --> 00:34:14,918
the first is<font color="#CCCCCC"> submergence</font><font color="#E5E5E5"> so the policies</font>

735
00:34:10,840 --> 00:34:17,320
are a pretty extensive<font color="#E5E5E5"> and controversial</font>

736
00:34:14,918 --> 00:34:19,270
<font color="#E5E5E5">maybe topic from an implementation point</font>

737
00:34:17,320 --> 00:34:22,270
of view mostly not from a concept point

738
00:34:19,270 --> 00:34:23,859
of view the idea is to subdivide with

739
00:34:22,270 --> 00:34:27,159
the concept<font color="#CCCCCC"> of web origin in a more</font>

740
00:34:23,859 --> 00:34:29,889
granular way by<font color="#E5E5E5"> adding to the web origin</font>

741
00:34:27,159 --> 00:34:36,340
tuple which is scheme host and port<font color="#E5E5E5"> like</font>

742
00:34:29,889 --> 00:34:39,369
<font color="#E5E5E5">HTTP</font><font color="#CCCCCC"> Google 443</font><font color="#E5E5E5"> a namespace</font><font color="#CCCCCC"> that is</font>

743
00:34:36,340 --> 00:34:42,940
provided<font color="#E5E5E5"> by the webmaster like accounts</font>

744
00:34:39,369 --> 00:34:45,970
or user<font color="#CCCCCC"> 1 this makes makes it possible</font>

745
00:34:42,940 --> 00:34:49,980
to isolate different<font color="#CCCCCC"> applications that</font>

746
00:34:45,969 --> 00:34:52,330
<font color="#E5E5E5">are running in the same web origins</font><font color="#CCCCCC"> by</font>

747
00:34:49,980 --> 00:34:54,730
not<font color="#CCCCCC"> having to have you know a subdomain</font>

748
00:34:52,330 --> 00:34:55,980
<font color="#E5E5E5">or a different domain</font><font color="#CCCCCC"> so there</font><font color="#E5E5E5"> are some</font>

749
00:34:54,730 --> 00:34:58,990
cool

750
00:34:55,980 --> 00:35:02,290
applications of<font color="#E5E5E5"> sub volumes like per</font>

751
00:34:58,990 --> 00:35:04,660
user origins this<font color="#E5E5E5"> will be it will</font>

752
00:35:02,290 --> 00:35:06,310
provide extremely high security<font color="#CCCCCC"> both</font><font color="#E5E5E5"> for</font>

753
00:35:04,660 --> 00:35:07,990
cookies for basically everything<font color="#CCCCCC"> you</font>

754
00:35:06,310 --> 00:35:11,380
know web origins are the foundation of

755
00:35:07,990 --> 00:35:13,180
web security<font color="#CCCCCC"> we rely on them making the</font>

756
00:35:11,380 --> 00:35:16,320
concept of<font color="#E5E5E5"> origin more a fine-grained</font>

757
00:35:13,180 --> 00:35:18,879
just automatically makes a lot of<font color="#E5E5E5"> things</font>

758
00:35:16,320 --> 00:35:22,390
<font color="#CCCCCC">attacks</font><font color="#E5E5E5"> harder and a lot of things more</font>

759
00:35:18,880 --> 00:35:26,350
<font color="#E5E5E5">secure</font><font color="#CCCCCC"> of course</font><font color="#E5E5E5"> it also makes it could</font>

760
00:35:22,390 --> 00:35:27,940
create some problems can be used to

761
00:35:26,350 --> 00:35:31,600
segregate user<font color="#E5E5E5"> content from the main</font>

762
00:35:27,940 --> 00:35:32,320
origin<font color="#E5E5E5"> let's say that</font><font color="#CCCCCC"> ok</font><font color="#E5E5E5"> so if you have</font>

763
00:35:31,600 --> 00:35:33,580
<font color="#E5E5E5">user content</font>

764
00:35:32,320 --> 00:35:36,330
you should really<font color="#CCCCCC"> use another domain</font>

765
00:35:33,580 --> 00:35:40,960
<font color="#E5E5E5">right like Google user content</font><font color="#CCCCCC"> comm or</font>

766
00:35:36,330 --> 00:35:42,670
github<font color="#E5E5E5"> content</font><font color="#CCCCCC"> koat.com or dot</font><font color="#E5E5E5"> IO but</font>

767
00:35:40,960 --> 00:35:46,570
let's say you really<font color="#E5E5E5"> can't and you have</font>

768
00:35:42,670 --> 00:35:49,180
slash user content slash<font color="#E5E5E5"> well</font><font color="#CCCCCC"> then in</font>

769
00:35:46,570 --> 00:35:51,790
theory<font color="#E5E5E5"> you could use sub origins to make</font>

770
00:35:49,180 --> 00:35:55,000
it so it exactly<font color="#E5E5E5"> like it was another</font>

771
00:35:51,790 --> 00:35:58,509
origin<font color="#E5E5E5"> so that's very powerful</font><font color="#CCCCCC"> another</font>

772
00:35:55,000 --> 00:36:00,850
<font color="#CCCCCC">idea</font><font color="#E5E5E5"> is sometimes you have sensitive</font>

773
00:35:58,510 --> 00:36:04,570
functionalities on the same<font color="#CCCCCC"> origin like</font>

774
00:36:00,850 --> 00:36:05,589
slash admin<font color="#E5E5E5"> WP admin is</font><font color="#CCCCCC"> WordPress admin</font>

775
00:36:04,570 --> 00:36:10,120
right

776
00:36:05,590 --> 00:36:12,040
you don't want<font color="#E5E5E5"> usually to be on the same</font>

777
00:36:10,120 --> 00:36:14,470
origin<font color="#E5E5E5"> of the main content</font><font color="#CCCCCC"> especially if</font>

778
00:36:12,040 --> 00:36:18,070
you allow user content<font color="#E5E5E5"> you allow user</font>

779
00:36:14,470 --> 00:36:20,490
uploads<font color="#E5E5E5"> and so on</font><font color="#CCCCCC"> this</font><font color="#E5E5E5"> would make it</font>

780
00:36:18,070 --> 00:36:26,200
<font color="#E5E5E5">possible to isolate such sensitive</font>

781
00:36:20,490 --> 00:36:29,500
functionalities easier so adopting<font color="#E5E5E5"> sub</font>

782
00:36:26,200 --> 00:36:32,669
origins might require and some

783
00:36:29,500 --> 00:36:36,220
refactoring<font color="#E5E5E5"> of existing web applications</font>

784
00:36:32,670 --> 00:36:40,270
<font color="#CCCCCC">this is because they're they're come to</font>

785
00:36:36,220 --> 00:36:43,540
be more<font color="#E5E5E5"> communication types supporting</font>

786
00:36:40,270 --> 00:36:47,320
<font color="#CCCCCC">to sub origin sabores</font><font color="#E5E5E5"> into</font><font color="#CCCCCC"> the let's say</font>

787
00:36:43,540 --> 00:36:51,070
parent origin<font color="#E5E5E5"> and submerge into an</font>

788
00:36:47,320 --> 00:36:53,500
external origin<font color="#E5E5E5"> so in case of</font>

789
00:36:51,070 --> 00:36:57,970
communication sub origin to sub origin

790
00:36:53,500 --> 00:36:59,890
well then the receiving or well the

791
00:36:57,970 --> 00:37:02,140
other page the other<font color="#E5E5E5"> documents should</font>

792
00:36:59,890 --> 00:37:05,529
just have declared the<font color="#CCCCCC"> same sub origin</font>

793
00:37:02,140 --> 00:37:08,560
<font color="#CCCCCC">via a barrage in header</font><font color="#E5E5E5"> so this this</font>

794
00:37:05,530 --> 00:37:12,160
makes it them<font color="#E5E5E5"> both part of the same sub</font>

795
00:37:08,560 --> 00:37:14,650
origin and everything works<font color="#CCCCCC"> if you have</font>

796
00:37:12,160 --> 00:37:16,779
if you<font color="#CCCCCC"> want to</font><font color="#E5E5E5"> communicate with a parent</font>

797
00:37:14,650 --> 00:37:19,930
origin go to<font color="#E5E5E5"> the origin in general then</font>

798
00:37:16,780 --> 00:37:22,480
you need<font color="#E5E5E5"> the origin based receiver or</font>

799
00:37:19,930 --> 00:37:24,730
sender<font color="#E5E5E5"> let's say endpoint to add access</font>

800
00:37:22,480 --> 00:37:26,800
control allow sub origin which<font color="#CCCCCC"> is a new</font>

801
00:37:24,730 --> 00:37:29,140
header<font color="#E5E5E5"> there is access control allow</font>

802
00:37:26,800 --> 00:37:31,600
origin right but there would be allow

803
00:37:29,140 --> 00:37:33,009
sub origin<font color="#E5E5E5"> maybe this is not set</font><font color="#CCCCCC"> in</font>

804
00:37:31,600 --> 00:37:36,640
stone<font color="#CCCCCC"> of course this has been discussed</font>

805
00:37:33,010 --> 00:37:38,380
and<font color="#E5E5E5"> some origin</font><font color="#CCCCCC"> to extern you that</font><font color="#E5E5E5"> the</font>

806
00:37:36,640 --> 00:37:41,770
other<font color="#CCCCCC"> endpoint</font><font color="#E5E5E5"> should have access</font>

807
00:37:38,380 --> 00:37:46,339
control allow origin<font color="#E5E5E5"> so here I would</font>

808
00:37:41,770 --> 00:37:50,269
<font color="#CCCCCC">like to demo</font><font color="#E5E5E5"> or I'd like to demo</font>

809
00:37:46,339 --> 00:37:52,849
<font color="#E5E5E5">Chrome extension that</font><font color="#CCCCCC"> we created an</font>

810
00:37:50,269 --> 00:37:56,359
intern in our<font color="#E5E5E5"> team</font><font color="#CCCCCC"> Elena</font><font color="#E5E5E5"> UNESCO called</font>

811
00:37:52,849 --> 00:37:58,549
the sub originator<font color="#E5E5E5"> it's good for testing</font>

812
00:37:56,359 --> 00:38:00,650
<font color="#E5E5E5">and prototyping</font><font color="#CCCCCC"> submarines</font><font color="#E5E5E5"> so basically</font>

813
00:37:58,549 --> 00:38:02,269
says if the<font color="#CCCCCC"> website you are testing</font>

814
00:38:00,650 --> 00:38:05,089
would work out of the box with<font color="#E5E5E5"> the</font>

815
00:38:02,269 --> 00:38:16,459
<font color="#E5E5E5">Borgias or if it needs modifications and</font>

816
00:38:05,089 --> 00:38:20,599
which ones<font color="#E5E5E5"> so let's</font><font color="#CCCCCC"> we have this</font><font color="#E5E5E5"> problem</font>

817
00:38:16,459 --> 00:38:22,729
at Google<font color="#E5E5E5"> we have</font><font color="#CCCCCC"> some Google services</font>

818
00:38:20,599 --> 00:38:24,769
that are for mostly for historical

819
00:38:22,729 --> 00:38:27,828
reasons<font color="#CCCCCC"> on</font><font color="#E5E5E5"> the main domain of Google</font>

820
00:38:24,769 --> 00:38:29,479
dub-dub-dub<font color="#CCCCCC"> dot google.com of course</font>

821
00:38:27,829 --> 00:38:34,279
<font color="#CCCCCC">depth of that</font><font color="#E5E5E5"> is a very sensitive domain</font>

822
00:38:29,479 --> 00:38:36,979
and let's go to dab dab<font color="#CCCCCC"> dab the</font>

823
00:38:34,279 --> 00:38:39,979
google.com slash<font color="#E5E5E5"> about okay</font>

824
00:38:36,979 --> 00:38:46,160
this is some these are<font color="#E5E5E5"> some static web</font>

825
00:38:39,979 --> 00:38:49,879
<font color="#CCCCCC">pages</font><font color="#E5E5E5"> that are updated frequently and</font>

826
00:38:46,160 --> 00:38:52,868
they often<font color="#E5E5E5"> use</font><font color="#CCCCCC"> a</font><font color="#E5E5E5"> different technology</font>

827
00:38:49,880 --> 00:38:55,640
<font color="#E5E5E5">stack of what we use for</font><font color="#CCCCCC"> our products</font>

828
00:38:52,869 --> 00:38:58,069
<font color="#CCCCCC">this means that there is a</font><font color="#E5E5E5"> potential for</font>

829
00:38:55,640 --> 00:38:59,868
them<font color="#CCCCCC"> to have some vulnerabilities we are</font>

830
00:38:58,069 --> 00:39:02,779
not<font color="#E5E5E5"> aware of and maybe we would</font><font color="#CCCCCC"> not have</font>

831
00:38:59,869 --> 00:39:05,449
on other products<font color="#E5E5E5"> and but being on the</font>

832
00:39:02,779 --> 00:39:08,109
same origin<font color="#CCCCCC"> this</font><font color="#E5E5E5"> means that this</font>

833
00:39:05,449 --> 00:39:11,420
<font color="#E5E5E5">vulnerability and XSS for example in in</font>

834
00:39:08,109 --> 00:39:14,269
these static pages<font color="#E5E5E5"> would be as bad as</font>

835
00:39:11,420 --> 00:39:17,420
having it in a major web application<font color="#E5E5E5"> or</font>

836
00:39:14,269 --> 00:39:20,569
in in the account<font color="#E5E5E5"> area this is of course</font>

837
00:39:17,420 --> 00:39:24,559
<font color="#E5E5E5">a problem so let's see how it works we</font>

838
00:39:20,569 --> 00:39:28,029
open<font color="#E5E5E5"> the sub originator extension we put</font>

839
00:39:24,559 --> 00:39:30,349
<font color="#E5E5E5">about as the target</font><font color="#CCCCCC"> site and we started</font>

840
00:39:28,029 --> 00:39:34,449
right here<font color="#E5E5E5"> we have a warning</font><font color="#CCCCCC"> that sub</font>

841
00:39:30,349 --> 00:39:40,839
originator is debugging<font color="#E5E5E5"> this browser and</font>

842
00:39:34,449 --> 00:39:46,099
we just browse<font color="#CCCCCC"> around a little</font><font color="#E5E5E5"> bit</font>

843
00:39:40,839 --> 00:39:47,719
that's<font color="#E5E5E5"> blog post about using machine</font>

844
00:39:46,099 --> 00:39:55,369
learning to<font color="#E5E5E5"> help stop the forestation</font>

845
00:39:47,719 --> 00:39:57,620
<font color="#CCCCCC">and let's just try</font><font color="#E5E5E5"> to exercise the UI a</font>

846
00:39:55,369 --> 00:39:59,460
little bit let's move this<font color="#CCCCCC"> eye</font>

847
00:39:57,620 --> 00:40:05,328
[Music]

848
00:39:59,460 --> 00:40:07,380
and let's stop it and see the report so

849
00:40:05,329 --> 00:40:11,400
these are the reported cross-origin

850
00:40:07,380 --> 00:40:14,790
requests<font color="#E5E5E5"> there are only sub origin</font><font color="#CCCCCC"> - sub</font>

851
00:40:11,400 --> 00:40:20,670
origin requests<font color="#E5E5E5"> so some mp3 files have</font>

852
00:40:14,790 --> 00:40:22,410
<font color="#CCCCCC">been requested</font><font color="#E5E5E5"> then a video and yeah</font>

853
00:40:20,670 --> 00:40:25,710
<font color="#E5E5E5">audio again</font>

854
00:40:22,410 --> 00:40:27,598
txt file<font color="#E5E5E5"> so as you can</font><font color="#CCCCCC"> see like</font><font color="#E5E5E5"> a lot</font><font color="#CCCCCC"> of</font>

855
00:40:25,710 --> 00:40:29,970
resources<font color="#CCCCCC"> are</font><font color="#E5E5E5"> being requested</font><font color="#CCCCCC"> but they</font>

856
00:40:27,599 --> 00:40:31,770
could be<font color="#E5E5E5"> part of the</font><font color="#CCCCCC"> same submarine</font><font color="#E5E5E5"> so</font>

857
00:40:29,970 --> 00:40:33,629
this means<font color="#CCCCCC"> that it</font><font color="#E5E5E5"> is as easy</font><font color="#CCCCCC"> as</font><font color="#E5E5E5"> adding</font>

858
00:40:31,770 --> 00:40:35,550
<font color="#E5E5E5">the same sub origin which could be about</font>

859
00:40:33,630 --> 00:40:37,530
for example<font color="#CCCCCC"> right</font>

860
00:40:35,550 --> 00:40:39,900
this means<font color="#CCCCCC"> that basically</font><font color="#E5E5E5"> this works</font><font color="#CCCCCC"> out</font>

861
00:40:37,530 --> 00:40:41,670
of the<font color="#CCCCCC"> box we don't see sub origin -</font>

862
00:40:39,900 --> 00:40:43,740
<font color="#E5E5E5">origin we don't see sub origin - extern</font>

863
00:40:41,670 --> 00:40:47,369
that will need to be refactored

864
00:40:43,740 --> 00:40:49,529
so this is very promising<font color="#CCCCCC"> and this means</font>

865
00:40:47,369 --> 00:40:53,730
that that this would be pretty<font color="#CCCCCC"> easy</font><font color="#E5E5E5"> to</font>

866
00:40:49,530 --> 00:41:03,380
<font color="#E5E5E5">implement so let's stop this and let's</font>

867
00:40:53,730 --> 00:41:05,700
go to another<font color="#CCCCCC"> coca product it actually</font>

868
00:41:03,380 --> 00:41:13,849
redirected to search immediately<font color="#CCCCCC"> that's</font>

869
00:41:05,700 --> 00:41:15,960
the thing yeah<font color="#CCCCCC"> okay</font><font color="#E5E5E5"> Google Finance is</font>

870
00:41:13,849 --> 00:41:19,440
becoming integrated with Google search

871
00:41:15,960 --> 00:41:21,270
<font color="#E5E5E5">and it's still on the app tap tab so</font>

872
00:41:19,440 --> 00:41:23,640
let's<font color="#CCCCCC"> do the same</font><font color="#E5E5E5"> let's open the sub</font>

873
00:41:21,270 --> 00:41:32,009
originator<font color="#E5E5E5"> and do dub-dub-dub google.com</font>

874
00:41:23,640 --> 00:41:33,960
finance we started<font color="#E5E5E5"> let's go around a</font>

875
00:41:32,010 --> 00:41:37,069
little bit this would probably<font color="#E5E5E5"> go out</font>

876
00:41:33,960 --> 00:41:42,049
because yes these are direct<font color="#CCCCCC"> links -</font>

877
00:41:37,069 --> 00:41:45,420
yeah<font color="#E5E5E5"> we can reload it and let's go -</font>

878
00:41:42,049 --> 00:41:48,690
yeah this is still<font color="#E5E5E5"> finance this is still</font>

879
00:41:45,420 --> 00:41:52,619
finest<font color="#CCCCCC"> okay its</font><font color="#E5E5E5"> are the indices local</font>

880
00:41:48,690 --> 00:41:55,619
market news or<font color="#E5E5E5"> market let's see what sub</font>

881
00:41:52,619 --> 00:41:58,079
originator has to say so in this case we

882
00:41:55,619 --> 00:42:00,329
have a<font color="#E5E5E5"> little bit more results we see</font>

883
00:41:58,079 --> 00:42:03,660
there are some sub origin<font color="#CCCCCC"> -</font><font color="#E5E5E5"> origin this</font>

884
00:42:00,329 --> 00:42:06,569
means that there are some requests<font color="#E5E5E5"> from</font>

885
00:42:03,660 --> 00:42:08,910
finance to<font color="#E5E5E5"> the parent dub dub dub</font><font color="#CCCCCC"> slash</font>

886
00:42:06,569 --> 00:42:12,270
<font color="#E5E5E5">something else</font><font color="#CCCCCC"> you can see for</font><font color="#E5E5E5"> example</font>

887
00:42:08,910 --> 00:42:15,870
here this<font color="#E5E5E5"> is well probably</font>

888
00:42:12,270 --> 00:42:19,290
some kind of Jason<font color="#CCCCCC"> this</font><font color="#E5E5E5"> is yeah</font><font color="#CCCCCC"> this is</font>

889
00:42:15,870 --> 00:42:21,480
<font color="#E5E5E5">probably all xhr like things</font>

890
00:42:19,290 --> 00:42:24,870
this means that<font color="#E5E5E5"> being a sub origin to</font>

891
00:42:21,480 --> 00:42:27,150
origin the origin<font color="#E5E5E5"> would need to add the</font>

892
00:42:24,870 --> 00:42:31,440
access control allow sub origin like if

893
00:42:27,150 --> 00:42:34,190
it were it was a bit were cross-site

894
00:42:31,440 --> 00:42:36,510
request right like with course<font color="#E5E5E5"> and</font>

895
00:42:34,190 --> 00:42:40,290
<font color="#CCCCCC">supporting</font><font color="#E5E5E5"> to external so we are playing</font>

896
00:42:36,510 --> 00:42:41,640
we<font color="#CCCCCC"> are this we</font><font color="#E5E5E5"> are</font><font color="#CCCCCC"> sourcing</font><font color="#E5E5E5"> content</font>

897
00:42:40,290 --> 00:42:45,210
loading<font color="#E5E5E5"> content</font><font color="#CCCCCC"> from played over comm</font>

898
00:42:41,640 --> 00:42:47,279
and<font color="#CCCCCC"> ODS TOCOM this is mostly because of</font>

899
00:42:45,210 --> 00:42:49,920
<font color="#E5E5E5">the bar is it for the notification count</font>

900
00:42:47,280 --> 00:42:52,680
of the bar on the top so this will

901
00:42:49,920 --> 00:42:56,790
<font color="#E5E5E5">require not only modifications on</font>

902
00:42:52,680 --> 00:42:59,490
<font color="#CCCCCC">finance</font><font color="#E5E5E5"> but also on these domains</font><font color="#CCCCCC"> to add</font>

903
00:42:56,790 --> 00:43:01,440
access control allow origin and access

904
00:42:59,490 --> 00:43:02,970
control allow sub origin<font color="#E5E5E5"> but this kind</font>

905
00:43:01,440 --> 00:43:04,890
of tool in my opinion is<font color="#CCCCCC"> very</font>

906
00:43:02,970 --> 00:43:07,740
interesting this<font color="#E5E5E5"> is not open</font><font color="#CCCCCC"> source yet</font>

907
00:43:04,890 --> 00:43:13,620
we need<font color="#E5E5E5"> to so this is very</font><font color="#CCCCCC"> dependent on</font>

908
00:43:07,740 --> 00:43:15,870
some let's<font color="#E5E5E5"> say hard to update and to</font>

909
00:43:13,620 --> 00:43:21,540
keep updated<font color="#CCCCCC"> features of the chromium</font>

910
00:43:15,870 --> 00:43:25,020
<font color="#E5E5E5">API so we we we consider creating</font><font color="#CCCCCC"> an</font>

911
00:43:21,540 --> 00:43:28,200
external version<font color="#CCCCCC"> of this in the future</font>

912
00:43:25,020 --> 00:43:31,290
<font color="#E5E5E5">and but we wanted to show you a preview</font>

913
00:43:28,200 --> 00:43:36,950
of what we have internally<font color="#E5E5E5"> for</font>

914
00:43:31,290 --> 00:43:36,950
<font color="#E5E5E5">prototyping</font><font color="#CCCCCC"> such such a technology and</font>

915
00:43:37,610 --> 00:43:45,690
support<font color="#CCCCCC"> use are</font><font color="#E5E5E5"> being discussed by w3</font>

916
00:43:40,920 --> 00:43:47,670
and the there is some some agreements

917
00:43:45,690 --> 00:43:49,050
and something<font color="#CCCCCC"> on</font><font color="#E5E5E5"> something people</font>

918
00:43:47,670 --> 00:43:52,730
reinserting people that<font color="#E5E5E5"> people are very</font>

919
00:43:49,050 --> 00:43:55,230
<font color="#E5E5E5">less and we really hope</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> see this</font>

920
00:43:52,730 --> 00:44:00,530
<font color="#CCCCCC">working</font><font color="#E5E5E5"> and being implemented in</font>

921
00:43:55,230 --> 00:44:03,380
browsers origin policy is another

922
00:44:00,530 --> 00:44:07,590
proposal

923
00:44:03,380 --> 00:44:09,120
<font color="#E5E5E5">it's basically pins policies such as the</font>

924
00:44:07,590 --> 00:44:12,060
content<font color="#E5E5E5"> security policy or</font><font color="#CCCCCC"> referral</font>

925
00:44:09,120 --> 00:44:14,089
policy to an entire origin so<font color="#E5E5E5"> this</font>

926
00:44:12,060 --> 00:44:16,350
complements header based<font color="#CCCCCC"> delivery and</font>

927
00:44:14,090 --> 00:44:20,970
increases covered by making it the

928
00:44:16,350 --> 00:44:24,240
<font color="#CCCCCC">default so it's a little</font><font color="#E5E5E5"> bit like</font><font color="#CCCCCC"> M HSTs</font>

929
00:44:20,970 --> 00:44:26,069
<font color="#E5E5E5">like mandating HTTPS on</font><font color="#CCCCCC"> whole origin it</font>

930
00:44:24,240 --> 00:44:28,470
<font color="#E5E5E5">actually says</font>

931
00:44:26,070 --> 00:44:30,270
mmm<font color="#CCCCCC"> the first time you query you you</font><font color="#E5E5E5"> get</font>

932
00:44:28,470 --> 00:44:33,689
a page from from<font color="#E5E5E5"> that</font><font color="#CCCCCC"> origin it says</font>

933
00:44:30,270 --> 00:44:35,910
there is a<font color="#E5E5E5"> manifest and it says please</font>

934
00:44:33,690 --> 00:44:38,430
apply these<font color="#E5E5E5"> headers these policies</font>

935
00:44:35,910 --> 00:44:39,660
<font color="#E5E5E5">automatically for</font><font color="#CCCCCC"> the whole origin so</font>

936
00:44:38,430 --> 00:44:41,640
this<font color="#E5E5E5"> is very good because sometimes</font>

937
00:44:39,660 --> 00:44:44,310
<font color="#E5E5E5">there are different technology stacks</font>

938
00:44:41,640 --> 00:44:45,660
<font color="#E5E5E5">and the coverage of for example</font><font color="#CCCCCC"> country</font>

939
00:44:44,310 --> 00:44:49,100
<font color="#E5E5E5">security</font><font color="#CCCCCC"> policy is</font><font color="#E5E5E5"> not perfect</font><font color="#CCCCCC"> like</font>

940
00:44:45,660 --> 00:44:51,509
<font color="#E5E5E5">maybe you</font><font color="#CCCCCC"> have some kind of routing to</font>

941
00:44:49,100 --> 00:44:52,980
let's say an error page or<font color="#E5E5E5"> something</font>

942
00:44:51,510 --> 00:44:53,940
like that<font color="#CCCCCC"> that it's</font><font color="#E5E5E5"> not completed on</font>

943
00:44:52,980 --> 00:44:56,430
your in your control

944
00:44:53,940 --> 00:44:59,310
I don't know you have<font color="#E5E5E5"> some weird load</font>

945
00:44:56,430 --> 00:45:03,480
balancer that<font color="#CCCCCC"> goes externally I</font><font color="#E5E5E5"> have</font>

946
00:44:59,310 --> 00:45:06,000
<font color="#CCCCCC">five these kind of things</font><font color="#E5E5E5"> and this</font><font color="#CCCCCC"> makes</font>

947
00:45:03,480 --> 00:45:08,760
it<font color="#E5E5E5"> the</font><font color="#CCCCCC"> default so it shows you that you</font>

948
00:45:06,000 --> 00:45:13,050
have<font color="#E5E5E5"> good coverage</font><font color="#CCCCCC"> this</font><font color="#E5E5E5"> is also being</font>

949
00:45:08,760 --> 00:45:16,460
discussed<font color="#E5E5E5"> feature policy which is also</font>

950
00:45:13,050 --> 00:45:19,080
<font color="#E5E5E5">at a proposal stage allows the</font>

951
00:45:16,460 --> 00:45:20,490
administrators weapon<font color="#CCCCCC"> to selectively</font>

952
00:45:19,080 --> 00:45:23,700
enable and disable different browser

953
00:45:20,490 --> 00:45:28,049
features<font color="#E5E5E5"> and web</font><font color="#CCCCCC"> ap is so the idea is</font>

954
00:45:23,700 --> 00:45:30,540
you<font color="#CCCCCC"> can say on my website on</font><font color="#E5E5E5"> my website</font>

955
00:45:28,050 --> 00:45:32,280
I don't want<font color="#E5E5E5"> people to I don't I don't</font>

956
00:45:30,540 --> 00:45:35,130
<font color="#E5E5E5">want to allow browser to go</font><font color="#CCCCCC"> fullscreen</font>

957
00:45:32,280 --> 00:45:38,760
<font color="#E5E5E5">I want to disable web</font><font color="#CCCCCC"> USB on these pages</font>

958
00:45:35,130 --> 00:45:40,530
because I don't use it<font color="#CCCCCC"> or so on an</font>

959
00:45:38,760 --> 00:45:42,120
<font color="#CCCCCC">example is</font><font color="#E5E5E5"> in combination with</font><font color="#CCCCCC"> the</font>

960
00:45:40,530 --> 00:45:44,640
<font color="#CCCCCC">region</font><font color="#E5E5E5"> policy you can restrict</font>

961
00:45:42,120 --> 00:45:47,220
geolocation API like the ones to get

962
00:45:44,640 --> 00:45:49,350
<font color="#CCCCCC">location to a particular page does</font>

963
00:45:47,220 --> 00:45:53,250
reducing the<font color="#E5E5E5"> attack surface</font><font color="#CCCCCC"> in case</font><font color="#E5E5E5"> of</font>

964
00:45:49,350 --> 00:45:54,810
an<font color="#E5E5E5"> XSS</font><font color="#CCCCCC"> on the domain so</font><font color="#E5E5E5"> we</font><font color="#CCCCCC"> usually look</font>

965
00:45:53,250 --> 00:45:57,330
I said<font color="#CCCCCC"> before we usually usually</font><font color="#E5E5E5"> don't</font>

966
00:45:54,810 --> 00:45:58,799
think about<font color="#E5E5E5"> post exercise like once you</font>

967
00:45:57,330 --> 00:46:01,170
<font color="#E5E5E5">have code execute JavaScript code</font>

968
00:45:58,800 --> 00:46:02,820
execution<font color="#E5E5E5"> usually you can bypass all the</font>

969
00:46:01,170 --> 00:46:04,710
mitigations<font color="#E5E5E5"> this would be one of those</font>

970
00:46:02,820 --> 00:46:06,900
rare<font color="#CCCCCC"> cases</font><font color="#E5E5E5"> where this in combination</font>

971
00:46:04,710 --> 00:46:08,850
<font color="#CCCCCC">with origin policy</font><font color="#E5E5E5"> could actually reduce</font>

972
00:46:06,900 --> 00:46:12,480
<font color="#E5E5E5">the capabilities of an attacker once</font>

973
00:46:08,850 --> 00:46:16,250
they got XSS<font color="#E5E5E5"> because they couldn't for</font>

974
00:46:12,480 --> 00:46:16,250
example<font color="#CCCCCC"> exfiltrate the user position</font>

975
00:46:19,910 --> 00:46:25,350
<font color="#CCCCCC">we're done</font><font color="#E5E5E5"> I</font><font color="#CCCCCC"> think a little</font><font color="#E5E5E5"> bit earlier</font>

976
00:46:23,360 --> 00:46:28,500
hope you liked<font color="#E5E5E5"> it and if you have any</font>

977
00:46:25,350 --> 00:46:30,799
questions so we are opening questions on

978
00:46:28,500 --> 00:46:30,800
the court

979
00:46:32,549 --> 00:46:41,140
any questions all right<font color="#E5E5E5"> Thank You Lucas</font>

980
00:46:39,190 --> 00:46:41,370
and<font color="#E5E5E5"> mutually thank you very much thank</font>

981
00:46:41,140 --> 00:46:45,609
you

982
00:46:41,370 --> 00:46:45,609
[Applause]

