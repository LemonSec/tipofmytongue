1
00:00:12,500 --> 00:00:17,810
so we<font color="#CCCCCC"> believe to present the life and</font>

2
00:00:14,630 --> 00:00:19,430
<font color="#E5E5E5">death of carnal object abuse I'm safe</font>

3
00:00:17,810 --> 00:00:24,950
<font color="#CCCCCC">I'm a senior security software engineer</font>

4
00:00:19,430 --> 00:00:29,030
at<font color="#CCCCCC"> Thomas OSI and</font><font color="#E5E5E5"> this is Ian have my</font>

5
00:00:24,950 --> 00:00:31,039
<font color="#E5E5E5">name's Ian</font><font color="#CCCCCC"> Clark</font><font color="#E5E5E5"> with now I'd like to</font>

6
00:00:29,030 --> 00:00:32,629
<font color="#E5E5E5">begin with when I'm facing any kind of</font>

7
00:00:31,039 --> 00:00:34,370
problem I like<font color="#E5E5E5"> to look at the anatomy</font>

8
00:00:32,628 --> 00:00:37,430
<font color="#CCCCCC">and try to dissect</font><font color="#E5E5E5"> it into much smaller</font>

9
00:00:34,370 --> 00:00:39,190
<font color="#CCCCCC">much simpler problem if</font><font color="#E5E5E5"> you</font><font color="#CCCCCC"> e and</font><font color="#E5E5E5"> we</font>

10
00:00:37,430 --> 00:00:41,900
need to answer three<font color="#CCCCCC"> specific questions</font>

11
00:00:39,190 --> 00:00:44,629
<font color="#CCCCCC">in my</font><font color="#E5E5E5"> case it's the why the what and the</font>

12
00:00:41,900 --> 00:00:46,489
how<font color="#E5E5E5"> starting with the why I think there</font>

13
00:00:44,629 --> 00:00:49,280
<font color="#CCCCCC">is definitely a method to</font><font color="#E5E5E5"> madness</font><font color="#CCCCCC"> if we</font>

14
00:00:46,489 --> 00:00:51,530
look at<font color="#E5E5E5"> modern</font><font color="#CCCCCC"> kernel</font><font color="#E5E5E5"> exploit techniques</font>

15
00:00:49,280 --> 00:00:53,890
it usually starts<font color="#CCCCCC"> with some sort of</font>

16
00:00:51,530 --> 00:00:56,059
<font color="#E5E5E5">exploitable bug like I use after free</font>

17
00:00:53,890 --> 00:00:58,670
<font color="#CCCCCC">out-of-bounds right or an integral</font>

18
00:00:56,059 --> 00:01:01,190
overview<font color="#E5E5E5"> the next step is to try</font><font color="#CCCCCC"> to gain</font>

19
00:00:58,670 --> 00:01:03,320
a higher exploit primitive and usually

20
00:01:01,190 --> 00:01:05,690
by abusing<font color="#E5E5E5"> certain type of objects to</font>

21
00:01:03,320 --> 00:01:08,150
ultimately gain arbitrary read and write

22
00:01:05,690 --> 00:01:09,890
to<font color="#E5E5E5"> the kernel memory and after again</font>

23
00:01:08,150 --> 00:01:11,900
<font color="#CCCCCC">Arbit read and write</font><font color="#E5E5E5"> it's the process so</font>

24
00:01:09,890 --> 00:01:14,060
simple to leak the a<font color="#E5E5E5"> process token and</font>

25
00:01:11,900 --> 00:01:15,829
assign it<font color="#CCCCCC"> to your current processor to</font>

26
00:01:14,060 --> 00:01:18,280
any other instantiated process and gain

27
00:01:15,829 --> 00:01:20,960
high privileges in the<font color="#CCCCCC"> linux kernel</font>

28
00:01:18,280 --> 00:01:22,789
which moves us to<font color="#E5E5E5"> the what we're going</font>

29
00:01:20,960 --> 00:01:24,770
to<font color="#E5E5E5"> go through a simple and true</font><font color="#CCCCCC"> in to</font>

30
00:01:22,789 --> 00:01:26,320
memory<font color="#E5E5E5"> corruption bugs several types of</font>

31
00:01:24,770 --> 00:01:29,000
memory corruption bugs and then

32
00:01:26,320 --> 00:01:30,710
<font color="#E5E5E5">explaining</font><font color="#CCCCCC"> in</font><font color="#E5E5E5"> detail is what object</font>

33
00:01:29,000 --> 00:01:33,770
<font color="#CCCCCC">abused and how we can abuse this kind of</font>

34
00:01:30,710 --> 00:01:37,429
<font color="#E5E5E5">memory</font><font color="#CCCCCC"> corruption</font><font color="#E5E5E5"> starting by a simple</font>

35
00:01:33,770 --> 00:01:40,100
<font color="#CCCCCC">UF if you look on your</font><font color="#E5E5E5"> left</font><font color="#CCCCCC"> I think</font><font color="#E5E5E5"> my</font>

36
00:01:37,430 --> 00:01:41,899
<font color="#E5E5E5">left and this is just a simple</font>

37
00:01:40,100 --> 00:01:44,839
<font color="#E5E5E5">pseudocode for</font><font color="#CCCCCC"> a</font><font color="#E5E5E5"> vulnerable function to</font>

38
00:01:41,899 --> 00:01:47,750
use after free<font color="#E5E5E5"> it starts by allocating a</font>

39
00:01:44,840 --> 00:01:49,609
new<font color="#CCCCCC"> object to</font><font color="#E5E5E5"> memory and then during a</font>

40
00:01:47,750 --> 00:01:52,219
<font color="#E5E5E5">certain condition the object gets freed</font>

41
00:01:49,609 --> 00:01:54,140
but then the function operates on that

42
00:01:52,219 --> 00:01:56,059
object<font color="#E5E5E5"> without further checking that the</font>

43
00:01:54,140 --> 00:01:57,829
object was freed or not which results in

44
00:01:56,060 --> 00:02:00,770
some memory corruption<font color="#E5E5E5"> and operating on</font>

45
00:01:57,829 --> 00:02:03,408
freed memory now<font color="#E5E5E5"> how would you</font><font color="#CCCCCC"> usually</font>

46
00:02:00,770 --> 00:02:04,939
exploit<font color="#CCCCCC"> that</font><font color="#E5E5E5"> is that just after the</font>

47
00:02:03,409 --> 00:02:06,950
object<font color="#E5E5E5"> has</font><font color="#CCCCCC"> been freed we try to allocate</font>

48
00:02:04,939 --> 00:02:09,919
<font color="#E5E5E5">an object of the same size</font><font color="#CCCCCC"> and allocate</font>

49
00:02:06,950 --> 00:02:12,500
it<font color="#CCCCCC"> to the same</font><font color="#E5E5E5"> import memory location to</font>

50
00:02:09,919 --> 00:02:14,450
replace the<font color="#E5E5E5"> previous object and then if</font>

51
00:02:12,500 --> 00:02:16,250
we<font color="#E5E5E5"> make the assumption</font><font color="#CCCCCC"> that objects</font><font color="#E5E5E5"> see</font>

52
00:02:14,450 --> 00:02:20,030
the lost object<font color="#E5E5E5"> that was allocated has</font>

53
00:02:16,250 --> 00:02:21,950
member X which has the<font color="#CCCCCC"> value of 1</font><font color="#E5E5E5"> if we</font>

54
00:02:20,030 --> 00:02:24,620
operate<font color="#E5E5E5"> on the dangling pointer from</font>

55
00:02:21,950 --> 00:02:26,390
object<font color="#E5E5E5"> a the first object that was freed</font>

56
00:02:24,620 --> 00:02:29,470
we try to modify the<font color="#E5E5E5"> value of its be</font>

57
00:02:26,390 --> 00:02:33,529
member to 41 41<font color="#CCCCCC"> 41 or any other value</font>

58
00:02:29,470 --> 00:02:35,480
when we try<font color="#E5E5E5"> to print object sees that X</font>

59
00:02:33,530 --> 00:02:37,640
member it will<font color="#CCCCCC"> be equal to</font><font color="#E5E5E5"> the value</font>

60
00:02:35,480 --> 00:02:39,170
<font color="#CCCCCC">that</font><font color="#E5E5E5"> was modified by the other dangling</font>

61
00:02:37,640 --> 00:02:40,640
pointer of course<font color="#E5E5E5"> this is a simple</font>

62
00:02:39,170 --> 00:02:43,819
demonstration on<font color="#CCCCCC"> what can actually</font>

63
00:02:40,640 --> 00:02:45,559
<font color="#E5E5E5">happen</font><font color="#CCCCCC"> the results may vary depending on</font>

64
00:02:43,819 --> 00:02:47,599
the<font color="#CCCCCC"> object and</font><font color="#E5E5E5"> what member of</font><font color="#CCCCCC"> that</font>

65
00:02:45,560 --> 00:02:50,000
<font color="#CCCCCC">object that you can</font><font color="#E5E5E5"> overwrite which</font>

66
00:02:47,599 --> 00:02:52,518
we're going<font color="#CCCCCC"> to present</font><font color="#E5E5E5"> later after we go</font>

67
00:02:50,000 --> 00:02:53,930
through<font color="#CCCCCC"> the memory corruption</font><font color="#E5E5E5"> box the</font>

68
00:02:52,519 --> 00:02:57,349
next type of<font color="#E5E5E5"> bugs</font><font color="#CCCCCC"> I want to talk about</font>

69
00:02:53,930 --> 00:03:00,200
<font color="#CCCCCC">us eight</font><font color="#E5E5E5"> x86 integral overflows</font><font color="#CCCCCC"> so if</font>

70
00:02:57,349 --> 00:03:02,959
you look at<font color="#E5E5E5"> this calculation</font><font color="#CCCCCC"> ffffff' 80</font>

71
00:03:00,200 --> 00:03:05,268
<font color="#CCCCCC">plus 81</font><font color="#E5E5E5"> on 32-bit systems</font><font color="#CCCCCC"> that</font>

72
00:03:02,959 --> 00:03:07,190
calculation will result in<font color="#CCCCCC"> one well</font>

73
00:03:05,269 --> 00:03:08,959
actually that's wrong<font color="#E5E5E5"> the</font><font color="#CCCCCC"> reboot</font>

74
00:03:07,190 --> 00:03:10,519
calculation result is<font color="#CCCCCC"> zero one zero zero</font>

75
00:03:08,959 --> 00:03:13,370
<font color="#CCCCCC">zero zero zero one</font>

76
00:03:10,519 --> 00:03:15,680
but since 32-bit registers are<font color="#CCCCCC"> for byte</font>

77
00:03:13,370 --> 00:03:17,690
<font color="#CCCCCC">while</font><font color="#E5E5E5"> it cannot hold this value and thus</font>

78
00:03:15,680 --> 00:03:19,519
the most significant<font color="#CCCCCC"> byte gets truncated</font>

79
00:03:17,690 --> 00:03:21,290
<font color="#E5E5E5">and the result of the calculation is</font>

80
00:03:19,519 --> 00:03:22,849
equal to<font color="#E5E5E5"> one this is what we call</font>

81
00:03:21,290 --> 00:03:25,010
integral wrapping or integral<font color="#E5E5E5"> overflow</font>

82
00:03:22,849 --> 00:03:27,890
so<font color="#CCCCCC"> they incur the integral has lapped</font>

83
00:03:25,010 --> 00:03:30,319
over<font color="#E5E5E5"> the max int value and resulted in</font>

84
00:03:27,890 --> 00:03:32,720
as much smaller value<font color="#E5E5E5"> and we will see in</font>

85
00:03:30,319 --> 00:03:35,208
the next<font color="#CCCCCC"> slides</font><font color="#E5E5E5"> what this will have</font>

86
00:03:32,720 --> 00:03:38,030
impact on functions and several

87
00:03:35,209 --> 00:03:39,590
scenarios<font color="#E5E5E5"> so the first impact can</font><font color="#CCCCCC"> be</font>

88
00:03:38,030 --> 00:03:42,019
through linear<font color="#E5E5E5"> overflows we have two</font>

89
00:03:39,590 --> 00:03:44,269
<font color="#CCCCCC">scenarios in that case the first</font><font color="#E5E5E5"> one is</font>

90
00:03:42,019 --> 00:03:46,489
<font color="#E5E5E5">that we allocate an object of a size</font>

91
00:03:44,269 --> 00:03:48,410
<font color="#E5E5E5">that has been overflowed meaning that</font>

92
00:03:46,489 --> 00:03:51,470
there were some calculations prior to

93
00:03:48,410 --> 00:03:53,660
using<font color="#E5E5E5"> that size</font><font color="#CCCCCC"> argument on the size</font>

94
00:03:51,470 --> 00:03:55,280
<font color="#CCCCCC">that was supplied by the user resulting</font>

95
00:03:53,660 --> 00:03:57,560
<font color="#E5E5E5">in an overflow just like we explained in</font>

96
00:03:55,280 --> 00:03:59,660
the last slide the second scenario<font color="#E5E5E5"> is</font>

97
00:03:57,560 --> 00:04:02,449
that the object<font color="#CCCCCC"> is allocated using a</font>

98
00:03:59,660 --> 00:04:05,000
fixed<font color="#E5E5E5"> size so after the objects has been</font>

99
00:04:02,449 --> 00:04:07,940
allocated<font color="#CCCCCC"> to</font><font color="#E5E5E5"> memory the first scenario</font>

100
00:04:05,000 --> 00:04:10,129
<font color="#E5E5E5">if</font><font color="#CCCCCC"> the man copy function</font><font color="#E5E5E5"> or</font><font color="#CCCCCC"> any</font><font color="#E5E5E5"> data</font>

101
00:04:07,940 --> 00:04:11,930
copying loop was using the user<font color="#E5E5E5"> supplied</font>

102
00:04:10,129 --> 00:04:13,698
<font color="#CCCCCC">saw is the original size not the</font>

103
00:04:11,930 --> 00:04:15,440
<font color="#E5E5E5">calculated size or the overflowed size</font>

104
00:04:13,699 --> 00:04:18,169
that means that we will<font color="#E5E5E5"> actually</font>

105
00:04:15,440 --> 00:04:19,940
overwrite adjacent memory<font color="#E5E5E5"> since it's</font>

106
00:04:18,168 --> 00:04:22,219
time to copy a large amount a large

107
00:04:19,940 --> 00:04:24,469
number<font color="#CCCCCC"> or a large amount of data and to</font>

108
00:04:22,220 --> 00:04:26,930
a much smaller allocated memory location

109
00:04:24,470 --> 00:04:28,729
or region<font color="#E5E5E5"> in the second scenario if the</font>

110
00:04:26,930 --> 00:04:30,919
<font color="#E5E5E5">data copying loop or data copying</font>

111
00:04:28,729 --> 00:04:32,870
function is using a user supplied<font color="#CCCCCC"> size</font>

112
00:04:30,919 --> 00:04:35,240
without<font color="#E5E5E5"> checking that the user supplied</font>

113
00:04:32,870 --> 00:04:37,070
<font color="#E5E5E5">size is larger than the fixed size of</font>

114
00:04:35,240 --> 00:04:37,660
the object<font color="#E5E5E5"> then it will</font><font color="#CCCCCC"> result</font><font color="#E5E5E5"> in a</font>

115
00:04:37,070 --> 00:04:39,670
linear of

116
00:04:37,660 --> 00:04:41,880
<font color="#CCCCCC">Flo and</font><font color="#E5E5E5"> the reason</font><font color="#CCCCCC"> for linear is because</font>

117
00:04:39,670 --> 00:04:44,380
you overwrite adjacent parts of memory

118
00:04:41,880 --> 00:04:46,240
<font color="#E5E5E5">the next issue can have that can</font><font color="#CCCCCC"> happen</font>

119
00:04:44,380 --> 00:04:48,310
is that<font color="#E5E5E5"> if we</font><font color="#CCCCCC"> start by</font><font color="#E5E5E5"> allocating</font><font color="#CCCCCC"> an</font>

120
00:04:46,240 --> 00:04:49,870
object with an<font color="#E5E5E5"> overflowed size again</font>

121
00:04:48,310 --> 00:04:52,540
some<font color="#E5E5E5"> collision happened on the</font>

122
00:04:49,870 --> 00:04:54,370
<font color="#CCCCCC">user-provided</font><font color="#E5E5E5"> size that resulted in a</font>

123
00:04:52,540 --> 00:04:56,800
kid<font color="#E5E5E5"> a much smaller allocation than</font>

124
00:04:54,370 --> 00:04:58,780
originally intended<font color="#CCCCCC"> and then somewhere</font>

125
00:04:56,800 --> 00:05:00,820
during<font color="#E5E5E5"> the function the function tries</font>

126
00:04:58,780 --> 00:05:03,130
to write<font color="#E5E5E5"> our specific index if that</font>

127
00:05:00,820 --> 00:05:04,900
index is larger<font color="#E5E5E5"> than the overflowed size</font>

128
00:05:03,130 --> 00:05:07,180
<font color="#E5E5E5">that will</font><font color="#CCCCCC"> result in an out of bound</font>

129
00:05:04,900 --> 00:05:10,770
right into an adjacent memory<font color="#E5E5E5"> and thus</font>

130
00:05:07,180 --> 00:05:13,210
we can<font color="#E5E5E5"> manipulate</font><font color="#CCCCCC"> Neil</font><font color="#E5E5E5"> or nearby objects</font>

131
00:05:10,770 --> 00:05:17,140
members and pointers and everything in

132
00:05:13,210 --> 00:05:19,659
memory<font color="#E5E5E5"> now how would we exploit out of</font>

133
00:05:17,140 --> 00:05:21,039
bounds<font color="#E5E5E5"> on overflow so first we need to</font>

134
00:05:19,660 --> 00:05:22,960
get the kernel memory in<font color="#CCCCCC"> deterministic</font>

135
00:05:21,040 --> 00:05:25,300
<font color="#CCCCCC">state</font><font color="#E5E5E5"> this can be done</font><font color="#CCCCCC"> using pool</font>

136
00:05:22,960 --> 00:05:26,409
spraying<font color="#E5E5E5"> and it usually involves a</font>

137
00:05:25,300 --> 00:05:30,010
series of allocations and deallocations

138
00:05:26,410 --> 00:05:31,750
<font color="#E5E5E5">and kernel memory</font><font color="#CCCCCC"> and then we create</font>

139
00:05:30,010 --> 00:05:34,150
memory<font color="#CCCCCC"> holes</font><font color="#E5E5E5"> by freeing</font><font color="#CCCCCC"> parts of these</font>

140
00:05:31,750 --> 00:05:36,790
objects<font color="#E5E5E5"> and hopefully the vulnerable</font>

141
00:05:34,150 --> 00:05:38,979
object will be allocated to<font color="#E5E5E5"> win one of</font>

142
00:05:36,790 --> 00:05:41,740
these memory<font color="#E5E5E5"> holes just before a user</font>

143
00:05:38,980 --> 00:05:43,900
<font color="#CCCCCC">control</font><font color="#E5E5E5"> object and then when we get to</font>

144
00:05:41,740 --> 00:05:45,970
<font color="#CCCCCC">the overflow</font><font color="#E5E5E5"> or the other bound right we</font>

145
00:05:43,900 --> 00:05:48,640
corrupt<font color="#E5E5E5"> interesting members of the user</font>

146
00:05:45,970 --> 00:05:52,150
control<font color="#E5E5E5"> objects and that brings us to</font>

147
00:05:48,640 --> 00:05:54,610
the<font color="#CCCCCC"> last question of esta ha</font><font color="#E5E5E5"> so what</font>

148
00:05:52,150 --> 00:05:56,739
constitutes<font color="#E5E5E5"> an interesting object</font><font color="#CCCCCC"> what</font>

149
00:05:54,610 --> 00:05:59,560
members do I need to override to gain a

150
00:05:56,740 --> 00:06:02,890
higher exploit primitive we can start by

151
00:05:59,560 --> 00:06:05,290
an object<font color="#CCCCCC"> that has a data size number if</font>

152
00:06:02,890 --> 00:06:07,900
you<font color="#E5E5E5"> are able to corrupt the data size of</font>

153
00:06:05,290 --> 00:06:09,340
an<font color="#CCCCCC"> object</font><font color="#E5E5E5"> then if you can extend it it</font>

154
00:06:07,900 --> 00:06:10,960
means<font color="#E5E5E5"> that</font><font color="#CCCCCC"> when</font><font color="#E5E5E5"> you read and</font><font color="#CCCCCC"> write from</font>

155
00:06:09,340 --> 00:06:14,380
it you'll be<font color="#CCCCCC"> able to read and</font><font color="#E5E5E5"> write past</font>

156
00:06:10,960 --> 00:06:15,010
its original allocated memory at pointer

157
00:06:14,380 --> 00:06:16,690
to data

158
00:06:15,010 --> 00:06:18,969
this would allow arbitrary<font color="#CCCCCC"> memory</font><font color="#E5E5E5"> read</font>

159
00:06:16,690 --> 00:06:20,380
<font color="#E5E5E5">and write so a pointer</font><font color="#CCCCCC"> to data</font><font color="#E5E5E5"> if you</font>

160
00:06:18,970 --> 00:06:21,940
<font color="#E5E5E5">are able to override the pointer it</font>

161
00:06:20,380 --> 00:06:24,310
means when you<font color="#CCCCCC"> operate on the object</font>

162
00:06:21,940 --> 00:06:27,130
later on<font color="#CCCCCC"> your operating</font><font color="#E5E5E5"> on user control</font>

163
00:06:24,310 --> 00:06:28,330
pointer and<font color="#CCCCCC"> common memory</font><font color="#E5E5E5"> and hopefully</font>

164
00:06:27,130 --> 00:06:30,219
that object will have<font color="#E5E5E5"> certain</font>

165
00:06:28,330 --> 00:06:31,719
interesting functions like<font color="#CCCCCC"> CAD data</font><font color="#E5E5E5"> and</font>

166
00:06:30,220 --> 00:06:35,110
set data which will allow read and write

167
00:06:31,720 --> 00:06:37,720
<font color="#E5E5E5">from the objects memory in the kernel</font><font color="#CCCCCC"> so</font>

168
00:06:35,110 --> 00:06:40,000
<font color="#E5E5E5">going</font><font color="#CCCCCC"> through the CD</font><font color="#E5E5E5"> the theory of how I</font>

169
00:06:37,720 --> 00:06:41,500
would abuse<font color="#E5E5E5"> objects or</font><font color="#CCCCCC"> run a profit</font><font color="#E5E5E5"> and</font>

170
00:06:40,000 --> 00:06:43,390
how<font color="#CCCCCC"> would you actually do that</font><font color="#E5E5E5"> if we</font>

171
00:06:41,500 --> 00:06:44,800
<font color="#E5E5E5">consider that we</font><font color="#CCCCCC"> have to allocated</font>

172
00:06:43,390 --> 00:06:48,659
objects<font color="#E5E5E5"> adjacent to each other in memory</font>

173
00:06:44,800 --> 00:06:50,940
<font color="#E5E5E5">each have hundred bytes of data</font>

174
00:06:48,660 --> 00:06:54,330
and then certain exploit came and we

175
00:06:50,940 --> 00:06:57,170
corrupted the first<font color="#E5E5E5"> objects data</font><font color="#CCCCCC"> sighs</font>

176
00:06:54,330 --> 00:06:59,700
member this will actually allows to

177
00:06:57,170 --> 00:07:03,690
extend the object size and allows<font color="#CCCCCC"> for</font>

178
00:06:59,700 --> 00:07:05,370
relatively<font color="#CCCCCC"> than right so in theory we</font>

179
00:07:03,690 --> 00:07:07,590
<font color="#CCCCCC">would they be able</font><font color="#E5E5E5"> to read past the</font>

180
00:07:05,370 --> 00:07:13,200
objects data up to<font color="#E5E5E5"> four gigs depending</font>

181
00:07:07,590 --> 00:07:15,060
on the corrupted size and then we<font color="#CCCCCC"> can</font>

182
00:07:13,200 --> 00:07:17,340
use the main<font color="#CCCCCC"> object with the relative</font>

183
00:07:15,060 --> 00:07:19,470
read and write to<font color="#E5E5E5"> set the next object or</font>

184
00:07:17,340 --> 00:07:21,510
<font color="#CCCCCC">digestions</font><font color="#E5E5E5"> object data pointer to</font>

185
00:07:19,470 --> 00:07:25,650
whatever pointer we need in<font color="#E5E5E5"> that case we</font>

186
00:07:21,510 --> 00:07:27,450
set it to 41 41 41 41<font color="#CCCCCC"> and that means</font>

187
00:07:25,650 --> 00:07:28,799
<font color="#E5E5E5">that when we try to read data</font><font color="#CCCCCC"> from the</font>

188
00:07:27,450 --> 00:07:31,170
second object<font color="#E5E5E5"> we will be actually</font>

189
00:07:28,800 --> 00:07:33,930
<font color="#CCCCCC">working on an user controlled object or</font>

190
00:07:31,170 --> 00:07:36,000
a user control pointer of 41 41 41<font color="#CCCCCC"> of</font>

191
00:07:33,930 --> 00:07:38,130
course in real world<font color="#CCCCCC"> scenarios this data</font>

192
00:07:36,000 --> 00:07:40,020
pointer needs to be changed to<font color="#E5E5E5"> something</font>

193
00:07:38,130 --> 00:07:41,520
that<font color="#E5E5E5"> would be interesting to us like as</font>

194
00:07:40,020 --> 00:07:42,799
<font color="#E5E5E5">I</font><font color="#CCCCCC"> mentioned</font><font color="#E5E5E5"> that a process structure or</font>

195
00:07:41,520 --> 00:07:46,409
<font color="#E5E5E5">something like that</font>

196
00:07:42,800 --> 00:07:48,060
so when 32k memory has several types of

197
00:07:46,410 --> 00:07:50,370
memory first<font color="#CCCCCC"> the stop heap which</font>

198
00:07:48,060 --> 00:07:52,080
contains<font color="#CCCCCC"> anti user or stop</font><font color="#E5E5E5"> aunty user</font>

199
00:07:50,370 --> 00:07:55,020
it contains<font color="#E5E5E5"> window management related</font>

200
00:07:52,080 --> 00:07:57,930
objects<font color="#CCCCCC"> your know window objects menus</font>

201
00:07:55,020 --> 00:07:59,669
classes and such and objects are

202
00:07:57,930 --> 00:08:02,520
allocated and<font color="#E5E5E5"> freed using RTL allocate</font>

203
00:07:59,670 --> 00:08:04,200
heap and RTL free heap the second memory

204
00:08:02,520 --> 00:08:06,539
type is the page session pool which

205
00:08:04,200 --> 00:08:08,099
normally contains<font color="#E5E5E5"> an T GDI objects</font><font color="#CCCCCC"> am</font>

206
00:08:06,540 --> 00:08:11,700
some and the user objects but we'll

207
00:08:08,100 --> 00:08:13,440
focus<font color="#CCCCCC"> on NT GDI objects for</font><font color="#E5E5E5"> this talk so</font>

208
00:08:11,700 --> 00:08:16,320
the GTR related objects<font color="#E5E5E5"> are like bitmaps</font>

209
00:08:13,440 --> 00:08:18,180
<font color="#E5E5E5">path palettes brushes DC's a lot of many</font>

210
00:08:16,320 --> 00:08:21,180
objects<font color="#CCCCCC"> that</font><font color="#E5E5E5"> get allocated are used by</font>

211
00:08:18,180 --> 00:08:22,710
the GDI subsystem in<font color="#E5E5E5"> Windows objects are</font>

212
00:08:21,180 --> 00:08:24,450
usually<font color="#E5E5E5"> allocated and feed using</font><font color="#CCCCCC"> Excel</font>

213
00:08:22,710 --> 00:08:27,739
rocket<font color="#E5E5E5"> object to</font><font color="#CCCCCC"> stack</font><font color="#E5E5E5"> a clerk a pool</font>

214
00:08:24,450 --> 00:08:29,969
with tag and<font color="#CCCCCC"> ax</font><font color="#E5E5E5"> free pool with stack</font>

215
00:08:27,740 --> 00:08:31,320
also there is the rampage session pool

216
00:08:29,970 --> 00:08:33,740
<font color="#E5E5E5">which is not in scope for this</font>

217
00:08:31,320 --> 00:08:33,740
presentation

218
00:08:36,880 --> 00:08:40,849
here we look<font color="#E5E5E5"> at some statistics from the</font>

219
00:08:39,169 --> 00:08:43,579
<font color="#CCCCCC">Musashi</font><font color="#E5E5E5"> cases that we've seen so far</font>

220
00:08:40,849 --> 00:08:46,270
<font color="#CCCCCC">that are</font><font color="#E5E5E5"> related</font><font color="#CCCCCC"> to those specific</font><font color="#E5E5E5"> user</font>

221
00:08:43,580 --> 00:08:49,940
or GDI objects being abused to gain and

222
00:08:46,270 --> 00:08:51,770
<font color="#CCCCCC">hire extra</font><font color="#E5E5E5"> primitives as we</font><font color="#CCCCCC"> explained so</font>

223
00:08:49,940 --> 00:08:54,350
we see the number<font color="#E5E5E5"> one object is surface</font>

224
00:08:51,770 --> 00:08:55,760
object<font color="#E5E5E5"> which is the pet map and the</font>

225
00:08:54,350 --> 00:09:00,260
second one is the<font color="#CCCCCC"> tack window object</font>

226
00:08:55,760 --> 00:09:02,330
with which is a window object so that's

227
00:09:00,260 --> 00:09:04,280
<font color="#E5E5E5">thought by the second most famous one</font>

228
00:09:02,330 --> 00:09:07,940
because historically<font color="#E5E5E5"> the</font><font color="#CCCCCC"> tagged window</font>

229
00:09:04,280 --> 00:09:09,860
object was being used much more<font color="#E5E5E5"> or older</font>

230
00:09:07,940 --> 00:09:12,710
than bitmaps being used so that's what I

231
00:09:09,860 --> 00:09:14,420
wanted<font color="#CCCCCC"> to explain this</font><font color="#E5E5E5"> is how the</font><font color="#CCCCCC"> tag</font>

232
00:09:12,710 --> 00:09:16,070
window object<font color="#E5E5E5"> or it's a</font><font color="#CCCCCC"> snippet code of</font>

233
00:09:14,420 --> 00:09:19,790
how the<font color="#E5E5E5"> tag</font><font color="#CCCCCC"> window object actually</font><font color="#E5E5E5"> looks</font>

234
00:09:16,070 --> 00:09:22,220
like in memory<font color="#E5E5E5"> so you can see I've</font>

235
00:09:19,790 --> 00:09:24,920
<font color="#E5E5E5">highlighted some interesting members so</font>

236
00:09:22,220 --> 00:09:27,290
you have the buffer and<font color="#E5E5E5"> the CPU and</font>

237
00:09:24,920 --> 00:09:29,780
extra so the<font color="#E5E5E5"> buffer is a pointer to the</font>

238
00:09:27,290 --> 00:09:31,400
window name and the CPU<font color="#CCCCCC"> window extra is</font>

239
00:09:29,780 --> 00:09:33,829
the number<font color="#CCCCCC"> of bytes or extra bytes that</font>

240
00:09:31,400 --> 00:09:35,780
<font color="#E5E5E5">this window have in memory and the port</font>

241
00:09:33,830 --> 00:09:38,480
highlighted in green is where this extra

242
00:09:35,780 --> 00:09:41,569
<font color="#CCCCCC">memory</font><font color="#E5E5E5"> actually</font><font color="#CCCCCC"> is I think you can begin</font>

243
00:09:38,480 --> 00:09:43,310
<font color="#E5E5E5">to see how this is going through so if</font>

244
00:09:41,570 --> 00:09:45,170
you're<font color="#E5E5E5"> able to override the CEO in the</font>

245
00:09:43,310 --> 00:09:47,359
extra or<font color="#E5E5E5"> corrupt it in some way you'll</font>

246
00:09:45,170 --> 00:09:49,790
be<font color="#CCCCCC"> able to read relative to the window</font>

247
00:09:47,360 --> 00:09:52,430
object<font color="#CCCCCC"> in memory into adjacent</font><font color="#E5E5E5"> memory if</font>

248
00:09:49,790 --> 00:09:53,630
you're<font color="#CCCCCC"> able to corrupt</font><font color="#E5E5E5"> a buffer pointer</font>

249
00:09:52,430 --> 00:09:56,180
<font color="#CCCCCC">then you'll be able</font><font color="#E5E5E5"> to read and</font><font color="#CCCCCC"> write</font>

250
00:09:53,630 --> 00:09:57,770
<font color="#E5E5E5">from</font><font color="#CCCCCC"> anywhere in memory</font><font color="#E5E5E5"> now this was</font><font color="#CCCCCC"> the</font>

251
00:09:56,180 --> 00:09:59,810
case a long time ago<font color="#E5E5E5"> and this has been</font>

252
00:09:57,770 --> 00:10:01,490
mitigated by Microsoft recently<font color="#E5E5E5"> there</font>

253
00:09:59,810 --> 00:10:03,020
<font color="#E5E5E5">are many other ways</font><font color="#CCCCCC"> that you can abuse a</font>

254
00:10:01,490 --> 00:10:04,820
<font color="#E5E5E5">tag window object but I just want to</font>

255
00:10:03,020 --> 00:10:07,880
<font color="#CCCCCC">discuss the basics of</font><font color="#E5E5E5"> how we can</font>

256
00:10:04,820 --> 00:10:10,490
<font color="#E5E5E5">actually abuse it so let's look at how</font>

257
00:10:07,880 --> 00:10:13,040
we<font color="#E5E5E5"> can</font><font color="#CCCCCC"> create windows it starts by</font><font color="#E5E5E5"> I'm</font>

258
00:10:10,490 --> 00:10:14,660
<font color="#E5E5E5">sure a lot</font><font color="#CCCCCC"> of you know</font><font color="#E5E5E5"> like create</font>

259
00:10:13,040 --> 00:10:16,160
window and create window<font color="#E5E5E5"> X functions</font>

260
00:10:14,660 --> 00:10:21,439
<font color="#CCCCCC">this is normal that's how</font><font color="#E5E5E5"> you allocate a</font>

261
00:10:16,160 --> 00:10:24,530
window in<font color="#CCCCCC"> windows</font><font color="#E5E5E5"> and you can fear when</font>

262
00:10:21,440 --> 00:10:26,930
dough using destroy<font color="#CCCCCC"> window</font><font color="#E5E5E5"> function also</font>

263
00:10:24,530 --> 00:10:28,760
<font color="#E5E5E5">so how can we read and write or in that</font>

264
00:10:26,930 --> 00:10:32,479
<font color="#E5E5E5">case we can read data we can</font><font color="#CCCCCC"> use</font><font color="#E5E5E5"> that</font>

265
00:10:28,760 --> 00:10:35,600
<font color="#E5E5E5">window long or set</font><font color="#CCCCCC"> gate window long</font>

266
00:10:32,480 --> 00:10:38,450
pointer and internal user get text and

267
00:10:35,600 --> 00:10:40,850
what these do<font color="#CCCCCC"> is that it will read along</font>

268
00:10:38,450 --> 00:10:43,700
at a specific<font color="#E5E5E5"> index into the CBO</font><font color="#CCCCCC"> and</font>

269
00:10:40,850 --> 00:10:45,200
extra or extra bytes from the window the

270
00:10:43,700 --> 00:10:47,570
second function<font color="#CCCCCC"> which is</font><font color="#E5E5E5"> internal data</font>

271
00:10:45,200 --> 00:10:48,300
<font color="#CCCCCC">in the</font><font color="#E5E5E5"> text we read maximum length</font>

272
00:10:47,570 --> 00:10:50,100
string

273
00:10:48,300 --> 00:10:52,589
<font color="#E5E5E5">up to</font><font color="#CCCCCC"> length</font><font color="#E5E5E5"> string which is less than</font>

274
00:10:50,100 --> 00:10:54,270
maximum<font color="#E5E5E5"> length string from the buffer</font><font color="#CCCCCC"> or</font>

275
00:10:52,590 --> 00:10:57,300
the<font color="#E5E5E5"> window</font><font color="#CCCCCC"> name buffer that</font><font color="#E5E5E5"> is pointed</font>

276
00:10:54,270 --> 00:10:59,310
to<font color="#CCCCCC"> by</font><font color="#E5E5E5"> the window object the next set</font><font color="#CCCCCC"> of</font>

277
00:10:57,300 --> 00:11:01,620
functions is how we would<font color="#E5E5E5"> write data and</font>

278
00:10:59,310 --> 00:11:03,689
it's a<font color="#CCCCCC"> chat window long and sat window</font>

279
00:11:01,620 --> 00:11:05,910
long pointer and then the second one<font color="#E5E5E5"> is</font>

280
00:11:03,690 --> 00:11:08,220
a system call called<font color="#CCCCCC"> aunty user that's a</font>

281
00:11:05,910 --> 00:11:11,040
text and I see used to set the window

282
00:11:08,220 --> 00:11:12,870
objects name so the way we do exploit it

283
00:11:11,040 --> 00:11:14,760
is that<font color="#CCCCCC"> chat window</font><font color="#E5E5E5"> long pointer will</font>

284
00:11:12,870 --> 00:11:17,130
actually write a specific long at a

285
00:11:14,760 --> 00:11:19,830
<font color="#E5E5E5">specific index that</font><font color="#CCCCCC"> is less than the CPU</font>

286
00:11:17,130 --> 00:11:21,510
and extra structure<font color="#E5E5E5"> and then he</font><font color="#CCCCCC"> uses a</font>

287
00:11:19,830 --> 00:11:23,100
deficit text were right up to<font color="#E5E5E5"> the length</font>

288
00:11:21,510 --> 00:11:25,290
of string<font color="#E5E5E5"> that is less than maximum</font>

289
00:11:23,100 --> 00:11:28,440
<font color="#E5E5E5">length came to a specific pointer that</font>

290
00:11:25,290 --> 00:11:30,240
<font color="#E5E5E5">is pointed by the buffer now moving on</font>

291
00:11:28,440 --> 00:11:32,670
<font color="#E5E5E5">to exploiting this kind of technique if</font>

292
00:11:30,240 --> 00:11:35,550
we allocate<font color="#CCCCCC"> two window objects</font><font color="#E5E5E5"> adjacent</font>

293
00:11:32,670 --> 00:11:37,949
to each other<font color="#E5E5E5"> in memory we could use a</font>

294
00:11:35,550 --> 00:11:40,650
kernel<font color="#E5E5E5"> bug to actually corrupt the CPU</font>

295
00:11:37,950 --> 00:11:42,600
and extra of<font color="#E5E5E5"> the first window object and</font>

296
00:11:40,650 --> 00:11:44,850
then this<font color="#E5E5E5"> will allow</font><font color="#CCCCCC"> us to gain</font>

297
00:11:42,600 --> 00:11:47,190
relatively<font color="#CCCCCC"> the gain relative read and</font>

298
00:11:44,850 --> 00:11:49,590
write<font color="#E5E5E5"> and to the</font><font color="#CCCCCC"> adjacent memory that</font>

299
00:11:47,190 --> 00:11:51,360
will the<font color="#E5E5E5"> next window object which means</font>

300
00:11:49,590 --> 00:11:53,700
that the<font color="#E5E5E5"> window a will be the manager</font>

301
00:11:51,360 --> 00:11:55,890
object<font color="#E5E5E5"> that we will use its relative and</font>

302
00:11:53,700 --> 00:11:58,380
<font color="#CCCCCC">read</font><font color="#E5E5E5"> and</font><font color="#CCCCCC"> write capabilities to actually</font>

303
00:11:55,890 --> 00:12:00,150
overwrite certain or interesting data

304
00:11:58,380 --> 00:12:02,520
members of the second window object

305
00:12:00,150 --> 00:12:04,680
which<font color="#E5E5E5"> would be the worker object so when</font>

306
00:12:02,520 --> 00:12:06,240
do we will<font color="#E5E5E5"> be the worker object we will</font>

307
00:12:04,680 --> 00:12:07,770
<font color="#E5E5E5">use the relative read and write to</font>

308
00:12:06,240 --> 00:12:09,960
override the<font color="#E5E5E5"> adjacent windows</font>

309
00:12:07,770 --> 00:12:11,880
string<font color="#CCCCCC"> name buffer or the buffer pointer</font>

310
00:12:09,960 --> 00:12:13,860
to the<font color="#CCCCCC"> string</font><font color="#E5E5E5"> of the window name and</font>

311
00:12:11,880 --> 00:12:16,230
then we would<font color="#CCCCCC"> use</font><font color="#E5E5E5"> read and write</font>

312
00:12:13,860 --> 00:12:17,430
functions that for the second window<font color="#E5E5E5"> to</font>

313
00:12:16,230 --> 00:12:21,150
<font color="#E5E5E5">actually read and write from an</font>

314
00:12:17,430 --> 00:12:22,500
<font color="#CCCCCC">arbitrary location in</font><font color="#E5E5E5"> kernel memory the</font>

315
00:12:21,150 --> 00:12:24,209
next<font color="#CCCCCC"> technique I</font><font color="#E5E5E5"> want the user</font>

316
00:12:22,500 --> 00:12:25,950
talk about<font color="#E5E5E5"> is abusing bitmaps or surf</font>

317
00:12:24,210 --> 00:12:27,300
object and this has been heavily<font color="#E5E5E5"> used</font><font color="#CCCCCC"> in</font>

318
00:12:25,950 --> 00:12:29,280
<font color="#CCCCCC">the past two to three years</font>

319
00:12:27,300 --> 00:12:31,380
it was initially disclosed by<font color="#CCCCCC"> King team</font>

320
00:12:29,280 --> 00:12:34,170
<font color="#E5E5E5">at</font><font color="#CCCCCC"> I think and sequest</font>

321
00:12:31,380 --> 00:12:36,240
back in 2015<font color="#E5E5E5"> but it was heavily detailed</font>

322
00:12:34,170 --> 00:12:38,400
and analyzed by<font color="#CCCCCC"> Nicolas of normal in</font>

323
00:12:36,240 --> 00:12:40,230
Okinawa<font color="#CCCCCC"> on</font><font color="#E5E5E5"> Diego</font><font color="#CCCCCC"> Huaraz of at the time</font>

324
00:12:38,400 --> 00:12:43,170
<font color="#CCCCCC">Core labs and now I think Nico is</font><font color="#E5E5E5"> at</font>

325
00:12:40,230 --> 00:12:44,900
<font color="#CCCCCC">blue</font><font color="#E5E5E5"> frost over the period of 2015 and</font>

326
00:12:43,170 --> 00:12:49,199
2016

327
00:12:44,900 --> 00:12:51,900
so the bitmap object<font color="#E5E5E5"> in kernel memory is</font>

328
00:12:49,200 --> 00:12:54,300
actually the surf object and it has a

329
00:12:51,900 --> 00:12:56,400
<font color="#CCCCCC">pool tag or in the object address</font><font color="#E5E5E5"> G H 5</font>

330
00:12:54,300 --> 00:12:58,680
or GLA<font color="#E5E5E5"> 5 depending on which memory</font>

331
00:12:56,400 --> 00:13:00,750
location<font color="#CCCCCC"> gets allocated</font><font color="#E5E5E5"> to</font><font color="#CCCCCC"> for</font><font color="#E5E5E5"> GL its</font>

332
00:12:58,680 --> 00:13:01,270
Lucas<font color="#E5E5E5"> ID</font><font color="#CCCCCC"> lists and G H is the normal</font>

333
00:13:00,750 --> 00:13:03,730
pitch

334
00:13:01,270 --> 00:13:06,340
in<font color="#E5E5E5"> pool and this is how the object looks</font>

335
00:13:03,730 --> 00:13:07,870
like<font color="#E5E5E5"> in covenant memory you can see that</font>

336
00:13:06,340 --> 00:13:09,850
I've highlighted and<font color="#E5E5E5"> couple of</font>

337
00:13:07,870 --> 00:13:11,650
interesting<font color="#E5E5E5"> members first is the sizzle</font>

338
00:13:09,850 --> 00:13:12,820
bitmap which is the size<font color="#E5E5E5"> of the bitmap</font>

339
00:13:11,650 --> 00:13:14,860
it's the width and<font color="#E5E5E5"> the</font><font color="#CCCCCC"> height of the</font>

340
00:13:12,820 --> 00:13:16,690
<font color="#CCCCCC">bitmap</font><font color="#E5E5E5"> and the next one is the previous</font>

341
00:13:14,860 --> 00:13:18,520
<font color="#E5E5E5">can</font><font color="#CCCCCC"> 0 which is a pointer to the bitmap</font>

342
00:13:16,690 --> 00:13:20,770
data in memory<font color="#E5E5E5"> now a lot of you might</font>

343
00:13:18,520 --> 00:13:22,900
<font color="#E5E5E5">think</font><font color="#CCCCCC"> that bitmaps allocated</font><font color="#E5E5E5"> from user</font>

344
00:13:20,770 --> 00:13:25,689
mode<font color="#E5E5E5"> is actually allocated in user mode</font>

345
00:13:22,900 --> 00:13:27,520
memory<font color="#E5E5E5"> but because it's a GDI subsystem</font>

346
00:13:25,690 --> 00:13:30,970
it's actually getting allocated<font color="#E5E5E5"> into the</font>

347
00:13:27,520 --> 00:13:32,740
kernel<font color="#E5E5E5"> itself how we can allocate</font>

348
00:13:30,970 --> 00:13:35,290
bitmaps is by using a create bitmap

349
00:13:32,740 --> 00:13:38,410
function it's available for any<font color="#E5E5E5"> C++</font>

350
00:13:35,290 --> 00:13:41,230
program we can<font color="#E5E5E5"> delete</font><font color="#CCCCCC"> a Frida object</font>

351
00:13:38,410 --> 00:13:43,600
using delete object<font color="#E5E5E5"> function we can read</font>

352
00:13:41,230 --> 00:13:46,300
data using get bitmap bits which<font color="#E5E5E5"> will</font>

353
00:13:43,600 --> 00:13:48,400
read up<font color="#CCCCCC"> to size of</font><font color="#E5E5E5"> the bitmap from the</font>

354
00:13:46,300 --> 00:13:51,430
address pointer<font color="#E5E5E5"> to from TVs key of</font><font color="#CCCCCC"> PV</font>

355
00:13:48,400 --> 00:13:53,860
<font color="#E5E5E5">scan 0 and then we have set</font><font color="#CCCCCC"> bitmap speed</font>

356
00:13:51,430 --> 00:13:55,959
with<font color="#E5E5E5"> which writes up to size of bitmap</font>

357
00:13:53,860 --> 00:13:59,530
data into the<font color="#E5E5E5"> address pointed to by PV</font>

358
00:13:55,960 --> 00:14:01,900
scan<font color="#E5E5E5"> 0 again going through the scenario</font>

359
00:13:59,530 --> 00:14:04,780
<font color="#E5E5E5">if you</font><font color="#CCCCCC"> allocate two adjacent bitmaps</font><font color="#E5E5E5"> and</font>

360
00:14:01,900 --> 00:14:07,090
memory<font color="#E5E5E5"> you overwrite order you extend or</font>

361
00:14:04,780 --> 00:14:08,740
corrupt one of the<font color="#E5E5E5"> sizzle bitmap numbers</font>

362
00:14:07,090 --> 00:14:10,570
which is the<font color="#CCCCCC"> width and height</font><font color="#E5E5E5"> meaning</font>

363
00:14:08,740 --> 00:14:13,060
you extend the bitmap size in memory

364
00:14:10,570 --> 00:14:15,070
<font color="#E5E5E5">you'll be able to read and write</font><font color="#CCCCCC"> past a</font>

365
00:14:13,060 --> 00:14:16,869
bitmap<font color="#E5E5E5"> into adjacent memory location</font>

366
00:14:15,070 --> 00:14:19,120
which<font color="#E5E5E5"> contains our second bitmap and</font>

367
00:14:16,870 --> 00:14:20,920
that means that the first bitmap will be

368
00:14:19,120 --> 00:14:22,570
the manager<font color="#E5E5E5"> that will be used to set</font>

369
00:14:20,920 --> 00:14:25,390
pointers to read and write from from the

370
00:14:22,570 --> 00:14:28,000
second bitmap second bitmap will be the

371
00:14:25,390 --> 00:14:29,350
worker object we will overwrite or use

372
00:14:28,000 --> 00:14:32,050
the relative<font color="#E5E5E5"> read and write</font><font color="#CCCCCC"> to override</font>

373
00:14:29,350 --> 00:14:34,870
a PV scan<font color="#E5E5E5"> 0 member of it with any value</font>

374
00:14:32,050 --> 00:14:37,030
<font color="#CCCCCC">that</font><font color="#E5E5E5"> we need and then when we use a</font>

375
00:14:34,870 --> 00:14:38,830
bitmap bit source a<font color="#E5E5E5"> bitmap bits on the</font>

376
00:14:37,030 --> 00:14:49,560
<font color="#E5E5E5">second bitmap will be able to read and</font>

377
00:14:38,830 --> 00:14:50,820
<font color="#CCCCCC">write from arbitrary memory</font><font color="#E5E5E5"> location the</font>

378
00:14:49,560 --> 00:14:53,130
<font color="#E5E5E5">subject I'm</font><font color="#CCCCCC"> going to talk</font><font color="#E5E5E5"> about we</font>

379
00:14:50,820 --> 00:14:56,000
haven't<font color="#E5E5E5"> seen many</font><font color="#CCCCCC"> cases about I just</font>

380
00:14:53,130 --> 00:14:58,710
<font color="#CCCCCC">want to talk</font><font color="#E5E5E5"> about it because I found it</font>

381
00:14:56,000 --> 00:15:00,300
so it's<font color="#CCCCCC"> pallet objects or colored</font>

382
00:14:58,710 --> 00:15:04,140
pallets in<font color="#CCCCCC"> manually this</font><font color="#E5E5E5"> was disclosed</font>

383
00:15:00,300 --> 00:15:06,779
by me<font color="#E5E5E5"> at Def Con</font><font color="#CCCCCC"> last year and</font><font color="#E5E5E5"> that</font><font color="#CCCCCC"> has</font>

384
00:15:04,140 --> 00:15:09,449
interesting values because<font color="#E5E5E5"> starting</font><font color="#CCCCCC"> from</font>

385
00:15:06,779 --> 00:15:12,990
<font color="#CCCCCC">RS 3 bitmap technique was killed</font><font color="#E5E5E5"> as will</font>

386
00:15:09,450 --> 00:15:16,020
be explained by in<font color="#E5E5E5"> in the next part of</font>

387
00:15:12,990 --> 00:15:18,839
the talk<font color="#E5E5E5"> so I was</font><font color="#CCCCCC"> working on</font><font color="#E5E5E5"> a specific</font>

388
00:15:16,020 --> 00:15:20,819
exploit for elevation<font color="#CCCCCC"> Fuji exploited</font>

389
00:15:18,839 --> 00:15:22,589
during<font color="#E5E5E5"> my previous employer before I got</font>

390
00:15:20,820 --> 00:15:24,630
including Microsoft and<font color="#E5E5E5"> the bitmap</font>

391
00:15:22,589 --> 00:15:27,779
technique got killed<font color="#CCCCCC"> I needed to find</font>

392
00:15:24,630 --> 00:15:29,820
some way<font color="#E5E5E5"> to actually abuse or gain</font>

393
00:15:27,779 --> 00:15:31,740
higher memory primitive and luckily

394
00:15:29,820 --> 00:15:34,040
enough<font color="#CCCCCC"> I find</font><font color="#E5E5E5"> this</font><font color="#CCCCCC"> pallet object and was</font>

395
00:15:31,740 --> 00:15:36,330
<font color="#E5E5E5">able to fully exploit the vulnerability</font>

396
00:15:34,040 --> 00:15:39,959
so the pallet object has the<font color="#CCCCCC"> object type</font>

397
00:15:36,330 --> 00:15:42,690
<font color="#CCCCCC">pallet</font><font color="#E5E5E5"> and has the</font><font color="#CCCCCC"> pull tag gh8</font><font color="#E5E5E5"> &</font><font color="#CCCCCC"> GL e8</font>

398
00:15:39,960 --> 00:15:44,730
and<font color="#E5E5E5"> this is how the pallet object looks</font>

399
00:15:42,690 --> 00:15:46,110
like in memory<font color="#CCCCCC"> you can see</font><font color="#E5E5E5"> I've</font>

400
00:15:44,730 --> 00:15:48,000
highlighted several<font color="#E5E5E5"> interesting parts</font>

401
00:15:46,110 --> 00:15:50,730
<font color="#CCCCCC">the</font><font color="#E5E5E5"> first interesting</font><font color="#CCCCCC"> member is the C</font>

402
00:15:48,000 --> 00:15:53,610
entries which is the entry count of the

403
00:15:50,730 --> 00:15:54,660
color palettes<font color="#E5E5E5"> for that specific</font><font color="#CCCCCC"> palette</font>

404
00:15:53,610 --> 00:15:58,020
<font color="#E5E5E5">that are</font><font color="#CCCCCC"> located</font><font color="#E5E5E5"> in that specific</font>

405
00:15:54,660 --> 00:16:00,540
<font color="#E5E5E5">palette the next entry is the P first</font>

406
00:15:58,020 --> 00:16:02,610
color pointer which actually points<font color="#CCCCCC"> to</font>

407
00:16:00,540 --> 00:16:04,410
the a pal colors array or the palette

408
00:16:02,610 --> 00:16:09,480
entries in memory which is<font color="#E5E5E5"> allocated</font><font color="#CCCCCC"> at</font>

409
00:16:04,410 --> 00:16:11,100
the end of each<font color="#E5E5E5"> palette object we can</font>

410
00:16:09,480 --> 00:16:12,870
allocate palettes using<font color="#E5E5E5"> create palette</font>

411
00:16:11,100 --> 00:16:14,880
which takes a logical<font color="#CCCCCC"> palette structure</font>

412
00:16:12,870 --> 00:16:17,160
<font color="#E5E5E5">this logical palette structures contain</font>

413
00:16:14,880 --> 00:16:19,560
the palette entries<font color="#E5E5E5"> and the palette</font>

414
00:16:17,160 --> 00:16:22,530
entry array which contains<font color="#E5E5E5"> a list of</font>

415
00:16:19,560 --> 00:16:24,479
palette entries<font color="#E5E5E5"> now what's interesting</font>

416
00:16:22,530 --> 00:16:27,000
about that is that it allows you very

417
00:16:24,480 --> 00:16:29,010
granule<font color="#E5E5E5"> and controlled allocations and</font>

418
00:16:27,000 --> 00:16:30,660
deallocations or freeze into the kernel

419
00:16:29,010 --> 00:16:32,189
memory which can<font color="#E5E5E5"> be</font><font color="#CCCCCC"> used</font><font color="#E5E5E5"> for kernel</font>

420
00:16:30,660 --> 00:16:35,130
spraying and getting<font color="#E5E5E5"> canary in the</font>

421
00:16:32,190 --> 00:16:40,050
<font color="#E5E5E5">domestic state really easily or used to</font>

422
00:16:35,130 --> 00:16:41,640
be<font color="#E5E5E5"> I hope so</font><font color="#CCCCCC"> this is how in code you can</font>

423
00:16:40,050 --> 00:16:45,750
allocate<font color="#E5E5E5"> a</font><font color="#CCCCCC"> pallet</font><font color="#E5E5E5"> into kernel memory</font>

424
00:16:41,640 --> 00:16:48,779
from user mode you can also free

425
00:16:45,750 --> 00:16:51,180
<font color="#E5E5E5">palettes using delete object you can</font>

426
00:16:48,779 --> 00:16:53,970
read data<font color="#CCCCCC"> from a palette using</font><font color="#E5E5E5"> the</font><font color="#CCCCCC"> gap</font>

427
00:16:51,180 --> 00:16:55,800
palette entries function and that<font color="#CCCCCC"> will</font>

428
00:16:53,970 --> 00:16:58,950
read up to<font color="#E5E5E5"> n entries starting from</font>

429
00:16:55,800 --> 00:17:00,990
<font color="#E5E5E5">specific index from the</font><font color="#CCCCCC"> a data</font><font color="#E5E5E5"> that is</font>

430
00:16:58,950 --> 00:17:01,870
pointed to by<font color="#CCCCCC"> the address of P first</font>

431
00:17:00,990 --> 00:17:04,510
colors

432
00:17:01,870 --> 00:17:06,010
and we can write<font color="#E5E5E5"> data there is actually</font>

433
00:17:04,510 --> 00:17:08,200
<font color="#CCCCCC">two functions</font><font color="#E5E5E5"> that can be used</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> write</font>

434
00:17:06,010 --> 00:17:09,910
data<font color="#CCCCCC"> to palates if there is set palette</font>

435
00:17:08,200 --> 00:17:12,400
entries and there is an m8 palette<font color="#E5E5E5"> and</font>

436
00:17:09,910 --> 00:17:15,370
this function will actually<font color="#CCCCCC"> right</font><font color="#E5E5E5"> up to</font>

437
00:17:12,400 --> 00:17:17,020
n entries from<font color="#E5E5E5"> specific index into the</font>

438
00:17:15,369 --> 00:17:19,869
data that I was pointed to by<font color="#E5E5E5"> the</font>

439
00:17:17,020 --> 00:17:22,319
pointer<font color="#CCCCCC"> of B first</font><font color="#E5E5E5"> color now you can see</font>

440
00:17:19,869 --> 00:17:24,129
the how palettes can<font color="#E5E5E5"> be very powerful</font>

441
00:17:22,319 --> 00:17:26,139
<font color="#CCCCCC">specifically that it allows you to write</font>

442
00:17:24,130 --> 00:17:28,480
specific amount<font color="#E5E5E5"> of data to a specific</font>

443
00:17:26,140 --> 00:17:29,920
location<font color="#E5E5E5"> that</font><font color="#CCCCCC"> you can control</font><font color="#E5E5E5"> and we</font>

444
00:17:28,480 --> 00:17:30,450
will see how we can abuse<font color="#E5E5E5"> that in a</font>

445
00:17:29,920 --> 00:17:34,060
minute

446
00:17:30,450 --> 00:17:36,880
so we start by<font color="#E5E5E5"> locating two palettes</font>

447
00:17:34,060 --> 00:17:40,060
<font color="#E5E5E5">adjacent</font><font color="#CCCCCC"> to each other a</font><font color="#E5E5E5"> memory palette</font>

448
00:17:36,880 --> 00:17:41,710
a and<font color="#CCCCCC"> talib</font><font color="#E5E5E5"> B we use</font><font color="#CCCCCC"> a kernel bug to</font>

449
00:17:40,060 --> 00:17:45,340
corrupt the C and<font color="#CCCCCC"> twist</font><font color="#E5E5E5"> member of</font>

450
00:17:41,710 --> 00:17:47,380
<font color="#E5E5E5">palette a that will give</font><font color="#CCCCCC"> us relative</font>

451
00:17:45,340 --> 00:17:49,209
memory read and write<font color="#E5E5E5"> into palette B's</font>

452
00:17:47,380 --> 00:17:51,790
memory which is<font color="#E5E5E5"> adjacent to palette a</font>

453
00:17:49,210 --> 00:17:54,910
and palette<font color="#CCCCCC"> a will be</font><font color="#E5E5E5"> the manager</font><font color="#CCCCCC"> object</font>

454
00:17:51,790 --> 00:17:56,200
that<font color="#E5E5E5"> will be used to set or set the</font>

455
00:17:54,910 --> 00:17:59,770
pointer that<font color="#CCCCCC"> will</font><font color="#E5E5E5"> read and write from</font>

456
00:17:56,200 --> 00:18:02,530
later<font color="#E5E5E5"> on</font><font color="#CCCCCC"> the D will be the worker object</font>

457
00:17:59,770 --> 00:18:04,150
<font color="#E5E5E5">we will actually overwrite you will use</font>

458
00:18:02,530 --> 00:18:06,520
the relative read and write that<font color="#E5E5E5"> came in</font>

459
00:18:04,150 --> 00:18:08,760
a previous<font color="#E5E5E5"> step to override the PC first</font>

460
00:18:06,520 --> 00:18:12,040
<font color="#E5E5E5">color pointer of the second palette and</font>

461
00:18:08,760 --> 00:18:13,690
then we use palette be sad bitmaps<font color="#E5E5E5"> sad</font>

462
00:18:12,040 --> 00:18:14,950
palette entries and get palette and

463
00:18:13,690 --> 00:18:18,580
<font color="#CCCCCC">restore should</font><font color="#E5E5E5"> be done right</font><font color="#CCCCCC"> from an</font>

464
00:18:14,950 --> 00:18:20,170
<font color="#CCCCCC">arbitrary location in memory now</font><font color="#E5E5E5"> there</font>

465
00:18:18,580 --> 00:18:22,240
is a specific restrictions of that

466
00:18:20,170 --> 00:18:24,130
technique<font color="#E5E5E5"> if you</font><font color="#CCCCCC"> look at these members</font>

467
00:18:22,240 --> 00:18:26,170
in front of you that<font color="#E5E5E5"> he said this he had</font>

468
00:18:24,130 --> 00:18:28,510
the<font color="#E5E5E5"> P transform current and the P trans</font>

469
00:18:26,170 --> 00:18:31,090
old<font color="#CCCCCC"> if any of these members get</font>

470
00:18:28,510 --> 00:18:33,550
clobbered<font color="#CCCCCC"> then it can result</font><font color="#E5E5E5"> in a blue</font>

471
00:18:31,090 --> 00:18:35,879
<font color="#E5E5E5">screen of death</font><font color="#CCCCCC"> or it can result in an</font>

472
00:18:33,550 --> 00:18:38,290
error<font color="#E5E5E5"> without reading or writing data</font>

473
00:18:35,880 --> 00:18:40,410
<font color="#E5E5E5">several posts have been out there by</font><font color="#CCCCCC"> bad</font>

474
00:18:38,290 --> 00:18:43,420
shifter<font color="#CCCCCC"> a friend of mine and I think</font>

475
00:18:40,410 --> 00:18:45,100
<font color="#CCCCCC">cosmic</font><font color="#E5E5E5"> detailing the restrictions and</font>

476
00:18:43,420 --> 00:18:47,220
how they were<font color="#CCCCCC"> able to bypass</font><font color="#E5E5E5"> it so there</font>

477
00:18:45,100 --> 00:18:49,330
was a bypass for<font color="#E5E5E5"> that restriction</font><font color="#CCCCCC"> and</font>

478
00:18:47,220 --> 00:18:53,680
the next thing I want to show you<font color="#CCCCCC"> guys</font>

479
00:18:49,330 --> 00:18:55,629
is<font color="#CCCCCC"> just an old demo that I used so you</font>

480
00:18:53,680 --> 00:18:58,710
can see that<font color="#E5E5E5"> I'm starting from a very</font>

481
00:18:55,630 --> 00:18:58,710
<font color="#E5E5E5">low privileged user</font>

482
00:19:04,840 --> 00:19:15,350
just adjusting<font color="#E5E5E5"> the</font><font color="#CCCCCC"> cymbals there so I</font>

483
00:19:12,530 --> 00:19:17,178
triggered the overflow you can see that

484
00:19:15,350 --> 00:19:18,678
the memory getting allocated is of<font color="#CCCCCC"> 10</font>

485
00:19:17,179 --> 00:19:21,770
bytes<font color="#E5E5E5"> of size which is not what the</font>

486
00:19:18,679 --> 00:19:23,510
object expects next<font color="#E5E5E5"> part in the function</font>

487
00:19:21,770 --> 00:19:25,490
you can<font color="#E5E5E5"> see how the pool is in definite</font>

488
00:19:23,510 --> 00:19:27,530
<font color="#E5E5E5">ecstatic ated actually bitmaps and</font>

489
00:19:25,490 --> 00:19:30,080
<font color="#E5E5E5">palettes in a certain series of</font>

490
00:19:27,530 --> 00:19:31,850
allocations that got the pool in a very

491
00:19:30,080 --> 00:19:34,220
deterministic<font color="#CCCCCC"> state and our object</font><font color="#E5E5E5"> is</font>

492
00:19:31,850 --> 00:19:36,020
allocated at the end of the page<font color="#E5E5E5"> just</font>

493
00:19:34,220 --> 00:19:39,409
before one of<font color="#E5E5E5"> the bitmap or</font><font color="#CCCCCC"> pallet</font>

494
00:19:36,020 --> 00:19:41,720
objects the GDI object<font color="#E5E5E5"> done is actually</font>

495
00:19:39,409 --> 00:19:44,150
when in debug extension developed by

496
00:19:41,720 --> 00:19:46,159
Diego Suarez<font color="#CCCCCC"> I had to modify it to</font><font color="#E5E5E5"> work</font>

497
00:19:44,150 --> 00:19:48,830
on<font color="#E5E5E5"> the current it shows you the</font><font color="#CCCCCC"> original</font>

498
00:19:46,159 --> 00:19:50,870
size of<font color="#E5E5E5"> the bitmap and</font><font color="#CCCCCC"> then after the</font>

499
00:19:48,830 --> 00:19:54,649
overflow what I used was<font color="#CCCCCC"> to actually</font>

500
00:19:50,870 --> 00:19:58,399
overflow the size 2 x 6<font color="#CCCCCC"> which extended</font>

501
00:19:54,650 --> 00:20:02,120
the<font color="#E5E5E5"> size very widely and</font><font color="#CCCCCC"> now I'm able to</font>

502
00:19:58,400 --> 00:20:03,799
read and<font color="#E5E5E5"> write from kernel memory now</font>

503
00:20:02,120 --> 00:20:05,959
I'm<font color="#E5E5E5"> looking at them</font><font color="#CCCCCC"> adjacent</font><font color="#E5E5E5"> palette</font>

504
00:20:03,799 --> 00:20:09,320
<font color="#E5E5E5">that</font><font color="#CCCCCC"> is allocated that original size is</font>

505
00:20:05,960 --> 00:20:10,580
<font color="#E5E5E5">1 III and after I use the bitmap of the</font>

506
00:20:09,320 --> 00:20:12,139
corrupted size of the bitmap<font color="#E5E5E5"> I</font>

507
00:20:10,580 --> 00:20:14,270
successfully could<font color="#CCCCCC"> have the size of the</font>

508
00:20:12,140 --> 00:20:16,010
<font color="#E5E5E5">palette to</font><font color="#CCCCCC"> Max end which</font><font color="#E5E5E5"> means I can</font>

509
00:20:14,270 --> 00:20:18,650
read<font color="#E5E5E5"> and write up to</font><font color="#CCCCCC"> 4 gigs of memory</font>

510
00:20:16,010 --> 00:20:21,559
from<font color="#CCCCCC"> that location in memory of location</font>

511
00:20:18,650 --> 00:20:24,530
of the first<font color="#E5E5E5"> pallet now what I want to</font>

512
00:20:21,559 --> 00:20:26,539
<font color="#E5E5E5">do is to overwrite a pointer for a</font>

513
00:20:24,530 --> 00:20:28,399
second<font color="#E5E5E5"> palette that is near</font><font color="#CCCCCC"> the first</font>

514
00:20:26,539 --> 00:20:31,549
<font color="#CCCCCC">palette</font><font color="#E5E5E5"> you can</font><font color="#CCCCCC"> see this is the original</font>

515
00:20:28,400 --> 00:20:34,070
pointer<font color="#E5E5E5"> and what I'm gonna do is</font>

516
00:20:31,549 --> 00:20:36,020
overwrite it to the<font color="#CCCCCC"> location</font><font color="#E5E5E5"> of the</font>

517
00:20:34,070 --> 00:20:37,520
<font color="#E5E5E5">original bitmap to fix its address</font>

518
00:20:36,020 --> 00:20:39,440
<font color="#CCCCCC">because if I'm</font><font color="#E5E5E5"> doing an overflow the</font>

519
00:20:37,520 --> 00:20:41,900
headers got clobbered<font color="#CCCCCC"> if I leave it in</font>

520
00:20:39,440 --> 00:20:43,000
<font color="#E5E5E5">that state when I exit the program it</font>

521
00:20:41,900 --> 00:20:45,770
will<font color="#E5E5E5"> result in a blue screen of death</font>

522
00:20:43,000 --> 00:20:48,620
<font color="#E5E5E5">which we don't like</font><font color="#CCCCCC"> as exploiters</font><font color="#E5E5E5"> since</font>

523
00:20:45,770 --> 00:20:50,600
we<font color="#E5E5E5"> want a stable exploit so now you see</font>

524
00:20:48,620 --> 00:20:52,479
I already modified<font color="#E5E5E5"> the</font><font color="#CCCCCC"> P first</font><font color="#E5E5E5"> color to</font>

525
00:20:50,600 --> 00:20:54,860
point to the<font color="#E5E5E5"> overflow bitmap header</font><font color="#CCCCCC"> I</font>

526
00:20:52,480 --> 00:20:57,169
will show you now the overflow bitmap

527
00:20:54,860 --> 00:20:58,879
header data<font color="#E5E5E5"> so this is how the data</font>

528
00:20:57,169 --> 00:21:01,640
looks<font color="#CCCCCC"> like in an overflow palette and</font>

529
00:20:58,880 --> 00:21:03,470
after I called write<font color="#CCCCCC"> to address you can</font>

530
00:21:01,640 --> 00:21:08,030
see I successfully just like modified

531
00:21:03,470 --> 00:21:09,830
the<font color="#CCCCCC"> palette memory in in the kernel now</font>

532
00:21:08,030 --> 00:21:12,110
I'm<font color="#CCCCCC"> gonna</font><font color="#E5E5E5"> show you the</font><font color="#CCCCCC"> a process</font>

533
00:21:09,830 --> 00:21:13,820
<font color="#E5E5E5">structure which is a structure that is</font>

534
00:21:12,110 --> 00:21:14,520
<font color="#CCCCCC">allocated for each Pro running</font><font color="#E5E5E5"> process</font>

535
00:21:13,820 --> 00:21:16,649
on the system

536
00:21:14,520 --> 00:21:18,360
<font color="#CCCCCC">containing specific</font><font color="#E5E5E5"> data interestly</font>

537
00:21:16,650 --> 00:21:21,060
<font color="#E5E5E5">interestingly enough that contains the</font>

538
00:21:18,360 --> 00:21:23,010
security token<font color="#E5E5E5"> this token if I'm able</font><font color="#CCCCCC"> to</font>

539
00:21:21,060 --> 00:21:24,629
read and write<font color="#CCCCCC"> internal memory you'll be</font>

540
00:21:23,010 --> 00:21:27,060
able<font color="#E5E5E5"> to assign this token to</font><font color="#CCCCCC"> your own</font>

541
00:21:24,630 --> 00:21:30,150
process and gain elevated privileges<font color="#E5E5E5"> as</font>

542
00:21:27,060 --> 00:21:32,669
you<font color="#CCCCCC"> can</font><font color="#E5E5E5"> see so the first process is a</font>

543
00:21:30,150 --> 00:21:34,260
system process and this<font color="#E5E5E5"> is our current</font>

544
00:21:32,670 --> 00:21:36,360
process you can<font color="#E5E5E5"> see it has a different</font>

545
00:21:34,260 --> 00:21:37,950
<font color="#CCCCCC">token and</font><font color="#E5E5E5"> a</font><font color="#CCCCCC"> colored process token that</font>

546
00:21:36,360 --> 00:21:41,370
shows the permissions<font color="#E5E5E5"> that these</font>

547
00:21:37,950 --> 00:21:43,410
<font color="#E5E5E5">processes have on the system so after</font>

548
00:21:41,370 --> 00:21:46,379
that I<font color="#E5E5E5"> just write to the a process token</font>

549
00:21:43,410 --> 00:21:48,180
<font color="#CCCCCC">and we look at our current</font><font color="#E5E5E5"> token that we</font>

550
00:21:46,380 --> 00:21:52,530
have in our process we'll notice that it

551
00:21:48,180 --> 00:21:55,290
was modified<font color="#E5E5E5"> to</font><font color="#CCCCCC"> the system process 1 and</font>

552
00:21:52,530 --> 00:21:57,750
if I<font color="#CCCCCC"> just continue</font><font color="#E5E5E5"> execution and run CMD</font>

553
00:21:55,290 --> 00:21:59,490
dot X<font color="#CCCCCC"> II you notice we</font><font color="#E5E5E5"> dropped in a</font>

554
00:21:57,750 --> 00:22:02,930
shell<font color="#E5E5E5"> and from a low</font><font color="#CCCCCC"> privileges user</font>

555
00:21:59,490 --> 00:22:05,670
again system level access<font color="#CCCCCC"> to the system</font>

556
00:22:02,930 --> 00:22:08,640
well that's it for the offensive part of

557
00:22:05,670 --> 00:22:09,720
<font color="#E5E5E5">the talk</font><font color="#CCCCCC"> I'm</font><font color="#E5E5E5"> gonna give you and sho en</font>

558
00:22:08,640 --> 00:22:12,390
is<font color="#CCCCCC"> gonna</font><font color="#E5E5E5"> walk you</font><font color="#CCCCCC"> through how</font><font color="#E5E5E5"> we</font>

559
00:22:09,720 --> 00:22:14,250
actually started thinking<font color="#E5E5E5"> and mitigated</font>

560
00:22:12,390 --> 00:22:27,770
that type<font color="#CCCCCC"> of object abuse and current</font>

561
00:22:14,250 --> 00:22:31,440
<font color="#CCCCCC">memory at Microsoft hello hello</font><font color="#E5E5E5"> alright</font>

562
00:22:27,770 --> 00:22:34,800
so my name<font color="#E5E5E5"> is</font><font color="#CCCCCC"> Gian cronquist</font><font color="#E5E5E5"> and scythe</font>

563
00:22:31,440 --> 00:22:39,480
<font color="#E5E5E5">has shown you how over the past several</font>

564
00:22:34,800 --> 00:22:41,220
years over the<font color="#CCCCCC"> past few years</font><font color="#E5E5E5"> clever</font>

565
00:22:39,480 --> 00:22:45,110
<font color="#E5E5E5">people like safe and his buddies have</font>

566
00:22:41,220 --> 00:22:48,120
<font color="#CCCCCC">figured out</font><font color="#E5E5E5"> a reliable effective stable</font>

567
00:22:45,110 --> 00:22:51,870
<font color="#E5E5E5">family of exploits in order to escalate</font>

568
00:22:48,120 --> 00:22:53,969
privileges so say<font color="#CCCCCC"> your attacker</font>

569
00:22:51,870 --> 00:22:56,159
your ear in<font color="#CCCCCC"> pwned own and then you</font>

570
00:22:53,970 --> 00:22:57,510
<font color="#CCCCCC">figure out how</font><font color="#E5E5E5"> to pop edge and then your</font>

571
00:22:56,160 --> 00:22:59,880
next<font color="#CCCCCC"> step</font><font color="#E5E5E5"> is I need to be a more</font>

572
00:22:57,510 --> 00:23:02,730
privileged user to deliver my final

573
00:22:59,880 --> 00:23:04,800
payload<font color="#E5E5E5"> so</font><font color="#CCCCCC"> that what</font><font color="#E5E5E5"> you</font><font color="#CCCCCC"> know people are</font>

574
00:23:02,730 --> 00:23:08,550
<font color="#E5E5E5">doing these days</font><font color="#CCCCCC"> is their attacking the</font>

575
00:23:04,800 --> 00:23:13,050
in kernel driver system<font color="#E5E5E5"> win32 KR inti</font>

576
00:23:08,550 --> 00:23:15,240
GDI<font color="#E5E5E5"> as it's sometimes called and so you</font>

577
00:23:13,050 --> 00:23:17,220
know we go ahead<font color="#CCCCCC"> and we</font><font color="#E5E5E5"> go ahead fix the</font>

578
00:23:15,240 --> 00:23:20,280
bugs they find someone<font color="#E5E5E5"> else finds</font>

579
00:23:17,220 --> 00:23:22,740
<font color="#E5E5E5">another one or puts an</font><font color="#CCCCCC"> M SRC case a pone</font>

580
00:23:20,280 --> 00:23:24,360
<font color="#CCCCCC">- own submission</font><font color="#E5E5E5"> sling pops up in</font>

581
00:23:22,740 --> 00:23:26,910
malware you know this is a game of

582
00:23:24,360 --> 00:23:28,469
whack-a-mole we can't fix every bug<font color="#CCCCCC"> and</font>

583
00:23:26,910 --> 00:23:31,679
so the

584
00:23:28,470 --> 00:23:33,840
this is a systemic problem and in the

585
00:23:31,679 --> 00:23:36,059
<font color="#E5E5E5">face of a systemic problem we need a</font>

586
00:23:33,840 --> 00:23:39,330
systemic<font color="#E5E5E5"> solution you know and this</font>

587
00:23:36,059 --> 00:23:40,830
extends beyond<font color="#E5E5E5"> the windows ecosystem and</font>

588
00:23:39,330 --> 00:23:44,250
the the problems which we have<font color="#CCCCCC"> hit</font>

589
00:23:40,830 --> 00:23:46,889
Microsoft<font color="#E5E5E5"> you know</font><font color="#CCCCCC"> it my Linux</font><font color="#E5E5E5"> has</font>

590
00:23:44,250 --> 00:23:49,020
similar issues<font color="#E5E5E5"> and there</font><font color="#CCCCCC"> are people</font>

591
00:23:46,890 --> 00:23:53,250
<font color="#E5E5E5">working hard to</font><font color="#CCCCCC"> get more mitigations</font>

592
00:23:49,020 --> 00:23:56,010
into the Linux kernel<font color="#E5E5E5"> as well</font><font color="#CCCCCC"> so if</font><font color="#E5E5E5"> we</font>

593
00:23:53,250 --> 00:23:58,289
are<font color="#E5E5E5"> in the if we have a systemic problem</font>

594
00:23:56,010 --> 00:24:00,809
<font color="#CCCCCC">we needed</font><font color="#E5E5E5"> a systemic solution in this</font>

595
00:23:58,289 --> 00:24:02,879
<font color="#E5E5E5">case</font><font color="#CCCCCC"> it's mitigations</font><font color="#E5E5E5"> we want to make</font>

596
00:24:00,809 --> 00:24:05,850
the bugs more<font color="#E5E5E5"> difficult or even</font>

597
00:24:02,880 --> 00:24:08,669
impossible to<font color="#E5E5E5"> exploit so we want to</font>

598
00:24:05,850 --> 00:24:10,168
raise the<font color="#CCCCCC"> bar</font><font color="#E5E5E5"> for hackers fortunately</font><font color="#CCCCCC"> at</font>

599
00:24:08,669 --> 00:24:13,860
Microsoft we have a lot<font color="#CCCCCC"> of historical</font>

600
00:24:10,169 --> 00:24:17,250
<font color="#E5E5E5">nsrc data of our all our vulnerabilities</font>

601
00:24:13,860 --> 00:24:19,530
everything<font color="#CCCCCC"> I Eve shown has shown us</font><font color="#E5E5E5"> and</font>

602
00:24:17,250 --> 00:24:24,600
people<font color="#E5E5E5"> looking for bug bounties they've</font>

603
00:24:19,530 --> 00:24:26,580
reported<font color="#E5E5E5"> it and you can see that we</font>

604
00:24:24,600 --> 00:24:28,379
looked at<font color="#E5E5E5"> it in order to decide how do</font>

605
00:24:26,580 --> 00:24:30,960
we<font color="#E5E5E5"> want to</font><font color="#CCCCCC"> design our mitigations what's</font>

606
00:24:28,380 --> 00:24:34,289
most important to tackle<font color="#CCCCCC"> first and we</font>

607
00:24:30,960 --> 00:24:37,760
chose this big red sector<font color="#E5E5E5"> right up there</font>

608
00:24:34,289 --> 00:24:41,580
<font color="#E5E5E5">use after freeze of all the play</font><font color="#CCCCCC"> all the</font>

609
00:24:37,760 --> 00:24:45,299
of all the<font color="#E5E5E5"> types of bugs which we found</font>

610
00:24:41,580 --> 00:24:47,399
in<font color="#E5E5E5"> 1/3 2k 23 percent of them are</font><font color="#CCCCCC"> us</font>

611
00:24:45,299 --> 00:24:50,850
after freeze a youth after freeze are a

612
00:24:47,400 --> 00:24:56,820
relatively like consistent class<font color="#E5E5E5"> so it's</font>

613
00:24:50,850 --> 00:24:58,110
a great target<font color="#CCCCCC"> for a</font><font color="#E5E5E5"> mitigation</font><font color="#CCCCCC"> so then</font>

614
00:24:56,820 --> 00:25:00,090
I want to talk to you a little<font color="#E5E5E5"> bit about</font>

615
00:24:58,110 --> 00:25:02,370
our threat model you know what is a

616
00:25:00,090 --> 00:25:04,350
threat model that's when we would we

617
00:25:02,370 --> 00:25:06,689
<font color="#CCCCCC">assume the attacker can do</font><font color="#E5E5E5"> when</font><font color="#CCCCCC"> they're</font>

618
00:25:04,350 --> 00:25:09,000
trying<font color="#CCCCCC"> to you know attack</font><font color="#E5E5E5"> the system</font><font color="#CCCCCC"> so</font>

619
00:25:06,690 --> 00:25:11,460
we assume that<font color="#E5E5E5"> the attacker has found a</font>

620
00:25:09,000 --> 00:25:16,080
use after free<font color="#E5E5E5"> and one of the</font><font color="#CCCCCC"> end egi</font><font color="#E5E5E5"> or</font>

621
00:25:11,460 --> 00:25:18,179
<font color="#E5E5E5">teaser types and then one of the few</font>

622
00:25:16,080 --> 00:25:19,379
<font color="#CCCCCC">types</font><font color="#E5E5E5"> we protect we don't protect</font>

623
00:25:18,179 --> 00:25:22,080
everything<font color="#CCCCCC"> I'll tell you a little</font><font color="#E5E5E5"> more</font>

624
00:25:19,380 --> 00:25:26,280
<font color="#CCCCCC">why and they can cause</font><font color="#E5E5E5"> this way I have</font>

625
00:25:22,080 --> 00:25:27,629
<font color="#E5E5E5">to happen at any time whatsoever</font><font color="#CCCCCC"> we</font>

626
00:25:26,280 --> 00:25:29,490
assume that the attacker does not have

627
00:25:27,630 --> 00:25:31,950
an arbitrary readwrite value yeah

628
00:25:29,490 --> 00:25:33,630
<font color="#E5E5E5">readwrite primitive you know</font><font color="#CCCCCC"> a</font><font color="#E5E5E5"> use after</font>

629
00:25:31,950 --> 00:25:38,100
free is something you use<font color="#E5E5E5"> in order to</font>

630
00:25:33,630 --> 00:25:40,169
create<font color="#E5E5E5"> arbitrary right</font><font color="#CCCCCC"> if you already</font>

631
00:25:38,100 --> 00:25:42,789
have an arbitrary right who cares<font color="#E5E5E5"> about</font>

632
00:25:40,169 --> 00:25:44,529
the mitigation<font color="#CCCCCC"> you already on the box</font>

633
00:25:42,789 --> 00:25:46,029
however we want our mitigation<font color="#E5E5E5"> to be</font>

634
00:25:44,529 --> 00:25:48,429
safe in the face<font color="#CCCCCC"> of an arbitrary</font><font color="#E5E5E5"> read</font>

635
00:25:46,029 --> 00:25:50,379
<font color="#E5E5E5">there's no particular reason that it</font>

636
00:25:48,429 --> 00:25:53,019
shouldn't<font color="#E5E5E5"> be so we should be conscious</font>

637
00:25:50,379 --> 00:25:55,389
<font color="#CCCCCC">of</font><font color="#E5E5E5"> what the attacker</font><font color="#CCCCCC"> what we think the</font>

638
00:25:53,019 --> 00:25:58,809
attacker can and cannot do<font color="#CCCCCC"> and that's</font>

639
00:25:55,389 --> 00:26:01,389
our our threat model<font color="#E5E5E5"> now not in our</font>

640
00:25:58,809 --> 00:26:03,309
threat model<font color="#CCCCCC"> is like I said if you</font>

641
00:26:01,389 --> 00:26:05,859
<font color="#E5E5E5">already have a right what we're</font>

642
00:26:03,309 --> 00:26:07,989
vulnerable<font color="#CCCCCC"> 'ti</font><font color="#E5E5E5"> you're already</font><font color="#CCCCCC"> one</font><font color="#E5E5E5"> we</font>

643
00:26:05,859 --> 00:26:09,939
can't stop you you can modify our<font color="#CCCCCC"> data</font>

644
00:26:07,989 --> 00:26:14,409
<font color="#CCCCCC">structures</font><font color="#E5E5E5"> you can modify more important</font>

645
00:26:09,940 --> 00:26:16,409
coronal data structures<font color="#E5E5E5"> and for a</font>

646
00:26:14,409 --> 00:26:20,859
<font color="#CCCCCC">variety of reasons</font><font color="#E5E5E5"> we only protect a</font>

647
00:26:16,409 --> 00:26:23,589
limited number of<font color="#E5E5E5"> types</font><font color="#CCCCCC"> we only protect</font>

648
00:26:20,859 --> 00:26:25,809
sometimes because we wanted to<font color="#CCCCCC"> roll this</font>

649
00:26:23,589 --> 00:26:28,329
out<font color="#E5E5E5"> incrementally you know Microsoft's a</font>

650
00:26:25,809 --> 00:26:31,059
big organization we couldn't risk<font color="#E5E5E5"> being</font>

651
00:26:28,329 --> 00:26:32,559
able to turn it on everywhere<font color="#E5E5E5"> and then</font>

652
00:26:31,059 --> 00:26:34,749
finding<font color="#E5E5E5"> it was there was a regression</font>

653
00:26:32,559 --> 00:26:36,428
for one obscure type which is only he's

654
00:26:34,749 --> 00:26:38,709
doing a couple<font color="#CCCCCC"> places in the code base</font>

655
00:26:36,429 --> 00:26:40,749
<font color="#E5E5E5">there's also some memory impacts there's</font>

656
00:26:38,709 --> 00:26:42,309
a you know<font color="#E5E5E5"> introducing this this new</font>

657
00:26:40,749 --> 00:26:43,569
heap I'm going to tell you about<font color="#E5E5E5"> it</font>

658
00:26:42,309 --> 00:26:46,059
takes up a<font color="#CCCCCC"> little</font><font color="#E5E5E5"> more space in the</font>

659
00:26:43,569 --> 00:26:48,039
kernel<font color="#E5E5E5"> and well that's acceptable for</font>

660
00:26:46,059 --> 00:26:49,809
<font color="#E5E5E5">for a few types if we were to do it for</font>

661
00:26:48,039 --> 00:26:52,779
every single<font color="#CCCCCC"> pie</font><font color="#E5E5E5"> noodle type which</font>

662
00:26:49,809 --> 00:26:55,629
probably isn't exploitable<font color="#E5E5E5"> you know it</font>

663
00:26:52,779 --> 00:26:57,459
<font color="#E5E5E5">it's it would have a large impact</font><font color="#CCCCCC"> so</font>

664
00:26:55,629 --> 00:27:00,789
what we decided<font color="#CCCCCC"> to</font><font color="#E5E5E5"> do is we looked at</font>

665
00:26:57,459 --> 00:27:03,249
<font color="#CCCCCC">using</font><font color="#E5E5E5"> that historical bug database</font>

666
00:27:00,789 --> 00:27:06,039
<font color="#E5E5E5">you know what types were being exploited</font>

667
00:27:03,249 --> 00:27:08,319
<font color="#E5E5E5">by safe and his buddies and what types</font>

668
00:27:06,039 --> 00:27:09,879
they were<font color="#CCCCCC"> gonna</font><font color="#E5E5E5"> turn to next like why</font>

669
00:27:08,319 --> 00:27:12,339
are there similar patterns which we can

670
00:27:09,879 --> 00:27:14,168
see you know<font color="#E5E5E5"> did say say this talk you</font>

671
00:27:12,339 --> 00:27:17,559
know after<font color="#E5E5E5"> this type I'm gonna exploit</font>

672
00:27:14,169 --> 00:27:19,269
next this type if they patch it<font color="#E5E5E5"> so</font>

673
00:27:17,559 --> 00:27:26,589
that's how<font color="#CCCCCC"> we chose</font><font color="#E5E5E5"> you know what to</font>

674
00:27:19,269 --> 00:27:28,569
protect<font color="#E5E5E5"> so the the mitigation I'm going</font>

675
00:27:26,589 --> 00:27:31,899
to talk to you about<font color="#E5E5E5"> today we call type</font>

676
00:27:28,569 --> 00:27:36,190
isolation<font color="#E5E5E5"> it doesn't protect against</font><font color="#CCCCCC"> UAS</font>

677
00:27:31,899 --> 00:27:39,428
it doesn't prevent UAS rather it<font color="#E5E5E5"> prevent</font>

678
00:27:36,190 --> 00:27:42,279
it makes it so that<font color="#E5E5E5"> you can't take a</font><font color="#CCCCCC"> UA</font>

679
00:27:39,429 --> 00:27:44,679
<font color="#CCCCCC">F and then turn</font><font color="#E5E5E5"> it into a you</font><font color="#CCCCCC"> know a</font>

680
00:27:42,279 --> 00:27:47,169
vulnerability<font color="#E5E5E5"> a right what we're</font>

681
00:27:44,679 --> 00:27:49,179
primitive<font color="#CCCCCC"> it just makes them very</font>

682
00:27:47,169 --> 00:27:52,389
difficult<font color="#CCCCCC"> to explain I'm gonna explain</font>

683
00:27:49,179 --> 00:27:54,279
how<font color="#CCCCCC"> that</font><font color="#E5E5E5"> works</font><font color="#CCCCCC"> it's also important to</font>

684
00:27:52,389 --> 00:27:55,810
note that since<font color="#E5E5E5"> use after freeze have</font>

685
00:27:54,279 --> 00:27:58,300
this you know<font color="#E5E5E5"> weird</font>

686
00:27:55,810 --> 00:28:00,700
time element<font color="#E5E5E5"> a lot of vulnerabilities</font>

687
00:27:58,300 --> 00:28:03,010
<font color="#CCCCCC">you like overflow the integer and the</font>

688
00:28:00,700 --> 00:28:05,650
next instruction you can<font color="#E5E5E5"> write anything</font>

689
00:28:03,010 --> 00:28:07,780
<font color="#E5E5E5">anywhere and you can detect the integer</font>

690
00:28:05,650 --> 00:28:09,850
overflow right after that instruction

691
00:28:07,780 --> 00:28:11,800
<font color="#CCCCCC">you so after free it's like you've</font><font color="#E5E5E5"> got</font>

692
00:28:09,850 --> 00:28:17,379
<font color="#E5E5E5">this dangling pointer it could dangle</font>

693
00:28:11,800 --> 00:28:22,629
<font color="#E5E5E5">for minutes hours days who knows</font><font color="#CCCCCC"> so um</font>

694
00:28:17,380 --> 00:28:24,130
in order<font color="#E5E5E5"> to catch all the UAFS</font><font color="#CCCCCC"> i you you</font>

695
00:28:22,630 --> 00:28:25,420
actually<font color="#CCCCCC"> need to</font><font color="#E5E5E5"> like check every</font>

696
00:28:24,130 --> 00:28:27,100
pointer dereference and that's

697
00:28:25,420 --> 00:28:29,710
incredibly<font color="#E5E5E5"> slow that's something which</font>

698
00:28:27,100 --> 00:28:32,110
you can't do<font color="#CCCCCC"> in the</font><font color="#E5E5E5"> kernel</font><font color="#CCCCCC"> and</font><font color="#E5E5E5"> windows</font>

699
00:28:29,710 --> 00:28:34,600
<font color="#E5E5E5">would just slow to a crawl</font><font color="#CCCCCC"> so this is</font>

700
00:28:32,110 --> 00:28:36,370
something<font color="#E5E5E5"> where you know in the curl you</font>

701
00:28:34,600 --> 00:28:37,990
have a lot of<font color="#E5E5E5"> interesting considerations</font>

702
00:28:36,370 --> 00:28:40,750
that<font color="#E5E5E5"> you</font><font color="#CCCCCC"> have to to think about when</font>

703
00:28:37,990 --> 00:28:43,300
you're designing your mitigation<font color="#CCCCCC"> so</font>

704
00:28:40,750 --> 00:28:44,470
we've<font color="#E5E5E5"> designed it so</font><font color="#CCCCCC"> that even in the</font>

705
00:28:43,300 --> 00:28:46,810
face<font color="#CCCCCC"> of</font><font color="#E5E5E5"> UAFS</font>

706
00:28:44,470 --> 00:28:48,280
as they inevitably occur that's<font color="#E5E5E5"> our</font>

707
00:28:46,810 --> 00:28:50,560
assumption<font color="#E5E5E5"> you ask they're going to</font>

708
00:28:48,280 --> 00:28:53,350
happen<font color="#E5E5E5"> but the attacker is</font><font color="#CCCCCC"> not going to</font>

709
00:28:50,560 --> 00:28:56,740
be able<font color="#E5E5E5"> to take them and exploit them</font>

710
00:28:53,350 --> 00:29:03,520
and and<font color="#CCCCCC"> escalate privileges</font><font color="#E5E5E5"> like</font><font color="#CCCCCC"> safe</font>

711
00:28:56,740 --> 00:29:05,530
showed you so the what we decided is we

712
00:29:03,520 --> 00:29:08,020
want to<font color="#E5E5E5"> deny the attacker control of</font>

713
00:29:05,530 --> 00:29:11,290
memory<font color="#E5E5E5"> you know if the attacker</font><font color="#CCCCCC"> controls</font>

714
00:29:08,020 --> 00:29:13,720
<font color="#E5E5E5">where these objects sit and figures out</font>

715
00:29:11,290 --> 00:29:15,790
<font color="#E5E5E5">a way to overlap them</font><font color="#CCCCCC"> then he can make</font>

716
00:29:13,720 --> 00:29:18,580
the primitive happen which<font color="#CCCCCC"> scythe showed</font>

717
00:29:15,790 --> 00:29:20,830
you some<font color="#CCCCCC"> of</font><font color="#E5E5E5"> this later slides so you</font>

718
00:29:18,580 --> 00:29:24,250
<font color="#CCCCCC">know it's the layout and contents of</font>

719
00:29:20,830 --> 00:29:26,340
memory<font color="#E5E5E5"> which really matter</font><font color="#CCCCCC"> so we changed</font>

720
00:29:24,250 --> 00:29:29,560
the<font color="#E5E5E5"> layout of memory to be harder to</font>

721
00:29:26,340 --> 00:29:31,870
<font color="#CCCCCC">exploit in the</font><font color="#E5E5E5"> face</font><font color="#CCCCCC"> of bugs</font><font color="#E5E5E5"> and deny the</font>

722
00:29:29,560 --> 00:29:34,929
attacker control deny the attacker

723
00:29:31,870 --> 00:29:37,419
<font color="#E5E5E5">control</font><font color="#CCCCCC"> of memory just stop the use</font>

724
00:29:34,930 --> 00:29:42,100
after free from being<font color="#E5E5E5"> a exploitable</font>

725
00:29:37,420 --> 00:29:45,160
vulnerability so<font color="#E5E5E5"> what we've decided is</font>

726
00:29:42,100 --> 00:29:47,320
there's there's two two ways<font color="#CCCCCC"> to things</font>

727
00:29:45,160 --> 00:29:48,700
we have to protect against the first is

728
00:29:47,320 --> 00:29:51,580
you've got two different<font color="#CCCCCC"> types of</font>

729
00:29:48,700 --> 00:29:54,280
objects<font color="#E5E5E5"> that</font><font color="#CCCCCC"> blue guy</font><font color="#E5E5E5"> up there that</font>

730
00:29:51,580 --> 00:29:57,510
<font color="#E5E5E5">orange guy object day object be maybe</font>

731
00:29:54,280 --> 00:30:00,100
wants a<font color="#CCCCCC"> pallet maybe</font><font color="#E5E5E5"> ones a window and</font>

732
00:29:57,510 --> 00:30:03,280
you know you've<font color="#E5E5E5"> got some pointers in</font>

733
00:30:00,100 --> 00:30:06,399
object<font color="#E5E5E5"> b and some color data for like</font>

734
00:30:03,280 --> 00:30:08,200
the GDI subsystem which the user and

735
00:30:06,400 --> 00:30:10,450
<font color="#CCCCCC">their</font><font color="#E5E5E5"> application can you know</font><font color="#CCCCCC"> chain</font>

736
00:30:08,200 --> 00:30:14,019
whatever color to make the<font color="#E5E5E5"> screen bluer</font>

737
00:30:10,450 --> 00:30:16,330
or orange or whatever<font color="#E5E5E5"> and then you</font><font color="#CCCCCC"> know</font>

738
00:30:14,019 --> 00:30:18,609
by changing the color data to look kind

739
00:30:16,330 --> 00:30:21,668
of like<font color="#CCCCCC"> a pointer</font><font color="#E5E5E5"> they can now you know</font>

740
00:30:18,609 --> 00:30:23,889
<font color="#E5E5E5">read and write memory just like Saif was</font>

741
00:30:21,669 --> 00:30:25,899
showing you<font color="#CCCCCC"> earlier</font><font color="#E5E5E5"> so we have to</font>

742
00:30:23,889 --> 00:30:27,699
prevent objects from<font color="#E5E5E5"> overlapping with</font>

743
00:30:25,899 --> 00:30:30,070
each<font color="#E5E5E5"> other like this we need to</font><font color="#CCCCCC"> isolate</font>

744
00:30:27,700 --> 00:30:33,309
these two types<font color="#E5E5E5"> and keep them away</font><font color="#CCCCCC"> from</font>

745
00:30:30,070 --> 00:30:35,439
one<font color="#CCCCCC"> another and then</font><font color="#E5E5E5"> there's a there's</font>

746
00:30:33,309 --> 00:30:37,389
<font color="#E5E5E5">another scenario</font><font color="#CCCCCC"> and this</font><font color="#E5E5E5"> is kind of a</font>

747
00:30:35,440 --> 00:30:39,789
variation<font color="#CCCCCC"> of the first what if you have</font>

748
00:30:37,389 --> 00:30:42,279
two<font color="#CCCCCC"> different objects</font><font color="#E5E5E5"> object a and also</font>

749
00:30:39,789 --> 00:30:43,600
object<font color="#E5E5E5"> a there's both the same type but</font>

750
00:30:42,279 --> 00:30:45,429
<font color="#E5E5E5">they're at like slightly different</font>

751
00:30:43,600 --> 00:30:47,439
offsets there's a pointer in there

752
00:30:45,429 --> 00:30:49,869
there's<font color="#E5E5E5"> some color data and you managed</font>

753
00:30:47,440 --> 00:30:52,359
to<font color="#E5E5E5"> make the offsets line up just right</font>

754
00:30:49,869 --> 00:30:54,850
<font color="#CCCCCC">so</font><font color="#E5E5E5"> that color data and that pointers on</font>

755
00:30:52,359 --> 00:30:56,918
top of each other<font color="#CCCCCC"> well this can be</font>

756
00:30:54,850 --> 00:30:59,799
another<font color="#E5E5E5"> problem you know we have to</font>

757
00:30:56,919 --> 00:31:02,649
prevent<font color="#E5E5E5"> this scenario too so we looked</font>

758
00:30:59,799 --> 00:31:04,269
at all of this and<font color="#E5E5E5"> we decided okay these</font>

759
00:31:02,649 --> 00:31:07,059
<font color="#E5E5E5">are the two things we</font><font color="#CCCCCC"> have</font><font color="#E5E5E5"> to stop</font><font color="#CCCCCC"> in</font>

760
00:31:04,269 --> 00:31:11,980
<font color="#E5E5E5">our to stop</font><font color="#CCCCCC"> Yusef Jeffries from being</font>

761
00:31:07,059 --> 00:31:13,658
exploitable so you know one<font color="#CCCCCC"> of the</font>

762
00:31:11,980 --> 00:31:17,279
<font color="#E5E5E5">problems we encountered though is that</font>

763
00:31:13,659 --> 00:31:20,019
that bitmap<font color="#CCCCCC"> object</font><font color="#E5E5E5"> the pallet object</font>

764
00:31:17,279 --> 00:31:22,210
<font color="#CCCCCC">there variable size you can</font><font color="#E5E5E5"> have a big</font>

765
00:31:20,019 --> 00:31:25,419
pallet<font color="#E5E5E5"> a little pallet a big bitmap a</font>

766
00:31:22,210 --> 00:31:27,789
little one and so<font color="#E5E5E5"> that makes it</font>

767
00:31:25,419 --> 00:31:29,350
<font color="#E5E5E5">difficult to prevent bit nap just from</font>

768
00:31:27,789 --> 00:31:31,658
<font color="#E5E5E5">overlapping at each other and if we</font>

769
00:31:29,350 --> 00:31:33,689
can't stop<font color="#E5E5E5"> you know bitmap from</font>

770
00:31:31,659 --> 00:31:36,999
overlapping at each other like<font color="#CCCCCC"> half as I</font>

771
00:31:33,690 --> 00:31:38,559
still works<font color="#E5E5E5"> so</font><font color="#CCCCCC"> we decided you</font><font color="#E5E5E5"> know we're</font>

772
00:31:36,999 --> 00:31:40,330
gonna do is we're going to<font color="#E5E5E5"> realize</font><font color="#CCCCCC"> that</font>

773
00:31:38,559 --> 00:31:42,789
there's a fixed<font color="#CCCCCC"> size part up there in</font>

774
00:31:40,330 --> 00:31:45,789
green<font color="#E5E5E5"> and there's a variable size part</font>

775
00:31:42,789 --> 00:31:48,129
in<font color="#E5E5E5"> blue this array</font><font color="#CCCCCC"> of</font><font color="#E5E5E5"> user-defined color</font>

776
00:31:45,789 --> 00:31:51,279
data and we've got<font color="#E5E5E5"> it we're gonna put</font>

777
00:31:48,129 --> 00:31:54,100
the fixed size part in the type isolated

778
00:31:51,279 --> 00:31:56,049
heap only<font color="#E5E5E5"> that chunk of the pallet</font>

779
00:31:54,100 --> 00:31:57,699
objects<font color="#CCCCCC"> gonna</font><font color="#E5E5E5"> live there and then that</font>

780
00:31:56,049 --> 00:31:59,889
<font color="#E5E5E5">variable size</font><font color="#CCCCCC"> too right that'll just</font>

781
00:31:57,700 --> 00:32:02,379
live in the general heap and so that way

782
00:31:59,889 --> 00:32:05,258
we can't you know<font color="#E5E5E5"> overwrite</font><font color="#CCCCCC"> that</font>

783
00:32:02,379 --> 00:32:09,730
metadata<font color="#E5E5E5"> that fixed size metadata full</font>

784
00:32:05,259 --> 00:32:13,600
of flags and<font color="#E5E5E5"> pointers in the in the</font>

785
00:32:09,730 --> 00:32:16,989
pallet header with the<font color="#E5E5E5"> you know variable</font>

786
00:32:13,600 --> 00:32:20,039
sized<font color="#CCCCCC"> user-controlled</font><font color="#E5E5E5"> color pointers or</font>

787
00:32:16,989 --> 00:32:20,039
or<font color="#E5E5E5"> bitmap data</font>

788
00:32:20,480 --> 00:32:23,540
so I want to talk<font color="#E5E5E5"> to you a little</font><font color="#CCCCCC"> bit</font>

789
00:32:22,130 --> 00:32:26,840
about<font color="#E5E5E5"> the data structures we used to</font>

790
00:32:23,540 --> 00:32:28,490
make this work<font color="#CCCCCC"> we</font><font color="#E5E5E5"> decided you know each</font>

791
00:32:26,840 --> 00:32:30,649
of<font color="#CCCCCC"> these types</font><font color="#E5E5E5"> they're</font><font color="#CCCCCC"> going to be in</font>

792
00:32:28,490 --> 00:32:33,710
their own heap<font color="#E5E5E5"> how do we want to decide</font>

793
00:32:30,650 --> 00:32:34,610
<font color="#E5E5E5">you know the</font><font color="#CCCCCC"> layout of</font><font color="#E5E5E5"> this heap how do</font>

794
00:32:33,710 --> 00:32:39,770
we make it efficient

795
00:32:34,610 --> 00:32:41,570
well<font color="#CCCCCC"> since each size</font><font color="#E5E5E5"> is each object is</font>

796
00:32:39,770 --> 00:32:43,220
of the same<font color="#E5E5E5"> type</font><font color="#CCCCCC"> one of the most</font>

797
00:32:41,570 --> 00:32:45,860
efficient ways<font color="#CCCCCC"> to</font><font color="#E5E5E5"> track which objects</font>

798
00:32:43,220 --> 00:32:48,580
are free and which ones are used<font color="#E5E5E5"> is to</font>

799
00:32:45,860 --> 00:32:52,580
just have a big bitmap<font color="#E5E5E5"> and you've got</font><font color="#CCCCCC"> a</font>

800
00:32:48,580 --> 00:32:55,699
<font color="#E5E5E5">one if the object is the slot in the</font>

801
00:32:52,580 --> 00:33:00,379
<font color="#CCCCCC">heap is you know</font><font color="#E5E5E5"> being used by a pallet</font>

802
00:32:55,700 --> 00:33:02,900
<font color="#CCCCCC">or</font><font color="#E5E5E5"> zero if the object of the heap is you</font>

803
00:33:00,380 --> 00:33:06,110
know is isn't being used<font color="#E5E5E5"> right now</font><font color="#CCCCCC"> and</font>

804
00:33:02,900 --> 00:33:09,470
<font color="#CCCCCC">we also make sure</font><font color="#E5E5E5"> this is important that</font>

805
00:33:06,110 --> 00:33:12,830
every empty<font color="#E5E5E5"> slot is zeroed once a free</font>

806
00:33:09,470 --> 00:33:15,890
happens so<font color="#CCCCCC"> that way there's no like old</font>

807
00:33:12,830 --> 00:33:22,550
<font color="#E5E5E5">dangling pointers sitting around in that</font>

808
00:33:15,890 --> 00:33:25,070
old stale object so I want to<font color="#E5E5E5"> walk</font><font color="#CCCCCC"> you</font>

809
00:33:22,550 --> 00:33:27,530
through to use after free scenarios and

810
00:33:25,070 --> 00:33:29,840
show how what really happens<font color="#CCCCCC"> when we try</font>

811
00:33:27,530 --> 00:33:34,070
<font color="#CCCCCC">and you know</font><font color="#E5E5E5"> use an exploit</font><font color="#CCCCCC"> like saves</font>

812
00:33:29,840 --> 00:33:35,750
on this new type isolated heap so the

813
00:33:34,070 --> 00:33:37,850
<font color="#E5E5E5">the first</font><font color="#CCCCCC"> scenario</font><font color="#E5E5E5"> we've got some other</font>

814
00:33:35,750 --> 00:33:40,370
object up there in blue<font color="#E5E5E5"> it lives on the</font>

815
00:33:37,850 --> 00:33:41,020
<font color="#E5E5E5">general-purpose heap maybe it's one of</font>

816
00:33:40,370 --> 00:33:44,060
<font color="#E5E5E5">size</font>

817
00:33:41,020 --> 00:33:46,790
pout window objects and we're gonna

818
00:33:44,060 --> 00:33:49,010
<font color="#E5E5E5">smash the pallet object right that's</font>

819
00:33:46,790 --> 00:33:51,680
<font color="#E5E5E5">that's what is he's trying</font><font color="#CCCCCC"> to do it but</font>

820
00:33:49,010 --> 00:33:56,360
we've isolated the pallet object now<font color="#E5E5E5"> so</font>

821
00:33:51,680 --> 00:34:00,500
when we free it we get this empty slot

822
00:33:56,360 --> 00:34:03,590
we zero it and now if safe tries to use

823
00:34:00,500 --> 00:34:05,720
<font color="#E5E5E5">that other object</font><font color="#CCCCCC"> to write through what</font>

824
00:34:03,590 --> 00:34:08,900
used<font color="#E5E5E5"> to</font><font color="#CCCCCC"> be a pointer in the</font><font color="#E5E5E5"> pallet</font><font color="#CCCCCC"> that</font>

825
00:34:05,720 --> 00:34:11,380
point is<font color="#CCCCCC"> an OL now it's all zeros and so</font>

826
00:34:08,900 --> 00:34:13,790
when safe tries to reference it<font color="#E5E5E5"> boom</font>

827
00:34:11,380 --> 00:34:16,340
<font color="#CCCCCC">we're going to get a blue screen of</font>

828
00:34:13,790 --> 00:34:18,820
death and his exploit is you know no

829
00:34:16,340 --> 00:34:18,820
<font color="#CCCCCC">longer viable</font>

830
00:34:19,449 --> 00:34:25,819
<font color="#CCCCCC">this</font><font color="#E5E5E5"> also set resets all the flags and</font>

831
00:34:22,730 --> 00:34:27,980
other data down to<font color="#CCCCCC"> like a ground state</font>

832
00:34:25,820 --> 00:34:30,230
where everything's going to<font color="#E5E5E5"> be safe</font><font color="#CCCCCC"> for</font>

833
00:34:27,980 --> 00:34:32,830
harder<font color="#E5E5E5"> to exploit all the</font><font color="#CCCCCC"> sizes are</font>

834
00:34:30,230 --> 00:34:32,830
going<font color="#CCCCCC"> to be zero</font>

835
00:34:32,949 --> 00:34:39,489
so let's discuss<font color="#CCCCCC"> the the</font><font color="#E5E5E5"> other more</font>

836
00:34:35,560 --> 00:34:40,960
complicated scenario so<font color="#E5E5E5"> we know we are</font>

837
00:34:39,489 --> 00:34:43,719
<font color="#CCCCCC">you know starting at the same place</font>

838
00:34:40,960 --> 00:34:45,940
we've<font color="#CCCCCC"> got</font><font color="#E5E5E5"> that other object and it</font>

839
00:34:43,719 --> 00:34:51,310
points<font color="#CCCCCC"> to the pallet and we're gonna</font>

840
00:34:45,940 --> 00:34:54,070
<font color="#E5E5E5">free it and then we're going</font><font color="#CCCCCC"> to this is</font>

841
00:34:51,310 --> 00:34:56,049
<font color="#CCCCCC">where we were last time with that</font><font color="#E5E5E5"> zero</font>

842
00:34:54,070 --> 00:34:58,090
<font color="#E5E5E5">da</font><font color="#CCCCCC"> but this time we're gonna create a</font>

843
00:34:56,050 --> 00:35:02,230
<font color="#E5E5E5">new a different palette in the same</font>

844
00:34:58,090 --> 00:35:04,300
place<font color="#CCCCCC"> now this other object</font><font color="#E5E5E5"> doesn't know</font>

845
00:35:02,230 --> 00:35:07,030
about<font color="#E5E5E5"> it</font><font color="#CCCCCC"> it still got</font><font color="#E5E5E5"> a pointer to</font><font color="#CCCCCC"> that</font>

846
00:35:04,300 --> 00:35:09,490
slot<font color="#E5E5E5"> but there's a there's now a</font>

847
00:35:07,030 --> 00:35:11,260
<font color="#E5E5E5">different palette there and it thinks it</font>

848
00:35:09,490 --> 00:35:12,729
<font color="#CCCCCC">has</font><font color="#E5E5E5"> it's pointing to the first</font><font color="#CCCCCC"> palette</font>

849
00:35:11,260 --> 00:35:14,410
which<font color="#E5E5E5"> is completely gone</font><font color="#CCCCCC"> now</font>

850
00:35:12,730 --> 00:35:17,800
it was erased and replaced<font color="#E5E5E5"> with another</font>

851
00:35:14,410 --> 00:35:20,649
<font color="#CCCCCC">one</font><font color="#E5E5E5"> on so let's say you try and use</font>

852
00:35:17,800 --> 00:35:22,720
<font color="#CCCCCC">safes technique now well there's still a</font>

853
00:35:20,650 --> 00:35:26,260
valid palette at the other end<font color="#CCCCCC"> so you're</font>

854
00:35:22,720 --> 00:35:27,520
<font color="#E5E5E5">trying to you know</font><font color="#CCCCCC"> write you know</font><font color="#E5E5E5"> via a</font>

855
00:35:26,260 --> 00:35:30,370
pointer<font color="#E5E5E5"> in the palette you're still</font>

856
00:35:27,520 --> 00:35:33,460
pointing to valid data but data which is

857
00:35:30,370 --> 00:35:36,460
in use<font color="#CCCCCC"> and</font><font color="#E5E5E5"> properly initialized and so</font>

858
00:35:33,460 --> 00:35:39,010
this makes it so even<font color="#E5E5E5"> though you know</font>

859
00:35:36,460 --> 00:35:43,660
<font color="#E5E5E5">you're pointing</font><font color="#CCCCCC"> to the wrong palette</font>

860
00:35:39,010 --> 00:35:46,990
<font color="#E5E5E5">it's still a legit one and you can't you</font>

861
00:35:43,660 --> 00:35:49,270
can't make an exploit out of this

862
00:35:46,990 --> 00:35:51,160
<font color="#E5E5E5">because all the palette codes</font><font color="#CCCCCC"> gonna</font><font color="#E5E5E5"> look</font>

863
00:35:49,270 --> 00:35:54,370
<font color="#E5E5E5">at and go yep this</font><font color="#CCCCCC"> is a valid palette</font>

864
00:35:51,160 --> 00:35:56,560
<font color="#E5E5E5">these are valid sizes and offsets and</font>

865
00:35:54,370 --> 00:36:01,630
pointers which point<font color="#E5E5E5"> to real data</font><font color="#CCCCCC"> and</font>

866
00:35:56,560 --> 00:36:06,340
they're not the the hex 41 41 which safe

867
00:36:01,630 --> 00:36:09,760
stopped in there I want<font color="#E5E5E5"> to talk to you a</font>

868
00:36:06,340 --> 00:36:12,210
little<font color="#CCCCCC"> bit of a similar work</font><font color="#E5E5E5"> our our</font>

869
00:36:09,760 --> 00:36:15,310
technique does not<font color="#E5E5E5"> stand in</font><font color="#CCCCCC"> its own</font>

870
00:36:12,210 --> 00:36:18,640
<font color="#E5E5E5">Adobe Flash and Google introduced heap</font>

871
00:36:15,310 --> 00:36:21,150
partitioning<font color="#E5E5E5"> in 2015</font><font color="#CCCCCC"> this</font><font color="#E5E5E5"> really helped</font>

872
00:36:18,640 --> 00:36:25,270
<font color="#CCCCCC">Adobe had</font><font color="#E5E5E5"> some problems with vectors</font>

873
00:36:21,150 --> 00:36:28,140
<font color="#CCCCCC">some of their vectors in there Adobe's</font>

874
00:36:25,270 --> 00:36:32,230
special JavaScript engine ActionScript

875
00:36:28,140 --> 00:36:33,970
<font color="#E5E5E5">and this really helped them they worked</font>

876
00:36:32,230 --> 00:36:37,960
<font color="#CCCCCC">closely with Google in order to</font><font color="#E5E5E5"> design</font>

877
00:36:33,970 --> 00:36:42,069
this mitigation<font color="#E5E5E5"> and then around the same</font>

878
00:36:37,960 --> 00:36:43,840
time<font color="#CCCCCC"> IE</font><font color="#E5E5E5"> added ISO heap</font><font color="#CCCCCC"> which is which is</font>

879
00:36:42,070 --> 00:36:46,060
a very<font color="#E5E5E5"> similar technique they later</font>

880
00:36:43,840 --> 00:36:49,000
improved upon<font color="#CCCCCC"> ISO heap to</font>

881
00:36:46,060 --> 00:36:50,350
<font color="#E5E5E5">a garbage collector so now they don't</font>

882
00:36:49,000 --> 00:36:52,330
use<font color="#E5E5E5"> that they just use a garbage</font>

883
00:36:50,350 --> 00:36:54,160
collector on this<font color="#E5E5E5"> native code kind of</font>

884
00:36:52,330 --> 00:36:59,830
<font color="#E5E5E5">similar to the</font><font color="#CCCCCC"> bum juicy if you're</font>

885
00:36:54,160 --> 00:37:04,000
familiar with<font color="#E5E5E5"> that</font><font color="#CCCCCC"> and then shortly</font>

886
00:36:59,830 --> 00:37:07,960
after<font color="#CCCCCC"> our</font><font color="#E5E5E5"> our code landed</font><font color="#CCCCCC"> webkit added a</font>

887
00:37:04,000 --> 00:37:10,300
similar feature<font color="#E5E5E5"> and it works it's pretty</font>

888
00:37:07,960 --> 00:37:12,250
much the<font color="#CCCCCC"> same same sort</font><font color="#E5E5E5"> of strategy so</font>

889
00:37:10,300 --> 00:37:14,680
we've seen we<font color="#CCCCCC"> oh we've</font><font color="#E5E5E5"> got Google we've</font>

890
00:37:12,250 --> 00:37:17,410
got Microsoft we've got<font color="#E5E5E5"> Adobe we've got</font>

891
00:37:14,680 --> 00:37:19,770
WebKit and<font color="#E5E5E5"> Apple</font><font color="#CCCCCC"> they're all using</font><font color="#E5E5E5"> the</font>

892
00:37:17,410 --> 00:37:22,990
same<font color="#E5E5E5"> technique</font><font color="#CCCCCC"> his</font><font color="#E5E5E5"> tried and true and</font>

893
00:37:19,770 --> 00:37:25,660
<font color="#E5E5E5">proven</font><font color="#CCCCCC"> tour by a variety</font><font color="#E5E5E5"> of</font>

894
00:37:22,990 --> 00:37:31,140
<font color="#CCCCCC">organizations in a variety of like</font><font color="#E5E5E5"> hard</font>

895
00:37:25,660 --> 00:37:31,140
<font color="#E5E5E5">core system software flash web browsers</font>

896
00:37:31,170 --> 00:37:37,090
<font color="#CCCCCC">and so you know I want to</font><font color="#E5E5E5"> talk a little</font>

897
00:37:34,660 --> 00:37:39,310
<font color="#E5E5E5">bit about our impact</font><font color="#CCCCCC"> Francisco</font><font color="#E5E5E5"> Falcone</font>

898
00:37:37,090 --> 00:37:43,420
of<font color="#CCCCCC"> cork slab wrote a blog post reverse</font>

899
00:37:39,310 --> 00:37:46,299
<font color="#E5E5E5">engineering</font><font color="#CCCCCC"> our work and he said</font><font color="#E5E5E5"> at the</font>

900
00:37:43,420 --> 00:37:48,160
<font color="#CCCCCC">time we had shipped</font><font color="#E5E5E5"> it for for just the</font>

901
00:37:46,300 --> 00:37:51,340
surface<font color="#E5E5E5"> object</font><font color="#CCCCCC"> just that bitmap</font><font color="#E5E5E5"> up</font>

902
00:37:48,160 --> 00:37:54,250
object<font color="#E5E5E5"> works I</font><font color="#CCCCCC"> showed you and now we've</font>

903
00:37:51,340 --> 00:37:56,020
expanded<font color="#E5E5E5"> it beyond that and he said this</font>

904
00:37:54,250 --> 00:37:57,910
definitely eliminates the commodity

905
00:37:56,020 --> 00:37:59,350
exploitation technique of using bitmaps

906
00:37:57,910 --> 00:38:01,930
as targets<font color="#E5E5E5"> for a limited memory</font>

907
00:37:59,350 --> 00:38:03,670
<font color="#E5E5E5">corruption vulnerabilities</font><font color="#CCCCCC"> and then in</font>

908
00:38:01,930 --> 00:38:05,500
the next sense he says and then I'm

909
00:38:03,670 --> 00:38:10,510
<font color="#E5E5E5">going to use the pallet</font><font color="#CCCCCC"> objects</font><font color="#E5E5E5"> just</font>

910
00:38:05,500 --> 00:38:12,940
<font color="#E5E5E5">like so I showed you so now we've by the</font>

911
00:38:10,510 --> 00:38:16,450
time he<font color="#E5E5E5"> wrote this blog post we were</font>

912
00:38:12,940 --> 00:38:18,760
ahead of<font color="#E5E5E5"> the game and we wrote we had</font>

913
00:38:16,450 --> 00:38:20,649
already<font color="#E5E5E5"> in windows insider builds like</font>

914
00:38:18,760 --> 00:38:24,250
beta nightly builds which you can sign

915
00:38:20,650 --> 00:38:26,350
up<font color="#CCCCCC"> for and exploit and you know explore</font>

916
00:38:24,250 --> 00:38:29,820
<font color="#E5E5E5">all the latest cool features both in the</font>

917
00:38:26,350 --> 00:38:31,960
GUI and in the kernel<font color="#E5E5E5"> deep down inside</font>

918
00:38:29,820 --> 00:38:33,910
<font color="#CCCCCC">by the time he</font><font color="#E5E5E5"> had written this blog</font>

919
00:38:31,960 --> 00:38:35,620
post<font color="#CCCCCC"> and posted it we had already</font>

920
00:38:33,910 --> 00:38:38,379
protected the<font color="#CCCCCC"> pallet object and that</font>

921
00:38:35,620 --> 00:38:40,720
<font color="#E5E5E5">code was at the door</font><font color="#CCCCCC"> and so if you're on</font>

922
00:38:38,380 --> 00:38:43,930
<font color="#E5E5E5">the</font><font color="#CCCCCC"> the</font><font color="#E5E5E5"> latest version of</font><font color="#CCCCCC"> Windows you</font>

923
00:38:40,720 --> 00:38:48,040
<font color="#E5E5E5">definitely have protection for the the</font>

924
00:38:43,930 --> 00:38:50,319
surface<font color="#CCCCCC"> object like to prevent some of</font>

925
00:38:48,040 --> 00:38:52,210
the experts say showed you and then if

926
00:38:50,320 --> 00:38:58,000
you are<font color="#CCCCCC"> going to be on the</font>

927
00:38:52,210 --> 00:38:59,970
<font color="#CCCCCC">soon-to-be-released</font><font color="#E5E5E5"> rs4 then then you'll</font>

928
00:38:58,000 --> 00:39:02,850
get all the<font color="#CCCCCC"> other goodies and protection</font>

929
00:38:59,970 --> 00:39:05,069
after that<font color="#E5E5E5"> and we're not done yet</font><font color="#CCCCCC"> we</font>

930
00:39:02,850 --> 00:39:07,470
have a list of other<font color="#E5E5E5"> objects which were</font>

931
00:39:05,070 --> 00:39:09,720
interesting<font color="#E5E5E5"> in expanding this protection</font>

932
00:39:07,470 --> 00:39:11,910
<font color="#E5E5E5">to attacker is you know are</font><font color="#CCCCCC"> gonna</font><font color="#E5E5E5"> start</font>

933
00:39:09,720 --> 00:39:14,160
<font color="#E5E5E5">looking</font><font color="#CCCCCC"> for</font><font color="#E5E5E5"> the types we didn't protect</font>

934
00:39:11,910 --> 00:39:17,250
like I said but you<font color="#CCCCCC"> know we've got a</font>

935
00:39:14,160 --> 00:39:18,839
plan to expand the protection<font color="#CCCCCC"> to</font><font color="#E5E5E5"> protect</font>

936
00:39:17,250 --> 00:39:21,630
all the objects which we believe are

937
00:39:18,840 --> 00:39:27,000
exploitable<font color="#E5E5E5"> using this style of a use</font>

938
00:39:21,630 --> 00:39:29,580
after free<font color="#E5E5E5"> in</font><font color="#CCCCCC"> NT GDI kernel land with</font>

939
00:39:27,000 --> 00:39:41,040
<font color="#E5E5E5">that</font><font color="#CCCCCC"> I'm</font><font color="#E5E5E5"> wondering if you guys have any</font>

940
00:39:29,580 --> 00:39:44,310
more<font color="#E5E5E5"> questions it's still early in the</font>

941
00:39:41,040 --> 00:39:47,730
morning<font color="#E5E5E5"> not everyone's had their</font><font color="#CCCCCC"> coffee</font>

942
00:39:44,310 --> 00:39:49,740
yet<font color="#CCCCCC"> alright I want</font><font color="#E5E5E5"> to thank you</font><font color="#CCCCCC"> guys so</font>

943
00:39:47,730 --> 00:39:53,910
much<font color="#CCCCCC"> for</font><font color="#E5E5E5"> coming here</font><font color="#CCCCCC"> I want to thank</font>

944
00:39:49,740 --> 00:39:55,830
Nick<font color="#CCCCCC"> soo</font><font color="#E5E5E5"> and hack in the box and I hope</font>

945
00:39:53,910 --> 00:39:58,589
you guys<font color="#E5E5E5"> have a great time</font><font color="#CCCCCC"> feel free to</font>

946
00:39:55,830 --> 00:40:00,420
walk up and say hi to<font color="#CCCCCC"> the safe</font><font color="#E5E5E5"> and I and</font>

947
00:39:58,590 --> 00:40:03,360
ask us<font color="#CCCCCC"> questions about</font><font color="#E5E5E5"> the mitigations</font>

948
00:40:00,420 --> 00:40:05,550
we design the fun stuff we're finding<font color="#CCCCCC"> in</font>

949
00:40:03,360 --> 00:40:08,770
nsrc the vulnerabilities they're cooking

950
00:40:05,550 --> 00:40:13,010
up and thank you so<font color="#E5E5E5"> much</font>

951
00:40:08,770 --> 00:40:13,009
[Applause]

