1
00:00:00,140 --> 00:00:02,200
you

2
00:00:04,500 --> 00:00:06,560
you

3
00:00:09,880 --> 00:00:11,940
you

4
00:00:12,650 --> 00:00:17,270
hey guys<font color="#E5E5E5"> my name is</font><font color="#CCCCCC"> Philip and I'm gonna</font>

5
00:00:15,350 --> 00:00:21,170
talk a bit about lateral<font color="#E5E5E5"> movement</font><font color="#CCCCCC"> WMI</font>

6
00:00:17,270 --> 00:00:24,290
<font color="#E5E5E5">but first an obligatory about the slide</font>

7
00:00:21,170 --> 00:00:27,980
<font color="#E5E5E5">yeah so I'm a security researcher at a</font>

8
00:00:24,290 --> 00:00:30,918
company called cyber easing<font color="#E5E5E5"> and I'm not</font>

9
00:00:27,980 --> 00:00:35,720
really good<font color="#CCCCCC"> at choosing</font><font color="#E5E5E5"> creative twitter</font>

10
00:00:30,919 --> 00:00:37,460
handles<font color="#CCCCCC"> and also this is my</font><font color="#E5E5E5"> first actual</font>

11
00:00:35,720 --> 00:00:41,170
<font color="#E5E5E5">conference</font><font color="#CCCCCC"> talk so you could</font><font color="#E5E5E5"> just</font>

12
00:00:37,460 --> 00:00:46,609
mentally uncross that third line<font color="#E5E5E5"> yeah</font>

13
00:00:41,170 --> 00:00:48,710
<font color="#CCCCCC">yeah</font><font color="#E5E5E5"> cool so let's begin</font>

14
00:00:46,609 --> 00:00:52,550
we're gonna give a short introduction to

15
00:00:48,710 --> 00:00:56,420
<font color="#CCCCCC">WMI and</font><font color="#E5E5E5"> just speak a bit</font><font color="#CCCCCC"> about the scope</font>

16
00:00:52,550 --> 00:01:00,078
of what's lateral movement<font color="#CCCCCC"> in this</font>

17
00:00:56,420 --> 00:01:02,480
lecture<font color="#CCCCCC"> I'll show a couple of new</font>

18
00:01:00,079 --> 00:01:04,730
methods<font color="#E5E5E5"> and improved methods of lateral</font>

19
00:01:02,480 --> 00:01:09,800
movement<font color="#CCCCCC"> using</font><font color="#E5E5E5"> the</font><font color="#CCCCCC"> WMI feature in</font>

20
00:01:04,730 --> 00:01:11,450
Windows<font color="#E5E5E5"> and</font><font color="#CCCCCC"> will have small we'll have a</font>

21
00:01:09,800 --> 00:01:15,860
couple<font color="#CCCCCC"> of</font><font color="#E5E5E5"> slides about how to detect</font>

22
00:01:11,450 --> 00:01:19,580
those things so in recent<font color="#E5E5E5"> times there</font>

23
00:01:15,860 --> 00:01:24,230
has<font color="#E5E5E5"> been some work in taking lots of</font>

24
00:01:19,580 --> 00:01:27,530
<font color="#CCCCCC">cyber security methods and putting them</font>

25
00:01:24,230 --> 00:01:30,140
into a neat geometric shape like the

26
00:01:27,530 --> 00:01:32,960
cyber<font color="#E5E5E5"> kill chain the threat attack</font>

27
00:01:30,140 --> 00:01:35,030
<font color="#CCCCCC">lifecycle they attack matrix and my own</font>

28
00:01:32,960 --> 00:01:39,130
invention which is the hexagon of

29
00:01:35,030 --> 00:01:42,230
discomfort<font color="#E5E5E5"> where the red colors is</font>

30
00:01:39,130 --> 00:01:45,440
symbolizing danger and the frowny face

31
00:01:42,230 --> 00:01:48,850
is your general dissatisfaction with

32
00:01:45,440 --> 00:01:52,460
getting hacked<font color="#E5E5E5"> and all of those things</font>

33
00:01:48,850 --> 00:01:58,160
<font color="#CCCCCC">pretty much</font><font color="#E5E5E5"> have a part called lateral</font>

34
00:01:52,460 --> 00:02:00,530
<font color="#E5E5E5">movement now</font><font color="#CCCCCC"> in recent months</font><font color="#E5E5E5"> the</font><font color="#CCCCCC"> scope</font>

35
00:01:58,160 --> 00:02:03,380
of lateral movement was a bit expanded

36
00:02:00,530 --> 00:02:07,340
with stuff like the<font color="#E5E5E5"> eternal blue</font><font color="#CCCCCC"> exploit</font>

37
00:02:03,380 --> 00:02:11,120
and<font color="#CCCCCC"> its</font><font color="#E5E5E5"> friends</font><font color="#CCCCCC"> but the scope in this</font>

38
00:02:07,340 --> 00:02:13,160
talk is<font color="#E5E5E5"> going to be this so let's say</font>

39
00:02:11,120 --> 00:02:15,620
you as an attacker have gained some kind

40
00:02:13,160 --> 00:02:17,750
of initial foothold<font color="#E5E5E5"> on a machine</font><font color="#CCCCCC"> either</font>

41
00:02:15,620 --> 00:02:22,010
<font color="#E5E5E5">by fishing or by exploiting some kind of</font>

42
00:02:17,750 --> 00:02:24,620
application<font color="#CCCCCC"> but</font><font color="#E5E5E5"> you're greedy one</font>

43
00:02:22,010 --> 00:02:26,030
machine<font color="#E5E5E5"> is not enough what you have on</font>

44
00:02:24,620 --> 00:02:29,060
this machine<font color="#E5E5E5"> is not</font>

45
00:02:26,030 --> 00:02:30,319
interesting enough<font color="#E5E5E5"> and you were lucky</font>

46
00:02:29,060 --> 00:02:33,260
enough<font color="#E5E5E5"> to</font><font color="#CCCCCC"> find some interesting</font>

47
00:02:30,319 --> 00:02:37,519
credentials<font color="#E5E5E5"> so you want to use your new</font>

48
00:02:33,260 --> 00:02:40,100
found credentials<font color="#E5E5E5"> and run your evil</font>

49
00:02:37,520 --> 00:02:45,069
disgusting code on your<font color="#CCCCCC"> on another</font>

50
00:02:40,100 --> 00:02:48,560
machine<font color="#CCCCCC"> so in the scope of</font><font color="#E5E5E5"> this talk</font>

51
00:02:45,069 --> 00:02:51,530
<font color="#E5E5E5">lateral movement is using authenticated</font>

52
00:02:48,560 --> 00:02:57,680
remote<font color="#CCCCCC"> execution</font><font color="#E5E5E5"> and running your code</font>

53
00:02:51,530 --> 00:02:59,269
using stolen credentials<font color="#E5E5E5"> cool so the</font>

54
00:02:57,680 --> 00:03:03,680
thing about lateral<font color="#E5E5E5"> movements as opposed</font>

55
00:02:59,269 --> 00:03:07,430
about lateral movement as opposed to to

56
00:03:03,680 --> 00:03:09,970
gaining<font color="#CCCCCC"> the initial foothold</font><font color="#E5E5E5"> is that you</font>

57
00:03:07,430 --> 00:03:11,930
don't really<font color="#E5E5E5"> subvert any kind of</font>

58
00:03:09,970 --> 00:03:15,200
<font color="#E5E5E5">application</font><font color="#CCCCCC"> you're</font><font color="#E5E5E5"> not using a</font>

59
00:03:11,930 --> 00:03:17,540
<font color="#E5E5E5">vulnerability to make to make software</font>

60
00:03:15,200 --> 00:03:21,589
<font color="#E5E5E5">act not as it's</font><font color="#CCCCCC"> supposed to</font><font color="#E5E5E5"> act you're</font>

61
00:03:17,540 --> 00:03:24,200
not exploiting some kind<font color="#E5E5E5"> of persons a</font>

62
00:03:21,590 --> 00:03:25,610
user using<font color="#E5E5E5"> phishing making them do what</font>

63
00:03:24,200 --> 00:03:28,940
they don't don't really want<font color="#E5E5E5"> to do</font>

64
00:03:25,610 --> 00:03:33,670
you're<font color="#CCCCCC"> actually using a feature that is</font>

65
00:03:28,940 --> 00:03:33,670
intended<font color="#E5E5E5"> to let you run code remotely</font>

66
00:03:33,700 --> 00:03:38,540
<font color="#CCCCCC">this means those things</font><font color="#E5E5E5"> probably won't</font>

67
00:03:36,769 --> 00:03:41,780
get patched<font color="#E5E5E5"> because running code</font>

68
00:03:38,540 --> 00:03:47,989
remotely is a feature<font color="#CCCCCC"> that actual non</font>

69
00:03:41,780 --> 00:03:50,120
<font color="#E5E5E5">evil people need so the most common</font>

70
00:03:47,989 --> 00:03:53,150
lateral movement methods<font color="#E5E5E5"> at least on</font>

71
00:03:50,120 --> 00:03:56,540
Windows environments<font color="#E5E5E5"> are remote service</font>

72
00:03:53,150 --> 00:03:58,329
creation<font color="#E5E5E5"> mostly with</font><font color="#CCCCCC"> be</font><font color="#E5E5E5"> exact and its</font>

73
00:03:56,540 --> 00:04:01,670
derivatives

74
00:03:58,329 --> 00:04:04,880
remote<font color="#E5E5E5"> task scheduling and what people</font>

75
00:04:01,670 --> 00:04:06,828
<font color="#E5E5E5">mostly call the W my method of lateral</font>

76
00:04:04,880 --> 00:04:09,170
movement which is which actually<font color="#CCCCCC"> uses a</font>

77
00:04:06,829 --> 00:04:13,280
class called win32 process<font color="#E5E5E5"> and a method</font>

78
00:04:09,170 --> 00:04:14,899
called create now as you can<font color="#CCCCCC"> see we</font>

79
00:04:13,280 --> 00:04:19,488
already have<font color="#E5E5E5"> a couple of methods that</font>

80
00:04:14,900 --> 00:04:21,140
<font color="#CCCCCC">let's run code remotely and these are</font>

81
00:04:19,488 --> 00:04:23,479
not getting<font color="#CCCCCC"> patched because they are</font>

82
00:04:21,140 --> 00:04:26,180
features<font color="#E5E5E5"> people actually use them for</font>

83
00:04:23,479 --> 00:04:28,159
banana<font color="#E5E5E5"> readings so why do we even need</font>

84
00:04:26,180 --> 00:04:31,660
anymore<font color="#E5E5E5"> stuff like that</font>

85
00:04:28,160 --> 00:04:35,210
so one of<font color="#E5E5E5"> my favorite things is catching</font>

86
00:04:31,660 --> 00:04:37,820
a thread actor using some kind<font color="#E5E5E5"> of really</font>

87
00:04:35,210 --> 00:04:39,609
sophisticated<font color="#E5E5E5"> innovative payload with</font>

88
00:04:37,820 --> 00:04:43,930
lots of stealthy techniques

89
00:04:39,610 --> 00:04:46,060
and the and those<font color="#E5E5E5"> attackers use PSA</font><font color="#CCCCCC"> deck</font>

90
00:04:43,930 --> 00:04:49,389
<font color="#E5E5E5">in an environment that doesn't really</font>

91
00:04:46,060 --> 00:04:52,750
<font color="#CCCCCC">create any</font><font color="#E5E5E5"> services remotely so this is</font>

92
00:04:49,389 --> 00:04:55,270
extremely<font color="#CCCCCC"> conspicuous and even though we</font>

93
00:04:52,750 --> 00:04:57,340
have this really cool<font color="#CCCCCC"> payload</font><font color="#E5E5E5"> you still</font>

94
00:04:55,270 --> 00:05:04,389
get caught<font color="#E5E5E5"> and probably lose</font><font color="#CCCCCC"> some of</font>

95
00:04:57,340 --> 00:05:06,938
<font color="#CCCCCC">your</font><font color="#E5E5E5"> new evasion tips so expanding your</font>

96
00:05:04,389 --> 00:05:09,219
toolkit of lateral movement methods

97
00:05:06,939 --> 00:05:13,449
<font color="#E5E5E5">allows you to shape how</font><font color="#CCCCCC"> you look to the</font>

98
00:05:09,219 --> 00:05:15,580
defenders<font color="#E5E5E5"> so you can better get masked</font>

99
00:05:13,449 --> 00:05:19,360
by the noise of what actually<font color="#E5E5E5"> happens in</font>

100
00:05:15,580 --> 00:05:24,190
a network or be noisy<font color="#E5E5E5"> and channels that</font>

101
00:05:19,360 --> 00:05:27,250
are not monitored so because this is<font color="#CCCCCC"> a</font>

102
00:05:24,190 --> 00:05:31,210
talk about<font color="#CCCCCC"> WMI I'll give a short</font>

103
00:05:27,250 --> 00:05:34,270
explanation<font color="#E5E5E5"> about what</font><font color="#CCCCCC"> WI</font><font color="#E5E5E5"> is so</font><font color="#CCCCCC"> WMI is a</font>

104
00:05:31,210 --> 00:05:37,359
<font color="#E5E5E5">windows feature that basically allows</font>

105
00:05:34,270 --> 00:05:41,068
you to gain information<font color="#E5E5E5"> or influence a</font>

106
00:05:37,360 --> 00:05:44,050
<font color="#E5E5E5">lot of unrelated elements on a</font><font color="#CCCCCC"> machine</font>

107
00:05:41,069 --> 00:05:48,729
<font color="#E5E5E5">without resorting to using lots of</font>

108
00:05:44,050 --> 00:05:50,969
<font color="#CCCCCC">different unrelated api's</font><font color="#E5E5E5"> so if you want</font>

109
00:05:48,729 --> 00:05:54,849
to<font color="#E5E5E5"> gain information about stuff like</font>

110
00:05:50,969 --> 00:05:57,610
processes<font color="#E5E5E5"> but also monitors and sound</font>

111
00:05:54,849 --> 00:06:00,419
cards etc<font color="#E5E5E5"> instead of writing lots of</font>

112
00:05:57,610 --> 00:06:04,750
unrelated<font color="#E5E5E5"> code you basically ask</font><font color="#CCCCCC"> WMI for</font>

113
00:06:00,419 --> 00:06:07,389
the<font color="#E5E5E5"> relevant class and this whole thing</font>

114
00:06:04,750 --> 00:06:09,210
is<font color="#E5E5E5"> available remotely</font><font color="#CCCCCC"> it</font><font color="#E5E5E5"> basically works</font>

115
00:06:07,389 --> 00:06:12,400
remotely just as well as it<font color="#E5E5E5"> works</font>

116
00:06:09,210 --> 00:06:15,219
<font color="#E5E5E5">locally</font><font color="#CCCCCC"> and this is done via the decon</font>

117
00:06:12,400 --> 00:06:19,120
protocol which is<font color="#E5E5E5"> based on DC RPC or</font>

118
00:06:15,219 --> 00:06:21,580
<font color="#CCCCCC">window</font><font color="#E5E5E5"> ram which is based on HTTP so it</font>

119
00:06:19,120 --> 00:06:23,349
looks<font color="#E5E5E5"> basically like</font><font color="#CCCCCC"> this I want to know</font>

120
00:06:21,580 --> 00:06:26,229
something<font color="#CCCCCC"> about the</font><font color="#E5E5E5"> processes running on</font>

121
00:06:23,349 --> 00:06:28,150
my machine<font color="#CCCCCC"> I asked WMI hey can you</font>

122
00:06:26,229 --> 00:06:31,710
numerate some processes for me and

123
00:06:28,150 --> 00:06:35,650
that's<font color="#E5E5E5"> what happens you can do this by a</font>

124
00:06:31,710 --> 00:06:39,370
sql-like syntax you can you have some

125
00:06:35,650 --> 00:06:41,469
<font color="#E5E5E5">really nice powerful api's and you can</font>

126
00:06:39,370 --> 00:06:46,060
and<font color="#E5E5E5"> you can also use this to call</font>

127
00:06:41,469 --> 00:06:49,240
methods<font color="#CCCCCC"> on w my classes so</font><font color="#E5E5E5"> you have lots</font>

128
00:06:46,060 --> 00:06:52,330
of<font color="#CCCCCC"> w my classes representing really</font>

129
00:06:49,240 --> 00:06:52,660
<font color="#E5E5E5">unrelated stuff on a machine like you</font>

130
00:06:52,330 --> 00:06:55,570
could

131
00:06:52,660 --> 00:06:57,790
you have a class enumerate in processes

132
00:06:55,570 --> 00:07:02,200
but you also have<font color="#CCCCCC"> win32 protocol binding</font>

133
00:06:57,790 --> 00:07:05,710
which enumerates<font color="#E5E5E5"> network adapters</font><font color="#CCCCCC"> so</font>

134
00:07:02,200 --> 00:07:12,300
without w my you need<font color="#E5E5E5"> to write a lot of</font>

135
00:07:05,710 --> 00:07:12,299
unrelated code<font color="#CCCCCC"> and these things pile up</font>

136
00:07:12,420 --> 00:07:19,810
so some of<font color="#E5E5E5"> the things I'm going to show</font>

137
00:07:15,850 --> 00:07:25,180
<font color="#E5E5E5">need an understanding of W</font><font color="#CCCCCC"> might that</font><font color="#E5E5E5"> is</font>

138
00:07:19,810 --> 00:07:28,270
a bit deeper<font color="#CCCCCC"> so W my is made out</font><font color="#E5E5E5"> of</font>

139
00:07:25,180 --> 00:07:31,420
three main components<font color="#CCCCCC"> the</font><font color="#E5E5E5"> wind</font>

140
00:07:28,270 --> 00:07:35,680
management service of<font color="#E5E5E5"> WI providers and</font>

141
00:07:31,420 --> 00:07:38,430
the<font color="#E5E5E5"> W</font><font color="#CCCCCC"> my repository</font><font color="#E5E5E5"> the wind management</font>

142
00:07:35,680 --> 00:07:41,350
service is<font color="#E5E5E5"> actually a mediator between</font>

143
00:07:38,430 --> 00:07:44,230
<font color="#E5E5E5">clients of the W my feature as a whole</font>

144
00:07:41,350 --> 00:07:46,480
and all of the and all the other

145
00:07:44,230 --> 00:07:48,940
<font color="#E5E5E5">components of the model</font><font color="#CCCCCC"> so when you are</font>

146
00:07:46,480 --> 00:07:52,270
<font color="#CCCCCC">using W my as a</font><font color="#E5E5E5"> client the only</font>

147
00:07:48,940 --> 00:07:54,820
component<font color="#E5E5E5"> you're speaking to is the</font><font color="#CCCCCC"> Wynn</font>

148
00:07:52,270 --> 00:07:57,820
<font color="#CCCCCC">Management Service it doesn't matter</font>

149
00:07:54,820 --> 00:08:00,640
what you what you ask<font color="#CCCCCC"> off WMI you speak</font>

150
00:07:57,820 --> 00:08:02,230
to<font color="#E5E5E5"> a service</font><font color="#CCCCCC"> it knows what to</font><font color="#E5E5E5"> do if</font>

151
00:08:00,640 --> 00:08:05,469
you're asking for<font color="#E5E5E5"> an enumeration of the</font>

152
00:08:02,230 --> 00:08:08,230
<font color="#E5E5E5">class it knows how to which other</font>

153
00:08:05,470 --> 00:08:11,890
component can give this<font color="#E5E5E5"> to you if you</font>

154
00:08:08,230 --> 00:08:15,340
ask<font color="#CCCCCC"> for a method</font><font color="#E5E5E5"> the same happens and</font>

155
00:08:11,890 --> 00:08:21,930
all other components<font color="#CCCCCC"> of</font><font color="#E5E5E5"> W</font><font color="#CCCCCC"> my interact</font>

156
00:08:15,340 --> 00:08:24,570
solely with with a<font color="#E5E5E5"> W my service</font><font color="#CCCCCC"> another</font>

157
00:08:21,930 --> 00:08:30,040
important component<font color="#E5E5E5"> is the WMI providers</font>

158
00:08:24,570 --> 00:08:32,530
so while if you use<font color="#CCCCCC"> WMI as a client you</font>

159
00:08:30,040 --> 00:08:34,930
<font color="#E5E5E5">basically magically enumerate lots of</font>

160
00:08:32,530 --> 00:08:37,329
weird things<font color="#CCCCCC"> on a computer or you have</font>

161
00:08:34,929 --> 00:08:40,150
or you can call methods<font color="#E5E5E5"> but somebody</font>

162
00:08:37,330 --> 00:08:43,150
needs<font color="#CCCCCC"> to</font><font color="#E5E5E5"> have implemented all of those</font>

163
00:08:40,150 --> 00:08:48,280
API calls<font color="#E5E5E5"> something actually runs the</font>

164
00:08:43,150 --> 00:08:50,140
code that you didn't<font color="#E5E5E5"> write so the</font>

165
00:08:48,280 --> 00:08:53,470
component<font color="#CCCCCC"> that does this is</font><font color="#E5E5E5"> w my</font>

166
00:08:50,140 --> 00:08:57,310
providers<font color="#CCCCCC"> those</font><font color="#E5E5E5"> are actually implemented</font>

167
00:08:53,470 --> 00:09:01,120
as calm<font color="#E5E5E5"> dll's and they communicate</font><font color="#CCCCCC"> with</font>

168
00:08:57,310 --> 00:09:03,819
the<font color="#E5E5E5"> W my service and basically process</font>

169
00:09:01,120 --> 00:09:05,680
<font color="#E5E5E5">all of your requests so the W my service</font>

170
00:09:03,820 --> 00:09:06,490
knows which provider needs to process

171
00:09:05,680 --> 00:09:09,760
<font color="#E5E5E5">which</font>

172
00:09:06,490 --> 00:09:13,660
<font color="#E5E5E5">request forwarded</font><font color="#CCCCCC"> to the provider and</font>

173
00:09:09,760 --> 00:09:17,319
then that's what the provider does<font color="#E5E5E5"> the</font>

174
00:09:13,660 --> 00:09:19,779
last<font color="#E5E5E5"> element is the WI repository</font><font color="#CCCCCC"> this</font>

175
00:09:17,320 --> 00:09:22,209
<font color="#E5E5E5">actually stores the whole</font><font color="#CCCCCC"> w my model of</font>

176
00:09:19,779 --> 00:09:25,779
classes<font color="#E5E5E5"> their relationships and</font>

177
00:09:22,209 --> 00:09:31,140
definitions and also stores a couple of

178
00:09:25,779 --> 00:09:31,140
persistent<font color="#E5E5E5"> instances of specific classes</font>

179
00:09:31,230 --> 00:09:40,510
<font color="#CCCCCC">so let's get back to</font><font color="#E5E5E5"> W my lateral</font>

180
00:09:35,320 --> 00:09:42,760
movement as it is known now<font color="#CCCCCC"> this is done</font>

181
00:09:40,510 --> 00:09:45,029
<font color="#E5E5E5">by the win32 process class which</font>

182
00:09:42,760 --> 00:09:48,420
represents a<font color="#E5E5E5"> single process on a machine</font>

183
00:09:45,029 --> 00:09:52,529
<font color="#CCCCCC">the class</font><font color="#E5E5E5"> has a</font><font color="#CCCCCC"> method called create and</font>

184
00:09:48,420 --> 00:09:55,810
calling the create process<font color="#E5E5E5"> simply calls</font>

185
00:09:52,529 --> 00:09:58,149
<font color="#CCCCCC">create process on the machine so what</font>

186
00:09:55,810 --> 00:10:01,239
happens behind the<font color="#E5E5E5"> scenes</font><font color="#CCCCCC"> is</font><font color="#E5E5E5"> that we as</font>

187
00:09:58,149 --> 00:10:03,520
a W my client<font color="#E5E5E5"> speak with either a local</font>

188
00:10:01,240 --> 00:10:06,940
<font color="#CCCCCC">or remote instance of the wound</font>

189
00:10:03,520 --> 00:10:09,430
<font color="#CCCCCC">management service it checks</font><font color="#E5E5E5"> which</font>

190
00:10:06,940 --> 00:10:12,730
provider is responsible<font color="#CCCCCC"> for win32</font>

191
00:10:09,430 --> 00:10:16,689
process<font color="#E5E5E5"> it finds out its provider called</font>

192
00:10:12,730 --> 00:10:18,579
<font color="#CCCCCC">sim 132 and</font><font color="#E5E5E5"> passes the request to</font><font color="#CCCCCC"> that</font>

193
00:10:16,690 --> 00:10:24,000
provider the provider knows how to

194
00:10:18,579 --> 00:10:28,719
<font color="#E5E5E5">create processes it creates it returns</font>

195
00:10:24,000 --> 00:10:31,899
returns<font color="#E5E5E5"> all of the returns codes</font><font color="#CCCCCC"> back</font><font color="#E5E5E5"> to</font>

196
00:10:28,720 --> 00:10:37,420
the<font color="#E5E5E5"> WMI service which then gives it to</font>

197
00:10:31,899 --> 00:10:41,370
the client<font color="#E5E5E5"> well obviously this is</font><font color="#CCCCCC"> not</font>

198
00:10:37,420 --> 00:10:45,310
all as I have 50 more<font color="#CCCCCC"> minutes</font><font color="#E5E5E5"> of talk</font>

199
00:10:41,370 --> 00:10:47,829
and the<font color="#E5E5E5"> WI feature is pretty vast there</font>

200
00:10:45,310 --> 00:10:53,349
<font color="#E5E5E5">are lots of lots of classes</font><font color="#CCCCCC"> so</font><font color="#E5E5E5"> we must</font>

201
00:10:47,829 --> 00:10:55,420
<font color="#E5E5E5">have another way to run code</font><font color="#CCCCCC"> the first</font>

202
00:10:53,350 --> 00:10:59,399
<font color="#E5E5E5">method the first technique is actually</font>

203
00:10:55,420 --> 00:11:03,490
<font color="#CCCCCC">an evasion technique the WMI model is an</font>

204
00:10:59,399 --> 00:11:08,320
object-oriented model which means<font color="#E5E5E5"> there</font>

205
00:11:03,490 --> 00:11:11,920
are<font color="#E5E5E5"> classes that</font><font color="#CCCCCC"> are child</font><font color="#E5E5E5"> classes of</font>

206
00:11:08,320 --> 00:11:15,180
other<font color="#E5E5E5"> classes and if you as a defender</font>

207
00:11:11,920 --> 00:11:18,130
are looking for the win32 process class

208
00:11:15,180 --> 00:11:19,739
we could<font color="#E5E5E5"> just have a class</font><font color="#CCCCCC"> that behaves</font>

209
00:11:18,130 --> 00:11:22,980
the<font color="#E5E5E5"> same</font>

210
00:11:19,740 --> 00:11:26,820
and it's called<font color="#E5E5E5"> something else</font><font color="#CCCCCC"> so how is</font>

211
00:11:22,980 --> 00:11:29,100
it<font color="#E5E5E5"> done</font><font color="#CCCCCC"> WMI has a</font><font color="#E5E5E5"> functionality</font><font color="#CCCCCC"> called</font>

212
00:11:26,820 --> 00:11:31,770
<font color="#CCCCCC">class</font><font color="#E5E5E5"> derivation you can basically you</font>

213
00:11:29,100 --> 00:11:34,860
can also do it remotely<font color="#E5E5E5"> so you could</font>

214
00:11:31,770 --> 00:11:37,410
<font color="#E5E5E5">first create a new derived class on a</font>

215
00:11:34,860 --> 00:11:39,720
remote machine<font color="#E5E5E5"> so we create a subclass</font>

216
00:11:37,410 --> 00:11:43,680
<font color="#E5E5E5">of win32 process called winter</font><font color="#CCCCCC"> you do</font>

217
00:11:39,720 --> 00:11:46,080
not evil at<font color="#E5E5E5"> all we do it remotely by</font><font color="#CCCCCC"> WMI</font>

218
00:11:43,680 --> 00:11:48,329
so without<font color="#E5E5E5"> running any new code the new</font>

219
00:11:46,080 --> 00:11:50,130
code inherits all of<font color="#CCCCCC"> the new or all of</font>

220
00:11:48,330 --> 00:11:53,640
the methods of the parent including

221
00:11:50,130 --> 00:11:55,710
create so we can just<font color="#E5E5E5"> call create and</font>

222
00:11:53,640 --> 00:11:59,069
<font color="#E5E5E5">that's it we</font><font color="#CCCCCC"> have a new process on the</font>

223
00:11:55,710 --> 00:12:01,140
machine<font color="#E5E5E5"> without directly using when when</font>

224
00:11:59,070 --> 00:12:05,520
30<font color="#E5E5E5"> do process which is pretty</font><font color="#CCCCCC"> much what</font>

225
00:12:01,140 --> 00:12:09,540
we want so a short demo<font color="#E5E5E5"> I'm going</font><font color="#CCCCCC"> to</font>

226
00:12:05,520 --> 00:12:14,370
<font color="#CCCCCC">show class derivation</font><font color="#E5E5E5"> while I'm</font>

227
00:12:09,540 --> 00:12:17,699
monitoring<font color="#E5E5E5"> the machine using</font><font color="#CCCCCC"> the W my</font>

228
00:12:14,370 --> 00:12:24,660
activity<font color="#E5E5E5"> egw provider</font><font color="#CCCCCC"> and let's see how</font>

229
00:12:17,700 --> 00:12:30,300
<font color="#E5E5E5">it looks</font><font color="#CCCCCC"> so that's the provider we need</font>

230
00:12:24,660 --> 00:12:32,189
to enable it first so if you can see

231
00:12:30,300 --> 00:12:35,910
this is some code that<font color="#E5E5E5"> creates a new</font>

232
00:12:32,190 --> 00:12:43,290
class and then<font color="#E5E5E5"> immediately calls create</font>

233
00:12:35,910 --> 00:12:47,189
on the new subclass so we have<font color="#E5E5E5"> created a</font>

234
00:12:43,290 --> 00:12:51,300
<font color="#E5E5E5">class called create</font><font color="#CCCCCC"> launch</font><font color="#E5E5E5"> an instance</font>

235
00:12:47,190 --> 00:12:58,830
of evil evil<font color="#E5E5E5"> notepad and as you can see</font>

236
00:12:51,300 --> 00:13:00,870
when<font color="#E5E5E5"> 32 not evil at all create so yeah</font>

237
00:12:58,830 --> 00:13:03,990
<font color="#CCCCCC">so if you are</font><font color="#E5E5E5"> looking for</font><font color="#CCCCCC"> wintery</font><font color="#E5E5E5"> due</font>

238
00:13:00,870 --> 00:13:07,260
process it seems you can't find it here

239
00:13:03,990 --> 00:13:13,890
so does this mean we have evaded all

240
00:13:07,260 --> 00:13:16,620
detections<font color="#CCCCCC"> if an ID</font><font color="#E5E5E5"> 11 shows all event</font>

241
00:13:13,890 --> 00:13:20,850
of client<font color="#CCCCCC"> all the</font><font color="#E5E5E5"> events of client calls</font>

242
00:13:16,620 --> 00:13:25,530
to the win32 to the<font color="#CCCCCC"> WMI</font><font color="#E5E5E5"> management</font>

243
00:13:20,850 --> 00:13:28,740
service<font color="#CCCCCC"> this means</font><font color="#E5E5E5"> that we have asked we</font>

244
00:13:25,530 --> 00:13:31,939
have<font color="#E5E5E5"> asked</font><font color="#CCCCCC"> WMI to run when three do</font><font color="#E5E5E5"> not</font>

245
00:13:28,740 --> 00:13:31,940
even<font color="#CCCCCC"> allow</font><font color="#E5E5E5"> create</font>

246
00:13:32,760 --> 00:13:41,380
we still somehow<font color="#E5E5E5"> can see when three</font><font color="#CCCCCC"> due</font>

247
00:13:36,310 --> 00:13:44,260
process create why is that<font color="#CCCCCC"> so while we</font>

248
00:13:41,380 --> 00:13:46,720
have manipulated<font color="#E5E5E5"> the WMI model and</font>

249
00:13:44,260 --> 00:13:49,540
created a<font color="#CCCCCC"> new class</font><font color="#E5E5E5"> we haven't really</font>

250
00:13:46,720 --> 00:13:53,620
<font color="#E5E5E5">introduced any new code into</font><font color="#CCCCCC"> the machine</font>

251
00:13:49,540 --> 00:13:57,670
<font color="#E5E5E5">so W might isn't magic this method needs</font>

252
00:13:53,620 --> 00:13:59,980
to<font color="#CCCCCC"> be implemented</font><font color="#E5E5E5"> somewhere so if we</font>

253
00:13:57,670 --> 00:14:03,360
look at event<font color="#CCCCCC"> twelve of the same</font>

254
00:13:59,980 --> 00:14:06,250
provider<font color="#E5E5E5"> this event shows you</font>

255
00:14:03,360 --> 00:14:10,149
<font color="#E5E5E5">communication between the</font><font color="#CCCCCC"> WMI service</font>

256
00:14:06,250 --> 00:14:12,040
and providers so the<font color="#CCCCCC"> WI service</font>

257
00:14:10,149 --> 00:14:16,120
understands that when<font color="#CCCCCC"> we're</font><font color="#E5E5E5"> calling not</font>

258
00:14:12,040 --> 00:14:18,270
evil at all<font color="#E5E5E5"> this functionality of the</font>

259
00:14:16,120 --> 00:14:21,190
create<font color="#CCCCCC"> method of the create method</font><font color="#E5E5E5"> is</font>

260
00:14:18,270 --> 00:14:23,890
implemented in<font color="#E5E5E5"> the sim when free to</font>

261
00:14:21,190 --> 00:14:28,870
provider<font color="#E5E5E5"> in it and it is implemented</font><font color="#CCCCCC"> as</font>

262
00:14:23,890 --> 00:14:34,180
the win32 process<font color="#CCCCCC"> create so this evasion</font>

263
00:14:28,870 --> 00:14:36,550
isn't perfect some takeaways

264
00:14:34,180 --> 00:14:39,939
while this evasion doesn't really work

265
00:14:36,550 --> 00:14:42,189
that<font color="#E5E5E5"> well for calling methods</font><font color="#CCCCCC"> if you</font>

266
00:14:39,940 --> 00:14:45,580
know if you if<font color="#CCCCCC"> you're</font><font color="#E5E5E5"> trying</font><font color="#CCCCCC"> to do some</font>

267
00:14:42,190 --> 00:14:48,670
evil<font color="#E5E5E5"> by creating new instances of WI</font>

268
00:14:45,580 --> 00:14:51,580
classes without calling methods<font color="#E5E5E5"> you</font>

269
00:14:48,670 --> 00:14:56,740
<font color="#E5E5E5">actually</font><font color="#CCCCCC"> only see the name of the new</font>

270
00:14:51,580 --> 00:14:58,870
class you've derived<font color="#E5E5E5"> so the servation</font>

271
00:14:56,740 --> 00:15:01,510
method is this<font color="#E5E5E5"> evasion technique is</font>

272
00:14:58,870 --> 00:15:05,070
better if you<font color="#CCCCCC"> don't</font><font color="#E5E5E5"> really have to use</font>

273
00:15:01,510 --> 00:15:07,689
methods for<font color="#CCCCCC"> your</font><font color="#E5E5E5"> for what you want to do</font>

274
00:15:05,070 --> 00:15:12,430
another way to detect such things is by

275
00:15:07,690 --> 00:15:15,850
<font color="#CCCCCC">WI introspection WMI itself can tell you</font>

276
00:15:12,430 --> 00:15:19,540
a lot about what happens in the<font color="#E5E5E5"> W my</font>

277
00:15:15,850 --> 00:15:21,459
model so you<font color="#E5E5E5"> can know when an instance</font>

278
00:15:19,540 --> 00:15:24,579
of a<font color="#E5E5E5"> class is created</font><font color="#CCCCCC"> or when a method</font>

279
00:15:21,459 --> 00:15:26,410
is called<font color="#E5E5E5"> etc etc</font><font color="#CCCCCC"> so if you look at</font>

280
00:15:24,579 --> 00:15:28,899
<font color="#E5E5E5">something</font><font color="#CCCCCC"> like select everything from</font>

281
00:15:26,410 --> 00:15:31,209
instance creation event<font color="#E5E5E5"> where target</font>

282
00:15:28,899 --> 00:15:37,270
<font color="#E5E5E5">instance is some class</font><font color="#CCCCCC"> this looks at all</font>

283
00:15:31,209 --> 00:15:40,719
<font color="#E5E5E5">subclasses this means that if I look for</font>

284
00:15:37,270 --> 00:15:44,500
all<font color="#E5E5E5"> instances of win32 process</font><font color="#CCCCCC"> I also</font>

285
00:15:40,720 --> 00:15:48,390
get all instances of children of

286
00:15:44,500 --> 00:15:52,510
subclasses of win32 process

287
00:15:48,390 --> 00:15:56,140
another takeaway<font color="#E5E5E5"> is that I had an idea</font>

288
00:15:52,510 --> 00:15:58,569
<font color="#CCCCCC">to do something a bit stealthier and use</font>

289
00:15:56,140 --> 00:16:02,170
the cloning<font color="#E5E5E5"> feature of the of the</font><font color="#CCCCCC"> WMI</font>

290
00:15:58,570 --> 00:16:04,180
model<font color="#CCCCCC"> it's a it's a function which</font>

291
00:16:02,170 --> 00:16:07,959
<font color="#CCCCCC">allows you to</font><font color="#E5E5E5"> take W my class and create</font>

292
00:16:04,180 --> 00:16:11,020
<font color="#CCCCCC">an</font><font color="#E5E5E5"> in an identical class which is not a</font>

293
00:16:07,960 --> 00:16:14,680
child class of the first one

294
00:16:11,020 --> 00:16:19,180
this didn't<font color="#E5E5E5"> work as while we have copied</font>

295
00:16:14,680 --> 00:16:21,219
the definitions of the methods the W

296
00:16:19,180 --> 00:16:23,829
<font color="#CCCCCC">Mike service</font><font color="#E5E5E5"> doesn't really know where</font>

297
00:16:21,220 --> 00:16:25,870
they<font color="#CCCCCC"> are implemented so you try to call</font>

298
00:16:23,830 --> 00:16:28,930
the<font color="#CCCCCC"> method and</font><font color="#E5E5E5"> it tells you there's no</font>

299
00:16:25,870 --> 00:16:35,800
providers for<font color="#E5E5E5"> that so this didn't</font><font color="#CCCCCC"> really</font>

300
00:16:28,930 --> 00:16:40,479
work<font color="#CCCCCC"> right so</font><font color="#E5E5E5"> another technique you can</font>

301
00:16:35,800 --> 00:16:44,219
do is taking<font color="#CCCCCC"> Alta cold lateral movement</font>

302
00:16:40,480 --> 00:16:49,540
<font color="#CCCCCC">apiece that</font><font color="#E5E5E5"> don't use</font><font color="#CCCCCC"> WMI</font><font color="#E5E5E5"> and sort of</font>

303
00:16:44,220 --> 00:16:50,980
forcefully use them through<font color="#CCCCCC"> WMI so just</font>

304
00:16:49,540 --> 00:16:53,439
throwing<font color="#E5E5E5"> an acronym at a technique</font>

305
00:16:50,980 --> 00:16:56,410
doesn't<font color="#E5E5E5"> make it better and</font><font color="#CCCCCC"> you need to</font>

306
00:16:53,440 --> 00:17:03,310
achieve you need to evade something by

307
00:16:56,410 --> 00:17:05,530
using this<font color="#CCCCCC"> viable by WMI</font><font color="#E5E5E5"> now the best</font>

308
00:17:03,310 --> 00:17:08,919
tools that<font color="#CCCCCC"> I know for detecting lateral</font>

309
00:17:05,530 --> 00:17:14,139
movement<font color="#E5E5E5"> are actually network traffic</font>

310
00:17:08,920 --> 00:17:18,310
monitors<font color="#E5E5E5"> so if you use W MIT to</font>

311
00:17:14,140 --> 00:17:20,770
implement known techniques traffic is

312
00:17:18,310 --> 00:17:22,720
going<font color="#E5E5E5"> to</font><font color="#CCCCCC"> look a lot different which</font>

313
00:17:20,770 --> 00:17:28,810
means you can invade you can<font color="#E5E5E5"> evade lots</font>

314
00:17:22,720 --> 00:17:31,200
of network monitors<font color="#CCCCCC"> idss etc so</font><font color="#E5E5E5"> let's</font>

315
00:17:28,810 --> 00:17:34,570
move<font color="#E5E5E5"> to</font><font color="#CCCCCC"> the</font><font color="#E5E5E5"> first technique of this sort</font>

316
00:17:31,200 --> 00:17:37,780
the win32 service class represents a

317
00:17:34,570 --> 00:17:39,820
single<font color="#E5E5E5"> service on a machine and the</font>

318
00:17:37,780 --> 00:17:43,870
class itself<font color="#E5E5E5"> basically provides all of</font>

319
00:17:39,820 --> 00:17:46,270
<font color="#CCCCCC">the capability of</font><font color="#E5E5E5"> SC</font><font color="#CCCCCC"> to eggsy so we can</font>

320
00:17:43,870 --> 00:17:49,050
<font color="#E5E5E5">start a service we can pause</font><font color="#CCCCCC"> it stop it</font>

321
00:17:46,270 --> 00:17:52,870
create<font color="#CCCCCC"> it and</font><font color="#E5E5E5"> delete</font><font color="#CCCCCC"> it which is</font>

322
00:17:49,050 --> 00:17:55,840
everything we need to move laterally and

323
00:17:52,870 --> 00:17:59,419
create a new<font color="#E5E5E5"> service on target machine</font>

324
00:17:55,840 --> 00:18:02,810
<font color="#E5E5E5">and what's</font><font color="#CCCCCC"> even better is</font>

325
00:17:59,420 --> 00:18:05,900
that not<font color="#E5E5E5"> only when</font><font color="#CCCCCC"> 32</font><font color="#E5E5E5"> service provides</font>

326
00:18:02,810 --> 00:18:08,030
this<font color="#CCCCCC"> capability but</font><font color="#E5E5E5"> it also has three</font>

327
00:18:05,900 --> 00:18:10,310
other<font color="#E5E5E5"> but we also have three</font><font color="#CCCCCC"> other</font>

328
00:18:08,030 --> 00:18:12,860
classes<font color="#CCCCCC"> which allow you</font><font color="#E5E5E5"> to create delete</font>

329
00:18:10,310 --> 00:18:15,590
<font color="#E5E5E5">and run services so we have one through</font>

330
00:18:12,860 --> 00:18:17,479
system driver<font color="#E5E5E5"> terminal service and went</font>

331
00:18:15,590 --> 00:18:23,000
<font color="#CCCCCC">through based service</font><font color="#E5E5E5"> which is actually</font>

332
00:18:17,480 --> 00:18:25,100
a parent class of<font color="#CCCCCC"> win32</font><font color="#E5E5E5"> service so if</font>

333
00:18:23,000 --> 00:18:27,380
you were<font color="#E5E5E5"> trying to detect the first one</font>

334
00:18:25,100 --> 00:18:31,040
and didn't really<font color="#E5E5E5"> write your detection</font>

335
00:18:27,380 --> 00:18:34,190
correctly somebody can still create<font color="#CCCCCC"> a</font>

336
00:18:31,040 --> 00:18:37,670
<font color="#E5E5E5">service using</font><font color="#CCCCCC"> WMI and evade your</font>

337
00:18:34,190 --> 00:18:44,290
detection so let's look at the bit of

338
00:18:37,670 --> 00:18:48,530
<font color="#CCCCCC">pic of pcaps</font><font color="#E5E5E5"> the sir s</font><font color="#CCCCCC"> cedar eggsy uses</font>

339
00:18:44,290 --> 00:18:50,810
DC RPC as a protocol you basically

340
00:18:48,530 --> 00:18:52,540
connect to a specific interface<font color="#CCCCCC"> and</font>

341
00:18:50,810 --> 00:18:54,889
[Music]

342
00:18:52,540 --> 00:18:58,520
<font color="#E5E5E5">depending on the operation number you</font>

343
00:18:54,890 --> 00:19:03,290
supply you call<font color="#E5E5E5"> function on the remote</font>

344
00:18:58,520 --> 00:19:06,410
service so the DC RPC interface for the

345
00:19:03,290 --> 00:19:10,129
service manager has an operation called

346
00:19:06,410 --> 00:19:15,140
create service W or start service etc

347
00:19:10,130 --> 00:19:20,090
<font color="#CCCCCC">and even while you can encrypt</font><font color="#E5E5E5"> this</font>

348
00:19:15,140 --> 00:19:21,650
traffic<font color="#E5E5E5"> the even while DC RPC supports</font>

349
00:19:20,090 --> 00:19:26,000
traffic encryption it's only<font color="#CCCCCC"> KREEP</font>

350
00:19:21,650 --> 00:19:28,100
<font color="#E5E5E5">encrypts function arguments this means</font>

351
00:19:26,000 --> 00:19:30,350
that even when it's encrypted<font color="#CCCCCC"> you can</font>

352
00:19:28,100 --> 00:19:32,740
still know somebody has created a new

353
00:19:30,350 --> 00:19:37,399
service or somebody has run a service

354
00:19:32,740 --> 00:19:38,440
<font color="#E5E5E5">but if we use the W my classes this</font>

355
00:19:37,400 --> 00:19:42,500
looks different

356
00:19:38,440 --> 00:19:46,550
all of<font color="#CCCCCC"> WMI basically uses the</font><font color="#E5E5E5"> same DC</font>

357
00:19:42,500 --> 00:19:52,100
RPC interface and all W my method calls

358
00:19:46,550 --> 00:19:54,110
<font color="#E5E5E5">use the same operation</font><font color="#CCCCCC"> number so if</font><font color="#E5E5E5"> you</font>

359
00:19:52,100 --> 00:19:57,050
use the maximum<font color="#CCCCCC"> level of</font><font color="#E5E5E5"> encryption on</font>

360
00:19:54,110 --> 00:19:59,389
this your PC the best thing you can

361
00:19:57,050 --> 00:20:02,750
discover<font color="#E5E5E5"> while looking at this traffic</font>

362
00:19:59,390 --> 00:20:07,490
<font color="#E5E5E5">is that somebody called something using</font>

363
00:20:02,750 --> 00:20:09,940
<font color="#CCCCCC">WMI which is really a lot less</font>

364
00:20:07,490 --> 00:20:09,940
informative

365
00:20:12,140 --> 00:20:19,350
so another technique<font color="#CCCCCC"> like that is using</font>

366
00:20:17,250 --> 00:20:21,600
the winter you do<font color="#E5E5E5"> schedule job which</font>

367
00:20:19,350 --> 00:20:26,429
represents<font color="#E5E5E5"> tasks created by a</font><font color="#CCCCCC"> Teeter</font>

368
00:20:21,600 --> 00:20:29,189
eggsy now<font color="#E5E5E5"> this isn't</font><font color="#CCCCCC"> a solution API as</font>

369
00:20:26,430 --> 00:20:32,940
service creation<font color="#CCCCCC"> you can only create and</font>

370
00:20:29,190 --> 00:20:34,590
delete tasks<font color="#E5E5E5"> and if you want to</font>

371
00:20:32,940 --> 00:20:37,500
enumerate<font color="#E5E5E5"> tests you basically</font><font color="#CCCCCC"> just</font>

372
00:20:34,590 --> 00:20:40,830
enumerate instances of the class<font color="#E5E5E5"> but</font>

373
00:20:37,500 --> 00:20:44,630
just<font color="#CCCCCC"> like</font><font color="#E5E5E5"> 82 X Z you</font><font color="#CCCCCC"> can easily</font><font color="#E5E5E5"> overcome</font>

374
00:20:40,830 --> 00:20:48,679
<font color="#CCCCCC">not</font><font color="#E5E5E5"> being able to run news tasks by</font>

375
00:20:44,630 --> 00:20:53,180
scheduling tasks to<font color="#CCCCCC"> run in one minute</font>

376
00:20:48,680 --> 00:20:58,890
<font color="#E5E5E5">sadly this method won't work on you on</font>

377
00:20:53,180 --> 00:21:00,840
when<font color="#CCCCCC"> 8:00 and after because</font><font color="#E5E5E5"> this</font>

378
00:20:58,890 --> 00:21:03,810
functionality<font color="#CCCCCC"> has been</font><font color="#E5E5E5"> deprecated just</font>

379
00:21:00,840 --> 00:21:05,550
as you cannot use without significant

380
00:21:03,810 --> 00:21:09,240
configuration changes you can't use a

381
00:21:05,550 --> 00:21:10,560
<font color="#CCCCCC">detour eggsy unwin 8</font><font color="#E5E5E5"> and up the whole</font>

382
00:21:09,240 --> 00:21:14,310
<font color="#E5E5E5">underlying functionality has been</font>

383
00:21:10,560 --> 00:21:18,990
<font color="#E5E5E5">deprecated so trying to use this by</font><font color="#CCCCCC"> WMI</font>

384
00:21:14,310 --> 00:21:21,419
simply won't work<font color="#E5E5E5"> and the last technique</font>

385
00:21:18,990 --> 00:21:26,220
<font color="#E5E5E5">of this kind is new style scheduled</font>

386
00:21:21,420 --> 00:21:30,180
tasks so<font color="#CCCCCC"> 82 X II got replaced by SCH</font>

387
00:21:26,220 --> 00:21:33,630
tasks not<font color="#CCCCCC"> XE</font><font color="#E5E5E5"> which uses a different in a</font>

388
00:21:30,180 --> 00:21:37,080
different DC RPC interface<font color="#E5E5E5"> and there's a</font>

389
00:21:33,630 --> 00:21:41,550
<font color="#CCCCCC">W in my class</font><font color="#E5E5E5"> for a new style</font><font color="#CCCCCC"> schedule</font>

390
00:21:37,080 --> 00:21:44,129
<font color="#E5E5E5">test called PS scheduled tasks but this</font>

391
00:21:41,550 --> 00:21:46,290
is only available for win 8 and up this

392
00:21:44,130 --> 00:21:48,960
means<font color="#CCCCCC"> that while</font><font color="#E5E5E5"> you have the new task</font>

393
00:21:46,290 --> 00:21:52,050
scheduler<font color="#E5E5E5"> on</font><font color="#CCCCCC"> Windows 7</font><font color="#E5E5E5"> you can't believe</font>

394
00:21:48,960 --> 00:21:56,190
<font color="#E5E5E5">replace it with</font><font color="#CCCCCC"> W my another fun thing</font>

395
00:21:52,050 --> 00:21:58,860
is<font color="#CCCCCC"> that the powershell commandlets</font><font color="#E5E5E5"> for</font>

396
00:21:56,190 --> 00:22:02,040
scheduled task creation<font color="#CCCCCC"> actually</font><font color="#E5E5E5"> use</font>

397
00:21:58,860 --> 00:22:03,810
this API so if you've ever<font color="#E5E5E5"> moved</font>

398
00:22:02,040 --> 00:22:05,909
<font color="#E5E5E5">laterally using those commandlets</font>

399
00:22:03,810 --> 00:22:10,200
you were probably evading ideas and not

400
00:22:05,910 --> 00:22:14,660
<font color="#CCCCCC">knowing it so as</font><font color="#E5E5E5"> you can</font><font color="#CCCCCC"> see here you</font>

401
00:22:10,200 --> 00:22:19,450
can<font color="#CCCCCC"> create tasks</font><font color="#E5E5E5"> run them delete</font><font color="#CCCCCC"> them</font>

402
00:22:14,660 --> 00:22:25,970
<font color="#CCCCCC">change them and add new custom actions</font>

403
00:22:19,450 --> 00:22:28,040
<font color="#CCCCCC">right so another demo I'm</font><font color="#E5E5E5"> gonna use</font><font color="#CCCCCC"> WMI</font>

404
00:22:25,970 --> 00:22:30,830
to create a service<font color="#CCCCCC"> on a remote machine</font>

405
00:22:28,040 --> 00:22:33,980
<font color="#E5E5E5">and just</font><font color="#CCCCCC"> run a meterpreter</font><font color="#E5E5E5"> from an eggsy</font>

406
00:22:30,830 --> 00:22:44,240
that I dropped that<font color="#CCCCCC"> I dropped early</font><font color="#E5E5E5"> so</font>

407
00:22:33,980 --> 00:22:47,630
let's see<font color="#CCCCCC"> here's Wireshark</font><font color="#E5E5E5"> which first</font>

408
00:22:44,240 --> 00:22:50,030
has substituted<font color="#E5E5E5"> for IDs here</font><font color="#CCCCCC"> it's</font>

409
00:22:47,630 --> 00:22:57,260
filtered to see only service creation

410
00:22:50,030 --> 00:23:01,790
related packets so we're gonna create<font color="#CCCCCC"> a</font>

411
00:22:57,260 --> 00:23:12,379
new<font color="#E5E5E5"> service using</font><font color="#CCCCCC"> WMI and see what</font>

412
00:23:01,790 --> 00:23:14,990
traffic was generated so if your PS eggs

413
00:23:12,380 --> 00:23:17,750
<font color="#CCCCCC">egg or remote service detection was</font>

414
00:23:14,990 --> 00:23:19,040
based on<font color="#E5E5E5"> network traffic analysis this</font>

415
00:23:17,750 --> 00:23:27,080
<font color="#E5E5E5">is what you're gonna see which is</font>

416
00:23:19,040 --> 00:23:29,389
basically nothing<font color="#CCCCCC"> alright another</font>

417
00:23:27,080 --> 00:23:34,730
technique you<font color="#E5E5E5"> can use to move laterally</font>

418
00:23:29,390 --> 00:23:37,880
<font color="#E5E5E5">using</font><font color="#CCCCCC"> WMI is win32 product</font><font color="#E5E5E5"> this class</font>

419
00:23:34,730 --> 00:23:41,870
<font color="#CCCCCC">actually represents applications</font>

420
00:23:37,880 --> 00:23:44,480
installed using<font color="#CCCCCC"> messy exec if you open</font>

421
00:23:41,870 --> 00:23:47,750
the add or remove programs<font color="#E5E5E5"> dialog in</font>

422
00:23:44,480 --> 00:23:52,090
<font color="#CCCCCC">Windows you</font><font color="#E5E5E5"> basically see everything</font>

423
00:23:47,750 --> 00:23:54,460
this class represents<font color="#CCCCCC"> same as with</font>

424
00:23:52,090 --> 00:23:59,270
artifacts you can find in the registry

425
00:23:54,460 --> 00:24:02,980
<font color="#E5E5E5">so</font><font color="#CCCCCC"> winterly</font><font color="#E5E5E5"> do product actually has a</font>

426
00:23:59,270 --> 00:24:06,170
method<font color="#CCCCCC"> called</font><font color="#E5E5E5"> install it takes an</font>

427
00:24:02,980 --> 00:24:09,050
arbitrary<font color="#CCCCCC"> MSI of your choice you can</font>

428
00:24:06,170 --> 00:24:12,560
even<font color="#E5E5E5"> point it to an</font><font color="#CCCCCC"> network host at MSI</font>

429
00:24:09,050 --> 00:24:15,620
file and uses it to install a new

430
00:24:12,560 --> 00:24:17,360
package and not<font color="#CCCCCC"> only have you</font><font color="#E5E5E5"> installed</font>

431
00:24:15,620 --> 00:24:20,379
but<font color="#E5E5E5"> you can achieve similar</font>

432
00:24:17,360 --> 00:24:28,639
functionality<font color="#E5E5E5"> with the admin method and</font>

433
00:24:20,380 --> 00:24:31,100
<font color="#E5E5E5">I think also with upgrade now</font><font color="#CCCCCC"> even</font>

434
00:24:28,640 --> 00:24:32,460
<font color="#CCCCCC">metals for</font><font color="#E5E5E5"> is able to take an arbitrary</font>

435
00:24:31,100 --> 00:24:38,189
payload and

436
00:24:32,460 --> 00:24:40,230
it into an<font color="#E5E5E5"> MSI so if you have</font><font color="#CCCCCC"> nexi or a</font>

437
00:24:38,190 --> 00:24:43,170
<font color="#E5E5E5">dll based payload it should be pretty</font>

438
00:24:40,230 --> 00:24:51,210
<font color="#CCCCCC">easy to turn</font><font color="#E5E5E5"> it into an</font><font color="#CCCCCC"> msi and use it</font>

439
00:24:43,170 --> 00:24:53,910
with<font color="#CCCCCC"> win32 product and also</font><font color="#E5E5E5"> there have</font>

440
00:24:51,210 --> 00:24:58,560
been instances of pretty sophisticated

441
00:24:53,910 --> 00:25:00,740
actors using<font color="#E5E5E5"> the msi as a for payload</font>

442
00:24:58,560 --> 00:25:03,690
delivery<font color="#CCCCCC"> but they haven't really used it</font>

443
00:25:00,740 --> 00:25:10,500
with<font color="#CCCCCC"> msi specific lateral movement</font>

444
00:25:03,690 --> 00:25:14,070
methods but which is a shame so let's

445
00:25:10,500 --> 00:25:16,970
see a quick demo<font color="#CCCCCC"> of this here</font><font color="#E5E5E5"> I'm</font><font color="#CCCCCC"> just</font>

446
00:25:14,070 --> 00:25:21,990
<font color="#E5E5E5">gonna</font><font color="#CCCCCC"> use an MSI package interpreter and</font>

447
00:25:16,970 --> 00:25:24,860
use the win32 product class to run it on

448
00:25:21,990 --> 00:25:24,860
a target machine

449
00:25:40,360 --> 00:25:47,678
so we now have<font color="#CCCCCC"> a system shell</font><font color="#E5E5E5"> and we</font>

450
00:25:45,220 --> 00:25:51,010
have created zero services zero tasks

451
00:25:47,679 --> 00:25:51,490
and then use<font color="#CCCCCC"> wintry due process process</font>

452
00:25:51,010 --> 00:25:58,929
at<font color="#E5E5E5"> all</font>

453
00:25:51,490 --> 00:26:01,000
so if your detection was based on<font color="#CCCCCC"> was</font>

454
00:25:58,929 --> 00:26:04,090
based on<font color="#E5E5E5"> a specific execution vector</font>

455
00:26:01,000 --> 00:26:07,659
this<font color="#E5E5E5"> is pretty much an unknown execution</font>

456
00:26:04,090 --> 00:26:11,889
vector I did try to do some other stuff

457
00:26:07,659 --> 00:26:15,279
with this class and they generally<font color="#E5E5E5"> work</font>

458
00:26:11,890 --> 00:26:17,559
first of all<font color="#CCCCCC"> MSI</font><font color="#E5E5E5"> executes itself has a</font>

459
00:26:15,279 --> 00:26:19,480
really<font color="#CCCCCC"> nice parameter caller which is</font>

460
00:26:17,559 --> 00:26:22,000
<font color="#E5E5E5">MSI exec /y</font>

461
00:26:19,480 --> 00:26:24,340
this turns<font color="#E5E5E5"> MSI</font><font color="#CCCCCC"> x'q and to sort</font><font color="#E5E5E5"> of</font>

462
00:26:22,000 --> 00:26:29,559
replacement for replacement for<font color="#CCCCCC"> reggae's</font>

463
00:26:24,340 --> 00:26:32,289
<font color="#CCCCCC">VR and can run an arbitrary DLL from</font>

464
00:26:29,559 --> 00:26:34,389
what I try to do there isn't really a

465
00:26:32,289 --> 00:26:39,100
<font color="#CCCCCC">way to replicate</font><font color="#E5E5E5"> this using the product</font>

466
00:26:34,389 --> 00:26:43,689
class<font color="#E5E5E5"> which is a bit of a shame</font><font color="#CCCCCC"> another</font>

467
00:26:39,100 --> 00:26:47,230
<font color="#E5E5E5">idea I had is because</font><font color="#CCCCCC"> I I prefer not</font><font color="#E5E5E5"> to</font>

468
00:26:43,690 --> 00:26:51,519
<font color="#CCCCCC">use files that I draw in a</font><font color="#E5E5E5"> machine I</font>

469
00:26:47,230 --> 00:26:53,710
tried hijacking<font color="#CCCCCC"> uninstaller z--</font><font color="#E5E5E5"> for</font>

470
00:26:51,519 --> 00:26:59,110
every installed application<font color="#CCCCCC"> there's a</font>

471
00:26:53,710 --> 00:27:01,779
registry<font color="#E5E5E5"> there is an</font><font color="#CCCCCC"> registry entry that</font>

472
00:26:59,110 --> 00:27:04,809
specifies an uninstaller<font color="#CCCCCC"> and it is a</font>

473
00:27:01,779 --> 00:27:07,269
command line<font color="#CCCCCC"> which means that if you</font>

474
00:27:04,809 --> 00:27:07,720
<font color="#E5E5E5">hijack an uninstaller and somehow run it</font>

475
00:27:07,269 --> 00:27:09,039
run it

476
00:27:07,720 --> 00:27:12,899
you can basically<font color="#CCCCCC"> supply your own</font>

477
00:27:09,039 --> 00:27:15,940
command line and try to uninstall some

478
00:27:12,899 --> 00:27:18,989
arbitrary non interesting application

479
00:27:15,940 --> 00:27:22,360
and run your command line instead so

480
00:27:18,990 --> 00:27:25,600
this also does not work with<font color="#CCCCCC"> 1:32</font>

481
00:27:22,360 --> 00:27:30,010
product because it for some<font color="#E5E5E5"> reason</font><font color="#CCCCCC"> just</font>

482
00:27:25,600 --> 00:27:32,740
ignores the uninstaller<font color="#E5E5E5"> entry and runs</font>

483
00:27:30,010 --> 00:27:42,279
<font color="#CCCCCC">msi exact with a specific good which is</font>

484
00:27:32,740 --> 00:27:45,970
<font color="#CCCCCC">a shape</font><font color="#E5E5E5"> all right so another way to run</font>

485
00:27:42,279 --> 00:27:49,750
your<font color="#CCCCCC"> codes remotely is by using evil</font><font color="#E5E5E5"> WMI</font>

486
00:27:45,970 --> 00:27:53,380
providers these providers as<font color="#CCCCCC"> i've said</font>

487
00:27:49,750 --> 00:27:55,799
our class instances and methods are

488
00:27:53,380 --> 00:27:55,799
<font color="#E5E5E5">actually</font>

489
00:27:55,800 --> 00:28:02,350
and this means<font color="#CCCCCC"> that if</font><font color="#E5E5E5"> you</font><font color="#CCCCCC"> have</font><font color="#E5E5E5"> your own</font>

490
00:27:59,200 --> 00:28:04,990
provider<font color="#E5E5E5"> and which is mostly a comm DLL</font>

491
00:28:02,350 --> 00:28:08,340
or<font color="#E5E5E5"> comm</font><font color="#CCCCCC"> eggsy and you can run</font><font color="#E5E5E5"> it you're</font>

492
00:28:04,990 --> 00:28:08,340
<font color="#E5E5E5">basically running code on the machine</font>

493
00:28:08,860 --> 00:28:16,540
a guy called<font color="#E5E5E5"> Alexander</font><font color="#CCCCCC"> Leary showed</font>

494
00:28:12,250 --> 00:28:19,750
during<font color="#E5E5E5"> the last there'll be</font><font color="#CCCCCC"> Callen way</font>

495
00:28:16,540 --> 00:28:22,750
to<font color="#E5E5E5"> register W my provider using only W</font>

496
00:28:19,750 --> 00:28:26,230
my functions which means<font color="#E5E5E5"> you don't need</font>

497
00:28:22,750 --> 00:28:28,570
<font color="#CCCCCC">to run any kind</font><font color="#E5E5E5"> of code on the machine</font>

498
00:28:26,230 --> 00:28:34,080
<font color="#E5E5E5">first and just communicate with it</font>

499
00:28:28,570 --> 00:28:38,320
through<font color="#CCCCCC"> V W</font><font color="#E5E5E5"> my interface</font><font color="#CCCCCC"> this means</font><font color="#E5E5E5"> that</font>

500
00:28:34,080 --> 00:28:40,560
we can<font color="#E5E5E5"> install a new provider cool but</font>

501
00:28:38,320 --> 00:28:43,450
this method has<font color="#E5E5E5"> a couple of drawbacks</font>

502
00:28:40,560 --> 00:28:45,129
<font color="#CCCCCC">first of all we need to drop a file on</font>

503
00:28:43,450 --> 00:28:49,300
the machine<font color="#CCCCCC"> because</font><font color="#E5E5E5"> we need to write and</font>

504
00:28:45,130 --> 00:28:50,580
UW my provider and we don't like files

505
00:28:49,300 --> 00:28:54,430
[Music]

506
00:28:50,580 --> 00:28:57,330
even harder for<font color="#E5E5E5"> me you need to run to</font>

507
00:28:54,430 --> 00:29:00,730
write a WMI provider from scratch and

508
00:28:57,330 --> 00:29:03,070
this<font color="#E5E5E5"> is a calm</font><font color="#CCCCCC"> DLL</font><font color="#E5E5E5"> and</font><font color="#CCCCCC"> it needs</font><font color="#E5E5E5"> to be in</font>

509
00:29:00,730 --> 00:29:05,530
a<font color="#E5E5E5"> very specific shape and I'm a lazy</font>

510
00:29:03,070 --> 00:29:12,639
person and I really don't want<font color="#E5E5E5"> to write</font>

511
00:29:05,530 --> 00:29:14,920
<font color="#CCCCCC">comm really don't so what if I could run</font>

512
00:29:12,640 --> 00:29:17,170
<font color="#E5E5E5">something as a W my provider but it's</font>

513
00:29:14,920 --> 00:29:19,600
<font color="#E5E5E5">just it's just an hour it's just a</font>

514
00:29:17,170 --> 00:29:22,660
<font color="#CCCCCC">command-line like it has no relation to</font>

515
00:29:19,600 --> 00:29:26,290
<font color="#E5E5E5">W</font><font color="#CCCCCC"> might whatsoever</font><font color="#E5E5E5"> but it will be run as</font>

516
00:29:22,660 --> 00:29:29,950
a<font color="#CCCCCC"> W</font><font color="#E5E5E5"> my provider to do so what we need is</font>

517
00:29:26,290 --> 00:29:31,420
<font color="#CCCCCC">to create</font><font color="#E5E5E5"> our own call object with a</font>

518
00:29:29,950 --> 00:29:33,760
command line<font color="#CCCCCC"> of our choosing</font>

519
00:29:31,420 --> 00:29:37,180
we need to register<font color="#E5E5E5"> a new provider and</font>

520
00:29:33,760 --> 00:29:40,030
then we somehow need<font color="#CCCCCC"> to get</font><font color="#E5E5E5"> the remote</font>

521
00:29:37,180 --> 00:29:44,020
machine<font color="#E5E5E5"> to load this provider</font><font color="#CCCCCC"> so we</font>

522
00:29:40,030 --> 00:29:47,500
<font color="#CCCCCC">actually have our code running so let's</font>

523
00:29:44,020 --> 00:29:50,620
<font color="#E5E5E5">begin</font><font color="#CCCCCC"> with creating a cob jecht contexts</font>

524
00:29:47,500 --> 00:29:55,420
<font color="#E5E5E5">are identified via a class ID which is</font><font color="#CCCCCC"> a</font>

525
00:29:50,620 --> 00:29:57,459
good like an identifier<font color="#E5E5E5"> and if we want</font>

526
00:29:55,420 --> 00:30:00,820
to use<font color="#E5E5E5"> just some kind</font><font color="#CCCCCC"> of command</font><font color="#E5E5E5"> line we</font>

527
00:29:57,460 --> 00:30:05,210
can put it in a sub key of the class ID

528
00:30:00,820 --> 00:30:09,460
called local server<font color="#CCCCCC"> 30</font><font color="#E5E5E5"> 32 which</font><font color="#CCCCCC"> is the</font>

529
00:30:05,210 --> 00:30:12,380
give<font color="#E5E5E5"> four out of</font><font color="#CCCCCC"> process</font><font color="#E5E5E5"> comm objects</font>

530
00:30:09,460 --> 00:30:14,720
which means they run as exes and you can

531
00:30:12,380 --> 00:30:18,110
supply an arbitrary<font color="#E5E5E5"> command-line</font>

532
00:30:14,720 --> 00:30:21,320
argument so we have created<font color="#CCCCCC"> our comm</font>

533
00:30:18,110 --> 00:30:25,330
object now we need to register<font color="#E5E5E5"> and eww</font>

534
00:30:21,320 --> 00:30:28,100
my provider now providers are

535
00:30:25,330 --> 00:30:33,789
represented by<font color="#E5E5E5"> an internal W my class</font>

536
00:30:28,100 --> 00:30:33,789
called double underscore<font color="#E5E5E5"> win32 provider</font>

537
00:30:34,360 --> 00:30:40,969
<font color="#CCCCCC">it's a pretty big class and it has a lot</font>

538
00:30:37,340 --> 00:30:43,908
<font color="#CCCCCC">of</font><font color="#E5E5E5"> properties</font><font color="#CCCCCC"> but as we</font><font color="#E5E5E5"> are not as I am</font>

539
00:30:40,970 --> 00:30:47,480
NOT a developer<font color="#E5E5E5"> who actually wants to do</font>

540
00:30:43,909 --> 00:30:49,820
useful<font color="#E5E5E5"> things with</font><font color="#CCCCCC"> W my</font><font color="#E5E5E5"> but I'm more I'm</font>

541
00:30:47,480 --> 00:30:53,990
<font color="#CCCCCC">more like a</font><font color="#E5E5E5"> monkey hitting it</font><font color="#CCCCCC"> until it</font>

542
00:30:49,820 --> 00:30:56,658
submits<font color="#CCCCCC"> we have free interesting fields</font>

543
00:30:53,990 --> 00:30:59,600
which are the name field as we need to

544
00:30:56,659 --> 00:31:02,270
reference<font color="#E5E5E5"> our WMI providers somehow the</font>

545
00:30:59,600 --> 00:31:04,250
class ID field which references<font color="#E5E5E5"> to</font><font color="#CCCCCC"> comm</font>

546
00:31:02,270 --> 00:31:08,120
object we would<font color="#E5E5E5"> like</font><font color="#CCCCCC"> to run as the</font>

547
00:31:04,250 --> 00:31:11,899
<font color="#CCCCCC">double my provider and the hosting model</font>

548
00:31:08,120 --> 00:31:16,100
field<font color="#E5E5E5"> which tells</font><font color="#CCCCCC"> WMI how should I run</font>

549
00:31:11,899 --> 00:31:18,830
this<font color="#E5E5E5"> comm object-- so do I want it</font><font color="#CCCCCC"> to</font>

550
00:31:16,100 --> 00:31:21,949
run<font color="#E5E5E5"> as a standalone XE do I want to run</font>

551
00:31:18,830 --> 00:31:24,230
it as a<font color="#CCCCCC"> DLL I load into a lower</font>

552
00:31:21,950 --> 00:31:28,070
privileged provider into a lower

553
00:31:24,230 --> 00:31:31,940
privileged<font color="#E5E5E5"> host process</font><font color="#CCCCCC"> or do I</font><font color="#E5E5E5"> want to</font>

554
00:31:28,070 --> 00:31:36,649
run it in as a<font color="#E5E5E5"> DLL in this in a process</font>

555
00:31:31,940 --> 00:31:39,409
that<font color="#E5E5E5"> is run as system so we could just</font>

556
00:31:36,649 --> 00:31:43,760
create an instance of win32 provider<font color="#CCCCCC"> and</font>

557
00:31:39,409 --> 00:31:48,380
<font color="#E5E5E5">that is enough</font><font color="#CCCCCC"> to register</font><font color="#E5E5E5"> an actual new</font>

558
00:31:43,760 --> 00:31:52,730
<font color="#E5E5E5">W my provider so we could simply name it</font>

559
00:31:48,380 --> 00:31:55,299
whatever we want<font color="#CCCCCC"> supply</font><font color="#E5E5E5"> the class ID</font><font color="#CCCCCC"> but</font>

560
00:31:52,730 --> 00:31:57,679
whatever<font color="#E5E5E5"> comm object-- we've created and</font>

561
00:31:55,299 --> 00:32:01,399
<font color="#CCCCCC">set the hosting model to something like</font>

562
00:31:57,679 --> 00:32:04,039
so post<font color="#E5E5E5"> which means an out</font><font color="#CCCCCC"> of process</font>

563
00:32:01,399 --> 00:32:07,520
<font color="#CCCCCC">calm object which is run as the system</font>

564
00:32:04,039 --> 00:32:11,090
user and that's it<font color="#E5E5E5"> that's what you need</font>

565
00:32:07,520 --> 00:32:12,980
<font color="#E5E5E5">to register a provider but you need to</font>

566
00:32:11,090 --> 00:32:15,740
<font color="#E5E5E5">also load it</font>

567
00:32:12,980 --> 00:32:18,380
and<font color="#E5E5E5"> W my providers are generally loaded</font>

568
00:32:15,740 --> 00:32:20,299
on demand<font color="#E5E5E5"> that means you have some kind</font>

569
00:32:18,380 --> 00:32:22,730
<font color="#E5E5E5">of class and it is implemented in a</font>

570
00:32:20,299 --> 00:32:25,580
specific<font color="#E5E5E5"> provider and when somebody asks</font>

571
00:32:22,730 --> 00:32:32,240
for<font color="#CCCCCC"> this class</font><font color="#E5E5E5"> if the provider isn't</font>

572
00:32:25,580 --> 00:32:35,210
loaded<font color="#E5E5E5"> it is</font><font color="#CCCCCC"> but as you remember my</font><font color="#E5E5E5"> WI</font>

573
00:32:32,240 --> 00:32:39,040
provider is<font color="#E5E5E5"> PowerShell running calc</font>

574
00:32:35,210 --> 00:32:42,320
it doesn't really implement anything<font color="#CCCCCC"> WMI</font>

575
00:32:39,040 --> 00:32:47,110
so we need to find some kind<font color="#E5E5E5"> of</font>

576
00:32:42,320 --> 00:32:50,178
alternative way<font color="#E5E5E5"> to load a WI provider</font>

577
00:32:47,110 --> 00:32:53,719
<font color="#E5E5E5">thankfully there's a class</font><font color="#CCCCCC"> called MSFT</font>

578
00:32:50,179 --> 00:32:56,210
providers and this class has a<font color="#CCCCCC"> method</font>

579
00:32:53,720 --> 00:32:59,410
called<font color="#E5E5E5"> load MSFT providers actually</font>

580
00:32:56,210 --> 00:33:04,270
represents<font color="#CCCCCC"> wi providers which are loaded</font>

581
00:32:59,410 --> 00:33:07,340
<font color="#CCCCCC">at this moment</font><font color="#E5E5E5"> in the system so this</font>

582
00:33:04,270 --> 00:33:12,049
load method<font color="#E5E5E5"> load method allows you</font><font color="#CCCCCC"> to</font>

583
00:33:07,340 --> 00:33:14,750
<font color="#E5E5E5">load W</font><font color="#CCCCCC"> my provider basically by name</font>

584
00:33:12,049 --> 00:33:17,179
you could also suspend resume and unload

585
00:33:14,750 --> 00:33:23,960
providers but that does not<font color="#E5E5E5"> help me</font><font color="#CCCCCC"> with</font>

586
00:33:17,179 --> 00:33:27,169
<font color="#CCCCCC">the real moment so this technique didn't</font>

587
00:33:23,960 --> 00:33:31,640
work at first but it turns<font color="#E5E5E5"> out that was</font>

588
00:33:27,169 --> 00:33:34,750
a typo<font color="#CCCCCC"> but my first instinct</font><font color="#E5E5E5"> was to open</font>

589
00:33:31,640 --> 00:33:37,190
<font color="#CCCCCC">Ida so I can tell</font><font color="#E5E5E5"> you a bit about</font>

590
00:33:34,750 --> 00:33:39,799
internal about the internals of this

591
00:33:37,190 --> 00:33:43,250
thing<font color="#E5E5E5"> like we didn't need</font><font color="#CCCCCC"> to reverse it</font>

592
00:33:39,799 --> 00:33:47,570
<font color="#CCCCCC">at all but I didn't think I did I made a</font>

593
00:33:43,250 --> 00:33:49,610
typo<font color="#E5E5E5"> right so the load method checks if</font>

594
00:33:47,570 --> 00:33:51,080
when<font color="#CCCCCC"> turidu provider is registered</font>

595
00:33:49,610 --> 00:33:54,320
correctly<font color="#CCCCCC"> it basically checks</font><font color="#E5E5E5"> this</font>

596
00:33:51,080 --> 00:33:57,049
against the<font color="#E5E5E5"> WI repository</font><font color="#CCCCCC"> and if we</font>

597
00:33:54,320 --> 00:34:00,290
register it via<font color="#CCCCCC"> PowerShell and provide a</font>

598
00:33:57,049 --> 00:34:02,418
real hosting model<font color="#E5E5E5"> this is enough to</font>

599
00:34:00,290 --> 00:34:06,860
have a provider<font color="#CCCCCC"> considered to be</font>

600
00:34:02,419 --> 00:34:10,040
registered correctly<font color="#E5E5E5"> and what happens</font>

601
00:34:06,860 --> 00:34:13,668
next is a function called create

602
00:34:10,040 --> 00:34:17,918
instance is called now<font color="#E5E5E5"> as you see from</font>

603
00:34:13,668 --> 00:34:21,138
this one<font color="#E5E5E5"> block</font><font color="#CCCCCC"> it pretty much</font>

604
00:34:17,918 --> 00:34:25,520
unconditionally<font color="#E5E5E5"> called</font><font color="#CCCCCC"> cocoa gate class</font>

605
00:34:21,139 --> 00:34:28,359
object with<font color="#E5E5E5"> your with your supplied</font>

606
00:34:25,520 --> 00:34:28,359
class ID

607
00:34:28,460 --> 00:34:33,210
this means the<font color="#E5E5E5"> first time somebody</font>

608
00:34:31,139 --> 00:34:35,609
actually<font color="#E5E5E5"> checks if your provider is a</font>

609
00:34:33,210 --> 00:34:37,918
real WMI provider and<font color="#CCCCCC"> not just a bunch</font>

610
00:34:35,609 --> 00:34:43,109
of gibberish<font color="#CCCCCC"> it's after a code</font><font color="#E5E5E5"> your code</font>

611
00:34:37,918 --> 00:34:46,049
<font color="#E5E5E5">is run so the WMI service looks at your</font>

612
00:34:43,109 --> 00:34:48,569
local<font color="#E5E5E5"> server</font><font color="#CCCCCC"> three dookey under the</font>

613
00:34:46,050 --> 00:34:52,350
<font color="#E5E5E5">relevant clsid runs your supplied</font>

614
00:34:48,570 --> 00:34:54,659
command line<font color="#CCCCCC"> as the system user and then</font>

615
00:34:52,350 --> 00:34:57,480
<font color="#CCCCCC">tries to communicate</font><font color="#E5E5E5"> it with it and</font>

616
00:34:54,659 --> 00:34:59,490
query some relevant interfaces relevant

617
00:34:57,480 --> 00:35:02,790
comm interfaces and it obviously fails

618
00:34:59,490 --> 00:35:05,580
<font color="#CCCCCC">because this is not a real WMI provider</font>

619
00:35:02,790 --> 00:35:08,430
<font color="#E5E5E5">but this wasn't really what</font><font color="#CCCCCC"> you were</font>

620
00:35:05,580 --> 00:35:10,920
trying to<font color="#E5E5E5"> achieve</font><font color="#CCCCCC"> your code</font><font color="#E5E5E5"> is already</font>

621
00:35:08,430 --> 00:35:15,089
<font color="#E5E5E5">running and you really don't care</font><font color="#CCCCCC"> about</font>

622
00:35:10,920 --> 00:35:20,580
whether it functions together<font color="#E5E5E5"> with</font><font color="#CCCCCC"> WMI</font>

623
00:35:15,090 --> 00:35:23,430
itself<font color="#E5E5E5"> a problem I had with this</font>

624
00:35:20,580 --> 00:35:27,090
approach is the self host model I'm

625
00:35:23,430 --> 00:35:29,660
hosting model<font color="#CCCCCC"> which</font><font color="#E5E5E5"> actually</font><font color="#CCCCCC"> it's</font>

626
00:35:27,090 --> 00:35:35,160
<font color="#E5E5E5">building is one of the only ways</font><font color="#CCCCCC"> to run</font>

627
00:35:29,660 --> 00:35:37,379
<font color="#E5E5E5">W my provider as an egg's e</font><font color="#CCCCCC"> it runs a</font>

628
00:35:35,160 --> 00:35:39,750
system and it leaves a really<font color="#CCCCCC"> nasty</font>

629
00:35:37,380 --> 00:35:42,359
<font color="#E5E5E5">event in the event log it basically</font>

630
00:35:39,750 --> 00:35:44,520
tells<font color="#E5E5E5"> you hey you've registered a</font><font color="#CCCCCC"> w my</font>

631
00:35:42,359 --> 00:35:48,180
provider that<font color="#E5E5E5"> needs to run a system this</font>

632
00:35:44,520 --> 00:35:51,330
could be a security<font color="#E5E5E5"> issue and if we're</font>

633
00:35:48,180 --> 00:35:53,940
going for stealth with our new lateral

634
00:35:51,330 --> 00:35:56,759
movement methods<font color="#E5E5E5"> an event saying this</font>

635
00:35:53,940 --> 00:36:01,080
could be a<font color="#E5E5E5"> security issue really doesn't</font>

636
00:35:56,760 --> 00:36:04,520
help<font color="#CCCCCC"> so it turns</font><font color="#E5E5E5"> out that for backwards</font>

637
00:36:01,080 --> 00:36:06,900
<font color="#CCCCCC">compatibility we have an additional net</font>

638
00:36:04,520 --> 00:36:10,740
hosting model called<font color="#CCCCCC"> Network</font><font color="#E5E5E5"> service</font>

639
00:36:06,900 --> 00:36:13,410
host<font color="#E5E5E5"> or self host this hosting model</font>

640
00:36:10,740 --> 00:36:16,919
<font color="#E5E5E5">makes the</font><font color="#CCCCCC"> WMI service first check if</font>

641
00:36:13,410 --> 00:36:20,730
there is a DLL version of the provider

642
00:36:16,920 --> 00:36:26,310
<font color="#E5E5E5">and it tries</font><font color="#CCCCCC"> to load it with a lower</font>

643
00:36:20,730 --> 00:36:28,830
privileged<font color="#E5E5E5"> hosting process and if and</font>

644
00:36:26,310 --> 00:36:33,690
<font color="#CCCCCC">when it</font><font color="#E5E5E5"> fails then</font><font color="#CCCCCC"> it just loads it as</font>

645
00:36:28,830 --> 00:36:36,240
system whatever<font color="#E5E5E5"> so this doesn't write</font>

646
00:36:33,690 --> 00:36:39,240
anything<font color="#E5E5E5"> to the event log and</font><font color="#CCCCCC"> because we</font>

647
00:36:36,240 --> 00:36:40,319
control<font color="#E5E5E5"> the comm object-- and how</font><font color="#CCCCCC"> it's</font>

648
00:36:39,240 --> 00:36:42,990
registered

649
00:36:40,320 --> 00:36:45,270
in the registry<font color="#E5E5E5"> we can just not supply</font>

650
00:36:42,990 --> 00:36:48,149
any kind of<font color="#E5E5E5"> DLL version of the provider</font>

651
00:36:45,270 --> 00:36:51,840
<font color="#E5E5E5">so it always runs as system and never</font>

652
00:36:48,150 --> 00:36:55,520
writes anything to the event log<font color="#CCCCCC"> at</font>

653
00:36:51,840 --> 00:37:00,330
least on registry what does happen is

654
00:36:55,520 --> 00:37:02,970
this<font color="#CCCCCC"> comm error event</font><font color="#E5E5E5"> because you're not</font>

655
00:37:00,330 --> 00:37:05,850
<font color="#E5E5E5">really running any kind any real</font><font color="#CCCCCC"> decom</font>

656
00:37:02,970 --> 00:37:11,100
object<font color="#E5E5E5"> and this is also known artifact</font>

657
00:37:05,850 --> 00:37:15,000
of lots of<font color="#E5E5E5"> comm hijacking techniques but</font>

658
00:37:11,100 --> 00:37:17,580
I've seen<font color="#E5E5E5"> a lot of these</font><font color="#CCCCCC"> happen with</font>

659
00:37:15,000 --> 00:37:21,560
just arbitrary benign<font color="#E5E5E5"> comm objects and</font>

660
00:37:17,580 --> 00:37:24,120
this<font color="#E5E5E5"> is also really non informative so</font>

661
00:37:21,560 --> 00:37:28,830
if you work<font color="#CCCCCC"> really hard</font><font color="#E5E5E5"> you</font><font color="#CCCCCC"> can bypass</font>

662
00:37:24,120 --> 00:37:32,330
this by nobody<font color="#E5E5E5"> will be looking</font><font color="#CCCCCC"> please</font>

663
00:37:28,830 --> 00:37:36,509
now so let's see how it looks

664
00:37:32,330 --> 00:37:40,819
<font color="#E5E5E5">I'm gonna remotely write a new comm</font>

665
00:37:36,510 --> 00:37:40,820
object into the registry<font color="#E5E5E5"> using W my</font>

666
00:37:41,330 --> 00:37:45,930
register a new provider<font color="#E5E5E5"> using the same</font>

667
00:37:43,740 --> 00:37:49,370
comm object--<font color="#E5E5E5"> and then load</font><font color="#CCCCCC"> it with the</font>

668
00:37:45,930 --> 00:37:49,370
MSFT<font color="#E5E5E5"> provider load method</font>

669
00:37:58,500 --> 00:38:04,560
so again we have a<font color="#E5E5E5"> system shell and</font>

670
00:38:01,480 --> 00:38:06,670
again we have not used any variation of

671
00:38:04,560 --> 00:38:13,890
previously<font color="#E5E5E5"> known that</font><font color="#CCCCCC"> all</font><font color="#E5E5E5"> movement</font>

672
00:38:06,670 --> 00:38:16,690
methods<font color="#CCCCCC"> this will all of the actual</font>

673
00:38:13,890 --> 00:38:20,650
<font color="#E5E5E5">lateral movement techniques I've</font>

674
00:38:16,690 --> 00:38:22,930
discovered but I<font color="#E5E5E5"> did want to show like</font>

675
00:38:20,650 --> 00:38:25,300
<font color="#E5E5E5">the</font><font color="#CCCCCC"> stupidest thing I found you</font><font color="#E5E5E5"> could</font>

676
00:38:22,930 --> 00:38:30,910
<font color="#E5E5E5">deal with</font><font color="#CCCCCC"> WMI</font><font color="#E5E5E5"> which is messing with boot</font>

677
00:38:25,300 --> 00:38:32,770
configuration<font color="#CCCCCC"> boot configuration on</font>

678
00:38:30,910 --> 00:38:37,839
<font color="#E5E5E5">Windows is stored in what's called the</font>

679
00:38:32,770 --> 00:38:42,340
BCD store<font color="#E5E5E5"> boot configuration the forgot</font>

680
00:38:37,840 --> 00:38:44,950
for<font color="#E5E5E5"> the D stands for</font><font color="#CCCCCC"> ya</font><font color="#E5E5E5"> and it contains</font>

681
00:38:42,340 --> 00:38:49,090
data on the boot manager and<font color="#CCCCCC"> bootloader</font>

682
00:38:44,950 --> 00:38:52,750
<font color="#E5E5E5">which</font><font color="#CCCCCC"> files are actually registered at</font>

683
00:38:49,090 --> 00:38:55,990
the<font color="#E5E5E5"> boot manager and boot loader and J</font>

684
00:38:52,750 --> 00:38:59,200
and manipulating the BCD<font color="#E5E5E5"> is mostly done</font>

685
00:38:55,990 --> 00:39:01,930
using the BCD<font color="#E5E5E5"> edit tool or if you have</font>

686
00:38:59,200 --> 00:39:06,970
any<font color="#E5E5E5"> kind of replacement already running</font>

687
00:39:01,930 --> 00:39:10,930
<font color="#E5E5E5">on the machine</font><font color="#CCCCCC"> but it turns out WMI has</font>

688
00:39:06,970 --> 00:39:13,720
a class that represents<font color="#E5E5E5"> the BCD store</font>

689
00:39:10,930 --> 00:39:18,190
<font color="#CCCCCC">and like every single W in</font><font color="#E5E5E5"> my class you</font>

690
00:39:13,720 --> 00:39:22,359
can<font color="#E5E5E5"> use it remotely so this allows us</font><font color="#CCCCCC"> to</font>

691
00:39:18,190 --> 00:39:25,390
<font color="#E5E5E5">switch when load XE to</font><font color="#CCCCCC"> a</font><font color="#E5E5E5"> follower of or</font>

692
00:39:22,359 --> 00:39:29,590
choosing to<font color="#E5E5E5"> be used as the boot loader</font>

693
00:39:25,390 --> 00:39:32,910
for<font color="#CCCCCC"> Windows and this way we can</font>

694
00:39:29,590 --> 00:39:36,790
manipulate the windows loading process

695
00:39:32,910 --> 00:39:39,009
so we basically<font color="#CCCCCC"> just need to open</font><font color="#E5E5E5"> an</font>

696
00:39:36,790 --> 00:39:41,400
instance of the BCD store class on the

697
00:39:39,010 --> 00:39:47,080
target<font color="#CCCCCC"> machine</font><font color="#E5E5E5"> find the corresponding</font>

698
00:39:41,400 --> 00:39:49,300
<font color="#CCCCCC">BCD object for win low drag Z and we can</font>

699
00:39:47,080 --> 00:39:52,509
simply set it to calc

700
00:39:49,300 --> 00:39:57,040
instead of win load because some<font color="#CCCCCC"> of us</font>

701
00:39:52,510 --> 00:39:59,950
cannot write boot kits and or don't have

702
00:39:57,040 --> 00:40:03,190
<font color="#E5E5E5">the</font><font color="#CCCCCC"> time for that and then make the</font>

703
00:39:59,950 --> 00:40:06,580
<font color="#CCCCCC">Machine restart and see it load from</font>

704
00:40:03,190 --> 00:40:09,900
calc<font color="#E5E5E5"> so if you want to see how it looks</font>

705
00:40:06,580 --> 00:40:09,900
<font color="#E5E5E5">it's basically like this</font>

706
00:40:10,180 --> 00:40:18,879
<font color="#E5E5E5">tim is</font><font color="#CCCCCC"> red and</font><font color="#E5E5E5"> attacker is blue because</font>

707
00:40:12,160 --> 00:40:28,390
<font color="#CCCCCC">I got distracted</font><font color="#E5E5E5"> so here's the code</font><font color="#CCCCCC"> for</font>

708
00:40:18,880 --> 00:40:31,870
<font color="#E5E5E5">replacing window with calc and we can</font>

709
00:40:28,390 --> 00:40:34,029
also<font color="#E5E5E5"> use now</font><font color="#CCCCCC"> first of</font><font color="#E5E5E5"> all here</font><font color="#CCCCCC"> we run</font>

710
00:40:31,870 --> 00:40:38,620
bcdedit<font color="#CCCCCC"> and we see the Windows boot</font>

711
00:40:34,030 --> 00:40:40,540
loader is windows system32<font color="#CCCCCC"> Cal Tech Z so</font>

712
00:40:38,620 --> 00:40:44,549
we can use<font color="#CCCCCC"> WMI to restart the machine</font>

713
00:40:40,540 --> 00:40:44,550
and<font color="#E5E5E5"> see</font><font color="#CCCCCC"> what happens</font>

714
00:40:51,090 --> 00:40:56,200
<font color="#E5E5E5">so if you've ever wondered how windows</font>

715
00:40:54,790 --> 00:41:01,600
looks like when it tries<font color="#CCCCCC"> to load</font><font color="#E5E5E5"> from</font>

716
00:40:56,200 --> 00:41:04,089
calc<font color="#E5E5E5"> it's this not very usable but I</font>

717
00:41:01,600 --> 00:41:06,520
suppose if you really want you can<font color="#E5E5E5"> use</font>

718
00:41:04,090 --> 00:41:08,500
this for some kind of ransomware scheme

719
00:41:06,520 --> 00:41:13,810
or something like that<font color="#E5E5E5"> and you could</font>

720
00:41:08,500 --> 00:41:16,630
<font color="#E5E5E5">also use the whole BCD object for more</font>

721
00:41:13,810 --> 00:41:21,060
useful evil things<font color="#CCCCCC"> but that's like</font><font color="#E5E5E5"> the</font>

722
00:41:16,630 --> 00:41:26,800
stupidest thing I could<font color="#CCCCCC"> think</font><font color="#E5E5E5"> about and</font>

723
00:41:21,060 --> 00:41:32,020
<font color="#CCCCCC">all right let's go on</font><font color="#E5E5E5"> to detection as</font>

724
00:41:26,800 --> 00:41:33,970
I've already<font color="#E5E5E5"> shown the</font><font color="#CCCCCC"> WMI activity etw</font>

725
00:41:32,020 --> 00:41:36,940
provider basically tells you everything

726
00:41:33,970 --> 00:41:40,390
<font color="#CCCCCC">you want</font><font color="#E5E5E5"> to know about queries about</font>

727
00:41:36,940 --> 00:41:42,670
<font color="#E5E5E5">method calls class and manipulations of</font>

728
00:41:40,390 --> 00:41:47,730
<font color="#CCCCCC">the model</font><font color="#E5E5E5"> itself</font><font color="#CCCCCC"> and creation</font><font color="#E5E5E5"> and the</font>

729
00:41:42,670 --> 00:41:50,170
<font color="#CCCCCC">creation of new instances of classes and</font>

730
00:41:47,730 --> 00:41:54,430
this is<font color="#E5E5E5"> basically everything</font><font color="#CCCCCC"> you need to</font>

731
00:41:50,170 --> 00:41:59,080
know to to detect pretty much all<font color="#E5E5E5"> of the</font>

732
00:41:54,430 --> 00:42:02,500
methods shown here<font color="#E5E5E5"> also using</font><font color="#CCCCCC"> WMI</font>

733
00:41:59,080 --> 00:42:06,400
introspection<font color="#CCCCCC"> you could basically</font><font color="#E5E5E5"> gain</font>

734
00:42:02,500 --> 00:42:09,250
the same<font color="#E5E5E5"> information the main problem</font>

735
00:42:06,400 --> 00:42:12,540
with the<font color="#E5E5E5"> ATW provider is that it doesn't</font>

736
00:42:09,250 --> 00:42:15,670
really<font color="#E5E5E5"> show</font><font color="#CCCCCC"> you the arguments to methods</font>

737
00:42:12,540 --> 00:42:17,890
but it's still<font color="#E5E5E5"> enough to detect pretty</font>

738
00:42:15,670 --> 00:42:21,100
much all known techniques<font color="#E5E5E5"> if you know</font>

739
00:42:17,890 --> 00:42:23,540
how to read<font color="#E5E5E5"> it so you</font><font color="#CCCCCC"> have</font><font color="#E5E5E5"> basically</font>

740
00:42:21,100 --> 00:42:26,180
these<font color="#CCCCCC"> two things</font><font color="#E5E5E5"> and they can detect</font>

741
00:42:23,540 --> 00:42:31,340
pretty much every known<font color="#CCCCCC"> WMI attack and</font>

742
00:42:26,180 --> 00:42:33,770
pretty and possibly most unknown ones<font color="#E5E5E5"> if</font>

743
00:42:31,340 --> 00:42:37,280
you just supply it with<font color="#CCCCCC"> a</font><font color="#E5E5E5"> correct class</font>

744
00:42:33,770 --> 00:42:40,880
name but as<font color="#E5E5E5"> people are mostly not</font>

745
00:42:37,280 --> 00:42:45,109
looking at<font color="#E5E5E5"> those things using</font><font color="#CCCCCC"> WMI to</font>

746
00:42:40,880 --> 00:42:48,560
move laterally<font color="#E5E5E5"> or at least using the</font>

747
00:42:45,109 --> 00:42:52,060
methods described here<font color="#CCCCCC"> will probably</font>

748
00:42:48,560 --> 00:42:52,060
evade lots of lateral movement detection

749
00:42:52,690 --> 00:42:58,250
<font color="#E5E5E5">this talk was</font><font color="#CCCCCC"> about only about WI</font>

750
00:42:56,330 --> 00:43:00,799
classes provided by Microsoft

751
00:42:58,250 --> 00:43:04,190
but they are<font color="#E5E5E5"> not the only ones who write</font>

752
00:43:00,800 --> 00:43:07,400
<font color="#CCCCCC">w my code</font><font color="#E5E5E5"> so there are some classes and</font>

753
00:43:04,190 --> 00:43:11,240
providers<font color="#E5E5E5"> that other software</font><font color="#CCCCCC"> and</font>

754
00:43:07,400 --> 00:43:15,100
hardware develop developers<font color="#E5E5E5"> right which</font>

755
00:43:11,240 --> 00:43:19,850
means some of<font color="#E5E5E5"> them could have unintended</font>

756
00:43:15,100 --> 00:43:24,560
<font color="#E5E5E5">functionalities</font><font color="#CCCCCC"> like I've</font><font color="#E5E5E5"> seen a way to</font>

757
00:43:19,850 --> 00:43:27,770
use my<font color="#E5E5E5"> laptop's bios WI provider to set</font>

758
00:43:24,560 --> 00:43:30,170
a new bios password and then enable<font color="#CCCCCC"> the</font>

759
00:43:27,770 --> 00:43:33,080
<font color="#E5E5E5">bios password and then we start</font><font color="#CCCCCC"> the</font>

760
00:43:30,170 --> 00:43:36,710
machine making it unusable<font color="#E5E5E5"> for quite a</font>

761
00:43:33,080 --> 00:43:41,230
while but<font color="#E5E5E5"> you can probably use use it</font>

762
00:43:36,710 --> 00:43:44,660
for I know some more<font color="#E5E5E5"> practical stuff and</font>

763
00:43:41,230 --> 00:43:48,350
really knowing what WI providers you

764
00:43:44,660 --> 00:43:51,830
have<font color="#E5E5E5"> which classes you could use on your</font>

765
00:43:48,350 --> 00:43:55,940
machine<font color="#CCCCCC"> and knowing</font><font color="#E5E5E5"> what happens in the</font>

766
00:43:51,830 --> 00:43:59,359
model could really<font color="#E5E5E5"> it will only do you</font>

767
00:43:55,940 --> 00:44:01,400
good because this<font color="#E5E5E5"> is</font><font color="#CCCCCC"> not</font><font color="#E5E5E5"> the only evil</font>

768
00:43:59,359 --> 00:44:06,970
you can<font color="#CCCCCC"> do with WMI it's a huge huge</font>

769
00:44:01,400 --> 00:44:09,970
system and well that's<font color="#E5E5E5"> about it</font>

770
00:44:06,970 --> 00:44:19,970
any questions

771
00:44:09,970 --> 00:44:24,470
[Applause]

772
00:44:19,970 --> 00:44:24,470
Thank<font color="#CCCCCC"> You Philip whatever any questions</font>

773
00:44:28,550 --> 00:44:34,770
<font color="#E5E5E5">no then I'd like to</font><font color="#CCCCCC"> ask you all to</font><font color="#E5E5E5"> give</font>

774
00:44:32,670 --> 00:44:36,560
a big applause once again<font color="#E5E5E5"> for uh Phillip</font>

775
00:44:34,770 --> 00:44:41,900
thank you very much

776
00:44:36,560 --> 00:44:41,900
[Applause]

