1
00:00:12,500 --> 00:00:18,840
hi thank you<font color="#CCCCCC"> for the introduction well</font>

2
00:00:16,309 --> 00:00:22,439
first of all let me say that we have a

3
00:00:18,840 --> 00:00:26,930
very long title<font color="#E5E5E5"> and as you see we</font><font color="#CCCCCC"> are</font>

4
00:00:22,439 --> 00:00:30,900
trying<font color="#CCCCCC"> to</font><font color="#E5E5E5"> mix some computer theory plus</font>

5
00:00:26,930 --> 00:00:33,300
more practical stuff<font color="#CCCCCC"> okay I'm gonna try</font>

6
00:00:30,900 --> 00:00:35,250
<font color="#CCCCCC">to make the introduction a bit too</font><font color="#E5E5E5"> fast</font>

7
00:00:33,300 --> 00:00:37,559
so in case<font color="#E5E5E5"> that you have some questions</font>

8
00:00:35,250 --> 00:00:40,280
or whatsoever<font color="#CCCCCC"> just raise your hand and</font>

9
00:00:37,559 --> 00:00:44,239
let<font color="#CCCCCC"> me stop</font><font color="#E5E5E5"> okay</font>

10
00:00:40,280 --> 00:00:47,879
well I'm<font color="#E5E5E5"> the one at the right still</font>

11
00:00:44,239 --> 00:00:49,890
alive<font color="#E5E5E5"> I'm working as assistant professor</font>

12
00:00:47,879 --> 00:00:52,379
at the<font color="#CCCCCC"> central Vista Lorenza which is</font>

13
00:00:49,890 --> 00:00:55,140
the University<font color="#CCCCCC"> Center</font><font color="#E5E5E5"> in the general</font>

14
00:00:52,379 --> 00:00:57,289
<font color="#CCCCCC">military academy in Spain</font><font color="#E5E5E5"> that means</font>

15
00:00:55,140 --> 00:00:59,579
that I'm teaching<font color="#E5E5E5"> the military people</font>

16
00:00:57,289 --> 00:01:01,289
<font color="#E5E5E5">but apart from that my research</font>

17
00:00:59,579 --> 00:01:04,290
interests<font color="#E5E5E5"> are more</font><font color="#CCCCCC"> focus on Marwan</font>

18
00:01:01,289 --> 00:01:07,110
Alice's RFID<font color="#CCCCCC"> or NFC</font><font color="#E5E5E5"> security plus the</font>

19
00:01:04,290 --> 00:01:10,200
security<font color="#CCCCCC"> token</font><font color="#E5E5E5"> anyway this is</font><font color="#CCCCCC"> the</font><font color="#E5E5E5"> net</font>

20
00:01:07,110 --> 00:01:13,680
<font color="#E5E5E5">loss the guy who implemented the tool</font>

21
00:01:10,200 --> 00:01:16,380
<font color="#E5E5E5">that I'm gonna introduce you here he's a</font>

22
00:01:13,680 --> 00:01:18,869
big<font color="#CCCCCC"> glory in informatics from two years</font>

23
00:01:16,380 --> 00:01:22,470
ago<font color="#CCCCCC"> modest</font><font color="#E5E5E5"> and now he's working with me</font>

24
00:01:18,869 --> 00:01:24,630
<font color="#E5E5E5">at the University of cells well this is</font>

25
00:01:22,470 --> 00:01:26,369
the agenda<font color="#E5E5E5"> for today I'm gonna introduce</font>

26
00:01:24,630 --> 00:01:28,189
the<font color="#E5E5E5"> topic then I'm gonna introduce you</font>

27
00:01:26,369 --> 00:01:31,500
<font color="#E5E5E5">the tool that we have developed in the</font>

28
00:01:28,189 --> 00:01:34,589
regarding this study<font color="#E5E5E5"> then I will tell</font>

29
00:01:31,500 --> 00:01:36,479
you the evaluation<font color="#E5E5E5"> that we have done and</font>

30
00:01:34,590 --> 00:01:40,920
I will<font color="#E5E5E5"> show a little demo I will try</font><font color="#CCCCCC"> to</font>

31
00:01:36,479 --> 00:01:42,979
show a<font color="#E5E5E5"> little demo with Windows 7 and</font>

32
00:01:40,920 --> 00:01:46,049
then I will close<font color="#CCCCCC"> with the conclusions</font>

33
00:01:42,979 --> 00:01:48,329
going to the<font color="#E5E5E5"> introduction</font><font color="#CCCCCC"> I think that</font>

34
00:01:46,049 --> 00:01:50,280
we already<font color="#E5E5E5"> know that</font><font color="#CCCCCC"> software</font><font color="#E5E5E5"> systems</font>

35
00:01:48,329 --> 00:01:52,289
are<font color="#E5E5E5"> very large very complex in fact if</font>

36
00:01:50,280 --> 00:01:55,200
we read some<font color="#CCCCCC"> papers on these about</font>

37
00:01:52,290 --> 00:01:58,170
software vulnerability<font color="#E5E5E5"> metrics we can</font>

38
00:01:55,200 --> 00:02:02,549
read<font color="#E5E5E5"> that there is like between 6 to 7</font>

39
00:01:58,170 --> 00:02:05,909
to 16<font color="#E5E5E5"> software bugs</font><font color="#CCCCCC"> per</font><font color="#E5E5E5"> every</font><font color="#CCCCCC"> 1,000</font>

40
00:02:02,549 --> 00:02:07,369
lines of<font color="#CCCCCC"> code approximately okay</font><font color="#E5E5E5"> so this</font>

41
00:02:05,909 --> 00:02:11,640
<font color="#E5E5E5">means that we</font><font color="#CCCCCC"> have a lot of</font>

42
00:02:07,369 --> 00:02:13,740
vulnerabilities<font color="#CCCCCC"> ok because</font><font color="#E5E5E5"> you know that</font>

43
00:02:11,640 --> 00:02:15,750
when people are<font color="#CCCCCC"> developing news of</font>

44
00:02:13,740 --> 00:02:17,670
they are more worried about the<font color="#E5E5E5"> time to</font>

45
00:02:15,750 --> 00:02:19,440
market<font color="#CCCCCC"> I mean they want</font><font color="#E5E5E5"> to complete the</font>

46
00:02:17,670 --> 00:02:22,470
<font color="#CCCCCC">problem as</font><font color="#E5E5E5"> soon as possible in order to</font>

47
00:02:19,440 --> 00:02:25,410
get<font color="#E5E5E5"> more customers will get more revenue</font>

48
00:02:22,470 --> 00:02:27,120
<font color="#CCCCCC">whatsoever okay instead of focusing on</font>

49
00:02:25,410 --> 00:02:30,900
<font color="#E5E5E5">the security of the product or other</font>

50
00:02:27,120 --> 00:02:33,780
kind of stuff<font color="#E5E5E5"> well the thing is</font><font color="#CCCCCC"> that</font>

51
00:02:30,900 --> 00:02:36,360
<font color="#E5E5E5">some of these vulnerabilities can</font><font color="#CCCCCC"> also</font>

52
00:02:33,780 --> 00:02:39,120
<font color="#E5E5E5">rise several memory errors we have this</font>

53
00:02:36,360 --> 00:02:40,620
software memory errors we can talk<font color="#CCCCCC"> about</font>

54
00:02:39,120 --> 00:02:44,550
control flow hierarchy attacks these

55
00:02:40,620 --> 00:02:46,770
kind of attacks are a special attack in

56
00:02:44,550 --> 00:02:48,660
which the legitimate<font color="#E5E5E5"> control flows of</font>

57
00:02:46,770 --> 00:02:51,450
<font color="#E5E5E5">the problem I mean if the problem have</font>

58
00:02:48,660 --> 00:02:54,120
<font color="#CCCCCC">to go from A to B and</font><font color="#E5E5E5"> from B to C it</font>

59
00:02:51,450 --> 00:02:56,609
means<font color="#E5E5E5"> that when when when I have a</font>

60
00:02:54,120 --> 00:03:00,150
control flow hijacking attack<font color="#CCCCCC"> I</font><font color="#E5E5E5"> can do</font>

61
00:02:56,610 --> 00:03:04,470
the program to go from E to<font color="#CCCCCC"> C directly</font>

62
00:03:00,150 --> 00:03:07,620
<font color="#E5E5E5">with about avoiding</font><font color="#CCCCCC"> going</font><font color="#E5E5E5"> to be</font><font color="#CCCCCC"> ok so</font>

63
00:03:04,470 --> 00:03:10,350
when we have this kind<font color="#CCCCCC"> of attacks</font><font color="#E5E5E5"> it</font>

64
00:03:07,620 --> 00:03:12,750
means that we can insert arbitrary code

65
00:03:10,350 --> 00:03:16,530
and kind of code<font color="#E5E5E5"> and we can execute this</font>

66
00:03:12,750 --> 00:03:19,890
code<font color="#CCCCCC"> okay there are different different</font>

67
00:03:16,530 --> 00:03:22,140
approaches when to avoid this kind of

68
00:03:19,890 --> 00:03:24,989
stuff we<font color="#E5E5E5"> can talk about</font><font color="#CCCCCC"> contra for</font>

69
00:03:22,140 --> 00:03:27,779
integrity<font color="#E5E5E5"> approaches type safe languages</font>

70
00:03:24,990 --> 00:03:30,240
esta cookies in<font color="#CCCCCC"> lines of all</font><font color="#E5E5E5"> words okay</font>

71
00:03:27,780 --> 00:03:32,850
or we can have<font color="#CCCCCC"> also another kind of</font>

72
00:03:30,240 --> 00:03:36,090
defense defense mechanism which<font color="#CCCCCC"> is our</font>

73
00:03:32,850 --> 00:03:39,030
to try to isolate malicious code<font color="#E5E5E5"> prior</font>

74
00:03:36,090 --> 00:03:41,250
execution for<font color="#E5E5E5"> instance</font><font color="#CCCCCC"> 19 analysis</font>

75
00:03:39,030 --> 00:03:43,980
<font color="#E5E5E5">runtime elimination</font><font color="#CCCCCC"> or writes or</font><font color="#E5E5E5"> execute</font>

76
00:03:41,250 --> 00:03:46,500
which also is known as beta execution

77
00:03:43,980 --> 00:03:51,209
prevention<font color="#CCCCCC"> I would like to recommend you</font>

78
00:03:46,500 --> 00:03:53,580
<font color="#CCCCCC">hear this paper</font><font color="#E5E5E5"> from some years ago in</font>

79
00:03:51,210 --> 00:03:57,170
<font color="#E5E5E5">which present this kind of stuff about</font>

80
00:03:53,580 --> 00:04:01,710
<font color="#E5E5E5">software memorials in a very detail way</font>

81
00:03:57,170 --> 00:04:03,929
well let me talk<font color="#E5E5E5"> a bit more about the</font>

82
00:04:01,710 --> 00:04:07,800
right to execute<font color="#CCCCCC"> right for execute is a</font>

83
00:04:03,930 --> 00:04:10,980
defense mechanism<font color="#CCCCCC"> that it's</font><font color="#E5E5E5"> very it's</font>

84
00:04:07,800 --> 00:04:12,960
widely<font color="#CCCCCC"> used actually</font><font color="#E5E5E5"> in fact almost</font>

85
00:04:10,980 --> 00:04:14,970
every current the operating system

86
00:04:12,960 --> 00:04:18,960
incorporates this<font color="#E5E5E5"> kind of defense</font>

87
00:04:14,970 --> 00:04:21,810
mechanism<font color="#E5E5E5"> not</font><font color="#CCCCCC"> even</font><font color="#E5E5E5"> the main idea of</font>

88
00:04:18,959 --> 00:04:24,659
<font color="#E5E5E5">writer execute means that the memory</font>

89
00:04:21,810 --> 00:04:27,070
pages of a process are either

90
00:04:24,660 --> 00:04:29,560
writable or executable<font color="#E5E5E5"> but</font>

91
00:04:27,070 --> 00:04:32,200
they are not both<font color="#CCCCCC"> okay so we can have</font>

92
00:04:29,560 --> 00:04:35,200
memory pages in which<font color="#E5E5E5"> I can write and I</font>

93
00:04:32,200 --> 00:04:37,479
can read<font color="#E5E5E5"> but I cannot execute okay</font>

94
00:04:35,200 --> 00:04:39,550
<font color="#E5E5E5">otherwise I can have a memory page in</font>

95
00:04:37,480 --> 00:04:44,710
which in<font color="#CCCCCC"> which I can read and</font><font color="#E5E5E5"> execute</font>

96
00:04:39,550 --> 00:04:47,710
but I cannot write<font color="#E5E5E5"> okay anyway if we</font>

97
00:04:44,710 --> 00:04:49,810
<font color="#CCCCCC">have this kind of let me know that</font><font color="#E5E5E5"> if we</font>

98
00:04:47,710 --> 00:04:52,810
have this kind<font color="#E5E5E5"> of defense mechanism</font><font color="#CCCCCC"> that</font>

99
00:04:49,810 --> 00:04:55,150
<font color="#CCCCCC">were sorry the attacker can always still</font>

100
00:04:52,810 --> 00:04:57,180
inject code<font color="#E5E5E5"> okay but the thing</font><font color="#CCCCCC"> is</font><font color="#E5E5E5"> that</font>

101
00:04:55,150 --> 00:05:03,159
<font color="#CCCCCC">this defense will prevent the execution</font>

102
00:04:57,180 --> 00:05:04,780
<font color="#E5E5E5">this is important to to be</font><font color="#CCCCCC"> note talking</font>

103
00:05:03,160 --> 00:05:07,030
<font color="#E5E5E5">about more about</font><font color="#CCCCCC"> rights for execute</font>

104
00:05:04,780 --> 00:05:09,729
there is a<font color="#CCCCCC"> harbor support</font><font color="#E5E5E5"> I don't</font><font color="#CCCCCC"> know</font>

105
00:05:07,030 --> 00:05:12,549
if you know<font color="#E5E5E5"> these terms is in</font><font color="#CCCCCC"> AMD's</font><font color="#E5E5E5"> and</font>

106
00:05:09,730 --> 00:05:15,700
neck<font color="#E5E5E5"> speed and in</font><font color="#CCCCCC"> Intel they call</font><font color="#E5E5E5"> it XD</font>

107
00:05:12,550 --> 00:05:19,140
<font color="#CCCCCC">bit</font><font color="#E5E5E5"> okay this is the harbor support for</font>

108
00:05:15,700 --> 00:05:21,940
the right to execute<font color="#E5E5E5"> in memory pages and</font>

109
00:05:19,140 --> 00:05:25,390
there is also<font color="#E5E5E5"> software support we have</font>

110
00:05:21,940 --> 00:05:29,380
in<font color="#CCCCCC"> Linux from the</font><font color="#E5E5E5"> pay X project and</font>

111
00:05:25,390 --> 00:05:31,750
which comes by the way from open BCD

112
00:05:29,380 --> 00:05:36,640
awning windows they incorporate<font color="#CCCCCC"> these</font>

113
00:05:31,750 --> 00:05:39,400
defense from<font color="#E5E5E5"> the XP sp2 onwards in</font>

114
00:05:36,640 --> 00:05:41,320
<font color="#E5E5E5">Windows right for execute our call data</font>

115
00:05:39,400 --> 00:05:43,719
execution prevention<font color="#E5E5E5"> may be you know</font>

116
00:05:41,320 --> 00:05:46,750
this this<font color="#E5E5E5"> term or okay</font><font color="#CCCCCC"> I don't know why</font>

117
00:05:43,720 --> 00:05:48,490
<font color="#E5E5E5">by windows you know guys</font><font color="#CCCCCC"> that is they</font>

118
00:05:46,750 --> 00:05:55,150
are<font color="#CCCCCC"> always renaming every thing</font>

119
00:05:48,490 --> 00:05:58,140
<font color="#CCCCCC">okay the thing is okay I have this right</font>

120
00:05:55,150 --> 00:06:04,960
<font color="#CCCCCC">to execute mechanism</font><font color="#E5E5E5"> defense</font><font color="#CCCCCC"> how can I</font>

121
00:05:58,140 --> 00:06:09,610
try to defeat this<font color="#E5E5E5"> protection okay so if</font>

122
00:06:04,960 --> 00:06:12,340
you want<font color="#E5E5E5"> to explode</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> split or memory</font>

123
00:06:09,610 --> 00:06:14,860
error<font color="#E5E5E5"> for instance</font><font color="#CCCCCC"> stack buffer overflow</font>

124
00:06:12,340 --> 00:06:16,570
<font color="#CCCCCC">it means that you want</font><font color="#E5E5E5"> to write some</font>

125
00:06:14,860 --> 00:06:18,160
stuff in the stack and<font color="#E5E5E5"> then you want</font><font color="#CCCCCC"> to</font>

126
00:06:16,570 --> 00:06:23,590
<font color="#E5E5E5">jump into the stack okay</font>

127
00:06:18,160 --> 00:06:25,360
however since<font color="#E5E5E5"> the</font><font color="#CCCCCC"> problem</font><font color="#E5E5E5"> is that is</font>

128
00:06:23,590 --> 00:06:28,619
defended with<font color="#E5E5E5"> write or execute</font>

129
00:06:25,360 --> 00:06:31,330
protection<font color="#E5E5E5"> we cannot execute</font><font color="#CCCCCC"> a</font><font color="#E5E5E5"> stack</font>

130
00:06:28,620 --> 00:06:34,600
because in the stack we can write or we

131
00:06:31,330 --> 00:06:36,550
can read but we<font color="#CCCCCC"> cannot execute because</font>

132
00:06:34,600 --> 00:06:40,930
of these<font color="#E5E5E5"> defense that</font>

133
00:06:36,550 --> 00:06:43,750
as attacker<font color="#E5E5E5"> your factory but wait a</font>

134
00:06:40,930 --> 00:06:46,090
minute<font color="#CCCCCC"> it means that let me remember</font><font color="#E5E5E5"> you</font>

135
00:06:43,750 --> 00:06:49,240
<font color="#E5E5E5">that I told</font><font color="#CCCCCC"> you that</font><font color="#E5E5E5"> you can always</font>

136
00:06:46,090 --> 00:06:51,640
<font color="#E5E5E5">inject code or inject things but you</font>

137
00:06:49,240 --> 00:06:55,720
will not<font color="#E5E5E5"> be able to exactly this is the</font>

138
00:06:51,640 --> 00:06:58,030
thing of<font color="#E5E5E5"> the</font><font color="#CCCCCC"> White Sox defense</font><font color="#E5E5E5"> so since</font>

139
00:06:55,720 --> 00:07:00,430
we can write in the<font color="#E5E5E5"> stock the thing</font>

140
00:06:58,030 --> 00:07:02,950
everything<font color="#CCCCCC"> that we want and</font><font color="#E5E5E5"> they start</font>

141
00:07:00,430 --> 00:07:04,540
let me<font color="#CCCCCC"> remember you</font><font color="#E5E5E5"> that</font><font color="#CCCCCC"> also store the</font>

142
00:07:02,950 --> 00:07:08,860
return<font color="#CCCCCC"> addresses of the control flow</font>

143
00:07:04,540 --> 00:07:09,520
<font color="#CCCCCC">okay when when I have some</font><font color="#E5E5E5"> call in in</font>

144
00:07:08,860 --> 00:07:11,380
the<font color="#E5E5E5"> program</font>

145
00:07:09,520 --> 00:07:13,659
the return address will be<font color="#CCCCCC"> storing the</font>

146
00:07:11,380 --> 00:07:16,480
stock that means that when the return

147
00:07:13,660 --> 00:07:19,120
institution is is executed the return

148
00:07:16,480 --> 00:07:21,790
address is taken from the<font color="#CCCCCC"> puppet from</font>

149
00:07:19,120 --> 00:07:22,600
the from the<font color="#CCCCCC"> staff</font><font color="#E5E5E5"> okay so since we can</font>

150
00:07:21,790 --> 00:07:27,130
write in the stock

151
00:07:22,600 --> 00:07:29,230
why can not<font color="#CCCCCC"> do we write directly into</font>

152
00:07:27,130 --> 00:07:32,409
the stock memory addresses<font color="#E5E5E5"> that point to</font>

153
00:07:29,230 --> 00:07:35,670
<font color="#E5E5E5">our really existing code can we do it</font>

154
00:07:32,410 --> 00:07:38,170
yes<font color="#E5E5E5"> this is the main concept of the Rob</font>

155
00:07:35,670 --> 00:07:40,600
<font color="#E5E5E5">attacks or return oriented programming</font>

156
00:07:38,170 --> 00:07:45,730
this means that<font color="#E5E5E5"> I'm gonna insert into</font>

157
00:07:40,600 --> 00:07:48,640
the stock just<font color="#E5E5E5"> addresses to</font><font color="#CCCCCC"> two memory</font>

158
00:07:45,730 --> 00:07:51,040
addresses<font color="#E5E5E5"> sorry I'm gonna insert into</font>

159
00:07:48,640 --> 00:07:53,500
the stock memory<font color="#E5E5E5"> Alice's of code that</font>

160
00:07:51,040 --> 00:07:56,710
<font color="#E5E5E5">already exists in the memory process</font>

161
00:07:53,500 --> 00:08:03,130
<font color="#E5E5E5">okay in the in the</font><font color="#CCCCCC"> process in memory of</font>

162
00:07:56,710 --> 00:08:05,409
the process so since these memory pages

163
00:08:03,130 --> 00:08:09,250
already<font color="#E5E5E5"> have the execution privileges it</font>

164
00:08:05,410 --> 00:08:11,260
means that these pieces<font color="#E5E5E5"> of code</font><font color="#CCCCCC"> that I'm</font>

165
00:08:09,250 --> 00:08:15,450
I'm setting into the stack will be

166
00:08:11,260 --> 00:08:18,550
executable<font color="#E5E5E5"> okay and this means</font><font color="#CCCCCC"> that</font>

167
00:08:15,450 --> 00:08:21,099
since<font color="#E5E5E5"> these pages are executable they</font>

168
00:08:18,550 --> 00:08:25,270
will not be captured<font color="#E5E5E5"> by the writes or</font>

169
00:08:21,100 --> 00:08:27,700
execute defense mechanism<font color="#E5E5E5"> okay so</font>

170
00:08:25,270 --> 00:08:31,240
roughly<font color="#CCCCCC"> speaking return-oriented</font>

171
00:08:27,700 --> 00:08:33,069
programming<font color="#E5E5E5"> allows adversary to induce a</font>

172
00:08:31,240 --> 00:08:35,919
laboratory<font color="#E5E5E5"> execution behavior while</font>

173
00:08:33,070 --> 00:08:40,210
injecting<font color="#E5E5E5"> no code okay the attacker will</font>

174
00:08:35,919 --> 00:08:46,540
use addresses of existing code in the

175
00:08:40,210 --> 00:08:47,510
process<font color="#E5E5E5"> memory so what is the</font><font color="#CCCCCC"> thing here</font>

176
00:08:46,540 --> 00:08:49,370
<font color="#CCCCCC">is that</font>

177
00:08:47,510 --> 00:08:54,110
we are talking<font color="#CCCCCC"> about for instance if</font><font color="#E5E5E5"> we</font>

178
00:08:49,370 --> 00:08:55,670
<font color="#CCCCCC">focus</font><font color="#E5E5E5"> on</font><font color="#CCCCCC"> Intel x86</font><font color="#E5E5E5"> let me remember</font><font color="#CCCCCC"> you</font>

179
00:08:54,110 --> 00:08:58,519
<font color="#E5E5E5">that the institution</font><font color="#CCCCCC"> circle architecture</font>

180
00:08:55,670 --> 00:09:02,319
has variable size<font color="#E5E5E5"> this means that if</font><font color="#CCCCCC"> we</font>

181
00:08:58,519 --> 00:09:04,790
have<font color="#E5E5E5"> an instruction</font><font color="#CCCCCC"> like this one</font><font color="#E5E5E5"> okay</font>

182
00:09:02,320 --> 00:09:06,800
<font color="#E5E5E5">this is a legitimate instruction that we</font>

183
00:09:04,790 --> 00:09:09,050
can have in our code<font color="#CCCCCC"> for</font><font color="#E5E5E5"> instance I</font>

184
00:09:06,800 --> 00:09:11,839
<font color="#E5E5E5">don't know what is doing this code but I</font>

185
00:09:09,050 --> 00:09:13,819
mean the general code but in this in

186
00:09:11,839 --> 00:09:15,680
this instruction we are setting this

187
00:09:13,820 --> 00:09:18,079
value<font color="#CCCCCC"> into this register okay</font>

188
00:09:15,680 --> 00:09:20,959
however if we start to read the<font color="#CCCCCC"> solution</font>

189
00:09:18,079 --> 00:09:24,229
<font color="#E5E5E5">instead of the this opcode in this other</font>

190
00:09:20,959 --> 00:09:26,689
<font color="#E5E5E5">one this instruction will be coming</font><font color="#CCCCCC"> this</font>

191
00:09:24,230 --> 00:09:29,779
other one okay<font color="#E5E5E5"> but note that here we</font>

192
00:09:26,690 --> 00:09:32,060
<font color="#CCCCCC">have a move instruction from eraser to</font>

193
00:09:29,779 --> 00:09:34,250
an address in memory but the good thing

194
00:09:32,060 --> 00:09:36,920
<font color="#CCCCCC">is that we have here an read instruction</font>

195
00:09:34,250 --> 00:09:39,680
our return instruction okay so this

196
00:09:36,920 --> 00:09:42,529
thing<font color="#CCCCCC"> of here is what is called</font><font color="#E5E5E5"> rob</font>

197
00:09:39,680 --> 00:09:46,839
gadget okay<font color="#E5E5E5"> this is a small piece of</font>

198
00:09:42,529 --> 00:09:51,139
code which ends in a<font color="#CCCCCC"> rata structure okay</font>

199
00:09:46,839 --> 00:09:54,829
so what kind of an attacker do is just

200
00:09:51,139 --> 00:09:57,620
to mix all these<font color="#E5E5E5"> Rob gadgets in order to</font>

201
00:09:54,829 --> 00:10:01,069
conform a rope chain<font color="#CCCCCC"> okay which is a set</font>

202
00:09:57,620 --> 00:10:03,980
of<font color="#E5E5E5"> these Rob cut yet in order</font><font color="#CCCCCC"> to do the</font>

203
00:10:01,069 --> 00:10:07,819
computation that<font color="#E5E5E5"> he wants for instance I</font>

204
00:10:03,980 --> 00:10:11,089
have<font color="#CCCCCC"> to</font><font color="#E5E5E5"> here an example</font><font color="#CCCCCC"> I mean that I</font>

205
00:10:07,819 --> 00:10:13,760
have in this addresses<font color="#E5E5E5"> these</font>

206
00:10:11,089 --> 00:10:17,690
instructions<font color="#E5E5E5"> okay what I'm doing here is</font>

207
00:10:13,760 --> 00:10:19,310
just I'm popping out a value from the

208
00:10:17,690 --> 00:10:22,519
from the<font color="#E5E5E5"> stack and I'm setting that</font>

209
00:10:19,310 --> 00:10:24,800
<font color="#E5E5E5">value this one in this case in the ECX</font>

210
00:10:22,519 --> 00:10:27,620
register and then<font color="#E5E5E5"> I'm returning so the</font>

211
00:10:24,800 --> 00:10:30,709
execution<font color="#CCCCCC"> will be written here</font><font color="#E5E5E5"> we'll get</font>

212
00:10:27,620 --> 00:10:33,490
this instruction<font color="#E5E5E5"> to see what it has to</font>

213
00:10:30,709 --> 00:10:37,069
be executed<font color="#CCCCCC"> in</font><font color="#E5E5E5"> this case it will pop up</font>

214
00:10:33,490 --> 00:10:42,050
<font color="#E5E5E5">another value into the edx register and</font>

215
00:10:37,069 --> 00:10:43,729
so far and so on<font color="#E5E5E5"> okay so this is what</font>

216
00:10:42,050 --> 00:10:45,349
the attacker will do when<font color="#CCCCCC"> we are doing</font>

217
00:10:43,730 --> 00:10:48,380
our return oriented<font color="#CCCCCC"> torah mean attack</font>

218
00:10:45,350 --> 00:10:52,220
okay<font color="#E5E5E5"> the attacker will insert this stuff</font>

219
00:10:48,380 --> 00:10:54,620
<font color="#E5E5E5">into</font><font color="#CCCCCC"> the stock let me</font><font color="#E5E5E5"> remark that the</font>

220
00:10:52,220 --> 00:10:56,750
attacker is not executing the execution

221
00:10:54,620 --> 00:10:58,520
is not<font color="#CCCCCC"> in most on the stock but on the</font>

222
00:10:56,750 --> 00:11:03,220
original

223
00:10:58,520 --> 00:11:06,470
the pieces of code of the program<font color="#CCCCCC"> okay</font>

224
00:11:03,220 --> 00:11:08,630
so as I<font color="#E5E5E5"> was</font><font color="#CCCCCC"> saying the bursary</font><font color="#E5E5E5"> will be</font>

225
00:11:06,470 --> 00:11:11,720
able<font color="#E5E5E5"> to control the order of execution</font>

226
00:11:08,630 --> 00:11:14,240
<font color="#E5E5E5">okay because once he</font><font color="#CCCCCC"> sets the Rob cut</font>

227
00:11:11,720 --> 00:11:18,650
<font color="#CCCCCC">yet he can determine how will be the</font>

228
00:11:14,240 --> 00:11:21,560
order<font color="#CCCCCC"> of resolution</font><font color="#E5E5E5"> so how can we know</font>

229
00:11:18,650 --> 00:11:23,840
in<font color="#E5E5E5"> this how can we defeat the</font><font color="#CCCCCC"> writes or</font>

230
00:11:21,560 --> 00:11:27,560
execute protection<font color="#E5E5E5"> well we can build a</font>

231
00:11:23,840 --> 00:11:30,050
rope chain to the<font color="#E5E5E5"> activity protection we</font>

232
00:11:27,560 --> 00:11:32,900
will need as an attacker<font color="#E5E5E5"> to set the CPU</font>

233
00:11:30,050 --> 00:11:35,630
registers in<font color="#E5E5E5"> first time to specific</font>

234
00:11:32,900 --> 00:11:38,569
values<font color="#CCCCCC"> and once we have this then we</font>

235
00:11:35,630 --> 00:11:41,000
<font color="#E5E5E5">need to call some system call in order</font>

236
00:11:38,570 --> 00:11:43,400
to<font color="#E5E5E5"> disable the protection</font><font color="#CCCCCC"> okay</font>

237
00:11:41,000 --> 00:11:45,950
for instance in Linux we can<font color="#CCCCCC"> do it by</font>

238
00:11:43,400 --> 00:11:49,670
<font color="#E5E5E5">executing the</font><font color="#CCCCCC"> main propped main port</font>

239
00:11:45,950 --> 00:11:53,810
Cisco or in<font color="#CCCCCC"> in windows</font><font color="#E5E5E5"> science they</font><font color="#CCCCCC"> are</font>

240
00:11:49,670 --> 00:11:56,870
very nice<font color="#E5E5E5"> they provide us this API set</font>

241
00:11:53,810 --> 00:11:58,939
the process<font color="#E5E5E5"> policy which just receives a</font>

242
00:11:56,870 --> 00:12:06,380
boolean in order to deactivate or

243
00:11:58,940 --> 00:12:08,840
activate the protection<font color="#E5E5E5"> okay</font><font color="#CCCCCC"> well let me</font>

244
00:12:06,380 --> 00:12:12,290
<font color="#E5E5E5">introduce you here</font><font color="#CCCCCC"> a tell executional</font>

245
00:12:08,840 --> 00:12:14,600
<font color="#E5E5E5">adversary power which means that the</font>

246
00:12:12,290 --> 00:12:18,530
power of the attacker or the adversary

247
00:12:14,600 --> 00:12:22,130
will be equal to what he can execute and

248
00:12:18,530 --> 00:12:25,189
this will be<font color="#CCCCCC"> determine</font><font color="#E5E5E5"> about which are</font>

249
00:12:22,130 --> 00:12:32,500
<font color="#CCCCCC">the already existing code in the process</font>

250
00:12:25,190 --> 00:12:35,000
memory<font color="#CCCCCC"> okay so here</font><font color="#E5E5E5"> we have a two-ring</font>

251
00:12:32,500 --> 00:12:37,250
let me recall you if you are not<font color="#E5E5E5"> very</font>

252
00:12:35,000 --> 00:12:39,950
<font color="#CCCCCC">computed two very related to</font><font color="#E5E5E5"> computer</font>

253
00:12:37,250 --> 00:12:43,190
<font color="#E5E5E5">science that the chartering hypothesis</font>

254
00:12:39,950 --> 00:12:45,110
tell us that<font color="#E5E5E5"> any real-world computation</font>

255
00:12:43,190 --> 00:12:46,700
<font color="#E5E5E5">can</font><font color="#CCCCCC"> be translated</font><font color="#E5E5E5"> into an equivalent</font>

256
00:12:45,110 --> 00:12:54,890
competition involving a Turing machine

257
00:12:46,700 --> 00:12:59,540
<font color="#CCCCCC">ok this was said by ok</font>

258
00:12:54,890 --> 00:13:07,160
so considering these<font color="#E5E5E5"> hypothesis we think</font>

259
00:12:59,540 --> 00:13:10,069
<font color="#E5E5E5">that if we can find any kind of Rob</font>

260
00:13:07,160 --> 00:13:12,020
gadget<font color="#E5E5E5"> that implements all the</font>

261
00:13:10,070 --> 00:13:13,970
operations of

262
00:13:12,020 --> 00:13:15,860
- imagine<font color="#E5E5E5"> that means that the</font><font color="#CCCCCC"> attacker</font>

263
00:13:13,970 --> 00:13:21,170
will be able<font color="#CCCCCC"> to do whatever he wants</font>

264
00:13:15,860 --> 00:13:24,380
<font color="#E5E5E5">okay</font><font color="#CCCCCC"> we can build a type of Turing</font>

265
00:13:21,170 --> 00:13:25,939
machine<font color="#CCCCCC"> is a more specifically it's a</font>

266
00:13:24,380 --> 00:13:27,620
random access machine that performs

267
00:13:25,940 --> 00:13:30,710
active equivalent<font color="#E5E5E5"> computation as the</font>

268
00:13:27,620 --> 00:13:32,380
<font color="#E5E5E5">ones perform a routine so what are the</font>

269
00:13:30,710 --> 00:13:35,540
operations in a random access machine

270
00:13:32,380 --> 00:13:37,640
<font color="#E5E5E5">are just these ones</font><font color="#CCCCCC"> wrote</font><font color="#E5E5E5"> a</font><font color="#CCCCCC"> concern</font><font color="#E5E5E5"> into</font>

271
00:13:35,540 --> 00:13:39,589
<font color="#CCCCCC">a register move</font><font color="#E5E5E5"> edges to another</font>

272
00:13:37,640 --> 00:13:42,050
<font color="#CCCCCC">register load the</font><font color="#E5E5E5"> value from memory</font>

273
00:13:39,590 --> 00:13:45,560
<font color="#E5E5E5">store</font><font color="#CCCCCC"> evolved into memory</font><font color="#E5E5E5"> the add and</font>

274
00:13:42,050 --> 00:13:48,050
subtract the logic operations<font color="#CCCCCC"> okay</font><font color="#E5E5E5"> by</font>

275
00:13:45,560 --> 00:13:50,359
the way by the<font color="#CCCCCC"> moral laws we only need</font>

276
00:13:48,050 --> 00:13:53,329
<font color="#E5E5E5">one of these set plus another one of</font>

277
00:13:50,360 --> 00:13:57,350
<font color="#CCCCCC">these set</font><font color="#E5E5E5"> okay and also we need to</font>

278
00:13:53,330 --> 00:13:59,810
<font color="#E5E5E5">perform</font><font color="#CCCCCC"> conditional branches so with all</font>

279
00:13:57,350 --> 00:14:05,630
these operations<font color="#CCCCCC"> we are able to simulate</font>

280
00:13:59,810 --> 00:14:09,079
<font color="#E5E5E5">any kind of real algorithm okay so or</font>

281
00:14:05,630 --> 00:14:11,510
work<font color="#E5E5E5"> hypothesis in this work was well if</font>

282
00:14:09,080 --> 00:14:14,240
we<font color="#E5E5E5"> are able to find at least a single</font>

283
00:14:11,510 --> 00:14:16,819
<font color="#E5E5E5">rope got it for each one</font><font color="#CCCCCC"> of those</font>

284
00:14:14,240 --> 00:14:20,050
operations<font color="#CCCCCC"> then it</font><font color="#E5E5E5"> means that we can</font>

285
00:14:16,820 --> 00:14:22,460
solve<font color="#E5E5E5"> any computational problem okay</font>

286
00:14:20,050 --> 00:14:24,709
well the random access machine

287
00:14:22,460 --> 00:14:26,660
operations<font color="#CCCCCC"> reminded</font><font color="#E5E5E5"> us</font><font color="#CCCCCC"> of perish</font><font color="#E5E5E5"> as from</font>

288
00:14:24,710 --> 00:14:29,150
<font color="#E5E5E5">practice can be for</font><font color="#CCCCCC"> instance this one</font><font color="#E5E5E5"> of</font>

289
00:14:26,660 --> 00:14:31,880
here so here we have like<font color="#E5E5E5"> four different</font>

290
00:14:29,150 --> 00:14:34,010
<font color="#CCCCCC">Rob gadgets but</font><font color="#E5E5E5"> let me tell you</font><font color="#CCCCCC"> that</font>

291
00:14:31,880 --> 00:14:36,410
every one<font color="#CCCCCC"> of these are implementing the</font>

292
00:14:34,010 --> 00:14:39,170
same operations<font color="#E5E5E5"> okay each one of these</font>

293
00:14:36,410 --> 00:14:41,449
are implementing a move operation<font color="#CCCCCC"> okay a</font>

294
00:14:39,170 --> 00:14:45,680
<font color="#E5E5E5">semantics in semantic way they are</font>

295
00:14:41,450 --> 00:14:48,790
implementing a move operation<font color="#E5E5E5"> okay I'm</font>

296
00:14:45,680 --> 00:14:50,870
<font color="#E5E5E5">gonna I'm not gonna further on the</font>

297
00:14:48,790 --> 00:14:57,290
assembly<font color="#CCCCCC"> instructions if you want to</font>

298
00:14:50,870 --> 00:14:59,060
discuss later so considering this we

299
00:14:57,290 --> 00:15:02,540
<font color="#E5E5E5">would like to evaluate the exact</font>

300
00:14:59,060 --> 00:15:04,400
<font color="#E5E5E5">regional adversary power</font><font color="#CCCCCC"> okay as main</font>

301
00:15:02,540 --> 00:15:06,800
contributions in this<font color="#E5E5E5"> work we</font><font color="#CCCCCC"> have</font>

302
00:15:04,400 --> 00:15:09,800
<font color="#E5E5E5">develop at all a tool which is a</font><font color="#CCCCCC"> rope</font>

303
00:15:06,800 --> 00:15:12,890
which takes as input a binary<font color="#CCCCCC"> plus</font>

304
00:15:09,800 --> 00:15:14,930
<font color="#CCCCCC">rope chain</font><font color="#E5E5E5"> as specify as as the</font>

305
00:15:12,890 --> 00:15:17,630
operations that<font color="#E5E5E5"> we</font><font color="#CCCCCC"> have seen before</font><font color="#E5E5E5"> in a</font>

306
00:15:14,930 --> 00:15:21,020
text file<font color="#E5E5E5"> and as output tool will</font><font color="#CCCCCC"> give</font>

307
00:15:17,630 --> 00:15:22,319
you directly the<font color="#E5E5E5"> there DARAB</font><font color="#CCCCCC"> cutters to</font>

308
00:15:21,020 --> 00:15:25,739
implement

309
00:15:22,319 --> 00:15:27,660
repeating once we have<font color="#E5E5E5"> developed this</font>

310
00:15:25,739 --> 00:15:30,089
tool we have<font color="#E5E5E5"> applied this tool to</font>

311
00:15:27,660 --> 00:15:33,389
evaluate<font color="#E5E5E5"> the</font><font color="#CCCCCC"> executioner adversary power</font>

312
00:15:30,089 --> 00:15:34,679
in Windows<font color="#E5E5E5"> since we know</font><font color="#CCCCCC"> the steel are</font>

313
00:15:33,389 --> 00:15:38,610
the predominant

314
00:15:34,679 --> 00:15:40,230
part from<font color="#CCCCCC"> for attacks</font><font color="#E5E5E5"> occurs and we have</font>

315
00:15:38,610 --> 00:15:44,910
considered Windows in different flavors

316
00:15:40,230 --> 00:15:47,279
from 32<font color="#CCCCCC"> to 64 bits</font><font color="#E5E5E5"> and I will also show</font>

317
00:15:44,910 --> 00:15:49,980
<font color="#CCCCCC">you how</font><font color="#E5E5E5"> to apply the tool in</font><font color="#CCCCCC"> order to</font>

318
00:15:47,279 --> 00:15:50,910
generate a rope chain<font color="#E5E5E5"> for spreading a</font>

319
00:15:49,980 --> 00:15:56,009
real vulnerability

320
00:15:50,910 --> 00:15:57,868
okay<font color="#E5E5E5"> well regarding the - let me -</font><font color="#CCCCCC"> let</font>

321
00:15:56,009 --> 00:16:02,100
me<font color="#E5E5E5"> tell you that we have developed it</font>

322
00:15:57,869 --> 00:16:07,230
with Python or main<font color="#CCCCCC"> idea was</font><font color="#E5E5E5"> to make the</font>

323
00:16:02,100 --> 00:16:08,790
tool multi-platform and the main idea

324
00:16:07,230 --> 00:16:11,329
behind the tool was also to try to

325
00:16:08,790 --> 00:16:14,279
automate the construction of rope chains

326
00:16:11,329 --> 00:16:18,799
just allowing<font color="#E5E5E5"> the user to specify the</font>

327
00:16:14,279 --> 00:16:22,739
rope chain as<font color="#CCCCCC"> during operations okay and</font>

328
00:16:18,799 --> 00:16:24,269
one of our main was also to try to make

329
00:16:22,739 --> 00:16:28,879
the tool in order<font color="#CCCCCC"> to allow extension</font>

330
00:16:24,269 --> 00:16:31,709
<font color="#E5E5E5">okay</font><font color="#CCCCCC"> currently or to</font><font color="#E5E5E5"> just support</font>

331
00:16:28,879 --> 00:16:37,529
<font color="#E5E5E5">Windows binaries but is very</font><font color="#CCCCCC"> easy to</font>

332
00:16:31,709 --> 00:16:39,508
<font color="#E5E5E5">extend it to</font><font color="#CCCCCC"> another another</font><font color="#E5E5E5"> platform we</font>

333
00:16:37,529 --> 00:16:41,850
have<font color="#CCCCCC"> also developed the</font><font color="#E5E5E5"> tool not only</font>

334
00:16:39,509 --> 00:16:44,040
considering the<font color="#CCCCCC"> tyrrhene operations or</font>

335
00:16:41,850 --> 00:16:46,499
<font color="#CCCCCC">the random access machine operations but</font>

336
00:16:44,040 --> 00:16:50,309
<font color="#E5E5E5">also user-defined operations</font><font color="#CCCCCC"> okay we</font>

337
00:16:46,499 --> 00:16:53,549
allow the<font color="#E5E5E5"> user to define which operation</font>

338
00:16:50,309 --> 00:16:55,199
he needs and once is fine it he can use

339
00:16:53,549 --> 00:17:00,389
the tool in order<font color="#E5E5E5"> to</font><font color="#CCCCCC"> find the</font><font color="#E5E5E5"> Rope cut</font>

340
00:16:55,199 --> 00:17:07,049
<font color="#CCCCCC">its so we have used Python</font><font color="#E5E5E5"> 3 instead</font><font color="#CCCCCC"> of</font>

341
00:17:00,389 --> 00:17:09,990
<font color="#E5E5E5">Pi 2 and we also have used capstone this</font>

342
00:17:07,049 --> 00:17:12,898
<font color="#E5E5E5">assembly finger in fact our tool is part</font>

343
00:17:09,990 --> 00:17:17,638
of the<font color="#E5E5E5"> capstone so cases in the</font><font color="#CCCCCC"> on the</font>

344
00:17:12,898 --> 00:17:19,648
website<font color="#E5E5E5"> of capstone and well for the</font>

345
00:17:17,638 --> 00:17:21,629
<font color="#CCCCCC">user-defined operation some for defining</font>

346
00:17:19,648 --> 00:17:26,549
the<font color="#E5E5E5"> dream machine operations we have</font>

347
00:17:21,630 --> 00:17:29,010
used<font color="#CCCCCC"> XML maybe it's a VTOL but we are</font>

348
00:17:26,549 --> 00:17:31,100
still working<font color="#E5E5E5"> on it</font>

349
00:17:29,010 --> 00:17:33,510
guarding their autumn attention of the

350
00:17:31,100 --> 00:17:35,820
of the creation of the<font color="#E5E5E5"> rope chains</font>

351
00:17:33,510 --> 00:17:38,400
consider<font color="#CCCCCC"> that we have</font><font color="#E5E5E5"> for</font><font color="#CCCCCC"> instance</font><font color="#E5E5E5"> do</font>

352
00:17:35,820 --> 00:17:41,820
you want for instance<font color="#E5E5E5"> to create</font><font color="#CCCCCC"> a rope</font>

353
00:17:38,400 --> 00:17:44,700
chain with with this<font color="#E5E5E5"> operation so I mean</font>

354
00:17:41,820 --> 00:17:47,669
to load a constant in the ECX register

355
00:17:44,700 --> 00:17:50,460
to load a concern in the<font color="#CCCCCC"> edx register to</font>

356
00:17:47,670 --> 00:17:54,450
move<font color="#E5E5E5"> the value that i</font><font color="#CCCCCC"> have in ECX to</font>

357
00:17:50,460 --> 00:17:56,220
another register<font color="#CCCCCC"> right 3</font><font color="#E5E5E5"> it means this</font>

358
00:17:54,450 --> 00:17:58,410
<font color="#E5E5E5">is a mask</font><font color="#CCCCCC"> it could be any kind</font><font color="#E5E5E5"> of</font>

359
00:17:56,220 --> 00:18:02,280
register<font color="#E5E5E5"> I don't care about the register</font>

360
00:17:58,410 --> 00:18:08,070
<font color="#E5E5E5">and then to move from that register to</font>

361
00:18:02,280 --> 00:18:10,889
another register<font color="#CCCCCC"> ok again a</font><font color="#E5E5E5"> mask</font><font color="#CCCCCC"> so if</font>

362
00:18:08,070 --> 00:18:14,520
we<font color="#E5E5E5"> execute the Europe with this chain we</font>

363
00:18:10,890 --> 00:18:17,880
can<font color="#CCCCCC"> get for instance this kind of stuff</font>

364
00:18:14,520 --> 00:18:20,610
<font color="#CCCCCC">okay</font><font color="#E5E5E5"> here we have the load constant in</font>

365
00:18:17,880 --> 00:18:24,330
ECX register here we have the load

366
00:18:20,610 --> 00:18:29,040
concern in<font color="#CCCCCC"> EDS register and here we have</font>

367
00:18:24,330 --> 00:18:32,810
the move to our rack 3 register in this

368
00:18:29,040 --> 00:18:33,930
case the tool consider<font color="#E5E5E5"> red</font><font color="#CCCCCC"> rag</font><font color="#E5E5E5"> 3 like</font>

369
00:18:32,810 --> 00:18:37,470
<font color="#CCCCCC">eax</font>

370
00:18:33,930 --> 00:18:41,280
<font color="#CCCCCC">ah here we</font><font color="#E5E5E5"> have again from the</font><font color="#CCCCCC"> referee</font>

371
00:18:37,470 --> 00:18:42,150
<font color="#CCCCCC">to another rack form ok in this case EBX</font>

372
00:18:41,280 --> 00:18:46,820
<font color="#CCCCCC">ok</font>

373
00:18:42,150 --> 00:18:50,490
everything is just don't<font color="#E5E5E5"> buy the</font><font color="#CCCCCC"> beta 2</font>

374
00:18:46,820 --> 00:18:54,320
so besides<font color="#E5E5E5"> doing this stuff</font><font color="#CCCCCC"> as i was</font>

375
00:18:50,490 --> 00:18:58,980
telling<font color="#E5E5E5"> you the tool or solos to define</font>

376
00:18:54,320 --> 00:19:00,030
the allow the user to define his own

377
00:18:58,980 --> 00:19:06,170
operations

378
00:19:00,030 --> 00:19:06,170
<font color="#CCCCCC">ok</font><font color="#E5E5E5"> we have used</font><font color="#CCCCCC"> xml so we have fun</font><font color="#E5E5E5"> DTD</font>

379
00:19:07,070 --> 00:19:14,970
file in which we define who has to be

380
00:19:10,020 --> 00:19:17,700
<font color="#E5E5E5">the who has to be every operation</font><font color="#CCCCCC"> ok</font><font color="#E5E5E5"> so</font>

381
00:19:14,970 --> 00:19:19,590
in this case here is the defining<font color="#E5E5E5"> for</font>

382
00:19:17,700 --> 00:19:22,320
instance how we can make a move

383
00:19:19,590 --> 00:19:25,290
operation<font color="#CCCCCC"> ok</font><font color="#E5E5E5"> so we can do a move</font>

384
00:19:22,320 --> 00:19:27,510
operation by clearing a register and

385
00:19:25,290 --> 00:19:31,260
<font color="#E5E5E5">once we have the register then we can</font>

386
00:19:27,510 --> 00:19:34,170
add to that register<font color="#E5E5E5"> another register ok</font>

387
00:19:31,260 --> 00:19:38,640
that<font color="#E5E5E5"> means it's a given</font><font color="#CCCCCC"> into a move</font>

388
00:19:34,170 --> 00:19:42,300
operation<font color="#CCCCCC"> the tool was real a release</font>

389
00:19:38,640 --> 00:19:47,130
<font color="#E5E5E5">under GPL version 3 license is Sunday</font>

390
00:19:42,300 --> 00:19:50,909
so he will<font color="#CCCCCC"> have</font><font color="#E5E5E5"> you have the URL</font><font color="#CCCCCC"> I have</font>

391
00:19:47,130 --> 00:19:55,410
already given<font color="#E5E5E5"> the slides to Dylan so I</font>

392
00:19:50,910 --> 00:20:00,060
think<font color="#E5E5E5"> that it will</font><font color="#CCCCCC"> be online</font><font color="#E5E5E5"> well</font>

393
00:19:55,410 --> 00:20:06,020
regarding the valuation or<font color="#CCCCCC"> idea was to</font>

394
00:20:00,060 --> 00:20:09,780
try to<font color="#CCCCCC"> search for at least one</font><font color="#E5E5E5"> of every</font>

395
00:20:06,020 --> 00:20:12,770
at least one<font color="#CCCCCC"> row budget for every</font><font color="#E5E5E5"> random</font>

396
00:20:09,780 --> 00:20:16,320
access machine operations<font color="#CCCCCC"> okay so</font>

397
00:20:12,770 --> 00:20:19,889
considering<font color="#CCCCCC"> Windows</font><font color="#E5E5E5"> we have used the a</font>

398
00:20:16,320 --> 00:20:22,070
subset of the<font color="#E5E5E5"> non del</font><font color="#CCCCCC"> L dll's</font><font color="#E5E5E5"> or Windows</font>

399
00:20:19,890 --> 00:20:26,400
object which is in<font color="#CCCCCC"> this case is a</font>

400
00:20:22,070 --> 00:20:29,280
<font color="#E5E5E5">internal operating system object in</font>

401
00:20:26,400 --> 00:20:31,490
which which contains the most used

402
00:20:29,280 --> 00:20:34,379
system dll's

403
00:20:31,490 --> 00:20:36,830
from these ones we have taken all<font color="#CCCCCC"> of</font>

404
00:20:34,380 --> 00:20:39,660
these ones which are under all criteria

405
00:20:36,830 --> 00:20:42,300
<font color="#E5E5E5">the most common ones when we</font><font color="#CCCCCC"> are</font>

406
00:20:39,660 --> 00:20:44,760
<font color="#E5E5E5">developing on the when we have an</font>

407
00:20:42,300 --> 00:20:48,300
<font color="#E5E5E5">application developed with Windows</font><font color="#CCCCCC"> and</font>

408
00:20:44,760 --> 00:20:52,620
we have also<font color="#E5E5E5"> consider this other</font><font color="#CCCCCC"> dll</font>

409
00:20:48,300 --> 00:20:54,330
which is<font color="#CCCCCC"> always loaded with Windows</font>

410
00:20:52,620 --> 00:20:55,290
because it's part of the windows image

411
00:20:54,330 --> 00:20:57,540
<font color="#CCCCCC">loader okay</font>

412
00:20:55,290 --> 00:21:01,560
it's part of the thing in Windows that

413
00:20:57,540 --> 00:21:06,840
allows to execute that<font color="#CCCCCC"> puts on memory</font>

414
00:21:01,560 --> 00:21:09,810
every every single<font color="#E5E5E5"> binary as test</font>

415
00:21:06,840 --> 00:21:13,740
environment we use personal computer

416
00:21:09,810 --> 00:21:17,820
plus the<font color="#CCCCCC"> built well</font><font color="#E5E5E5"> box so we create</font>

417
00:21:13,740 --> 00:21:21,330
recreate<font color="#CCCCCC"> 8 built on machines</font><font color="#E5E5E5"> from</font>

418
00:21:17,820 --> 00:21:25,080
<font color="#E5E5E5">Windows XP to Windows 7 8 1 and windows</font>

419
00:21:21,330 --> 00:21:28,169
<font color="#E5E5E5">10 education in both 50 to 64 bits I'm</font>

420
00:21:25,080 --> 00:21:30,620
sorry for the<font color="#E5E5E5"> Vista</font><font color="#CCCCCC"> lower</font><font color="#E5E5E5"> guys that we</font>

421
00:21:28,170 --> 00:21:35,220
haven't considered<font color="#E5E5E5"> it</font><font color="#CCCCCC"> ok</font>

422
00:21:30,620 --> 00:21:40,560
well regarding the evaluation this<font color="#E5E5E5"> is</font>

423
00:21:35,220 --> 00:21:44,640
what we got<font color="#E5E5E5"> if we consider this</font><font color="#CCCCCC"> DLL</font>

424
00:21:40,560 --> 00:21:48,360
which<font color="#CCCCCC"> is which deals with everything</font>

425
00:21:44,640 --> 00:21:50,520
<font color="#CCCCCC">related to to shell for using shell from</font>

426
00:21:48,360 --> 00:21:54,969
<font color="#CCCCCC">the front application from application</font>

427
00:21:50,520 --> 00:21:58,900
<font color="#E5E5E5">plus ntdll</font><font color="#CCCCCC"> or current 52</font>

428
00:21:54,970 --> 00:22:00,730
we have enough<font color="#E5E5E5"> gadgets to conform every</font>

429
00:21:58,900 --> 00:22:03,039
one of<font color="#E5E5E5"> the random access machine</font>

430
00:22:00,730 --> 00:22:06,010
operations that<font color="#E5E5E5"> I have told you before</font>

431
00:22:03,039 --> 00:22:10,120
<font color="#E5E5E5">okay that means that if we</font><font color="#CCCCCC"> have a</font>

432
00:22:06,010 --> 00:22:12,908
process which has<font color="#E5E5E5"> this DLL loaded into</font>

433
00:22:10,120 --> 00:22:14,739
the<font color="#CCCCCC"> memory</font><font color="#E5E5E5"> and this process</font><font color="#CCCCCC"> has this</font>

434
00:22:12,909 --> 00:22:17,140
problem<font color="#E5E5E5"> has some kind of vulnerability</font>

435
00:22:14,740 --> 00:22:20,020
<font color="#E5E5E5">that we can exploit in order to execute</font>

436
00:22:17,140 --> 00:22:26,830
arbitrary code that means<font color="#E5E5E5"> that we could</font>

437
00:22:20,020 --> 00:22:28,809
execute<font color="#E5E5E5"> whatever we want okay if we do</font>

438
00:22:26,830 --> 00:22:33,149
not consider<font color="#CCCCCC"> the</font><font color="#E5E5E5"> conditional branches</font>

439
00:22:28,809 --> 00:22:34,990
<font color="#CCCCCC">just with the ntdll</font><font color="#E5E5E5"> we are able to do</font>

440
00:22:33,150 --> 00:22:40,240
whatever we want

441
00:22:34,990 --> 00:22:43,450
okay let<font color="#CCCCCC"> me tell you that in when we do</font>

442
00:22:40,240 --> 00:22:45,100
we did this research<font color="#CCCCCC"> we define the</font>

443
00:22:43,450 --> 00:22:49,480
conditional branches<font color="#E5E5E5"> in</font><font color="#CCCCCC"> a in a specific</font>

444
00:22:45,100 --> 00:22:51,760
way which is not very complete<font color="#E5E5E5"> let me</font>

445
00:22:49,480 --> 00:22:54,220
say in<font color="#E5E5E5"> that way okay so we could even</font>

446
00:22:51,760 --> 00:22:56,620
extend the definition<font color="#CCCCCC"> of how the</font>

447
00:22:54,220 --> 00:22:59,380
conditional branches can<font color="#E5E5E5"> be</font><font color="#CCCCCC"> done with</font>

448
00:22:56,620 --> 00:23:02,789
Rob<font color="#E5E5E5"> concedes in that case if we</font><font color="#CCCCCC"> are able</font>

449
00:22:59,380 --> 00:23:04,960
<font color="#CCCCCC">to extend</font><font color="#E5E5E5"> this definition</font><font color="#CCCCCC"> we could have</font>

450
00:23:02,789 --> 00:23:06,940
better results<font color="#E5E5E5"> okay</font>

451
00:23:04,960 --> 00:23:09,789
we could find for instance that just

452
00:23:06,940 --> 00:23:14,500
with a single<font color="#CCCCCC"> dll we can do whatever we</font>

453
00:23:09,789 --> 00:23:16,090
<font color="#E5E5E5">want so regarding the</font><font color="#CCCCCC"> cases study</font><font color="#E5E5E5"> I have</font>

454
00:23:14,500 --> 00:23:21,460
used this vulnerability<font color="#CCCCCC"> this</font>

455
00:23:16,090 --> 00:23:23,379
vulnerability<font color="#E5E5E5"> CVA 2010 3 3 3 3 it's a</font>

456
00:23:21,460 --> 00:23:25,630
Microsoft<font color="#E5E5E5"> Office vulnerability that</font>

457
00:23:23,380 --> 00:23:31,690
affected to almost all the suite<font color="#CCCCCC"> of</font>

458
00:23:25,630 --> 00:23:34,049
Microsoft Office<font color="#CCCCCC"> from the XP to the it</font>

459
00:23:31,690 --> 00:23:37,240
<font color="#E5E5E5">was his</font><font color="#CCCCCC"> closes in September 2010 and</font>

460
00:23:34,049 --> 00:23:40,900
patch it in a bit<font color="#CCCCCC"> later ok in November</font>

461
00:23:37,240 --> 00:23:43,659
<font color="#CCCCCC">in the same</font><font color="#E5E5E5"> year the thing is that</font><font color="#CCCCCC"> disap</font>

462
00:23:40,900 --> 00:23:47,289
this vulnerability<font color="#E5E5E5"> was used in the 2012</font>

463
00:23:43,659 --> 00:23:49,260
to attack the NATO Special Operations

464
00:23:47,289 --> 00:23:53,070
headquarters

465
00:23:49,260 --> 00:23:56,110
<font color="#CCCCCC">the attack was delivered by</font><font color="#E5E5E5"> spearfishing</font>

466
00:23:53,070 --> 00:24:01,389
<font color="#E5E5E5">attaching into the email</font><font color="#CCCCCC"> just</font><font color="#E5E5E5"> crafted</font>

467
00:23:56,110 --> 00:24:02,770
file namely<font color="#E5E5E5"> an active file that was</font>

468
00:24:01,390 --> 00:24:04,020
<font color="#CCCCCC">exploiting this vulnerability a</font>

469
00:24:02,770 --> 00:24:06,700
narrative

470
00:24:04,020 --> 00:24:10,629
<font color="#CCCCCC">file is just</font><font color="#E5E5E5"> up</font>

471
00:24:06,700 --> 00:24:14,350
like this one<font color="#E5E5E5"> yeah okay</font><font color="#CCCCCC"> so we have a lot</font>

472
00:24:10,629 --> 00:24:18,488
of text stuff<font color="#E5E5E5"> in close by brackets okay</font>

473
00:24:14,350 --> 00:24:22,359
and in particularly the vulnerability

474
00:24:18,489 --> 00:24:28,629
<font color="#E5E5E5">was exploited using this this attribute</font>

475
00:24:22,359 --> 00:24:30,850
of the of the RTF specification<font color="#E5E5E5"> so let</font>

476
00:24:28,629 --> 00:24:36,549
me tell you that<font color="#E5E5E5"> well we have</font><font color="#CCCCCC"> like two</font>

477
00:24:30,850 --> 00:24:43,019
years<font color="#E5E5E5"> right from the pad to the attack</font>

478
00:24:36,549 --> 00:24:45,129
so please update<font color="#E5E5E5"> it's free almost well</font>

479
00:24:43,019 --> 00:24:46,659
let<font color="#CCCCCC"> me</font><font color="#E5E5E5"> tell you a bit</font><font color="#CCCCCC"> more about this</font>

480
00:24:45,129 --> 00:24:50,199
vulnerability this<font color="#E5E5E5"> vulnerability is a</font>

481
00:24:46,659 --> 00:24:52,720
<font color="#E5E5E5">stack-based</font><font color="#CCCCCC"> by a buffer overflow in a</font>

482
00:24:50,200 --> 00:24:56,080
function<font color="#E5E5E5"> okay which was in chair of</font>

483
00:24:52,720 --> 00:24:59,139
parsing the RTF file for<font color="#CCCCCC"> instance</font>

484
00:24:56,080 --> 00:25:02,189
consider<font color="#E5E5E5"> that we</font><font color="#CCCCCC"> have this dll</font><font color="#E5E5E5"> which is</font>

485
00:24:59,139 --> 00:25:07,539
the one that is suitable this version

486
00:25:02,190 --> 00:25:11,799
from<font color="#CCCCCC"> the Microsoft Office 2003 in one</font>

487
00:25:07,539 --> 00:25:14,139
part of the<font color="#E5E5E5"> RTF parser we have this code</font>

488
00:25:11,799 --> 00:25:18,908
in which we have a call to<font color="#CCCCCC"> this other</font>

489
00:25:14,139 --> 00:25:22,059
function<font color="#E5E5E5"> okay here what they are doing</font>

490
00:25:18,909 --> 00:25:24,879
is just<font color="#CCCCCC"> mem</font><font color="#E5E5E5"> copy is like an inline main</font>

491
00:25:22,059 --> 00:25:32,529
copy<font color="#E5E5E5"> okay and the thing is that in this</font>

492
00:25:24,879 --> 00:25:34,570
in<font color="#CCCCCC"> lineman copy</font><font color="#E5E5E5"> we have here in this</font>

493
00:25:32,529 --> 00:25:39,039
institution<font color="#CCCCCC"> he's doing the buffer</font>

494
00:25:34,570 --> 00:25:43,178
<font color="#CCCCCC">overflow</font><font color="#E5E5E5"> okay so if the attacker is can</font>

495
00:25:39,039 --> 00:25:46,059
build an RTF file after file with some

496
00:25:43,179 --> 00:25:48,429
specific values in<font color="#E5E5E5"> this in these</font>

497
00:25:46,059 --> 00:25:51,220
attributes<font color="#E5E5E5"> he is</font><font color="#CCCCCC"> able</font><font color="#E5E5E5"> to exploit this</font>

498
00:25:48,429 --> 00:25:56,559
<font color="#CCCCCC">vulnerability</font><font color="#E5E5E5"> okay which is just a</font>

499
00:25:51,220 --> 00:25:59,799
buffer overflow so how we<font color="#E5E5E5"> can build our</font>

500
00:25:56,559 --> 00:26:03,399
rope chain in Windows consider we have<font color="#CCCCCC"> a</font>

501
00:25:59,799 --> 00:26:05,559
Windows<font color="#E5E5E5"> 7 in which we have activated</font><font color="#CCCCCC"> we</font>

502
00:26:03,399 --> 00:26:09,699
<font color="#E5E5E5">emit we have activated the data</font>

503
00:26:05,559 --> 00:26:11,649
execution prevention<font color="#E5E5E5"> defense policy in</font>

504
00:26:09,700 --> 00:26:14,350
<font color="#CCCCCC">that case we need to call to</font><font color="#E5E5E5"> this</font>

505
00:26:11,649 --> 00:26:17,279
function<font color="#E5E5E5"> set process</font><font color="#CCCCCC"> the policy that as</font>

506
00:26:14,350 --> 00:26:20,230
you see it will receive just a flag

507
00:26:17,279 --> 00:26:22,670
informing that

508
00:26:20,230 --> 00:26:26,030
boolean flag<font color="#E5E5E5"> true or false you</font><font color="#CCCCCC"> know</font><font color="#E5E5E5"> that</font>

509
00:26:22,670 --> 00:26:27,700
if you want to enable<font color="#E5E5E5"> or disable</font><font color="#CCCCCC"> the</font><font color="#E5E5E5"> let</font>

510
00:26:26,030 --> 00:26:31,490
the<font color="#CCCCCC"> policy</font><font color="#E5E5E5"> okay</font>

511
00:26:27,700 --> 00:26:33,500
so consider that<font color="#E5E5E5"> we know the function</font>

512
00:26:31,490 --> 00:26:35,870
address<font color="#E5E5E5"> okay because</font><font color="#CCCCCC"> there are some</font>

513
00:26:33,500 --> 00:26:38,450
other memory leak on the<font color="#CCCCCC"> on the on the</font>

514
00:26:35,870 --> 00:26:40,459
<font color="#E5E5E5">program or we have some other kind of</font>

515
00:26:38,450 --> 00:26:43,280
stuff<font color="#E5E5E5"> running</font><font color="#CCCCCC"> on the victim and then we</font>

516
00:26:40,460 --> 00:26:46,429
can know this kind of<font color="#E5E5E5"> stuff</font><font color="#CCCCCC"> so what we</font>

517
00:26:43,280 --> 00:26:49,610
are going<font color="#E5E5E5"> to do is just to build</font><font color="#CCCCCC"> a</font><font color="#E5E5E5"> shell</font>

518
00:26:46,429 --> 00:26:53,919
<font color="#E5E5E5">code in order to prepare the registers</font>

519
00:26:49,610 --> 00:26:56,928
and call this<font color="#CCCCCC"> function in order to</font>

520
00:26:53,919 --> 00:26:59,990
disable the protection<font color="#E5E5E5"> okay so I'm doing</font>

521
00:26:56,929 --> 00:27:02,510
<font color="#E5E5E5">I'm going</font><font color="#CCCCCC"> to do it just using</font><font color="#E5E5E5"> the Prasad</font>

522
00:26:59,990 --> 00:27:06,169
institution which<font color="#CCCCCC"> is a instruction from</font>

523
00:27:02,510 --> 00:27:09,320
<font color="#E5E5E5">the Intel set architecture that allow</font><font color="#CCCCCC"> us</font>

524
00:27:06,169 --> 00:27:14,809
<font color="#CCCCCC">to insert every one of</font><font color="#E5E5E5"> the registers</font>

525
00:27:09,320 --> 00:27:18,110
into the stock<font color="#CCCCCC"> okay in this order my Rob</font>

526
00:27:14,809 --> 00:27:23,178
chain will need to set the registers in

527
00:27:18,110 --> 00:27:25,850
this way<font color="#E5E5E5"> okay and after execution</font><font color="#CCCCCC"> the</font>

528
00:27:23,179 --> 00:27:32,179
execution<font color="#E5E5E5"> of</font><font color="#CCCCCC"> this</font><font color="#E5E5E5"> instruction</font><font color="#CCCCCC"> I will</font>

529
00:27:25,850 --> 00:27:37,668
have on the<font color="#CCCCCC"> stack this thing</font><font color="#E5E5E5"> okay so</font>

530
00:27:32,179 --> 00:27:40,610
once I do<font color="#E5E5E5"> everything let me note</font><font color="#CCCCCC"> okay so</font>

531
00:27:37,669 --> 00:27:41,540
I will need a<font color="#E5E5E5"> this is a will be a nope</font>

532
00:27:40,610 --> 00:27:44,449
nope

533
00:27:41,540 --> 00:27:47,750
okay they are<font color="#CCCCCC"> will need to load a</font>

534
00:27:44,450 --> 00:27:50,720
constant in<font color="#E5E5E5"> Eddy load a constant in the</font>

535
00:27:47,750 --> 00:27:54,049
<font color="#CCCCCC">SC register load constant</font><font color="#E5E5E5"> in</font><font color="#CCCCCC"> EBX</font>

536
00:27:50,720 --> 00:27:56,660
register<font color="#CCCCCC"> loader concerning EVF register</font>

537
00:27:54,049 --> 00:27:58,668
<font color="#E5E5E5">and then the pushin okay let me let me</font>

538
00:27:56,660 --> 00:28:01,190
<font color="#CCCCCC">tell</font><font color="#E5E5E5"> you for</font><font color="#CCCCCC"> instance all</font><font color="#E5E5E5"> of these are</font>

539
00:27:58,669 --> 00:28:02,540
these four institutions<font color="#CCCCCC"> are random</font>

540
00:28:01,190 --> 00:28:05,960
access machine operation however

541
00:28:02,540 --> 00:28:09,139
<font color="#E5E5E5">disorders are not random access machine</font>

542
00:28:05,960 --> 00:28:12,860
but user-defined operations<font color="#CCCCCC"> okay so I</font>

543
00:28:09,140 --> 00:28:17,510
have this definition<font color="#CCCCCC"> I go through my the</font>

544
00:28:12,860 --> 00:28:20,479
tool directly<font color="#E5E5E5"> using the own file which</font>

545
00:28:17,510 --> 00:28:22,940
is vulnerable<font color="#CCCCCC"> because it is not per se</font>

546
00:28:20,480 --> 00:28:25,730
<font color="#CCCCCC">it's not</font><font color="#E5E5E5"> producing neither with</font><font color="#CCCCCC"> the ESL</font>

547
00:28:22,940 --> 00:28:28,309
<font color="#E5E5E5">ER so we can also use</font><font color="#CCCCCC"> that because</font><font color="#E5E5E5"> all</font>

548
00:28:25,730 --> 00:28:30,860
the memory<font color="#E5E5E5"> addresses are fixed and then</font>

549
00:28:28,309 --> 00:28:32,330
if we<font color="#CCCCCC"> execute the tool we will see that</font>

550
00:28:30,860 --> 00:28:36,080
it takes around<font color="#CCCCCC"> two</font>

551
00:28:32,330 --> 00:28:41,509
<font color="#E5E5E5">one</font><font color="#CCCCCC"> Milton a bit okay</font><font color="#E5E5E5"> and it will give</font>

552
00:28:36,080 --> 00:28:43,728
us this<font color="#E5E5E5"> okay let</font><font color="#CCCCCC"> me do it so consider</font>

553
00:28:41,509 --> 00:28:45,499
<font color="#CCCCCC">that we have</font><font color="#E5E5E5"> for</font><font color="#CCCCCC"> instance</font><font color="#E5E5E5"> disruption</font>

554
00:28:43,729 --> 00:28:50,509
which is the one that I was telling<font color="#E5E5E5"> you</font>

555
00:28:45,499 --> 00:28:52,399
you see okay yeah okay so I'm gonna

556
00:28:50,509 --> 00:28:56,869
execute the tool<font color="#E5E5E5"> and I'm gonna say well</font>

557
00:28:52,399 --> 00:28:59,089
get the<font color="#CCCCCC"> msl dll build a robotic which is</font>

558
00:28:56,869 --> 00:29:01,968
purify on that file<font color="#CCCCCC"> okay which is the</font>

559
00:28:59,089 --> 00:29:05,450
one that<font color="#E5E5E5"> I have just show you and try to</font>

560
00:29:01,969 --> 00:29:07,279
<font color="#E5E5E5">avoid the jump destructions that ends in</font>

561
00:29:05,450 --> 00:29:10,820
a jump and institutions<font color="#CCCCCC"> that</font><font color="#E5E5E5"> ends in our</font>

562
00:29:07,279 --> 00:29:14,450
fire<font color="#E5E5E5"> return and death to means that I</font>

563
00:29:10,820 --> 00:29:19,218
want<font color="#CCCCCC"> just</font><font color="#E5E5E5"> gadgets with two bytes okay I</font>

564
00:29:14,450 --> 00:29:24,619
<font color="#E5E5E5">don't want</font><font color="#CCCCCC"> larger rope cards</font><font color="#E5E5E5"> so I can</font>

565
00:29:19,219 --> 00:29:28,940
execute it<font color="#E5E5E5"> fingers</font><font color="#CCCCCC"> cross in the meantime</font>

566
00:29:24,619 --> 00:29:31,820
<font color="#E5E5E5">let me also show you the okay I have</font>

567
00:29:28,940 --> 00:29:37,389
here a Windows machine<font color="#CCCCCC"> with some</font>

568
00:29:31,820 --> 00:29:37,389
personal stuff<font color="#E5E5E5"> here we have a dirty file</font>

569
00:29:37,659 --> 00:29:56,570
okay so you<font color="#E5E5E5"> seasonal RTF file okay and</font>

570
00:29:44,169 --> 00:29:58,789
if we open<font color="#CCCCCC"> the file</font><font color="#E5E5E5"> so you see this is</font>

571
00:29:56,570 --> 00:30:01,879
the content<font color="#E5E5E5"> of the file is just an RTF</font>

572
00:29:58,789 --> 00:30:04,729
file with a lot<font color="#CCCCCC"> of stuff</font><font color="#E5E5E5"> okay</font><font color="#CCCCCC"> and here</font>

573
00:30:01,879 --> 00:30:08,478
we have our<font color="#E5E5E5"> shellcode okay</font><font color="#CCCCCC"> here we</font><font color="#E5E5E5"> have</font>

574
00:30:04,729 --> 00:30:11,629
the padding to the<font color="#E5E5E5"> padding</font><font color="#CCCCCC"> we will have</font>

575
00:30:08,479 --> 00:30:13,759
the instructions that<font color="#E5E5E5"> we will get from</font>

576
00:30:11,629 --> 00:30:21,408
<font color="#E5E5E5">the addresses that we will get from</font><font color="#CCCCCC"> the</font>

577
00:30:13,759 --> 00:30:23,450
<font color="#CCCCCC">EC rope</font><font color="#E5E5E5"> okay so this is an RTF file let</font>

578
00:30:21,409 --> 00:30:25,639
me tell you that<font color="#E5E5E5"> I have</font><font color="#CCCCCC"> also omit</font>

579
00:30:23,450 --> 00:30:28,070
<font color="#E5E5E5">installing this machine as you see the</font>

580
00:30:25,639 --> 00:30:30,498
text<font color="#E5E5E5"> even prevention is always on it</font>

581
00:30:28,070 --> 00:30:35,570
means that it is installed<font color="#E5E5E5"> it's</font>

582
00:30:30,499 --> 00:30:37,849
activated<font color="#CCCCCC"> okay and if we just execute</font>

583
00:30:35,570 --> 00:30:41,029
the<font color="#CCCCCC"> the file let me minimize</font><font color="#E5E5E5"> all these</font>

584
00:30:37,849 --> 00:30:44,239
windows if I just execute the file have

585
00:30:41,029 --> 00:30:45,500
you seen something<font color="#E5E5E5"> strange well this is</font>

586
00:30:44,239 --> 00:30:47,960
<font color="#CCCCCC">a</font><font color="#E5E5E5"> typical stuff right</font>

587
00:30:45,500 --> 00:30:50,390
<font color="#CCCCCC">I have just</font><font color="#E5E5E5"> executed I have just</font><font color="#CCCCCC"> Papa</font>

588
00:30:47,960 --> 00:30:53,660
<font color="#CCCCCC">the</font><font color="#E5E5E5"> Hulk</font><font color="#CCCCCC"> okay</font><font color="#E5E5E5"> if we check with the</font>

589
00:30:50,390 --> 00:30:56,780
hacker process<font color="#E5E5E5"> you will</font><font color="#CCCCCC"> see that the</font>

590
00:30:53,660 --> 00:30:59,240
parent of the calc<font color="#E5E5E5"> are they win the war</font>

591
00:30:56,780 --> 00:31:02,899
so that<font color="#E5E5E5"> means that it was launched by</font>

592
00:30:59,240 --> 00:31:07,520
the world<font color="#CCCCCC"> a</font><font color="#E5E5E5"> Microsoft Word program</font><font color="#CCCCCC"> okay</font>

593
00:31:02,900 --> 00:31:14,270
and of course is<font color="#CCCCCC"> completely functional</font>

594
00:31:07,520 --> 00:31:17,180
<font color="#CCCCCC">okay this is the execution</font><font color="#E5E5E5"> of the issue</font>

595
00:31:14,270 --> 00:31:19,340
<font color="#CCCCCC">rob</font><font color="#E5E5E5"> has already finished</font><font color="#CCCCCC"> as</font><font color="#E5E5E5"> you see it</font>

596
00:31:17,180 --> 00:31:21,950
takes like<font color="#E5E5E5"> around one minute in my</font><font color="#CCCCCC"> in</font><font color="#E5E5E5"> my</font>

597
00:31:19,340 --> 00:31:23,659
<font color="#E5E5E5">laptop</font><font color="#CCCCCC"> okay</font><font color="#E5E5E5"> and it will give you for</font>

598
00:31:21,950 --> 00:31:26,690
every<font color="#CCCCCC"> one of</font><font color="#E5E5E5"> the Rob cut yet that you</font>

599
00:31:23,660 --> 00:31:28,730
have a<font color="#CCCCCC"> specify</font><font color="#E5E5E5"> and the possibilities</font>

600
00:31:26,690 --> 00:31:32,330
that<font color="#CCCCCC"> you have in this case in this dll</font>

601
00:31:28,730 --> 00:31:34,670
<font color="#CCCCCC">we have only these dis</font><font color="#E5E5E5"> possibilities if</font>

602
00:31:32,330 --> 00:31:36,889
you try<font color="#E5E5E5"> with some</font><font color="#CCCCCC"> other you will find</font>

603
00:31:34,670 --> 00:31:44,360
<font color="#CCCCCC">that you can also exploit with some</font>

604
00:31:36,890 --> 00:31:46,790
other dealer well<font color="#E5E5E5"> we have developed this</font>

605
00:31:44,360 --> 00:31:48,590
tool which allow us<font color="#CCCCCC"> to</font><font color="#E5E5E5"> automate the</font>

606
00:31:46,790 --> 00:31:51,560
construction of the rope chain<font color="#E5E5E5"> specify</font>

607
00:31:48,590 --> 00:31:54,050
<font color="#E5E5E5">astronauts machine operations</font><font color="#CCCCCC"> it also</font>

608
00:31:51,560 --> 00:31:57,310
allows the<font color="#CCCCCC"> user to specify its own</font>

609
00:31:54,050 --> 00:31:59,240
operations<font color="#E5E5E5"> and we have evaluated the</font>

610
00:31:57,310 --> 00:32:03,919
execution<font color="#CCCCCC"> our adversary powering</font>

611
00:31:59,240 --> 00:32:07,460
<font color="#E5E5E5">different</font><font color="#CCCCCC"> Windows OS okay we have found</font>

612
00:32:03,920 --> 00:32:10,880
that the power is<font color="#E5E5E5"> more powerful in 32</font>

613
00:32:07,460 --> 00:32:13,820
bits done in 64 bits and that if we

614
00:32:10,880 --> 00:32:17,180
consider<font color="#CCCCCC"> only this DLL</font><font color="#E5E5E5"> plus some of the</font>

615
00:32:13,820 --> 00:32:20,270
the<font color="#E5E5E5"> other set we can have everything</font><font color="#CCCCCC"> we</font>

616
00:32:17,180 --> 00:32:23,870
can<font color="#CCCCCC"> perform any</font><font color="#E5E5E5"> kind of machine run</font>

617
00:32:20,270 --> 00:32:25,790
<font color="#CCCCCC">Markie's machine operations ok and this</font>

618
00:32:23,870 --> 00:32:28,719
<font color="#E5E5E5">is</font><font color="#CCCCCC"> all that I</font><font color="#E5E5E5"> have to tell you so thank</font>

619
00:32:25,790 --> 00:32:28,720
<font color="#E5E5E5">you for your</font>

620
00:32:31,779 --> 00:32:38,360
Thank<font color="#E5E5E5"> You Ricardo</font><font color="#CCCCCC"> we've got time for</font>

621
00:32:35,149 --> 00:32:40,010
<font color="#CCCCCC">just one</font><font color="#E5E5E5"> question</font><font color="#CCCCCC"> otherwise no you were</font>

622
00:32:38,360 --> 00:32:42,879
actually<font color="#E5E5E5"> the first</font><font color="#CCCCCC"> one and</font><font color="#E5E5E5"> the only one</font>

623
00:32:40,010 --> 00:32:42,879
<font color="#CCCCCC">I guess let</font><font color="#E5E5E5"> me go</font>

624
00:32:44,019 --> 00:32:48,230
we can share<font color="#E5E5E5"> we share we make</font><font color="#CCCCCC"> a half</font>

625
00:32:46,580 --> 00:32:51,320
<font color="#E5E5E5">question of question yeah</font>

626
00:32:48,230 --> 00:32:54,830
so I saw I saw<font color="#CCCCCC"> I said tables over was a</font>

627
00:32:51,320 --> 00:32:56,750
<font color="#CCCCCC">table where we've</font><font color="#E5E5E5"> acts and I mean we</font>

628
00:32:54,830 --> 00:32:58,070
<font color="#E5E5E5">refer to beat a 64-bit for a for</font>

629
00:32:56,750 --> 00:33:00,490
operating<font color="#E5E5E5"> systems</font><font color="#CCCCCC"> but you didn't</font>

630
00:32:58,070 --> 00:33:04,879
describe it<font color="#CCCCCC"> all</font><font color="#E5E5E5"> right be a</font><font color="#CCCCCC"> Miss it</font>

631
00:33:00,490 --> 00:33:07,250
somewhere in<font color="#E5E5E5"> the</font><font color="#CCCCCC"> middle like one</font><font color="#E5E5E5"> yeah oh</font>

632
00:33:04,880 --> 00:33:11,029
yeah sorry<font color="#CCCCCC"> sorry I forgot here's where</font>

633
00:33:07,250 --> 00:33:12,950
we find<font color="#E5E5E5"> enough gadgets for performing</font>

634
00:33:11,029 --> 00:33:15,830
all<font color="#CCCCCC"> of</font><font color="#E5E5E5"> the operations and the cross</font>

635
00:33:12,950 --> 00:33:18,260
means that we have<font color="#E5E5E5"> some failures</font><font color="#CCCCCC"> in fact</font>

636
00:33:15,830 --> 00:33:19,970
in all these crosses the only<font color="#E5E5E5"> failure</font>

637
00:33:18,260 --> 00:33:21,649
that we have is the conditional branches

638
00:33:19,970 --> 00:33:24,080
we are not able to<font color="#E5E5E5"> find the conditional</font>

639
00:33:21,649 --> 00:33:26,418
branches<font color="#E5E5E5"> but as I was telling</font><font color="#CCCCCC"> but I</font>

640
00:33:24,080 --> 00:33:28,610
forgot<font color="#E5E5E5"> to tell Thank You Larry is that</font>

641
00:33:26,419 --> 00:33:31,190
the main<font color="#CCCCCC"> problem is</font><font color="#E5E5E5"> that the conditional</font>

642
00:33:28,610 --> 00:33:34,399
branches was specified<font color="#E5E5E5"> in a very</font>

643
00:33:31,190 --> 00:33:38,269
specific<font color="#E5E5E5"> way so we need to try to look</font>

644
00:33:34,399 --> 00:33:40,129
for<font color="#CCCCCC"> a more general</font><font color="#E5E5E5"> way to describe how</font>

645
00:33:38,269 --> 00:33:42,500
to perform conditional branches<font color="#E5E5E5"> second</font>

646
00:33:40,130 --> 00:33:44,269
<font color="#E5E5E5">half same side thank you</font>

647
00:33:42,500 --> 00:33:46,039
second half of the question same side

648
00:33:44,269 --> 00:33:47,750
did you for this for searching<font color="#E5E5E5"> the</font>

649
00:33:46,039 --> 00:33:53,570
wrapping edges<font color="#E5E5E5"> limit the size of the</font>

650
00:33:47,750 --> 00:33:55,039
gadgets as well because because<font color="#CCCCCC"> if you</font>

651
00:33:53,570 --> 00:33:57,830
limited<font color="#E5E5E5"> to</font><font color="#CCCCCC"> two bytes or</font><font color="#E5E5E5"> something</font><font color="#CCCCCC"> they</font>

652
00:33:55,039 --> 00:34:01,129
<font color="#CCCCCC">no no no no they there are</font><font color="#E5E5E5"> some kind of</font>

653
00:33:57,830 --> 00:34:03,769
<font color="#E5E5E5">no it was not</font><font color="#CCCCCC"> limited not limited okay</font>

654
00:34:01,130 --> 00:34:05,330
<font color="#E5E5E5">so with side effects as well like this</font>

655
00:34:03,769 --> 00:34:07,519
is the only the other thing that<font color="#E5E5E5"> I think</font>

656
00:34:05,330 --> 00:34:11,540
<font color="#E5E5E5">I forgot</font><font color="#CCCCCC"> to tell to put on these</font><font color="#E5E5E5"> slides</font>

657
00:34:07,519 --> 00:34:13,609
<font color="#E5E5E5">now that you told me yes as future work</font>

658
00:34:11,540 --> 00:34:16,129
we need<font color="#E5E5E5"> to work on the on the side</font>

659
00:34:13,609 --> 00:34:17,598
effects of the of the of the gadgets

660
00:34:16,129 --> 00:34:19,609
<font color="#CCCCCC">okay</font><font color="#E5E5E5"> this is one of the things that we</font>

661
00:34:17,599 --> 00:34:23,060
need to<font color="#CCCCCC"> deal with thank you perfect</font>

662
00:34:19,609 --> 00:34:25,839
thank you<font color="#E5E5E5"> okay there you can see that</font>

663
00:34:23,060 --> 00:34:28,580
our audience is feel still very sharp

664
00:34:25,839 --> 00:34:31,299
<font color="#E5E5E5">even</font><font color="#CCCCCC"> after maybe</font><font color="#E5E5E5"> yesterday evening well</font>

665
00:34:28,580 --> 00:34:31,299
thanks<font color="#CCCCCC"> very much</font>

