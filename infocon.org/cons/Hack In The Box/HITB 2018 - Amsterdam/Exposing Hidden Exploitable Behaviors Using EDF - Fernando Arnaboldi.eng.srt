1
00:00:12,950 --> 00:00:18,689
thank you for coming so we're here for

2
00:00:16,560 --> 00:00:20,939
exposing<font color="#E5E5E5"> hiding exploitable behaviors</font>

3
00:00:18,690 --> 00:00:23,970
using<font color="#E5E5E5"> extend the differential fussing I</font>

4
00:00:20,939 --> 00:00:26,369
know<font color="#CCCCCC"> it's a weird</font><font color="#E5E5E5"> name for</font><font color="#CCCCCC"> the talk it</font>

5
00:00:23,970 --> 00:00:28,890
is<font color="#E5E5E5"> almost the second time that I'm given</font>

6
00:00:26,369 --> 00:00:30,539
this the first time was<font color="#CCCCCC"> in</font><font color="#E5E5E5"> blackhat when</font>

7
00:00:28,890 --> 00:00:34,649
I presented in black had the idea was to

8
00:00:30,539 --> 00:00:36,149
<font color="#CCCCCC">show that the idea work but it was not</font>

9
00:00:34,649 --> 00:00:38,010
important what I<font color="#E5E5E5"> showed there what I</font>

10
00:00:36,149 --> 00:00:42,480
what I believe is really important is

11
00:00:38,010 --> 00:00:44,879
the<font color="#CCCCCC"> idea behind</font><font color="#E5E5E5"> of what I found so for</font>

12
00:00:42,480 --> 00:00:46,739
me the the<font color="#E5E5E5"> best outcome of this talk</font>

13
00:00:44,879 --> 00:00:49,769
would<font color="#E5E5E5"> be that you can either use</font><font color="#CCCCCC"> the</font>

14
00:00:46,739 --> 00:00:51,570
<font color="#E5E5E5">Bulls that I show in the past or now</font><font color="#CCCCCC"> you</font>

15
00:00:49,770 --> 00:00:53,219
can<font color="#E5E5E5"> either use the ideas that I'm</font><font color="#CCCCCC"> going</font>

16
00:00:51,570 --> 00:00:55,980
to<font color="#E5E5E5"> share now or you can either use the</font>

17
00:00:53,219 --> 00:00:59,219
tool<font color="#CCCCCC"> but the idea</font><font color="#E5E5E5"> is</font><font color="#CCCCCC"> that it's all about</font>

18
00:00:55,980 --> 00:01:01,319
<font color="#E5E5E5">what you can do with this so we'll be</font>

19
00:00:59,219 --> 00:01:04,379
talking a little bit<font color="#E5E5E5"> about what this is</font>

20
00:01:01,320 --> 00:01:05,369
<font color="#E5E5E5">who may use it how you can use it</font><font color="#CCCCCC"> that's</font>

21
00:01:04,379 --> 00:01:08,790
the tricky part

22
00:01:05,369 --> 00:01:11,420
and why you may<font color="#CCCCCC"> want to use this</font><font color="#E5E5E5"> I'll</font>

23
00:01:08,790 --> 00:01:13,439
talk a little<font color="#CCCCCC"> bit about common flossing</font>

24
00:01:11,420 --> 00:01:15,420
one of the things that I like about

25
00:01:13,439 --> 00:01:18,449
<font color="#E5E5E5">hacking the box is</font><font color="#CCCCCC"> that there are a lot</font>

26
00:01:15,420 --> 00:01:20,189
<font color="#CCCCCC">of people doing fasting in here</font><font color="#E5E5E5"> and this</font>

27
00:01:18,450 --> 00:01:21,049
is<font color="#E5E5E5"> what they're commonly</font><font color="#CCCCCC"> focused on and</font>

28
00:01:20,189 --> 00:01:22,919
that's<font color="#CCCCCC"> okay</font>

29
00:01:21,049 --> 00:01:24,990
but there are also other possibilities

30
00:01:22,920 --> 00:01:26,759
<font color="#CCCCCC">when it comes to differential fussing</font>

31
00:01:24,990 --> 00:01:29,220
differential is going to mean that<font color="#E5E5E5"> you</font>

32
00:01:26,759 --> 00:01:33,390
will be<font color="#E5E5E5"> comparing stuff to find new</font>

33
00:01:29,220 --> 00:01:35,250
vulnerabilities<font color="#CCCCCC"> and the idea on top of</font>

34
00:01:33,390 --> 00:01:36,960
the differential<font color="#CCCCCC"> forcing is the extended</font>

35
00:01:35,250 --> 00:01:40,320
<font color="#E5E5E5">deformation elastic we will try to find</font>

36
00:01:36,960 --> 00:01:44,429
<font color="#CCCCCC">even more issues</font><font color="#E5E5E5"> what we are comparing</font>

37
00:01:40,320 --> 00:01:46,770
things so everybody knows that<font color="#E5E5E5"> when</font>

38
00:01:44,430 --> 00:01:48,899
we're forcing something<font color="#E5E5E5"> the idea</font><font color="#CCCCCC"> is that</font>

39
00:01:46,770 --> 00:01:52,560
<font color="#CCCCCC">we'll be disclosing</font><font color="#E5E5E5"> things that</font>

40
00:01:48,899 --> 00:01:55,200
shouldn't<font color="#E5E5E5"> be there</font><font color="#CCCCCC"> um</font><font color="#E5E5E5"> one of</font><font color="#CCCCCC"> my</font><font color="#E5E5E5"> main</font>

41
00:01:52,560 --> 00:01:56,880
goals<font color="#E5E5E5"> was</font><font color="#CCCCCC"> to show that there were</font>

42
00:01:55,200 --> 00:01:58,229
unexpected behaviors in programming

43
00:01:56,880 --> 00:02:01,259
<font color="#E5E5E5">languages the first time that I show</font>

44
00:01:58,229 --> 00:02:03,030
this but<font color="#E5E5E5"> the</font><font color="#CCCCCC"> idea is that you can also</font>

45
00:02:01,259 --> 00:02:05,369
<font color="#E5E5E5">find weird functionalities when you're</font>

46
00:02:03,030 --> 00:02:06,869
fussing things<font color="#E5E5E5"> or you may even</font><font color="#CCCCCC"> crash the</font>

47
00:02:05,369 --> 00:02:10,919
software<font color="#E5E5E5"> and then go for memory</font>

48
00:02:06,869 --> 00:02:12,660
corruption box and so on when<font color="#CCCCCC"> using</font>

49
00:02:10,919 --> 00:02:13,950
<font color="#CCCCCC">extend the differential</font><font color="#E5E5E5"> fussing the idea</font>

50
00:02:12,660 --> 00:02:15,810
is<font color="#CCCCCC"> that you will</font><font color="#E5E5E5"> be able to</font>

51
00:02:13,950 --> 00:02:18,660
even more vulnerable<font color="#E5E5E5"> it is</font><font color="#CCCCCC"> a wider range</font>

52
00:02:15,810 --> 00:02:22,680
of issues<font color="#CCCCCC"> to try</font><font color="#E5E5E5"> to exploit a wider</font>

53
00:02:18,660 --> 00:02:25,230
range<font color="#E5E5E5"> of targets so there</font><font color="#CCCCCC"> are three</font>

54
00:02:22,680 --> 00:02:27,150
possibilities when<font color="#E5E5E5"> it comes to fussing</font>

55
00:02:25,230 --> 00:02:29,609
you're<font color="#E5E5E5"> eating are a security consultant</font>

56
00:02:27,150 --> 00:02:32,310
<font color="#CCCCCC">and someone is asking you</font><font color="#E5E5E5"> to fast a</font>

57
00:02:29,610 --> 00:02:34,019
piece of software<font color="#E5E5E5"> either</font><font color="#CCCCCC"> your testing</font>

58
00:02:32,310 --> 00:02:35,700
software and sometimes this<font color="#E5E5E5"> is</font>

59
00:02:34,019 --> 00:02:38,370
<font color="#CCCCCC">interesting because you can</font><font color="#E5E5E5"> apply</font>

60
00:02:35,700 --> 00:02:40,560
<font color="#E5E5E5">differential fussing with one just one</font>

61
00:02:38,370 --> 00:02:42,840
single<font color="#E5E5E5"> piece</font><font color="#CCCCCC"> of</font><font color="#E5E5E5"> software</font><font color="#CCCCCC"> or you're a</font>

62
00:02:40,560 --> 00:02:44,250
developer and<font color="#E5E5E5"> you want to see how your</font>

63
00:02:42,840 --> 00:02:47,910
software compares to other pieces of

64
00:02:44,250 --> 00:02:50,819
<font color="#E5E5E5">software so there are two ways</font><font color="#CCCCCC"> you can</font>

65
00:02:47,910 --> 00:02:53,700
do<font color="#CCCCCC"> this the first time</font><font color="#E5E5E5"> that I started</font>

66
00:02:50,819 --> 00:02:57,268
<font color="#CCCCCC">doing this was manually and it's painful</font>

67
00:02:53,700 --> 00:02:58,709
I was trying manual tests and multiple

68
00:02:57,269 --> 00:03:02,790
pieces of software trying to find

69
00:02:58,709 --> 00:03:05,069
differences<font color="#E5E5E5"> this was five years</font><font color="#CCCCCC"> ago when</font>

70
00:03:02,790 --> 00:03:08,548
I was testing XML and<font color="#CCCCCC"> XSLT which is a</font>

71
00:03:05,069 --> 00:03:12,828
programming language related to XML<font color="#E5E5E5"> um I</font>

72
00:03:08,549 --> 00:03:18,600
found<font color="#E5E5E5"> a series of</font><font color="#CCCCCC"> high-risk issues</font>

73
00:03:12,829 --> 00:03:21,600
including<font color="#CCCCCC"> things related to numbers to</font>

74
00:03:18,600 --> 00:03:23,549
random functions to violating<font color="#E5E5E5"> the</font>

75
00:03:21,600 --> 00:03:27,180
<font color="#E5E5E5">same-origin policy which still</font><font color="#CCCCCC"> works in</font>

76
00:03:23,549 --> 00:03:29,579
<font color="#CCCCCC">safari</font><font color="#E5E5E5"> until now and that was all done</font>

77
00:03:27,180 --> 00:03:31,139
manually<font color="#E5E5E5"> and what I was doing</font><font color="#CCCCCC"> to know</font>

78
00:03:29,579 --> 00:03:32,850
that these<font color="#E5E5E5"> things were over there was</font>

79
00:03:31,139 --> 00:03:34,650
comparing by other pieces<font color="#CCCCCC"> of software</font>

80
00:03:32,850 --> 00:03:37,410
<font color="#E5E5E5">because I didn't know if they were</font><font color="#CCCCCC"> over</font>

81
00:03:34,650 --> 00:03:39,840
there<font color="#E5E5E5"> not after</font><font color="#CCCCCC"> I gave the</font><font color="#E5E5E5"> presentation</font>

82
00:03:37,410 --> 00:03:42,450
<font color="#E5E5E5">I realized that I I needed something</font>

83
00:03:39,840 --> 00:03:44,660
more reversed<font color="#E5E5E5"> or more complex to try</font><font color="#CCCCCC"> in</font>

84
00:03:42,450 --> 00:03:48,480
<font color="#E5E5E5">multiple pieces</font><font color="#CCCCCC"> of software</font><font color="#E5E5E5"> it at once</font>

85
00:03:44,660 --> 00:03:50,100
<font color="#E5E5E5">so I started working on</font><font color="#CCCCCC"> a on a framework</font>

86
00:03:48,480 --> 00:03:52,410
that it was<font color="#E5E5E5"> originally meant for</font>

87
00:03:50,100 --> 00:03:54,870
<font color="#E5E5E5">JavaScript the moment that I wrote for</font>

88
00:03:52,410 --> 00:03:57,060
<font color="#E5E5E5">JavaScript I realized</font><font color="#CCCCCC"> this</font><font color="#E5E5E5"> idea is</font>

89
00:03:54,870 --> 00:03:58,560
absurd<font color="#CCCCCC"> I don't want to</font><font color="#E5E5E5"> just this one</font>

90
00:03:57,060 --> 00:04:00,750
<font color="#E5E5E5">programming</font><font color="#CCCCCC"> language I want to create a</font>

91
00:03:58,560 --> 00:04:02,940
framework because<font color="#CCCCCC"> they want</font><font color="#E5E5E5"> to compare</font>

92
00:04:00,750 --> 00:04:04,829
different<font color="#CCCCCC"> programming languages</font><font color="#E5E5E5"> and if</font>

93
00:04:02,940 --> 00:04:09,540
I'm<font color="#CCCCCC"> able to</font><font color="#E5E5E5"> do</font><font color="#CCCCCC"> this</font><font color="#E5E5E5"> I</font><font color="#CCCCCC"> I can scale it to</font>

94
00:04:04,829 --> 00:04:12,150
<font color="#E5E5E5">tilt any kind of software so I did</font>

95
00:04:09,540 --> 00:04:13,590
<font color="#E5E5E5">something in Python and I started</font>

96
00:04:12,150 --> 00:04:16,500
testing<font color="#E5E5E5"> this in multiple operating</font>

97
00:04:13,590 --> 00:04:20,180
systems<font color="#CCCCCC"> to gather a</font><font color="#E5E5E5"> lot of different</font>

98
00:04:16,500 --> 00:04:22,340
information standard<font color="#CCCCCC"> output error</font><font color="#E5E5E5"> etc</font>

99
00:04:20,180 --> 00:04:27,050
and expose the unexpected behaviors<font color="#E5E5E5"> that</font>

100
00:04:22,340 --> 00:04:29,599
she could find<font color="#E5E5E5"> so the thing</font><font color="#CCCCCC"> is the</font>

101
00:04:27,050 --> 00:04:31,789
fussing process<font color="#E5E5E5"> would we hear all the</font>

102
00:04:29,600 --> 00:04:34,009
<font color="#CCCCCC">time in here</font><font color="#E5E5E5"> in hoc in the</font><font color="#CCCCCC"> Box</font><font color="#E5E5E5"> is how</font>

103
00:04:31,789 --> 00:04:37,969
they generate<font color="#E5E5E5"> the input this is where</font>

104
00:04:34,009 --> 00:04:40,720
<font color="#E5E5E5">all the</font><font color="#CCCCCC"> fosters focus or the tools</font><font color="#E5E5E5"> that</font>

105
00:04:37,970 --> 00:04:42,979
aid the<font color="#CCCCCC"> Fosters what's the idea here</font>

106
00:04:40,720 --> 00:04:44,570
the idea is<font color="#CCCCCC"> that you will be generating</font>

107
00:04:42,979 --> 00:04:45,859
<font color="#CCCCCC">an input</font><font color="#E5E5E5"> that is going to cause</font>

108
00:04:44,570 --> 00:04:48,380
something<font color="#E5E5E5"> malicious on a piece of</font>

109
00:04:45,860 --> 00:04:50,600
software<font color="#E5E5E5"> that's the main thing about</font>

110
00:04:48,380 --> 00:04:53,659
fussing the input is absolutely

111
00:04:50,600 --> 00:04:55,759
important<font color="#E5E5E5"> and</font><font color="#CCCCCC"> monitoring what I did is I</font>

112
00:04:53,660 --> 00:04:58,099
didn't<font color="#E5E5E5"> focus on this</font><font color="#CCCCCC"> I try to keep the</font>

113
00:04:55,759 --> 00:05:00,440
test cases as simple as possible<font color="#CCCCCC"> when it</font>

114
00:04:58,099 --> 00:05:03,110
came to the input to try to see<font color="#E5E5E5"> what I</font>

115
00:05:00,440 --> 00:05:04,699
could<font color="#E5E5E5"> do with the</font><font color="#CCCCCC"> output</font><font color="#E5E5E5"> before getting</font>

116
00:05:03,110 --> 00:05:07,610
over there<font color="#E5E5E5"> you need to execute the</font>

117
00:05:04,699 --> 00:05:09,500
software<font color="#E5E5E5"> so you grab an input you</font><font color="#CCCCCC"> put it</font>

118
00:05:07,610 --> 00:05:13,970
<font color="#E5E5E5">into a piece</font><font color="#CCCCCC"> of software and then you</font>

119
00:05:09,500 --> 00:05:16,490
check the output<font color="#E5E5E5"> the idea is these</font>

120
00:05:13,970 --> 00:05:20,030
<font color="#E5E5E5">foster focus mainly on what</font><font color="#CCCCCC"> can you do</font>

121
00:05:16,490 --> 00:05:23,930
with that<font color="#E5E5E5"> output I'll tell a</font><font color="#CCCCCC"> little bit</font>

122
00:05:20,030 --> 00:05:25,510
how we when I do that<font color="#E5E5E5"> so the only way</font>

123
00:05:23,930 --> 00:05:28,820
that<font color="#E5E5E5"> you can compare information</font>

124
00:05:25,510 --> 00:05:31,070
<font color="#CCCCCC">reasonably is with the</font><font color="#E5E5E5"> database so I</font>

125
00:05:28,820 --> 00:05:34,789
have a collection of some<font color="#CCCCCC"> certain</font>

126
00:05:31,070 --> 00:05:36,260
databases to have an idea of what can

127
00:05:34,789 --> 00:05:39,650
you test what can you do so I<font color="#E5E5E5"> grab a</font>

128
00:05:36,260 --> 00:05:43,430
copy of a plain database<font color="#E5E5E5"> and I create a</font>

129
00:05:39,650 --> 00:05:45,500
sample function that it has nothing<font color="#CCCCCC"> in</font>

130
00:05:43,430 --> 00:05:47,990
it<font color="#CCCCCC"> it has chose the</font><font color="#E5E5E5"> test meta keyword</font>

131
00:05:45,500 --> 00:05:52,610
the test meta key will<font color="#CCCCCC"> be replaced by</font>

132
00:05:47,990 --> 00:05:55,400
<font color="#CCCCCC">the values defining here the function</font>

133
00:05:52,610 --> 00:05:57,380
for<font color="#CCCCCC"> example could</font><font color="#E5E5E5"> be if we're</font><font color="#CCCCCC"> talking</font>

134
00:05:55,400 --> 00:06:00,049
<font color="#E5E5E5">about JavaScript</font><font color="#CCCCCC"> would</font><font color="#E5E5E5"> be alert if we're</font>

135
00:05:57,380 --> 00:06:02,570
talking<font color="#E5E5E5"> about Python eco it could be</font>

136
00:06:00,050 --> 00:06:05,750
system doesn't matter<font color="#E5E5E5"> or it could be a</font>

137
00:06:02,570 --> 00:06:08,389
big chunk of of an mp3 file for example

138
00:06:05,750 --> 00:06:10,460
<font color="#E5E5E5">where you</font><font color="#CCCCCC"> can put the the test meta</font>

139
00:06:08,389 --> 00:06:12,080
characters<font color="#CCCCCC"> at the very beginning</font><font color="#E5E5E5"> of the</font>

140
00:06:10,460 --> 00:06:14,299
idea<font color="#E5E5E5"> tree if that's what you want to</font>

141
00:06:12,080 --> 00:06:18,198
<font color="#E5E5E5">fuss it's the place where</font><font color="#CCCCCC"> you will be</font>

142
00:06:14,300 --> 00:06:19,370
replacing<font color="#E5E5E5"> with values I want</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> start by</font>

143
00:06:18,199 --> 00:06:21,710
showing<font color="#E5E5E5"> you three different</font>

144
00:06:19,370 --> 00:06:23,570
<font color="#CCCCCC">possibilities of</font><font color="#E5E5E5"> basic things</font><font color="#CCCCCC"> that</font>

145
00:06:21,710 --> 00:06:25,489
<font color="#E5E5E5">everybody can understand of what</font><font color="#CCCCCC"> are we</font>

146
00:06:23,570 --> 00:06:28,779
<font color="#E5E5E5">going</font><font color="#CCCCCC"> to do I want</font><font color="#E5E5E5"> to show you what</font>

147
00:06:25,490 --> 00:06:32,990
happens when<font color="#E5E5E5"> we are two plus two when we</font>

148
00:06:28,779 --> 00:06:35,180
0.1 plus<font color="#E5E5E5"> 0.2 minus 0.3 and then we have</font>

149
00:06:32,990 --> 00:06:38,460
a large<font color="#CCCCCC"> number</font>

150
00:06:35,180 --> 00:06:39,930
once I have all<font color="#E5E5E5"> the values</font><font color="#CCCCCC"> storing the</font>

151
00:06:38,460 --> 00:06:41,640
<font color="#CCCCCC">verb in the database this</font><font color="#E5E5E5"> is one way of</font>

152
00:06:39,930 --> 00:06:44,250
<font color="#E5E5E5">adding</font><font color="#CCCCCC"> lemon you can directly</font><font color="#E5E5E5"> out them</font>

153
00:06:41,640 --> 00:06:46,080
in the<font color="#E5E5E5"> database if you want you're going</font>

154
00:06:44,250 --> 00:06:47,670
to<font color="#E5E5E5"> generate the permutations of how</font>

155
00:06:46,080 --> 00:06:49,940
you're going<font color="#E5E5E5"> to combine these test cases</font>

156
00:06:47,670 --> 00:06:55,680
<font color="#CCCCCC">in here we have only three test cases</font>

157
00:06:49,940 --> 00:06:59,100
<font color="#E5E5E5">the three calculations the next thing</font>

158
00:06:55,680 --> 00:07:00,630
you<font color="#E5E5E5"> want to do is to pick a name of how</font>

159
00:06:59,100 --> 00:07:02,940
are you going<font color="#E5E5E5"> to fast how are you going</font>

160
00:07:00,630 --> 00:07:06,930
<font color="#E5E5E5">to</font><font color="#CCCCCC"> name this fasting session where are</font>

161
00:07:02,940 --> 00:07:09,210
you going to<font color="#E5E5E5"> test this</font><font color="#CCCCCC"> the type of input</font>

162
00:07:06,930 --> 00:07:13,230
<font color="#E5E5E5">that you're going to be using you can</font>

163
00:07:09,210 --> 00:07:15,750
<font color="#E5E5E5">either use</font><font color="#CCCCCC"> arm</font><font color="#E5E5E5"> if anyone saw the talk</font>

164
00:07:13,230 --> 00:07:18,180
about fasting<font color="#CCCCCC"> JavaScript</font><font color="#E5E5E5"> the input that</font>

165
00:07:15,750 --> 00:07:20,610
<font color="#E5E5E5">they were using was or probably than the</font>

166
00:07:18,180 --> 00:07:22,230
<font color="#E5E5E5">common line or in the standard</font><font color="#CCCCCC"> input</font><font color="#E5E5E5"> in</font>

167
00:07:20,610 --> 00:07:24,420
here you can define<font color="#CCCCCC"> whatever input you</font>

168
00:07:22,230 --> 00:07:26,510
want in<font color="#E5E5E5"> this case is file so it's</font><font color="#CCCCCC"> going</font>

169
00:07:24,420 --> 00:07:31,560
<font color="#CCCCCC">to be using a random name for the file</font>

170
00:07:26,510 --> 00:07:36,060
in the case of the<font color="#CCCCCC"> JavaScript</font><font color="#E5E5E5"> talk they</font>

171
00:07:31,560 --> 00:07:38,130
were passing<font color="#E5E5E5"> the files as as parameters</font>

172
00:07:36,060 --> 00:07:41,430
because they didn't want to<font color="#E5E5E5"> impact the</font>

173
00:07:38,130 --> 00:07:43,800
<font color="#E5E5E5">the input</font><font color="#CCCCCC"> output</font><font color="#E5E5E5"> of the of the system</font>

174
00:07:41,430 --> 00:07:45,420
but<font color="#E5E5E5"> as long as</font><font color="#CCCCCC"> you create</font><font color="#E5E5E5"> a around this</font>

175
00:07:43,800 --> 00:07:47,190
you will be fine<font color="#CCCCCC"> you can do this on any</font>

176
00:07:45,420 --> 00:07:50,100
<font color="#E5E5E5">operating system so that's not require</font>

177
00:07:47,190 --> 00:07:51,830
<font color="#E5E5E5">you</font><font color="#CCCCCC"> can also use URLs</font><font color="#E5E5E5"> and try to for</font>

178
00:07:50,100 --> 00:07:53,910
<font color="#E5E5E5">something if you try to fathom</font><font color="#CCCCCC"> a browser</font>

179
00:07:51,830 --> 00:07:55,590
<font color="#E5E5E5">all the stones are input if you're</font>

180
00:07:53,910 --> 00:07:59,190
trying to<font color="#E5E5E5"> false for example a web server</font>

181
00:07:55,590 --> 00:08:00,690
<font color="#CCCCCC">or something like that</font><font color="#E5E5E5"> for this</font><font color="#CCCCCC"> basic</font>

182
00:07:59,190 --> 00:08:04,560
<font color="#CCCCCC">demonstration of what are</font><font color="#E5E5E5"> we going to do</font>

183
00:08:00,690 --> 00:08:06,120
<font color="#E5E5E5">I</font><font color="#CCCCCC"> grab</font><font color="#E5E5E5"> in fact there are eight pieces of</font>

184
00:08:04,560 --> 00:08:09,000
silver<font color="#E5E5E5"> there are seven in here for the</font>

185
00:08:06,120 --> 00:08:11,490
sake of simplicity<font color="#CCCCCC"> and if you can see in</font>

186
00:08:09,000 --> 00:08:14,850
all<font color="#CCCCCC"> of them what we're doing here is</font>

187
00:08:11,490 --> 00:08:18,240
just say we're going<font color="#E5E5E5"> to print a test</font>

188
00:08:14,850 --> 00:08:20,360
<font color="#E5E5E5">case that</font><font color="#CCCCCC"> we</font><font color="#E5E5E5"> define previously depending</font>

189
00:08:18,240 --> 00:08:23,010
on the<font color="#CCCCCC"> language we do this</font><font color="#E5E5E5"> differently</font>

190
00:08:20,360 --> 00:08:25,590
there are six programming languages in

191
00:08:23,010 --> 00:08:30,180
here plus BC which<font color="#CCCCCC"> is a calculator in</font>

192
00:08:25,590 --> 00:08:33,689
Linux so why do<font color="#E5E5E5"> we want to do this to</font>

193
00:08:30,180 --> 00:08:35,460
automatize the output<font color="#E5E5E5"> so what I'm going</font>

194
00:08:33,690 --> 00:08:37,380
<font color="#E5E5E5">to show</font><font color="#CCCCCC"> you from now on is going to be a</font>

195
00:08:35,460 --> 00:08:39,000
combination<font color="#E5E5E5"> of two</font><font color="#CCCCCC"> things</font><font color="#E5E5E5"> either</font><font color="#CCCCCC"> I'm</font>

196
00:08:37,380 --> 00:08:41,220
<font color="#E5E5E5">going to show you the outputs of the</font>

197
00:08:39,000 --> 00:08:43,380
tool or<font color="#CCCCCC"> even</font><font color="#E5E5E5"> go I'm going to</font><font color="#CCCCCC"> show</font>

198
00:08:41,220 --> 00:08:46,750
<font color="#E5E5E5">examples of how you execute some of the</font>

199
00:08:43,380 --> 00:08:49,630
things<font color="#E5E5E5"> that are picked</font><font color="#CCCCCC"> by the tool</font>

200
00:08:46,750 --> 00:08:52,030
so this is one of<font color="#E5E5E5"> the outputs it</font>

201
00:08:49,630 --> 00:08:53,230
generates<font color="#CCCCCC"> on</font><font color="#E5E5E5"> etched an HTML file with</font>

202
00:08:52,030 --> 00:08:56,170
different tables

203
00:08:53,230 --> 00:08:58,030
<font color="#E5E5E5">and this is the most basic output that</font>

204
00:08:56,170 --> 00:09:00,219
<font color="#E5E5E5">you're going</font><font color="#CCCCCC"> to see from the tool this</font>

205
00:08:58,030 --> 00:09:01,630
will<font color="#E5E5E5"> be listing the result you just</font>

206
00:09:00,220 --> 00:09:03,420
executed something<font color="#CCCCCC"> and you</font><font color="#E5E5E5"> want to see</font>

207
00:09:01,630 --> 00:09:06,010
what happens

208
00:09:03,420 --> 00:09:07,630
when you're executing<font color="#E5E5E5"> something you have</font>

209
00:09:06,010 --> 00:09:09,730
a test case<font color="#E5E5E5"> that you're defining</font><font color="#CCCCCC"> 2+2</font>

210
00:09:07,630 --> 00:09:12,400
<font color="#E5E5E5">that is going to be related</font><font color="#CCCCCC"> to a piece</font>

211
00:09:09,730 --> 00:09:14,560
of<font color="#E5E5E5"> software it would have different</font>

212
00:09:12,400 --> 00:09:17,380
types of input in here since<font color="#E5E5E5"> we also</font>

213
00:09:14,560 --> 00:09:18,790
have Firefox<font color="#CCCCCC"> that</font><font color="#E5E5E5"> has a URL associated</font>

214
00:09:17,380 --> 00:09:20,820
to the type<font color="#CCCCCC"> of</font><font color="#E5E5E5"> input</font>

215
00:09:18,790 --> 00:09:23,020
this means that<font color="#E5E5E5"> he was hosted on</font><font color="#CCCCCC"> a</font>

216
00:09:20,820 --> 00:09:26,590
automatic web server that<font color="#CCCCCC"> is created by</font>

217
00:09:23,020 --> 00:09:29,530
<font color="#E5E5E5">the</font><font color="#CCCCCC"> buzzer all</font><font color="#E5E5E5"> I tested this on my Mac</font>

218
00:09:26,590 --> 00:09:31,120
<font color="#CCCCCC">and the output was 4</font><font color="#E5E5E5"> and that was easy</font>

219
00:09:29,530 --> 00:09:34,270
that's how we start<font color="#E5E5E5"> the very first thing</font>

220
00:09:31,120 --> 00:09:36,310
when I do is what happens in here it was

221
00:09:34,270 --> 00:09:38,230
<font color="#E5E5E5">pretty obvious what the output was going</font>

222
00:09:36,310 --> 00:09:40,949
to be but<font color="#CCCCCC"> sometimes as you start</font>

223
00:09:38,230 --> 00:09:44,110
progressing things are not so obvious

224
00:09:40,950 --> 00:09:46,300
<font color="#E5E5E5">let's move on to the next one remember</font>

225
00:09:44,110 --> 00:09:48,850
<font color="#E5E5E5">this calculation this</font><font color="#CCCCCC"> is simple</font><font color="#E5E5E5"> the</font>

226
00:09:46,300 --> 00:09:51,969
problem is when<font color="#E5E5E5"> you're trying to do this</font>

227
00:09:48,850 --> 00:09:54,310
<font color="#CCCCCC">floating-point</font><font color="#E5E5E5"> arithmetic sometimes</font>

228
00:09:51,970 --> 00:09:56,530
things do not work<font color="#CCCCCC"> as we expect them we</font>

229
00:09:54,310 --> 00:09:58,839
know these<font color="#E5E5E5"> numbers</font><font color="#CCCCCC"> in the decimal</font>

230
00:09:56,530 --> 00:10:02,470
<font color="#CCCCCC">notation</font><font color="#E5E5E5"> however when we write this in</font>

231
00:09:58,839 --> 00:10:08,350
binary notation<font color="#E5E5E5"> the values are not zero</font>

232
00:10:02,470 --> 00:10:10,030
<font color="#E5E5E5">are close</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> 0 so this</font><font color="#CCCCCC"> is the most</font><font color="#E5E5E5"> basic</font>

233
00:10:08,350 --> 00:10:12,490
thing when we talk<font color="#CCCCCC"> about differential</font>

234
00:10:10,030 --> 00:10:14,980
testing differential testing is you have

235
00:10:12,490 --> 00:10:16,839
a set of<font color="#CCCCCC"> values and</font><font color="#E5E5E5"> they're different so</font>

236
00:10:14,980 --> 00:10:21,760
this is<font color="#E5E5E5"> going to be pick up by this</font>

237
00:10:16,839 --> 00:10:23,770
<font color="#E5E5E5">analysis functionality</font><font color="#CCCCCC"> ah</font><font color="#E5E5E5"> BC the</font>

238
00:10:21,760 --> 00:10:25,810
calculator of almost<font color="#E5E5E5"> at the very bottom</font>

239
00:10:23,770 --> 00:10:28,120
<font color="#E5E5E5">had the number 0</font><font color="#CCCCCC"> that's because it's a</font>

240
00:10:25,810 --> 00:10:30,390
calculator<font color="#CCCCCC"> you know what it does all the</font>

241
00:10:28,120 --> 00:10:33,970
other<font color="#E5E5E5"> programming languages say</font><font color="#CCCCCC"> ok it's</font>

242
00:10:30,390 --> 00:10:37,870
the number 0<font color="#E5E5E5"> plus a lot of</font><font color="#CCCCCC"> cereals</font><font color="#E5E5E5"> and</font>

243
00:10:33,970 --> 00:10:39,870
then the number 5<font color="#E5E5E5"> whatsoever depending</font>

244
00:10:37,870 --> 00:10:42,610
<font color="#CCCCCC">on the programming languages</font><font color="#E5E5E5"> it has a</font>

245
00:10:39,870 --> 00:10:47,260
better approach<font color="#E5E5E5"> to what the real number</font>

246
00:10:42,610 --> 00:10:49,480
is but it's never<font color="#E5E5E5"> seen another way of</font>

247
00:10:47,260 --> 00:10:51,310
seeing the results we<font color="#E5E5E5"> have seen two ways</font>

248
00:10:49,480 --> 00:10:53,620
<font color="#E5E5E5">of seeing the results the first one is</font>

249
00:10:51,310 --> 00:10:56,109
you<font color="#CCCCCC"> just list all the results</font><font color="#E5E5E5"> the second</font>

250
00:10:53,620 --> 00:10:58,810
<font color="#E5E5E5">one is you're just only focusing on the</font>

251
00:10:56,110 --> 00:11:00,430
ones<font color="#E5E5E5"> that are different for</font><font color="#CCCCCC"> example in</font>

252
00:10:58,810 --> 00:11:02,680
this<font color="#CCCCCC"> one shonali you wouldn't see that</font>

253
00:11:00,430 --> 00:11:05,290
two plus<font color="#E5E5E5"> two equal four because there is</font>

254
00:11:02,680 --> 00:11:08,680
<font color="#CCCCCC">nothing different</font><font color="#E5E5E5"> over there</font><font color="#CCCCCC"> let me</font><font color="#E5E5E5"> move</font>

255
00:11:05,290 --> 00:11:09,849
on to<font color="#E5E5E5"> the to the next one as I said</font><font color="#CCCCCC"> in</font>

256
00:11:08,680 --> 00:11:11,529
<font color="#E5E5E5">the very beginning</font><font color="#CCCCCC"> I was curious</font><font color="#E5E5E5"> about</font>

257
00:11:09,850 --> 00:11:13,770
JavaScript<font color="#E5E5E5"> and this is one of</font><font color="#CCCCCC"> the very</font>

258
00:11:11,529 --> 00:11:16,720
<font color="#E5E5E5">first thing</font><font color="#CCCCCC"> that I was analyzing</font><font color="#E5E5E5"> that</font>

259
00:11:13,770 --> 00:11:19,420
this calculation<font color="#CCCCCC"> it may</font><font color="#E5E5E5"> only affect</font>

260
00:11:16,720 --> 00:11:21,910
JavaScript<font color="#E5E5E5"> stuff because this is the</font>

261
00:11:19,420 --> 00:11:25,089
maximum<font color="#CCCCCC"> number for JavaScript</font><font color="#E5E5E5"> so if you</font>

262
00:11:21,910 --> 00:11:27,490
do this you will find<font color="#E5E5E5"> that this</font><font color="#CCCCCC"> is</font>

263
00:11:25,089 --> 00:11:29,380
another way of<font color="#CCCCCC"> showing</font><font color="#E5E5E5"> things you're</font>

264
00:11:27,490 --> 00:11:32,260
looking<font color="#CCCCCC"> for test cases that produces the</font>

265
00:11:29,380 --> 00:11:34,720
same standard output<font color="#E5E5E5"> we could have used</font>

266
00:11:32,260 --> 00:11:37,300
the<font color="#E5E5E5"> previous</font><font color="#CCCCCC"> function</font><font color="#E5E5E5"> but sometimes this</font>

267
00:11:34,720 --> 00:11:40,330
function comes handy to<font color="#E5E5E5"> analyze other</font>

268
00:11:37,300 --> 00:11:45,069
reason areas to make it simple I use it

269
00:11:40,330 --> 00:11:46,990
<font color="#E5E5E5">for this one so the weird thing is that</font>

270
00:11:45,070 --> 00:11:48,820
if you add<font color="#CCCCCC"> the number two then you will</font>

271
00:11:46,990 --> 00:11:50,800
get the real number in<font color="#E5E5E5"> JavaScript is</font>

272
00:11:48,820 --> 00:11:53,649
that's<font color="#CCCCCC"> boarder number it's</font><font color="#E5E5E5"> a little bit</font>

273
00:11:50,800 --> 00:11:56,550
more<font color="#CCCCCC"> complicated</font><font color="#E5E5E5"> to calculate for</font>

274
00:11:53,649 --> 00:11:59,230
JavaScript but<font color="#E5E5E5"> on the rest of the</font>

275
00:11:56,550 --> 00:12:03,849
programming languages or the calculator

276
00:11:59,230 --> 00:12:06,700
<font color="#CCCCCC">that thing</font><font color="#E5E5E5"> seems to work</font><font color="#CCCCCC"> so moving on to</font>

277
00:12:03,850 --> 00:12:09,130
<font color="#E5E5E5">the real thing when we're talking about</font>

278
00:12:06,700 --> 00:12:11,320
<font color="#E5E5E5">common</font><font color="#CCCCCC"> forcing we're talking about</font>

279
00:12:09,130 --> 00:12:12,959
normally about detecting crashes<font color="#E5E5E5"> when</font>

280
00:12:11,320 --> 00:12:15,790
we're<font color="#CCCCCC"> breaking a</font><font color="#E5E5E5"> piece of software or</font>

281
00:12:12,959 --> 00:12:18,510
hands<font color="#E5E5E5"> that means that the software keeps</font>

282
00:12:15,790 --> 00:12:23,800
executing it it never<font color="#E5E5E5"> ends</font>

283
00:12:18,510 --> 00:12:26,740
so one of the things that I wanted<font color="#CCCCCC"> to</font>

284
00:12:23,800 --> 00:12:29,770
prove<font color="#E5E5E5"> is that even though this</font><font color="#CCCCCC"> is not a</font>

285
00:12:26,740 --> 00:12:31,630
a common<font color="#CCCCCC"> faster I still was able to</font>

286
00:12:29,770 --> 00:12:34,770
detect crashes<font color="#E5E5E5"> there are multiple ways</font>

287
00:12:31,630 --> 00:12:38,620
<font color="#CCCCCC">that you can</font><font color="#E5E5E5"> detect this and abuse them</font>

288
00:12:34,770 --> 00:12:42,670
the first one is you can try to attach a

289
00:12:38,620 --> 00:12:45,870
debugger<font color="#E5E5E5"> and analyze the output to see</font>

290
00:12:42,670 --> 00:12:49,000
in<font color="#E5E5E5"> witches in areas you can get</font>

291
00:12:45,870 --> 00:12:51,459
potential vulnerabilities here<font color="#CCCCCC"> pearl</font>

292
00:12:49,000 --> 00:12:53,410
<font color="#CCCCCC">release crashing with a certain function</font>

293
00:12:51,459 --> 00:12:56,649
<font color="#E5E5E5">and you can</font><font color="#CCCCCC"> also get the return code</font>

294
00:12:53,410 --> 00:12:59,140
<font color="#CCCCCC">minus 11</font><font color="#E5E5E5"> which could be</font><font color="#CCCCCC"> associated with</font>

295
00:12:56,649 --> 00:13:02,230
a crash nevertheless return codes are

296
00:12:59,140 --> 00:13:04,540
not<font color="#E5E5E5"> reliable when it comes to fussing</font>

297
00:13:02,230 --> 00:13:06,120
but you can use them<font color="#E5E5E5"> if you don't want</font>

298
00:13:04,540 --> 00:13:10,510
to attach a memory the<font color="#E5E5E5"> bugger</font><font color="#CCCCCC"> if</font><font color="#E5E5E5"> that</font>

299
00:13:06,120 --> 00:13:13,089
increases the<font color="#E5E5E5"> the executional by a</font>

300
00:13:10,510 --> 00:13:16,089
certain amount<font color="#CCCCCC"> of time</font><font color="#E5E5E5"> so</font>

301
00:13:13,089 --> 00:13:18,430
another possibility<font color="#CCCCCC"> instead of analyzing</font>

302
00:13:16,089 --> 00:13:21,399
<font color="#CCCCCC">the output of bar</font><font color="#E5E5E5"> green you could also</font>

303
00:13:18,430 --> 00:13:24,189
<font color="#E5E5E5">detect the different return</font><font color="#CCCCCC"> curves by</font>

304
00:13:21,399 --> 00:13:26,379
the software<font color="#CCCCCC"> Perl</font><font color="#E5E5E5"> is the case by itself</font>

305
00:13:24,189 --> 00:13:28,509
<font color="#CCCCCC">I</font><font color="#E5E5E5"> just put it is in here because it's</font>

306
00:13:26,379 --> 00:13:31,120
weird<font color="#CCCCCC"> the amount of different return</font>

307
00:13:28,509 --> 00:13:34,180
codes<font color="#E5E5E5"> that it has sometimes you can</font><font color="#CCCCCC"> even</font>

308
00:13:31,120 --> 00:13:36,100
detect weird behaviors of software when

309
00:13:34,180 --> 00:13:38,859
you're<font color="#E5E5E5"> checking the return codes of</font>

310
00:13:36,100 --> 00:13:40,660
course the - alone was<font color="#CCCCCC"> the one that</font><font color="#E5E5E5"> we</font>

311
00:13:38,860 --> 00:13:43,059
saw before which<font color="#CCCCCC"> is associated with</font><font color="#E5E5E5"> the</font>

312
00:13:40,660 --> 00:13:46,180
<font color="#CCCCCC">crash</font><font color="#E5E5E5"> but depending on</font><font color="#CCCCCC"> the piece of</font>

313
00:13:43,059 --> 00:13:48,339
<font color="#E5E5E5">software if</font><font color="#CCCCCC"> you just have to type of</font>

314
00:13:46,180 --> 00:13:50,829
return codes and one of them only<font color="#E5E5E5"> shows</font>

315
00:13:48,339 --> 00:13:54,069
<font color="#CCCCCC">that has being executed one time it</font>

316
00:13:50,829 --> 00:13:56,378
would<font color="#E5E5E5"> be worth analyzing why</font><font color="#CCCCCC"> happen so</font>

317
00:13:54,069 --> 00:13:59,199
this is another way<font color="#CCCCCC"> of how can you</font>

318
00:13:56,379 --> 00:14:04,540
analyze crashes when we're talking<font color="#CCCCCC"> about</font>

319
00:13:59,199 --> 00:14:06,309
<font color="#CCCCCC">come on</font><font color="#E5E5E5"> fasting what I wanted to</font>

320
00:14:04,540 --> 00:14:09,550
exemplify as I said at<font color="#E5E5E5"> the very</font>

321
00:14:06,309 --> 00:14:11,639
beginning<font color="#E5E5E5"> was that we can execute them</font>

322
00:14:09,550 --> 00:14:14,290
to show that<font color="#CCCCCC"> we</font><font color="#E5E5E5"> can get those crashes</font>

323
00:14:11,639 --> 00:14:17,290
<font color="#E5E5E5">for example in Ruby</font><font color="#CCCCCC"> we can get a</font>

324
00:14:14,290 --> 00:14:23,170
segmentation<font color="#E5E5E5"> for by</font><font color="#CCCCCC"> doing that we</font><font color="#E5E5E5"> can</font>

325
00:14:17,290 --> 00:14:25,389
also break the the<font color="#E5E5E5"> HIV M is</font><font color="#CCCCCC"> the PHP that</font>

326
00:14:23,170 --> 00:14:31,139
<font color="#E5E5E5">Facebook uses in a number of different</font>

327
00:14:25,389 --> 00:14:34,779
ways pi PI

328
00:14:31,139 --> 00:14:36,339
<font color="#CCCCCC">breaking Perl I think this is the one</font>

329
00:14:34,779 --> 00:14:38,589
that<font color="#E5E5E5"> I yeah this is the one that I show</font>

330
00:14:36,339 --> 00:14:41,019
when I show the Val<font color="#CCCCCC"> Green and this</font><font color="#E5E5E5"> is</font>

331
00:14:38,589 --> 00:14:44,170
the one that<font color="#E5E5E5"> breaks with a</font><font color="#CCCCCC"> minus 11 very</font>

332
00:14:41,019 --> 00:14:51,009
simple thing<font color="#E5E5E5"> check</font><font color="#CCCCCC"> record the JavaScript</font>

333
00:14:44,170 --> 00:14:54,939
made by Microsoft so I didn't report any

334
00:14:51,009 --> 00:14:56,079
of the<font color="#E5E5E5"> issues the last time</font><font color="#CCCCCC"> I didn't do</font>

335
00:14:54,939 --> 00:14:59,620
<font color="#E5E5E5">it with the things that I came across</font>

336
00:14:56,079 --> 00:15:02,339
<font color="#E5E5E5">right now so I</font><font color="#CCCCCC"> don't know</font><font color="#E5E5E5"> anyone will</font>

337
00:14:59,620 --> 00:15:04,449
pick them up it will be<font color="#E5E5E5"> fun</font>

338
00:15:02,339 --> 00:15:06,309
so the other thing that you could<font color="#E5E5E5"> do is</font>

339
00:15:04,449 --> 00:15:09,008
to detect Hanks<font color="#E5E5E5"> sometimes the software</font>

340
00:15:06,309 --> 00:15:11,170
<font color="#E5E5E5">doesn't terminate so how do you</font><font color="#CCCCCC"> know</font>

341
00:15:09,009 --> 00:15:12,850
<font color="#CCCCCC">that because the</font><font color="#E5E5E5"> amount of time</font><font color="#CCCCCC"> that</font>

342
00:15:11,170 --> 00:15:15,189
<font color="#E5E5E5">he's</font><font color="#CCCCCC"> taking for all</font><font color="#E5E5E5"> these functions I</font>

343
00:15:12,850 --> 00:15:18,670
just put in here<font color="#E5E5E5"> some</font><font color="#CCCCCC"> of</font><font color="#E5E5E5"> the rows</font><font color="#CCCCCC"> that</font><font color="#E5E5E5"> I</font>

344
00:15:15,189 --> 00:15:20,529
found this<font color="#E5E5E5"> is for peril</font><font color="#CCCCCC"> he's taking</font>

345
00:15:18,670 --> 00:15:22,509
<font color="#E5E5E5">around 10 seconds 10 seconds was the</font>

346
00:15:20,529 --> 00:15:25,000
<font color="#E5E5E5">time out for my session and I decided</font>

347
00:15:22,509 --> 00:15:26,350
that 10 seconds was the<font color="#CCCCCC"> amount</font><font color="#E5E5E5"> of time</font>

348
00:15:25,000 --> 00:15:26,930
there was when she<font color="#E5E5E5"> can see them for a</font>

349
00:15:26,350 --> 00:15:29,420
piece<font color="#CCCCCC"> of so</font>

350
00:15:26,930 --> 00:15:32,270
<font color="#CCCCCC">were to be terminated and executed so</font>

351
00:15:29,420 --> 00:15:34,849
these<font color="#E5E5E5"> functions may be something to</font>

352
00:15:32,270 --> 00:15:37,010
<font color="#E5E5E5">analyze in case</font><font color="#CCCCCC"> they are not working</font><font color="#E5E5E5"> as</font>

353
00:15:34,850 --> 00:15:38,839
expected<font color="#CCCCCC"> perhaps the ones that set</font>

354
00:15:37,010 --> 00:15:39,980
benchmark<font color="#E5E5E5"> are working as</font><font color="#CCCCCC"> expected and</font>

355
00:15:38,839 --> 00:15:42,589
they take a lot<font color="#CCCCCC"> of time</font>

356
00:15:39,980 --> 00:15:45,380
<font color="#E5E5E5">well perhaps these are ways to</font><font color="#CCCCCC"> detect</font>

357
00:15:42,589 --> 00:15:47,060
things where you can<font color="#CCCCCC"> abused</font><font color="#E5E5E5"> as we saw on</font>

358
00:15:45,380 --> 00:15:49,160
<font color="#CCCCCC">the previous talk that the guy found a</font>

359
00:15:47,060 --> 00:15:52,219
lot<font color="#E5E5E5"> of denial of service attacks</font><font color="#CCCCCC"> this</font><font color="#E5E5E5"> is</font>

360
00:15:49,160 --> 00:15:54,770
another way of getting functions they're

361
00:15:52,220 --> 00:15:56,089
going to probably<font color="#E5E5E5"> cause other night of</font>

362
00:15:54,770 --> 00:15:59,870
service when you're<font color="#E5E5E5"> hitting that</font>

363
00:15:56,089 --> 00:16:01,910
<font color="#E5E5E5">function so you can detect the amount of</font>

364
00:15:59,870 --> 00:16:06,020
time that<font color="#CCCCCC"> is</font><font color="#E5E5E5"> taken as if they were</font>

365
00:16:01,910 --> 00:16:07,520
<font color="#E5E5E5">killed do something about</font><font color="#CCCCCC"> that let's</font>

366
00:16:06,020 --> 00:16:10,520
talk<font color="#CCCCCC"> about differential</font><font color="#E5E5E5"> flossing</font>

367
00:16:07,520 --> 00:16:13,250
so the idea about differential fasting

368
00:16:10,520 --> 00:16:16,579
is that you are<font color="#E5E5E5"> comparing two types of</font>

369
00:16:13,250 --> 00:16:20,240
outputs<font color="#CCCCCC"> ah differential forcing is</font>

370
00:16:16,580 --> 00:16:22,640
started in like 1996<font color="#CCCCCC"> I think this is</font>

371
00:16:20,240 --> 00:16:24,110
where they created the<font color="#E5E5E5"> first paper there</font>

372
00:16:22,640 --> 00:16:28,040
were a number<font color="#CCCCCC"> of papers</font><font color="#E5E5E5"> throughout the</font>

373
00:16:24,110 --> 00:16:30,230
year but so far they haven't<font color="#E5E5E5"> they</font>

374
00:16:28,040 --> 00:16:31,790
<font color="#E5E5E5">haven't released any type of</font><font color="#CCCCCC"> framework</font>

375
00:16:30,230 --> 00:16:34,310
to use<font color="#CCCCCC"> it</font><font color="#E5E5E5"> on different pieces of</font>

376
00:16:31,790 --> 00:16:36,110
<font color="#CCCCCC">software all the time that they have</font>

377
00:16:34,310 --> 00:16:39,079
talked about<font color="#E5E5E5"> differential fasting has</font>

378
00:16:36,110 --> 00:16:40,970
been about<font color="#CCCCCC"> just one type of</font><font color="#E5E5E5"> software</font>

379
00:16:39,080 --> 00:16:43,370
being<font color="#E5E5E5"> analyzed the first one was</font><font color="#CCCCCC"> about C</font>

380
00:16:40,970 --> 00:16:45,709
and<font color="#E5E5E5"> the last one that I remember</font><font color="#CCCCCC"> was</font>

381
00:16:43,370 --> 00:16:49,940
presented at blackhat USA and it was

382
00:16:45,709 --> 00:16:51,829
about<font color="#E5E5E5"> cryptographic ciphers again the</font>

383
00:16:49,940 --> 00:16:53,360
law the logic is always the same<font color="#E5E5E5"> you're</font>

384
00:16:51,830 --> 00:16:57,260
trying to<font color="#E5E5E5"> find</font><font color="#CCCCCC"> different things</font><font color="#E5E5E5"> when</font>

385
00:16:53,360 --> 00:16:59,450
you're putting<font color="#E5E5E5"> certain type of into the</font>

386
00:16:57,260 --> 00:17:01,189
thing is what do<font color="#CCCCCC"> we</font><font color="#E5E5E5"> mean by output there</font>

387
00:16:59,450 --> 00:17:02,959
are a number<font color="#CCCCCC"> of possibilities that</font>

388
00:17:01,190 --> 00:17:05,059
<font color="#E5E5E5">haven't</font><font color="#CCCCCC"> been fully explored</font><font color="#E5E5E5"> and that's</font>

389
00:17:02,959 --> 00:17:07,520
that of course<font color="#E5E5E5"> is going to be the sum or</font>

390
00:17:05,059 --> 00:17:09,109
output but also it could<font color="#E5E5E5"> be the standard</font>

391
00:17:07,520 --> 00:17:10,369
error if there<font color="#E5E5E5"> are differences in the</font>

392
00:17:09,109 --> 00:17:11,948
error perhaps we're going to do

393
00:17:10,369 --> 00:17:14,300
<font color="#CCCCCC">something about</font><font color="#E5E5E5"> that</font>

394
00:17:11,949 --> 00:17:16,130
sometimes software will try to<font color="#E5E5E5"> open</font>

395
00:17:14,300 --> 00:17:17,780
network connections<font color="#E5E5E5"> and sometimes how</font>

396
00:17:16,130 --> 00:17:19,370
the pieces of stuff will not open<font color="#E5E5E5"> those</font>

397
00:17:17,780 --> 00:17:21,829
<font color="#CCCCCC">a network</font><font color="#E5E5E5"> connections</font><font color="#CCCCCC"> and that's how you</font>

398
00:17:19,369 --> 00:17:25,669
can detect<font color="#E5E5E5"> that something</font><font color="#CCCCCC"> is</font><font color="#E5E5E5"> not</font><font color="#CCCCCC"> working</font>

399
00:17:21,829 --> 00:17:28,099
as expected<font color="#CCCCCC"> of course if you have two</font>

400
00:17:25,670 --> 00:17:29,840
browsers<font color="#E5E5E5"> and you're testing two browsers</font>

401
00:17:28,099 --> 00:17:32,000
at the same time<font color="#E5E5E5"> and one of the mobs</font>

402
00:17:29,840 --> 00:17:35,300
<font color="#E5E5E5">opens</font><font color="#CCCCCC"> a network connection and the other</font>

403
00:17:32,000 --> 00:17:37,910
<font color="#CCCCCC">dozen one of them is wrong</font><font color="#E5E5E5"> probably</font>

404
00:17:35,300 --> 00:17:39,918
either the test case shouldn't<font color="#E5E5E5"> have an</font>

405
00:17:37,910 --> 00:17:40,880
open or the test case should have<font color="#E5E5E5"> been</font>

406
00:17:39,919 --> 00:17:43,750
<font color="#E5E5E5">open and the other</font>

407
00:17:40,880 --> 00:17:46,490
browser cannot handle<font color="#E5E5E5"> that type of into</font>

408
00:17:43,750 --> 00:17:48,200
the return<font color="#E5E5E5"> codes may show</font><font color="#CCCCCC"> that something</font>

409
00:17:46,490 --> 00:17:50,120
<font color="#E5E5E5">is going on</font><font color="#CCCCCC"> when you're</font><font color="#E5E5E5"> testing similar</font>

410
00:17:48,200 --> 00:17:51,560
<font color="#E5E5E5">pieces of software we're going to Li the</font>

411
00:17:50,120 --> 00:17:54,229
time required for the execution

412
00:17:51,560 --> 00:17:56,120
<font color="#E5E5E5">sometimes</font><font color="#CCCCCC"> the same piece of</font><font color="#E5E5E5"> input by</font>

413
00:17:54,230 --> 00:17:58,460
different pieces of<font color="#E5E5E5"> software may take</font>

414
00:17:56,120 --> 00:18:00,010
significant amount of time<font color="#E5E5E5"> that could be</font>

415
00:17:58,460 --> 00:18:02,600
checked

416
00:18:00,010 --> 00:18:04,040
eventually<font color="#E5E5E5"> you</font><font color="#CCCCCC"> can also</font><font color="#E5E5E5"> know if the</font>

417
00:18:02,600 --> 00:18:08,659
<font color="#E5E5E5">software was kill or</font><font color="#CCCCCC"> not and do</font>

418
00:18:04,040 --> 00:18:12,170
something about that<font color="#E5E5E5"> so what can you</font>

419
00:18:08,660 --> 00:18:13,220
execute to find these kind of things the

420
00:18:12,170 --> 00:18:16,100
first thing<font color="#E5E5E5"> will</font><font color="#CCCCCC"> be the different</font>

421
00:18:13,220 --> 00:18:17,660
implementations<font color="#CCCCCC"> for example everybody</font>

422
00:18:16,100 --> 00:18:19,129
uses browsers everybody knows<font color="#E5E5E5"> that there</font>

423
00:18:17,660 --> 00:18:21,890
are<font color="#CCCCCC"> a lot of browsers in the market</font><font color="#E5E5E5"> you</font>

424
00:18:19,130 --> 00:18:26,390
<font color="#E5E5E5">can use all</font><font color="#CCCCCC"> of them and they do the same</font>

425
00:18:21,890 --> 00:18:27,800
<font color="#CCCCCC">thing they open a web page speaking</font>

426
00:18:26,390 --> 00:18:30,110
about browsers<font color="#CCCCCC"> you could try different</font>

427
00:18:27,800 --> 00:18:31,610
inputs with the same browser<font color="#E5E5E5"> sometimes</font>

428
00:18:30,110 --> 00:18:33,590
you could use the common line for

429
00:18:31,610 --> 00:18:34,850
browsers<font color="#E5E5E5"> not the best example</font><font color="#CCCCCC"> probably</font>

430
00:18:33,590 --> 00:18:37,939
for a programming<font color="#CCCCCC"> language that</font><font color="#E5E5E5"> would be</font>

431
00:18:34,850 --> 00:18:39,350
better<font color="#E5E5E5"> for</font><font color="#CCCCCC"> any type of</font><font color="#E5E5E5"> program</font><font color="#CCCCCC"> that uses</font>

432
00:18:37,940 --> 00:18:42,770
<font color="#E5E5E5">something from the common line that is</font>

433
00:18:39,350 --> 00:18:45,199
raining over<font color="#E5E5E5"> there some a lot of pro</font>

434
00:18:42,770 --> 00:18:46,760
museums uses files<font color="#E5E5E5"> either by the common</font>

435
00:18:45,200 --> 00:18:49,100
line when<font color="#E5E5E5"> you're referencing a file when</font>

436
00:18:46,760 --> 00:18:51,800
you're opening a file<font color="#E5E5E5"> eventually you</font>

437
00:18:49,100 --> 00:18:55,730
could<font color="#E5E5E5"> also use URLs if</font><font color="#CCCCCC"> they're trying</font><font color="#E5E5E5"> to</font>

438
00:18:51,800 --> 00:18:57,530
<font color="#E5E5E5">open a trace or remote racers or in</font>

439
00:18:55,730 --> 00:19:01,610
<font color="#E5E5E5">certain ways in areas the</font><font color="#CCCCCC"> East</font><font color="#E5E5E5"> and</font><font color="#CCCCCC"> are</font>

440
00:18:57,530 --> 00:19:03,500
<font color="#CCCCCC">employed</font><font color="#E5E5E5"> you can also try to compare</font>

441
00:19:01,610 --> 00:19:06,169
different<font color="#E5E5E5"> versions of the same piece</font><font color="#CCCCCC"> of</font>

442
00:19:03,500 --> 00:19:08,660
software<font color="#CCCCCC"> I can imagine that people</font><font color="#E5E5E5"> who</font>

443
00:19:06,170 --> 00:19:09,830
test<font color="#CCCCCC"> software are trying to see what are</font>

444
00:19:08,660 --> 00:19:13,130
the difference<font color="#CCCCCC"> between two pieces of</font>

445
00:19:09,830 --> 00:19:15,949
<font color="#CCCCCC">software that was made by</font><font color="#E5E5E5"> the same</font>

446
00:19:13,130 --> 00:19:17,690
<font color="#CCCCCC">person</font><font color="#E5E5E5"> but</font><font color="#CCCCCC"> at different periods of</font><font color="#E5E5E5"> time</font>

447
00:19:15,950 --> 00:19:20,240
<font color="#CCCCCC">so you can see what were the different</font>

448
00:19:17,690 --> 00:19:21,530
between those two pieces<font color="#E5E5E5"> of software</font><font color="#CCCCCC"> and</font>

449
00:19:20,240 --> 00:19:24,440
eventually you could try them in

450
00:19:21,530 --> 00:19:26,060
different<font color="#E5E5E5"> operating systems</font><font color="#CCCCCC"> and this</font><font color="#E5E5E5"> is</font>

451
00:19:24,440 --> 00:19:27,560
even<font color="#CCCCCC"> more</font><font color="#E5E5E5"> interesting for me</font><font color="#CCCCCC"> because</font>

452
00:19:26,060 --> 00:19:32,210
this<font color="#CCCCCC"> is where you see a lot of things</font>

453
00:19:27,560 --> 00:19:35,000
that may have not been checked<font color="#E5E5E5"> like the</font>

454
00:19:32,210 --> 00:19:37,790
<font color="#E5E5E5">last time that I presented this there</font>

455
00:19:35,000 --> 00:19:38,900
was a company testing one<font color="#E5E5E5"> of the biggest</font>

456
00:19:37,790 --> 00:19:40,760
<font color="#E5E5E5">software's in the market and this</font>

457
00:19:38,900 --> 00:19:45,320
company<font color="#E5E5E5"> what it does is</font><font color="#CCCCCC"> look for</font>

458
00:19:40,760 --> 00:19:47,540
<font color="#E5E5E5">vulnerabilities</font><font color="#CCCCCC"> in their software</font><font color="#E5E5E5"> since</font>

459
00:19:45,320 --> 00:19:50,720
this software is mostly<font color="#CCCCCC"> used in Linux</font>

460
00:19:47,540 --> 00:19:52,159
it hasn't been tested<font color="#E5E5E5"> in Windows and it</font>

461
00:19:50,720 --> 00:19:54,040
would be amazing<font color="#CCCCCC"> the</font><font color="#E5E5E5"> amount of things</font>

462
00:19:52,160 --> 00:19:56,500
<font color="#E5E5E5">that you may find when</font><font color="#CCCCCC"> tests</font>

463
00:19:54,040 --> 00:19:59,770
a piece<font color="#E5E5E5"> of software in two different</font>

464
00:19:56,500 --> 00:20:01,840
operating systems<font color="#E5E5E5"> even though the</font>

465
00:19:59,770 --> 00:20:04,030
<font color="#CCCCCC">application may not crash</font><font color="#E5E5E5"> in Linux and</font>

466
00:20:01,840 --> 00:20:05,620
<font color="#E5E5E5">may give</font><font color="#CCCCCC"> some sort</font><font color="#E5E5E5"> of</font><font color="#CCCCCC"> output</font><font color="#E5E5E5"> if you</font>

467
00:20:04,030 --> 00:20:07,120
execute<font color="#E5E5E5"> the same thing in Windows and</font>

468
00:20:05,620 --> 00:20:08,979
you get a<font color="#E5E5E5"> different output</font><font color="#CCCCCC"> you may be</font>

469
00:20:07,120 --> 00:20:11,439
leaving<font color="#E5E5E5"> into something and you may get</font>

470
00:20:08,980 --> 00:20:14,980
<font color="#CCCCCC">really interesting things</font><font color="#E5E5E5"> I'll show you</font>

471
00:20:11,440 --> 00:20:17,680
how the first<font color="#E5E5E5"> one is when you're</font><font color="#CCCCCC"> testing</font>

472
00:20:14,980 --> 00:20:19,330
the standard<font color="#E5E5E5"> output this</font><font color="#CCCCCC"> is the very</font>

473
00:20:17,680 --> 00:20:21,610
<font color="#E5E5E5">first thing that we saw at</font><font color="#CCCCCC"> the beginning</font>

474
00:20:19,330 --> 00:20:24,460
<font color="#E5E5E5">we were testing with what what was the</font>

475
00:20:21,610 --> 00:20:28,780
<font color="#CCCCCC">output of 2+2 right so in here we have</font>

476
00:20:24,460 --> 00:20:30,430
<font color="#E5E5E5">three</font><font color="#CCCCCC"> different JavaScript</font><font color="#E5E5E5"> parsers the</font>

477
00:20:28,780 --> 00:20:33,670
first one<font color="#E5E5E5"> b8 is made by</font><font color="#CCCCCC"> Google</font>

478
00:20:30,430 --> 00:20:37,510
<font color="#CCCCCC">SpiderMonkey made by</font><font color="#E5E5E5"> Firefox and know</font>

479
00:20:33,670 --> 00:20:41,200
which in this case is using v8 so it

480
00:20:37,510 --> 00:20:42,580
should behave<font color="#E5E5E5"> the same</font><font color="#CCCCCC"> way</font><font color="#E5E5E5"> the first in</font>

481
00:20:41,200 --> 00:20:45,370
all these cases<font color="#CCCCCC"> were using the</font><font color="#E5E5E5"> command</font>

482
00:20:42,580 --> 00:20:47,139
<font color="#E5E5E5">line input so this means that as you can</font>

483
00:20:45,370 --> 00:20:49,709
<font color="#CCCCCC">see at the very beginning we have the</font>

484
00:20:47,140 --> 00:20:53,320
what we want to execute between quotes

485
00:20:49,710 --> 00:20:55,660
<font color="#E5E5E5">the first one cries the global object</font>

486
00:20:53,320 --> 00:20:57,820
<font color="#E5E5E5">the second was</font><font color="#CCCCCC"> grinds</font><font color="#E5E5E5"> the Global Hawk</font>

487
00:20:55,660 --> 00:20:59,200
said if you tested<font color="#E5E5E5"> this there would be</font>

488
00:20:57,820 --> 00:21:02,350
nothing<font color="#CCCCCC"> worried about it</font>

489
00:20:59,200 --> 00:21:04,390
the thing is<font color="#E5E5E5"> even though no it is no</font>

490
00:21:02,350 --> 00:21:06,730
purely<font color="#CCCCCC"> a JavaScript parser</font><font color="#E5E5E5"> I wanted to</font>

491
00:21:04,390 --> 00:21:08,560
see what<font color="#E5E5E5"> happened when executing common</font>

492
00:21:06,730 --> 00:21:11,890
things<font color="#E5E5E5"> and</font><font color="#CCCCCC"> this</font><font color="#E5E5E5"> is</font><font color="#CCCCCC"> how you can detect</font>

493
00:21:08,560 --> 00:21:13,450
<font color="#E5E5E5">that something</font><font color="#CCCCCC"> weird is going</font><font color="#E5E5E5"> on that in</font>

494
00:21:11,890 --> 00:21:16,180
this case it is<font color="#E5E5E5"> this close in the years</font>

495
00:21:13,450 --> 00:21:19,720
of the path<font color="#CCCCCC"> at the</font><font color="#E5E5E5"> harm of the</font><font color="#CCCCCC"> user the</font>

496
00:21:16,180 --> 00:21:21,520
process ID on a number of<font color="#CCCCCC"> things so</font><font color="#E5E5E5"> you</font>

497
00:21:19,720 --> 00:21:24,010
know<font color="#E5E5E5"> there is something weird when you</font>

498
00:21:21,520 --> 00:21:26,440
have these different<font color="#E5E5E5"> outputs so in here</font>

499
00:21:24,010 --> 00:21:27,910
<font color="#E5E5E5">we</font><font color="#CCCCCC"> have different implementations</font><font color="#E5E5E5"> and we</font>

500
00:21:26,440 --> 00:21:30,750
know there is<font color="#E5E5E5"> something weird going on</font>

501
00:21:27,910 --> 00:21:33,940
because the estimate output is<font color="#CCCCCC"> changing</font>

502
00:21:30,750 --> 00:21:35,560
this<font color="#E5E5E5"> is not the</font><font color="#CCCCCC"> only way</font><font color="#E5E5E5"> to detect in</font>

503
00:21:33,940 --> 00:21:38,650
different implementation<font color="#E5E5E5"> that something</font>

504
00:21:35,560 --> 00:21:40,240
went different<font color="#E5E5E5"> for this talk I was</font>

505
00:21:38,650 --> 00:21:46,300
trying to<font color="#E5E5E5"> analyze what happened with</font>

506
00:21:40,240 --> 00:21:48,430
certain<font color="#CCCCCC"> Java functions always random</font>

507
00:21:46,300 --> 00:21:51,490
numbers are something<font color="#E5E5E5"> interesting and I</font>

508
00:21:48,430 --> 00:21:58,420
was fussing this function gets seed in

509
00:21:51,490 --> 00:22:00,640
to Java parsers the first column is open

510
00:21:58,420 --> 00:22:02,440
JDK the<font color="#E5E5E5"> second one is for Oracle</font><font color="#CCCCCC"> there</font>

511
00:22:00,640 --> 00:22:06,100
are different<font color="#CCCCCC"> versions there this one is</font>

512
00:22:02,440 --> 00:22:07,929
<font color="#CCCCCC">8 this</font><font color="#E5E5E5"> one is knowing so in here for</font>

513
00:22:06,100 --> 00:22:09,908
open JDK 8 the

514
00:22:07,929 --> 00:22:12,610
so<font color="#CCCCCC"> four is</font><font color="#E5E5E5"> not kill and it's going to</font>

515
00:22:09,909 --> 00:22:14,999
<font color="#CCCCCC">show an exception that is going to run</font>

516
00:22:12,610 --> 00:22:18,459
<font color="#E5E5E5">out</font><font color="#CCCCCC"> of memory</font>

517
00:22:14,999 --> 00:22:20,529
however Oracle<font color="#CCCCCC"> it needs to be killed</font>

518
00:22:18,460 --> 00:22:22,539
because<font color="#E5E5E5"> it takes a gigantic amount</font><font color="#CCCCCC"> of</font>

519
00:22:20,529 --> 00:22:26,110
time and it starts to consume memory

520
00:22:22,539 --> 00:22:28,029
memory memory memory until<font color="#E5E5E5"> it crashes so</font>

521
00:22:26,110 --> 00:22:29,678
they behave quite differently<font color="#CCCCCC"> and you</font>

522
00:22:28,029 --> 00:22:32,409
can get you can know from<font color="#E5E5E5"> the get-go</font>

523
00:22:29,679 --> 00:22:34,600
that<font color="#E5E5E5"> something is going on by analyzing</font>

524
00:22:32,409 --> 00:22:40,179
if it was kill<font color="#E5E5E5"> or not or if there</font><font color="#CCCCCC"> was a</font>

525
00:22:34,600 --> 00:22:41,799
<font color="#E5E5E5">different only standard error we talk</font>

526
00:22:40,179 --> 00:22:43,929
about<font color="#E5E5E5"> different implementations now</font>

527
00:22:41,799 --> 00:22:46,658
let's talk about<font color="#E5E5E5"> the same piece of</font>

528
00:22:43,929 --> 00:22:49,299
software<font color="#CCCCCC"> but changing the</font><font color="#E5E5E5"> input this is</font>

529
00:22:46,659 --> 00:22:52,659
where but<font color="#CCCCCC"> no it</font><font color="#E5E5E5"> helped us with it</font>

530
00:22:49,299 --> 00:22:56,759
so the first line shows that we are

531
00:22:52,659 --> 00:23:01,059
writing the common console dot log and

532
00:22:56,759 --> 00:23:03,399
this<font color="#E5E5E5"> between</font><font color="#CCCCCC"> parenthesis into the file</font>

533
00:23:01,059 --> 00:23:05,710
file dot yes and<font color="#CCCCCC"> we'll execute him that</font>

534
00:23:03,399 --> 00:23:08,619
far<font color="#E5E5E5"> the input here is going to be a</font>

535
00:23:05,710 --> 00:23:11,379
father for<font color="#CCCCCC"> the second column</font><font color="#E5E5E5"> the input</font>

536
00:23:08,619 --> 00:23:13,029
is going<font color="#E5E5E5"> to</font><font color="#CCCCCC"> be</font><font color="#E5E5E5"> the common line input and</font>

537
00:23:11,379 --> 00:23:17,168
we're going<font color="#CCCCCC"> to execute</font><font color="#E5E5E5"> the very same</font>

538
00:23:13,029 --> 00:23:18,789
thing okay<font color="#E5E5E5"> the first one is going to be</font>

539
00:23:17,169 --> 00:23:21,419
an<font color="#CCCCCC"> empty dictionary the second one is</font>

540
00:23:18,789 --> 00:23:23,470
going to be<font color="#E5E5E5"> this I have no idea why but</font>

541
00:23:21,419 --> 00:23:24,789
<font color="#CCCCCC">we're talking</font><font color="#E5E5E5"> about the same piece of</font>

542
00:23:23,470 --> 00:23:27,279
software<font color="#CCCCCC"> here and you can detect</font>

543
00:23:24,789 --> 00:23:29,529
<font color="#E5E5E5">something just by just</font><font color="#CCCCCC"> in one single</font>

544
00:23:27,279 --> 00:23:30,730
piece<font color="#CCCCCC"> of</font><font color="#E5E5E5"> software it didn't crash you</font>

545
00:23:29,529 --> 00:23:32,019
didn't<font color="#CCCCCC"> need a something at just one</font>

546
00:23:30,730 --> 00:23:39,369
piece of<font color="#CCCCCC"> software</font><font color="#E5E5E5"> and checking how the</font>

547
00:23:32,019 --> 00:23:42,190
inputs change I wanted to check a little

548
00:23:39,369 --> 00:23:45,459
<font color="#E5E5E5">bit</font><font color="#CCCCCC"> also for this</font><font color="#E5E5E5"> conference how</font>

549
00:23:42,190 --> 00:23:47,320
PowerShell behaved<font color="#CCCCCC"> I didn't get too many</font>

550
00:23:45,460 --> 00:23:48,940
interesting<font color="#CCCCCC"> things in here</font><font color="#E5E5E5"> but I wanted</font>

551
00:23:47,320 --> 00:23:52,629
<font color="#CCCCCC">to share a little bit</font><font color="#E5E5E5"> that about for</font>

552
00:23:48,940 --> 00:23:55,049
example<font color="#CCCCCC"> what happens with when you're</font>

553
00:23:52,629 --> 00:23:58,480
<font color="#CCCCCC">trying</font><font color="#E5E5E5"> to leave the directory of where</font>

554
00:23:55,049 --> 00:24:00,340
<font color="#E5E5E5">you're sitting</font><font color="#CCCCCC"> right in</font><font color="#E5E5E5"> here the idea</font>

555
00:23:58,480 --> 00:24:02,710
<font color="#E5E5E5">that if you execute this you will get</font>

556
00:24:00,340 --> 00:24:04,480
<font color="#E5E5E5">the same output</font><font color="#CCCCCC"> as right endear</font><font color="#E5E5E5"> however</font>

557
00:24:02,710 --> 00:24:07,629
you're<font color="#E5E5E5"> processing this through</font>

558
00:24:04,480 --> 00:24:09,129
PowerShell<font color="#E5E5E5"> the first column you're using</font>

559
00:24:07,629 --> 00:24:11,279
a file the second column you're<font color="#E5E5E5"> using</font>

560
00:24:09,129 --> 00:24:14,529
this<font color="#CCCCCC"> number input</font><font color="#E5E5E5"> the first column says</font>

561
00:24:11,279 --> 00:24:17,109
listen<font color="#CCCCCC"> this</font><font color="#E5E5E5"> violates the execution</font>

562
00:24:14,529 --> 00:24:19,629
policy<font color="#E5E5E5"> is said by power so on whatever</font>

563
00:24:17,109 --> 00:24:21,520
whatever<font color="#CCCCCC"> add</font><font color="#E5E5E5"> read message it is horrible</font>

564
00:24:19,629 --> 00:24:26,500
<font color="#E5E5E5">don't do this</font><font color="#CCCCCC"> at home</font><font color="#E5E5E5"> but</font>

565
00:24:21,520 --> 00:24:28,930
execuse dear<font color="#CCCCCC"> I don't know why</font><font color="#E5E5E5"> I'm sure</font>

566
00:24:26,500 --> 00:24:31,120
there<font color="#E5E5E5"> is some reasoning behind this but</font>

567
00:24:28,930 --> 00:24:32,710
it<font color="#E5E5E5"> is a different behavior and you may</font>

568
00:24:31,120 --> 00:24:34,330
want to do something about this perhaps

569
00:24:32,710 --> 00:24:38,380
<font color="#E5E5E5">the</font><font color="#CCCCCC"> next time</font><font color="#E5E5E5"> you don't</font><font color="#CCCCCC"> want to use a</font>

570
00:24:34,330 --> 00:24:41,320
file and<font color="#E5E5E5"> you may use this so</font><font color="#CCCCCC"> da da is</font>

571
00:24:38,380 --> 00:24:43,210
<font color="#E5E5E5">that there are ways of using the same</font>

572
00:24:41,320 --> 00:24:48,600
piece of<font color="#E5E5E5"> sword</font><font color="#CCCCCC"> in</font><font color="#E5E5E5"> different ways that</font>

573
00:24:43,210 --> 00:24:51,580
you can execute things in different<font color="#CCCCCC"> ways</font>

574
00:24:48,600 --> 00:24:53,050
let's<font color="#E5E5E5"> move on to different</font><font color="#CCCCCC"> versions</font><font color="#E5E5E5"> so</font>

575
00:24:51,580 --> 00:24:55,540
we talked<font color="#CCCCCC"> about</font><font color="#E5E5E5"> different</font>

576
00:24:53,050 --> 00:24:56,980
implementations but that<font color="#E5E5E5"> means different</font>

577
00:24:55,540 --> 00:24:59,110
<font color="#CCCCCC">pieces of</font><font color="#E5E5E5"> software</font><font color="#CCCCCC"> from different</font>

578
00:24:56,980 --> 00:25:01,750
<font color="#E5E5E5">companies we</font><font color="#CCCCCC"> talked</font><font color="#E5E5E5"> about the same piece</font>

579
00:24:59,110 --> 00:25:03,340
<font color="#E5E5E5">of software and now we're talking</font><font color="#CCCCCC"> about</font>

580
00:25:01,750 --> 00:25:05,380
the different<font color="#E5E5E5"> versions</font><font color="#CCCCCC"> of</font><font color="#E5E5E5"> the same piece</font>

581
00:25:03,340 --> 00:25:07,449
<font color="#CCCCCC">of software again no</font><font color="#E5E5E5"> it helped us with</font>

582
00:25:05,380 --> 00:25:09,700
this<font color="#E5E5E5"> we'll be talking about writing the</font>

583
00:25:07,450 --> 00:25:11,380
output<font color="#CCCCCC"> of this if you</font><font color="#E5E5E5"> remember the</font>

584
00:25:09,700 --> 00:25:14,320
problem<font color="#E5E5E5"> was that when we were using the</font>

585
00:25:11,380 --> 00:25:17,140
<font color="#CCCCCC">common line he was outputting the</font><font color="#E5E5E5"> the</font>

586
00:25:14,320 --> 00:25:20,260
user and so on<font color="#E5E5E5"> bla bla bla the thing is</font>

587
00:25:17,140 --> 00:25:23,650
in<font color="#CCCCCC"> the past a</font><font color="#E5E5E5"> lot</font><font color="#CCCCCC"> of time ago it</font><font color="#E5E5E5"> used to</font>

588
00:25:20,260 --> 00:25:27,820
<font color="#CCCCCC">help Atossa</font><font color="#E5E5E5"> an empty dictionary</font><font color="#CCCCCC"> but well</font>

589
00:25:23,650 --> 00:25:29,860
nowadays<font color="#CCCCCC"> idioms</font><font color="#E5E5E5"> it shows that thing so</font>

590
00:25:27,820 --> 00:25:33,300
you can see how the same piece of

591
00:25:29,860 --> 00:25:39,610
software has changed throughout time<font color="#E5E5E5"> so</font>

592
00:25:33,300 --> 00:25:42,840
the possibilities are enormous<font color="#E5E5E5"> still</font>

593
00:25:39,610 --> 00:25:45,699
<font color="#E5E5E5">talking about different versions</font>

594
00:25:42,840 --> 00:25:47,470
different versions<font color="#CCCCCC"> oh yeah because we</font>

595
00:25:45,700 --> 00:25:52,030
were talking<font color="#CCCCCC"> about</font><font color="#E5E5E5"> Java this is another</font>

596
00:25:47,470 --> 00:25:52,900
<font color="#E5E5E5">random functionality ah I really</font><font color="#CCCCCC"> want</font>

597
00:25:52,030 --> 00:25:55,990
you to<font color="#E5E5E5"> find something more</font><font color="#CCCCCC"> interesting</font>

598
00:25:52,900 --> 00:25:57,820
<font color="#CCCCCC">but I still want to share that</font><font color="#E5E5E5"> on in</font>

599
00:25:55,990 --> 00:25:59,290
<font color="#E5E5E5">different versions of Java you may see a</font>

600
00:25:57,820 --> 00:26:01,990
<font color="#E5E5E5">different behavior when it comes to this</font>

601
00:25:59,290 --> 00:26:04,060
<font color="#E5E5E5">so when you're trying to generate</font><font color="#CCCCCC"> a seed</font>

602
00:26:01,990 --> 00:26:06,040
<font color="#E5E5E5">for the random for a secure random</font>

603
00:26:04,060 --> 00:26:08,260
<font color="#CCCCCC">number the behavior is</font><font color="#E5E5E5"> going</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> be</font>

604
00:26:06,040 --> 00:26:12,010
different<font color="#CCCCCC"> depending if it is open JDK or</font>

605
00:26:08,260 --> 00:26:13,450
Oracle you can tell<font color="#E5E5E5"> that</font><font color="#CCCCCC"> from the</font><font color="#E5E5E5"> return</font>

606
00:26:12,010 --> 00:26:15,790
code that is going<font color="#CCCCCC"> to be</font><font color="#E5E5E5"> different and</font>

607
00:26:13,450 --> 00:26:17,560
<font color="#CCCCCC">you can see that something's</font><font color="#E5E5E5"> going on</font><font color="#CCCCCC"> or</font>

608
00:26:15,790 --> 00:26:19,750
it<font color="#CCCCCC"> will be more obvious when</font><font color="#E5E5E5"> you're</font>

609
00:26:17,560 --> 00:26:22,659
<font color="#CCCCCC">checking</font><font color="#E5E5E5"> this on that error and see that</font>

610
00:26:19,750 --> 00:26:24,610
in<font color="#E5E5E5"> one</font><font color="#CCCCCC"> case it says listen</font><font color="#E5E5E5"> this</font><font color="#CCCCCC"> is going</font>

611
00:26:22,660 --> 00:26:30,660
to be removed<font color="#E5E5E5"> in other cases says this</font>

612
00:26:24,610 --> 00:26:30,659
is not<font color="#E5E5E5"> here another possibility</font>

613
00:26:33,110 --> 00:26:36,530
which is<font color="#E5E5E5"> more annoying which is more</font>

614
00:26:35,090 --> 00:26:38,330
<font color="#E5E5E5">annoying when</font><font color="#CCCCCC"> it comes to a practical</font>

615
00:26:36,530 --> 00:26:39,950
<font color="#E5E5E5">term of what are you doing</font><font color="#CCCCCC"> because we</font>

616
00:26:38,330 --> 00:26:42,470
normally<font color="#CCCCCC"> only</font><font color="#E5E5E5"> see</font><font color="#CCCCCC"> it in one operating</font>

617
00:26:39,950 --> 00:26:43,880
system<font color="#E5E5E5"> but if you run multiple much</font>

618
00:26:42,470 --> 00:26:45,290
<font color="#E5E5E5">spiritual machines or something like</font>

619
00:26:43,880 --> 00:26:48,049
<font color="#E5E5E5">that and</font><font color="#CCCCCC"> you</font><font color="#E5E5E5"> want to foster and compare</font>

620
00:26:45,290 --> 00:26:50,330
what<font color="#E5E5E5"> happens in</font><font color="#CCCCCC"> different operating</font>

621
00:26:48,049 --> 00:26:53,960
systems you may get other things<font color="#E5E5E5"> which</font>

622
00:26:50,330 --> 00:26:56,330
<font color="#E5E5E5">are interesting as well in Python you</font>

623
00:26:53,960 --> 00:26:57,590
<font color="#CCCCCC">have a</font><font color="#E5E5E5"> built-in functionality or by the</font>

624
00:26:56,330 --> 00:27:00,770
way all the things that<font color="#CCCCCC"> your team is</font>

625
00:26:57,590 --> 00:27:02,030
<font color="#CCCCCC">seeing</font><font color="#E5E5E5"> here are the</font><font color="#CCCCCC"> four functionalities</font>

626
00:27:00,770 --> 00:27:07,580
from the programming languages<font color="#E5E5E5"> or</font>

627
00:27:02,030 --> 00:27:11,178
software<font color="#E5E5E5"> CMP compares</font><font color="#CCCCCC"> two objects the</font>

628
00:27:07,580 --> 00:27:13,549
thing<font color="#E5E5E5"> about this is</font><font color="#CCCCCC"> that when you're</font>

629
00:27:11,179 --> 00:27:17,540
trying to<font color="#E5E5E5"> compare two floating-point not</font>

630
00:27:13,549 --> 00:27:20,110
a number values the result is going<font color="#E5E5E5"> to</font>

631
00:27:17,540 --> 00:27:24,200
defer depending on the operating system

632
00:27:20,110 --> 00:27:26,899
<font color="#CCCCCC">and this is</font><font color="#E5E5E5"> what happens</font><font color="#CCCCCC"> so we have</font>

633
00:27:24,200 --> 00:27:29,360
<font color="#E5E5E5">three pieces of software regular Python</font>

634
00:27:26,900 --> 00:27:31,190
<font color="#E5E5E5">pi PI and G</font><font color="#CCCCCC"> Tom I don't know if you</font>

635
00:27:29,360 --> 00:27:33,559
pronounce<font color="#CCCCCC"> it like that</font><font color="#E5E5E5"> and I tested in</font>

636
00:27:31,190 --> 00:27:36,080
all these operating<font color="#E5E5E5"> systems</font><font color="#CCCCCC"> and this was</font>

637
00:27:33,559 --> 00:27:38,660
the<font color="#E5E5E5"> output in all of them this</font><font color="#CCCCCC"> will be</font>

638
00:27:36,080 --> 00:27:42,649
<font color="#CCCCCC">the correct output</font><font color="#E5E5E5"> when testing when</font>

639
00:27:38,660 --> 00:27:45,770
comparing<font color="#E5E5E5"> two floating-point not a</font>

640
00:27:42,650 --> 00:27:47,840
number of values<font color="#E5E5E5"> because each they</font>

641
00:27:45,770 --> 00:27:51,700
shouldn't be equal it should be the

642
00:27:47,840 --> 00:27:54,168
number<font color="#CCCCCC"> one</font><font color="#E5E5E5"> Linux</font><font color="#CCCCCC"> things differently</font>

643
00:27:51,700 --> 00:27:57,320
<font color="#E5E5E5">Linux believes it</font><font color="#CCCCCC"> should be a</font><font color="#E5E5E5"> minus one</font>

644
00:27:54,169 --> 00:28:00,980
for some<font color="#CCCCCC"> reason</font><font color="#E5E5E5"> on the same way as pi PI</font>

645
00:27:57,320 --> 00:28:02,720
things that is<font color="#E5E5E5"> zero even</font><font color="#CCCCCC"> though it it</font>

646
00:28:00,980 --> 00:28:05,150
<font color="#E5E5E5">should never be seed of zero because</font>

647
00:28:02,720 --> 00:28:08,720
<font color="#E5E5E5">there is a non reflexive behavior of</font><font color="#CCCCCC"> not</font>

648
00:28:05,150 --> 00:28:10,880
a number so you<font color="#E5E5E5"> can get a</font><font color="#CCCCCC"> really</font>

649
00:28:08,720 --> 00:28:13,730
interesting picture when you test a lot

650
00:28:10,880 --> 00:28:19,690
<font color="#E5E5E5">of programming languages and pieces</font><font color="#CCCCCC"> of</font>

651
00:28:13,730 --> 00:28:21,919
software at the same time<font color="#E5E5E5"> PowerShell</font>

652
00:28:19,690 --> 00:28:24,080
<font color="#E5E5E5">different operating systems remember</font>

653
00:28:21,919 --> 00:28:27,620
that we when I try<font color="#E5E5E5"> to execute this thing</font>

654
00:28:24,080 --> 00:28:29,330
over<font color="#CCCCCC"> here this horrible</font><font color="#E5E5E5"> red</font><font color="#CCCCCC"> message of</font>

655
00:28:27,620 --> 00:28:31,879
course is not<font color="#CCCCCC"> going to happen</font><font color="#E5E5E5"> in Linux</font>

656
00:28:29,330 --> 00:28:33,590
<font color="#E5E5E5">because who cares about policies in</font>

657
00:28:31,880 --> 00:28:37,820
Linux when you're talking<font color="#E5E5E5"> about</font><font color="#CCCCCC"> power</font>

658
00:28:33,590 --> 00:28:41,770
<font color="#E5E5E5">so again different brain systems may</font>

659
00:28:37,820 --> 00:28:41,770
really may show you different<font color="#CCCCCC"> results</font>

660
00:28:42,510 --> 00:28:48,220
[Music]

661
00:28:45,490 --> 00:28:49,600
let's move on to<font color="#E5E5E5"> the fun part</font><font color="#CCCCCC"> well we're</font>

662
00:28:48,220 --> 00:28:52,600
talking<font color="#CCCCCC"> about</font><font color="#E5E5E5"> extend the differential</font>

663
00:28:49,600 --> 00:28:56,409
<font color="#E5E5E5">forcing we have talked</font><font color="#CCCCCC"> about how</font><font color="#E5E5E5"> we were</font>

664
00:28:52,600 --> 00:28:57,580
<font color="#CCCCCC">using</font><font color="#E5E5E5"> basically inputs</font><font color="#CCCCCC"> but</font><font color="#E5E5E5"> we were</font>

665
00:28:56,410 --> 00:28:59,770
trying different<font color="#CCCCCC"> pieces of</font><font color="#E5E5E5"> software</font>

666
00:28:57,580 --> 00:29:03,310
<font color="#CCCCCC">different payment system versions and</font>

667
00:28:59,770 --> 00:29:06,220
whatever what we will try to see in here

668
00:29:03,310 --> 00:29:09,550
<font color="#E5E5E5">is to try</font><font color="#CCCCCC"> to get more vulnerabilities we</font>

669
00:29:06,220 --> 00:29:11,920
found so<font color="#CCCCCC"> far certain issues</font><font color="#E5E5E5"> but</font><font color="#CCCCCC"> it is</font>

670
00:29:09,550 --> 00:29:13,690
<font color="#E5E5E5">really easy to detect certain things</font>

671
00:29:11,920 --> 00:29:15,510
like<font color="#CCCCCC"> for example path disclosure is</font>

672
00:29:13,690 --> 00:29:18,340
<font color="#E5E5E5">really easy to detect in the output that</font>

673
00:29:15,510 --> 00:29:20,530
certain pieces of<font color="#E5E5E5"> software are going to</font>

674
00:29:18,340 --> 00:29:22,929
be<font color="#E5E5E5"> showing</font><font color="#CCCCCC"> the path where</font><font color="#E5E5E5"> they're being</font>

675
00:29:20,530 --> 00:29:25,500
executed<font color="#CCCCCC"> all the user that has been</font>

676
00:29:22,930 --> 00:29:27,910
executed<font color="#CCCCCC"> in</font><font color="#E5E5E5"> these pieces of</font><font color="#CCCCCC"> software</font>

677
00:29:25,500 --> 00:29:30,520
eventually we can<font color="#E5E5E5"> also get errors when</font>

678
00:29:27,910 --> 00:29:32,740
we're executing software<font color="#E5E5E5"> we see the</font>

679
00:29:30,520 --> 00:29:35,950
errors showing all the time but we<font color="#E5E5E5"> may</font>

680
00:29:32,740 --> 00:29:37,630
<font color="#E5E5E5">want to do something about that the code</font>

681
00:29:35,950 --> 00:29:39,400
<font color="#E5E5E5">being evaluated if you're working with</font>

682
00:29:37,630 --> 00:29:42,340
programming languages you may want to

683
00:29:39,400 --> 00:29:44,650
know if a certain input<font color="#CCCCCC"> is evaluating</font>

684
00:29:42,340 --> 00:29:46,330
code or if a common is<font color="#CCCCCC"> being executed</font>

685
00:29:44,650 --> 00:29:47,890
<font color="#CCCCCC">there are different</font><font color="#E5E5E5"> ways of a</font><font color="#CCCCCC"> comment</font>

686
00:29:46,330 --> 00:29:50,889
can<font color="#E5E5E5"> get executed and you want to know</font>

687
00:29:47,890 --> 00:29:52,900
<font color="#CCCCCC">these certain pieces of software open</font>

688
00:29:50,890 --> 00:29:55,230
network connection as I said before<font color="#E5E5E5"> you</font>

689
00:29:52,900 --> 00:29:58,150
may want to do something<font color="#CCCCCC"> about that</font>

690
00:29:55,230 --> 00:30:01,090
when<font color="#E5E5E5"> there being an open one or when</font>

691
00:29:58,150 --> 00:30:02,890
they<font color="#E5E5E5"> are not</font><font color="#CCCCCC"> being open and eventually</font>

692
00:30:01,090 --> 00:30:07,750
you may want<font color="#CCCCCC"> to know when the files are</font>

693
00:30:02,890 --> 00:30:10,150
read so let's go with<font color="#E5E5E5"> the basic thing</font>

694
00:30:07,750 --> 00:30:13,300
and talk about<font color="#E5E5E5"> how</font><font color="#CCCCCC"> FAR's are the</font><font color="#E5E5E5"> leading</font>

695
00:30:10,150 --> 00:30:16,360
<font color="#E5E5E5">on</font><font color="#CCCCCC"> Linux</font><font color="#E5E5E5"> just to exemplify how this may</font>

696
00:30:13,300 --> 00:30:18,879
work because I had to do this because<font color="#E5E5E5"> I</font>

697
00:30:16,360 --> 00:30:21,040
<font color="#CCCCCC">wasn't sure that</font><font color="#E5E5E5"> things work</font><font color="#CCCCCC"> like this</font>

698
00:30:18,880 --> 00:30:23,680
when you're<font color="#E5E5E5"> trying to remove a fart that</font>

699
00:30:21,040 --> 00:30:27,159
doesn't exist<font color="#CCCCCC"> you get that that file</font>

700
00:30:23,680 --> 00:30:30,970
doesn't exist<font color="#CCCCCC"> period</font><font color="#E5E5E5"> when you create a</font>

701
00:30:27,160 --> 00:30:34,540
file that<font color="#CCCCCC"> you will try to remove and the</font>

702
00:30:30,970 --> 00:30:37,360
<font color="#CCCCCC">minus c</font><font color="#E5E5E5"> is for confirmed if it if it is</font>

703
00:30:34,540 --> 00:30:38,740
<font color="#CCCCCC">going</font><font color="#E5E5E5"> to be remove or not</font><font color="#CCCCCC"> linux</font><font color="#E5E5E5"> asked do</font>

704
00:30:37,360 --> 00:30:40,919
you<font color="#CCCCCC"> want to remove the existing</font><font color="#E5E5E5"> farm</font>

705
00:30:38,740 --> 00:30:45,910
<font color="#E5E5E5">even though we're on the TMP directory</font>

706
00:30:40,920 --> 00:30:47,980
<font color="#E5E5E5">the director is not being disclosed this</font>

707
00:30:45,910 --> 00:30:50,650
is another output<font color="#E5E5E5"> from the tool the</font>

708
00:30:47,980 --> 00:30:54,460
output<font color="#E5E5E5"> of trying to get any part of this</font>

709
00:30:50,650 --> 00:30:59,220
closure when<font color="#CCCCCC"> i was fussing powershell i</font>

710
00:30:54,460 --> 00:31:01,450
came across<font color="#E5E5E5"> that when powers</font>

711
00:30:59,220 --> 00:31:05,380
requires a confirmation<font color="#CCCCCC"> to</font><font color="#E5E5E5"> the leader</font>

712
00:31:01,450 --> 00:31:08,440
file in<font color="#CCCCCC"> may disclose</font><font color="#E5E5E5"> where that file is</font>

713
00:31:05,380 --> 00:31:11,200
<font color="#E5E5E5">located it's not a big deal in here I'm</font>

714
00:31:08,440 --> 00:31:13,360
<font color="#E5E5E5">just trying</font><font color="#CCCCCC"> to exemplify</font><font color="#E5E5E5"> that you can</font>

715
00:31:11,200 --> 00:31:15,010
execute you can<font color="#CCCCCC"> easily get this</font><font color="#E5E5E5"> from any</font>

716
00:31:13,360 --> 00:31:16,209
type of<font color="#E5E5E5"> software and sometimes you can</font>

717
00:31:15,010 --> 00:31:18,690
escalate things<font color="#E5E5E5"> when you're getting</font>

718
00:31:16,210 --> 00:31:20,700
<font color="#E5E5E5">these pieces of information so</font>

719
00:31:18,690 --> 00:31:23,559
exemplifying what happens in<font color="#E5E5E5"> PowerShell</font>

720
00:31:20,700 --> 00:31:25,690
<font color="#E5E5E5">when you're trying to remove an an onyx</font>

721
00:31:23,559 --> 00:31:28,510
system file<font color="#E5E5E5"> the very beginning I show</font>

722
00:31:25,690 --> 00:31:31,270
<font color="#CCCCCC">you what happened in here</font><font color="#E5E5E5"> you get like a</font>

723
00:31:28,510 --> 00:31:33,520
big error message that<font color="#E5E5E5"> says in the users</font>

724
00:31:31,270 --> 00:31:36,010
directory<font color="#CCCCCC"> there is no such file</font><font color="#E5E5E5"> name</font>

725
00:31:33,520 --> 00:31:37,480
<font color="#CCCCCC">non-existent file</font><font color="#E5E5E5"> and you get the use</font>

726
00:31:36,010 --> 00:31:41,650
you get<font color="#E5E5E5"> the directory where you're</font>

727
00:31:37,480 --> 00:31:43,450
sitting<font color="#E5E5E5"> if you do the same thing by</font>

728
00:31:41,650 --> 00:31:46,299
creating a file<font color="#E5E5E5"> and then trying to</font>

729
00:31:43,450 --> 00:31:48,159
remove the<font color="#CCCCCC"> existing file again you're</font>

730
00:31:46,299 --> 00:31:50,740
going<font color="#CCCCCC"> to get the directory</font><font color="#E5E5E5"> where you're</font>

731
00:31:48,159 --> 00:31:53,110
sitting you can<font color="#E5E5E5"> get this information it</font>

732
00:31:50,740 --> 00:31:54,400
may be valuable or<font color="#CCCCCC"> not if it</font><font color="#E5E5E5"> is not</font>

733
00:31:53,110 --> 00:31:56,020
<font color="#E5E5E5">possible you continue with something</font>

734
00:31:54,400 --> 00:32:00,400
<font color="#E5E5E5">else let's talk about use</font><font color="#CCCCCC"> of</font><font color="#E5E5E5"> this</font>

735
00:31:56,020 --> 00:32:04,418
<font color="#E5E5E5">closure</font><font color="#CCCCCC"> ah sometimes when you</font><font color="#E5E5E5"> see a</font>

736
00:32:00,400 --> 00:32:06,820
<font color="#CCCCCC">passing talk you see all the the or you</font>

737
00:32:04,419 --> 00:32:10,600
don't see any<font color="#CCCCCC"> results at all</font><font color="#E5E5E5"> that may</font>

738
00:32:06,820 --> 00:32:13,000
happen<font color="#CCCCCC"> or you see a very neat result of</font>

739
00:32:10,600 --> 00:32:14,830
how<font color="#E5E5E5"> something was executed but the</font>

740
00:32:13,000 --> 00:32:16,630
reality is<font color="#E5E5E5"> that when you're fussing</font>

741
00:32:14,830 --> 00:32:18,158
something sometimes you<font color="#CCCCCC"> get a ton of</font>

742
00:32:16,630 --> 00:32:20,919
<font color="#E5E5E5">different results that are doing the</font>

743
00:32:18,159 --> 00:32:23,890
<font color="#E5E5E5">same thing and this could be translated</font>

744
00:32:20,919 --> 00:32:26,440
<font color="#E5E5E5">into one single test case in this case</font>

745
00:32:23,890 --> 00:32:29,409
<font color="#E5E5E5">there was the tool is looking for my</font>

746
00:32:26,440 --> 00:32:34,870
<font color="#E5E5E5">username fear that is being disclosed in</font>

747
00:32:29,409 --> 00:32:36,669
the<font color="#E5E5E5"> output</font><font color="#CCCCCC"> PowerShell it's when you ride</font>

748
00:32:34,870 --> 00:32:39,580
<font color="#CCCCCC">the</font><font color="#E5E5E5"> phones when you execute a certain</font>

749
00:32:36,669 --> 00:32:44,140
functionality will try to output a file

750
00:32:39,580 --> 00:32:45,970
<font color="#E5E5E5">into my home directory</font><font color="#CCCCCC"> I would have</font>

751
00:32:44,140 --> 00:32:48,010
expected<font color="#CCCCCC"> that to be provided by the</font><font color="#E5E5E5"> user</font>

752
00:32:45,970 --> 00:32:50,500
so<font color="#CCCCCC"> it doesn't get written over there</font><font color="#E5E5E5"> so</font>

753
00:32:48,010 --> 00:32:53,860
it was a little bit unusual for<font color="#E5E5E5"> me to</font>

754
00:32:50,500 --> 00:32:55,900
<font color="#E5E5E5">see that</font><font color="#CCCCCC"> over there</font><font color="#E5E5E5"> how you execute this</font>

755
00:32:53,860 --> 00:33:00,399
when you<font color="#E5E5E5"> translate that horrible list</font>

756
00:32:55,900 --> 00:33:02,530
in here you<font color="#E5E5E5"> have like 14 rows doing the</font>

757
00:33:00,400 --> 00:33:05,380
<font color="#E5E5E5">same thing which in fact could be</font>

758
00:33:02,530 --> 00:33:08,080
<font color="#CCCCCC">translated to this when you execute</font>

759
00:33:05,380 --> 00:33:12,460
start transcript<font color="#E5E5E5"> start transcript is</font>

760
00:33:08,080 --> 00:33:15,370
going to show the<font color="#CCCCCC"> username</font>

761
00:33:12,460 --> 00:33:18,060
that is executing<font color="#E5E5E5"> the power show so you</font>

762
00:33:15,370 --> 00:33:24,879
can get the path<font color="#E5E5E5"> you can get the user</font>

763
00:33:18,060 --> 00:33:26,950
you also can get errors<font color="#E5E5E5"> um when I ask</font>

764
00:33:24,880 --> 00:33:29,260
<font color="#CCCCCC">people what they do</font><font color="#E5E5E5"> for a</font><font color="#CCCCCC"> living I tried</font>

765
00:33:26,950 --> 00:33:33,160
to ask them if they<font color="#CCCCCC"> could give</font><font color="#E5E5E5"> me a real</font>

766
00:33:29,260 --> 00:33:35,020
<font color="#E5E5E5">example of what they did lately</font><font color="#CCCCCC"> uh</font><font color="#E5E5E5"> I</font>

767
00:33:33,160 --> 00:33:37,600
<font color="#CCCCCC">believe the same thing happens for</font>

768
00:33:35,020 --> 00:33:41,920
fussing<font color="#E5E5E5"> and this was this is my real</font>

769
00:33:37,600 --> 00:33:44,590
example<font color="#CCCCCC"> a month ago</font><font color="#E5E5E5"> I was testing three</font>

770
00:33:41,920 --> 00:33:46,600
pieces of<font color="#E5E5E5"> software one for Windows one</font>

771
00:33:44,590 --> 00:33:49,899
for Linux<font color="#E5E5E5"> one for OSX</font>

772
00:33:46,600 --> 00:33:53,889
<font color="#CCCCCC">I don't</font><font color="#E5E5E5"> remember why I couldn't execute</font>

773
00:33:49,900 --> 00:33:55,960
the<font color="#CCCCCC"> oxx the OS</font><font color="#E5E5E5"> X file the the</font><font color="#CCCCCC"> Windows</font>

774
00:33:53,890 --> 00:33:59,080
<font color="#CCCCCC">File didn't have a config file I only</font>

775
00:33:55,960 --> 00:34:00,880
have the Linux file to be executed<font color="#CCCCCC"> I was</font>

776
00:33:59,080 --> 00:34:02,230
<font color="#E5E5E5">planning</font><font color="#CCCCCC"> to do some differential testing</font>

777
00:34:00,880 --> 00:34:06,640
but<font color="#E5E5E5"> I only had</font><font color="#CCCCCC"> one piece of software</font>

778
00:34:02,230 --> 00:34:09,520
<font color="#E5E5E5">still</font><font color="#CCCCCC"> I executed through the tool and I</font>

779
00:34:06,640 --> 00:34:14,410
got there is a functionality<font color="#E5E5E5"> to look for</font>

780
00:34:09,520 --> 00:34:15,429
errors<font color="#E5E5E5"> that looks for certain strings in</font>

781
00:34:14,409 --> 00:34:17,049
here we're<font color="#CCCCCC"> looking for the word</font>

782
00:34:15,429 --> 00:34:20,290
exception<font color="#CCCCCC"> I came across the word</font>

783
00:34:17,050 --> 00:34:23,560
exception in here<font color="#CCCCCC"> the sax</font><font color="#E5E5E5"> bars exception</font>

784
00:34:20,290 --> 00:34:26,620
is related<font color="#CCCCCC"> to an XML error</font><font color="#E5E5E5"> and due to</font>

785
00:34:23,560 --> 00:34:30,100
the<font color="#CCCCCC"> faster pinpointing this error</font><font color="#E5E5E5"> I was</font>

786
00:34:26,620 --> 00:34:34,359
able to perform<font color="#CCCCCC"> an XML entity expansion</font>

787
00:34:30,100 --> 00:34:38,679
attack to<font color="#E5E5E5"> try to read files from where</font>

788
00:34:34,360 --> 00:34:40,570
this was being<font color="#E5E5E5"> executed</font><font color="#CCCCCC"> and this is how</font>

789
00:34:38,679 --> 00:34:43,239
fussing works in the real world you may

790
00:34:40,570 --> 00:34:47,130
<font color="#CCCCCC">eventually get one hint of what you</font>

791
00:34:43,239 --> 00:34:49,839
<font color="#E5E5E5">should do to get</font><font color="#CCCCCC"> a vulnerability</font><font color="#E5E5E5"> and</font>

792
00:34:47,130 --> 00:34:52,000
this piece<font color="#E5E5E5"> of software was made</font><font color="#CCCCCC"> in Java</font>

793
00:34:49,840 --> 00:34:53,470
was not crushing<font color="#CCCCCC"> you will never you were</font>

794
00:34:52,000 --> 00:34:55,780
<font color="#CCCCCC">know we're going to get a</font><font color="#E5E5E5"> crash from</font>

795
00:34:53,469 --> 00:34:57,879
this tool but still you can get the

796
00:34:55,780 --> 00:35:04,750
<font color="#E5E5E5">exception right in the</font><font color="#CCCCCC"> middle</font><font color="#E5E5E5"> of the</font>

797
00:34:57,880 --> 00:35:07,330
logs<font color="#E5E5E5"> and do something about it when</font><font color="#CCCCCC"> I</font>

798
00:35:04,750 --> 00:35:09,130
<font color="#E5E5E5">was fussing the software</font><font color="#CCCCCC"> I was concerned</font>

799
00:35:07,330 --> 00:35:15,130
<font color="#E5E5E5">about the software being capable of</font>

800
00:35:09,130 --> 00:35:18,100
executing code so this introduced the

801
00:35:15,130 --> 00:35:21,310
concept of canneries to me Canaries are

802
00:35:18,100 --> 00:35:23,799
<font color="#E5E5E5">a special when they use</font><font color="#CCCCCC"> canneries in the</font>

803
00:35:21,310 --> 00:35:26,090
mines they put a library there<font color="#E5E5E5"> to see if</font>

804
00:35:23,800 --> 00:35:27,830
you it was<font color="#E5E5E5"> got dying or</font><font color="#CCCCCC"> not and that</font>

805
00:35:26,090 --> 00:35:30,800
the indicator that<font color="#E5E5E5"> there was a leak of</font>

806
00:35:27,830 --> 00:35:33,080
gas or something<font color="#CCCCCC"> like that Canaries</font><font color="#E5E5E5"> in</font>

807
00:35:30,800 --> 00:35:36,260
fussing can be really<font color="#E5E5E5"> really useful to</font>

808
00:35:33,080 --> 00:35:38,299
detect certain behaviors that normally

809
00:35:36,260 --> 00:35:41,870
<font color="#E5E5E5">wouldn't be spotted in other ways in</font>

810
00:35:38,300 --> 00:35:45,260
here I'm introducing the<font color="#CCCCCC"> first line</font>

811
00:35:41,870 --> 00:35:47,900
shows that<font color="#E5E5E5"> I'm</font><font color="#CCCCCC"> executing</font><font color="#E5E5E5"> a</font><font color="#CCCCCC"> vowel</font><font color="#E5E5E5"> to</font>

812
00:35:45,260 --> 00:35:51,770
print these two pieces<font color="#CCCCCC"> of</font><font color="#E5E5E5"> these two</font>

813
00:35:47,900 --> 00:35:54,650
strings<font color="#E5E5E5"> canary token and code and if I</font>

814
00:35:51,770 --> 00:35:56,870
see the string<font color="#CCCCCC"> cannery token code in</font>

815
00:35:54,650 --> 00:35:59,180
<font color="#CCCCCC">here I'm going</font><font color="#E5E5E5"> to print them in the</font>

816
00:35:56,870 --> 00:36:01,600
analysis<font color="#E5E5E5"> of canary token codes</font><font color="#CCCCCC"> this</font>

817
00:35:59,180 --> 00:36:04,790
means<font color="#E5E5E5"> that the code</font><font color="#CCCCCC"> has been evaluated</font>

818
00:36:01,600 --> 00:36:07,310
this<font color="#E5E5E5"> is expected all programming</font>

819
00:36:04,790 --> 00:36:10,730
languages<font color="#CCCCCC"> have evaluation functions to</font>

820
00:36:07,310 --> 00:36:14,650
evaluate code<font color="#CCCCCC"> however the embeddable</font>

821
00:36:10,730 --> 00:36:17,120
<font color="#CCCCCC">type map in this</font><font color="#E5E5E5"> weird function of Perl</font>

822
00:36:14,650 --> 00:36:19,820
probably shouldn't be evaluating code

823
00:36:17,120 --> 00:36:21,259
<font color="#E5E5E5">because that's</font><font color="#CCCCCC"> not</font><font color="#E5E5E5"> what it does it</font>

824
00:36:19,820 --> 00:36:23,540
shouldn't<font color="#E5E5E5"> be doing</font><font color="#CCCCCC"> that at least</font><font color="#E5E5E5"> I</font>

825
00:36:21,260 --> 00:36:26,360
believe and this<font color="#CCCCCC"> is how it looks like</font>

826
00:36:23,540 --> 00:36:28,070
when you<font color="#CCCCCC"> take that out from</font><font color="#E5E5E5"> the</font><font color="#CCCCCC"> foster</font>

827
00:36:26,360 --> 00:36:31,790
tool and you transform it into a real

828
00:36:28,070 --> 00:36:33,020
war example you can execute code with

829
00:36:31,790 --> 00:36:37,430
the<font color="#E5E5E5"> privilege</font><font color="#CCCCCC"> of</font><font color="#E5E5E5"> the use of that</font><font color="#CCCCCC"> it's</font>

830
00:36:33,020 --> 00:36:39,620
executing that<font color="#E5E5E5"> so it is possible to</font>

831
00:36:37,430 --> 00:36:41,390
<font color="#E5E5E5">detect how code is being evaluated</font><font color="#CCCCCC"> since</font>

832
00:36:39,620 --> 00:36:46,670
your<font color="#E5E5E5"> trust trying to</font><font color="#CCCCCC"> concatenate</font><font color="#E5E5E5"> two</font>

833
00:36:41,390 --> 00:36:47,990
<font color="#E5E5E5">pieces of string but it would be a</font>

834
00:36:46,670 --> 00:36:51,110
<font color="#E5E5E5">little bit more interesting to</font><font color="#CCCCCC"> talk</font>

835
00:36:47,990 --> 00:36:56,870
<font color="#CCCCCC">about common execution</font><font color="#E5E5E5"> before</font><font color="#CCCCCC"> running</font>

836
00:36:51,110 --> 00:36:58,940
<font color="#E5E5E5">the</font><font color="#CCCCCC"> faster I create a common in all</font><font color="#E5E5E5"> the</font>

837
00:36:56,870 --> 00:37:01,670
operating systems called canary file

838
00:36:58,940 --> 00:37:03,770
whenever<font color="#E5E5E5"> you execute canary file on any</font>

839
00:37:01,670 --> 00:37:05,720
of my<font color="#CCCCCC"> computers</font><font color="#E5E5E5"> you will get an echo</font>

840
00:37:03,770 --> 00:37:08,540
that<font color="#E5E5E5"> says canary token common this</font>

841
00:37:05,720 --> 00:37:11,299
verifies<font color="#CCCCCC"> that the common is</font><font color="#E5E5E5"> being</font>

842
00:37:08,540 --> 00:37:12,560
executed that<font color="#E5E5E5"> it works and I will be</font>

843
00:37:11,300 --> 00:37:13,910
<font color="#E5E5E5">able to detect when that's being</font>

844
00:37:12,560 --> 00:37:17,120
executed<font color="#CCCCCC"> it's pretty</font><font color="#E5E5E5"> simple</font>

845
00:37:13,910 --> 00:37:20,029
so the<font color="#CCCCCC"> faster also</font><font color="#E5E5E5"> checks that this has</font>

846
00:37:17,120 --> 00:37:22,430
been created<font color="#CCCCCC"> so it won't execute if the</font>

847
00:37:20,030 --> 00:37:26,090
file<font color="#CCCCCC"> is</font><font color="#E5E5E5"> not there just</font><font color="#CCCCCC"> to be sure</font><font color="#E5E5E5"> that</font>

848
00:37:22,430 --> 00:37:31,339
the<font color="#E5E5E5"> canary token</font><font color="#CCCCCC"> common is there so when</font>

849
00:37:26,090 --> 00:37:34,790
I did this<font color="#CCCCCC"> in</font><font color="#E5E5E5"> PHP</font><font color="#CCCCCC"> you saw that two</font>

850
00:37:31,340 --> 00:37:38,030
different<font color="#CCCCCC"> test cases</font><font color="#E5E5E5"> we're providing the</font>

851
00:37:34,790 --> 00:37:40,610
same output<font color="#E5E5E5"> which is weird because</font>

852
00:37:38,030 --> 00:37:42,410
<font color="#E5E5E5">it shouldn't do that</font><font color="#CCCCCC"> I mean they're</font>

853
00:37:40,610 --> 00:37:45,140
<font color="#E5E5E5">different one has quotes the other one</font>

854
00:37:42,410 --> 00:37:48,649
doesn't<font color="#E5E5E5"> have quote at the very beginning</font>

855
00:37:45,140 --> 00:37:51,379
I didn't<font color="#E5E5E5"> know what it was</font><font color="#CCCCCC"> uh</font><font color="#E5E5E5"> and then I</font>

856
00:37:48,650 --> 00:37:55,640
realized oh this is the again<font color="#E5E5E5"> this is</font>

857
00:37:51,380 --> 00:37:58,850
that<font color="#E5E5E5"> the full output of PHP if you</font>

858
00:37:55,640 --> 00:38:00,890
<font color="#CCCCCC">enable the all the error</font><font color="#E5E5E5"> messages on the</font>

859
00:37:58,850 --> 00:38:02,810
application<font color="#CCCCCC"> you will see that the reason</font>

860
00:38:00,890 --> 00:38:07,940
<font color="#E5E5E5">notice over</font><font color="#CCCCCC"> here I will show you</font><font color="#E5E5E5"> later</font>

861
00:38:02,810 --> 00:38:11,660
<font color="#CCCCCC">that notice let me give you a very quick</font>

862
00:38:07,940 --> 00:38:14,240
example<font color="#E5E5E5"> on a demo on a video where I</font>

863
00:38:11,660 --> 00:38:16,370
will<font color="#CCCCCC"> be</font><font color="#E5E5E5"> creating two files</font><font color="#CCCCCC"> one of them</font>

864
00:38:14,240 --> 00:38:18,830
is going<font color="#CCCCCC"> to be</font><font color="#E5E5E5"> executed it was showing a</font>

865
00:38:16,370 --> 00:38:21,380
man page but when we're talking when

866
00:38:18,830 --> 00:38:25,130
we're referencing<font color="#CCCCCC"> the second file</font><font color="#E5E5E5"> I will</font>

867
00:38:21,380 --> 00:38:29,360
<font color="#CCCCCC">be executing code</font><font color="#E5E5E5"> it all happens because</font>

868
00:38:25,130 --> 00:38:32,780
PHP<font color="#E5E5E5"> transform undeclared constants into</font>

869
00:38:29,360 --> 00:38:36,230
strings<font color="#E5E5E5"> let me show you in here</font><font color="#CCCCCC"> we</font><font color="#E5E5E5"> have</font>

870
00:38:32,780 --> 00:38:38,450
a PHP<font color="#E5E5E5"> info file and I will be creating</font><font color="#CCCCCC"> a</font>

871
00:38:36,230 --> 00:38:40,670
file call index I believe where I define

872
00:38:38,450 --> 00:38:43,339
<font color="#E5E5E5">a constant</font><font color="#CCCCCC"> named bash that would be</font>

873
00:38:40,670 --> 00:38:46,370
<font color="#CCCCCC">executed in the</font><font color="#E5E5E5"> common man then I will</font>

874
00:38:43,340 --> 00:38:50,810
require<font color="#E5E5E5"> the functions dot PHP file which</font>

875
00:38:46,370 --> 00:38:56,330
will be creating now this PHP file is

876
00:38:50,810 --> 00:38:59,270
<font color="#E5E5E5">going to use the constant bash along</font>

877
00:38:56,330 --> 00:39:01,279
with a parameter<font color="#CCCCCC"> to</font><font color="#E5E5E5"> execute a comment</font>

878
00:38:59,270 --> 00:39:02,930
provided by the user<font color="#CCCCCC"> well so you execute</font>

879
00:39:01,280 --> 00:39:06,320
the man page plus<font color="#E5E5E5"> a page provided by the</font>

880
00:39:02,930 --> 00:39:10,790
user<font color="#E5E5E5"> it</font><font color="#CCCCCC"> would put</font><font color="#E5E5E5"> the</font><font color="#CCCCCC"> output between a</font>

881
00:39:06,320 --> 00:39:14,540
<font color="#E5E5E5">couple of tags so it looks coherent so</font>

882
00:39:10,790 --> 00:39:15,920
we will now be calling<font color="#E5E5E5"> we will try to</font>

883
00:39:14,540 --> 00:39:18,860
see the logs to see what happens

884
00:39:15,920 --> 00:39:21,230
well now called the index file will

885
00:39:18,860 --> 00:39:25,070
provide the parameter page to see<font color="#E5E5E5"> the</font>

886
00:39:21,230 --> 00:39:28,340
main page<font color="#CCCCCC"> of</font><font color="#E5E5E5"> LS however if we call the</font>

887
00:39:25,070 --> 00:39:31,070
second function<font color="#E5E5E5"> we provide some extra</font>

888
00:39:28,340 --> 00:39:32,960
parameters we may be able<font color="#E5E5E5"> to directly</font>

889
00:39:31,070 --> 00:39:38,510
execute code<font color="#E5E5E5"> using the same</font>

890
00:39:32,960 --> 00:39:41,930
functionality<font color="#E5E5E5"> that's because PHP assumes</font>

891
00:39:38,510 --> 00:39:44,120
that the constant<font color="#CCCCCC"> bash since it was not</font>

892
00:39:41,930 --> 00:39:46,640
present<font color="#E5E5E5"> over there should be a string</font>

893
00:39:44,120 --> 00:39:49,180
<font color="#E5E5E5">instead of a constant let's go more</font>

894
00:39:46,640 --> 00:39:51,890
<font color="#E5E5E5">slowly this time these</font><font color="#CCCCCC"> are</font><font color="#E5E5E5"> the two files</font>

895
00:39:49,180 --> 00:39:54,980
<font color="#E5E5E5">this</font><font color="#CCCCCC"> is where we define the console bash</font>

896
00:39:51,890 --> 00:39:58,098
<font color="#CCCCCC">this file uses</font><font color="#E5E5E5"> the second file to try to</font>

897
00:39:54,980 --> 00:39:59,539
execute<font color="#E5E5E5"> the man page of</font><font color="#CCCCCC"> ls the prone</font>

898
00:39:58,099 --> 00:40:02,599
will happen when people<font color="#E5E5E5"> call directly</font>

899
00:39:59,539 --> 00:40:04,549
<font color="#CCCCCC">this one and instead</font><font color="#E5E5E5"> of executing the</font>

900
00:40:02,599 --> 00:40:09,019
<font color="#CCCCCC">Bosch constant they</font><font color="#E5E5E5"> will be executing</font>

901
00:40:04,549 --> 00:40:11,390
the<font color="#E5E5E5"> Bosch string this is how the man</font>

902
00:40:09,019 --> 00:40:12,589
page of<font color="#CCCCCC"> ls looks like you're calling</font><font color="#E5E5E5"> the</font>

903
00:40:11,390 --> 00:40:15,140
index<font color="#CCCCCC"> filing here</font>

904
00:40:12,589 --> 00:40:18,259
however if you call the functions dot

905
00:40:15,140 --> 00:40:19,970
PHP file<font color="#E5E5E5"> you leave a space</font><font color="#CCCCCC"> and your ROM</font>

906
00:40:18,260 --> 00:40:21,920
that you want to execute<font color="#E5E5E5"> a common with</font>

907
00:40:19,970 --> 00:40:24,740
bash<font color="#E5E5E5"> because now we're trying to work</font>

908
00:40:21,920 --> 00:40:27,829
now<font color="#E5E5E5"> executing the bash string instead</font><font color="#CCCCCC"> of</font>

909
00:40:24,740 --> 00:40:30,319
the<font color="#E5E5E5"> bash constant you can get better</font>

910
00:40:27,829 --> 00:40:31,240
information<font color="#CCCCCC"> and you will see this in the</font>

911
00:40:30,319 --> 00:40:34,490
<font color="#E5E5E5">logs</font>

912
00:40:31,240 --> 00:40:39,379
PHP notice use of undefined<font color="#E5E5E5"> concert bash</font>

913
00:40:34,490 --> 00:40:42,709
assume<font color="#CCCCCC"> bash between quotes yes</font>

914
00:40:39,380 --> 00:40:45,109
PHP<font color="#CCCCCC"> is aware of this but yes PHP is</font>

915
00:40:42,710 --> 00:40:47,269
being a horrendous<font color="#E5E5E5"> person by</font><font color="#CCCCCC"> doing that</font>

916
00:40:45,109 --> 00:40:53,660
because you're<font color="#CCCCCC"> changing the behavior of</font>

917
00:40:47,269 --> 00:40:56,209
the code<font color="#CCCCCC"> let's move on</font><font color="#E5E5E5"> to network</font>

918
00:40:53,660 --> 00:40:59,420
connections<font color="#E5E5E5"> something</font><font color="#CCCCCC"> else</font><font color="#E5E5E5"> that got my</font>

919
00:40:56,210 --> 00:41:01,220
<font color="#CCCCCC">attention</font><font color="#E5E5E5"> was</font><font color="#CCCCCC"> well I always</font><font color="#E5E5E5"> wanted to</font>

920
00:40:59,420 --> 00:41:04,390
false browsers I wanted to<font color="#CCCCCC"> fast process</font>

921
00:41:01,220 --> 00:41:07,819
and compare the<font color="#CCCCCC"> browsers to the</font>

922
00:41:04,390 --> 00:41:10,940
command-line interpreters<font color="#E5E5E5"> like the ones</font>

923
00:41:07,819 --> 00:41:13,190
<font color="#E5E5E5">that I showed</font><font color="#CCCCCC"> the very beginning first</font>

924
00:41:10,940 --> 00:41:15,470
<font color="#CCCCCC">thing browsers is horrible it is</font>

925
00:41:13,190 --> 00:41:17,660
<font color="#E5E5E5">difficult it</font><font color="#CCCCCC"> is</font><font color="#E5E5E5"> annoying they crash they</font>

926
00:41:15,470 --> 00:41:20,569
have a lot of weird waste whether you

927
00:41:17,660 --> 00:41:23,359
work but eventually<font color="#E5E5E5"> when you got them to</font>

928
00:41:20,569 --> 00:41:24,890
work<font color="#E5E5E5"> you can remember the test case at</font>

929
00:41:23,359 --> 00:41:27,950
the very<font color="#E5E5E5"> beginning where the</font><font color="#CCCCCC"> some</font>

930
00:41:24,890 --> 00:41:30,788
<font color="#CCCCCC">attorney was</font><font color="#E5E5E5"> not working</font><font color="#CCCCCC"> very</font><font color="#E5E5E5"> well</font><font color="#CCCCCC"> in</font>

931
00:41:27,950 --> 00:41:35,348
JavaScript<font color="#E5E5E5"> you</font><font color="#CCCCCC"> can do that automatically</font>

932
00:41:30,789 --> 00:41:39,650
<font color="#CCCCCC">you can</font><font color="#E5E5E5"> instruct the browser to try to</font>

933
00:41:35,349 --> 00:41:44,630
request a file that<font color="#E5E5E5"> is going to be</font>

934
00:41:39,650 --> 00:41:46,549
<font color="#E5E5E5">located on the</font><font color="#CCCCCC"> same</font><font color="#E5E5E5"> host and the foster</font>

935
00:41:44,630 --> 00:41:49,910
can then extract what was the output<font color="#CCCCCC"> of</font>

936
00:41:46,549 --> 00:41:53,509
<font color="#CCCCCC">that operation</font><font color="#E5E5E5"> to try to use to</font><font color="#CCCCCC"> try to</font>

937
00:41:49,910 --> 00:41:55,700
use it<font color="#E5E5E5"> in here so you don't need to</font>

938
00:41:53,509 --> 00:41:57,920
analyze all the outputs you<font color="#CCCCCC"> can extract</font>

939
00:41:55,700 --> 00:42:01,549
<font color="#E5E5E5">that information from the foster itself</font>

940
00:41:57,920 --> 00:42:03,799
and use<font color="#E5E5E5"> that information</font><font color="#CCCCCC"> in here I'm</font>

941
00:42:01,549 --> 00:42:05,480
using a combination of two<font color="#CCCCCC"> things I'm</font>

942
00:42:03,799 --> 00:42:06,680
<font color="#E5E5E5">showing you the very the</font>

943
00:42:05,480 --> 00:42:08,210
example that I showed<font color="#E5E5E5"> the very beginning</font>

944
00:42:06,680 --> 00:42:09,500
and I'm showing<font color="#CCCCCC"> you how a piece of</font>

945
00:42:08,210 --> 00:42:12,230
<font color="#E5E5E5">silver may open a network connection</font>

946
00:42:09,500 --> 00:42:13,910
<font color="#E5E5E5">sometimes</font><font color="#CCCCCC"> we care we want</font><font color="#E5E5E5"> to know when</font>

947
00:42:12,230 --> 00:42:15,920
someone<font color="#CCCCCC"> is opening</font><font color="#E5E5E5"> a network our nation</font>

948
00:42:13,910 --> 00:42:19,640
but<font color="#E5E5E5"> the way it's used this on a</font>

949
00:42:15,920 --> 00:42:22,310
<font color="#E5E5E5">practical example</font><font color="#CCCCCC"> dree Ruby has a remote</font>

950
00:42:19,640 --> 00:42:23,720
code execution<font color="#CCCCCC"> when it comes to one of</font>

951
00:42:22,310 --> 00:42:27,500
their versions<font color="#CCCCCC"> only one of their</font>

952
00:42:23,720 --> 00:42:29,899
versions if you request a canary file

953
00:42:27,500 --> 00:42:34,040
<font color="#E5E5E5">that I put in this IP address</font><font color="#CCCCCC"> that</font>

954
00:42:29,900 --> 00:42:36,950
<font color="#E5E5E5">executes this the comma 19 this is</font><font color="#CCCCCC"> what</font>

955
00:42:34,040 --> 00:42:41,060
going<font color="#E5E5E5"> to</font><font color="#CCCCCC"> happen</font><font color="#E5E5E5"> there is a load reg file</font>

956
00:42:36,950 --> 00:42:43,640
functionality that<font color="#CCCCCC"> lers</font><font color="#E5E5E5"> a file with</font><font color="#CCCCCC"> Ray</font>

957
00:42:41,060 --> 00:42:46,070
<font color="#E5E5E5">come with Robbie comments in here and</font>

958
00:42:43,640 --> 00:42:47,240
putting a remote file<font color="#E5E5E5"> but it shouldn't</font>

959
00:42:46,070 --> 00:42:49,609
work<font color="#E5E5E5"> like</font><font color="#CCCCCC"> that if you read</font><font color="#E5E5E5"> the</font>

960
00:42:47,240 --> 00:42:52,609
documentation<font color="#E5E5E5"> it says</font><font color="#CCCCCC"> Lord reg file</font>

961
00:42:49,609 --> 00:42:54,470
<font color="#E5E5E5">should load a local file so this is</font>

962
00:42:52,609 --> 00:42:57,799
impossible<font color="#E5E5E5"> this this cannot work</font>

963
00:42:54,470 --> 00:43:01,310
this isn't<font color="#CCCCCC"> Ravi in jail Ravi there are</font>

964
00:42:57,800 --> 00:43:03,770
two persons<font color="#E5E5E5"> of</font><font color="#CCCCCC"> J Ravi</font><font color="#E5E5E5"> one that is one</font>

965
00:43:01,310 --> 00:43:05,960
<font color="#CCCCCC">point</font><font color="#E5E5E5"> seven that it tries to have all</font>

966
00:43:03,770 --> 00:43:08,390
the<font color="#E5E5E5"> verbal versions the one that is</font>

967
00:43:05,960 --> 00:43:11,680
called<font color="#E5E5E5"> 9 point something that only has</font>

968
00:43:08,390 --> 00:43:14,299
the latest version in the one point

969
00:43:11,680 --> 00:43:17,270
seven version<font color="#E5E5E5"> this</font><font color="#CCCCCC"> is</font><font color="#E5E5E5"> the latest version</font>

970
00:43:14,300 --> 00:43:19,580
<font color="#CCCCCC">of these branch you</font><font color="#E5E5E5"> can execute things</font>

971
00:43:17,270 --> 00:43:22,460
remotely<font color="#E5E5E5"> even though the documentation</font>

972
00:43:19,580 --> 00:43:25,310
says it should<font color="#E5E5E5"> be a local file so you</font>

973
00:43:22,460 --> 00:43:29,330
<font color="#CCCCCC">can request</font><font color="#E5E5E5"> a ruby file and execute it</font>

974
00:43:25,310 --> 00:43:31,609
remotely<font color="#CCCCCC"> and if someone embeds</font><font color="#E5E5E5"> this on</font>

975
00:43:29,330 --> 00:43:34,910
an installation file of a ruby program

976
00:43:31,609 --> 00:43:38,420
<font color="#E5E5E5">you can execute code by requesting</font>

977
00:43:34,910 --> 00:43:40,580
remote<font color="#E5E5E5"> code so you may embed the exploit</font>

978
00:43:38,420 --> 00:43:44,690
or whatever and then do something<font color="#E5E5E5"> about</font>

979
00:43:40,580 --> 00:43:46,700
it<font color="#E5E5E5"> again the first thing</font><font color="#CCCCCC"> that I executed</font>

980
00:43:44,690 --> 00:43:49,369
was not the common execution I had a

981
00:43:46,700 --> 00:43:52,009
calorie token something<font color="#E5E5E5"> to detect the</font>

982
00:43:49,369 --> 00:43:53,359
network connection and<font color="#E5E5E5"> I also detected</font>

983
00:43:52,010 --> 00:43:56,810
how they was opening the network

984
00:43:53,359 --> 00:43:59,119
connection once you get that hint of

985
00:43:56,810 --> 00:44:02,869
what do you<font color="#E5E5E5"> want to do you may want to</font>

986
00:43:59,119 --> 00:44:08,810
try to see how<font color="#CCCCCC"> that's</font><font color="#E5E5E5"> going</font><font color="#CCCCCC"> to be</font>

987
00:44:02,869 --> 00:44:11,450
<font color="#E5E5E5">exploitable let's move on to the latest</font>

988
00:44:08,810 --> 00:44:13,910
example of how you can do things<font color="#CCCCCC"> you can</font>

989
00:44:11,450 --> 00:44:17,290
read files<font color="#E5E5E5"> the</font><font color="#CCCCCC"> calories</font><font color="#E5E5E5"> we use the</font>

990
00:44:13,910 --> 00:44:17,290
<font color="#CCCCCC">cannery</font><font color="#E5E5E5"> so far for</font>

991
00:44:17,359 --> 00:44:21,140
well they can be used<font color="#E5E5E5"> for network</font>

992
00:44:19,309 --> 00:44:23,420
connections for<font color="#E5E5E5"> code being evaluated for</font>

993
00:44:21,140 --> 00:44:27,769
<font color="#CCCCCC">Commons being executed</font><font color="#E5E5E5"> and for files</font>

994
00:44:23,420 --> 00:44:29,630
being read<font color="#CCCCCC"> so if you reference the</font>

995
00:44:27,769 --> 00:44:32,899
foster-care<font color="#E5E5E5"> it's a file named canary</font>

996
00:44:29,630 --> 00:44:37,579
file that contains<font color="#CCCCCC"> the string canary</font>

997
00:44:32,900 --> 00:44:40,459
token file local if you request a canary

998
00:44:37,579 --> 00:44:43,910
file on the web server<font color="#CCCCCC"> the string is</font>

999
00:44:40,459 --> 00:44:46,129
<font color="#CCCCCC">going</font><font color="#E5E5E5"> to reconnect</font><font color="#CCCCCC"> oaken file remote so</font>

1000
00:44:43,910 --> 00:44:48,339
in here this<font color="#E5E5E5"> is the analytic function</font>

1001
00:44:46,130 --> 00:44:51,079
for the canary<font color="#CCCCCC"> tokens</font><font color="#E5E5E5"> files local and</font>

1002
00:44:48,339 --> 00:44:54,529
this is when you're<font color="#E5E5E5"> using node and</font>

1003
00:44:51,079 --> 00:44:59,989
you're requiring<font color="#E5E5E5"> a JavaScript file in</font>

1004
00:44:54,529 --> 00:45:03,019
this<font color="#CCCCCC"> case</font><font color="#E5E5E5"> let's let me show you how it</font>

1005
00:44:59,989 --> 00:45:05,719
looks<font color="#E5E5E5"> like on</font><font color="#CCCCCC"> a</font><font color="#E5E5E5"> practical example</font><font color="#CCCCCC"> when</font>

1006
00:45:03,019 --> 00:45:08,629
you're using<font color="#CCCCCC"> know</font><font color="#E5E5E5"> when you're using node</font>

1007
00:45:05,719 --> 00:45:10,369
you can<font color="#E5E5E5"> change the JavaScript parser on</font>

1008
00:45:08,630 --> 00:45:11,930
the Left column you're going to have

1009
00:45:10,369 --> 00:45:15,709
chapter<font color="#E5E5E5"> core which it is made</font><font color="#CCCCCC"> by</font>

1010
00:45:11,930 --> 00:45:18,410
Microsoft v8 made by Google<font color="#E5E5E5"> when you're</font>

1011
00:45:15,709 --> 00:45:21,919
trying to require<font color="#CCCCCC"> an own javascript file</font>

1012
00:45:18,410 --> 00:45:24,368
<font color="#CCCCCC">in node using checker core</font><font color="#E5E5E5"> it says</font>

1013
00:45:21,920 --> 00:45:25,880
invalid character<font color="#CCCCCC"> just doesn't</font><font color="#E5E5E5"> work</font>

1014
00:45:24,369 --> 00:45:28,670
<font color="#E5E5E5">forget about it</font>

1015
00:45:25,880 --> 00:45:30,619
however with v8 is going to show you the

1016
00:45:28,670 --> 00:45:32,329
<font color="#E5E5E5">first line and if you're trying</font><font color="#CCCCCC"> to</font>

1017
00:45:30,619 --> 00:45:33,979
record<font color="#E5E5E5"> etcetera</font><font color="#CCCCCC"> shoutings being executed</font>

1018
00:45:32,329 --> 00:45:36,670
<font color="#E5E5E5">by</font><font color="#CCCCCC"> droid you can read the</font><font color="#E5E5E5"> first line</font>

1019
00:45:33,979 --> 00:45:38,749
there<font color="#CCCCCC"> are a number of first line in</font>

1020
00:45:36,670 --> 00:45:41,299
different operating systems that<font color="#E5E5E5"> are</font>

1021
00:45:38,749 --> 00:45:44,509
valuable<font color="#E5E5E5"> this shouldn't happen</font>

1022
00:45:41,299 --> 00:45:46,940
it isn't the after I presented this it

1023
00:45:44,509 --> 00:45:52,749
is on the<font color="#E5E5E5"> roadmap</font><font color="#CCCCCC"> to take it off but you</font>

1024
00:45:46,940 --> 00:45:52,749
<font color="#CCCCCC">can</font><font color="#E5E5E5"> still try</font><font color="#CCCCCC"> to execute</font><font color="#E5E5E5"> this so yeah</font>

1025
00:45:59,739 --> 00:46:04,999
<font color="#CCCCCC">there</font><font color="#E5E5E5"> could be a possibility that</font><font color="#CCCCCC"> I</font>

1026
00:46:02,390 --> 00:46:10,219
<font color="#CCCCCC">hated any what also works I want to</font>

1027
00:46:04,999 --> 00:46:12,019
check now I don't<font color="#E5E5E5"> know if</font><font color="#CCCCCC"> it is</font><font color="#E5E5E5"> the rest</font>

1028
00:46:10,219 --> 00:46:15,170
of the people<font color="#E5E5E5"> here there is a single</font>

1029
00:46:12,019 --> 00:46:15,558
<font color="#E5E5E5">chorus is missing here so perhaps I made</font>

1030
00:46:15,170 --> 00:46:18,140
a mistake

1031
00:46:15,559 --> 00:46:23,569
and<font color="#E5E5E5"> it works in</font><font color="#CCCCCC"> both of them I don't</font>

1032
00:46:18,140 --> 00:46:25,368
<font color="#CCCCCC">know that would be more</font><font color="#E5E5E5"> interesting so</font>

1033
00:46:23,569 --> 00:46:27,049
the idea is that<font color="#E5E5E5"> you can analyze</font>

1034
00:46:25,369 --> 00:46:28,579
<font color="#E5E5E5">different vulnerabilities you can read</font>

1035
00:46:27,049 --> 00:46:29,900
<font color="#CCCCCC">if you know when someone</font><font color="#E5E5E5"> is trying to</font>

1036
00:46:28,579 --> 00:46:31,330
<font color="#E5E5E5">read a file you know when someone is</font>

1037
00:46:29,900 --> 00:46:33,290
executing a<font color="#CCCCCC"> far</font>

1038
00:46:31,330 --> 00:46:36,440
there are a number<font color="#E5E5E5"> of things that you</font>

1039
00:46:33,290 --> 00:46:37,850
<font color="#CCCCCC">can do and you can expose more</font>

1040
00:46:36,440 --> 00:46:40,160
vulnerabilities when you're<font color="#E5E5E5"> comparing</font>

1041
00:46:37,850 --> 00:46:42,710
different<font color="#E5E5E5"> pieces of software</font><font color="#CCCCCC"> when you're</font>

1042
00:46:40,160 --> 00:46:46,430
checking different<font color="#E5E5E5"> program operating</font>

1043
00:46:42,710 --> 00:46:49,730
system versions implementations<font color="#E5E5E5"> or</font>

1044
00:46:46,430 --> 00:46:51,560
whatever and something<font color="#E5E5E5"> that I believe</font>

1045
00:46:49,730 --> 00:46:53,270
may<font color="#CCCCCC"> be really really</font><font color="#E5E5E5"> really interesting</font>

1046
00:46:51,560 --> 00:46:55,220
in the<font color="#CCCCCC"> future is</font><font color="#E5E5E5"> what happens when you</font>

1047
00:46:53,270 --> 00:46:58,400
<font color="#E5E5E5">have different pieces of</font><font color="#CCCCCC"> software and</font>

1048
00:46:55,220 --> 00:46:59,810
you have a bug in here<font color="#E5E5E5"> a bug in here and</font>

1049
00:46:58,400 --> 00:47:01,880
you<font color="#E5E5E5"> have a bug in two different</font>

1050
00:46:59,810 --> 00:47:04,400
implementations<font color="#E5E5E5"> at the same time one</font>

1051
00:47:01,880 --> 00:47:06,470
payload may attack<font color="#E5E5E5"> multiple pieces</font><font color="#CCCCCC"> of</font>

1052
00:47:04,400 --> 00:47:09,080
software<font color="#E5E5E5"> at</font><font color="#CCCCCC"> a time and right now people</font>

1053
00:47:06,470 --> 00:47:11,209
<font color="#E5E5E5">are only looking</font><font color="#CCCCCC"> for specific Baylor's</font>

1054
00:47:09,080 --> 00:47:15,290
<font color="#CCCCCC">are attacking specific versions of</font>

1055
00:47:11,210 --> 00:47:16,790
applications<font color="#CCCCCC"> and it would be possible</font>

1056
00:47:15,290 --> 00:47:18,560
perhaps<font color="#E5E5E5"> in the future</font><font color="#CCCCCC"> to start detecting</font>

1057
00:47:16,790 --> 00:47:24,759
<font color="#E5E5E5">them to affect</font><font color="#CCCCCC"> multiple pieces of</font>

1058
00:47:18,560 --> 00:47:24,759
<font color="#E5E5E5">software at the same time any questions</font>

1059
00:47:28,570 --> 00:47:39,650
you can boo or thank you<font color="#E5E5E5"> very much you</font>

1060
00:47:37,369 --> 00:47:42,590
can get a copy<font color="#CCCCCC"> of the latest</font><font color="#E5E5E5"> release</font>

1061
00:47:39,650 --> 00:47:51,109
that<font color="#E5E5E5"> I made over there hold on this</font>

1062
00:47:42,590 --> 00:47:53,540
question<font color="#CCCCCC"> yes thanks for the great tool I</font>

1063
00:47:51,109 --> 00:47:56,779
think my<font color="#E5E5E5"> only question is that in terms</font>

1064
00:47:53,540 --> 00:47:58,000
<font color="#E5E5E5">of scalability and in terms of so like I</font>

1065
00:47:56,780 --> 00:48:01,970
see<font color="#CCCCCC"> it when you</font><font color="#E5E5E5"> testing different</font>

1066
00:47:58,000 --> 00:48:03,440
products<font color="#CCCCCC"> like Ruby Python</font><font color="#E5E5E5"> etc again like</font>

1067
00:48:01,970 --> 00:48:05,180
I'll go back to the<font color="#E5E5E5"> point of</font><font color="#CCCCCC"> test</font><font color="#E5E5E5"> this</font>

1068
00:48:03,440 --> 00:48:08,180
case<font color="#E5E5E5"> generation is</font><font color="#CCCCCC"> like you want to</font>

1069
00:48:05,180 --> 00:48:10,790
print something<font color="#CCCCCC"> so it could be a console</font>

1070
00:48:08,180 --> 00:48:13,879
that<font color="#E5E5E5"> log here or print here</font><font color="#CCCCCC"> etc</font><font color="#E5E5E5"> is there</font>

1071
00:48:10,790 --> 00:48:15,619
a way kind of to scale this up or a way

1072
00:48:13,880 --> 00:48:17,090
<font color="#E5E5E5">to generate these test</font><font color="#CCCCCC"> cases for</font><font color="#E5E5E5"> the</font>

1073
00:48:15,619 --> 00:48:18,740
different inputs<font color="#E5E5E5"> is this part of the</font>

1074
00:48:17,090 --> 00:48:24,380
tool is this<font color="#CCCCCC"> what do you use this</font>

1075
00:48:18,740 --> 00:48:26,750
manually<font color="#CCCCCC"> I believe that</font><font color="#E5E5E5"> our let's talk</font>

1076
00:48:24,380 --> 00:48:32,480
about input generation when it comes to

1077
00:48:26,750 --> 00:48:34,820
input generation<font color="#CCCCCC"> I think Fosters have</font>

1078
00:48:32,480 --> 00:48:37,130
<font color="#E5E5E5">three three parts</font><font color="#CCCCCC"> the input generation</font>

1079
00:48:34,820 --> 00:48:40,310
the fussing<font color="#E5E5E5"> and the what they're doing</font>

1080
00:48:37,130 --> 00:48:43,190
with the output when it comes to the

1081
00:48:40,310 --> 00:48:44,160
input generation<font color="#E5E5E5"> you can there are Tupac</font>

1082
00:48:43,190 --> 00:48:45,660
there are

1083
00:48:44,160 --> 00:48:47,279
<font color="#CCCCCC">number</font><font color="#E5E5E5"> of possibilities</font><font color="#CCCCCC"> when I did the</font>

1084
00:48:45,660 --> 00:48:49,500
permutations you have three or four

1085
00:48:47,280 --> 00:48:51,920
<font color="#CCCCCC">different</font><font color="#E5E5E5"> types of permutations</font><font color="#CCCCCC"> that you</font>

1086
00:48:49,500 --> 00:48:55,319
can do and then you can automatically

1087
00:48:51,920 --> 00:48:57,180
put input<font color="#CCCCCC"> foster's to automatically</font>

1088
00:48:55,319 --> 00:49:02,308
change<font color="#E5E5E5"> the fosters that you have created</font>

1089
00:48:57,180 --> 00:49:04,649
<font color="#E5E5E5">with Radames ax and</font><font color="#CCCCCC"> Zetas z z UF know</font>

1090
00:49:02,309 --> 00:49:07,020
how to<font color="#E5E5E5"> pronounce them okay so you can</font>

1091
00:49:04,650 --> 00:49:09,359
grab your<font color="#CCCCCC"> three pour test cases that I</font>

1092
00:49:07,020 --> 00:49:11,250
put<font color="#CCCCCC"> over there</font><font color="#E5E5E5"> and you can apply Radames</font>

1093
00:49:09,359 --> 00:49:13,200
ax and the other one to that<font color="#CCCCCC"> one and you</font>

1094
00:49:11,250 --> 00:49:15,030
can keep generating constantly input

1095
00:49:13,200 --> 00:49:17,339
test cases unattended<font color="#CCCCCC"> leave it over</font>

1096
00:49:15,030 --> 00:49:20,880
<font color="#CCCCCC">there</font><font color="#E5E5E5"> and may eventually find something</font>

1097
00:49:17,339 --> 00:49:24,690
but<font color="#CCCCCC"> those are</font><font color="#E5E5E5"> dumb input but you can</font>

1098
00:49:20,880 --> 00:49:27,539
also apply your own<font color="#E5E5E5"> smart input over</font>

1099
00:49:24,690 --> 00:49:28,980
there if you can<font color="#E5E5E5"> that's why you have the</font>

1100
00:49:27,539 --> 00:49:32,640
permutations if you can't do<font color="#E5E5E5"> something</font>

1101
00:49:28,980 --> 00:49:34,799
<font color="#E5E5E5">like</font><font color="#CCCCCC"> that but I</font><font color="#E5E5E5"> believe that what we</font>

1102
00:49:32,640 --> 00:49:39,390
<font color="#CCCCCC">have</font><font color="#E5E5E5"> seen even in hack in the box is</font>

1103
00:49:34,799 --> 00:49:42,119
that sometimes people<font color="#CCCCCC"> play</font><font color="#E5E5E5"> a lot of</font>

1104
00:49:39,390 --> 00:49:44,910
importance to<font color="#E5E5E5"> the for example um you can</font>

1105
00:49:42,119 --> 00:49:47,520
grab<font color="#CCCCCC"> one debonair abilities</font><font color="#E5E5E5"> grab</font><font color="#CCCCCC"> that as</font>

1106
00:49:44,910 --> 00:49:48,990
a function<font color="#CCCCCC"> grab that piece of code</font><font color="#E5E5E5"> grab</font>

1107
00:49:47,520 --> 00:49:51,900
the places where you<font color="#E5E5E5"> want to input</font>

1108
00:49:48,990 --> 00:49:54,990
values select<font color="#E5E5E5"> that as a function put</font>

1109
00:49:51,900 --> 00:49:59,460
certain<font color="#E5E5E5"> values of what you want to</font><font color="#CCCCCC"> frost</font>

1110
00:49:54,990 --> 00:50:01,500
that<font color="#E5E5E5"> and then put an input faster like</font>

1111
00:49:59,460 --> 00:50:03,359
<font color="#CCCCCC">rebound so the other one</font><font color="#E5E5E5"> and then start</font>

1112
00:50:01,500 --> 00:50:07,619
<font color="#CCCCCC">building automatically all the</font><font color="#E5E5E5"> test</font>

1113
00:50:03,359 --> 00:50:09,890
cases<font color="#E5E5E5"> and move from there all right any</font>

1114
00:50:07,619 --> 00:50:13,770
<font color="#E5E5E5">more questions</font>

1115
00:50:09,890 --> 00:50:16,379
nope<font color="#CCCCCC"> okay we'll go for a break</font><font color="#E5E5E5"> then come</font>

1116
00:50:13,770 --> 00:50:18,470
back for<font color="#CCCCCC"> 30 thank you very much thank</font>

1117
00:50:16,380 --> 00:50:18,470
you

