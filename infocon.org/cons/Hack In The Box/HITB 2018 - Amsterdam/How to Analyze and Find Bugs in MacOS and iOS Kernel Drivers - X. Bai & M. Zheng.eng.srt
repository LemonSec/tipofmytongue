1
00:00:13,030 --> 00:00:17,560
hello arrow and today we are going to

2
00:00:14,980 --> 00:00:19,960
<font color="#E5E5E5">talk about the security of Mac OS</font><font color="#CCCCCC"> and</font>

3
00:00:17,560 --> 00:00:23,049
iOS cannot reverse and the title of our

4
00:00:19,960 --> 00:00:24,400
<font color="#E5E5E5">talk is e to the e to the core of</font><font color="#CCCCCC"> Apple</font>

5
00:00:23,050 --> 00:00:28,170
how<font color="#CCCCCC"> we analyze</font><font color="#E5E5E5"> and</font>

6
00:00:24,400 --> 00:00:31,359
<font color="#E5E5E5">Fanbox in Mac OS and iOS cannot reverse</font>

7
00:00:28,170 --> 00:00:34,989
<font color="#E5E5E5">I'm shown by from</font><font color="#CCCCCC"> Alibaba security and</font>

8
00:00:31,359 --> 00:00:38,650
before drawing<font color="#E5E5E5"> Alibaba</font><font color="#CCCCCC"> I received my PhD</font>

9
00:00:34,989 --> 00:00:40,769
degree from Shanghai University and I

10
00:00:38,650 --> 00:00:44,500
have published papers on the top<font color="#CCCCCC"> four</font>

11
00:00:40,769 --> 00:00:47,649
security<font color="#E5E5E5"> conferences including</font><font color="#CCCCCC"> SMP using</font>

12
00:00:44,500 --> 00:00:52,440
security<font color="#E5E5E5"> CSS and a DSS and my Twitter</font>

13
00:00:47,649 --> 00:00:58,329
and<font color="#E5E5E5"> Twitter</font><font color="#CCCCCC"> Weber</font><font color="#E5E5E5"> and github apples all</font>

14
00:00:52,440 --> 00:01:03,610
<font color="#E5E5E5">Excel 1989</font><font color="#CCCCCC"> you can connect me</font><font color="#E5E5E5"> in</font><font color="#CCCCCC"> these</font>

15
00:00:58,329 --> 00:01:06,220
<font color="#E5E5E5">ways and this is far hello everyone my</font>

16
00:01:03,610 --> 00:01:09,970
name<font color="#CCCCCC"> is min jeong</font><font color="#E5E5E5"> you can call me spark</font>

17
00:01:06,220 --> 00:01:14,830
<font color="#E5E5E5">i must contain expert at Alibaba</font><font color="#CCCCCC"> I</font><font color="#E5E5E5"> got</font>

18
00:01:09,970 --> 00:01:17,200
my PhD PhD degree in<font color="#E5E5E5"> the</font><font color="#CCCCCC"> cuhk</font><font color="#E5E5E5"> Chinese</font>

19
00:01:14,830 --> 00:01:19,900
University of Hong Kong<font color="#E5E5E5"> my twitter is</font>

20
00:01:17,200 --> 00:01:22,000
<font color="#E5E5E5">functional and</font><font color="#CCCCCC"> Weber is Jimmy spark you</font>

21
00:01:19,900 --> 00:01:26,380
can follow me on that and ask me

22
00:01:22,000 --> 00:01:29,530
<font color="#CCCCCC">questions</font><font color="#E5E5E5"> so today we will introduce how</font>

23
00:01:26,380 --> 00:01:33,908
<font color="#CCCCCC">to find bugs in the drivers so here is</font>

24
00:01:29,530 --> 00:01:36,610
the agenda<font color="#E5E5E5"> first I will give overview</font>

25
00:01:33,909 --> 00:01:40,170
about drivers in kernel<font color="#E5E5E5"> and the</font><font color="#CCCCCC"> Euro</font>

26
00:01:36,610 --> 00:01:44,170
space perspective then I will talk new

27
00:01:40,170 --> 00:01:47,140
vulnerabilities<font color="#CCCCCC"> in</font><font color="#E5E5E5"> Mac OS about the two</font>

28
00:01:44,170 --> 00:01:50,049
new vulnerability and exploit strategies

29
00:01:47,140 --> 00:01:53,770
and how to<font color="#E5E5E5"> do privilege escalation on</font>

30
00:01:50,049 --> 00:01:59,280
the latest Mac OS the initial<font color="#CCCCCC"> room we'll</font>

31
00:01:53,770 --> 00:02:02,590
talk about obstacles<font color="#E5E5E5"> when analyzing</font>

32
00:01:59,280 --> 00:02:07,739
<font color="#CCCCCC">apple drivers and we will introduce a</font>

33
00:02:02,590 --> 00:02:13,269
new<font color="#CCCCCC"> tool called reek</font><font color="#E5E5E5"> to to the</font><font color="#CCCCCC"> analyzed</font>

34
00:02:07,739 --> 00:02:16,120
so<font color="#E5E5E5"> every driver every driver is a kind</font>

35
00:02:13,269 --> 00:02:18,430
of extension<font color="#E5E5E5"> which shares the same space</font>

36
00:02:16,120 --> 00:02:21,160
with the kernel<font color="#E5E5E5"> we know this is</font><font color="#CCCCCC"> not a</font>

37
00:02:18,430 --> 00:02:23,530
good design because<font color="#E5E5E5"> if you can draw the</font>

38
00:02:21,160 --> 00:02:25,829
driver driver which means you control

39
00:02:23,530 --> 00:02:28,230
the kernel<font color="#E5E5E5"> we know that</font>

40
00:02:25,830 --> 00:02:31,980
drivers always have more parks than the

41
00:02:28,230 --> 00:02:34,890
colonel<font color="#CCCCCC"> a system demon called cano</font>

42
00:02:31,980 --> 00:02:38,760
extension<font color="#CCCCCC"> D is responsible for</font><font color="#E5E5E5"> loading</font>

43
00:02:34,890 --> 00:02:42,630
and<font color="#CCCCCC"> unloading</font><font color="#E5E5E5"> drivers</font><font color="#CCCCCC"> you can find the</font>

44
00:02:38,760 --> 00:02:47,940
driver<font color="#E5E5E5"> boundaries on Mac OS in this pass</font>

45
00:02:42,630 --> 00:02:53,250
<font color="#CCCCCC">system library slash extensions for iOS</font>

46
00:02:47,940 --> 00:02:55,410
the driver<font color="#E5E5E5"> binaries are integrated with</font>

47
00:02:53,250 --> 00:02:57,660
<font color="#E5E5E5">kernel in the kernel</font><font color="#CCCCCC"> cash</font><font color="#E5E5E5"> you can</font>

48
00:02:55,410 --> 00:03:03,359
download the kernel<font color="#CCCCCC"> head from</font><font color="#E5E5E5"> Google</font>

49
00:02:57,660 --> 00:03:10,459
<font color="#E5E5E5">from evils of visual</font><font color="#CCCCCC"> website and analyze</font>

50
00:03:03,360 --> 00:03:14,640
the kernel cash in<font color="#CCCCCC"> ada</font><font color="#E5E5E5"> or jet fuel for</font>

51
00:03:10,459 --> 00:03:19,190
the the<font color="#E5E5E5"> Conner other drivers are</font>

52
00:03:14,640 --> 00:03:22,769
programmed in C or C++<font color="#CCCCCC"> you can get the</font>

53
00:03:19,190 --> 00:03:26,010
<font color="#E5E5E5">configuration file the configuration</font>

54
00:03:22,770 --> 00:03:29,640
file is<font color="#E5E5E5"> the info list info top list you</font>

55
00:03:26,010 --> 00:03:34,530
can get the name<font color="#E5E5E5"> of the driver from our</font>

56
00:03:29,640 --> 00:03:38,329
class and user<font color="#E5E5E5"> client name from</font><font color="#CCCCCC"> IOU</font>

57
00:03:34,530 --> 00:03:41,480
decline class and also you can get<font color="#E5E5E5"> the</font>

58
00:03:38,330 --> 00:03:45,209
<font color="#E5E5E5">libraries which are used in the driver</font>

59
00:03:41,480 --> 00:03:52,018
for<font color="#CCCCCC"> example and keep your al-qaida and</font>

60
00:03:45,209 --> 00:03:53,340
<font color="#E5E5E5">KPI lubricant for drivers to communicate</font>

61
00:03:52,019 --> 00:03:58,160
with<font color="#E5E5E5"> colonel</font>

62
00:03:53,340 --> 00:04:02,610
they can use condo<font color="#E5E5E5"> AP is as long</font><font color="#CCCCCC"> as</font><font color="#E5E5E5"> ppi</font>

63
00:03:58,160 --> 00:04:06,120
the<font color="#E5E5E5"> photocatalyst you can find you can</font>

64
00:04:02,610 --> 00:04:12,330
find the KPI<font color="#E5E5E5"> list</font><font color="#CCCCCC"> omega OS in this path</font>

65
00:04:06,120 --> 00:04:15,120
and for some<font color="#E5E5E5"> basic also key i provides</font>

66
00:04:12,330 --> 00:04:18,060
some basic models for example<font color="#CCCCCC"> keeping</font>

67
00:04:15,120 --> 00:04:20,310
<font color="#E5E5E5">our kid it provides an</font><font color="#CCCCCC"> open source</font>

68
00:04:18,060 --> 00:04:24,930
framework<font color="#CCCCCC"> called al-qaeda</font><font color="#E5E5E5"> which includes</font>

69
00:04:20,310 --> 00:04:28,890
some<font color="#E5E5E5"> basic driver classes and for KPI</font>

70
00:04:24,930 --> 00:04:33,450
<font color="#CCCCCC">Libertines it</font><font color="#E5E5E5"> is a stricted</font><font color="#CCCCCC"> c++</font><font color="#E5E5E5"> runtime</font>

71
00:04:28,890 --> 00:04:36,599
<font color="#CCCCCC">maybe the</font><font color="#E5E5E5"> kernel it does not include</font>

72
00:04:33,450 --> 00:04:37,110
exceptions<font color="#E5E5E5"> multiplying inheritance and</font>

73
00:04:36,600 --> 00:04:40,349
<font color="#CCCCCC">10</font>

74
00:04:37,110 --> 00:04:43,710
but it is enhance the<font color="#E5E5E5"> run home typing</font>

75
00:04:40,349 --> 00:04:46,349
system<font color="#E5E5E5"> because every class has</font><font color="#CCCCCC"> oh s</font>

76
00:04:43,710 --> 00:04:52,680
<font color="#E5E5E5">metaclass object which describes the</font>

77
00:04:46,349 --> 00:04:57,569
class name<font color="#E5E5E5"> size parent class</font><font color="#CCCCCC"> etc so here</font>

78
00:04:52,680 --> 00:05:01,560
is a<font color="#E5E5E5"> example of a simple driver</font><font color="#CCCCCC"> and this</font>

79
00:04:57,569 --> 00:05:06,289
is a head file and the code file you can

80
00:05:01,560 --> 00:05:09,590
get the name<font color="#CCCCCC"> of</font><font color="#E5E5E5"> the class in here and</font>

81
00:05:06,289 --> 00:05:12,840
all the drivers<font color="#E5E5E5"> sorry</font>

82
00:05:09,590 --> 00:05:16,318
<font color="#CCCCCC">all the drivers had us in parents called</font>

83
00:05:12,840 --> 00:05:19,650
<font color="#CCCCCC">IO service service and you can use a</font>

84
00:05:16,319 --> 00:05:22,139
micro definition<font color="#E5E5E5"> micro definition to</font>

85
00:05:19,650 --> 00:05:27,989
declare the constructors and destructors

86
00:05:22,139 --> 00:05:30,240
of the driver<font color="#E5E5E5"> because they have a</font>

87
00:05:27,990 --> 00:05:33,419
<font color="#CCCCCC">parent's called IO service so</font><font color="#E5E5E5"> you need</font>

88
00:05:30,240 --> 00:05:36,810
to able implement the virtual method of

89
00:05:33,419 --> 00:05:42,049
<font color="#E5E5E5">IO service for example in it free</font>

90
00:05:36,810 --> 00:05:46,590
start/stop in order to communicate<font color="#E5E5E5"> with</font>

91
00:05:42,050 --> 00:05:49,919
<font color="#CCCCCC">us</font><font color="#E5E5E5"> base for the kernel driver you need</font>

92
00:05:46,590 --> 00:05:52,888
to implement<font color="#E5E5E5"> the</font><font color="#CCCCCC"> you declines the yulik</font>

93
00:05:49,919 --> 00:05:55,620
<font color="#E5E5E5">user client is actually</font><font color="#CCCCCC"> a kernel objects</font>

94
00:05:52,889 --> 00:05:57,839
which provide a service<font color="#E5E5E5"> to programmed in</font>

95
00:05:55,620 --> 00:06:01,860
the<font color="#E5E5E5"> user</font><font color="#CCCCCC"> space you can create</font><font color="#E5E5E5"> them in</font>

96
00:05:57,839 --> 00:06:05,339
two ways where is in photo<font color="#E5E5E5"> plist file</font>

97
00:06:01,860 --> 00:06:09,050
you can add aisles of<font color="#E5E5E5"> his clients class</font>

98
00:06:05,339 --> 00:06:12,810
to claim new you declined<font color="#E5E5E5"> or you can</font>

99
00:06:09,050 --> 00:06:18,259
implement a<font color="#CCCCCC"> common color</font><font color="#E5E5E5"> callback method</font>

100
00:06:12,810 --> 00:06:18,259
of driver in the new user client method

101
00:06:18,680 --> 00:06:24,750
so<font color="#E5E5E5"> here is an</font><font color="#CCCCCC"> example of a simple</font><font color="#E5E5E5"> user</font>

102
00:06:22,139 --> 00:06:29,339
<font color="#CCCCCC">client but I</font><font color="#E5E5E5"> recommend</font><font color="#CCCCCC"> you</font><font color="#E5E5E5"> to download</font>

103
00:06:24,750 --> 00:06:31,740
some open source user<font color="#E5E5E5"> you decline and</font>

104
00:06:29,339 --> 00:06:37,639
the drivers from a bottle of<font color="#CCCCCC"> intro</font>

105
00:06:31,740 --> 00:06:40,520
website you can learn<font color="#E5E5E5"> a lot of from them</font>

106
00:06:37,639 --> 00:06:43,369
in order<font color="#CCCCCC"> to</font>

107
00:06:40,520 --> 00:06:47,219
implement her you<font color="#CCCCCC"> declined you need to</font>

108
00:06:43,369 --> 00:06:50,460
implement<font color="#E5E5E5"> some callback methods the most</font>

109
00:06:47,219 --> 00:06:52,949
important one is a external method which

110
00:06:50,460 --> 00:06:55,770
provides the methods that<font color="#E5E5E5"> can</font><font color="#CCCCCC"> be caught</font>

111
00:06:52,949 --> 00:06:58,319
in the user space<font color="#E5E5E5"> and also</font><font color="#CCCCCC"> you can use</font>

112
00:06:55,770 --> 00:07:02,909
client memory for type to share memory

113
00:06:58,319 --> 00:07:07,550
with programs in<font color="#E5E5E5"> user space and you can</font>

114
00:07:02,909 --> 00:07:10,498
<font color="#CCCCCC">use</font><font color="#E5E5E5"> relish notification code to register</font>

115
00:07:07,550 --> 00:07:13,499
<font color="#E5E5E5">notification</font><font color="#CCCCCC"> mode for</font><font color="#E5E5E5"> the users based</font>

116
00:07:10,499 --> 00:07:16,979
program and when<font color="#E5E5E5"> your dos based program</font>

117
00:07:13,499 --> 00:07:21,139
closed the or died<font color="#CCCCCC"> it will call client</font>

118
00:07:16,979 --> 00:07:24,770
<font color="#CCCCCC">close and client-side</font><font color="#E5E5E5"> callbacks</font>

119
00:07:21,139 --> 00:07:29,459
also there are<font color="#E5E5E5"> some</font><font color="#CCCCCC"> certainly used</font>

120
00:07:24,770 --> 00:07:32,279
method for<font color="#CCCCCC"> example k Dragutin method of</font>

121
00:07:29,459 --> 00:07:37,979
<font color="#CCCCCC">or index</font><font color="#E5E5E5"> they are similar to external</font>

122
00:07:32,279 --> 00:07:40,020
method the beta is<font color="#CCCCCC"> in old-fashioned so</font>

123
00:07:37,979 --> 00:07:43,889
let's talk about<font color="#E5E5E5"> the most important one</font>

124
00:07:40,020 --> 00:07:48,299
external<font color="#E5E5E5"> method this method have has</font>

125
00:07:43,889 --> 00:07:51,990
<font color="#E5E5E5">five parameters</font><font color="#CCCCCC"> the first one is the</font>

126
00:07:48,300 --> 00:07:55,199
<font color="#E5E5E5">call selector it is used to select</font>

127
00:07:51,990 --> 00:07:58,889
method in the you declined<font color="#CCCCCC"> it starts</font>

128
00:07:55,199 --> 00:08:01,529
from<font color="#CCCCCC"> zero and four</font><font color="#E5E5E5"> arguments this</font>

129
00:07:58,889 --> 00:08:05,399
parameter<font color="#CCCCCC"> will pass the parameters from</font>

130
00:08:01,529 --> 00:08:09,149
user space to the driver and the

131
00:08:05,399 --> 00:08:10,649
dispatch<font color="#CCCCCC"> is a struct</font><font color="#E5E5E5"> rapid representing</font>

132
00:08:09,149 --> 00:08:14,430
the method to be<font color="#CCCCCC"> called</font>

133
00:08:10,649 --> 00:08:16,289
and target the target<font color="#E5E5E5"> shows you the</font>

134
00:08:14,430 --> 00:08:19,229
<font color="#E5E5E5">client for the method to be called on</font>

135
00:08:16,289 --> 00:08:24,779
and the<font color="#CCCCCC"> reference will send the result</font>

136
00:08:19,229 --> 00:08:28,289
<font color="#E5E5E5">back</font><font color="#CCCCCC"> to the user space program for the</font>

137
00:08:24,779 --> 00:08:31,199
userland prospective<font color="#E5E5E5"> evo provides</font><font color="#CCCCCC"> ioki</font>

138
00:08:28,289 --> 00:08:36,029
the framework for program<font color="#CCCCCC"> ins</font><font color="#E5E5E5"> in user</font>

139
00:08:31,199 --> 00:08:39,539
space to interact with<font color="#CCCCCC"> kernel but if you</font>

140
00:08:36,029 --> 00:08:42,568
use some public explicit invocation<font color="#E5E5E5"> in</font>

141
00:08:39,539 --> 00:08:46,649
the<font color="#CCCCCC"> ios app it will be</font><font color="#E5E5E5"> rejected by</font><font color="#CCCCCC"> an</font>

142
00:08:42,568 --> 00:08:51,510
<font color="#CCCCCC">apple store</font><font color="#E5E5E5"> there are some important api</font>

143
00:08:46,649 --> 00:08:55,150
is in our framework<font color="#E5E5E5"> for example if you</font>

144
00:08:51,510 --> 00:08:58,100
want<font color="#E5E5E5"> to interact with</font><font color="#CCCCCC"> our driver</font>

145
00:08:55,150 --> 00:09:01,490
<font color="#CCCCCC">your first thing need</font><font color="#E5E5E5"> to use I always</font>

146
00:08:58,100 --> 00:09:05,870
get matching service to get the service

147
00:09:01,490 --> 00:09:09,920
of the target driver then you can use<font color="#E5E5E5"> I</font>

148
00:09:05,870 --> 00:09:12,620
will<font color="#CCCCCC"> register registry</font><font color="#E5E5E5"> entry create or</font>

149
00:09:09,920 --> 00:09:14,900
status they have properties to get the

150
00:09:12,620 --> 00:09:19,370
<font color="#CCCCCC">drivers property or set of the drivers</font>

151
00:09:14,900 --> 00:09:22,520
property then<font color="#CCCCCC"> you can use I also is open</font>

152
00:09:19,370 --> 00:09:25,190
to connect to the target target and

153
00:09:22,520 --> 00:09:27,319
target the driver then you can call I

154
00:09:25,190 --> 00:09:29,930
<font color="#E5E5E5">will connect the call methods to</font>

155
00:09:27,320 --> 00:09:34,340
interact with<font color="#E5E5E5"> the driver and the</font>

156
00:09:29,930 --> 00:09:37,160
<font color="#CCCCCC">co-drivers method</font><font color="#E5E5E5"> last but not least you</font>

157
00:09:34,340 --> 00:09:42,140
can use<font color="#CCCCCC"> I also is close to close the</font>

158
00:09:37,160 --> 00:09:45,469
connection connection of the driver so

159
00:09:42,140 --> 00:09:50,180
here is an example<font color="#E5E5E5"> of how to communicate</font>

160
00:09:45,470 --> 00:09:55,480
<font color="#E5E5E5">with with an arcade driver first you use</font>

161
00:09:50,180 --> 00:10:00,739
our service<font color="#E5E5E5"> get matching service to</font>

162
00:09:55,480 --> 00:10:04,040
communicate to get the service of arcade

163
00:10:00,740 --> 00:10:08,630
driver code<font color="#E5E5E5"> I will fire</font><font color="#CCCCCC"> where local node</font>

164
00:10:04,040 --> 00:10:12,020
<font color="#E5E5E5">either will connect to the driver called</font>

165
00:10:08,630 --> 00:10:15,470
<font color="#E5E5E5">elf</font><font color="#CCCCCC"> fire</font><font color="#E5E5E5"> where a fire a fire where</font>

166
00:10:12,020 --> 00:10:18,410
family and then<font color="#CCCCCC"> you can use our register</font>

167
00:10:15,470 --> 00:10:21,500
entry state<font color="#CCCCCC"> ACF property to set the</font>

168
00:10:18,410 --> 00:10:24,740
property of this driver<font color="#E5E5E5"> then you can use</font>

169
00:10:21,500 --> 00:10:30,560
<font color="#E5E5E5">I also is open to</font><font color="#CCCCCC"> open this service and</font>

170
00:10:24,740 --> 00:10:32,420
get our<font color="#CCCCCC"> our user client</font><font color="#E5E5E5"> after</font><font color="#CCCCCC"> you can</font>

171
00:10:30,560 --> 00:10:35,060
<font color="#CCCCCC">see other client you</font><font color="#E5E5E5"> can communicate</font>

172
00:10:32,420 --> 00:10:37,520
<font color="#CCCCCC">with it</font><font color="#E5E5E5"> and you can</font><font color="#CCCCCC"> use I'll connect</font><font color="#E5E5E5"> the</font>

173
00:10:35,060 --> 00:10:40,670
<font color="#E5E5E5">commercial to call the drivers method</font>

174
00:10:37,520 --> 00:10:43,520
<font color="#E5E5E5">through the connection after that you</font>

175
00:10:40,670 --> 00:10:47,439
can use I also is close to close<font color="#CCCCCC"> the</font>

176
00:10:43,520 --> 00:10:51,260
<font color="#E5E5E5">connection with the</font><font color="#CCCCCC"> target driver</font>

177
00:10:47,440 --> 00:10:56,090
actually<font color="#E5E5E5"> API is</font><font color="#CCCCCC"> in our kid framework</font><font color="#E5E5E5"> are</font>

178
00:10:51,260 --> 00:11:00,560
wrappers of mark 12 which are generated

179
00:10:56,090 --> 00:11:04,520
by<font color="#E5E5E5"> MIG and individually call into Quebec</font>

180
00:11:00,560 --> 00:11:07,939
measures implemented by user clients<font color="#E5E5E5"> for</font>

181
00:11:04,520 --> 00:11:10,699
<font color="#E5E5E5">example if you user user land API called</font>

182
00:11:07,939 --> 00:11:14,478
connect the commencer<font color="#E5E5E5"> it is actually a</font>

183
00:11:10,699 --> 00:11:15,319
<font color="#CCCCCC">mock</font><font color="#E5E5E5"> Trevi in the kernel and it will</font>

184
00:11:14,479 --> 00:11:18,919
called

185
00:11:15,319 --> 00:11:22,728
code which are generated by<font color="#CCCCCC"> MIG and the</font>

186
00:11:18,919 --> 00:11:26,049
eventually<font color="#E5E5E5"> call IO user client external</font>

187
00:11:22,729 --> 00:11:33,529
method which is a<font color="#E5E5E5"> common callback method</font>

188
00:11:26,049 --> 00:11:38,029
<font color="#E5E5E5">implemented by the you declined</font><font color="#CCCCCC"> despite</font>

189
00:11:33,529 --> 00:11:39,919
of strictest and<font color="#E5E5E5"> box restriction some</font>

190
00:11:38,029 --> 00:11:43,220
<font color="#E5E5E5">user</font><font color="#CCCCCC"> cleansing</font><font color="#E5E5E5"> our kids</font>

191
00:11:39,919 --> 00:11:48,139
driver can still be accessed<font color="#E5E5E5"> by sandbox</font>

192
00:11:43,220 --> 00:11:50,689
<font color="#E5E5E5">apps on</font><font color="#CCCCCC"> iOS for example we throw</font>

193
00:11:48,139 --> 00:11:52,099
experience when confirmed<font color="#CCCCCC"> these</font>

194
00:11:50,689 --> 00:11:56,228
available

195
00:11:52,099 --> 00:12:01,069
<font color="#CCCCCC">Yuda clients and their corresponding</font>

196
00:11:56,229 --> 00:12:04,069
<font color="#E5E5E5">allocate device driver names OS 11 for</font>

197
00:12:01,069 --> 00:12:06,889
example<font color="#E5E5E5"> the most important and the</font><font color="#CCCCCC"> most</font>

198
00:12:04,069 --> 00:12:09,439
famous one<font color="#CCCCCC"> is eros of his root you can</font>

199
00:12:06,889 --> 00:12:13,579
<font color="#CCCCCC">use Iosefa through the you decline to</font>

200
00:12:09,439 --> 00:12:21,259
<font color="#E5E5E5">communicate with this driver</font><font color="#CCCCCC"> OS</font><font color="#E5E5E5"> inside</font>

201
00:12:13,579 --> 00:12:23,659
<font color="#E5E5E5">of the sandbox</font><font color="#CCCCCC"> compared with kernel</font>

202
00:12:21,259 --> 00:12:26,720
drivers are always blamed for poor

203
00:12:23,659 --> 00:12:30,439
<font color="#E5E5E5">quality so which makes them frequently</font>

204
00:12:26,720 --> 00:12:34,609
<font color="#CCCCCC">to be used to exploit the kernel a lot</font>

205
00:12:30,439 --> 00:12:40,129
<font color="#E5E5E5">of bugs in</font><font color="#CCCCCC"> I used in</font><font color="#E5E5E5"> real</font><font color="#CCCCCC"> world job Rick</font>

206
00:12:34,609 --> 00:12:42,199
for example for iOS 11 it<font color="#E5E5E5"> electrode</font>

207
00:12:40,129 --> 00:12:46,519
rubric used the aisles of his route

208
00:12:42,199 --> 00:12:52,159
<font color="#CCCCCC">which are found by arm beer and for</font><font color="#E5E5E5"> iOS</font>

209
00:12:46,519 --> 00:12:57,169
9<font color="#E5E5E5"> Pangu team used the</font><font color="#CCCCCC"> i/o mobile from</font>

210
00:12:52,159 --> 00:13:00,189
frame buffer<font color="#E5E5E5"> vulnerability which is a</font>

211
00:12:57,169 --> 00:13:02,299
hip<font color="#CCCCCC"> off flaw in the kernel driver and</font>

212
00:13:00,189 --> 00:13:06,559
Teddy used

213
00:13:02,299 --> 00:13:13,399
I wish Heidi family vulnerability<font color="#E5E5E5"> to 2</font>

214
00:13:06,559 --> 00:13:15,719
jailbreak iOS 8<font color="#CCCCCC"> so</font><font color="#E5E5E5"> we can we</font><font color="#CCCCCC"> can still</font>

215
00:13:13,399 --> 00:13:19,080
find a lot<font color="#CCCCCC"> of</font><font color="#E5E5E5"> boxing</font>

216
00:13:15,720 --> 00:13:21,860
our iOS and the Mac OS<font color="#CCCCCC"> and now I will</font>

217
00:13:19,080 --> 00:13:26,540
<font color="#E5E5E5">show two vulnerabilities</font>

218
00:13:21,860 --> 00:13:30,030
the first one is<font color="#E5E5E5"> information link</font>

219
00:13:26,540 --> 00:13:33,870
<font color="#E5E5E5">vulnerability on the fire fire</font><font color="#CCCCCC"> where</font>

220
00:13:30,030 --> 00:13:38,970
family driver<font color="#E5E5E5"> and you can</font><font color="#CCCCCC"> say this</font><font color="#E5E5E5"> is a</font>

221
00:13:33,870 --> 00:13:43,230
function<font color="#CCCCCC"> and the first the out</font><font color="#E5E5E5"> channel</font>

222
00:13:38,970 --> 00:13:48,900
handler is a variable on<font color="#E5E5E5"> the kernels</font>

223
00:13:43,230 --> 00:13:53,310
deck and it is initialized and it will

224
00:13:48,900 --> 00:14:00,020
pass<font color="#E5E5E5"> the into the is</font><font color="#CCCCCC"> OCH channel create</font>

225
00:13:53,310 --> 00:14:03,869
function at last it will<font color="#E5E5E5"> be it will</font><font color="#CCCCCC"> be</font>

226
00:14:00,020 --> 00:14:09,360
it will<font color="#CCCCCC"> be a read out and send</font><font color="#E5E5E5"> it back</font>

227
00:14:03,870 --> 00:14:13,320
<font color="#CCCCCC">to the user space inside the</font><font color="#E5E5E5"> method we</font>

228
00:14:09,360 --> 00:14:17,630
can<font color="#E5E5E5"> find that in a way of this variable</font>

229
00:14:13,320 --> 00:14:22,800
will be<font color="#E5E5E5"> passed into the add object</font>

230
00:14:17,630 --> 00:14:25,430
method in this method we can<font color="#CCCCCC"> see if we</font>

231
00:14:22,800 --> 00:14:28,890
<font color="#CCCCCC">call this method too many times</font>

232
00:14:25,430 --> 00:14:32,069
the kernel will return an error<font color="#CCCCCC"> the</font>

233
00:14:28,890 --> 00:14:35,550
driver will return an error that<font color="#E5E5E5"> we</font>

234
00:14:32,070 --> 00:14:38,970
don't have memory<font color="#E5E5E5"> cannot</font><font color="#CCCCCC"> a key</font><font color="#E5E5E5"> I will</font>

235
00:14:35,550 --> 00:14:42,689
<font color="#E5E5E5">return</font><font color="#CCCCCC"> no memory means we don't</font><font color="#E5E5E5"> have any</font>

236
00:14:38,970 --> 00:14:46,020
memory to allocate<font color="#E5E5E5"> and as in a</font><font color="#CCCCCC"> world -</font>

237
00:14:42,690 --> 00:14:48,780
<font color="#E5E5E5">nothing for the out handle and just the</font>

238
00:14:46,020 --> 00:14:54,120
return<font color="#E5E5E5"> rate so as we mentioned before</font>

239
00:14:48,780 --> 00:14:58,199
<font color="#CCCCCC">out handle is over</font><font color="#E5E5E5"> verbal on the</font>

240
00:14:54,120 --> 00:15:03,120
<font color="#E5E5E5">Connells deck without any initialized so</font>

241
00:14:58,200 --> 00:15:07,530
after debugging we found it away<font color="#E5E5E5"> link 4</font>

242
00:15:03,120 --> 00:15:12,740
<font color="#E5E5E5">bytes information which is a wishes</font>

243
00:15:07,530 --> 00:15:17,939
address on the in in the kernel so

244
00:15:12,740 --> 00:15:22,830
<font color="#E5E5E5">compared with</font><font color="#CCCCCC"> Kanak hatch we downloaded</font>

245
00:15:17,940 --> 00:15:25,590
<font color="#CCCCCC">from Apple's</font><font color="#E5E5E5"> website we</font><font color="#CCCCCC"> can get the</font>

246
00:15:22,830 --> 00:15:29,210
<font color="#E5E5E5">colossal ID in the Lord</font>

247
00:15:25,590 --> 00:15:32,690
32 bytes after<font color="#E5E5E5"> data we can calculate</font>

248
00:15:29,210 --> 00:15:35,240
and the brick colossal<font color="#CCCCCC"> I'd although we</font>

249
00:15:32,690 --> 00:15:37,670
can though we can<font color="#E5E5E5"> only get the Lord</font>

250
00:15:35,240 --> 00:15:42,410
<font color="#E5E5E5">started to</font><font color="#CCCCCC"> bite but it's enough because</font>

251
00:15:37,670 --> 00:15:48,349
the higher<font color="#E5E5E5"> study Tobias is always 0xffff</font>

252
00:15:42,410 --> 00:15:51,760
<font color="#CCCCCC">it there</font><font color="#E5E5E5"> so now we brick Cano Cano</font>

253
00:15:48,350 --> 00:15:51,760
Salida<font color="#CCCCCC"> yes</font>

254
00:15:52,360 --> 00:16:01,010
the next<font color="#CCCCCC"> Barca is</font><font color="#E5E5E5"> the fire</font><font color="#CCCCCC"> we're family</font>

255
00:15:56,870 --> 00:16:03,800
to this Barca is a risk condition

256
00:16:01,010 --> 00:16:06,920
problem<font color="#E5E5E5"> it has a risk condition problem</font>

257
00:16:03,800 --> 00:16:12,819
and can help us to control the PC

258
00:16:06,920 --> 00:16:22,339
register in this function we<font color="#E5E5E5"> can see</font><font color="#CCCCCC"> F</font>

259
00:16:12,820 --> 00:16:26,120
memory<font color="#CCCCCC"> FME</font><font color="#E5E5E5"> M so this this</font><font color="#CCCCCC"> is a this is</font><font color="#E5E5E5"> a</font>

260
00:16:22,340 --> 00:16:28,730
number of class<font color="#E5E5E5"> of i/o for</font><font color="#CCCCCC"> were you to</font>

261
00:16:26,120 --> 00:16:32,710
read commander class and all<font color="#CCCCCC"> the other</font>

262
00:16:28,730 --> 00:16:39,650
clients<font color="#E5E5E5"> can read this carried it is</font>

263
00:16:32,710 --> 00:16:43,130
<font color="#CCCCCC">can read it f F memory and because we</font>

264
00:16:39,650 --> 00:16:46,400
can<font color="#E5E5E5"> control the</font><font color="#CCCCCC"> parameters in the user</font>

265
00:16:43,130 --> 00:16:53,030
space<font color="#E5E5E5"> so we can control</font><font color="#CCCCCC"> the free of</font><font color="#E5E5E5"> F</font>

266
00:16:46,400 --> 00:16:58,490
memory for<font color="#CCCCCC"> forwards</font><font color="#E5E5E5"> read this method has</font>

267
00:16:53,030 --> 00:17:01,760
<font color="#CCCCCC">no problem because it will check the it</font>

268
00:16:58,490 --> 00:17:05,359
will check the<font color="#E5E5E5"> F memory before use it</font>

269
00:17:01,760 --> 00:17:11,750
<font color="#E5E5E5">but the form multiple</font><font color="#CCCCCC"> thread it will</font>

270
00:17:05,359 --> 00:17:15,229
have a risk condition problem<font color="#CCCCCC"> because</font>

271
00:17:11,750 --> 00:17:17,960
for<font color="#CCCCCC"> one thread we can free the F memory</font>

272
00:17:15,230 --> 00:17:20,960
<font color="#E5E5E5">because we can control</font><font color="#CCCCCC"> the parameters so</font>

273
00:17:17,960 --> 00:17:24,740
we<font color="#E5E5E5"> have free the F memory then for</font>

274
00:17:20,960 --> 00:17:28,100
another<font color="#E5E5E5"> thread we can use</font><font color="#CCCCCC"> F memory to</font>

275
00:17:24,740 --> 00:17:31,010
co-create read read command in<font color="#E5E5E5"> this</font>

276
00:17:28,099 --> 00:17:34,730
method<font color="#E5E5E5"> it'll we'll use F memory to code</font>

277
00:17:31,010 --> 00:17:38,450
something<font color="#CCCCCC"> but if we free this F memory</font>

278
00:17:34,730 --> 00:17:40,820
in the first the thread<font color="#E5E5E5"> and under then</font>

279
00:17:38,450 --> 00:17:44,290
<font color="#CCCCCC">quality in</font><font color="#E5E5E5"> the Creator read command it</font>

280
00:17:40,820 --> 00:17:44,290
<font color="#CCCCCC">will cause our use after free</font>

281
00:17:44,809 --> 00:17:55,760
so if we can cancel if we can allocate<font color="#E5E5E5"> a</font>

282
00:17:51,380 --> 00:18:01,240
sim a sim bar with the same size as as

283
00:17:55,760 --> 00:18:01,240
memory<font color="#E5E5E5"> we can control the PC register</font>

284
00:18:01,960 --> 00:18:11,809
so after<font color="#E5E5E5"> control the PC register we we</font>

285
00:18:07,220 --> 00:18:14,240
can do rope for if we want<font color="#CCCCCC"> to do rope</font>

286
00:18:11,809 --> 00:18:17,870
we need to<font color="#E5E5E5"> stand as a rope chain into</font>

287
00:18:14,240 --> 00:18:23,059
the kernel<font color="#CCCCCC"> a good candidate for the hips</font>

288
00:18:17,870 --> 00:18:27,260
<font color="#CCCCCC">BRE is I already Street intrastate</font>

289
00:18:23,059 --> 00:18:35,510
<font color="#E5E5E5">properties because this this method will</font>

290
00:18:27,260 --> 00:18:38,510
call OS<font color="#CCCCCC"> r0 knives</font><font color="#E5E5E5"> XML function this</font>

291
00:18:35,510 --> 00:18:44,779
function is is a good candidate because

292
00:18:38,510 --> 00:18:49,158
a lot<font color="#E5E5E5"> of drivers can be accessed and can</font>

293
00:18:44,779 --> 00:18:52,190
be said<font color="#CCCCCC"> a lot</font><font color="#E5E5E5"> of drivers property can be</font>

294
00:18:49,159 --> 00:18:54,320
<font color="#E5E5E5">said from the user from user space for</font>

295
00:18:52,190 --> 00:18:57,140
example<font color="#CCCCCC"> I will eat right</font><font color="#E5E5E5"> even service</font>

296
00:18:54,320 --> 00:19:00,590
and<font color="#E5E5E5"> thus</font><font color="#CCCCCC"> BRE the data can be controlled</font>

297
00:18:57,140 --> 00:19:03,169
<font color="#E5E5E5">can be read you can use our register</font>

298
00:19:00,590 --> 00:19:06,320
entry create properties to read as a

299
00:19:03,169 --> 00:19:08,690
<font color="#CCCCCC">spirit data back to user space and the</font>

300
00:19:06,320 --> 00:19:11,928
head of<font color="#E5E5E5"> the three data is controllable</font>

301
00:19:08,690 --> 00:19:17,750
<font color="#E5E5E5">if you use Mac message you can't control</font>

302
00:19:11,929 --> 00:19:20,390
<font color="#E5E5E5">the head of the spirit data</font><font color="#CCCCCC"> here is a</font>

303
00:19:17,750 --> 00:19:23,029
classic<font color="#E5E5E5"> rope chain to get the root</font>

304
00:19:20,390 --> 00:19:28,270
privilege<font color="#E5E5E5"> firstly you need to do is</font>

305
00:19:23,029 --> 00:19:31,130
delivered<font color="#E5E5E5"> to control the stack of the</font>

306
00:19:28,270 --> 00:19:34,990
<font color="#CCCCCC">controllers deck</font><font color="#E5E5E5"> and then you use</font>

307
00:19:31,130 --> 00:19:38,000
current process to get the pointer of

308
00:19:34,990 --> 00:19:41,960
together structure pointer of current

309
00:19:38,000 --> 00:19:45,070
process then use the<font color="#CCCCCC"> yo-yo spraga you</font>

310
00:19:41,960 --> 00:19:48,770
credit<font color="#E5E5E5"> to get the identity of the</font>

311
00:19:45,070 --> 00:19:51,529
structure process after<font color="#CCCCCC"> that you can use</font>

312
00:19:48,770 --> 00:19:55,060
<font color="#CCCCCC">p0 to stay to see are you IDs they</font><font color="#E5E5E5"> are</font>

313
00:19:51,529 --> 00:19:58,540
<font color="#CCCCCC">our UID honest er as the UID</font>

314
00:19:55,060 --> 00:20:03,610
as the UID to<font color="#E5E5E5"> zero</font>

315
00:19:58,540 --> 00:20:07,060
it will set the<font color="#E5E5E5"> process to</font><font color="#CCCCCC"> root and as a</font>

316
00:20:03,610 --> 00:20:09,820
you use a thread exception return to

317
00:20:07,060 --> 00:20:12,220
exist<font color="#E5E5E5"> kernel and return to user space</font>

318
00:20:09,820 --> 00:20:16,750
<font color="#E5E5E5">then</font><font color="#CCCCCC"> you</font><font color="#E5E5E5"> can use that</font><font color="#CCCCCC"> you allottee to</font>

319
00:20:12,220 --> 00:20:21,250
get the root privilege<font color="#CCCCCC"> but</font><font color="#E5E5E5"> the for the</font>

320
00:20:16,750 --> 00:20:25,750
latest Mac OS some classic<font color="#CCCCCC"> that</font><font color="#E5E5E5"> people</font>

321
00:20:21,250 --> 00:20:28,870
gadget are missing so you need to find a

322
00:20:25,750 --> 00:20:32,230
new gadgets to do that luckily we find

323
00:20:28,870 --> 00:20:36,729
that<font color="#CCCCCC"> two gadgets which can do</font><font color="#E5E5E5"> the stack</font>

324
00:20:32,230 --> 00:20:41,730
period for the first gadget that you can

325
00:20:36,730 --> 00:20:46,270
use is to control us X and then call IX

326
00:20:41,730 --> 00:20:49,420
photos<font color="#E5E5E5"> second gadget you can control</font>

327
00:20:46,270 --> 00:20:57,129
<font color="#E5E5E5">eyes</font><font color="#CCCCCC"> peace draw as the</font><font color="#E5E5E5"> X and then jump</font>

328
00:20:49,420 --> 00:21:01,270
<font color="#CCCCCC">to as the X</font><font color="#E5E5E5"> plus</font><font color="#CCCCCC"> three it so here is the</font>

329
00:20:57,130 --> 00:21:06,130
whole exploit process first<font color="#E5E5E5"> you to keep</font>

330
00:21:01,270 --> 00:21:10,690
straight who's read<font color="#CCCCCC"> the Rope change into</font>

331
00:21:06,130 --> 00:21:14,370
the kernel after that you use<font color="#CCCCCC"> yo-yos our</font>

332
00:21:10,690 --> 00:21:17,500
first day you need to<font color="#CCCCCC"> use the info link</font>

333
00:21:14,370 --> 00:21:19,719
vulnerability to to<font color="#E5E5E5"> break the</font><font color="#CCCCCC"> colossal</font>

334
00:21:17,500 --> 00:21:23,140
<font color="#CCCCCC">ID and then you can build your rope</font>

335
00:21:19,720 --> 00:21:27,280
chain after<font color="#CCCCCC"> that you spray the Rope</font>

336
00:21:23,140 --> 00:21:31,180
changing through the<font color="#E5E5E5"> kernel then you use</font>

337
00:21:27,280 --> 00:21:34,240
the risk condition<font color="#CCCCCC"> box put to control</font>

338
00:21:31,180 --> 00:21:38,830
the PC register<font color="#CCCCCC"> after that you use the</font>

339
00:21:34,240 --> 00:21:43,390
PC register<font color="#E5E5E5"> to jump to get</font><font color="#CCCCCC"> is a way that</font>

340
00:21:38,830 --> 00:21:45,669
you can control<font color="#CCCCCC"> the stack after the</font>

341
00:21:43,390 --> 00:21:49,420
<font color="#CCCCCC">controls</font><font color="#E5E5E5"> deck you</font><font color="#CCCCCC"> can run the</font><font color="#E5E5E5"> rope chain</font>

342
00:21:45,670 --> 00:21:57,660
<font color="#E5E5E5">and get the root privilege and finish</font>

343
00:21:49,420 --> 00:21:58,810
the privilege escalation so here is

344
00:21:57,660 --> 00:22:03,299
screenshots

345
00:21:58,810 --> 00:22:07,889
after<font color="#CCCCCC"> a successful privilege escalation</font>

346
00:22:03,299 --> 00:22:11,290
before<font color="#CCCCCC"> we before</font><font color="#E5E5E5"> our talk we</font><font color="#CCCCCC"> send the</font>

347
00:22:07,890 --> 00:22:14,110
vulnerabilities<font color="#E5E5E5"> to Apple and they give</font>

348
00:22:11,290 --> 00:22:18,730
us<font color="#E5E5E5"> two</font><font color="#CCCCCC"> CVEs about the</font><font color="#E5E5E5"> information link</font>

349
00:22:14,110 --> 00:22:22,530
and and the risk condition<font color="#CCCCCC"> bugs and</font><font color="#E5E5E5"> a</font>

350
00:22:18,730 --> 00:22:28,210
fixed on the latest Mac<font color="#CCCCCC"> OS 10 point</font>

351
00:22:22,530 --> 00:22:31,178
<font color="#E5E5E5">thirteen point four so that's my part</font>

352
00:22:28,210 --> 00:22:36,490
<font color="#E5E5E5">and then so long</font><font color="#CCCCCC"> we'll talk</font><font color="#E5E5E5"> more about</font>

353
00:22:31,179 --> 00:22:43,030
our for Rick okay<font color="#E5E5E5"> welcome to shop sense</font>

354
00:22:36,490 --> 00:22:45,160
man compared<font color="#CCCCCC"> to the compared</font><font color="#E5E5E5"> to this one</font>

355
00:22:43,030 --> 00:22:47,160
abilities the way in which we<font color="#E5E5E5"> found them</font>

356
00:22:45,160 --> 00:22:49,360
it's much more valuable<font color="#CCCCCC"> actually</font>

357
00:22:47,160 --> 00:22:51,210
<font color="#E5E5E5">analyzing</font><font color="#CCCCCC"> Apple</font><font color="#E5E5E5"> Trevor is a it's an auto</font>

358
00:22:49,360 --> 00:22:54,580
easy task

359
00:22:51,210 --> 00:22:57,850
<font color="#CCCCCC">mini because three facts that these</font>

360
00:22:54,580 --> 00:23:02,290
<font color="#E5E5E5">rails are most closest and the program</font>

361
00:22:57,850 --> 00:23:05,110
the in C++ and<font color="#CCCCCC"> an even four hours</font>

362
00:23:02,290 --> 00:23:08,440
<font color="#CCCCCC">drivers there are not like</font><font color="#E5E5E5"> have symbols</font>

363
00:23:05,110 --> 00:23:11,559
<font color="#E5E5E5">there are no symbols</font><font color="#CCCCCC"> so let's first</font><font color="#E5E5E5"> look</font>

364
00:23:08,440 --> 00:23:17,200
<font color="#E5E5E5">at</font><font color="#CCCCCC"> how our</font><font color="#E5E5E5"> battery looks like in Allah</font>

365
00:23:11,559 --> 00:23:20,168
<font color="#E5E5E5">Pro</font><font color="#CCCCCC"> so let's first</font><font color="#E5E5E5"> look at</font><font color="#CCCCCC"> her Mac</font><font color="#E5E5E5"> OS</font>

366
00:23:17,200 --> 00:23:23,020
<font color="#E5E5E5">rowers from</font><font color="#CCCCCC"> these two pictures</font><font color="#E5E5E5"> we can</font>

367
00:23:20,169 --> 00:23:26,140
<font color="#E5E5E5">see</font><font color="#CCCCCC"> that Mac OS kernel drivers have some</font>

368
00:23:23,020 --> 00:23:29,129
symbols including symbols for global

369
00:23:26,140 --> 00:23:34,150
variables<font color="#E5E5E5"> unless on the left hand and</font>

370
00:23:29,130 --> 00:23:36,520
<font color="#E5E5E5">for factions on the red hand and also we</font>

371
00:23:34,150 --> 00:23:40,870
<font color="#E5E5E5">can find symbols of all we tables in Mac</font>

372
00:23:36,520 --> 00:23:42,730
OS kernel<font color="#CCCCCC"> cannot reverse necklace human</font>

373
00:23:40,870 --> 00:23:46,149
<font color="#E5E5E5">battery will can fend the symbols for</font>

374
00:23:42,730 --> 00:23:50,160
the<font color="#E5E5E5"> messers that how data flowers are</font>

375
00:23:46,150 --> 00:23:50,160
<font color="#E5E5E5">going to provide to users based programs</font>

376
00:23:50,850 --> 00:23:58,480
better<font color="#CCCCCC"> who can who can offend that</font><font color="#E5E5E5"> Mac</font>

377
00:23:54,730 --> 00:24:00,970
<font color="#E5E5E5">OS</font><font color="#CCCCCC"> drivers how function names their</font><font color="#E5E5E5"> file</font>

378
00:23:58,480 --> 00:24:03,880
names<font color="#E5E5E5"> are kept and meaningful and these</font>

379
00:24:00,970 --> 00:24:08,610
these these function names can be the

380
00:24:03,880 --> 00:24:08,610
<font color="#E5E5E5">Demong goal to get the</font><font color="#CCCCCC"> argument halves</font>

381
00:24:08,970 --> 00:24:16,050
<font color="#CCCCCC">so it's these fennec benefits it seems</font>

382
00:24:12,520 --> 00:24:18,770
<font color="#CCCCCC">that her functions in Mac OS hours</font>

383
00:24:16,050 --> 00:24:21,540
the<font color="#E5E5E5"> pig compelled coal can be partially</font>

384
00:24:18,770 --> 00:24:25,230
<font color="#E5E5E5">human-readable it seemed</font><font color="#CCCCCC"> that we can</font>

385
00:24:21,540 --> 00:24:27,480
understand this coal but<font color="#E5E5E5"> actually you</font>

386
00:24:25,230 --> 00:24:30,600
<font color="#CCCCCC">can see that there are</font><font color="#E5E5E5"> many function</font>

387
00:24:27,480 --> 00:24:33,260
<font color="#E5E5E5">Ponder's do these function</font><font color="#CCCCCC"> Potter's</font><font color="#E5E5E5"> are</font>

388
00:24:30,600 --> 00:24:36,600
all<font color="#CCCCCC"> water function calls we don't know</font>

389
00:24:33,260 --> 00:24:38,940
the real target<font color="#CCCCCC"> the real function</font><font color="#E5E5E5"> that</font>

390
00:24:36,600 --> 00:24:41,310
<font color="#E5E5E5">are calling with these function pointers</font>

391
00:24:38,940 --> 00:24:47,640
<font color="#E5E5E5">we don't know what functions are called</font>

392
00:24:41,310 --> 00:24:51,899
here so so interprocedural analysis can

393
00:24:47,640 --> 00:24:54,990
now be performed with this code<font color="#E5E5E5"> not</font><font color="#CCCCCC"> only</font>

394
00:24:51,900 --> 00:25:00,540
<font color="#E5E5E5">for manual review but also for setting</font>

395
00:24:54,990 --> 00:25:03,750
<font color="#E5E5E5">the static analysis</font><font color="#CCCCCC"> and also without</font>

396
00:25:00,540 --> 00:25:06,750
annoying the structures of the classes

397
00:25:03,750 --> 00:25:09,630
we<font color="#E5E5E5"> don't handstand is this code we don't</font>

398
00:25:06,750 --> 00:25:13,290
<font color="#CCCCCC">know what a member who rebels are set</font>

399
00:25:09,630 --> 00:25:15,330
and the water member<font color="#E5E5E5"> rebels are right so</font>

400
00:25:13,290 --> 00:25:19,350
we cannot fully understand<font color="#CCCCCC"> macro</font><font color="#E5E5E5"> has two</font>

401
00:25:15,330 --> 00:25:22,679
<font color="#E5E5E5">hours so how well how about her</font><font color="#CCCCCC"> ours</font>

402
00:25:19,350 --> 00:25:25,770
cannot<font color="#CCCCCC"> ours</font><font color="#E5E5E5"> actually</font><font color="#CCCCCC"> their situation are</font>

403
00:25:22,680 --> 00:25:30,650
even worse<font color="#CCCCCC"> you can</font><font color="#E5E5E5"> see that this is a</font>

404
00:25:25,770 --> 00:25:33,210
<font color="#E5E5E5">code awful this is a function names</font><font color="#CCCCCC"> Yi</font>

405
00:25:30,650 --> 00:25:36,360
<font color="#CCCCCC">ours</font><font color="#E5E5E5"> cannot reverse you can</font><font color="#CCCCCC"> see</font><font color="#E5E5E5"> that</font>

406
00:25:33,210 --> 00:25:37,920
these fancy names<font color="#E5E5E5"> amenities at April</font>

407
00:25:36,360 --> 00:25:42,360
names these functions we trust the

408
00:25:37,920 --> 00:25:44,130
<font color="#CCCCCC">screens prefixed by sup and also there</font>

409
00:25:42,360 --> 00:25:48,540
<font color="#E5E5E5">is no symbols for with tables we</font><font color="#CCCCCC"> can</font>

410
00:25:44,130 --> 00:25:51,600
often<font color="#CCCCCC"> fan where we tables are and look</font>

411
00:25:48,540 --> 00:25:54,300
at this this piece<font color="#E5E5E5"> of code this should</font>

412
00:25:51,600 --> 00:25:57,949
be with table this should be a we table

413
00:25:54,300 --> 00:26:04,220
<font color="#CCCCCC">man we</font><font color="#E5E5E5"> can</font><font color="#CCCCCC"> not a fan</font><font color="#E5E5E5"> had any clue about</font>

414
00:25:57,950 --> 00:26:06,990
about this way<font color="#E5E5E5"> table what's worse</font><font color="#CCCCCC"> a</font>

415
00:26:04,220 --> 00:26:11,430
<font color="#CCCCCC">develop row cannot</font><font color="#E5E5E5"> recognize functions</font>

416
00:26:06,990 --> 00:26:17,400
<font color="#CCCCCC">in</font><font color="#E5E5E5"> in ours cannot read words for most of</font>

417
00:26:11,430 --> 00:26:20,970
time so let's look at her that<font color="#CCCCCC"> the camp</font>

418
00:26:17,400 --> 00:26:23,670
they<font color="#E5E5E5"> compelled that they came the the</font>

419
00:26:20,970 --> 00:26:27,170
the came back all<font color="#CCCCCC"> of ours ours Canoga</font>

420
00:26:23,670 --> 00:26:30,620
<font color="#CCCCCC">hours</font><font color="#E5E5E5"> we can see that</font><font color="#CCCCCC"> other Co days</font>

421
00:26:27,170 --> 00:26:32,870
<font color="#E5E5E5">cannot be understand at all here you can</font>

422
00:26:30,620 --> 00:26:35,419
see that the faction names are<font color="#CCCCCC"> - and the</font>

423
00:26:32,870 --> 00:26:37,189
real targets awful function<font color="#CCCCCC"> fathers are</font>

424
00:26:35,420 --> 00:26:42,590
unknown and the were rebels have no

425
00:26:37,190 --> 00:26:44,300
<font color="#CCCCCC">happen information and also</font><font color="#E5E5E5"> like a Mac</font>

426
00:26:42,590 --> 00:26:47,750
OS<font color="#E5E5E5"> kernel drivers without knowing the</font>

427
00:26:44,300 --> 00:26:49,760
class instructors<font color="#E5E5E5"> the</font><font color="#CCCCCC"> reeds and the rice</font>

428
00:26:47,750 --> 00:26:53,990
on<font color="#E5E5E5"> class memorable rebels cannot be</font>

429
00:26:49,760 --> 00:26:57,260
recognized<font color="#E5E5E5"> so in order</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> overcome these</font>

430
00:26:53,990 --> 00:27:00,530
obstacles<font color="#CCCCCC"> we design</font><font color="#E5E5E5"> and implement</font><font color="#CCCCCC"> a new</font>

431
00:26:57,260 --> 00:27:03,920
<font color="#E5E5E5">tool this tool is</font><font color="#CCCCCC"> called Luke you may be</font>

432
00:27:00,530 --> 00:27:06,970
<font color="#E5E5E5">wondering why we call this this tool</font>

433
00:27:03,920 --> 00:27:09,680
Luke because<font color="#CCCCCC"> Ryoga is a famous character</font>

434
00:27:06,970 --> 00:27:12,260
in the<font color="#CCCCCC"> comic</font><font color="#E5E5E5"> series</font>

435
00:27:09,680 --> 00:27:15,350
that's not<font color="#E5E5E5"> he is fun</font><font color="#CCCCCC"> off for eating</font>

436
00:27:12,260 --> 00:27:18,170
<font color="#E5E5E5">apples and trusting like us so we hope</font>

437
00:27:15,350 --> 00:27:20,780
that<font color="#CCCCCC"> her Rico can eat all the code of</font>

438
00:27:18,170 --> 00:27:25,130
the iPod<font color="#E5E5E5"> I work</font><font color="#CCCCCC"> odd hours</font><font color="#E5E5E5"> and</font><font color="#CCCCCC"> that</font><font color="#E5E5E5"> tell</font>

439
00:27:20,780 --> 00:27:28,879
<font color="#E5E5E5">us what</font><font color="#CCCCCC"> sparks the hell so for now</font><font color="#E5E5E5"> Rick</font>

440
00:27:25,130 --> 00:27:31,910
tries to recover symbols and so our

441
00:27:28,880 --> 00:27:35,690
object oriented approach features in Mac

442
00:27:31,910 --> 00:27:39,770
OS and<font color="#E5E5E5"> iOS cannot read words so let's</font>

443
00:27:35,690 --> 00:27:42,350
talk about<font color="#E5E5E5"> the features of Luke</font><font color="#CCCCCC"> we</font>

444
00:27:39,770 --> 00:27:45,139
design<font color="#E5E5E5"> and implement</font><font color="#CCCCCC"> Ryoka with below</font>

445
00:27:42,350 --> 00:27:47,899
features<font color="#CCCCCC"> these features are meaningful</font>

446
00:27:45,140 --> 00:27:51,110
sewing the lots of symbols and the

447
00:27:47,900 --> 00:27:54,260
<font color="#E5E5E5">object</font><font color="#CCCCCC"> oriented program issues</font><font color="#E5E5E5"> in binary</font>

448
00:27:51,110 --> 00:27:56,629
code<font color="#CCCCCC"> the first a first</font><font color="#E5E5E5"> feature is called</font>

449
00:27:54,260 --> 00:27:59,450
a class recognition<font color="#CCCCCC"> a construction in</font>

450
00:27:56,630 --> 00:28:01,550
this feature we added<font color="#CCCCCC"> away identifies</font>

451
00:27:59,450 --> 00:28:05,300
classes physical<font color="#E5E5E5"> informations including</font>

452
00:28:01,550 --> 00:28:07,700
including names and studies<font color="#E5E5E5"> and then</font>

453
00:28:05,300 --> 00:28:10,460
construct<font color="#CCCCCC"> the classes structures in</font>

454
00:28:07,700 --> 00:28:12,920
<font color="#CCCCCC">adapt row to represent these classes and</font>

455
00:28:10,460 --> 00:28:15,410
the second is<font color="#CCCCCC"> the</font><font color="#E5E5E5"> with with table</font>

456
00:28:12,920 --> 00:28:17,390
recognition the construction<font color="#E5E5E5"> this</font>

457
00:28:15,410 --> 00:28:19,700
feature recognized vegetables and

458
00:28:17,390 --> 00:28:21,520
<font color="#E5E5E5">contralto structures in reference and</font>

459
00:28:19,700 --> 00:28:27,460
these<font color="#E5E5E5"> with tables and it's all wise</font>

460
00:28:21,520 --> 00:28:29,780
<font color="#CCCCCC">recoving</font><font color="#E5E5E5"> the salawa is</font><font color="#CCCCCC"> recovering a</font>

461
00:28:27,460 --> 00:28:32,330
recurring function names this<font color="#CCCCCC"> is mostly</font>

462
00:28:29,780 --> 00:28:33,920
done in<font color="#CCCCCC"> hours</font><font color="#E5E5E5"> cannot reverse and the</font>

463
00:28:32,330 --> 00:28:37,020
fourth one is

464
00:28:33,920 --> 00:28:38,760
<font color="#CCCCCC">resoling Wabo on the</font><font color="#E5E5E5"> arc</font>

465
00:28:37,020 --> 00:28:42,480
the taps<font color="#E5E5E5"> and the last one by the</font>

466
00:28:38,760 --> 00:28:45,480
<font color="#E5E5E5">Nautilus</font><font color="#CCCCCC"> lies the us fault</font><font color="#E5E5E5"> let's briefly</font>

467
00:28:42,480 --> 00:28:48,390
see what the effects with these features

468
00:28:45,480 --> 00:28:50,580
<font color="#CCCCCC">the first one class</font><font color="#E5E5E5"> the recognition</font><font color="#CCCCCC"> a</font>

469
00:28:48,390 --> 00:28:53,850
<font color="#E5E5E5">construction which with this feature we</font>

470
00:28:50,580 --> 00:28:56,280
can create structures in<font color="#CCCCCC"> an approach to</font>

471
00:28:53,850 --> 00:29:00,990
reference and all the<font color="#CCCCCC"> classes</font><font color="#E5E5E5"> created in</font>

472
00:28:56,280 --> 00:29:02,430
the kernel drivers and with the<font color="#E5E5E5"> second</font>

473
00:29:00,990 --> 00:29:04,440
feature we<font color="#CCCCCC"> tebow recognition</font><font color="#E5E5E5"> the</font>

474
00:29:02,430 --> 00:29:07,890
construction can see that in the

475
00:29:04,440 --> 00:29:09,860
<font color="#E5E5E5">previous picture we know that</font><font color="#CCCCCC"> ours with</font>

476
00:29:07,890 --> 00:29:13,800
tables<font color="#CCCCCC"> cannot be recognized and a figure</font>

477
00:29:09,860 --> 00:29:16,439
and<font color="#CCCCCC"> on the phone</font><font color="#E5E5E5"> we don't know where the</font>

478
00:29:13,800 --> 00:29:20,040
<font color="#E5E5E5">way tables are but who is a week we now</font>

479
00:29:16,440 --> 00:29:24,150
can see<font color="#CCCCCC"> it clearly that</font><font color="#E5E5E5"> this is</font><font color="#CCCCCC"> a we</font>

480
00:29:20,040 --> 00:29:29,129
table for fall class and we<font color="#E5E5E5"> can see that</font>

481
00:29:24,150 --> 00:29:34,380
<font color="#E5E5E5">the entries</font><font color="#CCCCCC"> in this video what functions</font>

482
00:29:29,130 --> 00:29:36,450
<font color="#E5E5E5">I'm using a table and further with this</font>

483
00:29:34,380 --> 00:29:39,420
with<font color="#CCCCCC"> abomination and</font><font color="#E5E5E5"> a construction</font>

484
00:29:36,450 --> 00:29:41,610
feature we create structures represent

485
00:29:39,420 --> 00:29:43,830
<font color="#CCCCCC">in these with tables</font><font color="#E5E5E5"> and we can see that</font>

486
00:29:41,610 --> 00:29:45,649
they are<font color="#CCCCCC"> a lot</font><font color="#E5E5E5"> all four functions water</font>

487
00:29:43,830 --> 00:29:50,449
functions in<font color="#E5E5E5"> these</font><font color="#CCCCCC"> via table structures</font>

488
00:29:45,650 --> 00:29:55,290
<font color="#CCCCCC">this these memorable rebels are all</font>

489
00:29:50,450 --> 00:29:58,470
function function pointers so further

490
00:29:55,290 --> 00:30:01,610
<font color="#E5E5E5">ways the feature of the recurring</font>

491
00:29:58,470 --> 00:30:04,650
function names<font color="#CCCCCC"> when we have seen that</font>

492
00:30:01,610 --> 00:30:08,520
<font color="#E5E5E5">our eyes cannot really don't have any</font>

493
00:30:04,650 --> 00:30:09,030
<font color="#E5E5E5">symbol for</font><font color="#CCCCCC"> their function so but with</font>

494
00:30:08,520 --> 00:30:12,750
<font color="#CCCCCC">Rilke</font>

495
00:30:09,030 --> 00:30:15,240
we now house symbols for the functions

496
00:30:12,750 --> 00:30:21,810
we have<font color="#CCCCCC"> names of all these</font><font color="#E5E5E5"> functions and</font>

497
00:30:15,240 --> 00:30:25,110
<font color="#E5E5E5">we know what they mean right now</font><font color="#CCCCCC"> and</font><font color="#E5E5E5"> the</font>

498
00:30:21,810 --> 00:30:27,409
further with the with the<font color="#E5E5E5"> feature</font><font color="#CCCCCC"> all</font>

499
00:30:25,110 --> 00:30:30,629
for recovering function names and

500
00:30:27,410 --> 00:30:34,170
resolving where are those<font color="#E5E5E5"> tabs we can</font>

501
00:30:30,630 --> 00:30:36,900
know maybe you can see clearly<font color="#CCCCCC"> we can</font>

502
00:30:34,170 --> 00:30:39,420
know<font color="#E5E5E5"> what classes are</font><font color="#CCCCCC"> these</font><font color="#E5E5E5"> super rare</font>

503
00:30:36,900 --> 00:30:41,610
<font color="#E5E5E5">but with</font><font color="#CCCCCC"> the local variables</font><font color="#E5E5E5"> and we</font><font color="#CCCCCC"> can</font>

504
00:30:39,420 --> 00:30:44,870
know<font color="#E5E5E5"> what the functions what water</font>

505
00:30:41,610 --> 00:30:44,870
functions are<font color="#E5E5E5"> called here</font>

506
00:30:45,710 --> 00:30:52,690
and the newer<font color="#E5E5E5"> ones the feature in Ryoga</font>

507
00:30:49,550 --> 00:30:58,070
is called<font color="#CCCCCC"> Eve I support this feature</font>

508
00:30:52,690 --> 00:31:01,820
supports<font color="#CCCCCC"> your your action in had a pro 2</font>

509
00:30:58,070 --> 00:31:05,179
for a better experience<font color="#CCCCCC"> when</font><font color="#E5E5E5"> analyzing</font>

510
00:31:01,820 --> 00:31:09,320
epic<font color="#E5E5E5"> on the drivers</font><font color="#CCCCCC"> you see that there</font>

511
00:31:05,180 --> 00:31:13,760
<font color="#CCCCCC">is a auto function</font><font color="#E5E5E5"> call</font><font color="#CCCCCC"> in this</font><font color="#E5E5E5"> place in</font>

512
00:31:09,320 --> 00:31:16,310
the compiled<font color="#CCCCCC"> code and you trust the ones</font>

513
00:31:13,760 --> 00:31:19,370
<font color="#E5E5E5">who see what's the implementation of</font>

514
00:31:16,310 --> 00:31:22,610
this<font color="#CCCCCC"> virtual function so with Luke</font><font color="#E5E5E5"> you</font>

515
00:31:19,370 --> 00:31:25,429
can trust with<font color="#CCCCCC"> a double-click on the</font>

516
00:31:22,610 --> 00:31:27,409
function pointer<font color="#E5E5E5"> and then you can</font>

517
00:31:25,430 --> 00:31:31,430
directly<font color="#E5E5E5"> from through the</font><font color="#CCCCCC"> implementation</font>

518
00:31:27,410 --> 00:31:43,670
of this<font color="#CCCCCC"> this water function and here is</font>

519
00:31:31,430 --> 00:31:45,230
a small demo of this function you can

520
00:31:43,670 --> 00:31:49,850
<font color="#E5E5E5">see with a</font><font color="#CCCCCC"> double click</font><font color="#E5E5E5"> you trust a go</font>

521
00:31:45,230 --> 00:31:52,100
to<font color="#E5E5E5"> the implementation</font><font color="#CCCCCC"> and also</font><font color="#E5E5E5"> you can</font>

522
00:31:49,850 --> 00:31:55,219
<font color="#E5E5E5">choose the implementation of the</font>

523
00:31:52,100 --> 00:31:58,550
childhood classes and<font color="#CCCCCC"> a go to the child</font>

524
00:31:55,220 --> 00:32:02,590
class<font color="#E5E5E5"> is implementation this is a new</font>

525
00:31:58,550 --> 00:32:06,340
feature<font color="#CCCCCC"> oh sorry</font>

526
00:32:02,590 --> 00:32:09,889
so how may<font color="#E5E5E5"> you may you must be wondering</font>

527
00:32:06,340 --> 00:32:12,980
<font color="#E5E5E5">how we implement these features and the</font>

528
00:32:09,890 --> 00:32:14,900
function it is<font color="#E5E5E5"> fall for example</font><font color="#CCCCCC"> for the</font>

529
00:32:12,980 --> 00:32:20,690
<font color="#E5E5E5">first event class</font><font color="#CCCCCC"> recognition</font><font color="#E5E5E5"> and</font>

530
00:32:14,900 --> 00:32:24,260
construction in<font color="#CCCCCC"> ours in Mac OS and iOS</font>

531
00:32:20,690 --> 00:32:27,590
there is there<font color="#E5E5E5"> is a section called a</font>

532
00:32:24,260 --> 00:32:30,470
molding in inner func<font color="#E5E5E5"> this fun this</font>

533
00:32:27,590 --> 00:32:33,080
section<font color="#CCCCCC"> list of fill</font><font color="#E5E5E5"> in initialization</font>

534
00:32:30,470 --> 00:32:35,570
functions that are executed at<font color="#E5E5E5"> the start</font>

535
00:32:33,080 --> 00:32:38,659
of kernel<font color="#CCCCCC"> trailers</font><font color="#E5E5E5"> we use this these</font>

536
00:32:35,570 --> 00:32:41,649
functions to<font color="#E5E5E5"> implement to implement our</font>

537
00:32:38,660 --> 00:32:46,330
class recognition recognition and

538
00:32:41,650 --> 00:32:49,280
contraction feature so we analyze these

539
00:32:46,330 --> 00:32:52,939
initialization functions we can find

540
00:32:49,280 --> 00:32:56,570
<font color="#E5E5E5">that these functions call some research</font>

541
00:32:52,940 --> 00:32:59,840
<font color="#CCCCCC">fission function a religious</font><font color="#E5E5E5"> featuring</font>

542
00:32:56,570 --> 00:33:04,010
function at<font color="#CCCCCC"> the red line and</font>

543
00:32:59,840 --> 00:33:06,290
<font color="#CCCCCC">when calling these</font><font color="#E5E5E5"> functions we pass the</font>

544
00:33:04,010 --> 00:33:09,050
<font color="#CCCCCC">Travers passing some basically</font>

545
00:33:06,290 --> 00:33:12,649
information<font color="#CCCCCC"> of the classes including the</font>

546
00:33:09,050 --> 00:33:16,310
class names<font color="#E5E5E5"> classes and their apparent</font>

547
00:33:12,650 --> 00:33:20,510
<font color="#E5E5E5">across the information so we perform</font>

548
00:33:16,310 --> 00:33:23,330
some some backward slicing static

549
00:33:20,510 --> 00:33:26,480
analysis techniques on these calluses<font color="#E5E5E5"> to</font>

550
00:33:23,330 --> 00:33:31,760
<font color="#E5E5E5">identify these</font><font color="#CCCCCC"> arguments passed through</font>

551
00:33:26,480 --> 00:33:35,360
the registration functions<font color="#E5E5E5"> and then you</font>

552
00:33:31,760 --> 00:33:38,270
can see we can get<font color="#E5E5E5"> the class name and</font>

553
00:33:35,360 --> 00:33:42,139
the<font color="#CCCCCC"> class size and the</font><font color="#E5E5E5"> parent class</font>

554
00:33:38,270 --> 00:33:44,210
information from this code then we<font color="#CCCCCC"> can</font>

555
00:33:42,140 --> 00:33:50,020
create<font color="#E5E5E5"> the structures representing these</font>

556
00:33:44,210 --> 00:33:52,400
classes in<font color="#E5E5E5"> add a</font><font color="#CCCCCC"> probe you</font><font color="#E5E5E5"> can say</font><font color="#CCCCCC"> ok</font>

557
00:33:50,020 --> 00:33:58,879
you<font color="#E5E5E5"> can see that these structures</font>

558
00:33:52,400 --> 00:34:01,430
represent<font color="#E5E5E5"> sets and their names and</font><font color="#CCCCCC"> for</font>

559
00:33:58,880 --> 00:34:05,810
<font color="#E5E5E5">the second feature with</font><font color="#CCCCCC"> evil recognition</font>

560
00:34:01,430 --> 00:34:08,150
a construction<font color="#CCCCCC"> way we think</font><font color="#E5E5E5"> that it is</font>

561
00:34:05,810 --> 00:34:11,150
quite easy<font color="#E5E5E5"> to</font><font color="#CCCCCC"> implement on</font><font color="#E5E5E5"> Mac OS thing</font>

562
00:34:08,150 --> 00:34:15,170
because we<font color="#E5E5E5"> have already</font><font color="#CCCCCC"> showing that</font><font color="#E5E5E5"> our</font>

563
00:34:11,150 --> 00:34:18,470
<font color="#CCCCCC">Mac OS drivers</font><font color="#E5E5E5"> with tables have symbols</font>

564
00:34:15,170 --> 00:34:21,980
<font color="#E5E5E5">and we know there are</font><font color="#CCCCCC"> dresses so we</font>

565
00:34:18,469 --> 00:34:25,969
don't need<font color="#E5E5E5"> to find them which was to go</font>

566
00:34:21,980 --> 00:34:30,290
to<font color="#CCCCCC"> the name window and Fanfan readable</font>

567
00:34:25,969 --> 00:34:32,779
symbols so this is easy but ours is

568
00:34:30,290 --> 00:34:34,940
quite complicated<font color="#E5E5E5"> because</font><font color="#CCCCCC"> I have already</font>

569
00:34:32,780 --> 00:34:38,660
told you<font color="#CCCCCC"> that</font><font color="#E5E5E5"> there</font><font color="#CCCCCC"> is no code feature</font>

570
00:34:34,940 --> 00:34:43,150
or any symbol about the<font color="#CCCCCC"> way tables in</font>

571
00:34:38,659 --> 00:34:46,129
ours<font color="#CCCCCC"> cannot reverse so there</font><font color="#E5E5E5"> are many</font>

572
00:34:43,150 --> 00:34:49,190
there<font color="#E5E5E5"> are many steps in in order</font><font color="#CCCCCC"> to</font>

573
00:34:46,130 --> 00:34:53,390
<font color="#E5E5E5">improve in</font><font color="#CCCCCC"> implement this feature</font><font color="#E5E5E5"> the</font>

574
00:34:49,190 --> 00:34:57,280
first<font color="#E5E5E5"> one we needed to</font><font color="#CCCCCC"> or the trust the</font>

575
00:34:53,389 --> 00:35:01,040
consular section this<font color="#E5E5E5"> this section</font>

576
00:34:57,280 --> 00:35:03,320
<font color="#E5E5E5">contains other with tables so we</font><font color="#CCCCCC"> must</font>

577
00:35:01,040 --> 00:35:06,290
first<font color="#E5E5E5"> know</font>

578
00:35:03,320 --> 00:35:10,010
we<font color="#E5E5E5"> must the first</font><font color="#CCCCCC"> defroster</font><font color="#E5E5E5"> this cost</font>

579
00:35:06,290 --> 00:35:12,830
first section to make<font color="#CCCCCC"> it a little bit</font>

580
00:35:10,010 --> 00:35:14,840
like<font color="#E5E5E5"> we table then we have to further</font>

581
00:35:12,830 --> 00:35:18,170
analysis

582
00:35:14,840 --> 00:35:20,150
the in this<font color="#E5E5E5"> step we will mean it mark</font>

583
00:35:18,170 --> 00:35:25,550
the<font color="#CCCCCC"> data in this console section as</font>

584
00:35:20,150 --> 00:35:33,850
addresses for<font color="#E5E5E5"> example we make the left</font>

585
00:35:25,550 --> 00:35:38,140
picture<font color="#CCCCCC"> look like</font><font color="#E5E5E5"> on the</font><font color="#CCCCCC"> right side and</font>

586
00:35:33,850 --> 00:35:41,540
then in<font color="#CCCCCC"> the second step we</font><font color="#E5E5E5"> analyze the</font>

587
00:35:38,140 --> 00:35:44,540
formation<font color="#E5E5E5"> the</font><font color="#CCCCCC"> previous initializing</font>

588
00:35:41,540 --> 00:35:47,600
<font color="#E5E5E5">functional game to locate the address of</font>

589
00:35:44,540 --> 00:35:51,859
the class metaclass class<font color="#E5E5E5"> is mad class</font>

590
00:35:47,600 --> 00:35:55,040
object this mad class object is a hint

591
00:35:51,859 --> 00:35:58,490
for the address of the we tables which

592
00:35:55,040 --> 00:36:01,759
we which will be used in<font color="#CCCCCC"> the next</font><font color="#E5E5E5"> step</font>

593
00:35:58,490 --> 00:36:05,180
<font color="#E5E5E5">so in the next step we can get a cross</font>

594
00:36:01,760 --> 00:36:09,170
reference<font color="#E5E5E5"> of the of this meta class</font>

595
00:36:05,180 --> 00:36:15,080
object and<font color="#CCCCCC"> offender cross reference in</font>

596
00:36:09,170 --> 00:36:17,630
the<font color="#E5E5E5"> constant section and go to this</font>

597
00:36:15,080 --> 00:36:20,569
concert<font color="#E5E5E5"> go to this cross referencing in</font>

598
00:36:17,630 --> 00:36:24,680
the<font color="#CCCCCC"> constellation</font><font color="#E5E5E5"> okay we can find that</font>

599
00:36:20,570 --> 00:36:28,970
this cross reference is quite<font color="#E5E5E5"> a near the</font>

600
00:36:24,680 --> 00:36:32,410
<font color="#CCCCCC">a</font><font color="#E5E5E5"> it's quite near the railway table we</font>

601
00:36:28,970 --> 00:36:35,689
can<font color="#CCCCCC"> see</font><font color="#E5E5E5"> that the cross reference is</font>

602
00:36:32,410 --> 00:36:38,569
certainly<font color="#CCCCCC"> 2 bytes ahead of the</font><font color="#E5E5E5"> start</font><font color="#CCCCCC"> off</font>

603
00:36:35,690 --> 00:36:42,859
<font color="#CCCCCC">to be table so now we</font><font color="#E5E5E5"> would find</font><font color="#CCCCCC"> of a</font>

604
00:36:38,570 --> 00:36:46,340
<font color="#CCCCCC">tables on</font><font color="#E5E5E5"> ours then we can create the</font>

605
00:36:42,859 --> 00:36:49,580
structures in<font color="#CCCCCC"> add</font><font color="#E5E5E5"> approach who represent</font>

606
00:36:46,340 --> 00:36:52,460
<font color="#CCCCCC">with tables and our other say that I</font>

607
00:36:49,580 --> 00:36:55,240
said that these members<font color="#E5E5E5"> in these</font>

608
00:36:52,460 --> 00:36:57,920
structures are all function pointers

609
00:36:55,240 --> 00:37:04,879
<font color="#E5E5E5">they are function pointers representing</font>

610
00:36:57,920 --> 00:37:08,330
the virtual functions so father<font color="#CCCCCC"> for the</font>

611
00:37:04,880 --> 00:37:12,740
third feature recurring function names

612
00:37:08,330 --> 00:37:15,950
<font color="#E5E5E5">were meaning to it on</font><font color="#CCCCCC"> OS since Howard</font><font color="#E5E5E5"> or</font>

613
00:37:12,740 --> 00:37:18,620
as said that<font color="#CCCCCC"> Mac OS how</font><font color="#E5E5E5"> a Mac Mac Oh</font>

614
00:37:15,950 --> 00:37:21,740
<font color="#CCCCCC">Colonel showers how function names and</font>

615
00:37:18,620 --> 00:37:28,670
how meaningful<font color="#E5E5E5"> function names so this</font>

616
00:37:21,740 --> 00:37:33,200
feature<font color="#CCCCCC"> minute - is mini 1000s and</font><font color="#E5E5E5"> the</font>

617
00:37:28,670 --> 00:37:37,550
way only performs this analysis for

618
00:37:33,200 --> 00:37:40,520
virtual functions on<font color="#CCCCCC"> iOS</font><font color="#E5E5E5"> because we we</font>

619
00:37:37,550 --> 00:37:43,460
know that most<font color="#E5E5E5"> of the classes in ours</font>

620
00:37:40,520 --> 00:37:47,600
cannot<font color="#E5E5E5"> reverse in</font><font color="#CCCCCC"> heard from the inherit</font>

621
00:37:43,460 --> 00:37:54,800
from basic classes in our kids framework

622
00:37:47,600 --> 00:37:58,250
and the basic classes<font color="#E5E5E5"> are already our</font>

623
00:37:54,800 --> 00:38:05,710
surveys<font color="#CCCCCC"> also object</font><font color="#E5E5E5"> our</font><font color="#CCCCCC"> I was a</font><font color="#E5E5E5"> clan</font>

624
00:37:58,250 --> 00:38:08,720
class<font color="#E5E5E5"> exactly so</font><font color="#CCCCCC"> but we know that the</font>

625
00:38:05,710 --> 00:38:14,140
<font color="#E5E5E5">virtual functions in these basic classes</font>

626
00:38:08,720 --> 00:38:19,660
how meaningful<font color="#E5E5E5"> names so we authorized</font>

627
00:38:14,140 --> 00:38:22,970
incur in curtain<font color="#CCCCCC"> of Karachi</font><font color="#E5E5E5"> to wreak our</font>

628
00:38:19,660 --> 00:38:25,129
unknown function names for<font color="#E5E5E5"> example on</font>

629
00:38:22,970 --> 00:38:26,930
the<font color="#E5E5E5"> right side we know that on the left</font>

630
00:38:25,130 --> 00:38:30,710
side<font color="#CCCCCC"> we know that it is our</font><font color="#E5E5E5"> surface root</font>

631
00:38:26,930 --> 00:38:34,819
class<font color="#E5E5E5"> is inherited from our surface</font>

632
00:38:30,710 --> 00:38:39,110
class our service class and we know that

633
00:38:34,820 --> 00:38:42,860
it always a water function<font color="#CCCCCC"> call that our</font>

634
00:38:39,110 --> 00:38:46,580
our service<font color="#E5E5E5"> get get a</font><font color="#CCCCCC"> medic class this</font>

635
00:38:42,860 --> 00:38:48,710
<font color="#E5E5E5">water function so we know that this this</font>

636
00:38:46,580 --> 00:38:51,200
unnamed the function on the Left<font color="#CCCCCC"> set</font>

637
00:38:48,710 --> 00:38:54,470
love left hand<font color="#CCCCCC"> will be hours</font><font color="#E5E5E5"> of his</font>

638
00:38:51,200 --> 00:38:58,609
<font color="#E5E5E5">route get mad class in this way we</font>

639
00:38:54,470 --> 00:39:05,029
recall them many names for<font color="#E5E5E5"> the function</font>

640
00:38:58,610 --> 00:39:07,850
<font color="#CCCCCC">forth</font><font color="#E5E5E5"> function so thought come to the</font>

641
00:39:05,030 --> 00:39:09,140
force feature a recurring<font color="#E5E5E5"> World War</font>

642
00:39:07,850 --> 00:39:13,430
<font color="#E5E5E5">about</font><font color="#CCCCCC"> halves</font>

643
00:39:09,140 --> 00:39:18,379
this feature is quite useful<font color="#E5E5E5"> for for</font>

644
00:39:13,430 --> 00:39:20,799
<font color="#E5E5E5">analyzing in that they</font><font color="#CCCCCC"> come they compile</font>

645
00:39:18,380 --> 00:39:20,800
the code

646
00:39:21,770 --> 00:39:31,080
<font color="#E5E5E5">you know why we</font><font color="#CCCCCC"> needed to implement this</font>

647
00:39:25,680 --> 00:39:36,560
feature<font color="#CCCCCC"> we first figure out the</font><font color="#E5E5E5"> creation</font>

648
00:39:31,080 --> 00:39:41,520
of<font color="#CCCCCC"> for rebels</font><font color="#E5E5E5"> this</font><font color="#CCCCCC"> we mainly identify</font>

649
00:39:36,560 --> 00:39:43,440
<font color="#E5E5E5">for for Kenda of functions that</font><font color="#CCCCCC"> hyo's</font>

650
00:39:41,520 --> 00:39:46,050
that who create and<font color="#E5E5E5"> initialize the</font>

651
00:39:43,440 --> 00:39:49,020
rebels the first and<font color="#CCCCCC"> the second</font>

652
00:39:46,050 --> 00:39:51,630
allocation were functions and the

653
00:39:49,020 --> 00:39:56,280
<font color="#E5E5E5">surveys</font><font color="#CCCCCC"> that the surveys constructors</font>

654
00:39:51,630 --> 00:40:00,630
and the forces<font color="#E5E5E5"> cussed functions from</font>

655
00:39:56,280 --> 00:40:03,420
these functions we can know that<font color="#CCCCCC"> mmm we</font>

656
00:40:00,630 --> 00:40:06,120
can know a lot the information a lot<font color="#E5E5E5"> of</font>

657
00:40:03,420 --> 00:40:09,510
untapped information about the effect

658
00:40:06,120 --> 00:40:11,490
<font color="#CCCCCC">here were rebels for example in the in</font>

659
00:40:09,510 --> 00:40:14,970
the first<font color="#E5E5E5"> function as a medical as a</font>

660
00:40:11,490 --> 00:40:18,060
<font color="#E5E5E5">local class with name</font><font color="#CCCCCC"> we can own the</font>

661
00:40:14,970 --> 00:40:21,990
result the result of this function

662
00:40:18,060 --> 00:40:26,340
<font color="#CCCCCC">should be</font><font color="#E5E5E5"> a suitably object of our</font>

663
00:40:21,990 --> 00:40:31,319
surface<font color="#E5E5E5"> class so we can get</font><font color="#CCCCCC"> what half of</font>

664
00:40:26,340 --> 00:40:33,620
<font color="#E5E5E5">that</font><font color="#CCCCCC"> arrival our service and then we</font>

665
00:40:31,320 --> 00:40:38,220
have performed temporal back propagation

666
00:40:33,620 --> 00:40:40,470
on the on these affected were rebels and

667
00:40:38,220 --> 00:40:42,689
the soul<font color="#E5E5E5"> that types and further so the</font>

668
00:40:40,470 --> 00:40:45,629
types of all of<font color="#E5E5E5"> that we the were rebels</font>

669
00:40:42,690 --> 00:40:49,980
<font color="#E5E5E5">including</font><font color="#CCCCCC"> the local rebels and member</font>

670
00:40:45,630 --> 00:40:53,600
wearables all<font color="#E5E5E5"> four classes so now you</font>

671
00:40:49,980 --> 00:41:00,240
can see that the<font color="#E5E5E5"> this code is much more</font>

672
00:40:53,600 --> 00:41:02,940
understandable for<font color="#CCCCCC"> the phenol for the</font>

673
00:41:00,240 --> 00:41:05,729
<font color="#CCCCCC">phenol feature which is called</font><font color="#E5E5E5"> a</font><font color="#CCCCCC"> us</font>

674
00:41:02,940 --> 00:41:08,320
support<font color="#CCCCCC"> the purpose of this feature is</font>

675
00:41:05,730 --> 00:41:11,280
meaningful for

676
00:41:08,320 --> 00:41:15,250
<font color="#E5E5E5">analyzers to have a better experience</font>

677
00:41:11,280 --> 00:41:20,490
<font color="#CCCCCC">analyzing Mac OS and ours</font><font color="#E5E5E5"> cannot reverse</font>

678
00:41:15,250 --> 00:41:22,960
we for<font color="#E5E5E5"> example if as I would demonstrate</font>

679
00:41:20,490 --> 00:41:25,229
<font color="#CCCCCC">if you want to run to the</font><font color="#E5E5E5"> virtual</font>

680
00:41:22,960 --> 00:41:28,630
functions implementation you can<font color="#E5E5E5"> trust</font>

681
00:41:25,230 --> 00:41:31,660
<font color="#CCCCCC">you</font><font color="#E5E5E5"> can trust</font><font color="#CCCCCC"> double click on the</font>

682
00:41:28,630 --> 00:41:36,700
function<font color="#CCCCCC"> Potter's so how we implement</font>

683
00:41:31,660 --> 00:41:38,920
<font color="#E5E5E5">them</font><font color="#CCCCCC"> we register actions</font><font color="#E5E5E5"> too many UI</font>

684
00:41:36,700 --> 00:41:42,279
events for<font color="#CCCCCC"> example the double click</font>

685
00:41:38,920 --> 00:41:45,580
events<font color="#E5E5E5"> key events hidden events name</font>

686
00:41:42,280 --> 00:41:48,250
changing events have changing events<font color="#CCCCCC"> we</font>

687
00:41:45,580 --> 00:41:52,750
reach it<font color="#E5E5E5"> we register action to all these</font>

688
00:41:48,250 --> 00:41:55,900
events<font color="#E5E5E5"> in</font><font color="#CCCCCC"> add a pro and check</font><font color="#E5E5E5"> what what</font>

689
00:41:52,750 --> 00:41:57,490
is<font color="#E5E5E5"> going on here and if you are for</font>

690
00:41:55,900 --> 00:42:00,400
example<font color="#E5E5E5"> if we</font><font color="#CCCCCC"> are doing</font><font color="#E5E5E5"> a double click</font>

691
00:41:57,490 --> 00:42:03,609
event<font color="#E5E5E5"> yeah if you are doing</font><font color="#CCCCCC"> a</font><font color="#E5E5E5"> double</font>

692
00:42:00,400 --> 00:42:06,910
click on our function<font color="#E5E5E5"> Potter we know</font>

693
00:42:03,610 --> 00:42:09,850
that which function you are<font color="#E5E5E5"> doing double</font>

694
00:42:06,910 --> 00:42:14,470
click on and we can trust trust<font color="#E5E5E5"> the open</font>

695
00:42:09,850 --> 00:42:20,920
a new window<font color="#E5E5E5"> to show you the the code of</font>

696
00:42:14,470 --> 00:42:25,149
the virtual functions implementation so

697
00:42:20,920 --> 00:42:28,180
with all these features<font color="#E5E5E5"> Rick can assist</font>

698
00:42:25,150 --> 00:42:32,130
poster<font color="#E5E5E5"> both manual review process and a</font>

699
00:42:28,180 --> 00:42:35,200
<font color="#E5E5E5">static analysis for them for many review</font>

700
00:42:32,130 --> 00:42:37,000
that they<font color="#E5E5E5"> kept the the code now is much</font>

701
00:42:35,200 --> 00:42:41,980
<font color="#E5E5E5">more human</font><font color="#CCCCCC"> readable and understandable</font>

702
00:42:37,000 --> 00:42:46,510
<font color="#E5E5E5">and you can also interact with the</font><font color="#CCCCCC"> adapt</font>

703
00:42:41,980 --> 00:42:48,940
<font color="#CCCCCC">role in a more convenient way</font><font color="#E5E5E5"> and the</font>

704
00:42:46,510 --> 00:42:51,790
<font color="#E5E5E5">for static analysis so we know</font><font color="#CCCCCC"> that we</font>

705
00:42:48,940 --> 00:42:53,800
work types<font color="#E5E5E5"> robot house and the</font><font color="#CCCCCC"> target</font>

706
00:42:51,790 --> 00:42:57,250
<font color="#CCCCCC">software virtual function calls are</font>

707
00:42:53,800 --> 00:42:59,170
determined right now so we can further

708
00:42:57,250 --> 00:43:01,420
build a call<font color="#E5E5E5"> graph and a control flow</font>

709
00:42:59,170 --> 00:43:05,020
<font color="#E5E5E5">graph on these</font>

710
00:43:01,420 --> 00:43:08,110
<font color="#E5E5E5">robos on these functions and further</font>

711
00:43:05,020 --> 00:43:12,640
static<font color="#E5E5E5"> analysis can be easily did not</font>

712
00:43:08,110 --> 00:43:18,430
come easily done so this<font color="#E5E5E5"> is all</font><font color="#CCCCCC"> about</font>

713
00:43:12,640 --> 00:43:22,060
Luke so<font color="#E5E5E5"> in you know</font><font color="#CCCCCC"> now talk we have</font>

714
00:43:18,430 --> 00:43:25,120
explained<font color="#E5E5E5"> and I Illustrated</font><font color="#CCCCCC"> to new city</font>

715
00:43:22,060 --> 00:43:28,570
in<font color="#CCCCCC"> average hours</font><font color="#E5E5E5"> and also present how we</font>

716
00:43:25,120 --> 00:43:32,109
exploit them for<font color="#CCCCCC"> projects expression on</font>

717
00:43:28,570 --> 00:43:35,830
<font color="#CCCCCC">Mac</font><font color="#E5E5E5"> OS and finally well</font><font color="#CCCCCC"> how shall a new</font>

718
00:43:32,110 --> 00:43:38,320
tool for<font color="#E5E5E5"> assisting and for assisting the</font>

719
00:43:35,830 --> 00:43:42,910
analysis<font color="#CCCCCC"> of Mac OS and hours of</font><font color="#E5E5E5"> showers</font>

720
00:43:38,320 --> 00:43:46,930
and mostly<font color="#CCCCCC"> importantly</font><font color="#E5E5E5"> police</font><font color="#CCCCCC"> Faulk</font><font color="#E5E5E5"> and</font>

721
00:43:42,910 --> 00:43:51,250
<font color="#E5E5E5">a star rig on github this is the gesture</font>

722
00:43:46,930 --> 00:43:56,140
<font color="#E5E5E5">of our</font><font color="#CCCCCC"> rig and</font><font color="#E5E5E5"> it's</font><font color="#CCCCCC"> open its</font><font color="#E5E5E5"> open source</font>

723
00:43:51,250 --> 00:44:18,150
now please follow and<font color="#E5E5E5"> that's all thank</font>

724
00:43:56,140 --> 00:44:18,150
you any question are there<font color="#CCCCCC"> any</font><font color="#E5E5E5"> questions</font>

725
00:44:18,420 --> 00:44:25,990
<font color="#E5E5E5">no then I'd like to thank</font><font color="#CCCCCC"> Schelling Bay</font>

726
00:44:23,140 --> 00:44:27,910
and min saying very much for for<font color="#E5E5E5"> your</font>

727
00:44:25,990 --> 00:44:28,720
talk thank you okay<font color="#CCCCCC"> thank you</font><font color="#E5E5E5"> big round</font>

728
00:44:27,910 --> 00:44:32,779
of applause

729
00:44:28,720 --> 00:44:32,779
[Applause]

