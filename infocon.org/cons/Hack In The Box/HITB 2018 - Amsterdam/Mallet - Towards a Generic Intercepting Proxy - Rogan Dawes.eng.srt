1
00:00:12,590 --> 00:00:16,369
thanks everybody for coming<font color="#CCCCCC"> I hope you</font>

2
00:00:14,910 --> 00:00:18,330
can hear me<font color="#CCCCCC"> properly</font>

3
00:00:16,369 --> 00:00:21,689
<font color="#CCCCCC">okay so just</font><font color="#E5E5E5"> make</font><font color="#CCCCCC"> sure you're in the</font>

4
00:00:18,330 --> 00:00:24,000
<font color="#CCCCCC">right place</font><font color="#E5E5E5"> well that sounds but 20 this</font>

5
00:00:21,689 --> 00:00:26,189
is a presentation<font color="#CCCCCC"> on a tool I've been</font>

6
00:00:24,000 --> 00:00:29,400
working on<font color="#E5E5E5"> for</font><font color="#CCCCCC"> about a year or</font><font color="#E5E5E5"> so called</font>

7
00:00:26,189 --> 00:00:31,470
mallet<font color="#E5E5E5"> it's a an intercepting proxy</font>

8
00:00:29,400 --> 00:00:34,620
along the lines of<font color="#E5E5E5"> the burps and the</font>

9
00:00:31,470 --> 00:00:38,730
zaps<font color="#E5E5E5"> etc of the world but aimed at</font>

10
00:00:34,620 --> 00:00:41,669
protocols as<font color="#E5E5E5"> well as</font><font color="#CCCCCC"> HTTP</font><font color="#E5E5E5"> I thought well</font>

11
00:00:38,730 --> 00:00:45,120
it can do<font color="#CCCCCC"> HTTP</font><font color="#E5E5E5"> and HTTP but that's not</font>

12
00:00:41,670 --> 00:00:47,940
its focus its purpose is<font color="#CCCCCC"> to do protocols</font>

13
00:00:45,120 --> 00:00:54,300
<font color="#E5E5E5">other than that as well</font><font color="#CCCCCC"> and</font><font color="#E5E5E5"> to do it</font>

14
00:00:47,940 --> 00:00:56,250
well<font color="#E5E5E5"> okay</font><font color="#CCCCCC"> I work</font><font color="#E5E5E5"> for a company called</font>

15
00:00:54,300 --> 00:01:00,239
<font color="#CCCCCC">Saints post the obligatory</font><font color="#E5E5E5"> introductory</font>

16
00:00:56,250 --> 00:01:04,110
marketing stuff<font color="#CCCCCC"> we have offices in</font><font color="#E5E5E5"> South</font>

17
00:01:00,239 --> 00:01:07,080
Africa<font color="#E5E5E5"> we were founded</font><font color="#CCCCCC"> in Pretoria and</font>

18
00:01:04,110 --> 00:01:11,820
we have offices<font color="#CCCCCC"> in London</font><font color="#E5E5E5"> and in Cape</font>

19
00:01:07,080 --> 00:01:15,600
<font color="#CCCCCC">Town we</font><font color="#E5E5E5"> build hack train etc etc so</font><font color="#CCCCCC"> we</font>

20
00:01:11,820 --> 00:01:20,490
have any services you<font color="#E5E5E5"> might want we were</font>

21
00:01:15,600 --> 00:01:26,280
18<font color="#CCCCCC"> years old</font><font color="#E5E5E5"> now we've founded on the</font>

22
00:01:20,490 --> 00:01:27,899
14th of February in 2000 2001 sorry<font color="#CCCCCC"> so</font>

23
00:01:26,280 --> 00:01:29,220
as you can<font color="#CCCCCC"> tell our founders had no</font>

24
00:01:27,900 --> 00:01:31,610
personal life

25
00:01:29,220 --> 00:01:35,729
they were<font color="#E5E5E5"> bachelors you can you can see</font>

26
00:01:31,610 --> 00:01:37,680
<font color="#CCCCCC">ok</font><font color="#E5E5E5"> and then I'm a researcher at</font><font color="#CCCCCC"> st.</font><font color="#E5E5E5"> post</font>

27
00:01:35,729 --> 00:01:40,009
which basically means I get to<font color="#E5E5E5"> to play</font>

28
00:01:37,680 --> 00:01:42,680
with stuff<font color="#E5E5E5"> which is awesome</font>

29
00:01:40,009 --> 00:01:45,600
<font color="#CCCCCC">alright so why do we</font><font color="#E5E5E5"> care about</font>

30
00:01:42,680 --> 00:01:47,610
<font color="#E5E5E5">intercepting flows between applications</font>

31
00:01:45,600 --> 00:01:52,408
those flows between<font color="#E5E5E5"> applications</font>

32
00:01:47,610 --> 00:01:54,840
<font color="#E5E5E5">essentially make up a fundamental of</font>

33
00:01:52,409 --> 00:01:56,759
those applications<font color="#E5E5E5"> a standalone</font>

34
00:01:54,840 --> 00:01:59,460
<font color="#CCCCCC">application generally</font><font color="#E5E5E5"> not particularly</font>

35
00:01:56,759 --> 00:02:01,560
interesting<font color="#E5E5E5"> most applications are</font>

36
00:01:59,460 --> 00:02:05,820
interesting because they talk to<font color="#CCCCCC"> other</font>

37
00:02:01,560 --> 00:02:08,459
systems and a large proportion<font color="#E5E5E5"> of those</font>

38
00:02:05,820 --> 00:02:12,750
are using HTTP and HTTPS<font color="#CCCCCC"> because it's</font>

39
00:02:08,459 --> 00:02:13,800
the universal firewall by<font color="#CCCCCC"> Passport you</font>

40
00:02:12,750 --> 00:02:16,650
don't have to worry<font color="#E5E5E5"> about</font>

41
00:02:13,800 --> 00:02:18,030
getting<font color="#E5E5E5"> your IT</font><font color="#CCCCCC"> department to</font><font color="#E5E5E5"> set up</font>

42
00:02:16,650 --> 00:02:20,460
firewall rules for you because<font color="#E5E5E5"> you know</font>

43
00:02:18,030 --> 00:02:24,420
for<font color="#CCCCCC"> you 80 and 443 are already allowed</font>

44
00:02:20,460 --> 00:02:26,850
but in other cases we do see that<font color="#CCCCCC"> a</font>

45
00:02:24,420 --> 00:02:29,910
custom protocol may be in place<font color="#CCCCCC"> for</font>

46
00:02:26,850 --> 00:02:31,380
<font color="#CCCCCC">example</font><font color="#E5E5E5"> in gaming applications</font><font color="#CCCCCC"> they'll</font>

47
00:02:29,910 --> 00:02:33,900
implement<font color="#CCCCCC"> something custom</font><font color="#E5E5E5"> because they</font>

48
00:02:31,380 --> 00:02:36,540
don't want the overhead<font color="#CCCCCC"> of an HTTP</font>

49
00:02:33,900 --> 00:02:38,580
header and the rest of<font color="#E5E5E5"> the request</font>

50
00:02:36,540 --> 00:02:41,040
<font color="#CCCCCC">response protocol</font><font color="#E5E5E5"> or else they want</font>

51
00:02:38,580 --> 00:02:44,310
<font color="#E5E5E5">immediate responses and yes WebSockets</font>

52
00:02:41,040 --> 00:02:47,400
have responded<font color="#CCCCCC"> to</font><font color="#E5E5E5"> that in a way but for</font>

53
00:02:44,310 --> 00:02:49,290
<font color="#CCCCCC">legacy applications</font><font color="#E5E5E5"> we'll see the use of</font>

54
00:02:47,400 --> 00:02:54,720
custom protocols for messaging for

55
00:02:49,290 --> 00:02:56,730
example XMPP<font color="#E5E5E5"> we've seen for banking</font>

56
00:02:54,720 --> 00:02:59,580
applications mobile<font color="#E5E5E5"> banking applications</font>

57
00:02:56,730 --> 00:03:04,350
<font color="#E5E5E5">they don't use HTTP they'll use a socket</font>

58
00:02:59,580 --> 00:03:07,320
based protocol<font color="#CCCCCC"> and so while you may have</font>

59
00:03:04,350 --> 00:03:09,239
<font color="#E5E5E5">run into</font><font color="#CCCCCC"> those things without the</font>

60
00:03:07,320 --> 00:03:11,340
tooling<font color="#E5E5E5"> in the infrastructure to</font>

61
00:03:09,240 --> 00:03:13,080
<font color="#CCCCCC">actually intercept those protocols</font><font color="#E5E5E5"> and</font>

62
00:03:11,340 --> 00:03:15,600
those data flows and start tampering

63
00:03:13,080 --> 00:03:17,850
<font color="#E5E5E5">with them in reconstructing them after</font>

64
00:03:15,600 --> 00:03:21,030
you've tampered with them it<font color="#E5E5E5"> becomes</font>

65
00:03:17,850 --> 00:03:23,730
very<font color="#E5E5E5"> difficult to actually attack</font><font color="#CCCCCC"> the</font>

66
00:03:21,030 --> 00:03:25,470
communications and instead we either go

67
00:03:23,730 --> 00:03:27,840
well it's good you<font color="#E5E5E5"> know I couldn't do</font>

68
00:03:25,470 --> 00:03:32,700
anything<font color="#E5E5E5"> to</font><font color="#CCCCCC"> it it's let's say SSL you</font>

69
00:03:27,840 --> 00:03:36,120
know what are you<font color="#E5E5E5"> going to do or you</font>

70
00:03:32,700 --> 00:03:39,959
<font color="#E5E5E5">know you end up spending days or weeks</font>

71
00:03:36,120 --> 00:03:49,350
<font color="#E5E5E5">writing</font><font color="#CCCCCC"> a custom proxy trying to</font><font color="#E5E5E5"> get in</font>

72
00:03:39,959 --> 00:03:52,500
between<font color="#E5E5E5"> these these data flows and yeah</font>

73
00:03:49,350 --> 00:03:54,079
<font color="#E5E5E5">often intercepting these non HTTP</font>

74
00:03:52,500 --> 00:03:56,580
protocols is very interesting because

75
00:03:54,080 --> 00:03:57,720
<font color="#CCCCCC">you run into applications that may not</font>

76
00:03:56,580 --> 00:04:01,500
have been<font color="#CCCCCC"> properly</font><font color="#E5E5E5"> audited</font>

77
00:03:57,720 --> 00:04:04,260
<font color="#CCCCCC">I think perhaps it's a sort of legacy</font>

78
00:04:01,500 --> 00:04:07,080
kind of thing more<font color="#CCCCCC"> of the older</font>

79
00:04:04,260 --> 00:04:08,700
<font color="#CCCCCC">applications are using</font><font color="#E5E5E5"> non HTTP or</font>

80
00:04:07,080 --> 00:04:10,860
WebSockets protocols because<font color="#E5E5E5"> WebSockets</font>

81
00:04:08,700 --> 00:04:14,579
face it is actually quite quite easy<font color="#CCCCCC"> to</font>

82
00:04:10,860 --> 00:04:15,720
<font color="#CCCCCC">use but it's more</font><font color="#E5E5E5"> recent so if it was</font>

83
00:04:14,580 --> 00:04:17,070
<font color="#E5E5E5">available at</font><font color="#CCCCCC"> the</font><font color="#E5E5E5"> time that the</font>

84
00:04:15,720 --> 00:04:18,930
<font color="#CCCCCC">application</font><font color="#E5E5E5"> was being developed then</font>

85
00:04:17,070 --> 00:04:21,988
maybe<font color="#CCCCCC"> people would have chosen</font><font color="#E5E5E5"> to</font><font color="#CCCCCC"> use</font>

86
00:04:18,930 --> 00:04:25,940
that so yeah<font color="#E5E5E5"> so what I'm going</font><font color="#CCCCCC"> to be</font>

87
00:04:21,988 --> 00:04:25,940
<font color="#CCCCCC">presenting is hopefully a tool</font>

88
00:04:27,240 --> 00:04:35,930
that we've<font color="#E5E5E5"> been missing for probably the</font>

89
00:04:32,490 --> 00:04:40,110
last 18 years<font color="#CCCCCC"> and</font><font color="#E5E5E5"> easy-to-use</font>

90
00:04:35,930 --> 00:04:45,800
intercepting proxy<font color="#CCCCCC"> analogous</font><font color="#E5E5E5"> to the web</font>

91
00:04:40,110 --> 00:04:48,740
scarabs the<font color="#E5E5E5"> the burp and the</font><font color="#CCCCCC"> zap proxies</font>

92
00:04:45,800 --> 00:04:52,650
so this is just<font color="#E5E5E5"> a quick sort of taste of</font>

93
00:04:48,740 --> 00:04:56,160
what it looks like you have a this is<font color="#CCCCCC"> a</font>

94
00:04:52,650 --> 00:04:59,280
reasonably complicated graph that is got

95
00:04:56,160 --> 00:05:03,030
a TCP section on this side<font color="#E5E5E5"> it's</font>

96
00:04:59,280 --> 00:05:05,729
<font color="#E5E5E5">listening on</font><font color="#CCCCCC"> port 1080 the standard Sox</font>

97
00:05:03,030 --> 00:05:09,030
port processing<font color="#E5E5E5"> Sox and then there's a</font>

98
00:05:05,729 --> 00:05:12,210
pipeline<font color="#E5E5E5"> that differentiates based on</font>

99
00:05:09,030 --> 00:05:15,469
the port port 443<font color="#E5E5E5"> it puts an HTTP</font>

100
00:05:12,210 --> 00:05:18,120
pipeline<font color="#E5E5E5"> together for port 80 it puts a</font>

101
00:05:15,470 --> 00:05:20,039
HTTP pipeline together<font color="#E5E5E5"> anything</font><font color="#CCCCCC"> else</font>

102
00:05:18,120 --> 00:05:25,039
just gets relayed and then on the<font color="#E5E5E5"> right</font>

103
00:05:20,039 --> 00:05:29,460
<font color="#E5E5E5">hand</font><font color="#CCCCCC"> side there is a udp-based</font><font color="#E5E5E5"> pipeline</font>

104
00:05:25,039 --> 00:05:38,340
which allows you<font color="#CCCCCC"> to in this case specify</font>

105
00:05:29,460 --> 00:05:40,289
where it's going to<font color="#E5E5E5"> what okay just pause</font>

106
00:05:38,340 --> 00:05:40,770
that<font color="#E5E5E5"> for</font><font color="#CCCCCC"> a sec</font><font color="#E5E5E5"> okay so specify where</font>

107
00:05:40,289 --> 00:05:43,259
it's going to

108
00:05:40,770 --> 00:05:46,889
<font color="#E5E5E5">so demonstration I'm using a command</font>

109
00:05:43,259 --> 00:05:50,370
<font color="#E5E5E5">line tool called</font><font color="#CCCCCC"> W</font><font color="#E5E5E5"> is cat talking to</font>

110
00:05:46,889 --> 00:05:52,050
echo<font color="#E5E5E5"> WebSocket org echo WebSocket dog</font>

111
00:05:50,370 --> 00:05:57,900
simply replays back what you send it

112
00:05:52,050 --> 00:06:03,750
very simple<font color="#E5E5E5"> when we connect directly to</font>

113
00:05:57,900 --> 00:06:06,198
it you'll<font color="#CCCCCC"> see you</font><font color="#E5E5E5"> can type in I think I</font>

114
00:06:03,750 --> 00:06:06,199
paused it

115
00:06:07,150 --> 00:06:10,349
[Music]

116
00:06:21,580 --> 00:06:27,969
<font color="#E5E5E5">okay so you type in</font><font color="#CCCCCC"> something and you</font>

117
00:06:24,940 --> 00:06:29,740
<font color="#E5E5E5">send it off and it comes back exactly</font><font color="#CCCCCC"> as</font>

118
00:06:27,970 --> 00:06:31,660
<font color="#E5E5E5">it was typed</font><font color="#CCCCCC"> not particularly</font>

119
00:06:29,740 --> 00:06:34,810
interesting this<font color="#E5E5E5"> is an example of a</font>

120
00:06:31,660 --> 00:06:37,570
<font color="#CCCCCC">direct connection to</font><font color="#E5E5E5"> WebSockets org</font><font color="#CCCCCC"> if</font>

121
00:06:34,810 --> 00:06:40,180
we now intercept<font color="#E5E5E5"> that using proxy chains</font>

122
00:06:37,570 --> 00:06:43,510
<font color="#E5E5E5">or T Sox or whatever you prefer to</font><font color="#CCCCCC"> use</font>

123
00:06:40,180 --> 00:06:45,750
and we connect<font color="#CCCCCC"> again</font><font color="#E5E5E5"> it now intercepts</font><font color="#CCCCCC"> a</font>

124
00:06:43,510 --> 00:06:49,630
connection<font color="#CCCCCC"> that's redirecting it via</font>

125
00:06:45,750 --> 00:06:52,000
mallet and we send the same text and we

126
00:06:49,630 --> 00:06:54,219
get back<font color="#CCCCCC"> a</font><font color="#E5E5E5"> different response now it's</font>

127
00:06:52,000 --> 00:06:57,190
been tampered<font color="#CCCCCC"> with</font><font color="#E5E5E5"> altered the text is</font>

128
00:06:54,220 --> 00:07:00,340
<font color="#CCCCCC">in uppercase</font><font color="#E5E5E5"> not particularly exciting</font>

129
00:06:57,190 --> 00:07:04,990
but it demonstrates<font color="#E5E5E5"> that you can make</font>

130
00:07:00,340 --> 00:07:07,900
these<font color="#E5E5E5"> changes fairly easily so that's an</font>

131
00:07:04,990 --> 00:07:12,850
example<font color="#E5E5E5"> of that side of the graph and</font>

132
00:07:07,900 --> 00:07:15,070
now a demonstration<font color="#E5E5E5"> of the UDP intercept</font>

133
00:07:12,850 --> 00:07:17,710
<font color="#E5E5E5">I'm going to do a host lookup for</font>

134
00:07:15,070 --> 00:07:20,700
google.com<font color="#E5E5E5"> pointing to my listener on</font>

135
00:07:17,710 --> 00:07:23,859
port<font color="#CCCCCC"> 1 over 5</font><font color="#E5E5E5"> 3 on my local host and</font>

136
00:07:20,700 --> 00:07:32,050
when I do<font color="#E5E5E5"> that I'm going to get results</font>

137
00:07:23,860 --> 00:07:34,660
that are<font color="#E5E5E5"> unexpected to that so instead</font>

138
00:07:32,050 --> 00:07:36,550
of getting results for<font color="#E5E5E5"> google.com as the</font>

139
00:07:34,660 --> 00:07:39,490
<font color="#E5E5E5">question section says I got results for</font>

140
00:07:36,550 --> 00:07:41,710
<font color="#CCCCCC">sense post calm because I had a temper</font>

141
00:07:39,490 --> 00:07:44,440
script in the pipeline<font color="#E5E5E5"> that modified the</font>

142
00:07:41,710 --> 00:07:48,630
<font color="#E5E5E5">DNS</font><font color="#CCCCCC"> requests changed it from</font><font color="#E5E5E5"> google.com</font>

143
00:07:44,440 --> 00:07:51,280
<font color="#E5E5E5">to</font><font color="#CCCCCC"> WWII inspires calm and then</font>

144
00:07:48,630 --> 00:07:52,780
reconstructed<font color="#E5E5E5"> the response so that would</font>

145
00:07:51,280 --> 00:07:55,510
wouldn't<font color="#E5E5E5"> trigger an error in the</font>

146
00:07:52,780 --> 00:07:59,530
resolver that the responses<font color="#E5E5E5"> for the</font>

147
00:07:55,510 --> 00:08:02,680
wrong question<font color="#CCCCCC"> okay so this is an</font>

148
00:07:59,530 --> 00:08:05,739
example it's a complicated pipeline<font color="#CCCCCC"> we</font>

149
00:08:02,680 --> 00:08:08,080
will talk a bit more about<font color="#E5E5E5"> some of the</font>

150
00:08:05,740 --> 00:08:13,590
<font color="#E5E5E5">ways</font><font color="#CCCCCC"> in which</font><font color="#E5E5E5"> you would build up a your</font>

151
00:08:08,080 --> 00:08:13,590
pipeline and and do that

152
00:08:18,810 --> 00:08:27,419
<font color="#E5E5E5">okay so why is it that we've got an</font>

153
00:08:24,600 --> 00:08:30,639
intercepting proxy for HTTP and HTTPS

154
00:08:27,419 --> 00:08:35,228
<font color="#E5E5E5">but you know there's a bunch of them</font>

155
00:08:30,639 --> 00:08:37,690
Charles<font color="#E5E5E5"> web scarab burp</font><font color="#CCCCCC"> zap</font><font color="#E5E5E5"> name them</font>

156
00:08:35,229 --> 00:08:40,300
everybody's written<font color="#E5E5E5"> incepting HTTP proxy</font>

157
00:08:37,690 --> 00:08:43,060
<font color="#E5E5E5">beta cap is another example</font><font color="#CCCCCC"> there's lots</font>

158
00:08:40,299 --> 00:08:46,180
of them<font color="#E5E5E5"> but why don't</font><font color="#CCCCCC"> we</font><font color="#E5E5E5"> have</font>

159
00:08:43,059 --> 00:08:50,680
intercepting proxies for other protocols

160
00:08:46,180 --> 00:08:53,079
<font color="#CCCCCC">I think one of the reasons is that HTTP</font>

161
00:08:50,680 --> 00:08:54,939
is a relatively straightforward<font color="#E5E5E5"> and</font>

162
00:08:53,080 --> 00:08:57,760
simple protocol<font color="#E5E5E5"> to deal</font><font color="#CCCCCC"> with</font>

163
00:08:54,940 --> 00:08:59,320
<font color="#E5E5E5">it's stateless which means that no</font>

164
00:08:57,760 --> 00:09:01,330
<font color="#CCCCCC">matter where you are in the TCP</font>

165
00:08:59,320 --> 00:09:03,960
connection<font color="#E5E5E5"> you can play a request and</font>

166
00:09:01,330 --> 00:09:03,960
<font color="#E5E5E5">get a response back</font>

167
00:09:04,080 --> 00:09:08,740
<font color="#CCCCCC">it's</font><font color="#E5E5E5"> request response based so the</font>

168
00:09:07,330 --> 00:09:10,020
person who talks in the person who

169
00:09:08,740 --> 00:09:12,730
responds<font color="#E5E5E5"> is well-defined</font>

170
00:09:10,020 --> 00:09:14,140
so it's an easy say I'll send you

171
00:09:12,730 --> 00:09:17,710
something<font color="#E5E5E5"> you send me something back and</font>

172
00:09:14,140 --> 00:09:21,189
<font color="#E5E5E5">then we're done</font><font color="#CCCCCC"> kind of thing yes</font><font color="#E5E5E5"> there</font>

173
00:09:17,710 --> 00:09:23,700
<font color="#CCCCCC">are issues with HTTP for example the</font>

174
00:09:21,190 --> 00:09:26,470
<font color="#E5E5E5">slow loris attacks from years ago</font>

175
00:09:23,700 --> 00:09:29,380
<font color="#CCCCCC">triggered things like</font><font color="#E5E5E5"> request timeouts</font>

176
00:09:26,470 --> 00:09:31,120
<font color="#E5E5E5">so when</font><font color="#CCCCCC"> use connect to the HTTP server</font>

177
00:09:29,380 --> 00:09:33,360
<font color="#E5E5E5">and you take too long to actually</font>

178
00:09:31,120 --> 00:09:36,670
<font color="#CCCCCC">interact with it</font><font color="#E5E5E5"> it'll disconnect you</font>

179
00:09:33,360 --> 00:09:38,140
but you don't<font color="#E5E5E5"> see that that</font><font color="#CCCCCC"> doesn't</font>

180
00:09:36,670 --> 00:09:40,410
become an<font color="#E5E5E5"> issue when you're tampering</font>

181
00:09:38,140 --> 00:09:42,970
with a<font color="#CCCCCC"> bill a request in birth because</font>

182
00:09:40,410 --> 00:09:44,770
<font color="#E5E5E5">birth abstracts</font><font color="#CCCCCC"> that from you you've</font>

183
00:09:42,970 --> 00:09:47,830
established a TCP connection<font color="#CCCCCC"> from</font><font color="#E5E5E5"> the</font>

184
00:09:44,770 --> 00:09:49,390
client to<font color="#CCCCCC"> Berg you've intercepted at</font>

185
00:09:47,830 --> 00:09:50,830
<font color="#E5E5E5">your hanging on to that request and your</font>

186
00:09:49,390 --> 00:09:54,670
<font color="#CCCCCC">browsers just</font><font color="#E5E5E5"> waiting for you</font><font color="#CCCCCC"> your</font>

187
00:09:50,830 --> 00:09:57,339
<font color="#CCCCCC">browser's not going to timeout</font><font color="#E5E5E5"> once burp</font>

188
00:09:54,670 --> 00:10:00,130
is<font color="#E5E5E5"> no once you've told burp to send that</font>

189
00:09:57,339 --> 00:10:02,740
<font color="#E5E5E5">request</font><font color="#CCCCCC"> work will open a new socket</font><font color="#E5E5E5"> to</font>

190
00:10:00,130 --> 00:10:04,720
<font color="#E5E5E5">the server send that request</font><font color="#CCCCCC"> get the</font>

191
00:10:02,740 --> 00:10:06,880
answer back<font color="#E5E5E5"> and discard the socket in</font>

192
00:10:04,720 --> 00:10:08,709
most most cases<font color="#E5E5E5"> so you don't actually</font>

193
00:10:06,880 --> 00:10:11,740
<font color="#E5E5E5">have to</font><font color="#CCCCCC"> worry about whether the server's</font>

194
00:10:08,709 --> 00:10:13,689
<font color="#E5E5E5">going to timeout</font><font color="#CCCCCC"> disconnect you lose</font>

195
00:10:11,740 --> 00:10:15,250
your state<font color="#E5E5E5"> and then you have to try and</font>

196
00:10:13,690 --> 00:10:18,790
reconstruct that<font color="#E5E5E5"> state again for your</font>

197
00:10:15,250 --> 00:10:23,190
next request so HTTP is that much

198
00:10:18,790 --> 00:10:23,189
simpler than a lot of<font color="#E5E5E5"> other protocols</font>

199
00:10:23,550 --> 00:10:27,880
<font color="#CCCCCC">and I'm excluding things</font><font color="#E5E5E5"> like interim</font>

200
00:10:26,200 --> 00:10:32,339
authentication and so on which are a

201
00:10:27,880 --> 00:10:32,339
detail but not<font color="#E5E5E5"> over not insurmountable</font>

202
00:10:33,440 --> 00:10:37,529
<font color="#E5E5E5">okay so when you run into other</font>

203
00:10:35,279 --> 00:10:38,399
protocols you've got details such as<font color="#E5E5E5"> who</font>

204
00:10:37,529 --> 00:10:40,320
talks<font color="#CCCCCC"> first</font>

205
00:10:38,399 --> 00:10:44,070
or is there a defined who talks first

206
00:10:40,320 --> 00:10:45,420
<font color="#CCCCCC">for example</font><font color="#E5E5E5"> if you</font><font color="#CCCCCC"> establish an</font><font color="#E5E5E5"> SSH</font>

207
00:10:44,070 --> 00:10:47,970
connection or you<font color="#E5E5E5"> man-in-the-middle an</font>

208
00:10:45,420 --> 00:10:52,160
SSH connection<font color="#E5E5E5"> both sides immediately</font>

209
00:10:47,970 --> 00:10:54,890
send their<font color="#E5E5E5"> handshake</font><font color="#CCCCCC"> so you can't</font>

210
00:10:52,160 --> 00:10:58,230
intercept a connection<font color="#CCCCCC"> from one side and</font>

211
00:10:54,890 --> 00:11:00,569
then<font color="#E5E5E5"> you know tamper with</font><font color="#CCCCCC"> that and try</font>

212
00:10:58,230 --> 00:11:02,370
and<font color="#E5E5E5"> send it on to the other side because</font>

213
00:11:00,570 --> 00:11:06,390
both sides are<font color="#E5E5E5"> trying to talk at the</font>

214
00:11:02,370 --> 00:11:09,779
same time it's<font color="#E5E5E5"> not as simple you've got</font>

215
00:11:06,390 --> 00:11:11,519
things like<font color="#E5E5E5"> I mentioned</font><font color="#CCCCCC"> timeouts</font>

216
00:11:09,779 --> 00:11:13,800
connection timeouts if the message

217
00:11:11,519 --> 00:11:15,300
doesn't<font color="#E5E5E5"> get responded to fast enough</font><font color="#CCCCCC"> the</font>

218
00:11:13,800 --> 00:11:17,040
connection is torn down<font color="#E5E5E5"> and you have to</font>

219
00:11:15,300 --> 00:11:18,949
try<font color="#CCCCCC"> and re-establish</font><font color="#E5E5E5"> the state of that</font>

220
00:11:17,040 --> 00:11:21,480
connection

221
00:11:18,950 --> 00:11:23,910
the delimiting of the messages<font color="#E5E5E5"> and</font><font color="#CCCCCC"> the</font>

222
00:11:21,480 --> 00:11:25,680
frames is a unique<font color="#CCCCCC"> problem for every</font>

223
00:11:23,910 --> 00:11:28,260
<font color="#E5E5E5">single protocol that you're going to</font>

224
00:11:25,680 --> 00:11:30,209
encounter<font color="#CCCCCC"> you have to figure out where a</font>

225
00:11:28,260 --> 00:11:33,089
message<font color="#CCCCCC"> starts and where a message ends</font>

226
00:11:30,209 --> 00:11:35,489
<font color="#E5E5E5">HTTP is relatively simple because</font><font color="#CCCCCC"> you've</font>

227
00:11:33,089 --> 00:11:37,860
got<font color="#E5E5E5"> your header header line your status</font>

228
00:11:35,490 --> 00:11:39,300
or<font color="#E5E5E5"> a request line you read until you get</font>

229
00:11:37,860 --> 00:11:41,970
a blank line<font color="#E5E5E5"> that's your header</font>

230
00:11:39,300 --> 00:11:44,219
<font color="#E5E5E5">depending on your transfer encoding and</font>

231
00:11:41,970 --> 00:11:46,769
your method<font color="#E5E5E5"> you might have a body but</font>

232
00:11:44,220 --> 00:11:48,360
<font color="#CCCCCC">your body length is specified so you</font>

233
00:11:46,769 --> 00:11:52,079
know these are<font color="#CCCCCC"> the things that you</font><font color="#E5E5E5"> would</font>

234
00:11:48,360 --> 00:11:54,750
need to be concerned about when creating

235
00:11:52,079 --> 00:11:58,800
a proxy for arbitrary<font color="#E5E5E5"> for other</font>

236
00:11:54,750 --> 00:12:02,370
protocols<font color="#E5E5E5"> and so what</font><font color="#CCCCCC"> we'll</font><font color="#E5E5E5"> find is that</font>

237
00:11:58,800 --> 00:12:05,849
<font color="#E5E5E5">most</font><font color="#CCCCCC"> people when they are trying to</font>

238
00:12:02,370 --> 00:12:09,230
intercept a an arbitrary protocol and

239
00:12:05,850 --> 00:12:11,550
<font color="#E5E5E5">know an HTTP protocol it'll be a one-off</font>

240
00:12:09,230 --> 00:12:13,829
<font color="#E5E5E5">they might use something like so cat</font>

241
00:12:11,550 --> 00:12:15,510
with<font color="#CCCCCC"> the dash X option</font><font color="#E5E5E5"> dumping hex</font>

242
00:12:13,829 --> 00:12:18,989
<font color="#E5E5E5">characters so you can see what's going</font>

243
00:12:15,510 --> 00:12:21,839
<font color="#CCCCCC">on but</font><font color="#E5E5E5"> so cat while extremely powerful</font>

244
00:12:18,990 --> 00:12:22,560
<font color="#E5E5E5">is still limited it does SSL</font><font color="#CCCCCC"> for you and</font>

245
00:12:21,839 --> 00:12:25,709
that's<font color="#E5E5E5"> fantastic</font>

246
00:12:22,560 --> 00:12:28,050
does TCP and UDP<font color="#CCCCCC"> wonderful but that's</font>

247
00:12:25,709 --> 00:12:31,800
about where you start<font color="#CCCCCC"> running</font><font color="#E5E5E5"> into its</font>

248
00:12:28,050 --> 00:12:36,420
limitations do we want<font color="#E5E5E5"> to be able to go</font>

249
00:12:31,800 --> 00:12:38,579
further<font color="#E5E5E5"> than that here's an example of</font>

250
00:12:36,420 --> 00:12:41,370
<font color="#E5E5E5">another protocol that has</font><font color="#CCCCCC"> known</font>

251
00:12:38,579 --> 00:12:44,040
vulnerabilities this is<font color="#CCCCCC"> 10 30</font><font color="#E5E5E5"> to 70</font>

252
00:12:41,370 --> 00:12:46,680
protocol for<font color="#E5E5E5"> accessing mainframes</font>

253
00:12:44,040 --> 00:12:49,860
my colleague<font color="#E5E5E5"> Dominic did a</font><font color="#CCCCCC"> presentation</font>

254
00:12:46,680 --> 00:12:54,599
using<font color="#E5E5E5"> a tool called burp the IRP that he</font>

255
00:12:49,860 --> 00:12:59,310
wrote<font color="#CCCCCC"> where he wrapped the tea and 3270</font>

256
00:12:54,600 --> 00:13:02,430
client<font color="#CCCCCC"> modifying some of the messages</font>

257
00:12:59,310 --> 00:13:04,560
coming in to reveal hidden fields and

258
00:13:02,430 --> 00:13:07,290
read-only fields make<font color="#E5E5E5"> those read-only</font>

259
00:13:04,560 --> 00:13:10,199
fields writable<font color="#E5E5E5"> now this is something</font>

260
00:13:07,290 --> 00:13:13,649
<font color="#CCCCCC">we've seen</font><font color="#E5E5E5"> in the HTTP world from the</font>

261
00:13:10,200 --> 00:13:15,420
late 90s right shopping carts<font color="#CCCCCC"> with</font>

262
00:13:13,649 --> 00:13:21,029
hidden fields containing<font color="#E5E5E5"> the price of</font>

263
00:13:15,420 --> 00:13:25,019
the<font color="#E5E5E5"> item but we got</font><font color="#CCCCCC"> to three or four</font>

264
00:13:21,029 --> 00:13:27,120
<font color="#CCCCCC">years ago before</font><font color="#E5E5E5"> somebody realized that</font>

265
00:13:25,019 --> 00:13:29,760
you could do<font color="#CCCCCC"> exactly the same</font><font color="#E5E5E5"> thing with</font>

266
00:13:27,120 --> 00:13:32,790
<font color="#E5E5E5">tea and 3270 and almost 40 year old</font>

267
00:13:29,760 --> 00:13:38,040
protocol it's a bit ridiculous don't<font color="#E5E5E5"> you</font>

268
00:13:32,790 --> 00:13:40,140
<font color="#E5E5E5">think</font><font color="#CCCCCC"> ok so there's probably work I'm</font>

269
00:13:38,040 --> 00:13:44,099
not pretending<font color="#E5E5E5"> that this</font><font color="#CCCCCC"> is a unique</font>

270
00:13:40,140 --> 00:13:46,290
tool but most<font color="#E5E5E5"> of the prior work to my</font>

271
00:13:44,100 --> 00:13:48,570
mind<font color="#E5E5E5"> is either too difficult to use</font>

272
00:13:46,290 --> 00:13:50,430
<font color="#E5E5E5">you've got to set up</font><font color="#CCCCCC"> a virtual machine</font>

273
00:13:48,570 --> 00:13:52,860
you've got to set up<font color="#CCCCCC"> IP tables rules</font>

274
00:13:50,430 --> 00:13:55,560
you've got<font color="#CCCCCC"> to</font><font color="#E5E5E5"> set up routing on your on</font>

275
00:13:52,860 --> 00:13:56,670
<font color="#E5E5E5">your host box to get the traffic into</font>

276
00:13:55,560 --> 00:13:59,760
<font color="#CCCCCC">the</font><font color="#E5E5E5"> right into the virtual machine and</font>

277
00:13:56,670 --> 00:14:02,699
<font color="#CCCCCC">back down again and it ends up becoming</font>

278
00:13:59,760 --> 00:14:04,680
quite a mess most of these<font color="#E5E5E5"> tools are not</font>

279
00:14:02,700 --> 00:14:07,740
maintained<font color="#E5E5E5"> and I'll exclude things like</font>

280
00:14:04,680 --> 00:14:11,760
beta cap which<font color="#CCCCCC"> is very actively</font>

281
00:14:07,740 --> 00:14:15,450
maintained<font color="#CCCCCC"> eyewash proxy as the author</font><font color="#E5E5E5"> I</font>

282
00:14:11,760 --> 00:14:19,020
can abuse it<font color="#E5E5E5"> I wrote that in 2008 and</font>

283
00:14:15,450 --> 00:14:21,180
abandoned it because<font color="#E5E5E5"> it didn't fit my</font>

284
00:14:19,020 --> 00:14:24,029
vision<font color="#E5E5E5"> of where a proxy should actually</font>

285
00:14:21,180 --> 00:14:25,739
be<font color="#CCCCCC"> health care</font><font color="#E5E5E5"> proxy was based on top of</font>

286
00:14:24,029 --> 00:14:28,410
OAuth proxy actually made a user

287
00:14:25,740 --> 00:14:30,029
interface<font color="#CCCCCC"> for it but again was abandoned</font>

288
00:14:28,410 --> 00:14:33,449
<font color="#CCCCCC">eight years</font><font color="#E5E5E5"> ago</font>

289
00:14:30,029 --> 00:14:38,670
intrepid<font color="#CCCCCC"> escapes Malory</font><font color="#E5E5E5"> an early</font>

290
00:14:33,449 --> 00:14:43,430
implementation<font color="#E5E5E5"> 2010 again abandoned in</font>

291
00:14:38,670 --> 00:14:45,779
2012<font color="#CCCCCC"> I guess because of lack of</font><font color="#E5E5E5"> use or</font>

292
00:14:43,430 --> 00:14:48,089
not ultimately I guess lack of<font color="#E5E5E5"> interest</font>

293
00:14:45,779 --> 00:14:50,339
<font color="#E5E5E5">in it and I'm guessing that's because it</font>

294
00:14:48,089 --> 00:14:52,320
is too<font color="#E5E5E5"> difficult to use</font><font color="#CCCCCC"> very</font><font color="#E5E5E5"> difficult</font>

295
00:14:50,339 --> 00:14:55,260
<font color="#E5E5E5">to get set up and</font><font color="#CCCCCC"> working and about a</font>

296
00:14:52,320 --> 00:14:56,990
whole<font color="#CCCCCC"> bunch of others that</font><font color="#E5E5E5"> that have</font>

297
00:14:55,260 --> 00:15:01,550
attempted<font color="#E5E5E5"> to solve the problem</font>

298
00:14:56,990 --> 00:15:03,110
but I<font color="#E5E5E5"> think fallen by the wayside</font><font color="#CCCCCC"> and as</font>

299
00:15:01,550 --> 00:15:05,870
I said<font color="#CCCCCC"> I'm excluding</font><font color="#E5E5E5"> better</font><font color="#CCCCCC"> cat</font><font color="#E5E5E5"> because</font>

300
00:15:03,110 --> 00:15:09,589
<font color="#E5E5E5">its focus is</font><font color="#CCCCCC"> very</font><font color="#E5E5E5"> specifically on on a</font>

301
00:15:05,870 --> 00:15:11,420
CD and<font color="#CCCCCC"> I sort</font><font color="#E5E5E5"> of transport layer issues</font>

302
00:15:09,589 --> 00:15:13,490
networking level<font color="#E5E5E5"> issues and I</font><font color="#CCCCCC"> don't</font>

303
00:15:11,420 --> 00:15:17,839
<font color="#E5E5E5">think it's actually</font><font color="#CCCCCC"> really aiming</font><font color="#E5E5E5"> for</font>

304
00:15:13,490 --> 00:15:20,810
arbitrary<font color="#CCCCCC"> TCP interception</font><font color="#E5E5E5"> too much and</font>

305
00:15:17,839 --> 00:15:24,350
that<font color="#CCCCCC"> is</font><font color="#E5E5E5"> very actively maintained so what</font>

306
00:15:20,810 --> 00:15:27,050
I was trying<font color="#CCCCCC"> to achieve</font><font color="#E5E5E5"> was</font><font color="#CCCCCC"> to make it</font>

307
00:15:24,350 --> 00:15:30,020
easy<font color="#E5E5E5"> to use</font><font color="#CCCCCC"> you're not going</font><font color="#E5E5E5"> to get</font>

308
00:15:27,050 --> 00:15:32,089
adoption<font color="#E5E5E5"> and interest in in an</font>

309
00:15:30,020 --> 00:15:39,410
<font color="#CCCCCC">application if people can't figure</font><font color="#E5E5E5"> out</font>

310
00:15:32,089 --> 00:15:43,399
how to use<font color="#E5E5E5"> it so I didn't want to</font>

311
00:15:39,410 --> 00:15:45,860
require<font color="#E5E5E5"> routing updates and</font><font color="#CCCCCC"> iptables</font>

312
00:15:43,399 --> 00:15:49,190
rules<font color="#CCCCCC"> yes you can use</font><font color="#E5E5E5"> those</font><font color="#CCCCCC"> things if</font>

313
00:15:45,860 --> 00:15:53,510
you need to if<font color="#E5E5E5"> you have no other option</font>

314
00:15:49,190 --> 00:15:58,370
<font color="#CCCCCC">but the first option is</font><font color="#E5E5E5"> to make it as</font>

315
00:15:53,510 --> 00:16:01,310
easy<font color="#CCCCCC"> as</font><font color="#E5E5E5"> possible</font><font color="#CCCCCC"> and then finally I</font>

316
00:15:58,370 --> 00:16:06,020
didn't want to reinvent<font color="#CCCCCC"> the wheel there</font>

317
00:16:01,310 --> 00:16:09,619
are a<font color="#CCCCCC"> number of proxies out there that</font>

318
00:16:06,020 --> 00:16:11,990
support HTTP and HTTPS<font color="#E5E5E5"> even is other</font>

319
00:16:09,620 --> 00:16:14,930
<font color="#E5E5E5">intercepting TCP proxies their first</font>

320
00:16:11,990 --> 00:16:17,209
pass is to<font color="#E5E5E5"> build an HTTP and HTTPS</font>

321
00:16:14,930 --> 00:16:19,969
implementation<font color="#E5E5E5"> and then the next</font>

322
00:16:17,209 --> 00:16:23,599
instance is<font color="#E5E5E5"> to add maybe one or two</font>

323
00:16:19,970 --> 00:16:27,890
<font color="#E5E5E5">other protocols and then it kind</font><font color="#CCCCCC"> of dies</font>

324
00:16:23,600 --> 00:16:30,140
<font color="#E5E5E5">out right which is really disappointing</font>

325
00:16:27,890 --> 00:16:32,959
<font color="#CCCCCC">and I wanted</font><font color="#E5E5E5"> to avoid</font><font color="#CCCCCC"> that</font><font color="#E5E5E5"> problem by</font>

326
00:16:30,140 --> 00:16:35,779
<font color="#CCCCCC">having access to a large</font><font color="#E5E5E5"> body of</font>

327
00:16:32,959 --> 00:16:38,660
existing protocol decoders<font color="#E5E5E5"> nobody wants</font>

328
00:16:35,779 --> 00:16:39,980
to write their own gzip decoder nobody

329
00:16:38,660 --> 00:16:42,709
wants to<font color="#E5E5E5"> write their own SSL</font>

330
00:16:39,980 --> 00:16:44,980
implementations nobody wants<font color="#CCCCCC"> to do</font><font color="#E5E5E5"> the</font>

331
00:16:42,709 --> 00:16:48,290
HTTP stuff<font color="#E5E5E5"> for fine</font>

332
00:16:44,980 --> 00:16:50,779
so let's make use of an<font color="#E5E5E5"> existing library</font>

333
00:16:48,290 --> 00:16:55,040
<font color="#E5E5E5">that</font><font color="#CCCCCC"> actually has a whole lot of</font>

334
00:16:50,779 --> 00:16:59,120
protocol decoders already built in as

335
00:16:55,040 --> 00:17:01,459
<font color="#CCCCCC">well as documentation</font><font color="#E5E5E5"> no you have to</font>

336
00:16:59,120 --> 00:17:05,660
learn a<font color="#E5E5E5"> new</font><font color="#CCCCCC"> programming paradigm</font><font color="#E5E5E5"> in</font>

337
00:17:01,459 --> 00:17:10,399
order<font color="#E5E5E5"> to actually</font><font color="#CCCCCC"> make use of of the the</font>

338
00:17:05,660 --> 00:17:13,550
proxy so as I was<font color="#E5E5E5"> saying</font><font color="#CCCCCC"> I was trying to</font>

339
00:17:10,400 --> 00:17:14,870
<font color="#CCCCCC">write ojas proxy 10 years ago and I</font>

340
00:17:13,550 --> 00:17:17,359
abandoned it<font color="#CCCCCC"> because the programming</font>

341
00:17:14,869 --> 00:17:19,010
<font color="#CCCCCC">model was a disaster</font><font color="#E5E5E5"> there were objects</font>

342
00:17:17,359 --> 00:17:22,668
wrapping an object wrapping an object

343
00:17:19,010 --> 00:17:27,439
and it was impossible<font color="#E5E5E5"> to make</font><font color="#CCCCCC"> it dynamic</font>

344
00:17:22,669 --> 00:17:29,270
enough to intercept<font color="#E5E5E5"> you know the variety</font>

345
00:17:27,439 --> 00:17:32,540
of<font color="#E5E5E5"> things that I wanted to be able</font><font color="#CCCCCC"> to do</font>

346
00:17:29,270 --> 00:17:37,179
and then I ran<font color="#CCCCCC"> into the native project</font>

347
00:17:32,540 --> 00:17:38,330
so<font color="#CCCCCC"> natey</font><font color="#E5E5E5"> is a mature framework</font>

348
00:17:37,179 --> 00:17:41,120
<font color="#E5E5E5">trustingly</font>

349
00:17:38,330 --> 00:17:45,860
has<font color="#E5E5E5"> been working on it since</font><font color="#CCCCCC"> about on</font><font color="#E5E5E5"> it</font>

350
00:17:41,120 --> 00:17:48,610
end<font color="#CCCCCC"> variants of</font><font color="#E5E5E5"> it since about 2002 so</font>

351
00:17:45,860 --> 00:17:51,709
he's been<font color="#E5E5E5"> building this over a long time</font>

352
00:17:48,610 --> 00:17:54,590
it's<font color="#CCCCCC"> not</font><font color="#E5E5E5"> something that I just</font><font color="#CCCCCC"> came up</font>

353
00:17:51,710 --> 00:17:55,550
<font color="#CCCCCC">with in sort of 10</font><font color="#E5E5E5"> minutes kind of thing</font>

354
00:17:54,590 --> 00:17:57,918
it's like<font color="#E5E5E5"> you</font><font color="#CCCCCC"> know</font><font color="#E5E5E5"> they</font><font color="#CCCCCC"> don't</font><font color="#E5E5E5"> work no</font>

355
00:17:55,550 --> 00:18:05,570
problem<font color="#CCCCCC"> it's asynchronous</font><font color="#E5E5E5"> which is nice</font>

356
00:17:57,919 --> 00:18:07,400
and its high performance designed with

357
00:18:05,570 --> 00:18:09,020
the experiences learned from an

358
00:18:07,400 --> 00:18:12,620
<font color="#E5E5E5">extensive amount of protocol</font>

359
00:18:09,020 --> 00:18:15,830
implementation so<font color="#CCCCCC"> nettie supports a</font>

360
00:18:12,620 --> 00:18:18,168
variety of different<font color="#E5E5E5"> transports</font><font color="#CCCCCC"> TCP UDP</font>

361
00:18:15,830 --> 00:18:20,210
obviously<font color="#E5E5E5"> but it can also run over a</font>

362
00:18:18,169 --> 00:18:21,260
serial<font color="#E5E5E5"> connection</font><font color="#CCCCCC"> which makes things</font>

363
00:18:20,210 --> 00:18:23,270
<font color="#CCCCCC">interesting if you're trying to</font>

364
00:18:21,260 --> 00:18:25,640
intercept communications<font color="#E5E5E5"> between an IOT</font>

365
00:18:23,270 --> 00:18:30,500
device for<font color="#CCCCCC"> example you could probably</font>

366
00:18:25,640 --> 00:18:32,840
build a Bluetooth transport so these are

367
00:18:30,500 --> 00:18:35,900
not things<font color="#CCCCCC"> that exist at the moment</font><font color="#E5E5E5"> but</font>

368
00:18:32,840 --> 00:18:38,780
<font color="#E5E5E5">the architecture exists for you to build</font>

369
00:18:35,900 --> 00:18:41,059
these transports<font color="#E5E5E5"> and then make use of</font>

370
00:18:38,780 --> 00:18:43,129
the surrounding framework and<font color="#E5E5E5"> its</font>

371
00:18:41,059 --> 00:18:47,059
protocol handlers<font color="#E5E5E5"> and its architecture</font>

372
00:18:43,130 --> 00:18:53,030
<font color="#E5E5E5">to actually intercept</font><font color="#CCCCCC"> that traffic and</font>

373
00:18:47,059 --> 00:18:55,760
temper with it<font color="#CCCCCC"> at your wall</font><font color="#E5E5E5"> just to give</font>

374
00:18:53,030 --> 00:18:59,660
an<font color="#CCCCCC"> idea of</font><font color="#E5E5E5"> the sort of adoption that</font>

375
00:18:55,760 --> 00:19:02,200
<font color="#E5E5E5">Nettie's got apple uses</font><font color="#CCCCCC"> nettie in</font>

376
00:18:59,660 --> 00:19:07,390
approximately<font color="#E5E5E5"> 400,000 instances</font>

377
00:19:02,200 --> 00:19:12,919
processing 10 petabytes of data<font color="#E5E5E5"> a day as</font>

378
00:19:07,390 --> 00:19:15,380
of<font color="#E5E5E5"> 2016</font><font color="#CCCCCC"> so</font><font color="#E5E5E5"> that's that's old old news so</font>

379
00:19:12,919 --> 00:19:17,300
that's an interesting<font color="#CCCCCC"> thing it does lead</font>

380
00:19:15,380 --> 00:19:19,310
to some trade-offs<font color="#CCCCCC"> so some of the</font>

381
00:19:17,300 --> 00:19:23,030
objects in<font color="#E5E5E5"> their protocol decoders are</font>

382
00:19:19,310 --> 00:19:26,240
very focused on<font color="#E5E5E5"> zero copy and</font>

383
00:19:23,030 --> 00:19:29,149
and that sort of thing it's not<font color="#E5E5E5"> the end</font>

384
00:19:26,240 --> 00:19:31,400
of the world<font color="#CCCCCC"> and if</font><font color="#E5E5E5"> you don't want to</font>

385
00:19:29,150 --> 00:19:33,140
implement<font color="#E5E5E5"> your decoders in that fashion</font>

386
00:19:31,400 --> 00:19:35,059
<font color="#CCCCCC">by all means</font><font color="#E5E5E5"> you know we're not dealing</font>

387
00:19:33,140 --> 00:19:37,130
<font color="#E5E5E5">with those</font><font color="#CCCCCC"> kinds of volumes</font><font color="#E5E5E5"> so you don't</font>

388
00:19:35,059 --> 00:19:40,490
have<font color="#E5E5E5"> to go to those kinds of extents in</font>

389
00:19:37,130 --> 00:19:44,809
order to actually implement your own

390
00:19:40,490 --> 00:19:46,550
decoders so I<font color="#E5E5E5"> mentioned the sort of</font>

391
00:19:44,809 --> 00:19:48,170
transport services on the right<font color="#CCCCCC"> you got</font>

392
00:19:46,550 --> 00:19:51,830
sockets and data<font color="#E5E5E5"> grams and whatever</font>

393
00:19:48,170 --> 00:19:55,550
other transport<font color="#E5E5E5"> it can do</font><font color="#CCCCCC"> SCTP if you</font>

394
00:19:51,830 --> 00:19:58,419
ever<font color="#CCCCCC"> run into</font><font color="#E5E5E5"> that at the bottom you've</font>

395
00:19:55,550 --> 00:20:01,520
<font color="#CCCCCC">got their extensible event model</font>

396
00:19:58,420 --> 00:20:04,400
<font color="#CCCCCC">connection and established</font><font color="#E5E5E5"> etc etc and</font>

397
00:20:01,520 --> 00:20:08,210
<font color="#E5E5E5">then</font><font color="#CCCCCC"> your protocol support HTTP</font>

398
00:20:04,400 --> 00:20:11,650
<font color="#E5E5E5">WebSockets SSL zfg's Ibiza blah blah</font>

399
00:20:08,210 --> 00:20:11,650
blah<font color="#E5E5E5"> all the compression algorithms</font>

400
00:20:11,800 --> 00:20:19,480
<font color="#CCCCCC">photographs</font><font color="#E5E5E5"> and a ton of other protocols</font>

401
00:20:16,100 --> 00:20:24,590
<font color="#E5E5E5">that that</font><font color="#CCCCCC"> exist already</font>

402
00:20:19,480 --> 00:20:26,300
<font color="#CCCCCC">MQTT</font><font color="#E5E5E5"> smtp there's just tons and</font><font color="#CCCCCC"> tons of</font>

403
00:20:24,590 --> 00:20:28,428
<font color="#CCCCCC">tons of protocols</font><font color="#E5E5E5"> so this was great</font><font color="#CCCCCC"> for</font>

404
00:20:26,300 --> 00:20:30,440
me it's like wow<font color="#E5E5E5"> you know if I ever need</font>

405
00:20:28,429 --> 00:20:36,350
<font color="#CCCCCC">to test any</font><font color="#E5E5E5"> of these things I</font><font color="#CCCCCC"> can just</font>

406
00:20:30,440 --> 00:20:39,290
drop those blocks into my pipelines<font color="#CCCCCC"> okay</font>

407
00:20:36,350 --> 00:20:41,780
<font color="#E5E5E5">talking</font><font color="#CCCCCC"> about pipelines so the way</font>

408
00:20:39,290 --> 00:20:44,030
<font color="#CCCCCC">nettie is architected is this concept of</font>

409
00:20:41,780 --> 00:20:46,280
a pipeline<font color="#E5E5E5"> data comes in from the</font>

410
00:20:44,030 --> 00:20:48,350
network<font color="#CCCCCC"> it's the first inbound handler</font>

411
00:20:46,280 --> 00:20:51,800
gets<font color="#CCCCCC"> a chance to</font><font color="#E5E5E5"> process it and it</font><font color="#CCCCCC"> just</font>

412
00:20:48,350 --> 00:20:55,070
passes<font color="#CCCCCC"> it up the</font><font color="#E5E5E5"> pipeline</font><font color="#CCCCCC"> as you go</font><font color="#E5E5E5"> the</font>

413
00:20:51,800 --> 00:20:58,040
handlers may be what's designated as an

414
00:20:55,070 --> 00:21:00,260
inbound and an outbound<font color="#E5E5E5"> handler so it</font>

415
00:20:58,040 --> 00:21:02,420
may process<font color="#E5E5E5"> only read events or incoming</font>

416
00:21:00,260 --> 00:21:06,379
<font color="#CCCCCC">events</font><font color="#E5E5E5"> or it may process the art bound</font>

417
00:21:02,420 --> 00:21:10,660
events or<font color="#E5E5E5"> above so an example of an</font>

418
00:21:06,380 --> 00:21:13,580
inbound outbound handler might be an<font color="#E5E5E5"> SSL</font>

419
00:21:10,660 --> 00:21:16,429
encoder or decoder<font color="#CCCCCC"> so you've got</font><font color="#E5E5E5"> SSL</font>

420
00:21:13,580 --> 00:21:17,809
<font color="#E5E5E5">bytes coming in</font><font color="#CCCCCC"> its handshaking</font><font color="#E5E5E5"> passing</font>

421
00:21:16,429 --> 00:21:19,330
certificates backwards and<font color="#E5E5E5"> forwards so</font>

422
00:21:17,809 --> 00:21:21,860
it's doing its own thing

423
00:21:19,330 --> 00:21:23,780
<font color="#E5E5E5">short-circuiting</font><font color="#CCCCCC"> the connection</font><font color="#E5E5E5"> and then</font>

424
00:21:21,860 --> 00:21:27,139
passing clear text and receiving clear

425
00:21:23,780 --> 00:21:31,010
text and doing the encryption<font color="#E5E5E5"> there and</font>

426
00:21:27,140 --> 00:21:34,580
then ultimately<font color="#CCCCCC"> that</font><font color="#E5E5E5"> it's the top</font><font color="#CCCCCC"> of the</font>

427
00:21:31,010 --> 00:21:36,379
pipeline and<font color="#E5E5E5"> that handler is supposed to</font>

428
00:21:34,580 --> 00:21:39,799
do<font color="#E5E5E5"> something with the object</font>

429
00:21:36,380 --> 00:21:42,919
<font color="#CCCCCC">whether respond to it or save it</font><font color="#E5E5E5"> or save</font>

430
00:21:39,799 --> 00:21:45,470
the file or whatever so this is great

431
00:21:42,919 --> 00:21:48,679
this<font color="#CCCCCC"> is it lends itself to the</font>

432
00:21:45,470 --> 00:21:52,190
<font color="#E5E5E5">composability</font><font color="#CCCCCC"> of a proxy</font><font color="#E5E5E5"> that I've been</font>

433
00:21:48,679 --> 00:21:55,250
<font color="#E5E5E5">looking for for</font><font color="#CCCCCC"> 10 years so how do we do</font>

434
00:21:52,190 --> 00:21:58,220
this<font color="#CCCCCC"> very very</font><font color="#E5E5E5"> simply we take our</font>

435
00:21:55,250 --> 00:22:01,399
pipeline and we put a single<font color="#E5E5E5"> hand like</font>

436
00:21:58,220 --> 00:22:02,779
<font color="#CCCCCC">that just bridges</font><font color="#E5E5E5"> two pipelines</font><font color="#CCCCCC"> we've</font>

437
00:22:01,399 --> 00:22:04,610
got the upstream pipeline and the

438
00:22:02,779 --> 00:22:06,590
downstream pipeline<font color="#E5E5E5"> and they can be</font>

439
00:22:04,610 --> 00:22:11,090
<font color="#E5E5E5">different or they almost in most cases</font>

440
00:22:06,590 --> 00:22:13,519
will be<font color="#E5E5E5"> different you can have an HTTP</font>

441
00:22:11,090 --> 00:22:16,789
pipeline on this side with an<font color="#E5E5E5"> SSL on</font>

442
00:22:13,519 --> 00:22:19,490
this side<font color="#E5E5E5"> that</font><font color="#CCCCCC"> takes HTTP in and emits</font>

443
00:22:16,789 --> 00:22:22,970
<font color="#CCCCCC">HTTP so it's very flexible</font><font color="#E5E5E5"> you</font><font color="#CCCCCC"> can</font>

444
00:22:19,490 --> 00:22:24,919
compose your pipelines as you like<font color="#E5E5E5"> and</font>

445
00:22:22,970 --> 00:22:26,840
then of<font color="#CCCCCC"> course your relay handler which</font>

446
00:22:24,919 --> 00:22:28,190
is responsible for<font color="#E5E5E5"> copying the messages</font>

447
00:22:26,840 --> 00:22:30,080
across<font color="#E5E5E5"> from one pipeline to the other</font>

448
00:22:28,190 --> 00:22:32,539
<font color="#E5E5E5">also</font><font color="#CCCCCC"> puts that up in the user interface</font>

449
00:22:30,080 --> 00:22:34,010
<font color="#CCCCCC">so</font><font color="#E5E5E5"> that you can view those messages and</font>

450
00:22:32,539 --> 00:22:35,629
you can intercept them<font color="#E5E5E5"> so hang them</font>

451
00:22:34,010 --> 00:22:37,820
second don't pass this<font color="#E5E5E5"> one just yet</font><font color="#CCCCCC"> I</font>

452
00:22:35,630 --> 00:22:40,700
want to do<font color="#E5E5E5"> something to it and then I'll</font>

453
00:22:37,820 --> 00:22:42,289
pass it on when I'm ready yes if you

454
00:22:40,700 --> 00:22:44,840
intercept a message<font color="#E5E5E5"> you run the risk of</font>

455
00:22:42,289 --> 00:22:47,360
falling foul of<font color="#CCCCCC"> tie rafts and that sort</font>

456
00:22:44,840 --> 00:22:49,490
of thing you need<font color="#E5E5E5"> to make</font><font color="#CCCCCC"> those choices</font>

457
00:22:47,360 --> 00:22:51,350
based on the protocol<font color="#CCCCCC"> that you're</font>

458
00:22:49,490 --> 00:22:55,750
<font color="#E5E5E5">intercepting so if the server doesn't</font>

459
00:22:51,350 --> 00:22:55,750
implement time arts or good<font color="#E5E5E5"> carry on</font>

460
00:22:55,929 --> 00:23:02,870
<font color="#E5E5E5">okay so I've been banging on and banging</font>

461
00:23:00,080 --> 00:23:07,220
on<font color="#CCCCCC"> about how vm's and IP tables etc are</font>

462
00:23:02,870 --> 00:23:11,479
bad<font color="#CCCCCC"> the alternative</font><font color="#E5E5E5"> is the</font><font color="#CCCCCC"> Sox</font><font color="#E5E5E5"> protocol</font>

463
00:23:07,220 --> 00:23:14,960
Sox proxies<font color="#E5E5E5"> are amazing in that you can</font>

464
00:23:11,480 --> 00:23:19,490
simply<font color="#E5E5E5"> wrap your ball leaving inside the</font>

465
00:23:14,960 --> 00:23:21,559
wrapping you you layer a very small Sox

466
00:23:19,490 --> 00:23:25,460
negotiation which says hey please can I

467
00:23:21,559 --> 00:23:27,950
talk to this host on this port<font color="#E5E5E5"> and</font><font color="#CCCCCC"> the</font>

468
00:23:25,460 --> 00:23:30,919
Sox server says sure and then it knows

469
00:23:27,950 --> 00:23:33,049
where their traffic needs<font color="#E5E5E5"> to go to so</font>

470
00:23:30,919 --> 00:23:36,289
instead of<font color="#E5E5E5"> trying to use routing and IP</font>

471
00:23:33,049 --> 00:23:39,110
tables to intercept<font color="#E5E5E5"> that</font><font color="#CCCCCC"> traffic you can</font>

472
00:23:36,289 --> 00:23:40,519
<font color="#E5E5E5">simply</font><font color="#CCCCCC"> use your socks proxy</font><font color="#E5E5E5"> to do that</font>

473
00:23:39,110 --> 00:23:46,879
for you<font color="#E5E5E5"> that makes it really</font>

474
00:23:40,519 --> 00:23:49,129
approachable it's far simpler<font color="#E5E5E5"> to</font>

475
00:23:46,879 --> 00:23:49,969
configure<font color="#E5E5E5"> a</font><font color="#CCCCCC"> T Sox or a proxy</font><font color="#E5E5E5"> chains</font>

476
00:23:49,129 --> 00:23:52,310
instance and

477
00:23:49,970 --> 00:23:54,740
wrap your application<font color="#E5E5E5"> or on</font><font color="#CCCCCC"> windows</font>

478
00:23:52,310 --> 00:23:57,679
there's a tool<font color="#CCCCCC"> called proxy cap which</font>

479
00:23:54,740 --> 00:23:59,480
works beautifully<font color="#CCCCCC"> for</font><font color="#E5E5E5"> intercepting the</font>

480
00:23:57,680 --> 00:24:06,560
communications from a single process or

481
00:23:59,480 --> 00:24:09,530
from<font color="#E5E5E5"> the entire machine</font><font color="#CCCCCC"> alright</font><font color="#E5E5E5"> so this</font>

482
00:24:06,560 --> 00:24:10,310
<font color="#CCCCCC">is an example of a sort of</font><font color="#E5E5E5"> handler</font>

483
00:24:09,530 --> 00:24:14,360
skeleton

484
00:24:10,310 --> 00:24:16,970
you've got channel active which like

485
00:24:14,360 --> 00:24:21,219
this name suggests is called when the

486
00:24:16,970 --> 00:24:24,470
connection is<font color="#E5E5E5"> established</font><font color="#CCCCCC"> and there's a</font>

487
00:24:21,220 --> 00:24:28,610
<font color="#E5E5E5">corresponding channel inactive channel</font>

488
00:24:24,470 --> 00:24:30,680
read<font color="#CCCCCC"> passes in the message that</font><font color="#E5E5E5"> has been</font>

489
00:24:28,610 --> 00:24:33,020
<font color="#E5E5E5">read and it could be an array</font><font color="#CCCCCC"> of bytes</font>

490
00:24:30,680 --> 00:24:36,380
<font color="#E5E5E5">or it could be something</font><font color="#CCCCCC"> that has been</font>

491
00:24:33,020 --> 00:24:40,700
pre paused<font color="#CCCCCC"> into a</font><font color="#E5E5E5"> Java</font><font color="#CCCCCC"> object that you</font>

492
00:24:36,380 --> 00:24:43,970
can<font color="#E5E5E5"> then manipulate right in the</font>

493
00:24:40,700 --> 00:24:48,830
outbound handler sense<font color="#CCCCCC"> again the message</font>

494
00:24:43,970 --> 00:24:52,370
to send to<font color="#CCCCCC"> the network</font><font color="#E5E5E5"> or downstream</font><font color="#CCCCCC"> and</font>

495
00:24:48,830 --> 00:24:54,590
then user event triggered is for

496
00:24:52,370 --> 00:24:56,570
notifications such as hey I've managed

497
00:24:54,590 --> 00:25:01,340
<font color="#CCCCCC">to handshake</font><font color="#E5E5E5"> an</font><font color="#CCCCCC"> SSL connection with this</font>

498
00:24:56,570 --> 00:25:03,290
<font color="#E5E5E5">host using these parameters</font><font color="#CCCCCC"> as an</font>

499
00:25:01,340 --> 00:25:08,889
<font color="#E5E5E5">illustration of the kind of thing that</font>

500
00:25:03,290 --> 00:25:12,770
that<font color="#E5E5E5"> might happen in a user event and</font>

501
00:25:08,890 --> 00:25:15,710
just to give an example<font color="#CCCCCC"> sort</font><font color="#E5E5E5"> of concrete</font>

502
00:25:12,770 --> 00:25:18,650
example my<font color="#CCCCCC"> WebSockets translation</font><font color="#E5E5E5"> of</font>

503
00:25:15,710 --> 00:25:21,320
lowercase<font color="#E5E5E5"> to uppercase</font><font color="#CCCCCC"> that's the handle</font>

504
00:25:18,650 --> 00:25:23,570
<font color="#E5E5E5">of a desert that's the custom code that</font>

505
00:25:21,320 --> 00:25:28,760
I had to write to translate a WebSocket

506
00:25:23,570 --> 00:25:31,790
<font color="#E5E5E5">packets into uppercase and I implemented</font>

507
00:25:28,760 --> 00:25:32,600
this as a groovy script<font color="#E5E5E5"> looks like Java</font>

508
00:25:31,790 --> 00:25:35,300
but<font color="#E5E5E5"> it's groovy</font>

509
00:25:32,600 --> 00:25:39,649
<font color="#E5E5E5">so it's dynamic</font><font color="#CCCCCC"> you don't have to go to</font>

510
00:25:35,300 --> 00:25:43,990
a compile and reload cycle you can

511
00:25:39,650 --> 00:25:43,990
iterate on<font color="#E5E5E5"> that as quickly as you like</font>

512
00:25:47,380 --> 00:25:58,220
<font color="#E5E5E5">okay so going faster than I</font><font color="#CCCCCC"> thought okay</font>

513
00:25:55,840 --> 00:26:00,850
more time for demonstrations<font color="#E5E5E5"> that's</font>

514
00:25:58,220 --> 00:26:00,850
<font color="#CCCCCC">taller slowly</font>

515
00:26:00,999 --> 00:26:06,969
<font color="#E5E5E5">okay so I chickened out</font><font color="#CCCCCC"> on doing live</font>

516
00:26:03,939 --> 00:26:08,469
demos<font color="#CCCCCC"> they weren't allowed the Carolyn</font>

517
00:26:06,969 --> 00:26:10,539
<font color="#E5E5E5">wouldn't allow me to bring</font><font color="#CCCCCC"> my sacrifices</font>

518
00:26:08,469 --> 00:26:13,989
<font color="#CCCCCC">onto the plane</font><font color="#E5E5E5"> something something about</font>

519
00:26:10,539 --> 00:26:15,419
<font color="#E5E5E5">chickens on</font><font color="#CCCCCC"> the wings I don't know</font><font color="#E5E5E5"> okay</font>

520
00:26:13,989 --> 00:26:17,079
<font color="#E5E5E5">so this</font><font color="#CCCCCC"> example we've got a client</font>

521
00:26:15,419 --> 00:26:20,019
<font color="#E5E5E5">application and a server application</font>

522
00:26:17,079 --> 00:26:23,499
<font color="#CCCCCC">it's speaking using</font><font color="#E5E5E5"> JSON messages on</font>

523
00:26:20,019 --> 00:26:25,449
port nine nine nine nine<font color="#CCCCCC"> in order to</font>

524
00:26:23,499 --> 00:26:29,069
intercept it<font color="#E5E5E5"> I set up a very simple</font>

525
00:26:25,449 --> 00:26:31,539
<font color="#E5E5E5">channel</font><font color="#CCCCCC"> or a simple pipeline i</font>

526
00:26:29,069 --> 00:26:33,759
reconfigured my client to talk to nine

527
00:26:31,539 --> 00:26:36,429
nine nine eight so it's going<font color="#E5E5E5"> to connect</font>

528
00:26:33,759 --> 00:26:41,889
<font color="#E5E5E5">into my soccer channel on nine nine nine</font>

529
00:26:36,429 --> 00:26:46,109
eight which I will<font color="#E5E5E5"> then specify</font><font color="#CCCCCC"> the</font>

530
00:26:41,889 --> 00:26:46,109
upstream localhost<font color="#E5E5E5"> nine nine nine nine</font>

531
00:26:46,349 --> 00:26:50,859
<font color="#CCCCCC">and then it's just</font><font color="#E5E5E5"> going to go through</font>

532
00:26:48,579 --> 00:26:55,149
<font color="#CCCCCC">my intercept</font><font color="#E5E5E5"> handler so that I can see</font>

533
00:26:50,859 --> 00:26:59,289
what the traffic<font color="#E5E5E5"> looks like and then the</font>

534
00:26:55,149 --> 00:27:03,248
<font color="#CCCCCC">sink is just the</font><font color="#E5E5E5"> output okay so I sent</font>

535
00:26:59,289 --> 00:27:06,579
<font color="#CCCCCC">Rogue</font><font color="#E5E5E5"> indoors</font><font color="#CCCCCC"> and 1972</font><font color="#E5E5E5"> and it received</font>

536
00:27:03,249 --> 00:27:09,489
the<font color="#CCCCCC"> data and said it was fine if we now</font>

537
00:27:06,579 --> 00:27:11,829
go<font color="#CCCCCC"> and look at the connection details so</font>

538
00:27:09,489 --> 00:27:13,299
you'll see<font color="#E5E5E5"> on this side we've now</font><font color="#CCCCCC"> got a</font>

539
00:27:11,829 --> 00:27:14,739
list of<font color="#E5E5E5"> all the connections that have</font>

540
00:27:13,299 --> 00:27:17,199
<font color="#E5E5E5">been made the TCP source and</font>

541
00:27:14,739 --> 00:27:19,179
destinations<font color="#E5E5E5"> and over here we have a</font>

542
00:27:17,199 --> 00:27:22,539
bunch of messages<font color="#E5E5E5"> which have been seen</font>

543
00:27:19,179 --> 00:27:26,009
<font color="#E5E5E5">in various directions</font><font color="#CCCCCC"> so we've got a</font>

544
00:27:22,539 --> 00:27:30,069
bunch of byte<font color="#CCCCCC"> buffers which is</font><font color="#E5E5E5"> Nettie's</font>

545
00:27:26,009 --> 00:27:33,009
<font color="#E5E5E5">wrapper around a byte array for</font>

546
00:27:30,069 --> 00:27:37,299
performance<font color="#CCCCCC"> reasons and this</font><font color="#E5E5E5"> is quite a</font>

547
00:27:33,009 --> 00:27:40,479
mission<font color="#CCCCCC"> because what it leads to is that</font>

548
00:27:37,299 --> 00:27:43,389
you know we sent a JSON message<font color="#CCCCCC"> but it</font>

549
00:27:40,479 --> 00:27:45,759
<font color="#E5E5E5">came to in like</font><font color="#CCCCCC"> fifteen pieces</font><font color="#E5E5E5"> well</font>

550
00:27:43,389 --> 00:27:50,408
that's not particularly<font color="#CCCCCC"> useful and not</font>

551
00:27:45,759 --> 00:27:52,899
easy to use so what do we<font color="#E5E5E5"> want to do we</font>

552
00:27:50,409 --> 00:27:54,669
actually<font color="#CCCCCC"> want to reconstruct that</font><font color="#E5E5E5"> JSON</font>

553
00:27:52,899 --> 00:27:56,859
message<font color="#E5E5E5"> into a single</font><font color="#CCCCCC"> message or</font><font color="#E5E5E5"> that</font>

554
00:27:54,669 --> 00:28:00,419
series of<font color="#E5E5E5"> byte buffs into a single</font>

555
00:27:56,859 --> 00:28:03,249
message<font color="#CCCCCC"> and we can do that by looking</font>

556
00:28:00,419 --> 00:28:06,009
<font color="#CCCCCC">for the starting brace counting the</font>

557
00:28:03,249 --> 00:28:07,509
number of braces that<font color="#E5E5E5"> that we see in</font>

558
00:28:06,009 --> 00:28:09,279
between<font color="#E5E5E5"> and then when we see closing</font>

559
00:28:07,509 --> 00:28:11,589
braces we just decrement the count until

560
00:28:09,279 --> 00:28:13,509
<font color="#CCCCCC">we get</font><font color="#E5E5E5"> back</font><font color="#CCCCCC"> down to zero dealing</font><font color="#E5E5E5"> with</font>

561
00:28:11,589 --> 00:28:16,629
quote characters and that<font color="#E5E5E5"> sort of thing</font>

562
00:28:13,509 --> 00:28:19,460
as well<font color="#CCCCCC"> so</font><font color="#E5E5E5"> strings with embedded</font>

563
00:28:16,630 --> 00:28:21,680
so let's do that

564
00:28:19,460 --> 00:28:24,500
what we've done<font color="#E5E5E5"> here now is we've</font>

565
00:28:21,680 --> 00:28:26,750
dropped in a<font color="#E5E5E5"> JSON object decoder so</font>

566
00:28:24,500 --> 00:28:28,820
that's going<font color="#E5E5E5"> to do that message framing</font>

567
00:28:26,750 --> 00:28:30,740
<font color="#E5E5E5">it's going to count the</font><font color="#CCCCCC"> number of braces</font>

568
00:28:28,820 --> 00:28:32,720
<font color="#E5E5E5">opening braces count the number of</font>

569
00:28:30,740 --> 00:28:34,340
closing braces and when the concert<font color="#E5E5E5"> zero</font>

570
00:28:32,720 --> 00:28:51,460
is going<font color="#CCCCCC"> to</font><font color="#E5E5E5"> say this is a message pass</font>

571
00:28:34,340 --> 00:28:53,209
it on okay<font color="#E5E5E5"> so if we send that off again</font>

572
00:28:51,460 --> 00:28:55,970
all right<font color="#E5E5E5"> if we go back</font><font color="#CCCCCC"> to our</font>

573
00:28:53,210 --> 00:28:59,540
connections<font color="#CCCCCC"> and choose the next</font>

574
00:28:55,970 --> 00:29:01,250
<font color="#E5E5E5">connection we now see</font><font color="#CCCCCC"> that instead of</font>

575
00:28:59,540 --> 00:29:03,110
those<font color="#CCCCCC"> ten messages</font><font color="#E5E5E5"> that we had</font>

576
00:29:01,250 --> 00:29:05,200
previously<font color="#CCCCCC"> we've got one outbound and</font>

577
00:29:03,110 --> 00:29:08,899
<font color="#E5E5E5">one inbound</font>

578
00:29:05,200 --> 00:29:13,970
so our<font color="#E5E5E5"> outbound message you can see has</font>

579
00:29:08,900 --> 00:29:15,860
the complete<font color="#CCCCCC"> jason stands in it and to</font>

580
00:29:13,970 --> 00:29:20,060
do that<font color="#E5E5E5"> I didn't have to do any coding</font>

581
00:29:15,860 --> 00:29:22,340
I just<font color="#E5E5E5"> dropped an existing decoder so</font>

582
00:29:20,060 --> 00:29:23,750
<font color="#CCCCCC">this is the the sort of</font><font color="#E5E5E5"> the promise of</font>

583
00:29:22,340 --> 00:29:25,790
the native framework is<font color="#CCCCCC"> that there are</font>

584
00:29:23,750 --> 00:29:27,860
so<font color="#CCCCCC"> many things</font><font color="#E5E5E5"> available for you to</font><font color="#CCCCCC"> use</font>

585
00:29:25,790 --> 00:29:30,290
that<font color="#E5E5E5"> in most cases you're not</font><font color="#CCCCCC"> actually</font>

586
00:29:27,860 --> 00:29:34,270
going to<font color="#E5E5E5"> have to do any coding to build</font>

587
00:29:30,290 --> 00:29:34,270
up even<font color="#E5E5E5"> reasonably complex pipelines</font>

588
00:29:41,940 --> 00:29:52,120
all right so this next demonstration<font color="#E5E5E5"> is</font>

589
00:29:48,000 --> 00:29:54,760
going to convert those bytes into<font color="#CCCCCC"> a</font>

590
00:29:52,120 --> 00:29:56,620
string<font color="#CCCCCC"> I mean you can edit a byte array</font>

591
00:29:54,760 --> 00:29:59,170
<font color="#CCCCCC">you</font><font color="#E5E5E5"> can go and click on the individual</font>

592
00:29:56,620 --> 00:30:00,879
<font color="#E5E5E5">byte elements in the editor but it's a</font>

593
00:29:59,170 --> 00:30:02,500
bit<font color="#E5E5E5"> of a painful way of doing things and</font>

594
00:30:00,880 --> 00:30:04,510
if<font color="#CCCCCC"> you</font><font color="#E5E5E5"> want to delete a character then</font>

595
00:30:02,500 --> 00:30:07,770
it gets<font color="#E5E5E5"> complicated</font><font color="#CCCCCC"> so what you're going</font>

596
00:30:04,510 --> 00:30:10,600
<font color="#CCCCCC">to do instead</font><font color="#E5E5E5"> is we're going</font><font color="#CCCCCC"> to take a</font>

597
00:30:07,770 --> 00:30:14,460
string decoder<font color="#E5E5E5"> so we're going</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> convert</font>

598
00:30:10,600 --> 00:30:22,600
<font color="#CCCCCC">that array of</font><font color="#E5E5E5"> bytes into</font><font color="#CCCCCC"> a utf-8 string</font>

599
00:30:14,460 --> 00:30:24,549
let's make a little<font color="#E5E5E5"> bit bigger</font><font color="#CCCCCC"> and we're</font>

600
00:30:22,600 --> 00:30:27,719
going to<font color="#E5E5E5"> make use of a string encoder as</font>

601
00:30:24,549 --> 00:30:31,260
well because we need<font color="#CCCCCC"> to</font><font color="#E5E5E5"> win our</font>

602
00:30:27,720 --> 00:30:34,000
intercepting relay intercepting<font color="#E5E5E5"> handler</font>

603
00:30:31,260 --> 00:30:37,090
receives that string it's<font color="#E5E5E5"> going to send</font>

604
00:30:34,000 --> 00:30:39,370
out<font color="#E5E5E5"> the string which then needs to be</font>

605
00:30:37,090 --> 00:30:47,470
converted<font color="#CCCCCC"> back to</font><font color="#E5E5E5"> an array</font><font color="#CCCCCC"> of</font><font color="#E5E5E5"> bytes for</font>

606
00:30:39,370 --> 00:30:50,290
<font color="#CCCCCC">Nettie to write it to the</font><font color="#E5E5E5"> network</font><font color="#CCCCCC"> okay</font>

607
00:30:47,470 --> 00:30:53,049
so instead<font color="#CCCCCC"> of</font><font color="#E5E5E5"> the single byte buff we've</font>

608
00:30:50,290 --> 00:30:54,370
now got a string which we can<font color="#CCCCCC"> edit</font><font color="#E5E5E5"> what</font>

609
00:30:53,049 --> 00:30:57,309
<font color="#E5E5E5">not in this case</font><font color="#CCCCCC"> because it's</font><font color="#E5E5E5"> already</font>

610
00:30:54,370 --> 00:31:01,600
passed through but if we intercepted it

611
00:30:57,309 --> 00:31:05,160
<font color="#E5E5E5">we could edit</font><font color="#CCCCCC"> that and we could tamper</font>

612
00:31:01,600 --> 00:31:05,159
with that<font color="#CCCCCC"> as we wanted to</font>

613
00:31:14,779 --> 00:31:23,849
okay so there's one more<font color="#E5E5E5"> detail</font><font color="#CCCCCC"> if we</font>

614
00:31:18,960 --> 00:31:31,889
were to edit the string<font color="#CCCCCC"> oh sorry</font>

615
00:31:23,849 --> 00:31:35,369
intercept the string and edit<font color="#E5E5E5"> it</font><font color="#CCCCCC"> so we</font>

616
00:31:31,889 --> 00:31:39,379
<font color="#E5E5E5">are you're going</font><font color="#CCCCCC"> to intercept that</font>

617
00:31:35,369 --> 00:31:42,439
<font color="#E5E5E5">string and change a piece of the data</font>

618
00:31:39,379 --> 00:31:44,699
for<font color="#CCCCCC"> example change rogen to Lauren</font>

619
00:31:42,440 --> 00:31:46,919
you'll<font color="#CCCCCC"> notice</font><font color="#E5E5E5"> that there's that checksum</font>

620
00:31:44,700 --> 00:31:51,690
field<font color="#CCCCCC"> oh no</font>

621
00:31:46,919 --> 00:31:54,179
our checksum is<font color="#E5E5E5"> now invalid so the</font>

622
00:31:51,690 --> 00:31:56,809
server is<font color="#E5E5E5"> now going</font><font color="#CCCCCC"> ups no this</font><font color="#E5E5E5"> is no</font>

623
00:31:54,179 --> 00:32:01,440
<font color="#E5E5E5">good what are</font><font color="#CCCCCC"> we going</font><font color="#E5E5E5"> to do about it</font>

624
00:31:56,809 --> 00:32:03,178
well it would probably<font color="#E5E5E5"> be a</font><font color="#CCCCCC"> good</font><font color="#E5E5E5"> idea to</font>

625
00:32:01,440 --> 00:32:05,399
put something in<font color="#E5E5E5"> the pipeline</font><font color="#CCCCCC"> that will</font>

626
00:32:03,179 --> 00:32:07,080
recalculate the checksum for us so

627
00:32:05,399 --> 00:32:09,059
instead of me having<font color="#CCCCCC"> to manually do it</font>

628
00:32:07,080 --> 00:32:11,728
<font color="#E5E5E5">as you would go</font><font color="#CCCCCC"> into like the burp</font>

629
00:32:09,059 --> 00:32:15,330
encoder and string your changes together

630
00:32:11,729 --> 00:32:18,149
<font color="#E5E5E5">and choose the hash we can actually put</font>

631
00:32:15,330 --> 00:32:20,399
a little script<font color="#E5E5E5"> in line that's going to</font>

632
00:32:18,149 --> 00:32:25,199
do it for us<font color="#E5E5E5"> and this is a common thing</font>

633
00:32:20,399 --> 00:32:27,689
right<font color="#CCCCCC"> on a banking application</font><font color="#E5E5E5"> I I ran</font>

634
00:32:25,200 --> 00:32:30,719
into a protocol<font color="#E5E5E5"> that</font><font color="#CCCCCC"> would that</font><font color="#E5E5E5"> had</font>

635
00:32:27,690 --> 00:32:33,899
embedded signatures<font color="#E5E5E5"> so if you wanted to</font>

636
00:32:30,719 --> 00:32:35,700
tamper with<font color="#CCCCCC"> it</font><font color="#E5E5E5"> those signatures would no</font>

637
00:32:33,899 --> 00:32:38,189
longer validate they were signed by the

638
00:32:35,700 --> 00:32:42,599
<font color="#E5E5E5">application so I exported the</font><font color="#CCCCCC"> signet the</font>

639
00:32:38,190 --> 00:32:45,779
private key<font color="#E5E5E5"> from the application wrote</font>

640
00:32:42,599 --> 00:32:51,989
my own<font color="#CCCCCC"> proxy so I've done this few times</font>

641
00:32:45,779 --> 00:32:53,460
<font color="#CCCCCC">a custom proxy that would decode the</font>

642
00:32:51,989 --> 00:32:56,039
messages<font color="#E5E5E5"> the limeys</font><font color="#CCCCCC"> to tamper</font><font color="#E5E5E5"> with</font><font color="#CCCCCC"> it</font>

643
00:32:53,460 --> 00:32:57,629
<font color="#E5E5E5">and then on its outbound journey would</font>

644
00:32:56,039 --> 00:33:03,359
recalculate the signature<font color="#E5E5E5"> for me</font>

645
00:32:57,629 --> 00:33:05,428
automatically<font color="#E5E5E5"> so instead of instead</font><font color="#CCCCCC"> of</font>

646
00:33:03,359 --> 00:33:08,309
<font color="#CCCCCC">having to write the</font><font color="#E5E5E5"> whole</font><font color="#CCCCCC"> thing a whole</font>

647
00:33:05,429 --> 00:33:09,619
thing from scratch<font color="#CCCCCC"> you can focus purely</font>

648
00:33:08,309 --> 00:33:12,389
on the task at hand which<font color="#E5E5E5"> is</font>

649
00:33:09,619 --> 00:33:16,099
recalculating a checksum<font color="#E5E5E5"> so all I have</font>

650
00:33:12,389 --> 00:33:19,639
is an object that<font color="#CCCCCC"> has a field and</font><font color="#E5E5E5"> we</font>

651
00:33:16,099 --> 00:33:22,320
<font color="#CCCCCC">need to recalculate that checksum and</font>

652
00:33:19,639 --> 00:33:24,498
update the the message before<font color="#E5E5E5"> we send it</font>

653
00:33:22,320 --> 00:33:24,499
<font color="#E5E5E5">off</font>

654
00:33:24,990 --> 00:33:28,210
[Music]

655
00:33:30,440 --> 00:33:44,940
so let's do that<font color="#E5E5E5"> so what we got</font><font color="#CCCCCC"> here</font><font color="#E5E5E5"> now</font>

656
00:33:41,549 --> 00:33:47,100
<font color="#E5E5E5">is the script</font><font color="#CCCCCC"> sorry that should</font><font color="#E5E5E5"> be</font>

657
00:33:44,940 --> 00:33:50,960
<font color="#E5E5E5">furthered</font><font color="#CCCCCC"> are so we've got our object</font>

658
00:33:47,100 --> 00:33:54,299
decoder which is going<font color="#E5E5E5"> to frame our</font>

659
00:33:50,960 --> 00:33:58,679
message<font color="#CCCCCC"> so the the braces</font><font color="#E5E5E5"> we've now got</font>

660
00:33:54,299 --> 00:34:01,500
a script written in groovy that is

661
00:33:58,679 --> 00:34:05,279
<font color="#E5E5E5">making use of the Jackson JSON libraries</font>

662
00:34:01,500 --> 00:34:08,339
<font color="#E5E5E5">to decode and encode bytes</font><font color="#CCCCCC"> to an actual</font>

663
00:34:05,279 --> 00:34:10,770
JSON object so then we can<font color="#CCCCCC"> use the Java</font>

664
00:34:08,339 --> 00:34:16,349
<font color="#CCCCCC">API to access a particular</font><font color="#E5E5E5"> field of the</font>

665
00:34:10,770 --> 00:34:23,730
<font color="#CCCCCC">json object and recalculate what a field</font>

666
00:34:16,349 --> 00:34:25,020
should<font color="#E5E5E5"> be and we got a similar sorry so</font>

667
00:34:23,730 --> 00:34:26,550
in this instance<font color="#E5E5E5"> we're not</font><font color="#CCCCCC"> actually</font>

668
00:34:25,020 --> 00:34:28,409
going to recalculate<font color="#E5E5E5"> the</font><font color="#CCCCCC"> check sum just</font>

669
00:34:26,550 --> 00:34:30,960
<font color="#CCCCCC">yet</font><font color="#E5E5E5"> what we're doing here is actually</font>

670
00:34:28,409 --> 00:34:35,010
<font color="#E5E5E5">pausing it as a json</font><font color="#CCCCCC"> object rather</font><font color="#E5E5E5"> than</font>

671
00:34:30,960 --> 00:34:38,580
a strings<font color="#E5E5E5"> so this again it facilitates</font>

672
00:34:35,010 --> 00:34:40,740
<font color="#E5E5E5">automated processing if you want it once</font>

673
00:34:38,580 --> 00:34:45,629
you've got<font color="#E5E5E5"> this JSON object you can now</font>

674
00:34:40,739 --> 00:34:47,158
do<font color="#E5E5E5"> you know you can use the api's to to</font>

675
00:34:45,629 --> 00:34:49,799
modify it without having<font color="#CCCCCC"> to do</font><font color="#E5E5E5"> it</font>

676
00:34:47,159 --> 00:34:51,839
manually<font color="#CCCCCC"> so here you</font><font color="#E5E5E5"> can see it's using</font>

677
00:34:49,800 --> 00:34:54,300
<font color="#CCCCCC">reflection</font><font color="#E5E5E5"> to drill down into the</font>

678
00:34:51,839 --> 00:34:57,990
<font color="#CCCCCC">subject</font><font color="#E5E5E5"> to allow you to</font><font color="#CCCCCC"> edit</font><font color="#E5E5E5"> the fields</font>

679
00:34:54,300 --> 00:35:01,640
of the object<font color="#E5E5E5"> so in this case we can</font>

680
00:34:57,990 --> 00:35:10,529
change<font color="#CCCCCC"> what if we were</font><font color="#E5E5E5"> to send it</font><font color="#CCCCCC"> again</font>

681
00:35:01,640 --> 00:35:12,060
we<font color="#E5E5E5"> can change a field so</font><font color="#CCCCCC"> jason node you</font>

682
00:35:10,530 --> 00:35:13,530
can't edit<font color="#E5E5E5"> because there's no property</font>

683
00:35:12,060 --> 00:35:17,930
editor for that<font color="#E5E5E5"> but if you go down</font><font color="#CCCCCC"> to a</font>

684
00:35:13,530 --> 00:35:21,480
<font color="#E5E5E5">sort of fundamental</font><font color="#CCCCCC"> or a simple object</font>

685
00:35:17,930 --> 00:35:23,160
<font color="#E5E5E5">you can change fields</font><font color="#CCCCCC"> and you</font><font color="#E5E5E5"> can send</font>

686
00:35:21,480 --> 00:35:24,869
that on you<font color="#CCCCCC"> can either hit send or you</font>

687
00:35:23,160 --> 00:35:26,640
can turn off intercept<font color="#E5E5E5"> like with</font><font color="#CCCCCC"> burb</font>

688
00:35:24,869 --> 00:35:28,890
<font color="#E5E5E5">when you stop intercepting everything</font>

689
00:35:26,640 --> 00:35:33,710
just gets forwarded<font color="#E5E5E5"> so here the</font><font color="#CCCCCC"> checksum</font>

690
00:35:28,890 --> 00:35:37,549
<font color="#E5E5E5">again was invalid</font><font color="#CCCCCC"> but the</font><font color="#E5E5E5"> the server</font>

691
00:35:33,710 --> 00:35:37,550
<font color="#CCCCCC">slow gave us our response</font>

692
00:35:38,990 --> 00:35:45,350
<font color="#E5E5E5">okay so what you're seeing here is</font>

693
00:35:45,410 --> 00:35:52,170
components building blocks<font color="#CCCCCC"> that you can</font>

694
00:35:48,900 --> 00:35:55,350
<font color="#E5E5E5">make use of to build more complicated</font>

695
00:35:52,170 --> 00:35:59,640
<font color="#E5E5E5">pipelines and I hope that you're seeing</font>

696
00:35:55,350 --> 00:36:02,790
<font color="#E5E5E5">that</font><font color="#CCCCCC"> in all</font><font color="#E5E5E5"> of this you</font><font color="#CCCCCC"> haven't had to</font>

697
00:35:59,640 --> 00:36:04,980
worry about<font color="#CCCCCC"> writing a TCP listener</font><font color="#E5E5E5"> you</font>

698
00:36:02,790 --> 00:36:06,990
haven't had to worry about<font color="#E5E5E5"> calling</font>

699
00:36:04,980 --> 00:36:10,290
socket<font color="#CCCCCC"> writes and listening for</font><font color="#E5E5E5"> timeouts</font>

700
00:36:06,990 --> 00:36:12,089
<font color="#E5E5E5">and error handling and blah blah blah</font>

701
00:36:10,290 --> 00:36:16,259
<font color="#CCCCCC">that stuff is all</font><font color="#E5E5E5"> being taken care for</font>

702
00:36:12,090 --> 00:36:19,020
<font color="#E5E5E5">care of for you by the framework what</font>

703
00:36:16,260 --> 00:36:21,600
you all all you have to do is focus<font color="#CCCCCC"> on</font>

704
00:36:19,020 --> 00:36:25,290
the details of<font color="#E5E5E5"> the protocol</font><font color="#CCCCCC"> itself and</font>

705
00:36:21,600 --> 00:36:27,750
I'm not<font color="#E5E5E5"> pretending that mallet is going</font>

706
00:36:25,290 --> 00:36:29,610
to be you<font color="#CCCCCC"> know this thing</font><font color="#E5E5E5"> that you ran</font>

707
00:36:27,750 --> 00:36:31,590
and it just intercepts everything and

708
00:36:29,610 --> 00:36:34,380
<font color="#CCCCCC">digital</font><font color="#E5E5E5"> fireworks</font><font color="#CCCCCC"> no you're going</font><font color="#E5E5E5"> to</font>

709
00:36:31,590 --> 00:36:37,200
<font color="#CCCCCC">have to do some work</font><font color="#E5E5E5"> to</font><font color="#CCCCCC"> understand the</font>

710
00:36:34,380 --> 00:36:39,540
protocol that's what you do you don't

711
00:36:37,200 --> 00:36:42,930
have<font color="#E5E5E5"> to worry about the rest of the</font>

712
00:36:39,540 --> 00:36:46,230
stuff<font color="#CCCCCC"> that you would otherwise have to</font>

713
00:36:42,930 --> 00:36:48,390
re-implement<font color="#E5E5E5"> every single time you're</font>

714
00:36:46,230 --> 00:36:50,100
<font color="#E5E5E5">going to take two days just</font><font color="#CCCCCC"> getting the</font>

715
00:36:48,390 --> 00:36:54,180
framework up and running before<font color="#E5E5E5"> you can</font>

716
00:36:50,100 --> 00:36:56,700
actually<font color="#E5E5E5"> even start modifying a</font><font color="#CCCCCC"> byte of</font>

717
00:36:54,180 --> 00:36:59,899
the protocol<font color="#CCCCCC"> itself so we're cutting out</font>

718
00:36:56,700 --> 00:37:03,899
or the<font color="#E5E5E5"> intention is to</font><font color="#CCCCCC"> cut out that</font>

719
00:36:59,900 --> 00:37:06,420
<font color="#E5E5E5">startup hurdle and make it easy for you</font>

720
00:37:03,900 --> 00:37:08,040
to<font color="#CCCCCC"> actually get into</font><font color="#E5E5E5"> the deconstruction</font>

721
00:37:06,420 --> 00:37:11,640
<font color="#E5E5E5">of</font><font color="#CCCCCC"> the protocol the reversing of</font><font color="#E5E5E5"> the</font>

722
00:37:08,040 --> 00:37:15,740
protocol and<font color="#E5E5E5"> the discovery of the</font>

723
00:37:11,640 --> 00:37:15,740
vulnerabilities that<font color="#E5E5E5"> may be there</font>

724
00:37:25,329 --> 00:37:34,809
<font color="#E5E5E5">all right okay so what we have</font><font color="#CCCCCC"> here</font>

725
00:37:30,289 --> 00:37:38,329
<font color="#E5E5E5">finally then is our intercept handler</font>

726
00:37:34,809 --> 00:37:40,609
which<font color="#E5E5E5"> we don't</font><font color="#CCCCCC"> really</font><font color="#E5E5E5"> care about but</font>

727
00:37:38,329 --> 00:37:44,920
more interestingly<font color="#E5E5E5"> another script</font>

728
00:37:40,609 --> 00:37:47,749
handler which has been focused on

729
00:37:44,920 --> 00:37:49,699
actually recalculating<font color="#CCCCCC"> the checksum so</font>

730
00:37:47,749 --> 00:37:55,129
in this case it's a simple<font color="#E5E5E5"> md5 sum of</font>

731
00:37:49,699 --> 00:37:57,499
the fields concatenated together<font color="#CCCCCC"> and</font>

732
00:37:55,130 --> 00:38:00,890
we're going<font color="#CCCCCC"> to</font><font color="#E5E5E5"> update the checksum field</font>

733
00:37:57,499 --> 00:38:03,529
<font color="#CCCCCC">so here we can actually</font><font color="#E5E5E5"> just use you</font>

734
00:38:00,890 --> 00:38:06,019
know the various<font color="#E5E5E5"> api's of the</font><font color="#CCCCCC"> json load</font>

735
00:38:03,529 --> 00:38:09,319
instead<font color="#E5E5E5"> of having to figure out that</font>

736
00:38:06,019 --> 00:38:12,109
it's the<font color="#E5E5E5"> you know the sixth quote in the</font>

737
00:38:09,319 --> 00:38:14,150
string and if the message has a quoted

738
00:38:12,109 --> 00:38:16,038
string<font color="#CCCCCC"> then we buggered and we have to</font>

739
00:38:14,150 --> 00:38:17,449
recalculate from the beginning we<font color="#E5E5E5"> can</font>

740
00:38:16,039 --> 00:38:25,489
<font color="#E5E5E5">actually</font><font color="#CCCCCC"> use an API</font><font color="#E5E5E5"> where that stuff's</font>

741
00:38:17,449 --> 00:38:33,709
already<font color="#CCCCCC"> been done for us okay so once</font>

742
00:38:25,489 --> 00:38:39,650
more we can edit our<font color="#CCCCCC"> birth date</font><font color="#E5E5E5"> but if</font>

743
00:38:33,709 --> 00:38:41,660
<font color="#E5E5E5">you send that on and once again</font><font color="#CCCCCC"> minus</font>

744
00:38:39,650 --> 00:38:49,729
<font color="#CCCCCC">one years</font><font color="#E5E5E5"> old but the checksum</font><font color="#CCCCCC"> is not</font>

745
00:38:41,660 --> 00:38:54,529
valid and<font color="#CCCCCC"> so that is making the the</font>

746
00:38:49,729 --> 00:38:56,390
whole process of constructing a proxy<font color="#CCCCCC"> to</font>

747
00:38:54,529 --> 00:39:00,439
my mind<font color="#CCCCCC"> it's making it real it's it's</font>

748
00:38:56,390 --> 00:39:02,719
really really simple<font color="#E5E5E5"> you don't have to</font>

749
00:39:00,439 --> 00:39:06,319
worry about<font color="#E5E5E5"> the details</font><font color="#CCCCCC"> of the</font>

750
00:39:02,719 --> 00:39:09,679
surrounding stuff what it<font color="#E5E5E5"> gives you is</font>

751
00:39:06,319 --> 00:39:11,599
the ability<font color="#CCCCCC"> to focus on</font><font color="#E5E5E5"> the details of</font>

752
00:39:09,679 --> 00:39:14,329
<font color="#E5E5E5">the protocol</font><font color="#CCCCCC"> what's unique to</font><font color="#E5E5E5"> this</font>

753
00:39:11,599 --> 00:39:18,109
<font color="#E5E5E5">particular thing you're looking at TCP</font>

754
00:39:14,329 --> 00:39:21,859
<font color="#E5E5E5">service bad</font><font color="#CCCCCC"> no that stuff you</font><font color="#E5E5E5"> can write</font>

755
00:39:18,109 --> 00:39:24,380
but why should<font color="#E5E5E5"> you have</font><font color="#CCCCCC"> to what you</font>

756
00:39:21,859 --> 00:39:27,589
<font color="#CCCCCC">really want to do is just get in between</font>

757
00:39:24,380 --> 00:39:31,910
<font color="#E5E5E5">those clients and server and start</font>

758
00:39:27,589 --> 00:39:32,480
tampering with the data and I hope that

759
00:39:31,910 --> 00:39:38,480
<font color="#E5E5E5">you can</font>

760
00:39:32,480 --> 00:39:40,760
that<font color="#E5E5E5"> mallet will make that possible okay</font>

761
00:39:38,480 --> 00:39:46,010
so that's the sort<font color="#E5E5E5"> of evolutionary</font>

762
00:39:40,760 --> 00:39:48,800
process<font color="#E5E5E5"> that that</font><font color="#CCCCCC"> I think you would go</font>

763
00:39:46,010 --> 00:39:49,490
<font color="#E5E5E5">through in order to to construct your</font>

764
00:39:48,800 --> 00:39:51,680
pipelines

765
00:39:49,490 --> 00:39:56,118
<font color="#E5E5E5">let me give you an example then or go</font>

766
00:39:51,680 --> 00:39:58,450
back to<font color="#CCCCCC"> that at first demonstration that</font>

767
00:39:56,119 --> 00:39:58,450
I did

768
00:40:23,600 --> 00:40:55,319
it's bigger<font color="#E5E5E5"> I can't see it this distance</font>

769
00:40:35,010 --> 00:40:57,090
<font color="#E5E5E5">oh my what</font><font color="#CCCCCC"> a second oh look that was not</font>

770
00:40:55,320 --> 00:40:59,960
<font color="#CCCCCC">what I wanted</font><font color="#E5E5E5"> today I think</font><font color="#CCCCCC"> I said save</font>

771
00:40:57,090 --> 00:40:59,960
instead of open

772
00:41:08,510 --> 00:41:22,160
<font color="#CCCCCC">no where's my</font><font color="#E5E5E5"> demo oh there we go</font><font color="#CCCCCC"> all</font>

773
00:41:14,240 --> 00:41:23,990
<font color="#CCCCCC">right so what we have here is just nodes</font>

774
00:41:22,160 --> 00:41:28,069
<font color="#E5E5E5">that you can drag</font><font color="#CCCCCC"> and drop</font><font color="#E5E5E5"> from the</font>

775
00:41:23,990 --> 00:41:32,629
<font color="#E5E5E5">pallet so this pallet on the module left</font>

776
00:41:28,070 --> 00:41:35,690
<font color="#E5E5E5">has got the listener the</font><font color="#CCCCCC"> Sox</font><font color="#E5E5E5"> handlers</font>

777
00:41:32,630 --> 00:41:38,120
etc and you can<font color="#CCCCCC"> ultimately just drag</font>

778
00:41:35,690 --> 00:41:40,520
those into<font color="#CCCCCC"> your graph and configure them</font>

779
00:41:38,120 --> 00:41:43,130
by<font color="#E5E5E5"> double-clicking on them so in this</font>

780
00:41:40,520 --> 00:41:44,870
case we've<font color="#CCCCCC"> got our server socket channel</font>

781
00:41:43,130 --> 00:41:48,820
<font color="#CCCCCC">in</font><font color="#E5E5E5"> this instance it's</font><font color="#CCCCCC"> listening on port</font>

782
00:41:44,870 --> 00:41:54,799
1 or H<font color="#E5E5E5"> 0 which is a standard Sox port</font>

783
00:41:48,820 --> 00:41:57,080
<font color="#E5E5E5">the Sox initializer this bundles</font><font color="#CCCCCC"> a bunch</font>

784
00:41:54,800 --> 00:41:58,550
of handlers together<font color="#E5E5E5"> so instead of you</font>

785
00:41:57,080 --> 00:41:59,000
having to drag<font color="#CCCCCC"> 4 things into the</font>

786
00:41:58,550 --> 00:42:01,160
pipeline

787
00:41:59,000 --> 00:42:05,950
you just drag one<font color="#E5E5E5"> because they commonly</font>

788
00:42:01,160 --> 00:42:08,390
use<font color="#E5E5E5"> together and what that does is it</font>

789
00:42:05,950 --> 00:42:10,819
looks to see what<font color="#E5E5E5"> the first byte of</font><font color="#CCCCCC"> the</font>

790
00:42:08,390 --> 00:42:13,910
communication is if it's a<font color="#E5E5E5"> 4 then</font><font color="#CCCCCC"> it's</font>

791
00:42:10,820 --> 00:42:16,910
<font color="#CCCCCC">ox4 if it's a 5 then</font><font color="#E5E5E5"> it's</font><font color="#CCCCCC"> ox 5 and then</font>

792
00:42:13,910 --> 00:42:19,160
it chooses<font color="#E5E5E5"> the right handler it chooses</font>

793
00:42:16,910 --> 00:42:22,160
<font color="#CCCCCC">a</font><font color="#E5E5E5"> Sox for protocol decoder or a Sox 5</font>

794
00:42:19,160 --> 00:42:24,680
protocol decoder which then handles the

795
00:42:22,160 --> 00:42:27,140
initial Sox handshaking<font color="#E5E5E5"> and eventually</font>

796
00:42:24,680 --> 00:42:31,879
it says I want to connect to Google

797
00:42:27,140 --> 00:42:35,720
common port 80<font color="#E5E5E5"> and what that will do is</font>

798
00:42:31,880 --> 00:42:38,090
<font color="#CCCCCC">it will fire up a</font><font color="#E5E5E5"> message that will say</font>

799
00:42:35,720 --> 00:42:43,310
<font color="#E5E5E5">user</font><font color="#CCCCCC"> events connect to this particular</font>

800
00:42:38,090 --> 00:42:46,220
<font color="#CCCCCC">destination the channel handler the</font>

801
00:42:43,310 --> 00:42:48,980
target specific<font color="#E5E5E5"> channel handler has the</font>

802
00:42:46,220 --> 00:42:51,410
ability to branch<font color="#E5E5E5"> based on the</font>

803
00:42:48,980 --> 00:42:53,990
destination<font color="#E5E5E5"> so in this case it's</font>

804
00:42:51,410 --> 00:42:57,250
matching<font color="#E5E5E5"> on the IP address</font><font color="#CCCCCC"> and</font><font color="#E5E5E5"> the</font><font color="#CCCCCC"> port</font>

805
00:42:53,990 --> 00:43:01,160
<font color="#E5E5E5">or if you like the</font><font color="#CCCCCC"> I</font><font color="#E5E5E5"> need socket address</font>

806
00:42:57,250 --> 00:43:04,040
using<font color="#E5E5E5"> a regular expression if it's on</font>

807
00:43:01,160 --> 00:43:06,440
port 443 it's going to go down this path

808
00:43:04,040 --> 00:43:11,210
where it will introduce an SSL server

809
00:43:06,440 --> 00:43:14,590
handler<font color="#E5E5E5"> the SSL server handler is again</font>

810
00:43:11,210 --> 00:43:19,430
a sort of<font color="#E5E5E5"> it's a custom wrapper around</font>

811
00:43:14,590 --> 00:43:22,410
<font color="#E5E5E5">two</font><font color="#CCCCCC"> or three of the</font><font color="#E5E5E5"> nakey</font><font color="#CCCCCC"> SSL handlers</font>

812
00:43:19,430 --> 00:43:26,700
<font color="#E5E5E5">so there's an asset and</font><font color="#CCCCCC"> sni handler in</font>

813
00:43:22,410 --> 00:43:29,250
<font color="#CCCCCC">there who's familiar with SNI cool</font><font color="#E5E5E5"> so</font>

814
00:43:26,700 --> 00:43:32,450
<font color="#E5E5E5">S&I for those who are not is server name</font>

815
00:43:29,250 --> 00:43:35,970
indicator<font color="#E5E5E5"> it's what allows companies to</font>

816
00:43:32,450 --> 00:43:41,098
virtual<font color="#CCCCCC"> host SSL servers on a single IP</font>

817
00:43:35,970 --> 00:43:43,680
address so when you connect to one of

818
00:43:41,099 --> 00:43:45,569
those<font color="#E5E5E5"> servers in their client handshake</font>

819
00:43:43,680 --> 00:43:48,149
<font color="#E5E5E5">you'll actually say who you're trying to</font>

820
00:43:45,569 --> 00:43:51,329
connect to<font color="#E5E5E5"> so</font><font color="#CCCCCC"> while you might be</font>

821
00:43:48,150 --> 00:43:53,010
connecting through an IP address<font color="#E5E5E5"> you're</font>

822
00:43:51,329 --> 00:43:57,900
telling the<font color="#E5E5E5"> server that actually</font><font color="#CCCCCC"> yes I'm</font>

823
00:43:53,010 --> 00:43:59,960
<font color="#CCCCCC">looking</font><font color="#E5E5E5"> for google.com or</font><font color="#CCCCCC"> wwl</font><font color="#E5E5E5"> common you</font>

824
00:43:57,900 --> 00:44:02,700
can<font color="#E5E5E5"> get a different SSL certificate back</font>

825
00:43:59,960 --> 00:44:05,490
<font color="#CCCCCC">and as a result what it allows us to do</font>

826
00:44:02,700 --> 00:44:09,629
is automatically<font color="#E5E5E5"> generate an SSL</font>

827
00:44:05,490 --> 00:44:11,910
<font color="#CCCCCC">certificate for that</font><font color="#E5E5E5"> particular site if</font>

828
00:44:09,630 --> 00:44:15,349
it's not using<font color="#E5E5E5"> S&I we can fall</font><font color="#CCCCCC"> back</font><font color="#E5E5E5"> and</font>

829
00:44:11,910 --> 00:44:17,848
we can create a certificate<font color="#E5E5E5"> based on the</font>

830
00:44:15,349 --> 00:44:20,130
requested destination so if<font color="#E5E5E5"> it said hey</font>

831
00:44:17,849 --> 00:44:23,549
I'm<font color="#E5E5E5"> actually trying to connect</font><font color="#CCCCCC"> to wwl</font>

832
00:44:20,130 --> 00:44:26,160
<font color="#E5E5E5">comm and there's no</font><font color="#CCCCCC"> sni message</font><font color="#E5E5E5"> in the</font>

833
00:44:23,549 --> 00:44:34,799
SSL handshake<font color="#E5E5E5"> we can fall</font><font color="#CCCCCC"> back and use</font>

834
00:44:26,160 --> 00:44:37,020
that<font color="#E5E5E5"> as as an alternative so much like</font>

835
00:44:34,799 --> 00:44:40,650
in burp and zap and all the other

836
00:44:37,020 --> 00:44:42,750
proxies<font color="#CCCCCC"> the automatic</font><font color="#E5E5E5"> generated SSL</font>

837
00:44:40,650 --> 00:44:47,309
certificate is signed by a certificate

838
00:44:42,750 --> 00:44:55,890
authority<font color="#CCCCCC"> that</font><font color="#E5E5E5"> you just need to add to</font>

839
00:44:47,309 --> 00:45:00,000
your to your<font color="#E5E5E5"> client if possible next</font>

840
00:44:55,890 --> 00:45:02,900
<font color="#E5E5E5">steps down yeah and you can see</font><font color="#CCCCCC"> sort of</font>

841
00:45:00,000 --> 00:45:06,420
similar<font color="#E5E5E5"> similarities because ultimately</font>

842
00:45:02,900 --> 00:45:09,000
port<font color="#CCCCCC"> 44 43</font><font color="#E5E5E5"> and port 80 are the same</font>

843
00:45:06,420 --> 00:45:12,329
other than the SSL negotiation so you'll

844
00:45:09,000 --> 00:45:16,289
see<font color="#E5E5E5"> the sort of parallels between the</font>

845
00:45:12,329 --> 00:45:19,230
handlers in those cases<font color="#E5E5E5"> so the next step</font>

846
00:45:16,289 --> 00:45:22,559
<font color="#E5E5E5">after you've negotiated SSL or made a</font>

847
00:45:19,230 --> 00:45:27,270
direct<font color="#E5E5E5"> connection is to install an HTTP</font>

848
00:45:22,559 --> 00:45:30,990
server and client codec so a HTTP server

849
00:45:27,270 --> 00:45:34,740
codec decodes requests and encodes

850
00:45:30,990 --> 00:45:35,830
responses so if you've<font color="#E5E5E5"> got a byte</font><font color="#CCCCCC"> array</font>

851
00:45:34,740 --> 00:45:37,270
<font color="#E5E5E5">with</font><font color="#CCCCCC"> the</font>

852
00:45:35,830 --> 00:45:39,549
<font color="#CCCCCC">Qwest coming in its going</font><font color="#E5E5E5"> to decode</font><font color="#CCCCCC"> that</font>

853
00:45:37,270 --> 00:45:41,920
into a request object<font color="#CCCCCC"> and if it gets</font><font color="#E5E5E5"> a</font>

854
00:45:39,550 --> 00:45:44,320
<font color="#E5E5E5">response object going out</font><font color="#CCCCCC"> its going</font><font color="#E5E5E5"> to</font>

855
00:45:41,920 --> 00:45:47,890
<font color="#E5E5E5">encode that</font><font color="#CCCCCC"> into an array of bytes</font><font color="#E5E5E5"> so</font>

856
00:45:44,320 --> 00:45:49,270
you need to keep in<font color="#CCCCCC"> mind which way</font><font color="#E5E5E5"> and</font>

857
00:45:47,890 --> 00:45:50,770
what objects are<font color="#E5E5E5"> going backwards</font><font color="#CCCCCC"> and</font>

858
00:45:49,270 --> 00:45:52,690
<font color="#E5E5E5">forwards</font><font color="#CCCCCC"> whether it needs to be as it's</font>

859
00:45:50,770 --> 00:45:57,190
acting as a server or<font color="#E5E5E5"> it's acting as a</font>

860
00:45:52,690 --> 00:45:58,510
client<font color="#E5E5E5"> but</font><font color="#CCCCCC"> you're</font><font color="#E5E5E5"> intelligent people</font>

861
00:45:57,190 --> 00:46:00,010
right you're<font color="#E5E5E5"> going to be reverse</font>

862
00:45:58,510 --> 00:46:05,700
engineering a protocol you can<font color="#E5E5E5"> figure</font>

863
00:46:00,010 --> 00:46:08,830
<font color="#CCCCCC">that part</font><font color="#E5E5E5"> out I guess</font><font color="#CCCCCC"> so the</font><font color="#E5E5E5"> native</font>

864
00:46:05,700 --> 00:46:12,129
object model there or<font color="#E5E5E5"> the HTTP request</font>

865
00:46:08,830 --> 00:46:14,560
<font color="#E5E5E5">model they send out a request header and</font>

866
00:46:12,130 --> 00:46:19,120
then<font color="#E5E5E5"> chunks of content so it can process</font>

867
00:46:14,560 --> 00:46:21,820
streaming HTTP requests which is cool<font color="#CCCCCC"> if</font>

868
00:46:19,120 --> 00:46:23,440
that's what you want to do but in most

869
00:46:21,820 --> 00:46:24,880
people's<font color="#E5E5E5"> cases what you really want to</font>

870
00:46:23,440 --> 00:46:27,250
do is<font color="#E5E5E5"> just deal with</font><font color="#CCCCCC"> the whole request</font>

871
00:46:24,880 --> 00:46:29,080
and its body<font color="#E5E5E5"> or the whole response and</font>

872
00:46:27,250 --> 00:46:32,170
its body so the next<font color="#E5E5E5"> thing you're going</font>

873
00:46:29,080 --> 00:46:34,900
to<font color="#E5E5E5"> do is add the HTTP object aggregator</font>

874
00:46:32,170 --> 00:46:37,300
<font color="#CCCCCC">and what that does is it</font><font color="#E5E5E5"> just collapses</font>

875
00:46:34,900 --> 00:46:41,830
those multiple objects much like we had

876
00:46:37,300 --> 00:46:44,380
the JSON object decoder<font color="#CCCCCC"> collapses those</font>

877
00:46:41,830 --> 00:46:49,029
multiple<font color="#E5E5E5"> things into a single request or</font>

878
00:46:44,380 --> 00:46:51,820
a<font color="#CCCCCC"> single response the next</font><font color="#E5E5E5"> step here</font><font color="#CCCCCC"> is</font>

879
00:46:49,030 --> 00:46:56,100
<font color="#E5E5E5">the WebSocket server upgrade</font><font color="#CCCCCC"> handler now</font>

880
00:46:51,820 --> 00:46:59,140
<font color="#CCCCCC">if you've seen</font><font color="#E5E5E5"> a WebSocket upgrade</font><font color="#CCCCCC"> a</font>

881
00:46:56,100 --> 00:47:01,210
handshake<font color="#E5E5E5"> the client sends an HTTP</font>

882
00:46:59,140 --> 00:47:04,450
<font color="#CCCCCC">message says hey I'd</font><font color="#E5E5E5"> like to</font><font color="#CCCCCC"> upgrade to</font>

883
00:47:01,210 --> 00:47:06,970
<font color="#E5E5E5">WebSockets if the server agrees and can</font>

884
00:47:04,450 --> 00:47:11,220
support WebSockets it'll send a a<font color="#E5E5E5"> 101</font>

885
00:47:06,970 --> 00:47:13,810
response<font color="#E5E5E5"> upgrade</font><font color="#CCCCCC"> okay</font><font color="#E5E5E5"> and at that point</font>

886
00:47:11,220 --> 00:47:15,970
once the<font color="#CCCCCC"> client receives</font><font color="#E5E5E5"> it it's going</font>

887
00:47:13,810 --> 00:47:18,610
<font color="#E5E5E5">to no longer send HTTP</font><font color="#CCCCCC"> requests is</font><font color="#E5E5E5"> going</font>

888
00:47:15,970 --> 00:47:23,890
to send WebSocket frames<font color="#E5E5E5"> so what we need</font>

889
00:47:18,610 --> 00:47:26,680
to<font color="#CCCCCC"> do here is</font><font color="#E5E5E5"> just watch for that 101</font>

890
00:47:23,890 --> 00:47:29,650
upgrade message<font color="#E5E5E5"> so if we see a request</font>

891
00:47:26,680 --> 00:47:31,600
for an upgrade and then we<font color="#E5E5E5"> subsequently</font>

892
00:47:29,650 --> 00:47:33,760
get a<font color="#E5E5E5"> 101</font><font color="#CCCCCC"> okay we're going</font><font color="#E5E5E5"> to do the</font>

893
00:47:31,600 --> 00:47:38,680
upgrade<font color="#CCCCCC"> you just need to get out the way</font>

894
00:47:33,760 --> 00:47:43,060
you<font color="#E5E5E5"> what this does pardon me is it</font>

895
00:47:38,680 --> 00:47:49,480
removes itself and it removes the HTTP

896
00:47:43,060 --> 00:47:55,630
<font color="#CCCCCC">codecs</font><font color="#E5E5E5"> on the outbound message</font>

897
00:47:49,480 --> 00:47:55,630
and there's a an equivalent<font color="#E5E5E5"> handler</font>

898
00:47:56,380 --> 00:48:04,040
looking<font color="#E5E5E5"> again for from the</font><font color="#CCCCCC"> clients</font><font color="#E5E5E5"> side</font>

899
00:48:00,700 --> 00:48:06,649
<font color="#E5E5E5">we have sent our upgrade request we've</font>

900
00:48:04,040 --> 00:48:09,110
got our upgrade response<font color="#CCCCCC"> ok</font><font color="#E5E5E5"> we now need</font>

901
00:48:06,650 --> 00:48:10,910
to get these<font color="#E5E5E5"> parts of the pipeline</font><font color="#CCCCCC"> out</font>

902
00:48:09,110 --> 00:48:12,980
<font color="#E5E5E5">of the way because we're not going to be</font>

903
00:48:10,910 --> 00:48:14,509
able to<font color="#CCCCCC"> parse HTTP messages</font><font color="#E5E5E5"> anymore and</font>

904
00:48:12,980 --> 00:48:22,460
if we try<font color="#E5E5E5"> we're going to throw an</font>

905
00:48:14,510 --> 00:48:26,660
exception right<font color="#CCCCCC"> and then</font><font color="#E5E5E5"> finally a</font>

906
00:48:22,460 --> 00:48:32,960
script handler<font color="#E5E5E5"> which is the text</font>

907
00:48:26,660 --> 00:48:37,190
WebSocket frame to uppercase<font color="#E5E5E5"> handler</font>

908
00:48:32,960 --> 00:48:39,650
that<font color="#CCCCCC"> I showed you earlier</font><font color="#E5E5E5"> so that was</font>

909
00:48:37,190 --> 00:48:41,390
all I<font color="#CCCCCC"> needed to</font><font color="#E5E5E5"> do in order</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> implement</font>

910
00:48:39,650 --> 00:48:44,300
<font color="#E5E5E5">tempering with that WebSocket message</font>

911
00:48:41,390 --> 00:48:45,710
<font color="#CCCCCC">now Beth does WebSockets right</font><font color="#E5E5E5"> has</font>

912
00:48:44,300 --> 00:48:49,240
anybody tried to<font color="#E5E5E5"> tamper with</font><font color="#CCCCCC"> the</font>

913
00:48:45,710 --> 00:48:52,510
WebSocket message<font color="#E5E5E5"> doesn't do it</font><font color="#CCCCCC"> right</font>

914
00:48:49,240 --> 00:48:52,509
you can't

915
00:48:53,200 --> 00:49:00,730
so while HTTP and HTTPS is a solved

916
00:48:58,430 --> 00:49:03,140
problem<font color="#E5E5E5"> now are we drilling down into</font>

917
00:49:00,730 --> 00:49:07,070
protocols that<font color="#E5E5E5"> aren't solved problems</font>

918
00:49:03,140 --> 00:49:09,850
<font color="#E5E5E5">and yes you can intercept this and you</font>

919
00:49:07,070 --> 00:49:12,770
<font color="#E5E5E5">can tamper with</font><font color="#CCCCCC"> it you might run foul of</font>

920
00:49:09,850 --> 00:49:14,509
timeouts<font color="#E5E5E5"> so you'll get the</font><font color="#CCCCCC"> web's</font><font color="#E5E5E5"> the the</font>

921
00:49:12,770 --> 00:49:16,520
ping WebSocket frame and the pong

922
00:49:14,510 --> 00:49:20,600
WebSocket frames<font color="#E5E5E5"> that you would need to</font>

923
00:49:16,520 --> 00:49:23,110
<font color="#E5E5E5">deal</font><font color="#CCCCCC"> with</font><font color="#E5E5E5"> but if you script your changes</font>

924
00:49:20,600 --> 00:49:25,549
<font color="#CCCCCC">timeouts become less of a problem right</font>

925
00:49:23,110 --> 00:49:30,010
<font color="#E5E5E5">if you need to do manual</font><font color="#CCCCCC"> changes yeah</font>

926
00:49:25,550 --> 00:49:30,010
<font color="#E5E5E5">but if you script them no problem</font>

927
00:49:33,560 --> 00:49:43,730
so just<font color="#E5E5E5"> very simply what this function</font>

928
00:49:40,640 --> 00:49:44,839
is doing is it's<font color="#E5E5E5"> coming in</font><font color="#CCCCCC"> taking the</font>

929
00:49:43,730 --> 00:49:48,350
message<font color="#E5E5E5"> checking if it's a WebSocket</font>

930
00:49:44,840 --> 00:49:50,210
frame tampering with it<font color="#E5E5E5"> and then just</font>

931
00:49:48,350 --> 00:49:53,120
forwarding the message on through the

932
00:49:50,210 --> 00:49:55,280
<font color="#CCCCCC">pipeline</font><font color="#E5E5E5"> that's what that context</font>

933
00:49:53,120 --> 00:49:58,819
<font color="#E5E5E5">channel read call is doing it's just</font>

934
00:49:55,280 --> 00:50:00,800
forwarding<font color="#E5E5E5"> that message</font><font color="#CCCCCC"> so you can</font>

935
00:49:58,820 --> 00:50:03,290
change<font color="#E5E5E5"> the</font><font color="#CCCCCC"> message you</font><font color="#E5E5E5"> can construct a</font>

936
00:50:00,800 --> 00:50:05,150
new<font color="#E5E5E5"> message you can drop the message you</font>

937
00:50:03,290 --> 00:50:06,890
can<font color="#E5E5E5"> do whatever you</font><font color="#CCCCCC"> like</font><font color="#E5E5E5"> if you don't</font>

938
00:50:05,150 --> 00:50:17,900
want to<font color="#E5E5E5"> send the message on just don't</font>

939
00:50:06,890 --> 00:50:20,210
call super<font color="#E5E5E5"> channel read and yeah that</font>

940
00:50:17,900 --> 00:50:28,310
takes<font color="#E5E5E5"> us down</font><font color="#CCCCCC"> to the end of</font><font color="#E5E5E5"> the HTTP</font>

941
00:50:20,210 --> 00:50:31,070
channels<font color="#E5E5E5"> the this one is</font><font color="#CCCCCC"> just</font><font color="#E5E5E5"> to deal</font>

942
00:50:28,310 --> 00:50:36,140
with<font color="#E5E5E5"> sort of unexpected</font><font color="#CCCCCC"> traffic you know</font>

943
00:50:31,070 --> 00:50:38,120
<font color="#E5E5E5">not</font><font color="#CCCCCC"> 4000 or not 80 or 443</font><font color="#E5E5E5"> that just</font>

944
00:50:36,140 --> 00:50:40,120
forwards it on<font color="#E5E5E5"> you could get an array of</font>

945
00:50:38,120 --> 00:50:42,890
<font color="#E5E5E5">bytes coming up in your channel handler</font>

946
00:50:40,120 --> 00:50:44,029
<font color="#CCCCCC">if you you know</font><font color="#E5E5E5"> if you want</font><font color="#CCCCCC"> to see</font>

947
00:50:42,890 --> 00:50:47,080
what's going<font color="#E5E5E5"> on but you don't</font>

948
00:50:44,030 --> 00:50:50,720
necessarily<font color="#CCCCCC"> want to to tamper with</font><font color="#E5E5E5"> it</font>

949
00:50:47,080 --> 00:50:53,590
and then on this<font color="#E5E5E5"> side we've got an</font><font color="#CCCCCC"> niño</font>

950
00:50:50,720 --> 00:50:59,299
Datagram<font color="#E5E5E5"> channel</font><font color="#CCCCCC"> NIOS java's new</font><font color="#E5E5E5"> i/o</font>

951
00:50:53,590 --> 00:51:05,390
<font color="#E5E5E5">telegrams UDP</font><font color="#CCCCCC"> it's</font><font color="#E5E5E5"> configuration it's</font>

952
00:50:59,300 --> 00:51:08,270
listening on localhost<font color="#CCCCCC"> 1 / 5 3 as</font><font color="#E5E5E5"> you</font>

953
00:51:05,390 --> 00:51:10,160
saw in the<font color="#CCCCCC"> demonstration</font><font color="#E5E5E5"> in this case we</font>

954
00:51:08,270 --> 00:51:13,280
don't have<font color="#E5E5E5"> socks in the pipeline</font><font color="#CCCCCC"> which</font>

955
00:51:10,160 --> 00:51:14,930
means that we<font color="#E5E5E5"> need to figure out where</font>

956
00:51:13,280 --> 00:51:17,660
we're<font color="#E5E5E5"> going to relay this connection on</font>

957
00:51:14,930 --> 00:51:20,060
<font color="#E5E5E5">to or any data that comes in so we're</font>

958
00:51:17,660 --> 00:51:26,170
using a<font color="#E5E5E5"> fixed target handler in this</font>

959
00:51:20,060 --> 00:51:28,400
case<font color="#E5E5E5"> you specify the handler name and</font>

960
00:51:26,170 --> 00:51:31,180
<font color="#CCCCCC">now let's actually</font><font color="#E5E5E5"> just uses reflection</font>

961
00:51:28,400 --> 00:51:33,950
<font color="#CCCCCC">to instantiate an instance of that class</font>

962
00:51:31,180 --> 00:51:38,089
<font color="#CCCCCC">with these parameters so we're passing</font>

963
00:51:33,950 --> 00:51:39,350
it a<font color="#E5E5E5"> 9 in socket address 88 53 it's</font>

964
00:51:38,090 --> 00:51:41,830
going to forward<font color="#CCCCCC"> it on to Google's DNS</font>

965
00:51:39,350 --> 00:51:41,830
server

966
00:51:43,280 --> 00:51:51,160
here we have a<font color="#E5E5E5"> script handler the script</font>

967
00:51:46,490 --> 00:51:54,919
handler just instantiates the<font color="#CCCCCC"> dns</font>

968
00:51:51,160 --> 00:51:58,129
decoder and<font color="#E5E5E5"> dns in response encoder so</font>

969
00:51:54,920 --> 00:52:02,420
decodes<font color="#CCCCCC"> DNS queries encodes DNS</font>

970
00:51:58,130 --> 00:52:04,910
responses then we have a in this case

971
00:52:02,420 --> 00:52:08,810
<font color="#E5E5E5">it's a Java class DNS</font><font color="#CCCCCC"> rewrite so it's</font>

972
00:52:04,910 --> 00:52:11,990
<font color="#E5E5E5">not a script I do find it easier to</font>

973
00:52:08,810 --> 00:52:13,490
<font color="#CCCCCC">develop the scripts</font><font color="#E5E5E5"> in Java because</font><font color="#CCCCCC"> you</font>

974
00:52:11,990 --> 00:52:14,870
get syntax highlighting<font color="#E5E5E5"> and</font><font color="#CCCCCC"> order</font>

975
00:52:13,490 --> 00:52:17,299
<font color="#E5E5E5">completion and all the blah blah blah</font><font color="#CCCCCC"> if</font>

976
00:52:14,870 --> 00:52:17,870
anybody would<font color="#CCCCCC"> like to contribute</font><font color="#E5E5E5"> in our</font>

977
00:52:17,300 --> 00:52:19,970
syntax

978
00:52:17,870 --> 00:52:24,380
area implementation that will facilitate

979
00:52:19,970 --> 00:52:27,230
development<font color="#E5E5E5"> in malat</font><font color="#CCCCCC"> I would love that</font>

980
00:52:24,380 --> 00:52:27,530
or I'll hopefully get to<font color="#E5E5E5"> it in due</font>

981
00:52:27,230 --> 00:52:30,290
course

982
00:52:27,530 --> 00:52:33,170
<font color="#E5E5E5">so the DNS rewrite simply modifies the</font>

983
00:52:30,290 --> 00:52:36,529
the<font color="#CCCCCC"> dnase packet</font><font color="#E5E5E5"> the</font><font color="#CCCCCC"> DNS</font><font color="#E5E5E5"> request if it</font>

984
00:52:33,170 --> 00:52:38,450
goes to google.com<font color="#E5E5E5"> changes it to wwvs</font>

985
00:52:36,530 --> 00:52:41,050
<font color="#E5E5E5">parse calm</font><font color="#CCCCCC"> and then when the response</font>

986
00:52:38,450 --> 00:52:45,649
comes<font color="#E5E5E5"> back</font><font color="#CCCCCC"> it replaces the original</font>

987
00:52:41,050 --> 00:52:47,270
<font color="#E5E5E5">question into that DNS packet so I don't</font>

988
00:52:45,650 --> 00:52:51,080
actually know<font color="#CCCCCC"> very much about the</font>

989
00:52:47,270 --> 00:52:53,870
structure of a DNS packet<font color="#E5E5E5"> my history is</font>

990
00:52:51,080 --> 00:52:57,740
in web proxies I know HTTP really really

991
00:52:53,870 --> 00:52:59,839
well<font color="#E5E5E5"> but again it's not so much but it</font>

992
00:52:57,740 --> 00:53:02,359
<font color="#E5E5E5">was relatively straightforward with the</font>

993
00:52:59,840 --> 00:53:05,540
documentation<font color="#CCCCCC"> of</font><font color="#E5E5E5"> the</font><font color="#CCCCCC"> DNS</font><font color="#E5E5E5"> codex and so on</font>

994
00:53:02,360 --> 00:53:07,940
that<font color="#CCCCCC"> Nate II created to figure out how</font>

995
00:53:05,540 --> 00:53:12,259
to modify<font color="#CCCCCC"> this packet in a way that it</font>

996
00:53:07,940 --> 00:53:13,700
didn't trigger any errors it may<font color="#E5E5E5"> not</font>

997
00:53:12,260 --> 00:53:15,560
have<font color="#CCCCCC"> been</font><font color="#E5E5E5"> quite the objective that</font><font color="#CCCCCC"> I</font>

998
00:53:13,700 --> 00:53:18,379
wanted I was trying my<font color="#E5E5E5"> original</font>

999
00:53:15,560 --> 00:53:21,799
objective was to change<font color="#E5E5E5"> the</font><font color="#CCCCCC"> request for</font>

1000
00:53:18,380 --> 00:53:23,900
<font color="#E5E5E5">google.com to be a cname</font><font color="#CCCCCC"> that you can</font>

1001
00:53:21,800 --> 00:53:28,510
then use<font color="#CCCCCC"> for</font><font color="#E5E5E5"> things like SSL strip and</font>

1002
00:53:23,900 --> 00:53:32,870
<font color="#CCCCCC">suchlike but I didn't quite achieve that</font>

1003
00:53:28,510 --> 00:53:35,780
and then that passes on<font color="#CCCCCC"> to a Datagram</font>

1004
00:53:32,870 --> 00:53:38,359
relay handler unfortunately at this

1005
00:53:35,780 --> 00:53:40,160
<font color="#E5E5E5">point</font><font color="#CCCCCC"> I haven't</font><font color="#E5E5E5"> quite got the link</font>

1006
00:53:38,360 --> 00:53:41,900
between the data<font color="#E5E5E5"> grab relay Handler and</font>

1007
00:53:40,160 --> 00:53:44,210
the user interface<font color="#CCCCCC"> setup so</font><font color="#E5E5E5"> you can't</font>

1008
00:53:41,900 --> 00:53:45,680
actually see those<font color="#E5E5E5"> UDP packets it's a</font>

1009
00:53:44,210 --> 00:53:47,570
relatively straightforward<font color="#E5E5E5"> thing to do</font>

1010
00:53:45,680 --> 00:53:49,910
it should<font color="#E5E5E5"> probably</font><font color="#CCCCCC"> be you know</font><font color="#E5E5E5"> a couple</font>

1011
00:53:47,570 --> 00:53:54,140
<font color="#E5E5E5">of hours more work just to to make that</font>

1012
00:53:49,910 --> 00:53:56,799
link up<font color="#CCCCCC"> I don't</font><font color="#E5E5E5"> think I am going to try</font>

1013
00:53:54,140 --> 00:53:59,200
<font color="#E5E5E5">and intercept UDP packets though</font>

1014
00:53:56,800 --> 00:54:01,210
given<font color="#CCCCCC"> that their connectionless</font><font color="#E5E5E5"> you're</font>

1015
00:53:59,200 --> 00:54:04,629
almost<font color="#CCCCCC"> guaranteed to</font><font color="#E5E5E5"> hit</font><font color="#CCCCCC"> timeouts almost</font>

1016
00:54:01,210 --> 00:54:07,360
immediately<font color="#E5E5E5"> so I think I'm</font><font color="#CCCCCC"> going to</font>

1017
00:54:04,630 --> 00:54:09,670
leave that<font color="#CCCCCC"> for</font><font color="#E5E5E5"> scripted handlers to</font>

1018
00:54:07,360 --> 00:54:11,920
<font color="#E5E5E5">tamper with those UDP packets and if</font>

1019
00:54:09,670 --> 00:54:13,750
somebody would<font color="#CCCCCC"> like to implement</font><font color="#E5E5E5"> that</font>

1020
00:54:11,920 --> 00:54:16,900
<font color="#E5E5E5">and then one last thing that's quite</font>

1021
00:54:13,750 --> 00:54:19,420
<font color="#E5E5E5">interesting</font><font color="#CCCCCC"> given that UDP is</font>

1022
00:54:16,900 --> 00:54:22,930
connectionless<font color="#CCCCCC"> when you have a UDP</font>

1023
00:54:19,420 --> 00:54:24,340
packet<font color="#E5E5E5"> coming in at some point</font><font color="#CCCCCC"> no what</font>

1024
00:54:22,930 --> 00:54:28,480
you need<font color="#E5E5E5"> to do in order</font><font color="#CCCCCC"> to send it out</font>

1025
00:54:24,340 --> 00:54:32,740
is associate the remote socket<font color="#CCCCCC"> address</font>

1026
00:54:28,480 --> 00:54:35,710
and IP that the packet came from with an

1027
00:54:32,740 --> 00:54:40,509
outbound connection<font color="#E5E5E5"> and then any</font>

1028
00:54:35,710 --> 00:54:42,400
incoming packets<font color="#E5E5E5"> from that channel can</font>

1029
00:54:40,510 --> 00:54:43,840
get copied<font color="#CCCCCC"> backwards and forwards</font><font color="#E5E5E5"> very</font>

1030
00:54:42,400 --> 00:54:45,550
similar<font color="#E5E5E5"> to</font><font color="#CCCCCC"> how a</font><font color="#E5E5E5"> circuit does it if</font>

1031
00:54:43,840 --> 00:54:49,840
you're<font color="#CCCCCC"> doing UDP forwarding it Forks</font><font color="#E5E5E5"> and</font>

1032
00:54:45,550 --> 00:54:51,940
<font color="#CCCCCC">execs a new</font><font color="#E5E5E5"> connection but what that</font>

1033
00:54:49,840 --> 00:54:53,380
<font color="#E5E5E5">does also</font><font color="#CCCCCC"> mean is that at the end of the</font>

1034
00:54:51,940 --> 00:54:57,580
day you<font color="#E5E5E5"> end up with a whole lot of these</font>

1035
00:54:53,380 --> 00:55:02,380
UDP listening sockets<font color="#E5E5E5"> waiting</font><font color="#CCCCCC"> for more</font>

1036
00:54:57,580 --> 00:55:04,690
packets<font color="#E5E5E5"> that may never come and so what</font>

1037
00:55:02,380 --> 00:55:07,150
this<font color="#CCCCCC"> does in idle State handler is it</font>

1038
00:55:04,690 --> 00:55:10,570
just implements a timeout<font color="#E5E5E5"> so it listens</font>

1039
00:55:07,150 --> 00:55:13,420
on<font color="#E5E5E5"> the channel if there are no messages</font>

1040
00:55:10,570 --> 00:55:16,720
passed<font color="#E5E5E5"> in either direction in this</font><font color="#CCCCCC"> case</font>

1041
00:55:13,420 --> 00:55:20,680
it's a<font color="#CCCCCC"> ten-second timeout</font><font color="#E5E5E5"> so 0 0 10 read</font>

1042
00:55:16,720 --> 00:55:21,939
<font color="#E5E5E5">timeout right timeout both timeout</font><font color="#CCCCCC"> in</font><font color="#E5E5E5"> 10</font>

1043
00:55:20,680 --> 00:55:23,980
seconds<font color="#E5E5E5"> it'll just tear down</font><font color="#CCCCCC"> that</font>

1044
00:55:21,940 --> 00:55:26,590
<font color="#E5E5E5">connection again so it sends a message</font>

1045
00:55:23,980 --> 00:55:30,190
<font color="#E5E5E5">which</font><font color="#CCCCCC"> is handled by the data gram relay</font>

1046
00:55:26,590 --> 00:55:32,500
handler to say<font color="#CCCCCC"> ok tear</font><font color="#E5E5E5"> that done so that</font>

1047
00:55:30,190 --> 00:55:37,570
gives you<font color="#CCCCCC"> the ability to sort of</font><font color="#E5E5E5"> clean</font>

1048
00:55:32,500 --> 00:55:38,920
<font color="#CCCCCC">up after yourself and just</font><font color="#E5E5E5"> keep the</font>

1049
00:55:37,570 --> 00:55:43,510
application<font color="#E5E5E5"> going without wasting</font>

1050
00:55:38,920 --> 00:55:46,950
resources<font color="#E5E5E5"> and that that is my</font>

1051
00:55:43,510 --> 00:55:52,020
presentation<font color="#E5E5E5"> if you</font><font color="#CCCCCC"> have any questions</font>

1052
00:55:46,950 --> 00:55:52,020
you<font color="#E5E5E5"> can go back to where I was</font>

1053
00:55:56,810 --> 00:56:02,779
today<font color="#E5E5E5"> if you</font><font color="#CCCCCC"> have any questions I'm</font>

1054
00:55:59,300 --> 00:56:07,460
happy to take<font color="#E5E5E5"> them otherwise you can get</font>

1055
00:56:02,780 --> 00:56:10,580
<font color="#E5E5E5">the code at on github it is public so</font>

1056
00:56:07,460 --> 00:56:12,260
you can pull that immediately<font color="#CCCCCC"> I will</font><font color="#E5E5E5"> be</font>

1057
00:56:10,580 --> 00:56:15,860
<font color="#E5E5E5">following</font><font color="#CCCCCC"> up with a blog post of</font><font color="#E5E5E5"> some</font>

1058
00:56:12,260 --> 00:56:21,010
more details and<font color="#E5E5E5"> some suggestions on how</font>

1059
00:56:15,860 --> 00:56:24,680
<font color="#E5E5E5">to construct these these pipelines but</font>

1060
00:56:21,010 --> 00:56:30,170
the<font color="#E5E5E5"> details are are there on on the</font>

1061
00:56:24,680 --> 00:56:32,060
github<font color="#E5E5E5"> questions no more questions are</font>

1062
00:56:30,170 --> 00:56:34,010
<font color="#E5E5E5">you if they have course I'm not going</font>

1063
00:56:32,060 --> 00:56:34,850
<font color="#E5E5E5">anyway so yeah please give them applause</font>

1064
00:56:34,010 --> 00:56:39,820
- thanks

1065
00:56:34,850 --> 00:56:39,819
[Applause]

