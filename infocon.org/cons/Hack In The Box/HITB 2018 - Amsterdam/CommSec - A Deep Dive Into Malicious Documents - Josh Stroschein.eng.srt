1
00:00:12,469 --> 00:00:17,250
my name is Josh straw<font color="#CCCCCC"> shine</font><font color="#E5E5E5"> malware</font><font color="#CCCCCC"> I</font>

2
00:00:15,000 --> 00:00:19,619
<font color="#CCCCCC">know</font><font color="#E5E5E5"> security researcher</font><font color="#CCCCCC"> I work for VD a</font>

3
00:00:17,250 --> 00:00:21,509
labs doing<font color="#E5E5E5"> malware</font><font color="#CCCCCC"> a knapsack</font><font color="#E5E5E5"> as well as</font>

4
00:00:19,619 --> 00:00:22,859
doing trainings so that's one<font color="#CCCCCC"> of</font><font color="#E5E5E5"> the</font>

5
00:00:21,510 --> 00:00:25,019
<font color="#E5E5E5">other reasons</font><font color="#CCCCCC"> that brought me here</font>

6
00:00:22,859 --> 00:00:26,400
also a course author for<font color="#CCCCCC"> pleura</font><font color="#E5E5E5"> site I</font>

7
00:00:25,019 --> 00:00:28,080
have my first course<font color="#E5E5E5"> coming live here</font>

8
00:00:26,400 --> 00:00:29,609
<font color="#E5E5E5">any</font><font color="#CCCCCC"> time so excited</font><font color="#E5E5E5"> about that and then</font>

9
00:00:28,080 --> 00:00:31,650
I teach<font color="#E5E5E5"> at Dakota State University</font><font color="#CCCCCC"> which</font>

10
00:00:29,609 --> 00:00:33,180
is<font color="#CCCCCC"> in the middle</font><font color="#E5E5E5"> of the United</font><font color="#CCCCCC"> States in</font>

11
00:00:31,650 --> 00:00:36,089
the middle of probably nowhere<font color="#E5E5E5"> too many</font>

12
00:00:33,180 --> 00:00:37,559
people<font color="#CCCCCC"> before we get into the actual</font>

13
00:00:36,090 --> 00:00:41,280
<font color="#E5E5E5">talk just</font><font color="#CCCCCC"> a couple</font><font color="#E5E5E5"> of things I wanted to</font>

14
00:00:37,559 --> 00:00:42,480
caveat<font color="#CCCCCC"> I'm not discussing any CD's of a</font>

15
00:00:41,280 --> 00:00:44,730
recent<font color="#E5E5E5"> fame there have been a couple</font>

16
00:00:42,480 --> 00:00:46,680
<font color="#CCCCCC">that have achieved</font><font color="#E5E5E5"> some</font><font color="#CCCCCC"> notoriety I'm</font>

17
00:00:44,730 --> 00:00:48,898
also not announcing<font color="#E5E5E5"> anything new or</font>

18
00:00:46,680 --> 00:00:50,820
undiscovered this is all really<font color="#CCCCCC"> just a</font>

19
00:00:48,899 --> 00:00:52,800
survey of techniques<font color="#E5E5E5"> that I</font><font color="#CCCCCC"> have seen</font>

20
00:00:50,820 --> 00:00:54,329
used throughout the<font color="#E5E5E5"> last year or so as</font>

21
00:00:52,800 --> 00:00:57,120
I've analyzed malicious documents<font color="#E5E5E5"> and</font>

22
00:00:54,329 --> 00:00:58,770
ones that<font color="#CCCCCC"> are just taking an advantage</font>

23
00:00:57,120 --> 00:01:01,349
of<font color="#E5E5E5"> really the core feature set that's</font>

24
00:00:58,770 --> 00:01:03,359
<font color="#CCCCCC">available in an office document probably</font>

25
00:01:01,350 --> 00:01:05,250
the biggest<font color="#E5E5E5"> thing that</font><font color="#CCCCCC"> will notice aside</font>

26
00:01:03,359 --> 00:01:07,110
<font color="#E5E5E5">from the technical techniques but the</font>

27
00:01:05,250 --> 00:01:09,360
the exploit itself is probably<font color="#E5E5E5"> the human</font>

28
00:01:07,110 --> 00:01:11,789
being<font color="#CCCCCC"> or</font><font color="#E5E5E5"> the user so social engineering</font>

29
00:01:09,360 --> 00:01:13,740
is definitely one of<font color="#E5E5E5"> the more effective</font>

30
00:01:11,790 --> 00:01:16,979
<font color="#E5E5E5">things that will see throughout some of</font>

31
00:01:13,740 --> 00:01:19,110
<font color="#E5E5E5">these</font><font color="#CCCCCC"> documents of course training</font><font color="#E5E5E5"> is</font>

32
00:01:16,979 --> 00:01:20,280
<font color="#E5E5E5">hard especially with non-technical users</font>

33
00:01:19,110 --> 00:01:22,140
to get<font color="#E5E5E5"> them to understand the</font>

34
00:01:20,280 --> 00:01:24,210
ramifications<font color="#E5E5E5"> and what can happen when</font>

35
00:01:22,140 --> 00:01:26,040
they open a document<font color="#CCCCCC"> just closing</font><font color="#E5E5E5"> in as</font>

36
00:01:24,210 --> 00:01:27,479
fast<font color="#E5E5E5"> as they can</font><font color="#CCCCCC"> typically isn't enough</font>

37
00:01:26,040 --> 00:01:27,720
<font color="#E5E5E5">because at that point it's really too</font>

38
00:01:27,479 --> 00:01:29,670
late

39
00:01:27,720 --> 00:01:30,990
<font color="#E5E5E5">everybody's busy</font><font color="#CCCCCC"> they don't always take</font>

40
00:01:29,670 --> 00:01:33,450
<font color="#E5E5E5">time</font><font color="#CCCCCC"> to stop</font><font color="#E5E5E5"> and</font><font color="#CCCCCC"> think</font><font color="#E5E5E5"> even very</font>

41
00:01:30,990 --> 00:01:37,140
technical security savvy users<font color="#E5E5E5"> can</font>

42
00:01:33,450 --> 00:01:39,090
succumb<font color="#E5E5E5"> to a very enticing document as</font>

43
00:01:37,140 --> 00:01:41,009
far as office goes it<font color="#CCCCCC"> is very powerful</font>

44
00:01:39,090 --> 00:01:43,110
<font color="#E5E5E5">we will take a look at some of</font><font color="#CCCCCC"> the</font>

45
00:01:41,009 --> 00:01:45,149
visual<font color="#CCCCCC"> basic or vb8 is what the the</font>

46
00:01:43,110 --> 00:01:47,640
language<font color="#E5E5E5"> that you write your macro code</font>

47
00:01:45,149 --> 00:01:51,360
<font color="#E5E5E5">in and it turns out it is</font><font color="#CCCCCC"> very powerful</font>

48
00:01:47,640 --> 00:01:52,710
<font color="#E5E5E5">I'm not a macro developer I don't spend</font>

49
00:01:51,360 --> 00:01:54,750
a<font color="#CCCCCC"> lot of</font><font color="#E5E5E5"> time in them except if it's a</font>

50
00:01:52,710 --> 00:01:56,219
malicious document and so I was<font color="#CCCCCC"> really</font>

51
00:01:54,750 --> 00:01:58,829
surprised at how<font color="#E5E5E5"> much</font><font color="#CCCCCC"> can actually get</font>

52
00:01:56,219 --> 00:02:00,360
done<font color="#CCCCCC"> their</font><font color="#E5E5E5"> macros work</font><font color="#CCCCCC"> they are</font><font color="#E5E5E5"> totally</font>

53
00:01:58,829 --> 00:02:02,130
legitimate<font color="#E5E5E5"> use there's no patch for a</font>

54
00:02:00,360 --> 00:02:04,110
feature because they are intended to<font color="#CCCCCC"> be</font>

55
00:02:02,130 --> 00:02:05,908
a core part<font color="#CCCCCC"> of</font><font color="#E5E5E5"> the office suite so day</font>

56
00:02:04,110 --> 00:02:08,489
in and day out people are<font color="#CCCCCC"> using them for</font>

57
00:02:05,909 --> 00:02:12,450
all<font color="#CCCCCC"> sorts</font><font color="#E5E5E5"> of very legitimate productive</font>

58
00:02:08,489 --> 00:02:13,800
<font color="#CCCCCC">business needs of course</font><font color="#E5E5E5"> if we</font><font color="#CCCCCC"> send out</font>

59
00:02:12,450 --> 00:02:15,450
a spam<font color="#CCCCCC"> campaign</font><font color="#E5E5E5"> they're all</font>

60
00:02:13,800 --> 00:02:17,040
we have to do<font color="#E5E5E5"> that we could send out ten</font>

61
00:02:15,450 --> 00:02:19,170
<font color="#E5E5E5">thousand emails as a malicious actor an</font>

62
00:02:17,040 --> 00:02:21,660
attacker<font color="#E5E5E5"> and all we need</font><font color="#CCCCCC"> to do is get</font>

63
00:02:19,170 --> 00:02:24,059
<font color="#CCCCCC">one user</font><font color="#E5E5E5"> and so that's really</font><font color="#CCCCCC"> the</font><font color="#E5E5E5"> goal</font>

64
00:02:21,660 --> 00:02:25,950
<font color="#CCCCCC">here is how can we</font><font color="#E5E5E5"> use an office</font>

65
00:02:24,060 --> 00:02:28,200
document as a delivery technique in

66
00:02:25,950 --> 00:02:30,089
order<font color="#CCCCCC"> to get that initial foothold</font><font color="#E5E5E5"> that</font>

67
00:02:28,200 --> 00:02:33,720
<font color="#E5E5E5">breach head into an organization to get</font>

68
00:02:30,090 --> 00:02:35,730
that one user to<font color="#E5E5E5"> execute</font><font color="#CCCCCC"> code like to</font>

69
00:02:33,720 --> 00:02:38,730
start<font color="#E5E5E5"> with a basic concept of operations</font>

70
00:02:35,730 --> 00:02:40,950
<font color="#E5E5E5">we have our office documents</font><font color="#CCCCCC"> a docx</font><font color="#E5E5E5"> a</font>

71
00:02:38,730 --> 00:02:42,540
<font color="#E5E5E5">spreadsheet a PowerPoint really</font><font color="#CCCCCC"> anything</font>

72
00:02:40,950 --> 00:02:45,780
in the suite that<font color="#CCCCCC"> allows</font><font color="#E5E5E5"> you to enable</font>

73
00:02:42,540 --> 00:02:48,480
macros<font color="#CCCCCC"> this brings us to</font><font color="#E5E5E5"> the next stage</font>

74
00:02:45,780 --> 00:02:49,920
which<font color="#CCCCCC"> is</font><font color="#E5E5E5"> the macro execution so the</font>

75
00:02:48,480 --> 00:02:52,709
document itself

76
00:02:49,920 --> 00:02:55,170
default settings<font color="#E5E5E5"> would require a user to</font>

77
00:02:52,710 --> 00:02:57,660
enable content<font color="#CCCCCC"> and and the verbage to</font>

78
00:02:55,170 --> 00:03:00,149
<font color="#E5E5E5">sometimes changes based off of the the</font>

79
00:02:57,660 --> 00:03:02,670
actual<font color="#E5E5E5"> version of</font><font color="#CCCCCC"> Office</font><font color="#E5E5E5"> this doesn't</font>

80
00:03:00,150 --> 00:03:05,010
<font color="#E5E5E5">mean</font><font color="#CCCCCC"> I'm not</font><font color="#E5E5E5"> trying</font><font color="#CCCCCC"> to imply that only</font>

81
00:03:02,670 --> 00:03:06,809
<font color="#E5E5E5">macro enabled documents are malicious</font>

82
00:03:05,010 --> 00:03:09,030
there are some techniques<font color="#E5E5E5"> as I alluded</font>

83
00:03:06,810 --> 00:03:11,880
to<font color="#CCCCCC"> earlier</font><font color="#E5E5E5"> with</font><font color="#CCCCCC"> some of the</font><font color="#E5E5E5"> the more</font>

84
00:03:09,030 --> 00:03:13,440
recent<font color="#E5E5E5"> CDs around the office suite or</font>

85
00:03:11,880 --> 00:03:15,390
<font color="#E5E5E5">attackers are trying to find ways</font><font color="#CCCCCC"> to get</font>

86
00:03:13,440 --> 00:03:17,579
code to execute scripts or otherwise

87
00:03:15,390 --> 00:03:20,040
<font color="#E5E5E5">without using macros although they still</font>

88
00:03:17,580 --> 00:03:22,680
<font color="#E5E5E5">requires some</font><font color="#CCCCCC"> degree of user interaction</font>

89
00:03:20,040 --> 00:03:24,900
after the macros<font color="#E5E5E5"> we usually have a</font>

90
00:03:22,680 --> 00:03:28,500
varying number<font color="#CCCCCC"> of stages</font><font color="#E5E5E5"> which brings</font>

91
00:03:24,900 --> 00:03:29,850
<font color="#E5E5E5">with it</font><font color="#CCCCCC"> PowerShell JavaScript shell code</font>

92
00:03:28,500 --> 00:03:31,920
executables<font color="#E5E5E5"> dll's</font>

93
00:03:29,850 --> 00:03:33,570
and and this<font color="#E5E5E5"> can vary</font><font color="#CCCCCC"> based off of</font><font color="#E5E5E5"> the</font>

94
00:03:31,920 --> 00:03:36,000
<font color="#CCCCCC">authors the campaign's what they're</font>

95
00:03:33,570 --> 00:03:38,519
trying to deliver<font color="#E5E5E5"> but</font><font color="#CCCCCC"> oftentimes at</font>

96
00:03:36,000 --> 00:03:40,110
<font color="#E5E5E5">least from my experience</font><font color="#CCCCCC"> we're not</font>

97
00:03:38,520 --> 00:03:42,540
getting the final<font color="#CCCCCC"> payload or</font><font color="#E5E5E5"> the final</font>

98
00:03:40,110 --> 00:03:44,670
malware here at this stage<font color="#CCCCCC"> we eventually</font>

99
00:03:42,540 --> 00:03:47,040
do get there the malware is<font color="#E5E5E5"> finally</font>

100
00:03:44,670 --> 00:03:48,720
dropped so these stages could come from

101
00:03:47,040 --> 00:03:51,600
<font color="#CCCCCC">within</font><font color="#E5E5E5"> the document itself these could</font>

102
00:03:48,720 --> 00:03:53,220
require<font color="#CCCCCC"> around or</font><font color="#E5E5E5"> two or</font><font color="#CCCCCC"> three of going</font>

103
00:03:51,600 --> 00:03:55,049
out to<font color="#CCCCCC"> a command-and-control</font><font color="#E5E5E5"> network to</font>

104
00:03:53,220 --> 00:03:56,489
get<font color="#E5E5E5"> that</font><font color="#CCCCCC"> additional content and then</font>

105
00:03:55,050 --> 00:03:58,580
we're dealing<font color="#CCCCCC"> with</font><font color="#E5E5E5"> post infection which</font>

106
00:03:56,489 --> 00:04:01,739
<font color="#CCCCCC">is not</font><font color="#E5E5E5"> something we're discussing today</font>

107
00:03:58,580 --> 00:04:03,810
<font color="#E5E5E5">so macros contain and contain an</font>

108
00:04:01,739 --> 00:04:06,300
embedded code<font color="#E5E5E5"> VBA</font><font color="#CCCCCC"> Visual Basic for</font>

109
00:04:03,810 --> 00:04:07,920
applications<font color="#E5E5E5"> again</font><font color="#CCCCCC"> well-supported it's</font>

110
00:04:06,300 --> 00:04:10,230
well documented by Microsoft you can

111
00:04:07,920 --> 00:04:13,079
find pretty<font color="#E5E5E5"> much everything on</font><font color="#CCCCCC"> MSDN the</font>

112
00:04:10,230 --> 00:04:14,399
<font color="#E5E5E5">Microsoft developer Network</font><font color="#CCCCCC"> something</font>

113
00:04:13,080 --> 00:04:16,080
that surprised me the<font color="#E5E5E5"> first time I saw</font>

114
00:04:14,400 --> 00:04:18,510
it is<font color="#E5E5E5"> that you can act</font><font color="#CCCCCC"> you can also</font>

115
00:04:16,079 --> 00:04:21,120
access the<font color="#E5E5E5"> windows API through your VBA</font>

116
00:04:18,510 --> 00:04:22,950
<font color="#CCCCCC">and</font><font color="#E5E5E5"> somebody</font><font color="#CCCCCC"> Akali put it in perspective</font>

117
00:04:21,120 --> 00:04:24,140
the<font color="#CCCCCC"> other</font><font color="#E5E5E5"> day or maybe it was a podcast</font>

118
00:04:22,950 --> 00:04:26,250
I don't remember where I heard this but

119
00:04:24,140 --> 00:04:27,300
<font color="#CCCCCC">Windows</font><font color="#E5E5E5"> was inherently written for</font>

120
00:04:26,250 --> 00:04:28,800
developers and

121
00:04:27,300 --> 00:04:30,539
I always keep that<font color="#E5E5E5"> in mind that it was</font>

122
00:04:28,800 --> 00:04:33,960
really developed<font color="#CCCCCC"> to be a relatively</font>

123
00:04:30,539 --> 00:04:35,520
powerful<font color="#E5E5E5"> operating system so this begs</font>

124
00:04:33,960 --> 00:04:38,039
the question if we're interested<font color="#E5E5E5"> in</font>

125
00:04:35,520 --> 00:04:40,530
inspecting macros how are we going<font color="#CCCCCC"> to be</font>

126
00:04:38,039 --> 00:04:42,659
<font color="#CCCCCC">able to do that there's two techniques</font>

127
00:04:40,530 --> 00:04:44,609
<font color="#E5E5E5">that I typically use the first is</font><font color="#CCCCCC"> Olli</font>

128
00:04:42,659 --> 00:04:45,810
dump and I figured this was as<font color="#CCCCCC"> close as</font>

129
00:04:44,610 --> 00:04:47,669
I was<font color="#E5E5E5"> going to get</font><font color="#CCCCCC"> to being able to</font>

130
00:04:45,810 --> 00:04:50,159
personally thank mr. Stevens for the

131
00:04:47,669 --> 00:04:52,409
work he's done with the<font color="#CCCCCC"> OOD</font><font color="#E5E5E5"> Olli dump</font>

132
00:04:50,159 --> 00:04:54,569
scripts knowing that he's here<font color="#CCCCCC"> so we'll</font>

133
00:04:52,409 --> 00:04:56,430
take a look<font color="#E5E5E5"> at those the second is the</font>

134
00:04:54,569 --> 00:04:57,629
office<font color="#CCCCCC"> IDE</font><font color="#E5E5E5"> the integrated development</font>

135
00:04:56,430 --> 00:04:59,250
environments<font color="#E5E5E5"> another thing I was</font>

136
00:04:57,629 --> 00:05:02,310
<font color="#E5E5E5">relatively surprised</font><font color="#CCCCCC"> of when I found out</font>

137
00:04:59,250 --> 00:05:03,960
is how extensive<font color="#E5E5E5"> this IDE is within the</font>

138
00:05:02,310 --> 00:05:06,210
office suite<font color="#E5E5E5"> and then of</font><font color="#CCCCCC"> course my</font>

139
00:05:03,960 --> 00:05:09,810
ability or<font color="#E5E5E5"> your ability to</font><font color="#CCCCCC"> use it during</font>

140
00:05:06,210 --> 00:05:12,750
<font color="#E5E5E5">analysis not</font><font color="#CCCCCC"> just for writing macros</font><font color="#E5E5E5"> so</font>

141
00:05:09,810 --> 00:05:14,729
let's start with<font color="#E5E5E5"> Olli dump if you the</font>

142
00:05:12,750 --> 00:05:17,490
most simplest use of<font color="#E5E5E5"> that script again</font>

143
00:05:14,729 --> 00:05:20,159
it's a Python<font color="#CCCCCC"> script</font><font color="#E5E5E5"> is to run</font><font color="#CCCCCC"> Olli dump</font>

144
00:05:17,490 --> 00:05:22,289
on your your your office document and

145
00:05:20,159 --> 00:05:25,169
what this will produce is more or<font color="#E5E5E5"> less a</font>

146
00:05:22,289 --> 00:05:26,969
table of<font color="#E5E5E5"> contents</font><font color="#CCCCCC"> we have basic</font>

147
00:05:25,169 --> 00:05:28,469
information<font color="#CCCCCC"> and index or a stream on the</font>

148
00:05:26,969 --> 00:05:31,500
<font color="#CCCCCC">left those</font><font color="#E5E5E5"> are numbered sequentially</font>

149
00:05:28,469 --> 00:05:34,259
starting at 1 then we have<font color="#E5E5E5"> indications</font>

150
00:05:31,500 --> 00:05:36,210
of what streams contain macros<font color="#E5E5E5"> upper and</font>

151
00:05:34,259 --> 00:05:38,520
<font color="#CCCCCC">lowercase M's the uppercase M's contain</font>

152
00:05:36,210 --> 00:05:40,380
natural code and the<font color="#CCCCCC"> M's just define a</font>

153
00:05:38,520 --> 00:05:42,299
module<font color="#E5E5E5"> and you'll see some correlations</font>

154
00:05:40,380 --> 00:05:44,969
<font color="#E5E5E5">here a little bit later on then you have</font>

155
00:05:42,300 --> 00:05:47,159
<font color="#CCCCCC">the size and finally you have the names</font>

156
00:05:44,969 --> 00:05:49,620
and<font color="#E5E5E5"> I imagine that everyone in here has</font>

157
00:05:47,159 --> 00:05:51,360
<font color="#CCCCCC">used cow keeper</font><font color="#E5E5E5"> as a name for</font><font color="#CCCCCC"> a class or</font>

158
00:05:49,620 --> 00:05:54,990
module<font color="#E5E5E5"> in their own development</font><font color="#CCCCCC"> at least</font>

159
00:05:51,360 --> 00:05:56,400
once in their career<font color="#CCCCCC"> we get down to some</font>

160
00:05:54,990 --> 00:05:58,680
additional<font color="#E5E5E5"> content here that I've</font>

161
00:05:56,400 --> 00:06:01,109
highlighted and these<font color="#E5E5E5"> actually took me a</font>

162
00:05:58,680 --> 00:06:02,460
little while to puzzle out we have the

163
00:06:01,110 --> 00:06:05,129
<font color="#E5E5E5">only thing I could see there at the end</font>

164
00:06:02,460 --> 00:06:07,620
was F and<font color="#E5E5E5"> O and these would consistently</font>

165
00:06:05,129 --> 00:06:09,719
show up in certain documents what it

166
00:06:07,620 --> 00:06:11,789
turns out they are<font color="#CCCCCC"> our user forms and</font>

167
00:06:09,719 --> 00:06:14,699
what<font color="#E5E5E5"> those user forms then are used for</font>

168
00:06:11,789 --> 00:06:15,990
is to<font color="#E5E5E5"> embed or hide additional content</font>

169
00:06:14,699 --> 00:06:18,000
so maybe next acute<font color="#E5E5E5"> Allah maybe some</font>

170
00:06:15,990 --> 00:06:21,779
shell code that the office<font color="#E5E5E5"> doc the</font>

171
00:06:18,000 --> 00:06:24,840
macros will eventually use here again

172
00:06:21,779 --> 00:06:28,139
<font color="#E5E5E5">example of very simple use of</font><font color="#CCCCCC"> Olli</font><font color="#E5E5E5"> dump</font>

173
00:06:24,840 --> 00:06:30,210
<font color="#E5E5E5">we have the tool the script itself we</font>

174
00:06:28,139 --> 00:06:32,009
have<font color="#E5E5E5"> our document</font><font color="#CCCCCC"> in</font><font color="#E5E5E5"> this</font><font color="#CCCCCC"> case</font><font color="#E5E5E5"> it's that</font>

175
00:06:30,210 --> 00:06:34,289
I believe the<font color="#CCCCCC"> sha-2 of that</font><font color="#E5E5E5"> document so</font>

176
00:06:32,009 --> 00:06:36,060
<font color="#CCCCCC">a rather lengthy name in</font><font color="#E5E5E5"> order to begin</font>

177
00:06:34,289 --> 00:06:38,460
inspecting macros we have to give it a

178
00:06:36,060 --> 00:06:40,469
stream<font color="#E5E5E5"> so you have the</font><font color="#CCCCCC"> dash S and then</font>

179
00:06:38,460 --> 00:06:41,190
the stream number<font color="#CCCCCC"> of the index and then</font>

180
00:06:40,469 --> 00:06:42,690
finally<font color="#E5E5E5"> dash</font>

181
00:06:41,190 --> 00:06:44,040
<font color="#CCCCCC">viii those streams are compressed within</font>

182
00:06:42,690 --> 00:06:45,930
<font color="#E5E5E5">the</font><font color="#CCCCCC"> document</font><font color="#E5E5E5"> so if you don't if you</font>

183
00:06:44,040 --> 00:06:47,610
forget<font color="#CCCCCC"> to decompress those you're not</font>

184
00:06:45,930 --> 00:06:50,040
<font color="#CCCCCC">going to be able to see that code and</font>

185
00:06:47,610 --> 00:06:51,780
plain ASCII<font color="#CCCCCC"> from here</font><font color="#E5E5E5"> you might just</font>

186
00:06:50,040 --> 00:06:54,390
redirect it to<font color="#CCCCCC"> a file that's</font><font color="#E5E5E5"> oftentimes</font>

187
00:06:51,780 --> 00:06:56,309
what I do<font color="#E5E5E5"> and now you're able</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> look at</font>

188
00:06:54,390 --> 00:06:58,640
the code<font color="#E5E5E5"> so opening it up in</font><font color="#CCCCCC"> your</font>

189
00:06:56,310 --> 00:07:01,200
<font color="#E5E5E5">favorite editor</font><font color="#CCCCCC"> and a way you can go</font>

190
00:06:58,640 --> 00:07:03,510
<font color="#CCCCCC">another</font><font color="#E5E5E5"> option is to enable the</font>

191
00:07:01,200 --> 00:07:05,370
developer tools in office and you go

192
00:07:03,510 --> 00:07:07,440
<font color="#E5E5E5">into the</font><font color="#CCCCCC"> options you'll be able</font><font color="#E5E5E5"> to add</font>

193
00:07:05,370 --> 00:07:09,990
that<font color="#E5E5E5"> to your upper ribbon and then</font><font color="#CCCCCC"> a new</font>

194
00:07:07,440 --> 00:07:11,880
tab<font color="#CCCCCC"> will show</font><font color="#E5E5E5"> up from this tab once</font>

195
00:07:09,990 --> 00:07:13,830
you've<font color="#E5E5E5"> opened this malicious document</font>

196
00:07:11,880 --> 00:07:15,450
then<font color="#E5E5E5"> you can select Visual Basic and</font>

197
00:07:13,830 --> 00:07:18,000
that will open up basically<font color="#E5E5E5"> the IDE you</font>

198
00:07:15,450 --> 00:07:21,659
<font color="#E5E5E5">have now the project view of this same</font>

199
00:07:18,000 --> 00:07:24,030
malicious<font color="#CCCCCC"> stock this is what it looks</font>

200
00:07:21,660 --> 00:07:25,830
like<font color="#E5E5E5"> very similar</font><font color="#CCCCCC"> to the that</font><font color="#E5E5E5"> table of</font>

201
00:07:24,030 --> 00:07:28,859
contents<font color="#E5E5E5"> view that we saw with Olli dump</font>

202
00:07:25,830 --> 00:07:31,169
<font color="#E5E5E5">name of the project name of</font><font color="#CCCCCC"> the streeams</font>

203
00:07:28,860 --> 00:07:33,240
or the modules<font color="#E5E5E5"> that's where the code is</font>

204
00:07:31,170 --> 00:07:36,110
the macro code is and then in this<font color="#CCCCCC"> case</font>

205
00:07:33,240 --> 00:07:39,360
<font color="#CCCCCC">you can see a user</font><font color="#E5E5E5"> form so this is a</font>

206
00:07:36,110 --> 00:07:41,460
legitimate malicious document<font color="#E5E5E5"> and as I</font>

207
00:07:39,360 --> 00:07:43,500
<font color="#CCCCCC">said with the Oh Ali dump you can see</font>

208
00:07:41,460 --> 00:07:46,169
that there was<font color="#CCCCCC"> a user form DF in the o</font>

209
00:07:43,500 --> 00:07:47,760
<font color="#CCCCCC">but</font><font color="#E5E5E5"> this one allows</font><font color="#CCCCCC"> you</font><font color="#E5E5E5"> to</font><font color="#CCCCCC"> actually open</font>

210
00:07:46,169 --> 00:07:49,320
<font color="#CCCCCC">that form up and</font><font color="#E5E5E5"> see what's on there now</font>

211
00:07:47,760 --> 00:07:51,599
<font color="#CCCCCC">I don't necessarily</font><font color="#E5E5E5"> always care about</font>

212
00:07:49,320 --> 00:07:53,730
<font color="#CCCCCC">doing that</font><font color="#E5E5E5"> I'm more interested in trying</font>

213
00:07:51,600 --> 00:07:55,410
<font color="#E5E5E5">to identify how that form is being used</font>

214
00:07:53,730 --> 00:07:56,700
<font color="#E5E5E5">and if it contains some and you'll</font>

215
00:07:55,410 --> 00:07:58,380
<font color="#E5E5E5">encrypt it or off you skate it's</font>

216
00:07:56,700 --> 00:08:00,599
something a script some shell code and

217
00:07:58,380 --> 00:08:02,550
executable<font color="#CCCCCC"> where at what point in the</font>

218
00:08:00,600 --> 00:08:05,880
macros does that get pulled out and<font color="#E5E5E5"> Diu</font>

219
00:08:02,550 --> 00:08:08,310
skated and decrypted another thing that

220
00:08:05,880 --> 00:08:10,290
the IDE will enable you to do is to

221
00:08:08,310 --> 00:08:11,730
allow you to<font color="#CCCCCC"> debug</font><font color="#E5E5E5"> and this can be very</font>

222
00:08:10,290 --> 00:08:14,490
<font color="#CCCCCC">helpful especially</font><font color="#E5E5E5"> when you deal with</font>

223
00:08:11,730 --> 00:08:16,020
<font color="#CCCCCC">off you scan which I'm pretty</font><font color="#E5E5E5"> sure every</font>

224
00:08:14,490 --> 00:08:17,550
malware author has to go through the

225
00:08:16,020 --> 00:08:19,109
basic<font color="#E5E5E5"> coffee station training so that</font>

226
00:08:17,550 --> 00:08:23,310
<font color="#CCCCCC">they</font><font color="#E5E5E5"> can use the same techniques and all</font>

227
00:08:19,110 --> 00:08:25,080
their documents<font color="#CCCCCC"> just like any I</font><font color="#E5E5E5"> ID once</font>

228
00:08:23,310 --> 00:08:27,210
you have your<font color="#E5E5E5"> script or your code loaded</font>

229
00:08:25,080 --> 00:08:29,430
then you can click in the margins<font color="#CCCCCC"> that</font>

230
00:08:27,210 --> 00:08:30,960
<font color="#CCCCCC">will indicate the breakpoint is set</font><font color="#E5E5E5"> and</font>

231
00:08:29,430 --> 00:08:33,750
let that red dot<font color="#E5E5E5"> and then highlighting</font>

232
00:08:30,960 --> 00:08:36,120
<font color="#E5E5E5">that rest of that line in red and from</font>

233
00:08:33,750 --> 00:08:37,320
there you just<font color="#E5E5E5"> click play or execute of</font>

234
00:08:36,120 --> 00:08:38,820
course you're dealing with malicious

235
00:08:37,320 --> 00:08:40,349
<font color="#CCCCCC">document</font><font color="#E5E5E5"> so you have to make sure</font><font color="#CCCCCC"> you're</font>

236
00:08:38,820 --> 00:08:42,839
<font color="#E5E5E5">in an appropriate</font><font color="#CCCCCC"> environment because</font>

237
00:08:40,349 --> 00:08:45,120
you're about<font color="#CCCCCC"> to execute</font><font color="#E5E5E5"> the code</font><font color="#CCCCCC"> one</font>

238
00:08:42,839 --> 00:08:46,680
<font color="#E5E5E5">other small caveat with this is that</font><font color="#CCCCCC"> you</font>

239
00:08:45,120 --> 00:08:49,500
<font color="#CCCCCC">can't</font><font color="#E5E5E5"> begin debugging until you've</font>

240
00:08:46,680 --> 00:08:51,569
already enabled<font color="#CCCCCC"> content</font><font color="#E5E5E5"> so I know some</font>

241
00:08:49,500 --> 00:08:53,310
workarounds and tricks to do that but

242
00:08:51,570 --> 00:08:53,950
the most straightforward route is you

243
00:08:53,310 --> 00:08:55,540
<font color="#E5E5E5">you let those</font>

244
00:08:53,950 --> 00:08:57,400
<font color="#CCCCCC">macros execute and then you can start</font>

245
00:08:55,540 --> 00:09:01,209
<font color="#CCCCCC">debugging them so it's</font><font color="#E5E5E5"> kind of a</font>

246
00:08:57,400 --> 00:09:02,920
disconnected process once you<font color="#E5E5E5"> begin</font>

247
00:09:01,210 --> 00:09:04,960
debugging assuming<font color="#E5E5E5"> that your breakpoint</font>

248
00:09:02,920 --> 00:09:07,060
is hit<font color="#E5E5E5"> you're now free</font><font color="#CCCCCC"> to do all the</font>

249
00:09:04,960 --> 00:09:09,880
normal<font color="#E5E5E5"> debug things</font><font color="#CCCCCC"> step in</font><font color="#E5E5E5"> step over</font>

250
00:09:07,060 --> 00:09:14,140
step out as well as to pause or stop

251
00:09:09,880 --> 00:09:15,910
execution<font color="#E5E5E5"> this is great</font><font color="#CCCCCC"> I'm inherently</font>

252
00:09:14,140 --> 00:09:17,350
lazy<font color="#E5E5E5"> and I don't want to</font><font color="#CCCCCC"> have to spend a</font>

253
00:09:15,910 --> 00:09:19,660
lot<font color="#E5E5E5"> of time tracing</font><font color="#CCCCCC"> through heavily</font><font color="#E5E5E5"> a</font>

254
00:09:17,350 --> 00:09:21,520
<font color="#E5E5E5">few skated code I've done enough of it</font>

255
00:09:19,660 --> 00:09:24,370
it's annoying<font color="#E5E5E5"> and time-consuming and can</font>

256
00:09:21,520 --> 00:09:26,110
become<font color="#E5E5E5"> very tedious</font><font color="#CCCCCC"> so as an example</font><font color="#E5E5E5"> if</font>

257
00:09:24,370 --> 00:09:28,510
I want<font color="#E5E5E5"> to see the argument that's</font><font color="#CCCCCC"> going</font>

258
00:09:26,110 --> 00:09:30,130
<font color="#CCCCCC">to be</font><font color="#E5E5E5"> passed to this exact query</font>

259
00:09:28,510 --> 00:09:31,600
function<font color="#E5E5E5"> you know instead of trying</font><font color="#CCCCCC"> to</font>

260
00:09:30,130 --> 00:09:33,820
<font color="#E5E5E5">trace through all these poorly named</font>

261
00:09:31,600 --> 00:09:35,620
<font color="#CCCCCC">variables instead what I'll do is just</font>

262
00:09:33,820 --> 00:09:38,110
set a breakpoint<font color="#CCCCCC"> run through the macros</font>

263
00:09:35,620 --> 00:09:40,090
<font color="#E5E5E5">add watches</font><font color="#CCCCCC"> onto</font><font color="#E5E5E5"> those three variables</font>

264
00:09:38,110 --> 00:09:41,830
<font color="#E5E5E5">and then see the</font><font color="#CCCCCC"> results down</font><font color="#E5E5E5"> below and</font>

265
00:09:40,090 --> 00:09:43,810
now I can clearly<font color="#E5E5E5"> see that it's trying</font>

266
00:09:41,830 --> 00:09:47,890
to<font color="#E5E5E5"> select the</font><font color="#CCCCCC"> discs on whatever system</font>

267
00:09:43,810 --> 00:09:50,619
<font color="#E5E5E5">it's running on it happens that you'll</font>

268
00:09:47,890 --> 00:09:52,840
encounter passwords and I suppose<font color="#CCCCCC"> that</font>

269
00:09:50,620 --> 00:09:55,210
these may add some sense of<font color="#CCCCCC"> legitimacy</font>

270
00:09:52,840 --> 00:09:57,040
<font color="#E5E5E5">based off of the campaign</font><font color="#CCCCCC"> to maybe that</font>

271
00:09:55,210 --> 00:09:59,050
that end user the victim that they're

272
00:09:57,040 --> 00:10:00,939
targeting<font color="#CCCCCC"> but</font><font color="#E5E5E5"> it also can complicate</font>

273
00:09:59,050 --> 00:10:02,410
analysis and that if you don't<font color="#E5E5E5"> have the</font>

274
00:10:00,940 --> 00:10:04,150
password<font color="#CCCCCC"> you're not going to be able</font><font color="#E5E5E5"> to</font>

275
00:10:02,410 --> 00:10:06,760
pull those macros out of this document

276
00:10:04,150 --> 00:10:08,890
<font color="#CCCCCC">so you'll have to resort to you know</font>

277
00:10:06,760 --> 00:10:12,010
analyzing<font color="#CCCCCC"> its behavior without</font><font color="#E5E5E5"> seeing</font>

278
00:10:08,890 --> 00:10:13,300
the macros<font color="#E5E5E5"> again this talk assumes that</font>

279
00:10:12,010 --> 00:10:15,160
<font color="#E5E5E5">you want to get in and see the macros</font>

280
00:10:13,300 --> 00:10:16,540
I'm not proposing<font color="#E5E5E5"> that this is the most</font>

281
00:10:15,160 --> 00:10:18,550
effective<font color="#CCCCCC"> way sometimes the easiest</font>

282
00:10:16,540 --> 00:10:19,839
thing to do<font color="#E5E5E5"> is put it in a sandbox let</font>

283
00:10:18,550 --> 00:10:22,540
it run and<font color="#E5E5E5"> then just collect the</font>

284
00:10:19,840 --> 00:10:24,550
artifacts<font color="#CCCCCC"> but</font><font color="#E5E5E5"> with that password some</font>

285
00:10:22,540 --> 00:10:26,439
older<font color="#CCCCCC"> versions</font><font color="#E5E5E5"> of office you could</font>

286
00:10:24,550 --> 00:10:28,750
actually find<font color="#CCCCCC"> open up in a hex editor</font>

287
00:10:26,440 --> 00:10:30,760
find<font color="#E5E5E5"> the certain section and say</font>

288
00:10:28,750 --> 00:10:32,950
basically<font color="#E5E5E5"> disable it</font><font color="#CCCCCC"> I don't</font><font color="#E5E5E5"> remember</font>

289
00:10:30,760 --> 00:10:34,900
all of<font color="#E5E5E5"> the steps off hand but</font><font color="#CCCCCC"> with newer</font>

290
00:10:32,950 --> 00:10:36,580
versions<font color="#CCCCCC"> I've had</font><font color="#E5E5E5"> more trouble with that</font>

291
00:10:34,900 --> 00:10:37,990
<font color="#E5E5E5">the other thing that this can complicate</font>

292
00:10:36,580 --> 00:10:41,050
of course is if you throw<font color="#E5E5E5"> this in a</font>

293
00:10:37,990 --> 00:10:42,310
sandbox<font color="#CCCCCC"> and you are</font><font color="#E5E5E5"> not able</font><font color="#CCCCCC"> to then you</font>

294
00:10:41,050 --> 00:10:44,229
<font color="#E5E5E5">know it's an automated sandbox you're</font>

295
00:10:42,310 --> 00:10:46,060
not able<font color="#CCCCCC"> to feed the password so the</font><font color="#E5E5E5"> doc</font>

296
00:10:44,230 --> 00:10:48,310
will open it'll stay the password prop

297
00:10:46,060 --> 00:10:49,569
will be there waiting for that input and

298
00:10:48,310 --> 00:10:52,030
<font color="#E5E5E5">it'll</font><font color="#CCCCCC"> ever come</font><font color="#E5E5E5"> you'll never get any</font>

299
00:10:49,570 --> 00:10:56,140
results and if you don't catch<font color="#CCCCCC"> that</font><font color="#E5E5E5"> you</font>

300
00:10:52,030 --> 00:10:57,910
might not think<font color="#E5E5E5"> it's</font><font color="#CCCCCC"> malicious as we</font>

301
00:10:56,140 --> 00:10:59,740
started off<font color="#CCCCCC"> the talk social engineering</font>

302
00:10:57,910 --> 00:11:01,719
of bounds<font color="#E5E5E5"> it seems to me the most</font>

303
00:10:59,740 --> 00:11:04,810
<font color="#E5E5E5">prevalent method for social</font><font color="#CCCCCC"> engineering</font>

304
00:11:01,720 --> 00:11:07,720
is<font color="#CCCCCC"> to use a kind of a</font><font color="#E5E5E5"> message such as</font>

305
00:11:04,810 --> 00:11:08,920
<font color="#E5E5E5">this that</font><font color="#CCCCCC"> is</font><font color="#E5E5E5"> that this version</font>

306
00:11:07,720 --> 00:11:10,810
that<font color="#CCCCCC"> you've</font><font color="#E5E5E5"> just opened</font><font color="#CCCCCC"> this office</font>

307
00:11:08,920 --> 00:11:12,430
<font color="#E5E5E5">document with is incompatible with the</font>

308
00:11:10,810 --> 00:11:14,768
version it<font color="#E5E5E5"> was created so</font><font color="#CCCCCC"> you need to</font>

309
00:11:12,430 --> 00:11:17,410
enable content<font color="#CCCCCC"> in order</font><font color="#E5E5E5"> to see what's</font>

310
00:11:14,769 --> 00:11:21,550
really<font color="#E5E5E5"> here</font><font color="#CCCCCC"> the goal</font><font color="#E5E5E5"> of course is to</font>

311
00:11:17,410 --> 00:11:24,519
enable macros<font color="#E5E5E5"> here's an example you know</font>

312
00:11:21,550 --> 00:11:26,170
relatively poorly worded<font color="#CCCCCC"> but the message</font>

313
00:11:24,519 --> 00:11:28,839
<font color="#CCCCCC">that contained as an attachment the</font>

314
00:11:26,170 --> 00:11:30,729
document as well<font color="#E5E5E5"> as</font><font color="#CCCCCC"> the</font><font color="#E5E5E5"> password</font><font color="#CCCCCC"> so this</font>

315
00:11:28,839 --> 00:11:32,410
one<font color="#E5E5E5"> again relatively simple password but</font>

316
00:11:30,730 --> 00:11:33,850
<font color="#E5E5E5">they're they're trying</font><font color="#CCCCCC"> to use that</font><font color="#E5E5E5"> as a</font>

317
00:11:32,410 --> 00:11:35,620
way to add a little<font color="#E5E5E5"> bit more legitimacy</font>

318
00:11:33,850 --> 00:11:39,100
<font color="#E5E5E5">to the message that</font><font color="#CCCCCC"> they're that they've</font>

319
00:11:35,620 --> 00:11:41,230
sent<font color="#E5E5E5"> to that potential victim</font><font color="#CCCCCC"> this has</font>

320
00:11:39,100 --> 00:11:43,329
been one of<font color="#E5E5E5"> my more favorite as far as</font>

321
00:11:41,230 --> 00:11:45,730
messages goes<font color="#E5E5E5"> to social engineering</font><font color="#CCCCCC"> this</font>

322
00:11:43,329 --> 00:11:48,849
one was was a relatively well<font color="#E5E5E5"> formatted</font>

323
00:11:45,730 --> 00:11:51,759
<font color="#CCCCCC">well structured HTML you</font><font color="#E5E5E5"> know HTML email</font>

324
00:11:48,850 --> 00:11:54,040
that had all of the right logos<font color="#E5E5E5"> very</font>

325
00:11:51,759 --> 00:11:56,319
nicely done<font color="#CCCCCC"> the attachment was</font><font color="#E5E5E5"> the</font>

326
00:11:54,040 --> 00:11:58,180
office<font color="#CCCCCC"> stock I guess you could</font><font color="#E5E5E5"> say one</font>

327
00:11:56,319 --> 00:12:00,490
of the first flaws is that<font color="#E5E5E5"> this is</font>

328
00:11:58,180 --> 00:12:02,589
supposedly tracking information<font color="#CCCCCC"> so UPS</font>

329
00:12:00,490 --> 00:12:04,269
has missed you at your door<font color="#E5E5E5"> and they're</font>

330
00:12:02,589 --> 00:12:07,480
now sending this tracking<font color="#CCCCCC"> information to</font>

331
00:12:04,269 --> 00:12:08,889
you via an office document<font color="#CCCCCC"> once you</font><font color="#E5E5E5"> open</font>

332
00:12:07,480 --> 00:12:10,839
<font color="#CCCCCC">that document</font><font color="#E5E5E5"> you'll see that it has</font>

333
00:12:08,889 --> 00:12:12,910
<font color="#E5E5E5">been protected or encrypted for for your</font>

334
00:12:10,839 --> 00:12:19,089
benefit<font color="#E5E5E5"> in order to see this you have to</font>

335
00:12:12,910 --> 00:12:21,670
enable content<font color="#E5E5E5"> so now we can get to the</font>

336
00:12:19,089 --> 00:12:23,500
use<font color="#CCCCCC"> of forms</font><font color="#E5E5E5"> and this is a slightly</font>

337
00:12:21,670 --> 00:12:26,139
different document that we were<font color="#E5E5E5"> looking</font>

338
00:12:23,500 --> 00:12:28,149
at<font color="#CCCCCC"> earlier you can again notice in the</font>

339
00:12:26,139 --> 00:12:30,970
streams or<font color="#E5E5E5"> the index 14 and 15 that we</font>

340
00:12:28,149 --> 00:12:33,790
have a user form<font color="#E5E5E5"> F</font><font color="#CCCCCC"> and 0 if you look at</font>

341
00:12:30,970 --> 00:12:36,189
the third column<font color="#E5E5E5"> for stream 15 it has</font><font color="#CCCCCC"> a</font>

342
00:12:33,790 --> 00:12:38,259
relatively<font color="#E5E5E5"> large size</font><font color="#CCCCCC"> which is kind of</font>

343
00:12:36,189 --> 00:12:42,250
odd<font color="#CCCCCC"> having looked at enough</font><font color="#E5E5E5"> these</font>

344
00:12:38,259 --> 00:12:44,110
documents<font color="#E5E5E5"> that stood out if you open</font>

345
00:12:42,250 --> 00:12:46,569
this up in the IDE then you'll be able

346
00:12:44,110 --> 00:12:48,939
<font color="#E5E5E5">to look at that user form and oftentimes</font>

347
00:12:46,569 --> 00:12:50,649
I find that those user forms the objects

348
00:12:48,939 --> 00:12:53,459
they place on the user forms to embed

349
00:12:50,649 --> 00:12:56,139
that content are pushed way off screen

350
00:12:53,459 --> 00:12:57,790
<font color="#CCCCCC">so this one though you could expand a</font>

351
00:12:56,139 --> 00:13:00,250
little<font color="#E5E5E5"> bit and you might find your</font>

352
00:12:57,790 --> 00:13:03,519
<font color="#E5E5E5">content</font><font color="#CCCCCC"> here</font><font color="#E5E5E5"> you might</font><font color="#CCCCCC"> be able to</font>

353
00:13:00,250 --> 00:13:07,000
<font color="#E5E5E5">recognize</font><font color="#CCCCCC"> what appears to be a PE file</font>

354
00:13:03,519 --> 00:13:10,059
or DLL a PE file nonetheless with the

355
00:13:07,000 --> 00:13:11,889
<font color="#CCCCCC">magic numbers 45 a although it is</font><font color="#E5E5E5"> still</font>

356
00:13:10,059 --> 00:13:14,800
slightly<font color="#E5E5E5"> off you've skated</font><font color="#CCCCCC"> and that the</font>

357
00:13:11,889 --> 00:13:16,089
<font color="#CCCCCC">bite values that you see right now we</font>

358
00:13:14,800 --> 00:13:17,829
would<font color="#CCCCCC"> normally</font><font color="#E5E5E5"> see those as</font><font color="#CCCCCC"> binary</font>

359
00:13:16,089 --> 00:13:19,509
values and so they<font color="#CCCCCC"> just took</font><font color="#E5E5E5"> that binary</font>

360
00:13:17,829 --> 00:13:20,769
<font color="#CCCCCC">value of the original PE and then</font>

361
00:13:19,509 --> 00:13:21,400
converted it to ASCII

362
00:13:20,769 --> 00:13:23,410
so the

363
00:13:21,400 --> 00:13:24,819
job of the macros that<font color="#CCCCCC"> I guess allowed</font>

364
00:13:23,410 --> 00:13:27,430
them to embed it into this<font color="#E5E5E5"> content and</font>

365
00:13:24,820 --> 00:13:29,440
also<font color="#E5E5E5"> avoid scanners</font><font color="#CCCCCC"> so</font><font color="#E5E5E5"> that the job of</font>

366
00:13:27,430 --> 00:13:30,819
<font color="#CCCCCC">the</font><font color="#E5E5E5"> macros is to then</font><font color="#CCCCCC"> reverse that to</font>

367
00:13:29,440 --> 00:13:32,800
take each one<font color="#CCCCCC"> of these ASCII characters</font>

368
00:13:30,820 --> 00:13:35,640
<font color="#CCCCCC">write it back as its</font><font color="#E5E5E5"> original binary</font>

369
00:13:32,800 --> 00:13:37,990
value and then<font color="#E5E5E5"> it can execute the file</font>

370
00:13:35,640 --> 00:13:40,210
another area that<font color="#E5E5E5"> stumped me up for a</font>

371
00:13:37,990 --> 00:13:42,580
<font color="#E5E5E5">little while</font><font color="#CCCCCC"> was trying</font><font color="#E5E5E5"> to</font><font color="#CCCCCC"> identify</font>

372
00:13:40,210 --> 00:13:45,340
where these<font color="#CCCCCC"> forum objects are actually</font>

373
00:13:42,580 --> 00:13:46,960
<font color="#E5E5E5">used</font><font color="#CCCCCC"> once you get into</font><font color="#E5E5E5"> the IDE</font><font color="#CCCCCC"> you can</font>

374
00:13:45,340 --> 00:13:49,810
identify those so you could<font color="#E5E5E5"> select this</font>

375
00:13:46,960 --> 00:13:52,150
<font color="#E5E5E5">text box and</font><font color="#CCCCCC"> then in the properties</font>

376
00:13:49,810 --> 00:13:55,359
dialogues you'll see the name transducer

377
00:13:52,150 --> 00:13:58,000
<font color="#E5E5E5">so now in the macros</font><font color="#CCCCCC"> you'll see the name</font>

378
00:13:55,360 --> 00:14:00,040
of<font color="#CCCCCC"> this</font><font color="#E5E5E5"> forum and then you'll see dot</font>

379
00:13:58,000 --> 00:14:02,590
and then that<font color="#CCCCCC"> object so the forum dot</font>

380
00:14:00,040 --> 00:14:04,599
transducer<font color="#CCCCCC"> but again I didn't</font><font color="#E5E5E5"> find any</font>

381
00:14:02,590 --> 00:14:06,520
<font color="#E5E5E5">reference to that until I was able to</font>

382
00:14:04,600 --> 00:14:08,410
start to piece together<font color="#E5E5E5"> that the</font><font color="#CCCCCC"> forums</font>

383
00:14:06,520 --> 00:14:10,090
<font color="#E5E5E5">were being used so then once you</font>

384
00:14:08,410 --> 00:14:12,760
identify those form elements again you

385
00:14:10,090 --> 00:14:14,170
can you can track<font color="#CCCCCC"> trace</font><font color="#E5E5E5"> and track the</font>

386
00:14:12,760 --> 00:14:16,740
code that is now hidden<font color="#E5E5E5"> or embedded</font>

387
00:14:14,170 --> 00:14:16,740
inside of<font color="#CCCCCC"> them</font>

388
00:14:18,690 --> 00:14:24,610
you can also extract<font color="#E5E5E5"> that content with</font>

389
00:14:21,130 --> 00:14:25,990
<font color="#E5E5E5">Olli dump so using the same the same</font>

390
00:14:24,610 --> 00:14:28,690
syntax<font color="#CCCCCC"> that we saw before</font>

391
00:14:25,990 --> 00:14:31,510
you just don't decompress so<font color="#E5E5E5"> Olli dump</font>

392
00:14:28,690 --> 00:14:33,820
<font color="#E5E5E5">the stream</font><font color="#CCCCCC"> number minus the dash</font><font color="#E5E5E5"> V and</font>

393
00:14:31,510 --> 00:14:35,890
then the<font color="#CCCCCC"> name of the</font><font color="#E5E5E5"> document</font><font color="#CCCCCC"> and here</font>

394
00:14:33,820 --> 00:14:37,570
you'll have<font color="#E5E5E5"> the raw</font><font color="#CCCCCC"> content</font><font color="#E5E5E5"> so if you</font>

395
00:14:35,890 --> 00:14:39,970
knew that that<font color="#E5E5E5"> wasn't in an obfuscated</font>

396
00:14:37,570 --> 00:14:40,960
form or you knew how to do<font color="#E5E5E5"> a scape that</font>

397
00:14:39,970 --> 00:14:42,670
because you were interested<font color="#E5E5E5"> in looking</font>

398
00:14:40,960 --> 00:14:45,850
<font color="#CCCCCC">at whatever</font><font color="#E5E5E5"> that</font><font color="#CCCCCC"> next round</font><font color="#E5E5E5"> of code was</font>

399
00:14:42,670 --> 00:14:47,770
you could extract that with Olli dump

400
00:14:45,850 --> 00:14:49,630
and<font color="#E5E5E5"> then start working with it</font><font color="#CCCCCC"> in</font><font color="#E5E5E5"> this</font>

401
00:14:47,770 --> 00:14:51,370
case I had a little<font color="#CCCCCC"> Python script so</font>

402
00:14:49,630 --> 00:14:53,920
<font color="#E5E5E5">that would go through</font><font color="#CCCCCC"> and do</font><font color="#E5E5E5"> that that</font>

403
00:14:51,370 --> 00:14:55,390
<font color="#CCCCCC">byte to back to binary</font><font color="#E5E5E5"> conversion so I</font>

404
00:14:53,920 --> 00:14:57,550
was<font color="#CCCCCC"> able to</font><font color="#E5E5E5"> extract this content with</font>

405
00:14:55,390 --> 00:14:59,050
Olli dump run that<font color="#CCCCCC"> Python script on and</font>

406
00:14:57,550 --> 00:15:01,209
have the original executable and<font color="#E5E5E5"> analyze</font>

407
00:14:59,050 --> 00:15:02,650
it<font color="#CCCCCC"> I did that more of an exercise</font><font color="#E5E5E5"> than</font>

408
00:15:01,210 --> 00:15:04,210
anything because<font color="#E5E5E5"> again you could also</font>

409
00:15:02,650 --> 00:15:06,189
have just<font color="#E5E5E5"> ran that in a sandbox</font>

410
00:15:04,210 --> 00:15:07,240
environment<font color="#E5E5E5"> it would drop the EXCI for</font>

411
00:15:06,190 --> 00:15:09,870
you and then you<font color="#E5E5E5"> could grab it</font><font color="#CCCCCC"> and</font>

412
00:15:07,240 --> 00:15:13,830
<font color="#E5E5E5">analyze it from there</font>

413
00:15:09,870 --> 00:15:16,120
<font color="#E5E5E5">efficient lots of obfuscation</font><font color="#CCCCCC"> not</font>

414
00:15:13,830 --> 00:15:18,130
necessarily the most effective but

415
00:15:16,120 --> 00:15:19,960
effective<font color="#E5E5E5"> enough</font><font color="#CCCCCC"> to slow</font><font color="#E5E5E5"> down if you're</font>

416
00:15:18,130 --> 00:15:23,560
trying to<font color="#CCCCCC"> perform any sort</font><font color="#E5E5E5"> of manual or</font>

417
00:15:19,960 --> 00:15:26,170
visual<font color="#E5E5E5"> analysis of this code as with</font>

418
00:15:23,560 --> 00:15:28,630
<font color="#E5E5E5">most or a lot</font><font color="#CCCCCC"> of interpreted languages</font>

419
00:15:26,170 --> 00:15:30,849
what you're trying<font color="#E5E5E5"> to hide you have only</font>

420
00:15:28,630 --> 00:15:32,740
<font color="#E5E5E5">a you know a fairly limited set of</font>

421
00:15:30,850 --> 00:15:34,870
<font color="#E5E5E5">options because at the end of the day if</font>

422
00:15:32,740 --> 00:15:37,870
you're<font color="#E5E5E5"> trying</font><font color="#CCCCCC"> to hide this</font><font color="#E5E5E5"> this</font>

423
00:15:34,870 --> 00:15:40,540
<font color="#E5E5E5">eventually it has to be valid syntax</font><font color="#CCCCCC"> so</font>

424
00:15:37,870 --> 00:15:42,160
you'll see a lot of strange naming

425
00:15:40,540 --> 00:15:43,750
whether that's through<font color="#E5E5E5"> the functions of</font>

426
00:15:42,160 --> 00:15:46,360
the variables which just really makes it

427
00:15:43,750 --> 00:15:47,710
harder to<font color="#E5E5E5"> trace those particular objects</font>

428
00:15:46,360 --> 00:15:49,780
to trace the functionality through the

429
00:15:47,710 --> 00:15:52,090
scripts<font color="#CCCCCC"> you'll see a lot of</font><font color="#E5E5E5"> strain</font>

430
00:15:49,780 --> 00:15:54,370
concatenation and string obfuscation<font color="#CCCCCC"> so</font>

431
00:15:52,090 --> 00:15:56,830
and manipulation so later<font color="#E5E5E5"> on</font>

432
00:15:54,370 --> 00:15:58,690
concatenation<font color="#CCCCCC"> so breakup let's say you</font>

433
00:15:56,830 --> 00:15:59,890
want<font color="#E5E5E5"> to execute a PowerShell script you</font>

434
00:15:58,690 --> 00:16:01,030
break up all<font color="#CCCCCC"> the components throughout</font>

435
00:15:59,890 --> 00:16:02,560
<font color="#E5E5E5">different variables maybe</font><font color="#CCCCCC"> throughout</font>

436
00:16:01,030 --> 00:16:04,600
<font color="#E5E5E5">different modules then when you're ready</font>

437
00:16:02,560 --> 00:16:07,000
<font color="#CCCCCC">to execute it you can catenate those all</font>

438
00:16:04,600 --> 00:16:08,500
back<font color="#E5E5E5"> together</font><font color="#CCCCCC"> so you find that</font><font color="#E5E5E5"> point and</font>

439
00:16:07,000 --> 00:16:11,230
<font color="#E5E5E5">hopefully then you've been able to</font>

440
00:16:08,500 --> 00:16:13,750
defeat<font color="#CCCCCC"> that off you station so reversing</font>

441
00:16:11,230 --> 00:16:16,830
strings doing substring stuff that's all

442
00:16:13,750 --> 00:16:19,270
a big part<font color="#CCCCCC"> of it</font><font color="#E5E5E5"> you may find a lot of</font>

443
00:16:16,830 --> 00:16:21,190
<font color="#E5E5E5">nonsensical or at least nonsensical</font><font color="#CCCCCC"> in</font>

444
00:16:19,270 --> 00:16:23,980
the terms of the overall<font color="#E5E5E5"> objectives for</font>

445
00:16:21,190 --> 00:16:26,290
the behavior<font color="#CCCCCC"> of the code</font><font color="#E5E5E5"> instructions so</font>

446
00:16:23,980 --> 00:16:28,420
here we have just<font color="#CCCCCC"> some</font><font color="#E5E5E5"> arithmetic</font><font color="#CCCCCC"> rather</font>

447
00:16:26,290 --> 00:16:30,400
verbose arithmetic as well<font color="#CCCCCC"> but none of</font>

448
00:16:28,420 --> 00:16:31,540
these variables<font color="#E5E5E5"> are used throughout the</font>

449
00:16:30,400 --> 00:16:33,100
rest<font color="#CCCCCC"> of the script</font><font color="#E5E5E5"> so they're just</font>

450
00:16:31,540 --> 00:16:35,140
<font color="#CCCCCC">there's</font><font color="#E5E5E5"> filler to</font><font color="#CCCCCC"> make you waste your</font>

451
00:16:33,100 --> 00:16:36,540
time having to inspect<font color="#E5E5E5"> those and see if</font>

452
00:16:35,140 --> 00:16:39,640
there's any sort of irrelevance there

453
00:16:36,540 --> 00:16:42,400
you'll get junk control structures

454
00:16:39,640 --> 00:16:45,340
switches and ifs and else ifs<font color="#E5E5E5"> as well as</font>

455
00:16:42,400 --> 00:16:47,860
loops a lot of loops<font color="#E5E5E5"> which aren't doing</font>

456
00:16:45,340 --> 00:16:49,390
anything<font color="#E5E5E5"> and this is another example</font><font color="#CCCCCC"> so</font>

457
00:16:47,860 --> 00:16:52,420
you might look<font color="#CCCCCC"> at</font><font color="#E5E5E5"> this chunk of code and</font>

458
00:16:49,390 --> 00:16:54,880
the only thing that is<font color="#E5E5E5"> even relevant for</font>

459
00:16:52,420 --> 00:16:56,800
the functionality<font color="#CCCCCC"> is this last line here</font>

460
00:16:54,880 --> 00:17:02,680
and you<font color="#E5E5E5"> can see this is part of the from</font>

461
00:16:56,800 --> 00:17:05,310
win32 that we looked<font color="#E5E5E5"> at earlier as I</font>

462
00:17:02,680 --> 00:17:08,709
mentioned we have also the<font color="#E5E5E5"> windows</font><font color="#CCCCCC"> API</font>

463
00:17:05,310 --> 00:17:11,470
<font color="#E5E5E5">so this document came with</font><font color="#CCCCCC"> a bunch of</font>

464
00:17:08,709 --> 00:17:12,970
aliases so you can see the the<font color="#CCCCCC"> DLL the</font>

465
00:17:11,470 --> 00:17:15,250
modules libraries that they're loading

466
00:17:12,970 --> 00:17:17,650
from as well<font color="#E5E5E5"> as</font><font color="#CCCCCC"> the specific API so in</font>

467
00:17:15,250 --> 00:17:20,410
addition they decided to<font color="#E5E5E5"> inject some</font>

468
00:17:17,650 --> 00:17:22,030
comments<font color="#CCCCCC"> that were lyrics from</font><font color="#E5E5E5"> us from</font>

469
00:17:20,410 --> 00:17:23,709
from all sorts of<font color="#E5E5E5"> different music</font><font color="#CCCCCC"> I</font>

470
00:17:22,030 --> 00:17:27,280
guess<font color="#CCCCCC"> just</font><font color="#E5E5E5"> to provide</font><font color="#CCCCCC"> some entertainment</font>

471
00:17:23,709 --> 00:17:30,150
<font color="#E5E5E5">for</font><font color="#CCCCCC"> us this</font><font color="#E5E5E5"> is the library</font><font color="#CCCCCC"> user 32</font>

472
00:17:27,280 --> 00:17:32,680
kernel 32 and then those are the api's

473
00:17:30,150 --> 00:17:34,960
you'll also notice that<font color="#E5E5E5"> they are</font>

474
00:17:32,680 --> 00:17:37,270
<font color="#E5E5E5">creating these aliases</font><font color="#CCCCCC"> so when we want</font>

475
00:17:34,960 --> 00:17:39,760
to<font color="#CCCCCC"> identify the use of any particular</font>

476
00:17:37,270 --> 00:17:41,620
<font color="#E5E5E5">API that's being imported then we have</font>

477
00:17:39,760 --> 00:17:43,870
to find<font color="#E5E5E5"> it by the alias so again just</font>

478
00:17:41,620 --> 00:17:45,250
<font color="#CCCCCC">another</font><font color="#E5E5E5"> level of indirection to make it</font>

479
00:17:43,870 --> 00:17:48,070
a little<font color="#E5E5E5"> bit harder to trace this code</font>

480
00:17:45,250 --> 00:17:48,430
here you can see that enum date formats

481
00:17:48,070 --> 00:17:51,010
dub

482
00:17:48,430 --> 00:17:53,470
you is<font color="#E5E5E5"> alias with cabriole a and it's</font>

483
00:17:51,010 --> 00:17:57,610
used later<font color="#E5E5E5"> on in those macros</font><font color="#CCCCCC"> so then</font>

484
00:17:53,470 --> 00:17:59,830
you can identify that<font color="#CCCCCC"> usage let's talk</font>

485
00:17:57,610 --> 00:18:03,040
about that<font color="#E5E5E5"> one because</font><font color="#CCCCCC"> that technique</font>

486
00:17:59,830 --> 00:18:05,290
<font color="#E5E5E5">and specifically that API was used in</font>

487
00:18:03,040 --> 00:18:07,330
this document in order<font color="#E5E5E5"> to stage and</font>

488
00:18:05,290 --> 00:18:09,280
eventually execute some<font color="#CCCCCC"> shellcode</font><font color="#E5E5E5"> so</font>

489
00:18:07,330 --> 00:18:11,350
here's the md5 if you wanted<font color="#E5E5E5"> to grab it</font>

490
00:18:09,280 --> 00:18:15,550
and<font color="#E5E5E5"> follow along at any point in the</font>

491
00:18:11,350 --> 00:18:17,320
<font color="#CCCCCC">future what I decided</font><font color="#E5E5E5"> to do was there's</font>

492
00:18:15,550 --> 00:18:18,760
two<font color="#E5E5E5"> things with those API is this as</font>

493
00:18:17,320 --> 00:18:20,710
<font color="#CCCCCC">there there can be a long list</font><font color="#E5E5E5"> of</font>

494
00:18:18,760 --> 00:18:22,720
imports<font color="#E5E5E5"> not all of them have to be used</font>

495
00:18:20,710 --> 00:18:24,460
<font color="#CCCCCC">and even</font><font color="#E5E5E5"> the ones</font><font color="#CCCCCC"> that are used it</font>

496
00:18:22,720 --> 00:18:26,890
doesn't necessarily guarantee that

497
00:18:24,460 --> 00:18:28,960
they're relevant<font color="#E5E5E5"> or important</font><font color="#CCCCCC"> this</font><font color="#E5E5E5"> one</font>

498
00:18:26,890 --> 00:18:31,210
ended up being important<font color="#E5E5E5"> and the reason</font>

499
00:18:28,960 --> 00:18:33,220
that<font color="#CCCCCC"> it</font><font color="#E5E5E5"> was important is because this is</font>

500
00:18:31,210 --> 00:18:34,050
what allowed for the execution of<font color="#E5E5E5"> the</font>

501
00:18:33,220 --> 00:18:37,480
<font color="#E5E5E5">shellcode</font>

502
00:18:34,050 --> 00:18:41,470
<font color="#CCCCCC">the first argument you can see</font><font color="#E5E5E5"> there</font><font color="#CCCCCC"> APR</font>

503
00:18:37,480 --> 00:18:43,960
um that<font color="#E5E5E5"> argument</font><font color="#CCCCCC"> for enum date formats</font>

504
00:18:41,470 --> 00:18:46,060
is an<font color="#E5E5E5"> application defined callback</font>

505
00:18:43,960 --> 00:18:47,620
function so all that function is<font color="#CCCCCC"> doing</font>

506
00:18:46,060 --> 00:18:49,450
is expecting an address where it should

507
00:18:47,620 --> 00:18:51,760
<font color="#CCCCCC">go and execute code so</font><font color="#E5E5E5"> that's why this</font>

508
00:18:49,450 --> 00:18:55,210
worked in this document<font color="#E5E5E5"> in</font><font color="#CCCCCC"> order to</font>

509
00:18:51,760 --> 00:18:56,980
execute<font color="#E5E5E5"> the</font><font color="#CCCCCC"> shell code what we haven't</font>

510
00:18:55,210 --> 00:18:59,080
talked about is<font color="#E5E5E5"> how did</font><font color="#CCCCCC"> that get there</font>

511
00:18:56,980 --> 00:19:01,510
<font color="#E5E5E5">in the first</font><font color="#CCCCCC"> place and</font><font color="#E5E5E5"> so in that list</font>

512
00:18:59,080 --> 00:19:03,340
of imports there was an import for

513
00:19:01,510 --> 00:19:04,780
virtual<font color="#E5E5E5"> Alec</font><font color="#CCCCCC"> so that was gonna that will</font>

514
00:19:03,340 --> 00:19:07,330
be that was used to<font color="#CCCCCC"> allocate the memory</font>

515
00:19:04,780 --> 00:19:08,230
<font color="#E5E5E5">and then</font><font color="#CCCCCC"> a mem</font><font color="#E5E5E5"> move</font><font color="#CCCCCC"> API and I forget</font>

516
00:19:07,330 --> 00:19:11,169
<font color="#E5E5E5">which</font><font color="#CCCCCC"> one it was</font>

517
00:19:08,230 --> 00:19:13,060
<font color="#CCCCCC">RTL move memory or something so it</font>

518
00:19:11,170 --> 00:19:14,800
already<font color="#CCCCCC"> allocated rwx memory it's</font>

519
00:19:13,060 --> 00:19:16,659
already staged Yaffe skated<font color="#E5E5E5"> and then</font>

520
00:19:14,800 --> 00:19:18,820
<font color="#CCCCCC">stage that shellcode in memory and now</font>

521
00:19:16,660 --> 00:19:20,590
it's ready<font color="#CCCCCC"> for execution if you're</font>

522
00:19:18,820 --> 00:19:22,570
interested<font color="#E5E5E5"> in extracting as I was that</font>

523
00:19:20,590 --> 00:19:25,030
<font color="#CCCCCC">shellcode</font><font color="#E5E5E5"> from memory what I decided</font><font color="#CCCCCC"> to</font>

524
00:19:22,570 --> 00:19:27,790
do was to set a<font color="#E5E5E5"> breakpoint in the office</font>

525
00:19:25,030 --> 00:19:30,730
IDE<font color="#CCCCCC"> at this function</font><font color="#E5E5E5"> call this allowed</font>

526
00:19:27,790 --> 00:19:32,139
<font color="#CCCCCC">me to</font><font color="#E5E5E5"> determine the value of</font><font color="#CCCCCC"> that first</font>

527
00:19:30,730 --> 00:19:34,780
variable which will be the address<font color="#E5E5E5"> in</font>

528
00:19:32,140 --> 00:19:36,430
memory<font color="#CCCCCC"> that shellcode is</font><font color="#E5E5E5"> at not only</font><font color="#CCCCCC"> is</font>

529
00:19:34,780 --> 00:19:39,520
it<font color="#CCCCCC"> the address in memory</font><font color="#E5E5E5"> so we'll find</font>

530
00:19:36,430 --> 00:19:42,070
the base of this allocation<font color="#E5E5E5"> 7 0</font><font color="#CCCCCC"> D 0 0 0</font>

531
00:19:39,520 --> 00:19:43,960
0<font color="#E5E5E5"> but it's also the offset so it's</font>

532
00:19:42,070 --> 00:19:46,360
<font color="#E5E5E5">beginning execution at an offset from</font>

533
00:19:43,960 --> 00:19:47,770
<font color="#CCCCCC">that base at</font><font color="#E5E5E5"> E 5 D that's important</font>

534
00:19:46,360 --> 00:19:50,080
because if I want to take that shellcode

535
00:19:47,770 --> 00:19:51,550
out of memory and disassemble it it's

536
00:19:50,080 --> 00:19:53,110
usually<font color="#E5E5E5"> very helpful to know the entry</font>

537
00:19:51,550 --> 00:19:54,940
point<font color="#E5E5E5"> so that I can tell my disassembly</font>

538
00:19:53,110 --> 00:19:58,360
tool<font color="#E5E5E5"> to start in the right location and</font>

539
00:19:54,940 --> 00:19:59,410
get accurate disassembly results<font color="#CCCCCC"> using a</font>

540
00:19:58,360 --> 00:20:01,300
tool like<font color="#E5E5E5"> process hacker</font>

541
00:19:59,410 --> 00:20:02,020
<font color="#E5E5E5">there's the allocation you can see the</font>

542
00:20:01,300 --> 00:20:04,480
base and

543
00:20:02,020 --> 00:20:07,030
of course<font color="#E5E5E5"> rwx as we might expect</font><font color="#CCCCCC"> so</font>

544
00:20:04,480 --> 00:20:09,280
execute permissions<font color="#E5E5E5"> and if you look at</font>

545
00:20:07,030 --> 00:20:10,600
the actual content<font color="#E5E5E5"> in memory I've</font>

546
00:20:09,280 --> 00:20:13,930
highlighted the first<font color="#CCCCCC"> byte</font>

547
00:20:10,600 --> 00:20:16,120
that's 55 so opcode 55 which is a push

548
00:20:13,930 --> 00:20:17,680
EBP<font color="#E5E5E5"> which is normally your one of your</font>

549
00:20:16,120 --> 00:20:20,290
<font color="#E5E5E5">first instructions in a regular function</font>

550
00:20:17,680 --> 00:20:21,670
<font color="#CCCCCC">Prolog</font><font color="#E5E5E5"> so that gave me</font><font color="#CCCCCC"> just good</font>

551
00:20:20,290 --> 00:20:24,159
confirmation<font color="#CCCCCC"> that I was on the right</font>

552
00:20:21,670 --> 00:20:25,570
<font color="#CCCCCC">track and</font><font color="#E5E5E5"> that</font><font color="#CCCCCC"> this is fact</font><font color="#E5E5E5"> is shellcode</font>

553
00:20:24,160 --> 00:20:28,930
<font color="#CCCCCC">and I can go ahead</font><font color="#E5E5E5"> and extract it</font><font color="#CCCCCC"> and</font>

554
00:20:25,570 --> 00:20:30,280
analyze<font color="#E5E5E5"> it</font><font color="#CCCCCC"> there's a demo that</font><font color="#E5E5E5"> document</font>

555
00:20:28,930 --> 00:20:31,690
if you<font color="#CCCCCC"> wanted that</font><font color="#E5E5E5"> the slides are</font>

556
00:20:30,280 --> 00:20:35,170
<font color="#CCCCCC">available I believe on</font><font color="#E5E5E5"> the hack in the</font>

557
00:20:31,690 --> 00:20:38,890
<font color="#E5E5E5">Box website</font><font color="#CCCCCC"> the next document used the</font>

558
00:20:35,170 --> 00:20:40,690
<font color="#CCCCCC">powershell this one was exciting because</font>

559
00:20:38,890 --> 00:20:42,100
it was authored by<font color="#E5E5E5"> powershell itself</font><font color="#CCCCCC"> so</font>

560
00:20:40,690 --> 00:20:44,830
<font color="#CCCCCC">i was really</font><font color="#E5E5E5"> interested</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> see what</font>

561
00:20:42,100 --> 00:20:46,360
<font color="#E5E5E5">powershell had to do with macros</font><font color="#CCCCCC"> you'll</font>

562
00:20:44,830 --> 00:20:48,159
<font color="#E5E5E5">notice that it's</font><font color="#CCCCCC"> gonna hide itself and</font>

563
00:20:46,360 --> 00:20:50,020
then it uses<font color="#E5E5E5"> that in code parameter so</font>

564
00:20:48,160 --> 00:20:52,900
the contents<font color="#E5E5E5"> of the script are actually</font>

565
00:20:50,020 --> 00:20:54,879
encoded base64 encoded so again first

566
00:20:52,900 --> 00:20:57,310
thing<font color="#CCCCCC"> i did</font><font color="#E5E5E5"> in order to see that was to</font>

567
00:20:54,880 --> 00:20:59,740
base64 decode now<font color="#E5E5E5"> i don't know if this</font>

568
00:20:57,310 --> 00:21:01,570
was a flaw in my<font color="#E5E5E5"> approach or if it was</font>

569
00:20:59,740 --> 00:21:03,670
an<font color="#CCCCCC"> intentional intentionally injected</font>

570
00:21:01,570 --> 00:21:06,610
but every time<font color="#E5E5E5"> i decoded that i got all</font>

571
00:21:03,670 --> 00:21:08,980
these annoying<font color="#CCCCCC"> 3 4 bytes</font><font color="#E5E5E5"> so between</font>

572
00:21:06,610 --> 00:21:11,350
every character was this this<font color="#E5E5E5"> binary 3</font><font color="#CCCCCC"> 4</font>

573
00:21:08,980 --> 00:21:13,120
<font color="#CCCCCC">so i had to</font><font color="#E5E5E5"> first open this up in a hex</font>

574
00:21:11,350 --> 00:21:15,780
editor<font color="#E5E5E5"> and pull those out in order to</font>

575
00:21:13,120 --> 00:21:18,100
<font color="#E5E5E5">get a ski that</font><font color="#CCCCCC"> i could</font><font color="#E5E5E5"> begin to analyze</font>

576
00:21:15,780 --> 00:21:20,020
this<font color="#E5E5E5"> is the macros really just</font>

577
00:21:18,100 --> 00:21:22,719
bootstrapping<font color="#E5E5E5"> the ability to</font><font color="#CCCCCC"> execute</font>

578
00:21:20,020 --> 00:21:24,310
this<font color="#E5E5E5"> powershell and creating a w script</font>

579
00:21:22,720 --> 00:21:25,720
shell object and then running that

580
00:21:24,310 --> 00:21:27,730
script after<font color="#E5E5E5"> it's grabbed it</font><font color="#CCCCCC"> from the</font>

581
00:21:25,720 --> 00:21:29,290
author<font color="#E5E5E5"> you'll also notice here that</font>

582
00:21:27,730 --> 00:21:31,810
<font color="#E5E5E5">there's an error handler</font><font color="#CCCCCC"> and if</font><font color="#E5E5E5"> this</font>

583
00:21:29,290 --> 00:21:33,310
were to fail initially targeting a

584
00:21:31,810 --> 00:21:37,000
Windows user then it'll try the match

585
00:21:33,310 --> 00:21:38,620
shell<font color="#CCCCCC"> know probably</font><font color="#E5E5E5"> yeah</font><font color="#CCCCCC"> and doesn't</font>

586
00:21:37,000 --> 00:21:40,390
<font color="#E5E5E5">leave a</font><font color="#CCCCCC"> lot to imagine what Mac</font><font color="#E5E5E5"> shells</font>

587
00:21:38,620 --> 00:21:42,129
going<font color="#E5E5E5"> to do as well as the wind shell as</font>

588
00:21:40,390 --> 00:21:45,580
<font color="#CCCCCC">well</font><font color="#E5E5E5"> this is one time they're actually</font>

589
00:21:42,130 --> 00:21:47,050
very<font color="#E5E5E5"> accurately descriptive</font><font color="#CCCCCC"> this is the</font>

590
00:21:45,580 --> 00:21:48,909
content<font color="#CCCCCC"> of that</font><font color="#E5E5E5"> first stage of</font>

591
00:21:47,050 --> 00:21:51,580
<font color="#E5E5E5">PowerShell</font><font color="#CCCCCC"> and</font><font color="#E5E5E5"> while this is a</font><font color="#CCCCCC"> fairly</font>

592
00:21:48,910 --> 00:21:54,070
busy slide that gist of it<font color="#CCCCCC"> is</font><font color="#E5E5E5"> that this</font>

593
00:21:51,580 --> 00:21:56,470
<font color="#E5E5E5">is all one big string and what this</font>

594
00:21:54,070 --> 00:21:58,899
document or<font color="#CCCCCC"> PowerShell script is doing</font>

595
00:21:56,470 --> 00:22:01,810
is it's going to base64 that string<font color="#E5E5E5"> and</font>

596
00:21:58,900 --> 00:22:04,480
then execute using ie X so there's

597
00:22:01,810 --> 00:22:06,639
<font color="#E5E5E5">another stage here this is the second</font>

598
00:22:04,480 --> 00:22:09,670
stage<font color="#E5E5E5"> again it looks a little busy but</font>

599
00:22:06,640 --> 00:22:12,010
this byte array here is more<font color="#CCCCCC"> shellcode</font>

600
00:22:09,670 --> 00:22:14,440
<font color="#E5E5E5">and what this</font><font color="#CCCCCC"> PowerShell script is</font><font color="#E5E5E5"> going</font>

601
00:22:12,010 --> 00:22:15,970
to do is just simply call virtual a lock

602
00:22:14,440 --> 00:22:18,580
copy that<font color="#E5E5E5"> shell code into memory</font>

603
00:22:15,970 --> 00:22:20,440
and then create thread<font color="#CCCCCC"> I think this</font>

604
00:22:18,580 --> 00:22:21,730
looks<font color="#CCCCCC"> like one of the malla doc</font>

605
00:22:20,440 --> 00:22:23,020
frameworks out<font color="#E5E5E5"> there</font><font color="#CCCCCC"> I think</font><font color="#E5E5E5"> this is</font>

606
00:22:21,730 --> 00:22:25,840
code<font color="#E5E5E5"> that looks very similar</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> that</font>

607
00:22:23,020 --> 00:22:27,730
although<font color="#E5E5E5"> I haven't looked at</font><font color="#CCCCCC"> it what</font>

608
00:22:25,840 --> 00:22:29,290
<font color="#E5E5E5">does that shell code do</font><font color="#CCCCCC"> I didn't</font>

609
00:22:27,730 --> 00:22:30,580
<font color="#CCCCCC">actually</font><font color="#E5E5E5"> analyze that</font><font color="#CCCCCC"> it tried to</font><font color="#E5E5E5"> make a</font>

610
00:22:29,290 --> 00:22:32,710
<font color="#CCCCCC">request</font><font color="#E5E5E5"> to that domain to get that</font>

611
00:22:30,580 --> 00:22:34,540
resource<font color="#CCCCCC"> it wasn't available</font><font color="#E5E5E5"> at the time</font>

612
00:22:32,710 --> 00:22:37,540
that<font color="#E5E5E5"> I grabbed this doc so I wasn't able</font>

613
00:22:34,540 --> 00:22:39,310
to go any further<font color="#E5E5E5"> anyway</font><font color="#CCCCCC"> not every</font>

614
00:22:37,540 --> 00:22:42,310
document<font color="#E5E5E5"> as I mentioned has to contain</font>

615
00:22:39,310 --> 00:22:44,050
<font color="#E5E5E5">macros</font><font color="#CCCCCC"> this document here do not contain</font>

616
00:22:42,310 --> 00:22:46,750
macros<font color="#CCCCCC"> but when you open it</font><font color="#E5E5E5"> up and you</font>

617
00:22:44,050 --> 00:22:48,220
<font color="#E5E5E5">find what appears to be three embedded</font>

618
00:22:46,750 --> 00:22:50,530
<font color="#E5E5E5">office documents that contain all</font><font color="#CCCCCC"> of</font>

619
00:22:48,220 --> 00:22:54,070
these<font color="#CCCCCC"> invoices that apparently you are</font>

620
00:22:50,530 --> 00:22:55,780
<font color="#E5E5E5">are now late on</font><font color="#CCCCCC"> if you</font><font color="#E5E5E5"> extract those</font>

621
00:22:54,070 --> 00:22:57,580
though they're not invoices of course

622
00:22:55,780 --> 00:22:59,920
they're not documents they're VB scripts

623
00:22:57,580 --> 00:23:02,889
<font color="#E5E5E5">and so</font><font color="#CCCCCC"> double-clicking</font><font color="#E5E5E5"> those will begin</font>

624
00:22:59,920 --> 00:23:04,720
<font color="#E5E5E5">execution of those VB scripts</font><font color="#CCCCCC"> looking at</font>

625
00:23:02,890 --> 00:23:06,250
those content that content of<font color="#E5E5E5"> those</font>

626
00:23:04,720 --> 00:23:08,380
scripts they were all<font color="#E5E5E5"> identical so you</font>

627
00:23:06,250 --> 00:23:10,120
<font color="#E5E5E5">can generate a hash on those and you'll</font>

628
00:23:08,380 --> 00:23:12,340
see they're all identical<font color="#CCCCCC"> and of course</font>

629
00:23:10,120 --> 00:23:16,360
they're all<font color="#E5E5E5"> a few skated what those</font>

630
00:23:12,340 --> 00:23:18,790
scripts did drop two files<font color="#E5E5E5"> one</font><font color="#CCCCCC"> of them</font>

631
00:23:16,360 --> 00:23:26,290
<font color="#CCCCCC">wasn't</font><font color="#E5E5E5"> executable and it was</font><font color="#CCCCCC"> recognized</font>

632
00:23:18,790 --> 00:23:28,899
as a<font color="#CCCCCC"> Trojan</font><font color="#E5E5E5"> so another kind</font><font color="#CCCCCC"> of oddball</font>

633
00:23:26,290 --> 00:23:30,250
technique that I've run<font color="#CCCCCC"> across and I'm</font>

634
00:23:28,900 --> 00:23:31,930
sure many others have as well<font color="#CCCCCC"> you can</font>

635
00:23:30,250 --> 00:23:33,820
see the detection ratio at the time that

636
00:23:31,930 --> 00:23:36,970
I<font color="#E5E5E5"> put the slide together on virustotal</font>

637
00:23:33,820 --> 00:23:39,429
this one used<font color="#E5E5E5"> cert util so it dropped</font>

638
00:23:36,970 --> 00:23:42,540
one resource when those macros began

639
00:23:39,430 --> 00:23:46,090
executing<font color="#E5E5E5"> that was this pfx file and</font>

640
00:23:42,540 --> 00:23:48,340
what it did with<font color="#E5E5E5"> that file</font><font color="#CCCCCC"> was to</font><font color="#E5E5E5"> use</font>

641
00:23:46,090 --> 00:23:51,100
<font color="#E5E5E5">cert</font><font color="#CCCCCC"> u tilde code so</font><font color="#E5E5E5"> that is another</font>

642
00:23:48,340 --> 00:23:53,110
base64 encoded file it then writes that

643
00:23:51,100 --> 00:23:54,719
out as an executable<font color="#E5E5E5"> and because</font><font color="#CCCCCC"> they</font>

644
00:23:53,110 --> 00:23:57,340
invoked all of this through a command

645
00:23:54,720 --> 00:24:04,200
command<font color="#CCCCCC"> exe then it goes ahead</font><font color="#E5E5E5"> and</font>

646
00:23:57,340 --> 00:24:06,760
execute<font color="#CCCCCC"> that once it's done all</font><font color="#E5E5E5"> right</font>

647
00:24:04,200 --> 00:24:07,930
<font color="#E5E5E5">finally get back</font><font color="#CCCCCC"> to our Mac</font><font color="#E5E5E5"> shell so if</font>

648
00:24:06,760 --> 00:24:09,520
you<font color="#E5E5E5"> think back</font><font color="#CCCCCC"> just a couple of</font><font color="#E5E5E5"> minutes</font>

649
00:24:07,930 --> 00:24:11,880
<font color="#CCCCCC">ago and</font><font color="#E5E5E5"> we talked about the</font><font color="#CCCCCC"> powershell</font>

650
00:24:09,520 --> 00:24:14,050
that that document initially dropped

651
00:24:11,880 --> 00:24:15,430
<font color="#E5E5E5">what this is doing then this is the</font>

652
00:24:14,050 --> 00:24:17,260
<font color="#CCCCCC">other branch so an exception occurs</font>

653
00:24:15,430 --> 00:24:19,180
<font color="#CCCCCC">because it can't execute those Windows</font>

654
00:24:17,260 --> 00:24:21,129
commands those objects on<font color="#E5E5E5"> your non</font>

655
00:24:19,180 --> 00:24:24,610
Windows host<font color="#E5E5E5"> then it'll go and try to</font>

656
00:24:21,130 --> 00:24:26,110
call this<font color="#E5E5E5"> this has been snipped for just</font>

657
00:24:24,610 --> 00:24:28,990
for brevity so it will fit in the slide

658
00:24:26,110 --> 00:24:29,889
<font color="#CCCCCC">again the kind of</font><font color="#E5E5E5"> the gist of it is that</font>

659
00:24:28,990 --> 00:24:32,200
<font color="#CCCCCC">it creates</font><font color="#E5E5E5"> this</font>

660
00:24:29,890 --> 00:24:33,280
<font color="#CCCCCC">it had that hardness hard-coded IP</font><font color="#E5E5E5"> that</font>

661
00:24:32,200 --> 00:24:36,040
<font color="#E5E5E5">it was going to try to create a</font>

662
00:24:33,280 --> 00:24:36,460
<font color="#E5E5E5">connection to at that</font><font color="#CCCCCC"> particular port</font>

663
00:24:36,040 --> 00:24:38,620
number

664
00:24:36,460 --> 00:24:40,809
it was then grabbing standard out

665
00:24:38,620 --> 00:24:42,669
standard in standard<font color="#E5E5E5"> error and allowing</font>

666
00:24:40,809 --> 00:24:45,010
those to then or a redirecting<font color="#CCCCCC"> nihlus to</font>

667
00:24:42,670 --> 00:24:47,200
the remote shell<font color="#CCCCCC"> and then calling that</font>

668
00:24:45,010 --> 00:24:50,140
shell<font color="#E5E5E5"> the last step was to use</font><font color="#CCCCCC"> Mac's</font>

669
00:24:47,200 --> 00:24:52,150
<font color="#E5E5E5">script which is on</font><font color="#CCCCCC"> MSDN deprecated but</font>

670
00:24:50,140 --> 00:24:53,530
apparently still supported and it would

671
00:24:52,150 --> 00:24:56,950
use that in<font color="#E5E5E5"> order to invoke this</font>

672
00:24:53,530 --> 00:24:58,600
<font color="#E5E5E5">basically this Python so not nearly as</font>

673
00:24:56,950 --> 00:25:00,910
maybe sophisticated<font color="#CCCCCC"> as a lot of those</font>

674
00:24:58,600 --> 00:25:03,129
other office windows based techniques

675
00:25:00,910 --> 00:25:04,720
that we were<font color="#E5E5E5"> looking at but I suppose if</font>

676
00:25:03,130 --> 00:25:08,710
they<font color="#E5E5E5"> got a</font><font color="#CCCCCC"> river shell then it was was</font>

677
00:25:04,720 --> 00:25:10,510
worth the<font color="#E5E5E5"> effort I talked fast because I</font>

678
00:25:08,710 --> 00:25:11,799
thought<font color="#E5E5E5"> I'd</font><font color="#CCCCCC"> run out of</font><font color="#E5E5E5"> time so I guess</font>

679
00:25:10,510 --> 00:25:13,440
I'm helping the curve and getting you

680
00:25:11,799 --> 00:25:16,809
<font color="#E5E5E5">guys back on</font><font color="#CCCCCC"> schedule</font>

681
00:25:13,440 --> 00:25:18,760
great<font color="#CCCCCC"> all</font><font color="#E5E5E5"> right</font><font color="#CCCCCC"> well thank everyone for</font>

682
00:25:16,809 --> 00:25:19,950
<font color="#CCCCCC">your time I appreciate it Devin</font><font color="#E5E5E5"> 25</font>

683
00:25:18,760 --> 00:25:23,150
minutes with<font color="#E5E5E5"> you</font>

684
00:25:19,950 --> 00:25:23,150
[Applause]

