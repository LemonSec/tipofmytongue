1
00:00:00,000 --> 00:00:18,600
everyone so covered in joining our topic
is going to be the apples hand bottom we

2
00:00:18,600 --> 00:00:21,480
said and I'm sorry

3
00:00:21,480 --> 00:00:28,590
and this is basically one of I think the
most important aspects of mac OS niños

4
00:00:28,590 --> 00:00:32,940
both which has been around for a very
long time in fact it's been introduced

5
00:00:32,940 --> 00:00:33,809
back in now

6
00:00:33,809 --> 00:00:39,120
mac OS 10.5 which is all the way when it
was known as seatbelt and over time

7
00:00:39,120 --> 00:00:43,739
there's been a history of many bypasses
to this an apple has learned again and

8
00:00:43,739 --> 00:00:51,269
again I and improved again and again the
mainly implementation that with in fact

9
00:00:51,270 --> 00:00:55,079
been revised several times and there's
been very little research on the subject

10
00:00:55,079 --> 00:01:00,899
of barring maybe one very nice
presentation and talk by one Dionysus

11
00:01:00,899 --> 00:01:04,680
Bella's a kiss but that was over five
years ago so i figured that with all

12
00:01:04,680 --> 00:01:08,549
these profound changes it's time to
maybe revisit this and also this is

13
00:01:08,549 --> 00:01:14,310
within the context of a new book that's
coming out by myself on iOS and mac west

14
00:01:14,310 --> 00:01:18,869
in the context of securities and
insecurity and so we're going to discuss

15
00:01:18,869 --> 00:01:21,840
this we're going to look at are the
implementation from an historical

16
00:01:21,840 --> 00:01:26,009
perspective starting from the very very
first implementation which as I said

17
00:01:26,009 --> 00:01:31,200
we're very being very naive back in mac
OS 10.5 and we can see that the sandbox

18
00:01:31,200 --> 00:01:34,979
is evolving constantly but just by
looking at its source version Apple

19
00:01:34,979 --> 00:01:40,200
maintains a versioning of all of its our
source basis and you can see that off of

20
00:01:40,200 --> 00:01:44,729
the LC source version command looking at
the kext looking at the various

21
00:01:44,729 --> 00:01:49,890
libraries and we actually see that on
occasion the with every new release of

22
00:01:49,890 --> 00:01:54,810
mac OS and iOS the number pops up by
about a hundred hundred twenty releases

23
00:01:54,810 --> 00:01:58,649
so we see this is being actively
developed and in fact is undergoing

24
00:01:58,649 --> 00:02:03,060
profound changes even as we speak just
in the iOS 10 betters there have been

25
00:02:03,060 --> 00:02:09,060
some changes from version 570 all the
way to the present day 592 and it seems

26
00:02:09,060 --> 00:02:11,319
that for now it's stabilized and

27
00:02:11,319 --> 00:02:14,679
I'm going to be trying to cover is all
the latest and greatest changes up till

28
00:02:14,680 --> 00:02:19,780
that very version now why are we here so
as i said i personally think this is

29
00:02:19,780 --> 00:02:24,909
very very important and fact of the
matter is you do 28 people did vote me

30
00:02:24,909 --> 00:02:28,328
in so i guess those eight people are
somewhere in the audience here so thank

31
00:02:28,329 --> 00:02:28,840
you

32
00:02:28,840 --> 00:02:33,909
and basically the idea is that we're
going to look at this because from the

33
00:02:33,909 --> 00:02:38,739
perspective of security both in mac OS
and in iOS this is really the

34
00:02:38,739 --> 00:02:43,840
fundamental line the fundamental border
where if you look at it from a trust

35
00:02:43,840 --> 00:02:45,250
memory perspective

36
00:02:45,250 --> 00:02:49,329
oftentimes if you break out of the
sandbox pretty much the way to Reuters

37
00:02:49,329 --> 00:02:54,159
just paved for you are primarily we see
that in jail breaks where jailbreaks

38
00:02:54,159 --> 00:02:58,629
consists of many many sequences of
exploits or things we have to get just

39
00:02:58,629 --> 00:03:02,948
right in order to get that much cover to
jailbreak active but really the very

40
00:03:02,949 --> 00:03:07,030
first stage if you discount code signing
which nowadays anybody can do with an

41
00:03:07,030 --> 00:03:10,540
apple certificate the very first stage
is to break out of the container to

42
00:03:10,540 --> 00:03:14,590
break out of the sandbox and also we see
that in mac OS as well with the advent

43
00:03:14,590 --> 00:03:17,349
of SIP what they call system integrity
protection

44
00:03:17,349 --> 00:03:22,298
this is a new feature they put in mac OS
10 11 later which is in fact nothing

45
00:03:22,299 --> 00:03:27,340
more than a glorified sandbox profile
that supplied platform wyd now our plan

46
00:03:27,340 --> 00:03:30,549
of attack is going to be first of all to
give you a little bit of the basics I'm

47
00:03:30,549 --> 00:03:33,849
not sure how many of you guys here are
familiar with mac OS and iOS can get a

48
00:03:33,849 --> 00:03:38,858
show of hands how many people are like
active like mac OS users or iOS users

49
00:03:38,859 --> 00:03:43,000
not that many actually so for the
benefit of those of you who aren't maybe

50
00:03:43,000 --> 00:03:46,810
all-too-familiar i will show some of
their what I call prerequisites and

51
00:03:46,810 --> 00:03:51,069
primarily this is what they call the mac
f which is the mandatory access control

52
00:03:51,069 --> 00:03:56,078
framework which is in fact a substrate
on top of which all of Apple security

53
00:03:56,079 --> 00:04:00,040
mechanisms including code-signing
sandboxing apple mobile file integrity

54
00:04:00,040 --> 00:04:04,060
everything is built on top of that so
first i'll be explaining that and then

55
00:04:04,060 --> 00:04:07,090
I'll diverged into two different
implementations the first

56
00:04:07,090 --> 00:04:12,489
implementations the mac OS where they
call it app sandboxing the second one is

57
00:04:12,489 --> 00:04:17,469
the star OS and I you staros because
traditionally have used that to anything

58
00:04:17,469 --> 00:04:22,120
that is not mac OSX Craig federighi kind
of ruined it for me when he took out the

59
00:04:22,120 --> 00:04:24,800
exit now staros kind of like covers

60
00:04:24,800 --> 00:04:29,210
Mac OS to so ignore that when seastar
wet it's basically anything but Mac OS

61
00:04:29,210 --> 00:04:33,080
doing that in regular expression would
be like too difficult so basically the

62
00:04:33,080 --> 00:04:36,620
idea is that will show the
implementation on iOS watch OST vos

63
00:04:36,620 --> 00:04:41,000
which is all essentially the same and
the idea their fundamental ideas called

64
00:04:41,000 --> 00:04:44,750
a container and then following that i'll
try and show you a little bit of how I

65
00:04:44,750 --> 00:04:49,580
dug into the sandbox and pretty much got
to reverse the entire implementation and

66
00:04:49,580 --> 00:04:54,289
once again I'll diverge to the mac OS
version which is fairly easy because it

67
00:04:54,289 --> 00:04:58,969
is implicated and the iOS version which
unfortunately is not lastly I'll show

68
00:04:58,969 --> 00:05:03,199
some sandbox api which are present in
user mode but needless to say are

69
00:05:03,199 --> 00:05:07,099
entirely undocumented and so i'll try to
show you these AP is both our

70
00:05:07,099 --> 00:05:11,389
perspective of how you could use them
but also with a couple of tools that

71
00:05:11,389 --> 00:05:15,680
I've provided for this approach and also
you're welcome to follow this along if

72
00:05:15,680 --> 00:05:20,509
you go to this girl right here which is
which is new OS X book that's where i

73
00:05:20,509 --> 00:05:24,800
published my uh my books through and so
if you go to that there's a particular

74
00:05:24,800 --> 00:05:28,639
section for articles a lot of these
articles are like extra stuff that

75
00:05:28,639 --> 00:05:33,020
didn't make it in the first edition of
the book and a lot of addenda lot of

76
00:05:33,020 --> 00:05:38,060
like extra material and so I just put in
an article here which is H I tsv hack in

77
00:05:38,060 --> 00:05:41,419
the sandbox HTML and if you go there
you'll see that there's both

78
00:05:41,419 --> 00:05:44,900
presentation that you can follow along
with as well as all sorts of

79
00:05:44,900 --> 00:05:50,179
miscellaneous tools and hopefully if the
internet cooperates here it's been

80
00:05:50,180 --> 00:05:54,710
giving me a hard hard time today then
you should be seeing that there's a PDF

81
00:05:54,710 --> 00:05:56,270
and then a bunch of sources

82
00:05:56,270 --> 00:06:00,680
I've made all of my research entirely
open source you can go on and get some

83
00:06:00,680 --> 00:06:04,940
reverse engineer sources as well as
companion files for the colonel

84
00:06:04,940 --> 00:06:07,759
extension if you're going to do some
reversing yourself as well as the

85
00:06:07,759 --> 00:06:11,569
various fineries so with all that in
mind let's get started

86
00:06:11,569 --> 00:06:15,110
so at least we're going to start off
with something called the mac f know the

87
00:06:15,110 --> 00:06:19,129
mac efforts the mandatory access control
framework first of all just for the

88
00:06:19,129 --> 00:06:23,000
verbiage mandatory access control versus
discretionary access control

89
00:06:23,000 --> 00:06:28,069
discretionary access control what you
call DAC usually is the traditional

90
00:06:28,069 --> 00:06:32,930
model in unix where we give users the
ability to change and to apply

91
00:06:32,930 --> 00:06:37,729
permissions on various objects in the
file system primarily and that would be

92
00:06:37,729 --> 00:06:38,479
the usual

93
00:06:38,480 --> 00:06:42,920
smart shown to grab that you all know
and love basically you get the idea you

94
00:06:42,920 --> 00:06:47,330
get the discretion of whether or not to
apply permissions on a particular object

95
00:06:47,330 --> 00:06:52,909
by comparison mandatory access control
mac or Mac f4 the mandatory access

96
00:06:52,910 --> 00:06:57,590
control framework is this idea where we
say it's not discretionary more it's

97
00:06:57,590 --> 00:07:02,450
mandatory meaning that we do all types
of access control permissions primarily

98
00:07:02,450 --> 00:07:06,830
and user rights assignments but we do
that on a system-wide basis where

99
00:07:06,830 --> 00:07:11,750
essentially only the administrator can
assign those permissions and everybody

100
00:07:11,750 --> 00:07:16,670
has to abide by them now apple takes at
one level upwards of that and that is to

101
00:07:16,670 --> 00:07:20,330
say that they are the true administrator
of the operating system and then if

102
00:07:20,330 --> 00:07:24,409
you're running iOS obviously you're just
kind of like leasing the device from

103
00:07:24,410 --> 00:07:28,640
them and they decide whatever the policy
should be and you have no control over

104
00:07:28,640 --> 00:07:32,930
the matter and we see that slowly
creeping into mac OS with the advent of

105
00:07:32,930 --> 00:07:36,380
sip that have mentioned system integrity
protection which is what they call

106
00:07:36,380 --> 00:07:40,909
rootless which is really the idea that
route is still there but it's not rude

107
00:07:40,910 --> 00:07:44,870
anymore it's a lot less route can do
less many people thought that apple

108
00:07:44,870 --> 00:07:48,770
would remove the root prompt entirely
they can do that because too many people

109
00:07:48,770 --> 00:07:53,570
need the power user experience but then
on the other hand they do have the

110
00:07:53,570 --> 00:07:58,490
consistent ability to remove a lot of
roots capabilities and moves powers and

111
00:07:58,490 --> 00:08:02,570
that is effectively what ruthless is and
we see that starting in mac OS 10 11 and

112
00:08:02,570 --> 00:08:06,770
unfortunately getting even stronger in
10-12 now for those of you coming from

113
00:08:06,770 --> 00:08:11,330
Android as I've seen many Android people
here are the ideas primarily also an

114
00:08:11,330 --> 00:08:15,740
android where the user different type of
framework which is called selinux or in

115
00:08:15,740 --> 00:08:20,000
the implementation android se Android
again it's basically the same idea

116
00:08:20,000 --> 00:08:24,860
although it's a totally different taking
the apples perspective are in and linux

117
00:08:24,860 --> 00:08:29,690
what they do is they just used the
kernel module to assign labels in the

118
00:08:29,690 --> 00:08:34,130
iOS Mac OS case they still have a kernel
modules you still have labels but if you

119
00:08:34,130 --> 00:08:37,939
do it a little bit differently and so
what they do is they have this framework

120
00:08:37,940 --> 00:08:41,750
which is essentially a framework of
callbacks from the colonel any type of

121
00:08:41,750 --> 00:08:47,030
operation and virtually every system
call in most traps get this call out

122
00:08:47,030 --> 00:08:50,089
where they say if there is some type of
policy

123
00:08:50,740 --> 00:08:54,550
then let us first run that operation by
the policy and the policy will decide

124
00:08:54,550 --> 00:08:59,439
yay or name if the policy doesn't buy no
problems the policy says no we fail the

125
00:08:59,440 --> 00:09:03,339
operation it's as simple as that the
policy in this case is actually sold

126
00:09:03,339 --> 00:09:04,029
separately

127
00:09:04,029 --> 00:09:08,260
that's a colonel extension that is
installed and this is something that

128
00:09:08,260 --> 00:09:12,010
Apple could have made as a public
Colonel interface what they call kpi

129
00:09:12,010 --> 00:09:15,910
they chose not to this is something
that's not allowed for developers to

130
00:09:15,910 --> 00:09:21,760
interface with developers instead get a
lesser far far inferior api which is

131
00:09:21,760 --> 00:09:27,490
called k off which isn't even coming
close to the vast extent that mac has so

132
00:09:27,490 --> 00:09:31,060
Apple keep smacking for themselves and
then basically what they do is they have

133
00:09:31,060 --> 00:09:34,869
their own kernel extensions and those
hooks basically decide yay or nay

134
00:09:34,870 --> 00:09:39,279
according to whatever the code there
besides and one important thing is that

135
00:09:39,279 --> 00:09:45,670
each such a hook can basically just
negate but not really approve and that

136
00:09:45,670 --> 00:09:48,579
is to say that if some other hook says
no and that's it

137
00:09:48,580 --> 00:09:52,360
suffice it that one hook says no and
that the operation should fail and

138
00:09:52,360 --> 00:09:57,850
that's it nobody else can a wart that or
somehow circumvent that and make that up

139
00:09:57,850 --> 00:10:01,360
a negative into a positive now in
particular what would it look like from

140
00:10:01,360 --> 00:10:05,680
a visual point of view so we've got the
user mode process the usual process is

141
00:10:05,680 --> 00:10:10,989
of course somewhere in user land and in
order to do anything of consequence that

142
00:10:10,990 --> 00:10:15,640
user mode process has to issue a system
called now there is the notion of system

143
00:10:15,640 --> 00:10:19,270
calls and mouse traps which are two
different things but for the sake of

144
00:10:19,270 --> 00:10:24,250
simplicity let's assume system call as a
cross from user mode on to the colonel

145
00:10:24,250 --> 00:10:29,680
boundary now in the kernel mode we've
got a system called table or potentially

146
00:10:29,680 --> 00:10:34,239
amok crap table and those in turn will
lead us to a vector which is the actual

147
00:10:34,240 --> 00:10:38,140
call itself the implementation the
corresponding call is called from the

148
00:10:38,140 --> 00:10:43,420
table and in turn will call on that call
out they will do the call to the

149
00:10:43,420 --> 00:10:47,050
mandatory access control framework which
is the component that's built into the

150
00:10:47,050 --> 00:10:51,729
kernel but then what's not built into
the kernel is a set of policies so Mac f

151
00:10:51,730 --> 00:10:56,589
basically looks at a set of policies
which are registered modules and calls

152
00:10:56,589 --> 00:11:00,820
out any of the so-called interested
parties now what are interested parties

153
00:11:00,820 --> 00:11:03,970
any module can register and assign a
Paul

154
00:11:03,970 --> 00:11:08,649
c4 up to about 400 and something
operations naturally not all of them

155
00:11:08,649 --> 00:11:13,300
care about all the operations but
depending on which operations are

156
00:11:13,300 --> 00:11:17,349
interested in you basically set your
pointers if the pointer is now nobody's

157
00:11:17,350 --> 00:11:21,579
interested if the pointer is not now you
get called and so when you get called

158
00:11:21,579 --> 00:11:26,529
you're one of those policy modules and
so magnet will call out to you and will

159
00:11:26,529 --> 00:11:28,029
say to you want to approve

160
00:11:28,029 --> 00:11:32,589
yay or nay you get the option to choose
and you get the option to see all the

161
00:11:32,589 --> 00:11:36,189
arguments the same way the system called
would as well as you can see the colonel

162
00:11:36,189 --> 00:11:40,959
authorization structure what they call
chaos which is basically the user

163
00:11:40,959 --> 00:11:45,040
credentials and it's very similar to the
struct credit that people here in

164
00:11:45,040 --> 00:11:49,120
android were talking about basically
getting the UID and GID effective you

165
00:11:49,120 --> 00:11:50,350
idea and so forth

166
00:11:50,350 --> 00:11:55,420
now the policy module itself may also
call on a helper and that's usually when

167
00:11:55,420 --> 00:11:59,229
they do an up call to a demon and you'll
see that that's also what happens in our

168
00:11:59,230 --> 00:12:04,779
case to both the amphi policy and the
sandbox policy have their separate

169
00:12:04,779 --> 00:12:08,170
demons although in iOS it's a little bit
different nowadays and in those cases

170
00:12:08,170 --> 00:12:13,628
only if the demon says to the kext it's
fine then the kext will say to the mac f

171
00:12:13,629 --> 00:12:17,709
it is fine and then all this will
propagate backwards to the system call

172
00:12:17,709 --> 00:12:21,849
implementation and the system call may
or may not succeed but as far as Mac f

173
00:12:21,850 --> 00:12:25,059
is considered than that system call is
allowed

174
00:12:25,059 --> 00:12:29,050
now again there may be more policy
modules here and then I think about it

175
00:12:29,050 --> 00:12:32,469
that you can extend it in any way you
want or i should say in any way that

176
00:12:32,470 --> 00:12:36,639
Apple wants which is unfortunate limited
but basically this enables them to do

177
00:12:36,639 --> 00:12:42,220
any types of these policy modules
sandbox is only one of these modules and

178
00:12:42,220 --> 00:12:45,490
in fact if you're looking at your mac OS
or looking at your iOS you're going to

179
00:12:45,490 --> 00:12:51,220
see several of those the ones in iOS and
mac OS both are amphion sandbox but Mac

180
00:12:51,220 --> 00:12:55,990
OS itself also has quarantine which is
the substrate for gatekeeper although

181
00:12:55,990 --> 00:12:59,769
that really doesn't work well there's
also something called mcx which is to

182
00:12:59,769 --> 00:13:03,490
manage client extensions this is
familiar if you've done any mac OS in

183
00:13:03,490 --> 00:13:07,720
the enterprise where you can manage
applications or if you've done parental

184
00:13:07,720 --> 00:13:11,259
controls which is actually pretty nifty
feature inside mac OS and there's

185
00:13:11,259 --> 00:13:14,319
another one that's not really actively
used which is the so-called time machine

186
00:13:14,319 --> 00:13:16,880
safety net but for our purposes the main
one is

187
00:13:16,880 --> 00:13:20,510
sandbox and just by looking at the
number of operations here you see that

188
00:13:20,510 --> 00:13:24,260
sandbox gets the bulk of them a hundred
and thirty operations which correspond

189
00:13:24,260 --> 00:13:29,780
to most of the i would say useful system
calls now the idea is that you can

190
00:13:29,780 --> 00:13:35,060
decide whether a policy applies or not
by spawning the executable and when you

191
00:13:35,060 --> 00:13:40,699
spawn the executable usually do that via
fork and exok or via plastic spawn in

192
00:13:40,700 --> 00:13:44,600
both cases the implementation in colonel
goes eventually into something called

193
00:13:44,600 --> 00:13:50,540
Mac xve and this mac XP is responsible
for taking the binary and loading it but

194
00:13:50,540 --> 00:13:55,400
before it does so it will also look at
the label and that label is basically a

195
00:13:55,400 --> 00:13:59,030
con find whether or not we want to
sandbox or do not want to sandbox

196
00:13:59,660 --> 00:14:03,589
now this is where up until now
everything is like the same but from

197
00:14:03,590 --> 00:14:08,300
here it's going to diverge because the
mac OS perspective and the always

198
00:14:08,300 --> 00:14:12,410
perspective are actually they're similar
obviously but they're also profoundly

199
00:14:12,410 --> 00:14:18,140
different in the sense that mac OS is
primarily voluntary and iOS nobody's

200
00:14:18,140 --> 00:14:21,319
asking you are going to be in the
sandbox whether or not you want to so

201
00:14:21,320 --> 00:14:24,320
the original implementation actually
convey some of the name

202
00:14:24,320 --> 00:14:28,400
the idea was to originally make it as an
opt-in and they called it seatbelt kind

203
00:14:28,400 --> 00:14:30,949
of like the seatbelt that you're
supposed to buckle when you get in a car

204
00:14:30,950 --> 00:14:35,150
but you know to be honest many people
don't like seat belts the lake not in

205
00:14:35,150 --> 00:14:39,319
the backseat or on the plane you know
when they wake you up like five times on

206
00:14:39,320 --> 00:14:42,020
the 16-hour flight to tell you buckle
your seatbelts

207
00:14:42,020 --> 00:14:45,439
we're trying to do with you know sleep a
little bit so most people obviously

208
00:14:45,440 --> 00:14:50,660
cannot be relying on this seat belt
approach and that's where you've got the

209
00:14:50,660 --> 00:14:55,670
mac OS and iOS which still are going to
diverge herb but in the case of maca

210
00:14:55,670 --> 00:14:59,689
West are still going to give it semi
voluntaries what I call in the case of

211
00:14:59,690 --> 00:15:03,470
iOS it's just going to be with no
questions according to where you've been

212
00:15:03,470 --> 00:15:08,720
installed so voluntary you can still do
and that's usually calling sandbox in it

213
00:15:08,720 --> 00:15:12,290
and that's if you're in like a
responsible application developer of

214
00:15:12,290 --> 00:15:16,280
course application developers are not
responsible and so we've got the semi

215
00:15:16,280 --> 00:15:21,860
voluntary which is where apple says okay
you want to develop an app for mac OS no

216
00:15:21,860 --> 00:15:25,160
problem you want to distribute it
through the mac app store

217
00:15:25,160 --> 00:15:29,510
no problem but maybe there is a problem
we are going to do the code signing for

218
00:15:29,510 --> 00:15:30,740
you and we are going to

219
00:15:30,740 --> 00:15:35,060
force that whatever goes in through the
mac app store will actually be

220
00:15:35,060 --> 00:15:39,349
containerized and they do that via an
entitlement which is something they

221
00:15:39,350 --> 00:15:43,339
control you can actually see that for
yourself if you've got any application

222
00:15:43,339 --> 00:15:48,110
that you've installed on your mac uh I
use a tool called jail which is my own

223
00:15:48,110 --> 00:15:51,890
tool here and just be looking at some
random application like say I don't know

224
00:15:51,890 --> 00:15:56,420
Evernote which have actually never
actually used a keep using it just as a

225
00:15:56,420 --> 00:16:00,709
demo but I've never actually installed
Evernote properly you can see that it's

226
00:16:00,709 --> 00:16:04,489
got a lot of entitlements and one of
these entitlements actually says here

227
00:16:04,490 --> 00:16:08,690
somewhere there's a calm Apple security
app sandbox is true

228
00:16:09,230 --> 00:16:12,529
now the interesting thing about this
entitlement is that unlike other

229
00:16:12,529 --> 00:16:16,459
entitlements which tell you what you can
do for example you can access the device

230
00:16:16,459 --> 00:16:18,920
camera you can access the device
microphone

231
00:16:18,920 --> 00:16:23,000
this is where if you've got this is like
the Mark of Cain you will be quarantined

232
00:16:23,000 --> 00:16:27,140
you will be sandbox and there's nothing
you can do about this and that's because

233
00:16:27,140 --> 00:16:32,300
this entitlement was not provided by the
Evernote developers it was provided by

234
00:16:32,300 --> 00:16:37,099
Apple and apple in the process of code
signing this in order to make this

235
00:16:37,100 --> 00:16:40,820
distributable through the app store has
also slapped this entitlement and

236
00:16:40,820 --> 00:16:44,990
therefore that's it as soon as you have
this entitlement you will be sandbox in

237
00:16:44,990 --> 00:16:48,470
the process that will show you in a
little bit and then you've got the mac

238
00:16:48,470 --> 00:16:52,760
OS case sorry I West case and the iOS
case is a little bit different in that

239
00:16:52,760 --> 00:16:58,160
they look at where your installed so
apple applications can still opt in to

240
00:16:58,160 --> 00:17:02,480
be sandboxed but for the most part most
applications are going to be inside for

241
00:17:02,480 --> 00:17:06,170
mobile and inside for mobile there's
going to be containers where

242
00:17:06,170 --> 00:17:11,990
specifically you're looking at our
mobile containers bundle for example

243
00:17:11,990 --> 00:17:16,880
container sorry data and then you'll see
here that there's all sorts of

244
00:17:16,880 --> 00:17:22,429
applications and if you're actually
installed in this location the sandbox

245
00:17:22,429 --> 00:17:26,089
will effectively kick in and you can
actually do this with a nice little

246
00:17:26,089 --> 00:17:31,550
experiment even on a jailbroken device
so let me just put this down there that

247
00:17:31,550 --> 00:17:38,450
if i look for example here at its binary
ok so this binary j tool runs here

248
00:17:38,450 --> 00:17:44,070
because it's running from and outside
the sandbox location from user local bit

249
00:17:44,070 --> 00:17:49,110
but if i take the very same binary which
is you know this user local job whatever

250
00:17:49,110 --> 00:17:55,889
it is and I copy this to that quarantine
directory to essentially to VAR mobile

251
00:17:55,890 --> 00:18:03,120
and over here all do containers and I'll
do bundle so somewhere along the way in

252
00:18:03,120 --> 00:18:07,469
the path there's going to be very mobile
containers sorry data then somewhere

253
00:18:07,470 --> 00:18:14,040
along this path if i try to run J tool
from that location then you can see not

254
00:18:14,040 --> 00:18:18,540
here not yet but just move it one more
step further as soon as it's in a

255
00:18:18,540 --> 00:18:23,490
bundled container it will effectively be
quarantined in this way so let's just do

256
00:18:23,490 --> 00:18:27,870
this kind of hard to do this with one
hand I'm gonna try nonetheless so i'll

257
00:18:27,870 --> 00:18:34,439
move this here and so I'm putting this
into you know of our bundle and what is

258
00:18:34,440 --> 00:18:35,070
it

259
00:18:35,070 --> 00:18:41,250
application sorry and so as soon as it's
here on duh da da da

260
00:18:41,250 --> 00:18:44,760
then you can see hopefully not yet

261
00:18:44,760 --> 00:18:49,320
oh my value put it gave myself platform
application which is why it would work

262
00:18:49,320 --> 00:18:52,980
yeah so JT was not a good example
because it is a platform application but

263
00:18:52,980 --> 00:18:57,120
basically idea any other binary if you
try from whatever location would

264
00:18:57,120 --> 00:19:00,899
actually be killed on the spot again not
a good example here but you should take

265
00:19:00,900 --> 00:19:06,090
another binary now in particular how is
that going to work inside mac OS so Mac

266
00:19:06,090 --> 00:19:10,199
OS you do have containers and the
containers are slightly different than

267
00:19:10,200 --> 00:19:14,310
they would be in in iOS because in iOS
we've got this separate location which

268
00:19:14,310 --> 00:19:18,179
we can of course use but in mac OS
everything gets installed into /

269
00:19:18,180 --> 00:19:23,100
applications so instead of that you've
got your info plist that info.plist

270
00:19:23,100 --> 00:19:27,659
gives you a bundle identifier and that
bundle identifier in turn provides for

271
00:19:27,660 --> 00:19:33,480
you the you know identity of your app so
if you look at your apps you should be

272
00:19:33,480 --> 00:19:39,210
able to see that there is a library
directory in your home directory and in

273
00:19:39,210 --> 00:19:44,910
this there is a library containers and
those apps which are voluntarily sandbox

274
00:19:44,910 --> 00:19:49,350
or otherwise sandbox because of some
restriction the code signature will

275
00:19:49,350 --> 00:19:51,870
automatically have their own little
directory here

276
00:19:51,870 --> 00:19:55,350
ok so that's like the mac OS
implementation

277
00:19:55,350 --> 00:20:00,299
as of 10.75 which is like ages ago they
also put in this notion of a group

278
00:20:00,299 --> 00:20:05,429
containers which is apps that are
developed by you know multiple apps by

279
00:20:05,429 --> 00:20:09,990
the same company or same entity can
effectively share that container

280
00:20:09,990 --> 00:20:13,260
how is that really going to work so
we've got our app and our appt

281
00:20:13,260 --> 00:20:15,570
eventually I mean when it loads

282
00:20:15,570 --> 00:20:19,080
it's going to have to at some point load
live system and it's got a little bit

283
00:20:19,080 --> 00:20:23,789
system fairly soon because lip system is
the substrate or the fulcrum for all

284
00:20:23,789 --> 00:20:27,840
other api's so you have to have lip
system and you cannot avoid this load

285
00:20:27,840 --> 00:20:33,149
lift systems initializer is then going
to call Liv dispatch which is gcd now

286
00:20:33,150 --> 00:20:36,480
whether or not you're using gcd is
entirely irrelevant because that

287
00:20:36,480 --> 00:20:41,520
initializer gets called this in turn
goes and calls lipstick in it now again

288
00:20:41,520 --> 00:20:46,080
this is all done at the dylc stage
meaning you're being loaded and you

289
00:20:46,080 --> 00:20:50,820
don't have any ability to control this
is well before your main even starts and

290
00:20:50,820 --> 00:20:55,470
then your lip second it is going to go
through a couple of stages which

291
00:20:55,470 --> 00:20:58,890
eventually is going to look if you have
entitlements and if you have

292
00:20:58,890 --> 00:21:04,799
entitlements it's going to go and send
this over an ex pc pipe to another

293
00:21:04,799 --> 00:21:08,070
entity which is not you which is
security deep and that's what the

294
00:21:08,070 --> 00:21:12,689
message looks like you can see that it
has essentially is NEX pc messages had

295
00:21:12,690 --> 00:21:17,520
addiction route keys and those keys are
where you can see over here is a sandbox

296
00:21:17,520 --> 00:21:22,770
candidate and in addition there is the
intelligent dictionary security deep is

297
00:21:22,770 --> 00:21:27,000
going to make the decision whether or
not you should be quarantine and if you

298
00:21:27,000 --> 00:21:28,950
should it'll send a message

299
00:21:28,950 --> 00:21:33,240
ok let's quarantine you let's put you in
a sandbox that is and then that in turn

300
00:21:33,240 --> 00:21:37,860
will go and put you into the sandbox and
this is why i said it's like semi

301
00:21:37,860 --> 00:21:42,479
voluntary because you don't really want
to do that but the initializers that you

302
00:21:42,480 --> 00:21:47,789
have no control over do in fact do that
now there are ways around this there's

303
00:21:47,789 --> 00:21:51,090
definitely ways around this but let's
not discuss those because those

304
00:21:51,090 --> 00:21:54,120
constitute like basically
vulnerabilities and we're trying to stay

305
00:21:54,120 --> 00:21:57,928
clear of that but i will show you just
how you can show this for yourself so

306
00:21:57,929 --> 00:22:03,330
LOL DB which is the built-in debugger if
you got xcode on virtually any app that

307
00:22:03,330 --> 00:22:06,870
you want and let's just pick a random
app that I know it's going to be

308
00:22:06,870 --> 00:22:09,030
sandboxed I

309
00:22:09,030 --> 00:22:13,379
probably one of the lesser used built-in
apps let's use like I know chess

310
00:22:13,980 --> 00:22:17,790
when's the last time anybody ever play
chess on Mac OS I don't know but still

311
00:22:18,390 --> 00:22:23,070
so looking at that you'll see that it
has its container required from apps and

312
00:22:23,070 --> 00:22:27,570
box because it has a talented will be in
fact containerized and then let's do an

313
00:22:27,570 --> 00:22:33,000
LD be on it and as I do this LOL BB
right on that i'm going to run this but

314
00:22:33,000 --> 00:22:36,720
before running this i'm going to put a
breakpoint and i'll put a breakpoint on

315
00:22:36,720 --> 00:22:42,480
XP see pipe routine x pci protein is how
all of this XP see traffic is being

316
00:22:42,480 --> 00:22:47,010
carried over where there's two forms XTC
messages but the pipe gives you an

317
00:22:47,010 --> 00:22:50,820
implementation that's very much like a
unix pipe so it's kind of like an

318
00:22:50,820 --> 00:22:56,310
emulation over XP see messages i put in
the x pci protein like so and then I run

319
00:22:56,310 --> 00:22:59,940
this now as i run this is going to be
several breakpoints not all of them are

320
00:22:59,940 --> 00:23:04,050
necessarily mind the first one is
actually for launch d I can see which

321
00:23:04,050 --> 00:23:08,310
one it is by looking at the back-trace
this is not the right one this is to

322
00:23:08,310 --> 00:23:13,350
uncork the XTC implementation not what
we want so we continue and the next one

323
00:23:13,350 --> 00:23:19,320
we see here is the one that's coming off
from the x pci create which is coming

324
00:23:19,320 --> 00:23:24,120
from libsystem sec in it so that's
actually the one we want now if want to

325
00:23:24,120 --> 00:23:28,110
look at annex pc message it all is a
matter of just looking at wherever that

326
00:23:28,110 --> 00:23:32,969
message argument is in this case i can
use the very handy XP see copy

327
00:23:32,970 --> 00:23:38,640
description which is a little known but
incredibly useful debugging that latex

328
00:23:38,640 --> 00:23:43,710
pc has and i can say copy description
and I want here the first argument is

329
00:23:43,710 --> 00:23:47,940
the pipes the second argument would be
the message so that would be our SI by

330
00:23:47,940 --> 00:23:52,110
the calling convention and if you'll see
here at this is actually a message this

331
00:23:52,110 --> 00:23:56,760
is the initial handshake message so
let's continue past that and looking

332
00:23:56,760 --> 00:24:00,450
here you'll see that there's the exact
message here which says this is my

333
00:24:00,450 --> 00:24:05,280
registration with second d and look here
where it says that I'm in fact a

334
00:24:05,280 --> 00:24:10,050
candidate for the sandbox that's a bull
true as well as my entitlements and one

335
00:24:10,050 --> 00:24:14,490
of these intelligence in particular in
fact is this one which says security app

336
00:24:14,490 --> 00:24:19,230
sandbox is true so as a corollary
follows that i will in fact be sandbox

337
00:24:19,230 --> 00:24:22,179
to actually see the sandbox I need
another brain

338
00:24:22,179 --> 00:24:25,899
point which is going to be in the
internal implementation of something

339
00:24:25,899 --> 00:24:31,178
called sandbox ms and this is what they
call the sandbox Mac f system called

340
00:24:31,179 --> 00:24:34,419
notice the double underscore which
actually here would be a triple

341
00:24:34,419 --> 00:24:38,529
underscore and that's because they don't
want you to is a double scored triple

342
00:24:38,529 --> 00:24:41,409
yeah there it is double and scored
that's because they don't want you to

343
00:24:41,409 --> 00:24:45,190
use this as a symbol but then I
continued and as i continue in fact

344
00:24:45,190 --> 00:24:49,450
you'll see that in the back-trace
following the message from security we

345
00:24:49,450 --> 00:24:55,210
have in fact set up an appt sandbox for
me now again this is all before the main

346
00:24:55,210 --> 00:24:59,139
starts and if you look here at the
registers you'll see that in fact the

347
00:24:59,139 --> 00:25:05,379
mac syscall calls on the sandbox and
says I want operation number 0 which is

348
00:25:05,379 --> 00:25:09,820
basically shove me in the sandbox and
only then after i press Continue will

349
00:25:09,820 --> 00:25:12,908
this actually finally low there's a
bunch of others but then eventually this

350
00:25:12,909 --> 00:25:18,279
will you know take a while but whatever
little chest up until now chest or any

351
00:25:18,279 --> 00:25:22,570
other app for that matter has no control
over this at all

352
00:25:22,570 --> 00:25:26,350
so this is all supposed to be safe
because it happens before your main even

353
00:25:26,350 --> 00:25:26,980
starts

354
00:25:26,980 --> 00:25:30,159
and I'm leaving it as an exercise to you
to think how you could possibly

355
00:25:30,159 --> 00:25:33,159
circumvent that I mean certainly with
the debugger you could have you could

356
00:25:33,159 --> 00:25:38,649
just block the message so that's the mac
OS case and then that container that

357
00:25:38,649 --> 00:25:42,459
we're going to be put in is going to be
in library containers where all of your

358
00:25:42,460 --> 00:25:47,409
containers essentially look the same and
the way it works is we've got this i'll

359
00:25:47,409 --> 00:25:51,700
just go will push myself to that
directory so that would be my home

360
00:25:51,700 --> 00:25:58,809
directory and library and containers and
looking at that you'll see that again

361
00:25:58,809 --> 00:26:03,070
there's all these are bundles i can
actually go to come Apple chess or

362
00:26:03,070 --> 00:26:06,820
whichever one ayy want to come apple
because they all have their own little

363
00:26:06,820 --> 00:26:10,658
containers like so irrespective of which
container you choose they all look the

364
00:26:10,659 --> 00:26:14,740
same where there's a data directory and
there's a container . placed the

365
00:26:14,740 --> 00:26:19,299
container . plist if you try to look at
it is not your average plist because

366
00:26:19,299 --> 00:26:23,918
it's very big and because it's very big
it's also very binary and so you want to

367
00:26:23,919 --> 00:26:29,590
convert this to normal code which is
normal xml so we do PL you tell minus

368
00:26:29,590 --> 00:26:35,860
convert convert and then you want to do
xml one which is the format

369
00:26:35,860 --> 00:26:41,979
minus 0 minus 2b stood out and another
minus 2b stood in and pipe more and that

370
00:26:41,980 --> 00:26:46,480
gets you this nice little xml l view
where you can see that it has the

371
00:26:46,480 --> 00:26:50,440
identity and that's your effectively
your code signing identity you come

372
00:26:50,440 --> 00:26:54,730
Apple chest but it's in unicode so it's
encoded here is basically for followed

373
00:26:54,730 --> 00:26:59,890
by this very very long sandbox profile
data which is in fact the confines of

374
00:26:59,890 --> 00:27:04,120
your container which will get to very
soon after this you'll see

375
00:27:04,120 --> 00:27:08,229
following this data which is really a
huge blob you have profile data

376
00:27:08,230 --> 00:27:12,610
validation info and that again has those
very same entitlements as well as

377
00:27:12,610 --> 00:27:16,570
additional parameters which tell you
which directories are expected to be in

378
00:27:16,570 --> 00:27:21,460
and more importantly there's redirecting
paths now why those redirection will

379
00:27:21,460 --> 00:27:26,140
pass interesting because Apple here is
running into a problem they want to give

380
00:27:26,140 --> 00:27:30,040
your appt the sandboxing on the one hand
but also they want to give your appt the

381
00:27:30,040 --> 00:27:34,480
ability to access various resources
which are on your desktop downloads and

382
00:27:34,480 --> 00:27:39,820
so forth so they use a rather novel
approach which is inside data which is

383
00:27:39,820 --> 00:27:45,370
your quarantine directory they actually
have symbolic links and this of course

384
00:27:45,370 --> 00:27:49,389
is nasty because obviously symbolic
links would imply traversals and whatnot

385
00:27:49,390 --> 00:27:53,770
but that's why they have the redirect
herbal passkey they know which links are

386
00:27:53,770 --> 00:27:57,309
valid and they actually check the
targets of those links so we can simply

387
00:27:57,309 --> 00:28:02,350
do a an ln minus s & link yourself to
elsewhere so in that case it you know

388
00:28:02,350 --> 00:28:07,299
they've got things pretty well figured
out in that case now looking at iOS iOS

389
00:28:07,299 --> 00:28:09,850
is a lot more stringent than that

390
00:28:09,850 --> 00:28:13,570
so you're probably familiar with the
classic model of iOS which is very

391
00:28:13,570 --> 00:28:19,299
mobile applications uuid of your app and
then inside you've got the apt name . AP

392
00:28:19,299 --> 00:28:23,530
whatever that is and you've got the
documents library and so forth as well

393
00:28:23,530 --> 00:28:28,059
as historic it if you're doing any type
of in-app purchases and itunes and all

394
00:28:28,059 --> 00:28:28,809
that jazz

395
00:28:28,809 --> 00:28:33,940
this has changed in iOS 8 and 9 to be in
for mobile containers which have just

396
00:28:33,940 --> 00:28:37,750
shown you where you've seen me do VAR
mobile containers bundle and then

397
00:28:37,750 --> 00:28:42,700
there's application or there's our
mobile containers data then if you're in

398
00:28:42,700 --> 00:28:46,179
those paths you're automatically
sandboxed now why did they have to do

399
00:28:46,179 --> 00:28:49,450
this change because one of the things
that is a

400
00:28:49,450 --> 00:28:53,350
at the time Harold it is the ability to
share data between related applications

401
00:28:53,350 --> 00:28:58,269
and that's the same notion as they do
like in mac OS containers which is if

402
00:28:58,269 --> 00:29:01,929
you've got the same team identifier the
same code signature and you're coming

403
00:29:01,929 --> 00:29:02,500
from

404
00:29:02,500 --> 00:29:07,029
effectively the same entity they allow
you to share data in between your apps

405
00:29:07,029 --> 00:29:11,860
iOS 10 actually take this another step
further and you can see that this has

406
00:29:11,860 --> 00:29:16,360
changed like significantly and there's
two notable changes the first isn't the

407
00:29:16,360 --> 00:29:17,260
structure

408
00:29:17,260 --> 00:29:21,549
we're no longer do we have this in just
for mobile containers as before

409
00:29:21,549 --> 00:29:26,529
now we have our containers which implies
that we no longer rely on mobile which

410
00:29:26,529 --> 00:29:30,700
is that you idea of 501 which what
everything runs s the other thing is

411
00:29:30,700 --> 00:29:35,590
there's acl's access control lists and
when I say here acls I mean acl's and

412
00:29:35,590 --> 00:29:40,029
then the extended attributes that you've
got in linux as well set facl Getafe CL

413
00:29:40,029 --> 00:29:43,179
and this actually is the clearest
indication at least in my humble opinion

414
00:29:43,179 --> 00:29:47,320
that i was going to go multi-user
because otherwise they wouldn't have to

415
00:29:47,320 --> 00:29:50,830
do this and it wouldn't they would still
keep everything in our mobile so that's

416
00:29:50,830 --> 00:29:55,990
something that may not be out in iOS 10
. oh but i believe that maybe an iOS

417
00:29:55,990 --> 00:29:59,919
10.1 or something it will eventually
have to go multi-user if only because

418
00:29:59,919 --> 00:30:04,210
the competition has as well now looking
at the actual containers this means that

419
00:30:04,210 --> 00:30:08,860
we have to manage this vast directory
structure in user mode and that's why

420
00:30:08,860 --> 00:30:11,979
they have an additional demon to do that
and that demon is called container

421
00:30:11,980 --> 00:30:17,080
manager the container manager demon is
the replacement in some respect to what

422
00:30:17,080 --> 00:30:21,370
the sandbox demon once was the sandbox
demon is still something that they have

423
00:30:21,370 --> 00:30:26,678
in mac OS but in iOS no longer do we
have that and primarily the main issue

424
00:30:26,679 --> 00:30:30,700
they were combating is that people would
mess with the profiles and it's rather

425
00:30:30,700 --> 00:30:35,049
easy to do that in user mode and so now
all the profiles are put into the kext

426
00:30:35,049 --> 00:30:39,279
the colonel extension itself the
container manager d now basically has

427
00:30:39,279 --> 00:30:44,649
its own private interface and it exposes
two ports one is an ex pc port by means

428
00:30:44,649 --> 00:30:49,389
of which install d or mobile backup can
connect and setup containers when you

429
00:30:49,389 --> 00:30:53,889
install an app or you restore a nap or
you remove an app the other is a mock

430
00:30:53,889 --> 00:30:57,908
special port and the most special parts
we used primarily because we need to

431
00:30:57,909 --> 00:31:02,620
interface with the colonel or in this
case the text so all those up cause I

432
00:31:02,620 --> 00:31:03,030
meant

433
00:31:03,030 --> 00:31:07,379
are performed in this way where there's
more special port number 25 and there's

434
00:31:07,380 --> 00:31:11,220
one message one marker interface
generated message which is effectively

435
00:31:11,220 --> 00:31:16,050
this special message and then the user
proprietary undocumented of course

436
00:31:16,050 --> 00:31:21,690
format called a SB pack buff where they
basically serialize all sorts of

437
00:31:21,690 --> 00:31:25,920
requests and replies and that's a an
interesting topic in itself but extends

438
00:31:25,920 --> 00:31:32,190
our scope now one other player that we
have here is amphi their so-called apple

439
00:31:32,190 --> 00:31:36,240
mobile file integrity and this is the
arch nemesis of jailbreakers this is the

440
00:31:36,240 --> 00:31:41,670
text and the demon that make sure that
there is no way you can effectively

441
00:31:41,670 --> 00:31:47,130
escape your confines as well as in the
case of a fee run on site code so amphi

442
00:31:47,130 --> 00:31:51,570
and the sandbox text they work in very
close communication with one another

443
00:31:51,570 --> 00:31:57,240
where MP not only does it kill processes
and you know it that if anybody

444
00:31:57,240 --> 00:32:01,050
invalidates a code signature and such as
responsible for that enforcement but it

445
00:32:01,050 --> 00:32:04,919
also provides in Colonel services for
entitlements so if you want an

446
00:32:04,920 --> 00:32:09,360
entitlement inside the colonel you
generally go to MV MV exposes a set of

447
00:32:09,360 --> 00:32:13,830
AP is for you and then you say give me
the entitlement so-and-so the sandbox

448
00:32:13,830 --> 00:32:17,610
uses primarily for one special
entitlement which is called seatbelt

449
00:32:17,610 --> 00:32:23,429
profiles and CDL profiles are built-in
again as entitlements to Apple's own

450
00:32:23,430 --> 00:32:29,640
demons and that enables apples to set or
assign a particular policy for a demon

451
00:32:29,640 --> 00:32:33,360
on a demon by demon basis and again
because this is part of the code

452
00:32:33,360 --> 00:32:37,350
signature the idea is that it has to be
vetted by Apple because we're under the

453
00:32:37,350 --> 00:32:40,379
assumption that an invalid code
signature would have been killed by MP

454
00:32:40,380 --> 00:32:44,100
then there's another thing which is calm
Apple private security container

455
00:32:44,100 --> 00:32:50,340
required and this is the same opt-in
that you saw in the mac OS case only

456
00:32:50,340 --> 00:32:55,889
it's done on Apple's own applications so
for example here looking at j tool-

457
00:32:55,890 --> 00:33:01,530
minus and on applications and pick one
of the apples built-in one which are you

458
00:33:01,530 --> 00:33:06,000
know mobile mail mobile safari mobile
whatever and you'll see that there's a

459
00:33:06,000 --> 00:33:10,830
bunch of these and there is this
container required which you should be

460
00:33:10,830 --> 00:33:13,800
able to see if I just do a grip there it
is common Apple private security

461
00:33:13,800 --> 00:33:16,509
container required by virtue of this be

462
00:33:16,509 --> 00:33:19,809
link in your code signature you're
automatically be going to be

463
00:33:19,809 --> 00:33:24,219
containerized ok so that's the way it's
done there so that's all in all the

464
00:33:24,219 --> 00:33:29,349
theory now if you're looking at how one
would approach reversing the sandbox so

465
00:33:29,349 --> 00:33:34,239
the sandbox is a kernel extension which
means that in mac OS it's fairly easy to

466
00:33:34,239 --> 00:33:38,559
see because it's playing visible so in
mac OS it's a simple matter of going to

467
00:33:38,559 --> 00:33:43,149
your system library and in system
library where all your kernel extensions

468
00:33:43,149 --> 00:33:46,478
are you've got system library extensions
and then you're just looking at sandbox

469
00:33:46,479 --> 00:33:52,449
text and you'd be looking specifically
at the contents Matt costs and that will

470
00:33:52,449 --> 00:33:56,679
give you the sandbox text which is for
the most part pretty well symbolic ated

471
00:33:56,679 --> 00:34:00,609
so it's a simple matter of doing
something like j 2 minus s which is

472
00:34:00,609 --> 00:34:04,839
kinda like NM and show me all those
symbols and you can see that you've got

473
00:34:04,839 --> 00:34:09,819
all the dependencies but you've also got
if i'll do pipe more here we've also got

474
00:34:09,819 --> 00:34:14,739
a lot of the internal symbols which are
the little lowercase T those internal

475
00:34:14,739 --> 00:34:19,508
are not exported as well as a bunch that
may be exported for other techs and for

476
00:34:19,509 --> 00:34:24,909
the most part this is the main basis for
all reversing because the two are

477
00:34:24,909 --> 00:34:29,679
derived essentially from the same code
base now if you're looking at the iOS

478
00:34:29,679 --> 00:34:34,000
case in iOS all you have is one big
Colonel cash which for the longest time

479
00:34:34,000 --> 00:34:39,099
was encrypted and up until I os10 the
only way to get access to that Colonel

480
00:34:39,099 --> 00:34:43,119
was actually buy first running an
exploit that would give you arbitrary

481
00:34:43,119 --> 00:34:47,109
kernel memory read and one of the reeds
operations you do is just to dump the

482
00:34:47,109 --> 00:34:49,569
entire Colonel so you don't need to do
that anymore

483
00:34:49,569 --> 00:34:53,589
fortunately and all it takes is
basically getting the actual Colonel

484
00:34:53,589 --> 00:34:58,720
cash which you can get off any of the
iOS tips was or the OTA updates that's

485
00:34:58,720 --> 00:35:04,419
very simple and then there's a tool of
mine which is called Joker and Joker

486
00:35:04,420 --> 00:35:08,200
really the soul raised on danger of this
tool is to analyze Colonel caches that's

487
00:35:08,200 --> 00:35:12,399
why I wrote it and it's very very useful
because then you can say give me on a

488
00:35:12,400 --> 00:35:17,710
particular you know for example in iOS
10 so i think i have one or two here

489
00:35:17,710 --> 00:35:24,670
iOS 10 and then you're looking gets new
of whatever version so it's news 3789 or

490
00:35:24,670 --> 00:35:28,299
actually let's make it the latest which
is 3789 . too . too

491
00:35:29,000 --> 00:35:33,050
and then it depends of course on which a
binary looking at because there are

492
00:35:33,050 --> 00:35:36,290
different kernel implementations for
different devices but for the most part

493
00:35:36,290 --> 00:35:40,759
running joker like this will get you a
list of the kext among many of its

494
00:35:40,760 --> 00:35:44,660
features and when it gets the list of
the cats you can also say give me the

495
00:35:44,660 --> 00:35:50,810
actual text which is 2a minus uppercase
K on comm apple and you have to give the

496
00:35:50,810 --> 00:35:57,560
bundle identifier of the kext which in
this case is security . sandbox and if

497
00:35:57,560 --> 00:36:01,460
all goes well and doesn't hideously
crash it will tell you that it found it

498
00:36:01,460 --> 00:36:04,790
and notice that is also telling you that
it's resolving the symbols

499
00:36:04,790 --> 00:36:08,360
now some of the unable to resolve
symbols here is because those are

500
00:36:08,360 --> 00:36:11,930
symbols from different texts which I do
not support those are symbols coming

501
00:36:11,930 --> 00:36:16,549
from amphi and another dependent kicks
which is called the regular expression

502
00:36:16,550 --> 00:36:20,300
matcher which is Apple match . text but
for the most part noticed that it not

503
00:36:20,300 --> 00:36:26,900
only gave me the actual text which you
can see in tempe AZ com Apple security

504
00:36:26,900 --> 00:36:32,180
whatever it is but it also provided for
me the companion file which is this arm

505
00:36:32,180 --> 00:36:37,190
64 . something something something now
the arm 64 is just so you would know

506
00:36:37,190 --> 00:36:40,610
where you took it out of but the .
something something something is the

507
00:36:40,610 --> 00:36:45,740
uuid which is the same uuid and i'll
show you here for a sec it's the same

508
00:36:45,740 --> 00:36:50,209
uid that you'll see here if you look at
the X itself every text is uniquely

509
00:36:50,210 --> 00:36:57,050
marked with a UID and so that you ID
over here matches that uuid that you

510
00:36:57,050 --> 00:37:00,290
could have seen over here and that way
you know that you're looking at the

511
00:37:00,290 --> 00:37:04,640
right file and specifically if you look
further at that file you'll see that it

512
00:37:04,640 --> 00:37:08,839
gives you all the symbols which are the
external dependencies as well as more

513
00:37:08,840 --> 00:37:12,680
importantly than that all the policy
options because remember that we've got

514
00:37:12,680 --> 00:37:17,720
the text that register policies and
these policies register callbacks so

515
00:37:17,720 --> 00:37:18,980
that gives you all the callbacks

516
00:37:18,980 --> 00:37:23,240
so that's a simple matter in itself once
you know the structure of the cactus

517
00:37:23,240 --> 00:37:26,450
becomes very very easy and there's a
bunch of other tips here that i

518
00:37:26,450 --> 00:37:29,960
mentioned how you can symbolically the
rest but for the most part i'm happy to

519
00:37:29,960 --> 00:37:33,770
announce that there's like a hundred
percent of allocation of this text again

520
00:37:33,770 --> 00:37:38,750
primarily built on top of the fact that
the mac OS text really helps a lot

521
00:37:39,440 --> 00:37:42,340
if you're looking at the policy hooks
themselves this

522
00:37:42,340 --> 00:37:46,480
we're by the way if you want to look at
it in real time there's a all the stuff

523
00:37:46,480 --> 00:37:50,230
i put on the associated web page which
among other things has this companion

524
00:37:50,230 --> 00:37:55,090
file so looking at most of the hooks and
let's just do like a live one as an

525
00:37:55,090 --> 00:38:02,560
example j tool- d and let's look at the
comm whatever pipe more and so you can

526
00:38:02,560 --> 00:38:06,130
see that there is a bunch of functions
here and notice that this is all like

527
00:38:06,130 --> 00:38:10,690
being generated on the fly like from the
actual um disassembly engine of j tool

528
00:38:10,690 --> 00:38:15,340
and looking at one of those mpo policy
options for example there's mpo policy

529
00:38:15,340 --> 00:38:20,050
init init bsd syscall which we'll get to
in a little bit but let's look at one of

530
00:38:20,050 --> 00:38:26,020
the actual hooks so for example the hook
for odd and ofc ntl so that hook for F

531
00:38:26,020 --> 00:38:31,930
cntl is over here and you can see it
says mpo file check fcn tell and I chose

532
00:38:31,930 --> 00:38:35,950
fcn tell just out of random chance but
basically you can pick any one of those

533
00:38:35,950 --> 00:38:40,419
in the case of FTL the first think it's
doing is comparing one of the arguments

534
00:38:40,420 --> 00:38:45,100
of F cntl to see if this is an approved
fcn tale in which case it just short

535
00:38:45,100 --> 00:38:49,810
circuits and just doesn't do anything
that jumps to the end or are you can see

536
00:38:49,810 --> 00:38:54,160
in other cases it needs to call evaluate
and how does it do the evaluate it

537
00:38:54,160 --> 00:39:01,420
passes a buffer which is a 224 byte 0
buffer here to cred sv evaluate now

538
00:39:01,420 --> 00:39:05,320
incredibly evaluate notice you've got
like three arguments one of them is the

539
00:39:05,320 --> 00:39:11,350
actual policy of supplied argument which
is this are zero this second argument is

540
00:39:11,350 --> 00:39:16,569
here but the middle argument here is 7b
and that 7b is an operation number so

541
00:39:16,570 --> 00:39:20,620
operation numbers and you can see like
if i look at check and map then again

542
00:39:20,620 --> 00:39:23,620
we're looking at the same credits be
evaluated but this time the number is d

543
00:39:23,620 --> 00:39:27,850
if I'm looking at file check said it's
the same structure but now it's 79 in

544
00:39:27,850 --> 00:39:32,440
other words those numbers basically
encode operations and so we've got all

545
00:39:32,440 --> 00:39:37,900
these operations this in turn goes to
credit SB evaluate where maybe there is

546
00:39:37,900 --> 00:39:43,510
yeah and I incredibly evaluate you're
basically looking at the actual

547
00:39:43,510 --> 00:39:48,880
operation number that keeps on going
through that to SB evaluate and then

548
00:39:48,880 --> 00:39:54,130
what SP evaluate does is it calls eval
so just to show you how generated this

549
00:39:54,730 --> 00:39:56,020
the idea is to do here

550
00:39:56,020 --> 00:40:00,850
once I know the name of the function i
can actually disassemble the particular

551
00:40:00,850 --> 00:40:07,270
function by just saying SB evaluate like
so and if i do so it'll just give me all

552
00:40:07,270 --> 00:40:10,750
the output of the function like so but
what I really want is just to see the

553
00:40:10,750 --> 00:40:16,090
call-outs so I would do a grep to
isolate only those call-outs which is BL

554
00:40:16,090 --> 00:40:21,370
forearm 64 branch and Link and that
gives me exactly the general flow of

555
00:40:21,370 --> 00:40:25,240
call outs now mind you this doesn't have
some of the logic inside and if then

556
00:40:25,240 --> 00:40:28,899
else's but for the most part it's a very
simple way that I use a lot in order to

557
00:40:28,900 --> 00:40:34,420
see the flow if you use Ida Ida has the
x-ray feature but they don't really have

558
00:40:34,420 --> 00:40:37,660
a call-out feature which sometimes is
actually more important so you can see

559
00:40:37,660 --> 00:40:39,580
for the most part it's part of doing
this

560
00:40:39,580 --> 00:40:45,100
eval and evil is the main bulk that does
a lot of the actual profiles now what

561
00:40:45,100 --> 00:40:49,480
are these profiles so profiles are
something that you can still find in mac

562
00:40:49,480 --> 00:40:54,340
OS in their plain text form and that
plain text is actually well it's not so

563
00:40:54,340 --> 00:40:58,420
plain text it's not so readable because
it's written in this horrid horrid

564
00:40:58,420 --> 00:41:02,950
language called tiny scheme if you look
at that you'll see that there's a

565
00:41:02,950 --> 00:41:10,660
directory which is system library
sandbox and profiles like so and there's

566
00:41:10,660 --> 00:41:14,620
a bunch of these SP files here now again
I'm warning you that this is like

567
00:41:14,620 --> 00:41:19,359
probably the worst type of syntax I've
ever seen this is something when i took

568
00:41:19,360 --> 00:41:24,280
scheme as an undergrad I vowed I'd never
ever mess with it again but yeah there

569
00:41:24,280 --> 00:41:26,260
it is it comes to haunt me

570
00:41:26,260 --> 00:41:30,070
and so the idea is basically it's a very
simple language in practice where it

571
00:41:30,070 --> 00:41:34,750
shows you allow deny the operation and
then the arguments of the operations

572
00:41:34,750 --> 00:41:38,200
which you can see her for the most part
literals and there's also a very

573
00:41:38,200 --> 00:41:42,189
convoluted case of regular expressions
which are being used here but i'm not

574
00:41:42,190 --> 00:41:45,670
going to get into that one thing though
that is interesting is that these

575
00:41:45,670 --> 00:41:51,640
profiles may then be compiled and they
may also be traced and in order to do

576
00:41:51,640 --> 00:41:55,629
that you've got a tool called sandbox
exec sandbox exok is a very simple

577
00:41:55,630 --> 00:42:00,970
binary that Apple keeps close source and
it's an actual dishonest lab binary in

578
00:42:00,970 --> 00:42:04,359
the sense that it has a lot more options
and it would tell you about one of the

579
00:42:04,360 --> 00:42:08,880
main options is an undocumented minus T
which is for tracing it

580
00:42:08,880 --> 00:42:12,960
this is actually very very useful
because then you can take this and apply

581
00:42:12,960 --> 00:42:17,040
and effectively get a trace on any type
of binary that you want no there's two

582
00:42:17,040 --> 00:42:21,960
ways of doing that one is to specify a
trace profile like so which is this

583
00:42:21,960 --> 00:42:26,550
simple profile that basically allows
everything but just says I also want you

584
00:42:26,550 --> 00:42:31,140
to trace into a file and then the other
one is to just do this minus T thing to

585
00:42:31,140 --> 00:42:35,160
sandbox exec which basically uses a
different set of undocumented api's to

586
00:42:35,160 --> 00:42:38,730
perform the tracing why that's important
is because it gives you a pretty good

587
00:42:38,730 --> 00:42:44,100
idea of what the app is trying to do
while still allowing this so think about

588
00:42:44,100 --> 00:42:48,089
selinux in permissive mode where
permissive mode still allows but it will

589
00:42:48,090 --> 00:42:51,540
complain about things that you know what
it's trying to do wanna get any given

590
00:42:51,540 --> 00:42:55,440
process like that i'm also happy to
report that if you look at the actual

591
00:42:55,440 --> 00:42:59,370
website you'll see that there is the
source of sandbox exsec which are

592
00:42:59,370 --> 00:43:02,400
basically just reengineer from the
assembly and now it's fully compatible

593
00:43:02,400 --> 00:43:06,450
and more important than compatible is
the fact that you cannot compile it for

594
00:43:06,450 --> 00:43:09,990
the first time for iOS now I should
point out again that some of the

595
00:43:09,990 --> 00:43:14,520
functionality and iOS is a little bit
broken confuse me tracing doesn't really

596
00:43:14,520 --> 00:43:18,270
work without sandbox d but you can
probably work around that too if you

597
00:43:18,270 --> 00:43:21,900
bring back in older version sandboxie
and that's actually very very powerful

598
00:43:21,900 --> 00:43:22,650
tool

599
00:43:22,650 --> 00:43:26,970
the main thing about it is that you can
say sandbox exok and specify a profile

600
00:43:26,970 --> 00:43:31,680
and apply the profile automatically and
then effectively try to see what your

601
00:43:31,680 --> 00:43:36,569
application would do if it's sandbox or
if it's not sandboxed now in iOS most of

602
00:43:36,570 --> 00:43:39,480
the profiles are going to be built in
and like I said they're built into the

603
00:43:39,480 --> 00:43:45,390
cast itself on Mac OS originally had
four of these in iOS there's like

604
00:43:45,390 --> 00:43:48,750
honestly dozens and dozens still you can
find them

605
00:43:48,750 --> 00:43:52,980
you can also reverse engineering you can
decompile them the d compilation is

606
00:43:52,980 --> 00:43:57,330
actually something that shrouded in
mystery because there have been attempts

607
00:43:57,330 --> 00:44:01,500
at providing a good decompiler none of
the actual d compilers actually work

608
00:44:01,500 --> 00:44:02,310
properly

609
00:44:02,310 --> 00:44:06,690
there's a bunch of python scripts that
are purport to do that they're not

610
00:44:06,690 --> 00:44:11,070
really that effective and also the
sandbox profile language keeps on

611
00:44:11,070 --> 00:44:14,550
changing in the actual comp compiled
implementation

612
00:44:14,550 --> 00:44:18,600
now as for what this would look like an
iOS because all of this was you know the

613
00:44:18,600 --> 00:44:22,140
mac OS implementation we've seen in iOS
the main hook

614
00:44:22,140 --> 00:44:27,868
is the credit label update xve which is
basically with the callback that occurs

615
00:44:27,869 --> 00:44:33,269
when you call an XXV so this calls back
into sandbox KX sandbox cast will then

616
00:44:33,269 --> 00:44:38,069
call an fe it looking at me to see if
there's a particular seat belt profile

617
00:44:38,069 --> 00:44:42,359
that you have because if you do then
that's evil profile will apply to

618
00:44:42,359 --> 00:44:46,680
automatically if you don't it'll go and
try and contain her eyes you as any

619
00:44:46,680 --> 00:44:51,930
third-party app then there is a call to
something called PE i can haz debugger

620
00:44:51,930 --> 00:44:56,640
and this is not my invention of a name
this is the actual built-in name by

621
00:44:56,640 --> 00:45:02,190
Apple which is a something that they
used to pass a boot argument as of iOS 5

622
00:45:02,190 --> 00:45:05,160
you can't really pass boot arguments so
you can't really get that debugger

623
00:45:05,160 --> 00:45:09,569
ability unless in some jailbreaks you
can actually patch that but not anymore

624
00:45:09,569 --> 00:45:13,589
not in recent ones then you get the
signing identifier and that's the

625
00:45:13,589 --> 00:45:17,700
entitlement of application identifier
which again is provided by Apple then

626
00:45:17,700 --> 00:45:22,710
you get container required which is
already in the built-in apple apps so

627
00:45:22,710 --> 00:45:27,210
that's how we know either application
identifier or by container required that

628
00:45:27,210 --> 00:45:32,279
we need to sandbox you then we check the
sandbox spawn adders which is where user

629
00:45:32,279 --> 00:45:37,019
mode can actually say i want to start
you with a particular configuration most

630
00:45:37,019 --> 00:45:39,839
of the check here is just to make sure
that nobody's trying anything

631
00:45:39,839 --> 00:45:45,359
hanky-panky because are obviously the
spotters will dictate what the sandbox

632
00:45:45,359 --> 00:45:49,890
behavior would be following that there's
an up call as of iOS 92 container

633
00:45:49,890 --> 00:45:54,808
manager container manager is going to
specify the path where your app is

634
00:45:54,809 --> 00:45:58,650
installed and where the data container
is because the data container and the

635
00:45:58,650 --> 00:46:02,819
actual program container or not the same
once we get that we validate the

636
00:46:02,819 --> 00:46:07,529
container name we call on a built-in
sandbox create function which basically

637
00:46:07,529 --> 00:46:12,900
assigns us a default profile for all
third-party apps we set the container we

638
00:46:12,900 --> 00:46:17,490
create an extension which is kind of
like a special rule that says oh that

639
00:46:17,490 --> 00:46:20,819
executable that's outside the container
we can still access it

640
00:46:20,819 --> 00:46:26,970
we also create the actual sandbox object
and we assign it on your chaos structure

641
00:46:26,970 --> 00:46:31,470
which means that any subsequent call by
the same PID we can always get that

642
00:46:31,470 --> 00:46:35,459
sandbox and last but definitely not
least we revoke all the proof

643
00:46:35,460 --> 00:46:40,470
which ports we do not want to have
access to any ma 4x PC ports which are

644
00:46:40,470 --> 00:46:44,399
special in particular we're talking
about my special ports here such as the

645
00:46:44,400 --> 00:46:49,830
bootstrap board and such others because
if you have those you get X pc or RPC in

646
00:46:49,830 --> 00:46:53,790
general visibility which in turn could
allow you to break out the sandbox by

647
00:46:53,790 --> 00:46:57,690
exploding some other demon so if all
goes well that's basically what happens

648
00:46:57,690 --> 00:47:01,980
to all of your apps if something is awry
and something doesn't seem right

649
00:47:01,980 --> 00:47:05,640
the sandbox kill you on the spot they
basically denied the operation and you

650
00:47:05,640 --> 00:47:09,690
automatically get a kill minus nine
again this is all before you execute

651
00:47:09,690 --> 00:47:14,340
code because this is on the hook 2x sve
so they're basically guaranteeing that

652
00:47:14,340 --> 00:47:20,310
no malicious code or potentially
jailbreaking of able code would run and

653
00:47:20,310 --> 00:47:24,900
of course the ways to get past that are
of course in the very long lure of how

654
00:47:24,900 --> 00:47:26,370
one with jailbreak

655
00:47:26,370 --> 00:47:31,470
now as for the api's sandbox has a bunch
of api's which Apple keeps private

656
00:47:31,470 --> 00:47:35,669
something had been reversed some of
these have not been known up until the

657
00:47:35,670 --> 00:47:41,160
present day so basically the api's are
you can say they're into groups

658
00:47:41,160 --> 00:47:46,080
the first is libsystem sandbox and
that's primarily the calls to the kacks

659
00:47:46,080 --> 00:47:50,069
to the colonel extension which are
wrapped by very simple rappers so that

660
00:47:50,070 --> 00:47:55,260
they're easily read and readily
available vs EAP is then there's user

661
00:47:55,260 --> 00:47:59,940
lip-lip sandbox . one . x lib which
effectively handles most of the profile

662
00:47:59,940 --> 00:48:03,660
compilation and the good news about
profiles is we may not be able to

663
00:48:03,660 --> 00:48:07,980
decompile them properly but we are able
to compile them on the fly so a lot of

664
00:48:07,980 --> 00:48:11,910
the reversing i do is to basically
trying to compile compile compile keep

665
00:48:11,910 --> 00:48:16,140
changing a little bit of the profile and
then see what the actual change in the

666
00:48:16,140 --> 00:48:21,089
binary profile would be now in terms of
how to interface with the text that

667
00:48:21,090 --> 00:48:26,070
would be over max's call this is a
proprietary apple syscall which is

668
00:48:26,070 --> 00:48:29,610
actually modeled after the same sis
called in bsd but is implemented

669
00:48:29,610 --> 00:48:35,070
differently so that's this call number 3
81 and it's basically an octal style and

670
00:48:35,070 --> 00:48:39,300
the I opto-style here is this idea that
it gives you a set of numbers in each

671
00:48:39,300 --> 00:48:43,020
number provide some different
functionality and the first argument

672
00:48:43,020 --> 00:48:47,340
before that even is the name of the text
you want to interface with you can say

673
00:48:47,340 --> 00:48:49,230
sandbox to get the sandbox you can

674
00:48:49,230 --> 00:48:52,590
a quarantine in a quest to get to
quarantine and so forth and so forth

675
00:48:52,590 --> 00:48:57,240
looking at that you can see a list of
these api's but i should point out that

676
00:48:57,240 --> 00:49:02,580
these api's have in fact been constantly
changing a better list you can see if

677
00:49:02,580 --> 00:49:07,650
you're looking at the actual output of
the you're looking here at for example

678
00:49:07,650 --> 00:49:12,090
my texts so the case that i provided for
you is fully symbolic ated that makes it

679
00:49:12,090 --> 00:49:16,020
really easy but even if it weren't
symbolic ated what you want to look at

680
00:49:16,020 --> 00:49:23,940
is the hook of the policy syscall which
is somewhere here there is NPO policy in

681
00:49:23,940 --> 00:49:27,390
it no it's one after it's a give me a
second here

682
00:49:27,390 --> 00:49:30,270
yeah there it is platform policies is
called the other it is ok so we're

683
00:49:30,270 --> 00:49:33,869
looking at mpo policies call and you can
see that over here there's a switch

684
00:49:33,869 --> 00:49:38,850
statement and it's very easy to identify
switches and arm 64 code because you've

685
00:49:38,850 --> 00:49:43,920
got the ldr SW which basically takes the
value of x 10 which in this case is this

686
00:49:43,920 --> 00:49:48,359
and there's a huge switch statement
which basically handles all the cases if

687
00:49:48,359 --> 00:49:52,200
you look further with the jail output
you'll see that all this cases all these

688
00:49:52,200 --> 00:49:57,450
cases are broken for you a lot of them
are unimplemented or forbidden for you

689
00:49:57,450 --> 00:50:00,810
know being obviously too dangerous and
iOS but for the most part there's quite

690
00:50:00,810 --> 00:50:04,770
a few that are implemented for example
you can see this call inspect or you can

691
00:50:04,770 --> 00:50:08,820
see note or you can see check which are
primarily the api's that work both in

692
00:50:08,820 --> 00:50:14,160
mac OS and in iOS so looking at sandbox
check this is one of those that have

693
00:50:14,160 --> 00:50:18,509
been fully reversed and people know
about that is probably the best way that

694
00:50:18,510 --> 00:50:23,340
you can find out if certain sandbox
operation is allowed or not allowed

695
00:50:23,340 --> 00:50:28,230
without the potential of you know
untimely demise if the sandbox kills you

696
00:50:28,230 --> 00:50:32,640
and primarily how you do that is you can
check on any PID that you want that's

697
00:50:32,640 --> 00:50:37,589
pretty useful there it's part of a set
of api's that apple would use that given

698
00:50:37,590 --> 00:50:42,000
a PID it would either check if their
code signed or for example in this case

699
00:50:42,000 --> 00:50:46,710
if a sandbox operation is allowed this
is in my humble opinion the best way to

700
00:50:46,710 --> 00:50:50,820
establish the boundaries of a given
profile and in order to do that i wrote

701
00:50:50,820 --> 00:50:55,590
a simple tool which is available for
your download as open source and since

702
00:50:55,590 --> 00:51:00,450
I'm here in an open iOS session allow me
to just demonstrate the tool is simply

703
00:51:00,450 --> 00:51:01,859
called SB tool

704
00:51:01,860 --> 00:51:06,750
and it takes in a PID and then you tell
it what you want to do now some PID are

705
00:51:06,750 --> 00:51:10,410
actually on sandbox if you're going to
be on a jailbroken device yourself

706
00:51:10,410 --> 00:51:13,890
you're not sandboxed in which case the
tool says man it's moot have made me

707
00:51:13,890 --> 00:51:17,250
forget it i'm not going to check
anything but again looking at the I

708
00:51:17,250 --> 00:51:21,450
don't know for example a mobile mail or
mobile safari or any of the Mobile's

709
00:51:21,450 --> 00:51:27,480
those are actually quarantined inside
you know the implementation by com Apple

710
00:51:27,480 --> 00:51:32,280
security container required and so you
can say SB tool and you can say the PID

711
00:51:32,280 --> 00:51:37,020
551 and then you can basically say you
want to check now what can you check you

712
00:51:37,020 --> 00:51:40,920
can do all which actually doesn't work
so well and i'm still working on that

713
00:51:40,920 --> 00:51:45,060
but you can say give me all the mop
ports and this is going to spit out a

714
00:51:45,060 --> 00:51:49,529
list of all the reports with the simple
yep or note now the way it works is you

715
00:51:49,530 --> 00:51:54,930
can actually grab it and see which ports
are allowed like so or which ports are

716
00:51:54,930 --> 00:51:59,460
not allowed and that is the best way
that I can think of a finding the attack

717
00:51:59,460 --> 00:52:03,330
surface the other thing you can do is
you can say access to a particular file

718
00:52:03,330 --> 00:52:06,900
or directory so you can say for example
file of course this would mean you have

719
00:52:06,900 --> 00:52:11,730
to specify the file or directory named
TMP and it says no you're restricted or

720
00:52:11,730 --> 00:52:13,470
it could say that you're allowed

721
00:52:13,470 --> 00:52:17,399
so this is all done by sandbox check the
way I get the XP services actually

722
00:52:17,400 --> 00:52:22,320
through proprietary interface that I
call live launch d where I query launch

723
00:52:22,320 --> 00:52:26,430
di get all the XP services and I just
basically brute force which again is

724
00:52:26,430 --> 00:52:30,629
common practice when you're looking at p
IDs now the other thing which is a real

725
00:52:30,630 --> 00:52:35,400
gem is called sandbox inspect what a
sandbox inspect do it actually tells the

726
00:52:35,400 --> 00:52:39,840
sandbox give me all the information you
got so all it takes is to put in this

727
00:52:39,840 --> 00:52:44,460
inspect and you can see that it's giving
you a full explanation of what the

728
00:52:44,460 --> 00:52:49,140
sandbox profile is from the perspective
of the sandbox itself so you can see the

729
00:52:49,140 --> 00:52:53,970
size of profile the associated container
and then you've got various extensions

730
00:52:53,970 --> 00:52:59,549
and those extensions are the rules that
were provided in order to allow mobile

731
00:52:59,550 --> 00:53:03,840
mail to do what it needs to do which
wouldn't really fit in any hard-coded

732
00:53:03,840 --> 00:53:07,980
profile so that's basically this very
simple idea again SB tool with the

733
00:53:07,980 --> 00:53:13,620
inspect argument and those extensions
are you know their universe in

734
00:53:13,620 --> 00:53:15,509
themselves but to keep the long story

735
00:53:15,510 --> 00:53:20,490
short you can think of it this way most
iOS applications will get three standard

736
00:53:20,490 --> 00:53:24,810
extensions their comm Apple sandbox
executable container and application

737
00:53:24,810 --> 00:53:29,130
group of course to show you this I'll
have to look at some application which

738
00:53:29,130 --> 00:53:33,630
is fairly easy because they're all in
the same bundles there so looking for

739
00:53:33,630 --> 00:53:39,810
example actually I'm looking at IHG
priority club because now we're in hg

740
00:53:39,810 --> 00:53:45,600
property yes and so don 934 and you can
see that this is a third party and

741
00:53:45,600 --> 00:53:50,160
because it's a third-party it gets those
extensions which is to say it can access

742
00:53:50,160 --> 00:53:54,600
its own application bundle and it can
get access its own container like so

743
00:53:55,200 --> 00:53:59,970
ok but then if you looked at originally
the inspection of mobile mail Apple

744
00:53:59,970 --> 00:54:03,540
obviously gives itself more extensions
which also have to do for example with

745
00:54:03,540 --> 00:54:07,200
access to your photos and access your
address book which will be on sand box

746
00:54:07,200 --> 00:54:11,399
because mobile mail needs to do that and
it doesn't need to go through TC which

747
00:54:11,400 --> 00:54:15,030
is the transparent consent and control
that gives you all those annoying

748
00:54:15,030 --> 00:54:18,870
pop-ups now they're actual full list of
extensions is here and you can see that

749
00:54:18,870 --> 00:54:23,970
there's all of these and there's also an
API for the extensions which you can see

750
00:54:23,970 --> 00:54:28,350
which is based out of live sandbox the
actual implementations of extensions is

751
00:54:28,350 --> 00:54:32,759
a little bit more complicated than that
primarily there's a token and then

752
00:54:32,760 --> 00:54:37,320
there's this very interesting shall one
that they use inside off of a sandbox

753
00:54:37,320 --> 00:54:40,500
Sentinel which i'm not going to get into
that because we are running out of time

754
00:54:40,500 --> 00:54:45,360
anyways but it will tell you a couple of
things first of all if anything of this

755
00:54:45,360 --> 00:54:50,100
is like relevant you as if you're like
mac OS developers or iOS developers this

756
00:54:50,100 --> 00:54:55,170
is something that you have to deal with
because it is in fact a reality in iOS

757
00:54:55,170 --> 00:54:59,160
and it's coming very very soon to mac OS
as well especially with the advent of

758
00:54:59,160 --> 00:55:03,569
SIP apple is just tightening further and
further the restrictions of the sandbox

759
00:55:03,570 --> 00:55:08,910
what they do is they gently float around
to see if there's any issues if anybody

760
00:55:08,910 --> 00:55:12,960
raising concerns and if nobody does he
just tightened further still

761
00:55:12,960 --> 00:55:17,100
so it's kind of like a noose that's
slowly closing in on developer freedom

762
00:55:17,100 --> 00:55:20,730
essentially but then you've got all
these tools and I really hope that this

763
00:55:20,730 --> 00:55:25,080
will you know reinvigorate the whole
interest in the sandbox especially after

764
00:55:25,080 --> 00:55:28,650
Dionysus is great article which i think
is relevant today

765
00:55:29,250 --> 00:55:32,880
as it was five years ago which you
should totally go ahead and get and of

766
00:55:32,880 --> 00:55:36,480
course you've got all these tools and
they're all out there are also what

767
00:55:36,480 --> 00:55:39,780
you've been seeing here is effectively
an excerpt from the upcoming book which

768
00:55:39,780 --> 00:55:44,670
is mac OS the second edition mac OS and
iOS internals and this actually coming

769
00:55:44,670 --> 00:55:49,770
out in volume 3 first there's three
volumes 1 2 & 3 1 is user mode to its

770
00:55:49,770 --> 00:55:55,020
kernel mode and three is the security
and insecurity and what basically tried

771
00:55:55,020 --> 00:55:59,340
to do is like you know summarize an
entire 30 40 page chapter into this

772
00:55:59,340 --> 00:56:03,270
hour-long presentation so I hope that
was instructive and if you have any

773
00:56:03,270 --> 00:56:11,220
questions I'll be happy to take them any
questions often

774
00:56:11,220 --> 00:56:17,040
yeah so timing as well because then
we're having a coffee break up with

775
00:56:17,040 --> 00:56:19,770
questions feel free to approaching your
coffee breaks

776
00:56:19,770 --> 00:56:21,750
excellent thank you very much Jonathan

