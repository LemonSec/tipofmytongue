1
00:00:00,000 --> 00:00:18,510
good morning when everyone nice to see
all here

2
00:00:19,080 --> 00:00:25,948
thank you for coming we're going to talk
today about android security and mobile

3
00:00:25,949 --> 00:00:33,000
chipset and more specifically about
qualicum mobile chips at software if you

4
00:00:33,000 --> 00:00:39,180
are anyone like me then you're probably
expecting somewhere like juicy

5
00:00:39,180 --> 00:00:40,800
vulnerabilities right

6
00:00:40,800 --> 00:00:48,629
a-and a actually this presentation is a
result of a almost year-long research

7
00:00:48,629 --> 00:00:54,300
and then we're going to show you not one
but four Milner abilities and qualities

8
00:00:54,300 --> 00:01:01,649
chips that software a actually you know
these are not marketing slides there

9
00:01:01,649 --> 00:01:07,680
where the real thing we will walk you
through some of the exploits hopefully

10
00:01:07,680 --> 00:01:12,060
by the end of this session you will be
heck he hacking each other here in the

11
00:01:12,060 --> 00:01:16,470
audience said so those who are afraid
please turn off your mobile devices

12
00:01:17,520 --> 00:01:23,820
my name is unimodal hi My partner here
is Adam don't felled where researchers

13
00:01:23,820 --> 00:01:31,529
at mobile fifth threat prevention team
in check . and let's diving there

14
00:01:31,530 --> 00:01:40,110
well Lisa's and program very casual
slide we have seen many slides like this

15
00:01:40,110 --> 00:01:46,860
i'm sure a android architecture but I
want to focus on the Android supply

16
00:01:46,860 --> 00:01:55,649
chain actually so Android is build on
top of the regular linux kernel in in

17
00:01:55,649 --> 00:02:01,229
with slight modifications a google took
it added the android open source project

18
00:02:01,229 --> 00:02:08,008
and together they create their a the
basic like vanilla Android version that

19
00:02:08,008 --> 00:02:13,100
OMG take and adapted to their specific
devices like they want

20
00:02:13,100 --> 00:02:20,989
produce like something just HTC LG many
others they add there some their

21
00:02:20,990 --> 00:02:26,390
modifications they had their cool themes
wallpapers their revolutionary calendar

22
00:02:26,390 --> 00:02:32,570
app for the best in the market gallery
some other crap where but there is a

23
00:02:32,570 --> 00:02:40,790
missing link to this slide and it's the
chipset chipset is the most important

24
00:02:40,790 --> 00:02:43,280
part of the device hardware

25
00:02:43,280 --> 00:02:50,540
it's the CPU and the GPU and all the
sensors and some other things to it

26
00:02:50,540 --> 00:02:57,739
changes from device to device and the
chipsets comes with software because the

27
00:02:57,740 --> 00:03:03,020
operating system has to communicate with
the hardware so their device drivers and

28
00:03:03,020 --> 00:03:07,190
their created by the Chiefs that
manufacture and they're integrated in

29
00:03:07,190 --> 00:03:08,630
this process

30
00:03:08,630 --> 00:03:14,090
naturally these are very low level
things and the way low-level things work

31
00:03:14,090 --> 00:03:19,790
once there is a vulnerability you
probably have all the system compromised

32
00:03:19,790 --> 00:03:29,030
and their issue i want to stress here is
what does it take to patch such a

33
00:03:29,030 --> 00:03:33,320
vulnerability when we're talking about
the vulnerability in a simple

34
00:03:33,320 --> 00:03:38,060
application like I don't even Facebook
it probably takes Facebook a couple of

35
00:03:38,060 --> 00:03:43,130
tower hours to catch it to release it
and then phone just downloaded update

36
00:03:43,130 --> 00:03:50,120
automatically and end of story here in
the case of chips that software the

37
00:03:50,120 --> 00:03:56,210
chips that manufacture have to fix the
vulnerability to do that they have to

38
00:03:56,210 --> 00:04:01,250
communicate with the OEMs to make sure
that it is it works actually for all the

39
00:04:01,250 --> 00:04:05,270
existing devices it's backward
completely compatible or to decide that

40
00:04:05,270 --> 00:04:10,460
these devices won't get the patch and
this will this is both technical and

41
00:04:10,460 --> 00:04:16,010
bureaucratic process that takes a lot of
time and many times that's where they're

42
00:04:16,010 --> 00:04:21,620
attached fails that what prevents the
patch these bureaucratic process after

43
00:04:21,620 --> 00:04:24,919
they complete this part they have to
test it

44
00:04:24,919 --> 00:04:26,780
the Chiefs of miracle

45
00:04:26,780 --> 00:04:32,179
picture at his side and then although i
am for all the devices that have they

46
00:04:32,180 --> 00:04:40,250
decided to patch from our experience it
takes like the fastest is two months to

47
00:04:40,250 --> 00:04:47,210
patch the first device the first and
then it takes months to just spread to

48
00:04:47,210 --> 00:04:52,489
other devices and in the end of all this
process they're always devices that are

49
00:04:52,490 --> 00:04:59,930
left and patched just because they're
not compatible there isn't and not

50
00:04:59,930 --> 00:05:05,240
enough like items from this device in
the market so a in many cases it's

51
00:05:05,240 --> 00:05:12,950
vulnerable metistes relevant for a long
long period of time now add to it this

52
00:05:12,950 --> 00:05:20,690
if we're going to we're going to focus
on welcome now and the a welcome has

53
00:05:20,690 --> 00:05:28,100
65-percent around + $OPERAND minutes of
the LT market currently its many

54
00:05:28,100 --> 00:05:36,080
millions of devices so when talking
about chipset and welcome specifically

55
00:05:36,080 --> 00:05:44,900
we have a very low level component there
that is comprised of many many parts a

56
00:05:44,900 --> 00:05:51,349
many internal models like a lot of
opportunities for bags and

57
00:05:51,350 --> 00:05:56,900
vulnerabilities a very logistical
complicated supply chain that leaves

58
00:05:56,900 --> 00:06:06,200
this vulnerability is open for a very
long period and a huge victim pool so we

59
00:06:06,200 --> 00:06:13,700
didn't like did an exhaustive search of
all the components of the Koala comer

60
00:06:13,700 --> 00:06:19,219
chips that software there are really
many parts and the end it really like

61
00:06:19,220 --> 00:06:25,729
Santa's felt that you just go in you
look for it and you you will find

62
00:06:25,729 --> 00:06:27,050
something eventually

63
00:06:27,050 --> 00:06:33,080
so let's do you know the fun part

64
00:06:33,080 --> 00:06:36,830
this is our colony and

65
00:06:37,950 --> 00:06:43,110
we'll start with the vulnerabilities
call this minion devil its signal

66
00:06:43,110 --> 00:06:49,800
they're building a schmoo model continue
with their the quality in a pc router

67
00:06:49,800 --> 00:06:57,120
and then tool new abilities in corporate
and kinda roots in the GPU model so the

68
00:06:57,120 --> 00:07:08,100
first corner ability is ashman ash
minion devil a ashman is a standard

69
00:07:08,100 --> 00:07:13,230
model in android it actually it's not a
linux model

70
00:07:13,230 --> 00:07:18,660
originally it was something that
developed by google to improve a memory

71
00:07:18,660 --> 00:07:23,280
management in the Android system it's
similar in a way to a regular shared

72
00:07:23,280 --> 00:07:33,390
memory index it's basically a file-based
apia that works using file descriptors

73
00:07:33,390 --> 00:07:43,140
they hope where someone understands me a
so they welcomed they they took these

74
00:07:43,140 --> 00:07:49,950
like existing Google created model and
added to it some AP is to to add some

75
00:07:49,950 --> 00:07:55,590
functionalities they needed for their
models and we're going to look at this

76
00:07:55,590 --> 00:08:01,049
function X which the cold reading mode
now it will be like really cold and

77
00:08:01,050 --> 00:08:07,260
functions and pointers there so we have
this a get ashman file function that's

78
00:08:07,260 --> 00:08:12,510
really simple function if it receives
the file descriptor and return some

79
00:08:12,510 --> 00:08:18,030
internal . data that is associated with
this descriptor that is otherwise not

80
00:08:18,030 --> 00:08:26,820
available to the user there it we get
the file structure for the file

81
00:08:26,820 --> 00:08:35,909
descriptor this one that they get here
and then just check whether this file is

82
00:08:35,909 --> 00:08:40,199
action at a national file because the
file descriptor can be any file in the

83
00:08:40,200 --> 00:08:45,330
system and where they wanted here to get
from charity only two ashman so they

84
00:08:45,330 --> 00:08:51,600
they check if it's ashman if cheese then
return some interesting stuff

85
00:08:51,600 --> 00:09:03,000
if not just just returned nothing so it
is a really really simple function man i

86
00:09:03,000 --> 00:09:10,050
don't think there is some interesting
way to attack eat itself but as

87
00:09:10,050 --> 00:09:19,859
researchers we have to like look at it
critically and ask ourselves how do we

88
00:09:19,860 --> 00:09:29,970
actually check that the file is a
national file a the bight by the book

89
00:09:29,970 --> 00:09:37,050
approach to check a type of the file is
actually we're a little bit complicated

90
00:09:37,050 --> 00:09:44,310
you really have to go inside the
structure there there that is addressed

91
00:09:44,310 --> 00:09:49,560
by the file descriptor and actually
check that all the file operations that

92
00:09:49,560 --> 00:09:54,839
are listed there are file operations for
the file type that you actually want to

93
00:09:54,839 --> 00:10:00,300
get for example like the file operations
like read/write close

94
00:10:00,300 --> 00:10:06,120
Paul so you really have to go there and
check that is really actually ash memory

95
00:10:06,120 --> 00:10:12,180
is right actually ashman right is ball
is actually ashman pole because it can

96
00:10:12,180 --> 00:10:17,670
be theoretically anything it can be
socket read socket right so that's the

97
00:10:17,670 --> 00:10:24,660
there by the book approach and which is
complicated you know you have to compare

98
00:10:24,660 --> 00:10:31,380
pointers and it's I I understand them
that they decided to take a shortcut

99
00:10:33,000 --> 00:10:43,019
they just assumed that if a file is
called ashman then probably it's and

100
00:10:43,019 --> 00:10:45,360
ashman what else could it be

101
00:10:45,360 --> 00:10:57,630
ok so we see then we feel like okay now
it's so easy let's just exploit that

102
00:10:57,630 --> 00:11:03,389
right away and get those a escalated
permissions

103
00:11:04,620 --> 00:11:13,350
so all we need to do is just create the
file and put it in a rout mounting . but

104
00:11:13,350 --> 00:11:21,150
we cannot do it because the roof mounted
. is read-only moreover other mounting

105
00:11:21,150 --> 00:11:28,290
crude mounting points are read-only to
an Android and if anyone thinks about is

106
00:11:28,290 --> 00:11:29,069
the cards

107
00:11:29,070 --> 00:11:32,850
it's a a symbolic link so it won't help

108
00:11:33,510 --> 00:11:45,900
they're so a we're not screwed the
redistribution a long long ago in a land

109
00:11:45,900 --> 00:11:55,620
far far away when android was young and
reckless a when probably nobody of us

110
00:11:55,620 --> 00:12:03,270
was alive because it was like three or
four years ago a a android market didn't

111
00:12:03,270 --> 00:12:09,630
allow allow applications larger than 100
megabytes to be stored and download from

112
00:12:09,630 --> 00:12:14,730
the market but there were applications
mostly games that will require much more

113
00:12:14,730 --> 00:12:19,890
than 100 megabytes for all the textures
and I don't know the stuff they do

114
00:12:19,890 --> 00:12:26,760
they're they're so a google created a
way to solve that problem that it's

115
00:12:26,760 --> 00:12:34,170
called opaque Viner blow a actually like
the name itself when they read the big

116
00:12:34,170 --> 00:12:39,750
banger blow by you think about roll its
must be some like dread pirate Rogers or

117
00:12:39,750 --> 00:12:40,890
something

118
00:12:40,890 --> 00:12:49,050
so a big banner globe is a way to a to
create your own file system to download

119
00:12:49,050 --> 00:12:54,060
a file system from your old sounds
server to mount it for yourself it's

120
00:12:54,060 --> 00:12:59,369
like really for personal use only and
then there can be all their extra data

121
00:12:59,370 --> 00:13:04,200
your application needs and use it as
usual files it's really for applications

122
00:13:04,200 --> 00:13:08,820
like usual files for that matter and
since it's it's private for the

123
00:13:08,820 --> 00:13:13,740
application it doesn't require some
permissions it's really like you to its

124
00:13:13,740 --> 00:13:18,339
bare naive and nothing bad can come out
of it

125
00:13:18,339 --> 00:13:27,339
but since a core in our chips that code
they decided to just check the file name

126
00:13:27,339 --> 00:13:35,350
and not check on which file system which
is or things like that we all we need is

127
00:13:35,350 --> 00:13:44,740
just to create an OB be put there the
file will all internal that data that we

128
00:13:44,740 --> 00:13:50,079
want to point it to all the interesting
places that are always access to all the

129
00:13:50,079 --> 00:14:02,378
interesting stuff mounted and use APA
and the devices hours

130
00:14:02,379 --> 00:14:10,480
that was the ashman and it was not the
most interesting one for the most

131
00:14:10,480 --> 00:14:17,709
interesting why would like to wear s
Adam Donal felt as actual the mastermind

132
00:14:17,709 --> 00:14:25,209
behind their this exploitation and can
be good

133
00:14:26,230 --> 00:14:29,649
great so going on to quote

134
00:14:30,790 --> 00:14:39,759
ok so quote is a vulnerability in the
IPC mechanism of qualicum it's simply in

135
00:14:39,759 --> 00:14:45,879
USA family in the system like an error
socket and it reminds the averages of

136
00:14:45,879 --> 00:14:52,300
IPC mechanisms accept this is a few
interesting features for example and

137
00:14:52,300 --> 00:14:56,920
it's okay i can be widely store better
or black list our endpoints in the

138
00:14:56,920 --> 00:15:03,219
system based on their group IDs for
example and another cool feature which

139
00:15:03,220 --> 00:15:08,529
are going to focus on is that I can
monitor all creation or destruction of

140
00:15:08,529 --> 00:15:13,629
new sockets in this as family everything
about it obviously requires no

141
00:15:13,629 --> 00:15:20,709
permission to use that and so there are
four types of this endpoint of the

142
00:15:20,709 --> 00:15:26,768
socket and we're going to fold to focus
only on client port and control ports

143
00:15:26,769 --> 00:15:29,480
mainly because the waters requires

144
00:15:29,480 --> 00:15:35,180
require help a high privileges to use
them so every time you create a new

145
00:15:35,180 --> 00:15:41,359
socket it is by default a client port
sockets now a client for target is a

146
00:15:41,360 --> 00:15:44,899
program that can communicate with our
sockets it can send and receive messages

147
00:15:44,899 --> 00:15:52,399
in this address family now control court
is a different type of circuit we

148
00:15:52,399 --> 00:15:57,709
created almost there in the same way but
control but cannot communicate with our

149
00:15:57,709 --> 00:16:03,290
endpoints it will only receive messages
for creation or destruction of new

150
00:16:03,290 --> 00:16:10,189
circuits in this address family so how
do we create a control port and we just

151
00:16:10,190 --> 00:16:14,990
have to octal are currently our current
client port sockets

152
00:16:14,990 --> 00:16:20,449
so as we can see here in the function
and the function first locks are a

153
00:16:20,449 --> 00:16:26,329
client fourth circuit so we cannot issue
to our hotel simultaneously on the same

154
00:16:26,329 --> 00:16:32,149
circuits in the same time and then
according to our request it a issues

155
00:16:32,149 --> 00:16:37,760
specific operations in our case a
reissue IPC water I october and control

156
00:16:37,760 --> 00:16:44,389
port our plan for will be converted to
control port and now how is the

157
00:16:44,389 --> 00:16:49,519
conversion actually done so for each
leaf or a chair socket there is a list

158
00:16:49,519 --> 00:16:53,180
so there's a list of the client ports
and there is another list for the

159
00:16:53,180 --> 00:16:57,829
control ports and the conversion is
basically taking object of taking a

160
00:16:57,829 --> 00:17:03,260
socket from list a and put the gate and
lists be so the actual conversion

161
00:17:03,260 --> 00:17:09,020
function for those of you who are not
familiar with the Linux a API this

162
00:17:09,020 --> 00:17:13,730
function blocks the client list and we
have to do that because we want to

163
00:17:13,730 --> 00:17:19,069
prevent race conditions or modifications
on the list while reading it then we

164
00:17:19,069 --> 00:17:23,569
take the object out from his current
list which is the clients a port list

165
00:17:23,569 --> 00:17:28,879
then we unlock the client list we love
the control parts list we add the object

166
00:17:28,880 --> 00:17:34,010
to the control to control parts list and
we are going to control parts list and

167
00:17:34,010 --> 00:17:39,559
seems pretty straightforward and yet
this function is vulnerable so now let's

168
00:17:39,559 --> 00:17:41,750
examine step-by-step dysfunction

169
00:17:41,750 --> 00:17:48,260
to see if we can find the vulnerable
code so the first instruction locks the

170
00:17:48,260 --> 00:17:53,960
client list then we take the object out
from his list and then we unlock the

171
00:17:53,960 --> 00:17:59,000
client list we love the control list we
had the object to the control list and

172
00:17:59,000 --> 00:18:04,850
then we unlock it seems pretty
straightforward and it looks ok because

173
00:18:04,850 --> 00:18:07,850
so far which wasn't it okay

174
00:18:10,190 --> 00:18:17,390
what happens then if we try to convert a
control board to a control board that's

175
00:18:17,390 --> 00:18:23,600
perfectly OK with the system at least
this was before the pet so we look the

176
00:18:23,600 --> 00:18:28,639
client list we take the object out from
his list which is not the client list

177
00:18:29,750 --> 00:18:34,310
we're not the client list and we do the
same look at the control list and we add

178
00:18:34,310 --> 00:18:41,360
the object here so as you can see
although we lock the client list we

179
00:18:41,360 --> 00:18:48,439
modify the control list which is not
locked and that's a tricky situation so

180
00:18:48,440 --> 00:18:54,710
there were after something here we can
modify the control parts list without a

181
00:18:54,710 --> 00:18:55,370
lock

182
00:18:55,370 --> 00:18:59,479
so you can delete to object time and
tenuously from the list and therefore we

183
00:18:59,480 --> 00:19:05,510
have a race condition situation here and
now let's see what happens when we

184
00:19:05,510 --> 00:19:11,120
actually remove two objects
simultaneously from the list so that

185
00:19:11,120 --> 00:19:16,280
part is a little bit how to follow here
we can see the API in the linux kernel

186
00:19:16,280 --> 00:19:21,740
that handles removal of objects from
doubling list

187
00:19:21,740 --> 00:19:28,130
we're going to remove a and B here and
we would feel to walk on a so we can see

188
00:19:28,130 --> 00:19:32,180
here and more information if you miss
something you can just look at super

189
00:19:32,180 --> 00:19:37,550
cold here as you can see for example
here we take days next which is being

190
00:19:37,550 --> 00:19:42,379
and we set is better which said base
proved to be a 12

191
00:19:42,380 --> 00:19:52,070
so these brave equals control ports now
since there is no lock on the list them

192
00:19:52,070 --> 00:19:53,980
at their contact laconic switch

193
00:19:53,980 --> 00:19:59,530
and now we're going to remove be while
preserving the modification that was

194
00:19:59,530 --> 00:20:05,470
that happened on a context so we taken
out be spread his next which is c +

195
00:20:05,470 --> 00:20:12,100
reset sees prev to be this proof so
these particles control ports now going

196
00:20:12,100 --> 00:20:18,549
to the next instruction we take these
brave which is control ports and he said

197
00:20:18,549 --> 00:20:26,410
control ports next to bc so controller
ports or not . to see now finally be we

198
00:20:26,410 --> 00:20:32,049
know . to the poison values and it is
effectively and they're removed from the

199
00:20:32,049 --> 00:20:37,870
list the memories offer free so it can
be reclaimed a by spraying the kennel

200
00:20:37,870 --> 00:20:45,129
heap and now going back to a to finish
the process we take a spread so control

201
00:20:45,130 --> 00:20:53,110
ports and said it's next to be a next so
control ports next equals B and finally

202
00:20:53,110 --> 00:21:00,100
and now also points to the poison values
and it is removed from the list now

203
00:21:00,100 --> 00:21:05,799
obviously it's not a valid doubling list
anymore so let's let's remove all the

204
00:21:05,799 --> 00:21:13,750
unused object from the list its and we
get something interesting here so the

205
00:21:13,750 --> 00:21:20,080
control parts list now points to a free
reclaimable data we using just spring

206
00:21:20,080 --> 00:21:24,159
just any label ok there are a lot of way
to spread the hip

207
00:21:24,160 --> 00:21:29,470
we chose unix diagrams and unix diagram
and we managed to reclaim it we managed

208
00:21:29,470 --> 00:21:34,419
to fade this object now once you take
the object we want the system to use it

209
00:21:34,419 --> 00:21:40,690
now since this is the list of the
monitoring objects we all have to do to

210
00:21:40,690 --> 00:21:47,049
get the system to use it is just create
or destroy any endpoint in this undated

211
00:21:47,049 --> 00:21:52,629
personally so by closing a client
support the list will be iterated now

212
00:21:52,630 --> 00:21:57,580
it's time to let the list is iterated
function called post pocket report will

213
00:21:57,580 --> 00:22:06,100
be called on each object now here we
have a lot of new opportunities i think

214
00:22:06,100 --> 00:22:06,850
there is at least

215
00:22:06,850 --> 00:22:13,870
and not in one way to exploit this
vulnerability it had a way to exploit

216
00:22:13,870 --> 00:22:19,719
here you can see all the this is our
objects so that a lot of primitives from

217
00:22:19,720 --> 00:22:24,130
information disclosure to create
functional primitives to memory

218
00:22:24,130 --> 00:22:29,470
corruption and I think they're even more
stuff and if we chose to exploit it was

219
00:22:29,470 --> 00:22:37,120
using a wake up and so what is wake up
wake up is a macro to another function

220
00:22:37,120 --> 00:22:42,729
called wake up common so we can see that
we control the first we have one hundred

221
00:22:42,730 --> 00:22:47,860
percent control over the content of the
first argument and therefore we can

222
00:22:47,860 --> 00:22:53,530
control q now if you control q you can
also control task list so this entire

223
00:22:53,530 --> 00:22:58,960
iteration will be done on our fully
control list so therefore we control

224
00:22:58,960 --> 00:23:01,210
kerr and if you control her

225
00:23:01,210 --> 00:23:09,190
we have a new primitive we can call any
camera function y controlling most of

226
00:23:09,190 --> 00:23:13,780
the first parameter for those of you who
don't ask why don't we call user mode

227
00:23:13,780 --> 00:23:21,670
function that because we we want to
bypass the extent or the Army Air snap

228
00:23:21,670 --> 00:23:27,820
so the ability of a color function
called to any kernel function while you

229
00:23:27,820 --> 00:23:32,080
control most of the first parameter now
the most convenient way to continue for

230
00:23:32,080 --> 00:23:37,149
here is calling a function called commit
grids elusive you're not familiar with

231
00:23:37,150 --> 00:23:42,520
this function it's a linux kernel
function that receives a pointer to a

232
00:23:42,520 --> 00:23:45,940
credential strength and then it just
sets are for a

233
00:23:46,840 --> 00:23:52,780
and preconditions to be the ones we put
provided s-parameter here so we can just

234
00:23:52,780 --> 00:23:59,230
pass huge potentials and we can get to
it but it's not our current for a pivot

235
00:23:59,230 --> 00:24:02,380
primitives are not good enough

236
00:24:02,380 --> 00:24:09,610
why is that as you can see here Frank is
derived from curve now if you want one

237
00:24:09,610 --> 00:24:15,399
hundred percent control over curve so we
cannot recall any function we want and

238
00:24:15,400 --> 00:24:18,910
if you want to get the full available
for the available capabilities on the on

239
00:24:18,910 --> 00:24:26,320
the system we cannot we cannot call a
call it control it so we need to update

240
00:24:26,320 --> 00:24:31,570
our derivatives to get one hundred
percent control of the function so we

241
00:24:31,570 --> 00:24:36,159
have to find another function that by
controlling just a little bit from its

242
00:24:36,160 --> 00:24:42,370
first parameter we can get it we can get
another primitive of function call but

243
00:24:42,370 --> 00:24:48,550
now we want to control one hundred
percent of the first parameter so it's

244
00:24:48,550 --> 00:24:55,210
fun good candidate USB with done walking
fan is a function that receives a

245
00:24:55,210 --> 00:25:00,280
parameter now since there is a container
off we really have now 100-percent

246
00:25:00,280 --> 00:25:03,129
control over the interesting stuff in ch

247
00:25:03,130 --> 00:25:07,720
and if you control CH we also control
work because this is a pointer and

248
00:25:07,720 --> 00:25:15,190
records device from CH and now combining
this to a verbal together we get in your

249
00:25:15,190 --> 00:25:19,720
primitive we can call any kind of
function we want while you control the

250
00:25:19,720 --> 00:25:24,940
pointer of the first parameter and now
we can just . we can joke with

251
00:25:24,940 --> 00:25:29,860
100-percent control over the first part
is actually over the first free of them

252
00:25:29,860 --> 00:25:33,939
but we just need the first one so now
every time you want to go function

253
00:25:33,940 --> 00:25:38,620
through so we're going to wake up common
because that's a function we had in

254
00:25:38,620 --> 00:25:43,959
post-market port then they go to our
gadgets us be redone walking pen which

255
00:25:43,960 --> 00:25:48,160
eventually allows us to call any arrow
Kenneth J any kind of function in the

256
00:25:48,160 --> 00:25:54,790
system while controlling one hundred
percent of the first three particles and

257
00:25:54,790 --> 00:25:59,570
now have sufficient from a primitive to
school of the device and get us

258
00:25:59,570 --> 00:26:04,850
with capabilities so again the
exploitation flow there is a doubly

259
00:26:04,850 --> 00:26:10,909
linked list of the monitoring endpoints
in the system each time we open or

260
00:26:10,910 --> 00:26:16,940
closed and a socket in this system the
list is iterated so now using the

261
00:26:16,940 --> 00:26:24,860
vulnerability we want the list 2.2 free
reclaimable data so once we do at our

262
00:26:24,860 --> 00:26:31,760
next step is to spray the killer hip to
reclaim this a this up this data and we

263
00:26:31,760 --> 00:26:37,250
used instagrams but i'm sure there are
convenient spring mechanism to help you

264
00:26:37,250 --> 00:26:43,280
with yet so once we do that we have
control over the object and we want to

265
00:26:43,280 --> 00:26:47,930
point back to the beginning of the list
to prevent situations where Asians will

266
00:26:47,930 --> 00:26:53,060
request the system and now we want the
system to use a fake object so we just

267
00:26:53,060 --> 00:26:59,690
have to create or close any endpoint in
this list in this system and then it is

268
00:26:59,690 --> 00:27:07,490
our fake object and then it starts or a
fake a chain of function calls so fries

269
00:27:07,490 --> 00:27:13,070
to go to wake up common then it uses our
faith task list and eventually it starts

270
00:27:13,070 --> 00:27:17,810
to call some functions so the fix the
first function we call was curious

271
00:27:17,810 --> 00:27:24,500
coolest Dale which clears up the control
ports list the this is this is this is

272
00:27:24,500 --> 00:27:29,390
mandatory to prevent the list from being
corrupted and if there will be any

273
00:27:29,390 --> 00:27:31,820
legitimate is it legitimate use of the
list

274
00:27:31,820 --> 00:27:36,649
the system won't crash this is the
second function we call is enforcing

275
00:27:36,650 --> 00:27:42,170
setup which effectively vendors s it
looks useless because if you it will be

276
00:27:42,170 --> 00:27:48,110
permissive and finally we call commit
grades and then we have roots and we

277
00:27:48,110 --> 00:27:53,689
have the full couple possibilities
available on the system so yeah we want

278
00:27:53,690 --> 00:28:02,750
and now the time and so I'm sorry for
the windows it was just for the

279
00:28:02,750 --> 00:28:07,520
recording so now we're starting all our
routing APK

280
00:28:08,100 --> 00:28:13,649
now and we're going to see that the
linux version is indeed the legitimate

281
00:28:13,650 --> 00:28:19,679
version of that comes with a witch warm
that google books supplies would like to

282
00:28:19,679 --> 00:28:24,630
see I hope you can see and we're going
to see that the device is actually a

283
00:28:24,630 --> 00:28:31,110
marshmallow version android they're also
going to say that the device is not

284
00:28:31,110 --> 00:28:36,389
rooted and that we are actually in what
words and also we can see here that s he

285
00:28:36,390 --> 00:28:42,120
knocks is currently enforcing so this
mechanism is back then was available for

286
00:28:42,120 --> 00:28:47,100
any unprivileged application now our
exploits eventually the pill can be

287
00:28:47,100 --> 00:28:51,629
changed obviously but the payload we
chose was first placing a certified in

288
00:28:51,630 --> 00:28:52,500
the system for me

289
00:28:52,500 --> 00:29:00,390
partition and also we set up a service
on port 1337 it's an ethical service we

290
00:29:00,390 --> 00:29:05,580
just can connect to the service sends
text commands which will be issued its

291
00:29:05,580 --> 00:29:10,949
roots so now we are going to see that
the system from a partition is there is

292
00:29:10,950 --> 00:29:18,270
nothing special in its end that our
service in 127 is currently is not

293
00:29:18,270 --> 00:29:22,799
available now in the system partition
there would be a file called so again

294
00:29:22,799 --> 00:29:28,918
which is accessing German and that's
going to be outside file so now we're

295
00:29:28,919 --> 00:29:33,419
going to exploit to actually exploit the
vulnerability so we're going to see some

296
00:29:33,419 --> 00:29:42,000
low cats crap and it takes approximately
three seconds to exploit the

297
00:29:42,000 --> 00:29:48,870
vulnerability from the point of no
permissions kill your route because I

298
00:29:48,870 --> 00:29:53,908
didn't invest so much time in the GUI
have to say way like five more seconds

299
00:29:53,909 --> 00:30:06,390
so this . want the exploits is already
done and now we're going to see that we

300
00:30:06,390 --> 00:30:12,690
are still not running its roots and but
is it looks is no longer for think it is

301
00:30:12,690 --> 00:30:13,950
no permissive

302
00:30:13,950 --> 00:30:19,740
and if we try to netcat you are watching
37 service

303
00:30:20,279 --> 00:30:23,700
we're going to want going to get
connection refused anymore and if you

304
00:30:23,700 --> 00:30:27,059
read the system now we see that there is
it so can file which is the source file

305
00:30:27,059 --> 00:30:33,000
and we're going to read f-stop which is
only accessible to users so we're going

306
00:30:33,000 --> 00:30:34,799
to see that we are actually would

307
00:30:34,799 --> 00:30:41,250
and by HOA issuing the idea comments
where roots and we have the full

308
00:30:41,250 --> 00:30:49,559
capabilities available on the system and
the demo i hope you liked it so now

309
00:30:49,559 --> 00:30:54,600
going to the last two vulnerabilities
and you know

310
00:30:54,600 --> 00:31:01,709
Colin's war map the left or in the GPU
module Cinco & Ken goat but before we

311
00:31:01,710 --> 00:31:07,620
speak about in code we have to speak for
30 seconds about a mechanism called IDR

312
00:31:07,620 --> 00:31:12,570
so idea is a little skill mechanism so
in fact it has nothing to do it

313
00:31:12,570 --> 00:31:17,250
android me and reduce the act but it's
not but it's not something that was

314
00:31:17,250 --> 00:31:23,190
introduced in the android vanilla now
this because it mechanism help sweets

315
00:31:23,190 --> 00:31:28,230
map it allows user mode to reference
Carol objects without revealing

316
00:31:28,230 --> 00:31:32,820
sensitive channel addresses so let's say
that

317
00:31:32,820 --> 00:31:38,279
user-created once a user creates an
object it ask the scandal to wish to

318
00:31:38,279 --> 00:31:43,500
create an object now the canal allocated
data initialized stuff and now we have a

319
00:31:43,500 --> 00:31:49,139
killer . er now obviously we don't want
to give the user any information about

320
00:31:49,139 --> 00:31:52,979
if we don't want to give you that this
can address because that would be an

321
00:31:52,980 --> 00:31:57,389
information disclosure so instead the
killer passes this address to the idea

322
00:31:57,389 --> 00:32:02,939
of mechanism which Maps between this
address and between a number and instead

323
00:32:02,940 --> 00:32:08,070
of giving these are back the can address
it returns user this number and every

324
00:32:08,070 --> 00:32:13,918
time the user wants to use this object
for everything for the for destruction

325
00:32:13,919 --> 00:32:20,340
for whatever it will give the candle
this number instead of the address and

326
00:32:20,340 --> 00:32:27,600
with this in mind time to introduce you
to see codes so in code is a formal bit

327
00:32:27,600 --> 00:32:32,070
city in an object called sinks or and
the object is used to synchronize

328
00:32:32,070 --> 00:32:37,110
between the GPU and calmly currently
running applications applications don't

329
00:32:37,110 --> 00:32:44,010
use it themselves usually wrapped by
autographic engines like open jail and

330
00:32:44,010 --> 00:32:50,190
soon by WebGL a two point oh and I
wouldn't have to know a lot about about

331
00:32:50,190 --> 00:32:53,880
this object to understand the
vulnerability all have to do is knowing

332
00:32:53,880 --> 00:32:58,350
how to create and how to destroy them
and this is done by issuing two

333
00:32:58,350 --> 00:33:05,370
cocktails cocktail AK Giselle sinks off
great and destroy we send them to the

334
00:33:05,370 --> 00:33:14,399
cage it to / / / ksl a 30 and driver and
they are referenced by the idea

335
00:33:14,400 --> 00:33:21,990
mechanism that we saw before so that's a
function that destroys this object and

336
00:33:21,990 --> 00:33:26,789
it's pretty straightforward user control
data and therefore it control program

337
00:33:26,789 --> 00:33:32,158
and comedy know that is sanitized very
well so I did I mean we didn't really

338
00:33:32,159 --> 00:33:35,400
look into that we did but we didn't find
anything interesting

339
00:33:35,400 --> 00:33:42,750
now here we see it we fetch the ID from
the eye dr table and then if this thing

340
00:33:42,750 --> 00:33:47,880
so object exists so we dropped Rifkin
trice once for the creation of the

341
00:33:47,880 --> 00:33:53,250
object and another one in again because
this function increases the ref one by

342
00:33:53,250 --> 00:34:00,659
one so how does it actually look like
and the ref can start with one then this

343
00:34:00,659 --> 00:34:06,750
function increases its 22 then the
defcon stopped once for the creation and

344
00:34:06,750 --> 00:34:12,210
it is what it is it is dropped again for
the because this function to carry and

345
00:34:12,210 --> 00:34:18,000
also and here the object is actually
destroyed but something is missing here

346
00:34:18,000 --> 00:34:25,379
there is no check that the object is a
boat about to be destroyed so what

347
00:34:25,379 --> 00:34:32,879
happens if we call this destroy this toy
function on two different threads so we

348
00:34:32,879 --> 00:34:36,899
have friday and we have for me and
they're both going this destroyed

349
00:34:36,899 --> 00:34:39,850
function on the same object so first

350
00:34:39,850 --> 00:34:46,929
Friday increases the ref count by one
and then drops its to a drops back now

351
00:34:46,929 --> 00:34:51,489
there might be a context switch Fred be
increases the ref one by one and then

352
00:34:51,489 --> 00:34:53,020
drops it back again

353
00:34:53,020 --> 00:35:01,210
now going back to a BF counties drops to
0 and at this point the object is

354
00:35:01,210 --> 00:35:08,440
actually defect or freed and it can be
reclaimed by spraying the kettle hip but

355
00:35:08,440 --> 00:35:10,150
he is not done yet

356
00:35:10,150 --> 00:35:15,850
so at this point we can spray the object
to do what everyone and we will drop the

357
00:35:15,850 --> 00:35:22,390
restaurant again in a 2-1 or widowed our
new object 20 and then we might free

358
00:35:22,390 --> 00:35:24,730
another object so again

359
00:35:24,730 --> 00:35:31,120
first we create a six or subjects we get
an idea number issue a destroyer request

360
00:35:31,120 --> 00:35:34,960
on this two different idea our numbers
there on the on the same idea number

361
00:35:34,960 --> 00:35:41,440
sorry and then thereafter with a drop to
minus one before we get to minus 1 we

362
00:35:41,440 --> 00:35:47,410
can support the kennel heap and we can
cause it to free our new fake object

363
00:35:47,410 --> 00:35:53,410
therefore we can do interesting stuff
and that's when they're we ever double

364
00:35:53,410 --> 00:35:59,259
play which is the factor can call we can
get to use of the situation so that was

365
00:35:59,260 --> 00:36:07,060
in codes now finally going to quotes so
qualities vulnerability in the main gpo

366
00:36:07,060 --> 00:36:12,100
rapper module and it's actually the
model that connect between the user and

367
00:36:12,100 --> 00:36:21,279
the how they killed the GPU how drivers
so users can map and use the data to the

368
00:36:21,280 --> 00:36:27,040
GPU the hit there are a lot of ways to
do that you're making a user addresses

369
00:36:27,040 --> 00:36:33,670
mapping file making ash men and we can
just we just have to choose our method

370
00:36:33,670 --> 00:36:39,460
and each time we do that and internal
struct call called cages sedimentary is

371
00:36:39,460 --> 00:36:45,130
located and it's contains a lot a lot of
important data over I about our mapping

372
00:36:45,130 --> 00:36:52,310
it controls the protection of our
mapping address count the actual address

373
00:36:52,310 --> 00:36:58,220
many are important important stuff now
the mapping is referenced again by the

374
00:36:58,220 --> 00:37:03,799
other mechanism so the first thing we
did was going to the destroying function

375
00:37:03,800 --> 00:37:19,370
as we can see and that's the internal
structure told you about and again using

376
00:37:19,370 --> 00:37:23,420
the other mechanism will check where
this entry exists and if it does the

377
00:37:23,420 --> 00:37:28,040
free so we are super happy because we
thought okay maybe they were wrong again

378
00:37:28,040 --> 00:37:35,660
but surprisingly this function was very
well written it atomically checks

379
00:37:35,660 --> 00:37:40,940
what are the object is about to be
destroyed and if it is then it's it if

380
00:37:40,940 --> 00:37:45,590
it's not it will be developed but for
the next story call it won't

381
00:37:45,590 --> 00:37:53,030
so this time a a limit almost perfect so
when to the function that initializes

382
00:37:53,030 --> 00:38:00,800
this this data so this function is
called after every map requests it

383
00:38:00,800 --> 00:38:07,160
receives a block of uninitialized data a
courageous elementary and then its

384
00:38:07,160 --> 00:38:13,370
associates it with an idea number and it
initializes it and there was a problem

385
00:38:13,370 --> 00:38:20,089
because after this . this object and
reference even though it is not

386
00:38:20,090 --> 00:38:26,450
meteorite yet so let's see the
legitimate use of how should you use

387
00:38:26,450 --> 00:38:32,839
this API friday creates allocated a I
mean that's this code is done in the

388
00:38:32,840 --> 00:38:33,530
colonel

389
00:38:33,530 --> 00:38:39,440
so the candle afraid a allocates data
but it doesn't initialize it then its

390
00:38:39,440 --> 00:38:48,260
associated with an idea number and then
it initializes and the object now the

391
00:38:48,260 --> 00:38:54,860
release of Fred checks whether number
six exists if it is it passes the check

392
00:38:54,860 --> 00:39:01,700
and then it's free the data now
obviously it's a matter of context

393
00:39:01,700 --> 00:39:05,669
switching what happens if Fred a
alligator

394
00:39:05,670 --> 00:39:11,250
that and now we know that our last
object was number five so here it will

395
00:39:11,250 --> 00:39:16,589
forward hundred percent will be number
six because that's how idea walks and

396
00:39:16,589 --> 00:39:22,710
once we associated with an idea number
it is now inside the idea items and it

397
00:39:22,710 --> 00:39:29,010
is therefore can be referenced so now we
can already asked even even though they

398
00:39:29,010 --> 00:39:30,299
didn't done yet

399
00:39:30,299 --> 00:39:36,030
we can already asked a ask for the rear
destruction of the idea number six and

400
00:39:36,030 --> 00:39:40,200
now since the object is already
associated with an idea number this

401
00:39:40,200 --> 00:39:46,770
weekend just passed this check and
number six will be free but since friday

402
00:39:46,770 --> 00:39:54,359
did not finish it it is not it will now
initialized free data so we have used

403
00:39:54,359 --> 00:40:03,180
for free here so again and how to how to
do that first maps on the data GPU we

404
00:40:03,180 --> 00:40:09,180
get the idea number we know what what's
the next idea we're going to get then we

405
00:40:09,180 --> 00:40:15,598
are just asking to a map more data but
in the same time before Fred return we

406
00:40:15,599 --> 00:40:23,309
also asked to reduce data and friday
difficult for that allocated data will

407
00:40:23,309 --> 00:40:31,109
use a free a will you use free data so
there's your frustration on the entry

408
00:40:31,109 --> 00:40:38,279
parameter in function cages elementary
attached process and so that was kinda

409
00:40:38,280 --> 00:40:47,819
woods now we got in the disclosure so we
a we disclose coat back in April and it

410
00:40:47,819 --> 00:40:52,049
went pretty well we gave them for
virtual ability we gave them a free

411
00:40:52,049 --> 00:41:00,089
months embargo and force encode it was
pretty good and from cargo for canyon

412
00:41:00,089 --> 00:41:04,380
roads to a welcome was also responsible
they were actually Kokomo's very

413
00:41:04,380 --> 00:41:08,250
collaborative and they agree we're very
good with the timings but for some

414
00:41:08,250 --> 00:41:14,069
reason a courtroom released a public
patch but only a month later google

415
00:41:14,069 --> 00:41:19,310
deployed berry patch so for one month
the vulnerability was actually public

416
00:41:19,310 --> 00:41:26,840
and unpatched now for us million devil
and even though we reported to them and

417
00:41:26,840 --> 00:41:33,590
gain a tape reel it is still not fixed
by google so congratulations you're

418
00:41:33,590 --> 00:41:40,400
vulnerable but still a lot of a
different OMG worked with checkpoint and

419
00:41:40,400 --> 00:41:45,170
we instructed them what to do and they
issued out-of-band patches for deaths

420
00:41:45,170 --> 00:41:52,880
and but still listed as we know it not
up to now all the nexus devices are

421
00:41:52,880 --> 00:42:00,380
still vulnerable and now for quotes
although we reported back in February

422
00:42:00,380 --> 00:42:05,480
and even though you saw a very basic way
to exploit it

423
00:42:05,480 --> 00:42:09,500
it is still not fixed by Google and not
just my google by most of the audience

424
00:42:09,500 --> 00:42:16,310
the way they fixed it is by setting a SD
knocks rule that block access to the

425
00:42:16,310 --> 00:42:20,690
next to this mechanism but you should
know that it doesn't fix the problem if

426
00:42:20,690 --> 00:42:24,860
you find a vulnerability in them in the
process that has access to this

427
00:42:24,860 --> 00:42:29,840
mechanism you can explain it and you
know just you know how to do it now so

428
00:42:29,840 --> 00:42:35,030
they still didn't fix that even though
it's been months since then

429
00:42:35,030 --> 00:42:41,360
now i have the disclosure will be more
convenient in the future because it was

430
00:42:41,360 --> 00:42:46,310
good it was actually bad now as
suggestions for the future of the

431
00:42:46,310 --> 00:42:52,009
security of android so commit grades and
i'm going to say they pay more attention

432
00:42:52,010 --> 00:42:56,450
to record because i want to give
actually concrete suggestions so for

433
00:42:56,450 --> 00:43:00,589
more than a decade amit great was an
extremely convenient function for

434
00:43:00,590 --> 00:43:04,970
exploits even though from design through
point of view it might sound funny

435
00:43:05,570 --> 00:43:11,630
this function should be hard because all
we need now is a function called

436
00:43:11,630 --> 00:43:17,060
primitive and we are done we are words
so and their functions that are already

437
00:43:17,060 --> 00:43:22,970
hardened for example cisco reboots
requested to put specific magics to call

438
00:43:22,970 --> 00:43:27,350
that so I'm sure this function can be
changed because right now that's all you

439
00:43:27,350 --> 00:43:31,670
need to exploit a clinical ability and
my second point

440
00:43:32,390 --> 00:43:39,379
so SLR is not a new concept iphones have
it for years the linux kernel already

441
00:43:39,380 --> 00:43:44,390
have it look the linux electron and
desktop endpoints and yet for some

442
00:43:44,390 --> 00:43:50,150
reason androids still don't have it when
it comes to the killing part now I think

443
00:43:50,150 --> 00:43:56,299
that is that's an extremely important
feature if you would have it it would be

444
00:43:56,299 --> 00:44:00,650
much more complicated to exploit quotes
but because of the absence of this

445
00:44:00,650 --> 00:44:07,039
picture is what it wasn't so hard and
finally a city knocks so it locks is a

446
00:44:07,039 --> 00:44:13,549
great mechanism and it's maybe if they
get it because it made that talk surface

447
00:44:13,549 --> 00:44:18,980
much more smaller than it was before and
yet if you have a mechanism but you

448
00:44:18,980 --> 00:44:24,260
don't know how to use that it's it's not
good it's it doesn't want it and if

449
00:44:24,260 --> 00:44:29,660
application is had access to the
Qualcomm's IPC mechanism so what's the

450
00:44:29,660 --> 00:44:33,019
point of it but the point of the
mechanism of if you don't if you don't

451
00:44:33,019 --> 00:44:37,069
put appropriate tools now with that said
the phone

452
00:44:37,069 --> 00:44:44,359
current mitigation status in android is
fairly good txn or the snap or six weeks

453
00:44:44,359 --> 00:44:50,930
a86 users made which was introduced two
years ago metro egg exploits in the

454
00:44:50,930 --> 00:44:57,950
kennel much more complicated and yet a
few more a few missing components I few

455
00:44:57,950 --> 00:45:04,640
comments are missing to make situation
much more secure and much more safe now

456
00:45:04,640 --> 00:45:11,750
and check . created an app that checks
whether your device is the number or not

457
00:45:11,750 --> 00:45:19,160
and the device actually tries to
partially exploit the vulnerability and

458
00:45:19,160 --> 00:45:24,649
so it can tell you whether your device's
one or not but there is no risk of

459
00:45:24,650 --> 00:45:27,650
breaking your device or routing it

460
00:45:28,260 --> 00:45:32,430
and you can always if you want to check
your story if your phone number or not

461
00:45:32,430 --> 00:45:38,490
and that's it i hope you like developed
the presentation and if there are any

462
00:45:38,490 --> 00:45:39,600
questions

463
00:45:39,600 --> 00:45:42,600
that's a time

464
00:45:46,410 --> 00:45:49,470
any questions from the floor

465
00:45:49,470 --> 00:45:57,120
no well anyone think I know people here
so yeah you beget throughout the whole

466
00:45:57,120 --> 00:46:03,810
day so we're on the same wants to ask
some questions and thank you thank you

467
00:46:03,810 --> 00:46:04,259
very much

