1
00:00:12,590 --> 00:00:17,689
thank you very<font color="#E5E5E5"> much</font><font color="#CCCCCC"> for the introduction</font>

2
00:00:14,500 --> 00:00:20,570
<font color="#E5E5E5">well just I would like to make a quick</font>

3
00:00:17,689 --> 00:00:24,020
poll<font color="#CCCCCC"> here who has already</font><font color="#E5E5E5"> heard of</font>

4
00:00:20,570 --> 00:00:27,169
course<font color="#CCCCCC"> I'd components</font><font color="#E5E5E5"> over here so okay</font>

5
00:00:24,020 --> 00:00:30,020
<font color="#CCCCCC">so there</font><font color="#E5E5E5"> are some people so my talk will</font>

6
00:00:27,169 --> 00:00:32,239
be mostly about<font color="#E5E5E5"> these components we are</font>

7
00:00:30,020 --> 00:00:34,579
going<font color="#E5E5E5"> to use them for preventing</font>

8
00:00:32,238 --> 00:00:36,290
software attacks<font color="#CCCCCC"> but it can be used</font><font color="#E5E5E5"> you</font>

9
00:00:34,579 --> 00:00:39,950
know<font color="#CCCCCC"> for first thing like it has been</font>

10
00:00:36,290 --> 00:00:41,839
<font color="#CCCCCC">shown yesterday yesterday talk by using</font>

11
00:00:39,950 --> 00:00:42,760
<font color="#E5E5E5">Intel</font><font color="#CCCCCC"> PD trace you know they used Intel</font>

12
00:00:41,840 --> 00:00:45,800
<font color="#CCCCCC">vd2</font>

13
00:00:42,760 --> 00:00:47,149
<font color="#E5E5E5">for</font><font color="#CCCCCC"> phasing</font><font color="#E5E5E5"> similarly</font><font color="#CCCCCC"> core site</font>

14
00:00:45,800 --> 00:00:50,659
components provide the same<font color="#CCCCCC"> information</font>

15
00:00:47,149 --> 00:00:55,489
and we<font color="#CCCCCC"> can</font><font color="#E5E5E5"> use to do the same things as</font>

16
00:00:50,659 --> 00:00:58,370
well so first<font color="#E5E5E5"> of all</font><font color="#CCCCCC"> Who am I am</font><font color="#E5E5E5"> i I am</font>

17
00:00:55,489 --> 00:01:01,099
a PhD student<font color="#E5E5E5"> it's on</font><font color="#CCCCCC"> algebraic it's a</font>

18
00:00:58,370 --> 00:01:04,399
French engineering school<font color="#CCCCCC"> so here is a</font>

19
00:01:01,100 --> 00:01:07,010
QR<font color="#CCCCCC"> code you can scan</font><font color="#E5E5E5"> to to get in touch</font>

20
00:01:04,400 --> 00:01:08,810
<font color="#CCCCCC">with</font><font color="#E5E5E5"> me if you want so this work is done</font>

21
00:01:07,010 --> 00:01:11,690
in<font color="#CCCCCC"> the in a frame of</font><font color="#E5E5E5"> hardware project</font>

22
00:01:08,810 --> 00:01:16,159
which you<font color="#CCCCCC"> can find informations on</font><font color="#E5E5E5"> the</font>

23
00:01:11,690 --> 00:01:19,130
link<font color="#CCCCCC"> over here so let's get to that</font>

24
00:01:16,159 --> 00:01:20,509
chase of<font color="#CCCCCC"> this talk we I am going to</font>

25
00:01:19,130 --> 00:01:24,140
<font color="#CCCCCC">present</font><font color="#E5E5E5"> you the</font><font color="#CCCCCC"> motivation behind this</font>

26
00:01:20,509 --> 00:01:26,659
work<font color="#CCCCCC"> then I will</font><font color="#E5E5E5"> explain you what</font><font color="#CCCCCC"> are</font>

27
00:01:24,140 --> 00:01:29,090
<font color="#CCCCCC">corset components</font><font color="#E5E5E5"> why how are we going</font>

28
00:01:26,659 --> 00:01:31,490
<font color="#E5E5E5">to</font><font color="#CCCCCC"> use them and then</font><font color="#E5E5E5"> I will talk about</font>

29
00:01:29,090 --> 00:01:33,560
<font color="#E5E5E5">how we are</font><font color="#CCCCCC"> going</font><font color="#E5E5E5"> to use these components</font>

30
00:01:31,490 --> 00:01:36,020
to prevent software to prevent software

31
00:01:33,560 --> 00:01:41,930
attacks and how to improve<font color="#E5E5E5"> software</font>

32
00:01:36,020 --> 00:01:43,520
security so the we are<font color="#E5E5E5"> considering we</font>

33
00:01:41,930 --> 00:01:45,229
are targeting<font color="#E5E5E5"> the zinc system chip I</font>

34
00:01:43,520 --> 00:01:47,450
don't know if you are<font color="#E5E5E5"> aware if</font><font color="#CCCCCC"> you</font><font color="#E5E5E5"> are</font>

35
00:01:45,229 --> 00:01:51,049
familiar with<font color="#E5E5E5"> this</font><font color="#CCCCCC"> kind of system on</font>

36
00:01:47,450 --> 00:01:54,320
chip but I'm just<font color="#E5E5E5"> going to show you some</font>

37
00:01:51,049 --> 00:01:58,429
details<font color="#CCCCCC"> about</font><font color="#E5E5E5"> it so we have over here</font><font color="#CCCCCC"> we</font>

38
00:01:54,320 --> 00:02:00,139
<font color="#E5E5E5">have</font><font color="#CCCCCC"> two cortex a9 CPU cores and we have</font>

39
00:01:58,429 --> 00:02:03,229
an FPGA part we have some hardware

40
00:02:00,140 --> 00:02:04,399
peripherals<font color="#CCCCCC"> that we we</font><font color="#E5E5E5"> are</font><font color="#CCCCCC"> not in care</font>

41
00:02:03,229 --> 00:02:06,979
about<font color="#E5E5E5"> this stuff</font><font color="#CCCCCC"> right now</font>

42
00:02:04,399 --> 00:02:09,440
<font color="#E5E5E5">but what we</font><font color="#CCCCCC"> are what we</font><font color="#E5E5E5"> want to do is we</font>

43
00:02:06,979 --> 00:02:11,600
want<font color="#E5E5E5"> to protect software that runs on</font>

44
00:02:09,440 --> 00:02:16,250
this<font color="#E5E5E5"> CPU core so we are considering only</font>

45
00:02:11,600 --> 00:02:18,380
a single<font color="#E5E5E5"> CPU core in this work and what</font>

46
00:02:16,250 --> 00:02:20,690
we are what<font color="#E5E5E5"> how we are going to prevent</font>

47
00:02:18,380 --> 00:02:22,340
software security<font color="#E5E5E5"> attacks it is by</font>

48
00:02:20,690 --> 00:02:24,829
implementing<font color="#CCCCCC"> dynamic information</font><font color="#E5E5E5"> for</font>

49
00:02:22,340 --> 00:02:25,890
tracking<font color="#E5E5E5"> so what is any information for</font>

50
00:02:24,830 --> 00:02:27,270
to start<font color="#E5E5E5"> with</font>

51
00:02:25,890 --> 00:02:28,859
<font color="#E5E5E5">and information</font><font color="#CCCCCC"> so it's a transfer of</font>

52
00:02:27,270 --> 00:02:31,319
<font color="#E5E5E5">information between two information</font>

53
00:02:28,860 --> 00:02:33,300
<font color="#E5E5E5">containers depending on which</font><font color="#CCCCCC"> level you</font>

54
00:02:31,319 --> 00:02:35,130
are looking if you are we<font color="#E5E5E5"> are looking at</font>

55
00:02:33,300 --> 00:02:37,950
the low level information containers<font color="#E5E5E5"> can</font>

56
00:02:35,130 --> 00:02:40,019
<font color="#CCCCCC">be registered</font><font color="#E5E5E5"> memory addresses if we</font>

57
00:02:37,950 --> 00:02:43,890
look at the<font color="#CCCCCC"> application level it can</font><font color="#E5E5E5"> be</font>

58
00:02:40,020 --> 00:02:45,740
variables constants if we look at the

59
00:02:43,890 --> 00:02:48,359
operating<font color="#CCCCCC"> system level it</font><font color="#E5E5E5"> can be files</font>

60
00:02:45,740 --> 00:02:50,940
<font color="#E5E5E5">so just to give an example on the</font>

61
00:02:48,360 --> 00:02:53,400
application level here we have<font color="#CCCCCC"> four</font><font color="#E5E5E5"> for</font>

62
00:02:50,940 --> 00:02:55,140
information flows<font color="#E5E5E5"> on line 2 and line 3</font>

63
00:02:53,400 --> 00:02:59,070
we have<font color="#CCCCCC"> information flows from constants</font>

64
00:02:55,140 --> 00:03:01,049
towards variable<font color="#CCCCCC"> on line</font><font color="#E5E5E5"> 4 and 5 we have</font>

65
00:02:59,070 --> 00:03:05,850
information source between variables

66
00:03:01,050 --> 00:03:09,959
between<font color="#E5E5E5"> a and W B and X so the principle</font>

67
00:03:05,850 --> 00:03:12,060
is<font color="#E5E5E5"> to attach a tag a metadata to the</font>

68
00:03:09,959 --> 00:03:14,220
<font color="#CCCCCC">integer to</font><font color="#E5E5E5"> the input so</font><font color="#CCCCCC"> we here we</font>

69
00:03:12,060 --> 00:03:17,519
attach in our<font color="#CCCCCC"> color</font><font color="#E5E5E5"> just to show the the</font>

70
00:03:14,220 --> 00:03:19,530
metadata we<font color="#E5E5E5"> attach color here</font><font color="#CCCCCC"> so C</font><font color="#E5E5E5"> 1 C 2</font>

71
00:03:17,519 --> 00:03:21,450
and<font color="#E5E5E5"> C 3 are</font><font color="#CCCCCC"> the inputs we attach some</font>

72
00:03:19,530 --> 00:03:25,380
colors to them<font color="#E5E5E5"> and when the program gets</font>

73
00:03:21,450 --> 00:03:28,079
executed<font color="#CCCCCC"> we we</font><font color="#E5E5E5"> propagate these tags so</font>

74
00:03:25,380 --> 00:03:31,650
at the<font color="#E5E5E5"> end of execution we have</font><font color="#CCCCCC"> to</font>

75
00:03:28,080 --> 00:03:33,060
output 3 4 and C 5 C size is<font color="#CCCCCC"> tagged</font>

76
00:03:31,650 --> 00:03:36,870
thread because it contains<font color="#E5E5E5"> information</font>

77
00:03:33,060 --> 00:03:38,579
<font color="#E5E5E5">that comes from C 1 C 4 is tagged green</font>

78
00:03:36,870 --> 00:03:41,370
because it contains information<font color="#E5E5E5"> so</font><font color="#CCCCCC"> that</font>

79
00:03:38,579 --> 00:03:44,340
comes from C 2 and C 3 which were tagged

80
00:03:41,370 --> 00:03:47,910
<font color="#E5E5E5">yellow and blue so this is how we get</font>

81
00:03:44,340 --> 00:03:49,350
the green tag so the idea is<font color="#CCCCCC"> to monitor</font>

82
00:03:47,910 --> 00:03:52,079
<font color="#E5E5E5">the information flows during program</font>

83
00:03:49,350 --> 00:03:54,570
execution<font color="#CCCCCC"> and check for security policy</font>

84
00:03:52,079 --> 00:03:57,150
violations<font color="#E5E5E5"> so here I'm just</font><font color="#CCCCCC"> going to</font>

85
00:03:54,570 --> 00:03:59,940
<font color="#E5E5E5">give you a simple example it's really</font>

86
00:03:57,150 --> 00:04:02,430
<font color="#E5E5E5">simplified to just</font><font color="#CCCCCC"> show you how it works</font>

87
00:03:59,940 --> 00:04:04,890
so here we have consider we have<font color="#CCCCCC"> a</font>

88
00:04:02,430 --> 00:04:09,060
memory overflow attack<font color="#E5E5E5"> buffer overflow</font>

89
00:04:04,890 --> 00:04:10,708
attack here so we have an index<font color="#E5E5E5"> that is</font>

90
00:04:09,060 --> 00:04:13,260
<font color="#E5E5E5">typed by the user from the standard</font>

91
00:04:10,709 --> 00:04:18,060
<font color="#CCCCCC">input and well let's consider</font><font color="#E5E5E5"> that the</font>

92
00:04:13,260 --> 00:04:19,858
<font color="#E5E5E5">user types buffer buffer size plus 1 so</font>

93
00:04:18,060 --> 00:04:22,800
this<font color="#E5E5E5"> is the state of</font><font color="#CCCCCC"> the system at</font>

94
00:04:19,858 --> 00:04:25,229
initially this we have the CPU registers

95
00:04:22,800 --> 00:04:28,890
over here we have the memory<font color="#CCCCCC"> addresses</font>

96
00:04:25,229 --> 00:04:33,719
<font color="#E5E5E5">over here and we</font><font color="#CCCCCC"> are showing the tags in</font>

97
00:04:28,890 --> 00:04:36,930
this column over here so initially

98
00:04:33,720 --> 00:04:39,900
<font color="#E5E5E5">everything is fine this</font><font color="#CCCCCC"> in this way this</font>

99
00:04:36,930 --> 00:04:41,850
<font color="#E5E5E5">is why</font><font color="#CCCCCC"> their tag green so when</font>

100
00:04:39,900 --> 00:04:44,039
<font color="#CCCCCC">are going to execute our program how the</font>

101
00:04:41,850 --> 00:04:45,690
tags are<font color="#E5E5E5"> going to evolve this is what we</font>

102
00:04:44,040 --> 00:04:48,810
are going<font color="#E5E5E5"> to</font><font color="#CCCCCC"> do this is</font><font color="#E5E5E5"> what I'm going</font>

103
00:04:45,690 --> 00:04:50,610
<font color="#E5E5E5">to show you now so as it</font><font color="#CCCCCC"> input is</font>

104
00:04:48,810 --> 00:04:54,930
<font color="#E5E5E5">tainted because we consider it insecure</font>

105
00:04:50,610 --> 00:04:57,449
<font color="#E5E5E5">is</font><font color="#CCCCCC"> non secure unsecured r1 is going to</font>

106
00:04:54,930 --> 00:04:59,910
be tagged<font color="#E5E5E5"> red as</font><font color="#CCCCCC"> values</font><font color="#E5E5E5"> it's going to be</font>

107
00:04:57,449 --> 00:05:03,800
tagged<font color="#CCCCCC"> unsecure as well similarly when</font>

108
00:04:59,910 --> 00:05:07,110
we try<font color="#E5E5E5"> to load into a register</font><font color="#CCCCCC"> a memory</font>

109
00:05:03,800 --> 00:05:11,460
into<font color="#E5E5E5"> register a value pointed by r1 we</font>

110
00:05:07,110 --> 00:05:14,130
are going to tag r2 as well r4<font color="#CCCCCC"> is going</font>

111
00:05:11,460 --> 00:05:17,840
to be tagged<font color="#E5E5E5"> red as well because r2 is</font>

112
00:05:14,130 --> 00:05:19,949
r2<font color="#E5E5E5"> was right and when we are going to</font>

113
00:05:17,840 --> 00:05:21,929
would like to overwrite<font color="#E5E5E5"> the return</font>

114
00:05:19,949 --> 00:05:24,270
address the tag will be<font color="#E5E5E5"> overwritten</font><font color="#CCCCCC"> as</font>

115
00:05:21,930 --> 00:05:26,970
well so this<font color="#CCCCCC"> is how by checking the tags</font>

116
00:05:24,270 --> 00:05:30,419
we can determine whether the whether

117
00:05:26,970 --> 00:05:32,010
there was an attack or<font color="#CCCCCC"> not so again it's</font>

118
00:05:30,419 --> 00:05:35,280
a<font color="#E5E5E5"> simple example but just to show you</font>

119
00:05:32,010 --> 00:05:37,080
how information<font color="#CCCCCC"> for works so basically</font>

120
00:05:35,280 --> 00:05:39,119
to sum<font color="#CCCCCC"> it up we have three steps always</font>

121
00:05:37,080 --> 00:05:42,090
we have the first<font color="#E5E5E5"> step that consists in</font>

122
00:05:39,120 --> 00:05:44,190
tagging the inputs<font color="#E5E5E5"> so we have to take</font>

123
00:05:42,090 --> 00:05:45,719
each CPU register each memory each

124
00:05:44,190 --> 00:05:48,240
memory address used by the<font color="#CCCCCC"> application</font>

125
00:05:45,720 --> 00:05:50,910
so we need some<font color="#E5E5E5"> extra storage to store</font>

126
00:05:48,240 --> 00:05:53,130
these tags the second operation is to

127
00:05:50,910 --> 00:05:56,639
propagate<font color="#CCCCCC"> this text</font><font color="#E5E5E5"> during execution and</font>

128
00:05:53,130 --> 00:05:58,830
the third step is to<font color="#E5E5E5"> check for check for</font>

129
00:05:56,639 --> 00:06:03,060
unsafe uses of this<font color="#E5E5E5"> tainted data check</font>

130
00:05:58,830 --> 00:06:05,669
the tag and we can use dynamic

131
00:06:03,060 --> 00:06:09,030
<font color="#CCCCCC">information for tracking to protect from</font>

132
00:06:05,669 --> 00:06:11,940
<font color="#E5E5E5">low-level</font><font color="#CCCCCC"> threats just as I have shown</font>

133
00:06:09,030 --> 00:06:13,520
you<font color="#E5E5E5"> from buffer overflows and</font><font color="#CCCCCC"> high-level</font>

134
00:06:11,940 --> 00:06:16,229
<font color="#E5E5E5">threats as</font><font color="#CCCCCC"> well from sequel injection</font>

135
00:06:13,520 --> 00:06:17,940
from cross-site scripting as well this

136
00:06:16,229 --> 00:06:19,530
<font color="#E5E5E5">is</font><font color="#CCCCCC"> because we are</font><font color="#E5E5E5"> working on a</font><font color="#CCCCCC"> very low</font>

137
00:06:17,940 --> 00:06:20,849
<font color="#CCCCCC">level we are</font><font color="#E5E5E5"> working on comes on</font>

138
00:06:19,530 --> 00:06:24,780
assembly instructions rather<font color="#E5E5E5"> than the</font>

139
00:06:20,849 --> 00:06:26,969
<font color="#E5E5E5">programming language so we do not care</font>

140
00:06:24,780 --> 00:06:29,400
<font color="#CCCCCC">about the program</font><font color="#E5E5E5"> at programming</font>

141
00:06:26,970 --> 00:06:32,010
<font color="#E5E5E5">language of the application as we are</font>

142
00:06:29,400 --> 00:06:33,719
<font color="#E5E5E5">working on</font><font color="#CCCCCC"> a semi</font><font color="#E5E5E5"> instruction we can use</font>

143
00:06:32,010 --> 00:06:35,219
it<font color="#E5E5E5"> for program understanding as well</font>

144
00:06:33,720 --> 00:06:37,740
from software<font color="#E5E5E5"> testing as well but we are</font>

145
00:06:35,220 --> 00:06:40,860
<font color="#E5E5E5">we</font><font color="#CCCCCC"> are using</font><font color="#E5E5E5"> here it for protection from</font>

146
00:06:37,740 --> 00:06:42,539
low level and high level<font color="#E5E5E5"> threats so what</font>

147
00:06:40,860 --> 00:06:45,270
we want<font color="#E5E5E5"> to do is to</font><font color="#CCCCCC"> protect the user</font>

148
00:06:42,539 --> 00:06:47,099
<font color="#E5E5E5">levels user level code that runs on the</font>

149
00:06:45,270 --> 00:06:48,830
on<font color="#E5E5E5"> the Linux that runs on the zinc</font>

150
00:06:47,099 --> 00:06:50,900
system<font color="#E5E5E5"> on chip</font>

151
00:06:48,830 --> 00:06:52,280
and the first problem<font color="#E5E5E5"> is we need to</font>

152
00:06:50,900 --> 00:06:54,620
recover all information<font color="#E5E5E5"> flows that</font>

153
00:06:52,280 --> 00:06:56,479
<font color="#CCCCCC">happen during an application during</font><font color="#E5E5E5"> a</font>

154
00:06:54,620 --> 00:06:59,480
<font color="#E5E5E5">program execution so basically we need</font>

155
00:06:56,480 --> 00:07:01,370
to to find<font color="#E5E5E5"> out a</font><font color="#CCCCCC"> way how</font><font color="#E5E5E5"> to recover</font>

156
00:06:59,480 --> 00:07:04,940
<font color="#E5E5E5">information about each CPU instruction</font>

157
00:07:01,370 --> 00:07:06,890
that is being executed on<font color="#E5E5E5"> the CPU so a</font>

158
00:07:04,940 --> 00:07:10,580
part of<font color="#E5E5E5"> this answer will be recovered by</font>

159
00:07:06,890 --> 00:07:12,620
course<font color="#CCCCCC"> I components so if we have a gain</font>

160
00:07:10,580 --> 00:07:15,830
<font color="#E5E5E5">look on the zinc's</font><font color="#CCCCCC"> township these</font>

161
00:07:12,620 --> 00:07:18,830
components<font color="#E5E5E5"> are shown here on the</font>

162
00:07:15,830 --> 00:07:20,479
schematic<font color="#E5E5E5"> over here so it is a set of IP</font>

163
00:07:18,830 --> 00:07:22,969
blocks that<font color="#CCCCCC"> provides hardware</font><font color="#E5E5E5"> assisted</font>

164
00:07:20,480 --> 00:07:25,970
system tracing so if we have a deeper

165
00:07:22,970 --> 00:07:28,700
look in<font color="#E5E5E5"> these components we have the</font>

166
00:07:25,970 --> 00:07:30,860
schematic over here<font color="#E5E5E5"> so we have first of</font>

167
00:07:28,700 --> 00:07:34,070
<font color="#E5E5E5">all we have</font><font color="#CCCCCC"> to program trace macro cells</font>

168
00:07:30,860 --> 00:07:37,600
components one per CPU core<font color="#E5E5E5"> these</font>

169
00:07:34,070 --> 00:07:39,740
components generate trace<font color="#E5E5E5"> so each time a</font>

170
00:07:37,600 --> 00:07:42,800
particular instruction<font color="#E5E5E5"> is executed</font>

171
00:07:39,740 --> 00:07:44,750
we<font color="#CCCCCC"> had a generate race this trace is</font>

172
00:07:42,800 --> 00:07:46,820
send it towards the funnel funnel is

173
00:07:44,750 --> 00:07:49,610
just a component that<font color="#E5E5E5"> merges traces</font>

174
00:07:46,820 --> 00:07:51,469
together and with any sense to the

175
00:07:49,610 --> 00:07:53,540
replicator over here the replicator just

176
00:07:51,470 --> 00:07:56,660
<font color="#CCCCCC">duplicates the trace that comes to its</font>

177
00:07:53,540 --> 00:07:58,250
input<font color="#E5E5E5"> towards the on</font><font color="#CCCCCC"> chip buffer or we</font>

178
00:07:56,660 --> 00:07:59,870
can<font color="#CCCCCC"> use</font><font color="#E5E5E5"> it</font><font color="#CCCCCC"> to send we can use this</font>

179
00:07:58,250 --> 00:08:01,880
component<font color="#CCCCCC"> over here to send</font><font color="#E5E5E5"> it towards</font>

180
00:07:59,870 --> 00:08:06,830
the FPGA part that is what we<font color="#E5E5E5"> are going</font>

181
00:08:01,880 --> 00:08:08,719
<font color="#E5E5E5">to do so just</font><font color="#CCCCCC"> to now I'm</font><font color="#E5E5E5"> just going</font><font color="#CCCCCC"> to</font>

182
00:08:06,830 --> 00:08:10,609
show<font color="#E5E5E5"> you in a little bit more detail the</font>

183
00:08:08,720 --> 00:08:14,510
features<font color="#E5E5E5"> provided by</font><font color="#CCCCCC"> this components how</font>

184
00:08:10,610 --> 00:08:17,390
the trace is generated<font color="#E5E5E5"> and how we can</font>

185
00:08:14,510 --> 00:08:20,150
<font color="#CCCCCC">configure these components so first of</font>

186
00:08:17,390 --> 00:08:22,909
all we have we can use<font color="#CCCCCC"> course ID</font>

187
00:08:20,150 --> 00:08:24,919
components to trace all code<font color="#CCCCCC"> we all code</font>

188
00:08:22,910 --> 00:08:27,890
whether<font color="#CCCCCC"> rather it is in</font><font color="#E5E5E5"> user space or</font>

189
00:08:24,920 --> 00:08:30,380
<font color="#CCCCCC">kernel</font><font color="#E5E5E5"> space we can use these components</font>

190
00:08:27,890 --> 00:08:32,929
<font color="#E5E5E5">to trace the code or we can</font><font color="#CCCCCC"> use you know</font>

191
00:08:30,380 --> 00:08:34,820
only<font color="#E5E5E5"> as</font><font color="#CCCCCC"> a given region we want</font><font color="#E5E5E5"> to trace</font>

192
00:08:32,929 --> 00:08:36,829
and that is what we<font color="#E5E5E5"> are going to do we</font>

193
00:08:34,820 --> 00:08:38,540
are<font color="#E5E5E5"> we only want the trace of dot text</font>

194
00:08:36,830 --> 00:08:40,520
section<font color="#CCCCCC"> of our application</font><font color="#E5E5E5"> we don't want</font>

195
00:08:38,539 --> 00:08:42,319
any further details

196
00:08:40,520 --> 00:08:44,660
the problem with filtering all code

197
00:08:42,320 --> 00:08:46,640
<font color="#E5E5E5">retracing all code is</font><font color="#CCCCCC"> that</font><font color="#E5E5E5"> it will</font>

198
00:08:44,660 --> 00:08:49,640
<font color="#E5E5E5">generate huge amounts of trace and while</font>

199
00:08:46,640 --> 00:08:51,770
we may not be<font color="#CCCCCC"> able</font><font color="#E5E5E5"> to find you know in</font>

200
00:08:49,640 --> 00:08:55,850
terms on the<font color="#E5E5E5"> FPGA side what is going on</font>

201
00:08:51,770 --> 00:08:58,280
on<font color="#CCCCCC"> our processor another feature which</font>

202
00:08:55,850 --> 00:09:02,120
is provided by<font color="#E5E5E5"> my</font><font color="#CCCCCC"> school site</font><font color="#E5E5E5"> PTM</font>

203
00:08:58,280 --> 00:09:02,569
component is branch broadcasting<font color="#E5E5E5"> so by</font>

204
00:09:02,120 --> 00:09:04,640
this

205
00:09:02,570 --> 00:09:06,980
<font color="#E5E5E5">Beetee</font><font color="#CCCCCC"> and</font><font color="#E5E5E5"> generous only traced for</font>

206
00:09:04,640 --> 00:09:09,080
indirect<font color="#E5E5E5"> bank addresses you know it</font>

207
00:09:06,980 --> 00:09:12,230
generates<font color="#E5E5E5"> the branch address for</font>

208
00:09:09,080 --> 00:09:15,110
indirect addresses however if we have<font color="#E5E5E5"> a</font>

209
00:09:12,230 --> 00:09:18,590
direct budget<font color="#E5E5E5"> like our our here on line</font>

210
00:09:15,110 --> 00:09:20,210
<font color="#E5E5E5">three it does not generate the branch</font>

211
00:09:18,590 --> 00:09:22,820
address for<font color="#CCCCCC"> example it</font><font color="#E5E5E5"> will not generate</font>

212
00:09:20,210 --> 00:09:25,190
0x80<font color="#CCCCCC"> eighty four it will generate only</font><font color="#E5E5E5"> a</font>

213
00:09:22,820 --> 00:09:27,590
packet<font color="#CCCCCC"> that shows whether the branch was</font>

214
00:09:25,190 --> 00:09:32,000
taken or not taken however<font color="#E5E5E5"> we need this</font>

215
00:09:27,590 --> 00:09:34,880
information<font color="#E5E5E5"> to in in our system so we</font>

216
00:09:32,000 --> 00:09:36,380
activate this feature<font color="#E5E5E5"> first of all you</font>

217
00:09:34,880 --> 00:09:38,240
know<font color="#E5E5E5"> or there was no support for these</font>

218
00:09:36,380 --> 00:09:40,520
<font color="#E5E5E5">components on</font><font color="#CCCCCC"> zing system-on-chip</font><font color="#E5E5E5"> so we</font>

219
00:09:38,240 --> 00:09:41,990
added<font color="#CCCCCC"> support for these components core</font>

220
00:09:40,520 --> 00:09:44,300
<font color="#E5E5E5">side components on</font><font color="#CCCCCC"> swing</font><font color="#E5E5E5"> system</font><font color="#CCCCCC"> on</font><font color="#E5E5E5"> chip</font>

221
00:09:41,990 --> 00:09:46,520
<font color="#E5E5E5">this is done only by modifying the</font>

222
00:09:44,300 --> 00:09:50,060
device<font color="#CCCCCC"> three</font><font color="#E5E5E5"> files so you</font><font color="#CCCCCC"> can find the</font>

223
00:09:46,520 --> 00:09:51,500
patch it's available<font color="#E5E5E5"> online or</font><font color="#CCCCCC"> you can</font>

224
00:09:50,060 --> 00:09:53,089
<font color="#E5E5E5">ask me</font><font color="#CCCCCC"> about it</font>

225
00:09:51,500 --> 00:09:55,010
furthermore the<font color="#CCCCCC"> branch</font><font color="#E5E5E5"> broadcasting</font>

226
00:09:53,090 --> 00:09:57,680
feature was not<font color="#E5E5E5"> available as well in the</font>

227
00:09:55,010 --> 00:09:59,950
driver<font color="#E5E5E5"> so we</font><font color="#CCCCCC"> patch the</font><font color="#E5E5E5"> driver to me to</font>

228
00:09:57,680 --> 00:10:02,569
make use of this<font color="#E5E5E5"> feature in the driver</font>

229
00:09:59,950 --> 00:10:05,120
<font color="#E5E5E5">so not normally it</font><font color="#CCCCCC"> should</font><font color="#E5E5E5"> be released in</font>

230
00:10:02,570 --> 00:10:08,330
<font color="#E5E5E5">next</font><font color="#CCCCCC"> Linux next major Linux kernel</font>

231
00:10:05,120 --> 00:10:09,470
release<font color="#CCCCCC"> oh so there are</font><font color="#E5E5E5"> other features</font>

232
00:10:08,330 --> 00:10:11,000
<font color="#CCCCCC">that are</font><font color="#E5E5E5"> offered back</font><font color="#CCCCCC"> off-site</font>

233
00:10:09,470 --> 00:10:12,800
components that we are not<font color="#E5E5E5"> going</font><font color="#CCCCCC"> to</font>

234
00:10:11,000 --> 00:10:14,600
<font color="#E5E5E5">consider in this work that I'm</font><font color="#CCCCCC"> going to</font>

235
00:10:12,800 --> 00:10:16,130
<font color="#E5E5E5">pass by but if you have any questions</font>

236
00:10:14,600 --> 00:10:21,070
about these components<font color="#E5E5E5"> you</font><font color="#CCCCCC"> can ask me as</font>

237
00:10:16,130 --> 00:10:23,660
well so<font color="#CCCCCC"> just to show</font><font color="#E5E5E5"> you an</font><font color="#CCCCCC"> example of</font>

238
00:10:21,070 --> 00:10:26,000
when<font color="#CCCCCC"> that case will</font><font color="#E5E5E5"> be going to will be</font>

239
00:10:23,660 --> 00:10:28,520
generated<font color="#E5E5E5"> we have an example over here</font>

240
00:10:26,000 --> 00:10:30,410
<font color="#CCCCCC">so if we have three instructions like</font>

241
00:10:28,520 --> 00:10:32,060
<font color="#CCCCCC">moved add and branch instruction only</font>

242
00:10:30,410 --> 00:10:34,969
<font color="#CCCCCC">the branch instruction will generate a</font>

243
00:10:32,060 --> 00:10:36,650
trace<font color="#E5E5E5"> so we can choose to</font><font color="#CCCCCC"> have</font><font color="#E5E5E5"> the</font>

244
00:10:34,970 --> 00:10:39,110
branch address or we can<font color="#E5E5E5"> choose to have</font>

245
00:10:36,650 --> 00:10:41,600
<font color="#CCCCCC">only the</font><font color="#E5E5E5"> information about whether the</font>

246
00:10:39,110 --> 00:10:43,640
<font color="#CCCCCC">branch is taken</font><font color="#E5E5E5"> or not if so the branch</font>

247
00:10:41,600 --> 00:10:46,850
broadcast feature that<font color="#E5E5E5"> I explained</font>

248
00:10:43,640 --> 00:10:49,189
<font color="#E5E5E5">earlier similarly if we have</font><font color="#CCCCCC"> a</font>

249
00:10:46,850 --> 00:10:52,220
conditional<font color="#E5E5E5"> branching execution we can</font>

250
00:10:49,190 --> 00:10:54,560
obtain the information<font color="#E5E5E5"> as well so if the</font>

251
00:10:52,220 --> 00:10:57,110
branch is taken<font color="#E5E5E5"> we will get an e item if</font>

252
00:10:54,560 --> 00:10:58,790
the<font color="#CCCCCC"> a</font><font color="#E5E5E5"> special type of packet if the</font>

253
00:10:57,110 --> 00:11:01,780
branch is<font color="#E5E5E5"> not-taken we will get another</font>

254
00:10:58,790 --> 00:11:04,610
type<font color="#CCCCCC"> of packet to show it in</font><font color="#E5E5E5"> the trace</font>

255
00:11:01,780 --> 00:11:05,839
<font color="#E5E5E5">well just a fun fact about</font><font color="#CCCCCC"> was when we</font>

256
00:11:04,610 --> 00:11:07,760
were trying<font color="#E5E5E5"> to figuring out how</font><font color="#CCCCCC"> to</font>

257
00:11:05,840 --> 00:11:10,280
<font color="#CCCCCC">unlock these components and how to</font>

258
00:11:07,760 --> 00:11:13,040
program<font color="#CCCCCC"> them so the</font><font color="#E5E5E5"> first thing to do is</font>

259
00:11:10,280 --> 00:11:16,160
you notice<font color="#E5E5E5"> to</font><font color="#CCCCCC"> write write some value in</font>

260
00:11:13,040 --> 00:11:19,819
a locker<font color="#E5E5E5"> access register to unlock</font>

261
00:11:16,160 --> 00:11:23,180
<font color="#E5E5E5">the</font><font color="#CCCCCC"> older other registers so the</font><font color="#E5E5E5"> value</font>

262
00:11:19,819 --> 00:11:26,029
normally<font color="#E5E5E5"> the program normally the value</font>

263
00:11:23,180 --> 00:11:27,560
really<font color="#E5E5E5"> right is you know one or well FFF</font>

264
00:11:26,029 --> 00:11:29,689
or things like<font color="#CCCCCC"> that</font><font color="#E5E5E5"> but in this</font>

265
00:11:27,560 --> 00:11:31,699
<font color="#E5E5E5">particular case it was</font><font color="#CCCCCC"> a leaf speak of</font>

266
00:11:29,690 --> 00:11:34,220
course<font color="#CCCCCC"> site access you know so</font><font color="#E5E5E5"> well it</font>

267
00:11:31,699 --> 00:11:37,729
was it was part food<font color="#E5E5E5"> you happen to find</font>

268
00:11:34,220 --> 00:11:40,879
this plea so<font color="#CCCCCC"> they say so how do we</font>

269
00:11:37,730 --> 00:11:43,550
configure them in our<font color="#E5E5E5"> on Linux</font><font color="#CCCCCC"> system on</font>

270
00:11:40,879 --> 00:11:45,769
<font color="#CCCCCC">chip so first of</font><font color="#E5E5E5"> all we do we turn off</font>

271
00:11:43,550 --> 00:11:48,170
the<font color="#E5E5E5"> second the second CPU to make sure</font>

272
00:11:45,769 --> 00:11:52,910
that only the<font color="#CCCCCC"> program will be run only</font>

273
00:11:48,170 --> 00:11:55,069
<font color="#E5E5E5">on on a single CPU core next</font><font color="#CCCCCC"> we program</font>

274
00:11:52,910 --> 00:11:58,069
the course<font color="#E5E5E5"> course</font><font color="#CCCCCC"> ID PDM components so</font>

275
00:11:55,069 --> 00:12:02,540
the mode the<font color="#CCCCCC"> mode file over here will</font>

276
00:11:58,069 --> 00:12:04,279
allow<font color="#E5E5E5"> us</font><font color="#CCCCCC"> to write to</font><font color="#E5E5E5"> write the features</font>

277
00:12:02,540 --> 00:12:06,139
<font color="#CCCCCC">that we are going</font><font color="#E5E5E5"> to use for</font><font color="#CCCCCC"> example</font>

278
00:12:04,279 --> 00:12:09,769
over<font color="#E5E5E5"> here we</font><font color="#CCCCCC"> just activated a branch</font>

279
00:12:06,139 --> 00:12:12,259
broadcast feature<font color="#E5E5E5"> by writing 20 and we</font>

280
00:12:09,769 --> 00:12:13,879
can show we can also give the region we

281
00:12:12,259 --> 00:12:16,670
want<font color="#E5E5E5"> to address so here we want</font><font color="#CCCCCC"> to trace</font>

282
00:12:13,879 --> 00:12:21,259
<font color="#E5E5E5">only the read the</font><font color="#CCCCCC"> application region</font>

283
00:12:16,670 --> 00:12:23,599
<font color="#E5E5E5">between</font><font color="#CCCCCC"> 0 x86 38 and 0 x 86 84 so well</font>

284
00:12:21,259 --> 00:12:27,550
this<font color="#E5E5E5"> is we can analyze a record dot</font><font color="#CCCCCC"> X</font>

285
00:12:23,600 --> 00:12:30,410
action and we can get<font color="#E5E5E5"> this region easier</font>

286
00:12:27,550 --> 00:12:33,829
once the<font color="#E5E5E5"> the</font><font color="#CCCCCC"> PTM components are</font>

287
00:12:30,410 --> 00:12:36,410
programmed we can enable<font color="#CCCCCC"> the trace ink</font>

288
00:12:33,829 --> 00:12:38,300
so either we want it on the on chip

289
00:12:36,410 --> 00:12:41,000
trace or either we want to<font color="#E5E5E5"> recover the</font>

290
00:12:38,300 --> 00:12:42,949
trace on<font color="#CCCCCC"> the FPGA</font><font color="#E5E5E5"> side so we are</font>

291
00:12:41,000 --> 00:12:46,790
<font color="#E5E5E5">recovering it on the FPGA side by</font>

292
00:12:42,949 --> 00:12:49,939
activating<font color="#E5E5E5"> TPI you over here and we then</font>

293
00:12:46,790 --> 00:12:52,610
we<font color="#E5E5E5"> can activate the PTM then we will</font>

294
00:12:49,939 --> 00:12:54,349
<font color="#E5E5E5">launch the application</font><font color="#CCCCCC"> and once once</font><font color="#E5E5E5"> the</font>

295
00:12:52,610 --> 00:12:56,540
application has launched normally we

296
00:12:54,350 --> 00:12:58,160
will recover<font color="#E5E5E5"> the traces of that species</font>

297
00:12:56,540 --> 00:13:00,380
so this is<font color="#E5E5E5"> just an application that</font>

298
00:12:58,160 --> 00:13:03,139
<font color="#E5E5E5">writes some memory region which is</font>

299
00:13:00,380 --> 00:13:06,019
liquid<font color="#E5E5E5"> located in the</font><font color="#CCCCCC"> fpga to the cpu</font>

300
00:13:03,139 --> 00:13:10,970
memory space and<font color="#CCCCCC"> while we ready to or</font><font color="#E5E5E5"> to</font>

301
00:13:06,019 --> 00:13:13,490
to<font color="#CCCCCC"> find the ready to read the traces so</font>

302
00:13:10,970 --> 00:13:15,290
just a quick example<font color="#CCCCCC"> against it's a very</font>

303
00:13:13,490 --> 00:13:17,899
simple<font color="#CCCCCC"> example but just to show</font><font color="#E5E5E5"> you what</font>

304
00:13:15,290 --> 00:13:20,269
it represents<font color="#E5E5E5"> so we here we have a for</font>

305
00:13:17,899 --> 00:13:21,740
loop<font color="#CCCCCC"> for example the assembly</font>

306
00:13:20,269 --> 00:13:23,029
<font color="#E5E5E5">instruction the assembly instructions</font>

307
00:13:21,740 --> 00:13:24,800
will look something like that<font color="#CCCCCC"> I</font><font color="#E5E5E5"> have</font>

308
00:13:23,029 --> 00:13:27,840
<font color="#E5E5E5">just shown</font><font color="#CCCCCC"> you the instructions that</font>

309
00:13:24,800 --> 00:13:29,729
<font color="#E5E5E5">will be that</font><font color="#CCCCCC"> will be</font><font color="#E5E5E5"> in the trace</font>

310
00:13:27,840 --> 00:13:32,610
so the<font color="#E5E5E5"> trace looks something like that</font>

311
00:13:29,730 --> 00:13:36,480
<font color="#CCCCCC">well if we look at first sight it does</font>

312
00:13:32,610 --> 00:13:38,010
not look something and it does not

313
00:13:36,480 --> 00:13:40,890
resemble<font color="#CCCCCC"> our code you know where the</font>

314
00:13:38,010 --> 00:13:42,990
addresses we<font color="#E5E5E5"> obtain our here well except</font>

315
00:13:40,890 --> 00:13:46,230
<font color="#CCCCCC">for</font><font color="#E5E5E5"> the first address over here</font><font color="#CCCCCC"> 86 38 we</font>

316
00:13:42,990 --> 00:13:48,660
can find it over<font color="#E5E5E5"> here 86 38 but the</font>

317
00:13:46,230 --> 00:13:51,870
other addresses they are compressed so

318
00:13:48,660 --> 00:13:54,600
we only have<font color="#E5E5E5"> the shift address we only</font>

319
00:13:51,870 --> 00:13:57,210
have the value the bit values<font color="#E5E5E5"> that</font>

320
00:13:54,600 --> 00:13:59,010
changes so we have to decode<font color="#E5E5E5"> it so when</font>

321
00:13:57,210 --> 00:14:00,750
we<font color="#E5E5E5"> decode</font><font color="#CCCCCC"> we find it you</font><font color="#E5E5E5"> know there is</font>

322
00:13:59,010 --> 00:14:03,270
<font color="#E5E5E5">always start with</font><font color="#CCCCCC"> the synchronization</font>

323
00:14:00,750 --> 00:14:06,540
packet over<font color="#E5E5E5"> here which is five</font><font color="#CCCCCC"> zeros or</font>

324
00:14:03,270 --> 00:14:08,430
more and<font color="#E5E5E5"> we</font><font color="#CCCCCC"> have an icing packet in a</font>

325
00:14:06,540 --> 00:14:11,430
synchronization packet which shows at

326
00:14:08,430 --> 00:14:13,589
the starting<font color="#E5E5E5"> address of for trace we the</font>

327
00:14:11,430 --> 00:14:16,140
address where<font color="#CCCCCC"> we started tracing so it</font>

328
00:14:13,589 --> 00:14:18,650
is<font color="#CCCCCC"> 638</font><font color="#E5E5E5"> in our case and then we have the</font>

329
00:14:16,140 --> 00:14:20,819
branch<font color="#CCCCCC"> addresses you know we have 8 6</font><font color="#E5E5E5"> 54</font>

330
00:14:18,650 --> 00:14:23,370
<font color="#CCCCCC">so these are the branch addresses we are</font>

331
00:14:20,820 --> 00:14:25,080
getting in<font color="#E5E5E5"> our trace so if we have</font>

332
00:14:23,370 --> 00:14:27,029
another look<font color="#E5E5E5"> on</font><font color="#CCCCCC"> the trace and that</font>

333
00:14:25,080 --> 00:14:30,089
control photograph of the application

334
00:14:27,029 --> 00:14:32,520
over here so what we find out<font color="#E5E5E5"> is each</font>

335
00:14:30,089 --> 00:14:34,170
<font color="#CCCCCC">time we have a trace over</font><font color="#E5E5E5"> here it means</font>

336
00:14:32,520 --> 00:14:36,030
<font color="#E5E5E5">that we</font><font color="#CCCCCC"> have the control for we can</font>

337
00:14:34,170 --> 00:14:37,410
<font color="#E5E5E5">reconstruct by using the decoded trace</font>

338
00:14:36,030 --> 00:14:39,089
the control<font color="#E5E5E5"> flow graph of the</font>

339
00:14:37,410 --> 00:14:41,520
application over here so we know by

340
00:14:39,089 --> 00:14:44,820
<font color="#CCCCCC">looking by looking at the decoding trace</font>

341
00:14:41,520 --> 00:14:48,470
that<font color="#E5E5E5"> we will take</font><font color="#CCCCCC"> this path 10 times and</font>

342
00:14:44,820 --> 00:14:51,089
then well we then we<font color="#E5E5E5"> continue it</font>

343
00:14:48,470 --> 00:14:53,430
another advantage of this course<font color="#E5E5E5"> at</font>

344
00:14:51,089 --> 00:14:55,410
components is if we if we<font color="#CCCCCC"> look at the</font>

345
00:14:53,430 --> 00:14:59,250
performance<font color="#CCCCCC"> overhead of these components</font>

346
00:14:55,410 --> 00:15:00,209
it's it's<font color="#CCCCCC"> it's negligible</font><font color="#E5E5E5"> because well</font>

347
00:14:59,250 --> 00:15:01,680
because<font color="#CCCCCC"> of two reasons</font>

348
00:15:00,210 --> 00:15:04,050
first<font color="#E5E5E5"> of all the configuration</font><font color="#CCCCCC"> of course</font>

349
00:15:01,680 --> 00:15:07,560
<font color="#E5E5E5">side components that we used because we</font>

350
00:15:04,050 --> 00:15:10,020
are using the<font color="#E5E5E5"> cpi-u component that sends</font>

351
00:15:07,560 --> 00:15:12,810
<font color="#E5E5E5">it towards</font><font color="#CCCCCC"> fpga if we use the on chip</font>

352
00:15:10,020 --> 00:15:13,970
chip buffer it can we can have<font color="#CCCCCC"> an</font><font color="#E5E5E5"> our</font>

353
00:15:12,810 --> 00:15:16,709
head

354
00:15:13,970 --> 00:15:19,620
second of all<font color="#E5E5E5"> PTM is non-inclusive it</font>

355
00:15:16,709 --> 00:15:22,199
means that it it works on the on in

356
00:15:19,620 --> 00:15:24,540
parallel<font color="#E5E5E5"> on the</font><font color="#CCCCCC"> C</font><font color="#E5E5E5"> on a list of committed</font>

357
00:15:22,200 --> 00:15:28,830
CPU instructions<font color="#E5E5E5"> so this in the</font>

358
00:15:24,540 --> 00:15:30,959
architecture<font color="#CCCCCC"> itself we have the it is</font>

359
00:15:28,830 --> 00:15:33,089
<font color="#CCCCCC">done in the way that the list of</font>

360
00:15:30,959 --> 00:15:38,369
committed<font color="#CCCCCC"> ECP instructions will be sent</font>

361
00:15:33,089 --> 00:15:40,260
<font color="#E5E5E5">also towards</font><font color="#CCCCCC"> the PTM so to sum up this</font>

362
00:15:38,370 --> 00:15:41,130
section<font color="#E5E5E5"> well we are going to trace only</font>

363
00:15:40,260 --> 00:15:43,319
the touch the

364
00:15:41,130 --> 00:15:45,540
next section of<font color="#E5E5E5"> our application we will</font>

365
00:15:43,320 --> 00:15:46,800
be<font color="#E5E5E5"> recovered will thanks to</font><font color="#CCCCCC"> corset</font>

366
00:15:45,540 --> 00:15:48,089
components<font color="#E5E5E5"> will recover all branch</font>

367
00:15:46,800 --> 00:15:49,949
addresses<font color="#E5E5E5"> which will allow</font><font color="#CCCCCC"> us to</font>

368
00:15:48,090 --> 00:15:53,280
<font color="#E5E5E5">reconstruct the control photograph of</font>

369
00:15:49,950 --> 00:15:55,310
the application and<font color="#E5E5E5"> the advantage is</font>

370
00:15:53,280 --> 00:15:59,520
that they are non intrusive so we have a

371
00:15:55,310 --> 00:16:01,469
negligible our head so how are we<font color="#CCCCCC"> going</font>

372
00:15:59,520 --> 00:16:04,230
<font color="#CCCCCC">to use</font><font color="#E5E5E5"> them to improve software security</font>

373
00:16:01,470 --> 00:16:06,150
so well by implementing<font color="#CCCCCC"> import dynamic</font>

374
00:16:04,230 --> 00:16:09,630
<font color="#CCCCCC">information for</font><font color="#E5E5E5"> tracking so what we</font>

375
00:16:06,150 --> 00:16:11,340
<font color="#E5E5E5">needed</font><font color="#CCCCCC"> to have is the</font><font color="#E5E5E5"> information flows</font>

376
00:16:09,630 --> 00:16:13,140
all the<font color="#E5E5E5"> information flows that</font><font color="#CCCCCC"> happen</font>

377
00:16:11,340 --> 00:16:15,210
during our application execution

378
00:16:13,140 --> 00:16:16,319
thanks to go side components we<font color="#CCCCCC"> can</font>

379
00:16:15,210 --> 00:16:18,510
reconstruct the control flow graph

380
00:16:16,320 --> 00:16:22,710
<font color="#E5E5E5">however we do not know what happens</font>

381
00:16:18,510 --> 00:16:25,110
inside each basic block but thankfully

382
00:16:22,710 --> 00:16:26,550
<font color="#CCCCCC">we can</font><font color="#E5E5E5"> determine by doing the static</font>

383
00:16:25,110 --> 00:16:28,920
code analysis we can<font color="#E5E5E5"> determine what</font>

384
00:16:26,550 --> 00:16:31,439
happens inside each basic block of<font color="#CCCCCC"> the</font>

385
00:16:28,920 --> 00:16:33,540
control flow<font color="#CCCCCC"> graph so here we have</font><font color="#E5E5E5"> I'm</font>

386
00:16:31,440 --> 00:16:34,860
just<font color="#CCCCCC"> showing you</font><font color="#E5E5E5"> few examples so if</font><font color="#CCCCCC"> you</font>

387
00:16:33,540 --> 00:16:38,699
have the sub instruction the first

388
00:16:34,860 --> 00:16:40,110
instruction<font color="#CCCCCC"> our</font><font color="#E5E5E5"> here we</font><font color="#CCCCCC"> can we</font><font color="#E5E5E5"> can by</font>

389
00:16:38,700 --> 00:16:41,820
looking<font color="#CCCCCC"> at just at</font><font color="#E5E5E5"> the code we</font><font color="#CCCCCC"> can know</font>

390
00:16:40,110 --> 00:16:45,900
<font color="#CCCCCC">that there are will be information flows</font>

391
00:16:41,820 --> 00:16:49,190
between<font color="#CCCCCC"> registers r0 r1 and r2 and</font><font color="#E5E5E5"> well</font>

392
00:16:45,900 --> 00:16:52,949
the tag of r1 and<font color="#CCCCCC"> the tag of r2 will</font><font color="#E5E5E5"> be</font>

393
00:16:49,190 --> 00:16:55,590
<font color="#CCCCCC">merged together to get</font><font color="#E5E5E5"> the tag of</font>

394
00:16:52,950 --> 00:17:00,150
register r0 this is you know this<font color="#E5E5E5"> is how</font>

395
00:16:55,590 --> 00:17:02,790
we analyze the code to get<font color="#E5E5E5"> the missing</font>

396
00:17:00,150 --> 00:17:06,810
information about about information

397
00:17:02,790 --> 00:17:10,079
<font color="#E5E5E5">source so this is the architecture</font><font color="#CCCCCC"> we we</font>

398
00:17:06,810 --> 00:17:12,089
developed so we<font color="#CCCCCC"> just we are using single</font>

399
00:17:10,079 --> 00:17:15,720
cortex a9 CPU<font color="#E5E5E5"> cores we activate</font><font color="#CCCCCC"> code</font>

400
00:17:12,089 --> 00:17:17,730
side components<font color="#E5E5E5"> over here so when the</font>

401
00:17:15,720 --> 00:17:20,790
trace comes out we decode it and we

402
00:17:17,730 --> 00:17:23,250
store<font color="#CCCCCC"> it</font><font color="#E5E5E5"> in a memory</font><font color="#CCCCCC"> over here and we</font>

403
00:17:20,790 --> 00:17:26,909
have a coprocessor which<font color="#E5E5E5"> you</font><font color="#CCCCCC"> which which</font>

404
00:17:23,250 --> 00:17:30,000
reads these<font color="#CCCCCC"> traces which we have other</font>

405
00:17:26,910 --> 00:17:32,250
components<font color="#CCCCCC"> we needed to</font><font color="#E5E5E5"> store tags of CP</font>

406
00:17:30,000 --> 00:17:34,380
registers which are<font color="#E5E5E5"> stored</font><font color="#CCCCCC"> here we</font>

407
00:17:32,250 --> 00:17:35,910
<font color="#CCCCCC">needed also to store tag of memory</font>

408
00:17:34,380 --> 00:17:38,100
addresses used by the<font color="#E5E5E5"> application which</font>

409
00:17:35,910 --> 00:17:39,870
are<font color="#E5E5E5"> stored over here and the output of</font>

410
00:17:38,100 --> 00:17:42,540
static analysis is stored in the<font color="#E5E5E5"> tank</font>

411
00:17:39,870 --> 00:17:44,820
dependency section<font color="#E5E5E5"> over here</font><font color="#CCCCCC"> and</font><font color="#E5E5E5"> once</font>

412
00:17:42,540 --> 00:17:47,490
the coprocessor just you know propagates

413
00:17:44,820 --> 00:17:51,439
tags<font color="#E5E5E5"> and checks if everything s check</font>

414
00:17:47,490 --> 00:17:53,910
and checks<font color="#E5E5E5"> these</font><font color="#CCCCCC"> tags</font><font color="#E5E5E5"> and if something</font>

415
00:17:51,440 --> 00:17:55,030
<font color="#CCCCCC">unsecure happens it interrupts</font><font color="#E5E5E5"> the</font><font color="#CCCCCC"> CPU</font>

416
00:17:53,910 --> 00:17:59,590
<font color="#E5E5E5">stop this</font>

417
00:17:55,030 --> 00:18:03,100
thing wrong<font color="#E5E5E5"> I'm just</font><font color="#CCCCCC"> going to give you a</font>

418
00:17:59,590 --> 00:18:05,370
simple<font color="#CCCCCC"> example we test it with the</font><font color="#E5E5E5"> proof</font>

419
00:18:03,100 --> 00:18:08,230
<font color="#E5E5E5">of concept design that I just showed</font><font color="#CCCCCC"> you</font>

420
00:18:05,370 --> 00:18:11,320
so what it does you know<font color="#E5E5E5"> what we want to</font>

421
00:18:08,230 --> 00:18:13,780
do is we want to<font color="#CCCCCC"> protect our</font><font color="#E5E5E5"> to printing</font>

422
00:18:11,320 --> 00:18:16,540
any secret values over<font color="#E5E5E5"> here so it can</font>

423
00:18:13,780 --> 00:18:18,250
showing it just you<font color="#E5E5E5"> know</font><font color="#CCCCCC"> true</font><font color="#E5E5E5"> printing</font>

424
00:18:16,540 --> 00:18:20,350
but it can be any<font color="#E5E5E5"> function that sends it</font>

425
00:18:18,250 --> 00:18:22,540
towards the network or any other thing

426
00:18:20,350 --> 00:18:24,820
<font color="#E5E5E5">any other function that you know that</font>

427
00:18:22,540 --> 00:18:28,570
sense<font color="#E5E5E5"> that sends information towards the</font>

428
00:18:24,820 --> 00:18:31,629
network so what this<font color="#E5E5E5"> code</font><font color="#CCCCCC"> does is</font>

429
00:18:28,570 --> 00:18:34,899
depending on the type<font color="#CCCCCC"> of user it opens</font>

430
00:18:31,630 --> 00:18:36,670
the file<font color="#E5E5E5"> if it's a</font><font color="#CCCCCC"> normal user it's open</font>

431
00:18:34,900 --> 00:18:39,340
it opens a public<font color="#E5E5E5"> file if it's a root</font>

432
00:18:36,670 --> 00:18:41,290
user it opens a secret<font color="#E5E5E5"> sign and well we</font>

433
00:18:39,340 --> 00:18:44,260
could we copy the content of this file

434
00:18:41,290 --> 00:18:48,370
towards the buffer<font color="#CCCCCC"> and whether we</font><font color="#E5E5E5"> print</font>

435
00:18:44,260 --> 00:18:52,090
the buffer<font color="#E5E5E5"> so what we do not want is we</font>

436
00:18:48,370 --> 00:18:54,040
if if the user is normal<font color="#CCCCCC"> okay the buffer</font>

437
00:18:52,090 --> 00:18:56,199
will be printed<font color="#CCCCCC"> if the user issued we do</font>

438
00:18:54,040 --> 00:18:59,370
not want any sequence<font color="#CCCCCC"> information to be</font>

439
00:18:56,200 --> 00:19:02,110
revealed<font color="#CCCCCC"> or to be sent towards</font><font color="#E5E5E5"> network</font>

440
00:18:59,370 --> 00:19:04,090
so just<font color="#E5E5E5"> showing you the content of</font>

441
00:19:02,110 --> 00:19:07,560
simple files you know here for example

442
00:19:04,090 --> 00:19:11,199
<font color="#E5E5E5">we</font><font color="#CCCCCC"> just put some strings</font><font color="#E5E5E5"> in files and</font>

443
00:19:07,560 --> 00:19:14,320
<font color="#E5E5E5">well we run here</font><font color="#CCCCCC"> we are just running in</font>

444
00:19:11,200 --> 00:19:17,050
the program as<font color="#CCCCCC"> root user</font><font color="#E5E5E5"> so the buffer</font>

445
00:19:14,320 --> 00:19:20,399
value contains<font color="#CCCCCC"> MDP so this is without</font>

446
00:19:17,050 --> 00:19:22,899
information<font color="#E5E5E5"> for</font><font color="#CCCCCC"> tracking</font><font color="#E5E5E5"> and well if we</font>

447
00:19:20,400 --> 00:19:26,680
<font color="#E5E5E5">run the</font><font color="#CCCCCC"> program as a normal user we</font><font color="#E5E5E5"> will</font>

448
00:19:22,900 --> 00:19:28,270
get<font color="#E5E5E5"> other value well this is allowed</font><font color="#CCCCCC"> so</font>

449
00:19:26,680 --> 00:19:30,910
how the information<font color="#CCCCCC"> for tracking</font><font color="#E5E5E5"> will be</font>

450
00:19:28,270 --> 00:19:35,200
used<font color="#E5E5E5"> to prevent you know</font><font color="#CCCCCC"> the buffer to</font>

451
00:19:30,910 --> 00:19:37,570
printing this value<font color="#CCCCCC"> over here so what we</font>

452
00:19:35,200 --> 00:19:39,370
do is we will<font color="#E5E5E5"> not launch the script that</font>

453
00:19:37,570 --> 00:19:42,159
<font color="#E5E5E5">I showed</font><font color="#CCCCCC"> you earlier</font><font color="#E5E5E5"> that just for that</font>

454
00:19:39,370 --> 00:19:45,939
<font color="#E5E5E5">turns the ship that shuts down the CPU</font>

455
00:19:42,160 --> 00:19:48,400
<font color="#E5E5E5">the second CPU that programs the</font>

456
00:19:45,940 --> 00:19:50,860
<font color="#CCCCCC">coresight components and then we launch</font>

457
00:19:48,400 --> 00:19:52,930
the application once the<font color="#E5E5E5"> application has</font>

458
00:19:50,860 --> 00:19:56,260
launched it means we<font color="#E5E5E5"> are starting to get</font>

459
00:19:52,930 --> 00:19:58,090
<font color="#E5E5E5">races over</font><font color="#CCCCCC"> the FPGA part and</font><font color="#E5E5E5"> when we</font>

460
00:19:56,260 --> 00:20:00,670
<font color="#E5E5E5">disable</font><font color="#CCCCCC"> the coset components</font><font color="#E5E5E5"> after</font><font color="#CCCCCC"> the</font>

461
00:19:58,090 --> 00:20:04,899
program<font color="#CCCCCC"> has started us as</font><font color="#E5E5E5"> top executor</font>

462
00:20:00,670 --> 00:20:07,960
has finished executing<font color="#E5E5E5"> so if we look at</font>

463
00:20:04,900 --> 00:20:10,960
<font color="#E5E5E5">the cases so we get some</font><font color="#CCCCCC"> addresses</font>

464
00:20:07,960 --> 00:20:12,820
and well these addresses are are stored

465
00:20:10,960 --> 00:20:15,640
over here so these<font color="#CCCCCC"> are the decoded</font>

466
00:20:12,820 --> 00:20:19,840
traces the coprocessor<font color="#E5E5E5"> will be using</font>

467
00:20:15,640 --> 00:20:21,910
these dresses<font color="#CCCCCC"> to well to find find the</font>

468
00:20:19,840 --> 00:20:25,929
find what happens inside each basic

469
00:20:21,910 --> 00:20:27,340
block<font color="#E5E5E5"> so our here we look well we do not</font>

470
00:20:25,930 --> 00:20:30,220
need to launch<font color="#E5E5E5"> anything over here</font>

471
00:20:27,340 --> 00:20:32,889
<font color="#E5E5E5">because when the vendor Christ starts</font>

472
00:20:30,220 --> 00:20:35,050
coming<font color="#E5E5E5"> out there is an address and IP</font>

473
00:20:32,890 --> 00:20:37,660
that interrupts<font color="#E5E5E5"> the coprocessor to start</font>

474
00:20:35,050 --> 00:20:39,610
working on start<font color="#E5E5E5"> looking at the traces</font>

475
00:20:37,660 --> 00:20:42,940
<font color="#E5E5E5">and go finding the basic block address</font>

476
00:20:39,610 --> 00:20:46,419
the basic<font color="#CCCCCC"> blocks</font><font color="#E5E5E5"> and well here we</font><font color="#CCCCCC"> have</font>

477
00:20:42,940 --> 00:20:48,130
<font color="#E5E5E5">the traces for widget went to look</font><font color="#CCCCCC"> for</font>

478
00:20:46,420 --> 00:20:50,470
the basic blocks for<font color="#CCCCCC"> example for the</font>

479
00:20:48,130 --> 00:20:53,200
first one<font color="#CCCCCC"> over here it</font><font color="#E5E5E5"> looks at the</font>

480
00:20:50,470 --> 00:20:55,660
basic block<font color="#E5E5E5"> one</font><font color="#CCCCCC"> don't know if you can</font>

481
00:20:53,200 --> 00:20:58,000
look at it here but well I wrote<font color="#CCCCCC"> their</font>

482
00:20:55,660 --> 00:20:59,980
<font color="#E5E5E5">address is in little bit</font><font color="#CCCCCC"> conformed</font><font color="#E5E5E5"> so</font>

483
00:20:58,000 --> 00:21:02,440
well you can see<font color="#CCCCCC"> where here we get this</font>

484
00:20:59,980 --> 00:21:06,040
<font color="#E5E5E5">address by look so in the test we get</font>

485
00:21:02,440 --> 00:21:07,630
this address<font color="#CCCCCC"> and earlier</font><font color="#E5E5E5"> thanks to</font>

486
00:21:06,040 --> 00:21:10,690
static analysis we already had this

487
00:21:07,630 --> 00:21:11,890
information<font color="#E5E5E5"> in a memory section so we</font>

488
00:21:10,690 --> 00:21:14,830
are<font color="#E5E5E5"> going to read this memory section</font>

489
00:21:11,890 --> 00:21:17,740
<font color="#E5E5E5">and propagate all these tags then we</font>

490
00:21:14,830 --> 00:21:19,540
will go when<font color="#CCCCCC"> once we have finished</font>

491
00:21:17,740 --> 00:21:22,240
propagating all the<font color="#E5E5E5"> tags in the basic</font>

492
00:21:19,540 --> 00:21:26,139
<font color="#CCCCCC">block we are going to read the next race</font>

493
00:21:22,240 --> 00:21:28,390
<font color="#CCCCCC">in this case it is</font><font color="#E5E5E5"> 10 5 5 4 and well it</font>

494
00:21:26,140 --> 00:21:30,940
happens to<font color="#CCCCCC"> be this basic block 4 over</font>

495
00:21:28,390 --> 00:21:32,980
here<font color="#CCCCCC"> we are</font><font color="#E5E5E5"> going to propagate this the</font>

496
00:21:30,940 --> 00:21:35,470
tags for this basic<font color="#CCCCCC"> block similarly we</font>

497
00:21:32,980 --> 00:21:37,870
are going to<font color="#E5E5E5"> continue we are going to</font>

498
00:21:35,470 --> 00:21:40,240
read the trace<font color="#E5E5E5"> so it is 10 5 7 8 so we</font>

499
00:21:37,870 --> 00:21:42,340
know<font color="#CCCCCC"> that it has</font><font color="#E5E5E5"> a basic block 4 it has</font>

500
00:21:40,240 --> 00:21:44,710
<font color="#E5E5E5">executed the basic block over</font><font color="#CCCCCC"> here</font><font color="#E5E5E5"> and</font>

501
00:21:42,340 --> 00:21:46,750
after<font color="#E5E5E5"> that it</font><font color="#CCCCCC"> executed this basic block</font>

502
00:21:44,710 --> 00:21:48,220
<font color="#CCCCCC">and just before printing we added a</font>

503
00:21:46,750 --> 00:21:51,160
check you know just to check<font color="#CCCCCC"> the values</font>

504
00:21:48,220 --> 00:21:53,380
of the operands<font color="#CCCCCC"> so here we have you know</font>

505
00:21:51,160 --> 00:21:57,160
in arm instruction set<font color="#CCCCCC"> where in</font><font color="#E5E5E5"> ARM</font>

506
00:21:53,380 --> 00:22:01,030
architecture<font color="#E5E5E5"> the calling convention</font>

507
00:21:57,160 --> 00:22:03,250
dictates that you<font color="#E5E5E5"> the arguments of a</font>

508
00:22:01,030 --> 00:22:04,780
function will be in the registers<font color="#E5E5E5"> so</font>

509
00:22:03,250 --> 00:22:09,070
that's why we check the tags of

510
00:22:04,780 --> 00:22:10,750
registers r0 r1 r2 and<font color="#E5E5E5"> r3 so r1 is the</font>

511
00:22:09,070 --> 00:22:13,030
<font color="#E5E5E5">register</font><font color="#CCCCCC"> that contains the buffer value</font>

512
00:22:10,750 --> 00:22:15,880
so over here<font color="#E5E5E5"> we can look at it</font><font color="#CCCCCC"> stacked</font>

513
00:22:13,030 --> 00:22:19,440
r1 so when it finds out it interrupts

514
00:22:15,880 --> 00:22:21,320
<font color="#E5E5E5">the CPU and the program stops executing</font>

515
00:22:19,440 --> 00:22:26,149
so what this

516
00:22:21,320 --> 00:22:28,700
<font color="#CCCCCC">oh</font><font color="#E5E5E5"> just here similarly we can use these</font>

517
00:22:26,149 --> 00:22:31,250
<font color="#E5E5E5">components to prevent from other types</font>

518
00:22:28,700 --> 00:22:33,080
of attacks like return-oriented

519
00:22:31,250 --> 00:22:36,860
programming attacks or jump oriented

520
00:22:33,080 --> 00:22:40,908
programming attacks<font color="#E5E5E5"> this</font><font color="#CCCCCC"> info</font><font color="#E5E5E5"> this has</font>

521
00:22:36,860 --> 00:22:42,949
<font color="#CCCCCC">been done by by Leal in</font><font color="#E5E5E5"> in a work that</font>

522
00:22:40,909 --> 00:22:46,610
<font color="#CCCCCC">is</font><font color="#E5E5E5"> that was presented in another</font>

523
00:22:42,950 --> 00:22:49,370
<font color="#E5E5E5">conference so what what they do is for</font>

524
00:22:46,610 --> 00:22:51,320
<font color="#E5E5E5">each function call they distort the the</font>

525
00:22:49,370 --> 00:22:55,008
make a shadow<font color="#E5E5E5"> call</font><font color="#CCCCCC"> stock a</font><font color="#E5E5E5"> shadow call</font>

526
00:22:51,320 --> 00:22:56,480
stack sorry what it does is each<font color="#CCCCCC"> time of</font>

527
00:22:55,009 --> 00:22:57,830
function call is executed<font color="#E5E5E5"> this</font>

528
00:22:56,480 --> 00:23:01,399
information they<font color="#E5E5E5"> can obtain with the</font>

529
00:22:57,830 --> 00:23:03,980
traces and they have the maker software

530
00:23:01,399 --> 00:23:06,350
analysis that matches<font color="#E5E5E5"> each branch call</font>

531
00:23:03,980 --> 00:23:08,179
with the returning address and by using

532
00:23:06,350 --> 00:23:10,730
this<font color="#CCCCCC"> we construct there's shadow call</font>

533
00:23:08,179 --> 00:23:13,610
stack<font color="#E5E5E5"> and once this shadow stack has</font>

534
00:23:10,730 --> 00:23:15,649
been and once the function<font color="#E5E5E5"> returns they</font>

535
00:23:13,610 --> 00:23:18,110
check the<font color="#E5E5E5"> shadows</font><font color="#CCCCCC"> the</font><font color="#E5E5E5"> shadow stack value</font>

536
00:23:15,649 --> 00:23:20,449
with<font color="#CCCCCC"> a</font><font color="#E5E5E5"> realistic value and if it matches</font>

537
00:23:18,110 --> 00:23:23,269
everything is<font color="#CCCCCC"> ok if it does not match</font>

538
00:23:20,450 --> 00:23:24,799
well something went<font color="#E5E5E5"> wrong and this is</font>

539
00:23:23,269 --> 00:23:27,940
<font color="#CCCCCC">how they detect</font><font color="#E5E5E5"> the return-oriented</font>

540
00:23:24,799 --> 00:23:30,110
programming attacks so just to sum up

541
00:23:27,940 --> 00:23:32,360
<font color="#CCCCCC">dynamic information so traction or</font>

542
00:23:30,110 --> 00:23:34,939
<font color="#E5E5E5">tracking allows to prevent against</font>

543
00:23:32,360 --> 00:23:37,699
buffer overflows<font color="#CCCCCC"> heap overflows data</font>

544
00:23:34,940 --> 00:23:39,889
leakage prevention just<font color="#CCCCCC"> a just I showed</font>

545
00:23:37,700 --> 00:23:43,730
<font color="#CCCCCC">you earlier and sequel injections as</font>

546
00:23:39,889 --> 00:23:45,529
well<font color="#CCCCCC"> cross-site scripting as well we can</font>

547
00:23:43,730 --> 00:23:51,409
<font color="#E5E5E5">use it to prevent code reuse attacks as</font>

548
00:23:45,529 --> 00:23:52,850
well<font color="#CCCCCC"> and well just going</font><font color="#E5E5E5"> to one for</font>

549
00:23:51,409 --> 00:23:54,470
those<font color="#E5E5E5"> of you who have not heard</font><font color="#CCCCCC"> of</font>

550
00:23:52,850 --> 00:23:57,110
course<font color="#E5E5E5"> that</font><font color="#CCCCCC"> components this can be take</font>

551
00:23:54,470 --> 00:23:59,360
away for use<font color="#E5E5E5"> you can you can use course</font>

552
00:23:57,110 --> 00:24:02,000
<font color="#CCCCCC">ID components to obtain information that</font>

553
00:23:59,360 --> 00:24:05,629
changes to obtain information<font color="#E5E5E5"> about</font>

554
00:24:02,000 --> 00:24:07,399
program flow changes in a program and it

555
00:24:05,629 --> 00:24:08,689
<font color="#CCCCCC">it</font><font color="#E5E5E5"> is non intrusive because there is</font>

556
00:24:07,399 --> 00:24:10,158
negligible<font color="#E5E5E5"> at performance overhead</font>

557
00:24:08,690 --> 00:24:12,710
<font color="#E5E5E5">depending on your configuration of</font>

558
00:24:10,159 --> 00:24:13,940
course<font color="#CCCCCC"> at components it allows to</font>

559
00:24:12,710 --> 00:24:15,620
improve<font color="#CCCCCC"> software security</font><font color="#E5E5E5"> by</font>

560
00:24:13,940 --> 00:24:18,799
implementing<font color="#E5E5E5"> dynamic information</font><font color="#CCCCCC"> flow</font>

561
00:24:15,620 --> 00:24:21,768
<font color="#E5E5E5">tracking for example and while we in</font>

562
00:24:18,799 --> 00:24:25,100
future work we will consider other debug

563
00:24:21,769 --> 00:24:26,960
components<font color="#E5E5E5"> we'll see how how they can be</font>

564
00:24:25,100 --> 00:24:29,299
<font color="#E5E5E5">whether they can be used or</font><font color="#CCCCCC"> not to</font>

565
00:24:26,960 --> 00:24:31,340
<font color="#E5E5E5">prepare to implement dynamic</font><font color="#CCCCCC"> information</font>

566
00:24:29,299 --> 00:24:33,620
for<font color="#CCCCCC"> cracking</font><font color="#E5E5E5"> on so this will allow</font><font color="#CCCCCC"> us to</font>

567
00:24:31,340 --> 00:24:35,840
<font color="#CCCCCC">know to to port our approach on other</font>

568
00:24:33,620 --> 00:24:42,080
<font color="#CCCCCC">hardcore</font><font color="#E5E5E5"> CPUs</font>

569
00:24:35,840 --> 00:24:43,669
so I can't time<font color="#E5E5E5"> I'm thanking common land</font>

570
00:24:42,080 --> 00:24:48,080
bridge between<font color="#CCCCCC"> you</font><font color="#E5E5E5"> region to find enough</font>

571
00:24:43,670 --> 00:24:50,330
to fund to finance my PhD thesis<font color="#E5E5E5"> my PhD</font>

572
00:24:48,080 --> 00:24:52,460
supervisor Pascal<font color="#CCCCCC"> cadre who would have</font>

573
00:24:50,330 --> 00:24:55,970
loved<font color="#CCCCCC"> to</font><font color="#E5E5E5"> be here but who could not</font><font color="#CCCCCC"> make</font>

574
00:24:52,460 --> 00:24:57,410
<font color="#CCCCCC">it and another PhD student who is</font>

575
00:24:55,970 --> 00:25:00,380
<font color="#CCCCCC">working</font><font color="#E5E5E5"> on the software</font><font color="#CCCCCC"> side of</font><font color="#E5E5E5"> this</font>

576
00:24:57,410 --> 00:25:03,200
this<font color="#E5E5E5"> topic and my</font><font color="#CCCCCC"> peers disparate</font>

577
00:25:00,380 --> 00:25:05,000
<font color="#CCCCCC">success right</font><font color="#E5E5E5"> so if you have any</font>

578
00:25:03,200 --> 00:25:06,110
questions<font color="#E5E5E5"> thank you for listening</font><font color="#CCCCCC"> if you</font>

579
00:25:05,000 --> 00:25:13,820
have any questions I will be<font color="#CCCCCC"> happy to</font>

580
00:25:06,110 --> 00:25:19,550
<font color="#CCCCCC">answer</font><font color="#E5E5E5"> them so does anybody have a</font>

581
00:25:13,820 --> 00:25:27,980
question<font color="#CCCCCC"> for</font><font color="#E5E5E5"> Mohammed no nobody and</font>

582
00:25:19,550 --> 00:25:30,740
thanks<font color="#E5E5E5"> mama oh oh sorry so you said that</font>

583
00:25:27,980 --> 00:25:34,850
<font color="#E5E5E5">the performance impact is maybe a little</font>

584
00:25:30,740 --> 00:25:40,240
bit like<font color="#E5E5E5"> easier when you</font><font color="#CCCCCC"> use the in chip</font>

585
00:25:34,850 --> 00:25:44,090
buffer so do you have<font color="#E5E5E5"> like numbers well</font>

586
00:25:40,240 --> 00:25:46,520
<font color="#E5E5E5">I know</font><font color="#CCCCCC"> that in a paper the numbers were</font>

587
00:25:44,090 --> 00:25:50,510
given<font color="#E5E5E5"> but I don't remember it was not</font>

588
00:25:46,520 --> 00:25:50,990
<font color="#CCCCCC">more than 10 to 15%</font><font color="#E5E5E5"> but it's not that</font>

589
00:25:50,510 --> 00:25:53,629
fast

590
00:25:50,990 --> 00:25:55,070
yeah the overhead comes<font color="#CCCCCC"> what in my</font>

591
00:25:53,630 --> 00:25:57,110
opinion<font color="#CCCCCC"> the wear head comes because the</font>

592
00:25:55,070 --> 00:25:59,270
on<font color="#E5E5E5"> chip buffer is very small so you have</font>

593
00:25:57,110 --> 00:26:01,459
to when it gets<font color="#CCCCCC"> filled</font><font color="#E5E5E5"> you have to store</font>

594
00:25:59,270 --> 00:26:04,040
the buffer content somewhere<font color="#E5E5E5"> else</font><font color="#CCCCCC"> so</font>

595
00:26:01,460 --> 00:26:05,720
this<font color="#E5E5E5"> is why there</font><font color="#CCCCCC"> is an</font><font color="#E5E5E5"> hour head so we</font>

596
00:26:04,040 --> 00:26:10,010
don't have this<font color="#E5E5E5"> our</font><font color="#CCCCCC"> our head when we use</font>

597
00:26:05,720 --> 00:26:11,990
the<font color="#CCCCCC"> cpi-u</font><font color="#E5E5E5"> because when we have first of</font>

598
00:26:10,010 --> 00:26:13,850
<font color="#E5E5E5">all we decode the trace as it comes so</font>

599
00:26:11,990 --> 00:26:16,160
we don't have<font color="#E5E5E5"> to store</font><font color="#CCCCCC"> it and which</font>

600
00:26:13,850 --> 00:26:20,980
could only we store only the decoded

601
00:26:16,160 --> 00:26:20,980
traces great<font color="#CCCCCC"> ok</font>

602
00:26:22,030 --> 00:26:27,490
no more questions<font color="#CCCCCC"> ok thanks</font>

