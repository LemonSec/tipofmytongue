1
00:00:12,130 --> 00:00:18,070
awesome hi everyone really great<font color="#E5E5E5"> to be</font>

2
00:00:15,430 --> 00:00:21,160
here today so our presentation will be

3
00:00:18,070 --> 00:00:23,560
about content security policy this is

4
00:00:21,160 --> 00:00:27,040
<font color="#CCCCCC">michaela I'm Lucas we both work at</font>

5
00:00:23,560 --> 00:00:29,939
Google in Zurich we're<font color="#E5E5E5"> a part of a</font>

6
00:00:27,040 --> 00:00:32,619
special focus area that deals with

7
00:00:29,939 --> 00:00:35,200
promising mitigation techniques and

8
00:00:32,619 --> 00:00:37,360
proactive projects to mitigate whole

9
00:00:35,200 --> 00:00:41,800
classes of<font color="#E5E5E5"> bugs and content security</font>

10
00:00:37,360 --> 00:00:44,050
policy is actually one of them and we

11
00:00:41,800 --> 00:00:45,849
spent a<font color="#CCCCCC"> lot of time the last</font><font color="#E5E5E5"> year on</font>

12
00:00:44,050 --> 00:00:48,129
content security policy we learned a lot

13
00:00:45,850 --> 00:00:53,140
and we wanted<font color="#E5E5E5"> to share some of that with</font>

14
00:00:48,130 --> 00:00:56,230
you<font color="#E5E5E5"> guys so very brief recap before we</font>

15
00:00:53,140 --> 00:00:57,970
start I just<font color="#E5E5E5"> wanted to ask you</font><font color="#CCCCCC"> guys who</font>

16
00:00:56,230 --> 00:01:00,849
of you has worked with a Content

17
00:00:57,970 --> 00:01:03,640
security policy before even like audited

18
00:01:00,850 --> 00:01:07,329
or you know put it<font color="#E5E5E5"> on the sides cool</font>

19
00:01:03,640 --> 00:01:10,840
some people have awesome who if you know

20
00:01:07,329 --> 00:01:13,649
what the nonce based policies like

21
00:01:10,840 --> 00:01:16,990
responses or with strict dynamic one

22
00:01:13,650 --> 00:01:22,450
okay to so i<font color="#CCCCCC"> think it's very good to</font>

23
00:01:16,990 --> 00:01:29,288
have a recap<font color="#E5E5E5"> and we briefly repeat what</font>

24
00:01:22,450 --> 00:01:34,450
happened to last nine sorry this wasn't

25
00:01:29,289 --> 00:01:36,850
me know so basically you're has been

26
00:01:34,450 --> 00:01:39,340
here already last year and you're mostly

27
00:01:36,850 --> 00:01:42,600
talking about how<font color="#E5E5E5"> to bypass</font><font color="#CCCCCC"> the</font><font color="#E5E5E5"> mike lee</font>

28
00:01:39,340 --> 00:01:45,219
space<font color="#CCCCCC"> CSPs we did a pretty big research</font>

29
00:01:42,600 --> 00:01:47,199
on all content security policies you

30
00:01:45,219 --> 00:01:50,859
could find in the<font color="#CCCCCC"> google search index</font>

31
00:01:47,200 --> 00:01:52,990
and it turned out that most<font color="#CCCCCC"> content</font>

32
00:01:50,859 --> 00:01:54,818
<font color="#CCCCCC">review policies were used for mitigating</font>

33
00:01:52,990 --> 00:01:58,359
exits which makes sense because<font color="#E5E5E5"> this is</font>

34
00:01:54,819 --> 00:02:00,700
why we have CSP mostly right in addition

35
00:01:58,359 --> 00:02:03,219
to<font color="#E5E5E5"> that we also evaluated the security</font>

36
00:02:00,700 --> 00:02:06,659
of these policies and it turns out that

37
00:02:03,219 --> 00:02:10,538
<font color="#E5E5E5">at this time almost ninety four percent</font>

38
00:02:06,659 --> 00:02:13,450
of the<font color="#CCCCCC"> white list based policies were</font>

39
00:02:10,538 --> 00:02:14,739
completely by possible automatically

40
00:02:13,450 --> 00:02:17,200
like all the policies from the bear

41
00:02:14,740 --> 00:02:18,580
pride which is pretty bad if you think

42
00:02:17,200 --> 00:02:20,769
of<font color="#E5E5E5"> it right it takes a lot of time to</font>

43
00:02:18,580 --> 00:02:22,450
come up<font color="#CCCCCC"> with a visor space policy to</font>

44
00:02:20,770 --> 00:02:24,430
refactor your application to make it

45
00:02:22,450 --> 00:02:25,690
work and<font color="#E5E5E5"> then you're actually getting</font>

46
00:02:24,430 --> 00:02:29,320
not really<font color="#E5E5E5"> a lot of benefits</font>

47
00:02:25,690 --> 00:02:31,420
so we actually propose to use non-space

48
00:02:29,320 --> 00:02:34,239
policies instead of vital space policies

49
00:02:31,420 --> 00:02:37,420
because they can offer significantly

50
00:02:34,240 --> 00:02:39,850
more security guarantees and in addition

51
00:02:37,420 --> 00:02:42,780
to that we also proposed strict dynamic

52
00:02:39,850 --> 00:02:45,430
which went into<font color="#E5E5E5"> the CSP respect recently</font>

53
00:02:42,780 --> 00:02:47,560
which kind of makes<font color="#CCCCCC"> a non space policies</font>

54
00:02:45,430 --> 00:02:51,700
actually bill actually workable in

55
00:02:47,560 --> 00:02:53,650
practice so if you want to<font color="#CCCCCC"> learn more</font>

56
00:02:51,700 --> 00:02:55,810
<font color="#CCCCCC">about like</font><font color="#E5E5E5"> this previous research like</font>

57
00:02:53,650 --> 00:03:00,040
why<font color="#CCCCCC"> whiteley space security right place</font>

58
00:02:55,810 --> 00:03:02,620
pasties<font color="#E5E5E5"> piece are not really great there</font>

59
00:03:00,040 --> 00:03:07,150
is a really<font color="#E5E5E5"> cool paper</font><font color="#CCCCCC"> he presented</font><font color="#E5E5E5"> at</font>

60
00:03:02,620 --> 00:03:10,480
the<font color="#E5E5E5"> CCS in Vienna last year provides a</font>

61
00:03:07,150 --> 00:03:14,250
lot of<font color="#E5E5E5"> information on that so brief</font>

62
00:03:10,480 --> 00:03:16,869
recap how to non-space policies work

63
00:03:14,250 --> 00:03:19,900
basically you have a Content security

64
00:03:16,870 --> 00:03:21,910
policy like that you restrict the

65
00:03:19,900 --> 00:03:24,220
scripts that can be loaded and you have

66
00:03:21,910 --> 00:03:26,320
around a non-slip a random value<font color="#CCCCCC"> this</font>

67
00:03:24,220 --> 00:03:30,730
<font color="#CCCCCC">value needs</font><font color="#E5E5E5"> to be random for every</font>

68
00:03:26,320 --> 00:03:33,910
response right so the<font color="#E5E5E5"> idea is the</font>

69
00:03:30,730 --> 00:03:36,070
browser only<font color="#E5E5E5"> executes script tags on the</font>

70
00:03:33,910 --> 00:03:38,459
site if the script tag has a nonce

71
00:03:36,070 --> 00:03:42,100
attribute that matches this random value

72
00:03:38,459 --> 00:03:45,130
so an attacker who found an xss

73
00:03:42,100 --> 00:03:47,640
vulnerability cannot inject a script tag

74
00:03:45,130 --> 00:03:49,900
without<font color="#E5E5E5"> knowing the norms right and</font>

75
00:03:47,640 --> 00:03:52,299
since he usually does not<font color="#CCCCCC"> know the nonce</font>

76
00:03:49,900 --> 00:03:54,100
the browser will<font color="#E5E5E5"> just refuse to execute</font>

77
00:03:52,300 --> 00:03:56,440
the script so this is<font color="#CCCCCC"> the basic</font>

78
00:03:54,100 --> 00:03:58,060
principle in<font color="#E5E5E5"> addition to that non-space</font>

79
00:03:56,440 --> 00:03:59,590
policies also have the big advantage

80
00:03:58,060 --> 00:04:02,200
that<font color="#CCCCCC"> you don't have</font><font color="#E5E5E5"> to</font><font color="#CCCCCC"> come up with a</font>

81
00:03:59,590 --> 00:04:04,870
application-specific whitelist which can

82
00:04:02,200 --> 00:04:07,000
be a very tedious task if it's a big

83
00:04:04,870 --> 00:04:08,739
<font color="#CCCCCC">application right and these white is too</font>

84
00:04:07,000 --> 00:04:11,110
<font color="#E5E5E5">often even change after overtime right</font>

85
00:04:08,739 --> 00:04:15,220
which is<font color="#E5E5E5"> like a big source of breakage</font>

86
00:04:11,110 --> 00:04:16,930
and yes in addition to<font color="#E5E5E5"> that you also</font>

87
00:04:15,220 --> 00:04:18,790
don't have to care<font color="#CCCCCC"> about like</font><font color="#E5E5E5"> rightly</font>

88
00:04:16,930 --> 00:04:20,290
spy passes like<font color="#E5E5E5"> jason b or angular</font>

89
00:04:18,790 --> 00:04:23,950
bypasses for like this because it's a

90
00:04:20,290 --> 00:04:28,570
<font color="#E5E5E5">non space policy so how does this</font>

91
00:04:23,950 --> 00:04:30,909
usually work if you take this example we

92
00:04:28,570 --> 00:04:32,530
have like a script with a nonce this

93
00:04:30,910 --> 00:04:34,930
random<font color="#CCCCCC"> non tell you is the same as in</font>

94
00:04:32,530 --> 00:04:37,630
the policy so the browser allows<font color="#E5E5E5"> inline</font>

95
00:04:34,930 --> 00:04:41,950
script and this source script to execute

96
00:04:37,630 --> 00:04:43,960
<font color="#E5E5E5">it's all client side right if you have</font>

97
00:04:41,950 --> 00:04:47,050
an attacker and<font color="#CCCCCC"> he check and check the</font>

98
00:04:43,960 --> 00:04:48,549
script tag in line or source it does<font color="#E5E5E5"> not</font>

99
00:04:47,050 --> 00:04:53,350
have the nonce attribute so the

100
00:04:48,550 --> 00:04:58,210
processes no this cannot execute the

101
00:04:53,350 --> 00:05:00,580
exercise is kind of mitigated so strict

102
00:04:58,210 --> 00:05:05,169
dynamic basically built on top of that

103
00:05:00,580 --> 00:05:10,440
it allows to dynamically propagate trust

104
00:05:05,169 --> 00:05:14,890
from non scripts to child scripts with

105
00:05:10,440 --> 00:05:19,090
basically<font color="#E5E5E5"> Dom based api's like create</font>

106
00:05:14,890 --> 00:05:21,010
element and<font color="#E5E5E5"> appendchild this is very</font>

107
00:05:19,090 --> 00:05:24,159
important because many libraries

108
00:05:21,010 --> 00:05:26,680
<font color="#E5E5E5">JavaScript libraries creates dynamically</font>

109
00:05:24,160 --> 00:05:28,840
<font color="#E5E5E5">JavaScript to for example for module</font>

110
00:05:26,680 --> 00:05:32,410
loading or for tracing p and for this

111
00:05:28,840 --> 00:05:34,510
kind of stuff right so they don't

112
00:05:32,410 --> 00:05:35,890
propagate the nonce so they kind of

113
00:05:34,510 --> 00:05:38,169
break if<font color="#CCCCCC"> you don't have strict dynamic</font>

114
00:05:35,890 --> 00:05:40,630
so this is<font color="#CCCCCC"> kind of a stepping stone to</font>

115
00:05:38,169 --> 00:05:42,969
make this<font color="#CCCCCC"> work till most of the</font>

116
00:05:40,630 --> 00:05:46,719
libraries have been refactored to you

117
00:05:42,970 --> 00:05:49,210
know propagate the norms manually in

118
00:05:46,720 --> 00:05:52,090
addition<font color="#E5E5E5"> to that if you have strict the</font>

119
00:05:49,210 --> 00:05:56,020
namek in the policy it also drops the

120
00:05:52,090 --> 00:05:58,780
right list so if you have<font color="#E5E5E5"> example like a</font>

121
00:05:56,020 --> 00:06:01,090
policy like this and then here like

122
00:05:58,780 --> 00:06:05,770
google com strict dynamic would cause

123
00:06:01,090 --> 00:06:08,020
google com to disappear because if you

124
00:06:05,770 --> 00:06:09,849
would have google.com there as well it

125
00:06:08,020 --> 00:06:11,740
would mean that script could load if it

126
00:06:09,849 --> 00:06:14,590
has announced or source from google com

127
00:06:11,740 --> 00:06:16,570
and we want<font color="#CCCCCC"> to have it more strict so we</font>

128
00:06:14,590 --> 00:06:18,340
dropped the whitelist this is also<font color="#E5E5E5"> very</font>

129
00:06:16,570 --> 00:06:19,780
nice because<font color="#E5E5E5"> then their policy is</font>

130
00:06:18,340 --> 00:06:22,090
backward compatible<font color="#E5E5E5"> which</font><font color="#CCCCCC"> I</font><font color="#E5E5E5"> will show</font>

131
00:06:19,780 --> 00:06:24,090
<font color="#E5E5E5">you in a second and you can use the same</font>

132
00:06:22,090 --> 00:06:26,289
policy for older and newer browsers

133
00:06:24,090 --> 00:06:33,039
regardless if the<font color="#CCCCCC"> support six dynamic or</font>

134
00:06:26,289 --> 00:06:35,110
not so this<font color="#E5E5E5"> is an example the top green</font>

135
00:06:33,039 --> 00:06:38,680
box is basically what is allow Pacific

136
00:06:35,110 --> 00:06:41,590
dynamic the parent script is non stand

137
00:06:38,680 --> 00:06:44,560
since the economic it can create a<font color="#E5E5E5"> new</font>

138
00:06:41,590 --> 00:06:46,299
script and does can do a pen child and

139
00:06:44,560 --> 00:06:49,020
<font color="#E5E5E5">this new script will also be allowed to</font>

140
00:06:46,300 --> 00:06:52,150
execute as i said this pattern is<font color="#E5E5E5"> very</font>

141
00:06:49,020 --> 00:06:55,840
just<font color="#CCCCCC"> these patterns vary</font>

142
00:06:52,150 --> 00:06:58,419
then used in<font color="#CCCCCC"> in libraries on the other</font>

143
00:06:55,840 --> 00:07:00,940
<font color="#E5E5E5">hand parcel inserted stuff like</font>

144
00:06:58,420 --> 00:07:02,500
<font color="#CCCCCC">document.write or</font><font color="#E5E5E5"> inner HTML is not</font>

145
00:07:00,940 --> 00:07:07,540
<font color="#E5E5E5">blessed because that's usually a very</font>

146
00:07:02,500 --> 00:07:10,240
<font color="#E5E5E5">big source of you know exercise so that</font>

147
00:07:07,540 --> 00:07:13,030
was the recap<font color="#CCCCCC"> I want</font><font color="#E5E5E5"> to share some of</font>

148
00:07:10,240 --> 00:07:16,150
our experiences with like two going

149
00:07:13,030 --> 00:07:21,280
<font color="#E5E5E5">restricted tsp at Google at many on many</font>

150
00:07:16,150 --> 00:07:24,039
big products it's<font color="#E5E5E5"> actually really cool</font>

151
00:07:21,280 --> 00:07:27,549
because in the last nine months<font color="#E5E5E5"> a team</font>

152
00:07:24,040 --> 00:07:30,400
<font color="#CCCCCC">of about like four full-time equivalent</font>

153
00:07:27,550 --> 00:07:33,160
people they're able<font color="#E5E5E5"> to roll out a strict</font>

154
00:07:30,400 --> 00:07:39,010
ESP or<font color="#CCCCCC"> to like almost a billion users</font>

155
00:07:33,160 --> 00:07:41,950
and in total<font color="#CCCCCC"> like so</font><font color="#E5E5E5"> far in nine months</font>

156
00:07:39,010 --> 00:07:43,450
like 150 services which is really a lot

157
00:07:41,950 --> 00:07:45,670
<font color="#E5E5E5">right because</font><font color="#CCCCCC"> if the violence based</font>

158
00:07:43,450 --> 00:07:47,950
approach you usually needed something

159
00:07:45,670 --> 00:07:49,990
between like I don't know<font color="#E5E5E5"> 3 and 4 45</font>

160
00:07:47,950 --> 00:07:51,670
people for two years to reflect that

161
00:07:49,990 --> 00:07:56,140
application to come up with device list

162
00:07:51,670 --> 00:07:57,580
to maintain<font color="#E5E5E5"> it right and with the nonce</font>

163
00:07:56,140 --> 00:08:02,200
place policies this is actually much

164
00:07:57,580 --> 00:08:04,870
simpler so it scales<font color="#E5E5E5"> very well and in</font>

165
00:08:02,200 --> 00:08:06,729
addition to<font color="#E5E5E5"> that we also monitoring in</font>

166
00:08:04,870 --> 00:08:08,560
CSP violations which we receiving right

167
00:08:06,730 --> 00:08:10,750
every time the browser block something

168
00:08:08,560 --> 00:08:11,980
it sends<font color="#CCCCCC"> back a violation report to let</font>

169
00:08:10,750 --> 00:08:14,800
the developer know that there might be

170
00:08:11,980 --> 00:08:17,110
something broken right so per day we

171
00:08:14,800 --> 00:08:20,560
receive about 50 million CSP reports

172
00:08:17,110 --> 00:08:24,460
there's a lot<font color="#CCCCCC"> right so it it means</font><font color="#E5E5E5"> like</font>

173
00:08:20,560 --> 00:08:26,470
all our applications are broken or that

174
00:08:24,460 --> 00:08:28,960
is a<font color="#E5E5E5"> lot</font><font color="#CCCCCC"> of noise so like spoiler alert</font>

175
00:08:26,470 --> 00:08:30,850
it's all noise and<font color="#E5E5E5"> it's</font><font color="#CCCCCC"> actually a big</font>

176
00:08:28,960 --> 00:08:32,829
problem for us because<font color="#CCCCCC"> nick is really</font>

177
00:08:30,850 --> 00:08:36,159
hard to find out if you<font color="#E5E5E5"> have some real</font>

178
00:08:32,830 --> 00:08:38,350
breakage or if it's just you know noise

179
00:08:36,159 --> 00:08:42,189
but we have<font color="#CCCCCC"> a slide about that as well</font>

180
00:08:38,350 --> 00:08:44,050
later so a couple of services<font color="#CCCCCC"> you may</font>

181
00:08:42,190 --> 00:08:47,800
know that has a strict CSP already

182
00:08:44,049 --> 00:08:51,280
deployed our google photos you know

183
00:08:47,800 --> 00:08:52,839
<font color="#E5E5E5">Google+ accounts to google.com pathos or</font>

184
00:08:51,280 --> 00:09:00,959
google com like the sensitive domains

185
00:08:52,840 --> 00:09:04,420
and many more so there<font color="#CCCCCC"> is a couple of</font>

186
00:09:00,960 --> 00:09:05,920
requirements that need to be mapped to

187
00:09:04,420 --> 00:09:09,969
actually roll out

188
00:09:05,920 --> 00:09:11,410
be at that scale and we wanted<font color="#E5E5E5"> to share</font>

189
00:09:09,970 --> 00:09:14,470
this<font color="#CCCCCC"> with you maybe that's also useful</font>

190
00:09:11,410 --> 00:09:18,189
for if you want to roll out<font color="#E5E5E5"> GSP it at</font>

191
00:09:14,470 --> 00:09:21,070
your company or privately right so what

192
00:09:18,190 --> 00:09:24,370
really helped<font color="#E5E5E5"> us a lot is baking 60s be</font>

193
00:09:21,070 --> 00:09:26,769
into the core frame Brooks right so that

194
00:09:24,370 --> 00:09:29,279
all new services that are built on the

195
00:09:26,769 --> 00:09:31,600
core framework still have it by default

196
00:09:29,279 --> 00:09:36,610
without the developer having to doing

197
00:09:31,600 --> 00:09:39,060
anything and the existing<font color="#E5E5E5"> services built</font>

198
00:09:36,610 --> 00:09:42,190
on the core frameworks could be opted in

199
00:09:39,060 --> 00:09:44,529
after they have been tested<font color="#E5E5E5"> by just</font>

200
00:09:42,190 --> 00:09:46,120
searching a flag so this was the<font color="#E5E5E5"> case</font>

201
00:09:44,529 --> 00:09:48,730
for<font color="#E5E5E5"> Google+ we just have to</font><font color="#CCCCCC"> switch a</font>

202
00:09:46,120 --> 00:09:50,889
flag to get<font color="#E5E5E5"> 60s be enabled and it worked</font>

203
00:09:48,730 --> 00:09:52,779
right it is<font color="#E5E5E5"> really nice compared to</font>

204
00:09:50,889 --> 00:09:55,720
<font color="#E5E5E5">widely</font><font color="#CCCCCC"> spaced policies because it takes</font>

205
00:09:52,779 --> 00:10:00,130
a long time to get them broke for almost

206
00:09:55,720 --> 00:10:02,579
no benefit so the culprit is here<font color="#E5E5E5"> that</font>

207
00:10:00,130 --> 00:10:05,439
some requirements for this to actually

208
00:10:02,579 --> 00:10:09,279
make she escaped deployments that easy

209
00:10:05,440 --> 00:10:10,570
and probably<font color="#E5E5E5"> most important one is</font><font color="#CCCCCC"> that</font>

210
00:10:09,279 --> 00:10:13,000
<font color="#E5E5E5">you have</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> have like a service</font>

211
00:10:10,570 --> 00:10:16,110
independence ESP like<font color="#E5E5E5"> once</font><font color="#CCCCCC"> you speed</font>

212
00:10:13,000 --> 00:10:18,670
that<font color="#E5E5E5"> you</font><font color="#CCCCCC"> can use for every service and</font>

213
00:10:16,110 --> 00:10:22,149
that's actually a nice thing about

214
00:10:18,670 --> 00:10:24,610
non-space GSP with stick dynamic you can

215
00:10:22,149 --> 00:10:26,079
use the same CSP for all products not

216
00:10:24,610 --> 00:10:27,640
<font color="#E5E5E5">even restricted to Google products where</font>

217
00:10:26,079 --> 00:10:30,910
you can<font color="#CCCCCC"> use</font><font color="#E5E5E5"> that in general which is</font>

218
00:10:27,640 --> 00:10:33,250
really nice the next thing is

219
00:10:30,910 --> 00:10:35,620
conformance tests you probably<font color="#E5E5E5"> have not</font>

220
00:10:33,250 --> 00:10:39,070
heard about<font color="#E5E5E5"> that before this is some</font>

221
00:10:35,620 --> 00:10:40,839
special tests you run at Google to kind

222
00:10:39,070 --> 00:10:43,899
of prevent developers from submitting

223
00:10:40,839 --> 00:10:45,490
anti-patterns to the code base and one

224
00:10:43,899 --> 00:10:48,459
of these conformance tests actually

225
00:10:45,490 --> 00:10:51,579
check that there is no<font color="#CCCCCC"> inline event</font>

226
00:10:48,459 --> 00:10:53,170
handlers in the HTML markup and this was

227
00:10:51,579 --> 00:10:55,449
already here before we roll out ESP

228
00:10:53,170 --> 00:10:57,250
right and was very handy<font color="#CCCCCC"> for us because</font>

229
00:10:55,449 --> 00:11:01,930
CSP does not really work well with

230
00:10:57,250 --> 00:11:03,459
inline event handlers so we did not<font color="#E5E5E5"> have</font>

231
00:11:01,930 --> 00:11:05,109
to refactor these applications because

232
00:11:03,459 --> 00:11:08,290
the<font color="#E5E5E5"> render England event handlers which</font>

233
00:11:05,110 --> 00:11:09,639
is really<font color="#E5E5E5"> great right otherwise you</font>

234
00:11:08,290 --> 00:11:12,519
probably have<font color="#CCCCCC"> to go for</font><font color="#E5E5E5"> the templates</font>

235
00:11:09,639 --> 00:11:13,980
and reflect them out into a JavaScript

236
00:11:12,519 --> 00:11:16,660
registered event handlers right which is

237
00:11:13,980 --> 00:11:21,399
depending<font color="#CCCCCC"> on the application size</font>

238
00:11:16,660 --> 00:11:24,250
Lord Moberg and third also very

239
00:11:21,399 --> 00:11:27,120
important we use templating systems at

240
00:11:24,250 --> 00:11:30,190
Google that allow auto non<font color="#CCCCCC"> sing</font><font color="#E5E5E5"> of</font>

241
00:11:27,120 --> 00:11:32,589
scripts I have a separate slide on that

242
00:11:30,190 --> 00:11:34,769
but a very prominent one is closure

243
00:11:32,589 --> 00:11:37,810
templates which is<font color="#E5E5E5"> also open source and</font>

244
00:11:34,769 --> 00:11:40,300
till the RAS you can basically pass the

245
00:11:37,810 --> 00:11:42,189
nonce value for the response that you

246
00:11:40,300 --> 00:11:43,990
also use for the header at the<font color="#E5E5E5"> central</font>

247
00:11:42,189 --> 00:11:45,610
pays place to a templating system and

248
00:11:43,990 --> 00:11:47,769
the templating system<font color="#CCCCCC"> nonces all the</font>

249
00:11:45,610 --> 00:11:49,300
scripts automatically for you and you

250
00:11:47,769 --> 00:11:52,269
don't<font color="#E5E5E5"> have to refactor a single HTML</font>

251
00:11:49,300 --> 00:11:53,949
page which is<font color="#E5E5E5"> really handy and of course</font>

252
00:11:52,269 --> 00:11:59,560
<font color="#CCCCCC">you need monitoring tools and other</font>

253
00:11:53,949 --> 00:12:02,859
tools to support his roll out so this<font color="#CCCCCC"> is</font>

254
00:11:59,560 --> 00:12:06,670
basically<font color="#E5E5E5"> the policy we use almost</font>

255
00:12:02,860 --> 00:12:09,670
everywhere as I said this is<font color="#E5E5E5"> not</font>

256
00:12:06,670 --> 00:12:11,500
restricted to<font color="#E5E5E5"> Google but it is really</font>

257
00:12:09,670 --> 00:12:13,959
<font color="#E5E5E5">nice compared to</font><font color="#CCCCCC"> this widely spaced</font>

258
00:12:11,500 --> 00:12:16,810
policies strict non-space policies are

259
00:12:13,959 --> 00:12:18,219
kind<font color="#E5E5E5"> of always look the same the only</font>

260
00:12:16,810 --> 00:12:19,959
thing you have to ensure is that your

261
00:12:18,220 --> 00:12:22,509
scripts are non stand that you don't

262
00:12:19,959 --> 00:12:26,670
<font color="#E5E5E5">have inline event handlers for example</font>

263
00:12:22,509 --> 00:12:30,360
<font color="#E5E5E5">right so that's the non scripts work</font>

264
00:12:26,670 --> 00:12:33,310
dynamically created scripts will work I

265
00:12:30,360 --> 00:12:36,370
will talk about this<font color="#CCCCCC"> in a second and we</font>

266
00:12:33,310 --> 00:12:39,040
have fallbacks unsafe inline and<font color="#CCCCCC"> HTTPS</font>

267
00:12:36,370 --> 00:12:43,779
if you have an old browser that does not

268
00:12:39,040 --> 00:12:45,849
understand strict dynamic like<font color="#CCCCCC"> H then it</font>

269
00:12:43,779 --> 00:12:49,449
will just<font color="#E5E5E5"> ignore this and we'll just</font>

270
00:12:45,850 --> 00:12:50,980
execute that and the CSP is basically<font color="#CCCCCC"> a</font>

271
00:12:49,449 --> 00:12:53,560
<font color="#CCCCCC">nope but</font><font color="#E5E5E5"> it will also not break your</font>

272
00:12:50,980 --> 00:12:57,100
site which is<font color="#E5E5E5"> probably very important</font>

273
00:12:53,560 --> 00:13:00,279
right firefox or chrome who understands

274
00:12:57,100 --> 00:13:02,130
<font color="#E5E5E5">this be free they will drop unsafe</font>

275
00:13:00,279 --> 00:13:04,870
inline and they will<font color="#E5E5E5"> drop the whitelist</font>

276
00:13:02,130 --> 00:13:08,459
so for them the effective policy is

277
00:13:04,870 --> 00:13:11,800
actually a very useful secure policy and

278
00:13:08,459 --> 00:13:13,719
it's also very important we have to add

279
00:13:11,800 --> 00:13:17,189
object source none and base your<font color="#CCCCCC"> EIN on</font>

280
00:13:13,720 --> 00:13:19,600
<font color="#E5E5E5">to prevent other sort of</font><font color="#CCCCCC"> hypothesis</font>

281
00:13:17,189 --> 00:13:24,389
which is usually not a problem for most

282
00:13:19,600 --> 00:13:27,970
applications closure templates so

283
00:13:24,389 --> 00:13:29,180
there's a lot<font color="#E5E5E5"> of a little bit of magic</font>

284
00:13:27,970 --> 00:13:31,040
here and

285
00:13:29,180 --> 00:13:33,140
I'm a really big fan of closure

286
00:13:31,040 --> 00:13:36,650
templates because they really make my

287
00:13:33,140 --> 00:13:38,210
life significantly easier basically it's

288
00:13:36,650 --> 00:13:40,850
like a very simple tank templating

289
00:13:38,210 --> 00:13:44,030
language you have parameters which get

290
00:13:40,850 --> 00:13:47,060
inserted here<font color="#E5E5E5"> also very important it</font><font color="#CCCCCC"> has</font>

291
00:13:44,030 --> 00:13:49,670
like<font color="#CCCCCC"> Auto escaping so it knows when user</font>

292
00:13:47,060 --> 00:13:51,439
input goes into like script tags that it

293
00:13:49,670 --> 00:13:54,770
has to escape<font color="#E5E5E5"> it for a script context</font>

294
00:13:51,440 --> 00:13:56,570
right if it<font color="#E5E5E5"> goes into like HTML tags and</font>

295
00:13:54,770 --> 00:13:58,610
it knows that it has to<font color="#E5E5E5"> escape it for</font>

296
00:13:56,570 --> 00:14:01,220
HTML context which is very important

297
00:13:58,610 --> 00:14:04,220
right and on top of that closure also

298
00:14:01,220 --> 00:14:07,310
works very well with CSP so there's an

299
00:14:04,220 --> 00:14:08,480
example event handler you don't have to

300
00:14:07,310 --> 00:14:11,150
understand the code but basically

301
00:14:08,480 --> 00:14:14,450
generates a random norms and this random

302
00:14:11,150 --> 00:14:18,170
nonce is set in the CSP header and it is

303
00:14:14,450 --> 00:14:20,600
also passed as as metadata to the

304
00:14:18,170 --> 00:14:22,910
templating system you can do this like

305
00:14:20,600 --> 00:14:24,410
in one base handler alike in one central

306
00:14:22,910 --> 00:14:27,439
place right it's not very template and

307
00:14:24,410 --> 00:14:30,850
then<font color="#CCCCCC"> the result is actually very</font><font color="#E5E5E5"> nice it</font>

308
00:14:27,440 --> 00:14:32,990
is you have basically every script nonce

309
00:14:30,850 --> 00:14:34,670
although you have like no nonce in the

310
00:14:32,990 --> 00:14:37,970
template right the templating system

311
00:14:34,670 --> 00:14:39,290
completely takes care of it and<font color="#CCCCCC"> your</font>

312
00:14:37,970 --> 00:14:40,550
site<font color="#E5E5E5"> doesn't break because all the</font>

313
00:14:39,290 --> 00:14:43,520
latest scripts have monsters and the

314
00:14:40,550 --> 00:14:47,209
<font color="#CCCCCC">user input is escaped properly for the</font>

315
00:14:43,520 --> 00:14:48,500
<font color="#E5E5E5">right context which is important right</font>

316
00:14:47,210 --> 00:14:50,960
because they give you not the script<font color="#E5E5E5"> and</font>

317
00:14:48,500 --> 00:14:54,260
you have an escaped user input here that

318
00:14:50,960 --> 00:14:57,740
could be so leads could still trigger an

319
00:14:54,260 --> 00:15:02,300
exorcist and right so<font color="#CCCCCC"> Barcia pits right</font>

320
00:14:57,740 --> 00:15:03,890
are all good awesome so problem is<font color="#CCCCCC"> you</font>

321
00:15:02,300 --> 00:15:06,380
may be still break some functionality

322
00:15:03,890 --> 00:15:08,090
some edge cases or something right maybe

323
00:15:06,380 --> 00:15:10,670
your water it will an event handler

324
00:15:08,090 --> 00:15:12,170
which you forgot so you basically need

325
00:15:10,670 --> 00:15:15,589
to roll out<font color="#E5E5E5"> the policy in report only</font>

326
00:15:12,170 --> 00:15:19,699
first and look at the violation reports

327
00:15:15,590 --> 00:15:22,340
that are sent back from<font color="#E5E5E5"> the browser so</font>

328
00:15:19,700 --> 00:15:25,210
in theory<font color="#CCCCCC"> that sounds good in practice</font>

329
00:15:22,340 --> 00:15:28,670
you will get like four big<font color="#CCCCCC"> product like</font>

330
00:15:25,210 --> 00:15:30,920
10<font color="#CCCCCC"> million of GSP violation reports</font>

331
00:15:28,670 --> 00:15:34,310
right and like oh my god everything is

332
00:15:30,920 --> 00:15:35,870
broken but it<font color="#CCCCCC"> turns out that most of</font>

333
00:15:34,310 --> 00:15:38,089
these<font color="#CCCCCC"> reports or almost all of these</font>

334
00:15:35,870 --> 00:15:39,830
<font color="#CCCCCC">reports are actually noise and the</font>

335
00:15:38,090 --> 00:15:42,230
problem so far is that you cannot really

336
00:15:39,830 --> 00:15:45,350
<font color="#E5E5E5">distinguish between the noise of</font>

337
00:15:42,230 --> 00:15:47,560
actual break guitar the violation

338
00:15:45,350 --> 00:15:50,090
reports of actual breakages and

339
00:15:47,560 --> 00:15:55,550
violation reports triggered by browser

340
00:15:50,090 --> 00:15:57,890
extensions so CSP<font color="#CCCCCC"> 3 has a real nice</font>

341
00:15:55,550 --> 00:16:01,959
thing for that it's a new keyboard it's

342
00:15:57,890 --> 00:16:04,010
called report sample and it<font color="#CCCCCC"> basically</font>

343
00:16:01,960 --> 00:16:05,720
when the report sample keyboard is

344
00:16:04,010 --> 00:16:08,240
present in the policy it basically

345
00:16:05,720 --> 00:16:11,150
<font color="#E5E5E5">instructs the browser to send like the</font>

346
00:16:08,240 --> 00:16:14,420
first 40 bytes of the script that was

347
00:16:11,150 --> 00:16:17,199
rocked in the<font color="#E5E5E5"> report back to the to the</font>

348
00:16:14,420 --> 00:16:20,120
<font color="#E5E5E5">server and with that you can usually</font>

349
00:16:17,200 --> 00:16:21,890
learn a lot about the blocked script

350
00:16:20,120 --> 00:16:26,360
right and you can usually<font color="#E5E5E5"> find out if it</font>

351
00:16:21,890 --> 00:16:29,240
<font color="#CCCCCC">was a extension</font><font color="#E5E5E5"> or not Firefox has</font>

352
00:16:26,360 --> 00:16:31,130
something like that are already for a

353
00:16:29,240 --> 00:16:33,500
very long time although<font color="#CCCCCC"> not for event</font>

354
00:16:31,130 --> 00:16:35,750
handlers and the new script sample kind

355
00:16:33,500 --> 00:16:37,910
of had the whole thing<font color="#E5E5E5"> to the spec and</font>

356
00:16:35,750 --> 00:16:40,220
also covers in line event handlers which

357
00:16:37,910 --> 00:16:41,540
is nice because then you would<font color="#CCCCCC"> have if</font>

358
00:16:40,220 --> 00:16:42,560
you<font color="#E5E5E5"> don't have</font><font color="#CCCCCC"> that Finland event unless</font>

359
00:16:41,540 --> 00:16:44,360
<font color="#E5E5E5">you have the same problem again you</font>

360
00:16:42,560 --> 00:16:45,920
don't know if the inline event and

361
00:16:44,360 --> 00:16:47,840
levels there in the first place<font color="#E5E5E5"> in your</font>

362
00:16:45,920 --> 00:16:51,229
application or if I'm extension injected

363
00:16:47,840 --> 00:16:55,220
it so this will be hopefully part of

364
00:16:51,230 --> 00:16:57,680
chrome 59 and<font color="#E5E5E5"> I just want to show you a</font>

365
00:16:55,220 --> 00:17:02,390
brief example about<font color="#E5E5E5"> the violation</font>

366
00:16:57,680 --> 00:17:05,480
reports how they<font color="#E5E5E5"> usually look like the</font>

367
00:17:02,390 --> 00:17:07,700
first one here is like you know<font color="#E5E5E5"> a normal</font>

368
00:17:05,480 --> 00:17:10,310
in line normal inline script and the

369
00:17:07,700 --> 00:17:12,950
developer forgot to add<font color="#CCCCCC"> anons so it will</font>

370
00:17:10,310 --> 00:17:15,770
be blocked<font color="#E5E5E5"> and the browser will send OCS</font>

371
00:17:12,950 --> 00:17:18,620
<font color="#E5E5E5">key report I'd say unsafe like box you</font>

372
00:17:15,770 --> 00:17:21,020
<font color="#E5E5E5">are in line the document dry and it was</font>

373
00:17:18,619 --> 00:17:24,349
a script source<font color="#CCCCCC"> okay you can</font><font color="#E5E5E5"> deal</font><font color="#CCCCCC"> with</font>

374
00:17:21,020 --> 00:17:27,470
that right very<font color="#E5E5E5"> similar for event</font>

375
00:17:24,349 --> 00:17:30,500
handlers right you have an inland event

376
00:17:27,470 --> 00:17:32,990
handler<font color="#CCCCCC"> on load loaded CSP blocks that</font>

377
00:17:30,500 --> 00:17:34,960
you get the report it actually<font color="#E5E5E5"> looks</font>

378
00:17:32,990 --> 00:17:37,970
exactly the same as the<font color="#E5E5E5"> previous report</font>

379
00:17:34,960 --> 00:17:40,460
at the developer is not optimal but you

380
00:17:37,970 --> 00:17:42,920
know you have some breakage on your side

381
00:17:40,460 --> 00:17:45,950
and<font color="#CCCCCC"> you probably have</font><font color="#E5E5E5"> to find it so the</font>

382
00:17:42,920 --> 00:17:48,470
real problem is now extensions they

383
00:17:45,950 --> 00:17:50,120
inject inline scripts like that and they

384
00:17:48,470 --> 00:17:52,550
also injects<font color="#CCCCCC"> england event handles like</font>

385
00:17:50,120 --> 00:17:54,590
that and if they do so the browser<font color="#CCCCCC"> will</font>

386
00:17:52,550 --> 00:17:55,180
also send a violation and the violation

387
00:17:54,590 --> 00:17:58,419
looks

388
00:17:55,180 --> 00:18:00,160
actually the same as the other ones<font color="#CCCCCC"> so</font>

389
00:17:58,420 --> 00:18:03,220
the developer you get like 1,000,000

390
00:18:00,160 --> 00:18:04,870
reports like ninety-nine point nine

391
00:18:03,220 --> 00:18:07,900
percent are<font color="#CCCCCC"> on</font><font color="#E5E5E5"> Chrome extensions and</font>

392
00:18:04,870 --> 00:18:09,370
it's really<font color="#CCCCCC"> hard to I mean you</font><font color="#E5E5E5"> don't</font>

393
00:18:07,900 --> 00:18:13,390
know if you have a break it or not right

394
00:18:09,370 --> 00:18:15,159
go<font color="#CCCCCC"> all this</font><font color="#E5E5E5"> have this ground noise so</font>

395
00:18:13,390 --> 00:18:18,760
three different causes<font color="#CCCCCC"> of violations</font>

396
00:18:15,160 --> 00:18:21,820
yield exactly the same report with the

397
00:18:18,760 --> 00:18:24,580
<font color="#E5E5E5">script sample keyboard this is different</font>

398
00:18:21,820 --> 00:18:26,490
now if you add to the policy<font color="#E5E5E5"> you also</font>

399
00:18:24,580 --> 00:18:29,919
get like the first<font color="#E5E5E5"> 40 bytes of the</font>

400
00:18:26,490 --> 00:18:31,990
script that was blocked and this is

401
00:18:29,920 --> 00:18:34,390
actually<font color="#CCCCCC"> really</font><font color="#E5E5E5"> handy because you then</font>

402
00:18:31,990 --> 00:18:36,010
can take this this value<font color="#CCCCCC"> and either</font>

403
00:18:34,390 --> 00:18:37,870
search in your code base for<font color="#E5E5E5"> it and</font>

404
00:18:36,010 --> 00:18:42,460
confirm that it was<font color="#CCCCCC"> actually your code</font>

405
00:18:37,870 --> 00:18:45,909
or you can build up you know signatures

406
00:18:42,460 --> 00:18:49,870
for common extensions that inject stuff

407
00:18:45,910 --> 00:18:53,110
so for<font color="#E5E5E5"> example for some reason</font><font color="#CCCCCC"> ad guard</font>

408
00:18:49,870 --> 00:18:56,290
seems to inject script into every<font color="#E5E5E5"> single</font>

409
00:18:53,110 --> 00:18:58,149
page you visit and that's like for

410
00:18:56,290 --> 00:19:00,510
example counts 1 million of the<font color="#E5E5E5"> noise</font>

411
00:18:58,150 --> 00:19:02,800
reports right and just<font color="#E5E5E5"> like a real nice</font>

412
00:19:00,510 --> 00:19:05,740
github page from nico free free free

413
00:19:02,800 --> 00:19:07,629
free<font color="#CCCCCC"> fr that basically collect a lot of</font>

414
00:19:05,740 --> 00:19:11,280
these signatures and you can just<font color="#CCCCCC"> use</font>

415
00:19:07,630 --> 00:19:16,510
them to<font color="#E5E5E5"> filter your results and you know</font>

416
00:19:11,280 --> 00:19:19,000
get some actually useful CSP reports so

417
00:19:16,510 --> 00:19:20,740
with that I'll hand over to<font color="#CCCCCC"> Michaela who</font>

418
00:19:19,000 --> 00:19:24,970
will talk about the tools we<font color="#CCCCCC"> have</font>

419
00:19:20,740 --> 00:19:30,730
developed to<font color="#E5E5E5"> roll out CSD at scale</font>

420
00:19:24,970 --> 00:19:31,750
basically awesome<font color="#E5E5E5"> so we have contributed</font>

421
00:19:30,730 --> 00:19:35,410
to the content<font color="#E5E5E5"> security policy</font>

422
00:19:31,750 --> 00:19:37,570
specification we made it better we<font color="#E5E5E5"> added</font>

423
00:19:35,410 --> 00:19:41,530
some keywords we changed some behavior

424
00:19:37,570 --> 00:19:43,270
in a backward compatible way we deployed

425
00:19:41,530 --> 00:19:47,800
it to hundreds of products serving

426
00:19:43,270 --> 00:19:51,490
billions of users but it is<font color="#CCCCCC"> very hard</font><font color="#E5E5E5"> to</font>

427
00:19:47,800 --> 00:19:52,810
scale at this scale and it's very

428
00:19:51,490 --> 00:19:57,630
important to build some infrastructure

429
00:19:52,810 --> 00:20:01,750
to and tools to<font color="#E5E5E5"> support developers and</font>

430
00:19:57,630 --> 00:20:05,500
so we developed for example an extension

431
00:20:01,750 --> 00:20:08,530
which is<font color="#E5E5E5"> critical 50 mitigator which is</font>

432
00:20:05,500 --> 00:20:09,750
<font color="#CCCCCC">an email helping developers prototype of</font>

433
00:20:08,530 --> 00:20:12,639
policy

434
00:20:09,750 --> 00:20:14,919
by just installing an extension going to

435
00:20:12,640 --> 00:20:17,350
a<font color="#CCCCCC"> web site seeing</font><font color="#E5E5E5"> what would break and</font>

436
00:20:14,919 --> 00:20:19,929
what<font color="#E5E5E5"> needs to be changed in a website to</font>

437
00:20:17,350 --> 00:20:23,909
adopt strict ESP which is our way of

438
00:20:19,929 --> 00:20:26,919
doing<font color="#CCCCCC"> CSP</font><font color="#E5E5E5"> and also providing guidance</font>

439
00:20:23,910 --> 00:20:31,960
helping how to make able to make

440
00:20:26,919 --> 00:20:36,039
necessary changes this is very useful

441
00:20:31,960 --> 00:20:38,440
because when you want to deploy<font color="#CCCCCC"> to</font>

442
00:20:36,039 --> 00:20:41,710
several products you<font color="#E5E5E5"> need to enable</font>

443
00:20:38,440 --> 00:20:46,890
developers to prototype policies on

444
00:20:41,710 --> 00:20:46,890
their own and we have a short demo here

445
00:20:49,470 --> 00:20:58,059
so this<font color="#E5E5E5"> is google finance it's a product</font>

446
00:20:54,520 --> 00:21:00,730
that does not have CSP yet and it's not

447
00:20:58,059 --> 00:21:02,590
CST ready this is mostly due<font color="#E5E5E5"> to the fact</font>

448
00:21:00,730 --> 00:21:04,809
that it has some legacy code and

449
00:21:02,590 --> 00:21:09,309
templating system so it was not as easy

450
00:21:04,809 --> 00:21:10,960
to enable CSP here so this<font color="#E5E5E5"> is this could</font>

451
00:21:09,309 --> 00:21:15,820
be seen<font color="#CCCCCC"> as a pretty complex web</font>

452
00:21:10,960 --> 00:21:20,380
application that<font color="#CCCCCC"> a normal developer once</font>

453
00:21:15,820 --> 00:21:24,520
you add CSP on so you have here a

454
00:21:20,380 --> 00:21:27,570
default strict CSP and what<font color="#E5E5E5"> do you</font><font color="#CCCCCC"> click</font>

455
00:21:24,520 --> 00:21:30,100
start and then you refresh the page and

456
00:21:27,570 --> 00:21:33,189
then you see that there is there<font color="#E5E5E5"> are</font>

457
00:21:30,100 --> 00:21:34,928
some dotted red borders these are the

458
00:21:33,190 --> 00:21:38,470
parts of the page that are triggering

459
00:21:34,929 --> 00:21:41,049
some CSP violations and the green ones

460
00:21:38,470 --> 00:21:44,500
are<font color="#CCCCCC"> inline event handlers or inline</font>

461
00:21:41,049 --> 00:21:47,710
scripts so we can play around a little

462
00:21:44,500 --> 00:21:50,169
bit like news we see the same<font color="#CCCCCC"> then let's</font>

463
00:21:47,710 --> 00:21:52,690
do to the stock screener oh this is<font color="#CCCCCC"> very</font>

464
00:21:50,169 --> 00:21:54,610
bad we see a<font color="#E5E5E5"> lot of let's play around a</font>

465
00:21:52,690 --> 00:21:57,690
little bit here<font color="#CCCCCC"> there is an</font><font color="#E5E5E5"> inline event</font>

466
00:21:54,610 --> 00:22:00,370
handler we can see the green border and

467
00:21:57,690 --> 00:22:03,669
basically when we are done playing

468
00:22:00,370 --> 00:22:06,010
around here see this was triggering with

469
00:22:03,669 --> 00:22:07,870
inline event tell you it's not breaking

470
00:22:06,010 --> 00:22:09,730
functionality so this is<font color="#E5E5E5"> actually a</font>

471
00:22:07,870 --> 00:22:11,080
report only<font color="#E5E5E5"> policy right it's not</font>

472
00:22:09,730 --> 00:22:12,669
enforcing so it's<font color="#E5E5E5"> not breaking</font><font color="#CCCCCC"> the</font>

473
00:22:11,080 --> 00:22:16,059
functionality it's allowing you to

474
00:22:12,669 --> 00:22:18,159
exercise the user interface but it's at

475
00:22:16,059 --> 00:22:19,299
the same time even graphically showing

476
00:22:18,159 --> 00:22:19,740
you that there is<font color="#E5E5E5"> something wrong and</font>

477
00:22:19,299 --> 00:22:22,860
where

478
00:22:19,740 --> 00:22:24,090
so here there is<font color="#E5E5E5"> a</font><font color="#CCCCCC"> smote counter</font><font color="#E5E5E5"> I don't</font>

479
00:22:22,860 --> 00:22:28,469
know if you can see it but<font color="#E5E5E5"> it's saying</font>

480
00:22:24,090 --> 00:22:32,610
280 so it doesn't<font color="#CCCCCC"> look</font><font color="#E5E5E5"> very promising we</font>

481
00:22:28,470 --> 00:22:34,110
<font color="#E5E5E5">stopped and we have here a report we</font>

482
00:22:32,610 --> 00:22:35,909
have here a report of script element

483
00:22:34,110 --> 00:22:37,320
without another attribute so<font color="#E5E5E5"> this kind</font>

484
00:22:35,910 --> 00:22:41,510
of<font color="#CCCCCC"> Street script blogs have</font><font color="#E5E5E5"> to be known</font>

485
00:22:37,320 --> 00:22:44,790
and or not so here for example we use

486
00:22:41,510 --> 00:22:47,370
some google Tech Services of some

487
00:22:44,790 --> 00:22:50,040
analytics tools and so on here we have

488
00:22:47,370 --> 00:22:51,629
customer service here we have in line of

489
00:22:50,040 --> 00:22:54,420
intenders and<font color="#CCCCCC"> JavaScript</font><font color="#E5E5E5"> your eyes</font>

490
00:22:51,630 --> 00:22:57,300
<font color="#E5E5E5">mostly they are on click see there is a</font>

491
00:22:54,420 --> 00:23:00,770
<font color="#E5E5E5">non click here we can expect more and so</font>

492
00:22:57,300 --> 00:23:05,040
on and basically there are some

493
00:23:00,770 --> 00:23:06,300
information some suggestions like notice

494
00:23:05,040 --> 00:23:09,360
p not have been detected<font color="#CCCCCC"> you should add</font>

495
00:23:06,300 --> 00:23:12,960
nonces<font color="#CCCCCC"> nostro economic has been</font><font color="#E5E5E5"> detected</font>

496
00:23:09,360 --> 00:23:20,790
you should added so this<font color="#E5E5E5"> is a very cool</font>

497
00:23:12,960 --> 00:23:22,500
and<font color="#E5E5E5"> quick way to prototype policies yeah</font>

498
00:23:20,790 --> 00:23:26,550
credit for the directory go to david

499
00:23:22,500 --> 00:23:28,920
ross and then we also have ESP valuator

500
00:23:26,550 --> 00:23:31,889
we presented<font color="#E5E5E5"> a</font><font color="#CCCCCC"> tray last time it's a</font>

501
00:23:28,920 --> 00:23:36,600
very easy tool to just put in your CSP

502
00:23:31,890 --> 00:23:39,000
and get back a result<font color="#E5E5E5"> of you know if the</font>

503
00:23:36,600 --> 00:23:42,809
CSP is actually a good mitigation

504
00:23:39,000 --> 00:23:44,910
against XSS or not because most widely

505
00:23:42,809 --> 00:23:46,200
spaced policies are broken what is also

506
00:23:44,910 --> 00:23:50,840
a lot<font color="#E5E5E5"> of things you can get wrong with</font>

507
00:23:46,200 --> 00:23:55,050
<font color="#E5E5E5">nonce based policies right so basically</font>

508
00:23:50,840 --> 00:23:58,919
<font color="#E5E5E5">this is how the mitigator looks like you</font>

509
00:23:55,050 --> 00:24:02,490
can paste in a policy here<font color="#CCCCCC"> or you just</font>

510
00:23:58,920 --> 00:24:04,500
type something right crater calm and it

511
00:24:02,490 --> 00:24:07,140
tries to fetch it for you doesn't<font color="#CCCCCC"> always</font>

512
00:24:04,500 --> 00:24:10,230
<font color="#E5E5E5">work but often it does and then you get</font>

513
00:24:07,140 --> 00:24:13,470
the<font color="#CCCCCC"> results right so for example in this</font>

514
00:24:10,230 --> 00:24:18,270
case a whitelist based policy is used

515
00:24:13,470 --> 00:24:23,070
and a lot of<font color="#E5E5E5"> hosts cyclists that are</font>

516
00:24:18,270 --> 00:24:25,290
known to host Jason P and all of any of

517
00:24:23,070 --> 00:24:31,040
the red ones can be used to bypass the

518
00:24:25,290 --> 00:24:31,040
policy right if you take for example

519
00:24:32,900 --> 00:24:39,090
access chromium the dork you will see

520
00:24:36,539 --> 00:24:40,679
that they're like no known by passes for

521
00:24:39,090 --> 00:24:45,418
that one right and there's also like

522
00:24:40,679 --> 00:24:48,360
sample policies and even a Chrome

523
00:24:45,419 --> 00:24:50,280
extension which basically does the same

524
00:24:48,360 --> 00:24:55,799
but just evaluates the policy of every

525
00:24:50,280 --> 00:24:58,350
site and shows that a green or red icon

526
00:24:55,799 --> 00:25:07,650
depending if the sides policy is<font color="#CCCCCC"> good or</font>

527
00:24:58,350 --> 00:25:10,439
not yes cool so internally we developed

528
00:25:07,650 --> 00:25:13,890
something a two-week<font color="#E5E5E5"> ocsp front and for</font>

529
00:25:10,440 --> 00:25:17,100
visualizing 50 violation report so this

530
00:25:13,890 --> 00:25:18,510
<font color="#CCCCCC">is not a trivial task at all I mean from</font>

531
00:25:17,100 --> 00:25:20,189
infrastructure a point<font color="#E5E5E5"> of view because</font>

532
00:25:18,510 --> 00:25:24,000
there are so many like 50 millions per

533
00:25:20,190 --> 00:25:28,049
day but mostly as Lucas said earlier

534
00:25:24,000 --> 00:25:31,020
because<font color="#E5E5E5"> of the noise most actually the</font>

535
00:25:28,049 --> 00:25:36,570
vast majority of the of the reports we

536
00:25:31,020 --> 00:25:40,799
receive our noise and so it's very hard

537
00:25:36,570 --> 00:25:42,889
to have a signal first view of what our

538
00:25:40,799 --> 00:25:46,110
<font color="#E5E5E5">breakages and</font><font color="#CCCCCC"> all these</font><font color="#E5E5E5"> just random</font>

539
00:25:42,890 --> 00:25:48,960
<font color="#E5E5E5">extensions adding random script to to</font>

540
00:25:46,110 --> 00:25:52,949
the<font color="#CCCCCC"> markup so we had to</font><font color="#E5E5E5"> come up with</font>

541
00:25:48,960 --> 00:25:56,010
some strategies especially<font color="#CCCCCC"> the</font>

542
00:25:52,950 --> 00:25:58,950
<font color="#CCCCCC">duplication strategies that for example</font>

543
00:25:56,010 --> 00:26:01,679
leverage script sample which is the

544
00:25:58,950 --> 00:26:03,270
extra bit of information for inline

545
00:26:01,679 --> 00:26:06,510
event handlers and inline scripts that

546
00:26:03,270 --> 00:26:09,090
we<font color="#CCCCCC"> presented before because that's</font>

547
00:26:06,510 --> 00:26:11,730
actually<font color="#E5E5E5"> the most important signal we</font>

548
00:26:09,090 --> 00:26:14,820
have the majority<font color="#E5E5E5"> of the</font><font color="#CCCCCC"> of the</font>

549
00:26:11,730 --> 00:26:16,830
violations we receive are in line<font color="#E5E5E5"> violet</font>

550
00:26:14,820 --> 00:26:19,379
line script violations and we<font color="#E5E5E5"> don't know</font>

551
00:26:16,830 --> 00:26:22,850
much<font color="#CCCCCC"> more if we</font><font color="#E5E5E5"> don't have a crib sample</font>

552
00:26:19,380 --> 00:26:28,190
why while the duplicating even across

553
00:26:22,850 --> 00:26:30,570
browsers across pages across domains but

554
00:26:28,190 --> 00:26:33,600
grouping by script samples is<font color="#E5E5E5"> a much</font>

555
00:26:30,570 --> 00:26:36,899
much more concise and useful view of

556
00:26:33,600 --> 00:26:39,059
repose we implemented<font color="#E5E5E5"> real-time</font>

557
00:26:36,900 --> 00:26:41,370
filtering of violation report<font color="#E5E5E5"> seeds so</font>

558
00:26:39,059 --> 00:26:43,950
that you can for<font color="#E5E5E5"> example filter by a</font>

559
00:26:41,370 --> 00:26:45,270
particular browser version particular

560
00:26:43,950 --> 00:26:47,280
violated direct

561
00:26:45,270 --> 00:26:48,750
active and you see basically all the

562
00:26:47,280 --> 00:26:52,080
charts and everything updating in real

563
00:26:48,750 --> 00:26:54,300
time again<font color="#E5E5E5"> it's a lot of data</font><font color="#CCCCCC"> it's</font>

564
00:26:52,080 --> 00:26:57,060
gigabytes of data so it's not trivial to

565
00:26:54,300 --> 00:26:58,649
make it work client-side and of course

566
00:26:57,060 --> 00:27:00,810
if you want to drill down<font color="#CCCCCC"> and actually</font>

567
00:26:58,650 --> 00:27:02,910
see the single report not the duplicated

568
00:27:00,810 --> 00:27:07,200
you can do that you can do<font color="#E5E5E5"> that and you</font>

569
00:27:02,910 --> 00:27:10,110
can investigate further so here is how

570
00:27:07,200 --> 00:27:14,220
the 50 frontin looks like at the top you

571
00:27:10,110 --> 00:27:20,669
can see some filters so for<font color="#E5E5E5"> example you</font>

572
00:27:14,220 --> 00:27:22,890
<font color="#E5E5E5">see some well versions browsers violated</font>

573
00:27:20,670 --> 00:27:25,050
directive block<font color="#E5E5E5"> DRI document your eye</font>

574
00:27:22,890 --> 00:27:27,870
and there are some operators such as

575
00:27:25,050 --> 00:27:30,750
contains and so on<font color="#CCCCCC"> so it's a pretty</font>

576
00:27:27,870 --> 00:27:33,290
advanced filtering system then there is

577
00:27:30,750 --> 00:27:37,350
<font color="#CCCCCC">a high-level view with some charts of</font>

578
00:27:33,290 --> 00:27:41,010
like a time chart or basically<font color="#E5E5E5"> the</font>

579
00:27:37,350 --> 00:27:44,250
violations by violated directive then

580
00:27:41,010 --> 00:27:46,500
the top blocked your eyes this can also

581
00:27:44,250 --> 00:27:48,090
help understanding a little bit what's

582
00:27:46,500 --> 00:27:49,680
going on and<font color="#CCCCCC"> then there is</font><font color="#E5E5E5"> a more</font>

583
00:27:48,090 --> 00:27:52,230
detailed view of violation which will

584
00:27:49,680 --> 00:27:53,670
see better in the<font color="#E5E5E5"> next slide I hope you</font>

585
00:27:52,230 --> 00:27:56,250
can read<font color="#E5E5E5"> it yes should be pretty</font>

586
00:27:53,670 --> 00:28:00,360
readable so basically this is the

587
00:27:56,250 --> 00:28:04,980
aggressive side application view you can

588
00:28:00,360 --> 00:28:06,419
see there are<font color="#E5E5E5"> well</font><font color="#CCCCCC"> suited</font><font color="#E5E5E5"> this is the</font>

589
00:28:04,980 --> 00:28:08,220
<font color="#E5E5E5">time stamp this is the last of</font>

590
00:28:06,420 --> 00:28:10,320
meteorites these pieces of google com

591
00:28:08,220 --> 00:28:12,990
for example<font color="#CCCCCC"> here you can see for example</font>

592
00:28:10,320 --> 00:28:17,480
<font color="#CCCCCC">a block to</font><font color="#E5E5E5"> your eyes it is p static day</font>

593
00:28:12,990 --> 00:28:21,090
best deals calm so we don't source

594
00:28:17,480 --> 00:28:23,280
scripts from davis bills calm at Google

595
00:28:21,090 --> 00:28:26,189
right so this is probably an extension

596
00:28:23,280 --> 00:28:29,670
or some malware and so we can safely

597
00:28:26,190 --> 00:28:31,860
ignore it here we have some Korean

598
00:28:29,670 --> 00:28:34,860
<font color="#E5E5E5">connector piece</font><font color="#CCCCCC"> put a comma</font><font color="#E5E5E5"> SDK this is</font>

599
00:28:31,860 --> 00:28:37,290
also<font color="#E5E5E5"> probably an extension maybe add the</font>

600
00:28:34,860 --> 00:28:39,689
like button<font color="#CCCCCC"> to every page some kind of</font>

601
00:28:37,290 --> 00:28:43,830
something like<font color="#E5E5E5"> that I also hear donation</font>

602
00:28:39,690 --> 00:28:46,140
to zorg very likely not out and here

603
00:28:43,830 --> 00:28:48,510
it's a common CDN which is we<font color="#E5E5E5"> don't use</font>

604
00:28:46,140 --> 00:28:50,700
by policy so this<font color="#CCCCCC"> is not</font><font color="#E5E5E5"> a so basically</font>

605
00:28:48,510 --> 00:28:52,440
this is all noise right<font color="#CCCCCC"> the sample you</font>

606
00:28:50,700 --> 00:28:53,850
can see<font color="#CCCCCC"> just here aniline event handler</font>

607
00:28:52,440 --> 00:28:55,380
actually this is sent by five bucks

608
00:28:53,850 --> 00:28:56,219
which is<font color="#CCCCCC"> a</font><font color="#E5E5E5"> little bit less fine-grained</font>

609
00:28:55,380 --> 00:28:59,159
so the

610
00:28:56,220 --> 00:29:02,490
screwed sample that this end is just

611
00:28:59,159 --> 00:29:04,020
<font color="#E5E5E5">telling us which event in line event</font>

612
00:29:02,490 --> 00:29:06,240
handlers it it is but without the

613
00:29:04,020 --> 00:29:09,150
content of the inline event handler

614
00:29:06,240 --> 00:29:12,860
chrome with<font color="#E5E5E5"> report sample would send the</font>

615
00:29:09,150 --> 00:29:12,860
actual<font color="#CCCCCC"> JavaScript</font><font color="#E5E5E5"> that it's there and</font>

616
00:29:13,789 --> 00:29:19,500
<font color="#CCCCCC">finally we have some high-level tools</font>

617
00:29:16,200 --> 00:29:21,539
that are at<font color="#E5E5E5"> the hour let's say front end</font>

618
00:29:19,500 --> 00:29:25,230
server which I mean it can be<font color="#E5E5E5"> considered</font>

619
00:29:21,539 --> 00:29:28,919
like a glorified reverse proxy and we

620
00:29:25,230 --> 00:29:31,559
check for every HTML response we we<font color="#E5E5E5"> send</font>

621
00:29:28,919 --> 00:29:34,140
out and we check for example for

622
00:29:31,559 --> 00:29:36,960
regressions did we stop serving<font color="#CCCCCC"> csps are</font>

623
00:29:34,140 --> 00:29:38,730
we serving bad<font color="#CCCCCC"> CSPs I was having</font>

624
00:29:36,960 --> 00:29:42,120
<font color="#E5E5E5">unexpected</font><font color="#CCCCCC"> CST's and there are some</font>

625
00:29:38,730 --> 00:29:43,799
alerting infrastructure to also

626
00:29:42,120 --> 00:29:46,229
integrated this with the CSP evaluator

627
00:29:43,799 --> 00:29:48,059
so that we can check exactly what is a

628
00:29:46,230 --> 00:29:53,010
bad policy like I with sending out the

629
00:29:48,059 --> 00:29:55,440
bedposts are some teams for example<font color="#E5E5E5"> you</font>

630
00:29:53,010 --> 00:29:57,990
<font color="#CCCCCC">know writing a</font><font color="#E5E5E5"> CSP from scratch and</font>

631
00:29:55,440 --> 00:30:01,549
sending out an effective policy without

632
00:29:57,990 --> 00:30:06,799
realizing then thanks to<font color="#E5E5E5"> this kind of</font>

633
00:30:01,549 --> 00:30:10,650
monitoring we are able<font color="#E5E5E5"> to find out so</font>

634
00:30:06,799 --> 00:30:12,809
this was the engineering part so what we

635
00:30:10,650 --> 00:30:16,350
built to support the growth of CSP at

636
00:30:12,809 --> 00:30:18,658
Google and we hope to eventually open

637
00:30:16,350 --> 00:30:21,059
source some more tools so from what<font color="#CCCCCC"> we</font>

638
00:30:18,659 --> 00:30:22,860
said the mitigator is on the Chrome Web

639
00:30:21,059 --> 00:30:25,200
Store it's a<font color="#E5E5E5"> Chrome extension you</font><font color="#CCCCCC"> can go</font>

640
00:30:22,860 --> 00:30:27,330
there and use it and we actually really

641
00:30:25,200 --> 00:30:29,490
like if you did and send<font color="#E5E5E5"> out some</font>

642
00:30:27,330 --> 00:30:31,580
<font color="#E5E5E5">feedback if you use it also the</font>

643
00:30:29,490 --> 00:30:35,850
evaluator there is a link on the slide

644
00:30:31,580 --> 00:30:37,320
<font color="#CCCCCC">it's public it's</font><font color="#E5E5E5"> very nice the front end</font>

645
00:30:35,850 --> 00:30:39,360
is an internal<font color="#E5E5E5"> tool it has a lot of</font>

646
00:30:37,320 --> 00:30:41,549
internal dependency so we can't just

647
00:30:39,360 --> 00:30:47,520
open sources right away but we are

648
00:30:41,549 --> 00:30:50,639
considering open sourcing it and now I'd

649
00:30:47,520 --> 00:30:54,990
<font color="#CCCCCC">like</font><font color="#E5E5E5"> to talk about some recent non-space</font>

650
00:30:50,640 --> 00:31:00,630
GSB bypasses and how we are dealing<font color="#CCCCCC"> with</font>

651
00:30:54,990 --> 00:31:04,269
them so the first cfp by bypass actually

652
00:31:00,630 --> 00:31:08,529
knows place ESP bypass that we

653
00:31:04,269 --> 00:31:10,739
would like to<font color="#E5E5E5"> talk</font><font color="#CCCCCC"> about is basically if</font>

654
00:31:08,529 --> 00:31:15,070
you just put scripta to see<font color="#E5E5E5"> knowns</font>

655
00:31:10,739 --> 00:31:18,309
random and you have an injection and in

656
00:31:15,070 --> 00:31:22,509
<font color="#CCCCCC">that injection you just put Bay's href</font>

657
00:31:18,309 --> 00:31:25,690
evil calm and then you have an on script

658
00:31:22,509 --> 00:31:32,339
that has a relative source such as x-ray

659
00:31:25,690 --> 00:31:34,989
yes or food / Bardoux Jas and it is<font color="#E5E5E5"> not</font>

660
00:31:32,339 --> 00:31:37,869
the problem here is<font color="#CCCCCC"> that the attacker is</font>

661
00:31:34,989 --> 00:31:40,059
rebasing no script to their own domain

662
00:31:37,869 --> 00:31:41,769
so since we don't have a whitelist but

663
00:31:40,059 --> 00:31:44,289
we are just relying on the blessing by

664
00:31:41,769 --> 00:31:46,959
the gnomes scripts will execute because

665
00:31:44,289 --> 00:31:49,419
they have a valid nose so here the fix

666
00:31:46,959 --> 00:31:51,579
is to not forget to restrict base your

667
00:31:49,419 --> 00:31:57,339
iso base your I none or bathe your eyes

668
00:31:51,579 --> 00:32:00,820
<font color="#E5E5E5">self if we really need to set some days</font>

669
00:31:57,339 --> 00:32:04,299
you're I sorry base<font color="#CCCCCC"> href / something for</font>

670
00:32:00,820 --> 00:32:06,279
example as a shortcut so a problem<font color="#CCCCCC"> with</font>

671
00:32:04,299 --> 00:32:08,679
<font color="#E5E5E5">Visio right self is that in the</font>

672
00:32:06,279 --> 00:32:11,349
<font color="#E5E5E5">brilliant common case in which you</font><font color="#CCCCCC"> have</font>

673
00:32:08,679 --> 00:32:15,249
a path based open redirect errs on your

674
00:32:11,349 --> 00:32:17,289
domains this can be bypassed so you

675
00:32:15,249 --> 00:32:19,149
might say why should you<font color="#CCCCCC"> have a pathways</font>

676
00:32:17,289 --> 00:32:23,259
open redirector such as I don't know

677
00:32:19,149 --> 00:32:25,149
like<font color="#E5E5E5"> / redirect / evil calm / something</font>

678
00:32:23,259 --> 00:32:26,919
right so nothing in the query adjusting

679
00:32:25,149 --> 00:32:29,079
the path and the server basically

680
00:32:26,919 --> 00:32:30,879
redirects to Eagle calm why should you

681
00:32:29,079 --> 00:32:33,039
<font color="#CCCCCC">have that well at Google we have and</font>

682
00:32:30,879 --> 00:32:36,218
it's called a MP accelerated mobile

683
00:32:33,039 --> 00:32:40,149
pages so it was very problematic<font color="#E5E5E5"> to use</font>

684
00:32:36,219 --> 00:32:46,149
self at Google so we opted<font color="#CCCCCC"> a we often</font>

685
00:32:40,149 --> 00:32:50,619
opted for none or for a deep spot this

686
00:32:46,149 --> 00:32:54,849
oh right and the<font color="#E5E5E5"> credit</font><font color="#CCCCCC"> for this for</font>

687
00:32:50,619 --> 00:33:01,289
this bypass goes to Jack massa and the

688
00:32:54,849 --> 00:33:05,678
second bypass is abusing the set tag of

689
00:33:01,289 --> 00:33:11,950
SVG for changing attributes of other

690
00:33:05,679 --> 00:33:16,390
<font color="#CCCCCC">elements so basically</font><font color="#E5E5E5"> in SVG there is</font>

691
00:33:11,950 --> 00:33:18,070
<font color="#E5E5E5">this concept of animatable tags and</font>

692
00:33:16,390 --> 00:33:20,680
and there was a<font color="#CCCCCC"> body in chromium</font><font color="#E5E5E5"> that</font>

693
00:33:18,070 --> 00:33:23,500
allowed to animate actually any any tag

694
00:33:20,680 --> 00:33:25,030
not just the animatable one so this was

695
00:33:23,500 --> 00:33:26,860
really just a bug in chromium for

696
00:33:25,030 --> 00:33:29,070
example was not present in five<font color="#E5E5E5"> clubs so</font>

697
00:33:26,860 --> 00:33:32,740
if you have an<font color="#E5E5E5"> XSS and what you do you</font>

698
00:33:29,070 --> 00:33:35,490
enter the SVG context by doing SVG and

699
00:33:32,740 --> 00:33:39,760
then you put asset tag that basically

700
00:33:35,490 --> 00:33:42,160
instructs the browser to modify the href

701
00:33:39,760 --> 00:33:44,260
attribute to data alert<font color="#E5E5E5"> one in this case</font>

702
00:33:42,160 --> 00:33:46,720
and then you have a legitimate script

703
00:33:44,260 --> 00:33:49,629
that was not in an SVG context but now

704
00:33:46,720 --> 00:33:52,960
it is because<font color="#CCCCCC"> it is an enclosed this is</font>

705
00:33:49,630 --> 00:33:55,090
an enclosed SVG tag right so now this

706
00:33:52,960 --> 00:34:03,070
script tag is inside a speedy content

707
00:33:55,090 --> 00:34:06,220
basically SVG says<font color="#CCCCCC"> okay there is a let's</font>

708
00:34:03,070 --> 00:34:09,610
animate<font color="#E5E5E5"> these two and change it to this</font>

709
00:34:06,220 --> 00:34:11,470
so<font color="#E5E5E5"> this was fixed in chrome 58 this was</font>

710
00:34:09,610 --> 00:34:14,320
just<font color="#E5E5E5"> about but it allowed for for a</font>

711
00:34:11,469 --> 00:34:19,480
bypass and credit goes to Eduardo Vela

712
00:34:14,320 --> 00:34:22,149
<font color="#CCCCCC">novel for this now this</font><font color="#E5E5E5"> is</font><font color="#CCCCCC"> a category of</font>

713
00:34:19,480 --> 00:34:24,730
bypasses which are pretty interesting<font color="#E5E5E5"> in</font>

714
00:34:22,149 --> 00:34:27,130
my opinion and it is and<font color="#CCCCCC"> they are all</font>

715
00:34:24,730 --> 00:34:29,560
related to stealing and reusing nonces

716
00:34:27,130 --> 00:34:31,210
so get the whole idea the whole

717
00:34:29,560 --> 00:34:33,730
foundation of nonces is that they are

718
00:34:31,210 --> 00:34:38,020
one time they<font color="#CCCCCC"> are unique per page load</font>

719
00:34:33,730 --> 00:34:39,490
and it is hard to reuse them so even if

720
00:34:38,020 --> 00:34:42,130
you are able<font color="#E5E5E5"> to steal them somehow</font>

721
00:34:39,489 --> 00:34:44,500
exfiltrate them well you can't reuse

722
00:34:42,130 --> 00:34:47,350
them without triggering a pay<font color="#CCCCCC"> a</font>

723
00:34:44,500 --> 00:34:49,149
server-side page reload and does the

724
00:34:47,350 --> 00:34:51,699
nonsense has changed right<font color="#E5E5E5"> so that's the</font>

725
00:34:49,149 --> 00:34:53,859
idea but<font color="#E5E5E5"> how can you exit rate them in</font>

726
00:34:51,699 --> 00:34:57,700
the first place so<font color="#CCCCCC"> you can do it with</font>

727
00:34:53,860 --> 00:35:00,010
css3 selectors like this so you<font color="#E5E5E5"> force</font>

728
00:34:57,700 --> 00:35:01,720
display block because of content well

729
00:35:00,010 --> 00:35:03,430
this<font color="#E5E5E5"> is a detail the thing</font><font color="#CCCCCC"> is you have</font>

730
00:35:01,720 --> 00:35:06,009
<font color="#E5E5E5">this operator which is which means</font>

731
00:35:03,430 --> 00:35:07,330
begins with so here you're selecting

732
00:35:06,010 --> 00:35:09,940
scripts that has announced attribute

733
00:35:07,330 --> 00:35:11,710
that begins with a and then what to do

734
00:35:09,940 --> 00:35:14,830
you override the content with record a

735
00:35:11,710 --> 00:35:17,410
and then basically exit rate character

736
00:35:14,830 --> 00:35:22,180
by character and what<font color="#CCCCCC"> you're able to do</font>

737
00:35:17,410 --> 00:35:25,149
exit rate<font color="#CCCCCC"> the nouns this way so this</font>

738
00:35:22,180 --> 00:35:29,799
alone it doesn't get much because you

739
00:35:25,150 --> 00:35:30,320
also<font color="#E5E5E5"> have to reuse them right anyway we</font>

740
00:35:29,800 --> 00:35:33,470
see that late

741
00:35:30,320 --> 00:35:35,060
there is<font color="#E5E5E5"> another way of stealing nonces</font>

742
00:35:33,470 --> 00:35:36,350
<font color="#E5E5E5">and this be a dangling mark of attacks</font>

743
00:35:35,060 --> 00:35:39,650
<font color="#CCCCCC">Danley mark of attacks are actually</font>

744
00:35:36,350 --> 00:35:42,620
nothing new there are known for several

745
00:35:39,650 --> 00:35:46,040
several years they are<font color="#E5E5E5"> somehow a little</font>

746
00:35:42,620 --> 00:35:49,130
bit hard to exploit in the real world

747
00:35:46,040 --> 00:35:50,900
<font color="#E5E5E5">because often they need very complex</font>

748
00:35:49,130 --> 00:35:52,850
syntax so for<font color="#CCCCCC"> example in this case</font><font color="#E5E5E5"> you</font>

749
00:35:50,900 --> 00:35:55,190
<font color="#CCCCCC">have an injection and you inject a form</font>

750
00:35:52,850 --> 00:36:00,529
and then an input<font color="#E5E5E5"> and then a text area</font>

751
00:35:55,190 --> 00:36:02,870
so text area is a like see data like tag

752
00:36:00,530 --> 00:36:05,570
so basically<font color="#E5E5E5"> everything inside the text</font>

753
00:36:02,870 --> 00:36:08,509
area<font color="#E5E5E5"> is not parsed and it's considered</font>

754
00:36:05,570 --> 00:36:10,670
basically see data so like text and

755
00:36:08,510 --> 00:36:12,860
parse text and basically you are able<font color="#E5E5E5"> to</font>

756
00:36:10,670 --> 00:36:14,510
get<font color="#E5E5E5"> this script tag as content of the</font>

757
00:36:12,860 --> 00:36:18,140
text area<font color="#E5E5E5"> so you can accelerate it</font><font color="#CCCCCC"> and</font>

758
00:36:14,510 --> 00:36:21,260
post it<font color="#CCCCCC"> to your evil conform okay this</font>

759
00:36:18,140 --> 00:36:23,060
is<font color="#CCCCCC"> the idea but</font><font color="#E5E5E5"> as I said it's very hard</font>

760
00:36:21,260 --> 00:36:26,900
to reuse<font color="#CCCCCC"> the nose because</font><font color="#E5E5E5"> in theory you</font>

761
00:36:23,060 --> 00:36:29,180
have to inject a script with the nonce

762
00:36:26,900 --> 00:36:30,680
<font color="#CCCCCC">you just stolen but in the same page</font>

763
00:36:29,180 --> 00:36:32,000
because you can't reload the page

764
00:36:30,680 --> 00:36:36,649
because<font color="#E5E5E5"> announced would have have change</font>

765
00:36:32,000 --> 00:36:38,090
right so you have to make the browser

766
00:36:36,650 --> 00:36:42,740
reload the original<font color="#CCCCCC"> document without</font>

767
00:36:38,090 --> 00:36:45,830
triggering a server-side reload so this

768
00:36:42,740 --> 00:36:47,709
<font color="#CCCCCC">is very hard</font><font color="#E5E5E5"> and that there are some</font>

769
00:36:45,830 --> 00:36:50,690
very complicated edge cases with

770
00:36:47,710 --> 00:36:55,850
exploiting HTTP cache I was like<font color="#CCCCCC"> server</font>

771
00:36:50,690 --> 00:36:58,010
<font color="#CCCCCC">side cash or client-side caches such as</font>

772
00:36:55,850 --> 00:37:02,120
the back of back forward cash which is a

773
00:36:58,010 --> 00:37:04,160
dumb cash it is the cash that allows the

774
00:37:02,120 --> 00:37:07,700
browser to keep for example the state of

775
00:37:04,160 --> 00:37:09,859
the<font color="#E5E5E5"> fielding forms when you hit back in</font>

776
00:37:07,700 --> 00:37:11,660
your<font color="#CCCCCC"> the back button or the browser and</font>

777
00:37:09,860 --> 00:37:14,420
you see that the form is still filled in

778
00:37:11,660 --> 00:37:17,029
and up cash is<font color="#E5E5E5"> also something a little</font>

779
00:37:14,420 --> 00:37:19,460
bit exotic so<font color="#CCCCCC"> I won't go too much into</font>

780
00:37:17,030 --> 00:37:24,020
detail so one way is to have a frame and

781
00:37:19,460 --> 00:37:27,860
also inject frame and have a<font color="#CCCCCC"> history</font>

782
00:37:24,020 --> 00:37:29,810
back this would not<font color="#E5E5E5"> trigger reload and</font>

783
00:37:27,860 --> 00:37:32,060
then there are some very<font color="#E5E5E5"> peculiar cases</font>

784
00:37:29,810 --> 00:37:33,650
that have different preconditions and

785
00:37:32,060 --> 00:37:37,310
constraint so for example<font color="#E5E5E5"> if you have an</font>

786
00:37:33,650 --> 00:37:39,590
XSS due to data received by post message

787
00:37:37,310 --> 00:37:40,940
and you are pulling and you're waiting

788
00:37:39,590 --> 00:37:43,250
<font color="#CCCCCC">for a postmessage you have a</font><font color="#E5E5E5"> known</font>

789
00:37:40,940 --> 00:37:44,000
message and then<font color="#E5E5E5"> you have a dome XSS</font>

790
00:37:43,250 --> 00:37:45,920
there

791
00:37:44,000 --> 00:37:49,070
well then the page would have been

792
00:37:45,920 --> 00:37:54,350
refreshed right so this you would be

793
00:37:49,070 --> 00:37:56,870
able<font color="#E5E5E5"> to use the nose and yeah so same if</font>

794
00:37:54,350 --> 00:38:01,580
you have an xhr and you're waiting<font color="#E5E5E5"> on</font>

795
00:37:56,870 --> 00:38:06,680
the<font color="#CCCCCC"> on the reply phone yes aside from</font>

796
00:38:01,580 --> 00:38:08,779
the xhr so how do we mitigate<font color="#E5E5E5"> these</font>

797
00:38:06,680 --> 00:38:11,299
bypasses so regarding the injection of

798
00:38:08,780 --> 00:38:14,620
<font color="#CCCCCC">Base tags well the fix there is simply</font>

799
00:38:11,300 --> 00:38:17,530
adding busy all right none and we did

800
00:38:14,620 --> 00:38:19,640
Google I that we encourage<font color="#E5E5E5"> everyone</font><font color="#CCCCCC"> to</font>

801
00:38:17,530 --> 00:38:23,150
restrict base your<font color="#E5E5E5"> I if they use</font>

802
00:38:19,640 --> 00:38:24,890
non-space policies replacing legitimate

803
00:38:23,150 --> 00:38:27,980
script SOC was a chrome bug that was

804
00:38:24,890 --> 00:38:29,690
fixed so that's all execration

805
00:38:27,980 --> 00:38:32,450
preventing<font color="#CCCCCC"> expectations</font><font color="#E5E5E5"> announced is a</font>

806
00:38:29,690 --> 00:38:35,300
little bit more tricky and our solution

807
00:38:32,450 --> 00:38:38,750
or mitigation is to not expose that the

808
00:38:35,300 --> 00:38:41,210
known to<font color="#E5E5E5"> the dome at all so basically</font>

809
00:38:38,750 --> 00:38:44,240
during parsing the browser would replace

810
00:38:41,210 --> 00:38:48,170
the attributes of a lot of scripts that

811
00:38:44,240 --> 00:38:50,839
have<font color="#CCCCCC"> announced with replaced so</font>

812
00:38:48,170 --> 00:38:53,690
basically this would keep the dot knowns

813
00:38:50,840 --> 00:38:55,760
web IDL property but would remove the

814
00:38:53,690 --> 00:39:00,710
attribute this means the CSS selectors

815
00:38:55,760 --> 00:39:03,230
can no longer access the the property

816
00:39:00,710 --> 00:39:06,230
and nothing else really can access the

817
00:39:03,230 --> 00:39:07,760
property what about dangling<font color="#CCCCCC"> mark of</font>

818
00:39:06,230 --> 00:39:09,860
attacks so<font color="#CCCCCC"> dan climax of attacks are</font>

819
00:39:07,760 --> 00:39:13,760
actually a long lingering problems a

820
00:39:09,860 --> 00:39:17,120
problem in in web security they really

821
00:39:13,760 --> 00:39:19,250
have not much to do with CSP because for

822
00:39:17,120 --> 00:39:20,870
example if you can exit rate part of the

823
00:39:19,250 --> 00:39:24,380
<font color="#E5E5E5">mark-up you can exit rate very sensitive</font>

824
00:39:20,870 --> 00:39:26,270
data you can exit rate you know ti eyes

825
00:39:24,380 --> 00:39:31,340
you can accelerate tokens you can

826
00:39:26,270 --> 00:39:33,650
saturate very bad things but for<font color="#E5E5E5"> using</font>

827
00:39:31,340 --> 00:39:36,650
dangling markup attacks to bypass

828
00:39:33,650 --> 00:39:38,120
non-space<font color="#CCCCCC"> ESPs well the precondition is</font>

829
00:39:36,650 --> 00:39:40,630
that you need some kind of partial

830
00:39:38,120 --> 00:39:44,720
inserted things such as document right

831
00:39:40,630 --> 00:39:46,340
to treat to be exploitable so this for

832
00:39:44,720 --> 00:39:47,899
example does not play very well with

833
00:39:46,340 --> 00:39:53,450
strict dynamic if you<font color="#E5E5E5"> use strict in</font>

834
00:39:47,900 --> 00:39:56,110
hammock document right without sorry

835
00:39:53,450 --> 00:39:56,109
about that that was wrong

836
00:39:56,560 --> 00:40:03,610
so this<font color="#E5E5E5"> is a pretty restrictive</font>

837
00:39:59,930 --> 00:40:06,890
precondition you need the document right

838
00:40:03,610 --> 00:40:10,090
pre-existing in the page where you can

839
00:40:06,890 --> 00:40:13,100
inject your you're still a nose and

840
00:40:10,090 --> 00:40:15,380
<font color="#E5E5E5">there's a</font><font color="#CCCCCC"> proposal to forbid</font><font color="#E5E5E5"> pass</font>

841
00:40:13,100 --> 00:40:18,970
sensitive<font color="#E5E5E5"> things at also to forbid for</font>

842
00:40:15,380 --> 00:40:22,100
example document right and and company

843
00:40:18,970 --> 00:40:23,419
it is<font color="#CCCCCC"> well it will have to be rolled out</font>

844
00:40:22,100 --> 00:40:28,220
a top teen because we are<font color="#E5E5E5"> basically</font>

845
00:40:23,420 --> 00:40:30,860
disabled disabling<font color="#CCCCCC"> jes api's but it is</font>

846
00:40:28,220 --> 00:40:32,060
fully compatible<font color="#E5E5E5"> with trick dynamic so</font>

847
00:40:30,860 --> 00:40:33,830
all the properties<font color="#CCCCCC"> that have strict</font>

848
00:40:32,060 --> 00:40:35,960
dynamic basically will have this extra

849
00:40:33,830 --> 00:40:37,490
protection for free and furthermore it

850
00:40:35,960 --> 00:40:39,680
would encourage best coding practices

851
00:40:37,490 --> 00:40:43,399
because document.write is very bad for

852
00:40:39,680 --> 00:40:45,020
example energy ml is very bad they<font color="#E5E5E5"> are</font>

853
00:40:43,400 --> 00:40:47,990
bad for performance they're bad for

854
00:40:45,020 --> 00:40:49,790
security so you should not use them we

855
00:40:47,990 --> 00:40:52,790
hope<font color="#CCCCCC"> to be able to add this to the</font>

856
00:40:49,790 --> 00:40:55,070
specification maybe as an opt-in<font color="#E5E5E5"> we'll</font>

857
00:40:52,790 --> 00:40:58,370
see it depends also a lot on the

858
00:40:55,070 --> 00:41:03,350
industry support for it for this so here

859
00:40:58,370 --> 00:41:09,049
we<font color="#CCCCCC"> I have a demo on thank you so this</font><font color="#E5E5E5"> is</font>

860
00:41:03,350 --> 00:41:14,779
google plus this is google plus we have

861
00:41:09,050 --> 00:41:24,470
<font color="#E5E5E5">strict ESP on google+ and as you can see</font>

862
00:41:14,780 --> 00:41:28,060
we<font color="#CCCCCC"> have some script and will ok so we do</font>

863
00:41:24,470 --> 00:41:30,439
document query selector all script nouns

864
00:41:28,060 --> 00:41:33,320
well let's just get the first one query

865
00:41:30,440 --> 00:41:37,100
selector<font color="#CCCCCC"> script now this means get the</font>

866
00:41:33,320 --> 00:41:43,940
first script with an ounce attribute<font color="#E5E5E5"> i</font>

867
00:41:37,100 --> 00:41:45,470
think<font color="#E5E5E5"> i can</font><font color="#CCCCCC"> zoom yes so here it is the</font>

868
00:41:43,940 --> 00:41:51,410
<font color="#E5E5E5">nonce is replaced so if they do get</font>

869
00:41:45,470 --> 00:41:54,470
attribute nonce it will say replies but

870
00:41:51,410 --> 00:41:57,710
if I access the JavaScript property like

871
00:41:54,470 --> 00:42:01,839
Doc knowns it will be there<font color="#E5E5E5"> and if I</font>

872
00:41:57,710 --> 00:42:01,840
expect the page source

873
00:42:10,810 --> 00:42:21,310
<font color="#E5E5E5">okay if I inspect the page source we see</font>

874
00:42:19,150 --> 00:42:22,930
the nose<font color="#CCCCCC"> well</font><font color="#E5E5E5"> that was there it was</font>

875
00:42:21,310 --> 00:42:26,529
replaced at parsing time by the browser

876
00:42:22,930 --> 00:42:28,210
<font color="#E5E5E5">okay so the idea that CSS selectors can</font>

877
00:42:26,530 --> 00:42:31,090
no longer stealer because it's<font color="#E5E5E5"> not in</font>

878
00:42:28,210 --> 00:42:34,000
<font color="#CCCCCC">the dome anymore and this</font><font color="#E5E5E5"> is in Chrome</font>

879
00:42:31,090 --> 00:42:36,070
Canary so if you try<font color="#E5E5E5"> this at home you</font>

880
00:42:34,000 --> 00:42:38,740
only will see the<font color="#E5E5E5"> CPUs like a desk or a</font>

881
00:42:36,070 --> 00:42:46,300
canary version for the hopefully<font color="#E5E5E5"> it's</font>

882
00:42:38,740 --> 00:42:47,649
bitter soon yeah yes yeah this<font color="#E5E5E5"> is kind</font>

883
00:42:46,300 --> 00:42:50,110
of a work in progress we<font color="#CCCCCC"> are we are</font>

884
00:42:47,650 --> 00:42:51,640
pushing the last touches to it we also

885
00:42:50,110 --> 00:42:57,400
had to extend it to style tags for

886
00:42:51,640 --> 00:43:00,400
example so the next<font color="#E5E5E5"> category of bypasses</font>

887
00:42:57,400 --> 00:43:03,750
which is very interesting and in my

888
00:43:00,400 --> 00:43:06,870
opinion it goes a little bit beyond CSP

889
00:43:03,750 --> 00:43:10,510
this is actually a<font color="#E5E5E5"> very interesting</font>

890
00:43:06,870 --> 00:43:15,339
research by some of our colleagues which

891
00:43:10,510 --> 00:43:17,350
I think<font color="#E5E5E5"> will be presented soon and the</font>

892
00:43:15,340 --> 00:43:20,260
idea<font color="#CCCCCC"> is that strict ESP protects against</font>

893
00:43:17,350 --> 00:43:22,480
traditional exercise like electric cells

894
00:43:20,260 --> 00:43:25,720
the vast majority of dom XE says if you

895
00:43:22,480 --> 00:43:28,930
have powerful<font color="#E5E5E5"> javascript frameworks</font>

896
00:43:25,720 --> 00:43:31,629
libraries that have some<font color="#CCCCCC"> kind of evil</font>

897
00:43:28,930 --> 00:43:35,200
light functionality using<font color="#CCCCCC"> an on script</font>

898
00:43:31,630 --> 00:43:38,260
<font color="#E5E5E5">dom element as a source then you have a</font>

899
00:43:35,200 --> 00:43:39,850
problem<font color="#E5E5E5"> you have a problem not with</font>

900
00:43:38,260 --> 00:43:41,830
really not<font color="#E5E5E5"> really with non-space</font>

901
00:43:39,850 --> 00:43:43,450
policies but with strict<font color="#CCCCCC"> dynamics so we</font>

902
00:43:41,830 --> 00:43:47,170
have a<font color="#CCCCCC"> problem with automatically</font>

903
00:43:43,450 --> 00:43:48,850
blessing script creation through don't

904
00:43:47,170 --> 00:43:51,670
<font color="#CCCCCC">JavaScript Dom API such as create</font>

905
00:43:48,850 --> 00:43:55,299
element script and if you have<font color="#E5E5E5"> an safety</font>

906
00:43:51,670 --> 00:43:58,660
valve also that i'll explain in more

907
00:43:55,300 --> 00:44:01,570
detail what it<font color="#E5E5E5"> means so if you got some</font>

908
00:43:58,660 --> 00:44:05,379
some library that parses for example

909
00:44:01,570 --> 00:44:07,990
let's<font color="#CCCCCC"> say you have jquery in jquery you</font>

910
00:44:05,380 --> 00:44:11,520
can call dot HTML and you can pass some

911
00:44:07,990 --> 00:44:15,399
HTML to assign some HTML to an element

912
00:44:11,520 --> 00:44:17,950
you<font color="#CCCCCC"> can pass a script but as you know if</font>

913
00:44:15,400 --> 00:44:20,590
you pass scripts<font color="#E5E5E5"> to dog inner HTML that</font>

914
00:44:17,950 --> 00:44:22,509
does not work because this<font color="#E5E5E5"> parcel</font>

915
00:44:20,590 --> 00:44:24,200
inserted and the script does not trigger

916
00:44:22,510 --> 00:44:26,540
so

917
00:44:24,200 --> 00:44:29,180
aquario thurs wanted to be as easy as

918
00:44:26,540 --> 00:44:30,740
<font color="#CCCCCC">possible to developers make developers</font>

919
00:44:29,180 --> 00:44:32,839
life as it is possible so they said well

920
00:44:30,740 --> 00:44:36,259
if the developer<font color="#CCCCCC"> is adding a script</font><font color="#E5E5E5"> tag</font>

921
00:44:32,839 --> 00:44:38,900
so if doing dot HTML script alert one

922
00:44:36,260 --> 00:44:41,210
script well he probably wants this clip

923
00:44:38,900 --> 00:44:42,940
to execute so what to do instead I<font color="#E5E5E5"> would</font>

924
00:44:41,210 --> 00:44:46,480
not<font color="#CCCCCC"> use a nurse DML but we create</font>

925
00:44:42,940 --> 00:44:49,640
element script i will add dot<font color="#CCCCCC"> text of</font>

926
00:44:46,480 --> 00:44:51,500
the parse<font color="#E5E5E5"> javascript and then i will</font>

927
00:44:49,640 --> 00:44:55,549
append it to the body over<font color="#CCCCCC"> i</font><font color="#E5E5E5"> will</font>

928
00:44:51,500 --> 00:44:58,520
evaluate directly so the<font color="#E5E5E5"> problem here</font><font color="#CCCCCC"> is</font>

929
00:44:55,550 --> 00:45:01,790
that browsers are CSP aware but

930
00:44:58,520 --> 00:45:03,619
libraries in general are not so if your

931
00:45:01,790 --> 00:45:06,950
library is powerful enough<font color="#E5E5E5"> to do some</font>

932
00:45:03,619 --> 00:45:10,820
kind of JavaScript passing and getting

933
00:45:06,950 --> 00:45:13,520
sources from no script no script tags

934
00:45:10,820 --> 00:45:15,320
for example from a meta tag or from<font color="#E5E5E5"> I</font>

935
00:45:13,520 --> 00:45:17,839
don't know like an absolute Jes action

936
00:45:15,320 --> 00:45:19,400
or something then<font color="#E5E5E5"> you might need to</font>

937
00:45:17,839 --> 00:45:22,578
<font color="#E5E5E5">patch your library to make you be aware</font>

938
00:45:19,400 --> 00:45:25,910
and enforce for example<font color="#CCCCCC"> not checking at</font>

939
00:45:22,579 --> 00:45:28,819
runtime so this<font color="#E5E5E5"> is for</font><font color="#CCCCCC"> example jquery is</font>

940
00:45:25,910 --> 00:45:31,790
an example from<font color="#CCCCCC"> github so this is</font><font color="#E5E5E5"> the</font>

941
00:45:28,819 --> 00:45:34,970
global evo function the global evil

942
00:45:31,790 --> 00:45:39,529
method is called when a script is

943
00:45:34,970 --> 00:45:42,470
detected in a basically dot HTML or dot

944
00:45:39,530 --> 00:45:44,660
append or dots<font color="#CCCCCC"> replace with so basically</font>

945
00:45:42,470 --> 00:45:48,169
<font color="#CCCCCC">any dom manipulation function that</font>

946
00:45:44,660 --> 00:45:51,020
modify the HTML / of an element so code

947
00:45:48,170 --> 00:45:53,630
is JavaScript<font color="#CCCCCC"> okay it's already being</font>

948
00:45:51,020 --> 00:45:56,450
parsed and this is just so<font color="#CCCCCC"> we have</font>

949
00:45:53,630 --> 00:45:58,280
indirect eval so indirectly evo you

950
00:45:56,450 --> 00:46:02,230
would trim the code if the code is there

951
00:45:58,280 --> 00:46:05,810
we check that if there is use strict

952
00:46:02,230 --> 00:46:08,390
with offset one in the code which is<font color="#E5E5E5"> you</font>

953
00:46:05,810 --> 00:46:11,720
know<font color="#E5E5E5"> atmosphere six strict mode then</font>

954
00:46:08,390 --> 00:46:14,420
let's not<font color="#CCCCCC"> use it all but create element</font>

955
00:46:11,720 --> 00:46:17,240
<font color="#CCCCCC">crepes add populate the script with the</font>

956
00:46:14,420 --> 00:46:19,730
code and add it<font color="#CCCCCC"> to the head well to the</font>

957
00:46:17,240 --> 00:46:23,209
parent node of the head and then we move

958
00:46:19,730 --> 00:46:25,190
it okay so this is pretty bad because

959
00:46:23,210 --> 00:46:27,950
<font color="#E5E5E5">this is a strict dynamic bypass because</font>

960
00:46:25,190 --> 00:46:31,210
trick dynamic so jQuery is nonce light

961
00:46:27,950 --> 00:46:34,490
so it allowed execution and this is

962
00:46:31,210 --> 00:46:37,010
dynamic script creation otherwise it

963
00:46:34,490 --> 00:46:37,950
just evolves it so for evil you need

964
00:46:37,010 --> 00:46:39,960
unsafe evolve

965
00:46:37,950 --> 00:46:41,310
if you can avoid doing using it putting

966
00:46:39,960 --> 00:46:45,300
into policy of course your policy will

967
00:46:41,310 --> 00:46:47,730
be<font color="#E5E5E5"> better just to reiterate this is not</font>

968
00:46:45,300 --> 00:46:50,640
unknown space CSP bypass it's a strict

969
00:46:47,730 --> 00:46:53,400
dynamic bypass not<font color="#CCCCCC"> announce pace so with</font>

970
00:46:50,640 --> 00:46:55,410
nonsense this would<font color="#E5E5E5"> not run and this</font>

971
00:46:53,400 --> 00:46:58,349
will not run unless there is unsafe evil

972
00:46:55,410 --> 00:47:02,730
how<font color="#CCCCCC"> Patrick we're at</font><font color="#E5E5E5"> Google we don't use</font>

973
00:46:58,349 --> 00:47:04,920
require at Google but we normally we use

974
00:47:02,730 --> 00:47:07,440
it for some marketing pages and some

975
00:47:04,920 --> 00:47:08,880
internal tools and what we<font color="#CCCCCC"> try to do is</font>

976
00:47:07,440 --> 00:47:12,420
to just<font color="#E5E5E5"> neuter it by throwing an error</font>

977
00:47:08,880 --> 00:47:14,579
you should not be<font color="#E5E5E5"> here we actually did</font>

978
00:47:12,420 --> 00:47:16,380
something before doing that we added

979
00:47:14,579 --> 00:47:18,869
<font color="#CCCCCC">some reporting functionalities that</font><font color="#E5E5E5"> send</font>

980
00:47:16,380 --> 00:47:22,859
a CSP violation report so that we could

981
00:47:18,869 --> 00:47:24,750
<font color="#E5E5E5">use our CSP</font><font color="#CCCCCC"> front-end to actually see</font>

982
00:47:22,859 --> 00:47:27,420
what's going<font color="#E5E5E5"> on fine which products were</font>

983
00:47:24,750 --> 00:47:33,869
using jQuery with this path and then we

984
00:47:27,420 --> 00:47:37,310
<font color="#E5E5E5">just neutered the branch</font><font color="#CCCCCC"> you so wrapping</font>

985
00:47:33,869 --> 00:47:40,349
up everything get your questions ready

986
00:47:37,310 --> 00:47:43,069
basically we discussed that<font color="#CCCCCC"> the white</font>

987
00:47:40,349 --> 00:47:46,440
lace pasties PS are broken by design and

988
00:47:43,069 --> 00:47:50,550
usually should not use them there's only

989
00:47:46,440 --> 00:47:52,140
very few edge cases ready make sense at

990
00:47:50,550 --> 00:47:54,030
<font color="#E5E5E5">Google at least like the nonsense</font>

991
00:47:52,140 --> 00:47:59,009
Pacific dynamic really heavily

992
00:47:54,030 --> 00:48:02,430
simplified the CSP rollout and it is

993
00:47:59,010 --> 00:48:05,190
probably yeah also making lives of our

994
00:48:02,430 --> 00:48:06,810
developers lot easier also<font color="#CCCCCC"> very</font>

995
00:48:05,190 --> 00:48:08,970
important<font color="#CCCCCC"> to highlight here like this</font>

996
00:48:06,810 --> 00:48:10,950
CSP is not a silver bullet it is like a

997
00:48:08,970 --> 00:48:13,950
defense and<font color="#E5E5E5"> document in depth mechanism</font>

998
00:48:10,950 --> 00:48:16,109
and there are bypasses but they usually

999
00:48:13,950 --> 00:48:19,290
have various preconditions that have to

1000
00:48:16,109 --> 00:48:21,630
be met and<font color="#E5E5E5"> constrained so overall CSP is</font>

1001
00:48:19,290 --> 00:48:27,060
to a very powerful mitigation but you

1002
00:48:21,630 --> 00:48:30,900
have to know<font color="#CCCCCC"> how to use</font><font color="#E5E5E5"> it</font><font color="#CCCCCC"> and yeah with</font>

1003
00:48:27,060 --> 00:48:32,819
<font color="#E5E5E5">that thanks for your</font><font color="#CCCCCC"> attention</font><font color="#E5E5E5"> and feel</font>

1004
00:48:30,900 --> 00:48:35,240
free<font color="#CCCCCC"> to</font><font color="#E5E5E5"> ask like any questions if you</font>

1005
00:48:32,819 --> 00:48:35,240
have<font color="#E5E5E5"> some</font>

1006
00:48:39,640 --> 00:48:44,839
well thank<font color="#E5E5E5"> you very much Michaela and</font>

1007
00:48:42,560 --> 00:48:55,250
Lucas thank you any questions<font color="#CCCCCC"> from the</font>

1008
00:48:44,840 --> 00:48:57,860
floor yes excellent<font color="#E5E5E5"> okay so I've noticed</font>

1009
00:48:55,250 --> 00:49:00,320
<font color="#E5E5E5">in your slide you have like a CSP</font>

1010
00:48:57,860 --> 00:49:02,750
validator with the known box list right

1011
00:49:00,320 --> 00:49:06,640
yes so I was<font color="#CCCCCC"> wondering do you guys have</font>

1012
00:49:02,750 --> 00:49:10,400
some or if you publish maybe the list of

1013
00:49:06,640 --> 00:49:13,100
how to exploit this known bugs I noticed

1014
00:49:10,400 --> 00:49:15,620
you<font color="#E5E5E5"> have like a rest ! that says yes</font>

1015
00:49:13,100 --> 00:49:18,170
it's wonderful to access that using

1016
00:49:15,620 --> 00:49:21,650
<font color="#CCCCCC">Jason's he enjoys so thanks</font><font color="#E5E5E5"> for the</font>

1017
00:49:18,170 --> 00:49:25,130
question so first the CSP Bella trace is

1018
00:49:21,650 --> 00:49:28,820
open source so you actually can copy it

1019
00:49:25,130 --> 00:49:32,840
and reuse it it comes with like a list

1020
00:49:28,820 --> 00:49:34,790
of like no 100 or 500 most common vitals

1021
00:49:32,840 --> 00:49:38,060
bypasses we extracted from the search

1022
00:49:34,790 --> 00:49:40,550
index usually<font color="#E5E5E5"> this list is enough to</font>

1023
00:49:38,060 --> 00:49:42,049
bypass most widely spaced policies

1024
00:49:40,550 --> 00:49:46,030
because like all the Syrians have to

1025
00:49:42,050 --> 00:49:48,830
bypass this right and also<font color="#E5E5E5"> the paper</font>

1026
00:49:46,030 --> 00:49:51,110
really describes in detail how these

1027
00:49:48,830 --> 00:49:54,110
bypasses work and how you can find

1028
00:49:51,110 --> 00:49:56,180
bypasses yourself basically it's not

1029
00:49:54,110 --> 00:49:57,650
rocket science it's just<font color="#E5E5E5"> like</font><font color="#CCCCCC"> JCP</font>

1030
00:49:56,180 --> 00:50:00,680
endpoints you have to find the domain

1031
00:49:57,650 --> 00:50:05,570
and fiddle in some the right parameters

1032
00:50:00,680 --> 00:50:08,120
and then that really<font color="#E5E5E5"> works so that I</font>

1033
00:50:05,570 --> 00:50:10,670
mean but the idea is that when you use a

1034
00:50:08,120 --> 00:50:12,980
widely spaced policies for script you

1035
00:50:10,670 --> 00:50:16,160
trust<font color="#E5E5E5"> that you can't that an attacker</font>

1036
00:50:12,980 --> 00:50:20,570
can't control what that origin sends out

1037
00:50:16,160 --> 00:50:22,910
so you are<font color="#CCCCCC"> basically hoping that the</font>

1038
00:50:20,570 --> 00:50:24,890
origin<font color="#CCCCCC"> you are trusting the full origin</font>

1039
00:50:22,910 --> 00:50:26,600
so if you're Jason<font color="#E5E5E5"> Peters basically a</font>

1040
00:50:24,890 --> 00:50:28,970
proxy for your content you just do call

1041
00:50:26,600 --> 00:50:30,950
back your code that origin sends back

1042
00:50:28,970 --> 00:50:32,870
your arbitrary code and then you bite

1043
00:50:30,950 --> 00:50:35,930
and that violates the the first

1044
00:50:32,870 --> 00:50:38,500
assumption that your unit the fortunes

1045
00:50:35,930 --> 00:50:38,500
trust as<font color="#CCCCCC"> well</font>

1046
00:50:42,539 --> 00:50:47,069
the thing thanks for<font color="#E5E5E5"> your talk i'm</font>

1047
00:50:44,919 --> 00:50:50,640
looking forward to<font color="#E5E5E5"> seeing the</font>

1048
00:50:47,069 --> 00:50:53,969
applications in their open source

1049
00:50:50,640 --> 00:50:58,598
repositories<font color="#CCCCCC"> i was wondering</font><font color="#E5E5E5"> if you also</font>

1050
00:50:53,969 --> 00:51:05,309
investigated other media<font color="#E5E5E5"> types in your</font>

1051
00:50:58,599 --> 00:51:09,279
CSP like flesh jpg new piece and so on

1052
00:51:05,309 --> 00:51:11,979
<font color="#CCCCCC">so flash is a very interesting problem</font>

1053
00:51:09,279 --> 00:51:14,679
and you're right<font color="#E5E5E5"> can you also use flash</font>

1054
00:51:11,979 --> 00:51:17,439
to trigger XSS and it is also a CSP

1055
00:51:14,679 --> 00:51:19,659
bypass but this is why we have object

1056
00:51:17,439 --> 00:51:22,269
source none which basically<font color="#E5E5E5"> barrack</font>

1057
00:51:19,659 --> 00:51:26,799
<font color="#E5E5E5">blocks all flash content by default</font>

1058
00:51:22,269 --> 00:51:31,149
right so by setting objectives also soon

1059
00:51:26,799 --> 00:51:35,349
on<font color="#CCCCCC"> your blog flash and capac themselves</font>

1060
00:51:31,149 --> 00:51:38,439
I mean<font color="#CCCCCC"> or images they usually cannot</font>

1061
00:51:35,349 --> 00:51:39,880
trigger<font color="#CCCCCC"> JavaScript and if so you</font>

1062
00:51:38,439 --> 00:51:41,709
probably have something<font color="#E5E5E5"> that you would</font>

1063
00:51:39,880 --> 00:51:44,169
still<font color="#CCCCCC"> have to</font><font color="#E5E5E5"> put into a script tag</font>

1064
00:51:41,709 --> 00:51:45,729
right and at this point the process

1065
00:51:44,169 --> 00:51:47,649
still prevents the script tag and those

1066
00:51:45,729 --> 00:51:49,538
from<font color="#CCCCCC"> X yes the mime sniffing problems</font>

1067
00:51:47,649 --> 00:51:51,098
that used to be in<font color="#E5E5E5"> the past are not</font>

1068
00:51:49,539 --> 00:51:54,069
longer present basically modern browser

1069
00:51:51,099 --> 00:51:55,779
that supports ESP and anyway when there

1070
00:51:54,069 --> 00:51:57,788
is a script this is subject<font color="#CCCCCC"> to script</font>

1071
00:51:55,779 --> 00:52:00,309
SRC so even if<font color="#E5E5E5"> you're able somehow to</font>

1072
00:51:57,789 --> 00:52:02,109
get<font color="#E5E5E5"> to get execute a script it's subject</font>

1073
00:52:00,309 --> 00:52:09,249
to script SSC policy it's at a lower

1074
00:52:02,109 --> 00:52:14,380
level in<font color="#CCCCCC"> the browser logic oh yes thank</font>

1075
00:52:09,249 --> 00:52:17,288
<font color="#CCCCCC">you ESP evaluator does it also form</font>

1076
00:52:14,380 --> 00:52:20,169
multiple requests to validate<font color="#CCCCCC"> if the</font>

1077
00:52:17,289 --> 00:52:22,439
nuance is actually regenerated each time

1078
00:52:20,169 --> 00:52:26,558
instead of being a constant variable

1079
00:52:22,439 --> 00:52:28,058
well being consoled the question was if

1080
00:52:26,559 --> 00:52:29,829
it checks if they don't respect sample

1081
00:52:28,059 --> 00:52:32,769
are constant if it does multiplies

1082
00:52:29,829 --> 00:52:34,269
<font color="#CCCCCC">they're random enough currently not</font><font color="#E5E5E5"> just</font>

1083
00:52:32,769 --> 00:52:35,859
<font color="#E5E5E5">a feature request for it but currently</font>

1084
00:52:34,269 --> 00:52:39,218
it only does won't fetch and tries to

1085
00:52:35,859 --> 00:52:40,419
get a policy it's<font color="#E5E5E5"> very simple but this</font>

1086
00:52:39,219 --> 00:52:43,059
is definitely something<font color="#E5E5E5"> we should be</font>

1087
00:52:40,419 --> 00:52:45,908
doing because this is a very important

1088
00:52:43,059 --> 00:52:47,739
point people<font color="#E5E5E5"> kind of copy and paste the</font>

1089
00:52:45,909 --> 00:52:51,489
slides right and then they have a

1090
00:52:47,739 --> 00:52:52,929
constant norms and I mean yeah it's very

1091
00:52:51,489 --> 00:52:53,750
trivial<font color="#CCCCCC"> Tobias but how something like</font>

1092
00:52:52,929 --> 00:52:57,020
that

1093
00:52:53,750 --> 00:53:00,770
and yeah but when we when we decided<font color="#E5E5E5"> to</font>

1094
00:52:57,020 --> 00:53:02,270
<font color="#CCCCCC">use random with our</font><font color="#E5E5E5"> four and</font><font color="#CCCCCC"> d0m for the</font>

1095
00:53:00,770 --> 00:53:04,040
<font color="#E5E5E5">first</font><font color="#CCCCCC"> time in our lives we are</font>

1096
00:53:02,270 --> 00:53:06,320
presenting<font color="#E5E5E5"> their letting two years or</font>

1097
00:53:04,040 --> 00:53:08,150
even more<font color="#E5E5E5"> that we had two years we're</font>

1098
00:53:06,320 --> 00:53:09,620
saying<font color="#E5E5E5"> in one or two years we are going</font>

1099
00:53:08,150 --> 00:53:11,960
to like check the web if people are

1100
00:53:09,620 --> 00:53:14,540
using random like a static random string

1101
00:53:11,960 --> 00:53:16,850
in in the in the nonce attributes we

1102
00:53:14,540 --> 00:53:19,730
<font color="#E5E5E5">haven't done it yet by Richard for just</font>

1103
00:53:16,850 --> 00:53:23,150
for initial people copy to slide one to

1104
00:53:19,730 --> 00:53:25,180
one so garden your<font color="#CCCCCC"> front-end</font><font color="#E5E5E5"> you</font>

1105
00:53:23,150 --> 00:53:27,440
mentioned that there is 50 million

1106
00:53:25,180 --> 00:53:29,210
amount of noise and then you kind of

1107
00:53:27,440 --> 00:53:30,590
want<font color="#CCCCCC"> to here are some of</font><font color="#E5E5E5"> the ways to</font>

1108
00:53:29,210 --> 00:53:32,720
reduce the noise by looking for common

1109
00:53:30,590 --> 00:53:34,730
signatures for the other meat of those

1110
00:53:32,720 --> 00:53:36,049
50 million can you share<font color="#CCCCCC"> some of the</font>

1111
00:53:34,730 --> 00:53:38,330
strategies used to<font color="#E5E5E5"> actually get rid of</font>

1112
00:53:36,050 --> 00:53:44,510
some<font color="#CCCCCC"> of the not false positives from the</font>

1113
00:53:38,330 --> 00:53:47,960
actual reports so basically you still

1114
00:53:44,510 --> 00:53:49,190
try<font color="#E5E5E5"> to group them by like the important</font>

1115
00:53:47,960 --> 00:53:52,010
feel so I'd like where do they come from

1116
00:53:49,190 --> 00:53:54,290
from from which domain and then maybe

1117
00:53:52,010 --> 00:53:56,780
auspice script sample so you in<font color="#E5E5E5"> the end</font>

1118
00:53:54,290 --> 00:53:59,270
you maybe end up with like<font color="#E5E5E5"> five script</font>

1119
00:53:56,780 --> 00:54:01,610
sample lines and then we usually take

1120
00:53:59,270 --> 00:54:04,160
them<font color="#E5E5E5"> and look into</font><font color="#CCCCCC"> our internal code</font>

1121
00:54:01,610 --> 00:54:06,950
search and try to verify that this is

1122
00:54:04,160 --> 00:54:09,589
actually code that is from us right and

1123
00:54:06,950 --> 00:54:11,930
by that<font color="#E5E5E5"> we can very easily tell if this</font>

1124
00:54:09,590 --> 00:54:15,110
is<font color="#E5E5E5"> something that is broken in on</font><font color="#CCCCCC"> our</font>

1125
00:54:11,930 --> 00:54:17,569
side and we also take the same snippet

1126
00:54:15,110 --> 00:54:20,810
often and search just put in a google

1127
00:54:17,570 --> 00:54:23,120
search and then sometimes you<font color="#CCCCCC"> know you</font>

1128
00:54:20,810 --> 00:54:24,860
<font color="#E5E5E5">see pages with that or extensions and</font>

1129
00:54:23,120 --> 00:54:26,960
then you know it's a<font color="#E5E5E5"> false positive so</font>

1130
00:54:24,860 --> 00:54:32,410
this stage it becomes a bit manual right

1131
00:54:26,960 --> 00:54:32,410
but it's not so bad anymore because

1132
00:54:32,830 --> 00:54:37,130
there is a<font color="#E5E5E5"> couple of violations are</font>

1133
00:54:34,940 --> 00:54:39,050
extensions that are very noisy and as

1134
00:54:37,130 --> 00:54:41,030
soon as you can<font color="#E5E5E5"> filter them out the data</font>

1135
00:54:39,050 --> 00:54:44,120
is<font color="#E5E5E5"> much much more actionable actually</font>

1136
00:54:41,030 --> 00:54:48,650
right but you're<font color="#E5E5E5"> right it is still some</font>

1137
00:54:44,120 --> 00:54:52,160
<font color="#CCCCCC">Brook left and what we also</font><font color="#E5E5E5"> do is we</font>

1138
00:54:48,650 --> 00:54:55,160
kinda keep monitoring the volume of

1139
00:54:52,160 --> 00:54:57,500
these less like level<font color="#E5E5E5"> T's filtered</font>

1140
00:54:55,160 --> 00:55:00,770
results right and if they for example

1141
00:54:57,500 --> 00:55:03,200
spike that could<font color="#CCCCCC"> be a regression and</font>

1142
00:55:00,770 --> 00:55:05,060
then we can alert on<font color="#CCCCCC"> that right because</font>

1143
00:55:03,200 --> 00:55:06,740
it could<font color="#CCCCCC"> be that a developer from one</font>

1144
00:55:05,060 --> 00:55:07,130
day of the other like submit some code

1145
00:55:06,740 --> 00:55:09,350
that

1146
00:55:07,130 --> 00:55:11,060
like you know inline JavaScript<font color="#E5E5E5"> or</font>

1147
00:55:09,350 --> 00:55:12,710
<font color="#CCCCCC">non-event</font><font color="#E5E5E5"> and others like mounting</font>

1148
00:55:11,060 --> 00:55:13,910
disabled whatever that we would

1149
00:55:12,710 --> 00:55:16,160
immediately see a spike in<font color="#E5E5E5"> the</font>

1150
00:55:13,910 --> 00:55:21,440
violations right and we could act them

1151
00:55:16,160 --> 00:55:28,310
on<font color="#E5E5E5"> top</font><font color="#CCCCCC"> of</font><font color="#E5E5E5"> that and yeah I hope this</font>

1152
00:55:21,440 --> 00:55:31,330
answers the question to some extent give

1153
00:55:28,310 --> 00:55:34,279
any other questions from the floor so

1154
00:55:31,330 --> 00:55:36,680
all right great thank you so<font color="#E5E5E5"> much thank</font>

1155
00:55:34,280 --> 00:55:39,870
<font color="#E5E5E5">you very much goodbye my darling</font>

1156
00:55:36,680 --> 00:55:39,870
[Applause]

