1
00:00:10,820 --> 00:00:15,260
thank you very much yeah thank you very

2
00:00:13,700 --> 00:00:16,880
<font color="#CCCCCC">much for our kind introduction I'm</font>

3
00:00:15,260 --> 00:00:19,910
Siegfried and this is my colleague

4
00:00:16,880 --> 00:00:23,270
Stefan and we are both from Germany from

5
00:00:19,910 --> 00:00:27,170
a research institute called front / SI t

6
00:00:23,270 --> 00:00:29,210
and this since this<font color="#E5E5E5"> is our first</font><font color="#CCCCCC"> time at</font>

7
00:00:27,170 --> 00:00:32,480
jack in the box we thought it<font color="#CCCCCC"> might be a</font>

8
00:00:29,210 --> 00:00:34,730
cool idea to<font color="#CCCCCC"> bring some local beer</font><font color="#E5E5E5"> to to</font>

9
00:00:32,479 --> 00:00:37,519
hang out together offers after<font color="#CCCCCC"> the talk</font>

10
00:00:34,730 --> 00:00:40,760
so feel free to<font color="#E5E5E5"> come on stage or meet us</font>

11
00:00:37,519 --> 00:00:45,620
out there and it grabbed a free beer yes

12
00:00:40,760 --> 00:00:49,339
thank<font color="#E5E5E5"> you cool so the let's start with</font>

13
00:00:45,620 --> 00:00:50,419
this talk well let's<font color="#E5E5E5"> introduce a little</font>

14
00:00:49,340 --> 00:00:53,000
bit Justin would you say a few words

15
00:00:50,420 --> 00:00:55,609
about yourself<font color="#CCCCCC"> yes a secret already</font>

16
00:00:53,000 --> 00:00:57,170
mentioned I'm Stefan I'm mobile

17
00:00:55,609 --> 00:01:00,379
researcher working<font color="#E5E5E5"> also at the</font>

18
00:00:57,170 --> 00:01:02,660
fraunhofer institute and we together our

19
00:01:00,379 --> 00:01:05,179
members of a small student hacking group

20
00:01:02,660 --> 00:01:08,060
and as you can see we're enjoying our

21
00:01:05,180 --> 00:01:10,910
spare time to teach students<font color="#E5E5E5"> videos</font>

22
00:01:08,060 --> 00:01:14,149
hacking and here we want to present some

23
00:01:10,910 --> 00:01:16,100
of the results yeah thank you yeah<font color="#E5E5E5"> and</font>

24
00:01:14,149 --> 00:01:18,799
see freedom elver and vulnerability

25
00:01:16,100 --> 00:01:20,780
researcher at the Institute my main

26
00:01:18,799 --> 00:01:23,330
research focuses on a static and dynamic

27
00:01:20,780 --> 00:01:26,060
code analysis so combining these two

28
00:01:23,330 --> 00:01:28,429
guys together in order to automatically

29
00:01:26,060 --> 00:01:32,270
identify vulnerabilities or two spot

30
00:01:28,430 --> 00:01:34,280
malicious parts in the software yeah but

31
00:01:32,270 --> 00:01:36,048
this talk is not only about us as Stefan

32
00:01:34,280 --> 00:01:38,780
already mentioned it's about<font color="#E5E5E5"> our teams</font>

33
00:01:36,049 --> 00:01:41,810
so we have we founded a hacking team at

34
00:01:38,780 --> 00:01:44,240
our Institute<font color="#E5E5E5"> our consisting of us in a</font>

35
00:01:41,810 --> 00:01:46,970
couple<font color="#E5E5E5"> of students and we meet up in our</font>

36
00:01:44,240 --> 00:01:49,490
spare time and hang<font color="#E5E5E5"> out have a beer and</font>

37
00:01:46,970 --> 00:01:52,070
<font color="#CCCCCC">pizza and then we look into</font><font color="#E5E5E5"> interesting</font>

38
00:01:49,490 --> 00:01:54,408
topics and this password manager was one

39
00:01:52,070 --> 00:01:56,240
of the topics we looked into so the

40
00:01:54,409 --> 00:01:58,159
<font color="#CCCCCC">credit scores and oh don't only go to us</font>

41
00:01:56,240 --> 00:02:01,850
let's go<font color="#E5E5E5"> to this brilliant students and</font>

42
00:01:58,159 --> 00:02:04,549
mentioned here and yeah good so let's

43
00:02:01,850 --> 00:02:07,460
start with the motivation I guess you

44
00:02:04,549 --> 00:02:09,110
all well y'all when you look at this

45
00:02:07,460 --> 00:02:11,690
slide there are different icons in your

46
00:02:09,110 --> 00:02:14,060
we probably have an account for this for

47
00:02:11,690 --> 00:02:16,519
instance for<font color="#E5E5E5"> Apple YouTube</font><font color="#CCCCCC"> skype or</font>

48
00:02:14,060 --> 00:02:18,739
whatever and while you're over here in

49
00:02:16,519 --> 00:02:19,720
the security area and it's hard to

50
00:02:18,739 --> 00:02:22,720
<font color="#CCCCCC">remember</font>

51
00:02:19,720 --> 00:02:24,010
different passwords so well it's<font color="#E5E5E5"> usually</font>

52
00:02:22,720 --> 00:02:26,380
not a good idea to have<font color="#CCCCCC"> a single</font>

53
00:02:24,010 --> 00:02:27,970
password for all of the accounts and<font color="#CCCCCC"> it</font>

54
00:02:26,380 --> 00:02:29,500
was another good idea<font color="#E5E5E5"> to</font><font color="#CCCCCC"> have a</font><font color="#E5E5E5"> part of</font>

55
00:02:27,970 --> 00:02:31,870
like blah blah blah blah blah blah<font color="#E5E5E5"> blah</font>

56
00:02:29,500 --> 00:02:33,880
<font color="#CCCCCC">two for the</font><font color="#E5E5E5"> different accounts so while</font>

57
00:02:31,870 --> 00:02:36,130
you have to have you<font color="#CCCCCC"> have</font><font color="#E5E5E5"> to remember</font>

58
00:02:33,880 --> 00:02:38,859
all these passwords and there was an

59
00:02:36,130 --> 00:02:42,070
interesting study showing that on

60
00:02:38,860 --> 00:02:44,200
average 90 different accounts an<font color="#E5E5E5"> average</font>

61
00:02:42,070 --> 00:02:45,459
user has 90 different accounts and you

62
00:02:44,200 --> 00:02:48,010
have to remember all the 90 different

63
00:02:45,460 --> 00:02:51,160
account credentials which is<font color="#CCCCCC"> a hard</font>

64
00:02:48,010 --> 00:02:52,929
problem so although the community came

65
00:02:51,160 --> 00:02:55,060
up with different approaches to solve

66
00:02:52,930 --> 00:02:57,100
this problem I want at the top of this

67
00:02:55,060 --> 00:02:59,440
line which goes a little bit away<font color="#CCCCCC"> from</font>

68
00:02:57,100 --> 00:03:02,890
the remembering the<font color="#E5E5E5"> passwords she will</font>

69
00:02:59,440 --> 00:03:05,740
have a public key crypto is our approach

70
00:03:02,890 --> 00:03:08,290
like biometric authentication or picture

71
00:03:05,740 --> 00:03:10,360
authentication<font color="#CCCCCC"> will remember a couple of</font>

72
00:03:08,290 --> 00:03:12,700
pictures or some part in the picture and

73
00:03:10,360 --> 00:03:14,920
this lets you authenticate against their

74
00:03:12,700 --> 00:03:16,929
account well but it turned out that

75
00:03:14,920 --> 00:03:19,630
there's probably a<font color="#E5E5E5"> lot more in the</font>

76
00:03:16,930 --> 00:03:21,550
research area but somehow we all will

77
00:03:19,630 --> 00:03:23,980
still stick to the problem of

78
00:03:21,550 --> 00:03:26,830
remembering these passwords so this goes

79
00:03:23,980 --> 00:03:28,899
down to<font color="#CCCCCC"> the line to the</font><font color="#E5E5E5"> notebook because</font>

80
00:03:26,830 --> 00:03:31,630
I see my<font color="#CCCCCC"> personal environment always</font>

81
00:03:28,900 --> 00:03:33,430
especially for girls they have a paper

82
00:03:31,630 --> 00:03:35,320
notebook and they're writing down their

83
00:03:33,430 --> 00:03:38,200
passwords in the<font color="#CCCCCC"> paper no look like in</font>

84
00:03:35,320 --> 00:03:40,390
whatever in page 153 between two

85
00:03:38,200 --> 00:03:43,119
addresses they they hide the password

86
00:03:40,390 --> 00:03:44,738
well if you do this for<font color="#CCCCCC"> 90 accounts and</font>

87
00:03:43,120 --> 00:03:47,019
you have to reset it probably also not a

88
00:03:44,739 --> 00:03:49,299
good idea and this<font color="#E5E5E5"> brings you finally</font>

89
00:03:47,019 --> 00:03:52,000
teach our talk the password managers

90
00:03:49,299 --> 00:03:53,650
<font color="#E5E5E5">what is it in general a cool ideas do</font>

91
00:03:52,000 --> 00:03:55,269
you have a password<font color="#CCCCCC"> manager where you</font>

92
00:03:53,650 --> 00:03:58,019
put all your credentials and then<font color="#E5E5E5"> you</font>

93
00:03:55,269 --> 00:04:00,340
have a very<font color="#E5E5E5"> low master password and once</font>

94
00:03:58,019 --> 00:04:03,030
entering this password master password

95
00:04:00,340 --> 00:04:05,590
you can access all your sensitive

96
00:04:03,030 --> 00:04:07,870
credentials for it and basically<font color="#CCCCCC"> talk</font>

97
00:04:05,590 --> 00:04:09,730
about<font color="#E5E5E5"> this so we</font><font color="#CCCCCC"> thought in the group</font>

98
00:04:07,870 --> 00:04:12,070
what it might be a cool idea to<font color="#E5E5E5"> look</font>

99
00:04:09,730 --> 00:04:14,380
<font color="#E5E5E5">into password managers so the first step</font>

100
00:04:12,070 --> 00:04:16,238
we looked on the web and we checked out

101
00:04:14,380 --> 00:04:18,040
different vendors what they think about

102
00:04:16,238 --> 00:04:19,929
<font color="#E5E5E5">passive engine how they promote their</font>

103
00:04:18,040 --> 00:04:22,440
pants up manager and they found<font color="#E5E5E5"> one</font>

104
00:04:19,930 --> 00:04:25,479
interesting vendor saying yeah so we use

105
00:04:22,440 --> 00:04:27,610
aes-256 a very strong encryption scheme

106
00:04:25,479 --> 00:04:28,479
and while our personal manager is

107
00:04:27,610 --> 00:04:31,300
basically

108
00:04:28,480 --> 00:04:34,840
banking level or<font color="#E5E5E5"> military-grade says a</font>

109
00:04:31,300 --> 00:04:36,970
while cool right and let's give it a try

110
00:04:34,840 --> 00:04:38,890
<font color="#E5E5E5">and we said challenge accepted let's</font>

111
00:04:36,970 --> 00:04:41,890
look into these guys if it's really so

112
00:04:38,890 --> 00:04:43,330
hard to break them so well what you

113
00:04:41,890 --> 00:04:45,370
thought about this is the first time we

114
00:04:43,330 --> 00:04:47,200
thought<font color="#CCCCCC"> about this picture so while you</font>

115
00:04:45,370 --> 00:04:51,820
<font color="#E5E5E5">have a street here and you can have a</font>

116
00:04:47,200 --> 00:04:53,770
bery refute 120 156 encryption scheme

117
00:04:51,820 --> 00:04:57,000
<font color="#E5E5E5">but there's always</font><font color="#CCCCCC"> a less than the right</font>

118
00:04:53,770 --> 00:04:59,830
to to basically go around this thing and

119
00:04:57,000 --> 00:05:01,960
well it turned out that<font color="#E5E5E5"> this was most of</font>

120
00:04:59,830 --> 00:05:06,370
the time the case in our vulnerabilities

121
00:05:01,960 --> 00:05:08,440
what we found so the first<font color="#E5E5E5"> step um well</font>

122
00:05:06,370 --> 00:05:10,450
since we<font color="#CCCCCC"> focused on android applications</font>

123
00:05:08,440 --> 00:05:12,430
because mobile<font color="#CCCCCC"> is cool and impressive</font>

124
00:05:10,450 --> 00:05:15,849
managers so we<font color="#E5E5E5"> checked out a couple of</font>

125
00:05:12,430 --> 00:05:17,980
password managers on the<font color="#E5E5E5"> web so we we</font>

126
00:05:15,850 --> 00:05:19,810
download only<font color="#E5E5E5"> the most downloaded ones</font>

127
00:05:17,980 --> 00:05:22,570
because they are the<font color="#E5E5E5"> most interesting</font>

128
00:05:19,810 --> 00:05:25,660
ones so for<font color="#E5E5E5"> instance we ordered by their</font>

129
00:05:22,570 --> 00:05:27,400
download rate a keeper and keep safe one

130
00:05:25,660 --> 00:05:30,070
pass and so on and<font color="#E5E5E5"> so forth so we</font>

131
00:05:27,400 --> 00:05:31,599
collected nine of them so the first

132
00:05:30,070 --> 00:05:34,420
question which probably comes into your

133
00:05:31,600 --> 00:05:36,790
mind why isn't there x or y password why

134
00:05:34,420 --> 00:05:39,730
didn't you<font color="#E5E5E5"> look into X or Y we got this</font>

135
00:05:36,790 --> 00:05:41,980
question quite often and well there<font color="#E5E5E5"> is</font>

136
00:05:39,730 --> 00:05:43,840
<font color="#CCCCCC">no</font><font color="#E5E5E5"> special reason so as I said we are</font>

137
00:05:41,980 --> 00:05:45,640
sitting together we downloaded nine

138
00:05:43,840 --> 00:05:47,919
different password managers and then we

139
00:05:45,640 --> 00:05:50,050
started<font color="#CCCCCC"> looking into the</font><font color="#E5E5E5"> nine in order</font>

140
00:05:47,920 --> 00:05:51,880
<font color="#E5E5E5">to find vulnerabilities and it turned</font>

141
00:05:50,050 --> 00:05:54,790
out that<font color="#E5E5E5"> we found</font><font color="#CCCCCC"> a vulnerability in one</font>

142
00:05:51,880 --> 00:05:57,310
of<font color="#E5E5E5"> them in each of them at</font><font color="#CCCCCC"> least one and</font>

143
00:05:54,790 --> 00:05:58,750
then at some time what we got bored<font color="#E5E5E5"> and</font>

144
00:05:57,310 --> 00:06:00,550
you say well let's let's stop this

145
00:05:58,750 --> 00:06:02,200
project and continue to another project

146
00:06:00,550 --> 00:06:04,210
so there is no<font color="#E5E5E5"> special reason why we</font>

147
00:06:02,200 --> 00:06:05,920
didn't look into another one and i also

148
00:06:04,210 --> 00:06:08,620
want to state that<font color="#E5E5E5"> is not a complete</font>

149
00:06:05,920 --> 00:06:10,390
<font color="#CCCCCC">pentest so</font><font color="#E5E5E5"> it might be</font><font color="#CCCCCC"> the case there</font>

150
00:06:08,620 --> 00:06:12,700
are more vulnerabilities in it we<font color="#CCCCCC"> only</font>

151
00:06:10,390 --> 00:06:16,150
basic looked in it and we identified a

152
00:06:12,700 --> 00:06:18,190
few<font color="#E5E5E5"> of them good so let's</font><font color="#CCCCCC"> talk a little</font>

153
00:06:16,150 --> 00:06:20,849
<font color="#CCCCCC">about the core features or the features</font>

154
00:06:18,190 --> 00:06:23,530
we identified by looking into these apps

155
00:06:20,850 --> 00:06:25,600
because they are interesting for the for

156
00:06:23,530 --> 00:06:28,000
the talk so while there is confidential

157
00:06:25,600 --> 00:06:30,340
and password storage where is the master

158
00:06:28,000 --> 00:06:32,770
password which already explained then

159
00:06:30,340 --> 00:06:34,869
there<font color="#E5E5E5"> is this great feature of a secure</font>

160
00:06:32,770 --> 00:06:37,180
synchronization because if you have two

161
00:06:34,870 --> 00:06:39,010
devices or a<font color="#CCCCCC"> PC in</font><font color="#E5E5E5"> the device and you</font>

162
00:06:37,180 --> 00:06:39,620
would<font color="#CCCCCC"> like to add whatever credentials</font>

163
00:06:39,010 --> 00:06:41,630
in your

164
00:06:39,620 --> 00:06:43,850
whatever<font color="#CCCCCC"> android device it should be</font>

165
00:06:41,630 --> 00:06:46,360
synchronized<font color="#E5E5E5"> with the pc so you should</font>

166
00:06:43,850 --> 00:06:49,669
also be<font color="#CCCCCC"> able to login into your pc</font>

167
00:06:46,360 --> 00:06:52,220
another thing again for user convenience

168
00:06:49,669 --> 00:06:54,440
auto filling so once you open for

169
00:06:52,220 --> 00:06:56,690
instance a<font color="#CCCCCC"> twitter application it should</font>

170
00:06:54,440 --> 00:06:58,250
be automatically and magically skills in

171
00:06:56,690 --> 00:07:01,150
your credentials because the<font color="#CCCCCC"> user is</font>

172
00:06:58,250 --> 00:07:04,400
lazy and<font color="#E5E5E5"> you want this was a great idea</font>

173
00:07:01,150 --> 00:07:07,729
another thing is<font color="#E5E5E5"> a custom browser we saw</font>

174
00:07:04,400 --> 00:07:09,799
a lot<font color="#CCCCCC"> of applications that</font><font color="#E5E5E5"> and implement</font>

175
00:07:07,729 --> 00:07:11,630
their own browser and they integrate it

176
00:07:09,800 --> 00:07:13,340
into their app due to various

177
00:07:11,630 --> 00:07:16,250
implementation reasons which we will

178
00:07:13,340 --> 00:07:19,669
explain later in the talk and the last

179
00:07:16,250 --> 00:07:21,710
feature which<font color="#CCCCCC"> is basically what they</font>

180
00:07:19,669 --> 00:07:23,599
said while remembering this very long

181
00:07:21,710 --> 00:07:26,270
master plan so it's<font color="#E5E5E5"> probably hard for a</font>

182
00:07:23,600 --> 00:07:29,000
user that's if them also a chance to

183
00:07:26,270 --> 00:07:30,409
remember a small tin and this is

184
00:07:29,000 --> 00:07:32,210
basically<font color="#E5E5E5"> similar to the master password</font>

185
00:07:30,410 --> 00:07:35,990
and we will<font color="#E5E5E5"> also say a few words about</font>

186
00:07:32,210 --> 00:07:37,250
<font color="#E5E5E5">this later did so this slide shows an</font>

187
00:07:35,990 --> 00:07:39,770
overview about<font color="#E5E5E5"> the different</font>

188
00:07:37,250 --> 00:07:41,840
interactions which are important for<font color="#E5E5E5"> the</font>

189
00:07:39,770 --> 00:07:44,479
<font color="#E5E5E5">following chart it's not complete but it</font>

190
00:07:41,840 --> 00:07:47,299
<font color="#E5E5E5">is enough for explaining our</font>

191
00:07:44,479 --> 00:07:50,240
vulnerabilities so this basically this

192
00:07:47,300 --> 00:07:52,849
<font color="#E5E5E5">box here should much that symbolizes</font>

193
00:07:50,240 --> 00:07:55,400
<font color="#E5E5E5">this smartphone and this box basically</font>

194
00:07:52,849 --> 00:07:57,560
is the password manager at which sits in

195
00:07:55,400 --> 00:08:00,020
its sandbox in your Android sandbox<font color="#E5E5E5"> and</font>

196
00:07:57,560 --> 00:08:02,720
what we found that most of the paths of

197
00:08:00,020 --> 00:08:04,729
manager at stored<font color="#E5E5E5"> there NASA pairs or in</font>

198
00:08:02,720 --> 00:08:08,240
a file which is<font color="#E5E5E5"> in a sandbox which is</font>

199
00:08:04,729 --> 00:08:10,099
usually ok it's encrypted sometimes

200
00:08:08,240 --> 00:08:13,940
sometimes<font color="#E5E5E5"> a lot we will mention this in</font>

201
00:08:10,099 --> 00:08:15,710
a second<font color="#E5E5E5"> a database so that credentials</font>

202
00:08:13,940 --> 00:08:18,020
what your account credentials what you

203
00:08:15,710 --> 00:08:20,510
enter also stored at a database in your

204
00:08:18,020 --> 00:08:23,120
sandbox and this is out what up for

205
00:08:20,510 --> 00:08:26,020
convenient i edited plain text but

206
00:08:23,120 --> 00:08:28,729
usually<font color="#CCCCCC"> they're encrypted some tightness</font>

207
00:08:26,020 --> 00:08:31,969
anyway and so there is another

208
00:08:28,729 --> 00:08:34,218
connection to out of this sandbox there

209
00:08:31,970 --> 00:08:36,830
is an account manager which is special

210
00:08:34,219 --> 00:08:38,479
in android and they some app store the

211
00:08:36,830 --> 00:08:42,200
master password there we will also

212
00:08:38,479 --> 00:08:43,459
explain this later on there's a what i

213
00:08:42,200 --> 00:08:44,839
<font color="#E5E5E5">already mentioned there is a connection</font>

214
00:08:43,458 --> 00:08:48,199
to the internet due to the

215
00:08:44,839 --> 00:08:50,250
synchronization problem or the digital

216
00:08:48,200 --> 00:08:52,620
synchronization feature sorry

217
00:08:50,250 --> 00:08:54,990
and then what for instance if you have a

218
00:08:52,620 --> 00:08:57,120
<font color="#CCCCCC">twitter application kinds of this app</font>

219
00:08:54,990 --> 00:08:58,650
there's also<font color="#E5E5E5"> communication obviously</font>

220
00:08:57,120 --> 00:09:01,020
between<font color="#CCCCCC"> the password manager app and</font>

221
00:08:58,650 --> 00:09:02,850
this app to automatically fill in the

222
00:09:01,020 --> 00:09:05,130
credentials and last but not least

223
00:09:02,850 --> 00:09:07,170
there's a<font color="#CCCCCC"> PC which is also which can</font>

224
00:09:05,130 --> 00:09:10,140
also communicate with the smartphone

225
00:09:07,170 --> 00:09:12,510
which I'll explain in a second good so

226
00:09:10,140 --> 00:09:15,630
no root scenario what do I mean by this

227
00:09:12,510 --> 00:09:17,760
all our texts we considered are based on

228
00:09:15,630 --> 00:09:20,370
no rooted devices because if the device

229
00:09:17,760 --> 00:09:22,740
is<font color="#E5E5E5"> rooted a few things are broken</font>

230
00:09:20,370 --> 00:09:24,930
because you then basically sandbox model

231
00:09:22,740 --> 00:09:27,180
is broken and you can<font color="#CCCCCC"> easily access the</font>

232
00:09:24,930 --> 00:09:29,880
file in the user names in the<font color="#E5E5E5"> password</font>

233
00:09:27,180 --> 00:09:32,160
while you<font color="#E5E5E5"> have to decrypt it but most of</font>

234
00:09:29,880 --> 00:09:33,900
the time the key is inside the app so

235
00:09:32,160 --> 00:09:36,600
it's not a big<font color="#E5E5E5"> issue to decrypt</font><font color="#CCCCCC"> the</font>

236
00:09:33,900 --> 00:09:38,970
<font color="#E5E5E5">master passer and so on so</font><font color="#CCCCCC"> all our texts</font>

237
00:09:36,600 --> 00:09:42,030
we<font color="#E5E5E5"> mentioned are based on know who these</font>

238
00:09:38,970 --> 00:09:43,560
devices good so let's<font color="#E5E5E5"> talk a little bit</font>

239
00:09:42,030 --> 00:09:45,930
of a few attack vectors which will

240
00:09:43,560 --> 00:09:48,390
explain first attack vector is<font color="#CCCCCC"> a</font>

241
00:09:45,930 --> 00:09:50,609
<font color="#E5E5E5">scenario so you barely found the device</font>

242
00:09:48,390 --> 00:09:52,980
which has<font color="#CCCCCC"> a passcode manager on it and</font>

243
00:09:50,610 --> 00:09:55,320
you're<font color="#CCCCCC"> able</font><font color="#E5E5E5"> to log into the device and</font>

244
00:09:52,980 --> 00:09:58,470
then is it possible<font color="#CCCCCC"> once you plug it</font>

245
00:09:55,320 --> 00:10:01,589
into your<font color="#E5E5E5"> PC and connect to the device</font>

246
00:09:58,470 --> 00:10:03,600
is it possible to<font color="#E5E5E5"> extract for instance</font>

247
00:10:01,589 --> 00:10:05,370
<font color="#CCCCCC">the secured master password or a</font>

248
00:10:03,600 --> 00:10:08,610
database files which are should be

249
00:10:05,370 --> 00:10:12,080
protected first attack vector second one

250
00:10:08,610 --> 00:10:14,610
what happens if I sit in between the

251
00:10:12,080 --> 00:10:17,010
<font color="#CCCCCC">pastor master password and the internet</font>

252
00:10:14,610 --> 00:10:20,520
is it possible<font color="#CCCCCC"> to interceptor to get</font><font color="#E5E5E5"> the</font>

253
00:10:17,010 --> 00:10:22,589
credentials third one<font color="#CCCCCC"> well if I somehow</font>

254
00:10:20,520 --> 00:10:24,810
intercepted communication between these

255
00:10:22,589 --> 00:10:28,860
two apps is it<font color="#CCCCCC"> possible to</font><font color="#E5E5E5"> get it and</font>

256
00:10:24,810 --> 00:10:30,959
last under least arm if I if I'm able to

257
00:10:28,860 --> 00:10:33,060
<font color="#E5E5E5">install an additional application on</font>

258
00:10:30,960 --> 00:10:35,760
your device is it<font color="#E5E5E5"> possible that this</font>

259
00:10:33,060 --> 00:10:38,160
additional application excesses or<font color="#E5E5E5"> gets</font>

260
00:10:35,760 --> 00:10:40,410
the master password and the credentials

261
00:10:38,160 --> 00:10:42,660
so these<font color="#E5E5E5"> are the four different attack</font>

262
00:10:40,410 --> 00:10:44,339
vectors what we<font color="#CCCCCC"> looked into well in</font><font color="#E5E5E5"> this</font>

263
00:10:42,660 --> 00:10:47,400
talk we will<font color="#E5E5E5"> not cover all of them</font>

264
00:10:44,339 --> 00:10:48,839
because<font color="#E5E5E5"> due to time restrictions but in</font>

265
00:10:47,400 --> 00:10:51,150
total we found 26 different

266
00:10:48,839 --> 00:10:53,130
vulnerabilities and in the following<font color="#E5E5E5"> we</font>

267
00:10:51,150 --> 00:10:55,319
will explain<font color="#CCCCCC"> five in more detail and</font>

268
00:10:53,130 --> 00:10:57,360
later on we give an overview what kind

269
00:10:55,320 --> 00:10:58,420
of vendors we attacked<font color="#E5E5E5"> what kind of</font>

270
00:10:57,360 --> 00:11:00,240
vendors

271
00:10:58,420 --> 00:11:02,110
what kind of issues we found in them

272
00:11:00,240 --> 00:11:04,360
<font color="#E5E5E5">okay so let's start with the</font><font color="#CCCCCC"> first</font>

273
00:11:02,110 --> 00:11:05,980
scenarios so basically intercepting the

274
00:11:04,360 --> 00:11:07,990
communication between these two guys

275
00:11:05,980 --> 00:11:09,639
with<font color="#E5E5E5"> the attack vector that you</font>

276
00:11:07,990 --> 00:11:11,230
specially install an additional

277
00:11:09,639 --> 00:11:14,589
applications or is it<font color="#CCCCCC"> possible to</font><font color="#E5E5E5"> access</font>

278
00:11:11,230 --> 00:11:16,690
it for<font color="#E5E5E5"> this scenario i will explain two</font>

279
00:11:14,589 --> 00:11:18,579
different kind of attacks first<font color="#E5E5E5"> it's</font>

280
00:11:16,690 --> 00:11:20,260
<font color="#E5E5E5">manual fillings or manually filling</font>

281
00:11:18,579 --> 00:11:22,388
their credentials from the password

282
00:11:20,260 --> 00:11:24,610
manager at into your<font color="#CCCCCC"> Twitter application</font>

283
00:11:22,389 --> 00:11:26,790
for instance and automatically fillings

284
00:11:24,610 --> 00:11:29,410
<font color="#CCCCCC">I would explain this in a second</font>

285
00:11:26,790 --> 00:11:31,149
manually ceiling so the scenario is like

286
00:11:29,410 --> 00:11:33,730
this you have<font color="#E5E5E5"> your password manager at</font>

287
00:11:31,149 --> 00:11:35,230
on the left here's a Twitter application

288
00:11:33,730 --> 00:11:37,420
for instance and these<font color="#E5E5E5"> are</font><font color="#CCCCCC"> the</font>

289
00:11:35,230 --> 00:11:39,880
credentials of the Twitter what you do

290
00:11:37,420 --> 00:11:42,219
as a user you do a<font color="#CCCCCC"> right click if your</font>

291
00:11:39,880 --> 00:11:44,079
copy on a password manager and then you

292
00:11:42,220 --> 00:11:46,199
for<font color="#E5E5E5"> instance click on the password do a</font>

293
00:11:44,079 --> 00:11:48,550
right click and you paste it so

294
00:11:46,199 --> 00:11:50,380
generally stuff how does it work in

295
00:11:48,550 --> 00:11:52,359
<font color="#CCCCCC">android while you have a clipboard and</font>

296
00:11:50,380 --> 00:11:54,550
most of the password manager eps made

297
00:11:52,360 --> 00:11:56,829
use of the clipboard so they store it on

298
00:11:54,550 --> 00:11:58,420
the once you copy it<font color="#E5E5E5"> they store it on a</font>

299
00:11:56,829 --> 00:12:01,000
clipboard and save it on a clipboard and

300
00:11:58,420 --> 00:12:03,130
then they read it from<font color="#CCCCCC"> the clipboard let</font>

301
00:12:01,000 --> 00:12:05,529
me look at this we probably already see

302
00:12:03,130 --> 00:12:08,320
what's the problem the<font color="#CCCCCC"> problem is dead</font>

303
00:12:05,529 --> 00:12:09,730
in<font color="#E5E5E5"> android every application can read</font>

304
00:12:08,320 --> 00:12:11,920
from the clipboard without any

305
00:12:09,730 --> 00:12:13,360
permission so this means you can write

306
00:12:11,920 --> 00:12:15,339
an application and wants<font color="#E5E5E5"> to copy</font>

307
00:12:13,360 --> 00:12:18,100
something to a clipboard you can read it

308
00:12:15,339 --> 00:12:21,130
and here we<font color="#CCCCCC"> go and that's basically the</font>

309
00:12:18,100 --> 00:12:23,680
problem<font color="#E5E5E5"> and in most of the apps we</font>

310
00:12:21,130 --> 00:12:25,990
looked into basically they had all the

311
00:12:23,680 --> 00:12:27,760
same problem<font color="#E5E5E5"> well</font><font color="#CCCCCC"> i would say</font><font color="#E5E5E5"> even worse</font>

312
00:12:25,990 --> 00:12:30,940
<font color="#E5E5E5">because there are also some benign</font>

313
00:12:27,760 --> 00:12:33,010
application that make use of the clicker

314
00:12:30,940 --> 00:12:34,899
functionality due to internal

315
00:12:33,010 --> 00:12:37,000
functionality of the apertures nothing

316
00:12:34,899 --> 00:12:39,250
to do with this so it might be<font color="#E5E5E5"> the case</font>

317
00:12:37,000 --> 00:12:41,740
that there are already applications out

318
00:12:39,250 --> 00:12:43,120
there that copy data from the<font color="#E5E5E5"> clipboard</font>

319
00:12:41,740 --> 00:12:45,100
and send it to<font color="#E5E5E5"> the infinite and</font>

320
00:12:43,120 --> 00:12:49,180
basically they steal your<font color="#E5E5E5"> data and</font>

321
00:12:45,100 --> 00:12:51,339
without any purpose<font color="#CCCCCC"> every second</font>

322
00:12:49,180 --> 00:12:53,410
scenario since this manual copying is

323
00:12:51,339 --> 00:12:55,990
not cool for<font color="#E5E5E5"> the user right he wants to</font>

324
00:12:53,410 --> 00:12:57,699
be more should<font color="#E5E5E5"> be more convenient and so</font>

325
00:12:55,990 --> 00:13:00,430
let's automatically<font color="#E5E5E5"> fills the</font>

326
00:12:57,699 --> 00:13:02,290
credentials so how does this<font color="#E5E5E5"> work so you</font>

327
00:13:00,430 --> 00:13:04,689
basically open your<font color="#E5E5E5"> Twitter application</font>

328
00:13:02,290 --> 00:13:06,459
and it should<font color="#CCCCCC"> be magically insert your</font>

329
00:13:04,690 --> 00:13:08,079
credentials because you're too lazy to

330
00:13:06,459 --> 00:13:09,729
do a<font color="#E5E5E5"> right click and a left click in it</font>

331
00:13:08,079 --> 00:13:10,760
and again but how does<font color="#E5E5E5"> it work in</font>

332
00:13:09,730 --> 00:13:13,010
<font color="#CCCCCC">android because</font><font color="#E5E5E5"> in n</font>

333
00:13:10,760 --> 00:13:15,350
these two applications running its own

334
00:13:13,010 --> 00:13:18,080
sandbox<font color="#E5E5E5"> so it's not usually not possible</font>

335
00:13:15,350 --> 00:13:20,540
to whatever put something in a field in

336
00:13:18,080 --> 00:13:23,720
another application or vice versa so

337
00:13:20,540 --> 00:13:26,209
it's part usually not possible so how do

338
00:13:23,720 --> 00:13:28,580
they<font color="#E5E5E5"> do this but the one possibilities</font>

339
00:13:26,210 --> 00:13:30,440
of<font color="#E5E5E5"> so-called accessibility service it's</font>

340
00:13:28,580 --> 00:13:32,120
I explain in a second so an

341
00:13:30,440 --> 00:13:34,820
accessibility service so<font color="#CCCCCC"> you have your</font>

342
00:13:32,120 --> 00:13:36,800
password manager application and you add

343
00:13:34,820 --> 00:13:39,410
an additional services so called

344
00:13:36,800 --> 00:13:42,170
accessibility service and this service

345
00:13:39,410 --> 00:13:43,969
is integrated into<font color="#E5E5E5"> your app and for</font>

346
00:13:42,170 --> 00:13:45,740
<font color="#E5E5E5">instance once you open the Twitter</font>

347
00:13:43,970 --> 00:13:48,500
application and you click<font color="#E5E5E5"> on the</font>

348
00:13:45,740 --> 00:13:50,900
password field it automatically triggers

349
00:13:48,500 --> 00:13:52,820
a cold egg in the accessibility

350
00:13:50,900 --> 00:13:54,920
servicing hey now they use a click<font color="#CCCCCC"> on</font>

351
00:13:52,820 --> 00:13:58,040
the password in this app and you can

352
00:13:54,920 --> 00:13:59,689
also fill or add some data into it so

353
00:13:58,040 --> 00:14:02,000
why<font color="#E5E5E5"> is this the case because I said it's</font>

354
00:13:59,690 --> 00:14:04,040
usually not possible so I have a quote

355
00:14:02,000 --> 00:14:06,590
from the Android developers saying yet

356
00:14:04,040 --> 00:14:07,760
though this accessibility service is an

357
00:14:06,590 --> 00:14:10,550
application that provides the user

358
00:14:07,760 --> 00:14:12,410
interface enhancement to assist users

359
00:14:10,550 --> 00:14:14,750
with disabilities that makes more sense

360
00:14:12,410 --> 00:14:17,329
right and users who are driving<font color="#CCCCCC"> at</font>

361
00:14:14,750 --> 00:14:20,020
taking care of young child and very loud

362
00:14:17,330 --> 00:14:23,930
party so we like the last something yes

363
00:14:20,020 --> 00:14:25,640
and that makes<font color="#E5E5E5"> sense so they come up</font>

364
00:14:23,930 --> 00:14:27,680
with<font color="#CCCCCC"> this accessibility service you to</font>

365
00:14:25,640 --> 00:14:29,810
<font color="#E5E5E5">people with disabilities to make it</font>

366
00:14:27,680 --> 00:14:31,790
easier for them to interact<font color="#E5E5E5"> with yet but</font>

367
00:14:29,810 --> 00:14:33,859
<font color="#CCCCCC">when we read this everything fits</font>

368
00:14:31,790 --> 00:14:36,140
perfectly to the password manager apps

369
00:14:33,860 --> 00:14:38,450
right now<font color="#CCCCCC"> obviously not so they make</font>

370
00:14:36,140 --> 00:14:41,870
daily abuse this thing and make use of

371
00:14:38,450 --> 00:14:44,050
it<font color="#CCCCCC"> a debit</font><font color="#E5E5E5"> question is now so we now</font>

372
00:14:41,870 --> 00:14:46,700
know that it's possible<font color="#E5E5E5"> to identify</font>

373
00:14:44,050 --> 00:14:48,560
fields in another application but how do

374
00:14:46,700 --> 00:14:50,540
you<font color="#E5E5E5"> know automatically that these</font>

375
00:14:48,560 --> 00:14:53,689
credentials for instance should be

376
00:14:50,540 --> 00:14:55,880
passed into the<font color="#E5E5E5"> Twitter application so</font>

377
00:14:53,690 --> 00:14:57,620
<font color="#E5E5E5">Twitter Francis has conduct rated on</font>

378
00:14:55,880 --> 00:15:00,830
Android as a package name a unique

379
00:14:57,620 --> 00:15:03,530
identification of the app so how do you

380
00:15:00,830 --> 00:15:05,120
do this well they sort some application

381
00:15:03,530 --> 00:15:06,920
person i sheelane might be a cool idea

382
00:15:05,120 --> 00:15:09,800
let's look into this a little bit and

383
00:15:06,920 --> 00:15:11,930
when you<font color="#E5E5E5"> add a new password credentials</font>

384
00:15:09,800 --> 00:15:13,760
where you add the name and you add the

385
00:15:11,930 --> 00:15:15,770
website twitter com user name and

386
00:15:13,760 --> 00:15:17,420
password and there is the<font color="#E5E5E5"> Twitter</font>

387
00:15:15,770 --> 00:15:19,100
application it starts at Commodore

388
00:15:17,420 --> 00:15:21,199
<font color="#E5E5E5">Twitter on Android right so there's a</font>

389
00:15:19,100 --> 00:15:23,750
<font color="#CCCCCC">real cool right so there is a connection</font>

390
00:15:21,200 --> 00:15:26,240
in this URL and the<font color="#E5E5E5"> package name so</font>

391
00:15:23,750 --> 00:15:30,110
let's make use of this so what they did

392
00:15:26,240 --> 00:15:32,030
is they while they post page of your

393
00:15:30,110 --> 00:15:34,520
twitter com then they reverse it<font color="#CCCCCC"> to</font>

394
00:15:32,030 --> 00:15:37,610
twitter com then they check it is it

395
00:15:34,520 --> 00:15:43,069
matches with<font color="#CCCCCC"> comrade</font><font color="#E5E5E5"> Twitter oh this</font>

396
00:15:37,610 --> 00:15:45,200
combat<font color="#E5E5E5"> Twitter all right edge again it's</font>

397
00:15:43,070 --> 00:15:48,590
called<font color="#E5E5E5"> a Twitter and then it checks if</font>

398
00:15:45,200 --> 00:15:50,510
<font color="#E5E5E5">there if the current activity has a text</font>

399
00:15:48,590 --> 00:15:52,730
password field in it and if<font color="#E5E5E5"> this</font><font color="#CCCCCC"> is the</font>

400
00:15:50,510 --> 00:15:55,189
case it automatically injects<font color="#E5E5E5"> the</font>

401
00:15:52,730 --> 00:15:59,960
credentials so looks good right but<font color="#E5E5E5"> what</font>

402
00:15:55,190 --> 00:16:01,940
<font color="#E5E5E5">happens if if they only check for the</font>

403
00:15:59,960 --> 00:16:03,770
prefix though they only check for

404
00:16:01,940 --> 00:16:05,480
<font color="#E5E5E5">comrade Twitter and not of the equals</font>

405
00:16:03,770 --> 00:16:07,130
but<font color="#CCCCCC"> this</font><font color="#E5E5E5"> means i can come up with</font>

406
00:16:05,480 --> 00:16:09,230
navigation windows conduct reddit or

407
00:16:07,130 --> 00:16:11,050
Twitter leaks<font color="#E5E5E5"> Condor Twitter or check in</font>

408
00:16:09,230 --> 00:16:14,210
a box whatever I write an application

409
00:16:11,050 --> 00:16:16,400
with a password feeling it I open it and

410
00:16:14,210 --> 00:16:18,890
it magically inserts the credentials of

411
00:16:16,400 --> 00:16:30,890
Twitter and for this we also have a demo

412
00:16:18,890 --> 00:16:33,890
or short demo oh yeah demo time<font color="#E5E5E5"> okay so</font>

413
00:16:30,890 --> 00:16:37,130
this is the demo well this<font color="#CCCCCC"> is the smart</font>

414
00:16:33,890 --> 00:16:39,800
<font color="#E5E5E5">device I run it now so now we open this</font>

415
00:16:37,130 --> 00:16:41,450
password manager application we enter

416
00:16:39,800 --> 00:16:50,180
our super secure master password

417
00:16:41,450 --> 00:16:52,880
obviously to unlock our safe there<font color="#E5E5E5"> is</font>

418
00:16:50,180 --> 00:16:54,410
our<font color="#E5E5E5"> Twitter credentials more random</font>

419
00:16:52,880 --> 00:16:59,150
credentials you can use them they don't

420
00:16:54,410 --> 00:17:02,030
<font color="#E5E5E5">work and now we</font><font color="#CCCCCC"> see that we will add</font>

421
00:16:59,150 --> 00:17:04,129
this a super<font color="#E5E5E5"> cool feature of</font>

422
00:17:02,030 --> 00:17:05,899
automatically filling the credentials

423
00:17:04,130 --> 00:17:08,510
for this we<font color="#CCCCCC"> have to</font><font color="#E5E5E5"> register the</font>

424
00:17:05,900 --> 00:17:11,660
accessibility service it's in<font color="#E5E5E5"> the</font>

425
00:17:08,510 --> 00:17:15,140
settings this activate autofill you see

426
00:17:11,660 --> 00:17:17,120
it here while it adds a master password

427
00:17:15,140 --> 00:17:19,100
and now it says he and you need to

428
00:17:17,119 --> 00:17:20,839
register the accessibility service now

429
00:17:19,099 --> 00:17:23,629
we are basically<font color="#CCCCCC"> an Android in</font><font color="#E5E5E5"> Android</font>

430
00:17:20,839 --> 00:17:26,240
you have to explicitly register this

431
00:17:23,630 --> 00:17:28,730
guide the accessibility service which is

432
00:17:26,240 --> 00:17:30,350
<font color="#CCCCCC">a good thing and now you're enabling the</font>

433
00:17:28,730 --> 00:17:32,540
accessibility surgeon now<font color="#CCCCCC"> android is</font>

434
00:17:30,350 --> 00:17:33,919
saying a hey<font color="#E5E5E5"> good are you sure because</font>

435
00:17:32,540 --> 00:17:35,600
ever wants to

436
00:17:33,920 --> 00:17:37,640
your actions and retrieve your window

437
00:17:35,600 --> 00:17:39,199
content and the user says<font color="#CCCCCC"> he obviously</font>

438
00:17:37,640 --> 00:17:41,870
<font color="#E5E5E5">yes because I would like</font><font color="#CCCCCC"> to have this</font>

439
00:17:39,200 --> 00:17:48,530
autofill feature and he clicks on<font color="#CCCCCC"> okay</font>

440
00:17:41,870 --> 00:17:50,750
and<font color="#E5E5E5"> then it says while we go back and as</font>

441
00:17:48,530 --> 00:17:54,620
yeah now you're good and if everything

442
00:17:50,750 --> 00:17:56,240
<font color="#CCCCCC">looks perfect so that's it and what we</font>

443
00:17:54,620 --> 00:17:59,600
do in<font color="#CCCCCC"> the next that we open our</font>

444
00:17:56,240 --> 00:18:03,140
application because this is now really

445
00:17:59,600 --> 00:18:05,449
fast so we will click on this or this

446
00:18:03,140 --> 00:18:07,310
application which is<font color="#E5E5E5"> our fake combo</font>

447
00:18:05,450 --> 00:18:10,190
traded or<font color="#E5E5E5"> Twitter leaks application and</font>

448
00:18:07,310 --> 00:18:12,379
what we see here when we click on it it

449
00:18:10,190 --> 00:18:14,810
immediately acts as an insert the

450
00:18:12,380 --> 00:18:17,240
<font color="#CCCCCC">credentials so this means it access be</font>

451
00:18:14,810 --> 00:18:19,909
the username the password and just that

452
00:18:17,240 --> 00:18:22,910
you feed we bathe this is a top notation

453
00:18:19,910 --> 00:18:25,430
so we added the the real password here

454
00:18:22,910 --> 00:18:27,020
so this shows basically you can come up

455
00:18:25,430 --> 00:18:30,080
with an application and it will

456
00:18:27,020 --> 00:18:31,790
automatically insert it we can come this

457
00:18:30,080 --> 00:18:33,320
is only for demo purpose we also wrote

458
00:18:31,790 --> 00:18:36,050
an application which is<font color="#E5E5E5"> completely</font>

459
00:18:33,320 --> 00:18:38,540
transparent so you don't see<font color="#E5E5E5"> that you</font>

460
00:18:36,050 --> 00:18:40,340
enter anything is entered a basically

461
00:18:38,540 --> 00:18:42,200
runs in the background and we can steal

462
00:18:40,340 --> 00:18:44,570
the credentials from you just if you

463
00:18:42,200 --> 00:18:46,370
click on application it shows the

464
00:18:44,570 --> 00:18:47,780
credentials then you go back and then

465
00:18:46,370 --> 00:18:49,939
you whatever open that game or<font color="#E5E5E5"> whatever</font>

466
00:18:47,780 --> 00:18:54,889
so we show that this shows that is

467
00:18:49,940 --> 00:18:57,170
possible now let's<font color="#E5E5E5"> switch here and I'll</font>

468
00:18:54,890 --> 00:19:00,910
now well hand over Tris person who will

469
00:18:57,170 --> 00:19:05,750
continue<font color="#E5E5E5"> with the rest of other text</font>

470
00:19:00,910 --> 00:19:08,330
<font color="#CCCCCC">okay secret already introduced our met</font>

471
00:19:05,750 --> 00:19:11,450
hacker models the next attack<font color="#CCCCCC"> i want to</font>

472
00:19:08,330 --> 00:19:13,790
show is so cold even made<font color="#E5E5E5"> a tech just</font>

473
00:19:11,450 --> 00:19:17,240
assume you lost your device or someone

474
00:19:13,790 --> 00:19:19,340
founded or steals your device and<font color="#E5E5E5"> is</font>

475
00:19:17,240 --> 00:19:21,770
able to bypass your screen locks and

476
00:19:19,340 --> 00:19:24,320
swipe pattern whatever and he can

477
00:19:21,770 --> 00:19:26,180
connect your device to the<font color="#E5E5E5"> pc easy</font>

478
00:19:24,320 --> 00:19:29,000
process is it possible to<font color="#E5E5E5"> read out</font>

479
00:19:26,180 --> 00:19:31,580
somehow the protected password<font color="#E5E5E5"> database</font>

480
00:19:29,000 --> 00:19:35,750
password container or just get the

481
00:19:31,580 --> 00:19:37,850
master<font color="#E5E5E5"> password and</font><font color="#CCCCCC"> for this scenario at</font>

482
00:19:35,750 --> 00:19:40,520
first introduced some android<font color="#CCCCCC"> functions</font>

483
00:19:37,850 --> 00:19:43,219
I don't know is everybody aware of the

484
00:19:40,520 --> 00:19:45,050
Android debug bridge so I<font color="#E5E5E5"> don't have to</font>

485
00:19:43,220 --> 00:19:47,680
<font color="#E5E5E5">go</font><font color="#CCCCCC"> in detail with</font><font color="#E5E5E5"> the debug bridge oh</font>

486
00:19:45,050 --> 00:19:50,330
that's great<font color="#E5E5E5"> okay everybody knows also</font>

487
00:19:47,680 --> 00:19:52,940
if I have<font color="#CCCCCC"> access to the device</font><font color="#E5E5E5"> I can</font>

488
00:19:50,330 --> 00:19:56,149
enable this developer function and the

489
00:19:52,940 --> 00:19:59,930
cool thing is Android debug also allows

490
00:19:56,150 --> 00:20:01,820
the so-called backup function this means

491
00:19:59,930 --> 00:20:04,340
if<font color="#CCCCCC"> the application have the backup</font>

492
00:20:01,820 --> 00:20:07,220
feature enabled I can make a backup of

493
00:20:04,340 --> 00:20:09,980
<font color="#CCCCCC">the top of the target package and the</font>

494
00:20:07,220 --> 00:20:12,740
backup is considering the whole private

495
00:20:09,980 --> 00:20:17,060
data folder so let's everything<font color="#E5E5E5"> what is</font>

496
00:20:12,740 --> 00:20:20,150
in the sandbox is we can be<font color="#CCCCCC"> backup then</font>

497
00:20:17,060 --> 00:20:22,580
this back up slack is enabled after

498
00:20:20,150 --> 00:20:24,620
after<font color="#E5E5E5"> I'm sorry after the back up there</font>

499
00:20:22,580 --> 00:20:27,050
are tools just to transform the back up

500
00:20:24,620 --> 00:20:29,659
into an archives we can extract it and

501
00:20:27,050 --> 00:20:31,700
there we for instance found an<font color="#E5E5E5"> XML file</font>

502
00:20:29,660 --> 00:20:33,890
containing the master password or master

503
00:20:31,700 --> 00:20:37,280
secret in plain text that<font color="#E5E5E5"> was the whole</font>

504
00:20:33,890 --> 00:20:39,650
protection and the idea is this this app

505
00:20:37,280 --> 00:20:40,899
will not really require any backup flex

506
00:20:39,650 --> 00:20:42,470
because it has a back-end

507
00:20:40,900 --> 00:20:45,440
synchronization they do their own

508
00:20:42,470 --> 00:20:47,630
backups but this is one very easy<font color="#E5E5E5"> way to</font>

509
00:20:45,440 --> 00:20:49,490
bypass the sandbox and as you can see

510
00:20:47,630 --> 00:20:51,800
the master password is there and in

511
00:20:49,490 --> 00:20:55,130
plain text just make a cat<font color="#E5E5E5"> and you have</font>

512
00:20:51,800 --> 00:20:59,770
full access to the encrypted password

513
00:20:55,130 --> 00:21:04,700
container the next<font color="#CCCCCC"> text scenario is</font>

514
00:20:59,770 --> 00:21:07,370
considering more on the outside so I can

515
00:21:04,700 --> 00:21:13,070
for instance trick the user to install a

516
00:21:07,370 --> 00:21:14,840
malicious app<font color="#E5E5E5"> or I as a I when I when I</font>

517
00:21:13,070 --> 00:21:17,000
steal the phone can install a malicious

518
00:21:14,840 --> 00:21:21,340
effort whatever so the idea is just to

519
00:21:17,000 --> 00:21:23,780
bring upon the on the target device and

520
00:21:21,340 --> 00:21:26,659
before I explain the attack in detail I

521
00:21:23,780 --> 00:21:29,750
want to make a short side note I<font color="#E5E5E5"> think</font>

522
00:21:26,660 --> 00:21:32,780
everybody knows the the browser problem

523
00:21:29,750 --> 00:21:35,720
here on Android you have a lot of

524
00:21:32,780 --> 00:21:38,060
different<font color="#E5E5E5"> browser type and as already</font>

525
00:21:35,720 --> 00:21:41,000
mentioned or secret explains we have our

526
00:21:38,060 --> 00:21:43,760
password manager and now the idea<font color="#E5E5E5"> of the</font>

527
00:21:41,000 --> 00:21:46,190
<font color="#E5E5E5">type of manager is somehow to also</font>

528
00:21:43,760 --> 00:21:49,640
enable this auto<font color="#E5E5E5"> login feature for</font><font color="#CCCCCC"> the</font>

529
00:21:46,190 --> 00:21:52,570
for the<font color="#E5E5E5"> browsers so how can we fill the</font>

530
00:21:49,640 --> 00:21:55,850
log in or<font color="#CCCCCC"> the password post forum</font>

531
00:21:52,570 --> 00:21:57,590
automatically in different browsers the

532
00:21:55,850 --> 00:21:59,969
best<font color="#E5E5E5"> solution would be when we have up</font>

533
00:21:57,590 --> 00:22:03,060
each browser provides some some

534
00:21:59,970 --> 00:22:06,510
common<font color="#E5E5E5"> api which we can use to inject</font>

535
00:22:03,060 --> 00:22:10,020
our content but<font color="#E5E5E5"> the problem is there is</font>

536
00:22:06,510 --> 00:22:12,240
no such ipi so the developer of such

537
00:22:10,020 --> 00:22:15,180
<font color="#E5E5E5">password manager apps come out with a</font>

538
00:22:12,240 --> 00:22:18,000
new idea what about if<font color="#CCCCCC"> we build our own</font>

539
00:22:15,180 --> 00:22:21,450
browser so here<font color="#E5E5E5"> we see we have our</font>

540
00:22:18,000 --> 00:22:24,180
password manager and now they built

541
00:22:21,450 --> 00:22:26,970
their own browser the problem is the<font color="#E5E5E5"> own</font>

542
00:22:24,180 --> 00:22:29,400
browser is part of the application so

543
00:22:26,970 --> 00:22:32,070
this means the browser is running in the

544
00:22:29,400 --> 00:22:35,550
same process as<font color="#E5E5E5"> the application and is</font>

545
00:22:32,070 --> 00:22:38,370
also<font color="#E5E5E5"> part of the same sandbox yet once</font>

546
00:22:35,550 --> 00:22:40,470
<font color="#E5E5E5">which now is because the browser is part</font>

547
00:22:38,370 --> 00:22:44,189
of the application the passive manager

548
00:22:40,470 --> 00:22:46,440
completely can control this browser so

549
00:22:44,190 --> 00:22:49,710
you<font color="#CCCCCC"> can see the autofill is for instance</font>

550
00:22:46,440 --> 00:22:53,940
<font color="#E5E5E5">working but the question</font><font color="#CCCCCC"> is now can we</font>

551
00:22:49,710 --> 00:22:56,310
abuse this browser somehow to to bypass

552
00:22:53,940 --> 00:22:58,410
the sandboxing and access the local app

553
00:22:56,310 --> 00:23:00,560
folder to get for instance stored

554
00:22:58,410 --> 00:23:05,730
credentials master password and whatever

555
00:23:00,560 --> 00:23:07,830
so at first a few details<font color="#E5E5E5"> about the</font>

556
00:23:05,730 --> 00:23:09,930
browser how are they design has already

557
00:23:07,830 --> 00:23:11,760
<font color="#E5E5E5">mentioned they are part of yep so</font>

558
00:23:09,930 --> 00:23:15,960
they're running in the same process<font color="#CCCCCC"> or</font>

559
00:23:11,760 --> 00:23:18,480
they are part of the sandbox<font color="#E5E5E5"> the most</font>

560
00:23:15,960 --> 00:23:20,370
browsers use the web view API and a

561
00:23:18,480 --> 00:23:23,580
special<font color="#E5E5E5"> feature of the</font><font color="#CCCCCC"> depth</font><font color="#E5E5E5"> you</font><font color="#CCCCCC"> ap is</font>

562
00:23:20,370 --> 00:23:26,520
it supports also files<font color="#E5E5E5"> yuri's you have</font>

563
00:23:23,580 --> 00:23:28,260
to disable or enable them what happens

564
00:23:26,520 --> 00:23:31,889
now is the file you<font color="#E5E5E5"> read support is</font>

565
00:23:28,260 --> 00:23:35,190
enabled you<font color="#CCCCCC"> will see tier imagine this</font>

566
00:23:31,890 --> 00:23:38,160
is our browser bar and now we enter some

567
00:23:35,190 --> 00:23:39,750
URL we know the package name<font color="#E5E5E5"> and you</font>

568
00:23:38,160 --> 00:23:42,690
know the data follows that the package

569
00:23:39,750 --> 00:23:44,490
folder<font color="#E5E5E5"> you know</font><font color="#CCCCCC"> also some some XML file</font>

570
00:23:42,690 --> 00:23:47,010
name of the application because we could

571
00:23:44,490 --> 00:23:48,600
reverse continue or analyze it and when

572
00:23:47,010 --> 00:23:51,629
we enter this in the browser the app

573
00:23:48,600 --> 00:23:54,209
listen to all the sentox content here

574
00:23:51,630 --> 00:23:56,820
you see a more sophisticated<font color="#CCCCCC"> XML file</font>

575
00:23:54,210 --> 00:23:59,940
for instance<font color="#E5E5E5"> the cement values and</font>

576
00:23:56,820 --> 00:24:03,899
attributes are<font color="#CCCCCC"> obfuscate adjustin me5</font>

577
00:23:59,940 --> 00:24:07,950
and what you can see<font color="#CCCCCC"> here is our master</font>

578
00:24:03,900 --> 00:24:09,360
password or our pin it base64 encrypted

579
00:24:07,950 --> 00:24:11,810
so we cannot read it but it's also

580
00:24:09,360 --> 00:24:14,810
really encrypted with an additional key

581
00:24:11,810 --> 00:24:16,870
the question is now for decrypting the

582
00:24:14,810 --> 00:24:19,820
master<font color="#E5E5E5"> password we need the key and</font>

583
00:24:16,870 --> 00:24:22,760
where<font color="#E5E5E5"> can we get this key it is very</font>

584
00:24:19,820 --> 00:24:25,970
easy we<font color="#CCCCCC"> just look into the</font><font color="#E5E5E5"> code because</font>

585
00:24:22,760 --> 00:24:27,640
the key is hard-coded in the application

586
00:24:25,970 --> 00:24:30,410
this one here is a more sophisticated

587
00:24:27,640 --> 00:24:32,510
they have obviated the key by splitting

588
00:24:30,410 --> 00:24:34,730
in up<font color="#CCCCCC"> in two</font><font color="#E5E5E5"> parts but we found</font>

589
00:24:32,510 --> 00:24:37,040
different other password managers who

590
00:24:34,730 --> 00:24:40,730
had just<font color="#E5E5E5"> a complete string which they</font>

591
00:24:37,040 --> 00:24:42,560
use as encryption key so as you<font color="#E5E5E5"> saw we</font>

592
00:24:40,730 --> 00:24:44,930
get access to the web view so<font color="#CCCCCC"> we could</font>

593
00:24:42,560 --> 00:24:47,090
read out the stored master password use

594
00:24:44,930 --> 00:24:51,140
the encryption<font color="#CCCCCC"> key the algorithm and</font>

595
00:24:47,090 --> 00:24:53,240
decrypt the master password so another

596
00:24:51,140 --> 00:24:55,550
attack a secret also<font color="#E5E5E5"> mentioned</font><font color="#CCCCCC"> now</font><font color="#E5E5E5"> we</font>

597
00:24:53,240 --> 00:24:57,890
<font color="#E5E5E5">get access to that master password files</font>

598
00:24:55,550 --> 00:24:59,930
or database but there's also we found

599
00:24:57,890 --> 00:25:02,900
<font color="#CCCCCC">one application who thought</font><font color="#E5E5E5"> okay we make</font>

600
00:24:59,930 --> 00:25:06,200
them a bit sophisticated we put it in

601
00:25:02,900 --> 00:25:09,080
the account manager what is the account

602
00:25:06,200 --> 00:25:13,300
manager the account manager is some some

603
00:25:09,080 --> 00:25:16,280
centralized class provided by<font color="#E5E5E5"> Android</font>

604
00:25:13,300 --> 00:25:19,159
it's based on a simple SQLite database

605
00:25:16,280 --> 00:25:21,649
and<font color="#E5E5E5"> it's restricted with system</font>

606
00:25:19,160 --> 00:25:25,370
permission this means snow application

607
00:25:21,650 --> 00:25:29,120
can access this database directly for

608
00:25:25,370 --> 00:25:32,350
writing reading or interacting with this

609
00:25:29,120 --> 00:25:37,489
database<font color="#E5E5E5"> Google especially prepare</font>

610
00:25:32,350 --> 00:25:40,100
offers the special API and each app can

611
00:25:37,490 --> 00:25:44,090
use this API despite of the using there

612
00:25:40,100 --> 00:25:46,250
is<font color="#E5E5E5"> still a separation because it cannot</font>

613
00:25:44,090 --> 00:25:49,909
be that application a can read out

614
00:25:46,250 --> 00:25:54,830
something from application be here is

615
00:25:49,910 --> 00:25:56,960
<font color="#E5E5E5">also shorts citation from the</font><font color="#CCCCCC"> Google</font>

616
00:25:54,830 --> 00:25:59,210
developer website which really says you

617
00:25:56,960 --> 00:26:01,640
shouldn't pass the user actual password

618
00:25:59,210 --> 00:26:05,120
to the account manager you just should

619
00:26:01,640 --> 00:26:07,340
use some special token so to sum this up

620
00:26:05,120 --> 00:26:10,699
don't store your master password or your

621
00:26:07,340 --> 00:26:14,629
credentials in the account manager guess

622
00:26:10,700 --> 00:26:17,150
what happens<font color="#E5E5E5"> I'll show ultimo then after</font>

623
00:26:14,630 --> 00:26:19,150
that<font color="#E5E5E5"> I will explain the demo in details</font>

624
00:26:17,150 --> 00:26:22,660
because I<font color="#CCCCCC"> think</font><font color="#E5E5E5"> there will be then a few</font>

625
00:26:19,150 --> 00:26:22,660
<font color="#E5E5E5">few questions</font>

626
00:26:26,309 --> 00:26:37,418
<font color="#CCCCCC">okay so you see again</font><font color="#E5E5E5"> our smartphone at</font>

627
00:26:33,009 --> 00:26:42,269
first we start the application<font color="#E5E5E5"> I locked</font>

628
00:26:37,419 --> 00:26:42,269
in with my secure master password

629
00:26:49,800 --> 00:26:54,360
as you could see that the password<font color="#E5E5E5"> was</font>

630
00:26:52,180 --> 00:26:57,040
very complex and<font color="#E5E5E5"> hard to remember I</font>

631
00:26:54,360 --> 00:26:59,320
activate some some convenient option

632
00:26:57,040 --> 00:27:01,330
it's called the pin lock<font color="#CCCCCC"> code so i can</font>

633
00:26:59,320 --> 00:27:03,990
set a pin lock so<font color="#CCCCCC"> i</font><font color="#E5E5E5"> don't have to</font>

634
00:27:01,330 --> 00:27:08,139
remember to this complex password and

635
00:27:03,990 --> 00:27:11,320
they also offer me to to somehow store

636
00:27:08,140 --> 00:27:15,000
the master password to get<font color="#E5E5E5"> access again</font>

637
00:27:11,320 --> 00:27:21,030
when something happens so the remember

638
00:27:15,000 --> 00:27:21,030
function here in the corner<font color="#E5E5E5"> is activated</font>

639
00:27:28,830 --> 00:27:35,549
so when I start now the application you

640
00:27:31,649 --> 00:27:39,029
will see my my new pin is working one

641
00:27:35,549 --> 00:27:40,279
two<font color="#CCCCCC"> three</font><font color="#E5E5E5"> four so I can also use the pen</font>

642
00:27:39,029 --> 00:27:43,700
instead of the master password

643
00:27:40,279 --> 00:27:43,700
everything is<font color="#CCCCCC"> fine</font>

644
00:27:51,760 --> 00:28:01,810
okay now you see<font color="#E5E5E5"> in this corner a short</font>

645
00:27:55,780 --> 00:28:06,970
script which is accessing this central

646
00:28:01,810 --> 00:28:09,460
database i already mentioned yeah<font color="#E5E5E5"> okay a</font>

647
00:28:06,970 --> 00:28:12,250
few explanation I other as I mentioned

648
00:28:09,460 --> 00:28:14,560
<font color="#CCCCCC">the attack is working without root now</font>

649
00:28:12,250 --> 00:28:16,540
you think I'm cheating because you need

650
00:28:14,560 --> 00:28:19,270
root access to this but this root access

651
00:28:16,540 --> 00:28:24,040
is just for you<font color="#E5E5E5"> to show or to get access</font>

652
00:28:19,270 --> 00:28:27,660
<font color="#E5E5E5">to this database that you see okay where</font>

653
00:28:24,040 --> 00:28:30,700
is<font color="#CCCCCC"> it</font><font color="#E5E5E5"> I hear our application stores</font>

654
00:28:27,660 --> 00:28:33,760
somehow encrypted and encoded the

655
00:28:30,700 --> 00:28:39,450
database the the<font color="#E5E5E5"> master password in the</font>

656
00:28:33,760 --> 00:28:39,450
database so when you now continue<font color="#E5E5E5"> I</font>

657
00:28:42,480 --> 00:28:48,420
install my attacker app and the attack

658
00:28:45,640 --> 00:28:54,040
is based on a so called residual attack

659
00:28:48,420 --> 00:28:56,140
so after installing the application you

660
00:28:54,040 --> 00:28:58,960
see this<font color="#E5E5E5"> is</font><font color="#CCCCCC"> just for for demo purpose</font>

661
00:28:56,140 --> 00:29:02,410
and with this application<font color="#CCCCCC"> I can also</font>

662
00:28:58,960 --> 00:29:07,960
register an account where I store my

663
00:29:02,410 --> 00:29:10,390
information in the account manager you

664
00:29:07,960 --> 00:29:12,880
see here i will explain it in a few

665
00:29:10,390 --> 00:29:14,980
minutes here suddenly happened some some

666
00:29:12,880 --> 00:29:19,480
exceptions this is the output of an

667
00:29:14,980 --> 00:29:21,750
exception uid something went wrong now

668
00:29:19,480 --> 00:29:25,180
when we continue what<font color="#E5E5E5"> i'm doing now i'm</font>

669
00:29:21,750 --> 00:29:27,550
uninstalling our target application so

670
00:29:25,180 --> 00:29:29,350
<font color="#E5E5E5">you saw</font><font color="#CCCCCC"> the stash line</font><font color="#E5E5E5"> i was configuring</font>

671
00:29:27,550 --> 00:29:33,250
setting my master password everything

672
00:29:29,350 --> 00:29:36,040
and now i'm installing it well now i can

673
00:29:33,250 --> 00:29:39,660
do i click on<font color="#E5E5E5"> extract the password as</font>

674
00:29:36,040 --> 00:29:47,010
you can see here my application here

675
00:29:39,660 --> 00:29:47,010
shows now the same as on the left side

676
00:29:52,380 --> 00:29:57,480
and when i<font color="#CCCCCC"> click on decrypt i could be</font>

677
00:29:55,410 --> 00:29:59,700
cryptid the quest is now<font color="#CCCCCC"> okay i have</font>

678
00:29:57,480 --> 00:30:03,380
extracted it somehow why could<font color="#E5E5E5"> i also</font>

679
00:29:59,700 --> 00:30:07,320
decrypted it the same solution as before

680
00:30:03,380 --> 00:30:11,460
password display the key encryption key

681
00:30:07,320 --> 00:30:22,050
is part of the application<font color="#E5E5E5"> okay what's</font>

682
00:30:11,460 --> 00:30:25,020
now the secret behind this attack so

683
00:30:22,050 --> 00:30:28,610
again you see the<font color="#E5E5E5"> android system our</font>

684
00:30:25,020 --> 00:30:31,050
account manager<font color="#E5E5E5"> api our account database</font>

685
00:30:28,610 --> 00:30:34,020
so now when we install an application

686
00:30:31,050 --> 00:30:36,240
and the application wants to store some

687
00:30:34,020 --> 00:30:38,580
information<font color="#E5E5E5"> in this database it needs</font><font color="#CCCCCC"> a</font>

688
00:30:36,240 --> 00:30:40,440
<font color="#CCCCCC">so called account type you can</font><font color="#E5E5E5"> imagine</font>

689
00:30:38,580 --> 00:30:45,060
this account type of some kind of

690
00:30:40,440 --> 00:30:48,560
primary key for the database so the data

691
00:30:45,060 --> 00:30:51,450
are stored<font color="#E5E5E5"> in the database also Android</font>

692
00:30:48,560 --> 00:30:54,690
stores the<font color="#CCCCCC"> UID so it's not located for</font>

693
00:30:51,450 --> 00:30:57,350
this UID and this kind of primary key

694
00:30:54,690 --> 00:31:00,930
this stored information are associated

695
00:30:57,350 --> 00:31:05,520
now we see our attacker up our attacker

696
00:31:00,930 --> 00:31:07,980
app defines the same account type as our

697
00:31:05,520 --> 00:31:10,620
target application when you want to

698
00:31:07,980 --> 00:31:13,530
install<font color="#CCCCCC"> it you saw there is a collusion</font>

699
00:31:10,620 --> 00:31:16,379
this was the exception you saw in<font color="#E5E5E5"> the</font>

700
00:31:13,530 --> 00:31:18,270
demo because the<font color="#E5E5E5"> UID</font><font color="#CCCCCC"> Android recognize</font>

701
00:31:16,380 --> 00:31:20,400
the<font color="#E5E5E5"> Cray the UID is not matching it's</font>

702
00:31:18,270 --> 00:31:23,340
already blocked you you cannot access

703
00:31:20,400 --> 00:31:26,250
this information but what<font color="#E5E5E5"> happens now if</font>

704
00:31:23,340 --> 00:31:29,070
we uninstall the dash line the<font color="#CCCCCC"> android</font>

705
00:31:26,250 --> 00:31:31,380
system says<font color="#CCCCCC"> okay i remove it but give me</font>

706
00:31:29,070 --> 00:31:35,220
a moment there's someone<font color="#E5E5E5"> who still is</font>

707
00:31:31,380 --> 00:31:37,500
using this primary key they do<font color="#E5E5E5"> not check</font>

708
00:31:35,220 --> 00:31:39,480
the UID they just checked the<font color="#E5E5E5"> primary</font>

709
00:31:37,500 --> 00:31:41,220
key answer k oh I cannot remove this

710
00:31:39,480 --> 00:31:43,650
information because there's still some

711
00:31:41,220 --> 00:31:46,890
applications which has registered this

712
00:31:43,650 --> 00:31:48,810
primary key and now we just simply can

713
00:31:46,890 --> 00:31:51,090
access and read out this information

714
00:31:48,810 --> 00:31:53,460
<font color="#CCCCCC">from the</font><font color="#E5E5E5"> system database and this is</font>

715
00:31:51,090 --> 00:31:57,959
completely working without any root

716
00:31:53,460 --> 00:32:00,240
access or something here<font color="#E5E5E5"> you saw just</font>

717
00:31:57,960 --> 00:32:02,550
the codec<font color="#CCCCCC"> stroke it's just a few lines</font>

718
00:32:00,240 --> 00:32:05,340
<font color="#E5E5E5">you saw you build a new instance of the</font>

719
00:32:02,550 --> 00:32:08,520
account<font color="#E5E5E5"> some email address this is the</font>

720
00:32:05,340 --> 00:32:12,300
account type or mentions primary key

721
00:32:08,520 --> 00:32:14,160
catch the exception and this is just<font color="#CCCCCC"> the</font>

722
00:32:12,300 --> 00:32:15,899
reading out to<font color="#CCCCCC"> identify your account</font>

723
00:32:14,160 --> 00:32:17,910
again by the account type and get<font color="#E5E5E5"> all</font>

724
00:32:15,900 --> 00:32:21,840
<font color="#E5E5E5">your information so just a few lines of</font>

725
00:32:17,910 --> 00:32:25,560
code<font color="#E5E5E5"> I was testing</font><font color="#CCCCCC"> this code or this</font>

726
00:32:21,840 --> 00:32:27,389
exploits on Android version 6 or Android

727
00:32:25,560 --> 00:32:33,419
M I don't know if it's<font color="#E5E5E5"> already fixed on</font>

728
00:32:27,390 --> 00:32:35,790
Android 7 but I had no new device so now

729
00:32:33,420 --> 00:32:40,010
this were all demos and just wanted to

730
00:32:35,790 --> 00:32:43,530
list a few further let's<font color="#E5E5E5"> say sales or</font>

731
00:32:40,010 --> 00:32:46,310
critical witnesses we found in different

732
00:32:43,530 --> 00:32:49,590
password managers the first one is just

733
00:32:46,310 --> 00:32:51,810
custom crypto I don't know the developer

734
00:32:49,590 --> 00:32:54,300
<font color="#CCCCCC">Scott's AES is not so good</font><font color="#E5E5E5"> I more</font>

735
00:32:51,810 --> 00:32:59,030
sophisticated I built my own crypto it

736
00:32:54,300 --> 00:33:02,000
was based on just some it's all or

737
00:32:59,030 --> 00:33:06,720
character flipping so you can imagine

738
00:33:02,000 --> 00:33:08,880
broken by design some used a es but in

739
00:33:06,720 --> 00:33:12,120
ECB mode and the problem<font color="#E5E5E5"> is if you use</font>

740
00:33:08,880 --> 00:33:14,100
<font color="#CCCCCC">it for database use the ECB mode imagine</font>

741
00:33:12,120 --> 00:33:16,800
you store your passwords and some users

742
00:33:14,100 --> 00:33:19,350
have for two or three service the same

743
00:33:16,800 --> 00:33:21,810
<font color="#CCCCCC">password this means with the ESB</font><font color="#E5E5E5"> mode</font>

744
00:33:19,350 --> 00:33:24,300
each password is encrypted the same way

745
00:33:21,810 --> 00:33:27,030
if not an attacker somehow gets or

746
00:33:24,300 --> 00:33:29,280
breaks one password he can also derive

747
00:33:27,030 --> 00:33:33,450
the other passwords form from the<font color="#E5E5E5"> other</font>

748
00:33:29,280 --> 00:33:35,879
services also very funny thing is

749
00:33:33,450 --> 00:33:38,460
pd-self implemented browsers I show you

750
00:33:35,880 --> 00:33:40,890
do not handle or consider consider

751
00:33:38,460 --> 00:33:43,950
subdomains this means if you store

752
00:33:40,890 --> 00:33:46,770
credentials for instance for the page my

753
00:33:43,950 --> 00:33:48,270
page wordpress com you can store the

754
00:33:46,770 --> 00:33:50,940
credentials but<font color="#E5E5E5"> then if you go to</font>

755
00:33:48,270 --> 00:33:53,760
fishing dot wordpress com he

756
00:33:50,940 --> 00:33:55,950
automatically also fills the credential

757
00:33:53,760 --> 00:34:00,980
in such a<font color="#CCCCCC"> post forum because</font><font color="#E5E5E5"> he cannot</font>

758
00:33:55,950 --> 00:34:00,980
determine or resource the supplements

759
00:34:01,070 --> 00:34:07,020
<font color="#CCCCCC">browsers also data leakage problems in</font>

760
00:34:04,110 --> 00:34:10,489
force HTTP traffic or use google search

761
00:34:07,020 --> 00:34:13,020
just<font color="#E5E5E5"> in plain text and</font><font color="#CCCCCC"> one one</font>

762
00:34:10,489 --> 00:34:16,759
application<font color="#CCCCCC"> also we did not show it in</font>

763
00:34:13,020 --> 00:34:18,429
detail but they also did<font color="#CCCCCC"> not rely on</font>

764
00:34:16,760 --> 00:34:22,300
HTTPS or

765
00:34:18,429 --> 00:34:26,319
less they implemented their own crypto

766
00:34:22,300 --> 00:34:28,869
transport protocol and as the custom

767
00:34:26,319 --> 00:34:32,319
<font color="#CCCCCC">cryptos such this protocol was also</font>

768
00:34:28,869 --> 00:34:35,290
broken by design and could be possible

769
00:34:32,319 --> 00:34:38,829
just to man in the middle<font color="#E5E5E5"> and if drop</font>

770
00:34:35,290 --> 00:34:41,859
the protocol and sniffly complete has a

771
00:34:38,829 --> 00:34:46,210
password container synchronization to

772
00:34:41,859 --> 00:34:48,549
the back end just a short slide with a

773
00:34:46,210 --> 00:34:51,010
few recommendation and improvements to

774
00:34:48,550 --> 00:34:53,500
the password developers Android provides

775
00:34:51,010 --> 00:34:58,450
a key store and the new version is also

776
00:34:53,500 --> 00:35:00,609
combined with the hardware system or TPM

777
00:34:58,450 --> 00:35:02,740
model so if you want<font color="#CCCCCC"> to store</font>

778
00:35:00,609 --> 00:35:05,410
credentials the secret master password

779
00:35:02,740 --> 00:35:09,729
why ever put it in the<font color="#CCCCCC"> keister</font><font color="#E5E5E5"> day it's</font>

780
00:35:05,410 --> 00:35:13,808
better but the overall recommendation is

781
00:35:09,730 --> 00:35:15,940
don't store the master password when you

782
00:35:13,809 --> 00:35:18,460
do crypto don't put any string in the

783
00:35:15,940 --> 00:35:20,950
application do some key stretching okie

784
00:35:18,460 --> 00:35:24,160
derivation the<font color="#CCCCCC"> Android API provides the</font>

785
00:35:20,950 --> 00:35:26,618
TV<font color="#CCCCCC"> kdf to function it's not the fastest</font>

786
00:35:24,160 --> 00:35:28,089
but for instance facebook also offers a

787
00:35:26,619 --> 00:35:31,059
good crypto library it's called

788
00:35:28,089 --> 00:35:34,660
concealed they also offer<font color="#E5E5E5"> pbk</font><font color="#CCCCCC"> tf2</font><font color="#E5E5E5"> it's</font>

789
00:35:31,059 --> 00:35:37,900
around thinking time faster and also

790
00:35:34,660 --> 00:35:43,049
uses a more secure hash algorithm than

791
00:35:37,900 --> 00:35:43,049
the Android API but do keep stretching

792
00:35:43,079 --> 00:35:49,420
avoid hard-coded<font color="#E5E5E5"> Keith and I think I</font>

793
00:35:46,990 --> 00:35:51,970
don't have to say any more and when

794
00:35:49,420 --> 00:35:55,450
you're using AES for instance database

795
00:35:51,970 --> 00:36:00,009
encryption or file encryption use a good

796
00:35:55,450 --> 00:36:03,430
crypto mode like CBC and the GCM and do

797
00:36:00,010 --> 00:36:06,579
not abuse the account manager so here

798
00:36:03,430 --> 00:36:09,700
you see now a list or<font color="#E5E5E5"> of a few of all</font>

799
00:36:06,579 --> 00:36:11,280
findings as you<font color="#E5E5E5"> see this was the table</font>

800
00:36:09,700 --> 00:36:14,319
<font color="#E5E5E5">from the beginning the different</font>

801
00:36:11,280 --> 00:36:17,559
password managers here again the

802
00:36:14,319 --> 00:36:20,109
different witnesses and vulnerability we

803
00:36:17,559 --> 00:36:23,440
found the first one was the master pin

804
00:36:20,109 --> 00:36:25,690
so in this line and all these<font color="#E5E5E5"> apps was</font>

805
00:36:23,440 --> 00:36:28,750
<font color="#CCCCCC">across</font><font color="#E5E5E5"> we were able to somehow get and</font>

806
00:36:25,690 --> 00:36:31,420
decrypt the storm at the password this

807
00:36:28,750 --> 00:36:32,260
eps had hard-coded keys that we were

808
00:36:31,420 --> 00:36:34,660
able to some

809
00:36:32,260 --> 00:36:36,940
bypass the<font color="#E5E5E5"> sandbox without any roots</font>

810
00:36:34,660 --> 00:36:39,879
these are over<font color="#CCCCCC"> different side-channel</font>

811
00:36:36,940 --> 00:36:42,250
attacks like Clifford sniffing or some

812
00:36:39,880 --> 00:36:44,230
other derivation here this<font color="#CCCCCC"> app's had</font>

813
00:36:42,250 --> 00:36:46,870
self implemented browser which

814
00:36:44,230 --> 00:36:49,420
completely ignored subdomains whyever

815
00:36:46,870 --> 00:36:52,170
this browser had data leakage problem

816
00:36:49,420 --> 00:36:55,480
one application just<font color="#E5E5E5"> encrypted</font><font color="#CCCCCC"> the</font>

817
00:36:52,170 --> 00:36:57,730
password database<font color="#E5E5E5"> only partially so</font>

818
00:36:55,480 --> 00:37:00,580
there was no full encryption and this

819
00:36:57,730 --> 00:37:02,320
one was the broken synchronization where

820
00:37:00,580 --> 00:37:05,850
the<font color="#CCCCCC"> developers thought okay we can do it</font>

821
00:37:02,320 --> 00:37:08,770
<font color="#E5E5E5">better than pls you see we have a lot of</font>

822
00:37:05,850 --> 00:37:12,850
crosses we did not achieve a full bingo

823
00:37:08,770 --> 00:37:15,009
but it was enough all findings advisory

824
00:37:12,850 --> 00:37:18,040
sync details you can<font color="#E5E5E5"> find here under</font>

825
00:37:15,010 --> 00:37:20,370
this link when<font color="#E5E5E5"> we put all the security</font>

826
00:37:18,040 --> 00:37:25,870
advisories which we<font color="#CCCCCC"> sent</font><font color="#E5E5E5"> to the</font>

827
00:37:20,370 --> 00:37:27,850
manufacturer on our website yes we go to

828
00:37:25,870 --> 00:37:30,700
the<font color="#CCCCCC"> end because the beer is getting warm</font>

829
00:37:27,850 --> 00:37:33,580
a short summary so we showed several

830
00:37:30,700 --> 00:37:37,240
waves or techniques to attack the

831
00:37:33,580 --> 00:37:38,710
application without any roots a few<font color="#E5E5E5"> of</font>

832
00:37:37,240 --> 00:37:42,160
them or the most of them were just

833
00:37:38,710 --> 00:37:44,620
<font color="#E5E5E5">possible because</font><font color="#CCCCCC"> the application</font><font color="#E5E5E5"> provide</font>

834
00:37:42,160 --> 00:37:46,180
some<font color="#E5E5E5"> convenient function and this is</font>

835
00:37:44,620 --> 00:37:49,509
convenience or comfort function just

836
00:37:46,180 --> 00:37:53,200
weakens or destroy the complete security

837
00:37:49,510 --> 00:37:55,690
concept and the other<font color="#E5E5E5"> already mentioned</font>

838
00:37:53,200 --> 00:37:57,759
all findings were reported on the

839
00:37:55,690 --> 00:38:03,570
responsible disclosure and I think

840
00:37:57,760 --> 00:38:06,310
nearly all except one are already fixed

841
00:38:03,570 --> 00:38:08,740
so can only say thank you for your

842
00:38:06,310 --> 00:38:11,650
<font color="#CCCCCC">attention if you have any</font><font color="#E5E5E5"> questions feel</font>

843
00:38:08,740 --> 00:38:13,830
free to ask if<font color="#E5E5E5"> you're thirsty take some</font>

844
00:38:11,650 --> 00:38:13,830
beer

845
00:38:17,119 --> 00:38:21,599
thank you very much well done for having

846
00:38:19,589 --> 00:38:24,630
the fastest applause of all the<font color="#CCCCCC"> talk so</font>

847
00:38:21,599 --> 00:38:26,250
far by just offering free food any

848
00:38:24,630 --> 00:38:30,539
questions from the floor before we get

849
00:38:26,250 --> 00:38:36,960
to the beer<font color="#CCCCCC"> wow I'm surprised yeah there</font>

850
00:38:30,539 --> 00:38:39,630
is thank you for<font color="#E5E5E5"> the talk have you</font>

851
00:38:36,960 --> 00:38:41,700
<font color="#E5E5E5">encountered any password manager that</font>

852
00:38:39,630 --> 00:38:43,559
tries<font color="#CCCCCC"> to protect the data even despite</font>

853
00:38:41,700 --> 00:38:45,538
route to text because there are counter

854
00:38:43,559 --> 00:38:48,539
measures that can do<font color="#E5E5E5"> it sorry I didn't</font>

855
00:38:45,539 --> 00:38:49,710
did you understand it only<font color="#CCCCCC"> part of the</font>

856
00:38:48,539 --> 00:38:52,319
demons they were saying that they

857
00:38:49,710 --> 00:38:55,020
implemented some ways to circumvent our

858
00:38:52,319 --> 00:38:57,180
<font color="#CCCCCC">text no no how he found any password</font>

859
00:38:55,020 --> 00:38:59,038
manager that tries to<font color="#E5E5E5"> protect its data</font>

860
00:38:57,180 --> 00:39:01,770
<font color="#E5E5E5">even in the presence of a root access</font>

861
00:38:59,039 --> 00:39:04,140
even yeah we're apart and not really

862
00:39:01,770 --> 00:39:07,049
protect what they were for instance last

863
00:39:04,140 --> 00:39:10,410
hearth informs the user he made a small

864
00:39:07,049 --> 00:39:12,900
window and says you recognize your

865
00:39:10,410 --> 00:39:15,240
device is rooted please don't store the

866
00:39:12,900 --> 00:39:16,950
password but<font color="#CCCCCC"> then you say</font><font color="#E5E5E5"> okay despite</font>

867
00:39:15,240 --> 00:39:20,129
of<font color="#CCCCCC"> whose</font><font color="#E5E5E5"> I want to store</font><font color="#CCCCCC"> it</font><font color="#E5E5E5"> to</font><font color="#CCCCCC"> Sir it</font>

868
00:39:16,950 --> 00:39:22,980
but there's no really<font color="#E5E5E5"> let's say active</font>

869
00:39:20,130 --> 00:39:25,140
protection against<font color="#E5E5E5"> routing or for</font>

870
00:39:22,980 --> 00:39:27,630
instance do not start the application or

871
00:39:25,140 --> 00:39:30,328
preventing the put presenting password

872
00:39:27,630 --> 00:39:33,569
storing or whatever some some recognizes

873
00:39:30,329 --> 00:39:37,049
but they<font color="#E5E5E5"> its then I use a decision how</font>

874
00:39:33,569 --> 00:39:39,900
to handle the warning and how good was

875
00:39:37,049 --> 00:39:42,930
the occupation if there was any on those

876
00:39:39,900 --> 00:39:45,180
products there were no really

877
00:39:42,930 --> 00:39:48,180
obfuscation was just the ProGuard

878
00:39:45,180 --> 00:39:50,339
shrinking shortening the name but<font color="#CCCCCC"> if you</font>

879
00:39:48,180 --> 00:39:52,589
for instance whatever<font color="#CCCCCC"> decks card or some</font>

880
00:39:50,339 --> 00:39:56,640
really hardening framework there was no

881
00:39:52,589 --> 00:39:59,130
no education this was very<font color="#E5E5E5"> easy some for</font>

882
00:39:56,640 --> 00:40:01,529
instance<font color="#CCCCCC"> the the demo which store the</font>

883
00:39:59,130 --> 00:40:03,359
game I show them the demo video the

884
00:40:01,529 --> 00:40:06,510
dashed line they had the encryption<font color="#E5E5E5"> part</font>

885
00:40:03,359 --> 00:40:09,598
<font color="#E5E5E5">in native but this is also just security</font>

886
00:40:06,510 --> 00:40:12,329
by obscurity so you can also reverse the

887
00:40:09,599 --> 00:40:14,069
native part in this case as<font color="#CCCCCC"> to say was a</font>

888
00:40:12,329 --> 00:40:17,400
bit too lazy just<font color="#E5E5E5"> put the library in the</font>

889
00:40:14,069 --> 00:40:22,050
<font color="#E5E5E5">application and used to study</font><font color="#CCCCCC"> key thank</font>

890
00:40:17,400 --> 00:40:26,190
you any other questions

891
00:40:22,050 --> 00:40:30,000
feel free to enjoy it oh<font color="#E5E5E5"> wait which</font><font color="#CCCCCC"> pod</font>

892
00:40:26,190 --> 00:40:32,700
<font color="#E5E5E5">majora you recommend to use is best from</font>

893
00:40:30,000 --> 00:40:34,950
your analysis I to be honest i have a

894
00:40:32,700 --> 00:40:37,410
small self written one where<font color="#E5E5E5"> i can enter</font>

895
00:40:34,950 --> 00:40:40,020
the password based on<font color="#E5E5E5"> an xml file its</font>

896
00:40:37,410 --> 00:40:42,299
encrypted and decrypted no no out of

897
00:40:40,020 --> 00:40:45,480
<font color="#E5E5E5">filling nothing no password remembering</font>

898
00:40:42,300 --> 00:40:49,380
just use a bit<font color="#CCCCCC"> of a yes encryption</font><font color="#E5E5E5"> and</font>

899
00:40:45,480 --> 00:40:50,790
HTML form but if you for instance their

900
00:40:49,380 --> 00:40:52,830
path of energy we showed when you

901
00:40:50,790 --> 00:40:55,140
disable all this convenience feature and

902
00:40:52,830 --> 00:40:58,590
don't store the master password they

903
00:40:55,140 --> 00:41:01,290
should be secure use it just as a

904
00:40:58,590 --> 00:41:04,050
container don't use all this out of

905
00:41:01,290 --> 00:41:07,259
filling shifting storing remembering

906
00:41:04,050 --> 00:41:14,610
shortening<font color="#E5E5E5"> features then then should be</font>

907
00:41:07,260 --> 00:41:16,920
<font color="#CCCCCC">ok thank you</font><font color="#E5E5E5"> any for the question no</font>

908
00:41:14,610 --> 00:41:20,090
well thank you<font color="#E5E5E5"> very much you guys and</font>

909
00:41:16,920 --> 00:41:20,090
make your fun thank you

