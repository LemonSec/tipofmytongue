1
00:00:09,690 --> 00:00:15,299
<font color="#E5E5E5">alright well it might take them a minute</font>

2
00:00:13,320 --> 00:00:20,939
to get the file we had a little bit of

3
00:00:15,299 --> 00:00:24,029
issue with adapters for yield laptop and

4
00:00:20,939 --> 00:00:25,140
<font color="#E5E5E5">iPad stuff's going on so but I don't</font>

5
00:00:24,029 --> 00:00:26,880
want to wait any longer because you guys

6
00:00:25,140 --> 00:00:30,750
are sitting around it's boring just

7
00:00:26,880 --> 00:00:32,460
sitting around right so instead of just

8
00:00:30,750 --> 00:00:36,360
sitting around we can talk<font color="#E5E5E5"> about</font>

9
00:00:32,460 --> 00:00:42,120
something interesting so is anybody here

10
00:00:36,360 --> 00:00:45,899
actually familiar with risk<font color="#E5E5E5"> 5 thank you</font>

11
00:00:42,120 --> 00:00:47,399
i get a little<font color="#CCCCCC"> clicker the problem with</font>

12
00:00:45,899 --> 00:00:48,859
just handing somebody of clickers that

13
00:00:47,399 --> 00:00:52,199
you're presuming they know how it works

14
00:00:48,859 --> 00:00:53,969
right and since<font color="#E5E5E5"> i</font><font color="#CCCCCC"> never used these it's</font>

15
00:00:52,199 --> 00:00:56,640
probably going<font color="#E5E5E5"> to go backwards that kind</font>

16
00:00:53,969 --> 00:00:58,199
of thing all right well I guess we're

17
00:00:56,640 --> 00:00:59,280
live anyway so i guess i can<font color="#E5E5E5"> actually</font>

18
00:00:58,199 --> 00:01:02,218
talk about<font color="#E5E5E5"> what I came to talk</font><font color="#CCCCCC"> about</font>

19
00:00:59,280 --> 00:01:04,080
which is<font color="#E5E5E5"> cool so r isn't raise your hand</font>

20
00:01:02,219 --> 00:01:06,600
in the audience if<font color="#E5E5E5"> you actually know</font>

21
00:01:04,080 --> 00:01:10,229
what risk<font color="#E5E5E5"> 5 is or you are experienced</font>

22
00:01:06,600 --> 00:01:12,390
with it in any way anybody man in the

23
00:01:10,229 --> 00:01:15,480
back another<font color="#E5E5E5"> man in the back anybody in</font>

24
00:01:12,390 --> 00:01:18,930
the middle somebody<font color="#E5E5E5"> up front</font><font color="#CCCCCC"> alright</font>

25
00:01:15,480 --> 00:01:21,330
<font color="#E5E5E5">great well</font><font color="#CCCCCC"> I'm going</font><font color="#E5E5E5"> to show</font><font color="#CCCCCC"> you how</font><font color="#E5E5E5"> to</font>

26
00:01:18,930 --> 00:01:23,220
hack an architecture that nobody

27
00:01:21,330 --> 00:01:26,880
apparently understands or knows which<font color="#CCCCCC"> is</font>

28
00:01:23,220 --> 00:01:28,260
great this is a good thing<font color="#E5E5E5"> because now</font>

29
00:01:26,880 --> 00:01:29,820
you all know how to hack something

30
00:01:28,260 --> 00:01:34,020
that's going<font color="#E5E5E5"> to be really big in your</font>

31
00:01:29,820 --> 00:01:37,020
future which is always fun right<font color="#E5E5E5"> so the</font>

32
00:01:34,020 --> 00:01:41,130
<font color="#E5E5E5">first thing we're going to do see I</font>

33
00:01:37,020 --> 00:01:44,670
<font color="#E5E5E5">don't know how to use the clicker I'm</font>

34
00:01:41,130 --> 00:01:48,690
hitting next does that not a thing this

35
00:01:44,670 --> 00:01:54,690
is it not work yeah you can just you can

36
00:01:48,690 --> 00:01:57,140
just do that for<font color="#CCCCCC"> me if</font><font color="#E5E5E5"> you want did not</font>

37
00:01:54,690 --> 00:01:57,140
sinking

38
00:01:58,750 --> 00:02:07,390
okay all right yeah cool so as<font color="#E5E5E5"> you can</font>

39
00:02:03,910 --> 00:02:09,660
see typical demo time failure is about

40
00:02:07,390 --> 00:02:13,900
to happen so let's<font color="#E5E5E5"> see if</font><font color="#CCCCCC"> that happens</font>

41
00:02:09,660 --> 00:02:16,120
in the<font color="#CCCCCC"> last couple of months</font><font color="#E5E5E5"> really</font>

42
00:02:13,900 --> 00:02:18,340
about last six months I've gotten really

43
00:02:16,120 --> 00:02:21,600
deep into this new architecture called

44
00:02:18,340 --> 00:02:24,040
<font color="#CCCCCC">wrist five and my interest there is</font>

45
00:02:21,600 --> 00:02:27,489
developing new technology that<font color="#CCCCCC"> can be</font>

46
00:02:24,040 --> 00:02:29,920
used in the future of IOT really mobile

47
00:02:27,490 --> 00:02:33,209
and IOT people are using risk<font color="#CCCCCC"> 5 for</font>

48
00:02:29,920 --> 00:02:35,708
everything google internally is

49
00:02:33,209 --> 00:02:38,380
apparently either currently working on

50
00:02:35,709 --> 00:02:41,320
or about to work on some of their

51
00:02:38,380 --> 00:02:43,930
tensorflow processors by architecting a

52
00:02:41,320 --> 00:02:46,540
new risk 5 chip to manage that<font color="#E5E5E5"> stuff</font>

53
00:02:43,930 --> 00:02:48,520
which<font color="#CCCCCC"> is really cool right so internally</font>

54
00:02:46,540 --> 00:02:51,190
Google's<font color="#E5E5E5"> GPUs are apparently currently</font>

55
00:02:48,520 --> 00:02:53,700
some kind<font color="#CCCCCC"> of a Sisk Sisk architecture</font>

56
00:02:51,190 --> 00:02:56,620
but they're custom designed by google

57
00:02:53,700 --> 00:02:58,480
risk 5 being an open architecture allows

58
00:02:56,620 --> 00:03:01,510
them to use something<font color="#E5E5E5"> that standardized</font>

59
00:02:58,480 --> 00:03:03,190
something that's more you know open that

60
00:03:01,510 --> 00:03:05,170
they can build an ecosystem around

61
00:03:03,190 --> 00:03:08,230
especially internally without having to

62
00:03:05,170 --> 00:03:10,690
manage all the internal crust required

63
00:03:08,230 --> 00:03:13,390
of developing your own silicon which is

64
00:03:10,690 --> 00:03:15,040
a huge pain<font color="#E5E5E5"> in the ass right like nobody</font>

65
00:03:13,390 --> 00:03:17,320
wants<font color="#CCCCCC"> to spend a huge amount of time</font>

66
00:03:15,040 --> 00:03:19,060
developing for something that only a few

67
00:03:17,320 --> 00:03:20,829
people are<font color="#E5E5E5"> going to use internally so</font>

68
00:03:19,060 --> 00:03:23,440
switching to risk 5 might<font color="#E5E5E5"> be a really</font>

69
00:03:20,830 --> 00:03:26,560
big deal especially because risk 5 has a

70
00:03:23,440 --> 00:03:29,890
lot<font color="#CCCCCC"> more longevity than other processing</font>

71
00:03:26,560 --> 00:03:34,120
architectures one thing it already has a

72
00:03:29,890 --> 00:03:35,320
definition<font color="#E5E5E5"> for 128 bit computing which</font>

73
00:03:34,120 --> 00:03:37,540
is awesome<font color="#CCCCCC"> right people have been</font>

74
00:03:35,320 --> 00:03:39,940
talking<font color="#E5E5E5"> about 128 bit computing for</font>

75
00:03:37,540 --> 00:03:41,709
quite some time more theorizing what

76
00:03:39,940 --> 00:03:44,049
it's going to be<font color="#E5E5E5"> like well risk 5</font>

77
00:03:41,709 --> 00:03:46,390
already has a<font color="#E5E5E5"> definition of what that</font>

78
00:03:44,049 --> 00:03:48,790
needs to look like<font color="#E5E5E5"> the instruction set</font>

79
00:03:46,390 --> 00:03:50,320
architecture actually specifies what

80
00:03:48,790 --> 00:03:52,560
those instructions should look like and

81
00:03:50,320 --> 00:03:55,420
how they should<font color="#E5E5E5"> be defined within memory</font>

82
00:03:52,560 --> 00:03:57,730
so we have a<font color="#E5E5E5"> really great way of already</font>

83
00:03:55,420 --> 00:04:00,040
having the next generation<font color="#E5E5E5"> of computing</font>

84
00:03:57,730 --> 00:04:04,750
architectures in this new definition<font color="#E5E5E5"> of</font>

85
00:04:00,040 --> 00:04:08,500
a processor so here we're<font color="#E5E5E5"> going to show</font>

86
00:04:04,750 --> 00:04:10,959
a little video of me hacking the current

87
00:04:08,500 --> 00:04:11,950
implementation of risk 5 which basically

88
00:04:10,959 --> 00:04:14,830
proves

89
00:04:11,950 --> 00:04:19,149
the security architecture is still a

90
00:04:14,830 --> 00:04:20,470
little flawed right so<font color="#E5E5E5"> I'll give you</font>

91
00:04:19,149 --> 00:04:23,310
this I'll give you yeah go ahead with

92
00:04:20,470 --> 00:04:26,590
the video I'll give you a play-by-play

93
00:04:23,310 --> 00:04:29,350
after but this<font color="#E5E5E5"> is initially just the</font>

94
00:04:26,590 --> 00:04:31,060
proof of concept so you can see I'm

95
00:04:29,350 --> 00:04:36,850
loading up a virtual machine here Oh

96
00:04:31,060 --> 00:04:38,530
brilliant cool thank you so here we've

97
00:04:36,850 --> 00:04:41,889
got<font color="#E5E5E5"> the virtual machine loaded up in</font>

98
00:04:38,530 --> 00:04:44,710
<font color="#CCCCCC">queue</font><font color="#E5E5E5"> emu</font><font color="#CCCCCC"> I'm logging in I'm executing</font>

99
00:04:41,889 --> 00:04:46,210
my little application from userland so

100
00:04:44,710 --> 00:04:48,130
you can see here all these bites are

101
00:04:46,210 --> 00:04:49,900
being dumped out of memory and they

102
00:04:48,130 --> 00:04:52,960
match<font color="#E5E5E5"> those instructions up there that</font>

103
00:04:49,900 --> 00:04:56,349
<font color="#E5E5E5">I'm highlighting then I execute another</font>

104
00:04:52,960 --> 00:04:59,950
application that overwrites machine code

105
00:04:56,350 --> 00:05:02,290
and now you can<font color="#E5E5E5"> see when I read back</font>

106
00:04:59,950 --> 00:05:05,760
memory all of those bites have been

107
00:05:02,290 --> 00:05:08,770
altered and then I execute the exploit

108
00:05:05,760 --> 00:05:11,380
which actually breaks out of the

109
00:05:08,770 --> 00:05:13,930
privileged mode that linux kernel is

110
00:05:11,380 --> 00:05:16,030
currently executing in and it's

111
00:05:13,930 --> 00:05:18,729
essentially the equivalent of breaking

112
00:05:16,030 --> 00:05:21,219
into<font color="#E5E5E5"> trustzone so if you're familiar</font>

113
00:05:18,729 --> 00:05:26,070
with the ARM architecture you'll know

114
00:05:21,220 --> 00:05:28,510
that basically<font color="#E5E5E5"> the way that it works is</font>

115
00:05:26,070 --> 00:05:30,909
you've got your standard operating

116
00:05:28,510 --> 00:05:33,430
system running<font color="#E5E5E5"> in normal memory and then</font>

117
00:05:30,910 --> 00:05:36,669
you've<font color="#CCCCCC"> got</font><font color="#E5E5E5"> essentially a super-machine</font>

118
00:05:33,430 --> 00:05:38,289
layer instead of an executable code

119
00:05:36,669 --> 00:05:40,659
that's running at a higher<font color="#E5E5E5"> privileged</font>

120
00:05:38,289 --> 00:05:43,360
layer that the supervisor or operating

121
00:05:40,660 --> 00:05:45,039
system cannot touch right so the<font color="#E5E5E5"> Linux</font>

122
00:05:43,360 --> 00:05:47,530
kernel should never ever be able<font color="#E5E5E5"> to</font>

123
00:05:45,039 --> 00:05:50,590
alter memory within<font color="#E5E5E5"> something like a</font>

124
00:05:47,530 --> 00:05:51,960
trust own secure memory area right but

125
00:05:50,590 --> 00:05:56,919
this is the equivalent of doing that

126
00:05:51,960 --> 00:05:59,229
<font color="#E5E5E5">okay so very quickly on me my name is</font>

127
00:05:56,919 --> 00:06:01,000
don bailey that's being my cute little

128
00:05:59,229 --> 00:06:04,870
boy<font color="#CCCCCC"> Pierce who happens to be in</font><font color="#E5E5E5"> the back</font>

129
00:06:01,000 --> 00:06:09,070
there I am a security analyst I've been

130
00:06:04,870 --> 00:06:11,500
doing this for about 17 18 years I was

131
00:06:09,070 --> 00:06:14,620
the<font color="#E5E5E5"> first guy to hack a car back in like</font>

132
00:06:11,500 --> 00:06:16,510
2011 of black hat I've been doing

133
00:06:14,620 --> 00:06:19,479
hardware architecture security for quite

134
00:06:16,510 --> 00:06:21,400
some time I wrote the<font color="#CCCCCC"> GSMA IT security</font>

135
00:06:19,479 --> 00:06:24,430
guidelines if anybody's using that for

136
00:06:21,400 --> 00:06:25,820
defining hardware security that was

137
00:06:24,430 --> 00:06:28,070
written by<font color="#CCCCCC"> myself along with</font>

138
00:06:25,820 --> 00:06:30,170
everybody in the<font color="#CCCCCC"> GSMA we wrote that as a</font>

139
00:06:28,070 --> 00:06:32,120
team it's an excellent<font color="#E5E5E5"> guide if you're</font>

140
00:06:30,170 --> 00:06:35,540
interested in<font color="#CCCCCC"> IT security</font><font color="#E5E5E5"> you</font><font color="#CCCCCC"> should</font>

141
00:06:32,120 --> 00:06:39,470
definitely check<font color="#CCCCCC"> that out more</font>

142
00:06:35,540 --> 00:06:41,750
importantly what<font color="#E5E5E5"> I do is design secure</font>

143
00:06:39,470 --> 00:06:42,830
resilient systems for mobile and IOT and

144
00:06:41,750 --> 00:06:44,320
I mentioned<font color="#CCCCCC"> that earlier that's</font><font color="#E5E5E5"> the</font>

145
00:06:42,830 --> 00:06:46,630
reason<font color="#CCCCCC"> why i'm interested in risk five</font>

146
00:06:44,320 --> 00:06:48,620
so<font color="#CCCCCC"> i spent a</font><font color="#E5E5E5"> lot of time and energy</font>

147
00:06:46,630 --> 00:06:50,630
researching the entire processing

148
00:06:48,620 --> 00:06:52,550
architecture combing through every

149
00:06:50,630 --> 00:06:55,010
<font color="#E5E5E5">single aspect of the processor</font>

150
00:06:52,550 --> 00:06:57,050
definition the<font color="#CCCCCC"> privileged model the</font>

151
00:06:55,010 --> 00:06:59,960
instruction set architecture etc to find

152
00:06:57,050 --> 00:07:01,700
vulnerabilities well what you were what

153
00:06:59,960 --> 00:07:05,000
you<font color="#E5E5E5"> just demoed or what I just demoed</font>

154
00:07:01,700 --> 00:07:07,520
for you is the first and really only

155
00:07:05,000 --> 00:07:09,380
known exploit for the risk 5

156
00:07:07,520 --> 00:07:11,390
architecture currently so for those

157
00:07:09,380 --> 00:07:15,230
wondering there is actually<font color="#CCCCCC"> a chip in</font>

158
00:07:11,390 --> 00:07:17,510
production so<font color="#CCCCCC"> sci-fi the company does</font>

159
00:07:15,230 --> 00:07:21,370
produce in silicon a chip that you can

160
00:07:17,510 --> 00:07:26,990
buy and that's available on the<font color="#CCCCCC"> syfy DH</font>

161
00:07:21,370 --> 00:07:28,760
was the freedom<font color="#E5E5E5"> fe 300 you or something</font>

162
00:07:26,990 --> 00:07:31,490
like that but<font color="#CCCCCC"> basically if you go to the</font>

163
00:07:28,760 --> 00:07:33,320
sci-fi website you can download or all

164
00:07:31,490 --> 00:07:35,690
the open source information about their

165
00:07:33,320 --> 00:07:39,620
board and you can order that demo board

166
00:07:35,690 --> 00:07:41,840
of an actual silicon risk 5 chip for 50

167
00:07:39,620 --> 00:07:45,020
bucks so it's pretty<font color="#CCCCCC"> cost effective</font>

168
00:07:41,840 --> 00:07:48,229
right very cool architecture first

169
00:07:45,020 --> 00:07:50,120
silicon chip made by<font color="#E5E5E5"> sai 5 i've got one</font>

170
00:07:48,230 --> 00:07:52,040
it's a great demo architecture a great

171
00:07:50,120 --> 00:07:54,710
play with they even kind of<font color="#E5E5E5"> built it</font>

172
00:07:52,040 --> 00:07:56,120
similar to<font color="#E5E5E5"> arduino so you can kind of</font>

173
00:07:54,710 --> 00:07:58,280
plug and play you don't have to read all

174
00:07:56,120 --> 00:08:02,090
the manuals<font color="#E5E5E5"> to get code working it's</font>

175
00:07:58,280 --> 00:08:04,250
quite simple so in order to understand

176
00:08:02,090 --> 00:08:05,539
that attack that you just saw on video

177
00:08:04,250 --> 00:08:07,430
you have<font color="#CCCCCC"> to</font><font color="#E5E5E5"> understand the privileged</font>

178
00:08:05,540 --> 00:08:09,940
model and<font color="#CCCCCC"> i mentioned a little bit about</font>

179
00:08:07,430 --> 00:08:12,890
this<font color="#E5E5E5"> right it's very similar kind of</font>

180
00:08:09,940 --> 00:08:14,450
think about<font color="#E5E5E5"> it i would like to think</font>

181
00:08:12,890 --> 00:08:17,630
about<font color="#CCCCCC"> it from</font><font color="#E5E5E5"> the terms of trust own</font>

182
00:08:14,450 --> 00:08:19,340
right so technically<font color="#CCCCCC"> entrust own you</font>

183
00:08:17,630 --> 00:08:22,310
have a separate area of memory that's

184
00:08:19,340 --> 00:08:26,210
<font color="#E5E5E5">quote-unquote secure and code executes</font>

185
00:08:22,310 --> 00:08:29,450
there in risk 5 the current definition

186
00:08:26,210 --> 00:08:32,240
has<font color="#E5E5E5"> four security models right so user</font>

187
00:08:29,450 --> 00:08:33,740
land is typical it's what applications

188
00:08:32,240 --> 00:08:36,349
run and<font color="#CCCCCC"> that's what everybody's used to</font>

189
00:08:33,740 --> 00:08:38,870
and then supervisor is where the<font color="#CCCCCC"> Linux</font>

190
00:08:36,349 --> 00:08:39,110
kernel actually runs or whatever kernel

191
00:08:38,870 --> 00:08:41,240
that

192
00:08:39,110 --> 00:08:43,070
actually executing and then the<font color="#CCCCCC"> next</font>

193
00:08:41,240 --> 00:08:44,750
layer is<font color="#CCCCCC"> the hypervisor layer which is</font>

194
00:08:43,070 --> 00:08:46,459
<font color="#E5E5E5">now going to be deprecated they</font>

195
00:08:44,750 --> 00:08:49,610
initially just kind of said this is what

196
00:08:46,459 --> 00:08:51,319
we think is going to go here but then

197
00:08:49,610 --> 00:08:52,670
they decided you know it's silly just to

198
00:08:51,320 --> 00:08:55,250
have this we<font color="#E5E5E5"> should actually just</font>

199
00:08:52,670 --> 00:08:58,519
implement hypervisor technology in the

200
00:08:55,250 --> 00:09:00,290
<font color="#E5E5E5">machine layer so that in newer versions</font>

201
00:08:58,519 --> 00:09:02,269
of the risk<font color="#E5E5E5"> 5 specification that's going</font>

202
00:09:00,290 --> 00:09:07,819
to be deprecated it's going to be cut

203
00:09:02,269 --> 00:09:09,769
<font color="#CCCCCC">out so what's cool is the machine layer</font>

204
00:09:07,820 --> 00:09:12,290
so the<font color="#CCCCCC"> machine lurkin controls the</font>

205
00:09:09,769 --> 00:09:13,940
entire environment right in the entire

206
00:09:12,290 --> 00:09:16,010
environment being not only a physical

207
00:09:13,940 --> 00:09:19,339
<font color="#E5E5E5">memory but all peripherals in the system</font>

208
00:09:16,010 --> 00:09:20,779
that<font color="#CCCCCC"> you want a supervisor to see and</font>

209
00:09:19,339 --> 00:09:22,730
this is where things get cool right

210
00:09:20,779 --> 00:09:25,430
because you already have<font color="#CCCCCC"> the Machine</font>

211
00:09:22,730 --> 00:09:27,440
layer of instructions executing at the

212
00:09:25,430 --> 00:09:29,660
highest privilege the Linux kernel

213
00:09:27,440 --> 00:09:31,670
operating system can't touch it user

214
00:09:29,660 --> 00:09:34,040
land<font color="#E5E5E5"> can't touch it this is where</font>

215
00:09:31,670 --> 00:09:35,689
hypervisors really should live so that

216
00:09:34,040 --> 00:09:37,189
<font color="#CCCCCC">you can have multiple supervisors</font>

217
00:09:35,690 --> 00:09:39,350
running in different areas of physical

218
00:09:37,190 --> 00:09:41,959
memory that don't impact each other at

219
00:09:39,350 --> 00:09:44,630
all right so there's really no<font color="#E5E5E5"> reason to</font>

220
00:09:41,959 --> 00:09:47,329
<font color="#E5E5E5">have a hypervisor layer you</font><font color="#CCCCCC"> can just</font>

221
00:09:44,630 --> 00:09:50,329
have the<font color="#E5E5E5"> Machine layer highest level of</font>

222
00:09:47,329 --> 00:09:53,420
privilege basically doling out different

223
00:09:50,329 --> 00:09:56,060
privileges and peripherals to whatever

224
00:09:53,420 --> 00:09:58,430
operating system kernel is running right

225
00:09:56,060 --> 00:10:03,079
so the goal for an attacker is obviously

226
00:09:58,430 --> 00:10:06,109
to circumvent this layer model so this

227
00:10:03,079 --> 00:10:09,019
gets really simple right getting from

228
00:10:06,110 --> 00:10:11,420
user land to the<font color="#CCCCCC"> colonel is a total</font>

229
00:10:09,019 --> 00:10:12,890
colonel implementation thing right we

230
00:10:11,420 --> 00:10:15,890
worry about<font color="#E5E5E5"> that at</font><font color="#CCCCCC"> the Linux kernel</font>

231
00:10:12,890 --> 00:10:17,750
layer freebsd kernel layer whatever

232
00:10:15,890 --> 00:10:19,490
you're implementing we<font color="#E5E5E5"> don't really care</font>

233
00:10:17,750 --> 00:10:21,680
<font color="#CCCCCC">about that here because</font><font color="#E5E5E5"> we're attacking</font>

234
00:10:19,490 --> 00:10:23,180
software at that point or at least<font color="#CCCCCC"> the</font>

235
00:10:21,680 --> 00:10:25,250
logic of the software running on a

236
00:10:23,180 --> 00:10:27,800
particular architecture so not my

237
00:10:25,250 --> 00:10:29,380
interest I'm excluding that<font color="#E5E5E5"> from the</font>

238
00:10:27,800 --> 00:10:31,969
security model for simplicity<font color="#E5E5E5"> purposes</font>

239
00:10:29,380 --> 00:10:34,130
the more important<font color="#CCCCCC"> thing is to elevate</font>

240
00:10:31,970 --> 00:10:36,620
privileges from supervisor to hypervisor

241
00:10:34,130 --> 00:10:39,829
or to machine because obviously then you

242
00:10:36,620 --> 00:10:43,160
have rain over the entire system so in

243
00:10:39,829 --> 00:10:44,989
this particular exploit the privileged

244
00:10:43,160 --> 00:10:49,130
architecture of<font color="#E5E5E5"> risk</font><font color="#CCCCCC"> 5 made a really</font>

245
00:10:44,990 --> 00:10:52,110
critical error so it was defined

246
00:10:49,130 --> 00:10:54,060
correctly initially in

247
00:10:52,110 --> 00:10:56,610
that if you're running as the Linux

248
00:10:54,060 --> 00:10:59,880
kernel in a supervisor layer you should

249
00:10:56,610 --> 00:11:01,589
not<font color="#E5E5E5"> be</font><font color="#CCCCCC"> able to access</font><font color="#E5E5E5"> any of the</font>

250
00:10:59,880 --> 00:11:03,120
registers<font color="#CCCCCC"> that are defined for the</font>

251
00:11:01,589 --> 00:11:05,970
<font color="#CCCCCC">Machine layer right those are supposed</font>

252
00:11:03,120 --> 00:11:07,800
to be separate you have supervisor layer

253
00:11:05,970 --> 00:11:09,300
registers I mean you have machine layer

254
00:11:07,800 --> 00:11:11,609
registers and they point to different

255
00:11:09,300 --> 00:11:13,529
things they control different<font color="#E5E5E5"> things so</font>

256
00:11:11,610 --> 00:11:15,829
the supervisor levers layer should never

257
00:11:13,529 --> 00:11:19,200
be able to<font color="#E5E5E5"> touch those registers period</font>

258
00:11:15,829 --> 00:11:21,630
<font color="#CCCCCC">okay so it's really cool about</font><font color="#E5E5E5"> this</font>

259
00:11:19,200 --> 00:11:23,399
exploit and about the<font color="#E5E5E5"> privileged</font>

260
00:11:21,630 --> 00:11:25,410
definition from an attackers point of

261
00:11:23,399 --> 00:11:29,370
view is that they miss one really

262
00:11:25,410 --> 00:11:32,579
critical area of security<font color="#E5E5E5"> and that's the</font>

263
00:11:29,370 --> 00:11:35,160
virtual memory scheme so as everybody in

264
00:11:32,579 --> 00:11:37,890
this room<font color="#E5E5E5"> probably knows when you have</font>

265
00:11:35,160 --> 00:11:40,560
an operating<font color="#CCCCCC"> system the operating system</font>

266
00:11:37,890 --> 00:11:42,449
is required to alter all the page tables

267
00:11:40,560 --> 00:11:45,029
the page table directory all of these

268
00:11:42,450 --> 00:11:46,649
things to control virtual memory for all

269
00:11:45,029 --> 00:11:49,829
applications running in the system as

270
00:11:46,649 --> 00:11:51,899
well<font color="#CCCCCC"> as the kernel that's executing if</font>

271
00:11:49,829 --> 00:11:53,910
the curl needs more memory you<font color="#CCCCCC"> have to</font>

272
00:11:51,899 --> 00:11:56,850
alter the page tables in order to add

273
00:11:53,910 --> 00:12:00,569
new physical regions<font color="#E5E5E5"> on to the page</font>

274
00:11:56,850 --> 00:12:02,220
table directory so now you can map you

275
00:12:00,570 --> 00:12:05,100
know the upper part of memory into this

276
00:12:02,220 --> 00:12:07,019
new page tables and give access to you

277
00:12:05,100 --> 00:12:10,050
know extended heap or something of that

278
00:12:07,019 --> 00:12:12,480
nature right so every<font color="#CCCCCC"> time a new</font><font color="#E5E5E5"> user</font>

279
00:12:10,050 --> 00:12:15,599
land application run you have to you

280
00:12:12,480 --> 00:12:18,839
again alter the page tables to dole out

281
00:12:15,600 --> 00:12:20,490
permissions for those pages access<font color="#CCCCCC"> to</font>

282
00:12:18,839 --> 00:12:23,790
user land applications for those pages

283
00:12:20,490 --> 00:12:25,410
so you know<font color="#E5E5E5"> the TLB and the CPU actually</font>

284
00:12:23,790 --> 00:12:30,269
understand how to translate virtual

285
00:12:25,410 --> 00:12:33,930
memory to physical memory right well the

286
00:12:30,269 --> 00:12:37,500
problem with<font color="#CCCCCC"> that</font><font color="#E5E5E5"> is if at the machine</font>

287
00:12:33,930 --> 00:12:39,269
layer you define what the base address

288
00:12:37,500 --> 00:12:41,670
of the page table is going to be in

289
00:12:39,269 --> 00:12:45,000
physical memory but then you give the

290
00:12:41,670 --> 00:12:48,719
supervisor layer the<font color="#E5E5E5"> privilege to alter</font>

291
00:12:45,000 --> 00:12:53,040
the page tables in memory all I do as an

292
00:12:48,720 --> 00:12:55,380
attacker is what somebody out<font color="#CCCCCC"> there is</font>

293
00:12:53,040 --> 00:12:58,349
thinking it I'm sure<font color="#E5E5E5"> but you essentially</font>

294
00:12:55,380 --> 00:12:59,910
create a new mapping to the physical

295
00:12:58,350 --> 00:13:03,329
region of memory that<font color="#CCCCCC"> the</font><font color="#E5E5E5"> machine</font>

296
00:12:59,910 --> 00:13:05,279
executive code exists create a virtual

297
00:13:03,329 --> 00:13:05,760
mapping for in page tables and then

298
00:13:05,279 --> 00:13:09,150
start

299
00:13:05,760 --> 00:13:13,590
accessing the virtual code right so what

300
00:13:09,150 --> 00:13:16,470
my exploit does is it basically says

301
00:13:13,590 --> 00:13:18,300
<font color="#CCCCCC">okay what's the base</font><font color="#E5E5E5"> physical address of</font>

302
00:13:16,470 --> 00:13:21,210
<font color="#E5E5E5">DRAM on the computer</font><font color="#CCCCCC"> that I'm running</font>

303
00:13:18,300 --> 00:13:24,630
code on because<font color="#E5E5E5"> that base physical</font>

304
00:13:21,210 --> 00:13:28,470
address is where the first executable

305
00:13:24,630 --> 00:13:30,930
piece of code will run on reset so when

306
00:13:28,470 --> 00:13:33,420
the<font color="#CCCCCC"> computer resets or the CPU resets it</font>

307
00:13:30,930 --> 00:13:35,760
says<font color="#CCCCCC"> okay what's the base address for</font>

308
00:13:33,420 --> 00:13:37,560
code that's probably dram what's the

309
00:13:35,760 --> 00:13:42,870
base address and physical memory for

310
00:13:37,560 --> 00:13:45,300
dram 80 000 000 right so it loads code

311
00:13:42,870 --> 00:13:47,040
there from some storage application then

312
00:13:45,300 --> 00:13:49,650
it automatically traps and returns to

313
00:13:47,040 --> 00:13:51,980
that address well now<font color="#E5E5E5"> I know implicitly</font>

314
00:13:49,650 --> 00:13:55,620
where that machine code lies in memory

315
00:13:51,980 --> 00:13:57,270
<font color="#CCCCCC">ok so all</font><font color="#E5E5E5"> I have to do is set up that</font>

316
00:13:55,620 --> 00:13:59,160
virtual mapping for that physical

317
00:13:57,270 --> 00:14:01,290
address because I can't touch<font color="#CCCCCC"> that</font>

318
00:13:59,160 --> 00:14:03,839
physical address myself so I just

319
00:14:01,290 --> 00:14:06,240
<font color="#E5E5E5">created the virtual mapping and now I</font>

320
00:14:03,840 --> 00:14:09,030
can<font color="#E5E5E5"> access that virtual page or that</font>

321
00:14:06,240 --> 00:14:12,780
physical page and I just alter the code

322
00:14:09,030 --> 00:14:15,030
there so now i have governance over

323
00:14:12,780 --> 00:14:16,949
every single<font color="#CCCCCC"> piece of</font><font color="#E5E5E5"> code executed in</font>

324
00:14:15,030 --> 00:14:19,680
the machine layer<font color="#CCCCCC"> i may not be able</font><font color="#E5E5E5"> to</font>

325
00:14:16,950 --> 00:14:22,200
touch those registers directly but<font color="#E5E5E5"> i can</font>

326
00:14:19,680 --> 00:14:25,050
alter every bit of code that's executed

327
00:14:22,200 --> 00:14:26,880
at the machine<font color="#CCCCCC"> privileged layer and that</font>

328
00:14:25,050 --> 00:14:29,430
essentially<font color="#E5E5E5"> allows me to break out of</font>

329
00:14:26,880 --> 00:14:31,620
the supervisor layer and into the

330
00:14:29,430 --> 00:14:34,410
<font color="#E5E5E5">machine layer so that one simple little</font>

331
00:14:31,620 --> 00:14:35,880
bit of logic which is initially<font color="#CCCCCC"> kind of</font>

332
00:14:34,410 --> 00:14:37,800
difficult<font color="#E5E5E5"> to see right when you're</font>

333
00:14:35,880 --> 00:14:40,650
implementing a system like<font color="#CCCCCC"> this because</font>

334
00:14:37,800 --> 00:14:42,839
you know logically the supervisor layer

335
00:14:40,650 --> 00:14:45,329
requires governance over the page tables

336
00:14:42,840 --> 00:14:47,490
but oh the<font color="#E5E5E5"> machine layer requires</font>

337
00:14:45,330 --> 00:14:49,680
physical security in order for it to be

338
00:14:47,490 --> 00:14:51,510
safe in order for to be protected

339
00:14:49,680 --> 00:14:53,670
against higher layers<font color="#E5E5E5"> of memory well</font>

340
00:14:51,510 --> 00:14:56,280
that contention is difficult to deal

341
00:14:53,670 --> 00:14:59,040
with right so now we've proven that

342
00:14:56,280 --> 00:15:01,199
exploitation of that works in order to

343
00:14:59,040 --> 00:15:04,319
get code execution so basically what I

344
00:15:01,200 --> 00:15:05,880
did<font color="#E5E5E5"> and this is how you make it clean</font>

345
00:15:04,320 --> 00:15:10,140
because this is otherwise kind of a

346
00:15:05,880 --> 00:15:11,900
screwy exploit it sounds<font color="#E5E5E5"> simple but when</font>

347
00:15:10,140 --> 00:15:14,670
you actually implement it in practice

348
00:15:11,900 --> 00:15:17,040
it's kind<font color="#CCCCCC"> of a pain in the butt right</font>

349
00:15:14,670 --> 00:15:19,329
because you can't just access the

350
00:15:17,040 --> 00:15:21,339
<font color="#E5E5E5">Machine executable code region in</font>

351
00:15:19,329 --> 00:15:22,929
sorry overriding whatever because most

352
00:15:21,339 --> 00:15:26,470
of<font color="#E5E5E5"> that code</font><font color="#CCCCCC"> is not going</font><font color="#E5E5E5"> to get called</font>

353
00:15:22,929 --> 00:15:28,629
from super supervisor land it's never

354
00:15:26,470 --> 00:15:30,040
going to run or you're going<font color="#E5E5E5"> to try</font><font color="#CCCCCC"> to</font>

355
00:15:28,629 --> 00:15:32,499
<font color="#CCCCCC">you know you're going to recall the</font>

356
00:15:30,040 --> 00:15:34,929
reset cause a panic the CPU is going to

357
00:15:32,499 --> 00:15:36,339
reset back to the initial address but

358
00:15:34,929 --> 00:15:39,339
<font color="#CCCCCC">it's probably</font><font color="#E5E5E5"> going to reload everything</font>

359
00:15:36,339 --> 00:15:41,769
from storage and then start executing

360
00:15:39,339 --> 00:15:43,749
<font color="#CCCCCC">that code again right what you don't</font>

361
00:15:41,769 --> 00:15:47,949
want that's pointless then<font color="#E5E5E5"> you basically</font>

362
00:15:43,749 --> 00:15:50,259
just wasted<font color="#CCCCCC"> the entire exploit so the</font>

363
00:15:47,949 --> 00:15:51,939
clever thing to do or i guess<font color="#E5E5E5"> the</font>

364
00:15:50,259 --> 00:15:57,040
sensible thing to do not<font color="#E5E5E5"> really clever</font>

365
00:15:51,939 --> 00:15:59,738
is to find the<font color="#E5E5E5"> trap address in the</font>

366
00:15:57,040 --> 00:16:02,049
<font color="#E5E5E5">machine layer that says</font><font color="#CCCCCC"> okay when the</font>

367
00:15:59,739 --> 00:16:03,610
<font color="#E5E5E5">supervisor needs the</font><font color="#CCCCCC"> machine layer to do</font>

368
00:16:02,049 --> 00:16:06,519
something it's going to execute<font color="#E5E5E5"> a</font>

369
00:16:03,610 --> 00:16:10,329
supervisor call or in this case risk<font color="#E5E5E5"> 5</font>

370
00:16:06,519 --> 00:16:12,220
language an e call right that's<font color="#E5E5E5"> the</font>

371
00:16:10,329 --> 00:16:13,899
<font color="#E5E5E5">address that you want to overwrite but</font>

372
00:16:12,220 --> 00:16:16,089
you can't override just the base address

373
00:16:13,899 --> 00:16:18,059
of the trap because there's actual real

374
00:16:16,089 --> 00:16:22,029
work that needs to be done at that layer

375
00:16:18,059 --> 00:16:25,569
so instead what<font color="#CCCCCC"> i did i found a stupid</font>

376
00:16:22,029 --> 00:16:28,089
function that actually just didn't need

377
00:16:25,569 --> 00:16:31,209
to be triggered<font color="#CCCCCC"> at all which is the foot</font>

378
00:16:28,089 --> 00:16:32,889
of<font color="#CCCCCC"> the shutdown call so in no instance</font>

379
00:16:31,209 --> 00:16:34,508
am<font color="#E5E5E5"> i going to want to shut the system</font>

380
00:16:32,889 --> 00:16:37,660
down while<font color="#E5E5E5"> i'm trying to exploit it</font>

381
00:16:34,509 --> 00:16:39,519
right never going<font color="#E5E5E5"> to happen it's not</font>

382
00:16:37,660 --> 00:16:43,238
<font color="#E5E5E5">useful to me so</font><font color="#CCCCCC"> i basically</font><font color="#E5E5E5"> just</font>

383
00:16:39,519 --> 00:16:45,850
overwrote the opcodes that perform the

384
00:16:43,239 --> 00:16:48,910
system shutdown and that I performed a

385
00:16:45,850 --> 00:16:50,679
call to the<font color="#E5E5E5"> machine layer to say I want</font>

386
00:16:48,910 --> 00:16:53,980
<font color="#E5E5E5">to shut the system down but actually</font>

387
00:16:50,679 --> 00:16:58,899
it's executing my instructions right so

388
00:16:53,980 --> 00:17:02,559
again the process is virtual map that

389
00:16:58,899 --> 00:17:05,130
physical address of the M call trap<font color="#E5E5E5"> into</font>

390
00:17:02,559 --> 00:17:08,019
my accessible memory it supervisor layer

391
00:17:05,130 --> 00:17:11,470
alter each instruction to do something

392
00:17:08,019 --> 00:17:13,388
useful and then basically flush the TLB

393
00:17:11,470 --> 00:17:16,779
to ensure that<font color="#CCCCCC"> the instructions are now</font>

394
00:17:13,388 --> 00:17:18,969
in<font color="#E5E5E5"> system core and then cause that</font>

395
00:17:16,779 --> 00:17:22,779
machine trap to occur so that i can get

396
00:17:18,970 --> 00:17:25,720
my executable code to run<font color="#CCCCCC"> boom done so</font>

397
00:17:22,779 --> 00:17:27,880
in this<font color="#CCCCCC"> proof of concept i didn't bother</font>

398
00:17:25,720 --> 00:17:30,639
actually<font color="#E5E5E5"> writing some cool exploit</font>

399
00:17:27,880 --> 00:17:32,290
because y is 2 proof-of-concept the only

400
00:17:30,639 --> 00:17:34,330
thing that really is necessary

401
00:17:32,290 --> 00:17:36,940
is that<font color="#E5E5E5"> I show that executable code can</font>

402
00:17:34,330 --> 00:17:39,159
be triggered so in the video all I'm

403
00:17:36,940 --> 00:17:41,590
doing is just executing illegal op codes

404
00:17:39,160 --> 00:17:43,960
to show that the<font color="#E5E5E5"> trap is actually</font>

405
00:17:41,590 --> 00:17:46,270
occurring and I can get<font color="#CCCCCC"> Q EMU to</font>

406
00:17:43,960 --> 00:17:50,710
basically false and hang which is what

407
00:17:46,270 --> 00:17:53,470
you saw in the video so the solution to

408
00:17:50,710 --> 00:17:56,350
<font color="#E5E5E5">this actually like I do all of my</font>

409
00:17:53,470 --> 00:17:58,480
research a priori I don't do things a

410
00:17:56,350 --> 00:17:59,939
posteriori because it's<font color="#E5E5E5"> not useful like</font>

411
00:17:58,480 --> 00:18:03,100
if you really want<font color="#E5E5E5"> to learn a system</font>

412
00:17:59,940 --> 00:18:06,430
it's<font color="#E5E5E5"> useful to do things a priori if</font>

413
00:18:03,100 --> 00:18:07,810
you're like kind<font color="#E5E5E5"> of obsessive if you</font>

414
00:18:06,430 --> 00:18:09,370
want to learn from other people<font color="#E5E5E5"> and</font>

415
00:18:07,810 --> 00:18:11,290
other people's experience which is<font color="#E5E5E5"> also</font>

416
00:18:09,370 --> 00:18:15,969
useful that you're more looking at<font color="#CCCCCC"> a</font>

417
00:18:11,290 --> 00:18:17,560
posteriori<font color="#CCCCCC"> Chi type of learning but for</font>

418
00:18:15,970 --> 00:18:19,390
me I found<font color="#E5E5E5"> over the years that if I'm</font>

419
00:18:17,560 --> 00:18:21,429
looting learning a new system a priori

420
00:18:19,390 --> 00:18:23,320
knowledge is better and what I<font color="#E5E5E5"> mean by</font>

421
00:18:21,430 --> 00:18:25,000
that<font color="#E5E5E5"> is instead of actually learning</font>

422
00:18:23,320 --> 00:18:27,370
what people have fixed or are in the

423
00:18:25,000 --> 00:18:30,970
process of fixing analyze everything

424
00:18:27,370 --> 00:18:32,260
<font color="#E5E5E5">that you can in a particular system find</font>

425
00:18:30,970 --> 00:18:34,120
out what the current vulnerabilities are

426
00:18:32,260 --> 00:18:36,310
by reading all that documentation and

427
00:18:34,120 --> 00:18:38,679
then see what people are implementing is

428
00:18:36,310 --> 00:18:40,149
a fix right because then you're caught

429
00:18:38,680 --> 00:18:43,090
up<font color="#E5E5E5"> to speed with everybody else that it</font>

430
00:18:40,150 --> 00:18:44,740
started from from day<font color="#E5E5E5"> 0 now you're up to</font>

431
00:18:43,090 --> 00:18:46,689
speed with admin basically instead of

432
00:18:44,740 --> 00:18:48,250
<font color="#E5E5E5">trusting their judgment and going</font>

433
00:18:46,690 --> 00:18:50,740
backwards to<font color="#CCCCCC"> see if the right later</font>

434
00:18:48,250 --> 00:18:54,580
that's a huge pain it's like engineering

435
00:18:50,740 --> 00:18:57,700
security later it doesn't<font color="#E5E5E5"> work so</font>

436
00:18:54,580 --> 00:18:59,590
basically i implemented this exploit

437
00:18:57,700 --> 00:19:02,710
before<font color="#CCCCCC"> i knew that</font><font color="#E5E5E5"> there was a solution</font>

438
00:18:59,590 --> 00:19:06,879
to it proposed by the risk<font color="#CCCCCC"> 5 team so 15</font>

439
00:19:02,710 --> 00:19:09,100
days ago these guys actually<font color="#E5E5E5"> proposed a</font>

440
00:19:06,880 --> 00:19:12,610
physical<font color="#E5E5E5"> memory protection scheme it's</font>

441
00:19:09,100 --> 00:19:15,419
not implemented yet it's only<font color="#E5E5E5"> a proposal</font>

442
00:19:12,610 --> 00:19:17,889
in the new<font color="#CCCCCC"> version of the specification</font>

443
00:19:15,420 --> 00:19:21,100
so if you look on github you can

444
00:19:17,890 --> 00:19:23,920
actually see<font color="#CCCCCC"> there is a new push order</font>

445
00:19:21,100 --> 00:19:25,570
to say hey we think this PM key physical

446
00:19:23,920 --> 00:19:27,310
memory protection is going to be<font color="#CCCCCC"> useful</font>

447
00:19:25,570 --> 00:19:29,909
let's start<font color="#E5E5E5"> talking about the</font>

448
00:19:27,310 --> 00:19:32,409
specification that have been 15 days ago

449
00:19:29,910 --> 00:19:34,570
so<font color="#E5E5E5"> essentially their solution which</font>

450
00:19:32,410 --> 00:19:36,550
would<font color="#E5E5E5"> have</font><font color="#CCCCCC"> been my solution as well is</font>

451
00:19:34,570 --> 00:19:38,169
you restrict the amount of physical

452
00:19:36,550 --> 00:19:40,840
memory that's accessible to the

453
00:19:38,170 --> 00:19:42,190
supervisor layer so now you<font color="#E5E5E5"> have the</font>

454
00:19:40,840 --> 00:19:44,020
<font color="#CCCCCC">machine layer and essentially running</font>

455
00:19:42,190 --> 00:19:45,120
into protected area of memory that's not

456
00:19:44,020 --> 00:19:48,059
even visible to

457
00:19:45,120 --> 00:19:50,040
supervisor so a supervisor when it tries

458
00:19:48,059 --> 00:19:52,200
to<font color="#CCCCCC"> create a new</font><font color="#E5E5E5"> page tables it can only</font>

459
00:19:50,040 --> 00:19:54,600
<font color="#E5E5E5">create a new page tables</font><font color="#CCCCCC"> with end area</font>

460
00:19:52,200 --> 00:19:57,180
virtual memory and physical memory that

461
00:19:54,600 --> 00:20:00,030
is access to nothing else so it's really

462
00:19:57,180 --> 00:20:02,730
that simple it requires<font color="#CCCCCC"> a small silicon</font>

463
00:20:00,030 --> 00:20:04,379
change but the amount<font color="#E5E5E5"> of silicon</font>

464
00:20:02,730 --> 00:20:07,440
required to implement that is actually

465
00:20:04,380 --> 00:20:10,170
quite small so it's not going to be a

466
00:20:07,440 --> 00:20:12,480
huge cost when it comes to actually

467
00:20:10,170 --> 00:20:16,770
implementing this in a physical chip

468
00:20:12,480 --> 00:20:19,320
which is great so if you want to<font color="#CCCCCC"> know</font>

469
00:20:16,770 --> 00:20:20,520
<font color="#CCCCCC">about risk</font><font color="#E5E5E5"> 5 in general</font><font color="#CCCCCC"> there are some</font>

470
00:20:19,320 --> 00:20:25,889
<font color="#E5E5E5">really cool things that you should know</font>

471
00:20:20,520 --> 00:20:27,720
so the death of arm is inevitable<font color="#E5E5E5"> and</font>

472
00:20:25,890 --> 00:20:30,210
there are some reasons why that's true

473
00:20:27,720 --> 00:20:32,340
number one is primarily cost I mean when

474
00:20:30,210 --> 00:20:35,580
we think about the<font color="#E5E5E5"> cost of an ARM chip</font>

475
00:20:32,340 --> 00:20:37,980
it's<font color="#E5E5E5"> awesome from the immuno the</font>

476
00:20:35,580 --> 00:20:41,699
implementation of something<font color="#CCCCCC"> that I would</font>

477
00:20:37,980 --> 00:20:43,770
design<font color="#E5E5E5"> like an IOT thing right because</font>

478
00:20:41,700 --> 00:20:45,809
at that point you're looking at<font color="#E5E5E5"> it from</font>

479
00:20:43,770 --> 00:20:48,480
the cost perspective of 99 cents per

480
00:20:45,809 --> 00:20:52,379
chip if you're<font color="#E5E5E5"> looking at you know an</font>

481
00:20:48,480 --> 00:20:54,600
arm cortex-m 0 plus right and what's

482
00:20:52,380 --> 00:20:56,250
great about that<font color="#E5E5E5"> from a cost model is</font>

483
00:20:54,600 --> 00:21:00,169
that<font color="#E5E5E5"> I can go implement the next</font>

484
00:20:56,250 --> 00:21:03,450
wearable technology as an M 0 plus

485
00:21:00,170 --> 00:21:05,640
without really having to scale much in

486
00:21:03,450 --> 00:21:07,559
order<font color="#CCCCCC"> to sell my</font><font color="#E5E5E5"> products at a</font>

487
00:21:05,640 --> 00:21:09,270
reasonable price so<font color="#E5E5E5"> I can really get</font>

488
00:21:07,559 --> 00:21:11,399
<font color="#CCCCCC">away with selling my device at like five</font>

489
00:21:09,270 --> 00:21:14,280
<font color="#E5E5E5">dollars a pop because i'm using</font><font color="#CCCCCC"> a</font><font color="#E5E5E5"> really</font>

490
00:21:11,400 --> 00:21:16,140
cost-effective arm the problem is<font color="#E5E5E5"> that</font>

491
00:21:14,280 --> 00:21:18,389
if you<font color="#E5E5E5"> want to build resilience system</font>

492
00:21:16,140 --> 00:21:20,160
or trusted systems you can't use

493
00:21:18,390 --> 00:21:21,990
technology that's<font color="#CCCCCC"> they're cheap you have</font>

494
00:21:20,160 --> 00:21:25,230
to<font color="#E5E5E5"> start getting more and more into the</font>

495
00:21:21,990 --> 00:21:26,580
more costly chips right so if you want

496
00:21:25,230 --> 00:21:29,520
<font color="#E5E5E5">something that actually can execute</font>

497
00:21:26,580 --> 00:21:31,919
quite well you have to<font color="#E5E5E5"> use a cortex m4 f</font>

498
00:21:29,520 --> 00:21:34,320
because that actually incorporates

499
00:21:31,920 --> 00:21:35,700
floating point into the technology so

500
00:21:34,320 --> 00:21:37,530
now you have like a real chip you don't

501
00:21:35,700 --> 00:21:40,140
have to run everything<font color="#E5E5E5"> in software which</font>

502
00:21:37,530 --> 00:21:42,780
is stupid right if you want to if you

503
00:21:40,140 --> 00:21:44,460
want to incorporate trustzone into your

504
00:21:42,780 --> 00:21:47,100
chip you're going to have to<font color="#CCCCCC"> start</font>

505
00:21:44,460 --> 00:21:51,510
paying four times as much is what you

506
00:21:47,100 --> 00:21:54,090
would for an m4 f but now you have a

507
00:21:51,510 --> 00:21:55,980
trust<font color="#E5E5E5"> owned involved in your in your</font>

508
00:21:54,090 --> 00:21:57,449
chip but you've just basically you've

509
00:21:55,980 --> 00:21:58,680
basically edged out any<font color="#E5E5E5"> of your</font>

510
00:21:57,450 --> 00:22:00,930
competition

511
00:21:58,680 --> 00:22:02,850
or allow them to gain<font color="#E5E5E5"> a</font><font color="#CCCCCC"> foothold on your</font>

512
00:22:00,930 --> 00:22:04,470
technology if they don't care about

513
00:22:02,850 --> 00:22:06,060
security at all if they don't<font color="#E5E5E5"> need trust</font>

514
00:22:04,470 --> 00:22:10,170
owned and they don't<font color="#E5E5E5"> want to have a</font>

515
00:22:06,060 --> 00:22:11,280
cortex m33 or cortex m23 then they're

516
00:22:10,170 --> 00:22:14,190
basically going to<font color="#E5E5E5"> say well we're going</font>

517
00:22:11,280 --> 00:22:16,560
<font color="#E5E5E5">to go with the M you know cortex m3 for</font>

518
00:22:14,190 --> 00:22:18,930
basically<font color="#CCCCCC"> a quarter of the cost or less</font>

519
00:22:16,560 --> 00:22:21,360
based on volume and we're going<font color="#E5E5E5"> to beat</font>

520
00:22:18,930 --> 00:22:23,550
you every single time<font color="#E5E5E5"> so what are what</font>

521
00:22:21,360 --> 00:22:24,540
are your you know consumers going to go

522
00:22:23,550 --> 00:22:27,300
with are they going to go with the

523
00:22:24,540 --> 00:22:29,310
<font color="#E5E5E5">technology that cost them maybe twice as</font>

524
00:22:27,300 --> 00:22:32,280
much and the<font color="#E5E5E5"> only difference is that</font>

525
00:22:29,310 --> 00:22:33,830
it's secure consumers don't care right

526
00:22:32,280 --> 00:22:35,790
they're not interested in<font color="#E5E5E5"> that metric</font>

527
00:22:33,830 --> 00:22:37,470
they want<font color="#E5E5E5"> to know that</font><font color="#CCCCCC"> their stuff is</font>

528
00:22:35,790 --> 00:22:40,399
secure but they don't<font color="#CCCCCC"> want to pay twice</font>

529
00:22:37,470 --> 00:22:42,180
as much for it it's silly so instead

530
00:22:40,400 --> 00:22:43,860
they're going to go<font color="#CCCCCC"> with the cheaper</font>

531
00:22:42,180 --> 00:22:46,050
model every time and that's what we're

532
00:22:43,860 --> 00:22:49,409
seeing an Android worldwide<font color="#CCCCCC"> right</font><font color="#E5E5E5"> like</font>

533
00:22:46,050 --> 00:22:51,360
that's primarily why iOS only exists in

534
00:22:49,410 --> 00:22:54,270
the first world but the rest of<font color="#CCCCCC"> the</font>

535
00:22:51,360 --> 00:22:56,490
universe uses android because it's cheap

536
00:22:54,270 --> 00:22:57,810
and it's easy and it's in<font color="#CCCCCC"> its you know</font>

537
00:22:56,490 --> 00:22:59,520
you can pick it<font color="#E5E5E5"> up anywhere you don't</font>

538
00:22:57,810 --> 00:23:01,860
have to pay a ton of money<font color="#CCCCCC"> i'm going</font><font color="#E5E5E5"> to</font>

539
00:22:59,520 --> 00:23:03,960
<font color="#CCCCCC">android for ten dollars right it's going</font>

540
00:23:01,860 --> 00:23:06,240
to be<font color="#CCCCCC"> just as good of a smartphone as</font><font color="#E5E5E5"> i</font>

541
00:23:03,960 --> 00:23:09,240
need it to<font color="#E5E5E5"> be right but it's going to be</font>

542
00:23:06,240 --> 00:23:12,660
hackable of shit but the<font color="#E5E5E5"> problem is when</font>

543
00:23:09,240 --> 00:23:15,150
you get to an arm cortex-m 23 or m33

544
00:23:12,660 --> 00:23:16,680
level the amount of<font color="#CCCCCC"> money that you're</font>

545
00:23:15,150 --> 00:23:18,180
paying per chip for that trust<font color="#E5E5E5"> stone is</font>

546
00:23:16,680 --> 00:23:21,960
about the same as you would pay for

547
00:23:18,180 --> 00:23:24,870
cortex a9 or cortex a5 albeit probably

548
00:23:21,960 --> 00:23:26,790
without<font color="#E5E5E5"> trust zone but still you as will</font>

549
00:23:24,870 --> 00:23:28,139
step up in capability and get a real

550
00:23:26,790 --> 00:23:29,790
processor instead of running a

551
00:23:28,140 --> 00:23:31,710
microcontroller because that's nonsense

552
00:23:29,790 --> 00:23:32,820
like why would you pay that<font color="#E5E5E5"> much for you</font>

553
00:23:31,710 --> 00:23:35,190
might as well<font color="#E5E5E5"> just step up your</font>

554
00:23:32,820 --> 00:23:37,110
capability and run a processor at<font color="#CCCCCC"> one</font>

555
00:23:35,190 --> 00:23:39,510
gigahertz instead<font color="#E5E5E5"> of forty eight</font>

556
00:23:37,110 --> 00:23:42,389
megahertz or 100 megahertz there's no

557
00:23:39,510 --> 00:23:45,360
reason to spend that money so risk<font color="#CCCCCC"> 5 is</font>

558
00:23:42,390 --> 00:23:47,130
<font color="#E5E5E5">the first opportunity for implementers</font>

559
00:23:45,360 --> 00:23:53,040
that will allow us to completely destroy

560
00:23:47,130 --> 00:23:54,930
that model and that<font color="#CCCCCC"> is truly exciting so</font>

561
00:23:53,040 --> 00:23:56,879
if anybody's researched going out and

562
00:23:54,930 --> 00:24:01,050
actually implementing their own arm like

563
00:23:56,880 --> 00:24:04,470
I have the initial pay-to-play model for

564
00:24:01,050 --> 00:24:06,419
arm is you're going to foot up around a

565
00:24:04,470 --> 00:24:09,180
million dollars or more in order<font color="#E5E5E5"> to just</font>

566
00:24:06,420 --> 00:24:10,680
start in with the arm echo system that's

567
00:24:09,180 --> 00:24:12,390
<font color="#E5E5E5">basically trademarks and all that other</font>

568
00:24:10,680 --> 00:24:14,790
good stuff that you<font color="#CCCCCC"> need in</font>

569
00:24:12,390 --> 00:24:16,680
where'd<font color="#CCCCCC"> you go say I have a piece of arm</font>

570
00:24:14,790 --> 00:24:20,490
technology<font color="#E5E5E5"> and I can build on technology</font>

571
00:24:16,680 --> 00:24:23,520
myself and then from<font color="#E5E5E5"> there</font><font color="#CCCCCC"> you have to</font>

572
00:24:20,490 --> 00:24:25,290
pay for IP so you pay for somebody's

573
00:24:23,520 --> 00:24:26,910
uart peripheral you're paying for

574
00:24:25,290 --> 00:24:28,200
somebody's memory bus you're paying for

575
00:24:26,910 --> 00:24:31,320
<font color="#CCCCCC">all these different things that</font><font color="#E5E5E5"> you're</font>

576
00:24:28,200 --> 00:24:33,570
incorporating into the<font color="#E5E5E5"> CPU right so</font>

577
00:24:31,320 --> 00:24:35,909
that's another cost more importantly

578
00:24:33,570 --> 00:24:39,060
every single time that you sell an

579
00:24:35,910 --> 00:24:42,060
individual<font color="#E5E5E5"> ARM chip you have to pay</font>

580
00:24:39,060 --> 00:24:44,159
<font color="#E5E5E5">royalties back to arm which can be</font>

581
00:24:42,060 --> 00:24:46,129
anywhere based on your volume from one

582
00:24:44,160 --> 00:24:49,560
percent all the way up to four percent

583
00:24:46,130 --> 00:24:54,050
now think about that<font color="#E5E5E5"> if you have a</font>

584
00:24:49,560 --> 00:24:56,970
dollar chip you are going to be spending

585
00:24:54,050 --> 00:25:01,530
four cents of every chip that you

586
00:24:56,970 --> 00:25:02,910
manufacture and<font color="#E5E5E5"> sell back to arm when</font>

587
00:25:01,530 --> 00:25:04,710
you're paying for<font color="#E5E5E5"> the amount of</font>

588
00:25:02,910 --> 00:25:09,320
engineering that it requires<font color="#E5E5E5"> to build</font>

589
00:25:04,710 --> 00:25:14,460
silicon especially at scale that's a

590
00:25:09,320 --> 00:25:16,889
significant hit of people's roi right so

591
00:25:14,460 --> 00:25:19,830
risk<font color="#CCCCCC"> 5 doesn't have any of that</font>

592
00:25:16,890 --> 00:25:22,890
contention you can build a risk five at

593
00:25:19,830 --> 00:25:26,429
spec in a few months you can manufacture

594
00:25:22,890 --> 00:25:28,860
a physical silicon in six months you

595
00:25:26,430 --> 00:25:30,900
don't have any pay to play up front no

596
00:25:28,860 --> 00:25:33,330
million dollar deposit whatever you<font color="#CCCCCC"> want</font>

597
00:25:30,900 --> 00:25:35,730
to call it and there's no<font color="#CCCCCC"> royalty to pay</font>

598
00:25:33,330 --> 00:25:37,710
so every time I manufacture a chip and

599
00:25:35,730 --> 00:25:39,630
sell<font color="#CCCCCC"> it I don't have to give anybody</font>

600
00:25:37,710 --> 00:25:41,670
four percent I don't have<font color="#E5E5E5"> to give</font>

601
00:25:39,630 --> 00:25:43,800
<font color="#E5E5E5">anybody a half a percent nobody gets</font>

602
00:25:41,670 --> 00:25:46,410
<font color="#E5E5E5">that money the only people that I have</font>

603
00:25:43,800 --> 00:25:48,419
to pay are the people that I get<font color="#E5E5E5"> my</font>

604
00:25:46,410 --> 00:25:50,430
intellectual properties from so i buy

605
00:25:48,420 --> 00:25:53,190
<font color="#CCCCCC">some</font><font color="#E5E5E5"> kind of a you are from so-and-so</font>

606
00:25:50,430 --> 00:25:55,410
person over there cool i'll give him

607
00:25:53,190 --> 00:25:57,420
some kind of a licensing deal fine

608
00:25:55,410 --> 00:25:59,070
that's acceptable<font color="#CCCCCC"> i'm going</font><font color="#E5E5E5"> to do the</font>

609
00:25:57,420 --> 00:26:02,070
<font color="#E5E5E5">same thing with arm or any other cpu</font>

610
00:25:59,070 --> 00:26:03,659
technology but in risk<font color="#E5E5E5"> 5 that's the only</font>

611
00:26:02,070 --> 00:26:07,439
dollar that<font color="#E5E5E5"> i'm paying out to somebody</font>

612
00:26:03,660 --> 00:26:09,060
else which<font color="#CCCCCC"> is awesome so now that means</font>

613
00:26:07,440 --> 00:26:11,550
<font color="#E5E5E5">that we can build significantly better</font>

614
00:26:09,060 --> 00:26:13,710
systems more secure systems more

615
00:26:11,550 --> 00:26:16,409
resilient systems at a fraction of the

616
00:26:13,710 --> 00:26:19,380
cost<font color="#E5E5E5"> of what we can do with arm and that</font>

617
00:26:16,410 --> 00:26:21,480
is completely game-changing so you want

618
00:26:19,380 --> 00:26:23,730
to know why bunnie huang one of my

619
00:26:21,480 --> 00:26:25,210
personal heroes and one of the<font color="#E5E5E5"> best</font>

620
00:26:23,730 --> 00:26:27,880
hardware hackers in the world

621
00:26:25,210 --> 00:26:30,789
he is one<font color="#CCCCCC"> of the founders of low-risk</font>

622
00:26:27,880 --> 00:26:32,919
who all<font color="#CCCCCC"> talked about in a minute but low</font>

623
00:26:30,789 --> 00:26:35,289
risk that uncle organization is a

624
00:26:32,919 --> 00:26:39,070
<font color="#E5E5E5">nonprofit whose only goal is designing</font>

625
00:26:35,289 --> 00:26:41,049
secure CPUs more for mobile and server

626
00:26:39,070 --> 00:26:43,570
and desktop and things like that not

627
00:26:41,049 --> 00:26:46,960
really what I'm interested in but with

628
00:26:43,570 --> 00:26:49,080
secure memory and they want<font color="#E5E5E5"> to do it</font><font color="#CCCCCC"> at</font>

629
00:26:46,960 --> 00:26:51,279
scale so that they can start<font color="#CCCCCC"> selling</font>

630
00:26:49,080 --> 00:26:54,340
cell phones which has been a goal of

631
00:26:51,279 --> 00:26:55,570
bunnies for years for a fraction of the

632
00:26:54,340 --> 00:26:57,129
cost<font color="#E5E5E5"> of what they would normally sell</font>

633
00:26:55,570 --> 00:27:00,399
but with capabilities<font color="#E5E5E5"> that are their</font>

634
00:26:57,130 --> 00:27:03,130
equivalent to say an apple iphone which

635
00:27:00,399 --> 00:27:05,110
is exceptional that's what we want to

636
00:27:03,130 --> 00:27:08,279
see that's the whole reason<font color="#E5E5E5"> for going</font>

637
00:27:05,110 --> 00:27:10,719
with risk<font color="#CCCCCC"> 5 is this type of technology</font>

638
00:27:08,279 --> 00:27:12,070
right and the<font color="#CCCCCC"> greatest part about it is</font>

639
00:27:10,720 --> 00:27:13,270
I can stand<font color="#E5E5E5"> up here and talk about this</font>

640
00:27:12,070 --> 00:27:15,158
all day and I'm not<font color="#CCCCCC"> even selling</font>

641
00:27:13,270 --> 00:27:18,158
anything because this is entirely open

642
00:27:15,159 --> 00:27:20,289
source anybody can go out download the

643
00:27:18,159 --> 00:27:21,669
specification download open<font color="#E5E5E5"> FPGA</font>

644
00:27:20,289 --> 00:27:23,710
implementations and go build around

645
00:27:21,669 --> 00:27:31,059
Silicon you don't pay to do<font color="#E5E5E5"> anything</font>

646
00:27:23,710 --> 00:27:32,740
it's<font color="#E5E5E5"> great so once you go through the</font>

647
00:27:31,059 --> 00:27:35,289
process of developing<font color="#E5E5E5"> and architecting</font>

648
00:27:32,740 --> 00:27:36,909
your own system you end up<font color="#E5E5E5"> with really</font>

649
00:27:35,289 --> 00:27:38,710
elegant solutions for security right

650
00:27:36,909 --> 00:27:40,929
that are very<font color="#E5E5E5"> low cost and I just</font>

651
00:27:38,710 --> 00:27:43,419
<font color="#E5E5E5">mentioned low-risk well tagged memory is</font>

652
00:27:40,929 --> 00:27:45,760
a big implementation at the<font color="#E5E5E5"> low risk</font>

653
00:27:43,419 --> 00:27:49,690
team the low risk teams technology is

654
00:27:45,760 --> 00:27:51,879
basically taking you know a holistic

655
00:27:49,690 --> 00:27:54,909
look at how control flow architectures

656
00:27:51,880 --> 00:27:56,649
work so if anybody here and I'm sure

657
00:27:54,909 --> 00:27:58,090
there<font color="#CCCCCC"> are quite a few people how many</font>

658
00:27:56,649 --> 00:27:59,799
people write exploits or deal with

659
00:27:58,090 --> 00:28:04,199
exploits in any way vulnerability

660
00:27:59,799 --> 00:28:07,950
research it's<font color="#E5E5E5"> okay to raise your</font><font color="#CCCCCC"> hand so</font>

661
00:28:04,200 --> 00:28:11,169
we're friendly for you<font color="#E5E5E5"> people here so in</font>

662
00:28:07,950 --> 00:28:13,630
a RISC architecture<font color="#CCCCCC"> with 5 architecture</font>

663
00:28:11,169 --> 00:28:16,059
tagged memory is really exceptional for

664
00:28:13,630 --> 00:28:18,700
defeating control flow so if somebody

665
00:28:16,059 --> 00:28:21,908
over<font color="#CCCCCC"> writes a return address or similar</font>

666
00:28:18,700 --> 00:28:23,679
type of<font color="#E5E5E5"> object controlled object you</font><font color="#CCCCCC"> can</font>

667
00:28:21,909 --> 00:28:28,149
actually<font color="#E5E5E5"> implement at the hardware layer</font>

668
00:28:23,679 --> 00:28:32,230
a piece of metadata that tells the CPU

669
00:28:28,149 --> 00:28:34,479
do not let anybody alter this data from

670
00:28:32,230 --> 00:28:37,029
outside of these boundaries so you can

671
00:28:34,480 --> 00:28:39,160
say these functions or these

672
00:28:37,029 --> 00:28:42,280
instructions will allow

673
00:28:39,160 --> 00:28:45,490
to this<font color="#E5E5E5"> region of memory other pieces of</font>

674
00:28:42,280 --> 00:28:49,120
technology cannot touch it period so if

675
00:28:45,490 --> 00:28:51,520
you're basically trying to store a chunk

676
00:28:49,120 --> 00:28:54,550
<font color="#E5E5E5">of 32 bits or 64 bits at a return</font>

677
00:28:51,520 --> 00:28:58,180
addresses address it will not<font color="#E5E5E5"> let you</font>

678
00:28:54,550 --> 00:29:00,310
overwrite it because the tlv and<font color="#CCCCCC"> mmu</font>

679
00:28:58,180 --> 00:29:02,790
itself in silicon will look at the

680
00:29:00,310 --> 00:29:05,770
<font color="#E5E5E5">memory data or the metadata and say oh</font>

681
00:29:02,790 --> 00:29:09,490
this address object in memory is not

682
00:29:05,770 --> 00:29:12,639
<font color="#E5E5E5">allowed</font><font color="#CCCCCC"> to be</font><font color="#E5E5E5"> written to by a store it</font>

683
00:29:09,490 --> 00:29:15,880
can only be written to<font color="#E5E5E5"> by a call or a</font>

684
00:29:12,640 --> 00:29:18,730
branch with return right anything that

685
00:29:15,880 --> 00:29:21,820
would legitimately load an address into

686
00:29:18,730 --> 00:29:24,820
that region of memory so when you have

687
00:29:21,820 --> 00:29:27,850
these kinds of things it really

688
00:29:24,820 --> 00:29:29,350
significantly limits the amount of work

689
00:29:27,850 --> 00:29:32,070
<font color="#CCCCCC">that you have</font><font color="#E5E5E5"> to do from a security</font>

690
00:29:29,350 --> 00:29:34,600
perspective to disallow any<font color="#E5E5E5"> type of</font>

691
00:29:32,070 --> 00:29:36,490
<font color="#E5E5E5">buffer overflow attacks or heap attacks</font>

692
00:29:34,600 --> 00:29:38,770
or things of that nature basically<font color="#E5E5E5"> any</font>

693
00:29:36,490 --> 00:29:41,980
tap any attacks that would overwrite a

694
00:29:38,770 --> 00:29:44,410
return address in that structure would

695
00:29:41,980 --> 00:29:47,730
be disabled now that doesn't really help

696
00:29:44,410 --> 00:29:50,440
with things like<font color="#E5E5E5"> Rob but it does help</font>

697
00:29:47,730 --> 00:29:51,790
when you start a rap chain like in<font color="#E5E5E5"> order</font>

698
00:29:50,440 --> 00:29:53,470
to start a<font color="#E5E5E5"> rap chain you actually have</font>

699
00:29:51,790 --> 00:29:57,310
to overwrite a return address somewhere

700
00:29:53,470 --> 00:29:59,080
right so starting that chain is a

701
00:29:57,310 --> 00:30:00,580
problem but if you can figure out how to

702
00:29:59,080 --> 00:30:03,040
start that<font color="#E5E5E5"> chain then the return address</font>

703
00:30:00,580 --> 00:30:05,169
or the return oriented programming or

704
00:30:03,040 --> 00:30:07,120
what if you want to call<font color="#CCCCCC"> it will still</font>

705
00:30:05,170 --> 00:30:09,550
essentially work so there are still more

706
00:30:07,120 --> 00:30:11,110
things to be done the other limitations

707
00:30:09,550 --> 00:30:13,470
with something like tag memories it

708
00:30:11,110 --> 00:30:15,639
requires a massive amount more silicon

709
00:30:13,470 --> 00:30:17,620
<font color="#CCCCCC">right because now you have more</font>

710
00:30:15,640 --> 00:30:19,630
instructions that<font color="#CCCCCC"> you have to support so</font>

711
00:30:17,620 --> 00:30:21,760
we have to support<font color="#E5E5E5"> tagging instructions</font>

712
00:30:19,630 --> 00:30:22,990
you have to support removing tags so

713
00:30:21,760 --> 00:30:25,510
that some more instructions require

714
00:30:22,990 --> 00:30:27,220
that's more silicon required for every

715
00:30:25,510 --> 00:30:29,530
single<font color="#CCCCCC"> address line that goes into the</font>

716
00:30:27,220 --> 00:30:31,660
TLB it also<font color="#E5E5E5"> has</font><font color="#CCCCCC"> to have associated</font>

717
00:30:29,530 --> 00:30:33,520
metadata so now you<font color="#CCCCCC"> have to manage the</font>

718
00:30:31,660 --> 00:30:36,730
metadata as well as the<font color="#E5E5E5"> address lines</font>

719
00:30:33,520 --> 00:30:39,760
every part of the<font color="#CCCCCC"> MMU TLB etc right so</font>

720
00:30:36,730 --> 00:30:42,370
now every CPU ask or object has to be

721
00:30:39,760 --> 00:30:44,770
aware<font color="#CCCCCC"> of this type of tagging technology</font>

722
00:30:42,370 --> 00:30:47,439
which is why you really<font color="#E5E5E5"> rarely see this</font>

723
00:30:44,770 --> 00:30:49,750
technology implemented right<font color="#E5E5E5"> because the</font>

724
00:30:47,440 --> 00:30:51,940
costs skyrocket<font color="#E5E5E5"> and it's not</font><font color="#CCCCCC"> just</font>

725
00:30:49,750 --> 00:30:53,049
silicon it's<font color="#E5E5E5"> actually the ecosystem</font>

726
00:30:51,940 --> 00:30:54,749
involved in developing

727
00:30:53,049 --> 00:30:57,340
technology as well because if you have

728
00:30:54,749 --> 00:30:59,320
instructions for tagging that means<font color="#E5E5E5"> that</font>

729
00:30:57,340 --> 00:31:01,779
your tool chain also<font color="#CCCCCC"> has to</font><font color="#E5E5E5"> support it</font>

730
00:30:59,320 --> 00:31:04,360
and if your tool chain supports it then

731
00:31:01,779 --> 00:31:08,590
you have to also catch the false right

732
00:31:04,360 --> 00:31:10,238
so if you actually see in an<font color="#CCCCCC"> application</font>

733
00:31:08,590 --> 00:31:12,220
oh shoot something<font color="#CCCCCC"> just tried to</font>

734
00:31:10,239 --> 00:31:14,619
overwrite a return address how do<font color="#E5E5E5"> we</font>

735
00:31:12,220 --> 00:31:16,749
differentiate between code that's

736
00:31:14,619 --> 00:31:18,820
written badly and code that's being

737
00:31:16,749 --> 00:31:21,100
maliciously instrumented so the

738
00:31:18,820 --> 00:31:25,210
ecosystem has to allow for<font color="#E5E5E5"> some kind of</font>

739
00:31:21,100 --> 00:31:27,248
a delta between those two attacks you

740
00:31:25,210 --> 00:31:28,779
know and I'm saying attack here is just

741
00:31:27,249 --> 00:31:30,999
<font color="#E5E5E5">a classification of something that's</font>

742
00:31:28,779 --> 00:31:32,499
corrupting something not necessarily

743
00:31:30,999 --> 00:31:35,139
maliciously but it's still an attack on

744
00:31:32,499 --> 00:31:38,259
a stable<font color="#E5E5E5"> environment all right so how do</font>

745
00:31:35,139 --> 00:31:42,340
you<font color="#E5E5E5"> actually implement that well it</font>

746
00:31:38,259 --> 00:31:43,779
requires not only<font color="#CCCCCC"> tool chain alterations</font>

747
00:31:42,340 --> 00:31:45,699
but it requires applications that

748
00:31:43,779 --> 00:31:47,679
understand how to process the

749
00:31:45,700 --> 00:31:49,840
<font color="#CCCCCC">information determine whether or</font><font color="#E5E5E5"> not</font>

750
00:31:47,679 --> 00:31:52,419
these things<font color="#E5E5E5"> have changed in a malicious</font>

751
00:31:49,840 --> 00:31:54,850
way and then somebody actually has to

752
00:31:52,419 --> 00:31:56,320
listen to the results of that

753
00:31:54,850 --> 00:31:58,418
information to know<font color="#CCCCCC"> whether or</font><font color="#E5E5E5"> not</font>

754
00:31:56,320 --> 00:32:00,220
there's an attack occurring so basically

755
00:31:58,419 --> 00:32:04,720
you're changing the<font color="#E5E5E5"> entire way that</font>

756
00:32:00,220 --> 00:32:06,220
admins look at services right you're

757
00:32:04,720 --> 00:32:08,649
<font color="#E5E5E5">changing the entire way that an</font>

758
00:32:06,220 --> 00:32:12,399
operating system like a mobile<font color="#E5E5E5"> operating</font>

759
00:32:08,649 --> 00:32:16,658
system like<font color="#E5E5E5"> Android interprets false you</font>

760
00:32:12,399 --> 00:32:18,428
have to set up basically pushes that you

761
00:32:16,659 --> 00:32:21,309
know like you would see<font color="#E5E5E5"> an Android or</font>

762
00:32:18,429 --> 00:32:24,159
iOS some kind<font color="#E5E5E5"> of memory dump when an</font>

763
00:32:21,309 --> 00:32:28,059
event like<font color="#CCCCCC"> this occurs that data has to</font>

764
00:32:24,159 --> 00:32:29,739
<font color="#E5E5E5">be sent back to the</font><font color="#CCCCCC"> backend</font><font color="#E5E5E5"> some kind of</font>

765
00:32:28,059 --> 00:32:32,408
company has to<font color="#CCCCCC"> have somebody reading</font>

766
00:32:29,739 --> 00:32:34,359
through that data and<font color="#E5E5E5"> actually analyzing</font>

767
00:32:32,409 --> 00:32:36,609
whether or not it's an attack and then

768
00:32:34,359 --> 00:32:38,199
talking<font color="#E5E5E5"> to QA and then talking</font><font color="#CCCCCC"> to</font>

769
00:32:36,609 --> 00:32:39,399
engineering and then talking<font color="#E5E5E5"> to security</font>

770
00:32:38,200 --> 00:32:42,549
to determine<font color="#CCCCCC"> whether or</font><font color="#E5E5E5"> not there's a</font>

771
00:32:39,399 --> 00:32:44,289
problem this is a very<font color="#E5E5E5"> very long chain</font>

772
00:32:42,549 --> 00:32:46,989
<font color="#CCCCCC">of involvement between multiple</font>

773
00:32:44,289 --> 00:32:51,908
organizations multiple people it's

774
00:32:46,989 --> 00:32:53,889
really not ideal right so that's the

775
00:32:51,909 --> 00:32:56,080
<font color="#CCCCCC">reason why</font><font color="#E5E5E5"> we don't see tag memory</font>

776
00:32:53,889 --> 00:32:58,570
implementations very often regardless

777
00:32:56,080 --> 00:33:00,820
it's still a very important technology

778
00:32:58,570 --> 00:33:03,668
and when you<font color="#CCCCCC"> have something like risk</font><font color="#E5E5E5"> 5</font>

779
00:33:00,820 --> 00:33:06,340
that's already extremely low cost you

780
00:33:03,669 --> 00:33:08,620
can add on new technologies such as this

781
00:33:06,340 --> 00:33:10,449
that basically allow you to spend money

782
00:33:08,620 --> 00:33:12,908
where you<font color="#E5E5E5"> think it's really important</font>

783
00:33:10,450 --> 00:33:14,770
because you didn't have<font color="#E5E5E5"> to spend tons</font>

784
00:33:12,909 --> 00:33:17,470
and tons of money already<font color="#E5E5E5"> just</font>

785
00:33:14,770 --> 00:33:20,168
implementing the processor and building

786
00:33:17,470 --> 00:33:21,460
the silicon itself so you've saved

787
00:33:20,169 --> 00:33:23,529
yourself a heck of a<font color="#CCCCCC"> lot of a headache</font>

788
00:33:21,460 --> 00:33:25,120
you can add more headache just<font color="#E5E5E5"> to</font>

789
00:33:23,529 --> 00:33:29,320
<font color="#CCCCCC">support you know your your need for</font>

790
00:33:25,120 --> 00:33:30,580
making yourself sick basically another

791
00:33:29,320 --> 00:33:32,950
<font color="#E5E5E5">cool thing about the risks 5</font>

792
00:33:30,580 --> 00:33:36,520
architecture that I'm involved in is the

793
00:33:32,950 --> 00:33:38,320
<font color="#E5E5E5">security of debugging and that to me is</font>

794
00:33:36,520 --> 00:33:41,260
<font color="#E5E5E5">very important because the number one</font>

795
00:33:38,320 --> 00:33:44,700
way that we see attacks in IOT is really

796
00:33:41,260 --> 00:33:48,520
through the<font color="#E5E5E5"> debugging system right</font>

797
00:33:44,700 --> 00:33:51,809
because<font color="#CCCCCC"> usually the goal with technology</font>

798
00:33:48,520 --> 00:33:54,070
<font color="#CCCCCC">is very simply in quickly accessing</font>

799
00:33:51,809 --> 00:33:55,690
executable code or basically

800
00:33:54,070 --> 00:33:57,549
instrumenting executable code in some

801
00:33:55,690 --> 00:33:59,350
way well the easiest way to do that<font color="#CCCCCC"> is</font>

802
00:33:57,549 --> 00:34:02,830
just by passing whatever<font color="#CCCCCC"> quote unquote</font>

803
00:33:59,350 --> 00:34:05,230
security is implemented for the

804
00:34:02,830 --> 00:34:08,710
processing system<font color="#E5E5E5"> or the basically a</font>

805
00:34:05,230 --> 00:34:10,060
system-on-chip so everybody is probably

806
00:34:08,710 --> 00:34:12,190
familiar with most of<font color="#E5E5E5"> these standard</font>

807
00:34:10,060 --> 00:34:15,609
attacks but the standard attacks that

808
00:34:12,190 --> 00:34:18,639
you would see in<font color="#E5E5E5"> embedded systems in IOT</font>

809
00:34:15,609 --> 00:34:19,779
etc are really<font color="#E5E5E5"> simple attacks most of</font>

810
00:34:18,639 --> 00:34:21,609
the<font color="#CCCCCC"> time</font><font color="#E5E5E5"> that you</font><font color="#CCCCCC"> don't really have to</font>

811
00:34:19,780 --> 00:34:24,190
do a lot<font color="#E5E5E5"> of glitching you don't have to</font>

812
00:34:21,609 --> 00:34:26,440
do<font color="#CCCCCC"> SD</font><font color="#E5E5E5"> a GPA that kind of stuff</font><font color="#CCCCCC"> to</font>

813
00:34:24,190 --> 00:34:29,409
extract whatever code is going to be

814
00:34:26,440 --> 00:34:32,379
checked for on boot really all you have

815
00:34:29,409 --> 00:34:35,230
to do is<font color="#CCCCCC"> just guess whatever passwords</font>

816
00:34:32,379 --> 00:34:37,598
being used and in most cases the

817
00:34:35,230 --> 00:34:41,020
<font color="#E5E5E5">password is actually stored somewhere in</font>

818
00:34:37,599 --> 00:34:43,690
flash so you can just extract class by

819
00:34:41,020 --> 00:34:45,909
attaching an and reader<font color="#CCCCCC"> or a spy reader</font>

820
00:34:43,690 --> 00:34:47,409
or something in that<font color="#CCCCCC"> case and</font><font color="#E5E5E5"> then</font>

821
00:34:45,909 --> 00:34:50,200
finding basically in memory where that

822
00:34:47,409 --> 00:34:53,080
should be sword and then using<font color="#CCCCCC"> that</font>

823
00:34:50,199 --> 00:34:56,080
password over a serial serial port it's

824
00:34:53,080 --> 00:34:57,940
really<font color="#E5E5E5"> that easy in most</font><font color="#CCCCCC"> cases you see</font>

825
00:34:56,080 --> 00:35:01,960
system-on-chips that are being sold and

826
00:34:57,940 --> 00:35:04,690
maths especially Wi-Fi chips for IOT

827
00:35:01,960 --> 00:35:07,480
they have to attack models that are

828
00:35:04,690 --> 00:35:09,970
extremely popular in that I get you know

829
00:35:07,480 --> 00:35:12,849
code execution with non-stop most

830
00:35:09,970 --> 00:35:14,410
clients that have this model you know I

831
00:35:12,849 --> 00:35:15,820
end up just recommending that they go

832
00:35:14,410 --> 00:35:17,009
with a completely different architecture

833
00:35:15,820 --> 00:35:20,359
<font color="#E5E5E5">because this is a waste of their time</font>

834
00:35:17,010 --> 00:35:22,160
but basically<font color="#CCCCCC"> it's oh there's a</font><font color="#E5E5E5"> password</font>

835
00:35:20,359 --> 00:35:26,328
that password can be easily found

836
00:35:22,160 --> 00:35:29,629
through sorting through flash or oh the

837
00:35:26,329 --> 00:35:33,859
firmware itself inside of the system on

838
00:35:29,630 --> 00:35:35,720
chip disables jtag at a certain point at

839
00:35:33,859 --> 00:35:38,808
bootup so you're basically racing

840
00:35:35,720 --> 00:35:41,118
against that firmware to tell it hey I'm

841
00:35:38,809 --> 00:35:43,339
going<font color="#E5E5E5"> to take</font><font color="#CCCCCC"> control over jtag or swd</font>

842
00:35:41,119 --> 00:35:45,499
or whatever it happens to be then you

843
00:35:43,339 --> 00:35:47,359
immediately gain access to the<font color="#E5E5E5"> system as</font>

844
00:35:45,499 --> 00:35:49,970
long as you win that window you win that

845
00:35:47,359 --> 00:35:52,489
<font color="#E5E5E5">race right so that's the cool thing</font>

846
00:35:49,970 --> 00:35:54,348
about what we're<font color="#CCCCCC"> doing in risk 5 is</font>

847
00:35:52,489 --> 00:35:56,499
we're eliminating the potential for all

848
00:35:54,349 --> 00:35:59,809
<font color="#E5E5E5">those things to even occur we can sell</font>

849
00:35:56,499 --> 00:36:03,230
system-on-chip capability with debug

850
00:35:59,809 --> 00:36:06,079
security by implementing much cooler

851
00:36:03,230 --> 00:36:09,349
authentication schemes I mean people<font color="#CCCCCC"> can</font>

852
00:36:06,079 --> 00:36:12,410
still screw it up right we can still see

853
00:36:09,349 --> 00:36:13,999
system on chip vendors having this exact

854
00:36:12,410 --> 00:36:17,480
same problem<font color="#CCCCCC"> that they implement things</font>

855
00:36:13,999 --> 00:36:20,419
differently but I am<font color="#E5E5E5"> the guy currently</font>

856
00:36:17,480 --> 00:36:22,970
that's writing<font color="#E5E5E5"> the specification on this</font>

857
00:36:20,420 --> 00:36:26,239
new debug security architecture for the

858
00:36:22,970 --> 00:36:27,828
wrist<font color="#CCCCCC"> 5</font><font color="#E5E5E5"> team so that's my goal is to</font>

859
00:36:26,239 --> 00:36:31,849
implement this correctly so basically

860
00:36:27,829 --> 00:36:35,089
what I'm doing is augmenting the

861
00:36:31,849 --> 00:36:37,730
existing definition of the risk 5 debug

862
00:36:35,089 --> 00:36:39,999
architecture authentication<font color="#E5E5E5"> scheme right</font>

863
00:36:37,730 --> 00:36:43,940
now it's basically<font color="#E5E5E5"> two registers that</font>

864
00:36:39,999 --> 00:36:47,538
you can access<font color="#E5E5E5"> before the core is</font>

865
00:36:43,940 --> 00:36:48,920
instantiated so<font color="#E5E5E5"> before jtag is actually</font>

866
00:36:47,539 --> 00:36:51,440
turned on there are two debug registers

867
00:36:48,920 --> 00:36:53,869
that you can access<font color="#E5E5E5"> off 0 and off one</font>

868
00:36:51,440 --> 00:36:55,670
and you're basically<font color="#E5E5E5"> just writing 32</font>

869
00:36:53,869 --> 00:36:58,279
bits to each of those registers to say

870
00:36:55,670 --> 00:37:00,140
hey here's what<font color="#CCCCCC"> I want to do so</font>

871
00:36:58,279 --> 00:37:01,880
currently<font color="#E5E5E5"> you can implement kind of you</font>

872
00:37:00,140 --> 00:37:04,098
know the same password<font color="#E5E5E5"> scheme that you</font>

873
00:37:01,880 --> 00:37:07,369
would see<font color="#E5E5E5"> in other chips but in this</font>

874
00:37:04,099 --> 00:37:09,529
case the risk five ways that you

875
00:37:07,369 --> 00:37:11,630
<font color="#E5E5E5">basically load two integers into those</font>

876
00:37:09,529 --> 00:37:14,180
authentication registers and if they're

877
00:37:11,630 --> 00:37:16,279
correct it'll open up jtag the

878
00:37:14,180 --> 00:37:19,220
augmentation to that is<font color="#E5E5E5"> to actually use</font>

879
00:37:16,279 --> 00:37:22,549
those two registers as a very simple

880
00:37:19,220 --> 00:37:24,169
serial protocol so I right into one

881
00:37:22,549 --> 00:37:25,430
register and I read from the other

882
00:37:24,170 --> 00:37:28,130
register we basically have a

883
00:37:25,430 --> 00:37:30,799
<font color="#CCCCCC">circularbuffer</font><font color="#E5E5E5"> that allows me</font><font color="#CCCCCC"> to write</font>

884
00:37:28,130 --> 00:37:33,220
data into the<font color="#E5E5E5"> core that's passed on to</font>

885
00:37:30,799 --> 00:37:36,759
silicon that handles authentication

886
00:37:33,220 --> 00:37:39,910
so we've we've taken away this you know

887
00:37:36,760 --> 00:37:42,130
simple bit based password scheme that's

888
00:37:39,910 --> 00:37:46,569
very common to embedded systems and

889
00:37:42,130 --> 00:37:49,720
we've created a very resilient and easy

890
00:37:46,570 --> 00:37:52,630
to augment security model that uses

891
00:37:49,720 --> 00:37:55,118
essentially a serial port based in to

892
00:37:52,630 --> 00:37:57,940
accessible registers all that data is

893
00:37:55,119 --> 00:38:00,040
then passed to IP and silicon that

894
00:37:57,940 --> 00:38:02,040
verifies the messages that<font color="#CCCCCC"> are passed</font>

895
00:38:00,040 --> 00:38:04,390
back and forth over these two registers

896
00:38:02,040 --> 00:38:06,250
so the cool thing is<font color="#E5E5E5"> that now we can</font>

897
00:38:04,390 --> 00:38:08,799
implement<font color="#E5E5E5"> any type of authentication</font>

898
00:38:06,250 --> 00:38:10,560
scheme we want and then the debug

899
00:38:08,800 --> 00:38:13,780
specification is basically going<font color="#E5E5E5"> to say</font>

900
00:38:10,560 --> 00:38:15,270
here's an example of how we're

901
00:38:13,780 --> 00:38:17,619
implementing public key authentication

902
00:38:15,270 --> 00:38:18,970
so now we can do public key

903
00:38:17,619 --> 00:38:21,460
authentication where something can be

904
00:38:18,970 --> 00:38:24,700
signed we<font color="#E5E5E5"> don't actually have to store a</font>

905
00:38:21,460 --> 00:38:26,590
security key in silicon or somewhere in

906
00:38:24,700 --> 00:38:29,618
like mask rom or something of that

907
00:38:26,590 --> 00:38:31,480
nature what's really easy to do is we

908
00:38:29,619 --> 00:38:33,460
<font color="#CCCCCC">basically just have a signature checking</font>

909
00:38:31,480 --> 00:38:36,070
algorithm that ensures that something

910
00:38:33,460 --> 00:38:38,200
has been signed by the proper key so<font color="#E5E5E5"> you</font>

911
00:38:36,070 --> 00:38:39,970
basically say<font color="#CCCCCC"> alright we're</font><font color="#E5E5E5"> going to</font>

912
00:38:38,200 --> 00:38:41,379
sign this authentication message this

913
00:38:39,970 --> 00:38:44,049
authentication message is going to

914
00:38:41,380 --> 00:38:46,150
validate open access<font color="#E5E5E5"> to jtag but it's</font>

915
00:38:44,050 --> 00:38:48,880
also going to<font color="#E5E5E5"> be signed by this</font><font color="#CCCCCC"> root key</font>

916
00:38:46,150 --> 00:38:51,400
for this manufacturer so you get the

917
00:38:48,880 --> 00:38:53,950
<font color="#CCCCCC">ability to have the dual signing that</font>

918
00:38:51,400 --> 00:38:57,750
can be validated<font color="#CCCCCC"> in silicon or mask ROM</font>

919
00:38:53,950 --> 00:39:00,339
that no longer has to<font color="#CCCCCC"> be you know</font>

920
00:38:57,750 --> 00:39:02,380
bothers them to implement you don't have

921
00:39:00,339 --> 00:39:03,640
to implement that at all if<font color="#E5E5E5"> you don't</font>

922
00:39:02,380 --> 00:39:06,250
want to but if<font color="#E5E5E5"> you want that</font>

923
00:39:03,640 --> 00:39:09,520
functionality the silicon will be there

924
00:39:06,250 --> 00:39:12,550
the IP IP will be there for people<font color="#CCCCCC"> to be</font>

925
00:39:09,520 --> 00:39:15,310
<font color="#CCCCCC">able to validate those authentication</font>

926
00:39:12,550 --> 00:39:17,560
tokens securely and now you can have

927
00:39:15,310 --> 00:39:20,740
jtag running all the time you<font color="#E5E5E5"> can shut</font>

928
00:39:17,560 --> 00:39:24,099
the peripheral off to save power but<font color="#E5E5E5"> you</font>

929
00:39:20,740 --> 00:39:26,109
never ever have to have that running all

930
00:39:24,099 --> 00:39:29,020
the time and<font color="#CCCCCC"> you never have to disable</font>

931
00:39:26,109 --> 00:39:31,660
it in order to<font color="#E5E5E5"> be secure so you no</font>

932
00:39:29,020 --> 00:39:34,810
longer have this race between when your

933
00:39:31,660 --> 00:39:38,140
firmware execute and shutting off jtag

934
00:39:34,810 --> 00:39:40,560
from you know abusive users you now the

935
00:39:38,140 --> 00:39:43,270
ability to at any point in time

936
00:39:40,560 --> 00:39:46,089
<font color="#CCCCCC">validates somebody using public key</font>

937
00:39:43,270 --> 00:39:46,900
security that should legitimately have

938
00:39:46,089 --> 00:39:49,299
access to

939
00:39:46,900 --> 00:39:51,130
<font color="#CCCCCC">a</font><font color="#E5E5E5"> particular set of devices which is</font>

940
00:39:49,299 --> 00:39:54,940
really exciting because that's what we

941
00:39:51,130 --> 00:39:57,520
want as engineers you know as security

942
00:39:54,940 --> 00:39:59,529
guys you never<font color="#CCCCCC"> want to say oh yeah go</font>

943
00:39:57,520 --> 00:40:01,630
and disable jtag you should never have

944
00:39:59,529 --> 00:40:04,029
jtag accessible and in the end

945
00:40:01,630 --> 00:40:05,829
production that's actually bullshit you

946
00:40:04,029 --> 00:40:07,720
should never tell anybody that and the

947
00:40:05,829 --> 00:40:10,510
<font color="#E5E5E5">reason why is because it's not usable</font>

948
00:40:07,720 --> 00:40:13,209
right in the real world as an engineer I

949
00:40:10,510 --> 00:40:15,010
want to be able to<font color="#CCCCCC"> access jtag when a</font>

950
00:40:13,210 --> 00:40:16,539
system is failing and it gets shipped

951
00:40:15,010 --> 00:40:19,000
back to me and<font color="#CCCCCC"> I need to figure out why</font>

952
00:40:16,539 --> 00:40:21,309
it's failing that's exactly why jtag is

953
00:40:19,000 --> 00:40:22,809
there I don't want to disable a feature

954
00:40:21,309 --> 00:40:25,380
that's going to allow me to<font color="#CCCCCC"> learn more</font>

955
00:40:22,809 --> 00:40:28,480
about why my product is<font color="#E5E5E5"> a problem right</font>

956
00:40:25,380 --> 00:40:30,609
so the solution of that is instead<font color="#CCCCCC"> of</font>

957
00:40:28,480 --> 00:40:32,170
wasting a bunch of time using simplistic

958
00:40:30,609 --> 00:40:34,509
security models for something that's

959
00:40:32,170 --> 00:40:37,299
actually extremely important implement

960
00:40:34,510 --> 00:40:40,210
it correctly but use<font color="#CCCCCC"> it implement it as</font>

961
00:40:37,299 --> 00:40:41,710
an<font color="#E5E5E5"> option that people can opt into if</font>

962
00:40:40,210 --> 00:40:43,630
they feel they're going to be building

963
00:40:41,710 --> 00:40:45,700
technology for people that are in those

964
00:40:43,630 --> 00:40:48,849
situations where<font color="#CCCCCC"> the architectures are</font>

965
00:40:45,700 --> 00:40:51,250
required and for<font color="#E5E5E5"> us and IOT that's</font>

966
00:40:48,849 --> 00:40:53,230
definitely a critical piece right

967
00:40:51,250 --> 00:40:55,809
especially<font color="#CCCCCC"> if you're building IOT</font>

968
00:40:53,230 --> 00:40:58,660
technology that affects human life in

969
00:40:55,809 --> 00:41:01,900
any way<font color="#E5E5E5"> as in</font><font color="#CCCCCC"> telematic systems anything</font>

970
00:40:58,660 --> 00:41:05,529
to do with pacemakers you know blood

971
00:41:01,900 --> 00:41:07,690
types of systems blood sugar that kind

972
00:41:05,529 --> 00:41:09,099
of thing those are all<font color="#E5E5E5"> critical systems</font>

973
00:41:07,690 --> 00:41:11,109
and<font color="#CCCCCC"> those kinds</font><font color="#E5E5E5"> of systems need these</font>

974
00:41:09,099 --> 00:41:12,819
kinds of protections that way you can

975
00:41:11,109 --> 00:41:16,029
<font color="#CCCCCC">ensure that somebody has an altered</font><font color="#E5E5E5"> the</font>

976
00:41:12,819 --> 00:41:17,650
<font color="#E5E5E5">code or some kind of technology from the</font>

977
00:41:16,029 --> 00:41:20,349
<font color="#E5E5E5">point that the device has</font><font color="#CCCCCC"> been</font>

978
00:41:17,650 --> 00:41:22,690
manufactured to the<font color="#E5E5E5"> actual hand that</font>

979
00:41:20,349 --> 00:41:28,119
that's where the customer is actually

980
00:41:22,690 --> 00:41:29,710
using<font color="#E5E5E5"> it so application attacks I'm</font>

981
00:41:28,119 --> 00:41:31,390
really<font color="#E5E5E5"> only going to cover this briefly</font>

982
00:41:29,710 --> 00:41:34,809
i was going to<font color="#E5E5E5"> cover this more but</font><font color="#CCCCCC"> it's</font>

983
00:41:31,390 --> 00:41:36,609
<font color="#CCCCCC">actually not as fun as</font><font color="#E5E5E5"> i was</font><font color="#CCCCCC"> hoping it</font>

984
00:41:34,809 --> 00:41:38,380
was going to be in risk<font color="#E5E5E5"> 5 and the reason</font>

985
00:41:36,609 --> 00:41:39,910
why is because it's really<font color="#E5E5E5"> easy there</font>

986
00:41:38,380 --> 00:41:42,339
are a<font color="#E5E5E5"> couple of points that</font><font color="#CCCCCC"> i do want</font><font color="#E5E5E5"> to</font>

987
00:41:39,910 --> 00:41:46,390
make though that<font color="#CCCCCC"> are really important in</font>

988
00:41:42,339 --> 00:41:49,808
in risk<font color="#E5E5E5"> 5 risk 5 has similar models of</font>

989
00:41:46,390 --> 00:41:51,788
execution to something like arm so

990
00:41:49,809 --> 00:41:55,210
everybody in here I'm sure is familiar

991
00:41:51,789 --> 00:41:58,630
with<font color="#E5E5E5"> arm and familiar with thumb but are</font>

992
00:41:55,210 --> 00:42:00,470
<font color="#E5E5E5">you familiar with how arm execute thumb</font>

993
00:41:58,630 --> 00:42:05,300
and vice versa

994
00:42:00,470 --> 00:42:07,660
anybody quite a few hands does anybody

995
00:42:05,300 --> 00:42:10,369
want<font color="#E5E5E5"> to shout out the requirement of</font>

996
00:42:07,660 --> 00:42:15,319
moving<font color="#CCCCCC"> from one</font><font color="#E5E5E5"> our instruction set back</font>

997
00:42:10,369 --> 00:42:20,630
back<font color="#E5E5E5"> and forth to the other shuttle</font>

998
00:42:15,320 --> 00:42:22,280
adder exactly so an arm you have to jump

999
00:42:20,630 --> 00:42:25,220
to a certain type of address an<font color="#E5E5E5"> online</font>

1000
00:42:22,280 --> 00:42:28,190
address in<font color="#E5E5E5"> order to jump from arms to</font>

1001
00:42:25,220 --> 00:42:29,629
telomers on back to<font color="#E5E5E5"> arm right which is</font>

1002
00:42:28,190 --> 00:42:31,369
<font color="#E5E5E5">annoying because then that means you</font>

1003
00:42:29,630 --> 00:42:32,990
have<font color="#CCCCCC"> to have a certain you have</font><font color="#E5E5E5"> to have</font>

1004
00:42:31,369 --> 00:42:35,000
a certain bit pattern<font color="#CCCCCC"> in memory in order</font>

1005
00:42:32,990 --> 00:42:37,939
to execute certain type of code but

1006
00:42:35,000 --> 00:42:40,310
what's really cool in risk five if you

1007
00:42:37,940 --> 00:42:42,830
have the C extension or the compression

1008
00:42:40,310 --> 00:42:45,049
extension you can automatically execute

1009
00:42:42,830 --> 00:42:48,140
16-bit code without having those

1010
00:42:45,050 --> 00:42:49,880
contexts which problems so there's no

1011
00:42:48,140 --> 00:42:51,650
bit that<font color="#CCCCCC"> you have to set there's no</font>

1012
00:42:49,880 --> 00:42:53,720
unlined instruction that you have to hit

1013
00:42:51,650 --> 00:42:55,910
you can basically just jump to

1014
00:42:53,720 --> 00:42:57,830
compressed code and execute it directly

1015
00:42:55,910 --> 00:42:59,359
without any problem and that's<font color="#E5E5E5"> really</font>

1016
00:42:57,830 --> 00:43:01,779
<font color="#E5E5E5">cool from next ploy development</font>

1017
00:42:59,359 --> 00:43:04,940
perspective for two reasons number one

1018
00:43:01,780 --> 00:43:07,790
the shellcode payload that<font color="#CCCCCC"> you then</font>

1019
00:43:04,940 --> 00:43:09,230
insert into memory can be massively

1020
00:43:07,790 --> 00:43:11,000
smaller because you now you don't have

1021
00:43:09,230 --> 00:43:14,210
<font color="#E5E5E5">to worry about constantly figuring out a</font>

1022
00:43:11,000 --> 00:43:17,720
way to trigger your compressed code or

1023
00:43:14,210 --> 00:43:21,500
some alike for risk<font color="#E5E5E5"> 5 which is cool</font>

1024
00:43:17,720 --> 00:43:23,089
right<font color="#E5E5E5"> but even better is that if you're</font>

1025
00:43:21,500 --> 00:43:25,730
doing<font color="#E5E5E5"> something similar to return</font>

1026
00:43:23,089 --> 00:43:28,220
oriented programming now every single

1027
00:43:25,730 --> 00:43:32,000
32-bit instruction that's already in

1028
00:43:28,220 --> 00:43:33,830
memory on risk 5 is also<font color="#CCCCCC"> two 16-bit</font>

1029
00:43:32,000 --> 00:43:36,619
compressed instructions automatically

1030
00:43:33,830 --> 00:43:38,960
and you<font color="#E5E5E5"> never</font><font color="#CCCCCC"> have to you know jump to a</font>

1031
00:43:36,619 --> 00:43:41,780
certain address<font color="#E5E5E5"> or have a certain bit</font>

1032
00:43:38,960 --> 00:43:45,109
set in your<font color="#E5E5E5"> return address or whatever</font>

1033
00:43:41,780 --> 00:43:47,630
in order to reach that<font color="#CCCCCC"> type of code it's</font>

1034
00:43:45,109 --> 00:43:50,270
just immediately accessible so from a

1035
00:43:47,630 --> 00:43:53,300
<font color="#CCCCCC">rock perspective it's</font><font color="#E5E5E5"> actually really</font>

1036
00:43:50,270 --> 00:43:55,520
fun but otherwise it's actually quite

1037
00:43:53,300 --> 00:43:58,220
easy but it's really the<font color="#CCCCCC"> same as any</font>

1038
00:43:55,520 --> 00:43:59,750
risk that you've ever implemented the

1039
00:43:58,220 --> 00:44:01,040
compression thing is the really only

1040
00:43:59,750 --> 00:44:03,650
cool thing that I<font color="#CCCCCC"> wanted</font><font color="#E5E5E5"> to talk</font><font color="#CCCCCC"> about</font>

1041
00:44:01,040 --> 00:44:05,900
aside from one other<font color="#E5E5E5"> thing which is</font><font color="#CCCCCC"> that</font>

1042
00:44:03,650 --> 00:44:08,450
as I<font color="#E5E5E5"> mentioned earlier at the beginning</font>

1043
00:44:05,900 --> 00:44:10,970
<font color="#E5E5E5">of the talk risk</font><font color="#CCCCCC"> 5 by definition</font>

1044
00:44:08,450 --> 00:44:14,109
includes a 32-bit instruction set

1045
00:44:10,970 --> 00:44:17,930
architecture<font color="#E5E5E5"> 64-bit and 128</font>

1046
00:44:14,109 --> 00:44:21,319
so if you want to implement executable

1047
00:44:17,930 --> 00:44:23,180
code for 128 bit architecture you<font color="#E5E5E5"> can do</font>

1048
00:44:21,319 --> 00:44:27,560
that currently they don't explicitly

1049
00:44:23,180 --> 00:44:29,450
define what the<font color="#E5E5E5"> 128 bit versions of the</font>

1050
00:44:27,560 --> 00:44:31,460
instructions are in the document because

1051
00:44:29,450 --> 00:44:33,500
there's<font color="#CCCCCC"> really no reason</font><font color="#E5E5E5"> to they</font>

1052
00:44:31,460 --> 00:44:36,170
basically<font color="#E5E5E5"> tell you the definitions for</font>

1053
00:44:33,500 --> 00:44:38,450
the<font color="#CCCCCC"> 32-bit they have the 64-bit</font>

1054
00:44:36,170 --> 00:44:41,119
extrapolation of what it means to extend

1055
00:44:38,450 --> 00:44:44,569
<font color="#CCCCCC">to 64 bits and then you can extrapolate</font>

1056
00:44:41,119 --> 00:44:47,300
even further to 128 bit to basically

1057
00:44:44,569 --> 00:44:50,450
define the differential between each

1058
00:44:47,300 --> 00:44:52,369
architecture so if you're<font color="#CCCCCC"> interested in</font>

1059
00:44:50,450 --> 00:44:55,640
writing your own 128-bit exploit code

1060
00:44:52,369 --> 00:44:57,200
you can download<font color="#CCCCCC"> fabrice villard who is</font>

1061
00:44:55,640 --> 00:45:00,230
<font color="#E5E5E5">very well known brilliant brilliant</font>

1062
00:44:57,200 --> 00:45:03,919
<font color="#E5E5E5">hacker he was the</font><font color="#CCCCCC"> original author of Q</font>

1063
00:45:00,230 --> 00:45:05,869
<font color="#CCCCCC">EMU he wrote a risk 5 emulator called</font>

1064
00:45:03,920 --> 00:45:08,960
risk 5<font color="#E5E5E5"> EMU that's available on his</font>

1065
00:45:05,869 --> 00:45:13,790
website the large org it<font color="#E5E5E5"> currently</font>

1066
00:45:08,960 --> 00:45:15,950
allows or implement a<font color="#E5E5E5"> 100 128 bit</font>

1067
00:45:13,790 --> 00:45:19,550
instruction architecture so you can

1068
00:45:15,950 --> 00:45:22,609
<font color="#E5E5E5">actually today right 128 bit code and</font>

1069
00:45:19,550 --> 00:45:26,599
see how it works<font color="#CCCCCC"> I wrote a 128 or the</font>

1070
00:45:22,609 --> 00:45:27,500
<font color="#E5E5E5">first 128 exploit or demo exploit just</font>

1071
00:45:26,599 --> 00:45:29,510
for the hell of it because I thought

1072
00:45:27,500 --> 00:45:30,890
<font color="#CCCCCC">it'd be cool to</font><font color="#E5E5E5"> read the first one I'm</font>

1073
00:45:29,510 --> 00:45:32,300
not going<font color="#CCCCCC"> to demo it now because we</font>

1074
00:45:30,890 --> 00:45:34,190
don't have<font color="#E5E5E5"> time it's actually not as</font>

1075
00:45:32,300 --> 00:45:35,750
cool as<font color="#E5E5E5"> you would think</font><font color="#CCCCCC"> but the code is</font>

1076
00:45:34,190 --> 00:45:36,980
going to be available<font color="#E5E5E5"> on github so you</font>

1077
00:45:35,750 --> 00:45:40,220
can download<font color="#E5E5E5"> it from there</font><font color="#CCCCCC"> and play with</font>

1078
00:45:36,980 --> 00:45:41,839
yourself the other thing that<font color="#E5E5E5"> I want to</font>

1079
00:45:40,220 --> 00:45:44,450
mention about<font color="#CCCCCC"> the architecture saw the</font>

1080
00:45:41,839 --> 00:45:47,390
subtleties and risk<font color="#CCCCCC"> 5 is that there is</font>

1081
00:45:44,450 --> 00:45:51,430
an embedded subset so the embedded

1082
00:45:47,390 --> 00:45:54,319
subset of risk 5 or the e extension

1083
00:45:51,430 --> 00:45:56,930
basically takes the compression aspects

1084
00:45:54,319 --> 00:45:59,630
of risk 5 and gets rid of a bunch of

1085
00:45:56,930 --> 00:46:02,868
unnecessary stuff and reduces the amount

1086
00:45:59,630 --> 00:46:04,310
of registers from<font color="#CCCCCC"> 32 bit to 16 and the</font>

1087
00:46:02,869 --> 00:46:06,380
<font color="#E5E5E5">reason why I want to mention that is</font>

1088
00:46:04,310 --> 00:46:08,359
because exploitation in that environment

1089
00:46:06,380 --> 00:46:10,369
will be<font color="#E5E5E5"> slightly different because the</font>

1090
00:46:08,359 --> 00:46:12,348
calling model from from calling a

1091
00:46:10,369 --> 00:46:13,790
particular function<font color="#E5E5E5"> to another function</font>

1092
00:46:12,349 --> 00:46:15,770
is slightly slightly different if you're

1093
00:46:13,790 --> 00:46:19,279
writing buffer overflow code but more

1094
00:46:15,770 --> 00:46:21,079
importantly it's really cool from a cost

1095
00:46:19,280 --> 00:46:25,130
perspective because if you want to

1096
00:46:21,079 --> 00:46:27,530
further beat arm in development of

1097
00:46:25,130 --> 00:46:31,310
something similar to a cortex m0

1098
00:46:27,530 --> 00:46:34,540
<font color="#CCCCCC">plus or even a cortex m4 have you can</font>

1099
00:46:31,310 --> 00:46:38,779
reduce almost half of your silicon costs

1100
00:46:34,540 --> 00:46:41,240
by implementing the embedded variant of

1101
00:46:38,780 --> 00:46:42,590
the risk<font color="#E5E5E5"> 5 architecture which is 32-bit</font>

1102
00:46:41,240 --> 00:46:44,000
only but at that point if you're

1103
00:46:42,590 --> 00:46:45,470
building<font color="#CCCCCC"> those kinds of microcontrollers</font>

1104
00:46:44,000 --> 00:46:47,930
you really don't<font color="#CCCCCC"> care that's not</font>

1105
00:46:45,470 --> 00:46:50,180
<font color="#E5E5E5">necessary so that reduces your costs</font>

1106
00:46:47,930 --> 00:46:53,810
even further which is even wide to me

1107
00:46:50,180 --> 00:46:55,430
risk<font color="#E5E5E5"> 5 is even more exciting so I just</font>

1108
00:46:53,810 --> 00:46:57,560
want to<font color="#E5E5E5"> give a very brief shout out and</font>

1109
00:46:55,430 --> 00:47:00,310
thank you to these particular<font color="#CCCCCC"> people</font>

1110
00:46:57,560 --> 00:47:03,620
from the side five team and community

1111
00:47:00,310 --> 00:47:05,480
stephannie rear especially has been a

1112
00:47:03,620 --> 00:47:07,430
<font color="#E5E5E5">very interesting character to get to</font>

1113
00:47:05,480 --> 00:47:10,100
know he's very he's very brilliant and

1114
00:47:07,430 --> 00:47:11,720
he's<font color="#CCCCCC"> very involved in the</font><font color="#E5E5E5"> in the risk</font><font color="#CCCCCC"> 5</font>

1115
00:47:10,100 --> 00:47:13,670
community he's another security

1116
00:47:11,720 --> 00:47:15,470
researcher like myself but I think he's

1117
00:47:13,670 --> 00:47:18,020
more of an engineer he just has a really

1118
00:47:15,470 --> 00:47:19,970
good<font color="#E5E5E5"> knack for security in general but</font>

1119
00:47:18,020 --> 00:47:21,680
every single<font color="#CCCCCC"> thing that I've tried to</font>

1120
00:47:19,970 --> 00:47:23,930
implement he's always had a<font color="#E5E5E5"> comment on</font>

1121
00:47:21,680 --> 00:47:25,460
it's always been valid information so if

1122
00:47:23,930 --> 00:47:29,149
you're<font color="#E5E5E5"> interested</font><font color="#CCCCCC"> in following the risk</font>

1123
00:47:25,460 --> 00:47:31,880
five security you know environment or

1124
00:47:29,150 --> 00:47:34,040
ecosystem<font color="#CCCCCC"> as it grows i'll</font><font color="#E5E5E5"> probably be</font>

1125
00:47:31,880 --> 00:47:35,990
somebody<font color="#E5E5E5"> to follow the stefano rear is</font>

1126
00:47:34,040 --> 00:47:39,170
definitely somebody<font color="#CCCCCC"> follow</font><font color="#E5E5E5"> as well ron</font>

1127
00:47:35,990 --> 00:47:41,629
<font color="#CCCCCC">minik an old friend of mine from plan</font><font color="#E5E5E5"> 9</font>

1128
00:47:39,170 --> 00:47:44,930
he is currently at Google implementing

1129
00:47:41,630 --> 00:47:47,390
risk<font color="#CCCCCC"> 5 architectures for google he is an</font>

1130
00:47:44,930 --> 00:47:49,250
amazing engineer and he has<font color="#CCCCCC"> been for</font>

1131
00:47:47,390 --> 00:47:51,980
decades he has an extreme extremely

1132
00:47:49,250 --> 00:47:53,390
large amount<font color="#E5E5E5"> of experience he's</font>

1133
00:47:51,980 --> 00:47:56,720
<font color="#E5E5E5">definitely somebody to watch in the</font>

1134
00:47:53,390 --> 00:47:58,250
risks<font color="#CCCCCC"> 5 space as well as Megan walks who</font>

1135
00:47:56,720 --> 00:48:01,700
is basically one<font color="#CCCCCC"> of the lead engineers</font>

1136
00:47:58,250 --> 00:48:04,490
at sy5 she's an exceptional engineer and

1137
00:48:01,700 --> 00:48:06,379
she's also the lead of the well I think

1138
00:48:04,490 --> 00:48:08,270
<font color="#E5E5E5">she's the lead of a couple of teams but</font>

1139
00:48:06,380 --> 00:48:11,410
she's basically currently the lead of

1140
00:48:08,270 --> 00:48:13,910
the debugging specifications team so I

1141
00:48:11,410 --> 00:48:16,490
just like to briefly say thank you to

1142
00:48:13,910 --> 00:48:19,609
everybody for attending and this is the

1143
00:48:16,490 --> 00:48:22,279
URL for all the information<font color="#CCCCCC"> on risk</font><font color="#E5E5E5"> 5 in</font>

1144
00:48:19,610 --> 00:48:24,230
my security models and hacks so later

1145
00:48:22,280 --> 00:48:27,770
today<font color="#E5E5E5"> I'll actually upload all the</font>

1146
00:48:24,230 --> 00:48:29,390
exploit code and data for<font color="#E5E5E5"> the demo</font>

1147
00:48:27,770 --> 00:48:31,759
exploits that<font color="#E5E5E5"> I showed at the beginning</font>

1148
00:48:29,390 --> 00:48:35,000
<font color="#E5E5E5">of this talk all the code to implement</font>

1149
00:48:31,760 --> 00:48:38,450
that all the logic as to why it works

1150
00:48:35,000 --> 00:48:40,370
and the Linux<font color="#E5E5E5"> kernel alterations will be</font>

1151
00:48:38,450 --> 00:48:41,390
available at this website if you're

1152
00:48:40,370 --> 00:48:44,720
interested in<font color="#E5E5E5"> developing</font>

1153
00:48:41,390 --> 00:48:47,779
helping<font color="#E5E5E5"> 64-bit payloads shellcode</font>

1154
00:48:44,720 --> 00:48:49,819
essentially for risk<font color="#E5E5E5"> 5 there's code also</font>

1155
00:48:47,780 --> 00:48:52,010
available there<font color="#E5E5E5"> I have existing payload</font>

1156
00:48:49,820 --> 00:48:54,470
now that you can play with and use as

1157
00:48:52,010 --> 00:48:56,660
well as demo exploits I've talked with

1158
00:48:54,470 --> 00:48:58,009
the<font color="#CCCCCC"> metasploit team the metasploit team</font>

1159
00:48:56,660 --> 00:49:00,259
is going to take<font color="#CCCCCC"> some of</font><font color="#E5E5E5"> those payloads</font>

1160
00:48:58,010 --> 00:49:01,910
and incorporate them into<font color="#CCCCCC"> metasploit so</font>

1161
00:49:00,260 --> 00:49:04,580
in the near future you'll already have

1162
00:49:01,910 --> 00:49:06,230
risked<font color="#CCCCCC"> 5 shellcode available when more</font>

1163
00:49:04,580 --> 00:49:08,660
applications are available on the risks

1164
00:49:06,230 --> 00:49:11,000
5 architectures so that's going to<font color="#E5E5E5"> be</font>

1165
00:49:08,660 --> 00:49:13,040
the github to watch if you're interested

1166
00:49:11,000 --> 00:49:14,960
in hacking this architecture but

1167
00:49:13,040 --> 00:49:20,630
otherwise thanks<font color="#CCCCCC"> so</font><font color="#E5E5E5"> much for coming</font>

1168
00:49:14,960 --> 00:49:22,370
that's all thank<font color="#E5E5E5"> you thank</font><font color="#CCCCCC"> you dawn do</font>

1169
00:49:20,630 --> 00:49:27,200
we have time for<font color="#CCCCCC"> questions we do great</font>

1170
00:49:22,370 --> 00:49:30,440
any questions from the floor or would

1171
00:49:27,200 --> 00:49:32,680
you<font color="#CCCCCC"> prefer it off stage yeah oh ok this</font>

1172
00:49:30,440 --> 00:49:32,680
one

1173
00:49:42,840 --> 00:49:47,460
is there anything in the risk 5

1174
00:49:45,420 --> 00:49:48,960
specification that gives some assurance

1175
00:49:47,460 --> 00:49:51,420
that the instructions are executed

1176
00:49:48,960 --> 00:49:54,390
correctly so we<font color="#CCCCCC"> are if they're fat</font>

1177
00:49:51,420 --> 00:49:56,310
decoded and executed correctly can you

1178
00:49:54,390 --> 00:49:58,620
set it again some of that was model so

1179
00:49:56,310 --> 00:50:01,290
the instructions in<font color="#E5E5E5"> verse 5 when they're</font>

1180
00:49:58,620 --> 00:50:03,210
fed decoded and executed is there any

1181
00:50:01,290 --> 00:50:07,020
assurance that this is done correctly oh

1182
00:50:03,210 --> 00:50:09,270
I seriously so the risk<font color="#CCCCCC"> five privileged</font>

1183
00:50:07,020 --> 00:50:12,600
architecture the only protections that

1184
00:50:09,270 --> 00:50:14,759
you really get is<font color="#CCCCCC"> the definition of each</font>

1185
00:50:12,600 --> 00:50:17,069
layer of privilege there is no

1186
00:50:14,760 --> 00:50:20,640
specification currently that identifies

1187
00:50:17,070 --> 00:50:23,880
validation at that level it's<font color="#CCCCCC"> definitely</font>

1188
00:50:20,640 --> 00:50:25,680
something that somewhat i can't speak

1189
00:50:23,880 --> 00:50:27,360
<font color="#CCCCCC">for other organizations but i know that</font>

1190
00:50:25,680 --> 00:50:30,000
<font color="#E5E5E5">other organizations are implementing</font>

1191
00:50:27,360 --> 00:50:33,270
some kind of basically attestation at

1192
00:50:30,000 --> 00:50:35,340
the instruction level but<font color="#CCCCCC"> i have no idea</font>

1193
00:50:33,270 --> 00:50:37,830
<font color="#E5E5E5">how far along that is and it's not</font><font color="#CCCCCC"> a</font>

1194
00:50:35,340 --> 00:50:39,870
speck so<font color="#E5E5E5"> i'll say</font><font color="#CCCCCC"> that so I</font><font color="#E5E5E5"> think in the</font>

1195
00:50:37,830 --> 00:50:41,670
future that's definitely<font color="#CCCCCC"> something that</font>

1196
00:50:39,870 --> 00:50:43,200
should be added the specification but

1197
00:50:41,670 --> 00:50:44,820
it's not currently but there are

1198
00:50:43,200 --> 00:50:47,759
implemented implementations that are in

1199
00:50:44,820 --> 00:50:53,130
the works as far as I know so yeah no

1200
00:50:47,760 --> 00:50:55,650
problem<font color="#E5E5E5"> any other questions no okay well</font>

1201
00:50:53,130 --> 00:50:56,670
<font color="#E5E5E5">thank you very much dawn I'm sorry we</font>

1202
00:50:55,650 --> 00:50:58,500
didn't have time to do a<font color="#E5E5E5"> quick</font>

1203
00:50:56,670 --> 00:51:00,420
introduction but as you all know founder

1204
00:50:58,500 --> 00:51:02,880
of let mall security and thank you<font color="#CCCCCC"> very</font>

1205
00:51:00,420 --> 00:51:04,530
<font color="#E5E5E5">much</font><font color="#CCCCCC"> for your response architecture talk</font>

1206
00:51:02,880 --> 00:51:08,459
today yeah<font color="#E5E5E5"> cheers thanks everybody</font>

1207
00:51:04,530 --> 00:51:08,459
[Applause]

