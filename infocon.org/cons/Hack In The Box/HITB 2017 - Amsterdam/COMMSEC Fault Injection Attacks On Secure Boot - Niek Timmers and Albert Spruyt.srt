1
00:00:11,220 --> 00:00:14,970
my name is Nick<font color="#CCCCCC"> gamers</font><font color="#E5E5E5"> and this is my</font>

2
00:00:13,530 --> 00:00:16,590
dear friend Albert's flight and we are

3
00:00:14,970 --> 00:00:18,960
here to<font color="#CCCCCC"> talk</font><font color="#E5E5E5"> a little bit about fault</font>

4
00:00:16,590 --> 00:00:20,430
injection attacks on secure boot today's

5
00:00:18,960 --> 00:00:22,680
talk<font color="#CCCCCC"> will start</font><font color="#E5E5E5"> off with some</font>

6
00:00:20,430 --> 00:00:24,600
introductions for fault injection and

7
00:00:22,680 --> 00:00:27,900
secure boot afterwards all but will take

8
00:00:24,600 --> 00:00:29,939
over and<font color="#CCCCCC"> let out some bypasses of secure</font>

9
00:00:27,900 --> 00:00:31,409
boot using fault injection during<font color="#E5E5E5"> which</font>

10
00:00:29,939 --> 00:00:33,960
<font color="#CCCCCC">you will touch upon mitigation</font>

11
00:00:31,410 --> 00:00:36,420
strategies and attackers practicalities

12
00:00:33,960 --> 00:00:38,280
one<font color="#E5E5E5"> disclaimer here we are not really</font>

13
00:00:36,420 --> 00:00:40,290
<font color="#E5E5E5">talking</font><font color="#CCCCCC"> about you</font><font color="#E5E5E5"> feel secure boot</font>

14
00:00:38,280 --> 00:00:42,390
really talking about to bite area secure

15
00:00:40,290 --> 00:00:46,110
boot implementations and implemented on

16
00:00:42,390 --> 00:00:48,090
secure embedded systems we<font color="#E5E5E5"> are both</font>

17
00:00:46,110 --> 00:00:49,920
security analysis<font color="#CCCCCC"> risker very test the</font>

18
00:00:48,090 --> 00:00:51,990
security of different products and

19
00:00:49,920 --> 00:00:54,750
devices and at-risk where the company is

20
00:00:51,990 --> 00:00:56,940
basically split into two parts one unit

21
00:00:54,750 --> 00:00:59,910
is primarily focusing on making hardware

22
00:00:56,940 --> 00:01:02,129
in order to do<font color="#E5E5E5"> side general decks or</font>

23
00:00:59,910 --> 00:01:05,850
fault injection attacks and<font color="#CCCCCC"> the other</font>

24
00:01:02,130 --> 00:01:07,170
unit which we<font color="#E5E5E5"> are part of the sex ed</font>

25
00:01:05,850 --> 00:01:10,110
security for<font color="#CCCCCC"> all sorts</font><font color="#E5E5E5"> of</font><font color="#CCCCCC"> different</font>

26
00:01:07,170 --> 00:01:12,090
lines including secure boot

27
00:01:10,110 --> 00:01:13,590
implementations and this dog who

28
00:01:12,090 --> 00:01:16,860
actually shows a<font color="#E5E5E5"> little bit of both of</font>

29
00:01:13,590 --> 00:01:18,450
these units first of all<font color="#E5E5E5"> I would like to</font>

30
00:01:16,860 --> 00:01:20,280
<font color="#CCCCCC">start with a definition of fold</font>

31
00:01:18,450 --> 00:01:22,170
injection so when we talk<font color="#E5E5E5"> about fault</font>

32
00:01:20,280 --> 00:01:23,940
injection we really mean that you can

33
00:01:22,170 --> 00:01:26,790
<font color="#E5E5E5">change the intended behavior of a target</font>

34
00:01:23,940 --> 00:01:28,259
by injecting a glitch or fault for

35
00:01:26,790 --> 00:01:30,300
example if you<font color="#CCCCCC"> look at the following</font>

36
00:01:28,260 --> 00:01:32,550
code you can see that<font color="#CCCCCC"> this code is used</font>

37
00:01:30,300 --> 00:01:35,310
to open a door<font color="#E5E5E5"> based on the validity of</font>

38
00:01:32,550 --> 00:01:37,110
the key so the<font color="#E5E5E5"> idea is that we using</font>

39
00:01:35,310 --> 00:01:38,700
fault injection we can change the

40
00:01:37,110 --> 00:01:40,830
intended behavior of the skull

41
00:01:38,700 --> 00:01:42,659
construction so that means if we can do

42
00:01:40,830 --> 00:01:44,280
this and if<font color="#E5E5E5"> we inject this glitch at the</font>

43
00:01:42,659 --> 00:01:48,240
right moment in time we can<font color="#CCCCCC"> actually</font>

44
00:01:44,280 --> 00:01:49,799
open this door with an incorrect key but

45
00:01:48,240 --> 00:01:52,830
it makes you wonder how<font color="#CCCCCC"> can we introduce</font>

46
00:01:49,799 --> 00:01:54,900
<font color="#E5E5E5">it falls well the the academia studied</font>

47
00:01:52,830 --> 00:01:57,630
various different techniques some of its

48
00:01:54,900 --> 00:01:59,970
are available to the masses some are a

49
00:01:57,630 --> 00:02:01,440
little bit less available for example

50
00:01:59,970 --> 00:02:03,450
optical<font color="#E5E5E5"> fold injection you need very</font>

51
00:02:01,440 --> 00:02:05,070
sophisticated tooling but they give you

52
00:02:03,450 --> 00:02:06,540
an idea how voltage fault injection

53
00:02:05,070 --> 00:02:09,060
works which is<font color="#E5E5E5"> something that's</font>

54
00:02:06,540 --> 00:02:10,979
available to the masses we can see that

55
00:02:09,060 --> 00:02:12,930
<font color="#CCCCCC">there is a certain voltage signal</font>

56
00:02:10,979 --> 00:02:15,989
provided to the target<font color="#E5E5E5"> and the idea is</font>

57
00:02:12,930 --> 00:02:18,090
<font color="#E5E5E5">that we can inject a glitch or a dip in</font>

58
00:02:15,989 --> 00:02:20,220
this photo signal at the<font color="#E5E5E5"> right moment in</font>

59
00:02:18,090 --> 00:02:22,500
time not too soft and not too strong in

60
00:02:20,220 --> 00:02:24,100
order to<font color="#CCCCCC"> change the antennas behavior of</font>

61
00:02:22,500 --> 00:02:27,100
the target without effect

62
00:02:24,100 --> 00:02:31,090
it's continuation so<font color="#E5E5E5"> after the glades</font>

63
00:02:27,100 --> 00:02:32,799
the device<font color="#E5E5E5"> operators normal again and</font>

64
00:02:31,090 --> 00:02:35,650
the type of folds we can<font color="#CCCCCC"> actually</font>

65
00:02:32,800 --> 00:02:37,210
achieve using fault injection are very

66
00:02:35,650 --> 00:02:39,220
different and to give you<font color="#E5E5E5"> some ideas</font>

67
00:02:37,210 --> 00:02:41,350
what type of faults are possible we can

68
00:02:39,220 --> 00:02:43,300
<font color="#E5E5E5">for example</font><font color="#CCCCCC"> affect hardware within the</font>

69
00:02:41,350 --> 00:02:45,100
target<font color="#E5E5E5"> so for example we can change the</font>

70
00:02:43,300 --> 00:02:47,440
data<font color="#E5E5E5"> that is stored in instructions or</font>

71
00:02:45,100 --> 00:02:50,560
data is actually transferred over a bus

72
00:02:47,440 --> 00:02:53,109
so while<font color="#E5E5E5"> it's</font><font color="#CCCCCC"> in transit also we can</font>

73
00:02:50,560 --> 00:02:55,150
affect<font color="#CCCCCC"> the subsystem that's responsible</font>

74
00:02:53,110 --> 00:02:57,730
for<font color="#CCCCCC"> executing software for example the</font>

75
00:02:55,150 --> 00:03:00,790
arm subsystem and one thing we<font color="#E5E5E5"> can do</font>

76
00:02:57,730 --> 00:03:02,560
there is for instruction corruption so

77
00:03:00,790 --> 00:03:05,290
what we can<font color="#E5E5E5"> achieve is the first line of</font>

78
00:03:02,560 --> 00:03:07,330
this snippet shows<font color="#CCCCCC"> XE</font><font color="#E5E5E5"> the original</font>

79
00:03:05,290 --> 00:03:09,070
instruction and using fault injection we

80
00:03:07,330 --> 00:03:10,690
can<font color="#E5E5E5"> change a bit in the instructions</font><font color="#CCCCCC"> in</font>

81
00:03:09,070 --> 00:03:12,250
<font color="#CCCCCC">coding in order to change this</font>

82
00:03:10,690 --> 00:03:14,500
instruction to something completely else

83
00:03:12,250 --> 00:03:18,040
and depending on the amount of bit

84
00:03:14,500 --> 00:03:20,410
changes this can range from changing the

85
00:03:18,040 --> 00:03:21,820
operands or the opcode itself and in

86
00:03:20,410 --> 00:03:23,560
similar fashion there is actually

87
00:03:21,820 --> 00:03:25,239
instruction skipping<font color="#E5E5E5"> and that means</font><font color="#CCCCCC"> that</font>

88
00:03:23,560 --> 00:03:27,460
the original instruction is changed into

89
00:03:25,240 --> 00:03:29,530
a variant there's no side effect on the

90
00:03:27,460 --> 00:03:31,650
continuation of the target other than

91
00:03:29,530 --> 00:03:34,960
not executing the original instruction

92
00:03:31,650 --> 00:03:37,900
for example we see here is that the

93
00:03:34,960 --> 00:03:39,910
contents of our one originally went into

94
00:03:37,900 --> 00:03:44,350
r0 but the corrupted instruction moves

95
00:03:39,910 --> 00:03:46,720
to condos are 0 into r0 so how and why

96
00:03:44,350 --> 00:03:48,250
is this useful for example if you<font color="#E5E5E5"> look</font>

97
00:03:46,720 --> 00:03:51,250
at this generic secure boot

98
00:03:48,250 --> 00:03:53,170
implementation in or this generic

99
00:03:51,250 --> 00:03:54,610
embedded system we see<font color="#E5E5E5"> that there's</font>

100
00:03:53,170 --> 00:03:56,769
three components<font color="#E5E5E5"> there is a</font>

101
00:03:54,610 --> 00:03:58,990
system-on-chip that includes various

102
00:03:56,770 --> 00:04:00,820
different components so there's a cpu

103
00:03:58,990 --> 00:04:03,040
there's some home code there<font color="#E5E5E5"> is a drum</font>

104
00:04:00,820 --> 00:04:04,900
and there's two external components so

105
00:04:03,040 --> 00:04:06,970
there's ddr chip to execute software

106
00:04:04,900 --> 00:04:09,040
from and there's a flash chip to store

107
00:04:06,970 --> 00:04:11,680
<font color="#CCCCCC">the software own when the device is</font>

108
00:04:09,040 --> 00:04:13,299
powered off if you want<font color="#E5E5E5"> to make this</font>

109
00:04:11,680 --> 00:04:15,910
embedded system secure you have a

110
00:04:13,300 --> 00:04:17,950
problem<font color="#E5E5E5"> because the integrity</font><font color="#CCCCCC"> and</font>

111
00:04:15,910 --> 00:04:20,589
confidentiality is not assured and what

112
00:04:17,950 --> 00:04:22,770
we see is that<font color="#E5E5E5"> the first</font><font color="#CCCCCC"> days bootloader</font>

113
00:04:20,589 --> 00:04:25,900
is low in 2's<font color="#E5E5E5"> ROM which is used to</font>

114
00:04:22,770 --> 00:04:27,990
initialize ddr after which the second

115
00:04:25,900 --> 00:04:32,340
stage bootloader is loaded into detail

116
00:04:27,990 --> 00:04:34,570
so this mechanism that actually<font color="#E5E5E5"> assured</font>

117
00:04:32,340 --> 00:04:36,679
the integrity and potentially

118
00:04:34,570 --> 00:04:40,400
confidentiality is typically

119
00:04:36,680 --> 00:04:42,289
to a secure boot a secure boot can be

120
00:04:40,400 --> 00:04:44,870
implemented in different ways and

121
00:04:42,289 --> 00:04:47,030
typically it can be different between

122
00:04:44,870 --> 00:04:50,300
these implementations however most of

123
00:04:47,030 --> 00:04:51,500
them follow a similar concept is<font color="#CCCCCC"> that</font>

124
00:04:50,300 --> 00:04:53,539
there is actually<font color="#E5E5E5"> a chain of trust</font>

125
00:04:51,500 --> 00:04:55,639
implemented that is very similar to the

126
00:04:53,539 --> 00:04:57,680
PTI file in browsers so they implement

127
00:04:55,639 --> 00:04:59,780
the root<font color="#CCCCCC"> of trust using immutable code</font>

128
00:04:57,680 --> 00:05:01,550
and key so in this case that<font color="#E5E5E5"> is an</font>

129
00:04:59,780 --> 00:05:03,559
internal<font color="#E5E5E5"> home so that is the</font><font color="#CCCCCC"> first code</font>

130
00:05:01,550 --> 00:05:05,690
is executed after power-on reset and

131
00:05:03,560 --> 00:05:07,960
there's a public key and both cannot

132
00:05:05,690 --> 00:05:10,639
change their fixed inside the system and

133
00:05:07,960 --> 00:05:12,409
this code is actually<font color="#E5E5E5"> used to load and</font>

134
00:05:10,639 --> 00:05:16,400
authenticate the first dates on flash

135
00:05:12,410 --> 00:05:18,289
and a more sophisticated version

136
00:05:16,400 --> 00:05:19,729
actually<font color="#E5E5E5"> also provide confidentiality</font>

137
00:05:18,289 --> 00:05:21,949
and that means<font color="#E5E5E5"> that</font><font color="#CCCCCC"> there's</font><font color="#E5E5E5"> also</font>

138
00:05:19,729 --> 00:05:23,990
<font color="#E5E5E5">symmetric key available to this code</font>

139
00:05:21,949 --> 00:05:27,979
this can be<font color="#CCCCCC"> used</font><font color="#E5E5E5"> to decrypt the bailout</font>

140
00:05:23,990 --> 00:05:30,229
before it's authenticated however in

141
00:05:27,979 --> 00:05:32,240
reality secure boot typically consists

142
00:05:30,229 --> 00:05:33,800
of multiple stages for<font color="#E5E5E5"> example if you</font>

143
00:05:32,240 --> 00:05:36,080
look<font color="#CCCCCC"> at the</font><font color="#E5E5E5"> Armed Forces firmware</font>

144
00:05:33,800 --> 00:05:38,150
reference implementation we see<font color="#E5E5E5"> that</font>

145
00:05:36,080 --> 00:05:40,190
there's multiple stages executed after

146
00:05:38,150 --> 00:05:41,620
each other which all authenticate each

147
00:05:40,190 --> 00:05:43,610
other before they are executed

148
00:05:41,620 --> 00:05:45,830
effectively implementing<font color="#E5E5E5"> a chain of</font>

149
00:05:43,610 --> 00:05:49,760
trust and effectively<font color="#E5E5E5"> this is secure</font>

150
00:05:45,830 --> 00:05:51,320
boot but<font color="#E5E5E5"> this makes you think</font><font color="#CCCCCC"> if there's</font>

151
00:05:49,760 --> 00:05:52,340
multiple stages involved and their

152
00:05:51,320 --> 00:05:55,190
software involved and these

153
00:05:52,340 --> 00:05:56,719
implementations are likely logically

154
00:05:55,190 --> 00:05:58,070
flawed it means<font color="#E5E5E5"> that we do not need a</font>

155
00:05:56,720 --> 00:05:59,930
hardware attack but<font color="#E5E5E5"> we can actually use</font>

156
00:05:58,070 --> 00:06:02,090
<font color="#CCCCCC">a</font><font color="#E5E5E5"> software explore it in order to bypass</font>

157
00:05:59,930 --> 00:06:03,349
secure boot and this is<font color="#E5E5E5"> very true and</font>

158
00:06:02,090 --> 00:06:05,780
<font color="#E5E5E5">over the years we've seen numerous</font>

159
00:06:03,349 --> 00:06:09,259
examples where actually secure boot is

160
00:06:05,780 --> 00:06:11,270
bypassed in a logical manner however one

161
00:06:09,259 --> 00:06:13,280
thing to realize is that these boot

162
00:06:11,270 --> 00:06:14,690
stages are typically consisting of a

163
00:06:13,280 --> 00:06:17,210
small code base and<font color="#E5E5E5"> that means that the</font>

164
00:06:14,690 --> 00:06:19,599
logical text service is not that big and

165
00:06:17,210 --> 00:06:21,948
that means<font color="#E5E5E5"> that there's likely of</font>

166
00:06:19,599 --> 00:06:23,930
implementations out there that are not

167
00:06:21,949 --> 00:06:27,560
logically fault and especially<font color="#CCCCCC"> for more</font>

168
00:06:23,930 --> 00:06:29,330
mature products so<font color="#E5E5E5"> you see it in such</font>

169
00:06:27,560 --> 00:06:31,250
situation when you want to bypass secure

170
00:06:29,330 --> 00:06:33,050
boot you need to resort to another

171
00:06:31,250 --> 00:06:36,110
attack and one<font color="#E5E5E5"> of those attacks is</font>

172
00:06:33,050 --> 00:06:39,050
actually fault injection however there

173
00:06:36,110 --> 00:06:40,340
are some drawbacks for performing fault

174
00:06:39,050 --> 00:06:43,340
injection compared to software

175
00:06:40,340 --> 00:06:44,989
exploitation for most of the fault

176
00:06:43,340 --> 00:06:47,419
injection techniques we actually need to

177
00:06:44,990 --> 00:06:49,340
<font color="#E5E5E5">make modifications to the target so</font><font color="#CCCCCC"> that</font>

178
00:06:47,419 --> 00:06:50,639
means that<font color="#CCCCCC"> you have</font><font color="#E5E5E5"> to be invasive for</font>

179
00:06:49,340 --> 00:06:52,198
example if you want to do

180
00:06:50,639 --> 00:06:54,360
fault injection you need to make

181
00:06:52,199 --> 00:06:56,639
modifications to<font color="#E5E5E5"> the PCB in order to</font>

182
00:06:54,360 --> 00:06:59,909
<font color="#E5E5E5">supply your own voltage to the target</font>

183
00:06:56,639 --> 00:07:01,889
<font color="#E5E5E5">and also for example for optical fault</font>

184
00:06:59,909 --> 00:07:03,960
injection if you want to shoot<font color="#E5E5E5"> the later</font>

185
00:07:01,889 --> 00:07:06,180
at the chip you need to probably open

186
00:07:03,960 --> 00:07:09,448
the package with chemicals or something

187
00:07:06,180 --> 00:07:11,039
else and also<font color="#E5E5E5"> it means because you need</font>

188
00:07:09,449 --> 00:07:12,840
<font color="#CCCCCC">to apply certain tooling to</font><font color="#E5E5E5"> the target</font>

189
00:07:11,039 --> 00:07:15,779
you<font color="#CCCCCC"> need to have a physical presence to</font>

190
00:07:12,840 --> 00:07:17,340
the target and also compared<font color="#E5E5E5"> to software</font>

191
00:07:15,779 --> 00:07:19,770
exploitation is typically a little bit

192
00:07:17,340 --> 00:07:21,419
more<font color="#CCCCCC"> expensive because you need</font>

193
00:07:19,770 --> 00:07:24,539
additional tooling other than your

194
00:07:21,419 --> 00:07:27,568
workstation or your laptop<font color="#E5E5E5"> however the</font>

195
00:07:24,539 --> 00:07:29,490
advantages are significant and all

196
00:07:27,569 --> 00:07:31,229
weirdo going into detail more about this

197
00:07:29,490 --> 00:07:32,729
you<font color="#E5E5E5"> don't really need a logical</font>

198
00:07:31,229 --> 00:07:35,969
vulnerability to bypass secure boot

199
00:07:32,729 --> 00:07:38,008
using fault injection and the standard

200
00:07:35,969 --> 00:07:40,529
technology so the embedded technology

201
00:07:38,009 --> 00:07:42,719
you<font color="#E5E5E5"> are facing today is not properly</font>

202
00:07:40,529 --> 00:07:46,860
protected yet against the fault

203
00:07:42,719 --> 00:07:48,330
injection attacks and especially it

204
00:07:46,860 --> 00:07:50,039
becomes relevant to use such a

205
00:07:48,330 --> 00:07:51,449
sophisticated hardware attack and

206
00:07:50,039 --> 00:07:53,520
there's actually<font color="#E5E5E5"> assets available during</font>

207
00:07:51,449 --> 00:07:55,229
boot which are not available<font color="#E5E5E5"> after boot</font>

208
00:07:53,520 --> 00:07:57,240
because<font color="#CCCCCC"> after boot there's a lot of</font>

209
00:07:55,229 --> 00:07:59,669
software actually<font color="#E5E5E5"> executing for example</font>

210
00:07:57,240 --> 00:08:02,430
<font color="#CCCCCC">Linux kernel and the chances</font><font color="#E5E5E5"> of this</font>

211
00:07:59,669 --> 00:08:04,799
being logical fold is much higher so

212
00:08:02,430 --> 00:08:07,229
some acids that can be available<font color="#CCCCCC"> only</font>

213
00:08:04,800 --> 00:08:08,909
during boot<font color="#CCCCCC"> is</font><font color="#E5E5E5"> for example the secure</font>

214
00:08:07,229 --> 00:08:11,460
boot code itself so for example the

215
00:08:08,909 --> 00:08:13,139
wrong code it is<font color="#E5E5E5"> common</font><font color="#CCCCCC"> practice after</font>

216
00:08:11,460 --> 00:08:15,479
the home code and same is executing to

217
00:08:13,139 --> 00:08:17,279
map this out of memory so if you break

218
00:08:15,479 --> 00:08:18,870
into the system using a kernel exploits

219
00:08:17,279 --> 00:08:20,849
you cannot access this code anymore and

220
00:08:18,870 --> 00:08:23,159
this code can be used for<font color="#E5E5E5"> example</font><font color="#CCCCCC"> to</font>

221
00:08:20,849 --> 00:08:24,539
identify logic vulnerability or there

222
00:08:23,159 --> 00:08:27,360
might be secrets in this code available

223
00:08:24,539 --> 00:08:29,068
for example the decryption keys to

224
00:08:27,360 --> 00:08:31,680
decrypt the first stage from flash might

225
00:08:29,069 --> 00:08:33,060
actually be in this code and if secure

226
00:08:31,680 --> 00:08:34,979
art where is used to perform this

227
00:08:33,059 --> 00:08:37,018
decryption this<font color="#CCCCCC"> hardware might be might</font>

228
00:08:34,979 --> 00:08:38,820
be disabled after boot or the keys that

229
00:08:37,019 --> 00:08:42,899
are used for decryption might actually

230
00:08:38,820 --> 00:08:44,550
be made inaccessible or unusable and in

231
00:08:42,899 --> 00:08:46,459
order to perform fault injection as

232
00:08:44,550 --> 00:08:49,199
mentioned we need tooling and nowadays

233
00:08:46,459 --> 00:08:51,420
for several fault injection techniques

234
00:08:49,199 --> 00:08:53,519
the tooling is becoming easier available

235
00:08:51,420 --> 00:08:54,839
and that's<font color="#E5E5E5"> especially due to some open</font>

236
00:08:53,519 --> 00:08:57,690
source initiatives like the chip

237
00:08:54,839 --> 00:08:59,310
riskware which is an<font color="#E5E5E5"> FBI based platform</font>

238
00:08:57,690 --> 00:09:01,529
which can be used can be bought for a

239
00:08:59,310 --> 00:09:03,790
couple hundred euros I think and<font color="#CCCCCC"> this</font>

240
00:09:01,529 --> 00:09:06,850
can be perfectly used to attacks

241
00:09:03,790 --> 00:09:08,199
systems however at the<font color="#CCCCCC"> disco views are</font>

242
00:09:06,850 --> 00:09:11,500
announced tooling which is commercially

243
00:09:08,200 --> 00:09:12,910
available but both platforms they are

244
00:09:11,500 --> 00:09:15,690
designed<font color="#CCCCCC"> to rather than fpga which</font>

245
00:09:12,910 --> 00:09:20,050
allows you to perform fault injection

246
00:09:15,690 --> 00:09:21,730
and this tooling is typically used in a

247
00:09:20,050 --> 00:09:23,680
setup like this and there's a

248
00:09:21,730 --> 00:09:26,290
workstation of course where you have

249
00:09:23,680 --> 00:09:28,150
most of your software running that is

250
00:09:26,290 --> 00:09:30,610
<font color="#E5E5E5">able to communicate with the glitching</font>

251
00:09:28,150 --> 00:09:32,740
device so it provides instructions in

252
00:09:30,610 --> 00:09:34,750
order to in order to what to do and

253
00:09:32,740 --> 00:09:37,290
there is a<font color="#CCCCCC"> communication channel towards</font>

254
00:09:34,750 --> 00:09:40,750
the target and the glitching device

255
00:09:37,290 --> 00:09:42,010
actually has a few inputs and outputs

256
00:09:40,750 --> 00:09:44,410
which are used to perform the fault

257
00:09:42,010 --> 00:09:46,569
injection attack for example if it's

258
00:09:44,410 --> 00:09:48,430
possible<font color="#E5E5E5"> the target can send a signal to</font>

259
00:09:46,570 --> 00:09:50,590
the<font color="#E5E5E5"> glitter in order to tell the glitter</font>

260
00:09:48,430 --> 00:09:52,750
went to inject a glitch which is very

261
00:09:50,590 --> 00:09:54,640
essential for fault injection and of

262
00:09:52,750 --> 00:09:56,350
<font color="#CCCCCC">course if you're</font><font color="#E5E5E5"> doing a voltage fault</font>

263
00:09:54,640 --> 00:09:58,300
injection you won't have an arbitrary

264
00:09:56,350 --> 00:10:00,430
VCC signal that you can supply to the

265
00:09:58,300 --> 00:10:02,680
target so that's<font color="#E5E5E5"> the signal going into</font>

266
00:10:00,430 --> 00:10:04,930
the target<font color="#E5E5E5"> and then whenever the setup</font>

267
00:10:02,680 --> 00:10:06,640
is actually in an errand estate we need

268
00:10:04,930 --> 00:10:09,099
to reset the target into a known state

269
00:10:06,640 --> 00:10:11,050
and this can be done<font color="#CCCCCC"> using the reset</font>

270
00:10:09,100 --> 00:10:15,940
signal typically<font color="#E5E5E5"> exposed on the embedded</font>

271
00:10:11,050 --> 00:10:18,130
system itself however in practice fault

272
00:10:15,940 --> 00:10:19,900
injection setup typically looks a little

273
00:10:18,130 --> 00:10:22,090
bit more like this so we have to evict

274
00:10:19,900 --> 00:10:23,890
them in the middle<font color="#E5E5E5"> and there's a whole</font>

275
00:10:22,090 --> 00:10:25,960
<font color="#E5E5E5">bunch of different</font><font color="#CCCCCC"> cables tied to the</font>

276
00:10:23,890 --> 00:10:28,540
board in<font color="#CCCCCC"> order to perform the fault</font>

277
00:10:25,960 --> 00:10:30,850
injection test efficiently so for

278
00:10:28,540 --> 00:10:32,770
example what you see here<font color="#CCCCCC"> is that we put</font>

279
00:10:30,850 --> 00:10:34,690
a probe on top of the chip in order to

280
00:10:32,770 --> 00:10:36,939
take<font color="#CCCCCC"> power</font><font color="#E5E5E5"> measurements to have an idea</font>

281
00:10:34,690 --> 00:10:38,830
what exactly is going<font color="#E5E5E5"> on in the chip in</font>

282
00:10:36,940 --> 00:10:41,170
order to time the attacks because you

283
00:10:38,830 --> 00:10:42,730
have to realize<font color="#CCCCCC"> that after boot it</font>

284
00:10:41,170 --> 00:10:44,290
typically takes fight along<font color="#E5E5E5"> well until</font>

285
00:10:42,730 --> 00:10:47,440
the moment is you want to glitch and

286
00:10:44,290 --> 00:10:49,050
this actually<font color="#E5E5E5"> helps you doing that so</font>

287
00:10:47,440 --> 00:10:50,860
this<font color="#E5E5E5"> brings us to the end of the</font>

288
00:10:49,050 --> 00:10:52,900
introduction and<font color="#E5E5E5"> I would like</font><font color="#CCCCCC"> to give</font>

289
00:10:50,860 --> 00:10:57,400
the<font color="#E5E5E5"> word to overt and he will</font><font color="#CCCCCC"> continue</font>

290
00:10:52,900 --> 00:10:59,650
with his part of the top thank you<font color="#CCCCCC"> okay</font>

291
00:10:57,400 --> 00:11:03,790
so Nick just<font color="#E5E5E5"> gave us an introduction on</font>

292
00:10:59,650 --> 00:11:06,280
secure boot and fault injection and how

293
00:11:03,790 --> 00:11:08,589
to make<font color="#E5E5E5"> it set up so let's now get</font>

294
00:11:06,280 --> 00:11:13,630
started and let's try<font color="#E5E5E5"> to actually bypass</font>

295
00:11:08,590 --> 00:11:15,760
secure booth at the<font color="#E5E5E5"> end of the day if</font>

296
00:11:13,630 --> 00:11:17,590
you have a secure boot implementation

297
00:11:15,760 --> 00:11:19,630
you're going to have<font color="#E5E5E5"> to</font>

298
00:11:17,590 --> 00:11:23,080
a computed hash against either a

299
00:11:19,630 --> 00:11:24,760
decrypted hash or stored hash and that

300
00:11:23,080 --> 00:11:29,860
<font color="#E5E5E5">immediately gives you a nice place to</font>

301
00:11:24,760 --> 00:11:32,680
inject the<font color="#E5E5E5"> fold so and this gives you a</font>

302
00:11:29,860 --> 00:11:34,510
nice bypass of the authentication so if

303
00:11:32,680 --> 00:11:37,000
you're if the secure boot performs

304
00:11:34,510 --> 00:11:40,390
encryption you will need<font color="#CCCCCC"> to find another</font>

305
00:11:37,000 --> 00:11:42,130
way<font color="#E5E5E5"> to bypass that so here we</font><font color="#CCCCCC"> have a</font>

306
00:11:40,390 --> 00:11:45,160
little<font color="#E5E5E5"> bit of source code from the embed</font>

307
00:11:42,130 --> 00:11:47,950
TLS project as<font color="#CCCCCC"> it is used in the arm</font>

308
00:11:45,160 --> 00:11:50,410
trusted firmware and what we see here is

309
00:11:47,950 --> 00:11:55,660
we see a memory compare which compares a

310
00:11:50,410 --> 00:11:57,400
hash against a decrypted hash and if

311
00:11:55,660 --> 00:12:01,030
they are the same we continue booting

312
00:11:57,400 --> 00:12:03,760
and if they're not<font color="#E5E5E5"> the same we stopped</font>

313
00:12:01,030 --> 00:12:07,740
booting<font color="#CCCCCC"> all right so this looks like a</font>

314
00:12:03,760 --> 00:12:11,080
<font color="#E5E5E5">pretty good place to inject a fault</font>

315
00:12:07,740 --> 00:12:12,940
however this is<font color="#CCCCCC"> C source code so we</font>

316
00:12:11,080 --> 00:12:17,380
compiled it just to see what it would

317
00:12:12,940 --> 00:12:19,930
look like so here<font color="#E5E5E5"> we see the call to</font>

318
00:12:17,380 --> 00:12:22,810
memory compare and if it's the same<font color="#CCCCCC"> we</font>

319
00:12:19,930 --> 00:12:28,780
continue booting and otherwise we return

320
00:12:22,810 --> 00:12:30,839
an error so and here we<font color="#CCCCCC"> can see a number</font>

321
00:12:28,780 --> 00:12:34,000
<font color="#E5E5E5">of places where we can inject the fault</font>

322
00:12:30,840 --> 00:12:37,900
so we could try to skip the equal to

323
00:12:34,000 --> 00:12:40,360
memory compare perhaps we could<font color="#CCCCCC"> have an</font>

324
00:12:37,900 --> 00:12:44,020
influence on the conditional branch

325
00:12:40,360 --> 00:12:47,620
instruction or perhaps we could do any

326
00:12:44,020 --> 00:12:49,600
of a number<font color="#E5E5E5"> of other options and what we</font>

327
00:12:47,620 --> 00:12:52,150
<font color="#E5E5E5">see here is that when we have a single</font>

328
00:12:49,600 --> 00:12:54,790
line of<font color="#E5E5E5"> c code we actually and when we</font>

329
00:12:52,150 --> 00:12:57,819
compile it we<font color="#CCCCCC"> actually get a number</font><font color="#E5E5E5"> of</font>

330
00:12:54,790 --> 00:13:01,689
<font color="#E5E5E5">cases where</font><font color="#CCCCCC"> a single fault basically</font>

331
00:12:57,820 --> 00:13:03,400
renders secure boot ineffective so there

332
00:13:01,690 --> 00:13:06,010
are actually multiple locations where

333
00:13:03,400 --> 00:13:11,760
where we can bypass this secure boot

334
00:13:06,010 --> 00:13:14,640
check using only a single fault okay

335
00:13:11,760 --> 00:13:17,640
so the code we just looked at is

336
00:13:14,640 --> 00:13:22,080
actually inside the embed TLS PK

337
00:13:17,640 --> 00:13:27,150
verified function so here<font color="#E5E5E5"> we have</font>

338
00:13:22,080 --> 00:13:29,040
something looking quite similar and here

339
00:13:27,150 --> 00:13:32,250
we actually pass in the hash and the

340
00:13:29,040 --> 00:13:34,620
signature<font color="#E5E5E5"> and this code looks remarkably</font>

341
00:13:32,250 --> 00:13:36,270
similar which probably means it will

342
00:13:34,620 --> 00:13:39,030
compile to something<font color="#CCCCCC"> very similar as</font>

343
00:13:36,270 --> 00:13:41,310
well and this<font color="#E5E5E5"> will mean that we can</font>

344
00:13:39,030 --> 00:13:43,319
<font color="#CCCCCC">probably find a number</font><font color="#E5E5E5"> of places where a</font>

345
00:13:41,310 --> 00:13:47,369
single fault will we actually be able to

346
00:13:43,320 --> 00:13:51,300
bypass the embed TLS PK verify call

347
00:13:47,370 --> 00:13:53,760
itself and this means<font color="#E5E5E5"> that these</font>

348
00:13:51,300 --> 00:13:56,250
bypasses can basically happen on all

349
00:13:53,760 --> 00:13:58,020
levels they can happen inside functions

350
00:13:56,250 --> 00:13:59,850
they can happen inside<font color="#E5E5E5"> their calling</font>

351
00:13:58,020 --> 00:14:05,880
functions and they can happen inside

352
00:13:59,850 --> 00:14:09,210
their calling functions<font color="#CCCCCC"> alright so that</font>

353
00:14:05,880 --> 00:14:13,470
<font color="#CCCCCC">was the comparison but what are</font><font color="#E5E5E5"> we going</font>

354
00:14:09,210 --> 00:14:16,260
to do when that comparison fails well

355
00:14:13,470 --> 00:14:19,860
the classic answer is to enter an

356
00:14:16,260 --> 00:14:21,540
infinite loop<font color="#CCCCCC"> okay so let's</font><font color="#E5E5E5"> have a</font><font color="#CCCCCC"> look</font>

357
00:14:19,860 --> 00:14:24,570
at<font color="#E5E5E5"> that so here we have exactly the same</font>

358
00:14:21,540 --> 00:14:26,430
code we have the embed TLS PK verified

359
00:14:24,570 --> 00:14:30,120
function and we<font color="#E5E5E5"> compare the hash against</font>

360
00:14:26,430 --> 00:14:31,949
the signature and if these are not the

361
00:14:30,120 --> 00:14:33,570
same if these do<font color="#CCCCCC"> not match we go</font><font color="#E5E5E5"> into</font>

362
00:14:31,950 --> 00:14:36,870
this infinite loop and otherwise we

363
00:14:33,570 --> 00:14:38,760
continue booting so I mean you know from

364
00:14:36,870 --> 00:14:42,090
<font color="#E5E5E5">C source code level this looks</font><font color="#CCCCCC"> ok but</font>

365
00:14:38,760 --> 00:14:44,850
what is this compiled to so we compile

366
00:14:42,090 --> 00:14:47,430
it here we see our embed tle TLS PK

367
00:14:44,850 --> 00:14:49,500
verified function if we fail we go into

368
00:14:47,430 --> 00:14:53,939
<font color="#E5E5E5">this infinite loop and otherwise we</font>

369
00:14:49,500 --> 00:14:56,640
continue booting now<font color="#CCCCCC"> there is</font><font color="#E5E5E5"> something</font>

370
00:14:53,940 --> 00:14:58,970
missing<font color="#E5E5E5"> from this story and that's that</font>

371
00:14:56,640 --> 00:15:02,580
the infinite loop is actually directly

372
00:14:58,970 --> 00:15:05,850
above the correct code path to continue

373
00:15:02,580 --> 00:15:08,340
booting and this means<font color="#E5E5E5"> that if we manage</font>

374
00:15:05,850 --> 00:15:11,460
to inject a single fault into any

375
00:15:08,340 --> 00:15:12,810
iteration of this infinite loop we might

376
00:15:11,460 --> 00:15:16,920
be<font color="#CCCCCC"> able to break out of this infinite</font>

377
00:15:12,810 --> 00:15:18,839
loop and continue booting now the nice

378
00:15:16,920 --> 00:15:21,689
thing for the attacker here is that

379
00:15:18,840 --> 00:15:25,350
timing is not an issue we only have to

380
00:15:21,690 --> 00:15:27,690
hit one iteration of that infinite loop

381
00:15:25,350 --> 00:15:29,450
<font color="#E5E5E5">okay so it should</font><font color="#CCCCCC"> be noted that this is</font>

382
00:15:27,690 --> 00:15:32,490
actually<font color="#CCCCCC"> a classic</font><font color="#E5E5E5"> smartcard attack and</font>

383
00:15:29,450 --> 00:15:34,680
in general if you detect that something

384
00:15:32,490 --> 00:15:37,890
is incorrect it's probably<font color="#E5E5E5"> better to</font>

385
00:15:34,680 --> 00:15:42,500
reset the entire chip or basically<font color="#E5E5E5"> to</font>

386
00:15:37,890 --> 00:15:42,500
write all to wipe cryptographic keys

387
00:15:42,830 --> 00:15:50,430
<font color="#E5E5E5">okay so these are</font><font color="#CCCCCC"> some examples</font><font color="#E5E5E5"> of some</font>

388
00:15:45,720 --> 00:15:53,160
<font color="#E5E5E5">classic bypasses but vendors have also</font>

389
00:15:50,430 --> 00:15:54,959
started to<font color="#E5E5E5"> implement mitigations so</font>

390
00:15:53,160 --> 00:15:57,180
these mitigations can be either hardware

391
00:15:54,960 --> 00:15:59,940
countermeasures where the goal is to

392
00:15:57,180 --> 00:16:02,939
<font color="#E5E5E5">inject sorry to detect the glitch as</font>

393
00:15:59,940 --> 00:16:07,140
it's being injected also detect faults

394
00:16:02,940 --> 00:16:08,400
when they have<font color="#E5E5E5"> already occurred it's</font>

395
00:16:07,140 --> 00:16:11,730
also possible to<font color="#E5E5E5"> use software</font>

396
00:16:08,400 --> 00:16:14,160
countermeasures and software

397
00:16:11,730 --> 00:16:16,280
countermeasures can only actually detect

398
00:16:14,160 --> 00:16:19,140
the faults when it has occurred<font color="#E5E5E5"> and the</font>

399
00:16:16,280 --> 00:16:23,370
<font color="#E5E5E5">goal</font><font color="#CCCCCC"> is to lowes of a probability of</font>

400
00:16:19,140 --> 00:16:24,840
<font color="#E5E5E5">such a successful fault however because</font>

401
00:16:23,370 --> 00:16:27,150
<font color="#E5E5E5">they can only detect the fourth planet</font>

402
00:16:24,840 --> 00:16:31,530
has occurred they do<font color="#E5E5E5"> not really address</font>

403
00:16:27,150 --> 00:16:33,270
the root cause of this issue and<font color="#CCCCCC"> you can</font>

404
00:16:31,530 --> 00:16:41,100
lower the probability but you cannot

405
00:16:33,270 --> 00:16:43,740
completely lose it rule it out<font color="#E5E5E5"> okay so</font>

406
00:16:41,100 --> 00:16:47,160
we just<font color="#E5E5E5"> discussed some examples of some</font>

407
00:16:43,740 --> 00:16:51,150
classic bypasses and we discussed some

408
00:16:47,160 --> 00:16:56,520
of their mitigations however the attack

409
00:16:51,150 --> 00:16:59,880
surface is a larger so let's start with

410
00:16:56,520 --> 00:17:01,290
combined attacks okay and the combined

411
00:16:59,880 --> 00:17:04,140
attack what we define as a combined

412
00:17:01,290 --> 00:17:06,480
attack is basically you take fault

413
00:17:04,140 --> 00:17:09,420
injection and use the fault injection to

414
00:17:06,480 --> 00:17:11,280
construct a logical vulnerability it's

415
00:17:09,420 --> 00:17:14,640
basically build your own buffer overflow

416
00:17:11,280 --> 00:17:16,500
and for<font color="#E5E5E5"> this example we're going to take</font>

417
00:17:14,640 --> 00:17:20,390
the<font color="#CCCCCC"> easy approach and we're going</font><font color="#E5E5E5"> to</font>

418
00:17:16,500 --> 00:17:23,550
change the size<font color="#CCCCCC"> argument</font><font color="#E5E5E5"> of a mem copy</font>

419
00:17:20,390 --> 00:17:25,140
so to illustrate<font color="#CCCCCC"> the before the</font>

420
00:17:23,550 --> 00:17:27,659
corruption has occurred we're going<font color="#E5E5E5"> to</font>

421
00:17:25,140 --> 00:17:29,940
copy a thousand<font color="#CCCCCC"> hex and after the</font>

422
00:17:27,660 --> 00:17:32,850
corruption we're<font color="#E5E5E5"> going to copy more data</font>

423
00:17:29,940 --> 00:17:35,100
and hopefully we're going to overwrite

424
00:17:32,850 --> 00:17:39,240
some critical variables for instance<font color="#CCCCCC"> the</font>

425
00:17:35,100 --> 00:17:39,629
stack perhaps and we'll be able<font color="#E5E5E5"> to enter</font>

426
00:17:39,240 --> 00:17:43,560
in

427
00:17:39,630 --> 00:17:46,320
use our own data and then execute our

428
00:17:43,560 --> 00:17:48,899
own code so the nice<font color="#CCCCCC"> thing about this</font>

429
00:17:46,320 --> 00:17:51,450
<font color="#E5E5E5">attack is that it actually works even</font>

430
00:17:48,900 --> 00:17:53,700
when dedicated hardware is used so in

431
00:17:51,450 --> 00:17:56,010
this example we've used mem copy but

432
00:17:53,700 --> 00:18:01,410
this<font color="#E5E5E5"> also works for instance if a call</font>

433
00:17:56,010 --> 00:18:03,780
to a DMA engine is used<font color="#E5E5E5"> ok so how does</font>

434
00:18:01,410 --> 00:18:08,730
<font color="#E5E5E5">this work in practice here we have the</font>

435
00:18:03,780 --> 00:18:12,690
secure boot system as detailed by my

436
00:18:08,730 --> 00:18:15,750
colleague<font color="#E5E5E5"> nique the bootloader 1.1 will</font>

437
00:18:12,690 --> 00:18:18,990
go into SRAM and the bootloader 1.2 will

438
00:18:15,750 --> 00:18:21,420
go into<font color="#E5E5E5"> ddr but there is something</font><font color="#CCCCCC"> nique</font>

439
00:18:18,990 --> 00:18:24,290
didn't say and then<font color="#CCCCCC"> actually the SRAM</font>

440
00:18:21,420 --> 00:18:27,150
also contains the stack of the bootrom

441
00:18:24,290 --> 00:18:31,800
so<font color="#CCCCCC"> I</font><font color="#E5E5E5"> think most of you can already see</font>

442
00:18:27,150 --> 00:18:34,500
where this is<font color="#E5E5E5"> going yeah</font><font color="#CCCCCC"> ok so here</font><font color="#E5E5E5"> is</font>

443
00:18:31,800 --> 00:18:36,120
our code that's running on the<font color="#CCCCCC"> CPU we</font>

444
00:18:34,500 --> 00:18:39,270
here we<font color="#E5E5E5"> set up the parameters and then</font>

445
00:18:36,120 --> 00:18:41,100
call mem copy so we've prepared the

446
00:18:39,270 --> 00:18:43,950
<font color="#CCCCCC">contents of flash we've prepared a</font>

447
00:18:41,100 --> 00:18:47,909
suitable payload denoted by C followed

448
00:18:43,950 --> 00:18:50,460
by a lot of pointers and then when the

449
00:18:47,910 --> 00:18:53,580
system boots when this code runs we'll

450
00:18:50,460 --> 00:18:55,760
try to introduce fault hopefully change

451
00:18:53,580 --> 00:18:59,760
in size<font color="#E5E5E5"> arguments corrupting it and</font>

452
00:18:55,760 --> 00:19:03,660
hopefully we end up over writing all<font color="#CCCCCC"> of</font>

453
00:18:59,760 --> 00:19:06,420
the SRAM and hopefully the pointers will

454
00:19:03,660 --> 00:19:08,070
overwrite the stack and then when the

455
00:19:06,420 --> 00:19:10,380
function<font color="#E5E5E5"> returns it'll take one of these</font>

456
00:19:08,070 --> 00:19:15,330
pointers and will directly jump to our

457
00:19:10,380 --> 00:19:17,760
own code so the thing you have to

458
00:19:15,330 --> 00:19:20,370
realize here is that during these early

459
00:19:17,760 --> 00:19:24,060
stages of boot typically there is no

460
00:19:20,370 --> 00:19:28,459
normal exploit mitigation there is no a

461
00:19:24,060 --> 00:19:28,460
SLR there are no stack cookies and

462
00:19:28,640 --> 00:19:37,309
writes or execute is not enabled it's

463
00:19:32,130 --> 00:19:39,649
not<font color="#CCCCCC"> available</font><font color="#E5E5E5"> ok</font>

464
00:19:37,309 --> 00:19:42,620
so for our next combined attack which we

465
00:19:39,649 --> 00:19:46,729
call the wild jungle jump and the basic

466
00:19:42,620 --> 00:19:49,668
idea is you start glitching basically

467
00:19:46,730 --> 00:19:53,120
<font color="#CCCCCC">after the devices started to copy memory</font>

468
00:19:49,669 --> 00:19:56,179
to copy the flash contents but before<font color="#CCCCCC"> it</font>

469
00:19:53,120 --> 00:20:02,809
has fully decrypted the<font color="#E5E5E5"> image all before</font>

470
00:19:56,179 --> 00:20:05,840
it's fully completed the RSA computation

471
00:20:02,809 --> 00:20:07,460
and the idea is basically<font color="#E5E5E5"> to start</font>

472
00:20:05,840 --> 00:20:10,970
glitching and hopefully<font color="#CCCCCC"> we'll jump</font>

473
00:20:07,460 --> 00:20:14,720
directly somewhere<font color="#CCCCCC"> close directly to our</font>

474
00:20:10,970 --> 00:20:16,669
payload or close to it<font color="#E5E5E5"> and this actually</font>

475
00:20:14,720 --> 00:20:18,169
<font color="#E5E5E5">works in practice and this works in</font>

476
00:20:16,669 --> 00:20:20,629
practice because<font color="#E5E5E5"> there are a</font><font color="#CCCCCC"> lot of</font>

477
00:20:18,169 --> 00:20:22,340
<font color="#E5E5E5">magic pointers around and these and</font>

478
00:20:20,629 --> 00:20:25,850
these<font color="#CCCCCC"> points basically</font><font color="#E5E5E5"> quite close to</font>

479
00:20:22,340 --> 00:20:27,259
our code and we can get these magic

480
00:20:25,850 --> 00:20:29,570
pointers from anywhere we can get them

481
00:20:27,259 --> 00:20:33,019
<font color="#E5E5E5">from the stack from registers or from</font>

482
00:20:29,570 --> 00:20:35,210
memory<font color="#E5E5E5"> and</font><font color="#CCCCCC"> the more magic pointers are</font>

483
00:20:33,019 --> 00:20:40,999
available in the system the higher<font color="#CCCCCC"> the</font>

484
00:20:35,210 --> 00:20:43,389
probability of<font color="#E5E5E5"> a successful bypass so</font>

485
00:20:40,999 --> 00:20:45,649
let's summarize these<font color="#CCCCCC"> combined attacks</font>

486
00:20:43,389 --> 00:20:48,019
so they allow you to<font color="#E5E5E5"> actually bypass</font>

487
00:20:45,649 --> 00:20:51,590
both of the authentication and the

488
00:20:48,019 --> 00:20:53,899
decryption of images and typically

489
00:20:51,590 --> 00:20:55,639
little software exploitation mitigation

490
00:20:53,899 --> 00:20:59,899
is implemented during the early stages

491
00:20:55,639 --> 00:21:02,658
<font color="#CCCCCC">of booths and fault injection</font>

492
00:20:59,899 --> 00:21:07,850
mitigations in software may not be

493
00:21:02,659 --> 00:21:09,710
entirely effective and in the end<font color="#E5E5E5"> the</font>

494
00:21:07,850 --> 00:21:14,840
possibilities for combined attacks are

495
00:21:09,710 --> 00:21:16,610
pretty much endless<font color="#CCCCCC"> ok so we made it</font>

496
00:21:14,840 --> 00:21:19,580
<font color="#E5E5E5">sound very easy we said we have a</font>

497
00:21:16,610 --> 00:21:21,350
generic secure boot system but there<font color="#E5E5E5"> are</font>

498
00:21:19,580 --> 00:21:24,590
some practical actic allottees that the

499
00:21:21,350 --> 00:21:26,959
attacker has to overcome so first of all

500
00:21:24,590 --> 00:21:29,240
the attacker needs to prepare the<font color="#CCCCCC"> target</font>

501
00:21:26,960 --> 00:21:32,889
so as my colleague<font color="#CCCCCC"> Nick said sometimes</font>

502
00:21:29,240 --> 00:21:35,899
that means soldering wires to your PCB

503
00:21:32,889 --> 00:21:38,269
but it can also mean using acids to

504
00:21:35,899 --> 00:21:41,330
decamp chips to remove packaging from

505
00:21:38,269 --> 00:21:43,960
chips so you can use<font color="#E5E5E5"> obstacle so optical</font>

506
00:21:41,330 --> 00:21:47,090
fault injection which means lasers

507
00:21:43,960 --> 00:21:49,730
finally so we also need<font color="#CCCCCC"> to find the</font>

508
00:21:47,090 --> 00:21:52,209
<font color="#CCCCCC">timing of the glitch so the moment we</font>

509
00:21:49,730 --> 00:21:55,340
actually<font color="#E5E5E5"> introduce the fault</font>

510
00:21:52,210 --> 00:21:57,890
so we can try<font color="#E5E5E5"> to take for instance power</font>

511
00:21:55,340 --> 00:22:00,530
or<font color="#CCCCCC"> e.m measurements here we can take a</font>

512
00:21:57,890 --> 00:22:03,020
measurement of<font color="#CCCCCC"> a normal boots and then</font>

513
00:22:00,530 --> 00:22:05,899
of a corrupted image and these will

514
00:22:03,020 --> 00:22:07,700
exhibit different characteristics and it

515
00:22:05,900 --> 00:22:11,660
is where we can narrow down where we

516
00:22:07,700 --> 00:22:13,490
need to inject the fault so we need to

517
00:22:11,660 --> 00:22:15,230
not just<font color="#E5E5E5"> only find the correct time to</font>

518
00:22:13,490 --> 00:22:17,720
inject the fault but<font color="#E5E5E5"> we also need</font><font color="#CCCCCC"> to</font>

519
00:22:15,230 --> 00:22:20,000
find the<font color="#E5E5E5"> right glitch shape and the</font>

520
00:22:17,720 --> 00:22:21,980
glitch shape depends quite a lot on the

521
00:22:20,000 --> 00:22:24,650
method<font color="#E5E5E5"> you're using to inject the fault</font>

522
00:22:21,980 --> 00:22:26,300
but for voltage fault injection<font color="#E5E5E5"> this can</font>

523
00:22:24,650 --> 00:22:29,150
<font color="#E5E5E5">be the glitch voltage you want to</font>

524
00:22:26,300 --> 00:22:31,370
introduce but also the glitch length so

525
00:22:29,150 --> 00:22:33,350
together this is actually quite a large

526
00:22:31,370 --> 00:22:37,340
parameter space which you have<font color="#E5E5E5"> to search</font>

527
00:22:33,350 --> 00:22:39,770
and finally<font color="#E5E5E5"> you of course need to</font>

528
00:22:37,340 --> 00:22:41,899
prepare an image<font color="#CCCCCC"> that you wish to booth</font>

529
00:22:39,770 --> 00:22:44,420
and depending<font color="#E5E5E5"> on where you want to</font>

530
00:22:41,900 --> 00:22:50,560
introduce the fault you may need<font color="#E5E5E5"> to make</font>

531
00:22:44,420 --> 00:22:53,270
a different image so in conclusion

532
00:22:50,560 --> 00:22:57,560
today's standard technology<font color="#CCCCCC"> is not</font>

533
00:22:53,270 --> 00:22:59,450
resistant to fault attacks however there

534
00:22:57,560 --> 00:23:02,620
are a number ways in which we can

535
00:22:59,450 --> 00:23:05,360
<font color="#E5E5E5">minimize this attack surface so we</font><font color="#CCCCCC"> can</font>

536
00:23:02,620 --> 00:23:07,760
so manufacturers need<font color="#E5E5E5"> to authenticate</font>

537
00:23:05,360 --> 00:23:11,120
all code and data coming into their

538
00:23:07,760 --> 00:23:15,440
system they can try to minimize the code

539
00:23:11,120 --> 00:23:17,689
size of early boot stages giving less

540
00:23:15,440 --> 00:23:22,480
attack surface to actually perform fault

541
00:23:17,690 --> 00:23:24,290
injections on and we also need<font color="#CCCCCC"> to we</font>

542
00:23:22,480 --> 00:23:28,100
manufacturers also need<font color="#CCCCCC"> to draw</font>

543
00:23:24,290 --> 00:23:29,990
privileges at an early stage if certain

544
00:23:28,100 --> 00:23:31,939
keys are only available in the<font color="#CCCCCC"> rumble</font>

545
00:23:29,990 --> 00:23:36,770
stage breaking the secure boot chain

546
00:23:31,940 --> 00:23:38,780
later has no effect we can also try to

547
00:23:36,770 --> 00:23:42,310
<font color="#E5E5E5">lower the probability of a successful</font>

548
00:23:38,780 --> 00:23:44,540
bypass so that means for<font color="#E5E5E5"> instance</font>

549
00:23:42,310 --> 00:23:47,570
implementing the fault injection<font color="#CCCCCC"> council</font>

550
00:23:44,540 --> 00:23:49,790
measures we discussed but it can also

551
00:23:47,570 --> 00:23:52,250
mean implementing software exploitation

552
00:23:49,790 --> 00:23:53,960
mitigations to have a higher degree of

553
00:23:52,250 --> 00:23:58,280
protection against these combined

554
00:23:53,960 --> 00:24:00,110
attacks however in the end the

555
00:23:58,280 --> 00:24:03,080
robustness<font color="#CCCCCC"> of a secure boot</font>

556
00:24:00,110 --> 00:24:06,159
implementation can only be<font color="#E5E5E5"> determined</font>

557
00:24:03,080 --> 00:24:06,159
using<font color="#E5E5E5"> testing</font>

558
00:24:07,210 --> 00:24:13,220
okay this was our presentation so if you

559
00:24:10,910 --> 00:24:15,740
have any questions I know most of you

560
00:24:13,220 --> 00:24:19,010
want to head off to lunch so if you you

561
00:24:15,740 --> 00:24:23,870
can also catch this later but maybe we

562
00:24:19,010 --> 00:24:25,760
can do some questions now are ending

563
00:24:23,870 --> 00:24:36,560
questions<font color="#E5E5E5"> I've got the mic over here so</font>

564
00:24:25,760 --> 00:24:38,690
just<font color="#E5E5E5"> give me a sign yes up so I wonder</font>

565
00:24:36,560 --> 00:24:42,500
if<font color="#CCCCCC"> you should ride this kind of attacks</font>

566
00:24:38,690 --> 00:24:48,020
on like iphones for example and did you

567
00:24:42,500 --> 00:24:51,470
I mean find any mitigations to that so

568
00:24:48,020 --> 00:24:54,020
this<font color="#CCCCCC"> is a target</font><font color="#E5E5E5"> specific question and</font>

569
00:24:51,470 --> 00:25:04,850
I'm going to<font color="#E5E5E5"> have to politely decline to</font>

570
00:24:54,020 --> 00:25:07,790
answer that for the<font color="#E5E5E5"> kitchen is this sir</font>

571
00:25:04,850 --> 00:25:11,169
the spider enough order you I need more

572
00:25:07,790 --> 00:25:13,370
even more and more things<font color="#E5E5E5"> to in there I</font>

573
00:25:11,170 --> 00:25:15,380
think in the basis it's enough it

574
00:25:13,370 --> 00:25:18,590
depends a bit on your<font color="#E5E5E5"> target I think it</font>

575
00:25:15,380 --> 00:25:21,050
also is a<font color="#E5E5E5"> question of what you what well</font>

576
00:25:18,590 --> 00:25:23,540
the target needs so you can imagine<font color="#E5E5E5"> that</font>

577
00:25:21,050 --> 00:25:27,200
if you have normal embedded system you

578
00:25:23,540 --> 00:25:30,129
might need you know an ftdi cable it

579
00:25:27,200 --> 00:25:33,040
depends a bit on how much power the

580
00:25:30,130 --> 00:25:36,980
target drawls but you might need

581
00:25:33,040 --> 00:25:38,840
basically a power source<font color="#E5E5E5"> that can</font>

582
00:25:36,980 --> 00:25:42,200
deliver the amperage needed for that

583
00:25:38,840 --> 00:25:45,949
target so basically you need all your

584
00:25:42,200 --> 00:25:47,840
normal interfacing stuff but you can all

585
00:25:45,950 --> 00:25:50,600
it's also probably good idea to<font color="#CCCCCC"> have an</font>

586
00:25:47,840 --> 00:25:52,449
oscilloscope ready because<font color="#CCCCCC"> you also want</font>

587
00:25:50,600 --> 00:25:55,490
<font color="#E5E5E5">to take power measurements to determine</font>

588
00:25:52,450 --> 00:25:58,700
when the best moment is to inject<font color="#E5E5E5"> the</font>

589
00:25:55,490 --> 00:26:03,980
glitch maybe<font color="#CCCCCC"> after the talk we can talk</font>

590
00:25:58,700 --> 00:26:08,180
more<font color="#CCCCCC"> about details this here anyone</font><font color="#E5E5E5"> else</font>

591
00:26:03,980 --> 00:26:11,060
with a question<font color="#CCCCCC"> no they</font><font color="#E5E5E5"> I'd like to</font>

592
00:26:08,180 --> 00:26:12,710
thank both<font color="#E5E5E5"> Nick and Albert for their</font>

593
00:26:11,060 --> 00:26:19,980
talk

594
00:26:12,710 --> 00:26:21,779
thank you and as was already mentioned

595
00:26:19,980 --> 00:26:24,659
now there's time for lunch we will

596
00:26:21,779 --> 00:26:26,999
continue here for both attendees here

597
00:26:24,659 --> 00:26:30,119
and for our live stream in one hour

598
00:26:26,999 --> 00:26:33,019
which is two o'clock Amsterdam time see

599
00:26:30,119 --> 00:26:33,019
you hopefully then

