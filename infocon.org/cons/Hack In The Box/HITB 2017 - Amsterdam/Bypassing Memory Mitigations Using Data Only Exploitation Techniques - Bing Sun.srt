1
00:00:11,099 --> 00:00:17,490
good<font color="#CCCCCC"> afternoon</font><font color="#E5E5E5"> this</font><font color="#CCCCCC"> is</font><font color="#E5E5E5"> Benson</font>

2
00:00:14,340 --> 00:00:21,060
today I'm not<font color="#E5E5E5"> going to prevent the power</font>

3
00:00:17,490 --> 00:00:23,150
of<font color="#CCCCCC"> data oriented</font><font color="#E5E5E5"> attacks by passing</font>

4
00:00:21,060 --> 00:00:26,220
memory mitigation using data only

5
00:00:23,150 --> 00:00:29,220
exploitation technique actually<font color="#CCCCCC"> this is</font>

6
00:00:26,220 --> 00:00:32,519
a part two of our data<font color="#E5E5E5"> only attack</font>

7
00:00:29,220 --> 00:00:35,760
series the<font color="#CCCCCC"> part</font><font color="#E5E5E5"> 1 has</font><font color="#CCCCCC"> been prevented by</font>

8
00:00:32,519 --> 00:00:38,160
my colleagues in black<font color="#E5E5E5"> cat Asia</font><font color="#CCCCCC"> about</font>

9
00:00:35,760 --> 00:00:43,160
<font color="#CCCCCC">two</font><font color="#E5E5E5"> weeks ago I'm not sure if you guys</font>

10
00:00:38,160 --> 00:00:43,160
have got a chance<font color="#E5E5E5"> to check nice life</font><font color="#CCCCCC"> in</font>

11
00:00:44,510 --> 00:00:49,680
<font color="#CCCCCC">part 2 we're going</font><font color="#E5E5E5"> to present</font><font color="#CCCCCC"> some</font><font color="#E5E5E5"> more</font>

12
00:00:47,340 --> 00:00:57,270
<font color="#E5E5E5">interesting examples to further</font>

13
00:00:49,680 --> 00:01:00,449
illustrate the data<font color="#CCCCCC"> only attack a little</font>

14
00:00:57,270 --> 00:01:05,280
<font color="#E5E5E5">bit about being at my co-presenter</font><font color="#CCCCCC"> John</font>

15
00:01:00,449 --> 00:01:08,310
I am<font color="#CCCCCC"> the senior security researcher</font><font color="#E5E5E5"> and</font>

16
00:01:05,280 --> 00:01:12,570
I'm<font color="#CCCCCC"> leading the IPS security research</font>

17
00:01:08,310 --> 00:01:15,150
team of<font color="#CCCCCC"> McPhee</font><font color="#E5E5E5"> it used to be Intel you</font>

18
00:01:12,570 --> 00:01:21,570
know security<font color="#E5E5E5"> group of just you know</font>

19
00:01:15,150 --> 00:01:28,079
<font color="#E5E5E5">spindles</font><font color="#CCCCCC"> okay Cho is the senior director</font>

20
00:01:21,570 --> 00:01:30,720
of<font color="#CCCCCC"> maxi laughs I</font><font color="#E5E5E5"> PST</font><font color="#CCCCCC"> due</font><font color="#E5E5E5"> to some urgent</font>

21
00:01:28,079 --> 00:01:38,990
issue today cannot make it to speak with

22
00:01:30,720 --> 00:01:38,990
me<font color="#CCCCCC"> now we're going to skip abstract</font>

23
00:01:39,250 --> 00:01:46,189
the agenda<font color="#CCCCCC"> first</font><font color="#E5E5E5"> of all start with</font><font color="#CCCCCC"> is</font>

24
00:01:44,630 --> 00:01:50,408
<font color="#E5E5E5">introducing some background but</font>

25
00:01:46,189 --> 00:01:55,339
<font color="#E5E5E5">information about CFG and CFG bypass</font>

26
00:01:50,409 --> 00:01:58,909
which include corrupt functions<font color="#E5E5E5"> return</font>

27
00:01:55,340 --> 00:02:02,030
address on sex since it's the unguarded

28
00:01:58,909 --> 00:02:06,979
<font color="#CCCCCC">Champlain code</font><font color="#E5E5E5"> call function out</font><font color="#CCCCCC"> of</font>

29
00:02:02,030 --> 00:02:08,959
context<font color="#E5E5E5"> then we'll use a pretty complex</font>

30
00:02:06,979 --> 00:02:12,500
example to illustrate one of the

31
00:02:08,959 --> 00:02:16,580
commonly<font color="#CCCCCC"> used CFG bypass</font><font color="#E5E5E5"> messer</font><font color="#CCCCCC"> call</font>

32
00:02:12,500 --> 00:02:20,000
function out of<font color="#E5E5E5"> context and that comes</font>

33
00:02:16,580 --> 00:02:23,630
the highlight<font color="#E5E5E5"> part of this talk data</font>

34
00:02:20,000 --> 00:02:29,319
<font color="#E5E5E5">only attack in this section will prevent</font>

35
00:02:23,630 --> 00:02:34,690
you to interesting examples of pure data

36
00:02:29,319 --> 00:02:37,790
oriented attack<font color="#CCCCCC"> actually in</font><font color="#E5E5E5"> part</font><font color="#CCCCCC"> one</font>

37
00:02:34,690 --> 00:02:41,440
demonstrate<font color="#E5E5E5"> how to load the disable the</font>

38
00:02:37,790 --> 00:02:45,470
Silverlight<font color="#E5E5E5"> plug-in on Microsoft edge</font>

39
00:02:41,440 --> 00:02:51,530
<font color="#CCCCCC">that one is pretty simple just require</font>

40
00:02:45,470 --> 00:02:53,810
flipping to flag bits<font color="#E5E5E5"> and this time</font><font color="#CCCCCC"> in</font>

41
00:02:51,530 --> 00:02:57,010
part<font color="#E5E5E5"> two we'll see some more complicated</font>

42
00:02:53,810 --> 00:03:00,590
<font color="#CCCCCC">that</font><font color="#E5E5E5"> they</font><font color="#CCCCCC"> don't</font><font color="#E5E5E5"> only attack techniques</font>

43
00:02:57,010 --> 00:03:02,450
<font color="#E5E5E5">and at the end of this talk we're going</font>

44
00:03:00,590 --> 00:03:05,780
<font color="#E5E5E5">to provide some suggestion for</font>

45
00:03:02,450 --> 00:03:08,750
preventing data only attacks<font color="#CCCCCC"> then I was</font>

46
00:03:05,780 --> 00:03:14,390
<font color="#E5E5E5">going to draw a conclusion now this is</font>

47
00:03:08,750 --> 00:03:20,780
pretty<font color="#E5E5E5"> much all</font><font color="#CCCCCC"> I of this talk let's get</font>

48
00:03:14,390 --> 00:03:24,410
to the<font color="#CCCCCC"> details CFG the control flow</font>

49
00:03:20,780 --> 00:03:27,579
guard is compeller a<font color="#CCCCCC"> late</font><font color="#E5E5E5"> exploitation</font>

50
00:03:24,410 --> 00:03:30,620
<font color="#E5E5E5">mitigation mechanism that presents</font>

51
00:03:27,579 --> 00:03:33,709
<font color="#E5E5E5">exploit from</font><font color="#CCCCCC"> hijacking the control flow</font>

52
00:03:30,620 --> 00:03:36,470
<font color="#E5E5E5">I think many people are letting talk</font>

53
00:03:33,709 --> 00:03:41,150
about how safety works<font color="#E5E5E5"> so here I want</font>

54
00:03:36,470 --> 00:03:43,400
which time to repeat<font color="#CCCCCC"> one thing</font><font color="#E5E5E5"> I want to</font>

55
00:03:41,150 --> 00:03:48,190
remember<font color="#E5E5E5"> so</font><font color="#CCCCCC"> that</font><font color="#E5E5E5"> one</font><font color="#CCCCCC"> thing I want</font><font color="#E5E5E5"> to</font>

56
00:03:43,400 --> 00:03:50,060
mention<font color="#E5E5E5"> this the dispatch mode which was</font>

57
00:03:48,190 --> 00:03:54,829
introduced

58
00:03:50,060 --> 00:03:56,720
<font color="#CCCCCC">six</font><font color="#E5E5E5"> a 64-bit</font><font color="#CCCCCC"> system and the difference</font>

59
00:03:54,830 --> 00:04:00,230
<font color="#E5E5E5">between the be spat smooth and a check</font>

60
00:03:56,720 --> 00:04:04,280
<font color="#CCCCCC">now it is</font><font color="#E5E5E5"> check multi logic is check and</font>

61
00:04:00,230 --> 00:04:10,670
the<font color="#CCCCCC"> returned right and</font><font color="#E5E5E5"> dispatch mode is</font>

62
00:04:04,280 --> 00:04:13,250
check and<font color="#CCCCCC"> the call now I'm using this</font>

63
00:04:10,670 --> 00:04:19,820
diagram<font color="#E5E5E5"> to</font><font color="#CCCCCC"> illustrate how this patch</font>

64
00:04:13,250 --> 00:04:21,858
<font color="#CCCCCC">noticed at C works for a memory in the</font>

65
00:04:19,820 --> 00:04:29,330
red car<font color="#CCCCCC"> in this patch mode as you can</font>

66
00:04:21,858 --> 00:04:32,090
see there<font color="#E5E5E5"> will be only one call right</font>

67
00:04:29,330 --> 00:04:35,690
because the actual<font color="#E5E5E5"> function call</font><font color="#CCCCCC"> will</font>

68
00:04:32,090 --> 00:04:40,909
<font color="#CCCCCC">occur</font><font color="#E5E5E5"> inside the</font><font color="#CCCCCC"> CFG validation routine</font>

69
00:04:35,690 --> 00:04:45,260
<font color="#E5E5E5">so there will be only one call in check</font>

70
00:04:40,910 --> 00:04:48,110
morning or<font color="#E5E5E5"> EOC</font><font color="#CCCCCC"> tool</font><font color="#E5E5E5"> coughs what happened</font>

71
00:04:45,260 --> 00:04:51,650
<font color="#E5E5E5">inside the CFG validation routine years</font>

72
00:04:48,110 --> 00:04:54,860
<font color="#E5E5E5">first the high v and fifty-five bit of</font>

73
00:04:51,650 --> 00:05:00,979
the<font color="#E5E5E5"> target address will be used as</font><font color="#CCCCCC"> the</font>

74
00:04:54,860 --> 00:05:05,419
index into CFG bitmap to retrieve a<font color="#E5E5E5"> 64</font>

75
00:05:00,979 --> 00:05:09,440
bit map entry in the entry and then the

76
00:05:05,419 --> 00:05:13,849
bits<font color="#CCCCCC"> three to eight will be</font><font color="#E5E5E5"> used as</font><font color="#CCCCCC"> an</font>

77
00:05:09,440 --> 00:05:18,050
offset<font color="#CCCCCC"> and then again test the bit</font>

78
00:05:13,850 --> 00:05:20,270
offset of that<font color="#CCCCCC"> bitmap</font><font color="#E5E5E5"> entry if that</font>

79
00:05:18,050 --> 00:05:23,530
particular<font color="#E5E5E5"> bit instead</font>

80
00:05:20,270 --> 00:05:28,690
that means the<font color="#CCCCCC"> target address is valid</font>

81
00:05:23,530 --> 00:05:31,729
<font color="#CCCCCC">so in the end is going</font><font color="#E5E5E5"> to jump to that</font>

82
00:05:28,690 --> 00:05:35,180
<font color="#E5E5E5">target address as you can see in the end</font>

83
00:05:31,729 --> 00:05:37,390
<font color="#E5E5E5">jump</font><font color="#CCCCCC"> are X otherwise</font><font color="#E5E5E5"> if that bit is not</font>

84
00:05:35,180 --> 00:05:44,440
set that<font color="#E5E5E5"> means the target address is</font>

85
00:05:37,390 --> 00:05:44,440
invalid<font color="#E5E5E5"> so it triggers an exception</font>

86
00:05:48,889 --> 00:05:59,419
here are some major CFG by person<font color="#CCCCCC"> asses</font>

87
00:05:53,389 --> 00:06:03,560
<font color="#CCCCCC">it may not</font><font color="#E5E5E5"> be</font><font color="#CCCCCC"> a complete least</font><font color="#E5E5E5"> first</font>

88
00:05:59,419 --> 00:06:08,760
<font color="#CCCCCC">bypassing</font><font color="#E5E5E5"> 72 return address corruption</font>

89
00:06:03,560 --> 00:06:11,580
<font color="#E5E5E5">this is a no limitation of CFG so it was</font>

90
00:06:08,760 --> 00:06:14,070
commonly used<font color="#E5E5E5"> in those hiking</font><font color="#CCCCCC"> contests</font>

91
00:06:11,580 --> 00:06:19,229
or as well as<font color="#E5E5E5"> some real word attack</font>

92
00:06:14,070 --> 00:06:23,969
scenarios<font color="#E5E5E5"> this bypass relies on knowing</font>

93
00:06:19,229 --> 00:06:26,849
where the<font color="#E5E5E5"> step locates later we'll be</font>

94
00:06:23,970 --> 00:06:29,639
showing such an example<font color="#E5E5E5"> for licking the</font>

95
00:06:26,850 --> 00:06:34,229
stack address using<font color="#E5E5E5"> the data</font><font color="#CCCCCC"> only</font>

96
00:06:29,639 --> 00:06:36,330
technique nowadays the vendor<font color="#E5E5E5"> has been</font>

97
00:06:34,229 --> 00:06:40,229
trying<font color="#E5E5E5"> to</font><font color="#CCCCCC"> develop some mitigation</font>

98
00:06:36,330 --> 00:06:43,500
features to solve this<font color="#CCCCCC"> problem</font><font color="#E5E5E5"> for</font>

99
00:06:40,229 --> 00:06:51,120
<font color="#E5E5E5">example Microsoft</font><font color="#CCCCCC"> rfg that returns</font>

100
00:06:43,500 --> 00:06:56,250
<font color="#CCCCCC">volgar</font><font color="#E5E5E5"> the Intel</font><font color="#CCCCCC"> CVG speaking of our FG</font>

101
00:06:51,120 --> 00:06:59,270
here's an interesting<font color="#E5E5E5"> episode</font><font color="#CCCCCC"> actually</font>

102
00:06:56,250 --> 00:07:02,580
<font color="#E5E5E5">after this feature was added into</font><font color="#CCCCCC"> the</font>

103
00:06:59,270 --> 00:07:04,919
Windows 10 insider to the build<font color="#CCCCCC"> and we</font>

104
00:07:02,580 --> 00:07:07,250
do some<font color="#E5E5E5"> research hope to find some you</font>

105
00:07:04,919 --> 00:07:10,680
know figure out<font color="#CCCCCC"> a way to bypass it</font>

106
00:07:07,250 --> 00:07:13,380
<font color="#E5E5E5">however you know later we were surprised</font>

107
00:07:10,680 --> 00:07:17,760
to<font color="#CCCCCC"> see this feature was soon</font><font color="#E5E5E5"> kicked out</font>

108
00:07:13,380 --> 00:07:20,159
from inside of<font color="#CCCCCC"> rebuild at that</font><font color="#E5E5E5"> time we</font>

109
00:07:17,760 --> 00:07:23,580
really<font color="#E5E5E5"> suspect there must be some issue</font>

110
00:07:20,160 --> 00:07:27,830
<font color="#CCCCCC">must be some defect with this</font><font color="#E5E5E5"> feature</font>

111
00:07:23,580 --> 00:07:33,930
<font color="#E5E5E5">and then later our suspicion was proved</font>

112
00:07:27,830 --> 00:07:37,349
in<font color="#E5E5E5"> the tense a question last</font><font color="#CCCCCC"> month</font><font color="#E5E5E5"> the</font>

113
00:07:33,930 --> 00:07:41,460
Microsoft guys at the beat the unite all

114
00:07:37,349 --> 00:07:45,870
the<font color="#CCCCCC"> rfg has some design</font><font color="#E5E5E5"> level defect</font>

115
00:07:41,460 --> 00:07:50,120
<font color="#E5E5E5">that allows for bypass you know so the</font>

116
00:07:45,870 --> 00:07:54,599
this feature was<font color="#E5E5E5"> poured and became an</font>

117
00:07:50,120 --> 00:07:59,330
experimental<font color="#E5E5E5"> project so far we haven't</font>

118
00:07:54,599 --> 00:07:59,330
got any detail about<font color="#E5E5E5"> this by party</font>

119
00:08:04,619 --> 00:08:10,419
transit<font color="#CCCCCC"> the unguarded Champlain code</font><font color="#E5E5E5"> so</font>

120
00:08:08,050 --> 00:08:12,669
this<font color="#E5E5E5"> kind of issue is mostly about</font>

121
00:08:10,419 --> 00:08:17,369
taking advantages of a high<font color="#CCCCCC"> Atlantica</font>

122
00:08:12,669 --> 00:08:24,369
<font color="#E5E5E5">JIT engine such</font><font color="#CCCCCC"> as</font><font color="#E5E5E5"> JavaScript engine the</font>

123
00:08:17,369 --> 00:08:30,519
what walp<font color="#E5E5E5"> however</font><font color="#CCCCCC"> sjt security improves</font>

124
00:08:24,369 --> 00:08:33,190
such kind of issue has declined<font color="#CCCCCC"> the last</font>

125
00:08:30,519 --> 00:08:36,370
<font color="#E5E5E5">category is</font><font color="#CCCCCC"> call function out of</font><font color="#E5E5E5"> contest</font>

126
00:08:33,190 --> 00:08:41,699
<font color="#E5E5E5">next</font><font color="#CCCCCC"> we'll be discussing this</font><font color="#E5E5E5"> technical</font>

127
00:08:36,370 --> 00:08:41,698
details<font color="#CCCCCC"> and show one interesting example</font>

128
00:08:49,400 --> 00:08:53,839
now we're<font color="#CCCCCC"> explaining what is out</font><font color="#E5E5E5"> of</font>

129
00:08:51,589 --> 00:08:58,370
<font color="#CCCCCC">context a function call and how to make</font>

130
00:08:53,839 --> 00:09:00,980
<font color="#CCCCCC">centrica the basic idea of</font><font color="#E5E5E5"> calling</font><font color="#CCCCCC"> a</font>

131
00:08:58,370 --> 00:09:06,310
function out<font color="#E5E5E5"> of context is to issue a</font>

132
00:09:00,980 --> 00:09:09,470
function call to<font color="#CCCCCC"> certain unexpected</font>

133
00:09:06,310 --> 00:09:13,369
target address so<font color="#CCCCCC"> remembering</font><font color="#E5E5E5"> in direct</font>

134
00:09:09,470 --> 00:09:16,100
call instruction<font color="#E5E5E5"> the reason we call it</font>

135
00:09:13,370 --> 00:09:19,580
<font color="#E5E5E5">out of context is because from the</font>

136
00:09:16,100 --> 00:09:21,830
program's logic perspective such a kind

137
00:09:19,580 --> 00:09:25,700
<font color="#CCCCCC">not supposed to happen from that cosine</font>

138
00:09:21,830 --> 00:09:29,029
<font color="#E5E5E5">you know for example</font><font color="#CCCCCC"> let's take we</font>

139
00:09:25,700 --> 00:09:32,510
replace a function pointer<font color="#E5E5E5"> you you know</font>

140
00:09:29,029 --> 00:09:36,130
objects<font color="#CCCCCC"> VF table</font><font color="#E5E5E5"> with certain API so</font>

141
00:09:32,510 --> 00:09:41,569
<font color="#E5E5E5">that we can call that</font><font color="#CCCCCC"> particular API</font>

142
00:09:36,130 --> 00:09:43,339
<font color="#E5E5E5">assume the object semester although</font><font color="#CCCCCC"> this</font>

143
00:09:41,570 --> 00:09:45,610
<font color="#E5E5E5">doesn't have any problem from the</font>

144
00:09:43,339 --> 00:09:50,860
instruction executions perspective

145
00:09:45,610 --> 00:09:55,250
however it does<font color="#CCCCCC"> violate the program's</font>

146
00:09:50,860 --> 00:09:56,860
original intention because you know<font color="#CCCCCC"> the</font>

147
00:09:55,250 --> 00:09:59,180
<font color="#CCCCCC">object measures</font>

148
00:09:56,860 --> 00:10:04,000
construction should<font color="#CCCCCC"> only be used to</font><font color="#E5E5E5"> come</font>

149
00:09:59,180 --> 00:10:10,760
<font color="#CCCCCC">to the object method rather than</font>

150
00:10:04,000 --> 00:10:13,790
arbitrary API right how to make an

151
00:10:10,760 --> 00:10:17,240
<font color="#CCCCCC">out-of-context call first we need to</font>

152
00:10:13,790 --> 00:10:19,819
overwrite an existing function pointer

153
00:10:17,240 --> 00:10:25,370
and then we're going<font color="#CCCCCC"> to trigger the</font>

154
00:10:19,820 --> 00:10:29,420
automated function from the<font color="#E5E5E5"> context of a</font>

155
00:10:25,370 --> 00:10:32,060
scripting language in order<font color="#CCCCCC"> to</font><font color="#E5E5E5"> make this</font>

156
00:10:29,420 --> 00:10:36,260
<font color="#E5E5E5">happen there are</font><font color="#CCCCCC"> few conditions need to</font>

157
00:10:32,060 --> 00:10:39,910
be met<font color="#E5E5E5"> first the target function address</font>

158
00:10:36,260 --> 00:10:44,800
<font color="#E5E5E5">need to be able to pass</font><font color="#CCCCCC"> the CFG</font><font color="#E5E5E5"> check</font>

159
00:10:39,910 --> 00:10:47,510
second<font color="#E5E5E5"> the member and order of</font><font color="#CCCCCC"> arguments</font>

160
00:10:44,800 --> 00:10:50,990
<font color="#E5E5E5">you know to the target function should</font>

161
00:10:47,510 --> 00:10:55,510
be controllable to the scripting

162
00:10:50,990 --> 00:11:02,740
language sir<font color="#E5E5E5"> sometimes is preferable to</font>

163
00:10:55,510 --> 00:11:02,740
you know get return<font color="#CCCCCC"> values back it's</font>

164
00:11:04,899 --> 00:11:10,220
here is a good<font color="#E5E5E5"> example</font><font color="#CCCCCC"> of the</font><font color="#E5E5E5"> calling</font>

165
00:11:07,610 --> 00:11:14,690
function of<font color="#E5E5E5"> contest which is</font><font color="#CCCCCC"> able</font><font color="#E5E5E5"> to</font>

166
00:11:10,220 --> 00:11:18,380
control all<font color="#E5E5E5"> the arguments and you know</font>

167
00:11:14,690 --> 00:11:20,690
get returned<font color="#CCCCCC"> dating back naturally I</font>

168
00:11:18,380 --> 00:11:24,250
<font color="#CCCCCC">leveraged the some of</font><font color="#E5E5E5"> his work</font>

169
00:11:20,690 --> 00:11:29,660
when creating my own demo code<font color="#CCCCCC"> on 64-bit</font>

170
00:11:24,250 --> 00:11:41,360
<font color="#E5E5E5">platform especially the framework that</font>

171
00:11:29,660 --> 00:11:43,010
<font color="#CCCCCC">is to achieve a AR</font><font color="#E5E5E5"> and AW on 64-bit now</font>

172
00:11:41,360 --> 00:11:45,290
we<font color="#E5E5E5"> already</font><font color="#CCCCCC"> know what is the</font><font color="#E5E5E5"> out of</font>

173
00:11:43,010 --> 00:11:47,779
context<font color="#E5E5E5"> a function call and how to make</font>

174
00:11:45,290 --> 00:11:51,110
such a call<font color="#E5E5E5"> next we're going to</font><font color="#CCCCCC"> show you</font>

175
00:11:47,779 --> 00:11:54,589
how to<font color="#E5E5E5"> leverage this delay load</font>

176
00:11:51,110 --> 00:11:57,170
important mechanism to bypass<font color="#CCCCCC"> CSU</font><font color="#E5E5E5"> before</font>

177
00:11:54,589 --> 00:12:01,480
we<font color="#E5E5E5"> explain how</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> make an out of</font><font color="#CCCCCC"> context</font>

178
00:11:57,170 --> 00:12:05,810
<font color="#E5E5E5">function call to</font><font color="#CCCCCC"> a native API of balelo</font>

179
00:12:01,480 --> 00:12:08,860
<font color="#E5E5E5">first we need to understand what is the</font>

180
00:12:05,810 --> 00:12:11,719
delay<font color="#CCCCCC"> loans important mechanism</font>

181
00:12:08,860 --> 00:12:15,820
interestingly in this column<font color="#E5E5E5"> we will be</font>

182
00:12:11,720 --> 00:12:19,700
introducing<font color="#CCCCCC"> two OS internal mechanism</font>

183
00:12:15,820 --> 00:12:22,520
one is this delay<font color="#E5E5E5"> node important and the</font>

184
00:12:19,700 --> 00:12:25,550
<font color="#E5E5E5">other is loader work for me</font><font color="#CCCCCC"> tradition</font>

185
00:12:22,520 --> 00:12:31,939
<font color="#E5E5E5">later and both</font><font color="#CCCCCC"> of them are</font><font color="#E5E5E5"> related to</font>

186
00:12:25,550 --> 00:12:35,810
the OS module loader the delay of input

187
00:12:31,940 --> 00:12:38,270
is a mechanism that enables the<font color="#CCCCCC"> fast</font>

188
00:12:35,810 --> 00:12:41,209
loading<font color="#E5E5E5"> of a module by allowing its</font>

189
00:12:38,270 --> 00:12:45,850
imported the<font color="#CCCCCC"> DL to be loaded</font><font color="#E5E5E5"> only</font><font color="#CCCCCC"> on the</font>

190
00:12:41,209 --> 00:12:49,069
<font color="#E5E5E5">first call to</font><font color="#CCCCCC"> a function with that BL</font>

191
00:12:45,850 --> 00:12:53,000
<font color="#CCCCCC">basically it works like this one</font>

192
00:12:49,070 --> 00:12:56,949
unloading of imported<font color="#CCCCCC"> vio</font><font color="#E5E5E5"> is delayed the</font>

193
00:12:53,000 --> 00:12:59,959
important function in that PL will

194
00:12:56,949 --> 00:13:02,120
temporarily<font color="#CCCCCC"> pointing somewhere</font><font color="#E5E5E5"> only put</font>

195
00:12:59,959 --> 00:13:05,599
<font color="#E5E5E5">a temporary point into some stop</font>

196
00:13:02,120 --> 00:13:07,699
function later<font color="#CCCCCC"> one the important</font>

197
00:13:05,600 --> 00:13:10,470
function is called<font color="#E5E5E5"> but it's</font><font color="#CCCCCC"> stopped</font>

198
00:13:07,699 --> 00:13:14,729
function gets caught first<font color="#CCCCCC"> and it was</font>

199
00:13:10,470 --> 00:13:19,260
use a helper function<font color="#CCCCCC"> to you know</font>

200
00:13:14,730 --> 00:13:23,070
<font color="#E5E5E5">actually loading the imported</font><font color="#CCCCCC"> VL and to</font>

201
00:13:19,260 --> 00:13:26,970
<font color="#E5E5E5">involve the important function - it's a</font>

202
00:13:23,070 --> 00:13:28,590
real entry<font color="#E5E5E5"> point</font><font color="#CCCCCC"> and after</font><font color="#E5E5E5"> that the call</font>

203
00:13:26,970 --> 00:13:30,480
<font color="#E5E5E5">to the important function can go</font>

204
00:13:28,590 --> 00:13:35,220
naturally without<font color="#E5E5E5"> the intervention of</font>

205
00:13:30,480 --> 00:13:39,600
the<font color="#E5E5E5"> stop function and the helper</font>

206
00:13:35,220 --> 00:13:42,180
function cost<font color="#CCCCCC"> a native API</font><font color="#E5E5E5"> the mg/dl</font>

207
00:13:39,600 --> 00:13:47,630
<font color="#CCCCCC">resolved a lightly</font><font color="#E5E5E5"> loaded API to do the</font>

208
00:13:42,180 --> 00:13:51,120
<font color="#CCCCCC">extra job and a</font><font color="#E5E5E5"> critical data structure</font>

209
00:13:47,630 --> 00:13:54,960
delay<font color="#E5E5E5"> import descriptor will be passed</font>

210
00:13:51,120 --> 00:14:00,960
<font color="#CCCCCC">into this native API - instructed how to</font>

211
00:13:54,960 --> 00:14:02,880
perform the delay<font color="#CCCCCC"> note import let me use</font>

212
00:14:00,960 --> 00:14:07,920
an example to<font color="#E5E5E5"> make it more clear for you</font>

213
00:14:02,880 --> 00:14:11,520
<font color="#CCCCCC">about this mechanism in</font><font color="#E5E5E5"> this case as</font><font color="#CCCCCC"> you</font>

214
00:14:07,920 --> 00:14:15,260
<font color="#CCCCCC">can see when we our net imports bcrypt</font>

215
00:14:11,520 --> 00:14:18,120
body L that is delay loaded

216
00:14:15,260 --> 00:14:21,270
therefore the important<font color="#CCCCCC"> API be</font>

217
00:14:18,120 --> 00:14:27,780
<font color="#CCCCCC">questioned vendor</font><font color="#E5E5E5"> is temporarily</font>

218
00:14:21,270 --> 00:14:29,520
pointing to stop function the node and<font color="#CCCCCC"> a</font>

219
00:14:27,780 --> 00:14:34,310
<font color="#CCCCCC">score be created generally</font><font color="#E5E5E5"> render</font>

220
00:14:29,520 --> 00:14:37,500
something one day CPI is first called

221
00:14:34,310 --> 00:14:40,560
this<font color="#E5E5E5"> stop function got</font><font color="#CCCCCC"> gets caught first</font>

222
00:14:37,500 --> 00:14:45,560
<font color="#CCCCCC">and it jumps to</font><font color="#E5E5E5"> some</font><font color="#CCCCCC"> intermedium</font>

223
00:14:40,560 --> 00:14:50,219
function tail<font color="#CCCCCC"> burns blah blah blah and</font>

224
00:14:45,560 --> 00:14:53,910
<font color="#E5E5E5">this interval function well call a</font>

225
00:14:50,220 --> 00:14:59,090
helper function<font color="#E5E5E5"> delay node helper to to</font>

226
00:14:53,910 --> 00:14:59,089
perform<font color="#CCCCCC"> the extra delay load important</font>

227
00:15:00,990 --> 00:15:08,620
as we mentioned<font color="#CCCCCC"> before</font><font color="#E5E5E5"> the helper</font>

228
00:15:04,029 --> 00:15:12,490
function well call a to the API<font color="#CCCCCC"> resolve</font>

229
00:15:08,620 --> 00:15:16,350
delay loaded API to do that to<font color="#E5E5E5"> drop but</font>

230
00:15:12,490 --> 00:15:19,829
this is now showing<font color="#E5E5E5"> in this screenshot</font>

231
00:15:16,350 --> 00:15:24,220
<font color="#E5E5E5">after the delay load import completes</font>

232
00:15:19,829 --> 00:15:29,079
the important<font color="#E5E5E5"> be I'll be correct will be</font>

233
00:15:24,220 --> 00:15:31,839
loaded<font color="#E5E5E5"> and then the imported API the</font>

234
00:15:29,079 --> 00:15:35,829
<font color="#E5E5E5">correct</font><font color="#CCCCCC"> gen</font><font color="#E5E5E5"> random will be resolved to</font>

235
00:15:31,839 --> 00:15:38,889
<font color="#CCCCCC">instant real entry point</font><font color="#E5E5E5"> and here the</font>

236
00:15:35,829 --> 00:15:43,630
function pointer<font color="#E5E5E5"> replacement occurs</font>

237
00:15:38,889 --> 00:15:46,769
inside this native API<font color="#CCCCCC"> via</font><font color="#E5E5E5"> a result</font>

238
00:15:43,630 --> 00:15:46,769
<font color="#CCCCCC">delay loaded API</font>

239
00:15:50,220 --> 00:16:01,200
from the<font color="#E5E5E5"> previous explanation</font><font color="#CCCCCC"> now we</font>

240
00:15:53,910 --> 00:16:04,650
know the native API<font color="#CCCCCC"> resolve delay loaded</font>

241
00:16:01,200 --> 00:16:08,880
API can<font color="#E5E5E5"> be</font><font color="#CCCCCC"> leveraged to</font><font color="#E5E5E5"> overwrite and</font>

242
00:16:04,650 --> 00:16:11,939
read only function pointers<font color="#E5E5E5"> actually</font>

243
00:16:08,880 --> 00:16:15,630
there<font color="#E5E5E5"> are</font><font color="#CCCCCC"> there's</font><font color="#E5E5E5"> another API called</font>

244
00:16:11,940 --> 00:16:19,020
resolve the line loads from BL that can

245
00:16:15,630 --> 00:16:21,330
achieve<font color="#CCCCCC"> the same</font><font color="#E5E5E5"> goal</font><font color="#CCCCCC"> but in terms of</font>

246
00:16:19,020 --> 00:16:26,310
making<font color="#E5E5E5"> a lot</font><font color="#CCCCCC"> of contest call the letter</font>

247
00:16:21,330 --> 00:16:28,800
<font color="#E5E5E5">the loads from BL one it is much</font><font color="#CCCCCC"> easier</font>

248
00:16:26,310 --> 00:16:32,609
to<font color="#E5E5E5"> call because it has fewer arguments</font>

249
00:16:28,800 --> 00:16:34,880
to control the first<font color="#E5E5E5"> one</font><font color="#CCCCCC"> I think if I</font>

250
00:16:32,610 --> 00:16:38,550
<font color="#CCCCCC">remember correctly has six arguments</font><font color="#E5E5E5"> and</font>

251
00:16:34,880 --> 00:16:40,710
this one has three so in terms<font color="#E5E5E5"> of the</font>

252
00:16:38,550 --> 00:16:46,949
<font color="#CCCCCC">sort of context call this one is much</font>

253
00:16:40,710 --> 00:16:48,720
easier<font color="#CCCCCC"> the concrete pipe</font><font color="#E5E5E5"> half scheme is</font>

254
00:16:46,950 --> 00:16:53,600
something<font color="#E5E5E5"> like this</font><font color="#CCCCCC"> first we're going</font><font color="#E5E5E5"> to</font>

255
00:16:48,720 --> 00:16:58,050
say Cappy<font color="#CCCCCC"> create a fake P in memory and</font>

256
00:16:53,600 --> 00:17:04,349
this<font color="#CCCCCC"> PE carries malformed delay</font><font color="#E5E5E5"> import</font>

257
00:16:58,050 --> 00:17:07,010
descriptor<font color="#CCCCCC"> and there is a field called</font>

258
00:17:04,349 --> 00:17:11,520
import<font color="#CCCCCC"> address table RBA</font>

259
00:17:07,010 --> 00:17:13,740
in this malformed<font color="#E5E5E5"> descriptor this field</font>

260
00:17:11,520 --> 00:17:17,310
points to the function pointer<font color="#E5E5E5"> we want</font>

261
00:17:13,740 --> 00:17:19,980
to overwrite and this could<font color="#E5E5E5"> be all sides</font>

262
00:17:17,310 --> 00:17:25,399
<font color="#CCCCCC">the fake p later we're going</font><font color="#E5E5E5"> to show a</font>

263
00:17:19,980 --> 00:17:25,400
diagram<font color="#E5E5E5"> it's a little bit complicated</font>

264
00:17:27,829 --> 00:17:37,679
<font color="#E5E5E5">then we're going to fit this fake</font><font color="#CCCCCC"> P to</font>

265
00:17:31,790 --> 00:17:45,000
this native API<font color="#E5E5E5"> the LD hours of delay</font>

266
00:17:37,680 --> 00:17:46,890
<font color="#E5E5E5">loads from there the addition the order</font>

267
00:17:45,000 --> 00:17:51,600
for<font color="#E5E5E5"> the operating system</font><font color="#CCCCCC"> to believe</font><font color="#E5E5E5"> our</font>

268
00:17:46,890 --> 00:17:55,250
<font color="#E5E5E5">fake P is a loaded module we</font><font color="#CCCCCC"> need to</font>

269
00:17:51,600 --> 00:18:01,740
craft some existing<font color="#E5E5E5"> entry in systems</font>

270
00:17:55,250 --> 00:18:04,710
loaded data table<font color="#E5E5E5"> and</font><font color="#CCCCCC"> also</font>

271
00:18:01,740 --> 00:18:08,970
the size of image<font color="#E5E5E5"> field of the corrupted</font>

272
00:18:04,710 --> 00:18:14,900
entry<font color="#E5E5E5"> need to be set big enough to pass</font>

273
00:18:08,970 --> 00:18:14,900
them<font color="#CCCCCC"> a rain check inside this native API</font>

274
00:18:16,820 --> 00:18:22,590
now this diagram<font color="#E5E5E5"> can help us get a</font>

275
00:18:19,559 --> 00:18:27,990
<font color="#CCCCCC">high-level</font><font color="#E5E5E5"> understanding about what</font>

276
00:18:22,590 --> 00:18:34,020
happens<font color="#E5E5E5"> the blue</font><font color="#CCCCCC"> rectangle is our sake</font>

277
00:18:27,990 --> 00:18:36,900
<font color="#CCCCCC">piece created in memory</font><font color="#E5E5E5"> it has</font><font color="#CCCCCC"> some</font>

278
00:18:34,020 --> 00:18:39,990
malformed descriptor<font color="#CCCCCC"> delay log</font>

279
00:18:36,900 --> 00:18:47,300
descriptor inside it and in this

280
00:18:39,990 --> 00:18:53,280
descriptor the important<font color="#E5E5E5"> main table RBA</font>

281
00:18:47,300 --> 00:18:57,870
<font color="#CCCCCC">is referring</font><font color="#E5E5E5"> to an exported API</font><font color="#CCCCCC"> in</font>

282
00:18:53,280 --> 00:19:02,160
<font color="#CCCCCC">indeed L well another field called</font>

283
00:18:57,870 --> 00:19:07,260
import address<font color="#E5E5E5"> table RBA is pointing to</font>

284
00:19:02,160 --> 00:19:09,840
the import table of chakra the reason we

285
00:19:07,260 --> 00:19:11,970
call it<font color="#E5E5E5"> the malformed is because as you</font>

286
00:19:09,840 --> 00:19:15,000
<font color="#CCCCCC">can</font><font color="#E5E5E5"> see</font><font color="#CCCCCC"> the import address table</font><font color="#E5E5E5"> is</font>

287
00:19:11,970 --> 00:19:18,450
<font color="#CCCCCC">actually off site</font><font color="#E5E5E5"> that the fake P it is</font>

288
00:19:15,000 --> 00:19:23,570
<font color="#CCCCCC">own and in this case it is in the</font><font color="#E5E5E5"> chat</font>

289
00:19:18,450 --> 00:19:26,820
<font color="#E5E5E5">pod on the air and this particular</font>

290
00:19:23,570 --> 00:19:29,490
descriptor<font color="#CCCCCC"> actually request via the OS</font>

291
00:19:26,820 --> 00:19:34,070
module loader<font color="#E5E5E5"> to replace the current</font>

292
00:19:29,490 --> 00:19:38,700
<font color="#E5E5E5">function pointer in</font><font color="#CCCCCC"> gut-check icon</font><font color="#E5E5E5"> a PDR</font>

293
00:19:34,070 --> 00:19:41,700
with the one that<font color="#E5E5E5"> in the export function</font>

294
00:19:38,700 --> 00:19:44,870
<font color="#E5E5E5">in</font><font color="#CCCCCC"> aunt</font><font color="#E5E5E5"> Adele that</font><font color="#CCCCCC"> is that and she</font>

295
00:19:41,700 --> 00:19:44,870
commented TB

296
00:19:48,649 --> 00:19:55,559
<font color="#CCCCCC">inside in order</font><font color="#E5E5E5"> for the operating</font><font color="#CCCCCC"> system</font>

297
00:19:51,590 --> 00:19:58,379
module loader to believe<font color="#E5E5E5"> our fake</font><font color="#CCCCCC"> pee is</font>

298
00:19:55,559 --> 00:20:03,658
unloaded the module will need to either

299
00:19:58,380 --> 00:20:08,190
corrupt you know<font color="#E5E5E5"> an existing entry in</font><font color="#CCCCCC"> LD</font>

300
00:20:03,659 --> 00:20:15,140
<font color="#E5E5E5">our data table</font><font color="#CCCCCC"> or</font><font color="#E5E5E5"> we can just create a</font>

301
00:20:08,190 --> 00:20:20,970
<font color="#E5E5E5">new</font><font color="#CCCCCC"> one and the BL base is pointing to</font>

302
00:20:15,140 --> 00:20:24,870
the base<font color="#CCCCCC"> of our fake @p</font><font color="#E5E5E5"> and the size of</font>

303
00:20:20,970 --> 00:20:30,659
image<font color="#E5E5E5"> is set to</font><font color="#CCCCCC"> two G is a big enough to</font>

304
00:20:24,870 --> 00:20:33,360
touch<font color="#CCCCCC"> the links check by the way</font><font color="#E5E5E5"> the</font>

305
00:20:30,659 --> 00:20:36,620
loaded data table can easily be located

306
00:20:33,360 --> 00:20:40,439
as<font color="#E5E5E5"> long as you know the base address of</font>

307
00:20:36,620 --> 00:20:46,620
<font color="#CCCCCC">indeed L</font><font color="#E5E5E5"> and there is not protected from</font>

308
00:20:40,440 --> 00:20:48,419
<font color="#E5E5E5">light so you can you know insert a new</font>

309
00:20:46,620 --> 00:20:51,439
entry or you can modify<font color="#CCCCCC"> an existing</font>

310
00:20:48,419 --> 00:20:51,440
<font color="#E5E5E5">entry whatever</font>

311
00:20:56,919 --> 00:21:02,539
the following pages are actually<font color="#E5E5E5"> giving</font>

312
00:20:59,840 --> 00:21:05,779
the<font color="#CCCCCC"> details of this</font><font color="#E5E5E5"> CFG by</font><font color="#CCCCCC"> path however</font>

313
00:21:02,539 --> 00:21:09,139
<font color="#CCCCCC">due to the time costume</font><font color="#E5E5E5"> I won't be able</font>

314
00:21:05,779 --> 00:21:12,200
<font color="#E5E5E5">to do a deep dive instead will be</font>

315
00:21:09,139 --> 00:21:16,729
quickly<font color="#E5E5E5"> you know watching</font><font color="#CCCCCC"> stewardess</font>

316
00:21:12,200 --> 00:21:18,980
pages for this example<font color="#E5E5E5"> it makes</font>

317
00:21:16,730 --> 00:21:24,259
<font color="#CCCCCC">out-of-context</font><font color="#E5E5E5"> function call by</font>

318
00:21:18,980 --> 00:21:28,549
replacing the function<font color="#CCCCCC"> pointer of java</font>

319
00:21:24,259 --> 00:21:33,379
script array entry push<font color="#CCCCCC"> method and this</font>

320
00:21:28,549 --> 00:21:38,749
is the original<font color="#CCCCCC"> content of this rate of</font>

321
00:21:33,379 --> 00:21:41,149
push method<font color="#E5E5E5"> and this space shows the</font>

322
00:21:38,749 --> 00:21:45,350
<font color="#CCCCCC">call to this method is</font><font color="#E5E5E5"> the</font><font color="#CCCCCC"> rate directed</font>

323
00:21:41,149 --> 00:21:49,369
to<font color="#E5E5E5"> LDI</font><font color="#CCCCCC"> resolve the line loads from the</font>

324
00:21:45,350 --> 00:21:51,678
<font color="#CCCCCC">arrow as you can see all three arguments</font>

325
00:21:49,369 --> 00:21:57,830
are passed<font color="#CCCCCC"> incorrectly</font><font color="#E5E5E5"> from</font><font color="#CCCCCC"> the</font>

326
00:21:51,679 --> 00:22:00,919
<font color="#CCCCCC">JavaScript the first argument is the</font>

327
00:21:57,830 --> 00:22:05,320
<font color="#CCCCCC">fake P the second is that the MA and the</font>

328
00:22:00,919 --> 00:22:05,320
third one is<font color="#CCCCCC"> zero as we expected</font>

329
00:22:08,860 --> 00:22:14,139
these are some disassembler<font color="#CCCCCC"> codes so I</font>

330
00:22:11,620 --> 00:22:20,350
want you know talk<font color="#CCCCCC"> about you guys can</font>

331
00:22:14,140 --> 00:22:21,580
read my comments now here is the rain

332
00:22:20,350 --> 00:22:28,889
check

333
00:22:21,580 --> 00:22:28,889
we previously mentioned the<font color="#CCCCCC"> rain check</font>

334
00:22:34,150 --> 00:22:40,270
this<font color="#E5E5E5"> screenshot shows the corrupted</font><font color="#CCCCCC"> LDR</font>

335
00:22:37,720 --> 00:22:43,560
data table entry<font color="#E5E5E5"> and how it is leveraged</font>

336
00:22:40,270 --> 00:22:43,560
to pass the rain check

337
00:22:43,680 --> 00:22:52,150
as you can see the<font color="#CCCCCC"> BL base is pointing</font>

338
00:22:47,530 --> 00:22:55,690
to the fake P and the size of image<font color="#CCCCCC"> is</font>

339
00:22:52,150 --> 00:22:59,730
set to the maximum<font color="#E5E5E5"> size of a module in</font>

340
00:22:55,690 --> 00:22:59,730
this case I set it to<font color="#CCCCCC"> TG</font>

341
00:23:06,150 --> 00:23:12,780
this screenshot shows the<font color="#CCCCCC"> male from</font><font color="#E5E5E5"> the</font>

342
00:23:08,730 --> 00:23:18,570
descriptor<font color="#E5E5E5"> as you can see the important</font>

343
00:23:12,780 --> 00:23:22,860
a table RBA<font color="#CCCCCC"> is referring to</font><font color="#E5E5E5"> and exported</font>

344
00:23:18,570 --> 00:23:28,189
the function in<font color="#CCCCCC"> aunt Adele its ng Co and</font>

345
00:23:22,860 --> 00:23:31,530
TB<font color="#E5E5E5"> it's basically a blank function and</font>

346
00:23:28,190 --> 00:23:34,800
the import address table<font color="#CCCCCC"> RBA is pointing</font>

347
00:23:31,530 --> 00:23:38,030
to the import table of<font color="#E5E5E5"> the chakra which</font>

348
00:23:34,800 --> 00:23:38,030
<font color="#CCCCCC">is outside</font><font color="#E5E5E5"> of</font><font color="#CCCCCC"> 15</font>

349
00:23:43,990 --> 00:23:49,590
so this is aware<font color="#E5E5E5"> the actual function</font>

350
00:23:46,720 --> 00:23:54,550
point of replacement<font color="#E5E5E5"> eventually occurs</font>

351
00:23:49,590 --> 00:24:01,720
as you can see<font color="#CCCCCC"> overwrite the function</font>

352
00:23:54,550 --> 00:24:05,790
point in<font color="#E5E5E5"> this internal function ldrp</font><font color="#CCCCCC"> and</font>

353
00:24:01,720 --> 00:24:05,790
right back<font color="#CCCCCC"> for</font><font color="#E5E5E5"> that day to delay load</font>

354
00:24:08,790 --> 00:24:18,000
now this is the<font color="#CCCCCC"> outcome of this</font><font color="#E5E5E5"> CFG</font>

355
00:24:11,340 --> 00:24:22,649
bypass the chapter<font color="#E5E5E5"> I got checked</font><font color="#CCCCCC"> icon</font><font color="#E5E5E5"> at</font>

356
00:24:18,000 --> 00:24:25,590
PTR has been replaced<font color="#CCCCCC"> with</font><font color="#E5E5E5"> antique</font>

357
00:24:22,650 --> 00:24:29,550
quantity<font color="#E5E5E5"> B which is you know basically</font><font color="#CCCCCC"> a</font>

358
00:24:25,590 --> 00:24:32,790
a blank function so at this point<font color="#E5E5E5"> the</font>

359
00:24:29,550 --> 00:24:36,240
CFG check for chakra you know was

360
00:24:32,790 --> 00:24:42,540
completely removed<font color="#E5E5E5"> no safety check in</font>

361
00:24:36,240 --> 00:24:46,260
for some chakra<font color="#E5E5E5"> WL one thing to be noted</font>

362
00:24:42,540 --> 00:24:49,770
as as you can see the memory<font color="#E5E5E5"> attribute</font>

363
00:24:46,260 --> 00:24:52,410
of chakras import table and still later

364
00:24:49,770 --> 00:24:55,710
<font color="#E5E5E5">only so this</font><font color="#CCCCCC"> attack can only be used</font><font color="#E5E5E5"> to</font>

365
00:24:52,410 --> 00:24:57,390
replace a<font color="#E5E5E5"> read-only function pointer but</font>

366
00:24:55,710 --> 00:25:06,720
not to make a<font color="#E5E5E5"> betrayal rate don't</font>

367
00:24:57,390 --> 00:25:11,690
remember a writable now let me show<font color="#E5E5E5"> you</font>

368
00:25:06,720 --> 00:25:11,690
a<font color="#E5E5E5"> lifetime or for this</font><font color="#CCCCCC"> CFC</font><font color="#E5E5E5"> bypass</font>

369
00:25:34,420 --> 00:25:43,210
we're going to use<font color="#E5E5E5"> when</font><font color="#CCCCCC"> dbg</font><font color="#E5E5E5"> squid to</font>

370
00:25:38,620 --> 00:25:45,669
<font color="#CCCCCC">ambulate a AR and</font><font color="#E5E5E5"> a w primitives</font><font color="#CCCCCC"> because</font>

371
00:25:43,210 --> 00:25:48,540
we don't you<font color="#CCCCCC"> know we're not using a real</font>

372
00:25:45,670 --> 00:25:48,540
vulnerability

373
00:26:27,900 --> 00:26:35,280
<font color="#E5E5E5">okay we use</font><font color="#CCCCCC"> this command</font><font color="#E5E5E5"> to you know</font>

374
00:26:30,780 --> 00:26:41,389
modify some JavaScript array to<font color="#CCCCCC"> create</font>

375
00:26:35,280 --> 00:26:41,389
the ability<font color="#CCCCCC"> of arbitrary advanced access</font>

376
00:26:45,920 --> 00:26:54,500
<font color="#E5E5E5">okay now they shows go check the</font>

377
00:26:49,910 --> 00:26:58,330
replaced got<font color="#CCCCCC"> checked I call at PDR so</font>

378
00:26:54,500 --> 00:26:58,330
let's check<font color="#CCCCCC"> it out</font>

379
00:27:23,710 --> 00:27:34,150
as you can see the CFG validation<font color="#E5E5E5"> thing</font>

380
00:27:31,030 --> 00:27:37,389
<font color="#E5E5E5">has been replaced with</font><font color="#CCCCCC"> some kind of</font>

381
00:27:34,150 --> 00:27:41,320
gland function<font color="#E5E5E5"> dysfunction</font><font color="#CCCCCC"> - nothing</font>

382
00:27:37,390 --> 00:27:46,710
just<font color="#CCCCCC"> returned so at this point now step</font>

383
00:27:41,320 --> 00:27:46,710
<font color="#E5E5E5">G is enforced</font><font color="#CCCCCC"> charcoal</font>

384
00:28:03,130 --> 00:28:09,419
that you can<font color="#E5E5E5"> notice the member attribute</font>

385
00:28:06,190 --> 00:28:09,419
<font color="#E5E5E5">is still</font><font color="#CCCCCC"> read only</font>

386
00:28:17,880 --> 00:28:22,130
<font color="#E5E5E5">okay let's move on</font>

387
00:28:28,410 --> 00:28:35,580
according to<font color="#CCCCCC"> Matt test they</font><font color="#E5E5E5"> statute</font>

388
00:28:32,110 --> 00:28:39,760
<font color="#E5E5E5">bypass works you know what's fine</font>

389
00:28:35,580 --> 00:28:40,960
<font color="#E5E5E5">windows inside the preview one four six</font>

390
00:28:39,760 --> 00:28:44,250
<font color="#E5E5E5">eight six something</font>

391
00:28:40,960 --> 00:28:49,810
however<font color="#E5E5E5"> on subsequent diversions like</font>

392
00:28:44,250 --> 00:28:52,690
one five zero forty eight<font color="#E5E5E5"> you know this</font>

393
00:28:49,810 --> 00:28:55,780
native API became by invalid<font color="#E5E5E5"> cantar</font><font color="#CCCCCC"> get</font>

394
00:28:52,690 --> 00:29:02,980
<font color="#E5E5E5">so it kind of longer catch the safety</font>

395
00:28:55,780 --> 00:29:05,860
check in fact calling function out of

396
00:29:02,980 --> 00:29:10,240
<font color="#CCCCCC">context has</font><font color="#E5E5E5"> been explicitly marked as</font>

397
00:29:05,860 --> 00:29:13,709
<font color="#E5E5E5">out of scope in the</font><font color="#CCCCCC"> rules of Microsoft</font>

398
00:29:10,240 --> 00:29:16,990
and<font color="#CCCCCC"> medication bypass but funky</font>

399
00:29:13,710 --> 00:29:21,720
obviously Microsoft<font color="#CCCCCC"> is pretty confident</font>

400
00:29:16,990 --> 00:29:23,980
that the<font color="#E5E5E5"> fine going the CFG</font>

401
00:29:21,720 --> 00:29:27,090
implementation will be<font color="#CCCCCC"> able to defeat</font>

402
00:29:23,980 --> 00:29:32,200
all these kind of controller hijacking

403
00:29:27,090 --> 00:29:34,870
including calling<font color="#CCCCCC"> functional contest so</font>

404
00:29:32,200 --> 00:29:37,090
the question now is<font color="#E5E5E5"> are we still</font><font color="#CCCCCC"> able to</font>

405
00:29:34,870 --> 00:29:41,530
<font color="#E5E5E5">bypass the</font><font color="#CCCCCC"> memory medication without</font>

406
00:29:37,090 --> 00:29:47,199
<font color="#E5E5E5">changing their control so the answer</font><font color="#CCCCCC"> is</font>

407
00:29:41,530 --> 00:29:49,300
yes<font color="#E5E5E5"> by using the data</font><font color="#CCCCCC"> only</font><font color="#E5E5E5"> exploitation</font>

408
00:29:47,200 --> 00:29:51,720
techniques that we'll be discussing on

409
00:29:49,300 --> 00:29:51,720
<font color="#E5E5E5">next</font>

410
00:29:56,850 --> 00:30:04,510
they only attack<font color="#E5E5E5"> as its name suggests</font><font color="#CCCCCC"> it</font>

411
00:30:01,750 --> 00:30:07,510
<font color="#CCCCCC">same set of manipulating</font><font color="#E5E5E5"> the programs</font>

412
00:30:04,510 --> 00:30:11,649
are critical data<font color="#E5E5E5"> but results diverting</font>

413
00:30:07,510 --> 00:30:15,940
its execution control<font color="#E5E5E5"> and changing in</font>

414
00:30:11,649 --> 00:30:19,330
programs<font color="#CCCCCC"> the data may lead to</font><font color="#E5E5E5"> the</font><font color="#CCCCCC"> change</font>

415
00:30:15,940 --> 00:30:22,870
of the<font color="#CCCCCC"> programs that default</font><font color="#E5E5E5"> behaviors</font>

416
00:30:19,330 --> 00:30:25,689
so it can be<font color="#E5E5E5"> leveraged to achieve some</font>

417
00:30:22,870 --> 00:30:29,529
powerful things<font color="#E5E5E5"> such as</font><font color="#CCCCCC"> bypassing</font>

418
00:30:25,690 --> 00:30:37,289
<font color="#E5E5E5">certain restriction and you know awesome</font>

419
00:30:29,529 --> 00:30:41,080
<font color="#E5E5E5">protection well here are some example of</font>

420
00:30:37,289 --> 00:30:45,240
<font color="#CCCCCC">successful data</font><font color="#E5E5E5"> oriented attack the bite</font>

421
00:30:41,080 --> 00:30:49,570
vital points track that enables

422
00:30:45,240 --> 00:30:54,840
JavaScript<font color="#CCCCCC"> to combo by just flipping one</font>

423
00:30:49,570 --> 00:30:58,809
bit in<font color="#CCCCCC"> that</font><font color="#E5E5E5"> object also</font><font color="#CCCCCC"> this one</font>

424
00:30:54,840 --> 00:31:05,260
<font color="#E5E5E5">Microsoft event bypass by tampering</font><font color="#CCCCCC"> with</font>

425
00:30:58,809 --> 00:31:07,139
its configuration<font color="#CCCCCC"> data in memory what</font>

426
00:31:05,260 --> 00:31:11,649
kind of data will be targeted

427
00:31:07,140 --> 00:31:14,590
theoretically<font color="#E5E5E5"> and a data and a data that</font>

428
00:31:11,649 --> 00:31:18,689
can be<font color="#E5E5E5"> leveraged</font><font color="#CCCCCC"> to change the</font><font color="#E5E5E5"> programs</font>

429
00:31:14,590 --> 00:31:23,590
of default behavior<font color="#CCCCCC"> will be targeted</font>

430
00:31:18,690 --> 00:31:26,950
such as<font color="#E5E5E5"> certain global variables in the</font>

431
00:31:23,590 --> 00:31:31,120
data<font color="#E5E5E5"> section or some critical flag in</font>

432
00:31:26,950 --> 00:31:35,980
<font color="#E5E5E5">object and this data could exist in the</font>

433
00:31:31,120 --> 00:31:42,370
<font color="#CCCCCC">unprotected data section hit private</font>

434
00:31:35,980 --> 00:31:46,049
data or stack and so on how to perform

435
00:31:42,370 --> 00:31:48,549
data<font color="#E5E5E5"> only attack there are some key</font>

436
00:31:46,049 --> 00:31:54,039
factors<font color="#E5E5E5"> that are very crucial to a</font>

437
00:31:48,549 --> 00:31:57,250
success for data only attack such as the

438
00:31:54,039 --> 00:31:59,620
ability<font color="#E5E5E5"> of arbitrary address read and</font>

439
00:31:57,250 --> 00:32:05,220
write and<font color="#E5E5E5"> then being able to actually</font>

440
00:31:59,620 --> 00:32:09,159
<font color="#E5E5E5">locate the target data at one time</font>

441
00:32:05,220 --> 00:32:13,420
and sometimes the existence of certain

442
00:32:09,160 --> 00:32:17,650
<font color="#E5E5E5">data is transient and</font><font color="#CCCCCC"> time-sensitive so</font>

443
00:32:13,420 --> 00:32:20,980
the timing may play<font color="#E5E5E5"> a you know an</font>

444
00:32:17,650 --> 00:32:25,090
important role in these<font color="#CCCCCC"> cases for</font>

445
00:32:20,980 --> 00:32:29,580
<font color="#CCCCCC">example if you want</font><font color="#E5E5E5"> to modify the data</font>

446
00:32:25,090 --> 00:32:29,580
stack<font color="#E5E5E5"> such as local</font><font color="#CCCCCC"> variables</font>

447
00:32:35,009 --> 00:32:43,019
with the concept<font color="#CCCCCC"> of</font><font color="#E5E5E5"> data only attacking</font>

448
00:32:37,200 --> 00:32:45,600
by now<font color="#E5E5E5"> we'll see how to leverage</font><font color="#CCCCCC"> the the</font>

449
00:32:43,019 --> 00:32:50,330
load of work mechanism to launch data

450
00:32:45,600 --> 00:32:53,668
only attack to bypass memory mitigation

451
00:32:50,330 --> 00:32:56,549
first I will introduce<font color="#E5E5E5"> in order work</font>

452
00:32:53,669 --> 00:33:00,419
mechanism<font color="#E5E5E5"> now explain how to leverage</font>

453
00:32:56,549 --> 00:33:04,320
this particular mechanism<font color="#CCCCCC"> to first lick</font>

454
00:33:00,419 --> 00:33:10,860
the stack address<font color="#CCCCCC"> the second to bypass</font>

455
00:33:04,320 --> 00:33:14,129
<font color="#E5E5E5">CFG loader work is an internal</font><font color="#CCCCCC"> mechanism</font>

456
00:33:10,860 --> 00:33:17,360
of<font color="#CCCCCC"> iOS</font><font color="#E5E5E5"> module border and area is</font>

457
00:33:14,129 --> 00:33:22,139
responsible<font color="#CCCCCC"> for</font><font color="#E5E5E5"> performing where is</font>

458
00:33:17,360 --> 00:33:24,620
loaded related tasks and this works can

459
00:33:22,139 --> 00:33:29,070
can<font color="#CCCCCC"> be processed</font><font color="#E5E5E5"> either you know</font>

460
00:33:24,620 --> 00:33:32,250
synchronously or asynchronously<font color="#CCCCCC"> and a</font>

461
00:33:29,070 --> 00:33:35,908
synchronous mode is specifically<font color="#CCCCCC"> used to</font>

462
00:33:32,250 --> 00:33:40,559
support the so-called parallel<font color="#E5E5E5"> loading</font>

463
00:33:35,909 --> 00:33:43,889
of the dependent modules the in membrane

464
00:33:40,559 --> 00:33:48,178
structure of<font color="#E5E5E5"> loaded word contains a</font>

465
00:33:43,889 --> 00:33:51,029
fixed size header and the variable<font color="#E5E5E5"> dense</font>

466
00:33:48,179 --> 00:33:56,220
part the module name<font color="#E5E5E5"> we're going to show</font>

467
00:33:51,029 --> 00:33:59,549
<font color="#CCCCCC">you a diagram</font><font color="#E5E5E5"> and the in a synchronous</font>

468
00:33:56,220 --> 00:34:03,899
mode all the<font color="#E5E5E5"> loader work instance are</font>

469
00:33:59,549 --> 00:34:07,850
organized in a doubly linked list which

470
00:34:03,899 --> 00:34:07,850
is<font color="#E5E5E5"> f is</font><font color="#CCCCCC"> Oh</font>

471
00:34:10,409 --> 00:34:17,440
the<font color="#CCCCCC"> Lola worker mechanism actually</font>

472
00:34:12,879 --> 00:34:21,040
<font color="#E5E5E5">consists of four major functions and the</font>

473
00:34:17,440 --> 00:34:25,418
snapping<font color="#CCCCCC"> is one of the important loading</font>

474
00:34:21,040 --> 00:34:29,409
<font color="#E5E5E5">words and that is fulfilled by ldrp snap</font>

475
00:34:25,418 --> 00:34:32,399
module<font color="#E5E5E5"> next we're going to look at this</font>

476
00:34:29,409 --> 00:34:32,399
function<font color="#E5E5E5"> one</font><font color="#CCCCCC"> by one</font>

477
00:34:35,790 --> 00:34:42,540
ldrp allocates placeholder<font color="#CCCCCC"> this function</font>

478
00:34:39,649 --> 00:34:50,759
allocates a new work<font color="#E5E5E5"> from the Lotus</font>

479
00:34:42,540 --> 00:34:53,668
private<font color="#CCCCCC"> hit ldrp q''-word and this</font>

480
00:34:50,760 --> 00:34:57,690
function<font color="#E5E5E5"> insert a new worked at a tale</font>

481
00:34:53,668 --> 00:35:01,200
of the<font color="#CCCCCC"> doubly linked list and</font><font color="#E5E5E5"> both the</font>

482
00:34:57,690 --> 00:35:06,620
head of the tail of<font color="#CCCCCC"> this</font><font color="#E5E5E5"> list are you</font>

483
00:35:01,200 --> 00:35:06,620
know the global variables of<font color="#CCCCCC"> angie del</font>

484
00:35:07,250 --> 00:35:16,110
<font color="#E5E5E5">so they will take this you know a</font>

485
00:35:10,730 --> 00:35:18,890
<font color="#CCCCCC">doubly-linked released</font><font color="#E5E5E5"> in contrast to</font>

486
00:35:16,110 --> 00:35:23,250
the previous<font color="#E5E5E5"> function this function</font>

487
00:35:18,890 --> 00:35:30,900
<font color="#CCCCCC">dream work you remove the head node and</font>

488
00:35:23,250 --> 00:35:34,850
send it<font color="#E5E5E5"> to the</font><font color="#CCCCCC"> process routine and the</font>

489
00:35:30,900 --> 00:35:38,870
process routine is LP<font color="#E5E5E5"> erp process work</font>

490
00:35:34,850 --> 00:35:38,870
<font color="#CCCCCC">as a bottom Mexican</font>

491
00:35:42,940 --> 00:35:49,510
<font color="#CCCCCC">howdy IP process work</font><font color="#E5E5E5"> process one single</font>

492
00:35:46,030 --> 00:35:52,839
work<font color="#E5E5E5"> such</font><font color="#CCCCCC"> as</font><font color="#E5E5E5"> the work of the volume</font>

493
00:35:49,510 --> 00:35:55,480
mapping<font color="#CCCCCC"> or mon0</font><font color="#E5E5E5"> snapping and this</font>

494
00:35:52,839 --> 00:36:02,288
<font color="#E5E5E5">function can be caught in both</font>

495
00:35:55,480 --> 00:36:09,720
synchronous<font color="#E5E5E5"> over a synchronous load this</font>

496
00:36:02,289 --> 00:36:09,720
<font color="#E5E5E5">is the process for module that ping</font>

497
00:36:15,010 --> 00:36:22,300
how we mentioned<font color="#E5E5E5"> the snapping as one of</font>

498
00:36:17,920 --> 00:36:25,840
<font color="#E5E5E5">the most important works supported by</font>

499
00:36:22,300 --> 00:36:29,730
this mechanism<font color="#E5E5E5"> and the</font><font color="#CCCCCC"> ldr peace net</font>

500
00:36:25,840 --> 00:36:33,190
module<font color="#E5E5E5"> process the work of snapping and</font>

501
00:36:29,730 --> 00:36:35,619
snapping means loading<font color="#E5E5E5"> the dependent</font>

502
00:36:33,190 --> 00:36:43,119
module and the result very important

503
00:36:35,619 --> 00:36:47,050
important functions at the<font color="#E5E5E5"> end of this</font>

504
00:36:43,119 --> 00:36:52,600
function as you can see the cause no

505
00:36:47,050 --> 00:36:55,720
function do<font color="#CCCCCC"> impose this network</font><font color="#E5E5E5"> to</font>

506
00:36:52,600 --> 00:36:58,380
restore the high data section memory

507
00:36:55,720 --> 00:36:58,379
attributes

508
00:37:01,600 --> 00:37:07,509
a<font color="#E5E5E5"> dual post</font><font color="#CCCCCC"> us Network restore the</font>

509
00:37:04,480 --> 00:37:11,140
<font color="#CCCCCC">remember attribute of</font><font color="#E5E5E5"> I data section and</font>

510
00:37:07,510 --> 00:37:19,060
<font color="#E5E5E5">also known as import table so as a</font>

511
00:37:11,140 --> 00:37:21,730
regional setting in<font color="#E5E5E5"> PD file also this</font>

512
00:37:19,060 --> 00:37:24,759
function responsible for making sure

513
00:37:21,730 --> 00:37:28,270
<font color="#E5E5E5">those critical security check function</font>

514
00:37:24,760 --> 00:37:33,160
<font color="#E5E5E5">are</font><font color="#CCCCCC"> correct later result such as the</font>

515
00:37:28,270 --> 00:37:36,840
<font color="#E5E5E5">guard check icon at PTR and God has a</font>

516
00:37:33,160 --> 00:37:36,839
severe verify<font color="#CCCCCC"> senior</font>

517
00:37:42,930 --> 00:37:49,950
a lot<font color="#E5E5E5"> of work of snapping should look</font>

518
00:37:46,950 --> 00:37:52,890
something like this remembering a<font color="#CCCCCC"> star</font>

519
00:37:49,950 --> 00:37:58,680
<font color="#E5E5E5">with</font><font color="#CCCCCC"> a</font><font color="#E5E5E5"> fixed</font><font color="#CCCCCC"> size header which</font><font color="#E5E5E5"> include</font>

520
00:37:52,890 --> 00:38:01,440
the<font color="#E5E5E5"> Unicode string of modulate the load</font>

521
00:37:58,680 --> 00:38:07,440
of data table<font color="#E5E5E5"> entries of current</font><font color="#CCCCCC"> volume</font>

522
00:38:01,440 --> 00:38:09,360
<font color="#CCCCCC">and its parent module</font><font color="#E5E5E5"> and list entry and</font>

523
00:38:07,440 --> 00:38:14,310
followed<font color="#CCCCCC"> by the</font><font color="#E5E5E5"> information about</font>

524
00:38:09,360 --> 00:38:18,360
dependent module also<font color="#E5E5E5"> the information</font>

525
00:38:14,310 --> 00:38:22,380
<font color="#CCCCCC">about the high data section including</font>

526
00:38:18,360 --> 00:38:27,810
<font color="#CCCCCC">start address memory attribute and the</font>

527
00:38:22,380 --> 00:38:32,850
size the size of the header is text

528
00:38:27,810 --> 00:38:36,500
below<font color="#E5E5E5"> and it is followed by a variable</font>

529
00:38:32,850 --> 00:38:41,299
<font color="#E5E5E5">length part which stores the</font><font color="#CCCCCC"> unique or</font>

530
00:38:36,500 --> 00:38:44,600
<font color="#CCCCCC">larger</font><font color="#E5E5E5"> name as you can see at the bottom</font>

531
00:38:41,300 --> 00:38:44,600
dot<font color="#E5E5E5"> the air</font>

532
00:38:51,180 --> 00:39:00,350
miss Greenshaw shows the data structure

533
00:38:53,670 --> 00:39:03,630
of<font color="#CCCCCC"> LDR data table entry and offset hex</font>

534
00:39:00,350 --> 00:39:06,930
<font color="#E5E5E5">98 there is a data pointer pointing to</font>

535
00:39:03,630 --> 00:39:16,410
<font color="#CCCCCC">another structure called I'll</font><font color="#E5E5E5"> be a DD AG</font>

536
00:39:06,930 --> 00:39:21,029
<font color="#E5E5E5">no and offset hex 38 of this structure</font>

537
00:39:16,410 --> 00:39:23,790
<font color="#E5E5E5">there</font><font color="#CCCCCC"> is a field</font><font color="#E5E5E5"> called state and the</font>

538
00:39:21,030 --> 00:39:26,610
function<font color="#CCCCCC"> l VIP process work we'll be</font>

539
00:39:23,790 --> 00:39:29,070
turning what kind<font color="#E5E5E5"> of work to take the</font>

540
00:39:26,610 --> 00:39:32,280
process<font color="#CCCCCC"> according to the value in this</font>

541
00:39:29,070 --> 00:39:42,900
field in this case<font color="#CCCCCC"> the state</font><font color="#E5E5E5"> is</font><font color="#CCCCCC"> 4 which</font>

542
00:39:32,280 --> 00:39:44,310
stands for<font color="#CCCCCC"> lb our</font><font color="#E5E5E5"> module is</font><font color="#CCCCCC"> 90 so up to</font>

543
00:39:42,900 --> 00:39:47,070
this point<font color="#E5E5E5"> you should have a basic</font>

544
00:39:44,310 --> 00:39:51,420
<font color="#E5E5E5">understanding of this loader work</font>

545
00:39:47,070 --> 00:39:54,270
mechanism so now it's time to explain

546
00:39:51,420 --> 00:39:57,960
<font color="#E5E5E5">how to leverage this mechanism to you</font>

547
00:39:54,270 --> 00:40:03,710
know do<font color="#CCCCCC"> something real attacks if you</font>

548
00:39:57,960 --> 00:40:07,620
look at the offset<font color="#E5E5E5"> hex 10 and 20 of this</font>

549
00:40:03,710 --> 00:40:10,290
load of work instance as highlighted

550
00:40:07,620 --> 00:40:15,330
event<font color="#E5E5E5"> you are seeing some interesting</font>

551
00:40:10,290 --> 00:40:19,170
value there<font color="#E5E5E5"> right and it turns out these</font>

552
00:40:15,330 --> 00:40:21,240
values<font color="#CCCCCC"> are stack address and they belong</font>

553
00:40:19,170 --> 00:40:25,610
to the Strand on which the loading of a

554
00:40:21,240 --> 00:40:29,220
boundary operates now the question comes

555
00:40:25,610 --> 00:40:33,090
is it possible for<font color="#E5E5E5"> us to make those</font>

556
00:40:29,220 --> 00:40:36,660
<font color="#E5E5E5">stack address from the loaded work</font>

557
00:40:33,090 --> 00:40:38,730
structure the answer is yes however

558
00:40:36,660 --> 00:40:43,640
<font color="#CCCCCC">there</font><font color="#E5E5E5"> are some obstacles</font><font color="#CCCCCC"> we need to</font>

559
00:40:38,730 --> 00:40:47,240
<font color="#E5E5E5">overcome first the motor work structure</font>

560
00:40:43,640 --> 00:40:48,660
<font color="#E5E5E5">stay in the</font><font color="#CCCCCC"> queue only for very</font><font color="#E5E5E5"> short</font>

561
00:40:47,240 --> 00:40:51,870
time period

562
00:40:48,660 --> 00:40:55,980
it won't soon be removed for processing

563
00:40:51,870 --> 00:40:59,150
from a queue so it's really<font color="#E5E5E5"> hard</font><font color="#CCCCCC"> for us</font>

564
00:40:55,980 --> 00:41:01,140
to trace<font color="#E5E5E5"> it by reading it from the queue</font>

565
00:40:59,150 --> 00:41:05,150
this is

566
00:41:01,140 --> 00:41:09,509
time<font color="#CCCCCC"> sensitive</font><font color="#E5E5E5"> as I mentioned before</font>

567
00:41:05,150 --> 00:41:12,870
<font color="#E5E5E5">second the size of the load of work</font>

568
00:41:09,510 --> 00:41:15,450
structure is variable due to<font color="#E5E5E5"> the lens</font>

569
00:41:12,870 --> 00:41:21,330
<font color="#CCCCCC">you know the the difference in</font><font color="#E5E5E5"> the</font>

570
00:41:15,450 --> 00:41:24,779
<font color="#CCCCCC">length of</font><font color="#E5E5E5"> the module</font><font color="#CCCCCC"> name so we're not</font>

571
00:41:21,330 --> 00:41:31,890
able to<font color="#E5E5E5"> accurately predict its location</font>

572
00:41:24,780 --> 00:41:35,520
in<font color="#CCCCCC"> the inner hip eventually after some</font>

573
00:41:31,890 --> 00:41:39,900
in-depth research I figure out a way<font color="#E5E5E5"> to</font>

574
00:41:35,520 --> 00:41:43,259
<font color="#CCCCCC">actually</font><font color="#E5E5E5"> you know locate such a</font><font color="#CCCCCC"> load of</font>

575
00:41:39,900 --> 00:41:49,650
<font color="#CCCCCC">work structure</font><font color="#E5E5E5"> in memory and the</font><font color="#CCCCCC"> lik</font>

576
00:41:43,260 --> 00:41:54,110
stack address out of it and knowing<font color="#CCCCCC"> the</font>

577
00:41:49,650 --> 00:41:58,620
address of<font color="#CCCCCC"> our step will be</font><font color="#E5E5E5"> you know</font>

578
00:41:54,110 --> 00:42:02,600
table you know really bypass the CFG<font color="#CCCCCC"> by</font>

579
00:41:58,620 --> 00:42:02,600
<font color="#E5E5E5">crafting a return</font><font color="#CCCCCC"> address on it</font>

580
00:42:06,540 --> 00:42:14,630
now let me<font color="#E5E5E5"> show you this star clicking</font>

581
00:42:09,960 --> 00:42:14,630
attack<font color="#E5E5E5"> like that</font>

582
00:43:03,080 --> 00:43:11,049
well just this command to annually

583
00:43:06,670 --> 00:43:11,050
<font color="#CCCCCC">arbitrary address Sweden right</font>

584
00:43:18,580 --> 00:43:22,350
that we need<font color="#E5E5E5"> to wait for</font><font color="#CCCCCC"> a while</font>

585
00:43:33,240 --> 00:43:39,759
<font color="#E5E5E5">okay</font>

586
00:43:35,350 --> 00:43:42,819
it shows a lot<font color="#CCCCCC"> of work is located at</font>

587
00:43:39,760 --> 00:43:51,150
this address<font color="#E5E5E5"> and the</font><font color="#CCCCCC"> stack address</font><font color="#E5E5E5"> this</font>

588
00:43:42,820 --> 00:43:56,700
<font color="#E5E5E5">lick is by</font><font color="#CCCCCC"> any</font><font color="#E5E5E5"> nine to</font><font color="#CCCCCC"> grab</font><font color="#E5E5E5"> now that's</font><font color="#CCCCCC"> a</font>

589
00:43:51,150 --> 00:43:56,700
<font color="#E5E5E5">user windbg to verify it</font>

590
00:44:38,080 --> 00:44:45,069
<font color="#E5E5E5">to search</font>

591
00:44:48,150 --> 00:44:56,480
this is the<font color="#E5E5E5"> shred the the stack</font><font color="#CCCCCC"> address</font>

592
00:44:53,850 --> 00:44:56,480
<font color="#CCCCCC">belong to</font>

593
00:45:03,820 --> 00:45:09,730
see

594
00:45:05,770 --> 00:45:14,100
the stack address<font color="#E5E5E5"> - indeed is in this</font>

595
00:45:09,730 --> 00:45:14,100
<font color="#E5E5E5">range</font><font color="#CCCCCC"> ice tackle any respect place</font>

596
00:45:19,030 --> 00:45:22,030
<font color="#E5E5E5">okay</font>

597
00:45:32,070 --> 00:45:36,380
let's<font color="#CCCCCC"> continue</font><font color="#E5E5E5"> our presentation</font>

598
00:45:49,890 --> 00:45:56,819
in addition to the stack address<font color="#CCCCCC"> making</font>

599
00:45:53,930 --> 00:46:00,509
the<font color="#E5E5E5"> load of work mechanism can also be</font>

600
00:45:56,819 --> 00:46:04,849
abused<font color="#CCCCCC"> to</font><font color="#E5E5E5"> make</font><font color="#CCCCCC"> arbitrary rate</font><font color="#E5E5E5"> only</font>

601
00:46:00,509 --> 00:46:08,190
memory writable<font color="#E5E5E5"> down to by policy FG</font>

602
00:46:04,849 --> 00:46:11,009
this is possible because first<font color="#E5E5E5"> there</font><font color="#CCCCCC"> is</font>

603
00:46:08,190 --> 00:46:14,249
<font color="#CCCCCC">no protection on</font><font color="#E5E5E5"> load of work doubly</font>

604
00:46:11,009 --> 00:46:20,339
linked<font color="#E5E5E5"> list to prevent it from being you</font>

605
00:46:14,249 --> 00:46:24,738
know modified second<font color="#E5E5E5"> the loader modules</font>

606
00:46:20,339 --> 00:46:27,119
mapping work can be leveraged to<font color="#E5E5E5"> change</font>

607
00:46:24,739 --> 00:46:31,440
the<font color="#CCCCCC"> memory attribute</font><font color="#E5E5E5"> of arbitrary</font>

608
00:46:27,119 --> 00:46:33,359
address the<font color="#E5E5E5"> whole exploitation process</font>

609
00:46:31,440 --> 00:46:36,380
is something like this first<font color="#E5E5E5"> we're going</font>

610
00:46:33,359 --> 00:46:40,769
to<font color="#E5E5E5"> take a</font><font color="#CCCCCC"> loader work structure</font>

611
00:46:36,380 --> 00:46:43,410
remembering and this motor work carries

612
00:46:40,769 --> 00:46:45,689
all the<font color="#E5E5E5"> information needed</font><font color="#CCCCCC"> for</font><font color="#E5E5E5"> the manga</font>

613
00:46:43,410 --> 00:46:50,368
attribute change<font color="#E5E5E5"> and then we're going to</font>

614
00:46:45,690 --> 00:46:54,299
insert it to<font color="#E5E5E5"> the</font><font color="#CCCCCC"> system's the work</font><font color="#E5E5E5"> queue</font>

615
00:46:50,369 --> 00:46:58,609
and waited<font color="#CCCCCC"> for it to</font><font color="#E5E5E5"> be processed</font><font color="#CCCCCC"> that's</font>

616
00:46:54,299 --> 00:46:58,609
<font color="#E5E5E5">it very</font><font color="#CCCCCC"> simple</font>

617
00:47:00,660 --> 00:47:08,279
<font color="#CCCCCC">so this is a diagram of this gap to</font>

618
00:47:04,500 --> 00:47:12,420
bypass<font color="#CCCCCC"> scheme</font><font color="#E5E5E5"> the blue object stands for</font>

619
00:47:08,280 --> 00:47:16,650
the fake load of<font color="#E5E5E5"> work that we created in</font>

620
00:47:12,420 --> 00:47:20,430
memory and as you<font color="#E5E5E5"> can</font><font color="#CCCCCC"> see the address</font><font color="#E5E5E5"> of</font>

621
00:47:16,650 --> 00:47:24,090
I data section points<font color="#CCCCCC"> to the import</font>

622
00:47:20,430 --> 00:47:26,520
table of chakra<font color="#CCCCCC"> LDL</font><font color="#E5E5E5"> and the attribute</font>

623
00:47:24,090 --> 00:47:30,840
<font color="#E5E5E5">that we specified it is</font><font color="#CCCCCC"> page</font><font color="#E5E5E5"> read and</font>

624
00:47:26,520 --> 00:47:33,680
write<font color="#E5E5E5"> so this</font><font color="#CCCCCC"> motor will</font><font color="#E5E5E5"> actually</font>

625
00:47:30,840 --> 00:47:38,640
<font color="#E5E5E5">request the OS module loader to change</font>

626
00:47:33,680 --> 00:47:41,339
the vendor attribute<font color="#CCCCCC"> of</font><font color="#E5E5E5"> checklist import</font>

627
00:47:38,640 --> 00:47:48,589
<font color="#E5E5E5">table to the one we</font><font color="#CCCCCC"> specified in this</font>

628
00:47:41,340 --> 00:47:53,460
<font color="#E5E5E5">case page rewrite in order for this fake</font>

629
00:47:48,590 --> 00:47:57,840
<font color="#CCCCCC">loaded work to pick up by</font><font color="#E5E5E5"> the US will</font>

630
00:47:53,460 --> 00:48:00,540
<font color="#CCCCCC">have to insert it into the load of work</font>

631
00:47:57,840 --> 00:48:03,530
queue that is maintained by the<font color="#E5E5E5"> US but</font>

632
00:48:00,540 --> 00:48:03,529
no protection

633
00:48:11,700 --> 00:48:17,520
the member at you go change occurs in

634
00:48:14,190 --> 00:48:21,270
<font color="#E5E5E5">this internal function they will post a</font>

635
00:48:17,520 --> 00:48:25,920
snap<font color="#E5E5E5"> work in this case we you know you</font>

636
00:48:21,270 --> 00:48:28,130
this particular<font color="#CCCCCC"> and POC</font><font color="#E5E5E5"> we choose to</font>

637
00:48:25,920 --> 00:48:32,850
change<font color="#CCCCCC"> the</font><font color="#E5E5E5"> memory attribute of our</font>

638
00:48:28,130 --> 00:48:36,840
chakras<font color="#E5E5E5"> import table and this address is</font>

639
00:48:32,850 --> 00:48:42,980
you know specified in the loader work

640
00:48:36,840 --> 00:48:49,400
<font color="#E5E5E5">structure similar to</font><font color="#CCCCCC"> our first demo</font>

641
00:48:42,980 --> 00:48:54,720
dot-com<font color="#CCCCCC"> you know is the god check icon</font>

642
00:48:49,400 --> 00:48:58,290
<font color="#E5E5E5">at PTR has been replaced with some blank</font>

643
00:48:54,720 --> 00:49:00,870
function in this case until<font color="#CCCCCC"> del RTL kept</font>

644
00:48:58,290 --> 00:49:06,900
current<font color="#CCCCCC"> PB</font><font color="#E5E5E5"> it does</font><font color="#CCCCCC"> nothing just the</font>

645
00:49:00,870 --> 00:49:10,200
<font color="#CCCCCC">return and the import table of chatter</font>

646
00:49:06,900 --> 00:49:12,930
on the<font color="#E5E5E5"> memory attribute of the important</font>

647
00:49:10,200 --> 00:49:15,710
<font color="#CCCCCC">table satellites being changed to</font><font color="#E5E5E5"> page</font>

648
00:49:12,930 --> 00:49:15,710
<font color="#CCCCCC">read and write</font>

649
00:49:19,020 --> 00:49:28,420
solution for<font color="#E5E5E5"> CFG bypass abusing</font><font color="#CCCCCC"> LDR work</font>

650
00:49:25,240 --> 00:49:32,009
<font color="#E5E5E5">actually</font><font color="#CCCCCC"> for this particular</font><font color="#E5E5E5"> case it can</font>

651
00:49:28,420 --> 00:49:35,100
easily be fixed by enforcing a check

652
00:49:32,010 --> 00:49:39,190
<font color="#CCCCCC">under target address to make sure it</font>

653
00:49:35,100 --> 00:49:41,710
belongs to<font color="#CCCCCC"> knows the I data section of</font>

654
00:49:39,190 --> 00:49:47,020
some module which is<font color="#E5E5E5"> in the snapping</font>

655
00:49:41,710 --> 00:49:50,500
state however<font color="#E5E5E5"> you know Microsoft</font>

656
00:49:47,020 --> 00:49:54,490
consider corrupting<font color="#E5E5E5"> a mutable</font><font color="#CCCCCC"> read-only</font>

657
00:49:50,500 --> 00:49:57,490
<font color="#CCCCCC">memory</font><font color="#E5E5E5"> is a no limitation so they know</font>

658
00:49:54,490 --> 00:49:59,649
there could be a variety of<font color="#E5E5E5"> Messer</font><font color="#CCCCCC"> which</font>

659
00:49:57,490 --> 00:50:03,220
can<font color="#CCCCCC"> be</font><font color="#E5E5E5"> used to subvert the read-only</font>

660
00:49:59,650 --> 00:50:07,120
memory<font color="#CCCCCC"> so instead of keeping</font><font color="#E5E5E5"> adding the</font>

661
00:50:03,220 --> 00:50:09,370
<font color="#CCCCCC">0.6</font><font color="#E5E5E5"> for</font><font color="#CCCCCC"> each</font><font color="#E5E5E5"> possible measure and</font>

662
00:50:07,120 --> 00:50:15,730
they're looking<font color="#CCCCCC"> to address</font><font color="#E5E5E5"> it in the</font>

663
00:50:09,370 --> 00:50:19,870
more generic way maybe they're gonna

664
00:50:15,730 --> 00:50:24,510
move<font color="#E5E5E5"> like</font><font color="#CCCCCC"> the ICG are going to move it</font>

665
00:50:19,870 --> 00:50:24,509
out<font color="#E5E5E5"> of the sandbox process</font>

666
00:50:29,250 --> 00:50:35,280
so far we have<font color="#CCCCCC"> been shown the</font><font color="#E5E5E5"> power of a</font>

667
00:50:32,670 --> 00:50:40,440
data<font color="#E5E5E5"> only attack so a couple of my</font>

668
00:50:35,280 --> 00:50:43,260
examples<font color="#CCCCCC"> then how can we prevent such</font>

669
00:50:40,440 --> 00:50:46,140
data<font color="#CCCCCC"> attack basically there are two</font>

670
00:50:43,260 --> 00:50:50,460
options<font color="#E5E5E5"> to take one days to</font><font color="#CCCCCC"> protect your</font>

671
00:50:46,140 --> 00:50:53,220
critical data<font color="#CCCCCC"> you can either</font><font color="#E5E5E5"> apply the</font>

672
00:50:50,460 --> 00:50:58,430
<font color="#CCCCCC">read protection</font><font color="#E5E5E5"> on your</font><font color="#CCCCCC"> critical data</font>

673
00:50:53,220 --> 00:51:01,950
page or you can<font color="#E5E5E5"> use certain forms of</font>

674
00:50:58,430 --> 00:51:05,690
encryption<font color="#CCCCCC"> or obfuscation</font><font color="#E5E5E5"> to hide the</font>

675
00:51:01,950 --> 00:51:05,689
address of<font color="#E5E5E5"> your critical data</font>

676
00:51:06,170 --> 00:51:12,570
another option is always try and

677
00:51:09,869 --> 00:51:15,600
verifying the integrity of<font color="#CCCCCC"> your critical</font>

678
00:51:12,570 --> 00:51:19,890
data before<font color="#E5E5E5"> using it you know where is</font>

679
00:51:15,600 --> 00:51:26,790
extra logic<font color="#E5E5E5"> many such attack can</font><font color="#CCCCCC"> be</font>

680
00:51:19,890 --> 00:51:28,799
prevented in their early stage yeah at

681
00:51:26,790 --> 00:51:32,930
this point<font color="#CCCCCC"> there were pretty much done</font>

682
00:51:28,800 --> 00:51:32,930
<font color="#CCCCCC">without</font><font color="#E5E5E5"> talk here are some takeaways</font>

683
00:51:33,380 --> 00:51:40,670
<font color="#E5E5E5">first the</font><font color="#CCCCCC"> fine-grained CFI solution will</font>

684
00:51:37,350 --> 00:51:44,790
eventually defeat four kinds of you know

685
00:51:40,670 --> 00:51:47,400
control<font color="#E5E5E5"> for hijacking including the one</font>

686
00:51:44,790 --> 00:51:50,490
<font color="#E5E5E5">we talked about the calling function out</font>

687
00:51:47,400 --> 00:51:53,310
<font color="#E5E5E5">of context second today there are still</font>

688
00:51:50,490 --> 00:51:56,299
lots of unprotected<font color="#CCCCCC"> data they can</font><font color="#E5E5E5"> be</font>

689
00:51:53,310 --> 00:51:57,660
leveraged<font color="#E5E5E5"> to conduct state-only attack</font>

690
00:51:56,300 --> 00:52:00,600
sir

691
00:51:57,660 --> 00:52:04,890
they'd only<font color="#E5E5E5"> attack is difficult to</font>

692
00:52:00,600 --> 00:52:07,170
prevent<font color="#E5E5E5"> also as the awareness being</font>

693
00:52:04,890 --> 00:52:12,270
raised about<font color="#E5E5E5"> the danger</font><font color="#CCCCCC"> of</font><font color="#E5E5E5"> the only</font>

694
00:52:07,170 --> 00:52:15,000
attack but<font color="#CCCCCC"> that has now escalated</font><font color="#E5E5E5"> to you</font>

695
00:52:12,270 --> 00:52:19,859
know what contending of<font color="#CCCCCC"> the Daniell by</font>

696
00:52:15,000 --> 00:52:22,910
<font color="#E5E5E5">read-only</font><font color="#CCCCCC"> solid</font><font color="#E5E5E5"> protected memory so not</font>

697
00:52:19,859 --> 00:52:22,910
much<font color="#E5E5E5"> more handful</font>

698
00:52:24,270 --> 00:52:32,800
last data only<font color="#E5E5E5"> attack may have some</font>

699
00:52:29,850 --> 00:52:35,500
variations and it can can be combined

700
00:52:32,800 --> 00:52:43,990
with the modern exploitation techniques

701
00:52:35,500 --> 00:52:46,990
such as race condition yeah<font color="#CCCCCC"> this</font>

702
00:52:43,990 --> 00:52:49,509
<font color="#E5E5E5">concludes our talk of they don't attack</font>

703
00:52:46,990 --> 00:52:51,490
<font color="#E5E5E5">we'll be covering some more in</font><font color="#CCCCCC"> advance</font>

704
00:52:49,510 --> 00:52:56,230
<font color="#E5E5E5">the data on the attack in CC</font>

705
00:52:51,490 --> 00:52:59,020
circumference<font color="#E5E5E5"> so stay tuned</font><font color="#CCCCCC"> if</font><font color="#E5E5E5"> you have</font>

706
00:52:56,230 --> 00:53:01,990
any question<font color="#E5E5E5"> you</font><font color="#CCCCCC"> can send your question</font>

707
00:52:59,020 --> 00:53:05,740
to<font color="#E5E5E5"> our</font><font color="#CCCCCC"> e-mail</font><font color="#E5E5E5"> and here we would</font><font color="#CCCCCC"> like to</font>

708
00:53:01,990 --> 00:53:09,129
thank<font color="#E5E5E5"> nsrc</font><font color="#CCCCCC"> for getting that issue we</font>

709
00:53:05,740 --> 00:53:12,029
reported the fixed in a timely manner

710
00:53:09,130 --> 00:53:16,450
<font color="#E5E5E5">and also we want to</font><font color="#CCCCCC"> thank our colleagues</font>

711
00:53:12,030 --> 00:53:17,140
for their health to our research<font color="#CCCCCC"> ok</font>

712
00:53:16,450 --> 00:53:24,970
that's it

713
00:53:17,140 --> 00:53:27,299
any question so<font color="#CCCCCC"> I I can take</font><font color="#E5E5E5"> questions</font>

714
00:53:24,970 --> 00:53:27,299
offline

715
00:53:34,260 --> 00:53:40,570
did I understand correctly<font color="#E5E5E5"> that you were</font>

716
00:53:36,550 --> 00:53:42,160
suggesting<font color="#E5E5E5"> validating in memory</font>

717
00:53:40,570 --> 00:53:45,790
structures to make sure that they're<font color="#E5E5E5"> not</font>

718
00:53:42,160 --> 00:53:50,080
<font color="#E5E5E5">being corrupted</font><font color="#CCCCCC"> by these attacks</font><font color="#E5E5E5"> sorry</font>

719
00:53:45,790 --> 00:53:54,220
<font color="#E5E5E5">you mean that missing</font><font color="#CCCCCC"> dislike</font><font color="#E5E5E5"> suggestion</font>

720
00:53:50,080 --> 00:53:56,650
right yeah you're suggesting like doing

721
00:53:54,220 --> 00:53:58,899
some sort<font color="#E5E5E5"> of authentication of</font><font color="#CCCCCC"> the</font>

722
00:53:56,650 --> 00:54:02,320
in-memory<font color="#E5E5E5"> data yeah prior</font><font color="#CCCCCC"> to each use</font>

723
00:53:58,900 --> 00:54:04,810
<font color="#CCCCCC">dang sure that's not</font><font color="#E5E5E5"> being corrupted</font><font color="#CCCCCC"> it</font>

724
00:54:02,320 --> 00:54:08,620
would<font color="#E5E5E5"> not be possible to just Forge the</font>

725
00:54:04,810 --> 00:54:11,560
<font color="#E5E5E5">authentication as</font><font color="#CCCCCC"> well for</font><font color="#E5E5E5"> that presume</font>

726
00:54:08,620 --> 00:54:14,200
<font color="#E5E5E5">too challenging yeah I think</font><font color="#CCCCCC"> that</font>

727
00:54:11,560 --> 00:54:18,660
sometimes<font color="#E5E5E5"> it's going to affect the</font>

728
00:54:14,200 --> 00:54:18,660
performance so it's not you<font color="#CCCCCC"> know</font>

729
00:54:19,080 --> 00:54:28,890
suitable to do such kind<font color="#E5E5E5"> of checking or</font>

730
00:54:23,830 --> 00:54:28,890
<font color="#E5E5E5">investigation nice to place</font>

731
00:54:36,640 --> 00:54:40,900
I mean if you if<font color="#E5E5E5"> you put performance</font>

732
00:54:38,920 --> 00:54:42,490
inside of the radical solution couldn't

733
00:54:40,900 --> 00:54:44,650
you put the lighter the<font color="#E5E5E5"> loaded data</font>

734
00:54:42,490 --> 00:54:46,720
<font color="#E5E5E5">structures into kernel</font><font color="#CCCCCC"> so that you say</font>

735
00:54:44,650 --> 00:54:48,370
<font color="#CCCCCC">okay if I want to put something in</font><font color="#E5E5E5"> the</font>

736
00:54:46,720 --> 00:54:50,080
loader list this is<font color="#CCCCCC"> the kernel call the</font>

737
00:54:48,370 --> 00:54:52,359
kernel maintains below the list<font color="#E5E5E5"> and at</font>

738
00:54:50,080 --> 00:54:54,970
some point loads the module and places

739
00:54:52,360 --> 00:54:57,820
it into your to use the data space

740
00:54:54,970 --> 00:54:59,140
<font color="#E5E5E5">because then without being in in kernel</font>

741
00:54:57,820 --> 00:55:00,460
mode<font color="#E5E5E5"> you couldn't manipulate the data</font>

742
00:54:59,140 --> 00:55:04,359
structures anymore but you would<font color="#CCCCCC"> have</font>

743
00:55:00,460 --> 00:55:07,180
<font color="#E5E5E5">the context change for every load</font><font color="#CCCCCC"> I</font><font color="#E5E5E5"> this</font>

744
00:55:04,360 --> 00:55:11,020
could<font color="#E5E5E5"> be a solution probably kill the</font>

745
00:55:07,180 --> 00:55:15,000
office performance<font color="#E5E5E5"> yeah but you know we</font>

746
00:55:11,020 --> 00:55:15,000
cannot move everything<font color="#E5E5E5"> into combo right</font>

747
00:55:15,120 --> 00:55:24,910
yeah<font color="#E5E5E5"> because you know we haven't</font>

748
00:55:19,090 --> 00:55:28,720
discovered some interesting bugs<font color="#E5E5E5"> by you</font>

749
00:55:24,910 --> 00:55:33,730
know breaking some frequently use that

750
00:55:28,720 --> 00:55:36,580
data such as some synchronization<font color="#E5E5E5"> lock</font>

751
00:55:33,730 --> 00:55:39,550
<font color="#E5E5E5">something like that if you cannot move</font>

752
00:55:36,580 --> 00:55:45,990
<font color="#CCCCCC">you don't stop all this you know</font>

753
00:55:39,550 --> 00:55:49,870
<font color="#E5E5E5">stuff into the kernel space right so I</font>

754
00:55:45,990 --> 00:55:52,419
<font color="#E5E5E5">think right</font><font color="#CCCCCC"> now Microsoft is still</font>

755
00:55:49,870 --> 00:55:56,410
working<font color="#E5E5E5"> on</font><font color="#CCCCCC"> it</font><font color="#E5E5E5"> trying</font><font color="#CCCCCC"> to resolve</font><font color="#E5E5E5"> these</font>

756
00:55:52,420 --> 00:55:58,750
issues in<font color="#CCCCCC"> a generic way</font><font color="#E5E5E5"> that sir you</font>

757
00:55:56,410 --> 00:56:01,440
know look forward to seeing their

758
00:55:58,750 --> 00:56:01,440
solution

759
00:56:05,650 --> 00:56:10,460
so you<font color="#E5E5E5"> mentioned just now locks as an</font>

760
00:56:08,510 --> 00:56:12,559
interesting target<font color="#E5E5E5"> for manipulating</font>

761
00:56:10,460 --> 00:56:17,540
<font color="#E5E5E5">water some other interesting categories</font>

762
00:56:12,559 --> 00:56:23,569
of data to attack resulting bugs<font color="#CCCCCC"> cuz I</font>

763
00:56:17,540 --> 00:56:25,520
haven't had a<font color="#E5E5E5"> chance to</font><font color="#CCCCCC"> think about we</font>

764
00:56:23,569 --> 00:56:27,890
can<font color="#E5E5E5"> touch this that I'll slide because</font>

765
00:56:25,520 --> 00:56:33,460
<font color="#E5E5E5">so I'll be covering this you know if</font>

766
00:56:27,890 --> 00:56:33,460
<font color="#CCCCCC">your compass</font><font color="#E5E5E5"> great any more questions</font>

767
00:56:33,940 --> 00:56:39,640
<font color="#E5E5E5">well thank you let's thank being soon</font>

768
00:56:36,020 --> 00:56:39,640
for presentation

