1
00:00:13,410 --> 00:00:21,490
my talk so yeah we'll talk about

2
00:00:16,630 --> 00:00:23,349
exposing spies on<font color="#CCCCCC"> Mac OS my name is</font>

3
00:00:21,490 --> 00:00:26,348
<font color="#E5E5E5">Patrick Wartell I've worked at a bunch</font>

4
00:00:23,349 --> 00:00:28,899
of acronym places I'm currently the

5
00:00:26,349 --> 00:00:31,239
chief security researcher at<font color="#CCCCCC"> Cenac so I</font>

6
00:00:28,899 --> 00:00:32,800
connect we run manage bug bounty

7
00:00:31,239 --> 00:00:35,410
programs with vetted security

8
00:00:32,800 --> 00:00:37,480
researchers basically in short<font color="#E5E5E5"> we think</font>

9
00:00:35,410 --> 00:00:39,760
they're currently researchers or hackers

10
00:00:37,480 --> 00:00:41,230
in conjunction with software and

11
00:00:39,760 --> 00:00:43,539
technology is the best way to find

12
00:00:41,230 --> 00:00:45,640
vulnerabilities so if you're<font color="#CCCCCC"> a security</font>

13
00:00:43,539 --> 00:00:47,050
<font color="#E5E5E5">researcher or a hacker you can sign</font><font color="#CCCCCC"> up</font>

14
00:00:45,640 --> 00:00:49,480
with us kind<font color="#E5E5E5"> of as a freelancer and</font>

15
00:00:47,050 --> 00:00:51,968
<font color="#E5E5E5">basically get paid to find bugs in our</font>

16
00:00:49,480 --> 00:00:56,288
customers mobile apps iose devices and

17
00:00:51,969 --> 00:00:58,329
network endpoints<font color="#CCCCCC"> all right so what</font><font color="#E5E5E5"> are</font>

18
00:00:56,289 --> 00:01:00,699
we going to talk about today<font color="#E5E5E5"> well after</font>

19
00:00:58,329 --> 00:01:02,379
discussing some background concepts

20
00:01:00,699 --> 00:01:04,720
we're going to dive into<font color="#E5E5E5"> talking about</font>

21
00:01:02,379 --> 00:01:08,110
some mac malware that uses the mic and

22
00:01:04,720 --> 00:01:10,658
or webcam to spy on its victims well

23
00:01:08,110 --> 00:01:13,750
then talk about<font color="#E5E5E5"> a relatively new attack</font>

24
00:01:10,659 --> 00:01:16,870
or capability that could allow malware

25
00:01:13,750 --> 00:01:19,150
to record the user while the webcam is

26
00:01:16,870 --> 00:01:20,980
being used legitimately without

27
00:01:19,150 --> 00:01:23,290
detection and then<font color="#E5E5E5"> finally we're going</font>

28
00:01:20,980 --> 00:01:26,200
to talk about how<font color="#E5E5E5"> to detect and support</font>

29
00:01:23,290 --> 00:01:29,800
this attack with<font color="#E5E5E5"> the new tool I wrote</font>

30
00:01:26,200 --> 00:01:32,440
called<font color="#E5E5E5"> oversight</font><font color="#CCCCCC"> all right so let's</font>

31
00:01:29,800 --> 00:01:35,770
start off with<font color="#E5E5E5"> some background concepts</font>

32
00:01:32,440 --> 00:01:38,830
so one of<font color="#E5E5E5"> the most insidious actions of</font>

33
00:01:35,770 --> 00:01:41,170
a<font color="#CCCCCC"> cyberattack is abusing the video or</font>

34
00:01:38,830 --> 00:01:45,100
audio capabilities of an<font color="#E5E5E5"> infected host</font>

35
00:01:41,170 --> 00:01:47,980
to record an unknowing user so who's

36
00:01:45,100 --> 00:01:50,050
hacking webcam<font color="#E5E5E5"> for one hackers are doing</font>

37
00:01:47,980 --> 00:01:52,270
it often for their<font color="#CCCCCC"> own perversion there</font>

38
00:01:50,050 --> 00:01:54,460
was a great article that was written I

39
00:01:52,270 --> 00:01:56,830
believe it was in ours a few<font color="#E5E5E5"> years</font><font color="#CCCCCC"> ago</font>

40
00:01:54,460 --> 00:01:59,289
discussing this group were forum of

41
00:01:56,830 --> 00:02:01,539
hackers mostly males that<font color="#E5E5E5"> would try to</font>

42
00:01:59,290 --> 00:02:03,820
hack all these computers around the

43
00:02:01,540 --> 00:02:05,980
world and hope that they were female so

44
00:02:03,820 --> 00:02:10,209
that they could then record the females

45
00:02:05,980 --> 00:02:13,510
doing all sorts of<font color="#E5E5E5"> stuff it's also shown</font>

46
00:02:10,209 --> 00:02:15,129
up in in television I realized this is

47
00:02:13,510 --> 00:02:17,530
fictional<font color="#E5E5E5"> but I think it represents a</font>

48
00:02:15,129 --> 00:02:19,690
very realistic scenario so there's a

49
00:02:17,530 --> 00:02:22,120
<font color="#CCCCCC">Netflix show called black mirror and one</font>

50
00:02:19,690 --> 00:02:24,909
of the episodes these hackers

51
00:02:22,120 --> 00:02:28,209
this teenage boys computer films him

52
00:02:24,909 --> 00:02:29,709
while he<font color="#CCCCCC"> was pleasuring himself and then</font>

53
00:02:28,209 --> 00:02:31,780
the rest<font color="#E5E5E5"> of the episode is how they were</font>

54
00:02:29,709 --> 00:02:33,849
able to blackmail him to do<font color="#CCCCCC"> all sorts of</font>

55
00:02:31,780 --> 00:02:35,680
horrible things because they had hacked

56
00:02:33,849 --> 00:02:37,540
his webcam and had the footage of him

57
00:02:35,680 --> 00:02:40,299
<font color="#E5E5E5">again yes this is fiction but there have</font>

58
00:02:37,540 --> 00:02:42,040
<font color="#CCCCCC">been cases where hackers have recorded</font>

59
00:02:40,299 --> 00:02:43,840
people doing things<font color="#E5E5E5"> that they would</font>

60
00:02:42,040 --> 00:02:46,060
rather not have<font color="#E5E5E5"> be public and then</font>

61
00:02:43,840 --> 00:02:49,200
either trying to or blackmailing them to

62
00:02:46,060 --> 00:02:51,280
do all sorts of stuff so kind of intense

63
00:02:49,200 --> 00:02:53,619
obviously in nation states and

64
00:02:51,280 --> 00:02:55,900
governments are interested in hacking

65
00:02:53,620 --> 00:02:58,750
computers and using the audio or video

66
00:02:55,900 --> 00:03:00,310
capabilities of the<font color="#E5E5E5"> infected hosts for</font>

67
00:02:58,750 --> 00:03:03,340
different reasons right I don't think

68
00:03:00,310 --> 00:03:05,349
<font color="#CCCCCC">the NSA wants to see you naked but they</font>

69
00:03:03,340 --> 00:03:07,510
probably are interested in what you are

70
00:03:05,349 --> 00:03:10,179
<font color="#E5E5E5">saying or what is being said around you</font>

71
00:03:07,510 --> 00:03:12,760
so I mean imagine if you know Donald

72
00:03:10,180 --> 00:03:14,470
Trump used a laptop I'm not<font color="#E5E5E5"> sure he's</font>

73
00:03:12,760 --> 00:03:16,390
smart enough to but if we assume that<font color="#CCCCCC"> he</font>

74
00:03:14,470 --> 00:03:18,790
did and you were<font color="#E5E5E5"> able to hack it and</font>

75
00:03:16,390 --> 00:03:20,890
then turn all his mic to hear what was

76
00:03:18,790 --> 00:03:22,030
being said around him perhaps in the

77
00:03:20,890 --> 00:03:24,309
White House you could see how that would

78
00:03:22,030 --> 00:03:25,840
<font color="#E5E5E5">be a very interesting capability that</font>

79
00:03:24,310 --> 00:03:30,130
nation states and governments would

80
00:03:25,840 --> 00:03:32,049
obviously be very interested<font color="#E5E5E5"> in all</font>

81
00:03:30,130 --> 00:03:34,450
<font color="#E5E5E5">right so shortly we'll look at some mac</font>

82
00:03:32,049 --> 00:03:36,400
now our specimens that are<font color="#E5E5E5"> able to</font>

83
00:03:34,450 --> 00:03:38,589
access<font color="#CCCCCC"> the webcam and mic to record the</font>

84
00:03:36,400 --> 00:03:40,690
users and also discuss it an attack that

85
00:03:38,590 --> 00:03:43,329
allows<font color="#CCCCCC"> us to piggyback off legitimate</font>

86
00:03:40,690 --> 00:03:46,030
webcam sessions but first<font color="#E5E5E5"> let's talk</font>

87
00:03:43,329 --> 00:03:50,260
about how<font color="#E5E5E5"> to programmatically access the</font>

88
00:03:46,030 --> 00:03:52,599
webcam or mic on<font color="#E5E5E5"> Mac OS turns out it's</font>

89
00:03:50,260 --> 00:03:55,540
pretty easy to<font color="#E5E5E5"> do you</font><font color="#CCCCCC"> can use the AV</font>

90
00:03:52,599 --> 00:03:57,608
foundation framework us was released not

91
00:03:55,540 --> 00:03:59,620
that<font color="#CCCCCC"> long ago by Apple and as the slide</font>

92
00:03:57,609 --> 00:04:00,879
shows you can<font color="#E5E5E5"> see it sits in an</font>

93
00:03:59,620 --> 00:04:02,590
interesting<font color="#E5E5E5"> place in kind of the</font>

94
00:04:00,879 --> 00:04:05,138
software stack so it's below the

95
00:04:02,590 --> 00:04:08,049
<font color="#E5E5E5">application level but above some of the</font>

96
00:04:05,139 --> 00:04:09,160
older more lower level complex framework

97
00:04:08,049 --> 00:04:11,739
so it's in a<font color="#E5E5E5"> really good position</font>

98
00:04:09,160 --> 00:04:13,900
because<font color="#E5E5E5"> it's high enough in the stack</font>

99
00:04:11,739 --> 00:04:16,510
<font color="#E5E5E5">that it's able to abstract out a lot of</font>

100
00:04:13,900 --> 00:04:18,548
<font color="#E5E5E5">the details but it's also low enough</font>

101
00:04:16,510 --> 00:04:22,449
that it's<font color="#E5E5E5"> pretty powerful so what can we</font>

102
00:04:18,548 --> 00:04:25,690
<font color="#CCCCCC">use the AV foundation for oops go back</font>

103
00:04:22,449 --> 00:04:28,180
ah so the main<font color="#CCCCCC"> thing for</font><font color="#E5E5E5"> the purpose of</font>

104
00:04:25,690 --> 00:04:30,849
<font color="#CCCCCC">this talk is we can use it to</font><font color="#E5E5E5"> enumerate</font>

105
00:04:28,180 --> 00:04:32,710
attached or built-in devices so via the

106
00:04:30,849 --> 00:04:34,960
AV<font color="#E5E5E5"> foundation and we'll show code to do</font>

107
00:04:32,710 --> 00:04:35,799
this you can get access<font color="#E5E5E5"> to the default</font>

108
00:04:34,960 --> 00:04:37,479
webcam

109
00:04:35,800 --> 00:04:40,210
attached webcams the built-in

110
00:04:37,479 --> 00:04:42,940
microphones etc and then once you have a

111
00:04:40,210 --> 00:04:46,388
reference to this device you can start

112
00:04:42,940 --> 00:04:47,740
recording awesome now you might<font color="#E5E5E5"> be</font>

113
00:04:46,389 --> 00:04:49,990
wondering do you have to have<font color="#E5E5E5"> any</font>

114
00:04:47,740 --> 00:04:52,569
<font color="#E5E5E5">special permissions in order to access</font>

115
00:04:49,990 --> 00:04:54,819
the webcam or the mic you want to say

116
00:04:52,569 --> 00:04:57,159
record the user well it<font color="#CCCCCC"> turns out if</font><font color="#E5E5E5"> you</font>

117
00:04:54,819 --> 00:04:58,960
are<font color="#CCCCCC"> a sandbox application so one from</font>

118
00:04:57,159 --> 00:05:01,150
the mac app store you<font color="#CCCCCC"> have to have a</font>

119
00:04:58,960 --> 00:05:04,060
special entitlement and that's the calm

120
00:05:01,150 --> 00:05:06,429
<font color="#E5E5E5">a police akura</font><font color="#CCCCCC"> tdot device camera</font>

121
00:05:04,060 --> 00:05:08,349
entitlement well it<font color="#CCCCCC"> turns out this is an</font>

122
00:05:06,430 --> 00:05:10,599
entitlement you can give your own ass

123
00:05:08,349 --> 00:05:12,009
right doesn't<font color="#CCCCCC"> have to come from Apple so</font>

124
00:05:10,599 --> 00:05:13,419
when you're building an app you<font color="#CCCCCC"> want to</font>

125
00:05:12,009 --> 00:05:15,219
be distributed<font color="#CCCCCC"> in</font><font color="#E5E5E5"> the mac app store you</font>

126
00:05:13,419 --> 00:05:16,780
got<font color="#E5E5E5"> to make sure that</font><font color="#CCCCCC"> it's sandbox</font><font color="#E5E5E5"> and</font>

127
00:05:15,219 --> 00:05:18,729
then once you've made<font color="#E5E5E5"> that setting</font>

128
00:05:16,780 --> 00:05:20,948
there's an option to check the camera

129
00:05:18,729 --> 00:05:22,719
once you check that that will add the

130
00:05:20,949 --> 00:05:25,659
necessary entitlement to your

131
00:05:22,719 --> 00:05:27,370
application then you publish<font color="#E5E5E5"> this the</font>

132
00:05:25,659 --> 00:05:28,719
mac app store and when users downloaded

133
00:05:27,370 --> 00:05:32,800
the application will<font color="#E5E5E5"> be able</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> access</font>

134
00:05:28,719 --> 00:05:35,050
<font color="#E5E5E5">the web cam now we might hope that apple</font>

135
00:05:32,800 --> 00:05:38,080
will verify<font color="#E5E5E5"> this you know if you are</font>

136
00:05:35,050 --> 00:05:39,849
<font color="#CCCCCC">just a calculator application and you</font>

137
00:05:38,080 --> 00:05:42,609
have this entitlement to access the web

138
00:05:39,849 --> 00:05:44,259
cam you know maybe Apple will deny<font color="#E5E5E5"> it</font>

139
00:05:42,610 --> 00:05:45,639
but I haven't<font color="#E5E5E5"> heard any instances of</font>

140
00:05:44,259 --> 00:05:47,949
that so it's pretty much not a

141
00:05:45,639 --> 00:05:50,259
showstopper now if<font color="#CCCCCC"> you're distributed</font>

142
00:05:47,949 --> 00:05:52,569
outside the Mac App Store which most if

143
00:05:50,259 --> 00:05:55,360
not all<font color="#E5E5E5"> Mac now or is you</font><font color="#CCCCCC"> don't</font><font color="#E5E5E5"> have to</font>

144
00:05:52,569 --> 00:05:57,460
have<font color="#E5E5E5"> any special entitlements so once</font>

145
00:05:55,360 --> 00:06:00,099
you execute on the box you can access

146
00:05:57,460 --> 00:06:02,198
the mic or the webcam without any

147
00:06:00,099 --> 00:06:03,940
pop-ups or anything now of course once

148
00:06:02,199 --> 00:06:05,560
you do record off the webcam and we'll

149
00:06:03,940 --> 00:06:10,210
talk about this little more an LED

150
00:06:05,560 --> 00:06:12,340
indicator light will come on<font color="#CCCCCC"> all right</font>

151
00:06:10,210 --> 00:06:14,739
so now we'll walk through a simple

152
00:06:12,340 --> 00:06:18,369
<font color="#CCCCCC">example of programmatically how to</font>

153
00:06:14,740 --> 00:06:20,409
record video off<font color="#CCCCCC"> the webcam on Mac OS so</font>

154
00:06:18,370 --> 00:06:23,139
this<font color="#E5E5E5"> is based on an example that's on</font>

155
00:06:20,409 --> 00:06:24,849
github called<font color="#E5E5E5"> video snap LLC it's pretty</font>

156
00:06:23,139 --> 00:06:26,979
straightforward so we're going to start

157
00:06:24,849 --> 00:06:28,719
<font color="#CCCCCC">at the</font><font color="#E5E5E5"> beginning we have our main</font>

158
00:06:26,979 --> 00:06:30,250
<font color="#E5E5E5">function in the main function pretty</font>

159
00:06:28,719 --> 00:06:32,949
much does three things the first thing

160
00:06:30,250 --> 00:06:35,080
it does it sets of signal handler and

161
00:06:32,949 --> 00:06:37,990
this is<font color="#E5E5E5"> just because this is a</font><font color="#CCCCCC"> command</font>

162
00:06:35,080 --> 00:06:39,969
<font color="#CCCCCC">line utility and so we want a way to be</font>

163
00:06:37,990 --> 00:06:42,340
able to<font color="#E5E5E5"> stop it while it's executing so</font>

164
00:06:39,969 --> 00:06:44,649
the signal handler just accepts control

165
00:06:42,340 --> 00:06:46,539
C from<font color="#E5E5E5"> the command line and basically</font>

166
00:06:44,649 --> 00:06:48,159
just call stop recording says we'll<font color="#CCCCCC"> see</font>

167
00:06:46,539 --> 00:06:48,849
we'll have to do some cleanup once the

168
00:06:48,159 --> 00:06:51,399
user exit

169
00:06:48,849 --> 00:06:53,770
flush out the remaining audio and video

170
00:06:51,399 --> 00:06:55,270
and then save it to disk so once we set

171
00:06:53,770 --> 00:06:57,998
up our signal handler we allocate a

172
00:06:55,270 --> 00:06:59,438
video snap object and call record and

173
00:06:57,999 --> 00:07:01,509
we'll dive into showing what this does

174
00:06:59,439 --> 00:07:03,219
and once that's recording off in the

175
00:07:01,509 --> 00:07:04,990
background we just spin in the<font color="#E5E5E5"> main loop</font>

176
00:07:03,219 --> 00:07:06,759
an objective c if<font color="#CCCCCC"> you want the main</font>

177
00:07:04,990 --> 00:07:08,619
thread to just kind of keep running you

178
00:07:06,759 --> 00:07:11,259
get access<font color="#E5E5E5"> to its run loop and then just</font>

179
00:07:08,619 --> 00:07:13,869
call<font color="#E5E5E5"> run on it this is it won't allow</font>

180
00:07:11,259 --> 00:07:17,169
the recording code in the background to

181
00:07:13,869 --> 00:07:20,469
keep<font color="#E5E5E5"> running alright so here is the</font>

182
00:07:17,169 --> 00:07:22,508
implementation<font color="#CCCCCC"> of the video class video</font>

183
00:07:20,469 --> 00:07:24,819
snap class specifically<font color="#E5E5E5"> the record</font>

184
00:07:22,509 --> 00:07:27,539
method and<font color="#CCCCCC"> we can see the first thing it</font>

185
00:07:24,819 --> 00:07:29,769
does is it<font color="#E5E5E5"> gets the default video device</font>

186
00:07:27,539 --> 00:07:31,748
after that it creates a bunch<font color="#E5E5E5"> of objects</font>

187
00:07:29,769 --> 00:07:34,509
it creates an AV capture session object

188
00:07:31,749 --> 00:07:36,580
a<font color="#CCCCCC"> Navy capture movie file output object</font>

189
00:07:34,509 --> 00:07:39,129
and a navy capture device input object

190
00:07:36,580 --> 00:07:41,979
<font color="#E5E5E5">and then adds both of these to the</font>

191
00:07:39,129 --> 00:07:45,039
sessions and calls start running<font color="#E5E5E5"> and</font>

192
00:07:41,979 --> 00:07:47,529
then start recording to output file URL

193
00:07:45,039 --> 00:07:50,558
the end result is now this code will be

194
00:07:47,529 --> 00:07:52,119
recording off the webcam and writing the

195
00:07:50,559 --> 00:07:55,169
results to the file that you specify and

196
00:07:52,119 --> 00:07:57,789
yes the LED indicator light will come on

197
00:07:55,169 --> 00:08:00,219
now we have to add some code<font color="#CCCCCC"> to handle</font>

198
00:07:57,789 --> 00:08:01,748
stopping and finalize the recording so

199
00:08:00,219 --> 00:08:03,819
again remember we've set up the signal

200
00:08:01,749 --> 00:08:05,829
handler so when the user hits control C

201
00:08:03,819 --> 00:08:08,349
<font color="#E5E5E5">we'll catch that and then we'll call</font>

202
00:08:05,829 --> 00:08:10,599
stop recording we call stop recording

203
00:08:08,349 --> 00:08:13,209
which is an AV foundation method and

204
00:08:10,599 --> 00:08:15,669
when we call this this will invoke the

205
00:08:13,209 --> 00:08:17,199
capture output delegate now a delegate

206
00:08:15,669 --> 00:08:19,389
method is just something that the

207
00:08:17,199 --> 00:08:21,309
operating system will call back so we

208
00:08:19,389 --> 00:08:23,409
call stop recording that tells the

209
00:08:21,309 --> 00:08:24,939
operating system<font color="#E5E5E5"> or the AV foundation</font>

210
00:08:23,409 --> 00:08:26,829
framework we're done recording and then

211
00:08:24,939 --> 00:08:28,899
i'll call back into this delegate method

212
00:08:26,829 --> 00:08:31,269
which we can implement and here we call

213
00:08:28,899 --> 00:08:33,849
stop recording on<font color="#CCCCCC"> the session and then</font>

214
00:08:31,269 --> 00:08:36,399
exit so once we compile this code and

215
00:08:33,849 --> 00:08:39,370
run it we can see it<font color="#E5E5E5"> finds the default</font>

216
00:08:36,399 --> 00:08:41,198
webcam which is safe time HD that's kind

217
00:08:39,370 --> 00:08:43,929
of the internal name for the<font color="#E5E5E5"> built-in</font>

218
00:08:41,198 --> 00:08:45,790
webcam<font color="#E5E5E5"> on modern max it's going to</font>

219
00:08:43,929 --> 00:08:47,529
record until we hit<font color="#E5E5E5"> control C it will</font>

220
00:08:45,790 --> 00:08:50,439
<font color="#E5E5E5">capture that control C save the output</font>

221
00:08:47,529 --> 00:08:54,399
to disk and then when we<font color="#E5E5E5"> run the file</font>

222
00:08:50,439 --> 00:08:56,199
command on it cool we're<font color="#E5E5E5"> back file</font>

223
00:08:54,399 --> 00:08:58,870
command on it we<font color="#CCCCCC"> can see that</font><font color="#E5E5E5"> we've</font><font color="#CCCCCC"> just</font>

224
00:08:56,199 --> 00:09:00,880
got<font color="#CCCCCC"> a video file now if you want</font><font color="#E5E5E5"> to</font>

225
00:08:58,870 --> 00:09:02,560
capture audio as well turns out this is

226
00:09:00,880 --> 00:09:05,500
really<font color="#E5E5E5"> easy again you use</font>

227
00:09:02,560 --> 00:09:08,430
v foundation we first find the default

228
00:09:05,500 --> 00:09:11,770
<font color="#E5E5E5">built-in microphone using the same</font>

229
00:09:08,430 --> 00:09:14,260
default device with media types API and

230
00:09:11,770 --> 00:09:16,689
this time we<font color="#E5E5E5"> pass it AV media type audio</font>

231
00:09:14,260 --> 00:09:19,600
and that we<font color="#E5E5E5"> have reference to that we</font>

232
00:09:16,690 --> 00:09:21,610
<font color="#E5E5E5">just add</font><font color="#CCCCCC"> it to our capture session again</font>

233
00:09:19,600 --> 00:09:24,910
<font color="#E5E5E5">we compile and run this it'll now save</font>

234
00:09:21,610 --> 00:09:26,830
audio to the<font color="#CCCCCC"> falls</font><font color="#E5E5E5"> obviously you can</font>

235
00:09:24,910 --> 00:09:28,209
combine both audio<font color="#CCCCCC"> and</font><font color="#E5E5E5"> video into a</font>

236
00:09:26,830 --> 00:09:32,680
single session if you want to capture

237
00:09:28,210 --> 00:09:34,420
both the<font color="#CCCCCC"> users video and audio alright</font>

238
00:09:32,680 --> 00:09:36,880
so let's briefly talk about<font color="#E5E5E5"> the webcam</font>

239
00:09:34,420 --> 00:09:39,939
<font color="#E5E5E5">led so whatever people talk about</font>

240
00:09:36,880 --> 00:09:41,560
malware and hacking webcams this LED

241
00:09:39,940 --> 00:09:44,529
indicator light is always<font color="#E5E5E5"> a very</font>

242
00:09:41,560 --> 00:09:46,300
important things to talk about obviously

243
00:09:44,529 --> 00:09:47,890
<font color="#E5E5E5">because</font><font color="#CCCCCC"> any time the webcam is recording</font>

244
00:09:46,300 --> 00:09:50,079
this LED indicator<font color="#E5E5E5"> light should and does</font>

245
00:09:47,890 --> 00:09:51,790
come on so we<font color="#CCCCCC"> can see the question</font>

246
00:09:50,080 --> 00:09:53,589
<font color="#E5E5E5">someone asked on reddit basically saying</font>

247
00:09:51,790 --> 00:09:55,540
you<font color="#E5E5E5"> know how hard is it to disable this</font>

248
00:09:53,589 --> 00:09:57,089
LED indicator light and I think the

249
00:09:55,540 --> 00:10:00,010
answer<font color="#CCCCCC"> is good it's really not that</font>

250
00:09:57,089 --> 00:10:01,390
scientific but<font color="#CCCCCC"> does show that you know</font>

251
00:10:00,010 --> 00:10:04,360
it's<font color="#CCCCCC"> actually very</font><font color="#E5E5E5"> very difficult to</font>

252
00:10:01,390 --> 00:10:05,860
<font color="#CCCCCC">turn it</font><font color="#E5E5E5"> off basically the LED indicator</font>

253
00:10:04,360 --> 00:10:07,210
light sophie is going to be is

254
00:10:05,860 --> 00:10:08,770
completely separate from the operating

255
00:10:07,210 --> 00:10:10,390
system on a separate ships so you can't

256
00:10:08,770 --> 00:10:13,360
really access it in software etc

257
00:10:10,390 --> 00:10:16,420
<font color="#E5E5E5">accenture now of</font><font color="#CCCCCC"> course nothing is</font>

258
00:10:13,360 --> 00:10:18,580
impossible so older versions of<font color="#CCCCCC"> Apple's</font>

259
00:10:16,420 --> 00:10:20,170
products specifically some of the

260
00:10:18,580 --> 00:10:23,020
macbooks from about two thousand eight

261
00:10:20,170 --> 00:10:26,319
which had the<font color="#CCCCCC"> isight camera we're</font>

262
00:10:23,020 --> 00:10:29,140
vulnerable to an attack so researchers

263
00:10:26,320 --> 00:10:31,180
<font color="#CCCCCC">at Johns Hopkins University basically</font>

264
00:10:29,140 --> 00:10:34,180
detailed they're finding describing this

265
00:10:31,180 --> 00:10:37,569
attack in a paper<font color="#E5E5E5"> titled ICU disabling</font>

266
00:10:34,180 --> 00:10:39,310
the macbook indicator LED and the first

267
00:10:37,570 --> 00:10:41,620
thing<font color="#E5E5E5"> they did was described the</font>

268
00:10:39,310 --> 00:10:43,420
architecture of these iSight cameras

269
00:10:41,620 --> 00:10:45,400
which again were the predecessors to the

270
00:10:43,420 --> 00:10:47,949
facetime HD cameras that are now in

271
00:10:45,400 --> 00:10:49,839
modern max this<font color="#CCCCCC"> is basically four</font>

272
00:10:47,950 --> 00:10:52,570
components to the architecture there's a

273
00:10:49,839 --> 00:10:55,570
host computer which communicates to a

274
00:10:52,570 --> 00:10:58,209
USB controller and as USB controllers

275
00:10:55,570 --> 00:11:00,910
the<font color="#CCCCCC"> cypress easy USB micro controller</font>

276
00:10:58,209 --> 00:11:03,670
and it communicates with an image sensor

277
00:11:00,910 --> 00:11:05,529
via IO pins and the image<font color="#E5E5E5"> sensors the</font>

278
00:11:03,670 --> 00:11:09,040
device or hardware that's actually

279
00:11:05,529 --> 00:11:10,900
capturing the video input attached to

280
00:11:09,040 --> 00:11:14,189
one of<font color="#E5E5E5"> these i/o pins specifically the</font>

281
00:11:10,900 --> 00:11:16,209
standby pin is an LED light<font color="#E5E5E5"> and when</font>

282
00:11:14,190 --> 00:11:18,459
standby is on meaning

283
00:11:16,209 --> 00:11:20,709
device is powered off the LED indicator

284
00:11:18,459 --> 00:11:22,628
lights off and when standby is off

285
00:11:20,709 --> 00:11:26,550
meaning there's power to the image

286
00:11:22,629 --> 00:11:29,319
sensor the LED indicator light is on so

287
00:11:26,550 --> 00:11:31,779
<font color="#E5E5E5">the attack they pulled out or pulled off</font>

288
00:11:29,319 --> 00:11:35,498
was elegant<font color="#E5E5E5"> and it's in its simplicity</font>

289
00:11:31,779 --> 00:11:38,290
<font color="#E5E5E5">so it turns out that the USB controller</font>

290
00:11:35,499 --> 00:11:40,779
could be reprogrammed<font color="#E5E5E5"> anytime from user</font>

291
00:11:38,290 --> 00:11:43,829
mode which think is kind of a security

292
00:11:40,779 --> 00:11:46,600
fail right so<font color="#E5E5E5"> basically you can send a</font>

293
00:11:43,829 --> 00:11:49,719
firmware load request and load some

294
00:11:46,600 --> 00:11:51,670
malicious unsigned firmware on<font color="#E5E5E5"> the USB</font>

295
00:11:49,720 --> 00:11:53,199
controller and then once the USB

296
00:11:51,670 --> 00:11:56,589
controller has this malicious from where

297
00:11:53,199 --> 00:11:58,839
it can reconfigure the image sensor so

298
00:11:56,589 --> 00:12:02,230
it did two things the first thing it did

299
00:11:58,839 --> 00:12:04,809
was it told the device<font color="#E5E5E5"> to always keep</font>

300
00:12:02,230 --> 00:12:07,089
standby on and then it told the image

301
00:12:04,809 --> 00:12:09,490
sensor to ignore that standby and record

302
00:12:07,089 --> 00:12:11,619
video<font color="#CCCCCC"> often so the end result is they</font>

303
00:12:09,490 --> 00:12:14,350
could<font color="#E5E5E5"> pull video off</font><font color="#CCCCCC"> the image sensor</font>

304
00:12:11,619 --> 00:12:16,569
but the standby pin was still set to on

305
00:12:14,350 --> 00:12:18,699
meaning the LED indicator light was off

306
00:12:16,569 --> 00:12:20,979
so end result because they were able to

307
00:12:18,699 --> 00:12:23,079
<font color="#E5E5E5">upload this malicious firmware and</font>

308
00:12:20,980 --> 00:12:26,259
reprogram these components they could

309
00:12:23,079 --> 00:12:29,618
record off the webcam without the LED

310
00:12:26,259 --> 00:12:31,929
indicator lights coming on luckily Apple

311
00:12:29,619 --> 00:12:35,439
fix this so in modern versions of Mac I

312
00:12:31,929 --> 00:12:37,660
believe the LED indicator and what not

313
00:12:35,439 --> 00:12:39,579
is not programmable or the firmware has

314
00:12:37,660 --> 00:12:41,969
to be<font color="#E5E5E5"> signed haven't really dug into it</font>

315
00:12:39,579 --> 00:12:44,290
but as far as I know it's pretty secure

316
00:12:41,970 --> 00:12:47,889
now you might be wondering what can you

317
00:12:44,290 --> 00:12:49,509
do to protect the webcam your webcam FBI

318
00:12:47,889 --> 00:12:52,029
tells us to<font color="#E5E5E5"> cover it with tape and</font>

319
00:12:49,509 --> 00:12:53,889
actually this is not a bad idea a lot of

320
00:12:52,029 --> 00:12:56,980
people<font color="#CCCCCC"> do it's cheap and effective</font>

321
00:12:53,889 --> 00:12:58,839
there's also camera covers you can buy

322
00:12:56,980 --> 00:13:02,079
on<font color="#E5E5E5"> Amazon that allow you to kind of</font>

323
00:12:58,839 --> 00:13:05,679
slide it all on and off another option

324
00:13:02,079 --> 00:13:07,149
<font color="#CCCCCC">is disabled webcam plugins</font><font color="#E5E5E5"> I don't know</font>

325
00:13:05,679 --> 00:13:08,860
if I'm the fan of this method but we're

326
00:13:07,149 --> 00:13:12,279
going<font color="#E5E5E5"> to</font><font color="#CCCCCC"> describe it</font><font color="#E5E5E5"> for complete list</font>

327
00:13:08,860 --> 00:13:15,160
so the website OS<font color="#E5E5E5"> X daily has an article</font>

328
00:13:12,279 --> 00:13:16,839
<font color="#CCCCCC">describing how to do this</font><font color="#E5E5E5"> basically two</font>

329
00:13:15,160 --> 00:13:18,579
steps you disable system integrity

330
00:13:16,839 --> 00:13:21,160
protection and then you modify the

331
00:13:18,579 --> 00:13:23,378
access controls on the webcam related

332
00:13:21,160 --> 00:13:25,899
plugins basically you make them readable

333
00:13:23,379 --> 00:13:27,430
only by root so then any application

334
00:13:25,899 --> 00:13:28,870
<font color="#CCCCCC">that tries to load them</font>

335
00:13:27,430 --> 00:13:30,910
will now have<font color="#E5E5E5"> access to them and they'll</font>

336
00:13:28,870 --> 00:13:33,010
fail<font color="#E5E5E5"> for</font><font color="#CCCCCC"> example you try to fire a fire</font>

337
00:13:30,910 --> 00:13:35,500
out facetime or skype when it goes to

338
00:13:33,010 --> 00:13:38,770
load those plugins it'll get an access

339
00:13:35,500 --> 00:13:40,390
denied and the idea<font color="#CCCCCC"> is now where would</font>

340
00:13:38,770 --> 00:13:41,589
as well<font color="#E5E5E5"> now of</font><font color="#CCCCCC"> course as the malware is</font>

341
00:13:40,390 --> 00:13:43,210
running for example at<font color="#E5E5E5"> a higher</font>

342
00:13:41,589 --> 00:13:44,800
privilege level at root it could change

343
00:13:43,210 --> 00:13:45,940
those permissions back or if it's

344
00:13:44,800 --> 00:13:49,540
running in a colonel<font color="#E5E5E5"> and directly</font>

345
00:13:45,940 --> 00:13:51,160
talking to perhaps the AV code in the

346
00:13:49,540 --> 00:13:54,550
<font color="#E5E5E5">kernel it wouldn't even have to deal</font>

347
00:13:51,160 --> 00:13:57,579
with plugins so again not<font color="#CCCCCC"> that</font><font color="#E5E5E5"> good</font>

348
00:13:54,550 --> 00:13:59,979
solution alright so that was some

349
00:13:57,580 --> 00:14:02,740
general background webcam and mic

350
00:13:59,980 --> 00:14:04,360
related concepts I mentioned there is<font color="#CCCCCC"> a</font>

351
00:14:02,740 --> 00:14:07,300
bunch<font color="#E5E5E5"> of Mac Mauer will now talk about</font>

352
00:14:04,360 --> 00:14:09,850
<font color="#E5E5E5">that attempts to record users via the</font>

353
00:14:07,300 --> 00:14:12,099
webcam or listen to their mics so let's

354
00:14:09,850 --> 00:14:14,890
take<font color="#E5E5E5"> a closer look at these specimens</font>

355
00:14:12,100 --> 00:14:17,140
now and as we'll see all these specimens

356
00:14:14,890 --> 00:14:19,569
really not that sophisticated so any

357
00:14:17,140 --> 00:14:21,399
<font color="#E5E5E5">time they go to record off the webcam</font>

358
00:14:19,570 --> 00:14:23,350
the LED indicator<font color="#E5E5E5"> lights going to come</font>

359
00:14:21,399 --> 00:14:25,300
<font color="#CCCCCC">off so that's kind of a big giveaway</font>

360
00:14:23,350 --> 00:14:27,040
right you're sitting<font color="#CCCCCC"> at your laptop like</font>

361
00:14:25,300 --> 00:14:28,510
picking your nose or something and all

362
00:14:27,040 --> 00:14:31,240
of them<font color="#E5E5E5"> this LED indicator light comes</font>

363
00:14:28,510 --> 00:14:36,250
on like that a big indicator that

364
00:14:31,240 --> 00:14:37,630
something weird is going on<font color="#CCCCCC"> alright for</font>

365
00:14:36,250 --> 00:14:40,900
<font color="#CCCCCC">the</font><font color="#E5E5E5"> first sample we're going to look at</font>

366
00:14:37,630 --> 00:14:44,350
is hacking teams<font color="#CCCCCC"> OS X implant so hacking</font>

367
00:14:40,900 --> 00:14:46,810
team is sore yeah is it offensive cyber

368
00:14:44,350 --> 00:14:49,600
security company from Italy that sold

369
00:14:46,810 --> 00:14:52,119
cyber capabilities to a<font color="#E5E5E5"> variety of</font>

370
00:14:49,600 --> 00:14:53,709
governments a few<font color="#CCCCCC"> years</font><font color="#E5E5E5"> ago they got</font>

371
00:14:52,120 --> 00:14:55,270
hacked and the source code for all their

372
00:14:53,709 --> 00:14:58,209
tools and utilities got leaked the

373
00:14:55,270 --> 00:15:00,699
<font color="#E5E5E5">internet which was nice because for</font><font color="#CCCCCC"> now</font>

374
00:14:58,209 --> 00:15:02,199
<font color="#CCCCCC">our analysts general generally we don't</font>

375
00:15:00,700 --> 00:15:05,410
have source code right just have buyers

376
00:15:02,200 --> 00:15:07,360
but in this case we got source code so

377
00:15:05,410 --> 00:15:09,900
if<font color="#E5E5E5"> we look at what their implant does we</font>

378
00:15:07,360 --> 00:15:11,920
can see it persists as a launch agent

379
00:15:09,900 --> 00:15:14,529
specifically it calls itself calm down

380
00:15:11,920 --> 00:15:16,839
Apple got<font color="#E5E5E5"> log in storage</font><font color="#CCCCCC"> Agent P</font><font color="#E5E5E5"> list</font>

381
00:15:14,529 --> 00:15:18,790
and if we<font color="#E5E5E5"> look at the file that</font><font color="#CCCCCC"> has all</font>

382
00:15:16,839 --> 00:15:21,220
the module names we can see it supports

383
00:15:18,790 --> 00:15:22,930
a wide range of capabilities and this

384
00:15:21,220 --> 00:15:24,520
makes sense<font color="#E5E5E5"> because this was designed to</font>

385
00:15:22,930 --> 00:15:26,800
be<font color="#CCCCCC"> used by governments to basically</font>

386
00:15:24,520 --> 00:15:28,930
gather all sorts of intelligence so you

387
00:15:26,800 --> 00:15:31,569
can see there's modules for grabbing

388
00:15:28,930 --> 00:15:34,510
stuff from the calendar<font color="#E5E5E5"> the mic taking</font>

389
00:15:31,570 --> 00:15:38,170
screenshots<font color="#CCCCCC"> key logging camera etc etc</font>

390
00:15:34,510 --> 00:15:40,790
so<font color="#CCCCCC"> let's take</font><font color="#E5E5E5"> a closer look at the code</font>

391
00:15:38,170 --> 00:15:42,829
in there malware that's responsible or

392
00:15:40,790 --> 00:15:46,280
<font color="#CCCCCC">formed recording off the webcam so this</font>

393
00:15:42,830 --> 00:15:49,490
was in a file named<font color="#CCCCCC"> RC F M agent webcam</font>

394
00:15:46,280 --> 00:15:52,490
dot<font color="#CCCCCC"> M so it turns out they use apples</font>

395
00:15:49,490 --> 00:15:54,200
<font color="#CCCCCC">cutie kit which is deprecated I think</font>

396
00:15:52,490 --> 00:15:55,370
it's<font color="#E5E5E5"> just because hacking teams code was</font>

397
00:15:54,200 --> 00:15:59,000
rather old and they were probably

398
00:15:55,370 --> 00:16:01,280
familiar<font color="#E5E5E5"> with these api's but yes when</font>

399
00:15:59,000 --> 00:16:03,740
this code is executed it will record the

400
00:16:01,280 --> 00:16:07,579
user via the web cam but of course<font color="#E5E5E5"> the</font>

401
00:16:03,740 --> 00:16:09,650
LED indicator light will go on<font color="#CCCCCC"> the mic</font>

402
00:16:07,580 --> 00:16:12,020
module implements code that can record

403
00:16:09,650 --> 00:16:14,180
off<font color="#CCCCCC"> and infected computers mic and this</font>

404
00:16:12,020 --> 00:16:16,100
is again separate from the webcam maybe

405
00:16:14,180 --> 00:16:17,930
they<font color="#CCCCCC"> realized</font><font color="#E5E5E5"> that when the light on the</font>

406
00:16:16,100 --> 00:16:19,700
webcam goes on it was a giveaway so they

407
00:16:17,930 --> 00:16:21,099
decided<font color="#E5E5E5"> to make the mic module a</font>

408
00:16:19,700 --> 00:16:23,240
completely separate component as

409
00:16:21,100 --> 00:16:25,520
sometimes<font color="#E5E5E5"> they might just want to record</font>

410
00:16:23,240 --> 00:16:27,230
audio without<font color="#E5E5E5"> the LED indicator light</font>

411
00:16:25,520 --> 00:16:29,840
goes on because if you just use the max

412
00:16:27,230 --> 00:16:32,540
<font color="#E5E5E5">that the mic there's no indicator alert</font>

413
00:16:29,840 --> 00:16:34,760
that you're recording again it doesn't

414
00:16:32,540 --> 00:16:37,280
use the AV foundation but<font color="#E5E5E5"> rather an</font>

415
00:16:34,760 --> 00:16:39,800
older framework called the audio cue

416
00:16:37,280 --> 00:16:41,810
services an apple says this is a c

417
00:16:39,800 --> 00:16:43,699
programming interface in the audio

418
00:16:41,810 --> 00:16:45,109
toolbox framework which is part of core

419
00:16:43,700 --> 00:16:47,390
audio so it's<font color="#CCCCCC"> just a lower level</font>

420
00:16:45,110 --> 00:16:52,160
framework that allows you to<font color="#E5E5E5"> record</font>

421
00:16:47,390 --> 00:16:54,470
audio alright the next<font color="#E5E5E5"> malware sample is</font>

422
00:16:52,160 --> 00:16:56,900
Eleanor this is a more<font color="#CCCCCC"> recent Mac</font>

423
00:16:54,470 --> 00:17:00,320
malware sample was discovered last<font color="#E5E5E5"> July</font>

424
00:16:56,900 --> 00:17:03,140
by ESET rather<font color="#E5E5E5"> bitdefender and it was</font>

425
00:17:00,320 --> 00:17:05,420
distributed via the<font color="#CCCCCC"> internet so not via</font>

426
00:17:03,140 --> 00:17:07,639
the<font color="#E5E5E5"> Mac accident once the attackers did</font>

427
00:17:05,420 --> 00:17:09,920
is they found an application<font color="#CCCCCC"> that was a</font>

428
00:17:07,640 --> 00:17:11,840
banded an application called easy doc

429
00:17:09,920 --> 00:17:13,280
converter and they created it a new

430
00:17:11,839 --> 00:17:16,069
malicious version of this application

431
00:17:13,280 --> 00:17:20,329
and then uploaded it to the popular of

432
00:17:16,069 --> 00:17:22,099
app sharing website macupdate com so

433
00:17:20,329 --> 00:17:23,689
that any time a user went to<font color="#E5E5E5"> download</font>

434
00:17:22,099 --> 00:17:25,339
this application instead of getting easy

435
00:17:23,690 --> 00:17:27,290
doc converter they've get a malicious

436
00:17:25,339 --> 00:17:30,020
version of the file which then they ran

437
00:17:27,290 --> 00:17:33,889
would infect themselves so what did this

438
00:17:30,020 --> 00:17:36,260
do basically<font color="#E5E5E5"> in stored installed the</font>

439
00:17:33,890 --> 00:17:39,890
malware that communicated via tour and

440
00:17:36,260 --> 00:17:42,320
it serves up a PHP web back door so a

441
00:17:39,890 --> 00:17:45,500
remote attacker could connect via tour

442
00:17:42,320 --> 00:17:49,070
to the<font color="#CCCCCC"> users computer and then execute</font>

443
00:17:45,500 --> 00:17:50,780
files commands etc etc in terms<font color="#E5E5E5"> of audio</font>

444
00:17:49,070 --> 00:17:52,850
and video capabilities and now we're

445
00:17:50,780 --> 00:17:54,530
ships with a variety of separate

446
00:17:52,850 --> 00:17:57,740
utilities for example net

447
00:17:54,530 --> 00:17:59,990
and then one called waka waka is an<font color="#E5E5E5"> open</font>

448
00:17:57,740 --> 00:18:02,450
<font color="#CCCCCC">source utility on source words that</font>

449
00:17:59,990 --> 00:18:04,460
allows you<font color="#CCCCCC"> to record users off the</font>

450
00:18:02,450 --> 00:18:06,260
webcam so what the attackers would do is

451
00:18:04,460 --> 00:18:09,230
they would basically just execute this

452
00:18:06,260 --> 00:18:12,080
utility via the PHP web shell that was

453
00:18:09,230 --> 00:18:17,540
on the infected<font color="#E5E5E5"> host and then record the</font>

454
00:18:12,080 --> 00:18:20,270
user next up we've got<font color="#E5E5E5"> OSX smokes this</font>

455
00:18:17,540 --> 00:18:22,100
was<font color="#E5E5E5"> discovered in September so last fall</font>

456
00:18:20,270 --> 00:18:25,520
another pretty recent sample by

457
00:18:22,100 --> 00:18:27,530
kaspersky it's a cross-platform backdoor

458
00:18:25,520 --> 00:18:29,330
that supports a wide range of

459
00:18:27,530 --> 00:18:32,060
capabilities so again kind<font color="#E5E5E5"> of more</font>

460
00:18:29,330 --> 00:18:34,730
focused on intelligence gathering so<font color="#E5E5E5"> I</font>

461
00:18:32,060 --> 00:18:37,190
was able<font color="#E5E5E5"> to execute commands had some</font>

462
00:18:34,730 --> 00:18:39,080
interesting search capabilities for

463
00:18:37,190 --> 00:18:41,210
example it searched the file system for

464
00:18:39,080 --> 00:18:44,270
various documents and would exfiltrate

465
00:18:41,210 --> 00:18:46,070
those also<font color="#E5E5E5"> monitored removable media so</font>

466
00:18:44,270 --> 00:18:48,110
if you plugged in a USB stick into an

467
00:18:46,070 --> 00:18:50,480
infected host it could enumerate files

468
00:18:48,110 --> 00:18:53,479
and grab them off and exfiltrate them to

469
00:18:50,480 --> 00:18:56,000
the remote attacker and it also had the

470
00:18:53,480 --> 00:18:59,380
ability to do screen captures and audio

471
00:18:56,000 --> 00:19:01,340
and video captures off the webcam or mic

472
00:18:59,380 --> 00:19:03,290
now we don't source code for<font color="#E5E5E5"> this</font>

473
00:19:01,340 --> 00:19:05,659
malware but we can reverse engineer it

474
00:19:03,290 --> 00:19:07,820
to<font color="#E5E5E5"> see what it does so we can figure out</font>

475
00:19:05,660 --> 00:19:11,300
that for the webcam capture code it's

476
00:19:07,820 --> 00:19:12,770
using the cross-platform QT framework

477
00:19:11,300 --> 00:19:14,600
and this makes sense because this

478
00:19:12,770 --> 00:19:16,430
<font color="#E5E5E5">specific piece</font><font color="#CCCCCC"> of malware is a</font>

479
00:19:14,600 --> 00:19:19,520
cross-platform backdoor meaning it runs

480
00:19:16,430 --> 00:19:22,070
<font color="#E5E5E5">on</font><font color="#CCCCCC"> windows</font><font color="#E5E5E5"> and on Mac so by using the Qt</font>

481
00:19:19,520 --> 00:19:24,139
framework which kind<font color="#E5E5E5"> of abstracts the OS</font>

482
00:19:22,070 --> 00:19:27,080
specific implementation details of how

483
00:19:24,140 --> 00:19:29,030
you do webcam recording on<font color="#CCCCCC"> windows vs</font>

484
00:19:27,080 --> 00:19:30,649
mac the attackers don't have to worry

485
00:19:29,030 --> 00:19:32,149
about that they can just call into the

486
00:19:30,650 --> 00:19:34,910
<font color="#E5E5E5">framework which abstract all those</font>

487
00:19:32,150 --> 00:19:39,010
<font color="#CCCCCC">details as</font><font color="#E5E5E5"> well and record both off</font>

488
00:19:34,910 --> 00:19:41,570
webcams off both Mac and Windows devices

489
00:19:39,010 --> 00:19:43,940
<font color="#CCCCCC">all right finally we've got fruit fly</font>

490
00:19:41,570 --> 00:19:46,700
this was the first Mac malware sample

491
00:19:43,940 --> 00:19:49,580
from 2017<font color="#E5E5E5"> and it's rather interesting</font>

492
00:19:46,700 --> 00:19:52,490
because it was distributed or rather was

493
00:19:49,580 --> 00:19:56,659
a object skated<font color="#CCCCCC"> perl script that</font>

494
00:19:52,490 --> 00:19:59,030
persists as a launched agent so what the

495
00:19:56,660 --> 00:20:02,540
perl script does is execute every time

496
00:19:59,030 --> 00:20:05,129
the user logs in and within the perl

497
00:20:02,540 --> 00:20:07,139
script is an embedded<font color="#CCCCCC"> mock oh boy</font>

498
00:20:05,130 --> 00:20:08,850
so what the perl script then does is it

499
00:20:07,140 --> 00:20:11,670
drops<font color="#E5E5E5"> that binary to a temporary</font>

500
00:20:08,850 --> 00:20:13,080
location and execute that and what this

501
00:20:11,670 --> 00:20:14,820
does<font color="#E5E5E5"> is it tries</font><font color="#CCCCCC"> to talk to other</font>

502
00:20:13,080 --> 00:20:17,399
devices<font color="#E5E5E5"> on the network which is kind of</font>

503
00:20:14,820 --> 00:20:19,320
<font color="#CCCCCC">interesting perhaps</font><font color="#E5E5E5"> trying to further</font>

504
00:20:17,400 --> 00:20:24,630
propagate or talk<font color="#CCCCCC"> to other infected</font>

505
00:20:19,320 --> 00:20:25,980
systems so whenever the malware execute

506
00:20:24,630 --> 00:20:29,190
sit talks out to a command and control

507
00:20:25,980 --> 00:20:31,140
server and asks for tasking so one of

508
00:20:29,190 --> 00:20:33,600
the instructions or<font color="#CCCCCC"> commands that the</font>

509
00:20:31,140 --> 00:20:36,060
attacker can give it is to record off

510
00:20:33,600 --> 00:20:38,310
<font color="#CCCCCC">the web plan so if we reverse-engineer</font>

511
00:20:36,060 --> 00:20:41,490
<font color="#E5E5E5">the command handler we can figure out</font>

512
00:20:38,310 --> 00:20:43,980
how it's doing this in code turns out

513
00:20:41,490 --> 00:20:46,800
<font color="#E5E5E5">it's using apple's quicktime api's which</font>

514
00:20:43,980 --> 00:20:48,120
are actually<font color="#E5E5E5"> very old and deprecated so</font>

515
00:20:46,800 --> 00:20:49,530
it took<font color="#CCCCCC"> me a while to get this all work</font>

516
00:20:48,120 --> 00:20:51,719
<font color="#CCCCCC">actual wanted</font><font color="#E5E5E5"> to write a proof of</font>

517
00:20:49,530 --> 00:20:53,040
concepts using these api's and the

518
00:20:51,720 --> 00:20:54,960
<font color="#CCCCCC">reason it's a little difficult to</font><font color="#E5E5E5"> get</font>

519
00:20:53,040 --> 00:20:57,480
<font color="#CCCCCC">working is first Apple remove the header</font>

520
00:20:54,960 --> 00:20:58,860
files from the latest<font color="#E5E5E5"> SDK so you have to</font>

521
00:20:57,480 --> 00:21:01,800
go back<font color="#E5E5E5"> and get an old version of the</font>

522
00:20:58,860 --> 00:21:04,110
SDK and then also when you compile they

523
00:21:01,800 --> 00:21:06,240
are only supported in<font color="#E5E5E5"> 32-bit mode so</font><font color="#CCCCCC"> you</font>

524
00:21:04,110 --> 00:21:08,490
can't build a native 64-bit application

525
00:21:06,240 --> 00:21:10,530
but once you get this all built yes you

526
00:21:08,490 --> 00:21:12,540
will be able<font color="#E5E5E5"> to record via the web cam</font>

527
00:21:10,530 --> 00:21:15,990
again<font color="#E5E5E5"> the LED indicator light will go on</font>

528
00:21:12,540 --> 00:21:17,190
but it will succeed now there's some

529
00:21:15,990 --> 00:21:19,320
<font color="#CCCCCC">discussion</font><font color="#E5E5E5"> saying that maybe the</font>

530
00:21:17,190 --> 00:21:22,110
attackers were using these older api's

531
00:21:19,320 --> 00:21:23,310
to maybe not get you know detected but

532
00:21:22,110 --> 00:21:24,300
<font color="#E5E5E5">it turns out that this Mauer has</font>

533
00:21:23,310 --> 00:21:26,669
actually been around<font color="#E5E5E5"> for a really long</font>

534
00:21:24,300 --> 00:21:28,740
time and<font color="#CCCCCC"> only was just recently detected</font>

535
00:21:26,670 --> 00:21:30,510
so it's likely that it was<font color="#E5E5E5"> just flying</font>

536
00:21:28,740 --> 00:21:33,060
under the radar<font color="#E5E5E5"> and whoever wrote this</font>

537
00:21:30,510 --> 00:21:35,370
malware was familiar with<font color="#E5E5E5"> these older</font>

538
00:21:33,060 --> 00:21:40,649
api's because again the malware's rather

539
00:21:35,370 --> 00:21:43,020
ancient in terms of malware alright so

540
00:21:40,650 --> 00:21:46,920
that was some recent<font color="#E5E5E5"> Mac malware samples</font>

541
00:21:43,020 --> 00:21:49,010
that<font color="#CCCCCC"> are webcam or mic aware and again</font>

542
00:21:46,920 --> 00:21:52,350
we'll try to record and affected users

543
00:21:49,010 --> 00:21:54,960
luckily<font color="#E5E5E5"> as we've said many times the LED</font>

544
00:21:52,350 --> 00:21:57,959
indicator light will come on so this<font color="#E5E5E5"> is</font>

545
00:21:54,960 --> 00:22:00,390
kind of a dead giveaway so now I want<font color="#E5E5E5"> to</font>

546
00:21:57,960 --> 00:22:03,510
talk<font color="#CCCCCC"> about an interesting attack that</font>

547
00:22:00,390 --> 00:22:06,630
can potentially allow malware to record

548
00:22:03,510 --> 00:22:08,490
users without any alerts and we'll see

549
00:22:06,630 --> 00:22:12,030
basically<font color="#CCCCCC"> what we can do is piggyback</font>

550
00:22:08,490 --> 00:22:13,920
off existing sessions and since the LED

551
00:22:12,030 --> 00:22:18,060
indicator light is ready on there will

552
00:22:13,920 --> 00:22:18,830
be<font color="#E5E5E5"> no further alerts so first if we</font>

553
00:22:18,060 --> 00:22:21,350
observe

554
00:22:18,830 --> 00:22:23,360
that<font color="#CCCCCC"> Mac users do use their webcam so</font>

555
00:22:21,350 --> 00:22:25,039
yes you can put tape over that but

556
00:22:23,360 --> 00:22:28,370
that's not always the<font color="#E5E5E5"> most practical</font>

557
00:22:25,039 --> 00:22:31,250
example so what<font color="#CCCCCC"> are some</font><font color="#E5E5E5"> examples of how</font>

558
00:22:28,370 --> 00:22:32,779
<font color="#CCCCCC">Mac users will use their webcams well</font>

559
00:22:31,250 --> 00:22:35,299
you know<font color="#E5E5E5"> business meetings if you work</font>

560
00:22:32,779 --> 00:22:38,360
remotely might talk to your team or call

561
00:22:35,299 --> 00:22:40,010
in for a board meeting if you<font color="#CCCCCC"> work again</font>

562
00:22:38,360 --> 00:22:41,600
for a company<font color="#CCCCCC"> you might be doing</font><font color="#E5E5E5"> remote</font>

563
00:22:40,010 --> 00:22:44,390
R&D sessions where you're talking<font color="#E5E5E5"> about</font>

564
00:22:41,600 --> 00:22:45,918
new projects you're working on you might

565
00:22:44,390 --> 00:22:48,230
be skyping with source if you're talking

566
00:22:45,919 --> 00:22:50,090
<font color="#CCCCCC">to a journalist or talking</font><font color="#E5E5E5"> to</font><font color="#CCCCCC"> a security</font>

567
00:22:48,230 --> 00:22:52,429
team to report zero-day vulnerabilities

568
00:22:50,090 --> 00:22:54,470
that a lot<font color="#CCCCCC"> of people to use facetime to</font>

569
00:22:52,429 --> 00:22:56,600
talk to their intimate partners and

570
00:22:54,470 --> 00:22:58,070
<font color="#CCCCCC">whatnot now I think</font><font color="#E5E5E5"> the important</font><font color="#CCCCCC"> thing</font>

571
00:22:56,600 --> 00:22:59,779
to understand about this is these are

572
00:22:58,070 --> 00:23:02,539
the sessions that<font color="#CCCCCC"> are probably most</font>

573
00:22:59,779 --> 00:23:04,220
interesting to<font color="#E5E5E5"> record</font><font color="#CCCCCC"> anyways like if</font>

574
00:23:02,539 --> 00:23:05,299
you're always recording someone<font color="#E5E5E5"> you're</font>

575
00:23:04,220 --> 00:23:07,250
probably just<font color="#E5E5E5"> seeing them sitting at</font>

576
00:23:05,299 --> 00:23:09,830
their desk heading<font color="#E5E5E5"> their dog picking</font>

577
00:23:07,250 --> 00:23:11,600
their nose whatever but you know as a

578
00:23:09,830 --> 00:23:12,799
piece of malware or the nation-state

579
00:23:11,600 --> 00:23:14,990
this is probably what you want to

580
00:23:12,799 --> 00:23:16,490
capture anyways right the intimate

581
00:23:14,990 --> 00:23:19,220
sessions were then you can blackmail the

582
00:23:16,490 --> 00:23:21,409
person<font color="#CCCCCC"> or while they're talking</font><font color="#E5E5E5"> to for</font>

583
00:23:19,220 --> 00:23:23,179
example<font color="#CCCCCC"> a journalist to you know get the</font>

584
00:23:21,409 --> 00:23:26,539
information<font color="#E5E5E5"> that they're kind of</font>

585
00:23:23,179 --> 00:23:28,010
discussion so conceptually what our

586
00:23:26,539 --> 00:23:30,200
attack is<font color="#E5E5E5"> going to do is pretty</font>

587
00:23:28,010 --> 00:23:32,539
straightforward so in three steps we're

588
00:23:30,200 --> 00:23:35,029
going<font color="#CCCCCC"> to wait until the user start a</font>

589
00:23:32,539 --> 00:23:36,620
legitimate webcam session and then when

590
00:23:35,029 --> 00:23:38,899
the malware did<font color="#E5E5E5"> Texas we're going to</font>

591
00:23:36,620 --> 00:23:41,600
piggyback<font color="#E5E5E5"> onto this session to begin</font>

592
00:23:38,899 --> 00:23:43,010
<font color="#CCCCCC">recording and then once this recording</font>

593
00:23:41,600 --> 00:23:44,209
is complete once the session is

594
00:23:43,010 --> 00:23:46,908
terminated we're going to exfiltrate

595
00:23:44,210 --> 00:23:49,970
that captured audio and video to an

596
00:23:46,909 --> 00:23:52,010
attacker and again since the legitimate

597
00:23:49,970 --> 00:23:53,750
session is already established there's

598
00:23:52,010 --> 00:23:57,980
not<font color="#E5E5E5"> going to be any indication of this</font>

599
00:23:53,750 --> 00:24:00,139
piggy backing of it so the first<font color="#CCCCCC"> thing</font>

600
00:23:57,980 --> 00:24:01,940
we do or the<font color="#E5E5E5"> first thing the malware</font>

601
00:24:00,139 --> 00:24:04,250
needs to do is enumerate and find that

602
00:24:01,940 --> 00:24:06,260
<font color="#CCCCCC">built-in webcam and we talked about this</font>

603
00:24:04,250 --> 00:24:08,510
already how to program matically do it

604
00:24:06,260 --> 00:24:12,529
but<font color="#E5E5E5"> just to reiterate we can use apple's</font>

605
00:24:08,510 --> 00:24:15,200
ad foundation so this can be done in a

606
00:24:12,529 --> 00:24:17,179
few lines of code basically you can call

607
00:24:15,200 --> 00:24:19,700
the devices with media type and you pass

608
00:24:17,179 --> 00:24:23,029
in<font color="#CCCCCC"> AV media</font><font color="#E5E5E5"> type video and this will</font>

609
00:24:19,700 --> 00:24:24,740
return you an array<font color="#E5E5E5"> of cameras so you'll</font>

610
00:24:23,029 --> 00:24:26,330
get access to<font color="#E5E5E5"> the built-in one or if</font>

611
00:24:24,740 --> 00:24:29,510
they have an attached camera you can<font color="#E5E5E5"> get</font>

612
00:24:26,330 --> 00:24:31,399
<font color="#CCCCCC">access to that device and then once you</font>

613
00:24:29,510 --> 00:24:34,609
have access to<font color="#CCCCCC"> that device you can</font>

614
00:24:31,399 --> 00:24:35,959
start registering for notifications so

615
00:24:34,609 --> 00:24:37,039
what notification are we going to

616
00:24:35,960 --> 00:24:39,769
register for well we're going<font color="#E5E5E5"> to</font>

617
00:24:37,039 --> 00:24:42,769
<font color="#E5E5E5">register for when the webcam goes on or</font>

618
00:24:39,769 --> 00:24:45,379
off and we can do this with the sea mio

619
00:24:42,769 --> 00:24:48,379
object<font color="#E5E5E5"> add property listener block</font>

620
00:24:45,379 --> 00:24:51,019
method so this method takes a variety of

621
00:24:48,379 --> 00:24:52,939
parameters the first is a connection ID

622
00:24:51,019 --> 00:24:55,339
which we can get from<font color="#E5E5E5"> the camera</font>

623
00:24:52,940 --> 00:24:57,409
basically<font color="#CCCCCC"> this is private instance</font>

624
00:24:55,339 --> 00:25:00,229
variable but we can in objective-c

625
00:24:57,409 --> 00:25:01,700
access that and then the next<font color="#E5E5E5"> thing we</font>

626
00:25:00,229 --> 00:25:03,919
pass is the notification we're

627
00:25:01,700 --> 00:25:06,200
interested in again the on and off and

628
00:25:03,919 --> 00:25:08,239
then finally we pass in a call box

629
00:25:06,200 --> 00:25:09,979
<font color="#CCCCCC">callback block so once we have</font>

630
00:25:08,239 --> 00:25:11,839
registered this notification when the

631
00:25:09,979 --> 00:25:14,299
<font color="#CCCCCC">notice when the notification fires</font>

632
00:25:11,839 --> 00:25:16,789
meaning when the webcam goes on or off

633
00:25:14,299 --> 00:25:19,759
our callback block will<font color="#CCCCCC"> be automatically</font>

634
00:25:16,789 --> 00:25:22,149
executed so what do we do in this

635
00:25:19,759 --> 00:25:24,499
handler well we do a few things

636
00:25:22,149 --> 00:25:26,629
<font color="#CCCCCC">basically we query the webcam to</font>

637
00:25:24,499 --> 00:25:28,519
determine what the notification is

638
00:25:26,629 --> 00:25:30,678
because the same notification will be

639
00:25:28,519 --> 00:25:32,450
<font color="#E5E5E5">delivered if the webcam goes on or off</font>

640
00:25:30,679 --> 00:25:34,909
and we're only interested when it goes

641
00:25:32,450 --> 00:25:38,599
<font color="#CCCCCC">on so what we can do is we can invoke</font>

642
00:25:34,909 --> 00:25:41,570
the CM<font color="#CCCCCC"> IO objects get property</font><font color="#E5E5E5"> data and</font>

643
00:25:38,599 --> 00:25:43,460
this will set a value to 0 or<font color="#E5E5E5"> 1 if the</font>

644
00:25:41,570 --> 00:25:46,729
webcam is currently active or if it's

645
00:25:43,460 --> 00:25:48,469
deactivated so that's what we do in this

646
00:25:46,729 --> 00:25:50,599
code so at the very bottom we can<font color="#E5E5E5"> check</font>

647
00:25:48,469 --> 00:25:52,190
the is running and if it's running that

648
00:25:50,599 --> 00:25:56,259
means we can now start recording this

649
00:25:52,190 --> 00:25:59,330
session so now we know<font color="#E5E5E5"> the user has</font>

650
00:25:56,259 --> 00:26:02,119
initiated a legitimate webcam session so

651
00:25:59,330 --> 00:26:04,549
<font color="#CCCCCC">we can begin recording and this works</font>

652
00:26:02,119 --> 00:26:07,129
because on modern max the webcam is a

653
00:26:04,549 --> 00:26:09,139
shared resource so like you can FaceTime

654
00:26:07,129 --> 00:26:12,738
and Skype at the same time I'm<font color="#E5E5E5"> not sure</font>

655
00:26:09,139 --> 00:26:15,019
why<font color="#E5E5E5"> you want to but you can so this</font>

656
00:26:12,739 --> 00:26:17,210
obviously means our malware can do the

657
00:26:15,019 --> 00:26:19,249
same thing so in code it's very simple

658
00:26:17,210 --> 00:26:21,739
again we can use the AV foundation to

659
00:26:19,249 --> 00:26:23,719
<font color="#E5E5E5">start recording</font><font color="#CCCCCC"> off the webcam and</font><font color="#E5E5E5"> Apple</font>

660
00:26:21,739 --> 00:26:25,669
<font color="#CCCCCC">makes no differentiation between using</font>

661
00:26:23,719 --> 00:26:27,919
the webcam to broadcast yourself or

662
00:26:25,669 --> 00:26:29,659
record off it so<font color="#E5E5E5"> even if the user is</font>

663
00:26:27,919 --> 00:26:31,159
<font color="#E5E5E5">just using the webcam to broadcast</font>

664
00:26:29,659 --> 00:26:33,109
themselves for example they're chatting

665
00:26:31,159 --> 00:26:36,349
with<font color="#E5E5E5"> their girlfriend or boyfriend the</font>

666
00:26:33,109 --> 00:26:39,408
malware can hop on and record all set so

667
00:26:36,349 --> 00:26:42,289
again we use<font color="#E5E5E5"> the AV foundation api's we</font>

668
00:26:39,409 --> 00:26:44,239
create that capture session we add input

669
00:26:42,289 --> 00:26:44,658
and output and then we specify the file

670
00:26:44,239 --> 00:26:46,489
we want

671
00:26:44,659 --> 00:26:48,080
start recording and then once this is

672
00:26:46,489 --> 00:26:51,590
activated the webcam will start

673
00:26:48,080 --> 00:26:54,949
streaming off the computer<font color="#E5E5E5"> all into our</font>

674
00:26:51,590 --> 00:26:58,699
file now equally important we should

675
00:26:54,950 --> 00:27:00,529
know when the webcam is done that is to

676
00:26:58,700 --> 00:27:02,599
say when the application that

677
00:27:00,529 --> 00:27:04,669
legitimately initialized the<font color="#E5E5E5"> session has</font>

678
00:27:02,599 --> 00:27:06,559
terminated because it would<font color="#CCCCCC"> be</font>

679
00:27:04,669 --> 00:27:08,149
suspicious<font color="#CCCCCC"> if you</font><font color="#E5E5E5"> know the user ended</font>

680
00:27:06,559 --> 00:27:10,340
their<font color="#CCCCCC"> facetime</font><font color="#E5E5E5"> session and the LED</font>

681
00:27:08,149 --> 00:27:11,869
indicator light would still be on so

682
00:27:10,340 --> 00:27:13,220
there's a variety of ways<font color="#E5E5E5"> to do it the</font>

683
00:27:11,869 --> 00:27:15,709
easiest is just to register for

684
00:27:13,220 --> 00:27:18,739
application termination notifications

685
00:27:15,710 --> 00:27:21,200
and then we can determine when the

686
00:27:18,739 --> 00:27:23,929
application exited so we'll<font color="#E5E5E5"> talk briefly</font>

687
00:27:21,200 --> 00:27:26,210
about how we determine what application

688
00:27:23,929 --> 00:27:28,070
initialized or initiated the webcam

689
00:27:26,210 --> 00:27:30,169
session because although we get a

690
00:27:28,070 --> 00:27:32,809
notification saying hey the webcam is

691
00:27:30,169 --> 00:27:34,309
now active apple doesn't tell us what

692
00:27:32,809 --> 00:27:36,229
application<font color="#CCCCCC"> actually triggered that</font>

693
00:27:34,309 --> 00:27:39,470
notification so there's<font color="#E5E5E5"> not like a pit</font>

694
00:27:36,229 --> 00:27:41,059
or path in that notification so let's

695
00:27:39,470 --> 00:27:43,220
for now assume that we were able to

696
00:27:41,059 --> 00:27:45,678
<font color="#E5E5E5">figure out what application triggered</font>

697
00:27:43,220 --> 00:27:47,059
that event so say<font color="#CCCCCC"> it's facetime what we</font>

698
00:27:45,679 --> 00:27:49,669
can then do is just monitor and

699
00:27:47,059 --> 00:27:52,239
determine when face timex exits so we

700
00:27:49,669 --> 00:27:55,340
can register that via the NS workspace

701
00:27:52,239 --> 00:27:57,590
notification we register<font color="#CCCCCC"> for the NS</font>

702
00:27:55,340 --> 00:27:59,928
workspace did terminate application

703
00:27:57,590 --> 00:28:02,840
<font color="#CCCCCC">notifications and this will then call us</font>

704
00:27:59,929 --> 00:28:04,879
back any time<font color="#E5E5E5"> any application exits so</font>

705
00:28:02,840 --> 00:28:06,889
we can<font color="#E5E5E5"> just monitor application exits</font>

706
00:28:04,879 --> 00:28:08,928
and as<font color="#E5E5E5"> soon as we see FaceTime or</font>

707
00:28:06,889 --> 00:28:11,330
whatever application that initiated<font color="#CCCCCC"> the</font>

708
00:28:08,929 --> 00:28:13,249
webcam session we can<font color="#E5E5E5"> simply stop</font>

709
00:28:11,330 --> 00:28:17,359
recording so that the LED indicator

710
00:28:13,249 --> 00:28:18,710
light doesn't remain on so from

711
00:28:17,359 --> 00:28:21,349
attackers point of view this is a great

712
00:28:18,710 --> 00:28:23,119
attack why well first it<font color="#E5E5E5"> utilizes</font>

713
00:28:21,349 --> 00:28:24,470
legitimate functionality of the

714
00:28:23,119 --> 00:28:27,199
operating system we're not doing

715
00:28:24,470 --> 00:28:30,049
anything<font color="#CCCCCC"> wrong so it's really kind of</font>

716
00:28:27,200 --> 00:28:31,909
difficult to patch or prevent<font color="#E5E5E5"> also you</font>

717
00:28:30,049 --> 00:28:33,499
don't<font color="#E5E5E5"> need root which is nice so any</font>

718
00:28:31,909 --> 00:28:35,299
code that's running on the system can

719
00:28:33,499 --> 00:28:38,090
monitor for the webcam take you back

720
00:28:35,299 --> 00:28:39,710
<font color="#E5E5E5">onto it and record off it as I mentioned</font>

721
00:28:38,090 --> 00:28:41,629
<font color="#CCCCCC">you can also always record off the</font>

722
00:28:39,710 --> 00:28:44,090
webcam even if the user is just<font color="#E5E5E5"> using it</font>

723
00:28:41,629 --> 00:28:45,830
to broadcast themselves and finally as

724
00:28:44,090 --> 00:28:48,408
the LED indicator light is already on

725
00:28:45,830 --> 00:28:50,658
there's no other secondary alerts or

726
00:28:48,409 --> 00:28:52,690
indication that this piggyback attack is

727
00:28:50,659 --> 00:28:52,690
happening

728
00:28:53,990 --> 00:28:57,770
so as an avid Mac user you know i love

729
00:28:55,970 --> 00:29:00,350
my<font color="#E5E5E5"> mac products definitely drank the</font>

730
00:28:57,770 --> 00:29:02,510
apple juice you<font color="#E5E5E5"> just kind of bothered me</font>

731
00:29:00,350 --> 00:29:04,309
and you know yes there are some tools

732
00:29:02,510 --> 00:29:06,020
that<font color="#E5E5E5"> can tell you when the webcam is</font>

733
00:29:04,309 --> 00:29:07,820
activated I think it's kind<font color="#CCCCCC"> of pointless</font>

734
00:29:06,020 --> 00:29:10,280
because the LED indicator light is going

735
00:29:07,820 --> 00:29:12,439
<font color="#E5E5E5">on there are no tools that would tell</font>

736
00:29:10,280 --> 00:29:14,750
you what process was activating the

737
00:29:12,440 --> 00:29:17,420
webcam nor any<font color="#E5E5E5"> tools that could detect</font>

738
00:29:14,750 --> 00:29:21,410
this piggyback attack so I decided to

739
00:29:17,420 --> 00:29:23,840
<font color="#CCCCCC">write a tool the goal of the tool is</font>

740
00:29:21,410 --> 00:29:27,200
pretty simple<font color="#E5E5E5"> I basically want to be</font>

741
00:29:23,840 --> 00:29:29,750
<font color="#E5E5E5">alerted anytime any process accesses the</font>

742
00:29:27,200 --> 00:29:31,850
webcam even if the webcam is already in

743
00:29:29,750 --> 00:29:34,160
<font color="#CCCCCC">use and then I also want the tool to be</font>

744
00:29:31,850 --> 00:29:36,290
able to identify what process is using

745
00:29:34,160 --> 00:29:38,420
the webcam so yeah the LED indicator

746
00:29:36,290 --> 00:29:40,129
light may be on but I want<font color="#CCCCCC"> to know you</font>

747
00:29:38,420 --> 00:29:43,160
<font color="#CCCCCC">know what application of process is the</font>

748
00:29:40,130 --> 00:29:45,050
one actually using that so it<font color="#E5E5E5"> turns out</font>

749
00:29:43,160 --> 00:29:47,450
we can do this<font color="#E5E5E5"> in three pretty simple</font>

750
00:29:45,050 --> 00:29:50,330
steps we first register for webcam

751
00:29:47,450 --> 00:29:53,720
notifications just like the malware does

752
00:29:50,330 --> 00:29:56,240
and then when the webcam is activated we

753
00:29:53,720 --> 00:29:58,309
can basically determine who and<font color="#CCCCCC"> will</font>

754
00:29:56,240 --> 00:30:00,530
show this in a minute activated that and

755
00:29:58,309 --> 00:30:02,809
then while the webcam is in use we just

756
00:30:00,530 --> 00:30:05,629
look for secondary consumer processes

757
00:30:02,809 --> 00:30:09,889
that might be piggybacking on to access

758
00:30:05,630 --> 00:30:12,080
the webcam while it's already in use so

759
00:30:09,890 --> 00:30:13,970
it's all is called oversight it's

760
00:30:12,080 --> 00:30:15,320
totally free I know<font color="#CCCCCC"> people</font><font color="#E5E5E5"> sometimes say</font>

761
00:30:13,970 --> 00:30:16,940
you know there's<font color="#CCCCCC"> always got to be a</font>

762
00:30:15,320 --> 00:30:18,770
catch with free tools and generally

763
00:30:16,940 --> 00:30:20,540
there is but I wrote this tool first and

764
00:30:18,770 --> 00:30:23,750
foremost<font color="#E5E5E5"> to selfishly protect my</font><font color="#CCCCCC"> Mac</font>

765
00:30:20,540 --> 00:30:25,610
then I figured sharing is<font color="#CCCCCC"> caring so yeah</font>

766
00:30:23,750 --> 00:30:27,500
one hundred percent free so what

767
00:30:25,610 --> 00:30:31,309
oversight can do is it can detect when

768
00:30:27,500 --> 00:30:34,370
the internal mic or webcam<font color="#E5E5E5"> is in use and</font>

769
00:30:31,309 --> 00:30:36,920
it can identify what process is then

770
00:30:34,370 --> 00:30:38,928
using the mic or the webcam and then it

771
00:30:36,920 --> 00:30:41,179
can also monitor the webcam to detect

772
00:30:38,929 --> 00:30:43,360
these secondary consumer processes that

773
00:30:41,179 --> 00:30:45,740
might be maliciously piggybacking off

774
00:30:43,360 --> 00:30:50,780
and then I can also allow the user to

775
00:30:45,740 --> 00:30:52,190
block this axis so under the hood will

776
00:30:50,780 --> 00:30:54,800
kind<font color="#E5E5E5"> of dig into how this tool is</font>

777
00:30:52,190 --> 00:30:57,470
designed there's a few components the

778
00:30:54,800 --> 00:30:59,300
first component<font color="#E5E5E5"> is a</font><font color="#CCCCCC"> login item login</font>

779
00:30:57,470 --> 00:31:01,429
items will start automatically on

780
00:30:59,300 --> 00:31:03,050
<font color="#CCCCCC">startup so this just means the</font>

781
00:31:01,429 --> 00:31:04,700
application will automatically be

782
00:31:03,050 --> 00:31:05,680
executed when you<font color="#CCCCCC"> login to</font><font color="#E5E5E5"> provide</font>

783
00:31:04,700 --> 00:31:09,700
continual

784
00:31:05,680 --> 00:31:11,800
protection it shows up in the status bar

785
00:31:09,700 --> 00:31:13,060
<font color="#E5E5E5">this little icon you can click and it</font>

786
00:31:11,800 --> 00:31:16,000
has a little<font color="#CCCCCC"> drop-down menu for</font>

787
00:31:13,060 --> 00:31:18,159
configuration preferences and<font color="#E5E5E5"> whatnot</font>

788
00:31:16,000 --> 00:31:20,560
what it does this login item is then

789
00:31:18,160 --> 00:31:22,420
monitor for these webcam and mic

790
00:31:20,560 --> 00:31:24,070
activations and then it's also

791
00:31:22,420 --> 00:31:25,930
responsible for showing the alert

792
00:31:24,070 --> 00:31:28,720
because<font color="#E5E5E5"> it's running in user sessions</font>

793
00:31:25,930 --> 00:31:31,660
there's a second component an authorized

794
00:31:28,720 --> 00:31:33,760
XP see<font color="#E5E5E5"> service XP see service is just a</font>

795
00:31:31,660 --> 00:31:35,590
service that talks via mock messages to

796
00:31:33,760 --> 00:31:38,260
another component in this case the login

797
00:31:35,590 --> 00:31:40,510
item and what it<font color="#E5E5E5"> does is it</font><font color="#CCCCCC"> is</font>

798
00:31:38,260 --> 00:31:43,840
<font color="#E5E5E5">responsible for determining what process</font>

799
00:31:40,510 --> 00:31:46,600
activated the webcam and then also once

800
00:31:43,840 --> 00:31:48,639
the login item has shown an alert to the

801
00:31:46,600 --> 00:31:51,040
user if the user clicks block<font color="#E5E5E5"> that</font>

802
00:31:48,640 --> 00:31:52,930
message is sent to the<font color="#CCCCCC"> X</font><font color="#E5E5E5"> PC service so</font>

803
00:31:51,040 --> 00:31:54,159
it can kill the process<font color="#E5E5E5"> because you</font>

804
00:31:52,930 --> 00:31:56,230
might have malware that's running as

805
00:31:54,160 --> 00:31:58,240
root login items run in the user session

806
00:31:56,230 --> 00:32:00,220
as user so they might<font color="#E5E5E5"> not have privilege</font>

807
00:31:58,240 --> 00:32:02,140
to kill the process but we can send a

808
00:32:00,220 --> 00:32:04,240
message<font color="#CCCCCC"> to the X PC service to tell it</font>

809
00:32:02,140 --> 00:32:07,900
to kill the process<font color="#E5E5E5"> and then it is able</font>

810
00:32:04,240 --> 00:32:09,910
<font color="#E5E5E5">to terminate that so one of the main</font>

811
00:32:07,900 --> 00:32:12,270
functionalities or feature points of

812
00:32:09,910 --> 00:32:15,280
oversight is its ability<font color="#E5E5E5"> to identify</font>

813
00:32:12,270 --> 00:32:17,170
both initial and secondary consumer

814
00:32:15,280 --> 00:32:19,990
processes that is to say<font color="#CCCCCC"> it can tell you</font>

815
00:32:17,170 --> 00:32:22,360
what application is actually using<font color="#CCCCCC"> the</font>

816
00:32:19,990 --> 00:32:24,220
webcam or the might turns<font color="#E5E5E5"> out this isn't</font>

817
00:32:22,360 --> 00:32:26,530
trivial because apple doesn't provide

818
00:32:24,220 --> 00:32:30,010
any direct way<font color="#E5E5E5"> to do it so yes they will</font>

819
00:32:26,530 --> 00:32:32,680
develop just alert you deliver a

820
00:32:30,010 --> 00:32:35,080
notification saying hey the webcam is

821
00:32:32,680 --> 00:32:37,570
activated but<font color="#E5E5E5"> they don't</font><font color="#CCCCCC"> tell you what</font>

822
00:32:35,080 --> 00:32:39,340
process is doing<font color="#E5E5E5"> that so if we reverse</font>

823
00:32:37,570 --> 00:32:40,960
engineer this whole process we can<font color="#E5E5E5"> kind</font>

824
00:32:39,340 --> 00:32:43,000
of figure<font color="#E5E5E5"> out what goes on under the</font>

825
00:32:40,960 --> 00:32:45,250
hood<font color="#CCCCCC"> so say an application like Skype</font>

826
00:32:43,000 --> 00:32:48,010
starts using the webcam once it's

827
00:32:45,250 --> 00:32:49,900
activated the webcam the OS<font color="#CCCCCC"> will</font>

828
00:32:48,010 --> 00:32:53,320
actually send a mock message which is

829
00:32:49,900 --> 00:32:56,430
just IPC message to the camera assistant

830
00:32:53,320 --> 00:32:59,320
process so oversight has now got the

831
00:32:56,430 --> 00:33:00,760
notification in the<font color="#E5E5E5"> webcam is active so</font>

832
00:32:59,320 --> 00:33:02,889
what it can do is it can query the

833
00:33:00,760 --> 00:33:05,740
camera assistant process and see who's

834
00:33:02,890 --> 00:33:07,780
sent it recent mock messages then it has

835
00:33:05,740 --> 00:33:09,640
some candidate processes one of them is

836
00:33:07,780 --> 00:33:12,430
<font color="#CCCCCC">going</font><font color="#E5E5E5"> to be the process the initiated</font>

837
00:33:09,640 --> 00:33:14,290
webcam access and then so once it has

838
00:33:12,430 --> 00:33:15,940
those candidates it can query those it

839
00:33:14,290 --> 00:33:18,440
can for example look at the loaded

840
00:33:15,940 --> 00:33:20,779
libraries and sample that process

841
00:33:18,440 --> 00:33:22,909
a thread stack trace and then figure<font color="#CCCCCC"> out</font>

842
00:33:20,779 --> 00:33:24,710
dynamically which of those candidate

843
00:33:22,909 --> 00:33:26,720
processes is the<font color="#E5E5E5"> one that actually is</font>

844
00:33:24,710 --> 00:33:30,769
using the webcam so not an exact<font color="#CCCCCC"> science</font>

845
00:33:26,720 --> 00:33:32,240
but it works actually really well so I

846
00:33:30,769 --> 00:33:34,309
released version<font color="#CCCCCC"> one point is the end of</font>

847
00:33:32,240 --> 00:33:36,679
<font color="#CCCCCC">the last</font><font color="#E5E5E5"> year it turned out to be fairly</font>

848
00:33:34,309 --> 00:33:39,019
popular utility I think my favorite part

849
00:33:36,679 --> 00:33:41,179
is for a while if you google<font color="#E5E5E5"> oversight</font>

850
00:33:39,019 --> 00:33:43,009
it actually beat out the US<font color="#E5E5E5"> government</font>

851
00:33:41,179 --> 00:33:44,929
well specifically the Oversight

852
00:33:43,009 --> 00:33:47,570
Committee so I<font color="#E5E5E5"> thought</font><font color="#CCCCCC"> that was kind of</font>

853
00:33:44,929 --> 00:33:49,279
cool<font color="#E5E5E5"> version one somewhat limited in</font>

854
00:33:47,570 --> 00:33:51,678
features so I got a lot of feedback and

855
00:33:49,279 --> 00:33:53,870
requests for improvements and new

856
00:33:51,679 --> 00:33:55,820
features<font color="#E5E5E5"> so the first thing was the</font>

857
00:33:53,870 --> 00:33:57,768
initial version of oversight while<font color="#CCCCCC"> it</font>

858
00:33:55,820 --> 00:33:59,689
could identify what application was

859
00:33:57,769 --> 00:34:01,730
using the webcam it couldn't identify

860
00:33:59,690 --> 00:34:04,549
what application was using the mic so it

861
00:34:01,730 --> 00:34:06,500
just<font color="#CCCCCC"> said someone's using</font><font color="#E5E5E5"> the mic it</font>

862
00:34:04,549 --> 00:34:08,239
also<font color="#E5E5E5"> had no white listing so say you use</font>

863
00:34:06,500 --> 00:34:09,649
facebook or skype a lot it would<font color="#E5E5E5"> alert</font>

864
00:34:08,239 --> 00:34:11,828
you every time<font color="#CCCCCC"> you use one of those</font>

865
00:34:09,649 --> 00:34:13,940
applications which got a<font color="#CCCCCC"> little annoying</font>

866
00:34:11,829 --> 00:34:17,960
and also didn't have a<font color="#CCCCCC"> command-line</font>

867
00:34:13,940 --> 00:34:21,020
interface so today<font color="#CCCCCC"> i'm releasing version</font>

868
00:34:17,960 --> 00:34:22,790
1.1 which has a slew of new features and

869
00:34:21,020 --> 00:34:25,879
one of the main<font color="#CCCCCC"> features is oversight</font>

870
00:34:22,790 --> 00:34:28,210
can now detect accurately and identify

871
00:34:25,879 --> 00:34:30,440
what process is using the microphone

872
00:34:28,210 --> 00:34:33,619
turns<font color="#E5E5E5"> out this is kind of similar to how</font>

873
00:34:30,440 --> 00:34:35,720
the webcam is detected but there's a

874
00:34:33,619 --> 00:34:37,819
little more that goes on so again if<font color="#CCCCCC"> we</font>

875
00:34:35,719 --> 00:34:41,689
have an application<font color="#CCCCCC"> like siri that's</font>

876
00:34:37,819 --> 00:34:43,579
accessing the mic oversight will get a

877
00:34:41,690 --> 00:34:45,500
notification from the operating system

878
00:34:43,579 --> 00:34:47,839
because we registered for mike alerts

879
00:34:45,500 --> 00:34:49,819
and i'll say hey the mic just came on so

880
00:34:47,839 --> 00:34:52,190
we know someone<font color="#E5E5E5"> has started recording</font>

881
00:34:49,819 --> 00:34:54,349
off the mic what we can do then is again

882
00:34:52,190 --> 00:34:56,510
we can monitor these mock messages and

883
00:34:54,349 --> 00:34:57,980
when someone talks to the mic under the

884
00:34:56,510 --> 00:35:00,230
<font color="#E5E5E5">hood the operating system will send a</font>

885
00:34:57,980 --> 00:35:02,900
mock message to the core audio demon

886
00:35:00,230 --> 00:35:04,670
court audio d so again we can look<font color="#E5E5E5"> at</font>

887
00:35:02,900 --> 00:35:07,730
<font color="#CCCCCC">that and we can see what processes have</font>

888
00:35:04,670 --> 00:35:10,700
recently send mock messages to the

889
00:35:07,730 --> 00:35:12,740
audios Damon we also then can scan the

890
00:35:10,700 --> 00:35:14,450
<font color="#CCCCCC">IO registry because when processes talk</font>

891
00:35:12,740 --> 00:35:16,459
to the mic they register some entries in

892
00:35:14,450 --> 00:35:18,410
the<font color="#CCCCCC"> IO registry</font><font color="#E5E5E5"> and then similarly we</font>

893
00:35:16,460 --> 00:35:20,869
can prop sample the process or look what

894
00:35:18,410 --> 00:35:23,089
dynamic libraries it has loaded so again

895
00:35:20,869 --> 00:35:25,099
it's not an exact<font color="#E5E5E5"> science but seems to</font>

896
00:35:23,089 --> 00:35:27,349
work very reliably so for example<font color="#E5E5E5"> when</font>

897
00:35:25,099 --> 00:35:29,750
you fire up Siri it will now tell you

898
00:35:27,349 --> 00:35:30,850
that theory or assistant d which<font color="#CCCCCC"> is what</font>

899
00:35:29,750 --> 00:35:33,010
<font color="#CCCCCC">syria's behind</font>

900
00:35:30,850 --> 00:35:36,370
the scenes just became active and it

901
00:35:33,010 --> 00:35:39,190
started to use the microphone another

902
00:35:36,370 --> 00:35:41,470
feature in oversight 1.1 is the ability

903
00:35:39,190 --> 00:35:43,750
to whitelist processes so mentioned this

904
00:35:41,470 --> 00:35:45,850
was request for a lot of users again

905
00:35:43,750 --> 00:35:47,920
something<font color="#E5E5E5"> like theory uses the</font><font color="#CCCCCC"> mic got</font>

906
00:35:45,850 --> 00:35:49,779
really annoying<font color="#E5E5E5"> when you know every time</font>

907
00:35:47,920 --> 00:35:52,390
<font color="#E5E5E5">you ask Siri a question you would get an</font>

908
00:35:49,780 --> 00:35:55,180
oversight alert so now what<font color="#E5E5E5"> you</font><font color="#CCCCCC"> can do</font>

909
00:35:52,390 --> 00:35:57,160
is when any<font color="#E5E5E5"> of these</font><font color="#CCCCCC"> processes accesses</font>

910
00:35:55,180 --> 00:35:59,830
the micro<font color="#E5E5E5"> or the webcam the first time</font>

911
00:35:57,160 --> 00:36:02,020
you've got an alert and if you click

912
00:35:59,830 --> 00:36:04,630
allow it'll ask you do you want<font color="#CCCCCC"> to allow</font>

913
00:36:02,020 --> 00:36:07,060
<font color="#CCCCCC">it always or just once and if you allow</font>

914
00:36:04,630 --> 00:36:09,760
always it'll add it to a whitelist and

915
00:36:07,060 --> 00:36:11,500
then you can then go in and click manage

916
00:36:09,760 --> 00:36:13,630
rules to see what processes have been

917
00:36:11,500 --> 00:36:15,820
<font color="#CCCCCC">whitelisted and</font><font color="#E5E5E5"> then from then on those</font>

918
00:36:13,630 --> 00:36:18,370
whitelisted processes will be allowed

919
00:36:15,820 --> 00:36:19,990
now this is done via the XTC mechanism

920
00:36:18,370 --> 00:36:23,640
so malware that's not running as root

921
00:36:19,990 --> 00:36:26,500
can't obviously just white twist itself

922
00:36:23,640 --> 00:36:29,319
<font color="#CCCCCC">alright so</font><font color="#E5E5E5"> since we have some time still</font>

923
00:36:26,500 --> 00:36:31,330
I want to dive into an interesting case

924
00:36:29,320 --> 00:36:33,810
study where oversight revealed some

925
00:36:31,330 --> 00:36:37,299
interesting behavior in a very popular

926
00:36:33,810 --> 00:36:40,060
application so it all started with an

927
00:36:37,300 --> 00:36:42,430
email from an oversight user they

928
00:36:40,060 --> 00:36:44,860
<font color="#E5E5E5">emailed me saying thanks to oversight I</font>

929
00:36:42,430 --> 00:36:46,600
was able<font color="#E5E5E5"> to figure out why my Mac was</font>

930
00:36:44,860 --> 00:36:49,330
always spying on me just<font color="#E5E5E5"> to let you know</font>

931
00:36:46,600 --> 00:36:51,460
<font color="#CCCCCC">shazam keeps the microphone active even</font>

932
00:36:49,330 --> 00:36:54,220
<font color="#E5E5E5">when you specifically switch the toggle</font>

933
00:36:51,460 --> 00:36:56,290
to off in their app scary and this

934
00:36:54,220 --> 00:36:58,180
piqued my interest I was like kinda

935
00:36:56,290 --> 00:37:00,430
sounds kind of interesting at the<font color="#E5E5E5"> time I</font>

936
00:36:58,180 --> 00:37:02,770
was flying to echo party conference in

937
00:37:00,430 --> 00:37:05,500
Argentina awesome conference that was<font color="#E5E5E5"> on</font>

938
00:37:02,770 --> 00:37:07,480
a 15-hour flight from<font color="#CCCCCC"> Australia so no</font>

939
00:37:05,500 --> 00:37:10,120
internet I actually get a lot of done on

940
00:37:07,480 --> 00:37:13,690
these<font color="#E5E5E5"> flights so I decided to dig in</font><font color="#CCCCCC"> and</font>

941
00:37:10,120 --> 00:37:17,700
see what was going on so the first thing

942
00:37:13,690 --> 00:37:17,700
was I had a copy of shazam shazamicon

943
00:37:21,330 --> 00:37:26,230
then it can dynamically identify what

944
00:37:24,130 --> 00:37:28,690
song you're listening to kind of cool

945
00:37:26,230 --> 00:37:31,060
features mostly on our phones but they

946
00:37:28,690 --> 00:37:34,150
have a Mac application which<font color="#CCCCCC"> is what the</font>

947
00:37:31,060 --> 00:37:35,230
user was talking about again he claimed

948
00:37:34,150 --> 00:37:38,410
<font color="#E5E5E5">that when you turned it off the</font>

949
00:37:35,230 --> 00:37:40,480
microphone was still active<font color="#E5E5E5"> so when I</font>

950
00:37:38,410 --> 00:37:43,120
download it and installed it it

951
00:37:40,480 --> 00:37:43,990
automatically starts running and I got

952
00:37:43,120 --> 00:37:46,210
alert saying

953
00:37:43,990 --> 00:37:48,250
Shazam is using the microphone this is

954
00:37:46,210 --> 00:37:50,680
expected because Shazam is going to

955
00:37:48,250 --> 00:37:54,000
listen to audio and<font color="#E5E5E5"> identify a song so</font>

956
00:37:50,680 --> 00:37:57,759
so<font color="#E5E5E5"> far really nothing too suspicious I</font>

957
00:37:54,000 --> 00:37:59,980
then turned off Shazam and as the user

958
00:37:57,760 --> 00:38:02,200
had reported I got no deactivation alert

959
00:37:59,980 --> 00:38:04,510
so oversight will normally tell you when

960
00:38:02,200 --> 00:38:07,629
the web camera mic goes on and then also

961
00:38:04,510 --> 00:38:10,210
when it gets off in<font color="#CCCCCC"> this case though I</font>

962
00:38:07,630 --> 00:38:11,800
didn't get alert so I thought<font color="#E5E5E5"> okay</font>

963
00:38:10,210 --> 00:38:14,260
there's there's two options right the

964
00:38:11,800 --> 00:38:17,890
first is they might still be listening

965
00:38:14,260 --> 00:38:20,680
<font color="#E5E5E5">or there's a bug in my code either way</font>

966
00:38:17,890 --> 00:38:24,190
you know long plane ride<font color="#E5E5E5"> I decided to</font>

967
00:38:20,680 --> 00:38:26,740
dig<font color="#CCCCCC"> into this so</font><font color="#E5E5E5"> first let's talk about</font>

968
00:38:24,190 --> 00:38:28,330
the various<font color="#E5E5E5"> components of Shazam so when</font>

969
00:38:26,740 --> 00:38:30,819
you<font color="#CCCCCC"> grab Suzanne from the App Store on</font>

970
00:38:28,330 --> 00:38:32,890
your<font color="#E5E5E5"> Mac and install it if you have a</font>

971
00:38:30,820 --> 00:38:35,890
utility like block walk which we'll talk

972
00:38:32,890 --> 00:38:38,109
about in a few slides it'll give you

973
00:38:35,890 --> 00:38:40,690
alert saying hey Shazam is installing a

974
00:38:38,110 --> 00:38:43,030
persistent login item and if<font color="#E5E5E5"> we look at</font>

975
00:38:40,690 --> 00:38:45,790
the Shazam app bundle we can see in the

976
00:38:43,030 --> 00:38:48,670
library / login items folder there's a

977
00:38:45,790 --> 00:38:50,590
utility called shazam helper now any

978
00:38:48,670 --> 00:38:52,930
application<font color="#CCCCCC"> that you installed if there</font>

979
00:38:50,590 --> 00:38:55,150
is<font color="#CCCCCC"> a binary</font><font color="#E5E5E5"> in this library / login</font>

980
00:38:52,930 --> 00:38:57,100
items helper the operating system will

981
00:38:55,150 --> 00:38:59,290
automatically execute that every time

982
00:38:57,100 --> 00:39:01,390
the user logs in so this<font color="#CCCCCC"> is</font><font color="#E5E5E5"> how</font>

983
00:38:59,290 --> 00:39:03,190
applications distributed from the mac

984
00:39:01,390 --> 00:39:06,549
app store can legitimately persist

985
00:39:03,190 --> 00:39:09,340
components so this basically means every

986
00:39:06,550 --> 00:39:12,940
time<font color="#E5E5E5"> suzanne user logs in that Shazam</font>

987
00:39:09,340 --> 00:39:15,550
helper process will be executed so let's

988
00:39:12,940 --> 00:39:17,920
<font color="#E5E5E5">take a closer look at this login item to</font>

989
00:39:15,550 --> 00:39:20,290
see what it does so we have the

990
00:39:17,920 --> 00:39:23,080
disassembly from it specifically in the

991
00:39:20,290 --> 00:39:24,700
application did finish launching method

992
00:39:23,080 --> 00:39:26,890
this is kind of<font color="#E5E5E5"> like an applications</font>

993
00:39:24,700 --> 00:39:29,109
main function automatically executed

994
00:39:26,890 --> 00:39:30,160
when the application is loaded<font color="#CCCCCC"> and on</font>

995
00:39:29,109 --> 00:39:31,930
the right<font color="#CCCCCC"> i</font><font color="#E5E5E5"> have some pseudocode</font>

996
00:39:30,160 --> 00:39:36,368
probably easier<font color="#E5E5E5"> to read and we see it</font>

997
00:39:31,930 --> 00:39:39,399
does two things<font color="#CCCCCC"> it creates a URL</font><font color="#E5E5E5"> Shazam</font>

998
00:39:36,369 --> 00:39:42,550
<font color="#CCCCCC">Mac colon slash slash launch and then</font>

999
00:39:39,400 --> 00:39:44,470
opens this and this then executes the

1000
00:39:42,550 --> 00:39:46,540
mange tues a mac which is responsible

1001
00:39:44,470 --> 00:39:50,950
for showing the item in the status bar

1002
00:39:46,540 --> 00:39:52,630
and having this on/off toggle switch now

1003
00:39:50,950 --> 00:39:55,029
you<font color="#E5E5E5"> might be wondering how does just</font>

1004
00:39:52,630 --> 00:39:57,160
opening that Chism launch URL trigger

1005
00:39:55,030 --> 00:40:00,190
the execution of the main

1006
00:39:57,160 --> 00:40:03,759
<font color="#CCCCCC">shazam applications well if we look at</font>

1007
00:40:00,190 --> 00:40:06,940
the info.plist file of the main Shazam

1008
00:40:03,760 --> 00:40:10,510
application we can see<font color="#E5E5E5"> that there is a</font>

1009
00:40:06,940 --> 00:40:14,500
key CF bundle URL schemes that has a

1010
00:40:10,510 --> 00:40:16,270
value of Shazam<font color="#E5E5E5"> a Mac this basically</font>

1011
00:40:14,500 --> 00:40:19,299
tells the operating system hey I can

1012
00:40:16,270 --> 00:40:21,339
handle URL schemes of type Shazam<font color="#E5E5E5"> Mac so</font>

1013
00:40:19,299 --> 00:40:24,940
if anyone opens a URL of this type

1014
00:40:21,339 --> 00:40:27,819
execute me so I can handle<font color="#E5E5E5"> that so again</font>

1015
00:40:24,940 --> 00:40:30,329
this is how the login item launches or

1016
00:40:27,819 --> 00:40:32,529
kicks<font color="#E5E5E5"> off the main Shazam application</font>

1017
00:40:30,329 --> 00:40:35,170
<font color="#E5E5E5">alright so now we</font><font color="#CCCCCC"> know how she's am is</font>

1018
00:40:32,530 --> 00:40:37,390
automatically started again recall our

1019
00:40:35,170 --> 00:40:41,410
goal is to figure out<font color="#E5E5E5"> if Shazam is</font>

1020
00:40:37,390 --> 00:40:43,029
listening when we toggle it to off so

1021
00:40:41,410 --> 00:40:45,578
let's first<font color="#E5E5E5"> talk about how we can figure</font>

1022
00:40:43,030 --> 00:40:49,030
out what code is executed when the user

1023
00:40:45,579 --> 00:40:52,390
toggles that switch on or off now

1024
00:40:49,030 --> 00:40:54,670
essentialism is<font color="#CCCCCC"> a mock Oh binary believe</font>

1025
00:40:52,390 --> 00:40:57,190
is written in Swift this means it has a

1026
00:40:54,670 --> 00:40:59,319
ton of really interesting content in the

1027
00:40:57,190 --> 00:41:01,299
actual binary so wineries that are

1028
00:40:59,319 --> 00:41:04,119
written in Swift or objective-c have a

1029
00:41:01,299 --> 00:41:06,670
lot of runtime type information within

1030
00:41:04,119 --> 00:41:09,369
the binary for example class and method

1031
00:41:06,670 --> 00:41:12,069
names so we<font color="#CCCCCC"> can use</font><font color="#E5E5E5"> a utility like class</font>

1032
00:41:09,369 --> 00:41:14,260
<font color="#CCCCCC">dump to extract this information so we</font>

1033
00:41:12,069 --> 00:41:16,720
execute class dump and we can see for

1034
00:41:14,260 --> 00:41:19,089
example we get class names instance

1035
00:41:16,720 --> 00:41:21,000
variables and method names and there's

1036
00:41:19,089 --> 00:41:24,369
this one method called toggle

1037
00:41:21,000 --> 00:41:28,029
auto-tagging that looks interesting so

1038
00:41:24,369 --> 00:41:30,250
let's debug that so what we do is we

1039
00:41:28,029 --> 00:41:31,960
launched this Shazam application or if

1040
00:41:30,250 --> 00:41:34,960
it's already running you<font color="#E5E5E5"> can attach</font><font color="#CCCCCC"> to</font>

1041
00:41:31,960 --> 00:41:37,539
it we use ll DB which is the kind of de

1042
00:41:34,960 --> 00:41:40,000
<font color="#CCCCCC">facto apple approved to bugger for max</font>

1043
00:41:37,539 --> 00:41:43,089
and what we do is<font color="#E5E5E5"> we set a breakpoint on</font>

1044
00:41:40,000 --> 00:41:45,010
this toggle<font color="#E5E5E5"> auto-tagging method and then</font>

1045
00:41:43,089 --> 00:41:48,130
once this is set we go back into the UI

1046
00:41:45,010 --> 00:41:51,520
and we toggle the switch<font color="#E5E5E5"> from on to off</font>

1047
00:41:48,130 --> 00:41:53,740
and turns<font color="#E5E5E5"> out this causes our break</font>

1048
00:41:51,520 --> 00:41:55,480
point to be hit so<font color="#E5E5E5"> awesome this means</font>

1049
00:41:53,740 --> 00:41:58,089
this method is executed when the user

1050
00:41:55,480 --> 00:41:59,890
toggles that switch now once we hit that

1051
00:41:58,089 --> 00:42:03,609
break point we can dump various values

1052
00:41:59,890 --> 00:42:05,500
for example register values there's a

1053
00:42:03,609 --> 00:42:08,500
table<font color="#E5E5E5"> on</font><font color="#CCCCCC"> the slide that shows what</font>

1054
00:42:05,500 --> 00:42:11,079
register values have once it hits an

1055
00:42:08,500 --> 00:42:12,999
objective-c method call so<font color="#CCCCCC"> our di is</font>

1056
00:42:11,079 --> 00:42:15,819
contain the name of the class which is

1057
00:42:12,999 --> 00:42:18,249
SH main view controller the second

1058
00:42:15,819 --> 00:42:19,900
argument is an RSI that's the<font color="#E5E5E5"> method</font>

1059
00:42:18,249 --> 00:42:21,669
name and we can see yes<font color="#CCCCCC"> it's toggle</font>

1060
00:42:19,900 --> 00:42:22,839
auto-tagging which is the name of the

1061
00:42:21,670 --> 00:42:25,299
method instead the<font color="#E5E5E5"> break point on and</font>

1062
00:42:22,839 --> 00:42:28,269
then most<font color="#E5E5E5"> importantly the third argument</font>

1063
00:42:25,299 --> 00:42:31,089
which is<font color="#E5E5E5"> in RDX is going to be the</font>

1064
00:42:28,269 --> 00:42:33,669
parameter that that method takes and if

1065
00:42:31,089 --> 00:42:35,709
<font color="#E5E5E5">we do PL which is print objects we can</font>

1066
00:42:33,670 --> 00:42:38,979
see it's an instance of something called

1067
00:42:35,709 --> 00:42:41,169
an IT switch and that is just<font color="#CCCCCC"> the object</font>

1068
00:42:38,979 --> 00:42:43,989
that<font color="#CCCCCC"> Shazam uses to represent that</font>

1069
00:42:41,170 --> 00:42:45,640
toggle switch now since we have access

1070
00:42:43,989 --> 00:42:48,099
to an<font color="#E5E5E5"> instance of</font><font color="#CCCCCC"> that object we can</font>

1071
00:42:45,640 --> 00:42:50,229
invoke methods on it in the debugger so

1072
00:42:48,099 --> 00:42:53,019
for example<font color="#E5E5E5"> we can execute the is on</font>

1073
00:42:50,229 --> 00:42:54,339
method and<font color="#CCCCCC"> we can see it returns no and</font>

1074
00:42:53,019 --> 00:42:56,649
that's<font color="#E5E5E5"> because we've just toggle the</font>

1075
00:42:54,339 --> 00:42:58,509
switch off so<font color="#CCCCCC"> again we found out what</font>

1076
00:42:56,650 --> 00:43:01,569
method is called when it's toggled and

1077
00:42:58,509 --> 00:43:06,579
we also have access<font color="#E5E5E5"> to the actual switch</font>

1078
00:43:01,569 --> 00:43:09,459
object<font color="#CCCCCC"> alright so if the user toggles</font>

1079
00:43:06,579 --> 00:43:12,190
the switch from on to off we<font color="#E5E5E5"> can see</font>

1080
00:43:09,459 --> 00:43:14,769
that<font color="#E5E5E5"> the toggle auto-tagging invokes a</font>

1081
00:43:12,190 --> 00:43:18,039
variety of methods kind of follow it on

1082
00:43:14,769 --> 00:43:20,049
the slide it first invokes a stop

1083
00:43:18,039 --> 00:43:22,269
tagging method which calls another

1084
00:43:20,049 --> 00:43:24,999
classes stop tagging method which is in

1085
00:43:22,269 --> 00:43:27,939
the shazam<font color="#CCCCCC"> sdk framework that in term</font>

1086
00:43:24,999 --> 00:43:30,819
<font color="#CCCCCC">calls stop tagging for reason and then</font>

1087
00:43:27,940 --> 00:43:32,380
step 5 that calls stop tag in common<font color="#E5E5E5"> and</font>

1088
00:43:30,819 --> 00:43:34,749
then the most important thing though is

1089
00:43:32,380 --> 00:43:36,339
the bottom left of<font color="#CCCCCC"> the slide and we can</font>

1090
00:43:34,749 --> 00:43:39,399
see there's this chunk of code that

1091
00:43:36,339 --> 00:43:42,400
<font color="#CCCCCC">calls stopped recording but stop</font>

1092
00:43:39,400 --> 00:43:44,499
recording is only called if should stop

1093
00:43:42,400 --> 00:43:47,049
recording when tagging n which is

1094
00:43:44,499 --> 00:43:49,538
<font color="#E5E5E5">another method returns true so just</font>

1095
00:43:47,049 --> 00:43:52,329
remember<font color="#E5E5E5"> that fact so let's first look</font>

1096
00:43:49,539 --> 00:43:54,489
at that stop recording method if we

1097
00:43:52,329 --> 00:43:58,329
<font color="#E5E5E5">disassemble that we can see it calls</font>

1098
00:43:54,489 --> 00:44:01,479
<font color="#E5E5E5">apples audio output stop function the</font>

1099
00:43:58,329 --> 00:44:04,239
SDK docs from<font color="#E5E5E5"> Apple say that audio</font>

1100
00:44:01,479 --> 00:44:06,249
output unit stop stop sahnaya audio unit

1101
00:44:04,239 --> 00:44:07,989
which term stops the audio unit

1102
00:44:06,249 --> 00:44:09,488
processing<font color="#E5E5E5"> graph that is connected to</font>

1103
00:44:07,989 --> 00:44:11,349
blah blah blah it basically<font color="#E5E5E5"> just means</font>

1104
00:44:09,489 --> 00:44:14,079
it's<font color="#CCCCCC"> going to stop recording off the mic</font>

1105
00:44:11,349 --> 00:44:16,569
so yeah it looks<font color="#E5E5E5"> like reasonable maybe</font>

1106
00:44:14,079 --> 00:44:19,209
<font color="#CCCCCC">Shazam actually does stop recording when</font>

1107
00:44:16,569 --> 00:44:21,249
you toggle<font color="#E5E5E5"> it off but again record</font>

1108
00:44:19,209 --> 00:44:24,259
recall that<font color="#CCCCCC"> stopped recording</font><font color="#E5E5E5"> only gets</font>

1109
00:44:21,249 --> 00:44:25,879
invoked if that previous method is true

1110
00:44:24,260 --> 00:44:27,650
so let's look<font color="#E5E5E5"> at that previous method</font>

1111
00:44:25,880 --> 00:44:30,230
which is again should stop recording

1112
00:44:27,650 --> 00:44:33,740
when tagging ends as<font color="#E5E5E5"> we can</font><font color="#CCCCCC"> see it's a</font>

1113
00:44:30,230 --> 00:44:36,800
very basic method it simply returns a

1114
00:44:33,740 --> 00:44:40,609
boolean yes no<font color="#E5E5E5"> value if some tagging</font>

1115
00:44:36,800 --> 00:44:42,110
type variable is set to<font color="#E5E5E5"> 2 or not now</font>

1116
00:44:40,610 --> 00:44:43,940
when we toggle that switch we have a

1117
00:44:42,110 --> 00:44:45,230
break point so we can step into this and

1118
00:44:43,940 --> 00:44:48,650
we can see<font color="#CCCCCC"> what the value of that</font>

1119
00:44:45,230 --> 00:44:51,950
tagging type is and we see when we<font color="#CCCCCC"> dump</font>

1120
00:44:48,650 --> 00:44:54,050
<font color="#E5E5E5">it it's not too it's one so that means</font>

1121
00:44:51,950 --> 00:44:56,930
that<font color="#E5E5E5"> this method is going to return</font>

1122
00:44:54,050 --> 00:45:00,200
false which means stop recording is not

1123
00:44:56,930 --> 00:45:02,240
going to be called now when reverse

1124
00:45:00,200 --> 00:45:04,339
engineering things we can't always be a

1125
00:45:02,240 --> 00:45:06,560
hundred percent<font color="#CCCCCC"> sure of everything so I</font>

1126
00:45:04,340 --> 00:45:09,260
thought hey maybe this method is

1127
00:45:06,560 --> 00:45:11,540
returning one because i'm debugging it

1128
00:45:09,260 --> 00:45:13,850
or<font color="#E5E5E5"> i'm running in a vm or maybe it's not</font>

1129
00:45:11,540 --> 00:45:16,220
connected to the<font color="#E5E5E5"> internet so i decided</font>

1130
00:45:13,850 --> 00:45:18,170
to dig around a little more first<font color="#CCCCCC"> thing</font>

1131
00:45:16,220 --> 00:45:21,109
i noticed though is this tag value is

1132
00:45:18,170 --> 00:45:24,050
set to<font color="#CCCCCC"> 1 in a hard-coded manner so does</font>

1133
00:45:21,110 --> 00:45:25,880
appear that can<font color="#E5E5E5"> ever be too anyways so</font>

1134
00:45:24,050 --> 00:45:27,940
that was kind of<font color="#E5E5E5"> interesting because it</font>

1135
00:45:25,880 --> 00:45:30,860
kind of confirmed that's that theory

1136
00:45:27,940 --> 00:45:32,840
what we can also do is we can ask<font color="#CCCCCC"> Sam</font>

1137
00:45:30,860 --> 00:45:35,090
itself if it's recording so it<font color="#E5E5E5"> has a</font>

1138
00:45:32,840 --> 00:45:37,700
<font color="#E5E5E5">method called is recording that you can</font>

1139
00:45:35,090 --> 00:45:40,190
invoke from the debugger and I invoke

1140
00:45:37,700 --> 00:45:42,799
this method<font color="#E5E5E5"> after I toggle the switch to</font>

1141
00:45:40,190 --> 00:45:44,600
off and it came back<font color="#E5E5E5"> and said yes so</font>

1142
00:45:42,800 --> 00:45:46,490
this<font color="#E5E5E5"> is basically the shazam app telling</font>

1143
00:45:44,600 --> 00:45:49,220
me hey I'm still recording even the you

1144
00:45:46,490 --> 00:45:51,200
even though the UI is toggle off so at

1145
00:45:49,220 --> 00:45:53,209
<font color="#E5E5E5">this point I felt pretty confident email</font>

1146
00:45:51,200 --> 00:45:55,580
Shazam I was like hey guys looks<font color="#E5E5E5"> like</font>

1147
00:45:53,210 --> 00:45:58,520
your app is still recording even I turn

1148
00:45:55,580 --> 00:46:00,620
it off like what's going<font color="#E5E5E5"> on here and</font>

1149
00:45:58,520 --> 00:46:04,009
they<font color="#E5E5E5"> basically came back and said yeah</font>

1150
00:46:00,620 --> 00:46:06,680
we use this continued recording on iOS

1151
00:46:04,010 --> 00:46:08,960
and mac for performance allowing us to

1152
00:46:06,680 --> 00:46:11,569
deliver faster song matches to user so

1153
00:46:08,960 --> 00:46:15,410
again like the whole BS performance

1154
00:46:11,570 --> 00:46:17,720
excuse now as a few<font color="#CCCCCC"> things</font><font color="#E5E5E5"> to know first</font>

1155
00:46:15,410 --> 00:46:19,549
I don't think Shazam is being malicious

1156
00:46:17,720 --> 00:46:22,669
for sale think they were spying on

1157
00:46:19,550 --> 00:46:24,500
anyone because while they do continue to

1158
00:46:22,670 --> 00:46:26,780
record so while they are pulling<font color="#E5E5E5"> audio</font>

1159
00:46:24,500 --> 00:46:29,120
off the mic they don't actually process

1160
00:46:26,780 --> 00:46:31,160
it if the user has toggled this switched

1161
00:46:29,120 --> 00:46:32,900
off so again which<font color="#E5E5E5"> dizamn does is read</font>

1162
00:46:31,160 --> 00:46:34,970
audio off the mic and<font color="#E5E5E5"> I think they send</font>

1163
00:46:32,900 --> 00:46:36,680
it to the cloud<font color="#CCCCCC"> for song identification</font>

1164
00:46:34,970 --> 00:46:38,060
so when it's off it<font color="#E5E5E5"> actually doesn't</font>

1165
00:46:36,680 --> 00:46:40,910
exfiltrate any of that

1166
00:46:38,060 --> 00:46:43,580
so that's you<font color="#CCCCCC"> know not necessarily the</font>

1167
00:46:40,910 --> 00:46:45,560
worst and also it turns out that the way

1168
00:46:43,580 --> 00:46:47,779
they pull audio from it they might be

1169
00:46:45,560 --> 00:46:49,850
more doing sampling versus<font color="#E5E5E5"> doing full</font>

1170
00:46:47,780 --> 00:46:51,590
room collection audio so I'm<font color="#E5E5E5"> not</font><font color="#CCCCCC"> sure</font><font color="#E5E5E5"> if</font>

1171
00:46:49,850 --> 00:46:53,930
you can<font color="#E5E5E5"> actually like rebuild actual</font>

1172
00:46:51,590 --> 00:46:56,210
conversations but either way the problem

1173
00:46:53,930 --> 00:46:59,600
<font color="#E5E5E5">was they were still pulling audio off</font>

1174
00:46:56,210 --> 00:47:01,630
the mic which<font color="#E5E5E5"> I don't think is good</font>

1175
00:46:59,600 --> 00:47:04,370
especially if they have this off<font color="#E5E5E5"> switch</font>

1176
00:47:01,630 --> 00:47:05,900
so again I reported this to Shazam and

1177
00:47:04,370 --> 00:47:08,180
<font color="#E5E5E5">they basically said oh this is</font><font color="#CCCCCC"> a feature</font>

1178
00:47:05,900 --> 00:47:09,740
not a bug<font color="#CCCCCC"> yada yada yada the media</font>

1179
00:47:08,180 --> 00:47:11,060
picked up on this<font color="#CCCCCC"> and of course you know</font>

1180
00:47:09,740 --> 00:47:13,490
they like<font color="#E5E5E5"> to make things a little more</font>

1181
00:47:11,060 --> 00:47:16,130
sensational like oh my<font color="#E5E5E5"> gods and is</font>

1182
00:47:13,490 --> 00:47:18,259
spying on all of us but<font color="#CCCCCC"> the good news</font>

1183
00:47:16,130 --> 00:47:20,210
was this caused Shazam to actually

1184
00:47:18,260 --> 00:47:22,430
change their behavior which I was<font color="#E5E5E5"> very</font>

1185
00:47:20,210 --> 00:47:24,560
happy<font color="#E5E5E5"> with so what they said is we</font>

1186
00:47:22,430 --> 00:47:26,450
updated the application to make sure the

1187
00:47:24,560 --> 00:47:29,150
microphone is completely turned off when

1188
00:47:26,450 --> 00:47:31,040
she's an isn't running so this was good

1189
00:47:29,150 --> 00:47:33,950
now when you turn to them to office

1190
00:47:31,040 --> 00:47:35,360
actually<font color="#CCCCCC"> stop using the mic this was</font>

1191
00:47:33,950 --> 00:47:37,399
<font color="#E5E5E5">cool I thought this was you know</font>

1192
00:47:35,360 --> 00:47:39,800
Illustrated that oversight with the

1193
00:47:37,400 --> 00:47:42,920
useful tool but also I<font color="#E5E5E5"> think it revealed</font>

1194
00:47:39,800 --> 00:47:44,810
some somewhat shady functionality of a

1195
00:47:42,920 --> 00:47:48,230
legitimate application and eventually

1196
00:47:44,810 --> 00:47:52,430
call cause the vendor to you know remedy

1197
00:47:48,230 --> 00:47:54,740
that<font color="#CCCCCC"> all right so let's start wrapping</font>

1198
00:47:52,430 --> 00:47:56,419
this all up but before<font color="#CCCCCC"> we end I briefly</font>

1199
00:47:54,740 --> 00:47:59,029
want to talk<font color="#CCCCCC"> about some generic</font>

1200
00:47:56,420 --> 00:48:00,740
detection why well I<font color="#CCCCCC"> think we just</font>

1201
00:47:59,030 --> 00:48:03,140
<font color="#CCCCCC">Illustrated the value of such generic</font>

1202
00:48:00,740 --> 00:48:05,750
detection for example monitoring is the

1203
00:48:03,140 --> 00:48:07,520
mic off we revealed that a<font color="#E5E5E5"> legitimate</font>

1204
00:48:05,750 --> 00:48:09,830
application was doing some kind of shady

1205
00:48:07,520 --> 00:48:11,509
stuff also<font color="#E5E5E5"> recall the Mac malware</font>

1206
00:48:09,830 --> 00:48:14,029
samples we talked about<font color="#E5E5E5"> earlier in this</font>

1207
00:48:11,510 --> 00:48:15,980
presentation none of that before as I

1208
00:48:14,030 --> 00:48:17,420
know where detected via static antivirus

1209
00:48:15,980 --> 00:48:18,980
signatures that is to say<font color="#E5E5E5"> if</font><font color="#CCCCCC"> you had</font>

1210
00:48:17,420 --> 00:48:21,410
antivirus running on your computer and

1211
00:48:18,980 --> 00:48:23,990
one of these samples infected you it

1212
00:48:21,410 --> 00:48:25,940
wouldn't detect it so this kind of

1213
00:48:23,990 --> 00:48:27,740
bothers me and you know we're all<font color="#E5E5E5"> aware</font>

1214
00:48:25,940 --> 00:48:29,750
of the limitations of antivirus products

1215
00:48:27,740 --> 00:48:31,819
right they only detect known samples and

1216
00:48:29,750 --> 00:48:34,610
they're trivial to bypass it's<font color="#E5E5E5"> even</font>

1217
00:48:31,820 --> 00:48:36,230
exasperated on max because while windows

1218
00:48:34,610 --> 00:48:38,600
AV products often have a lot of

1219
00:48:36,230 --> 00:48:40,700
behavioral heuristics and sometimes can

1220
00:48:38,600 --> 00:48:42,589
detect new samples talk to a lot of a

1221
00:48:40,700 --> 00:48:43,939
tea vendors you're basically like yeah

1222
00:48:42,590 --> 00:48:45,620
we don't put that much time and money

1223
00:48:43,940 --> 00:48:49,790
into our<font color="#CCCCCC"> Mac products so it's pretty</font>

1224
00:48:45,620 --> 00:48:51,830
much<font color="#E5E5E5"> a signature based system</font>

1225
00:48:49,790 --> 00:48:53,420
so I thought it'd be<font color="#CCCCCC"> cool to kind of</font>

1226
00:48:51,830 --> 00:48:55,670
look into some generic detections and

1227
00:48:53,420 --> 00:48:58,600
write some tools<font color="#CCCCCC"> that might allow us to</font>

1228
00:48:55,670 --> 00:49:01,160
detect new malware so the first<font color="#CCCCCC"> thing I</font>

1229
00:48:58,600 --> 00:49:03,620
kind of made the observation is that max

1230
00:49:01,160 --> 00:49:05,990
malware persists so all the samples we

1231
00:49:03,620 --> 00:49:08,000
talked<font color="#CCCCCC"> about</font><font color="#E5E5E5"> that monitor users via</font>

1232
00:49:05,990 --> 00:49:10,459
their webcam and mic as well as other

1233
00:49:08,000 --> 00:49:13,010
mac malware samples persists in some

1234
00:49:10,460 --> 00:49:15,560
manner meaning it automatically can be

1235
00:49:13,010 --> 00:49:17,840
reacts acute<font color="#E5E5E5"> adem the operating system</font>

1236
00:49:15,560 --> 00:49:19,640
restarts so the<font color="#E5E5E5"> first free tool</font><font color="#CCCCCC"> I wrote</font>

1237
00:49:17,840 --> 00:49:21,620
is called knock knock and if you're

1238
00:49:19,640 --> 00:49:24,680
familiar with<font color="#CCCCCC"> auto runs on Windows this</font>

1239
00:49:21,620 --> 00:49:25,970
is exactly the<font color="#CCCCCC"> same but</font><font color="#E5E5E5"> on Mac so I'll</font>

1240
00:49:24,680 --> 00:49:27,529
<font color="#CCCCCC">show you all the software that is</font>

1241
00:49:25,970 --> 00:49:29,930
persisted on your computer that<font color="#CCCCCC"> is</font>

1242
00:49:27,530 --> 00:49:32,920
automatically set to run both legitimate

1243
00:49:29,930 --> 00:49:35,060
ones and ones that<font color="#CCCCCC"> might be now</font><font color="#E5E5E5"> we're</font>

1244
00:49:32,920 --> 00:49:37,280
there<font color="#E5E5E5"> too I wrote is called block walk</font>

1245
00:49:35,060 --> 00:49:39,560
again this is free and what it does<font color="#CCCCCC"> is</font>

1246
00:49:37,280 --> 00:49:40,730
it monitors these persistence locations

1247
00:49:39,560 --> 00:49:43,700
you<font color="#CCCCCC"> can</font><font color="#E5E5E5"> kind of think of it as a</font>

1248
00:49:40,730 --> 00:49:46,160
firewall for persistence so anytime

1249
00:49:43,700 --> 00:49:48,680
something tries to persist itself on

1250
00:49:46,160 --> 00:49:50,600
your computer you will get a pop-up so

1251
00:49:48,680 --> 00:49:52,250
when you install<font color="#CCCCCC"> Shazam it'll say hey</font>

1252
00:49:50,600 --> 00:49:54,110
Shazam installed a component that's

1253
00:49:52,250 --> 00:49:55,970
automatically running and then you can

1254
00:49:54,110 --> 00:49:57,710
say oh<font color="#E5E5E5"> that's fine you know I'm</font><font color="#CCCCCC"> okay</font>

1255
00:49:55,970 --> 00:49:59,240
with<font color="#CCCCCC"> that or you can block it and the</font>

1256
00:49:57,710 --> 00:50:01,040
cool thing<font color="#CCCCCC"> about this tool since it's</font>

1257
00:49:59,240 --> 00:50:03,200
been released every piece<font color="#CCCCCC"> of malware</font>

1258
00:50:01,040 --> 00:50:05,270
that's been detected<font color="#E5E5E5"> after that that</font>

1259
00:50:03,200 --> 00:50:06,980
went to persist this tool would detect

1260
00:50:05,270 --> 00:50:08,900
because again it's not trying to detect

1261
00:50:06,980 --> 00:50:12,740
malware per se it's just detecting

1262
00:50:08,900 --> 00:50:13,730
persistence another thing that I<font color="#E5E5E5"> think</font>

1263
00:50:12,740 --> 00:50:16,330
we should<font color="#E5E5E5"> be able to eat ethically</font>

1264
00:50:13,730 --> 00:50:18,650
detect and thus prevent<font color="#CCCCCC"> his ransomware</font>

1265
00:50:16,330 --> 00:50:20,630
so I wrote a blog about this<font color="#E5E5E5"> last year</font>

1266
00:50:18,650 --> 00:50:22,540
called towards generic ransomware

1267
00:50:20,630 --> 00:50:24,920
detection and I made the observation

1268
00:50:22,540 --> 00:50:27,110
there rather obvious observation that

1269
00:50:24,920 --> 00:50:30,170
ransomware creates many encrypted files

1270
00:50:27,110 --> 00:50:33,410
often very quickly so<font color="#E5E5E5"> I wrote another</font>

1271
00:50:30,170 --> 00:50:36,020
free utility called a ransomware<font color="#E5E5E5"> whg re</font>

1272
00:50:33,410 --> 00:50:38,569
and what<font color="#E5E5E5"> it does</font><font color="#CCCCCC"> is it monitors the file</font>

1273
00:50:36,020 --> 00:50:40,940
system for<font color="#CCCCCC"> the rapid creation</font><font color="#E5E5E5"> of</font>

1274
00:50:38,570 --> 00:50:43,310
encrypted files by untrusted<font color="#E5E5E5"> processors</font>

1275
00:50:40,940 --> 00:50:46,010
then any time it sees this it just<font color="#CCCCCC"> pops</font>

1276
00:50:43,310 --> 00:50:47,690
up the<font color="#E5E5E5"> user and says hey this process of</font>

1277
00:50:46,010 --> 00:50:50,630
created you<font color="#E5E5E5"> know two or three encrypted</font>

1278
00:50:47,690 --> 00:50:52,130
files like are you cool<font color="#CCCCCC"> with this you</font>

1279
00:50:50,630 --> 00:50:55,040
know<font color="#E5E5E5"> and yes some users will collect yes</font>

1280
00:50:52,130 --> 00:50:57,230
but hopefully you know some users will

1281
00:50:55,040 --> 00:50:59,029
click no so again this is able to

1282
00:50:57,230 --> 00:51:00,770
generically detect all known versions of

1283
00:50:59,030 --> 00:51:02,799
Mac ransomware because again it's not

1284
00:51:00,770 --> 00:51:06,189
trying to detect the malware per se

1285
00:51:02,799 --> 00:51:08,319
but the behavior of it so these tools

1286
00:51:06,189 --> 00:51:10,178
are available on a Mac security website

1287
00:51:08,319 --> 00:51:12,069
they're all phrase I hope this isn't

1288
00:51:10,179 --> 00:51:14,439
sound like a sales pitch again these are

1289
00:51:12,069 --> 00:51:16,630
tools I run on my computer to protect it

1290
00:51:14,439 --> 00:51:19,269
especially when I travel figure sharing

1291
00:51:16,630 --> 00:51:22,269
is caring so we mentioned knock knock

1292
00:51:19,269 --> 00:51:25,209
walk walk there's some tools to detect

1293
00:51:22,269 --> 00:51:27,718
dial-in hijack scanners task explorers

1294
00:51:25,209 --> 00:51:29,919
kind of like process Explorer on Windows

1295
00:51:27,719 --> 00:51:31,479
on if you love<font color="#E5E5E5"> these tools I have</font><font color="#CCCCCC"> a</font>

1296
00:51:29,920 --> 00:51:35,559
patreon page so if you want<font color="#E5E5E5"> to support</font>

1297
00:51:31,479 --> 00:51:38,198
<font color="#E5E5E5">them I would be forever grateful</font><font color="#CCCCCC"> all</font>

1298
00:51:35,559 --> 00:51:40,209
<font color="#CCCCCC">right so that is a wrap thank you so</font>

1299
00:51:38,199 --> 00:51:41,650
<font color="#E5E5E5">much for attending my talk and again if</font>

1300
00:51:40,209 --> 00:51:44,948
you're interested in being a freelance

1301
00:51:41,650 --> 00:51:47,229
hacker researcher for<font color="#CCCCCC"> Cenac checkouts in</font>

1302
00:51:44,949 --> 00:51:48,400
a calm and we also have some cynic

1303
00:51:47,229 --> 00:51:50,348
t-shirts<font color="#E5E5E5"> I believe that we're going to</font>

1304
00:51:48,400 --> 00:51:52,390
hand out after the talk so we still<font color="#CCCCCC"> have</font>

1305
00:51:50,349 --> 00:51:54,789
about five minutes so if there's any

1306
00:51:52,390 --> 00:51:56,140
questions I can answer those now or you

1307
00:51:54,789 --> 00:51:57,219
can shoot<font color="#E5E5E5"> me an email or I'll be</font><font color="#CCCCCC"> around</font>

1308
00:51:56,140 --> 00:51:59,160
the rest<font color="#E5E5E5"> of the conference but again i</font>

1309
00:51:57,219 --> 00:52:05,650
really<font color="#E5E5E5"> appreciate</font><font color="#CCCCCC"> you attending my</font>

1310
00:51:59,160 --> 00:52:08,939
hour-long talk any questions well expect

1311
00:52:05,650 --> 00:52:08,939
oh yeah yes

1312
00:52:11,980 --> 00:52:20,560
hi thanks<font color="#E5E5E5"> for the talk so you mentioned</font>

1313
00:52:16,119 --> 00:52:23,440
about<font color="#CCCCCC"> chasm and how you did</font><font color="#E5E5E5"> it detected</font>

1314
00:52:20,560 --> 00:52:26,560
that it didn't turn to my car yep so

1315
00:52:23,440 --> 00:52:29,530
<font color="#CCCCCC">does they have an iOS app right yeah and</font>

1316
00:52:26,560 --> 00:52:32,500
whatever you<font color="#E5E5E5"> did you only did a Mac yep</font>

1317
00:52:29,530 --> 00:52:35,260
how<font color="#E5E5E5"> how different would be to make that</font>

1318
00:52:32,500 --> 00:52:39,040
<font color="#E5E5E5">work</font><font color="#CCCCCC"> on iOS is it the same components</font>

1319
00:52:35,260 --> 00:52:40,690
that<font color="#E5E5E5"> you use for webcam access and yeah</font>

1320
00:52:39,040 --> 00:52:43,390
as far<font color="#E5E5E5"> as I know the code is pretty much</font>

1321
00:52:40,690 --> 00:52:45,310
shared so you know their original email

1322
00:52:43,390 --> 00:52:48,069
said that they do it mostly for

1323
00:52:45,310 --> 00:52:50,529
performance on iOS I didn't<font color="#E5E5E5"> get into</font>

1324
00:52:48,070 --> 00:52:54,010
<font color="#E5E5E5">that but yeah it's kind of interesting</font>

1325
00:52:50,530 --> 00:52:56,260
but again<font color="#E5E5E5"> there's</font><font color="#CCCCCC"> a V Foundation</font><font color="#E5E5E5"> for iOS</font>

1326
00:52:54,010 --> 00:52:58,810
so like the sample codes in these slides

1327
00:52:56,260 --> 00:53:00,760
on<font color="#E5E5E5"> Stack Overflow for recording stuff</font>

1328
00:52:58,810 --> 00:53:02,740
are mostly actually for iOS because

1329
00:53:00,760 --> 00:53:04,690
people are more interested in doing that

1330
00:53:02,740 --> 00:53:07,000
what I believe though is I<font color="#CCCCCC"> think there's</font>

1331
00:53:04,690 --> 00:53:08,560
a pop up on iOS that's like Shazam wants

1332
00:53:07,000 --> 00:53:09,910
to<font color="#CCCCCC"> access your microphone but of course</font>

1333
00:53:08,560 --> 00:53:12,220
you're probably going to let it because

1334
00:53:09,910 --> 00:53:15,310
that's<font color="#E5E5E5"> what it does my understanding</font>

1335
00:53:12,220 --> 00:53:17,529
<font color="#CCCCCC">though is when you basically background</font>

1336
00:53:15,310 --> 00:53:19,509
<font color="#E5E5E5">the application it's going to stop</font>

1337
00:53:17,530 --> 00:53:21,640
recording<font color="#E5E5E5"> like the operating system</font>

1338
00:53:19,510 --> 00:53:23,470
basically stops it from executing but

1339
00:53:21,640 --> 00:53:24,910
while Shazam is in the foreground it

1340
00:53:23,470 --> 00:53:26,770
probably is just recording all the time

1341
00:53:24,910 --> 00:53:28,930
so I'm guessing that's kind of why it

1342
00:53:26,770 --> 00:53:31,300
happened on that they basically said<font color="#CCCCCC"> oh</font>

1343
00:53:28,930 --> 00:53:32,859
on iOS when someone's done using Shazam

1344
00:53:31,300 --> 00:53:34,540
they'll hit their home screen that will

1345
00:53:32,859 --> 00:53:36,940
background the shazam app which will

1346
00:53:34,540 --> 00:53:38,740
cause it to stop listening but on Mac

1347
00:53:36,940 --> 00:53:40,090
there's<font color="#E5E5E5"> not that really a concept of</font>

1348
00:53:38,740 --> 00:53:42,009
terminating or back rounding

1349
00:53:40,090 --> 00:53:45,040
applications so just kept pulling off

1350
00:53:42,010 --> 00:53:47,680
the mic I don't<font color="#E5E5E5"> think the Shazam ones</font>

1351
00:53:45,040 --> 00:53:50,350
always spying on you but I<font color="#CCCCCC"> mean I didn't</font>

1352
00:53:47,680 --> 00:53:52,930
<font color="#E5E5E5">think the Mac one was either sell be an</font>

1353
00:53:50,350 --> 00:53:55,930
interesting thing to look at and about

1354
00:53:52,930 --> 00:53:58,029
the performance issue how hard is it to

1355
00:53:55,930 --> 00:54:01,149
get<font color="#E5E5E5"> access to the mic every time you</font><font color="#CCCCCC"> use</font>

1356
00:53:58,030 --> 00:54:02,770
<font color="#CCCCCC">it once you do yeah exactly i think what</font>

1357
00:54:01,150 --> 00:54:04,840
their reasoning was it's probably they

1358
00:54:02,770 --> 00:54:07,090
started for iOS and ported it to<font color="#CCCCCC"> mac and</font>

1359
00:54:04,840 --> 00:54:09,369
just didn't want<font color="#E5E5E5"> to change the code but</font>

1360
00:54:07,090 --> 00:54:11,770
<font color="#E5E5E5">i guess the logic would be they</font><font color="#CCCCCC"> could</font>

1361
00:54:09,369 --> 00:54:14,109
continue listening the entire time and

1362
00:54:11,770 --> 00:54:16,359
<font color="#E5E5E5">have a buffer so when you say what song</font>

1363
00:54:14,109 --> 00:54:18,400
is this they could<font color="#CCCCCC"> preprocess the last</font>

1364
00:54:16,359 --> 00:54:20,720
previous 56 seconds of an<font color="#E5E5E5"> answer right</font>

1365
00:54:18,400 --> 00:54:23,240
away versus having to wait 10 seconds

1366
00:54:20,720 --> 00:54:24,680
you but<font color="#CCCCCC"> yeah you know I don't</font>

1367
00:54:23,240 --> 00:54:26,899
necessarily<font color="#E5E5E5"> really buy that I would</font>

1368
00:54:24,680 --> 00:54:29,990
rather like when i turn it off it be off

1369
00:54:26,900 --> 00:54:32,840
so<font color="#CCCCCC"> I'm glad that</font><font color="#E5E5E5"> they fixed it after the</font>

1370
00:54:29,990 --> 00:54:37,250
media gave him some shit wow so I guess

1371
00:54:32,840 --> 00:54:47,810
all's well that ends well and<font color="#CCCCCC"> the</font>

1372
00:54:37,250 --> 00:54:49,760
Christian good talk are your tools open

1373
00:54:47,810 --> 00:54:52,040
source that you've written that's a

1374
00:54:49,760 --> 00:54:54,740
<font color="#E5E5E5">great question so some of them are some</font>

1375
00:54:52,040 --> 00:54:59,330
of<font color="#E5E5E5"> them aren't the reason is just IP</font>

1376
00:54:54,740 --> 00:55:01,459
<font color="#E5E5E5">based stuff um so oversight is not but I</font>

1377
00:54:59,330 --> 00:55:03,350
try to really describe exactly how it

1378
00:55:01,460 --> 00:55:05,150
works moving forward I think i'm going

1379
00:55:03,350 --> 00:55:08,089
to<font color="#E5E5E5"> start sourcing my tools like I said</font>

1380
00:55:05,150 --> 00:55:09,800
mom patreon so I have<font color="#E5E5E5"> people donate and</font>

1381
00:55:08,090 --> 00:55:11,570
support so it's kind of like<font color="#E5E5E5"> you know</font>

1382
00:55:09,800 --> 00:55:13,610
<font color="#E5E5E5">there's kind of some more financial</font>

1383
00:55:11,570 --> 00:55:15,470
incentive any of the tools that have

1384
00:55:13,610 --> 00:55:18,590
Colonel components I open source all the

1385
00:55:15,470 --> 00:55:20,870
colonel components tools that persist or

1386
00:55:18,590 --> 00:55:22,280
have any network connections<font color="#CCCCCC"> I document</font>

1387
00:55:20,870 --> 00:55:24,380
all that it's<font color="#E5E5E5"> just a version check</font>

1388
00:55:22,280 --> 00:55:26,450
<font color="#E5E5E5">doesn't send any information about that</font>

1389
00:55:24,380 --> 00:55:28,220
but<font color="#CCCCCC"> again I understand</font><font color="#E5E5E5"> like security</font>

1390
00:55:26,450 --> 00:55:29,720
tools ideally would be more open source

1391
00:55:28,220 --> 00:55:31,910
so that's something I'm trending towards

1392
00:55:29,720 --> 00:55:34,490
because I<font color="#CCCCCC"> think I think that's kind of</font>

1393
00:55:31,910 --> 00:55:36,230
the way<font color="#E5E5E5"> to go and for some tools there's</font>

1394
00:55:34,490 --> 00:55:37,910
actually open source versions so for

1395
00:55:36,230 --> 00:55:39,860
example knock knock there's a

1396
00:55:37,910 --> 00:55:42,170
python-based version i wrote that's on

1397
00:55:39,860 --> 00:55:43,930
github the dye lib hijack scanner

1398
00:55:42,170 --> 00:55:46,250
there's a command line version as well

1399
00:55:43,930 --> 00:55:47,419
yeah like<font color="#CCCCCC"> I said</font><font color="#E5E5E5"> moving forward I'd like</font>

1400
00:55:46,250 --> 00:55:50,060
to do more and<font color="#CCCCCC"> more open</font><font color="#E5E5E5"> source stuff</font>

1401
00:55:47,420 --> 00:55:55,130
because I<font color="#CCCCCC"> think it's kind of the ideal</font>

1402
00:55:50,060 --> 00:55:58,100
scenario good question thank you any

1403
00:55:55,130 --> 00:55:59,870
other<font color="#CCCCCC"> questions or feel free to email</font>

1404
00:55:58,100 --> 00:56:01,130
him as you said if<font color="#E5E5E5"> you're interested</font><font color="#CCCCCC"> to</font>

1405
00:55:59,870 --> 00:56:03,440
join a red team or have further

1406
00:56:01,130 --> 00:56:04,640
questions yeah fuck me anytime thank you

1407
00:56:03,440 --> 00:56:09,260
thank<font color="#CCCCCC"> you very much</font>

1408
00:56:04,640 --> 00:56:09,259
[Applause]

