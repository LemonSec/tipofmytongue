1
00:00:10,800 --> 00:00:19,619
<font color="#E5E5E5">right thank you all for</font><font color="#CCCCCC"> coming to the</font>

2
00:00:12,960 --> 00:00:21,360
last talk of the session so I'm tribal

3
00:00:19,619 --> 00:00:23,540
Hudson with two sigma investments and

4
00:00:21,360 --> 00:00:27,419
for the<font color="#E5E5E5"> past several years I've</font><font color="#CCCCCC"> been</font>

5
00:00:23,540 --> 00:00:31,490
taking apart firmware and now I need<font color="#CCCCCC"> to</font>

6
00:00:27,419 --> 00:00:31,490
<font color="#E5E5E5">take apart my take about this clicker</font>

7
00:00:35,210 --> 00:00:41,550
<font color="#CCCCCC">all right so I've been working on for</font>

8
00:00:38,340 --> 00:00:44,879
more security research two years ago I

9
00:00:41,550 --> 00:00:47,640
<font color="#E5E5E5">presented at ccc</font><font color="#CCCCCC"> Thunderstrike which was</font>

10
00:00:44,879 --> 00:00:50,849
the first mount first firmware rootkit

11
00:00:47,640 --> 00:00:53,699
for macbooks that allowed an attacker to

12
00:00:50,850 --> 00:00:56,820
override<font color="#CCCCCC"> the motherboard boot firmware</font>

13
00:00:53,699 --> 00:01:00,690
<font color="#E5E5E5">the offender bolt device year after that</font>

14
00:00:56,820 --> 00:01:03,420
<font color="#E5E5E5">I teamed up with Zino and corey from</font>

15
00:01:00,690 --> 00:01:06,320
<font color="#E5E5E5">Legba core and we ported a bunch of</font>

16
00:01:03,420 --> 00:01:09,360
their UEFI vulnerabilities over to

17
00:01:06,320 --> 00:01:12,889
apple's efi firmware and<font color="#E5E5E5"> we're able to</font>

18
00:01:09,360 --> 00:01:15,390
show that that common code base allowed

19
00:01:12,890 --> 00:01:18,570
funner abilities to be<font color="#E5E5E5"> portable between</font>

20
00:01:15,390 --> 00:01:20,700
different systems but my real passion

21
00:01:18,570 --> 00:01:22,800
isn't just breaking things it's taken

22
00:01:20,700 --> 00:01:25,740
apart understanding<font color="#CCCCCC"> how they work and</font>

23
00:01:22,800 --> 00:01:27,929
then building systems open systems that

24
00:01:25,740 --> 00:01:29,910
people can extend and use for<font color="#CCCCCC"> what</font><font color="#E5E5E5"> they</font>

25
00:01:27,930 --> 00:01:32,460
want to do that's why I'm<font color="#E5E5E5"> really excited</font>

26
00:01:29,910 --> 00:01:36,179
to be talking to say about heads which

27
00:01:32,460 --> 00:01:39,419
<font color="#CCCCCC">is a open source firmware for commodity</font>

28
00:01:36,180 --> 00:01:42,090
laptops and servers the name is sort of

29
00:01:39,420 --> 00:01:45,990
a play on<font color="#CCCCCC"> tales which is great if you</font>

30
00:01:42,090 --> 00:01:48,630
want to have a system<font color="#E5E5E5"> where the you have</font>

31
00:01:45,990 --> 00:01:50,550
no state and there's no<font color="#E5E5E5"> nothing logged</font>

32
00:01:48,630 --> 00:01:52,140
on it heads is sort of the opposite of

33
00:01:50,550 --> 00:01:54,170
<font color="#E5E5E5">that it's when you want to preserve the</font>

34
00:01:52,140 --> 00:01:56,340
state and you want to have some

35
00:01:54,170 --> 00:01:59,400
guarantees of the<font color="#E5E5E5"> integrity of the</font>

36
00:01:56,340 --> 00:02:01,560
system so let's back up with just a

37
00:01:59,400 --> 00:02:05,820
equipment and talk about why is for more

38
00:02:01,560 --> 00:02:07,620
security so important and the<font color="#CCCCCC"> Intel</font>

39
00:02:05,820 --> 00:02:09,959
advanced threat research has given a

40
00:02:07,620 --> 00:02:12,360
bunch<font color="#E5E5E5"> of great talks showing what can</font>

41
00:02:09,959 --> 00:02:14,489
firmware but abilities do or firm or

42
00:02:12,360 --> 00:02:16,349
malware do it controls the system from

43
00:02:14,489 --> 00:02:20,550
that very person struction when it

44
00:02:16,349 --> 00:02:22,769
starts out which allows it to infect the

45
00:02:20,550 --> 00:02:24,420
<font color="#E5E5E5">OS or the hypervisor a</font>

46
00:02:22,770 --> 00:02:27,630
and bypass pretty much any sort of

47
00:02:24,420 --> 00:02:30,959
security scanning it can hide in sm m

48
00:02:27,630 --> 00:02:35,340
it's in a very<font color="#E5E5E5"> very powerful position of</font>

49
00:02:30,960 --> 00:02:38,550
her persistence and some vendors are

50
00:02:35,340 --> 00:02:40,380
even using this to ensure<font color="#CCCCCC"> that your</font>

51
00:02:38,550 --> 00:02:41,970
<font color="#CCCCCC">computer's</font><font color="#E5E5E5"> always have their their</font>

52
00:02:40,380 --> 00:02:45,990
bloatware installed so even if you do a

53
00:02:41,970 --> 00:02:49,530
clean install it reinstalls itself into

54
00:02:45,990 --> 00:02:51,960
<font color="#CCCCCC">the OS we also know that nation states</font>

55
00:02:49,530 --> 00:02:53,790
are taking advantage<font color="#CCCCCC"> of these sorts of</font>

56
00:02:51,960 --> 00:02:57,150
things<font color="#E5E5E5"> and that they're buying</font>

57
00:02:53,790 --> 00:03:02,519
vulnerabilities from exploit vendors who

58
00:02:57,150 --> 00:03:05,910
are<font color="#E5E5E5"> selling them rootkits and things to</font>

59
00:03:02,520 --> 00:03:08,940
run<font color="#E5E5E5"> in the firmware and we've also we</font>

60
00:03:05,910 --> 00:03:10,230
had we now have evidence that<font color="#E5E5E5"> the sum of</font>

61
00:03:08,940 --> 00:03:13,160
these nation-state adversaries are

62
00:03:10,230 --> 00:03:15,660
watching conferences and re implementing

63
00:03:13,160 --> 00:03:17,730
the security vulnerabilities that<font color="#CCCCCC"> are</font>

64
00:03:15,660 --> 00:03:21,090
being discussed<font color="#E5E5E5"> there so even ones that</font>

65
00:03:17,730 --> 00:03:23,700
<font color="#E5E5E5">are responsibly disclosed and patched by</font>

66
00:03:21,090 --> 00:03:27,330
the vendors in a few months can be

67
00:03:23,700 --> 00:03:31,380
<font color="#CCCCCC">turned into a weaponized toolkit by</font>

68
00:03:27,330 --> 00:03:33,600
these adversaries and they know<font color="#CCCCCC"> that</font>

69
00:03:31,380 --> 00:03:36,000
even<font color="#E5E5E5"> though it has been patched in the</font>

70
00:03:33,600 --> 00:03:38,489
firmware in the vendors official

71
00:03:36,000 --> 00:03:41,100
firmware tree it may be months or years

72
00:03:38,490 --> 00:03:44,370
or<font color="#E5E5E5"> Never that it actually gets installed</font>

73
00:03:41,100 --> 00:03:47,640
in the user system and one of the

74
00:03:44,370 --> 00:03:50,700
reasons<font color="#CCCCCC"> for that</font><font color="#E5E5E5"> is there are four or</font>

75
00:03:47,640 --> 00:03:54,989
five companies between Intel's reference

76
00:03:50,700 --> 00:03:58,170
UEFI implementation the<font color="#CCCCCC"> ed k2 tree and a</font>

77
00:03:54,990 --> 00:04:00,420
user's machine they're independent bios

78
00:03:58,170 --> 00:04:02,730
vendors their device manufacturers there

79
00:04:00,420 --> 00:04:06,660
are OEMs and their value added resellers

80
00:04:02,730 --> 00:04:08,549
all of whom have<font color="#E5E5E5"> to coordinate patches</font>

81
00:04:06,660 --> 00:04:10,200
and QA to actually get<font color="#E5E5E5"> something out</font>

82
00:04:08,550 --> 00:04:12,360
there and<font color="#E5E5E5"> this means that a lot of</font>

83
00:04:10,200 --> 00:04:17,608
<font color="#E5E5E5">firmware vulnerabilities just never get</font>

84
00:04:12,360 --> 00:04:19,049
patched in the wild and with this efi

85
00:04:17,608 --> 00:04:21,000
firmware<font color="#CCCCCC"> I was an enormous amount of</font>

86
00:04:19,048 --> 00:04:25,520
complexity<font color="#CCCCCC"> its millions</font><font color="#E5E5E5"> of lines of code</font>

87
00:04:21,000 --> 00:04:28,950
and it was intended<font color="#CCCCCC"> to replace the</font>

88
00:04:25,520 --> 00:04:32,640
legacy BIOS the<font color="#CCCCCC"> forty-year-old</font><font color="#E5E5E5"> by us</font>

89
00:04:28,950 --> 00:04:35,139
from the 1970s and it brought with it a

90
00:04:32,640 --> 00:04:36,340
huge amount of

91
00:04:35,139 --> 00:04:39,909
complexity an entire operating system

92
00:04:36,340 --> 00:04:43,479
worth of complexity but didn't<font color="#CCCCCC"> really</font>

93
00:04:39,909 --> 00:04:44,650
provide any new features so a lot of the

94
00:04:43,479 --> 00:04:49,180
open source community has never been

95
00:04:44,650 --> 00:04:52,508
<font color="#E5E5E5">very happy</font><font color="#CCCCCC"> with it the hids philosophy</font>

96
00:04:49,180 --> 00:04:53,889
is that firmware it needs to be open it

97
00:04:52,509 --> 00:04:57,550
needs to be<font color="#CCCCCC"> flexible so</font><font color="#E5E5E5"> that we can</font>

98
00:04:53,889 --> 00:04:59,259
adapt it to to our own needs it<font color="#CCCCCC"> needs to</font>

99
00:04:57,550 --> 00:05:01,180
be<font color="#E5E5E5"> something that is well tested and</font>

100
00:04:59,259 --> 00:05:03,909
understood the ability and on something

101
00:05:01,180 --> 00:05:06,999
like Linux makes that possible where we

102
00:05:03,909 --> 00:05:09,279
use Linux and for all of<font color="#CCCCCC"> our</font><font color="#E5E5E5"> other tasks</font>

103
00:05:06,999 --> 00:05:12,819
by we should use it<font color="#E5E5E5"> in our firmware as</font>

104
00:05:09,279 --> 00:05:14,949
well and for the<font color="#E5E5E5"> security it needs to be</font>

105
00:05:12,819 --> 00:05:16,990
built reproducibly and it needs<font color="#E5E5E5"> to be</font>

106
00:05:14,949 --> 00:05:18,520
measured<font color="#E5E5E5"> during the boot process so that</font>

107
00:05:16,990 --> 00:05:20,500
we can have cryptographic guarantees

108
00:05:18,520 --> 00:05:25,359
that what we<font color="#CCCCCC"> are running is what we</font>

109
00:05:20,500 --> 00:05:28,270
think we have built so heads is built

110
00:05:25,360 --> 00:05:32,139
with two major components the the Corps

111
00:05:28,270 --> 00:05:34,299
boot free firmware and then the Linux

112
00:05:32,139 --> 00:05:37,449
kernel that lives in the rom on the

113
00:05:34,300 --> 00:05:39,789
motherboard and then surrounding that is

114
00:05:37,449 --> 00:05:41,289
a lot of<font color="#E5E5E5"> security research that the the</font>

115
00:05:39,789 --> 00:05:45,430
wider community is doing<font color="#E5E5E5"> and were able</font>

116
00:05:41,289 --> 00:05:48,580
to incorporate into the firmware using

117
00:05:45,430 --> 00:05:51,610
Linux in the rom is not a new idea it

118
00:05:48,580 --> 00:05:53,409
goes back<font color="#CCCCCC"> to the</font><font color="#E5E5E5"> mid-1990s I was at</font>

119
00:05:51,610 --> 00:05:55,529
Sandia National Labs and we were

120
00:05:53,409 --> 00:05:58,000
building large-scale parallel machines

121
00:05:55,529 --> 00:06:00,069
so which were typed custom tightly

122
00:05:58,000 --> 00:06:03,909
coupled some which were<font color="#CCCCCC"> just clusters of</font>

123
00:06:00,069 --> 00:06:06,580
<font color="#E5E5E5">Linux workstations and on the clusters</font>

124
00:06:03,909 --> 00:06:09,729
we were really frustrated dealing<font color="#E5E5E5"> with</font>

125
00:06:06,580 --> 00:06:13,839
TFC p and trying to get<font color="#E5E5E5"> these machines</font>

126
00:06:09,729 --> 00:06:16,870
to boot over<font color="#CCCCCC"> p XE our</font><font color="#E5E5E5"> colleague Ron</font>

127
00:06:13,839 --> 00:06:20,379
<font color="#E5E5E5">Minich at Los Alamos had similar</font>

128
00:06:16,870 --> 00:06:22,300
concerns and he looked at what the<font color="#E5E5E5"> BIOS</font>

129
00:06:20,379 --> 00:06:24,129
was doing and realized<font color="#E5E5E5"> that it was</font>

130
00:06:22,300 --> 00:06:27,279
duplicated all of the initialization

131
00:06:24,129 --> 00:06:29,879
that Linux was doing so he built a

132
00:06:27,279 --> 00:06:34,089
custom firmware for his cluster that

133
00:06:29,879 --> 00:06:35,770
just booted straight into Linux and he

134
00:06:34,089 --> 00:06:39,580
called that<font color="#CCCCCC"> Linux</font><font color="#E5E5E5"> bios that's the</font>

135
00:06:35,770 --> 00:06:44,799
logical name part and in 2008 it was

136
00:06:39,580 --> 00:06:46,959
renamed<font color="#E5E5E5"> to</font><font color="#CCCCCC"> coreboot and when he moved to</font>

137
00:06:44,800 --> 00:06:47,830
google it was used to power all the

138
00:06:46,959 --> 00:06:50,200
Chromebooks

139
00:06:47,830 --> 00:06:53,770
so the Chromebooks are some of the only

140
00:06:50,200 --> 00:06:57,820
non UEFI exceed<font color="#CCCCCC"> six laptops out there</font>

141
00:06:53,770 --> 00:07:01,090
and they have done an amazing job on the

142
00:06:57,820 --> 00:07:03,130
security aspects that they have features

143
00:07:01,090 --> 00:07:05,739
like<font color="#E5E5E5"> right</font><font color="#CCCCCC"> protect screws on the</font><font color="#E5E5E5"> on the</font>

144
00:07:03,130 --> 00:07:08,260
firmware to prevent software accidental

145
00:07:05,740 --> 00:07:10,720
or malicious software rights they have

146
00:07:08,260 --> 00:07:12,190
signed boot chains they have

147
00:07:10,720 --> 00:07:14,350
cryptographically protection file

148
00:07:12,190 --> 00:07:17,440
systems Chromebooks are doing a great

149
00:07:14,350 --> 00:07:19,660
<font color="#CCCCCC">job Alex stamas from facebook said</font>

150
00:07:17,440 --> 00:07:22,600
unless you are a security expert you

151
00:07:19,660 --> 00:07:24,700
should probably<font color="#E5E5E5"> use in a Chromebook but</font>

152
00:07:22,600 --> 00:07:28,540
of<font color="#E5E5E5"> course we're security experts here so</font>

153
00:07:24,700 --> 00:07:32,729
we want we<font color="#CCCCCC"> want to do this ourselves so</font>

154
00:07:28,540 --> 00:07:37,090
we<font color="#E5E5E5"> want to</font><font color="#CCCCCC"> put coreboot on our machines</font>

155
00:07:32,730 --> 00:07:38,500
coreboot has three stages that it goes

156
00:07:37,090 --> 00:07:42,700
through<font color="#E5E5E5"> it it has a very small boot</font>

157
00:07:38,500 --> 00:07:45,880
block that initializes the TPM and does

158
00:07:42,700 --> 00:07:49,090
some measurements and then prepares a

159
00:07:45,880 --> 00:07:52,540
what's<font color="#CCCCCC"> called caches</font><font color="#E5E5E5"> Ram mode it then</font>

160
00:07:49,090 --> 00:07:55,840
runs a ROM stage in that mode that is

161
00:07:52,540 --> 00:08:00,100
<font color="#CCCCCC">able to initialize</font><font color="#E5E5E5"> DRAM and do some</font>

162
00:07:55,840 --> 00:08:02,560
early chips that<font color="#CCCCCC"> admit and it then sets</font>

163
00:08:00,100 --> 00:08:07,150
up a few tables for what it finds and

164
00:08:02,560 --> 00:08:09,280
jumps into a payload so unlike UEFI that

165
00:08:07,150 --> 00:08:11,200
has device drivers for<font color="#CCCCCC"> your neck and</font>

166
00:08:09,280 --> 00:08:14,830
your hard drive controller and your

167
00:08:11,200 --> 00:08:18,310
video card and your USB cord<font color="#CCCCCC"> route is</font>

168
00:08:14,830 --> 00:08:21,340
tiny it's one percent of the size of<font color="#E5E5E5"> the</font>

169
00:08:18,310 --> 00:08:26,050
UEFI executable so the trusted computing

170
00:08:21,340 --> 00:08:27,580
base TCB is much much smaller after<font color="#CCCCCC"> it</font>

171
00:08:26,050 --> 00:08:29,770
has done that initialization it jumps

172
00:08:27,580 --> 00:08:32,650
into a payload and it is further

173
00:08:29,770 --> 00:08:35,049
relatively agnostic about the payload it

174
00:08:32,650 --> 00:08:39,159
in the case of heads it jumps into the

175
00:08:35,049 --> 00:08:40,990
heads<font color="#E5E5E5"> Linux kernel and roughly you know</font>

176
00:08:39,159 --> 00:08:43,120
one second or so after<font color="#CCCCCC"> the Machine boots</font>

177
00:08:40,990 --> 00:08:45,670
up works me after your power on<font color="#E5E5E5"> the</font>

178
00:08:43,120 --> 00:08:49,260
machine it's able to<font color="#E5E5E5"> drop you into an</font>

179
00:08:45,670 --> 00:08:52,839
interactive shell running out of ROM and

180
00:08:49,260 --> 00:08:55,260
at this point we can now start to write

181
00:08:52,840 --> 00:08:57,550
our initialization<font color="#CCCCCC"> scripts and are</font>

182
00:08:55,260 --> 00:08:59,410
defined what boot device we want to use

183
00:08:57,550 --> 00:09:01,120
and all of the sorts of things<font color="#E5E5E5"> that</font>

184
00:08:59,410 --> 00:09:03,579
biases usually do but

185
00:09:01,120 --> 00:09:07,029
do it with the power<font color="#E5E5E5"> of Linux rather</font>

186
00:09:03,580 --> 00:09:11,710
than whatever limited functionality is

187
00:09:07,029 --> 00:09:14,290
in UEFI so we can boot from a fully

188
00:09:11,710 --> 00:09:16,060
encrypted drive we can boot from any

189
00:09:14,290 --> 00:09:18,699
number of file systems that Linux

190
00:09:16,060 --> 00:09:22,119
supports we can contact network services

191
00:09:18,700 --> 00:09:27,070
to determine what our boot policy is or

192
00:09:22,120 --> 00:09:29,380
to fetch kernels meanwhile UEFI supports

193
00:09:27,070 --> 00:09:34,240
booting from unencrypted fat file

194
00:09:29,380 --> 00:09:38,260
systems so it's still a million lines of

195
00:09:34,240 --> 00:09:40,810
code in UEFI I which is you know a

196
00:09:38,260 --> 00:09:43,960
shockingly large amount of code for just

197
00:09:40,810 --> 00:09:47,079
system initialization and it doesn't

198
00:09:43,960 --> 00:09:51,100
have a huge number of contributors it

199
00:09:47,080 --> 00:09:53,560
doesn't have a sort of the time<font color="#E5E5E5"> on the</font>

200
00:09:51,100 --> 00:09:55,960
<font color="#E5E5E5">internet that Linux does that Linux is</font>

201
00:09:53,560 --> 00:09:59,199
device drivers and network stack are

202
00:09:55,960 --> 00:10:01,600
given hammered every single day by

203
00:09:59,200 --> 00:10:05,050
attackers and defenders and they're

204
00:10:01,600 --> 00:10:07,600
really well protected there are bugs

205
00:10:05,050 --> 00:10:10,959
that show<font color="#CCCCCC"> up but they tend to get fixed</font>

206
00:10:07,600 --> 00:10:13,390
fairly quickly and they tend to be you

207
00:10:10,959 --> 00:10:15,520
know fairly well understood there's a

208
00:10:13,390 --> 00:10:19,360
same insecurities that you know with

209
00:10:15,520 --> 00:10:23,110
enough eyes all bugs are shallow and you

210
00:10:19,360 --> 00:10:25,540
know<font color="#E5E5E5"> court UEFI has 100 something</font>

211
00:10:23,110 --> 00:10:33,160
contributors and github just gives up

212
00:10:25,540 --> 00:10:35,949
and says Linux<font color="#E5E5E5"> has infinite number so in</font>

213
00:10:33,160 --> 00:10:39,219
<font color="#E5E5E5">addition to being</font><font color="#CCCCCC"> able to have</font><font color="#E5E5E5"> all</font><font color="#CCCCCC"> those</font>

214
00:10:35,950 --> 00:10:41,500
contributors we can tailor the<font color="#CCCCCC"> corbett</font>

215
00:10:39,220 --> 00:10:44,770
installation to our individual

216
00:10:41,500 --> 00:10:46,660
applications that if if the<font color="#E5E5E5"> vendor</font>

217
00:10:44,770 --> 00:10:49,150
doesn't want to support your raid

218
00:10:46,660 --> 00:10:52,650
controller are gearing<font color="#E5E5E5"> Nick or something</font>

219
00:10:49,150 --> 00:10:55,300
you're pretty much out of luck but with

220
00:10:52,650 --> 00:10:59,050
with<font color="#E5E5E5"> coreboot and</font><font color="#CCCCCC"> Linux we can build</font>

221
00:10:55,300 --> 00:11:03,459
custom versions for tailored for our own

222
00:10:59,050 --> 00:11:07,810
machines so the the third<font color="#E5E5E5"> major</font>

223
00:11:03,459 --> 00:11:10,869
component of of heads is a tool called<font color="#E5E5E5"> K</font>

224
00:11:07,810 --> 00:11:13,900
exact which also goes back to the<font color="#E5E5E5"> Linux</font>

225
00:11:10,870 --> 00:11:14,649
bios days Erik Biedermann wanted a way

226
00:11:13,900 --> 00:11:19,509
to quickly read

227
00:11:14,649 --> 00:11:23,079
<font color="#E5E5E5">his diskless clusters so he hacked up a</font>

228
00:11:19,509 --> 00:11:28,839
way<font color="#E5E5E5"> to start running a new kernel from</font>

229
00:11:23,079 --> 00:11:32,378
within when they start you out so in the

230
00:11:28,839 --> 00:11:34,720
heads an<font color="#E5E5E5"> it script it figures out what</font>

231
00:11:32,379 --> 00:11:37,569
Colonel you want to use what initial

232
00:11:34,720 --> 00:11:42,339
<font color="#CCCCCC">ramdisk and then does a</font><font color="#E5E5E5"> k exact load and</font>

233
00:11:37,569 --> 00:11:45,339
then k exec execute which starts that

234
00:11:42,339 --> 00:11:47,170
Colonel running and how it figures out

235
00:11:45,339 --> 00:11:48,610
which kernel to run or which ended

236
00:11:47,170 --> 00:11:50,110
Graham disks use or what Colonel

237
00:11:48,610 --> 00:11:53,230
parameters are completely flexible

238
00:11:50,110 --> 00:11:55,300
because it's it's linux it's not some

239
00:11:53,230 --> 00:12:00,309
limited vendor proprietary than your

240
00:11:55,300 --> 00:12:02,589
<font color="#CCCCCC">bios so now</font><font color="#E5E5E5"> that we have this flexible</font>

241
00:12:00,309 --> 00:12:05,589
way to bring the system up how do we

242
00:12:02,589 --> 00:12:08,699
<font color="#E5E5E5">actually protect it how do we deal with</font>

243
00:12:05,589 --> 00:12:12,790
the fact that<font color="#CCCCCC"> yeah</font><font color="#E5E5E5"> this is a dangerous</font>

244
00:12:08,699 --> 00:12:15,969
time for computers and before<font color="#CCCCCC"> we</font><font color="#E5E5E5"> go too</font>

245
00:12:12,790 --> 00:12:18,399
deep down the security rabbit hole you

246
00:12:15,970 --> 00:12:20,709
know I what I've echo<font color="#E5E5E5"> what Steph said</font>

247
00:12:18,399 --> 00:12:23,730
that you know your threat model is not

248
00:12:20,709 --> 00:12:26,170
my threat model that we all<font color="#CCCCCC"> have our own</font>

249
00:12:23,730 --> 00:12:28,660
individual threads that<font color="#E5E5E5"> we're concerned</font>

250
00:12:26,170 --> 00:12:31,990
<font color="#E5E5E5">about you</font><font color="#CCCCCC"> know what data were trying to</font>

251
00:12:28,660 --> 00:12:34,959
<font color="#CCCCCC">protect depends</font><font color="#E5E5E5"> on who were going up</font>

252
00:12:31,990 --> 00:12:37,089
against and again nice thing about open

253
00:12:34,959 --> 00:12:41,758
source is we can tailor a lot of these

254
00:12:37,089 --> 00:12:41,759
<font color="#CCCCCC">things to individual threat models</font>

255
00:12:41,910 --> 00:12:47,889
<font color="#CCCCCC">Johanna rutowski</font><font color="#E5E5E5"> pointed out that</font>

256
00:12:44,559 --> 00:12:49,360
basically every device in a modern

257
00:12:47,889 --> 00:12:51,370
system has some kind of programmable

258
00:12:49,360 --> 00:12:56,559
firmware and might<font color="#CCCCCC"> be trying to</font><font color="#E5E5E5"> attack</font>

259
00:12:51,370 --> 00:12:59,350
the boot process and in a lot of cases

260
00:12:56,559 --> 00:13:02,139
the problems that firmware assumes the

261
00:12:59,350 --> 00:13:03,730
hardware is trusted again advanced

262
00:13:02,139 --> 00:13:07,420
throughout research presented in

263
00:13:03,730 --> 00:13:09,850
Brussels last month a really great

264
00:13:07,420 --> 00:13:11,229
attack showing that you know firmware

265
00:13:09,850 --> 00:13:16,119
assumes the hardware is doing the right

266
00:13:11,230 --> 00:13:18,699
thing so some some folks like Peters

267
00:13:16,119 --> 00:13:20,529
tujhe suggest we should just remove all

268
00:13:18,699 --> 00:13:23,949
the hardware we can't trust from the

269
00:13:20,529 --> 00:13:26,370
machine he has a great<font color="#E5E5E5"> guide from 30</font><font color="#CCCCCC"> C 3</font>

270
00:13:23,949 --> 00:13:28,479
a few years ago showing how<font color="#E5E5E5"> to</font>

271
00:13:26,370 --> 00:13:30,040
disassemble a thinkpad

272
00:13:28,480 --> 00:13:34,800
get rid of everything that that we can't

273
00:13:30,040 --> 00:13:37,060
<font color="#E5E5E5">control that we can't trust</font><font color="#CCCCCC"> Intel</font>

274
00:13:34,800 --> 00:13:40,209
recommends turning on features like the

275
00:13:37,060 --> 00:13:41,800
iommu in the firmware to prevent rogue

276
00:13:40,209 --> 00:13:44,638
devices from being able<font color="#E5E5E5"> to interfere at</font>

277
00:13:41,800 --> 00:13:50,290
the boot process but unfortunately most

278
00:13:44,639 --> 00:13:52,959
UEFI vendors haven't implemented this in

279
00:13:50,290 --> 00:13:55,540
the case of core boot it it hasn't

280
00:13:52,959 --> 00:13:58,138
brought up the PCIe bridges with less

281
00:13:55,540 --> 00:14:00,189
mastering so it's not vulnerable but

282
00:13:58,139 --> 00:14:02,199
<font color="#CCCCCC">when it hands</font><font color="#E5E5E5"> over a little bit to the</font>

283
00:14:00,190 --> 00:14:05,230
Linux kernel the Linux kernel needs to

284
00:14:02,199 --> 00:14:07,149
turn on the iommu and again it's open

285
00:14:05,230 --> 00:14:09,490
source we<font color="#E5E5E5"> can just enable that feature</font>

286
00:14:07,149 --> 00:14:12,820
we can test it on our<font color="#CCCCCC"> hardware we can</font>

287
00:14:09,490 --> 00:14:15,579
validate<font color="#CCCCCC"> it and we can we can build</font>

288
00:14:12,820 --> 00:14:20,459
firmware for our systems that have this

289
00:14:15,579 --> 00:14:23,649
sort<font color="#E5E5E5"> of security feature enabled another</font>

290
00:14:20,459 --> 00:14:29,709
attack vector is option roms which are

291
00:14:23,649 --> 00:14:34,260
executable code loaded from<font color="#CCCCCC"> pcie or PCI</font>

292
00:14:29,709 --> 00:14:37,119
devices so this<font color="#E5E5E5"> is a slide from my</font>

293
00:14:34,260 --> 00:14:40,360
<font color="#CCCCCC">Thunderstrike talk where</font><font color="#E5E5E5"> I revealed my</font>

294
00:14:37,120 --> 00:14:44,860
<font color="#E5E5E5">file called encryption password to a few</font>

295
00:14:40,360 --> 00:14:48,160
thousand people and as you know points

296
00:14:44,860 --> 00:14:50,260
out this has been<font color="#CCCCCC"> a problem since 2012</font>

297
00:14:48,160 --> 00:14:52,870
with snares talk it<font color="#E5E5E5"> actually goes back</font>

298
00:14:50,260 --> 00:14:56,139
<font color="#CCCCCC">even further John he's Minh complained</font>

299
00:14:52,870 --> 00:14:58,660
about<font color="#CCCCCC"> it in 2007 at black hat he pointed</font>

300
00:14:56,139 --> 00:15:01,690
out<font color="#E5E5E5"> that option roms are basically a</font>

301
00:14:58,660 --> 00:15:06,130
easy way to get persistence before the

302
00:15:01,690 --> 00:15:08,079
colonel starts again with open source we

303
00:15:06,130 --> 00:15:12,639
can<font color="#E5E5E5"> choose whether or not we want</font><font color="#CCCCCC"> to</font>

304
00:15:08,079 --> 00:15:15,130
enable this sort of functionality as the

305
00:15:12,639 --> 00:15:16,750
Corps boot config file says if you're

306
00:15:15,130 --> 00:15:19,899
concerned about<font color="#E5E5E5"> security you probably</font>

307
00:15:16,750 --> 00:15:22,990
want to<font color="#E5E5E5"> turn this feature on it might</font>

308
00:15:19,899 --> 00:15:24,519
break some things there<font color="#CCCCCC"> some devices</font>

309
00:15:22,990 --> 00:15:27,579
perhaps you want<font color="#CCCCCC"> to load an option</font><font color="#E5E5E5"> ROM</font>

310
00:15:24,519 --> 00:15:30,339
from but you<font color="#CCCCCC"> can</font><font color="#E5E5E5"> validate it you can</font>

311
00:15:27,579 --> 00:15:32,699
test it and you can decide if<font color="#E5E5E5"> this if</font>

312
00:15:30,339 --> 00:15:35,410
that security trade-off is worth it<font color="#E5E5E5"> and</font>

313
00:15:32,699 --> 00:15:39,099
in general you<font color="#CCCCCC"> don't need option roms</font>

314
00:15:35,410 --> 00:15:41,620
anymore once the Linux kernel is up and

315
00:15:39,100 --> 00:15:46,660
running it uses its own internal drive

316
00:15:41,620 --> 00:15:48,490
servers for all of these devices another

317
00:15:46,660 --> 00:15:50,380
place that we're taking advantage of

318
00:15:48,490 --> 00:15:52,150
good work has been<font color="#CCCCCC"> bettered by</font><font color="#E5E5E5"> the Corps</font>

319
00:15:50,380 --> 00:15:55,470
boot experiment by<font color="#E5E5E5"> the Chromebook team</font>

320
00:15:52,150 --> 00:15:59,770
is enabling<font color="#E5E5E5"> the non-volatile</font>

321
00:15:55,470 --> 00:16:03,190
write-protect bits on the spy flash so

322
00:15:59,770 --> 00:16:08,439
that that<font color="#CCCCCC"> food block and ROM stage of</font>

323
00:16:03,190 --> 00:16:10,900
coreboot can be made immutable and this

324
00:16:08,440 --> 00:16:12,910
completely eliminates an entire class of

325
00:16:10,900 --> 00:16:17,199
software based attacks against the

326
00:16:12,910 --> 00:16:19,959
<font color="#CCCCCC">system so Thunderstrike light</font><font color="#E5E5E5"> either</font>

327
00:16:17,200 --> 00:16:22,800
<font color="#E5E5E5">Dark Jedi</font><font color="#CCCCCC"> Speed Racer</font><font color="#E5E5E5"> none of these</font>

328
00:16:19,960 --> 00:16:25,960
vulnerabilities would be able<font color="#CCCCCC"> to</font>

329
00:16:22,800 --> 00:16:27,969
overwrite that boot block because you

330
00:16:25,960 --> 00:16:33,750
would need physical presence in order to

331
00:16:27,970 --> 00:16:36,940
modify it that also protects you against

332
00:16:33,750 --> 00:16:42,760
devices that might be on the spy bus and

333
00:16:36,940 --> 00:16:45,910
able to poke at<font color="#CCCCCC"> the at the chip one of</font>

334
00:16:42,760 --> 00:16:51,790
which is the Intel management engine and

335
00:16:45,910 --> 00:16:54,339
this is a it's a<font color="#E5E5E5"> CPU inside the CPU rid</font>

336
00:16:51,790 --> 00:16:57,760
off merrick called it a metroid<font color="#CCCCCC"> cpu and</font>

337
00:16:54,339 --> 00:17:00,220
it's running in opaque binary blob with

338
00:16:57,760 --> 00:17:03,580
access to main memory<font color="#E5E5E5"> to your keyboard</font>

339
00:17:00,220 --> 00:17:05,470
<font color="#CCCCCC">and mouse to your network and it's even</font>

340
00:17:03,580 --> 00:17:09,790
listening for packets when your computer

341
00:17:05,470 --> 00:17:12,100
is turned off so the rootkit

342
00:17:09,790 --> 00:17:15,819
possibilities inside that management

343
00:17:12,099 --> 00:17:18,639
engine are really quite concerning so I

344
00:17:15,819 --> 00:17:21,369
did a bunch<font color="#E5E5E5"> of research in how to try to</font>

345
00:17:18,640 --> 00:17:27,520
disable it and publish some findings

346
00:17:21,369 --> 00:17:31,899
that were turned<font color="#E5E5E5"> into the Emmy cleaner</font>

347
00:17:27,520 --> 00:17:35,590
script that can take<font color="#CCCCCC"> a the management</font>

348
00:17:31,900 --> 00:17:37,570
engine firmware and remove pretty much

349
00:17:35,590 --> 00:17:39,790
all of the rootkit functions and leave

350
00:17:37,570 --> 00:17:42,790
just<font color="#CCCCCC"> enough functionality to boot the</font>

351
00:17:39,790 --> 00:17:45,850
system this also frees up an additional

352
00:17:42,790 --> 00:17:50,530
<font color="#CCCCCC">five megabytes of space in</font><font color="#E5E5E5"> in</font><font color="#CCCCCC"> the spy</font>

353
00:17:45,850 --> 00:17:53,949
flash for the<font color="#E5E5E5"> heads payload and it works</font>

354
00:17:50,530 --> 00:17:54,950
on<font color="#CCCCCC"> sandy bridge and</font><font color="#E5E5E5"> Ivy Bridge as well</font>

355
00:17:53,950 --> 00:17:58,010
as some sky

356
00:17:54,950 --> 00:17:59,450
like systems for though on the<font color="#E5E5E5"> sky lake</font>

357
00:17:58,010 --> 00:18:02,000
there's some interaction with<font color="#CCCCCC"> goo guard</font>

358
00:17:59,450 --> 00:18:07,910
that still needs some some further

359
00:18:02,000 --> 00:18:09,740
research<font color="#CCCCCC"> okay so we have a flexible way</font>

360
00:18:07,910 --> 00:18:12,380
to boot the system and get it up and<font color="#E5E5E5"> run</font>

361
00:18:09,740 --> 00:18:14,980
in and we hopefully are reasonably

362
00:18:12,380 --> 00:18:17,690
protected against these Hardware attacks

363
00:18:14,980 --> 00:18:19,250
we still<font color="#CCCCCC"> need to</font><font color="#E5E5E5"> worry about how do we</font>

364
00:18:17,690 --> 00:18:22,520
protect the secrets<font color="#CCCCCC"> you know the disk</font>

365
00:18:19,250 --> 00:18:25,700
encryption keys and things like that<font color="#CCCCCC"> so</font>

366
00:18:22,520 --> 00:18:28,940
heads takes it extensive advantage of

367
00:18:25,700 --> 00:18:31,760
the the TPM the trusted platform module

368
00:18:28,940 --> 00:18:34,820
and it's a cryptographic coprocessor

369
00:18:31,760 --> 00:18:38,510
that has<font color="#E5E5E5"> really not been well received</font>

370
00:18:34,820 --> 00:18:42,110
by the open source community because<font color="#CCCCCC"> of</font>

371
00:18:38,510 --> 00:18:44,540
its association with the trusted

372
00:18:42,110 --> 00:18:49,189
computing group and<font color="#CCCCCC"> microsoft and drm</font>

373
00:18:44,540 --> 00:18:51,649
and that's because when it's used in

374
00:18:49,190 --> 00:18:54,530
<font color="#E5E5E5">those systems you don't control the</font>

375
00:18:51,650 --> 00:18:59,900
firmware that the the root of trust is

376
00:18:54,530 --> 00:19:03,440
in<font color="#E5E5E5"> someone else not in your own code but</font>

377
00:18:59,900 --> 00:19:06,050
in a corps boot and heads system we

378
00:19:03,440 --> 00:19:09,890
control<font color="#E5E5E5"> what is being measured and we</font>

379
00:19:06,050 --> 00:19:14,810
control that root of trust the TPM by

380
00:19:09,890 --> 00:19:18,710
itself doesn't actually do direct

381
00:19:14,810 --> 00:19:22,159
validation of things it it has registers

382
00:19:18,710 --> 00:19:25,370
called<font color="#CCCCCC"> pc ours</font><font color="#E5E5E5"> that only support an</font>

383
00:19:22,160 --> 00:19:27,730
operation called extend and what the

384
00:19:25,370 --> 00:19:30,770
extent operation does is it takes the

385
00:19:27,730 --> 00:19:35,680
current value<font color="#CCCCCC"> of the register the hash</font>

386
00:19:30,770 --> 00:19:38,000
of some of some block of code<font color="#E5E5E5"> or data</font>

387
00:19:35,680 --> 00:19:40,010
concatenates those together and then

388
00:19:38,000 --> 00:19:43,360
hashes them and that becomes the<font color="#E5E5E5"> new</font>

389
00:19:40,010 --> 00:19:46,790
value<font color="#CCCCCC"> of the register so it</font><font color="#E5E5E5"> doesn't</font>

390
00:19:43,360 --> 00:19:49,209
directly tell you what has been<font color="#E5E5E5"> run but</font>

391
00:19:46,790 --> 00:19:53,600
it allows you to cryptographically

392
00:19:49,210 --> 00:19:57,230
verify what that chain of extensions has

393
00:19:53,600 --> 00:19:59,230
been and if the boot block the immutable

394
00:19:57,230 --> 00:20:02,030
boot block that we talked about earlier

395
00:19:59,230 --> 00:20:06,320
<font color="#CCCCCC">does an initial measurement of itself</font>

396
00:20:02,030 --> 00:20:08,029
<font color="#E5E5E5">and then measures the ROM stage and then</font>

397
00:20:06,320 --> 00:20:09,950
the ROM stage measures the<font color="#E5E5E5"> RAM</font>

398
00:20:08,029 --> 00:20:14,809
stage and the<font color="#CCCCCC"> RAM stage measures the</font>

399
00:20:09,950 --> 00:20:17,989
payload at that point we can we can

400
00:20:14,809 --> 00:20:22,908
compute what that value should<font color="#CCCCCC"> be in the</font>

401
00:20:17,989 --> 00:20:27,139
PCR the other operation the TPM supports

402
00:20:22,909 --> 00:20:31,070
is<font color="#E5E5E5"> sealing keys in into it and it will</font>

403
00:20:27,139 --> 00:20:35,988
only unseal the key if the PCR<font color="#CCCCCC"> is match</font>

404
00:20:31,070 --> 00:20:38,840
so this means that the same code has to

405
00:20:35,989 --> 00:20:41,779
be executed<font color="#E5E5E5"> doing those measurements in</font>

406
00:20:38,840 --> 00:20:45,379
order for<font color="#E5E5E5"> the TPM to reveal that that</font>

407
00:20:41,779 --> 00:20:48,739
secret key and what goes into the

408
00:20:45,379 --> 00:20:51,799
measurements is a choice that it has a

409
00:20:48,739 --> 00:20:53,029
lot of bearing on security the<font color="#CCCCCC"> you know</font>

410
00:20:51,799 --> 00:20:56,809
the Corps boot and the payload<font color="#E5E5E5"> or</font>

411
00:20:53,029 --> 00:21:00,979
obvious choices and there's been a<font color="#E5E5E5"> lot</font>

412
00:20:56,809 --> 00:21:05,509
of writing by<font color="#E5E5E5"> the Johanna and other</font>

413
00:21:00,979 --> 00:21:08,149
folks on what else<font color="#E5E5E5"> should be measured</font>

414
00:21:05,509 --> 00:21:09,469
and since we have Linux we can write

415
00:21:08,149 --> 00:21:12,820
shell scripts that do things like

416
00:21:09,469 --> 00:21:15,619
measure the cryptographic headers of the

417
00:21:12,820 --> 00:21:18,168
be encrypted drives to ensure that

418
00:21:15,619 --> 00:21:20,389
someone hasn't swapped out the drive

419
00:21:18,169 --> 00:21:24,679
underneath you and it's just trying<font color="#E5E5E5"> to</font>

420
00:21:20,389 --> 00:21:27,199
get your your disk encryption key if we

421
00:21:24,679 --> 00:21:31,460
go back<font color="#E5E5E5"> to that unsealing operation it</font>

422
00:21:27,200 --> 00:21:35,929
<font color="#E5E5E5">also takes a password to do the</font>

423
00:21:31,460 --> 00:21:38,029
decryption and one concern is how do<font color="#CCCCCC"> you</font>

424
00:21:35,929 --> 00:21:42,019
<font color="#E5E5E5">know that you're trusting your typing</font>

425
00:21:38,029 --> 00:21:45,739
your password into a trusted system that

426
00:21:42,019 --> 00:21:49,129
the someone might have modified the

427
00:21:45,739 --> 00:21:50,359
firmware along the way and you know now

428
00:21:49,129 --> 00:21:55,849
<font color="#E5E5E5">it's just</font><font color="#CCCCCC"> giving you of what looks like</font>

429
00:21:50,359 --> 00:21:59,960
a<font color="#E5E5E5"> valid prompt some some things like the</font>

430
00:21:55,849 --> 00:22:02,330
anti<font color="#CCCCCC"> yuval made toolkit use the pcrs to</font>

431
00:21:59,960 --> 00:22:04,999
seal a secret message<font color="#CCCCCC"> that they</font>

432
00:22:02,330 --> 00:22:07,580
displayed to you when if and only if the

433
00:22:04,999 --> 00:22:09,830
<font color="#CCCCCC">pcrs match the problems that</font><font color="#E5E5E5"> that's</font>

434
00:22:07,580 --> 00:22:12,678
pretty<font color="#CCCCCC"> easy to replay</font><font color="#E5E5E5"> that if they can</font>

435
00:22:09,830 --> 00:22:15,019
get the contents of<font color="#E5E5E5"> that message they</font>

436
00:22:12,679 --> 00:22:18,080
can in an attacker could just have the

437
00:22:15,019 --> 00:22:21,389
firmware display that to you so Matthew

438
00:22:18,080 --> 00:22:24,539
Garrett presented a really<font color="#E5E5E5"> neat idea</font>

439
00:22:21,389 --> 00:22:28,889
of<font color="#E5E5E5"> using the Google Authenticator the</font>

440
00:22:24,539 --> 00:22:31,709
top<font color="#E5E5E5"> P system so rather than</font><font color="#CCCCCC"> having the</font>

441
00:22:28,889 --> 00:22:38,008
firmware display a message it has the

442
00:22:31,709 --> 00:22:41,309
<font color="#E5E5E5">keys there we go it has the computer</font>

443
00:22:38,009 --> 00:22:43,109
take that secret and apply be taught the

444
00:22:41,309 --> 00:22:47,668
<font color="#E5E5E5">algorithm to it along with the current</font>

445
00:22:43,109 --> 00:22:49,559
time and it generates the this code this

446
00:22:47,669 --> 00:22:52,769
<font color="#E5E5E5">one-time code that's balanced for 30</font>

447
00:22:49,559 --> 00:22:55,889
seconds<font color="#E5E5E5"> and the user of the computer can</font>

448
00:22:52,769 --> 00:23:00,839
then verify on their phone that that

449
00:22:55,889 --> 00:23:03,658
same code is is being generated this

450
00:23:00,839 --> 00:23:06,658
means that an evil made attacker would

451
00:23:03,659 --> 00:23:09,779
have to be somehow proxying between you

452
00:23:06,659 --> 00:23:11,070
know the machine with your TPM and the

453
00:23:09,779 --> 00:23:13,679
thing that they're trying<font color="#CCCCCC"> to</font><font color="#E5E5E5"> get you to</font>

454
00:23:11,070 --> 00:23:17,189
log into so it becomes a much much more

455
00:23:13,679 --> 00:23:22,649
difficult job for an attacker to to

456
00:23:17,190 --> 00:23:24,559
subvert and<font color="#CCCCCC"> since we have</font><font color="#E5E5E5"> a full linux</font>

457
00:23:22,649 --> 00:23:26,968
installed we can<font color="#E5E5E5"> actually implement</font>

458
00:23:24,559 --> 00:23:30,928
<font color="#CCCCCC">matthew Garrett's idea as a very simple</font>

459
00:23:26,969 --> 00:23:33,749
shell script that it<font color="#CCCCCC"> reads a value from</font>

460
00:23:30,929 --> 00:23:38,159
it reads the sealed blob from the tpms

461
00:23:33,749 --> 00:23:40,709
in<font color="#CCCCCC"> vram it unseals it which will</font><font color="#E5E5E5"> only</font>

462
00:23:38,159 --> 00:23:42,839
the TPM will only do if and only at<font color="#E5E5E5"> the</font>

463
00:23:40,709 --> 00:23:45,839
<font color="#CCCCCC">pcrs match maintain the firmware is</font>

464
00:23:42,839 --> 00:23:49,529
unmodified and then it used the top view

465
00:23:45,839 --> 00:23:52,109
program to compute<font color="#CCCCCC"> the current the</font><font color="#E5E5E5"> hat</font>

466
00:23:49,529 --> 00:23:57,959
the hash of the<font color="#E5E5E5"> current time and that</font>

467
00:23:52,109 --> 00:24:01,320
secret so there's there's another saying

468
00:23:57,959 --> 00:24:03,299
that about folks there are two types of

469
00:24:01,320 --> 00:24:05,039
people who use encrypted data those who

470
00:24:03,299 --> 00:24:08,070
have lost<font color="#E5E5E5"> the pass phrases and those who</font>

471
00:24:05,039 --> 00:24:11,399
will and the TPM adds yet another way

472
00:24:08,070 --> 00:24:15,029
for you<font color="#E5E5E5"> to lose your your path your disk</font>

473
00:24:11,399 --> 00:24:16,678
encryption key because it's now tied to

474
00:24:15,029 --> 00:24:19,200
that specific piece of<font color="#E5E5E5"> hardware and the</font>

475
00:24:16,679 --> 00:24:23,070
specific firmware installed it's

476
00:24:19,200 --> 00:24:25,859
<font color="#E5E5E5">possible that you know you might lose</font>

477
00:24:23,070 --> 00:24:27,809
access to the key you might also want to

478
00:24:25,859 --> 00:24:31,649
<font color="#E5E5E5">save lose the drive to another computer</font>

479
00:24:27,809 --> 00:24:32,990
and be able to<font color="#E5E5E5"> decrypt it therefore for</font>

480
00:24:31,649 --> 00:24:36,469
recovery

481
00:24:32,990 --> 00:24:39,830
so heads takes the disk encryption key

482
00:24:36,470 --> 00:24:43,490
and splits it into an arbitrary number

483
00:24:39,830 --> 00:24:46,040
of secret shares and<font color="#E5E5E5"> you then need to</font>

484
00:24:43,490 --> 00:24:48,830
have some number of these to recover the

485
00:24:46,040 --> 00:24:50,540
<font color="#E5E5E5">secret so you can put 1 you know in a</font>

486
00:24:48,830 --> 00:24:52,399
safety deposit box you can give one to a

487
00:24:50,540 --> 00:24:56,300
friend you can put one in your in your

488
00:24:52,400 --> 00:24:59,450
<font color="#E5E5E5">password manager and unless someone can</font>

489
00:24:56,300 --> 00:25:01,100
acquire you<font color="#CCCCCC"> get three of</font><font color="#E5E5E5"> them or four</font><font color="#CCCCCC"> of</font>

490
00:24:59,450 --> 00:25:04,640
them or whatever threshold you come up

491
00:25:01,100 --> 00:25:11,270
with I they can't decrypt your your

492
00:25:04,640 --> 00:25:13,580
drive so<font color="#CCCCCC"> the the the heads firmware has</font>

493
00:25:11,270 --> 00:25:15,740
a secret sharing program that<font color="#E5E5E5"> will do</font>

494
00:25:13,580 --> 00:25:18,020
that that split for you and then it can

495
00:25:15,740 --> 00:25:20,990
generate QR codes to make it<font color="#E5E5E5"> easy to</font>

496
00:25:18,020 --> 00:25:25,639
<font color="#E5E5E5">distribute the secrets around actually</font>

497
00:25:20,990 --> 00:25:27,770
<font color="#E5E5E5">distribute the share is around another</font>

498
00:25:25,640 --> 00:25:31,809
thing that heads makes use of our

499
00:25:27,770 --> 00:25:33,889
Hardware tokens like you<font color="#CCCCCC"> bikies and</font>

500
00:25:31,809 --> 00:25:37,670
these<font color="#CCCCCC"> are</font><font color="#E5E5E5"> great because you don't need</font>

501
00:25:33,890 --> 00:25:41,150
to it allows you to not have your your

502
00:25:37,670 --> 00:25:45,920
PGP secret key stored on the<font color="#E5E5E5"> disk</font>

503
00:25:41,150 --> 00:25:50,059
anywhere and we use it<font color="#CCCCCC"> for validating</font>

504
00:25:45,920 --> 00:25:54,050
the<font color="#E5E5E5"> check-ins on the github tree but</font>

505
00:25:50,059 --> 00:25:58,010
it's also then used during bootup that

506
00:25:54,050 --> 00:26:02,120
the the hypervisor the colonel and the

507
00:25:58,010 --> 00:26:05,809
<font color="#CCCCCC">initial ramdisk are valid is against the</font>

508
00:26:02,120 --> 00:26:08,989
<font color="#E5E5E5">user's pgp signature----- with the heads</font>

509
00:26:05,809 --> 00:26:11,720
build we don't<font color="#E5E5E5"> put our keys into the rom</font>

510
00:26:08,990 --> 00:26:15,020
<font color="#E5E5E5">the users generate their own keys and</font>

511
00:26:11,720 --> 00:26:18,440
that's what goes into the<font color="#CCCCCC"> ROM image um</font>

512
00:26:15,020 --> 00:26:20,059
because we want the users to be able to

513
00:26:18,440 --> 00:26:22,220
<font color="#E5E5E5">control their own machines and we want</font>

514
00:26:20,059 --> 00:26:24,440
<font color="#CCCCCC">you to</font><font color="#E5E5E5"> be able to sign your own firmware</font>

515
00:26:22,220 --> 00:26:31,250
as will assign your own operating system

516
00:26:24,440 --> 00:26:33,020
installs so again we have shell scripts

517
00:26:31,250 --> 00:26:34,790
so we can we can implement the<font color="#E5E5E5"> startup</font>

518
00:26:33,020 --> 00:26:39,889
as a fairly simple shell script that

519
00:26:34,790 --> 00:26:44,300
does these checks one<font color="#E5E5E5"> concern though is</font>

520
00:26:39,890 --> 00:26:46,340
that once you have a<font color="#E5E5E5"> valid signature for</font>

521
00:26:44,300 --> 00:26:49,460
an older version<font color="#E5E5E5"> of the software</font>

522
00:26:46,340 --> 00:26:51,740
might<font color="#E5E5E5"> try to roll back and gives you to</font>

523
00:26:49,460 --> 00:26:55,130
run a vulnerable version of the<font color="#CCCCCC"> kernel</font>

524
00:26:51,740 --> 00:26:59,450
or the hypervisor so we use a third TPM

525
00:26:55,130 --> 00:27:02,450
feature which is<font color="#E5E5E5"> the TPM counters to be</font>

526
00:26:59,450 --> 00:27:04,370
able<font color="#E5E5E5"> to sign the current counter version</font>

527
00:27:02,450 --> 00:27:07,520
and the counters can't be a reset they

528
00:27:04,370 --> 00:27:09,889
only they only increment so this

529
00:27:07,520 --> 00:27:12,559
prevents any sort<font color="#E5E5E5"> of roll back attack</font>

530
00:27:09,890 --> 00:27:16,029
from someone<font color="#E5E5E5"> who's able to image your</font>

531
00:27:12,559 --> 00:27:19,250
drive and bring it in to your machine

532
00:27:16,029 --> 00:27:22,220
again a lot<font color="#E5E5E5"> of these threats are pretty</font>

533
00:27:19,250 --> 00:27:23,750
esoteric they're not<font color="#E5E5E5"> necessarily the</font>

534
00:27:22,220 --> 00:27:26,059
run-of-the-mill threats that that

535
00:27:23,750 --> 00:27:28,700
everyone expects to encounter but if<font color="#E5E5E5"> we</font>

536
00:27:26,059 --> 00:27:31,158
can implement these sort of protections

537
00:27:28,700 --> 00:27:36,140
in the firmware it helps make<font color="#CCCCCC"> the whole</font>

538
00:27:31,159 --> 00:27:39,010
ecosystem safer another<font color="#E5E5E5"> place where</font>

539
00:27:36,140 --> 00:27:41,779
we're trying<font color="#E5E5E5"> to learn from what other</font>

540
00:27:39,010 --> 00:27:44,149
what other folks are doing is the

541
00:27:41,779 --> 00:27:47,299
<font color="#E5E5E5">Android verified boot which uses a</font>

542
00:27:44,149 --> 00:27:51,590
kernel module called a DM<font color="#CCCCCC"> Verity that</font>

543
00:27:47,299 --> 00:27:53,750
builds a<font color="#CCCCCC"> Merkel tree of hashes of the</font>

544
00:27:51,590 --> 00:27:57,080
file system blocks and this gives you a

545
00:27:53,750 --> 00:28:01,429
very lightweight way to sign the entire

546
00:27:57,080 --> 00:28:07,250
file system with a with a single hash

547
00:28:01,429 --> 00:28:11,059
and the the beauty of this<font color="#E5E5E5"> is this</font>

548
00:28:07,250 --> 00:28:14,289
encourages<font color="#E5E5E5"> read-only root file systems</font>

549
00:28:11,059 --> 00:28:16,908
because the edges you generate the

550
00:28:14,289 --> 00:28:19,158
Merkel tree you sign<font color="#CCCCCC"> that and then</font>

551
00:28:16,909 --> 00:28:23,600
<font color="#CCCCCC">anytime you do an update there's an</font>

552
00:28:19,159 --> 00:28:26,210
explicit<font color="#CCCCCC"> regenerated resign so Android</font>

553
00:28:23,600 --> 00:28:27,830
has brought this in and we've<font color="#E5E5E5"> been</font>

554
00:28:26,210 --> 00:28:32,570
working with that with cubes to make it

555
00:28:27,830 --> 00:28:36,678
possible to use there<font color="#E5E5E5"> as well in cubes</font>

556
00:28:32,570 --> 00:28:42,110
is a very highly<font color="#E5E5E5"> recommended reasonably</font>

557
00:28:36,679 --> 00:28:46,370
secure operating system that I'm<font color="#E5E5E5"> very</font>

558
00:28:42,110 --> 00:28:48,969
fond of for its its approach to<font color="#E5E5E5"> security</font>

559
00:28:46,370 --> 00:28:52,969
through through compartmentalization

560
00:28:48,970 --> 00:28:55,399
that it uses virtualization and virtual

561
00:28:52,970 --> 00:28:58,010
machines to separate out different

562
00:28:55,399 --> 00:28:59,120
privileged domains it<font color="#E5E5E5"> also moves all of</font>

563
00:28:58,010 --> 00:29:03,350
the device drivers

564
00:28:59,120 --> 00:29:11,330
and external interfaces into into their

565
00:29:03,350 --> 00:29:13,459
own guest OS and they they are<font color="#E5E5E5"> saying</font>

566
00:29:11,330 --> 00:29:15,590
that for their new next version of cubes

567
00:29:13,460 --> 00:29:18,050
for them to certify any hardware it must

568
00:29:15,590 --> 00:29:21,230
<font color="#E5E5E5">have open source firmware so there's a</font>

569
00:29:18,050 --> 00:29:26,360
lot<font color="#E5E5E5"> of similar thoughts going on between</font>

570
00:29:21,230 --> 00:29:28,610
their team and<font color="#E5E5E5"> the heads team another</font>

571
00:29:26,360 --> 00:29:30,709
thing heads is work on doing is being a

572
00:29:28,610 --> 00:29:32,659
hundred percent of reproducible which

573
00:29:30,710 --> 00:29:36,230
means<font color="#E5E5E5"> that if you download the source</font>

574
00:29:32,660 --> 00:29:39,140
free and run make you will get a bit for

575
00:29:36,230 --> 00:29:43,910
<font color="#E5E5E5">bit identical binary to the official</font>

576
00:29:39,140 --> 00:29:47,030
build so here<font color="#E5E5E5"> we have a ubuntu system</font>

577
00:29:43,910 --> 00:29:49,880
and a fedora system and they have you

578
00:29:47,030 --> 00:29:52,629
<font color="#E5E5E5">know precisely the same hash this is a</font>

579
00:29:49,880 --> 00:29:54,770
bit of<font color="#CCCCCC"> a process and unfortunately</font>

580
00:29:52,630 --> 00:29:58,309
compilers seem to go out of<font color="#E5E5E5"> their way to</font>

581
00:29:54,770 --> 00:30:01,059
make this hard so we've been having to

582
00:29:58,309 --> 00:30:03,980
push a lot of commits and changes to our

583
00:30:01,059 --> 00:30:07,220
dependencies things like this in

584
00:30:03,980 --> 00:30:09,470
hypervisor the<font color="#CCCCCC"> busybox show that we use</font>

585
00:30:07,220 --> 00:30:13,040
and<font color="#E5E5E5"> for the most part they've been very</font>

586
00:30:09,470 --> 00:30:14,780
receptive to these patches the other

587
00:30:13,040 --> 00:30:18,500
place<font color="#E5E5E5"> where we have to worry about it is</font>

588
00:30:14,780 --> 00:30:23,210
the initial<font color="#CCCCCC"> ram disk for the linux</font>

589
00:30:18,500 --> 00:30:26,929
kernel because the the cpio file format

590
00:30:23,210 --> 00:30:29,570
has dates and user IDs and inode numbers

591
00:30:26,929 --> 00:30:31,309
and a bunch of things that that we need

592
00:30:29,570 --> 00:30:33,530
to<font color="#E5E5E5"> strip out to make them reproducible</font>

593
00:30:31,309 --> 00:30:38,870
so we have a script that will help with

594
00:30:33,530 --> 00:30:42,080
that so that's kind of a<font color="#CCCCCC"> high-level</font>

595
00:30:38,870 --> 00:30:43,309
<font color="#E5E5E5">state of where heads is now suppose</font><font color="#CCCCCC"> that</font>

596
00:30:42,080 --> 00:30:46,040
a compliment is talking about<font color="#E5E5E5"> where</font>

597
00:30:43,309 --> 00:30:48,950
we're planning<font color="#CCCCCC"> to go and there's some</font>

598
00:30:46,040 --> 00:30:51,970
really exciting news that just a couple

599
00:30:48,950 --> 00:30:53,830
<font color="#E5E5E5">days ago the purism laptop company</font>

600
00:30:51,970 --> 00:30:57,260
announced that<font color="#E5E5E5"> they're going to be</font>

601
00:30:53,830 --> 00:31:01,100
shipping their leiram 13 laptop with

602
00:30:57,260 --> 00:31:03,379
coreboot and heads and this is really

603
00:31:01,100 --> 00:31:05,870
exciting<font color="#E5E5E5"> because it's a modern skylake</font>

604
00:31:03,380 --> 00:31:08,290
system so we can finally stop carrying

605
00:31:05,870 --> 00:31:11,928
around our our<font color="#E5E5E5"> five-year-old</font><font color="#CCCCCC"> thinkpads</font>

606
00:31:08,290 --> 00:31:12,970
and upgrade to a modern machine the

607
00:31:11,929 --> 00:31:14,770
other really

608
00:31:12,970 --> 00:31:17,799
interesting part is that they<font color="#CCCCCC"> are going</font>

609
00:31:14,770 --> 00:31:21,090
<font color="#CCCCCC">to ship them with the boot guard profile</font>

610
00:31:17,799 --> 00:31:24,820
and the boot guard<font color="#E5E5E5"> public key unfused</font>

611
00:31:21,090 --> 00:31:28,240
this is a a one-time programmable fuse

612
00:31:24,820 --> 00:31:32,260
inside the management engine<font color="#CCCCCC"> that are to</font>

613
00:31:28,240 --> 00:31:35,919
me inside the<font color="#E5E5E5"> CPU</font><font color="#CCCCCC"> that controls how the</font>

614
00:31:32,260 --> 00:31:39,820
system boots with with the with a boot

615
00:31:35,919 --> 00:31:41,350
guard and right now the only vendors who

616
00:31:39,820 --> 00:31:44,080
are<font color="#E5E5E5"> using boot guard are using it to</font>

617
00:31:41,350 --> 00:31:46,959
lock out any sort of<font color="#E5E5E5"> third party for</font>

618
00:31:44,080 --> 00:31:50,260
more development so to be able to set

619
00:31:46,960 --> 00:31:54,669
your own key means that you can<font color="#E5E5E5"> really</font>

620
00:31:50,260 --> 00:31:56,710
own this machine and only you will be

621
00:31:54,669 --> 00:32:00,190
able<font color="#E5E5E5"> to produce firmware that that boots</font>

622
00:31:56,710 --> 00:32:02,169
on it and this is a great<font color="#E5E5E5"> step for</font>

623
00:32:00,190 --> 00:32:04,720
hardware security because it pretty much

624
00:32:02,169 --> 00:32:10,059
eliminates all but you're the most

625
00:32:04,720 --> 00:32:12,130
<font color="#E5E5E5">sophisticated evil made attacks there</font>

626
00:32:10,059 --> 00:32:13,960
are other devices in the systems that we

627
00:32:12,130 --> 00:32:16,960
need to<font color="#CCCCCC"> be worried about the embedded</font>

628
00:32:13,960 --> 00:32:20,890
controller is what handles keyboard

629
00:32:16,960 --> 00:32:23,380
inputs and other things and it's on most

630
00:32:20,890 --> 00:32:25,450
machines is closed source and is in a

631
00:32:23,380 --> 00:32:28,059
position to log keystrokes and interfere

632
00:32:25,450 --> 00:32:30,520
with a variety of operations the Google

633
00:32:28,059 --> 00:32:34,090
Chromebooks have an open source you see

634
00:32:30,520 --> 00:32:37,539
and they do a remote attestation between

635
00:32:34,090 --> 00:32:41,168
<font color="#E5E5E5">ec</font><font color="#CCCCCC"> and cpu and in order to prove that</font>

636
00:32:37,539 --> 00:32:44,080
<font color="#E5E5E5">the code</font><font color="#CCCCCC"> that should be running there is</font>

637
00:32:41,169 --> 00:32:46,780
actually there there's a few projects to

638
00:32:44,080 --> 00:32:50,470
try to port that<font color="#E5E5E5"> too for the thinkpads</font>

639
00:32:46,780 --> 00:32:56,850
and<font color="#E5E5E5"> i'm hoping the liebrent laptops will</font>

640
00:32:50,470 --> 00:32:59,320
also pick it up the server landscape is

641
00:32:56,850 --> 00:33:02,379
unfortunately not great right now for

642
00:32:59,320 --> 00:33:08,408
coreboot the threat model and servers is

643
00:33:02,380 --> 00:33:10,630
really tough and there is so much for

644
00:33:08,409 --> 00:33:12,549
edible firmware on a server pretty much

645
00:33:10,630 --> 00:33:16,870
everything<font color="#E5E5E5"> that</font><font color="#CCCCCC"> I've highlighted here</font>

646
00:33:12,549 --> 00:33:18,370
has some sort of firmware in it that<font color="#CCCCCC"> you</font>

647
00:33:16,870 --> 00:33:21,908
know potentially<font color="#CCCCCC"> we have to be concerned</font>

648
00:33:18,370 --> 00:33:24,189
about there are some groups like

649
00:33:21,909 --> 00:33:25,330
Facebook<font color="#E5E5E5"> and the Open Compute Project</font>

650
00:33:24,190 --> 00:33:28,030
that

651
00:33:25,330 --> 00:33:31,179
are trying<font color="#E5E5E5"> to tackle some of that the</font>

652
00:33:28,030 --> 00:33:37,780
the<font color="#CCCCCC"> yosemite servers from from Open</font>

653
00:33:31,180 --> 00:33:40,060
Compute have in<font color="#E5E5E5"> India the BMC here run</font>

654
00:33:37,780 --> 00:33:42,910
software from<font color="#CCCCCC"> facebook called open BMC</font>

655
00:33:40,060 --> 00:33:45,040
that is open source board<font color="#CCCCCC"> management</font>

656
00:33:42,910 --> 00:33:46,780
controller and they've moved the

657
00:33:45,040 --> 00:33:53,010
hardware root of trust into there<font color="#E5E5E5"> and</font>

658
00:33:46,780 --> 00:33:55,660
it's a really exciting<font color="#CCCCCC"> place to</font><font color="#E5E5E5"> put to</font>

659
00:33:53,010 --> 00:33:58,030
move that that rid of trust because it

660
00:33:55,660 --> 00:34:02,260
in this case it controls for separate

661
00:33:58,030 --> 00:34:07,120
compute nodes I'm hoping<font color="#CCCCCC"> that heads will</font>

662
00:34:02,260 --> 00:34:10,420
<font color="#CCCCCC">be useful there we're also collaborating</font>

663
00:34:07,120 --> 00:34:12,480
with the mass open cloud project which

664
00:34:10,420 --> 00:34:16,210
is looking<font color="#E5E5E5"> at doing that bare metal</font>

665
00:34:12,480 --> 00:34:19,449
cloud-hosted which is sort of a scary

666
00:34:16,210 --> 00:34:21,820
thing when you imagine you know what

667
00:34:19,449 --> 00:34:24,639
could<font color="#E5E5E5"> a previous tenant have left as a</font>

668
00:34:21,820 --> 00:34:28,690
<font color="#E5E5E5">surprise</font><font color="#CCCCCC"> for future tenant inside the</font>

669
00:34:24,639 --> 00:34:31,750
system firmware so they have a TPM based

670
00:34:28,690 --> 00:34:35,139
remote attestation framework called<font color="#E5E5E5"> key</font>

671
00:34:31,750 --> 00:34:37,590
<font color="#E5E5E5">lime that they've been working on and we</font>

672
00:34:35,139 --> 00:34:40,359
had a hackathon two weeks ago where they

673
00:34:37,590 --> 00:34:42,520
were able<font color="#E5E5E5"> to integrate key lime into</font>

674
00:34:40,360 --> 00:34:47,610
heads have heads through their systems

675
00:34:42,520 --> 00:34:50,320
<font color="#CCCCCC">fetch</font><font color="#E5E5E5"> colonels over the network and</font>

676
00:34:47,610 --> 00:34:51,940
hopefully<font color="#E5E5E5"> ensure that there were no</font>

677
00:34:50,320 --> 00:34:56,380
surprises left in<font color="#E5E5E5"> the firmware from</font>

678
00:34:51,940 --> 00:34:59,140
previous tenants there of course plenty

679
00:34:56,380 --> 00:35:02,070
of open issues on the github tree and it

680
00:34:59,140 --> 00:35:04,750
is open source and<font color="#E5E5E5"> I would really</font>

681
00:35:02,070 --> 00:35:07,480
encourage everyone to if you have a

682
00:35:04,750 --> 00:35:11,860
compatible machine please download it

683
00:35:07,480 --> 00:35:15,970
try<font color="#CCCCCC"> and stall in it and help</font><font color="#E5E5E5"> help with</font>

684
00:35:11,860 --> 00:35:17,980
some of<font color="#E5E5E5"> the issues and go together</font>

685
00:35:15,970 --> 00:35:21,250
<font color="#E5E5E5">hopefully we can produce you know open</font>

686
00:35:17,980 --> 00:35:23,500
flexible measured auditable you know

687
00:35:21,250 --> 00:35:27,460
secure firmware for these machines and

688
00:35:23,500 --> 00:35:30,370
<font color="#CCCCCC">I'm really</font><font color="#E5E5E5"> hoping</font><font color="#CCCCCC"> that</font><font color="#E5E5E5"> we can start to</font>

689
00:35:27,460 --> 00:35:34,000
move the industry from away from this

690
00:35:30,370 --> 00:35:37,618
legacy UEFI firmware to modern software

691
00:35:34,000 --> 00:35:40,079
built with modern tools that

692
00:35:37,619 --> 00:35:42,660
it's flexible and adaptable to what we

693
00:35:40,079 --> 00:35:44,970
need so love to<font color="#E5E5E5"> answer any</font><font color="#CCCCCC"> questions</font>

694
00:35:42,660 --> 00:35:49,170
that you all might<font color="#CCCCCC"> have and thanks again</font>

695
00:35:44,970 --> 00:35:55,379
for staying to this last session thank

696
00:35:49,170 --> 00:35:58,279
you<font color="#CCCCCC"> thank you very</font><font color="#E5E5E5"> much</font><font color="#CCCCCC"> remember any</font>

697
00:35:55,380 --> 00:35:58,279
questions from the floor

698
00:36:07,890 --> 00:36:13,060
thank you for<font color="#E5E5E5"> a talk I want</font><font color="#CCCCCC"> to ask a</font>

699
00:36:10,390 --> 00:36:15,910
question<font color="#CCCCCC"> about the TPM qtp mechanism so</font>

700
00:36:13,060 --> 00:36:17,470
how does it<font color="#E5E5E5"> reinforce the boot chain if</font>

701
00:36:15,910 --> 00:36:19,629
<font color="#E5E5E5">you still</font><font color="#CCCCCC"> don't have a hardware root of</font>

702
00:36:17,470 --> 00:36:22,720
trust<font color="#E5E5E5"> that gets executed by the hardware</font>

703
00:36:19,630 --> 00:36:25,150
before the firmware is loaded so I mean

704
00:36:22,720 --> 00:36:30,700
the arrow given were can supply the same

705
00:36:25,150 --> 00:36:35,770
hash to<font color="#E5E5E5"> the input to the</font><font color="#CCCCCC"> TBM so the</font>

706
00:36:30,700 --> 00:36:39,009
<font color="#E5E5E5">question is how does the TPM provide the</font>

707
00:36:35,770 --> 00:36:43,600
hardware order trust so with a system

708
00:36:39,010 --> 00:36:46,060
that has<font color="#E5E5E5"> boot guard the legacy of reset</font>

709
00:36:43,600 --> 00:36:50,549
vector is no longer used instead a

710
00:36:46,060 --> 00:36:53,770
signed authenticated code module ACM is

711
00:36:50,550 --> 00:36:55,150
is validated by the<font color="#CCCCCC"> cpu microcode and</font>

712
00:36:53,770 --> 00:36:57,880
the signature<font color="#E5E5E5"> shocked by the sukkah</font>

713
00:36:55,150 --> 00:37:00,490
microcode and that is where<font color="#E5E5E5"> the verdict</font>

714
00:36:57,880 --> 00:37:06,370
trust<font color="#CCCCCC"> then ends up</font><font color="#E5E5E5"> being established the</font>

715
00:37:00,490 --> 00:37:09,850
signature on that ACM I mean the key

716
00:37:06,370 --> 00:37:13,029
used to sign<font color="#CCCCCC"> that a CM has its hash</font>

717
00:37:09,850 --> 00:37:14,589
programmed into the<font color="#CCCCCC"> CPU fuses which are</font>

718
00:37:13,030 --> 00:37:20,770
one-time programmable so it's<font color="#E5E5E5"> not</font>

719
00:37:14,590 --> 00:37:22,920
possible for an adversary to to subvert

720
00:37:20,770 --> 00:37:27,340
that unless they can swap out your<font color="#E5E5E5"> CPU</font>

721
00:37:22,920 --> 00:37:29,410
which in the case of a laptop would<font color="#E5E5E5"> be</font>

722
00:37:27,340 --> 00:37:32,790
very difficult and<font color="#E5E5E5"> the server it's a</font>

723
00:37:29,410 --> 00:37:35,350
<font color="#E5E5E5">little bit easier but still challenging</font>

724
00:37:32,790 --> 00:37:38,370
in the absence of boot guard<font color="#CCCCCC"> but if</font>

725
00:37:35,350 --> 00:37:41,799
you're on a sandy bridge or<font color="#CCCCCC"> Ivy Bridge</font>

726
00:37:38,370 --> 00:37:47,620
the hardware<font color="#E5E5E5"> root of trust comes from</font>

727
00:37:41,800 --> 00:37:52,110
the using the non-volatile protect bits

728
00:37:47,620 --> 00:37:55,540
in the in the spy flash which allows the

729
00:37:52,110 --> 00:37:59,590
flash to reserve looks at me to print

730
00:37:55,540 --> 00:38:01,810
rights to certain regions and I've been

731
00:37:59,590 --> 00:38:05,110
disconnecting the right protect pin from

732
00:38:01,810 --> 00:38:07,710
the chipset devices like the<font color="#E5E5E5"> Emmy are</font>

733
00:38:05,110 --> 00:38:10,960
not or software attacks runnin from the

734
00:38:07,710 --> 00:38:14,230
from next 86 are not able to override

735
00:38:10,960 --> 00:38:16,510
that right protection it so for legacy

736
00:38:14,230 --> 00:38:19,170
systems the<font color="#CCCCCC"> vevo made is able to reach</font>

737
00:38:16,510 --> 00:38:19,170
alter the flash

738
00:38:19,280 --> 00:38:25,410
so that would require an attacker to

739
00:38:22,020 --> 00:38:29,400
recent to have hands onto the<font color="#E5E5E5"> flash to</font>

740
00:38:25,410 --> 00:38:31,020
actually change it and<font color="#CCCCCC"> it depending</font><font color="#E5E5E5"> on</font>

741
00:38:29,400 --> 00:38:32,970
<font color="#E5E5E5">your threat model that that may be</font>

742
00:38:31,020 --> 00:38:35,009
acceptable you might say you<font color="#E5E5E5"> know</font>

743
00:38:32,970 --> 00:38:37,709
they're not<font color="#E5E5E5"> going to get hands on it but</font>

744
00:38:35,010 --> 00:38:40,170
if you<font color="#CCCCCC"> are concerned about an adversary</font>

745
00:38:37,710 --> 00:38:44,280
with physical access to the inside of

746
00:38:40,170 --> 00:38:48,240
your<font color="#E5E5E5"> machine then blue card is a much</font>

747
00:38:44,280 --> 00:38:53,630
better it provides a higher level<font color="#E5E5E5"> of</font>

748
00:38:48,240 --> 00:38:57,729
trust thank you any other<font color="#E5E5E5"> questions</font>

749
00:38:53,630 --> 00:39:01,980
thank<font color="#E5E5E5"> you</font><font color="#CCCCCC"> very</font><font color="#E5E5E5"> much general I feel</font>

750
00:38:57,730 --> 00:39:01,980
[Applause]

