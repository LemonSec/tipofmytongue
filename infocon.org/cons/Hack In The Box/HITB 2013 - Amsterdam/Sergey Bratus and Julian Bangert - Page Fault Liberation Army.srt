1
00:00:01,990 --> 00:00:05,910
Google

2
00:00:05,910 --> 00:00:12,910
okay I'll

3
00:00:15,730 --> 00:00:19,110
yes and

4
00:00:19,110 --> 00:00:21,810
good

5
00:00:21,810 --> 00:00:25,930
hmm iraq

6
00:00:25,930 --> 00:00:30,289
no yes so

7
00:00:30,289 --> 00:00:34,170
this is the page fall Liberation Army

8
00:00:34,170 --> 00:00:37,850
we're in the business love are showing

9
00:00:37,850 --> 00:00:41,839
which really inside are the neglected
its

10
00:00:41,839 --> 00:00:47,210
though the Intel processor out we're
going to start with the philosophy why

11
00:00:47,210 --> 00:00:48,159
we do this

12
00:00:48,159 --> 00:00:52,120
because this has been feelin a research
in our lab

13
00:00:52,120 --> 00:00:55,150
and you as you can see it's turtles all
the way down

14
00:00:55,150 --> 00:00:58,720
and then I will hit

15
00:00:58,720 --> 00:01:03,040
a the actual details just about halfway
through the talk

16
00:01:03,040 --> 00:01:07,189
no instructions were harmed

17
00:01:07,189 --> 00:01:10,799
in the making of a stalk a our

18
00:01:10,799 --> 00:01:14,640
great thanks to of the wonderful Intel
hardware that

19
00:01:14,640 --> 00:01:19,799
up allowed us to have all this fun out
we're going to talk about touring

20
00:01:19,799 --> 00:01:20,799
completeness

21
00:01:20,799 --> 00:01:24,770
in people really over

22
00:01:24,770 --> 00:01:29,439
value during completeness you can do
interesting computation with the systems

23
00:01:29,439 --> 00:01:30,799
that are not touring complete

24
00:01:30,799 --> 00:01:34,200
is just that Turing complete is the most
genial you can do

25
00:01:34,200 --> 00:01:37,249
and it's really computation Weiss

26
00:01:37,249 --> 00:01:41,170
something like the root shell so if you
can prove

27
00:01:41,170 --> 00:01:44,950
about power a few instructions that
together they

28
00:01:44,950 --> 00:01:48,390
make up a Turing machine that means you
can do anything there

29
00:01:48,390 --> 00:01:51,530
that you can do with the regular
processor see memory

30
00:01:51,530 --> 00:01:54,799
reading rating wise I wish

31
00:01:54,799 --> 00:01:58,100
are we have the better Skeel a to talk
about exploits

32
00:01:58,100 --> 00:02:01,359
and you know the kind of interesting
unexpected computation

33
00:02:01,359 --> 00:02:06,090
but so it goes but can of I

34
00:02:06,090 --> 00:02:09,179
the slogan for the day is that import

35
00:02:09,179 --> 00:02:12,959
is a program any input

36
00:02:12,959 --> 00:02:16,950
that is sufficiently complex eased

37
00:02:16,950 --> 00:02:20,730
really just like the bytecode to

38
00:02:20,730 --> 00:02:24,970
the code that out process is this import
and

39
00:02:24,970 --> 00:02:28,610
every exploit isn't exercise in
programming that

40
00:02:28,610 --> 00:02:31,989
weird a virtual machine that you find

41
00:02:31,989 --> 00:02:36,120
up in yet art and

42
00:02:36,120 --> 00:02:39,120
it really just doesn't matter

43
00:02:39,120 --> 00:02:43,970
what its input our introductory example

44
00:02:43,970 --> 00:02:49,409
he is up elf meta-data

45
00:02:49,409 --> 00:02:52,590
serving as a program

46
00:02:52,590 --> 00:02:55,680
that can actually arbitrary rewrite

47
00:02:55,680 --> 00:03:00,060
memory so if you think of how you load
your

48
00:03:00,060 --> 00:03:03,150
code I you've got I

49
00:03:03,150 --> 00:03:07,329
this symbol table and

50
00:03:07,329 --> 00:03:11,010
you've got their location entries and
together

51
00:03:11,010 --> 00:03:14,450
the are TLD up

52
00:03:14,450 --> 00:03:18,849
reads them and based on what you find

53
00:03:18,849 --> 00:03:22,599
in the symbol table occasionally entries
it rewrites

54
00:03:22,599 --> 00:03:26,420
your code and your day so

55
00:03:26,420 --> 00:03:29,719
you she one piece of code reading the
input

56
00:03:29,719 --> 00:03:32,790
and the other I

57
00:03:32,790 --> 00:03:37,159
writing into memory so you ask yourself

58
00:03:37,159 --> 00:03:40,650
what happens if the writing would go

59
00:03:40,650 --> 00:03:43,909
right on top of the data that is being
read

60
00:03:43,909 --> 00:03:47,739
we'll are if you've been through a
traditional computer science course

61
00:03:47,739 --> 00:03:51,760
this should remind you of the table the
Turing machine there is some

62
00:03:51,760 --> 00:03:55,650
finite state automaton that reads and
writes to the tape

63
00:03:55,650 --> 00:03:58,909
and the condom for the tape are the
program and

64
00:03:58,909 --> 00:04:02,040
the compensate the tape at the same time
get transformed

65
00:04:02,040 --> 00:04:06,390
and this is the most to a
computationally capable thing

66
00:04:06,390 --> 00:04:10,170
are which is up like unto a modern
processor

67
00:04:10,170 --> 00:04:13,260
and so you ask yourself what happens

68
00:04:13,260 --> 00:04:17,880
if you take the symbol table entries in
the relocation entries

69
00:04:17,880 --> 00:04:21,700
Witcher just I she structures that are
embedded

70
00:04:21,700 --> 00:04:24,840
in the binary and I

71
00:04:24,840 --> 00:04:29,010
you right a program Dean

72
00:04:29,010 --> 00:04:32,150
these structures a low

73
00:04:32,150 --> 00:04:35,170
since I you she

74
00:04:35,170 --> 00:04:39,050
you can read and you can write at into

75
00:04:39,050 --> 00:04:42,880
but the area that your next period will
come from

76
00:04:42,880 --> 00:04:47,280
the apt up Mike actually give you all
sorts of interesting

77
00:04:47,280 --> 00:04:51,080
loops & brain chips as the

78
00:04:51,080 --> 00:04:55,120
really cater goes through their
allocation entries

79
00:04:55,120 --> 00:04:59,050
and of patches up the code %uh that's
not loaded

80
00:04:59,050 --> 00:05:02,180
at the address out where it was meant to
be loaded

81
00:05:02,180 --> 00:05:05,289
I if you're using flr them

82
00:05:05,289 --> 00:05:09,080
are you know that's this is how your
program gets reelected

83
00:05:09,080 --> 00:05:12,389
and there has been of at great bit Cove

84
00:05:12,389 --> 00:05:15,520
up wonderful hacker research in

85
00:05:15,520 --> 00:05:20,800
using this for a full-scale Shan in
using this as a Sr it OVA

86
00:05:20,800 --> 00:05:24,000
on the Packer over code

87
00:05:24,000 --> 00:05:27,160
up but I the

88
00:05:27,160 --> 00:05:30,180
basic know the most basic observation is
that

89
00:05:30,180 --> 00:05:34,330
those relocation entries content for
arithmetic

90
00:05:34,330 --> 00:05:37,400
so they cover all the different types
you see the types

91
00:05:37,400 --> 00:05:40,789
in the table on the right and I that

92
00:05:40,789 --> 00:05:44,460
type drives

93
00:05:44,460 --> 00:05:48,110
either mm copy or remember you're right

94
00:05:48,110 --> 00:05:51,449
with edition Aki en la cops

95
00:05:51,449 --> 00:05:54,819
Ian the appropriate data structures

96
00:05:54,819 --> 00:05:58,840
so you see the structure of the bytecode

97
00:05:58,840 --> 00:06:01,960
in the input you she that this

98
00:06:01,960 --> 00:06:06,240
type bite a in blue actually drives

99
00:06:06,240 --> 00:06:10,000
for something like a virtual machine

100
00:06:10,000 --> 00:06:13,630
the end these up on relegation types

101
00:06:13,630 --> 00:06:17,330
are likely implementations of the what
code that virtual machine

102
00:06:17,330 --> 00:06:21,120
and this was done by up redecoration
fear of Beck's

103
00:06:21,120 --> 00:06:24,810
in our lab if she's here I can see

104
00:06:24,810 --> 00:06:28,780
I'll have her wave you no okay have

105
00:06:28,780 --> 00:06:33,310
its and you can see that I E N you can I
see the tools

106
00:06:33,310 --> 00:06:36,949
a.m. the I details of how all this is
implemented

107
00:06:36,949 --> 00:06:41,800
in her report Satori on get a cop but
the takeaway is that

108
00:06:41,800 --> 00:06:48,000
book once the data is complex enough
it's really just like the bytecode

109
00:06:48,000 --> 00:06:52,110
and so I it doesn't matter

110
00:06:52,110 --> 00:06:55,509
whether that meta-data is a red

111
00:06:55,509 --> 00:06:58,970
by software or buy hardware

112
00:06:58,970 --> 00:07:03,180
so we're going to show this the very
same effect

113
00:07:03,180 --> 00:07:06,910
4 up the processor

114
00:07:06,910 --> 00:07:10,259
for the in terms of the processor that
you know you would I

115
00:07:10,259 --> 00:07:15,680
imagine to be a part way microcode
partly silicon

116
00:07:15,680 --> 00:07:20,409
and so who's this guy

117
00:07:20,409 --> 00:07:24,759
he is regarding this are kettles

118
00:07:24,759 --> 00:07:29,000
swinging on its chain over the hearth
a.m.

119
00:07:29,000 --> 00:07:33,060
because at that little a blow off steam
coming out to

120
00:07:33,060 --> 00:07:37,349
all the cattle which what is named after
him

121
00:07:37,349 --> 00:07:41,759
a unit affinity the unit have energy
this is James what we're

122
00:07:41,759 --> 00:07:45,060
I he was curated for it by his

123
00:07:45,060 --> 00:07:50,669
elders for just wasting his time looking
at Campus

124
00:07:50,669 --> 00:07:53,879
and of course keep thats and

125
00:07:53,879 --> 00:07:57,789
out we're going to push this as far as
it will go and hopefully

126
00:07:57,789 --> 00:08:01,419
you know when we're on into an obstacle

127
00:08:01,419 --> 00:08:05,159
too high for us other people will a
takeover

128
00:08:05,159 --> 00:08:08,360
missus somewhere in siberia as you can
imagine

129
00:08:08,360 --> 00:08:11,789
I well and will let you build the snow
plow

130
00:08:11,789 --> 00:08:15,560
that can get through call those

131
00:08:15,560 --> 00:08:19,689
am still picks so

132
00:08:19,689 --> 00:08:23,470
consider the x86 mm you

133
00:08:23,470 --> 00:08:28,270
people art to what to think of this as
some sort of a lookup table

134
00:08:28,270 --> 00:08:31,759
virtual to physical hot and

135
00:08:31,759 --> 00:08:35,900
just it's just like a look lookup table
up on the hardware

136
00:08:35,900 --> 00:08:39,069
it's not it takes

137
00:08:39,070 --> 00:08:43,390
complex data and performs complex logic
want

138
00:08:43,390 --> 00:08:47,270
it's got States and transitions
everything that's got states and

139
00:08:47,270 --> 00:08:48,050
transitions

140
00:08:48,050 --> 00:08:52,240
is something like a processor may be a
weird one

141
00:08:52,240 --> 00:08:56,620
it's not comment on it's a machine in
the show you ask yourself

142
00:08:56,620 --> 00:08:59,930
we'll if this thing takes complex

143
00:08:59,930 --> 00:09:03,870
input data can be programmed with that
input data

144
00:09:03,870 --> 00:09:07,769
you know Mamu operations a right memory

145
00:09:07,769 --> 00:09:10,910
they also read memory you've got the
tape

146
00:09:10,910 --> 00:09:13,990
to every time with a drinking game right
I'm

147
00:09:13,990 --> 00:09:18,899
every time I see import

148
00:09:18,899 --> 00:09:24,230
well of an can drink on stage is such a
fancy hotel

149
00:09:24,230 --> 00:09:28,050
%uh so why do this

150
00:09:28,050 --> 00:09:32,300
we're looking for work the actual
computational models

151
00:09:32,300 --> 00:09:35,800
of computers that surrounds I'll what

152
00:09:35,800 --> 00:09:39,640
the you classical computer science
proves of Europe's

153
00:09:39,640 --> 00:09:45,250
about what is computable church in
touring the founders of the field

154
00:09:45,250 --> 00:09:49,209
did that for us but their computer
science when

155
00:09:49,209 --> 00:09:53,860
away from the for question or what is
computable in particular platform

156
00:09:53,860 --> 00:09:57,700
and started doing other important things
whereas hackers

157
00:09:57,700 --> 00:10:01,079
%uh remained in that niche and

158
00:10:01,079 --> 00:10:04,959
built programs we had programs called
exploits

159
00:10:04,959 --> 00:10:09,680
for up platforms do you think that the
platform was not meant

160
00:10:09,680 --> 00:10:13,560
to do and I thats

161
00:10:13,560 --> 00:10:17,240
really why we do this we're eliciting

162
00:10:17,240 --> 00:10:20,640
what actual computational model is in
the

163
00:10:20,640 --> 00:10:23,660
machine so

164
00:10:23,660 --> 00:10:26,779
let's take a look at the

165
00:10:26,779 --> 00:10:31,910
CPU up with its memory management unit

166
00:10:31,910 --> 00:10:35,510
I if you might be aware if you know exit
26 their various

167
00:10:35,510 --> 00:10:39,290
tables that drive the memory trapping in
the

168
00:10:39,290 --> 00:10:42,870
and memory translation in the protected
mode cell

169
00:10:42,870 --> 00:10:46,100
up interrupt descriptor table the

170
00:10:46,100 --> 00:10:49,230
a global descriptor tape interrupt
descriptor table

171
00:10:49,230 --> 00:10:53,310
is where are you find the addresses the
vectors

172
00:10:53,310 --> 00:10:57,029
for things like the page fault with a
double-fault

173
00:10:57,029 --> 00:11:00,029
I that happens when you fail to dispatch

174
00:11:00,029 --> 00:11:03,560
a page fault then you have the page
tables

175
00:11:03,560 --> 00:11:07,139
a with all sorts of interesting bits a
scattered through them that cause the

176
00:11:07,139 --> 00:11:08,690
trap that cause the page fault

177
00:11:08,690 --> 00:11:12,560
to fire and most importantly

178
00:11:12,560 --> 00:11:16,750
way and you I have a fort

179
00:11:16,750 --> 00:11:20,389
you right bites

180
00:11:20,389 --> 00:11:24,139
12 what the mm you the CPU

181
00:11:24,139 --> 00:11:28,620
sinks is the stick so a page call him
for

182
00:11:28,620 --> 00:11:31,950
needs to you some information about the
fault

183
00:11:31,950 --> 00:11:35,389
in the memory now what would happen

184
00:11:35,389 --> 00:11:39,139
if that memory was we're

185
00:11:39,139 --> 00:11:42,339
the tables that you're reading for all

186
00:11:42,339 --> 00:11:45,649
are you could put the processor

187
00:11:45,649 --> 00:11:48,800
into a sort of 8 weird loop

188
00:11:48,800 --> 00:11:51,839
in which mill instruction is

189
00:11:51,839 --> 00:11:56,519
successfully dispatched we're every step
that you take

190
00:11:56,519 --> 00:12:00,610
quizzes either at page fault or a double
fucked

191
00:12:00,610 --> 00:12:06,040
xiao long as you formulate your tables
the GDT the page tables the I DT

192
00:12:06,040 --> 00:12:09,389
up properly you let you can never give
the scoop

193
00:12:09,389 --> 00:12:13,690
at it turns out you can use your

194
00:12:13,690 --> 00:12:16,880
tables that described the memory
translation

195
00:12:16,880 --> 00:12:20,550
drive the MU as the input as the program

196
00:12:20,550 --> 00:12:23,940
boring bits and pieces all the mm you
logic

197
00:12:23,940 --> 00:12:27,370
and it turns out to be touring complete
as we hope to show

198
00:12:27,370 --> 00:12:31,519
to convince you of so

199
00:12:31,519 --> 00:12:35,630
this up the situation is exactly the
same

200
00:12:35,630 --> 00:12:38,959
as a the year elf example

201
00:12:38,959 --> 00:12:42,540
from our previous talks that we started
with again

202
00:12:42,540 --> 00:12:46,070
you have on input

203
00:12:46,070 --> 00:12:50,760
and that is red and you have the ability
to write memory

204
00:12:50,760 --> 00:12:54,820
possibly all over that input that is red
and so you have

205
00:12:54,820 --> 00:12:57,820
are the beginnings ove a

206
00:12:57,820 --> 00:13:01,339
a Turing machine and then it turns out
that the allergic

207
00:13:01,339 --> 00:13:06,690
in the mm he is complete enough at to
make this an actual to reach

208
00:13:06,690 --> 00:13:09,820
so om on

209
00:13:09,820 --> 00:13:13,699
you know this is the principal now let's
take the deep dive

210
00:13:13,699 --> 00:13:16,920
you can actually water that I am

211
00:13:16,920 --> 00:13:20,970
t-shirt with a I fall investor will sell

212
00:13:20,970 --> 00:13:24,290
with a poll just in time I can we asked
never

213
00:13:24,290 --> 00:13:27,910
meant to of have a in Putnam

214
00:13:27,910 --> 00:13:31,209
in any way I'm the let us have all this

215
00:13:31,209 --> 00:13:36,639
I mean Bay they may call this processors
that purpose have all this fun

216
00:13:36,639 --> 00:13:40,300
indeed and the surface and they're going
to do a quick overview of the various

217
00:13:40,300 --> 00:13:43,930
tweaks that we're going to do together
horribly into making

218
00:13:43,930 --> 00:13:48,370
Howard terrible terrible Turing machine
that runs without any CPU instructions

219
00:13:48,370 --> 00:13:53,370
and the first step is that we're going
to go back in the old of days of DOS

220
00:13:53,370 --> 00:13:56,990
be full into 286 in 386 days

221
00:13:56,990 --> 00:14:00,260
when people were beginning to rate we'll
be talking operating systems for the

222
00:14:00,260 --> 00:14:02,100
Intel processor

223
00:14:02,100 --> 00:14:05,790
Rd first virtual memory system that in
forever Intel in fermented

224
00:14:05,790 --> 00:14:09,019
is the segmentation based system which
is

225
00:14:09,019 --> 00:14:13,480
nowadays completely unused the in the
book real multitasking was it ever used

226
00:14:13,480 --> 00:14:14,589
it was

227
00:14:14,589 --> 00:14:18,930
was some all versions if I was to are
however

228
00:14:18,930 --> 00:14:21,769
for backwards compatibility this has
always been present in the process is

229
00:14:21,769 --> 00:14:22,360
and

230
00:14:22,360 --> 00:14:25,920
hecker Packers have always found this on
use mechanism and

231
00:14:25,920 --> 00:14:30,730
me too clever thinks and so it's
actually still a valid memory to

232
00:14:30,730 --> 00:14:34,040
our translation mechanism and its the
first step it happens from every virtual

233
00:14:34,040 --> 00:14:34,480
address

234
00:14:34,480 --> 00:14:38,899
on its long way to becoming an actual
physical address on the ramparts

235
00:14:38,899 --> 00:14:43,009
a the segmentation mechanism is driven
by the global descriptor table

236
00:14:43,009 --> 00:14:46,019
which is a table that is low can be
located anywhere memory and just

237
00:14:46,019 --> 00:14:47,009
contains

238
00:14:47,009 --> 00:14:50,870
are a pipe white entries describing
segments

239
00:14:50,870 --> 00:14:54,949
segments are tagged or type regions of
memory

240
00:14:54,949 --> 00:14:57,959
they contain a base address in a size
just the Rangers

241
00:14:57,959 --> 00:15:01,910
memory addresses however they also
contain often disregarded

242
00:15:01,910 --> 00:15:05,560
type field we can specify something is
meant to be a stack address

243
00:15:05,560 --> 00:15:09,720
already here region or some piece of
code

244
00:15:09,720 --> 00:15:12,699
and then there is registered as in the
process according to allow you to

245
00:15:12,699 --> 00:15:15,990
specify which second is supposed to be
used for could fetch is what is supposed

246
00:15:15,990 --> 00:15:17,350
to use for a sec addresses

247
00:15:17,350 --> 00:15:22,259
excesses and so on and so forth long
story short this is what makes the ranks

248
00:15:22,259 --> 00:15:25,860
rings 320 the bits in those

249
00:15:25,860 --> 00:15:28,959
descriptor entries indeed

250
00:15:28,959 --> 00:15:32,589
and afterwards

251
00:15:32,589 --> 00:15:35,329
Intel added the second memory protection
mechanism that is the one that is

252
00:15:35,329 --> 00:15:38,660
actually used in all the operating
system issues day today including

253
00:15:38,660 --> 00:15:42,190
this Mac running the presentation
software that is the traditional virtual

254
00:15:42,190 --> 00:15:43,220
memory

255
00:15:43,220 --> 00:15:46,680
are system backed by page tables

256
00:15:46,680 --> 00:15:51,709
are where there is a multilayer
hierarchy of tables at both provide

257
00:15:51,709 --> 00:15:55,300
a lookup table translation function from
virtual addresses

258
00:15:55,300 --> 00:15:59,220
to physical addresses however they also
contain a pretty interesting bits that

259
00:15:59,220 --> 00:16:01,550
specify with this memory supposed to do

260
00:16:01,550 --> 00:16:04,600
for example if this memory supposed to
be accessed by use a mod code a bike

261
00:16:04,600 --> 00:16:05,550
rental code

262
00:16:05,550 --> 00:16:08,779
and whether it's supposed to be read or
written to you and in new extensions of

263
00:16:08,779 --> 00:16:11,630
the architect to when it's supposed to
be executive or not

264
00:16:11,630 --> 00:16:14,740
and it gives us all these rules that
need to hold on to page tables for

265
00:16:14,740 --> 00:16:16,589
memory access to successfully

266
00:16:16,589 --> 00:16:20,759
are go through if any of these rules
have to be violated

267
00:16:20,759 --> 00:16:26,610
Aug the processor interrupts execution
and traps into the kernel

268
00:16:26,610 --> 00:16:31,220
also we hit the page fault at the page
fault is just about the most

269
00:16:31,220 --> 00:16:35,310
overloaded the most hard-working up

270
00:16:35,310 --> 00:16:39,300
interrupt descriptor table entry ever
because so many

271
00:16:39,300 --> 00:16:42,620
hocker hardening patches have used that
have are

272
00:16:42,620 --> 00:16:45,740
I'll placed there that some would check
I

273
00:16:45,740 --> 00:16:49,649
over that because really you kept in
force %uh a pointy see

274
00:16:49,649 --> 00:16:53,040
that you can't track the Vans that Darla

275
00:16:53,040 --> 00:16:56,190
relevant to and so I

276
00:16:56,190 --> 00:16:59,889
we're going to go through a few of those
examples because those were really the

277
00:16:59,889 --> 00:17:01,149
inspirations

278
00:17:01,149 --> 00:17:05,750
for the bigger for work and the first
our project that we drew inspiration

279
00:17:05,750 --> 00:17:08,440
from is the open while project by solar
design a

280
00:17:08,440 --> 00:17:14,010
back 1999 what's it is I want to do is
he wanted to prevent the very simple

281
00:17:14,010 --> 00:17:17,390
r-spec overflow attack presented for
example in the Frank paper stack

282
00:17:17,390 --> 00:17:20,589
smashing for fun and profit

283
00:17:20,589 --> 00:17:24,410
and admit you have defected it was this
unused segmentation mechanism sitting in

284
00:17:24,410 --> 00:17:27,870
a process it was then was in the silicon
and microcode however no one was really

285
00:17:27,870 --> 00:17:29,550
using it

286
00:17:29,550 --> 00:17:33,030
traditionally the segmentation make this
was completely disabled by just loading

287
00:17:33,030 --> 00:17:36,140
all 50 segment registers with exactly
the same value

288
00:17:36,140 --> 00:17:39,540
that just made them an identity
transform are

289
00:17:39,540 --> 00:17:43,730
why this has the feature to both
remember addresses by adding an offset

290
00:17:43,730 --> 00:17:44,310
to them

291
00:17:44,310 --> 00:17:48,600
and limiting what memory exit I regions
a valid by comparing them

292
00:17:48,600 --> 00:17:52,690
against the limit what ok molded is it
set the limit if the code segment

293
00:17:52,690 --> 00:17:55,720
to just be loaded and if the user space
addresses

294
00:17:55,720 --> 00:17:59,810
up leaving just enough space for the
stack at the top of the user chooses to

295
00:17:59,810 --> 00:18:01,420
not be in the code segment

296
00:18:01,420 --> 00:18:04,590
so whenever you would have and instruct
a instruction fetch

297
00:18:04,590 --> 00:18:07,810
from the code segment that would cause a
are a pitfall

298
00:18:07,810 --> 00:18:11,360
was imitation fault we're from the
cradle would check with the last execute

299
00:18:11,360 --> 00:18:12,250
instructions

300
00:18:12,250 --> 00:18:15,870
effort and if it was a return it would
see that oh well you just returning to

301
00:18:15,870 --> 00:18:16,640
spec memory

302
00:18:16,640 --> 00:18:20,300
that's probably going to be bad it turns
out the GCC into some weird conditions

303
00:18:20,300 --> 00:18:24,100
emits code to support fancy languages
like objective-c

304
00:18:24,100 --> 00:18:27,420
that actually will return to the stack
so they have some hacky work around

305
00:18:27,420 --> 00:18:28,800
state to

306
00:18:28,800 --> 00:18:31,840
still support the legacy code

307
00:18:31,840 --> 00:18:36,740
or but debt that way they can defend
against that one very specific attack

308
00:18:36,740 --> 00:18:38,070
every turn to the sack

309
00:18:38,070 --> 00:18:41,150
this was the first non execute double
stack the first step

310
00:18:41,150 --> 00:18:46,730
which actually overloaded the trapping
mechanism to do forty-six Department

311
00:18:46,730 --> 00:18:49,950
the next one was up packs

312
00:18:49,950 --> 00:18:53,410
Impax is really justice amazing
encyclopedia

313
00:18:53,410 --> 00:18:56,420
all the things that you can do we have

314
00:18:56,420 --> 00:19:02,240
a process or a such as it had the
emulation of the Annex bit before the

315
00:19:02,240 --> 00:19:04,090
annex bit actually appeared

316
00:19:04,090 --> 00:19:08,500
mp4 and it still maintains that one a
whole bunch of processes

317
00:19:08,500 --> 00:19:11,750
processors that are don't have that

318
00:19:11,750 --> 00:19:15,040
and I just what happened there

319
00:19:15,040 --> 00:19:18,200
was a very creative you over the

320
00:19:18,200 --> 00:19:22,490
memory translation leukocyte buffers

321
00:19:22,490 --> 00:19:26,630
am this I he is for

322
00:19:26,630 --> 00:19:31,140
the entry before the this is the page
table entry

323
00:19:31,140 --> 00:19:34,260
in the pitch table entry %uh the blue
bit I

324
00:19:34,260 --> 00:19:37,860
is the user supervisor I that was used
to

325
00:19:37,860 --> 00:19:40,880
up muddle the non execute doubled it and

326
00:19:40,880 --> 00:19:44,320
trap one trying to finish a code

327
00:19:44,320 --> 00:19:47,460
from pages where this that was set to so

328
00:19:47,460 --> 00:19:50,860
the Intel Arshi PU mm you has

329
00:19:50,860 --> 00:19:55,050
to separate silicon pass one for fishing

330
00:19:55,050 --> 00:19:59,560
instructions other for fetching data

331
00:19:59,560 --> 00:20:03,320
and are there was a normal process
called flex 86

332
00:20:03,320 --> 00:20:07,580
that try to use that I to detect self
modifying code and this is where the

333
00:20:07,580 --> 00:20:09,030
creators of tax

334
00:20:09,030 --> 00:20:13,350
got their inspiration for the page in X
are very using the

335
00:20:13,350 --> 00:20:16,600
update Oct he'll be the TLB

336
00:20:16,600 --> 00:20:20,470
and they're using the fact that you can
be decent current axed

337
00:20:20,470 --> 00:20:23,860
from the beach table entry to the keel
be

338
00:20:23,860 --> 00:20:27,960
contains the latest successfully
translated

339
00:20:27,960 --> 00:20:31,100
at page table entries up for

340
00:20:31,100 --> 00:20:35,300
foster look up of course if every lookup
had to go through the page tables

341
00:20:35,300 --> 00:20:38,840
you now you would pay with three or four

342
00:20:38,840 --> 00:20:42,250
up memory accesses per one memory access
that

343
00:20:42,250 --> 00:20:46,450
wouldn't do so that's why out once P

344
00:20:46,450 --> 00:20:49,500
a referenced six sheets it gets lifted

345
00:20:49,500 --> 00:20:53,850
into the TLB and if it was a day to
fetch I through the data segment for

346
00:20:53,850 --> 00:20:54,630
example

347
00:20:54,630 --> 00:20:57,790
it would be lifted into the DT org

348
00:20:57,790 --> 00:21:01,850
now the user supervisor bit was supposed
initially to protect

349
00:21:01,850 --> 00:21:05,720
a supervisor data from being 'em

350
00:21:05,720 --> 00:21:09,260
seen by users opts

351
00:21:09,260 --> 00:21:13,980
but I they built this team Genia scheme

352
00:21:13,980 --> 00:21:17,940
that actually uses the

353
00:21:17,940 --> 00:21:21,680
hardware logic of the TLB translation

354
00:21:21,680 --> 00:21:25,730
it's an additional potomac on to enforce
40°c just think about how wonderful

355
00:21:25,730 --> 00:21:26,270
this

356
00:21:26,270 --> 00:21:30,530
its I you've got this extra state in the
processor

357
00:21:30,530 --> 00:21:34,850
because the there are actually physical
bits there's eCopy being made

358
00:21:34,850 --> 00:21:39,420
and you use it in the way it worked was
like this

359
00:21:39,420 --> 00:21:42,430
a detox of Fitch

360
00:21:42,430 --> 00:21:46,010
has to go through the TLD

361
00:21:46,010 --> 00:21:49,810
an instruction fish has to go through I
see the ideal be

362
00:21:49,810 --> 00:21:53,830
UK so when you look up and get dressed
in the TLB

363
00:21:53,830 --> 00:21:57,560
are you have eCopy ove the

364
00:21:57,560 --> 00:22:00,920
page table entry if you've seen that
memory before:

365
00:22:00,920 --> 00:22:05,780
and if the user bit the sect then you
get the tax issue just sale on through

366
00:22:05,780 --> 00:22:09,510
this is a normal day to access through
the detail be

367
00:22:09,510 --> 00:22:12,740
if the page table entry is not in the
TLB

368
00:22:12,740 --> 00:22:15,890
then you have to walk the page tables

369
00:22:15,890 --> 00:22:19,610
a and you always Sep that up $50,000

370
00:22:19,610 --> 00:22:22,610
in the page tables should always causes

371
00:22:22,610 --> 00:22:25,810
a fault so

372
00:22:25,810 --> 00:22:28,850
when you I'm so

373
00:22:28,850 --> 00:22:32,080
I'll remember when you're trying to say

374
00:22:32,080 --> 00:22:35,210
shop to that address or fish from that
address

375
00:22:35,210 --> 00:22:38,920
the PT and you don't have that in the
achille be

376
00:22:38,920 --> 00:22:42,450
the PT will cause a fault because it
always does with this

377
00:22:42,450 --> 00:22:47,590
setting over the bed now you hit the
page fall camp

378
00:22:47,590 --> 00:22:51,090
now something better the page will
hamper steps im

379
00:22:51,090 --> 00:22:54,350
examines the key IT if

380
00:22:54,350 --> 00:22:58,180
it is of an attempt to fiction
instruction jumped instruction

381
00:22:58,180 --> 00:23:02,630
then you terminate I you've just tried
to

382
00:23:02,630 --> 00:23:05,700
a access the not execute doubled it

383
00:23:05,700 --> 00:23:09,190
a you try to fetch from a page

384
00:23:09,190 --> 00:23:13,770
but with the emulated not execute a bit
set if it's not an instruction that's

385
00:23:13,770 --> 00:23:15,720
normal date

386
00:23:15,720 --> 00:23:20,290
into before while bite lead

387
00:23:20,290 --> 00:23:23,490
just before that Youssef the

388
00:23:23,490 --> 00:23:27,570
user supervisor bit 21 which allows this

389
00:23:27,570 --> 00:23:31,360
%uh bite viewed to succeed that
populates

390
00:23:31,360 --> 00:23:34,590
the TLB lifts the

391
00:23:34,590 --> 00:23:37,800
a entry in the two into the TLB we've

392
00:23:37,800 --> 00:23:42,070
via right a user bit set

393
00:23:42,070 --> 00:23:45,110
van you mediately concept see

394
00:23:45,110 --> 00:23:48,390
descent can I text your page table entry

395
00:23:48,390 --> 00:23:53,340
which always quite as a fault in the di
TLP

396
00:23:53,340 --> 00:23:57,080
I entry which out never causes a fault
which

397
00:23:57,080 --> 00:24:01,330
allows the excesses to sail through the
additional beauty of this

398
00:24:01,330 --> 00:24:04,560
is that you lose I a four months

399
00:24:04,560 --> 00:24:07,780
one the page table entries but

400
00:24:07,780 --> 00:24:11,360
you don't lose performance on the TLB
lookups because the TLB

401
00:24:11,360 --> 00:24:14,490
always has a valid setting out this bit

402
00:24:14,490 --> 00:24:17,580
and it's just the page tables that has
the

403
00:24:17,580 --> 00:24:21,360
setting that allows you to examine what
that

404
00:24:21,360 --> 00:24:25,550
ob memory access was a Fitch of an
instruction where they tack

405
00:24:25,550 --> 00:24:30,320
a reference and you keep them different
corner axed

406
00:24:30,320 --> 00:24:33,550
and one step technique was understood

407
00:24:33,550 --> 00:24:36,610
a whole bunch of interesting uses ovett
arose

408
00:24:36,610 --> 00:24:39,900
for example there was an only berle I E

409
00:24:39,900 --> 00:24:43,230
that plugin for all the debug

410
00:24:43,230 --> 00:24:46,750
that a lot to trap on this complicated

411
00:24:46,750 --> 00:24:49,880
condition that the code

412
00:24:49,880 --> 00:24:54,340
at pH just written to with fish
instruction from

413
00:24:54,340 --> 00:24:57,580
so the a

414
00:24:57,580 --> 00:25:02,270
decompressor order the the update you
the the obfuscator just

415
00:25:02,270 --> 00:25:05,360
finished working the on Packard just
finished working

416
00:25:05,360 --> 00:25:09,550
and nao are the code is that the contact
is being jump to

417
00:25:09,550 --> 00:25:12,750
veces %uh emulating a trapping condition

418
00:25:12,750 --> 00:25:16,470
that x86 does not support but

419
00:25:16,470 --> 00:25:19,670
it was Don with this dyssynchrony is a
shiner love

420
00:25:19,670 --> 00:25:23,520
page table a and the TLB

421
00:25:23,520 --> 00:25:27,620
but of course you ask yourself if you
really want to be evil

422
00:25:27,620 --> 00:25:31,870
them why %uh stop at the

423
00:25:31,870 --> 00:25:35,840
out by a stop at a setting what
manipulating one bit

424
00:25:35,840 --> 00:25:38,960
you know this US bit you could actually

425
00:25:38,960 --> 00:25:42,150
on Sep the a December nice

426
00:25:42,150 --> 00:25:45,940
the physical page frame

427
00:25:45,940 --> 00:25:49,160
that you are are referring to you can
get

428
00:25:49,160 --> 00:25:52,920
eight different physical page free into
the TTL beat

429
00:25:52,920 --> 00:25:57,150
versus the page dick so what happens to
them

430
00:25:57,150 --> 00:26:00,850
is that if you access that page

431
00:26:00,850 --> 00:26:04,270
as code you go to

432
00:26:04,270 --> 00:26:07,950
one-page one physical Frank if you
accesses s

433
00:26:07,950 --> 00:26:11,730
data say if you're an anti-virus

434
00:26:11,730 --> 00:26:15,320
and you are on skinning it for

435
00:26:15,320 --> 00:26:20,740
badness as as hopeless as a stock really
is

436
00:26:20,740 --> 00:26:24,050
I you just get a different peach because

437
00:26:24,050 --> 00:26:29,830
I the kilby entry is disorganized from
the page table entry from the actual

438
00:26:29,830 --> 00:26:31,260
peace table entry

439
00:26:31,260 --> 00:26:34,780
and you are %uh just basically you

440
00:26:34,780 --> 00:26:38,610
getting a different think

441
00:26:38,610 --> 00:26:42,230
and show what we see here

442
00:26:42,230 --> 00:26:47,800
is design patterns something worthy of
the name

443
00:26:47,800 --> 00:26:52,370
in which those trapping bits are used as
labels

444
00:26:52,370 --> 00:26:55,870
as tags: spread through are

445
00:26:55,870 --> 00:26:59,460
several places in memory M causing the
trap

446
00:26:59,460 --> 00:27:05,510
at just the right conditions in the page
whole him being there to pick it up

447
00:27:05,510 --> 00:27:09,230
and show that way you can come by traps

448
00:27:09,230 --> 00:27:12,870
to have M %uh and/or or conditions

449
00:27:12,870 --> 00:27:15,920
trapped on this a.m. that

450
00:27:15,920 --> 00:27:19,310
which again the MU doesn't give you

451
00:27:19,310 --> 00:27:22,540
you can labeled a at UT ref

452
00:27:22,540 --> 00:27:26,150
a plugin of tax uses that to prevent

453
00:27:26,150 --> 00:27:31,010
the colonel from reading user data if
you saw any key to stalk

454
00:27:31,010 --> 00:27:34,210
them this is one of the ways to attack
the current

455
00:27:34,210 --> 00:27:37,930
that he mentioned up intel's introducing
the US map

456
00:27:37,930 --> 00:27:43,040
SM this map futures into the processor
that make it easier and more efficient

457
00:27:43,040 --> 00:27:46,720
but tax had that I am before it was a we
have

458
00:27:46,720 --> 00:27:50,560
tagging pages by intent the insides are
you colonel

459
00:27:50,560 --> 00:27:54,030
are not supposed to look at the user
memory on the a small piece of your

460
00:27:54,030 --> 00:27:56,220
kernel that dispatches the school's

461
00:27:56,220 --> 00:28:01,240
I has any business looking into the apt
when it imports the arguments

462
00:28:01,240 --> 00:28:04,740
so it's really coming back

463
00:28:04,740 --> 00:28:09,190
the to the or tagged architectures where
memory was not just bites

464
00:28:09,190 --> 00:28:13,820
where you could say which bites in
memory served which purports

465
00:28:13,820 --> 00:28:18,660
and you know the in Exhibit is just a
tiny little step towards that

466
00:28:18,660 --> 00:28:23,160
as you can imagine there are all sorts
of data flows that you want to block

467
00:28:23,160 --> 00:28:27,640
only fume you out what date what all
those bites that are

468
00:28:27,640 --> 00:28:31,150
public reading equal in memory are meant
for

469
00:28:31,150 --> 00:28:34,820
and the only way to do so is to create
the tag a label

470
00:28:34,820 --> 00:28:39,610
four pages you can't do that but you can
spread through the trapping bits

471
00:28:39,610 --> 00:28:43,060
and as you overload the page will
himmler I you

472
00:28:43,060 --> 00:28:46,310
can then make sense over those and a
trap the

473
00:28:46,310 --> 00:28:49,810
undesirable slips to this is the
inspiration

474
00:28:49,810 --> 00:28:53,880
we thought that there's a reason well
this worked

475
00:28:53,880 --> 00:28:58,570
in the reason is that there is enough
computational power in the ImageView

476
00:28:58,570 --> 00:29:02,140
and we ask ourselves well how much

477
00:29:02,140 --> 00:29:05,290
what can we program with that

478
00:29:05,290 --> 00:29:08,780
and with that and then we would

479
00:29:08,780 --> 00:29:11,990
and that gave us a whole lot of tweaks
that we could potentially

480
00:29:11,990 --> 00:29:16,450
build a machine from all that state how
we also need some not to do it together

481
00:29:16,450 --> 00:29:19,540
and that's where the mechanism that
actually

482
00:29:19,540 --> 00:29:23,160
implements the trap handling comes in
they waited too crude oil gets from

483
00:29:23,160 --> 00:29:24,630
normal program execution

484
00:29:24,630 --> 00:29:30,510
into exit into executing an all-powerful
page fault handler

485
00:29:30,510 --> 00:29:34,470
Dera in on each other in fact three
different ways of handling interrupts

486
00:29:34,470 --> 00:29:37,440
and conditions to have them a very
similar in one of them is by now

487
00:29:37,440 --> 00:29:38,540
complete the

488
00:29:38,540 --> 00:29:42,550
unused d typical way that all modern
operating systems use for

489
00:29:42,550 --> 00:29:46,370
day-to-day interrupt handling is called
the trap gate or interrupt gate

490
00:29:46,370 --> 00:29:49,480
its if you've ever programs in the old
days on DOS

491
00:29:49,480 --> 00:29:52,630
in protected mode its are similar to a
fault

492
00:29:52,630 --> 00:29:56,800
jump you just specify new code segment
which usually would be to Crennel's code

493
00:29:56,800 --> 00:29:58,270
segment about causing itching to

494
00:29:58,270 --> 00:30:02,310
transition from ring 3 touring 0 and
that address within the current

495
00:30:02,310 --> 00:30:05,660
that's just like a regular function call
and in fact Intel

496
00:30:05,660 --> 00:30:09,520
tries to be nice to operating system
developers and makes this behaves just

497
00:30:09,520 --> 00:30:10,850
like a regular function call

498
00:30:10,850 --> 00:30:15,900
which an x86 involves premises being
pushed to the stack

499
00:30:15,900 --> 00:30:19,590
dairies a special configuration region
in memory don't get to later on the

500
00:30:19,590 --> 00:30:23,280
actually contain spec segments featuring
if you switch to a different

501
00:30:23,280 --> 00:30:26,490
arm ring like the Opera are lecturing
for

502
00:30:26,490 --> 00:30:31,250
3 touring 0 the processes microcode will
be nice enough for you to look up

503
00:30:31,250 --> 00:30:34,480
where you operating system kernel stack
is supposed to be

504
00:30:34,480 --> 00:30:38,920
and will push various values about the
old state if the execution

505
00:30:38,920 --> 00:30:42,000
to the new stack frame which you can
then just use like regular function

506
00:30:42,000 --> 00:30:45,540
arguments in your page for Bentley

507
00:30:45,540 --> 00:30:47,800
however this makes quite a few
assumptions about the state of the

508
00:30:47,800 --> 00:30:48,610
processes

509
00:30:48,610 --> 00:30:51,660
for example that tusk state segment has
to be said

510
00:30:51,660 --> 00:30:54,870
that contains information but with a
kernel stack is has to be said well it's

511
00:30:54,870 --> 00:30:55,780
stacked

512
00:30:55,780 --> 00:30:58,860
the code segment that is specified in
the ITT entry

513
00:30:58,860 --> 00:31:02,310
has to be a valid code segment and

514
00:31:02,310 --> 00:31:06,460
various rules about the Rings being
transition have to hold and also ditt

515
00:31:06,460 --> 00:31:07,020
entering

516
00:31:07,020 --> 00:31:10,940
has to be there in the first place all
of this could potentially fail usually

517
00:31:10,940 --> 00:31:12,910
only when there's a kernel bug

518
00:31:12,910 --> 00:31:16,970
and into his best has a special
mechanism for handling such box named

519
00:31:16,970 --> 00:31:20,080
I the double-fault the double fault is
when you have

520
00:31:20,080 --> 00:31:23,720
any sort of air condition occurring
while trying to get from

521
00:31:23,720 --> 00:31:26,950
execution to the into context however if
the first

522
00:31:26,950 --> 00:31:30,600
instruction if the interrupt Headley
itself fails that's not a double fault

523
00:31:30,600 --> 00:31:32,090
but just another page what which

524
00:31:32,090 --> 00:31:36,280
is a fact that will make used to but it
allows us to actually keep looping on

525
00:31:36,280 --> 00:31:36,830
faults

526
00:31:36,830 --> 00:31:40,060
pharmacy so you she there is the
situation

527
00:31:40,060 --> 00:31:44,040
out with the chicken an egg in order to
candle in memory fault

528
00:31:44,040 --> 00:31:48,490
you have to be able to write to memory
those fights ago on the second describe

529
00:31:48,490 --> 00:31:49,490
the condition

530
00:31:49,490 --> 00:31:52,490
whale out what if you can try to memory

531
00:31:52,490 --> 00:31:56,260
but you have a deeper fault I and then
of course

532
00:31:56,260 --> 00:32:00,050
a even that may fail because that also
needs to write memory

533
00:32:00,050 --> 00:32:03,860
envied from memory so then you go into
the triple fault otherwise known as

534
00:32:03,860 --> 00:32:05,380
rebooked

535
00:32:05,380 --> 00:32:08,880
but I you know in order to capture fault

536
00:32:08,880 --> 00:32:13,240
you have to are ok ok was a fault

537
00:32:13,240 --> 00:32:17,030
there's a beginning of a clock in there
you will see that will

538
00:32:17,030 --> 00:32:20,950
learned to oscillate between page called
and the double-fault

539
00:32:20,950 --> 00:32:25,010
as if this were a processor clock

540
00:32:25,010 --> 00:32:28,540
and that's when tells hardware task
switching mechanism comes in

541
00:32:28,540 --> 00:32:32,300
nowadays a modern operating systems this
is only used for displaying the last

542
00:32:32,300 --> 00:32:33,110
blue sky to

543
00:32:33,110 --> 00:32:36,720
board for displaying a blue screen of
death for a kernel panic as the last

544
00:32:36,720 --> 00:32:37,640
resort

545
00:32:37,640 --> 00:32:41,420
but effect is in very well designed
mechanism that allows you to wrist

546
00:32:41,420 --> 00:32:44,730
to save and later on restore almost

547
00:32:44,730 --> 00:32:49,110
all of the processes context at least
the wait was in the 386

548
00:32:49,110 --> 00:32:52,630
you dude is by specifying a special kind
of entry in the interrupt descriptor

549
00:32:52,630 --> 00:32:53,550
table

550
00:32:53,550 --> 00:32:57,540
which does not contain an address like
the regular traffic it does but only is

551
00:32:57,540 --> 00:32:59,950
selective for it ask state segment

552
00:32:59,950 --> 00:33:02,970
for TSS which isn't index

553
00:33:02,970 --> 00:33:06,180
into the global descriptor table that we
saw earlier with the old

554
00:33:06,180 --> 00:33:10,570
segmentation mechanism and in there 0.2
this large

555
00:33:10,570 --> 00:33:15,330
reason if memory 104 bytes long on 32 in
32-bit mode

556
00:33:15,330 --> 00:33:19,140
that contains all the registers of the
processor

557
00:33:19,140 --> 00:33:23,270
and the receive use microcode has
features for saving all the processes

558
00:33:23,270 --> 00:33:25,220
state into what into such a region

559
00:33:25,220 --> 00:33:29,820
and for restoring old CPU state from
memory

560
00:33:29,820 --> 00:33:33,270
so now you're seeing the patter you've
got the fault

561
00:33:33,270 --> 00:33:37,330
which can actually switched asks which
can actually right

562
00:33:37,330 --> 00:33:40,480
although this a large block of
information

563
00:33:40,480 --> 00:33:43,770
yet if can actually write that where
ever

564
00:33:43,770 --> 00:33:47,120
the table the GDT is pointing to

565
00:33:47,120 --> 00:33:50,520
show you she you can really gf right

566
00:33:50,520 --> 00:33:55,020
over the memory that you are viewing and
that is driving the next step

567
00:33:55,020 --> 00:33:59,430
of your fault dispatching in this is
exactly what we're going to use

568
00:33:59,430 --> 00:34:03,380
and the actual my crew program is
running while switching to the task

569
00:34:03,380 --> 00:34:06,790
is that at first when interrupts accrues
and

570
00:34:06,790 --> 00:34:11,040
a tough skated specified in the in the
ATT interrupt descriptor table

571
00:34:11,040 --> 00:34:15,399
the CPU will save on a fit state to the
location pointed to by special register

572
00:34:15,399 --> 00:34:21,030
di Pasqua register on the next this is
actually the only pic peace

573
00:34:21,030 --> 00:34:24,129
of this entire mechanism is actually
used during bootup

574
00:34:24,129 --> 00:34:27,950
the kernel at one point sets the task
register up to contain a somewhat millet

575
00:34:27,950 --> 00:34:28,790
task

576
00:34:28,790 --> 00:34:32,120
so it is able to handle double faults
and independent message and off to its

577
00:34:32,120 --> 00:34:34,300
anti mechanism is forgotten about

578
00:34:34,300 --> 00:34:38,480
to think of this as a dark silicone up
that is dark to Linux

579
00:34:38,480 --> 00:34:44,159
but I is the very bones our page for
liberator

580
00:34:44,159 --> 00:34:48,300
and it will then walk all of these are
in memory tables

581
00:34:48,300 --> 00:34:52,300
find a new task perform some basic
validations on that task

582
00:34:52,300 --> 00:34:57,280
are and actually check if there is if
this task has already been used before

583
00:34:57,280 --> 00:35:00,360
it with the so-called busy bit because
they want to prevent looping and we'll

584
00:35:00,360 --> 00:35:02,530
get back to how we work around this

585
00:35:02,530 --> 00:35:06,970
it will then load on a fit state from
memory and to push the error occurred to

586
00:35:06,970 --> 00:35:08,290
the stack

587
00:35:08,290 --> 00:35:11,880
because they might still be some other
parameters that you

588
00:35:11,880 --> 00:35:15,560
want to save about the previous
execution state so it actually pushes

589
00:35:15,560 --> 00:35:16,390
for bites

590
00:35:16,390 --> 00:35:20,220
to the sack and it will then begin
executing the new AP

591
00:35:20,220 --> 00:35:25,140
however that is after the entire
interrupt anything logic has occurred

592
00:35:25,140 --> 00:35:29,310
and if that new your IP happens to be an
invalid memory location or any of the

593
00:35:29,310 --> 00:35:34,050
page table constraints are violated that
will just cause another page fault

594
00:35:34,050 --> 00:35:37,960
and not in fact a double-fault and he'll
have to insert

595
00:35:37,960 --> 00:35:42,150
a brief digression a true gem that we
found in the Intel manuals

596
00:35:42,150 --> 00:35:46,540
are in one of two dark and musty pages
that no one has probably looked at the

597
00:35:46,540 --> 00:35:49,560
last 10 years because again this
mechanism is not used

598
00:35:49,560 --> 00:35:52,630
our printed out home that contains a
description of the

599
00:35:52,630 --> 00:35:56,950
Intel processor if specifically warns
against

600
00:35:56,950 --> 00:36:00,020
placing this task state segment on the
page boundary

601
00:36:00,020 --> 00:36:03,890
because the way it was apparently done
in all processes

602
00:36:03,890 --> 00:36:07,210
is that the process it looks up the
physical address corresponding to the

603
00:36:07,210 --> 00:36:08,120
first fight

604
00:36:08,120 --> 00:36:13,830
if this 104 by long tss and then reads
104 continues physical bites from there

605
00:36:13,830 --> 00:36:17,460
at the time this was not a security
problem because to excess and if these

606
00:36:17,460 --> 00:36:19,300
data structures you had to be in the
kernel

607
00:36:19,300 --> 00:36:22,010
and if the kernel could perform reached
a physical memory well it was no problem

608
00:36:22,010 --> 00:36:23,180
because the kernel

609
00:36:23,180 --> 00:36:27,740
is designed to do that however what we
were thinking at the time is wouldn't it

610
00:36:27,740 --> 00:36:29,910
be nice if you had a virtualized
environment

611
00:36:29,910 --> 00:36:33,380
and you could play city SS and the last
fight for page somewhere

612
00:36:33,380 --> 00:36:37,400
and then re 203

613
00:36:37,400 --> 00:36:40,790
by its that have on the next physical
page if you manage to get in the

614
00:36:40,790 --> 00:36:44,590
fragmentation that might be completely
different p.m.

615
00:36:44,590 --> 00:36:48,160
and we we have quite excited that we had
found the sleeping dragon there

616
00:36:48,160 --> 00:36:51,930
and we're making plans to you know or
own all the PC to

617
00:36:51,930 --> 00:36:56,240
however den we did the whole science
thing and the reality check came in

618
00:36:56,240 --> 00:37:00,640
because by now Intel CPU's actually
translate this double work but doubled

619
00:37:00,640 --> 00:37:04,190
and perform the safing which again is an
optimist

620
00:37:04,190 --> 00:37:07,790
because this mechanism is no longer use
the optimization of reading 104

621
00:37:07,790 --> 00:37:11,020
continuous physical bites is no longer
necessary so this has been pushed off

622
00:37:11,020 --> 00:37:13,290
some went to the microcode with safe
they'd up

623
00:37:13,290 --> 00:37:17,650
so instead of a sleeping dragon all we
had is this sleeping the new

624
00:37:17,650 --> 00:37:23,010
however as as is the tradition cats can
also be quite interesting in this

625
00:37:23,010 --> 00:37:26,920
fact in fact allows us to build our
computer for eggs and rocks

626
00:37:26,920 --> 00:37:32,020
some must maintain that cats are more
interesting than dragons

627
00:37:32,020 --> 00:37:35,070
course it is oh

628
00:37:35,070 --> 00:37:38,400
taking little bit of a step back usually
when people talk about Turing machines

629
00:37:38,400 --> 00:37:39,650
they talk about things like

630
00:37:39,650 --> 00:37:43,450
tapes and and find its aight machine and

631
00:37:43,450 --> 00:37:46,680
a lot of complicated logic but in fact
you don't need of that all you need is a

632
00:37:46,680 --> 00:37:48,730
single CPU instruction

633
00:37:48,730 --> 00:37:52,270
%uh that's a few instructions little bit
convoluted its

634
00:37:52,270 --> 00:37:55,830
in theory contexts they talk about
different and French negative

635
00:37:55,830 --> 00:37:58,780
there is a wonderful book on this that
if you have access to an economic driver

636
00:37:58,780 --> 00:38:00,330
you can easily get

637
00:38:00,330 --> 00:38:03,690
however if you intend to purchase it for
itself is a tiny bit expensive for the

638
00:38:03,690 --> 00:38:06,840
monks information contained herein and
Wikipedia provides just about the same

639
00:38:06,840 --> 00:38:08,380
things

640
00:38:08,380 --> 00:38:13,290
the instruction is just that

641
00:38:13,290 --> 00:38:16,740
you have are fine it's a different one

642
00:38:16,740 --> 00:38:19,370
if you want to be doing complete a
theoretically infinite set of memory

643
00:38:19,370 --> 00:38:20,540
locations

644
00:38:20,540 --> 00:38:24,160
and you determined any one of these
memory locations and French

645
00:38:24,160 --> 00:38:27,650
21 21 instruction if you have an
underflow to another one

646
00:38:27,650 --> 00:38:31,910
if you don't have an underflow to make
his practical we also add a move

647
00:38:31,910 --> 00:38:36,380
I one instruction because here simple
decry entrenched negative architecture

648
00:38:36,380 --> 00:38:37,200
do we do move

649
00:38:37,200 --> 00:38:41,160
issue overflow integers which tends to
be quite bad for performance if you

650
00:38:41,160 --> 00:38:42,630
actually want to do a demo

651
00:38:42,630 --> 00:38:46,480
however the move that's not the problem
or

652
00:38:46,480 --> 00:38:49,480
and I will go in and introduce the
various actors

653
00:38:49,480 --> 00:38:52,890
now in fermentation if the Turing
machine

654
00:38:52,890 --> 00:38:56,310
Rd your IP address just have to process
will always point

655
00:38:56,310 --> 00:39:01,080
at invalid memory so FF FF FF FF FF

656
00:39:01,080 --> 00:39:04,240
if if

657
00:39:04,240 --> 00:39:07,990
um so at no point will they ever be

658
00:39:07,990 --> 00:39:11,530
a valid CPU instruction be executed
because it never is a place with us if

659
00:39:11,530 --> 00:39:12,950
you could actually fetch

660
00:39:12,950 --> 00:39:16,000
and every instruction it always tries to
you and sees okay let's handle an

661
00:39:16,000 --> 00:39:16,570
interrupt

662
00:39:16,570 --> 00:39:20,670
do some fits my Cricut magic and in fact
just to drive into another

663
00:39:20,670 --> 00:39:25,000
by actually the same wall but with a
slightly different internal state

664
00:39:25,000 --> 00:39:29,790
I'll to get our determined reuse the
fact that this 45 error code is pushed

665
00:39:29,790 --> 00:39:31,100
onto the stack

666
00:39:31,100 --> 00:39:36,240
so we have for each memory location have
fun such tasks state segment

667
00:39:36,240 --> 00:39:40,220
and pushing that error code d criminals
respect for the value at that location

668
00:39:40,220 --> 00:39:41,460
by four

669
00:39:41,460 --> 00:39:44,940
and the branch is if it's less than for
whites are not

670
00:39:44,940 --> 00:39:48,460
if it's less than four bytes the spec
which would fail because the spec point

671
00:39:48,460 --> 00:39:53,360
is actually a separate interrupt 'cause
by having a sec for the wrap-around

672
00:39:53,360 --> 00:39:56,650
thereby we would cause a double-fault if
to determine succeeds

673
00:39:56,650 --> 00:39:59,690
to push succeeds that would be another
paid for

674
00:39:59,690 --> 00:40:03,170
that's how we get our branch are we keep
a glow

675
00:40:03,170 --> 00:40:06,510
we keep a single global descriptor table
around that will describe

676
00:40:06,510 --> 00:40:11,430
fifty structures however we'll use the
will use different page tables to map

677
00:40:11,430 --> 00:40:14,930
different things around and from time so
we can have a large number of

678
00:40:14,930 --> 00:40:16,190
instructions then with

679
00:40:16,190 --> 00:40:19,520
be allowed into relatively small table

680
00:40:19,520 --> 00:40:23,200
in particular op one tss descriptor

681
00:40:23,200 --> 00:40:27,200
their instruction in one ID cheaper
instruction

682
00:40:27,200 --> 00:40:31,260
that turns out to be a necessity of
bouncing between the page fault in the

683
00:40:31,260 --> 00:40:32,220
double-fault

684
00:40:32,220 --> 00:40:36,050
out whose addresses are contained
therein

685
00:40:36,050 --> 00:40:40,990
indeed and because the TSS allows us to
switch out page faults we always put

686
00:40:40,990 --> 00:40:44,240
our target for branch

687
00:40:44,240 --> 00:40:49,000
I for French not taking in 2d into a
14-page publication and we put

688
00:40:49,000 --> 00:40:52,230
our top our target tss for the taking
branch that is

689
00:40:52,230 --> 00:40:57,100
and underflow in the in the on
interrupted location

690
00:40:57,100 --> 00:41:00,680
and that and by remembering memory at

691
00:41:00,680 --> 00:41:03,680
out through the instructions which that
is loading

692
00:41:03,680 --> 00:41:07,350
memory I went deep interrupt handler
does is it loads memory from one virtual

693
00:41:07,350 --> 00:41:07,760
address

694
00:41:07,760 --> 00:41:10,910
and saves it back to that same virtual
address however in the meantime it

695
00:41:10,910 --> 00:41:12,600
switches at page tables

696
00:41:12,600 --> 00:41:15,860
so while it may be writing back to the
same virtual address we can map that

697
00:41:15,860 --> 00:41:18,090
same virtual address two different
physical address

698
00:41:18,090 --> 00:41:22,100
thereby also giving us a free move
through changing at the mapping function

699
00:41:22,100 --> 00:41:26,380
when the instruction changes the world
changers view of the entire memory

700
00:41:26,380 --> 00:41:27,260
changes

701
00:41:27,260 --> 00:41:32,050
on with the a specially formulated
PayPal table paper page table

702
00:41:32,050 --> 00:41:35,440
well on we might into the net

703
00:41:35,440 --> 00:41:39,240
yes indeed and wanna and luckily also

704
00:41:39,240 --> 00:41:43,060
DTS contains a whole other bunch of
fights that will be written and read

705
00:41:43,060 --> 00:41:46,210
up read and written from memory which

706
00:41:46,210 --> 00:41:50,000
allows is to avoid some fifty
unfortunate and from tation constraints

707
00:41:50,000 --> 00:41:53,510
that the real silicon has so we can look
around some problems

708
00:41:53,510 --> 00:41:57,250
and to keep you interested we have
prepared a little demo which is

709
00:41:57,250 --> 00:42:00,100
what we believe to be the world's most
efficient implementation of the game of

710
00:42:00,100 --> 00:42:00,680
life

711
00:42:00,680 --> 00:42:03,750
because it uses you receive you
instructions

712
00:42:03,750 --> 00:42:07,800
to date argument on-screen cable

713
00:42:07,800 --> 00:42:11,550
cable perfect

714
00:42:11,550 --> 00:42:15,830
we have connection I A made my
sacrifices to demagogues last night at a

715
00:42:15,830 --> 00:42:19,100
bar I hope they still hold

716
00:42:19,100 --> 00:42:25,640
right now it's putting

717
00:42:25,640 --> 00:42:29,910
okay so what is the state is it first
execute some normal kernel code

718
00:42:29,910 --> 00:42:33,230
that will set up all the tables in the
correct way I A

719
00:42:33,230 --> 00:42:37,230
have released the tool that
automatically generates a Seco double

720
00:42:37,230 --> 00:42:38,870
set up tables in the proper way

721
00:42:38,870 --> 00:42:42,230
from a more sane intermediate language

722
00:42:42,230 --> 00:42:45,330
and that will then cause a single page
for which will compute an entire

723
00:42:45,330 --> 00:42:46,780
duration of the game of life

724
00:42:46,780 --> 00:42:51,360
it will then bounce are Reese use that
same double-fault mechanism to restore

725
00:42:51,360 --> 00:42:55,670
sanity briefly and execute a series of
move instructions that will just copy

726
00:42:55,670 --> 00:42:57,490
things from all over the memory

727
00:42:57,490 --> 00:43:00,820
into the BJ framebuffer and then

728
00:43:00,820 --> 00:43:03,970
just cause another page for at the end
of that instruction stream

729
00:43:03,970 --> 00:43:07,120
which will go back and computer neck
situation the game of life

730
00:43:07,120 --> 00:43:13,050
0 in fact does you wondering about her
performance this might be

731
00:43:13,050 --> 00:43:16,890
this also includes a massive delay loop
that burn something like five hundred

732
00:43:16,890 --> 00:43:19,230
million cycles between each iteration

733
00:43:19,230 --> 00:43:23,020
if you run the underlay pushing you
don't see anything you to see a white

734
00:43:23,020 --> 00:43:23,790
box

735
00:43:23,790 --> 00:43:30,790
or white and now let's go back to talk

736
00:43:39,270 --> 00:43:41,520
let's see how this works great city

737
00:43:41,520 --> 00:43:45,050
and if there's one trick that alone from
circuits and occasionally while teaching

738
00:43:45,050 --> 00:43:46,300
have to life

739
00:43:46,300 --> 00:43:49,600
so will begin with a small fairy-tale
version of this

740
00:43:49,600 --> 00:43:53,050
and then slowly introduce all the info
implementation constraints

741
00:43:53,050 --> 00:43:57,370
that we have to work around and
oftentimes we use fairly excessive

742
00:43:57,370 --> 00:44:01,040
methods of violence to deal with various
in from station constraints

743
00:44:01,040 --> 00:44:04,710
so %uh sergei sorry mentioned

744
00:44:04,710 --> 00:44:07,990
the inspection process love

745
00:44:07,990 --> 00:44:11,470
bouncing between page faults in double
faults that we have is somewhat like the

746
00:44:11,470 --> 00:44:14,450
clock for machine in fact

747
00:44:14,450 --> 00:44:18,030
the page what's happening is the rising
edge of the clock

748
00:44:18,030 --> 00:44:21,250
the first thing it does is right back
the

749
00:44:21,250 --> 00:44:25,060
current value body current immediate
value for our calculation

750
00:44:25,060 --> 00:44:28,270
into the output of the last instruction

751
00:44:28,270 --> 00:44:31,830
by saving the TSS fate at the beginning
of an interrupt

752
00:44:31,830 --> 00:44:34,970
Senate bill remember love this

753
00:44:34,970 --> 00:44:38,490
is basically a silicon a microcode

754
00:44:38,490 --> 00:44:42,070
microcode of course up but I'll love
this

755
00:44:42,070 --> 00:44:46,990
is heart coded in the CPU in the MU

756
00:44:46,990 --> 00:44:51,030
cell all you're doing is you're
triggering those canned

757
00:44:51,030 --> 00:44:54,370
those operations with your fault
conditions

758
00:44:54,370 --> 00:44:58,980
indeed and then this if you will proceed
to load

759
00:44:58,980 --> 00:45:02,850
a new execution safe from the TSS and

760
00:45:02,850 --> 00:45:06,490
attempt to save that fault error code
onto the stack which

761
00:45:06,490 --> 00:45:10,190
we just use for its the comment of TSP
if that

762
00:45:10,190 --> 00:45:14,850
determined of fails we get we raise a
double-fault

763
00:45:14,850 --> 00:45:18,460
which will cause us to go back to the
very beginning after execution and

764
00:45:18,460 --> 00:45:20,720
safety is estate again and cause another
clock

765
00:45:20,720 --> 00:45:25,420
if however it succeeds we have just take
rented

766
00:45:25,420 --> 00:45:29,350
out the second to buy for and will

767
00:45:29,350 --> 00:45:33,430
then cause another page fault by setting
by jumping to an invalid instruction

768
00:45:33,430 --> 00:45:36,990
again giving rise to another page 4
o'clock

769
00:45:36,990 --> 00:45:40,950
going through this slowly if this would
be the initial state

770
00:45:40,950 --> 00:45:45,200
this if you set up relatively sane
Leawood sect 4-2 somewhere in kernel

771
00:45:45,200 --> 00:45:45,770
space

772
00:45:45,770 --> 00:45:49,030
our except for the fact that ended

773
00:45:49,030 --> 00:45:52,810
tusk register for example the Linux
kernel has set up the just points to an

774
00:45:52,810 --> 00:45:57,030
otherwise unused region of memory except
that the CPU

775
00:45:57,030 --> 00:46:01,550
except that we have prepared and I DTE
Energy DT

776
00:46:01,550 --> 00:46:05,890
with the tools we have released and
something into kernel cause it's a page

777
00:46:05,890 --> 00:46:06,310
fault

778
00:46:06,310 --> 00:46:10,300
this might either be cleverly hidden
somewhere that you cleared the present

779
00:46:10,300 --> 00:46:13,760
clear one of the various bits in the
mapping that mexico into

780
00:46:13,760 --> 00:46:17,240
virtual memory well you just jump to an
address that's going to be invalid

781
00:46:17,240 --> 00:46:21,510
like zero or less that then causes a
page fault

782
00:46:21,510 --> 00:46:24,690
which will cause the CPU to walk to
interrupt descriptor table

783
00:46:24,690 --> 00:46:29,530
CEO this is an interrupt 14th so here we
have a tough skate going to task one of

784
00:46:29,530 --> 00:46:29,860
eight

785
00:46:29,860 --> 00:46:34,180
first for the tasks which we look at the
task register

786
00:46:34,180 --> 00:46:38,080
see okay currently running task f8 so we
have to actually do the full switch

787
00:46:38,080 --> 00:46:41,510
West pasqua fake owed its energy ETF

788
00:46:41,510 --> 00:46:45,150
points it is are points in the first yes
SNG

789
00:46:45,150 --> 00:46:48,950
and so all of the state have to see if
you was copied into memory from the

790
00:46:48,950 --> 00:46:49,590
Registers

791
00:46:49,590 --> 00:46:54,610
wish also the manual says

792
00:46:54,610 --> 00:46:59,940
and venice is OK now we want to go to
toss one of eight foreign trip ends:

793
00:46:59,940 --> 00:47:01,270
again

794
00:47:01,270 --> 00:47:05,580
walks the IDPs and the GB team and sees
okay this is from the second tss entry

795
00:47:05,580 --> 00:47:06,210
we have

796
00:47:06,210 --> 00:47:11,430
let's go in and they would all have to
register as Bruce

797
00:47:11,430 --> 00:47:15,550
from Eric suddenly all of the world has
suddenly all of the world has changed

798
00:47:15,550 --> 00:47:18,850
revenues that point do we have a new
task register we could even have a new

799
00:47:18,850 --> 00:47:19,490
ERP

800
00:47:19,490 --> 00:47:22,740
in our case the AP still going to be
invalid because we don't quite

801
00:47:22,740 --> 00:47:28,710
want to cuddle to execute yep as a side
effect of this it also sets

802
00:47:28,710 --> 00:47:31,850
a busy bit in the global descriptor
table which will be quite annoying

803
00:47:31,850 --> 00:47:36,450
get to in a few sites another site
effective loading in New TSS is that the

804
00:47:36,450 --> 00:47:39,110
page table base register cf3 has been

805
00:47:39,110 --> 00:47:42,130
reloaded so the entire view of the
memory

806
00:47:42,130 --> 00:47:45,540
and thereby to see views entire of you
have suddenly changed new instruction

807
00:47:45,540 --> 00:47:46,680
it's a brave new world

808
00:47:46,680 --> 00:47:50,420
and so whatever the TSS

809
00:47:50,420 --> 00:47:54,110
and she's in the GATT may have be the
first yes essentially might now

810
00:47:54,110 --> 00:47:57,310
coincidentally in this example points in
the same tss as before

811
00:47:57,310 --> 00:48:01,020
but the second one now points to
completely different entry and so we can

812
00:48:01,020 --> 00:48:03,460
do branching between the two different
instructions

813
00:48:03,460 --> 00:48:08,640
and because the second tss entry that is
currently be

814
00:48:08,640 --> 00:48:11,760
current essa entry points to different
occasion memory

815
00:48:11,760 --> 00:48:15,680
the value that we just read before the
0x4 will be determined it and then

816
00:48:15,680 --> 00:48:18,400
stored into that he is essentially which
is completely different

817
00:48:18,400 --> 00:48:22,220
location in memory as I mentioned here
unfortunately happens to be this busy

818
00:48:22,220 --> 00:48:23,950
bit

819
00:48:23,950 --> 00:48:27,440
the in normal into normal mode of
operation you occasionally want to

820
00:48:27,440 --> 00:48:30,860
return from interrupt because you would
like your program execution to resume

821
00:48:30,860 --> 00:48:34,280
so Intel being nice and kind and not
wanting everyone to screw it up

822
00:48:34,280 --> 00:48:37,360
as they did before the days of DOS day
provided

823
00:48:37,360 --> 00:48:40,390
especial return instruction from an
interrupt that will

824
00:48:40,390 --> 00:48:43,820
look at all the structures and restore
the state just before the entrapment be

825
00:48:43,820 --> 00:48:45,630
tried in los instruction

826
00:48:45,630 --> 00:48:48,770
Dept means there is eighty chain

827
00:48:48,770 --> 00:48:52,100
link stored within the tusks state
segments if that

828
00:48:52,100 --> 00:48:55,860
link everywhere to become a new it would
become an endless loop into wanted to

829
00:48:55,860 --> 00:48:58,780
avoid that said at a busy but
specifically to prohibit

830
00:48:58,780 --> 00:49:01,970
anyone from moving interrupts

831
00:49:01,970 --> 00:49:05,350
and if this bit is set in a GDT
descriptor

832
00:49:05,350 --> 00:49:10,240
for TSS the it will actually cause
another double-fault

833
00:49:10,240 --> 00:49:15,080
all this actually 52 10 weeks is
artistically to implement isn't iMac is

834
00:49:15,080 --> 00:49:16,770
about eight-week suspending

835
00:49:16,770 --> 00:49:19,780
by a spent about eight weeks for going
out but trying out ways to clear that

836
00:49:19,780 --> 00:49:21,450
one bit

837
00:49:21,450 --> 00:49:25,330
and I had crazy scheme set up and they
all fail

838
00:49:25,330 --> 00:49:29,580
until you realize that are well playing
around with their debug and single seven

839
00:49:29,580 --> 00:49:30,640
things and reading to spec

840
00:49:30,640 --> 00:49:34,010
closely that the CPU always saves the
state before

841
00:49:34,010 --> 00:49:37,440
attempts to load a new tss so

842
00:49:37,440 --> 00:49:40,860
what we do is we map to the left of the
TSS

843
00:49:40,860 --> 00:49:44,980
over to the GATT if we picture he
discovers that just happened to be at

844
00:49:44,980 --> 00:49:46,760
the end of a page

845
00:49:46,760 --> 00:49:49,830
DDX dcx registers that

846
00:49:49,830 --> 00:49:53,240
weakened specifies pasta topped if the
task will be

847
00:49:53,240 --> 00:49:58,020
written over the GTX and if you
carefully crusty x86 for justice

848
00:49:58,020 --> 00:50:02,100
they leave the same content in their
except that one bit will be cleared

849
00:50:02,100 --> 00:50:05,530
so that's a nuclear option in other two
nucleus one bit

850
00:50:05,530 --> 00:50:10,570
when you click the entire renew the
entire top of pics

851
00:50:10,570 --> 00:50:15,210
but pay Italian again love this power
comes from front for free

852
00:50:15,210 --> 00:50:19,730
from the MU I you only need to set up
the menu to do this

853
00:50:19,730 --> 00:50:23,690
and odd that's where today the faulting

854
00:50:23,690 --> 00:50:27,490
comes it's and this is the first
faulting continuity of our little fairy

855
00:50:27,490 --> 00:50:30,850
tale explanation because because if this
mechanism suddenly all of these bits

856
00:50:30,850 --> 00:50:33,030
that were marked as busy before ended

857
00:50:33,030 --> 00:50:37,050
DTF and now locked is available because
they have always been overwritten

858
00:50:37,050 --> 00:50:40,570
when noting new task

859
00:50:40,570 --> 00:50:43,750
what to see if you will then proceed to
do is okay no

860
00:50:43,750 --> 00:50:46,960
tries to invoke the intro pender so
we're going to give it its one from

861
00:50:46,960 --> 00:50:47,460
midget

862
00:50:47,460 --> 00:50:50,840
actual cause it to determine just like
pointer

863
00:50:50,840 --> 00:50:54,410
oh and then it tries to jump to
construction which however so happens to

864
00:50:54,410 --> 00:50:54,800
be

865
00:50:54,800 --> 00:51:01,750
0xffff and therefore they'll be yet
another page fault

866
00:51:01,750 --> 00:51:05,320
giving us another clock up

867
00:51:05,320 --> 00:51:09,180
in this issue however then we notice oh
well dislike point is going to be all

868
00:51:09,180 --> 00:51:10,170
zeros

869
00:51:10,170 --> 00:51:13,240
so we actually come push again so

870
00:51:13,240 --> 00:51:17,970
let's try having a double-fault it will
then proceed to do the entire

871
00:51:17,970 --> 00:51:21,000
game again except this time we to
interrupt descriptor table 8

872
00:51:21,000 --> 00:51:25,330
as opposed to of 14 that we had before

873
00:51:25,330 --> 00:51:30,000
whipple loads a new state from the
double-fault

874
00:51:30,000 --> 00:51:33,900
and try to perform the same game I get
as you may have noticed when I was

875
00:51:33,900 --> 00:51:35,730
speeding up and skipping through the
slides

876
00:51:35,730 --> 00:51:39,070
that's usually a good indicator them
lying again

877
00:51:39,070 --> 00:51:42,690
because there is one other nastiness
that is in there

878
00:51:42,690 --> 00:51:45,760
I mention very much at the beginning
that the CPU only performs this task

879
00:51:45,760 --> 00:51:50,330
such a mechanism when you actually
switching to a different task

880
00:51:50,330 --> 00:51:53,880
so you can never jump from one
instruction to the same instruction to

881
00:51:53,880 --> 00:51:55,440
get

882
00:51:55,440 --> 00:51:59,010
which mathematically turns out to be
graph coloring problem

883
00:51:59,010 --> 00:52:02,570
so either you can write very generic
algorithm the tries to cut a

884
00:52:02,570 --> 00:52:06,890
craft Cali instruction stream spent
about an week attempting to do this

885
00:52:06,890 --> 00:52:11,940
all you can make your compiler just I'm
it bogus instructions at some point

886
00:52:11,940 --> 00:52:15,250
and duplicate the same instruction the
few places that graph coloring becomes

887
00:52:15,250 --> 00:52:16,040
trivial

888
00:52:16,040 --> 00:52:21,230
now imagine my horror I'm a refugee from
math might degrees in math have a PHD

889
00:52:21,230 --> 00:52:22,710
for for god sake

890
00:52:22,710 --> 00:52:26,350
and of course I run up from that into
the bit slammed

891
00:52:26,350 --> 00:52:29,750
a so that I can never see graph coloring
ref isomorphism

892
00:52:29,750 --> 00:52:33,360
that sort of rock problems and we find
this

893
00:52:33,360 --> 00:52:38,170
out weird machine that can be %ah gain
from the MU

894
00:52:38,170 --> 00:52:41,630
one teacher have I meister student come
back to me and say

895
00:52:41,630 --> 00:52:45,170
look there is this graph coloring
problem

896
00:52:45,170 --> 00:52:49,630
faces what happens if nah people to you
can never run from it

897
00:52:49,630 --> 00:52:54,630
and comes back and a slightly less
convoluted view this is if you look at

898
00:52:54,630 --> 00:52:55,090
the

899
00:52:55,090 --> 00:52:58,350
hypothetical front side bus which of
course no no longer exists because this

900
00:52:58,350 --> 00:52:59,040
HyperTransport

901
00:52:59,040 --> 00:53:04,060
cashing but when I actually do vile 7
through this example

902
00:53:04,060 --> 00:53:08,140
is it alright to physical address 0x8
the FFS 0

903
00:53:08,140 --> 00:53:11,540
initial think we had then redirects for

904
00:53:11,540 --> 00:53:16,750
from another location di cuenta by four
and ready to get another location

905
00:53:16,750 --> 00:53:19,760
and it will then feedback 0x8 up this

906
00:53:19,760 --> 00:53:23,100
state originally wrote back that's just
what

907
00:53:23,100 --> 00:53:26,250
a normal pension determined computer
which people apparently we're building

908
00:53:26,250 --> 00:53:28,240
in the fifties back when

909
00:53:28,240 --> 00:53:31,670
gates were really expensive rebuilding
would look like if it had your memory

910
00:53:31,670 --> 00:53:32,940
testrake

911
00:53:32,940 --> 00:53:36,460
so in fact we can compute just about any
function we want as long as you mind

912
00:53:36,460 --> 00:53:39,390
minor performance it when counting on a
clock and a massive performance

913
00:53:39,390 --> 00:53:43,290
improvement when counting instructions

914
00:53:43,290 --> 00:53:47,150
0 while making it extremely hard for
someone who does not have access to the

915
00:53:47,150 --> 00:53:49,920
FSP to figure out what precisely what's
going on

916
00:53:49,920 --> 00:53:52,570
we have a few other instance are
restrictions in there one of them is

917
00:53:52,570 --> 00:53:55,980
that you need to be to colonel to set
this up in the first place

918
00:53:55,980 --> 00:53:59,170
then there is a fun time restriction
that you can't have two double faults in

919
00:53:59,170 --> 00:54:01,100
a row to process it will reboot on you

920
00:54:01,100 --> 00:54:04,400
again I was doing craft things there
until

921
00:54:04,400 --> 00:54:07,600
I realize there was a waste of time and
just inserted

922
00:54:07,600 --> 00:54:11,300
another bogus instruction that will just
always succeed

923
00:54:11,300 --> 00:54:15,460
sometimes you can cheat me off it will
come back at me but

924
00:54:15,460 --> 00:54:19,950
sager's and our one instruction is
somewhat offer to use

925
00:54:19,950 --> 00:54:23,170
however we've written I've written a few
tools that might help you

926
00:54:23,170 --> 00:54:26,330
around is in actually allow you to
implement somewhat useful programs like

927
00:54:26,330 --> 00:54:27,960
the game of life

928
00:54:27,960 --> 00:54:31,300
the biggest restriction that we have so
far is that you can only work with the

929
00:54:31,300 --> 00:54:35,460
spec pointer if tough state segments
that are aligned in just the correct way

930
00:54:35,460 --> 00:54:36,350
that we have

931
00:54:36,350 --> 00:54:39,770
but I'm currently working on extending
it will so that allows a special

932
00:54:39,770 --> 00:54:43,430
read from or peek and poke construction
essentially so you can reach from

933
00:54:43,430 --> 00:54:47,220
up a tree bookish to put it in simple
world's awards we actually have a

934
00:54:47,220 --> 00:54:48,620
compiler

935
00:54:48,620 --> 00:54:53,440
of don't call it that pilot fix

936
00:54:53,440 --> 00:54:57,230
I loved the other interesting side
effect of this is that no simulated have

937
00:54:57,230 --> 00:54:58,130
tested

938
00:54:58,130 --> 00:55:02,220
informants all is this correctly I've
developed the sandbox

939
00:55:02,220 --> 00:55:06,470
so my particular compile I'm its coat it
happens to run a box because

940
00:55:06,470 --> 00:55:08,460
occasionally I like debugging things
because

941
00:55:08,460 --> 00:55:11,630
refundable however things like VMware

942
00:55:11,630 --> 00:55:16,150
and Sen tend to crash and burn as soon
as they see double faults being linked

943
00:55:16,150 --> 00:55:17,100
in interesting ways

944
00:55:17,100 --> 00:55:20,310
sometimes they just have an assertion
that fails sometimes they go off and do

945
00:55:20,310 --> 00:55:21,740
believe what he thinks

946
00:55:21,740 --> 00:55:26,070
and so you know reptiles are interesting
but there are so many of them

947
00:55:26,070 --> 00:55:30,180
with this repeal you can actually
compute the equivalent to what the

948
00:55:30,180 --> 00:55:31,820
processor can compute

949
00:55:31,820 --> 00:55:35,960
thats one big giant huge humongous

950
00:55:35,960 --> 00:55:39,210
enormous strength and so to take away
food

951
00:55:39,210 --> 00:55:42,270
does if you happen to be very white hats
womens anyone

952
00:55:42,270 --> 00:55:45,980
%uh is that you should ticket rules how
they handle obscure

953
00:55:45,980 --> 00:55:49,300
and we had edge cases the much more
interesting takeaways for those if you

954
00:55:49,300 --> 00:55:51,870
happen to be wearing black hats

955
00:55:51,870 --> 00:55:55,120
where you get a nice and big red pill
but

956
00:55:55,120 --> 00:55:58,310
then again you can probably fix that
read till so it works just slightly

957
00:55:58,310 --> 00:55:59,180
different

958
00:55:59,180 --> 00:56:03,930
Lee and analysis tools or you can just
use this as a really evil mechanism

959
00:56:03,930 --> 00:56:07,780
of transferring control win if you have
sacred would get

960
00:56:07,780 --> 00:56:11,790
because this text is anti mechanism
actually allows you to restore execution

961
00:56:11,790 --> 00:56:15,270
to an arbitrary location in memory

962
00:56:15,270 --> 00:56:18,920
using a mechanism that is completely not
supported by any of the debugging tools

963
00:56:18,920 --> 00:56:20,530
out there

964
00:56:20,530 --> 00:56:23,630
even while it may not be particularly
performance you can use it to

965
00:56:23,630 --> 00:56:27,030
balance execution between different
parts of your code well make it very

966
00:56:27,030 --> 00:56:29,390
hard for someone to trace what is going
on

967
00:56:29,390 --> 00:56:32,750
her some juniors be warned and

968
00:56:32,750 --> 00:56:37,920
forbid straw hats that don't fit either
into black Hathaway take a degree it's

969
00:56:37,920 --> 00:56:41,990
we're just excited that we found another
we had machine and if we working on

970
00:56:41,990 --> 00:56:43,350
making it

971
00:56:43,350 --> 00:56:46,690
artwork on 64 bit as well well loved his
legacy

972
00:56:46,690 --> 00:56:50,670
craft has been removed that's where the
idea of overwriting things with the spec

973
00:56:50,670 --> 00:56:52,100
point a comment comes in

974
00:56:52,100 --> 00:56:57,040
of and of course we always working on
expanding this come Tyler thing we have

975
00:56:57,040 --> 00:56:57,440
maybe

976
00:56:57,440 --> 00:57:00,580
reading LVM backend remember

977
00:57:00,580 --> 00:57:05,220
it's not about the collar over the
strong felt the weave

978
00:57:05,220 --> 00:57:10,570
of if and then we thank you for so
patiently

979
00:57:10,570 --> 00:57:17,570
listening to us

980
00:57:19,560 --> 00:57:22,540
out seemed to have three minutes for
questions

981
00:57:22,540 --> 00:57:25,700
we have few minutes for questions that
gets this time for one to two questions

982
00:57:25,700 --> 00:57:26,440
anyone

983
00:57:26,440 --> 00:57:33,440
shoeprints

984
00:57:36,110 --> 00:57:41,160
be sites to if you look to any examples
of with machines where

985
00:57:41,160 --> 00:57:44,670
things he thought might be with you
machines turned out not to be

986
00:57:44,670 --> 00:57:47,670
so it turned out not to be tearing
during a bleak

987
00:57:47,670 --> 00:57:50,700
up plenty in fact

988
00:57:50,700 --> 00:57:53,940
most of the exploits but never Inc

989
00:57:53,940 --> 00:57:58,040
I mean take any expectation to kick it
boroughs

990
00:57:58,040 --> 00:58:02,350
opcode it borrows logic from somewhere

991
00:58:02,350 --> 00:58:06,080
especially if it's entirely data-driven
so

992
00:58:06,080 --> 00:58:09,500
all I it borrows won the as much as it
needs

993
00:58:09,500 --> 00:58:12,600
and no one really up

994
00:58:12,600 --> 00:58:15,660
thought about those things up

995
00:58:15,660 --> 00:58:19,770
till approximately I 2000

996
00:58:19,770 --> 00:58:22,800
when up care on backtrack

997
00:58:22,800 --> 00:58:26,650
generalize the return to Lipsy trick at
the end

998
00:58:26,650 --> 00:58:30,620
%uh using Tim notions I'll chaining of
thick frames

999
00:58:30,620 --> 00:58:34,880
for what later became known as the
return oriented programming

1000
00:58:34,880 --> 00:58:38,220
actually wrote that pay you can ok

1001
00:58:38,220 --> 00:58:41,520
Fitch any program like that from the

1002
00:58:41,520 --> 00:58:45,750
those segments into no you know you
borrowed logic

1003
00:58:45,750 --> 00:58:49,230
so that was out the first time

1004
00:58:49,230 --> 00:58:52,650
way and up the jean-marie City the

1005
00:58:52,650 --> 00:58:56,600
the general nature over this is a
programming exercise

1006
00:58:56,600 --> 00:59:00,810
was are brought up in the hacker
community and the academic community

1007
00:59:00,810 --> 00:59:04,150
out when this was framed for them by a
sharp jump up with

1008
00:59:04,150 --> 00:59:08,060
in with his return a random programming
paper a quote one

1009
00:59:08,060 --> 00:59:12,250
a when he proved during completeness he
procuring completeness

1010
00:59:12,250 --> 00:59:15,890
of op a particular version over leaps
you

1011
00:59:15,890 --> 00:59:20,510
or other of %uh gadgets that we can
borrow from a particular know him she

1012
00:59:20,510 --> 00:59:24,020
in there made the academic community sit
up and take notice

1013
00:59:24,020 --> 00:59:28,480
it's not about malicious code you know I
used to read all those

1014
00:59:28,480 --> 00:59:32,080
on a machine learning papers about how
we detect malicious code

1015
00:59:32,080 --> 00:59:35,910
and lick good luck it's not about code
anymore

1016
00:59:35,910 --> 00:59:41,550
%ah finally the threat model has changed
its now militias computation

1017
00:59:41,550 --> 00:59:46,340
I'm and with computation comes the
question of characterizing it

1018
00:59:46,340 --> 00:59:50,180
but really you now up mostly you can

1019
00:59:50,180 --> 00:59:54,540
I'll the do nicely with a large enough

1020
00:59:54,540 --> 00:59:58,830
like for find the comment on where
pushdown automaton

1021
00:59:58,830 --> 01:00:02,200
like we say it like I said in the
beginning a Turing complete

1022
01:00:02,200 --> 01:00:06,250
is just are something like the rich
shout you dont always

1023
01:00:06,250 --> 01:00:09,270
want your exploitation to end up in the
actual shell

1024
01:00:09,270 --> 01:00:12,300
sometimes operating a few bits here and
there are enough

1025
01:00:12,300 --> 01:00:16,490
but what actually gives you the power to
overwrite those

1026
01:00:16,490 --> 01:00:20,300
is is the chaining is the a
computational model

1027
01:00:20,300 --> 01:00:24,670
that's contained in the input which act
as a program a

1028
01:00:24,670 --> 01:00:30,420
another question perhaps and believe
we're out of time home values in seconds

1029
01:00:30,420 --> 01:00:35,550
contact thanks nights weekly you doing
do I see him going up

1030
01:00:35,550 --> 01:00:41,450
now know how Phillips them both as well
for dis 2d still get the conference if

1031
01:00:41,450 --> 01:00:42,450
you have any questions

1032
01:00:42,450 --> 01:00:46,030
they'll be around thank you very much
thank you thank you

1033
01:00:46,030 --> 01:00:53,030
take a couple of minutes to hook up the
next weekend set him up on stage in will

1034
01:00:59,000 --> 01:01:00,890
continue right immediately after that

1035
01:01:00,890 --> 01:01:04,150
so we'll be back in no more than five
minutes

1036
01:01:04,150 --> 01:01:11,150
i dnt a pic thanks

1037
01:01:14,380 --> 01:01:17,790
saw I K and i cant make

1038
01:01:17,790 --> 01:01:21,290
going and time I move my

