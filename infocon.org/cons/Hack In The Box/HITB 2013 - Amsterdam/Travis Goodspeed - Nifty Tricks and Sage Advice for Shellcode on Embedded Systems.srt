1
00:00:18,700 --> 00:00:19,360
howdy all

2
00:00:19,360 --> 00:00:24,410
I am today I am going to be talking
about how to write shellcode

3
00:00:24,410 --> 00:00:28,890
for very small embedded systems and
we're going to be dealing mostly with

4
00:00:28,890 --> 00:00:32,340
8- and 16-bit embedded systems which
means that none of these has enough

5
00:00:32,340 --> 00:00:34,080
memory to run calcutta XE

6
00:00:34,080 --> 00:00:37,870
which means that not have your existing
experts going to work

7
00:00:37,870 --> 00:00:42,750
I'm the

8
00:00:42,750 --> 00:00:47,460
the topic itself is one of those things
that's more like a

9
00:00:47,460 --> 00:00:51,020
a conversation that you would have later
in the night of drinking because when

10
00:00:51,020 --> 00:00:53,059
you're drinking in your talking about
hacking

11
00:00:53,059 --> 00:00:56,640
it goes through two phases in the first
phase is that you talk about some

12
00:00:56,640 --> 00:01:00,260
cool thing that you fact and the second
phase is that you talk about

13
00:01:00,260 --> 00:01:05,020
the individual pieces at the hack that
need the expert itself interesting

14
00:01:05,020 --> 00:01:08,770
and I'm in a bit of a bind because

15
00:01:08,770 --> 00:01:12,460
the majority the talk is going to be
that later style and I still need

16
00:01:12,460 --> 00:01:14,200
something flashy to have good pictures

17
00:01:14,200 --> 00:01:19,000
so I'm gonna have a little side bar here

18
00:01:19,000 --> 00:01:23,830
in 2010 I was here in Amsterdam with two
friends of mine

19
00:01:23,830 --> 00:01:27,520
and we decided to build an art exhibit

20
00:01:27,520 --> 00:01:31,229
as you've never had the opportunity to
pretend to be an artist I suggest you

21
00:01:31,229 --> 00:01:32,700
take it it's a shit load of fun

22
00:01:32,700 --> 00:01:36,380
on this year is the opening kiosk

23
00:01:36,380 --> 00:01:40,170
for multi-threaded banja dinosaur
knitting adventure to the extreme

24
00:01:40,170 --> 00:01:44,369
which is a an RFID video game that we
made

25
00:01:44,369 --> 00:01:47,470
in an artisan comedian Eric bank that
used to be

26
00:01:47,470 --> 00:01:53,799
I'm not that far north as your the
player begins by showing up at this

27
00:01:53,799 --> 00:01:54,649
kiosk

28
00:01:54,649 --> 00:01:57,969
and tapping Dutch MetroCard over the
heart

29
00:01:57,969 --> 00:02:01,810
and then drying on the screen a sprite

30
00:02:01,810 --> 00:02:04,909
the sprite is then used in a video game

31
00:02:04,909 --> 00:02:09,690
the video game is controlled by RFID
tags on these arrows

32
00:02:09,690 --> 00:02:15,329
that are at at the front the table but
this complication which is that the RFID

33
00:02:15,329 --> 00:02:17,060
readers can't handle

34
00:02:17,060 --> 00:02:21,220
two cards at the same time and both
players have to share the same setup

35
00:02:21,220 --> 00:02:21,769
errors

36
00:02:21,769 --> 00:02:25,090
so UNIF we're playing could not both
move left

37
00:02:25,090 --> 00:02:29,470
at the same time week you could move
left as I moved right we could not move

38
00:02:29,470 --> 00:02:31,350
in the same direction at the same time

39
00:02:31,350 --> 00:02:34,430
see get to see how well people at the
museum knew each other

40
00:02:34,430 --> 00:02:37,910
and sale X train jerseys

41
00:02:37,910 --> 00:02:41,030
are ever so polite you know if these
tourist Rangers

42
00:02:41,030 --> 00:02:44,750
than the men would say the woman excuse
me madam but my type might you please

43
00:02:44,750 --> 00:02:48,010
cease moving left such that I might move
left is that would be amenable to my

44
00:02:48,010 --> 00:02:49,060
desires at this moment

45
00:02:49,060 --> 00:02:52,340
but in fact these two were newlyweds

46
00:02:52,340 --> 00:02:56,120
sushi he thought that he could just
pressure hand out of the way ever so

47
00:02:56,120 --> 00:02:56,769
politely

48
00:02:56,769 --> 00:03:00,109
and what she did was she picked that be
rappin she dumped it on his hat

49
00:03:00,109 --> 00:03:06,560
but it can't be admitting adventure

50
00:03:06,560 --> 00:03:09,280
at least an extreme to denuding
adventure unless you have an actual

51
00:03:09,280 --> 00:03:10,430
knitting machine involved

52
00:03:10,430 --> 00:03:13,449
so we hopped in a van and drove to North
Holland

53
00:03:13,449 --> 00:03:17,540
singing the a-team theme song we didn't
know the a-team theme song we didn't let

54
00:03:17,540 --> 00:03:18,430
that stop us

55
00:03:18,430 --> 00:03:21,910
and when we got up there we bought this

56
00:03:21,910 --> 00:03:26,229
knitting machine this is a photograph
with annotations at the keypad

57
00:03:26,229 --> 00:03:29,350
previously AV

58
00:03:29,350 --> 00:03:33,160
10d Radio Shack trash eighty floppy disk
drive emulator

59
00:03:33,160 --> 00:03:37,530
had been written in order to make fake
floppy disks for this knitting machine

60
00:03:37,530 --> 00:03:40,780
we had to type in dozens of commands in
order to load a new pattern

61
00:03:40,780 --> 00:03:44,470
and we wanted to be able to load in
patterns quickly enough to do a high

62
00:03:44,470 --> 00:03:45,350
score list

63
00:03:45,350 --> 00:03:49,130
as a tapestry for the video game so we
did was we took

64
00:03:49,130 --> 00:03:52,139
the keyword apart and then we reverse
engineered which

65
00:03:52,139 --> 00:03:55,699
road which column were connected for
each button were pressed

66
00:03:55,699 --> 00:03:59,329
and is annotations for the rows into
columns

67
00:03:59,329 --> 00:04:03,299
and by touching the right to together
using paperclip you could actually press

68
00:04:03,299 --> 00:04:04,350
a button on the keypad

69
00:04:04,350 --> 00:04:07,579
we then built this site we know shield

70
00:04:07,579 --> 00:04:10,989
which allows you to connect the rows
into columns

71
00:04:10,989 --> 00:04:15,769
electronically by an order that's given
from the video game computer itself

72
00:04:15,769 --> 00:04:19,790
so the the table that we had in the
first slide that plays video game

73
00:04:19,790 --> 00:04:23,430
that was actually tied directly into the
keypad

74
00:04:23,430 --> 00:04:27,030
love the nineteen eighties knitting
machine allowing it to

75
00:04:27,030 --> 00:04:30,120
loading to dump out a high score
tapestry

76
00:04:30,120 --> 00:04:35,770
and that was how about a dinosaur had is
netting adventure

77
00:04:35,770 --> 00:04:39,920
if if you want to do things like that at
the

78
00:04:39,920 --> 00:04:43,340
at the simple and if you just going to
wire up a night we know and

79
00:04:43,340 --> 00:04:47,410
press the buttons as they're depressed
by a person then you don't really need

80
00:04:47,410 --> 00:04:51,260
shellcode and you don't really need any
advanced debugging techniques

81
00:04:51,260 --> 00:04:54,760
we were able to do that entire project
by doing nothing more than using a

82
00:04:54,760 --> 00:04:56,770
multimeter and

83
00:04:56,770 --> 00:05:00,640
the sort have highest recruitment that
you would expect

84
00:05:00,640 --> 00:05:04,050
in a recently formed Packers vs but if
you wanna do something more

85
00:05:04,050 --> 00:05:06,440
sophisticated

86
00:05:06,440 --> 00:05:09,890
then you need shoko because you need to
dump a copy of firmware

87
00:05:09,890 --> 00:05:13,030
and quite often these devices are locked

88
00:05:13,030 --> 00:05:16,550
we're working on a PC in your use to the
32-bit world

89
00:05:16,550 --> 00:05:19,800
use or to take for granted that you can
get a copy the code that your reverse

90
00:05:19,800 --> 00:05:20,670
engineering

91
00:05:20,670 --> 00:05:24,640
we get a copy the code that you're
explaining when you can't it's because

92
00:05:24,640 --> 00:05:28,660
is something I cancel our that's just
scrambling the position at the code

93
00:05:28,660 --> 00:05:32,420
while the contents in the meaning of the
code is something that you can already

94
00:05:32,420 --> 00:05:37,250
view and understand reverse engineer
from your own copy

95
00:05:37,250 --> 00:05:40,960
I'm to this lecture I'm going to be
discussing the

96
00:05:40,960 --> 00:05:44,730
the different tricks that assertive
unique to embedded systems

97
00:05:44,730 --> 00:05:47,950
and the tricks that if not unique to
embedded systems are at least

98
00:05:47,950 --> 00:05:51,150
different embedded systems from what you
would see in the host

99
00:05:51,150 --> 00:05:55,430
I'm going to show you how to exploit
devices that don't allow you to execute

100
00:05:55,430 --> 00:05:57,020
code from RAM

101
00:05:57,020 --> 00:06:01,770
and they show you how to expert advice
by overwriting flash memory

102
00:06:01,770 --> 00:06:05,880
piecemeal instead is is pages this
allows you to

103
00:06:05,880 --> 00:06:09,200
to patch the flash memory in the Rye
even

104
00:06:09,200 --> 00:06:13,490
if you need to use the page that your
patching in order to continue running

105
00:06:13,490 --> 00:06:14,940
iraq's play

106
00:06:14,940 --> 00:06:18,330
and the majority I'll this came from

107
00:06:18,330 --> 00:06:22,470
exploits that I've written for clients
and former

108
00:06:22,470 --> 00:06:26,570
from discussions I've had with the rain
fancy n at

109
00:06:26,570 --> 00:06:30,000
is now you're calm we were to paper if
you back

110
00:06:30,000 --> 00:06:34,200
a few years back cult have planned
attacks mask from Butler is a dangerous

111
00:06:34,200 --> 00:06:37,700
in this paper we we actually constructed
AV

112
00:06:37,700 --> 00:06:41,020
very short returned programming exploit

113
00:06:41,020 --> 00:06:44,220
blind in that we didn't actually have a
copy

114
00:06:44,220 --> 00:06:49,790
love the firmware from which we were
building a rap chain

115
00:06:49,790 --> 00:06:53,610
I'm and and also from conversations I've
had with sorry about us

116
00:06:53,610 --> 00:06:57,700
and so far working embedded systems
security as a kind thanks to do

117
00:06:57,700 --> 00:07:01,800
especially to them

118
00:07:01,800 --> 00:07:04,880
and thus we are expecting a PC you sort
of take for granted

119
00:07:04,880 --> 00:07:09,240
that you have an operating system me
take for granted that you can do

120
00:07:09,240 --> 00:07:12,480
interrupts in order to call the
operating system that you have a

121
00:07:12,480 --> 00:07:17,790
Lipsy that is loaded into memory

122
00:07:17,790 --> 00:07:20,790
on embedded systems a lot of these
features are lacking you don't really

123
00:07:20,790 --> 00:07:21,440
have

124
00:07:21,440 --> 00:07:26,040
dynamic libraries you do on the higher
end spurt in the 1860 in the grounds you

125
00:07:26,040 --> 00:07:27,290
don't have them at all

126
00:07:27,290 --> 00:07:31,510
sOooo your operating system and your
application and

127
00:07:31,510 --> 00:07:35,870
all other libraries are statically
linked into a single executable

128
00:07:35,870 --> 00:07:39,530
I'm if you have a live see it doesn't
have anything useful in it

129
00:07:39,530 --> 00:07:43,450
are terribly useful you won't have
anything like the system

130
00:07:43,450 --> 00:07:46,780
or X SiC functions

131
00:07:46,780 --> 00:07:49,930
see you have to bill you exploit from
smaller pieces

132
00:07:49,930 --> 00:07:53,540
especially for return to the sea in
return I did for coming attacks

133
00:07:53,540 --> 00:07:57,310
the defensive features and there but
there there by accident

134
00:07:57,310 --> 00:08:02,110
so on a PC you'll have SLR in order to
prevent an attacker from knowing where

135
00:08:02,110 --> 00:08:03,419
pieces that

136
00:08:03,419 --> 00:08:07,180
the target our I but

137
00:08:07,180 --> 00:08:10,250
that's done explicitly as a defensive
future

138
00:08:10,250 --> 00:08:13,790
on an embedded system you're still in
that position have not really knowing

139
00:08:13,790 --> 00:08:15,340
where things are

140
00:08:15,340 --> 00:08:19,370
but it's not the defender trying to

141
00:08:19,370 --> 00:08:23,030
protect himself from your instead it's
that the

142
00:08:23,030 --> 00:08:26,300
for more images locked and you're not
allowed to read it because you don't

143
00:08:26,300 --> 00:08:26,889
have

144
00:08:26,889 --> 00:08:30,419
you don't yet have a shell on the the
box

145
00:08:30,419 --> 00:08:34,449
there's no no execute that but instead
you've got

146
00:08:34,449 --> 00:08:38,490
Harvard architectures and Harvard
architecture see a separate memories

147
00:08:38,490 --> 00:08:41,620
silly there's no such thing as having a
pointer

148
00:08:41,620 --> 00:08:46,310
you have a pointer to code a pointer to
data a pointer to

149
00:08:46,310 --> 00:08:50,600
in turn around external RAM you have all
these different regions have memory

150
00:08:50,600 --> 00:08:55,670
and they don't overlap and they're not
always nap on top of each other

151
00:08:55,670 --> 00:08:59,990
some these architectures have love them
have instructions for reading and

152
00:08:59,990 --> 00:09:00,660
writing

153
00:09:00,660 --> 00:09:03,720
RAM but many of them do not have

154
00:09:03,720 --> 00:09:06,700
instructions for writing the code memory
because they just assume that it's going

155
00:09:06,700 --> 00:09:07,420
to be a permanent

156
00:09:07,420 --> 00:09:12,089
ROM and so as even extended to support
things like flash memory

157
00:09:12,089 --> 00:09:17,850
that's all done in very strange in very
device specific ways

158
00:09:17,850 --> 00:09:22,500
there lotsa weird registers and custom
code and

159
00:09:22,500 --> 00:09:26,250
architecture specific techniques that
you need to learn when reverse

160
00:09:26,250 --> 00:09:28,820
engineering these devices

161
00:09:28,820 --> 00:09:34,490
I'm one other chips will be dealing with
is the Intel 8051 architecture

162
00:09:34,490 --> 00:09:39,670
this is more popular than x86 and x64
and arm combined

163
00:09:39,670 --> 00:09:43,470
every wanna view has it least 18 a 5-1
in your laptop

164
00:09:43,470 --> 00:09:48,230
you probably have several in your cell
phone and this is a very old design

165
00:09:48,230 --> 00:09:52,089
Intel no longer makes the chips bed
olive their competitors have cloned the

166
00:09:52,089 --> 00:09:53,390
chip

167
00:09:53,390 --> 00:09:57,750
and you'll find this as helpers in all
sorts a small devices

168
00:09:57,750 --> 00:10:01,180
if you have a seagate hard disk there is
an 8051 that's used

169
00:10:01,180 --> 00:10:04,279
just for the read/write head

170
00:10:04,279 --> 00:10:07,980
and this is in addition to the ARM chips
that are elsewhere

171
00:10:07,980 --> 00:10:11,800
at its Harvard architecture see you have
many different memories

172
00:10:11,800 --> 00:10:14,920
and its a rather all the Harvard
architecture device

173
00:10:14,920 --> 00:10:18,010
so it only has 256 bytes

174
00:10:18,010 --> 00:10:23,220
the internal RAM as got data or idea

175
00:10:23,220 --> 00:10:27,620
you have X data which is a separate
region for external RAM

176
00:10:27,620 --> 00:10:30,660
and this is because the assumed that the

177
00:10:30,660 --> 00:10:35,020
chip itself would have very little RAM
inside ovett

178
00:10:35,020 --> 00:10:39,529
the to 256 bytes be the most they could
fit and for any more RAM they would have

179
00:10:39,529 --> 00:10:41,750
to go to an external chip

180
00:10:41,750 --> 00:10:47,040
a ramen a day to encode are completely
separate in the region 8051 design

181
00:10:47,040 --> 00:10:50,060
so when you have a player that pointer

182
00:10:50,060 --> 00:10:53,880
mean something different whether it's a
a function

183
00:10:53,880 --> 00:10:57,990
Poyner or a data pointer

184
00:10:57,990 --> 00:11:00,550
the same number can refer to two
different things based upon the

185
00:11:00,550 --> 00:11:03,339
instruction that the references

186
00:11:03,339 --> 00:11:06,399
instructions a byte aligned

187
00:11:06,399 --> 00:11:09,230
and there are thousands different clones
at this Jets everything I've told you

188
00:11:09,230 --> 00:11:11,640
about this ship is wrong for at least
one of them

189
00:11:11,640 --> 00:11:15,580
some of these devices caused code and
data memories to overlap

190
00:11:15,580 --> 00:11:19,520
and those devices you can execute from
RAM other devices have

191
00:11:19,520 --> 00:11:24,350
primitive air innu in them see you can
actually move regions have

192
00:11:24,350 --> 00:11:29,080
memory around and this is how they get a
round the 16-bit memory limit

193
00:11:29,080 --> 00:11:32,990
because pointers in this device are only
16 bits and you can't do that much with

194
00:11:32,990 --> 00:11:35,089
64 kilobytes in memory

195
00:11:35,089 --> 00:11:41,120
the can swap pages in and out and you do
this by setting a register

196
00:11:41,120 --> 00:11:46,220
if I one is used in this device this is
a a turning point response card RF

197
00:11:46,220 --> 00:11:51,050
the company that makes this really likes
to make legal threats

198
00:11:51,050 --> 00:11:54,080
but they also really don't know how to
protect the code

199
00:11:54,080 --> 00:11:58,240
see can take this device you can just
read the

200
00:11:58,240 --> 00:12:01,779
executed a code out when the memory
chips if you look at my blog you'll find

201
00:12:01,779 --> 00:12:02,899
an article and Adam

202
00:12:02,899 --> 00:12:07,350
reverse engineer this device the the
secret number that the

203
00:12:07,350 --> 00:12:11,350
threatened to sue me for releasing ways

204
00:12:11,350 --> 00:12:15,459
in hexadecimal 0x12 0 recs 34

205
00:12:15,459 --> 00:12:20,380
Xerox 56 so be careful 9 that number

206
00:12:20,380 --> 00:12:23,750
this is a a photograph I'll the

207
00:12:23,750 --> 00:12:27,870
radio plus CPU that since I did this
device

208
00:12:27,870 --> 00:12:31,260
and the vulnerability arose from the
meeting both

209
00:12:31,260 --> 00:12:35,380
a microcontroller and a radio in the
same chip

210
00:12:35,380 --> 00:12:38,529
and you can tell that this is a radio
because in the square

211
00:12:38,529 --> 00:12:43,950
inductors on the bottom left and the
circular ones just a bit above them

212
00:12:43,950 --> 00:12:47,050
I'm when you add

213
00:12:47,050 --> 00:12:51,510
radio to a chip the previously didn't
have it

214
00:12:51,510 --> 00:12:55,800
its easy to combine radio and digital
secretary

215
00:12:55,800 --> 00:12:59,410
it's also easy to combine flash memory
and digital secretary

216
00:12:59,410 --> 00:13:03,570
but it's very difficult to combine flash
memory and radio

217
00:13:03,570 --> 00:13:07,180
saying this chip they weren't able to
fit the flash memory on dying

218
00:13:07,180 --> 00:13:10,630
and they had to include it as a separate
package

219
00:13:10,630 --> 00:13:15,130
she could just separate the memory chip
for the rest of the board and read it

220
00:13:15,130 --> 00:13:19,170
and Mac India from a nap

221
00:13:19,170 --> 00:13:22,450
and the second vice is the girl tech I
am me and

222
00:13:22,450 --> 00:13:25,600
this is a children's text messaging toy

223
00:13:25,600 --> 00:13:30,390
that allows you to send and receive text
messages with your friends to the

224
00:13:30,390 --> 00:13:31,740
Internet

225
00:13:31,740 --> 00:13:35,910
this is manufactured just before the
year hit when every child on earth had a

226
00:13:35,910 --> 00:13:38,230
cell phone

227
00:13:38,230 --> 00:13:43,270
and and in the photograph you can see
the leave replace the firmer on it

228
00:13:43,270 --> 00:13:47,640
so the command console in the upper
right is actually ordering one I am me

229
00:13:47,640 --> 00:13:50,190
to hold a carrier wave and frequency

230
00:13:50,190 --> 00:13:54,830
and the I am me and the background is
running a spectrum analyzer program that

231
00:13:54,830 --> 00:13:57,010
Michael Osborne Road

232
00:13:57,010 --> 00:14:00,300
it's the radio on this device can be
hijacked as soon as your

233
00:14:00,300 --> 00:14:04,130
executing your own code on it we also
for more images

234
00:14:04,130 --> 00:14:07,700
for reflexively jamming ap ko p25

235
00:14:07,700 --> 00:14:11,180
police radios that are used in the
States and Australia and you could

236
00:14:11,180 --> 00:14:14,140
easily build jammers for other protocols

237
00:14:14,140 --> 00:14:16,880
and you can do this as soon as you get
code execution on it and it doesn't

238
00:14:16,880 --> 00:14:22,640
matter that it's just a toy

239
00:14:22,640 --> 00:14:26,700
this and a chip related to the one in
the Caltech I am in this is there to

240
00:14:26,700 --> 00:14:28,420
company 5:30

241
00:14:28,420 --> 00:14:31,470
the I am eases the chip kahn 1110

242
00:14:31,470 --> 00:14:36,029
but both these have an 8051 for and they
both also have a radio in there in the

243
00:14:36,029 --> 00:14:37,420
same package

244
00:14:37,420 --> 00:14:41,290
and unlike the turning point device I
showed you

245
00:14:41,290 --> 00:14:45,730
this device has protection fuse so it
can protect itself

246
00:14:45,730 --> 00:14:49,060
in order to prevent its firmware from
being dumped

247
00:14:49,060 --> 00:14:52,430
if you want to reverse engineer the
firmware this device you need to come up

248
00:14:52,430 --> 00:14:54,750
with an exploit that allows you to dump

249
00:14:54,750 --> 00:14:58,589
the contents flash memory

250
00:14:58,589 --> 00:15:02,769
and in doing this it's often helpful to
use memory corruption exploits

251
00:15:02,769 --> 00:15:07,160
but you won't have a copy of the
firmware as you do it

252
00:15:07,160 --> 00:15:10,810
this gets tricky

253
00:15:10,810 --> 00:15:14,990
the amnesty for 30 is the first
architecture that I really got to know

254
00:15:14,990 --> 00:15:21,170
its kind of like the PDP 11 except that
it has more registers in a few

255
00:15:21,170 --> 00:15:25,140
features removed it has sixteen-bit
aligned instructions

256
00:15:25,140 --> 00:15:29,560
with in the with immediate values
following them

257
00:15:29,560 --> 00:15:33,370
I'm and it's fine I'm in C you can
execute each

258
00:15:33,370 --> 00:15:37,870
code from RAM there are security
enhanced versions is this the to not

259
00:15:37,870 --> 00:15:39,519
allow you to execute from RAM

260
00:15:39,519 --> 00:15:42,680
and we'll get to those later on this is
the faced answer

261
00:15:42,680 --> 00:15:47,050
so recent project mind that uses the
chip this port allows you to ride

262
00:15:47,050 --> 00:15:50,630
a USB device were USB host

263
00:15:50,630 --> 00:15:55,550
in Python on your workstation but as far
as the other device sees it it's just a

264
00:15:55,550 --> 00:15:57,829
regular USB device or USB host

265
00:15:57,829 --> 00:16:00,640
so there's a Python script that you can
run through this board to make a fake

266
00:16:00,640 --> 00:16:01,110
desk

267
00:16:01,110 --> 00:16:04,510
or to make a fake keyboard a fake mouse
a

268
00:16:04,510 --> 00:16:08,360
fix serial port make a fake
uninterruptible power supply wait for

269
00:16:08,360 --> 00:16:10,459
the next to automatically load the
driver

270
00:16:10,459 --> 00:16:16,190
and then order the computer to shut down
by telling at that its powers going away

271
00:16:16,190 --> 00:16:18,560
when you find this device driver is this
what you come up with all sorts of

272
00:16:18,560 --> 00:16:19,670
vulnerabilities

273
00:16:19,670 --> 00:16:22,860
and the you might wanna go the other way
you might want to

274
00:16:22,860 --> 00:16:27,350
in fact a USB device where to dump a USB
devices firmware in order to find

275
00:16:27,350 --> 00:16:28,230
vulnerability

276
00:16:28,230 --> 00:16:31,890
in the device that you can explain and
that's where the techniques in this

277
00:16:31,890 --> 00:16:34,810
lecture become handy

278
00:16:34,810 --> 00:16:39,140
this device all seizes the amnesty for
30 this is the spot connect

279
00:16:39,140 --> 00:16:42,430
I've done a lot a reverse engineering at
this and there are a few papers that

280
00:16:42,430 --> 00:16:44,490
preceded it

281
00:16:44,490 --> 00:16:48,380
this device is really neat because it's
a Bluetooth to satellite

282
00:16:48,380 --> 00:16:51,790
transmitter so your cell phone connects
to this

283
00:16:51,790 --> 00:16:55,779
and then we you run an app on your phone
which orders this device to transmit

284
00:16:55,779 --> 00:16:58,940
up to a low Earth orbit satellite
constellation

285
00:16:58,940 --> 00:17:04,079
and from that satellite constellation
its relayed to you the Internet

286
00:17:04,079 --> 00:17:07,559
including a GPS coordinates and a short
text message

287
00:17:07,559 --> 00:17:11,319
his loss to transmit on emergency
broadcast frequencies

288
00:17:11,319 --> 00:17:14,769
said that if you get stranded or if you
break your leg in the woods you can use

289
00:17:14,769 --> 00:17:18,220
this to call for help

290
00:17:18,220 --> 00:17:23,279
but when this transmits through the
satellite it's completely clear text

291
00:17:23,279 --> 00:17:26,629
and if you could replace the

292
00:17:26,629 --> 00:17:29,679
the serial number this device if you
could send your own pack in the Rye

293
00:17:29,679 --> 00:17:32,649
could easily impersonate another device

294
00:17:32,649 --> 00:17:36,929
which would allow you to say have tended
these in the same subscription plan

295
00:17:36,929 --> 00:17:40,940
were to create a fake message from any
device that you're able to sniff in the

296
00:17:40,940 --> 00:17:41,850
wild

297
00:17:41,850 --> 00:17:45,619
and the the over-the-air protocol is
completely clear text

298
00:17:45,619 --> 00:17:48,820
so if you can find any one of these at
the very beginning includes

299
00:17:48,820 --> 00:17:52,480
everything you need to impersonate

300
00:17:52,480 --> 00:17:55,480
and this is the next hope adage which is
a

301
00:17:55,480 --> 00:17:59,259
hacker conference badge they made in
2010 and

302
00:17:59,259 --> 00:18:04,519
this can be reprogrammed to emulate
microsoft wireless keyboard

303
00:18:04,519 --> 00:18:08,269
and thanks to the ability published by
Maximus interest intruder

304
00:18:08,269 --> 00:18:13,090
it's known that those IOU's magical form
a cryptographic on exclusive or

305
00:18:13,090 --> 00:18:17,499
and that the five by key is the mac
Address

306
00:18:17,499 --> 00:18:21,590
and that in every key up is that you
have 13 by 20 secs or tacky

307
00:18:21,590 --> 00:18:24,960
so you've got the password all sorts
have

308
00:18:24,960 --> 00:18:28,230
places in that packet in the clear you
can see that right back through the

309
00:18:28,230 --> 00:18:31,169
begin typing on the keyboard have
anything near you

310
00:18:31,169 --> 00:18:35,499
by replacing the firmware this device or
the turning point clicker that was a few

311
00:18:35,499 --> 00:18:36,970
sides back which uses

312
00:18:36,970 --> 00:18:40,309
compatible radio you can emulate the
keyboard

313
00:18:40,309 --> 00:18:43,830
and you can even make this exploit
stand-alone you could have it so that

314
00:18:43,830 --> 00:18:46,649
just by walking around with this badge
Microsoft key words around you would

315
00:18:46,649 --> 00:18:52,419
start looting at the rickroll video on
YouTube

316
00:18:52,419 --> 00:18:55,509
and this is the amnesty for 30

317
00:18:55,509 --> 00:18:59,480
this is the 2274 which we use in some of
the smaller good fats

318
00:18:59,480 --> 00:19:03,509
and you can see that this is divided up
into different regions

319
00:19:03,509 --> 00:19:07,029
the nifty is region

320
00:19:07,029 --> 00:19:11,080
it's a down in the middle I don't think
that you can see on the screen

321
00:19:11,080 --> 00:19:15,570
but this is it zoomed up in the
microscope it looks kind of like

322
00:19:15,570 --> 00:19:21,730
tablet with Egyptian writing and you'll
notice that is divided into 16 columns

323
00:19:21,730 --> 00:19:25,350
you also remember that this is a 16-bit
chipped in has 16

324
00:19:25,350 --> 00:19:29,580
it's a significance and its address bus
and its data bus

325
00:19:29,580 --> 00:19:33,649
and you look at their little dots as you
go up and down it at that

326
00:19:33,649 --> 00:19:38,499
the dots very by frequency in certain
regions and if you zoom way in

327
00:19:38,499 --> 00:19:43,129
you'll recognize that each dot is I did
their words not there

328
00:19:43,129 --> 00:19:46,999
and these orbits and you can read them
visually

329
00:19:46,999 --> 00:19:51,730
this is what's called a mask ROM and a
mask ROM is nice because

330
00:19:51,730 --> 00:19:55,739
its written as the chip is manufactured

331
00:19:55,739 --> 00:19:59,389
to Texas Instruments wrote this mask ROM
and it doesn't matter whether this ship

332
00:19:59,389 --> 00:20:00,289
ships

333
00:20:00,289 --> 00:20:04,049
in a turning point product wearing one
of my products were in their spot

334
00:20:04,049 --> 00:20:06,049
connect product

335
00:20:06,049 --> 00:20:10,789
this mask ROM is always there unless you
pay a lot of money to special order

336
00:20:10,789 --> 00:20:13,470
chips without it

337
00:20:13,470 --> 00:20:17,869
and when it's included even though you
can't do a return to live see attack

338
00:20:17,869 --> 00:20:21,499
against the C library because you don't
know where anything is well you can

339
00:20:21,499 --> 00:20:23,399
return to the boot ROM

340
00:20:23,399 --> 00:20:27,629
and with this problem does is it's a
recovery ROM for flashing the chip

341
00:20:27,629 --> 00:20:30,749
when it's done this last

342
00:20:30,749 --> 00:20:33,769
and this contains a complete bootloader

343
00:20:33,769 --> 00:20:37,789
so this allows you to get a command
console on the chip it has code to read

344
00:20:37,789 --> 00:20:40,029
all a memory it has come to write memory

345
00:20:40,029 --> 00:20:44,279
it has code to change the clock settings
if you need to speed the chip upper slow

346
00:20:44,279 --> 00:20:46,320
it down

347
00:20:46,320 --> 00:20:49,919
and the only protection that this offers

348
00:20:49,919 --> 00:20:54,979
is that before it will let you do
anything you have to enter a password

349
00:20:54,979 --> 00:20:58,700
and the password is the last 16 bytes

350
00:20:58,700 --> 00:21:02,269
have flash memory interrupt vector table

351
00:21:02,269 --> 00:21:06,249
say sixteen words 32 bytes I'm

352
00:21:06,249 --> 00:21:09,850
me if you can skip that password check
or you can find a bug in the password

353
00:21:09,850 --> 00:21:10,809
check

354
00:21:10,809 --> 00:21:15,320
then you can jump into the mask ROM and
you then have a command console

355
00:21:15,320 --> 00:21:18,379
that will tell you how to use the lol

356
00:21:18,379 --> 00:21:22,139
allow you to read and write the chip and
by dumping the code out you then have

357
00:21:22,139 --> 00:21:23,369
the keys to the kingdom

358
00:21:23,369 --> 00:21:26,399
you read any keys that are in the chip
is nothing else in this chip that allows

359
00:21:26,399 --> 00:21:27,889
you to keep a secret

360
00:21:27,889 --> 00:21:33,720
after this password protection has been
bypassed

361
00:21:33,720 --> 00:21:37,580
I'm your cell AVR chips and pics

362
00:21:37,580 --> 00:21:41,419
if yours was used in the Arduino

363
00:21:41,419 --> 00:21:45,799
pic is used in everything their
satellites wedding pics

364
00:21:45,799 --> 00:21:50,759
god help us there are they're also all
sorts is architectures that is sorta

365
00:21:50,759 --> 00:21:52,320
split off from

366
00:21:52,320 --> 00:21:55,909
things that were popular in the eighties
said the 6502

367
00:21:55,909 --> 00:22:01,299
in the 605 in the 68,000 all others
still exist in embedded systems

368
00:22:01,299 --> 00:22:06,070
you'll still find z80 chips he had no
Texas Instruments graphing calculators

369
00:22:06,070 --> 00:22:10,229
in the still ship in modern products
they're just sorta hidden away and that

370
00:22:10,229 --> 00:22:12,580
the smaller chips

371
00:22:12,580 --> 00:22:16,070
this still worth attacking because this
what is what gets you

372
00:22:16,070 --> 00:22:19,749
direct control over radio or satellite
transmitter

373
00:22:19,749 --> 00:22:23,100
were a smart meter or any of the other

374
00:22:23,100 --> 00:22:27,159
I'm small computers you might want to
attack

375
00:22:27,159 --> 00:22:31,129
this is a picture the Atmel you'll also
find artwork on these chips

376
00:22:31,129 --> 00:22:34,999
this is the AVR logo the French
MetroCard

377
00:22:34,999 --> 00:22:38,919
nephew go has both a frog in a snail on
it

378
00:22:38,919 --> 00:22:42,169
and it's manufactured by French company
so

379
00:22:42,169 --> 00:22:47,009
I'm not sure whether it's a joke against
the French or just buy some contractor

380
00:22:47,009 --> 00:22:52,070
this is a photograph with the pic
microcontroller

381
00:22:52,070 --> 00:22:55,299
as a bench before on a PC our goals are
pretty clear

382
00:22:55,299 --> 00:22:58,590
we either want to load now where on to
desktop

383
00:22:58,590 --> 00:23:02,590
or you wanna drop shall answer I am

384
00:23:02,590 --> 00:23:07,220
and thats the goal that we're after on a
microcontroller girls are very different

385
00:23:07,220 --> 00:23:12,789
generally we want code sometimes we want
keys

386
00:23:12,789 --> 00:23:16,419
so you're using an exploit to dump the
firmware you kind of have to know what's

387
00:23:16,419 --> 00:23:17,320
already there

388
00:23:17,320 --> 00:23:21,340
or at least where things will pop up if
you're trying to dump the application

389
00:23:21,340 --> 00:23:22,979
from where it the new

390
00:23:22,979 --> 00:23:26,950
rely on the bootloader in order to be
the target that you explain

391
00:23:26,950 --> 00:23:30,690
USB boot loaders are lovely because they
have complicated policies in order to

392
00:23:30,690 --> 00:23:32,379
handle the USB commence

393
00:23:32,379 --> 00:23:34,649
and wherever you have a complicated
parser you have an exploitable

394
00:23:34,649 --> 00:23:37,129
vulnerabilities

395
00:23:37,129 --> 00:23:40,320
and is also the case that a peak
primitive

396
00:23:40,320 --> 00:23:43,669
if you just have a bug that allows and
in Foley

397
00:23:43,669 --> 00:23:47,609
to the outside have won by two memory

398
00:23:47,609 --> 00:23:51,539
you can do reliably and repeatedly
that's almost as good as complete code

399
00:23:51,539 --> 00:23:52,789
execution

400
00:23:52,789 --> 00:23:56,849
because as the attacker you don't have
that much memory textile trade

401
00:23:56,849 --> 00:24:00,440
and you can generally try as many times
as you like so if

402
00:24:00,440 --> 00:24:04,379
it takes a few hours for the exploit to
run or a few minutes

403
00:24:04,379 --> 00:24:08,369
that doesn't matter as long as you get a
copy the code and a copy the keys

404
00:24:08,369 --> 00:24:11,440
you have everything you you wanted a

405
00:24:11,440 --> 00:24:14,919
on there are also some strange is
wrecked its

406
00:24:14,919 --> 00:24:19,509
I was we're gonna projects with some
friends of mine is at

407
00:24:19,509 --> 00:24:23,399
and your common France and we needed to

408
00:24:23,399 --> 00:24:26,720
write a back door for advice

409
00:24:26,720 --> 00:24:29,830
now getting foreign code into the device
is no problem

410
00:24:29,830 --> 00:24:33,090
the updates right side the trouble was

411
00:24:33,090 --> 00:24:36,619
that I wound up with a stack from the
florida about here

412
00:24:36,619 --> 00:24:40,340
these devices that I bricked by loading
that for more images

413
00:24:40,340 --> 00:24:43,820
and once a group them they were
permanently brecht we never found a way

414
00:24:43,820 --> 00:24:45,549
to unbrick them

415
00:24:45,549 --> 00:24:49,549
so what we wanted using a stack memory
corruption explain

416
00:24:49,549 --> 00:24:52,809
not to get code execution for its own
sake

417
00:24:52,809 --> 00:24:57,340
but to get temporary code execution by
only tampering with Ram

418
00:24:57,340 --> 00:25:01,979
and by only tampering with Ram we were
able to inject are firing code

419
00:25:01,979 --> 00:25:06,379
without having to wait for you without
having to worry about picking the device

420
00:25:06,379 --> 00:25:08,979
because we knew that everything was
temporary innocence with that the power

421
00:25:08,979 --> 00:25:10,549
switch we go back

422
00:25:10,549 --> 00:25:13,989
in this game is a development kit for
writing a backdoor

423
00:25:13,989 --> 00:25:17,080
quite often in these things you're
trying to build a development kit for

424
00:25:17,080 --> 00:25:20,649
doing further work and your target

425
00:25:20,649 --> 00:25:24,899
and its also useful for upgrading and
patch firmware

426
00:25:24,899 --> 00:25:27,940
I had a a company called me up and they
said hey we heard that you can write in

427
00:25:27,940 --> 00:25:30,229
a minute explain to make sure we would
hit

428
00:25:30,229 --> 00:25:34,279
and they said well we want her own
product

429
00:25:34,279 --> 00:25:38,989
what happened was that they forgot to
leave in a space for upgrading firmware

430
00:25:38,989 --> 00:25:42,830
and they had a bug that they really
needed to fix their customers

431
00:25:42,830 --> 00:25:46,989
so their choice was to either recall all
these physical units

432
00:25:46,989 --> 00:25:50,429
send out technicians to replace all of
them or

433
00:25:50,429 --> 00:25:54,929
they could use a remote code execution
exploit to inject a stub

434
00:25:54,929 --> 00:25:58,059
that would load the rest to the new
firmware and

435
00:25:58,059 --> 00:26:01,070
fix things

436
00:26:01,070 --> 00:26:04,450
the version that they wound up smiling
and did include a firmware update

437
00:26:04,450 --> 00:26:05,200
features a

438
00:26:05,200 --> 00:26:09,340
no longer necessary to do this but you
need to get used to the idea that an

439
00:26:09,340 --> 00:26:11,789
embedded systems you might want to
exploit something

440
00:26:11,789 --> 00:26:15,869
or to reverse engineer it for much
stranger reason them

441
00:26:15,869 --> 00:26:20,109
than you have in a PC it's also the case
that these embedded devices very rarely

442
00:26:20,109 --> 00:26:21,570
have credit card numbers

443
00:26:21,570 --> 00:26:25,840
or email to the

444
00:26:25,840 --> 00:26:29,769
the two big targets are out

445
00:26:29,769 --> 00:26:34,849
and when you're explaining the 8051 is
an a bit CPU and Harvard architecture

446
00:26:34,849 --> 00:26:39,129
so on most variants ran has not executed

447
00:26:39,129 --> 00:26:43,659
there doesn't have clones though any to
the clones has its own special features

448
00:26:43,659 --> 00:26:47,029
and it's these features that you have to
look at when writing you explain

449
00:26:47,029 --> 00:26:51,200
on for example because it has separate
memory space is the big ones are

450
00:26:51,200 --> 00:26:54,379
collude data i/o index data

451
00:26:54,379 --> 00:26:57,820
and D-day is the 256 bytes

452
00:26:57,820 --> 00:27:02,729
avram the when this was sold as a single
chip in a physical package

453
00:27:02,729 --> 00:27:07,019
would have been the ones inside the
package and then all the code memory and

454
00:27:07,019 --> 00:27:08,679
all the extended RAM would-be

455
00:27:08,679 --> 00:27:12,039
on external chips on a separate memory
bus

456
00:27:12,039 --> 00:27:15,340
I'm see a 64 kilobytes

457
00:27:15,340 --> 00:27:19,700
space for code and you have a separate
64 kilobytes have could

458
00:27:19,700 --> 00:27:23,279
site memory for exterior these two

459
00:27:23,279 --> 00:27:26,729
don't overlap usually

460
00:27:26,729 --> 00:27:30,210
by the original design he was would
contain separate things

461
00:27:30,210 --> 00:27:33,219
and you could have a pointer it would be
the same in both cases

462
00:27:33,219 --> 00:27:37,279
but depending upon whether you use the
move instruction or the move see

463
00:27:37,279 --> 00:27:38,070
instruction

464
00:27:38,070 --> 00:27:42,489
it would mean different things

465
00:27:42,489 --> 00:27:46,759
in this architecture is everywhere
you'll you find them the stuck inside is

466
00:27:46,759 --> 00:27:50,929
FPGA stuck inside a6 wherever designer
which it needs to throw in a

467
00:27:50,929 --> 00:27:52,080
microcontroller

468
00:27:52,080 --> 00:27:55,950
and doesn't really care about the
performance Hill using 8051

469
00:27:55,950 --> 00:28:02,659
they're cheap they're open source
hardware versions have them everywhere

470
00:28:02,659 --> 00:28:07,099
modern ships have exceptions

471
00:28:07,099 --> 00:28:11,179
the exceptions for weird reasons and a
lot of it has to do with needing

472
00:28:11,179 --> 00:28:15,679
to you cell free program the original
8051 could not write

473
00:28:15,679 --> 00:28:18,999
to its own code memory Sidhu

474
00:28:18,999 --> 00:28:23,609
the designers extending a platform had
to come up with a way to allow that

475
00:28:23,609 --> 00:28:27,349
and two chips that have too little
memory they just unify the address space

476
00:28:27,349 --> 00:28:30,419
so if the sum total love your RAM

477
00:28:30,419 --> 00:28:35,440
and your flash is less than 64k a modern
design might just put them into the same

478
00:28:35,440 --> 00:28:36,629
address pays

479
00:28:36,629 --> 00:28:40,399
and then you do have a point to that
works like a fun moment point

480
00:28:40,399 --> 00:28:44,070
and they can do this without changing
that much of the rest is the

481
00:28:44,070 --> 00:28:48,489
instruction set the only thing they have
to do differently is to tell the linkers

482
00:28:48,489 --> 00:28:53,849
thats data memory begins at a different
address and that's just a linker fact

483
00:28:53,849 --> 00:28:58,330
I'm fur coats with lotsa memory with
they do is they have a primitive and

484
00:28:58,330 --> 00:28:59,249
then you

485
00:28:59,249 --> 00:29:03,080
that allows them to choose assorted
moving window within

486
00:29:03,080 --> 00:29:06,330
this 64k region this is kind of like
segments

487
00:29:06,330 --> 00:29:09,590
on 16 bit x86 except

488
00:29:09,590 --> 00:29:13,070
the instead of moving the RAM for
different purposes

489
00:29:13,070 --> 00:29:17,580
at the just remove the window for
everything

490
00:29:17,580 --> 00:29:23,219
now when you're writing to flash which
is particularly useful if you can't

491
00:29:23,219 --> 00:29:27,679
run from RAM on there's no standard
instruction for doing it because flash

492
00:29:27,679 --> 00:29:30,879
memory did exist in this architecture is
made

493
00:29:30,879 --> 00:29:34,649
you could use multiple calls to cut to
poke primitive

494
00:29:34,649 --> 00:29:37,309
and that you have to make sure that you
know everything that's going on in the

495
00:29:37,309 --> 00:29:38,190
clocks

496
00:29:38,190 --> 00:29:41,299
you have to make sure that you can use
reliably in a loop

497
00:29:41,299 --> 00:29:45,200
and any need to do it without native
code and you might have to do it

498
00:29:45,200 --> 00:29:49,190
without I'm certain pieces have code
ever running

499
00:29:49,190 --> 00:29:52,919
and said the options that work very by
architecture

500
00:29:52,919 --> 00:29:56,289
and the cell-free programming features
are sort of a loophole

501
00:29:56,289 --> 00:30:01,830
around these limitations if the chip
crashed every time you tried to fetch

502
00:30:01,830 --> 00:30:06,539
an instruction from flash memory while
programming flash memory

503
00:30:06,539 --> 00:30:13,200
then the architect should be held to
right itself reprogramming program for

504
00:30:13,200 --> 00:30:17,099
on said the loopholes the road again

505
00:30:17,099 --> 00:30:21,440
one is that they map ram into both data
and code

506
00:30:21,440 --> 00:30:25,690
and if they do that then you can execute
from RAM see just run from RAM

507
00:30:25,690 --> 00:30:30,109
while you're writing the flash memory a
right to flash memory is rather dramatic

508
00:30:30,109 --> 00:30:33,249
and while you're writing you can't read

509
00:30:33,249 --> 00:30:36,460
and the other way is to just have the

510
00:30:36,460 --> 00:30:39,629
flash memory return back a jump

511
00:30:39,629 --> 00:30:43,700
that bounces back to itself this is what
the industry for 30 does

512
00:30:43,700 --> 00:30:47,619
so if I'm the amnesty for thirty you
start writing to flash memory

513
00:30:47,619 --> 00:30:51,440
were racing flash memory then for that
entire right

514
00:30:51,440 --> 00:30:56,009
that entire erase which takes many
instructions

515
00:30:56,009 --> 00:31:00,159
instruction cycles to perform you can't
read from flash memory

516
00:31:00,159 --> 00:31:04,289
so what it does is it gives you back the
constant 3 FFF

517
00:31:04,289 --> 00:31:08,919
which is a jump back to itself so the
CPU stalls

518
00:31:08,919 --> 00:31:12,359
and it keeps stalling until the right is
complete

519
00:31:12,359 --> 00:31:15,229
and then it drops right back to the
instruction that was the address to try

520
00:31:15,229 --> 00:31:16,849
to fetch

521
00:31:16,849 --> 00:31:20,529
as a bug the this will ness you up if
it's

522
00:31:20,529 --> 00:31:26,649
the if the city is trying to fetch an
immediate value instead an instruction

523
00:31:26,649 --> 00:31:32,330
in that third trick is that mask ROM is
used to copy exterior in the code

524
00:31:32,330 --> 00:31:35,599
and this is because nah scrum is
separate from flash and mass from a

525
00:31:35,599 --> 00:31:39,309
workflow flash is being written to

526
00:31:39,309 --> 00:31:43,239
and now you can exploit these cell if

527
00:31:43,239 --> 00:31:47,289
RAM is mapped in about texting code the
nucleus returning to it and this becomes

528
00:31:47,289 --> 00:31:49,609
a 1996 style

529
00:31:49,609 --> 00:31:52,659
smashing a stack for fun and profit
attack and

530
00:31:52,659 --> 00:31:57,039
effete gives you the the jump to -1 when
busy

531
00:31:57,039 --> 00:32:01,529
that it's harder to exploit because
there's no gadget just right slash

532
00:32:01,529 --> 00:32:06,099
buddy if you get a pope primitive you
can sort of constructive very slow one

533
00:32:06,099 --> 00:32:09,580
by individually poking the special
function registers

534
00:32:09,580 --> 00:32:13,149
that handle reading flash special
function registers

535
00:32:13,149 --> 00:32:16,289
are they Kyle addresses on

536
00:32:16,289 --> 00:32:19,849
and a larger machine you write to them
and that goes directly to a peripheral

537
00:32:19,849 --> 00:32:20,669
device

538
00:32:20,669 --> 00:32:24,429
in this case the flash memory controller

539
00:32:24,429 --> 00:32:28,080
now if his NASCAR on the copy is code
for next day to code

540
00:32:28,080 --> 00:32:31,929
and this becomes a lot easier to explain
and especially because the calling

541
00:32:31,929 --> 00:32:34,559
convention is usually documented

542
00:32:34,559 --> 00:32:39,259
see know exactly how to set up the stack
to call a function the copies from one

543
00:32:39,259 --> 00:32:41,269
addressed to another

544
00:32:41,269 --> 00:32:45,239
on leader in this lecture I'll show you
how to overwrite flash memory

545
00:32:45,239 --> 00:32:48,919
without erasing it in order to patch
individual bits

546
00:32:48,919 --> 00:32:53,669
and combining the two is helpful now
when you get your cellco 10

547
00:32:53,669 --> 00:32:56,779
and you need to speak to the outside
world but you quite often don't have

548
00:32:56,779 --> 00:32:57,379
enough

549
00:32:57,379 --> 00:33:00,719
room in which to do it and

550
00:33:00,719 --> 00:33:07,239
cyl what are the experts there involved
a vulnerability in the USB bootloader

551
00:33:07,239 --> 00:33:10,690
now I'll the expert would only be useful
if I could dump a copy

552
00:33:10,690 --> 00:33:15,739
flash memory and RAM the purpose is this
was to use the bootloader to dump

553
00:33:15,739 --> 00:33:21,289
the contents memory but I had to do this
through the USB protocol which has very

554
00:33:21,289 --> 00:33:23,879
very small buffers

555
00:33:23,879 --> 00:33:27,669
64 bytes per fragment

556
00:33:27,669 --> 00:33:31,899
so the first stage show code needs to be
really small

557
00:33:31,899 --> 00:33:36,289
I could call back in the USB stack
that's too complicated

558
00:33:36,289 --> 00:33:40,479
and I could call in to see the serial
functions for talking over a regular

559
00:33:40,479 --> 00:33:42,099
serial port

560
00:33:42,099 --> 00:33:49,099
but the serial port gets disabled when
the USB port is enabled

561
00:33:49,749 --> 00:33:55,929
and said to simplify it I realized that
the LED's were always active

562
00:33:55,929 --> 00:33:59,249
and the LED's are just in a general
purpose i/o port

563
00:33:59,249 --> 00:34:03,599
and a GPIO port usually has a
configuration register

564
00:34:03,599 --> 00:34:07,039
and output register an import an input
register

565
00:34:07,039 --> 00:34:10,200
and when the configured for output you
can just right to the output

566
00:34:10,200 --> 00:34:14,820
register and if you write a wind and the
pain goes high if you read as 0 than the

567
00:34:14,820 --> 00:34:17,540
pain goes low

568
00:34:17,540 --> 00:34:21,790
on she can blink the LED's in the
correct had ended up a copy of all the

569
00:34:21,790 --> 00:34:23,480
firmware

570
00:34:23,480 --> 00:34:26,700
and several people done a strict the
first time

571
00:34:26,700 --> 00:34:29,899
I found out about it was from this book

572
00:34:29,899 --> 00:34:34,460
journey to the center the HP 28 is
published in 1990

573
00:34:34,460 --> 00:34:37,710
and they didn't have any LED's

574
00:34:37,710 --> 00:34:40,330
and they managed to inject a bitter
shellcode that they needed to dump a

575
00:34:40,330 --> 00:34:41,419
copy the firmware

576
00:34:41,419 --> 00:34:45,550
Hewlett Packard graphing calculator what
they found was that if they jumped to a

577
00:34:45,550 --> 00:34:47,110
particular address

578
00:34:47,110 --> 00:34:50,230
it would be seeded long be

579
00:34:50,230 --> 00:34:53,820
40 in a short beep for a1

580
00:34:53,820 --> 00:34:59,720
the trouble was the beep whiz fixed at
one second long

581
00:34:59,720 --> 00:35:03,000
say they had to leave this running for
two and a half days

582
00:35:03,000 --> 00:35:06,210
with the speaker connected to a
microphone that was going in audio

583
00:35:06,210 --> 00:35:07,040
cassettes

584
00:35:07,040 --> 00:35:10,380
and they couldn't just leave it running
in an empty room because that is what

585
00:35:10,380 --> 00:35:12,620
the audio cassettes

586
00:35:12,620 --> 00:35:15,670
then in the end the red apple to program
the decoded

587
00:35:15,670 --> 00:35:18,790
on but in modern days we don't have to
deal with that as much

588
00:35:18,790 --> 00:35:22,640
so if we were to do this is a
stand-alone program

589
00:35:22,640 --> 00:35:25,880
will be we do is we would set up the
general purpose i/o pins

590
00:35:25,880 --> 00:35:31,210
in the output direction

591
00:35:31,210 --> 00:35:34,840
this is what tells the chip that it
needs to assert the voltage

592
00:35:34,840 --> 00:35:38,980
on the Penn instead of just measuring

593
00:35:38,980 --> 00:35:43,060
then the next thing we do is we blink
half of them with the study clock

594
00:35:43,060 --> 00:35:47,270
and we'd like the other half with data
on if you've got a bunch a general

595
00:35:47,270 --> 00:35:49,180
purpose i/o pins and you don't know
which

596
00:35:49,180 --> 00:35:52,510
are LED's in which are not just don't
care

597
00:35:52,510 --> 00:35:56,640
skip that first step and then

598
00:35:56,640 --> 00:36:01,640
start blinking wanted the registers with
five 5555

599
00:36:01,640 --> 00:36:06,260
times o'clock and link the other one
with aaaa

600
00:36:06,260 --> 00:36:09,710
and your clock and the result is they'd

601
00:36:09,710 --> 00:36:12,770
after the ladies will look like they're
solid on

602
00:36:12,770 --> 00:36:16,170
they're just thinking faster than your
eyes can see and the other half of the

603
00:36:16,170 --> 00:36:16,940
LED's

604
00:36:16,940 --> 00:36:20,840
will start visibly blinking on and off
and those are the ones that are dumping

605
00:36:20,840 --> 00:36:22,110
data

606
00:36:22,110 --> 00:36:26,170
see tap both you took money each with
their logic analyzer

607
00:36:26,170 --> 00:36:30,380
and then he recorded to the logic
analyzer to interpret it as SPI

608
00:36:30,380 --> 00:36:34,060
and it gives you all the bites out and
this allows you to dump

609
00:36:34,060 --> 00:36:39,750
the firmware have a chip using
preciously few bites a shelter

610
00:36:39,750 --> 00:36:43,240
this is what it would look like visually
on the top you've got

611
00:36:43,240 --> 00:36:47,150
the clock register and that the clock

612
00:36:47,150 --> 00:36:50,840
LED and that's just blinking out a
regular patterns you know where

613
00:36:50,840 --> 00:36:54,170
each bit begins and ends and the bottom

614
00:36:54,170 --> 00:36:58,610
you have the data coming out now that
does is once per clock cycle

615
00:36:58,610 --> 00:37:02,290
it changes to the output at the bit that
you're trying to dump

616
00:37:02,290 --> 00:37:05,690
and because this match is the SPI
protocol some

617
00:37:05,690 --> 00:37:08,710
prickly you can take is Salei logic
probe

618
00:37:08,710 --> 00:37:12,860
or any other decent logic analyzer and
you can use this to dump a copy of all

619
00:37:12,860 --> 00:37:19,860
the firmware

620
00:37:20,830 --> 00:37:24,710
now if you want to returning into live
CD

621
00:37:24,710 --> 00:37:28,690
you complicated by the fact that even
though it's there it's nineteen pruned

622
00:37:28,690 --> 00:37:32,020
and there's nothing like system ORAC 62

623
00:37:32,020 --> 00:37:35,030
allow you to to run a shell command
directly

624
00:37:35,030 --> 00:37:41,070
I so we can do is we can return to the
bootloader with privilege escalation

625
00:37:41,070 --> 00:37:44,150
and when I'm gonna show you now is that
you can even find these privilege

626
00:37:44,150 --> 00:37:46,210
escalation gadgets blind

627
00:37:46,210 --> 00:37:50,670
because the firmware is a small you need
to know that the gadget will be commonly

628
00:37:50,670 --> 00:37:52,530
created by the compiler

629
00:37:52,530 --> 00:37:56,860
so you can't just imagine that some
gadget might exist in the hunt for it is

630
00:37:56,860 --> 00:37:58,850
doesn't exist this technique won't work

631
00:37:58,850 --> 00:38:02,480
but if it does exist in is there then
you can easily take

632
00:38:02,480 --> 00:38:05,820
a take control in the stack and extend
that

633
00:38:05,820 --> 00:38:09,190
into finding all the gadgets with in the

634
00:38:09,190 --> 00:38:14,750
from our image and then combining them
individually to see the effects

635
00:38:14,750 --> 00:38:18,320
I'm and when you're turning into the
boot loader and mask ROM

636
00:38:18,320 --> 00:38:22,180
because this is permanently part of the
chip we can assume that the attacker

637
00:38:22,180 --> 00:38:24,670
knows what's in the boiler

638
00:38:24,670 --> 00:38:28,610
and this can't be patched were removed
affordably

639
00:38:28,610 --> 00:38:33,110
because the chips are manufactured they
all come with the default mask ROM

640
00:38:33,110 --> 00:38:35,810
as this is an excellent target in that
regard because it's always at a fixed

641
00:38:35,810 --> 00:38:36,860
address

642
00:38:36,860 --> 00:38:40,790
its contents is regularly fixed there
are very few revisions over to reverse

643
00:38:40,790 --> 00:38:41,720
engineer

644
00:38:41,720 --> 00:38:46,340
and it's rather small it also includes
at least one

645
00:38:46,340 --> 00:38:50,120
command shell that you can talk to
externally either by USB

646
00:38:50,120 --> 00:38:53,790
or by serial port and has all the
commands it was an attacker to one in

647
00:38:53,790 --> 00:38:58,070
use as soon as you've elevated your
privilege

648
00:38:58,070 --> 00:39:04,410
on to the amnesty for thirty this is
from Cesar 02 FFF

649
00:39:04,410 --> 00:39:08,800
ads just one killer by you can reverse
engineer with pen and paper in a

650
00:39:08,800 --> 00:39:12,090
a few hours for the first time in a few
minutes after familiar with

651
00:39:12,090 --> 00:39:15,420
and it requires era table is a password
though

652
00:39:15,420 --> 00:39:20,070
and you might not know this city don't
know the address is

653
00:39:20,070 --> 00:39:24,420
love olive the interrupts then you have
to

654
00:39:24,420 --> 00:39:28,020
use returner deprogramming or the tertio
code

655
00:39:28,020 --> 00:39:32,290
to drop into it and elevate your
privileges before you do

656
00:39:32,290 --> 00:39:35,020
when you look at the firmware you'll see
the first thing that it does is it

657
00:39:35,020 --> 00:39:37,480
clears register eleven

658
00:39:37,480 --> 00:39:40,940
it does this because register eleven as
a global variable

659
00:39:40,940 --> 00:39:45,480
which has a bit describes whether the
bootloaders password has been provided

660
00:39:45,480 --> 00:39:48,290
or not

661
00:39:48,290 --> 00:39:52,220
too because this is a a global variable
containing the password status

662
00:39:52,220 --> 00:39:56,280
if you can just force this variable

663
00:39:56,280 --> 00:39:59,570
and then into the bootloader just a
little bit late

664
00:39:59,570 --> 00:40:03,290
then you'll be able to to dump the code

665
00:40:03,290 --> 00:40:06,880
because it will think that you already
have proved that you know the secrets

666
00:40:06,880 --> 00:40:07,980
inside the chip

667
00:40:07,980 --> 00:40:11,420
and it will they've been unlocked now

668
00:40:11,420 --> 00:40:15,670
if you can execute RAM you can do this
in just six fights

669
00:40:15,670 --> 00:40:18,840
you have a and instruction that moves

670
00:40:18,840 --> 00:40:23,080
ffff in to register eleven setting that
the requisite

671
00:40:23,080 --> 00:40:26,990
and then you do a call to just a little
bit late in the firmware

672
00:40:26,990 --> 00:40:30,930
so the the bootloader begins its C 00 if
you enter it c0

673
00:40:30,930 --> 00:40:36,790
a you will have skipped the in clear
register eleven instruction

674
00:40:36,790 --> 00:40:41,900
but he can't execute from RAM then you
need to use

675
00:40:41,900 --> 00:40:46,470
returning to programming word really
just over return live see that bounces

676
00:40:46,470 --> 00:40:51,350
through a few places before you get
there I'm

677
00:40:51,350 --> 00:40:55,080
it's what you do is you build your app
chain but you don't actually know it's

678
00:40:55,080 --> 00:40:56,780
in flash memory

679
00:40:56,780 --> 00:41:00,530
and everything inside love the
bootloader is in line

680
00:41:00,530 --> 00:41:04,050
she don't have many return instructions
which means you have precious leaf you

681
00:41:04,050 --> 00:41:07,210
return oriented programming gadgets

682
00:41:07,210 --> 00:41:10,920
see can build it blind here's how you do
that

683
00:41:10,920 --> 00:41:14,670
and to start things up we're going to
suppose that we have a stack overflow

684
00:41:14,670 --> 00:41:15,940
bug

685
00:41:15,940 --> 00:41:21,280
generally you'll find this by phasing
and we'll just wait for the

686
00:41:21,280 --> 00:41:24,490
the LED's to blink indicating that the
device is rebooting

687
00:41:24,490 --> 00:41:28,870
and that lets the recognizer crash I
will also assume that you have a copy a

688
00:41:28,870 --> 00:41:29,450
ROM

689
00:41:29,450 --> 00:41:33,530
but you do not have a copy a flash which
is a common case when trying to rip from

690
00:41:33,530 --> 00:41:35,130
around these devices

691
00:41:35,130 --> 00:41:38,640
and we're going to assume that you
cannot execute RAM

692
00:41:38,640 --> 00:41:41,910
so the plan of attack is to use the ROM
entry point

693
00:41:41,910 --> 00:41:45,350
to find the return address offset:

694
00:41:45,350 --> 00:41:49,640
to when you get your crash the crash is
happening because at some point the chip

695
00:41:49,640 --> 00:41:50,920
is returning

696
00:41:50,920 --> 00:41:54,780
and it's popping the wrong value to the
program counter that's causing it to

697
00:41:54,780 --> 00:41:56,360
crash

698
00:41:56,360 --> 00:42:00,080
if you can provide a correct value their
you can make you do something

699
00:42:00,080 --> 00:42:04,120
other than rebooting and in this case we
want to do is wanna make it jump

700
00:42:04,120 --> 00:42:08,840
into the bootloader this is not yet a
victory for us because the butler has a

701
00:42:08,840 --> 00:42:09,740
password

702
00:42:09,740 --> 00:42:13,550
but it tells us that we control the
program counter and it tells is

703
00:42:13,550 --> 00:42:16,920
we're in whatever string we've ever
written

704
00:42:16,920 --> 00:42:20,750
is the the pieces that we need to

705
00:42:20,750 --> 00:42:24,420
over right to control the rest to the
stack

706
00:42:24,420 --> 00:42:28,080
after we have that we're going to move
the bootloader address

707
00:42:28,080 --> 00:42:32,070
up two bites in memory

708
00:42:32,070 --> 00:42:35,560
by doing this it's not going to be at
the right place for the return but we're

709
00:42:35,560 --> 00:42:36,300
going to take

710
00:42:36,300 --> 00:42:39,500
the other word the word where the
program counter goes

711
00:42:39,500 --> 00:42:43,630
and we're going to foot random values in
their we're gonna try every value in

712
00:42:43,630 --> 00:42:45,620
order

713
00:42:45,620 --> 00:42:48,660
and we do this one of two things is
going to happen

714
00:42:48,660 --> 00:42:51,870
either we're going to drop into the
bootloader and we drop into the

715
00:42:51,870 --> 00:42:52,740
bootloader

716
00:42:52,740 --> 00:42:56,440
in the nose that wherever the hell it
went in memory

717
00:42:56,440 --> 00:43:00,430
after that it had a return statement
which popped the second word of the

718
00:43:00,430 --> 00:43:02,520
program counter

719
00:43:02,520 --> 00:43:05,860
this lets a search for return statements
in

720
00:43:05,860 --> 00:43:12,090
flash memory even though we cannot yet
read flash memory

721
00:43:12,090 --> 00:43:15,360
then once we found all these return
addresses if you go just

722
00:43:15,360 --> 00:43:18,880
one word before them in code

723
00:43:18,880 --> 00:43:22,190
then you get the final instruction and
that function

724
00:43:22,190 --> 00:43:26,550
and if you can find one that's a pop or
11 then we have a gadget begins as

725
00:43:26,550 --> 00:43:28,770
control register eleven

726
00:43:28,770 --> 00:43:32,160
and I'll show you in a bit how we can do
it for more complicated attack

727
00:43:32,160 --> 00:43:35,440
ever more complicated chains now

728
00:43:35,440 --> 00:43:39,430
this works because the gadget that we
need is rather common rather small

729
00:43:39,430 --> 00:43:43,650
you're not going to be able to build
turning complete

730
00:43:43,650 --> 00:43:47,980
interpreter using this technique on it
also works because we have a very small

731
00:43:47,980 --> 00:43:50,180
address space

732
00:43:50,180 --> 00:43:55,440
with only 64k memory and the minority
that being used for code

733
00:43:55,440 --> 00:44:00,830
the program that were searching for
gadgets is very small

734
00:44:00,830 --> 00:44:04,430
we also this feedback mechanism in that
we can either

735
00:44:04,430 --> 00:44:08,620
crash or not crash and that leaks one
bit information

736
00:44:08,620 --> 00:44:12,610
outta the chip in this case it lets us
know

737
00:44:12,610 --> 00:44:16,770
whether the thing that we've jumped to
has a return statement or not

738
00:44:16,770 --> 00:44:20,500
and that you could construct different
queries

739
00:44:20,500 --> 00:44:24,940
in your stack city constructed your
stack to where it would crash

740
00:44:24,940 --> 00:44:28,660
in one way or succeed in another way for
anything that you can do

741
00:44:28,660 --> 00:44:32,650
in the stack arrangement than that leads
the league a bit out to

742
00:44:32,650 --> 00:44:35,820
the host add to the attacking party

743
00:44:35,820 --> 00:44:39,560
and unlike AV a PC attack

744
00:44:39,560 --> 00:44:43,790
we have to go to all sorts lengths to
make sure that ass Lars and repeated per

745
00:44:43,790 --> 00:44:47,470
try on a microcontroller the only

746
00:44:47,470 --> 00:44:52,100
thing that scrambled up this after
attacking is that we don't have its code

747
00:44:52,100 --> 00:44:56,670
to as we rebuilt everything stays in the
exact same plays in whatever was leaked

748
00:44:56,670 --> 00:44:58,100
on the prior try

749
00:44:58,100 --> 00:45:02,830
is still valid

750
00:45:02,830 --> 00:45:06,650
so that the first and we is facing to
find a stack buffer overflow

751
00:45:06,650 --> 00:45:10,570
and then it we just try filling those
bites with

752
00:45:10,570 --> 00:45:13,750
are known good return pointer

753
00:45:13,750 --> 00:45:17,580
this is the entry address for the
bootloader and she can see here they had

754
00:45:17,580 --> 00:45:18,820
multiple attempts

755
00:45:18,820 --> 00:45:22,830
the offset was slid over and every one
of these would have rebooted the device

756
00:45:22,830 --> 00:45:24,650
to its natural firmware

757
00:45:24,650 --> 00:45:28,690
except for the third attempt which would
drop into the boiler

758
00:45:28,690 --> 00:45:33,240
and on that attempts we know that the
second parent fights

759
00:45:33,240 --> 00:45:37,580
controls the return fire and we can do
this blind we can do this without a

760
00:45:37,580 --> 00:45:40,980
backer

761
00:45:40,980 --> 00:45:44,330
now we control program counter I'm

762
00:45:44,330 --> 00:45:48,470
be figure out the password ok but we
can't do that

763
00:45:48,470 --> 00:45:52,840
so instead we have to do is we have to
find a spot for 11 gadget

764
00:45:52,840 --> 00:45:56,190
the first stage to that is searching
former

765
00:45:56,190 --> 00:45:59,560
the return statements because we know
that all gadgets in the rap chain

766
00:45:59,560 --> 00:46:02,860
are going to come just before I return
statement

767
00:46:02,860 --> 00:46:06,050
especially when we're trying to move
something out of the stack

768
00:46:06,050 --> 00:46:09,830
and into a register

769
00:46:09,830 --> 00:46:12,900
to redo is we move the bootloader at

770
00:46:12,900 --> 00:46:15,980
at the SL entry point the bootloader
entry point

771
00:46:15,980 --> 00:46:19,090
just a little bit further in the stack

772
00:46:19,090 --> 00:46:23,570
so the won't be the address that we
returned to

773
00:46:23,570 --> 00:46:27,610
and then where that address was and the
thing that actually is going in the

774
00:46:27,610 --> 00:46:28,950
program counter

775
00:46:28,950 --> 00:46:33,690
at that address we put a value that we
just keep incrementing on each try

776
00:46:33,690 --> 00:46:37,090
and we record all the successes in all
the failures

777
00:46:37,090 --> 00:46:41,390
and every success might be a return
instruction

778
00:46:41,390 --> 00:46:45,490
52 successes in a row then was usually
happening is that it's

779
00:46:45,490 --> 00:46:48,610
return instruction followed by a

780
00:46:48,610 --> 00:46:53,680
Lee function or something that doesn't
rely upon anything on the stack

781
00:46:53,680 --> 00:46:58,470
and that's because the function repairs
its own stock before returns

782
00:46:58,470 --> 00:47:04,120
I so if you find an address that works
and just before it there's an address

783
00:47:04,120 --> 00:47:05,480
that doesn't work

784
00:47:05,480 --> 00:47:08,730
that's a gadget

785
00:47:08,730 --> 00:47:12,160
now we have the gadgets we don't know
what they do yet

786
00:47:12,160 --> 00:47:15,920
but that's okay because they're only
fifty nine of them

787
00:47:15,920 --> 00:47:19,940
and in a few different programs for this
microcontroller that we tried

788
00:47:19,940 --> 00:47:24,230
there are between 50 and 150

789
00:47:24,230 --> 00:47:27,500
valid instruction words love the

790
00:47:27,500 --> 00:47:30,660
program her valid entry point

791
00:47:30,660 --> 00:47:34,860
gadget this varies drastically by the
architecture in the compiler

792
00:47:34,860 --> 00:47:38,200
but for all invented systems it's rather
low soon

793
00:47:38,200 --> 00:47:41,600
the fourth step is to try to each of
these out with the appropriate stack

794
00:47:41,600 --> 00:47:43,150
layout

795
00:47:43,150 --> 00:47:46,690
just struggling the order up until it
works

796
00:47:46,690 --> 00:47:50,090
and eventually this will drop into the
bootloader and as it drops into the

797
00:47:50,090 --> 00:47:53,380
bootloader we will have already elevated
are put privilege

798
00:47:53,380 --> 00:47:57,210
and we can then politely ask it for
copying firmware and it will read it

799
00:47:57,210 --> 00:48:00,520
back to us

800
00:48:00,520 --> 00:48:04,010
the final call stock look something like
this: in that the

801
00:48:04,010 --> 00:48:07,020
highest word that's the last thing that
will be part of the stack

802
00:48:07,020 --> 00:48:10,730
is 0 Cesar E that's the Bhutto entry
point

803
00:48:10,730 --> 00:48:15,180
and that's what's called last just after
that we have

804
00:48:15,180 --> 00:48:20,620
ffff which is a constant that we want to
be loaded into register eleven

805
00:48:20,620 --> 00:48:23,900
and following that we have the address
some gadget

806
00:48:23,900 --> 00:48:27,500
that pops the stack word

807
00:48:27,500 --> 00:48:30,860
into register eleven

808
00:48:30,860 --> 00:48:35,290
and because we've narrowed it down to 59
possibilities

809
00:48:35,290 --> 00:48:38,470
after the tearing down prices we could
do it 59 attempts

810
00:48:38,470 --> 00:48:43,670
if we want to narrow down first we could
do it in eight thousand a tense

811
00:48:43,670 --> 00:48:48,350
on if they're to gadgets and then it
only takes 59 squared

812
00:48:48,350 --> 00:48:52,290
4,000 tries and for three we could do it
in two hundred thousand tries

813
00:48:52,290 --> 00:48:55,890
which is still feasibly small to
accomplish in a reasonable amount of

814
00:48:55,890 --> 00:48:57,430
time

815
00:48:57,430 --> 00:49:01,220
she can build these drop chains even
when you don't have a copy

816
00:49:01,220 --> 00:49:06,130
I'll the code and even when the purpose
in the exploit is to get the code out of

817
00:49:06,130 --> 00:49:09,160
the chip

818
00:49:09,160 --> 00:49:13,890
now on a higher-end chip you would patch
RAM

819
00:49:13,890 --> 00:49:17,610
city has many these chips camped execute
flash directly

820
00:49:17,610 --> 00:49:21,040
the copy everything into RAM and then
you just patch RAM

821
00:49:21,040 --> 00:49:24,440
this works just like a TSR would

822
00:49:24,440 --> 00:49:29,600
in ms-dos and olive your traditional
hooking functions work

823
00:49:29,600 --> 00:49:33,010
about you patching flash it's different

824
00:49:33,010 --> 00:49:38,610
because their cases in which you can
overwrite flash but he can't erase flash

825
00:49:38,610 --> 00:49:42,440
this is common when you trying to catch
the drips table directly

826
00:49:42,440 --> 00:49:46,280
as all hell breaks loose if the inner
table is in flash memory

827
00:49:46,280 --> 00:49:50,740
you can't move it and you erase it
because at that point there are no valid

828
00:49:50,740 --> 00:49:51,360
interrupts

829
00:49:51,360 --> 00:49:54,630
and you've picked the chip and

830
00:49:54,630 --> 00:50:00,380
not nor flash memory does not work like
gramm you can cleared its individually

831
00:50:00,380 --> 00:50:03,770
you can move them from 120 but you can't
move them back

832
00:50:03,770 --> 00:50:09,000
individually you can't raises your to a
one in the series the entire page

833
00:50:09,000 --> 00:50:12,020
and erasing an entire page is rather
dramatic feature

834
00:50:12,020 --> 00:50:15,480
because for that amount of time
everything in that pages now will

835
00:50:15,480 --> 00:50:19,260
ffff

836
00:50:19,260 --> 00:50:22,690
and if you trying to patch piece of code
that contains

837
00:50:22,690 --> 00:50:25,730
code that you need to do you write
primitive then you've just

838
00:50:25,730 --> 00:50:29,390
brick machine as you're trying to
exploit a

839
00:50:29,390 --> 00:50:32,880
it's what you do is you construct
overwrites the turn what used to be

840
00:50:32,880 --> 00:50:33,350
there

841
00:50:33,350 --> 00:50:39,330
into what you want their only by doing
that lies ans

842
00:50:39,330 --> 00:50:42,410
to as flashes ever written every

843
00:50:42,410 --> 00:50:45,620
it gets pumped up to one in the drop in
20

844
00:50:45,620 --> 00:50:50,160
so if you begin with ffff and the right
deat on top

845
00:50:50,160 --> 00:50:54,810
with its actually doing is inverting
deat

846
00:50:54,810 --> 00:51:01,180
and then clearing all those bits so what
remains is deat

847
00:51:01,180 --> 00:51:04,870
now if you imagine I am

848
00:51:04,870 --> 00:51:08,220
imagine the start the TAT

849
00:51:08,220 --> 00:51:13,320
any right FF 00 what happens is that it
inverts FF 00

850
00:51:13,320 --> 00:51:18,050
to get 00 FF and then it clears that
second by

851
00:51:18,050 --> 00:51:21,080
you end up with the easier 0

852
00:51:21,080 --> 00:51:25,180
so in this case it's valuable to know
which bit sticky clear

853
00:51:25,180 --> 00:51:31,160
in order to change the way the program
behaves

854
00:51:31,160 --> 00:51:34,370
and you can do this with only a poke
primitive

855
00:51:34,370 --> 00:51:37,720
because all you need to do is call the
regular flash

856
00:51:37,720 --> 00:51:42,180
writing factions but you can't do in a
race as easily as a right because the

857
00:51:42,180 --> 00:51:45,730
race might damage your poke from a diff

858
00:51:45,730 --> 00:51:48,950
so what tricks can allow you know the
right it's too clear

859
00:51:48,950 --> 00:51:52,790
on the amnesty for 30 RAM is beneath
flash

860
00:51:52,790 --> 00:51:57,090
seeking clear significant bits I love an
immediate address

861
00:51:57,090 --> 00:52:00,330
to change the destination ever call
instruction

862
00:52:00,330 --> 00:52:03,710
to move it from flash memory to ram

863
00:52:03,710 --> 00:52:08,180
for example if you've got a call to be
EF

864
00:52:08,180 --> 00:52:11,770
you can move that to call 202 EF

865
00:52:11,770 --> 00:52:14,900
by clearing bits in the upper word and
02

866
00:52:14,900 --> 00:52:20,270
EF is within ran this allows you to move
a function pointer

867
00:52:20,270 --> 00:52:24,220
two-point into a buffer that you control

868
00:52:24,220 --> 00:52:27,250
and then if you do this on apps an
obscure command you can just move the

869
00:52:27,250 --> 00:52:29,930
handler for command would otherwise
never need

870
00:52:29,930 --> 00:52:33,350
to be in ran that you control and give
yourself a back door into the

871
00:52:33,350 --> 00:52:35,780
application

872
00:52:35,780 --> 00:52:38,930
this is particularly handy when you're
trying to do a simple patch to give you

873
00:52:38,930 --> 00:52:40,400
execution from RAM

874
00:52:40,400 --> 00:52:44,320
in order to avoid breaking the device
and 9805

875
00:52:44,320 --> 00:52:47,510
one if you do a similar thing in code
memory

876
00:52:47,510 --> 00:52:50,570
by nothing out instructions

877
00:52:50,570 --> 00:52:54,410
and sue 8051 has a particularly nice
feature

878
00:52:54,410 --> 00:52:57,410
the 00 is a one bite

879
00:52:57,410 --> 00:53:00,590
instruction that is a no up

880
00:53:00,590 --> 00:53:03,930
and you can always clear bets she could
change any instruction

881
00:53:03,930 --> 00:53:07,540
by he wants 200 and turn it into an hour

882
00:53:07,540 --> 00:53:10,910
this allows you to clear out
instructions have code to change its

883
00:53:10,910 --> 00:53:12,500
behavior

884
00:53:12,500 --> 00:53:15,840
so if you have a owners instruction that

885
00:53:15,840 --> 00:53:19,540
lowers your privilege before the
application beat up

886
00:53:19,540 --> 00:53:22,270
you can just cut out that region of code
and everything else will function

887
00:53:22,270 --> 00:53:25,430
properly

888
00:53:25,430 --> 00:53:29,260
I'm is running out of time now but I
hope from this luxury

889
00:53:29,260 --> 00:53:32,990
you have learned that embedded systems
are exploited in different ways from her

890
00:53:32,990 --> 00:53:34,360
species

891
00:53:34,360 --> 00:53:38,520
and that all these unique and annoying
behaviors that make it hard to develop

892
00:53:38,520 --> 00:53:39,750
for them

893
00:53:39,750 --> 00:53:42,980
can be used in writing exploits against

894
00:53:42,980 --> 00:53:46,810
and every particular limitation that
I've mentioned here has an exception to

895
00:53:46,810 --> 00:53:47,530
it

896
00:53:47,530 --> 00:53:52,410
a justice on 8051 machines can execute
from RAM

897
00:53:52,410 --> 00:53:56,830
some fun I'm machines cannot similarly
for everything else here but it's by

898
00:53:56,830 --> 00:53:57,970
recognizing

899
00:53:57,970 --> 00:54:01,140
the limitations and the quirks

900
00:54:01,140 --> 00:54:05,750
your particular target that you can come
up with an exploit that functions on

901
00:54:05,750 --> 00:54:09,140
and it functions on it using the minimal
amount

902
00:54:09,140 --> 00:54:13,790
space and have development effort

903
00:54:13,790 --> 00:54:20,790
thank you kindly for your time are there
any questions

904
00:54:24,580 --> 00:54:31,580
we have a five minutes for questions %uh
said

905
00:54:42,160 --> 00:54:45,170
so question is is there always pop

906
00:54:45,170 --> 00:54:49,350
are 11 get it on those chips no

907
00:54:49,350 --> 00:54:53,390
I pick whatever gadget you want and it's
not always available

908
00:54:53,390 --> 00:54:58,660
part is the I want the privileges that
you have in a larger machine

909
00:54:58,660 --> 00:55:03,780
is you have a much larger call stack and
so you can sort have combined weaker

910
00:55:03,780 --> 00:55:05,100
gadgets to builds

911
00:55:05,100 --> 00:55:08,350
more valuable ones in

912
00:55:08,350 --> 00:55:11,840
the pop R eleven example I had the
advantage that the

913
00:55:11,840 --> 00:55:16,620
compiler was using that as temporary
variable

914
00:55:16,620 --> 00:55:21,520
inside and flash memory but that the
mask ROM was made with a different

915
00:55:21,520 --> 00:55:24,520
compilers that use that same registers a
global variable

916
00:55:24,520 --> 00:55:27,720
and by this technique love randomly

917
00:55:27,720 --> 00:55:33,380
assembling your gadgets and you lose the
ability to perform any function and use

918
00:55:33,380 --> 00:55:35,840
or have limited to doing the things that
you got its allow

919
00:55:35,840 --> 00:55:40,500
so I was rather lucky that pop are 11
was among the available gadgets

920
00:55:40,500 --> 00:55:43,500
your my

921
00:55:43,500 --> 00:55:46,890
question is rather owed you start in
fine

922
00:55:46,890 --> 00:55:49,910
a stack the field flew for example

923
00:55:49,910 --> 00:55:53,580
at allows you to you love right region
addresses

924
00:55:53,580 --> 00:55:59,080
I mean on so much to pictures to return
addresses is stored in the register

925
00:55:59,080 --> 00:56:02,310
ours to I'm MSP 4:30 p.m.

926
00:56:02,310 --> 00:56:05,640
the Intel a dose 51 is is

927
00:56:05,640 --> 00:56:08,670
always the case that the return address
is stored in stack

928
00:56:08,670 --> 00:56:12,070
or so on the amnesty for 30 they went
with

929
00:56:12,070 --> 00:56:15,130
an almost risk design who

930
00:56:15,130 --> 00:56:19,560
the elected to have returned pointers on
the stack instead even a link register

931
00:56:19,560 --> 00:56:21,830
as you might have fun signature PowerPC

932
00:56:21,830 --> 00:56:28,400
in the 8051 the compiler can actually
choose different ways to manage the

933
00:56:28,400 --> 00:56:29,320
return stack

934
00:56:29,320 --> 00:56:32,720
so if you have a an application that's
expected to do

935
00:56:32,720 --> 00:56:37,060
Rick recive calls the recursive calling
convention will be different from the

936
00:56:37,060 --> 00:56:38,480
standard calling convention

937
00:56:38,480 --> 00:56:43,260
and this tax will actually be in
different memories so they can anything

938
00:56:43,260 --> 00:56:46,700
else this is unique to the individual
chip that you're attacking

939
00:56:46,700 --> 00:56:51,180
but in general it's very common for
microcontrollers to save the return

940
00:56:51,180 --> 00:56:52,200
point is under the stack

941
00:56:52,200 --> 00:56:55,370
and forward the program is to be very
loose

942
00:56:55,370 --> 00:56:58,390
about a freelance and

943
00:56:58,390 --> 00:57:01,440
who'd you attack a chip that you can't
find the

944
00:57:01,440 --> 00:57:05,410
crashes by phasing and how do you get
the code if you own

945
00:57:05,410 --> 00:57:08,660
get renny I mean if you don't get any
vulnerability

946
00:57:08,660 --> 00:57:11,890
if I only needed copy the code from one
chip

947
00:57:11,890 --> 00:57:15,220
I would call Chris Turner ask you
because that man can break anything with

948
00:57:15,220 --> 00:57:15,670
wheels

949
00:57:15,670 --> 00:57:19,230
ever did that thats I mean playing by
the rules

950
00:57:19,230 --> 00:57:23,570
yeah a if you get to the point where
nothing else works

951
00:57:23,570 --> 00:57:27,620
there are lab services are you can call
in a colleague

952
00:57:27,620 --> 00:57:32,550
bed generally I've had very good luck
attacking is Butler's

953
00:57:32,550 --> 00:57:37,570
can't thank you any other questions from
the floor

954
00:57:37,570 --> 00:57:40,750
no

955
00:57:40,750 --> 00:57:43,290
Travis thank you very much thank you

