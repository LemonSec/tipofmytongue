1
00:00:09,530 --> 00:00:13,190
<font color="#E5E5E5">thanks everyone thanks for</font><font color="#CCCCCC"> being</font><font color="#E5E5E5"> here</font>

2
00:00:11,509 --> 00:00:14,629
it's my first<font color="#E5E5E5"> time in Singapore first</font>

3
00:00:13,190 --> 00:00:17,000
<font color="#CCCCCC">heck in the box for</font><font color="#E5E5E5"> me it's been a</font>

4
00:00:14,629 --> 00:00:19,099
pretty<font color="#CCCCCC"> awesome conference</font><font color="#E5E5E5"> so</font><font color="#CCCCCC"> far</font>

5
00:00:17,000 --> 00:00:22,609
but yeah<font color="#E5E5E5"> what I want to talk to you</font>

6
00:00:19,099 --> 00:00:25,369
about today<font color="#CCCCCC"> is</font><font color="#E5E5E5"> something that I think</font><font color="#CCCCCC"> is</font>

7
00:00:22,609 --> 00:00:27,079
<font color="#CCCCCC">going to</font><font color="#E5E5E5"> be pretty interesting</font><font color="#CCCCCC"> it's</font><font color="#E5E5E5"> this</font>

8
00:00:25,369 --> 00:00:30,649
idea of<font color="#CCCCCC"> Hardware</font><font color="#E5E5E5"> back doors</font><font color="#CCCCCC"> and that's</font>

9
00:00:27,079 --> 00:00:34,220
sort<font color="#E5E5E5"> of a concept that's thrown around a</font>

10
00:00:30,649 --> 00:00:36,140
<font color="#E5E5E5">lot these</font><font color="#CCCCCC"> days it's often talked about</font>

11
00:00:34,220 --> 00:00:38,210
in<font color="#E5E5E5"> terms of conspiracy theories a lot of</font>

12
00:00:36,140 --> 00:00:39,949
people talk about<font color="#E5E5E5"> Intel management</font>

13
00:00:38,210 --> 00:00:41,870
engine and the platform security

14
00:00:39,949 --> 00:00:43,129
processor as if there<font color="#E5E5E5"> are</font><font color="#CCCCCC"> Dweck doors</font>

15
00:00:41,870 --> 00:00:45,019
but there's<font color="#CCCCCC"> there's never really</font><font color="#E5E5E5"> been</font>

16
00:00:43,129 --> 00:00:46,970
<font color="#E5E5E5">any evidence that the things that we</font>

17
00:00:45,019 --> 00:00:48,589
<font color="#CCCCCC">normally think</font><font color="#E5E5E5"> about or</font><font color="#CCCCCC"> worry about</font><font color="#E5E5E5"> are</font>

18
00:00:46,970 --> 00:00:49,640
actually Hardware backdoors so instead

19
00:00:48,590 --> 00:00:52,100
what I'm gonna be talking<font color="#CCCCCC"> about</font><font color="#E5E5E5"> is</font>

20
00:00:49,640 --> 00:00:53,449
something entirely different<font color="#CCCCCC"> than</font><font color="#E5E5E5"> those</font>

21
00:00:52,100 --> 00:00:56,210
normal things<font color="#E5E5E5"> something that I don't</font>

22
00:00:53,449 --> 00:00:58,599
<font color="#CCCCCC">think was on anybody's radar something</font>

23
00:00:56,210 --> 00:01:02,089
that we really<font color="#E5E5E5"> didn't know</font><font color="#CCCCCC"> existed</font>

24
00:00:58,600 --> 00:01:03,260
<font color="#CCCCCC">before this but</font><font color="#E5E5E5"> before I began</font><font color="#CCCCCC"> lawyers</font>

25
00:01:02,089 --> 00:01:05,030
<font color="#E5E5E5">made me put in this very important</font>

26
00:01:03,260 --> 00:01:07,190
disclaimer<font color="#CCCCCC"> that I did all this work</font>

27
00:01:05,030 --> 00:01:08,660
<font color="#CCCCCC">before I joined my current employer I</font>

28
00:01:07,190 --> 00:01:11,420
did all this on<font color="#E5E5E5"> my own and</font><font color="#CCCCCC"> none of this</font>

29
00:01:08,660 --> 00:01:14,300
work reflects my employer in any way

30
00:01:11,420 --> 00:01:15,770
shape<font color="#E5E5E5"> or</font><font color="#CCCCCC"> form but beyond that my name is</font>

31
00:01:14,300 --> 00:01:18,649
Christopher<font color="#CCCCCC"> Domus I'm a cybersecurity</font>

32
00:01:15,770 --> 00:01:20,270
<font color="#E5E5E5">researcher I've poked</font><font color="#CCCCCC"> around with a lot</font>

33
00:01:18,649 --> 00:01:22,099
<font color="#CCCCCC">of different</font><font color="#E5E5E5"> things over</font><font color="#CCCCCC"> the years</font><font color="#E5E5E5"> but</font>

34
00:01:20,270 --> 00:01:24,649
<font color="#CCCCCC">recently my interests have</font><font color="#E5E5E5"> sort of</font><font color="#CCCCCC"> been</font>

35
00:01:22,099 --> 00:01:25,819
<font color="#CCCCCC">in</font><font color="#E5E5E5"> low level processor security and</font>

36
00:01:24,649 --> 00:01:28,729
<font color="#E5E5E5">that's sort of what we're going to look</font>

37
00:01:25,819 --> 00:01:30,289
<font color="#E5E5E5">at today</font><font color="#CCCCCC"> but I want to start this whole</font>

38
00:01:28,729 --> 00:01:32,450
<font color="#CCCCCC">thing off with just a</font><font color="#E5E5E5"> little demo to</font>

39
00:01:30,289 --> 00:01:35,209
frame via<font color="#E5E5E5"> the rest of the discussion</font>

40
00:01:32,450 --> 00:01:37,190
<font color="#CCCCCC">here so I've got a little</font><font color="#E5E5E5"> video</font><font color="#CCCCCC"> here I'm</font>

41
00:01:35,209 --> 00:01:39,110
logged<font color="#E5E5E5"> into this system as a regular</font>

42
00:01:37,190 --> 00:01:40,369
unprivileged user just called Delta and

43
00:01:39,110 --> 00:01:41,360
then<font color="#CCCCCC"> I'm going to</font><font color="#E5E5E5"> open up this C file</font>

44
00:01:40,369 --> 00:01:43,090
and we're going<font color="#CCCCCC"> to</font><font color="#E5E5E5"> look at what's inside</font>

45
00:01:41,360 --> 00:01:46,310
<font color="#CCCCCC">this</font><font color="#E5E5E5"> C file it's basically a bunch of</font>

46
00:01:43,090 --> 00:01:47,959
assembly code where I'm<font color="#E5E5E5"> moving the</font>

47
00:01:46,310 --> 00:01:50,300
address of a label<font color="#E5E5E5"> into a register</font><font color="#CCCCCC"> and</font>

48
00:01:47,959 --> 00:01:51,800
<font color="#CCCCCC">I've got all these bound instructions so</font>

49
00:01:50,300 --> 00:01:53,899
if<font color="#E5E5E5"> you're not familiar with the bound</font>

50
00:01:51,800 --> 00:01:55,429
instruction in x86 it's not too common

51
00:01:53,899 --> 00:01:57,860
<font color="#E5E5E5">but it's basically used to check</font><font color="#CCCCCC"> whether</font>

52
00:01:55,429 --> 00:02:00,020
<font color="#E5E5E5">or not a value is within certain memory</font>

53
00:01:57,860 --> 00:02:02,119
bounds<font color="#E5E5E5"> so all of those bound</font>

54
00:02:00,020 --> 00:02:04,670
instructions should fault<font color="#CCCCCC"> because</font>

55
00:02:02,119 --> 00:02:07,220
<font color="#E5E5E5">they're looking at a nonsensical data</font>

56
00:02:04,670 --> 00:02:10,310
<font color="#CCCCCC">and sure enough when I run my</font><font color="#E5E5E5"> little</font>

57
00:02:07,220 --> 00:02:12,709
<font color="#E5E5E5">demo</font><font color="#CCCCCC"> here after compiling</font><font color="#E5E5E5"> it</font><font color="#CCCCCC"> the program</font>

58
00:02:10,310 --> 00:02:14,959
faults it crashes<font color="#E5E5E5"> nothing interesting</font>

59
00:02:12,709 --> 00:02:16,519
happened<font color="#E5E5E5"> but then if I change one tiny</font>

60
00:02:14,959 --> 00:02:18,950
tiny<font color="#CCCCCC"> little thing at the very beginning</font>

61
00:02:16,519 --> 00:02:21,590
of this<font color="#CCCCCC"> program if I add one sort</font><font color="#E5E5E5"> of</font>

62
00:02:18,950 --> 00:02:23,629
secret x86 instruction and instructions

63
00:02:21,590 --> 00:02:27,050
so obscure it doesn't even have a name<font color="#E5E5E5"> I</font>

64
00:02:23,629 --> 00:02:29,570
have<font color="#E5E5E5"> to write it</font><font color="#CCCCCC"> out as raw bytes if I</font>

65
00:02:27,050 --> 00:02:30,680
add this<font color="#E5E5E5"> Oh F 3 F to begin out my the</font>

66
00:02:29,570 --> 00:02:32,629
rest of my program

67
00:02:30,680 --> 00:02:34,340
going to<font color="#CCCCCC"> fundamentally change</font><font color="#E5E5E5"> the</font><font color="#CCCCCC"> way</font>

68
00:02:32,629 --> 00:02:35,719
<font color="#E5E5E5">the rest of these bound instructions</font>

69
00:02:34,340 --> 00:02:37,129
work and now what they're<font color="#E5E5E5"> going</font><font color="#CCCCCC"> to be</font>

70
00:02:35,719 --> 00:02:38,900
able to<font color="#E5E5E5"> do is they're going to reach</font>

71
00:02:37,129 --> 00:02:43,040
into the<font color="#CCCCCC"> kernel and actually give my</font>

72
00:02:38,900 --> 00:02:45,620
process<font color="#CCCCCC"> route</font><font color="#E5E5E5"> level permissions</font><font color="#CCCCCC"> so now</font>

73
00:02:43,040 --> 00:02:47,989
when I<font color="#E5E5E5"> run my demo and check who I am</font>

74
00:02:45,620 --> 00:02:51,620
<font color="#E5E5E5">I'm now the root user</font><font color="#CCCCCC"> without even</font>

75
00:02:47,989 --> 00:02:53,840
making<font color="#CCCCCC"> any sort</font><font color="#E5E5E5"> of API or system calls</font>

76
00:02:51,620 --> 00:02:55,459
or anything else we just<font color="#E5E5E5"> sort of reached</font>

77
00:02:53,840 --> 00:02:58,159
past all the privileged boundaries on

78
00:02:55,459 --> 00:03:00,230
this<font color="#E5E5E5"> system in order to gain root access</font>

79
00:02:58,159 --> 00:03:03,019
so that<font color="#E5E5E5"> kind of thing</font><font color="#CCCCCC"> definitely</font>

80
00:03:00,230 --> 00:03:04,280
shouldn't exist<font color="#E5E5E5"> but it's a sort</font><font color="#CCCCCC"> of</font>

81
00:03:03,019 --> 00:03:05,150
fascinating that is here and<font color="#E5E5E5"> that's</font><font color="#CCCCCC"> sort</font>

82
00:03:04,280 --> 00:03:08,750
of<font color="#E5E5E5"> what the rest of the presentation</font>

83
00:03:05,150 --> 00:03:11,989
<font color="#CCCCCC">will be</font><font color="#E5E5E5"> on is really how I I found this</font>

84
00:03:08,750 --> 00:03:13,900
<font color="#E5E5E5">this</font><font color="#CCCCCC"> backdoor in this processor and the</font>

85
00:03:11,989 --> 00:03:16,700
whole thing comes<font color="#CCCCCC"> down to the idea of</font>

86
00:03:13,900 --> 00:03:18,769
what in x86 we call rings of privilege

87
00:03:16,700 --> 00:03:21,560
so basically<font color="#CCCCCC"> thirty years ago</font><font color="#E5E5E5"> and the</font>

88
00:03:18,769 --> 00:03:23,389
x86<font color="#E5E5E5"> architecture</font><font color="#CCCCCC"> there was no concept of</font>

89
00:03:21,560 --> 00:03:25,040
separation of privileges basically any

90
00:03:23,389 --> 00:03:27,590
code that<font color="#E5E5E5"> ran on the processor could</font>

91
00:03:25,040 --> 00:03:29,209
have the exact<font color="#E5E5E5"> same permissions as any</font>

92
00:03:27,590 --> 00:03:31,219
other code running<font color="#E5E5E5"> on the</font><font color="#CCCCCC"> processor and</font>

93
00:03:29,209 --> 00:03:33,319
that<font color="#CCCCCC"> was</font><font color="#E5E5E5"> basically just chaos it meant</font>

94
00:03:31,219 --> 00:03:35,090
that<font color="#E5E5E5"> like your calculator program could</font>

95
00:03:33,319 --> 00:03:36,708
monitor when you were<font color="#E5E5E5"> accessing your</font>

96
00:03:35,090 --> 00:03:40,489
bank account<font color="#CCCCCC"> because there's there's</font><font color="#E5E5E5"> no</font>

97
00:03:36,709 --> 00:03:42,319
separation between anything<font color="#CCCCCC"> but then x86</font>

98
00:03:40,489 --> 00:03:44,299
introduced this<font color="#E5E5E5"> idea</font><font color="#CCCCCC"> of rings of</font>

99
00:03:42,319 --> 00:03:46,939
privilege<font color="#E5E5E5"> that we're going to separate</font>

100
00:03:44,299 --> 00:03:48,590
<font color="#E5E5E5">pieces of code</font><font color="#CCCCCC"> into different privileges</font>

101
00:03:46,939 --> 00:03:51,439
and<font color="#E5E5E5"> the way this basically works is</font>

102
00:03:48,590 --> 00:03:54,199
something<font color="#CCCCCC"> like this</font><font color="#E5E5E5"> so at the center</font><font color="#CCCCCC"> and</font>

103
00:03:51,439 --> 00:03:55,849
ring<font color="#CCCCCC"> 0 that's</font><font color="#E5E5E5"> going to be your most</font>

104
00:03:54,199 --> 00:03:57,079
privileged code that's where the<font color="#E5E5E5"> kernel</font>

105
00:03:55,849 --> 00:03:59,388
and everything else<font color="#CCCCCC"> that you really</font>

106
00:03:57,079 --> 00:04:00,650
<font color="#E5E5E5">really trust lives all the things that</font>

107
00:03:59,389 --> 00:04:01,909
actually<font color="#E5E5E5"> have to have</font><font color="#CCCCCC"> access</font><font color="#E5E5E5"> to the</font>

108
00:04:00,650 --> 00:04:04,159
physical<font color="#CCCCCC"> Hardware</font><font color="#E5E5E5"> of</font><font color="#CCCCCC"> this system are</font>

109
00:04:01,909 --> 00:04:05,810
<font color="#CCCCCC">going</font><font color="#E5E5E5"> to sit in ring</font><font color="#CCCCCC"> 0</font><font color="#E5E5E5"> but then less</font>

110
00:04:04,159 --> 00:04:07,280
privileged in ring<font color="#E5E5E5"> 0 is going</font><font color="#CCCCCC"> to be</font><font color="#E5E5E5"> what</font>

111
00:04:05,810 --> 00:04:09,590
we call<font color="#E5E5E5"> ring 1 less privileged and</font>

112
00:04:07,280 --> 00:04:12,109
<font color="#E5E5E5">wearing</font><font color="#CCCCCC"> whine is ring 2 and finally in</font>

113
00:04:09,590 --> 00:04:13,250
the<font color="#E5E5E5"> outermost layer we have ring 3 and</font>

114
00:04:12,109 --> 00:04:14,840
that's<font color="#CCCCCC"> where we're</font><font color="#E5E5E5"> going to toss all our</font>

115
00:04:13,250 --> 00:04:16,430
<font color="#E5E5E5">userland code all of our regular</font>

116
00:04:14,840 --> 00:04:18,440
applications and<font color="#CCCCCC"> everything else the</font>

117
00:04:16,430 --> 00:04:20,299
stuff that we don't necessarily<font color="#E5E5E5"> trust to</font>

118
00:04:18,440 --> 00:04:21,560
have<font color="#E5E5E5"> access to the hardware then the way</font>

119
00:04:20,298 --> 00:04:23,359
<font color="#E5E5E5">this is going to work is when something</font>

120
00:04:21,560 --> 00:04:24,530
in ring 3<font color="#CCCCCC"> actually</font><font color="#E5E5E5"> wants</font><font color="#CCCCCC"> to do something</font>

121
00:04:23,360 --> 00:04:26,240
important<font color="#E5E5E5"> when it needs special</font>

122
00:04:24,530 --> 00:04:28,820
<font color="#E5E5E5">permissions it's going to have to follow</font>

123
00:04:26,240 --> 00:04:31,789
a very very<font color="#E5E5E5"> careful strict Hardware</font>

124
00:04:28,820 --> 00:04:34,789
enforced set of security<font color="#CCCCCC"> checks in order</font>

125
00:04:31,789 --> 00:04:35,930
to ask ring<font color="#E5E5E5"> 0 to do something for it and</font>

126
00:04:34,789 --> 00:04:38,060
that's the way things<font color="#CCCCCC"> have worked for</font>

127
00:04:35,930 --> 00:04:39,979
the last<font color="#E5E5E5"> 30 years we've separated our</font>

128
00:04:38,060 --> 00:04:42,139
code<font color="#E5E5E5"> into these different rings ring 0</font>

129
00:04:39,979 --> 00:04:43,320
has the most privileges ring 3 has has

130
00:04:42,139 --> 00:04:46,040
almost nothing

131
00:04:43,320 --> 00:04:48,750
but it's<font color="#E5E5E5"> sort of interesting</font><font color="#CCCCCC"> since this</font>

132
00:04:46,040 --> 00:04:50,370
came out<font color="#E5E5E5"> things have continued to sort</font>

133
00:04:48,750 --> 00:04:52,590
of<font color="#CCCCCC"> evolve</font><font color="#E5E5E5"> and security researchers have</font>

134
00:04:50,370 --> 00:04:55,650
continued<font color="#CCCCCC"> to dig deeper into</font><font color="#E5E5E5"> the</font>

135
00:04:52,590 --> 00:04:57,690
<font color="#E5E5E5">processor</font><font color="#CCCCCC"> so eventually we sort</font><font color="#E5E5E5"> of</font>

136
00:04:55,650 --> 00:04:58,919
<font color="#E5E5E5">figured out that well if we want to run</font>

137
00:04:57,690 --> 00:05:02,280
multiple operating<font color="#CCCCCC"> systems on a</font>

138
00:04:58,920 --> 00:05:03,990
processor<font color="#CCCCCC"> it doesn't work to have them</font>

139
00:05:02,280 --> 00:05:05,549
all running<font color="#E5E5E5"> in in ring zero we need</font>

140
00:05:03,990 --> 00:05:06,570
something<font color="#CCCCCC"> more privileged than ring</font><font color="#E5E5E5"> zero</font>

141
00:05:05,550 --> 00:05:08,850
in order<font color="#CCCCCC"> to</font><font color="#E5E5E5"> separate out different</font>

142
00:05:06,570 --> 00:05:11,219
<font color="#E5E5E5">operating systems like the hypervisor so</font>

143
00:05:08,850 --> 00:05:12,930
we called that ring<font color="#CCCCCC"> minus one since the</font>

144
00:05:11,220 --> 00:05:14,490
<font color="#E5E5E5">hypervisor has more privileges than the</font>

145
00:05:12,930 --> 00:05:18,810
guest operating<font color="#CCCCCC"> systems that's sort of</font>

146
00:05:14,490 --> 00:05:19,920
sort of<font color="#CCCCCC"> a deeper ring and then x86</font>

147
00:05:18,810 --> 00:05:21,870
introduced this thing called system

148
00:05:19,920 --> 00:05:23,220
management mode<font color="#E5E5E5"> which actually was more</font>

149
00:05:21,870 --> 00:05:25,440
privileged<font color="#E5E5E5"> in the hypervisor</font><font color="#CCCCCC"> so we call</font>

150
00:05:23,220 --> 00:05:27,810
<font color="#CCCCCC">that ring</font><font color="#E5E5E5"> - - and then about ten years</font>

151
00:05:25,440 --> 00:05:31,070
<font color="#E5E5E5">ago at blackhat some security</font>

152
00:05:27,810 --> 00:05:33,870
researchers found this this other

153
00:05:31,070 --> 00:05:35,640
processor running<font color="#E5E5E5"> on some platforms that</font>

154
00:05:33,870 --> 00:05:37,890
in many ways had more<font color="#E5E5E5"> privileges and</font>

155
00:05:35,640 --> 00:05:39,719
even the x86<font color="#E5E5E5"> processor so they called</font>

156
00:05:37,890 --> 00:05:41,490
that ring<font color="#CCCCCC"> - 3 so it's sort of</font>

157
00:05:39,720 --> 00:05:43,020
interesting<font color="#E5E5E5"> that ring</font><font color="#CCCCCC"> 0 was supposed to</font>

158
00:05:41,490 --> 00:05:44,700
<font color="#CCCCCC">be the</font><font color="#E5E5E5"> most privileged layer on the</font>

159
00:05:43,020 --> 00:05:47,430
processor but we've continued to<font color="#E5E5E5"> sort of</font>

160
00:05:44,700 --> 00:05:50,280
dig deeper and<font color="#E5E5E5"> deeper through the years</font>

161
00:05:47,430 --> 00:05:51,840
<font color="#E5E5E5">and I</font><font color="#CCCCCC"> think in the back of any</font><font color="#E5E5E5"> security</font>

162
00:05:50,280 --> 00:05:53,039
researchers mind who's been<font color="#E5E5E5"> looking at</font>

163
00:05:51,840 --> 00:05:56,760
this kind<font color="#E5E5E5"> of stuff</font><font color="#CCCCCC"> is</font><font color="#E5E5E5"> always this</font>

164
00:05:53,040 --> 00:06:00,060
question<font color="#E5E5E5"> of like can</font><font color="#CCCCCC"> we go further</font><font color="#E5E5E5"> how</font>

165
00:05:56,760 --> 00:06:01,289
deep does this<font color="#E5E5E5"> does this really get so</font>

166
00:06:00,060 --> 00:06:04,320
that's<font color="#CCCCCC"> sort of</font><font color="#E5E5E5"> the thing</font><font color="#CCCCCC"> I was</font><font color="#E5E5E5"> looking</font>

167
00:06:01,290 --> 00:06:06,750
<font color="#CCCCCC">at when I set out to</font><font color="#E5E5E5"> begin this this</font>

168
00:06:04,320 --> 00:06:08,730
research<font color="#E5E5E5"> and a lot</font><font color="#CCCCCC"> of times when I don't</font>

169
00:06:06,750 --> 00:06:10,080
<font color="#E5E5E5">know where else</font><font color="#CCCCCC"> to begin on a project I</font>

170
00:06:08,730 --> 00:06:12,480
just<font color="#E5E5E5"> started</font><font color="#CCCCCC"> looking at patents to try</font>

171
00:06:10,080 --> 00:06:14,729
to get some ideas on where where my

172
00:06:12,480 --> 00:06:16,380
research<font color="#CCCCCC"> might want ahead and I stumbled</font>

173
00:06:14,730 --> 00:06:18,210
<font color="#CCCCCC">across</font><font color="#E5E5E5"> this really interesting patent</font>

174
00:06:16,380 --> 00:06:20,640
<font color="#E5E5E5">that had a couple of things that that</font>

175
00:06:18,210 --> 00:06:21,960
caught my eye<font color="#CCCCCC"> so just sort of casually</font>

176
00:06:20,640 --> 00:06:24,090
mentioned in the middle of this patent I

177
00:06:21,960 --> 00:06:25,799
was looking at it said<font color="#CCCCCC"> additionally</font>

178
00:06:24,090 --> 00:06:28,260
accessing some of the internal control

179
00:06:25,800 --> 00:06:30,330
registers can enable the user to bypass

180
00:06:28,260 --> 00:06:33,539
security mechanisms for example allowing

181
00:06:30,330 --> 00:06:35,070
ring<font color="#CCCCCC"> 0 access at ring 3 like</font><font color="#E5E5E5"> this just</font>

182
00:06:33,540 --> 00:06:37,290
blew my<font color="#CCCCCC"> mind that</font><font color="#E5E5E5"> you would casually</font>

183
00:06:35,070 --> 00:06:39,420
throw this out in a patent<font color="#E5E5E5"> because this</font>

184
00:06:37,290 --> 00:06:42,420
basically<font color="#E5E5E5"> undoes the last 30 years of</font>

185
00:06:39,420 --> 00:06:45,510
x86 security<font color="#CCCCCC"> if you're</font><font color="#E5E5E5"> telling</font><font color="#CCCCCC"> me that</font>

186
00:06:42,420 --> 00:06:47,100
there's some way to just allow the most

187
00:06:45,510 --> 00:06:48,810
<font color="#E5E5E5">unprivileged code to get</font><font color="#CCCCCC"> the same</font>

188
00:06:47,100 --> 00:06:51,960
permissions as the most privileged code

189
00:06:48,810 --> 00:06:54,120
and ring<font color="#CCCCCC"> 0 they don't want</font><font color="#E5E5E5"> to say that</font>

190
00:06:51,960 --> 00:06:55,500
in<font color="#E5E5E5"> addition these control registers may</font>

191
00:06:54,120 --> 00:06:56,849
reveal information<font color="#E5E5E5"> that processor</font>

192
00:06:55,500 --> 00:06:59,069
designers wish to keep

193
00:06:56,849 --> 00:07:01,080
<font color="#E5E5E5">prides</font><font color="#CCCCCC"> hairy</font><font color="#E5E5E5"> and for these reasons</font><font color="#CCCCCC"> the</font>

194
00:06:59,069 --> 00:07:03,240
various x86 processor manufacturers have

195
00:07:01,080 --> 00:07:05,039
not publicly<font color="#CCCCCC"> documented any description</font>

196
00:07:03,240 --> 00:07:07,860
of<font color="#E5E5E5"> the address or function of some of</font>

197
00:07:05,039 --> 00:07:09,719
these control registers<font color="#E5E5E5"> so I thought</font>

198
00:07:07,860 --> 00:07:11,490
this would<font color="#E5E5E5"> be a really interesting</font><font color="#CCCCCC"> thing</font>

199
00:07:09,719 --> 00:07:13,020
to<font color="#E5E5E5"> sort of dive into they're basically</font>

200
00:07:11,490 --> 00:07:15,479
hinting at this<font color="#E5E5E5"> idea in the patent</font><font color="#CCCCCC"> that</font>

201
00:07:13,020 --> 00:07:18,979
<font color="#CCCCCC">there's some way to circumvent</font><font color="#E5E5E5"> 30 years</font>

202
00:07:15,479 --> 00:07:22,919
of<font color="#CCCCCC"> privilege model in x86 through some</font>

203
00:07:18,979 --> 00:07:24,029
undocumented control registers<font color="#E5E5E5"> so so at</font>

204
00:07:22,919 --> 00:07:26,399
this point<font color="#E5E5E5"> I didn't know where to</font><font color="#CCCCCC"> begin</font>

205
00:07:24,029 --> 00:07:28,110
<font color="#CCCCCC">so I went out and I bought like</font><font color="#E5E5E5"> 50</font>

206
00:07:26,399 --> 00:07:30,149
<font color="#CCCCCC">different</font><font color="#E5E5E5"> computers to start researching</font>

207
00:07:28,110 --> 00:07:32,249
<font color="#E5E5E5">now based on the patent owner and time</font>

208
00:07:30,149 --> 00:07:35,519
frame I had some idea what processor<font color="#CCCCCC"> I</font>

209
00:07:32,249 --> 00:07:37,139
wanted<font color="#E5E5E5"> to look at for this but I figured</font>

210
00:07:35,519 --> 00:07:39,029
it's always good sort<font color="#E5E5E5"> of cast a wide net</font>

211
00:07:37,139 --> 00:07:40,229
<font color="#E5E5E5">in</font><font color="#CCCCCC"> this case but then when I</font><font color="#E5E5E5"> started</font>

212
00:07:39,029 --> 00:07:44,129
poking around in these different<font color="#E5E5E5"> systems</font>

213
00:07:40,229 --> 00:07:45,990
<font color="#CCCCCC">I sort of narrowed in on on the</font><font color="#E5E5E5"> VSC</font><font color="#CCCCCC"> 3</font>

214
00:07:44,129 --> 00:07:48,539
processor so this is the processor that

215
00:07:45,990 --> 00:07:50,639
<font color="#E5E5E5">came out about 20 years ago at this</font>

216
00:07:48,539 --> 00:07:53,429
<font color="#E5E5E5">point and it's used in a lot</font><font color="#CCCCCC"> of</font>

217
00:07:50,639 --> 00:07:55,019
interesting applications<font color="#CCCCCC"> it's mostly</font>

218
00:07:53,429 --> 00:07:57,508
targeted at the<font color="#E5E5E5"> embedded market so you</font>

219
00:07:55,019 --> 00:08:02,039
<font color="#E5E5E5">can find</font><font color="#CCCCCC"> vsc 3 x86 processors and</font>

220
00:07:57,509 --> 00:08:05,099
<font color="#E5E5E5">point-of-sale systems kiosks ATMs</font><font color="#CCCCCC"> gaming</font>

221
00:08:02,039 --> 00:08:07,050
<font color="#CCCCCC">digital</font><font color="#E5E5E5"> signage healthcare digital media</font>

222
00:08:05,099 --> 00:08:09,269
industrial automation<font color="#E5E5E5"> and you can also</font>

223
00:08:07,050 --> 00:08:11,309
find<font color="#E5E5E5"> these in</font><font color="#CCCCCC"> PCs and laptops especially</font>

224
00:08:09,269 --> 00:08:14,399
<font color="#E5E5E5">low-power pcs and laptops that were</font>

225
00:08:11,309 --> 00:08:16,589
<font color="#E5E5E5">coming out at the time so eventually</font><font color="#CCCCCC"> the</font>

226
00:08:14,399 --> 00:08:19,289
system<font color="#E5E5E5"> I selected</font><font color="#CCCCCC"> for</font><font color="#E5E5E5"> this research is</font>

227
00:08:16,589 --> 00:08:23,519
this<font color="#E5E5E5"> little thin client here that's</font>

228
00:08:19,289 --> 00:08:24,539
using a<font color="#CCCCCC"> vs C 3 a Maya core processor so</font>

229
00:08:23,519 --> 00:08:26,999
the rest of<font color="#CCCCCC"> the stuff I'm going to</font><font color="#E5E5E5"> talk</font>

230
00:08:24,539 --> 00:08:30,269
<font color="#CCCCCC">about is also was</font><font color="#E5E5E5"> all done on this</font>

231
00:08:26,999 --> 00:08:32,519
specific system<font color="#E5E5E5"> so for this processor I</font>

232
00:08:30,269 --> 00:08:34,769
wasn't able to<font color="#E5E5E5"> find a developer manual</font>

233
00:08:32,519 --> 00:08:36,240
like<font color="#E5E5E5"> Intel and AMD release processor</font>

234
00:08:34,769 --> 00:08:38,279
developer manuals I couldn't find

235
00:08:36,240 --> 00:08:39,899
<font color="#E5E5E5">anything like that for</font><font color="#CCCCCC"> for via so we</font>

236
00:08:38,279 --> 00:08:42,299
sort of had<font color="#CCCCCC"> to approach this</font><font color="#E5E5E5"> thing as a</font>

237
00:08:39,899 --> 00:08:44,519
<font color="#E5E5E5">black box and sort of try to follow a</font>

238
00:08:42,299 --> 00:08:47,609
trail of patent breadcrumbs in order to

239
00:08:44,519 --> 00:08:50,939
<font color="#CCCCCC">figure out</font><font color="#E5E5E5"> how to approach this</font><font color="#CCCCCC"> this</font>

240
00:08:47,610 --> 00:08:52,800
research so I basically kept looking at

241
00:08:50,939 --> 00:08:55,170
more<font color="#E5E5E5"> and more patents from from the</font>

242
00:08:52,800 --> 00:08:58,339
manufacturer<font color="#CCCCCC"> that came out around a</font>

243
00:08:55,170 --> 00:09:01,410
similar<font color="#CCCCCC"> timeframe in</font><font color="#E5E5E5"> order to try</font><font color="#CCCCCC"> to</font>

244
00:08:58,339 --> 00:09:03,389
gain<font color="#E5E5E5"> information about this this system</font>

245
00:09:01,410 --> 00:09:05,579
<font color="#E5E5E5">unfortunately</font><font color="#CCCCCC"> he's</font><font color="#E5E5E5"> sifting through</font>

246
00:09:03,389 --> 00:09:07,889
patents can<font color="#E5E5E5"> be really really really</font>

247
00:09:05,579 --> 00:09:09,719
tedious<font color="#E5E5E5"> work so this isn't a patent I</font>

248
00:09:07,889 --> 00:09:10,259
actually used on this research<font color="#E5E5E5"> but this</font>

249
00:09:09,720 --> 00:09:11,609
was one<font color="#CCCCCC"> out</font>

250
00:09:10,259 --> 00:09:14,040
sort of exploring along<font color="#E5E5E5"> the way and just</font>

251
00:09:11,609 --> 00:09:15,239
<font color="#CCCCCC">to sort</font><font color="#E5E5E5"> of highlight how how awful some</font>

252
00:09:14,040 --> 00:09:17,009
of<font color="#CCCCCC"> this can be I wanted</font><font color="#E5E5E5"> to give a quote</font>

253
00:09:15,239 --> 00:09:18,929
from<font color="#E5E5E5"> from one of these patents it says</font>

254
00:09:17,009 --> 00:09:20,759
figure 3 shows an embodiment of a cache

255
00:09:18,929 --> 00:09:22,679
memory referring to figure<font color="#E5E5E5"> 3 in</font><font color="#CCCCCC"> one</font>

256
00:09:20,759 --> 00:09:24,389
embodiment cache memory<font color="#E5E5E5"> 320 is a</font>

257
00:09:22,679 --> 00:09:26,160
multi-way cache memory<font color="#CCCCCC"> and 1</font><font color="#E5E5E5"> embodiment</font>

258
00:09:24,389 --> 00:09:27,479
cache memory 320 comprises<font color="#CCCCCC"> multiple</font>

259
00:09:26,160 --> 00:09:29,579
physical sections and<font color="#CCCCCC"> one embodiment</font>

260
00:09:27,479 --> 00:09:31,079
<font color="#E5E5E5">cache memory 320 is logically divided</font>

261
00:09:29,579 --> 00:09:32,849
<font color="#E5E5E5">into</font><font color="#CCCCCC"> multiple sections</font><font color="#E5E5E5"> and one a body</font>

262
00:09:31,079 --> 00:09:34,469
<font color="#E5E5E5">man cache memory 320 includes</font><font color="#CCCCCC"> 4 cache</font>

263
00:09:32,850 --> 00:09:37,199
ways ie cache way<font color="#CCCCCC"> through 10 cache way</font>

264
00:09:34,470 --> 00:09:39,239
<font color="#E5E5E5">311 cache way 312 and cache way 314 and</font>

265
00:09:37,199 --> 00:09:41,008
<font color="#E5E5E5">one embodiment a processor sequester's</font>

266
00:09:39,239 --> 00:09:43,679
one or more cache ways to store or

267
00:09:41,009 --> 00:09:46,739
execute processor microcode<font color="#E5E5E5"> like there's</font>

268
00:09:43,679 --> 00:09:49,499
so much legalese here<font color="#E5E5E5"> that phrase in</font><font color="#CCCCCC"> one</font>

269
00:09:46,739 --> 00:09:51,600
embodiment appeared 142<font color="#E5E5E5"> times in this</font><font color="#CCCCCC"> 4</font>

270
00:09:49,499 --> 00:09:52,919
page patent like reading<font color="#E5E5E5"> through this</font>

271
00:09:51,600 --> 00:09:54,869
kind<font color="#CCCCCC"> of stuff trying to gain information</font>

272
00:09:52,919 --> 00:09:57,600
<font color="#E5E5E5">for research is really really painful</font>

273
00:09:54,869 --> 00:10:00,929
<font color="#E5E5E5">but eventually it can pay</font><font color="#CCCCCC"> off so I</font>

274
00:09:57,600 --> 00:10:02,220
<font color="#CCCCCC">settled</font><font color="#E5E5E5"> on these six patents that ended</font>

275
00:10:00,929 --> 00:10:04,350
up having something really interesting

276
00:10:02,220 --> 00:10:07,769
useful<font color="#E5E5E5"> information for sort of guiding</font>

277
00:10:04,350 --> 00:10:09,689
<font color="#E5E5E5">this this research forward so I wanted</font>

278
00:10:07,769 --> 00:10:11,939
<font color="#E5E5E5">to introduce some of the terminology</font>

279
00:10:09,689 --> 00:10:14,160
<font color="#CCCCCC">that</font><font color="#E5E5E5"> these patents were were hinting at</font>

280
00:10:11,939 --> 00:10:16,319
<font color="#E5E5E5">so one of the main</font><font color="#CCCCCC"> ideas discussed in</font>

281
00:10:14,160 --> 00:10:20,579
these patents is the idea of<font color="#CCCCCC"> using a non</font>

282
00:10:16,319 --> 00:10:23,279
x86 core alongside<font color="#E5E5E5"> the x86 core in a</font>

283
00:10:20,579 --> 00:10:25,079
processor and they hint<font color="#CCCCCC"> that the the non</font>

284
00:10:23,279 --> 00:10:27,720
x86 core is<font color="#E5E5E5"> going to be a RISC</font>

285
00:10:25,079 --> 00:10:29,399
architecture<font color="#E5E5E5"> now they didn't have a term</font>

286
00:10:27,720 --> 00:10:31,259
for<font color="#CCCCCC"> this not x86 core but I started</font>

287
00:10:29,399 --> 00:10:34,470
<font color="#CCCCCC">calling this the deeply embedded core</font>

288
00:10:31,259 --> 00:10:35,879
and my research<font color="#CCCCCC"> depends also hinted at</font>

289
00:10:34,470 --> 00:10:39,019
something<font color="#CCCCCC"> that they called</font><font color="#E5E5E5"> the global</font>

290
00:10:35,879 --> 00:10:42,509
configuration register it basically be a

291
00:10:39,019 --> 00:10:44,609
register exposed to the x86 core through

292
00:10:42,509 --> 00:10:46,439
what's called<font color="#CCCCCC"> a model specific register</font>

293
00:10:44,609 --> 00:10:48,329
or an MSR so I'll<font color="#E5E5E5"> talk about MSR is</font>

294
00:10:46,439 --> 00:10:49,410
coming up but basically<font color="#CCCCCC"> they were saying</font>

295
00:10:48,329 --> 00:10:51,539
that<font color="#E5E5E5"> you could use this global</font>

296
00:10:49,410 --> 00:10:54,269
configuration register to activate this

297
00:10:51,539 --> 00:10:57,600
embedded RISC core they also talked

298
00:10:54,269 --> 00:10:59,189
about an x86 launch instruction it was

299
00:10:57,600 --> 00:11:01,679
<font color="#E5E5E5">basically going to be a new instruction</font>

300
00:10:59,189 --> 00:11:04,019
added to the x86 instruction<font color="#CCCCCC"> set</font>

301
00:11:01,679 --> 00:11:05,819
architecture where once the RISC core is

302
00:11:04,019 --> 00:11:09,409
activated<font color="#CCCCCC"> this launch instruction would</font>

303
00:11:05,819 --> 00:11:12,029
start a new RISC instruction sequence so

304
00:11:09,409 --> 00:11:14,489
putting all<font color="#E5E5E5"> these things together</font><font color="#CCCCCC"> then</font>

305
00:11:12,029 --> 00:11:17,759
if<font color="#E5E5E5"> our assumptions about this deeply</font>

306
00:11:14,489 --> 00:11:19,409
embedded core are correct then then

307
00:11:17,759 --> 00:11:21,749
theoretically<font color="#CCCCCC"> it could</font><font color="#E5E5E5"> be used as sort</font>

308
00:11:19,409 --> 00:11:23,519
of a<font color="#E5E5E5"> backdoor basically would give you</font>

309
00:11:21,749 --> 00:11:24,030
some way to surreptitiously circumvent

310
00:11:23,519 --> 00:11:26,310
all the

311
00:11:24,030 --> 00:11:27,569
<font color="#CCCCCC">their security</font><font color="#E5E5E5"> checks but then the</font><font color="#CCCCCC"> the</font>

312
00:11:26,310 --> 00:11:30,900
first question<font color="#CCCCCC"> is if this</font><font color="#E5E5E5"> thing</font><font color="#CCCCCC"> really</font>

313
00:11:27,570 --> 00:11:32,700
exists how do<font color="#E5E5E5"> I even activate it so</font>

314
00:11:30,900 --> 00:11:34,590
let's look at how we<font color="#E5E5E5"> can figure that</font>

315
00:11:32,700 --> 00:11:36,540
part out well<font color="#E5E5E5"> there's a three patents</font>

316
00:11:34,590 --> 00:11:37,830
that give us<font color="#E5E5E5"> some hints as</font><font color="#CCCCCC"> to how we</font>

317
00:11:36,540 --> 00:11:39,839
could activate<font color="#E5E5E5"> this deeply embedded</font>

318
00:11:37,830 --> 00:11:41,850
course<font color="#E5E5E5"> how we could activate this</font>

319
00:11:39,840 --> 00:11:43,500
backdoor so one patent talks about a

320
00:11:41,850 --> 00:11:45,500
model specific register that<font color="#E5E5E5"> can be used</font>

321
00:11:43,500 --> 00:11:48,120
to<font color="#CCCCCC"> circumvent processor security checks</font>

322
00:11:45,500 --> 00:11:49,980
one patent talks about a model specific

323
00:11:48,120 --> 00:11:52,680
register that can be used<font color="#E5E5E5"> to</font><font color="#CCCCCC"> activate a</font>

324
00:11:49,980 --> 00:11:54,750
<font color="#E5E5E5">new instruction in</font><font color="#CCCCCC"> x86 and one patent</font>

325
00:11:52,680 --> 00:11:56,250
talks about a<font color="#E5E5E5"> launch instruction that</font>

326
00:11:54,750 --> 00:11:58,560
can be used<font color="#E5E5E5"> to switch to a RISC</font>

327
00:11:56,250 --> 00:12:00,150
instruction sequence so if you put those

328
00:11:58,560 --> 00:12:02,719
<font color="#E5E5E5">three things together and sort</font><font color="#CCCCCC"> of fill</font>

329
00:12:00,150 --> 00:12:06,329
in<font color="#CCCCCC"> the</font><font color="#E5E5E5"> gaps in it it looks like there is</font>

330
00:12:02,720 --> 00:12:07,830
<font color="#E5E5E5">maybe an MSR bit not a</font><font color="#CCCCCC"> specific register</font>

331
00:12:06,330 --> 00:12:09,810
bit<font color="#CCCCCC"> that is going to enable a new</font>

332
00:12:07,830 --> 00:12:12,060
<font color="#CCCCCC">instruction that will</font><font color="#E5E5E5"> activate this</font>

333
00:12:09,810 --> 00:12:14,849
secret risk core and then bypass

334
00:12:12,060 --> 00:12:16,650
<font color="#CCCCCC">security protections</font><font color="#E5E5E5"> on the processor so</font>

335
00:12:14,850 --> 00:12:18,240
let's<font color="#E5E5E5"> look at the first piece</font><font color="#CCCCCC"> of</font><font color="#E5E5E5"> that</font>

336
00:12:16,650 --> 00:12:19,949
<font color="#E5E5E5">chain let's look at these model specific</font>

337
00:12:18,240 --> 00:12:22,650
registers so if you're not<font color="#E5E5E5"> familiar with</font>

338
00:12:19,950 --> 00:12:25,860
<font color="#E5E5E5">MSRs and x86 basically</font><font color="#CCCCCC"> there's 64-bit</font>

339
00:12:22,650 --> 00:12:27,510
control registers<font color="#CCCCCC"> that</font><font color="#E5E5E5"> do all sorts of</font>

340
00:12:25,860 --> 00:12:29,400
<font color="#CCCCCC">different things</font><font color="#E5E5E5"> on the processor so</font>

341
00:12:27,510 --> 00:12:31,050
they control things<font color="#E5E5E5"> like debugging and</font>

342
00:12:29,400 --> 00:12:32,910
performance monitoring cache

343
00:12:31,050 --> 00:12:34,380
<font color="#CCCCCC">configuration feature configuration</font>

344
00:12:32,910 --> 00:12:37,079
basically<font color="#E5E5E5"> anything that's not general</font>

345
00:12:34,380 --> 00:12:38,820
computation<font color="#CCCCCC"> can get thrown into a model</font>

346
00:12:37,080 --> 00:12:39,780
specific register<font color="#E5E5E5"> and unlike the</font>

347
00:12:38,820 --> 00:12:42,510
registers<font color="#CCCCCC"> that were probably more</font>

348
00:12:39,780 --> 00:12:44,880
familiar<font color="#E5E5E5"> with like</font><font color="#CCCCCC"> EAX or</font><font color="#E5E5E5"> edx in x86</font>

349
00:12:42,510 --> 00:12:47,819
<font color="#E5E5E5">MSRs are actually accessed by address</font>

350
00:12:44,880 --> 00:12:51,990
not by name and<font color="#E5E5E5"> the addresses range from</font>

351
00:12:47,820 --> 00:12:53,640
<font color="#CCCCCC">0 to 4 billion</font><font color="#E5E5E5"> and then what you use is</font>

352
00:12:51,990 --> 00:12:55,530
these read MSR and<font color="#E5E5E5"> write MSR</font>

353
00:12:53,640 --> 00:12:58,170
instructions in<font color="#E5E5E5"> order to access the</font>

354
00:12:55,530 --> 00:13:00,270
model specific register now there's a

355
00:12:58,170 --> 00:13:03,329
catch with<font color="#E5E5E5"> MSRs and that's that they are</font>

356
00:13:00,270 --> 00:13:05,220
only<font color="#E5E5E5"> accessible to ring 0 code so our</font>

357
00:13:03,330 --> 00:13:06,630
whole speculation about this<font color="#E5E5E5"> backdoor is</font>

358
00:13:05,220 --> 00:13:08,220
sort of predicated on this<font color="#E5E5E5"> idea</font><font color="#CCCCCC"> that the</font>

359
00:13:06,630 --> 00:13:10,290
whole<font color="#E5E5E5"> thing is activated</font><font color="#CCCCCC"> through an MSR</font>

360
00:13:08,220 --> 00:13:12,600
which means that you<font color="#E5E5E5"> have to bring</font><font color="#CCCCCC"> zero</font>

361
00:13:10,290 --> 00:13:14,849
access in<font color="#E5E5E5"> order to activate this</font>

362
00:13:12,600 --> 00:13:16,980
backdoor to begin with<font color="#E5E5E5"> so that should</font>

363
00:13:14,850 --> 00:13:19,110
<font color="#E5E5E5">make this a lot less devastating but</font>

364
00:13:16,980 --> 00:13:22,170
that may or may<font color="#CCCCCC"> not</font><font color="#E5E5E5"> actually be true so</font>

365
00:13:19,110 --> 00:13:24,150
we'll revisit this<font color="#E5E5E5"> ring</font><font color="#CCCCCC"> 0 caveat later</font>

366
00:13:22,170 --> 00:13:25,439
on but<font color="#E5E5E5"> just so the research can move</font>

367
00:13:24,150 --> 00:13:27,750
forward we're just going<font color="#E5E5E5"> to assume right</font>

368
00:13:25,440 --> 00:13:29,640
now<font color="#CCCCCC"> that we have one time ring zero</font>

369
00:13:27,750 --> 00:13:30,900
access on this processor in order<font color="#CCCCCC"> to</font>

370
00:13:29,640 --> 00:13:34,380
<font color="#E5E5E5">activate the backdoor and then I'll</font>

371
00:13:30,900 --> 00:13:35,340
<font color="#CCCCCC">revisit this again later on but</font><font color="#E5E5E5"> sort</font><font color="#CCCCCC"> of</font>

372
00:13:34,380 --> 00:13:37,470
looking<font color="#E5E5E5"> at where</font><font color="#CCCCCC"> we should approach</font>

373
00:13:35,340 --> 00:13:38,580
<font color="#E5E5E5">these MSRs the</font><font color="#CCCCCC"> pattern kind of</font>

374
00:13:37,470 --> 00:13:40,350
comes right<font color="#CCCCCC"> out</font><font color="#E5E5E5"> and tells us that the</font>

375
00:13:38,580 --> 00:13:42,240
various x86 manufacturers have not

376
00:13:40,350 --> 00:13:44,220
<font color="#E5E5E5">publicly documented any description of</font>

377
00:13:42,240 --> 00:13:46,680
<font color="#E5E5E5">the address or function of some control</font>

378
00:13:44,220 --> 00:13:47,970
<font color="#E5E5E5">MSRs</font><font color="#CCCCCC"> so that means we're sort of forced</font>

379
00:13:46,680 --> 00:13:49,739
<font color="#E5E5E5">to look at this thing as a black box</font>

380
00:13:47,970 --> 00:13:53,610
like we<font color="#CCCCCC"> don't know what MSR we're going</font>

381
00:13:49,740 --> 00:13:56,970
after here<font color="#E5E5E5"> so I want to figure out like</font>

382
00:13:53,610 --> 00:13:58,230
<font color="#E5E5E5">which MSR bit and does just something</font>

383
00:13:56,970 --> 00:14:00,510
new on the processor but that's that's

384
00:13:58,230 --> 00:14:02,520
<font color="#E5E5E5">not a whole lot to go on but step one</font>

385
00:14:00,510 --> 00:14:05,160
<font color="#E5E5E5">might</font><font color="#CCCCCC"> be just figure</font><font color="#E5E5E5"> out which model</font>

386
00:14:02,520 --> 00:14:07,199
specific registers actually exist<font color="#E5E5E5"> on the</font>

387
00:14:05,160 --> 00:14:08,790
processor<font color="#E5E5E5"> so not just which ones are</font>

388
00:14:07,200 --> 00:14:11,100
documented I want to figure<font color="#CCCCCC"> out</font><font color="#E5E5E5"> all</font><font color="#CCCCCC"> the</font>

389
00:14:08,790 --> 00:14:12,780
<font color="#CCCCCC">MSR</font><font color="#E5E5E5"> that exist on my processor so the</font>

390
00:14:11,100 --> 00:14:15,360
approach<font color="#E5E5E5"> for this is actually pretty</font>

391
00:14:12,780 --> 00:14:17,640
<font color="#E5E5E5">straightforward basically in x86 which</font>

392
00:14:15,360 --> 00:14:19,200
you can do is you<font color="#E5E5E5"> can create a new</font>

393
00:14:17,640 --> 00:14:21,449
exception<font color="#E5E5E5"> handler for the general</font>

394
00:14:19,200 --> 00:14:23,940
protection exception and<font color="#E5E5E5"> you can do that</font>

395
00:14:21,450 --> 00:14:28,110
through<font color="#CCCCCC"> the lidt instruction</font><font color="#E5E5E5"> after that</font>

396
00:14:23,940 --> 00:14:31,200
you're<font color="#E5E5E5"> going</font><font color="#CCCCCC"> to load your MSR address</font>

397
00:14:28,110 --> 00:14:33,720
into<font color="#E5E5E5"> the ECX register</font><font color="#CCCCCC"> and then you're</font>

398
00:14:31,200 --> 00:14:34,860
going to try<font color="#E5E5E5"> to access the MSR so for</font>

399
00:14:33,720 --> 00:14:38,490
<font color="#E5E5E5">example if I wanted to figure</font><font color="#CCCCCC"> out does</font>

400
00:14:34,860 --> 00:14:41,460
MSR<font color="#E5E5E5"> hex 1000 exist on this processor</font><font color="#CCCCCC"> I</font>

401
00:14:38,490 --> 00:14:43,560
load 1000<font color="#E5E5E5"> and CCS and then use the read</font>

402
00:14:41,460 --> 00:14:45,930
MSR instruction now one<font color="#E5E5E5"> of two things</font>

403
00:14:43,560 --> 00:14:48,150
<font color="#E5E5E5">can</font><font color="#CCCCCC"> happen</font><font color="#E5E5E5"> at this point either the read</font>

404
00:14:45,930 --> 00:14:50,370
MSR instruction won't fault<font color="#E5E5E5"> which tells</font>

405
00:14:48,150 --> 00:14:52,050
you that<font color="#CCCCCC"> this MSR does exist</font><font color="#E5E5E5"> or the read</font>

406
00:14:50,370 --> 00:14:53,400
MSR instruction will fault in which case

407
00:14:52,050 --> 00:14:55,050
your exception handler gets<font color="#E5E5E5"> control</font>

408
00:14:53,400 --> 00:14:56,699
<font color="#E5E5E5">which tells you that this MSR really</font>

409
00:14:55,050 --> 00:14:59,010
doesn't exist<font color="#CCCCCC"> so we can</font><font color="#E5E5E5"> basically</font>

410
00:14:56,700 --> 00:15:02,190
enumerate all<font color="#E5E5E5"> of the MSR s on the</font>

411
00:14:59,010 --> 00:15:04,830
processor using this this approach<font color="#CCCCCC"> when</font>

412
00:15:02,190 --> 00:15:06,570
you do this you end<font color="#E5E5E5"> up finding 1300</font>

413
00:15:04,830 --> 00:15:08,940
implemented MSRs on the processor which

414
00:15:06,570 --> 00:15:10,620
is<font color="#E5E5E5"> actually way way</font><font color="#CCCCCC"> more than most x86</font>

415
00:15:08,940 --> 00:15:12,750
processors would would<font color="#E5E5E5"> have and that</font>

416
00:15:10,620 --> 00:15:15,060
turns out<font color="#CCCCCC"> to be far far too many to</font>

417
00:15:12,750 --> 00:15:18,090
actually sift through and try<font color="#CCCCCC"> to analyze</font>

418
00:15:15,060 --> 00:15:20,520
one by one and so we at this<font color="#CCCCCC"> point some</font>

419
00:15:18,090 --> 00:15:22,410
way to pair those down and so which ones

420
00:15:20,520 --> 00:15:24,120
I<font color="#E5E5E5"> actually want to research which ones</font>

421
00:15:22,410 --> 00:15:25,260
are actually interesting on the

422
00:15:24,120 --> 00:15:27,570
processor name they want<font color="#CCCCCC"> to figure out</font>

423
00:15:25,260 --> 00:15:29,460
<font color="#E5E5E5">which of these</font><font color="#CCCCCC"> 1,300 MSRs are really</font>

424
00:15:27,570 --> 00:15:31,980
unique<font color="#E5E5E5"> so I had</font><font color="#CCCCCC"> to side you have a</font>

425
00:15:29,460 --> 00:15:34,290
<font color="#E5E5E5">timing side channel that could could</font>

426
00:15:31,980 --> 00:15:35,880
help with this problem<font color="#E5E5E5"> basically what</font>

427
00:15:34,290 --> 00:15:37,829
you<font color="#E5E5E5"> would do in this is calculate</font><font color="#CCCCCC"> the</font>

428
00:15:35,880 --> 00:15:39,840
access time for all four billion

429
00:15:37,830 --> 00:15:41,730
possible<font color="#E5E5E5"> model specific registers on the</font>

430
00:15:39,840 --> 00:15:43,380
processor the way you can do that<font color="#CCCCCC"> is</font>

431
00:15:41,730 --> 00:15:45,330
you've got one of these<font color="#CCCCCC"> read MSR</font>

432
00:15:43,380 --> 00:15:47,340
instructions and then on either side of

433
00:15:45,330 --> 00:15:48,780
that<font color="#E5E5E5"> you've got a serializing read time</font>

434
00:15:47,340 --> 00:15:50,460
stamp counter instruction that lets you

435
00:15:48,780 --> 00:15:51,930
see exactly<font color="#CCCCCC"> how long</font><font color="#E5E5E5"> it</font>

436
00:15:50,460 --> 00:15:54,720
<font color="#CCCCCC">took that read MSR instruction to</font>

437
00:15:51,930 --> 00:15:56,819
actually execute<font color="#E5E5E5"> and when you I do this</font>

438
00:15:54,720 --> 00:15:58,680
and run this on the processor this<font color="#CCCCCC"> is</font>

439
00:15:56,820 --> 00:16:02,670
actually what<font color="#E5E5E5"> you end up with for these</font>

440
00:15:58,680 --> 00:16:04,319
<font color="#E5E5E5">MSR access times so basically what I'm</font>

441
00:16:02,670 --> 00:16:06,870
<font color="#CCCCCC">doing</font><font color="#E5E5E5"> is I'm trying to read each of the</font>

442
00:16:04,320 --> 00:16:08,370
four billion<font color="#E5E5E5"> MSRs on this processor one</font>

443
00:16:06,870 --> 00:16:10,830
by one and looking at how<font color="#CCCCCC"> long it takes</font>

444
00:16:08,370 --> 00:16:13,350
to<font color="#E5E5E5"> access that MSR and this is what we</font>

445
00:16:10,830 --> 00:16:15,630
end up<font color="#E5E5E5"> with so this actually is</font><font color="#CCCCCC"> a</font><font color="#E5E5E5"> really</font>

446
00:16:13,350 --> 00:16:17,490
interesting<font color="#E5E5E5"> it gives us a lot of insight</font>

447
00:16:15,630 --> 00:16:19,050
into sort of the internals of the

448
00:16:17,490 --> 00:16:22,140
processor<font color="#CCCCCC"> that we normally wouldn't</font><font color="#E5E5E5"> be</font>

449
00:16:19,050 --> 00:16:23,849
<font color="#E5E5E5">able to to</font><font color="#CCCCCC"> see so there's</font><font color="#E5E5E5"> sort of an</font>

450
00:16:22,140 --> 00:16:25,980
observation<font color="#E5E5E5"> that we can make by looking</font>

451
00:16:23,850 --> 00:16:28,260
at these access times<font color="#E5E5E5"> and that is that</font>

452
00:16:25,980 --> 00:16:30,420
functionally different model specific

453
00:16:28,260 --> 00:16:34,080
<font color="#CCCCCC">registers should have</font><font color="#E5E5E5"> different access</font>

454
00:16:30,420 --> 00:16:36,120
times so for example reading<font color="#E5E5E5"> the thermal</font>

455
00:16:34,080 --> 00:16:37,860
sensor model specific register should

456
00:16:36,120 --> 00:16:39,750
take a<font color="#E5E5E5"> different amount of</font><font color="#CCCCCC"> time than</font>

457
00:16:37,860 --> 00:16:41,100
reading<font color="#E5E5E5"> the time stamp counter model</font>

458
00:16:39,750 --> 00:16:43,500
specific register and<font color="#E5E5E5"> that's because</font>

459
00:16:41,100 --> 00:16:45,780
when we execute<font color="#CCCCCC"> that read MSR</font>

460
00:16:43,500 --> 00:16:47,790
instruction the the<font color="#E5E5E5"> micro code has</font><font color="#CCCCCC"> to do</font>

461
00:16:45,780 --> 00:16:49,350
<font color="#E5E5E5">something for that specific MSR since</font>

462
00:16:47,790 --> 00:16:51,750
the micro code is going<font color="#E5E5E5"> to</font><font color="#CCCCCC"> be</font><font color="#E5E5E5"> different</font>

463
00:16:49,350 --> 00:16:53,280
<font color="#E5E5E5">for different or functionally different</font>

464
00:16:51,750 --> 00:16:55,850
MSRs it should take a different<font color="#CCCCCC"> amount</font>

465
00:16:53,280 --> 00:16:58,140
of time<font color="#E5E5E5"> to execute</font><font color="#CCCCCC"> on the other hand</font>

466
00:16:55,850 --> 00:16:59,610
<font color="#CCCCCC">functionally equivalent model specific</font>

467
00:16:58,140 --> 00:17:00,990
<font color="#CCCCCC">register should take approximately the</font>

468
00:16:59,610 --> 00:17:02,940
same amount<font color="#CCCCCC"> of time to execute so for</font>

469
00:17:00,990 --> 00:17:04,620
example in x86 there's something called

470
00:17:02,940 --> 00:17:06,600
<font color="#E5E5E5">the MTR</font><font color="#CCCCCC"> RS the memory type range</font>

471
00:17:04,619 --> 00:17:08,339
<font color="#E5E5E5">registers it's a set of model specific</font>

472
00:17:06,599 --> 00:17:10,409
registers that control<font color="#E5E5E5"> caching behavior</font>

473
00:17:08,339 --> 00:17:14,069
<font color="#E5E5E5">for different regions</font><font color="#CCCCCC"> of memory there's</font>

474
00:17:10,410 --> 00:17:15,630
a whole a<font color="#E5E5E5"> whole set of</font><font color="#CCCCCC"> these</font><font color="#E5E5E5"> MTR RS</font><font color="#CCCCCC"> but</font>

475
00:17:14,069 --> 00:17:16,708
they're functionally doing approximately

476
00:17:15,630 --> 00:17:18,750
the same thing they're<font color="#CCCCCC"> all just</font>

477
00:17:16,709 --> 00:17:20,459
<font color="#E5E5E5">controlling caching behavior so since</font>

478
00:17:18,750 --> 00:17:22,920
the<font color="#CCCCCC"> micro code behind all of those m/s</font>

479
00:17:20,459 --> 00:17:25,200
<font color="#E5E5E5">ours is functionally equivalent we would</font>

480
00:17:22,920 --> 00:17:27,480
expect<font color="#E5E5E5"> accessing those</font><font color="#CCCCCC"> m/s ours to</font><font color="#E5E5E5"> take</font>

481
00:17:25,200 --> 00:17:28,800
about the<font color="#CCCCCC"> same</font><font color="#E5E5E5"> amount of time</font><font color="#CCCCCC"> what</font><font color="#E5E5E5"> that</font>

482
00:17:27,480 --> 00:17:32,010
lets<font color="#E5E5E5"> you do is it lets you differentiate</font>

483
00:17:28,800 --> 00:17:34,129
<font color="#CCCCCC">between like and unlike m/s ours and</font><font color="#E5E5E5"> we</font>

484
00:17:32,010 --> 00:17:36,810
can<font color="#E5E5E5"> define</font><font color="#CCCCCC"> like</font><font color="#E5E5E5"> a--like m/s ours as a</font>

485
00:17:34,130 --> 00:17:39,000
set of adjacent<font color="#CCCCCC"> MSRs with equal or</font>

486
00:17:36,810 --> 00:17:40,770
functionally related access time so from

487
00:17:39,000 --> 00:17:42,660
<font color="#E5E5E5">that we can make</font><font color="#CCCCCC"> this hypothesis</font><font color="#E5E5E5"> that</font>

488
00:17:40,770 --> 00:17:45,000
<font color="#E5E5E5">the global configuration register this</font>

489
00:17:42,660 --> 00:17:48,420
MSR hinted at in the patents that<font color="#CCCCCC"> we're</font>

490
00:17:45,000 --> 00:17:50,190
searching for is probably<font color="#E5E5E5"> unique what I</font>

491
00:17:48,420 --> 00:17:51,300
mean<font color="#E5E5E5"> by</font><font color="#CCCCCC"> that is it probably doesn't</font><font color="#E5E5E5"> have</font>

492
00:17:50,190 --> 00:17:53,880
multiple functionally<font color="#CCCCCC"> equivalent</font>

493
00:17:51,300 --> 00:17:56,070
versions<font color="#E5E5E5"> there's probably exactly one of</font>

494
00:17:53,880 --> 00:17:58,440
<font color="#CCCCCC">these global configuration registers on</font>

495
00:17:56,070 --> 00:18:00,720
the<font color="#E5E5E5"> processor so then what I can do is I</font>

496
00:17:58,440 --> 00:18:02,370
can look<font color="#E5E5E5"> at that timing side channel and</font>

497
00:18:00,720 --> 00:18:03,929
I can try<font color="#E5E5E5"> to pick out which of these</font>

498
00:18:02,370 --> 00:18:06,629
MSRs based on<font color="#CCCCCC"> their tiny</font>

499
00:18:03,929 --> 00:18:07,950
patterns are functionally unique in

500
00:18:06,629 --> 00:18:12,259
other words I'm<font color="#E5E5E5"> going to select things</font>

501
00:18:07,950 --> 00:18:15,389
like these<font color="#CCCCCC"> peaks</font><font color="#E5E5E5"> in each situation</font><font color="#CCCCCC"> as</font>

502
00:18:12,259 --> 00:18:19,409
functionally unique<font color="#CCCCCC"> NSRS and when we do</font>

503
00:18:15,389 --> 00:18:21,119
that<font color="#E5E5E5"> we can identify 43 unique MSRs out</font>

504
00:18:19,409 --> 00:18:23,820
of the<font color="#CCCCCC"> 1,300 that are actually</font>

505
00:18:21,119 --> 00:18:26,129
implemented on<font color="#E5E5E5"> the processor so</font><font color="#CCCCCC"> that</font>

506
00:18:23,820 --> 00:18:27,928
that's a big step forward 43 is a much

507
00:18:26,129 --> 00:18:31,129
more attractable number of model

508
00:18:27,929 --> 00:18:32,999
specific registers to analyze and<font color="#E5E5E5"> 1,300</font>

509
00:18:31,129 --> 00:18:34,918
unfortunately it's still<font color="#E5E5E5"> a pretty</font>

510
00:18:32,999 --> 00:18:36,480
daunting task<font color="#E5E5E5"> I think one of the bits</font>

511
00:18:34,919 --> 00:18:39,409
<font color="#E5E5E5">and one of these model specific</font>

512
00:18:36,480 --> 00:18:42,600
registers is going to enable<font color="#E5E5E5"> this this</font>

513
00:18:39,409 --> 00:18:44,879
alternate core on the processor but each

514
00:18:42,600 --> 00:18:48,209
of these<font color="#E5E5E5"> registers is 64 bits wide that</font>

515
00:18:44,879 --> 00:18:50,699
means I still<font color="#CCCCCC"> have 27 52 bits</font><font color="#E5E5E5"> to to</font>

516
00:18:48,210 --> 00:18:51,869
check<font color="#E5E5E5"> and what I'm trying</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> do is I'm</font>

517
00:18:50,700 --> 00:18:53,850
<font color="#CCCCCC">trying</font><font color="#E5E5E5"> to</font><font color="#CCCCCC"> figure out which of these bits</font>

518
00:18:51,869 --> 00:18:55,918
is going to activate<font color="#E5E5E5"> this new x86</font>

519
00:18:53,850 --> 00:18:58,740
instruction this<font color="#CCCCCC"> launch instruction that</font>

520
00:18:55,919 --> 00:19:00,419
the patents<font color="#CCCCCC"> hence had so in other words</font>

521
00:18:58,740 --> 00:19:03,090
what I kind<font color="#E5E5E5"> of want to do is I want to</font>

522
00:19:00,419 --> 00:19:05,039
activate<font color="#E5E5E5"> one of these MSR bits and I</font>

523
00:19:03,090 --> 00:19:07,019
want to scan through the<font color="#CCCCCC"> x86 instruction</font>

524
00:19:05,039 --> 00:19:09,240
set to see<font color="#E5E5E5"> if any new instructions have</font>

525
00:19:07,019 --> 00:19:10,740
appeared but x86 is a really<font color="#E5E5E5"> really</font>

526
00:19:09,240 --> 00:19:12,029
complex architecture and it's sort of

527
00:19:10,740 --> 00:19:15,149
hard<font color="#CCCCCC"> to estimate</font><font color="#E5E5E5"> exactly how many</font>

528
00:19:12,029 --> 00:19:17,070
<font color="#CCCCCC">instructions there could be in x86 but</font>

529
00:19:15,149 --> 00:19:18,918
you can put an upper<font color="#E5E5E5"> bound on</font><font color="#CCCCCC"> it so by</font>

530
00:19:17,070 --> 00:19:20,700
looking<font color="#E5E5E5"> at the x86 architecture</font><font color="#CCCCCC"> there's</font>

531
00:19:18,919 --> 00:19:23,940
potentially somewhere on the order<font color="#CCCCCC"> of</font>

532
00:19:20,700 --> 00:19:26,429
1.3 undecillion<font color="#E5E5E5"> x86 instructions out</font>

533
00:19:23,940 --> 00:19:29,279
there and I'm<font color="#E5E5E5"> trying to find exactly one</font>

534
00:19:26,429 --> 00:19:30,929
new instruction amongst all of those so

535
00:19:29,279 --> 00:19:32,940
even if we had like a really<font color="#E5E5E5"> really</font>

536
00:19:30,929 --> 00:19:36,090
generous estimation if I could scan<font color="#CCCCCC"> four</font>

537
00:19:32,940 --> 00:19:38,159
<font color="#E5E5E5">billion x86 instructions every second we</font>

538
00:19:36,090 --> 00:19:40,559
can<font color="#E5E5E5"> do a quick</font><font color="#CCCCCC"> Fermi approximation</font><font color="#E5E5E5"> here</font>

539
00:19:38,159 --> 00:19:42,210
if we look at<font color="#E5E5E5"> like 1.3 undecillion</font>

540
00:19:40,559 --> 00:19:43,980
possible instructions divided by a

541
00:19:42,210 --> 00:19:45,929
billion instructions<font color="#E5E5E5"> a second divided by</font>

542
00:19:43,980 --> 00:19:47,399
<font color="#CCCCCC">sixty seconds a minute divided by sixty</font>

543
00:19:45,929 --> 00:19:49,230
<font color="#CCCCCC">minutes an hour</font><font color="#E5E5E5"> divided</font><font color="#CCCCCC"> by twenty</font>

544
00:19:47,399 --> 00:19:51,360
<font color="#CCCCCC">four-hours-a-day divided by 365 days a</font>

545
00:19:49,230 --> 00:19:53,850
year<font color="#CCCCCC"> means it's</font><font color="#E5E5E5"> going to</font><font color="#CCCCCC"> take about an</font>

546
00:19:51,360 --> 00:19:56,490
eternity to stand for one new x86

547
00:19:53,850 --> 00:19:58,019
instruction and the architecture<font color="#CCCCCC"> but</font>

548
00:19:56,490 --> 00:20:00,779
then we're not even dealing with just

549
00:19:58,019 --> 00:20:02,850
<font color="#E5E5E5">one scan</font><font color="#CCCCCC"> I've got two thousand seven</font>

550
00:20:00,779 --> 00:20:05,460
hundred<font color="#CCCCCC"> and fifty two different bits to</font>

551
00:20:02,850 --> 00:20:06,809
check so I need to do two thousand seven

552
00:20:05,460 --> 00:20:08,070
hundred<font color="#CCCCCC"> fifty two scans of</font><font color="#E5E5E5"> the</font>

553
00:20:06,809 --> 00:20:10,529
architecture to figure out which of

554
00:20:08,070 --> 00:20:12,359
these bits creates a new instruction<font color="#E5E5E5"> so</font>

555
00:20:10,529 --> 00:20:14,789
obviously we<font color="#CCCCCC"> don't</font><font color="#E5E5E5"> have time</font><font color="#CCCCCC"> like</font><font color="#E5E5E5"> this</font>

556
00:20:12,359 --> 00:20:17,428
is not a tractable problem at this<font color="#E5E5E5"> point</font>

557
00:20:14,789 --> 00:20:17,950
<font color="#CCCCCC">so</font><font color="#E5E5E5"> fortunately last year I developed a</font>

558
00:20:17,429 --> 00:20:20,320
tool

559
00:20:17,950 --> 00:20:23,680
exactly for this<font color="#E5E5E5"> problem called</font><font color="#CCCCCC"> sand</font>

560
00:20:20,320 --> 00:20:25,419
sifter so it uses<font color="#E5E5E5"> some x86 magic in</font>

561
00:20:23,680 --> 00:20:28,030
<font color="#E5E5E5">order to sort</font><font color="#CCCCCC"> of intelligently try to</font>

562
00:20:25,420 --> 00:20:29,680
scan the x86<font color="#CCCCCC"> instruction set</font><font color="#E5E5E5"> and doesn't</font>

563
00:20:28,030 --> 00:20:31,629
scan all instructions but<font color="#E5E5E5"> it</font><font color="#CCCCCC"> tries to</font>

564
00:20:29,680 --> 00:20:33,550
<font color="#E5E5E5">find the likely instructions that exist</font>

565
00:20:31,630 --> 00:20:36,250
on a processor<font color="#E5E5E5"> and they can do that in</font>

566
00:20:33,550 --> 00:20:39,490
about<font color="#CCCCCC"> a</font><font color="#E5E5E5"> day of scanning</font><font color="#CCCCCC"> now I still</font>

567
00:20:36,250 --> 00:20:41,680
can't run stance after 2752<font color="#E5E5E5"> times that's</font>

568
00:20:39,490 --> 00:20:44,080
going<font color="#CCCCCC"> to be years and</font><font color="#E5E5E5"> years of scanning</font>

569
00:20:41,680 --> 00:20:45,070
still at this<font color="#CCCCCC"> point so what we can</font><font color="#E5E5E5"> do is</font>

570
00:20:44,080 --> 00:20:47,919
something<font color="#CCCCCC"> a little bit different trying</font>

571
00:20:45,070 --> 00:20:50,889
to find this<font color="#E5E5E5"> launch instruction</font><font color="#CCCCCC"> what I'm</font>

572
00:20:47,920 --> 00:20:53,470
going to<font color="#E5E5E5"> do is for each</font><font color="#CCCCCC"> of those</font><font color="#E5E5E5"> 2752</font>

573
00:20:50,890 --> 00:20:55,780
<font color="#CCCCCC">bits that I'm interested</font><font color="#E5E5E5"> in I'm going</font><font color="#CCCCCC"> to</font>

574
00:20:53,470 --> 00:20:57,130
<font color="#E5E5E5">try to set that bit basically just see</font>

575
00:20:55,780 --> 00:20:58,420
if I can<font color="#CCCCCC"> activate it not scan the</font>

576
00:20:57,130 --> 00:21:00,670
instruction set or<font color="#CCCCCC"> anything</font><font color="#E5E5E5"> else just</font>

577
00:20:58,420 --> 00:21:02,350
<font color="#E5E5E5">try to set that bit there's a problem</font>

578
00:21:00,670 --> 00:21:05,020
<font color="#E5E5E5">with that though right away basically</font>

579
00:21:02,350 --> 00:21:07,929
<font color="#CCCCCC">these are configuration bits</font><font color="#E5E5E5"> on the</font>

580
00:21:05,020 --> 00:21:09,700
processor<font color="#CCCCCC"> that aren't documented and I</font>

581
00:21:07,930 --> 00:21:11,430
don't<font color="#CCCCCC"> know what they do</font><font color="#E5E5E5"> but</font><font color="#CCCCCC"> a lot of</font>

582
00:21:09,700 --> 00:21:13,330
them are<font color="#CCCCCC"> doing very very</font><font color="#E5E5E5"> detailed</font>

583
00:21:11,430 --> 00:21:14,740
<font color="#E5E5E5">internal things on the processor which</font>

584
00:21:13,330 --> 00:21:16,449
means<font color="#CCCCCC"> that a lot of bits if you just</font><font color="#E5E5E5"> try</font>

585
00:21:14,740 --> 00:21:18,820
to<font color="#E5E5E5"> set an arbitrary</font><font color="#CCCCCC"> model</font><font color="#E5E5E5"> specific</font>

586
00:21:16,450 --> 00:21:21,640
register bit<font color="#CCCCCC"> well a lock or freeze or</font>

587
00:21:18,820 --> 00:21:25,450
panic or reset the<font color="#CCCCCC"> system in some way so</font>

588
00:21:21,640 --> 00:21:27,310
I can't really do this<font color="#E5E5E5"> manually trying</font>

589
00:21:25,450 --> 00:21:29,110
to toggle<font color="#E5E5E5"> each of these bits one by one</font>

590
00:21:27,310 --> 00:21:30,550
<font color="#CCCCCC">we need some sort</font><font color="#E5E5E5"> of automated approach</font>

591
00:21:29,110 --> 00:21:34,510
to help us figure<font color="#E5E5E5"> out which</font><font color="#CCCCCC"> of these</font>

592
00:21:30,550 --> 00:21:36,550
bits<font color="#E5E5E5"> are actually can't can be set so I</font>

593
00:21:34,510 --> 00:21:38,890
developed<font color="#E5E5E5"> a little system for helping</font>

594
00:21:36,550 --> 00:21:40,540
<font color="#CCCCCC">with that where basically I would have</font>

595
00:21:38,890 --> 00:21:43,680
the target system<font color="#CCCCCC"> that</font><font color="#E5E5E5"> I am trying to</font>

596
00:21:40,540 --> 00:21:46,600
trying<font color="#CCCCCC"> to research</font><font color="#E5E5E5"> connected</font><font color="#CCCCCC"> to a</font>

597
00:21:43,680 --> 00:21:49,150
connected to a switch<font color="#CCCCCC"> connected to a</font>

598
00:21:46,600 --> 00:21:50,860
<font color="#E5E5E5">Master System</font><font color="#CCCCCC"> and</font><font color="#E5E5E5"> that master system is</font>

599
00:21:49,150 --> 00:21:52,840
connected<font color="#CCCCCC"> to a relay which is connected</font>

600
00:21:50,860 --> 00:21:54,909
to the power<font color="#E5E5E5"> button on the target system</font>

601
00:21:52,840 --> 00:21:57,909
<font color="#E5E5E5">so what the master system is able to do</font>

602
00:21:54,910 --> 00:21:59,620
is it SSH is<font color="#E5E5E5"> into the target</font><font color="#CCCCCC"> system and</font>

603
00:21:57,910 --> 00:22:02,200
tries to<font color="#E5E5E5"> activate one</font><font color="#CCCCCC"> of</font><font color="#E5E5E5"> these model</font>

604
00:21:59,620 --> 00:22:04,030
specific register bits<font color="#E5E5E5"> if it detects</font>

605
00:22:02,200 --> 00:22:06,130
<font color="#CCCCCC">that it has</font><font color="#E5E5E5"> corrupted to the target</font>

606
00:22:04,030 --> 00:22:08,350
<font color="#CCCCCC">system in some ways the systems resets</font>

607
00:22:06,130 --> 00:22:10,270
or freezes or stops responding<font color="#CCCCCC"> it can</font>

608
00:22:08,350 --> 00:22:14,620
then use the relay in order to reboot

609
00:22:10,270 --> 00:22:15,970
the the<font color="#E5E5E5"> target system so this way what I</font>

610
00:22:14,620 --> 00:22:17,560
can do is I can sort of automatically

611
00:22:15,970 --> 00:22:19,570
try to set<font color="#E5E5E5"> these bits one by one and I</font>

612
00:22:17,560 --> 00:22:22,300
can reset the system<font color="#E5E5E5"> when when something</font>

613
00:22:19,570 --> 00:22:24,159
<font color="#E5E5E5">goes wrong so basically just describing</font>

614
00:22:22,300 --> 00:22:26,620
<font color="#E5E5E5">what</font><font color="#CCCCCC"> a what we just</font><font color="#E5E5E5"> went over so when</font>

615
00:22:24,160 --> 00:22:28,690
you do this<font color="#E5E5E5"> run run this system</font><font color="#CCCCCC"> for</font>

616
00:22:26,620 --> 00:22:30,489
about<font color="#CCCCCC"> a week</font><font color="#E5E5E5"> just continuously reset the</font>

617
00:22:28,690 --> 00:22:31,530
<font color="#CCCCCC">system whenever</font><font color="#E5E5E5"> you find an MSR bit that</font>

618
00:22:30,490 --> 00:22:33,720
you couldn't

619
00:22:31,530 --> 00:22:36,780
toggle<font color="#CCCCCC"> basically what we're able to do</font>

620
00:22:33,720 --> 00:22:39,180
then is find exactly which bits can be

621
00:22:36,780 --> 00:22:41,040
<font color="#E5E5E5">toggled</font><font color="#CCCCCC"> without a visible side effect</font><font color="#E5E5E5"> so</font>

622
00:22:39,180 --> 00:22:44,370
we can go through<font color="#CCCCCC"> and then try to toggle</font>

623
00:22:41,040 --> 00:22:46,050
all of those MSR bits<font color="#E5E5E5"> and only then run</font>

624
00:22:44,370 --> 00:22:48,560
the actual sand sifter scan in order<font color="#CCCCCC"> to</font>

625
00:22:46,050 --> 00:22:52,260
audit the processor for new x86

626
00:22:48,560 --> 00:22:54,060
instructions so what that<font color="#E5E5E5"> looks</font><font color="#CCCCCC"> like is</font>

627
00:22:52,260 --> 00:22:55,320
something<font color="#CCCCCC"> like</font><font color="#E5E5E5"> this is the sand sifter</font>

628
00:22:54,060 --> 00:22:56,909
scanning the processor for new

629
00:22:55,320 --> 00:22:58,110
instructions<font color="#E5E5E5"> I'm starting</font><font color="#CCCCCC"> sands if</font>

630
00:22:56,910 --> 00:23:00,510
you're in the middle of<font color="#CCCCCC"> a scan so that</font>

631
00:22:58,110 --> 00:23:02,550
we can see it<font color="#E5E5E5"> find something fairly</font>

632
00:23:00,510 --> 00:23:04,140
quickly but basically<font color="#E5E5E5"> we're</font><font color="#CCCCCC"> just using</font>

633
00:23:02,550 --> 00:23:06,750
page fault analysis and a depth-first

634
00:23:04,140 --> 00:23:08,040
search in order<font color="#E5E5E5"> to find</font><font color="#CCCCCC"> the probable</font>

635
00:23:06,750 --> 00:23:10,110
instructions<font color="#E5E5E5"> that</font><font color="#CCCCCC"> exist on</font><font color="#E5E5E5"> this</font>

636
00:23:08,040 --> 00:23:11,670
processor and then down here<font color="#CCCCCC"> San Citra</font>

637
00:23:10,110 --> 00:23:14,699
<font color="#E5E5E5">is going to spit out any anomalies</font><font color="#CCCCCC"> that</font>

638
00:23:11,670 --> 00:23:17,370
it<font color="#E5E5E5"> finds and if we let this run like for</font>

639
00:23:14,700 --> 00:23:19,830
<font color="#E5E5E5">about a day</font><font color="#CCCCCC"> we'll eventually see Sansa</font>

640
00:23:17,370 --> 00:23:22,860
<font color="#CCCCCC">to spit something out here</font><font color="#E5E5E5"> basically</font><font color="#CCCCCC"> he</font>

641
00:23:19,830 --> 00:23:25,139
was<font color="#CCCCCC"> able to identify</font><font color="#E5E5E5"> exactly one new</font>

642
00:23:22,860 --> 00:23:27,149
instruction on<font color="#E5E5E5"> that processor after all</font>

643
00:23:25,140 --> 00:23:29,300
the model specific register bits were

644
00:23:27,150 --> 00:23:31,500
toggled it finds this<font color="#CCCCCC"> Oh F 3 F</font>

645
00:23:29,300 --> 00:23:31,860
instruction<font color="#E5E5E5"> that shouldn't</font><font color="#CCCCCC"> normally be</font>

646
00:23:31,500 --> 00:23:33,900
there

647
00:23:31,860 --> 00:23:36,270
so using gdb and<font color="#E5E5E5"> a little bit of trial</font>

648
00:23:33,900 --> 00:23:38,070
and<font color="#E5E5E5"> error</font><font color="#CCCCCC"> we can find that this</font><font color="#E5E5E5"> Oh F 3 F</font>

649
00:23:36,270 --> 00:23:39,990
this<font color="#E5E5E5"> launch instruction that the patents</font>

650
00:23:38,070 --> 00:23:44,129
are talking about is effectively a jump

651
00:23:39,990 --> 00:23:46,200
to the<font color="#CCCCCC"> ax instruction so now that we</font>

652
00:23:44,130 --> 00:23:48,090
<font color="#CCCCCC">know what</font><font color="#E5E5E5"> that launch instruction is we</font>

653
00:23:46,200 --> 00:23:49,830
no longer need to run complete sense

654
00:23:48,090 --> 00:23:52,949
<font color="#CCCCCC">after</font><font color="#E5E5E5"> scans for each of these individual</font>

655
00:23:49,830 --> 00:23:53,970
<font color="#CCCCCC">MSR bits basically I can now toggle MSR</font>

656
00:23:52,950 --> 00:23:57,600
bits one by one

657
00:23:53,970 --> 00:23:59,460
see if oh F 3 F<font color="#E5E5E5"> execute</font><font color="#CCCCCC"> if it doesn't</font>

658
00:23:57,600 --> 00:24:01,439
that's not<font color="#E5E5E5"> the MSR bit I'm looking for</font>

659
00:23:59,460 --> 00:24:03,630
if it does then I found a bit that

660
00:24:01,440 --> 00:24:04,800
enabled to launch<font color="#E5E5E5"> instructions so using</font>

661
00:24:03,630 --> 00:24:08,520
this approach we're able<font color="#E5E5E5"> to figure</font><font color="#CCCCCC"> out</font>

662
00:24:04,800 --> 00:24:10,590
that MSR number 1107 bit<font color="#CCCCCC"> 0</font><font color="#E5E5E5"> is the one</font>

663
00:24:08,520 --> 00:24:14,520
that activates<font color="#E5E5E5"> this this</font><font color="#CCCCCC"> launch</font>

664
00:24:10,590 --> 00:24:16,770
<font color="#E5E5E5">instruction so MSR 1107 must be the the</font>

665
00:24:14,520 --> 00:24:19,500
global<font color="#E5E5E5"> configuration register then that</font>

666
00:24:16,770 --> 00:24:22,260
the patents<font color="#CCCCCC"> we're talking about and that</font>

667
00:24:19,500 --> 00:24:25,980
leaves us<font color="#E5E5E5"> with this this bit</font><font color="#CCCCCC"> 0</font><font color="#E5E5E5"> basically</font>

668
00:24:22,260 --> 00:24:27,960
what we suspect is that<font color="#E5E5E5"> through that MSR</font>

669
00:24:25,980 --> 00:24:29,970
we are enabling<font color="#CCCCCC"> some mechanism that's</font>

670
00:24:27,960 --> 00:24:32,190
<font color="#CCCCCC">going to unlock</font><font color="#E5E5E5"> the processor and</font>

671
00:24:29,970 --> 00:24:34,770
circumvent<font color="#E5E5E5"> all the security checks on</font>

672
00:24:32,190 --> 00:24:38,580
the processor so so I called<font color="#E5E5E5"> that MSR</font>

673
00:24:34,770 --> 00:24:40,379
1107 that did<font color="#CCCCCC"> 0 on the god mode bit on</font>

674
00:24:38,580 --> 00:24:44,679
this processor since they would sort<font color="#E5E5E5"> of</font>

675
00:24:40,380 --> 00:24:46,540
unlock complete access<font color="#E5E5E5"> to the system so</font>

676
00:24:44,680 --> 00:24:48,370
so now we<font color="#E5E5E5"> found this god mode bit we've</font>

677
00:24:46,540 --> 00:24:50,830
found this<font color="#CCCCCC"> launched instruction that</font>

678
00:24:48,370 --> 00:24:52,899
should<font color="#E5E5E5"> that should enable us</font><font color="#CCCCCC"> to execute</font>

679
00:24:50,830 --> 00:24:54,939
instructions on the other core the the

680
00:24:52,900 --> 00:24:57,220
question then is<font color="#CCCCCC"> how do</font><font color="#E5E5E5"> I actually</font>

681
00:24:54,940 --> 00:25:00,010
execute instructions on this<font color="#E5E5E5"> on this</font>

682
00:24:57,220 --> 00:25:02,470
risk<font color="#E5E5E5"> core and the peds can sort of give</font>

683
00:25:00,010 --> 00:25:04,350
us<font color="#E5E5E5"> some some insight there they sort of</font>

684
00:25:02,470 --> 00:25:07,900
<font color="#E5E5E5">suggest that there's a place</font><font color="#CCCCCC"> in</font><font color="#E5E5E5"> the</font>

685
00:25:04,350 --> 00:25:10,449
processors pipeline<font color="#E5E5E5"> where it will split</font>

686
00:25:07,900 --> 00:25:13,900
between either<font color="#E5E5E5"> doing x86 execution or</font>

687
00:25:10,450 --> 00:25:15,130
doing risk execution and through<font color="#E5E5E5"> a some</font>

688
00:25:13,900 --> 00:25:17,290
trial<font color="#E5E5E5"> and error I sort of came up with</font>

689
00:25:15,130 --> 00:25:19,830
<font color="#CCCCCC">this model</font><font color="#E5E5E5"> for what that looks like in</font>

690
00:25:17,290 --> 00:25:22,659
the pipeline<font color="#E5E5E5"> basically it looked like</font>

691
00:25:19,830 --> 00:25:24,490
<font color="#CCCCCC">there'd be an instruction cache and</font>

692
00:25:22,660 --> 00:25:26,080
instruct<font color="#E5E5E5"> an x86 instruction will get</font>

693
00:25:24,490 --> 00:25:27,880
<font color="#E5E5E5">fetched from the instruction cache and</font>

694
00:25:26,080 --> 00:25:29,139
<font color="#E5E5E5">pass to some sort of pre decoder and</font>

695
00:25:27,880 --> 00:25:31,030
<font color="#E5E5E5">what the pre decoders going to do is</font>

696
00:25:29,140 --> 00:25:32,320
it's<font color="#E5E5E5"> going to break apart that x86</font>

697
00:25:31,030 --> 00:25:34,540
instruction into its individual

698
00:25:32,320 --> 00:25:36,639
<font color="#CCCCCC">components like the</font><font color="#E5E5E5"> opcode or the mod</font><font color="#CCCCCC"> RM</font>

699
00:25:34,540 --> 00:25:38,560
<font color="#CCCCCC">byte</font><font color="#E5E5E5"> or an immediate value and then it's</font>

700
00:25:36,640 --> 00:25:40,990
going<font color="#E5E5E5"> to pass all of those components to</font>

701
00:25:38,560 --> 00:25:43,389
some check that check<font color="#E5E5E5"> is going to see if</font>

702
00:25:40,990 --> 00:25:46,180
you're in<font color="#CCCCCC"> RISC mode or not</font><font color="#E5E5E5"> and if you</font>

703
00:25:43,390 --> 00:25:48,070
are<font color="#E5E5E5"> it's going to pass one of those</font>

704
00:25:46,180 --> 00:25:50,020
components<font color="#CCCCCC"> in this case</font><font color="#E5E5E5"> a 32-bit value</font>

705
00:25:48,070 --> 00:25:51,100
over to the RISC decoder<font color="#E5E5E5"> if you're not</font>

706
00:25:50,020 --> 00:25:53,850
it's going<font color="#E5E5E5"> to pass all those components</font>

707
00:25:51,100 --> 00:25:56,350
<font color="#CCCCCC">over to an x86 decoder so I sort</font><font color="#E5E5E5"> of</font>

708
00:25:53,850 --> 00:25:59,469
found this model<font color="#CCCCCC"> just</font><font color="#E5E5E5"> through a lot of</font>

709
00:25:56,350 --> 00:26:01,659
trial and error and and testing<font color="#E5E5E5"> but with</font>

710
00:25:59,470 --> 00:26:04,780
with this<font color="#CCCCCC"> setup</font><font color="#E5E5E5"> that basically means</font>

711
00:26:01,660 --> 00:26:07,660
that<font color="#E5E5E5"> there</font><font color="#CCCCCC"> is some x86 instruction out</font>

712
00:26:04,780 --> 00:26:09,490
there where if the processor is in risk

713
00:26:07,660 --> 00:26:12,580
mode then<font color="#CCCCCC"> it can</font><font color="#E5E5E5"> pass a portion of</font>

714
00:26:09,490 --> 00:26:15,670
itself<font color="#E5E5E5"> on to the RISC processor so now</font>

715
00:26:12,580 --> 00:26:17,199
my<font color="#CCCCCC"> question is what is that instruction</font>

716
00:26:15,670 --> 00:26:20,470
since since that instruction sort of

717
00:26:17,200 --> 00:26:22,960
joins these two<font color="#CCCCCC"> core since it acts as an</font>

718
00:26:20,470 --> 00:26:25,060
intermediary<font color="#E5E5E5"> between the x86 and the</font>

719
00:26:22,960 --> 00:26:27,130
RISC core I started<font color="#E5E5E5"> calling this the</font>

720
00:26:25,060 --> 00:26:29,409
bridge instruction this instruction that

721
00:26:27,130 --> 00:26:32,140
<font color="#E5E5E5">would let me send commands over to to</font>

722
00:26:29,410 --> 00:26:34,840
the risk or so so now the question<font color="#E5E5E5"> is</font>

723
00:26:32,140 --> 00:26:37,390
how do I<font color="#E5E5E5"> find the bridge instruction on</font>

724
00:26:34,840 --> 00:26:39,820
this on this processor well it should be

725
00:26:37,390 --> 00:26:42,220
sufficient to detect<font color="#E5E5E5"> that I've</font><font color="#CCCCCC"> executed</font>

726
00:26:39,820 --> 00:26:43,929
a RISC instruction if<font color="#E5E5E5"> I if</font><font color="#CCCCCC"> I've have</font>

727
00:26:42,220 --> 00:26:46,240
successfully executed a RISC instruction

728
00:26:43,930 --> 00:26:50,260
then<font color="#E5E5E5"> I I know what instruction I used in</font>

729
00:26:46,240 --> 00:26:51,580
order<font color="#E5E5E5"> to do that</font><font color="#CCCCCC"> so then the question is</font>

730
00:26:50,260 --> 00:26:53,470
well how do we<font color="#CCCCCC"> know if we've</font>

731
00:26:51,580 --> 00:26:57,340
successfully executed a RISC instruction

732
00:26:53,470 --> 00:26:58,570
well if if this risk<font color="#E5E5E5"> core really does</font>

733
00:26:57,340 --> 00:27:00,309
provide<font color="#E5E5E5"> a privilege sir</font>

734
00:26:58,570 --> 00:27:01,809
<font color="#CCCCCC">invention mechanism on the processor</font>

735
00:27:00,309 --> 00:27:04,990
then<font color="#E5E5E5"> there should be some risk</font>

736
00:27:01,809 --> 00:27:07,629
instruction<font color="#E5E5E5"> that when executed in ring</font><font color="#CCCCCC"> 3</font>

737
00:27:04,990 --> 00:27:09,549
should be<font color="#CCCCCC"> able</font><font color="#E5E5E5"> to corrupt the system so</font>

738
00:27:07,630 --> 00:27:11,200
normally<font color="#CCCCCC"> that would never happen and</font>

739
00:27:09,549 --> 00:27:12,908
ring<font color="#CCCCCC"> 3 the whole purpose of the</font>

740
00:27:11,200 --> 00:27:15,850
<font color="#E5E5E5">separation of privileges is that you</font>

741
00:27:12,909 --> 00:27:17,769
can't corrupt the<font color="#E5E5E5"> system from from ring</font>

742
00:27:15,850 --> 00:27:20,230
<font color="#E5E5E5">3 but if we can circumvent those</font>

743
00:27:17,769 --> 00:27:22,299
privileges<font color="#E5E5E5"> and observe that behavior</font>

744
00:27:20,230 --> 00:27:23,679
then that means that<font color="#CCCCCC"> we've found this</font>

745
00:27:22,299 --> 00:27:25,570
risk instruction so this is actually

746
00:27:23,679 --> 00:27:27,309
<font color="#E5E5E5">really easy to detect basically if we're</font>

747
00:27:25,570 --> 00:27:29,110
executing instructions in ring 3<font color="#CCCCCC"> and we</font>

748
00:27:27,309 --> 00:27:31,299
detected the processor as locked<font color="#E5E5E5"> or the</font>

749
00:27:29,110 --> 00:27:33,758
<font color="#CCCCCC">kernels panics or the system has reset</font>

750
00:27:31,299 --> 00:27:34,929
then that means<font color="#E5E5E5"> that we've found this</font>

751
00:27:33,759 --> 00:27:38,379
<font color="#E5E5E5">bridge instruction we've successfully</font>

752
00:27:34,929 --> 00:27:40,059
executed<font color="#CCCCCC"> we've</font><font color="#E5E5E5"> successfully executed an</font>

753
00:27:38,379 --> 00:27:42,850
instruction<font color="#E5E5E5"> on the risk or to corrupt</font>

754
00:27:40,059 --> 00:27:44,500
the system<font color="#E5E5E5"> so so I use</font><font color="#CCCCCC"> stand Center for</font>

755
00:27:42,850 --> 00:27:47,740
this again I basically<font color="#E5E5E5"> tore out the guts</font>

756
00:27:44,500 --> 00:27:49,929
of the<font color="#E5E5E5"> sand sifter fuzzer and ran in the</font>

757
00:27:47,740 --> 00:27:51,909
<font color="#CCCCCC">brute-force</font><font color="#E5E5E5"> mode and modified sand</font>

758
00:27:49,929 --> 00:27:53,649
sifter<font color="#CCCCCC"> to execute the launch instruction</font>

759
00:27:51,909 --> 00:27:55,629
<font color="#CCCCCC">before each x86 instruction that had</font>

760
00:27:53,649 --> 00:27:57,250
tried and basically<font color="#CCCCCC"> what's</font><font color="#E5E5E5"> in</font><font color="#CCCCCC"> sisters</font>

761
00:27:55,629 --> 00:27:59,709
trying to find now is the exact right

762
00:27:57,250 --> 00:28:02,559
combination of an x86 instruction and a

763
00:27:59,710 --> 00:28:04,659
corrupting RISC instruction<font color="#E5E5E5"> to to cause</font>

764
00:28:02,559 --> 00:28:07,090
a processor lock or kernel<font color="#E5E5E5"> panic or</font>

765
00:28:04,659 --> 00:28:09,399
system resets<font color="#CCCCCC"> so</font><font color="#E5E5E5"> that's going</font><font color="#CCCCCC"> to look</font>

766
00:28:07,090 --> 00:28:12,149
something<font color="#CCCCCC"> like this basically we've got</font>

767
00:28:09,399 --> 00:28:13,928
a dumbed down version of sand sifter

768
00:28:12,149 --> 00:28:16,330
<font color="#CCCCCC">brute-forcing instructions on the</font>

769
00:28:13,929 --> 00:28:18,519
processor basically running<font color="#CCCCCC"> in ring 3</font>

770
00:28:16,330 --> 00:28:20,080
and trying to cause a system lock and

771
00:28:18,519 --> 00:28:22,389
that's what we got here<font color="#E5E5E5"> basically</font>

772
00:28:20,080 --> 00:28:24,490
everything on<font color="#E5E5E5"> the system just stopped</font>

773
00:28:22,389 --> 00:28:27,549
<font color="#E5E5E5">all of</font><font color="#CCCCCC"> a sudden because sand sifter was</font>

774
00:28:24,490 --> 00:28:30,090
able to find<font color="#E5E5E5"> and a specific x86</font>

775
00:28:27,549 --> 00:28:32,470
instruction that when run in ring 3

776
00:28:30,090 --> 00:28:34,240
<font color="#E5E5E5">corrupted the</font><font color="#CCCCCC"> system which which should</font>

777
00:28:32,470 --> 00:28:35,440
never<font color="#CCCCCC"> happen so</font><font color="#E5E5E5"> basically when we've</font>

778
00:28:34,240 --> 00:28:37,929
observed that<font color="#CCCCCC"> that means</font><font color="#E5E5E5"> that we've</font>

779
00:28:35,440 --> 00:28:39,700
found this<font color="#E5E5E5"> bridge instruction that we're</font>

780
00:28:37,929 --> 00:28:41,529
<font color="#CCCCCC">looking for</font><font color="#E5E5E5"> so it took about an hour of</font>

781
00:28:39,700 --> 00:28:43,120
fussing with sand sifter here in order

782
00:28:41,529 --> 00:28:46,240
<font color="#E5E5E5">to identify the bridge instruction as</font>

783
00:28:43,120 --> 00:28:48,850
this bound<font color="#CCCCCC"> EAX</font><font color="#E5E5E5"> instruction so basically</font>

784
00:28:46,240 --> 00:28:50,950
this is<font color="#CCCCCC"> the</font><font color="#E5E5E5"> x86 instruction that is able</font>

785
00:28:48,850 --> 00:28:54,189
<font color="#E5E5E5">to send commands over to this deeply</font>

786
00:28:50,950 --> 00:28:55,899
embedded RISC core and then there's this

787
00:28:54,190 --> 00:28:57,820
middle<font color="#CCCCCC"> part of</font><font color="#E5E5E5"> the instruction this 32</font>

788
00:28:55,899 --> 00:28:59,979
<font color="#E5E5E5">bit value here it turns out that that 32</font>

789
00:28:57,820 --> 00:29:01,960
bit value used in<font color="#E5E5E5"> the bound instruction</font>

790
00:28:59,980 --> 00:29:05,470
is<font color="#E5E5E5"> the RISC instruction that is going to</font>

791
00:29:01,960 --> 00:29:06,610
be sent over<font color="#E5E5E5"> to that risk</font><font color="#CCCCCC"> core</font><font color="#E5E5E5"> and</font>

792
00:29:05,470 --> 00:29:08,710
<font color="#E5E5E5">that's a pretty easy</font><font color="#CCCCCC"> thing to</font><font color="#E5E5E5"> check</font>

793
00:29:06,610 --> 00:29:10,360
basically<font color="#E5E5E5"> just try out different 32-bit</font>

794
00:29:08,710 --> 00:29:12,490
values here you'll see that some of<font color="#E5E5E5"> them</font>

795
00:29:10,360 --> 00:29:14,139
<font color="#E5E5E5">always lock the</font><font color="#CCCCCC"> system</font><font color="#E5E5E5"> and some</font>

796
00:29:12,490 --> 00:29:15,940
never<font color="#CCCCCC"> lock the system which</font><font color="#E5E5E5"> is a pretty</font>

797
00:29:14,140 --> 00:29:17,890
<font color="#E5E5E5">good indicator that that 32-bit value is</font>

798
00:29:15,940 --> 00:29:19,390
<font color="#E5E5E5">actually the risk instruction that's</font>

799
00:29:17,890 --> 00:29:22,090
<font color="#E5E5E5">being sent over to the deeply embedded</font>

800
00:29:19,390 --> 00:29:24,040
core so<font color="#E5E5E5"> now we're to the point where we</font>

801
00:29:22,090 --> 00:29:25,510
know how to execute instructions on the

802
00:29:24,040 --> 00:29:28,860
deeply embedded core<font color="#E5E5E5"> the question then</font>

803
00:29:25,510 --> 00:29:30,580
<font color="#E5E5E5">is what do</font><font color="#CCCCCC"> we</font><font color="#E5E5E5"> want to actually execute</font>

804
00:29:28,860 --> 00:29:31,928
<font color="#CCCCCC">basically I</font><font color="#E5E5E5"> don't know what these</font>

805
00:29:30,580 --> 00:29:33,520
instructions look like I don't<font color="#E5E5E5"> know what</font>

806
00:29:31,929 --> 00:29:34,900
architecture I'm dealing with<font color="#E5E5E5"> for this</font>

807
00:29:33,520 --> 00:29:37,090
<font color="#E5E5E5">deeply embedded core so we need to</font>

808
00:29:34,900 --> 00:29:38,980
figure<font color="#E5E5E5"> out that part next so an obvious</font>

809
00:29:37,090 --> 00:29:41,320
<font color="#E5E5E5">first</font><font color="#CCCCCC"> step is to sort of assume that</font>

810
00:29:38,980 --> 00:29:43,210
<font color="#CCCCCC">this risk</font><font color="#E5E5E5"> core is</font><font color="#CCCCCC"> just some</font><font color="#E5E5E5"> sort of</font>

811
00:29:41,320 --> 00:29:44,800
common architecture<font color="#CCCCCC"> it doesn't</font><font color="#E5E5E5"> really</font>

812
00:29:43,210 --> 00:29:46,450
make sense to reinvent the wheel<font color="#CCCCCC"> so I</font>

813
00:29:44,800 --> 00:29:48,280
assumed going in<font color="#E5E5E5"> that this was</font><font color="#CCCCCC"> just</font>

814
00:29:46,450 --> 00:29:51,040
going<font color="#CCCCCC"> to be are more PowerPC or MIPS or</font>

815
00:29:48,280 --> 00:29:52,928
something<font color="#E5E5E5"> like</font><font color="#CCCCCC"> that so we can</font><font color="#E5E5E5"> basically</font>

816
00:29:51,040 --> 00:29:55,720
just<font color="#E5E5E5"> try to generate instructions in</font>

817
00:29:52,929 --> 00:29:57,429
some common RISC architecture<font color="#E5E5E5"> and try to</font>

818
00:29:55,720 --> 00:29:58,929
execute them on<font color="#E5E5E5"> the wrist core and see</font>

819
00:29:57,429 --> 00:30:02,140
what happens so<font color="#CCCCCC"> for example if I want to</font>

820
00:29:58,929 --> 00:30:03,460
<font color="#CCCCCC">see hey is this an arm core I could I</font>

821
00:30:02,140 --> 00:30:05,830
could generate<font color="#CCCCCC"> a very simple arm</font>

822
00:30:03,460 --> 00:30:07,929
instruction like add<font color="#CCCCCC"> one to r0 and try</font>

823
00:30:05,830 --> 00:30:10,300
to execute<font color="#CCCCCC"> that and see what</font><font color="#E5E5E5"> happens</font>

824
00:30:07,929 --> 00:30:13,210
the challenge with this approach is<font color="#E5E5E5"> that</font>

825
00:30:10,300 --> 00:30:15,580
<font color="#CCCCCC">the risk core probably has registers</font>

826
00:30:13,210 --> 00:30:17,980
that<font color="#E5E5E5"> aren't</font><font color="#CCCCCC"> even accessible to the x86</font>

827
00:30:15,580 --> 00:30:19,689
core which<font color="#CCCCCC"> means that there's no obvious</font>

828
00:30:17,980 --> 00:30:21,400
<font color="#E5E5E5">way to check for</font><font color="#CCCCCC"> the effects</font><font color="#E5E5E5"> of the</font>

829
00:30:19,690 --> 00:30:23,020
instructions<font color="#CCCCCC"> that you're trying</font><font color="#E5E5E5"> to</font>

830
00:30:21,400 --> 00:30:25,750
execute<font color="#E5E5E5"> so for example looking at the</font>

831
00:30:23,020 --> 00:30:28,330
last slide<font color="#CCCCCC"> if</font><font color="#E5E5E5"> I if I did execute this</font>

832
00:30:25,750 --> 00:30:32,920
add one to our 0 instruction<font color="#CCCCCC"> how do</font><font color="#E5E5E5"> I</font>

833
00:30:28,330 --> 00:30:35,409
even<font color="#E5E5E5"> observe</font><font color="#CCCCCC"> our zr0 from my x86 core so</font>

834
00:30:32,920 --> 00:30:37,179
my solution that this was sort<font color="#E5E5E5"> of an</font>

835
00:30:35,410 --> 00:30:39,429
observation<font color="#CCCCCC"> that even though I might not</font>

836
00:30:37,179 --> 00:30:40,900
<font color="#CCCCCC">be able</font><font color="#E5E5E5"> to easily observe most of the</font>

837
00:30:39,429 --> 00:30:42,160
effects<font color="#E5E5E5"> of my instructions</font><font color="#CCCCCC"> I should</font>

838
00:30:40,900 --> 00:30:44,559
still<font color="#E5E5E5"> be able to rule certain</font>

839
00:30:42,160 --> 00:30:46,300
architectures<font color="#E5E5E5"> out basically what</font><font color="#CCCCCC"> I found</font>

840
00:30:44,559 --> 00:30:47,678
is that<font color="#E5E5E5"> a lot of the instructions I was</font>

841
00:30:46,300 --> 00:30:50,139
sending<font color="#CCCCCC"> over to the risk core would</font>

842
00:30:47,679 --> 00:30:52,059
cause the processor<font color="#CCCCCC"> to lock so that's</font>

843
00:30:50,140 --> 00:30:53,050
one of<font color="#CCCCCC"> the few</font><font color="#E5E5E5"> visible effects of these</font>

844
00:30:52,059 --> 00:30:54,790
instructions<font color="#CCCCCC"> that</font><font color="#E5E5E5"> I thought I could</font>

845
00:30:53,050 --> 00:30:56,800
<font color="#CCCCCC">actually see so basically</font><font color="#E5E5E5"> what I could</font>

846
00:30:54,790 --> 00:30:58,809
do then is just execute really simple

847
00:30:56,800 --> 00:31:02,379
<font color="#E5E5E5">non locking instructions for each</font>

848
00:30:58,809 --> 00:31:04,090
architecture so like add<font color="#CCCCCC"> 1 to</font><font color="#E5E5E5"> r0</font><font color="#CCCCCC"> for arm</font>

849
00:31:02,380 --> 00:31:05,650
and then when I execute that on the risk

850
00:31:04,090 --> 00:31:08,050
or if I<font color="#CCCCCC"> observe that</font><font color="#E5E5E5"> the system</font><font color="#CCCCCC"> is</font>

851
00:31:05,650 --> 00:31:09,730
locked<font color="#CCCCCC"> I can sort of infer that well</font>

852
00:31:08,050 --> 00:31:12,850
<font color="#E5E5E5">that must not have been an arm core if</font>

853
00:31:09,730 --> 00:31:15,070
<font color="#E5E5E5">add</font><font color="#CCCCCC"> 1 to R</font><font color="#E5E5E5"> 0 corrupted the system so</font>

854
00:31:12,850 --> 00:31:17,620
using<font color="#E5E5E5"> that approach I ruled out 30</font>

855
00:31:15,070 --> 00:31:20,139
different<font color="#CCCCCC"> possible architectures</font><font color="#E5E5E5"> so</font>

856
00:31:17,620 --> 00:31:22,059
we're sort of<font color="#CCCCCC"> in a tough spot</font><font color="#E5E5E5"> at this</font>

857
00:31:20,140 --> 00:31:23,950
point I still<font color="#E5E5E5"> think this is</font><font color="#CCCCCC"> probably</font>

858
00:31:22,059 --> 00:31:26,379
based off of<font color="#E5E5E5"> some known architecture</font>

859
00:31:23,950 --> 00:31:28,480
<font color="#E5E5E5">just been modified too much in order</font>

860
00:31:26,380 --> 00:31:30,370
me to understand it<font color="#E5E5E5"> so we sort of have</font>

861
00:31:28,480 --> 00:31:31,990
to<font color="#E5E5E5"> approach this now as a black box as</font>

862
00:31:30,370 --> 00:31:34,389
some sort<font color="#CCCCCC"> of unknown architecture in</font>

863
00:31:31,990 --> 00:31:35,830
this<font color="#E5E5E5"> deeply embedded core</font><font color="#CCCCCC"> which means</font>

864
00:31:34,390 --> 00:31:37,690
that we're stuck<font color="#E5E5E5"> with the prospect of</font>

865
00:31:35,830 --> 00:31:41,110
<font color="#E5E5E5">trying to</font><font color="#CCCCCC"> reverse-engineer</font><font color="#E5E5E5"> the format of</font>

866
00:31:37,690 --> 00:31:43,330
these deeply embedded core instructions

867
00:31:41,110 --> 00:31:44,979
so I spent enough time<font color="#E5E5E5"> dealing with this</font>

868
00:31:43,330 --> 00:31:46,419
that I said Davis it's its own name I

869
00:31:44,980 --> 00:31:48,370
started<font color="#E5E5E5"> calling these instructions the</font>

870
00:31:46,420 --> 00:31:52,180
deeply embedded instruction set or<font color="#E5E5E5"> the</font>

871
00:31:48,370 --> 00:31:55,060
dice<font color="#CCCCCC"> so how does that work how can</font><font color="#E5E5E5"> we</font>

872
00:31:52,180 --> 00:31:57,400
<font color="#CCCCCC">reverse engineer</font><font color="#E5E5E5"> a completely unknown</font>

873
00:31:55,060 --> 00:31:58,870
instruction set well basically my

874
00:31:57,400 --> 00:32:00,370
thought was we could<font color="#E5E5E5"> execute a risk</font>

875
00:31:58,870 --> 00:32:02,919
<font color="#E5E5E5">instruction and try to observe its</font>

876
00:32:00,370 --> 00:32:05,800
results but like I said<font color="#CCCCCC"> earlier we don't</font>

877
00:32:02,920 --> 00:32:08,290
really know what<font color="#E5E5E5"> this risk is a actually</font>

878
00:32:05,800 --> 00:32:10,210
looks like<font color="#E5E5E5"> so I</font><font color="#CCCCCC"> don't really</font><font color="#E5E5E5"> have</font><font color="#CCCCCC"> a</font>

879
00:32:08,290 --> 00:32:12,820
clear way of<font color="#E5E5E5"> observing</font><font color="#CCCCCC"> the results on</font>

880
00:32:10,210 --> 00:32:14,230
the risk<font color="#CCCCCC"> core</font><font color="#E5E5E5"> but unfortunately some of</font>

881
00:32:12,820 --> 00:32:16,389
<font color="#E5E5E5">the patents give some insight into this</font>

882
00:32:14,230 --> 00:32:18,760
the patents actually hint at the idea

883
00:32:16,390 --> 00:32:21,520
<font color="#E5E5E5">that the risk</font><font color="#CCCCCC"> core and the x86 core have</font>

884
00:32:18,760 --> 00:32:22,750
a partially shared register file<font color="#E5E5E5"> so I</font>

885
00:32:21,520 --> 00:32:24,639
might<font color="#E5E5E5"> not be able to observe all of</font>

886
00:32:22,750 --> 00:32:27,100
<font color="#E5E5E5">their results of my risk instructions</font>

887
00:32:24,640 --> 00:32:30,040
but<font color="#E5E5E5"> I should be able to observe some of</font>

888
00:32:27,100 --> 00:32:32,980
<font color="#CCCCCC">the results from the x86 core so the</font>

889
00:32:30,040 --> 00:32:35,200
patents as an example<font color="#CCCCCC"> illustrate in x86</font>

890
00:32:32,980 --> 00:32:38,500
core and an arm core<font color="#E5E5E5"> with a partially</font>

891
00:32:35,200 --> 00:32:40,000
shared register file<font color="#CCCCCC"> so that helps that</font>

892
00:32:38,500 --> 00:32:41,200
means that we should<font color="#CCCCCC"> be able</font><font color="#E5E5E5"> to reverse</font>

893
00:32:40,000 --> 00:32:43,660
engineer at least some of<font color="#CCCCCC"> this</font>

894
00:32:41,200 --> 00:32:45,610
<font color="#CCCCCC">instruction said so what</font><font color="#E5E5E5"> this would</font><font color="#CCCCCC"> look</font>

895
00:32:43,660 --> 00:32:47,560
like is we would toggle the godmode bit

896
00:32:45,610 --> 00:32:49,570
remember that's the part we do need ring

897
00:32:47,560 --> 00:32:50,679
<font color="#E5E5E5">zero access for for now just toggling</font>

898
00:32:49,570 --> 00:32:52,659
this bit we're going<font color="#E5E5E5"> to do that through</font>

899
00:32:50,680 --> 00:32:53,770
a loadable kernel module and then I'm

900
00:32:52,660 --> 00:32:55,210
going<font color="#CCCCCC"> to generate some</font><font color="#E5E5E5"> sort of input</font>

901
00:32:53,770 --> 00:32:56,620
<font color="#CCCCCC">state for the processor</font><font color="#E5E5E5"> basically I'm</font>

902
00:32:55,210 --> 00:32:58,210
going<font color="#E5E5E5"> to select values for all the</font>

903
00:32:56,620 --> 00:32:59,739
processor registers I'm going to create

904
00:32:58,210 --> 00:33:01,570
some buffers in user land I'm going to

905
00:32:59,740 --> 00:33:03,840
create some buffers in the kernel<font color="#E5E5E5"> and</font>

906
00:33:01,570 --> 00:33:06,550
<font color="#E5E5E5">I'm going</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> record all of those values</font>

907
00:33:03,840 --> 00:33:08,500
<font color="#CCCCCC">then I'm going to generate</font><font color="#E5E5E5"> a</font><font color="#CCCCCC"> random RISC</font>

908
00:33:06,550 --> 00:33:09,909
<font color="#E5E5E5">instruction I'm going to wrap that RISC</font>

909
00:33:08,500 --> 00:33:11,890
instruction<font color="#E5E5E5"> in the x86 Bridge</font>

910
00:33:09,910 --> 00:33:13,600
instruction<font color="#E5E5E5"> and then I'm going</font><font color="#CCCCCC"> to</font>

911
00:33:11,890 --> 00:33:15,400
execute the RISC instruction on the

912
00:33:13,600 --> 00:33:18,699
deeply<font color="#E5E5E5"> embedded core by proceeding it</font>

913
00:33:15,400 --> 00:33:20,080
with the launch instruction<font color="#CCCCCC"> that</font><font color="#E5E5E5"> should</font>

914
00:33:18,700 --> 00:33:22,270
execute<font color="#E5E5E5"> the RISC instruction at which</font>

915
00:33:20,080 --> 00:33:23,669
point I'll record my new processor<font color="#E5E5E5"> state</font>

916
00:33:22,270 --> 00:33:26,200
I'll record<font color="#E5E5E5"> the state of all those</font>

917
00:33:23,670 --> 00:33:27,430
registers the buffers everything else

918
00:33:26,200 --> 00:33:28,480
<font color="#E5E5E5">that I had to Ridge</font><font color="#CCCCCC"> initely</font><font color="#E5E5E5"> set up and</font>

919
00:33:27,430 --> 00:33:30,670
then I'm<font color="#E5E5E5"> going</font><font color="#CCCCCC"> to look</font><font color="#E5E5E5"> through</font><font color="#CCCCCC"> for</font>

920
00:33:28,480 --> 00:33:33,610
differences<font color="#CCCCCC"> in the processor stage so</font>

921
00:33:30,670 --> 00:33:36,460
<font color="#CCCCCC">that looks something like</font><font color="#E5E5E5"> this sort</font><font color="#CCCCCC"> of a</font>

922
00:33:33,610 --> 00:33:40,209
summary<font color="#CCCCCC"> where in this</font><font color="#E5E5E5"> initial block</font><font color="#CCCCCC"> Here</font>

923
00:33:36,460 --> 00:33:41,290
I am<font color="#E5E5E5"> I'm setting up the input</font>

924
00:33:40,210 --> 00:33:43,120
<font color="#E5E5E5">day time basically loading all the</font>

925
00:33:41,290 --> 00:33:45,520
processor registers<font color="#E5E5E5"> with some</font>

926
00:33:43,120 --> 00:33:47,229
predetermined<font color="#E5E5E5"> values I'm creating</font>

927
00:33:45,520 --> 00:33:49,870
buffers in the<font color="#CCCCCC"> userland buffer in</font><font color="#E5E5E5"> the</font>

928
00:33:47,230 --> 00:33:51,490
kernel<font color="#CCCCCC"> after that I've got this Oh f3f</font>

929
00:33:49,870 --> 00:33:53,229
fight that's the that's<font color="#E5E5E5"> the launch</font>

930
00:33:51,490 --> 00:33:55,600
instruction which is<font color="#CCCCCC"> going</font><font color="#E5E5E5"> to enable me</font>

931
00:33:53,230 --> 00:33:57,460
to<font color="#E5E5E5"> send commands over to the x86 core</font>

932
00:33:55,600 --> 00:33:57,939
<font color="#E5E5E5">then I've got this bound instruction</font>

933
00:33:57,460 --> 00:33:59,410
here

934
00:33:57,940 --> 00:34:01,780
and that bound instruction has that

935
00:33:59,410 --> 00:34:03,130
<font color="#E5E5E5">32-bit value and that's the RISC</font>

936
00:34:01,780 --> 00:34:05,110
instruction that's actually going<font color="#E5E5E5"> to be</font>

937
00:34:03,130 --> 00:34:06,610
executed<font color="#E5E5E5"> on the on the deeply embedded</font>

938
00:34:05,110 --> 00:34:08,259
core so then after<font color="#E5E5E5"> that instruction</font>

939
00:34:06,610 --> 00:34:10,000
<font color="#E5E5E5">executes what I'm going to do is I'm</font>

940
00:34:08,260 --> 00:34:11,940
<font color="#E5E5E5">going to look at my new processor</font><font color="#CCCCCC"> State</font>

941
00:34:10,000 --> 00:34:14,409
and I'm going to<font color="#E5E5E5"> see if anything changed</font>

942
00:34:11,940 --> 00:34:19,960
<font color="#CCCCCC">between my input state</font><font color="#E5E5E5"> and my output</font>

943
00:34:14,409 --> 00:34:22,089
<font color="#CCCCCC">State</font><font color="#E5E5E5"> so so I basically turned</font><font color="#CCCCCC"> this or</font>

944
00:34:19,960 --> 00:34:25,870
concept into a<font color="#CCCCCC"> fuzzer</font>

945
00:34:22,090 --> 00:34:29,290
<font color="#E5E5E5">where it would it would look for certain</font>

946
00:34:25,870 --> 00:34:32,770
basic basic patterns by by generating

947
00:34:29,290 --> 00:34:35,259
specific input and output<font color="#CCCCCC"> States</font><font color="#E5E5E5"> so a</font>

948
00:34:32,770 --> 00:34:37,389
challenge<font color="#E5E5E5"> with this one we've</font>

949
00:34:35,260 --> 00:34:39,730
encountered<font color="#E5E5E5"> before to some extent is</font>

950
00:34:37,389 --> 00:34:42,819
we've got this unknown instruction set

951
00:34:39,730 --> 00:34:45,010
with unfettered<font color="#E5E5E5"> access to ring</font><font color="#CCCCCC"> zero</font>

952
00:34:42,820 --> 00:34:46,570
<font color="#E5E5E5">which means</font><font color="#CCCCCC"> it's really really easy to</font>

953
00:34:45,010 --> 00:34:48,040
accidentally generate<font color="#CCCCCC"> instructions that</font>

954
00:34:46,570 --> 00:34:50,140
are<font color="#E5E5E5"> going</font><font color="#CCCCCC"> to cause a kernel panic or a</font>

955
00:34:48,040 --> 00:34:51,580
processor lock or system reboot and in

956
00:34:50,139 --> 00:34:53,350
practice what I found is I could<font color="#E5E5E5"> only</font>

957
00:34:51,580 --> 00:34:55,150
execute about 20 random RISC

958
00:34:53,350 --> 00:34:57,640
instructions before<font color="#E5E5E5"> there was some sort</font>

959
00:34:55,150 --> 00:34:59,410
of unrecoverable corruption on that

960
00:34:57,640 --> 00:35:02,170
system<font color="#CCCCCC"> and</font><font color="#E5E5E5"> then I had to reboot the</font>

961
00:34:59,410 --> 00:35:03,819
target<font color="#CCCCCC"> but even after optimization it</font>

962
00:35:02,170 --> 00:35:06,070
took<font color="#E5E5E5"> about two</font><font color="#CCCCCC"> minutes to reboot the</font>

963
00:35:03,820 --> 00:35:07,180
system<font color="#CCCCCC"> and</font><font color="#E5E5E5"> some quick</font><font color="#CCCCCC"> calculations</font>

964
00:35:06,070 --> 00:35:08,560
showed that<font color="#CCCCCC"> it was</font><font color="#E5E5E5"> probably gonna take</font>

965
00:35:07,180 --> 00:35:10,029
months<font color="#CCCCCC"> and</font><font color="#E5E5E5"> months of buzzing to collect</font>

966
00:35:08,560 --> 00:35:12,610
enough<font color="#CCCCCC"> data to</font><font color="#E5E5E5"> actually reverse engineer</font>

967
00:35:10,030 --> 00:35:15,970
this<font color="#E5E5E5"> deeply embedded instruction set so</font>

968
00:35:12,610 --> 00:35:18,940
I decided to expand my my system from

969
00:35:15,970 --> 00:35:21,700
from earlier so<font color="#E5E5E5"> instead</font><font color="#CCCCCC"> of just one</font>

970
00:35:18,940 --> 00:35:23,290
target<font color="#E5E5E5"> hooked up to a master I bought as</font>

971
00:35:21,700 --> 00:35:24,640
many of these systems<font color="#CCCCCC"> as I possibly</font>

972
00:35:23,290 --> 00:35:26,920
could and<font color="#E5E5E5"> hooked them all up to this</font>

973
00:35:24,640 --> 00:35:28,330
<font color="#E5E5E5">this master system and the the overall</font>

974
00:35:26,920 --> 00:35:31,960
system ended up looking<font color="#CCCCCC"> something like</font>

975
00:35:28,330 --> 00:35:34,630
this<font color="#CCCCCC"> we're down here I've got my</font><font color="#E5E5E5"> seven</font>

976
00:35:31,960 --> 00:35:36,070
targets<font color="#CCCCCC"> that I'm that</font><font color="#E5E5E5"> I'm attacking you</font>

977
00:35:34,630 --> 00:35:37,870
can see a little<font color="#E5E5E5"> green wire coming out</font>

978
00:35:36,070 --> 00:35:40,090
<font color="#E5E5E5">of the chassis of each of those that's a</font>

979
00:35:37,870 --> 00:35:42,220
wire hooked up to the relay in<font color="#E5E5E5"> the upper</font>

980
00:35:40,090 --> 00:35:43,720
<font color="#CCCCCC">left-hand corner</font><font color="#E5E5E5"> that's how I'm going to</font>

981
00:35:42,220 --> 00:35:45,970
<font color="#E5E5E5">be able to power cycle these when they</font>

982
00:35:43,720 --> 00:35:47,799
freeze<font color="#E5E5E5"> that relays hooked over USB to</font>

983
00:35:45,970 --> 00:35:49,720
this<font color="#CCCCCC"> master</font><font color="#E5E5E5"> system all the targets</font>

984
00:35:47,800 --> 00:35:52,000
<font color="#E5E5E5">network network boot from the master and</font>

985
00:35:49,720 --> 00:35:53,560
<font color="#CCCCCC">the master can SSH into</font><font color="#E5E5E5"> the targets in</font>

986
00:35:52,000 --> 00:35:57,370
<font color="#E5E5E5">order to give them</font>

987
00:35:53,560 --> 00:35:59,140
<font color="#E5E5E5">specific fuzzing jobs</font><font color="#CCCCCC"> so</font><font color="#E5E5E5"> basically</font>

988
00:35:57,370 --> 00:36:02,620
summarizing all that work so we can

989
00:35:59,140 --> 00:36:05,080
<font color="#CCCCCC">actually see this thing in</font><font color="#E5E5E5"> action</font><font color="#CCCCCC"> what</font>

990
00:36:02,620 --> 00:36:07,180
I'm going<font color="#CCCCCC"> to do is I'm going to start a</font>

991
00:36:05,080 --> 00:36:08,470
job on the<font color="#E5E5E5"> turn on</font><font color="#CCCCCC"> the master system the</font>

992
00:36:07,180 --> 00:36:10,810
master is<font color="#E5E5E5"> going to think for a little</font>

993
00:36:08,470 --> 00:36:12,580
<font color="#E5E5E5">bit and try to figure out how it's</font><font color="#CCCCCC"> going</font>

994
00:36:10,810 --> 00:36:14,049
to task<font color="#E5E5E5"> the individual targets basically</font>

995
00:36:12,580 --> 00:36:15,880
what fuzzing jobs it wants to<font color="#E5E5E5"> get to</font>

996
00:36:14,050 --> 00:36:16,990
each individual target and then it's

997
00:36:15,880 --> 00:36:19,780
<font color="#E5E5E5">going</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> start powering</font><font color="#CCCCCC"> up each</font>

998
00:36:16,990 --> 00:36:20,950
individual individual target<font color="#E5E5E5"> if you look</font>

999
00:36:19,780 --> 00:36:22,810
at the relay in<font color="#E5E5E5"> the upper left you can</font>

1000
00:36:20,950 --> 00:36:24,370
<font color="#E5E5E5">see the relay toggling each of these</font>

1001
00:36:22,810 --> 00:36:25,720
systems<font color="#CCCCCC"> one by one down here you can</font><font color="#E5E5E5"> see</font>

1002
00:36:24,370 --> 00:36:28,480
the green lights on each target coming

1003
00:36:25,720 --> 00:36:31,990
on<font color="#E5E5E5"> one by one as these as these system</font>

1004
00:36:28,480 --> 00:36:34,230
boots as these systems<font color="#CCCCCC"> boot and</font><font color="#E5E5E5"> then we</font>

1005
00:36:31,990 --> 00:36:38,589
wait basically<font color="#E5E5E5"> for for the systems</font><font color="#CCCCCC"> to</font>

1006
00:36:34,230 --> 00:36:40,750
<font color="#CCCCCC">boot</font><font color="#E5E5E5"> so I'm going to fast</font><font color="#CCCCCC"> forward</font><font color="#E5E5E5"> a</font>

1007
00:36:38,590 --> 00:36:42,700
<font color="#E5E5E5">little</font><font color="#CCCCCC"> bit through that</font><font color="#E5E5E5"> so that we can</font>

1008
00:36:40,750 --> 00:36:44,830
actually see what we do once<font color="#E5E5E5"> the systems</font>

1009
00:36:42,700 --> 00:36:46,029
come online basically what the master is

1010
00:36:44,830 --> 00:36:47,830
<font color="#E5E5E5">going to start doing at this point is</font>

1011
00:36:46,030 --> 00:36:50,560
tasking each individual<font color="#CCCCCC"> system with</font>

1012
00:36:47,830 --> 00:36:52,930
certain fuzzing jobs<font color="#E5E5E5"> so you can see a</font>

1013
00:36:50,560 --> 00:36:54,990
state<font color="#CCCCCC"> diffs</font><font color="#E5E5E5"> starting to scroll by on the</font>

1014
00:36:52,930 --> 00:36:57,160
master basically when<font color="#E5E5E5"> it observes a</font>

1015
00:36:54,990 --> 00:36:58,589
difference in the input<font color="#CCCCCC"> and output state</font>

1016
00:36:57,160 --> 00:37:00,790
<font color="#E5E5E5">it's going to record</font><font color="#CCCCCC"> that information</font>

1017
00:36:58,590 --> 00:37:01,690
<font color="#E5E5E5">when it observes that one of the systems</font>

1018
00:37:00,790 --> 00:37:02,980
has locked

1019
00:37:01,690 --> 00:37:05,380
you could<font color="#E5E5E5"> hear just</font><font color="#CCCCCC"> a second ago the</font>

1020
00:37:02,980 --> 00:37:07,720
relays toggling basically<font color="#E5E5E5"> its power</font>

1021
00:37:05,380 --> 00:37:09,640
cycling each of these<font color="#E5E5E5"> systems</font><font color="#CCCCCC"> whenever</font>

1022
00:37:07,720 --> 00:37:12,279
the system<font color="#E5E5E5"> becomes unrecovered</font><font color="#CCCCCC"> lis</font>

1023
00:37:09,640 --> 00:37:16,089
corrupted<font color="#E5E5E5"> but basically we're just going</font>

1024
00:37:12,280 --> 00:37:19,630
<font color="#CCCCCC">to let this run</font><font color="#E5E5E5"> for</font><font color="#CCCCCC"> a quite a long time</font>

1025
00:37:16,090 --> 00:37:22,600
and we can sort<font color="#CCCCCC"> of see logs</font><font color="#E5E5E5"> scrolling in</font>

1026
00:37:19,630 --> 00:37:24,040
from<font color="#E5E5E5"> from these from these systems and</font>

1027
00:37:22,600 --> 00:37:26,140
<font color="#E5E5E5">basically just recording state</font><font color="#CCCCCC"> diffs</font>

1028
00:37:24,040 --> 00:37:28,330
<font color="#E5E5E5">each time so</font><font color="#CCCCCC"> I let this run for</font><font color="#E5E5E5"> three</font>

1029
00:37:26,140 --> 00:37:31,270
weeks<font color="#CCCCCC"> it collected 15 gigabytes</font><font color="#E5E5E5"> of logs</font>

1030
00:37:28,330 --> 00:37:33,040
across 2.3 million state<font color="#CCCCCC"> disks for</font><font color="#E5E5E5"> a</font>

1031
00:37:31,270 --> 00:37:35,380
total<font color="#E5E5E5"> of about</font><font color="#CCCCCC"> four thousand</font><font color="#E5E5E5"> hours of of</font>

1032
00:37:33,040 --> 00:37:37,120
compute time so it's a lot<font color="#CCCCCC"> of data</font><font color="#E5E5E5"> that</font>

1033
00:37:35,380 --> 00:37:38,500
<font color="#E5E5E5">it collected but now that it's done</font>

1034
00:37:37,120 --> 00:37:40,630
<font color="#E5E5E5">collecting its data we can actually</font>

1035
00:37:38,500 --> 00:37:42,220
start looking<font color="#CCCCCC"> into these logs to try to</font>

1036
00:37:40,630 --> 00:37:44,560
figure<font color="#CCCCCC"> out how</font><font color="#E5E5E5"> this unknown</font><font color="#CCCCCC"> instruction</font>

1037
00:37:42,220 --> 00:37:46,200
said actually works<font color="#E5E5E5"> so</font><font color="#CCCCCC"> the maybe the</font>

1038
00:37:44,560 --> 00:37:49,299
first<font color="#E5E5E5"> thing</font><font color="#CCCCCC"> I</font><font color="#E5E5E5"> wanted to</font><font color="#CCCCCC"> figure out is</font>

1039
00:37:46,200 --> 00:37:51,669
this<font color="#CCCCCC"> is my premise correct</font><font color="#E5E5E5"> can this</font>

1040
00:37:49,300 --> 00:37:54,790
<font color="#CCCCCC">thing actually</font><font color="#E5E5E5"> bypassed the rings of</font>

1041
00:37:51,670 --> 00:37:57,280
privilege<font color="#CCCCCC"> and x86</font><font color="#E5E5E5"> and much to my relief</font>

1042
00:37:54,790 --> 00:37:58,720
after after all this work it's pretty

1043
00:37:57,280 --> 00:38:00,250
quick<font color="#E5E5E5"> to go through these logs and</font>

1044
00:37:58,720 --> 00:38:02,200
figure out<font color="#E5E5E5"> that</font><font color="#CCCCCC"> that is actually the</font>

1045
00:38:00,250 --> 00:38:04,330
<font color="#CCCCCC">case</font><font color="#E5E5E5"> so for example in this log you can</font>

1046
00:38:02,200 --> 00:38:06,819
see the<font color="#E5E5E5"> the input and</font><font color="#CCCCCC"> output state</font>

1047
00:38:04,330 --> 00:38:08,380
differed in<font color="#E5E5E5"> the</font><font color="#CCCCCC"> edx register</font>

1048
00:38:06,820 --> 00:38:10,450
typically we see<font color="#CCCCCC"> this value eight zero</font>

1049
00:38:08,380 --> 00:38:12,700
zero<font color="#CCCCCC"> five zero zero</font><font color="#E5E5E5"> three three in EDX</font>

1050
00:38:10,450 --> 00:38:16,120
<font color="#E5E5E5">that turns out</font><font color="#CCCCCC"> to be the control</font>

1051
00:38:12,700 --> 00:38:18,220
<font color="#E5E5E5">register zero now</font><font color="#CCCCCC"> CR zero is normally</font>

1052
00:38:16,120 --> 00:38:19,870
not accessible to<font color="#E5E5E5"> ring three but we can</font>

1053
00:38:18,220 --> 00:38:23,049
see that<font color="#CCCCCC"> through this risk instruction</font>

1054
00:38:19,870 --> 00:38:25,529
we managed<font color="#CCCCCC"> to access CR zero through</font>

1055
00:38:23,050 --> 00:38:29,650
this up at the top a seven<font color="#E5E5E5"> seven one</font>

1056
00:38:25,530 --> 00:38:32,950
risk instruction<font color="#CCCCCC"> so so</font><font color="#E5E5E5"> that's a good</font>

1057
00:38:29,650 --> 00:38:34,630
<font color="#E5E5E5">sign</font><font color="#CCCCCC"> I'm</font><font color="#E5E5E5"> able to read ring zero data or</font>

1058
00:38:32,950 --> 00:38:37,049
registers that<font color="#E5E5E5"> are normally only</font>

1059
00:38:34,630 --> 00:38:39,340
<font color="#CCCCCC">accessible to</font><font color="#E5E5E5"> ring zero from ring three</font>

1060
00:38:37,050 --> 00:38:41,710
<font color="#CCCCCC">so then the question is well am I am</font><font color="#E5E5E5"> I</font>

1061
00:38:39,340 --> 00:38:42,880
<font color="#CCCCCC">only limited</font><font color="#E5E5E5"> to reading ring zero data</font>

1062
00:38:41,710 --> 00:38:44,230
and it turns out<font color="#E5E5E5"> not if we keep going</font>

1063
00:38:42,880 --> 00:38:47,670
through<font color="#E5E5E5"> the logs we'll see this other</font>

1064
00:38:44,230 --> 00:38:52,810
instruction<font color="#CCCCCC"> 8a B</font><font color="#E5E5E5"> 4 is actually able to</font>

1065
00:38:47,670 --> 00:38:54,610
copy the EBP<font color="#E5E5E5"> register into debug</font>

1066
00:38:52,810 --> 00:38:56,740
registers<font color="#E5E5E5"> zero so debug registers zero</font>

1067
00:38:54,610 --> 00:38:58,810
is normally only writable<font color="#E5E5E5"> to ring</font><font color="#CCCCCC"> zero</font>

1068
00:38:56,740 --> 00:39:01,359
<font color="#E5E5E5">so I'm actually able to write ring zero</font>

1069
00:38:58,810 --> 00:39:04,600
<font color="#E5E5E5">only data using this deeply embedded</font>

1070
00:39:01,360 --> 00:39:05,970
core<font color="#E5E5E5"> so so at this point</font><font color="#CCCCCC"> the question is</font>

1071
00:39:04,600 --> 00:39:09,220
what do we<font color="#CCCCCC"> want to do well theoretically</font>

1072
00:39:05,970 --> 00:39:11,140
<font color="#E5E5E5">this thing can bypass all</font><font color="#CCCCCC"> the ring</font>

1073
00:39:09,220 --> 00:39:12,549
boundaries which means<font color="#E5E5E5"> we can do</font>

1074
00:39:11,140 --> 00:39:14,410
anything we<font color="#CCCCCC"> want on</font><font color="#E5E5E5"> this processor at</font>

1075
00:39:12,550 --> 00:39:15,880
this point but I I thought<font color="#E5E5E5"> it makes</font>

1076
00:39:14,410 --> 00:39:17,799
sense<font color="#E5E5E5"> to try to come up</font><font color="#CCCCCC"> with</font><font color="#E5E5E5"> a sort</font><font color="#CCCCCC"> of a</font>

1077
00:39:15,880 --> 00:39:20,260
succinct<font color="#E5E5E5"> simple demo to really</font>

1078
00:39:17,800 --> 00:39:22,150
<font color="#CCCCCC">illustrate the</font><font color="#E5E5E5"> the power of this deeply</font>

1079
00:39:20,260 --> 00:39:24,250
<font color="#E5E5E5">embedded core so I thought a good</font>

1080
00:39:22,150 --> 00:39:26,080
<font color="#CCCCCC">demonstration would be a privilege</font>

1081
00:39:24,250 --> 00:39:27,640
escalation payload basically something

1082
00:39:26,080 --> 00:39:29,290
<font color="#E5E5E5">that</font><font color="#CCCCCC"> would take</font><font color="#E5E5E5"> an unprivileged user and</font>

1083
00:39:27,640 --> 00:39:31,990
grant<font color="#E5E5E5"> them root permissions all from</font>

1084
00:39:29,290 --> 00:39:34,090
within<font color="#E5E5E5"> ring 3 so a privilege escalation</font>

1085
00:39:31,990 --> 00:39:35,410
payload from this deeply<font color="#E5E5E5"> embedded core</font>

1086
00:39:34,090 --> 00:39:38,200
perspective would look<font color="#E5E5E5"> something like</font>

1087
00:39:35,410 --> 00:39:39,879
this basically<font color="#CCCCCC"> you can parse a</font><font color="#E5E5E5"> structure</font>

1088
00:39:38,200 --> 00:39:42,310
in x86 called the global descriptor

1089
00:39:39,880 --> 00:39:44,290
table<font color="#E5E5E5"> and inside of the global</font>

1090
00:39:42,310 --> 00:39:46,900
descriptor table<font color="#E5E5E5"> there is what's called</font>

1091
00:39:44,290 --> 00:39:49,509
<font color="#E5E5E5">a segment selector for the FS segment if</font>

1092
00:39:46,900 --> 00:39:51,730
<font color="#E5E5E5">you parse out that that segment selector</font>

1093
00:39:49,510 --> 00:39:54,250
you can get a pointer to<font color="#CCCCCC"> a Linux</font>

1094
00:39:51,730 --> 00:39:55,990
structure called<font color="#CCCCCC"> the task struct</font><font color="#E5E5E5"> and if</font>

1095
00:39:54,250 --> 00:39:57,190
you parse out<font color="#CCCCCC"> some of the tasks truck</font>

1096
00:39:55,990 --> 00:39:58,689
you can<font color="#E5E5E5"> get another pointer to what's</font>

1097
00:39:57,190 --> 00:40:01,330
called<font color="#E5E5E5"> the</font><font color="#CCCCCC"> creds struct all this sitting</font>

1098
00:39:58,690 --> 00:40:05,290
<font color="#CCCCCC">in kernel space finally inside</font><font color="#E5E5E5"> of that</font>

1099
00:40:01,330 --> 00:40:08,259
<font color="#E5E5E5">creds struck our four fields the UID</font><font color="#CCCCCC"> GID</font>

1100
00:40:05,290 --> 00:40:10,450
<font color="#CCCCCC">II UID and GID</font><font color="#E5E5E5"> that define what</font>

1101
00:40:08,260 --> 00:40:12,100
<font color="#E5E5E5">permissions your current process has and</font>

1102
00:40:10,450 --> 00:40:13,629
if we set all of<font color="#CCCCCC"> those four fields to</font>

1103
00:40:12,100 --> 00:40:15,940
<font color="#E5E5E5">zero that's effectively giving our</font>

1104
00:40:13,630 --> 00:40:18,270
process root permissions but all this

1105
00:40:15,940 --> 00:40:19,890
<font color="#E5E5E5">can only</font><font color="#CCCCCC"> occur from within the kernel</font>

1106
00:40:18,270 --> 00:40:21,869
normally

1107
00:40:19,890 --> 00:40:23,788
<font color="#E5E5E5">but but basically we want to implement</font>

1108
00:40:21,869 --> 00:40:25,230
<font color="#E5E5E5">this functionality using the the deeply</font>

1109
00:40:23,789 --> 00:40:27,059
<font color="#E5E5E5">embedded core now there's only a few</font>

1110
00:40:25,230 --> 00:40:29,789
pieces in<font color="#E5E5E5"> here</font><font color="#CCCCCC"> that actually require us</font>

1111
00:40:27,059 --> 00:40:31,500
<font color="#E5E5E5">to</font><font color="#CCCCCC"> bypass the kernel boundaries we don't</font>

1112
00:40:29,789 --> 00:40:34,140
have to do all<font color="#CCCCCC"> of this on the on the</font>

1113
00:40:31,500 --> 00:40:35,789
deeply embedded core<font color="#CCCCCC"> it's only these</font><font color="#E5E5E5"> key</font>

1114
00:40:34,140 --> 00:40:37,230
<font color="#E5E5E5">pieces that actually</font><font color="#CCCCCC"> reach into kernel</font>

1115
00:40:35,789 --> 00:40:39,569
<font color="#CCCCCC">memory but I thought</font><font color="#E5E5E5"> it's it's sort</font><font color="#CCCCCC"> of</font>

1116
00:40:37,230 --> 00:40:41,490
fun trying trying<font color="#E5E5E5"> to write programs</font><font color="#CCCCCC"> for</font>

1117
00:40:39,569 --> 00:40:43,109
this this secretive core on the

1118
00:40:41,490 --> 00:40:45,598
<font color="#E5E5E5">processor so I kind of want to try to do</font>

1119
00:40:43,109 --> 00:40:48,328
<font color="#E5E5E5">this entire thing from from within this</font>

1120
00:40:45,599 --> 00:40:49,829
deeply embedded instruction set so at

1121
00:40:48,329 --> 00:40:51,240
this point it's sort<font color="#E5E5E5"> of like building a</font>

1122
00:40:49,829 --> 00:40:53,279
<font color="#CCCCCC">rap chain like when you're building a</font>

1123
00:40:51,240 --> 00:40:54,509
rap chain you've got a set<font color="#E5E5E5"> of primitives</font>

1124
00:40:53,279 --> 00:40:55,470
<font color="#E5E5E5">to work with and you sort</font><font color="#CCCCCC"> of sift</font>

1125
00:40:54,510 --> 00:40:56,880
through these<font color="#CCCCCC"> primitives trying to</font>

1126
00:40:55,470 --> 00:40:58,769
figure<font color="#E5E5E5"> out how to construct higher level</font>

1127
00:40:56,880 --> 00:41:00,390
functionality<font color="#E5E5E5"> which is basically</font><font color="#CCCCCC"> exactly</font>

1128
00:40:58,769 --> 00:41:01,799
what we have here<font color="#CCCCCC"> we've got 15 gigabytes</font>

1129
00:41:00,390 --> 00:41:03,359
of<font color="#E5E5E5"> logs and we want to sift through</font>

1130
00:41:01,799 --> 00:41:05,880
these logs<font color="#E5E5E5"> to find some primitives</font><font color="#CCCCCC"> to</font>

1131
00:41:03,359 --> 00:41:07,319
<font color="#CCCCCC">build up this is payload that we're</font>

1132
00:41:05,880 --> 00:41:09,900
after so<font color="#E5E5E5"> the first thing we might want</font>

1133
00:41:07,319 --> 00:41:12,500
<font color="#CCCCCC">to try to</font><font color="#E5E5E5"> find is a</font><font color="#CCCCCC"> gdt read some way of</font>

1134
00:41:09,900 --> 00:41:14,279
reading the global descriptor table<font color="#E5E5E5"> so</font>

1135
00:41:12,500 --> 00:41:17,400
we<font color="#E5E5E5"> can find that pretty quickly</font>

1136
00:41:14,279 --> 00:41:19,019
instruction a<font color="#CCCCCC"> 3 1 3 is able to load the</font>

1137
00:41:17,400 --> 00:41:22,109
global descriptor table register into

1138
00:41:19,019 --> 00:41:24,598
the<font color="#CCCCCC"> EBX register next primitive we might</font>

1139
00:41:22,109 --> 00:41:27,808
want is a kernel read we<font color="#E5E5E5"> can find that</font><font color="#CCCCCC"> D</font>

1140
00:41:24,599 --> 00:41:30,150
<font color="#E5E5E5">4:07 we can see that it loaded a single</font>

1141
00:41:27,809 --> 00:41:31,980
bite out of a kernel buffer into the<font color="#E5E5E5"> EBP</font>

1142
00:41:30,150 --> 00:41:34,829
register<font color="#CCCCCC"> we need a kernel right</font>

1143
00:41:31,980 --> 00:41:36,960
primitive and we can find out<font color="#E5E5E5"> in</font><font color="#CCCCCC"> eetu v7</font>

1144
00:41:34,829 --> 00:41:40,829
we<font color="#E5E5E5"> can see that it wrote a</font><font color="#CCCCCC"> single bite</font>

1145
00:41:36,960 --> 00:41:42,299
out of<font color="#CCCCCC"> ECX</font><font color="#E5E5E5"> into my kernel buffer so</font>

1146
00:41:40,829 --> 00:41:44,490
we've sort<font color="#E5E5E5"> of got all the building</font>

1147
00:41:42,299 --> 00:41:46,079
<font color="#E5E5E5">blocks we should need we if we want</font><font color="#CCCCCC"> to</font>

1148
00:41:44,490 --> 00:41:47,339
<font color="#E5E5E5">write this</font><font color="#CCCCCC"> entire thing in the deeply</font>

1149
00:41:46,079 --> 00:41:49,799
embedded core we need primitives like

1150
00:41:47,339 --> 00:41:51,390
addition these<font color="#E5E5E5"> are a</font><font color="#CCCCCC"> little</font><font color="#E5E5E5"> bit harder</font>

1151
00:41:49,799 --> 00:41:53,579
<font color="#CCCCCC">to spot</font><font color="#E5E5E5"> when you're just manually going</font>

1152
00:41:51,390 --> 00:41:55,799
through through logs<font color="#E5E5E5"> so it's not</font>

1153
00:41:53,579 --> 00:41:57,660
immediately clear<font color="#CCCCCC"> that an addition</font>

1154
00:41:55,799 --> 00:41:59,220
occurred here unless you're very<font color="#E5E5E5"> very</font>

1155
00:41:57,660 --> 00:42:01,170
<font color="#E5E5E5">tediously analyzing all the</font><font color="#CCCCCC"> other</font>

1156
00:41:59,220 --> 00:42:02,788
<font color="#CCCCCC">registers and your</font><font color="#E5E5E5"> input and output</font>

1157
00:42:01,170 --> 00:42:04,710
<font color="#CCCCCC">state so you</font><font color="#E5E5E5"> can try to fix that by</font>

1158
00:42:02,789 --> 00:42:06,420
<font color="#CCCCCC">adding some some patterns to your</font>

1159
00:42:04,710 --> 00:42:07,950
register but at the<font color="#CCCCCC"> end</font><font color="#E5E5E5"> of the day I</font>

1160
00:42:06,420 --> 00:42:09,119
served at the conclusion that's sifting

1161
00:42:07,950 --> 00:42:10,890
through logs like<font color="#E5E5E5"> this</font><font color="#CCCCCC"> just doesn't</font>

1162
00:42:09,119 --> 00:42:12,509
scale<font color="#E5E5E5"> well so I wanted some sort of</font>

1163
00:42:10,890 --> 00:42:14,549
automated approach<font color="#CCCCCC"> to reverse</font>

1164
00:42:12,509 --> 00:42:17,579
engineering this instruction set from

1165
00:42:14,549 --> 00:42:20,400
these<font color="#E5E5E5"> from these logs so basically what</font>

1166
00:42:17,579 --> 00:42:22,319
I<font color="#E5E5E5"> wanted to do is extract</font><font color="#CCCCCC"> behavior</font>

1167
00:42:20,400 --> 00:42:24,089
patterns from<font color="#E5E5E5"> these state</font><font color="#CCCCCC"> dips</font><font color="#E5E5E5"> in order</font>

1168
00:42:22,319 --> 00:42:25,890
to identify<font color="#CCCCCC"> patterns</font><font color="#E5E5E5"> in</font><font color="#CCCCCC"> the</font><font color="#E5E5E5"> RISC</font>

1169
00:42:24,089 --> 00:42:27,210
instructions so I built this tool<font color="#CCCCCC"> that I</font>

1170
00:42:25,890 --> 00:42:29,910
called the<font color="#E5E5E5"> collector</font><font color="#CCCCCC"> that sort of</font><font color="#E5E5E5"> those</font>

1171
00:42:27,210 --> 00:42:31,980
automated<font color="#E5E5E5"> reverse engineering of unknown</font>

1172
00:42:29,910 --> 00:42:33,180
instruction sets so basically what the

1173
00:42:31,980 --> 00:42:34,970
collector<font color="#E5E5E5"> does</font>

1174
00:42:33,180 --> 00:42:37,890
it tries to automatically identify

1175
00:42:34,970 --> 00:42:41,790
patterns instinctive so it'll look<font color="#E5E5E5"> for</font>

1176
00:42:37,890 --> 00:42:44,160
patterns like<font color="#CCCCCC"> word swaps or</font><font color="#E5E5E5"> word copies</font>

1177
00:42:41,790 --> 00:42:46,319
or immediate loads or register transfers

1178
00:42:44,160 --> 00:42:48,359
or memory reads<font color="#E5E5E5"> your memory writes or</font>

1179
00:42:46,319 --> 00:42:50,099
increments or decrements<font color="#CCCCCC"> basically it</font>

1180
00:42:48,359 --> 00:42:52,470
has this whole library<font color="#E5E5E5"> of patterns that</font>

1181
00:42:50,099 --> 00:42:54,450
it will search for<font color="#E5E5E5"> in these state disks</font>

1182
00:42:52,470 --> 00:42:56,098
and<font color="#CCCCCC"> it will</font><font color="#E5E5E5"> start bidding instructions</font>

1183
00:42:54,450 --> 00:42:57,569
based on the patterns that<font color="#E5E5E5"> it's finding</font>

1184
00:42:56,099 --> 00:42:59,550
<font color="#E5E5E5">and after it ends up with an instruction</font>

1185
00:42:57,569 --> 00:43:01,558
bin<font color="#E5E5E5"> we can start trying to automatically</font>

1186
00:42:59,550 --> 00:43:03,750
<font color="#E5E5E5">extract the instruction encoding by</font>

1187
00:43:01,559 --> 00:43:05,760
analyzing bit patterns<font color="#E5E5E5"> within the bin so</font>

1188
00:43:03,750 --> 00:43:07,800
that<font color="#E5E5E5"> looks something like this</font><font color="#CCCCCC"> basically</font>

1189
00:43:05,760 --> 00:43:10,050
<font color="#CCCCCC">this</font><font color="#E5E5E5"> is the bin</font><font color="#CCCCCC"> of all the instructions</font>

1190
00:43:07,800 --> 00:43:12,510
<font color="#CCCCCC">from my logs</font><font color="#E5E5E5"> that were observed to</font>

1191
00:43:10,050 --> 00:43:14,460
<font color="#E5E5E5">transfer one register to</font><font color="#CCCCCC"> another</font>

1192
00:43:12,510 --> 00:43:17,309
register and the question<font color="#CCCCCC"> for the</font>

1193
00:43:14,460 --> 00:43:19,380
collector is what does this instruction

1194
00:43:17,309 --> 00:43:20,400
format actually look<font color="#CCCCCC"> like if</font><font color="#E5E5E5"> I want to</font>

1195
00:43:19,380 --> 00:43:22,619
be able<font color="#E5E5E5"> to write these instructions</font>

1196
00:43:20,400 --> 00:43:24,960
myself<font color="#E5E5E5"> so with a little</font><font color="#CCCCCC"> manual analysis</font>

1197
00:43:22,619 --> 00:43:28,200
I saw<font color="#CCCCCC"> EAX register is always encoded as</font>

1198
00:43:24,960 --> 00:43:30,030
0 0 0 0<font color="#E5E5E5"> ec x is always encoded as 0 0 0</font>

1199
00:43:28,200 --> 00:43:32,160
1<font color="#CCCCCC"> so the collector can then go through</font>

1200
00:43:30,030 --> 00:43:34,619
<font color="#CCCCCC">for</font><font color="#E5E5E5"> each of these instructions it</font><font color="#CCCCCC"> can</font>

1201
00:43:32,160 --> 00:43:37,290
try to find exactly which bits might be

1202
00:43:34,619 --> 00:43:39,210
encoding the register so<font color="#CCCCCC"> for example for</font>

1203
00:43:37,290 --> 00:43:41,160
<font color="#E5E5E5">this instruction we're highlighting all</font>

1204
00:43:39,210 --> 00:43:42,750
the<font color="#E5E5E5"> bits</font><font color="#CCCCCC"> that could be encoding eax</font>

1205
00:43:41,160 --> 00:43:45,420
<font color="#E5E5E5">and all the bits that could be encoding</font>

1206
00:43:42,750 --> 00:43:47,130
<font color="#E5E5E5">ECX so then it's going</font><font color="#CCCCCC"> to go through</font>

1207
00:43:45,420 --> 00:43:49,079
this<font color="#E5E5E5"> pattern and try to find out well</font>

1208
00:43:47,130 --> 00:43:49,980
<font color="#E5E5E5">what</font><font color="#CCCCCC"> are the commonalities across this</font>

1209
00:43:49,079 --> 00:43:51,780
entire<font color="#CCCCCC"> bin</font>

1210
00:43:49,980 --> 00:43:53,940
well it turns out<font color="#CCCCCC"> only these two Center</font>

1211
00:43:51,780 --> 00:43:55,619
columns are common for<font color="#E5E5E5"> all of these</font>

1212
00:43:53,940 --> 00:43:57,540
<font color="#E5E5E5">instructions so those must be the bits</font>

1213
00:43:55,619 --> 00:44:00,569
that<font color="#E5E5E5"> are actually used to encode these</font>

1214
00:43:57,540 --> 00:44:02,849
registers<font color="#CCCCCC"> it can do things like trying</font>

1215
00:44:00,569 --> 00:44:04,589
<font color="#CCCCCC">to extract the opcode bits from these</font>

1216
00:44:02,849 --> 00:44:07,920
these instructions so basically looking

1217
00:44:04,589 --> 00:44:11,430
<font color="#CCCCCC">at bits that are similar</font><font color="#E5E5E5"> across the</font>

1218
00:44:07,920 --> 00:44:13,109
entire entire bin and it's not a perfect

1219
00:44:11,430 --> 00:44:15,509
<font color="#CCCCCC">process you can see ideally what we</font>

1220
00:44:13,109 --> 00:44:17,339
would<font color="#E5E5E5"> like to see is all</font><font color="#CCCCCC"> of these</font>

1221
00:44:15,510 --> 00:44:19,440
<font color="#E5E5E5">instructions using perfectly consistent</font>

1222
00:44:17,339 --> 00:44:21,960
opcode bits but we don't see<font color="#E5E5E5"> that here</font>

1223
00:44:19,440 --> 00:44:23,460
<font color="#CCCCCC">we see these this top half using</font><font color="#E5E5E5"> pretty</font>

1224
00:44:21,960 --> 00:44:26,010
consistent opcode bits in the bottom

1225
00:44:23,460 --> 00:44:27,599
<font color="#CCCCCC">half</font><font color="#E5E5E5"> doing</font><font color="#CCCCCC"> some different</font><font color="#E5E5E5"> things what</font>

1226
00:44:26,010 --> 00:44:29,280
the collector<font color="#E5E5E5"> does is</font><font color="#CCCCCC"> address</font><font color="#E5E5E5"> tries to</font>

1227
00:44:27,599 --> 00:44:30,390
find<font color="#E5E5E5"> the most common patterns so it's</font>

1228
00:44:29,280 --> 00:44:32,670
<font color="#E5E5E5">going to say well we'll just use the</font>

1229
00:44:30,390 --> 00:44:33,960
patterns from this top half here<font color="#CCCCCC"> and</font>

1230
00:44:32,670 --> 00:44:36,720
we'll call these highlighted bits the

1231
00:44:33,960 --> 00:44:38,099
opcode bits we<font color="#E5E5E5"> can look for statistical</font>

1232
00:44:36,720 --> 00:44:40,230
patterns and bits in<font color="#CCCCCC"> order to find</font>

1233
00:44:38,099 --> 00:44:41,250
<font color="#CCCCCC">don't-care bits or bits that might</font><font color="#E5E5E5"> be</font>

1234
00:44:40,230 --> 00:44:42,569
doing something<font color="#CCCCCC"> that</font><font color="#E5E5E5"> we don't fully</font>

1235
00:44:41,250 --> 00:44:44,970
understand<font color="#E5E5E5"> and then it matches</font><font color="#CCCCCC"> all</font><font color="#E5E5E5"> this</font>

1236
00:44:42,569 --> 00:44:46,529
information together<font color="#E5E5E5"> in order to derive</font>

1237
00:44:44,970 --> 00:44:48,209
<font color="#E5E5E5">and coding for</font>

1238
00:44:46,530 --> 00:44:51,060
in this case register transfer

1239
00:44:48,210 --> 00:44:53,520
<font color="#E5E5E5">instructions so so basically this is</font>

1240
00:44:51,060 --> 00:44:54,960
<font color="#CCCCCC">what the collector ends up</font><font color="#E5E5E5"> finding for</font>

1241
00:44:53,520 --> 00:44:56,970
all of the individual primitives that<font color="#CCCCCC"> we</font>

1242
00:44:54,960 --> 00:44:58,530
might<font color="#E5E5E5"> want to implement in our assembly</font>

1243
00:44:56,970 --> 00:45:01,950
<font color="#E5E5E5">like the load global descriptor table</font>

1244
00:44:58,530 --> 00:45:03,330
and<font color="#E5E5E5"> move</font><font color="#CCCCCC"> it ends up with these a bit</font>

1245
00:45:01,950 --> 00:45:06,270
derived in<font color="#E5E5E5"> codings and it's not a</font>

1246
00:45:03,330 --> 00:45:08,730
perfect<font color="#E5E5E5"> process but for</font><font color="#CCCCCC"> all of the</font>

1247
00:45:06,270 --> 00:45:11,070
purposes we<font color="#CCCCCC"> need it for it</font><font color="#E5E5E5"> does all the</font>

1248
00:45:08,730 --> 00:45:12,960
work for<font color="#CCCCCC"> us</font><font color="#E5E5E5"> basically</font><font color="#CCCCCC"> and we end up</font><font color="#E5E5E5"> with</font>

1249
00:45:11,070 --> 00:45:14,880
this<font color="#E5E5E5"> this deeply embedded instruction</font>

1250
00:45:12,960 --> 00:45:15,930
set that<font color="#CCCCCC"> can</font><font color="#E5E5E5"> do exactly</font><font color="#CCCCCC"> what we need so</font>

1251
00:45:14,880 --> 00:45:17,160
there's some<font color="#E5E5E5"> more</font><font color="#CCCCCC"> information</font><font color="#E5E5E5"> in there</font>

1252
00:45:15,930 --> 00:45:18,540
if you're<font color="#E5E5E5"> curious about</font><font color="#CCCCCC"> exactly what</font>

1253
00:45:17,160 --> 00:45:21,529
these instructions look like but I

1254
00:45:18,540 --> 00:45:23,700
basically<font color="#CCCCCC"> threw all this stuff into a</font>

1255
00:45:21,530 --> 00:45:25,110
custom assembler for this<font color="#E5E5E5"> deeply</font>

1256
00:45:23,700 --> 00:45:27,480
embedded instruction set<font color="#CCCCCC"> that I called</font>

1257
00:45:25,110 --> 00:45:30,450
the dice assembler<font color="#E5E5E5"> basically it lets us</font>

1258
00:45:27,480 --> 00:45:33,180
write payloads in a higher level

1259
00:45:30,450 --> 00:45:35,970
<font color="#CCCCCC">assembly representation and then</font>

1260
00:45:33,180 --> 00:45:38,339
assemble them down into<font color="#E5E5E5"> their their raw</font>

1261
00:45:35,970 --> 00:45:39,930
<font color="#CCCCCC">form and</font><font color="#E5E5E5"> the assembler is going to wrap</font>

1262
00:45:38,340 --> 00:45:41,610
each of<font color="#E5E5E5"> those risk instructions in the</font>

1263
00:45:39,930 --> 00:45:44,879
x86<font color="#CCCCCC"> bridge instructions so that we can</font>

1264
00:45:41,610 --> 00:45:46,650
send it from<font color="#E5E5E5"> the x86 core over to over</font>

1265
00:45:44,880 --> 00:45:48,630
to the wrist core so at this point<font color="#E5E5E5"> our</font>

1266
00:45:46,650 --> 00:45:52,260
payload looks something like this

1267
00:45:48,630 --> 00:45:54,300
we used<font color="#E5E5E5"> RISC instruction</font><font color="#CCCCCC"> lgd in order to</font>

1268
00:45:52,260 --> 00:45:56,220
grab the global descriptor table<font color="#E5E5E5"> we use</font>

1269
00:45:54,300 --> 00:45:57,960
some<font color="#E5E5E5"> of our other instructions that we</font>

1270
00:45:56,220 --> 00:46:00,330
identified in order to pull out the FS

1271
00:45:57,960 --> 00:46:02,610
selector use some other<font color="#E5E5E5"> deeply embedded</font>

1272
00:46:00,330 --> 00:46:04,680
instructions in order<font color="#CCCCCC"> to parse that</font><font color="#E5E5E5"> we</font>

1273
00:46:02,610 --> 00:46:06,840
grab the pointer to the<font color="#CCCCCC"> task struct grab</font>

1274
00:46:04,680 --> 00:46:08,910
the pointer to the<font color="#E5E5E5"> cred struct and</font><font color="#CCCCCC"> then</font>

1275
00:46:06,840 --> 00:46:12,420
reach across kernel<font color="#CCCCCC"> privilege boundaries</font>

1276
00:46:08,910 --> 00:46:14,850
<font color="#E5E5E5">in order</font><font color="#CCCCCC"> to grant</font><font color="#E5E5E5"> ourselves root</font>

1277
00:46:12,420 --> 00:46:17,760
permissions so collectively our payload

1278
00:46:14,850 --> 00:46:19,380
<font color="#E5E5E5">looks something like this where on the</font>

1279
00:46:17,760 --> 00:46:20,280
<font color="#E5E5E5">left there at the top we're unlocking</font>

1280
00:46:19,380 --> 00:46:22,410
<font color="#CCCCCC">the backdoor</font>

1281
00:46:20,280 --> 00:46:24,420
using<font color="#E5E5E5"> that launch instruction and then</font>

1282
00:46:22,410 --> 00:46:26,490
we've got<font color="#E5E5E5"> all</font><font color="#CCCCCC"> of our bound instructions</font>

1283
00:46:24,420 --> 00:46:28,860
sending commands over to the<font color="#CCCCCC"> wrist</font><font color="#E5E5E5"> core</font>

1284
00:46:26,490 --> 00:46:32,609
<font color="#E5E5E5">before we finally launch launch a shell</font>

1285
00:46:28,860 --> 00:46:33,750
so<font color="#E5E5E5"> we can revisit this initial demo at</font>

1286
00:46:32,610 --> 00:46:36,000
this<font color="#E5E5E5"> point now</font><font color="#CCCCCC"> that we understand</font>

1287
00:46:33,750 --> 00:46:37,650
<font color="#E5E5E5">exactly how this this thing works</font><font color="#CCCCCC"> so</font>

1288
00:46:36,000 --> 00:46:41,970
basically what we saw at<font color="#CCCCCC"> the beginning</font>

1289
00:46:37,650 --> 00:46:44,790
<font color="#E5E5E5">was using the x86 launch instruction in</font>

1290
00:46:41,970 --> 00:46:46,620
<font color="#E5E5E5">order to activate the RISC core and then</font>

1291
00:46:44,790 --> 00:46:49,259
using all<font color="#E5E5E5"> these bound instructions in</font>

1292
00:46:46,620 --> 00:46:51,210
order<font color="#E5E5E5"> to send a specific commands over</font>

1293
00:46:49,260 --> 00:46:54,360
to the RISC course so our payload is

1294
00:46:51,210 --> 00:46:55,800
essentially encompass and and<font color="#E5E5E5"> immediate</font>

1295
00:46:54,360 --> 00:46:59,010
values in<font color="#E5E5E5"> these in these bound</font>

1296
00:46:55,800 --> 00:46:59,760
instructions<font color="#E5E5E5"> so effectively that's how</font>

1297
00:46:59,010 --> 00:47:03,030
when

1298
00:46:59,760 --> 00:47:05,790
we<font color="#E5E5E5"> compile this thing and run it we're</font>

1299
00:47:03,030 --> 00:47:07,350
able to reach across<font color="#E5E5E5"> the ring boundaries</font>

1300
00:47:05,790 --> 00:47:10,890
on the<font color="#E5E5E5"> processor in</font><font color="#CCCCCC"> order to grant</font>

1301
00:47:07,350 --> 00:47:11,790
ourselves route permission so I sort of

1302
00:47:10,890 --> 00:47:15,410
had this slide in here<font color="#E5E5E5"> as a</font>

1303
00:47:11,790 --> 00:47:18,930
tongue-in-cheek slide so at this<font color="#E5E5E5"> point</font>

1304
00:47:15,410 --> 00:47:20,910
<font color="#CCCCCC">the whole idea of</font><font color="#E5E5E5"> rings is becoming</font><font color="#CCCCCC"> very</font>

1305
00:47:18,930 --> 00:47:22,440
nebulous and<font color="#E5E5E5"> it's sort of silly to keep</font>

1306
00:47:20,910 --> 00:47:24,299
thinking<font color="#CCCCCC"> about are there deeper things</font>

1307
00:47:22,440 --> 00:47:26,670
and then ring<font color="#E5E5E5"> three but in a way this is</font>

1308
00:47:24,300 --> 00:47:28,260
<font color="#CCCCCC">sort of a ring</font><font color="#E5E5E5"> -</font><font color="#CCCCCC"> four it</font><font color="#E5E5E5"> can do a lot of</font>

1309
00:47:26,670 --> 00:47:31,250
<font color="#E5E5E5">things that things that we normally call</font>

1310
00:47:28,260 --> 00:47:33,750
<font color="#E5E5E5">ring - three can't do so for example</font>

1311
00:47:31,250 --> 00:47:35,910
from<font color="#E5E5E5"> this</font><font color="#CCCCCC"> deeply embedded core we have</font>

1312
00:47:33,750 --> 00:47:37,350
unrestricted<font color="#E5E5E5"> access to the x86 cores</font>

1313
00:47:35,910 --> 00:47:40,410
register file we've got a shared

1314
00:47:37,350 --> 00:47:41,790
execution pipeline<font color="#CCCCCC"> but at this</font><font color="#E5E5E5"> point</font>

1315
00:47:40,410 --> 00:47:43,890
like<font color="#CCCCCC"> I like I said it's sort of nebulous</font>

1316
00:47:41,790 --> 00:47:46,200
<font color="#E5E5E5">and the points moot whether or not this</font>

1317
00:47:43,890 --> 00:47:48,960
is any more<font color="#E5E5E5"> powerful</font><font color="#CCCCCC"> than</font><font color="#E5E5E5"> what we've</font>

1318
00:47:46,200 --> 00:47:51,089
seen<font color="#CCCCCC"> before but</font><font color="#E5E5E5"> but at the end</font><font color="#CCCCCC"> of the</font>

1319
00:47:48,960 --> 00:47:52,980
day this does give<font color="#CCCCCC"> us direct ring</font><font color="#E5E5E5"> three</font>

1320
00:47:51,090 --> 00:47:55,800
<font color="#CCCCCC">to ring</font><font color="#E5E5E5"> zero</font><font color="#CCCCCC"> hardware privilege</font>

1321
00:47:52,980 --> 00:47:58,800
escalation on x86 which to my knowledge

1322
00:47:55,800 --> 00:48:00,600
has<font color="#CCCCCC"> never publicly</font><font color="#E5E5E5"> been done before but</font>

1323
00:47:58,800 --> 00:48:02,460
fortunately we should still need ring

1324
00:48:00,600 --> 00:48:04,200
zero<font color="#E5E5E5"> access in order to activate this</font>

1325
00:48:02,460 --> 00:48:06,240
whole thing to begin<font color="#CCCCCC"> with remember we</font>

1326
00:48:04,200 --> 00:48:08,640
had to set that<font color="#E5E5E5"> god mode bit using one</font>

1327
00:48:06,240 --> 00:48:12,750
time ring<font color="#CCCCCC"> zero access on the processor</font>

1328
00:48:08,640 --> 00:48:15,060
<font color="#E5E5E5">at least theoretically it turns out that</font>

1329
00:48:12,750 --> 00:48:17,610
that's actually<font color="#E5E5E5"> not</font><font color="#CCCCCC"> the case</font><font color="#E5E5E5"> so what</font>

1330
00:48:15,060 --> 00:48:21,150
I've got<font color="#CCCCCC"> here is</font><font color="#E5E5E5"> a different</font><font color="#CCCCCC"> vs III</font>

1331
00:48:17,610 --> 00:48:23,850
<font color="#E5E5E5">processor this is Samuel</font><font color="#CCCCCC"> - core vs III</font>

1332
00:48:21,150 --> 00:48:25,530
and I'm freshly booting this system<font color="#E5E5E5"> so</font>

1333
00:48:23,850 --> 00:48:27,210
nothing<font color="#E5E5E5"> else</font><font color="#CCCCCC"> has run on</font><font color="#E5E5E5"> this system</font>

1334
00:48:25,530 --> 00:48:31,140
right now<font color="#E5E5E5"> and I'm just</font><font color="#CCCCCC"> going to</font><font color="#E5E5E5"> log in</font>

1335
00:48:27,210 --> 00:48:32,460
<font color="#CCCCCC">as a</font><font color="#E5E5E5"> regular user</font><font color="#CCCCCC"> and I</font><font color="#E5E5E5"> don't have</font><font color="#CCCCCC"> I</font>

1336
00:48:31,140 --> 00:48:34,440
don't have<font color="#E5E5E5"> the right tools installed on</font>

1337
00:48:32,460 --> 00:48:35,700
this<font color="#E5E5E5"> I don't</font><font color="#CCCCCC"> have read MSR and write MSR</font>

1338
00:48:34,440 --> 00:48:38,100
tools in order<font color="#E5E5E5"> to check these model</font>

1339
00:48:35,700 --> 00:48:42,089
specific registers but<font color="#E5E5E5"> what we can do is</font>

1340
00:48:38,100 --> 00:48:45,990
we can that's forward this<font color="#E5E5E5"> a little bit</font>

1341
00:48:42,090 --> 00:48:47,850
<font color="#E5E5E5">I can use</font><font color="#CCCCCC"> modprobe</font><font color="#E5E5E5"> to install the NSR</font>

1342
00:48:45,990 --> 00:48:49,740
kernel module<font color="#E5E5E5"> and then I can</font><font color="#CCCCCC"> use a hex</font>

1343
00:48:47,850 --> 00:48:52,560
dump in order to look<font color="#E5E5E5"> at that global</font>

1344
00:48:49,740 --> 00:48:54,319
configuration register MSR number 1107

1345
00:48:52,560 --> 00:48:56,100
so I'm going<font color="#E5E5E5"> to dump out</font><font color="#CCCCCC"> the context</font>

1346
00:48:54,320 --> 00:48:58,320
<font color="#E5E5E5">contents of the global configuration</font>

1347
00:48:56,100 --> 00:49:01,380
register<font color="#E5E5E5"> and if you look closely at the</font>

1348
00:48:58,320 --> 00:49:03,750
low byte of that register<font color="#E5E5E5"> it's d7 the</font>

1349
00:49:01,380 --> 00:49:06,330
low<font color="#E5E5E5"> four bits the</font><font color="#CCCCCC"> little nibble is 0 1 1</font>

1350
00:49:03,750 --> 00:49:09,480
<font color="#CCCCCC">1 that means</font><font color="#E5E5E5"> that the low bit the god</font>

1351
00:49:06,330 --> 00:49:11,850
<font color="#E5E5E5">mode bit on this system is is wine</font><font color="#CCCCCC"> this</font>

1352
00:49:09,480 --> 00:49:13,620
system just<font color="#E5E5E5"> freshly booted but the god</font>

1353
00:49:11,850 --> 00:49:16,380
mode bit is already at

1354
00:49:13,620 --> 00:49:18,450
by<font color="#E5E5E5"> default that means on this system any</font>

1355
00:49:16,380 --> 00:49:20,420
<font color="#E5E5E5">unprivileged user can escalate to the</font>

1356
00:49:18,450 --> 00:49:23,960
<font color="#CCCCCC">kernel at any time without ever needing</font>

1357
00:49:20,420 --> 00:49:26,760
initial ring<font color="#E5E5E5"> zero access on</font><font color="#CCCCCC"> that system</font>

1358
00:49:23,960 --> 00:49:29,310
<font color="#E5E5E5">so that's that's a scary prospect</font>

1359
00:49:26,760 --> 00:49:31,800
because<font color="#E5E5E5"> when you totally break down the</font>

1360
00:49:29,310 --> 00:49:33,960
the ring<font color="#E5E5E5"> privilege model on x86 when you</font>

1361
00:49:31,800 --> 00:49:35,310
can<font color="#E5E5E5"> just bypass</font><font color="#CCCCCC"> that arbitrarily all the</font>

1362
00:49:33,960 --> 00:49:37,830
other defenses that<font color="#E5E5E5"> we have ever</font>

1363
00:49:35,310 --> 00:49:40,020
<font color="#CCCCCC">developed for for these</font><font color="#E5E5E5"> systems become</font>

1364
00:49:37,830 --> 00:49:43,529
obsolete<font color="#CCCCCC"> like antivirus does nothing</font>

1365
00:49:40,020 --> 00:49:45,240
anymore<font color="#CCCCCC"> aslr</font><font color="#E5E5E5"> depth they don't help you</font>

1366
00:49:43,530 --> 00:49:47,010
<font color="#E5E5E5">when you can just reach directly</font><font color="#CCCCCC"> into</font>

1367
00:49:45,240 --> 00:49:48,959
ring<font color="#E5E5E5"> zero things like</font><font color="#CCCCCC"> code signing</font>

1368
00:49:47,010 --> 00:49:51,240
control flow integrity kernel integrity

1369
00:49:48,960 --> 00:49:52,770
checks are all sort<font color="#E5E5E5"> of blown</font><font color="#CCCCCC"> away</font><font color="#E5E5E5"> when</font>

1370
00:49:51,240 --> 00:49:55,080
there's no more<font color="#E5E5E5"> boundaries when there's</font>

1371
00:49:52,770 --> 00:49:57,690
no more separation between ring<font color="#CCCCCC"> 3 and</font>

1372
00:49:55,080 --> 00:49:58,860
and<font color="#CCCCCC"> rings 0</font><font color="#E5E5E5"> there are some mitigations</font>

1373
00:49:57,690 --> 00:50:00,510
we could consider<font color="#CCCCCC"> for something like</font>

1374
00:49:58,860 --> 00:50:01,980
this<font color="#CCCCCC"> you could try to update</font><font color="#E5E5E5"> the</font>

1375
00:50:00,510 --> 00:50:03,870
<font color="#CCCCCC">microcode on the</font><font color="#E5E5E5"> system to lock down</font>

1376
00:50:01,980 --> 00:50:05,700
that<font color="#E5E5E5"> god mode bit so that it wasn't</font>

1377
00:50:03,870 --> 00:50:08,460
active by default<font color="#CCCCCC"> you could update</font><font color="#E5E5E5"> the</font>

1378
00:50:05,700 --> 00:50:09,600
<font color="#E5E5E5">microcode to disable</font><font color="#CCCCCC"> new code assists on</font>

1379
00:50:08,460 --> 00:50:11,070
<font color="#E5E5E5">the bridge instruction so that</font><font color="#CCCCCC"> you</font>

1380
00:50:09,600 --> 00:50:13,950
<font color="#E5E5E5">couldn't send commands over to the</font>

1381
00:50:11,070 --> 00:50:15,660
<font color="#E5E5E5">deeply embedded core updating</font><font color="#CCCCCC"> micro</font><font color="#E5E5E5"> code</font>

1382
00:50:13,950 --> 00:50:17,399
is kind of cumbersome and not

1383
00:50:15,660 --> 00:50:18,899
necessarily the best solution it could

1384
00:50:17,400 --> 00:50:21,000
also be<font color="#E5E5E5"> possible</font><font color="#CCCCCC"> to update</font><font color="#E5E5E5"> your</font>

1385
00:50:18,900 --> 00:50:22,530
operating system<font color="#E5E5E5"> and firmware to disable</font>

1386
00:50:21,000 --> 00:50:24,450
this<font color="#E5E5E5"> god mode bit and then periodically</font>

1387
00:50:22,530 --> 00:50:28,020
check it to<font color="#CCCCCC"> make sure</font><font color="#E5E5E5"> nobody's activated</font>

1388
00:50:24,450 --> 00:50:29,850
it<font color="#CCCCCC"> but but at the end</font><font color="#E5E5E5"> of the day those</font>

1389
00:50:28,020 --> 00:50:32,220
are<font color="#E5E5E5"> probably not necessary this is a</font>

1390
00:50:29,850 --> 00:50:33,660
very old processor and it was never in

1391
00:50:32,220 --> 00:50:36,480
very widespread<font color="#E5E5E5"> use at least not in</font>

1392
00:50:33,660 --> 00:50:42,480
computers<font color="#E5E5E5"> or things like pcs and laptops</font>

1393
00:50:36,480 --> 00:50:44,820
it's not not terribly common<font color="#E5E5E5"> so and and</font>

1394
00:50:42,480 --> 00:50:47,190
<font color="#CCCCCC">I don't</font><font color="#E5E5E5"> want to throw vea under the bus</font>

1395
00:50:44,820 --> 00:50:49,200
here<font color="#CCCCCC"> their target market with this</font>

1396
00:50:47,190 --> 00:50:50,490
processor was embedded<font color="#CCCCCC"> I don't think</font>

1397
00:50:49,200 --> 00:50:52,710
they were doing<font color="#CCCCCC"> anything malicious with</font>

1398
00:50:50,490 --> 00:50:54,450
this feature<font color="#CCCCCC"> I think this was probably a</font>

1399
00:50:52,710 --> 00:50:57,090
useful feature<font color="#CCCCCC"> for their customers</font><font color="#E5E5E5"> and</font>

1400
00:50:54,450 --> 00:50:59,299
just<font color="#E5E5E5"> had a very poor</font><font color="#CCCCCC"> implementation with</font>

1401
00:50:57,090 --> 00:51:01,410
a lot of very unintended<font color="#CCCCCC"> side-effects</font>

1402
00:50:59,300 --> 00:51:03,360
<font color="#CCCCCC">and then I think</font><font color="#E5E5E5"> the part where it gets</font>

1403
00:51:01,410 --> 00:51:04,649
<font color="#E5E5E5">really interesting is after I released</font>

1404
00:51:03,360 --> 00:51:06,180
<font color="#E5E5E5">this research some people in the</font>

1405
00:51:04,650 --> 00:51:08,970
community<font color="#CCCCCC"> we're actually able to</font><font color="#E5E5E5"> dig up</font>

1406
00:51:06,180 --> 00:51:10,350
an old<font color="#CCCCCC"> datasheet for for this processor</font>

1407
00:51:08,970 --> 00:51:13,649
so it's not<font color="#E5E5E5"> actually directly available</font>

1408
00:51:10,350 --> 00:51:16,650
<font color="#E5E5E5">from via it's available on</font><font color="#CCCCCC"> on an</font><font color="#E5E5E5"> archive</font>

1409
00:51:13,650 --> 00:51:19,110
<font color="#E5E5E5">datasheet website along with</font><font color="#CCCCCC"> a bunch</font><font color="#E5E5E5"> of</font>

1410
00:51:16,650 --> 00:51:20,850
other<font color="#E5E5E5"> ND aid via documents which makes</font>

1411
00:51:19,110 --> 00:51:22,470
me think<font color="#CCCCCC"> that this was never released</font><font color="#E5E5E5"> to</font>

1412
00:51:20,850 --> 00:51:23,940
the<font color="#CCCCCC"> public to begin with but buried in</font>

1413
00:51:22,470 --> 00:51:27,230
<font color="#E5E5E5">that datasheet</font><font color="#CCCCCC"> there's</font><font color="#E5E5E5"> sort of this</font>

1414
00:51:23,940 --> 00:51:28,280
passing<font color="#CCCCCC"> mention</font><font color="#E5E5E5"> to a MSR</font><font color="#CCCCCC"> 11</font>

1415
00:51:27,230 --> 00:51:30,380
<font color="#E5E5E5">seven that's the MSR that were</font>

1416
00:51:28,280 --> 00:51:32,420
interested in bed zero as activating<font color="#E5E5E5"> an</font>

1417
00:51:30,380 --> 00:51:33,440
alternate instruction set so what what I

1418
00:51:32,420 --> 00:51:35,300
was calling a deeply embedded

1419
00:51:33,440 --> 00:51:38,660
<font color="#E5E5E5">instruction said they're calling the</font>

1420
00:51:35,300 --> 00:51:40,100
alternate<font color="#CCCCCC"> instructions said</font><font color="#E5E5E5"> so but then</font>

1421
00:51:38,660 --> 00:51:41,660
they go on<font color="#E5E5E5"> to basically say if you have</font>

1422
00:51:40,100 --> 00:51:43,160
a justified need to<font color="#CCCCCC"> access these</font>

1423
00:51:41,660 --> 00:51:45,049
instructions<font color="#CCCCCC"> you</font><font color="#E5E5E5"> need to contact your</font>

1424
00:51:43,160 --> 00:51:47,779
<font color="#E5E5E5">via representative so basically for</font><font color="#CCCCCC"> all</font>

1425
00:51:45,050 --> 00:51:49,730
<font color="#E5E5E5">intents</font><font color="#CCCCCC"> and purposes this was</font>

1426
00:51:47,780 --> 00:51:51,950
undocumented that<font color="#E5E5E5"> might have helped us</font>

1427
00:51:49,730 --> 00:51:54,140
save<font color="#E5E5E5"> about</font><font color="#CCCCCC"> 25 percent of the research if</font>

1428
00:51:51,950 --> 00:51:55,460
we had known which MSR bit<font color="#E5E5E5"> to uh to</font>

1429
00:51:54,140 --> 00:51:57,350
start<font color="#E5E5E5"> with but</font><font color="#CCCCCC"> I think this</font><font color="#E5E5E5"> does</font><font color="#CCCCCC"> make it</font>

1430
00:51:55,460 --> 00:51:58,250
<font color="#E5E5E5">look good</font><font color="#CCCCCC"> for a for via kind of shows</font>

1431
00:51:57,350 --> 00:51:59,299
that<font color="#E5E5E5"> this was</font><font color="#CCCCCC"> not malicious</font>

1432
00:51:58,250 --> 00:52:01,700
functionality

1433
00:51:59,300 --> 00:52:04,580
it's a<font color="#E5E5E5"> functionality with unintended</font>

1434
00:52:01,700 --> 00:52:06,259
<font color="#E5E5E5">side</font><font color="#CCCCCC"> effects so at the</font><font color="#E5E5E5"> end I think</font><font color="#CCCCCC"> we</font>

1435
00:52:04,580 --> 00:52:09,020
should take this sort<font color="#CCCCCC"> of as a case study</font>

1436
00:52:06,260 --> 00:52:11,900
the reality is<font color="#E5E5E5"> that</font><font color="#CCCCCC"> doors do exist</font><font color="#E5E5E5"> it's</font>

1437
00:52:09,020 --> 00:52:14,869
not just conspiracy theory<font color="#E5E5E5"> stuff this is</font>

1438
00:52:11,900 --> 00:52:17,270
a real problem<font color="#E5E5E5"> but</font><font color="#CCCCCC"> even when we're</font>

1439
00:52:14,869 --> 00:52:20,000
dealing with<font color="#CCCCCC"> blackbox systems</font><font color="#E5E5E5"> we do have</font>

1440
00:52:17,270 --> 00:52:23,240
the capabilities to<font color="#E5E5E5"> find these kinds of</font>

1441
00:52:20,000 --> 00:52:26,300
<font color="#CCCCCC">things so so sort</font><font color="#E5E5E5"> of looking looking</font>

1442
00:52:23,240 --> 00:52:29,629
forward<font color="#E5E5E5"> even though this is</font><font color="#CCCCCC"> just one old</font>

1443
00:52:26,300 --> 00:52:31,850
<font color="#CCCCCC">chip I think the the idea of hardware</font>

1444
00:52:29,630 --> 00:52:33,830
backdoors is absolutely devastating<font color="#CCCCCC"> and</font>

1445
00:52:31,850 --> 00:52:36,740
sort<font color="#E5E5E5"> of forces us to</font><font color="#CCCCCC"> rethink</font><font color="#E5E5E5"> our</font><font color="#CCCCCC"> our</font>

1446
00:52:33,830 --> 00:52:38,779
models<font color="#CCCCCC"> on on security so that's that's</font>

1447
00:52:36,740 --> 00:52:41,270
sort<font color="#E5E5E5"> of where I want to leave this as</font>

1448
00:52:38,780 --> 00:52:43,850
basically<font color="#E5E5E5"> a thought experiment on what</font>

1449
00:52:41,270 --> 00:52:46,369
<font color="#CCCCCC">backdoors might look like</font><font color="#E5E5E5"> and how we</font>

1450
00:52:43,850 --> 00:52:50,270
<font color="#E5E5E5">might find them even</font><font color="#CCCCCC"> in a black box</font>

1451
00:52:46,369 --> 00:52:53,240
approach<font color="#E5E5E5"> and because I I do think like</font>

1452
00:52:50,270 --> 00:52:55,160
<font color="#E5E5E5">this this is a really big problem</font><font color="#CCCCCC"> this</font>

1453
00:52:53,240 --> 00:52:57,919
<font color="#E5E5E5">isn't just a c3 problem it's not just a</font>

1454
00:52:55,160 --> 00:52:58,970
via problem it's not just an x86 problem

1455
00:52:57,920 --> 00:53:00,220
I think<font color="#CCCCCC"> this is a</font><font color="#E5E5E5"> problem that sort of</font>

1456
00:52:58,970 --> 00:53:03,980
pervades all of<font color="#E5E5E5"> computer engineering</font>

1457
00:53:00,220 --> 00:53:05,509
<font color="#E5E5E5">that that these these pieces of hardware</font>

1458
00:53:03,980 --> 00:53:07,490
<font color="#E5E5E5">that we are trusting to do all of our</font>

1459
00:53:05,510 --> 00:53:09,290
computation and hold all of our secret

1460
00:53:07,490 --> 00:53:10,669
secrets we have we have no way of

1461
00:53:09,290 --> 00:53:12,830
introspecting them we have no<font color="#E5E5E5"> way to</font>

1462
00:53:10,670 --> 00:53:16,070
<font color="#E5E5E5">make sure they're actually doing what we</font>

1463
00:53:12,830 --> 00:53:18,529
think<font color="#E5E5E5"> they're</font><font color="#CCCCCC"> doing</font><font color="#E5E5E5"> so I think whether</font>

1464
00:53:16,070 --> 00:53:19,550
<font color="#E5E5E5">or not Hardware backdoors exist in other</font>

1465
00:53:18,530 --> 00:53:22,070
things

1466
00:53:19,550 --> 00:53:23,420
the<font color="#E5E5E5"> possibility is going to continue to</font>

1467
00:53:22,070 --> 00:53:26,300
haunt<font color="#E5E5E5"> us until we have</font><font color="#CCCCCC"> a way of</font>

1468
00:53:23,420 --> 00:53:28,250
introspecting<font color="#E5E5E5"> our hardware so I don't</font>

1469
00:53:26,300 --> 00:53:29,630
know what the answer is<font color="#CCCCCC"> to this but I</font>

1470
00:53:28,250 --> 00:53:31,940
can tell<font color="#E5E5E5"> you like the patents that I was</font>

1471
00:53:29,630 --> 00:53:33,410
looking at or that<font color="#CCCCCC"> I that I showed</font><font color="#E5E5E5"> here</font>

1472
00:53:31,940 --> 00:53:35,570
are<font color="#E5E5E5"> really just the tip of the iceberg</font>

1473
00:53:33,410 --> 00:53:37,279
<font color="#E5E5E5">there are a lot of scary</font><font color="#CCCCCC"> things</font><font color="#E5E5E5"> just</font>

1474
00:53:35,570 --> 00:53:39,619
sort<font color="#CCCCCC"> of casually hinted at and some</font><font color="#E5E5E5"> of</font>

1475
00:53:37,280 --> 00:53:41,119
the patents<font color="#CCCCCC"> that I was coming across</font><font color="#E5E5E5"> so</font>

1476
00:53:39,619 --> 00:53:43,999
what I what I hope is

1477
00:53:41,119 --> 00:53:45,499
<font color="#E5E5E5">sort of moving</font><font color="#CCCCCC"> forward that but what</font>

1478
00:53:43,999 --> 00:53:47,269
<font color="#E5E5E5">we'll do as a security community is</font>

1479
00:53:45,499 --> 00:53:48,919
really any time we<font color="#CCCCCC"> see a</font><font color="#E5E5E5"> secretive</font>

1480
00:53:47,269 --> 00:53:50,749
feature or something<font color="#CCCCCC"> that's not fully</font>

1481
00:53:48,920 --> 00:53:52,369
documented that<font color="#E5E5E5"> should be a big red</font><font color="#CCCCCC"> flag</font>

1482
00:53:50,749 --> 00:53:54,709
that<font color="#E5E5E5"> should be something that we push</font>

1483
00:53:52,369 --> 00:53:55,730
harder<font color="#CCCCCC"> on and dig deeper into</font><font color="#E5E5E5"> because</font>

1484
00:53:54,710 --> 00:53:57,920
that's sort<font color="#CCCCCC"> of how we can</font><font color="#E5E5E5"> start to</font>

1485
00:53:55,730 --> 00:53:59,119
<font color="#CCCCCC">actually</font><font color="#E5E5E5"> build trust in these</font><font color="#CCCCCC"> and these</font>

1486
00:53:57,920 --> 00:54:00,980
<font color="#E5E5E5">systems that's how we can start to</font>

1487
00:53:59,119 --> 00:54:04,849
overcome this problem<font color="#E5E5E5"> of black box</font>

1488
00:54:00,980 --> 00:54:06,829
<font color="#E5E5E5">hardware so so along those lines</font><font color="#CCCCCC"> I open</font>

1489
00:54:04,849 --> 00:54:09,650
sourced all of this as what I'm calling

1490
00:54:06,829 --> 00:54:11,210
<font color="#E5E5E5">project Rosen bridge basically all the</font>

1491
00:54:09,650 --> 00:54:13,640
tools and techniques<font color="#E5E5E5"> the code and the</font>

1492
00:54:11,210 --> 00:54:15,890
<font color="#E5E5E5">data that I've Illustrated here are now</font>

1493
00:54:13,640 --> 00:54:17,390
available<font color="#CCCCCC"> online and I'm really</font><font color="#E5E5E5"> hoping</font>

1494
00:54:15,890 --> 00:54:19,098
<font color="#CCCCCC">that people will</font><font color="#E5E5E5"> be able</font><font color="#CCCCCC"> to use this as</font>

1495
00:54:17,390 --> 00:54:21,379
sort of a jumping-off point for a deeper

1496
00:54:19,099 --> 00:54:23,269
processor security research<font color="#E5E5E5"> I think</font><font color="#CCCCCC"> a</font>

1497
00:54:21,380 --> 00:54:25,339
lot<font color="#CCCCCC"> of the ideas</font><font color="#E5E5E5"> shown</font><font color="#CCCCCC"> here</font><font color="#E5E5E5"> are not</font>

1498
00:54:23,269 --> 00:54:27,140
unique to the VSC<font color="#CCCCCC"> three there</font><font color="#E5E5E5"> are things</font>

1499
00:54:25,339 --> 00:54:29,269
that we can apply<font color="#E5E5E5"> to modern processors</font>

1500
00:54:27,140 --> 00:54:32,990
right now and I hope that<font color="#E5E5E5"> we can use</font>

1501
00:54:29,269 --> 00:54:35,118
these<font color="#E5E5E5"> to sort of dig deeper</font><font color="#CCCCCC"> and see what</font>

1502
00:54:32,990 --> 00:54:37,399
processors are really<font color="#CCCCCC"> doing so</font><font color="#E5E5E5"> all of</font>

1503
00:54:35,119 --> 00:54:40,789
this is available on github<font color="#E5E5E5"> github comm</font>

1504
00:54:37,400 --> 00:54:43,160
<font color="#E5E5E5">I handle this X or</font><font color="#CCCCCC"> Y ax</font><font color="#E5E5E5"> e ax e ax this</font>

1505
00:54:40,789 --> 00:54:44,390
is called project Rosen bridge<font color="#CCCCCC"> there's</font>

1506
00:54:43,160 --> 00:54:46,279
some other<font color="#E5E5E5"> interesting stuff on there</font>

1507
00:54:44,390 --> 00:54:48,410
like we used the sand<font color="#CCCCCC"> sifter scanning</font>

1508
00:54:46,279 --> 00:54:50,420
tool<font color="#E5E5E5"> throughout this research so that's</font>

1509
00:54:48,410 --> 00:54:53,509
all open<font color="#CCCCCC"> source down there as well I</font>

1510
00:54:50,420 --> 00:54:54,920
just<font color="#CCCCCC"> uploaded</font><font color="#E5E5E5"> a</font><font color="#CCCCCC"> bunch of fun projects</font>

1511
00:54:53,509 --> 00:54:57,170
<font color="#E5E5E5">from the past</font><font color="#CCCCCC"> they're on there's a</font>

1512
00:54:54,920 --> 00:55:00,259
single instruction compiler some neat

1513
00:54:57,170 --> 00:55:01,789
controls flow stuff another x86 exploit

1514
00:55:00,259 --> 00:55:03,650
<font color="#E5E5E5">from a few years</font><font color="#CCCCCC"> back oh</font><font color="#E5E5E5"> that's on there</font>

1515
00:55:01,789 --> 00:55:05,720
and<font color="#E5E5E5"> I really hope people will look at</font>

1516
00:55:03,650 --> 00:55:07,819
<font color="#CCCCCC">that and and more importantly</font><font color="#E5E5E5"> build off</font>

1517
00:55:05,720 --> 00:55:10,189
of<font color="#E5E5E5"> it to sort</font><font color="#CCCCCC"> of see where we</font><font color="#E5E5E5"> can take</font>

1518
00:55:07,819 --> 00:55:11,509
these these possibilities<font color="#E5E5E5"> so I really</font>

1519
00:55:10,190 --> 00:55:13,910
love talking about<font color="#E5E5E5"> this stuff if you've</font>

1520
00:55:11,509 --> 00:55:16,339
got any feedback<font color="#E5E5E5"> or ideas on this or any</font>

1521
00:55:13,910 --> 00:55:18,140
<font color="#E5E5E5">of the other research</font><font color="#CCCCCC"> that I showed I'd</font>

1522
00:55:16,339 --> 00:55:19,940
love to talk<font color="#CCCCCC"> to</font><font color="#E5E5E5"> you about it either over</font>

1523
00:55:18,140 --> 00:55:21,828
lunch which is<font color="#CCCCCC"> coming up in just two</font>

1524
00:55:19,940 --> 00:55:24,140
<font color="#CCCCCC">minutes now or you can</font><font color="#E5E5E5"> reach out</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> me</font>

1525
00:55:21,829 --> 00:55:26,720
<font color="#CCCCCC">on Twitter</font><font color="#E5E5E5"> again</font><font color="#CCCCCC"> my handles X or Y ax e</font>

1526
00:55:24,140 --> 00:55:27,739
ax<font color="#E5E5E5"> e ax for same thing at gmail.com or</font>

1527
00:55:26,720 --> 00:55:31,009
of course<font color="#E5E5E5"> I'll be around the conference</font>

1528
00:55:27,739 --> 00:55:33,140
<font color="#E5E5E5">for the rest of the the next two days so</font>

1529
00:55:31,009 --> 00:55:36,339
<font color="#E5E5E5">so thanks everyone for attending and I</font>

1530
00:55:33,140 --> 00:55:36,339
think it's a<font color="#CCCCCC"> lunchtime now</font>

1531
00:55:37,190 --> 00:55:39,250
<font color="#E5E5E5">you</font>

