1
00:00:09,540 --> 00:00:13,950
thank you my<font color="#CCCCCC"> name is Ronnie</font><font color="#E5E5E5"> I'm a</font>

2
00:00:11,970 --> 00:00:16,670
<font color="#E5E5E5">security researcher I'm really excited</font>

3
00:00:13,950 --> 00:00:19,590
to be here<font color="#CCCCCC"> attacking the Box Singapore</font>

4
00:00:16,670 --> 00:00:22,920
today<font color="#CCCCCC"> I</font><font color="#E5E5E5"> will</font><font color="#CCCCCC"> speak about the road to our</font>

5
00:00:19,590 --> 00:00:26,910
sandbox escape<font color="#E5E5E5"> my main goal is</font><font color="#CCCCCC"> to</font>

6
00:00:22,920 --> 00:00:29,640
deliver<font color="#E5E5E5"> you guys how</font><font color="#CCCCCC"> I OS is exactly</font>

7
00:00:26,910 --> 00:00:34,309
like any other platform<font color="#CCCCCC"> closed</font><font color="#E5E5E5"> platform</font>

8
00:00:29,640 --> 00:00:37,739
<font color="#CCCCCC">of</font><font color="#E5E5E5"> course in the aspect of research and</font>

9
00:00:34,309 --> 00:00:43,500
my<font color="#E5E5E5"> results with my first research I</font>

10
00:00:37,739 --> 00:00:45,720
conducted over iOS so I actually started

11
00:00:43,500 --> 00:00:47,760
with really lack of experience<font color="#E5E5E5"> in that</font><font color="#CCCCCC"> I</font>

12
00:00:45,720 --> 00:00:56,390
was filled so what I did was<font color="#CCCCCC"> just</font>

13
00:00:47,760 --> 00:00:59,339
starting to<font color="#CCCCCC"> read a book and go ahead</font><font color="#E5E5E5"> so</font>

14
00:00:56,390 --> 00:01:04,409
what are we going to<font color="#E5E5E5"> cover today we will</font>

15
00:00:59,339 --> 00:01:07,140
cover<font color="#E5E5E5"> briefly short introduction to iOS</font>

16
00:01:04,409 --> 00:01:09,570
some terms we<font color="#CCCCCC"> need to make sure</font><font color="#E5E5E5"> we all</font>

17
00:01:07,140 --> 00:01:12,390
<font color="#CCCCCC">know I was</font><font color="#E5E5E5"> concerned ization also known</font>

18
00:01:09,570 --> 00:01:15,089
as the<font color="#CCCCCC"> set</font><font color="#E5E5E5"> box with will be</font><font color="#CCCCCC"> they'll be</font>

19
00:01:12,390 --> 00:01:16,800
<font color="#CCCCCC">talked about the shared cache and we'll</font>

20
00:01:15,090 --> 00:01:18,990
speak about<font color="#E5E5E5"> lunch</font><font color="#CCCCCC"> day and mash messages</font>

21
00:01:16,800 --> 00:01:21,780
which<font color="#E5E5E5"> are important for</font><font color="#CCCCCC"> the</font><font color="#E5E5E5"> research I</font>

22
00:01:18,990 --> 00:01:24,929
conducted and basically for<font color="#E5E5E5"> any research</font>

23
00:01:21,780 --> 00:01:29,730
you<font color="#CCCCCC"> will probably</font><font color="#E5E5E5"> have an iOS and we</font>

24
00:01:24,930 --> 00:01:32,580
will go and dive into<font color="#E5E5E5"> the two approaches</font>

25
00:01:29,730 --> 00:01:34,350
ahead for finding sandbox escape we will

26
00:01:32,580 --> 00:01:37,289
<font color="#E5E5E5">understand what</font><font color="#CCCCCC"> is the end of escape</font><font color="#E5E5E5"> and</font>

27
00:01:34,350 --> 00:01:39,570
whether it's<font color="#E5E5E5"> going to be ETA soon from</font>

28
00:01:37,290 --> 00:01:42,740
those vulnerabilities<font color="#E5E5E5"> because this is</font>

29
00:01:39,570 --> 00:01:45,839
the most important part<font color="#E5E5E5"> for some people</font>

30
00:01:42,740 --> 00:01:49,649
and if<font color="#E5E5E5"> we will</font><font color="#CCCCCC"> have time</font><font color="#E5E5E5"> I think</font><font color="#CCCCCC"> we'll</font>

31
00:01:45,840 --> 00:01:53,640
there will have questions<font color="#CCCCCC"> so where</font><font color="#E5E5E5"> am I</font>

32
00:01:49,650 --> 00:01:55,530
<font color="#E5E5E5">in Moe didn't security researcher and</font>

33
00:01:53,640 --> 00:01:58,500
director of<font color="#E5E5E5"> platform research at the</font>

34
00:01:55,530 --> 00:02:02,040
<font color="#E5E5E5">Imperium dilip's team</font><font color="#CCCCCC"> I best in</font><font color="#E5E5E5"> Tel Aviv</font>

35
00:01:58,500 --> 00:02:06,020
<font color="#CCCCCC">right now and in</font><font color="#E5E5E5"> Israel and I am an</font><font color="#CCCCCC"> iOS</font>

36
00:02:02,040 --> 00:02:08,489
researcher the difference for<font color="#E5E5E5"> me is that</font>

37
00:02:06,020 --> 00:02:10,709
this<font color="#CCCCCC"> is really</font><font color="#E5E5E5"> a new field for me</font><font color="#CCCCCC"> I</font>

38
00:02:08,489 --> 00:02:15,200
<font color="#CCCCCC">never did anything with mobile platforms</font>

39
00:02:10,709 --> 00:02:15,200
so I was was the first time

40
00:02:16,010 --> 00:02:24,840
so what is<font color="#E5E5E5"> iOS that the overall time we</font>

41
00:02:22,019 --> 00:02:27,120
need<font color="#E5E5E5"> to know it was evolved from OS 6</font>

42
00:02:24,840 --> 00:02:30,780
and is based<font color="#CCCCCC"> upon the Dobbin operating</font>

43
00:02:27,120 --> 00:02:34,379
system in many ways it<font color="#CCCCCC"> is similar to all</font>

44
00:02:30,780 --> 00:02:36,840
the other OS devices TV OS<font color="#CCCCCC"> Mac OS watch</font>

45
00:02:34,379 --> 00:02:39,510
OS but<font color="#E5E5E5"> is slightly different in many</font>

46
00:02:36,840 --> 00:02:42,000
aspects<font color="#E5E5E5"> it is</font><font color="#CCCCCC"> built upon the X and keep</font>

47
00:02:39,510 --> 00:02:46,888
xnu kernel<font color="#E5E5E5"> which is basically open</font>

48
00:02:42,000 --> 00:02:54,000
sourced<font color="#E5E5E5"> and</font><font color="#CCCCCC"> it is strictly enforces the</font>

49
00:02:46,889 --> 00:02:58,019
notorious sandbox that means you can you

50
00:02:54,000 --> 00:03:00,719
there is the notorious jail and from the

51
00:02:58,019 --> 00:03:03,419
<font color="#CCCCCC">jail community there</font><font color="#E5E5E5"> is the jailbreak</font>

52
00:03:00,719 --> 00:03:06,000
<font color="#CCCCCC">process which basically gives you</font><font color="#E5E5E5"> read</font>

53
00:03:03,419 --> 00:03:08,969
and write<font color="#CCCCCC"> you know that</font><font color="#E5E5E5"> jailbreak means</font>

54
00:03:06,000 --> 00:03:12,090
that you will<font color="#E5E5E5"> have full execute and</font>

55
00:03:08,969 --> 00:03:15,959
<font color="#E5E5E5">write over</font><font color="#CCCCCC"> the system partition it is</font>

56
00:03:12,090 --> 00:03:18,209
done in many<font color="#E5E5E5"> different ways and this</font><font color="#CCCCCC"> is</font>

57
00:03:15,959 --> 00:03:22,739
not<font color="#CCCCCC"> the case</font><font color="#E5E5E5"> of my talk</font><font color="#CCCCCC"> today</font><font color="#E5E5E5"> I will</font>

58
00:03:18,209 --> 00:03:25,440
cover only the sandbox escape aspect so

59
00:03:22,739 --> 00:03:27,389
basically on the design of<font color="#CCCCCC"> the operating</font>

60
00:03:25,440 --> 00:03:29,478
system and<font color="#CCCCCC"> again</font><font color="#E5E5E5"> this is only redundant</font>

61
00:03:27,389 --> 00:03:32,760
image of the operating system you can

62
00:03:29,479 --> 00:03:35,400
roughly divide it into<font color="#CCCCCC"> 3 parts</font><font color="#E5E5E5"> you have</font>

63
00:03:32,760 --> 00:03:40,519
<font color="#E5E5E5">the application</font><font color="#CCCCCC"> the core services I will</font>

64
00:03:35,400 --> 00:03:44,069
also call it brokers and the kernel and

65
00:03:40,519 --> 00:03:45,750
<font color="#E5E5E5">let's take YouTube for an example all</font><font color="#CCCCCC"> of</font>

66
00:03:44,069 --> 00:03:48,689
the all<font color="#CCCCCC"> of the application side</font>

67
00:03:45,750 --> 00:03:51,120
basically<font color="#E5E5E5"> means</font><font color="#CCCCCC"> that untrusted code by</font>

68
00:03:48,689 --> 00:03:53,819
<font color="#E5E5E5">the operating</font><font color="#CCCCCC"> system which is being</font>

69
00:03:51,120 --> 00:03:57,389
<font color="#E5E5E5">executed</font><font color="#CCCCCC"> under</font><font color="#E5E5E5"> really restricted sandbox</font>

70
00:03:53,819 --> 00:04:02,909
limitations so whenever<font color="#CCCCCC"> YouTube wishes</font>

71
00:03:57,389 --> 00:04:05,579
to<font color="#CCCCCC"> decode frame</font><font color="#E5E5E5"> it cut off</font><font color="#CCCCCC"> I know some</font>

72
00:04:02,909 --> 00:04:08,489
funny cat video<font color="#E5E5E5"> it will use the</font><font color="#CCCCCC"> video</font>

73
00:04:05,579 --> 00:04:12,769
<font color="#E5E5E5">toolbox have clicker the</font><font color="#CCCCCC"> video toolbox</font>

74
00:04:08,489 --> 00:04:15,659
API and will ask for<font color="#CCCCCC"> Mary Sarah did you</font>

75
00:04:12,769 --> 00:04:18,509
<font color="#E5E5E5">want to communicate with</font><font color="#CCCCCC"> the</font><font color="#E5E5E5"> kernel in</font>

76
00:04:15,659 --> 00:04:25,289
order to decode<font color="#CCCCCC"> that</font><font color="#E5E5E5"> frame using</font><font color="#CCCCCC"> i/o kit</font>

77
00:04:18,509 --> 00:04:27,520
communication so this is<font color="#E5E5E5"> roughly the</font>

78
00:04:25,289 --> 00:04:31,120
sandbox design the

79
00:04:27,520 --> 00:04:34,260
each each application<font color="#E5E5E5"> will be</font><font color="#CCCCCC"> able to</font>

80
00:04:31,120 --> 00:04:37,690
<font color="#E5E5E5">communicate with the corresponding</font><font color="#CCCCCC"> demon</font>

81
00:04:34,260 --> 00:04:40,000
<font color="#E5E5E5">only if it needs that means that if for</font>

82
00:04:37,690 --> 00:04:42,670
<font color="#CCCCCC">example Safari doesn't</font><font color="#E5E5E5"> need that</font>

83
00:04:40,000 --> 00:04:44,440
<font color="#CCCCCC">Bluetooth which is not</font><font color="#E5E5E5"> true it will not</font>

84
00:04:42,670 --> 00:04:47,890
be able<font color="#CCCCCC"> to communicate with Bluetooth</font>

85
00:04:44,440 --> 00:04:50,020
and definitely we definitely will<font color="#E5E5E5"> not be</font>

86
00:04:47,890 --> 00:04:52,240
<font color="#CCCCCC">able</font><font color="#E5E5E5"> to</font><font color="#CCCCCC"> communicate to the kernel</font>

87
00:04:50,020 --> 00:05:01,229
extension that handling their<font color="#CCCCCC"> Bluetooth</font>

88
00:04:52,240 --> 00:05:04,380
communication<font color="#E5E5E5"> sorry so this is the main</font>

89
00:05:01,230 --> 00:05:07,600
design of the<font color="#E5E5E5"> operating system and now</font>

90
00:05:04,380 --> 00:05:10,780
in order<font color="#E5E5E5"> to improve some performance up</font>

91
00:05:07,600 --> 00:05:12,820
I decided<font color="#E5E5E5"> to combine all of the system</font>

92
00:05:10,780 --> 00:05:16,229
libraries and to put them into one file

93
00:05:12,820 --> 00:05:19,480
which is known as the<font color="#E5E5E5"> chart cache and</font>

94
00:05:16,230 --> 00:05:23,770
basically it is some kind<font color="#E5E5E5"> of similarity</font>

95
00:05:19,480 --> 00:05:25,840
<font color="#CCCCCC">I can have</font><font color="#E5E5E5"> 32 DLL not not the same but</font>

96
00:05:23,770 --> 00:05:27,789
<font color="#E5E5E5">similar there are several ways to</font>

97
00:05:25,840 --> 00:05:30,280
<font color="#E5E5E5">analyze it you can use either I can use</font>

98
00:05:27,790 --> 00:05:35,830
<font color="#CCCCCC">j2 you can use a lot of</font><font color="#E5E5E5"> different open</font>

99
00:05:30,280 --> 00:05:39,010
<font color="#E5E5E5">source open source tools you can find</font>

100
00:05:35,830 --> 00:05:43,330
online on github<font color="#E5E5E5"> personally used only j2</font>

101
00:05:39,010 --> 00:05:46,630
<font color="#CCCCCC">an Ida</font><font color="#E5E5E5"> and we will understand in a few</font>

102
00:05:43,330 --> 00:05:49,780
slides<font color="#CCCCCC"> white is a huge challenge for iOS</font>

103
00:05:46,630 --> 00:05:55,150
researcher and I think<font color="#E5E5E5"> another speaker</font>

104
00:05:49,780 --> 00:05:59,109
talked about it<font color="#E5E5E5"> just today so I piece it</font>

105
00:05:55,150 --> 00:06:02,640
I've seen<font color="#E5E5E5"> in our West Apple</font><font color="#CCCCCC"> decided to</font>

106
00:05:59,110 --> 00:06:06,820
<font color="#E5E5E5">implement different</font><font color="#CCCCCC"> IPC's</font><font color="#E5E5E5"> on different</font>

107
00:06:02,640 --> 00:06:10,150
layers<font color="#E5E5E5"> that</font><font color="#CCCCCC"> is that are all kind of</font>

108
00:06:06,820 --> 00:06:13,390
built upon mass messages all of their

109
00:06:10,150 --> 00:06:15,039
<font color="#CCCCCC">Apple</font><font color="#E5E5E5"> most of</font><font color="#CCCCCC"> Apple</font><font color="#E5E5E5"> axes are based upon</font>

110
00:06:13,390 --> 00:06:17,620
the<font color="#E5E5E5"> mass messages this is why it's</font>

111
00:06:15,040 --> 00:06:20,830
really<font color="#E5E5E5"> important to understand how much</font>

112
00:06:17,620 --> 00:06:25,180
muscle mass messaging is working<font color="#CCCCCC"> a Apple</font>

113
00:06:20,830 --> 00:06:30,270
<font color="#E5E5E5">also decided</font><font color="#CCCCCC"> to serve to implement some</font>

114
00:06:25,180 --> 00:06:30,270
of<font color="#E5E5E5"> the regular positive side pieces</font>

115
00:06:33,230 --> 00:06:40,800
and so let's dive<font color="#E5E5E5"> in into mock messages</font>

116
00:06:38,600 --> 00:06:43,380
<font color="#E5E5E5">basically like I already</font><font color="#CCCCCC"> said this</font><font color="#E5E5E5"> is</font>

117
00:06:40,800 --> 00:06:46,320
the underlying<font color="#E5E5E5"> IPC under underneath of</font>

118
00:06:43,380 --> 00:06:49,800
most of all the others like<font color="#CCCCCC"> X P</font><font color="#E5E5E5"> Co</font>

119
00:06:46,320 --> 00:06:51,900
distributed objects and it is used

120
00:06:49,800 --> 00:06:54,060
within the<font color="#CCCCCC"> kernel and the user mode</font><font color="#E5E5E5"> and</font>

121
00:06:51,900 --> 00:06:56,370
it's also of course<font color="#E5E5E5"> used to communicate</font>

122
00:06:54,060 --> 00:06:58,350
with the kernel mass message trap is the

123
00:06:56,370 --> 00:07:00,690
<font color="#CCCCCC">cisco</font><font color="#E5E5E5"> that is being used to send</font>

124
00:06:58,350 --> 00:07:02,910
messages<font color="#E5E5E5"> and one of the parameters to</font>

125
00:07:00,690 --> 00:07:06,480
<font color="#CCCCCC">mass message</font><font color="#E5E5E5"> Tarpley mass masses</font><font color="#CCCCCC"> trap</font>

126
00:07:02,910 --> 00:07:11,190
<font color="#CCCCCC">sorry is</font><font color="#E5E5E5"> destruct this truck basically</font>

127
00:07:06,480 --> 00:07:15,750
<font color="#E5E5E5">means we will cover some</font><font color="#CCCCCC"> of the fields</font>

128
00:07:11,190 --> 00:07:18,300
here the message bits used<font color="#E5E5E5"> to set the</font>

129
00:07:15,750 --> 00:07:20,820
type of<font color="#E5E5E5"> the message at the center of the</font>

130
00:07:18,300 --> 00:07:23,370
message<font color="#E5E5E5"> I can specify the</font><font color="#CCCCCC"> messages</font>

131
00:07:20,820 --> 00:07:25,860
complex if the message is complex there

132
00:07:23,370 --> 00:07:27,990
is<font color="#E5E5E5"> going</font><font color="#CCCCCC"> to be added an actual data</font>

133
00:07:25,860 --> 00:07:29,910
after<font color="#CCCCCC"> the header and the size of the</font>

134
00:07:27,990 --> 00:07:35,520
data is going to<font color="#E5E5E5"> be defined</font><font color="#CCCCCC"> by the</font>

135
00:07:29,910 --> 00:07:37,890
message size by the message size there

136
00:07:35,520 --> 00:07:40,020
is also the<font color="#CCCCCC"> field</font><font color="#E5E5E5"> of the remote</font><font color="#CCCCCC"> pod that</font>

137
00:07:37,890 --> 00:07:41,810
<font color="#E5E5E5">is used to specify the destination of</font>

138
00:07:40,020 --> 00:07:45,210
the message the<font color="#E5E5E5"> part of the message</font><font color="#CCCCCC"> and</font>

139
00:07:41,810 --> 00:07:46,920
the local port<font color="#E5E5E5"> which is actually an</font>

140
00:07:45,210 --> 00:07:50,280
auxiliary port you don't have to specify

141
00:07:46,920 --> 00:07:54,980
<font color="#CCCCCC">the local port</font><font color="#E5E5E5"> this</font><font color="#CCCCCC"> is telling to the</font>

142
00:07:50,280 --> 00:07:58,289
recipient where to reply the message and

143
00:07:54,980 --> 00:08:00,930
<font color="#E5E5E5">and there is the message ID which</font>

144
00:07:58,290 --> 00:08:04,190
<font color="#CCCCCC">basically used to convey the type the</font>

145
00:08:00,930 --> 00:08:09,600
function ID of the message that means

146
00:08:04,190 --> 00:08:12,840
again it's only conventionally used it

147
00:08:09,600 --> 00:08:15,600
is<font color="#E5E5E5"> used to tell the recipient which</font>

148
00:08:12,840 --> 00:08:16,440
<font color="#E5E5E5">message to invoke me which</font><font color="#CCCCCC"> callback to</font>

149
00:08:15,600 --> 00:08:21,780
<font color="#CCCCCC">invoke sorry</font>

150
00:08:16,440 --> 00:08:24,570
and let's but we have some kind<font color="#CCCCCC"> of a</font>

151
00:08:21,780 --> 00:08:27,030
problem<font color="#CCCCCC"> because how do</font><font color="#E5E5E5"> I resolve that</font>

152
00:08:24,570 --> 00:08:28,680
<font color="#E5E5E5">remote</font><font color="#CCCCCC"> port if I'm an application how</font>

153
00:08:27,030 --> 00:08:32,490
can I know how to communicate<font color="#E5E5E5"> with</font><font color="#CCCCCC"> meta</font>

154
00:08:28,680 --> 00:08:38,730
server D for example<font color="#E5E5E5"> so</font><font color="#CCCCCC"> I implemented it</font>

155
00:08:32,490 --> 00:08:40,530
using<font color="#CCCCCC"> lunch D lunch these essentially</font>

156
00:08:38,730 --> 00:08:44,330
you<font color="#E5E5E5"> can have a a whole talk only about</font>

157
00:08:40,530 --> 00:08:46,160
lunch<font color="#E5E5E5"> D but if you want to redundant eat</font>

158
00:08:44,330 --> 00:08:48,800
lunch these

159
00:08:46,160 --> 00:08:50,990
of the mother<font color="#E5E5E5"> or the father of all the</font>

160
00:08:48,800 --> 00:08:53,300
other user<font color="#E5E5E5"> user mode demons or</font>

161
00:08:50,990 --> 00:08:56,449
<font color="#CCCCCC">processors it</font><font color="#E5E5E5"> is used to stop and start</font>

162
00:08:53,300 --> 00:09:00,170
<font color="#CCCCCC">daemons application and processes</font>

163
00:08:56,449 --> 00:09:04,219
<font color="#CCCCCC">on-demand</font><font color="#E5E5E5"> you can think of it</font><font color="#CCCCCC"> as the</font>

164
00:09:00,170 --> 00:09:08,449
supervisor<font color="#E5E5E5"> on</font><font color="#CCCCCC"> the user mode side and it</font>

165
00:09:04,220 --> 00:09:11,569
is<font color="#CCCCCC"> also used to resolve those to resolve</font>

166
00:09:08,449 --> 00:09:14,300
demos<font color="#E5E5E5"> so whenever</font><font color="#CCCCCC"> don't demin let's for</font>

167
00:09:11,569 --> 00:09:17,269
example process a wishes to register

168
00:09:14,300 --> 00:09:19,040
<font color="#CCCCCC">some youth</font><font color="#E5E5E5"> new math server</font><font color="#CCCCCC"> it is going</font>

169
00:09:17,269 --> 00:09:22,279
<font color="#E5E5E5">to use the function boots up check in</font>

170
00:09:19,040 --> 00:09:26,569
and we'll ask<font color="#CCCCCC"> Landy to hold the handle</font>

171
00:09:22,279 --> 00:09:29,589
to this<font color="#CCCCCC"> part</font><font color="#E5E5E5"> and using the name the name</font>

172
00:09:26,569 --> 00:09:34,339
for our examples come down<font color="#E5E5E5"> near the demo</font>

173
00:09:29,589 --> 00:09:37,160
afterwards<font color="#E5E5E5"> lunch they will hold that the</font>

174
00:09:34,339 --> 00:09:40,370
port<font color="#E5E5E5"> process a sending that it will be</font>

175
00:09:37,160 --> 00:09:42,949
attached to<font color="#CCCCCC"> that name so when process B</font>

176
00:09:40,370 --> 00:09:45,079
will want<font color="#CCCCCC"> to</font><font color="#E5E5E5"> resolve them the new math</font>

177
00:09:42,949 --> 00:09:47,800
math math<font color="#CCCCCC"> server it</font><font color="#E5E5E5"> is going to use</font>

178
00:09:45,079 --> 00:09:51,529
bootstrap<font color="#E5E5E5"> lock up and</font><font color="#CCCCCC"> as</font><font color="#E5E5E5"> from LAN</font><font color="#CCCCCC"> GD</font>

179
00:09:47,800 --> 00:09:55,880
that part lunch<font color="#E5E5E5"> B we're applying with</font>

180
00:09:51,529 --> 00:09:57,920
<font color="#E5E5E5">the port that it can from</font><font color="#CCCCCC"> that moment on</font>

181
00:09:55,880 --> 00:10:04,269
<font color="#E5E5E5">you can use in order to communicate</font>

182
00:09:57,920 --> 00:10:09,949
<font color="#E5E5E5">directly from poor society process</font><font color="#CCCCCC"> B so</font>

183
00:10:04,269 --> 00:10:11,720
let's dive a little into some of the iOS

184
00:10:09,949 --> 00:10:16,040
research difficulties<font color="#CCCCCC"> ahead and</font>

185
00:10:11,720 --> 00:10:20,269
basically any<font color="#E5E5E5"> other researcher is coming</font>

186
00:10:16,040 --> 00:10:23,029
across those difficulties<font color="#E5E5E5"> first of all</font>

187
00:10:20,269 --> 00:10:26,449
the device is<font color="#CCCCCC"> Jail</font><font color="#E5E5E5"> that means you cannot</font>

188
00:10:23,029 --> 00:10:28,610
really execute your own code we outside

189
00:10:26,449 --> 00:10:31,519
of the<font color="#CCCCCC"> sandbox limitations</font><font color="#E5E5E5"> like unless</font>

190
00:10:28,610 --> 00:10:34,910
you are<font color="#CCCCCC"> using some vulnerabilities that</font>

191
00:10:31,519 --> 00:10:38,509
<font color="#E5E5E5">is out</font><font color="#CCCCCC"> there and on every new version</font>

192
00:10:34,910 --> 00:10:40,189
there is<font color="#E5E5E5"> one popping out and you cannot</font>

193
00:10:38,509 --> 00:10:42,319
<font color="#E5E5E5">really attach the bug to them and what I</font>

194
00:10:40,189 --> 00:10:45,019
mean<font color="#E5E5E5"> by</font><font color="#CCCCCC"> that</font><font color="#E5E5E5"> is that when</font><font color="#CCCCCC"> you already</font>

195
00:10:42,319 --> 00:10:48,160
have a vulnerability<font color="#E5E5E5"> and you cannot</font>

196
00:10:45,019 --> 00:10:51,139
<font color="#E5E5E5">really bug it in order</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> easily or</font>

197
00:10:48,160 --> 00:10:53,180
comfortably exploit<font color="#CCCCCC"> that</font><font color="#E5E5E5"> wherever</font><font color="#CCCCCC"> it</font><font color="#E5E5E5"> is</font>

198
00:10:51,139 --> 00:10:56,449
so you need to rely on the<font color="#CCCCCC"> crash opposed</font>

199
00:10:53,180 --> 00:10:58,160
from<font color="#E5E5E5"> crashes you have or the device</font>

200
00:10:56,449 --> 00:10:59,959
console which basically means the logs

201
00:10:58,160 --> 00:11:03,560
of death of the device

202
00:10:59,960 --> 00:11:07,940
and<font color="#E5E5E5"> moreover you cannot really</font><font color="#CCCCCC"> flesh all</font>

203
00:11:03,560 --> 00:11:10,149
<font color="#CCCCCC">versions that is why you</font><font color="#E5E5E5"> will see</font><font color="#CCCCCC"> an a</font>

204
00:11:07,940 --> 00:11:13,250
lot of<font color="#CCCCCC"> Iowa's researcher</font><font color="#E5E5E5"> Britches</font>

205
00:11:10,149 --> 00:11:16,550
<font color="#CCCCCC">researches</font><font color="#E5E5E5"> a desk bunch of different</font>

206
00:11:13,250 --> 00:11:19,610
devices<font color="#CCCCCC"> and that you need to</font><font color="#E5E5E5"> gather</font>

207
00:11:16,550 --> 00:11:21,890
around<font color="#E5E5E5"> and</font><font color="#CCCCCC"> buy insufficient</font>

208
00:11:19,610 --> 00:11:25,010
documentation I mean that Apple does not

209
00:11:21,890 --> 00:11:26,990
<font color="#E5E5E5">really document anything that is not for</font>

210
00:11:25,010 --> 00:11:30,350
the developer that<font color="#CCCCCC"> means you will not</font>

211
00:11:26,990 --> 00:11:31,279
find information that<font color="#CCCCCC"> is not relevant</font><font color="#E5E5E5"> to</font>

212
00:11:30,350 --> 00:11:33,380
<font color="#E5E5E5">the</font><font color="#CCCCCC"> SDK</font>

213
00:11:31,279 --> 00:11:36,399
of course there are some there are<font color="#E5E5E5"> a few</font>

214
00:11:33,380 --> 00:11:38,630
exceptions<font color="#CCCCCC"> but basically it</font><font color="#E5E5E5"> means that</font>

215
00:11:36,399 --> 00:11:40,700
you cannot really<font color="#CCCCCC"> know how they</font>

216
00:11:38,630 --> 00:11:43,670
implement a lot of stuff within<font color="#E5E5E5"> the</font>

217
00:11:40,700 --> 00:11:45,560
operating<font color="#E5E5E5"> system and either really</font>

218
00:11:43,670 --> 00:11:47,060
structured struggles with the<font color="#CCCCCC"> digit</font>

219
00:11:45,560 --> 00:11:51,199
<font color="#CCCCCC">cache</font><font color="#E5E5E5"> that</font><font color="#CCCCCC"> we</font><font color="#E5E5E5"> mentioned before</font>

220
00:11:47,060 --> 00:11:52,520
and the people previous slides so what

221
00:11:51,200 --> 00:11:55,100
you have to<font color="#E5E5E5"> do is basically get a</font>

222
00:11:52,520 --> 00:11:57,350
workstation<font color="#E5E5E5"> with a lot of RAM sticks and</font>

223
00:11:55,100 --> 00:12:01,880
hope<font color="#E5E5E5"> that</font><font color="#CCCCCC"> with it we'll finally be able</font>

224
00:11:57,350 --> 00:12:05,180
<font color="#CCCCCC">to analyze</font><font color="#E5E5E5"> this</font><font color="#CCCCCC"> jar - so while I was</font>

225
00:12:01,880 --> 00:12:08,360
also working on some Ida Python scripts

226
00:12:05,180 --> 00:12:11,000
<font color="#E5E5E5">to improve that with</font><font color="#CCCCCC"> IDA</font><font color="#E5E5E5"> they released</font>

227
00:12:08,360 --> 00:12:13,880
either<font color="#E5E5E5"> seven which actually got you the</font>

228
00:12:11,000 --> 00:12:16,490
ability<font color="#E5E5E5"> to load one image with all of</font>

229
00:12:13,880 --> 00:12:20,200
its dependencies<font color="#E5E5E5"> and you will not need</font>

230
00:12:16,490 --> 00:12:24,050
<font color="#CCCCCC">to load a</font><font color="#E5E5E5"> one gigabyte of code which</font>

231
00:12:20,200 --> 00:12:26,000
basically means it's all it<font color="#E5E5E5"> kind of</font>

232
00:12:24,050 --> 00:12:28,400
solved the issue<font color="#E5E5E5"> of nature cache but</font>

233
00:12:26,000 --> 00:12:30,410
still it's not<font color="#E5E5E5"> really a good idea to</font><font color="#CCCCCC"> try</font>

234
00:12:28,400 --> 00:12:32,390
to<font color="#E5E5E5"> extract some functions it will</font>

235
00:12:30,410 --> 00:12:34,400
probably just<font color="#E5E5E5"> crash because there are</font>

236
00:12:32,390 --> 00:12:41,870
thousands<font color="#CCCCCC"> of thousands of functions</font>

237
00:12:34,400 --> 00:12:45,560
within the<font color="#CCCCCC"> third cache so what is the</font>

238
00:12:41,870 --> 00:12:46,910
sandbox escape actually basically<font color="#CCCCCC"> let's</font>

239
00:12:45,560 --> 00:12:52,939
assume we are<font color="#E5E5E5"> a malicious application</font>

240
00:12:46,910 --> 00:12:55,040
<font color="#CCCCCC">and we want to have we want</font><font color="#E5E5E5"> to get to</font>

241
00:12:52,940 --> 00:12:58,040
the kernel eventually but<font color="#CCCCCC"> right now</font>

242
00:12:55,040 --> 00:13:00,349
<font color="#E5E5E5">within</font><font color="#CCCCCC"> the sandbox our attack surface is</font>

243
00:12:58,040 --> 00:13:04,310
<font color="#E5E5E5">really limited we can contact only the</font>

244
00:13:00,350 --> 00:13:08,750
<font color="#E5E5E5">demons we we can have we can use or we</font>

245
00:13:04,310 --> 00:13:11,060
can<font color="#CCCCCC"> access only fear of</font><font color="#E5E5E5"> the kernel a few</font>

246
00:13:08,750 --> 00:13:16,529
of the kind<font color="#E5E5E5"> of features</font>

247
00:13:11,060 --> 00:13:18,540
but if we will be<font color="#CCCCCC"> able</font><font color="#E5E5E5"> to</font><font color="#CCCCCC"> exploit or get</font>

248
00:13:16,529 --> 00:13:21,210
<font color="#CCCCCC">code</font><font color="#E5E5E5"> arbitrary</font><font color="#CCCCCC"> code execution</font><font color="#E5E5E5"> over one</font>

249
00:13:18,540 --> 00:13:23,819
of the<font color="#E5E5E5"> demons we will we will be able to</font>

250
00:13:21,210 --> 00:13:28,050
<font color="#CCCCCC">widen our</font><font color="#E5E5E5"> attack surface and for</font><font color="#CCCCCC"> MIDI</font>

251
00:13:23,820 --> 00:13:29,850
server<font color="#E5E5E5"> D we will be able to find to</font>

252
00:13:28,050 --> 00:13:31,560
widen our attack surface and<font color="#CCCCCC"> eventually</font>

253
00:13:29,850 --> 00:13:35,310
we will get<font color="#E5E5E5"> to the kernel by different</font>

254
00:13:31,560 --> 00:13:37,079
vulnerability now<font color="#E5E5E5"> it's I think it's</font>

255
00:13:35,310 --> 00:13:39,810
worth to<font color="#CCCCCC"> mention that when you're</font>

256
00:13:37,080 --> 00:13:42,089
<font color="#CCCCCC">choosing which</font><font color="#E5E5E5"> demon is your target you</font>

257
00:13:39,810 --> 00:13:44,969
should<font color="#CCCCCC"> search for</font><font color="#E5E5E5"> the one with the</font>

258
00:13:42,089 --> 00:13:48,060
widest attack surface that means blood

259
00:13:44,970 --> 00:13:49,589
<font color="#CCCCCC">Wi-Fi D will probably not really but</font>

260
00:13:48,060 --> 00:13:52,349
probably will be able to communicate

261
00:13:49,589 --> 00:13:54,180
<font color="#E5E5E5">only with the Wi-Fi</font><font color="#CCCCCC"> drivers but will not</font>

262
00:13:52,350 --> 00:13:56,459
<font color="#E5E5E5">be</font><font color="#CCCCCC"> able to communicate with other</font>

263
00:13:54,180 --> 00:13:58,800
<font color="#E5E5E5">Bluetooth the</font><font color="#CCCCCC"> Blues drivers for example</font>

264
00:13:56,459 --> 00:14:01,079
that's why we will<font color="#CCCCCC"> see later that Wi-Fi</font>

265
00:13:58,800 --> 00:14:03,359
D is<font color="#E5E5E5"> also kind of blue to D it cannot</font>

266
00:14:01,080 --> 00:14:05,730
communicate directly with the<font color="#E5E5E5"> Bluetooth</font>

267
00:14:03,360 --> 00:14:08,970
drivers which makes<font color="#E5E5E5"> sense because we</font>

268
00:14:05,730 --> 00:14:13,200
need one demon to manage the Bluetooth

269
00:14:08,970 --> 00:14:17,120
stack so I started to choose my target<font color="#CCCCCC"> I</font>

270
00:14:13,200 --> 00:14:19,770
used SB tool by<font color="#E5E5E5"> Jonathan Levine</font><font color="#CCCCCC"> and</font>

271
00:14:17,120 --> 00:14:24,660
basically<font color="#E5E5E5"> it expects the</font><font color="#CCCCCC"> sandbox profile</font>

272
00:14:19,770 --> 00:14:28,380
and obviously can run<font color="#E5E5E5"> SB to only on</font>

273
00:14:24,660 --> 00:14:30,829
<font color="#E5E5E5">jailbroken device and</font><font color="#CCCCCC"> data types to</font><font color="#E5E5E5"> get</font>

274
00:14:28,380 --> 00:14:33,990
a feeling<font color="#CCCCCC"> of</font><font color="#E5E5E5"> the operating system to</font>

275
00:14:30,830 --> 00:14:39,029
<font color="#E5E5E5">start and search for your next daemon</font>

276
00:14:33,990 --> 00:14:41,580
target in our case I choose not<font color="#E5E5E5"> really</font>

277
00:14:39,029 --> 00:14:46,050
arbitrarily choose but randomly choose

278
00:14:41,580 --> 00:14:48,930
let's call it to focus on those two Mac

279
00:14:46,050 --> 00:14:51,839
servers again<font color="#E5E5E5"> these are the name of the</font>

280
00:14:48,930 --> 00:14:53,520
<font color="#CCCCCC">mark server that demons we're</font>

281
00:14:51,839 --> 00:14:57,360
registering is<font color="#E5E5E5"> new</font><font color="#CCCCCC"> math server using</font>

282
00:14:53,520 --> 00:14:59,189
bootstrap block bootstrap Luka<font color="#CCCCCC"> the first</font>

283
00:14:57,360 --> 00:15:02,250
one is the<font color="#E5E5E5"> comm</font><font color="#CCCCCC"> Apple commedia</font>

284
00:14:59,190 --> 00:15:04,920
decompression session that is<font color="#CCCCCC"> being</font>

285
00:15:02,250 --> 00:15:06,660
<font color="#E5E5E5">handled by media server</font><font color="#CCCCCC"> D</font><font color="#E5E5E5"> and there will</font>

286
00:15:04,920 --> 00:15:11,610
come up a server<font color="#CCCCCC"> Bluetooth which is</font>

287
00:15:06,660 --> 00:15:14,279
being handled by blue<font color="#CCCCCC"> team all you have</font>

288
00:15:11,610 --> 00:15:17,190
to do just take the string<font color="#E5E5E5"> basically go</font>

289
00:15:14,279 --> 00:15:19,920
to<font color="#E5E5E5"> the</font><font color="#CCCCCC"> chart cache and</font><font color="#E5E5E5"> you find the</font>

290
00:15:17,190 --> 00:15:22,950
<font color="#E5E5E5">right screen for that map server and</font>

291
00:15:19,920 --> 00:15:23,439
find where<font color="#E5E5E5"> the media server D registers</font>

292
00:15:22,950 --> 00:15:27,970
<font color="#E5E5E5">is in</font>

293
00:15:23,440 --> 00:15:30,280
you demon<font color="#E5E5E5"> this</font><font color="#CCCCCC"> new math server and this</font>

294
00:15:27,970 --> 00:15:32,950
is the<font color="#E5E5E5"> the function</font><font color="#CCCCCC"> that it's using</font><font color="#E5E5E5"> to</font>

295
00:15:30,280 --> 00:15:35,230
register<font color="#CCCCCC"> the</font><font color="#E5E5E5"> new demon</font><font color="#CCCCCC"> its figure PC</font>

296
00:15:32,950 --> 00:15:37,360
start server which is<font color="#E5E5E5"> getting few</font>

297
00:15:35,230 --> 00:15:40,120
different parameters but<font color="#CCCCCC"> the first</font>

298
00:15:37,360 --> 00:15:42,460
parameter is the<font color="#E5E5E5"> name</font><font color="#CCCCCC"> of</font><font color="#E5E5E5"> the day the</font>

299
00:15:40,120 --> 00:15:44,790
name of the new<font color="#E5E5E5"> math server and the</font>

300
00:15:42,460 --> 00:15:47,380
third<font color="#E5E5E5"> that the third parameter is</font>

301
00:15:44,790 --> 00:15:51,730
function that handles each math message

302
00:15:47,380 --> 00:15:54,280
that is<font color="#CCCCCC"> being received let's dive in</font>

303
00:15:51,730 --> 00:15:57,970
into<font color="#E5E5E5"> that</font><font color="#CCCCCC"> handler that I'm Larry pretty</font>

304
00:15:54,280 --> 00:16:01,839
simple and<font color="#CCCCCC"> pretty</font><font color="#E5E5E5"> simple</font><font color="#CCCCCC"> it</font><font color="#E5E5E5"> has the in</font>

305
00:15:57,970 --> 00:16:03,850
and out message pointer to to the input

306
00:16:01,840 --> 00:16:08,860
mask message and to the output math

307
00:16:03,850 --> 00:16:11,380
message it's going to it<font color="#E5E5E5"> is going to use</font>

308
00:16:08,860 --> 00:16:14,950
the message ID decrement some constant

309
00:16:11,380 --> 00:16:18,939
number that is<font color="#E5E5E5"> being changed by each</font>

310
00:16:14,950 --> 00:16:21,370
<font color="#E5E5E5">math server as far as I see</font><font color="#CCCCCC"> as I</font><font color="#E5E5E5"> as I</font>

311
00:16:18,940 --> 00:16:25,270
found<font color="#E5E5E5"> out it is going to check if that</font>

312
00:16:21,370 --> 00:16:29,920
<font color="#E5E5E5">message ID which again is used to convey</font>

313
00:16:25,270 --> 00:16:31,750
which logic is need to<font color="#E5E5E5"> be involved and</font>

314
00:16:29,920 --> 00:16:35,410
<font color="#E5E5E5">it's going to check the message ID that</font>

315
00:16:31,750 --> 00:16:38,350
it's below or equal the number of how

316
00:16:35,410 --> 00:16:41,130
many callbacks there are going<font color="#E5E5E5"> to</font>

317
00:16:38,350 --> 00:16:45,210
retrieve the address of the callback<font color="#E5E5E5"> by</font>

318
00:16:41,130 --> 00:16:49,150
using the video decompression subsystem

319
00:16:45,210 --> 00:16:51,250
struct<font color="#E5E5E5"> and eventually it's going to call</font>

320
00:16:49,150 --> 00:16:55,569
the hello<font color="#CCCCCC"> and with the input and output</font>

321
00:16:51,250 --> 00:16:58,140
message<font color="#E5E5E5"> now</font><font color="#CCCCCC"> all I had</font><font color="#E5E5E5"> to do is to go</font>

322
00:16:55,570 --> 00:17:02,410
that to that struct<font color="#E5E5E5"> and to understand a</font>

323
00:16:58,140 --> 00:17:05,500
<font color="#CCCCCC">witch callbacks I can invoke</font><font color="#E5E5E5"> so I found</font>

324
00:17:02,410 --> 00:17:09,970
out that<font color="#E5E5E5"> this</font><font color="#CCCCCC"> drug was different this is</font>

325
00:17:05,500 --> 00:17:12,250
<font color="#CCCCCC">only a</font><font color="#E5E5E5"> short list of all the stuff all</font>

326
00:17:09,970 --> 00:17:15,699
the<font color="#CCCCCC"> callbacks I found they have excrete</font>

327
00:17:12,250 --> 00:17:18,849
<font color="#E5E5E5">it</font><font color="#CCCCCC"> a straw and X</font><font color="#E5E5E5"> decode frame again each</font>

328
00:17:15,699 --> 00:17:23,170
callback is let's recap a<font color="#CCCCCC"> little each</font>

329
00:17:18,849 --> 00:17:25,569
callback is invoked by<font color="#CCCCCC"> the message ID</font>

330
00:17:23,170 --> 00:17:27,100
<font color="#E5E5E5">from our sandbox application that means</font>

331
00:17:25,569 --> 00:17:30,430
<font color="#E5E5E5">we can call</font><font color="#CCCCCC"> to each one of those</font>

332
00:17:27,099 --> 00:17:34,449
callbacks<font color="#E5E5E5"> so I started to dive in into</font>

333
00:17:30,430 --> 00:17:36,280
the X decode frame because this is the

334
00:17:34,450 --> 00:17:37,270
main<font color="#CCCCCC"> logic of the decompression session</font>

335
00:17:36,280 --> 00:17:41,290
as you<font color="#E5E5E5"> can assume I</font>

336
00:17:37,270 --> 00:17:42,639
yes<font color="#E5E5E5"> and the</font><font color="#CCCCCC"> exit code frame after a few</font>

337
00:17:41,290 --> 00:17:46,420
research I'm actually checking<font color="#CCCCCC"> with</font><font color="#E5E5E5"> the</font>

338
00:17:42,640 --> 00:17:49,240
API seeing what is calling the XD code

339
00:17:46,420 --> 00:17:51,970
frame<font color="#CCCCCC"> I found out that</font><font color="#E5E5E5"> is the</font><font color="#CCCCCC"> backend of</font>

340
00:17:49,240 --> 00:17:54,760
the API<font color="#E5E5E5"> called</font><font color="#CCCCCC"> VT decompression session</font>

341
00:17:51,970 --> 00:17:56,890
the cold frame it is the coding frame

342
00:17:54,760 --> 00:17:59,410
from a<font color="#CCCCCC"> civilised buffer what that means</font>

343
00:17:56,890 --> 00:18:01,660
<font color="#CCCCCC">that whenever application wishes to</font><font color="#E5E5E5"> the</font>

344
00:17:59,410 --> 00:18:03,820
<font color="#E5E5E5">code frame it is going to serialize the</font>

345
00:18:01,660 --> 00:18:07,030
request<font color="#E5E5E5"> we will see how</font><font color="#CCCCCC"> it survived</font>

346
00:18:03,820 --> 00:18:09,490
serializing in the moment it is going to

347
00:18:07,030 --> 00:18:13,120
send<font color="#E5E5E5"> that serialize frame serialize</font>

348
00:18:09,490 --> 00:18:14,920
buffer serialized sample buffer<font color="#CCCCCC"> to Medi</font>

349
00:18:13,120 --> 00:18:18,129
<font color="#CCCCCC">server D</font><font color="#E5E5E5"> massively going to deserialize</font>

350
00:18:14,920 --> 00:18:20,410
it and to starting sending it<font color="#CCCCCC"> eventually</font>

351
00:18:18,130 --> 00:18:24,120
to the<font color="#CCCCCC"> channel in order to</font><font color="#E5E5E5"> decode the</font>

352
00:18:20,410 --> 00:18:27,100
frame event is<font color="#E5E5E5"> going to return</font><font color="#CCCCCC"> the</font>

353
00:18:24,120 --> 00:18:31,449
return<font color="#CCCCCC"> a message with a result code back</font>

354
00:18:27,100 --> 00:18:33,189
<font color="#CCCCCC">to the client so what we can</font><font color="#E5E5E5"> say</font><font color="#CCCCCC"> about</font>

355
00:18:31,450 --> 00:18:38,730
the logic of the cold frames<font color="#E5E5E5"> very</font>

356
00:18:33,190 --> 00:18:43,210
obvious it is going to find this the the

357
00:18:38,730 --> 00:18:46,930
<font color="#CCCCCC">the session the the</font><font color="#E5E5E5"> corresponding</font>

358
00:18:43,210 --> 00:18:48,880
session by the local<font color="#E5E5E5"> pradhans by who</font>

359
00:18:46,930 --> 00:18:51,070
sent that message<font color="#E5E5E5"> to my server</font><font color="#CCCCCC"> did this</font>

360
00:18:48,880 --> 00:18:53,290
code is run is being executed on<font color="#CCCCCC"> the</font>

361
00:18:51,070 --> 00:18:55,419
mail server<font color="#CCCCCC"> day</font><font color="#E5E5E5"> and</font><font color="#CCCCCC"> event</font><font color="#E5E5E5"> is going to</font>

362
00:18:53,290 --> 00:18:57,430
<font color="#E5E5E5">call create sample buffer phone</font><font color="#CCCCCC"> C like</font>

363
00:18:55,420 --> 00:19:01,030
that<font color="#E5E5E5"> on data that</font><font color="#CCCCCC"> is</font><font color="#E5E5E5"> going to dis</font>

364
00:18:57,430 --> 00:19:03,370
realize their quest so I stopped for<font color="#E5E5E5"> a</font>

365
00:19:01,030 --> 00:19:05,470
moment and<font color="#CCCCCC"> again remember it this</font><font color="#E5E5E5"> is the</font>

366
00:19:03,370 --> 00:19:08,979
first time I'm<font color="#CCCCCC"> doing anything</font><font color="#E5E5E5"> on iOS and</font>

367
00:19:05,470 --> 00:19:13,630
I decided<font color="#E5E5E5"> to doing something</font><font color="#CCCCCC"> I'm not</font>

368
00:19:08,980 --> 00:19:16,660
doing every time which is to manual

369
00:19:13,630 --> 00:19:19,810
analysis the decoded serialization

370
00:19:16,660 --> 00:19:22,450
process intercept legitimate<font color="#E5E5E5"> in order to</font>

371
00:19:19,810 --> 00:19:24,550
understand<font color="#CCCCCC"> this realization intercept</font>

372
00:19:22,450 --> 00:19:27,670
legitimate buffers legitimate serialize

373
00:19:24,550 --> 00:19:30,639
buffers and eventually modifies those

374
00:19:27,670 --> 00:19:32,260
buffers basically it calls it shouldn't

375
00:19:30,640 --> 00:19:36,910
be profited<font color="#E5E5E5"> it should be called</font><font color="#CCCCCC"> fuzzing</font>

376
00:19:32,260 --> 00:19:39,370
<font color="#E5E5E5">and I wanted to gain out of it</font><font color="#CCCCCC"> a really</font>

377
00:19:36,910 --> 00:19:44,020
a lot<font color="#E5E5E5"> of just to get a feeling what am i</font>

378
00:19:39,370 --> 00:19:46,989
what<font color="#E5E5E5"> I'm doing here so let's understand</font>

379
00:19:44,020 --> 00:19:49,540
what is<font color="#E5E5E5"> actually happening</font><font color="#CCCCCC"> whenever</font>

380
00:19:46,990 --> 00:19:51,080
<font color="#E5E5E5">there</font><font color="#CCCCCC"> is the compression session when</font>

381
00:19:49,540 --> 00:19:53,510
application again

382
00:19:51,080 --> 00:19:55,120
to take the example<font color="#CCCCCC"> of</font><font color="#E5E5E5"> YouTube want to</font>

383
00:19:53,510 --> 00:19:59,149
decompose

384
00:19:55,120 --> 00:20:00,949
sorry<font color="#E5E5E5"> decode</font><font color="#CCCCCC"> the new frames it got from</font>

385
00:19:59,149 --> 00:20:03,649
the<font color="#CCCCCC"> internet it is</font><font color="#E5E5E5"> going to set up a new</font>

386
00:20:00,950 --> 00:20:06,950
decompression session<font color="#E5E5E5"> it is going to</font>

387
00:20:03,649 --> 00:20:08,928
send a<font color="#E5E5E5"> mass message</font><font color="#CCCCCC"> with the information</font>

388
00:20:06,950 --> 00:20:11,059
<font color="#CCCCCC">about the</font><font color="#E5E5E5"> news session to make a</font><font color="#CCCCCC"> server</font>

389
00:20:08,929 --> 00:20:13,460
<font color="#E5E5E5">D my desk so every D is going</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> handle</font>

390
00:20:11,059 --> 00:20:17,178
<font color="#CCCCCC">that request by</font><font color="#E5E5E5"> the codec excrete we</font>

391
00:20:13,460 --> 00:20:18,590
just saw and eventually it is<font color="#CCCCCC"> going to</font>

392
00:20:17,179 --> 00:20:21,519
call<font color="#CCCCCC"> that API</font><font color="#E5E5E5"> call</font><font color="#CCCCCC"> with</font><font color="#E5E5E5"> the</font>

393
00:20:18,590 --> 00:20:24,139
<font color="#CCCCCC">decompression session decode frame and</font>

394
00:20:21,519 --> 00:20:26,630
the application<font color="#E5E5E5"> is</font><font color="#CCCCCC"> going to serialize</font>

395
00:20:24,139 --> 00:20:29,928
the request in order<font color="#CCCCCC"> to</font><font color="#E5E5E5"> send it again</font>

396
00:20:26,630 --> 00:20:34,039
<font color="#E5E5E5">using math message to the callback</font><font color="#CCCCCC"> X</font>

397
00:20:29,929 --> 00:20:35,929
<font color="#E5E5E5">decode frame by</font><font color="#CCCCCC"> - era D so we have a</font>

398
00:20:34,039 --> 00:20:38,919
really<font color="#E5E5E5"> nice attack surface here because</font>

399
00:20:35,929 --> 00:20:42,080
this<font color="#E5E5E5"> serialization process is known as</font>

400
00:20:38,919 --> 00:20:48,260
sometimes<font color="#CCCCCC"> if you're not sometimes</font><font color="#E5E5E5"> it's</font>

401
00:20:42,080 --> 00:20:49,879
difficult<font color="#E5E5E5"> to develop properly so I have</font>

402
00:20:48,260 --> 00:20:52,510
to understand a<font color="#E5E5E5"> little bit what is this</font>

403
00:20:49,880 --> 00:20:55,700
<font color="#CCCCCC">disraeli</font><font color="#E5E5E5"> the serialization process and</font>

404
00:20:52,510 --> 00:20:58,908
<font color="#CCCCCC">the serialize is</font><font color="#E5E5E5"> actually really obvious</font>

405
00:20:55,700 --> 00:21:00,980
one<font color="#E5E5E5"> it is it is called create sample</font>

406
00:20:58,909 --> 00:21:04,549
<font color="#E5E5E5">back from here a dot on data and surface</font>

407
00:21:00,980 --> 00:21:07,960
<font color="#E5E5E5">and it is actually just a</font><font color="#CCCCCC"> TLV</font><font color="#E5E5E5"> a type</font>

408
00:21:04,549 --> 00:21:12,049
length value in that case it<font color="#E5E5E5"> was a</font>

409
00:21:07,960 --> 00:21:14,600
length type value but it's the same each

410
00:21:12,049 --> 00:21:16,700
node is<font color="#CCCCCC"> actually</font><font color="#E5E5E5"> four bytes that</font><font color="#CCCCCC"> are</font>

411
00:21:14,600 --> 00:21:19,699
describing<font color="#E5E5E5"> the size of the next node of</font>

412
00:21:16,700 --> 00:21:21,889
the node four bytes that are the type of

413
00:21:19,700 --> 00:21:25,279
the node<font color="#E5E5E5"> the first</font><font color="#CCCCCC"> root note is</font><font color="#E5E5E5"> always</font>

414
00:21:21,889 --> 00:21:27,590
always<font color="#CCCCCC"> s</font><font color="#E5E5E5"> buff sample buffer actually and</font>

415
00:21:25,279 --> 00:21:31,909
then you can have nested nodes that are

416
00:21:27,590 --> 00:21:36,590
holding<font color="#CCCCCC"> different information of the of</font>

417
00:21:31,909 --> 00:21:39,740
the frame you<font color="#CCCCCC"> want to decode so I</font>

418
00:21:36,590 --> 00:21:44,360
implemented it<font color="#CCCCCC"> real quick on on Python</font>

419
00:21:39,740 --> 00:21:47,600
it's just regular TL way and the reason

420
00:21:44,360 --> 00:21:49,668
<font color="#CCCCCC">I did it</font><font color="#E5E5E5"> was to being able to send who</font>

421
00:21:47,600 --> 00:21:52,580
was<font color="#CCCCCC"> realized buffer to meta server day</font>

422
00:21:49,669 --> 00:21:55,250
without<font color="#E5E5E5"> going through the through their</font>

423
00:21:52,580 --> 00:21:59,889
legitimate<font color="#E5E5E5"> API in this way I</font><font color="#CCCCCC"> could</font>

424
00:21:55,250 --> 00:22:03,250
bypass a<font color="#E5E5E5"> lot of death</font><font color="#CCCCCC"> checking</font><font color="#E5E5E5"> on</font><font color="#CCCCCC"> their</font>

425
00:21:59,889 --> 00:22:07,149
on the side of the application

426
00:22:03,250 --> 00:22:09,430
and eventually I wanted to create a

427
00:22:07,150 --> 00:22:15,150
sandbox application that I will be<font color="#E5E5E5"> able</font>

428
00:22:09,430 --> 00:22:18,520
<font color="#E5E5E5">to</font><font color="#CCCCCC"> five minutes</font><font color="#E5E5E5"> every day so let's</font><font color="#CCCCCC"> see</font>

429
00:22:15,150 --> 00:22:20,890
whenever the what I did was taking a

430
00:22:18,520 --> 00:22:24,070
legitimate application asking you<font color="#E5E5E5"> to</font>

431
00:22:20,890 --> 00:22:26,680
<font color="#CCCCCC">decode frame intercepting the friends</font>

432
00:22:24,070 --> 00:22:30,820
<font color="#E5E5E5">the serial ID friend already the</font><font color="#CCCCCC"> serious</font>

433
00:22:26,680 --> 00:22:33,040
frames already is<font color="#E5E5E5"> here frame and while</font>

434
00:22:30,820 --> 00:22:36,310
<font color="#CCCCCC">working wrong that</font><font color="#E5E5E5"> serious buffer</font><font color="#CCCCCC"> I</font>

435
00:22:33,040 --> 00:22:38,590
chose to<font color="#E5E5E5"> modifies those buffers on</font>

436
00:22:36,310 --> 00:22:41,440
interesting places of course<font color="#E5E5E5"> not on the</font>

437
00:22:38,590 --> 00:22:45,060
<font color="#E5E5E5">type of the node because I want</font><font color="#CCCCCC"> to</font>

438
00:22:41,440 --> 00:22:49,560
bypass<font color="#E5E5E5"> those checks but basically on the</font>

439
00:22:45,060 --> 00:22:52,030
size of the node or<font color="#CCCCCC"> the</font><font color="#E5E5E5"> actual data and</font>

440
00:22:49,560 --> 00:22:53,919
<font color="#E5E5E5">eventually going to</font><font color="#CCCCCC"> reply</font><font color="#E5E5E5"> back to XD</font>

441
00:22:52,030 --> 00:22:57,310
code frame<font color="#E5E5E5"> in this way I managed to</font>

442
00:22:53,920 --> 00:23:01,120
<font color="#E5E5E5">generate</font><font color="#CCCCCC"> I know seven hundred megabyte</font>

443
00:22:57,310 --> 00:23:05,860
<font color="#CCCCCC">of different unique</font><font color="#E5E5E5"> civilized serialize</font>

444
00:23:01,120 --> 00:23:08,199
the corrupted buffers and to see what's

445
00:23:05,860 --> 00:23:12,909
going<font color="#E5E5E5"> on so I let it tear to run for I</font>

446
00:23:08,200 --> 00:23:17,320
<font color="#E5E5E5">think few hours and well the results</font>

447
00:23:12,910 --> 00:23:19,960
were just<font color="#E5E5E5"> huge</font><font color="#CCCCCC"> I was being able to</font>

448
00:23:17,320 --> 00:23:22,149
create<font color="#E5E5E5"> about three thousand crushes on</font>

449
00:23:19,960 --> 00:23:24,160
media server day and after<font color="#E5E5E5"> going through</font>

450
00:23:22,150 --> 00:23:27,780
<font color="#E5E5E5">those brushes I found out that there</font><font color="#CCCCCC"> are</font>

451
00:23:24,160 --> 00:23:29,740
31 unique<font color="#E5E5E5"> rosters which is still a lot</font>

452
00:23:27,780 --> 00:23:32,710
<font color="#CCCCCC">after going through</font><font color="#E5E5E5"> those crashes</font>

453
00:23:29,740 --> 00:23:35,590
manually<font color="#E5E5E5"> and and writing some scripts</font>

454
00:23:32,710 --> 00:23:39,040
<font color="#E5E5E5">for those I found</font><font color="#CCCCCC"> out that the venerable</font>

455
00:23:35,590 --> 00:23:41,709
depth<font color="#E5E5E5"> but still not vulnerabilities some</font>

456
00:23:39,040 --> 00:23:44,440
stressors<font color="#E5E5E5"> Apple</font><font color="#CCCCCC"> for gather from probably</font>

457
00:23:41,710 --> 00:23:46,930
debug sessions<font color="#E5E5E5"> some</font><font color="#CCCCCC"> mildly reference</font><font color="#E5E5E5"> and</font>

458
00:23:44,440 --> 00:23:48,700
some more<font color="#E5E5E5"> interesting bugs like use</font>

459
00:23:46,930 --> 00:23:54,450
after free<font color="#CCCCCC"> out-of-bounds</font><font color="#E5E5E5"> read and out of</font>

460
00:23:48,700 --> 00:23:54,450
bounds<font color="#CCCCCC"> right</font><font color="#E5E5E5"> sorry</font>

461
00:23:54,510 --> 00:24:03,129
so while I<font color="#E5E5E5"> was traveling</font><font color="#CCCCCC"> to DEFCON</font>

462
00:23:57,070 --> 00:24:04,870
<font color="#CCCCCC">blanket I think it was</font><font color="#E5E5E5"> last year</font><font color="#CCCCCC"> I was</font>

463
00:24:03,130 --> 00:24:08,160
<font color="#E5E5E5">very thrilled about it I wanted to go</font>

464
00:24:04,870 --> 00:24:11,830
back<font color="#CCCCCC"> and see what I have in</font><font color="#E5E5E5"> my hands and</font>

465
00:24:08,160 --> 00:24:16,330
what<font color="#E5E5E5"> happened next was the</font><font color="#CCCCCC"> most</font><font color="#E5E5E5"> obvious</font>

466
00:24:11,830 --> 00:24:20,799
for any I was researcher iOS 11 and

467
00:24:16,330 --> 00:24:22,720
as long<font color="#CCCCCC"> as they decided to</font><font color="#E5E5E5"> implement the</font>

468
00:24:20,799 --> 00:24:25,929
new important stuff like document

469
00:24:22,720 --> 00:24:28,929
scanning or iPad multitasking trying to

470
00:24:25,929 --> 00:24:34,600
do it<font color="#E5E5E5"> again they also decided to</font>

471
00:24:28,929 --> 00:24:38,950
refactor by the server<font color="#CCCCCC"> D so I tried it</font>

472
00:24:34,600 --> 00:24:42,000
again<font color="#E5E5E5"> by all of my new corrupted buffers</font>

473
00:24:38,950 --> 00:24:44,529
<font color="#E5E5E5">but no it didn't work it stopped working</font>

474
00:24:42,000 --> 00:24:46,390
<font color="#E5E5E5">so I could decide whether</font><font color="#CCCCCC"> I want to do</font>

475
00:24:44,529 --> 00:24:48,700
it again<font color="#CCCCCC"> maybe</font><font color="#E5E5E5"> I missed something maybe</font>

476
00:24:46,390 --> 00:24:52,419
I'm not using the API calls like the<font color="#E5E5E5"> APL</font>

477
00:24:48,700 --> 00:24:54,130
the API<font color="#E5E5E5"> call correctly but what I had in</font>

478
00:24:52,419 --> 00:24:57,190
mind if this is what I<font color="#E5E5E5"> could achieve on</font>

479
00:24:54,130 --> 00:25:00,639
my first try<font color="#CCCCCC"> I can do some I can do it</font>

480
00:24:57,190 --> 00:25:03,210
again<font color="#E5E5E5"> let's do it</font><font color="#CCCCCC"> with</font><font color="#E5E5E5"> blue</font><font color="#CCCCCC"> to deep blue</font>

481
00:25:00,639 --> 00:25:06,370
deep just<font color="#E5E5E5"> to give you some terms it was</font>

482
00:25:03,210 --> 00:25:10,360
rebranded from BT<font color="#E5E5E5"> server</font>

483
00:25:06,370 --> 00:25:14,199
<font color="#E5E5E5">it is implementing the Bluetooth stack</font>

484
00:25:10,360 --> 00:25:15,549
on<font color="#CCCCCC"> the user mode</font><font color="#E5E5E5"> and it actually</font>

485
00:25:14,200 --> 00:25:19,600
centralized all the Bluetooth

486
00:25:15,549 --> 00:25:22,299
communication on brutal day and each

487
00:25:19,600 --> 00:25:26,320
process with<font color="#CCCCCC"> Bluetooth an entitlement</font>

488
00:25:22,299 --> 00:25:28,510
<font color="#E5E5E5">will communicate using</font><font color="#CCCCCC"> bluetooth deep</font>

489
00:25:26,320 --> 00:25:30,480
that<font color="#CCCCCC"> means it will</font><font color="#E5E5E5"> not be able</font><font color="#CCCCCC"> to</font>

490
00:25:28,510 --> 00:25:33,129
<font color="#E5E5E5">communicate directly to the</font><font color="#CCCCCC"> colonel's</font>

491
00:25:30,480 --> 00:25:36,159
in our terms<font color="#CCCCCC"> this</font><font color="#E5E5E5"> is a trusted broker</font>

492
00:25:33,130 --> 00:25:38,559
<font color="#E5E5E5">and a lot of</font><font color="#CCCCCC"> other demons and</font>

493
00:25:36,159 --> 00:25:41,380
applications are using<font color="#E5E5E5"> blue today so</font>

494
00:25:38,559 --> 00:25:45,070
it's really interesting<font color="#E5E5E5"> way to widen our</font>

495
00:25:41,380 --> 00:25:46,899
attack surface so I did all of this all

496
00:25:45,070 --> 00:25:49,029
<font color="#CCCCCC">of what I did in medicine but</font><font color="#E5E5E5"> the</font>

497
00:25:46,899 --> 00:25:50,620
<font color="#CCCCCC">understanding the</font><font color="#E5E5E5"> callbacks finding out</font>

498
00:25:49,029 --> 00:25:54,850
where is the code is<font color="#CCCCCC"> exactly been</font>

499
00:25:50,620 --> 00:26:00,789
executed and I found this callback which

500
00:25:54,850 --> 00:26:03,189
is called<font color="#E5E5E5"> get pair devices and again we</font>

501
00:26:00,789 --> 00:26:05,529
have the in and out message this<font color="#E5E5E5"> time</font><font color="#CCCCCC"> it</font>

502
00:26:03,190 --> 00:26:09,389
looks much better<font color="#E5E5E5"> because I implemented</font>

503
00:26:05,529 --> 00:26:12,789
<font color="#CCCCCC">some Ida Ida Ida Python script that</font><font color="#E5E5E5"> is</font>

504
00:26:09,389 --> 00:26:16,559
taking all the arguments<font color="#E5E5E5"> from that from</font>

505
00:26:12,789 --> 00:26:21,190
a legitimate<font color="#E5E5E5"> applique</font><font color="#CCCCCC"> from a from the</font>

506
00:26:16,559 --> 00:26:23,710
sorry from<font color="#E5E5E5"> the</font><font color="#CCCCCC"> demon and reflecting it</font>

507
00:26:21,190 --> 00:26:26,520
<font color="#CCCCCC">back to either</font><font color="#E5E5E5"> therefore I will be able</font>

508
00:26:23,710 --> 00:26:30,360
<font color="#E5E5E5">to have the correct struck sizes and</font>

509
00:26:26,520 --> 00:26:33,700
maybe I will<font color="#E5E5E5"> be</font><font color="#CCCCCC"> able</font><font color="#E5E5E5"> to automatically</font>

510
00:26:30,360 --> 00:26:38,049
fill those fields<font color="#CCCCCC"> so</font><font color="#E5E5E5"> it will look much</font>

511
00:26:33,700 --> 00:26:41,650
more beautiful<font color="#E5E5E5"> actually</font><font color="#CCCCCC"> so let's dive in</font>

512
00:26:38,049 --> 00:26:43,690
<font color="#CCCCCC">to get per get</font><font color="#E5E5E5"> pair devices internal</font>

513
00:26:41,650 --> 00:26:46,840
<font color="#E5E5E5">which actually the</font><font color="#CCCCCC"> implementation of the</font>

514
00:26:43,690 --> 00:26:49,450
<font color="#CCCCCC">callback get per</font><font color="#E5E5E5"> devices and the fifth</font>

515
00:26:46,840 --> 00:26:54,010
<font color="#CCCCCC">argument is data that</font><font color="#E5E5E5"> is absolutely</font>

516
00:26:49,450 --> 00:26:56,650
controlled by<font color="#E5E5E5"> our input so I'll give you</font>

517
00:26:54,010 --> 00:27:04,090
a moment<font color="#CCCCCC"> just</font><font color="#E5E5E5"> if you</font><font color="#CCCCCC"> are seeing</font><font color="#E5E5E5"> anything</font>

518
00:26:56,650 --> 00:27:06,850
else<font color="#CCCCCC"> we</font><font color="#E5E5E5"> freshly though so if you were</font>

519
00:27:04,090 --> 00:27:10,149
quick enough<font color="#CCCCCC"> to notice</font><font color="#E5E5E5"> it there is</font>

520
00:27:06,850 --> 00:27:14,649
something<font color="#CCCCCC"> unusual here</font><font color="#E5E5E5"> the fifth</font>

521
00:27:10,150 --> 00:27:17,260
argument<font color="#E5E5E5"> is controlled</font><font color="#CCCCCC"> by us then what</font>

522
00:27:14,650 --> 00:27:20,700
<font color="#CCCCCC">habit</font><font color="#E5E5E5"> try to do here was to reference</font>

523
00:27:17,260 --> 00:27:24,280
the<font color="#E5E5E5"> first variable on</font><font color="#CCCCCC"> the stack</font>

524
00:27:20,700 --> 00:27:26,350
documenting<font color="#E5E5E5"> from it that is absolutely</font>

525
00:27:24,280 --> 00:27:28,840
controlled by us from our sandbox

526
00:27:26,350 --> 00:27:32,490
application and then<font color="#CCCCCC"> they're assigning</font>

527
00:27:28,840 --> 00:27:37,149
it to a new pointer on<font color="#CCCCCC"> the own new</font>

528
00:27:32,490 --> 00:27:39,400
variable on<font color="#CCCCCC"> the step so I thought about</font>

529
00:27:37,150 --> 00:27:41,530
<font color="#E5E5E5">it a little and the web had I had in</font>

530
00:27:39,400 --> 00:27:43,620
mind was<font color="#CCCCCC"> that Apple just try to</font>

531
00:27:41,530 --> 00:27:47,470
initialize a dynamic array<font color="#E5E5E5"> on the stack</font>

532
00:27:43,620 --> 00:27:50,889
<font color="#E5E5E5">but what is the problem with</font><font color="#CCCCCC"> it let's</font>

533
00:27:47,470 --> 00:27:53,590
see they are going to<font color="#E5E5E5"> take the fifth</font>

534
00:27:50,890 --> 00:27:57,540
<font color="#E5E5E5">argument which is</font><font color="#CCCCCC"> w-4 they're</font><font color="#E5E5E5"> going to</font>

535
00:27:53,590 --> 00:27:59,409
do some calculation put it in<font color="#CCCCCC"> x9 and</font>

536
00:27:57,540 --> 00:28:03,730
they're going to take the stack pointer

537
00:27:59,410 --> 00:28:05,620
<font color="#E5E5E5">with</font><font color="#CCCCCC"> XA but eventually they're</font><font color="#E5E5E5"> going</font><font color="#CCCCCC"> to</font>

538
00:28:03,730 --> 00:28:08,850
put all this calculation book to the

539
00:28:05,620 --> 00:28:12,489
back to the spec to the stack pointer so

540
00:28:08,850 --> 00:28:14,290
it's pretty<font color="#CCCCCC"> wait</font><font color="#E5E5E5"> because it's not wait</font>

541
00:28:12,490 --> 00:28:17,169
it's<font color="#E5E5E5"> just they are trying to allocate</font>

542
00:28:14,290 --> 00:28:19,059
new<font color="#E5E5E5"> memory</font><font color="#CCCCCC"> on the stack</font><font color="#E5E5E5"> but</font><font color="#CCCCCC"> they're</font><font color="#E5E5E5"> what</font>

543
00:28:17,169 --> 00:28:21,549
they<font color="#E5E5E5"> felt to do was to check how much</font>

544
00:28:19,059 --> 00:28:23,860
memory<font color="#E5E5E5"> I'm</font><font color="#CCCCCC"> allocating so they</font>

545
00:28:21,549 --> 00:28:29,290
<font color="#E5E5E5">acknowledge this bag</font><font color="#CCCCCC"> will</font><font color="#E5E5E5"> call with the</font>

546
00:28:23,860 --> 00:28:31,629
<font color="#E5E5E5">CV 4095 which is basically a relative</font>

547
00:28:29,290 --> 00:28:33,730
control over the stack pointer which

548
00:28:31,630 --> 00:28:36,850
could lead to inflation<font color="#E5E5E5"> inside of the</font>

549
00:28:33,730 --> 00:28:40,780
internal inside of the internal

550
00:28:36,850 --> 00:28:42,919
functions<font color="#E5E5E5"> and eat this bug exists in</font>

551
00:28:40,780 --> 00:28:47,420
different<font color="#E5E5E5"> six different</font>

552
00:28:42,920 --> 00:28:51,050
call back<font color="#E5E5E5"> the</font><font color="#CCCCCC"> head</font><font color="#E5E5E5"> so how they fixed</font><font color="#CCCCCC"> it</font>

553
00:28:47,420 --> 00:28:52,880
<font color="#CCCCCC">they</font><font color="#E5E5E5"> decided to fix it by checking how</font>

554
00:28:51,050 --> 00:28:58,129
<font color="#CCCCCC">much memory I'm trying to allocate on</font>

555
00:28:52,880 --> 00:29:00,440
the stack<font color="#E5E5E5"> so it was it this was</font><font color="#CCCCCC"> the</font>

556
00:28:58,130 --> 00:29:02,540
first bug I found in blue<font color="#CCCCCC"> 2d I just saw</font>

557
00:29:00,440 --> 00:29:04,520
that<font color="#E5E5E5"> I think someone didn't really</font>

558
00:29:02,540 --> 00:29:06,620
thought about<font color="#CCCCCC"> what they are</font><font color="#E5E5E5"> doing it</font>

559
00:29:04,520 --> 00:29:08,570
correctly<font color="#CCCCCC"> this is not something you</font>

560
00:29:06,620 --> 00:29:11,719
should<font color="#E5E5E5"> do in</font><font color="#CCCCCC"> your code</font><font color="#E5E5E5"> allocating on the</font>

561
00:29:08,570 --> 00:29:13,689
stack without<font color="#E5E5E5"> checking their the lengths</font>

562
00:29:11,720 --> 00:29:17,210
of how much you are trying to allocate

563
00:29:13,690 --> 00:29:18,680
<font color="#E5E5E5">so let's understand how</font><font color="#CCCCCC"> that</font><font color="#E5E5E5"> Bluetooth</font>

564
00:29:17,210 --> 00:29:21,110
session actually<font color="#CCCCCC"> works</font>

565
00:29:18,680 --> 00:29:24,020
<font color="#CCCCCC">Oh blue 2d will hold all of their touch</font>

566
00:29:21,110 --> 00:29:26,199
clients<font color="#CCCCCC"> and touch clients</font><font color="#E5E5E5"> our blue PT</font>

567
00:29:24,020 --> 00:29:29,540
sessions<font color="#E5E5E5"> Bluetooth sessions you have</font>

568
00:29:26,200 --> 00:29:32,500
demons<font color="#E5E5E5"> you have</font><font color="#CCCCCC"> the clients can</font><font color="#E5E5E5"> be</font>

569
00:29:29,540 --> 00:29:36,110
demons can be applications<font color="#E5E5E5"> and whenever</font>

570
00:29:32,500 --> 00:29:39,590
let's see how I'm laser okay<font color="#E5E5E5"> and</font>

571
00:29:36,110 --> 00:29:41,959
whenever a demon<font color="#E5E5E5"> wishes to attach to</font>

572
00:29:39,590 --> 00:29:48,439
blue 2d and start start<font color="#E5E5E5"> to use blue 2d</font>

573
00:29:41,960 --> 00:29:50,900
capabilities<font color="#E5E5E5"> it is going to call the</font><font color="#CCCCCC"> API</font>

574
00:29:48,440 --> 00:29:53,540
<font color="#E5E5E5">called</font><font color="#CCCCCC"> BT session attached and it's</font>

575
00:29:50,900 --> 00:29:56,300
going<font color="#E5E5E5"> to hold some information over of</font>

576
00:29:53,540 --> 00:29:59,300
their of the session and we'll ask blue

577
00:29:56,300 --> 00:30:02,899
<font color="#E5E5E5">2d to hold that information as part of</font>

578
00:29:59,300 --> 00:30:08,180
the<font color="#CCCCCC"> initialization process</font><font color="#E5E5E5"> chunk D is</font>

579
00:30:02,900 --> 00:30:11,960
also going to send the API call<font color="#CCCCCC"> bit ik</font>

580
00:30:08,180 --> 00:30:13,670
local device<font color="#CCCCCC"> add callbacks which was a</font>

581
00:30:11,960 --> 00:30:16,130
<font color="#E5E5E5">little bit weird to me</font>

582
00:30:13,670 --> 00:30:19,450
why does<font color="#E5E5E5"> sharing Dean needs to add</font>

583
00:30:16,130 --> 00:30:23,060
callbacks on Bluetooth<font color="#E5E5E5"> this side I mean</font>

584
00:30:19,450 --> 00:30:25,160
something was weird here but<font color="#E5E5E5"> basically</font>

585
00:30:23,060 --> 00:30:27,679
what I had in mind was<font color="#E5E5E5"> that callbacks is</font>

586
00:30:25,160 --> 00:30:30,110
always a<font color="#E5E5E5"> really</font><font color="#CCCCCC"> good thing you should</font>

587
00:30:27,680 --> 00:30:32,570
start looking<font color="#CCCCCC"> for because it's holding</font>

588
00:30:30,110 --> 00:30:35,929
<font color="#CCCCCC">add</font><font color="#E5E5E5"> versus let's see</font><font color="#CCCCCC"> where what can I do</font>

589
00:30:32,570 --> 00:30:38,419
here<font color="#E5E5E5"> so what I decided</font><font color="#CCCCCC"> to do was to dive</font>

590
00:30:35,930 --> 00:30:42,590
in into the Bluetooth<font color="#CCCCCC"> bit</font><font color="#E5E5E5"> a local device</font>

591
00:30:38,420 --> 00:30:45,410
at callbacks process and I went I<font color="#E5E5E5"> found</font>

592
00:30:42,590 --> 00:30:49,480
the callback by the actually it's the

593
00:30:45,410 --> 00:30:52,430
<font color="#CCCCCC">mail if the message ID 3</font><font color="#E5E5E5"> this is the</font>

594
00:30:49,480 --> 00:30:56,460
<font color="#E5E5E5">function that handles</font><font color="#CCCCCC"> the</font><font color="#E5E5E5"> BT local</font>

595
00:30:52,430 --> 00:30:59,519
device at callback under<font color="#CCCCCC"> in blue today</font>

596
00:30:56,460 --> 00:31:01,320
and the<font color="#CCCCCC"> add callbacks internal which is</font>

597
00:30:59,519 --> 00:31:03,740
the actual implementation<font color="#E5E5E5"> of the</font>

598
00:31:01,320 --> 00:31:08,700
<font color="#E5E5E5">callback is getting three different</font>

599
00:31:03,740 --> 00:31:10,830
parameters one is the session<font color="#E5E5E5"> the second</font>

600
00:31:08,700 --> 00:31:15,179
one is the callback<font color="#CCCCCC"> called the address</font>

601
00:31:10,830 --> 00:31:17,340
<font color="#E5E5E5">and the third one is the data so let's</font>

602
00:31:15,179 --> 00:31:20,129
think about<font color="#E5E5E5"> it for a moment what we saw</font>

603
00:31:17,340 --> 00:31:22,320
on medicine if<font color="#E5E5E5"> you remember they didn't</font>

604
00:31:20,129 --> 00:31:25,498
really<font color="#E5E5E5"> use any session token' they used</font>

605
00:31:22,320 --> 00:31:28,649
they identified the session<font color="#E5E5E5"> to medicine</font>

606
00:31:25,499 --> 00:31:30,210
ready<font color="#E5E5E5"> by the local port but now they're</font>

607
00:31:28,649 --> 00:31:32,850
using<font color="#CCCCCC"> some kind of session</font>

608
00:31:30,210 --> 00:31:35,789
this data is controlled by by us from

609
00:31:32,850 --> 00:31:38,730
<font color="#E5E5E5">our sandbox application the second one</font>

610
00:31:35,789 --> 00:31:41,669
is the callback<font color="#E5E5E5"> why are they are why</font>

611
00:31:38,730 --> 00:31:46,039
they<font color="#CCCCCC"> are sending some address to blue to</font>

612
00:31:41,669 --> 00:31:48,299
D that<font color="#CCCCCC"> is also will so let's see</font>

613
00:31:46,039 --> 00:31:51,259
basically<font color="#E5E5E5"> what they're doing on blue</font>

614
00:31:48,299 --> 00:31:55,440
today is taking<font color="#E5E5E5"> that session</font><font color="#CCCCCC"> token' and</font>

615
00:31:51,259 --> 00:31:58,230
verifying<font color="#E5E5E5"> it against dictionary of all</font>

616
00:31:55,440 --> 00:32:03,330
the<font color="#E5E5E5"> attached token and if you can't find</font>

617
00:31:58,230 --> 00:32:05,269
that<font color="#E5E5E5"> the the token the session sorry it</font>

618
00:32:03,330 --> 00:32:07,830
is going to return<font color="#E5E5E5"> seven which</font><font color="#CCCCCC"> means</font>

619
00:32:05,269 --> 00:32:13,320
arrow<font color="#E5E5E5"> I could I could not find the</font>

620
00:32:07,830 --> 00:32:13,769
session<font color="#E5E5E5"> okay so I thought about it for a</font>

621
00:32:13,320 --> 00:32:16,559
moment

622
00:32:13,769 --> 00:32:19,409
<font color="#E5E5E5">actually I just try to play with it a</font>

623
00:32:16,559 --> 00:32:23,158
<font color="#CCCCCC">little but then it came to my mind</font><font color="#E5E5E5"> what</font>

624
00:32:19,409 --> 00:32:25,860
<font color="#E5E5E5">if I am a malicious</font><font color="#CCCCCC"> application and I</font>

625
00:32:23,159 --> 00:32:28,230
will repeatedly<font color="#E5E5E5"> try to send</font><font color="#CCCCCC"> bt local</font>

626
00:32:25,860 --> 00:32:31,439
device<font color="#CCCCCC"> ID call backs and to</font><font color="#E5E5E5"> brute force</font>

627
00:32:28,230 --> 00:32:33,629
that<font color="#E5E5E5"> session</font><font color="#CCCCCC"> token' again i don't know</font>

628
00:32:31,440 --> 00:32:36,869
what is the size of<font color="#E5E5E5"> that of that field</font>

629
00:32:33,629 --> 00:32:40,918
<font color="#E5E5E5">but let's think about it theoretically</font>

630
00:32:36,869 --> 00:32:43,259
if<font color="#CCCCCC"> i will be able to from my sandbox</font>

631
00:32:40,919 --> 00:32:45,749
application to<font color="#E5E5E5"> brute force that</font><font color="#CCCCCC"> session</font>

632
00:32:43,259 --> 00:32:50,340
<font color="#CCCCCC">token' and eventually bypass the check i</font>

633
00:32:45,749 --> 00:32:53,519
will be<font color="#E5E5E5"> able to add callbacks</font><font color="#CCCCCC"> to sharing</font>

634
00:32:50,340 --> 00:32:56,369
<font color="#CCCCCC">the eventually and</font><font color="#E5E5E5"> if there is going</font><font color="#CCCCCC"> to</font>

635
00:32:53,519 --> 00:32:58,889
<font color="#CCCCCC">be an</font><font color="#E5E5E5"> event sharing d we just go to</font>

636
00:32:56,369 --> 00:33:04,499
address<font color="#CCCCCC"> that was controlled by</font><font color="#E5E5E5"> me with</font>

637
00:32:58,889 --> 00:33:06,240
with the data so<font color="#E5E5E5"> the next</font><font color="#CCCCCC"> slide</font><font color="#E5E5E5"> is</font>

638
00:33:04,499 --> 00:33:08,809
<font color="#CCCCCC">actually really funny</font><font color="#E5E5E5"> because all it</font>

639
00:33:06,240 --> 00:33:12,110
takes is<font color="#CCCCCC"> just doing</font><font color="#E5E5E5"> this</font>

640
00:33:08,809 --> 00:33:18,158
is to make a<font color="#E5E5E5"> four loop increment from</font>

641
00:33:12,110 --> 00:33:23,529
zero<font color="#E5E5E5"> to</font><font color="#CCCCCC"> two bytes and doing some bitwise</font>

642
00:33:18,159 --> 00:33:27,879
operation to order it but and to try to

643
00:33:23,529 --> 00:33:32,899
add new<font color="#CCCCCC"> callback with two that bit with</font>

644
00:33:27,879 --> 00:33:35,840
data<font color="#CCCCCC"> 1 3 3 7 and what it actually</font><font color="#E5E5E5"> was</font>

645
00:33:32,899 --> 00:33:41,018
<font color="#E5E5E5">supposed to do is that</font><font color="#CCCCCC"> I found out</font><font color="#E5E5E5"> that</font>

646
00:33:35,840 --> 00:33:44,149
the session<font color="#CCCCCC"> token' was only 2 bytes</font><font color="#E5E5E5"> and</font>

647
00:33:41,019 --> 00:33:47,059
basically what it<font color="#CCCCCC"> means</font><font color="#E5E5E5"> that if this is</font>

648
00:33:44,149 --> 00:33:49,459
<font color="#CCCCCC">working this was</font><font color="#E5E5E5"> a moment before I</font>

649
00:33:47,059 --> 00:33:52,610
executed it<font color="#E5E5E5"> if it's</font><font color="#CCCCCC"> working</font><font color="#E5E5E5"> I will be</font>

650
00:33:49,460 --> 00:33:57,559
able<font color="#E5E5E5"> to add new callbacks to all of the</font>

651
00:33:52,610 --> 00:33:59,689
clients<font color="#E5E5E5"> of blue</font><font color="#CCCCCC"> 2d</font><font color="#E5E5E5"> so I just executed it</font>

652
00:33:57,559 --> 00:34:02,539
from a<font color="#CCCCCC"> sandbox</font><font color="#E5E5E5"> application of course and</font>

653
00:33:59,690 --> 00:34:04,429
it actually<font color="#CCCCCC"> crashed my</font><font color="#E5E5E5"> old device all of</font>

654
00:34:02,539 --> 00:34:07,070
<font color="#CCCCCC">the demons were just crashing and</font>

655
00:34:04,429 --> 00:34:09,918
jumping<font color="#E5E5E5"> to address that was fully</font>

656
00:34:07,070 --> 00:34:12,710
controlled by me<font color="#E5E5E5"> each one of the demons</font>

657
00:34:09,918 --> 00:34:14,299
<font color="#CCCCCC">that are using blue 2d</font><font color="#E5E5E5"> which here is</font>

658
00:34:12,710 --> 00:34:16,760
just<font color="#E5E5E5"> that I think</font><font color="#CCCCCC"> is</font><font color="#E5E5E5"> shortly I think</font>

659
00:34:14,300 --> 00:34:19,069
there are<font color="#E5E5E5"> even more and I also can</font>

660
00:34:16,760 --> 00:34:23,179
<font color="#CCCCCC">resist</font><font color="#E5E5E5"> it</font><font color="#CCCCCC"> can't control over one of the</font>

661
00:34:19,069 --> 00:34:23,989
rigid registers for exploit in order to

662
00:34:23,179 --> 00:34:25,879
exploit it

663
00:34:23,989 --> 00:34:28,819
of course there<font color="#CCCCCC"> are there is</font><font color="#E5E5E5"> some work</font>

664
00:34:25,879 --> 00:34:32,239
to do<font color="#E5E5E5"> but basically what you</font><font color="#CCCCCC"> did this</font><font color="#E5E5E5"> is</font>

665
00:34:28,819 --> 00:34:37,879
<font color="#E5E5E5">not this is this is a really really good</font>

666
00:34:32,239 --> 00:34:41,629
start to exploit those demons so<font color="#E5E5E5"> app I</font>

667
00:34:37,879 --> 00:34:43,520
<font color="#CCCCCC">decided to fix it they acknowledge the</font>

668
00:34:41,629 --> 00:34:47,118
bug of course and they decided<font color="#CCCCCC"> to fix</font><font color="#E5E5E5"> it</font>

669
00:34:43,520 --> 00:34:50,869
and their face<font color="#E5E5E5"> is pretty simple</font><font color="#CCCCCC"> and on</font>

670
00:34:47,119 --> 00:34:55,520
first sight it<font color="#CCCCCC"> it sounds pretty decent</font>

671
00:34:50,869 --> 00:34:58,130
<font color="#CCCCCC">one</font><font color="#E5E5E5"> and they decided to</font><font color="#CCCCCC"> use some</font><font color="#E5E5E5"> global</font>

672
00:34:55,520 --> 00:35:00,410
<font color="#E5E5E5">variable</font><font color="#CCCCCC"> that is sender ID and</font><font color="#E5E5E5"> is being</font>

673
00:34:58,130 --> 00:35:04,900
generated<font color="#E5E5E5"> when they are initializing</font>

674
00:35:00,410 --> 00:35:04,899
them where they are initializing<font color="#CCCCCC"> there</font>

675
00:35:04,930 --> 00:35:15,440
this<font color="#E5E5E5"> is the Bluetooth session and that</font>

676
00:35:09,349 --> 00:35:18,610
that token<font color="#E5E5E5"> is initialized using at</font><font color="#CCCCCC"> for</font>

677
00:35:15,440 --> 00:35:21,580
<font color="#CCCCCC">random which is search</font>

678
00:35:18,610 --> 00:35:23,950
<font color="#CCCCCC">it's</font><font color="#E5E5E5"> four bytes so they decided to</font>

679
00:35:21,580 --> 00:35:26,410
<font color="#E5E5E5">change the token from two bytes to four</font>

680
00:35:23,950 --> 00:35:28,680
bytes to any<font color="#E5E5E5"> of you that is familiar</font>

681
00:35:26,410 --> 00:35:32,290
boot forcing two bytes and four bytes

682
00:35:28,680 --> 00:35:34,810
it's the same so they keep the they kept

683
00:35:32,290 --> 00:35:37,060
the<font color="#E5E5E5"> bag</font><font color="#CCCCCC"> it</font><font color="#E5E5E5"> was allegedly fixed on eleven</font>

684
00:35:34,810 --> 00:35:40,740
point two point five and the<font color="#E5E5E5"> bug is</font>

685
00:35:37,060 --> 00:35:44,200
actually still existing<font color="#CCCCCC"> eleven</font><font color="#E5E5E5"> off 0.4</font>

686
00:35:40,740 --> 00:35:46,930
so the question I got<font color="#E5E5E5"> a lot on Twitter</font>

687
00:35:44,200 --> 00:35:50,560
<font color="#E5E5E5">when there is going to</font><font color="#CCCCCC"> be a jailbreak</font><font color="#E5E5E5"> so</font>

688
00:35:46,930 --> 00:35:54,480
I didn't publish any but<font color="#E5E5E5"> on the light on</font>

689
00:35:50,560 --> 00:35:59,620
the last Def Con a guy named spark<font color="#E5E5E5"> from</font>

690
00:35:54,480 --> 00:36:02,830
Alabama<font color="#CCCCCC"> I think yes a claim to fully</font>

691
00:35:59,620 --> 00:36:06,490
exploit that<font color="#E5E5E5"> bug using in another prima</font>

692
00:36:02,830 --> 00:36:11,380
<font color="#E5E5E5">TV ad and actually he made a private</font>

693
00:36:06,490 --> 00:36:14,830
<font color="#E5E5E5">jail break out of it so what did</font><font color="#CCCCCC"> we</font><font color="#E5E5E5"> have</font>

694
00:36:11,380 --> 00:36:17,830
<font color="#E5E5E5">here my main</font><font color="#CCCCCC"> goal was to</font><font color="#E5E5E5"> find a sandbox</font>

695
00:36:14,830 --> 00:36:20,080
<font color="#CCCCCC">Tech escape in order to</font><font color="#E5E5E5"> widen as much as</font>

696
00:36:17,830 --> 00:36:22,690
possible<font color="#E5E5E5"> my attack surface and what I</font>

697
00:36:20,080 --> 00:36:25,029
found is that that<font color="#E5E5E5"> could control all</font><font color="#CCCCCC"> of</font>

698
00:36:22,690 --> 00:36:29,910
the<font color="#E5E5E5"> demons that actually made my attack</font>

699
00:36:25,030 --> 00:36:34,030
surface<font color="#E5E5E5"> just huge to</font><font color="#CCCCCC"> the kernel</font><font color="#E5E5E5"> so</font>

700
00:36:29,910 --> 00:36:38,680
basically that is<font color="#E5E5E5"> it some references I</font>

701
00:36:34,030 --> 00:36:42,790
think<font color="#CCCCCC"> worth mentioning J tool and some</font>

702
00:36:38,680 --> 00:36:45,660
others tools<font color="#E5E5E5"> I used you can find a fully</font>

703
00:36:42,790 --> 00:36:49,630
more detailed<font color="#E5E5E5"> view see under my github</font>

704
00:36:45,660 --> 00:36:53,440
you<font color="#CCCCCC"> can find the spark blog post</font><font color="#E5E5E5"> on this</font>

705
00:36:49,630 --> 00:36:58,780
presentation<font color="#E5E5E5"> on the last two</font><font color="#CCCCCC"> links and I</font>

706
00:36:53,440 --> 00:37:00,460
think it was a reading and some credits

707
00:36:58,780 --> 00:37:04,150
of course to the<font color="#E5E5E5"> Imperium for my</font>

708
00:37:00,460 --> 00:37:06,070
paycheck and<font color="#E5E5E5"> Jonathan Levine from making</font>

709
00:37:04,150 --> 00:37:09,130
a lot of<font color="#E5E5E5"> references few of my colleagues</font>

710
00:37:06,070 --> 00:37:12,700
<font color="#E5E5E5">Adam Tamara nakiya's and of course to</font>

711
00:37:09,130 --> 00:37:15,220
spark for publishing<font color="#E5E5E5"> semi publishing and</font>

712
00:37:12,700 --> 00:37:19,240
<font color="#CCCCCC">exploits for this phone</font><font color="#E5E5E5"> vulnerability</font>

713
00:37:15,220 --> 00:37:23,169
<font color="#CCCCCC">and basically that is it thank you for</font>

714
00:37:19,240 --> 00:37:25,439
<font color="#CCCCCC">hearing me out</font><font color="#E5E5E5"> and think what is much</font>

715
00:37:23,170 --> 00:37:25,440
funny

716
00:37:29,140 --> 00:37:41,210
are there any further<font color="#CCCCCC"> questions from</font><font color="#E5E5E5"> the</font>

717
00:37:31,790 --> 00:37:43,040
room perhaps<font color="#E5E5E5"> yep a nice talk so my</font>

718
00:37:41,210 --> 00:37:44,870
question is when<font color="#CCCCCC"> you said that you were</font>

719
00:37:43,040 --> 00:37:46,759
communicating<font color="#CCCCCC"> with media server D or</font>

720
00:37:44,870 --> 00:37:49,609
other demons with using marked messages

721
00:37:46,760 --> 00:37:52,550
you do<font color="#CCCCCC"> actually write this</font><font color="#E5E5E5"> mark code in</font>

722
00:37:49,610 --> 00:37:54,980
your<font color="#E5E5E5"> app or</font><font color="#CCCCCC"> used</font><font color="#E5E5E5"> API switch in turn</font><font color="#CCCCCC"> use</font>

723
00:37:52,550 --> 00:37:58,870
<font color="#CCCCCC">marked messages internally</font><font color="#E5E5E5"> okay</font>

724
00:37:54,980 --> 00:38:02,570
basically it's not<font color="#E5E5E5"> working okay</font>

725
00:37:58,870 --> 00:38:04,580
<font color="#E5E5E5">basically why do you want my</font><font color="#CCCCCC"> fasting is</font>

726
00:38:02,570 --> 00:38:06,320
a message that<font color="#CCCCCC"> we're sending to the</font>

727
00:38:04,580 --> 00:38:07,640
<font color="#CCCCCC">keanu</font><font color="#E5E5E5"> they can</font><font color="#CCCCCC"> we'll deliver it to the</font>

728
00:38:06,320 --> 00:38:10,370
application

729
00:38:07,640 --> 00:38:12,770
<font color="#E5E5E5">I mean to the to the remote port</font><font color="#CCCCCC"> to the</font>

730
00:38:10,370 --> 00:38:15,410
<font color="#CCCCCC">do your where you want to send that</font>

731
00:38:12,770 --> 00:38:20,300
<font color="#E5E5E5">message so was it what you</font><font color="#CCCCCC"> were asking</font>

732
00:38:15,410 --> 00:38:22,640
or she can<font color="#E5E5E5"> basically write all the code</font>

733
00:38:20,300 --> 00:38:24,230
<font color="#CCCCCC">and</font><font color="#E5E5E5"> mark like theoretically right sorry</font>

734
00:38:22,640 --> 00:38:26,240
<font color="#CCCCCC">you can write the whole code and just</font>

735
00:38:24,230 --> 00:38:28,310
<font color="#E5E5E5">mark messaging everything yeah because</font>

736
00:38:26,240 --> 00:38:29,419
everything internally works using<font color="#CCCCCC"> mark</font>

737
00:38:28,310 --> 00:38:31,009
messaging correct

738
00:38:29,420 --> 00:38:33,410
I might just<font color="#CCCCCC"> cook my question was for</font>

739
00:38:31,010 --> 00:38:38,480
<font color="#E5E5E5">this expert did you use API switch</font>

740
00:38:33,410 --> 00:38:40,700
internally<font color="#E5E5E5"> called mark messages because</font>

741
00:38:38,480 --> 00:38:43,820
<font color="#CCCCCC">if a music in from</font><font color="#E5E5E5"> going if I was going</font>

742
00:38:40,700 --> 00:38:47,990
<font color="#CCCCCC">to the little</font><font color="#E5E5E5"> decompression session</font>

743
00:38:43,820 --> 00:38:50,450
decode frame API<font color="#CCCCCC"> I the decode frame API</font>

744
00:38:47,990 --> 00:38:52,700
was going to serialize that message but

745
00:38:50,450 --> 00:38:55,339
<font color="#CCCCCC">I want to send directly</font><font color="#E5E5E5"> those math</font>

746
00:38:52,700 --> 00:39:01,220
messages to<font color="#CCCCCC"> the demon so I could fuzzy</font>

747
00:38:55,340 --> 00:39:08,030
because<font color="#E5E5E5"> Godfather series</font><font color="#CCCCCC"> X any other</font>

748
00:39:01,220 --> 00:39:09,209
<font color="#E5E5E5">questions</font><font color="#CCCCCC"> Thank You</font><font color="#E5E5E5"> Ronnie thank you</font>

749
00:39:08,030 --> 00:39:09,450
<font color="#CCCCCC">very much</font>

750
00:39:09,210 --> 00:39:11,820
[Applause]

751
00:39:09,450 --> 00:39:14,999
[Music]

752
00:39:11,820 --> 00:39:14,999
[Applause]

