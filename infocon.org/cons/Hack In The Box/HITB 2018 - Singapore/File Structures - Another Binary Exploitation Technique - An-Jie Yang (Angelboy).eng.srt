1
00:00:09,570 --> 00:00:15,430
thank you for coming my English is not

2
00:00:12,820 --> 00:00:18,460
good<font color="#CCCCCC"> in addition this is my first</font><font color="#E5E5E5"> speech</font>

3
00:00:15,430 --> 00:00:19,710
in English<font color="#CCCCCC"> so I am very nervous but I</font>

4
00:00:18,460 --> 00:00:23,349
will try my<font color="#CCCCCC"> best</font>

5
00:00:19,710 --> 00:00:26,730
<font color="#E5E5E5">okay</font><font color="#CCCCCC"> okay let's talk I will talk about a</font>

6
00:00:23,349 --> 00:00:30,009
new attack tanker about<font color="#CCCCCC"> my exportation</font>

7
00:00:26,730 --> 00:00:33,430
first torture in C program are usually

8
00:00:30,009 --> 00:00:37,079
<font color="#CCCCCC">created by</font><font color="#E5E5E5"> a</font><font color="#CCCCCC"> co2</font><font color="#E5E5E5"> F open which return a</font>

9
00:00:33,430 --> 00:00:39,960
pointer to one of<font color="#CCCCCC"> release aperture it</font>

10
00:00:37,079 --> 00:00:42,910
<font color="#CCCCCC">identify</font><font color="#E5E5E5"> a stream and a Content</font>

11
00:00:39,960 --> 00:00:45,879
<font color="#E5E5E5">information about the file</font><font color="#CCCCCC"> with which</font>

12
00:00:42,910 --> 00:00:48,699
<font color="#CCCCCC">you want</font><font color="#E5E5E5"> to open first</font><font color="#CCCCCC"> culture</font>

13
00:00:45,879 --> 00:00:53,440
exploitation is one of a common way<font color="#E5E5E5"> to</font>

14
00:00:48,699 --> 00:00:56,379
gain control of<font color="#E5E5E5"> occlusion</font><font color="#CCCCCC"> follow however</font>

15
00:00:53,440 --> 00:00:59,230
to fight again<font color="#E5E5E5"> prevalence</font><font color="#CCCCCC"> I birthday</font>

16
00:00:56,379 --> 00:01:03,489
more and more rotation is<font color="#E5E5E5"> added to</font>

17
00:00:59,230 --> 00:01:07,780
<font color="#E5E5E5">operating system in the</font><font color="#CCCCCC"> GDC</font><font color="#E5E5E5"> such as DEP</font>

18
00:01:03,489 --> 00:01:11,740
<font color="#E5E5E5">SOR and a vita-pop</font><font color="#CCCCCC"> potential today I</font>

19
00:01:07,780 --> 00:01:15,119
will show<font color="#CCCCCC"> you how to use file structure</font>

20
00:01:11,740 --> 00:01:20,339
to bypass reputation and a lunch<font color="#CCCCCC"> Momoko</font>

21
00:01:15,119 --> 00:01:24,430
occlusion in a modern<font color="#CCCCCC"> operating system</font>

22
00:01:20,340 --> 00:01:26,950
<font color="#CCCCCC">okay hi I'm angel boy</font><font color="#E5E5E5"> Hong Kong Taiwan</font><font color="#CCCCCC"> I</font>

23
00:01:24,430 --> 00:01:29,079
am a city of a player in to one server

24
00:01:26,950 --> 00:01:31,540
<font color="#E5E5E5">and</font><font color="#CCCCCC"> heating city of</font><font color="#E5E5E5"> team and the</font>

25
00:01:29,079 --> 00:01:34,689
researcher in<font color="#E5E5E5"> binary exploitation</font>

26
00:01:31,540 --> 00:01:37,030
we often<font color="#E5E5E5"> join a lot of a city of such as</font>

27
00:01:34,689 --> 00:01:44,320
<font color="#E5E5E5">a chai tea be</font><font color="#CCCCCC"> def conch</font><font color="#E5E5E5"> and</font><font color="#CCCCCC"> wicked</font>

28
00:01:37,030 --> 00:01:49,090
<font color="#CCCCCC">surplice this</font><font color="#E5E5E5"> year I'm a member of</font><font color="#CCCCCC"> th</font>

29
00:01:44,320 --> 00:01:52,419
loot<font color="#E5E5E5"> it all does curly uber in Taiwan we</font>

30
00:01:49,090 --> 00:01:57,820
also had he come the largest<font color="#CCCCCC"> security</font>

31
00:01:52,420 --> 00:02:02,020
conference in Taiwan<font color="#CCCCCC"> I'm also the</font>

32
00:01:57,820 --> 00:02:04,809
organizer of<font color="#CCCCCC"> honorable TW</font><font color="#E5E5E5"> it's a walk</font>

33
00:02:02,020 --> 00:02:05,649
inside for<font color="#CCCCCC"> Hecker to test and the</font>

34
00:02:04,810 --> 00:02:09,550
developer

35
00:02:05,649 --> 00:02:11,860
<font color="#E5E5E5">labor exploitation skill we can earn</font>

36
00:02:09,550 --> 00:02:18,150
many cheek of<font color="#E5E5E5"> final exploitation and</font>

37
00:02:11,860 --> 00:02:18,150
Lisa<font color="#CCCCCC"> welcome to to enjoy</font><font color="#E5E5E5"> our challenges</font>

38
00:02:18,840 --> 00:02:26,290
here is my agenda today<font color="#E5E5E5"> first we</font><font color="#CCCCCC"> were</font>

39
00:02:23,620 --> 00:02:31,930
introduced<font color="#E5E5E5"> what is a file stream and</font>

40
00:02:26,290 --> 00:02:34,750
what is file structure next we will<font color="#E5E5E5"> use</font>

41
00:02:31,930 --> 00:02:37,750
a simple case to<font color="#CCCCCC"> show you how to use</font>

42
00:02:34,750 --> 00:02:41,890
<font color="#CCCCCC">files</font><font color="#E5E5E5"> Georgia to exploit an eel fiery</font>

43
00:02:37,750 --> 00:02:45,250
<font color="#E5E5E5">and Nina's platform moreover we will</font>

44
00:02:41,890 --> 00:02:47,529
explore the<font color="#CCCCCC"> methodology</font><font color="#E5E5E5"> to utilize</font>

45
00:02:45,250 --> 00:02:50,260
<font color="#CCCCCC">different file structure for attack</font>

46
00:02:47,530 --> 00:02:54,910
<font color="#E5E5E5">which we call file stream oriented</font>

47
00:02:50,260 --> 00:02:58,840
programming finally we will introduce a

48
00:02:54,910 --> 00:03:01,090
<font color="#CCCCCC">new petition</font><font color="#E5E5E5"> into deep sea and the</font><font color="#CCCCCC"> lens</font>

49
00:02:58,840 --> 00:03:05,440
demonstrate how to make file structure

50
00:03:01,090 --> 00:03:07,600
<font color="#CCCCCC">with again by the way in this token we</font>

51
00:03:05,440 --> 00:03:10,990
will focus on<font color="#E5E5E5"> ninis and the</font><font color="#CCCCCC"> year</font><font color="#E5E5E5"> of</font>

52
00:03:07,600 --> 00:03:16,920
binary at the end<font color="#CCCCCC"> we will</font><font color="#E5E5E5"> talk about</font>

53
00:03:10,990 --> 00:03:16,920
some more<font color="#E5E5E5"> detail about file and windows</font>

54
00:03:17,310 --> 00:03:27,040
<font color="#CCCCCC">ok let's talk about</font><font color="#E5E5E5"> what is a file</font>

55
00:03:20,530 --> 00:03:31,270
<font color="#E5E5E5">stream what happened when we use the law</font>

56
00:03:27,040 --> 00:03:33,780
<font color="#E5E5E5">I</font><font color="#CCCCCC"> of function</font><font color="#E5E5E5"> energy program while we</font>

57
00:03:31,270 --> 00:03:36,970
call read<font color="#E5E5E5"> or write on a file</font>

58
00:03:33,780 --> 00:03:40,720
<font color="#E5E5E5">Kernan will not read or write</font><font color="#CCCCCC"> the file</font>

59
00:03:36,970 --> 00:03:44,500
directory<font color="#E5E5E5"> instead her</font><font color="#CCCCCC"> known</font><font color="#E5E5E5"> will handle</font>

60
00:03:40,720 --> 00:03:45,160
kernel buffer and read a lot<font color="#E5E5E5"> of data in</font>

61
00:03:44,500 --> 00:03:49,800
a file

62
00:03:45,160 --> 00:03:53,230
<font color="#CCCCCC">Toula buffer then it will be</font><font color="#E5E5E5"> copied to a</font>

63
00:03:49,800 --> 00:03:56,580
destination address<font color="#E5E5E5"> in</font><font color="#CCCCCC"> userspace</font><font color="#E5E5E5"> as you</font>

64
00:03:53,230 --> 00:03:56,579
want to read<font color="#CCCCCC"> or write</font>

65
00:03:57,210 --> 00:04:04,930
<font color="#E5E5E5">the purpose is to reduce the number of</font>

66
00:04:00,370 --> 00:04:09,090
hard disk<font color="#CCCCCC"> rewrite it will increase the</font>

67
00:04:04,930 --> 00:04:09,090
performance in<font color="#E5E5E5"> the file operation</font>

68
00:04:10,440 --> 00:04:18,760
<font color="#CCCCCC">afterlife GMC also add a</font><font color="#E5E5E5"> similar</font>

69
00:04:14,620 --> 00:04:23,020
mechanism<font color="#CCCCCC"> called file stream so what is</font>

70
00:04:18,760 --> 00:04:25,760
file<font color="#E5E5E5"> stream at a high level interface on</font>

71
00:04:23,020 --> 00:04:31,810
the primitive<font color="#CCCCCC"> file this</font>

72
00:04:25,760 --> 00:04:36,760
facility in it<font color="#E5E5E5"> monster come</font><font color="#CCCCCC"> , for a</font>

73
00:04:31,810 --> 00:04:41,900
strain is a logical interface to a file

74
00:04:36,760 --> 00:04:46,550
<font color="#CCCCCC">acidified letter file</font><font color="#E5E5E5"> it can refer</font><font color="#CCCCCC"> to a</font>

75
00:04:41,900 --> 00:04:50,229
disk file<font color="#E5E5E5"> the screen the keyboard app or</font>

76
00:04:46,550 --> 00:04:55,940
file<font color="#E5E5E5"> an tab and so on</font>

77
00:04:50,230 --> 00:04:59,360
it has<font color="#E5E5E5"> stream buffering mechanism total</font>

78
00:04:55,940 --> 00:05:02,300
collector<font color="#E5E5E5"> lat are written to a</font><font color="#CCCCCC"> stream</font>

79
00:04:59,360 --> 00:05:06,760
are normally accumulator<font color="#E5E5E5"> and assessment</font>

80
00:05:02,300 --> 00:05:09,280
synchronous lead to the file in<font color="#E5E5E5"> a block</font>

81
00:05:06,760 --> 00:05:13,099
instead of<font color="#E5E5E5"> a pillar</font>

82
00:05:09,280 --> 00:05:16,909
<font color="#E5E5E5">appearing as soon as they are output by</font>

83
00:05:13,100 --> 00:05:20,330
the<font color="#E5E5E5"> application program it is portable</font>

84
00:05:16,910 --> 00:05:25,610
and high performance in a LAN what is

85
00:05:20,330 --> 00:05:28,729
the world<font color="#E5E5E5"> file in all up case it is the</font>

86
00:05:25,610 --> 00:05:32,950
<font color="#CCCCCC">strength descriptor</font><font color="#E5E5E5"> a descriptor is</font>

87
00:05:28,730 --> 00:05:38,510
linked to<font color="#E5E5E5"> a file using</font><font color="#CCCCCC"> a open</font><font color="#E5E5E5"> operation</font>

88
00:05:32,950 --> 00:05:47,000
as a string is disassociate from a file

89
00:05:38,510 --> 00:05:50,260
user<font color="#E5E5E5"> F</font><font color="#CCCCCC"> close operations after 18 June</font>

90
00:05:47,000 --> 00:05:55,910
<font color="#E5E5E5">powerfully mechanism the</font><font color="#CCCCCC"> architecture</font>

91
00:05:50,260 --> 00:05:59,780
<font color="#CCCCCC">diagram is as follow</font><font color="#E5E5E5"> so when we</font><font color="#CCCCCC"> use F</font>

92
00:05:55,910 --> 00:06:03,460
<font color="#CCCCCC">read or write to read or write a file it</font>

93
00:05:59,780 --> 00:06:07,549
will<font color="#CCCCCC"> create</font><font color="#E5E5E5"> a buffer in the user space</font>

94
00:06:03,460 --> 00:06:10,460
just<font color="#E5E5E5"> like season</font><font color="#CCCCCC"> co</font><font color="#E5E5E5"> open and light it</font>

95
00:06:07,550 --> 00:06:14,870
will read a lot<font color="#E5E5E5"> of data from kernel</font>

96
00:06:10,460 --> 00:06:18,169
buffer to stream buffer<font color="#CCCCCC"> data will be</font>

97
00:06:14,870 --> 00:06:21,100
copied<font color="#CCCCCC"> to your destination as you want</font>

98
00:06:18,170 --> 00:06:21,100
to read<font color="#CCCCCC"> or write</font>

99
00:06:22,060 --> 00:06:28,880
the goal is<font color="#CCCCCC"> to reduce</font><font color="#E5E5E5"> the</font><font color="#CCCCCC"> number of</font>

100
00:06:25,010 --> 00:06:31,400
season code in the our world it will

101
00:06:28,880 --> 00:06:34,150
reduce the<font color="#CCCCCC"> number of</font><font color="#E5E5E5"> trial system shape</font>

102
00:06:31,400 --> 00:06:34,150
to kernel

103
00:06:38,670 --> 00:06:47,470
next let's<font color="#E5E5E5"> take a</font><font color="#CCCCCC"> look over</font><font color="#E5E5E5"> the file</font>

104
00:06:42,310 --> 00:06:51,160
structure<font color="#E5E5E5"> file structure is a very</font>

105
00:06:47,470 --> 00:06:54,520
complex structure there are<font color="#CCCCCC"> many</font>

106
00:06:51,160 --> 00:06:57,190
<font color="#CCCCCC">elements in the structure</font><font color="#E5E5E5"> because we</font>

107
00:06:54,520 --> 00:07:02,099
<font color="#CCCCCC">don't have a much time so I will not</font>

108
00:06:57,190 --> 00:07:06,640
introduce every element in this<font color="#E5E5E5"> session</font>

109
00:07:02,100 --> 00:07:09,820
plus I<font color="#E5E5E5"> will explain a</font><font color="#CCCCCC"> little element</font>

110
00:07:06,640 --> 00:07:13,120
<font color="#E5E5E5">which are very important for five</font>

111
00:07:09,820 --> 00:07:17,530
<font color="#E5E5E5">cultural export</font><font color="#CCCCCC"> exploit such as</font><font color="#E5E5E5"> four</font>

112
00:07:13,120 --> 00:07:24,820
<font color="#E5E5E5">legs stream buffer file descriptor and a</font>

113
00:07:17,530 --> 00:07:28,179
virtual function<font color="#E5E5E5"> table</font><font color="#CCCCCC"> now Flickr</font><font color="#E5E5E5"> in the</font>

114
00:07:24,820 --> 00:07:31,000
file structure is used to recall<font color="#E5E5E5"> a table</font>

115
00:07:28,180 --> 00:07:34,360
of the file stream such as such as

116
00:07:31,000 --> 00:07:38,050
<font color="#E5E5E5">read-only or pale and so on</font>

117
00:07:34,360 --> 00:07:45,490
meanwhile<font color="#E5E5E5"> it also</font><font color="#CCCCCC"> shows the status</font><font color="#E5E5E5"> of</font>

118
00:07:38,050 --> 00:07:49,000
fuller file buffering next part is

119
00:07:45,490 --> 00:07:52,720
stream buffer it can be divided into

120
00:07:49,000 --> 00:07:56,350
three part<font color="#CCCCCC"> read password</font><font color="#E5E5E5"> write buffer</font>

121
00:07:52,720 --> 00:08:00,040
and the<font color="#CCCCCC"> reserved buffer with buffer and</font>

122
00:07:56,350 --> 00:08:04,240
write buffer<font color="#CCCCCC"> just</font><font color="#E5E5E5"> like layer name it's</font>

123
00:08:00,040 --> 00:08:07,420
full read or write<font color="#E5E5E5"> if</font><font color="#CCCCCC"> R is buffer or</font><font color="#E5E5E5"> a</font>

124
00:08:04,240 --> 00:08:15,540
write buffer is<font color="#E5E5E5"> not</font><font color="#CCCCCC"> created</font><font color="#E5E5E5"> it will use</font>

125
00:08:07,420 --> 00:08:19,820
reserved buffer next

126
00:08:15,540 --> 00:08:24,660
<font color="#E5E5E5">is file</font><font color="#CCCCCC"> file or just a file descriptor</font>

127
00:08:19,820 --> 00:08:32,640
<font color="#E5E5E5">from the file which you open it</font><font color="#CCCCCC"> returns</font>

128
00:08:24,660 --> 00:08:36,120
from a<font color="#E5E5E5"> state and call open</font><font color="#CCCCCC"> next is file</font>

129
00:08:32,640 --> 00:08:39,720
plus<font color="#E5E5E5"> five plus is an extension of</font><font color="#CCCCCC"> file</font>

130
00:08:36,120 --> 00:08:44,640
structure<font color="#E5E5E5"> it</font><font color="#CCCCCC"> is a</font><font color="#E5E5E5"> virtual function table</font>

131
00:08:39,720 --> 00:08:47,940
but file does not<font color="#CCCCCC"> have in</font><font color="#E5E5E5"> the</font><font color="#CCCCCC"> recent</font>

132
00:08:44,640 --> 00:08:51,720
<font color="#CCCCCC">three CC version file</font><font color="#E5E5E5"> string use the</font>

133
00:08:47,940 --> 00:08:54,900
file class<font color="#CCCCCC"> structure data</font><font color="#E5E5E5"> in standard</font>

134
00:08:51,720 --> 00:09:01,560
<font color="#E5E5E5">are in a standard arrow also using file</font>

135
00:08:54,900 --> 00:09:05,610
<font color="#E5E5E5">a structure for all file operation</font><font color="#CCCCCC"> a</font>

136
00:09:01,560 --> 00:09:08,729
serving table if we<font color="#E5E5E5"> want</font><font color="#CCCCCC"> to read data</font>

137
00:09:05,610 --> 00:09:12,090
from files it will call a<font color="#E5E5E5"> virtual</font>

138
00:09:08,730 --> 00:09:16,250
function instead<font color="#CCCCCC"> of the red code into</font>

139
00:09:12,090 --> 00:09:20,310
<font color="#CCCCCC">sitting system function that is</font><font color="#E5E5E5"> used for</font>

140
00:09:16,250 --> 00:09:23,310
<font color="#E5E5E5">overriding because there are different</font>

141
00:09:20,310 --> 00:09:31,410
usage depending on the attribute such as

142
00:09:23,310 --> 00:09:35,089
<font color="#CCCCCC">Y character especially if every</font><font color="#E5E5E5"> Fashion</font>

143
00:09:31,410 --> 00:09:38,520
<font color="#E5E5E5">Show is</font><font color="#CCCCCC"> associated with a linker</font><font color="#E5E5E5"> lift</font>

144
00:09:35,090 --> 00:09:42,630
the head of<font color="#E5E5E5"> linked list is called</font><font color="#CCCCCC"> IO</font>

145
00:09:38,520 --> 00:09:44,760
<font color="#E5E5E5">list or and the next pointer is called</font>

146
00:09:42,630 --> 00:09:48,660
chain<font color="#E5E5E5"> okay</font>

147
00:09:44,760 --> 00:09:55,140
this<font color="#CCCCCC"> Lissa</font><font color="#E5E5E5"> this our enemy we must know</font>

148
00:09:48,660 --> 00:09:58,530
in the file structure exploitation next

149
00:09:55,140 --> 00:10:01,380
I will use a<font color="#E5E5E5"> few common</font><font color="#CCCCCC"> functions in the</font>

150
00:09:58,530 --> 00:10:02,630
file stream to show you how the file

151
00:10:01,380 --> 00:10:07,590
<font color="#E5E5E5">string work</font>

152
00:10:02,630 --> 00:10:09,540
the first one is<font color="#CCCCCC"> F open</font><font color="#E5E5E5"> actually every</font>

153
00:10:07,590 --> 00:10:13,170
function in a<font color="#E5E5E5"> five string is very</font>

154
00:10:09,540 --> 00:10:17,099
compressed<font color="#E5E5E5"> so I pick pick a few key</font>

155
00:10:13,170 --> 00:10:21,319
point here the last the<font color="#CCCCCC"> last</font><font color="#E5E5E5"> part is</font><font color="#CCCCCC"> the</font>

156
00:10:17,100 --> 00:10:26,510
<font color="#CCCCCC">work flow</font><font color="#E5E5E5"> F open and right path is</font><font color="#CCCCCC"> gtb/c</font>

157
00:10:21,320 --> 00:10:33,170
original function<font color="#E5E5E5"> let's</font><font color="#CCCCCC"> that's</font><font color="#E5E5E5"> a look</font>

158
00:10:26,510 --> 00:10:36,769
at it<font color="#E5E5E5"> step-by-step first of all children</font>

159
00:10:33,170 --> 00:10:42,620
see were allocate our memory space<font color="#E5E5E5"> for</font>

160
00:10:36,769 --> 00:10:45,620
fast charger when you call F open then

161
00:10:42,620 --> 00:10:48,440
it will in the<font color="#E5E5E5"> interval initialized</font>

162
00:10:45,620 --> 00:10:52,339
element in the file structure such as

163
00:10:48,440 --> 00:10:58,810
flex and the virtual function table<font color="#E5E5E5"> it's</font>

164
00:10:52,339 --> 00:10:58,810
very<font color="#E5E5E5"> like</font><font color="#CCCCCC"> lurkin shorter in</font><font color="#E5E5E5"> c++ aperture</font>

165
00:10:59,529 --> 00:11:07,149
next it will insert a file structure

166
00:11:02,870 --> 00:11:07,149
into a linked list of file stream

167
00:11:10,930 --> 00:11:19,779
invite-only<font color="#E5E5E5"> it were cold season</font><font color="#CCCCCC"> called</font>

168
00:11:14,720 --> 00:11:19,779
open and the<font color="#E5E5E5"> length feel in love file no</font>

169
00:11:21,790 --> 00:11:30,050
next one<font color="#E5E5E5"> is afraid</font><font color="#CCCCCC"> from here</font><font color="#E5E5E5"> on it</font><font color="#CCCCCC"> works</font>

170
00:11:27,139 --> 00:11:36,380
start using virtual function for file

171
00:11:30,050 --> 00:11:37,370
operation operations after<font color="#CCCCCC"> the</font><font color="#E5E5E5"> beginning</font>

172
00:11:36,380 --> 00:11:40,189
of every day

173
00:11:37,370 --> 00:11:44,029
it's a<font color="#CCCCCC"> fillip stream buffer is not</font>

174
00:11:40,190 --> 00:11:47,720
<font color="#E5E5E5">created we call a snob it were used</font>

175
00:11:44,029 --> 00:11:52,100
<font color="#E5E5E5">function file to allocate to allocate a</font>

176
00:11:47,720 --> 00:11:56,860
new<font color="#E5E5E5"> buffer for fire stream file away</font>

177
00:11:52,100 --> 00:11:59,959
<font color="#E5E5E5">file</font><font color="#CCCCCC"> to a local</font><font color="#E5E5E5"> we use malloc</font><font color="#CCCCCC"> a map or</font>

178
00:11:56,860 --> 00:12:07,370
<font color="#CCCCCC">unified memory</font><font color="#E5E5E5"> allocated to a local</font>

179
00:11:59,959 --> 00:12:09,768
stream buffer after that<font color="#CCCCCC"> a fluid will</font>

180
00:12:07,370 --> 00:12:16,699
use<font color="#CCCCCC"> cin encode to read a lot</font><font color="#E5E5E5"> of data</font>

181
00:12:09,769 --> 00:12:19,880
from file to<font color="#CCCCCC"> the</font><font color="#E5E5E5"> stream buffer then copy</font>

182
00:12:16,699 --> 00:12:26,510
<font color="#E5E5E5">data which you want</font><font color="#CCCCCC"> to read from stream</font>

183
00:12:19,880 --> 00:12:29,800
<font color="#CCCCCC">buffer to displace</font><font color="#E5E5E5"> destination okay</font><font color="#CCCCCC"> let</font>

184
00:12:26,510 --> 00:12:29,800
<font color="#CCCCCC">the platicas grid</font>

185
00:12:31,630 --> 00:12:38,949
next is<font color="#E5E5E5"> a flight a flight is very</font>

186
00:12:35,800 --> 00:12:43,089
<font color="#CCCCCC">similar</font><font color="#E5E5E5"> to a freighter but then the</font>

187
00:12:38,949 --> 00:12:46,359
function is opposite<font color="#E5E5E5"> to each other first</font>

188
00:12:43,089 --> 00:12:51,430
<font color="#E5E5E5">it's also</font><font color="#CCCCCC"> allocated a stream buffer if</font>

189
00:12:46,360 --> 00:12:54,690
we if we it is now<font color="#E5E5E5"> then copy use the</font>

190
00:12:51,430 --> 00:12:58,209
data to<font color="#CCCCCC"> the stream</font><font color="#E5E5E5"> paper from sauce and</font>

191
00:12:54,690 --> 00:13:01,509
then write data from stream powerful

192
00:12:58,209 --> 00:13:03,670
tool<font color="#E5E5E5"> and file only if the stream buffer</font>

193
00:13:01,509 --> 00:13:11,009
is fear<font color="#E5E5E5"> or flash</font>

194
00:13:03,670 --> 00:13:11,009
let's join the<font color="#CCCCCC"> operation</font><font color="#E5E5E5"> look like</font><font color="#CCCCCC"> cage</font>

195
00:13:11,850 --> 00:13:23,230
the last one is<font color="#CCCCCC"> f cross it is opposite</font>

196
00:13:17,769 --> 00:13:25,810
<font color="#E5E5E5">of</font><font color="#CCCCCC"> F</font><font color="#E5E5E5"> open first first is delete the</font>

197
00:13:23,230 --> 00:13:30,279
structure formula<font color="#E5E5E5"> linked list of file</font>

198
00:13:25,810 --> 00:13:33,420
stream<font color="#E5E5E5"> then flush the string make sure</font>

199
00:13:30,279 --> 00:13:36,880
everything is<font color="#E5E5E5"> written to file</font>

200
00:13:33,420 --> 00:13:38,519
finally<font color="#CCCCCC"> crossfire</font><font color="#E5E5E5"> and a relational</font>

201
00:13:36,880 --> 00:13:42,720
memory space

202
00:13:38,519 --> 00:13:47,670
<font color="#CCCCCC">okay the above are the main workflow</font><font color="#E5E5E5"> of</font>

203
00:13:42,720 --> 00:13:47,670
some basic<font color="#E5E5E5"> function in a file stream</font>

204
00:13:48,930 --> 00:13:55,359
next part is exploit<font color="#CCCCCC"> path I</font><font color="#E5E5E5"> will tell</font>

205
00:13:52,720 --> 00:14:02,860
you how to<font color="#E5E5E5"> use the file structure to</font>

206
00:13:55,360 --> 00:14:06,250
<font color="#E5E5E5">exploit a binary there are many</font><font color="#CCCCCC"> cool</font>

207
00:14:02,860 --> 00:14:09,310
<font color="#CCCCCC">Targhee in file structure the best one</font>

208
00:14:06,250 --> 00:14:12,310
is virtual function table<font color="#E5E5E5"> if we</font><font color="#CCCCCC"> can</font>

209
00:14:09,310 --> 00:14:17,859
control<font color="#E5E5E5"> a</font><font color="#CCCCCC"> be table then</font><font color="#E5E5E5"> we can control</font>

210
00:14:12,310 --> 00:14:20,619
the flow let's use a simple case<font color="#E5E5E5"> to</font>

211
00:14:17,860 --> 00:14:25,569
explain how to control<font color="#E5E5E5"> a flow with file</font>

212
00:14:20,620 --> 00:14:30,189
structure it is a buffer overflow

213
00:14:25,569 --> 00:14:32,949
Bombadil<font color="#CCCCCC"> T in our</font><font color="#E5E5E5"> sample</font><font color="#CCCCCC"> code it what</font>

214
00:14:30,189 --> 00:14:37,329
does<font color="#E5E5E5"> it does not check length of user</font>

215
00:14:32,949 --> 00:14:39,990
input so so<font color="#E5E5E5"> that we can overwrite the</font>

216
00:14:37,329 --> 00:14:39,989
file pointer

217
00:14:42,370 --> 00:14:50,459
in the in the<font color="#CCCCCC"> beginning the program is</font>

218
00:14:46,389 --> 00:14:57,519
<font color="#E5E5E5">shown in the picture the file pointer</font>

219
00:14:50,459 --> 00:15:00,758
<font color="#E5E5E5">point to a normal file structure I'm</font>

220
00:14:57,519 --> 00:15:06,220
soon the<font color="#E5E5E5"> a choice of path work content</font>

221
00:15:00,759 --> 00:15:09,699
<font color="#CCCCCC">our</font><font color="#E5E5E5"> input is at</font><font color="#CCCCCC"> 0 X 60 OD one night ad</font>

222
00:15:06,220 --> 00:15:13,930
<font color="#E5E5E5">Rho we overwrite a file</font><font color="#CCCCCC"> pointer with</font>

223
00:15:09,699 --> 00:15:15,670
buffer edges in theorem<font color="#E5E5E5"> if</font><font color="#CCCCCC"> we were</font>

224
00:15:13,930 --> 00:15:19,120
poking hunter<font color="#E5E5E5"> it was you</font>

225
00:15:15,670 --> 00:15:23,110
<font color="#E5E5E5">the kill to</font><font color="#CCCCCC"> earth cross f KO will take</font>

226
00:15:19,120 --> 00:15:29,110
take the buffer as<font color="#E5E5E5"> file pointer and we</font>

227
00:15:23,110 --> 00:15:32,410
were control the flow however when we

228
00:15:29,110 --> 00:15:35,980
long it we we find that it does not

229
00:15:32,410 --> 00:15:38,649
<font color="#E5E5E5">crash at</font><font color="#CCCCCC"> ko insertion but</font><font color="#E5E5E5"> a comparing</font>

230
00:15:35,980 --> 00:15:45,370
<font color="#CCCCCC">Joshua and</font><font color="#E5E5E5"> alacrity</font><font color="#CCCCCC"> cash value is</font>

231
00:15:38,649 --> 00:15:48,730
controllable so<font color="#CCCCCC"> why let's debug it with</font>

232
00:15:45,370 --> 00:15:52,509
gdb source code to see what happened in

233
00:15:48,730 --> 00:15:53,019
<font color="#CCCCCC">F clause</font><font color="#E5E5E5"> we find recommendation for at</font>

234
00:15:52,509 --> 00:15:56,589
<font color="#CCCCCC">IO</font>

235
00:15:53,019 --> 00:16:02,920
acquire lock it is a function to get

236
00:15:56,589 --> 00:16:05,040
lock in file structure it is a large

237
00:16:02,920 --> 00:16:08,709
<font color="#E5E5E5">structure pointer in file structure</font>

238
00:16:05,040 --> 00:16:12,998
which should be point to a writable

239
00:16:08,709 --> 00:16:15,729
memory it is<font color="#E5E5E5"> used to prevent waste</font>

240
00:16:12,999 --> 00:16:19,829
condition in multi<font color="#CCCCCC"> trail</font><font color="#E5E5E5"> environment and</font>

241
00:16:15,730 --> 00:16:24,429
very<font color="#CCCCCC"> common in stream related function</font>

242
00:16:19,829 --> 00:16:27,459
as a consequence<font color="#E5E5E5"> if we want to overwrite</font>

243
00:16:24,429 --> 00:16:31,389
the<font color="#E5E5E5"> table to gain control we also have</font>

244
00:16:27,459 --> 00:16:36,359
to<font color="#E5E5E5"> control it but we just need to let</font><font color="#CCCCCC"> it</font>

245
00:16:31,389 --> 00:16:36,360
point to<font color="#CCCCCC"> a light pole and a Verde memory</font>

246
00:16:41,800 --> 00:16:48,550
so we use a<font color="#E5E5E5"> gobo buffer in beer station</font>

247
00:16:45,999 --> 00:16:52,899
<font color="#E5E5E5">as our</font><font color="#CCCCCC"> lock</font><font color="#E5E5E5"> and then reconstruct our</font>

248
00:16:48,550 --> 00:16:57,519
pillow<font color="#E5E5E5"> so last</font><font color="#CCCCCC"> solid snack point could</font>

249
00:16:52,899 --> 00:17:00,369
point to the global buffer because over

250
00:16:57,519 --> 00:17:04,929
buffer is initialized with little at the

251
00:17:00,369 --> 00:17:08,319
beginning<font color="#CCCCCC"> of the program</font><font color="#E5E5E5"> in the end</font><font color="#CCCCCC"> our</font>

252
00:17:04,929 --> 00:17:14,319
pillow will look like as less diagram in

253
00:17:08,319 --> 00:17:18,010
this<font color="#CCCCCC"> dry 0xaa</font><font color="#E5E5E5"> is the opposite of luck we</font>

254
00:17:14,319 --> 00:17:20,260
can use the back<font color="#CCCCCC"> two people can use</font>

255
00:17:18,010 --> 00:17:24,939
debugger or<font color="#E5E5E5"> a source code</font><font color="#CCCCCC"> into the vc to</font>

256
00:17:20,260 --> 00:17:29,020
<font color="#E5E5E5">get a lot of say and we also need to</font>

257
00:17:24,939 --> 00:17:35,890
paid into<font color="#E5E5E5"> 0x1 neoliberal to overwrite</font>

258
00:17:29,020 --> 00:17:37,120
file point after modify our pillow we

259
00:17:35,890 --> 00:17:40,179
<font color="#E5E5E5">run it again</font>

260
00:17:37,120 --> 00:17:44,260
we found<font color="#E5E5E5"> we quest at</font><font color="#CCCCCC"> ko</font><font color="#E5E5E5"> insertion and</font>

261
00:17:40,179 --> 00:17:49,750
<font color="#CCCCCC">the value of register is our input</font><font color="#E5E5E5"> that</font>

262
00:17:44,260 --> 00:17:52,899
is we<font color="#CCCCCC"> controller</font><font color="#E5E5E5"> program hunter an hour</font>

263
00:17:49,750 --> 00:17:55,750
interesting<font color="#CCCCCC"> then are in</font><font color="#E5E5E5"> standard</font><font color="#CCCCCC"> out in</font>

264
00:17:52,899 --> 00:18:00,479
a standard<font color="#CCCCCC"> arrow are also a file culture</font>

265
00:17:55,750 --> 00:18:03,100
in GBC therefore we can<font color="#CCCCCC"> overall echo</font>

266
00:18:00,480 --> 00:18:06,340
buh-buh-buh-buh if you have<font color="#E5E5E5"> base edges</font>

267
00:18:03,100 --> 00:18:09,309
of which<font color="#E5E5E5"> we bc when a program</font><font color="#CCCCCC"> use some</font>

268
00:18:06,340 --> 00:18:12,340
strength<font color="#E5E5E5"> related function it will use it</font>

269
00:18:09,309 --> 00:18:16,770
as file pointer and<font color="#CCCCCC"> weekend controller</font>

270
00:18:12,340 --> 00:18:23,939
flow the above is<font color="#CCCCCC"> the basic usage of</font>

271
00:18:16,770 --> 00:18:23,940
exported<font color="#CCCCCC"> if</font><font color="#E5E5E5"> disposed</font><font color="#CCCCCC"> of file structure</font>

272
00:18:25,559 --> 00:18:29,860
<font color="#CCCCCC">okay let's talk</font><font color="#E5E5E5"> about some advanced</font>

273
00:18:28,720 --> 00:18:33,100
<font color="#E5E5E5">exploitation</font>

274
00:18:29,860 --> 00:18:35,699
the first one is file stream oriented

275
00:18:33,100 --> 00:18:35,699
programming

276
00:18:36,700 --> 00:18:44,520
<font color="#CCCCCC">phosgene</font><font color="#E5E5E5"> oriented programming called a</font>

277
00:18:40,390 --> 00:18:45,700
<font color="#E5E5E5">sop use file structure to</font><font color="#CCCCCC"> two oriented</font>

278
00:18:44,520 --> 00:18:48,400
programming

279
00:18:45,700 --> 00:18:51,720
it's like written<font color="#CCCCCC"> already in programming</font>

280
00:18:48,400 --> 00:18:55,360
call oriented programming<font color="#E5E5E5"> and so on</font><font color="#CCCCCC"> I</font>

281
00:18:51,720 --> 00:18:56,110
will<font color="#E5E5E5"> be travel of control flow by cages</font>

282
00:18:55,360 --> 00:19:00,850
lat

283
00:18:56,110 --> 00:19:06,490
<font color="#E5E5E5">or end in a return instruction</font><font color="#CCCCCC"> COP use</font>

284
00:19:00,850 --> 00:19:09,280
call insertion and<font color="#E5E5E5"> FS f</font><font color="#CCCCCC"> sop use virtual</font>

285
00:19:06,490 --> 00:19:15,330
function table with call in a file

286
00:19:09,280 --> 00:19:18,520
structure if we want<font color="#CCCCCC"> to do a Faustian</font>

287
00:19:15,330 --> 00:19:21,730
<font color="#E5E5E5">oriented programming we need to control</font>

288
00:19:18,520 --> 00:19:24,660
a linked list of files<font color="#CCCCCC"> gene and a final</font>

289
00:19:21,730 --> 00:19:29,350
powerful function that were coke-bottle

290
00:19:24,660 --> 00:19:32,940
<font color="#E5E5E5">function again and again it has a</font>

291
00:19:29,350 --> 00:19:36,810
powerful function called<font color="#CCCCCC"> IO flash or</font>

292
00:19:32,940 --> 00:19:41,760
<font color="#CCCCCC">lock-in somewhere we can easily trigger</font>

293
00:19:36,810 --> 00:19:45,370
<font color="#E5E5E5">as a result</font><font color="#CCCCCC"> Chun which is the</font><font color="#E5E5E5"> next point</font>

294
00:19:41,760 --> 00:19:48,070
<font color="#CCCCCC">the next pointer in Val Joshua and I</font>

295
00:19:45,370 --> 00:19:53,679
<font color="#CCCCCC">always talk which is the head of linked</font>

296
00:19:48,070 --> 00:19:56,530
<font color="#CCCCCC">list both become very important if we</font>

297
00:19:53,680 --> 00:20:01,260
can control<font color="#E5E5E5"> this</font><font color="#CCCCCC"> two point then we can</font>

298
00:19:56,530 --> 00:20:01,260
control<font color="#CCCCCC"> a</font><font color="#E5E5E5"> flow over and over again</font><font color="#CCCCCC"> so</font>

299
00:20:02,130 --> 00:20:11,470
<font color="#CCCCCC">what is IO</font><font color="#E5E5E5"> flag or lock useful it useful</font>

300
00:20:08,200 --> 00:20:14,890
it<font color="#E5E5E5"> used to flush or first ring in</font><font color="#CCCCCC"> linked</font>

301
00:20:11,470 --> 00:20:20,200
list at the end<font color="#CCCCCC"> of</font><font color="#E5E5E5"> program or program</font>

302
00:20:14,890 --> 00:20:24,160
terminate for<font color="#CCCCCC"> example it will</font><font color="#E5E5E5"> be coke</font>

303
00:20:20,200 --> 00:20:29,290
when g CC<font color="#E5E5E5"> above it see any killed men</font>

304
00:20:24,160 --> 00:20:33,610
<font color="#CCCCCC">written at</font><font color="#E5E5E5"> the first</font><font color="#CCCCCC"> liqueur</font><font color="#E5E5E5"> of</font><font color="#CCCCCC"> i/o</font>

305
00:20:29,290 --> 00:20:37,270
<font color="#CCCCCC">flash IO flash or lack is to prevent or</font>

306
00:20:33,610 --> 00:20:42,790
data<font color="#E5E5E5"> from being written to the file when</font>

307
00:20:37,270 --> 00:20:46,889
the<font color="#CCCCCC"> program and in this session we will</font>

308
00:20:42,790 --> 00:20:49,659
take to<font color="#CCCCCC"> deep sea upon him as our example</font>

309
00:20:46,890 --> 00:20:53,140
when<font color="#CCCCCC"> algae diversity test some memory</font>

310
00:20:49,660 --> 00:20:58,000
<font color="#E5E5E5">corrosion proper public it would enter</font>

311
00:20:53,140 --> 00:21:01,870
to<font color="#E5E5E5"> protein the</font><font color="#CCCCCC"> writer arugula illness</font><font color="#E5E5E5"> in</font>

312
00:20:58,000 --> 00:21:06,760
the<font color="#CCCCCC"> slide</font><font color="#E5E5E5"> is what a workflow opportunity</font>

313
00:21:01,870 --> 00:21:09,699
<font color="#CCCCCC">apple</font><font color="#E5E5E5"> into DBC Apple routine</font><font color="#CCCCCC"> it will</font>

314
00:21:06,760 --> 00:21:12,879
print some error message then check file

315
00:21:09,700 --> 00:21:16,990
stream if need need to<font color="#E5E5E5"> flush and</font><font color="#CCCCCC"> cold</font>

316
00:21:12,880 --> 00:21:18,040
virtual function in file structure after

317
00:21:16,990 --> 00:21:20,410
to<font color="#CCCCCC"> lat</font>

318
00:21:18,040 --> 00:21:29,740
it<font color="#CCCCCC"> will call this season code to</font>

319
00:21:20,410 --> 00:21:31,630
terminal terminate<font color="#CCCCCC"> a program we simplify</font>

320
00:21:29,740 --> 00:21:36,340
the source code of<font color="#CCCCCC"> IO</font>

321
00:21:31,630 --> 00:21:41,760
<font color="#CCCCCC">flush of luck</font><font color="#E5E5E5"> we can see inter inter</font>

322
00:21:36,340 --> 00:21:41,760
rater<font color="#CCCCCC"> AFP is aside</font><font color="#E5E5E5"> I always the all</font>

323
00:21:41,880 --> 00:21:50,170
recognition<font color="#CCCCCC"> is to</font><font color="#E5E5E5"> check the file</font>

324
00:21:44,830 --> 00:21:53,980
<font color="#E5E5E5">string if need if you need to flush so</font>

325
00:21:50,170 --> 00:21:59,050
if flow condition is satisfied<font color="#E5E5E5"> it will</font>

326
00:21:53,980 --> 00:22:04,270
call function in<font color="#CCCCCC"> V table then assign FP</font>

327
00:21:59,050 --> 00:22:11,590
<font color="#E5E5E5">to next file structure in</font><font color="#CCCCCC"> Lingle list it</font>

328
00:22:04,270 --> 00:22:14,830
will repeat until next point is now<font color="#CCCCCC"> that</font>

329
00:22:11,590 --> 00:22:18,760
is we can<font color="#E5E5E5"> control</font><font color="#CCCCCC"> a linked list</font><font color="#E5E5E5"> to</font><font color="#CCCCCC"> -</font>

330
00:22:14,830 --> 00:22:23,129
oriented programming because we can

331
00:22:18,760 --> 00:22:23,129
<font color="#E5E5E5">control everything in the file structure</font>

332
00:22:24,300 --> 00:22:32,379
let us explain with a simple terrible at

333
00:22:29,050 --> 00:22:36,610
first I only<font color="#E5E5E5"> store is point to a normal</font>

334
00:22:32,380 --> 00:22:39,640
file charger if if we do not use<font color="#CCCCCC"> fop</font>

335
00:22:36,610 --> 00:22:45,909
it's usually point will stand out

336
00:22:39,640 --> 00:22:49,330
structure<font color="#CCCCCC"> when memory conversion happens</font>

337
00:22:45,910 --> 00:22:53,040
we can overwrite it with<font color="#E5E5E5"> our buffer</font>

338
00:22:49,330 --> 00:22:53,040
edges which we can control

339
00:22:53,149 --> 00:23:01,238
trigger a<font color="#CCCCCC"> pole or easy it will try to</font>

340
00:22:56,629 --> 00:23:01,238
flush all<font color="#CCCCCC"> files gene in</font><font color="#E5E5E5"> the linked list</font>

341
00:23:01,629 --> 00:23:09,769
as shown<font color="#CCCCCC"> in the diagram if your</font>

342
00:23:06,289 --> 00:23:18,320
condition is satisfied<font color="#CCCCCC"> it will call if</font>

343
00:23:09,769 --> 00:23:21,109
all function in<font color="#CCCCCC"> our</font><font color="#E5E5E5"> fake vtable the</font>

344
00:23:18,320 --> 00:23:25,729
parameter of<font color="#E5E5E5"> the</font><font color="#CCCCCC"> function is report is</font>

345
00:23:21,109 --> 00:23:28,789
this pointer which point to<font color="#CCCCCC"> itself in</font>

346
00:23:25,729 --> 00:23:31,460
this<font color="#E5E5E5"> case if we put a stream</font><font color="#CCCCCC"> pop</font><font color="#E5E5E5"> at the</font>

347
00:23:28,789 --> 00:23:35,919
<font color="#E5E5E5">end or at the beginning of a file</font>

348
00:23:31,460 --> 00:23:40,339
structure it's a<font color="#E5E5E5"> work called a four-bar</font>

349
00:23:35,919 --> 00:23:48,409
above it is<font color="#E5E5E5"> the same as virtual function</font>

350
00:23:40,339 --> 00:23:51,259
code in C++<font color="#CCCCCC"> I would call a four bar</font><font color="#E5E5E5"> the</font>

351
00:23:48,409 --> 00:23:57,440
control flow will drive<font color="#E5E5E5"> two passes next</font>

352
00:23:51,259 --> 00:23:58,909
next file stream and<font color="#CCCCCC"> lane</font><font color="#E5E5E5"> cop and</font><font color="#CCCCCC"> a link</font>

353
00:23:57,440 --> 00:24:02,239
<font color="#E5E5E5">call next</font>

354
00:23:58,909 --> 00:24:09,169
virtual function finally it will cause

355
00:24:02,239 --> 00:24:12,409
this system pin<font color="#CCCCCC"> SH</font><font color="#E5E5E5"> in this case we will</font>

356
00:24:09,169 --> 00:24:16,099
get<font color="#CCCCCC"> a shell but by the way sometimes we</font>

357
00:24:12,409 --> 00:24:20,239
we cannot<font color="#E5E5E5"> capture the territory</font><font color="#CCCCCC"> or we</font>

358
00:24:16,099 --> 00:24:23,178
<font color="#CCCCCC">need to</font><font color="#E5E5E5"> two more things so we need to to</font>

359
00:24:20,239 --> 00:24:28,969
<font color="#E5E5E5">Orion oriented programming it will</font>

360
00:24:23,179 --> 00:24:32,239
<font color="#E5E5E5">become</font><font color="#CCCCCC"> very powerful the</font><font color="#E5E5E5"> reader</font><font color="#CCCCCC"> will</font>

361
00:24:28,969 --> 00:24:35,899
look like<font color="#E5E5E5"> the</font><font color="#CCCCCC"> screenshot shown here</font><font color="#E5E5E5"> we</font>

362
00:24:32,239 --> 00:24:39,259
get<font color="#CCCCCC"> a bone nation</font><font color="#E5E5E5"> we get a poor message</font>

363
00:24:35,899 --> 00:24:42,109
as well as much Michelle general

364
00:24:39,259 --> 00:24:45,169
<font color="#CCCCCC">speaking people always think the program</font>

365
00:24:42,109 --> 00:24:50,119
is already<font color="#E5E5E5"> terminated with with</font><font color="#CCCCCC"> least</font>

366
00:24:45,169 --> 00:24:53,119
<font color="#CCCCCC">script actually we we get sure that is</font>

367
00:24:50,119 --> 00:24:55,070
so fun is indeed it come from<font color="#E5E5E5"> a</font>

368
00:24:53,119 --> 00:24:59,299
<font color="#CCCCCC">challenge</font><font color="#E5E5E5"> at heat intensity of</font>

369
00:24:55,070 --> 00:25:03,158
qualification two years two years ago

370
00:24:59,299 --> 00:25:03,158
<font color="#CCCCCC">call House</font><font color="#E5E5E5"> of</font><font color="#CCCCCC"> Orange</font>

371
00:25:05,170 --> 00:25:10,500
next part is we tip off verification

372
00:25:10,950 --> 00:25:16,810
unfortunate<font color="#CCCCCC"> and tele because more and</font>

373
00:25:13,480 --> 00:25:19,960
more attack<font color="#CCCCCC"> use virtual function table</font>

374
00:25:16,810 --> 00:25:22,300
to to come for a fellow layer is a

375
00:25:19,960 --> 00:25:25,030
protection<font color="#CCCCCC"> added</font><font color="#E5E5E5"> to both virtual</font>

376
00:25:22,300 --> 00:25:28,780
function table<font color="#CCCCCC"> in Leicester</font><font color="#E5E5E5"> Julie BC</font>

377
00:25:25,030 --> 00:25:31,149
<font color="#E5E5E5">since last year it will check the</font><font color="#CCCCCC"> edges</font>

378
00:25:28,780 --> 00:25:32,670
of the tape off before<font color="#E5E5E5"> all virtual</font>

379
00:25:31,150 --> 00:25:36,490
function call

380
00:25:32,670 --> 00:25:39,900
if<font color="#CCCCCC"> Abby</font><font color="#E5E5E5"> temple is invalid it were</font><font color="#CCCCCC"> a poll</font>

381
00:25:36,490 --> 00:25:39,900
<font color="#CCCCCC">just like that</font><font color="#E5E5E5"> screenshot</font>

382
00:25:44,070 --> 00:25:52,060
okay let's see the verification with

383
00:25:47,380 --> 00:25:55,840
source code we can<font color="#CCCCCC"> finally check it it's</font>

384
00:25:52,060 --> 00:25:59,700
<font color="#CCCCCC">a lot</font><font color="#E5E5E5"> me typo</font><font color="#CCCCCC"> math must be in gdb see I</font>

385
00:25:55,840 --> 00:25:59,699
all be table session

386
00:25:59,730 --> 00:26:06,280
if it's not in IO beat a possession

387
00:26:03,580 --> 00:26:13,510
<font color="#CCCCCC">it'll</font><font color="#E5E5E5"> work check it for a</font><font color="#CCCCCC"> be</font><font color="#E5E5E5"> table</font>

388
00:26:06,280 --> 00:26:18,310
permit virtual<font color="#E5E5E5"> function call layer are</font>

389
00:26:13,510 --> 00:26:22,300
to check the first one is to<font color="#E5E5E5"> check if it</font>

390
00:26:18,310 --> 00:26:25,659
is<font color="#E5E5E5"> for capita period and the last second</font>

391
00:26:22,300 --> 00:26:29,800
one is to<font color="#E5E5E5"> check if it for sure library</font>

392
00:26:25,660 --> 00:26:32,560
from<font color="#E5E5E5"> the album from</font><font color="#CCCCCC"> the oil pipe neener</font>

393
00:26:29,800 --> 00:26:40,030
<font color="#E5E5E5">of lamb were terminal program</font>

394
00:26:32,560 --> 00:26:44,500
so can we bypass it can we<font color="#CCCCCC"> pass it by</font>

395
00:26:40,030 --> 00:26:52,930
overriding value of<font color="#CCCCCC"> I open set for</font><font color="#E5E5E5"> 40</font>

396
00:26:44,500 --> 00:26:55,680
<font color="#E5E5E5">min table it is very difficult because</font><font color="#CCCCCC"> a</font>

397
00:26:52,930 --> 00:26:59,140
<font color="#CCCCCC">lot</font><font color="#E5E5E5"> because because of a pointer gone</font>

398
00:26:55,680 --> 00:27:02,140
<font color="#E5E5E5">Poincare is very similar to stake a lot</font>

399
00:26:59,140 --> 00:27:07,270
is generated at the beginning of a

400
00:27:02,140 --> 00:27:10,600
<font color="#E5E5E5">program and we cannot predict it it were</font>

401
00:27:07,270 --> 00:27:12,040
occlusion or with pointer when we want

402
00:27:10,600 --> 00:27:18,969
to use it

403
00:27:12,040 --> 00:27:22,240
so the method is<font color="#E5E5E5"> impossible okay can we</font>

404
00:27:18,970 --> 00:27:26,590
bypass it by overall value of the open

405
00:27:22,240 --> 00:27:32,380
hook if libero<font color="#E5E5E5"> is not now it will bypass</font>

406
00:27:26,590 --> 00:27:35,740
<font color="#E5E5E5">the check it sounds good but you if you</font>

407
00:27:32,380 --> 00:27:39,010
can control their value you can also

408
00:27:35,740 --> 00:27:46,380
control a local<font color="#CCCCCC"> taki</font><font color="#E5E5E5"> such as</font><font color="#CCCCCC"> Macbook</font>

409
00:27:39,010 --> 00:27:49,960
<font color="#CCCCCC">rehook</font><font color="#E5E5E5"> Ryoka hood and so on according</font>

410
00:27:46,380 --> 00:27:55,290
accordingly<font color="#E5E5E5"> the word bypass look</font>

411
00:27:49,960 --> 00:27:58,960
beatable verification is very hot<font color="#E5E5E5"> so</font><font color="#CCCCCC"> far</font>

412
00:27:55,290 --> 00:28:07,389
so exploitation of file structure

413
00:27:58,960 --> 00:28:13,570
<font color="#E5E5E5">instead actually is no let's make</font><font color="#CCCCCC"> 500</font>

414
00:28:07,390 --> 00:28:16,710
<font color="#CCCCCC">quid again how about</font><font color="#E5E5E5"> shangela</font><font color="#CCCCCC"> tacky from</font>

415
00:28:13,570 --> 00:28:19,960
<font color="#CCCCCC">beatable to our</font><font color="#E5E5E5"> element</font>

416
00:28:16,710 --> 00:28:24,400
can we use our element<font color="#CCCCCC"> who to file</font>

417
00:28:19,960 --> 00:28:28,750
structure if rotation the answer is yes

418
00:28:24,400 --> 00:28:32,470
<font color="#E5E5E5">we</font><font color="#CCCCCC"> found to insert interesting element</font>

419
00:28:28,750 --> 00:28:39,040
stream<font color="#CCCCCC"> power and file</font><font color="#E5E5E5"> to convert in the</font>

420
00:28:32,470 --> 00:28:43,450
file structure after reading<font color="#CCCCCC"> gdbg</font><font color="#E5E5E5"> source</font>

421
00:28:39,040 --> 00:28:47,320
code when<font color="#CCCCCC"> you find if we</font><font color="#E5E5E5"> can overwrite</font>

422
00:28:43,450 --> 00:28:50,610
file structure and<font color="#E5E5E5"> use every flaw or</font>

423
00:28:47,320 --> 00:28:54,370
other<font color="#E5E5E5"> string really related function</font>

424
00:28:50,610 --> 00:28:57,449
<font color="#E5E5E5">relate function with file culture we can</font>

425
00:28:54,370 --> 00:29:01,360
do<font color="#E5E5E5"> aperture remember reading and</font>

426
00:28:57,450 --> 00:29:05,310
auditory memory<font color="#E5E5E5"> writing to simplifies</font>

427
00:29:01,360 --> 00:29:10,229
<font color="#CCCCCC">lock workflow</font><font color="#E5E5E5"> we will use</font><font color="#CCCCCC"> F read and</font>

428
00:29:05,310 --> 00:29:13,450
<font color="#CCCCCC">write as our example in fact</font>

429
00:29:10,230 --> 00:29:21,080
errors generality function can also<font color="#E5E5E5"> do</font>

430
00:29:13,450 --> 00:29:23,420
it<font color="#CCCCCC"> okay</font><font color="#E5E5E5"> let's talk about a flight</font>

431
00:29:21,080 --> 00:29:29,240
this part<font color="#E5E5E5"> I will use some</font><font color="#CCCCCC"> Judy</font><font color="#E5E5E5"> sisters</font>

432
00:29:23,420 --> 00:29:33,920
<font color="#CCCCCC">call to</font><font color="#E5E5E5"> explain under normal usage</font><font color="#CCCCCC"> if</font>

433
00:29:29,240 --> 00:29:38,090
light is used to<font color="#E5E5E5"> write data to file our</font>

434
00:29:33,920 --> 00:29:43,670
goal is<font color="#CCCCCC"> to write data in memory to stand</font>

435
00:29:38,090 --> 00:29:49,149
out if we want<font color="#CCCCCC"> to do that</font><font color="#E5E5E5"> we must meet</font>

436
00:29:43,670 --> 00:29:51,980
this condition above first first one

437
00:29:49,150 --> 00:29:55,970
<font color="#CCCCCC">settle fighting group filed is greater</font>

438
00:29:51,980 --> 00:30:00,550
in the file structure to stand out<font color="#E5E5E5"> it</font>

439
00:29:55,970 --> 00:30:03,760
also can be said to<font color="#CCCCCC"> stocky if we it is a</font>

440
00:30:00,550 --> 00:30:07,760
name<font color="#CCCCCC"> named world program</font>

441
00:30:03,760 --> 00:30:12,340
second set<font color="#E5E5E5"> flake value is currently</font>

442
00:30:07,760 --> 00:30:17,870
pooty pooty<font color="#E5E5E5"> and not</font><font color="#CCCCCC"> i own all right</font>

443
00:30:12,340 --> 00:30:20,899
third settler lipase and the right Petey

444
00:30:17,870 --> 00:30:25,370
Petey<font color="#CCCCCC"> are two memory</font><font color="#E5E5E5"> adjust from which</font>

445
00:30:20,900 --> 00:30:29,570
you want<font color="#CCCCCC"> to</font><font color="#E5E5E5"> read in the end said I</font>

446
00:30:25,370 --> 00:30:35,479
already<font color="#E5E5E5"> said I already add equal</font><font color="#CCCCCC"> to IO</font>

447
00:30:29,570 --> 00:30:42,800
lipase<font color="#E5E5E5"> so white do I have to set this</font>

448
00:30:35,480 --> 00:30:46,310
value in la flaca value<font color="#E5E5E5"> we want we want</font>

449
00:30:42,800 --> 00:30:52,250
<font color="#CCCCCC">to write solace we</font><font color="#E5E5E5"> want to write so we</font>

450
00:30:46,310 --> 00:30:55,250
<font color="#E5E5E5">must not must not need no life</font><font color="#CCCCCC"> lake in</font>

451
00:30:52,250 --> 00:30:59,120
the<font color="#CCCCCC"> FY source code internal we can see</font>

452
00:30:55,250 --> 00:31:03,590
whether we cannot set<font color="#CCCCCC"> AI all current</font>

453
00:30:59,120 --> 00:31:06,469
<font color="#CCCCCC">pootie it work at the justice</font><font color="#E5E5E5"> Jim buffer</font>

454
00:31:03,590 --> 00:31:10,669
for<font color="#E5E5E5"> stream buffer</font><font color="#CCCCCC"> pointer and it will</font>

455
00:31:06,470 --> 00:31:14,840
<font color="#E5E5E5">affect the result we want then it will</font>

456
00:31:10,670 --> 00:31:17,300
call I ought to<font color="#E5E5E5"> write but</font><font color="#CCCCCC"> it just called</font>

457
00:31:14,840 --> 00:31:20,600
<font color="#CCCCCC">virtual function but not cause didn't</font>

458
00:31:17,300 --> 00:31:31,240
call<font color="#CCCCCC"> write that directly there are many</font>

459
00:31:20,600 --> 00:31:35,740
campus condition in this function last

460
00:31:31,240 --> 00:31:36,640
deeper<font color="#CCCCCC"> rook we can see that we must set</font>

461
00:31:35,740 --> 00:31:41,380
<font color="#CCCCCC">I</font><font color="#E5E5E5"> all</font><font color="#CCCCCC"> right</font>

462
00:31:36,640 --> 00:31:44,860
<font color="#CCCCCC">and equal to IO</font><font color="#E5E5E5"> lipase otherwise it will</font>

463
00:31:41,380 --> 00:31:51,210
<font color="#CCCCCC">also add just a stream buffer and</font><font color="#E5E5E5"> affect</font>

464
00:31:44,860 --> 00:31:54,850
<font color="#E5E5E5">our result we want so we set it</font><font color="#CCCCCC"> to avoid</font>

465
00:31:51,210 --> 00:32:02,200
<font color="#E5E5E5">finally it will cost and co-write and</font>

466
00:31:54,850 --> 00:32:06,189
align some<font color="#E5E5E5"> data in memory</font><font color="#CCCCCC"> we want this</font>

467
00:32:02,200 --> 00:32:09,040
is a<font color="#E5E5E5"> simple code to modify it if we do</font>

468
00:32:06,190 --> 00:32:13,680
nothing<font color="#E5E5E5"> and fire it's just a program</font>

469
00:32:09,040 --> 00:32:13,680
that<font color="#E5E5E5"> write data you will input to file</font>

470
00:32:14,490 --> 00:32:21,160
after modified<font color="#E5E5E5"> value of element in</font><font color="#CCCCCC"> a</font>

471
00:32:17,620 --> 00:32:23,199
<font color="#E5E5E5">file structure you can see</font><font color="#CCCCCC"> that it it'll</font>

472
00:32:21,160 --> 00:32:26,430
<font color="#CCCCCC">read you will input</font><font color="#E5E5E5"> and the landlord</font>

473
00:32:23,200 --> 00:32:30,670
some data called<font color="#CCCCCC"> secret in memory just</font>

474
00:32:26,430 --> 00:32:33,370
<font color="#CCCCCC">like right picture our input</font><font color="#E5E5E5"> is hello</font>

475
00:32:30,670 --> 00:32:37,060
but<font color="#CCCCCC"> our final</font><font color="#E5E5E5"> result is print out with</font>

476
00:32:33,370 --> 00:32:41,409
think we that is we can read any data in

477
00:32:37,060 --> 00:32:44,649
merrily in the arrow<font color="#CCCCCC"> if we can control</font>

478
00:32:41,410 --> 00:32:46,560
all data<font color="#CCCCCC"> infrastructure we can use it to</font>

479
00:32:44,650 --> 00:33:01,920
bypass<font color="#CCCCCC"> a</font><font color="#E5E5E5"> SOR</font>

480
00:32:46,560 --> 00:33:09,000
<font color="#CCCCCC">okay last demo is the</font>

481
00:33:01,920 --> 00:33:12,600
same as<font color="#CCCCCC"> star sly and first</font><font color="#E5E5E5"> away with</font>

482
00:33:09,000 --> 00:33:16,860
almost<font color="#CCCCCC"> notify any value in</font><font color="#E5E5E5"> files Archer</font>

483
00:33:12,600 --> 00:33:20,969
<font color="#E5E5E5">it was right you were input to</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> lucky</font>

484
00:33:16,860 --> 00:33:33,990
kita<font color="#E5E5E5"> TST to a file teaching the PSP apt</font>

485
00:33:20,970 --> 00:33:41,270
<font color="#CCCCCC">top 50 and we're on it</font>

486
00:33:33,990 --> 00:33:44,270
and the way<font color="#E5E5E5"> in was Samson</font><font color="#CCCCCC"> hollow world i</font>

487
00:33:41,270 --> 00:33:44,270
sorry

488
00:33:56,780 --> 00:34:17,070
also in<font color="#CCCCCC"> our world and an output is</font>

489
00:34:09,120 --> 00:34:26,909
nothing<font color="#E5E5E5"> and</font><font color="#CCCCCC"> likeif</font><font color="#E5E5E5"> kita</font><font color="#CCCCCC"> TTT txt our</font>

490
00:34:17,070 --> 00:34:47,030
input and<font color="#E5E5E5"> we modify the value in</font><font color="#CCCCCC"> a</font><font color="#E5E5E5"> file</font>

491
00:34:26,909 --> 00:34:56,159
structure then we long entertain<font color="#E5E5E5"> okay it</font>

492
00:34:47,030 --> 00:35:02,610
is secret<font color="#E5E5E5"> and our input that is its put</font>

493
00:34:56,159 --> 00:35:12,630
<font color="#E5E5E5">the message in the memory so we can use</font>

494
00:35:02,610 --> 00:35:15,480
<font color="#E5E5E5">it to bypass SOR okay</font>

495
00:35:12,630 --> 00:35:19,110
this part is<font color="#E5E5E5"> used using afraid to do</font>

496
00:35:15,480 --> 00:35:23,820
arbitrary memory writing it is very

497
00:35:19,110 --> 00:35:28,740
<font color="#CCCCCC">similar to a flight we also need to meet</font>

498
00:35:23,820 --> 00:35:31,470
this condition above first<font color="#E5E5E5"> since the</font>

499
00:35:28,740 --> 00:35:36,930
<font color="#E5E5E5">settler</font><font color="#CCCCCC"> fire on earth</font><font color="#E5E5E5"> to fight it</font>

500
00:35:31,470 --> 00:35:43,500
<font color="#CCCCCC">Twitter of data in second set</font><font color="#E5E5E5"> flags is</font>

501
00:35:36,930 --> 00:35:48,480
not<font color="#CCCCCC"> io non read third set set read pace</font>

502
00:35:43,500 --> 00:35:50,970
equal to link PTR lastly set powerful

503
00:35:48,480 --> 00:35:54,870
paste and the power enter to memory

504
00:35:50,970 --> 00:35:58,709
<font color="#E5E5E5">edges which you want to write however</font>

505
00:35:54,870 --> 00:36:02,100
the<font color="#E5E5E5"> destination between poverty powerful</font>

506
00:35:58,710 --> 00:36:05,730
<font color="#CCCCCC">base and the power n must</font><font color="#E5E5E5"> be must be</font>

507
00:36:02,100 --> 00:36:09,270
<font color="#E5E5E5">bigger</font><font color="#CCCCCC"> than the size</font><font color="#E5E5E5"> of afraid</font>

508
00:36:05,730 --> 00:36:15,690
otherwise it were okay<font color="#CCCCCC"> a new</font><font color="#E5E5E5"> power</font>

509
00:36:09,270 --> 00:36:19,980
we need to<font color="#E5E5E5"> prevent</font><font color="#CCCCCC"> from</font><font color="#E5E5E5"> it let's take</font><font color="#CCCCCC"> a</font>

510
00:36:15,690 --> 00:36:28,200
deeper look again<font color="#E5E5E5"> why we need to set</font>

511
00:36:19,980 --> 00:36:31,860
<font color="#E5E5E5">with</font><font color="#CCCCCC"> bass equal to read PPR if we not</font>

512
00:36:28,200 --> 00:36:36,210
set it legitimacy<font color="#CCCCCC"> we'll think</font><font color="#E5E5E5"> that layer</font>

513
00:36:31,860 --> 00:36:41,370
is still data the newer buffer that must

514
00:36:36,210 --> 00:36:45,630
be<font color="#E5E5E5"> lightened first and we can not</font><font color="#CCCCCC"> write</font>

515
00:36:41,370 --> 00:36:48,180
our data in to this<font color="#CCCCCC"> destination the</font>

516
00:36:45,630 --> 00:36:53,550
following condition is buffer size ma

517
00:36:48,180 --> 00:36:58,080
must be<font color="#E5E5E5"> larger module must build larger</font>

518
00:36:53,550 --> 00:37:01,170
land size of afraid because<font color="#E5E5E5"> you need to</font>

519
00:36:58,080 --> 00:37:04,790
let it<font color="#E5E5E5"> think that buffer has enough</font>

520
00:37:01,170 --> 00:37:04,790
space to<font color="#CCCCCC"> put your data</font>

521
00:37:06,740 --> 00:37:14,490
next we do not<font color="#CCCCCC"> nothing</font><font color="#E5E5E5"> to the flick</font><font color="#CCCCCC"> I</font>

522
00:37:10,980 --> 00:37:19,950
own<font color="#E5E5E5"> own read because we want to use read</font>

523
00:37:14,490 --> 00:37:22,979
to data<font color="#CCCCCC"> to memory</font><font color="#E5E5E5"> if all condition is</font>

524
00:37:19,950 --> 00:37:27,770
satisfied it will cause didn't call

525
00:37:22,980 --> 00:37:28,950
written to read our data to<font color="#E5E5E5"> our goal</font>

526
00:37:27,770 --> 00:37:32,160
<font color="#E5E5E5">okay</font>

527
00:37:28,950 --> 00:37:34,460
we also use<font color="#CCCCCC"> users sample K a simple code</font>

528
00:37:32,160 --> 00:37:38,759
to verify it

529
00:37:34,460 --> 00:37:46,380
it<font color="#CCCCCC"> is</font><font color="#E5E5E5"> just lit data from file and put an</font>

530
00:37:38,760 --> 00:37:49,320
<font color="#CCCCCC">empty paper called</font><font color="#E5E5E5"> msg after mod modify</font>

531
00:37:46,380 --> 00:37:52,470
value of<font color="#CCCCCC"> element and set em as soon as</font>

532
00:37:49,320 --> 00:37:57,330
our stream buffer in the file structure

533
00:37:52,470 --> 00:38:01,049
<font color="#E5E5E5">if we you acute it you can find that it</font>

534
00:37:57,330 --> 00:38:04,170
work<font color="#E5E5E5"> it's waiting for</font><font color="#CCCCCC"> your input</font><font color="#E5E5E5"> that is</font>

535
00:38:01,050 --> 00:38:07,680
<font color="#E5E5E5">every is written from standard but not</font>

536
00:38:04,170 --> 00:38:10,720
<font color="#CCCCCC">from file and a</font><font color="#E5E5E5"> length after in pull</font>

537
00:38:07,680 --> 00:38:13,450
some string like<font color="#CCCCCC"> a screenshot</font>

538
00:38:10,720 --> 00:38:17,319
<font color="#E5E5E5">it print out you</font><font color="#CCCCCC"> were</font><font color="#E5E5E5"> imputed but not</font>

539
00:38:13,450 --> 00:38:21,399
<font color="#CCCCCC">every district in the Iowa</font><font color="#E5E5E5"> we can do a</font>

540
00:38:17,320 --> 00:38:35,320
Petrelli<font color="#E5E5E5"> memory writing okay I'll demo</font>

541
00:38:21,400 --> 00:38:41,200
it again<font color="#CCCCCC"> and we tone modifiers value</font>

542
00:38:35,320 --> 00:38:46,990
<font color="#E5E5E5">involved Roger at first so it just open</font>

543
00:38:41,200 --> 00:39:04,810
a file kita txt and I'll read it<font color="#E5E5E5"> then</font>

544
00:38:46,990 --> 00:39:13,660
put<font color="#CCCCCC"> her imported ability power okay</font><font color="#E5E5E5"> it</font>

545
00:39:04,810 --> 00:39:30,609
<font color="#CCCCCC">right my history so so we modify the</font>

546
00:39:13,660 --> 00:39:37,480
value in file culture and you can find

547
00:39:30,609 --> 00:39:39,538
<font color="#CCCCCC">awaiting our input so good hi HTTP</font><font color="#E5E5E5"> and</font>

548
00:39:37,480 --> 00:39:44,230
Alberta is hi ITP

549
00:39:39,539 --> 00:39:46,630
that is will rise will write<font color="#E5E5E5"> something</font>

550
00:39:44,230 --> 00:39:49,529
in the messaging power will<font color="#E5E5E5"> read</font>

551
00:39:46,630 --> 00:39:55,019
something to<font color="#CCCCCC"> melt message to buffer so</font>

552
00:39:49,529 --> 00:39:55,019
not it<font color="#E5E5E5"> we can do a betrayal</font><font color="#CCCCCC"> rewriting</font>

553
00:40:00,029 --> 00:40:06,220
after you can do arbitrary memory

554
00:40:02,859 --> 00:40:10,509
<font color="#E5E5E5">reading or writing you can control</font><font color="#CCCCCC"> the</font>

555
00:40:06,220 --> 00:40:14,200
flow<font color="#E5E5E5"> easily you can overwrite some</font>

556
00:40:10,509 --> 00:40:17,349
variable content function pointer for

557
00:40:14,200 --> 00:40:21,098
instance you can write your tea or hook

558
00:40:17,349 --> 00:40:24,999
<font color="#CCCCCC">series such as mac</font><font color="#E5E5E5"> hook we hook read</font>

559
00:40:21,099 --> 00:40:30,730
<font color="#E5E5E5">only okay hook and so on by the way if</font>

560
00:40:24,999 --> 00:40:34,238
<font color="#CCCCCC">we can not only use afraid and and</font><font color="#E5E5E5"> a fly</font>

561
00:40:30,730 --> 00:40:36,970
but also use<font color="#E5E5E5"> any</font><font color="#CCCCCC"> I own string related</font>

562
00:40:34,239 --> 00:40:49,509
functions which you<font color="#E5E5E5"> which use file</font>

563
00:40:36,970 --> 00:40:52,660
structure such as<font color="#CCCCCC"> F get</font><font color="#E5E5E5"> put and so on so</font>

564
00:40:49,509 --> 00:40:57,460
what if layer is not any file<font color="#E5E5E5"> operation</font>

565
00:40:52,660 --> 00:41:00,069
in<font color="#CCCCCC"> a program actually</font><font color="#E5E5E5"> we can use</font><font color="#CCCCCC"> theta</font>

566
00:40:57,460 --> 00:41:03,809
<font color="#CCCCCC">instead a standard hours</font><font color="#E5E5E5"> then the</font><font color="#CCCCCC"> error</font>

567
00:41:00,069 --> 00:41:08,019
with<font color="#CCCCCC"> me table position as our</font><font color="#E5E5E5"> target</font>

568
00:41:03,809 --> 00:41:12,369
this<font color="#E5E5E5"> is a very common use</font><font color="#CCCCCC"> of data i/o</font>

569
00:41:08,019 --> 00:41:16,899
<font color="#E5E5E5">function such as put printf and scanf</font><font color="#CCCCCC"> in</font>

570
00:41:12,369 --> 00:41:21,160
<font color="#E5E5E5">a program it will use data in agenda or</font>

571
00:41:16,900 --> 00:41:24,549
a standard<font color="#E5E5E5"> error in Geneva see last take</font>

572
00:41:21,160 --> 00:41:27,190
<font color="#CCCCCC">two scenario to show you how to use</font>

573
00:41:24,549 --> 00:41:34,119
standard<font color="#CCCCCC"> in and standard</font><font color="#E5E5E5"> out who is very</font>

574
00:41:27,190 --> 00:41:38,160
a process<font color="#E5E5E5"> the first one assume</font><font color="#CCCCCC"> we have</font>

575
00:41:34,119 --> 00:41:41,369
some<font color="#E5E5E5"> memory</font><font color="#CCCCCC"> crashing and hip and use any</font>

576
00:41:38,160 --> 00:41:44,940
standard<font color="#CCCCCC"> all</font><font color="#E5E5E5"> relating function</font>

577
00:41:41,369 --> 00:41:51,089
how can we do<font color="#E5E5E5"> to</font><font color="#CCCCCC"> bypasses are in full</font>

578
00:41:44,940 --> 00:41:55,140
petition we can use some people it's for

579
00:41:51,089 --> 00:41:58,950
it<font color="#CCCCCC"> 10/10</font><font color="#E5E5E5"> are equal to all over right</font>

580
00:41:55,140 --> 00:42:04,229
flake and partial over like<font color="#E5E5E5"> I all right</font>

581
00:41:58,950 --> 00:42:07,769
<font color="#CCCCCC">based for example</font><font color="#E5E5E5"> we can use Fassbender</font>

582
00:42:04,229 --> 00:42:10,979
take to pass partially over right and<font color="#E5E5E5"> so</font>

583
00:42:07,769 --> 00:42:15,718
<font color="#CCCCCC">being if we don't have any edges it were</font>

584
00:42:10,979 --> 00:42:18,779
<font color="#E5E5E5">okay</font><font color="#CCCCCC"> a trunk and</font><font color="#E5E5E5"> stand out so let's all</font>

585
00:42:15,719 --> 00:42:22,469
<font color="#CCCCCC">add we</font><font color="#E5E5E5"> can overwrite it it is very</font>

586
00:42:18,779 --> 00:42:29,219
<font color="#CCCCCC">similar to house of</font><font color="#E5E5E5"> Roman but our</font><font color="#CCCCCC"> taki</font>

587
00:42:22,469 --> 00:42:32,849
<font color="#E5E5E5">is five structure after to let if we</font>

588
00:42:29,219 --> 00:42:36,930
call some standard<font color="#E5E5E5"> our related function</font>

589
00:42:32,849 --> 00:42:40,920
<font color="#E5E5E5">it will</font><font color="#CCCCCC"> present memory data in jealousy</font>

590
00:42:36,930 --> 00:42:43,319
or heap because I all right pace<font color="#E5E5E5"> have</font>

591
00:42:40,920 --> 00:42:47,940
<font color="#E5E5E5">people have been changed</font><font color="#CCCCCC"> too low in the</font>

592
00:42:43,319 --> 00:42:50,519
<font color="#CCCCCC">front of stand</font><font color="#E5E5E5"> out and it will print the</font>

593
00:42:47,940 --> 00:42:53,759
current content of standard<font color="#E5E5E5"> out</font>

594
00:42:50,519 --> 00:42:57,238
<font color="#CCCCCC">structure</font><font color="#E5E5E5"> there are</font><font color="#CCCCCC"> many interesting</font>

595
00:42:53,759 --> 00:43:03,569
<font color="#E5E5E5">value which can contain some</font><font color="#CCCCCC"> Jubilee</font>

596
00:42:57,239 --> 00:43:06,960
edges and the hip ages in<font color="#E5E5E5"> slender arm so</font>

597
00:43:03,569 --> 00:43:15,089
we<font color="#E5E5E5"> can use</font><font color="#CCCCCC"> blur technical to bypass</font>

598
00:43:06,960 --> 00:43:17,369
<font color="#E5E5E5">again the second one is cohesion assume</font>

599
00:43:15,089 --> 00:43:20,788
there are some standard in relative

600
00:43:17,369 --> 00:43:26,749
function in the program<font color="#E5E5E5"> such such as</font>

601
00:43:20,789 --> 00:43:30,359
scale<font color="#E5E5E5"> F F get and so on besides besides</font>

602
00:43:26,749 --> 00:43:33,718
<font color="#E5E5E5">standard in is unbuffered let's like</font>

603
00:43:30,359 --> 00:43:37,769
<font color="#CCCCCC">we'll make</font><font color="#E5E5E5"> a</font><font color="#CCCCCC"> spender</font><font color="#E5E5E5"> in function look</font>

604
00:43:33,719 --> 00:43:42,989
like<font color="#CCCCCC"> no bathroom buffer but in fact it</font>

605
00:43:37,769 --> 00:43:49,038
has<font color="#CCCCCC"> a</font><font color="#E5E5E5"> one by buffer</font><font color="#CCCCCC"> cause Joe buffer in</font>

606
00:43:42,989 --> 00:43:49,039
in<font color="#E5E5E5"> Nevada in such internal at first</font>

607
00:43:49,249 --> 00:43:54,390
<font color="#CCCCCC">IO</font><font color="#E5E5E5"> powerful pace and I hope a fella</font><font color="#CCCCCC"> is</font>

608
00:43:53,039 --> 00:44:01,260
point<font color="#E5E5E5"> who it</font>

609
00:43:54,390 --> 00:44:03,660
<font color="#CCCCCC">pointing to</font><font color="#E5E5E5"> show</font><font color="#CCCCCC"> buffer if we have some</font>

610
00:44:01,260 --> 00:44:08,130
memory cover<font color="#CCCCCC"> corruption energy cheaper</font>

611
00:44:03,660 --> 00:44:12,299
<font color="#CCCCCC">we can use ENSO</font><font color="#E5E5E5"> punitive which is very</font>

612
00:44:08,130 --> 00:44:16,559
common in he<font color="#CCCCCC"> plays petition to override</font>

613
00:44:12,299 --> 00:44:20,549
<font color="#E5E5E5">I hope our ADA which will point the</font>

614
00:44:16,559 --> 00:44:25,500
<font color="#CCCCCC">pointed call and so beam is behind</font><font color="#E5E5E5"> the</font>

615
00:44:20,549 --> 00:44:28,880
<font color="#E5E5E5">standard in structure okay</font>

616
00:44:25,500 --> 00:44:32,400
as a result we<font color="#E5E5E5"> created</font><font color="#CCCCCC"> a large Center in</font>

617
00:44:28,880 --> 00:44:37,339
buffer into the Basilica<font color="#E5E5E5"> okay</font><font color="#CCCCCC"> lady</font>

618
00:44:32,400 --> 00:44:37,339
<font color="#CCCCCC">assisted him</font><font color="#E5E5E5"> studying in buffer</font>

619
00:44:40,220 --> 00:44:46,500
<font color="#E5E5E5">therefore it will use the larger</font><font color="#CCCCCC"> buffer</font>

620
00:44:43,260 --> 00:44:49,890
acid<font color="#E5E5E5"> stream buffer while we call some</font>

621
00:44:46,500 --> 00:44:53,039
that are in related function for

622
00:44:49,890 --> 00:44:57,868
instance<font color="#E5E5E5"> instance if we call scanf</font>

623
00:44:53,039 --> 00:45:01,170
person<font color="#CCCCCC"> d it were it will call reader</font>

624
00:44:57,869 --> 00:45:04,829
the first parameter 0 second parameter

625
00:45:01,170 --> 00:45:07,970
<font color="#E5E5E5">power base and the third parameter is</font>

626
00:45:04,829 --> 00:45:13,309
size of stella<font color="#E5E5E5"> in buffer so we can</font>

627
00:45:07,970 --> 00:45:16,169
overwrite those steadily in buffer<font color="#CCCCCC"> or</font>

628
00:45:13,309 --> 00:45:19,369
<font color="#CCCCCC">overwrite</font><font color="#E5E5E5"> to the seeker of</font><font color="#CCCCCC"> overlap</font>

629
00:45:16,170 --> 00:45:23,759
g-dub's<font color="#CCCCCC"> develop or use studying buffer</font>

630
00:45:19,369 --> 00:45:27,240
that is it can over by many<font color="#E5E5E5"> coop</font>

631
00:45:23,759 --> 00:45:38,819
available in GBC such such as may lack

632
00:45:27,240 --> 00:45:45,839
hook finally if you trigger<font color="#CCCCCC"> Mayock later</font>

633
00:45:38,819 --> 00:45:49,920
<font color="#E5E5E5">you can control</font><font color="#CCCCCC"> flow again there are</font>

634
00:45:45,839 --> 00:45:53,130
some another bypass bypass verification

635
00:45:49,920 --> 00:45:56,759
if you're a<font color="#E5E5E5"> big virtual function use</font>

636
00:45:53,130 --> 00:45:59,509
iostream file structure it will invoke

637
00:45:56,759 --> 00:46:04,470
another virtual function table without

638
00:45:59,509 --> 00:46:07,049
be tape over<font color="#E5E5E5"> if occasion so we can use</font>

639
00:46:04,470 --> 00:46:08,069
the list function and a<font color="#E5E5E5"> fortune</font><font color="#CCCCCC"> and</font>

640
00:46:07,049 --> 00:46:10,170
<font color="#E5E5E5">other</font>

641
00:46:08,070 --> 00:46:17,430
virtual<font color="#CCCCCC"> function table</font><font color="#E5E5E5"> we can control a</font>

642
00:46:10,170 --> 00:46:22,890
poker encounter again last take

643
00:46:17,430 --> 00:46:26,279
<font color="#E5E5E5">I often finish</font><font color="#CCCCCC"> as our example if if we</font>

644
00:46:22,890 --> 00:46:29,160
use iostream finish<font color="#CCCCCC"> aslam</font><font color="#E5E5E5"> virtual</font>

645
00:46:26,280 --> 00:46:32,010
<font color="#CCCCCC">function in file structure which you</font>

646
00:46:29,160 --> 00:46:37,020
<font color="#E5E5E5">Forge we can bypass</font><font color="#CCCCCC"> every type of</font>

647
00:46:32,010 --> 00:46:39,210
<font color="#E5E5E5">verification more easy and</font><font color="#CCCCCC"> then it will</font>

648
00:46:37,020 --> 00:46:42,990
call a virtual<font color="#CCCCCC"> function pointer in I</font>

649
00:46:39,210 --> 00:46:47,310
often draw IAO stream file structure

650
00:46:42,990 --> 00:46:51,629
which we can point to anywhere<font color="#CCCCCC"> okay this</font>

651
00:46:47,310 --> 00:46:54,420
one<font color="#CCCCCC"> is the call color function in stream</font>

652
00:46:51,630 --> 00:47:00,930
<font color="#CCCCCC">I'll</font><font color="#E5E5E5"> stream file structure the point of</font>

653
00:46:54,420 --> 00:47:05,990
the<font color="#E5E5E5"> volume pointer is here that is we</font>

654
00:47:00,930 --> 00:47:05,990
can control<font color="#E5E5E5"> program hundred again</font>

655
00:47:07,460 --> 00:47:15,870
another virtual function<font color="#E5E5E5"> use stream file</font>

656
00:47:10,500 --> 00:47:24,680
as this as but<font color="#E5E5E5"> both it is also very</font>

657
00:47:15,870 --> 00:47:32,069
powerful the above is<font color="#CCCCCC"> in the case of</font>

658
00:47:24,680 --> 00:47:34,290
<font color="#E5E5E5">learning</font><font color="#CCCCCC"> as / - how about</font><font color="#E5E5E5"> windows file</font>

659
00:47:32,070 --> 00:47:41,460
structure<font color="#E5E5E5"> in</font><font color="#CCCCCC"> Windows</font><font color="#E5E5E5"> does not have any</font>

660
00:47:34,290 --> 00:47:45,840
virtual function table but it<font color="#CCCCCC"> is it also</font>

661
00:47:41,460 --> 00:47:53,610
has<font color="#CCCCCC"> Jim buffer point it also has two in</font>

662
00:47:45,840 --> 00:47:57,990
bar point so we can<font color="#E5E5E5"> call it</font><font color="#CCCCCC"> -</font><font color="#E5E5E5"> actually -</font>

663
00:47:53,610 --> 00:48:03,600
to arbitrary to do a virtual<font color="#E5E5E5"> memory</font>

664
00:47:57,990 --> 00:48:05,419
<font color="#CCCCCC">reading or in the writing okay and</font>

665
00:48:03,600 --> 00:48:08,790
crucial

666
00:48:05,420 --> 00:48:12,930
five structure is a good hockey for<font color="#E5E5E5"> pyro</font>

667
00:48:08,790 --> 00:48:15,590
expectation we show<font color="#E5E5E5"> that it can be used</font>

668
00:48:12,930 --> 00:48:18,750
<font color="#E5E5E5">to</font><font color="#CCCCCC"> a betrayal in memory or in the light</font>

669
00:48:15,590 --> 00:48:21,960
control program counter and<font color="#E5E5E5"> do oriented</font>

670
00:48:18,750 --> 00:48:25,350
programming but I think it can<font color="#CCCCCC"> be</font><font color="#E5E5E5"> used</font>

671
00:48:21,960 --> 00:48:30,570
<font color="#E5E5E5">to other is protection techniques such</font>

672
00:48:25,350 --> 00:48:35,600
as arbitrary free or at or a map and so

673
00:48:30,570 --> 00:48:38,880
on<font color="#E5E5E5"> it's also very</font><font color="#CCCCCC"> powerful in some</font>

674
00:48:35,600 --> 00:48:41,250
<font color="#E5E5E5">unspoiled purple case</font><font color="#CCCCCC"> ok let's try</font><font color="#E5E5E5"> to</font>

675
00:48:38,880 --> 00:48:44,910
find more and<font color="#CCCCCC"> more</font><font color="#E5E5E5"> it spot exploit</font>

676
00:48:41,250 --> 00:48:56,400
technical infrastructure<font color="#CCCCCC"> ok thank you</font>

677
00:48:44,910 --> 00:48:57,620
for<font color="#E5E5E5"> listening</font><font color="#CCCCCC"> bye any questions from the</font>

678
00:48:56,400 --> 00:49:00,780
<font color="#CCCCCC">floor</font>

679
00:48:57,620 --> 00:49:03,319
<font color="#E5E5E5">no all right thank you</font><font color="#CCCCCC"> very much again</font>

680
00:49:00,780 --> 00:49:03,320
<font color="#CCCCCC">thanks</font>

