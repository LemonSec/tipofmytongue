1
00:00:09,519 --> 00:00:18,880
thank you for for coming<font color="#CCCCCC"> welcome to my</font>

2
00:00:14,860 --> 00:00:22,480
talk<font color="#CCCCCC"> that's titled</font><font color="#E5E5E5"> is the pen mightier</font>

3
00:00:18,880 --> 00:00:25,150
than the sword<font color="#CCCCCC"> basically this will be a</font>

4
00:00:22,480 --> 00:00:29,769
first look into the security<font color="#CCCCCC"> of the</font>

5
00:00:25,150 --> 00:00:32,800
Apple pencil<font color="#E5E5E5"> because</font><font color="#CCCCCC"> of pen</font><font color="#E5E5E5"> and the</font>

6
00:00:29,769 --> 00:00:35,500
<font color="#CCCCCC">Apple Smart keyboard</font><font color="#E5E5E5"> because before I</font>

7
00:00:32,800 --> 00:00:39,730
did<font color="#E5E5E5"> this research I thought would</font>

8
00:00:35,500 --> 00:00:43,269
<font color="#E5E5E5">they're likely very similar in some</font>

9
00:00:39,730 --> 00:00:47,589
regards<font color="#CCCCCC"> they are but we will see this</font><font color="#E5E5E5"> so</font>

10
00:00:43,269 --> 00:00:50,500
Who am<font color="#CCCCCC"> I</font><font color="#E5E5E5"> I'm</font><font color="#CCCCCC"> Stephan I'm from Germany I</font>

11
00:00:47,589 --> 00:00:54,129
do this<font color="#E5E5E5"> whole security things for 30</font>

12
00:00:50,500 --> 00:00:55,809
<font color="#E5E5E5">year now</font><font color="#CCCCCC"> I started with</font><font color="#E5E5E5"> doing run time</font>

13
00:00:54,129 --> 00:00:59,440
encryption then I moved over<font color="#E5E5E5"> to</font>

14
00:00:55,809 --> 00:01:02,379
exploitation<font color="#CCCCCC"> then I moved over in this</font>

15
00:00:59,440 --> 00:01:05,199
<font color="#E5E5E5">whole web security and</font><font color="#CCCCCC"> PHP and</font><font color="#E5E5E5"> then when</font>

16
00:01:02,379 --> 00:01:07,179
I got so bored that<font color="#CCCCCC"> in 2010 I thought I</font>

17
00:01:05,199 --> 00:01:13,119
need<font color="#CCCCCC"> a</font><font color="#E5E5E5"> real target so I went into the</font>

18
00:01:07,180 --> 00:01:16,479
field<font color="#CCCCCC"> of iOS security ok</font><font color="#E5E5E5"> so the</font>

19
00:01:13,119 --> 00:01:18,850
<font color="#E5E5E5">motivation of this talk</font><font color="#CCCCCC"> is well one</font>

20
00:01:16,479 --> 00:01:21,939
thing is<font color="#E5E5E5"> not in</font><font color="#CCCCCC"> the slide but I was</font>

21
00:01:18,850 --> 00:01:23,979
actually quite annoyed when I after a

22
00:01:21,939 --> 00:01:28,359
year of buying it I<font color="#CCCCCC"> took out an</font><font color="#E5E5E5"> Apple</font>

23
00:01:23,979 --> 00:01:30,280
pencil and connected it to<font color="#CCCCCC"> my to</font><font color="#E5E5E5"> my iPad</font>

24
00:01:28,359 --> 00:01:32,350
<font color="#E5E5E5">and it didn't work anymore</font>

25
00:01:30,280 --> 00:01:33,820
I later<font color="#E5E5E5"> learned it's a broken battery so</font>

26
00:01:32,350 --> 00:01:35,380
I cannot do anything<font color="#E5E5E5"> but I wanted to</font>

27
00:01:33,820 --> 00:01:38,380
<font color="#CCCCCC">know how this whole thing works and</font>

28
00:01:35,380 --> 00:01:39,999
<font color="#E5E5E5">that's</font><font color="#CCCCCC"> why I</font><font color="#E5E5E5"> started the research but</font>

29
00:01:38,380 --> 00:01:42,908
also<font color="#E5E5E5"> there</font><font color="#CCCCCC"> are a</font><font color="#E5E5E5"> bunch of security</font>

30
00:01:39,999 --> 00:01:46,839
aspects when you look at the accessories

31
00:01:42,909 --> 00:01:49,329
<font color="#CCCCCC">that you can</font><font color="#E5E5E5"> buy for for iPads</font><font color="#CCCCCC"> a lot</font><font color="#E5E5E5"> of</font>

32
00:01:46,840 --> 00:01:51,460
people use these Apple pencils and these

33
00:01:49,329 --> 00:01:53,439
smart keyboards and they don't actually

34
00:01:51,460 --> 00:01:56,559
think<font color="#E5E5E5"> about that this is like a</font><font color="#CCCCCC"> computer</font>

35
00:01:53,439 --> 00:02:00,850
and they connected<font color="#CCCCCC"> to their to</font><font color="#E5E5E5"> their</font>

36
00:01:56,560 --> 00:02:03,369
iPad<font color="#E5E5E5"> and I just use it</font><font color="#CCCCCC"> and unlike the</font>

37
00:02:00,850 --> 00:02:05,199
normal iOS system<font color="#CCCCCC"> there is actually no</font>

38
00:02:03,369 --> 00:02:08,288
public research on the security of<font color="#E5E5E5"> these</font>

39
00:02:05,200 --> 00:02:12,160
accessories<font color="#CCCCCC"> at all at least I don't know</font>

40
00:02:08,288 --> 00:02:15,069
any<font color="#E5E5E5"> of it</font><font color="#CCCCCC"> so the next thing is these</font>

41
00:02:12,160 --> 00:02:16,990
accessories look all the same so<font color="#E5E5E5"> you</font>

42
00:02:15,069 --> 00:02:19,959
will<font color="#E5E5E5"> never noticed if someone just</font>

43
00:02:16,990 --> 00:02:22,310
replaces your Apple pencil you<font color="#E5E5E5"> will</font>

44
00:02:19,960 --> 00:02:24,560
likely<font color="#E5E5E5"> also not notice when</font><font color="#CCCCCC"> someone</font><font color="#E5E5E5"> just</font>

45
00:02:22,310 --> 00:02:26,750
<font color="#E5E5E5">is your your keyboard and that's like</font>

46
00:02:24,560 --> 00:02:29,599
<font color="#E5E5E5">cluck-cluck and they have replaced your</font>

47
00:02:26,750 --> 00:02:33,800
<font color="#E5E5E5">keyboard so the question is how much</font><font color="#CCCCCC"> can</font>

48
00:02:29,599 --> 00:02:35,480
we actually<font color="#E5E5E5"> trust these devices and then</font>

49
00:02:33,800 --> 00:02:38,330
the next thing<font color="#E5E5E5"> is even if nobody</font>

50
00:02:35,480 --> 00:02:40,670
replaces it<font color="#E5E5E5"> if someone asks you in a</font>

51
00:02:38,330 --> 00:02:42,019
<font color="#E5E5E5">Starbucks or Kenya can have your Apple</font>

52
00:02:40,670 --> 00:02:45,079
pencil for a second I need to draw

53
00:02:42,019 --> 00:02:46,849
<font color="#E5E5E5">something maybe you give it away because</font>

54
00:02:45,080 --> 00:02:50,750
<font color="#CCCCCC">you</font><font color="#E5E5E5"> don't see that</font><font color="#CCCCCC"> there's a</font><font color="#E5E5E5"> security</font>

55
00:02:46,849 --> 00:02:55,040
<font color="#CCCCCC">threat and in the end what's the better</font>

56
00:02:50,750 --> 00:02:57,200
<font color="#E5E5E5">key logger</font><font color="#CCCCCC"> than a keyboard so and yes of</font>

57
00:02:55,040 --> 00:02:59,239
course Kenny Kenny malicious accessory

58
00:02:57,200 --> 00:03:02,149
take over your iPad these are all the

59
00:02:59,239 --> 00:03:05,660
<font color="#E5E5E5">questions that I wanted to</font><font color="#CCCCCC"> and answer so</font>

60
00:03:02,150 --> 00:03:07,400
disclaimer<font color="#CCCCCC"> this</font><font color="#E5E5E5"> was announced as an</font>

61
00:03:05,660 --> 00:03:09,380
<font color="#E5E5E5">introduction</font><font color="#CCCCCC"> Ori talk</font><font color="#E5E5E5"> because it was an</font>

62
00:03:07,400 --> 00:03:11,030
introduction<font color="#E5E5E5"> for me</font><font color="#CCCCCC"> it was also an</font>

63
00:03:09,380 --> 00:03:13,340
introduction into<font color="#E5E5E5"> this whole field and I</font>

64
00:03:11,030 --> 00:03:16,610
<font color="#E5E5E5">needed</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> know how all of this works and</font>

65
00:03:13,340 --> 00:03:18,260
<font color="#E5E5E5">how I can start real juicy research in</font>

66
00:03:16,610 --> 00:03:21,260
it

67
00:03:18,260 --> 00:03:23,709
I will likely do more more<font color="#E5E5E5"> talks in the</font>

68
00:03:21,260 --> 00:03:26,000
future<font color="#CCCCCC"> if I find some interesting</font><font color="#E5E5E5"> thing</font>

69
00:03:23,709 --> 00:03:27,890
but<font color="#E5E5E5"> today I want to give you the</font>

70
00:03:26,000 --> 00:03:32,030
groundwork<font color="#E5E5E5"> so</font><font color="#CCCCCC"> that you can start your</font>

71
00:03:27,890 --> 00:03:34,488
own research<font color="#CCCCCC"> I also so far did not have</font>

72
00:03:32,030 --> 00:03:37,430
any device what I mean by this<font color="#E5E5E5"> is I did</font>

73
00:03:34,489 --> 00:03:40,730
<font color="#E5E5E5">not attempt any hardware attack</font><font color="#CCCCCC"> so I</font>

74
00:03:37,430 --> 00:03:43,459
didn't try<font color="#CCCCCC"> to break</font><font color="#E5E5E5"> them open and modify</font>

75
00:03:40,730 --> 00:03:45,470
<font color="#CCCCCC">the chips directly but this is</font><font color="#E5E5E5"> something</font>

76
00:03:43,459 --> 00:03:49,310
I will<font color="#E5E5E5"> also look into with help of some</font>

77
00:03:45,470 --> 00:03:53,840
hardware security<font color="#E5E5E5"> people so this talk is</font>

78
00:03:49,310 --> 00:03:56,810
kind<font color="#E5E5E5"> of open source</font><font color="#CCCCCC"> because I will use a</font>

79
00:03:53,840 --> 00:03:59,299
few<font color="#E5E5E5"> scripts and demos inside this talk</font>

80
00:03:56,810 --> 00:04:03,530
and all of this will be<font color="#E5E5E5"> available</font><font color="#CCCCCC"> on</font>

81
00:03:59,299 --> 00:04:06,109
this github<font color="#CCCCCC"> so far I've only</font><font color="#E5E5E5"> created</font>

82
00:04:03,530 --> 00:04:08,180
this and uploaded like<font color="#E5E5E5"> a an idea of file</font>

83
00:04:06,109 --> 00:04:11,060
loader<font color="#E5E5E5"> but the other stuff will come</font>

84
00:04:08,180 --> 00:04:13,880
within the next few<font color="#E5E5E5"> days</font><font color="#CCCCCC"> also a white</font>

85
00:04:11,060 --> 00:04:18,858
<font color="#CCCCCC">paper and this</font><font color="#E5E5E5"> slide tag is on the</font>

86
00:04:13,880 --> 00:04:22,550
website<font color="#CCCCCC"> from from</font><font color="#E5E5E5"> hack in the</font><font color="#CCCCCC"> box ok so</font>

87
00:04:18,858 --> 00:04:25,479
how do we start<font color="#E5E5E5"> this research</font><font color="#CCCCCC"> the</font>

88
00:04:22,550 --> 00:04:28,639
easiest way<font color="#CCCCCC"> is</font><font color="#E5E5E5"> to find out what's inside</font>

89
00:04:25,479 --> 00:04:30,530
<font color="#E5E5E5">but as I</font><font color="#CCCCCC"> said I didn't harm anything so</font>

90
00:04:28,639 --> 00:04:33,040
I just<font color="#E5E5E5"> looked it up on the internet and</font>

91
00:04:30,530 --> 00:04:35,799
there's I fix<font color="#E5E5E5"> it</font>

92
00:04:33,040 --> 00:04:37,300
who actually did a teardown<font color="#E5E5E5"> of this</font>

93
00:04:35,800 --> 00:04:42,520
Apple smart Keyboard

94
00:04:37,300 --> 00:04:46,380
in I think<font color="#CCCCCC"> 2015 and what they did is</font>

95
00:04:42,520 --> 00:04:51,390
they<font color="#CCCCCC"> found inside</font><font color="#E5E5E5"> that there is an stm32</font>

96
00:04:46,380 --> 00:04:55,240
<font color="#E5E5E5">f103</font><font color="#CCCCCC"> VB a</font><font color="#E5E5E5"> microcontroller in there and</font>

97
00:04:51,390 --> 00:04:57,750
since then<font color="#CCCCCC"> apple has released</font><font color="#E5E5E5"> this smart</font>

98
00:04:55,240 --> 00:05:05,260
<font color="#E5E5E5">keyboard in three different form factors</font>

99
00:04:57,750 --> 00:05:09,310
<font color="#CCCCCC">12 9-inch 10-5 and 9.7 the issue here is</font>

100
00:05:05,260 --> 00:05:13,090
that<font color="#E5E5E5"> the I fix</font><font color="#CCCCCC"> the teardown is only</font><font color="#E5E5E5"> for</font>

101
00:05:09,310 --> 00:05:16,030
the<font color="#E5E5E5"> very first one so in theory it's</font>

102
00:05:13,090 --> 00:05:18,429
actually not known if the<font color="#CCCCCC"> other two</font>

103
00:05:16,030 --> 00:05:23,349
revisions<font color="#CCCCCC"> have the same microcontroller</font>

104
00:05:18,430 --> 00:05:26,560
inside the<font color="#CCCCCC"> 9.7 seems to because the</font>

105
00:05:23,350 --> 00:05:28,930
firmware<font color="#E5E5E5"> is very similar but the 10.5</font>

106
00:05:26,560 --> 00:05:33,430
might be a completely<font color="#CCCCCC"> new revision with</font>

107
00:05:28,930 --> 00:05:35,980
a new microcontroller<font color="#CCCCCC"> the great thing</font>

108
00:05:33,430 --> 00:05:38,320
about<font color="#E5E5E5"> these STM microcontrollers is that</font>

109
00:05:35,980 --> 00:05:40,270
for each<font color="#CCCCCC"> of these you just google them</font>

110
00:05:38,320 --> 00:05:42,790
<font color="#E5E5E5">and</font><font color="#CCCCCC"> you find the product</font><font color="#E5E5E5"> URL and the</font>

111
00:05:40,270 --> 00:05:47,260
<font color="#CCCCCC">datasheet and</font><font color="#E5E5E5"> then you get tons and tons</font>

112
00:05:42,790 --> 00:05:49,390
of<font color="#CCCCCC"> information</font><font color="#E5E5E5"> about them</font><font color="#CCCCCC"> this one here</font>

113
00:05:47,260 --> 00:05:52,060
for example<font color="#E5E5E5"> is a mainstream performance</font>

114
00:05:49,390 --> 00:05:56,590
line a<font color="#E5E5E5"> microcontroller which basically</font>

115
00:05:52,060 --> 00:06:00,130
is an arm cortex-m<font color="#CCCCCC"> 3 it has 128</font>

116
00:05:56,590 --> 00:06:03,039
kilobytes of flash memory<font color="#CCCCCC"> 20 mega</font><font color="#E5E5E5"> by 20</font>

117
00:06:00,130 --> 00:06:05,409
kilobytes of SRAM<font color="#CCCCCC"> and according to</font><font color="#E5E5E5"> the</font>

118
00:06:03,040 --> 00:06:09,520
datasheet it has no memory<font color="#E5E5E5"> protection</font>

119
00:06:05,410 --> 00:06:14,200
unit this means<font color="#E5E5E5"> that can</font><font color="#CCCCCC"> actually no</font>

120
00:06:09,520 --> 00:06:18,490
real<font color="#CCCCCC"> protection on the memory the pencil</font>

121
00:06:14,200 --> 00:06:22,180
was also teardown<font color="#E5E5E5"> by by I fix it and</font>

122
00:06:18,490 --> 00:06:25,570
they discovered that<font color="#E5E5E5"> there's an STM l15</font>

123
00:06:22,180 --> 00:06:29,320
<font color="#CCCCCC">one you see y6 microcontroller in there</font>

124
00:06:25,570 --> 00:06:33,969
<font color="#E5E5E5">which is the red</font><font color="#CCCCCC"> part here and this is a</font>

125
00:06:29,320 --> 00:06:35,890
slightly different one but<font color="#E5E5E5"> again we can</font>

126
00:06:33,970 --> 00:06:39,220
<font color="#CCCCCC">just Google this and we will</font><font color="#E5E5E5"> find</font><font color="#CCCCCC"> the</font>

127
00:06:35,890 --> 00:06:41,440
product URL and the<font color="#CCCCCC"> datasheet and from</font>

128
00:06:39,220 --> 00:06:44,880
the datasheet it says it's an<font color="#CCCCCC"> ultra-low</font>

129
00:06:41,440 --> 00:06:48,360
<font color="#CCCCCC">power it's also on cortex m3 it has</font>

130
00:06:44,880 --> 00:06:51,240
256 kilobytes of flash<font color="#CCCCCC"> it</font><font color="#E5E5E5"> says 32</font>

131
00:06:48,360 --> 00:06:54,300
kilobytes of SRAM it has<font color="#E5E5E5"> 8 kilobytes of</font>

132
00:06:51,240 --> 00:06:56,720
data a EEPROM and the nice<font color="#CCCCCC"> thing here it</font>

133
00:06:54,300 --> 00:06:59,850
actually<font color="#CCCCCC"> has an MP</font><font color="#E5E5E5"> u so it can use</font>

134
00:06:56,720 --> 00:07:03,540
<font color="#CCCCCC">memory</font><font color="#E5E5E5"> protection features like non</font>

135
00:06:59,850 --> 00:07:06,540
writable<font color="#E5E5E5"> and and so on memory</font><font color="#CCCCCC"> also it</font>

136
00:07:03,540 --> 00:07:08,880
has memory option bytes so that the

137
00:07:06,540 --> 00:07:15,150
flash can be<font color="#E5E5E5"> configured</font><font color="#CCCCCC"> so that certain</font>

138
00:07:08,880 --> 00:07:17,340
areas of the memory are not readable so

139
00:07:15,150 --> 00:07:20,909
as I said<font color="#E5E5E5"> this STM microcontrollers are</font>

140
00:07:17,340 --> 00:07:23,669
very nice<font color="#CCCCCC"> because they are very very</font>

141
00:07:20,910 --> 00:07:26,640
<font color="#CCCCCC">very documented you can just google them</font>

142
00:07:23,670 --> 00:07:30,390
<font color="#E5E5E5">and you get to this product URL and then</font>

143
00:07:26,640 --> 00:07:33,750
at the end<font color="#E5E5E5"> of this website you will find</font>

144
00:07:30,390 --> 00:07:36,810
<font color="#E5E5E5">a large table of many many documents</font>

145
00:07:33,750 --> 00:07:39,600
<font color="#E5E5E5">about this specific microcontroller</font><font color="#CCCCCC"> or</font>

146
00:07:36,810 --> 00:07:41,580
the family<font color="#E5E5E5"> so you will find programming</font>

147
00:07:39,600 --> 00:07:43,920
guides you will<font color="#E5E5E5"> find of</font><font color="#CCCCCC"> course the</font>

148
00:07:41,580 --> 00:07:46,169
<font color="#E5E5E5">datasheet</font><font color="#CCCCCC"> and everything and inside this</font>

149
00:07:43,920 --> 00:07:49,260
is everything<font color="#CCCCCC"> you</font><font color="#E5E5E5"> need to</font><font color="#CCCCCC"> know to</font>

150
00:07:46,170 --> 00:07:52,170
understand how they<font color="#E5E5E5"> work for example</font>

151
00:07:49,260 --> 00:07:54,960
<font color="#CCCCCC">this year is from</font><font color="#E5E5E5"> the smart Keyboard</font>

152
00:07:52,170 --> 00:07:57,660
from the datasheet<font color="#CCCCCC"> it shows you the</font>

153
00:07:54,960 --> 00:08:00,440
memory map of<font color="#E5E5E5"> this microcontroller</font><font color="#CCCCCC"> and</font>

154
00:07:57,660 --> 00:08:03,360
you can see here for each peripheral

155
00:08:00,440 --> 00:08:05,460
<font color="#E5E5E5">what the address is and then in the</font>

156
00:08:03,360 --> 00:08:08,250
other<font color="#E5E5E5"> documents you can find what</font>

157
00:08:05,460 --> 00:08:10,919
registers<font color="#E5E5E5"> that what offset and how how</font>

158
00:08:08,250 --> 00:08:13,020
do they work what<font color="#E5E5E5"> bit means what and so</font>

159
00:08:10,920 --> 00:08:14,760
it's<font color="#CCCCCC"> very nice</font><font color="#E5E5E5"> especially</font><font color="#CCCCCC"> if you have</font>

160
00:08:13,020 --> 00:08:21,120
never done<font color="#CCCCCC"> anything with</font><font color="#E5E5E5"> these kind of</font>

161
00:08:14,760 --> 00:08:23,849
<font color="#E5E5E5">things like like me before so the memory</font>

162
00:08:21,120 --> 00:08:25,980
protection unit here which is basically

163
00:08:23,850 --> 00:08:28,740
<font color="#CCCCCC">the thing that can give your memory</font>

164
00:08:25,980 --> 00:08:31,980
different protection levels<font color="#CCCCCC"> the lack of</font>

165
00:08:28,740 --> 00:08:35,400
<font color="#E5E5E5">this is actually</font><font color="#CCCCCC"> the first in my point</font>

166
00:08:31,980 --> 00:08:38,640
of view<font color="#E5E5E5"> little security weakness because</font>

167
00:08:35,400 --> 00:08:41,130
<font color="#CCCCCC">it means if you find a vulnerability the</font>

168
00:08:38,640 --> 00:08:45,180
expectation<font color="#E5E5E5"> is likely</font><font color="#CCCCCC"> very easy</font><font color="#E5E5E5"> because</font>

169
00:08:41,130 --> 00:08:47,490
there is no<font color="#E5E5E5"> memory protection</font><font color="#CCCCCC"> the Apple</font>

170
00:08:45,180 --> 00:08:52,560
pencil you must know it<font color="#CCCCCC"> actually has</font>

171
00:08:47,490 --> 00:08:55,830
this<font color="#E5E5E5"> MP</font><font color="#CCCCCC"> u inside</font><font color="#E5E5E5"> the</font><font color="#CCCCCC"> DES cortex but from</font>

172
00:08:52,560 --> 00:08:57,089
<font color="#E5E5E5">looking at the firmware</font><font color="#CCCCCC"> I did not find</font>

173
00:08:55,830 --> 00:09:00,730
any

174
00:08:57,089 --> 00:09:04,259
yeah usage or configuration<font color="#E5E5E5"> of this</font><font color="#CCCCCC"> mpu</font>

175
00:09:00,730 --> 00:09:07,300
so<font color="#E5E5E5"> it's either not used at the</font><font color="#CCCCCC"> moment</font><font color="#E5E5E5"> or</font>

176
00:09:04,259 --> 00:09:09,850
there's an unknown<font color="#CCCCCC"> bootrom that runs</font>

177
00:09:07,300 --> 00:09:12,279
before<font color="#E5E5E5"> the firmware and that might</font>

178
00:09:09,850 --> 00:09:18,369
configure the<font color="#CCCCCC"> mpu</font><font color="#E5E5E5"> but this is unknown</font>

179
00:09:12,279 --> 00:09:19,749
<font color="#E5E5E5">because</font><font color="#CCCCCC"> it's not extracted yet so the</font>

180
00:09:18,369 --> 00:09:22,509
next<font color="#E5E5E5"> thing</font><font color="#CCCCCC"> is when you know what's</font>

181
00:09:19,749 --> 00:09:25,540
<font color="#E5E5E5">inside you want to know what what is</font>

182
00:09:22,509 --> 00:09:30,489
actually running on it so you<font color="#CCCCCC"> normally</font>

183
00:09:25,540 --> 00:09:32,230
<font color="#E5E5E5">want to have the firmware so the nice</font>

184
00:09:30,489 --> 00:09:35,379
thing<font color="#CCCCCC"> about the</font><font color="#E5E5E5"> pencil and the smart</font>

185
00:09:32,230 --> 00:09:38,769
<font color="#CCCCCC">Keyboard</font><font color="#E5E5E5"> is they both allow firmware</font>

186
00:09:35,379 --> 00:09:42,129
upgrades<font color="#CCCCCC"> actually the firmware</font><font color="#E5E5E5"> is</font>

187
00:09:38,769 --> 00:09:46,540
automatically upgraded<font color="#E5E5E5"> when</font><font color="#CCCCCC"> they're</font>

188
00:09:42,129 --> 00:09:49,869
connected<font color="#CCCCCC"> to your iPad and the upgrade</font>

189
00:09:46,540 --> 00:09:52,029
is even silent<font color="#E5E5E5"> so you don't see that the</font>

190
00:09:49,869 --> 00:09:57,069
<font color="#CCCCCC">upgrade happens it just doesn't ask you</font>

191
00:09:52,029 --> 00:09:58,689
<font color="#CCCCCC">it</font><font color="#E5E5E5"> just does it</font><font color="#CCCCCC"> which was surprising to</font>

192
00:09:57,069 --> 00:10:02,618
me because<font color="#CCCCCC"> on the internet you can find</font>

193
00:09:58,689 --> 00:10:04,540
<font color="#E5E5E5">some some pictures where actually</font>

194
00:10:02,619 --> 00:10:07,949
there's a<font color="#CCCCCC"> pop-up</font><font color="#E5E5E5"> asking you if you want</font>

195
00:10:04,540 --> 00:10:13,689
<font color="#CCCCCC">to upgrade some</font><font color="#E5E5E5"> firmware but in reality</font>

196
00:10:07,949 --> 00:10:18,429
this updates<font color="#E5E5E5"> happens silently at least</font>

197
00:10:13,689 --> 00:10:20,649
those<font color="#E5E5E5"> that I</font><font color="#CCCCCC"> quote</font><font color="#E5E5E5"> witness</font><font color="#CCCCCC"> the user is</font>

198
00:10:18,429 --> 00:10:22,569
absolutely not involved in this<font color="#CCCCCC"> you ta</font>

199
00:10:20,649 --> 00:10:24,819
process and that means you cannot just

200
00:10:22,569 --> 00:10:28,029
like download from an<font color="#E5E5E5"> Apple website</font><font color="#CCCCCC"> this</font>

201
00:10:24,819 --> 00:10:29,979
this firmware binary and look at it<font color="#E5E5E5"> so</font>

202
00:10:28,029 --> 00:10:32,110
<font color="#CCCCCC">if you want</font><font color="#E5E5E5"> to get a copy of the</font>

203
00:10:29,980 --> 00:10:35,199
<font color="#CCCCCC">firmware</font><font color="#E5E5E5"> you actually need to follow the</font>

204
00:10:32,110 --> 00:10:43,029
whole automatic upgrade<font color="#E5E5E5"> path and find</font>

205
00:10:35,199 --> 00:10:46,508
out where the app that<font color="#E5E5E5"> it is so who is</font>

206
00:10:43,029 --> 00:10:48,910
<font color="#CCCCCC">actually capable of updating</font><font color="#E5E5E5"> so there's</font>

207
00:10:46,509 --> 00:10:51,610
this<font color="#CCCCCC"> thing that is the launch</font><font color="#E5E5E5"> demon</font>

208
00:10:48,910 --> 00:10:55,029
called<font color="#CCCCCC"> Chrome Apple mobile SSS accessory</font>

209
00:10:51,610 --> 00:10:58,419
updater<font color="#E5E5E5"> and that launch daemon starts</font>

210
00:10:55,029 --> 00:11:00,759
the fat demon<font color="#CCCCCC"> inside this demon it's</font>

211
00:10:58,419 --> 00:11:04,179
never said what actually fat stands<font color="#E5E5E5"> for</font>

212
00:11:00,759 --> 00:11:07,029
but<font color="#E5E5E5"> it's likely firmware update daemon</font>

213
00:11:04,179 --> 00:11:07,930
so this demon for some reason runs<font color="#CCCCCC"> this</font>

214
00:11:07,029 --> 00:11:11,080
route

215
00:11:07,930 --> 00:11:14,979
and I cannot<font color="#CCCCCC"> witness that it runs in any</font>

216
00:11:11,080 --> 00:11:17,860
sandbox<font color="#E5E5E5"> so this means this will update</font>

217
00:11:14,980 --> 00:11:20,890
your<font color="#CCCCCC"> device as your accessories</font><font color="#E5E5E5"> talk to</font>

218
00:11:17,860 --> 00:11:24,520
your accessories<font color="#E5E5E5"> run as</font><font color="#CCCCCC"> rude and</font><font color="#E5E5E5"> it's</font>

219
00:11:20,890 --> 00:11:26,560
not inside<font color="#E5E5E5"> the sandbox this is another</font>

220
00:11:24,520 --> 00:11:33,430
thing that<font color="#CCCCCC"> I would</font><font color="#E5E5E5"> consider a little</font>

221
00:11:26,560 --> 00:11:35,859
security<font color="#E5E5E5"> weakness so this demon uses a</font>

222
00:11:33,430 --> 00:11:38,469
private framework that's called<font color="#E5E5E5"> mobile</font>

223
00:11:35,860 --> 00:11:41,680
accessory accessory<font color="#CCCCCC"> update</font><font color="#E5E5E5"> of framework</font>

224
00:11:38,470 --> 00:11:44,320
and this one<font color="#E5E5E5"> uses different bundle</font>

225
00:11:41,680 --> 00:11:47,589
plugins<font color="#E5E5E5"> depending on what kind of device</font>

226
00:11:44,320 --> 00:11:52,300
you<font color="#E5E5E5"> have and what needs to be updated</font><font color="#CCCCCC"> so</font>

227
00:11:47,589 --> 00:11:54,310
in our case<font color="#CCCCCC"> this pencil and</font><font color="#E5E5E5"> this</font>

228
00:11:52,300 --> 00:12:00,219
keyboard<font color="#E5E5E5"> is controlled via</font><font color="#CCCCCC"> the</font>

229
00:11:54,310 --> 00:12:02,589
<font color="#E5E5E5">standalone</font><font color="#CCCCCC"> hit fu D plugins and when you</font>

230
00:12:00,220 --> 00:12:05,170
look at it and also<font color="#E5E5E5"> from the name you</font>

231
00:12:02,589 --> 00:12:08,200
<font color="#CCCCCC">can see in the code that is actually</font>

232
00:12:05,170 --> 00:12:12,250
creating hit device connections to some

233
00:12:08,200 --> 00:12:14,860
<font color="#E5E5E5">drivers and then uses them sends hit</font>

234
00:12:12,250 --> 00:12:30,180
feature requests<font color="#E5E5E5"> and uses them</font><font color="#CCCCCC"> to</font>

235
00:12:14,860 --> 00:12:35,470
perform actually<font color="#CCCCCC"> the upgrade so how does</font>

236
00:12:30,180 --> 00:12:38,859
upgrade discovery work<font color="#E5E5E5"> the</font><font color="#CCCCCC"> the whole</font>

237
00:12:35,470 --> 00:12:41,290
thing<font color="#CCCCCC"> starts with the</font><font color="#E5E5E5"> iPad downloading a</font>

238
00:12:38,860 --> 00:12:44,080
manifest that contains<font color="#E5E5E5"> information about</font>

239
00:12:41,290 --> 00:12:46,810
<font color="#E5E5E5">the updates so you can see these crazy</font>

240
00:12:44,080 --> 00:12:51,339
long URLs that are kind of<font color="#E5E5E5"> hard coded</font>

241
00:12:46,810 --> 00:12:54,670
and<font color="#E5E5E5"> in the background</font><font color="#CCCCCC"> it will try to</font>

242
00:12:51,339 --> 00:12:58,810
retrieve these<font color="#E5E5E5"> URLs which are basically</font>

243
00:12:54,670 --> 00:13:01,599
<font color="#E5E5E5">XML files so the Apple pencil and the</font>

244
00:12:58,810 --> 00:13:03,640
smart Keyboard 12.9 have like a

245
00:13:01,600 --> 00:13:10,420
well-defined URL and when you click it

246
00:13:03,640 --> 00:13:13,959
<font color="#CCCCCC">you actually</font><font color="#E5E5E5"> get some</font><font color="#CCCCCC"> xml back</font><font color="#E5E5E5"> the other</font>

247
00:13:10,420 --> 00:13:17,650
smart keyboards the<font color="#E5E5E5"> two small ones they</font>

248
00:13:13,959 --> 00:13:21,880
theoretically<font color="#E5E5E5"> also have</font><font color="#CCCCCC"> URLs</font><font color="#E5E5E5"> but when</font>

249
00:13:17,650 --> 00:13:25,270
you try to yeah<font color="#E5E5E5"> open them</font>

250
00:13:21,880 --> 00:13:27,670
you will see that the smart Keyboard<font color="#CCCCCC"> 9.7</font>

251
00:13:25,270 --> 00:13:29,500
will actually tell you<font color="#E5E5E5"> oh there's no no</font>

252
00:13:27,670 --> 00:13:31,209
upgrade here<font color="#E5E5E5"> there's no firmware</font>

253
00:13:29,500 --> 00:13:34,750
upgrades<font color="#E5E5E5"> there's nothing here</font>

254
00:13:31,210 --> 00:13:37,270
and the 10.5 is even worse it will<font color="#E5E5E5"> give</font>

255
00:13:34,750 --> 00:13:40,330
you an access<font color="#E5E5E5"> denied error so there's</font>

256
00:13:37,270 --> 00:13:44,199
<font color="#E5E5E5">nothing there and this is a problem when</font>

257
00:13:40,330 --> 00:13:47,470
you do the<font color="#CCCCCC"> research</font><font color="#E5E5E5"> because</font><font color="#CCCCCC"> you only get</font>

258
00:13:44,200 --> 00:13:49,780
an update for the 12.9<font color="#CCCCCC"> there is no</font>

259
00:13:47,470 --> 00:13:56,470
public firmware<font color="#E5E5E5"> for</font><font color="#CCCCCC"> the other two smart</font>

260
00:13:49,780 --> 00:13:59,020
<font color="#CCCCCC">keyboards so when you look into this</font>

261
00:13:56,470 --> 00:14:01,270
manifest it's like an XML that<font color="#CCCCCC"> that's</font>

262
00:13:59,020 --> 00:14:05,110
the usual description of<font color="#E5E5E5"> all the content</font>

263
00:14:01,270 --> 00:14:07,000
<font color="#E5E5E5">and basically</font><font color="#CCCCCC"> it tells you what is the</font>

264
00:14:05,110 --> 00:14:11,970
<font color="#CCCCCC">version</font><font color="#E5E5E5"> that is</font><font color="#CCCCCC"> available at the moment</font>

265
00:14:07,000 --> 00:14:11,970
how it is packed<font color="#CCCCCC"> normally</font><font color="#E5E5E5"> that is</font><font color="#CCCCCC"> zip</font>

266
00:14:12,330 --> 00:14:19,420
<font color="#CCCCCC">then later</font><font color="#E5E5E5"> in this XML</font><font color="#CCCCCC"> it will actually</font>

267
00:14:17,440 --> 00:14:21,940
<font color="#E5E5E5">tell</font><font color="#CCCCCC"> you where exactly</font><font color="#E5E5E5"> you can download</font>

268
00:14:19,420 --> 00:14:24,939
it<font color="#E5E5E5"> and how big</font><font color="#CCCCCC"> it is</font><font color="#E5E5E5"> and it also has a</font>

269
00:14:21,940 --> 00:14:28,660
sha-1<font color="#CCCCCC"> of the downloadable</font><font color="#E5E5E5"> file so you</font>

270
00:14:24,940 --> 00:14:31,570
<font color="#CCCCCC">can</font><font color="#E5E5E5"> verify it and then the whole</font><font color="#CCCCCC"> thing</font>

271
00:14:28,660 --> 00:14:34,510
is terrifically signed with some<font color="#CCCCCC"> Apple</font>

272
00:14:31,570 --> 00:14:36,460
specific<font color="#E5E5E5"> XML signing so you see in the</font>

273
00:14:34,510 --> 00:14:39,970
end there's a<font color="#E5E5E5"> certificate and his</font>

274
00:14:36,460 --> 00:14:42,850
<font color="#E5E5E5">signature and this certificate it uses</font>

275
00:14:39,970 --> 00:14:45,280
it's called the asset manifest signing

276
00:14:42,850 --> 00:14:49,120
certificate<font color="#E5E5E5"> so when you take</font><font color="#CCCCCC"> this</font>

277
00:14:45,280 --> 00:14:52,270
certificate<font color="#CCCCCC"> and</font><font color="#E5E5E5"> use open SSL to make it</font>

278
00:14:49,120 --> 00:14:56,610
human readable<font color="#E5E5E5"> you will get this kind of</font>

279
00:14:52,270 --> 00:15:02,380
dump and it's kind of<font color="#CCCCCC"> interesting</font><font color="#E5E5E5"> that</font>

280
00:14:56,610 --> 00:15:05,080
this<font color="#E5E5E5"> certificate is expired</font><font color="#CCCCCC"> it expired</font>

281
00:15:02,380 --> 00:15:08,620
like last<font color="#E5E5E5"> month in the middle of last</font>

282
00:15:05,080 --> 00:15:11,050
<font color="#CCCCCC">month and 14th of</font><font color="#E5E5E5"> July and since then</font><font color="#CCCCCC"> I</font>

283
00:15:08,620 --> 00:15:16,480
have<font color="#CCCCCC"> tested</font><font color="#E5E5E5"> it every day since then</font>

284
00:15:11,050 --> 00:15:20,170
<font color="#E5E5E5">Apple has not fixed</font><font color="#CCCCCC"> that however</font><font color="#E5E5E5"> for me</font>

285
00:15:16,480 --> 00:15:23,230
at the moment<font color="#E5E5E5"> it's an</font><font color="#CCCCCC"> a miracle what</font>

286
00:15:20,170 --> 00:15:25,750
this actually<font color="#CCCCCC"> has an</font><font color="#E5E5E5"> impact because as I</font>

287
00:15:23,230 --> 00:15:29,140
<font color="#CCCCCC">said there are</font><font color="#E5E5E5"> still silent firmware</font>

288
00:15:25,750 --> 00:15:33,610
updates happening and they happen beside

289
00:15:29,140 --> 00:15:35,260
that<font color="#E5E5E5"> this year is not working so it's</font>

290
00:15:33,610 --> 00:15:38,140
not really<font color="#CCCCCC"> clear</font>

291
00:15:35,260 --> 00:15:40,810
why this<font color="#E5E5E5"> still works</font><font color="#CCCCCC"> and I haven't</font>

292
00:15:38,140 --> 00:15:44,020
<font color="#E5E5E5">actually tested as if it will also</font>

293
00:15:40,810 --> 00:15:46,599
update on a very fresh restored<font color="#E5E5E5"> device</font>

294
00:15:44,020 --> 00:15:49,449
<font color="#E5E5E5">maybe device that was restored after the</font>

295
00:15:46,600 --> 00:15:53,920
<font color="#E5E5E5">state doesn't have it cashed yet and</font>

296
00:15:49,450 --> 00:15:55,630
then maybe this<font color="#CCCCCC"> will have an impact but</font>

297
00:15:53,920 --> 00:15:59,020
what you meet<font color="#E5E5E5"> need to know is</font><font color="#CCCCCC"> that the</font>

298
00:15:55,630 --> 00:16:02,350
last<font color="#E5E5E5"> updates from Apple were only posted</font>

299
00:15:59,020 --> 00:16:05,110
in 2017 anyway<font color="#E5E5E5"> so there's a high chance</font>

300
00:16:02,350 --> 00:16:08,910
<font color="#E5E5E5">when you have on any</font><font color="#CCCCCC"> of these</font><font color="#E5E5E5"> devices</font>

301
00:16:05,110 --> 00:16:08,910
<font color="#E5E5E5">that you're running</font><font color="#CCCCCC"> the latest</font><font color="#E5E5E5"> firmware</font>

302
00:16:11,970 --> 00:16:17,110
<font color="#CCCCCC">okay</font>

303
00:16:13,150 --> 00:16:19,329
so now we know where we find these XML

304
00:16:17,110 --> 00:16:21,850
files<font color="#CCCCCC"> where we can download</font><font color="#E5E5E5"> zip files</font>

305
00:16:19,330 --> 00:16:24,910
<font color="#E5E5E5">and now we need to know what's actually</font>

306
00:16:21,850 --> 00:16:26,590
inside the<font color="#E5E5E5"> zip file well we I will not</font>

307
00:16:24,910 --> 00:16:28,870
bother to show<font color="#CCCCCC"> you the directory</font>

308
00:16:26,590 --> 00:16:30,910
structure<font color="#CCCCCC"> we are only interested</font><font color="#E5E5E5"> in the</font>

309
00:16:28,870 --> 00:16:34,360
fact that<font color="#CCCCCC"> there is a firmware</font><font color="#E5E5E5"> file</font>

310
00:16:30,910 --> 00:16:37,930
inside and for the pencil and for the

311
00:16:34,360 --> 00:16:40,240
<font color="#CCCCCC">keyboard this</font><font color="#E5E5E5"> is an awful file which is</font>

312
00:16:37,930 --> 00:16:43,120
likely accessory accessory firmware

313
00:16:40,240 --> 00:16:47,020
update<font color="#E5E5E5"> again this is no we're actually</font>

314
00:16:43,120 --> 00:16:49,660
<font color="#E5E5E5">really documented</font><font color="#CCCCCC"> the file</font><font color="#E5E5E5"> extension is</font>

315
00:16:47,020 --> 00:16:54,220
not necessarily<font color="#CCCCCC"> AF you in this file it</font>

316
00:16:49,660 --> 00:16:56,170
can be<font color="#CCCCCC"> depend</font><font color="#E5E5E5"> on anything and I think</font>

317
00:16:54,220 --> 00:16:59,230
the keyboard for example<font color="#CCCCCC"> has not been at</font>

318
00:16:56,170 --> 00:17:01,689
the pencil<font color="#E5E5E5"> s dot</font><font color="#CCCCCC"> R for those 2</font>

319
00:16:59,230 --> 00:17:04,780
accessories<font color="#CCCCCC"> are not the only ones</font><font color="#E5E5E5"> using</font>

320
00:17:01,690 --> 00:17:06,640
this file format<font color="#CCCCCC"> for example the</font><font color="#E5E5E5"> Smart</font>

321
00:17:04,780 --> 00:17:10,300
<font color="#E5E5E5">Remote</font><font color="#CCCCCC"> no I think it's called zero</font>

322
00:17:06,640 --> 00:17:13,870
<font color="#E5E5E5">remote sorry so the</font><font color="#CCCCCC"> 0</font><font color="#E5E5E5"> room mode uses the</font>

323
00:17:10,300 --> 00:17:15,940
same file format<font color="#E5E5E5"> but for example</font><font color="#CCCCCC"> the</font>

324
00:17:13,869 --> 00:17:25,929
<font color="#E5E5E5">airports have a completely different</font>

325
00:17:15,940 --> 00:17:28,089
file format yes in general<font color="#E5E5E5"> the file</font>

326
00:17:25,930 --> 00:17:32,830
format<font color="#E5E5E5"> looks like this we have a</font><font color="#CCCCCC"> 1 and</font>

327
00:17:28,089 --> 00:17:36,940
28<font color="#E5E5E5"> bytes header that header is followed</font>

328
00:17:32,830 --> 00:17:41,199
by<font color="#CCCCCC"> the actual firmware data then we have</font>

329
00:17:36,940 --> 00:17:46,210
at the moment<font color="#CCCCCC"> a sha-256 hash of the data</font>

330
00:17:41,200 --> 00:17:46,670
and the header<font color="#E5E5E5"> and then in the very end</font>

331
00:17:46,210 --> 00:17:52,370
via

332
00:17:46,670 --> 00:17:56,620
signature over<font color="#E5E5E5"> this sha-256 hash the</font>

333
00:17:52,370 --> 00:18:05,709
signature is actually PKS<font color="#CCCCCC"> palette so</font>

334
00:17:56,620 --> 00:18:09,500
<font color="#E5E5E5">it's a secure way to do a signature so</font>

335
00:18:05,710 --> 00:18:13,370
the header when we look inside<font color="#E5E5E5"> consists</font>

336
00:18:09,500 --> 00:18:15,350
of three parts<font color="#CCCCCC"> it has a main header and</font>

337
00:18:13,370 --> 00:18:18,590
that specifies<font color="#CCCCCC"> what kind of</font><font color="#E5E5E5"> firmware</font>

338
00:18:15,350 --> 00:18:22,550
this is what devices<font color="#CCCCCC"> it for</font><font color="#E5E5E5"> 400 revision</font>

339
00:18:18,590 --> 00:18:25,669
at<font color="#CCCCCC"> four</font><font color="#E5E5E5"> it has a CRC</font><font color="#CCCCCC"> over the firmware</font>

340
00:18:22,550 --> 00:18:30,409
data and of<font color="#CCCCCC"> course the length of the</font>

341
00:18:25,670 --> 00:18:32,930
firmware data<font color="#E5E5E5"> when you see CRC anywhere</font>

342
00:18:30,410 --> 00:18:35,000
in this accessory research<font color="#E5E5E5"> you must know</font>

343
00:18:32,930 --> 00:18:38,000
that<font color="#E5E5E5"> there are two different</font><font color="#CCCCCC"> CRC</font>

344
00:18:35,000 --> 00:18:42,950
algorithms that<font color="#CCCCCC"> are used there's on the</font>

345
00:18:38,000 --> 00:18:47,210
<font color="#E5E5E5">one hand the normal</font><font color="#CCCCCC"> crc32</font><font color="#E5E5E5"> and then some</font>

346
00:18:42,950 --> 00:18:50,840
STM microcontrollers have an own CRC

347
00:18:47,210 --> 00:18:53,300
engine inside<font color="#E5E5E5"> that has a different</font>

348
00:18:50,840 --> 00:18:57,159
configuration<font color="#E5E5E5"> and therefore by default</font>

349
00:18:53,300 --> 00:19:00,740
spits out a different<font color="#E5E5E5"> CRC value so some</font>

350
00:18:57,160 --> 00:19:05,060
accessories use the standard<font color="#CCCCCC"> crc32 and</font>

351
00:19:00,740 --> 00:19:07,280
some use<font color="#E5E5E5"> the STM sorry</font><font color="#CCCCCC"> too</font>

352
00:19:05,060 --> 00:19:11,179
so this the blue part is basically

353
00:19:07,280 --> 00:19:14,210
mandatory now the red part is

354
00:19:11,180 --> 00:19:16,220
theoretically optional<font color="#E5E5E5"> but you will</font>

355
00:19:14,210 --> 00:19:20,090
never see<font color="#CCCCCC"> a firmware without this red</font>

356
00:19:16,220 --> 00:19:25,180
part so the red part<font color="#E5E5E5"> is this signature</font>

357
00:19:20,090 --> 00:19:28,159
header<font color="#E5E5E5"> and that describes where this</font>

358
00:19:25,180 --> 00:19:30,170
sha-256 hash is actually theoretically

359
00:19:28,160 --> 00:19:31,730
it also defines what kind<font color="#E5E5E5"> of hash it is</font>

360
00:19:30,170 --> 00:19:35,210
but at the moment<font color="#E5E5E5"> there's only one</font>

361
00:19:31,730 --> 00:19:37,520
supported and it defines where the

362
00:19:35,210 --> 00:19:40,820
<font color="#CCCCCC">signature is and what kind</font><font color="#E5E5E5"> of signature</font>

363
00:19:37,520 --> 00:19:42,379
<font color="#E5E5E5">is and how long the signature is there</font>

364
00:19:40,820 --> 00:19:45,830
are actually<font color="#CCCCCC"> different kind of section</font>

365
00:19:42,380 --> 00:19:50,270
signatures available<font color="#E5E5E5"> you have signatures</font>

366
00:19:45,830 --> 00:19:53,389
that are for all<font color="#E5E5E5"> people like anybody who</font>

367
00:19:50,270 --> 00:19:55,160
downloads it but<font color="#CCCCCC"> apple also</font><font color="#E5E5E5"> supports a</font>

368
00:19:53,390 --> 00:19:58,940
different<font color="#CCCCCC"> kind of signature</font><font color="#E5E5E5"> that</font><font color="#CCCCCC"> assigns</font>

369
00:19:55,160 --> 00:20:00,150
<font color="#E5E5E5">a different key</font><font color="#CCCCCC"> and then this is</font>

370
00:19:58,940 --> 00:20:03,810
supposedly

371
00:20:00,150 --> 00:20:07,110
analyzed for your device<font color="#E5E5E5"> so what that</font>

372
00:20:03,810 --> 00:20:10,080
means is if it's a personalized firmware

373
00:20:07,110 --> 00:20:13,800
<font color="#E5E5E5">then the green header needs to be filled</font>

374
00:20:10,080 --> 00:20:17,280
<font color="#E5E5E5">out and the green header basically just</font>

375
00:20:13,800 --> 00:20:21,000
has a unique ID in there<font color="#E5E5E5"> that comes from</font>

376
00:20:17,280 --> 00:20:23,910
your device this means<font color="#CCCCCC"> Apple can create</font>

377
00:20:21,000 --> 00:20:28,170
you a current rate of firmware<font color="#E5E5E5"> for you</font>

378
00:20:23,910 --> 00:20:32,090
that only works on<font color="#CCCCCC"> one specific keyboard</font>

379
00:20:28,170 --> 00:20:36,480
<font color="#E5E5E5">and the way this works is that the STM</font>

380
00:20:32,090 --> 00:20:39,600
microcontroller<font color="#E5E5E5"> has</font><font color="#CCCCCC"> a 12 byte or 96 bit</font>

381
00:20:36,480 --> 00:20:42,630
internal unique ID<font color="#E5E5E5"> and this must match</font>

382
00:20:39,600 --> 00:20:45,600
here<font color="#E5E5E5"> then it's personalized for this</font>

383
00:20:42,630 --> 00:20:48,690
specific device<font color="#CCCCCC"> I've never seen such a</font>

384
00:20:45,600 --> 00:20:51,469
<font color="#E5E5E5">firmware in reality I</font><font color="#CCCCCC"> can</font><font color="#E5E5E5"> only reverse</font>

385
00:20:48,690 --> 00:20:51,470
it from the code

386
00:20:52,760 --> 00:21:00,720
speaking of<font color="#CCCCCC"> codes I've created</font><font color="#E5E5E5"> two tools</font>

387
00:20:57,150 --> 00:21:04,530
here both are Python scripts the first

388
00:21:00,720 --> 00:21:07,080
one is a tool<font color="#E5E5E5"> that takes an IU file and</font>

389
00:21:04,530 --> 00:21:10,200
does all<font color="#E5E5E5"> the verifications like it will</font>

390
00:21:07,080 --> 00:21:13,919
check<font color="#CCCCCC"> the CRC will detect what devices</font>

391
00:21:10,200 --> 00:21:16,770
it will auto auto<font color="#E5E5E5"> auto use the right CRC</font>

392
00:21:13,920 --> 00:21:18,540
algorithm it will see the digest will

393
00:21:16,770 --> 00:21:22,440
check the digest it will see the<font color="#CCCCCC"> Earth's</font>

394
00:21:18,540 --> 00:21:23,970
a signature<font color="#E5E5E5"> will then do the RSA check</font>

395
00:21:22,440 --> 00:21:27,090
<font color="#E5E5E5">and</font><font color="#CCCCCC"> we'll see that if it's correctly</font>

396
00:21:23,970 --> 00:21:29,400
signed or not<font color="#E5E5E5"> so this tool helps</font><font color="#CCCCCC"> you to</font>

397
00:21:27,090 --> 00:21:32,850
see if your file is<font color="#E5E5E5"> actually valid and</font>

398
00:21:29,400 --> 00:21:36,990
should be accepted by the device<font color="#CCCCCC"> the</font>

399
00:21:32,850 --> 00:21:40,290
next thing is is an Ida<font color="#E5E5E5"> pison</font><font color="#CCCCCC"> filesystem</font>

400
00:21:36,990 --> 00:21:43,020
<font color="#CCCCCC">plugin a file format plugin</font><font color="#E5E5E5"> so if you</font>

401
00:21:40,290 --> 00:21:44,399
want<font color="#E5E5E5"> to do the research yourself you can</font>

402
00:21:43,020 --> 00:21:52,490
<font color="#CCCCCC">use this so that</font><font color="#E5E5E5"> you're either</font>

403
00:21:44,400 --> 00:21:55,710
understands<font color="#E5E5E5"> this whole file format</font><font color="#CCCCCC"> ok so</font>

404
00:21:52,490 --> 00:21:59,490
let's look<font color="#CCCCCC"> at the</font><font color="#E5E5E5"> actual firmware for</font>

405
00:21:55,710 --> 00:22:03,390
<font color="#CCCCCC">bit so the Apple pencil</font><font color="#E5E5E5"> at the moment</font>

406
00:21:59,490 --> 00:22:08,700
<font color="#E5E5E5">the current version is 2 for 8 in</font><font color="#CCCCCC"> the</font>

407
00:22:03,390 --> 00:22:11,850
<font color="#E5E5E5">GUI</font><font color="#CCCCCC"> is shown as 2.48</font><font color="#E5E5E5"> in the binary it's</font>

408
00:22:08,700 --> 00:22:15,550
just<font color="#E5E5E5"> hex for 2 for 8</font>

409
00:22:11,850 --> 00:22:17,290
<font color="#CCCCCC">this one is available</font><font color="#E5E5E5"> as</font><font color="#CCCCCC"> ot aid update</font>

410
00:22:15,550 --> 00:22:20,110
that means you can get access<font color="#E5E5E5"> to this</font>

411
00:22:17,290 --> 00:22:23,230
file<font color="#CCCCCC"> just</font><font color="#E5E5E5"> by downloading at the this</font>

412
00:22:20,110 --> 00:22:27,850
upload path that I showed<font color="#CCCCCC"> earlier</font>

413
00:22:23,230 --> 00:22:33,550
<font color="#E5E5E5">it's 183 kilobyte</font><font color="#CCCCCC"> in size and it's</font>

414
00:22:27,850 --> 00:22:35,740
loaded at this<font color="#E5E5E5"> load address and you can</font>

415
00:22:33,550 --> 00:22:39,790
see here that<font color="#CCCCCC"> this is likely</font><font color="#E5E5E5"> not the</font>

416
00:22:35,740 --> 00:22:41,950
<font color="#CCCCCC">beginning of the address space and this</font>

417
00:22:39,790 --> 00:22:44,580
likely<font color="#CCCCCC"> means that there's some</font><font color="#E5E5E5"> path that</font>

418
00:22:41,950 --> 00:22:48,600
cannot<font color="#E5E5E5"> be</font><font color="#CCCCCC"> upgraded that</font><font color="#E5E5E5"> it's inside this</font>

419
00:22:44,580 --> 00:22:52,449
device<font color="#CCCCCC"> that we don't know about yet</font>

420
00:22:48,600 --> 00:22:54,399
there are<font color="#CCCCCC"> 1,200 functions inside</font><font color="#E5E5E5"> this</font>

421
00:22:52,450 --> 00:22:57,670
when you open<font color="#CCCCCC"> it's in Ida and</font><font color="#E5E5E5"> maybe</font>

422
00:22:54,400 --> 00:23:05,440
beautify a little bit<font color="#E5E5E5"> and it has 210</font>

423
00:22:57,670 --> 00:23:08,680
strings<font color="#CCCCCC"> when you look at the smart</font>

424
00:23:05,440 --> 00:23:12,000
Keyboard firmware<font color="#E5E5E5"> then each different</font>

425
00:23:08,680 --> 00:23:18,880
form factor has a different current

426
00:23:12,000 --> 00:23:21,760
firmware and there's only one<font color="#E5E5E5"> OTA update</font>

427
00:23:18,880 --> 00:23:26,890
<font color="#E5E5E5">available at the moment for the 12.9 and</font>

428
00:23:21,760 --> 00:23:30,160
that is the firmware<font color="#CCCCCC"> 850 hex the thing</font>

429
00:23:26,890 --> 00:23:32,350
here<font color="#E5E5E5"> is that when</font><font color="#CCCCCC"> you</font><font color="#E5E5E5"> buy a new smart</font>

430
00:23:30,160 --> 00:23:33,990
<font color="#CCCCCC">keyboard you will actually get a</font>

431
00:23:32,350 --> 00:23:37,929
completely<font color="#E5E5E5"> different from whether this</font>

432
00:23:33,990 --> 00:23:40,750
<font color="#E5E5E5">855 so when you buy it's actually newer</font>

433
00:23:37,930 --> 00:23:45,400
than the newest update so<font color="#CCCCCC"> Apple does not</font>

434
00:23:40,750 --> 00:23:47,470
<font color="#CCCCCC">give you the</font><font color="#E5E5E5"> newest update as you can</font>

435
00:23:45,400 --> 00:23:52,480
see the size of<font color="#E5E5E5"> the film where it's like</font>

436
00:23:47,470 --> 00:23:56,980
45 kilobyte or<font color="#E5E5E5"> 46 which is like way</font>

437
00:23:52,480 --> 00:23:59,320
smaller than<font color="#CCCCCC"> the pencil</font><font color="#E5E5E5"> and therefore</font>

438
00:23:56,980 --> 00:24:03,640
it's easier<font color="#E5E5E5"> to actually understand but</font>

439
00:23:59,320 --> 00:24:05,110
<font color="#E5E5E5">still it has like 590 functions but in</font>

440
00:24:03,640 --> 00:24:08,950
the whole film where there are<font color="#E5E5E5"> only</font><font color="#CCCCCC"> 6</font>

441
00:24:05,110 --> 00:24:14,290
strings so it's a lot harder<font color="#E5E5E5"> to</font>

442
00:24:08,950 --> 00:24:18,300
understand with<font color="#CCCCCC"> nan no information so</font>

443
00:24:14,290 --> 00:24:20,830
the as I<font color="#E5E5E5"> said earlier both of these</font>

444
00:24:18,300 --> 00:24:23,230
firmwares<font color="#CCCCCC"> I'm not loaded at the</font>

445
00:24:20,830 --> 00:24:24,490
beginning of<font color="#E5E5E5"> the memory map so they are</font>

446
00:24:23,230 --> 00:24:27,759
slightly some

447
00:24:24,490 --> 00:24:30,009
in front<font color="#E5E5E5"> of it that</font><font color="#CCCCCC"> we cannot upgrade</font>

448
00:24:27,759 --> 00:24:32,409
that does<font color="#CCCCCC"> not come</font><font color="#E5E5E5"> from the firmware and</font>

449
00:24:30,009 --> 00:24:34,360
that we at the<font color="#CCCCCC"> moment have not extracted</font>

450
00:24:32,409 --> 00:24:42,190
yet<font color="#E5E5E5"> maybe it's not possible without a</font>

451
00:24:34,360 --> 00:24:46,889
hardware<font color="#CCCCCC"> attack so let's dig</font><font color="#E5E5E5"> a little</font>

452
00:24:42,190 --> 00:24:46,889
<font color="#E5E5E5">bit deeper into the Apple pencil</font><font color="#CCCCCC"> I</font>

453
00:24:46,919 --> 00:24:54,490
already said the Apple pencil has way

454
00:24:50,230 --> 00:24:56,799
more strings<font color="#E5E5E5"> and this why a large part</font>

455
00:24:54,490 --> 00:24:59,919
of it<font color="#E5E5E5"> is easier</font><font color="#CCCCCC"> to understand because</font>

456
00:24:56,799 --> 00:25:03,249
<font color="#E5E5E5">you have more strings that give you</font>

457
00:24:59,919 --> 00:25:05,919
hints<font color="#E5E5E5"> some of these strings are file</font>

458
00:25:03,249 --> 00:25:08,019
names<font color="#E5E5E5"> and from those we know that they</font>

459
00:25:05,919 --> 00:25:11,350
<font color="#E5E5E5">have something internally that is an RT</font>

460
00:25:08,019 --> 00:25:14,289
<font color="#CCCCCC">6 r th c</font><font color="#E5E5E5"> which is</font><font color="#CCCCCC"> a real-time operating</font>

461
00:25:11,350 --> 00:25:16,658
system<font color="#E5E5E5"> but it's actually not clear what</font>

462
00:25:14,289 --> 00:25:22,029
<font color="#CCCCCC">brand is it</font><font color="#E5E5E5"> is doesn't</font><font color="#CCCCCC"> seem</font><font color="#E5E5E5"> to be one of</font>

463
00:25:16,659 --> 00:25:24,730
the open source or the<font color="#E5E5E5"> exceeds</font><font color="#CCCCCC"> it has a</font>

464
00:25:22,029 --> 00:25:26,440
real heap implementation inside<font color="#E5E5E5"> so</font><font color="#CCCCCC"> that</font>

465
00:25:24,730 --> 00:25:30,190
the blocks are forward and backward<font color="#CCCCCC"> car</font>

466
00:25:26,440 --> 00:25:33,220
<font color="#CCCCCC">lists and so on and the nice thing it it</font>

467
00:25:30,190 --> 00:25:35,289
has actually named<font color="#E5E5E5"> task insights and</font>

468
00:25:33,220 --> 00:25:40,090
when you see the task names you

469
00:25:35,289 --> 00:25:43,299
understand it a lot better<font color="#E5E5E5"> so this here</font>

470
00:25:40,090 --> 00:25:46,389
is<font color="#E5E5E5"> from</font><font color="#CCCCCC"> the reversed firmware</font><font color="#E5E5E5"> the list</font>

471
00:25:43,299 --> 00:25:48,820
of tasks that<font color="#CCCCCC"> exist on the device and</font>

472
00:25:46,389 --> 00:25:51,850
<font color="#CCCCCC">you can</font><font color="#E5E5E5"> directly see</font><font color="#CCCCCC"> we have a power</font>

473
00:25:48,820 --> 00:25:53,350
manager<font color="#E5E5E5"> we have the radio interface</font><font color="#CCCCCC"> that</font>

474
00:25:51,850 --> 00:25:57,248
<font color="#CCCCCC">has something</font><font color="#E5E5E5"> to do with the Bluetooth</font>

475
00:25:53,350 --> 00:26:01,360
we have the ID<font color="#E5E5E5"> boss which</font><font color="#CCCCCC"> is apparently</font>

476
00:25:57,249 --> 00:26:03,490
the<font color="#E5E5E5"> hit</font><font color="#CCCCCC"> bus</font><font color="#E5E5E5"> that is</font><font color="#CCCCCC"> used</font><font color="#E5E5E5"> for like the</font>

477
00:26:01,360 --> 00:26:08,918
<font color="#CCCCCC">communication with</font><font color="#E5E5E5"> the device over the</font>

478
00:26:03,490 --> 00:26:11,519
<font color="#E5E5E5">USB</font><font color="#CCCCCC"> we have force which is likely the</font>

479
00:26:08,919 --> 00:26:12,700
pressure sensor<font color="#CCCCCC"> on the top of the of the</font>

480
00:26:11,519 --> 00:26:15,850
pencil

481
00:26:12,700 --> 00:26:18,369
we have<font color="#E5E5E5"> inertia which is the accelerator</font>

482
00:26:15,850 --> 00:26:21,969
so it's the the angle<font color="#CCCCCC"> and how we</font><font color="#E5E5E5"> use it</font>

483
00:26:18,369 --> 00:26:25,539
<font color="#E5E5E5">you have a battery</font><font color="#CCCCCC"> task you have</font><font color="#E5E5E5"> this ia</font>

484
00:26:21,970 --> 00:26:30,519
IB both<font color="#CCCCCC"> tasks</font><font color="#E5E5E5"> this one is apparently</font>

485
00:26:25,539 --> 00:26:33,879
<font color="#E5E5E5">used for passing this</font><font color="#CCCCCC"> close</font><font color="#E5E5E5"> source IP</font>

486
00:26:30,519 --> 00:26:35,710
<font color="#E5E5E5">protocol that Apple internally uses we</font>

487
00:26:33,879 --> 00:26:37,899
<font color="#E5E5E5">have a Bluetooth sync</font>

488
00:26:35,710 --> 00:26:40,990
<font color="#E5E5E5">tasks and we have something</font><font color="#CCCCCC"> that's</font>

489
00:26:37,900 --> 00:26:43,590
<font color="#CCCCCC">called</font><font color="#E5E5E5"> FWD third that apparently has</font>

490
00:26:40,990 --> 00:26:51,760
something to<font color="#E5E5E5"> do with firmware</font><font color="#CCCCCC"> upgrades</font>

491
00:26:43,590 --> 00:26:57,129
<font color="#CCCCCC">yeah so the</font><font color="#E5E5E5"> next thing</font><font color="#CCCCCC"> is</font><font color="#E5E5E5"> I already told</font>

492
00:26:51,760 --> 00:27:00,190
you that<font color="#E5E5E5"> when we look at these daemon</font>

493
00:26:57,130 --> 00:27:03,580
for<font color="#E5E5E5"> upgrading we can see that it talks</font>

494
00:27:00,190 --> 00:27:05,770
via<font color="#CCCCCC"> hit comments to the device</font><font color="#E5E5E5"> and when</font>

495
00:27:03,580 --> 00:27:08,980
you connect an<font color="#E5E5E5"> Apple pencil to an iPad</font>

496
00:27:05,770 --> 00:27:11,230
or<font color="#E5E5E5"> on any other iOS device because that</font>

497
00:27:08,980 --> 00:27:13,560
works<font color="#E5E5E5"> on any iOS</font><font color="#CCCCCC"> device when you when</font>

498
00:27:11,230 --> 00:27:17,650
you plug it in<font color="#E5E5E5"> via</font><font color="#CCCCCC"> the lightning port</font>

499
00:27:13,560 --> 00:27:20,200
<font color="#CCCCCC">and check the i/o</font><font color="#E5E5E5"> kid registry for what</font>

500
00:27:17,650 --> 00:27:22,000
new drivers were loaded and<font color="#E5E5E5"> so on you</font>

501
00:27:20,200 --> 00:27:25,320
will see that there's this<font color="#E5E5E5"> Apple pencil</font>

502
00:27:22,000 --> 00:27:29,200
now loaded and it offers four different

503
00:27:25,320 --> 00:27:31,689
<font color="#CCCCCC">hit</font><font color="#E5E5E5"> devices so these four hit devices</font>

504
00:27:29,200 --> 00:27:34,780
have all different<font color="#E5E5E5"> so-called primary</font>

505
00:27:31,690 --> 00:27:36,970
<font color="#E5E5E5">usage so when you talk to a hit device</font>

506
00:27:34,780 --> 00:27:39,070
you define what kind<font color="#E5E5E5"> of usage you</font><font color="#CCCCCC"> have</font>

507
00:27:36,970 --> 00:27:44,140
and then<font color="#CCCCCC"> you get different</font><font color="#E5E5E5"> hit devices</font>

508
00:27:39,070 --> 00:27:46,000
back<font color="#E5E5E5"> so the great thing</font><font color="#CCCCCC"> is when you dive</font>

509
00:27:44,140 --> 00:27:49,030
down into the properties<font color="#CCCCCC"> of these</font>

510
00:27:46,000 --> 00:27:51,850
drivers you will<font color="#CCCCCC"> also see a bunch of</font>

511
00:27:49,030 --> 00:27:54,399
report descriptors these report

512
00:27:51,850 --> 00:27:57,580
descriptors are super long binary

513
00:27:54,400 --> 00:27:59,260
numbers or hex numbers and you have<font color="#E5E5E5"> no</font>

514
00:27:57,580 --> 00:28:01,899
<font color="#CCCCCC">idea what they mean because they are</font>

515
00:27:59,260 --> 00:28:09,970
<font color="#E5E5E5">identifiers we don't really care about</font>

516
00:28:01,900 --> 00:28:13,600
<font color="#E5E5E5">them except for for the fact that we can</font>

517
00:28:09,970 --> 00:28:19,690
see<font color="#E5E5E5"> marked in red the primary use for</font>

518
00:28:13,600 --> 00:28:22,719
<font color="#E5E5E5">this specific device so we have 11 14 17</font>

519
00:28:19,690 --> 00:28:25,510
and 18 so these are<font color="#CCCCCC"> four different users</font>

520
00:28:22,720 --> 00:28:29,160
<font color="#E5E5E5">that you can have when you talk to the</font>

521
00:28:25,510 --> 00:28:31,750
pencil<font color="#CCCCCC"> the nice thing is</font><font color="#E5E5E5"> these</font>

522
00:28:29,160 --> 00:28:34,240
<font color="#E5E5E5">crazy-looking report descriptors you can</font>

523
00:28:31,750 --> 00:28:38,440
just binary<font color="#E5E5E5"> search them in the firmware</font>

524
00:28:34,240 --> 00:28:40,830
<font color="#E5E5E5">and you will find this table here</font><font color="#CCCCCC"> and in</font>

525
00:28:38,440 --> 00:28:43,810
this table<font color="#E5E5E5"> you</font><font color="#CCCCCC"> can see</font><font color="#E5E5E5"> that there are</font>

526
00:28:40,830 --> 00:28:46,679
referenced by another table and from

527
00:28:43,810 --> 00:28:50,750
<font color="#E5E5E5">that we</font><font color="#CCCCCC"> know the internal</font><font color="#E5E5E5"> number</font>

528
00:28:46,680 --> 00:28:53,970
that is used for<font color="#CCCCCC"> the specific device</font><font color="#E5E5E5"> so</font>

529
00:28:50,750 --> 00:28:56,880
<font color="#E5E5E5">here's I have decoded this a little bit</font>

530
00:28:53,970 --> 00:29:00,150
we can basically<font color="#E5E5E5"> by cross-checking these</font>

531
00:28:56,880 --> 00:29:04,110
two tables<font color="#E5E5E5"> we</font><font color="#CCCCCC"> can see that primary usage</font>

532
00:29:00,150 --> 00:29:06,270
11 is internally called 240 and its

533
00:29:04,110 --> 00:29:11,820
associated<font color="#E5E5E5"> with the main part of the hit</font>

534
00:29:06,270 --> 00:29:13,860
device<font color="#CCCCCC"> 14 is</font><font color="#E5E5E5"> 243 which has to do with</font>

535
00:29:11,820 --> 00:29:18,300
<font color="#CCCCCC">energy</font><font color="#E5E5E5"> air so that was the accelerator</font>

536
00:29:13,860 --> 00:29:22,620
sensor<font color="#CCCCCC"> and then 2 4 8</font><font color="#E5E5E5"> as</font><font color="#CCCCCC"> forth</font><font color="#E5E5E5"> and 2 4 5</font>

537
00:29:18,300 --> 00:29:27,240
is radio<font color="#E5E5E5"> so each of these now offer heat</font>

538
00:29:22,620 --> 00:29:30,510
features to the<font color="#E5E5E5"> D to the iPad this means</font>

539
00:29:27,240 --> 00:29:34,170
<font color="#E5E5E5">on the on the iPad</font><font color="#CCCCCC"> you can run</font><font color="#E5E5E5"> code that</font>

540
00:29:30,510 --> 00:29:36,060
talks to<font color="#E5E5E5"> each of these separately</font><font color="#CCCCCC"> the</font>

541
00:29:34,170 --> 00:29:40,230
nice<font color="#CCCCCC"> thing is once</font><font color="#E5E5E5"> you have</font><font color="#CCCCCC"> figured out</font>

542
00:29:36,060 --> 00:29:42,830
these<font color="#E5E5E5"> numbers you can find the place and</font>

543
00:29:40,230 --> 00:29:45,690
the code where they are actually<font color="#CCCCCC"> set</font>

544
00:29:42,830 --> 00:29:48,840
<font color="#E5E5E5">callbacks to handle these feature</font>

545
00:29:45,690 --> 00:29:53,010
reports<font color="#E5E5E5"> and here's one example where you</font>

546
00:29:48,840 --> 00:29:56,010
<font color="#CCCCCC">can see in the inertial main code they</font>

547
00:29:53,010 --> 00:29:58,500
are setting a callback for<font color="#CCCCCC"> 4 2 4 3 which</font>

548
00:29:56,010 --> 00:30:00,930
was the<font color="#CCCCCC"> inertial device and you can see</font>

549
00:29:58,500 --> 00:30:03,990
gives<font color="#E5E5E5"> a get function and a set function</font>

550
00:30:00,930 --> 00:30:07,470
so the idea here<font color="#CCCCCC"> is when you send</font><font color="#E5E5E5"> with</font>

551
00:30:03,990 --> 00:30:09,540
an<font color="#E5E5E5"> USB device comment which</font><font color="#CCCCCC"> is a</font><font color="#E5E5E5"> get</font>

552
00:30:07,470 --> 00:30:11,760
feature report<font color="#CCCCCC"> it will go through</font><font color="#E5E5E5"> the</font>

553
00:30:09,540 --> 00:30:13,620
<font color="#E5E5E5">first</font><font color="#CCCCCC"> pattern</font><font color="#E5E5E5"> and when it's a set</font>

554
00:30:11,760 --> 00:30:16,350
feature report it goes to the second

555
00:30:13,620 --> 00:30:25,090
part this<font color="#E5E5E5"> is really great because</font><font color="#CCCCCC"> you</font>

556
00:30:16,350 --> 00:30:28,090
can now do<font color="#E5E5E5"> this for I don't</font><font color="#CCCCCC"> know</font><font color="#E5E5E5"> how</font>

557
00:30:25,090 --> 00:30:34,149
this<font color="#CCCCCC"> happened</font><font color="#E5E5E5"> you can do this for all</font><font color="#CCCCCC"> of</font>

558
00:30:28,090 --> 00:30:36,399
them<font color="#E5E5E5"> and yeah and then you get all the</font>

559
00:30:34,150 --> 00:30:43,120
passers that are involved in<font color="#CCCCCC"> heat</font>

560
00:30:36,400 --> 00:30:49,990
<font color="#CCCCCC">passing</font><font color="#E5E5E5"> okay</font><font color="#CCCCCC"> so let's see how this</font>

561
00:30:43,120 --> 00:30:54,159
really<font color="#E5E5E5"> works so how does the firmware</font>

562
00:30:49,990 --> 00:30:58,270
upgrade protocol work so this<font color="#E5E5E5"> is a lot</font>

563
00:30:54,160 --> 00:31:02,740
<font color="#CCCCCC">of code but it basically just shows you</font>

564
00:30:58,270 --> 00:31:06,550
how<font color="#CCCCCC"> you can</font><font color="#E5E5E5"> connect to a driver to a hit</font>

565
00:31:02,740 --> 00:31:09,460
device driver<font color="#E5E5E5"> on an iOS</font><font color="#CCCCCC"> device</font><font color="#E5E5E5"> that has</font>

566
00:31:06,550 --> 00:31:12,669
a specific primary<font color="#E5E5E5"> usage in this case 11</font>

567
00:31:09,460 --> 00:31:18,910
and the<font color="#E5E5E5"> product ID which is 2 6 8 in</font>

568
00:31:12,670 --> 00:31:22,030
this case which<font color="#E5E5E5"> is the keyboard the 12.9</font>

569
00:31:18,910 --> 00:31:24,370
keyboard<font color="#E5E5E5"> the nice thing is and this is</font>

570
00:31:22,030 --> 00:31:28,540
<font color="#CCCCCC">something that maybe Apple</font><font color="#E5E5E5"> does</font><font color="#CCCCCC"> not even</font>

571
00:31:24,370 --> 00:31:32,379
realize<font color="#CCCCCC"> this works even</font><font color="#E5E5E5"> inside a</font>

572
00:31:28,540 --> 00:31:39,399
<font color="#E5E5E5">sandboxed iOS process so any app on your</font>

573
00:31:32,380 --> 00:31:41,650
device<font color="#E5E5E5"> can talk to your accessories</font><font color="#CCCCCC"> then</font>

574
00:31:39,400 --> 00:31:46,090
the next step of this upgrade protocol

575
00:31:41,650 --> 00:31:49,710
is<font color="#E5E5E5"> that it sends get feature report b8</font>

576
00:31:46,090 --> 00:31:54,040
to the device and gets a return buffer

577
00:31:49,710 --> 00:31:55,750
<font color="#E5E5E5">the return buffer</font><font color="#CCCCCC"> has different content</font>

578
00:31:54,040 --> 00:31:59,740
depending on<font color="#E5E5E5"> the protocol that is used</font>

579
00:31:55,750 --> 00:32:03,520
and the<font color="#CCCCCC"> WBS is basically the</font><font color="#E5E5E5"> right</font>

580
00:31:59,740 --> 00:32:08,590
buffer<font color="#E5E5E5"> size so it knows how</font><font color="#CCCCCC"> big the</font>

581
00:32:03,520 --> 00:32:13,330
device can<font color="#CCCCCC"> be written to and</font><font color="#E5E5E5"> for example</font>

582
00:32:08,590 --> 00:32:17,080
the keyboard uses protocol 1<font color="#E5E5E5"> and the</font>

583
00:32:13,330 --> 00:32:20,290
pencil uses protocol 3 and the

584
00:32:17,080 --> 00:32:23,530
difference is<font color="#CCCCCC"> that with protocol 3 you</font>

585
00:32:20,290 --> 00:32:28,200
have more configuration<font color="#E5E5E5"> like if you want</font>

586
00:32:23,530 --> 00:32:28,200
an extended<font color="#CCCCCC"> setup or if you want</font><font color="#E5E5E5"> to have</font>

587
00:32:28,780 --> 00:32:33,970
if you want to send offsets or not you

588
00:32:30,880 --> 00:32:39,610
can see this<font color="#CCCCCC"> whatever the device needs</font>

589
00:32:33,970 --> 00:32:41,860
from<font color="#E5E5E5"> the flags okay so as I said the SS</font>

590
00:32:39,610 --> 00:32:45,659
feature with<font color="#E5E5E5"> protocol</font><font color="#CCCCCC"> three that</font><font color="#E5E5E5"> you can</font>

591
00:32:41,860 --> 00:32:49,300
have extended<font color="#CCCCCC"> setup if this is</font><font color="#E5E5E5"> required</font>

592
00:32:45,660 --> 00:32:53,230
<font color="#CCCCCC">the next step is sending a set feature</font>

593
00:32:49,300 --> 00:32:56,350
report<font color="#CCCCCC"> b0 with</font><font color="#E5E5E5"> the certain magic</font><font color="#CCCCCC"> c3</font><font color="#E5E5E5"> BC</font>

594
00:32:53,230 --> 00:33:04,600
codes to the<font color="#E5E5E5"> device and this initialized</font>

595
00:32:56,350 --> 00:33:07,600
<font color="#E5E5E5">firmware uploading the next step is to</font>

596
00:33:04,600 --> 00:33:11,800
tell it now we want to upload<font color="#E5E5E5"> a single</font>

597
00:33:07,600 --> 00:33:15,459
firmware so we have to send<font color="#E5E5E5"> b0 with the</font>

598
00:33:11,800 --> 00:33:21,940
magic code<font color="#E5E5E5"> six</font><font color="#CCCCCC"> -</font><font color="#E5E5E5"> seven</font><font color="#CCCCCC"> -</font><font color="#E5E5E5"> and then the</font>

599
00:33:15,460 --> 00:33:24,400
device waits for firmware upload the

600
00:33:21,940 --> 00:33:28,960
<font color="#E5E5E5">next thing is then we have to upload</font><font color="#CCCCCC"> the</font>

601
00:33:24,400 --> 00:33:34,240
<font color="#CCCCCC">firmware</font><font color="#E5E5E5"> piece by piece by sending hit</font>

602
00:33:28,960 --> 00:33:39,400
requests with b1<font color="#E5E5E5"> so here it</font><font color="#CCCCCC"> depends on</font>

603
00:33:34,240 --> 00:33:42,190
the protocol how this works<font color="#E5E5E5"> because some</font>

604
00:33:39,400 --> 00:33:44,830
devices<font color="#E5E5E5"> like the keyboard require you to</font>

605
00:33:42,190 --> 00:33:47,440
give the data<font color="#E5E5E5"> offset in the beginning so</font>

606
00:33:44,830 --> 00:33:50,260
the first<font color="#CCCCCC"> three bytes</font><font color="#E5E5E5"> are used as a data</font>

607
00:33:47,440 --> 00:33:53,620
offset where this is actually<font color="#CCCCCC"> written</font>

608
00:33:50,260 --> 00:33:56,080
into<font color="#E5E5E5"> the firmware buffer and this data</font>

609
00:33:53,620 --> 00:34:01,090
offset is<font color="#E5E5E5"> big-endian but only three</font>

610
00:33:56,080 --> 00:34:05,110
bytes<font color="#CCCCCC"> yeah and after</font><font color="#E5E5E5"> these three bytes</font>

611
00:34:01,090 --> 00:34:07,090
you<font color="#E5E5E5"> will see the data and of</font><font color="#CCCCCC"> course it's</font>

612
00:34:05,110 --> 00:34:11,109
a lot<font color="#CCCCCC"> of these requests</font><font color="#E5E5E5"> need to be done</font>

613
00:34:07,090 --> 00:34:13,840
<font color="#CCCCCC">to</font><font color="#E5E5E5"> was to send actually</font><font color="#CCCCCC"> 183</font><font color="#E5E5E5"> thousand</font>

614
00:34:11,110 --> 00:34:16,090
bytes because because the right buffers

615
00:34:13,840 --> 00:34:19,200
are like<font color="#E5E5E5"> 55 bytes so you have a lot of</font>

616
00:34:16,090 --> 00:34:19,200
these requests

617
00:34:20,190 --> 00:34:28,360
so once you've uploaded<font color="#E5E5E5"> everything you</font>

618
00:34:25,690 --> 00:34:32,860
need to commit<font color="#CCCCCC"> to this firmware</font><font color="#E5E5E5"> by</font>

619
00:34:28,360 --> 00:34:35,050
sending a B to report with<font color="#CCCCCC"> a code 0 this</font>

620
00:34:32,860 --> 00:34:40,240
will<font color="#E5E5E5"> then tell the device you have now a</font>

621
00:34:35,050 --> 00:34:42,159
<font color="#E5E5E5">whole firmware please check it</font>

622
00:34:40,239 --> 00:34:44,319
then the device will<font color="#CCCCCC"> do all kinds of</font>

623
00:34:42,159 --> 00:34:50,169
checks like the<font color="#CCCCCC"> RS a check and</font>

624
00:34:44,320 --> 00:34:53,110
<font color="#E5E5E5">everything</font><font color="#CCCCCC"> and when you now ask</font><font color="#E5E5E5"> with a</font>

625
00:34:50,168 --> 00:34:55,149
get report of the status by asking get

626
00:34:53,110 --> 00:34:58,630
feature<font color="#E5E5E5"> report</font><font color="#CCCCCC"> b2 for the status</font><font color="#E5E5E5"> you</font>

627
00:34:55,149 --> 00:35:00,910
<font color="#CCCCCC">should get an A</font><font color="#E5E5E5"> one hex back everything</font>

628
00:34:58,630 --> 00:35:02,920
else means there was<font color="#E5E5E5"> a problem</font><font color="#CCCCCC"> with the</font>

629
00:35:00,910 --> 00:35:05,259
firmware<font color="#E5E5E5"> and when you look into the</font>

630
00:35:02,920 --> 00:35:08,320
white paper you<font color="#E5E5E5"> will see a large</font><font color="#CCCCCC"> list of</font>

631
00:35:05,260 --> 00:35:10,690
<font color="#E5E5E5">all the different error codes</font><font color="#CCCCCC"> like</font><font color="#E5E5E5"> for</font>

632
00:35:08,320 --> 00:35:13,270
<font color="#E5E5E5">example the RS e signature is missing</font>

633
00:35:10,690 --> 00:35:13,810
the the<font color="#E5E5E5"> signature is wrong the digest is</font>

634
00:35:13,270 --> 00:35:16,300
wrong

635
00:35:13,810 --> 00:35:18,759
the CRC mismatches and<font color="#E5E5E5"> all these kind of</font>

636
00:35:16,300 --> 00:35:21,040
things<font color="#CCCCCC"> or for</font><font color="#E5E5E5"> example the firmware</font>

637
00:35:18,760 --> 00:35:26,619
<font color="#CCCCCC">version is wrong</font><font color="#E5E5E5"> you're trying to</font>

638
00:35:21,040 --> 00:35:30,460
downgrade<font color="#CCCCCC"> so the thing is now on the</font>

639
00:35:26,619 --> 00:35:33,700
pencil<font color="#CCCCCC"> you now have to fully commit all</font>

640
00:35:30,460 --> 00:35:37,660
uploaded firmwares<font color="#E5E5E5"> by sending a B to</font>

641
00:35:33,700 --> 00:35:39,700
with the C 3<font color="#CCCCCC"> B</font><font color="#E5E5E5"> C code and then for the</font>

642
00:35:37,660 --> 00:35:42,759
pencil<font color="#CCCCCC"> you have finished firmware</font>

643
00:35:39,700 --> 00:35:48,819
blowing for the<font color="#E5E5E5"> keyboard you don't need</font>

644
00:35:42,760 --> 00:35:52,000
this yeah the last step is then that you

645
00:35:48,820 --> 00:35:54,190
send a reset<font color="#E5E5E5"> to the device and then</font>

646
00:35:52,000 --> 00:35:58,720
basically the<font color="#E5E5E5"> device will reboot by</font>

647
00:35:54,190 --> 00:36:10,720
<font color="#E5E5E5">sending a</font><font color="#CCCCCC"> piece read</font><font color="#E5E5E5"> hit comment</font><font color="#CCCCCC"> I will</font>

648
00:35:58,720 --> 00:36:13,350
<font color="#CCCCCC">now demonstrate is that</font><font color="#E5E5E5"> Apple</font><font color="#CCCCCC"> for God to</font>

649
00:36:10,720 --> 00:36:16,480
<font color="#CCCCCC">Heaven downgrade check inside the pencil</font>

650
00:36:13,350 --> 00:36:18,279
normally<font color="#CCCCCC"> apples is like a sticky</font>

651
00:36:16,480 --> 00:36:20,410
requirement for all<font color="#E5E5E5"> the accessories</font>

652
00:36:18,280 --> 00:36:23,650
<font color="#E5E5E5">everybody who creates an accessory for</font>

653
00:36:20,410 --> 00:36:27,118
for iOS devices<font color="#E5E5E5"> they are never allowed</font>

654
00:36:23,650 --> 00:36:29,500
to<font color="#E5E5E5"> ever ever ever allow downgrades</font>

655
00:36:27,119 --> 00:36:31,300
<font color="#E5E5E5">because then you can upload an old</font>

656
00:36:29,500 --> 00:36:34,390
firmware<font color="#CCCCCC"> and exploit a vulnerability</font><font color="#E5E5E5"> in</font>

657
00:36:31,300 --> 00:36:36,520
old firmware so<font color="#CCCCCC"> Apple absolutely forbids</font>

658
00:36:34,390 --> 00:36:40,450
this but in their own<font color="#E5E5E5"> product</font><font color="#CCCCCC"> here</font><font color="#E5E5E5"> they</font>

659
00:36:36,520 --> 00:36:45,880
forgot it<font color="#E5E5E5"> so now let</font><font color="#CCCCCC"> me see</font><font color="#E5E5E5"> if this</font>

660
00:36:40,450 --> 00:36:48,779
words<font color="#E5E5E5"> I'm taking the iPad here</font><font color="#CCCCCC"> I start</font>

661
00:36:45,880 --> 00:36:48,780
screen mirroring

662
00:36:48,980 --> 00:37:01,360
and now let<font color="#E5E5E5"> me see if I can move this</font>

663
00:36:51,830 --> 00:37:01,360
over<font color="#CCCCCC"> so this is now</font><font color="#E5E5E5"> my iPad oops</font>

664
00:37:05,710 --> 00:37:14,810
let's go into the settings this<font color="#E5E5E5"> here</font>

665
00:37:12,020 --> 00:37:16,850
runs by<font color="#E5E5E5"> the water by the way 11.3 so</font>

666
00:37:14,810 --> 00:37:18,610
it's not the very very<font color="#E5E5E5"> latest one but</font>

667
00:37:16,850 --> 00:37:21,529
the same thing<font color="#E5E5E5"> works on the latest one</font>

668
00:37:18,610 --> 00:37:24,560
so I<font color="#E5E5E5"> don't want to pair the Bluetooth</font>

669
00:37:21,530 --> 00:37:27,740
stick<font color="#CCCCCC"> I don't need it in a moment</font><font color="#E5E5E5"> so I</font>

670
00:37:24,560 --> 00:37:31,070
go<font color="#E5E5E5"> to the about and I can see there's</font>

671
00:37:27,740 --> 00:37:33,259
the Apple<font color="#CCCCCC"> pencil</font><font color="#E5E5E5"> so for some</font><font color="#CCCCCC"> reason</font><font color="#E5E5E5"> this</font>

672
00:37:31,070 --> 00:37:36,140
whole<font color="#E5E5E5"> thing is not really fully stable I</font>

673
00:37:33,260 --> 00:37:38,570
mean I mean iOS itself<font color="#CCCCCC"> so sometimes you</font>

674
00:37:36,140 --> 00:37:40,640
see<font color="#CCCCCC"> multiple pencils like Zia</font><font color="#E5E5E5"> but it's</font>

675
00:37:38,570 --> 00:37:42,620
<font color="#CCCCCC">actually the</font><font color="#E5E5E5"> same pencil</font><font color="#CCCCCC"> and when you</font>

676
00:37:40,640 --> 00:37:47,569
look into it<font color="#E5E5E5"> you</font><font color="#CCCCCC"> can see it's the</font>

677
00:37:42,620 --> 00:37:53,960
firmware 2.48 so that's the<font color="#E5E5E5"> current</font>

678
00:37:47,570 --> 00:37:58,820
<font color="#E5E5E5">firmware so now let's kill this and we</font>

679
00:37:53,960 --> 00:38:01,130
just<font color="#CCCCCC"> run</font><font color="#E5E5E5"> this</font><font color="#CCCCCC"> AFU</font><font color="#E5E5E5"> down great so this</font>

680
00:37:58,820 --> 00:38:04,880
<font color="#E5E5E5">does nothing</font><font color="#CCCCCC"> it's just</font><font color="#E5E5E5"> a</font><font color="#CCCCCC"> white</font><font color="#E5E5E5"> screen</font>

681
00:38:01,130 --> 00:38:09,170
once it pops<font color="#E5E5E5"> up so and this now takes</font>

682
00:38:04,880 --> 00:38:11,720
about one minute<font color="#CCCCCC"> and then it</font><font color="#E5E5E5"> will</font>

683
00:38:09,170 --> 00:38:14,360
terminate the app and if everything

684
00:38:11,720 --> 00:38:17,390
worked<font color="#E5E5E5"> we should then</font><font color="#CCCCCC"> have a downgraded</font>

685
00:38:14,360 --> 00:38:20,240
pencil again this is something<font color="#CCCCCC"> that</font>

686
00:38:17,390 --> 00:38:22,220
<font color="#E5E5E5">should never be possible because then</font>

687
00:38:20,240 --> 00:38:25,040
you can<font color="#CCCCCC"> upload an older firmware</font><font color="#E5E5E5"> with a</font>

688
00:38:22,220 --> 00:38:30,890
known vulnerability<font color="#E5E5E5"> exploited and take</font>

689
00:38:25,040 --> 00:38:34,730
over the pencil<font color="#E5E5E5"> yeah as I said it takes</font>

690
00:38:30,890 --> 00:38:36,680
one minute<font color="#E5E5E5"> and unfortunately my iOS</font>

691
00:38:34,730 --> 00:38:41,060
skills are not so good that I can<font color="#E5E5E5"> show</font>

692
00:38:36,680 --> 00:38:43,940
you a progress<font color="#E5E5E5"> bar</font><font color="#CCCCCC"> so that's why it's a</font>

693
00:38:41,060 --> 00:38:45,529
little<font color="#E5E5E5"> bit boring</font><font color="#CCCCCC"> so this does not work</font>

694
00:38:43,940 --> 00:38:47,390
against the<font color="#CCCCCC"> keyboard because</font><font color="#E5E5E5"> the</font>

695
00:38:45,530 --> 00:38:50,030
<font color="#CCCCCC">keyboard</font><font color="#E5E5E5"> actually is a well behaving</font>

696
00:38:47,390 --> 00:39:00,609
accessory<font color="#E5E5E5"> and will never ever ever allow</font>

697
00:38:50,030 --> 00:39:05,779
to upgrade to a lower firmware yes

698
00:39:00,609 --> 00:39:09,710
the<font color="#E5E5E5"> minutes</font><font color="#CCCCCC"> should be over soon yeah</font><font color="#E5E5E5"> so</font>

699
00:39:05,779 --> 00:39:11,869
it died<font color="#E5E5E5"> so now the best thing</font><font color="#CCCCCC"> of course</font>

700
00:39:09,710 --> 00:39:16,099
<font color="#E5E5E5">of action for me is to like pull this</font>

701
00:39:11,869 --> 00:39:17,839
out<font color="#E5E5E5"> so</font><font color="#CCCCCC"> let's reset it so I keep it</font><font color="#E5E5E5"> here</font>

702
00:39:16,099 --> 00:39:21,609
so I'm<font color="#E5E5E5"> not doing a magic</font><font color="#CCCCCC"> trick and like</font>

703
00:39:17,839 --> 00:39:26,049
replacing it<font color="#E5E5E5"> and now pull it back in</font>

704
00:39:21,609 --> 00:39:28,609
push it back in and<font color="#E5E5E5"> I start the settings</font>

705
00:39:26,049 --> 00:39:32,239
it asked me<font color="#CCCCCC"> again if I want to pair but</font>

706
00:39:28,609 --> 00:39:34,279
no I<font color="#E5E5E5"> don't want to I go to about I avoid</font>

707
00:39:32,239 --> 00:39:39,950
with a<font color="#CCCCCC"> pencil and now we can say we have</font>

708
00:39:34,279 --> 00:39:43,489
<font color="#CCCCCC">two dot 4.0 so before it was</font><font color="#E5E5E5"> 2.4 at</font>

709
00:39:39,950 --> 00:39:47,089
<font color="#CCCCCC">eight now</font><font color="#E5E5E5"> it stood at 4.0 which is a</font>

710
00:39:43,489 --> 00:39:52,819
firmware<font color="#CCCCCC"> that was like a year older so I</font>

711
00:39:47,089 --> 00:39:56,109
just pulled it out<font color="#E5E5E5"> again because as I</font>

712
00:39:52,819 --> 00:39:58,999
said there will be silent<font color="#E5E5E5"> upgrades and</font>

713
00:39:56,109 --> 00:40:02,450
if you<font color="#E5E5E5"> just leave a</font><font color="#CCCCCC"> plugged</font><font color="#E5E5E5"> in and</font>

714
00:39:58,999 --> 00:40:04,988
you're connected to<font color="#E5E5E5"> Wi-Fi it will silent</font>

715
00:40:02,450 --> 00:40:08,689
<font color="#E5E5E5">the upgrade to</font><font color="#CCCCCC"> the</font><font color="#E5E5E5"> newest firmware again</font>

716
00:40:04,989 --> 00:40:12,739
<font color="#CCCCCC">I don't know why it's required to</font><font color="#E5E5E5"> have a</font>

717
00:40:08,690 --> 00:40:14,420
Wi-Fi connection<font color="#E5E5E5"> because you don't know</font>

718
00:40:12,739 --> 00:40:17,779
the internet you just<font color="#CCCCCC"> need activated</font>

719
00:40:14,420 --> 00:40:19,729
Wi-Fi so even if you have no internet

720
00:40:17,779 --> 00:40:22,789
<font color="#E5E5E5">connection only wife</font><font color="#CCCCCC"> activate it will</font>

721
00:40:19,729 --> 00:40:25,999
upgrade<font color="#CCCCCC"> if you disable Wi-Fi</font><font color="#E5E5E5"> it will not</font>

722
00:40:22,789 --> 00:40:29,269
upgrade to stay if you're an<font color="#E5E5E5"> attacker</font>

723
00:40:25,999 --> 00:40:32,118
<font color="#CCCCCC">you would now have to</font><font color="#E5E5E5"> downgrade it maybe</font>

724
00:40:29,269 --> 00:40:35,479
<font color="#E5E5E5">no an x1 ability exploited and then you</font>

725
00:40:32,119 --> 00:40:37,369
can give<font color="#E5E5E5"> it</font><font color="#CCCCCC"> back the nice thing is when</font>

726
00:40:35,479 --> 00:40:39,649
you do these<font color="#CCCCCC"> attacks you actually don't</font>

727
00:40:37,369 --> 00:40:41,569
<font color="#E5E5E5">need to run around with the keyboard all</font>

728
00:40:39,650 --> 00:40:46,880
the time with an iPad all the time

729
00:40:41,569 --> 00:40:49,130
because<font color="#E5E5E5"> you can just stick an iPad an</font>

730
00:40:46,880 --> 00:40:53,450
Apple pencil<font color="#CCCCCC"> you can</font><font color="#E5E5E5"> just stick it</font><font color="#CCCCCC"> into</font>

731
00:40:49,130 --> 00:40:56,809
an iPod<font color="#E5E5E5"> you</font><font color="#CCCCCC"> cannot draw on it but you</font>

732
00:40:53,450 --> 00:41:01,669
can<font color="#CCCCCC"> still do all this</font><font color="#E5E5E5"> communication</font><font color="#CCCCCC"> via</font>

733
00:40:56,809 --> 00:41:04,940
lightning with the pencil and enjoy

734
00:41:01,670 --> 00:41:07,219
whatever exploit you might have<font color="#E5E5E5"> the</font>

735
00:41:04,940 --> 00:41:09,319
other great thing is the iPod actually

736
00:41:07,219 --> 00:41:12,480
cannot upgrade your stick<font color="#E5E5E5"> because it</font>

737
00:41:09,319 --> 00:41:19,250
doesn't have<font color="#E5E5E5"> the right plugin for it</font>

738
00:41:12,480 --> 00:41:22,290
so yeah let's go back to the slides

739
00:41:19,250 --> 00:41:24,390
so we've now seen we<font color="#CCCCCC"> can download the</font>

740
00:41:22,290 --> 00:41:28,859
firmware<font color="#E5E5E5"> on the pencil and maybe exploit</font>

741
00:41:24,390 --> 00:41:31,799
it now let's switch<font color="#CCCCCC"> over to</font><font color="#E5E5E5"> the</font><font color="#CCCCCC"> smart</font>

742
00:41:28,859 --> 00:41:33,740
Keyboard<font color="#CCCCCC"> and there's something</font>

743
00:41:31,800 --> 00:41:39,810
interesting<font color="#CCCCCC"> about</font><font color="#E5E5E5"> the smart Keyboard</font>

744
00:41:33,740 --> 00:41:41,910
<font color="#E5E5E5">because it uses</font><font color="#CCCCCC"> SPI storage what I mean</font>

745
00:41:39,810 --> 00:41:46,529
<font color="#E5E5E5">by this is when you upload the firmware</font>

746
00:41:41,910 --> 00:41:48,569
with<font color="#E5E5E5"> this be one set feature reports and</font>

747
00:41:46,530 --> 00:41:50,970
give it the offset where it should write

748
00:41:48,570 --> 00:41:53,700
it it actually<font color="#E5E5E5"> not writing it into a</font>

749
00:41:50,970 --> 00:41:54,868
<font color="#CCCCCC">host memory it's actually writing</font><font color="#E5E5E5"> this</font>

750
00:41:53,700 --> 00:41:58,290
over<font color="#E5E5E5"> SPI</font>

751
00:41:54,869 --> 00:42:03,420
to a specific memory offset of this SPI

752
00:41:58,290 --> 00:42:09,480
memory<font color="#CCCCCC"> it forces that all rights are</font>

753
00:42:03,420 --> 00:42:11,420
going to this to 0 0 0 0<font color="#CCCCCC"> and 3 BBB 0 0 0</font>

754
00:42:09,480 --> 00:42:15,200
everything<font color="#CCCCCC"> inside can be written</font>

755
00:42:11,420 --> 00:42:18,630
<font color="#E5E5E5">everything outside cannot be written</font>

756
00:42:15,200 --> 00:42:20,759
when<font color="#E5E5E5"> you upload a firmware</font><font color="#CCCCCC"> it is not</font>

757
00:42:18,630 --> 00:42:23,520
necessarily like the main system

758
00:42:20,760 --> 00:42:26,880
<font color="#CCCCCC">firmware it can also be other smaller</font>

759
00:42:23,520 --> 00:42:31,050
types of firmware<font color="#CCCCCC"> like for example D 0</font>

760
00:42:26,880 --> 00:42:34,380
or C 0<font color="#E5E5E5"> there's no official name for for</font>

761
00:42:31,050 --> 00:42:37,109
them<font color="#CCCCCC"> the first</font><font color="#E5E5E5"> one that D</font><font color="#CCCCCC"> 0 is</font><font color="#E5E5E5"> some</font>

762
00:42:34,380 --> 00:42:41,310
configuration block that<font color="#E5E5E5"> gives your</font>

763
00:42:37,109 --> 00:42:44,730
device the serial number and<font color="#CCCCCC"> this rebe</font>

764
00:42:41,310 --> 00:42:46,259
is<font color="#E5E5E5"> something else</font><font color="#CCCCCC"> that has I think it's</font>

765
00:42:44,730 --> 00:42:47,819
called something<font color="#E5E5E5"> with keys but there's</font>

766
00:42:46,260 --> 00:42:53,400
only<font color="#E5E5E5"> a sorry</font><font color="#CCCCCC"> two-bit value in there that</font>

767
00:42:47,819 --> 00:42:57,420
is strange<font color="#E5E5E5"> so</font><font color="#CCCCCC"> ok so this means we can</font>

768
00:42:53,400 --> 00:42:59,940
<font color="#E5E5E5">only write</font><font color="#CCCCCC"> to this area</font><font color="#E5E5E5"> but there's area</font>

769
00:42:57,420 --> 00:43:04,890
<font color="#CCCCCC">outside of it and our stuff that</font><font color="#E5E5E5"> we</font>

770
00:42:59,940 --> 00:43:08,310
write might be copied around so the

771
00:43:04,890 --> 00:43:11,970
great<font color="#CCCCCC"> thing is</font><font color="#E5E5E5"> that the keyboard has</font><font color="#CCCCCC"> hid</font>

772
00:43:08,310 --> 00:43:16,859
feature report<font color="#CCCCCC"> b6 that can be used for</font>

773
00:43:11,970 --> 00:43:19,770
retrieval of the<font color="#E5E5E5"> whole SPI memory so you</font>

774
00:43:16,859 --> 00:43:21,869
<font color="#CCCCCC">can read everything that was flashed and</font>

775
00:43:19,770 --> 00:43:25,450
all<font color="#E5E5E5"> written to this SPI you can read it</font>

776
00:43:21,869 --> 00:43:28,359
back<font color="#E5E5E5"> and this works by</font>

777
00:43:25,450 --> 00:43:32,109
setting the offset by doing a set

778
00:43:28,359 --> 00:43:34,900
feature report<font color="#E5E5E5"> and then you can read</font>

779
00:43:32,109 --> 00:43:37,900
from this offset by using a<font color="#E5E5E5"> get feature</font>

780
00:43:34,900 --> 00:43:42,670
report<font color="#CCCCCC"> b6</font><font color="#E5E5E5"> and then you can read</font>

781
00:43:37,900 --> 00:43:46,000
arbitrary in this big block<font color="#E5E5E5"> the storage</font>

782
00:43:42,670 --> 00:43:48,940
seems to be non-volatile<font color="#CCCCCC"> so</font><font color="#E5E5E5"> even if you</font>

783
00:43:46,000 --> 00:43:51,190
disconnect<font color="#CCCCCC"> the</font><font color="#E5E5E5"> keyboard for several days</font>

784
00:43:48,940 --> 00:43:53,710
<font color="#E5E5E5">and put it back the storage is still</font>

785
00:43:51,190 --> 00:43:56,859
there<font color="#CCCCCC"> and whatever was</font><font color="#E5E5E5"> previously</font>

786
00:43:53,710 --> 00:44:00,190
written<font color="#E5E5E5"> can be read back</font><font color="#CCCCCC"> the</font><font color="#E5E5E5"> only</font>

787
00:43:56,859 --> 00:44:03,069
attention<font color="#E5E5E5"> here is that in the newest in</font>

788
00:44:00,190 --> 00:44:06,550
<font color="#CCCCCC">the small keyboard in the 10.5 this</font>

789
00:44:03,070 --> 00:44:09,040
feature does<font color="#CCCCCC"> not work but Apple did not</font>

790
00:44:06,550 --> 00:44:11,859
<font color="#E5E5E5">fully remove it instead they</font><font color="#CCCCCC"> seem to</font>

791
00:44:09,040 --> 00:44:14,800
have broken it and now the return value

792
00:44:11,859 --> 00:44:19,900
seems to be initialized data from the

793
00:44:14,800 --> 00:44:22,060
<font color="#E5E5E5">memory of the yeah of the memory of the</font>

794
00:44:19,900 --> 00:44:25,359
device<font color="#CCCCCC"> so you</font><font color="#E5E5E5"> get some initialized</font>

795
00:44:22,060 --> 00:44:30,569
<font color="#E5E5E5">unknown data from the device like memory</font>

796
00:44:25,359 --> 00:44:33,790
content<font color="#E5E5E5"> so another little vulnerability</font>

797
00:44:30,569 --> 00:44:36,790
so when we read this back<font color="#E5E5E5"> I told you</font>

798
00:44:33,790 --> 00:44:38,980
there's this configuration block at<font color="#CCCCCC"> IE 0</font>

799
00:44:36,790 --> 00:44:41,619
0 0 and when<font color="#E5E5E5"> you read this from a</font>

800
00:44:38,980 --> 00:44:44,349
<font color="#E5E5E5">keyboard you will get this block here</font>

801
00:44:41,619 --> 00:44:46,930
back and inside this block<font color="#E5E5E5"> you can see</font>

802
00:44:44,349 --> 00:44:50,710
the serial<font color="#E5E5E5"> number</font><font color="#CCCCCC"> of</font><font color="#E5E5E5"> this device every</font>

803
00:44:46,930 --> 00:44:52,390
device has<font color="#E5E5E5"> two serial numbers and you</font>

804
00:44:50,710 --> 00:44:55,810
can<font color="#CCCCCC"> see the firmware version that it</font>

805
00:44:52,390 --> 00:44:58,210
runs you can see the vendor ID<font color="#E5E5E5"> and not a</font>

806
00:44:55,810 --> 00:45:00,759
filmer version<font color="#E5E5E5"> you can see the product</font>

807
00:44:58,210 --> 00:45:04,540
ID<font color="#E5E5E5"> you can see the vendor ID and you can</font>

808
00:45:00,760 --> 00:45:08,170
<font color="#CCCCCC">see the hardware revision which is</font><font color="#E5E5E5"> one</font>

809
00:45:04,540 --> 00:45:13,960
the<font color="#CCCCCC"> other vision 5ac is</font><font color="#E5E5E5"> the apple vendor</font>

810
00:45:08,170 --> 00:45:17,619
and<font color="#CCCCCC"> to</font><font color="#E5E5E5"> 6a is</font><font color="#CCCCCC"> the 10.5 keyboard</font><font color="#E5E5E5"> know is</font>

811
00:45:13,960 --> 00:45:21,970
actually<font color="#CCCCCC"> the 9.7 keyboard because on the</font>

812
00:45:17,619 --> 00:45:25,930
10.5 this will work so when<font color="#E5E5E5"> I did this</font><font color="#CCCCCC"> I</font>

813
00:45:21,970 --> 00:45:32,399
got like a crazy idea<font color="#E5E5E5"> because I was like</font>

814
00:45:25,930 --> 00:45:32,399
<font color="#CCCCCC">ok</font><font color="#E5E5E5"> I can</font><font color="#CCCCCC"> read back</font><font color="#E5E5E5"> whatever was flashed</font>

815
00:45:33,320 --> 00:45:41,810
so why not buy a<font color="#CCCCCC"> new keyboard</font><font color="#E5E5E5"> and read</font>

816
00:45:38,240 --> 00:45:43,669
what's there<font color="#E5E5E5"> my idea was that Apple</font>

817
00:45:41,810 --> 00:45:47,750
likely will upload the firmware in the

818
00:45:43,670 --> 00:45:51,380
same way and then the idea is I can

819
00:45:47,750 --> 00:45:57,680
maybe read the firmware out<font color="#CCCCCC"> so I did</font>

820
00:45:51,380 --> 00:46:03,680
this<font color="#E5E5E5"> I uploaded it and read it</font><font color="#CCCCCC"> and the</font>

821
00:45:57,680 --> 00:46:06,799
result is that<font color="#E5E5E5"> unfortunately Apple seems</font>

822
00:46:03,680 --> 00:46:09,529
to first<font color="#E5E5E5"> flash the firmware and then</font>

823
00:46:06,800 --> 00:46:12,470
they upload the info<font color="#E5E5E5"> block and so on so</font>

824
00:46:09,530 --> 00:46:15,440
what we see here<font color="#CCCCCC"> is that</font><font color="#E5E5E5"> the first four</font>

825
00:46:12,470 --> 00:46:17,209
kilobyte<font color="#E5E5E5"> here is</font><font color="#CCCCCC"> - are destroyed</font>

826
00:46:15,440 --> 00:46:21,230
it's the info blocks with a lot<font color="#E5E5E5"> of</font>

827
00:46:17,210 --> 00:46:25,010
ffffff and then after<font color="#CCCCCC"> one kilobyte we</font>

828
00:46:21,230 --> 00:46:27,980
see<font color="#CCCCCC"> something that looks</font><font color="#E5E5E5"> like coat turns</font>

829
00:46:25,010 --> 00:46:34,580
<font color="#E5E5E5">out all the rest of the</font><font color="#CCCCCC"> firmware is</font>

830
00:46:27,980 --> 00:46:38,360
still there<font color="#E5E5E5"> so the question is now can</font>

831
00:46:34,580 --> 00:46:41,990
<font color="#E5E5E5">we reconstruct the actual firmware on</font>

832
00:46:38,360 --> 00:46:43,730
<font color="#E5E5E5">the device with this</font><font color="#CCCCCC"> information</font><font color="#E5E5E5"> so we</font>

833
00:46:41,990 --> 00:46:48,560
can do<font color="#E5E5E5"> this on the</font><font color="#CCCCCC"> twelfth of nine we</font>

834
00:46:43,730 --> 00:46:51,710
<font color="#E5E5E5">can do it on the 9.7 and those are the</font>

835
00:46:48,560 --> 00:46:53,570
newest versions<font color="#E5E5E5"> that they have but the</font>

836
00:46:51,710 --> 00:46:57,260
problem is the<font color="#E5E5E5"> only thing</font><font color="#CCCCCC"> we</font><font color="#E5E5E5"> can</font><font color="#CCCCCC"> use for</font>

837
00:46:53,570 --> 00:47:02,120
repairing<font color="#E5E5E5"> is this 850 because it's the</font>

838
00:46:57,260 --> 00:47:06,490
<font color="#CCCCCC">only</font><font color="#E5E5E5"> thing that Apple gives out so when</font>

839
00:47:02,120 --> 00:47:12,319
we compare the a 50 to<font color="#CCCCCC"> the 855 for</font><font color="#E5E5E5"> 12.9</font>

840
00:47:06,490 --> 00:47:14,930
<font color="#CCCCCC">we can see that the end of the firmware</font>

841
00:47:12,320 --> 00:47:19,310
<font color="#E5E5E5">that we can actually dump looks very</font>

842
00:47:14,930 --> 00:47:23,560
<font color="#E5E5E5">similar so</font><font color="#CCCCCC"> we</font><font color="#E5E5E5"> assume why are the first</font>

843
00:47:19,310 --> 00:47:23,560
<font color="#CCCCCC">focal button and also</font><font color="#E5E5E5"> completely similar</font>

844
00:47:23,860 --> 00:47:31,910
<font color="#CCCCCC">so we just</font><font color="#E5E5E5"> copy the old four kilobyte</font>

845
00:47:27,140 --> 00:47:34,819
<font color="#E5E5E5">into the destroyed block the next thing</font>

846
00:47:31,910 --> 00:47:38,779
is we know that the beginning is<font color="#CCCCCC"> always</font>

847
00:47:34,820 --> 00:47:42,260
an<font color="#CCCCCC"> AF new header and the fu the header</font>

848
00:47:38,780 --> 00:47:46,270
is<font color="#E5E5E5"> well defined so we can any time</font>

849
00:47:42,260 --> 00:47:46,270
<font color="#E5E5E5">create a valid fu header</font>

850
00:47:50,369 --> 00:47:58,660
now when we've done<font color="#E5E5E5"> that</font><font color="#CCCCCC"> we have</font><font color="#E5E5E5"> to</font>

851
00:47:53,350 --> 00:48:01,960
reconstruct<font color="#E5E5E5"> the green stuff so the green</font>

852
00:47:58,660 --> 00:48:08,040
stuff we<font color="#E5E5E5"> just</font><font color="#CCCCCC"> assume should be very</font><font color="#E5E5E5"> very</font>

853
00:48:01,960 --> 00:48:10,600
similar to<font color="#E5E5E5"> the old stuff because</font>

854
00:48:08,040 --> 00:48:13,330
everything here also<font color="#CCCCCC"> looks very</font><font color="#E5E5E5"> much</font>

855
00:48:10,600 --> 00:48:15,009
<font color="#E5E5E5">byte identical so we assume everything</font>

856
00:48:13,330 --> 00:48:17,440
at the beginning<font color="#CCCCCC"> is byte identical</font>

857
00:48:15,010 --> 00:48:20,980
except<font color="#CCCCCC"> for few</font><font color="#E5E5E5"> things that have to</font>

858
00:48:17,440 --> 00:48:24,610
<font color="#CCCCCC">change</font><font color="#E5E5E5"> like there's a version number in</font>

859
00:48:20,980 --> 00:48:29,290
the green<font color="#E5E5E5"> so</font><font color="#CCCCCC"> we need to fix</font><font color="#E5E5E5"> that there</font>

860
00:48:24,610 --> 00:48:32,380
are two<font color="#E5E5E5"> label relative addresses inside</font>

861
00:48:29,290 --> 00:48:36,100
<font color="#E5E5E5">the green so</font><font color="#CCCCCC"> we have to actually figure</font>

862
00:48:32,380 --> 00:48:38,920
the new relative addresses<font color="#E5E5E5"> also then</font>

863
00:48:36,100 --> 00:48:42,160
there's a few pointer inside the green

864
00:48:38,920 --> 00:48:46,660
that point<font color="#E5E5E5"> into the blue so</font><font color="#CCCCCC"> we have to</font>

865
00:48:42,160 --> 00:48:49,839
fix that<font color="#E5E5E5"> also</font><font color="#CCCCCC"> we also have some relative</font>

866
00:48:46,660 --> 00:48:53,230
jump from green into blue area but we

867
00:48:49,840 --> 00:48:55,119
can find that and just change the<font color="#E5E5E5"> target</font>

868
00:48:53,230 --> 00:48:58,000
<font color="#CCCCCC">address by figuring out what the real</font>

869
00:48:55,119 --> 00:49:01,420
target is this is very easy because<font color="#CCCCCC"> firm</font>

870
00:48:58,000 --> 00:49:03,340
<font color="#CCCCCC">words don't change so much the last</font>

871
00:49:01,420 --> 00:49:06,280
thing that we should<font color="#E5E5E5"> have checked is if</font>

872
00:49:03,340 --> 00:49:08,920
there's a pointer to<font color="#CCCCCC"> area SRAM</font><font color="#E5E5E5"> in in</font>

873
00:49:06,280 --> 00:49:11,140
green<font color="#E5E5E5"> that</font><font color="#CCCCCC"> has changed</font><font color="#E5E5E5"> because the rest</font>

874
00:49:08,920 --> 00:49:15,609
of the structure<font color="#CCCCCC"> has changed</font><font color="#E5E5E5"> luckily</font>

875
00:49:11,140 --> 00:49:17,560
that's not<font color="#E5E5E5"> the case so this seems to</font><font color="#CCCCCC"> be</font>

876
00:49:15,609 --> 00:49:21,220
a lot of<font color="#CCCCCC"> wishful thinking and</font><font color="#E5E5E5"> working</font>

877
00:49:17,560 --> 00:49:24,700
<font color="#E5E5E5">but what I got out</font><font color="#CCCCCC"> of this is I was</font>

878
00:49:21,220 --> 00:49:27,939
actually<font color="#E5E5E5"> able to make this film whether</font>

879
00:49:24,700 --> 00:49:30,850
<font color="#E5E5E5">I extracted pass all the checks which</font>

880
00:49:27,940 --> 00:49:33,520
means I have a byte for byte<font color="#E5E5E5"> copy of</font>

881
00:49:30,850 --> 00:49:38,200
what Apple<font color="#CCCCCC"> actually uses as firmware</font>

882
00:49:33,520 --> 00:49:42,100
<font color="#E5E5E5">because even the RS</font><font color="#CCCCCC"> 8 is valid this</font>

883
00:49:38,200 --> 00:49:45,368
<font color="#E5E5E5">means I have this binary and I can now</font>

884
00:49:42,100 --> 00:49:47,710
<font color="#E5E5E5">directly take my 12.9 keyboard that I</font>

885
00:49:45,369 --> 00:49:50,260
<font color="#E5E5E5">saw it and</font><font color="#CCCCCC"> just upgraded to</font><font color="#E5E5E5"> this</font>

886
00:49:47,710 --> 00:49:54,260
<font color="#E5E5E5">firmware version</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> also Apple does</font><font color="#CCCCCC"> not</font>

887
00:49:50,260 --> 00:49:57,650
provide a<font color="#E5E5E5"> firmware</font><font color="#CCCCCC"> upgrade so</font>

888
00:49:54,260 --> 00:50:01,280
with the other keyboard<font color="#E5E5E5"> it's not that</font>

889
00:49:57,650 --> 00:50:04,520
simple<font color="#CCCCCC"> the other</font><font color="#E5E5E5"> keyboard when you do</font>

890
00:50:01,280 --> 00:50:08,000
<font color="#E5E5E5">this comparison is you will see that</font>

891
00:50:04,520 --> 00:50:11,150
there<font color="#CCCCCC"> is a shift in it you will see</font><font color="#E5E5E5"> that</font>

892
00:50:08,000 --> 00:50:14,420
after<font color="#E5E5E5"> the</font><font color="#CCCCCC"> four kilobyte the code is the</font>

893
00:50:11,150 --> 00:50:19,940
<font color="#E5E5E5">same but it's all shifted around by 16</font>

894
00:50:14,420 --> 00:50:21,980
bytes<font color="#E5E5E5"> so something must have</font><font color="#CCCCCC"> changed</font><font color="#E5E5E5"> in</font>

895
00:50:19,940 --> 00:50:26,840
the first<font color="#CCCCCC"> four kilobyte</font><font color="#E5E5E5"> so that the</font>

896
00:50:21,980 --> 00:50:30,170
<font color="#E5E5E5">first four kilobyte became longer so</font>

897
00:50:26,840 --> 00:50:33,050
when you do this<font color="#E5E5E5"> and I had at this point</font>

898
00:50:30,170 --> 00:50:35,390
<font color="#CCCCCC">I already had like I</font><font color="#E5E5E5"> just did the other</font>

899
00:50:33,050 --> 00:50:39,140
<font color="#CCCCCC">one so I was</font><font color="#E5E5E5"> already</font><font color="#CCCCCC"> experiencing it I</font>

900
00:50:35,390 --> 00:50:42,620
was able<font color="#E5E5E5"> to really easily</font><font color="#CCCCCC"> pinpoint</font><font color="#E5E5E5"> where</font>

901
00:50:39,140 --> 00:50:44,480
these 16 bytes are that<font color="#E5E5E5"> were changed it</font>

902
00:50:42,620 --> 00:50:46,490
is basically a new<font color="#E5E5E5"> function that is</font>

903
00:50:44,480 --> 00:50:49,820
called from the blue area with a

904
00:50:46,490 --> 00:50:52,270
backward call<font color="#E5E5E5"> and this red area</font><font color="#CCCCCC"> is a 16</font>

905
00:50:49,820 --> 00:50:55,370
byte function we have no idea what it<font color="#E5E5E5"> is</font>

906
00:50:52,270 --> 00:50:58,040
so we can<font color="#E5E5E5"> never ever reconstruct it so</font>

907
00:50:55,370 --> 00:51:01,730
<font color="#CCCCCC">we can never</font><font color="#E5E5E5"> ever actually make this</font>

908
00:50:58,040 --> 00:51:04,100
<font color="#E5E5E5">thing work</font><font color="#CCCCCC"> however the only</font><font color="#E5E5E5"> thing we</font>

909
00:51:01,730 --> 00:51:05,990
need for<font color="#CCCCCC"> researchers we need a</font><font color="#E5E5E5"> firmware</font>

910
00:51:04,100 --> 00:51:11,049
that<font color="#E5E5E5"> when we</font><font color="#CCCCCC"> reach into either or</font>

911
00:51:05,990 --> 00:51:13,939
whatever<font color="#E5E5E5"> we have some working code and</font>

912
00:51:11,050 --> 00:51:17,060
for working<font color="#E5E5E5"> code</font><font color="#CCCCCC"> we don't care about the</font>

913
00:51:13,940 --> 00:51:19,630
16 byte function so this is more

914
00:51:17,060 --> 00:51:23,299
complicated<font color="#E5E5E5"> than</font><font color="#CCCCCC"> the previous step</font>

915
00:51:19,630 --> 00:51:26,630
<font color="#E5E5E5">because we</font><font color="#CCCCCC"> have still the</font><font color="#E5E5E5"> version number</font>

916
00:51:23,300 --> 00:51:28,640
in green<font color="#CCCCCC"> that we can fix that's easy we</font>

917
00:51:26,630 --> 00:51:30,650
have still the<font color="#E5E5E5"> label relative pointers</font>

918
00:51:28,640 --> 00:51:34,460
in green - somewhere in<font color="#E5E5E5"> blue that</font><font color="#CCCCCC"> we</font>

919
00:51:30,650 --> 00:51:36,980
need to<font color="#E5E5E5"> fix but the problem is now we</font>

920
00:51:34,460 --> 00:51:39,770
<font color="#CCCCCC">have a bunch</font><font color="#E5E5E5"> of SRAM addresses like even</font>

921
00:51:36,980 --> 00:51:42,950
the initial<font color="#E5E5E5"> stack pointer that is inside</font>

922
00:51:39,770 --> 00:51:44,900
<font color="#E5E5E5">green that has changed luckily from</font>

923
00:51:42,950 --> 00:51:49,910
looking at changes later on we can

924
00:51:44,900 --> 00:51:53,210
figure out<font color="#CCCCCC"> where that is</font><font color="#E5E5E5"> and we have</font><font color="#CCCCCC"> now</font>

925
00:51:49,910 --> 00:51:55,390
pointers to blue from<font color="#E5E5E5"> either green or</font>

926
00:51:53,210 --> 00:51:58,580
<font color="#E5E5E5">yellow that need to be fixed</font>

927
00:51:55,390 --> 00:52:02,000
we have relatives jumps<font color="#E5E5E5"> from green to</font>

928
00:51:58,580 --> 00:52:05,480
<font color="#E5E5E5">blue so we have to fix</font><font color="#CCCCCC"> that again</font><font color="#E5E5E5"> we</font>

929
00:52:02,000 --> 00:52:06,260
have now to fix also jumps from blue to

930
00:52:05,480 --> 00:52:10,670
<font color="#CCCCCC">green</font>

931
00:52:06,260 --> 00:52:13,760
because the<font color="#E5E5E5"> Delta changed so the opcode</font>

932
00:52:10,670 --> 00:52:17,030
needs to be changed<font color="#CCCCCC"> we have to also</font>

933
00:52:13,760 --> 00:52:19,850
<font color="#E5E5E5">figure out yellow to green jumps because</font>

934
00:52:17,030 --> 00:52:24,710
<font color="#E5E5E5">there's also a change in the</font><font color="#CCCCCC"> Delta</font>

935
00:52:19,850 --> 00:52:28,520
so all this up codes<font color="#E5E5E5"> change so in the</font>

936
00:52:24,710 --> 00:52:31,310
end I have a firmware<font color="#E5E5E5"> for the 9.7 that</font>

937
00:52:28,520 --> 00:52:33,320
loads into either<font color="#E5E5E5"> all the code perfectly</font>

938
00:52:31,310 --> 00:52:36,890
<font color="#E5E5E5">disassembled every the code flow is</font>

939
00:52:33,320 --> 00:52:39,170
great just<font color="#E5E5E5"> this red area the</font><font color="#CCCCCC"> 16 byte in</font>

940
00:52:36,890 --> 00:52:41,868
<font color="#E5E5E5">the middle I</font><font color="#CCCCCC"> don't have and that's why I</font>

941
00:52:39,170 --> 00:52:47,540
cannot make this pass and that's<font color="#E5E5E5"> why I</font>

942
00:52:41,869 --> 00:52:51,560
cannot flash it to an actual<font color="#CCCCCC"> device but</font>

943
00:52:47,540 --> 00:52:54,590
if Apple ever<font color="#CCCCCC"> releases</font><font color="#E5E5E5"> the next update</font><font color="#CCCCCC"> I</font>

944
00:52:51,560 --> 00:53:02,540
<font color="#E5E5E5">will know what</font><font color="#CCCCCC"> the 16 bytes are and then</font>

945
00:52:54,590 --> 00:53:07,760
I can<font color="#E5E5E5"> reconstruct the old version so the</font>

946
00:53:02,540 --> 00:53:11,330
next<font color="#E5E5E5"> and nearly last thing is the Apple</font>

947
00:53:07,760 --> 00:53:13,400
pencil crash<font color="#CCCCCC"> lock because</font><font color="#E5E5E5"> the Apple</font>

948
00:53:11,330 --> 00:53:17,390
pencil<font color="#E5E5E5"> actually has a debugging</font><font color="#CCCCCC"> tool</font>

949
00:53:13,400 --> 00:53:21,170
inside the crash lock and when the Apple

950
00:53:17,390 --> 00:53:24,080
pencil crashes throws a panic<font color="#E5E5E5"> then the</font>

951
00:53:21,170 --> 00:53:27,290
crash lock<font color="#E5E5E5"> is written to this</font><font color="#CCCCCC"> flash area</font>

952
00:53:24,080 --> 00:53:29,569
<font color="#E5E5E5">and this might be</font><font color="#CCCCCC"> helpful if you ever</font>

953
00:53:27,290 --> 00:53:33,800
write<font color="#E5E5E5"> an exploit against this for code</font>

954
00:53:29,570 --> 00:53:37,160
execution<font color="#CCCCCC"> you can</font><font color="#E5E5E5"> access this crash log</font>

955
00:53:33,800 --> 00:53:42,140
<font color="#E5E5E5">we are the same hit features this time</font>

956
00:53:37,160 --> 00:53:46,310
we use report a1<font color="#E5E5E5"> and the idea is by</font>

957
00:53:42,140 --> 00:53:50,150
setting<font color="#E5E5E5"> this feature you can</font><font color="#CCCCCC"> have</font><font color="#E5E5E5"> three</font>

958
00:53:46,310 --> 00:53:53,779
sub functions you can either erase the

959
00:53:50,150 --> 00:53:56,930
<font color="#CCCCCC">crash</font><font color="#E5E5E5"> log content then it's</font><font color="#CCCCCC"> made empty</font>

960
00:53:53,780 --> 00:54:00,160
<font color="#E5E5E5">you can create a test crash rock so it's</font>

961
00:53:56,930 --> 00:54:03,919
a test crash so<font color="#CCCCCC"> you can see it</font><font color="#E5E5E5"> works</font><font color="#CCCCCC"> and</font>

962
00:54:00,160 --> 00:54:06,410
by using the<font color="#CCCCCC"> 0 5 you</font><font color="#E5E5E5"> can set the crash</font>

963
00:54:03,920 --> 00:54:10,160
lock<font color="#E5E5E5"> read offset because</font><font color="#CCCCCC"> the crash log</font>

964
00:54:06,410 --> 00:54:11,930
is like I<font color="#CCCCCC"> think</font><font color="#E5E5E5"> 1024 bytes long so you</font>

965
00:54:10,160 --> 00:54:14,118
cannot read this at<font color="#CCCCCC"> one so you</font><font color="#E5E5E5"> have to</font>

966
00:54:11,930 --> 00:54:18,140
walk around<font color="#CCCCCC"> and</font><font color="#E5E5E5"> you offset for some</font>

967
00:54:14,119 --> 00:54:19,260
unknown reason<font color="#E5E5E5"> here the offsets are</font><font color="#CCCCCC"> 2</font>

968
00:54:18,140 --> 00:54:21,629
bytes

969
00:54:19,260 --> 00:54:25,610
and<font color="#CCCCCC"> little-endian everywhere else</font>

970
00:54:21,630 --> 00:54:25,610
<font color="#E5E5E5">offsets are three bytes and big-endian</font>

971
00:54:26,060 --> 00:54:33,540
so when you have a get report<font color="#E5E5E5"> get</font>

972
00:54:30,780 --> 00:54:35,310
feature report<font color="#E5E5E5"> you actually read back</font>

973
00:54:33,540 --> 00:54:37,020
from<font color="#CCCCCC"> this read offset and then</font><font color="#E5E5E5"> this</font>

974
00:54:35,310 --> 00:54:41,310
offset<font color="#E5E5E5"> is automatically increased every</font>

975
00:54:37,020 --> 00:54:44,759
time you read<font color="#CCCCCC"> I have a dump here</font><font color="#E5E5E5"> that</font>

976
00:54:41,310 --> 00:54:46,980
looks<font color="#E5E5E5"> like this so</font><font color="#CCCCCC"> this is</font><font color="#E5E5E5"> the output</font>

977
00:54:44,760 --> 00:54:49,830
<font color="#E5E5E5">that you can see from this lot from this</font>

978
00:54:46,980 --> 00:54:53,010
test crash<font color="#E5E5E5"> so you can see the file</font><font color="#CCCCCC"> name</font>

979
00:54:49,830 --> 00:54:54,990
you<font color="#E5E5E5"> can see all the processes that are</font>

980
00:54:53,010 --> 00:54:57,540
<font color="#CCCCCC">currently</font><font color="#E5E5E5"> running you can see how much</font>

981
00:54:54,990 --> 00:55:00,450
<font color="#CCCCCC">of</font><font color="#E5E5E5"> the stack they used you can see the</font>

982
00:54:57,540 --> 00:55:02,759
active process<font color="#E5E5E5"> when the crash happened</font>

983
00:55:00,450 --> 00:55:05,220
and you see some<font color="#CCCCCC"> black trace on the</font>

984
00:55:02,760 --> 00:55:07,910
stack<font color="#E5E5E5"> and the firmware version in the</font>

985
00:55:05,220 --> 00:55:10,500
very end<font color="#CCCCCC"> so this might be quite nice</font>

986
00:55:07,910 --> 00:55:13,589
<font color="#E5E5E5">also depending on what kind of crash it</font>

987
00:55:10,500 --> 00:55:19,610
is other crashes can theoretically<font color="#E5E5E5"> also</font>

988
00:55:13,590 --> 00:55:19,610
give you register dumps but not this one

989
00:55:22,760 --> 00:55:42,090
<font color="#CCCCCC">let me just</font><font color="#E5E5E5"> show you this I don't know</font>

990
00:55:37,230 --> 00:55:44,780
<font color="#E5E5E5">if it's sleeping okay so I have now</font>

991
00:55:42,090 --> 00:55:48,300
<font color="#E5E5E5">sticked the Apple pencil to the iPod</font>

992
00:55:44,780 --> 00:55:52,010
<font color="#CCCCCC">keep in mind</font><font color="#E5E5E5"> I said it still works and</font>

993
00:55:48,300 --> 00:55:52,010
now I have a tool called

994
00:55:52,370 --> 00:56:00,270
<font color="#E5E5E5">tool Bob</font><font color="#CCCCCC"> toolkit crash lock</font><font color="#E5E5E5"> when we run</font>

995
00:55:56,130 --> 00:56:03,180
it<font color="#E5E5E5"> we can see this is now the dump the</font>

996
00:56:00,270 --> 00:56:05,130
same one that<font color="#CCCCCC"> is on</font><font color="#E5E5E5"> the under</font><font color="#CCCCCC"> sing</font><font color="#E5E5E5"> we</font>

997
00:56:03,180 --> 00:56:12,509
can<font color="#CCCCCC"> also see this here's the hex version</font>

998
00:56:05,130 --> 00:56:15,840
of this<font color="#E5E5E5"> dump so this tool also has</font><font color="#CCCCCC"> a few</font>

999
00:56:12,510 --> 00:56:18,560
<font color="#E5E5E5">other</font><font color="#CCCCCC"> features</font><font color="#E5E5E5"> I will give you the</font>

1000
00:56:15,840 --> 00:56:21,600
source<font color="#E5E5E5"> code for all of this their serial</font>

1001
00:56:18,560 --> 00:56:28,430
serial will output<font color="#CCCCCC"> the serial numbers of</font>

1002
00:56:21,600 --> 00:56:31,430
<font color="#E5E5E5">the device of the pencil I can say</font>

1003
00:56:28,430 --> 00:56:31,430
<font color="#CCCCCC">earase</font>

1004
00:56:31,940 --> 00:56:49,940
<font color="#E5E5E5">this will clean sorry</font><font color="#CCCCCC"> it's not a race</font>

1005
00:56:36,770 --> 00:56:53,720
it's clean I can clean it's clear<font color="#CCCCCC"> yeah</font>

1006
00:56:49,940 --> 00:56:56,840
it's clear<font color="#E5E5E5"> so so this this now cleared</font>

1007
00:56:53,720 --> 00:56:58,790
the the crash<font color="#CCCCCC"> lock</font><font color="#E5E5E5"> so when we now dump</font>

1008
00:56:56,840 --> 00:57:00,500
the crash<font color="#E5E5E5"> lock we will see it's all zero</font>

1009
00:56:58,790 --> 00:57:09,890
there's nothing in<font color="#E5E5E5"> there in the crash</font>

1010
00:57:00,500 --> 00:57:12,640
log<font color="#E5E5E5"> and now we can use the</font><font color="#CCCCCC"> the test so</font>

1011
00:57:09,890 --> 00:57:16,069
when we test this it takes a<font color="#E5E5E5"> while and</font>

1012
00:57:12,640 --> 00:57:22,430
<font color="#E5E5E5">after it tested it it's usually good</font>

1013
00:57:16,070 --> 00:57:25,760
idea to unplug<font color="#E5E5E5"> and plug in</font><font color="#CCCCCC"> again and now</font>

1014
00:57:22,430 --> 00:57:27,620
we can do this again<font color="#E5E5E5"> and we have</font><font color="#CCCCCC"> the</font>

1015
00:57:25,760 --> 00:57:29,840
crash dump<font color="#CCCCCC"> again</font><font color="#E5E5E5"> and because it's the</font>

1016
00:57:27,620 --> 00:57:32,120
<font color="#CCCCCC">Auto generated</font><font color="#E5E5E5"> it always</font><font color="#CCCCCC"> sees</font><font color="#E5E5E5"> is the</font>

1017
00:57:29,840 --> 00:57:35,150
same because<font color="#E5E5E5"> it's always the test crash</font>

1018
00:57:32,120 --> 00:57:39,109
<font color="#CCCCCC">I have</font><font color="#E5E5E5"> actually never except for one</font>

1019
00:57:35,150 --> 00:57:40,580
time I saw<font color="#E5E5E5"> a mem fold but usually the</font>

1020
00:57:39,110 --> 00:57:45,680
pencil does not crash

1021
00:57:40,580 --> 00:57:51,170
I have also another<font color="#E5E5E5"> tool called brute</font>

1022
00:57:45,680 --> 00:57:57,919
force when you run this it<font color="#E5E5E5"> will try out</font>

1023
00:57:51,170 --> 00:58:00,950
every single hit report<font color="#E5E5E5"> and this year is</font>

1024
00:57:57,920 --> 00:58:05,030
<font color="#CCCCCC">for primary usage</font><font color="#E5E5E5"> 11 so you can see here</font>

1025
00:58:00,950 --> 00:58:07,430
are these serial numbers<font color="#CCCCCC"> but you can</font>

1026
00:58:05,030 --> 00:58:08,960
also give it<font color="#E5E5E5"> a different primary</font><font color="#CCCCCC"> then</font>

1027
00:58:07,430 --> 00:58:10,220
you get<font color="#CCCCCC"> the different output because</font>

1028
00:58:08,960 --> 00:58:14,780
they're<font color="#E5E5E5"> talking</font><font color="#CCCCCC"> to a</font><font color="#E5E5E5"> different part of</font>

1029
00:58:10,220 --> 00:58:17,540
the<font color="#E5E5E5"> device and so on</font><font color="#CCCCCC"> there's 17 and so</font>

1030
00:58:14,780 --> 00:58:19,550
on you go<font color="#E5E5E5"> so this</font><font color="#CCCCCC"> is the</font><font color="#E5E5E5"> thing is for</font>

1031
00:58:17,540 --> 00:58:22,130
some reason<font color="#CCCCCC"> when you</font><font color="#E5E5E5"> do this for the</font><font color="#CCCCCC"> 17</font>

1032
00:58:19,550 --> 00:58:26,170
<font color="#E5E5E5">the device becomes really slow after</font>

1033
00:58:22,130 --> 00:58:28,880
this<font color="#CCCCCC"> and now everything takes forever</font>

1034
00:58:26,170 --> 00:58:32,240
<font color="#CCCCCC">let me</font><font color="#E5E5E5"> just pull this out then</font>

1035
00:58:28,880 --> 00:58:37,670
everything<font color="#E5E5E5"> is fine again</font><font color="#CCCCCC"> in</font><font color="#E5E5E5"> theory you</font>

1036
00:58:32,240 --> 00:58:41,810
can also say set then it<font color="#E5E5E5"> does a set</font>

1037
00:58:37,670 --> 00:58:44,060
report and sending random<font color="#E5E5E5"> data and when</font>

1038
00:58:41,810 --> 00:58:45,470
I now read it back<font color="#E5E5E5"> you can actually see</font>

1039
00:58:44,060 --> 00:58:48,049
I get far more back

1040
00:58:45,470 --> 00:58:51,379
and I'm actually not<font color="#E5E5E5"> sure what this is</font>

1041
00:58:48,050 --> 00:58:53,420
because<font color="#CCCCCC"> I just coded this tool like 10</font>

1042
00:58:51,380 --> 00:58:57,950
minutes<font color="#E5E5E5"> before the talk so I don't know</font>

1043
00:58:53,420 --> 00:58:59,090
why suddenly<font color="#CCCCCC"> this comes out</font><font color="#E5E5E5"> yeah I had a</font>

1044
00:58:57,950 --> 00:59:01,819
different version but I never<font color="#E5E5E5"> actually</font>

1045
00:58:59,090 --> 00:59:04,520
<font color="#E5E5E5">tried to facet this way so I</font><font color="#CCCCCC"> don't know</font>

1046
00:59:01,820 --> 00:59:06,650
if<font color="#CCCCCC"> I disturb the device at this point or</font>

1047
00:59:04,520 --> 00:59:08,780
<font color="#E5E5E5">a driver or what why is something</font><font color="#CCCCCC"> I get</font>

1048
00:59:06,650 --> 00:59:10,340
so much other<font color="#E5E5E5"> things back but</font><font color="#CCCCCC"> again I</font>

1049
00:59:08,780 --> 00:59:13,160
give you all the source<font color="#CCCCCC"> code so you</font><font color="#E5E5E5"> can</font>

1050
00:59:10,340 --> 00:59:16,900
play around<font color="#E5E5E5"> with this so let me just get</font>

1051
00:59:13,160 --> 00:59:16,899
<font color="#CCCCCC">back to the slides for</font><font color="#E5E5E5"> the conclusion</font>

1052
00:59:18,070 --> 00:59:25,430
oops

1053
00:59:19,869 --> 00:59:27,260
so the<font color="#CCCCCC"> result and</font><font color="#E5E5E5"> the conclusion</font><font color="#CCCCCC"> so one</font>

1054
00:59:25,430 --> 00:59:29,118
<font color="#CCCCCC">of the most important things for me was</font>

1055
00:59:27,260 --> 00:59:33,310
<font color="#E5E5E5">can someone</font><font color="#CCCCCC"> just upgrade the firmware</font>

1056
00:59:29,119 --> 00:59:35,000
and<font color="#E5E5E5"> take over my system</font><font color="#CCCCCC"> so I figure I</font><font color="#E5E5E5"> I</font>

1057
00:59:33,310 --> 00:59:39,650
realized it's ours

1058
00:59:35,000 --> 00:59:42,950
a 2048 I looked at the<font color="#CCCCCC"> codes</font><font color="#E5E5E5"> it seems to</font>

1059
00:59:39,650 --> 00:59:46,630
be good and well<font color="#E5E5E5"> implemented and I</font><font color="#CCCCCC"> don't</font>

1060
00:59:42,950 --> 00:59:49,490
<font color="#E5E5E5">think there's a vulnerability in there</font>

1061
00:59:46,630 --> 00:59:51,730
<font color="#CCCCCC">also good is</font><font color="#E5E5E5"> that this smart keyboard is</font>

1062
00:59:49,490 --> 00:59:54,589
<font color="#E5E5E5">actually protected against down grades</font>

1063
00:59:51,730 --> 00:59:57,619
<font color="#E5E5E5">bad of course is that the pencil does</font>

1064
00:59:54,589 --> 01:00:02,420
not protect against this but<font color="#E5E5E5"> one abet in</font>

1065
00:59:57,619 --> 01:00:04,730
a few days<font color="#CCCCCC"> this changes the</font><font color="#E5E5E5"> also bad</font>

1066
01:00:02,420 --> 01:00:07,640
<font color="#CCCCCC">things that</font><font color="#E5E5E5"> you can read back to the old</font>

1067
01:00:04,730 --> 01:00:09,369
firmware that's maybe<font color="#E5E5E5"> not a good</font><font color="#CCCCCC"> idea</font>

1068
01:00:07,640 --> 01:00:12,080
<font color="#CCCCCC">that you can just dump the firmware</font><font color="#E5E5E5"> and</font>

1069
01:00:09,369 --> 01:00:15,050
the other thing is I<font color="#E5E5E5"> want to really</font><font color="#CCCCCC"> know</font>

1070
01:00:12,080 --> 01:00:17,660
what<font color="#E5E5E5"> it's inside the bootloader because</font>

1071
01:00:15,050 --> 01:00:20,089
if the bootloader doesn't have an

1072
01:00:17,660 --> 01:00:23,020
additional<font color="#E5E5E5"> secure</font><font color="#CCCCCC"> a signature check this</font>

1073
01:00:20,089 --> 01:00:27,080
would mean a one-time code execution<font color="#E5E5E5"> is</font>

1074
01:00:23,020 --> 01:00:29,000
forever<font color="#E5E5E5"> taking over the device because</font>

1075
01:00:27,080 --> 01:00:30,859
then you<font color="#E5E5E5"> can just bypass the signature</font>

1076
01:00:29,000 --> 01:00:32,690
check so I really want<font color="#E5E5E5"> to know if the</font>

1077
01:00:30,859 --> 01:00:35,900
bootloader has a check<font color="#CCCCCC"> to so I have to</font>

1078
01:00:32,690 --> 01:00:38,780
find this the other security

1079
01:00:35,900 --> 01:00:41,480
<font color="#E5E5E5">architecture con is that we did not see</font>

1080
01:00:38,780 --> 01:00:43,700
any expert mitigation anyway<font color="#CCCCCC"> there is no</font>

1081
01:00:41,480 --> 01:00:47,420
randomization there no<font color="#E5E5E5"> Connery's there's</font>

1082
01:00:43,700 --> 01:00:49,368
no non-executable bits<font color="#E5E5E5"> and maybe there's</font>

1083
01:00:47,420 --> 01:00:52,339
an impossible because the MP<font color="#CCCCCC"> who does</font>

1084
01:00:49,369 --> 01:00:55,400
not<font color="#E5E5E5"> exist in these</font><font color="#CCCCCC"> devices also a</font>

1085
01:00:52,339 --> 01:00:57,410
<font color="#E5E5E5">security problem is why can send</font><font color="#CCCCCC"> box iOS</font>

1086
01:00:55,400 --> 01:01:00,019
application<font color="#E5E5E5"> talk to these devices and</font>

1087
01:00:57,410 --> 01:01:02,450
even downgrade<font color="#E5E5E5"> the film</font>

1088
01:01:00,019 --> 01:01:04,609
this should never be possible<font color="#CCCCCC"> even</font>

1089
01:01:02,450 --> 01:01:06,739
because<font color="#E5E5E5"> Apple even wants people to not</font>

1090
01:01:04,609 --> 01:01:10,038
touch serial numbers so<font color="#E5E5E5"> you can just</font>

1091
01:01:06,739 --> 01:01:12,619
read<font color="#CCCCCC"> the serial numbers or</font><font color="#E5E5E5"> you can store</font>

1092
01:01:10,039 --> 01:01:15,559
some data in the SPI of the of the<font color="#CCCCCC"> off</font>

1093
01:01:12,619 --> 01:01:17,960
<font color="#E5E5E5">the keyboard</font><font color="#CCCCCC"> and then keep the</font><font color="#E5E5E5"> data</font>

1094
01:01:15,559 --> 01:01:20,960
there<font color="#E5E5E5"> also why is the firmware update</font>

1095
01:01:17,960 --> 01:01:22,940
<font color="#CCCCCC">daemon not sandbox</font><font color="#E5E5E5"> it talks to</font><font color="#CCCCCC"> the</font>

1096
01:01:20,960 --> 01:01:25,969
device and<font color="#E5E5E5"> reads data from</font><font color="#CCCCCC"> the device</font>

1097
01:01:22,940 --> 01:01:28,160
<font color="#CCCCCC">and I believe at least</font><font color="#E5E5E5"> at one older</font>

1098
01:01:25,969 --> 01:01:30,920
version<font color="#E5E5E5"> the device could give it an</font>

1099
01:01:28,160 --> 01:01:33,019
illegal<font color="#CCCCCC"> write buffer and this would keep</font>

1100
01:01:30,920 --> 01:01:34,880
overflow<font color="#CCCCCC"> in the current</font><font color="#E5E5E5"> version that is</font>

1101
01:01:33,019 --> 01:01:37,008
no<font color="#E5E5E5"> longer the</font><font color="#CCCCCC"> case but I've saw an older</font>

1102
01:01:34,880 --> 01:01:43,249
version where it looks<font color="#E5E5E5"> like it could</font>

1103
01:01:37,009 --> 01:01:44,420
work<font color="#CCCCCC"> so final conclusion</font><font color="#E5E5E5"> is I only found</font>

1104
01:01:43,249 --> 01:01:48,049
smaller problems

1105
01:01:44,420 --> 01:01:52,160
<font color="#E5E5E5">nothing like direct code execution</font><font color="#CCCCCC"> so</font>

1106
01:01:48,049 --> 01:01:53,839
for now I trust<font color="#E5E5E5"> these devices but I've</font>

1107
01:01:52,160 --> 01:01:55,759
only<font color="#E5E5E5"> looked at the part I've mostly</font>

1108
01:01:53,839 --> 01:01:58,538
<font color="#E5E5E5">looked at the firmware verification and</font>

1109
01:01:55,759 --> 01:02:02,509
<font color="#E5E5E5">the</font><font color="#CCCCCC"> hid stuff I have not looked into</font>

1110
01:01:58,539 --> 01:02:06,170
<font color="#E5E5E5">bluetooth on the pencil and the passing</font>

1111
01:02:02,509 --> 01:02:10,219
of this proprietary<font color="#CCCCCC"> MFI</font><font color="#E5E5E5"> a IP protocol</font>

1112
01:02:06,170 --> 01:02:12,739
<font color="#E5E5E5">because</font><font color="#CCCCCC"> that's super strange I also have</font>

1113
01:02:10,219 --> 01:02:15,410
not done<font color="#CCCCCC"> Hardware text yet</font><font color="#E5E5E5"> I will talk</font>

1114
01:02:12,739 --> 01:02:18,019
to<font color="#CCCCCC"> Dimitri to do this and one</font><font color="#E5E5E5"> thing I</font>

1115
01:02:15,410 --> 01:02:21,618
want to<font color="#E5E5E5"> do is I want</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> change queima</font>

1116
01:02:18,019 --> 01:02:25,459
the STM port so<font color="#E5E5E5"> that we can run the</font>

1117
01:02:21,619 --> 01:02:29,359
firmware<font color="#E5E5E5"> in the</font><font color="#CCCCCC"> qmo so and this</font><font color="#E5E5E5"> is it I</font>

1118
01:02:25,460 --> 01:02:31,910
ran over time but you<font color="#CCCCCC"> can</font><font color="#E5E5E5"> ask me</font>

1119
01:02:29,359 --> 01:02:40,009
<font color="#CCCCCC">questions later and</font><font color="#E5E5E5"> unless you</font><font color="#CCCCCC"> have a</font>

1120
01:02:31,910 --> 01:02:41,839
very<font color="#E5E5E5"> fast short question</font><font color="#CCCCCC"> fine for the</font>

1121
01:02:40,009 --> 01:02:45,140
<font color="#CCCCCC">February</font><font color="#E5E5E5"> construction you said you made</font>

1122
01:02:41,839 --> 01:02:47,960
the<font color="#E5E5E5"> RSA check pass yes there was a key</font>

1123
01:02:45,140 --> 01:02:51,170
created by you I assume<font color="#E5E5E5"> no no what I</font>

1124
01:02:47,960 --> 01:02:54,469
<font color="#E5E5E5">mean by this is I repaired the</font><font color="#CCCCCC"> firmware</font>

1125
01:02:51,170 --> 01:02:57,289
so much that it passes<font color="#E5E5E5"> the normal check</font>

1126
01:02:54,469 --> 01:02:59,900
usually but you you said the<font color="#E5E5E5"> the only</font>

1127
01:02:57,289 --> 01:03:02,979
<font color="#E5E5E5">signature matched as well so you you</font>

1128
01:02:59,900 --> 01:03:05,630
<font color="#CCCCCC">yeah euro III</font><font color="#E5E5E5"> what I was able to fully</font>

1129
01:03:02,979 --> 01:03:08,058
reconstruct the first<font color="#E5E5E5"> four kilobyte and</font>

1130
01:03:05,630 --> 01:03:11,320
of course I was a bit<font color="#CCCCCC"> lucky</font><font color="#E5E5E5"> I made all</font>

1131
01:03:08,059 --> 01:03:15,930
the right guesses but I was able<font color="#E5E5E5"> to this</font>

1132
01:03:11,320 --> 01:03:19,060
where can just be uploaded to<font color="#E5E5E5"> to it</font><font color="#CCCCCC"> yeah</font>

1133
01:03:15,930 --> 01:03:22,410
about that<font color="#CCCCCC"> if the</font><font color="#E5E5E5"> content change the</font>

1134
01:03:19,060 --> 01:03:24,850
signature<font color="#E5E5E5"> should change as well</font><font color="#CCCCCC"> I assume</font>

1135
01:03:22,410 --> 01:03:27,759
<font color="#CCCCCC">no so the problem</font><font color="#E5E5E5"> is it's a real</font>

1136
01:03:24,850 --> 01:03:30,279
firmware but I<font color="#CCCCCC"> lose the first four</font>

1137
01:03:27,760 --> 01:03:32,260
kilobytes<font color="#E5E5E5"> so my task</font><font color="#CCCCCC"> is to</font><font color="#E5E5E5"> find the</font>

1138
01:03:30,280 --> 01:03:34,840
<font color="#E5E5E5">first four kilobyte which is</font>

1139
01:03:32,260 --> 01:03:36,970
<font color="#E5E5E5">terrifically impossible but because it's</font>

1140
01:03:34,840 --> 01:03:38,770
so near<font color="#CCCCCC"> to an older version</font><font color="#E5E5E5"> I was able</font>

1141
01:03:36,970 --> 01:03:40,080
<font color="#E5E5E5">to fully reconstruct the first four</font>

1142
01:03:38,770 --> 01:03:43,230
<font color="#CCCCCC">kilobytes</font>

1143
01:03:40,080 --> 01:03:46,450
okay<font color="#E5E5E5"> thank you the signatures at the end</font>

1144
01:03:43,230 --> 01:03:49,570
if it's with<font color="#CCCCCC"> its on the device not only</font>

1145
01:03:46,450 --> 01:03:53,020
in the file<font color="#E5E5E5"> so it's no the signature is</font>

1146
01:03:49,570 --> 01:03:55,600
on<font color="#E5E5E5"> the</font><font color="#CCCCCC"> file at the end of the file so</font>

1147
01:03:53,020 --> 01:03:58,090
the signature was<font color="#E5E5E5"> not destroyed it was</font>

1148
01:03:55,600 --> 01:04:00,480
only the<font color="#E5E5E5"> first four kilobyte</font><font color="#CCCCCC"> of the code</font>

1149
01:03:58,090 --> 01:04:04,080
and<font color="#E5E5E5"> the head others were destroyed</font>

1150
01:04:00,480 --> 01:04:07,330
okay thanks now I got it thank you yeah

1151
01:04:04,080 --> 01:04:09,160
it is not the task to like give<font color="#CCCCCC"> it a</font>

1152
01:04:07,330 --> 01:04:13,900
fake firmware it's just like to repair

1153
01:04:09,160 --> 01:04:16,210
the old one to be able<font color="#E5E5E5"> to analyze it all</font>

1154
01:04:13,900 --> 01:04:18,520
<font color="#E5E5E5">right</font><font color="#CCCCCC"> and</font><font color="#E5E5E5"> any further questions</font>

1155
01:04:16,210 --> 01:04:21,120
probably<font color="#CCCCCC"> offstage thank you very much</font>

1156
01:04:18,520 --> 01:04:24,400
<font color="#CCCCCC">Stefan very interesting talk to wrap up</font>

1157
01:04:21,120 --> 01:04:26,730
the talk in this track for day<font color="#E5E5E5"> one thank</font>

1158
01:04:24,400 --> 01:04:26,730
you again

