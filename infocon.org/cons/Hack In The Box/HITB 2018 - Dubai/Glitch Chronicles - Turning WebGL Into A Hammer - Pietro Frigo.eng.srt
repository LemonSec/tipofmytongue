1
00:00:24,760 --> 00:00:31,480
okay<font color="#E5E5E5"> so hi guys</font><font color="#CCCCCC"> as</font><font color="#E5E5E5"> it</font><font color="#CCCCCC"> just said</font><font color="#E5E5E5"> I'm</font>

2
00:00:29,349 --> 00:00:34,750
<font color="#E5E5E5">Pietro and I'm from the</font><font color="#CCCCCC"> Busiek group in</font>

3
00:00:31,480 --> 00:00:37,329
<font color="#CCCCCC">Amsterdam and this talk today</font><font color="#E5E5E5"> is gonna</font>

4
00:00:34,750 --> 00:00:39,699
<font color="#CCCCCC">be</font><font color="#E5E5E5"> about a glitch and</font><font color="#CCCCCC"> if that</font><font color="#E5E5E5"> is good</font>

5
00:00:37,329 --> 00:00:42,370
<font color="#E5E5E5">Chronicles because it's not just</font><font color="#CCCCCC"> about</font><font color="#E5E5E5"> a</font>

6
00:00:39,699 --> 00:00:44,680
glitch which is<font color="#E5E5E5"> an browser exploit but</font>

7
00:00:42,370 --> 00:00:46,809
<font color="#E5E5E5">it's also how the whole story</font><font color="#CCCCCC"> bulb</font><font color="#E5E5E5"> while</font>

8
00:00:44,680 --> 00:00:49,089
working on<font color="#E5E5E5"> this and I work on this</font>

9
00:00:46,809 --> 00:00:51,040
project<font color="#E5E5E5"> with the</font><font color="#CCCCCC"> Christiano Burton cava</font>

10
00:00:49,089 --> 00:00:54,790
<font color="#CCCCCC">which are the</font><font color="#E5E5E5"> three main professors at</font>

11
00:00:51,040 --> 00:00:57,039
<font color="#E5E5E5">the musak group in Austin</font><font color="#CCCCCC"> so let's</font><font color="#E5E5E5"> start</font>

12
00:00:54,790 --> 00:01:00,760
<font color="#E5E5E5">with what glitch is in a couple of</font>

13
00:00:57,039 --> 00:01:04,750
sentences<font color="#E5E5E5"> so glitch is the first run or</font>

14
00:01:00,760 --> 00:01:06,610
exploit from JavaScript<font color="#CCCCCC"> on mobile so</font>

15
00:01:04,750 --> 00:01:09,580
before this research there was no proof

16
00:01:06,610 --> 00:01:12,910
of<font color="#E5E5E5"> a runner bit flips from the browser</font>

17
00:01:09,580 --> 00:01:14,800
<font color="#CCCCCC">unarmed</font><font color="#E5E5E5"> platform not</font><font color="#CCCCCC"> only is the first</font>

18
00:01:12,910 --> 00:01:17,679
one but<font color="#CCCCCC"> also the</font><font color="#E5E5E5"> fastest JavaScript</font>

19
00:01:14,800 --> 00:01:19,420
based drama exploit so previous research

20
00:01:17,679 --> 00:01:22,600
on this<font color="#E5E5E5"> kind of attacks was taking at</font>

21
00:01:19,420 --> 00:01:25,840
least<font color="#E5E5E5"> 45 minutes</font><font color="#CCCCCC"> to get bit flip</font><font color="#E5E5E5"> on</font>

22
00:01:22,600 --> 00:01:27,100
mobile on on the browser<font color="#E5E5E5"> whereas this</font>

23
00:01:25,840 --> 00:01:30,580
<font color="#E5E5E5">one takes less than two minutes to</font>

24
00:01:27,100 --> 00:01:31,869
exploit the browser<font color="#E5E5E5"> and finally which is</font>

25
00:01:30,580 --> 00:01:34,539
probably the main contribution of this

26
00:01:31,869 --> 00:01:37,420
work is that<font color="#E5E5E5"> glitch is</font><font color="#CCCCCC"> the first</font><font color="#E5E5E5"> GPU</font>

27
00:01:34,539 --> 00:01:38,590
accelerated the<font color="#CCCCCC"> runner bit</font><font color="#E5E5E5"> flips so we</font>

28
00:01:37,420 --> 00:01:40,270
<font color="#CCCCCC">actually show that it's possible to</font>

29
00:01:38,590 --> 00:01:42,250
trigger<font color="#CCCCCC"> these</font><font color="#E5E5E5"> blips not only using the</font>

30
00:01:40,270 --> 00:01:46,119
<font color="#E5E5E5">CPU but also using other means such as</font>

31
00:01:42,250 --> 00:01:49,119
<font color="#E5E5E5">the GPU so now</font><font color="#CCCCCC"> let's talk</font><font color="#E5E5E5"> a bit</font><font color="#CCCCCC"> with the</font>

32
00:01:46,119 --> 00:01:50,110
the<font color="#E5E5E5"> history of</font><font color="#CCCCCC"> these workers so let me</font>

33
00:01:49,119 --> 00:01:53,259
introduce<font color="#E5E5E5"> you</font><font color="#CCCCCC"> to the</font><font color="#E5E5E5"> Chronicles of</font>

34
00:01:50,110 --> 00:01:56,220
glitch so here is a bit<font color="#E5E5E5"> of a timeline</font>

35
00:01:53,259 --> 00:01:59,110
<font color="#CCCCCC">and</font><font color="#E5E5E5"> that little guy over there is me and</font>

36
00:01:56,220 --> 00:02:01,750
it was<font color="#CCCCCC"> a mid</font><font color="#E5E5E5"> 2016 I was looking for a</font>

37
00:01:59,110 --> 00:02:03,610
thesis for<font color="#CCCCCC"> my master</font><font color="#E5E5E5"> at the time I was</font>

38
00:02:01,750 --> 00:02:05,369
studying to<font color="#E5E5E5"> death always in the</font>

39
00:02:03,610 --> 00:02:07,479
Netherlands but different University and

40
00:02:05,369 --> 00:02:08,318
<font color="#E5E5E5">I went to a conference and there was a</font>

41
00:02:07,479 --> 00:02:09,609
<font color="#CCCCCC">Cristiano</font>

42
00:02:08,318 --> 00:02:11,980
one of the professor that eventually

43
00:02:09,610 --> 00:02:14,920
became my supervisor<font color="#CCCCCC"> that was talking</font>

44
00:02:11,980 --> 00:02:16,988
about<font color="#E5E5E5"> the ROM marimba flips and was not</font>

45
00:02:14,920 --> 00:02:18,819
quite aware<font color="#CCCCCC"> of any of that and</font><font color="#E5E5E5"> was</font>

46
00:02:16,989 --> 00:02:21,489
really<font color="#E5E5E5"> confused about everything was</font>

47
00:02:18,819 --> 00:02:23,589
talking about so I started studying<font color="#E5E5E5"> a</font>

48
00:02:21,489 --> 00:02:26,290
bit because I<font color="#E5E5E5"> want</font><font color="#CCCCCC"> to ask</font><font color="#E5E5E5"> him to</font><font color="#CCCCCC"> be my</font>

49
00:02:23,590 --> 00:02:28,900
<font color="#CCCCCC">advisor to start</font><font color="#E5E5E5"> the thesis with then</font>

50
00:02:26,290 --> 00:02:30,099
<font color="#E5E5E5">just started studying</font><font color="#CCCCCC"> Dilma and when you</font>

51
00:02:28,900 --> 00:02:32,110
think<font color="#CCCCCC"> about theorem this</font><font color="#E5E5E5"> is what you</font>

52
00:02:30,099 --> 00:02:33,700
<font color="#E5E5E5">think about right</font><font color="#CCCCCC"> so you have this team</font>

53
00:02:32,110 --> 00:02:35,769
modules that you put in your system<font color="#CCCCCC"> I</font>

54
00:02:33,700 --> 00:02:37,060
just<font color="#CCCCCC"> stopped them there and</font><font color="#E5E5E5"> their memory</font>

55
00:02:35,769 --> 00:02:39,370
enough for you<font color="#CCCCCC"> to</font>

56
00:02:37,060 --> 00:02:40,870
- welcome<font color="#E5E5E5"> where the</font><font color="#CCCCCC"> magic happens</font>

57
00:02:39,370 --> 00:02:44,500
actually<font color="#E5E5E5"> inside these ones which are the</font>

58
00:02:40,870 --> 00:02:46,390
chips and these chips<font color="#E5E5E5"> actually contain a</font>

59
00:02:44,500 --> 00:02:49,720
memory array<font color="#E5E5E5"> actually multiple of this</font>

60
00:02:46,390 --> 00:02:52,089
<font color="#E5E5E5">memory arrays and in these memories you</font>

61
00:02:49,720 --> 00:02:55,359
actually have<font color="#E5E5E5"> cells so every single</font><font color="#CCCCCC"> one</font>

62
00:02:52,090 --> 00:02:58,660
of these<font color="#E5E5E5"> it's a cell and</font><font color="#CCCCCC"> this cells</font>

63
00:02:55,360 --> 00:03:01,540
contains capacitors and<font color="#CCCCCC"> the capacitors</font>

64
00:02:58,660 --> 00:03:03,430
<font color="#CCCCCC">leak</font><font color="#E5E5E5"> charges over time so that's how the</font>

65
00:03:01,540 --> 00:03:05,769
capacitor<font color="#E5E5E5"> Wars they don't retain charges</font>

66
00:03:03,430 --> 00:03:07,690
forever<font color="#E5E5E5"> and as a consequence you</font>

67
00:03:05,769 --> 00:03:08,200
actually need to<font color="#E5E5E5"> refresh them every now</font>

68
00:03:07,690 --> 00:03:10,209
and then

69
00:03:08,200 --> 00:03:12,369
otherwise you<font color="#CCCCCC"> would lose your</font><font color="#E5E5E5"> data and</font>

70
00:03:10,209 --> 00:03:16,810
that's<font color="#E5E5E5"> not what you want to get out of</font>

71
00:03:12,370 --> 00:03:18,730
the room and the way Adam<font color="#CCCCCC"> Reed works is</font>

72
00:03:16,810 --> 00:03:20,140
basically you<font color="#E5E5E5"> would have data in memory</font>

73
00:03:18,730 --> 00:03:21,810
<font color="#E5E5E5">so let's say you want to read something</font>

74
00:03:20,140 --> 00:03:23,980
<font color="#E5E5E5">from</font><font color="#CCCCCC"> row two</font>

75
00:03:21,810 --> 00:03:25,870
let's say you want to read a<font color="#E5E5E5"> by from</font>

76
00:03:23,980 --> 00:03:27,488
there<font color="#E5E5E5"> what</font><font color="#CCCCCC"> you do is you activate the</font>

77
00:03:25,870 --> 00:03:29,290
row and activation is the process<font color="#E5E5E5"> of</font>

78
00:03:27,489 --> 00:03:32,110
bringing that<font color="#E5E5E5"> row to the row buffer</font>

79
00:03:29,290 --> 00:03:34,450
which<font color="#CCCCCC"> is the last row down here which</font>

80
00:03:32,110 --> 00:03:37,599
serves as a cache<font color="#CCCCCC"> basically for a for</font>

81
00:03:34,450 --> 00:03:39,640
the<font color="#E5E5E5"> for</font><font color="#CCCCCC"> datum so once you</font><font color="#E5E5E5"> get to data</font>

82
00:03:37,599 --> 00:03:43,450
there you can read it out from there<font color="#CCCCCC"> and</font>

83
00:03:39,640 --> 00:03:45,100
bring it to the CPU<font color="#CCCCCC"> now reading from a</font>

84
00:03:43,450 --> 00:03:46,660
capacitor means discharging<font color="#CCCCCC"> the</font>

85
00:03:45,100 --> 00:03:49,358
capacitor so the data it's in the

86
00:03:46,660 --> 00:03:51,010
capacitor is lost for now which means

87
00:03:49,359 --> 00:03:53,620
<font color="#CCCCCC">that if you want to save this data</font><font color="#E5E5E5"> and</font>

88
00:03:51,010 --> 00:03:55,390
<font color="#E5E5E5">not lose</font><font color="#CCCCCC"> it for the next usage</font><font color="#E5E5E5"> you need</font>

89
00:03:53,620 --> 00:03:57,519
to<font color="#CCCCCC"> actually restore</font><font color="#E5E5E5"> it back</font><font color="#CCCCCC"> to the row</font>

90
00:03:55,390 --> 00:03:59,619
where it was<font color="#E5E5E5"> and this action is called</font>

91
00:03:57,519 --> 00:04:01,630
<font color="#CCCCCC">the pre charge so every time you read</font>

92
00:03:59,620 --> 00:04:05,319
something<font color="#CCCCCC"> from there you need</font><font color="#E5E5E5"> to at the</font>

93
00:04:01,630 --> 00:04:07,120
end<font color="#CCCCCC"> close the row and pre charge it</font><font color="#E5E5E5"> now</font>

94
00:04:05,319 --> 00:04:09,339
what the research<font color="#E5E5E5"> I've discovered is</font>

95
00:04:07,120 --> 00:04:11,500
that if you actually<font color="#E5E5E5"> perform</font><font color="#CCCCCC"> specific</font>

96
00:04:09,340 --> 00:04:13,900
access pattern<font color="#E5E5E5"> in theorem you</font><font color="#CCCCCC"> can</font>

97
00:04:11,500 --> 00:04:16,720
<font color="#CCCCCC">actually cause some</font><font color="#E5E5E5"> disturbance errors</font>

98
00:04:13,900 --> 00:04:18,548
<font color="#E5E5E5">inside the theorem itself so what the</font>

99
00:04:16,720 --> 00:04:20,829
discovery is<font color="#CCCCCC"> that if you choose</font><font color="#E5E5E5"> to</font>

100
00:04:18,548 --> 00:04:23,200
aggressor<font color="#E5E5E5"> rows with a victim row in the</font>

101
00:04:20,829 --> 00:04:24,940
<font color="#E5E5E5">middle and you access the aggressor rows</font>

102
00:04:23,200 --> 00:04:28,270
fast enough<font color="#CCCCCC"> which means do you activate</font>

103
00:04:24,940 --> 00:04:30,280
them fast enough<font color="#E5E5E5"> some charges in the</font>

104
00:04:28,270 --> 00:04:33,940
victim row<font color="#E5E5E5"> some of the cells may start</font>

105
00:04:30,280 --> 00:04:36,010
leaking charges<font color="#E5E5E5"> over time and soon</font>

106
00:04:33,940 --> 00:04:38,530
enough you may get a corruption<font color="#E5E5E5"> in this</font>

107
00:04:36,010 --> 00:04:40,860
data so you can trigger a bit<font color="#CCCCCC"> sleeper</font>

108
00:04:38,530 --> 00:04:42,780
<font color="#E5E5E5">without actually accessing the data</font>

109
00:04:40,860 --> 00:04:44,550
and this is quite important for<font color="#E5E5E5"> two</font>

110
00:04:42,780 --> 00:04:46,520
<font color="#CCCCCC">reasons</font><font color="#E5E5E5"> first of all you break the</font>

111
00:04:44,550 --> 00:04:49,349
property of integrity<font color="#E5E5E5"> of this data and</font>

112
00:04:46,520 --> 00:04:50,938
<font color="#CCCCCC">as a consequence</font><font color="#E5E5E5"> you don't get any more</font>

113
00:04:49,349 --> 00:04:52,830
data you expect from theorem so you

114
00:04:50,939 --> 00:04:55,050
<font color="#E5E5E5">wouldn't expect the data did</font><font color="#CCCCCC"> syndrome</font>

115
00:04:52,830 --> 00:04:58,198
gets compromised without really being

116
00:04:55,050 --> 00:04:59,460
accessed<font color="#CCCCCC"> and second of all the the which</font>

117
00:04:58,199 --> 00:05:02,280
is<font color="#E5E5E5"> the most important thing</font><font color="#CCCCCC"> of</font><font color="#E5E5E5"> this</font>

118
00:04:59,460 --> 00:05:05,128
phenomenon is<font color="#CCCCCC"> that</font><font color="#E5E5E5"> it's reproducible so</font>

119
00:05:02,280 --> 00:05:07,080
once you find<font color="#E5E5E5"> a bit flip</font><font color="#CCCCCC"> you can use it</font>

120
00:05:05,129 --> 00:05:09,840
later on<font color="#E5E5E5"> which means that usually</font><font color="#CCCCCC"> the</font>

121
00:05:07,080 --> 00:05:11,909
way<font color="#CCCCCC"> this attack</font><font color="#E5E5E5"> works is that you just</font>

122
00:05:09,840 --> 00:05:14,008
allocate a<font color="#E5E5E5"> lot of memory you look for</font>

123
00:05:11,909 --> 00:05:16,379
<font color="#CCCCCC">bit slips in</font><font color="#E5E5E5"> these DM chunks that you</font>

124
00:05:14,009 --> 00:05:18,029
<font color="#CCCCCC">add once you find the business and you</font>

125
00:05:16,379 --> 00:05:19,560
can reuse<font color="#E5E5E5"> later</font><font color="#CCCCCC"> on for an exploit you</font>

126
00:05:18,029 --> 00:05:24,029
release that<font color="#E5E5E5"> part of memory so they can</font>

127
00:05:19,560 --> 00:05:25,860
reuse<font color="#E5E5E5"> it for for the exploit itself so</font>

128
00:05:24,029 --> 00:05:28,259
back to<font color="#E5E5E5"> the timeline then I was studying</font>

129
00:05:25,860 --> 00:05:30,270
<font color="#E5E5E5">a bit about this</font><font color="#CCCCCC"> rom nephron and how it</font>

130
00:05:28,259 --> 00:05:33,360
was exploited<font color="#E5E5E5"> and it turns out it was</font>

131
00:05:30,270 --> 00:05:35,698
<font color="#CCCCCC">actually pretty recent as a research</font>

132
00:05:33,360 --> 00:05:38,279
topic<font color="#CCCCCC"> so the first paper on this topic</font>

133
00:05:35,699 --> 00:05:40,830
was in 2014<font color="#CCCCCC"> what we were showing it was</font>

134
00:05:38,279 --> 00:05:45,180
possible<font color="#CCCCCC"> to actually</font><font color="#E5E5E5"> induce these this</font>

135
00:05:40,830 --> 00:05:48,300
<font color="#CCCCCC">falls and then in</font><font color="#E5E5E5"> 2015</font>

136
00:05:45,180 --> 00:05:51,330
<font color="#CCCCCC">Seabourn from Google project zero and do</font>

137
00:05:48,300 --> 00:05:53,400
<font color="#CCCCCC">lien if I hope and say in the name</font>

138
00:05:51,330 --> 00:05:56,279
correctly<font color="#E5E5E5"> they show the first</font><font color="#CCCCCC"> route</font>

139
00:05:53,400 --> 00:05:57,750
<font color="#E5E5E5">exploit on using the</font><font color="#CCCCCC"> grammar so what</font>

140
00:05:56,279 --> 00:06:00,479
<font color="#E5E5E5">they were doing were flipping bits in</font>

141
00:05:57,750 --> 00:06:02,610
the page<font color="#E5E5E5"> table entries so by flipping</font>

142
00:06:00,479 --> 00:06:04,560
this bit they could basically<font color="#E5E5E5"> access any</font>

143
00:06:02,610 --> 00:06:09,330
memory they wanted in the system then

144
00:06:04,560 --> 00:06:10,680
having<font color="#CCCCCC"> with privileges afterwards some</font>

145
00:06:09,330 --> 00:06:12,479
people brought it to the next level

146
00:06:10,680 --> 00:06:14,009
<font color="#E5E5E5">showing it was possible to do it also</font>

147
00:06:12,479 --> 00:06:15,240
<font color="#CCCCCC">from JavaScript so they were showing</font>

148
00:06:14,009 --> 00:06:17,819
that<font color="#CCCCCC"> it was</font><font color="#E5E5E5"> possible to trigger</font><font color="#CCCCCC"> bit</font>

149
00:06:15,240 --> 00:06:20,159
flips from the browser<font color="#CCCCCC"> at the</font><font color="#E5E5E5"> same time</font>

150
00:06:17,819 --> 00:06:22,710
also<font color="#E5E5E5"> Eric</font><font color="#CCCCCC"> Bozeman from our group</font><font color="#E5E5E5"> was</font>

151
00:06:20,159 --> 00:06:24,569
<font color="#CCCCCC">working on this project called d2 past</font>

152
00:06:22,710 --> 00:06:26,849
machina<font color="#CCCCCC"> which was using</font><font color="#E5E5E5"> again</font><font color="#CCCCCC"> these</font>

153
00:06:24,569 --> 00:06:31,490
<font color="#E5E5E5">beliefs to break out of the Microsoft</font>

154
00:06:26,849 --> 00:06:34,740
edge sandbox<font color="#CCCCCC"> and also</font><font color="#E5E5E5"> cover one of the</font>

155
00:06:31,490 --> 00:06:36,000
authors of<font color="#CCCCCC"> also</font><font color="#E5E5E5"> this work was working at</font>

156
00:06:34,740 --> 00:06:38,909
the same time on break in the cloud

157
00:06:36,000 --> 00:06:43,319
<font color="#E5E5E5">using also these beliefs so it was just</font>

158
00:06:38,909 --> 00:06:45,599
compromising some RSA keys in<font color="#CCCCCC"> built on</font>

159
00:06:43,319 --> 00:06:46,860
machines<font color="#E5E5E5"> to have control over and</font><font color="#CCCCCC"> the</font>

160
00:06:45,599 --> 00:06:50,399
different<font color="#E5E5E5"> machine just by triggering a</font>

161
00:06:46,860 --> 00:06:52,649
bit flip so I was just<font color="#CCCCCC"> making a recap</font>

162
00:06:50,399 --> 00:06:54,409
effort<font color="#CCCCCC"> ok so you have a root exploit to</font>

163
00:06:52,649 --> 00:06:56,989
<font color="#E5E5E5">JavaScript exploit one</font>

164
00:06:54,409 --> 00:06:58,849
cloud<font color="#E5E5E5"> and</font><font color="#CCCCCC"> I thought well the next step</font>

165
00:06:56,989 --> 00:07:02,409
of<font color="#CCCCCC"> course is just looking</font><font color="#E5E5E5"> at the phones</font>

166
00:06:58,849 --> 00:07:04,998
so can<font color="#E5E5E5"> you actually do it</font><font color="#CCCCCC"> on the phone</font>

167
00:07:02,409 --> 00:07:06,259
so I<font color="#E5E5E5"> pitched the idea to crystianna</font><font color="#CCCCCC"> and</font>

168
00:07:04,999 --> 00:07:06,919
<font color="#CCCCCC">Cristian was like well you came a bit</font>

169
00:07:06,259 --> 00:07:08,539
too late

170
00:07:06,919 --> 00:07:10,609
actually there is<font color="#CCCCCC"> Victor another guy</font>

171
00:07:08,539 --> 00:07:12,429
from from the group<font color="#E5E5E5"> that just did this</font>

172
00:07:10,610 --> 00:07:14,689
<font color="#E5E5E5">and we're publishing</font><font color="#CCCCCC"> our paper</font><font color="#E5E5E5"> about it</font>

173
00:07:12,429 --> 00:07:17,330
<font color="#E5E5E5">which shows you can actually route</font>

174
00:07:14,689 --> 00:07:20,779
deterministically<font color="#E5E5E5"> Android phones using</font>

175
00:07:17,330 --> 00:07:24,050
<font color="#E5E5E5">runner and so forth</font><font color="#CCCCCC"> ok</font><font color="#E5E5E5"> cool</font>

176
00:07:20,779 --> 00:07:26,239
I still have anything<font color="#CCCCCC"> to work on but</font>

177
00:07:24,050 --> 00:07:27,889
<font color="#E5E5E5">then well when the paper came out Victor</font>

178
00:07:26,239 --> 00:07:30,409
was bragging on Twitter<font color="#E5E5E5"> about his a</font>

179
00:07:27,889 --> 00:07:33,409
super awesome research and<font color="#CCCCCC"> rightly so</font>

180
00:07:30,409 --> 00:07:34,909
because it was a<font color="#E5E5E5"> really</font><font color="#CCCCCC"> cool project and</font>

181
00:07:33,409 --> 00:07:36,679
then he was saying well I<font color="#E5E5E5"> wouldn't be</font>

182
00:07:34,909 --> 00:07:39,829
surprised<font color="#E5E5E5"> if you could put this one also</font>

183
00:07:36,679 --> 00:07:41,448
<font color="#E5E5E5">from the browser and this was a bold</font>

184
00:07:39,829 --> 00:07:43,849
statement because it's actually<font color="#CCCCCC"> not that</font>

185
00:07:41,449 --> 00:07:45,939
<font color="#CCCCCC">easy and</font><font color="#E5E5E5"> people had done it on the</font><font color="#CCCCCC"> on</font>

186
00:07:43,849 --> 00:07:48,409
<font color="#CCCCCC">x86</font><font color="#E5E5E5"> already knew it was not that easy</font><font color="#CCCCCC"> so</font>

187
00:07:45,939 --> 00:07:50,209
<font color="#CCCCCC">the garage pulled him out on his bluff</font>

188
00:07:48,409 --> 00:07:53,239
<font color="#E5E5E5">basically and he said well I would love</font>

189
00:07:50,209 --> 00:07:54,829
<font color="#E5E5E5">to see it happen</font><font color="#CCCCCC"> so challenge accepted I</font>

190
00:07:53,239 --> 00:07:58,308
had something<font color="#E5E5E5"> to work on and it was</font>

191
00:07:54,829 --> 00:07:59,719
actually<font color="#CCCCCC"> a really</font><font color="#E5E5E5"> challenging task so</font>

192
00:07:58,309 --> 00:08:03,219
sort of looking<font color="#E5E5E5"> in how you actually</font>

193
00:07:59,719 --> 00:08:05,899
<font color="#E5E5E5">develop</font><font color="#CCCCCC"> these this kind of attacks</font><font color="#E5E5E5"> and</font>

194
00:08:03,219 --> 00:08:08,569
<font color="#E5E5E5">when you think</font><font color="#CCCCCC"> about any</font><font color="#E5E5E5"> kind of attacks</font>

195
00:08:05,899 --> 00:08:11,119
<font color="#CCCCCC">usually you start</font><font color="#E5E5E5"> by some attacker</font>

196
00:08:08,569 --> 00:08:12,769
primitives and<font color="#E5E5E5"> in the case</font><font color="#CCCCCC"> of</font><font color="#E5E5E5"> runner the</font>

197
00:08:11,119 --> 00:08:17,269
previous that you need<font color="#E5E5E5"> are first of all</font>

198
00:08:12,769 --> 00:08:19,099
into<font color="#E5E5E5"> a fast memory</font><font color="#CCCCCC"> axis so the problem</font>

199
00:08:17,269 --> 00:08:20,809
here<font color="#CCCCCC"> is that</font><font color="#E5E5E5"> when</font><font color="#CCCCCC"> you actually</font><font color="#E5E5E5"> access to</font>

200
00:08:19,099 --> 00:08:22,688
the frontier and you don't<font color="#E5E5E5"> always want</font>

201
00:08:20,809 --> 00:08:26,360
<font color="#CCCCCC">to go</font><font color="#E5E5E5"> to the</font><font color="#CCCCCC"> run because</font><font color="#E5E5E5"> it's very slow</font>

202
00:08:22,689 --> 00:08:27,619
so what the CPU vendors have done<font color="#E5E5E5"> since</font>

203
00:08:26,360 --> 00:08:29,419
forever<font color="#E5E5E5"> actually it's not something new</font>

204
00:08:27,619 --> 00:08:32,360
<font color="#E5E5E5">they put the CPU caches in the middle</font>

205
00:08:29,419 --> 00:08:34,338
and memory access coming from dear<font color="#CCCCCC"> I</font>

206
00:08:32,360 --> 00:08:37,610
<font color="#E5E5E5">usually takes around 100 nanoseconds</font><font color="#CCCCCC"> or</font>

207
00:08:34,339 --> 00:08:40,610
even more<font color="#CCCCCC"> whereas a memory access coming</font>

208
00:08:37,610 --> 00:08:42,680
from the l1<font color="#CCCCCC"> cache it takes around 6</font>

209
00:08:40,610 --> 00:08:43,969
cycles<font color="#E5E5E5"> so not mistaken so it's quite</font>

210
00:08:42,679 --> 00:08:45,050
different<font color="#CCCCCC"> than latency that</font><font color="#E5E5E5"> you get</font>

211
00:08:43,969 --> 00:08:47,569
between the two<font color="#CCCCCC"> different memory</font>

212
00:08:45,050 --> 00:08:50,449
accesses the problem<font color="#CCCCCC"> here is that</font><font color="#E5E5E5"> if you</font>

213
00:08:47,569 --> 00:08:52,009
<font color="#E5E5E5">want to honor you will go to D run the</font>

214
00:08:50,449 --> 00:08:54,889
first<font color="#E5E5E5"> time so it</font><font color="#CCCCCC"> checked the caches then</font>

215
00:08:52,009 --> 00:08:56,029
it will go to<font color="#E5E5E5"> D run and then it will</font>

216
00:08:54,889 --> 00:09:00,230
bring<font color="#CCCCCC"> the data to the cache</font><font color="#E5E5E5"> before</font>

217
00:08:56,029 --> 00:09:01,910
giving it to you<font color="#CCCCCC"> to the CPU and this</font>

218
00:09:00,230 --> 00:09:03,680
doesn't<font color="#CCCCCC"> help because</font><font color="#E5E5E5"> you want to access</font>

219
00:09:01,910 --> 00:09:05,089
<font color="#E5E5E5">data from D enough from the cache so you</font>

220
00:09:03,680 --> 00:09:08,089
need to have some<font color="#E5E5E5"> tools</font><font color="#CCCCCC"> to remove it</font>

221
00:09:05,089 --> 00:09:10,999
from there<font color="#E5E5E5"> and so what they usually do</font>

222
00:09:08,089 --> 00:09:15,459
is to<font color="#E5E5E5"> use the</font><font color="#CCCCCC"> co</font><font color="#E5E5E5"> flash instruction in</font>

223
00:09:10,999 --> 00:09:17,240
native programs<font color="#E5E5E5"> and this is a</font>

224
00:09:15,459 --> 00:09:19,399
instruction that allows you<font color="#E5E5E5"> to basically</font>

225
00:09:17,240 --> 00:09:22,220
remove<font color="#E5E5E5"> the data from the cache</font><font color="#CCCCCC"> so you</font>

226
00:09:19,399 --> 00:09:23,629
<font color="#E5E5E5">just provide an address and the co flash</font>

227
00:09:22,220 --> 00:09:25,370
instruction we just remove the cache

228
00:09:23,629 --> 00:09:29,600
line<font color="#CCCCCC"> from the cache</font><font color="#E5E5E5"> so it can access it</font>

229
00:09:25,370 --> 00:09:31,279
again<font color="#E5E5E5"> from</font><font color="#CCCCCC"> atom the next time now</font>

230
00:09:29,600 --> 00:09:33,860
clearly this is not<font color="#CCCCCC"> available on the</font>

231
00:09:31,279 --> 00:09:36,740
browser<font color="#CCCCCC"> so what they invented for</font>

232
00:09:33,860 --> 00:09:38,269
browser<font color="#E5E5E5"> was to use</font><font color="#CCCCCC"> eviction set this</font><font color="#E5E5E5"> is</font>

233
00:09:36,740 --> 00:09:41,329
<font color="#E5E5E5">the technique that</font><font color="#CCCCCC"> is already</font><font color="#E5E5E5"> known for</font>

234
00:09:38,269 --> 00:09:43,399
a cache attacks so they implement the

235
00:09:41,329 --> 00:09:45,498
<font color="#E5E5E5">same thing now for forerunner attacks</font>

236
00:09:43,399 --> 00:09:47,660
<font color="#E5E5E5">and the way this works is basically you</font>

237
00:09:45,499 --> 00:09:50,629
<font color="#CCCCCC">start accessing a bunch of random</font>

238
00:09:47,660 --> 00:09:52,639
<font color="#CCCCCC">addresses from memory which</font><font color="#E5E5E5"> I mean</font>

239
00:09:50,629 --> 00:09:54,050
they're not quite random but some<font color="#E5E5E5"> others</font>

240
00:09:52,639 --> 00:09:57,199
that<font color="#E5E5E5"> you can use to remove data from the</font>

241
00:09:54,050 --> 00:09:58,939
cache<font color="#E5E5E5"> and you</font><font color="#CCCCCC"> fill up the cache and</font>

242
00:09:57,199 --> 00:10:02,209
three at one point this data gets

243
00:09:58,939 --> 00:10:04,449
<font color="#E5E5E5">removed and you can</font><font color="#CCCCCC"> access</font><font color="#E5E5E5"> it</font><font color="#CCCCCC"> again now</font>

244
00:10:02,209 --> 00:10:06,439
clearly<font color="#E5E5E5"> you need to do this quite fast</font>

245
00:10:04,449 --> 00:10:11,479
because otherwise you won't<font color="#CCCCCC"> be</font><font color="#E5E5E5"> able to</font>

246
00:10:06,439 --> 00:10:13,399
to get<font color="#E5E5E5"> your bishops the second primitive</font>

247
00:10:11,480 --> 00:10:15,860
instead is you need<font color="#E5E5E5"> to have a contiguous</font>

248
00:10:13,399 --> 00:10:17,329
<font color="#E5E5E5">memory to trigger this</font><font color="#CCCCCC"> bit</font><font color="#E5E5E5"> please</font>

249
00:10:15,860 --> 00:10:19,220
because as we<font color="#CCCCCC"> mentioned that</font><font color="#E5E5E5"> you want to</font>

250
00:10:17,329 --> 00:10:21,079
have<font color="#E5E5E5"> a three rows three contiguous rows</font>

251
00:10:19,220 --> 00:10:25,220
in memory so this needs to<font color="#CCCCCC"> be adjacent</font>

252
00:10:21,079 --> 00:10:27,349
<font color="#E5E5E5">and this is not a hard requirement you</font>

253
00:10:25,220 --> 00:10:29,540
could also do<font color="#E5E5E5"> it with the single sided</font>

254
00:10:27,350 --> 00:10:31,069
Rama where you<font color="#CCCCCC"> actually just</font><font color="#E5E5E5"> under one</font>

255
00:10:29,540 --> 00:10:34,129
row and then<font color="#E5E5E5"> you get these</font><font color="#CCCCCC"> leaves in the</font>

256
00:10:31,069 --> 00:10:36,259
two neighboring ones but this is much

257
00:10:34,129 --> 00:10:38,209
more powerful<font color="#E5E5E5"> so usually</font><font color="#CCCCCC"> people opted</font>

258
00:10:36,259 --> 00:10:40,610
for this version<font color="#E5E5E5"> of your honor because</font>

259
00:10:38,209 --> 00:10:43,910
you get more bit flips and more control

260
00:10:40,610 --> 00:10:46,160
<font color="#CCCCCC">over them the problem here is that when</font>

261
00:10:43,910 --> 00:10:47,719
<font color="#CCCCCC">you locate memory it's more complicated</font>

262
00:10:46,160 --> 00:10:49,389
in what you expect is not just you get

263
00:10:47,720 --> 00:10:52,819
the contiguous rows after your locator

264
00:10:49,389 --> 00:10:53,899
some kilobytes of memory<font color="#E5E5E5"> so what happens</font>

265
00:10:52,819 --> 00:10:56,120
for<font color="#E5E5E5"> instance when you do a</font><font color="#CCCCCC"> mal look up</font>

266
00:10:53,899 --> 00:10:59,749
<font color="#E5E5E5">20 kilobytes is that you locate a bunch</font>

267
00:10:56,120 --> 00:11:01,519
of pages<font color="#E5E5E5"> in</font><font color="#CCCCCC"> your beautiful memory and</font>

268
00:10:59,749 --> 00:11:04,129
then this<font color="#E5E5E5"> pages then gets translated</font>

269
00:11:01,519 --> 00:11:07,639
<font color="#CCCCCC">into some physical pages in physical</font>

270
00:11:04,129 --> 00:11:09,769
<font color="#E5E5E5">memory</font><font color="#CCCCCC"> and while</font><font color="#E5E5E5"> that the one in</font><font color="#CCCCCC"> virtual</font>

271
00:11:07,639 --> 00:11:10,670
<font color="#E5E5E5">memory may look contiguous actually in</font>

272
00:11:09,769 --> 00:11:12,579
the physical<font color="#E5E5E5"> address space</font>

273
00:11:10,670 --> 00:11:15,259
these are scattered around they're not

274
00:11:12,579 --> 00:11:16,758
exactly contiguous and this depends<font color="#CCCCCC"> on</font>

275
00:11:15,259 --> 00:11:19,819
the allocator so the locator will try to

276
00:11:16,759 --> 00:11:21,649
give you<font color="#CCCCCC"> the first</font><font color="#E5E5E5"> available page so it</font>

277
00:11:19,819 --> 00:11:23,449
will try<font color="#CCCCCC"> to avoid fragmentation and just</font>

278
00:11:21,649 --> 00:11:27,350
provided<font color="#CCCCCC"> with the smallest chunk</font>

279
00:11:23,449 --> 00:11:29,029
available at that<font color="#E5E5E5"> time</font><font color="#CCCCCC"> and then after</font>

280
00:11:27,350 --> 00:11:31,100
this there<font color="#E5E5E5"> is also another step</font><font color="#CCCCCC"> so</font><font color="#E5E5E5"> you</font>

281
00:11:29,029 --> 00:11:34,339
have the<font color="#CCCCCC"> memory controller</font><font color="#E5E5E5"> that decides</font>

282
00:11:31,100 --> 00:11:35,689
were to map it to<font color="#E5E5E5"> datum for you so</font>

283
00:11:34,339 --> 00:11:37,999
you'll<font color="#E5E5E5"> have quite a few steps of</font>

284
00:11:35,689 --> 00:11:41,149
indirection that provides you with these

285
00:11:37,999 --> 00:11:43,459
contiguous<font color="#CCCCCC"> rows</font><font color="#E5E5E5"> and earlier we mentioned</font>

286
00:11:41,149 --> 00:11:45,470
<font color="#CCCCCC">that the theorem</font><font color="#E5E5E5"> is like this but</font>

287
00:11:43,459 --> 00:11:48,258
actually theorem is a much more

288
00:11:45,470 --> 00:11:50,480
complicated<font color="#E5E5E5"> than this but</font><font color="#CCCCCC"> so you have</font>

289
00:11:48,259 --> 00:11:52,850
<font color="#E5E5E5">actually the CPU which is connected to</font>

290
00:11:50,480 --> 00:11:55,249
multiple<font color="#CCCCCC"> channels</font><font color="#E5E5E5"> and in the channels</font>

291
00:11:52,850 --> 00:11:57,709
your multiple Dean's<font color="#E5E5E5"> and then every team</font>

292
00:11:55,249 --> 00:12:00,619
has multiple ranks<font color="#CCCCCC"> so the front and the</font>

293
00:11:57,709 --> 00:12:03,709
back<font color="#CCCCCC"> of</font><font color="#E5E5E5"> diorama will have both sides</font>

294
00:12:00,619 --> 00:12:05,869
<font color="#CCCCCC">ships</font><font color="#E5E5E5"> containing data and then all the</font>

295
00:12:03,709 --> 00:12:08,959
<font color="#E5E5E5">chips will have multiple banks which are</font>

296
00:12:05,869 --> 00:12:10,519
the<font color="#CCCCCC"> one that we showed earlier made this</font>

297
00:12:08,959 --> 00:12:13,670
way so the memory array is<font color="#E5E5E5"> actually</font>

298
00:12:10,519 --> 00:12:15,949
inside the banks and the banks<font color="#CCCCCC"> pan</font><font color="#E5E5E5"> over</font>

299
00:12:13,670 --> 00:12:18,229
the all<font color="#E5E5E5"> the chips</font><font color="#CCCCCC"> so</font><font color="#E5E5E5"> you</font><font color="#CCCCCC"> will</font><font color="#E5E5E5"> have like</font>

300
00:12:15,949 --> 00:12:21,378
an array buffer no<font color="#CCCCCC"> knowledge chips</font><font color="#E5E5E5"> that</font>

301
00:12:18,230 --> 00:12:24,949
row buffer in all the chips<font color="#CCCCCC"> that we</font>

302
00:12:21,379 --> 00:12:27,499
provided with the<font color="#CCCCCC"> datum so</font><font color="#E5E5E5"> how do you</font>

303
00:12:24,949 --> 00:12:29,839
<font color="#E5E5E5">get</font><font color="#CCCCCC"> contiguous memory well the solution</font>

304
00:12:27,499 --> 00:12:34,309
<font color="#E5E5E5">usually was to use transparent huge</font>

305
00:12:29,839 --> 00:12:38,300
<font color="#E5E5E5">pages and this is a way</font><font color="#CCCCCC"> to optimize</font><font color="#E5E5E5"> the</font>

306
00:12:34,309 --> 00:12:39,769
address oscillations<font color="#CCCCCC"> so what the what</font>

307
00:12:38,300 --> 00:12:43,219
<font color="#CCCCCC">the operating system will do if</font><font color="#E5E5E5"> you</font>

308
00:12:39,769 --> 00:12:44,629
locate a 3 megabyte page for instance<font color="#CCCCCC"> it</font>

309
00:12:43,220 --> 00:12:46,579
will try to provide<font color="#E5E5E5"> you with</font><font color="#CCCCCC"> the</font><font color="#E5E5E5"> a big</font>

310
00:12:44,629 --> 00:12:50,300
chunk<font color="#E5E5E5"> so it doesn't have to have a page</font>

311
00:12:46,579 --> 00:12:52,399
tables for<font color="#E5E5E5"> all the 4 kilobyte pages so</font>

312
00:12:50,300 --> 00:12:54,410
in the<font color="#E5E5E5"> physical address in the physical</font>

313
00:12:52,399 --> 00:12:56,269
address<font color="#CCCCCC"> space what you will</font><font color="#E5E5E5"> see is again</font>

314
00:12:54,410 --> 00:12:58,939
you will have<font color="#E5E5E5"> some scattered pages of 4</font>

315
00:12:56,269 --> 00:13:01,639
kilobytes<font color="#CCCCCC"> but then since</font><font color="#E5E5E5"> you have</font><font color="#CCCCCC"> 3</font>

316
00:12:58,939 --> 00:13:04,639
<font color="#E5E5E5">megabytes you</font><font color="#CCCCCC"> can also</font><font color="#E5E5E5"> provide a huge</font>

317
00:13:01,639 --> 00:13:07,819
page which is the big<font color="#E5E5E5"> one and this one</font>

318
00:13:04,639 --> 00:13:09,470
is of<font color="#E5E5E5"> 2 megabytes of size now when you</font>

319
00:13:07,819 --> 00:13:11,269
control 2 megabytes<font color="#E5E5E5"> of the physical</font>

320
00:13:09,470 --> 00:13:13,370
<font color="#CCCCCC">address space</font><font color="#E5E5E5"> you'll have more</font>

321
00:13:11,269 --> 00:13:16,490
fine-grained control over multiple rows

322
00:13:13,370 --> 00:13:17,899
on theorem so you basically can<font color="#E5E5E5"> get</font>

323
00:13:16,490 --> 00:13:20,740
addresses<font color="#E5E5E5"> that will not do the same</font>

324
00:13:17,899 --> 00:13:24,110
<font color="#CCCCCC">channel same team same rank same</font><font color="#E5E5E5"> bank</font>

325
00:13:20,740 --> 00:13:26,269
and then with<font color="#E5E5E5"> this you can</font><font color="#CCCCCC"> actually</font>

326
00:13:24,110 --> 00:13:30,049
perform more accesses that will trigger

327
00:13:26,269 --> 00:13:32,679
the<font color="#CCCCCC"> biffle's now this is all cool but</font>

328
00:13:30,049 --> 00:13:35,209
this is the way we're doing<font color="#E5E5E5"> it on x86</font>

329
00:13:32,679 --> 00:13:37,280
<font color="#E5E5E5">how does this work on arm</font>

330
00:13:35,210 --> 00:13:39,650
well<font color="#CCCCCC"> she'll flash it's a privileged</font>

331
00:13:37,280 --> 00:13:41,030
instruction<font color="#CCCCCC"> so we</font><font color="#E5E5E5"> cannot use it and we</font>

332
00:13:39,650 --> 00:13:42,829
couldn't<font color="#E5E5E5"> use</font><font color="#CCCCCC"> it anyway because</font><font color="#E5E5E5"> I want to</font>

333
00:13:41,030 --> 00:13:47,569
<font color="#E5E5E5">do it</font><font color="#CCCCCC"> from</font><font color="#E5E5E5"> the browser so this is not</font>

334
00:13:42,830 --> 00:13:50,420
really<font color="#CCCCCC"> opening up</font><font color="#E5E5E5"> an eviction sets also</font>

335
00:13:47,570 --> 00:13:54,110
we're not usable from JavaScript<font color="#E5E5E5"> from</font><font color="#CCCCCC"> an</font>

336
00:13:50,420 --> 00:13:56,150
arm<font color="#E5E5E5"> and Victor that did the drummer</font>

337
00:13:54,110 --> 00:13:59,480
project<font color="#CCCCCC"> fried at the beginning to get</font>

338
00:13:56,150 --> 00:14:00,560
business using eviction sets and what

339
00:13:59,480 --> 00:14:03,470
they discover is<font color="#CCCCCC"> that the cache</font><font color="#E5E5E5"> is</font>

340
00:14:00,560 --> 00:14:05,560
<font color="#CCCCCC">online platforms are too large and the</font>

341
00:14:03,470 --> 00:14:08,540
implementer random replacement policy

342
00:14:05,560 --> 00:14:09,890
and what does this<font color="#E5E5E5"> mean well for our</font>

343
00:14:08,540 --> 00:14:12,860
attack means that if you<font color="#E5E5E5"> want to access</font>

344
00:14:09,890 --> 00:14:14,930
<font color="#E5E5E5">the the</font><font color="#CCCCCC"> to aggressor roses</font><font color="#E5E5E5"> so</font><font color="#CCCCCC"> row n</font>

345
00:14:12,860 --> 00:14:17,540
minus<font color="#CCCCCC"> one</font><font color="#E5E5E5"> you will bring to the cache</font>

346
00:14:14,930 --> 00:14:20,180
then you will do<font color="#E5E5E5"> the same for</font><font color="#CCCCCC"> n plus</font><font color="#E5E5E5"> one</font>

347
00:14:17,540 --> 00:14:21,740
and bring<font color="#E5E5E5"> it to the cache and</font><font color="#CCCCCC"> we just</font>

348
00:14:20,180 --> 00:14:24,770
place like in random places within the

349
00:14:21,740 --> 00:14:29,000
cache that<font color="#CCCCCC"> now we start evicting so you</font>

350
00:14:24,770 --> 00:14:30,590
access a lot of<font color="#E5E5E5"> memory</font><font color="#CCCCCC"> and sometimes</font>

351
00:14:29,000 --> 00:14:32,150
some data<font color="#CCCCCC"> that you</font><font color="#E5E5E5"> just use for</font>

352
00:14:30,590 --> 00:14:34,280
addiction with a big data<font color="#CCCCCC"> to you just</font>

353
00:14:32,150 --> 00:14:36,860
<font color="#E5E5E5">evicted yourself so this is actually not</font>

354
00:14:34,280 --> 00:14:38,600
<font color="#CCCCCC">very convenient and at one point</font><font color="#E5E5E5"> you</font>

355
00:14:36,860 --> 00:14:40,340
will<font color="#E5E5E5"> get a memory access that we</font><font color="#CCCCCC"> will</font>

356
00:14:38,600 --> 00:14:42,380
remove<font color="#E5E5E5"> the data you want</font><font color="#CCCCCC"> to do a big</font>

357
00:14:40,340 --> 00:14:46,100
from<font color="#E5E5E5"> the cache and then you can read it</font>

358
00:14:42,380 --> 00:14:48,530
again now as you can understand here<font color="#E5E5E5"> you</font>

359
00:14:46,100 --> 00:14:51,140
<font color="#E5E5E5">have quite some problems because by</font>

360
00:14:48,530 --> 00:14:53,689
having<font color="#CCCCCC"> a large cache it means that you</font>

361
00:14:51,140 --> 00:14:55,340
<font color="#E5E5E5">will require a lot of memory accesses</font><font color="#CCCCCC"> to</font>

362
00:14:53,690 --> 00:14:57,620
remove them<font color="#CCCCCC"> to remove the</font><font color="#E5E5E5"> data you want</font>

363
00:14:55,340 --> 00:14:59,030
to remove<font color="#E5E5E5"> from the cache and the second</font>

364
00:14:57,620 --> 00:15:01,910
problem is the<font color="#CCCCCC"> random investment policy</font>

365
00:14:59,030 --> 00:15:03,470
which doesn't<font color="#E5E5E5"> allow you to use the same</font>

366
00:15:01,910 --> 00:15:06,290
access pattern over and<font color="#E5E5E5"> over</font><font color="#CCCCCC"> and again</font>

367
00:15:03,470 --> 00:15:08,210
because by<font color="#CCCCCC"> having a random</font><font color="#E5E5E5"> replacement</font>

368
00:15:06,290 --> 00:15:10,189
policy maybe once it works<font color="#CCCCCC"> and the</font>

369
00:15:08,210 --> 00:15:11,330
second time maybe<font color="#E5E5E5"> it doesn't and this is</font>

370
00:15:10,190 --> 00:15:13,010
quite problematic in this kind of

371
00:15:11,330 --> 00:15:16,760
attacks because you want<font color="#CCCCCC"> to</font><font color="#E5E5E5"> have</font><font color="#CCCCCC"> a</font>

372
00:15:13,010 --> 00:15:18,890
<font color="#CCCCCC">liability clearly and the</font><font color="#E5E5E5"> contiguous</font>

373
00:15:16,760 --> 00:15:20,270
memory<font color="#CCCCCC"> well you may guess</font><font color="#E5E5E5"> also that on</font>

374
00:15:18,890 --> 00:15:24,199
the<font color="#CCCCCC"> first pirate each</font><font color="#E5E5E5"> face are not</font>

375
00:15:20,270 --> 00:15:26,150
available<font color="#CCCCCC"> on unarmed</font><font color="#E5E5E5"> and as a</font>

376
00:15:24,200 --> 00:15:27,980
consequence we cannot use<font color="#E5E5E5"> also this so</font>

377
00:15:26,150 --> 00:15:31,850
the browser doesn't rely on<font color="#E5E5E5"> any of these</font>

378
00:15:27,980 --> 00:15:33,740
and I mean<font color="#E5E5E5"> that actually</font><font color="#CCCCCC"> they cannot be</font>

379
00:15:31,850 --> 00:15:35,330
allocated<font color="#CCCCCC"> in unarmed platforms because</font>

380
00:15:33,740 --> 00:15:37,670
the not supported in most of the

381
00:15:35,330 --> 00:15:41,570
platforms<font color="#E5E5E5"> so then I went to Victor and</font>

382
00:15:37,670 --> 00:15:44,329
asked him so how do you do<font color="#CCCCCC"> it</font><font color="#E5E5E5"> on arm and</font>

383
00:15:41,570 --> 00:15:46,700
he answered<font color="#E5E5E5"> I on and I am basically it's</font>

384
00:15:44,330 --> 00:15:49,029
an API provided by the Android kernel

385
00:15:46,700 --> 00:15:52,149
that provides<font color="#CCCCCC"> with the</font><font color="#E5E5E5"> DNA memory</font>

386
00:15:49,029 --> 00:15:55,569
and<font color="#CCCCCC"> DMA</font><font color="#E5E5E5"> stands</font><font color="#CCCCCC"> for direct memory access</font>

387
00:15:52,149 --> 00:15:58,389
<font color="#E5E5E5">and this memory</font><font color="#CCCCCC"> is usually</font><font color="#E5E5E5"> used by</font>

388
00:15:55,569 --> 00:16:02,560
peripherals such as the GPU<font color="#CCCCCC"> for instance</font>

389
00:15:58,389 --> 00:16:04,329
and as a consequence<font color="#CCCCCC"> it's uncashed</font><font color="#E5E5E5"> and</font>

390
00:16:02,560 --> 00:16:07,449
<font color="#E5E5E5">contiguous or it can be</font><font color="#CCCCCC"> uncashed</font><font color="#E5E5E5"> ankle</font>

391
00:16:04,329 --> 00:16:09,099
and contiguous<font color="#CCCCCC"> which means it you might</font>

392
00:16:07,449 --> 00:16:10,719
<font color="#E5E5E5">want to have</font><font color="#CCCCCC"> an cache memory to avoid</font>

393
00:16:09,100 --> 00:16:12,730
the coherency problems between<font color="#E5E5E5"> the</font>

394
00:16:10,720 --> 00:16:14,250
different peripherals<font color="#E5E5E5"> the CPU and the</font>

395
00:16:12,730 --> 00:16:16,720
digital signal processor<font color="#CCCCCC"> whatever else</font>

396
00:16:14,250 --> 00:16:19,379
<font color="#E5E5E5">and contiguous because you might not</font>

397
00:16:16,720 --> 00:16:21,939
<font color="#E5E5E5">have an</font><font color="#CCCCCC"> MMU which is the one</font><font color="#E5E5E5"> that takes</font>

398
00:16:19,379 --> 00:16:23,829
<font color="#E5E5E5">care of the transition between virtual</font>

399
00:16:21,939 --> 00:16:26,800
and<font color="#E5E5E5"> physical memory so you want to have</font>

400
00:16:23,829 --> 00:16:29,290
already the continues<font color="#E5E5E5"> chunks now again</font>

401
00:16:26,800 --> 00:16:32,410
this is<font color="#CCCCCC"> a</font><font color="#E5E5E5"> low-level Android kernel API</font>

402
00:16:29,290 --> 00:16:34,660
<font color="#E5E5E5">so it's not available from the web so</font>

403
00:16:32,410 --> 00:16:37,689
for Tokyo<font color="#E5E5E5"> we're doomed we</font><font color="#CCCCCC"> cannot do</font>

404
00:16:34,660 --> 00:16:40,300
<font color="#E5E5E5">anything here and</font><font color="#CCCCCC"> that's the thinking</font>

405
00:16:37,689 --> 00:16:42,430
<font color="#CCCCCC">again about this this problem and I</font>

406
00:16:40,300 --> 00:16:45,758
thought well they use the<font color="#CCCCCC"> ion</font><font color="#E5E5E5"> because</font>

407
00:16:42,430 --> 00:16:47,920
it's used for peripheral soon so what if

408
00:16:45,759 --> 00:16:49,389
we change the attack vector<font color="#E5E5E5"> and we look</font>

409
00:16:47,920 --> 00:16:52,389
at a different<font color="#CCCCCC"> peripherals that</font><font color="#E5E5E5"> might</font>

410
00:16:49,389 --> 00:16:54,160
have<font color="#E5E5E5"> contiguous memory and what's the</font>

411
00:16:52,389 --> 00:16:55,839
tech vector here<font color="#E5E5E5"> well you have your</font>

412
00:16:54,160 --> 00:16:58,689
<font color="#E5E5E5">JavaScript code running in the browser</font>

413
00:16:55,839 --> 00:17:01,329
that<font color="#CCCCCC"> would run again on the CPU so the</font>

414
00:16:58,689 --> 00:17:02,860
browser runs on the CPU<font color="#E5E5E5"> and</font><font color="#CCCCCC"> eventually</font>

415
00:17:01,329 --> 00:17:06,908
<font color="#CCCCCC">will</font><font color="#E5E5E5"> perform your memory accesses on</font>

416
00:17:02,860 --> 00:17:08,500
theorem the thing is on modern system

417
00:17:06,909 --> 00:17:10,240
you don't<font color="#CCCCCC"> have a</font><font color="#E5E5E5"> a CPU but the other</font>

418
00:17:08,500 --> 00:17:12,280
system on chip<font color="#E5E5E5"> and the system on chip</font>

419
00:17:10,240 --> 00:17:15,579
contains a lot of<font color="#E5E5E5"> stuff nowadays so you</font>

420
00:17:12,280 --> 00:17:18,369
have a CPU<font color="#E5E5E5"> you have a GPU</font><font color="#CCCCCC"> the 4G modem</font>

421
00:17:15,579 --> 00:17:22,119
<font color="#E5E5E5">digital signal processor then you have</font>

422
00:17:18,369 --> 00:17:24,579
even in the fancier<font color="#CCCCCC"> one other some</font>

423
00:17:22,119 --> 00:17:27,250
neural network chips<font color="#E5E5E5"> because machine</font>

424
00:17:24,579 --> 00:17:29,020
learning is the<font color="#E5E5E5"> future and the</font>

425
00:17:27,250 --> 00:17:31,870
JavaScript code<font color="#CCCCCC"> that we run the CPU</font><font color="#E5E5E5"> but</font>

426
00:17:29,020 --> 00:17:37,240
<font color="#CCCCCC">you can also access the the GPU from</font><font color="#E5E5E5"> the</font>

427
00:17:31,870 --> 00:17:38,979
browser for the<font color="#E5E5E5"> WebGL API so the whole</font>

428
00:17:37,240 --> 00:17:41,140
hope was<font color="#E5E5E5"> that maybe the GP will provide</font>

429
00:17:38,980 --> 00:17:45,070
you<font color="#CCCCCC"> with some uncashed and</font><font color="#E5E5E5"> contiguous</font>

430
00:17:41,140 --> 00:17:47,080
memory such as<font color="#E5E5E5"> the ion memory now the</font>

431
00:17:45,070 --> 00:17:48,850
primitives we need now<font color="#CCCCCC"> our first memory</font>

432
00:17:47,080 --> 00:17:50,678
accessing with<font color="#E5E5E5"> use memory again</font><font color="#CCCCCC"> but we</font>

433
00:17:48,850 --> 00:17:52,090
need<font color="#E5E5E5"> to study how</font><font color="#CCCCCC"> to get them</font><font color="#E5E5E5"> and first</font>

434
00:17:50,679 --> 00:17:53,590
of<font color="#E5E5E5"> all we actually</font><font color="#CCCCCC"> need to understand</font>

435
00:17:52,090 --> 00:17:55,750
how to get<font color="#CCCCCC"> DRAM access</font><font color="#E5E5E5"> in the first</font>

436
00:17:53,590 --> 00:17:57,580
place because we have<font color="#E5E5E5"> no clue on how to</font>

437
00:17:55,750 --> 00:18:00,530
do this<font color="#CCCCCC"> frontage</font><font color="#E5E5E5"> view</font>

438
00:17:57,580 --> 00:18:01,970
so we start<font color="#E5E5E5"> we're gonna go over every</font>

439
00:18:00,530 --> 00:18:04,730
single<font color="#CCCCCC"> one</font><font color="#E5E5E5"> of them to understand how we</font>

440
00:18:01,970 --> 00:18:06,950
<font color="#E5E5E5">got them from the GPU</font><font color="#CCCCCC"> and to understand</font>

441
00:18:04,730 --> 00:18:07,490
<font color="#CCCCCC">how we got</font><font color="#E5E5E5"> access</font><font color="#CCCCCC"> to D Ram in the first</font>

442
00:18:06,950 --> 00:18:09,580
place

443
00:18:07,490 --> 00:18:11,870
we had<font color="#E5E5E5"> to understand how the GPU works</font>

444
00:18:09,580 --> 00:18:14,059
the GPU

445
00:18:11,870 --> 00:18:15,949
serves the purpose of<font color="#CCCCCC"> app in</font><font color="#E5E5E5"> the</font>

446
00:18:14,059 --> 00:18:19,428
rendering<font color="#E5E5E5"> pipeline so it is the</font>

447
00:18:15,950 --> 00:18:23,360
<font color="#E5E5E5">rendering on some graphics and it runs</font>

448
00:18:19,429 --> 00:18:25,610
on the<font color="#CCCCCC"> four stages</font><font color="#E5E5E5"> mostly</font><font color="#CCCCCC"> the first</font>

449
00:18:23,360 --> 00:18:27,620
<font color="#E5E5E5">stage is to</font><font color="#CCCCCC"> get the input provided by</font>

450
00:18:25,610 --> 00:18:31,070
the CPU<font color="#E5E5E5"> and this input comes in the form</font>

451
00:18:27,620 --> 00:18:32,928
of vertices<font color="#E5E5E5"> and this vertices gets</font>

452
00:18:31,070 --> 00:18:34,580
passed<font color="#E5E5E5"> to the</font><font color="#CCCCCC"> GPU</font><font color="#E5E5E5"> which runs these</font>

453
00:18:32,929 --> 00:18:35,900
programs<font color="#E5E5E5"> are</font><font color="#CCCCCC"> called shaders so the</font>

454
00:18:34,580 --> 00:18:39,100
shaders are actually the programs<font color="#CCCCCC"> that</font>

455
00:18:35,900 --> 00:18:41,450
<font color="#E5E5E5">the GPU runs and the vertex shader</font>

456
00:18:39,100 --> 00:18:44,600
<font color="#E5E5E5">performs a computation on these vertices</font>

457
00:18:41,450 --> 00:18:47,720
<font color="#CCCCCC">Jamaica computations so</font><font color="#E5E5E5"> translational</font>

458
00:18:44,600 --> 00:18:50,240
rotations<font color="#E5E5E5"> and once they perform these</font>

459
00:18:47,720 --> 00:18:52,340
<font color="#CCCCCC">dis operations at the output to provide</font>

460
00:18:50,240 --> 00:18:54,919
the<font color="#E5E5E5"> polygon and the polygon basically is</font>

461
00:18:52,340 --> 00:18:57,590
the connection<font color="#CCCCCC"> of these vertices so you</font>

462
00:18:54,919 --> 00:18:59,809
will have the edges of this of this

463
00:18:57,590 --> 00:19:01,549
<font color="#E5E5E5">polygon</font><font color="#CCCCCC"> and all the fragments within</font>

464
00:18:59,809 --> 00:19:03,139
this so all the pixel are within<font color="#E5E5E5"> this</font>

465
00:19:01,549 --> 00:19:05,240
<font color="#CCCCCC">triangle are the</font><font color="#E5E5E5"> fragments</font><font color="#CCCCCC"> that</font>

466
00:19:03,140 --> 00:19:08,270
eventually<font color="#E5E5E5"> will run through the fragment</font>

467
00:19:05,240 --> 00:19:12,140
shader the fragment shader instead as

468
00:19:08,270 --> 00:19:15,830
the purpose of<font color="#E5E5E5"> coloring the pixels the</font>

469
00:19:12,140 --> 00:19:17,630
fragments<font color="#E5E5E5"> and so it will perform some</font>

470
00:19:15,830 --> 00:19:20,899
computation<font color="#CCCCCC"> again to decide the color</font><font color="#E5E5E5"> of</font>

471
00:19:17,630 --> 00:19:23,059
<font color="#E5E5E5">these of these fragments now if you</font>

472
00:19:20,900 --> 00:19:24,980
<font color="#E5E5E5">don't want to play just</font><font color="#CCCCCC"> minecraft</font><font color="#E5E5E5"> where</font>

473
00:19:23,059 --> 00:19:27,740
the<font color="#E5E5E5"> graphics are pretty</font><font color="#CCCCCC"> horrible</font><font color="#E5E5E5"> you</font>

474
00:19:24,980 --> 00:19:30,530
want to use some textures for this so

475
00:19:27,740 --> 00:19:33,559
the GPU provides<font color="#E5E5E5"> us some ways to also</font>

476
00:19:30,530 --> 00:19:36,408
<font color="#CCCCCC">get some</font><font color="#E5E5E5"> external inputs from from DM</font>

477
00:19:33,559 --> 00:19:39,500
again and these<font color="#E5E5E5"> are in form of textures</font>

478
00:19:36,409 --> 00:19:41,450
so you just store<font color="#E5E5E5"> your data for</font><font color="#CCCCCC"> instance</font>

479
00:19:39,500 --> 00:19:43,490
in this case<font color="#CCCCCC"> abuddin texture in theorem</font>

480
00:19:41,450 --> 00:19:44,960
<font color="#E5E5E5">and then you can color your triangle</font>

481
00:19:43,490 --> 00:19:48,500
using<font color="#E5E5E5"> the texture</font><font color="#CCCCCC"> that</font><font color="#E5E5E5"> you have in</font>

482
00:19:44,960 --> 00:19:50,030
memory<font color="#E5E5E5"> and have a wooden triangle and</font>

483
00:19:48,500 --> 00:19:51,799
eventually you get<font color="#E5E5E5"> the</font><font color="#CCCCCC"> output the frame</font>

484
00:19:50,030 --> 00:19:54,980
buffer which is<font color="#E5E5E5"> basically the screen of</font>

485
00:19:51,799 --> 00:19:58,129
your<font color="#E5E5E5"> system</font><font color="#CCCCCC"> and you will see it again on</font>

486
00:19:54,980 --> 00:20:00,110
<font color="#CCCCCC">the screen</font><font color="#E5E5E5"> now the way this works</font><font color="#CCCCCC"> on the</font>

487
00:19:58,130 --> 00:20:03,549
architecture so this is an example<font color="#E5E5E5"> of</font>

488
00:20:00,110 --> 00:20:06,439
how the architecture<font color="#CCCCCC"> may look like and</font>

489
00:20:03,549 --> 00:20:08,840
these are the main DSP are the main

490
00:20:06,440 --> 00:20:11,240
course<font color="#E5E5E5"> of the GPU</font><font color="#CCCCCC"> which are the stream</font>

491
00:20:08,840 --> 00:20:13,039
processors and your multiple of<font color="#E5E5E5"> these</font>

492
00:20:11,240 --> 00:20:15,230
because<font color="#E5E5E5"> you try to paralyze as much as</font>

493
00:20:13,039 --> 00:20:18,500
possible the operations on the CPU<font color="#E5E5E5"> on</font>

494
00:20:15,230 --> 00:20:21,350
the GPU<font color="#E5E5E5"> and this one the one running the</font>

495
00:20:18,500 --> 00:20:24,200
<font color="#E5E5E5">shaders so that we start by fetching the</font>

496
00:20:21,350 --> 00:20:27,799
vertices from memory and then running

497
00:20:24,200 --> 00:20:29,539
the vertex shader<font color="#E5E5E5"> on these vertices so</font>

498
00:20:27,799 --> 00:20:31,158
the output is<font color="#CCCCCC"> going</font><font color="#E5E5E5"> to be the</font><font color="#CCCCCC"> polygon</font>

499
00:20:29,539 --> 00:20:33,530
<font color="#CCCCCC">that</font><font color="#E5E5E5"> you just they</font><font color="#CCCCCC"> are just mentioned</font>

500
00:20:31,159 --> 00:20:35,659
<font color="#CCCCCC">and after that the</font><font color="#E5E5E5"> the fragment shader</font>

501
00:20:33,530 --> 00:20:40,370
<font color="#E5E5E5">we start running on every single</font>

502
00:20:35,659 --> 00:20:42,980
fragment<font color="#E5E5E5"> within the polygons during the</font>

503
00:20:40,370 --> 00:20:45,590
fragment shader<font color="#E5E5E5"> you</font><font color="#CCCCCC"> will call</font><font color="#E5E5E5"> this</font><font color="#CCCCCC"> TP</font>

504
00:20:42,980 --> 00:20:46,940
which are the texture processors and the

505
00:20:45,590 --> 00:20:48,740
texture processors are the one in<font color="#E5E5E5"> charge</font>

506
00:20:46,940 --> 00:20:51,500
of getting<font color="#E5E5E5"> the</font><font color="#CCCCCC"> data from from</font><font color="#E5E5E5"> the</font>

507
00:20:48,740 --> 00:20:54,260
textures so<font color="#E5E5E5"> we call the textures and</font>

508
00:20:51,500 --> 00:20:57,409
fill in the fragments<font color="#E5E5E5"> with the texture</font>

509
00:20:54,260 --> 00:20:58,850
<font color="#E5E5E5">later on at the</font><font color="#CCCCCC"> end</font><font color="#E5E5E5"> you would just</font>

510
00:20:57,409 --> 00:21:02,470
output everything to a frame buffer<font color="#CCCCCC"> and</font>

511
00:20:58,850 --> 00:21:05,090
be<font color="#E5E5E5"> done</font><font color="#CCCCCC"> with the with the whole process</font>

512
00:21:02,470 --> 00:21:06,710
now we look at what theorem access

513
00:21:05,090 --> 00:21:08,299
points you have and as you can<font color="#CCCCCC"> see you</font>

514
00:21:06,710 --> 00:21:10,370
have<font color="#CCCCCC"> these three you can read the</font>

515
00:21:08,299 --> 00:21:13,010
vertices<font color="#E5E5E5"> reading the textures all right</font>

516
00:21:10,370 --> 00:21:15,350
to<font color="#CCCCCC"> the</font><font color="#E5E5E5"> frame buffer so we have to pick</font>

517
00:21:13,010 --> 00:21:17,090
<font color="#CCCCCC">one</font><font color="#E5E5E5"> and that we decided to go with</font><font color="#CCCCCC"> the</font>

518
00:21:15,350 --> 00:21:19,580
textures<font color="#E5E5E5"> because it was the most</font>

519
00:21:17,090 --> 00:21:22,100
predictable<font color="#E5E5E5"> so the problem with the</font>

520
00:21:19,580 --> 00:21:25,129
<font color="#E5E5E5">vertices were that they run in</font><font color="#CCCCCC"> parallel</font>

521
00:21:22,100 --> 00:21:27,678
so<font color="#CCCCCC"> the</font><font color="#E5E5E5"> the stream process or</font><font color="#CCCCCC"> just run in</font>

522
00:21:25,130 --> 00:21:29,210
parallel<font color="#E5E5E5"> the vertex</font><font color="#CCCCCC"> shader so you don't</font>

523
00:21:27,679 --> 00:21:31,460
know exactly<font color="#CCCCCC"> how to coordinate and</font>

524
00:21:29,210 --> 00:21:35,149
memory accesses<font color="#E5E5E5"> if you look at enough</font>

525
00:21:31,460 --> 00:21:37,070
vertices to cover multiple<font color="#E5E5E5"> rows with</font><font color="#CCCCCC"> the</font>

526
00:21:35,149 --> 00:21:39,260
frame buffer instead the problem is this

527
00:21:37,070 --> 00:21:41,330
<font color="#E5E5E5">thing we called OC</font><font color="#CCCCCC"> man which is the own</font>

528
00:21:39,260 --> 00:21:43,940
chip memory at least<font color="#E5E5E5"> on a mobile system</font>

529
00:21:41,330 --> 00:21:48,168
<font color="#E5E5E5">they usually other</font><font color="#CCCCCC"> a bigger cache that</font>

530
00:21:43,940 --> 00:21:51,620
stands between the shader<font color="#CCCCCC"> de stream</font>

531
00:21:48,169 --> 00:21:54,770
processors and<font color="#CCCCCC"> Ihram and these stops</font>

532
00:21:51,620 --> 00:21:57,039
again our access to theorem<font color="#E5E5E5"> Y</font><font color="#CCCCCC"> with</font>

533
00:21:54,770 --> 00:21:59,870
<font color="#CCCCCC">reading</font><font color="#E5E5E5"> the texture is actually a bit</font>

534
00:21:57,039 --> 00:22:02,059
simpler<font color="#E5E5E5"> I'm gonna say trivial but still</font>

535
00:21:59,870 --> 00:22:03,889
a bit simpler and<font color="#CCCCCC"> the way it works is</font>

536
00:22:02,059 --> 00:22:06,379
basically<font color="#CCCCCC"> you would have this is an</font>

537
00:22:03,890 --> 00:22:07,850
example of<font color="#E5E5E5"> a shader and what you do is</font>

538
00:22:06,380 --> 00:22:10,370
basically<font color="#E5E5E5"> you call this a texture 2d</font>

539
00:22:07,850 --> 00:22:12,559
function with the texture<font color="#CCCCCC"> as a</font><font color="#E5E5E5"> as a</font>

540
00:22:10,370 --> 00:22:14,489
parameter<font color="#CCCCCC"> as an input</font><font color="#E5E5E5"> and some</font>

541
00:22:12,559 --> 00:22:15,930
coordinates as an input

542
00:22:14,490 --> 00:22:18,810
and once you<font color="#CCCCCC"> know</font><font color="#E5E5E5"> the mapping between</font>

543
00:22:15,930 --> 00:22:21,090
coordinates and the offsets in in a

544
00:22:18,810 --> 00:22:22,649
buffer<font color="#E5E5E5"> it's basically as just the</font>

545
00:22:21,090 --> 00:22:26,550
referencing a pointer<font color="#CCCCCC"> or just accessing</font>

546
00:22:22,650 --> 00:22:28,050
<font color="#E5E5E5">an index inside an array basically so</font>

547
00:22:26,550 --> 00:22:30,960
you<font color="#E5E5E5"> just need to know where you need to</font>

548
00:22:28,050 --> 00:22:33,360
touch and then you can<font color="#E5E5E5"> just use this</font>

549
00:22:30,960 --> 00:22:37,680
<font color="#E5E5E5">within the GPU you can program the GPU</font>

550
00:22:33,360 --> 00:22:40,080
to<font color="#E5E5E5"> run specific operations so we</font><font color="#CCCCCC"> do</font><font color="#E5E5E5"> have</font>

551
00:22:37,680 --> 00:22:44,520
our<font color="#E5E5E5"> first primitive which is a theorem</font>

552
00:22:40,080 --> 00:22:47,370
<font color="#E5E5E5">access now is this access fast enough so</font>

553
00:22:44,520 --> 00:22:49,500
going back<font color="#E5E5E5"> to architecture of the GPU as</font>

554
00:22:47,370 --> 00:22:51,540
you<font color="#E5E5E5"> can see here we have a two level of</font>

555
00:22:49,500 --> 00:22:54,210
caches which we didn't pay<font color="#CCCCCC"> attention to</font>

556
00:22:51,540 --> 00:22:56,010
earlier and this again<font color="#E5E5E5"> don't help</font>

557
00:22:54,210 --> 00:22:57,470
<font color="#CCCCCC">because as we said their</font><font color="#E5E5E5"> caches I wanted</font>

558
00:22:56,010 --> 00:23:00,450
stopping they're stopping you from

559
00:22:57,470 --> 00:23:03,300
accessing<font color="#E5E5E5"> theorem so here when you run a</font>

560
00:23:00,450 --> 00:23:05,520
shader that<font color="#E5E5E5"> access the same offset twice</font>

561
00:23:03,300 --> 00:23:07,020
what would happen again<font color="#E5E5E5"> is you just get</font>

562
00:23:05,520 --> 00:23:09,240
the data the first<font color="#E5E5E5"> time so the texture</font>

563
00:23:07,020 --> 00:23:12,030
processor will go to the Ihram to get

564
00:23:09,240 --> 00:23:14,640
the data then we<font color="#E5E5E5"> bring you to the l1</font>

565
00:23:12,030 --> 00:23:17,460
<font color="#CCCCCC">cache and the next time</font><font color="#E5E5E5"> you will get it</font>

566
00:23:14,640 --> 00:23:21,000
directly<font color="#CCCCCC"> from the</font><font color="#E5E5E5"> one cache so we stop</font>

567
00:23:17,460 --> 00:23:23,790
your own memory access now these caches

568
00:23:21,000 --> 00:23:25,140
were completely<font color="#CCCCCC"> unknown so we didn't</font>

569
00:23:23,790 --> 00:23:27,120
know how they were working<font color="#E5E5E5"> so we had to</font>

570
00:23:25,140 --> 00:23:28,860
<font color="#CCCCCC">reverse-engineer</font><font color="#E5E5E5"> them and that is</font>

571
00:23:27,120 --> 00:23:31,199
actually<font color="#CCCCCC"> quite interesting</font><font color="#E5E5E5"> but</font>

572
00:23:28,860 --> 00:23:34,620
<font color="#E5E5E5">unfortunately I don't think</font><font color="#CCCCCC"> I have time</font>

573
00:23:31,200 --> 00:23:36,390
to<font color="#E5E5E5"> cover this part but the interesting</font>

574
00:23:34,620 --> 00:23:37,770
bit<font color="#CCCCCC"> of this is that the</font><font color="#E5E5E5"> nature of these</font>

575
00:23:36,390 --> 00:23:40,290
caches are completely<font color="#CCCCCC"> different from the</font>

576
00:23:37,770 --> 00:23:43,110
one of<font color="#E5E5E5"> the CPU so these caches are</font>

577
00:23:40,290 --> 00:23:45,840
actually small compared to the CPU one

578
00:23:43,110 --> 00:23:48,060
<font color="#E5E5E5">so you can we</font><font color="#CCCCCC"> can compare from megabytes</font>

579
00:23:45,840 --> 00:23:49,800
<font color="#E5E5E5">to basically kilobytes of textures so</font>

580
00:23:48,060 --> 00:23:52,639
the CPU cache are usually in<font color="#E5E5E5"> the order</font>

581
00:23:49,800 --> 00:23:55,620
of Sigma<font color="#E5E5E5"> bytes for instance on the on</font>

582
00:23:52,640 --> 00:23:59,820
<font color="#E5E5E5">all modern systems and these are in the</font>

583
00:23:55,620 --> 00:24:02,389
order<font color="#CCCCCC"> of 32 kilobytes</font><font color="#E5E5E5"> and implemented</font>

584
00:23:59,820 --> 00:24:05,669
deterministic replacement policy and

585
00:24:02,390 --> 00:24:08,460
this means that in our case was a FIFO

586
00:24:05,670 --> 00:24:10,770
replacement policy so what we do in this

587
00:24:08,460 --> 00:24:14,040
<font color="#E5E5E5">case</font><font color="#CCCCCC"> is you would read the Roy n minus</font><font color="#E5E5E5"> 1</font>

588
00:24:10,770 --> 00:24:16,470
<font color="#E5E5E5">you place it into the cache then n plus</font>

589
00:24:14,040 --> 00:24:18,090
<font color="#CCCCCC">1 anyplace</font><font color="#E5E5E5"> also that one in the color in</font>

590
00:24:16,470 --> 00:24:20,820
the cache and then you can start<font color="#CCCCCC"> the</font><font color="#E5E5E5"> big</font>

591
00:24:18,090 --> 00:24:22,260
thing and<font color="#E5E5E5"> the fiction here is</font><font color="#CCCCCC"> going to</font>

592
00:24:20,820 --> 00:24:24,000
go sequentially<font color="#E5E5E5"> so you can always</font>

593
00:24:22,260 --> 00:24:26,160
<font color="#E5E5E5">perform the same access pattern and you</font>

594
00:24:24,000 --> 00:24:27,960
will be sure that<font color="#E5E5E5"> at one point after and</font>

595
00:24:26,160 --> 00:24:30,180
<font color="#CCCCCC">accesses that you know the</font>

596
00:24:27,960 --> 00:24:31,770
the amount you<font color="#CCCCCC"> will remove the data from</font>

597
00:24:30,180 --> 00:24:37,470
the<font color="#E5E5E5"> cache and then you can access it</font>

598
00:24:31,770 --> 00:24:40,889
again<font color="#E5E5E5"> to start hammering again now this</font>

599
00:24:37,470 --> 00:24:42,900
is cool but is this fast<font color="#CCCCCC"> enough so this</font>

600
00:24:40,890 --> 00:24:45,300
<font color="#E5E5E5">plot that</font><font color="#CCCCCC"> comes</font><font color="#E5E5E5"> from a drummer actually</font>

601
00:24:42,900 --> 00:24:47,640
so this<font color="#E5E5E5"> is a plot that</font><font color="#CCCCCC"> Victor made and</font>

602
00:24:45,300 --> 00:24:49,440
we're studying<font color="#E5E5E5"> how much latency</font><font color="#CCCCCC"> you</font><font color="#E5E5E5"> can</font>

603
00:24:47,640 --> 00:24:52,710
how much you can wait<font color="#CCCCCC"> between two memory</font>

604
00:24:49,440 --> 00:24:54,480
accesses<font color="#E5E5E5"> to get</font><font color="#CCCCCC"> B flips so the number of</font>

605
00:24:52,710 --> 00:24:56,100
<font color="#CCCCCC">knop instruction on the x-axis other one</font>

606
00:24:54,480 --> 00:24:58,650
<font color="#E5E5E5">that basically are put between two</font>

607
00:24:56,100 --> 00:25:01,280
memory accesses<font color="#E5E5E5"> and only why you have</font>

608
00:24:58,650 --> 00:25:03,540
the the number of bits<font color="#E5E5E5"> lips and the time</font>

609
00:25:01,280 --> 00:25:06,090
so as you can see that the time

610
00:25:03,540 --> 00:25:08,370
<font color="#E5E5E5">increases by increases in the number of</font>

611
00:25:06,090 --> 00:25:11,399
<font color="#E5E5E5">nope instructions and the same time the</font>

612
00:25:08,370 --> 00:25:12,929
<font color="#CCCCCC">number of beef lips</font><font color="#E5E5E5"> decreases we studied</font>

613
00:25:11,400 --> 00:25:15,600
how much it was taking for us to perform

614
00:25:12,930 --> 00:25:18,600
a memory access<font color="#CCCCCC"> with our access pattern</font>

615
00:25:15,600 --> 00:25:21,000
that we developed for evicting and

616
00:25:18,600 --> 00:25:24,000
<font color="#CCCCCC">hammering at the</font><font color="#E5E5E5"> same time</font><font color="#CCCCCC"> it</font><font color="#E5E5E5"> turns out</font>

617
00:25:21,000 --> 00:25:26,220
we<font color="#CCCCCC"> ran in around 180 nanoseconds so</font>

618
00:25:24,000 --> 00:25:28,320
every 180 nanoseconds<font color="#E5E5E5"> we perform</font><font color="#CCCCCC"> on</font>

619
00:25:26,220 --> 00:25:30,990
<font color="#E5E5E5">access that we can use for</font><font color="#CCCCCC"> honoring</font><font color="#E5E5E5"> and</font>

620
00:25:28,320 --> 00:25:34,050
which<font color="#E5E5E5"> means that we can</font><font color="#CCCCCC"> actually get</font>

621
00:25:30,990 --> 00:25:36,240
beef lips<font color="#E5E5E5"> based on this plot</font><font color="#CCCCCC"> this plot</font>

622
00:25:34,050 --> 00:25:37,860
<font color="#E5E5E5">was run made on a nexus 5</font><font color="#CCCCCC"> and we run all</font>

623
00:25:36,240 --> 00:25:40,350
our research<font color="#E5E5E5"> on this nexus 5 basically</font>

624
00:25:37,860 --> 00:25:43,979
so it was a meaningful<font color="#E5E5E5"> the comparison</font>

625
00:25:40,350 --> 00:25:45,959
between<font color="#E5E5E5"> the</font><font color="#CCCCCC"> two studies so yeah we're</font>

626
00:25:43,980 --> 00:25:51,720
fast enough<font color="#E5E5E5"> so we celebrated after that</font>

627
00:25:45,960 --> 00:25:54,900
and we<font color="#CCCCCC"> have fast</font><font color="#E5E5E5"> memory access now the</font>

628
00:25:51,720 --> 00:25:58,800
next step is<font color="#CCCCCC"> how we get</font><font color="#E5E5E5"> contiguous</font>

629
00:25:54,900 --> 00:26:00,780
memory now for the contiguous memory<font color="#E5E5E5"> as</font>

630
00:25:58,800 --> 00:26:03,659
we said usually the operating system try

631
00:26:00,780 --> 00:26:05,760
to avoid this fragmentation<font color="#CCCCCC"> so in this</font>

632
00:26:03,660 --> 00:26:08,310
case<font color="#CCCCCC"> this is again</font><font color="#E5E5E5"> the way we represent</font>

633
00:26:05,760 --> 00:26:11,220
the run<font color="#E5E5E5"> it's simplified the diagram but</font>

634
00:26:08,310 --> 00:26:13,590
<font color="#E5E5E5">it's quite</font><font color="#CCCCCC"> representative and everything</font>

635
00:26:11,220 --> 00:26:15,300
<font color="#CCCCCC">along</font><font color="#E5E5E5"> this it's one page so these are</font>

636
00:26:13,590 --> 00:26:20,639
gonna<font color="#E5E5E5"> be four kilobyte or at least part</font>

637
00:26:15,300 --> 00:26:22,710
<font color="#E5E5E5">of a page map so that that row</font><font color="#CCCCCC"> and when</font>

638
00:26:20,640 --> 00:26:24,470
you want<font color="#CCCCCC"> to locate memory in</font><font color="#E5E5E5"> our case</font>

639
00:26:22,710 --> 00:26:27,480
textures<font color="#CCCCCC"> what you</font><font color="#E5E5E5"> will do is basically</font>

640
00:26:24,470 --> 00:26:28,920
allocate<font color="#CCCCCC"> a texture with this function</font>

641
00:26:27,480 --> 00:26:31,290
create texture and then<font color="#E5E5E5"> you will feel it</font>

642
00:26:28,920 --> 00:26:33,270
and you<font color="#CCCCCC"> need</font><font color="#E5E5E5"> to feel because</font><font color="#CCCCCC"> there</font>

643
00:26:31,290 --> 00:26:36,360
lazily allocated so otherwise you<font color="#E5E5E5"> want</font>

644
00:26:33,270 --> 00:26:38,490
to allocate actually any memory and

645
00:26:36,360 --> 00:26:39,899
afterwards<font color="#E5E5E5"> what will happen is</font><font color="#CCCCCC"> that the</font>

646
00:26:38,490 --> 00:26:41,549
<font color="#E5E5E5">operating</font><font color="#CCCCCC"> system we start</font><font color="#E5E5E5"> providing you</font>

647
00:26:39,900 --> 00:26:44,820
with the smallest<font color="#E5E5E5"> possible</font>

648
00:26:41,549 --> 00:26:46,080
chunk which is<font color="#E5E5E5"> four kilobyte so it</font>

649
00:26:44,820 --> 00:26:49,259
provided with<font color="#E5E5E5"> this</font><font color="#CCCCCC"> a single page is</font>

650
00:26:46,080 --> 00:26:51,480
<font color="#CCCCCC">available at um pointer</font><font color="#E5E5E5"> you will get</font>

651
00:26:49,259 --> 00:26:53,549
some contiguous chunks<font color="#E5E5E5"> so</font><font color="#CCCCCC"> these two for</font>

652
00:26:51,480 --> 00:26:54,989
<font color="#CCCCCC">instance that are already contiguous but</font>

653
00:26:53,549 --> 00:26:58,769
<font color="#E5E5E5">they're just two contiguous pages so</font>

654
00:26:54,989 --> 00:27:00,690
that's not enough for<font color="#CCCCCC"> you and eventually</font>

655
00:26:58,769 --> 00:27:03,029
you will start getting<font color="#CCCCCC"> a big chunk</font><font color="#E5E5E5"> that</font>

656
00:27:00,690 --> 00:27:06,149
is a big enough for you to to perform

657
00:27:03,029 --> 00:27:08,399
<font color="#CCCCCC">your</font><font color="#E5E5E5"> romrell attack so this chunk is</font>

658
00:27:06,149 --> 00:27:10,350
clearly<font color="#CCCCCC"> honorable why the other one is</font>

659
00:27:08,399 --> 00:27:14,518
not<font color="#E5E5E5"> honorable because you cannot have</font>

660
00:27:10,350 --> 00:27:15,719
enough memory that you control<font color="#E5E5E5"> now this</font>

661
00:27:14,519 --> 00:27:19,559
is cool but how do<font color="#E5E5E5"> you distinguish the</font>

662
00:27:15,720 --> 00:27:21,899
two of them and the<font color="#E5E5E5"> answer here it can</font>

663
00:27:19,559 --> 00:27:26,639
<font color="#E5E5E5">be the simple answer is basically you</font>

664
00:27:21,899 --> 00:27:28,139
can just allocate a<font color="#CCCCCC"> lawful memory</font><font color="#E5E5E5"> and at</font>

665
00:27:26,639 --> 00:27:30,330
one point you will get<font color="#E5E5E5"> the chunks</font><font color="#CCCCCC"> that</font>

666
00:27:28,139 --> 00:27:31,738
are<font color="#E5E5E5"> contiguous</font><font color="#CCCCCC"> by default because again</font>

667
00:27:30,330 --> 00:27:33,299
as we said<font color="#E5E5E5"> we try to avoid the</font>

668
00:27:31,739 --> 00:27:35,039
<font color="#E5E5E5">fragmentation so</font><font color="#CCCCCC"> at one point it will</font>

669
00:27:33,299 --> 00:27:37,879
provide it with<font color="#E5E5E5"> a big chunky because it</font>

670
00:27:35,039 --> 00:27:41,369
<font color="#CCCCCC">there the one that gets allocated</font><font color="#E5E5E5"> as a</font>

671
00:27:37,879 --> 00:27:43,320
<font color="#E5E5E5">last ones but the answer that we decided</font>

672
00:27:41,369 --> 00:27:46,439
<font color="#E5E5E5">to go</font><font color="#CCCCCC"> for it was a different one so</font><font color="#E5E5E5"> it</font>

673
00:27:43,320 --> 00:27:47,879
<font color="#E5E5E5">said to implement</font><font color="#CCCCCC"> a</font><font color="#E5E5E5"> channels and the</font>

674
00:27:46,440 --> 00:27:49,559
idea was<font color="#CCCCCC"> that I want to show that</font><font color="#E5E5E5"> the</font>

675
00:27:47,879 --> 00:27:51,539
GPU is not only good for<font color="#E5E5E5"> triggering</font>

676
00:27:49,559 --> 00:27:54,720
<font color="#E5E5E5">belief so it was more of a widespread</font>

677
00:27:51,539 --> 00:27:57,720
issue that basically we're introducing a

678
00:27:54,720 --> 00:27:59,249
new attack vector so not<font color="#E5E5E5"> only for for</font>

679
00:27:57,720 --> 00:28:03,539
<font color="#CCCCCC">Rama attacks but</font><font color="#E5E5E5"> also for timing side</font>

680
00:27:59,249 --> 00:28:06,019
channel attacks and<font color="#CCCCCC"> the special attack</font>

681
00:28:03,539 --> 00:28:09,929
here it's on the way didn't<font color="#E5E5E5"> reads work</font>

682
00:28:06,019 --> 00:28:11,779
so as we mentioned<font color="#CCCCCC"> a</font><font color="#E5E5E5"> dream read let's</font>

683
00:28:09,929 --> 00:28:14,909
say<font color="#CCCCCC"> we want to read a</font><font color="#E5E5E5"> specific</font><font color="#CCCCCC"> page in</font>

684
00:28:11,779 --> 00:28:17,909
<font color="#E5E5E5">one others from that page in theorem</font>

685
00:28:14,909 --> 00:28:20,090
what you need to do is you activate the

686
00:28:17,909 --> 00:28:23,639
<font color="#E5E5E5">throw you bring it to the row buffer and</font>

687
00:28:20,090 --> 00:28:26,789
then you read<font color="#E5E5E5"> from there and eventually</font>

688
00:28:23,639 --> 00:28:30,320
<font color="#CCCCCC">you</font><font color="#E5E5E5"> need to send it</font><font color="#CCCCCC"> back so the</font><font color="#E5E5E5"> section</font>

689
00:28:26,789 --> 00:28:32,190
here<font color="#E5E5E5"> that we can use is simply touching</font>

690
00:28:30,320 --> 00:28:32,700
addresses from different textures in

691
00:28:32,190 --> 00:28:35,399
<font color="#E5E5E5">memory</font>

692
00:28:32,700 --> 00:28:37,379
sequentially so you just touch these

693
00:28:35,399 --> 00:28:40,859
three these three textures<font color="#E5E5E5"> for instance</font>

694
00:28:37,379 --> 00:28:43,918
and what the GPU<font color="#CCCCCC"> will need to do is to</font>

695
00:28:40,859 --> 00:28:46,830
access<font color="#E5E5E5"> the first one bring</font><font color="#CCCCCC"> it</font><font color="#E5E5E5"> to the row</font>

696
00:28:43,919 --> 00:28:49,710
buffer<font color="#CCCCCC"> and really</font><font color="#E5E5E5"> from there then send</font>

697
00:28:46,830 --> 00:28:52,049
it back<font color="#E5E5E5"> then bring the second page which</font>

698
00:28:49,710 --> 00:28:54,090
is on a<font color="#E5E5E5"> different role so we generate a</font>

699
00:28:52,049 --> 00:28:55,200
conflict<font color="#E5E5E5"> and then you can read it</font><font color="#CCCCCC"> from</font>

700
00:28:54,090 --> 00:28:57,419
the<font color="#E5E5E5"> row buffer</font>

701
00:28:55,200 --> 00:28:58,890
and eventually<font color="#CCCCCC"> also a third one which</font>

702
00:28:57,420 --> 00:29:02,640
comes from the previous row but of

703
00:28:58,890 --> 00:29:04,410
course the<font color="#CCCCCC"> GPU doesn't the memory</font>

704
00:29:02,640 --> 00:29:06,630
controller doesn't changes the access

705
00:29:04,410 --> 00:29:11,490
here so we<font color="#E5E5E5"> provide it with the this one</font>

706
00:29:06,630 --> 00:29:13,320
eventually<font color="#E5E5E5"> and this clearly is low</font><font color="#CCCCCC"> on</font>

707
00:29:11,490 --> 00:29:16,020
<font color="#E5E5E5">average at least like it's much lower</font>

708
00:29:13,320 --> 00:29:17,970
<font color="#E5E5E5">than a different access pattern but the</font>

709
00:29:16,020 --> 00:29:19,440
point is<font color="#CCCCCC"> that it's very</font><font color="#E5E5E5"> noisy</font><font color="#CCCCCC"> so you</font>

710
00:29:17,970 --> 00:29:22,260
will get this very noisy signal by

711
00:29:19,440 --> 00:29:25,140
shifting the access<font color="#E5E5E5"> pattern so you will</font>

712
00:29:22,260 --> 00:29:27,780
<font color="#E5E5E5">start like accessing all these pages by</font>

713
00:29:25,140 --> 00:29:31,770
shifting by one every time<font color="#E5E5E5"> and we see</font><font color="#CCCCCC"> a</font>

714
00:29:27,780 --> 00:29:34,740
big standard deviation<font color="#E5E5E5"> and slow</font><font color="#CCCCCC"> memory</font>

715
00:29:31,770 --> 00:29:36,420
<font color="#E5E5E5">accesses what happens is that</font><font color="#CCCCCC"> when the</font>

716
00:29:34,740 --> 00:29:38,400
memories contiguous if you<font color="#CCCCCC"> access if you</font>

717
00:29:36,420 --> 00:29:40,680
want to access three consecutive pages

718
00:29:38,400 --> 00:29:42,420
<font color="#E5E5E5">is simply you get this row</font><font color="#CCCCCC"> bring it to</font>

719
00:29:40,680 --> 00:29:45,990
the row buffer and then<font color="#E5E5E5"> touch them all</font>

720
00:29:42,420 --> 00:29:49,140
<font color="#E5E5E5">and then send it</font><font color="#CCCCCC"> back and</font><font color="#E5E5E5"> this provides</font>

721
00:29:45,990 --> 00:29:51,600
you with a very<font color="#E5E5E5"> fast and clear signal so</font>

722
00:29:49,140 --> 00:29:55,530
you<font color="#CCCCCC"> can clearly distinguish between the</font>

723
00:29:51,600 --> 00:29:56,699
two<font color="#E5E5E5"> different access patterns now to</font>

724
00:29:55,530 --> 00:29:59,700
<font color="#E5E5E5">protect this side</font><font color="#CCCCCC"> channel</font>

725
00:29:56,700 --> 00:30:01,770
clearly we need timers and time<font color="#E5E5E5"> I saw a</font>

726
00:29:59,700 --> 00:30:04,680
big thing in browsers<font color="#E5E5E5"> because of</font><font color="#CCCCCC"> search</font>

727
00:30:01,770 --> 00:30:06,480
<font color="#CCCCCC">engine</font><font color="#E5E5E5"> such as</font><font color="#CCCCCC"> the</font><font color="#E5E5E5"> spectra now so right</font>

728
00:30:04,680 --> 00:30:07,740
<font color="#E5E5E5">now all the browser vendors are trying</font>

729
00:30:06,480 --> 00:30:09,840
to<font color="#CCCCCC"> disable all the times</font><font color="#E5E5E5"> that are</font>

730
00:30:07,740 --> 00:30:10,890
available<font color="#E5E5E5"> to the attackers because if</font>

731
00:30:09,840 --> 00:30:12,689
you don't<font color="#E5E5E5"> have the timers you're gonna</font>

732
00:30:10,890 --> 00:30:17,130
be the channel<font color="#E5E5E5"> right so that's that's</font>

733
00:30:12,690 --> 00:30:20,070
the mentality<font color="#E5E5E5"> on this mitigation so what</font>

734
00:30:17,130 --> 00:30:23,130
we did<font color="#E5E5E5"> it was we</font><font color="#CCCCCC"> tried to</font><font color="#E5E5E5"> find</font><font color="#CCCCCC"> sometimes</font>

735
00:30:20,070 --> 00:30:28,110
<font color="#CCCCCC">I could</font><font color="#E5E5E5"> we could use to detect accesses</font>

736
00:30:23,130 --> 00:30:30,810
made<font color="#E5E5E5"> by the GPU and we found</font><font color="#CCCCCC"> two</font>

737
00:30:28,110 --> 00:30:32,580
different families<font color="#CCCCCC"> of timers the first</font>

738
00:30:30,810 --> 00:30:35,850
one is based<font color="#E5E5E5"> on the disjoint tunnel</font>

739
00:30:32,580 --> 00:30:37,290
query extension and this<font color="#E5E5E5"> is pretty nice</font>

740
00:30:35,850 --> 00:30:39,389
because it provides<font color="#CCCCCC"> you with an</font>

741
00:30:37,290 --> 00:30:40,560
interface such as<font color="#E5E5E5"> a clock</font><font color="#CCCCCC"> get time</font><font color="#E5E5E5"> so</font>

742
00:30:39,390 --> 00:30:43,620
basically<font color="#CCCCCC"> can just square it and</font><font color="#E5E5E5"> it will</font>

743
00:30:40,560 --> 00:30:45,179
<font color="#E5E5E5">provide you with</font><font color="#CCCCCC"> the timestamp and the</font>

744
00:30:43,620 --> 00:30:47,010
resolution<font color="#E5E5E5"> of this timer depends on the</font>

745
00:30:45,180 --> 00:30:48,090
driver implementation so by

746
00:30:47,010 --> 00:30:50,370
specification<font color="#CCCCCC"> it can be up to</font>

747
00:30:48,090 --> 00:30:54,929
nanoseconds<font color="#CCCCCC"> then it</font><font color="#E5E5E5"> depends on the</font>

748
00:30:50,370 --> 00:30:58,770
system<font color="#E5E5E5"> heightened demands the the API</font>

749
00:30:54,930 --> 00:31:00,810
and<font color="#E5E5E5"> also</font><font color="#CCCCCC"> on the browser itself so the</font>

750
00:30:58,770 --> 00:31:03,090
browser<font color="#CCCCCC"> make up it so for instance</font><font color="#E5E5E5"> that</font>

751
00:31:00,810 --> 00:31:05,960
also was happening in<font color="#CCCCCC"> Chrome but it was</font>

752
00:31:03,090 --> 00:31:08,269
not<font color="#E5E5E5"> what</font><font color="#CCCCCC"> was happening in Firefox</font>

753
00:31:05,960 --> 00:31:10,940
and it provides with<font color="#CCCCCC"> the</font><font color="#E5E5E5"> high resolution</font>

754
00:31:08,269 --> 00:31:14,119
clearly<font color="#E5E5E5"> and also it's nice</font><font color="#CCCCCC"> because</font><font color="#E5E5E5"> you</font>

755
00:31:10,940 --> 00:31:16,460
could also use<font color="#E5E5E5"> an a synchronous</font><font color="#CCCCCC"> callback</font>

756
00:31:14,119 --> 00:31:18,199
so you could just say<font color="#CCCCCC"> uh</font><font color="#E5E5E5"> please the time</font>

757
00:31:16,460 --> 00:31:20,210
for me<font color="#CCCCCC"> this this memory access</font>

758
00:31:18,200 --> 00:31:21,830
you tell the<font color="#E5E5E5"> GPU</font><font color="#CCCCCC"> ok</font><font color="#E5E5E5"> run this operation</font>

759
00:31:20,210 --> 00:31:23,240
<font color="#E5E5E5">and tell me what's the</font><font color="#CCCCCC"> time and then</font>

760
00:31:21,830 --> 00:31:25,789
<font color="#CCCCCC">company</font><font color="#E5E5E5"> will get</font><font color="#CCCCCC"> a callback</font><font color="#E5E5E5"> telling you</font>

761
00:31:23,240 --> 00:31:28,340
<font color="#CCCCCC">ok this</font><font color="#E5E5E5"> was the result so</font><font color="#CCCCCC"> it no noise no</font>

762
00:31:25,789 --> 00:31:31,158
<font color="#CCCCCC">nothing so that was pretty nice as a</font>

763
00:31:28,340 --> 00:31:34,100
diner<font color="#E5E5E5"> however this is an extension based</font>

764
00:31:31,159 --> 00:31:35,720
diner so to prove our point that the

765
00:31:34,100 --> 00:31:37,639
mitigation<font color="#E5E5E5"> of breaking all the time</font>

766
00:31:35,720 --> 00:31:40,129
which<font color="#E5E5E5"> was</font><font color="#CCCCCC"> not a solution</font><font color="#E5E5E5"> we actually</font>

767
00:31:37,639 --> 00:31:42,559
went a bit further and we<font color="#E5E5E5"> found another</font>

768
00:31:40,129 --> 00:31:46,519
<font color="#E5E5E5">timer based on the WebGL sync objects</font>

769
00:31:42,559 --> 00:31:49,269
that are<font color="#CCCCCC"> fenced objects that are used in</font>

770
00:31:46,519 --> 00:31:51,139
the WebGL<font color="#CCCCCC"> to a specification</font><font color="#E5E5E5"> and</font>

771
00:31:49,269 --> 00:31:52,610
<font color="#CCCCCC">dispensed is</font><font color="#E5E5E5"> basically are used to</font>

772
00:31:51,139 --> 00:31:55,789
synchronize the CPU and<font color="#E5E5E5"> the GPU</font>

773
00:31:52,610 --> 00:31:57,439
operations now<font color="#E5E5E5"> clearly since</font><font color="#CCCCCC"> it's a</font>

774
00:31:55,789 --> 00:31:59,509
synchronization<font color="#E5E5E5"> point these</font><font color="#CCCCCC"> are more</font>

775
00:31:57,440 --> 00:32:02,269
<font color="#E5E5E5">coarse-grained</font><font color="#CCCCCC"> and they're quite noisy</font>

776
00:31:59,509 --> 00:32:04,940
<font color="#E5E5E5">compared to the other ones but still the</font>

777
00:32:02,269 --> 00:32:07,009
disassembly purpose of<font color="#CCCCCC"> what</font><font color="#E5E5E5"> they</font><font color="#CCCCCC"> what we</font>

778
00:32:04,940 --> 00:32:09,919
need to do and<font color="#E5E5E5"> actually for</font><font color="#CCCCCC"> our attack</font>

779
00:32:07,009 --> 00:32:11,809
they don't really<font color="#E5E5E5"> matter because even if</font>

780
00:32:09,919 --> 00:32:14,179
you have<font color="#CCCCCC"> a</font><font color="#E5E5E5"> low resolution for these</font>

781
00:32:11,809 --> 00:32:15,350
timers<font color="#E5E5E5"> you can actually just increase</font>

782
00:32:14,179 --> 00:32:16,879
the<font color="#CCCCCC"> number of boxes that you perform</font>

783
00:32:15,350 --> 00:32:20,719
<font color="#E5E5E5">over the same access pattern and I will</font>

784
00:32:16,879 --> 00:32:21,799
get the result no<font color="#E5E5E5"> matter what and the</font>

785
00:32:20,720 --> 00:32:23,149
cool thing of<font color="#E5E5E5"> all</font><font color="#CCCCCC"> this is</font><font color="#E5E5E5"> that actually</font>

786
00:32:21,799 --> 00:32:25,850
<font color="#CCCCCC">you can drive all the attacks such as</font>

787
00:32:23,149 --> 00:32:26,840
spectra<font color="#E5E5E5"> in a browser by using this time</font>

788
00:32:25,850 --> 00:32:30,860
instead<font color="#CCCCCC"> of the one</font><font color="#E5E5E5"> that they just</font>

789
00:32:26,840 --> 00:32:34,039
disabled so you<font color="#CCCCCC"> get all the primitives</font>

790
00:32:30,860 --> 00:32:37,129
now the question is what do<font color="#E5E5E5"> we do with</font>

791
00:32:34,039 --> 00:32:39,019
this<font color="#E5E5E5"> permit is now and the answer is</font>

792
00:32:37,129 --> 00:32:42,289
rebuild<font color="#CCCCCC"> an exploit</font><font color="#E5E5E5"> because otherwise</font>

793
00:32:39,019 --> 00:32:43,399
it's pointless<font color="#E5E5E5"> so we need that proof of</font>

794
00:32:42,289 --> 00:32:45,980
<font color="#CCCCCC">concept to</font><font color="#E5E5E5"> show that is actually a</font>

795
00:32:43,399 --> 00:32:49,850
threat otherwise<font color="#CCCCCC"> er there was nothing</font><font color="#E5E5E5"> to</font>

796
00:32:45,980 --> 00:32:52,369
<font color="#CCCCCC">show this and our</font><font color="#E5E5E5"> target was Firefox on</font>

797
00:32:49,850 --> 00:32:54,529
Android and the reason why we<font color="#CCCCCC"> chose</font>

798
00:32:52,369 --> 00:32:56,809
Firefox was simply because<font color="#CCCCCC"> it was easier</font>

799
00:32:54,529 --> 00:32:57,889
to exploit<font color="#E5E5E5"> than chrome actually</font><font color="#CCCCCC"> all the</font>

800
00:32:56,809 --> 00:33:00,168
previous research<font color="#CCCCCC"> so everything</font>

801
00:32:57,889 --> 00:33:02,990
explained so<font color="#CCCCCC"> far all the</font><font color="#E5E5E5"> primitives we</font>

802
00:33:00,169 --> 00:33:04,879
first found them in<font color="#E5E5E5"> chrome so the whole</font>

803
00:33:02,990 --> 00:33:07,009
study was done in<font color="#E5E5E5"> chrome but anyway it</font>

804
00:33:04,879 --> 00:33:08,418
<font color="#E5E5E5">was time</font><font color="#CCCCCC"> to build exploit itself we</font>

805
00:33:07,009 --> 00:33:10,639
moved to Firefox because<font color="#E5E5E5"> there was more</font>

806
00:33:08,419 --> 00:33:12,919
<font color="#E5E5E5">documentation online so friends that</font>

807
00:33:10,639 --> 00:33:16,189
there was a really nice<font color="#CCCCCC"> frock article by</font>

808
00:33:12,919 --> 00:33:17,779
art<font color="#E5E5E5"> P and then some nice blog post by</font>

809
00:33:16,190 --> 00:33:19,309
silo

810
00:33:17,779 --> 00:33:22,599
which he<font color="#E5E5E5"> might be actually playing now</font>

811
00:33:19,309 --> 00:33:25,399
for<font color="#CCCCCC"> the CTF so I'm not sure</font><font color="#E5E5E5"> if</font><font color="#CCCCCC"> easier</font>

812
00:33:22,599 --> 00:33:28,158
anyway<font color="#CCCCCC"> what is a glitch sir how does it</font>

813
00:33:25,399 --> 00:33:30,978
work on glitch is a flip<font color="#E5E5E5"> Feng Shui in</font>

814
00:33:28,159 --> 00:33:34,639
JavaScript and the flipping show is a

815
00:33:30,979 --> 00:33:36,409
term that we coined in our group<font color="#E5E5E5"> and it</font>

816
00:33:34,639 --> 00:33:38,779
<font color="#E5E5E5">runs in three stages basically it's a</font>

817
00:33:36,409 --> 00:33:40,609
memory templating at first<font color="#E5E5E5"> so what you</font>

818
00:33:38,779 --> 00:33:43,070
need<font color="#E5E5E5"> to do at the beginning is basically</font>

819
00:33:40,609 --> 00:33:46,340
allocate a<font color="#E5E5E5"> lot of memory</font><font color="#CCCCCC"> and look for</font>

820
00:33:43,070 --> 00:33:47,928
bit flips there so<font color="#CCCCCC"> you</font><font color="#E5E5E5"> just allocate all</font>

821
00:33:46,340 --> 00:33:49,939
<font color="#E5E5E5">this big chunk of</font><font color="#CCCCCC"> memories</font><font color="#E5E5E5"> come for B</font>

822
00:33:47,929 --> 00:33:54,739
flip to find the bits that you<font color="#E5E5E5"> can use</font>

823
00:33:49,940 --> 00:33:57,229
later<font color="#CCCCCC"> on for</font><font color="#E5E5E5"> a</font><font color="#CCCCCC"> preowned attack then you</font>

824
00:33:54,739 --> 00:33:59,539
have a<font color="#E5E5E5"> memory massaging which is a the</font>

825
00:33:57,229 --> 00:34:01,190
moment<font color="#E5E5E5"> when you actually found the B</font>

826
00:33:59,539 --> 00:34:04,609
<font color="#E5E5E5">slip and you want to release this memory</font>

827
00:34:01,190 --> 00:34:08,389
to spawn to trigger some allocation of a

828
00:34:04,609 --> 00:34:09,500
victim<font color="#CCCCCC"> data structure and eventually the</font>

829
00:34:08,389 --> 00:34:11,029
<font color="#E5E5E5">exploitation which is the interesting</font>

830
00:34:09,500 --> 00:34:14,089
bit here and<font color="#E5E5E5"> which</font><font color="#CCCCCC"> is the</font><font color="#E5E5E5"> one we're</font>

831
00:34:11,029 --> 00:34:15,319
<font color="#CCCCCC">going to analyze and this is the</font>

832
00:34:14,089 --> 00:34:17,089
<font color="#E5E5E5">expectation is actually how you</font>

833
00:34:15,319 --> 00:34:20,418
<font color="#E5E5E5">compromise the data structure and what</font>

834
00:34:17,089 --> 00:34:22,849
you<font color="#E5E5E5"> actually</font><font color="#CCCCCC"> compromise so what is the</font>

835
00:34:20,418 --> 00:34:26,089
target<font color="#E5E5E5"> of our exploit the target our</font>

836
00:34:22,849 --> 00:34:28,849
JavaScript arrays<font color="#E5E5E5"> and this is an example</font>

837
00:34:26,089 --> 00:34:32,078
<font color="#E5E5E5">of an allocation when array so let's say</font>

838
00:34:28,849 --> 00:34:34,399
<font color="#E5E5E5">you locate an array with a hundred dots</font>

839
00:34:32,079 --> 00:34:35,960
then what you<font color="#E5E5E5"> can do is if</font><font color="#CCCCCC"> you want you</font>

840
00:34:34,399 --> 00:34:38,379
<font color="#E5E5E5">can allocate in the first slot an</font>

841
00:34:35,960 --> 00:34:40,970
integer<font color="#E5E5E5"> so I just say array 0 equal 1</font>

842
00:34:38,379 --> 00:34:44,299
then you<font color="#E5E5E5"> can store a double in the same</font>

843
00:34:40,969 --> 00:34:46,868
array an object so<font color="#CCCCCC"> you just allocate a</font>

844
00:34:44,299 --> 00:34:49,190
new array inside there and<font color="#E5E5E5"> you</font><font color="#CCCCCC"> can just</font>

845
00:34:46,869 --> 00:34:50,659
<font color="#CCCCCC">pass</font><font color="#E5E5E5"> whatever data type you want</font>

846
00:34:49,190 --> 00:34:52,609
<font color="#CCCCCC">basically in the array that we</font><font color="#E5E5E5"> store</font>

847
00:34:50,659 --> 00:34:54,440
everything<font color="#E5E5E5"> you want in there Gmail</font>

848
00:34:52,609 --> 00:34:58,308
doubles pointer to strings pointer to

849
00:34:54,440 --> 00:35:00,829
function<font color="#CCCCCC"> boolean</font><font color="#E5E5E5"> whatnot and</font><font color="#CCCCCC"> clear this</font>

850
00:34:58,309 --> 00:35:03,559
<font color="#E5E5E5">is not</font><font color="#CCCCCC"> so</font><font color="#E5E5E5"> easy to implement in a safe</font>

851
00:35:00,829 --> 00:35:06,559
way<font color="#E5E5E5"> but the more important</font><font color="#CCCCCC"> question that</font>

852
00:35:03,559 --> 00:35:08,329
a browser developer would think is

853
00:35:06,559 --> 00:35:10,210
<font color="#E5E5E5">actually how</font><font color="#CCCCCC"> would you do it</font><font color="#E5E5E5"> in an</font>

854
00:35:08,329 --> 00:35:14,630
efficient way not just<font color="#E5E5E5"> in</font><font color="#CCCCCC"> the secure way</font>

855
00:35:10,210 --> 00:35:15,619
and the<font color="#E5E5E5"> answer is a non boxing now how</font>

856
00:35:14,630 --> 00:35:20,650
many<font color="#E5E5E5"> of you actually</font><font color="#CCCCCC"> are</font><font color="#E5E5E5"> worried about</font>

857
00:35:15,619 --> 00:35:25,720
non boxing before<font color="#E5E5E5"> C well</font><font color="#CCCCCC"> okay</font><font color="#E5E5E5"> few</font><font color="#CCCCCC"> ones</font>

858
00:35:20,650 --> 00:35:28,230
so<font color="#CCCCCC"> num boxing is a property of a double</font>

859
00:35:25,720 --> 00:35:31,618
double<font color="#CCCCCC"> floating point</font>

860
00:35:28,230 --> 00:35:33,089
encoding so the<font color="#CCCCCC"> way they are typically a</font>

861
00:35:31,619 --> 00:35:35,630
consortium decided to store

862
00:35:33,089 --> 00:35:38,339
floating-point numbers<font color="#E5E5E5"> was by using the</font>

863
00:35:35,630 --> 00:35:40,500
exponential notation<font color="#E5E5E5"> so in this case</font>

864
00:35:38,339 --> 00:35:44,759
let's<font color="#E5E5E5"> say you have these two numbers 1.1</font>

865
00:35:40,500 --> 00:35:49,049
25 and 11.25<font color="#E5E5E5"> the way that will be stored</font>

866
00:35:44,760 --> 00:35:52,890
is you just have the<font color="#E5E5E5"> same value for the</font>

867
00:35:49,049 --> 00:35:55,970
significant in a different exponent so

868
00:35:52,890 --> 00:35:55,970
the<font color="#CCCCCC"> significant is going to be always</font>

869
00:35:56,059 --> 00:36:00,150
<font color="#E5E5E5">1125 why the exponent is gonna change</font>

870
00:35:58,230 --> 00:36:03,720
<font color="#E5E5E5">between to the power</font><font color="#CCCCCC"> of minus</font><font color="#E5E5E5"> 2 and</font>

871
00:36:00,150 --> 00:36:07,410
minus<font color="#CCCCCC"> 3 now the way you see it in binary</font>

872
00:36:03,720 --> 00:36:08,730
<font color="#CCCCCC">instead is you will have</font><font color="#E5E5E5"> a sign bit here</font>

873
00:36:07,410 --> 00:36:12,149
which decides if it's<font color="#E5E5E5"> a positive or</font>

874
00:36:08,730 --> 00:36:15,119
<font color="#CCCCCC">negative number then 11 bits for the</font>

875
00:36:12,150 --> 00:36:16,710
exponent<font color="#CCCCCC"> and eventually</font><font color="#E5E5E5"> a 52 bits for</font>

876
00:36:15,119 --> 00:36:21,180
the mantissa which is the significant of

877
00:36:16,710 --> 00:36:23,790
the of the number so now as you can<font color="#CCCCCC"> see</font>

878
00:36:21,180 --> 00:36:25,549
<font color="#E5E5E5">you have one dot</font><font color="#CCCCCC"> 125-year and the</font>

879
00:36:23,790 --> 00:36:27,720
exponent bits are almost all set to<font color="#E5E5E5"> 1</font>

880
00:36:25,549 --> 00:36:29,990
what happens<font color="#CCCCCC"> when you actually</font><font color="#E5E5E5"> change</font>

881
00:36:27,720 --> 00:36:32,759
also<font color="#E5E5E5"> the last one and you set it</font><font color="#CCCCCC"> to 1</font>

882
00:36:29,990 --> 00:36:34,799
what happens<font color="#CCCCCC"> is</font><font color="#E5E5E5"> that the the value</font>

883
00:36:32,760 --> 00:36:38,420
changes in none and none stands for not

884
00:36:34,799 --> 00:36:40,530
a number<font color="#CCCCCC"> so basically you</font><font color="#E5E5E5"> have inside</font><font color="#CCCCCC"> a</font>

885
00:36:38,420 --> 00:36:42,240
<font color="#CCCCCC">number encoding because floating points</font>

886
00:36:40,530 --> 00:36:44,760
are numbers<font color="#CCCCCC"> you have a value which</font><font color="#E5E5E5"> is</font>

887
00:36:42,240 --> 00:36:45,828
<font color="#E5E5E5">called not a number and this value</font>

888
00:36:44,760 --> 00:36:48,270
clearly you cannot use it<font color="#CCCCCC"> for</font><font color="#E5E5E5"> any</font>

889
00:36:45,829 --> 00:36:50,700
mathematical computations because<font color="#E5E5E5"> it's</font>

890
00:36:48,270 --> 00:36:52,170
not useful<font color="#E5E5E5"> for that so what you get</font>

891
00:36:50,700 --> 00:36:56,490
basically<font color="#E5E5E5"> is you have a</font><font color="#CCCCCC"> two to a part of</font>

892
00:36:52,170 --> 00:36:58,470
theta<font color="#CCCCCC"> V minus one</font><font color="#E5E5E5"> I</font><font color="#CCCCCC"> News values and this</font>

893
00:36:56,490 --> 00:37:01,319
because you<font color="#E5E5E5"> have 50 bits of mantissa</font>

894
00:36:58,470 --> 00:37:02,730
<font color="#CCCCCC">plus one of the sign and one of the bits</font>

895
00:37:01,319 --> 00:37:04,049
of<font color="#E5E5E5"> the mantissa needs to be set to</font><font color="#CCCCCC"> one</font>

896
00:37:02,730 --> 00:37:08,069
<font color="#E5E5E5">otherwise that the value would be</font>

897
00:37:04,049 --> 00:37:10,980
considered as infinity<font color="#CCCCCC"> and clearly smart</font>

898
00:37:08,069 --> 00:37:12,450
people smart<font color="#CCCCCC"> browser developers</font><font color="#E5E5E5"> thought</font>

899
00:37:10,980 --> 00:37:15,480
well what if<font color="#CCCCCC"> we stir pointers in there</font>

900
00:37:12,450 --> 00:37:18,960
<font color="#E5E5E5">because that's</font><font color="#CCCCCC"> actually a good way to do</font>

901
00:37:15,480 --> 00:37:21,660
it<font color="#CCCCCC"> is</font><font color="#E5E5E5"> actually a very</font><font color="#CCCCCC"> clever trick so</font>

902
00:37:18,960 --> 00:37:23,280
what they do in<font color="#E5E5E5"> Firefox 32</font><font color="#CCCCCC"> bits and 30</font>

903
00:37:21,660 --> 00:37:26,460
bits in this case is<font color="#E5E5E5"> because we're</font>

904
00:37:23,280 --> 00:37:28,730
targeting a nexus 5 but the same

905
00:37:26,460 --> 00:37:31,410
technique actually<font color="#E5E5E5"> is used almost of</font>

906
00:37:28,730 --> 00:37:32,490
normal browsers<font color="#CCCCCC"> not nowadays so the</font><font color="#E5E5E5"> only</font>

907
00:37:31,410 --> 00:37:35,490
one that doesn't<font color="#E5E5E5"> use it I think</font><font color="#CCCCCC"> it's</font>

908
00:37:32,490 --> 00:37:38,399
Chrome Safari and Firefox 64<font color="#CCCCCC"> bits they</font>

909
00:37:35,490 --> 00:37:42,100
all use an unboxing no matter what but

910
00:37:38,400 --> 00:37:43,630
what happens on 32 bits<font color="#E5E5E5"> Firefox is that</font>

911
00:37:42,100 --> 00:37:46,290
if you have<font color="#CCCCCC"> to</font><font color="#E5E5E5"> values such as this ones</font>

912
00:37:43,630 --> 00:37:49,210
<font color="#E5E5E5">whatever</font><font color="#CCCCCC"> we do is out of the 64 bits</font>

913
00:37:46,290 --> 00:37:51,550
that we split the value<font color="#CCCCCC"> into and</font><font color="#E5E5E5"> it will</font>

914
00:37:49,210 --> 00:37:54,970
<font color="#CCCCCC">have the first</font><font color="#E5E5E5"> 32 bits</font><font color="#CCCCCC"> the higher 32</font>

915
00:37:51,550 --> 00:37:56,370
bits<font color="#CCCCCC"> use</font><font color="#E5E5E5"> the stug and the lower tube is</font>

916
00:37:54,970 --> 00:37:58,750
<font color="#CCCCCC">used as payload</font>

917
00:37:56,370 --> 00:38:01,839
now if the tag is<font color="#E5E5E5"> less than a specific</font>

918
00:37:58,750 --> 00:38:06,670
<font color="#E5E5E5">threshold value at the whole</font><font color="#CCCCCC"> 64 bits</font>

919
00:38:01,840 --> 00:38:08,370
will<font color="#CCCCCC"> be used as a double value</font><font color="#E5E5E5"> so that</font>

920
00:38:06,670 --> 00:38:11,530
would be all considered as<font color="#E5E5E5"> a number</font>

921
00:38:08,370 --> 00:38:13,600
otherwise if the tag is<font color="#E5E5E5"> higher than that</font>

922
00:38:11,530 --> 00:38:17,140
value this is going to be considered as

923
00:38:13,600 --> 00:38:18,970
a pointer<font color="#CCCCCC"> to an object and then what you</font>

924
00:38:17,140 --> 00:38:20,259
<font color="#E5E5E5">can do is by using the target by</font>

925
00:38:18,970 --> 00:38:21,819
changing the tag<font color="#E5E5E5"> you</font><font color="#CCCCCC"> can change the type</font>

926
00:38:20,260 --> 00:38:23,670
of<font color="#CCCCCC"> object</font><font color="#E5E5E5"> so</font><font color="#CCCCCC"> you may have a string that</font>

927
00:38:21,820 --> 00:38:25,390
<font color="#CCCCCC">has specific</font><font color="#E5E5E5"> tag then you have a</font>

928
00:38:23,670 --> 00:38:30,100
function that<font color="#CCCCCC"> have a different tag</font>

929
00:38:25,390 --> 00:38:31,839
boolean as well<font color="#CCCCCC"> and so on so what</font>

930
00:38:30,100 --> 00:38:34,089
happens here<font color="#E5E5E5"> is</font><font color="#CCCCCC"> that if for instance you</font>

931
00:38:31,840 --> 00:38:37,630
have<font color="#E5E5E5"> these</font><font color="#CCCCCC"> values that</font><font color="#E5E5E5"> are stored in the</font>

932
00:38:34,090 --> 00:38:40,000
cells of<font color="#CCCCCC"> array</font><font color="#E5E5E5"> 1 and read</font><font color="#CCCCCC"> 2 in memory</font>

933
00:38:37,630 --> 00:38:43,360
the way you're<font color="#CCCCCC"> just contends is we see</font>

934
00:38:40,000 --> 00:38:44,920
them<font color="#CCCCCC"> as</font><font color="#E5E5E5"> a as two different bodies</font><font color="#CCCCCC"> so one</font>

935
00:38:43,360 --> 00:38:48,760
is<font color="#CCCCCC"> gonna be a double and the second one</font>

936
00:38:44,920 --> 00:38:50,940
is gonna be a pointer and<font color="#E5E5E5"> here as</font><font color="#CCCCCC"> you</font>

937
00:38:48,760 --> 00:38:53,010
can<font color="#E5E5E5"> see you</font><font color="#CCCCCC"> just</font><font color="#E5E5E5"> have the same payload</font>

938
00:38:50,940 --> 00:38:55,810
<font color="#E5E5E5">because the payload is completely</font>

939
00:38:53,010 --> 00:38:58,030
<font color="#E5E5E5">identical but it's just</font><font color="#CCCCCC"> that</font><font color="#E5E5E5"> one bit of</font>

940
00:38:55,810 --> 00:38:59,880
difference<font color="#E5E5E5"> in the</font><font color="#CCCCCC"> tag</font><font color="#E5E5E5"> and</font><font color="#CCCCCC"> one is the</font>

941
00:38:58,030 --> 00:39:02,910
<font color="#E5E5E5">number and the other one is a pointer</font>

942
00:38:59,880 --> 00:39:05,830
now when you think in<font color="#E5E5E5"> terms of</font><font color="#CCCCCC"> a runner</font>

943
00:39:02,910 --> 00:39:09,250
<font color="#E5E5E5">one bit difference is one bit flip away</font>

944
00:39:05,830 --> 00:39:12,160
<font color="#E5E5E5">basically so what we can do and this is</font>

945
00:39:09,250 --> 00:39:14,710
our actual primitive on the browser<font color="#E5E5E5"> it's</font>

946
00:39:12,160 --> 00:39:16,720
type flipping so what you can do is

947
00:39:14,710 --> 00:39:20,110
<font color="#CCCCCC">basically by triggering</font><font color="#E5E5E5"> a 1 to 0 bit</font>

948
00:39:16,720 --> 00:39:22,209
flip on<font color="#E5E5E5"> a pointer</font><font color="#CCCCCC"> you</font><font color="#E5E5E5"> can convert it</font>

949
00:39:20,110 --> 00:39:23,740
<font color="#CCCCCC">into a double number which means you can</font>

950
00:39:22,210 --> 00:39:24,190
lick any point that you want<font color="#E5E5E5"> in the</font>

951
00:39:23,740 --> 00:39:27,669
browser

952
00:39:24,190 --> 00:39:31,300
<font color="#E5E5E5">and the other way around with the</font><font color="#CCCCCC"> 0 to</font><font color="#E5E5E5"> 1</font>

953
00:39:27,670 --> 00:39:33,280
<font color="#E5E5E5">bits</font><font color="#CCCCCC"> lip</font><font color="#E5E5E5"> you can convert any pointer any</font>

954
00:39:31,300 --> 00:39:37,210
double into a pointer so<font color="#CCCCCC"> you can create</font>

955
00:39:33,280 --> 00:39:38,980
references to any object<font color="#E5E5E5"> you want so</font>

956
00:39:37,210 --> 00:39:41,710
this<font color="#E5E5E5"> gives us two primitives an</font>

957
00:39:38,980 --> 00:39:44,620
arbitrary<font color="#CCCCCC"> lick with</font><font color="#E5E5E5"> a 1 to 0 bit flipper</font>

958
00:39:41,710 --> 00:39:48,160
and arbitrary craft with a 0 to 1 be

959
00:39:44,620 --> 00:39:49,839
flippin now<font color="#CCCCCC"> if earlier we're paying</font>

960
00:39:48,160 --> 00:39:52,690
attention<font color="#CCCCCC"> to the wrong lyrics to the</font>

961
00:39:49,840 --> 00:39:54,610
<font color="#CCCCCC">dilemma explanation you may be wondering</font>

962
00:39:52,690 --> 00:39:55,790
how is<font color="#E5E5E5"> it possible to get a</font><font color="#CCCCCC"> 0 to 1</font>

963
00:39:54,610 --> 00:39:57,860
<font color="#CCCCCC">bishop since</font>

964
00:39:55,790 --> 00:40:00,110
is<font color="#E5E5E5"> actually a lick of charge from memory</font>

965
00:39:57,860 --> 00:40:02,390
<font color="#E5E5E5">and the answer is that the actual</font>

966
00:40:00,110 --> 00:40:04,400
logical data that you see<font color="#CCCCCC"> that your CPU</font>

967
00:40:02,390 --> 00:40:06,859
<font color="#CCCCCC">see is not</font><font color="#E5E5E5"> the data is stored in theorem</font>

968
00:40:04,400 --> 00:40:09,650
<font color="#E5E5E5">so</font><font color="#CCCCCC"> didim may</font><font color="#E5E5E5"> have like some specific</font>

969
00:40:06,860 --> 00:40:14,390
encoding happening at the capacitor

970
00:40:09,650 --> 00:40:17,120
levels<font color="#E5E5E5"> for improving the storage of the</font>

971
00:40:14,390 --> 00:40:18,470
data<font color="#E5E5E5"> and</font><font color="#CCCCCC"> as a consequence</font><font color="#E5E5E5"> some data some</font>

972
00:40:17,120 --> 00:40:22,640
ones can<font color="#E5E5E5"> be stored as zeros and</font>

973
00:40:18,470 --> 00:40:24,740
<font color="#CCCCCC">vice-versa so now what do we do</font><font color="#E5E5E5"> well the</font>

974
00:40:22,640 --> 00:40:26,509
goal of our exploit was actually to<font color="#E5E5E5"> just</font>

975
00:40:24,740 --> 00:40:29,089
gain<font color="#CCCCCC"> an arbitrary tried to show that it</font>

976
00:40:26,510 --> 00:40:32,120
<font color="#E5E5E5">was</font><font color="#CCCCCC"> possible to compromise the</font><font color="#E5E5E5"> browser</font>

977
00:40:29,090 --> 00:40:34,070
by doing so<font color="#E5E5E5"> and every day we'd write</font>

978
00:40:32,120 --> 00:40:35,060
it's just basically a data structure<font color="#E5E5E5"> in</font>

979
00:40:34,070 --> 00:40:38,540
the browser<font color="#E5E5E5"> that</font><font color="#CCCCCC"> allows you to scan the</font>

980
00:40:35,060 --> 00:40:40,610
<font color="#CCCCCC">whole</font><font color="#E5E5E5"> bit</font><font color="#CCCCCC"> phone memory</font><font color="#E5E5E5"> and when you</font>

981
00:40:38,540 --> 00:40:42,560
think<font color="#CCCCCC"> about the arbitrary did write in</font>

982
00:40:40,610 --> 00:40:45,320
JavaScript<font color="#E5E5E5"> the main data structure you</font>

983
00:40:42,560 --> 00:40:48,460
think<font color="#E5E5E5"> about our array buffers so</font><font color="#CCCCCC"> nary</font>

984
00:40:45,320 --> 00:40:51,020
buffer is basically a byte array that

985
00:40:48,460 --> 00:40:54,080
<font color="#E5E5E5">has a header that points to basically a</font>

986
00:40:51,020 --> 00:40:56,060
this byte array and as a specific size

987
00:40:54,080 --> 00:40:59,080
clearly<font color="#E5E5E5"> since these are all constrained</font>

988
00:40:56,060 --> 00:41:01,340
objects so you'll have<font color="#CCCCCC"> these specific</font>

989
00:40:59,080 --> 00:41:02,840
boundaries of the<font color="#E5E5E5"> array which</font><font color="#CCCCCC"> means if</font>

990
00:41:01,340 --> 00:41:07,370
you<font color="#CCCCCC"> want</font><font color="#E5E5E5"> to</font><font color="#CCCCCC"> perform an Autobahn the</font>

991
00:41:02,840 --> 00:41:08,870
access you will<font color="#E5E5E5"> get an error and as a</font>

992
00:41:07,370 --> 00:41:11,569
consequence what<font color="#E5E5E5"> you actually want to do</font>

993
00:41:08,870 --> 00:41:13,069
is you<font color="#E5E5E5"> will want</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> create a fake array</font>

994
00:41:11,570 --> 00:41:14,750
buffer inside the right buffer<font color="#E5E5E5"> so you</font>

995
00:41:13,070 --> 00:41:17,140
can use the array buffer as a tool to

996
00:41:14,750 --> 00:41:20,180
<font color="#CCCCCC">create your</font><font color="#E5E5E5"> own fake array buffer and</font>

997
00:41:17,140 --> 00:41:21,560
then eventually<font color="#E5E5E5"> also want to</font><font color="#CCCCCC"> reference</font>

998
00:41:20,180 --> 00:41:24,770
this fake<font color="#CCCCCC"> array buffer because we want</font>

999
00:41:21,560 --> 00:41:27,320
to<font color="#E5E5E5"> use</font><font color="#CCCCCC"> it as a real one right now the</font>

1000
00:41:24,770 --> 00:41:29,060
<font color="#E5E5E5">challenges here are</font><font color="#CCCCCC"> two and the first</font>

1001
00:41:27,320 --> 00:41:30,830
<font color="#E5E5E5">one is that inside the header there are</font>

1002
00:41:29,060 --> 00:41:33,350
some unknown fields so for instance the

1003
00:41:30,830 --> 00:41:34,850
garbage collector<font color="#CCCCCC"> route is is in there</font>

1004
00:41:33,350 --> 00:41:38,060
but you don't<font color="#CCCCCC"> know</font><font color="#E5E5E5"> you</font><font color="#CCCCCC"> don't</font><font color="#E5E5E5"> know this</font>

1005
00:41:34,850 --> 00:41:40,250
<font color="#E5E5E5">data and as a consequence when you want</font>

1006
00:41:38,060 --> 00:41:41,900
to<font color="#E5E5E5"> create your fake version of the array</font>

1007
00:41:40,250 --> 00:41:43,370
buffer<font color="#E5E5E5"> this</font><font color="#CCCCCC"> is not</font><font color="#E5E5E5"> going to be easy</font>

1008
00:41:41,900 --> 00:41:46,850
because you need to<font color="#E5E5E5"> first lick this data</font>

1009
00:41:43,370 --> 00:41:49,880
and the second one is<font color="#E5E5E5"> that is</font><font color="#CCCCCC"> that you</font>

1010
00:41:46,850 --> 00:41:52,040
don't know the<font color="#E5E5E5"> data location so the the</font>

1011
00:41:49,880 --> 00:41:54,800
header<font color="#E5E5E5"> you can lick the the pointer to</font>

1012
00:41:52,040 --> 00:41:56,650
<font color="#E5E5E5">the header by using the the be flipping</font>

1013
00:41:54,800 --> 00:41:58,940
technique<font color="#E5E5E5"> so the</font><font color="#CCCCCC"> type flipping technique</font>

1014
00:41:56,650 --> 00:42:00,830
but it doesn't<font color="#E5E5E5"> this</font><font color="#CCCCCC"> doesn't work for the</font>

1015
00:41:58,940 --> 00:42:02,510
<font color="#E5E5E5">byte array right because it might be</font>

1016
00:42:00,830 --> 00:42:05,150
displaced somewhere else in visual

1017
00:42:02,510 --> 00:42:08,480
memory so<font color="#CCCCCC"> to solve the second one which</font>

1018
00:42:05,150 --> 00:42:09,430
was<font color="#E5E5E5"> the trivial version</font><font color="#CCCCCC"> it's we can use</font>

1019
00:42:08,480 --> 00:42:12,819
<font color="#E5E5E5">an</font><font color="#CCCCCC"> inline</font>

1020
00:42:09,430 --> 00:42:15,190
offers so<font color="#E5E5E5"> Firefox what it does is if the</font>

1021
00:42:12,819 --> 00:42:17,670
array are smaller of a specific<font color="#E5E5E5"> size it</font>

1022
00:42:15,190 --> 00:42:19,300
will store the data<font color="#E5E5E5"> and the header</font>

1023
00:42:17,670 --> 00:42:22,420
<font color="#E5E5E5">sequential in</font><font color="#CCCCCC"> memory</font><font color="#E5E5E5"> there are</font>

1024
00:42:19,300 --> 00:42:25,089
contiguous<font color="#CCCCCC"> memory so once you take the</font>

1025
00:42:22,420 --> 00:42:27,010
pointer to<font color="#E5E5E5"> the to the header you will</font>

1026
00:42:25,089 --> 00:42:31,509
know the offset to the<font color="#E5E5E5"> to the actual</font>

1027
00:42:27,010 --> 00:42:34,569
data you<font color="#CCCCCC"> just created and you can lick</font>

1028
00:42:31,510 --> 00:42:36,550
it<font color="#E5E5E5"> this way for</font><font color="#CCCCCC"> the second one instead</font>

1029
00:42:34,569 --> 00:42:39,609
which is<font color="#CCCCCC"> a bit</font><font color="#E5E5E5"> more complicated we first</font>

1030
00:42:36,550 --> 00:42:42,010
<font color="#E5E5E5">need to get an arbitrary region and</font><font color="#CCCCCC"> the</font>

1031
00:42:39,609 --> 00:42:46,230
<font color="#CCCCCC">arbiter we can get it by using the Java</font>

1032
00:42:42,010 --> 00:42:48,609
string class and<font color="#CCCCCC"> this is our</font><font color="#E5E5E5"> unicode 16</font>

1033
00:42:46,230 --> 00:42:52,150
strings<font color="#E5E5E5"> so basically they provide you a</font>

1034
00:42:48,609 --> 00:42:55,299
tool<font color="#E5E5E5"> that allows you to read any data in</font>

1035
00:42:52,150 --> 00:42:57,150
memory and the strings are defined like

1036
00:42:55,300 --> 00:42:59,380
<font color="#CCCCCC">this and</font><font color="#E5E5E5"> JavaScript so they have a flag</font>

1037
00:42:57,150 --> 00:43:01,510
<font color="#E5E5E5">more or less like this they will</font><font color="#CCCCCC"> have a</font>

1038
00:42:59,380 --> 00:43:03,790
flag<font color="#E5E5E5"> then which is the type of string</font>

1039
00:43:01,510 --> 00:43:05,890
<font color="#CCCCCC">you want</font><font color="#E5E5E5"> to create then it will as a</font>

1040
00:43:03,790 --> 00:43:09,250
landfill which are going<font color="#CCCCCC"> to</font><font color="#E5E5E5"> set with the</font>

1041
00:43:05,890 --> 00:43:10,960
buffer either<font color="#E5E5E5"> and eventually also a</font>

1042
00:43:09,250 --> 00:43:16,569
string pointer which is basically the

1043
00:43:10,960 --> 00:43:18,640
pointer to<font color="#E5E5E5"> the buffer itself so once you</font>

1044
00:43:16,569 --> 00:43:20,710
since we know all these three fields

1045
00:43:18,640 --> 00:43:23,770
that the<font color="#CCCCCC"> hacker contains what we can do</font>

1046
00:43:20,710 --> 00:43:25,720
now<font color="#CCCCCC"> is</font><font color="#E5E5E5"> basically again</font><font color="#CCCCCC"> we can basically</font>

1047
00:43:23,770 --> 00:43:28,599
put the string inside the<font color="#E5E5E5"> rate buffer so</font>

1048
00:43:25,720 --> 00:43:30,368
the fake<font color="#E5E5E5"> string gather reference it</font>

1049
00:43:28,599 --> 00:43:31,869
because we<font color="#E5E5E5"> already know that the pointer</font>

1050
00:43:30,369 --> 00:43:34,059
to the<font color="#E5E5E5"> to the header of</font><font color="#CCCCCC"> the array buffer</font>

1051
00:43:31,869 --> 00:43:37,329
<font color="#E5E5E5">and then lick the data of the of the</font>

1052
00:43:34,059 --> 00:43:40,690
header<font color="#E5E5E5"> so you can create it</font><font color="#CCCCCC"> we can</font>

1053
00:43:37,329 --> 00:43:43,450
create<font color="#E5E5E5"> the fake array buffer so to recap</font>

1054
00:43:40,690 --> 00:43:47,770
the<font color="#E5E5E5"> way this works is you just feel that</font>

1055
00:43:43,450 --> 00:43:49,210
<font color="#CCCCCC">way with some marker values then you</font>

1056
00:43:47,770 --> 00:43:52,089
just trigger the<font color="#E5E5E5"> bishops to see where</font>

1057
00:43:49,210 --> 00:43:53,260
the where the location that you found

1058
00:43:52,089 --> 00:43:55,660
that<font color="#E5E5E5"> they</font><font color="#CCCCCC"> were</font><font color="#E5E5E5"> come with this</font><font color="#CCCCCC"> were</font>

1059
00:43:53,260 --> 00:43:57,280
<font color="#E5E5E5">vulnerable are so will trigger the</font>

1060
00:43:55,660 --> 00:43:59,828
<font color="#CCCCCC">depend on</font><font color="#E5E5E5"> point</font><font color="#CCCCCC"> a we see</font><font color="#E5E5E5"> here by the</font>

1061
00:43:57,280 --> 00:44:02,200
<font color="#E5E5E5">changes and once you find</font><font color="#CCCCCC"> that</font><font color="#E5E5E5"> the</font>

1062
00:43:59,829 --> 00:44:06,990
<font color="#CCCCCC">values to changes you just allocate an</font>

1063
00:44:02,200 --> 00:44:10,828
array buffer from from the JavaScript

1064
00:44:06,990 --> 00:44:14,049
engine<font color="#CCCCCC"> and you will</font><font color="#E5E5E5"> reference it twice</font>

1065
00:44:10,829 --> 00:44:17,559
<font color="#E5E5E5">because then you will want</font><font color="#CCCCCC"> to lick one</font>

1066
00:44:14,049 --> 00:44:19,720
of the two references<font color="#CCCCCC"> by quit by just</font>

1067
00:44:17,559 --> 00:44:21,760
triggering one<font color="#CCCCCC"> base lip right so the</font>

1068
00:44:19,720 --> 00:44:23,359
expert runs in three stages now as we

1069
00:44:21,760 --> 00:44:25,760
said your first<font color="#E5E5E5"> break</font><font color="#CCCCCC"> a</font><font color="#E5E5E5"> SLR</font>

1070
00:44:23,360 --> 00:44:28,100
so you<font color="#CCCCCC"> three</font><font color="#E5E5E5"> got to be flip there you</font>

1071
00:44:25,760 --> 00:44:29,660
lick the pointer now you have<font color="#E5E5E5"> this</font>

1072
00:44:28,100 --> 00:44:31,160
pointer so it means<font color="#E5E5E5"> that</font><font color="#CCCCCC"> you can get the</font>

1073
00:44:29,660 --> 00:44:33,920
arbitrary<font color="#E5E5E5"> with because you just need</font>

1074
00:44:31,160 --> 00:44:35,960
<font color="#CCCCCC">this pointer</font><font color="#E5E5E5"> for the arbitrary</font><font color="#CCCCCC"> read so</font>

1075
00:44:33,920 --> 00:44:37,250
<font color="#E5E5E5">we'll create the fake string that points</font>

1076
00:44:35,960 --> 00:44:40,880
to the header of<font color="#CCCCCC"> the array buffer and</font>

1077
00:44:37,250 --> 00:44:42,710
<font color="#E5E5E5">you will place the fake double value</font>

1078
00:44:40,880 --> 00:44:43,550
which looks<font color="#E5E5E5"> like a pointer but is not</font>

1079
00:44:42,710 --> 00:44:45,920
yet a pointer

1080
00:44:43,550 --> 00:44:48,020
it's a<font color="#CCCCCC"> wannabe</font><font color="#E5E5E5"> pointer basically and</font>

1081
00:44:45,920 --> 00:44:51,050
then you trigger the<font color="#CCCCCC"> befit that will</font>

1082
00:44:48,020 --> 00:44:52,790
generate the string that allows you to

1083
00:44:51,050 --> 00:44:57,500
<font color="#E5E5E5">read the content of the of the array</font>

1084
00:44:52,790 --> 00:44:59,509
buffer<font color="#E5E5E5"> hider and then eventually once</font>

1085
00:44:57,500 --> 00:45:01,400
<font color="#CCCCCC">you lick the header you can</font><font color="#E5E5E5"> get the</font>

1086
00:44:59,510 --> 00:45:03,260
arbitrary right just like compromising

1087
00:45:01,400 --> 00:45:06,620
by creating the fake array buffer header

1088
00:45:03,260 --> 00:45:11,420
<font color="#E5E5E5">and the reference in</font><font color="#CCCCCC"> the same way as we</font>

1089
00:45:06,620 --> 00:45:13,310
did before<font color="#E5E5E5"> so this requires</font><font color="#CCCCCC"> to business</font>

1090
00:45:11,420 --> 00:45:16,550
as we said we need<font color="#E5E5E5"> one to</font><font color="#CCCCCC"> zero</font><font color="#E5E5E5"> bit</font>

1091
00:45:13,310 --> 00:45:17,779
flipper<font color="#E5E5E5"> and zero to one bit flip so</font>

1092
00:45:16,550 --> 00:45:21,380
how's it possible this actually runs

1093
00:45:17,780 --> 00:45:23,780
faster than<font color="#E5E5E5"> the pizza exploit but the</font>

1094
00:45:21,380 --> 00:45:26,570
answer is B and effective use the GPU

1095
00:45:23,780 --> 00:45:29,090
for<font color="#E5E5E5"> this so all three</font><font color="#CCCCCC"> search might</font><font color="#E5E5E5"> need</font>

1096
00:45:26,570 --> 00:45:31,670
to<font color="#CCCCCC"> epoch the</font><font color="#E5E5E5"> caches of the CPU which</font>

1097
00:45:29,090 --> 00:45:33,650
were too large apparently and they're

1098
00:45:31,670 --> 00:45:37,070
quite difficult to evict<font color="#E5E5E5"> whereas for the</font>

1099
00:45:33,650 --> 00:45:39,200
CPU at least<font color="#E5E5E5"> the one we studied it was</font>

1100
00:45:37,070 --> 00:45:40,730
much<font color="#CCCCCC"> faster and this allowed us</font><font color="#E5E5E5"> to get</font>

1101
00:45:39,200 --> 00:45:43,700
<font color="#E5E5E5">the business much faster than in</font>

1102
00:45:40,730 --> 00:45:47,060
different exploits so it<font color="#E5E5E5"> runs on around</font>

1103
00:45:43,700 --> 00:45:51,140
the 116 seconds on<font color="#CCCCCC"> average we tested</font><font color="#E5E5E5"> 20</font>

1104
00:45:47,060 --> 00:45:54,380
times<font color="#E5E5E5"> and out of this</font><font color="#CCCCCC"> 20 times</font><font color="#E5E5E5"> we we got</font>

1105
00:45:51,140 --> 00:45:56,180
<font color="#E5E5E5">the exploit working almost always and</font>

1106
00:45:54,380 --> 00:45:57,920
the time it didn't<font color="#CCCCCC"> work</font><font color="#E5E5E5"> it was</font><font color="#CCCCCC"> just</font>

1107
00:45:56,180 --> 00:45:59,750
because you were not able to reuse the

1108
00:45:57,920 --> 00:46:01,760
memory they were<font color="#E5E5E5"> tend to trigger the</font>

1109
00:45:59,750 --> 00:46:03,350
<font color="#CCCCCC">flip on so it's not</font><font color="#E5E5E5"> that exploited in</font>

1110
00:46:01,760 --> 00:46:06,500
work is just<font color="#E5E5E5"> we didn't have the</font><font color="#CCCCCC"> back-up</font>

1111
00:46:03,350 --> 00:46:09,830
<font color="#E5E5E5">plan of starting</font><font color="#CCCCCC"> again the exploit in</font>

1112
00:46:06,500 --> 00:46:15,580
that case now I'm gonna have a quick

1113
00:46:09,830 --> 00:46:15,580
demo so

1114
00:46:22,430 --> 00:46:25,540
[Music]

1115
00:46:27,569 --> 00:46:37,929
so so here what we<font color="#CCCCCC"> have</font><font color="#E5E5E5"> is basically on</font>

1116
00:46:35,169 --> 00:46:39,578
the left side<font color="#E5E5E5"> I've my own terminal</font><font color="#CCCCCC"> I'm</font>

1117
00:46:37,929 --> 00:46:41,559
not showing<font color="#E5E5E5"> the phone because since I'm</font>

1118
00:46:39,579 --> 00:46:43,619
using the GPU<font color="#CCCCCC"> to trigger the bit</font><font color="#E5E5E5"> flips</font><font color="#CCCCCC"> I</font>

1119
00:46:41,559 --> 00:46:47,349
cannot<font color="#E5E5E5"> use it to record the screen</font>

1120
00:46:43,619 --> 00:46:49,869
<font color="#CCCCCC">otherwise</font><font color="#E5E5E5"> they will clash so on the left</font>

1121
00:46:47,349 --> 00:46:52,089
side<font color="#E5E5E5"> at the other terminal</font><font color="#CCCCCC"> that connects</font>

1122
00:46:49,869 --> 00:46:53,319
to the<font color="#CCCCCC"> phone like ADB now on the right</font>

1123
00:46:52,089 --> 00:46:54,839
<font color="#CCCCCC">side I just have the console to the</font>

1124
00:46:53,319 --> 00:46:56,769
<font color="#E5E5E5">Firefox browser</font>

1125
00:46:54,839 --> 00:46:58,029
it's on the left<font color="#E5E5E5"> side I will have the</font>

1126
00:46:56,769 --> 00:47:02,499
ground through<font color="#CCCCCC"> basically and the right</font>

1127
00:46:58,029 --> 00:47:05,049
side is<font color="#CCCCCC"> actually exploit so</font><font color="#E5E5E5"> the</font><font color="#CCCCCC"> moment I</font>

1128
00:47:02,499 --> 00:47:06,609
start what we do is just<font color="#E5E5E5"> allocate a</font><font color="#CCCCCC"> lot</font>

1129
00:47:05,049 --> 00:47:08,288
<font color="#E5E5E5">of textures on the other side I just</font>

1130
00:47:06,609 --> 00:47:11,140
want to look<font color="#E5E5E5"> at the pointer to one of</font>

1131
00:47:08,289 --> 00:47:17,229
the<font color="#E5E5E5"> five the main Firefox library which</font>

1132
00:47:11,140 --> 00:47:18,879
is<font color="#E5E5E5"> the</font><font color="#CCCCCC"> actual</font><font color="#E5E5E5"> library on the other side</font>

1133
00:47:17,229 --> 00:47:21,968
and<font color="#CCCCCC"> just</font><font color="#E5E5E5"> uh I look at the</font><font color="#CCCCCC"> another</font><font color="#E5E5E5"> memory</font>

1134
00:47:18,880 --> 00:47:23,859
<font color="#E5E5E5">that</font><font color="#CCCCCC"> we want to</font><font color="#E5E5E5"> scan eventually so on</font>

1135
00:47:21,969 --> 00:47:26,019
the left<font color="#E5E5E5"> side now</font><font color="#CCCCCC"> I got the basically</font>

1136
00:47:23,859 --> 00:47:28,598
the base others of the dis library<font color="#CCCCCC"> on</font>

1137
00:47:26,019 --> 00:47:30,038
the right<font color="#E5E5E5"> side add enough allocation and</font>

1138
00:47:28,599 --> 00:47:33,099
<font color="#E5E5E5">I'm looking with that with</font><font color="#CCCCCC"> a</font><font color="#E5E5E5"> side</font>

1139
00:47:30,039 --> 00:47:37,059
channel<font color="#E5E5E5"> if it's contiguous or not now I</font>

1140
00:47:33,099 --> 00:47:40,890
found<font color="#CCCCCC"> the contiguous</font><font color="#E5E5E5"> block so let me see</font>

1141
00:47:37,059 --> 00:47:40,890
if<font color="#CCCCCC"> I can zoom in a bit</font><font color="#E5E5E5"> on this side</font>

1142
00:47:42,689 --> 00:47:48,669
maybe<font color="#CCCCCC"> this</font><font color="#E5E5E5"> was</font><font color="#CCCCCC"> not a</font><font color="#E5E5E5"> great idea anyway</font>

1143
00:47:47,529 --> 00:47:52,150
on this<font color="#E5E5E5"> side I'm</font><font color="#CCCCCC"> looking for bit flips</font>

1144
00:47:48,669 --> 00:47:53,529
now<font color="#E5E5E5"> and I found an extra business for a</font>

1145
00:47:52,150 --> 00:47:56,339
<font color="#E5E5E5">1 to 0</font><font color="#CCCCCC"> bit flip but I'm still looking</font>

1146
00:47:53,529 --> 00:47:56,339
for<font color="#E5E5E5"> the 0 to 1 now</font>

1147
00:48:08,900 --> 00:48:12,820
and there it is so now<font color="#CCCCCC"> as you</font><font color="#E5E5E5"> can</font><font color="#CCCCCC"> see</font>

1148
00:48:11,200 --> 00:48:16,450
basically I found the<font color="#CCCCCC"> two exploitable</font>

1149
00:48:12,820 --> 00:48:18,579
bit flips in less than<font color="#CCCCCC"> a bit more than</font>

1150
00:48:16,450 --> 00:48:22,720
<font color="#E5E5E5">one minute so I bought the bill faces I</font>

1151
00:48:18,579 --> 00:48:25,390
need<font color="#CCCCCC"> four for the attack so now what I</font>

1152
00:48:22,720 --> 00:48:29,200
<font color="#E5E5E5">need to do is basically release this</font>

1153
00:48:25,390 --> 00:48:31,180
texture and and then I started<font color="#E5E5E5"> locating</font>

1154
00:48:29,200 --> 00:48:35,290
a lot of JavaScript arrays on top of

1155
00:48:31,180 --> 00:48:37,299
this<font color="#E5E5E5"> memory so I look at 400 megabytes</font>

1156
00:48:35,290 --> 00:48:46,509
<font color="#E5E5E5">of arrays just play the memory with this</font>

1157
00:48:37,300 --> 00:48:48,869
data<font color="#CCCCCC"> and then I fill it with the market</font>

1158
00:48:46,510 --> 00:48:53,440
value as I said and then I look<font color="#E5E5E5"> for the</font>

1159
00:48:48,869 --> 00:48:55,930
for the bit flips so this is<font color="#E5E5E5"> actually</font>

1160
00:48:53,440 --> 00:49:01,270
what exploit works like the actual

1161
00:48:55,930 --> 00:49:02,890
exploitation part<font color="#CCCCCC"> well so what I do is</font>

1162
00:49:01,270 --> 00:49:05,020
again like<font color="#E5E5E5"> I just fill it with the micro</font>

1163
00:49:02,890 --> 00:49:06,520
values then<font color="#E5E5E5"> I break a star in the first</font>

1164
00:49:05,020 --> 00:49:08,650
<font color="#E5E5E5">step I said after</font><font color="#CCCCCC"> I found</font><font color="#E5E5E5"> both</font><font color="#CCCCCC"> of the</font>

1165
00:49:06,520 --> 00:49:10,540
bit flips<font color="#E5E5E5"> I just break</font><font color="#CCCCCC"> a</font><font color="#E5E5E5"> line</font><font color="#CCCCCC"> in the</font>

1166
00:49:08,650 --> 00:49:12,670
first<font color="#E5E5E5"> step licking the pointer to</font><font color="#CCCCCC"> the</font>

1167
00:49:10,540 --> 00:49:14,529
array buffer then I create a<font color="#CCCCCC"> fake</font><font color="#E5E5E5"> string</font>

1168
00:49:12,670 --> 00:49:16,089
and the content of<font color="#CCCCCC"> the fixed</font><font color="#E5E5E5"> thing is</font>

1169
00:49:14,530 --> 00:49:18,400
the one I show here<font color="#E5E5E5"> so that's the</font><font color="#CCCCCC"> only</font>

1170
00:49:16,089 --> 00:49:19,390
<font color="#E5E5E5">content that you need basically and then</font>

1171
00:49:18,400 --> 00:49:22,030
once you look<font color="#CCCCCC"> at the header of the rate</font>

1172
00:49:19,390 --> 00:49:23,799
buffer you can<font color="#CCCCCC"> create the fake buffer at</font>

1173
00:49:22,030 --> 00:49:27,339
the same location and then you<font color="#E5E5E5"> have the</font>

1174
00:49:23,800 --> 00:49:28,690
arbitrary<font color="#E5E5E5"> readwrite and now to show that</font>

1175
00:49:27,339 --> 00:49:32,109
I<font color="#E5E5E5"> have the arbitrary read read write</font>

1176
00:49:28,690 --> 00:49:37,599
<font color="#E5E5E5">basically just try to lick the</font><font color="#CCCCCC"> phaser</font><font color="#E5E5E5"> of</font>

1177
00:49:32,109 --> 00:49:42,328
the<font color="#CCCCCC"> F library so I just lick the</font><font color="#E5E5E5"> pointer</font>

1178
00:49:37,599 --> 00:49:42,329
to turn<font color="#E5E5E5"> ativ function</font>

1179
00:49:51,040 --> 00:49:59,560
time because<font color="#E5E5E5"> I just switch to the</font>

1180
00:49:52,510 --> 00:50:01,330
<font color="#E5E5E5">English keyboard so as you can</font><font color="#CCCCCC"> see</font><font color="#E5E5E5"> well</font>

1181
00:49:59,560 --> 00:50:03,279
actually<font color="#E5E5E5"> you cannot see it now but the</font>

1182
00:50:01,330 --> 00:50:13,240
<font color="#E5E5E5">the base address is the same</font><font color="#CCCCCC"> now I have</font>

1183
00:50:03,280 --> 00:50:17,410
the same pointer here and there so<font color="#CCCCCC"> NAB</font>

1184
00:50:13,240 --> 00:50:19,919
that<font color="#E5E5E5"> pointer and I try to lick</font><font color="#CCCCCC"> there the</font>

1185
00:50:17,410 --> 00:50:19,920
content<font color="#CCCCCC"> of that</font>

1186
00:50:40,240 --> 00:50:44,529
<font color="#E5E5E5">as you can see at the outside at the</font>

1187
00:50:42,670 --> 00:50:47,980
library<font color="#E5E5E5"> and now if I want</font><font color="#CCCCCC"> again just</font>

1188
00:50:44,530 --> 00:50:55,780
compromise some function pointers or

1189
00:50:47,980 --> 00:51:04,510
hotels so back to the final part<font color="#CCCCCC"> of the</font>

1190
00:50:55,780 --> 00:51:09,340
<font color="#E5E5E5">presentation so clearly we've we</font><font color="#CCCCCC"> follow</font>

1191
00:51:04,510 --> 00:51:10,930
<font color="#E5E5E5">the code</font><font color="#CCCCCC"> entry disclosure and</font><font color="#E5E5E5"> we talked</font>

1192
00:51:09,340 --> 00:51:12,970
a lot<font color="#CCCCCC"> with the browser vendors for this</font>

1193
00:51:10,930 --> 00:51:15,460
both<font color="#E5E5E5"> with most ability chrome</font><font color="#CCCCCC"> actually</font>

1194
00:51:12,970 --> 00:51:17,230
we followed the disclosure<font color="#CCCCCC"> and</font><font color="#E5E5E5"> we got</font>

1195
00:51:15,460 --> 00:51:20,500
help from<font color="#E5E5E5"> the</font><font color="#CCCCCC"> Dutchman CSE at that time</font>

1196
00:51:17,230 --> 00:51:23,020
and we chrome and discussed a lot<font color="#E5E5E5"> about</font>

1197
00:51:20,500 --> 00:51:25,090
<font color="#CCCCCC">the possible mitigation</font><font color="#E5E5E5"> for this now</font>

1198
00:51:23,020 --> 00:51:26,530
<font color="#CCCCCC">that time was also a tank that Specter</font>

1199
00:51:25,090 --> 00:51:28,990
<font color="#E5E5E5">came out so they were mostly scared</font>

1200
00:51:26,530 --> 00:51:31,930
about<font color="#E5E5E5"> side channels so they mostly</font>

1201
00:51:28,990 --> 00:51:35,229
release patches against<font color="#E5E5E5"> the</font><font color="#CCCCCC"> timers now</font>

1202
00:51:31,930 --> 00:51:37,839
for instance<font color="#CCCCCC"> with the new process</font>

1203
00:51:35,230 --> 00:51:39,580
isolation<font color="#E5E5E5"> so the process</font><font color="#CCCCCC"> progeny</font>

1204
00:51:37,840 --> 00:51:42,070
isolation that<font color="#CCCCCC"> would probably renewable</font>

1205
00:51:39,580 --> 00:51:44,710
<font color="#E5E5E5">designers or maybe they already did so</font>

1206
00:51:42,070 --> 00:51:46,930
who knows<font color="#E5E5E5"> maybe in the future we can be</font>

1207
00:51:44,710 --> 00:51:48,040
used this kind<font color="#E5E5E5"> of attack vectors</font><font color="#CCCCCC"> I don't</font>

1208
00:51:46,930 --> 00:51:49,990
<font color="#E5E5E5">think that the browser</font><font color="#CCCCCC"> vendors</font>

1209
00:51:48,040 --> 00:51:52,509
<font color="#CCCCCC">considered</font><font color="#E5E5E5"> yet run as a threat and</font>

1210
00:51:49,990 --> 00:51:54,549
understand why<font color="#E5E5E5"> actually so it's it's not</font>

1211
00:51:52,510 --> 00:51:58,690
<font color="#E5E5E5">that easy to exploit is much harder</font><font color="#CCCCCC"> than</font>

1212
00:51:54,550 --> 00:52:00,610
other exploitation vectors but as we

1213
00:51:58,690 --> 00:52:02,470
<font color="#CCCCCC">showing</font><font color="#E5E5E5"> this work</font><font color="#CCCCCC"> actually we can run it</font>

1214
00:52:00,610 --> 00:52:04,740
<font color="#E5E5E5">quite fast compared</font><font color="#CCCCCC"> to previous attacks</font>

1215
00:52:02,470 --> 00:52:07,689
so it should<font color="#E5E5E5"> be considered as a</font>

1216
00:52:04,740 --> 00:52:09,100
possibility<font color="#E5E5E5"> in case as like it's an</font>

1217
00:52:07,690 --> 00:52:11,830
<font color="#E5E5E5">advanced attack vector so it's not gonna</font>

1218
00:52:09,100 --> 00:52:13,540
<font color="#E5E5E5">be the day</font><font color="#CCCCCC"> to day attack vector but</font>

1219
00:52:11,830 --> 00:52:17,080
still<font color="#E5E5E5"> it's it can be used as an attack</font>

1220
00:52:13,540 --> 00:52:19,210
vector for targeted attacks and the

1221
00:52:17,080 --> 00:52:21,310
conclusion well we showed that<font color="#E5E5E5"> we</font><font color="#CCCCCC"> showed</font>

1222
00:52:19,210 --> 00:52:25,090
the first<font color="#E5E5E5"> run attack from JavaScript on</font>

1223
00:52:21,310 --> 00:52:26,590
mobile platforms<font color="#E5E5E5"> but the main takeaway</font>

1224
00:52:25,090 --> 00:52:28,030
of<font color="#CCCCCC"> this talk is actually that we</font>

1225
00:52:26,590 --> 00:52:31,090
<font color="#CCCCCC">introduced the GPU as a new attack</font>

1226
00:52:28,030 --> 00:52:32,470
vector<font color="#E5E5E5"> and this means</font><font color="#CCCCCC"> that we actually</font>

1227
00:52:31,090 --> 00:52:34,090
<font color="#E5E5E5">need to redefine the threat model</font>

1228
00:52:32,470 --> 00:52:36,189
because<font color="#E5E5E5"> as we showed that by just simply</font>

1229
00:52:34,090 --> 00:52:39,520
<font color="#E5E5E5">shifting the threat</font><font color="#CCCCCC"> model from</font><font color="#E5E5E5"> the CPU</font>

1230
00:52:36,190 --> 00:52:41,890
<font color="#E5E5E5">to the GPU we can generate the more</font>

1231
00:52:39,520 --> 00:52:43,330
powerful<font color="#E5E5E5"> attacks than before and so</font>

1232
00:52:41,890 --> 00:52:46,150
maybe<font color="#CCCCCC"> next</font><font color="#E5E5E5"> time is gonna be a digital</font>

1233
00:52:43,330 --> 00:52:50,380
signal processor or modern<font color="#CCCCCC"> inter-process</font>

1234
00:52:46,150 --> 00:52:52,300
<font color="#E5E5E5">right</font><font color="#CCCCCC"> fpga embedded in the cpu so you</font>

1235
00:52:50,380 --> 00:52:53,780
have a lot<font color="#E5E5E5"> of powerful tools there that</font>

1236
00:52:52,300 --> 00:52:57,260
nobody considers and

1237
00:52:53,780 --> 00:52:59,720
<font color="#CCCCCC">there's actually quite</font><font color="#E5E5E5"> a big threat so</font>

1238
00:52:57,260 --> 00:53:01,640
this the end of<font color="#CCCCCC"> my talk and now I'm</font>

1239
00:52:59,720 --> 00:53:05,270
<font color="#E5E5E5">happy to take any questions</font><font color="#CCCCCC"> otherwise</font>

1240
00:53:01,640 --> 00:53:07,129
<font color="#E5E5E5">you can just look up</font><font color="#CCCCCC"> the page of this</font>

1241
00:53:05,270 --> 00:53:09,470
project<font color="#E5E5E5"> that there is a nice write-up of</font>

1242
00:53:07,130 --> 00:53:11,810
the exploit and there is also the paper

1243
00:53:09,470 --> 00:53:14,270
that we published<font color="#E5E5E5"> about this otherwise</font>

1244
00:53:11,810 --> 00:53:16,509
<font color="#E5E5E5">you can ping me</font><font color="#CCCCCC"> on</font><font color="#E5E5E5"> Twitter</font><font color="#CCCCCC"> or also</font><font color="#E5E5E5"> the</font>

1245
00:53:14,270 --> 00:53:27,380
<font color="#CCCCCC">bucyk which is at</font><font color="#E5E5E5"> the group where I work</font>

1246
00:53:16,510 --> 00:53:30,440
<font color="#CCCCCC">now feel</font><font color="#E5E5E5"> free to ask anything all right</font>

1247
00:53:27,380 --> 00:53:31,450
<font color="#CCCCCC">then that talk when</font><font color="#E5E5E5"> we're you smooth</font>

1248
00:53:30,440 --> 00:53:35,960
without<font color="#CCCCCC"> any glitches</font>

1249
00:53:31,450 --> 00:53:41,299
<font color="#E5E5E5">thank you so much Pietro for that</font><font color="#CCCCCC"> thanks</font>

1250
00:53:35,960 --> 00:53:41,300
[Applause]

