1
00:00:24,420 --> 00:00:31,140
<font color="#CCCCCC">okay so welcome</font><font color="#E5E5E5"> and</font><font color="#CCCCCC"> good afternoon</font><font color="#E5E5E5"> to</font>

2
00:00:27,630 --> 00:00:32,790
<font color="#CCCCCC">all of</font><font color="#E5E5E5"> you so we are here today to talk</font>

3
00:00:31,140 --> 00:00:35,610
about<font color="#CCCCCC"> real-time</font><font color="#E5E5E5"> processing</font>

4
00:00:32,790 --> 00:00:39,239
we'd have PGA's and my name is<font color="#E5E5E5"> Matteo</font>

5
00:00:35,610 --> 00:00:42,360
<font color="#CCCCCC">Kahlua and</font><font color="#E5E5E5"> I just graduated</font><font color="#CCCCCC"> two months</font>

6
00:00:39,239 --> 00:00:46,019
ago<font color="#CCCCCC"> and nano technologies for</font><font color="#E5E5E5"> micro and</font>

7
00:00:42,360 --> 00:00:47,820
integrated<font color="#E5E5E5"> systems and I also have a</font>

8
00:00:46,019 --> 00:00:49,470
<font color="#CCCCCC">Bachelor</font><font color="#E5E5E5"> in electronics</font><font color="#CCCCCC"> engineering</font><font color="#E5E5E5"> I</font>

9
00:00:47,820 --> 00:00:54,390
<font color="#E5E5E5">travelled a little bit among those</font>

10
00:00:49,470 --> 00:00:57,359
universities to<font color="#E5E5E5"> get my my degrees and in</font>

11
00:00:54,390 --> 00:00:59,640
the free time I'm an amateur<font color="#E5E5E5"> and</font>

12
00:00:57,359 --> 00:01:03,030
passionate about<font color="#CCCCCC"> Atty security</font><font color="#E5E5E5"> so</font>

13
00:00:59,640 --> 00:01:05,280
<font color="#E5E5E5">probably or maybe you might already have</font>

14
00:01:03,030 --> 00:01:07,560
checked out some of the previous

15
00:01:05,280 --> 00:01:10,590
<font color="#CCCCCC">researchers I</font><font color="#E5E5E5"> I did in the past</font>

16
00:01:07,560 --> 00:01:14,729
and presented at those<font color="#E5E5E5"> conferences in</font>

17
00:01:10,590 --> 00:01:17,820
the<font color="#CCCCCC"> world</font><font color="#E5E5E5"> regarding my last six months I</font>

18
00:01:14,729 --> 00:01:18,509
<font color="#E5E5E5">I worked for a small</font><font color="#CCCCCC"> company in</font>

19
00:01:17,820 --> 00:01:22,110
Switzerland

20
00:01:18,509 --> 00:01:24,660
called<font color="#E5E5E5"> knowledge resources and thanks to</font>

21
00:01:22,110 --> 00:01:26,429
them I had the<font color="#CCCCCC"> opportunity to develop</font>

22
00:01:24,660 --> 00:01:30,420
the<font color="#CCCCCC"> project that</font><font color="#E5E5E5"> I will be speaking</font>

23
00:01:26,429 --> 00:01:34,920
about<font color="#E5E5E5"> today and so without saying</font>

24
00:01:30,420 --> 00:01:36,810
further<font color="#E5E5E5"> ado let's go straight to the the</font>

25
00:01:34,920 --> 00:01:38,369
main goals and the motivation that<font color="#E5E5E5"> led</font>

26
00:01:36,810 --> 00:01:40,290
me<font color="#CCCCCC"> to this</font><font color="#E5E5E5"> project</font>

27
00:01:38,369 --> 00:01:45,060
then<font color="#E5E5E5"> I will frame all the problems and</font>

28
00:01:40,290 --> 00:01:48,570
why<font color="#E5E5E5"> FPGA is</font><font color="#CCCCCC"> re useful to face all the</font>

29
00:01:45,060 --> 00:01:49,710
<font color="#CCCCCC">problems that</font><font color="#E5E5E5"> are</font><font color="#CCCCCC"> coming out then</font><font color="#E5E5E5"> I will</font>

30
00:01:48,570 --> 00:01:52,130
show you how<font color="#E5E5E5"> to find the best</font>

31
00:01:49,710 --> 00:01:54,240
<font color="#CCCCCC">configuration for the</font><font color="#E5E5E5"> FPGAs and</font>

32
00:01:52,130 --> 00:01:56,520
inspecting whether it is better to

33
00:01:54,240 --> 00:01:58,770
approach the problem with a processor

34
00:01:56,520 --> 00:02:01,380
centric approach<font color="#E5E5E5"> or with the hardware</font>

35
00:01:58,770 --> 00:02:03,179
logic centric approach<font color="#CCCCCC"> and in the end I</font>

36
00:02:01,380 --> 00:02:05,939
<font color="#E5E5E5">will explain</font><font color="#CCCCCC"> you what is the</font><font color="#E5E5E5"> toolbox</font>

37
00:02:03,180 --> 00:02:07,649
<font color="#E5E5E5">that I developed that</font><font color="#CCCCCC"> is implementing</font>

38
00:02:05,939 --> 00:02:10,500
firewall lock features and an encryption

39
00:02:07,649 --> 00:02:12,959
scheme<font color="#E5E5E5"> in the end I will provide the</font>

40
00:02:10,500 --> 00:02:14,459
results<font color="#E5E5E5"> and the small demos and then I</font>

41
00:02:12,959 --> 00:02:18,480
invite you to follow me at

42
00:02:14,459 --> 00:02:20,370
<font color="#CCCCCC">armory in the room close to</font><font color="#E5E5E5"> this one to</font>

43
00:02:18,480 --> 00:02:22,970
get more insight<font color="#E5E5E5"> and also had the</font>

44
00:02:20,370 --> 00:02:25,980
<font color="#CCCCCC">opportunity to</font><font color="#E5E5E5"> discuss about the code so</font>

45
00:02:22,970 --> 00:02:29,040
the first point where I started is how

46
00:02:25,980 --> 00:02:29,910
<font color="#CCCCCC">we deliver confidential information in a</font>

47
00:02:29,040 --> 00:02:32,440
secure<font color="#E5E5E5"> way</font>

48
00:02:29,910 --> 00:02:34,359
one of the main

49
00:02:32,440 --> 00:02:37,510
I mean tools that you are<font color="#CCCCCC"> using is that</font>

50
00:02:34,360 --> 00:02:40,810
you you connect to a VPN<font color="#E5E5E5"> so that you you</font>

51
00:02:37,510 --> 00:02:43,959
can ensure that your communication is

52
00:02:40,810 --> 00:02:47,020
not easily<font color="#E5E5E5"> accessible by third parties</font>

53
00:02:43,960 --> 00:02:49,630
that want<font color="#E5E5E5"> to intercept</font><font color="#CCCCCC"> your data but the</font>

54
00:02:47,020 --> 00:02:53,500
question that<font color="#E5E5E5"> I asked is is this</font>

55
00:02:49,630 --> 00:02:55,960
transfer in real time<font color="#E5E5E5"> or this is does it</font>

56
00:02:53,500 --> 00:02:59,320
happen<font color="#E5E5E5"> in</font><font color="#CCCCCC"> real time and the</font><font color="#E5E5E5"> answer to</font>

57
00:02:55,960 --> 00:03:02,140
this question<font color="#CCCCCC"> is actually</font><font color="#E5E5E5"> no and to</font>

58
00:02:59,320 --> 00:03:05,410
understand better<font color="#E5E5E5"> this we have to look</font>

59
00:03:02,140 --> 00:03:07,989
at what is going<font color="#CCCCCC"> on</font><font color="#E5E5E5"> inside those cables</font>

60
00:03:05,410 --> 00:03:10,780
here<font color="#E5E5E5"> like an internet connections</font><font color="#CCCCCC"> I do</font>

61
00:03:07,990 --> 00:03:13,150
not want to focus my research<font color="#E5E5E5"> on Wi-Fi</font>

62
00:03:10,780 --> 00:03:14,770
networks for obvious reasons<font color="#E5E5E5"> so I just</font>

63
00:03:13,150 --> 00:03:18,610
<font color="#CCCCCC">considered</font><font color="#E5E5E5"> the cable connections and</font>

64
00:03:14,770 --> 00:03:20,490
<font color="#E5E5E5">just</font><font color="#CCCCCC"> take as a</font><font color="#E5E5E5"> reference gigabit so it</font>

65
00:03:18,610 --> 00:03:22,780
is quite a common connection<font color="#E5E5E5"> you have</font>

66
00:03:20,490 --> 00:03:25,780
usually<font color="#E5E5E5"> in those connections you have</font>

67
00:03:22,780 --> 00:03:27,790
<font color="#E5E5E5">bytes</font><font color="#CCCCCC"> traveling with the pace of</font><font color="#E5E5E5"> eight</font>

68
00:03:25,780 --> 00:03:30,820
and nanoseconds<font color="#E5E5E5"> each because it's among</font>

69
00:03:27,790 --> 00:03:34,000
gigabit per second and if you're using a

70
00:03:30,820 --> 00:03:36,549
classic traditional computer it's mostly

71
00:03:34,000 --> 00:03:40,120
referred to as a von<font color="#CCCCCC"> Neumann</font>

72
00:03:36,550 --> 00:03:42,400
architecture<font color="#E5E5E5"> because you have a central</font>

73
00:03:40,120 --> 00:03:44,560
processing unit<font color="#E5E5E5"> that is all</font><font color="#CCCCCC"> the time</font>

74
00:03:42,400 --> 00:03:47,470
<font color="#E5E5E5">communicating with the peripherals</font><font color="#CCCCCC"> like</font>

75
00:03:44,560 --> 00:03:50,320
memory<font color="#CCCCCC"> and natural buffers and what</font>

76
00:03:47,470 --> 00:03:53,109
happens if the incoming<font color="#E5E5E5"> data through</font>

77
00:03:50,320 --> 00:03:55,900
your wires that<font color="#CCCCCC"> are going at the speed</font>

78
00:03:53,110 --> 00:03:58,180
<font color="#E5E5E5">of one gigabit per second are mostly</font>

79
00:03:55,900 --> 00:04:01,560
comparable to the speed<font color="#CCCCCC"> of the</font><font color="#E5E5E5"> processor</font>

80
00:03:58,180 --> 00:04:04,480
that<font color="#CCCCCC"> is in</font><font color="#E5E5E5"> a gigahertz it happens that</font>

81
00:04:01,560 --> 00:04:06,940
well<font color="#E5E5E5"> when processing the data there</font>

82
00:04:04,480 --> 00:04:08,738
would be a<font color="#E5E5E5"> bottleneck because to</font>

83
00:04:06,940 --> 00:04:10,329
transfer data from<font color="#E5E5E5"> the natural buffer to</font>

84
00:04:08,739 --> 00:04:11,980
memory and<font color="#E5E5E5"> then keeping alive all the</font>

85
00:04:10,330 --> 00:04:13,959
other peripherals<font color="#CCCCCC"> the processor</font><font color="#E5E5E5"> will</font>

86
00:04:11,980 --> 00:04:17,099
struggle<font color="#CCCCCC"> with doing</font><font color="#E5E5E5"> that so how to solve</font>

87
00:04:13,959 --> 00:04:20,858
<font color="#E5E5E5">this well we have to consider a new</font>

88
00:04:17,100 --> 00:04:23,440
different<font color="#E5E5E5"> class of devices</font><font color="#CCCCCC"> like FPGAs</font>

89
00:04:20,858 --> 00:04:25,359
<font color="#E5E5E5">that are so called non</font><font color="#CCCCCC"> phenomen class of</font>

90
00:04:23,440 --> 00:04:28,419
<font color="#E5E5E5">devices and in this case for this</font>

91
00:04:25,360 --> 00:04:30,370
<font color="#CCCCCC">project</font><font color="#E5E5E5"> I use one of those FPGAs that</font>

92
00:04:28,419 --> 00:04:34,419
was produced by the<font color="#CCCCCC"> company where I was</font>

93
00:04:30,370 --> 00:04:37,000
working<font color="#E5E5E5"> for so knowledge resources well</font>

94
00:04:34,419 --> 00:04:40,520
one of the<font color="#E5E5E5"> things that FPGAs can do very</font>

95
00:04:37,000 --> 00:04:43,520
<font color="#CCCCCC">well is pipeline all the activities</font>

96
00:04:40,520 --> 00:04:45,049
I'm sure that all of<font color="#E5E5E5"> you know I mean</font>

97
00:04:43,520 --> 00:04:48,799
<font color="#E5E5E5">what I mean</font><font color="#CCCCCC"> when I'm talking about</font>

98
00:04:45,050 --> 00:04:52,220
pipelining<font color="#CCCCCC"> but what is</font><font color="#E5E5E5"> inside those</font>

99
00:04:48,800 --> 00:04:55,510
chips<font color="#CCCCCC"> you can find several</font><font color="#E5E5E5"> hardware</font>

100
00:04:52,220 --> 00:04:58,370
<font color="#E5E5E5">logic components like logical gate and</font>

101
00:04:55,510 --> 00:05:00,620
all those components<font color="#E5E5E5"> are</font><font color="#CCCCCC"> just there and</font>

102
00:04:58,370 --> 00:05:02,450
you have<font color="#E5E5E5"> to program</font><font color="#CCCCCC"> you have</font><font color="#E5E5E5"> to build</font>

103
00:05:00,620 --> 00:05:04,520
<font color="#CCCCCC">your code in such a way that you are</font>

104
00:05:02,450 --> 00:05:07,969
<font color="#E5E5E5">wiring all the components that are</font>

105
00:05:04,520 --> 00:05:10,609
<font color="#CCCCCC">inside</font><font color="#E5E5E5"> and along</font><font color="#CCCCCC"> with the logic</font>

106
00:05:07,970 --> 00:05:15,410
<font color="#CCCCCC">components you have memory elements like</font>

107
00:05:10,610 --> 00:05:17,930
the block<font color="#E5E5E5"> from cells and also</font><font color="#CCCCCC"> DSP logic</font>

108
00:05:15,410 --> 00:05:20,960
works that can<font color="#CCCCCC"> perform very well</font>

109
00:05:17,930 --> 00:05:25,810
and<font color="#E5E5E5"> very fast</font><font color="#CCCCCC"> logic</font><font color="#E5E5E5"> arithmetic</font>

110
00:05:20,960 --> 00:05:25,810
operations<font color="#E5E5E5"> like some subtractions and</font>

111
00:05:25,870 --> 00:05:33,200
the<font color="#E5E5E5"> whole performance of the board</font>

112
00:05:28,550 --> 00:05:37,010
depends a lot on<font color="#E5E5E5"> the fabric</font><font color="#CCCCCC"> so how good</font>

113
00:05:33,200 --> 00:05:41,210
is the<font color="#E5E5E5"> electronic inside the board and</font>

114
00:05:37,010 --> 00:05:42,980
as regards to<font color="#E5E5E5"> the X eiling's boards</font><font color="#CCCCCC"> the</font>

115
00:05:41,210 --> 00:05:45,469
more<font color="#CCCCCC"> performances you have the more</font>

116
00:05:42,980 --> 00:05:47,510
performances on the top and the board

117
00:05:45,470 --> 00:05:50,330
<font color="#E5E5E5">that I used so the red one is in the</font>

118
00:05:47,510 --> 00:05:53,780
context<font color="#CCCCCC"> abric so it's quite I mean</font><font color="#E5E5E5"> good</font>

119
00:05:50,330 --> 00:05:56,330
performing<font color="#CCCCCC"> the other good thing about</font>

120
00:05:53,780 --> 00:05:59,000
<font color="#E5E5E5">those boards is that you have also a</font>

121
00:05:56,330 --> 00:06:02,150
<font color="#CCCCCC">dual-core processor</font><font color="#E5E5E5"> inside and this can</font>

122
00:05:59,000 --> 00:06:03,320
be useful<font color="#CCCCCC"> for a lot of reasons and</font><font color="#E5E5E5"> I</font>

123
00:06:02,150 --> 00:06:05,780
will just be back

124
00:06:03,320 --> 00:06:07,760
later<font color="#E5E5E5"> on</font><font color="#CCCCCC"> this topic</font><font color="#E5E5E5"> so summarizing</font><font color="#CCCCCC"> I</font>

125
00:06:05,780 --> 00:06:10,940
have an<font color="#E5E5E5"> architecture where I can exploit</font>

126
00:06:07,760 --> 00:06:12,680
a dual-core cortex a9 processor and the

127
00:06:10,940 --> 00:06:14,750
hardware logic<font color="#E5E5E5"> that is on the board</font><font color="#CCCCCC"> and</font>

128
00:06:12,680 --> 00:06:17,960
what I want<font color="#E5E5E5"> to do is a</font><font color="#CCCCCC"> real-time</font>

129
00:06:14,750 --> 00:06:21,919
monitoring<font color="#E5E5E5"> the</font><font color="#CCCCCC"> network traffic</font><font color="#E5E5E5"> so first</font>

130
00:06:17,960 --> 00:06:25,789
of all I have to interact with<font color="#E5E5E5"> the</font>

131
00:06:21,919 --> 00:06:28,729
network<font color="#E5E5E5"> data so this board itself</font><font color="#CCCCCC"> ok you</font>

132
00:06:25,790 --> 00:06:33,110
don't see any Ethernet interface<font color="#E5E5E5"> here so</font>

133
00:06:28,729 --> 00:06:35,419
I had to use development kit to expand

134
00:06:33,110 --> 00:06:38,960
it and here<font color="#CCCCCC"> you can</font><font color="#E5E5E5"> see that there is an</font>

135
00:06:35,419 --> 00:06:42,049
Ethernet<font color="#E5E5E5"> port</font><font color="#CCCCCC"> just here but what is</font>

136
00:06:38,960 --> 00:06:44,960
inside<font color="#CCCCCC"> this board</font><font color="#E5E5E5"> as I said before you</font>

137
00:06:42,050 --> 00:06:46,970
<font color="#CCCCCC">have both a processor part and the</font>

138
00:06:44,960 --> 00:06:48,620
hardware logic and the processor stays

139
00:06:46,970 --> 00:06:51,260
<font color="#CCCCCC">in that region</font><font color="#E5E5E5"> that is called PS</font>

140
00:06:48,620 --> 00:06:53,600
programmable system whereas the hardware

141
00:06:51,260 --> 00:06:56,390
logic stays in the PL part

142
00:06:53,600 --> 00:07:01,040
communicate from<font color="#CCCCCC"> one to the other you</font>

143
00:06:56,390 --> 00:07:05,830
<font color="#E5E5E5">have to instantiate oxy bus</font><font color="#CCCCCC"> so the armed</font>

144
00:07:01,040 --> 00:07:08,360
bus protocols<font color="#E5E5E5"> and the only point is that</font>

145
00:07:05,830 --> 00:07:11,330
the<font color="#CCCCCC"> Ethernet port that I have on this</font>

146
00:07:08,360 --> 00:07:14,000
courier is directly connected<font color="#CCCCCC"> to the PS</font>

147
00:07:11,330 --> 00:07:16,070
part<font color="#E5E5E5"> so it's directly communicating with</font>

148
00:07:14,000 --> 00:07:20,240
<font color="#E5E5E5">a processor and you have to figure out</font><font color="#CCCCCC"> a</font>

149
00:07:16,070 --> 00:07:24,219
way<font color="#E5E5E5"> if you want to reroute</font><font color="#CCCCCC"> all the data</font>

150
00:07:20,240 --> 00:07:26,480
to<font color="#CCCCCC"> the hardware logic part so</font><font color="#E5E5E5"> just to</font>

151
00:07:24,220 --> 00:07:29,450
summarize a<font color="#E5E5E5"> little bit what's going on</font>

152
00:07:26,480 --> 00:07:31,730
<font color="#CCCCCC">in a network problem you have</font><font color="#E5E5E5"> to</font>

153
00:07:29,450 --> 00:07:33,950
understand first<font color="#E5E5E5"> what is the OSI</font>

154
00:07:31,730 --> 00:07:36,350
reference model<font color="#E5E5E5"> so we have several</font>

155
00:07:33,950 --> 00:07:38,360
<font color="#E5E5E5">layers of abstraction for what concerns</font>

156
00:07:36,350 --> 00:07:39,500
<font color="#E5E5E5">our network communication and you start</font>

157
00:07:38,360 --> 00:07:43,010
from the bottom<font color="#CCCCCC"> that</font><font color="#E5E5E5"> is the</font><font color="#CCCCCC"> physical</font>

158
00:07:39,500 --> 00:07:45,080
<font color="#CCCCCC">level at the wire</font><font color="#E5E5E5"> let's say level so</font>

159
00:07:43,010 --> 00:07:47,330
you're<font color="#E5E5E5"> dealing with electrical signals</font>

160
00:07:45,080 --> 00:07:50,180
<font color="#E5E5E5">and then the upper levels are just</font>

161
00:07:47,330 --> 00:07:54,830
<font color="#E5E5E5">software instructions but as regards</font><font color="#CCCCCC"> the</font>

162
00:07:50,180 --> 00:07:57,380
I<font color="#E5E5E5"> Triple E 802.3 standard this is mostly</font>

163
00:07:54,830 --> 00:07:59,210
concerning the physical part so how to

164
00:07:57,380 --> 00:08:02,120
convert the electric<font color="#E5E5E5"> signals that are</font>

165
00:07:59,210 --> 00:08:05,090
traveling<font color="#E5E5E5"> through a wire into something</font>

166
00:08:02,120 --> 00:08:07,220
digital<font color="#E5E5E5"> and my</font><font color="#CCCCCC"> application will</font><font color="#E5E5E5"> be</font>

167
00:08:05,090 --> 00:08:10,869
mostly concerning with the lower levels

168
00:08:07,220 --> 00:08:13,130
of<font color="#E5E5E5"> this of this OSI reference model and</font>

169
00:08:10,870 --> 00:08:16,730
starting from<font color="#E5E5E5"> the physical medium where</font>

170
00:08:13,130 --> 00:08:19,430
<font color="#E5E5E5">you have the wire then you get above up</font>

171
00:08:16,730 --> 00:08:22,310
to the<font color="#CCCCCC"> mach controllers</font><font color="#E5E5E5"> so you have a</font>

172
00:08:19,430 --> 00:08:24,530
<font color="#CCCCCC">couple</font><font color="#E5E5E5"> of</font><font color="#CCCCCC"> libraries to</font><font color="#E5E5E5"> interact</font><font color="#CCCCCC"> with the</font>

173
00:08:22,310 --> 00:08:27,350
data from the processor side using one

174
00:08:24,530 --> 00:08:30,619
device like this<font color="#CCCCCC"> and these libraries are</font>

175
00:08:27,350 --> 00:08:33,919
<font color="#E5E5E5">like the</font><font color="#CCCCCC"> LW IP</font><font color="#E5E5E5"> it is lightweight IP and</font>

176
00:08:30,620 --> 00:08:37,190
it is good at a level<font color="#CCCCCC"> tree so at IP</font>

177
00:08:33,919 --> 00:08:39,140
level<font color="#E5E5E5"> it has a dynamic allocation of</font>

178
00:08:37,190 --> 00:08:41,660
memory<font color="#E5E5E5"> on the chip</font><font color="#CCCCCC"> and this</font><font color="#E5E5E5"> is something</font>

179
00:08:39,140 --> 00:08:43,520
that<font color="#CCCCCC"> I don't really</font><font color="#E5E5E5"> like it</font><font color="#CCCCCC"> because if</font>

180
00:08:41,659 --> 00:08:45,469
you<font color="#E5E5E5"> want to implement something that</font><font color="#CCCCCC"> is</font>

181
00:08:43,520 --> 00:08:49,430
based on<font color="#E5E5E5"> hardware electronics you must</font>

182
00:08:45,470 --> 00:08:51,830
always be aware of<font color="#E5E5E5"> where your data are</font>

183
00:08:49,430 --> 00:08:53,780
so if<font color="#E5E5E5"> you have a</font><font color="#CCCCCC"> dynamical allocation of</font>

184
00:08:51,830 --> 00:08:55,910
memory<font color="#E5E5E5"> you're not so sure</font><font color="#CCCCCC"> about where</font>

185
00:08:53,780 --> 00:08:59,780
the<font color="#E5E5E5"> data will</font><font color="#CCCCCC"> be put physically in the</font>

186
00:08:55,910 --> 00:09:02,150
memory so I<font color="#E5E5E5"> decide to just discard this</font>

187
00:08:59,780 --> 00:09:05,329
possibility<font color="#E5E5E5"> and I considered the other</font>

188
00:09:02,150 --> 00:09:07,069
library that<font color="#E5E5E5"> is more lower level so with</font>

189
00:09:05,330 --> 00:09:10,250
this library we<font color="#CCCCCC"> are interacting</font>

190
00:09:07,070 --> 00:09:13,790
with<font color="#CCCCCC"> the</font><font color="#E5E5E5"> Mach controller and also</font><font color="#CCCCCC"> the</font>

191
00:09:10,250 --> 00:09:16,340
DMA that is a very useful component<font color="#E5E5E5"> to</font>

192
00:09:13,790 --> 00:09:19,430
move data<font color="#E5E5E5"> from the network buffers</font><font color="#CCCCCC"> so</font>

193
00:09:16,340 --> 00:09:22,820
right after<font color="#E5E5E5"> the</font><font color="#CCCCCC"> Ethernet port</font><font color="#E5E5E5"> into the</font>

194
00:09:19,430 --> 00:09:26,599
memory<font color="#E5E5E5"> without asking any effort from</font>

195
00:09:22,820 --> 00:09:27,920
<font color="#CCCCCC">the processor side but the drawback is</font>

196
00:09:26,600 --> 00:09:30,590
that<font color="#CCCCCC"> it is a bit complicated</font><font color="#E5E5E5"> to</font>

197
00:09:27,920 --> 00:09:33,680
understand<font color="#E5E5E5"> that make it work</font><font color="#CCCCCC"> so coming</font>

198
00:09:30,590 --> 00:09:35,870
back to how to route<font color="#E5E5E5"> my connections from</font>

199
00:09:33,680 --> 00:09:38,359
<font color="#CCCCCC">the processor side to the logic</font><font color="#E5E5E5"> part</font>

200
00:09:35,870 --> 00:09:41,900
where I do want to do the processing<font color="#CCCCCC"> I</font>

201
00:09:38,360 --> 00:09:43,880
have to understand how this<font color="#E5E5E5"> Mac</font>

202
00:09:41,900 --> 00:09:44,660
controller the Gigabit Ethernet Mac

203
00:09:43,880 --> 00:09:48,110
works

204
00:09:44,660 --> 00:09:50,480
so basically when<font color="#CCCCCC"> you receive the data</font>

205
00:09:48,110 --> 00:09:53,060
from<font color="#E5E5E5"> this port you have</font><font color="#CCCCCC"> a Mac receiver</font>

206
00:09:50,480 --> 00:09:55,940
that is communicating directly<font color="#CCCCCC"> with the</font>

207
00:09:53,060 --> 00:09:58,699
<font color="#CCCCCC">a packet buffer</font><font color="#E5E5E5"> where you store</font><font color="#CCCCCC"> all the</font>

208
00:09:55,940 --> 00:10:01,910
packets<font color="#E5E5E5"> okay until</font><font color="#CCCCCC"> you have of course</font>

209
00:09:58,700 --> 00:10:04,550
<font color="#CCCCCC">enough room then</font><font color="#E5E5E5"> as soon as one packet</font>

210
00:10:01,910 --> 00:10:06,530
is received the packet buffer will

211
00:10:04,550 --> 00:10:11,900
update the<font color="#CCCCCC"> register the corresponding</font>

212
00:10:06,530 --> 00:10:14,810
register and the DMA will take a bunch

213
00:10:11,900 --> 00:10:17,810
of those packets one or more and move

214
00:10:14,810 --> 00:10:20,569
directly<font color="#E5E5E5"> to memory those pockets then</font>

215
00:10:17,810 --> 00:10:24,410
will update again<font color="#E5E5E5"> the registers saying</font>

216
00:10:20,570 --> 00:10:27,320
<font color="#E5E5E5">okay the transaction is done of course</font>

217
00:10:24,410 --> 00:10:29,780
on the tech side<font color="#E5E5E5"> is the same process but</font>

218
00:10:27,320 --> 00:10:33,320
what is the<font color="#E5E5E5"> problem of this approach</font>

219
00:10:29,780 --> 00:10:36,380
<font color="#E5E5E5">first</font><font color="#CCCCCC"> if we</font><font color="#E5E5E5"> consider the</font><font color="#CCCCCC"> RX</font><font color="#E5E5E5"> and TX</font>

220
00:10:33,320 --> 00:10:39,470
buffer they fill up<font color="#CCCCCC"> very</font><font color="#E5E5E5"> quickly and I</font>

221
00:10:36,380 --> 00:10:43,820
do not want to waste<font color="#CCCCCC"> too many resources</font>

222
00:10:39,470 --> 00:10:47,660
<font color="#CCCCCC">to allocate</font><font color="#E5E5E5"> inside my board because when</font>

223
00:10:43,820 --> 00:10:51,650
you do program something<font color="#E5E5E5"> that</font><font color="#CCCCCC"> is</font><font color="#E5E5E5"> I mean</font>

224
00:10:47,660 --> 00:10:53,959
on FPGA is you do not want to run<font color="#E5E5E5"> out of</font>

225
00:10:51,650 --> 00:10:55,610
space<font color="#CCCCCC"> or use the</font><font color="#E5E5E5"> most as possible</font>

226
00:10:53,960 --> 00:11:00,410
because<font color="#E5E5E5"> you can get other problems</font>

227
00:10:55,610 --> 00:11:02,300
<font color="#E5E5E5">related to electrical interfaces</font><font color="#CCCCCC"> when</font>

228
00:11:00,410 --> 00:11:06,530
you have when you<font color="#E5E5E5"> want</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> drive several</font>

229
00:11:02,300 --> 00:11:09,020
<font color="#E5E5E5">electronic signals so</font><font color="#CCCCCC"> G Rx and</font><font color="#E5E5E5"> TX buffer</font>

230
00:11:06,530 --> 00:11:11,569
<font color="#E5E5E5">picks up quickly and the packet size is</font>

231
00:11:09,020 --> 00:11:14,300
<font color="#CCCCCC">always overestimated</font><font color="#E5E5E5"> at the the maximum</font>

232
00:11:11,570 --> 00:11:16,100
of the pocket because<font color="#E5E5E5"> you do want to be</font>

233
00:11:14,300 --> 00:11:18,469
always prepared<font color="#E5E5E5"> when you</font><font color="#CCCCCC"> are receiving</font>

234
00:11:16,100 --> 00:11:22,020
<font color="#E5E5E5">something that you are</font><font color="#CCCCCC"> not expecting</font>

235
00:11:18,470 --> 00:11:25,190
<font color="#CCCCCC">then the</font><font color="#E5E5E5"> DMA engine is a four-state</font>

236
00:11:22,020 --> 00:11:27,840
<font color="#E5E5E5">finite state machine that</font><font color="#CCCCCC"> means that</font>

237
00:11:25,190 --> 00:11:30,300
when you do<font color="#E5E5E5"> receive</font><font color="#CCCCCC"> the packet you are</font>

238
00:11:27,840 --> 00:11:32,130
in the waiting step step<font color="#E5E5E5"> then you decide</font>

239
00:11:30,300 --> 00:11:34,349
<font color="#E5E5E5">to move the packet so you have you are</font>

240
00:11:32,130 --> 00:11:36,120
in another<font color="#E5E5E5"> state and the turns out the</font>

241
00:11:34,350 --> 00:11:40,050
transition<font color="#CCCCCC"> from one state to the other</font>

242
00:11:36,120 --> 00:11:42,720
<font color="#E5E5E5">is regulated</font><font color="#CCCCCC"> by the processor</font><font color="#E5E5E5"> so you're</font>

243
00:11:40,050 --> 00:11:44,969
still keeping the processor busy along

244
00:11:42,720 --> 00:11:49,110
all the<font color="#CCCCCC"> time of operation of the FPGA</font>

245
00:11:44,970 --> 00:11:51,240
and you do not want to fall again in the

246
00:11:49,110 --> 00:11:53,880
bottleneck on<font color="#E5E5E5"> the von Neumann bottleneck</font>

247
00:11:51,240 --> 00:11:56,640
<font color="#CCCCCC">that</font><font color="#E5E5E5"> I explained before</font><font color="#CCCCCC"> and lastly but</font>

248
00:11:53,880 --> 00:11:58,500
not leastly the block from<font color="#E5E5E5"> cells that I</font>

249
00:11:56,640 --> 00:12:02,100
explained<font color="#E5E5E5"> before that are present in the</font>

250
00:11:58,500 --> 00:12:04,320
<font color="#E5E5E5">hardware logic part are not so fast</font><font color="#CCCCCC"> in</font>

251
00:12:02,100 --> 00:12:08,730
terms<font color="#CCCCCC"> of</font><font color="#E5E5E5"> speed</font><font color="#CCCCCC"> well it</font><font color="#E5E5E5"> depends</font><font color="#CCCCCC"> on</font><font color="#E5E5E5"> the</font>

252
00:12:04,320 --> 00:12:11,640
<font color="#E5E5E5">performance of the fabric and too many</font>

253
00:12:08,730 --> 00:12:14,490
<font color="#E5E5E5">blocks will exploit too many resources</font>

254
00:12:11,640 --> 00:12:17,939
<font color="#E5E5E5">inside the board so once again</font><font color="#CCCCCC"> I do</font><font color="#E5E5E5"> not</font>

255
00:12:14,490 --> 00:12:20,160
want to use a lot of<font color="#E5E5E5"> them so how can we</font>

256
00:12:17,940 --> 00:12:23,250
solve<font color="#E5E5E5"> this</font><font color="#CCCCCC"> I decided to move towards a</font>

257
00:12:20,160 --> 00:12:23,850
fully Hardware implementation of my

258
00:12:23,250 --> 00:12:26,120
design

259
00:12:23,850 --> 00:12:29,100
so working<font color="#E5E5E5"> just in hardware logic and</font>

260
00:12:26,120 --> 00:12:31,230
there you<font color="#CCCCCC"> have the</font><font color="#E5E5E5"> only references you</font>

261
00:12:29,100 --> 00:12:34,050
have<font color="#E5E5E5"> are determined by the clock</font>

262
00:12:31,230 --> 00:12:36,570
sequence and they are the<font color="#E5E5E5"> only reference</font>

263
00:12:34,050 --> 00:12:38,219
you<font color="#CCCCCC"> have so you</font><font color="#E5E5E5"> must be</font><font color="#CCCCCC"> sure that all</font>

264
00:12:36,570 --> 00:12:40,520
the clock signals that you are taking

265
00:12:38,220 --> 00:12:42,540
into<font color="#E5E5E5"> account are synchronized</font><font color="#CCCCCC"> and</font>

266
00:12:40,520 --> 00:12:44,400
everything that you are<font color="#E5E5E5"> running in</font>

267
00:12:42,540 --> 00:12:47,160
<font color="#E5E5E5">hardware logic is executed in parallel</font>

268
00:12:44,400 --> 00:12:47,730
<font color="#E5E5E5">so because you are controlling electric</font>

269
00:12:47,160 --> 00:12:50,490
signals

270
00:12:47,730 --> 00:12:52,980
you cannot say hey electric steel signal

271
00:12:50,490 --> 00:12:55,860
please stop<font color="#E5E5E5"> here until I verify this</font>

272
00:12:52,980 --> 00:12:58,680
<font color="#E5E5E5">condition you cannot do</font><font color="#CCCCCC"> that</font><font color="#E5E5E5"> in</font><font color="#CCCCCC"> a in a</font>

273
00:12:55,860 --> 00:13:00,780
wire the wire if it is in a high state

274
00:12:58,680 --> 00:13:02,939
<font color="#CCCCCC">if the high state will propagate along</font>

275
00:13:00,780 --> 00:13:04,829
the board without<font color="#E5E5E5"> any stop unless you</font>

276
00:13:02,940 --> 00:13:08,220
put something<font color="#E5E5E5"> in the</font><font color="#CCCCCC"> middle that I will</font>

277
00:13:04,830 --> 00:13:11,580
show<font color="#E5E5E5"> later and there are no libraries so</font>

278
00:13:08,220 --> 00:13:13,290
basically you<font color="#E5E5E5"> have to think figure out</font>

279
00:13:11,580 --> 00:13:18,050
the problem<font color="#E5E5E5"> and translate it into</font>

280
00:13:13,290 --> 00:13:21,060
<font color="#CCCCCC">Hardware language and these</font><font color="#E5E5E5"> conditions</font>

281
00:13:18,050 --> 00:13:23,910
<font color="#CCCCCC">lead to meeting always the timing</font>

282
00:13:21,060 --> 00:13:26,010
constraints<font color="#E5E5E5"> what does it mean</font><font color="#CCCCCC"> if you</font>

283
00:13:23,910 --> 00:13:28,140
want to route a signal from<font color="#CCCCCC"> one part</font><font color="#E5E5E5"> to</font>

284
00:13:26,010 --> 00:13:30,180
the other of<font color="#E5E5E5"> the port it will</font><font color="#CCCCCC"> take some</font>

285
00:13:28,140 --> 00:13:31,560
time<font color="#CCCCCC"> because of course the</font><font color="#E5E5E5"> traveling</font>

286
00:13:30,180 --> 00:13:35,430
<font color="#E5E5E5">speed of electronic signal</font>

287
00:13:31,560 --> 00:13:37,680
is influenced by the quality<font color="#CCCCCC"> of the</font>

288
00:13:35,430 --> 00:13:41,130
electronics<font color="#E5E5E5"> you have</font><font color="#CCCCCC"> and it takes some</font>

289
00:13:37,680 --> 00:13:43,920
<font color="#CCCCCC">time</font><font color="#E5E5E5"> but you do want to be prepared</font>

290
00:13:41,130 --> 00:13:47,340
<font color="#E5E5E5">every time that a new</font><font color="#CCCCCC"> clock cycle is</font>

291
00:13:43,920 --> 00:13:50,910
running<font color="#E5E5E5"> as it is coming so</font><font color="#CCCCCC"> you want to</font>

292
00:13:47,340 --> 00:13:53,339
make some stops<font color="#CCCCCC"> along</font><font color="#E5E5E5"> the</font><font color="#CCCCCC"> ride and use a</font>

293
00:13:50,910 --> 00:13:56,610
memory<font color="#E5E5E5"> wave point</font><font color="#CCCCCC"> to carry the signal</font><font color="#E5E5E5"> on</font>

294
00:13:53,339 --> 00:13:58,860
and the most elementary component that

295
00:13:56,610 --> 00:14:01,589
you have is<font color="#E5E5E5"> the flip-flop and a bunch of</font>

296
00:13:58,860 --> 00:14:04,200
<font color="#E5E5E5">flip-flops are composing registers so</font>

297
00:14:01,589 --> 00:14:06,600
here is<font color="#E5E5E5"> it</font><font color="#CCCCCC"> just summarized I do hope</font>

298
00:14:04,200 --> 00:14:09,540
that most of you know how a flip-flop

299
00:14:06,600 --> 00:14:11,370
works but is the simplest<font color="#E5E5E5"> memory element</font>

300
00:14:09,540 --> 00:14:15,510
that you have<font color="#CCCCCC"> available</font><font color="#E5E5E5"> in digital</font>

301
00:14:11,370 --> 00:14:17,550
<font color="#CCCCCC">electronics so all these things are</font>

302
00:14:15,510 --> 00:14:19,680
contributing to meeting the timing

303
00:14:17,550 --> 00:14:22,829
constraints so the quality<font color="#CCCCCC"> of your</font>

304
00:14:19,680 --> 00:14:25,349
fabric<font color="#CCCCCC"> the wire</font><font color="#E5E5E5"> length so the length of</font>

305
00:14:22,830 --> 00:14:27,390
your connections and<font color="#E5E5E5"> the clock speed the</font>

306
00:14:25,350 --> 00:14:29,460
higher is the<font color="#E5E5E5"> clock speed the harder is</font>

307
00:14:27,390 --> 00:14:32,160
to meet the timing constraints because

308
00:14:29,460 --> 00:14:35,370
your signals need to reach<font color="#E5E5E5"> faster the</font>

309
00:14:32,160 --> 00:14:37,860
following<font color="#CCCCCC"> way point</font><font color="#E5E5E5"> so how to implement</font>

310
00:14:35,370 --> 00:14:40,950
<font color="#E5E5E5">our</font><font color="#CCCCCC"> application</font><font color="#E5E5E5"> to monitor the traffic</font>

311
00:14:37,860 --> 00:14:44,339
<font color="#E5E5E5">into an FPGA well the primary goal that</font>

312
00:14:40,950 --> 00:14:47,160
<font color="#E5E5E5">I decided to to meet was actually</font>

313
00:14:44,339 --> 00:14:49,680
building a kind<font color="#CCCCCC"> of an extension</font><font color="#E5E5E5"> cord</font><font color="#CCCCCC"> so</font>

314
00:14:47,160 --> 00:14:52,020
<font color="#E5E5E5">like taking a piece</font><font color="#CCCCCC"> of wire</font><font color="#E5E5E5"> cutting in</font>

315
00:14:49,680 --> 00:14:55,349
<font color="#E5E5E5">two parts and putting in the middle</font><font color="#CCCCCC"> this</font>

316
00:14:52,020 --> 00:14:57,540
device and ensuring that this device<font color="#CCCCCC"> is</font>

317
00:14:55,350 --> 00:14:59,940
able<font color="#E5E5E5"> to to keep the</font><font color="#CCCCCC"> connection</font><font color="#E5E5E5"> alive</font>

318
00:14:57,540 --> 00:15:03,689
<font color="#CCCCCC">from one</font><font color="#E5E5E5"> side to the other and of course</font>

319
00:14:59,940 --> 00:15:08,070
vice versa<font color="#CCCCCC"> because</font><font color="#E5E5E5"> the goal</font><font color="#CCCCCC"> is of course</font>

320
00:15:03,690 --> 00:15:10,170
to keep alive the<font color="#E5E5E5"> connection and so what</font>

321
00:15:08,070 --> 00:15:12,270
are the two most important points is

322
00:15:10,170 --> 00:15:15,689
first that you must ensure the

323
00:15:12,270 --> 00:15:16,470
<font color="#E5E5E5">continuity of data otherwise if they are</font>

324
00:15:15,690 --> 00:15:18,150
not continuous

325
00:15:16,470 --> 00:15:20,790
the connection will<font color="#CCCCCC"> be broken</font><font color="#E5E5E5"> at some</font>

326
00:15:18,150 --> 00:15:23,640
part and be<font color="#E5E5E5"> conservative</font><font color="#CCCCCC"> with the time</font>

327
00:15:20,790 --> 00:15:27,300
<font color="#E5E5E5">of flight this is very important because</font>

328
00:15:23,640 --> 00:15:29,610
by<font color="#CCCCCC"> doing this I'm actually buffering the</font>

329
00:15:27,300 --> 00:15:33,449
whole<font color="#E5E5E5"> network</font><font color="#CCCCCC"> and</font><font color="#E5E5E5"> I</font><font color="#CCCCCC"> don't want to be</font>

330
00:15:29,610 --> 00:15:36,120
detectable<font color="#E5E5E5"> by both the two sides of</font><font color="#CCCCCC"> my</font>

331
00:15:33,450 --> 00:15:39,959
interface<font color="#CCCCCC"> so conservative with the time</font>

332
00:15:36,120 --> 00:15:42,000
of<font color="#E5E5E5"> flights means that I do want not to</font>

333
00:15:39,959 --> 00:15:43,780
spend<font color="#E5E5E5"> too much time</font><font color="#CCCCCC"> inside the board</font>

334
00:15:42,000 --> 00:15:48,580
with my pockets

335
00:15:43,780 --> 00:15:51,430
so how can<font color="#CCCCCC"> I interact with those data</font>

336
00:15:48,580 --> 00:15:54,970
<font color="#E5E5E5">first I need to increase the</font><font color="#CCCCCC"> number of</font>

337
00:15:51,430 --> 00:15:56,890
<font color="#CCCCCC">Ethernet ports</font><font color="#E5E5E5"> indeed</font><font color="#CCCCCC"> to to buffer all</font>

338
00:15:54,970 --> 00:15:58,600
the networks because<font color="#CCCCCC"> I need</font><font color="#E5E5E5"> to one from</font>

339
00:15:56,890 --> 00:16:00,939
one side<font color="#E5E5E5"> and the other</font><font color="#CCCCCC"> one from</font><font color="#E5E5E5"> the</font>

340
00:15:58,600 --> 00:16:05,410
<font color="#E5E5E5">other side so I use those components</font>

341
00:16:00,940 --> 00:16:09,610
<font color="#CCCCCC">that can easily be plugged in inside</font><font color="#E5E5E5"> the</font>

342
00:16:05,410 --> 00:16:12,610
board<font color="#E5E5E5"> and then since the the data</font>

343
00:16:09,610 --> 00:16:15,970
<font color="#E5E5E5">flowing into a network cable is flowing</font>

344
00:16:12,610 --> 00:16:18,040
<font color="#CCCCCC">when the clock signal</font><font color="#E5E5E5"> is both transiting</font>

345
00:16:15,970 --> 00:16:20,530
from<font color="#CCCCCC"> the low to high state and</font><font color="#E5E5E5"> from high</font>

346
00:16:18,040 --> 00:16:22,810
to low<font color="#E5E5E5"> state so is</font><font color="#CCCCCC"> traveling</font><font color="#E5E5E5"> in a DDR</font>

347
00:16:20,530 --> 00:16:26,770
fashion<font color="#CCCCCC"> I needed to implement a module</font>

348
00:16:22,810 --> 00:16:29,709
that<font color="#E5E5E5"> is converting the DDR</font><font color="#CCCCCC"> the DDR flux</font>

349
00:16:26,770 --> 00:16:33,490
into an SDR so single data rate<font color="#E5E5E5"> and why</font>

350
00:16:29,710 --> 00:16:36,370
this<font color="#E5E5E5"> because the FPGA is run let's say</font>

351
00:16:33,490 --> 00:16:39,370
in a better way if I have if I have<font color="#CCCCCC"> I</font>

352
00:16:36,370 --> 00:16:42,190
can do processing<font color="#E5E5E5"> easily with the SDR</font>

353
00:16:39,370 --> 00:16:45,520
flux<font color="#E5E5E5"> because usually the clocks are not</font>

354
00:16:42,190 --> 00:16:48,250
symmetric<font color="#CCCCCC"> in the real</font><font color="#E5E5E5"> world and you can</font>

355
00:16:45,520 --> 00:16:50,319
mess up easily with<font color="#E5E5E5"> everything if you</font>

356
00:16:48,250 --> 00:16:52,960
are<font color="#E5E5E5"> trying to use a DDR connection so</font>

357
00:16:50,320 --> 00:16:55,240
since I I'm not like a guru in this

358
00:16:52,960 --> 00:16:58,839
field<font color="#E5E5E5"> I decided to go</font><font color="#CCCCCC"> for something easy</font>

359
00:16:55,240 --> 00:17:04,920
like<font color="#E5E5E5"> this and if I convert to as</font><font color="#CCCCCC"> Dr</font><font color="#E5E5E5"> as I</font>

360
00:16:58,839 --> 00:17:09,069
<font color="#CCCCCC">said before you</font><font color="#E5E5E5"> get</font><font color="#CCCCCC"> 8-bit per cycle and</font>

361
00:17:04,920 --> 00:17:12,310
<font color="#E5E5E5">8-bit per cycle means that in</font><font color="#CCCCCC"> 8</font>

362
00:17:09,069 --> 00:17:15,849
nanoseconds<font color="#E5E5E5"> that corresponds to 125</font>

363
00:17:12,310 --> 00:17:20,740
megahertz clock you can govern<font color="#CCCCCC"> one</font>

364
00:17:15,849 --> 00:17:22,810
<font color="#E5E5E5">gigabit link so how can I</font><font color="#CCCCCC"> abstract</font><font color="#E5E5E5"> the</font>

365
00:17:20,740 --> 00:17:25,930
communication from<font color="#CCCCCC"> one port to</font><font color="#E5E5E5"> the other</font>

366
00:17:22,810 --> 00:17:29,139
inside<font color="#E5E5E5"> this chip you have</font><font color="#CCCCCC"> to think about</font>

367
00:17:25,930 --> 00:17:31,060
<font color="#E5E5E5">like a conveyor belt model so when the</font>

368
00:17:29,140 --> 00:17:34,300
data enters one of the two interfaces

369
00:17:31,060 --> 00:17:38,169
<font color="#CCCCCC">I'm just pushing</font><font color="#E5E5E5"> the bytes at a fixed</font>

370
00:17:34,300 --> 00:17:41,350
pace of 125 megahertz<font color="#E5E5E5"> to the other side</font>

371
00:17:38,170 --> 00:17:44,440
of<font color="#E5E5E5"> the interface in this way it's as if</font>

372
00:17:41,350 --> 00:17:46,449
my cable is still there<font color="#CCCCCC"> I just extended</font>

373
00:17:44,440 --> 00:17:49,600
the cable<font color="#E5E5E5"> because that are traveling</font><font color="#CCCCCC"> at</font>

374
00:17:46,450 --> 00:17:52,450
the same speed<font color="#E5E5E5"> and at the same time</font><font color="#CCCCCC"> I</font>

375
00:17:49,600 --> 00:17:55,840
<font color="#E5E5E5">have these data available in my hardware</font>

376
00:17:52,450 --> 00:17:56,980
platform<font color="#E5E5E5"> so these are some modules that</font>

377
00:17:55,840 --> 00:17:59,080
you need to

378
00:17:56,980 --> 00:18:01,750
of course taking into account<font color="#CCCCCC"> our GM III</font>

379
00:17:59,080 --> 00:18:04,899
<font color="#CCCCCC">- GM III</font><font color="#E5E5E5"> that is</font><font color="#CCCCCC"> the one converting from</font>

380
00:18:01,750 --> 00:18:07,540
<font color="#E5E5E5">ddr2 single data rate and the Phi is</font><font color="#CCCCCC"> the</font>

381
00:18:04,900 --> 00:18:10,000
chip<font color="#CCCCCC"> that you have close to the</font><font color="#E5E5E5"> Ethernet</font>

382
00:18:07,540 --> 00:18:12,610
interface that converts the data from

383
00:18:10,000 --> 00:18:15,549
electric signal into digital signals

384
00:18:12,610 --> 00:18:19,209
<font color="#E5E5E5">okay so from the wire directly into a</font>

385
00:18:15,549 --> 00:18:22,889
digital piece of electronic and as I

386
00:18:19,210 --> 00:18:26,730
<font color="#CCCCCC">said with a 125 megahertz clock I</font>

387
00:18:22,890 --> 00:18:30,490
instantiated a bunch of 24 registers<font color="#CCCCCC"> and</font>

388
00:18:26,730 --> 00:18:34,120
what do I get<font color="#E5E5E5"> from</font><font color="#CCCCCC"> this 8 nanoseconds</font>

389
00:18:30,490 --> 00:18:37,120
time 24 registers<font color="#E5E5E5"> it takes 192</font>

390
00:18:34,120 --> 00:18:39,428
nanoseconds<font color="#E5E5E5"> to cross the whole board in</font>

391
00:18:37,120 --> 00:18:41,770
this<font color="#E5E5E5"> implementation</font><font color="#CCCCCC"> and if I</font><font color="#E5E5E5"> consider</font>

392
00:18:39,429 --> 00:18:45,400
the<font color="#CCCCCC"> average latency that</font><font color="#E5E5E5"> is introduced</font>

393
00:18:41,770 --> 00:18:48,668
by<font color="#CCCCCC"> cables when I run at one gigabit per</font>

394
00:18:45,400 --> 00:18:53,080
second<font color="#E5E5E5"> this latency is roughly 50</font>

395
00:18:48,669 --> 00:18:54,280
<font color="#E5E5E5">microseconds and so I'm just concluding</font>

396
00:18:53,080 --> 00:18:56,678
that the time-of-flight

397
00:18:54,280 --> 00:18:59,110
inside my<font color="#CCCCCC"> board is magic</font><font color="#E5E5E5"> and negligible</font>

398
00:18:56,679 --> 00:19:01,929
<font color="#E5E5E5">with respect to the average latency</font><font color="#CCCCCC"> what</font>

399
00:18:59,110 --> 00:19:05,290
does it mean that<font color="#E5E5E5"> if I am on one side or</font>

400
00:19:01,929 --> 00:19:07,990
<font color="#CCCCCC">the other</font><font color="#E5E5E5"> side of the board</font><font color="#CCCCCC"> I cannot</font>

401
00:19:05,290 --> 00:19:11,379
understand whether my data were actually

402
00:19:07,990 --> 00:19:16,059
buffered by<font color="#CCCCCC"> something that I put in</font>

403
00:19:11,380 --> 00:19:17,740
between so far so good<font color="#CCCCCC"> so what's next</font>

404
00:19:16,059 --> 00:19:19,600
since I have the<font color="#E5E5E5"> data inside</font><font color="#CCCCCC"> the</font><font color="#E5E5E5"> board</font>

405
00:19:17,740 --> 00:19:22,299
now I do want<font color="#E5E5E5"> to make some processing</font>

406
00:19:19,600 --> 00:19:25,990
<font color="#E5E5E5">and what I implemented where if I were</font>

407
00:19:22,299 --> 00:19:28,360
<font color="#E5E5E5">like features then thinking</font><font color="#CCCCCC"> about how to</font>

408
00:19:25,990 --> 00:19:32,260
make<font color="#E5E5E5"> some deep packet inspection and</font>

409
00:19:28,360 --> 00:19:34,959
then also let's say introducing an

410
00:19:32,260 --> 00:19:38,020
encryption decryption system to make a

411
00:19:34,960 --> 00:19:41,169
kind<font color="#E5E5E5"> of a hardware VPN device so let's</font>

412
00:19:38,020 --> 00:19:43,990
<font color="#CCCCCC">go step by step you know that the</font>

413
00:19:41,169 --> 00:19:48,520
information<font color="#E5E5E5"> travels across the wires</font><font color="#CCCCCC"> in</font>

414
00:19:43,990 --> 00:19:50,410
<font color="#E5E5E5">forms of</font><font color="#CCCCCC"> packets and it's like when you</font>

415
00:19:48,520 --> 00:19:52,809
<font color="#E5E5E5">are sending a packet to someone you have</font>

416
00:19:50,410 --> 00:19:55,840
<font color="#CCCCCC">to provide the address of the sender and</font>

417
00:19:52,809 --> 00:19:58,299
<font color="#E5E5E5">receiver and according</font><font color="#CCCCCC"> to the standard</font>

418
00:19:55,840 --> 00:20:02,020
by defined by<font color="#E5E5E5"> i3 poly</font>

419
00:19:58,299 --> 00:20:07,120
so the 802.3<font color="#E5E5E5"> standard this information</font>

420
00:20:02,020 --> 00:20:10,090
has very strict specifications<font color="#E5E5E5"> and so</font>

421
00:20:07,120 --> 00:20:12,399
what happens if<font color="#CCCCCC"> I do not only</font><font color="#E5E5E5"> deliver</font>

422
00:20:10,090 --> 00:20:14,668
those packets<font color="#E5E5E5"> like I said before in</font><font color="#CCCCCC"> the</font>

423
00:20:12,400 --> 00:20:18,040
conveyor<font color="#E5E5E5"> belt model but what if I</font>

424
00:20:14,669 --> 00:20:20,350
introduce<font color="#CCCCCC"> another element that</font><font color="#E5E5E5"> is able</font>

425
00:20:18,040 --> 00:20:24,309
<font color="#CCCCCC">to manipulate the data while they are</font>

426
00:20:20,350 --> 00:20:26,020
traveling<font color="#E5E5E5"> so I have to shift my parting</font>

427
00:20:24,309 --> 00:20:27,460
from<font color="#E5E5E5"> a conveyor belt model to an</font>

428
00:20:26,020 --> 00:20:29,889
assembly chain model<font color="#E5E5E5"> where I have</font>

429
00:20:27,460 --> 00:20:31,510
someone that<font color="#CCCCCC"> is actually</font><font color="#E5E5E5"> able</font><font color="#CCCCCC"> to</font>

430
00:20:29,890 --> 00:20:33,820
manipulate the<font color="#CCCCCC"> data while they are</font><font color="#E5E5E5"> on</font>

431
00:20:31,510 --> 00:20:36,520
the flight and I want to be more<font color="#E5E5E5"> precise</font>

432
00:20:33,820 --> 00:20:40,059
about<font color="#E5E5E5"> that by first introducing what is</font>

433
00:20:36,520 --> 00:20:42,610
the structure of<font color="#E5E5E5"> an Ethernet frame you</font>

434
00:20:40,059 --> 00:20:47,320
have at the beginning something<font color="#E5E5E5"> called</font>

435
00:20:42,610 --> 00:20:50,168
preamble that<font color="#CCCCCC"> is useful to</font><font color="#E5E5E5"> fortify so</font>

436
00:20:47,320 --> 00:20:52,750
the chip<font color="#CCCCCC"> that</font><font color="#E5E5E5"> is below just behind the</font>

437
00:20:50,169 --> 00:20:56,350
<font color="#CCCCCC">Ethernet port to synchronize the clock</font>

438
00:20:52,750 --> 00:20:58,690
frequencies<font color="#E5E5E5"> then it's followed</font><font color="#CCCCCC"> by</font><font color="#E5E5E5"> the</font>

439
00:20:56,350 --> 00:21:00,790
address of the receiver<font color="#E5E5E5"> then the address</font>

440
00:20:58,690 --> 00:21:01,929
of the sender of this packet then you

441
00:21:00,790 --> 00:21:04,480
have a field<font color="#CCCCCC"> called</font>

442
00:21:01,929 --> 00:21:06,250
<font color="#CCCCCC">eater type that is</font><font color="#E5E5E5"> defining</font><font color="#CCCCCC"> the type of</font>

443
00:21:04,480 --> 00:21:09,400
<font color="#CCCCCC">contents so what you have inside this</font>

444
00:21:06,250 --> 00:21:12,070
pocket<font color="#E5E5E5"> is it an ipv4 in ipv6</font><font color="#CCCCCC"> packet an</font>

445
00:21:09,400 --> 00:21:14,440
<font color="#CCCCCC">ARP packet then you have the payload</font>

446
00:21:12,070 --> 00:21:18,070
<font color="#CCCCCC">that is the contact</font><font color="#E5E5E5"> of</font><font color="#CCCCCC"> Titan</font><font color="#E5E5E5"> and in the</font>

447
00:21:14,440 --> 00:21:20,500
end<font color="#CCCCCC"> a checksum field</font><font color="#E5E5E5"> that is indicating</font>

448
00:21:18,070 --> 00:21:23,408
if the<font color="#E5E5E5"> transaction I mean just to check</font>

449
00:21:20,500 --> 00:21:26,169
<font color="#E5E5E5">the integrity of the transaction so</font><font color="#CCCCCC"> I</font>

450
00:21:23,409 --> 00:21:29,260
want to guide you<font color="#E5E5E5"> through all those</font>

451
00:21:26,169 --> 00:21:31,570
parts of the<font color="#E5E5E5"> packets and how I processed</font>

452
00:21:29,260 --> 00:21:34,390
<font color="#CCCCCC">all those parts implementing the</font>

453
00:21:31,570 --> 00:21:37,450
relative features so starting<font color="#E5E5E5"> from the</font>

454
00:21:34,390 --> 00:21:40,530
preamble<font color="#E5E5E5"> the board must be aware and</font>

455
00:21:37,450 --> 00:21:44,230
also you as the<font color="#E5E5E5"> user must be aware of</font>

456
00:21:40,530 --> 00:21:46,149
when you are receiving a pocket so you

457
00:21:44,230 --> 00:21:48,159
have<font color="#E5E5E5"> your line that is sending you a</font>

458
00:21:46,150 --> 00:21:50,169
lottery signal it<font color="#CCCCCC"> is in</font><font color="#E5E5E5"> idle</font><font color="#CCCCCC"> state and</font>

459
00:21:48,159 --> 00:21:52,090
then at a certain point<font color="#E5E5E5"> you will receive</font>

460
00:21:50,169 --> 00:21:54,429
this constant pattern<font color="#CCCCCC"> that I was telling</font>

461
00:21:52,090 --> 00:21:57,129
<font color="#E5E5E5">you</font><font color="#CCCCCC"> that is a series of series and one</font>

462
00:21:54,429 --> 00:21:59,500
and so your board<font color="#E5E5E5"> must be able</font><font color="#CCCCCC"> to detect</font>

463
00:21:57,130 --> 00:22:02,049
it<font color="#E5E5E5"> and the board must be able</font><font color="#CCCCCC"> to</font>

464
00:21:59,500 --> 00:22:05,530
<font color="#E5E5E5">understand that</font><font color="#CCCCCC"> the</font><font color="#E5E5E5"> preamble is done so</font>

465
00:22:02,049 --> 00:22:07,600
by these pieces of code you will see

466
00:22:05,530 --> 00:22:09,190
also<font color="#E5E5E5"> other things like CRC engine and</font>

467
00:22:07,600 --> 00:22:10,959
the crypto engine but I will talk<font color="#CCCCCC"> about</font>

468
00:22:09,190 --> 00:22:14,140
them later<font color="#CCCCCC"> the important thing</font><font color="#E5E5E5"> is that</font>

469
00:22:10,960 --> 00:22:17,050
by<font color="#CCCCCC"> this code that is just a elementary</font>

470
00:22:14,140 --> 00:22:20,330
state machine<font color="#CCCCCC"> I'm sure that at a certain</font>

471
00:22:17,050 --> 00:22:22,070
<font color="#CCCCCC">time my pocket will be inside the board</font>

472
00:22:20,330 --> 00:22:26,360
because I know that<font color="#E5E5E5"> I received the</font>

473
00:22:22,070 --> 00:22:28,370
preamble correctly moving on<font color="#CCCCCC"> what I do</font><font color="#E5E5E5"> I</font>

474
00:22:26,360 --> 00:22:30,199
want to<font color="#E5E5E5"> do now I want to implement a</font>

475
00:22:28,370 --> 00:22:32,330
kind of<font color="#E5E5E5"> a filter for the MAC address</font>

476
00:22:30,200 --> 00:22:36,560
<font color="#E5E5E5">suppose</font><font color="#CCCCCC"> that</font><font color="#E5E5E5"> you want to block all the</font>

477
00:22:32,330 --> 00:22:38,300
<font color="#E5E5E5">packets that are going towards</font><font color="#CCCCCC"> I don't</font>

478
00:22:36,560 --> 00:22:40,940
know a<font color="#E5E5E5"> specific destination</font><font color="#CCCCCC"> like you</font>

479
00:22:38,300 --> 00:22:42,740
know or from a specific<font color="#E5E5E5"> source like you</font>

480
00:22:40,940 --> 00:22:45,770
do want to block all<font color="#CCCCCC"> the packets</font><font color="#E5E5E5"> coming</font>

481
00:22:42,740 --> 00:22:48,140
from Apple devices<font color="#E5E5E5"> like for example all</font>

482
00:22:45,770 --> 00:22:49,100
the Apple devices have a specific MAC

483
00:22:48,140 --> 00:22:51,530
address<font color="#E5E5E5"> okay</font>

484
00:22:49,100 --> 00:22:54,469
so suppose that<font color="#E5E5E5"> you want to block all</font><font color="#CCCCCC"> of</font>

485
00:22:51,530 --> 00:22:56,990
them<font color="#E5E5E5"> how can you do this</font><font color="#CCCCCC"> you are able to</font>

486
00:22:54,470 --> 00:22:59,210
<font color="#E5E5E5">detect the MAC address because the MAC</font>

487
00:22:56,990 --> 00:23:02,060
address<font color="#CCCCCC"> is in</font><font color="#E5E5E5"> that</font><font color="#CCCCCC"> specific part</font><font color="#E5E5E5"> of the</font>

488
00:22:59,210 --> 00:23:04,160
pocket<font color="#CCCCCC"> and then what happens you you</font>

489
00:23:02,060 --> 00:23:05,929
still do want<font color="#E5E5E5"> to ensure the continuity</font>

490
00:23:04,160 --> 00:23:08,840
of the ahta<font color="#E5E5E5"> so the data must still</font>

491
00:23:05,930 --> 00:23:11,630
travel on<font color="#E5E5E5"> your assembly chain but at a</font>

492
00:23:08,840 --> 00:23:14,240
<font color="#CCCCCC">certain</font><font color="#E5E5E5"> point you can sample the data</font>

493
00:23:11,630 --> 00:23:17,060
<font color="#E5E5E5">that are on the main assembly chain onto</font>

494
00:23:14,240 --> 00:23:19,760
a separate belt<font color="#CCCCCC"> to perform your analysis</font>

495
00:23:17,060 --> 00:23:22,490
and<font color="#E5E5E5"> that's what they do here</font><font color="#CCCCCC"> so I sample</font>

496
00:23:19,760 --> 00:23:25,520
<font color="#E5E5E5">the MAC address</font><font color="#CCCCCC"> on a separate chain then</font>

497
00:23:22,490 --> 00:23:27,380
the data still goes through<font color="#E5E5E5"> and I can</font>

498
00:23:25,520 --> 00:23:31,570
<font color="#E5E5E5">launch my search algorithm process on</font>

499
00:23:27,380 --> 00:23:35,630
the<font color="#E5E5E5"> steady data that I have there so</font><font color="#CCCCCC"> I</font>

500
00:23:31,570 --> 00:23:37,010
instantiate<font color="#CCCCCC"> it also a blacklist</font><font color="#E5E5E5"> inside</font>

501
00:23:35,630 --> 00:23:41,750
the memory that I<font color="#CCCCCC"> previously programmed</font>

502
00:23:37,010 --> 00:23:43,670
<font color="#E5E5E5">and I would back to it later if my MAC</font>

503
00:23:41,750 --> 00:23:47,030
address is belonging<font color="#E5E5E5"> to that memory what</font>

504
00:23:43,670 --> 00:23:50,090
happens so here I<font color="#E5E5E5"> find a match well I</font>

505
00:23:47,030 --> 00:23:54,110
simply<font color="#E5E5E5"> erase all the registers that</font><font color="#CCCCCC"> are</font>

506
00:23:50,090 --> 00:23:56,300
in my assembly chain and this will be

507
00:23:54,110 --> 00:23:59,360
the<font color="#E5E5E5"> same as dropping with the whole</font>

508
00:23:56,300 --> 00:24:02,960
<font color="#CCCCCC">packet</font><font color="#E5E5E5"> but the packet will</font><font color="#CCCCCC"> be lost in</font>

509
00:23:59,360 --> 00:24:06,350
the board<font color="#E5E5E5"> and in the wire</font><font color="#CCCCCC"> this is very</font>

510
00:24:02,960 --> 00:24:09,050
important<font color="#E5E5E5"> because the packet never gets</font>

511
00:24:06,350 --> 00:24:10,879
to<font color="#E5E5E5"> the end of the board never leaves the</font>

512
00:24:09,050 --> 00:24:13,550
board<font color="#E5E5E5"> and not the other side of the</font>

513
00:24:10,880 --> 00:24:15,800
<font color="#CCCCCC">interface</font><font color="#E5E5E5"> you will be never able</font><font color="#CCCCCC"> to</font>

514
00:24:13,550 --> 00:24:19,430
understand if there was this<font color="#E5E5E5"> packet or</font>

515
00:24:15,800 --> 00:24:21,350
not<font color="#E5E5E5"> because it all happens below the</font>

516
00:24:19,430 --> 00:24:23,510
average<font color="#E5E5E5"> latency</font><font color="#CCCCCC"> as I said at</font><font color="#E5E5E5"> the</font>

517
00:24:21,350 --> 00:24:25,610
beginning<font color="#E5E5E5"> it takes just one 92</font>

518
00:24:23,510 --> 00:24:28,520
nanoseconds to perform all<font color="#E5E5E5"> this analysis</font>

519
00:24:25,610 --> 00:24:30,949
<font color="#E5E5E5">so let's go a little bit deeper and</font>

520
00:24:28,520 --> 00:24:32,810
understand what happens

521
00:24:30,950 --> 00:24:35,000
I have to<font color="#E5E5E5"> implement a smart look happy</font>

522
00:24:32,810 --> 00:24:38,570
memory<font color="#E5E5E5"> so all the MAC addresses will</font><font color="#CCCCCC"> be</font>

523
00:24:35,000 --> 00:24:40,550
filled inside<font color="#CCCCCC"> the memory</font><font color="#E5E5E5"> thanks to the</font>

524
00:24:38,570 --> 00:24:43,340
processor<font color="#CCCCCC"> that in this</font><font color="#E5E5E5"> case is very</font>

525
00:24:40,550 --> 00:24:44,720
useful because you<font color="#E5E5E5"> input from the</font>

526
00:24:43,340 --> 00:24:47,540
keyboard<font color="#CCCCCC"> at the beginning when</font><font color="#E5E5E5"> you're</font>

527
00:24:44,720 --> 00:24:50,360
configurating<font color="#CCCCCC"> your your board through an</font>

528
00:24:47,540 --> 00:24:52,310
interface<font color="#CCCCCC"> that I will show you</font><font color="#E5E5E5"> later</font><font color="#CCCCCC"> you</font>

529
00:24:50,360 --> 00:24:55,250
arrange the list properly<font color="#E5E5E5"> because</font><font color="#CCCCCC"> I</font>

530
00:24:52,310 --> 00:24:57,980
wanted<font color="#CCCCCC"> to implement dichotomic search</font>

531
00:24:55,250 --> 00:24:59,780
<font color="#E5E5E5">like a binary search</font><font color="#CCCCCC"> but in the case</font><font color="#E5E5E5"> of</font>

532
00:24:57,980 --> 00:25:02,390
the MAC addresses<font color="#E5E5E5"> to be quicker</font><font color="#CCCCCC"> I</font>

533
00:24:59,780 --> 00:25:06,740
<font color="#E5E5E5">implemented a ternary search and I will</font>

534
00:25:02,390 --> 00:25:08,840
explain<font color="#CCCCCC"> now I do want it to exploit a</font>

535
00:25:06,740 --> 00:25:13,250
very fast component inside the board

536
00:25:08,840 --> 00:25:18,919
that is called DSP<font color="#CCCCCC"> and the DSP takes 48</font>

537
00:25:13,250 --> 00:25:23,180
bit entries<font color="#CCCCCC"> so the incoming Mac is 48</font>

538
00:25:18,920 --> 00:25:26,720
bit long<font color="#E5E5E5"> but to</font><font color="#CCCCCC"> speed up</font><font color="#E5E5E5"> I'd say that</font>

539
00:25:23,180 --> 00:25:30,440
the<font color="#E5E5E5"> whole comparison I decided to take</font>

540
00:25:26,720 --> 00:25:33,470
just half of<font color="#E5E5E5"> the MAC address size that</font>

541
00:25:30,440 --> 00:25:36,200
is 24 bits<font color="#E5E5E5"> and this allowed</font><font color="#CCCCCC"> me to speed</font>

542
00:25:33,470 --> 00:25:38,420
up a lot<font color="#E5E5E5"> at the process of comparison so</font>

543
00:25:36,200 --> 00:25:41,480
you could say<font color="#CCCCCC"> ok but in</font><font color="#E5E5E5"> in this way you</font>

544
00:25:38,420 --> 00:25:43,940
will miss all<font color="#E5E5E5"> the specific let's say</font>

545
00:25:41,480 --> 00:25:46,700
devices and I can say yes you're right

546
00:25:43,940 --> 00:25:51,260
<font color="#CCCCCC">for</font><font color="#E5E5E5"> this proof of concept</font><font color="#CCCCCC"> I just decided</font>

547
00:25:46,700 --> 00:25:52,760
to<font color="#E5E5E5"> block like all the MAC addresses that</font>

548
00:25:51,260 --> 00:25:56,150
are belonging<font color="#E5E5E5"> to a</font><font color="#CCCCCC"> specific category</font><font color="#E5E5E5"> of</font>

549
00:25:52,760 --> 00:25:59,840
device so as I said<font color="#CCCCCC"> Apple devices have</font>

550
00:25:56,150 --> 00:26:02,450
their own UI<font color="#E5E5E5"> that</font><font color="#CCCCCC"> is</font><font color="#E5E5E5"> organizationally</font>

551
00:25:59,840 --> 00:26:04,699
<font color="#E5E5E5">unique identifier and these addresses</font>

552
00:26:02,450 --> 00:26:06,680
are given by the I Triple E as soon as

553
00:26:04,700 --> 00:26:10,220
you make a request for<font color="#CCCCCC"> a device like</font>

554
00:26:06,680 --> 00:26:12,950
Dell computers<font color="#E5E5E5"> you go to I Triple E and</font>

555
00:26:10,220 --> 00:26:16,160
I<font color="#CCCCCC"> police' is</font><font color="#E5E5E5"> OK for Dell devices like</font>

556
00:26:12,950 --> 00:26:18,620
like<font color="#CCCCCC"> that I will assign this set of MAC</font>

557
00:26:16,160 --> 00:26:20,780
addresses so the first<font color="#E5E5E5"> 3 bytes are fixed</font>

558
00:26:18,620 --> 00:26:24,169
<font color="#E5E5E5">and then the other 3 bytes will indicate</font>

559
00:26:20,780 --> 00:26:27,530
the device<font color="#E5E5E5"> so my filter will operate for</font>

560
00:26:24,170 --> 00:26:30,050
<font color="#E5E5E5">now</font><font color="#CCCCCC"> only with the first 3 bytes but</font>

561
00:26:27,530 --> 00:26:32,240
let's see how this search algorithm

562
00:26:30,050 --> 00:26:35,389
works<font color="#E5E5E5"> as I said is a ternary search</font>

563
00:26:32,240 --> 00:26:39,440
algorithm so I<font color="#E5E5E5"> do want to compare two</font>

564
00:26:35,390 --> 00:26:41,540
entries per time and what I do is<font color="#E5E5E5"> simply</font>

565
00:26:39,440 --> 00:26:44,830
making<font color="#E5E5E5"> a subtraction</font><font color="#CCCCCC"> at checking the</font>

566
00:26:41,540 --> 00:26:46,750
sign bit so taking the<font color="#CCCCCC"> Mac for</font>

567
00:26:44,830 --> 00:26:48,760
the network subtracting the<font color="#CCCCCC"> magnetite</font>

568
00:26:46,750 --> 00:26:52,409
stored in memory and<font color="#E5E5E5"> then checking the</font>

569
00:26:48,760 --> 00:26:55,720
sign bit<font color="#CCCCCC"> if that holds I mean it always</font>

570
00:26:52,409 --> 00:26:57,940
leads<font color="#CCCCCC"> to discrimination of two</font><font color="#E5E5E5"> groups</font>

571
00:26:55,720 --> 00:27:00,100
out of three so the third group will be

572
00:26:57,940 --> 00:27:03,070
furtherly<font color="#E5E5E5"> inspected</font><font color="#CCCCCC"> in the same way and</font>

573
00:27:00,100 --> 00:27:06,850
the whole process can<font color="#CCCCCC"> be summarized with</font>

574
00:27:03,070 --> 00:27:10,120
<font color="#E5E5E5">this state diagram and it takes always</font>

575
00:27:06,850 --> 00:27:12,908
the same time to be executed<font color="#E5E5E5"> because</font><font color="#CCCCCC"> I</font>

576
00:27:10,120 --> 00:27:16,570
know that by ternary dividing every time

577
00:27:12,909 --> 00:27:19,360
a set of<font color="#CCCCCC"> 80 elements I will come to just</font>

578
00:27:16,570 --> 00:27:22,269
<font color="#CCCCCC">1 and if this one is still not belonging</font>

579
00:27:19,360 --> 00:27:23,678
<font color="#E5E5E5">to the memory that</font><font color="#CCCCCC"> means that my entry</font>

580
00:27:22,269 --> 00:27:25,750
that<font color="#E5E5E5"> I found from the network is not</font>

581
00:27:23,679 --> 00:27:29,470
<font color="#CCCCCC">belonging</font><font color="#E5E5E5"> to memory so it could go</font>

582
00:27:25,750 --> 00:27:31,299
through<font color="#CCCCCC"> so how to configure</font><font color="#E5E5E5"> this I will</font>

583
00:27:29,470 --> 00:27:34,630
introduce now a small team of<font color="#E5E5E5"> the type I</font>

584
00:27:31,299 --> 00:27:37,029
prepared first<font color="#E5E5E5"> this is</font><font color="#CCCCCC"> the</font><font color="#E5E5E5"> interface</font>

585
00:27:34,630 --> 00:27:39,850
<font color="#E5E5E5">that you will see from the computer when</font>

586
00:27:37,029 --> 00:27:42,850
<font color="#E5E5E5">running this software</font><font color="#CCCCCC"> and there are as I</font>

587
00:27:39,850 --> 00:27:44,830
said<font color="#E5E5E5"> you can input up to 81 entries that</font>

588
00:27:42,850 --> 00:27:48,219
<font color="#E5E5E5">is corresponding</font><font color="#CCCCCC"> to 3 to</font><font color="#E5E5E5"> the power of 4</font>

589
00:27:44,830 --> 00:27:51,699
<font color="#E5E5E5">because of</font><font color="#CCCCCC"> my ternary division algorithm</font>

590
00:27:48,220 --> 00:27:54,130
that takes<font color="#E5E5E5"> as I said just</font><font color="#CCCCCC"> 4 cycles</font><font color="#E5E5E5"> to be</font>

591
00:27:51,700 --> 00:27:57,370
done well the<font color="#E5E5E5"> fifth cycle is important</font>

592
00:27:54,130 --> 00:27:59,440
as well<font color="#E5E5E5"> and then</font><font color="#CCCCCC"> you have to indicate</font>

593
00:27:57,370 --> 00:28:01,209
whether you are filtering<font color="#E5E5E5"> source MAC</font>

594
00:27:59,440 --> 00:28:04,840
addresses or<font color="#E5E5E5"> destination MAC addresses</font>

595
00:28:01,210 --> 00:28:07,960
or both so this<font color="#E5E5E5"> is the</font><font color="#CCCCCC"> setup</font><font color="#E5E5E5"> I had two</font>

596
00:28:04,840 --> 00:28:09,730
workstations<font color="#CCCCCC"> one connected to</font><font color="#E5E5E5"> the first</font>

597
00:28:07,960 --> 00:28:11,950
interface<font color="#CCCCCC"> the</font><font color="#E5E5E5"> other to the second</font>

598
00:28:09,730 --> 00:28:13,600
<font color="#E5E5E5">interface</font><font color="#CCCCCC"> I was generating some traffic</font>

599
00:28:11,950 --> 00:28:15,340
with a workstation number<font color="#CCCCCC"> one and</font>

600
00:28:13,600 --> 00:28:17,918
receiving<font color="#CCCCCC"> that traffic on the</font>

601
00:28:15,340 --> 00:28:20,740
workstation number<font color="#E5E5E5"> two so you can see</font>

602
00:28:17,919 --> 00:28:25,720
from from<font color="#E5E5E5"> here sorry</font><font color="#CCCCCC"> for the video</font>

603
00:28:20,740 --> 00:28:30,070
quality that<font color="#E5E5E5"> is not so good but I hope</font>

604
00:28:25,720 --> 00:28:31,870
you can still enjoy it<font color="#CCCCCC"> so here I'm</font>

605
00:28:30,070 --> 00:28:34,570
<font color="#E5E5E5">indicating in this code</font><font color="#CCCCCC"> that is</font>

606
00:28:31,870 --> 00:28:38,289
corresponding<font color="#CCCCCC"> to the up or unique</font>

607
00:28:34,570 --> 00:28:41,408
identifier<font color="#E5E5E5"> because I hate Apple but this</font>

608
00:28:38,289 --> 00:28:45,340
is another story<font color="#CCCCCC"> and I confirm my</font>

609
00:28:41,409 --> 00:28:47,799
<font color="#CCCCCC">blacklist here and I I just</font><font color="#E5E5E5"> launched</font><font color="#CCCCCC"> the</font>

610
00:28:45,340 --> 00:28:49,928
interface<font color="#E5E5E5"> and here I'm generating some</font>

611
00:28:47,799 --> 00:28:51,760
traffic<font color="#E5E5E5"> the first is coming from</font>

612
00:28:49,929 --> 00:28:56,830
<font color="#CCCCCC">exciting</font><font color="#E5E5E5"> device and is directed to a</font>

613
00:28:51,760 --> 00:28:57,760
generic device this 58e<font color="#E5E5E5"> 287 that you see</font>

614
00:28:56,830 --> 00:29:03,039
here

615
00:28:57,760 --> 00:29:05,260
indicates a generic device and<font color="#E5E5E5"> here</font>

616
00:29:03,039 --> 00:29:09,070
<font color="#E5E5E5">following you will see that time also</font>

617
00:29:05,260 --> 00:29:10,510
generating<font color="#CCCCCC"> pockets are directed to</font><font color="#E5E5E5"> Apple</font>

618
00:29:09,070 --> 00:29:14,200
device<font color="#E5E5E5"> a well that are generated by</font>

619
00:29:10,510 --> 00:29:18,610
<font color="#CCCCCC">sorry Apple devices and this traffic is</font>

620
00:29:14,200 --> 00:29:21,010
routed to my secondary machine here and

621
00:29:18,610 --> 00:29:23,830
as you can<font color="#CCCCCC"> see the first one</font><font color="#E5E5E5"> are</font>

622
00:29:21,010 --> 00:29:27,730
correctly delivered but there is no

623
00:29:23,830 --> 00:29:30,129
evidence<font color="#E5E5E5"> of any trace of the following</font>

624
00:29:27,730 --> 00:29:33,519
<font color="#CCCCCC">packets from Apple so here I included a</font>

625
00:29:30,130 --> 00:29:36,940
different screen shot<font color="#E5E5E5"> from Wireshark</font><font color="#CCCCCC"> I</font>

626
00:29:33,519 --> 00:29:39,669
was<font color="#E5E5E5"> using another another pair of MAC</font>

627
00:29:36,940 --> 00:29:41,500
addresses and I was filtering<font color="#CCCCCC"> X eiling's</font>

628
00:29:39,669 --> 00:29:42,970
<font color="#CCCCCC">one so you can</font><font color="#E5E5E5"> see that there is a</font>

629
00:29:41,500 --> 00:29:45,070
<font color="#CCCCCC">one-to-one correspondence</font><font color="#E5E5E5"> with the</font>

630
00:29:42,970 --> 00:29:47,200
elements that I pointed with the arrows

631
00:29:45,070 --> 00:29:51,639
<font color="#E5E5E5">but there is no trace regarding the</font>

632
00:29:47,200 --> 00:29:52,870
others and so summarizing what did I get

633
00:29:51,639 --> 00:29:55,149
from<font color="#E5E5E5"> this</font>

634
00:29:52,870 --> 00:29:58,149
I just need<font color="#CCCCCC"> 80 nanosecond to browse the</font>

635
00:29:55,149 --> 00:30:00,489
whole memory<font color="#CCCCCC"> and find if the Mac were</font>

636
00:29:58,149 --> 00:30:04,149
<font color="#CCCCCC">belonging to it and this is improvable</font>

637
00:30:00,490 --> 00:30:06,789
<font color="#CCCCCC">to 64 nanoseconds because</font><font color="#E5E5E5"> I messed up</font>

638
00:30:04,149 --> 00:30:08,559
something<font color="#E5E5E5"> with the</font><font color="#CCCCCC"> algorithm but I can</font>

639
00:30:06,789 --> 00:30:11,470
you can trust me that it is<font color="#CCCCCC"> improvable</font>

640
00:30:08,559 --> 00:30:15,039
<font color="#CCCCCC">today</font><font color="#E5E5E5"> I can tell you later in</font><font color="#CCCCCC"> armory if</font>

641
00:30:11,470 --> 00:30:17,320
you just<font color="#E5E5E5"> drop by</font><font color="#CCCCCC"> the process</font><font color="#E5E5E5"> ends always</font>

642
00:30:15,039 --> 00:30:19,450
<font color="#CCCCCC">on the same</font><font color="#E5E5E5"> checkpoint and this is</font>

643
00:30:17,320 --> 00:30:22,840
important as I<font color="#E5E5E5"> said at the beginning you</font>

644
00:30:19,450 --> 00:30:25,750
have<font color="#E5E5E5"> you must be always aware</font><font color="#CCCCCC"> of where</font>

645
00:30:22,840 --> 00:30:27,760
the packet is inside the board<font color="#E5E5E5"> and since</font>

646
00:30:25,750 --> 00:30:30,100
you know<font color="#E5E5E5"> that the process takes always</font>

647
00:30:27,760 --> 00:30:33,760
the same<font color="#E5E5E5"> amount of time</font><font color="#CCCCCC"> to run</font><font color="#E5E5E5"> you know</font>

648
00:30:30,100 --> 00:30:37,389
that<font color="#CCCCCC"> 10 bytes</font><font color="#E5E5E5"> are entering the board</font>

649
00:30:33,760 --> 00:30:40,210
<font color="#E5E5E5">while you are processing the</font><font color="#CCCCCC"> mac filter</font>

650
00:30:37,389 --> 00:30:41,860
so<font color="#E5E5E5"> I know exactly where the packet is</font>

651
00:30:40,210 --> 00:30:45,690
inside<font color="#CCCCCC"> my board</font><font color="#E5E5E5"> and this is very</font>

652
00:30:41,860 --> 00:30:49,240
important so I can go and move on<font color="#CCCCCC"> and</font>

653
00:30:45,690 --> 00:30:52,179
now face the<font color="#E5E5E5"> eater type</font><font color="#CCCCCC"> I decided to</font>

654
00:30:49,240 --> 00:30:55,269
implement<font color="#E5E5E5"> kind of the same algorithm to</font>

655
00:30:52,179 --> 00:30:57,340
filter the eater types so in this case

656
00:30:55,269 --> 00:31:01,539
for example<font color="#E5E5E5"> I didn't want to let through</font>

657
00:30:57,340 --> 00:31:03,730
all the<font color="#E5E5E5"> ipv4 pockets let's say I do not</font>

658
00:31:01,539 --> 00:31:04,120
<font color="#E5E5E5">want</font><font color="#CCCCCC"> any ipv4 packet to go through the</font>

659
00:31:03,730 --> 00:31:07,330
board

660
00:31:04,120 --> 00:31:08,979
so the algorithm<font color="#E5E5E5"> works in the same way</font>

661
00:31:07,330 --> 00:31:11,210
<font color="#E5E5E5">you store first</font>

662
00:31:08,980 --> 00:31:13,669
the blacklist entries in

663
00:31:11,210 --> 00:31:15,950
inside the memory<font color="#E5E5E5"> you sort them and then</font>

664
00:31:13,669 --> 00:31:19,159
the board will<font color="#CCCCCC"> take</font><font color="#E5E5E5"> care of</font><font color="#CCCCCC"> the whole</font>

665
00:31:15,950 --> 00:31:21,049
<font color="#CCCCCC">process</font><font color="#E5E5E5"> by just dividing the set of</font>

666
00:31:19,159 --> 00:31:26,299
entries<font color="#CCCCCC"> that you</font><font color="#E5E5E5"> have in memory up to</font>

667
00:31:21,049 --> 00:31:28,730
<font color="#E5E5E5">the single element and this time this is</font>

668
00:31:26,299 --> 00:31:30,950
a binary<font color="#E5E5E5"> search algorithm but where I'm</font>

669
00:31:28,730 --> 00:31:34,450
checking<font color="#E5E5E5"> two entries per time because</font>

670
00:31:30,950 --> 00:31:38,029
the<font color="#E5E5E5"> eater type is just</font><font color="#CCCCCC"> two byte field</font><font color="#E5E5E5"> so</font>

671
00:31:34,450 --> 00:31:42,200
<font color="#E5E5E5">since the DSP is able to process up to</font>

672
00:31:38,029 --> 00:31:46,610
48 bit variables<font color="#CCCCCC"> I decided to put just</font>

673
00:31:42,200 --> 00:31:48,409
<font color="#E5E5E5">two because they were fitting then okay</font>

674
00:31:46,610 --> 00:31:50,990
we can skip<font color="#E5E5E5"> this if you have any</font>

675
00:31:48,409 --> 00:31:52,159
additional<font color="#E5E5E5"> question on the on the</font>

676
00:31:50,990 --> 00:31:54,200
differences<font color="#CCCCCC"> between the two algorithms</font>

677
00:31:52,159 --> 00:31:56,750
<font color="#E5E5E5">as I said since it will be mostly</font>

678
00:31:54,200 --> 00:31:59,720
<font color="#CCCCCC">technical you can keep for later</font><font color="#E5E5E5"> or I</font>

679
00:31:56,750 --> 00:32:01,760
<font color="#E5E5E5">would be</font><font color="#CCCCCC"> glad to</font><font color="#E5E5E5"> answer so let's come</font>

680
00:31:59,720 --> 00:32:04,429
now to<font color="#E5E5E5"> the payload</font><font color="#CCCCCC"> what did i do on the</font>

681
00:32:01,760 --> 00:32:07,090
payload<font color="#CCCCCC"> I as I</font><font color="#E5E5E5"> said I decided to</font>

682
00:32:04,429 --> 00:32:10,880
implement<font color="#E5E5E5"> an encryption environment to</font>

683
00:32:07,090 --> 00:32:13,549
build<font color="#E5E5E5"> what is kind of an Hardware VPN</font>

684
00:32:10,880 --> 00:32:15,770
device<font color="#E5E5E5"> because if</font><font color="#CCCCCC"> I'm able to</font><font color="#E5E5E5"> encrypt</font>

685
00:32:13,549 --> 00:32:17,450
the data in<font color="#CCCCCC"> real time do you</font><font color="#E5E5E5"> remember</font>

686
00:32:15,770 --> 00:32:19,908
the first<font color="#E5E5E5"> problem that I show you that</font>

687
00:32:17,450 --> 00:32:22,940
<font color="#CCCCCC">when I</font><font color="#E5E5E5"> was considering VPN I said is it</font>

688
00:32:19,909 --> 00:32:25,460
real time<font color="#E5E5E5"> and this time</font><font color="#CCCCCC"> I want to</font><font color="#E5E5E5"> make</font>

689
00:32:22,940 --> 00:32:27,710
<font color="#CCCCCC">it real time</font><font color="#E5E5E5"> because as you</font><font color="#CCCCCC"> realize</font>

690
00:32:25,460 --> 00:32:29,630
<font color="#E5E5E5">probably up to now</font><font color="#CCCCCC"> I am able to</font><font color="#E5E5E5"> make the</font>

691
00:32:27,710 --> 00:32:32,390
whole<font color="#CCCCCC"> process in less than 0.2</font>

692
00:32:29,630 --> 00:32:34,520
<font color="#CCCCCC">microseconds</font><font color="#E5E5E5"> and since it is</font>

693
00:32:32,390 --> 00:32:38,330
undetectable by other<font color="#E5E5E5"> sources I consider</font>

694
00:32:34,520 --> 00:32:40,129
this as a real time equivalent so what

695
00:32:38,330 --> 00:32:43,158
you know what did I do

696
00:32:40,130 --> 00:32:46,130
the interface<font color="#E5E5E5"> is very simple the user is</font>

697
00:32:43,159 --> 00:32:49,220
requested<font color="#CCCCCC"> to input a password</font><font color="#E5E5E5"> and from</font>

698
00:32:46,130 --> 00:32:51,260
that<font color="#E5E5E5"> password the board will generate</font>

699
00:32:49,220 --> 00:32:54,760
the keys<font color="#CCCCCC"> that are required</font><font color="#E5E5E5"> to encrypt</font>

700
00:32:51,260 --> 00:32:59,059
the data<font color="#E5E5E5"> while they are traveling</font><font color="#CCCCCC"> and</font>

701
00:32:54,760 --> 00:33:01,039
the scheme is really really simple<font color="#CCCCCC"> so</font>

702
00:32:59,059 --> 00:33:03,020
you are still receiving<font color="#E5E5E5"> the data you</font>

703
00:33:01,039 --> 00:33:05,809
<font color="#CCCCCC">want</font><font color="#E5E5E5"> to ensure</font><font color="#CCCCCC"> the</font><font color="#E5E5E5"> continuity of data as</font>

704
00:33:03,020 --> 00:33:08,179
I said before<font color="#E5E5E5"> so when they are traveling</font>

705
00:33:05,809 --> 00:33:13,610
you<font color="#E5E5E5"> do want to sample on a separate</font>

706
00:33:08,179 --> 00:33:15,500
chain<font color="#E5E5E5"> this data so this data are still</font>

707
00:33:13,610 --> 00:33:18,168
<font color="#CCCCCC">going through</font><font color="#E5E5E5"> but this time on the on</font>

708
00:33:15,500 --> 00:33:20,840
the separate on a separate belt you have

709
00:33:18,169 --> 00:33:23,659
the logic that is performing the

710
00:33:20,840 --> 00:33:24,428
encryption<font color="#E5E5E5"> of</font><font color="#CCCCCC"> the data</font><font color="#E5E5E5"> so at this time</font>

711
00:33:23,659 --> 00:33:26,110
you

712
00:33:24,429 --> 00:33:28,210
have both the original<font color="#CCCCCC"> version of the</font>

713
00:33:26,110 --> 00:33:31,508
data and the encrypted<font color="#E5E5E5"> version</font><font color="#CCCCCC"> of</font><font color="#E5E5E5"> the</font>

714
00:33:28,210 --> 00:33:33,220
data<font color="#E5E5E5"> so what what can</font><font color="#CCCCCC"> I do to just</font>

715
00:33:31,509 --> 00:33:35,289
<font color="#CCCCCC">substitute the original with</font><font color="#E5E5E5"> the</font>

716
00:33:33,220 --> 00:33:38,740
encrypted<font color="#E5E5E5"> one I will use a multiplexer</font>

717
00:33:35,289 --> 00:33:40,929
<font color="#CCCCCC">that takes the encrypted</font><font color="#E5E5E5"> version and</font>

718
00:33:38,740 --> 00:33:43,269
<font color="#E5E5E5">replaces</font><font color="#CCCCCC"> with the original in this way</font>

719
00:33:40,929 --> 00:33:47,529
<font color="#E5E5E5">so the data will be modified on the</font>

720
00:33:43,269 --> 00:33:49,299
flight<font color="#E5E5E5"> okay regarding now more the more</font>

721
00:33:47,529 --> 00:33:51,309
detailed part regarding the encryption

722
00:33:49,299 --> 00:33:53,529
system<font color="#CCCCCC"> I first put this disclaimer</font>

723
00:33:51,309 --> 00:33:56,379
because<font color="#CCCCCC"> I'm not a crypto expert and just</font>

724
00:33:53,529 --> 00:34:00,129
to make<font color="#E5E5E5"> this proof of concept devices</font><font color="#CCCCCC"> I</font>

725
00:33:56,379 --> 00:34:02,830
do not really<font color="#E5E5E5"> invest a lot of</font><font color="#CCCCCC"> time to</font>

726
00:34:00,129 --> 00:34:05,590
build<font color="#E5E5E5"> up a very strong and robust</font>

727
00:34:02,830 --> 00:34:10,779
<font color="#E5E5E5">security algorithm so please don't blame</font>

728
00:34:05,590 --> 00:34:12,759
<font color="#E5E5E5">me for that</font><font color="#CCCCCC"> so without</font><font color="#E5E5E5"> saying more funny</font>

729
00:34:10,780 --> 00:34:16,089
stories<font color="#CCCCCC"> about</font><font color="#E5E5E5"> that I will show you how</font>

730
00:34:12,760 --> 00:34:18,389
it works<font color="#CCCCCC"> basically from the password</font>

731
00:34:16,089 --> 00:34:20,168
<font color="#CCCCCC">that the user inputs</font><font color="#E5E5E5"> I will generate a</font>

732
00:34:18,389 --> 00:34:23,470
<font color="#E5E5E5">32-bit hash</font>

733
00:34:20,168 --> 00:34:25,598
yes it's very<font color="#CCCCCC"> low</font><font color="#E5E5E5"> but I mean it's</font><font color="#CCCCCC"> very</font>

734
00:34:23,469 --> 00:34:28,449
small<font color="#E5E5E5"> this harsh but I need</font><font color="#CCCCCC"> it because</font><font color="#E5E5E5"> I</font>

735
00:34:25,599 --> 00:34:31,720
have<font color="#E5E5E5"> to process one byte</font><font color="#CCCCCC"> per time so to</font>

736
00:34:28,449 --> 00:34:35,888
make it<font color="#CCCCCC"> more</font><font color="#E5E5E5"> secure I just take subsets</font>

737
00:34:31,719 --> 00:34:38,678
of these data<font color="#E5E5E5"> 8-bit subsets and it works</font>

738
00:34:35,889 --> 00:34:41,409
in<font color="#E5E5E5"> this way you have</font><font color="#CCCCCC"> the password input</font>

739
00:34:38,679 --> 00:34:44,230
by the user you generate the harsh<font color="#E5E5E5"> and</font>

740
00:34:41,409 --> 00:34:46,419
then this is handled<font color="#CCCCCC"> by</font><font color="#E5E5E5"> the processor</font>

741
00:34:44,230 --> 00:34:49,710
<font color="#E5E5E5">that</font><font color="#CCCCCC"> has still</font><font color="#E5E5E5"> the computing power that</font>

742
00:34:46,418 --> 00:34:52,658
<font color="#E5E5E5">you need to generate hashes very quickly</font>

743
00:34:49,710 --> 00:34:55,149
<font color="#E5E5E5">but then what happens</font><font color="#CCCCCC"> these data must be</font>

744
00:34:52,659 --> 00:34:59,309
communicated<font color="#CCCCCC"> to</font><font color="#E5E5E5"> the hardware logic</font>

745
00:34:55,149 --> 00:35:02,109
platform<font color="#E5E5E5"> and to do</font><font color="#CCCCCC"> this I</font><font color="#E5E5E5"> simply</font>

746
00:34:59,309 --> 00:35:04,510
instigated the channel of communication

747
00:35:02,109 --> 00:35:06,880
that<font color="#E5E5E5"> is delivering the whole hash into</font>

748
00:35:04,510 --> 00:35:09,520
<font color="#E5E5E5">the hardware platform and stores into a</font>

749
00:35:06,880 --> 00:35:11,049
bunch of registers now to<font color="#E5E5E5"> support this</font>

750
00:35:09,520 --> 00:35:14,259
recycling<font color="#E5E5E5"> of the</font><font color="#CCCCCC"> keys</font>

751
00:35:11,049 --> 00:35:16,270
I mean I'm generating<font color="#CCCCCC"> at first</font><font color="#E5E5E5"> a big key</font>

752
00:35:14,260 --> 00:35:19,150
and then I'm taking subsets<font color="#E5E5E5"> of this key</font>

753
00:35:16,270 --> 00:35:21,040
<font color="#CCCCCC">to have multiple keys I'm just cycling</font>

754
00:35:19,150 --> 00:35:23,589
<font color="#CCCCCC">through like</font><font color="#E5E5E5"> this taking subsets and</font>

755
00:35:21,040 --> 00:35:25,779
this is done<font color="#E5E5E5"> by cycling the data inside</font>

756
00:35:23,589 --> 00:35:28,990
<font color="#CCCCCC">the registers connecting them in a ring</font>

757
00:35:25,780 --> 00:35:32,290
shape and so it's as<font color="#CCCCCC"> if you have this</font>

758
00:35:28,990 --> 00:35:34,359
<font color="#CCCCCC">situation and this goes on</font><font color="#E5E5E5"> along</font><font color="#CCCCCC"> with</font>

759
00:35:32,290 --> 00:35:37,569
<font color="#CCCCCC">the clock the main clock and along with</font>

760
00:35:34,359 --> 00:35:40,540
<font color="#CCCCCC">the data</font><font color="#E5E5E5"> that is coming through and what</font>

761
00:35:37,569 --> 00:35:43,930
happens from<font color="#CCCCCC"> this subset of</font><font color="#E5E5E5"> eight bits</font>

762
00:35:40,540 --> 00:35:46,480
that are variable<font color="#CCCCCC"> I just okay yes it's a</font>

763
00:35:43,930 --> 00:35:48,520
symmetric operator<font color="#E5E5E5"> the simplest one that</font>

764
00:35:46,480 --> 00:35:53,049
I could<font color="#CCCCCC"> use but it's a proof-of-concept</font>

765
00:35:48,520 --> 00:35:56,109
device<font color="#CCCCCC"> I will say once again</font><font color="#E5E5E5"> and using</font>

766
00:35:53,049 --> 00:35:57,759
this<font color="#E5E5E5"> hardware in this way</font><font color="#CCCCCC"> I can use the</font>

767
00:35:56,109 --> 00:35:59,348
same<font color="#E5E5E5"> hardware for both encrypting and</font>

768
00:35:57,760 --> 00:36:03,309
decrypting<font color="#CCCCCC"> because it's a symmetric</font>

769
00:35:59,349 --> 00:36:05,380
operation<font color="#CCCCCC"> so there is</font><font color="#E5E5E5"> only one thing</font>

770
00:36:03,309 --> 00:36:08,559
<font color="#E5E5E5">missing now how can</font><font color="#CCCCCC"> the board</font>

771
00:36:05,380 --> 00:36:10,569
<font color="#E5E5E5">distinguish from the original pocket</font><font color="#CCCCCC"> so</font>

772
00:36:08,559 --> 00:36:12,160
the plain text<font color="#CCCCCC"> version and the</font><font color="#E5E5E5"> cipher</font>

773
00:36:10,569 --> 00:36:14,140
person<font color="#E5E5E5"> because in this way</font><font color="#CCCCCC"> I'm</font>

774
00:36:12,160 --> 00:36:16,960
<font color="#E5E5E5">encrypting all the payload but how</font><font color="#CCCCCC"> can</font>

775
00:36:14,140 --> 00:36:19,509
the board decide whether to accept the

776
00:36:16,960 --> 00:36:22,390
packet or decrypt it first<font color="#E5E5E5"> so I need to</font>

777
00:36:19,510 --> 00:36:26,470
put some signature<font color="#E5E5E5"> somewhere</font><font color="#CCCCCC"> and I want</font>

778
00:36:22,390 --> 00:36:30,129
to first put<font color="#CCCCCC"> some requirements that</font><font color="#E5E5E5"> I</font>

779
00:36:26,470 --> 00:36:32,500
need and<font color="#CCCCCC"> I</font><font color="#E5E5E5"> I do want</font><font color="#CCCCCC"> to preserve the</font>

780
00:36:30,130 --> 00:36:34,660
size of the pocket<font color="#CCCCCC"> so I do not</font><font color="#E5E5E5"> want to</font>

781
00:36:32,500 --> 00:36:36,400
enlarge the payload<font color="#E5E5E5"> to include the</font>

782
00:36:34,660 --> 00:36:38,290
signature<font color="#E5E5E5"> because otherwise on the other</font>

783
00:36:36,400 --> 00:36:41,710
side<font color="#E5E5E5"> of the interface</font><font color="#CCCCCC"> you can detect</font>

784
00:36:38,290 --> 00:36:42,819
<font color="#E5E5E5">that packets have different sizes</font><font color="#CCCCCC"> and I</font>

785
00:36:41,710 --> 00:36:45,069
do not want to do this

786
00:36:42,819 --> 00:36:48,119
of course the checksum would be

787
00:36:45,069 --> 00:36:51,369
recomputed<font color="#E5E5E5"> otherwise it will result in a</font>

788
00:36:48,119 --> 00:36:53,319
packet failure because the checksum<font color="#CCCCCC"> is</font>

789
00:36:51,369 --> 00:36:56,650
wrong<font color="#E5E5E5"> so maybe the following interface</font>

790
00:36:53,319 --> 00:36:59,319
will not accept the pocket<font color="#CCCCCC"> and lastly</font>

791
00:36:56,650 --> 00:37:02,170
but not leastly the market the marketers

792
00:36:59,319 --> 00:37:04,660
<font color="#CCCCCC">should be preserved otherwise you cannot</font>

793
00:37:02,170 --> 00:37:07,660
deliver correctly your pocket to the

794
00:37:04,660 --> 00:37:09,339
<font color="#CCCCCC">following and the point</font><font color="#E5E5E5"> so no way to</font>

795
00:37:07,660 --> 00:37:12,040
include<font color="#CCCCCC"> the signature in the preamble</font>

796
00:37:09,339 --> 00:37:14,680
<font color="#E5E5E5">otherwise the board will not be</font><font color="#CCCCCC"> able to</font>

797
00:37:12,040 --> 00:37:16,420
detect the<font color="#CCCCCC"> packet no way of course</font><font color="#E5E5E5"> to</font>

798
00:37:14,680 --> 00:37:19,390
<font color="#E5E5E5">include</font><font color="#CCCCCC"> in the Mac because I explained</font>

799
00:37:16,420 --> 00:37:22,270
you<font color="#CCCCCC"> the payload is already encrypted and</font>

800
00:37:19,390 --> 00:37:25,799
could not be enlarged<font color="#E5E5E5"> so once again no</font>

801
00:37:22,270 --> 00:37:27,670
way to<font color="#E5E5E5"> use that the checksum could be</font>

802
00:37:25,799 --> 00:37:31,210
manipulated actually to include a

803
00:37:27,670 --> 00:37:33,490
signature<font color="#E5E5E5"> but once again it will be hard</font>

804
00:37:31,210 --> 00:37:35,440
for<font color="#E5E5E5"> another interface</font><font color="#CCCCCC"> to accept the</font>

805
00:37:33,490 --> 00:37:38,589
pocket<font color="#E5E5E5"> because it will be considered as</font>

806
00:37:35,440 --> 00:37:40,390
malformed<font color="#CCCCCC"> so the only missing part is</font>

807
00:37:38,589 --> 00:37:42,430
the easier type that is containing the

808
00:37:40,390 --> 00:37:45,640
<font color="#CCCCCC">information related to the protocol so</font>

809
00:37:42,430 --> 00:37:50,980
what is inside the pocket and this field

810
00:37:45,640 --> 00:37:52,600
is<font color="#E5E5E5"> not containing values I mean</font>

811
00:37:50,980 --> 00:37:55,420
all the values that<font color="#CCCCCC"> you can put there</font>

812
00:37:52,600 --> 00:37:58,060
are not already assigned the I Triple<font color="#E5E5E5"> E</font>

813
00:37:55,420 --> 00:38:00,430
once again<font color="#CCCCCC"> decides whether to</font><font color="#E5E5E5"> assign to</font>

814
00:37:58,060 --> 00:38:03,640
a specific protocol corresponding<font color="#CCCCCC"> ATAR</font>

815
00:38:00,430 --> 00:38:05,859
type<font color="#E5E5E5"> so what did I decide to do just</font>

816
00:38:03,640 --> 00:38:07,720
taking the first<font color="#CCCCCC"> theater type and</font>

817
00:38:05,859 --> 00:38:09,880
generating<font color="#E5E5E5"> well not generating just</font>

818
00:38:07,720 --> 00:38:13,029
inspecting the list and if there is a

819
00:38:09,880 --> 00:38:15,700
non assigned either type just matching

820
00:38:13,030 --> 00:38:18,369
with the original<font color="#E5E5E5"> either type and</font>

821
00:38:15,700 --> 00:38:21,009
changing that<font color="#CCCCCC"> so by changing the easier</font>

822
00:38:18,369 --> 00:38:23,109
type<font color="#E5E5E5"> I'm able to let the board</font>

823
00:38:21,010 --> 00:38:28,150
<font color="#E5E5E5">understand whether the packet is</font>

824
00:38:23,109 --> 00:38:30,310
<font color="#E5E5E5">encrypted or not</font><font color="#CCCCCC"> and I did take the ipv4</font>

825
00:38:28,150 --> 00:38:33,609
code<font color="#E5E5E5"> it is zero eight zero zero</font><font color="#CCCCCC"> and</font>

826
00:38:30,310 --> 00:38:36,759
using this network<font color="#E5E5E5"> of hardware logic</font>

827
00:38:33,609 --> 00:38:39,520
components<font color="#CCCCCC"> I will be able</font><font color="#E5E5E5"> to modify on</font>

828
00:38:36,760 --> 00:38:42,820
the flight<font color="#CCCCCC"> this value</font><font color="#E5E5E5"> into a custom</font>

829
00:38:39,520 --> 00:38:45,250
value<font color="#E5E5E5"> and this</font><font color="#CCCCCC"> will be done thanks to</font>

830
00:38:42,820 --> 00:38:47,770
those multiplexers when you see them in

831
00:38:45,250 --> 00:38:51,369
red it means that they<font color="#E5E5E5"> are taking the</font>

832
00:38:47,770 --> 00:38:52,930
low connection so the red one<font color="#E5E5E5"> and if</font>

833
00:38:51,369 --> 00:38:54,910
they are turning<font color="#E5E5E5"> into blue they will</font>

834
00:38:52,930 --> 00:38:58,149
accept<font color="#CCCCCC"> at the upper one</font><font color="#E5E5E5"> so what happens</font>

835
00:38:54,910 --> 00:39:00,399
the data<font color="#E5E5E5"> entering I know since I</font><font color="#CCCCCC"> told</font>

836
00:38:58,150 --> 00:39:02,380
you before<font color="#CCCCCC"> I</font><font color="#E5E5E5"> always know the position</font><font color="#CCCCCC"> of</font>

837
00:39:00,400 --> 00:39:05,260
the bytes of my pocket<font color="#E5E5E5"> inside my</font>

838
00:39:02,380 --> 00:39:09,160
<font color="#E5E5E5">pipeline</font><font color="#CCCCCC"> so I do want</font><font color="#E5E5E5"> to trigger those</font>

839
00:39:05,260 --> 00:39:14,140
multiplexers<font color="#E5E5E5"> only when the zero</font><font color="#CCCCCC"> eight is</font>

840
00:39:09,160 --> 00:39:16,569
going<font color="#CCCCCC"> to be placed in this</font><font color="#E5E5E5"> register and</font>

841
00:39:14,140 --> 00:39:18,220
when the zero zero<font color="#CCCCCC"> is</font><font color="#E5E5E5"> going to</font><font color="#CCCCCC"> be placed</font>

842
00:39:16,570 --> 00:39:20,140
in<font color="#E5E5E5"> this register because</font><font color="#CCCCCC"> in this way I</font>

843
00:39:18,220 --> 00:39:22,779
<font color="#E5E5E5">can take</font><font color="#CCCCCC"> the</font><font color="#E5E5E5"> corresponding entry</font>

844
00:39:20,140 --> 00:39:25,779
encrypted versions<font color="#E5E5E5"> and let them through</font>

845
00:39:22,780 --> 00:39:28,359
<font color="#E5E5E5">so right now it's still red because it's</font>

846
00:39:25,780 --> 00:39:32,520
not the desired situation<font color="#E5E5E5"> but here it</font>

847
00:39:28,359 --> 00:39:35,200
<font color="#E5E5E5">becomes blue so I get here the custom</font>

848
00:39:32,520 --> 00:39:37,570
generated number and it will<font color="#E5E5E5"> be pushed</font>

849
00:39:35,200 --> 00:39:40,868
through<font color="#E5E5E5"> the whole network so in the end</font>

850
00:39:37,570 --> 00:39:45,490
I will<font color="#CCCCCC"> have a packet with a different</font><font color="#E5E5E5"> I</font>

851
00:39:40,869 --> 00:39:47,109
am a<font color="#E5E5E5"> different eater type ID</font><font color="#CCCCCC"> and</font><font color="#E5E5E5"> we do</font>

852
00:39:45,490 --> 00:39:51,600
encrypted the version of<font color="#E5E5E5"> the palette</font>

853
00:39:47,109 --> 00:39:54,970
<font color="#CCCCCC">that</font><font color="#E5E5E5"> I generated before</font><font color="#CCCCCC"> so in the end</font>

854
00:39:51,600 --> 00:39:57,700
<font color="#E5E5E5">the board will automatically detect and</font>

855
00:39:54,970 --> 00:40:00,580
<font color="#E5E5E5">decrypt the pockets</font><font color="#CCCCCC"> why because if it if</font>

856
00:39:57,700 --> 00:40:02,529
the Board finds this custom<font color="#CCCCCC"> easier type</font>

857
00:40:00,580 --> 00:40:04,299
it will understand immediately that<font color="#E5E5E5"> the</font>

858
00:40:02,530 --> 00:40:07,030
packet<font color="#E5E5E5"> needs to be decrypted</font>

859
00:40:04,300 --> 00:40:09,550
and the hardware<font color="#CCCCCC"> will be</font><font color="#E5E5E5"> the same as I</font>

860
00:40:07,030 --> 00:40:12,910
said before<font color="#CCCCCC"> because the operators that I</font>

861
00:40:09,550 --> 00:40:17,050
used to encrypt<font color="#CCCCCC"> are symmetric</font><font color="#E5E5E5"> so I show</font>

862
00:40:12,910 --> 00:40:19,810
you<font color="#E5E5E5"> another demo</font><font color="#CCCCCC"> now</font><font color="#E5E5E5"> it's concerning the</font>

863
00:40:17,050 --> 00:40:22,360
encryption part so the<font color="#CCCCCC"> setup</font><font color="#E5E5E5"> is kind of</font>

864
00:40:19,810 --> 00:40:24,970
<font color="#E5E5E5">the same as before</font><font color="#CCCCCC"> because I want to</font>

865
00:40:22,360 --> 00:40:27,640
<font color="#CCCCCC">show you the payloads of all the pockets</font>

866
00:40:24,970 --> 00:40:29,919
<font color="#CCCCCC">the</font><font color="#E5E5E5"> time generating so the</font><font color="#CCCCCC"> task were</font>

867
00:40:27,640 --> 00:40:32,049
<font color="#CCCCCC">station 1 will generate some traffic and</font>

868
00:40:29,920 --> 00:40:33,670
push through<font color="#E5E5E5"> the first</font><font color="#CCCCCC"> interface</font><font color="#E5E5E5"> then</font>

869
00:40:32,050 --> 00:40:36,160
the data will<font color="#E5E5E5"> leave from the second</font>

870
00:40:33,670 --> 00:40:39,760
interface<font color="#E5E5E5"> and</font><font color="#CCCCCC"> would be accepted</font><font color="#E5E5E5"> gladly</font>

871
00:40:36,160 --> 00:40:41,950
<font color="#CCCCCC">by the second workstation</font><font color="#E5E5E5"> and so the</font>

872
00:40:39,760 --> 00:40:45,310
user will<font color="#CCCCCC"> have to input</font><font color="#E5E5E5"> a password as I</font>

873
00:40:41,950 --> 00:40:48,100
said before<font color="#E5E5E5"> and choose what is the the</font>

874
00:40:45,310 --> 00:40:50,259
the port<font color="#E5E5E5"> I mean among those</font><font color="#CCCCCC"> 2 ports</font>

875
00:40:48,100 --> 00:40:52,750
which is<font color="#CCCCCC"> the one that is</font><font color="#E5E5E5"> connected to</font>

876
00:40:50,260 --> 00:40:54,790
<font color="#E5E5E5">the external world because actually you</font>

877
00:40:52,750 --> 00:40:59,640
do not want to<font color="#E5E5E5"> encrypt the data that are</font>

878
00:40:54,790 --> 00:41:02,290
coming<font color="#CCCCCC"> to your machine for indeed</font><font color="#E5E5E5"> so</font>

879
00:40:59,640 --> 00:41:05,890
here you<font color="#E5E5E5"> have it sorry for the video</font>

880
00:41:02,290 --> 00:41:09,759
quality once again<font color="#E5E5E5"> so the first machine</font>

881
00:41:05,890 --> 00:41:12,490
here I'm inputting<font color="#E5E5E5"> now the password I</font>

882
00:41:09,760 --> 00:41:14,800
choose first<font color="#E5E5E5"> the external port so here I</font>

883
00:41:12,490 --> 00:41:19,000
input<font color="#E5E5E5"> the password</font><font color="#CCCCCC"> the system will</font>

884
00:41:14,800 --> 00:41:22,060
generate<font color="#E5E5E5"> the keys and now here once</font>

885
00:41:19,000 --> 00:41:24,430
<font color="#CCCCCC">again I'm generating</font><font color="#E5E5E5"> this traffic once</font>

886
00:41:22,060 --> 00:41:28,210
<font color="#CCCCCC">again you will</font><font color="#E5E5E5"> see</font><font color="#CCCCCC"> this Apple tag but</font>

887
00:41:24,430 --> 00:41:30,040
you can see as<font color="#CCCCCC"> soon as I click on it as</font>

888
00:41:28,210 --> 00:41:33,480
soon<font color="#CCCCCC"> as I click</font><font color="#E5E5E5"> on the packet you</font><font color="#CCCCCC"> will</font>

889
00:41:30,040 --> 00:41:36,340
<font color="#E5E5E5">see the payload so the payload is just</font>

890
00:41:33,480 --> 00:41:38,440
incremental you will see here you<font color="#E5E5E5"> see</font>

891
00:41:36,340 --> 00:41:41,680
that<font color="#E5E5E5"> all the bytes are incrementing so</font>

892
00:41:38,440 --> 00:41:44,350
it's easy<font color="#E5E5E5"> to be right there and this</font><font color="#CCCCCC"> is</font>

893
00:41:41,680 --> 00:41:47,799
<font color="#E5E5E5">the original traffic whereas on the</font>

894
00:41:44,350 --> 00:41:49,839
<font color="#E5E5E5">other side I'm moving here as you</font><font color="#CCCCCC"> can</font>

895
00:41:47,800 --> 00:41:53,110
<font color="#E5E5E5">see I received those pockets and if I</font>

896
00:41:49,840 --> 00:41:55,120
click<font color="#CCCCCC"> on</font><font color="#E5E5E5"> them you will be not able to</font>

897
00:41:53,110 --> 00:41:57,820
<font color="#E5E5E5">distinguish</font><font color="#CCCCCC"> anymore the intrumental</font>

898
00:41:55,120 --> 00:42:00,700
pattern all<font color="#CCCCCC"> all was</font><font color="#E5E5E5"> encrypted and you</font>

899
00:41:57,820 --> 00:42:02,320
<font color="#CCCCCC">can see that the headers were the same</font>

900
00:42:00,700 --> 00:42:04,390
because<font color="#CCCCCC"> you could distinguish at the</font>

901
00:42:02,320 --> 00:42:07,360
beginning a palang<font color="#E5E5E5"> stylings were still</font>

902
00:42:04,390 --> 00:42:10,089
<font color="#E5E5E5">there here this field here you can see</font>

903
00:42:07,360 --> 00:42:12,160
the custom<font color="#CCCCCC"> number that</font><font color="#E5E5E5"> I assigned to my</font>

904
00:42:10,090 --> 00:42:16,050
encrypted<font color="#E5E5E5"> pocket and then here the</font>

905
00:42:12,160 --> 00:42:16,049
payload is all this way

906
00:42:16,240 --> 00:42:24,609
so I included<font color="#CCCCCC"> also yeah here to match</font>

907
00:42:22,250 --> 00:42:26,990
the<font color="#CCCCCC"> two that are different of course and</font>

908
00:42:24,610 --> 00:42:32,300
I include it as well

909
00:42:26,990 --> 00:42:34,850
<font color="#E5E5E5">okay</font><font color="#CCCCCC"> screenshot of once again what you</font>

910
00:42:32,300 --> 00:42:37,910
will find so here the incremental<font color="#CCCCCC"> bytes</font>

911
00:42:34,850 --> 00:42:40,430
<font color="#E5E5E5">and there you will</font><font color="#CCCCCC"> see the encrypted</font>

912
00:42:37,910 --> 00:42:42,350
<font color="#E5E5E5">version and once again I stress your</font>

913
00:42:40,430 --> 00:42:44,470
focus on the ether type that is

914
00:42:42,350 --> 00:42:47,089
different<font color="#E5E5E5"> and you</font><font color="#CCCCCC"> can see also</font><font color="#E5E5E5"> from the</font>

915
00:42:44,470 --> 00:42:49,250
<font color="#E5E5E5">the user interface so from protocol you</font>

916
00:42:47,090 --> 00:42:51,230
see first<font color="#E5E5E5"> ipv4 and there you don't see</font>

917
00:42:49,250 --> 00:42:53,690
anything<font color="#E5E5E5"> because</font><font color="#CCCCCC"> white shark</font><font color="#E5E5E5"> do not know</font>

918
00:42:51,230 --> 00:42:56,270
what is this protocol<font color="#E5E5E5"> because it's still</font>

919
00:42:53,690 --> 00:42:59,240
<font color="#E5E5E5">not assigned by I Triple E and of course</font>

920
00:42:56,270 --> 00:43:01,070
I do included a<font color="#CCCCCC"> demo that is</font><font color="#E5E5E5"> showing</font><font color="#CCCCCC"> you</font>

921
00:42:59,240 --> 00:43:03,290
<font color="#CCCCCC">that is of course</font><font color="#E5E5E5"> indeed possible to</font>

922
00:43:01,070 --> 00:43:07,190
<font color="#E5E5E5">decrypt this data otherwise it would be</font>

923
00:43:03,290 --> 00:43:08,930
not<font color="#CCCCCC"> so useful the set up is</font><font color="#E5E5E5"> a little bit</font>

924
00:43:07,190 --> 00:43:12,230
more complicated but I will<font color="#E5E5E5"> guide you</font>

925
00:43:08,930 --> 00:43:14,000
through so the test workstation is

926
00:43:12,230 --> 00:43:16,940
generating traffic for<font color="#E5E5E5"> this board</font>

927
00:43:14,000 --> 00:43:20,060
labeled B and the board the label the C

928
00:43:16,940 --> 00:43:21,860
is<font color="#E5E5E5"> actually a repeating back all the</font>

929
00:43:20,060 --> 00:43:24,790
<font color="#E5E5E5">packets that is receiving</font><font color="#CCCCCC"> it's just a</font>

930
00:43:21,860 --> 00:43:28,010
mirror<font color="#E5E5E5"> and it is connected</font><font color="#CCCCCC"> to this other</font>

931
00:43:24,790 --> 00:43:30,610
interface here so what's going on<font color="#E5E5E5"> now</font>

932
00:43:28,010 --> 00:43:34,310
the<font color="#E5E5E5"> machine a generates a plaintext</font>

933
00:43:30,610 --> 00:43:36,530
<font color="#E5E5E5">traffic and sends out of the board then</font>

934
00:43:34,310 --> 00:43:39,140
this<font color="#E5E5E5"> traffic will</font><font color="#CCCCCC"> reach</font><font color="#E5E5E5"> the board be the</font>

935
00:43:36,530 --> 00:43:41,930
body<font color="#E5E5E5"> B will encrypt the plaintext will</font>

936
00:43:39,140 --> 00:43:44,390
generate the cipher<font color="#CCCCCC"> text and</font><font color="#E5E5E5"> will push</font>

937
00:43:41,930 --> 00:43:46,669
it out of<font color="#CCCCCC"> the interface and it will</font>

938
00:43:44,390 --> 00:43:49,540
reach the<font color="#E5E5E5"> board see the board see as I</font>

939
00:43:46,670 --> 00:43:54,110
said<font color="#CCCCCC"> we'll only loop</font><font color="#E5E5E5"> back the pocket</font>

940
00:43:49,540 --> 00:43:58,130
just mirroring<font color="#E5E5E5"> it back and so</font><font color="#CCCCCC"> you will</font>

941
00:43:54,110 --> 00:44:00,980
<font color="#E5E5E5">have the same pocket and finally the</font>

942
00:43:58,130 --> 00:44:04,490
board<font color="#CCCCCC"> v will receive the encrypted</font>

943
00:44:00,980 --> 00:44:06,560
<font color="#E5E5E5">packet and of course will detect</font><font color="#CCCCCC"> that</font>

944
00:44:04,490 --> 00:44:10,520
the packet is in the<font color="#E5E5E5"> encrypted form and</font>

945
00:44:06,560 --> 00:44:12,560
<font color="#E5E5E5">will decrypt the payload so hopefully in</font>

946
00:44:10,520 --> 00:44:15,650
the end<font color="#E5E5E5"> the board a will be able to</font>

947
00:44:12,560 --> 00:44:18,049
receive the plain text<font color="#CCCCCC"> version once</font>

948
00:44:15,650 --> 00:44:20,390
again<font color="#E5E5E5"> so what are you expecting now</font>

949
00:44:18,050 --> 00:44:22,310
<font color="#E5E5E5">you're expecting</font><font color="#CCCCCC"> to see from</font><font color="#E5E5E5"> Wireshark</font>

950
00:44:20,390 --> 00:44:25,100
<font color="#E5E5E5">that when you're sending out a packet</font>

951
00:44:22,310 --> 00:44:27,269
you<font color="#E5E5E5"> will see a copy of the same packet</font>

952
00:44:25,100 --> 00:44:28,769
following immediately

953
00:44:27,269 --> 00:44:33,269
and this is what they want<font color="#E5E5E5"> to</font><font color="#CCCCCC"> show you</font>

954
00:44:28,769 --> 00:44:37,288
now here so I have once again this<font color="#CCCCCC"> setup</font>

955
00:44:33,269 --> 00:44:40,649
<font color="#CCCCCC">as I shown before I will</font><font color="#E5E5E5"> generate once</font>

956
00:44:37,289 --> 00:44:47,609
again the the keys<font color="#E5E5E5"> after inserting the</font>

957
00:44:40,649 --> 00:44:52,679
<font color="#E5E5E5">password and so here I will</font><font color="#CCCCCC"> generate the</font>

958
00:44:47,609 --> 00:44:57,140
traffic<font color="#E5E5E5"> from the interface yep</font><font color="#CCCCCC"> okay so</font>

959
00:44:52,679 --> 00:45:00,359
here<font color="#E5E5E5"> you see</font><font color="#CCCCCC"> that</font><font color="#E5E5E5"> okay for each</font><font color="#CCCCCC"> packet</font>

960
00:44:57,140 --> 00:45:02,399
<font color="#CCCCCC">you find a duplicate of</font><font color="#E5E5E5"> the same for the</font>

961
00:45:00,359 --> 00:45:03,929
reasons<font color="#CCCCCC"> that I told</font><font color="#E5E5E5"> you before because</font>

962
00:45:02,399 --> 00:45:07,259
<font color="#E5E5E5">the packet is reaching the other board</font>

963
00:45:03,929 --> 00:45:09,089
and gets back and the board is able to

964
00:45:07,259 --> 00:45:11,579
decrypt it<font color="#E5E5E5"> but from here it's not</font>

965
00:45:09,089 --> 00:45:13,769
possible to see whether the payloads are

966
00:45:11,579 --> 00:45:16,409
the same so I will just open<font color="#E5E5E5"> the packets</font>

967
00:45:13,769 --> 00:45:20,359
<font color="#E5E5E5">and you will see that the first</font><font color="#CCCCCC"> one is</font>

968
00:45:16,409 --> 00:45:24,029
the usual<font color="#CCCCCC"> incremental bit fashion</font><font color="#E5E5E5"> and</font>

969
00:45:20,359 --> 00:45:28,019
the following<font color="#E5E5E5"> is</font><font color="#CCCCCC"> the same exactly</font><font color="#E5E5E5"> the</font>

970
00:45:24,029 --> 00:45:29,969
<font color="#CCCCCC">same and so this is proving that</font><font color="#E5E5E5"> the</font>

971
00:45:28,019 --> 00:45:36,779
whole encryption and decryption system

972
00:45:29,969 --> 00:45:38,339
is working<font color="#E5E5E5"> and</font><font color="#CCCCCC"> okay</font><font color="#E5E5E5"> so what's</font><font color="#CCCCCC"> left we</font>

973
00:45:36,779 --> 00:45:40,199
have to recompute the checksum<font color="#E5E5E5"> because</font>

974
00:45:38,339 --> 00:45:44,639
<font color="#E5E5E5">otherwise those packets will not be</font>

975
00:45:40,199 --> 00:45:47,039
accepted so<font color="#E5E5E5"> the process is kind of the</font>

976
00:45:44,639 --> 00:45:48,809
same now<font color="#E5E5E5"> you got the main line so you</font>

977
00:45:47,039 --> 00:45:52,919
have to<font color="#CCCCCC"> sample the data</font><font color="#E5E5E5"> where they are</font>

978
00:45:48,809 --> 00:45:55,259
<font color="#E5E5E5">traveling and the CRC logic is actually</font>

979
00:45:52,919 --> 00:45:58,408
<font color="#CCCCCC">working by taking and inspecting each</font>

980
00:45:55,259 --> 00:46:00,209
byte so you have to feed this<font color="#E5E5E5"> CRC logic</font>

981
00:45:58,409 --> 00:46:03,059
<font color="#E5E5E5">with each byte that is belonging to the</font>

982
00:46:00,209 --> 00:46:08,249
transaction<font color="#E5E5E5"> and then it will generate</font><font color="#CCCCCC"> a</font>

983
00:46:03,059 --> 00:46:11,789
<font color="#E5E5E5">32-bit entry that will be the</font><font color="#CCCCCC"> crc32 of</font>

984
00:46:08,249 --> 00:46:14,999
course<font color="#E5E5E5"> this indeed must be placed after</font>

985
00:46:11,789 --> 00:46:18,649
the<font color="#E5E5E5"> encryption architecture because</font>

986
00:46:14,999 --> 00:46:22,439
otherwise you will sample<font color="#E5E5E5"> wrong data and</font>

987
00:46:18,649 --> 00:46:25,828
yeah the<font color="#E5E5E5"> code that is governing</font><font color="#CCCCCC"> the two</font>

988
00:46:22,439 --> 00:46:28,379
multiplexers is basically and there are

989
00:46:25,829 --> 00:46:31,919
two<font color="#E5E5E5"> variables that are the first CRC app</font>

990
00:46:28,380 --> 00:46:36,269
and will indicate when the<font color="#E5E5E5"> packet is</font>

991
00:46:31,919 --> 00:46:39,710
over so when the CRC must push their

992
00:46:36,269 --> 00:46:43,959
data in the line<font color="#E5E5E5"> so injecting the</font>

993
00:46:39,710 --> 00:46:46,790
new created<font color="#CCCCCC"> crc32</font><font color="#E5E5E5"> in the</font><font color="#CCCCCC"> pipeline and</font>

994
00:46:43,960 --> 00:46:49,250
instead the<font color="#CCCCCC"> other one is</font><font color="#E5E5E5"> crypto detected</font>

995
00:46:46,790 --> 00:46:52,849
is a variable that<font color="#E5E5E5"> indicates whether</font><font color="#CCCCCC"> the</font>

996
00:46:49,250 --> 00:46:55,730
board recognized correctly<font color="#CCCCCC"> this</font><font color="#E5E5E5"> custom</font>

997
00:46:52,849 --> 00:46:58,670
<font color="#E5E5E5">tag I created and it</font><font color="#CCCCCC"> is operating on</font><font color="#E5E5E5"> the</font>

998
00:46:55,730 --> 00:47:00,800
<font color="#E5E5E5">first multiplexer there so selecting the</font>

999
00:46:58,670 --> 00:47:05,450
ciphered payload or in this case

1000
00:47:00,800 --> 00:47:07,250
<font color="#CCCCCC">deciphered payload or</font><font color="#E5E5E5"> the main one so as</font>

1001
00:47:05,450 --> 00:47:10,220
it regards<font color="#E5E5E5"> the checksum as I said the</font>

1002
00:47:07,250 --> 00:47:12,589
CRC logic will push in those registers

1003
00:47:10,220 --> 00:47:15,529
the<font color="#E5E5E5"> four bytes that are composing the</font>

1004
00:47:12,589 --> 00:47:18,980
checksum but at a certain<font color="#CCCCCC"> point you have</font>

1005
00:47:15,530 --> 00:47:21,440
<font color="#CCCCCC">to push inside</font><font color="#E5E5E5"> the main chain the main</font>

1006
00:47:18,980 --> 00:47:25,130
pipeline<font color="#E5E5E5"> those four bytes and append</font>

1007
00:47:21,440 --> 00:47:28,099
<font color="#E5E5E5">them to the end of the the packet so</font>

1008
00:47:25,130 --> 00:47:31,190
that's pretty<font color="#CCCCCC"> much it as regards</font><font color="#E5E5E5"> the</font>

1009
00:47:28,099 --> 00:47:35,359
level<font color="#CCCCCC"> 2 analysis of this packet but</font>

1010
00:47:31,190 --> 00:47:37,910
what's<font color="#E5E5E5"> next</font><font color="#CCCCCC"> this</font><font color="#E5E5E5"> is this will be under</font>

1011
00:47:35,359 --> 00:47:40,490
<font color="#CCCCCC">development for</font><font color="#E5E5E5"> the future</font><font color="#CCCCCC"> let's say of</font>

1012
00:47:37,910 --> 00:47:42,618
this the value of<font color="#CCCCCC"> this application</font><font color="#E5E5E5"> but</font><font color="#CCCCCC"> I</font>

1013
00:47:40,490 --> 00:47:46,240
started already<font color="#E5E5E5"> inspecting what happens</font>

1014
00:47:42,619 --> 00:47:48,710
at level<font color="#E5E5E5"> 3 so you need to</font><font color="#CCCCCC"> let's say look</font>

1015
00:47:46,240 --> 00:47:50,660
inside this<font color="#E5E5E5"> payload block that is</font>

1016
00:47:48,710 --> 00:47:51,440
containing all the<font color="#E5E5E5"> upper levels level 3</font>

1017
00:47:50,660 --> 00:47:55,220
4 and<font color="#E5E5E5"> so on</font>

1018
00:47:51,440 --> 00:47:57,410
so<font color="#CCCCCC"> IPE</font><font color="#E5E5E5"> TCP as etc so I started</font>

1019
00:47:55,220 --> 00:47:59,959
inspecting this<font color="#E5E5E5"> when you when you ping</font>

1020
00:47:57,410 --> 00:48:04,000
someone in the network<font color="#E5E5E5"> you are actually</font>

1021
00:47:59,960 --> 00:48:07,059
<font color="#E5E5E5">sending out an ICMP packet right so</font>

1022
00:48:04,000 --> 00:48:10,640
inside the<font color="#E5E5E5"> the payload</font><font color="#CCCCCC"> you will find</font>

1023
00:48:07,059 --> 00:48:13,730
this indicator that is indicating<font color="#E5E5E5"> the</font>

1024
00:48:10,640 --> 00:48:17,180
<font color="#CCCCCC">protocol is the</font><font color="#E5E5E5"> ICMP and it is located</font>

1025
00:48:13,730 --> 00:48:20,329
<font color="#E5E5E5">just 10 bytes after the eater type here</font>

1026
00:48:17,180 --> 00:48:23,000
so what if I have my packet through the

1027
00:48:20,329 --> 00:48:25,760
board and I detect<font color="#E5E5E5"> that exactly this</font>

1028
00:48:23,000 --> 00:48:28,309
configuration<font color="#E5E5E5"> ipv4 here and the protocol</font>

1029
00:48:25,760 --> 00:48:30,440
here that is corresponding<font color="#CCCCCC"> to ICMP so</font>

1030
00:48:28,309 --> 00:48:33,349
like this<font color="#CCCCCC"> situation well if I enable</font>

1031
00:48:30,440 --> 00:48:35,030
this feature<font color="#E5E5E5"> it means that I can remove</font>

1032
00:48:33,349 --> 00:48:37,819
<font color="#CCCCCC">my white hat and</font><font color="#E5E5E5"> put the black hat on</font>

1033
00:48:35,030 --> 00:48:39,859
<font color="#CCCCCC">and I can say that I can connect</font><font color="#E5E5E5"> my</font>

1034
00:48:37,819 --> 00:48:41,900
computer to<font color="#E5E5E5"> the network and drop all the</font>

1035
00:48:39,859 --> 00:48:43,549
ICMP is requests that are towards my

1036
00:48:41,900 --> 00:48:45,950
computer that<font color="#E5E5E5"> means that I can generate</font>

1037
00:48:43,549 --> 00:48:47,990
<font color="#E5E5E5">a device invisible to the network right</font>

1038
00:48:45,950 --> 00:48:51,288
so that's one<font color="#CCCCCC"> of the dreams of every</font>

1039
00:48:47,990 --> 00:48:54,509
blackest right so

1040
00:48:51,289 --> 00:48:58,609
moving on<font color="#E5E5E5"> apart this story so what were</font>

1041
00:48:54,510 --> 00:49:01,410
my achievements so far achieved

1042
00:48:58,609 --> 00:49:04,170
<font color="#CCCCCC">transparent modification of my data</font><font color="#E5E5E5"> as I</font>

1043
00:49:01,410 --> 00:49:06,420
told at the beginning<font color="#CCCCCC"> the data are</font>

1044
00:49:04,170 --> 00:49:08,609
modified<font color="#E5E5E5"> while they are transiting</font>

1045
00:49:06,420 --> 00:49:11,789
through the board<font color="#E5E5E5"> this is very important</font>

1046
00:49:08,609 --> 00:49:14,400
<font color="#E5E5E5">I do not require any additional delay</font>

1047
00:49:11,789 --> 00:49:16,859
for the processing because I can

1048
00:49:14,400 --> 00:49:18,480
pipeline<font color="#CCCCCC"> the process of</font><font color="#E5E5E5"> delivering the</font>

1049
00:49:16,859 --> 00:49:20,220
data from<font color="#E5E5E5"> one side the other of the</font>

1050
00:49:18,480 --> 00:49:23,420
board and at the same time processing

1051
00:49:20,220 --> 00:49:26,819
the data<font color="#E5E5E5"> so that's why I called it</font>

1052
00:49:23,420 --> 00:49:28,890
<font color="#E5E5E5">real-time equivalent because the I in</font>

1053
00:49:26,819 --> 00:49:32,490
the end when<font color="#E5E5E5"> the packet leaves the board</font>

1054
00:49:28,890 --> 00:49:34,558
<font color="#E5E5E5">it's in a new completely new fashion so</font>

1055
00:49:32,490 --> 00:49:37,740
it could be<font color="#E5E5E5"> encrypted</font><font color="#CCCCCC"> or it could even</font>

1056
00:49:34,559 --> 00:49:41,940
<font color="#E5E5E5">not exist</font><font color="#CCCCCC"> anymore if I drop it along the</font>

1057
00:49:37,740 --> 00:49:44,160
line then pipelining<font color="#E5E5E5"> allows multiple</font>

1058
00:49:41,940 --> 00:49:46,589
<font color="#E5E5E5">five</font><font color="#CCCCCC"> firewall feature implementations</font>

1059
00:49:44,160 --> 00:49:48,450
<font color="#E5E5E5">and I showed you</font><font color="#CCCCCC"> that I can implement</font><font color="#E5E5E5"> a</font>

1060
00:49:46,589 --> 00:49:50,640
<font color="#CCCCCC">mac filter but for source</font><font color="#E5E5E5"> and</font>

1061
00:49:48,450 --> 00:49:53,819
destination address<font color="#CCCCCC"> I can implement a</font>

1062
00:49:50,640 --> 00:49:56,220
<font color="#CCCCCC">pale sorry</font><font color="#E5E5E5"> eater type filter so the</font>

1063
00:49:53,819 --> 00:49:58,859
<font color="#E5E5E5">protocol filter I can</font><font color="#CCCCCC"> drop all the ARP</font>

1064
00:49:56,220 --> 00:50:01,859
requests the ipv4<font color="#CCCCCC"> request and so on and</font>

1065
00:49:58,859 --> 00:50:05,788
so forth<font color="#CCCCCC"> but I will extend</font><font color="#E5E5E5"> in the future</font>

1066
00:50:01,859 --> 00:50:08,848
with IP for example address firewalls

1067
00:50:05,789 --> 00:50:10,710
<font color="#E5E5E5">like you can block certain</font><font color="#CCCCCC"> IPs in a</font>

1068
00:50:08,849 --> 00:50:13,710
certain<font color="#E5E5E5"> range and the process will</font><font color="#CCCCCC"> be</font>

1069
00:50:10,710 --> 00:50:17,430
<font color="#CCCCCC">the same as the other that</font><font color="#E5E5E5"> I explained</font>

1070
00:50:13,710 --> 00:50:22,289
before<font color="#E5E5E5"> and they can be run together at</font>

1071
00:50:17,430 --> 00:50:25,038
the same time then the whole time of

1072
00:50:22,289 --> 00:50:27,720
<font color="#E5E5E5">flight I remind you that takes just</font>

1073
00:50:25,039 --> 00:50:30,180
<font color="#CCCCCC">point less than point two microseconds</font>

1074
00:50:27,720 --> 00:50:33,808
<font color="#CCCCCC">and this is well below the average</font>

1075
00:50:30,180 --> 00:50:36,089
latency<font color="#E5E5E5"> that is introduced by wire and a</font>

1076
00:50:33,809 --> 00:50:39,509
connection<font color="#CCCCCC"> that</font><font color="#E5E5E5"> is running one gigabit</font>

1077
00:50:36,089 --> 00:50:41,549
per second so overall you cannot

1078
00:50:39,509 --> 00:50:43,859
distinguish whether you are<font color="#CCCCCC"> tapping the</font>

1079
00:50:41,549 --> 00:50:46,079
network that<font color="#E5E5E5"> is</font><font color="#CCCCCC"> what</font><font color="#E5E5E5"> I'm</font><font color="#CCCCCC"> doing I'm</font>

1080
00:50:43,859 --> 00:50:49,680
<font color="#E5E5E5">tapping in the network</font><font color="#CCCCCC"> you</font><font color="#E5E5E5"> cannot be</font>

1081
00:50:46,079 --> 00:50:51,420
able<font color="#E5E5E5"> to distinguish</font><font color="#CCCCCC"> that and lastly the</font>

1082
00:50:49,680 --> 00:50:54,118
point-to-point encryption that<font color="#E5E5E5"> I</font>

1083
00:50:51,420 --> 00:50:57,690
<font color="#CCCCCC">established okay right now</font><font color="#E5E5E5"> it's not so</font>

1084
00:50:54,119 --> 00:50:59,789
secure it's not strong let's say but in

1085
00:50:57,690 --> 00:51:02,970
the<font color="#E5E5E5"> future I</font><font color="#CCCCCC"> will support I will enable</font>

1086
00:50:59,789 --> 00:51:04,180
the encryption<font color="#E5E5E5"> not one byte</font><font color="#CCCCCC"> per time</font><font color="#E5E5E5"> but</font>

1087
00:51:02,970 --> 00:51:08,459
a bunch of<font color="#CCCCCC"> bye</font>

1088
00:51:04,180 --> 00:51:11,589
<font color="#CCCCCC">per time</font><font color="#E5E5E5"> so maybe I can even introduce</font>

1089
00:51:08,460 --> 00:51:14,079
<font color="#E5E5E5">sha-256 key inside the board and use</font>

1090
00:51:11,589 --> 00:51:19,328
this to encrypt a whole bunch of data

1091
00:51:14,079 --> 00:51:22,270
<font color="#E5E5E5">and this</font><font color="#CCCCCC"> is easily scalable since</font>

1092
00:51:19,329 --> 00:51:24,039
regards<font color="#CCCCCC"> to future</font><font color="#E5E5E5"> upgrades</font><font color="#CCCCCC"> as I said the</font>

1093
00:51:22,270 --> 00:51:26,559
filter can<font color="#CCCCCC"> be extended to upper layer</font>

1094
00:51:24,039 --> 00:51:29,020
protocols like IP and it<font color="#E5E5E5"> will be for</font>

1095
00:51:26,559 --> 00:51:31,569
sure<font color="#E5E5E5"> done in the future so filtering the</font>

1096
00:51:29,020 --> 00:51:34,740
IP addresses<font color="#E5E5E5"> and so on and so forth and</font>

1097
00:51:31,569 --> 00:51:37,808
then introducing the packet inspection

1098
00:51:34,740 --> 00:51:39,459
<font color="#CCCCCC">like you can set up a</font><font color="#E5E5E5"> lookup for a</font>

1099
00:51:37,809 --> 00:51:41,890
certain word inside the payload<font color="#CCCCCC"> and</font>

1100
00:51:39,460 --> 00:51:44,020
apply the same principle for blocking

1101
00:51:41,890 --> 00:51:46,690
<font color="#E5E5E5">the packet</font><font color="#CCCCCC"> before it leaves</font><font color="#E5E5E5"> the board</font>

1102
00:51:44,020 --> 00:51:51,490
and the only problem<font color="#CCCCCC"> with</font><font color="#E5E5E5"> this it is</font>

1103
00:51:46,690 --> 00:51:54,520
<font color="#CCCCCC">that it's not so easy to implement let's</font>

1104
00:51:51,490 --> 00:51:58,149
say it's so generic filter for a custom

1105
00:51:54,520 --> 00:52:00,069
word inside<font color="#CCCCCC"> a hardware logic platform</font>

1106
00:51:58,150 --> 00:52:02,079
because programming hardware is very

1107
00:52:00,069 --> 00:52:05,259
<font color="#CCCCCC">different from programming software and</font>

1108
00:52:02,079 --> 00:52:07,299
what you gain is that<font color="#E5E5E5"> you can do all</font>

1109
00:52:05,260 --> 00:52:09,309
those<font color="#E5E5E5"> things</font><font color="#CCCCCC"> so process</font><font color="#E5E5E5"> data that are</font>

1110
00:52:07,299 --> 00:52:11,680
incoming<font color="#E5E5E5"> at high speed in a</font><font color="#CCCCCC"> real-time</font>

1111
00:52:09,309 --> 00:52:14,020
<font color="#E5E5E5">fashion but what you lose is that</font><font color="#CCCCCC"> if you</font>

1112
00:52:11,680 --> 00:52:17,109
want<font color="#E5E5E5"> to create something flexible</font><font color="#CCCCCC"> you</font>

1113
00:52:14,020 --> 00:52:19,299
will struggle a lot and but<font color="#CCCCCC"> anyway I</font>

1114
00:52:17,109 --> 00:52:22,328
will find a<font color="#CCCCCC"> way maybe</font><font color="#E5E5E5"> for the future</font>

1115
00:52:19,299 --> 00:52:24,940
research and hopefully him presenting

1116
00:52:22,329 --> 00:52:28,599
maybe in the future<font color="#E5E5E5"> what will follow</font>

1117
00:52:24,940 --> 00:52:31,029
after<font color="#E5E5E5"> this so I hope</font><font color="#CCCCCC"> that everything</font><font color="#E5E5E5"> was</font>

1118
00:52:28,599 --> 00:52:32,319
<font color="#CCCCCC">clear to you and I hope you have also</font>

1119
00:52:31,029 --> 00:52:34,839
<font color="#E5E5E5">some questions for me</font>

1120
00:52:32,319 --> 00:52:37,930
<font color="#E5E5E5">and that will be very</font><font color="#CCCCCC"> glad to</font><font color="#E5E5E5"> to answer</font>

1121
00:52:34,839 --> 00:52:41,140
<font color="#E5E5E5">so I would like to thank you for your</font>

1122
00:52:37,930 --> 00:52:46,109
attention<font color="#CCCCCC"> and yeah you can</font><font color="#E5E5E5"> follow me on</font>

1123
00:52:41,140 --> 00:52:49,000
LinkedIn and<font color="#CCCCCC"> so</font><font color="#E5E5E5"> yeah that's it thank you</font>

1124
00:52:46,109 --> 00:52:52,000
thank<font color="#E5E5E5"> you very much Matteo are there any</font>

1125
00:52:49,000 --> 00:52:55,599
questions<font color="#E5E5E5"> from the room no I think what</font>

1126
00:52:52,000 --> 00:52:57,490
they will be around some more<font color="#CCCCCC"> so if</font><font color="#E5E5E5"> they</font>

1127
00:52:55,599 --> 00:53:00,099
were questions later people<font color="#E5E5E5"> might want</font>

1128
00:52:57,490 --> 00:53:03,279
to ask you<font color="#E5E5E5"> oh yeah there is one question</font>

1129
00:53:00,099 --> 00:53:05,880
there<font color="#CCCCCC"> oh there is oh sorry sorry I</font>

1130
00:53:03,279 --> 00:53:05,880
totally<font color="#E5E5E5"> missed that</font>

1131
00:53:08,059 --> 00:53:13,729
so much<font color="#E5E5E5"> for this lovely presentation I'm</font>

1132
00:53:11,119 --> 00:53:17,029
I just<font color="#CCCCCC"> would like to know regarding</font><font color="#E5E5E5"> the</font>

1133
00:53:13,729 --> 00:53:19,939
CRC calculation sorry regarding the CRC

1134
00:53:17,029 --> 00:53:21,319
calculation for checksum so since you

1135
00:53:19,939 --> 00:53:23,598
have multiple registers so you are

1136
00:53:21,319 --> 00:53:25,489
calculating<font color="#CCCCCC"> the CRC value at the end of</font>

1137
00:53:23,599 --> 00:53:28,699
the last register<font color="#E5E5E5"> this</font><font color="#CCCCCC"> is what you are</font>

1138
00:53:25,489 --> 00:53:31,069
<font color="#E5E5E5">trying to do yeah</font>

1139
00:53:28,699 --> 00:53:33,259
this<font color="#CCCCCC"> year this one yes yes</font><font color="#E5E5E5"> exactly okay</font>

1140
00:53:31,069 --> 00:53:34,999
so you have multiple registers obviously

1141
00:53:33,259 --> 00:53:38,449
the traffic is passing through<font color="#E5E5E5"> those</font>

1142
00:53:34,999 --> 00:53:39,979
registers<font color="#CCCCCC"> so you are calculating the CRC</font>

1143
00:53:38,449 --> 00:53:44,420
based on the complete formation<font color="#E5E5E5"> of the</font>

1144
00:53:39,979 --> 00:53:47,419
packet or each bit by bit so you have<font color="#E5E5E5"> a</font>

1145
00:53:44,420 --> 00:53:49,519
voice this<font color="#E5E5E5"> year see you need to to push</font>

1146
00:53:47,420 --> 00:53:52,069
inside<font color="#E5E5E5"> the logic all the</font><font color="#CCCCCC"> packets</font>

1147
00:53:49,519 --> 00:53:54,769
starting from the beginning<font color="#E5E5E5"> so this unit</font>

1148
00:53:52,069 --> 00:53:57,829
is actually<font color="#E5E5E5"> taking in all</font><font color="#CCCCCC"> the bytes</font>

1149
00:53:54,769 --> 00:54:00,439
<font color="#CCCCCC">since the</font><font color="#E5E5E5"> beginning of the pocket and it</font>

1150
00:53:57,829 --> 00:54:03,380
terminates<font color="#E5E5E5"> acquiring all those bytes</font><font color="#CCCCCC"> as</font>

1151
00:54:00,439 --> 00:54:05,808
soon as this flag is raised<font color="#E5E5E5"> so</font><font color="#CCCCCC"> the the</font>

1152
00:54:03,380 --> 00:54:09,469
CRC app and we'll stop the acquisition

1153
00:54:05,809 --> 00:54:12,109
of the CRC logic and<font color="#CCCCCC"> we'll from here is</font>

1154
00:54:09,469 --> 00:54:14,719
better<font color="#E5E5E5"> because here the CRC logic will</font>

1155
00:54:12,109 --> 00:54:16,459
update the value<font color="#E5E5E5"> inside those four</font>

1156
00:54:14,719 --> 00:54:18,709
<font color="#E5E5E5">registers that are corresponding</font><font color="#CCCCCC"> to the</font>

1157
00:54:16,459 --> 00:54:22,578
<font color="#E5E5E5">four bytes of the CRC and as soon as</font>

1158
00:54:18,709 --> 00:54:24,739
this<font color="#E5E5E5"> CRC app and is raised and this</font>

1159
00:54:22,579 --> 00:54:27,619
connection<font color="#CCCCCC"> will be multiplexed with the</font>

1160
00:54:24,739 --> 00:54:31,219
other one<font color="#E5E5E5"> and the new CRC will just push</font>

1161
00:54:27,619 --> 00:54:33,019
will be pushed in the in the<font color="#CCCCCC"> mainline</font><font color="#E5E5E5"> so</font>

1162
00:54:31,219 --> 00:54:36,170
what happens now

1163
00:54:33,019 --> 00:54:38,390
the<font color="#CCCCCC"> no sheer cheat the CRC will be</font>

1164
00:54:36,170 --> 00:54:42,259
multiplexed here<font color="#E5E5E5"> so I will just select</font>

1165
00:54:38,390 --> 00:54:45,618
the one<font color="#E5E5E5"> coming from from here and the</font>

1166
00:54:42,259 --> 00:54:48,619
<font color="#CCCCCC">the real</font><font color="#E5E5E5"> CRC well the original one that</font>

1167
00:54:45,619 --> 00:54:51,499
was stored<font color="#CCCCCC"> here here here</font><font color="#E5E5E5"> and the</font>

1168
00:54:48,619 --> 00:54:53,779
previous one<font color="#CCCCCC"> will</font><font color="#E5E5E5"> be lost</font><font color="#CCCCCC"> because</font><font color="#E5E5E5"> here</font>

1169
00:54:51,499 --> 00:54:56,718
it will be<font color="#E5E5E5"> replaced by those four bytes</font>

1170
00:54:53,779 --> 00:55:00,130
so they will come here<font color="#CCCCCC"> 1 2 3 4</font><font color="#E5E5E5"> and</font><font color="#CCCCCC"> then</font>

1171
00:54:56,719 --> 00:55:00,130
<font color="#E5E5E5">the packet will</font><font color="#CCCCCC"> be pushed out</font>

1172
00:55:08,710 --> 00:55:13,420
if I understood<font color="#CCCCCC"> it correctly you put the</font>

1173
00:55:10,960 --> 00:55:15,820
<font color="#E5E5E5">what you call signature into the either</font>

1174
00:55:13,420 --> 00:55:18,220
type<font color="#E5E5E5"> but I guess going forward if you</font>

1175
00:55:15,820 --> 00:55:21,700
use the larger<font color="#E5E5E5"> size signature like</font>

1176
00:55:18,220 --> 00:55:24,040
<font color="#E5E5E5">256-bit it's not gonna fit so do you</font>

1177
00:55:21,700 --> 00:55:29,410
<font color="#E5E5E5">have a plan there is it gonna result in</font>

1178
00:55:24,040 --> 00:55:32,860
fragmentation or other plan<font color="#CCCCCC"> I use this</font>

1179
00:55:29,410 --> 00:55:36,640
word signature<font color="#E5E5E5"> actually not meaning the</font>

1180
00:55:32,860 --> 00:55:38,710
true<font color="#E5E5E5"> I</font><font color="#CCCCCC"> mean what is commonly used as</font>

1181
00:55:36,640 --> 00:55:41,980
signature<font color="#CCCCCC"> the things</font><font color="#E5E5E5"> are custom like</font>

1182
00:55:38,710 --> 00:55:44,050
ending of the pocket that<font color="#CCCCCC"> is verifying</font>

1183
00:55:41,980 --> 00:55:46,690
that the whole<font color="#E5E5E5"> the whole</font><font color="#CCCCCC"> thing is just</font>

1184
00:55:44,050 --> 00:55:49,810
<font color="#E5E5E5">generated by a user with</font><font color="#CCCCCC"> the specific</font>

1185
00:55:46,690 --> 00:55:52,570
credentials<font color="#CCCCCC"> okay so this signature</font><font color="#E5E5E5"> was</font>

1186
00:55:49,810 --> 00:55:54,670
kind of an identifier to<font color="#E5E5E5"> detect</font><font color="#CCCCCC"> I mean</font>

1187
00:55:52,570 --> 00:55:56,500
from<font color="#E5E5E5"> the board from the</font><font color="#CCCCCC"> board</font><font color="#E5E5E5"> side you</font>

1188
00:55:54,670 --> 00:55:59,620
<font color="#E5E5E5">must be sure that this</font><font color="#CCCCCC"> packet was</font>

1189
00:55:56,500 --> 00:56:02,020
encrypted<font color="#E5E5E5"> by your algorithm and I'm I'm</font>

1190
00:55:59,620 --> 00:56:04,600
well aware<font color="#CCCCCC"> that this is not</font><font color="#E5E5E5"> actually</font><font color="#CCCCCC"> a</font>

1191
00:56:02,020 --> 00:56:08,230
strong well it's not a<font color="#E5E5E5"> signature in the</font>

1192
00:56:04,600 --> 00:56:09,670
true sense is more like a way for<font color="#CCCCCC"> the</font>

1193
00:56:08,230 --> 00:56:13,960
board<font color="#E5E5E5"> to detect that the pocket was</font>

1194
00:56:09,670 --> 00:56:16,900
treated by the board itself<font color="#E5E5E5"> so as I said</font>

1195
00:56:13,960 --> 00:56:21,040
I'm not a crypto expert so I could mess

1196
00:56:16,900 --> 00:56:23,500
up easily with<font color="#E5E5E5"> those terms but</font><font color="#CCCCCC"> input</font>

1197
00:56:21,040 --> 00:56:25,600
based<font color="#E5E5E5"> on the on the requirements that I</font>

1198
00:56:23,500 --> 00:56:28,270
shown so that<font color="#CCCCCC"> I do not want</font><font color="#E5E5E5"> to increase</font>

1199
00:56:25,600 --> 00:56:31,120
the packet size<font color="#CCCCCC"> otherwise it will not be</font>

1200
00:56:28,270 --> 00:56:33,850
a<font color="#E5E5E5"> transparent modification of the data</font><font color="#CCCCCC"> I</font>

1201
00:56:31,120 --> 00:56:38,140
do not find at the moment<font color="#CCCCCC"> any other</font>

1202
00:56:33,850 --> 00:56:41,380
place<font color="#E5E5E5"> where to put this unique value so</font>

1203
00:56:38,140 --> 00:56:43,390
feel free to give<font color="#CCCCCC"> me suggestions or just</font>

1204
00:56:41,380 --> 00:56:46,330
let's<font color="#E5E5E5"> have a talk maybe</font><font color="#CCCCCC"> a conversation</font>

1205
00:56:43,390 --> 00:56:48,640
<font color="#CCCCCC">later</font><font color="#E5E5E5"> about that because that</font><font color="#CCCCCC"> would be</font>

1206
00:56:46,330 --> 00:56:51,069
really useful<font color="#CCCCCC"> and up to now I didn't</font>

1207
00:56:48,640 --> 00:56:58,379
find any<font color="#E5E5E5"> place where to add this unique</font>

1208
00:56:51,070 --> 00:57:00,790
value are there any other<font color="#E5E5E5"> questions</font><font color="#CCCCCC"> no</font>

1209
00:56:58,380 --> 00:57:03,790
<font color="#CCCCCC">all</font><font color="#E5E5E5"> right</font><font color="#CCCCCC"> what else you guys</font><font color="#E5E5E5"> so much</font>

1210
00:57:00,790 --> 00:57:07,090
<font color="#E5E5E5">just want to</font><font color="#CCCCCC"> add just ten seconds so if</font>

1211
00:57:03,790 --> 00:57:08,980
you want<font color="#E5E5E5"> to enjoy with programming those</font>

1212
00:57:07,090 --> 00:57:11,950
boards<font color="#E5E5E5"> just feel free to</font><font color="#CCCCCC"> check the</font>

1213
00:57:08,980 --> 00:57:13,900
website<font color="#E5E5E5"> also the company that produces</font>

1214
00:57:11,950 --> 00:57:17,500
this and<font color="#CCCCCC"> we'll give</font><font color="#E5E5E5"> you the details</font>

1215
00:57:13,900 --> 00:57:18,920
<font color="#CCCCCC">later so</font><font color="#E5E5E5"> you can play</font><font color="#CCCCCC"> with those boards</font>

1216
00:57:17,500 --> 00:57:20,359
as well<font color="#E5E5E5"> and</font>

1217
00:57:18,920 --> 00:57:22,430
you can program<font color="#E5E5E5"> it without any other</font>

1218
00:57:20,359 --> 00:57:24,589
expensive<font color="#CCCCCC"> because you don't need</font><font color="#E5E5E5"> the</font>

1219
00:57:22,430 --> 00:57:27,348
licenses to<font color="#E5E5E5"> program on those boards so</font>

1220
00:57:24,589 --> 00:57:30,049
that's<font color="#CCCCCC"> that's fine so I want just to</font><font color="#E5E5E5"> say</font>

1221
00:57:27,349 --> 00:57:31,609
this and<font color="#E5E5E5"> to conclude so thank you for</font>

1222
00:57:30,049 --> 00:57:36,519
<font color="#E5E5E5">your attention once</font><font color="#CCCCCC"> again and</font><font color="#E5E5E5"> thank you</font>

1223
00:57:31,609 --> 00:57:36,519
for letting me here no problem

