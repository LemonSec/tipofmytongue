1
00:00:24,380 --> 00:00:30,859
hi thanks everyone<font color="#CCCCCC"> thanks for coming to</font>

2
00:00:28,130 --> 00:00:33,350
my talk<font color="#CCCCCC"> so my name is Felix I'm a</font>

3
00:00:30,859 --> 00:00:36,260
security engineer working on Google's

4
00:00:33,350 --> 00:00:38,149
product security<font color="#E5E5E5"> team and today I want</font>

5
00:00:36,260 --> 00:00:40,610
to<font color="#E5E5E5"> talk about a number of</font>

6
00:00:38,149 --> 00:00:46,280
<font color="#CCCCCC">vulnerabilities I discovered in popular</font>

7
00:00:40,610 --> 00:00:48,320
DHCP implementations so and this<font color="#E5E5E5"> is</font>

8
00:00:46,280 --> 00:00:51,440
going<font color="#CCCCCC"> to be your story</font><font color="#E5E5E5"> about five bucks</font>

9
00:00:48,320 --> 00:00:53,089
<font color="#E5E5E5">and I only have 45 minutes so for most</font>

10
00:00:51,440 --> 00:00:56,360
<font color="#E5E5E5">of the box I'm gonna concentrate all</font>

11
00:00:53,089 --> 00:00:58,400
abilities<font color="#CCCCCC"> themself and the impact but</font><font color="#E5E5E5"> I</font>

12
00:00:56,360 --> 00:01:01,489
won't<font color="#CCCCCC"> get</font><font color="#E5E5E5"> too much</font><font color="#CCCCCC"> into detail about the</font>

13
00:00:58,400 --> 00:01:05,869
exploitation<font color="#CCCCCC"> I have one</font><font color="#E5E5E5"> box that</font><font color="#CCCCCC"> I used</font>

14
00:01:01,489 --> 00:01:07,908
as an example<font color="#E5E5E5"> where I go deep into</font>

15
00:01:05,869 --> 00:01:09,860
exploitation and show<font color="#CCCCCC"> a</font><font color="#E5E5E5"> live demo at the</font>

16
00:01:07,909 --> 00:01:11,600
<font color="#E5E5E5">end but in the beginning we will</font>

17
00:01:09,860 --> 00:01:16,280
<font color="#E5E5E5">concentrate on the vulnerabilities and</font>

18
00:01:11,600 --> 00:01:17,869
<font color="#E5E5E5">the kind of impact they have so I assume</font>

19
00:01:16,280 --> 00:01:20,299
everyone<font color="#E5E5E5"> in the audience has heard</font><font color="#CCCCCC"> of</font>

20
00:01:17,869 --> 00:01:23,360
DHCP before but I'd like<font color="#E5E5E5"> to</font><font color="#CCCCCC"> give you</font>

21
00:01:20,299 --> 00:01:25,850
<font color="#E5E5E5">like this really quick introduction DHCP</font>

22
00:01:23,360 --> 00:01:28,159
is a 25 year<font color="#CCCCCC"> old network</font><font color="#E5E5E5"> protocol and</font>

23
00:01:25,850 --> 00:01:30,770
you<font color="#CCCCCC"> use it to dynamically assign an IP</font>

24
00:01:28,159 --> 00:01:34,369
address<font color="#E5E5E5"> and other config to devices</font><font color="#CCCCCC"> on a</font>

25
00:01:30,770 --> 00:01:37,210
local network<font color="#CCCCCC"> and DHCP itself is ipv4</font>

26
00:01:34,369 --> 00:01:40,340
specific<font color="#E5E5E5"> so there's also a successor</font>

27
00:01:37,210 --> 00:01:44,089
DHCP version<font color="#E5E5E5"> 6 which is used for ipv6</font>

28
00:01:40,340 --> 00:01:47,689
<font color="#CCCCCC">and it's also</font><font color="#E5E5E5"> 50 year old already and</font>

29
00:01:44,090 --> 00:01:48,950
almost no one<font color="#E5E5E5"> uses it</font><font color="#CCCCCC"> ipv6 has</font><font color="#E5E5E5"> a feature</font>

30
00:01:47,689 --> 00:01:51,318
called<font color="#E5E5E5"> stateless address</font>

31
00:01:48,950 --> 00:01:54,020
auto-configuration which is pretty nice

32
00:01:51,319 --> 00:01:56,020
so<font color="#E5E5E5"> DHCP version 6 is kind of one</font><font color="#CCCCCC"> of</font>

33
00:01:54,020 --> 00:01:58,999
these standards<font color="#CCCCCC"> that are not widely used</font>

34
00:01:56,020 --> 00:02:00,770
but it's still supported by<font color="#CCCCCC"> order</font>

35
00:01:58,999 --> 00:02:03,499
implementation<font color="#CCCCCC"> as we will see</font><font color="#E5E5E5"> later</font><font color="#CCCCCC"> on</font>

36
00:02:00,770 --> 00:02:06,139
and that's<font color="#E5E5E5"> really nice</font><font color="#CCCCCC"> because</font><font color="#E5E5E5"> it offers</font>

37
00:02:03,499 --> 00:02:10,758
an attacker<font color="#E5E5E5"> a pretty nice attack surface</font>

38
00:02:06,139 --> 00:02:12,530
for finding<font color="#CCCCCC"> availabilities so if you</font>

39
00:02:10,758 --> 00:02:14,420
look at<font color="#E5E5E5"> both of these protocols from an</font>

40
00:02:12,530 --> 00:02:17,810
attacker perspective if they look pretty

41
00:02:14,420 --> 00:02:20,030
<font color="#E5E5E5">harmless on first glance so its DHCP so</font>

42
00:02:17,810 --> 00:02:22,910
it has a reasonably<font color="#CCCCCC"> small feature set</font>

43
00:02:20,030 --> 00:02:25,430
the packet format is<font color="#E5E5E5"> pretty easy to pass</font>

44
00:02:22,910 --> 00:02:27,230
and it looks<font color="#CCCCCC"> like there they have a</font>

45
00:02:25,430 --> 00:02:29,990
pretty small attack surface they can

46
00:02:27,230 --> 00:02:31,840
<font color="#CCCCCC">actually exploit of course it turns out</font>

47
00:02:29,990 --> 00:02:34,280
that reality<font color="#E5E5E5"> is quite different</font>

48
00:02:31,840 --> 00:02:36,560
<font color="#CCCCCC">otherwise I would not give be giving</font>

49
00:02:34,280 --> 00:02:40,560
this<font color="#E5E5E5"> presentation</font>

50
00:02:36,560 --> 00:02:43,830
so let's talk why would you want to<font color="#E5E5E5"> look</font>

51
00:02:40,560 --> 00:02:45,330
into<font color="#CCCCCC"> the HTTP and</font><font color="#E5E5E5"> first of all everyone</font>

52
00:02:43,830 --> 00:02:47,129
<font color="#CCCCCC">knows</font><font color="#E5E5E5"> you can use DHCP</font><font color="#CCCCCC"> for</font>

53
00:02:45,330 --> 00:02:48,810
man-in-the-middle attacks and<font color="#E5E5E5"> it's</font>

54
00:02:47,129 --> 00:02:51,149
<font color="#E5E5E5">trivial and it's not part of this</font>

55
00:02:48,810 --> 00:02:53,970
presentation<font color="#CCCCCC"> so this presentation is</font>

56
00:02:51,150 --> 00:02:56,700
focusing on implementation<font color="#E5E5E5"> bugs in DHCP</font>

57
00:02:53,970 --> 00:02:59,640
clients and<font color="#CCCCCC"> servers</font><font color="#E5E5E5"> so we're looking for</font>

58
00:02:56,700 --> 00:03:01,230
stuff like<font color="#E5E5E5"> memory safety issues code</font>

59
00:02:59,640 --> 00:03:03,750
<font color="#CCCCCC">injection vulnerabilities or</font><font color="#E5E5E5"> file</font>

60
00:03:01,230 --> 00:03:06,659
handling bugs<font color="#E5E5E5"> and the goal here is</font><font color="#CCCCCC"> to</font>

61
00:03:03,750 --> 00:03:10,879
gain code execution<font color="#E5E5E5"> on either on</font>

62
00:03:06,659 --> 00:03:13,560
vulnerable DHCP clients or servers and

63
00:03:10,879 --> 00:03:15,690
client bugs in particular so client bugs

64
00:03:13,560 --> 00:03:18,540
that allow you to<font color="#E5E5E5"> run arbitrary comments</font>

65
00:03:15,690 --> 00:03:20,190
on the vulnerable<font color="#CCCCCC"> DHCP client</font><font color="#E5E5E5"> are pretty</font>

66
00:03:18,540 --> 00:03:22,500
interesting attack surface in the real

67
00:03:20,190 --> 00:03:24,359
world<font color="#E5E5E5"> so one example where you can use</font>

68
00:03:22,500 --> 00:03:26,730
them<font color="#E5E5E5"> is littell movement</font><font color="#CCCCCC"> and local</font>

69
00:03:24,359 --> 00:03:29,970
networks so you<font color="#CCCCCC"> compromise one system</font><font color="#E5E5E5"> in</font>

70
00:03:26,730 --> 00:03:33,209
<font color="#E5E5E5">a local network</font><font color="#CCCCCC"> and then you can use</font>

71
00:03:29,970 --> 00:03:36,150
this client bug<font color="#E5E5E5"> to jump to other systems</font>

72
00:03:33,209 --> 00:03:37,709
<font color="#E5E5E5">in the local network that might be more</font>

73
00:03:36,150 --> 00:03:41,940
interesting for<font color="#CCCCCC"> you as an attacker</font><font color="#E5E5E5"> and</font>

74
00:03:37,709 --> 00:03:44,310
other interesting attack venue is<font color="#E5E5E5"> are</font>

75
00:03:41,940 --> 00:03:45,989
malicious<font color="#E5E5E5"> access points so because every</font>

76
00:03:44,310 --> 00:03:48,540
<font color="#CCCCCC">modern operating</font><font color="#E5E5E5"> system will</font>

77
00:03:45,989 --> 00:03:52,709
automatically spawn a DHCP client when

78
00:03:48,540 --> 00:03:55,078
you join a new Wi-Fi or LAN network you

79
00:03:52,709 --> 00:03:58,109
can easily try to compromise<font color="#E5E5E5"> mobile</font>

80
00:03:55,079 --> 00:04:00,269
devices like<font color="#CCCCCC"> laptops or smartphones</font><font color="#E5E5E5"> just</font>

81
00:03:58,109 --> 00:04:02,430
by exploiting a<font color="#E5E5E5"> back in the DHCP client</font>

82
00:04:00,269 --> 00:04:04,829
implementation when they join your

83
00:04:02,430 --> 00:04:09,540
malicious access point<font color="#E5E5E5"> at Starbucks or</font>

84
00:04:04,829 --> 00:04:11,459
at IT security conference and of course

85
00:04:09,540 --> 00:04:13,410
you can also use them<font color="#CCCCCC"> for physical</font>

86
00:04:11,459 --> 00:04:15,810
access attacks<font color="#E5E5E5"> so if you have a locked</font>

87
00:04:13,410 --> 00:04:18,449
laptop and you have a nice DHCP client

88
00:04:15,810 --> 00:04:20,820
<font color="#CCCCCC">bug you</font><font color="#E5E5E5"> can just physically connect them</font>

89
00:04:18,449 --> 00:04:24,949
to<font color="#CCCCCC"> your malicious network</font><font color="#E5E5E5"> exploit</font><font color="#CCCCCC"> that</font>

90
00:04:20,820 --> 00:04:24,949
bug to unlock the<font color="#CCCCCC"> system and gain access</font>

91
00:04:24,979 --> 00:04:30,389
so let's start looking<font color="#E5E5E5"> at DHCP and I</font>

92
00:04:28,500 --> 00:04:33,990
don't<font color="#E5E5E5"> want to</font><font color="#CCCCCC"> bore you with like a full</font>

93
00:04:30,389 --> 00:04:35,430
overview<font color="#E5E5E5"> about how DHCP works and to be</font>

94
00:04:33,990 --> 00:04:37,710
honest like<font color="#E5E5E5"> most of the stuff is super</font>

95
00:04:35,430 --> 00:04:41,190
uninteresting<font color="#CCCCCC"> for us from like an</font>

96
00:04:37,710 --> 00:04:43,138
attacker perspective because<font color="#CCCCCC"> if you look</font>

97
00:04:41,190 --> 00:04:45,300
at the DHCP<font color="#E5E5E5"> packet so that</font><font color="#CCCCCC"> the</font><font color="#E5E5E5"> stuff on</font>

98
00:04:43,139 --> 00:04:48,419
the right<font color="#E5E5E5"> is the DHCP version for packet</font>

99
00:04:45,300 --> 00:04:50,070
and if you look at<font color="#E5E5E5"> these packets most of</font>

100
00:04:48,419 --> 00:04:53,430
the fields are pretty uninteresting

101
00:04:50,070 --> 00:04:56,099
they have fixed size<font color="#E5E5E5"> so that</font><font color="#CCCCCC"> makes them</font>

102
00:04:53,430 --> 00:04:59,070
<font color="#E5E5E5">super easy to pass they are often</font>

103
00:04:56,100 --> 00:05:01,500
deprecated and not used anymore<font color="#CCCCCC"> and most</font>

104
00:04:59,070 --> 00:05:03,450
<font color="#CCCCCC">of them actually just</font><font color="#E5E5E5"> bootp legacy so</font>

105
00:05:01,500 --> 00:05:06,210
<font color="#CCCCCC">bootp is this old</font><font color="#E5E5E5"> protocol that's the</font>

106
00:05:03,450 --> 00:05:08,340
predecessor of<font color="#CCCCCC"> DHCP so in practice if</font>

107
00:05:06,210 --> 00:05:10,590
you look at all the fields on the<font color="#E5E5E5"> top no</font>

108
00:05:08,340 --> 00:05:13,349
one actually looks<font color="#E5E5E5"> at them when you do a</font>

109
00:05:10,590 --> 00:05:13,799
DHCP handshake<font color="#CCCCCC"> so so we</font><font color="#E5E5E5"> don't care too</font>

110
00:05:13,350 --> 00:05:16,620
much

111
00:05:13,800 --> 00:05:20,490
the interesting<font color="#CCCCCC"> part about DHCP packets</font>

112
00:05:16,620 --> 00:05:22,620
are the options and options<font color="#CCCCCC"> encoded</font>

113
00:05:20,490 --> 00:05:24,960
using<font color="#CCCCCC"> a type length value encoding so</font>

114
00:05:22,620 --> 00:05:27,450
for DHCP<font color="#CCCCCC"> for</font><font color="#E5E5E5"> you have one byte for the</font>

115
00:05:24,960 --> 00:05:30,710
option type one byte for option length

116
00:05:27,450 --> 00:05:33,780
and then<font color="#E5E5E5"> lengths bytes of the value and</font>

117
00:05:30,710 --> 00:05:36,330
some<font color="#E5E5E5"> options are we cry out so for</font>

118
00:05:33,780 --> 00:05:39,630
example the DHCP message type is

119
00:05:36,330 --> 00:05:42,150
<font color="#E5E5E5">actually encoded as an option and others</font>

120
00:05:39,630 --> 00:05:45,210
are completely<font color="#E5E5E5"> optional</font><font color="#CCCCCC"> you can include</font>

121
00:05:42,150 --> 00:05:47,700
them or not<font color="#E5E5E5"> and interestingly the</font>

122
00:05:45,210 --> 00:05:49,770
designers of DHCP<font color="#E5E5E5"> you version</font><font color="#CCCCCC"> 6 realized</font>

123
00:05:47,700 --> 00:05:50,849
the same<font color="#E5E5E5"> thing</font><font color="#CCCCCC"> that options are</font><font color="#E5E5E5"> the only</font>

124
00:05:49,770 --> 00:05:54,270
interesting<font color="#CCCCCC"> part about us</font>

125
00:05:50,850 --> 00:05:56,600
so if DHCP version<font color="#E5E5E5"> 6</font><font color="#CCCCCC"> packet</font><font color="#E5E5E5"> is actually</font>

126
00:05:54,270 --> 00:06:03,479
even<font color="#E5E5E5"> simpler because it mostly contains</font>

127
00:05:56,600 --> 00:06:05,490
<font color="#E5E5E5">only of options so I mentioned you have</font>

128
00:06:03,480 --> 00:06:08,000
these different<font color="#CCCCCC"> option types and option</font>

129
00:06:05,490 --> 00:06:11,070
values and one interesting<font color="#CCCCCC"> thing about</font>

130
00:06:08,000 --> 00:06:13,440
<font color="#E5E5E5">DHCP is of course you can put</font><font color="#CCCCCC"> different</font>

131
00:06:11,070 --> 00:06:14,880
stuff in these option values and the

132
00:06:13,440 --> 00:06:15,900
value encoding is completely

133
00:06:14,880 --> 00:06:18,450
type-specific

134
00:06:15,900 --> 00:06:20,159
so<font color="#E5E5E5"> some option types</font><font color="#CCCCCC"> just contain an IP</font>

135
00:06:18,450 --> 00:06:23,940
<font color="#CCCCCC">address for example the IP address of</font>

136
00:06:20,160 --> 00:06:25,890
<font color="#E5E5E5">the DNS server others might contain DNS</font>

137
00:06:23,940 --> 00:06:30,120
<font color="#E5E5E5">and coded domain names they might</font>

138
00:06:25,890 --> 00:06:32,820
continue<font color="#E5E5E5"> to contain</font><font color="#CCCCCC"> SD strings they</font>

139
00:06:30,120 --> 00:06:35,310
might contain<font color="#E5E5E5"> lists of these things so</font>

140
00:06:32,820 --> 00:06:37,620
basically<font color="#CCCCCC"> for all of the option types</font>

141
00:06:35,310 --> 00:06:39,000
you support you need<font color="#E5E5E5"> to have decoding</font>

142
00:06:37,620 --> 00:06:40,800
and encoding routines<font color="#E5E5E5"> in your</font>

143
00:06:39,000 --> 00:06:43,650
<font color="#CCCCCC">implementation</font><font color="#E5E5E5"> to actually be able to</font>

144
00:06:40,800 --> 00:06:45,630
<font color="#E5E5E5">pass this you can also do</font><font color="#CCCCCC"> stuff like</font><font color="#E5E5E5"> you</font>

145
00:06:43,650 --> 00:06:47,340
can repeat<font color="#E5E5E5"> an option with the same type</font>

146
00:06:45,630 --> 00:06:49,920
and how does this<font color="#CCCCCC"> handled</font><font color="#E5E5E5"> is</font>

147
00:06:47,340 --> 00:06:51,570
implementation and<font color="#E5E5E5"> type-specific</font><font color="#CCCCCC"> so</font>

148
00:06:49,920 --> 00:06:54,090
sometimes these values get<font color="#E5E5E5"> merged</font>

149
00:06:51,570 --> 00:06:56,159
<font color="#E5E5E5">sometimes only</font><font color="#CCCCCC"> the</font><font color="#E5E5E5"> last option will get</font>

150
00:06:54,090 --> 00:06:59,580
passed the other one gets thrown away<font color="#CCCCCC"> so</font>

151
00:06:56,160 --> 00:07:02,010
so it makes makes all of slightly<font color="#E5E5E5"> more</font>

152
00:06:59,580 --> 00:07:03,810
<font color="#E5E5E5">complex you also have a nice</font><font color="#CCCCCC"> feature</font>

153
00:07:02,010 --> 00:07:07,590
called option overloading

154
00:07:03,810 --> 00:07:11,760
in the<font color="#CCCCCC"> DSC these big fields</font><font color="#E5E5E5"> s name</font>

155
00:07:07,590 --> 00:07:14,340
server name<font color="#CCCCCC"> and file name and 64 and 128</font>

156
00:07:11,760 --> 00:07:17,310
bytes long<font color="#E5E5E5"> they are not used anymore</font><font color="#CCCCCC"> for</font>

157
00:07:14,340 --> 00:07:19,440
the original<font color="#E5E5E5"> use case so what people</font>

158
00:07:17,310 --> 00:07:22,169
<font color="#E5E5E5">decided is basically hey we can stuff</font>

159
00:07:19,440 --> 00:07:23,669
more options in these fields<font color="#E5E5E5"> so this</font>

160
00:07:22,169 --> 00:07:26,310
<font color="#E5E5E5">space doesn't go to waste</font>

161
00:07:23,669 --> 00:07:29,010
again this makes parsing slightly more

162
00:07:26,310 --> 00:07:31,530
complex and then you also have when<font color="#E5E5E5"> no</font>

163
00:07:29,010 --> 00:07:33,930
specific options and basically if you

164
00:07:31,530 --> 00:07:36,780
want<font color="#E5E5E5"> to</font><font color="#CCCCCC"> implement your own feature on</font>

165
00:07:33,930 --> 00:07:40,800
top of<font color="#CCCCCC"> DHCP the popular way to do this</font>

166
00:07:36,780 --> 00:07:43,080
is<font color="#CCCCCC"> just invent your own DHCP option and</font>

167
00:07:40,800 --> 00:07:45,960
put stuff<font color="#CCCCCC"> into it</font><font color="#E5E5E5"> for example Microsoft</font>

168
00:07:43,080 --> 00:07:48,390
mechanism for automatic proxy discovery

169
00:07:45,960 --> 00:07:52,680
<font color="#E5E5E5">the W</font><font color="#CCCCCC"> pad mechanism is actually</font>

170
00:07:48,390 --> 00:07:56,310
implemented on of DHCP option<font color="#CCCCCC"> 252 where</font>

171
00:07:52,680 --> 00:07:59,960
<font color="#CCCCCC">they</font><font color="#E5E5E5"> just put the UL of the</font><font color="#CCCCCC"> Auto proxy</font>

172
00:07:56,310 --> 00:07:59,960
discovery mechanism in the option value

173
00:08:00,140 --> 00:08:06,419
so there was the quick introduction to

174
00:08:02,639 --> 00:08:08,130
<font color="#E5E5E5">DHCP let's look at some code and the</font>

175
00:08:06,419 --> 00:08:11,490
first thing we want to<font color="#CCCCCC"> look at is DNS</font>

176
00:08:08,130 --> 00:08:14,219
mask<font color="#E5E5E5"> and DNS mask is really surprisingly</font>

177
00:08:11,490 --> 00:08:17,580
popular<font color="#E5E5E5"> small embedded DNS and DHCP</font>

178
00:08:14,220 --> 00:08:20,280
server<font color="#CCCCCC"> and it's used in</font><font color="#E5E5E5"> a lot of</font><font color="#CCCCCC"> spaces</font>

179
00:08:17,580 --> 00:08:22,469
<font color="#E5E5E5">or a lot of places</font><font color="#CCCCCC"> you wouldn't wouldn't</font>

180
00:08:20,280 --> 00:08:25,229
<font color="#E5E5E5">really</font><font color="#CCCCCC"> think of so in a lot</font><font color="#E5E5E5"> of cheap</font>

181
00:08:22,470 --> 00:08:27,710
home routers or embedded devices<font color="#CCCCCC"> DNS</font>

182
00:08:25,229 --> 00:08:30,390
mask is actually used for DNS and DHCP

183
00:08:27,710 --> 00:08:33,299
<font color="#E5E5E5">so depending on the quality of your home</font>

184
00:08:30,390 --> 00:08:35,189
<font color="#CCCCCC">Oota dns</font><font color="#E5E5E5"> mask might actually be used in</font>

185
00:08:33,299 --> 00:08:38,309
your<font color="#E5E5E5"> local Wi-Fi to provide you with</font><font color="#CCCCCC"> a</font>

186
00:08:35,190 --> 00:08:40,860
DNS and DHCP implementation and we

187
00:08:38,309 --> 00:08:42,959
looked at<font color="#E5E5E5"> this code as part as the</font>

188
00:08:40,860 --> 00:08:45,750
Google<font color="#CCCCCC"> security team after we found an</font>

189
00:08:42,960 --> 00:08:48,390
initial vulnerability in DNS and then we

190
00:08:45,750 --> 00:08:51,810
did a review<font color="#E5E5E5"> of the code base and this</font>

191
00:08:48,390 --> 00:08:55,260
code<font color="#E5E5E5"> here is part of the DHCP version</font>

192
00:08:51,810 --> 00:08:58,920
<font color="#E5E5E5">six seven lamentation</font><font color="#CCCCCC"> and if you</font>

193
00:08:55,260 --> 00:09:00,960
remember<font color="#CCCCCC"> how option works</font><font color="#E5E5E5"> what is trying</font>

194
00:08:58,920 --> 00:09:04,560
<font color="#E5E5E5">to do is basically it finds the client</font>

195
00:09:00,960 --> 00:09:06,930
<font color="#CCCCCC">mech option takes</font><font color="#E5E5E5"> the length of that</font>

196
00:09:04,560 --> 00:09:09,589
<font color="#CCCCCC">option</font><font color="#E5E5E5"> and stores it in</font><font color="#CCCCCC"> the state</font>

197
00:09:06,930 --> 00:09:11,939
<font color="#CCCCCC">McClane variable and then it immediately</font>

198
00:09:09,589 --> 00:09:14,220
<font color="#E5E5E5">puts or user steps</font>

199
00:09:11,940 --> 00:09:18,149
attacker controlled length variable as

200
00:09:14,220 --> 00:09:20,640
<font color="#CCCCCC">the size</font><font color="#E5E5E5"> field of a map copy operation</font>

201
00:09:18,149 --> 00:09:22,050
the destination<font color="#CCCCCC"> of that mem copy so the</font>

202
00:09:20,640 --> 00:09:24,209
source of the mem copy is a tacher

203
00:09:22,050 --> 00:09:26,609
<font color="#CCCCCC">control</font><font color="#E5E5E5"> it's the option value</font><font color="#CCCCCC"> the</font>

204
00:09:24,209 --> 00:09:30,149
<font color="#E5E5E5">destination is a fixed</font><font color="#CCCCCC"> size stack buffer</font>

205
00:09:26,610 --> 00:09:32,519
<font color="#E5E5E5">so it's a super straightforward stack</font>

206
00:09:30,149 --> 00:09:35,970
based buffer overflow right like you

207
00:09:32,519 --> 00:09:37,380
<font color="#E5E5E5">wouldn't expect to find it in 1998 and</font>

208
00:09:35,970 --> 00:09:39,000
this was<font color="#E5E5E5"> discovered by a colleague of</font>

209
00:09:37,380 --> 00:09:41,670
mine<font color="#CCCCCC"> Kevin</font><font color="#E5E5E5"> hammer from Google security</font>

210
00:09:39,000 --> 00:09:45,420
<font color="#CCCCCC">and when he found that bug</font><font color="#E5E5E5"> I was</font>

211
00:09:41,670 --> 00:09:48,510
thinking okay<font color="#E5E5E5"> so</font><font color="#CCCCCC"> this is DNS mask it's</font>

212
00:09:45,420 --> 00:09:50,760
somewhat popular<font color="#E5E5E5"> but if if</font><font color="#CCCCCC"> box like this</font>

213
00:09:48,510 --> 00:09:52,980
still<font color="#E5E5E5"> exists in in these code bases</font>

214
00:09:50,760 --> 00:09:54,630
<font color="#E5E5E5">let's look at the really popular code</font>

215
00:09:52,980 --> 00:09:58,620
<font color="#CCCCCC">bases to see if they're like similar</font>

216
00:09:54,630 --> 00:10:01,769
issues are still<font color="#CCCCCC"> there so what about</font>

217
00:09:58,620 --> 00:10:03,870
more widespread DHCP software and one of

218
00:10:01,769 --> 00:10:07,740
the the biggest code bases or the<font color="#E5E5E5"> most</font>

219
00:10:03,870 --> 00:10:11,760
widely used code bases for DHCP<font color="#E5E5E5"> is ISC</font>

220
00:10:07,740 --> 00:10:14,130
DHCP and that's the DHCP implementation

221
00:10:11,760 --> 00:10:15,990
by the internet systems consortium<font color="#E5E5E5"> they</font>

222
00:10:14,130 --> 00:10:19,529
are also well<font color="#E5E5E5"> known for releasing</font><font color="#CCCCCC"> the</font>

223
00:10:15,990 --> 00:10:22,769
<font color="#E5E5E5">bind DNS server</font><font color="#CCCCCC"> and the first release of</font>

224
00:10:19,529 --> 00:10:25,050
<font color="#E5E5E5">ISC DHCP was in 1997</font>

225
00:10:22,769 --> 00:10:28,829
so the code base<font color="#E5E5E5"> is like 21 years</font><font color="#CCCCCC"> old</font>

226
00:10:25,050 --> 00:10:31,170
now<font color="#E5E5E5"> and you can you notice it so it's</font>

227
00:10:28,829 --> 00:10:34,800
not the<font color="#E5E5E5"> most modern</font><font color="#CCCCCC"> seeks code base in</font>

228
00:10:31,170 --> 00:10:36,360
the world and the server side<font color="#CCCCCC"> of</font><font color="#E5E5E5"> the</font>

229
00:10:34,800 --> 00:10:39,240
implementation<font color="#CCCCCC"> is one of the most widely</font>

230
00:10:36,360 --> 00:10:42,089
<font color="#E5E5E5">used server implementations and even</font>

231
00:10:39,240 --> 00:10:45,660
more importantly the DHCP client called

232
00:10:42,089 --> 00:10:47,519
<font color="#CCCCCC">th client is pretty</font><font color="#E5E5E5"> much to default DHCP</font>

233
00:10:45,660 --> 00:10:50,339
client on most mainstream Linux

234
00:10:47,519 --> 00:10:53,820
distributions<font color="#E5E5E5"> so if you have a</font><font color="#CCCCCC"> debian or</font>

235
00:10:50,339 --> 00:10:57,720
<font color="#CCCCCC">red hat</font><font color="#E5E5E5"> and</font><font color="#CCCCCC"> chances are really high that</font>

236
00:10:53,820 --> 00:11:03,449
the<font color="#E5E5E5"> H client is the code base that does</font>

237
00:10:57,720 --> 00:11:05,490
the DHCP for<font color="#E5E5E5"> you so the first</font><font color="#CCCCCC"> buck we</font>

238
00:11:03,449 --> 00:11:08,910
<font color="#E5E5E5">discovered the first</font><font color="#CCCCCC"> bug I discovered in</font>

239
00:11:05,490 --> 00:11:13,350
<font color="#CCCCCC">ISC DHCP involves reference counting so</font>

240
00:11:08,910 --> 00:11:15,660
<font color="#E5E5E5">for F every DHCP option is C DHCP passes</font>

241
00:11:13,350 --> 00:11:17,610
and<font color="#E5E5E5"> processors</font><font color="#CCCCCC"> it has this option</font>

242
00:11:15,660 --> 00:11:19,890
structure you can see<font color="#CCCCCC"> on the slide and</font>

243
00:11:17,610 --> 00:11:21,360
<font color="#CCCCCC">you can ignore most of the fields here</font>

244
00:11:19,890 --> 00:11:23,910
the only<font color="#CCCCCC"> thing we are interesting is</font>

245
00:11:21,360 --> 00:11:26,040
<font color="#E5E5E5">through F count at the bottom and what</font>

246
00:11:23,910 --> 00:11:28,260
the ref count does is basically it<font color="#E5E5E5"> keeps</font>

247
00:11:26,040 --> 00:11:31,160
track of the<font color="#E5E5E5"> number</font><font color="#CCCCCC"> of</font><font color="#E5E5E5"> references in the</font>

248
00:11:28,260 --> 00:11:33,439
code base<font color="#CCCCCC"> to this option and if</font>

249
00:11:31,160 --> 00:11:36,709
<font color="#CCCCCC">f count</font><font color="#E5E5E5"> ever goes</font><font color="#CCCCCC"> to zero the whole</font>

250
00:11:33,440 --> 00:11:40,399
structure<font color="#E5E5E5"> and all related variables gets</font>

251
00:11:36,709 --> 00:11:42,469
freed<font color="#E5E5E5"> and like the option gets thrown</font>

252
00:11:40,399 --> 00:11:44,240
away<font color="#CCCCCC"> and normally that</font><font color="#E5E5E5"> never happens</font>

253
00:11:42,470 --> 00:11:47,899
<font color="#E5E5E5">like most of the time to F count will</font><font color="#CCCCCC"> be</font>

254
00:11:44,240 --> 00:11:49,970
at least one<font color="#E5E5E5"> but reference counting is</font>

255
00:11:47,899 --> 00:11:52,550
permanently done during<font color="#CCCCCC"> parsing and</font>

256
00:11:49,970 --> 00:11:54,019
processing of<font color="#E5E5E5"> DHCP packets so the</font>

257
00:11:52,550 --> 00:11:56,899
<font color="#CCCCCC">interesting thing here about</font><font color="#E5E5E5"> your F</font>

258
00:11:54,019 --> 00:12:00,259
count is that is assigned<font color="#E5E5E5"> 32-bit integer</font>

259
00:11:56,899 --> 00:12:04,129
<font color="#E5E5E5">so you can put quite some references in</font>

260
00:12:00,259 --> 00:12:05,930
<font color="#CCCCCC">it but not infinite many</font><font color="#E5E5E5"> and if you look</font>

261
00:12:04,129 --> 00:12:08,240
how it's used<font color="#CCCCCC"> you have this</font><font color="#E5E5E5"> pass option</font>

262
00:12:05,930 --> 00:12:10,849
buffer<font color="#E5E5E5"> function so this basically gets</font>

263
00:12:08,240 --> 00:12:14,300
executed<font color="#E5E5E5"> whenever is</font><font color="#CCCCCC"> see DHCP sees a</font>

264
00:12:10,850 --> 00:12:17,120
<font color="#E5E5E5">DHCP packet coming in and it's basically</font>

265
00:12:14,300 --> 00:12:21,680
this big<font color="#CCCCCC"> for loop so for every option in</font>

266
00:12:17,120 --> 00:12:24,680
the buffer it will call the option code

267
00:12:21,680 --> 00:12:28,008
hash lookup function based<font color="#E5E5E5"> on the option</font>

268
00:12:24,680 --> 00:12:31,069
type to to find like the<font color="#CCCCCC"> right option</font>

269
00:12:28,009 --> 00:12:34,579
structure and that<font color="#E5E5E5"> function increases</font>

270
00:12:31,069 --> 00:12:37,160
<font color="#E5E5E5">the option ref count by one it will then</font>

271
00:12:34,579 --> 00:12:38,989
process the option like pass<font color="#CCCCCC"> the value</font>

272
00:12:37,160 --> 00:12:41,839
<font color="#E5E5E5">decode it stored in some global</font>

273
00:12:38,990 --> 00:12:44,509
structure and afterwards<font color="#E5E5E5"> it will do</font>

274
00:12:41,839 --> 00:12:46,189
reference<font color="#E5E5E5"> to option again so option ref</font>

275
00:12:44,509 --> 00:12:47,720
count again<font color="#E5E5E5"> at the end</font><font color="#CCCCCC"> of this function</font>

276
00:12:46,189 --> 00:12:50,540
should<font color="#CCCCCC"> be the same as in the beginning</font>

277
00:12:47,720 --> 00:12:52,279
and this is the happy path so this<font color="#E5E5E5"> is</font>

278
00:12:50,540 --> 00:12:55,040
the path<font color="#E5E5E5"> that the program takes if</font>

279
00:12:52,279 --> 00:12:58,339
nothing goes wrong<font color="#E5E5E5"> but</font><font color="#CCCCCC"> I also have this</font>

280
00:12:55,040 --> 00:13:02,000
error case<font color="#E5E5E5"> so what happens if</font><font color="#CCCCCC"> like the</font>

281
00:12:58,339 --> 00:13:04,009
option length plus<font color="#CCCCCC"> the offset</font><font color="#E5E5E5"> in the</font>

282
00:13:02,000 --> 00:13:08,000
packet is actually larger than<font color="#E5E5E5"> the</font>

283
00:13:04,009 --> 00:13:10,220
<font color="#CCCCCC">complete size of the option right so</font>

284
00:13:08,000 --> 00:13:12,860
this would mean<font color="#CCCCCC"> the</font><font color="#E5E5E5"> packet is invalid</font><font color="#CCCCCC"> we</font>

285
00:13:10,220 --> 00:13:15,019
need to error out<font color="#CCCCCC"> of it and like break</font>

286
00:13:12,860 --> 00:13:16,880
processing and this is the error case

287
00:13:15,019 --> 00:13:18,889
and it looks pretty<font color="#E5E5E5"> good like they did</font>

288
00:13:16,880 --> 00:13:21,559
correctly check for out<font color="#E5E5E5"> of bound access</font>

289
00:13:18,889 --> 00:13:23,870
<font color="#E5E5E5">day-day</font><font color="#CCCCCC"> returned an error</font><font color="#E5E5E5"> and we</font><font color="#CCCCCC"> turned</font>

290
00:13:21,559 --> 00:13:25,670
out of<font color="#CCCCCC"> the</font><font color="#E5E5E5"> function the important thing</font>

291
00:13:23,870 --> 00:13:28,160
here what's missing is they don't

292
00:13:25,670 --> 00:13:29,569
decrease the option reference counter so

293
00:13:28,160 --> 00:13:31,879
they're missing this call to option

294
00:13:29,569 --> 00:13:37,430
<font color="#E5E5E5">dereference that decreases</font><font color="#CCCCCC"> the ref count</font>

295
00:13:31,879 --> 00:13:39,910
again and so<font color="#E5E5E5"> this is pretty</font><font color="#CCCCCC"> easy to miss</font>

296
00:13:37,430 --> 00:13:42,709
<font color="#E5E5E5">mustard it's pretty easy to miss this</font>

297
00:13:39,910 --> 00:13:44,839
<font color="#E5E5E5">that impacts actually quite interesting</font>

298
00:13:42,709 --> 00:13:46,579
so<font color="#CCCCCC"> what happens</font>

299
00:13:44,840 --> 00:13:48,380
basically you have an attacker<font color="#CCCCCC"> it can be</font>

300
00:13:46,580 --> 00:13:51,230
disorder or<font color="#CCCCCC"> a</font><font color="#E5E5E5"> client in this case and it</font>

301
00:13:48,380 --> 00:13:53,120
sends like<font color="#E5E5E5"> dhcp messages with like an</font>

302
00:13:51,230 --> 00:13:56,660
invalid<font color="#E5E5E5"> option</font><font color="#CCCCCC"> length to</font><font color="#E5E5E5"> your victim</font>

303
00:13:53,120 --> 00:13:58,760
<font color="#E5E5E5">which leads to a</font><font color="#CCCCCC"> new</font><font color="#E5E5E5"> f-con that gets</font>

304
00:13:56,660 --> 00:14:00,589
increased by<font color="#E5E5E5"> one right because it gets</font>

305
00:13:58,760 --> 00:14:03,200
increased but never gets decreased<font color="#E5E5E5"> again</font>

306
00:14:00,590 --> 00:14:05,750
so you<font color="#E5E5E5"> can increase it by one you do</font>

307
00:14:03,200 --> 00:14:09,200
that a couple<font color="#CCCCCC"> of time</font><font color="#E5E5E5"> you do that a lot</font>

308
00:14:05,750 --> 00:14:11,780
<font color="#CCCCCC">of times and like after</font><font color="#E5E5E5"> more than</font><font color="#CCCCCC"> two</font>

309
00:14:09,200 --> 00:14:14,030
billion<font color="#E5E5E5"> of these packets you basically</font>

310
00:14:11,780 --> 00:14:16,760
can increase<font color="#E5E5E5"> your</font><font color="#CCCCCC"> F count to the</font><font color="#E5E5E5"> maximum</font>

311
00:14:14,030 --> 00:14:19,430
value<font color="#CCCCCC"> you can store in an 32-bit integer</font>

312
00:14:16,760 --> 00:14:22,670
<font color="#E5E5E5">and then it wraps around becomes a</font>

313
00:14:19,430 --> 00:14:25,370
negative value<font color="#E5E5E5"> you</font><font color="#CCCCCC"> sent even</font><font color="#E5E5E5"> more</font>

314
00:14:22,670 --> 00:14:29,060
packages<font color="#E5E5E5"> and at the end like</font><font color="#CCCCCC"> you go</font><font color="#E5E5E5"> from</font>

315
00:14:25,370 --> 00:14:30,860
minus 2<font color="#CCCCCC"> to minus</font><font color="#E5E5E5"> 1 from</font><font color="#CCCCCC"> minus 1 to 0 so</font>

316
00:14:29,060 --> 00:14:33,170
<font color="#E5E5E5">you can move to</font><font color="#CCCCCC"> F count to zero</font><font color="#E5E5E5"> even</font>

317
00:14:30,860 --> 00:14:36,650
<font color="#CCCCCC">though you</font><font color="#E5E5E5"> still have references to</font><font color="#CCCCCC"> that</font>

318
00:14:33,170 --> 00:14:39,020
<font color="#E5E5E5">option structure in memory so the impact</font>

319
00:14:36,650 --> 00:14:42,230
<font color="#E5E5E5">of this is that you can turn this back</font>

320
00:14:39,020 --> 00:14:44,390
<font color="#CCCCCC">into</font><font color="#E5E5E5"> use</font><font color="#CCCCCC"> after free after</font><font color="#E5E5E5"> sending 200</font>

321
00:14:42,230 --> 00:14:48,200
gigabytes<font color="#E5E5E5"> of traffic to your victim</font>

322
00:14:44,390 --> 00:14:51,410
system so you can<font color="#E5E5E5"> say yeah this it's 200</font>

323
00:14:48,200 --> 00:14:54,020
gigabytes that's a lot<font color="#E5E5E5"> of course unlike</font>

324
00:14:51,410 --> 00:14:55,699
<font color="#CCCCCC">a modern alarm system it's</font><font color="#E5E5E5"> not super</font>

325
00:14:54,020 --> 00:14:58,460
unrealistic<font color="#CCCCCC"> right</font><font color="#E5E5E5"> so if you have like a</font>

326
00:14:55,700 --> 00:15:00,560
<font color="#CCCCCC">1 gigabit or a 10 gigabit connection</font>

327
00:14:58,460 --> 00:15:04,280
this can actually<font color="#CCCCCC"> be done in a</font><font color="#E5E5E5"> couple of</font>

328
00:15:00,560 --> 00:15:06,229
minutes but<font color="#E5E5E5"> still it's not</font><font color="#CCCCCC"> the easiest</font>

329
00:15:04,280 --> 00:15:09,290
back to<font color="#E5E5E5"> exploit over Wi-Fi network for</font>

330
00:15:06,230 --> 00:15:11,330
<font color="#CCCCCC">example</font><font color="#E5E5E5"> so I don't want to go into too</font>

331
00:15:09,290 --> 00:15:13,660
much detail how<font color="#E5E5E5"> to turn the user</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> free</font>

332
00:15:11,330 --> 00:15:17,000
<font color="#E5E5E5">into something like an RC</font><font color="#CCCCCC"> II</font><font color="#E5E5E5"> but</font>

333
00:15:13,660 --> 00:15:19,250
basically the IOC's<font color="#E5E5E5"> option</font><font color="#CCCCCC"> pausing gives</font>

334
00:15:17,000 --> 00:15:22,490
you like perfect heat primitives<font color="#CCCCCC"> to mail</font>

335
00:15:19,250 --> 00:15:24,950
<font color="#CCCCCC">to</font><font color="#E5E5E5"> to allocate different</font><font color="#CCCCCC"> sized chunks</font>

336
00:15:22,490 --> 00:15:28,280
freedom in an order of the attackers

337
00:15:24,950 --> 00:15:30,290
control so it's pretty<font color="#CCCCCC"> much like</font><font color="#E5E5E5"> if you</font>

338
00:15:28,280 --> 00:15:32,770
want to<font color="#CCCCCC"> true right and he explored Iasi</font>

339
00:15:30,290 --> 00:15:35,180
DHCP is like a super good hog referred

340
00:15:32,770 --> 00:15:36,920
the interesting part<font color="#CCCCCC"> about this</font><font color="#E5E5E5"> bug is</font>

341
00:15:35,180 --> 00:15:41,030
that<font color="#E5E5E5"> it's</font><font color="#CCCCCC"> actually part of server and</font>

342
00:15:36,920 --> 00:15:43,520
client and it happens<font color="#CCCCCC"> before any of the</font>

343
00:15:41,030 --> 00:15:46,220
other normal<font color="#E5E5E5"> checks against packets are</font>

344
00:15:43,520 --> 00:15:48,710
done so if you look at how<font color="#CCCCCC"> d-h client</font>

345
00:15:46,220 --> 00:15:51,130
listens to different interfaces<font color="#CCCCCC"> it will</font>

346
00:15:48,710 --> 00:15:53,960
actually<font color="#E5E5E5"> bind to all interfaces</font><font color="#CCCCCC"> and</font>

347
00:15:51,130 --> 00:15:56,270
throw away packets that<font color="#E5E5E5"> arrive over</font>

348
00:15:53,960 --> 00:15:58,670
interfaces<font color="#E5E5E5"> where it doesn't expect the</font>

349
00:15:56,270 --> 00:16:00,290
HTTP traffic however

350
00:15:58,670 --> 00:16:02,360
because this vulnerability happens

351
00:16:00,290 --> 00:16:05,689
before the interface check you can

352
00:16:02,360 --> 00:16:08,990
actually trigger the vulnerability<font color="#E5E5E5"> with</font>

353
00:16:05,690 --> 00:16:11,330
packets that come from the<font color="#CCCCCC"> internet so</font>

354
00:16:08,990 --> 00:16:14,600
on an interface<font color="#E5E5E5"> where normally no DHCP</font>

355
00:16:11,330 --> 00:16:16,670
traffic should arrive<font color="#CCCCCC"> and so I was able</font>

356
00:16:14,600 --> 00:16:18,680
<font color="#CCCCCC">to turn this into</font><font color="#E5E5E5"> remote</font><font color="#CCCCCC"> codecs</font><font color="#E5E5E5"> even</font>

357
00:16:16,670 --> 00:16:21,890
against the server turning it against

358
00:16:18,680 --> 00:16:24,530
<font color="#CCCCCC">our</font><font color="#E5E5E5"> CEO</font><font color="#CCCCCC"> against the client is more</font>

359
00:16:21,890 --> 00:16:26,090
difficult<font color="#E5E5E5"> basically because it's really</font>

360
00:16:24,530 --> 00:16:27,949
hard to turn<font color="#E5E5E5"> this back into</font><font color="#CCCCCC"> an in</font>

361
00:16:26,090 --> 00:16:30,410
filling<font color="#E5E5E5"> against the</font><font color="#CCCCCC"> client</font><font color="#E5E5E5"> because the</font>

362
00:16:27,950 --> 00:16:34,940
client doesn't<font color="#E5E5E5"> really reflect values</font>

363
00:16:30,410 --> 00:16:38,030
back<font color="#E5E5E5"> to</font><font color="#CCCCCC"> the server that much okay so</font>

364
00:16:34,940 --> 00:16:40,010
let's<font color="#E5E5E5"> look a bit more and so now I only</font>

365
00:16:38,030 --> 00:16:43,370
showed you like<font color="#E5E5E5"> C code</font><font color="#CCCCCC"> dead</font><font color="#E5E5E5"> basically</font>

366
00:16:40,010 --> 00:16:45,860
<font color="#E5E5E5">pauses options right so of course DHCP</font>

367
00:16:43,370 --> 00:16:48,560
does more stuff<font color="#CCCCCC"> so what happens like</font>

368
00:16:45,860 --> 00:16:51,170
after DHCP packet gets correctly passed

369
00:16:48,560 --> 00:16:53,180
is that<font color="#CCCCCC"> the new system</font><font color="#E5E5E5"> configuration</font>

370
00:16:51,170 --> 00:16:56,030
actually needs<font color="#CCCCCC"> to</font><font color="#E5E5E5"> be applied to the</font>

371
00:16:53,180 --> 00:16:58,880
system<font color="#E5E5E5"> select a new IP</font><font color="#CCCCCC"> address needs</font>

372
00:16:56,030 --> 00:17:01,100
assigned to the interface<font color="#E5E5E5"> and the way</font><font color="#CCCCCC"> th</font>

373
00:16:58,880 --> 00:17:03,350
<font color="#CCCCCC">climb traditionally does</font><font color="#E5E5E5"> this is by</font>

374
00:17:01,100 --> 00:17:05,480
invoking a helper tool<font color="#E5E5E5"> the HEPA tool</font>

375
00:17:03,350 --> 00:17:08,690
traditionally is called<font color="#E5E5E5"> each</font><font color="#CCCCCC"> CDH client</font>

376
00:17:05,480 --> 00:17:11,000
script<font color="#E5E5E5"> and all the options like the new</font>

377
00:17:08,690 --> 00:17:13,730
IP address<font color="#CCCCCC"> the new host name the new</font>

378
00:17:11,000 --> 00:17:16,940
domain<font color="#E5E5E5"> servers</font><font color="#CCCCCC"> gets passed as</font>

379
00:17:13,730 --> 00:17:18,980
<font color="#E5E5E5">environment variables to that script the</font>

380
00:17:16,940 --> 00:17:22,160
script can apply system configuration

381
00:17:18,980 --> 00:17:25,339
<font color="#E5E5E5">and it can also invoke these hooks in</font>

382
00:17:22,160 --> 00:17:27,860
the<font color="#CCCCCC"> etcd HC play th client hooks</font>

383
00:17:25,339 --> 00:17:30,080
directory<font color="#E5E5E5"> so you can put additional bash</font>

384
00:17:27,859 --> 00:17:32,679
scripts<font color="#E5E5E5"> in there and then we get invoked</font>

385
00:17:30,080 --> 00:17:37,399
whenever the interface changes<font color="#CCCCCC"> its</font><font color="#E5E5E5"> state</font>

386
00:17:32,680 --> 00:17:39,890
so<font color="#E5E5E5"> now I mentioned that encoding of DHCP</font>

387
00:17:37,400 --> 00:17:42,830
options is basically up to<font color="#E5E5E5"> the client or</font>

388
00:17:39,890 --> 00:17:45,380
<font color="#E5E5E5">like up to the sender</font><font color="#CCCCCC"> word so what</font>

389
00:17:42,830 --> 00:17:48,790
happens like if you just specify like

390
00:17:45,380 --> 00:17:51,410
binary garbage in in as an option value

391
00:17:48,790 --> 00:17:52,970
<font color="#E5E5E5">how do they make sure</font><font color="#CCCCCC"> that the value</font>

392
00:17:51,410 --> 00:17:55,160
they put into<font color="#CCCCCC"> the environment</font><font color="#E5E5E5"> is</font>

393
00:17:52,970 --> 00:17:57,200
<font color="#CCCCCC">actually safe so I mean you can't</font><font color="#E5E5E5"> put</font>

394
00:17:55,160 --> 00:17:59,150
like<font color="#E5E5E5"> binary data into an environment</font>

395
00:17:57,200 --> 00:18:00,860
<font color="#E5E5E5">variable</font><font color="#CCCCCC"> that</font><font color="#E5E5E5"> would lead to problems so</font>

396
00:17:59,150 --> 00:18:04,940
they need to<font color="#CCCCCC"> have some way to make it</font>

397
00:18:00,860 --> 00:18:06,949
printable or make it readable<font color="#E5E5E5"> and for</font>

398
00:18:04,940 --> 00:18:09,920
<font color="#E5E5E5">this</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> have this function pretty print</font>

399
00:18:06,950 --> 00:18:11,660
option and pretty print option the whole

400
00:18:09,920 --> 00:18:12,169
idea of<font color="#CCCCCC"> that function is basically</font><font color="#E5E5E5"> to</font>

401
00:18:11,660 --> 00:18:14,720
turn<font color="#E5E5E5"> on</font>

402
00:18:12,169 --> 00:18:17,090
<font color="#CCCCCC">binary garbage option into</font><font color="#E5E5E5"> something</font>

403
00:18:14,720 --> 00:18:19,820
<font color="#CCCCCC">that a human can really easily</font><font color="#E5E5E5"> reach so</font>

404
00:18:17,090 --> 00:18:22,309
this<font color="#CCCCCC"> our dysfunction supports integers</font>

405
00:18:19,820 --> 00:18:25,519
it supports<font color="#E5E5E5"> IP addresses it</font><font color="#CCCCCC"> supports</font>

406
00:18:22,309 --> 00:18:28,809
strings for Strings it correctly encodes

407
00:18:25,519 --> 00:18:32,690
and decodes<font color="#E5E5E5"> like special characters and</font>

408
00:18:28,809 --> 00:18:35,210
<font color="#CCCCCC">it also</font><font color="#E5E5E5"> supports binary data so if it</font>

409
00:18:32,690 --> 00:18:37,100
finds or if it discovers that<font color="#E5E5E5"> the string</font>

410
00:18:35,210 --> 00:18:39,289
contains something<font color="#E5E5E5"> that's not printable</font>

411
00:18:37,100 --> 00:18:41,330
<font color="#E5E5E5">it will</font><font color="#CCCCCC"> actually</font><font color="#E5E5E5"> just convert the whole</font>

412
00:18:39,289 --> 00:18:44,419
string into an hex encoded string and

413
00:18:41,330 --> 00:18:45,918
pass that by the<font color="#E5E5E5"> environment where so if</font>

414
00:18:44,419 --> 00:18:49,639
you look at<font color="#E5E5E5"> this function and you see</font>

415
00:18:45,919 --> 00:18:51,919
this pretty big<font color="#E5E5E5"> local static buffer</font>

416
00:18:49,639 --> 00:18:56,149
variable called<font color="#CCCCCC"> a buff which has space</font>

417
00:18:51,919 --> 00:18:57,440
for<font color="#CCCCCC"> 32,000 characters I mean that's a</font>

418
00:18:56,149 --> 00:18:59,959
<font color="#E5E5E5">good sign that there's probably</font>

419
00:18:57,440 --> 00:19:02,840
<font color="#E5E5E5">something wrong here it interestingly</font>

420
00:18:59,960 --> 00:19:05,330
the the xxx<font color="#CCCCCC"> comments</font><font color="#E5E5E5"> behind that</font>

421
00:19:02,840 --> 00:19:06,949
variable definition was actually in the

422
00:19:05,330 --> 00:19:09,199
<font color="#E5E5E5">original source</font><font color="#CCCCCC"> code so I guess the</font>

423
00:19:06,950 --> 00:19:11,119
developer when<font color="#CCCCCC"> routing the writing</font><font color="#E5E5E5"> that</font>

424
00:19:09,200 --> 00:19:14,450
already assumed that<font color="#E5E5E5"> there might be</font>

425
00:19:11,119 --> 00:19:15,980
something wrong<font color="#CCCCCC"> with it and looking at</font>

426
00:19:14,450 --> 00:19:19,070
<font color="#E5E5E5">it it turns out they basically don't</font>

427
00:19:15,980 --> 00:19:21,049
have any boundary tricks so if you have

428
00:19:19,070 --> 00:19:23,779
<font color="#E5E5E5">just like a really large observer you</font>

429
00:19:21,049 --> 00:19:26,149
that gets encoded<font color="#E5E5E5"> into</font><font color="#CCCCCC"> its hex form you</font>

430
00:19:23,779 --> 00:19:27,919
can easily overwrite<font color="#CCCCCC"> that buffer</font><font color="#E5E5E5"> because</font>

431
00:19:26,149 --> 00:19:30,049
they<font color="#E5E5E5"> never do any boundary checks and</font>

432
00:19:27,919 --> 00:19:34,100
again you get a pretty straightforward

433
00:19:30,049 --> 00:19:36,649
<font color="#CCCCCC">buffer overflow and so this back</font><font color="#E5E5E5"> isn't</font>

434
00:19:34,100 --> 00:19:39,949
trigger able over<font color="#E5E5E5"> DHCP version</font><font color="#CCCCCC"> four</font>

435
00:19:36,649 --> 00:19:42,258
because packet sizes are not long<font color="#CCCCCC"> enough</font>

436
00:19:39,950 --> 00:19:44,419
<font color="#CCCCCC">to actually put such a long</font><font color="#E5E5E5"> option in</font>

437
00:19:42,259 --> 00:19:49,239
there<font color="#E5E5E5"> but it can be easily exploited</font>

438
00:19:44,419 --> 00:19:52,279
using DHCP version<font color="#E5E5E5"> six so now I said</font>

439
00:19:49,239 --> 00:19:53,749
<font color="#CCCCCC">DHCP version six no one uses</font><font color="#E5E5E5"> it right so</font>

440
00:19:52,279 --> 00:19:56,179
in the<font color="#CCCCCC"> beginning I thought this makes</font>

441
00:19:53,749 --> 00:19:59,869
<font color="#E5E5E5">this bug really uninteresting</font><font color="#CCCCCC"> but it</font>

442
00:19:56,179 --> 00:20:02,509
turns<font color="#E5E5E5"> out that is</font><font color="#CCCCCC"> CDH client on modern</font>

443
00:19:59,869 --> 00:20:04,668
<font color="#CCCCCC">systems</font><font color="#E5E5E5"> actually automatically gets</font>

444
00:20:02,509 --> 00:20:05,480
spawned with support<font color="#E5E5E5"> for the HTTP</font>

445
00:20:04,669 --> 00:20:08,480
<font color="#CCCCCC">version 6</font>

446
00:20:05,480 --> 00:20:13,279
if the<font color="#E5E5E5"> writes packets are in a network</font>

447
00:20:08,480 --> 00:20:14,989
<font color="#E5E5E5">so how does this work so the last slide</font>

448
00:20:13,279 --> 00:20:16,970
with the<font color="#E5E5E5"> simplified architecture was</font>

449
00:20:14,989 --> 00:20:19,909
basically not true anymore so on a

450
00:20:16,970 --> 00:20:20,779
modern<font color="#CCCCCC"> system this the architecture</font>

451
00:20:19,909 --> 00:20:23,480
<font color="#E5E5E5">looks like the following</font>

452
00:20:20,779 --> 00:20:25,159
<font color="#E5E5E5">you have network manager and network</font>

453
00:20:23,480 --> 00:20:28,099
manager when it sees a new network

454
00:20:25,159 --> 00:20:31,399
<font color="#E5E5E5">connection coming up it will spawn</font><font color="#CCCCCC"> a th</font>

455
00:20:28,099 --> 00:20:33,739
client<font color="#CCCCCC"> if it sees</font><font color="#E5E5E5"> advertisement packets</font>

456
00:20:31,399 --> 00:20:38,389
so ipv6 routing advertisement pickets

457
00:20:33,739 --> 00:20:40,669
that specify<font color="#CCCCCC"> stateful</font><font color="#E5E5E5"> configuration it</font>

458
00:20:38,389 --> 00:20:43,639
will<font color="#E5E5E5"> spawn up a th client that supports</font>

459
00:20:40,669 --> 00:20:46,489
DHCP version 6 so as an attacker<font color="#CCCCCC"> you can</font>

460
00:20:43,639 --> 00:20:49,219
easily trigger the HTTP<font color="#E5E5E5"> version 6</font>

461
00:20:46,489 --> 00:20:51,159
clients by just sending<font color="#CCCCCC"> the</font><font color="#E5E5E5"> right route</font>

462
00:20:49,220 --> 00:20:54,669
advertisement packets over<font color="#E5E5E5"> the</font><font color="#CCCCCC"> network</font>

463
00:20:51,159 --> 00:20:56,929
<font color="#E5E5E5">so</font><font color="#CCCCCC"> BH client still</font><font color="#E5E5E5"> another thing and</font>

464
00:20:54,669 --> 00:20:58,789
<font color="#CCCCCC">invokes a helper script with</font><font color="#E5E5E5"> the</font>

465
00:20:56,929 --> 00:21:00,499
environment variables but this<font color="#E5E5E5"> isn't a</font>

466
00:20:58,789 --> 00:21:02,899
bash script<font color="#CCCCCC"> anymore instead today</font><font color="#E5E5E5"> a</font>

467
00:21:00,499 --> 00:21:06,349
network manager has this helper utility

468
00:21:02,899 --> 00:21:07,580
called<font color="#CCCCCC"> nm DHCP helper</font><font color="#E5E5E5"> so this gets and</font>

469
00:21:06,349 --> 00:21:11,599
worked with all the<font color="#E5E5E5"> environment</font>

470
00:21:07,580 --> 00:21:14,779
variables and<font color="#E5E5E5"> nm DHCP helper there's</font>

471
00:21:11,599 --> 00:21:17,840
only a single<font color="#CCCCCC"> thing</font><font color="#E5E5E5"> it sends a</font><font color="#CCCCCC"> debug</font>

472
00:21:14,779 --> 00:21:19,759
message back<font color="#CCCCCC"> to network manager</font><font color="#E5E5E5"> passing</font>

473
00:21:17,840 --> 00:21:22,999
all the option values it got back to

474
00:21:19,759 --> 00:21:25,669
<font color="#CCCCCC">network manager so network manager again</font>

475
00:21:22,999 --> 00:21:28,580
can do a system configuration apply

476
00:21:25,669 --> 00:21:34,220
system configuration and<font color="#CCCCCC"> of course it</font>

477
00:21:28,580 --> 00:21:37,099
also needs<font color="#CCCCCC"> some way to hook into what</font>

478
00:21:34,220 --> 00:21:38,840
<font color="#CCCCCC">you to allow for extensions so if you</font>

479
00:21:37,099 --> 00:21:40,460
want to extend network manager with your

480
00:21:38,840 --> 00:21:43,820
own scripts they have a mechanism<font color="#CCCCCC"> for</font>

481
00:21:40,460 --> 00:21:45,979
this and again there's a<font color="#E5E5E5"> magic directory</font>

482
00:21:43,820 --> 00:21:48,529
where you can put<font color="#E5E5E5"> bash scripts and it's</font>

483
00:21:45,979 --> 00:21:51,019
called<font color="#E5E5E5"> EDC network manager dispatcher D</font>

484
00:21:48,529 --> 00:21:53,749
and you can put<font color="#E5E5E5"> shell scripts there</font>

485
00:21:51,019 --> 00:21:56,090
again if network manager changes or<font color="#E5E5E5"> the</font>

486
00:21:53,749 --> 00:21:59,299
<font color="#E5E5E5">interface configuration it will invoke</font>

487
00:21:56,090 --> 00:22:02,418
these hyper scripts<font color="#E5E5E5"> there's only one</font>

488
00:21:59,299 --> 00:22:05,029
problem<font color="#CCCCCC"> they</font><font color="#E5E5E5"> decided to actually have</font>

489
00:22:02,419 --> 00:22:08,690
different environment naming scheme<font color="#CCCCCC"> so</font>

490
00:22:05,029 --> 00:22:11,059
instead of having the option<font color="#CCCCCC"> name</font>

491
00:22:08,690 --> 00:22:14,179
<font color="#E5E5E5">something like new domain</font><font color="#CCCCCC"> servers for a</font>

492
00:22:11,059 --> 00:22:17,269
new domain of domain service option they

493
00:22:14,179 --> 00:22:20,659
<font color="#E5E5E5">name</font><font color="#CCCCCC"> it DHCP version for domain servers</font>

494
00:22:17,269 --> 00:22:22,519
<font color="#CCCCCC">so basically you can see on the left</font>

495
00:22:20,659 --> 00:22:24,289
side<font color="#E5E5E5"> you</font><font color="#CCCCCC"> can see the new version on</font><font color="#E5E5E5"> the</font>

496
00:22:22,519 --> 00:22:26,269
<font color="#CCCCCC">right</font><font color="#E5E5E5"> side you</font><font color="#CCCCCC"> can see</font><font color="#E5E5E5"> the old version</font>

497
00:22:24,289 --> 00:22:28,729
and you<font color="#E5E5E5"> can see the naming</font><font color="#CCCCCC"> scheme is</font>

498
00:22:26,269 --> 00:22:30,529
slightly<font color="#E5E5E5"> different which is</font><font color="#CCCCCC"> a</font><font color="#E5E5E5"> problem</font>

499
00:22:28,729 --> 00:22:32,359
<font color="#E5E5E5">like if you have imagine you have</font><font color="#CCCCCC"> the</font>

500
00:22:30,529 --> 00:22:34,279
super<font color="#E5E5E5"> complex environment and you have</font>

501
00:22:32,359 --> 00:22:37,728
written a<font color="#CCCCCC"> lot of these th client hook</font>

502
00:22:34,279 --> 00:22:39,049
scripts that<font color="#CCCCCC"> do like all kind of</font><font color="#E5E5E5"> fancy</font>

503
00:22:37,729 --> 00:22:40,999
configuration stuff

504
00:22:39,049 --> 00:22:43,279
<font color="#E5E5E5">you can't simply copy them over into</font>

505
00:22:40,999 --> 00:22:45,820
<font color="#CCCCCC">e.t.c network manager dispatch ID</font>

506
00:22:43,279 --> 00:22:48,489
<font color="#E5E5E5">because</font><font color="#CCCCCC"> the naming scheme</font><font color="#E5E5E5"> doesn't fit</font>

507
00:22:45,820 --> 00:22:51,769
that's bad for<font color="#E5E5E5"> backwards</font><font color="#CCCCCC"> compatibility</font>

508
00:22:48,489 --> 00:22:53,539
<font color="#E5E5E5">so engineer's at Red Hat decided to</font>

509
00:22:51,769 --> 00:22:55,700
either help<font color="#CCCCCC"> a script</font><font color="#E5E5E5"> that solves the</font>

510
00:22:53,539 --> 00:22:58,158
<font color="#CCCCCC">problem</font><font color="#E5E5E5"> so this is a script that's in</font>

511
00:22:55,700 --> 00:22:59,869
the new dispatcher directory<font color="#E5E5E5"> and it's</font>

512
00:22:58,159 --> 00:23:03,049
responsible<font color="#CCCCCC"> for</font><font color="#E5E5E5"> running all the</font>

513
00:22:59,869 --> 00:23:05,928
old-style<font color="#E5E5E5"> hooks in the old directory</font>

514
00:23:03,049 --> 00:23:08,509
it's called<font color="#E5E5E5"> 11</font><font color="#CCCCCC"> th client it's used by</font>

515
00:23:05,929 --> 00:23:12,080
default<font color="#E5E5E5"> on Red Hat Enterprise fedora and</font>

516
00:23:08,509 --> 00:23:13,309
<font color="#E5E5E5">sender</font><font color="#CCCCCC"> s</font><font color="#E5E5E5"> and it's always used so even if</font>

517
00:23:12,080 --> 00:23:17,059
you don't<font color="#E5E5E5"> have any of the old-style</font>

518
00:23:13,309 --> 00:23:19,190
hooks<font color="#E5E5E5"> and the only thing 11 th client</font>

519
00:23:17,059 --> 00:23:23,809
needs<font color="#E5E5E5"> to do is it</font><font color="#CCCCCC"> needs to translate</font>

520
00:23:19,190 --> 00:23:25,429
<font color="#E5E5E5">this new</font><font color="#CCCCCC"> naming scheme and back to the</font>

521
00:23:23,809 --> 00:23:27,918
old version<font color="#E5E5E5"> so it needs to translate</font>

522
00:23:25,429 --> 00:23:31,129
DHCP for underscore option<font color="#E5E5E5"> to new on</font>

523
00:23:27,919 --> 00:23:34,580
<font color="#CCCCCC">let's go option so how are you going</font><font color="#E5E5E5"> to</font>

524
00:23:31,129 --> 00:23:38,090
do that<font color="#E5E5E5"> of course you have a giant evil</font>

525
00:23:34,580 --> 00:23:41,658
<font color="#E5E5E5">block in your script so if you look at</font>

526
00:23:38,090 --> 00:23:43,309
<font color="#E5E5E5">this so</font><font color="#CCCCCC"> this runs every time you do like</font>

527
00:23:41,659 --> 00:23:47,450
a<font color="#E5E5E5"> network configuration using network</font>

528
00:23:43,309 --> 00:23:49,399
manager<font color="#E5E5E5"> and I mean just looking at it</font>

529
00:23:47,450 --> 00:23:52,159
and you see this big evil evil on the

530
00:23:49,399 --> 00:23:54,709
top you see<font color="#E5E5E5"> this doesn't look like</font><font color="#CCCCCC"> a</font>

531
00:23:52,159 --> 00:23:56,749
<font color="#E5E5E5">good idea right so so what happens here</font>

532
00:23:54,710 --> 00:23:58,249
<font color="#CCCCCC">or what are they trying to do</font><font color="#E5E5E5"> so</font>

533
00:23:56,749 --> 00:24:01,070
<font color="#E5E5E5">basically they're dead they call</font><font color="#CCCCCC"> to</font>

534
00:23:58,249 --> 00:24:02,720
declare comment which prints out all

535
00:24:01,070 --> 00:24:05,720
environment variables for the script

536
00:24:02,720 --> 00:24:08,570
<font color="#E5E5E5">then they use crap to filter out</font>

537
00:24:05,720 --> 00:24:10,460
everything<font color="#E5E5E5"> that's not on</font><font color="#CCCCCC"> DHCP</font><font color="#E5E5E5"> I'm in</font>

538
00:24:08,570 --> 00:24:13,129
<font color="#E5E5E5">variables so they only look at stuff</font>

539
00:24:10,460 --> 00:24:16,369
that<font color="#E5E5E5"> starts with DHCP for underscore and</font>

540
00:24:13,129 --> 00:24:19,699
then they read<font color="#E5E5E5"> those values line by line</font>

541
00:24:16,369 --> 00:24:23,539
and then the<font color="#CCCCCC"> block inside inside</font><font color="#E5E5E5"> this</font>

542
00:24:19,700 --> 00:24:27,980
while loop<font color="#E5E5E5"> basically just splits option</font>

543
00:24:23,539 --> 00:24:32,690
name and value<font color="#E5E5E5"> lower cases the option</font>

544
00:24:27,980 --> 00:24:34,399
name<font color="#E5E5E5"> we places the DHCP for by new puts</font>

545
00:24:32,690 --> 00:24:37,669
the stuff back together<font color="#CCCCCC"> again</font><font color="#E5E5E5"> and then</font>

546
00:24:34,399 --> 00:24:42,428
calls echo with export new name new

547
00:24:37,669 --> 00:24:45,169
value so how does this go wrong

548
00:24:42,429 --> 00:24:48,139
basically it's vulnerable<font color="#E5E5E5"> because of</font><font color="#CCCCCC"> the</font>

549
00:24:45,169 --> 00:24:50,960
following<font color="#CCCCCC"> change they invoke read</font>

550
00:24:48,139 --> 00:24:53,029
<font color="#E5E5E5">without the - our flag</font>

551
00:24:50,960 --> 00:24:54,919
and read with<font color="#CCCCCC"> acid so this is the</font>

552
00:24:53,029 --> 00:24:58,490
patched version of the script<font color="#CCCCCC"> the</font><font color="#E5E5E5"> only</font>

553
00:24:54,919 --> 00:25:01,700
difference is this -<font color="#E5E5E5"> I'll be behind each</font>

554
00:24:58,490 --> 00:25:04,039
comment and the reason<font color="#E5E5E5"> for that is if</font>

555
00:25:01,700 --> 00:25:06,529
<font color="#CCCCCC">you invoke read</font><font color="#E5E5E5"> to rebuild them without</font>

556
00:25:04,039 --> 00:25:09,440
this flag it actually eats<font color="#E5E5E5"> back slashes</font>

557
00:25:06,529 --> 00:25:12,590
<font color="#E5E5E5">so this means if you send</font><font color="#CCCCCC"> over a</font>

558
00:25:09,440 --> 00:25:14,929
variable<font color="#E5E5E5"> like foo single quote which</font>

559
00:25:12,590 --> 00:25:17,178
gets correctly escaped by<font color="#E5E5E5"> the declare</font>

560
00:25:14,929 --> 00:25:20,360
comment<font color="#E5E5E5"> into foo</font><font color="#CCCCCC"> backslash</font><font color="#E5E5E5"> single quote</font>

561
00:25:17,179 --> 00:25:23,080
<font color="#CCCCCC">we'd are will remove the backslash</font><font color="#E5E5E5"> so at</font>

562
00:25:20,360 --> 00:25:26,000
the end you<font color="#CCCCCC"> have foo single quote and</font>

563
00:25:23,080 --> 00:25:29,389
this removes<font color="#E5E5E5"> to require escaping for the</font>

564
00:25:26,000 --> 00:25:31,370
option values because as you see at the

565
00:25:29,390 --> 00:25:33,860
end<font color="#CCCCCC"> there they echoed that insert an</font>

566
00:25:31,370 --> 00:25:35,510
evil plug so what I need<font color="#E5E5E5"> to do is then</font>

567
00:25:33,860 --> 00:25:37,969
<font color="#CCCCCC">we need to make</font><font color="#E5E5E5"> really sure that</font><font color="#CCCCCC"> opt</font>

568
00:25:35,510 --> 00:25:40,789
value is correctly escaped<font color="#E5E5E5"> as a single</font>

569
00:25:37,970 --> 00:25:43,240
quoted string just doesn't work<font color="#E5E5E5"> anymore</font>

570
00:25:40,789 --> 00:25:46,190
<font color="#E5E5E5">because if the wrong invocation of read</font>

571
00:25:43,240 --> 00:25:49,700
so the<font color="#E5E5E5"> Evod block becomes vulnerable and</font>

572
00:25:46,190 --> 00:25:51,380
you can inject<font color="#E5E5E5"> arbitrary comments and at</font>

573
00:25:49,700 --> 00:25:53,450
the impact of this<font color="#CCCCCC"> is that you can get</font>

574
00:25:51,380 --> 00:25:56,779
remote code execution on any vulnerable

575
00:25:53,450 --> 00:25:59,450
system by sending as a as a malicious

576
00:25:56,779 --> 00:26:02,450
<font color="#CCCCCC">dhcp server as sending some option</font><font color="#E5E5E5"> like</font>

577
00:25:59,450 --> 00:26:05,390
the<font color="#CCCCCC"> w pet option with a string like foo</font>

578
00:26:02,450 --> 00:26:07,940
single quote and then followed by the

579
00:26:05,390 --> 00:26:09,710
command you<font color="#CCCCCC"> want</font><font color="#E5E5E5"> to execute and this</font>

580
00:26:07,940 --> 00:26:12,740
more ability says<font color="#E5E5E5"> so this is again</font><font color="#CCCCCC"> like</font>

581
00:26:09,710 --> 00:26:14,809
<font color="#E5E5E5">it's relatively simple right it's not</font>

582
00:26:12,740 --> 00:26:17,210
super highly complex<font color="#E5E5E5"> but this</font>

583
00:26:14,809 --> 00:26:19,820
vulnerability gave you<font color="#E5E5E5"> a remote</font><font color="#CCCCCC"> root</font>

584
00:26:17,210 --> 00:26:22,730
code execution on vulnerable<font color="#CCCCCC"> rat-head</font>

585
00:26:19,820 --> 00:26:24,408
systems for the last<font color="#E5E5E5"> five years so you</font>

586
00:26:22,730 --> 00:26:26,750
could<font color="#E5E5E5"> basically go</font><font color="#CCCCCC"> through most</font>

587
00:26:24,409 --> 00:26:30,500
enterprise networks and<font color="#E5E5E5"> own every system</font>

588
00:26:26,750 --> 00:26:32,919
you see and and also<font color="#E5E5E5"> by chance that got</font>

589
00:26:30,500 --> 00:26:36,470
a really nice<font color="#CCCCCC"> CVE number so it got silly</font>

590
00:26:32,919 --> 00:26:39,140
<font color="#CCCCCC">e-111 one which I really enjoyed and</font>

591
00:26:36,470 --> 00:26:42,080
some people even decided to create<font color="#E5E5E5"> a</font>

592
00:26:39,140 --> 00:26:44,539
<font color="#CCCCCC">logo</font><font color="#E5E5E5"> and a song for it so if you want to</font>

593
00:26:42,080 --> 00:26:48,559
<font color="#CCCCCC">listen to</font><font color="#E5E5E5"> the vulnerability song you can</font>

594
00:26:44,539 --> 00:26:55,480
go to<font color="#E5E5E5"> Dino root dot ninja and listen to</font>

595
00:26:48,559 --> 00:27:00,110
it so this was network manager and

596
00:26:55,480 --> 00:27:02,299
<font color="#CCCCCC">system</font><font color="#E5E5E5"> D developers decided to write a</font>

597
00:27:00,110 --> 00:27:03,559
network manager replacement under the

598
00:27:02,299 --> 00:27:05,040
<font color="#CCCCCC">system</font><font color="#E5E5E5"> D umbrella</font>

599
00:27:03,559 --> 00:27:08,340
it's called system

600
00:27:05,040 --> 00:27:12,360
<font color="#E5E5E5">network</font><font color="#CCCCCC"> D it's included in</font><font color="#E5E5E5"> the default</font>

601
00:27:08,340 --> 00:27:14,610
<font color="#E5E5E5">installation of Ubuntu</font><font color="#CCCCCC"> 18 and also on</font>

602
00:27:12,360 --> 00:27:18,929
some Red Hat Enterprise Linux<font color="#E5E5E5"> images and</font>

603
00:27:14,610 --> 00:27:21,780
container distributions and it follows

604
00:27:18,930 --> 00:27:25,290
the<font color="#CCCCCC"> system</font><font color="#E5E5E5"> D</font><font color="#CCCCCC"> strategy of lighting</font>

605
00:27:21,780 --> 00:27:28,200
everything<font color="#E5E5E5"> from scratch so it has no</font>

606
00:27:25,290 --> 00:27:30,000
dependencies on external DHCP clients

607
00:27:28,200 --> 00:27:31,950
like the H client instead<font color="#CCCCCC"> they wrote</font>

608
00:27:30,000 --> 00:27:35,430
their own self written implementation of

609
00:27:31,950 --> 00:27:37,620
DHCP in modern C as a<font color="#E5E5E5"> completely</font><font color="#CCCCCC"> new we</font>

610
00:27:35,430 --> 00:27:39,870
want<font color="#E5E5E5"> and the ideas it</font><font color="#CCCCCC"> doesn't contain</font>

611
00:27:37,620 --> 00:27:41,939
any historical baggage<font color="#E5E5E5"> instead it's</font><font color="#CCCCCC"> like</font>

612
00:27:39,870 --> 00:27:43,110
<font color="#CCCCCC">a fresh implementation so everything is</font>

613
00:27:41,940 --> 00:27:48,210
<font color="#E5E5E5">going to be great</font><font color="#CCCCCC"> right</font>

614
00:27:43,110 --> 00:27:51,360
of<font color="#E5E5E5"> course it's written in C so it's easy</font>

615
00:27:48,210 --> 00:27:52,980
to<font color="#E5E5E5"> make mistakes so this is the next</font>

616
00:27:51,360 --> 00:27:55,850
<font color="#E5E5E5">buck or this is the last</font><font color="#CCCCCC"> buck I want to</font>

617
00:27:52,980 --> 00:27:58,680
talk about and so this happens<font color="#E5E5E5"> when</font>

618
00:27:55,850 --> 00:28:01,379
<font color="#E5E5E5">system D</font><font color="#CCCCCC"> Network GE tries to build</font><font color="#E5E5E5"> a</font>

619
00:27:58,680 --> 00:28:05,520
response packet<font color="#E5E5E5"> it sends</font><font color="#CCCCCC"> back to the</font>

620
00:28:01,380 --> 00:28:08,040
<font color="#E5E5E5">DHCP server and they append something to</font>

621
00:28:05,520 --> 00:28:11,520
this<font color="#E5E5E5"> this working buffer of the response</font>

622
00:28:08,040 --> 00:28:14,399
packet and try to make<font color="#CCCCCC"> sure they have</font>

623
00:28:11,520 --> 00:28:16,980
enough<font color="#E5E5E5"> space so</font><font color="#CCCCCC"> they check so this</font>

624
00:28:14,400 --> 00:28:19,320
function gets called with<font color="#CCCCCC"> a bus argument</font>

625
00:28:16,980 --> 00:28:21,240
and<font color="#E5E5E5"> buff</font><font color="#CCCCCC"> Lang argument</font><font color="#E5E5E5"> so buff is the</font>

626
00:28:19,320 --> 00:28:23,280
response buffer of the packet<font color="#CCCCCC"> that</font>

627
00:28:21,240 --> 00:28:26,750
they're building<font color="#E5E5E5"> Byfuglien is two</font>

628
00:28:23,280 --> 00:28:29,520
<font color="#E5E5E5">remaining size of that option buffer and</font>

629
00:28:26,750 --> 00:28:31,350
what<font color="#E5E5E5"> I had</font><font color="#CCCCCC"> tried to</font><font color="#E5E5E5"> do is they try</font><font color="#CCCCCC"> to</font>

630
00:28:29,520 --> 00:28:33,150
check that the stuff they're<font color="#E5E5E5"> gonna</font><font color="#CCCCCC"> do</font>

631
00:28:31,350 --> 00:28:35,939
<font color="#CCCCCC">right in the response buffer actually</font>

632
00:28:33,150 --> 00:28:37,770
fits so they have<font color="#E5E5E5"> this check where they</font>

633
00:28:35,940 --> 00:28:40,830
look at Byfuglien and if it's smaller

634
00:28:37,770 --> 00:28:42,510
<font color="#CCCCCC">than</font><font color="#E5E5E5"> the length</font><font color="#CCCCCC"> there they expecting to</font>

635
00:28:40,830 --> 00:28:45,960
write they will return an error and

636
00:28:42,510 --> 00:28:49,020
don't write it<font color="#E5E5E5"> however they made it</font>

637
00:28:45,960 --> 00:28:52,590
pretty<font color="#E5E5E5"> easy</font><font color="#CCCCCC"> to make mistake this</font><font color="#E5E5E5"> length</font>

638
00:28:49,020 --> 00:28:55,620
check<font color="#E5E5E5"> is incorrect</font><font color="#CCCCCC"> so it this</font><font color="#E5E5E5"> is to fix</font>

639
00:28:52,590 --> 00:28:57,870
again it<font color="#E5E5E5"> needs the size of this</font><font color="#CCCCCC"> DHCP</font>

640
00:28:55,620 --> 00:29:01,169
option header so<font color="#CCCCCC"> option type an option</font>

641
00:28:57,870 --> 00:29:04,050
length because otherwise you can see

642
00:29:01,170 --> 00:29:07,140
<font color="#E5E5E5">basically</font><font color="#CCCCCC"> their decrease Byfuglien not</font>

643
00:29:04,050 --> 00:29:09,510
only by length<font color="#E5E5E5"> but</font><font color="#CCCCCC"> also by the size of</font>

644
00:29:07,140 --> 00:29:13,890
<font color="#CCCCCC">the DHCP option header</font><font color="#E5E5E5"> so this makes</font>

645
00:29:09,510 --> 00:29:15,990
<font color="#CCCCCC">Byfuglien</font><font color="#E5E5E5"> underflow it becomes from it's</font>

646
00:29:13,890 --> 00:29:18,700
a<font color="#E5E5E5"> sliced integer so it becomes in like a</font>

647
00:29:15,990 --> 00:29:20,970
really really<font color="#E5E5E5"> large 64-bit integer</font>

648
00:29:18,700 --> 00:29:24,280
and this allows you to as an attacker to

649
00:29:20,970 --> 00:29:26,790
have<font color="#CCCCCC"> an pretty controlled keep out of</font>

650
00:29:24,280 --> 00:29:26,790
<font color="#CCCCCC">bound</font><font color="#E5E5E5"> right</font>

651
00:29:28,620 --> 00:29:33,189
and again the vulnerable code here is

652
00:29:31,570 --> 00:29:36,040
part of<font color="#E5E5E5"> the DHCP version six</font>

653
00:29:33,190 --> 00:29:38,980
functionality however<font color="#CCCCCC"> it's Dean abled by</font>

654
00:29:36,040 --> 00:29:43,420
if default and system D<font color="#CCCCCC"> Network</font><font color="#E5E5E5"> D even</font>

655
00:29:38,980 --> 00:29:48,160
<font color="#E5E5E5">has the property that</font><font color="#CCCCCC"> they will enable</font>

656
00:29:43,420 --> 00:29:49,990
DHCP<font color="#E5E5E5"> DHCP version six even if the</font>

657
00:29:48,160 --> 00:29:52,660
administrator disables it<font color="#E5E5E5"> in the</font>

658
00:29:49,990 --> 00:29:54,730
configuration<font color="#E5E5E5"> so you can say hey I only</font>

659
00:29:52,660 --> 00:29:57,310
want<font color="#E5E5E5"> to support DHCP world and</font><font color="#CCCCCC"> four on</font>

660
00:29:54,730 --> 00:30:00,550
this network interface but if system D

661
00:29:57,310 --> 00:30:02,950
sees a route advertisement<font color="#CCCCCC"> packet</font><font color="#E5E5E5"> that</font>

662
00:30:00,550 --> 00:30:05,740
looks like it it requires DHCP version

663
00:30:02,950 --> 00:30:07,900
<font color="#CCCCCC">six it will happily enable the DHCP</font>

664
00:30:05,740 --> 00:30:11,050
version<font color="#E5E5E5"> six functionality and go with it</font>

665
00:30:07,900 --> 00:30:15,160
<font color="#CCCCCC">and overwriting the the setting uu</font>

666
00:30:11,050 --> 00:30:17,919
enabled in<font color="#CCCCCC"> your configuration</font><font color="#E5E5E5"> file</font><font color="#CCCCCC"> so</font>

667
00:30:15,160 --> 00:30:20,500
let's<font color="#CCCCCC"> talk about</font><font color="#E5E5E5"> how you can turn this</font>

668
00:30:17,920 --> 00:30:22,540
hit corruption<font color="#CCCCCC"> into remote code</font>

669
00:30:20,500 --> 00:30:26,530
execution<font color="#E5E5E5"> so to actually get a shell on</font>

670
00:30:22,540 --> 00:30:28,480
<font color="#CCCCCC">a vulnerable system</font><font color="#E5E5E5"> Alice had to</font>

671
00:30:26,530 --> 00:30:30,910
<font color="#E5E5E5">summarize debug it's a it's a pretty</font>

672
00:30:28,480 --> 00:30:34,060
controlled<font color="#E5E5E5"> out of bound right in a fixed</font>

673
00:30:30,910 --> 00:30:36,760
size<font color="#E5E5E5"> heap buffer and the target</font><font color="#CCCCCC"> system I</font>

674
00:30:34,060 --> 00:30:38,950
want<font color="#E5E5E5"> to</font><font color="#CCCCCC"> focus on is an</font><font color="#E5E5E5"> Ubuntu 18.4</font>

675
00:30:36,760 --> 00:30:41,260
that's the<font color="#CCCCCC"> long-term stable release</font>

676
00:30:38,950 --> 00:30:44,470
still pretty recent so this is something

677
00:30:41,260 --> 00:30:46,150
<font color="#CCCCCC">that</font><font color="#E5E5E5"> you can probably find and we are of</font>

678
00:30:44,470 --> 00:30:48,100
<font color="#CCCCCC">course</font><font color="#E5E5E5"> looking at</font><font color="#CCCCCC"> a</font><font color="#E5E5E5"> vulnerable version</font>

679
00:30:46,150 --> 00:30:51,550
of system<font color="#E5E5E5"> D as it's included in this</font>

680
00:30:48,100 --> 00:30:53,800
<font color="#CCCCCC">open to distribution Ubuntu 18</font><font color="#E5E5E5"> also has</font>

681
00:30:51,550 --> 00:30:55,810
a pretty recent<font color="#E5E5E5"> version of G</font><font color="#CCCCCC"> Lib</font><font color="#E5E5E5"> C which</font>

682
00:30:53,800 --> 00:30:58,570
becomes irrelevant for<font color="#E5E5E5"> the for the heat</font>

683
00:30:55,810 --> 00:31:00,940
exploitation<font color="#E5E5E5"> and it's a modern</font>

684
00:30:58,570 --> 00:31:02,919
distribution<font color="#E5E5E5"> so it's reasonably hardened</font>

685
00:31:00,940 --> 00:31:05,440
<font color="#E5E5E5">this means you have a full address space</font>

686
00:31:02,920 --> 00:31:07,690
layout randomization<font color="#CCCCCC"> and the system D</font>

687
00:31:05,440 --> 00:31:10,090
binary is position<font color="#CCCCCC"> independent so you</font>

688
00:31:07,690 --> 00:31:12,010
don't have<font color="#E5E5E5"> like any easy tricks that</font>

689
00:31:10,090 --> 00:31:13,919
like make this memory corruption

690
00:31:12,010 --> 00:31:16,780
trivially<font color="#CCCCCC"> extra exploit</font>

691
00:31:13,920 --> 00:31:18,940
we have one big advantage<font color="#E5E5E5"> because</font><font color="#CCCCCC"> it's</font>

692
00:31:16,780 --> 00:31:20,350
<font color="#E5E5E5">the system do you service if you if you</font>

693
00:31:18,940 --> 00:31:22,800
trigger<font color="#E5E5E5"> the</font><font color="#CCCCCC"> memory corruption and do</font>

694
00:31:20,350 --> 00:31:25,149
something wrong<font color="#E5E5E5"> and</font><font color="#CCCCCC"> just have us crash</font><font color="#E5E5E5"> a</font>

695
00:31:22,800 --> 00:31:27,550
system do<font color="#E5E5E5"> you will</font><font color="#CCCCCC"> immediately we start</font>

696
00:31:25,150 --> 00:31:29,620
it<font color="#E5E5E5"> so basically we have infinite tries</font>

697
00:31:27,550 --> 00:31:31,659
if we do something incorrect we can just

698
00:31:29,620 --> 00:31:33,399
try<font color="#CCCCCC"> again and hope that</font><font color="#E5E5E5"> it works this</font>

699
00:31:31,660 --> 00:31:37,519
time

700
00:31:33,399 --> 00:31:39,350
so to<font color="#E5E5E5"> turn one of these bugs into</font><font color="#CCCCCC"> remote</font>

701
00:31:37,519 --> 00:31:42,470
code execution you basically<font color="#E5E5E5"> require</font>

702
00:31:39,350 --> 00:31:44,509
some way to<font color="#E5E5E5"> bypass or to break isolate</font>

703
00:31:42,470 --> 00:31:46,480
address space layout randomization<font color="#CCCCCC"> so</font>

704
00:31:44,509 --> 00:31:48,679
<font color="#CCCCCC">you need to in</font><font color="#E5E5E5"> Philly</font>

705
00:31:46,480 --> 00:31:51,440
<font color="#E5E5E5">fortunately the same version that I</font>

706
00:31:48,679 --> 00:31:53,480
<font color="#CCCCCC">found</font><font color="#E5E5E5"> the back in also contains another</font>

707
00:31:51,440 --> 00:31:56,419
bug that was silently fixed by the

708
00:31:53,480 --> 00:31:59,690
developers later on and it's<font color="#E5E5E5"> pretty much</font>

709
00:31:56,419 --> 00:32:02,269
<font color="#CCCCCC">the perfect</font><font color="#E5E5E5"> info leak so this is again a</font>

710
00:31:59,690 --> 00:32:04,460
function<font color="#E5E5E5"> that passes</font><font color="#CCCCCC"> the HTTP option as</font>

711
00:32:02,269 --> 00:32:07,970
like every function I<font color="#CCCCCC"> showed</font><font color="#E5E5E5"> is for her</font>

712
00:32:04,460 --> 00:32:10,460
<font color="#E5E5E5">and what</font><font color="#CCCCCC"> they're</font><font color="#E5E5E5"> trying to do here is if</font>

713
00:32:07,970 --> 00:32:12,859
you<font color="#CCCCCC"> get a packet and it specifies an</font>

714
00:32:10,460 --> 00:32:14,539
option length like includes an option

715
00:32:12,859 --> 00:32:17,869
with an option<font color="#E5E5E5"> length they actually want</font>

716
00:32:14,539 --> 00:32:19,908
to<font color="#E5E5E5"> make</font><font color="#CCCCCC"> sure that the option length fits</font>

717
00:32:17,869 --> 00:32:21,830
into the<font color="#E5E5E5"> remaining bytes of the packet</font>

718
00:32:19,909 --> 00:32:23,600
<font color="#E5E5E5">right which makes sense otherwise it's</font>

719
00:32:21,830 --> 00:32:26,210
an out of<font color="#E5E5E5"> bound up</font><font color="#CCCCCC"> shell</font><font color="#E5E5E5"> and they have</font>

720
00:32:23,600 --> 00:32:28,699
this check<font color="#E5E5E5"> where I checked that the</font>

721
00:32:26,210 --> 00:32:34,850
complete length<font color="#E5E5E5"> of</font><font color="#CCCCCC"> the packet there they</font>

722
00:32:28,700 --> 00:32:39,379
are<font color="#CCCCCC"> getting is large enough</font><font color="#E5E5E5"> to</font><font color="#CCCCCC"> actually</font>

723
00:32:34,850 --> 00:32:41,389
hold the<font color="#CCCCCC"> option length</font><font color="#E5E5E5"> however the</font>

724
00:32:39,379 --> 00:32:44,178
mistake<font color="#E5E5E5"> they are doing so the iterating</font>

725
00:32:41,389 --> 00:32:46,248
over<font color="#CCCCCC"> this and the actual position in the</font>

726
00:32:44,179 --> 00:32:48,379
in the packet is in the post<font color="#CCCCCC"> variable</font>

727
00:32:46,249 --> 00:32:50,419
and if you look at<font color="#E5E5E5"> that</font><font color="#CCCCCC"> ifs check the</font>

728
00:32:48,379 --> 00:32:53,928
post<font color="#CCCCCC"> variable the position is never</font>

729
00:32:50,419 --> 00:32:55,970
taken into account<font color="#E5E5E5"> so to</font><font color="#CCCCCC"> correct the</font>

730
00:32:53,929 --> 00:32:57,980
correct<font color="#E5E5E5"> code for this check</font><font color="#CCCCCC"> will look</font>

731
00:32:55,970 --> 00:33:00,950
<font color="#E5E5E5">like this they would actually need to</font>

732
00:32:57,980 --> 00:33:04,039
check that<font color="#E5E5E5"> from our current position</font><font color="#CCCCCC"> in</font>

733
00:33:00,950 --> 00:33:05,659
the packet<font color="#E5E5E5"> the</font><font color="#CCCCCC"> remaining length of the</font>

734
00:33:04,039 --> 00:33:08,450
message buffer is still large<font color="#CCCCCC"> enough to</font>

735
00:33:05,659 --> 00:33:10,730
contain<font color="#CCCCCC"> the</font><font color="#E5E5E5"> option length because they</font>

736
00:33:08,450 --> 00:33:14,389
never take the position into account<font color="#CCCCCC"> as</font>

737
00:33:10,730 --> 00:33:17,239
long<font color="#CCCCCC"> as the complete message</font><font color="#E5E5E5"> is large</font>

738
00:33:14,389 --> 00:33:19,219
enough<font color="#E5E5E5"> to fit an option they think it</font>

739
00:33:17,239 --> 00:33:22,309
<font color="#E5E5E5">will fit even if the option is right at</font>

740
00:33:19,220 --> 00:33:24,379
the end of the packet so how<font color="#CCCCCC"> can you</font>

741
00:33:22,309 --> 00:33:26,480
<font color="#E5E5E5">trigger that bug or how</font><font color="#CCCCCC"> can</font><font color="#E5E5E5"> you turn</font>

742
00:33:24,379 --> 00:33:28,189
this<font color="#CCCCCC"> energy</font><font color="#E5E5E5"> into an usable info leak and</font>

743
00:33:26,480 --> 00:33:30,859
the idea is basically something<font color="#E5E5E5"> like</font>

744
00:33:28,190 --> 00:33:33,889
<font color="#CCCCCC">this as a malicious</font><font color="#E5E5E5"> server you</font><font color="#CCCCCC"> censor</font><font color="#E5E5E5"> a</font>

745
00:33:30,859 --> 00:33:36,320
<font color="#CCCCCC">DCP version six packet that contains</font>

746
00:33:33,889 --> 00:33:38,209
some random valid options you<font color="#E5E5E5"> don't care</font>

747
00:33:36,320 --> 00:33:41,779
about<font color="#E5E5E5"> them they're just there</font><font color="#CCCCCC"> to fill</font>

748
00:33:38,210 --> 00:33:43,849
space<font color="#CCCCCC"> and then right at the end</font><font color="#E5E5E5"> of the</font>

749
00:33:41,779 --> 00:33:45,560
packet you<font color="#CCCCCC"> include an additional option</font>

750
00:33:43,849 --> 00:33:48,290
and this one has an interval

751
00:33:45,560 --> 00:33:51,350
length<font color="#E5E5E5"> so it's the option</font><font color="#CCCCCC"> type server ID</font>

752
00:33:48,290 --> 00:33:53,570
and we say hey<font color="#CCCCCC"> this option is</font><font color="#E5E5E5"> 150 bytes</font>

753
00:33:51,350 --> 00:33:57,740
long but in reality it's only 1<font color="#E5E5E5"> byte</font>

754
00:33:53,570 --> 00:33:59,780
long and what system<font color="#E5E5E5"> D will do so server</font>

755
00:33:57,740 --> 00:34:02,180
ID has<font color="#CCCCCC"> two interesting property that the</font>

756
00:33:59,780 --> 00:34:05,360
client<font color="#E5E5E5"> will reflected back to the server</font>

757
00:34:02,180 --> 00:34:07,880
in the next packet so the next packet

758
00:34:05,360 --> 00:34:09,859
you get back<font color="#CCCCCC"> from</font><font color="#E5E5E5"> the client</font><font color="#CCCCCC"> will looks</font>

759
00:34:07,880 --> 00:34:12,140
<font color="#E5E5E5">like this</font><font color="#CCCCCC"> it will include the option</font>

760
00:34:09,860 --> 00:34:15,260
server<font color="#E5E5E5"> ID option and it will include the</font>

761
00:34:12,139 --> 00:34:18,310
<font color="#E5E5E5">option length of 150</font><font color="#CCCCCC"> an addition</font><font color="#E5E5E5"> to the</font>

762
00:34:15,260 --> 00:34:21,650
<font color="#CCCCCC">one by do you path to it</font><font color="#E5E5E5"> it will include</font>

763
00:34:18,310 --> 00:34:24,139
149 more bytes that are leaked out<font color="#CCCCCC"> of</font>

764
00:34:21,650 --> 00:34:26,330
the<font color="#CCCCCC"> system D memory</font><font color="#E5E5E5"> so if you are</font>

765
00:34:24,139 --> 00:34:27,920
familiar<font color="#E5E5E5"> with</font><font color="#CCCCCC"> 1/2 pleats this is like</font>

766
00:34:26,330 --> 00:34:32,090
pretty<font color="#E5E5E5"> much it's pretty much takes</font>

767
00:34:27,920 --> 00:34:36,080
exactly<font color="#CCCCCC"> the same</font><font color="#E5E5E5"> back so we can use</font><font color="#CCCCCC"> this</font>

768
00:34:32,090 --> 00:34:38,840
to read memory or leak<font color="#CCCCCC"> memory of the</font>

769
00:34:36,080 --> 00:34:43,040
system<font color="#E5E5E5"> D process how do we turn this</font>

770
00:34:38,840 --> 00:34:45,320
<font color="#CCCCCC">into something</font><font color="#E5E5E5"> that we can</font><font color="#CCCCCC"> use the idea</font>

771
00:34:43,040 --> 00:34:50,540
is we want<font color="#CCCCCC"> to leak a pointer that points</font>

772
00:34:45,320 --> 00:34:52,490
at<font color="#CCCCCC"> Yi Lipsy memory</font><font color="#E5E5E5"> I talk later about</font>

773
00:34:50,540 --> 00:34:54,500
why this<font color="#E5E5E5"> is</font><font color="#CCCCCC"> super</font><font color="#E5E5E5"> helpful for</font><font color="#CCCCCC"> us but</font>

774
00:34:52,489 --> 00:34:57,560
basically if you have a<font color="#E5E5E5"> GD p--</font><font color="#CCCCCC"> c pointer</font>

775
00:34:54,500 --> 00:35:00,560
you<font color="#E5E5E5"> can bypass our solare and go on with</font>

776
00:34:57,560 --> 00:35:02,750
<font color="#E5E5E5">your exploitation and if you look at how</font>

777
00:35:00,560 --> 00:35:04,880
<font color="#E5E5E5">these</font><font color="#CCCCCC"> dis memory layout normally looks</font>

778
00:35:02,750 --> 00:35:08,270
like on the heap<font color="#E5E5E5"> you basically have this</font>

779
00:35:04,880 --> 00:35:10,880
green trunk<font color="#E5E5E5"> is our heap chunk</font><font color="#CCCCCC"> that's</font>

780
00:35:08,270 --> 00:35:15,620
control that that contains our<font color="#CCCCCC"> DHCP</font>

781
00:35:10,880 --> 00:35:18,290
message<font color="#E5E5E5"> and underneath it</font><font color="#CCCCCC"> all behind</font><font color="#E5E5E5"> it</font>

782
00:35:15,620 --> 00:35:21,950
comes the next<font color="#E5E5E5"> chunk if that memory</font>

783
00:35:18,290 --> 00:35:25,250
chunk is<font color="#E5E5E5"> a free chunk and if it's a</font>

784
00:35:21,950 --> 00:35:29,180
chunk that's stored inside an MTG<font color="#CCCCCC"> Lipsy</font>

785
00:35:25,250 --> 00:35:32,240
bin like a free list or the small bin or

786
00:35:29,180 --> 00:35:35,149
large bins and then<font color="#E5E5E5"> you</font><font color="#CCCCCC"> actually have</font>

787
00:35:32,240 --> 00:35:38,089
this<font color="#E5E5E5"> metadata stored on the heap</font><font color="#CCCCCC"> so the</font>

788
00:35:35,150 --> 00:35:41,840
<font color="#E5E5E5">forward and</font><font color="#CCCCCC"> the backward</font><font color="#E5E5E5"> pointer of a</font>

789
00:35:38,090 --> 00:35:44,900
linked list<font color="#E5E5E5"> and if these forward and in</font>

790
00:35:41,840 --> 00:35:47,000
many cases<font color="#E5E5E5"> in a freshly started process</font>

791
00:35:44,900 --> 00:35:49,340
this<font color="#E5E5E5"> forward and backward pointer will</font>

792
00:35:47,000 --> 00:35:51,530
actually point<font color="#E5E5E5"> to an address inside G</font>

793
00:35:49,340 --> 00:35:53,870
<font color="#CCCCCC">Lib C so</font><font color="#E5E5E5"> into</font><font color="#CCCCCC"> in</font><font color="#E5E5E5"> data structure that's</font>

794
00:35:51,530 --> 00:35:57,440
inside G<font color="#CCCCCC"> Lib C which is called main and</font>

795
00:35:53,870 --> 00:35:59,120
<font color="#CCCCCC">Reena</font><font color="#E5E5E5"> and some offset of it so why we</font>

796
00:35:57,440 --> 00:36:01,430
can do here is

797
00:35:59,120 --> 00:36:04,069
if we have this pointer to main arena

798
00:36:01,430 --> 00:36:05,899
<font color="#CCCCCC">last</font><font color="#E5E5E5"> offset we can actually out</font><font color="#CCCCCC"> of that</font>

799
00:36:04,070 --> 00:36:08,330
we can<font color="#CCCCCC"> easily calculate</font><font color="#E5E5E5"> the base address</font>

800
00:36:05,900 --> 00:36:10,880
of gilepsy<font color="#E5E5E5"> if you have the base address</font>

801
00:36:08,330 --> 00:36:15,350
<font color="#CCCCCC">of G loop see our lair</font><font color="#E5E5E5"> is broken for</font>

802
00:36:10,880 --> 00:36:18,680
most practical practical attacks<font color="#CCCCCC"> so we</font>

803
00:36:15,350 --> 00:36:22,069
have I have this have some<font color="#E5E5E5"> solve this</font>

804
00:36:18,680 --> 00:36:25,100
first problem<font color="#CCCCCC"> and of course this desired</font>

805
00:36:22,070 --> 00:36:27,110
<font color="#E5E5E5">heap</font><font color="#CCCCCC"> state might not always</font><font color="#E5E5E5"> exist but</font>

806
00:36:25,100 --> 00:36:29,330
chances<font color="#E5E5E5"> are pretty high that this is how</font>

807
00:36:27,110 --> 00:36:31,640
it looks like<font color="#E5E5E5"> when system D is freshly</font>

808
00:36:29,330 --> 00:36:33,950
started and just processes its first

809
00:36:31,640 --> 00:36:37,339
packet<font color="#E5E5E5"> and what we can do if it doesn't</font>

810
00:36:33,950 --> 00:36:40,160
<font color="#CCCCCC">work out we just continue</font><font color="#E5E5E5"> doing it or</font>

811
00:36:37,340 --> 00:36:42,230
trying<font color="#CCCCCC"> to do</font><font color="#E5E5E5"> it by crashing system D and</font>

812
00:36:40,160 --> 00:36:44,480
looking at it<font color="#E5E5E5"> again so you can actually</font>

813
00:36:42,230 --> 00:36:46,790
have<font color="#CCCCCC"> a super simple heuristic where you</font>

814
00:36:44,480 --> 00:36:48,350
just check that<font color="#E5E5E5"> the forward pointer and</font>

815
00:36:46,790 --> 00:36:50,810
<font color="#E5E5E5">to back what pointer is the same value</font>

816
00:36:48,350 --> 00:36:55,370
<font color="#CCCCCC">if it's the</font><font color="#E5E5E5"> same value</font><font color="#CCCCCC"> you know it's a</font>

817
00:36:50,810 --> 00:36:57,830
pointer to<font color="#E5E5E5"> G</font><font color="#CCCCCC"> Lipsy so now we have a heap</font>

818
00:36:55,370 --> 00:37:00,920
overflow we have an info<font color="#E5E5E5"> league and we</font>

819
00:36:57,830 --> 00:37:02,840
want to to get<font color="#CCCCCC"> to our</font><font color="#E5E5E5"> C we want to turn</font>

820
00:37:00,920 --> 00:37:05,660
<font color="#E5E5E5">this heap overflow into an arbitrary</font>

821
00:37:02,840 --> 00:37:06,980
right and since the<font color="#E5E5E5"> difference is</font>

822
00:37:05,660 --> 00:37:09,080
basically<font color="#E5E5E5"> at the</font><font color="#CCCCCC"> moment we can only</font>

823
00:37:06,980 --> 00:37:10,820
<font color="#CCCCCC">write attacker control data at the end</font>

824
00:37:09,080 --> 00:37:12,980
of<font color="#E5E5E5"> our buffer</font><font color="#CCCCCC"> or after the end</font><font color="#E5E5E5"> of our</font>

825
00:37:10,820 --> 00:37:16,160
buffer<font color="#CCCCCC"> but we want to turn</font><font color="#E5E5E5"> it into a</font>

826
00:37:12,980 --> 00:37:18,590
primitive that allows<font color="#CCCCCC"> us</font><font color="#E5E5E5"> to write attack</font>

827
00:37:16,160 --> 00:37:22,009
a control data at<font color="#E5E5E5"> any address we</font><font color="#CCCCCC"> are</font>

828
00:37:18,590 --> 00:37:23,870
choosing and so of<font color="#E5E5E5"> course this is</font>

829
00:37:22,010 --> 00:37:25,190
<font color="#CCCCCC">something a lot of people I have tried</font>

830
00:37:23,870 --> 00:37:27,230
to do<font color="#E5E5E5"> with lot of vulnerabilities</font>

831
00:37:25,190 --> 00:37:30,740
there's a lot<font color="#E5E5E5"> of cool research about it</font>

832
00:37:27,230 --> 00:37:33,680
<font color="#E5E5E5">there's the different techniques and one</font>

833
00:37:30,740 --> 00:37:36,589
way<font color="#E5E5E5"> to do</font><font color="#CCCCCC"> it is basically you you want</font>

834
00:37:33,680 --> 00:37:39,710
<font color="#E5E5E5">to</font><font color="#CCCCCC"> manipulate the juleps email</font><font color="#E5E5E5"> log</font>

835
00:37:36,590 --> 00:37:42,560
<font color="#CCCCCC">metadata in a way that the</font><font color="#E5E5E5"> next card to</font>

836
00:37:39,710 --> 00:37:45,020
<font color="#E5E5E5">the memory allocator</font><font color="#CCCCCC"> will return an</font>

837
00:37:42,560 --> 00:37:47,570
attacker<font color="#E5E5E5"> controlled address this great</font>

838
00:37:45,020 --> 00:37:49,520
like if you can if you<font color="#CCCCCC"> can trick</font><font color="#E5E5E5"> may log</font>

839
00:37:47,570 --> 00:37:52,250
<font color="#E5E5E5">into allocating an attacker control to</font>

840
00:37:49,520 --> 00:37:53,660
<font color="#CCCCCC">truss</font><font color="#E5E5E5"> you</font><font color="#CCCCCC"> can trigger something</font><font color="#E5E5E5"> like hey</font>

841
00:37:52,250 --> 00:37:56,720
I'll send you a new packet of the

842
00:37:53,660 --> 00:37:59,450
<font color="#E5E5E5">following size and payload of that</font>

843
00:37:56,720 --> 00:38:01,220
packet will actually be allocated on an

844
00:37:59,450 --> 00:38:03,410
attacker<font color="#CCCCCC"> controlled address so we get an</font>

845
00:38:01,220 --> 00:38:06,080
arbitrary right<font color="#E5E5E5"> and there are techniques</font>

846
00:38:03,410 --> 00:38:08,029
to<font color="#E5E5E5"> do this against or every one of</font><font color="#CCCCCC"> G lip</font>

847
00:38:06,080 --> 00:38:10,850
seal they called<font color="#CCCCCC"> house of</font><font color="#E5E5E5"> spirit house</font>

848
00:38:08,030 --> 00:38:12,510
of law different complexity might not

849
00:38:10,850 --> 00:38:14,940
work always

850
00:38:12,510 --> 00:38:16,800
ever<font color="#E5E5E5"> if you have</font><font color="#CCCCCC"> a recent</font><font color="#E5E5E5"> version</font><font color="#CCCCCC"> of</font><font color="#E5E5E5"> G</font>

851
00:38:14,940 --> 00:38:20,460
<font color="#CCCCCC">Lipsy like a modern one from the last</font>

852
00:38:16,800 --> 00:38:22,350
two years<font color="#E5E5E5"> doing this or tricking G</font><font color="#CCCCCC"> Lipsy</font>

853
00:38:20,460 --> 00:38:24,270
into returning<font color="#CCCCCC"> an arbitrary</font><font color="#E5E5E5"> attacker</font>

854
00:38:22,350 --> 00:38:26,400
<font color="#CCCCCC">control address</font><font color="#E5E5E5"> it's actually much</font>

855
00:38:24,270 --> 00:38:28,080
easier<font color="#CCCCCC"> and there's a new approach how to</font>

856
00:38:26,400 --> 00:38:30,840
do this it's called<font color="#E5E5E5"> T cache poisoning</font>

857
00:38:28,080 --> 00:38:34,740
<font color="#E5E5E5">and it</font><font color="#CCCCCC"> worked</font><font color="#E5E5E5"> thanks</font><font color="#CCCCCC"> to some awesome</font>

858
00:38:30,840 --> 00:38:37,950
feature called<font color="#E5E5E5"> T cache so T cache is a</font>

859
00:38:34,740 --> 00:38:40,200
threat local cache cache for<font color="#E5E5E5"> recently</font>

860
00:38:37,950 --> 00:38:42,509
used memory chunks<font color="#E5E5E5"> it was introduced in</font>

861
00:38:40,200 --> 00:38:44,640
some recently<font color="#CCCCCC"> Lipsy version and you</font><font color="#E5E5E5"> can</font>

862
00:38:42,510 --> 00:38:46,200
see this<font color="#E5E5E5"> are in my slides a link to a</font>

863
00:38:44,640 --> 00:38:50,629
blog<font color="#CCCCCC"> post that</font><font color="#E5E5E5"> goes into much more</font>

864
00:38:46,200 --> 00:38:54,089
detail<font color="#E5E5E5"> about the mechanism but basically</font>

865
00:38:50,630 --> 00:38:55,800
what<font color="#E5E5E5"> happens here is it tries to speed</font>

866
00:38:54,090 --> 00:38:58,110
up all these memory allocations and

867
00:38:55,800 --> 00:39:01,620
<font color="#E5E5E5">freeze by having like another cache</font>

868
00:38:58,110 --> 00:39:03,990
layer where<font color="#CCCCCC"> the last seven chunks for</font>

869
00:39:01,620 --> 00:39:06,540
<font color="#E5E5E5">every chunk size are stored in a single</font>

870
00:39:03,990 --> 00:39:09,629
<font color="#E5E5E5">linked list and it's the last in first</font>

871
00:39:06,540 --> 00:39:11,910
out data<font color="#E5E5E5"> structure so the last chunk of</font>

872
00:39:09,630 --> 00:39:13,860
<font color="#E5E5E5">a specific size you freed will be the</font>

873
00:39:11,910 --> 00:39:17,580
first one you<font color="#CCCCCC"> get back when you allocate</font>

874
00:39:13,860 --> 00:39:19,800
<font color="#E5E5E5">the exact same size again and the super</font>

875
00:39:17,580 --> 00:39:21,750
interesting property or depressing

876
00:39:19,800 --> 00:39:24,480
<font color="#E5E5E5">property depending on how you see it is</font>

877
00:39:21,750 --> 00:39:27,630
that T cache doesn't<font color="#E5E5E5"> have any integrity</font>

878
00:39:24,480 --> 00:39:30,390
<font color="#E5E5E5">checks like normally what</font><font color="#CCCCCC"> gilepsy mailer</font>

879
00:39:27,630 --> 00:39:32,820
tries to do if it follows pointer<font color="#E5E5E5"> orders</font>

880
00:39:30,390 --> 00:39:34,650
like<font color="#E5E5E5"> these</font><font color="#CCCCCC"> metadata operations</font><font color="#E5E5E5"> it will</font>

881
00:39:32,820 --> 00:39:37,380
actually check that<font color="#CCCCCC"> this value it</font>

882
00:39:34,650 --> 00:39:39,750
operates on makes some sense<font color="#E5E5E5"> and it was</font>

883
00:39:37,380 --> 00:39:43,410
<font color="#E5E5E5">added after everyone noticed</font><font color="#CCCCCC"> hade his</font>

884
00:39:39,750 --> 00:39:45,510
heap exploits are pretty trivial to do<font color="#E5E5E5"> T</font>

885
00:39:43,410 --> 00:39:47,310
cache which was<font color="#E5E5E5"> added two years ago</font>

886
00:39:45,510 --> 00:39:50,070
basically<font color="#CCCCCC"> it</font><font color="#E5E5E5"> doesn't have anything of</font>

887
00:39:47,310 --> 00:39:52,350
that<font color="#E5E5E5"> so if you have a recent</font><font color="#CCCCCC"> G Lipsy and</font>

888
00:39:50,070 --> 00:39:55,200
you have T cache<font color="#E5E5E5"> you can</font><font color="#CCCCCC"> actually easily</font>

889
00:39:52,350 --> 00:39:59,040
exploit most of most heap corruption

890
00:39:55,200 --> 00:40:02,129
vulnerabilities so super quick<font color="#E5E5E5"> intro how</font>

891
00:39:59,040 --> 00:40:04,980
<font color="#CCCCCC">T cache works</font><font color="#E5E5E5"> imagine you have this T</font>

892
00:40:02,130 --> 00:40:08,700
cache data pointer at the<font color="#E5E5E5"> bottom of the</font>

893
00:40:04,980 --> 00:40:11,820
slide<font color="#CCCCCC"> it links to a chunky chunky links</font>

894
00:40:08,700 --> 00:40:15,330
<font color="#E5E5E5">to D trunk D links to e so this is the T</font>

895
00:40:11,820 --> 00:40:17,040
cache linked list data structure<font color="#CCCCCC"> how</font>

896
00:40:15,330 --> 00:40:18,720
<font color="#E5E5E5">it's dotted memory you see</font><font color="#CCCCCC"> on the right</font>

897
00:40:17,040 --> 00:40:20,670
side<font color="#CCCCCC"> of the slice so you have four</font>

898
00:40:18,720 --> 00:40:23,189
<font color="#CCCCCC">mellotron</font><font color="#E5E5E5"> you have this chunk size and</font>

899
00:40:20,670 --> 00:40:25,610
then<font color="#E5E5E5"> you have a</font><font color="#CCCCCC"> T cache next pointer</font>

900
00:40:23,190 --> 00:40:28,310
that points to the<font color="#E5E5E5"> next</font>

901
00:40:25,610 --> 00:40:32,210
in that linked list<font color="#E5E5E5"> and if you allocate</font>

902
00:40:28,310 --> 00:40:34,520
<font color="#CCCCCC">something</font><font color="#E5E5E5"> so</font><font color="#CCCCCC"> your allocate a buffer with</font>

903
00:40:32,210 --> 00:40:36,710
<font color="#CCCCCC">the correct</font><font color="#E5E5E5"> size it will allocate the</font>

904
00:40:34,520 --> 00:40:40,340
buffer<font color="#E5E5E5"> B</font><font color="#CCCCCC"> ID will return the address of</font>

905
00:40:36,710 --> 00:40:43,070
the B buffer<font color="#E5E5E5"> and the linked list will</font>

906
00:40:40,340 --> 00:40:45,650
change so now<font color="#CCCCCC"> the point that points to D</font>

907
00:40:43,070 --> 00:40:46,070
instead<font color="#E5E5E5"> of B and if we do it another</font>

908
00:40:45,650 --> 00:40:48,410
time

909
00:40:46,070 --> 00:40:50,570
<font color="#CCCCCC">then of course we get D back and now it</font>

910
00:40:48,410 --> 00:40:53,870
points to e so pretty simple<font color="#E5E5E5"> nothing</font>

911
00:40:50,570 --> 00:40:56,180
spectacular<font color="#CCCCCC"> so what happens if you do T</font>

912
00:40:53,870 --> 00:41:00,259
cache poisoning<font color="#CCCCCC"> so now we have a heap as</font>

913
00:40:56,180 --> 00:41:02,240
<font color="#CCCCCC">a base buffer overflow of the chunk a we</font>

914
00:41:00,260 --> 00:41:05,780
trigger<font color="#CCCCCC"> the overflow so we can corrupt</font>

915
00:41:02,240 --> 00:41:09,890
<font color="#E5E5E5">chunk size and T cache next pointer of B</font>

916
00:41:05,780 --> 00:41:12,860
and traditionally<font color="#CCCCCC"> you actually needed to</font>

917
00:41:09,890 --> 00:41:15,560
have some some approach to like<font color="#CCCCCC"> right</font>

918
00:41:12,860 --> 00:41:18,530
correct<font color="#E5E5E5"> chunk size in there and make</font>

919
00:41:15,560 --> 00:41:21,290
<font color="#CCCCCC">address you right into</font><font color="#E5E5E5"> T cache next or</font>

920
00:41:18,530 --> 00:41:23,480
into the next pointer to look somewhat

921
00:41:21,290 --> 00:41:25,610
realistically for T cash you don't<font color="#E5E5E5"> need</font>

922
00:41:23,480 --> 00:41:28,610
that<font color="#E5E5E5"> you can just trash chunk size with</font>

923
00:41:25,610 --> 00:41:30,650
any value<font color="#CCCCCC"> you</font><font color="#E5E5E5"> want and then you put the</font>

924
00:41:28,610 --> 00:41:32,870
your target address<font color="#E5E5E5"> the target address</font>

925
00:41:30,650 --> 00:41:36,080
of your arbitrary right into the T cache

926
00:41:32,870 --> 00:41:38,660
next pointer<font color="#E5E5E5"> so this is how it looks</font>

927
00:41:36,080 --> 00:41:41,029
<font color="#E5E5E5">like afterwards and of course our first</font>

928
00:41:38,660 --> 00:41:43,609
<font color="#E5E5E5">allocation still correctly returns the</font>

929
00:41:41,030 --> 00:41:45,830
address<font color="#E5E5E5"> of B but then our second</font>

930
00:41:43,610 --> 00:41:47,990
allocation<font color="#CCCCCC"> returns to address we</font>

931
00:41:45,830 --> 00:41:53,509
<font color="#CCCCCC">overworld so now we have this</font><font color="#E5E5E5"> arbitrary</font>

932
00:41:47,990 --> 00:41:54,979
right primitive after a heap overflow we

933
00:41:53,510 --> 00:41:57,110
have an arbitrary<font color="#CCCCCC"> right and we have an</font>

934
00:41:54,980 --> 00:41:58,850
info leak how to get women<font color="#CCCCCC"> correct huge</font>

935
00:41:57,110 --> 00:42:02,000
none of this<font color="#E5E5E5"> and if you ever played a</font>

936
00:41:58,850 --> 00:42:04,009
CTF<font color="#E5E5E5"> this is pretty</font><font color="#CCCCCC"> much</font><font color="#E5E5E5"> the way most</font>

937
00:42:02,000 --> 00:42:06,560
people<font color="#CCCCCC"> do it it's quick and dirty but it</font>

938
00:42:04,010 --> 00:42:09,050
works for us<font color="#E5E5E5"> so there's a function</font>

939
00:42:06,560 --> 00:42:14,450
pointer inside<font color="#E5E5E5"> G</font><font color="#CCCCCC"> Lipsy which is called</font>

940
00:42:09,050 --> 00:42:18,320
<font color="#CCCCCC">anise corners go free hook and</font><font color="#E5E5E5"> this hook</font>

941
00:42:14,450 --> 00:42:21,290
pointer is called<font color="#E5E5E5"> every</font><font color="#CCCCCC"> time</font><font color="#E5E5E5"> the</font><font color="#CCCCCC"> gilepsy</font>

942
00:42:18,320 --> 00:42:23,750
<font color="#E5E5E5">free function is called if we</font><font color="#CCCCCC"> overwrite</font>

943
00:42:21,290 --> 00:42:26,000
that<font color="#CCCCCC"> pointer with a point with the</font>

944
00:42:23,750 --> 00:42:27,560
<font color="#CCCCCC">address of the system function so the</font>

945
00:42:26,000 --> 00:42:30,200
system function is<font color="#E5E5E5"> do one that executes</font>

946
00:42:27,560 --> 00:42:32,990
comments<font color="#E5E5E5"> then every time when a memory</font>

947
00:42:30,200 --> 00:42:35,299
<font color="#CCCCCC">address is freed</font><font color="#E5E5E5"> gilepsy will actually</font>

948
00:42:32,990 --> 00:42:38,609
call system with the first<font color="#E5E5E5"> argument</font>

949
00:42:35,300 --> 00:42:41,549
<font color="#E5E5E5">being the address of</font><font color="#CCCCCC"> that</font><font color="#E5E5E5"> memory</font><font color="#CCCCCC"> address</font>

950
00:42:38,609 --> 00:42:43,769
and if you are able<font color="#CCCCCC"> to</font><font color="#E5E5E5"> trigger a free</font>

951
00:42:41,549 --> 00:42:46,200
often attacker control chunk this

952
00:42:43,769 --> 00:42:50,729
<font color="#E5E5E5">immediately</font><font color="#CCCCCC"> gives you code execution or</font>

953
00:42:46,200 --> 00:42:54,660
command execution<font color="#E5E5E5"> so putting the whole</font>

954
00:42:50,730 --> 00:42:56,130
chain together<font color="#CCCCCC"> you basically start in an</font>

955
00:42:54,660 --> 00:42:57,690
<font color="#CCCCCC">internetwork you have a system view</font>

956
00:42:56,130 --> 00:43:00,420
<font color="#CCCCCC">network client</font><font color="#E5E5E5"> that you want to exploit</font>

957
00:42:57,690 --> 00:43:02,819
you trigger the<font color="#E5E5E5"> DHCP version six</font>

958
00:43:00,420 --> 00:43:05,549
functionality by sending the<font color="#E5E5E5"> right route</font>

959
00:43:02,819 --> 00:43:08,009
advertisement<font color="#E5E5E5"> package then you use this</font>

960
00:43:05,549 --> 00:43:10,799
option<font color="#CCCCCC"> size out of boundary to leak a</font>

961
00:43:08,009 --> 00:43:12,930
pointer to<font color="#CCCCCC"> G Lipsy calculate</font><font color="#E5E5E5"> the</font><font color="#CCCCCC"> Lipsy</font>

962
00:43:10,799 --> 00:43:14,999
base address you trigger the heap

963
00:43:12,930 --> 00:43:16,950
<font color="#E5E5E5">override have formed</font><font color="#CCCCCC"> this T cache</font>

964
00:43:14,999 --> 00:43:19,890
poisoning<font color="#CCCCCC"> to turn it into an arbitrary</font>

965
00:43:16,950 --> 00:43:22,259
<font color="#E5E5E5">right you can allocate a fake chunk at</font>

966
00:43:19,890 --> 00:43:24,749
address of free hook and write an

967
00:43:22,259 --> 00:43:26,910
address of system to it and then if we

968
00:43:24,749 --> 00:43:29,038
can trigger a free of any chunk where we

969
00:43:26,910 --> 00:43:32,879
can control the payload you<font color="#CCCCCC"> get a shell</font>

970
00:43:29,039 --> 00:43:38,069
in<font color="#E5E5E5"> it so I have a super quick demo to</font>

971
00:43:32,880 --> 00:43:42,170
<font color="#CCCCCC">see</font><font color="#E5E5E5"> how this looks</font><font color="#CCCCCC"> like if it works</font><font color="#E5E5E5"> it's</font>

972
00:43:38,069 --> 00:43:44,940
<font color="#E5E5E5">a recorded time also</font><font color="#CCCCCC"> i'm fieldworks</font>

973
00:43:42,170 --> 00:43:49,529
you can<font color="#E5E5E5"> see basically I started to</font>

974
00:43:44,940 --> 00:43:51,809
exploit and it starts by<font color="#CCCCCC"> creating</font><font color="#E5E5E5"> a DHCP</font>

975
00:43:49,529 --> 00:43:53,460
version<font color="#E5E5E5"> 6 server and it will ignore the</font>

976
00:43:51,809 --> 00:43:56,069
first couple<font color="#E5E5E5"> of packets</font><font color="#CCCCCC"> that get from</font>

977
00:43:53,460 --> 00:43:58,529
system D just<font color="#E5E5E5"> to make sure the heap is</font>

978
00:43:56,069 --> 00:44:02,880
<font color="#E5E5E5">like in</font><font color="#CCCCCC"> a reasonably state and we</font><font color="#E5E5E5"> don't</font>

979
00:43:58,529 --> 00:44:05,940
get into like any waste conditions so

980
00:44:02,880 --> 00:44:07,739
then what after decides to actually

981
00:44:05,940 --> 00:44:10,440
start to exploit what you can see is

982
00:44:07,739 --> 00:44:12,869
some some<font color="#E5E5E5"> DHCP</font><font color="#CCCCCC"> version six packets being</font>

983
00:44:10,440 --> 00:44:15,960
exchanged<font color="#E5E5E5"> and which we got the actual</font>

984
00:44:12,869 --> 00:44:18,450
info<font color="#CCCCCC"> leaked and you can see this got</font>

985
00:44:15,960 --> 00:44:20,819
server ID right in the middle<font color="#CCCCCC"> where we</font>

986
00:44:18,450 --> 00:44:25,169
got a server ID that contains a memory

987
00:44:20,819 --> 00:44:28,410
<font color="#E5E5E5">leak</font><font color="#CCCCCC"> and out</font><font color="#E5E5E5"> of that leaked server we</font>

988
00:44:25,170 --> 00:44:31,349
<font color="#CCCCCC">can read out</font><font color="#E5E5E5"> to chunk header and</font><font color="#CCCCCC"> you see</font>

989
00:44:28,410 --> 00:44:33,239
the chunk header basically has this the

990
00:44:31,349 --> 00:44:36,960
size value<font color="#CCCCCC"> and then it has like these</font>

991
00:44:33,239 --> 00:44:38,430
two pointers<font color="#E5E5E5"> at the end and these are</font>

992
00:44:36,960 --> 00:44:40,380
the pointers to<font color="#E5E5E5"> Lipsy</font>

993
00:44:38,430 --> 00:44:43,200
based on these two pointers we can

994
00:44:40,380 --> 00:44:46,019
calculate<font color="#CCCCCC"> elipse ebay stress which also</font>

995
00:44:43,200 --> 00:44:48,899
gives<font color="#E5E5E5"> us the</font><font color="#CCCCCC"> address of free hook and</font>

996
00:44:46,019 --> 00:44:51,118
the system function so we have this info

997
00:44:48,900 --> 00:44:52,470
leak we have everything ready<font color="#E5E5E5"> to</font><font color="#CCCCCC"> go</font><font color="#E5E5E5"> so</font>

998
00:44:51,119 --> 00:44:56,540
we<font color="#E5E5E5"> can trigger the</font><font color="#CCCCCC"> T cache</font>

999
00:44:52,470 --> 00:44:59,609
poisoning and hope that<font color="#CCCCCC"> had actually</font>

1000
00:44:56,540 --> 00:45:01,950
executed our commands<font color="#CCCCCC"> at yet</font><font color="#E5E5E5"> so they</font>

1001
00:44:59,609 --> 00:45:04,348
<font color="#CCCCCC">exploit finished now I try to connect</font><font color="#E5E5E5"> to</font>

1002
00:45:01,950 --> 00:45:06,779
a part on the system<font color="#CCCCCC"> de</font><font color="#E5E5E5"> system and you</font>

1003
00:45:04,349 --> 00:45:09,180
can<font color="#E5E5E5"> see I</font><font color="#CCCCCC"> get a shell</font><font color="#E5E5E5"> it's running a</font>

1004
00:45:06,780 --> 00:45:11,310
<font color="#E5E5E5">system D Network</font><font color="#CCCCCC"> so this is the user</font>

1005
00:45:09,180 --> 00:45:14,368
system<font color="#CCCCCC"> D Network runs</font><font color="#E5E5E5"> so it's not a</font><font color="#CCCCCC"> root</font>

1006
00:45:11,310 --> 00:45:16,349
<font color="#E5E5E5">it's not a root exploit you don't get</font>

1007
00:45:14,369 --> 00:45:18,119
root privileges immediately<font color="#E5E5E5"> but your</font>

1008
00:45:16,349 --> 00:45:21,900
honor this is a system D<font color="#CCCCCC"> network user</font>

1009
00:45:18,119 --> 00:45:24,030
which<font color="#CCCCCC"> is</font><font color="#E5E5E5"> it slightly sandbox but still</font>

1010
00:45:21,900 --> 00:45:30,090
<font color="#E5E5E5">pretty powerful so it gives you like a</font>

1011
00:45:24,030 --> 00:45:35,280
good<font color="#E5E5E5"> access</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> the system</font><font color="#CCCCCC"> okay and</font><font color="#E5E5E5"> with</font>

1012
00:45:30,090 --> 00:45:38,099
that it's basically<font color="#E5E5E5"> I just</font><font color="#CCCCCC"> have a quick</font>

1013
00:45:35,280 --> 00:45:40,710
conclusion<font color="#E5E5E5"> to this whole</font><font color="#CCCCCC"> presentation so</font>

1014
00:45:38,099 --> 00:45:43,080
if you look at the HTTP<font color="#E5E5E5"> at first glance</font>

1015
00:45:40,710 --> 00:45:44,550
it's pretty simple<font color="#E5E5E5"> but if you look at</font>

1016
00:45:43,080 --> 00:45:46,410
how it's actually implemented you see

1017
00:45:44,550 --> 00:45:48,690
reality<font color="#E5E5E5"> is</font><font color="#CCCCCC"> different as it's off the</font>

1018
00:45:46,410 --> 00:45:50,549
case so<font color="#E5E5E5"> even if it looks like a small</font>

1019
00:45:48,690 --> 00:45:53,760
attack surface and no one is<font color="#CCCCCC"> going to</font>

1020
00:45:50,550 --> 00:45:56,430
have exploitable bucks in DHCP I

1021
00:45:53,760 --> 00:45:59,070
actually found five of them in a

1022
00:45:56,430 --> 00:46:00,750
relatively<font color="#E5E5E5"> short time frame it's one of</font>

1023
00:45:59,070 --> 00:46:03,089
the<font color="#CCCCCC"> cases where you have a functionality</font>

1024
00:46:00,750 --> 00:46:04,920
<font color="#E5E5E5">that no one uses like DHCP version</font><font color="#CCCCCC"> six</font>

1025
00:46:03,089 --> 00:46:08,400
<font color="#E5E5E5">but all the implementations still</font>

1026
00:46:04,920 --> 00:46:11,220
heavily<font color="#E5E5E5"> supports it and of</font><font color="#CCCCCC"> course as</font>

1027
00:46:08,400 --> 00:46:13,680
always<font color="#CCCCCC"> you have</font><font color="#E5E5E5"> this just this problem</font>

1028
00:46:11,220 --> 00:46:15,450
of having backwards compatibility<font color="#CCCCCC"> that</font>

1029
00:46:13,680 --> 00:46:17,490
actually increases<font color="#E5E5E5"> complexity of the</font>

1030
00:46:15,450 --> 00:46:19,799
system and<font color="#E5E5E5"> heavily increases the attack</font>

1031
00:46:17,490 --> 00:46:22,140
<font color="#E5E5E5">surface so this was the the the shell</font>

1032
00:46:19,800 --> 00:46:23,910
injection<font color="#E5E5E5"> vulnerability you saw</font><font color="#CCCCCC"> we're</font>

1033
00:46:22,140 --> 00:46:26,310
<font color="#E5E5E5">basically just for</font><font color="#CCCCCC"> reasons</font><font color="#E5E5E5"> of backwards</font>

1034
00:46:23,910 --> 00:46:30,240
<font color="#CCCCCC">compatibility</font><font color="#E5E5E5"> we add these weird</font>

1035
00:46:26,310 --> 00:46:32,400
features that<font color="#CCCCCC"> make</font><font color="#E5E5E5"> stuff exploitable and</font>

1036
00:46:30,240 --> 00:46:33,990
finally if you have a sufficient

1037
00:46:32,400 --> 00:46:35,970
powerful memory<font color="#CCCCCC"> corruption like a heap</font>

1038
00:46:33,990 --> 00:46:37,649
<font color="#E5E5E5">order of</font><font color="#CCCCCC"> Bounce</font><font color="#E5E5E5"> ride and an info leak</font>

1039
00:46:35,970 --> 00:46:40,049
you can still turn them to<font color="#CCCCCC"> RCE</font>

1040
00:46:37,650 --> 00:46:41,640
so some people argue<font color="#E5E5E5"> hang a lot of these</font>

1041
00:46:40,050 --> 00:46:43,440
<font color="#E5E5E5">bugs are not exploitable but if you</font>

1042
00:46:41,640 --> 00:46:45,650
<font color="#CCCCCC">actually invest</font><font color="#E5E5E5"> a time you can still do</font>

1043
00:46:43,440 --> 00:46:47,940
<font color="#E5E5E5">this and catch hell out of these bugs</font>

1044
00:46:45,650 --> 00:46:49,980
and of course for<font color="#E5E5E5"> that reason please</font>

1045
00:46:47,940 --> 00:46:52,380
<font color="#E5E5E5">don't write new network</font><font color="#CCCCCC"> daemons and</font><font color="#E5E5E5"> see</font>

1046
00:46:49,980 --> 00:46:54,990
I really like system<font color="#E5E5E5"> DS approach your</font>

1047
00:46:52,380 --> 00:46:57,540
idea of<font color="#E5E5E5"> implementing a lot</font><font color="#CCCCCC"> of this stuff</font>

1048
00:46:54,990 --> 00:46:59,939
from<font color="#CCCCCC"> scratch true like we move technical</font>

1049
00:46:57,540 --> 00:47:01,690
depth<font color="#E5E5E5"> but if you have the engineering</font>

1050
00:46:59,940 --> 00:47:04,630
head<font color="#E5E5E5"> counter actually</font>

1051
00:47:01,690 --> 00:47:06,400
<font color="#E5E5E5">do implemented after stuff you shouldn't</font>

1052
00:47:04,630 --> 00:47:08,110
write it in<font color="#E5E5E5"> C you should take</font><font color="#CCCCCC"> your</font>

1053
00:47:06,400 --> 00:47:10,600
engineer<font color="#CCCCCC"> and let them write it in</font><font color="#E5E5E5"> a</font>

1054
00:47:08,110 --> 00:47:13,540
<font color="#E5E5E5">memory save language you can use golang</font>

1055
00:47:10,600 --> 00:47:15,160
or last fight for something<font color="#E5E5E5"> like</font><font color="#CCCCCC"> dhcp</font>

1056
00:47:13,540 --> 00:47:17,500
which is not really performance critical

1057
00:47:15,160 --> 00:47:19,870
you could even write<font color="#CCCCCC"> it in</font><font color="#E5E5E5"> - and you</font>

1058
00:47:17,500 --> 00:47:23,290
wouldn't see like a<font color="#E5E5E5"> performance</font><font color="#CCCCCC"> d</font>

1059
00:47:19,870 --> 00:47:25,330
creation of your system<font color="#E5E5E5"> so yeah if you</font>

1060
00:47:23,290 --> 00:47:27,400
take one<font color="#E5E5E5"> one sentence away from this</font>

1061
00:47:25,330 --> 00:47:29,950
<font color="#E5E5E5">presentation</font><font color="#CCCCCC"> let it be please don't</font>

1062
00:47:27,400 --> 00:47:32,040
write new<font color="#E5E5E5"> network demons in</font><font color="#CCCCCC"> C I</font><font color="#E5E5E5"> think</font>

1063
00:47:29,950 --> 00:47:36,629
they would make<font color="#CCCCCC"> everyone very</font><font color="#E5E5E5"> happy</font>

1064
00:47:32,040 --> 00:47:36,630
<font color="#E5E5E5">that's it thanks for</font><font color="#CCCCCC"> listening</font>

1065
00:47:36,840 --> 00:47:49,920
any questions from the<font color="#E5E5E5"> crowd anybody any</font>

1066
00:47:42,760 --> 00:47:54,190
questions going once going twice<font color="#CCCCCC"> and</font>

1067
00:47:49,920 --> 00:47:56,200
that would be it then thank you so much

1068
00:47:54,190 --> 00:47:59,910
Felix that was an<font color="#E5E5E5"> amazing presentation</font>

1069
00:47:56,200 --> 00:47:59,910
[Applause]

