1
00:00:24,320 --> 00:00:28,400
so<font color="#E5E5E5"> um we're going to be talking</font><font color="#CCCCCC"> about</font>

2
00:00:26,419 --> 00:00:30,710
<font color="#CCCCCC">today</font><font color="#E5E5E5"> is hunting for backdoors</font><font color="#CCCCCC"> an</font><font color="#E5E5E5"> IOT</font>

3
00:00:28,400 --> 00:00:32,540
firmware<font color="#CCCCCC"> the reason why we're ok was</font>

4
00:00:30,710 --> 00:00:34,340
saying unprecedented<font color="#E5E5E5"> scales</font><font color="#CCCCCC"> because the</font>

5
00:00:32,540 --> 00:00:37,040
past year we've been scraping as much

6
00:00:34,340 --> 00:00:39,199
firmware as we can get from<font color="#E5E5E5"> vendor</font>

7
00:00:37,040 --> 00:00:42,019
websites<font color="#CCCCCC"> we have 76</font><font color="#E5E5E5"> that we archive so</font>

8
00:00:39,199 --> 00:00:44,690
far close to a<font color="#CCCCCC"> quarter of</font><font color="#E5E5E5"> a million</font>

9
00:00:42,019 --> 00:00:48,979
firmware images we<font color="#CCCCCC"> processes information</font>

10
00:00:44,690 --> 00:00:51,079
<font color="#E5E5E5">all statically and automatically so the</font>

11
00:00:48,979 --> 00:00:54,019
process<font color="#CCCCCC"> for doing</font><font color="#E5E5E5"> automated analysis</font><font color="#CCCCCC"> for</font>

12
00:00:51,079 --> 00:00:56,390
looking<font color="#CCCCCC"> for vulnerabilities is a really</font>

13
00:00:54,019 --> 00:00:59,180
interesting and hard problem we've kind

14
00:00:56,390 --> 00:01:01,879
of<font color="#E5E5E5"> scoped that information or that that</font>

15
00:00:59,180 --> 00:01:03,439
<font color="#E5E5E5">sample set of particular problems down</font>

16
00:01:01,879 --> 00:01:06,439
to<font color="#E5E5E5"> backdoors for the purpose of this</font>

17
00:01:03,439 --> 00:01:09,320
talk<font color="#CCCCCC"> what will kind of get</font><font color="#E5E5E5"> into where we</font>

18
00:01:06,439 --> 00:01:11,119
<font color="#CCCCCC">are so finite</font><font color="#E5E5E5"> state is an IOT security</font>

19
00:01:09,320 --> 00:01:13,279
company focused on<font color="#E5E5E5"> building solutions</font>

20
00:01:11,119 --> 00:01:15,409
<font color="#E5E5E5">that allows organizations to more</font>

21
00:01:13,280 --> 00:01:17,210
confidently deploy IOT and manage them

22
00:01:15,409 --> 00:01:20,990
on<font color="#E5E5E5"> the networks and also understand the</font>

23
00:01:17,210 --> 00:01:22,429
risks associated with<font color="#CCCCCC"> doing so so in</font>

24
00:01:20,990 --> 00:01:24,048
order<font color="#E5E5E5"> to understand</font><font color="#CCCCCC"> how we can do</font>

25
00:01:22,430 --> 00:01:25,759
backdoor discovery with firmware

26
00:01:24,049 --> 00:01:28,909
analysis and<font color="#CCCCCC"> doing an automated</font><font color="#E5E5E5"> fashion</font>

27
00:01:25,759 --> 00:01:31,310
<font color="#E5E5E5">there's five steps that we need</font><font color="#CCCCCC"> to take</font>

28
00:01:28,909 --> 00:01:33,620
for this process<font color="#CCCCCC"> the very first one is</font>

29
00:01:31,310 --> 00:01:35,900
understanding<font color="#E5E5E5"> how much data we</font><font color="#CCCCCC"> actually</font>

30
00:01:33,620 --> 00:01:37,760
have to analyze and how much duplication

31
00:01:35,900 --> 00:01:39,590
<font color="#E5E5E5">is involved because it ends up</font><font color="#CCCCCC"> taking a</font>

32
00:01:37,760 --> 00:01:41,990
problem<font color="#CCCCCC"> that's really really large</font><font color="#E5E5E5"> and</font>

33
00:01:39,590 --> 00:01:44,630
<font color="#E5E5E5">making it to</font><font color="#CCCCCC"> a more tractable problem if</font>

34
00:01:41,990 --> 00:01:46,908
we can duplicate the amount of code

35
00:01:44,630 --> 00:01:48,740
that's reused in these<font color="#E5E5E5"> devices then</font>

36
00:01:46,909 --> 00:01:50,960
we'll talk about<font color="#E5E5E5"> six back doors that are</font>

37
00:01:48,740 --> 00:01:52,850
<font color="#CCCCCC">managed</font><font color="#E5E5E5"> and how they manifest in IOT</font>

38
00:01:50,960 --> 00:01:54,529
<font color="#E5E5E5">devices so we can get an</font><font color="#CCCCCC"> understanding</font>

39
00:01:52,850 --> 00:01:56,869
of what<font color="#E5E5E5"> we actually need</font><font color="#CCCCCC"> to hunt for the</font>

40
00:01:54,530 --> 00:01:59,240
types of signatures<font color="#CCCCCC"> that are typically</font>

41
00:01:56,869 --> 00:02:00,740
associated<font color="#CCCCCC"> with backdoors then we'll</font>

42
00:01:59,240 --> 00:02:02,420
talk<font color="#E5E5E5"> about the power of correlation and</font>

43
00:02:00,740 --> 00:02:04,789
how correlation<font color="#CCCCCC"> because of the massive</font>

44
00:02:02,420 --> 00:02:06,979
<font color="#CCCCCC">amount of duplication</font><font color="#E5E5E5"> can help us find</font>

45
00:02:04,790 --> 00:02:09,289
issues extremely quickly<font color="#E5E5E5"> and other</font>

46
00:02:06,979 --> 00:02:12,140
devices that<font color="#E5E5E5"> may you may not necessarily</font>

47
00:02:09,288 --> 00:02:14,059
link together then we'll<font color="#E5E5E5"> talk about how</font>

48
00:02:12,140 --> 00:02:18,529
<font color="#CCCCCC">we do source code analysis and binary</font>

49
00:02:14,060 --> 00:02:21,920
analysis so first let's go<font color="#E5E5E5"> into the</font>

50
00:02:18,530 --> 00:02:23,290
<font color="#E5E5E5">scale of data and duplication first of</font>

51
00:02:21,920 --> 00:02:26,629
<font color="#E5E5E5">all the</font><font color="#CCCCCC"> information that we've had</font>

52
00:02:23,290 --> 00:02:29,599
<font color="#E5E5E5">focuses on</font><font color="#CCCCCC"> a three-month study of close</font>

53
00:02:26,629 --> 00:02:31,489
to<font color="#CCCCCC"> 9,000 IOT products</font><font color="#E5E5E5"> um in</font><font color="#CCCCCC"> that we</font>

54
00:02:29,599 --> 00:02:33,950
<font color="#E5E5E5">verify</font><font color="#CCCCCC"> for IOT backdoors</font>

55
00:02:31,489 --> 00:02:37,129
<font color="#E5E5E5">the</font><font color="#CCCCCC"> specific trigger for that</font><font color="#E5E5E5"> backdoor</font>

56
00:02:33,950 --> 00:02:37,970
is unique in<font color="#CCCCCC"> 75 devices and then we have</font>

57
00:02:37,129 --> 00:02:41,570
11 that<font color="#CCCCCC"> will work</font>

58
00:02:37,970 --> 00:02:43,820
to verify<font color="#CCCCCC"> that</font><font color="#E5E5E5"> effect 107 devices so</font>

59
00:02:41,570 --> 00:02:45,320
that's between<font color="#E5E5E5"> one and two</font><font color="#CCCCCC"> percent</font><font color="#E5E5E5"> or so</font>

60
00:02:43,820 --> 00:02:48,560
the devices<font color="#CCCCCC"> that we actually analyzed</font>

61
00:02:45,320 --> 00:02:52,090
and<font color="#CCCCCC"> tagged</font><font color="#E5E5E5"> have potential</font><font color="#CCCCCC"> backdoors or</font>

62
00:02:48,560 --> 00:02:55,520
verified backdoors<font color="#E5E5E5"> so as I said before</font>

63
00:02:52,090 --> 00:02:57,830
<font color="#E5E5E5">electing firmware is a process that is</font>

64
00:02:55,520 --> 00:03:00,290
typically done<font color="#E5E5E5"> through scraping there's</font>

65
00:02:57,830 --> 00:03:01,790
<font color="#E5E5E5">a few ways</font><font color="#CCCCCC"> of</font><font color="#E5E5E5"> getting</font><font color="#CCCCCC"> from where one of</font>

66
00:03:00,290 --> 00:03:04,100
the things that we can end up doing<font color="#E5E5E5"> is</font>

67
00:03:01,790 --> 00:03:04,820
scraping<font color="#E5E5E5"> the web for as much fun as</font>

68
00:03:04,100 --> 00:03:06,620
possible

69
00:03:04,820 --> 00:03:10,220
partnering with<font color="#E5E5E5"> OEMs</font><font color="#CCCCCC"> to get that</font>

70
00:03:06,620 --> 00:03:12,470
firmware<font color="#E5E5E5"> removing firmware from a chip</font>

71
00:03:10,220 --> 00:03:15,320
<font color="#E5E5E5">on a device or metal man in the middling</font>

72
00:03:12,470 --> 00:03:17,270
<font color="#CCCCCC">and update process to acquire or that</font>

73
00:03:15,320 --> 00:03:20,000
information<font color="#CCCCCC"> is retrieved</font><font color="#E5E5E5"> from and trying</font>

74
00:03:17,270 --> 00:03:21,890
to retrieve it ourselves<font color="#E5E5E5"> I'm so through</font>

75
00:03:20,000 --> 00:03:23,240
scraping we've been over to<font color="#E5E5E5"> amass two</font>

76
00:03:21,890 --> 00:03:25,339
hundred and twenty four thousand<font color="#CCCCCC"> four</font>

77
00:03:23,240 --> 00:03:27,380
<font color="#E5E5E5">more</font><font color="#CCCCCC"> images and if we take just those</font>

78
00:03:25,340 --> 00:03:29,180
images that link to individual products

79
00:03:27,380 --> 00:03:31,670
during<font color="#E5E5E5"> the scraping thing is that</font>

80
00:03:29,180 --> 00:03:34,130
duplicates<font color="#E5E5E5"> about thirty percent or 70</font>

81
00:03:31,670 --> 00:03:35,600
<font color="#CCCCCC">percent</font><font color="#E5E5E5"> of the overall amount so it's a</font>

82
00:03:34,130 --> 00:03:39,019
<font color="#E5E5E5">hundred fifty</font><font color="#CCCCCC"> seven thousand unique</font>

83
00:03:35,600 --> 00:03:42,650
firmware images<font color="#CCCCCC"> this means</font><font color="#E5E5E5"> devices like</font>

84
00:03:39,020 --> 00:03:46,220
<font color="#CCCCCC">Polycom devices or</font><font color="#E5E5E5"> mikrotik devices that</font>

85
00:03:42,650 --> 00:03:48,380
have one firmware image<font color="#E5E5E5"> that links to a</font>

86
00:03:46,220 --> 00:03:50,810
<font color="#CCCCCC">lot of</font><font color="#E5E5E5"> different</font><font color="#CCCCCC"> devices could be the</font>

87
00:03:48,380 --> 00:03:53,720
reason for<font color="#E5E5E5"> having so much duplication in</font>

88
00:03:50,810 --> 00:03:55,459
the<font color="#E5E5E5"> firmware scraping phase is that when</font>

89
00:03:53,720 --> 00:03:57,500
we scrape we actually end up pulling

90
00:03:55,459 --> 00:03:59,980
that<font color="#CCCCCC"> information from each product</font><font color="#E5E5E5"> but</font>

91
00:03:57,500 --> 00:04:02,269
it all comes down<font color="#E5E5E5"> as one unique image</font>

92
00:03:59,980 --> 00:04:03,829
<font color="#CCCCCC">looking</font><font color="#E5E5E5"> over at how much we</font><font color="#CCCCCC"> actually</font>

93
00:04:02,269 --> 00:04:06,050
extract from<font color="#CCCCCC"> that from one hundred and</font>

94
00:04:03,830 --> 00:04:08,480
fifty seven thousand unique<font color="#E5E5E5"> there are</font>

95
00:04:06,050 --> 00:04:10,940
close<font color="#E5E5E5"> to 35 million successful file</font>

96
00:04:08,480 --> 00:04:12,820
extractions<font color="#CCCCCC"> that includes duplicates at</font>

97
00:04:10,940 --> 00:04:15,829
this point so we did you gave that<font color="#E5E5E5"> phase</font>

98
00:04:12,820 --> 00:04:17,719
but<font color="#CCCCCC"> the file analysis and metadata that</font>

99
00:04:15,830 --> 00:04:19,489
happens there<font color="#CCCCCC"> are like where that</font>

100
00:04:17,720 --> 00:04:22,280
information<font color="#E5E5E5"> actually came</font><font color="#CCCCCC"> from where it</font>

101
00:04:19,488 --> 00:04:23,780
exists in the file<font color="#E5E5E5"> system tree the mime</font>

102
00:04:22,280 --> 00:04:26,750
type is things<font color="#E5E5E5"> like that</font>

103
00:04:23,780 --> 00:04:28,729
the<font color="#E5E5E5"> file analysis ends up being startup</font>

104
00:04:26,750 --> 00:04:31,610
scripts like analysis to understand

105
00:04:28,729 --> 00:04:34,099
which projects or what<font color="#CCCCCC"> um executables</font>

106
00:04:31,610 --> 00:04:35,990
are<font color="#E5E5E5"> being kicked off we also look for</font>

107
00:04:34,100 --> 00:04:38,210
hashes<font color="#CCCCCC"> and crack those if possible</font>

108
00:04:35,990 --> 00:04:42,050
things like that<font color="#CCCCCC"> understand them default</font>

109
00:04:38,210 --> 00:04:46,370
credentials on systems so considering

110
00:04:42,050 --> 00:04:49,729
the 535<font color="#CCCCCC"> million</font><font color="#E5E5E5"> files that come out of</font>

111
00:04:46,370 --> 00:04:50,990
<font color="#E5E5E5">this</font><font color="#CCCCCC"> when</font><font color="#E5E5E5"> we look at files or select</font>

112
00:04:49,729 --> 00:04:51,830
file types that<font color="#E5E5E5"> have security</font>

113
00:04:50,990 --> 00:04:53,450
significance<font color="#E5E5E5"> to</font>

114
00:04:51,830 --> 00:04:55,460
<font color="#E5E5E5">these are the types of files we really</font>

115
00:04:53,450 --> 00:04:57,560
want to analyze when we look at

116
00:04:55,460 --> 00:05:00,320
executables there's about 1.4 million

117
00:04:57,560 --> 00:05:01,730
<font color="#E5E5E5">that come out of this only a hundred and</font>

118
00:05:00,320 --> 00:05:04,690
sixty thousand of those<font color="#E5E5E5"> are</font><font color="#CCCCCC"> actually</font>

119
00:05:01,730 --> 00:05:08,210
unique<font color="#E5E5E5"> meaning there's a massive amount</font>

120
00:05:04,690 --> 00:05:09,560
<font color="#E5E5E5">89.2% duplication</font><font color="#CCCCCC"> um in fact when I</font>

121
00:05:08,210 --> 00:05:11,510
first queried these numbers for<font color="#CCCCCC"> our</font>

122
00:05:09,560 --> 00:05:13,150
database<font color="#CCCCCC"> I</font><font color="#E5E5E5"> thought it was a complete</font>

123
00:05:11,510 --> 00:05:15,590
joke like<font color="#CCCCCC"> this had to have</font><font color="#E5E5E5"> been wrong</font>

124
00:05:13,150 --> 00:05:18,799
<font color="#CCCCCC">but we double and triple-check these</font>

125
00:05:15,590 --> 00:05:20,989
<font color="#E5E5E5">numbers and it's it's pretty insane how</font>

126
00:05:18,800 --> 00:05:23,210
much all this stuff ends up being<font color="#E5E5E5"> sort</font>

127
00:05:20,990 --> 00:05:25,850
of bloated so one of<font color="#E5E5E5"> the things we did</font>

128
00:05:23,210 --> 00:05:27,169
originally<font color="#CCCCCC"> to stress test</font><font color="#E5E5E5"> our system was</font>

129
00:05:25,850 --> 00:05:29,480
to get as much<font color="#E5E5E5"> room as quickly as</font>

130
00:05:27,170 --> 00:05:31,190
possible<font color="#CCCCCC"> so we downloaded as much DD</font>

131
00:05:29,480 --> 00:05:33,560
<font color="#E5E5E5">work as possible because it has so much</font>

132
00:05:31,190 --> 00:05:35,000
firmware available<font color="#CCCCCC"> and we push that</font>

133
00:05:33,560 --> 00:05:37,610
through the<font color="#E5E5E5"> system to make sure that we</font>

134
00:05:35,000 --> 00:05:41,030
can scale<font color="#CCCCCC"> to a high number even taking</font>

135
00:05:37,610 --> 00:05:43,400
<font color="#E5E5E5">into account that DD work is</font><font color="#CCCCCC"> only 5% of</font>

136
00:05:41,030 --> 00:05:45,200
<font color="#E5E5E5">the total</font><font color="#CCCCCC"> offline file modes in this it</font>

137
00:05:43,400 --> 00:05:48,620
doesn't<font color="#E5E5E5"> affect these numbers that much</font>

138
00:05:45,200 --> 00:05:52,159
<font color="#E5E5E5">meaning if we select individual devices</font>

139
00:05:48,620 --> 00:05:53,300
<font color="#E5E5E5">device types or manufacturers it ends up</font>

140
00:05:52,160 --> 00:05:56,210
being about the<font color="#E5E5E5"> same</font><font color="#CCCCCC"> amount of</font>

141
00:05:53,300 --> 00:05:57,770
<font color="#E5E5E5">duplication so if we can</font><font color="#CCCCCC"> sip all of the</font>

142
00:05:56,210 --> 00:05:59,090
<font color="#CCCCCC">executables shared</font><font color="#E5E5E5"> libraries shell</font>

143
00:05:57,770 --> 00:06:01,219
scripts things like that<font color="#E5E5E5"> are important</font>

144
00:05:59,090 --> 00:06:01,760
to<font color="#E5E5E5"> us</font><font color="#CCCCCC"> and the amount of deduplicated</font>

145
00:06:01,220 --> 00:06:04,910
files

146
00:06:01,760 --> 00:06:08,080
it's about<font color="#CCCCCC"> 91.7</font><font color="#E5E5E5"> duplication percent</font>

147
00:06:04,910 --> 00:06:11,870
duplication which means if we're doing

148
00:06:08,080 --> 00:06:13,280
<font color="#E5E5E5">analysis every file that we</font><font color="#CCCCCC"> analyze for</font>

149
00:06:11,870 --> 00:06:15,740
the most part is<font color="#E5E5E5"> found in many</font><font color="#CCCCCC"> other</font>

150
00:06:13,280 --> 00:06:19,159
<font color="#E5E5E5">devices so we can kind of essentially</font>

151
00:06:15,740 --> 00:06:20,450
explode that amount and have<font color="#E5E5E5"> to we get a</font>

152
00:06:19,160 --> 00:06:22,340
lot more bang<font color="#CCCCCC"> for our buck when you do</font>

153
00:06:20,450 --> 00:06:25,880
automated<font color="#E5E5E5"> analysis and we have so much</font>

154
00:06:22,340 --> 00:06:27,590
duplication so you might<font color="#E5E5E5"> be asking what</font>

155
00:06:25,880 --> 00:06:30,050
<font color="#CCCCCC">are the other 30 million file types</font>

156
00:06:27,590 --> 00:06:32,060
right<font color="#E5E5E5"> the other file types are things</font>

157
00:06:30,050 --> 00:06:34,400
like certificates<font color="#E5E5E5"> and kernel objects</font>

158
00:06:32,060 --> 00:06:36,320
random scripts like<font color="#CCCCCC"> Lulla</font><font color="#E5E5E5"> and</font><font color="#CCCCCC"> perl that</font>

159
00:06:34,400 --> 00:06:39,140
might be on the system and massive

160
00:06:36,320 --> 00:06:41,750
<font color="#CCCCCC">amounts of web content depending</font><font color="#E5E5E5"> on the</font>

161
00:06:39,140 --> 00:06:44,330
<font color="#E5E5E5">IOT device they have</font><font color="#CCCCCC"> a web interface</font><font color="#E5E5E5"> and</font>

162
00:06:41,750 --> 00:06:46,550
<font color="#CCCCCC">that generates</font><font color="#E5E5E5"> that song of content that</font>

163
00:06:44,330 --> 00:06:48,219
isn't<font color="#E5E5E5"> just</font><font color="#CCCCCC"> isn't really interesting for</font>

164
00:06:46,550 --> 00:06:50,960
<font color="#CCCCCC">us</font><font color="#E5E5E5"> to analyze like images and</font><font color="#CCCCCC"> whatnot</font>

165
00:06:48,220 --> 00:06:53,600
<font color="#E5E5E5">there are certain</font><font color="#CCCCCC"> things like</font><font color="#E5E5E5"> HTML being</font>

166
00:06:50,960 --> 00:06:56,180
able to<font color="#E5E5E5"> carve out certain types are</font>

167
00:06:53,600 --> 00:06:58,700
certain scripts<font color="#CCCCCC"> that information lets us</font>

168
00:06:56,180 --> 00:07:02,630
know how to<font color="#E5E5E5"> interface with back-end CGI</font>

169
00:06:58,700 --> 00:07:04,219
<font color="#E5E5E5">scripts or binaries to elicit certain</font>

170
00:07:02,630 --> 00:07:05,600
types of<font color="#CCCCCC"> information into</font><font color="#E5E5E5"> the system</font>

171
00:07:04,220 --> 00:07:06,860
right<font color="#E5E5E5"> so</font>

172
00:07:05,600 --> 00:07:08,930
there are certainly other types<font color="#E5E5E5"> that are</font>

173
00:07:06,860 --> 00:07:10,370
actually interesting<font color="#CCCCCC"> to us</font><font color="#E5E5E5"> but most of</font>

174
00:07:08,930 --> 00:07:12,790
them we<font color="#E5E5E5"> don't actually have</font><font color="#CCCCCC"> to analyze</font>

175
00:07:10,370 --> 00:07:17,750
<font color="#E5E5E5">because they don't really play a role</font><font color="#CCCCCC"> in</font>

176
00:07:12,790 --> 00:07:19,700
<font color="#E5E5E5">security so let's take a look at how six</font>

177
00:07:17,750 --> 00:07:21,890
different<font color="#CCCCCC"> backdoors have been found in</font>

178
00:07:19,700 --> 00:07:23,780
IOT<font color="#E5E5E5"> devices and get a sense of what we</font>

179
00:07:21,890 --> 00:07:26,750
<font color="#E5E5E5">really need to</font><font color="#CCCCCC"> look for when we have</font>

180
00:07:23,780 --> 00:07:30,469
<font color="#E5E5E5">made this now this is a pretty old in</font>

181
00:07:26,750 --> 00:07:33,140
2015<font color="#E5E5E5"> Juniper put out a notice on their</font>

182
00:07:30,470 --> 00:07:35,000
net screens<font color="#E5E5E5"> firewalls</font><font color="#CCCCCC"> it was running</font>

183
00:07:33,140 --> 00:07:36,919
<font color="#E5E5E5">screen OS and was found that there was a</font>

184
00:07:35,000 --> 00:07:41,030
<font color="#CCCCCC">backdoor</font><font color="#E5E5E5"> that allowed a user to</font>

185
00:07:36,920 --> 00:07:43,100
authenticate<font color="#E5E5E5"> over telnet or SSH</font><font color="#CCCCCC"> without</font>

186
00:07:41,030 --> 00:07:45,080
providing<font color="#E5E5E5"> about a</font><font color="#CCCCCC"> username you</font><font color="#E5E5E5"> can roll</font>

187
00:07:43,100 --> 00:07:46,940
<font color="#CCCCCC">your hand or the keyboard and</font><font color="#E5E5E5"> then type</font>

188
00:07:45,080 --> 00:07:49,900
in the sring that's listed here it's

189
00:07:46,940 --> 00:07:52,910
highlighted in<font color="#E5E5E5"> yellow so when this</font>

190
00:07:49,900 --> 00:07:54,349
<font color="#E5E5E5">advisory came out independent researcher</font>

191
00:07:52,910 --> 00:07:56,390
claimed that they had<font color="#CCCCCC"> found it a</font><font color="#E5E5E5"> few</font>

192
00:07:54,350 --> 00:08:00,470
<font color="#CCCCCC">hours later</font><font color="#E5E5E5"> by</font><font color="#CCCCCC"> pulling through the</font>

193
00:07:56,390 --> 00:08:02,750
<font color="#E5E5E5">firmware HD more publish a</font><font color="#CCCCCC"> rapid7</font><font color="#E5E5E5"> post</font>

194
00:08:00,470 --> 00:08:04,910
the<font color="#E5E5E5"> next day I'm also documenting</font>

195
00:08:02,750 --> 00:08:07,220
<font color="#CCCCCC">exactly where this was and essentially</font>

196
00:08:04,910 --> 00:08:09,620
the string comparison<font color="#CCCCCC"> that actually</font>

197
00:08:07,220 --> 00:08:11,360
happens during this phase looks<font color="#E5E5E5"> very</font>

198
00:08:09,620 --> 00:08:13,160
similar<font color="#E5E5E5"> to the types of debugging</font>

199
00:08:11,360 --> 00:08:15,140
strings that<font color="#CCCCCC"> are</font><font color="#E5E5E5"> just inherently</font>

200
00:08:13,160 --> 00:08:17,240
existing inside<font color="#E5E5E5"> of this firmware image</font>

201
00:08:15,140 --> 00:08:19,490
so they're trying to for any type of

202
00:08:17,240 --> 00:08:21,950
<font color="#E5E5E5">analysis that would just run strings or</font>

203
00:08:19,490 --> 00:08:26,990
frequency analysis on strings to try to

204
00:08:21,950 --> 00:08:29,030
pull out outliers the next<font color="#E5E5E5"> IOT</font><font color="#CCCCCC"> back is</font>

205
00:08:26,990 --> 00:08:31,790
double tech<font color="#CCCCCC"> VoIP</font><font color="#E5E5E5"> devices that had a</font>

206
00:08:29,030 --> 00:08:35,209
<font color="#E5E5E5">login</font><font color="#CCCCCC"> binary</font><font color="#E5E5E5"> the log in binary when you</font>

207
00:08:31,790 --> 00:08:38,300
issue a<font color="#E5E5E5"> normal request to telnet into</font>

208
00:08:35,210 --> 00:08:39,860
the system with a normal user would just

209
00:08:38,299 --> 00:08:42,579
ask you for a password<font color="#CCCCCC"> but</font><font color="#E5E5E5"> when you</font>

210
00:08:39,860 --> 00:08:46,340
<font color="#E5E5E5">enter</font><font color="#CCCCCC"> the dbl ADM or double admin</font>

211
00:08:42,580 --> 00:08:47,420
username<font color="#E5E5E5"> it</font><font color="#CCCCCC"> gives you a challenge that</font>

212
00:08:46,340 --> 00:08:49,160
<font color="#CCCCCC">challenge as long as you know the</font>

213
00:08:47,420 --> 00:08:51,410
<font color="#CCCCCC">algorithm you can</font><font color="#E5E5E5"> you take the challenge</font>

214
00:08:49,160 --> 00:08:54,199
code and type<font color="#E5E5E5"> in</font><font color="#CCCCCC"> a password that'll give</font>

215
00:08:51,410 --> 00:08:56,480
you access to the system<font color="#E5E5E5"> anybody who's</font>

216
00:08:54,200 --> 00:08:57,980
ever done reverse engineering<font color="#E5E5E5"> like this</font>

217
00:08:56,480 --> 00:08:59,600
is the very<font color="#E5E5E5"> first thing that you work on</font>

218
00:08:57,980 --> 00:09:03,020
to learn reverse engineering<font color="#E5E5E5"> this crack</font>

219
00:08:59,600 --> 00:09:04,760
<font color="#CCCCCC">means this</font><font color="#E5E5E5"> is the crack</font><font color="#CCCCCC"> knee so whenever</font>

220
00:09:03,020 --> 00:09:07,100
you see<font color="#CCCCCC"> something like this you can</font>

221
00:09:04,760 --> 00:09:08,600
<font color="#E5E5E5">almost guarantee the reverse engineer is</font>

222
00:09:07,100 --> 00:09:11,030
<font color="#CCCCCC">not</font><font color="#E5E5E5"> going to sleep until they actually</font>

223
00:09:08,600 --> 00:09:13,190
<font color="#E5E5E5">solve this problem so this is an example</font>

224
00:09:11,030 --> 00:09:17,780
of security through obscurity<font color="#CCCCCC"> and not</font>

225
00:09:13,190 --> 00:09:19,490
security itself another one<font color="#E5E5E5"> that was</font>

226
00:09:17,780 --> 00:09:23,779
revealed<font color="#E5E5E5"> in a</font>

227
00:09:19,490 --> 00:09:25,749
<font color="#CCCCCC">Paquette storm post by body has no</font><font color="#E5E5E5"> CD</font>

228
00:09:23,779 --> 00:09:27,740
attached<font color="#E5E5E5"> to it and it turns out</font>

229
00:09:25,749 --> 00:09:30,529
<font color="#E5E5E5">particular</font><font color="#CCCCCC"> development device that they</font>

230
00:09:27,740 --> 00:09:32,959
<font color="#E5E5E5">analyzed had this web shell</font>

231
00:09:30,529 --> 00:09:36,079
so it's<font color="#CCCCCC"> def HTM and if you go to the web</font>

232
00:09:32,959 --> 00:09:38,449
interface<font color="#CCCCCC"> and type in slash dev HTM</font>

233
00:09:36,079 --> 00:09:40,449
without authentication it'll prompt you

234
00:09:38,449 --> 00:09:44,300
<font color="#CCCCCC">for this</font><font color="#E5E5E5"> very generic looking interface</font>

235
00:09:40,449 --> 00:09:46,579
<font color="#CCCCCC">it</font><font color="#E5E5E5"> has three commands in fig sis and</font><font color="#CCCCCC"> SH</font>

236
00:09:44,300 --> 00:09:48,529
and when you type<font color="#E5E5E5"> in sh it drops you to</font>

237
00:09:46,579 --> 00:09:50,748
a root shell<font color="#E5E5E5"> and types everything back</font>

238
00:09:48,529 --> 00:09:53,600
<font color="#E5E5E5">and forth between a stab dot cgi binary</font>

239
00:09:50,749 --> 00:09:55,910
so at this<font color="#CCCCCC"> point you</font><font color="#E5E5E5"> could type</font><font color="#CCCCCC"> W get</font>

240
00:09:53,600 --> 00:09:59,240
<font color="#E5E5E5">pulldown files execute them you can</font>

241
00:09:55,910 --> 00:10:01,129
scrape<font color="#CCCCCC"> NVRAM or passwords which are the</font>

242
00:09:59,240 --> 00:10:04,069
information<font color="#CCCCCC"> that's redacted</font><font color="#E5E5E5"> this is from</font>

243
00:10:01,129 --> 00:10:06,589
<font color="#E5E5E5">system</font><font color="#CCCCCC"> internet so this</font><font color="#E5E5E5"> type of</font>

244
00:10:04,069 --> 00:10:10,878
<font color="#E5E5E5">information clearly shouldn't be exposed</font>

245
00:10:06,589 --> 00:10:14,720
to an authenticated<font color="#CCCCCC"> user the next issue</font>

246
00:10:10,879 --> 00:10:17,389
comes from a network manager CGI<font color="#E5E5E5"> and CGI</font>

247
00:10:14,720 --> 00:10:20,209
handler<font color="#E5E5E5"> that's in our binary images user</font>

248
00:10:17,389 --> 00:10:22,189
sessions<font color="#E5E5E5"> so what happens is when</font><font color="#CCCCCC"> you</font>

249
00:10:20,209 --> 00:10:25,160
<font color="#E5E5E5">make a post</font><font color="#CCCCCC"> request</font><font color="#E5E5E5"> with a very specific</font>

250
00:10:22,189 --> 00:10:27,498
command<font color="#E5E5E5"> and flag value it ends up</font>

251
00:10:25,160 --> 00:10:29,240
<font color="#E5E5E5">creating a user session but then or</font>

252
00:10:27,499 --> 00:10:32,600
actually defecates user session if you

253
00:10:29,240 --> 00:10:35,660
<font color="#E5E5E5">apply</font><font color="#CCCCCC"> a</font><font color="#E5E5E5"> username admin to the cookie</font>

254
00:10:32,600 --> 00:10:38,029
data<font color="#E5E5E5"> this type</font><font color="#CCCCCC"> of problem is extremely</font>

255
00:10:35,660 --> 00:10:40,129
difficult to<font color="#E5E5E5"> find</font><font color="#CCCCCC"> via automated analysis</font>

256
00:10:38,029 --> 00:10:43,939
I'm especially static<font color="#E5E5E5"> analysis</font>

257
00:10:40,129 --> 00:10:46,850
it<font color="#E5E5E5"> requires an understanding</font><font color="#CCCCCC"> of what the</font>

258
00:10:43,939 --> 00:10:49,009
code<font color="#E5E5E5"> that's being sort of like bypassed</font>

259
00:10:46,850 --> 00:10:51,470
<font color="#E5E5E5">when this condition or these checks are</font>

260
00:10:49,009 --> 00:10:57,920
actually valid<font color="#E5E5E5"> and that is hard to</font>

261
00:10:51,470 --> 00:11:01,939
<font color="#E5E5E5">discern</font><font color="#CCCCCC"> so another one is very popular I</font>

262
00:10:57,920 --> 00:11:04,219
had a camera<font color="#E5E5E5"> series that had a backward</font>

263
00:11:01,939 --> 00:11:06,199
telnet<font color="#CCCCCC"> and</font><font color="#E5E5E5"> it used to turn back door</font>

264
00:11:04,220 --> 00:11:08,540
pretty lightly<font color="#E5E5E5"> here this set of</font>

265
00:11:06,199 --> 00:11:10,459
credentials were used in<font color="#E5E5E5"> Mirai and</font>

266
00:11:08,540 --> 00:11:11,240
essentially what happened was<font color="#E5E5E5"> they took</font>

267
00:11:10,459 --> 00:11:14,449
busybox

268
00:11:11,240 --> 00:11:16,459
and during the login phase prepended

269
00:11:14,449 --> 00:11:19,069
this string<font color="#E5E5E5"> to whatever the normal</font>

270
00:11:16,459 --> 00:11:21,649
Prudential<font color="#E5E5E5"> is were so if your username</font>

271
00:11:19,069 --> 00:11:23,559
password or<font color="#E5E5E5"> in</font><font color="#CCCCCC"> admin the password be</font>

272
00:11:21,649 --> 00:11:25,910
admin this string<font color="#CCCCCC"> and</font><font color="#E5E5E5"> it</font><font color="#CCCCCC"> been</font>

273
00:11:23,559 --> 00:11:28,189
<font color="#E5E5E5">essentially what it</font><font color="#CCCCCC"> does is anyone who's</font>

274
00:11:25,910 --> 00:11:29,689
<font color="#E5E5E5">setting up a device and tries to make</font>

275
00:11:28,189 --> 00:11:31,849
sure that no one can<font color="#E5E5E5"> log in over telnet</font>

276
00:11:29,689 --> 00:11:33,110
or<font color="#E5E5E5"> thinks that they have</font><font color="#CCCCCC"> a secure system</font>

277
00:11:31,850 --> 00:11:36,110
<font color="#E5E5E5">because they're not</font>

278
00:11:33,110 --> 00:11:37,970
rentals don't work don't understand that

279
00:11:36,110 --> 00:11:40,820
<font color="#CCCCCC">what's happened is</font><font color="#E5E5E5"> this particular</font>

280
00:11:37,970 --> 00:11:43,399
<font color="#CCCCCC">system has injected a phase between</font><font color="#E5E5E5"> that</font>

281
00:11:40,820 --> 00:11:47,779
<font color="#E5E5E5">so it looks for this particular</font>

282
00:11:43,399 --> 00:11:49,130
signature<font color="#E5E5E5"> for logging in</font><font color="#CCCCCC"> the very last</font>

283
00:11:47,779 --> 00:11:52,519
one that we'll<font color="#E5E5E5"> look at before we go into</font>

284
00:11:49,130 --> 00:11:55,189
<font color="#E5E5E5">more details here on</font><font color="#CCCCCC"> occupation</font><font color="#E5E5E5"> is this</font>

285
00:11:52,519 --> 00:11:57,230
issue<font color="#CCCCCC"> in</font><font color="#E5E5E5"> genius of</font><font color="#CCCCCC"> X's so there's a long</font>

286
00:11:55,190 --> 00:11:59,420
<font color="#E5E5E5">and not SH that's tied to telnet</font>

287
00:11:57,230 --> 00:12:01,190
connections<font color="#E5E5E5"> when you look at the startup</font>

288
00:11:59,420 --> 00:12:04,579
sequence of this<font color="#E5E5E5"> telnet started with a</font>

289
00:12:01,190 --> 00:12:06,170
listener<font color="#E5E5E5"> of the</font><font color="#CCCCCC"> login that</font><font color="#E5E5E5"> SH logins are</font>

290
00:12:04,579 --> 00:12:08,300
jailed so you have to actually log in

291
00:12:06,170 --> 00:12:09,680
with like<font color="#E5E5E5"> credentials but once you're in</font>

292
00:12:08,300 --> 00:12:14,540
<font color="#CCCCCC">that system although the image</font><font color="#E5E5E5"> on the</font>

293
00:12:09,680 --> 00:12:16,279
<font color="#E5E5E5">Left shows a a jailed session so you</font>

294
00:12:14,540 --> 00:12:19,459
<font color="#CCCCCC">only have access</font><font color="#E5E5E5"> to a few commands like</font>

295
00:12:16,279 --> 00:12:23,329
<font color="#CCCCCC">cysts at reboot</font><font color="#E5E5E5"> and etc if you type in</font>

296
00:12:19,459 --> 00:12:25,459
<font color="#E5E5E5">this md5 hash here on the right it drops</font>

297
00:12:23,329 --> 00:12:28,069
you to root shell so it's not<font color="#E5E5E5"> hard to</font>

298
00:12:25,459 --> 00:12:29,420
find this<font color="#E5E5E5"> md5 hash</font><font color="#CCCCCC"> you can look at the</font>

299
00:12:28,070 --> 00:12:31,459
reference and all that information<font color="#CCCCCC"> is</font>

300
00:12:29,420 --> 00:12:34,250
<font color="#CCCCCC">there but what's interesting</font><font color="#E5E5E5"> is that</font>

301
00:12:31,459 --> 00:12:36,469
<font color="#E5E5E5">this undocumented man gives full control</font>

302
00:12:34,250 --> 00:12:38,300
over<font color="#CCCCCC"> the</font><font color="#E5E5E5"> system when it's not supposed</font>

303
00:12:36,470 --> 00:12:39,529
to eat right<font color="#E5E5E5"> so these are</font><font color="#CCCCCC"> the types of</font>

304
00:12:38,300 --> 00:12:42,709
<font color="#CCCCCC">things that</font><font color="#E5E5E5"> we need</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> consider and</font><font color="#CCCCCC"> look</font>

305
00:12:39,529 --> 00:12:45,110
for so now let's go<font color="#CCCCCC"> ahead and talk about</font>

306
00:12:42,709 --> 00:12:48,170
the power of correlation when we talk

307
00:12:45,110 --> 00:12:50,029
<font color="#CCCCCC">about pollution</font><font color="#E5E5E5"> trying to do is talk</font>

308
00:12:48,170 --> 00:12:52,279
<font color="#CCCCCC">about really</font><font color="#E5E5E5"> about deduplication and we</font>

309
00:12:50,029 --> 00:12:53,209
have<font color="#E5E5E5"> a ton of duplicates and that's</font>

310
00:12:52,279 --> 00:12:56,540
accomplished through cryptographic

311
00:12:53,209 --> 00:12:59,209
hashing so<font color="#E5E5E5"> sha-256</font><font color="#CCCCCC"> a local says to</font>

312
00:12:56,540 --> 00:13:02,000
verify that<font color="#E5E5E5"> files are exactly the</font><font color="#CCCCCC"> same</font>

313
00:12:59,209 --> 00:13:04,399
and we<font color="#CCCCCC"> can redo we</font><font color="#E5E5E5"> produced it</font><font color="#CCCCCC"> at</font><font color="#E5E5E5"> the</font>

314
00:13:02,000 --> 00:13:06,350
sample set<font color="#CCCCCC"> up and align its</font><font color="#E5E5E5"> fuzzy</font>

315
00:13:04,399 --> 00:13:07,910
hashing enables<font color="#CCCCCC"> paw relation so it means</font>

316
00:13:06,350 --> 00:13:11,029
how similar these two different files

317
00:13:07,910 --> 00:13:14,480
<font color="#CCCCCC">I'm am a refers to approximate matching</font>

318
00:13:11,029 --> 00:13:16,339
algorithms and in 2006<font color="#CCCCCC"> Jesse Kornblum</font>

319
00:13:14,480 --> 00:13:18,620
<font color="#E5E5E5">from man</font><font color="#CCCCCC"> tech who's a man</font><font color="#E5E5E5"> tech at the</font>

320
00:13:16,339 --> 00:13:21,260
time came out<font color="#E5E5E5"> with this paper called</font>

321
00:13:18,620 --> 00:13:24,250
identifying almost identical files using

322
00:13:21,260 --> 00:13:27,050
context triggered piecewise hashing<font color="#E5E5E5"> by</font>

323
00:13:24,250 --> 00:13:28,190
2010<font color="#E5E5E5"> almost every single malware</font>

324
00:13:27,050 --> 00:13:31,279
researcher on the face of<font color="#CCCCCC"> this planet</font>

325
00:13:28,190 --> 00:13:33,079
<font color="#CCCCCC">was using SS deep which was a part of</font>

326
00:13:31,279 --> 00:13:34,930
that<font color="#CCCCCC"> research</font><font color="#E5E5E5"> she's performed</font>

327
00:13:33,079 --> 00:13:39,620
correlation on the our samples<font color="#E5E5E5"> and</font>

328
00:13:34,930 --> 00:13:41,540
<font color="#E5E5E5">largely</font><font color="#CCCCCC"> it's like since 2006 or 2007 all</font>

329
00:13:39,620 --> 00:13:43,579
this started becoming<font color="#CCCCCC"> popular</font><font color="#E5E5E5"> that's</font>

330
00:13:41,540 --> 00:13:45,920
still seen<font color="#CCCCCC"> today in the system so if you</font>

331
00:13:43,579 --> 00:13:46,920
upload<font color="#CCCCCC"> a sample of virus total you're</font>

332
00:13:45,920 --> 00:13:48,689
<font color="#E5E5E5">you're given</font>

333
00:13:46,920 --> 00:13:51,449
NASA Steve signature and<font color="#E5E5E5"> then you can</font>

334
00:13:48,690 --> 00:13:53,820
use<font color="#E5E5E5"> that to perform relation on your own</font>

335
00:13:51,450 --> 00:13:56,910
samples<font color="#E5E5E5"> so when we started looking at</font>

336
00:13:53,820 --> 00:13:59,310
how nation can be best used we started

337
00:13:56,910 --> 00:14:02,880
looking at what's happened since 2006

338
00:13:59,310 --> 00:14:06,029
um<font color="#E5E5E5"> originally in the 90s we had spam</font>

339
00:14:02,880 --> 00:14:09,839
some then we had SSD<font color="#E5E5E5"> then SD hatch I'm</font>

340
00:14:06,029 --> 00:14:12,839
<font color="#E5E5E5">across HP 2 and then press</font><font color="#CCCCCC"> HDF employees</font>

341
00:14:09,839 --> 00:14:16,620
<font color="#CCCCCC">couple filters</font><font color="#E5E5E5"> that information was</font>

342
00:14:12,839 --> 00:14:19,230
<font color="#E5E5E5">released in a paper in 2015</font><font color="#CCCCCC"> and</font>

343
00:14:16,620 --> 00:14:21,300
essentially we end up<font color="#CCCCCC"> doing is using M</font>

344
00:14:19,230 --> 00:14:24,990
<font color="#CCCCCC">or SCH because it gives us more finer</font>

345
00:14:21,300 --> 00:14:28,229
granularity in tests that we've done so

346
00:14:24,990 --> 00:14:30,480
this sample set of files here<font color="#CCCCCC"> is to</font>

347
00:14:28,230 --> 00:14:35,639
demonstrate the<font color="#E5E5E5"> differences between</font><font color="#CCCCCC"> SSD</font>

348
00:14:30,480 --> 00:14:37,529
correlation and<font color="#CCCCCC"> MRF CH and Marzia so at</font>

349
00:14:35,639 --> 00:14:41,600
the<font color="#CCCCCC"> very</font><font color="#E5E5E5"> top busybox these are the exact</font>

350
00:14:37,529 --> 00:14:46,170
same files<font color="#CCCCCC"> I</font><font color="#E5E5E5"> might expect on line 6h</font>

351
00:14:41,600 --> 00:14:48,209
slight<font color="#E5E5E5"> HTTP PG and live USB so</font><font color="#CCCCCC"> four</font><font color="#E5E5E5"> are</font>

352
00:14:46,170 --> 00:14:49,500
completely different<font color="#CCCCCC"> files even</font><font color="#E5E5E5"> though</font>

353
00:14:48,209 --> 00:14:52,140
they're<font color="#CCCCCC"> the</font><font color="#E5E5E5"> same architecture we would</font>

354
00:14:49,500 --> 00:14:55,440
expect<font color="#E5E5E5"> next</font><font color="#CCCCCC"> to no correlation</font><font color="#E5E5E5"> and both</font>

355
00:14:52,140 --> 00:14:56,779
of<font color="#E5E5E5"> them show the log in SH between the</font>

356
00:14:55,440 --> 00:14:59,399
<font color="#E5E5E5">ingenius in the</font><font color="#CCCCCC"> WatchGuard device</font>

357
00:14:56,779 --> 00:15:01,769
actually turns out<font color="#CCCCCC"> to be exactly in the</font>

358
00:14:59,399 --> 00:15:05,040
middle<font color="#CCCCCC"> of 96 and</font><font color="#E5E5E5"> night and</font><font color="#CCCCCC"> seventy nine</font>

359
00:15:01,769 --> 00:15:08,640
<font color="#CCCCCC">eight percent</font><font color="#E5E5E5"> meaningful SSD and</font><font color="#CCCCCC"> Mrs age</font>

360
00:15:05,040 --> 00:15:10,140
<font color="#CCCCCC">SIA failed on different spectrum</font><font color="#E5E5E5"> so one</font>

361
00:15:08,640 --> 00:15:12,660
was a<font color="#E5E5E5"> little bit higher one was a little</font>

362
00:15:10,140 --> 00:15:16,529
<font color="#E5E5E5">bit lower what was really</font><font color="#CCCCCC"> interesting</font>

363
00:15:12,660 --> 00:15:19,740
and why we end up<font color="#CCCCCC"> using</font><font color="#E5E5E5"> mr m sr h CF is</font>

364
00:15:16,529 --> 00:15:24,329
lines<font color="#E5E5E5"> three four five these particular</font>

365
00:15:19,740 --> 00:15:26,070
<font color="#E5E5E5">things are naturally similar files so</font>

366
00:15:24,329 --> 00:15:28,949
SSD gives us<font color="#E5E5E5"> back</font><font color="#CCCCCC"> zero percent</font>

367
00:15:26,070 --> 00:15:30,209
<font color="#E5E5E5">correlation while MSR</font><font color="#CCCCCC"> h CF ends up</font>

368
00:15:28,949 --> 00:15:32,219
giving us the small<font color="#E5E5E5"> amounts of</font>

369
00:15:30,209 --> 00:15:34,800
correlation that we<font color="#E5E5E5"> need to make links</font>

370
00:15:32,220 --> 00:15:40,199
between their files<font color="#CCCCCC"> so this is extremely</font>

371
00:15:34,800 --> 00:15:42,839
<font color="#E5E5E5">important to us um so let's take a look</font>

372
00:15:40,199 --> 00:15:44,519
<font color="#CCCCCC">at how we can use station to find this</font>

373
00:15:42,839 --> 00:15:46,680
particular<font color="#CCCCCC"> Talmadge over</font><font color="#E5E5E5"> that we just</font>

374
00:15:44,519 --> 00:15:48,630
talked about in<font color="#E5E5E5"> other devices it turns</font>

375
00:15:46,680 --> 00:15:50,760
out that the formation<font color="#E5E5E5"> I was disclosed</font>

376
00:15:48,630 --> 00:15:53,339
publicly talked about six different

377
00:15:50,760 --> 00:15:55,079
pieces<font color="#CCCCCC"> five ingenious</font><font color="#E5E5E5"> and one Arachna</font>

378
00:15:53,339 --> 00:15:57,269
<font color="#CCCCCC">s-- if we run this through the sample</font>

379
00:15:55,079 --> 00:15:59,699
<font color="#E5E5E5">set of data that we've analyzed it turns</font>

380
00:15:57,269 --> 00:16:00,420
out this ends up being<font color="#E5E5E5"> 42 other</font><font color="#CCCCCC"> devices</font>

381
00:15:59,699 --> 00:16:03,750
from<font color="#E5E5E5"> not</font><font color="#CCCCCC"> only</font>

382
00:16:00,420 --> 00:16:06,479
genius<font color="#CCCCCC"> but WatchGuard as well and also</font>

383
00:16:03,750 --> 00:16:10,290
trend<font color="#E5E5E5"> that so it's strange to think that</font>

384
00:16:06,480 --> 00:16:12,959
this particular<font color="#CCCCCC"> backdoor this particular</font>

385
00:16:10,290 --> 00:16:15,689
<font color="#E5E5E5">issue</font><font color="#CCCCCC"> that allows you to</font><font color="#E5E5E5"> escape that</font>

386
00:16:12,959 --> 00:16:18,479
particular<font color="#E5E5E5"> jail ends up being in stand</font>

387
00:16:15,690 --> 00:16:19,889
<font color="#E5E5E5">three different unique manufacturers but</font>

388
00:16:18,480 --> 00:16:22,260
the bottom line<font color="#E5E5E5"> is</font><font color="#CCCCCC"> that particular</font>

389
00:16:19,889 --> 00:16:26,610
<font color="#CCCCCC">implication is</font><font color="#E5E5E5"> probably born for</font><font color="#CCCCCC"> that</font>

390
00:16:22,260 --> 00:16:28,560
code<font color="#CCCCCC"> just</font><font color="#E5E5E5"> born from a lower level</font>

391
00:16:26,610 --> 00:16:30,510
<font color="#E5E5E5">project like a sock Thunder I'm</font>

392
00:16:28,560 --> 00:16:35,430
<font color="#E5E5E5">supplying sample code</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> get this</font>

393
00:16:30,510 --> 00:16:37,110
project started also that web shell we

394
00:16:35,430 --> 00:16:38,489
just talked about we<font color="#E5E5E5"> could relation on</font>

395
00:16:37,110 --> 00:16:41,070
that to<font color="#E5E5E5"> find those particular issues</font>

396
00:16:38,490 --> 00:16:42,959
<font color="#CCCCCC">other devices as well we knew from</font>

397
00:16:41,070 --> 00:16:44,820
<font color="#E5E5E5">information that was</font><font color="#CCCCCC"> posted online that</font>

398
00:16:42,959 --> 00:16:47,339
this<font color="#CCCCCC"> particular device was</font><font color="#E5E5E5"> found in one</font>

399
00:16:44,820 --> 00:16:49,500
<font color="#CCCCCC">Belkin device but we found in 28 other</font>

400
00:16:47,339 --> 00:16:57,449
devices<font color="#E5E5E5"> almost immediately</font>

401
00:16:49,500 --> 00:17:02,570
<font color="#E5E5E5">Belkin ubiquity tp-link and</font><font color="#CCCCCC"> shred net so</font>

402
00:16:57,449 --> 00:17:06,480
for manufacturers<font color="#CCCCCC"> using the same exact</font>

403
00:17:02,570 --> 00:17:09,540
app interface or web<font color="#CCCCCC"> chip</font><font color="#E5E5E5"> again</font><font color="#CCCCCC"> it will</font>

404
00:17:06,480 --> 00:17:11,429
be born from manufacturer<font color="#E5E5E5"> supplying a</font>

405
00:17:09,540 --> 00:17:16,199
code that<font color="#E5E5E5"> is started from in this</font>

406
00:17:11,429 --> 00:17:20,400
<font color="#E5E5E5">information isn't strip prior to now</font>

407
00:17:16,199 --> 00:17:23,910
recently<font color="#E5E5E5"> NCC group released</font><font color="#CCCCCC"> information</font>

408
00:17:20,400 --> 00:17:27,000
<font color="#E5E5E5">of an SSH backdoor</font><font color="#CCCCCC"> I'm the bestest H</font>

409
00:17:23,910 --> 00:17:30,660
what happened was the the<font color="#E5E5E5"> server</font><font color="#CCCCCC"> site</font>

410
00:17:27,000 --> 00:17:33,720
was never meant to<font color="#CCCCCC"> handle</font><font color="#E5E5E5"> the SSH</font><font color="#CCCCCC"> tube</font>

411
00:17:30,660 --> 00:17:36,450
message user all success was only<font color="#E5E5E5"> meant</font>

412
00:17:33,720 --> 00:17:39,929
to handle<font color="#E5E5E5"> the</font><font color="#CCCCCC"> request but that code was</font>

413
00:17:36,450 --> 00:17:42,360
left in there and it would process<font color="#E5E5E5"> it so</font>

414
00:17:39,929 --> 00:17:44,910
if you<font color="#E5E5E5"> modify your SSH client to sent</font>

415
00:17:42,360 --> 00:17:46,770
the message<font color="#CCCCCC"> either off success it will</font>

416
00:17:44,910 --> 00:17:49,260
actually honor that and end up setting

417
00:17:46,770 --> 00:17:51,929
the session<font color="#E5E5E5"> state for that</font><font color="#CCCCCC"> information</font>

418
00:17:49,260 --> 00:17:53,790
so when we query this particular<font color="#E5E5E5"> device</font>

419
00:17:51,929 --> 00:17:56,520
whether or not this<font color="#CCCCCC"> live</font><font color="#E5E5E5"> SH is</font>

420
00:17:53,790 --> 00:17:58,590
<font color="#CCCCCC">inexistent</font><font color="#E5E5E5"> devices we end up finding it</font>

421
00:17:56,520 --> 00:18:01,650
in five unique devices<font color="#E5E5E5"> from Belkin</font>

422
00:17:58,590 --> 00:18:03,689
tp-link in<font color="#CCCCCC"> wash preferred of course</font>

423
00:18:01,650 --> 00:18:06,390
there is<font color="#CCCCCC"> figure eight concerns about</font>

424
00:18:03,690 --> 00:18:08,220
<font color="#E5E5E5">whether or not configuration settings</font>

425
00:18:06,390 --> 00:18:10,260
may block that particular usage of that

426
00:18:08,220 --> 00:18:12,150
<font color="#E5E5E5">vulnerability</font><font color="#CCCCCC"> but</font><font color="#E5E5E5"> at least we're able to</font>

427
00:18:10,260 --> 00:18:14,280
<font color="#E5E5E5">for them extremely to the types of</font>

428
00:18:12,150 --> 00:18:17,280
devices<font color="#E5E5E5"> that</font><font color="#CCCCCC"> it applies to</font>

429
00:18:14,280 --> 00:18:18,930
so the interesting feasts<font color="#E5E5E5"> here this is a</font>

430
00:18:17,280 --> 00:18:22,350
callback for handling that<font color="#E5E5E5"> particular</font>

431
00:18:18,930 --> 00:18:24,960
<font color="#E5E5E5">message type and on</font><font color="#CCCCCC"> indexes</font><font color="#E5E5E5"> 16 and 17</font>

432
00:18:22,350 --> 00:18:27,449
are aware that<font color="#E5E5E5"> structure gets modified</font>

433
00:18:24,960 --> 00:18:32,840
to indicate<font color="#CCCCCC"> that there has been a</font>

434
00:18:27,450 --> 00:18:36,180
successful authentication attempt<font color="#E5E5E5"> okay</font>

435
00:18:32,840 --> 00:18:38,459
so at this<font color="#E5E5E5"> point we take</font><font color="#CCCCCC"> a</font><font color="#E5E5E5"> look at</font>

436
00:18:36,180 --> 00:18:39,990
<font color="#CCCCCC">amount of data that</font><font color="#E5E5E5"> we</font><font color="#CCCCCC"> have</font><font color="#E5E5E5"> we know what</font>

437
00:18:38,460 --> 00:18:41,520
<font color="#CCCCCC">that more sort of looked</font><font color="#E5E5E5"> like and we</font>

438
00:18:39,990 --> 00:18:43,830
know<font color="#E5E5E5"> that</font><font color="#CCCCCC"> for</font><font color="#E5E5E5"> place you can help us find</font>

439
00:18:41,520 --> 00:18:45,420
<font color="#E5E5E5">things really quickly but we have to</font>

440
00:18:43,830 --> 00:18:48,210
find our own thing<font color="#CCCCCC"> we don't want to wait</font>

441
00:18:45,420 --> 00:18:49,680
for some report to come out<font color="#CCCCCC"> online</font><font color="#E5E5E5"> in</font>

442
00:18:48,210 --> 00:18:52,380
<font color="#E5E5E5">order to be able to find issues</font><font color="#CCCCCC"> and</font>

443
00:18:49,680 --> 00:18:54,780
devices via correlation alone so we need

444
00:18:52,380 --> 00:18:56,580
to be able to<font color="#E5E5E5"> hunt through source code</font>

445
00:18:54,780 --> 00:18:59,190
and binary files for these<font color="#E5E5E5"> types of</font>

446
00:18:56,580 --> 00:19:00,720
issues ourselves so when you're<font color="#CCCCCC"> thinking</font>

447
00:18:59,190 --> 00:19:03,120
about source code analysis and the

448
00:19:00,720 --> 00:19:05,250
complexity<font color="#E5E5E5"> things like pattern matching</font>

449
00:19:03,120 --> 00:19:07,139
<font color="#E5E5E5">and regular</font><font color="#CCCCCC"> expressions</font><font color="#E5E5E5"> simply fall</font>

450
00:19:05,250 --> 00:19:10,050
apart extremely quickly because there's

451
00:19:07,140 --> 00:19:12,840
limited when<font color="#E5E5E5"> you think about the process</font>

452
00:19:10,050 --> 00:19:15,330
<font color="#E5E5E5">of source code analysis this concept of</font>

453
00:19:12,840 --> 00:19:18,120
<font color="#E5E5E5">the</font><font color="#CCCCCC"> chomsky</font><font color="#E5E5E5"> hacker</font><font color="#CCCCCC"> he comes up where we</font>

454
00:19:15,330 --> 00:19:20,490
have<font color="#E5E5E5"> with us three four concentric</font>

455
00:19:18,120 --> 00:19:23,010
circles or rings that represent the

456
00:19:20,490 --> 00:19:25,380
<font color="#E5E5E5">complexity of different language</font>

457
00:19:23,010 --> 00:19:27,990
parameters<font color="#E5E5E5"> so the very middle which</font><font color="#CCCCCC"> is</font>

458
00:19:25,380 --> 00:19:30,390
<font color="#E5E5E5">the most simplest to parse and</font>

459
00:19:27,990 --> 00:19:32,760
understand our<font color="#E5E5E5"> regular grammars which</font>

460
00:19:30,390 --> 00:19:34,800
are parsed by regular expressions they

461
00:19:32,760 --> 00:19:36,720
simply require a<font color="#E5E5E5"> finite state</font><font color="#CCCCCC"> gene</font><font color="#E5E5E5"> and</font>

462
00:19:34,800 --> 00:19:38,669
<font color="#E5E5E5">that's it when you go to context-free</font>

463
00:19:36,720 --> 00:19:40,380
grammars<font color="#E5E5E5"> it requires a finite state</font>

464
00:19:38,670 --> 00:19:42,570
machine plus<font color="#E5E5E5"> a stack then</font>

465
00:19:40,380 --> 00:19:44,580
<font color="#E5E5E5">context-sensitive requires</font><font color="#CCCCCC"> huge stacks</font>

466
00:19:42,570 --> 00:19:48,120
or more memory<font color="#E5E5E5"> and then recursively</font>

467
00:19:44,580 --> 00:19:50,550
enumerable<font color="#E5E5E5"> requires a Turing machine so</font>

468
00:19:48,120 --> 00:19:51,989
when we're part source code and when I

469
00:19:50,550 --> 00:19:54,419
talk<font color="#E5E5E5"> about source code upon that you're</font>

470
00:19:51,990 --> 00:19:56,100
talking<font color="#CCCCCC"> about</font><font color="#E5E5E5"> C and</font><font color="#CCCCCC"> C++ that doesn't</font>

471
00:19:54,420 --> 00:19:58,950
necessarily<font color="#CCCCCC"> exist on these devices it's</font>

472
00:19:56,100 --> 00:20:02,610
<font color="#CCCCCC">things like</font><font color="#E5E5E5"> JavaScript and shell scripts</font>

473
00:19:58,950 --> 00:20:04,740
<font color="#E5E5E5">your should start with analysis and PHP</font>

474
00:20:02,610 --> 00:20:05,550
<font color="#CCCCCC">and AFE these types of things that were</font>

475
00:20:04,740 --> 00:20:09,150
<font color="#CCCCCC">looking for</font>

476
00:20:05,550 --> 00:20:11,399
so here sample of what<font color="#E5E5E5"> edge X won't work</font>

477
00:20:09,150 --> 00:20:14,640
<font color="#CCCCCC">so we have this function</font><font color="#E5E5E5"> here that's</font>

478
00:20:11,400 --> 00:20:15,090
Java<font color="#CCCCCC"> it takes one integer and it returns</font>

479
00:20:14,640 --> 00:20:17,670
a string

480
00:20:15,090 --> 00:20:19,470
<font color="#CCCCCC">it's called more or less</font><font color="#E5E5E5"> and this</font>

481
00:20:17,670 --> 00:20:21,990
<font color="#CCCCCC">particularly</font><font color="#E5E5E5"> when you're analyzing it</font>

482
00:20:19,470 --> 00:20:24,630
<font color="#CCCCCC">and statically does not have one answer</font>

483
00:20:21,990 --> 00:20:26,540
<font color="#E5E5E5">we aren't given the</font><font color="#CCCCCC"> privilege of</font><font color="#E5E5E5"> State</font>

484
00:20:24,630 --> 00:20:28,850
or concrete

485
00:20:26,540 --> 00:20:31,370
execution<font color="#E5E5E5"> so we don't know what the</font>

486
00:20:28,850 --> 00:20:34,189
value<font color="#CCCCCC"> of</font><font color="#E5E5E5"> t-take meaning you don't know</font>

487
00:20:31,370 --> 00:20:37,040
<font color="#CCCCCC">what the value of y is so the potential</font>

488
00:20:34,190 --> 00:20:39,169
<font color="#E5E5E5">values of this end up being no more or</font>

489
00:20:37,040 --> 00:20:41,178
<font color="#E5E5E5">less and when you apply</font><font color="#CCCCCC"> it</font><font color="#E5E5E5"> to</font><font color="#CCCCCC"> uppercase</font>

490
00:20:39,169 --> 00:20:43,520
<font color="#E5E5E5">on more or less they become uppercase</font>

491
00:20:41,179 --> 00:20:46,480
<font color="#E5E5E5">but what happens when you apply or try</font>

492
00:20:43,520 --> 00:20:49,760
<font color="#CCCCCC">to call to uppercase</font><font color="#E5E5E5"> on a</font><font color="#CCCCCC"> null value in</font>

493
00:20:46,480 --> 00:20:51,260
Java<font color="#E5E5E5"> the answer is I have no</font><font color="#CCCCCC"> idea I'm</font>

494
00:20:49,760 --> 00:20:53,660
not<font color="#CCCCCC"> a job a person but</font><font color="#E5E5E5"> you have to</font>

495
00:20:51,260 --> 00:20:56,090
account for all<font color="#E5E5E5"> those things</font><font color="#CCCCCC"> so the</font>

496
00:20:53,660 --> 00:20:57,650
state<font color="#E5E5E5"> of what goes on cannot be parsed</font>

497
00:20:56,090 --> 00:20:59,840
by<font color="#CCCCCC"> a simple regular expression or</font>

498
00:20:57,650 --> 00:21:03,590
pattern<font color="#CCCCCC"> massive loan you need much more</font>

499
00:20:59,840 --> 00:21:05,270
advanced analysis<font color="#E5E5E5"> to</font><font color="#CCCCCC"> Jukka so the</font>

500
00:21:03,590 --> 00:21:07,730
process really<font color="#E5E5E5"> breaks down relaxing and</font>

501
00:21:05,270 --> 00:21:10,030
<font color="#CCCCCC">percent of lectures are this process of</font>

502
00:21:07,730 --> 00:21:14,330
breaking down<font color="#CCCCCC"> the input stream of source</font>

503
00:21:10,030 --> 00:21:16,250
into<font color="#CCCCCC"> these tokens or lexemes hairy</font>

504
00:21:14,330 --> 00:21:19,340
information about them that<font color="#E5E5E5"> are tied to</font>

505
00:21:16,250 --> 00:21:22,490
<font color="#E5E5E5">the grant</font><font color="#CCCCCC"> that you specify so this</font>

506
00:21:19,340 --> 00:21:24,590
construe<font color="#CCCCCC"> Apple is from</font><font color="#E5E5E5"> JavaScript and</font>

507
00:21:22,490 --> 00:21:27,049
<font color="#E5E5E5">essentially what</font><font color="#CCCCCC"> it means is that there</font>

508
00:21:24,590 --> 00:21:29,149
is a variable<font color="#CCCCCC"> declaration it has more</font>

509
00:21:27,049 --> 00:21:31,100
information<font color="#E5E5E5"> attached to it</font><font color="#CCCCCC"> like what its</font>

510
00:21:29,150 --> 00:21:33,710
actual kind is so in<font color="#E5E5E5"> this case it's a</font>

511
00:21:31,100 --> 00:21:35,120
constant<font color="#E5E5E5"> and then you have an identifier</font>

512
00:21:33,710 --> 00:21:36,650
<font color="#CCCCCC">and little role and you break</font><font color="#E5E5E5"> these</font>

513
00:21:35,120 --> 00:21:39,889
things down at the<font color="#E5E5E5"> tokens that can then</font>

514
00:21:36,650 --> 00:21:42,140
be parsed later on the parser takes

515
00:21:39,890 --> 00:21:44,240
<font color="#E5E5E5">tasty select games or tokens into</font>

516
00:21:42,140 --> 00:21:47,360
<font color="#E5E5E5">account and it's constructing a parse</font>

517
00:21:44,240 --> 00:21:49,610
tree or concrete syntax tree<font color="#E5E5E5"> now the</font>

518
00:21:47,360 --> 00:21:51,409
concrete<font color="#E5E5E5"> syntax tree is tied very</font>

519
00:21:49,610 --> 00:21:54,500
heavily<font color="#CCCCCC"> to the type of grammar that you</font>

520
00:21:51,410 --> 00:21:55,880
use or the<font color="#CCCCCC"> responsive occasions</font><font color="#E5E5E5"> so</font>

521
00:21:54,500 --> 00:21:58,940
things like program and variable

522
00:21:55,880 --> 00:22:01,130
declaration<font color="#E5E5E5"> and variable declarations</font>

523
00:21:58,940 --> 00:22:04,040
that<font color="#CCCCCC"> exist are all things</font><font color="#E5E5E5"> that we've</font>

524
00:22:01,130 --> 00:22:06,080
named inside of our grammar<font color="#CCCCCC"> in abstract</font>

525
00:22:04,040 --> 00:22:07,820
syntax tree is when we prune that's tree

526
00:22:06,080 --> 00:22:10,939
down<font color="#E5E5E5"> and come</font><font color="#CCCCCC"> up with</font><font color="#E5E5E5"> a more abstract</font>

527
00:22:07,820 --> 00:22:13,370
<font color="#E5E5E5">sense that's decoupled from the grammar</font>

528
00:22:10,940 --> 00:22:15,080
that<font color="#E5E5E5"> we've specified so to give more of</font>

529
00:22:13,370 --> 00:22:17,209
<font color="#E5E5E5">a filtration of how we actually</font>

530
00:22:15,080 --> 00:22:19,309
<font color="#E5E5E5">accomplish this one of the projects that</font>

531
00:22:17,210 --> 00:22:20,240
we use to generate<font color="#E5E5E5"> lectures and parsers</font>

532
00:22:19,309 --> 00:22:22,580
is antler

533
00:22:20,240 --> 00:22:25,429
antler is<font color="#E5E5E5"> another tool language</font>

534
00:22:22,580 --> 00:22:27,110
recognition<font color="#CCCCCC"> it's a Java based tool but</font>

535
00:22:25,429 --> 00:22:28,520
if you develop your grammar for the link

536
00:22:27,110 --> 00:22:31,580
which you<font color="#E5E5E5"> want to parse</font><font color="#CCCCCC"> and this</font>

537
00:22:28,520 --> 00:22:33,679
extended<font color="#CCCCCC"> Backus normal or EB NF form</font>

538
00:22:31,580 --> 00:22:35,600
what<font color="#E5E5E5"> you can do is feed this into</font>

539
00:22:33,679 --> 00:22:38,090
<font color="#CCCCCC">handler</font><font color="#E5E5E5"> and say give</font><font color="#CCCCCC"> me a parser</font>

540
00:22:35,600 --> 00:22:39,530
JavaScript<font color="#E5E5E5"> or give me a parser</font><font color="#CCCCCC"> in Luxor</font>

541
00:22:38,090 --> 00:22:41,959
and pipe

542
00:22:39,530 --> 00:22:44,930
Oh that way we can deploy<font color="#CCCCCC"> a</font><font color="#E5E5E5"> node</font>

543
00:22:41,960 --> 00:22:47,330
analyzers<font color="#E5E5E5"> or Python analyzers to do what</font>

544
00:22:44,930 --> 00:22:48,950
we want to do at<font color="#CCCCCC"> that take the source</font>

545
00:22:47,330 --> 00:22:51,860
feed it<font color="#E5E5E5"> into the litter</font>

546
00:22:48,950 --> 00:22:54,530
tokenize is it passes<font color="#E5E5E5"> it a parser</font>

547
00:22:51,860 --> 00:22:56,780
creates the park<font color="#CCCCCC"> tree we each</font><font color="#E5E5E5"> turn that</font>

548
00:22:54,530 --> 00:22:58,610
down<font color="#E5E5E5"> into an ast and</font><font color="#CCCCCC"> at that point</font><font color="#E5E5E5"> and</font>

549
00:22:56,780 --> 00:23:01,760
only<font color="#CCCCCC"> at</font><font color="#E5E5E5"> that point can we really start</font>

550
00:22:58,610 --> 00:23:05,419
analysis<font color="#CCCCCC"> there are tools out</font><font color="#E5E5E5"> there that</font>

551
00:23:01,760 --> 00:23:07,850
do obviously<font color="#CCCCCC"> vulnerability assessments</font>

552
00:23:05,420 --> 00:23:09,500
on source code but<font color="#E5E5E5"> what we found is most</font>

553
00:23:07,850 --> 00:23:10,939
of those<font color="#E5E5E5"> tools that we use actually</font><font color="#CCCCCC"> in</font>

554
00:23:09,500 --> 00:23:13,880
our<font color="#E5E5E5"> own practices when we're developing</font>

555
00:23:10,940 --> 00:23:16,340
<font color="#E5E5E5">our code is a lot of those things tend</font>

556
00:23:13,880 --> 00:23:18,140
<font color="#E5E5E5">to trigger on not so much the types of</font>

557
00:23:16,340 --> 00:23:21,320
<font color="#CCCCCC">vulnerabilities that</font><font color="#E5E5E5"> we care about but</font>

558
00:23:18,140 --> 00:23:23,780
<font color="#E5E5E5">things that relate to technical debt so</font>

559
00:23:21,320 --> 00:23:25,370
<font color="#E5E5E5">it's</font><font color="#CCCCCC"> cognitive complexity</font><font color="#E5E5E5"> it's there</font>

560
00:23:23,780 --> 00:23:28,399
<font color="#E5E5E5">you've defined this particular variable</font>

561
00:23:25,370 --> 00:23:30,439
but never used it or you might<font color="#CCCCCC"> want to</font>

562
00:23:28,400 --> 00:23:32,090
consider refactoring this code those

563
00:23:30,440 --> 00:23:34,310
things we<font color="#E5E5E5"> don't care about</font><font color="#CCCCCC"> more things</font>

564
00:23:32,090 --> 00:23:36,139
<font color="#CCCCCC">for vulnerabilities and issues it's</font>

565
00:23:34,310 --> 00:23:37,820
great that it finds them<font color="#E5E5E5"> but you have a</font>

566
00:23:36,140 --> 00:23:40,940
signatures<font color="#E5E5E5"> that we actually want to find</font>

567
00:23:37,820 --> 00:23:43,399
and identify<font color="#E5E5E5"> so once you get to that</font>

568
00:23:40,940 --> 00:23:45,170
<font color="#CCCCCC">point</font><font color="#E5E5E5"> a step and you</font><font color="#CCCCCC"> can start doing</font>

569
00:23:43,400 --> 00:23:47,600
more<font color="#E5E5E5"> analysis</font><font color="#CCCCCC"> that more analysis is</font>

570
00:23:45,170 --> 00:23:50,540
usually defining a scope tree so this<font color="#CCCCCC"> is</font>

571
00:23:47,600 --> 00:23:52,820
if you define a<font color="#E5E5E5"> variable called like</font>

572
00:23:50,540 --> 00:23:55,610
source code or something<font color="#E5E5E5"> on a global</font>

573
00:23:52,820 --> 00:23:57,260
<font color="#E5E5E5">scope versus scope</font><font color="#CCCCCC"> inside of a</font><font color="#E5E5E5"> function</font>

574
00:23:55,610 --> 00:23:58,850
you need to be able to<font color="#E5E5E5"> identify</font><font color="#CCCCCC"> the</font>

575
00:23:57,260 --> 00:24:01,070
<font color="#E5E5E5">difference between those two</font><font color="#CCCCCC"> and</font><font color="#E5E5E5"> not get</font>

576
00:23:58,850 --> 00:24:02,959
them confused<font color="#CCCCCC"> arc analysis all that</font>

577
00:24:01,070 --> 00:24:05,000
feeds<font color="#E5E5E5"> into a symbol</font><font color="#CCCCCC"> table that</font><font color="#E5E5E5"> tracks</font>

578
00:24:02,960 --> 00:24:07,550
<font color="#E5E5E5">the data as</font><font color="#CCCCCC"> it goes through the</font>

579
00:24:05,000 --> 00:24:11,180
<font color="#CCCCCC">execution of the application so the data</font>

580
00:24:07,550 --> 00:24:13,760
analyzer<font color="#E5E5E5"> into account the declaration of</font>

581
00:24:11,180 --> 00:24:16,460
variables<font color="#CCCCCC"> when they get reassigned</font><font color="#E5E5E5"> and</font>

582
00:24:13,760 --> 00:24:18,830
when they're passed into functions so

583
00:24:16,460 --> 00:24:21,710
<font color="#E5E5E5">you can understand the pathway</font><font color="#CCCCCC"> in</font>

584
00:24:18,830 --> 00:24:24,110
sources<font color="#E5E5E5"> and try to determine</font><font color="#CCCCCC"> whether or</font>

585
00:24:21,710 --> 00:24:26,810
<font color="#E5E5E5">not a link exists and if that link has</font>

586
00:24:24,110 --> 00:24:28,490
<font color="#CCCCCC">been</font><font color="#E5E5E5"> modified by a function that may</font>

587
00:24:26,810 --> 00:24:31,210
have sanitized that<font color="#E5E5E5"> particular input</font>

588
00:24:28,490 --> 00:24:33,440
<font color="#E5E5E5">source so it really comes down to</font>

589
00:24:31,210 --> 00:24:35,930
<font color="#E5E5E5">understanding user input into a system</font>

590
00:24:33,440 --> 00:24:38,960
<font color="#E5E5E5">that</font><font color="#CCCCCC"> user input making its way to a</font>

591
00:24:35,930 --> 00:24:40,940
vulnerable<font color="#E5E5E5"> sink and then understanding</font>

592
00:24:38,960 --> 00:24:43,340
whether or not it's possible<font color="#E5E5E5"> for that to</font>

593
00:24:40,940 --> 00:24:44,830
<font color="#CCCCCC">be sanitized and only if</font><font color="#E5E5E5"> all of those</font>

594
00:24:43,340 --> 00:24:47,689
conditions<font color="#CCCCCC"> are</font><font color="#E5E5E5"> met do we actually</font>

595
00:24:44,830 --> 00:24:48,919
respond with an alert that says<font color="#E5E5E5"> this is</font>

596
00:24:47,690 --> 00:24:51,680
a potential<font color="#E5E5E5"> issue that needs to be</font>

597
00:24:48,920 --> 00:24:53,240
looked<font color="#E5E5E5"> into that way we can completely</font>

598
00:24:51,680 --> 00:24:55,550
get<font color="#CCCCCC"> rid of all</font><font color="#E5E5E5"> it's like you</font>

599
00:24:53,240 --> 00:24:57,530
false positives<font color="#CCCCCC"> that end up being thrown</font>

600
00:24:55,550 --> 00:25:00,110
out all over<font color="#E5E5E5"> the place the pattern</font>

601
00:24:57,530 --> 00:25:02,240
<font color="#CCCCCC">analyzers basically represent cases</font>

602
00:25:00,110 --> 00:25:03,800
where we get down to a particular<font color="#CCCCCC"> me and</font>

603
00:25:02,240 --> 00:25:06,080
we know user input is<font color="#CCCCCC"> being passed</font>

604
00:25:03,800 --> 00:25:08,710
somewhere or data is being passed in if

605
00:25:06,080 --> 00:25:11,330
we want to<font color="#E5E5E5"> understand the pattern</font><font color="#CCCCCC"> of</font>

606
00:25:08,710 --> 00:25:13,520
<font color="#CCCCCC">sanitized function we can then run</font>

607
00:25:11,330 --> 00:25:15,139
regular expressions at that point<font color="#E5E5E5"> since</font>

608
00:25:13,520 --> 00:25:17,660
we're<font color="#CCCCCC"> focusing on such a really small</font>

609
00:25:15,140 --> 00:25:21,110
subset<font color="#CCCCCC"> of the code and we know what</font>

610
00:25:17,660 --> 00:25:22,760
context is being<font color="#E5E5E5"> used in so in this</font>

611
00:25:21,110 --> 00:25:24,919
<font color="#CCCCCC">particular case and use this to find</font>

612
00:25:22,760 --> 00:25:27,440
<font color="#E5E5E5">these simple</font><font color="#CCCCCC"> examples</font><font color="#E5E5E5"> and this is</font>

613
00:25:24,920 --> 00:25:30,200
perhaps<font color="#E5E5E5"> the most simple example that you</font>

614
00:25:27,440 --> 00:25:31,580
<font color="#CCCCCC">could</font><font color="#E5E5E5"> pasta</font><font color="#CCCCCC"> the issue that existed in</font>

615
00:25:30,200 --> 00:25:35,120
the<font color="#CCCCCC"> login</font><font color="#E5E5E5"> not station which we talked</font>

616
00:25:31,580 --> 00:25:37,909
about<font color="#E5E5E5"> is a shell script that's make 363</font>

617
00:25:35,120 --> 00:25:41,000
lines of code so<font color="#E5E5E5"> what I can do here it's</font>

618
00:25:37,910 --> 00:25:43,790
run analyzer on this which<font color="#CCCCCC"> doesn't take</font>

619
00:25:41,000 --> 00:25:45,500
<font color="#E5E5E5">long</font><font color="#CCCCCC"> at all</font><font color="#E5E5E5"> what will happen is it ends</font>

620
00:25:43,790 --> 00:25:48,940
up parsing everything that source code

621
00:25:45,500 --> 00:25:53,210
<font color="#E5E5E5">file to look for blocked or guarded</font><font color="#CCCCCC"> I</font>

622
00:25:48,940 --> 00:25:55,310
<font color="#CCCCCC">looked like their shell so we'll be on</font>

623
00:25:53,210 --> 00:25:56,780
<font color="#E5E5E5">these particular lines are the things</font>

624
00:25:55,310 --> 00:25:59,540
that<font color="#E5E5E5"> we actually care about so we can go</font>

625
00:25:56,780 --> 00:26:03,620
<font color="#E5E5E5">to</font><font color="#CCCCCC"> 299 example and what we end up seeing</font>

626
00:25:59,540 --> 00:26:05,659
is this now can use expression to try to

627
00:26:03,620 --> 00:26:09,080
find exact and then something that<font color="#E5E5E5"> looks</font>

628
00:26:05,660 --> 00:26:11,540
<font color="#E5E5E5">like SH or in bash</font><font color="#CCCCCC"> I've been a you know</font>

629
00:26:09,080 --> 00:26:13,970
<font color="#CCCCCC">whatever else but the problem is when</font>

630
00:26:11,540 --> 00:26:16,190
you do<font color="#E5E5E5"> that you getting so many false</font>

631
00:26:13,970 --> 00:26:19,610
positives<font color="#CCCCCC"> that you can sift through</font><font color="#E5E5E5"> all</font>

632
00:26:16,190 --> 00:26:21,290
of them<font color="#E5E5E5"> so what we do is using parsing</font>

633
00:26:19,610 --> 00:26:23,570
<font color="#E5E5E5">codes that we just talked about</font><font color="#CCCCCC"> it's</font>

634
00:26:21,290 --> 00:26:25,520
check for any<font color="#E5E5E5"> Euler cases for their</font>

635
00:26:23,570 --> 00:26:27,590
<font color="#E5E5E5">predicates like this that have a</font>

636
00:26:25,520 --> 00:26:29,540
variable<font color="#E5E5E5"> that are matched to a string</font>

637
00:26:27,590 --> 00:26:31,550
literal<font color="#E5E5E5"> and then after that the</font>

638
00:26:29,540 --> 00:26:33,889
condition that<font color="#E5E5E5"> exists as a child node</font>

639
00:26:31,550 --> 00:26:37,850
<font color="#E5E5E5">under that French ends up looking like</font>

640
00:26:33,890 --> 00:26:40,250
<font color="#E5E5E5">an execution that spawn shell so with</font>

641
00:26:37,850 --> 00:26:42,290
<font color="#E5E5E5">that potentially is that there is user</font>

642
00:26:40,250 --> 00:26:45,610
input<font color="#CCCCCC"> variant that</font><font color="#E5E5E5"> comes from some</font>

643
00:26:42,290 --> 00:26:47,930
function that<font color="#CCCCCC"> may be by user that allows</font>

644
00:26:45,610 --> 00:26:50,090
execution of these shells<font color="#E5E5E5"> that means we</font>

645
00:26:47,930 --> 00:26:51,830
<font color="#E5E5E5">immediately cut on all</font><font color="#CCCCCC"> nodes that we get</font>

646
00:26:50,090 --> 00:26:55,010
and we're<font color="#CCCCCC"> only being</font><font color="#E5E5E5"> notified of issues</font>

647
00:26:51,830 --> 00:26:58,250
that<font color="#CCCCCC"> are very high ability something</font>

648
00:26:55,010 --> 00:27:01,430
interesting is gonna come so that's

649
00:26:58,250 --> 00:27:03,050
extremely to understand<font color="#CCCCCC"> we also do this</font>

650
00:27:01,430 --> 00:27:06,410
with<font color="#E5E5E5"> JavaScript or to pull out</font>

651
00:27:03,050 --> 00:27:07,040
interfaces to CGI scripts so if you

652
00:27:06,410 --> 00:27:08,630
click

653
00:27:07,040 --> 00:27:10,790
a<font color="#E5E5E5"> specific</font><font color="#CCCCCC"> note or</font><font color="#E5E5E5"> trying to look</font><font color="#CCCCCC"> at a</font>

654
00:27:08,630 --> 00:27:13,850
<font color="#CCCCCC">specific file</font><font color="#E5E5E5"> if you want to understand</font>

655
00:27:10,790 --> 00:27:15,409
<font color="#E5E5E5">how to fuzz that or how to get</font>

656
00:27:13,850 --> 00:27:18,320
information<font color="#E5E5E5"> into the</font><font color="#CCCCCC"> backend on a</font>

657
00:27:15,410 --> 00:27:20,330
specific<font color="#CCCCCC"> 16 system you can actually</font>

658
00:27:18,320 --> 00:27:22,760
<font color="#E5E5E5">extract all those things</font><font color="#CCCCCC"> via</font><font color="#E5E5E5"> this</font>

659
00:27:20,330 --> 00:27:24,980
process so it's not<font color="#E5E5E5"> just</font><font color="#CCCCCC"> looking for</font>

660
00:27:22,760 --> 00:27:28,370
<font color="#CCCCCC">vocal</font><font color="#E5E5E5"> signatures or something it's it's</font>

661
00:27:24,980 --> 00:27:33,320
<font color="#CCCCCC">a looking specific content</font><font color="#E5E5E5"> school things</font>

662
00:27:28,370 --> 00:27:36,280
like so that's<font color="#E5E5E5"> what happens during</font>

663
00:27:33,320 --> 00:27:38,720
static analysis now binary analyzers<font color="#E5E5E5"> are</font>

664
00:27:36,280 --> 00:27:41,360
really interesting because<font color="#E5E5E5"> there's a lot</font>

665
00:27:38,720 --> 00:27:43,580
of challenges<font color="#CCCCCC"> that</font><font color="#E5E5E5"> come with binary</font>

666
00:27:41,360 --> 00:27:47,149
analysis embedded systems<font color="#E5E5E5"> the biggest</font>

667
00:27:43,580 --> 00:27:49,280
<font color="#E5E5E5">one is that there's different raters are</font>

668
00:27:47,150 --> 00:27:52,100
<font color="#CCCCCC">nips and</font><font color="#E5E5E5"> PowerPC</font><font color="#CCCCCC"> your the most common</font>

669
00:27:49,280 --> 00:27:55,180
but mikrotik<font color="#E5E5E5"> it's lots of x86</font><font color="#CCCCCC"> and even</font>

670
00:27:52,100 --> 00:27:58,879
tiled<font color="#E5E5E5"> about those that don't represent</font>

671
00:27:55,180 --> 00:28:02,000
the kind<font color="#E5E5E5"> of tool sets that you would</font>

672
00:27:58,880 --> 00:28:04,130
<font color="#CCCCCC">deploy binary noms</font><font color="#E5E5E5"> so really what we</font>

673
00:28:02,000 --> 00:28:06,800
need is an intermediate<font color="#CCCCCC"> representation</font>

674
00:28:04,130 --> 00:28:09,140
or native language that we can<font color="#E5E5E5"> represent</font>

675
00:28:06,800 --> 00:28:11,480
a shih-tzu or these things<font color="#E5E5E5"> and perform</font>

676
00:28:09,140 --> 00:28:14,390
an out there<font color="#E5E5E5"> rather than</font><font color="#CCCCCC"> having to</font>

677
00:28:11,480 --> 00:28:17,420
rewrite all<font color="#CCCCCC"> of these analyzers</font><font color="#E5E5E5"> on every</font>

678
00:28:14,390 --> 00:28:18,950
individual architecture<font color="#E5E5E5"> um you do this</font>

679
00:28:17,420 --> 00:28:22,100
on<font color="#CCCCCC"> the intermediate</font><font color="#E5E5E5"> language so the</font>

680
00:28:18,950 --> 00:28:25,550
process<font color="#CCCCCC"> that we use is the deploy might</font>

681
00:28:22,100 --> 00:28:27,230
assist each and essentially we scale

682
00:28:25,550 --> 00:28:31,430
these based on<font color="#E5E5E5"> the amount of demand that</font>

683
00:28:27,230 --> 00:28:34,520
we<font color="#E5E5E5"> have for processing so we input a</font>

684
00:28:31,430 --> 00:28:36,080
binary binary ninja binary<font color="#CCCCCC"> it does the</font>

685
00:28:34,520 --> 00:28:38,750
complete disassembly<font color="#CCCCCC"> and linear</font><font color="#E5E5E5"> sweep</font>

686
00:28:36,080 --> 00:28:41,060
<font color="#CCCCCC">will list lists you as</font><font color="#E5E5E5"> meat level</font>

687
00:28:38,750 --> 00:28:43,130
<font color="#E5E5E5">intermediate language in static single</font>

688
00:28:41,060 --> 00:28:44,960
assignment form<font color="#E5E5E5"> then we can write or</font>

689
00:28:43,130 --> 00:28:47,240
either<font color="#E5E5E5"> standpipe to query</font><font color="#CCCCCC"> that</font>

690
00:28:44,960 --> 00:28:49,850
<font color="#CCCCCC">information and</font><font color="#E5E5E5"> push those</font><font color="#CCCCCC"> two Kinesis</font>

691
00:28:47,240 --> 00:28:52,490
<font color="#CCCCCC">busta</font><font color="#E5E5E5"> konista stream with the</font><font color="#CCCCCC"> json</font>

692
00:28:49,850 --> 00:28:55,070
<font color="#E5E5E5">nation that says hey pick this up and</font>

693
00:28:52,490 --> 00:28:58,970
start processing<font color="#E5E5E5"> it or posting it into</font>

694
00:28:55,070 --> 00:29:01,370
databases when we look at the different

695
00:28:58,970 --> 00:29:03,560
structures of how<font color="#E5E5E5"> things look in</font>

696
00:29:01,370 --> 00:29:06,469
<font color="#CCCCCC">different assembly languages it becomes</font>

697
00:29:03,560 --> 00:29:07,490
<font color="#E5E5E5">apparent why this now we have our myths</font>

698
00:29:06,470 --> 00:29:08,840
and PowerPC

699
00:29:07,490 --> 00:29:10,910
that are all implementing<font color="#CCCCCC"> its squared</font>

700
00:29:08,840 --> 00:29:12,949
function<font color="#E5E5E5"> the square function just takes</font>

701
00:29:10,910 --> 00:29:13,940
a number multiplies it by itself it

702
00:29:12,950 --> 00:29:16,460
returns<font color="#CCCCCC"> a value</font>

703
00:29:13,940 --> 00:29:19,100
this looks<font color="#CCCCCC"> really different</font><font color="#E5E5E5"> in all these</font>

704
00:29:16,460 --> 00:29:20,690
textures<font color="#E5E5E5"> but the generalized</font><font color="#CCCCCC"> and</font><font color="#E5E5E5"> a lot</font>

705
00:29:19,100 --> 00:29:23,360
<font color="#E5E5E5">on the right is</font>

706
00:29:20,690 --> 00:29:25,580
we get each of those and we<font color="#CCCCCC"> can very</font>

707
00:29:23,360 --> 00:29:27,939
really tell that<font color="#CCCCCC"> art goes into Part C</font>

708
00:29:25,580 --> 00:29:30,860
which is<font color="#CCCCCC"> in store its</font><font color="#E5E5E5"> register to</font>

709
00:29:27,940 --> 00:29:33,170
register<font color="#CCCCCC"> to and</font><font color="#E5E5E5"> bar</font><font color="#CCCCCC"> C are multiplied and</font>

710
00:29:30,860 --> 00:29:35,659
<font color="#E5E5E5">then the value</font><font color="#CCCCCC"> of</font><font color="#E5E5E5"> that is returned so</font>

711
00:29:33,170 --> 00:29:37,400
it's much easy to understand what

712
00:29:35,660 --> 00:29:39,170
actually<font color="#E5E5E5"> happens during this so the</font>

713
00:29:37,400 --> 00:29:43,490
semantic<font color="#E5E5E5"> meaning is easier</font><font color="#CCCCCC"> to reason</font>

714
00:29:39,170 --> 00:29:45,740
about now the process of binary ninja

715
00:29:43,490 --> 00:29:48,770
<font color="#E5E5E5">will do when we</font><font color="#CCCCCC"> put in binary files</font>

716
00:29:45,740 --> 00:29:51,200
<font color="#E5E5E5">it'll perform analysis I guess imports</font>

717
00:29:48,770 --> 00:29:53,510
and exports<font color="#E5E5E5"> functions cross-references</font>

718
00:29:51,200 --> 00:29:56,000
global and local variables<font color="#CCCCCC"> um it'll</font><font color="#E5E5E5"> also</font>

719
00:29:53,510 --> 00:29:58,520
<font color="#E5E5E5">at the medium level</font><font color="#CCCCCC"> will do type</font>

720
00:29:56,000 --> 00:30:01,040
propagation and basic stack resolution

721
00:29:58,520 --> 00:30:03,410
<font color="#E5E5E5">what we do at</font><font color="#CCCCCC"> that point is take over</font>

722
00:30:01,040 --> 00:30:05,840
and try<font color="#E5E5E5"> to do</font><font color="#CCCCCC"> better stock analysis a</font>

723
00:30:03,410 --> 00:30:09,590
basic better it's basically guessing

724
00:30:05,840 --> 00:30:12,560
what<font color="#CCCCCC"> happens is when a binary</font><font color="#E5E5E5"> when any</font>

725
00:30:09,590 --> 00:30:14,959
disassembler is not a function<font color="#CCCCCC"> it ends</font>

726
00:30:12,560 --> 00:30:16,940
up to understand her instructions<font color="#CCCCCC"> or</font>

727
00:30:14,960 --> 00:30:19,640
referencing the staff and then<font color="#E5E5E5"> building</font>

728
00:30:16,940 --> 00:30:22,280
those as unique<font color="#CCCCCC"> variables so cool</font><font color="#E5E5E5"> if you</font>

729
00:30:19,640 --> 00:30:25,070
have structure on the staff that<font color="#CCCCCC"> will</font>

730
00:30:22,280 --> 00:30:27,110
<font color="#CCCCCC">give it and then some piece of code</font>

731
00:30:25,070 --> 00:30:29,240
references something<font color="#E5E5E5"> in the middle of it</font>

732
00:30:27,110 --> 00:30:29,959
<font color="#E5E5E5">it'll break that up into two</font><font color="#CCCCCC"> different</font>

733
00:30:29,240 --> 00:30:32,450
variables

734
00:30:29,960 --> 00:30:34,250
<font color="#E5E5E5">that's only actually one so later on if</font>

735
00:30:32,450 --> 00:30:36,140
<font color="#E5E5E5">you have a mem copy that copies into</font>

736
00:30:34,250 --> 00:30:38,390
that it may look like<font color="#CCCCCC"> it's overflowing</font>

737
00:30:36,140 --> 00:30:41,210
<font color="#CCCCCC">the bounds of that buffer but it's</font>

738
00:30:38,390 --> 00:30:43,430
really not<font color="#CCCCCC"> so we need to try</font><font color="#E5E5E5"> to filter</font>

739
00:30:41,210 --> 00:30:45,290
<font color="#CCCCCC">those cases and understand what the</font>

740
00:30:43,430 --> 00:30:48,070
potential sizes of these particular

741
00:30:45,290 --> 00:30:51,200
things<font color="#CCCCCC"> are before we can actually do</font>

742
00:30:48,070 --> 00:30:53,840
analysis on<font color="#E5E5E5"> them we can also track when</font>

743
00:30:51,200 --> 00:30:56,840
allocations on the heap are allocated or

744
00:30:53,840 --> 00:30:58,520
free<font color="#CCCCCC"> acute data flow</font><font color="#E5E5E5"> analysis and then</font>

745
00:30:56,840 --> 00:31:01,040
look for<font color="#E5E5E5"> commonly</font><font color="#CCCCCC"> its miss pump are</font>

746
00:30:58,520 --> 00:31:03,350
commonly misused functions and<font color="#E5E5E5"> also uh</font>

747
00:31:01,040 --> 00:31:06,889
<font color="#E5E5E5">deploy checking for common</font><font color="#CCCCCC"> cwe types</font>

748
00:31:03,350 --> 00:31:09,080
right so let's take a<font color="#E5E5E5"> look at how we end</font>

749
00:31:06,890 --> 00:31:10,760
up doing frequency analysis on busybox

750
00:31:09,080 --> 00:31:13,159
for this particular issue<font color="#E5E5E5"> and get a</font>

751
00:31:10,760 --> 00:31:15,950
sense<font color="#E5E5E5"> of how long the processing</font>

752
00:31:13,160 --> 00:31:19,940
<font color="#CCCCCC">actually</font><font color="#E5E5E5"> takes so I have this up here</font><font color="#CCCCCC"> on</font>

753
00:31:15,950 --> 00:31:21,830
this<font color="#CCCCCC"> top waa busy box so what's gonna</font>

754
00:31:19,940 --> 00:31:23,420
happen it's binary<font color="#CCCCCC"> ninja is gonna be</font>

755
00:31:21,830 --> 00:31:26,990
invoked<font color="#E5E5E5"> and it's gonna start processing</font>

756
00:31:23,420 --> 00:31:28,610
the processing time is something<font color="#E5E5E5"> that's</font>

757
00:31:26,990 --> 00:31:30,380
<font color="#E5E5E5">going</font><font color="#CCCCCC"> to be</font><font color="#E5E5E5"> required so</font>

758
00:31:28,610 --> 00:31:31,790
pioneering interest now opening this up

759
00:31:30,380 --> 00:31:33,180
<font color="#E5E5E5">and starting to</font><font color="#CCCCCC"> analyze the elf</font>

760
00:31:31,790 --> 00:31:35,159
structure and

761
00:31:33,180 --> 00:31:37,320
get<font color="#E5E5E5"> everything that it can</font><font color="#CCCCCC"> then it does</font>

762
00:31:35,160 --> 00:31:41,190
a linear sweep linear<font color="#E5E5E5"> sweep means that</font>

763
00:31:37,320 --> 00:31:42,960
we can resolve<font color="#E5E5E5"> and analyze functions</font>

764
00:31:41,190 --> 00:31:45,570
that<font color="#CCCCCC"> aren't all in the</font><font color="#E5E5E5"> normal execution</font>

765
00:31:42,960 --> 00:31:47,970
chain<font color="#E5E5E5"> so what you'll have is from</font><font color="#CCCCCC"> main</font>

766
00:31:45,570 --> 00:31:49,800
<font color="#E5E5E5">or</font><font color="#CCCCCC"> a knit</font><font color="#E5E5E5"> things</font><font color="#CCCCCC"> will start happening if</font>

767
00:31:47,970 --> 00:31:52,500
a<font color="#E5E5E5"> function is registered as a</font><font color="#CCCCCC"> callback</font>

768
00:31:49,800 --> 00:31:54,060
<font color="#E5E5E5">as opposed to a direct call</font><font color="#CCCCCC"> LBD that</font>

769
00:31:52,500 --> 00:31:56,130
linear sweep to pick those things up

770
00:31:54,060 --> 00:31:57,750
so now results are starting to stream in

771
00:31:56,130 --> 00:32:00,690
and<font color="#E5E5E5"> we see things like</font><font color="#CCCCCC"> stirring</font><font color="#E5E5E5"> copy</font>

772
00:31:57,750 --> 00:32:03,480
copy<font color="#E5E5E5"> 63 bytes into</font><font color="#CCCCCC"> a</font><font color="#E5E5E5"> 60 byte stack</font>

773
00:32:00,690 --> 00:32:05,910
buffer or unknown bytes meaning<font color="#E5E5E5"> what</font>

774
00:32:03,480 --> 00:32:08,040
happens is the buffer is probably passed

775
00:32:05,910 --> 00:32:10,380
into<font color="#E5E5E5"> a function and then that function</font>

776
00:32:08,040 --> 00:32:14,850
<font color="#E5E5E5">ends up</font><font color="#CCCCCC"> using that</font><font color="#E5E5E5"> information that's</font>

777
00:32:10,380 --> 00:32:16,620
<font color="#E5E5E5">passed in to copy to a stack buffer so</font>

778
00:32:14,850 --> 00:32:19,379
we can't<font color="#E5E5E5"> actually resolve that until we</font>

779
00:32:16,620 --> 00:32:21,649
do more analysis and in<font color="#E5E5E5"> most cases we</font>

780
00:32:19,380 --> 00:32:24,000
can't<font color="#E5E5E5"> actually resolve at all</font>

781
00:32:21,650 --> 00:32:25,950
so what's actually<font color="#E5E5E5"> coming in here are</font>

782
00:32:24,000 --> 00:32:27,960
some other<font color="#CCCCCC"> things that</font><font color="#E5E5E5"> we look for like</font>

783
00:32:25,950 --> 00:32:31,020
mem copy store<font color="#CCCCCC"> copies during</font><font color="#E5E5E5"> copies</font>

784
00:32:27,960 --> 00:32:32,280
<font color="#E5E5E5">these are things that are interesting</font><font color="#CCCCCC"> to</font>

785
00:32:31,020 --> 00:32:34,410
<font color="#E5E5E5">know as far as</font><font color="#CCCCCC"> like</font><font color="#E5E5E5"> what's actually</font>

786
00:32:32,280 --> 00:32:37,590
happening<font color="#E5E5E5"> and then we see the</font><font color="#CCCCCC"> the string</font>

787
00:32:34,410 --> 00:32:40,620
<font color="#E5E5E5">that actually just popped up</font><font color="#CCCCCC"> so if an</font>

788
00:32:37,590 --> 00:32:42,899
ant<font color="#E5E5E5"> if somebody who's looking</font><font color="#CCCCCC"> for</font><font color="#E5E5E5"> issues</font>

789
00:32:40,620 --> 00:32:45,389
<font color="#E5E5E5">and the in software and just running</font>

790
00:32:42,900 --> 00:32:47,100
strings they're gonna find a bunch of

791
00:32:45,390 --> 00:32:49,380
junk<font color="#CCCCCC"> then</font><font color="#E5E5E5"> doesn't matter at all what</font>

792
00:32:47,100 --> 00:32:51,270
<font color="#CCCCCC">ends up happening here is we can take</font>

793
00:32:49,380 --> 00:32:54,570
this information<font color="#E5E5E5"> that comes out of</font><font color="#CCCCCC"> this</font>

794
00:32:51,270 --> 00:32:57,420
and go through all<font color="#CCCCCC"> of the busybox</font>

795
00:32:54,570 --> 00:32:59,580
samples that<font color="#E5E5E5"> we have do this analysis</font>

796
00:32:57,420 --> 00:33:02,250
<font color="#E5E5E5">figure out what gets</font><font color="#CCCCCC"> referenced in stir</font>

797
00:32:59,580 --> 00:33:05,070
and<font color="#CCCCCC"> errors</font><font color="#E5E5E5"> and start pairs and then go</font>

798
00:33:02,250 --> 00:33:07,260
to the actual<font color="#CCCCCC"> fizzy</font><font color="#E5E5E5"> box project</font><font color="#CCCCCC"> online</font>

799
00:33:05,070 --> 00:33:09,030
download all of<font color="#E5E5E5"> their versions and</font>

800
00:33:07,260 --> 00:33:11,160
perform the<font color="#CCCCCC"> state and frequency analysis</font>

801
00:33:09,030 --> 00:33:14,610
<font color="#E5E5E5">and then what we</font><font color="#CCCCCC"> end up</font><font color="#E5E5E5"> doing is doing</font>

802
00:33:11,160 --> 00:33:17,970
<font color="#E5E5E5">that</font><font color="#CCCCCC"> the difference between</font><font color="#E5E5E5"> them so if</font>

803
00:33:14,610 --> 00:33:20,189
we the 9000 574 unique versions of

804
00:33:17,970 --> 00:33:22,890
<font color="#CCCCCC">busybox that have run this through our</font>

805
00:33:20,190 --> 00:33:25,740
analyzers take the full<font color="#CCCCCC"> they're ends</font><font color="#E5E5E5"> up</font>

806
00:33:22,890 --> 00:33:28,080
<font color="#E5E5E5">being only 741 strings that are actually</font>

807
00:33:25,740 --> 00:33:31,530
passed to stir and stir<font color="#CCCCCC"> and compare</font><font color="#E5E5E5"> and</font>

808
00:33:28,080 --> 00:33:33,510
<font color="#CCCCCC">then you take the difference</font><font color="#E5E5E5"> everything</font>

809
00:33:31,530 --> 00:33:35,700
<font color="#CCCCCC">that exists inside of</font><font color="#E5E5E5"> normal</font><font color="#CCCCCC"> busybox</font>

810
00:33:33,510 --> 00:33:38,879
builds out there we can start<font color="#E5E5E5"> to see</font>

811
00:33:35,700 --> 00:33:41,940
<font color="#E5E5E5">patterns emerge from the types of things</font>

812
00:33:38,880 --> 00:33:44,130
<font color="#E5E5E5">that are implemented for and built</font><font color="#CCCCCC"> into</font>

813
00:33:41,940 --> 00:33:46,380
your<font color="#E5E5E5"> cluster sense of these busybox</font>

814
00:33:44,130 --> 00:33:48,170
things<font color="#CCCCCC"> i'm strings that</font><font color="#E5E5E5"> probably</font>

815
00:33:46,380 --> 00:33:51,000
there are strings<font color="#E5E5E5"> that indicate</font>

816
00:33:48,170 --> 00:33:53,310
functionality that's unique to<font color="#CCCCCC"> that</font>

817
00:33:51,000 --> 00:33:55,110
particular device then we can<font color="#E5E5E5"> use that</font>

818
00:33:53,310 --> 00:33:56,820
in validation that that is not<font color="#CCCCCC"> a</font>

819
00:33:55,110 --> 00:33:59,669
<font color="#E5E5E5">backdoor</font><font color="#CCCCCC"> type of credentials</font>

820
00:33:56,820 --> 00:34:04,020
so using<font color="#E5E5E5"> this type analysis allows us to</font>

821
00:33:59,670 --> 00:34:06,180
quickly do<font color="#E5E5E5"> that now there's a one most</font>

822
00:34:04,020 --> 00:34:09,360
<font color="#E5E5E5">mo</font><font color="#CCCCCC"> miss demo interesting because it</font>

823
00:34:06,180 --> 00:34:12,360
<font color="#E5E5E5">talks at the flaws of static analysis</font>

824
00:34:09,360 --> 00:34:15,629
<font color="#E5E5E5">one of the benefits of static analysis</font>

825
00:34:12,360 --> 00:34:17,550
is that<font color="#E5E5E5"> we</font><font color="#CCCCCC"> can analyze every piece it</font>

826
00:34:15,629 --> 00:34:19,830
doesn't matter if we can<font color="#CCCCCC"> actually</font><font color="#E5E5E5"> get</font>

827
00:34:17,550 --> 00:34:22,169
<font color="#E5E5E5">that location or hot and it'll analyze</font>

828
00:34:19,830 --> 00:34:24,449
dead code or code<font color="#CCCCCC"> that can</font><font color="#E5E5E5"> actually be</font>

829
00:34:22,168 --> 00:34:26,730
reached<font color="#E5E5E5"> so</font><font color="#CCCCCC"> the problem that</font><font color="#E5E5E5"> we have is</font>

830
00:34:24,449 --> 00:34:29,549
although<font color="#E5E5E5"> we get all this great code</font>

831
00:34:26,730 --> 00:34:31,710
coverage<font color="#E5E5E5"> once we're done with the</font>

832
00:34:29,550 --> 00:34:33,540
analysis it becomes a problem<font color="#E5E5E5"> of trying</font>

833
00:34:31,710 --> 00:34:35,820
<font color="#E5E5E5">to solve to that point or validate that</font>

834
00:34:33,540 --> 00:34:38,399
that<font color="#E5E5E5"> code can actually be hit so</font><font color="#CCCCCC"> what</font>

835
00:34:35,820 --> 00:34:40,350
we're looking at<font color="#E5E5E5"> here</font><font color="#CCCCCC"> is an ASIS device</font>

836
00:34:38,399 --> 00:34:42,899
that uses this feature<font color="#E5E5E5"> called download</font>

837
00:34:40,350 --> 00:34:45,330
<font color="#E5E5E5">master it's implemented into</font><font color="#CCCCCC"> two</font>

838
00:34:42,899 --> 00:34:48,629
<font color="#E5E5E5">slightly to be DQ</font><font color="#CCCCCC"> there custom version</font>

839
00:34:45,330 --> 00:34:52,620
of<font color="#E5E5E5"> late HTTP and it ends up being that</font>

840
00:34:48,629 --> 00:34:54,750
what you can do is pass a certain meta

841
00:34:52,620 --> 00:34:57,890
tag into this<font color="#CCCCCC"> particular device</font><font color="#E5E5E5"> and</font>

842
00:34:54,750 --> 00:35:01,920
trigger a buffer overflow<font color="#E5E5E5"> that allow</font>

843
00:34:57,890 --> 00:35:03,569
<font color="#CCCCCC">commit</font><font color="#E5E5E5"> execution or control over the</font>

844
00:35:01,920 --> 00:35:05,700
instruction pointer so let's go ahead

845
00:35:03,570 --> 00:35:07,290
<font color="#E5E5E5">and</font><font color="#CCCCCC"> run this analysis and when it</font><font color="#E5E5E5"> set up</font>

846
00:35:05,700 --> 00:35:09,930
we'll take<font color="#CCCCCC"> a look at it in binary ninja</font>

847
00:35:07,290 --> 00:35:11,610
I'll explain what's actually in here and

848
00:35:09,930 --> 00:35:14,790
then I'll explain<font color="#E5E5E5"> to you how it's</font>

849
00:35:11,610 --> 00:35:17,670
completely useless<font color="#E5E5E5"> so it ends up being a</font>

850
00:35:14,790 --> 00:35:20,279
<font color="#E5E5E5">problem that if anybody is</font><font color="#CCCCCC"> doing static</font>

851
00:35:17,670 --> 00:35:22,500
<font color="#E5E5E5">analysis in these types of systems there</font>

852
00:35:20,280 --> 00:35:25,890
<font color="#E5E5E5">is no guarantee without verification</font>

853
00:35:22,500 --> 00:35:28,050
<font color="#CCCCCC">that it impacts security at all so it's</font>

854
00:35:25,890 --> 00:35:30,390
dangerous<font color="#E5E5E5"> to just assume that issues</font>

855
00:35:28,050 --> 00:35:32,430
that we<font color="#E5E5E5"> find during this</font><font color="#CCCCCC"> process</font><font color="#E5E5E5"> are</font>

856
00:35:30,390 --> 00:35:34,319
directly applicable<font color="#CCCCCC"> to that specific</font>

857
00:35:32,430 --> 00:35:37,049
device<font color="#E5E5E5"> in its specific configuration</font>

858
00:35:34,320 --> 00:35:39,210
<font color="#E5E5E5">without an actual execution state so</font>

859
00:35:37,050 --> 00:35:42,050
that<font color="#CCCCCC"> comes the a problem that we need</font><font color="#E5E5E5"> to</font>

860
00:35:39,210 --> 00:35:44,820
solve<font color="#E5E5E5"> after this it's easy to find bugs</font>

861
00:35:42,050 --> 00:35:46,320
<font color="#E5E5E5">everybody can find bugs</font><font color="#CCCCCC"> it's hard</font><font color="#E5E5E5"> to</font>

862
00:35:44,820 --> 00:35:49,020
validate<font color="#E5E5E5"> bugs when you don't actually</font>

863
00:35:46,320 --> 00:35:52,230
<font color="#E5E5E5">have the system or emulation takes a lot</font>

864
00:35:49,020 --> 00:35:54,060
<font color="#CCCCCC">of time</font><font color="#E5E5E5"> an effort to accomplish so this</font>

865
00:35:52,230 --> 00:35:56,400
will be done here<font color="#E5E5E5"> in just a few seconds</font>

866
00:35:54,060 --> 00:35:59,400
and then we can jump to<font color="#E5E5E5"> the location so</font>

867
00:35:56,400 --> 00:35:59,869
<font color="#E5E5E5">I know just by seeing this -</font><font color="#CCCCCC"> before that</font>

868
00:35:59,400 --> 00:36:02,299
<font color="#E5E5E5">this</font><font color="#CCCCCC"> is the</font>

869
00:35:59,869 --> 00:36:03,829
problem looking at<font color="#E5E5E5"> so it does say that</font>

870
00:36:02,299 --> 00:36:08,029
we've copied an unknown number of bytes

871
00:36:03,829 --> 00:36:12,740
<font color="#E5E5E5">into a five by 512 byte buffer and if we</font>

872
00:36:08,029 --> 00:36:19,099
go<font color="#E5E5E5"> to this location</font><font color="#CCCCCC"> one eight</font><font color="#E5E5E5"> one f-80c</font>

873
00:36:12,740 --> 00:36:20,749
see right here in binary<font color="#E5E5E5"> ninja what we</font>

874
00:36:19,099 --> 00:36:24,650
end up<font color="#E5E5E5"> getting is to this function</font>

875
00:36:20,749 --> 00:36:27,200
yet<font color="#CCCCCC"> we're all URL so get wrong URL</font>

876
00:36:24,650 --> 00:36:30,740
takes one<font color="#CCCCCC"> argument it actually has just</font>

877
00:36:27,200 --> 00:36:32,569
<font color="#E5E5E5">one variable which is if you take the</font>

878
00:36:30,740 --> 00:36:36,578
difference<font color="#CCCCCC"> between two hundred 18x18</font>

879
00:36:32,569 --> 00:36:38,930
<font color="#CCCCCC">acts ends up being 512 bytes</font><font color="#E5E5E5"> or 200</font><font color="#CCCCCC"> hat</font>

880
00:36:36,579 --> 00:36:41,569
<font color="#E5E5E5">what we're doing here is taking this</font>

881
00:36:38,930 --> 00:36:44,419
stack buffer and not setting<font color="#E5E5E5"> it to 512</font>

882
00:36:41,569 --> 00:36:46,670
<font color="#E5E5E5">null bytes and then looking at the input</font>

883
00:36:44,420 --> 00:36:49,460
<font color="#CCCCCC">which should look like this</font><font color="#E5E5E5"> which meta</font><font color="#CCCCCC"> h</font>

884
00:36:46,670 --> 00:36:54,289
refresh and this information<font color="#E5E5E5"> what this</font>

885
00:36:49,460 --> 00:36:57,319
does is it parses out this information

886
00:36:54,289 --> 00:37:02,079
<font color="#E5E5E5">so everything in the you are equals here</font>

887
00:36:57,319 --> 00:37:05,930
so if we<font color="#CCCCCC"> can supply this URL</font><font color="#E5E5E5"> equals this</font>

888
00:37:02,079 --> 00:37:08,869
string here if we can<font color="#E5E5E5"> input</font><font color="#CCCCCC"> that that's</font>

889
00:37:05,930 --> 00:37:10,640
larger than 512 bytes then we will go

890
00:37:08,869 --> 00:37:12,769
over<font color="#E5E5E5"> the balance of that</font><font color="#CCCCCC"> buffer and then</font>

891
00:37:10,640 --> 00:37:15,379
once to get<font color="#E5E5E5"> raw URL returns we'll have</font>

892
00:37:12,769 --> 00:37:16,788
control so this information is<font color="#E5E5E5"> what</font>

893
00:37:15,380 --> 00:37:18,859
we're interested<font color="#E5E5E5"> and this is what we</font>

894
00:37:16,789 --> 00:37:21,680
want<font color="#E5E5E5"> to try to get to this system</font><font color="#CCCCCC"> so we</font>

895
00:37:18,859 --> 00:37:23,749
found you<font color="#CCCCCC"> to its by depth by but now we</font>

896
00:37:21,680 --> 00:37:27,078
have to try<font color="#E5E5E5"> to solve backwards to see if</font>

897
00:37:23,749 --> 00:37:30,379
we can get user<font color="#CCCCCC"> input into at</font><font color="#E5E5E5"> that point</font>

898
00:37:27,079 --> 00:37:32,210
so the issue is down here and the

899
00:37:30,380 --> 00:37:34,039
problem<font color="#CCCCCC"> that really</font><font color="#E5E5E5"> stems here is that n</font>

900
00:37:32,210 --> 00:37:36,650
is actually<font color="#E5E5E5"> calculated based on the</font>

901
00:37:34,039 --> 00:37:38,720
source buffer so the input buffer<font color="#E5E5E5"> is</font>

902
00:37:36,650 --> 00:37:42,980
calculated from the start<font color="#CCCCCC"> the end of the</font>

903
00:37:38,720 --> 00:37:44,390
URL<font color="#CCCCCC"> that comes from</font><font color="#E5E5E5"> these two chunks</font>

904
00:37:42,980 --> 00:37:47,690
right here where it's<font color="#CCCCCC"> actually looking</font>

905
00:37:44,390 --> 00:37:49,400
<font color="#E5E5E5">for that and then what happens is it</font>

906
00:37:47,690 --> 00:37:53,269
ends up<font color="#E5E5E5"> hop</font><font color="#CCCCCC"> putting all that information</font>

907
00:37:49,400 --> 00:37:55,910
<font color="#CCCCCC">into a 512 byte buffer based on the size</font>

908
00:37:53,269 --> 00:37:58,788
of<font color="#E5E5E5"> the source this is a huge no-no</font>

909
00:37:55,910 --> 00:38:00,140
should never be done and it's one<font color="#E5E5E5"> of the</font>

910
00:37:58,789 --> 00:38:02,930
common mistakes<font color="#CCCCCC"> that we end</font><font color="#E5E5E5"> up</font><font color="#CCCCCC"> looking</font>

911
00:38:00,140 --> 00:38:04,460
for<font color="#E5E5E5"> and see I'd often the problem in</font>

912
00:38:02,930 --> 00:38:06,950
this<font color="#CCCCCC"> particular case is if you</font><font color="#E5E5E5"> try to</font>

913
00:38:04,460 --> 00:38:08,720
<font color="#CCCCCC">that location it ends up never</font>

914
00:38:06,950 --> 00:38:10,399
triggering at least in<font color="#E5E5E5"> nothing that</font>

915
00:38:08,720 --> 00:38:12,828
we've ever been<font color="#E5E5E5"> told assault or deal on</font>

916
00:38:10,400 --> 00:38:13,370
a live device<font color="#E5E5E5"> I only took a few hours to</font>

917
00:38:12,829 --> 00:38:16,280
<font color="#E5E5E5">charge</font>

918
00:38:13,370 --> 00:38:19,190
<font color="#E5E5E5">date it but the problem</font><font color="#CCCCCC"> is we</font><font color="#E5E5E5"> can not</font>

919
00:38:16,280 --> 00:38:22,330
through static analysis imply that any

920
00:38:19,190 --> 00:38:25,220
of the<font color="#E5E5E5"> bugs that we find are a threat to</font>

921
00:38:22,330 --> 00:38:27,830
the infrastructure of<font color="#E5E5E5"> some organization</font>

922
00:38:25,220 --> 00:38:29,839
<font color="#E5E5E5">without validation</font><font color="#CCCCCC"> and if we make that</font>

923
00:38:27,830 --> 00:38:31,670
assessment on you better be store that

924
00:38:29,840 --> 00:38:34,460
we can<font color="#CCCCCC"> actually do it which requires</font>

925
00:38:31,670 --> 00:38:35,540
much more<font color="#E5E5E5"> advanced analysis so I don't</font>

926
00:38:34,460 --> 00:38:37,340
want to come<font color="#E5E5E5"> out here and say that</font>

927
00:38:35,540 --> 00:38:40,029
finding<font color="#CCCCCC"> backdoors is this easy thing</font>

928
00:38:37,340 --> 00:38:41,960
finding indications<font color="#CCCCCC"> of backdoors is easy</font>

929
00:38:40,030 --> 00:38:43,940
validating and proving them especially

930
00:38:41,960 --> 00:38:47,930
on devices<font color="#E5E5E5"> that you don't have</font><font color="#CCCCCC"> access to</font>

931
00:38:43,940 --> 00:38:50,870
do is<font color="#E5E5E5"> really</font><font color="#CCCCCC"> difficult so that</font><font color="#E5E5E5"> kind of</font>

932
00:38:47,930 --> 00:38:53,210
brings us to the end<font color="#E5E5E5"> of this sort of the</font>

933
00:38:50,870 --> 00:38:55,370
whole world<font color="#E5E5E5"> of looking at the research</font>

934
00:38:53,210 --> 00:38:57,110
summary is again for verified IOT

935
00:38:55,370 --> 00:39:00,170
devices that target<font color="#CCCCCC"> seventy five unique</font>

936
00:38:57,110 --> 00:39:02,410
<font color="#E5E5E5">so or unique backdoors seventy five</font>

937
00:39:00,170 --> 00:39:05,090
devices<font color="#CCCCCC"> 11 we're still working to verify</font>

938
00:39:02,410 --> 00:39:06,799
<font color="#CCCCCC">107</font><font color="#E5E5E5"> devices and then we're trying to</font>

939
00:39:05,090 --> 00:39:09,320
work with<font color="#E5E5E5"> manufacturers on getting</font>

940
00:39:06,800 --> 00:39:11,690
sensation to them the problem that<font color="#E5E5E5"> that</font>

941
00:39:09,320 --> 00:39:14,180
we think that<font color="#CCCCCC"> we're encountering</font><font color="#E5E5E5"> is that</font>

942
00:39:11,690 --> 00:39:16,100
<font color="#E5E5E5">any factor is to know of potential bugs</font>

943
00:39:14,180 --> 00:39:18,379
they want to know upon<font color="#E5E5E5"> our abilities so</font>

944
00:39:16,100 --> 00:39:20,150
they need to be proved before before<font color="#CCCCCC"> we</font>

945
00:39:18,380 --> 00:39:22,250
can do<font color="#E5E5E5"> that and if we also need to track</font>

946
00:39:20,150 --> 00:39:26,510
what the status is<font color="#CCCCCC"> of all</font><font color="#E5E5E5"> of these</font>

947
00:39:22,250 --> 00:39:28,460
particular devices are<font color="#E5E5E5"> so um that's</font>

948
00:39:26,510 --> 00:39:30,200
that's kind of it I know it's a lot of

949
00:39:28,460 --> 00:39:31,730
<font color="#CCCCCC">information about</font><font color="#E5E5E5"> the process of</font>

950
00:39:30,200 --> 00:39:34,640
performing static analysis here

951
00:39:31,730 --> 00:39:36,200
<font color="#E5E5E5">hopefully it gives sense of the types of</font>

952
00:39:34,640 --> 00:39:39,080
<font color="#E5E5E5">research or the types of work that</font><font color="#CCCCCC"> you</font>

953
00:39:36,200 --> 00:39:41,029
can<font color="#E5E5E5"> employ or static and Danny now</font><font color="#CCCCCC"> let's</font>

954
00:39:39,080 --> 00:39:42,380
this<font color="#E5E5E5"> again these things</font><font color="#CCCCCC"> I'm inside</font><font color="#E5E5E5"> of</font>

955
00:39:41,030 --> 00:39:45,530
the patterns that<font color="#E5E5E5"> you can look try to</font>

956
00:39:42,380 --> 00:39:47,570
identify<font color="#E5E5E5"> back doors so with that I'm I'm</font>

957
00:39:45,530 --> 00:39:49,960
done and open to any<font color="#CCCCCC"> questions</font><font color="#E5E5E5"> that you</font>

958
00:39:47,570 --> 00:39:49,960
paid<font color="#CCCCCC"> have</font>

959
00:40:05,820 --> 00:40:12,660
thank you very<font color="#E5E5E5"> much John any questions</font>

960
00:40:08,290 --> 00:40:12,660
from<font color="#CCCCCC"> the</font><font color="#E5E5E5"> audience</font><font color="#CCCCCC"> yes</font>

961
00:40:23,350 --> 00:40:31,850
this<font color="#E5E5E5"> is sounds good</font><font color="#CCCCCC"> we will</font><font color="#E5E5E5"> have to</font>

962
00:40:25,880 --> 00:40:33,590
<font color="#E5E5E5">actually convince</font><font color="#CCCCCC"> yeah</font><font color="#E5E5E5"> okay yeah</font>

963
00:40:31,850 --> 00:40:37,759
<font color="#E5E5E5">interesting research and I was</font><font color="#CCCCCC"> wondering</font>

964
00:40:33,590 --> 00:40:41,900
if you<font color="#E5E5E5"> are going to share the</font><font color="#CCCCCC"> code or</font>

965
00:40:37,760 --> 00:40:43,280
<font color="#E5E5E5">the tools you've created Oh</font><font color="#CCCCCC"> sharing the</font>

966
00:40:41,900 --> 00:40:48,580
code<font color="#E5E5E5"> in the tools we created as weather</font>

967
00:40:43,280 --> 00:40:50,810
that you<font color="#E5E5E5"> asked yes</font><font color="#CCCCCC"> so we are looking</font><font color="#E5E5E5"> to</font>

968
00:40:48,580 --> 00:40:53,270
<font color="#E5E5E5">potentially do that for segments of our</font>

969
00:40:50,810 --> 00:40:55,850
code<font color="#E5E5E5"> specifically the source analyzers</font>

970
00:40:53,270 --> 00:40:58,280
<font color="#CCCCCC">and tools back into binary ninja plugins</font>

971
00:40:55,850 --> 00:41:00,259
it's something that we're we're<font color="#E5E5E5"> a really</font>

972
00:40:58,280 --> 00:41:02,180
<font color="#E5E5E5">new company</font><font color="#CCCCCC"> a startup that's</font><font color="#E5E5E5"> been around</font>

973
00:41:00,260 --> 00:41:05,240
<font color="#E5E5E5">for about a year so</font><font color="#CCCCCC"> we're still trying</font>

974
00:41:02,180 --> 00:41:07,430
<font color="#CCCCCC">to understand which pieces are sort of</font>

975
00:41:05,240 --> 00:41:09,470
most beneficial to open<font color="#E5E5E5"> source and which</font>

976
00:41:07,430 --> 00:41:11,600
are not<font color="#E5E5E5"> from like a competitive</font>

977
00:41:09,470 --> 00:41:13,189
standpoint in the market<font color="#E5E5E5"> it's something</font>

978
00:41:11,600 --> 00:41:15,259
<font color="#E5E5E5">that I've done in the past</font><font color="#CCCCCC"> on other</font>

979
00:41:13,190 --> 00:41:17,420
tools and certainly will<font color="#CCCCCC"> continue to you</font>

980
00:41:15,260 --> 00:41:18,680
in my<font color="#CCCCCC"> own personal time but I can't</font>

981
00:41:17,420 --> 00:41:20,570
answer that<font color="#E5E5E5"> question in</font><font color="#CCCCCC"> terms of</font><font color="#E5E5E5"> the</font>

982
00:41:18,680 --> 00:41:21,859
company<font color="#CCCCCC"> just yet</font><font color="#E5E5E5"> but</font><font color="#CCCCCC"> I</font><font color="#E5E5E5"> know that it's</font>

983
00:41:20,570 --> 00:41:23,720
something<font color="#CCCCCC"> that we're very interested</font><font color="#E5E5E5"> in</font>

984
00:41:21,860 --> 00:41:25,550
<font color="#E5E5E5">doing working</font><font color="#CCCCCC"> with</font><font color="#E5E5E5"> the community</font><font color="#CCCCCC"> on</font>

985
00:41:23,720 --> 00:41:28,399
tools that can help<font color="#CCCCCC"> this research and</font>

986
00:41:25,550 --> 00:41:31,610
individual researchers so<font color="#CCCCCC"> I might impact</font>

987
00:41:28,400 --> 00:41:33,020
<font color="#E5E5E5">pipe</font><font color="#CCCCCC"> yep</font><font color="#E5E5E5"> thanks yeah please try to</font>

988
00:41:31,610 --> 00:41:35,120
contact me<font color="#CCCCCC"> later on and hopefully I can</font>

989
00:41:33,020 --> 00:41:38,870
<font color="#E5E5E5">give you a status</font><font color="#CCCCCC"> update on that</font><font color="#E5E5E5"> okay</font>

990
00:41:35,120 --> 00:41:45,560
<font color="#E5E5E5">thanks thanks</font><font color="#CCCCCC"> any other questions from</font>

991
00:41:38,870 --> 00:41:47,600
<font color="#CCCCCC">the</font><font color="#E5E5E5"> audience</font><font color="#CCCCCC"> for John no</font><font color="#E5E5E5"> well okay well</font>

992
00:41:45,560 --> 00:41:50,630
John I believe<font color="#CCCCCC"> that's it</font><font color="#E5E5E5"> thank you</font><font color="#CCCCCC"> very</font>

993
00:41:47,600 --> 00:41:53,360
much for for taking<font color="#CCCCCC"> the time to do this</font>

994
00:41:50,630 --> 00:41:55,460
presentation<font color="#E5E5E5"> it is via Skype</font><font color="#CCCCCC"> and again</font>

995
00:41:53,360 --> 00:41:57,530
we're<font color="#CCCCCC"> very sorry now</font><font color="#E5E5E5"> not to have you</font>

996
00:41:55,460 --> 00:42:00,890
being<font color="#E5E5E5"> able to join us</font><font color="#CCCCCC"> and sorry for the</font>

997
00:41:57,530 --> 00:42:03,980
the the<font color="#CCCCCC"> hiccups</font><font color="#E5E5E5"> earlier before</font><font color="#CCCCCC"> we</font>

998
00:42:00,890 --> 00:42:06,129
<font color="#CCCCCC">started today thanks a</font><font color="#E5E5E5"> lot thank you so</font>

999
00:42:03,980 --> 00:42:06,130
much

