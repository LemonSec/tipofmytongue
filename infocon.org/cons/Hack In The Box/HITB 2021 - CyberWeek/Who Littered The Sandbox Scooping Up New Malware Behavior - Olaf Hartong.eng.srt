1
00:00:06,399 --> 00:00:08,559
hi all thanks for coming

2
00:00:08,559 --> 00:00:09,440
so

3
00:00:09,440 --> 00:00:11,840
my talk will be about malware once the

4
00:00:11,840 --> 00:00:13,599
clicker starts working so that's

5
00:00:13,599 --> 00:00:14,920
interesting hold

6
00:00:14,920 --> 00:00:18,400
on my

7
00:00:19,199 --> 00:00:22,320
talk will be

8
00:00:27,439 --> 00:00:28,960
interesting where it worked before and

9
00:00:28,960 --> 00:00:31,359
now it doesn't of course so

10
00:00:31,359 --> 00:00:33,680
ah there we go it is all right so this

11
00:00:33,680 --> 00:00:35,360
is where it all started for me the whole

12
00:00:35,360 --> 00:00:37,360
research and of course most people know

13
00:00:37,360 --> 00:00:39,360
this right where there's all kinds of

14
00:00:39,360 --> 00:00:41,760
malware or ransomware notes that are

15
00:00:41,760 --> 00:00:42,879
being used

16
00:00:42,879 --> 00:00:44,960
some are older some may not exist

17
00:00:44,960 --> 00:00:47,760
anymore like mace

18
00:00:47,760 --> 00:00:49,680
but that was primary the primary goal of

19
00:00:49,680 --> 00:00:51,520
my research and it started out there so

20
00:00:51,520 --> 00:00:53,760
i'm oliverton i got announced already

21
00:00:53,760 --> 00:00:55,520
i'm the co-founder of falcon force which

22
00:00:55,520 --> 00:00:57,920
is a company in the netherlands

23
00:00:57,920 --> 00:01:00,559
and i primarily focus on detection

24
00:01:00,559 --> 00:01:02,800
research so all kinds of behavioral kind

25
00:01:02,800 --> 00:01:04,720
of like detections sometimes i still do

26
00:01:04,720 --> 00:01:06,799
ir

27
00:01:06,799 --> 00:01:08,799
i never studied anything in computer

28
00:01:08,799 --> 00:01:10,240
science i used to be a documentary

29
00:01:10,240 --> 00:01:12,400
photographer and for some reason i ended

30
00:01:12,400 --> 00:01:13,920
up in the security space and i actually

31
00:01:13,920 --> 00:01:15,759
really like it

32
00:01:15,759 --> 00:01:17,840
i have two young sons which i really

33
00:01:17,840 --> 00:01:19,200
love the bits

34
00:01:19,200 --> 00:01:21,360
and of course i like warm hugs like the

35
00:01:21,360 --> 00:01:23,040
frozen olaf does

36
00:01:23,040 --> 00:01:24,880
so if you want to reach out to me these

37
00:01:24,880 --> 00:01:26,240
are my contact details if you have

38
00:01:26,240 --> 00:01:28,080
questions and you forgot to ask them

39
00:01:28,080 --> 00:01:30,000
this always always good

40
00:01:30,000 --> 00:01:32,000
so i would really start for me

41
00:01:32,000 --> 00:01:34,400
is um over a year ago there was this

42
00:01:34,400 --> 00:01:37,360
article by catelyn campano on the zdnet

43
00:01:37,360 --> 00:01:39,439
website he now works for for another

44
00:01:39,439 --> 00:01:41,360
another page but definitely follow his

45
00:01:41,360 --> 00:01:44,159
work he does a really good reporting

46
00:01:44,159 --> 00:01:46,560
um and what they did is they

47
00:01:46,560 --> 00:01:48,399
made a sort of dissection between the

48
00:01:48,399 --> 00:01:51,040
ransomware that got up that get executed

49
00:01:51,040 --> 00:01:53,200
but the primary malware that actually

50
00:01:53,200 --> 00:01:55,280
got in there so the initial payloads are

51
00:01:55,280 --> 00:01:56,719
usually different than the than the

52
00:01:56,719 --> 00:01:58,719
ransomware that they execute

53
00:01:58,719 --> 00:02:00,799
and what they what they made is a sort

54
00:02:00,799 --> 00:02:02,320
of overview of

55
00:02:02,320 --> 00:02:05,040
all the bigger

56
00:02:05,040 --> 00:02:07,439
initial access vectors

57
00:02:07,439 --> 00:02:09,758
with the with the malware that was tied

58
00:02:09,758 --> 00:02:12,239
to it or it was known to be executed by

59
00:02:12,239 --> 00:02:14,400
them so basically in the end they had a

60
00:02:14,400 --> 00:02:15,840
sort of listing

61
00:02:15,840 --> 00:02:18,239
of uh of all these families and then

62
00:02:18,239 --> 00:02:19,599
sometimes there are some duplicates but

63
00:02:19,599 --> 00:02:21,200
this is a long list right so it didn't

64
00:02:21,200 --> 00:02:22,400
really work for me

65
00:02:22,400 --> 00:02:24,560
what i usually try to do is visualize it

66
00:02:24,560 --> 00:02:26,239
and then it makes makes it a little bit

67
00:02:26,239 --> 00:02:28,319
more readable for me so you can see all

68
00:02:28,319 --> 00:02:30,319
kinds of correlations starting to

69
00:02:30,319 --> 00:02:32,080
develop and this is of course a very

70
00:02:32,080 --> 00:02:34,160
small subsection of the real

71
00:02:34,160 --> 00:02:36,080
the real world but this was an

72
00:02:36,080 --> 00:02:38,319
interesting factor for me to see

73
00:02:38,319 --> 00:02:39,760
let's see if i can start building

74
00:02:39,760 --> 00:02:42,319
detections on the initial vectors that

75
00:02:42,319 --> 00:02:44,800
aren't being picked up by the normal av

76
00:02:44,800 --> 00:02:46,319
or the edrs

77
00:02:46,319 --> 00:02:48,400
to see if i can do something with the

78
00:02:48,400 --> 00:02:50,560
behavior that might not lead to that

79
00:02:50,560 --> 00:02:52,640
ransomware states in the end

80
00:02:52,640 --> 00:02:54,239
so that was that was sort of the goal of

81
00:02:54,239 --> 00:02:55,680
my research and some of some of the

82
00:02:55,680 --> 00:02:58,159
interesting bits are where trickbot was

83
00:02:58,159 --> 00:03:00,319
using reich and then later on started

84
00:03:00,319 --> 00:03:02,640
conti which is actually a sort of new

85
00:03:02,640 --> 00:03:04,640
version of ryuk

86
00:03:04,640 --> 00:03:05,920
so these kind of things were interesting

87
00:03:05,920 --> 00:03:08,159
right and then all that rebranding that

88
00:03:08,159 --> 00:03:10,239
constantly happens this is from from

89
00:03:10,239 --> 00:03:12,400
brian krebs and i think it's outdated

90
00:03:12,400 --> 00:03:14,000
already because ramp is now there and

91
00:03:14,000 --> 00:03:15,599
there's all kinds of other spin-offs

92
00:03:15,599 --> 00:03:16,720
there and they're constantly

93
00:03:16,720 --> 00:03:19,120
redeveloping their even their brand

94
00:03:19,120 --> 00:03:21,360
image where they now are are using all

95
00:03:21,360 --> 00:03:23,519
kinds of fancier almost corporate like

96
00:03:23,519 --> 00:03:24,720
logos

97
00:03:24,720 --> 00:03:26,480
um some of them are interesting

98
00:03:26,480 --> 00:03:29,200
payload.bin i'm dutch so miffy is very

99
00:03:29,200 --> 00:03:31,680
famous it looks quite like it so it's a

100
00:03:31,680 --> 00:03:33,680
bit of copyright infringement even going

101
00:03:33,680 --> 00:03:35,680
on there um

102
00:03:35,680 --> 00:03:37,200
but but the interesting bit for me was

103
00:03:37,200 --> 00:03:39,040
like if they rebrand

104
00:03:39,040 --> 00:03:41,440
are they also changing their tactics and

105
00:03:41,440 --> 00:03:43,519
are they how are they developing and are

106
00:03:43,519 --> 00:03:46,480
they cooperating with each other so

107
00:03:46,480 --> 00:03:48,159
these were all kinds of hypotheses that

108
00:03:48,159 --> 00:03:50,879
i wanted to to to further develop and in

109
00:03:50,879 --> 00:03:52,239
terms of marketing some of these

110
00:03:52,239 --> 00:03:54,640
websites look quite nice right it's

111
00:03:54,640 --> 00:03:57,360
pretty logo nice colors but it's also

112
00:03:57,360 --> 00:03:58,879
kind of conflicting where they say if

113
00:03:58,879 --> 00:04:01,200
you're a client of us but they also

114
00:04:01,200 --> 00:04:03,040
mentioned that they're a cartel website

115
00:04:03,040 --> 00:04:05,200
so they're not they're not completely

116
00:04:05,200 --> 00:04:08,080
sure what they are yet but also grief uh

117
00:04:08,080 --> 00:04:10,159
comes with all kinds of interesting

118
00:04:10,159 --> 00:04:12,239
marketing material where they have of

119
00:04:12,239 --> 00:04:14,400
course very good numbers into into their

120
00:04:14,400 --> 00:04:16,399
direction but it's kind of weird that

121
00:04:16,399 --> 00:04:18,399
they are starting to develop more and

122
00:04:18,399 --> 00:04:20,880
more into real like companies of course

123
00:04:20,880 --> 00:04:21,839
their

124
00:04:21,839 --> 00:04:23,919
their business model is kind of weird

125
00:04:23,919 --> 00:04:26,320
but also they have all kinds of fancy uh

126
00:04:26,320 --> 00:04:28,720
proclamations where they won't ask also

127
00:04:28,720 --> 00:04:31,120
or attack hospitals or other

128
00:04:31,120 --> 00:04:33,759
institutions and they have all kinds of

129
00:04:33,759 --> 00:04:36,000
sort of company profiles and they even

130
00:04:36,000 --> 00:04:37,360
go as far

131
00:04:37,360 --> 00:04:39,759
as as partnering up with all kinds of

132
00:04:39,759 --> 00:04:42,720
affiliates which is now more common

133
00:04:42,720 --> 00:04:43,680
um

134
00:04:43,680 --> 00:04:45,520
and and the weird thing even is they do

135
00:04:45,520 --> 00:04:47,360
all kinds of fancy metrics that you can

136
00:04:47,360 --> 00:04:49,199
also see at some of the vendor websites

137
00:04:49,199 --> 00:04:50,639
where they compare

138
00:04:50,639 --> 00:04:52,560
uh their crypto

139
00:04:52,560 --> 00:04:54,320
and their exhaustration tooling against

140
00:04:54,320 --> 00:04:55,840
the other ones and how fast they are and

141
00:04:55,840 --> 00:04:57,120
if you don't believe them you can even

142
00:04:57,120 --> 00:04:58,639
download all the samples and do the

143
00:04:58,639 --> 00:05:01,280
executions yourself so it's pretty it's

144
00:05:01,280 --> 00:05:02,720
pretty weird for me

145
00:05:02,720 --> 00:05:03,759
um

146
00:05:03,759 --> 00:05:05,680
and sometimes they even promise you not

147
00:05:05,680 --> 00:05:07,759
to attack you anymore and even provide a

148
00:05:07,759 --> 00:05:09,199
list of recommendations that you should

149
00:05:09,199 --> 00:05:11,440
improve so that you don't get

150
00:05:11,440 --> 00:05:14,080
hacked at least by them anymore

151
00:05:14,080 --> 00:05:15,039
so

152
00:05:15,039 --> 00:05:16,639
i still don't know what to do with it

153
00:05:16,639 --> 00:05:19,280
and now even contius is breaching into

154
00:05:19,280 --> 00:05:20,800
the area where

155
00:05:20,800 --> 00:05:23,280
they might compromise a hospital but

156
00:05:23,280 --> 00:05:24,960
okay they won't ransom them anymore but

157
00:05:24,960 --> 00:05:26,479
they will sell it to somebody else that

158
00:05:26,479 --> 00:05:28,080
actually does so their

159
00:05:28,080 --> 00:05:31,120
their standards are are lowering i guess

160
00:05:31,120 --> 00:05:32,720
but back to the back to the initial

161
00:05:32,720 --> 00:05:35,280
vector so what i try to do now is is

162
00:05:35,280 --> 00:05:36,880
look at mitre attack

163
00:05:36,880 --> 00:05:39,840
and see which of those which of the

164
00:05:39,840 --> 00:05:41,680
actor groups are that are known are

165
00:05:41,680 --> 00:05:44,080
actually executing these these uh these

166
00:05:44,080 --> 00:05:46,240
initial payloads and there were a couple

167
00:05:46,240 --> 00:05:48,160
of things that are standing out for me

168
00:05:48,160 --> 00:05:51,280
already where you see there were

169
00:05:51,280 --> 00:05:53,600
18 malware families before and we only

170
00:05:53,600 --> 00:05:54,400
see

171
00:05:54,400 --> 00:05:57,120
a couple of groups being tied to it

172
00:05:57,120 --> 00:05:59,919
um and even uh not even all of them are

173
00:05:59,919 --> 00:06:01,759
mentioned in mitre attack so there's

174
00:06:01,759 --> 00:06:03,199
there's all kinds of conclusions that we

175
00:06:03,199 --> 00:06:05,120
can draw from this so one one of course

176
00:06:05,120 --> 00:06:06,400
is that

177
00:06:06,400 --> 00:06:08,880
miter only processes the data that is

178
00:06:08,880 --> 00:06:10,479
publicly reported and actually

179
00:06:10,479 --> 00:06:13,120
attributable which isn't always very

180
00:06:13,120 --> 00:06:14,960
easy to do so that is already a

181
00:06:14,960 --> 00:06:18,080
discrepancy that you have to account for

182
00:06:18,080 --> 00:06:21,120
plus that sometimes the the the software

183
00:06:21,120 --> 00:06:23,039
itself might be a miter attack but there

184
00:06:23,039 --> 00:06:24,479
isn't a

185
00:06:24,479 --> 00:06:26,319
real correlation yet so

186
00:06:26,319 --> 00:06:28,639
assume that that miter is incomplete is

187
00:06:28,639 --> 00:06:30,560
probably the the biggest the biggest

188
00:06:30,560 --> 00:06:33,600
mention here which is fine

189
00:06:33,600 --> 00:06:34,880
they do have a lot of valuable

190
00:06:34,880 --> 00:06:36,639
information but there's always

191
00:06:36,639 --> 00:06:38,560
additional research to be done

192
00:06:38,560 --> 00:06:40,160
and if you are able to disclose it

193
00:06:40,160 --> 00:06:42,240
publicly please do so that it can grow

194
00:06:42,240 --> 00:06:44,960
and more people can benefit from it

195
00:06:44,960 --> 00:06:46,639
and on the other side

196
00:06:46,639 --> 00:06:48,240
yeah they only update twice a year so

197
00:06:48,240 --> 00:06:50,720
it's always lagging behind

198
00:06:50,720 --> 00:06:52,560
um but but in the conti example for

199
00:06:52,560 --> 00:06:54,240
instance it's no it wasn't on the

200
00:06:54,240 --> 00:06:55,840
previous slide but it's actually known

201
00:06:55,840 --> 00:06:57,280
in mitre and as you can see there's

202
00:06:57,280 --> 00:06:58,960
there's a bunch of

203
00:06:58,960 --> 00:07:00,560
techniques that are that are they are

204
00:07:00,560 --> 00:07:02,479
known to be using so it's actually

205
00:07:02,479 --> 00:07:03,520
already

206
00:07:03,520 --> 00:07:05,919
quite visible it's just not tied to an

207
00:07:05,919 --> 00:07:07,520
actor group so if you want to rely on

208
00:07:07,520 --> 00:07:08,880
the actor group model which some

209
00:07:08,880 --> 00:07:11,599
companies still do you might miss some

210
00:07:11,599 --> 00:07:13,120
important stuff that is actually going

211
00:07:13,120 --> 00:07:14,880
on already

212
00:07:14,880 --> 00:07:16,639
and if you then look at this great

213
00:07:16,639 --> 00:07:18,479
spaghetti picture it's basically what i

214
00:07:18,479 --> 00:07:20,800
did is i visualized all the the software

215
00:07:20,800 --> 00:07:22,319
that we have

216
00:07:22,319 --> 00:07:23,919
and tied it back to the known attack

217
00:07:23,919 --> 00:07:25,840
techniques that are tied to it and then

218
00:07:25,840 --> 00:07:27,919
you can see conti over there as well

219
00:07:27,919 --> 00:07:29,599
where it's actually there there are some

220
00:07:29,599 --> 00:07:31,680
overlapping techniques and what i like

221
00:07:31,680 --> 00:07:33,520
to do usually here is if i want to

222
00:07:33,520 --> 00:07:35,199
develop some new detections based on

223
00:07:35,199 --> 00:07:37,759
miter attack i can look at where are the

224
00:07:37,759 --> 00:07:39,360
most

225
00:07:39,360 --> 00:07:41,280
combinations going to that that's more

226
00:07:41,280 --> 00:07:42,800
likely for me to build a proper

227
00:07:42,800 --> 00:07:45,759
detection on or yeah i can catch more

228
00:07:45,759 --> 00:07:47,599
with one rule basically so that that's

229
00:07:47,599 --> 00:07:50,240
one vector that i can use

230
00:07:50,240 --> 00:07:51,440
but again

231
00:07:51,440 --> 00:07:53,199
i need if i need to build detections i

232
00:07:53,199 --> 00:07:54,800
need to have data and you can get that

233
00:07:54,800 --> 00:07:56,800
in multiple ways you can you can do it

234
00:07:56,800 --> 00:07:58,479
on your own by hand you can reverse

235
00:07:58,479 --> 00:08:00,400
engineer it

236
00:08:00,400 --> 00:08:03,919
i'm primarily a data guy so i like to

237
00:08:03,919 --> 00:08:05,680
work with telemetry so what i wanted to

238
00:08:05,680 --> 00:08:08,479
do is look at sandbox telemetry because

239
00:08:08,479 --> 00:08:10,000
then i don't have to detonate everything

240
00:08:10,000 --> 00:08:12,560
by hand i wanted to do at scales to see

241
00:08:12,560 --> 00:08:14,879
also an historical overview over time

242
00:08:14,879 --> 00:08:17,120
and a volumetric one so i don't have to

243
00:08:17,120 --> 00:08:19,599
investigate one sample which can be

244
00:08:19,599 --> 00:08:22,479
partially unique or heavily mutating so

245
00:08:22,479 --> 00:08:24,560
i wanted to have a way of doing this at

246
00:08:24,560 --> 00:08:27,360
a larger scale so i started looking at

247
00:08:27,360 --> 00:08:29,280
public sandboxes there's there's a ton

248
00:08:29,280 --> 00:08:31,360
of them out there they're really good

249
00:08:31,360 --> 00:08:33,599
uh but they're

250
00:08:33,599 --> 00:08:35,120
they all have their different ways of

251
00:08:35,120 --> 00:08:36,719
working right so any run has a free

252
00:08:36,719 --> 00:08:38,320
account

253
00:08:38,320 --> 00:08:40,479
they all have free access accounts

254
00:08:40,479 --> 00:08:42,240
but they don't all have

255
00:08:42,240 --> 00:08:44,240
the same telemetry that i wanted to have

256
00:08:44,240 --> 00:08:46,880
so there i didn't decide to use those

257
00:08:46,880 --> 00:08:48,880
primarily for the reason that they're

258
00:08:48,880 --> 00:08:50,480
great if you want to detonate a couple

259
00:08:50,480 --> 00:08:52,800
of files get the reports and then look

260
00:08:52,800 --> 00:08:55,200
at them but it's it's quite manual so

261
00:08:55,200 --> 00:08:57,920
most of the api access is actually

262
00:08:57,920 --> 00:08:59,920
in the page version or the the at least

263
00:08:59,920 --> 00:09:01,600
the important bits are

264
00:09:01,600 --> 00:09:04,000
and and as i mentioned the output per

265
00:09:04,000 --> 00:09:06,480
platform is is significantly different

266
00:09:06,480 --> 00:09:09,040
it's like incomparable almost so

267
00:09:09,040 --> 00:09:10,640
using multiple platforms at the same

268
00:09:10,640 --> 00:09:13,680
time didn't really scale well for me

269
00:09:13,680 --> 00:09:15,279
and then of course i figured well

270
00:09:15,279 --> 00:09:16,880
virustotal is probably the biggest

271
00:09:16,880 --> 00:09:18,880
repository in the world so let's have a

272
00:09:18,880 --> 00:09:20,959
look at that and their api is actually

273
00:09:20,959 --> 00:09:22,560
quite for both there's a ton of

274
00:09:22,560 --> 00:09:24,880
information out there on it

275
00:09:24,880 --> 00:09:27,360
which is quite easy to get you can

276
00:09:27,360 --> 00:09:29,200
actually get it for free

277
00:09:29,200 --> 00:09:31,040
but again i didn't decide to use that

278
00:09:31,040 --> 00:09:32,640
for multiple reasons so the api as i

279
00:09:32,640 --> 00:09:34,720
mentioned is amazing you can download

280
00:09:34,720 --> 00:09:37,839
500 sample or behavioral samples a day

281
00:09:37,839 --> 00:09:40,560
which is quite a lot um and actually if

282
00:09:40,560 --> 00:09:42,720
i find out you can also do 5000 because

283
00:09:42,720 --> 00:09:45,040
they don't really enforce that limit

284
00:09:45,040 --> 00:09:46,320
probably they will if you start

285
00:09:46,320 --> 00:09:48,240
hammering it every day

286
00:09:48,240 --> 00:09:50,560
but i i never got to that point so i

287
00:09:50,560 --> 00:09:52,560
started analyzing it

288
00:09:52,560 --> 00:09:54,399
you get a lot of a lot of behavioral

289
00:09:54,399 --> 00:09:56,959
data but one of the problems at the

290
00:09:56,959 --> 00:09:59,440
virustotal website is that they

291
00:09:59,440 --> 00:10:01,200
have they don't have they have their own

292
00:10:01,200 --> 00:10:03,279
sandbox but there's also all kinds of

293
00:10:03,279 --> 00:10:05,360
vendors as you can see over there that

294
00:10:05,360 --> 00:10:06,800
also do the same boxing of that

295
00:10:06,800 --> 00:10:09,040
telemetry they feed it back into the api

296
00:10:09,040 --> 00:10:10,399
you can download that

297
00:10:10,399 --> 00:10:11,920
but if you look at the comparison you

298
00:10:11,920 --> 00:10:13,040
can see

299
00:10:13,040 --> 00:10:15,440
that for for one specific sample there

300
00:10:15,440 --> 00:10:17,360
are multiple sandboxes and none of the

301
00:10:17,360 --> 00:10:19,680
data is is close to even being an

302
00:10:19,680 --> 00:10:21,760
equivalent of each other so

303
00:10:21,760 --> 00:10:24,320
some do do a vary for both the registry

304
00:10:24,320 --> 00:10:26,560
read or deletion others don't even show

305
00:10:26,560 --> 00:10:28,480
it to you and that's the same for the

306
00:10:28,480 --> 00:10:29,920
whole the whole straight and this is

307
00:10:29,920 --> 00:10:31,920
only a subset of course but these are at

308
00:10:31,920 --> 00:10:33,839
least values that i i find valuable

309
00:10:33,839 --> 00:10:35,279
where i look at the command line or the

310
00:10:35,279 --> 00:10:37,839
strings or the the dlls being loaded

311
00:10:37,839 --> 00:10:39,519
which i can actually utilize in in

312
00:10:39,519 --> 00:10:41,360
building detections but most of them are

313
00:10:41,360 --> 00:10:42,320
like

314
00:10:42,320 --> 00:10:44,160
uncomparable so there's no real

315
00:10:44,160 --> 00:10:46,880
trustworthy real source

316
00:10:46,880 --> 00:10:47,600
so

317
00:10:47,600 --> 00:10:49,519
i started looking around and i have one

318
00:10:49,519 --> 00:10:52,480
friend named luciano and he has a very

319
00:10:52,480 --> 00:10:54,480
big cuckoo environment

320
00:10:54,480 --> 00:10:57,279
where he runs about 4 000 to 5 000

321
00:10:57,279 --> 00:10:59,279
samples a day and he has a collaboration

322
00:10:59,279 --> 00:11:02,000
with virustotal so he allowed me access

323
00:11:02,000 --> 00:11:03,839
to his cuckoo farm

324
00:11:03,839 --> 00:11:05,519
which he heavily customized to do all

325
00:11:05,519 --> 00:11:06,640
kinds of

326
00:11:06,640 --> 00:11:09,200
sandbox evasion detections that he

327
00:11:09,200 --> 00:11:11,600
mitigated so the likelihood of it being

328
00:11:11,600 --> 00:11:14,880
properly executed is quite significant

329
00:11:14,880 --> 00:11:17,440
and the cool thing about cuckoo is that

330
00:11:17,440 --> 00:11:19,519
it also allows all kinds of plugins so

331
00:11:19,519 --> 00:11:21,440
you can even look at the macros you can

332
00:11:21,440 --> 00:11:22,959
decode those

333
00:11:22,959 --> 00:11:24,320
and you can log that all in the

334
00:11:24,320 --> 00:11:26,000
behavioral platform

335
00:11:26,000 --> 00:11:27,600
plus you get all the relevant

336
00:11:27,600 --> 00:11:29,680
information that we saw before even api

337
00:11:29,680 --> 00:11:32,320
calls and it's all being loaded it's all

338
00:11:32,320 --> 00:11:34,320
being logged by the same way so it's all

339
00:11:34,320 --> 00:11:36,640
in the same format so it's it's it's

340
00:11:36,640 --> 00:11:38,480
quite at least a trustworthy single

341
00:11:38,480 --> 00:11:40,160
source for me i might still miss data

342
00:11:40,160 --> 00:11:42,720
but i miss it for everything

343
00:11:42,720 --> 00:11:44,399
or i have it for everything so that

344
00:11:44,399 --> 00:11:47,600
that's the good thing about it

345
00:11:47,839 --> 00:11:50,160
so now i had all that access all that

346
00:11:50,160 --> 00:11:51,040
data

347
00:11:51,040 --> 00:11:53,680
and these were like huge json files

348
00:11:53,680 --> 00:11:55,760
so i needed to do something proper with

349
00:11:55,760 --> 00:11:58,079
it instead of grabbing so i

350
00:11:58,079 --> 00:11:59,519
decided to use

351
00:11:59,519 --> 00:12:02,160
microsoft sentinel as it's called now

352
00:12:02,160 --> 00:12:03,440
primarily for the reasons that it's

353
00:12:03,440 --> 00:12:05,360
cloud hosted so i didn't have a setup a

354
00:12:05,360 --> 00:12:08,959
huge infrastructure it's super fast

355
00:12:08,959 --> 00:12:11,360
uh their query language is called custo

356
00:12:11,360 --> 00:12:12,240
and

357
00:12:12,240 --> 00:12:14,160
i i work with it quite a bit also in my

358
00:12:14,160 --> 00:12:15,760
day-to-day practice so that made sense

359
00:12:15,760 --> 00:12:17,600
for me as well so it's really powerful

360
00:12:17,600 --> 00:12:19,600
you can do all kinds of sequel like

361
00:12:19,600 --> 00:12:21,680
joins and these kind of things and it

362
00:12:21,680 --> 00:12:23,920
has a nested json support with some of

363
00:12:23,920 --> 00:12:26,399
the data analysis platforms like splunk

364
00:12:26,399 --> 00:12:28,639
they sort of do it but then they still

365
00:12:28,639 --> 00:12:31,040
segregate all the data so it's harder to

366
00:12:31,040 --> 00:12:32,880
uh to correlate

367
00:12:32,880 --> 00:12:34,639
so these were the primary reasons for me

368
00:12:34,639 --> 00:12:38,560
to to work with the sentinel solution

369
00:12:38,560 --> 00:12:40,320
and then you need to ingest it of course

370
00:12:40,320 --> 00:12:41,600
so there's a couple of ways to do it you

371
00:12:41,600 --> 00:12:43,600
can use normal syslog but that doesn't

372
00:12:43,600 --> 00:12:46,079
really work well for large json files

373
00:12:46,079 --> 00:12:48,560
because of the the the limitation of the

374
00:12:48,560 --> 00:12:50,079
the length

375
00:12:50,079 --> 00:12:52,399
you can work with the api directly so

376
00:12:52,399 --> 00:12:54,560
you can fire um immediately with a key

377
00:12:54,560 --> 00:12:57,680
to the api or you can use elastics

378
00:12:57,680 --> 00:13:00,160
logstash which is an open source freely

379
00:13:00,160 --> 00:13:02,079
available product and microsoft has

380
00:13:02,079 --> 00:13:03,760
built a supported plugin that you can

381
00:13:03,760 --> 00:13:06,000
actually use for that and that chose to

382
00:13:06,000 --> 00:13:08,720
be decided to be the most ideal way of

383
00:13:08,720 --> 00:13:10,959
doing it at scale so that sounded really

384
00:13:10,959 --> 00:13:12,639
easy right but it turned out not to be

385
00:13:12,639 --> 00:13:14,800
entirely easy because of course every

386
00:13:14,800 --> 00:13:18,839
api has weird limits

387
00:13:18,839 --> 00:13:21,760
and logstash also didn't really work

388
00:13:21,760 --> 00:13:24,320
well with large pretty formatted json

389
00:13:24,320 --> 00:13:26,320
files because of all the line breaks so

390
00:13:26,320 --> 00:13:28,079
i had to reconvert them into a single

391
00:13:28,079 --> 00:13:29,839
json blob first

392
00:13:29,839 --> 00:13:32,079
and then i also learned that the api

393
00:13:32,079 --> 00:13:34,720
will break if you have more than four

394
00:13:34,720 --> 00:13:37,120
layers deep of json so i had to also

395
00:13:37,120 --> 00:13:39,519
reformat the data already

396
00:13:39,519 --> 00:13:41,600
then it turned out that there's a 64

397
00:13:41,600 --> 00:13:43,920
kilobyte limit in the field size so

398
00:13:43,920 --> 00:13:46,480
every data entry point can only have 64

399
00:13:46,480 --> 00:13:49,519
kilobytes of data so that that's usually

400
00:13:49,519 --> 00:13:50,959
enough right it's quite a lot of data

401
00:13:50,959 --> 00:13:52,320
for one field

402
00:13:52,320 --> 00:13:54,320
but if you look at for instance registry

403
00:13:54,320 --> 00:13:56,079
reads or directory

404
00:13:56,079 --> 00:13:58,320
enumeration attempts that can be a

405
00:13:58,320 --> 00:14:00,079
pretty lengthy list so that got

406
00:14:00,079 --> 00:14:02,399
truncated so i had to pre-truncate that

407
00:14:02,399 --> 00:14:03,279
already

408
00:14:03,279 --> 00:14:05,760
split it up into multiple fields to to

409
00:14:05,760 --> 00:14:08,320
at least circumvent that limit

410
00:14:08,320 --> 00:14:10,160
and then if you um

411
00:14:10,160 --> 00:14:12,480
at first i downloaded like a year's

412
00:14:12,480 --> 00:14:14,399
worth of data and i just fire house that

413
00:14:14,399 --> 00:14:17,440
into the api and turned out that

414
00:14:17,440 --> 00:14:19,360
the log analytics api on the back end

415
00:14:19,360 --> 00:14:21,199
didn't really like that so it started

416
00:14:21,199 --> 00:14:22,880
rate limiting me with saying hey the

417
00:14:22,880 --> 00:14:24,720
payload is too large

418
00:14:24,720 --> 00:14:25,600
but

419
00:14:25,600 --> 00:14:27,920
that should usually be fine but logstash

420
00:14:27,920 --> 00:14:30,399
can't deal with those

421
00:14:30,399 --> 00:14:32,240
those messages so it just keeps on

422
00:14:32,240 --> 00:14:34,079
hammering it constantly so i had i had

423
00:14:34,079 --> 00:14:36,720
to do it basically at sort of my own

424
00:14:36,720 --> 00:14:39,040
rate limiting in there

425
00:14:39,040 --> 00:14:40,240
but in the end

426
00:14:40,240 --> 00:14:41,839
it worked out right so it was great i

427
00:14:41,839 --> 00:14:44,320
have data now i i can actually search

428
00:14:44,320 --> 00:14:45,279
through it

429
00:14:45,279 --> 00:14:46,399
um

430
00:14:46,399 --> 00:14:47,920
the weird thing with with the log

431
00:14:47,920 --> 00:14:50,000
analytics thing is that it you need to

432
00:14:50,000 --> 00:14:52,000
build additional parsers on it so it's

433
00:14:52,000 --> 00:14:54,160
actually readable but

434
00:14:54,160 --> 00:14:56,240
they make it all into strings and

435
00:14:56,240 --> 00:14:58,320
integer fields so you need to make it a

436
00:14:58,320 --> 00:15:00,320
little bit nicer i work with defender

437
00:15:00,320 --> 00:15:03,199
for endpoint a lot that's microsoft's

438
00:15:03,199 --> 00:15:04,240
edr

439
00:15:04,240 --> 00:15:06,000
so i basically built a parser that had

440
00:15:06,000 --> 00:15:08,320
that same data schema so that it can

441
00:15:08,320 --> 00:15:10,560
easily convert all the rules that i

442
00:15:10,560 --> 00:15:12,480
started building on my malware

443
00:15:12,480 --> 00:15:14,560
to their to their platform with only

444
00:15:14,560 --> 00:15:17,199
changing the the schema header fields

445
00:15:17,199 --> 00:15:19,600
so i now have a year's worth of data

446
00:15:19,600 --> 00:15:22,320
interestingly the largest sample is 638

447
00:15:22,320 --> 00:15:24,959
megabytes which of course is an iso file

448
00:15:24,959 --> 00:15:27,120
with a whole

449
00:15:27,120 --> 00:15:28,720
operating system in there to deploy

450
00:15:28,720 --> 00:15:30,079
malware

451
00:15:30,079 --> 00:15:32,000
and the smallest one is only 682

452
00:15:32,000 --> 00:15:34,399
kilobytes or bytes even and there's

453
00:15:34,399 --> 00:15:36,399
everything in there so xc files msis

454
00:15:36,399 --> 00:15:39,519
dlls all kinds of office documents with

455
00:15:39,519 --> 00:15:40,720
scripts

456
00:15:40,720 --> 00:15:43,680
l files you name it

457
00:15:43,680 --> 00:15:44,720
so

458
00:15:44,720 --> 00:15:46,480
with that pers custom parsing i had to

459
00:15:46,480 --> 00:15:48,320
do some other magic because

460
00:15:48,320 --> 00:15:50,720
due to the cuckoo nature you can use all

461
00:15:50,720 --> 00:15:52,240
kinds of fictitious usernames for

462
00:15:52,240 --> 00:15:54,480
instance so i had to transform all those

463
00:15:54,480 --> 00:15:56,560
usernames at least into one because i

464
00:15:56,560 --> 00:15:58,399
wanted to correlate it across the whole

465
00:15:58,399 --> 00:15:59,680
data set

466
00:15:59,680 --> 00:16:02,240
and then you have to do some additional

467
00:16:02,240 --> 00:16:03,600
adjacent parsing and these kind of

468
00:16:03,600 --> 00:16:05,680
things it's not that difficult but then

469
00:16:05,680 --> 00:16:08,480
you end up with all kinds of malware api

470
00:16:08,480 --> 00:16:10,800
call like events where i can just very

471
00:16:10,800 --> 00:16:13,600
easily query that schema and have my own

472
00:16:13,600 --> 00:16:15,680
data representation in there

473
00:16:15,680 --> 00:16:17,759
and i can even look as i mentioned into

474
00:16:17,759 --> 00:16:20,079
macro code where you can get the fully

475
00:16:20,079 --> 00:16:21,519
updated the

476
00:16:21,519 --> 00:16:23,680
macros that they trying to execute and

477
00:16:23,680 --> 00:16:25,360
even decode that partially within the

478
00:16:25,360 --> 00:16:28,800
query language so it's pretty powerful

479
00:16:28,800 --> 00:16:30,240
so why would i go through all this

480
00:16:30,240 --> 00:16:32,720
trouble you might ask because it's a lot

481
00:16:32,720 --> 00:16:34,880
of work for maybe nothing but what i

482
00:16:34,880 --> 00:16:37,040
wanted to have is sort of very realistic

483
00:16:37,040 --> 00:16:38,720
and actually current

484
00:16:38,720 --> 00:16:40,720
vision of what is actually being used by

485
00:16:40,720 --> 00:16:42,800
all kinds of malware families how they

486
00:16:42,800 --> 00:16:44,959
operate how often do they change tactics

487
00:16:44,959 --> 00:16:47,279
these kind of things but also

488
00:16:47,279 --> 00:16:49,040
the which low bins are they using

489
00:16:49,040 --> 00:16:52,639
frequently or which dlls are they using

490
00:16:52,639 --> 00:16:54,160
registry techniques all kinds of

491
00:16:54,160 --> 00:16:56,480
persistence methods

492
00:16:56,480 --> 00:16:58,639
and even seeing how which which is the

493
00:16:58,639 --> 00:17:01,600
current hot c2 platform

494
00:17:01,600 --> 00:17:03,199
which is of course heavily debated on

495
00:17:03,199 --> 00:17:05,199
twitter

496
00:17:05,199 --> 00:17:07,359
so but even even go further where i can

497
00:17:07,359 --> 00:17:09,439
see okay they're enumerating certain

498
00:17:09,439 --> 00:17:11,520
certain directories or certain registry

499
00:17:11,520 --> 00:17:13,839
keys all the time so i might be able to

500
00:17:13,839 --> 00:17:15,839
build a sequel

501
00:17:15,839 --> 00:17:17,839
on windows already to monitor that more

502
00:17:17,839 --> 00:17:19,359
easily as well because that's that's a

503
00:17:19,359 --> 00:17:21,679
hard thing to monitor from with most

504
00:17:21,679 --> 00:17:23,439
security solutions even sysmon can't

505
00:17:23,439 --> 00:17:24,880
help you there so you can build

506
00:17:24,880 --> 00:17:26,799
additional visibility methods as well to

507
00:17:26,799 --> 00:17:27,919
see

508
00:17:27,919 --> 00:17:29,919
what actually they they are currently

509
00:17:29,919 --> 00:17:32,799
doing and also is is sort of yeah

510
00:17:32,799 --> 00:17:34,240
basically anything that i can build

511
00:17:34,240 --> 00:17:35,760
detections for that was that was the

512
00:17:35,760 --> 00:17:38,000
whole the old effort so this was a

513
00:17:38,000 --> 00:17:39,760
screenshot from yesterday so currently i

514
00:17:39,760 --> 00:17:40,559
have

515
00:17:40,559 --> 00:17:42,559
about eight hundred and twenty thousand

516
00:17:42,559 --> 00:17:44,640
five thousand samples in there

517
00:17:44,640 --> 00:17:47,679
um spread across over 4 000 malware

518
00:17:47,679 --> 00:17:49,840
families so quite a lot and i started

519
00:17:49,840 --> 00:17:51,280
building some dashboards just to make it

520
00:17:51,280 --> 00:17:53,760
easy where i can also see which

521
00:17:53,760 --> 00:17:55,840
are the top 10 malware families that i

522
00:17:55,840 --> 00:17:57,840
at least have telemetry for over the

523
00:17:57,840 --> 00:17:59,440
last couple of months and that might be

524
00:17:59,440 --> 00:18:01,520
different than the complete world right

525
00:18:01,520 --> 00:18:02,640
because this is

526
00:18:02,640 --> 00:18:05,120
uh only a subset probably

527
00:18:05,120 --> 00:18:06,799
but you can see that that the trick bot

528
00:18:06,799 --> 00:18:09,039
is is quite popular agent tesla

529
00:18:09,039 --> 00:18:10,559
sometimes you see called strike popping

530
00:18:10,559 --> 00:18:13,200
up or dry decks so it's interesting to

531
00:18:13,200 --> 00:18:15,760
see also campaign wise that sometimes

532
00:18:15,760 --> 00:18:17,919
some groups are way more active than in

533
00:18:17,919 --> 00:18:20,080
other periods and in summer everybody

534
00:18:20,080 --> 00:18:23,520
was on holiday so nobody did a lot

535
00:18:23,520 --> 00:18:25,200
but also other things so i can also look

536
00:18:25,200 --> 00:18:26,480
at at

537
00:18:26,480 --> 00:18:28,000
the mime types for instance where i can

538
00:18:28,000 --> 00:18:31,039
see a distribution of types of files

539
00:18:31,039 --> 00:18:33,280
that are being executed and so suddenly

540
00:18:33,280 --> 00:18:35,760
in october and and two weeks ago there

541
00:18:35,760 --> 00:18:37,919
was a huge spike in excel files being

542
00:18:37,919 --> 00:18:40,240
used again so i could look at okay which

543
00:18:40,240 --> 00:18:42,400
families are now using that way more

544
00:18:42,400 --> 00:18:44,960
than than apparently they do commonly

545
00:18:44,960 --> 00:18:46,559
and what is actually they're trying to

546
00:18:46,559 --> 00:18:48,400
do these kind of things make sense for

547
00:18:48,400 --> 00:18:49,760
me so that i can quickly build

548
00:18:49,760 --> 00:18:51,760
detections help my clients

549
00:18:51,760 --> 00:18:54,080
and and be a little bit more versatile

550
00:18:54,080 --> 00:18:56,799
in in these kind of uh um

551
00:18:56,799 --> 00:18:59,280
detection and engineering efforts

552
00:18:59,280 --> 00:19:01,760
um but other things like from a miter

553
00:19:01,760 --> 00:19:03,280
deck perspective as i mentioned before

554
00:19:03,280 --> 00:19:04,720
it might also be interesting where we

555
00:19:04,720 --> 00:19:06,240
look on the left we look at the

556
00:19:06,240 --> 00:19:08,559
techniques that are unique to ryuk

557
00:19:08,559 --> 00:19:11,360
and then you can in the middle see where

558
00:19:11,360 --> 00:19:13,200
conti and ryuk which is basically a

559
00:19:13,200 --> 00:19:15,440
revamp of the same tool or the same

560
00:19:15,440 --> 00:19:16,720
family

561
00:19:16,720 --> 00:19:18,400
are using still the same techniques and

562
00:19:18,400 --> 00:19:20,480
also stuff that is unique to kanti so

563
00:19:20,480 --> 00:19:22,240
this is based on mitre attack so i also

564
00:19:22,240 --> 00:19:23,520
wanted to see

565
00:19:23,520 --> 00:19:25,919
how this does actually look in practice

566
00:19:25,919 --> 00:19:27,919
so i maybe for the people that that are

567
00:19:27,919 --> 00:19:29,679
familiar with bloodhounds

568
00:19:29,679 --> 00:19:31,679
this is just bloodhound but i use it for

569
00:19:31,679 --> 00:19:33,520
a different way so i can you can use the

570
00:19:33,520 --> 00:19:35,760
neo4j database in the back

571
00:19:35,760 --> 00:19:38,080
populate it with anything you like and i

572
00:19:38,080 --> 00:19:40,799
built a custom fork to have my own logos

573
00:19:40,799 --> 00:19:43,520
and my own my own branding and my my own

574
00:19:43,520 --> 00:19:44,720
images to make it a little bit more

575
00:19:44,720 --> 00:19:47,200
concrete but it's basically just neo4j

576
00:19:47,200 --> 00:19:48,240
and

577
00:19:48,240 --> 00:19:49,760
with a nice with a nice graphical

578
00:19:49,760 --> 00:19:51,440
representation

579
00:19:51,440 --> 00:19:53,520
so from a from a practical perspective

580
00:19:53,520 --> 00:19:55,440
you could also have a look at all the

581
00:19:55,440 --> 00:19:57,919
dlls for instance that are loaded by

582
00:19:57,919 --> 00:20:00,559
either conti or ryuk and then we can

583
00:20:00,559 --> 00:20:02,320
already see that that a lot of them

584
00:20:02,320 --> 00:20:03,840
remain the same way you can't really see

585
00:20:03,840 --> 00:20:04,880
it on the screen show but you have to

586
00:20:04,880 --> 00:20:07,760
trust me that 30 30 were the same

587
00:20:07,760 --> 00:20:09,440
and there were a couple i think there

588
00:20:09,440 --> 00:20:11,760
were like six yeah that only riot used

589
00:20:11,760 --> 00:20:14,640
and now conti is using 23 new ones that

590
00:20:14,640 --> 00:20:16,480
i haven't seen at least in my data set

591
00:20:16,480 --> 00:20:18,880
that they are utilizing so that might

592
00:20:18,880 --> 00:20:20,559
give some indication that their behavior

593
00:20:20,559 --> 00:20:22,080
is changing or they're using different

594
00:20:22,080 --> 00:20:24,080
tactics maybe they're using apis instead

595
00:20:24,080 --> 00:20:26,640
of direct calls it can it can still be

596
00:20:26,640 --> 00:20:28,000
anything but it's already quite

597
00:20:28,000 --> 00:20:30,159
indicative that they're constantly

598
00:20:30,159 --> 00:20:32,080
changing their game because they need to

599
00:20:32,080 --> 00:20:34,240
right they're getting a detected and

600
00:20:34,240 --> 00:20:35,440
these kind of things and that's also

601
00:20:35,440 --> 00:20:37,360
where one of the low bins is sure to

602
00:20:37,360 --> 00:20:40,080
till uh ryuk never used it but conti

603
00:20:40,080 --> 00:20:41,600
actually uses it to download their

604
00:20:41,600 --> 00:20:44,080
second stage payload and then execute

605
00:20:44,080 --> 00:20:45,039
that

606
00:20:45,039 --> 00:20:46,640
so these kind of small things are

607
00:20:46,640 --> 00:20:48,000
already interesting if you don't have a

608
00:20:48,000 --> 00:20:50,000
detection for these kind of

609
00:20:50,000 --> 00:20:52,799
well kind of simple simple um

610
00:20:52,799 --> 00:20:54,640
lobbying behaviors it might be a good

611
00:20:54,640 --> 00:20:56,720
reason to now start doing it

612
00:20:56,720 --> 00:20:59,039
just because

613
00:20:59,039 --> 00:21:00,960
it will get it will give you some nice

614
00:21:00,960 --> 00:21:03,360
results and it's not really used a lot

615
00:21:03,360 --> 00:21:05,520
in most enterprise environments anyway

616
00:21:05,520 --> 00:21:07,120
and the same goes for run dll that's

617
00:21:07,120 --> 00:21:10,320
probably the most the most popular um

618
00:21:10,320 --> 00:21:12,240
low bin out there

619
00:21:12,240 --> 00:21:14,400
whereas if we look at the the whole

620
00:21:14,400 --> 00:21:16,400
spread from a miter perspective is only

621
00:21:16,400 --> 00:21:18,799
mentioned to be used by aggregor but if

622
00:21:18,799 --> 00:21:20,320
i look at my data set that's actually

623
00:21:20,320 --> 00:21:22,320
not true and as i mentioned before it

624
00:21:22,320 --> 00:21:23,280
might be

625
00:21:23,280 --> 00:21:24,960
that minor is lagging behind or that

626
00:21:24,960 --> 00:21:26,880
they didn't have any public reports to

627
00:21:26,880 --> 00:21:29,039
base it on but i can also see that conti

628
00:21:29,039 --> 00:21:30,159
is actually using this quite

629
00:21:30,159 --> 00:21:31,679
significantly

630
00:21:31,679 --> 00:21:35,280
with all kinds of weird file names but

631
00:21:35,280 --> 00:21:37,520
so they do so i i wanted to have a look

632
00:21:37,520 --> 00:21:39,679
at it a little bit deeper and basically

633
00:21:39,679 --> 00:21:41,760
the run dll command line is built out of

634
00:21:41,760 --> 00:21:44,480
in three sections right so you have the

635
00:21:44,480 --> 00:21:46,080
the process itself that needs to be

636
00:21:46,080 --> 00:21:47,600
called and that can be

637
00:21:47,600 --> 00:21:49,520
called run dll32 but they can also

638
00:21:49,520 --> 00:21:52,000
rename it or even remove the xe that

639
00:21:52,000 --> 00:21:53,919
doesn't really matter then you have the

640
00:21:53,919 --> 00:21:56,799
dll or the at least the pe file that has

641
00:21:56,799 --> 00:21:59,360
to be loaded can also be called anything

642
00:21:59,360 --> 00:22:01,520
as you can see already and then there's

643
00:22:01,520 --> 00:22:03,120
a function that you first want to call

644
00:22:03,120 --> 00:22:05,360
instead of dll main which is executed by

645
00:22:05,360 --> 00:22:07,440
default you can give it any any pointer

646
00:22:07,440 --> 00:22:09,760
that you actually want to do

647
00:22:09,760 --> 00:22:11,760
so this was something that that already

648
00:22:11,760 --> 00:22:14,320
is being used by by multiple families

649
00:22:14,320 --> 00:22:16,080
and i wanted to have a look at okay what

650
00:22:16,080 --> 00:22:18,159
are the top used for first called

651
00:22:18,159 --> 00:22:20,000
functions that they actually use

652
00:22:20,000 --> 00:22:22,000
so there's one that is quite quite

653
00:22:22,000 --> 00:22:24,880
prevalent that's the dll register server

654
00:22:24,880 --> 00:22:27,679
there's also a sort of test resin

655
00:22:27,679 --> 00:22:29,440
something that was only there for around

656
00:22:29,440 --> 00:22:32,720
two days and then it completely was gone

657
00:22:32,720 --> 00:22:34,559
and there was the control run dll one

658
00:22:34,559 --> 00:22:36,480
that was quite quite prevalent in the

659
00:22:36,480 --> 00:22:38,240
beginning of the year and then it

660
00:22:38,240 --> 00:22:40,320
suddenly stopped so i first looked at

661
00:22:40,320 --> 00:22:42,400
that and i think okay i wanted to figure

662
00:22:42,400 --> 00:22:44,320
out who was actually using this and it

663
00:22:44,320 --> 00:22:46,400
turned out to be only one family that

664
00:22:46,400 --> 00:22:47,200
that

665
00:22:47,200 --> 00:22:49,440
also was quite visible like hey

666
00:22:49,440 --> 00:22:51,520
emoted got taken down and you can

667
00:22:51,520 --> 00:22:53,520
immediately see that in the in the graph

668
00:22:53,520 --> 00:22:54,720
as well where

669
00:22:54,720 --> 00:22:56,320
it was actually a couple of days sooner

670
00:22:56,320 --> 00:22:58,320
than the tweet so i'm not sure whether

671
00:22:58,320 --> 00:23:00,880
they they announced it later or

672
00:23:00,880 --> 00:23:02,799
um

673
00:23:02,799 --> 00:23:04,880
my data source at least didn't have any

674
00:23:04,880 --> 00:23:07,039
new samples of them anymore

675
00:23:07,039 --> 00:23:08,480
but it was quite interesting to see and

676
00:23:08,480 --> 00:23:10,960
also guess who's back now and so a

677
00:23:10,960 --> 00:23:13,280
couple of days ago they still are coming

678
00:23:13,280 --> 00:23:14,480
back with the same technique so they

679
00:23:14,480 --> 00:23:16,240
didn't even change which is quite

680
00:23:16,240 --> 00:23:17,919
interesting that over such a long time

681
00:23:17,919 --> 00:23:19,520
they they

682
00:23:19,520 --> 00:23:21,919
still are using that same uh dll

683
00:23:21,919 --> 00:23:23,360
function

684
00:23:23,360 --> 00:23:24,960
and they're still one of the

685
00:23:24,960 --> 00:23:26,559
few ones that use it there's now a

686
00:23:26,559 --> 00:23:28,159
couple of other groups that are that are

687
00:23:28,159 --> 00:23:30,080
using it like very sparingly where you

688
00:23:30,080 --> 00:23:32,720
see a couple of samples but it's it's

689
00:23:32,720 --> 00:23:34,960
super rare which is weird because they

690
00:23:34,960 --> 00:23:37,919
can call it whatever they want

691
00:23:37,919 --> 00:23:39,679
but still they they like doing it this

692
00:23:39,679 --> 00:23:40,480
way

693
00:23:40,480 --> 00:23:42,240
and they don't get it's a very simple

694
00:23:42,240 --> 00:23:45,120
detection to build even this

695
00:23:45,120 --> 00:23:47,440
so back to that run the dll register

696
00:23:47,440 --> 00:23:48,880
server one you can you can see that

697
00:23:48,880 --> 00:23:50,559
there's a couple more groups most of the

698
00:23:50,559 --> 00:23:52,640
groups actually that we wanted to track

699
00:23:52,640 --> 00:23:54,320
in the beginning already

700
00:23:54,320 --> 00:23:56,480
but also drydex and z-loader sometimes

701
00:23:56,480 --> 00:23:58,480
use them so that was quite interesting

702
00:23:58,480 --> 00:24:01,600
to me at least to see hey what is this

703
00:24:01,600 --> 00:24:03,919
so i first started looking at the whole

704
00:24:03,919 --> 00:24:06,799
the whole data set that i had

705
00:24:06,799 --> 00:24:08,320
and started looking at what other

706
00:24:08,320 --> 00:24:09,600
function names are they're actually

707
00:24:09,600 --> 00:24:11,840
calling so they they usually do the dll

708
00:24:11,840 --> 00:24:13,760
wedges server but sometimes they switch

709
00:24:13,760 --> 00:24:14,880
it around

710
00:24:14,880 --> 00:24:16,799
and do all kinds of

711
00:24:16,799 --> 00:24:19,279
interesting names like mean letter north

712
00:24:19,279 --> 00:24:21,600
course might count so they use word list

713
00:24:21,600 --> 00:24:23,360
probably right so that's a simple

714
00:24:23,360 --> 00:24:24,799
assumption to make

715
00:24:24,799 --> 00:24:26,480
and sometimes they even do some sort of

716
00:24:26,480 --> 00:24:28,240
random strings which are always the same

717
00:24:28,240 --> 00:24:30,480
length so we can we can build profiles

718
00:24:30,480 --> 00:24:32,559
around that if you want but first i

719
00:24:32,559 --> 00:24:34,400
wanted to just look at the overload

720
00:24:34,400 --> 00:24:36,159
register server so i started looking at

721
00:24:36,159 --> 00:24:39,520
a couple of client environments to see

722
00:24:39,520 --> 00:24:41,440
is anybody using this in a normal

723
00:24:41,440 --> 00:24:42,720
production environment and the only

724
00:24:42,720 --> 00:24:45,360
thing i came across was a client where

725
00:24:45,360 --> 00:24:47,440
they were still installing microsoft

726
00:24:47,440 --> 00:24:48,799
silverlight

727
00:24:48,799 --> 00:24:49,919
which

728
00:24:49,919 --> 00:24:52,000
well most people are at least close to

729
00:24:52,000 --> 00:24:54,559
my age so it's very old

730
00:24:54,559 --> 00:24:55,919
it's a sort of the microsoft's

731
00:24:55,919 --> 00:24:58,080
interpretation of flash

732
00:24:58,080 --> 00:25:00,640
which never got into a real success

733
00:25:00,640 --> 00:25:02,080
uh but apparently some corporate

734
00:25:02,080 --> 00:25:04,159
application still requires it even

735
00:25:04,159 --> 00:25:08,000
though it's um it was killed in 2019

736
00:25:08,000 --> 00:25:09,760
so that was the only thing i came across

737
00:25:09,760 --> 00:25:11,200
so i was still interested right so this

738
00:25:11,200 --> 00:25:13,039
might be something to uh to keep on

739
00:25:13,039 --> 00:25:15,679
tracking so i started looking at the

740
00:25:15,679 --> 00:25:18,640
whole windows system 32 directory to see

741
00:25:18,640 --> 00:25:20,960
if it is anything that is actually

742
00:25:20,960 --> 00:25:22,559
prevalent so we can see that there's

743
00:25:22,559 --> 00:25:24,559
there's an export function in in one of

744
00:25:24,559 --> 00:25:26,480
the samples it was actually the only

745
00:25:26,480 --> 00:25:29,279
exported function so that that made it

746
00:25:29,279 --> 00:25:31,200
still interesting to me

747
00:25:31,200 --> 00:25:32,000
uh

748
00:25:32,000 --> 00:25:34,080
there's a better view for you maybe

749
00:25:34,080 --> 00:25:35,520
so i started looking at the whole system

750
00:25:35,520 --> 00:25:37,440
32 directory

751
00:25:37,440 --> 00:25:39,039
and it's actually it's actually quite

752
00:25:39,039 --> 00:25:42,159
prevalent so there's 921 dlls or

753
00:25:42,159 --> 00:25:44,559
executables in in the windows system 32

754
00:25:44,559 --> 00:25:46,960
directory that also export it but still

755
00:25:46,960 --> 00:25:48,400
i never see it being called under the

756
00:25:48,400 --> 00:25:50,559
command line so that was that was still

757
00:25:50,559 --> 00:25:52,880
interesting to me so i started googling

758
00:25:52,880 --> 00:25:54,559
there isn't a lot of documentation about

759
00:25:54,559 --> 00:25:56,720
it but one of the few things i found on

760
00:25:56,720 --> 00:25:59,039
a microsoft website at least is that it

761
00:25:59,039 --> 00:26:00,320
is

762
00:26:00,320 --> 00:26:02,320
in direct show at least used as a as a

763
00:26:02,320 --> 00:26:04,159
com as a com

764
00:26:04,159 --> 00:26:05,840
entry point

765
00:26:05,840 --> 00:26:07,600
so then i went in the whole rabbit hole

766
00:26:07,600 --> 00:26:09,919
i'm not really well first and calm so i

767
00:26:09,919 --> 00:26:11,840
had to dig into that into that rabbit

768
00:26:11,840 --> 00:26:13,919
hole to understand a little bit more so

769
00:26:13,919 --> 00:26:16,320
basically com is an inter process

770
00:26:16,320 --> 00:26:17,830
communication project

771
00:26:17,830 --> 00:26:20,240
[Music]

772
00:26:20,240 --> 00:26:21,760
protocol sorry

773
00:26:21,760 --> 00:26:24,080
so so you can set up a com server and

774
00:26:24,080 --> 00:26:24,880
then

775
00:26:24,880 --> 00:26:26,799
other tools can actually talk and use

776
00:26:26,799 --> 00:26:30,000
that same code base to reuse in in in

777
00:26:30,000 --> 00:26:31,360
all kinds of functionality and it's

778
00:26:31,360 --> 00:26:34,400
actually very significant still

779
00:26:34,400 --> 00:26:36,000
within the windows environment even

780
00:26:36,000 --> 00:26:39,279
though it's quite old

781
00:26:39,279 --> 00:26:42,159
setup or implementation but it's also

782
00:26:42,159 --> 00:26:43,600
something that can be heavily used for

783
00:26:43,600 --> 00:26:45,279
all kinds of hijacking and all kinds of

784
00:26:45,279 --> 00:26:46,400
other things

785
00:26:46,400 --> 00:26:48,080
and the reason is so everything is

786
00:26:48,080 --> 00:26:50,240
registered or stored in the register so

787
00:26:50,240 --> 00:26:51,919
if you want to instantiate a new comma

788
00:26:51,919 --> 00:26:54,480
check you you look at the registry and

789
00:26:54,480 --> 00:26:56,799
and basically ask for the class

790
00:26:56,799 --> 00:26:58,640
and basically everything that is read by

791
00:26:58,640 --> 00:27:00,799
the operating system they read from the

792
00:27:00,799 --> 00:27:03,679
hkey class root and then the cls id the

793
00:27:03,679 --> 00:27:06,080
class id and then there is a guide so

794
00:27:06,080 --> 00:27:08,960
global unique id that it identifies your

795
00:27:08,960 --> 00:27:10,799
your com service

796
00:27:10,799 --> 00:27:13,200
so to say but that top one is actually a

797
00:27:13,200 --> 00:27:15,679
virtual hive so virtual registry height

798
00:27:15,679 --> 00:27:17,520
which is a combination of the hd local

799
00:27:17,520 --> 00:27:20,880
machine and the hd current user

800
00:27:20,880 --> 00:27:22,720
and the interesting bit is so hkey local

801
00:27:22,720 --> 00:27:23,919
machine you need to have system

802
00:27:23,919 --> 00:27:26,559
privileges to write to it so that's

803
00:27:26,559 --> 00:27:28,799
slightly more secure

804
00:27:28,799 --> 00:27:30,880
and the ac current user you can just

805
00:27:30,880 --> 00:27:32,720
write to as a as a current user right

806
00:27:32,720 --> 00:27:34,559
that's hence the name but the

807
00:27:34,559 --> 00:27:36,960
interesting bit over here is that the h

808
00:27:36,960 --> 00:27:39,360
key user always takes precedence over

809
00:27:39,360 --> 00:27:41,120
the hkey local machine

810
00:27:41,120 --> 00:27:42,320
which is

811
00:27:42,320 --> 00:27:44,080
kind of scary in a way because you can

812
00:27:44,080 --> 00:27:46,640
always override something and the user

813
00:27:46,640 --> 00:27:48,559
key will be read so you can

814
00:27:48,559 --> 00:27:50,320
already imagine that you can hijack this

815
00:27:50,320 --> 00:27:51,840
stuff

816
00:27:51,840 --> 00:27:53,679
which can breaks the break thing so you

817
00:27:53,679 --> 00:27:56,159
have to do it not do anything but it's

818
00:27:56,159 --> 00:27:58,880
kind of interesting to see

819
00:27:58,880 --> 00:28:01,039
so and then next to it you can you can

820
00:28:01,039 --> 00:28:02,480
list next to the global unique id you

821
00:28:02,480 --> 00:28:04,799
can also assign a proc id which is a

822
00:28:04,799 --> 00:28:06,559
sort of canonical name you can you can

823
00:28:06,559 --> 00:28:08,480
call it anything you like and this is

824
00:28:08,480 --> 00:28:10,720
again something that that you can store

825
00:28:10,720 --> 00:28:13,360
in the in the current user space as well

826
00:28:13,360 --> 00:28:15,919
but generally within one of those class

827
00:28:15,919 --> 00:28:19,600
ids you have to use the improv server 32

828
00:28:19,600 --> 00:28:21,919
or the local server 32 to store your pe

829
00:28:21,919 --> 00:28:24,080
binary to point it to what should be

830
00:28:24,080 --> 00:28:26,240
executed when you want to instantiate

831
00:28:26,240 --> 00:28:29,600
one of those com objects

832
00:28:29,600 --> 00:28:31,679
and while it's very old i i still wanted

833
00:28:31,679 --> 00:28:33,760
to investigate so how many

834
00:28:33,760 --> 00:28:36,559
com objects are there if i just spawn a

835
00:28:36,559 --> 00:28:39,200
new azure windows 11 box so

836
00:28:39,200 --> 00:28:40,799
i started looking a little bit through

837
00:28:40,799 --> 00:28:42,799
those heights and i it turned out to be

838
00:28:42,799 --> 00:28:45,520
12 000 class ids that are already

839
00:28:45,520 --> 00:28:48,399
present in the os so quite a bunch right

840
00:28:48,399 --> 00:28:50,640
and i didn't do anything i just launched

841
00:28:50,640 --> 00:28:52,559
the windows 11 box didn't didn't touch

842
00:28:52,559 --> 00:28:54,559
anything

843
00:28:54,559 --> 00:28:57,279
and i also started looking so okay

844
00:28:57,279 --> 00:28:58,960
how many

845
00:28:58,960 --> 00:29:01,360
are actually pointing to a file that

846
00:29:01,360 --> 00:29:03,520
doesn't exist on the on the disk so

847
00:29:03,520 --> 00:29:05,200
there's already quite a bit quite a

848
00:29:05,200 --> 00:29:08,480
bunch of them so 30 37 in total

849
00:29:08,480 --> 00:29:11,840
that are being called frequently

850
00:29:11,840 --> 00:29:13,360
but don't have a file assigned to it so

851
00:29:13,360 --> 00:29:15,120
it's just hijackable just for you to

852
00:29:15,120 --> 00:29:16,399
take

853
00:29:16,399 --> 00:29:18,480
and that's on the fresh os again so then

854
00:29:18,480 --> 00:29:20,320
i started looking with progmon just to

855
00:29:20,320 --> 00:29:23,039
see how many of those goals are actually

856
00:29:23,039 --> 00:29:26,000
being made within a maybe 10 minute

857
00:29:26,000 --> 00:29:30,399
periods and there were like 305 calls um

858
00:29:30,399 --> 00:29:32,480
for different kind of by different kind

859
00:29:32,480 --> 00:29:34,880
of binary so quite a large set of

860
00:29:34,880 --> 00:29:37,200
commonly used binaries explorer is by

861
00:29:37,200 --> 00:29:39,440
far the most noisy one where they are

862
00:29:39,440 --> 00:29:41,760
calling all kinds of class objects that

863
00:29:41,760 --> 00:29:44,399
don't have a file tied to it which is

864
00:29:44,399 --> 00:29:46,000
epic for a persistence right you just

865
00:29:46,000 --> 00:29:48,559
need to assign it to binary and it will

866
00:29:48,559 --> 00:29:50,640
be called every time which can be noisy

867
00:29:50,640 --> 00:29:52,480
you don't want to have 50 beacons being

868
00:29:52,480 --> 00:29:53,840
spawned so you have to select the one

869
00:29:53,840 --> 00:29:55,760
that is actually useful to you

870
00:29:55,760 --> 00:29:58,159
but with some like this took me like 20

871
00:29:58,159 --> 00:30:00,240
minutes to set up and research so if you

872
00:30:00,240 --> 00:30:02,159
spend a couple of hours you can probably

873
00:30:02,159 --> 00:30:04,960
find some but the biggest lesson learned

874
00:30:04,960 --> 00:30:07,200
this is once you start building a golden

875
00:30:07,200 --> 00:30:09,520
image go through it

876
00:30:09,520 --> 00:30:12,159
on occasion and filter a lot of those

877
00:30:12,159 --> 00:30:13,679
keys out because they

878
00:30:13,679 --> 00:30:15,120
most of the time they don't have a real

879
00:30:15,120 --> 00:30:17,520
reason to be there

880
00:30:17,520 --> 00:30:18,799
apart from

881
00:30:18,799 --> 00:30:20,640
maybe there is a legitimate reason but

882
00:30:20,640 --> 00:30:22,000
then one of the installers that you

883
00:30:22,000 --> 00:30:24,240
might use will fix it for you

884
00:30:24,240 --> 00:30:25,840
so just get rid of them

885
00:30:25,840 --> 00:30:28,399
so back to that dll register serve 32

886
00:30:28,399 --> 00:30:30,320
right

887
00:30:30,320 --> 00:30:32,880
so that that again was one of the things

888
00:30:32,880 --> 00:30:34,799
that that could actually

889
00:30:34,799 --> 00:30:37,360
write com object so it turned out to be

890
00:30:37,360 --> 00:30:39,600
one of the functions for at least for

891
00:30:39,600 --> 00:30:40,880
indirect show but you can use it

892
00:30:40,880 --> 00:30:44,399
generally to to store com objects

893
00:30:44,399 --> 00:30:47,279
and in the documentation on the previous

894
00:30:47,279 --> 00:30:49,440
page it mentioned that it usually should

895
00:30:49,440 --> 00:30:52,000
be done through the redshirt 32 binary

896
00:30:52,000 --> 00:30:54,799
which is also a low bin but

897
00:30:54,799 --> 00:30:56,240
looking through my whole malware

898
00:30:56,240 --> 00:30:58,720
repository i could only find a couple of

899
00:30:58,720 --> 00:31:00,480
instances that are actually using this

900
00:31:00,480 --> 00:31:02,799
on the command line and the only ones

901
00:31:02,799 --> 00:31:04,399
that i could attribute or were

902
00:31:04,399 --> 00:31:07,519
attributed were apd32 with this weird

903
00:31:07,519 --> 00:31:09,679
long stuff so usually it's done in a

904
00:31:09,679 --> 00:31:11,519
different way so it's either an api call

905
00:31:11,519 --> 00:31:14,000
or it's something done by an installer

906
00:31:14,000 --> 00:31:15,679
and you don't see it on the command line

907
00:31:15,679 --> 00:31:19,679
so it's also very rare to see

908
00:31:19,679 --> 00:31:21,200
and if you want to learn a little bit

909
00:31:21,200 --> 00:31:22,960
more about comms these these helped me

910
00:31:22,960 --> 00:31:25,120
the most especially james forshaw and

911
00:31:25,120 --> 00:31:26,880
casey smith they have some great

912
00:31:26,880 --> 00:31:28,799
research there and if you want to look

913
00:31:28,799 --> 00:31:31,120
into hijacking that david dallas did an

914
00:31:31,120 --> 00:31:33,600
excellent derbycon presentation

915
00:31:33,600 --> 00:31:35,600
in 2019

916
00:31:35,600 --> 00:31:36,960
where he also released some tools to

917
00:31:36,960 --> 00:31:40,080
make it even easier for you

918
00:31:40,080 --> 00:31:41,760
one of the other one interesting

919
00:31:41,760 --> 00:31:45,440
websites that i use a lot for for binary

920
00:31:45,440 --> 00:31:47,840
checks as well it's a strong exact

921
00:31:47,840 --> 00:31:49,840
clopidia it's not the easiest thing to

922
00:31:49,840 --> 00:31:51,679
pronounce for me but they have they have

923
00:31:51,679 --> 00:31:53,679
a ton of information about about all

924
00:31:53,679 --> 00:31:55,760
kinds of executables and dlls which are

925
00:31:55,760 --> 00:31:57,440
commonly seen on a windows box you get

926
00:31:57,440 --> 00:32:00,320
hashes all kinds of abuse methods

927
00:32:00,320 --> 00:32:02,480
and and generic command line output so

928
00:32:02,480 --> 00:32:04,000
it's also easy to see what the tool is

929
00:32:04,000 --> 00:32:05,440
capable of but they also have a com

930
00:32:05,440 --> 00:32:08,320
library where they show you all the com

931
00:32:08,320 --> 00:32:10,799
objects and the commonly used dll names

932
00:32:10,799 --> 00:32:12,240
and these kind of things which can be

933
00:32:12,240 --> 00:32:13,679
very useful

934
00:32:13,679 --> 00:32:15,360
because a lot of the com objects don't

935
00:32:15,360 --> 00:32:17,039
have a canonical name assigned to it so

936
00:32:17,039 --> 00:32:19,279
it's pretty difficult to understand

937
00:32:19,279 --> 00:32:21,519
from a guit what is actually being done

938
00:32:21,519 --> 00:32:22,399
there

939
00:32:22,399 --> 00:32:23,919
so this might help a little bit as well

940
00:32:23,919 --> 00:32:26,640
in your research

941
00:32:27,039 --> 00:32:29,279
so so a lot of things what what can you

942
00:32:29,279 --> 00:32:31,120
do with this function right so you can

943
00:32:31,120 --> 00:32:32,799
actually register com objects you can

944
00:32:32,799 --> 00:32:35,200
change it you can make altercations with

945
00:32:35,200 --> 00:32:36,880
it so one of the things there's also our

946
00:32:36,880 --> 00:32:38,720
known miter technique is you can you can

947
00:32:38,720 --> 00:32:41,120
do components model object hijacking or

948
00:32:41,120 --> 00:32:43,440
chrome hijacking is short and one of the

949
00:32:43,440 --> 00:32:45,360
things that that at least agent tesla is

950
00:32:45,360 --> 00:32:47,200
commonly see doing is where they they

951
00:32:47,200 --> 00:32:49,840
actually hijacked or override the google

952
00:32:49,840 --> 00:32:52,399
update service with their own binary

953
00:32:52,399 --> 00:32:55,360
attached in that improv surf 32

954
00:32:55,360 --> 00:32:56,480
location

955
00:32:56,480 --> 00:32:58,720
where they where they first launched

956
00:32:58,720 --> 00:33:00,320
their own persistence methodology and

957
00:33:00,320 --> 00:33:02,720
then of course sure they update google

958
00:33:02,720 --> 00:33:03,919
as well

959
00:33:03,919 --> 00:33:05,679
and then overwrite that that same key

960
00:33:05,679 --> 00:33:08,000
again whenever it's needed but it's a

961
00:33:08,000 --> 00:33:10,559
great way to gain persistence or get

962
00:33:10,559 --> 00:33:12,799
code execution in the first place

963
00:33:12,799 --> 00:33:14,559
so some of the other things that they

964
00:33:14,559 --> 00:33:15,519
can do

965
00:33:15,519 --> 00:33:17,600
is they can enumerate or even change

966
00:33:17,600 --> 00:33:20,080
schedule tasks on the system they can

967
00:33:20,080 --> 00:33:21,840
look at the recently opened files or

968
00:33:21,840 --> 00:33:23,679
just do a directory of enumeration

969
00:33:23,679 --> 00:33:26,080
through com so you can hardly see any

970
00:33:26,080 --> 00:33:28,399
apis being called which is kind of nice

971
00:33:28,399 --> 00:33:30,880
and stealthy

972
00:33:30,880 --> 00:33:32,720
they can also set up their own

973
00:33:32,720 --> 00:33:35,360
connection sort of sort of interfaces to

974
00:33:35,360 --> 00:33:37,519
to create listeners to create some

975
00:33:37,519 --> 00:33:39,679
additional functionality in some cases

976
00:33:39,679 --> 00:33:42,399
they use a very old deprecated

977
00:33:42,399 --> 00:33:45,039
eucom connection point which

978
00:33:45,039 --> 00:33:47,120
should be that but it still works even

979
00:33:47,120 --> 00:33:49,760
on a windows 11 box

980
00:33:49,760 --> 00:33:51,120
and then they could use all kinds of

981
00:33:51,120 --> 00:33:52,480
other telemetry that i didn't really

982
00:33:52,480 --> 00:33:54,080
look into yet but you can even do all

983
00:33:54,080 --> 00:33:57,519
kinds of rpc installer messaging

984
00:33:57,519 --> 00:34:00,720
all kinds of enumeration tooling

985
00:34:00,720 --> 00:34:02,960
even even talking to the to the proxy

986
00:34:02,960 --> 00:34:04,080
host

987
00:34:04,080 --> 00:34:06,399
so there's a lot of a lot of still a lot

988
00:34:06,399 --> 00:34:08,800
of stuff that i can do uh investigating

989
00:34:08,800 --> 00:34:10,560
this but what they also can do

990
00:34:10,560 --> 00:34:12,480
is um there's a couple of class ids that

991
00:34:12,480 --> 00:34:15,199
are tied to the auto runs so they're on

992
00:34:15,199 --> 00:34:17,520
the on boot

993
00:34:17,520 --> 00:34:19,359
events so every time you put your

994
00:34:19,359 --> 00:34:21,040
windows box

995
00:34:21,040 --> 00:34:22,719
these these four class ids are

996
00:34:22,719 --> 00:34:24,719
enumerated and everything that is

997
00:34:24,719 --> 00:34:28,480
registered there gets automatically

998
00:34:28,480 --> 00:34:30,399
executed and of course you can see this

999
00:34:30,399 --> 00:34:32,480
with cis internal autoruns tool as well

1000
00:34:32,480 --> 00:34:34,960
but nobody runs that every day or or

1001
00:34:34,960 --> 00:34:37,199
very few people do

1002
00:34:37,199 --> 00:34:38,480
and you can see that at least some of

1003
00:34:38,480 --> 00:34:40,399
the malware families are using at least

1004
00:34:40,399 --> 00:34:42,079
two of those

1005
00:34:42,079 --> 00:34:43,918
not not everybody and generic yeah that

1006
00:34:43,918 --> 00:34:45,760
can be anything it's not classified at

1007
00:34:45,760 --> 00:34:47,520
least by my detection

1008
00:34:47,520 --> 00:34:49,760
platform

1009
00:34:49,760 --> 00:34:51,599
but the other two are

1010
00:34:51,599 --> 00:34:55,040
at least for me unseen yet

1011
00:34:55,040 --> 00:34:58,079
so going back to that to that overview

1012
00:34:58,079 --> 00:35:00,400
it's kind of interesting to see that

1013
00:35:00,400 --> 00:35:02,160
quite a lot of the malware that i was

1014
00:35:02,160 --> 00:35:05,040
first interested all use this function

1015
00:35:05,040 --> 00:35:05,920
um

1016
00:35:05,920 --> 00:35:08,400
and it's kind of interesting to see that

1017
00:35:08,400 --> 00:35:10,480
only those groups are doing it and not

1018
00:35:10,480 --> 00:35:12,240
even all at the same time there was a

1019
00:35:12,240 --> 00:35:14,640
sort of sequential thing behind it so

1020
00:35:14,640 --> 00:35:16,880
for me it's kind of interesting now

1021
00:35:16,880 --> 00:35:19,359
like who is doing this and why are they

1022
00:35:19,359 --> 00:35:21,119
doing it in sort of sequence is somebody

1023
00:35:21,119 --> 00:35:23,040
doing it and reselling it and reselling

1024
00:35:23,040 --> 00:35:25,280
it or are they reversing each other

1025
00:35:25,280 --> 00:35:28,800
which apparently they probably also do

1026
00:35:28,800 --> 00:35:30,720
and and how is this this being done

1027
00:35:30,720 --> 00:35:32,160
because i couldn't find real sample

1028
00:35:32,160 --> 00:35:34,160
codes of this implementation on the

1029
00:35:34,160 --> 00:35:36,240
public internet at least there might be

1030
00:35:36,240 --> 00:35:38,079
something on the dark rep forum but i i

1031
00:35:38,079 --> 00:35:40,079
never bothered to look that far

1032
00:35:40,079 --> 00:35:41,599
uh but it was an interesting thing to

1033
00:35:41,599 --> 00:35:44,240
see because first we see we see

1034
00:35:44,240 --> 00:35:46,720
cockbots or cubots or whatever we want

1035
00:35:46,720 --> 00:35:48,160
to call it there's multiple names for it

1036
00:35:48,160 --> 00:35:50,320
use it then they stop using it in the

1037
00:35:50,320 --> 00:35:52,320
summer and then after summer or

1038
00:35:52,320 --> 00:35:53,599
somewhere in the middle of the summer

1039
00:35:53,599 --> 00:35:55,680
suddenly trickbot becomes very active

1040
00:35:55,680 --> 00:35:57,119
with it

1041
00:35:57,119 --> 00:36:00,000
and now um hardly anybody is really

1042
00:36:00,000 --> 00:36:01,760
using it so it's only the the the

1043
00:36:01,760 --> 00:36:04,160
turquoise ones that are highlighted a

1044
00:36:04,160 --> 00:36:05,680
little bit in september and october and

1045
00:36:05,680 --> 00:36:07,359
now it's sort of dead

1046
00:36:07,359 --> 00:36:10,320
um so it's it's weird to see

1047
00:36:10,320 --> 00:36:13,520
why these changes are there um some

1048
00:36:13,520 --> 00:36:15,280
other fun finds i had

1049
00:36:15,280 --> 00:36:17,040
basically just scrolling through the

1050
00:36:17,040 --> 00:36:19,200
whole database is where trigbot is a

1051
00:36:19,200 --> 00:36:21,599
known russian group and then somebody

1052
00:36:21,599 --> 00:36:24,079
had all kinds of samples with bear.xc

1053
00:36:24,079 --> 00:36:27,440
and acm in there which i found funny

1054
00:36:27,440 --> 00:36:30,079
um one of the other things was

1055
00:36:30,079 --> 00:36:32,640
i started looking at okay what what

1056
00:36:32,640 --> 00:36:35,040
level of profanity is in there so i

1057
00:36:35,040 --> 00:36:37,280
started digging through strings and file

1058
00:36:37,280 --> 00:36:39,920
names api calls all kinds of other stuff

1059
00:36:39,920 --> 00:36:42,079
and it turned out that that drydex

1060
00:36:42,079 --> 00:36:44,480
within a couple of weeks was the most

1061
00:36:44,480 --> 00:36:46,480
using the most swear words

1062
00:36:46,480 --> 00:36:48,400
which was also sort of interesting it

1063
00:36:48,400 --> 00:36:49,920
might might help a little bit in

1064
00:36:49,920 --> 00:36:51,920
profiling groups

1065
00:36:51,920 --> 00:36:53,599
or not

1066
00:36:53,599 --> 00:36:54,880
so

1067
00:36:54,880 --> 00:36:56,800
what can we do with all this information

1068
00:36:56,800 --> 00:36:58,960
right so so from a detection perspective

1069
00:36:58,960 --> 00:37:01,040
we can we can have all kinds of based on

1070
00:37:01,040 --> 00:37:03,599
only this research build detections on

1071
00:37:03,599 --> 00:37:05,839
the redshirt 32 and the run dll command

1072
00:37:05,839 --> 00:37:07,440
lines the functions that are being

1073
00:37:07,440 --> 00:37:09,359
called and maybe even go further

1074
00:37:09,359 --> 00:37:11,280
reversing them a little bit to see what

1075
00:37:11,280 --> 00:37:12,880
they actually write to the registry if

1076
00:37:12,880 --> 00:37:15,440
we don't have that that telemetry there

1077
00:37:15,440 --> 00:37:16,960
so we can also have a look at the

1078
00:37:16,960 --> 00:37:18,720
registry telemetry so if you have a

1079
00:37:18,720 --> 00:37:21,280
proper edr or sysmon or something like

1080
00:37:21,280 --> 00:37:23,440
it you can also see all the telemetry

1081
00:37:23,440 --> 00:37:24,960
that they feed into the registry what

1082
00:37:24,960 --> 00:37:26,480
they are actually writing which files

1083
00:37:26,480 --> 00:37:28,240
they are actually registering you can

1084
00:37:28,240 --> 00:37:29,680
pull those and see what it's actually

1085
00:37:29,680 --> 00:37:31,839
doing

1086
00:37:31,839 --> 00:37:33,440
and of course you can look for anomalous

1087
00:37:33,440 --> 00:37:36,079
com objects which is quite simple in

1088
00:37:36,079 --> 00:37:37,599
general to do

1089
00:37:37,599 --> 00:37:40,000
if you have a very solid well-maintained

1090
00:37:40,000 --> 00:37:41,680
enterprise you can you can

1091
00:37:41,680 --> 00:37:43,280
sort of profile baseline what is

1092
00:37:43,280 --> 00:37:45,119
commonly seen there and build some

1093
00:37:45,119 --> 00:37:47,119
additional stuff on top of it and of

1094
00:37:47,119 --> 00:37:48,560
course you can also start building

1095
00:37:48,560 --> 00:37:50,160
mitigation right so as i mentioned in

1096
00:37:50,160 --> 00:37:51,839
your role and image you can unregister a

1097
00:37:51,839 --> 00:37:53,200
lot of those

1098
00:37:53,200 --> 00:37:55,599
sort of ghosted objects to at least

1099
00:37:55,599 --> 00:37:59,119
prevent those from being being reused

1100
00:37:59,119 --> 00:38:01,680
you can change the path of the ones that

1101
00:38:01,680 --> 00:38:03,440
were improperly linked so sometimes they

1102
00:38:03,440 --> 00:38:06,480
only use a dll name to link it but you

1103
00:38:06,480 --> 00:38:08,000
can change that to the full path name

1104
00:38:08,000 --> 00:38:10,000
where it's actually there so you can do

1105
00:38:10,000 --> 00:38:12,079
at least can't do the dll hijacking

1106
00:38:12,079 --> 00:38:14,400
methodology of just having it in another

1107
00:38:14,400 --> 00:38:16,640
directory and probably being load with

1108
00:38:16,640 --> 00:38:17,760
prevalence

1109
00:38:17,760 --> 00:38:19,920
and you can also use microsoft's app

1110
00:38:19,920 --> 00:38:21,359
control

1111
00:38:21,359 --> 00:38:24,320
to block some of the known malicious

1112
00:38:24,320 --> 00:38:26,320
class ids which is

1113
00:38:26,320 --> 00:38:28,400
a lot more work frankly but it's super

1114
00:38:28,400 --> 00:38:30,400
powerful because then it can't even be

1115
00:38:30,400 --> 00:38:33,680
overwritten from the ace current user

1116
00:38:33,680 --> 00:38:35,119
and from there you can you can probably

1117
00:38:35,119 --> 00:38:37,440
do additional

1118
00:38:37,440 --> 00:38:39,599
mitigations where you can start building

1119
00:38:39,599 --> 00:38:40,800
all kinds of

1120
00:38:40,800 --> 00:38:43,760
pattern based so in summary i like

1121
00:38:43,760 --> 00:38:45,760
sandbox telemetry a lot because i can i

1122
00:38:45,760 --> 00:38:48,079
can see new behavior i can see changes

1123
00:38:48,079 --> 00:38:50,000
in behavior

1124
00:38:50,000 --> 00:38:52,560
i can also use it as a sort of does this

1125
00:38:52,560 --> 00:38:54,079
actually happen in the real world

1126
00:38:54,079 --> 00:38:55,839
scenario where i've come up with a new

1127
00:38:55,839 --> 00:38:58,079
idea see if it is already being executed

1128
00:38:58,079 --> 00:39:00,800
by someone and then maybe get some new

1129
00:39:00,800 --> 00:39:04,160
ideas from it um but but this also i i

1130
00:39:04,160 --> 00:39:05,920
need to be aware of this this is far

1131
00:39:05,920 --> 00:39:07,280
from complete right this is only the

1132
00:39:07,280 --> 00:39:08,960
data that actually executes in my

1133
00:39:08,960 --> 00:39:11,440
sandbox so if they have better malware

1134
00:39:11,440 --> 00:39:14,240
evasion that then i currently try to

1135
00:39:14,240 --> 00:39:16,320
mitigate it will die and it won't

1136
00:39:16,320 --> 00:39:18,640
execute whatever it does plus this is

1137
00:39:18,640 --> 00:39:21,200
only the initial stage so most of the

1138
00:39:21,200 --> 00:39:23,520
interactive stuff if if they actually so

1139
00:39:23,520 --> 00:39:26,079
usually it calls back to a c2

1140
00:39:26,079 --> 00:39:28,480
i can see that but whatever happens

1141
00:39:28,480 --> 00:39:30,000
afterwards when the attacker actually

1142
00:39:30,000 --> 00:39:32,000
tries to go interactive and starts doing

1143
00:39:32,000 --> 00:39:33,760
all kinds of other stuff i can't see

1144
00:39:33,760 --> 00:39:35,200
that in this data set i might have

1145
00:39:35,200 --> 00:39:36,800
another one for that

1146
00:39:36,800 --> 00:39:38,640
but that's way harder to maintain and

1147
00:39:38,640 --> 00:39:40,640
it's also a little bit more

1148
00:39:40,640 --> 00:39:42,480
dangerous because

1149
00:39:42,480 --> 00:39:44,800
i don't want to be attributed as running

1150
00:39:44,800 --> 00:39:47,760
one of those hottie pods for them

1151
00:39:47,760 --> 00:39:49,680
so that data is also missing so it's

1152
00:39:49,680 --> 00:39:53,119
definitely just a start

1153
00:39:53,119 --> 00:39:54,720
but definitely

1154
00:39:54,720 --> 00:39:56,480
in general if you're trying to build

1155
00:39:56,480 --> 00:39:58,800
detections never look at signatures or

1156
00:39:58,800 --> 00:40:00,800
at least as little as you should

1157
00:40:00,800 --> 00:40:03,280
um and look more at the behavior so they

1158
00:40:03,280 --> 00:40:04,720
run something and then probably

1159
00:40:04,720 --> 00:40:06,480
something runs afterwards which is more

1160
00:40:06,480 --> 00:40:07,839
valuable than

1161
00:40:07,839 --> 00:40:09,920
all the all the small signatures that

1162
00:40:09,920 --> 00:40:11,839
that can help but they're easily

1163
00:40:11,839 --> 00:40:14,079
bypassable you can even use a different

1164
00:40:14,079 --> 00:40:16,240
class ide or something else so looking

1165
00:40:16,240 --> 00:40:17,119
for

1166
00:40:17,119 --> 00:40:19,280
just a single guide doesn't doesn't help

1167
00:40:19,280 --> 00:40:20,400
you a lot

1168
00:40:20,400 --> 00:40:22,160
and one of the more generic concepts

1169
00:40:22,160 --> 00:40:23,920
probably is to know the visibility of

1170
00:40:23,920 --> 00:40:25,599
your tooling

1171
00:40:25,599 --> 00:40:28,319
every edr has telemetry some is really

1172
00:40:28,319 --> 00:40:30,480
good some is not so good

1173
00:40:30,480 --> 00:40:32,000
but even the really good ones filter

1174
00:40:32,000 --> 00:40:34,480
data so maybe you're trying to search

1175
00:40:34,480 --> 00:40:36,800
for something that isn't even logging so

1176
00:40:36,800 --> 00:40:38,319
you might have a blind spot there you

1177
00:40:38,319 --> 00:40:40,480
need to augment that with another tool

1178
00:40:40,480 --> 00:40:42,480
or talk to the vendor to actually start

1179
00:40:42,480 --> 00:40:44,319
onboarding it

1180
00:40:44,319 --> 00:40:46,640
and get more visibility that way and the

1181
00:40:46,640 --> 00:40:48,480
only way of doing that is just doing it

1182
00:40:48,480 --> 00:40:51,280
in labs repeating yourself and also

1183
00:40:51,280 --> 00:40:52,960
validating you can build pipelines for

1184
00:40:52,960 --> 00:40:54,560
it if you want

1185
00:40:54,560 --> 00:40:56,800
but this is a very interesting bit

1186
00:40:56,800 --> 00:40:57,839
where you

1187
00:40:57,839 --> 00:40:59,680
you can't really trust the vendor that

1188
00:40:59,680 --> 00:41:01,440
isn't disclosing to you what it's

1189
00:41:01,440 --> 00:41:03,119
actually monitoring so you need to make

1190
00:41:03,119 --> 00:41:06,160
sure that you you know it yourself

1191
00:41:06,160 --> 00:41:08,319
and again attack is amazing it's really

1192
00:41:08,319 --> 00:41:10,480
useful as a generic language to to

1193
00:41:10,480 --> 00:41:12,160
communicate what is actually happening

1194
00:41:12,160 --> 00:41:14,880
but it's never complete and also it will

1195
00:41:14,880 --> 00:41:16,800
never be because it's maintained by a

1196
00:41:16,800 --> 00:41:19,040
small team of hardworking people

1197
00:41:19,040 --> 00:41:21,040
and they rely on public information that

1198
00:41:21,040 --> 00:41:22,560
is actually fact

1199
00:41:22,560 --> 00:41:24,400
that they can fact check

1200
00:41:24,400 --> 00:41:26,880
so if if i do an assumption and write it

1201
00:41:26,880 --> 00:41:28,400
it's probably not ending up there

1202
00:41:28,400 --> 00:41:30,240
because it needs to be backed with

1203
00:41:30,240 --> 00:41:32,240
actual data

1204
00:41:32,240 --> 00:41:34,160
and ideally try to build mitigations

1205
00:41:34,160 --> 00:41:36,960
first before you stop the detections

1206
00:41:36,960 --> 00:41:38,480
if you can

1207
00:41:38,480 --> 00:41:40,240
because that's that's always a more

1208
00:41:40,240 --> 00:41:42,160
protective measure because they you stop

1209
00:41:42,160 --> 00:41:44,400
them in the first place

1210
00:41:44,400 --> 00:41:46,319
so that was uh that was my talk thank

1211
00:41:46,319 --> 00:41:48,319
you very much for for being here if you

1212
00:41:48,319 --> 00:41:50,319
have any questions feel free to ask them

1213
00:41:50,319 --> 00:41:52,880
now or find me somewhere else i'll be at

1214
00:41:52,880 --> 00:41:55,119
the armory right after to uh to talk

1215
00:41:55,119 --> 00:41:58,000
about the sysmon tool that i built and a

1216
00:41:58,000 --> 00:42:01,040
threat hunting app on splunk

1217
00:42:01,040 --> 00:42:03,839
thank you

1218
00:42:03,920 --> 00:42:06,000
we have two questions from the airmeat

1219
00:42:06,000 --> 00:42:07,119
app

1220
00:42:07,119 --> 00:42:09,520
um what's your recommendation

1221
00:42:09,520 --> 00:42:11,680
hunting for a normal and normal

1222
00:42:11,680 --> 00:42:15,359
anomalous calm objects are there lower

1223
00:42:15,359 --> 00:42:18,319
hanging fruit in that environment

1224
00:42:18,319 --> 00:42:19,760
yeah all the low hanging fruit is

1225
00:42:19,760 --> 00:42:21,520
probably looking at

1226
00:42:21,520 --> 00:42:23,040
either

1227
00:42:23,040 --> 00:42:25,040
overwriting some of the the known

1228
00:42:25,040 --> 00:42:27,520
updating services like like

1229
00:42:27,520 --> 00:42:29,760
google chrome or firefox or some of the

1230
00:42:29,760 --> 00:42:32,240
other ones where it's quite common for

1231
00:42:32,240 --> 00:42:34,160
the malware actors to to make spelling

1232
00:42:34,160 --> 00:42:36,720
errors so these are are quite low

1233
00:42:36,720 --> 00:42:38,240
hanging fruit

1234
00:42:38,240 --> 00:42:40,000
and the same for the other runs and some

1235
00:42:40,000 --> 00:42:41,440
of these these

1236
00:42:41,440 --> 00:42:44,400
quite a heavily used scheduled task is

1237
00:42:44,400 --> 00:42:46,319
definitely one

1238
00:42:46,319 --> 00:42:48,240
so those are the most prevalent i guess

1239
00:42:48,240 --> 00:42:49,520
okay nice

1240
00:42:49,520 --> 00:42:50,400
and

1241
00:42:50,400 --> 00:42:52,240
second and final question what's the

1242
00:42:52,240 --> 00:42:53,839
most interesting malware evasion

1243
00:42:53,839 --> 00:42:55,680
technique you've picked up

1244
00:42:55,680 --> 00:42:56,880
well

1245
00:42:56,880 --> 00:42:59,119
well

1246
00:42:59,119 --> 00:43:00,480
out of the top of my head it's probably

1247
00:43:00,480 --> 00:43:03,760
interesting to see that they um i i work

1248
00:43:03,760 --> 00:43:06,240
a lot with the sysmon telemetry um

1249
00:43:06,240 --> 00:43:08,319
simply because it's so configurable and

1250
00:43:08,319 --> 00:43:09,760
i can actually determine what i want to

1251
00:43:09,760 --> 00:43:11,920
see and what i don't want to see

1252
00:43:11,920 --> 00:43:13,839
and what is interesting that then

1253
00:43:13,839 --> 00:43:15,760
from the whole data set i have for a

1254
00:43:15,760 --> 00:43:18,160
year now that almost nobody tries to

1255
00:43:18,160 --> 00:43:20,240
kill cis model in the first place and

1256
00:43:20,240 --> 00:43:22,720
even red teamers don't do that a lot

1257
00:43:22,720 --> 00:43:25,040
so simply my assumption is that they

1258
00:43:25,040 --> 00:43:27,280
don't want that it's not stopping them

1259
00:43:27,280 --> 00:43:29,200
from doing what they want so they don't

1260
00:43:29,200 --> 00:43:31,839
care for it where they do kill a lot of

1261
00:43:31,839 --> 00:43:34,400
the edrs with some interesting ways so

1262
00:43:34,400 --> 00:43:36,880
they try to kill edrs or avs

1263
00:43:36,880 --> 00:43:38,400
sometimes just stopping the service

1264
00:43:38,400 --> 00:43:39,839
sometimes they go a little bit further

1265
00:43:39,839 --> 00:43:42,480
with injecting into a driver and then

1266
00:43:42,480 --> 00:43:44,319
trying to kill it so these these are the

1267
00:43:44,319 --> 00:43:46,400
most interesting ones that i can think

1268
00:43:46,400 --> 00:43:48,000
of right now

1269
00:43:48,000 --> 00:43:51,000
cool

