1
00:00:05,920 --> 00:00:09,360
hello everyone so my name is uh yvonne

2
00:00:09,360 --> 00:00:12,160
and today i will speak about basically

3
00:00:12,160 --> 00:00:14,719
how experiences in uh

4
00:00:14,719 --> 00:00:18,320
infusing area and uh and especially

5
00:00:18,320 --> 00:00:20,720
against network services with a custom

6
00:00:20,720 --> 00:00:25,760
protocol and for this we use sap

7
00:00:25,760 --> 00:00:28,000
just one slide about me like i say i'm

8
00:00:28,000 --> 00:00:33,120
miami ziva i work for onapsis this is a

9
00:00:33,120 --> 00:00:34,960
security

10
00:00:34,960 --> 00:00:36,719
company dedicated in the european

11
00:00:36,719 --> 00:00:39,360
security and of course of sap and my

12
00:00:39,360 --> 00:00:41,760
daily work is to

13
00:00:41,760 --> 00:00:44,800
to find vulnerability in sap system so

14
00:00:44,800 --> 00:00:46,719
i've already involved in few

15
00:00:46,719 --> 00:00:48,719
vulnerabilities and

16
00:00:48,719 --> 00:00:50,879
all this variety come from

17
00:00:50,879 --> 00:00:53,840
sap components and so

18
00:00:53,840 --> 00:00:56,239
that's that's enough for me

19
00:00:56,239 --> 00:00:59,239
yes

20
00:00:59,280 --> 00:01:02,480
yeah an issue with her

21
00:01:04,400 --> 00:01:07,199
you can hear me

22
00:01:09,439 --> 00:01:10,720
it's fixed

23
00:01:10,720 --> 00:01:12,400
it's better okay

24
00:01:12,400 --> 00:01:15,040
do we want to okay

25
00:01:15,040 --> 00:01:16,720
so um

26
00:01:16,720 --> 00:01:19,439
this is our android for today uh so very

27
00:01:19,439 --> 00:01:21,520
quick introduction and after that i will

28
00:01:21,520 --> 00:01:25,439
just explain try to explain step by step

29
00:01:25,439 --> 00:01:28,000
how journey in the in the in this fusing

30
00:01:28,000 --> 00:01:29,439
uh area

31
00:01:29,439 --> 00:01:30,640
um

32
00:01:30,640 --> 00:01:32,640
as an introduction

33
00:01:32,640 --> 00:01:34,880
to

34
00:01:34,880 --> 00:01:37,680
the two story was in my last conferences

35
00:01:37,680 --> 00:01:39,520
two years ago

36
00:01:39,520 --> 00:01:42,000
i was on a diner and a dinosaur speaker

37
00:01:42,000 --> 00:01:44,560
and i discussed with someone and

38
00:01:44,560 --> 00:01:47,360
he the guy was very very poor very

39
00:01:47,360 --> 00:01:49,920
skilled in the fusing stuff

40
00:01:49,920 --> 00:01:51,680
and he told me something like hey you

41
00:01:51,680 --> 00:01:54,799
when you match your sap knowledge with

42
00:01:54,799 --> 00:01:56,960
fuzzing i'm pretty sure you will find

43
00:01:56,960 --> 00:01:57,920
something

44
00:01:57,920 --> 00:01:59,439
so this is

45
00:01:59,439 --> 00:02:01,280
this is something i put in my mind and

46
00:02:01,280 --> 00:02:04,000
few months after i was the the occasion

47
00:02:04,000 --> 00:02:05,600
to to work

48
00:02:05,600 --> 00:02:06,880
on this subject

49
00:02:06,880 --> 00:02:09,598
so i was curious of course and

50
00:02:09,598 --> 00:02:10,479
also

51
00:02:10,479 --> 00:02:12,640
when when i start to

52
00:02:12,640 --> 00:02:14,640
to try to find out if there are already

53
00:02:14,640 --> 00:02:17,920
some research about using sap i didn't

54
00:02:17,920 --> 00:02:19,520
find anything

55
00:02:19,520 --> 00:02:20,720
and

56
00:02:20,720 --> 00:02:22,959
we think that sap here it's a very very

57
00:02:22,959 --> 00:02:24,800
good example because

58
00:02:24,800 --> 00:02:26,640
when you scan for the first time an sap

59
00:02:26,640 --> 00:02:29,120
system you've got something like that

60
00:02:29,120 --> 00:02:30,080
this is

61
00:02:30,080 --> 00:02:31,680
for one system

62
00:02:31,680 --> 00:02:34,160
they are all this port is by default is

63
00:02:34,160 --> 00:02:35,280
open

64
00:02:35,280 --> 00:02:38,239
of course there are some very well no

65
00:02:38,239 --> 00:02:40,640
kind of services actually to play

66
00:02:40,640 --> 00:02:41,599
server

67
00:02:41,599 --> 00:02:43,440
but there are also some

68
00:02:43,440 --> 00:02:45,599
few other

69
00:02:45,599 --> 00:02:48,400
services who handle some custom protocol

70
00:02:48,400 --> 00:02:51,760
that we can call it a black box protocol

71
00:02:51,760 --> 00:02:53,840
and here we will speak about

72
00:02:53,840 --> 00:02:55,760
nq services

73
00:02:55,760 --> 00:02:58,000
igs etc etc

74
00:02:58,000 --> 00:02:59,120
so

75
00:02:59,120 --> 00:03:00,720
when we start on

76
00:03:00,720 --> 00:03:03,680
on to try to study okay okay what is the

77
00:03:03,680 --> 00:03:05,599
fusion what we what we need to do what

78
00:03:05,599 --> 00:03:08,080
we need to add etc the first thing we

79
00:03:08,080 --> 00:03:10,480
understand is we need to have a test

80
00:03:10,480 --> 00:03:12,800
case what we call a test case in this in

81
00:03:12,800 --> 00:03:15,200
this uh in this case it's

82
00:03:15,200 --> 00:03:16,879
a network packet

83
00:03:16,879 --> 00:03:19,519
we would like to send to the services

84
00:03:19,519 --> 00:03:21,360
and we would like to first this network

85
00:03:21,360 --> 00:03:22,959
packet would like to mute this network

86
00:03:22,959 --> 00:03:25,680
packet and and that's it so the first

87
00:03:25,680 --> 00:03:28,560
thing the first step we understand is to

88
00:03:28,560 --> 00:03:32,959
try to grab uh this uh this packet so i

89
00:03:32,959 --> 00:03:36,159
just have one slide by custom services

90
00:03:36,159 --> 00:03:39,040
handled by sap and just to

91
00:03:39,040 --> 00:03:41,200
explain how we

92
00:03:41,200 --> 00:03:44,159
achieve to grab a network packet so the

93
00:03:44,159 --> 00:03:47,040
first one is called icm this stands for

94
00:03:47,040 --> 00:03:50,080
internet communication manager this is

95
00:03:50,080 --> 00:03:52,959
no more than uh the web server host by

96
00:03:52,959 --> 00:03:57,680
by the the the sap system so just

97
00:03:57,680 --> 00:04:01,040
uh sniff the port connect with a browser

98
00:04:01,040 --> 00:04:02,480
and you get a lot of packet like that

99
00:04:02,480 --> 00:04:04,400
this is not very complicated the second

100
00:04:04,400 --> 00:04:06,080
one is the enqueue

101
00:04:06,080 --> 00:04:08,159
the inquiry server manage

102
00:04:08,159 --> 00:04:10,959
uh manager lock

103
00:04:10,959 --> 00:04:13,360
the lock system for an sap

104
00:04:13,360 --> 00:04:16,880
syst for the sap instances so

105
00:04:16,880 --> 00:04:19,759
what we what how we perform to have some

106
00:04:19,759 --> 00:04:23,840
test case it just sniff the port 3201

107
00:04:23,840 --> 00:04:26,479
and we start the system also we start

108
00:04:26,479 --> 00:04:28,479
some instances and also try to update a

109
00:04:28,479 --> 00:04:31,520
table like that we got several

110
00:04:31,520 --> 00:04:34,639
packets and whole it's uh the enqueue

111
00:04:34,639 --> 00:04:36,479
protocol so this is a proprietary

112
00:04:36,479 --> 00:04:38,560
protocol with without a lot of

113
00:04:38,560 --> 00:04:40,320
documentation

114
00:04:40,320 --> 00:04:43,040
and one word about the ice igs so the

115
00:04:43,040 --> 00:04:46,320
igs is the internet graphical services i

116
00:04:46,320 --> 00:04:48,400
can do a lot of things i already worked

117
00:04:48,400 --> 00:04:50,639
few years ago on the igs

118
00:04:50,639 --> 00:04:53,680
services and it can

119
00:04:53,680 --> 00:04:55,680
convert image

120
00:04:55,680 --> 00:05:00,000
chart and etc so listen on this part and

121
00:05:00,000 --> 00:05:01,919
you get nothing but if you listen on

122
00:05:01,919 --> 00:05:04,639
local sockets in slash tmp

123
00:05:04,639 --> 00:05:06,720
dot sub stream followed by the port

124
00:05:06,720 --> 00:05:07,759
number

125
00:05:07,759 --> 00:05:10,560
you can you can grab and sniff a lot of

126
00:05:10,560 --> 00:05:13,520
packets so how to generate package just

127
00:05:13,520 --> 00:05:15,759
login it into the system

128
00:05:15,759 --> 00:05:19,280
use the igs administration dashboard and

129
00:05:19,280 --> 00:05:22,000
then you you can perform some activity

130
00:05:22,000 --> 00:05:24,639
general chart etc and you get a lot of

131
00:05:24,639 --> 00:05:28,320
uh packet also like that

132
00:05:28,320 --> 00:05:30,880
uh the next one is the sap gateway this

133
00:05:30,880 --> 00:05:31,680
is a

134
00:05:31,680 --> 00:05:34,000
way no services now

135
00:05:34,000 --> 00:05:36,639
to sum up the getaway it's uh the the

136
00:05:36,639 --> 00:05:39,520
services who who can

137
00:05:39,520 --> 00:05:42,320
able the sap to communicate with outside

138
00:05:42,320 --> 00:05:44,800
it could be different kind of target

139
00:05:44,800 --> 00:05:47,520
could be another sap system so to have

140
00:05:47,520 --> 00:05:50,560
some some packets this is no more than

141
00:05:50,560 --> 00:05:52,880
we log into the system we launched again

142
00:05:52,880 --> 00:05:54,560
the admin uh

143
00:05:54,560 --> 00:05:56,479
transaction for the sub getaway

144
00:05:56,479 --> 00:05:58,639
administration and you perform some

145
00:05:58,639 --> 00:06:01,440
health check you'll perform also some

146
00:06:01,440 --> 00:06:03,680
some kind of ping between

147
00:06:03,680 --> 00:06:06,880
several system etc etc so like that we

148
00:06:06,880 --> 00:06:08,800
we got a

149
00:06:08,800 --> 00:06:10,400
few packets about the

150
00:06:10,400 --> 00:06:12,639
sap gateway

151
00:06:12,639 --> 00:06:16,160
the next one is does it dispatcher

152
00:06:16,160 --> 00:06:19,039
the dispatcher without

153
00:06:19,039 --> 00:06:20,639
too many complicated things the

154
00:06:20,639 --> 00:06:23,680
departure handled the user request

155
00:06:23,680 --> 00:06:26,960
so when the user used the sap client

156
00:06:26,960 --> 00:06:29,280
name the sub g it communicate with the

157
00:06:29,280 --> 00:06:31,360
dispatcher and the dispatcher

158
00:06:31,360 --> 00:06:32,880
dispatch

159
00:06:32,880 --> 00:06:34,880
the request uh

160
00:06:34,880 --> 00:06:37,360
to several work process so for this one

161
00:06:37,360 --> 00:06:40,319
this is very easy sniff the the port and

162
00:06:40,319 --> 00:06:42,960
login to the sap system you can perform

163
00:06:42,960 --> 00:06:44,960
successful login one login something

164
00:06:44,960 --> 00:06:48,080
like that and you get a lot of packet to

165
00:06:48,080 --> 00:06:50,719
the dispatcher

166
00:06:50,880 --> 00:06:53,120
the the next one is the massage server

167
00:06:53,120 --> 00:06:54,319
so

168
00:06:54,319 --> 00:06:57,680
to simplify uh in the in in

169
00:06:57,680 --> 00:06:59,360
sap system you can have several

170
00:06:59,360 --> 00:07:01,680
instances and the massage server manage

171
00:07:01,680 --> 00:07:03,440
the communication between all and

172
00:07:03,440 --> 00:07:07,199
instances so you can again snip the port

173
00:07:07,199 --> 00:07:10,479
and you can login to uh to to the system

174
00:07:10,479 --> 00:07:12,479
because when you log in the dispatcher

175
00:07:12,479 --> 00:07:13,199
say

176
00:07:13,199 --> 00:07:15,039
communicate with the message server to

177
00:07:15,039 --> 00:07:17,199
say okay go here or go here

178
00:07:17,199 --> 00:07:19,440
and also you can start and stop one

179
00:07:19,440 --> 00:07:21,599
instances in the world system so

180
00:07:21,599 --> 00:07:25,120
again like that we got a lot of a

181
00:07:25,120 --> 00:07:27,039
packet from the the massage server

182
00:07:27,039 --> 00:07:28,960
services

183
00:07:28,960 --> 00:07:32,400
okay it was the very very easy part for

184
00:07:32,400 --> 00:07:36,000
us because we are we work for sap uh for

185
00:07:36,000 --> 00:07:38,000
many long times so

186
00:07:38,000 --> 00:07:39,440
we know exactly

187
00:07:39,440 --> 00:07:40,560
how to date

188
00:07:40,560 --> 00:07:43,919
now we we try to jump in for us it was a

189
00:07:43,919 --> 00:07:47,759
new area it was the freezing area

190
00:07:47,759 --> 00:07:49,360
when we start

191
00:07:49,360 --> 00:07:51,039
by freezing the

192
00:07:51,039 --> 00:07:53,280
the packet we just grab during the

193
00:07:53,280 --> 00:07:55,039
sniffing part

194
00:07:55,039 --> 00:07:56,400
we

195
00:07:56,400 --> 00:08:00,160
we very quickly we we we got uh one big

196
00:08:00,160 --> 00:08:01,280
problem

197
00:08:01,280 --> 00:08:03,840
to explain this problem uh is something

198
00:08:03,840 --> 00:08:04,960
like that

199
00:08:04,960 --> 00:08:06,720
to sum up the

200
00:08:06,720 --> 00:08:08,400
the packet

201
00:08:08,400 --> 00:08:12,400
uh whole the protocol uh managed by sap

202
00:08:12,400 --> 00:08:14,000
services

203
00:08:14,000 --> 00:08:17,120
use this kind of feature so the first

204
00:08:17,120 --> 00:08:21,199
four bytes of whole packet it's the size

205
00:08:21,199 --> 00:08:23,280
of the contents

206
00:08:23,280 --> 00:08:24,720
all right and this is the same for the

207
00:08:24,720 --> 00:08:27,039
dispatcher and chooser etc

208
00:08:27,039 --> 00:08:27,919
so

209
00:08:27,919 --> 00:08:30,000
why what it could be a problem when we

210
00:08:30,000 --> 00:08:31,360
try to further

211
00:08:31,360 --> 00:08:33,760
the packet itself

212
00:08:33,760 --> 00:08:35,760
let me show you with this example this

213
00:08:35,760 --> 00:08:38,559
is a very simple packet from the nq

214
00:08:38,559 --> 00:08:41,519
services this is kind of a hand check

215
00:08:41,519 --> 00:08:43,599
packet so very tiny

216
00:08:43,599 --> 00:08:44,399
so

217
00:08:44,399 --> 00:08:47,360
on the top left the first four bytes in

218
00:08:47,360 --> 00:08:50,720
in red it's the size of the rest of the

219
00:08:50,720 --> 00:08:53,360
packets okay so in this case this is 5d

220
00:08:53,360 --> 00:08:54,640
right

221
00:08:54,640 --> 00:08:57,200
now imaginate a further or tools or

222
00:08:57,200 --> 00:09:00,399
something try to modify the content by

223
00:09:00,399 --> 00:09:01,760
adding

224
00:09:01,760 --> 00:09:04,000
one two three four five six somewhere

225
00:09:04,000 --> 00:09:06,959
so the size of the content change but

226
00:09:06,959 --> 00:09:10,000
the further didn't know about what is

227
00:09:10,000 --> 00:09:13,519
the the the the first four bytes

228
00:09:13,519 --> 00:09:16,720
so it it untouched it and when you send

229
00:09:16,720 --> 00:09:18,480
this kind of packet

230
00:09:18,480 --> 00:09:20,240
to the services

231
00:09:20,240 --> 00:09:22,399
the very first check

232
00:09:22,399 --> 00:09:24,399
done by the services is to grab this

233
00:09:24,399 --> 00:09:26,560
force first four bytes

234
00:09:26,560 --> 00:09:28,320
and to compare with the size of the

235
00:09:28,320 --> 00:09:30,800
packet you send and if it's not match

236
00:09:30,800 --> 00:09:34,000
you get drop and you never go deeper in

237
00:09:34,000 --> 00:09:34,720
the

238
00:09:34,720 --> 00:09:36,880
in the binary so

239
00:09:36,880 --> 00:09:38,640
during our first test

240
00:09:38,640 --> 00:09:41,920
we've sent like 10 million tests and no

241
00:09:41,920 --> 00:09:44,720
nothing crashed zero crashes

242
00:09:44,720 --> 00:09:45,920
it was

243
00:09:45,920 --> 00:09:48,640
not the very easiest part

244
00:09:48,640 --> 00:09:51,040
so what we would like is something like

245
00:09:51,040 --> 00:09:53,839
that if the further modifies the content

246
00:09:53,839 --> 00:09:55,360
by adding

247
00:09:55,360 --> 00:09:56,560
something

248
00:09:56,560 --> 00:09:58,480
also we would like

249
00:09:58,480 --> 00:10:01,120
the the further be able to

250
00:10:01,120 --> 00:10:03,279
modify the any size

251
00:10:03,279 --> 00:10:05,920
to match it so when the service receives

252
00:10:05,920 --> 00:10:08,399
the packet it check and okay the first

253
00:10:08,399 --> 00:10:11,120
check is pass and you can go deeper in

254
00:10:11,120 --> 00:10:13,440
the services

255
00:10:13,440 --> 00:10:15,279
it's very important because

256
00:10:15,279 --> 00:10:18,000
this problem

257
00:10:18,000 --> 00:10:19,120
also

258
00:10:19,120 --> 00:10:22,720
get us to select the further

259
00:10:22,720 --> 00:10:25,279
because if you we do not

260
00:10:25,279 --> 00:10:27,920
achieve to to solve this problem

261
00:10:27,920 --> 00:10:30,240
very probably we do not achieve to do

262
00:10:30,240 --> 00:10:31,200
nothing

263
00:10:31,200 --> 00:10:35,360
so let's jump to the further selection

264
00:10:35,360 --> 00:10:36,720
um

265
00:10:36,720 --> 00:10:38,880
just imagine it when we are completely

266
00:10:38,880 --> 00:10:41,839
new in this uh subject and we try to

267
00:10:41,839 --> 00:10:44,320
understand okay what kind of further exe

268
00:10:44,320 --> 00:10:47,279
and etc you get a lot of content a lot

269
00:10:47,279 --> 00:10:49,440
of tools a lot of articles a lot of

270
00:10:49,440 --> 00:10:50,480
things

271
00:10:50,480 --> 00:10:53,120
and for me this was completely too much

272
00:10:53,120 --> 00:10:56,959
they are i don't know where to start

273
00:10:56,959 --> 00:10:58,959
i haven't the time to test everything

274
00:10:58,959 --> 00:11:01,120
about the time to to

275
00:11:01,120 --> 00:11:03,839
to to do deep research on it

276
00:11:03,839 --> 00:11:05,040
so

277
00:11:05,040 --> 00:11:07,360
what we decided okay let's let's do it

278
00:11:07,360 --> 00:11:10,480
step by step first of all what is our

279
00:11:10,480 --> 00:11:12,079
target

280
00:11:12,079 --> 00:11:13,120
in this

281
00:11:13,120 --> 00:11:16,000
subject our target is an sap system and

282
00:11:16,000 --> 00:11:18,079
behind the sap system behind all

283
00:11:18,079 --> 00:11:21,680
services we speak about the sap kernel

284
00:11:21,680 --> 00:11:24,079
the sap kernel is no more like a

285
00:11:24,079 --> 00:11:25,920
directory with

286
00:11:25,920 --> 00:11:29,360
more than 700 binary

287
00:11:29,360 --> 00:11:32,880
and the size of this scanner is like 800

288
00:11:32,880 --> 00:11:35,200
megabytes

289
00:11:35,200 --> 00:11:37,279
so this is how targets

290
00:11:37,279 --> 00:11:39,440
so when you read some articles like i

291
00:11:39,440 --> 00:11:42,000
just modified this library or they think

292
00:11:42,000 --> 00:11:44,959
it is it very probably did not work on

293
00:11:44,959 --> 00:11:46,800
sap target

294
00:11:46,800 --> 00:11:49,120
so just imagine this is very complicated

295
00:11:49,120 --> 00:11:52,240
environment and if you modify one thing

296
00:11:52,240 --> 00:11:54,880
you can broad everything without

297
00:11:54,880 --> 00:11:58,000
the the intention to do it so the very

298
00:11:58,000 --> 00:12:00,880
classical ifl first binary followed by

299
00:12:00,880 --> 00:12:03,600
argument one two this is not an option

300
00:12:03,600 --> 00:12:06,160
in our case

301
00:12:06,160 --> 00:12:09,200
all right now this is how target also we

302
00:12:09,200 --> 00:12:11,760
have any size problem you will you want

303
00:12:11,760 --> 00:12:13,279
to solve so

304
00:12:13,279 --> 00:12:15,839
what we need exactly first of all

305
00:12:15,839 --> 00:12:17,920
thank you captain abuse we would like to

306
00:12:17,920 --> 00:12:20,480
further with the capability to work

307
00:12:20,480 --> 00:12:22,480
over the network

308
00:12:22,480 --> 00:12:24,240
it could be remotely it could be locally

309
00:12:24,240 --> 00:12:26,959
but we will like to search for for

310
00:12:26,959 --> 00:12:29,279
something uh to it

311
00:12:29,279 --> 00:12:30,399
secondly

312
00:12:30,399 --> 00:12:33,680
we would like to avoid modify the target

313
00:12:33,680 --> 00:12:35,760
we would like to avoid modify the sap

314
00:12:35,760 --> 00:12:38,880
card itself because again it could be

315
00:12:38,880 --> 00:12:41,200
very complicating and also if you modify

316
00:12:41,200 --> 00:12:45,200
the kernel and you find a clash

317
00:12:45,200 --> 00:12:47,519
you you need to reproduce the clash

318
00:12:47,519 --> 00:12:50,880
against an unmodified kernel and it

319
00:12:50,880 --> 00:12:53,680
could be it could be complicated again

320
00:12:53,680 --> 00:12:57,680
and basically we don't like complexity

321
00:12:57,680 --> 00:13:00,160
and also we would like a further when we

322
00:13:00,160 --> 00:13:03,120
can solve any size issue so a further

323
00:13:03,120 --> 00:13:04,959
maybe you can modify maybe you can add

324
00:13:04,959 --> 00:13:06,720
some module to

325
00:13:06,720 --> 00:13:09,519
to explains an edge to modify something

326
00:13:09,519 --> 00:13:11,680
i want you to modify also the size so

327
00:13:11,680 --> 00:13:13,680
any size

328
00:13:13,680 --> 00:13:16,320
and we will we'll look for close to

329
00:13:16,320 --> 00:13:17,600
up-to-date

330
00:13:17,600 --> 00:13:18,959
tools because

331
00:13:18,959 --> 00:13:21,839
we would like again to avoid install

332
00:13:21,839 --> 00:13:23,920
legacy library or something like that

333
00:13:23,920 --> 00:13:28,000
and we will look for for something new

334
00:13:28,000 --> 00:13:30,800
of course we think about let's create

335
00:13:30,800 --> 00:13:33,040
our own further

336
00:13:33,040 --> 00:13:34,399
but

337
00:13:34,399 --> 00:13:36,639
remember this is

338
00:13:36,639 --> 00:13:38,320
when you when you look on the the

339
00:13:38,320 --> 00:13:39,920
freezing area what kind of further

340
00:13:39,920 --> 00:13:42,079
already exists there are a lot of tools

341
00:13:42,079 --> 00:13:44,880
and we would like to avoid again to add

342
00:13:44,880 --> 00:13:47,920
a tools plus plus because for for my

343
00:13:47,920 --> 00:13:49,839
point of view there are too many further

344
00:13:49,839 --> 00:13:53,199
too many tools too many things and

345
00:13:53,199 --> 00:13:55,360
first of all we would like to find maybe

346
00:13:55,360 --> 00:13:57,760
they are already a project

347
00:13:57,760 --> 00:14:01,439
who can match our needs

348
00:14:01,600 --> 00:14:03,680
maybe we we need to modify it or

349
00:14:03,680 --> 00:14:06,160
something but that's it

350
00:14:06,160 --> 00:14:10,240
uh so of course with test uh ifl first i

351
00:14:10,240 --> 00:14:11,920
felt first it's a very well known

352
00:14:11,920 --> 00:14:15,360
further we tested a lot we tried with

353
00:14:15,360 --> 00:14:17,920
the qmu mode you try it with a d socks

354
00:14:17,920 --> 00:14:21,279
okay we can we try it a lot and we never

355
00:14:21,279 --> 00:14:23,360
achieved to have very good wizard with

356
00:14:23,360 --> 00:14:24,959
ife first

357
00:14:24,959 --> 00:14:27,199
next we test either net this is a fork

358
00:14:27,199 --> 00:14:30,720
of ifl but for network and again we

359
00:14:30,720 --> 00:14:33,680
never achieved to have results

360
00:14:33,680 --> 00:14:34,959
and uh

361
00:14:34,959 --> 00:14:37,760
just the the time alien test we sent in

362
00:14:37,760 --> 00:14:40,320
the first part of the slide again the

363
00:14:40,320 --> 00:14:42,959
enqueue was done with ifn net and iphone

364
00:14:42,959 --> 00:14:46,000
let's find find nothing

365
00:14:46,000 --> 00:14:49,279
after that we test the ffw

366
00:14:49,279 --> 00:14:52,399
it's look promising but again we

367
00:14:52,399 --> 00:14:55,600
we are we do not find easy way to solve

368
00:14:55,600 --> 00:14:58,320
the any size problem again so the dumb

369
00:14:58,320 --> 00:15:00,639
further just first first and

370
00:15:00,639 --> 00:15:02,720
nothing will happen

371
00:15:02,720 --> 00:15:03,680
and

372
00:15:03,680 --> 00:15:06,480
after that we we test fusotron

373
00:15:06,480 --> 00:15:08,959
and physiotron match

374
00:15:08,959 --> 00:15:10,480
more or less

375
00:15:10,480 --> 00:15:13,839
uh fusotron was uh maintained by doing

376
00:15:13,839 --> 00:15:16,480
and through that one but very simple

377
00:15:16,480 --> 00:15:19,199
it's it's only uh the source code is

378
00:15:19,199 --> 00:15:20,079
like

379
00:15:20,079 --> 00:15:21,519
10 file

380
00:15:21,519 --> 00:15:24,399
it's very simple it's written in c and i

381
00:15:24,399 --> 00:15:25,199
know

382
00:15:25,199 --> 00:15:27,600
a little bit about c and uh

383
00:15:27,600 --> 00:15:30,320
it's it's uh you do not need to modify

384
00:15:30,320 --> 00:15:32,480
the target etc this is very very simple

385
00:15:32,480 --> 00:15:34,160
further like

386
00:15:34,160 --> 00:15:36,880
he you provide the test case he mutates

387
00:15:36,880 --> 00:15:39,279
the test case he send it to the service

388
00:15:39,279 --> 00:15:41,680
he monitors the service and that all

389
00:15:41,680 --> 00:15:44,399
so there are no post post exportation of

390
00:15:44,399 --> 00:15:46,320
poster analysis but

391
00:15:46,320 --> 00:15:48,880
for us it match and it much because very

392
00:15:48,880 --> 00:15:51,440
quickly we find crashes uh using this

393
00:15:51,440 --> 00:15:54,000
disorder so let's start to use

394
00:15:54,000 --> 00:15:56,720
physiotron in the in the in the in the

395
00:15:56,720 --> 00:15:59,120
future

396
00:15:59,360 --> 00:16:03,440
so how we solve the any size problem

397
00:16:03,440 --> 00:16:04,240
so

398
00:16:04,240 --> 00:16:05,360
uh

399
00:16:05,360 --> 00:16:07,279
remember the any size is the first four

400
00:16:07,279 --> 00:16:10,000
bytes of each packet and what we would

401
00:16:10,000 --> 00:16:11,519
like is

402
00:16:11,519 --> 00:16:14,240
to to be able to modify this size to

403
00:16:14,240 --> 00:16:15,120
match

404
00:16:15,120 --> 00:16:17,279
the real size of the content

405
00:16:17,279 --> 00:16:18,320
so

406
00:16:18,320 --> 00:16:20,560
instead of as a test case instead of

407
00:16:20,560 --> 00:16:22,320
provide a wall packet you provide the

408
00:16:22,320 --> 00:16:24,480
world packet minus

409
00:16:24,480 --> 00:16:26,240
this first four bytes

410
00:16:26,240 --> 00:16:28,560
so the the diffuser

411
00:16:28,560 --> 00:16:30,800
look at the the content

412
00:16:30,800 --> 00:16:33,839
then we craft we had code in the source

413
00:16:33,839 --> 00:16:37,279
code like hey i want to calculate the

414
00:16:37,279 --> 00:16:38,880
size and to put

415
00:16:38,880 --> 00:16:41,600
the the any size at the beginning

416
00:16:41,600 --> 00:16:42,959
so

417
00:16:42,959 --> 00:16:45,680
doing the research i did it with a very

418
00:16:45,680 --> 00:16:47,920
very ugly style so i just modified the

419
00:16:47,920 --> 00:16:50,560
source code directly and

420
00:16:50,560 --> 00:16:51,360
in

421
00:16:51,360 --> 00:16:53,120
in march

422
00:16:53,120 --> 00:16:54,560
do we had

423
00:16:54,560 --> 00:16:56,800
this feature by default now in freezer

424
00:16:56,800 --> 00:16:57,600
tron

425
00:16:57,600 --> 00:16:59,279
basically you need to update the

426
00:16:59,279 --> 00:17:01,720
function the function is called

427
00:17:01,720 --> 00:17:04,240
callbackpresent in callback.c by default

428
00:17:04,240 --> 00:17:05,919
this function is empty

429
00:17:05,919 --> 00:17:08,559
and you can uh put what do you want in

430
00:17:08,559 --> 00:17:11,280
in this uh in this uh function and the

431
00:17:11,280 --> 00:17:13,039
very interesting thing it's

432
00:17:13,039 --> 00:17:15,520
this this function is called

433
00:17:15,520 --> 00:17:17,280
uh after

434
00:17:17,280 --> 00:17:19,199
the socket is open

435
00:17:19,199 --> 00:17:21,520
after the mutation is done

436
00:17:21,520 --> 00:17:24,559
but before the test case is same so you

437
00:17:24,559 --> 00:17:25,439
can

438
00:17:25,439 --> 00:17:27,919
modify and do what you want to you what

439
00:17:27,919 --> 00:17:30,000
do you want in a in the test case just

440
00:17:30,000 --> 00:17:31,440
before send it

441
00:17:31,440 --> 00:17:34,160
so this is an example of the code uh to

442
00:17:34,160 --> 00:17:37,120
uh to solve any size issue so the

443
00:17:37,120 --> 00:17:39,360
function just just take the

444
00:17:39,360 --> 00:17:42,080
uh the socket and the test case the

445
00:17:42,080 --> 00:17:43,600
pointer to the test case so you have the

446
00:17:43,600 --> 00:17:46,320
length of this case etc i just calculate

447
00:17:46,320 --> 00:17:48,720
the any size so the size of the test

448
00:17:48,720 --> 00:17:51,440
case and i put the any size at the

449
00:17:51,440 --> 00:17:53,760
beginning and i

450
00:17:53,760 --> 00:17:55,840
merge everything

451
00:17:55,840 --> 00:17:57,840
override the test case and

452
00:17:57,840 --> 00:18:00,640
the packet is saying like that and we

453
00:18:00,640 --> 00:18:03,840
find three crashes very very quickly uh

454
00:18:03,840 --> 00:18:05,440
just by uh

455
00:18:05,440 --> 00:18:08,080
using this kind of uh of um

456
00:18:08,080 --> 00:18:09,840
of code

457
00:18:09,840 --> 00:18:10,640
so

458
00:18:10,640 --> 00:18:12,480
this is why we decide to to go with

459
00:18:12,480 --> 00:18:14,559
freezer tron because it looks like

460
00:18:14,559 --> 00:18:17,360
simple this look like very flexible and

461
00:18:17,360 --> 00:18:19,840
uh this is this is what we're looking

462
00:18:19,840 --> 00:18:20,880
for

463
00:18:20,880 --> 00:18:23,120
so of course everything is patched in

464
00:18:23,120 --> 00:18:26,479
the in this patch for this one

465
00:18:26,840 --> 00:18:29,840
now the the next step was something like

466
00:18:29,840 --> 00:18:33,280
okay now uh i would like to fuzz not

467
00:18:33,280 --> 00:18:35,600
the whole packet because sometimes the

468
00:18:35,600 --> 00:18:38,160
packet is huge i would like to to

469
00:18:38,160 --> 00:18:39,600
specify

470
00:18:39,600 --> 00:18:42,240
a part of the packet i want to fuzz so

471
00:18:42,240 --> 00:18:43,760
for this

472
00:18:43,760 --> 00:18:46,000
for this part i will take an example

473
00:18:46,000 --> 00:18:48,480
with the rgs so this is just an example

474
00:18:48,480 --> 00:18:50,160
of course we did it for whole other

475
00:18:50,160 --> 00:18:53,520
services subgetaway message server etc

476
00:18:53,520 --> 00:18:54,799
so

477
00:18:54,799 --> 00:18:58,559
this is a rgs packet

478
00:18:58,559 --> 00:19:01,280
it's look uh complicated but don't worry

479
00:19:01,280 --> 00:19:03,678
it's not

480
00:19:03,760 --> 00:19:05,840
because there are some parts

481
00:19:05,840 --> 00:19:08,559
you can guess very easy so you recognize

482
00:19:08,559 --> 00:19:11,039
in black on the top left this is the any

483
00:19:11,039 --> 00:19:13,760
size famous any size then i try to

484
00:19:13,760 --> 00:19:15,360
colorize a little

485
00:19:15,360 --> 00:19:17,280
all the parts so there are some headers

486
00:19:17,280 --> 00:19:19,600
there are some table on the top right in

487
00:19:19,600 --> 00:19:23,039
green it looks like xml and in pic in

488
00:19:23,039 --> 00:19:25,600
pink sorry this is um

489
00:19:25,600 --> 00:19:28,160
this is an image this will be

490
00:19:28,160 --> 00:19:29,840
a bsp in this case

491
00:19:29,840 --> 00:19:31,440
so this packet

492
00:19:31,440 --> 00:19:33,919
if you send this packet to the ijs aj

493
00:19:33,919 --> 00:19:35,600
try to convert

494
00:19:35,600 --> 00:19:38,559
the image you provide to a gif

495
00:19:38,559 --> 00:19:40,559
okay

496
00:19:40,559 --> 00:19:42,720
but in our case for example what we

497
00:19:42,720 --> 00:19:45,039
would like is okay we would like to only

498
00:19:45,039 --> 00:19:46,880
fuzz these parts

499
00:19:46,880 --> 00:19:48,799
not the wall packets

500
00:19:48,799 --> 00:19:51,520
we would like to further xml parts

501
00:19:51,520 --> 00:19:55,039
so it's possible because again you can

502
00:19:55,039 --> 00:19:56,080
use

503
00:19:56,080 --> 00:19:58,640
the the xml part as a test case this is

504
00:19:58,640 --> 00:20:00,960
what you provide to the fuzzer

505
00:20:00,960 --> 00:20:03,120
and you can calculate

506
00:20:03,120 --> 00:20:05,840
and hard code the rest of the packets

507
00:20:05,840 --> 00:20:08,000
directly in the source code

508
00:20:08,000 --> 00:20:09,360
of the freezer tron

509
00:20:09,360 --> 00:20:10,320
and

510
00:20:10,320 --> 00:20:11,520
it took

511
00:20:11,520 --> 00:20:14,400
it's not very complicated to do and also

512
00:20:14,400 --> 00:20:15,679
as you can see

513
00:20:15,679 --> 00:20:18,320
in the xml part they are the size at the

514
00:20:18,320 --> 00:20:19,679
beginning

515
00:20:19,679 --> 00:20:22,080
and if you want to first only the xml

516
00:20:22,080 --> 00:20:26,000
size the xml part you also want

517
00:20:26,000 --> 00:20:28,640
would like to

518
00:20:28,960 --> 00:20:30,000
modify

519
00:20:30,000 --> 00:20:33,200
this size to match the mutated size of

520
00:20:33,200 --> 00:20:34,559
the xml

521
00:20:34,559 --> 00:20:37,440
and trust me the mutation sometimes it's

522
00:20:37,440 --> 00:20:38,480
it's very

523
00:20:38,480 --> 00:20:41,440
very very big or very good

524
00:20:41,440 --> 00:20:43,120
so to sum up

525
00:20:43,120 --> 00:20:44,159
now

526
00:20:44,159 --> 00:20:46,960
we across the beginning of the packet

527
00:20:46,960 --> 00:20:49,200
the the hand of the packet

528
00:20:49,200 --> 00:20:50,159
we

529
00:20:50,159 --> 00:20:52,559
asked to first the xml part

530
00:20:52,559 --> 00:20:55,039
we calculate the size of the xml part we

531
00:20:55,039 --> 00:20:56,640
can create the any size of the wall

532
00:20:56,640 --> 00:20:59,679
packet we concatenate everything we send

533
00:20:59,679 --> 00:21:02,640
it to the to the to the to the service

534
00:21:02,640 --> 00:21:05,440
and just press the sun and we will see

535
00:21:05,440 --> 00:21:07,200
so this is a an example of the

536
00:21:07,200 --> 00:21:09,200
callback.c

537
00:21:09,200 --> 00:21:11,679
as you can see at the on the on the left

538
00:21:11,679 --> 00:21:14,159
so this is only the

539
00:21:14,159 --> 00:21:15,840
hard coded

540
00:21:15,840 --> 00:21:17,760
parts so this is the beginning of the

541
00:21:17,760 --> 00:21:20,720
packet and the end of the packet

542
00:21:20,720 --> 00:21:21,520
then

543
00:21:21,520 --> 00:21:24,400
you can calculate everything and you

544
00:21:24,400 --> 00:21:26,400
calculate the size of the xml the

545
00:21:26,400 --> 00:21:27,760
mutated

546
00:21:27,760 --> 00:21:31,280
xml you provide as test case

547
00:21:31,280 --> 00:21:33,120
concatenate everything

548
00:21:33,120 --> 00:21:36,000
put in as a new test case and the

549
00:21:36,000 --> 00:21:39,840
further send send this uh

550
00:21:39,840 --> 00:21:41,840
send this correlate

551
00:21:41,840 --> 00:21:44,480
packet to the to the services

552
00:21:44,480 --> 00:21:47,280
and of course you can do it for

553
00:21:47,280 --> 00:21:48,400
different

554
00:21:48,400 --> 00:21:50,799
parts in the packet for example you you

555
00:21:50,799 --> 00:21:53,919
can first only the image only the header

556
00:21:53,919 --> 00:21:58,320
etc and also we did it for whole other

557
00:21:58,320 --> 00:22:00,320
services

558
00:22:00,320 --> 00:22:04,240
and this time we find 11 more crashes

559
00:22:04,240 --> 00:22:07,120
using only this uh this technique to

560
00:22:07,120 --> 00:22:08,080
okay

561
00:22:08,080 --> 00:22:10,320
i want to first this part of this part

562
00:22:10,320 --> 00:22:13,440
so now the number of crashes 14

563
00:22:13,440 --> 00:22:15,440
it's it's beginning to be interesting

564
00:22:15,440 --> 00:22:18,799
because 14 variability in sap is not

565
00:22:18,799 --> 00:22:21,120
so uh so

566
00:22:21,120 --> 00:22:22,159
usual

567
00:22:22,159 --> 00:22:24,720
but uh let's continue of course

568
00:22:24,720 --> 00:22:26,559
everything needs uh patches in the in

569
00:22:26,559 --> 00:22:29,600
this partition album

570
00:22:29,840 --> 00:22:32,640
the next step now it's uh it's

571
00:22:32,640 --> 00:22:34,960
pretty obvious but we would like to

572
00:22:34,960 --> 00:22:36,480
explain it uh

573
00:22:36,480 --> 00:22:37,440
in the

574
00:22:37,440 --> 00:22:39,760
in the in the protocol of the the

575
00:22:39,760 --> 00:22:43,600
services sometimes you want to uh

576
00:22:43,600 --> 00:22:47,120
fuzz not the first packet you send but

577
00:22:47,120 --> 00:22:50,480
the second one or the other one just

578
00:22:50,480 --> 00:22:53,520
to to to to explain this part i will use

579
00:22:53,520 --> 00:22:55,440
the sub gateway

580
00:22:55,440 --> 00:22:57,679
so the sub get away

581
00:22:57,679 --> 00:22:59,440
very very simple something like that you

582
00:22:59,440 --> 00:23:01,679
send the first packet like and check hey

583
00:23:01,679 --> 00:23:03,360
hi hello

584
00:23:03,360 --> 00:23:06,240
the sap getaway always answers something

585
00:23:06,240 --> 00:23:08,000
like

586
00:23:08,000 --> 00:23:09,600
an check back

587
00:23:09,600 --> 00:23:12,080
then you provide a second package like

588
00:23:12,080 --> 00:23:14,080
what do you really want to do

589
00:23:14,080 --> 00:23:15,039
okay

590
00:23:15,039 --> 00:23:17,840
so the hello packet is look like that so

591
00:23:17,840 --> 00:23:20,480
it's a tiny packet not very complicated

592
00:23:20,480 --> 00:23:22,559
and we find nothing on it of course we

593
00:23:22,559 --> 00:23:24,640
try to to to

594
00:23:24,640 --> 00:23:27,840
to to fuzz it and we find nothing

595
00:23:27,840 --> 00:23:28,559
but

596
00:23:28,559 --> 00:23:30,320
the do something packets the next

597
00:23:30,320 --> 00:23:31,440
packets

598
00:23:31,440 --> 00:23:33,600
it's quite more interesting

599
00:23:33,600 --> 00:23:36,240
because it's a used packet complicated

600
00:23:36,240 --> 00:23:38,400
and we it looks like okay i can first

601
00:23:38,400 --> 00:23:41,600
this part maybe this part and etc

602
00:23:41,600 --> 00:23:42,799
so

603
00:23:42,799 --> 00:23:44,799
what is possible to do again

604
00:23:44,799 --> 00:23:46,640
because the

605
00:23:46,640 --> 00:23:48,960
the function callback.c in callback. is

606
00:23:48,960 --> 00:23:51,279
a function a callback present

607
00:23:51,279 --> 00:23:52,799
is uh

608
00:23:52,799 --> 00:23:55,760
it's called after the socket is open so

609
00:23:55,760 --> 00:23:57,360
you have the socket you have basically

610
00:23:57,360 --> 00:23:59,039
the the socket open and you can

611
00:23:59,039 --> 00:24:01,440
communicate with the services so this is

612
00:24:01,440 --> 00:24:03,279
what i do uh

613
00:24:03,279 --> 00:24:06,720
in the in the first part as i just send

614
00:24:06,720 --> 00:24:07,679
and check

615
00:24:07,679 --> 00:24:09,840
this is hard coded and check always the

616
00:24:09,840 --> 00:24:11,200
same

617
00:24:11,200 --> 00:24:13,360
i write it in the in the socket so i

618
00:24:13,360 --> 00:24:16,559
send it and i read the the the the

619
00:24:16,559 --> 00:24:19,200
packet sent by the by the services i

620
00:24:19,200 --> 00:24:21,200
don't care about it you can

621
00:24:21,200 --> 00:24:22,720
you can uh

622
00:24:22,720 --> 00:24:24,480
work with it but in this case i don't

623
00:24:24,480 --> 00:24:25,279
care

624
00:24:25,279 --> 00:24:27,360
and after that i send the second packet

625
00:24:27,360 --> 00:24:29,120
and the second packet is what i want to

626
00:24:29,120 --> 00:24:30,960
fuzz

627
00:24:30,960 --> 00:24:33,440
so like that it's what we call a setup

628
00:24:33,440 --> 00:24:36,559
conversation like okay i can

629
00:24:36,559 --> 00:24:38,480
set up my conversation with the services

630
00:24:38,480 --> 00:24:39,760
to reach

631
00:24:39,760 --> 00:24:43,440
a dedicated packet i want to fuzz

632
00:24:43,520 --> 00:24:46,240
so we find two new crashes like that and

633
00:24:46,240 --> 00:24:49,440
new one in the sap gateway so this is uh

634
00:24:49,440 --> 00:24:50,880
uh

635
00:24:50,880 --> 00:24:52,960
the the sap getaway it's a very very

636
00:24:52,960 --> 00:24:56,480
robust services uh on sap trust me

637
00:24:56,480 --> 00:24:59,360
and one on the dispatcher

638
00:24:59,360 --> 00:25:04,159
and uh this is the the the patches

639
00:25:04,159 --> 00:25:08,400
um the next one it's uh

640
00:25:08,640 --> 00:25:11,120
we are we encounter

641
00:25:11,120 --> 00:25:13,120
a big problem it was what we call a

642
00:25:13,120 --> 00:25:15,840
collateral crashes

643
00:25:15,840 --> 00:25:17,679
let me show you

644
00:25:17,679 --> 00:25:20,720
this is uh the process list of whole uh

645
00:25:20,720 --> 00:25:23,760
not whole but a part of the sap process

646
00:25:23,760 --> 00:25:26,480
so if you go to the sap system you list

647
00:25:26,480 --> 00:25:28,799
the process and this is a tree you can

648
00:25:28,799 --> 00:25:31,520
have this is not very complicated for

649
00:25:31,520 --> 00:25:34,400
example in green this is uh n2 services

650
00:25:34,400 --> 00:25:38,240
so you organize a en dot sap blah blah

651
00:25:38,240 --> 00:25:39,520
this is the

652
00:25:39,520 --> 00:25:41,840
enqueue process who handles the n2

653
00:25:41,840 --> 00:25:43,039
services

654
00:25:43,039 --> 00:25:44,640
and there are several processes like

655
00:25:44,640 --> 00:25:46,799
that the massage server

656
00:25:46,799 --> 00:25:48,400
the the the

657
00:25:48,400 --> 00:25:51,200
also the sap gateway page

658
00:25:51,200 --> 00:25:53,840
etc etc so the icm in blue

659
00:25:53,840 --> 00:25:58,240
and igs in a in orange so all right

660
00:25:58,240 --> 00:26:00,320
one two one uh

661
00:26:00,320 --> 00:26:01,520
another one interesting it's the

662
00:26:01,520 --> 00:26:03,279
dispatcher so

663
00:26:03,279 --> 00:26:04,400
in red

664
00:26:04,400 --> 00:26:07,840
uh the process above 00 dp like

665
00:26:07,840 --> 00:26:10,720
dispatcher is the process to handle the

666
00:26:10,720 --> 00:26:12,880
dispatcher services

667
00:26:12,880 --> 00:26:15,120
and as you can see the dispatcher is no

668
00:26:15,120 --> 00:26:17,919
more like he receive the

669
00:26:17,919 --> 00:26:21,440
user request and the dispatcher dispatch

670
00:26:21,440 --> 00:26:23,039
the request to

671
00:26:23,039 --> 00:26:25,440
the work process so the work process is

672
00:26:25,440 --> 00:26:28,320
it's no more than a child process of the

673
00:26:28,320 --> 00:26:29,919
dispatcher

674
00:26:29,919 --> 00:26:32,240
all right

675
00:26:32,240 --> 00:26:34,960
something very uh very common in a in in

676
00:26:34,960 --> 00:26:39,679
a very in big system like like sap

677
00:26:39,679 --> 00:26:40,480
so

678
00:26:40,480 --> 00:26:43,039
what's happened one time we decide to

679
00:26:43,039 --> 00:26:45,360
first the dispatcher so we monitor the

680
00:26:45,360 --> 00:26:48,240
pid of the dispatcher and we send

681
00:26:48,240 --> 00:26:49,279
we

682
00:26:49,279 --> 00:26:51,360
we send the further we configure the

683
00:26:51,360 --> 00:26:52,880
further to send

684
00:26:52,880 --> 00:26:55,279
everything to the dispatcher services

685
00:26:55,279 --> 00:26:56,080
and

686
00:26:56,080 --> 00:26:57,279
what we

687
00:26:57,279 --> 00:26:58,720
uh

688
00:26:58,720 --> 00:27:01,520
what we what we got is some time one

689
00:27:01,520 --> 00:27:04,799
work process we start

690
00:27:04,799 --> 00:27:06,480
when you first something it's something

691
00:27:06,480 --> 00:27:08,240
crash or something we start very very

692
00:27:08,240 --> 00:27:09,520
probably

693
00:27:09,520 --> 00:27:11,600
it's because of of us

694
00:27:11,600 --> 00:27:14,559
but you can imagine okay the

695
00:27:14,559 --> 00:27:16,559
the work process we start

696
00:27:16,559 --> 00:27:19,600
so we look on the uh in the log file

697
00:27:19,600 --> 00:27:22,640
so each work process has this own log

698
00:27:22,640 --> 00:27:23,600
file

699
00:27:23,600 --> 00:27:25,039
and

700
00:27:25,039 --> 00:27:28,000
when we we look on the log file

701
00:27:28,000 --> 00:27:31,279
we can see a crash so yes the the work

702
00:27:31,279 --> 00:27:33,600
process crash and very probably it's

703
00:27:33,600 --> 00:27:35,039
because of us

704
00:27:35,039 --> 00:27:35,919
but

705
00:27:35,919 --> 00:27:39,520
because the dispatcher the main process

706
00:27:39,520 --> 00:27:41,200
is still up

707
00:27:41,200 --> 00:27:44,399
the further never stop and if the

708
00:27:44,399 --> 00:27:46,080
further never stops the further never

709
00:27:46,080 --> 00:27:47,760
back up the last

710
00:27:47,760 --> 00:27:50,640
packet is 10 so what we call the guilty

711
00:27:50,640 --> 00:27:52,399
packet the quality packet it's a

712
00:27:52,399 --> 00:27:55,279
multi-use package you will

713
00:27:55,279 --> 00:27:56,799
send to crash

714
00:27:56,799 --> 00:27:58,000
it's lost

715
00:27:58,000 --> 00:28:00,080
so the package you would like to to

716
00:28:00,080 --> 00:28:03,840
extract is completely lost

717
00:28:04,000 --> 00:28:05,760
and of course

718
00:28:05,760 --> 00:28:08,080
the work process crash randomly

719
00:28:08,080 --> 00:28:10,480
sometimes it's a zero sometimes the six

720
00:28:10,480 --> 00:28:13,520
etc and whole work process has this

721
00:28:13,520 --> 00:28:15,360
whole log file

722
00:28:15,360 --> 00:28:18,240
so we need to figure out how to

723
00:28:18,240 --> 00:28:20,159
how it's possible to do it to work with

724
00:28:20,159 --> 00:28:21,520
this log file

725
00:28:21,520 --> 00:28:23,760
and not to work with the pid of the

726
00:28:23,760 --> 00:28:25,919
dispatcher

727
00:28:25,919 --> 00:28:29,039
so what we did it's uh okay let's craft

728
00:28:29,039 --> 00:28:31,360
a script to uh

729
00:28:31,360 --> 00:28:33,840
to concatenate all the transfile

730
00:28:33,840 --> 00:28:35,720
then instead of looking for the

731
00:28:35,720 --> 00:28:37,600
pid.dispatcher we're looking for the

732
00:28:37,600 --> 00:28:39,679
pattern c stack this is a pattern we

733
00:28:39,679 --> 00:28:42,399
look for in the truss file and we

734
00:28:42,399 --> 00:28:44,159
launched everything again and we

735
00:28:44,159 --> 00:28:45,679
completely failed

736
00:28:45,679 --> 00:28:48,000
why we failed it's because

737
00:28:48,000 --> 00:28:50,000
the further stop

738
00:28:50,000 --> 00:28:51,279
good

739
00:28:51,279 --> 00:28:54,240
the something crashes but we never able

740
00:28:54,240 --> 00:28:58,880
to reproduce the crash with what we

741
00:28:58,880 --> 00:29:01,760
with what the further backup

742
00:29:01,760 --> 00:29:04,159
let me explain you so this is a part of

743
00:29:04,159 --> 00:29:07,360
the of the physiotron uh source

744
00:29:07,360 --> 00:29:09,039
to be very simple

745
00:29:09,039 --> 00:29:11,360
uh the physiotron

746
00:29:11,360 --> 00:29:14,000
generate 100 test case

747
00:29:14,000 --> 00:29:16,559
send this 100 test case

748
00:29:16,559 --> 00:29:20,399
check if the the the pattern

749
00:29:20,399 --> 00:29:22,960
is in the in the log file

750
00:29:22,960 --> 00:29:23,840
if

751
00:29:23,840 --> 00:29:25,600
the pattern is not present in the log

752
00:29:25,600 --> 00:29:27,840
file it just removes this test case and

753
00:29:27,840 --> 00:29:32,080
generates a new 100 test case like that

754
00:29:32,080 --> 00:29:34,720
and what we understand is

755
00:29:34,720 --> 00:29:36,159
how

756
00:29:36,159 --> 00:29:38,720
crash say question

757
00:29:38,720 --> 00:29:40,480
is something like the freezer send the

758
00:29:40,480 --> 00:29:43,200
packet the dispatcher handles the packet

759
00:29:43,200 --> 00:29:45,600
forward the packet to the one word

760
00:29:45,600 --> 00:29:48,320
process the work process

761
00:29:48,320 --> 00:29:51,600
under the request crash

762
00:29:51,600 --> 00:29:53,919
write this crash information in the log

763
00:29:53,919 --> 00:29:56,159
file restarts then the log file is

764
00:29:56,159 --> 00:29:59,520
concatenated in one big log file and

765
00:29:59,520 --> 00:30:01,279
then the further

766
00:30:01,279 --> 00:30:02,320
uh

767
00:30:02,320 --> 00:30:04,799
find the pattern and during this time

768
00:30:04,799 --> 00:30:07,840
more than one thousand packet was sent

769
00:30:07,840 --> 00:30:09,120
it means

770
00:30:09,120 --> 00:30:10,640
the further

771
00:30:10,640 --> 00:30:14,720
gets the clash's information too late

772
00:30:14,720 --> 00:30:17,840
so very clever and smart move

773
00:30:17,840 --> 00:30:19,679
we just changed

774
00:30:19,679 --> 00:30:22,080
the number of packets generated and

775
00:30:22,080 --> 00:30:26,240
instead of 100 you we we put like 5 000

776
00:30:26,240 --> 00:30:27,760
10 000.

777
00:30:27,760 --> 00:30:29,279
if you do that

778
00:30:29,279 --> 00:30:32,480
you will lost a lot of performances

779
00:30:32,480 --> 00:30:35,360
but we did it because

780
00:30:35,360 --> 00:30:38,080
we observe that the the first crash

781
00:30:38,080 --> 00:30:40,000
appear like

782
00:30:40,000 --> 00:30:42,720
less that five minutes after running the

783
00:30:42,720 --> 00:30:46,240
further so even if you lost like

784
00:30:46,240 --> 00:30:48,000
instead of five minutes you lost time

785
00:30:48,000 --> 00:30:51,279
like 20 minutes or 30 minutes it's not a

786
00:30:51,279 --> 00:30:53,279
very big issue

787
00:30:53,279 --> 00:30:56,399
so we find three new clashes

788
00:30:56,399 --> 00:30:59,439
using this technique

789
00:31:01,519 --> 00:31:03,679
and the last one i would like to share

790
00:31:03,679 --> 00:31:05,039
it's uh

791
00:31:05,039 --> 00:31:07,039
the last one we find

792
00:31:07,039 --> 00:31:09,360
uh it was in the

793
00:31:09,360 --> 00:31:12,000
icm so the icm it's a web server hosted

794
00:31:12,000 --> 00:31:14,399
by uh by sap

795
00:31:14,399 --> 00:31:15,440
and

796
00:31:15,440 --> 00:31:18,480
what we understand is some time the icm

797
00:31:18,480 --> 00:31:21,039
use this whole

798
00:31:21,039 --> 00:31:22,640
child process

799
00:31:22,640 --> 00:31:25,760
and also sometimes this child process

800
00:31:25,760 --> 00:31:28,320
can communicate

801
00:31:28,320 --> 00:31:31,200
to a work process again

802
00:31:31,200 --> 00:31:34,960
so now we understand that okay if we

803
00:31:34,960 --> 00:31:37,919
further icm services we also

804
00:31:37,919 --> 00:31:40,240
must

805
00:31:40,240 --> 00:31:41,440
monitor

806
00:31:41,440 --> 00:31:44,840
uh the whole the trust file of the work

807
00:31:44,840 --> 00:31:47,200
process so

808
00:31:47,200 --> 00:31:49,360
this is an example of the very classical

809
00:31:49,360 --> 00:31:52,480
http request you can send to to sap

810
00:31:52,480 --> 00:31:54,720
and

811
00:31:55,039 --> 00:31:56,320
in the

812
00:31:56,320 --> 00:31:59,200
we make different testing and eventually

813
00:31:59,200 --> 00:32:01,200
we test the cookie so this is a cookie

814
00:32:01,200 --> 00:32:03,600
session the name is my s

815
00:32:03,600 --> 00:32:07,519
my sap sso2 so this is a cookie session

816
00:32:07,519 --> 00:32:09,679
and this is the content an example of

817
00:32:09,679 --> 00:32:10,799
the content

818
00:32:10,799 --> 00:32:12,640
of the cookie session

819
00:32:12,640 --> 00:32:15,760
so this cookie station it's uh it's

820
00:32:15,760 --> 00:32:18,399
encoded in base64 then it's a url

821
00:32:18,399 --> 00:32:19,760
escaping

822
00:32:19,760 --> 00:32:21,919
then it's put in the in the cookie

823
00:32:21,919 --> 00:32:24,000
header of course

824
00:32:24,000 --> 00:32:25,840
so to sum up

825
00:32:25,840 --> 00:32:29,200
how it's possible to fuzz this part and

826
00:32:29,200 --> 00:32:32,960
to get the the the

827
00:32:32,960 --> 00:32:35,120
the the correct monitor and to retrieve

828
00:32:35,120 --> 00:32:37,440
the the guilty packet

829
00:32:37,440 --> 00:32:39,440
so what we need to do is to

830
00:32:39,440 --> 00:32:42,799
check the collateral crash so to check

831
00:32:42,799 --> 00:32:44,559
hold the file

832
00:32:44,559 --> 00:32:45,360
and

833
00:32:45,360 --> 00:32:46,559
to uh

834
00:32:46,559 --> 00:32:49,600
escape the the the test case we provide

835
00:32:49,600 --> 00:32:51,279
because basically we provide as a test

836
00:32:51,279 --> 00:32:52,559
case we provide

837
00:32:52,559 --> 00:32:53,360
uh

838
00:32:53,360 --> 00:32:55,360
the binary content of the of the cookie

839
00:32:55,360 --> 00:32:58,480
not the x64 so we need to craft

840
00:32:58,480 --> 00:32:59,519
everything

841
00:32:59,519 --> 00:33:02,000
in uh in the callback.c

842
00:33:02,000 --> 00:33:04,320
so it's it's look like that so the first

843
00:33:04,320 --> 00:33:06,320
part is just to uh

844
00:33:06,320 --> 00:33:08,559
encode it back 64. the second part we

845
00:33:08,559 --> 00:33:12,080
url encode and the last part is to craft

846
00:33:12,080 --> 00:33:15,039
the http packet so hard coded

847
00:33:15,039 --> 00:33:17,760
the post request hold the header and

848
00:33:17,760 --> 00:33:20,480
put our test case as the content of the

849
00:33:20,480 --> 00:33:22,159
cookie and

850
00:33:22,159 --> 00:33:24,559
send the request like that

851
00:33:24,559 --> 00:33:27,039
and we found a last crash

852
00:33:27,039 --> 00:33:28,960
and the interesting part we found the

853
00:33:28,960 --> 00:33:33,039
crash uh in the sap common cryptolib so

854
00:33:33,039 --> 00:33:35,440
this library it's a

855
00:33:35,440 --> 00:33:37,200
the sap

856
00:33:37,200 --> 00:33:40,640
security crypto and everything so

857
00:33:40,640 --> 00:33:43,840
it was it was interesting

858
00:33:45,279 --> 00:33:46,880
all right

859
00:33:46,880 --> 00:33:47,679
uh

860
00:33:47,679 --> 00:33:49,519
i have a couple of demo

861
00:33:49,519 --> 00:33:51,760
i'll try

862
00:33:51,760 --> 00:33:52,399
so

863
00:33:52,399 --> 00:33:54,720
as i say everything is not

864
00:33:54,720 --> 00:33:56,960
automatized uh with result you need to

865
00:33:56,960 --> 00:33:59,039
script something so this is

866
00:33:59,039 --> 00:34:00,880
very very uh

867
00:34:00,880 --> 00:34:04,320
simple what what kind of script we we we

868
00:34:04,320 --> 00:34:07,279
did it's just like start the freezer

869
00:34:07,279 --> 00:34:09,918
when it running crash start again but

870
00:34:09,918 --> 00:34:10,800
with

871
00:34:10,800 --> 00:34:12,639
the last packet

872
00:34:12,639 --> 00:34:15,599
generated when it crash again start

873
00:34:15,599 --> 00:34:19,040
again but this time use attach the gdb

874
00:34:19,040 --> 00:34:22,159
to the services to try to find out the

875
00:34:22,159 --> 00:34:23,760
the crash detail

876
00:34:23,760 --> 00:34:25,918
so this is no more complicated like that

877
00:34:25,918 --> 00:34:27,839
and uh and that's it

878
00:34:27,839 --> 00:34:30,000
so

879
00:34:32,079 --> 00:34:34,399
yeah it's not perfect but

880
00:34:34,399 --> 00:34:36,159
sorry

881
00:34:36,159 --> 00:34:37,839
so on the top

882
00:34:37,839 --> 00:34:40,320
left on the top the bottom left this is

883
00:34:40,320 --> 00:34:42,560
the freezer running in the loop

884
00:34:42,560 --> 00:34:44,960
on the on the right this is no more than

885
00:34:44,960 --> 00:34:46,480
a process list

886
00:34:46,480 --> 00:34:48,879
grabbed by gdb because i have some issue

887
00:34:48,879 --> 00:34:50,879
to gdb sometime

888
00:34:50,879 --> 00:34:53,839
not stop and something like that and on

889
00:34:53,839 --> 00:34:57,119
the top this is a list of crashes the

890
00:34:57,119 --> 00:35:00,720
history of of crashes i get so

891
00:35:00,720 --> 00:35:04,320
basically i send this uh this script

892
00:35:04,320 --> 00:35:06,000
at night and when i go back on the

893
00:35:06,000 --> 00:35:08,720
morning i just take a take a look on all

894
00:35:08,720 --> 00:35:11,119
history i get

895
00:35:11,119 --> 00:35:13,760
so as you can see it's it's running on

896
00:35:13,760 --> 00:35:16,320
the on the button and very quickly after

897
00:35:16,320 --> 00:35:19,440
a few seconds a clash appear so we

898
00:35:19,440 --> 00:35:21,040
restart the services

899
00:35:21,040 --> 00:35:22,079
this time

900
00:35:22,079 --> 00:35:24,880
we try to replay

901
00:35:24,880 --> 00:35:27,359
the last packet but with some delay to

902
00:35:27,359 --> 00:35:30,960
be sure to have the the good packet

903
00:35:30,960 --> 00:35:32,560
it's crash again

904
00:35:32,560 --> 00:35:35,599
so now we will take the last packet

905
00:35:35,599 --> 00:35:38,800
and we restart the services with gdb

906
00:35:38,800 --> 00:35:40,000
and

907
00:35:40,000 --> 00:35:42,640
again send the freezer but we not say

908
00:35:42,640 --> 00:35:44,480
the future but we just understand this

909
00:35:44,480 --> 00:35:45,440
packet

910
00:35:45,440 --> 00:35:47,359
the clash up here

911
00:35:47,359 --> 00:35:50,400
and we get every information and a new

912
00:35:50,400 --> 00:35:52,720
line a new crash history happy so like

913
00:35:52,720 --> 00:35:53,920
that you have

914
00:35:53,920 --> 00:35:54,800
whole

915
00:35:54,800 --> 00:35:58,200
holder crashes

916
00:35:59,359 --> 00:36:00,160
and

917
00:36:00,160 --> 00:36:03,520
also the second demo it's just a

918
00:36:03,520 --> 00:36:06,320
very very simple example what you can do

919
00:36:06,320 --> 00:36:08,240
with it so on the

920
00:36:08,240 --> 00:36:09,040
right

921
00:36:09,040 --> 00:36:11,119
left side for you on the left this is

922
00:36:11,119 --> 00:36:13,599
attacker point of view and on the right

923
00:36:13,599 --> 00:36:15,359
this is the sap

924
00:36:15,359 --> 00:36:17,680
process list so you can see this is

925
00:36:17,680 --> 00:36:19,680
whole sap process list so

926
00:36:19,680 --> 00:36:22,240
the gateway the dispatcher

927
00:36:22,240 --> 00:36:23,760
etc

928
00:36:23,760 --> 00:36:26,960
and what is possible to do it to to send

929
00:36:26,960 --> 00:36:29,280
this packet this is only one packet

930
00:36:29,280 --> 00:36:32,000
remotely without any authentication you

931
00:36:32,000 --> 00:36:34,160
send one packet on each services and you

932
00:36:34,160 --> 00:36:37,280
can crash uh everything

933
00:36:37,280 --> 00:36:39,520
and so just

934
00:36:39,520 --> 00:36:42,480
make a very simple python script you

935
00:36:42,480 --> 00:36:44,720
provide the target you send it and on

936
00:36:44,720 --> 00:36:48,240
the right you can see the the

937
00:36:48,240 --> 00:36:50,480
the process disappear because everything

938
00:36:50,480 --> 00:36:53,480
crashed

939
00:36:54,800 --> 00:36:56,960
and

940
00:36:56,960 --> 00:36:58,720
trust me it's not very easy to restart

941
00:36:58,720 --> 00:37:02,240
an sap system after that

942
00:37:03,119 --> 00:37:05,520
all right

943
00:37:06,839 --> 00:37:08,720
so

944
00:37:08,720 --> 00:37:10,960
as a conclusion

945
00:37:10,960 --> 00:37:13,119
i put all the

946
00:37:13,119 --> 00:37:16,000
components involved in the vulnerability

947
00:37:16,000 --> 00:37:17,599
we find

948
00:37:17,599 --> 00:37:19,280
as you can see there are a lot of

949
00:37:19,280 --> 00:37:21,520
components so if you run one of this

950
00:37:21,520 --> 00:37:22,960
component

951
00:37:22,960 --> 00:37:25,520
uh please update it and the interesting

952
00:37:25,520 --> 00:37:28,079
thing is uh uh

953
00:37:28,079 --> 00:37:30,240
yeah but basically uh

954
00:37:30,240 --> 00:37:32,160
the the

955
00:37:32,160 --> 00:37:34,240
the the impact component is hold the

956
00:37:34,240 --> 00:37:35,680
kernel

957
00:37:35,680 --> 00:37:39,040
hold the kernel on every system units

958
00:37:39,040 --> 00:37:41,119
windows everything

959
00:37:41,119 --> 00:37:43,680
32x64

960
00:37:43,680 --> 00:37:46,880
hold the kernel is impacted

961
00:37:46,880 --> 00:37:48,480
everything is patched

962
00:37:48,480 --> 00:37:50,160
in the

963
00:37:50,160 --> 00:37:53,119
in last since last year i guess so the

964
00:37:53,119 --> 00:37:56,480
sap creates bundle patch so in one patch

965
00:37:56,480 --> 00:37:58,960
in one patch you have several cv

966
00:37:58,960 --> 00:38:02,160
civil availability uh collected and they

967
00:38:02,160 --> 00:38:05,760
they create one patch by services

968
00:38:05,760 --> 00:38:08,560
uh this is just the timing uh very

969
00:38:08,560 --> 00:38:11,280
time table of the of the of the research

970
00:38:11,280 --> 00:38:14,079
so we start in july again we start from

971
00:38:14,079 --> 00:38:16,640
zero i did not know nothing about

972
00:38:16,640 --> 00:38:19,040
fuzzing and frozen area so it was

973
00:38:19,040 --> 00:38:21,760
the the the step was was not easy at the

974
00:38:21,760 --> 00:38:22,800
beginning

975
00:38:22,800 --> 00:38:25,599
and yeah we we we found crash for two

976
00:38:25,599 --> 00:38:28,560
months then we decided to stop and i i

977
00:38:28,560 --> 00:38:29,680
work on it

978
00:38:29,680 --> 00:38:31,440
like quite a lot of time for a few

979
00:38:31,440 --> 00:38:34,000
months again to study all the crashes to

980
00:38:34,000 --> 00:38:36,560
try to figure out if it's easy to

981
00:38:36,560 --> 00:38:38,480
exportable or not and i thought to

982
00:38:38,480 --> 00:38:43,119
provide a very detailed report to sap

983
00:38:43,119 --> 00:38:46,320
so i put the reference so the physiotron

984
00:38:46,320 --> 00:38:49,200
very uh very cool feather

985
00:38:49,200 --> 00:38:52,079
and also i put the in how github if you

986
00:38:52,079 --> 00:38:54,880
are interesting by whole uh we we put

987
00:38:54,880 --> 00:38:58,400
the advisory of whole crashes we find so

988
00:38:58,400 --> 00:39:00,800
if you are interested to to to have more

989
00:39:00,800 --> 00:39:03,520
detail on each passage you can go to the

990
00:39:03,520 --> 00:39:05,040
to how github

991
00:39:05,040 --> 00:39:08,320
i saw the sap url and the sap response

992
00:39:08,320 --> 00:39:10,800
team again

993
00:39:12,000 --> 00:39:15,359
that's pretty much it

994
00:39:15,359 --> 00:39:17,680
i for for my point of view

995
00:39:17,680 --> 00:39:21,680
this is an example to first a

996
00:39:21,839 --> 00:39:24,400
black box or custom protocol

997
00:39:24,400 --> 00:39:27,920
i use sap as an example but i hope some

998
00:39:27,920 --> 00:39:30,560
of you can get it and hey maybe i can do

999
00:39:30,560 --> 00:39:31,599
something

1000
00:39:31,599 --> 00:39:34,400
on different target not sap related but

1001
00:39:34,400 --> 00:39:35,760
i can do a

1002
00:39:35,760 --> 00:39:38,880
use this kind of idea to to perform some

1003
00:39:38,880 --> 00:39:39,599
uh

1004
00:39:39,599 --> 00:39:42,560
some other further on other network so

1005
00:39:42,560 --> 00:39:45,119
that's it and of course i haven't

1006
00:39:45,119 --> 00:39:47,520
explained all the little

1007
00:39:47,520 --> 00:39:51,520
uh little problem we get i just keep the

1008
00:39:51,520 --> 00:39:54,000
what we think it was the most important

1009
00:39:54,000 --> 00:39:56,480
so thank you thank you to doi for freeze

1010
00:39:56,480 --> 00:39:59,280
entrance thank you to sap and sap

1011
00:39:59,280 --> 00:40:00,400
security team we have a good

1012
00:40:00,400 --> 00:40:02,640
relationship when you send

1013
00:40:02,640 --> 00:40:05,200
20 vulnerability in one time this is not

1014
00:40:05,200 --> 00:40:08,560
it's not usual and uh so thank you to

1015
00:40:08,560 --> 00:40:11,200
invite me

1016
00:40:11,200 --> 00:40:12,640
thank you ivan

1017
00:40:12,640 --> 00:40:14,960
uh i looked a little bit online saw no

1018
00:40:14,960 --> 00:40:17,040
questions there uh are there any

1019
00:40:17,040 --> 00:40:20,880
questions from the room anybody

1020
00:40:20,880 --> 00:40:22,880
so yeah i i of course do have some

1021
00:40:22,880 --> 00:40:25,760
questions here um so we had so many bugs

1022
00:40:25,760 --> 00:40:28,720
did you also try to uh

1023
00:40:28,720 --> 00:40:30,480
see if you could get some

1024
00:40:30,480 --> 00:40:32,720
remote coat execution out of that that's

1025
00:40:32,720 --> 00:40:34,800
of course interesting

1026
00:40:34,800 --> 00:40:37,680
uh of course of course we tried to study

1027
00:40:37,680 --> 00:40:40,000
each bug and to find out if it's

1028
00:40:40,000 --> 00:40:41,839
possible to

1029
00:40:41,839 --> 00:40:42,640
to

1030
00:40:42,640 --> 00:40:43,440
to

1031
00:40:43,440 --> 00:40:46,000
to exploit them to to have some remote

1032
00:40:46,000 --> 00:40:47,359
code execution or something like that

1033
00:40:47,359 --> 00:40:49,760
but you can imagine you are remote

1034
00:40:49,760 --> 00:40:53,520
and completely blind and uh i thought

1035
00:40:53,520 --> 00:40:56,000
the architecture and the version

1036
00:40:56,000 --> 00:40:57,599
can change a lot

1037
00:40:57,599 --> 00:40:58,640
and

1038
00:40:58,640 --> 00:40:59,760
we

1039
00:40:59,760 --> 00:41:02,560
we decide to not spend too much time on

1040
00:41:02,560 --> 00:41:04,480
it so we try it

1041
00:41:04,480 --> 00:41:05,599
we are not

1042
00:41:05,599 --> 00:41:08,079
the best of the world to try to export

1043
00:41:08,079 --> 00:41:11,200
uh this kind of validity maybe but

1044
00:41:11,200 --> 00:41:14,480
after a few few tests we we decide to

1045
00:41:14,480 --> 00:41:15,839
to not

1046
00:41:15,839 --> 00:41:18,000
take too much time on it

1047
00:41:18,000 --> 00:41:19,680
and and do you maybe have some more

1048
00:41:19,680 --> 00:41:21,760
information on what type of bugs these

1049
00:41:21,760 --> 00:41:24,319
were were that uh memory corruption bugs

1050
00:41:24,319 --> 00:41:27,040
were those uh command line injections or

1051
00:41:27,040 --> 00:41:30,160
what type of bugs uh were causing these

1052
00:41:30,160 --> 00:41:32,000
crashes

1053
00:41:32,000 --> 00:41:33,359
uh

1054
00:41:33,359 --> 00:41:35,520
all the crap there are a lot of

1055
00:41:35,520 --> 00:41:37,599
different uh

1056
00:41:37,599 --> 00:41:40,800
uh bug uh

1057
00:41:40,800 --> 00:41:42,240
uh

1058
00:41:42,240 --> 00:41:44,640
it's it's sometimes very complicated not

1059
00:41:44,640 --> 00:41:47,760
very complicated but it's real uh but

1060
00:41:47,760 --> 00:41:49,760
many times it's a new point of their

1061
00:41:49,760 --> 00:41:52,480
reference or sometimes also they are

1062
00:41:52,480 --> 00:41:54,079
they use

1063
00:41:54,079 --> 00:41:56,160
hard-coded

1064
00:41:56,160 --> 00:41:58,240
offset in the packet to calculate

1065
00:41:58,240 --> 00:42:00,880
something so if you change it

1066
00:42:00,880 --> 00:42:02,400
it calculates the wrong

1067
00:42:02,400 --> 00:42:04,560
place and try to allow

1068
00:42:04,560 --> 00:42:06,400
the wrong size of memory and stuff like

1069
00:42:06,400 --> 00:42:08,560
that but we we put

1070
00:42:08,560 --> 00:42:11,040
the detail in the in the in our github

1071
00:42:11,040 --> 00:42:13,280
in whole crashes we try to put the

1072
00:42:13,280 --> 00:42:15,680
detail of what kind of function crash

1073
00:42:15,680 --> 00:42:17,359
why etc

1074
00:42:17,359 --> 00:42:21,160
okay thank you

