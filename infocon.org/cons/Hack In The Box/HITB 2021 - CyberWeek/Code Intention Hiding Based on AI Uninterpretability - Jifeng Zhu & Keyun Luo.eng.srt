1
00:00:03,199 --> 00:00:05,839
good afternoon everyone

2
00:00:05,839 --> 00:00:07,919
our talk today is

3
00:00:07,919 --> 00:00:09,440
deep puzzling

4
00:00:09,440 --> 00:00:12,240
binary called intention hiding based on

5
00:00:12,240 --> 00:00:16,200
ai on interpretability

6
00:00:16,239 --> 00:00:19,760
is completed by me and my colleague ji

7
00:00:19,760 --> 00:00:22,320
fong too

8
00:00:22,960 --> 00:00:26,160
we landed deep personally because it

9
00:00:26,160 --> 00:00:30,320
uses ai technology to show a variety of

10
00:00:30,320 --> 00:00:32,079
behaviors

11
00:00:32,079 --> 00:00:36,239
which makes people feel puzzled

12
00:00:37,120 --> 00:00:39,760
we are all from the future lab of the

13
00:00:39,760 --> 00:00:44,440
texan security platform department

14
00:00:47,440 --> 00:00:50,160
the security plan from department has

15
00:00:50,160 --> 00:00:54,160
been with tencent for 16 years

16
00:00:54,160 --> 00:00:57,199
and dedicated to the protection of

17
00:00:57,199 --> 00:00:59,280
cuckoo wechat

18
00:00:59,280 --> 00:01:04,079
testing games and many other products

19
00:01:05,438 --> 00:01:10,240
and structure lab was founded in 2019

20
00:01:10,240 --> 00:01:15,839
focusing on red teaming and ai security

21
00:01:16,080 --> 00:01:19,200
some researches have been published

22
00:01:19,200 --> 00:01:22,080
on hacking the box conference

23
00:01:22,080 --> 00:01:24,240
x focus conference

24
00:01:24,240 --> 00:01:27,119
proof of concept conference

25
00:01:27,119 --> 00:01:29,920
etc

26
00:01:30,880 --> 00:01:33,520
please allow me to briefly introduce

27
00:01:33,520 --> 00:01:36,560
ourselves here

28
00:01:37,840 --> 00:01:40,640
g-phone has more than 10 years of

29
00:01:40,640 --> 00:01:45,119
experience in information security

30
00:01:46,479 --> 00:01:50,560
his research many focus on vulnerability

31
00:01:50,560 --> 00:01:52,840
advanced threat

32
00:01:52,840 --> 00:01:56,560
analysis reverse engineering

33
00:01:56,560 --> 00:01:57,360
and

34
00:01:57,360 --> 00:02:00,479
ai security

35
00:02:02,399 --> 00:02:05,360
and i am quite familiar with deep

36
00:02:05,360 --> 00:02:08,399
learning and data mining methods

37
00:02:08,399 --> 00:02:12,000
now i many work on ai enabled security

38
00:02:12,000 --> 00:02:14,480
research

39
00:02:19,200 --> 00:02:22,480
our speech today is many focused on the

40
00:02:22,480 --> 00:02:23,520
following

41
00:02:23,520 --> 00:02:26,239
five parts

42
00:02:27,120 --> 00:02:29,360
in the first part

43
00:02:29,360 --> 00:02:32,319
i will give you a basic overview about

44
00:02:32,319 --> 00:02:36,119
the intent hiding

45
00:02:36,480 --> 00:02:39,840
then i will explain some background and

46
00:02:39,840 --> 00:02:43,599
its importance to security

47
00:02:43,840 --> 00:02:48,560
especially why we use ai here

48
00:02:49,519 --> 00:02:51,120
after that

49
00:02:51,120 --> 00:02:53,920
i will introduce the give puzzling

50
00:02:53,920 --> 00:02:57,280
framework in detail

51
00:02:57,280 --> 00:03:01,280
such as feature extraction

52
00:03:01,280 --> 00:03:05,840
binary code generation and repair

53
00:03:07,760 --> 00:03:10,560
and later the demonstration will be

54
00:03:10,560 --> 00:03:12,640
illustrated

55
00:03:12,640 --> 00:03:17,958
as well as the reverse analysis

56
00:03:18,800 --> 00:03:23,760
finally i will summarize this talk

57
00:03:27,200 --> 00:03:28,480
okay

58
00:03:28,480 --> 00:03:33,640
let's dive into the intent hiding

59
00:03:36,080 --> 00:03:37,440
first of all

60
00:03:37,440 --> 00:03:40,480
let's learn the evolution history of

61
00:03:40,480 --> 00:03:43,119
male ware

62
00:03:43,840 --> 00:03:46,879
with the fierce offensive and defensive

63
00:03:46,879 --> 00:03:49,680
confrontation

64
00:03:49,680 --> 00:03:52,080
we have witnessed the various novel

65
00:03:52,080 --> 00:03:55,200
malware attacks

66
00:03:57,280 --> 00:04:00,560
the key word of the first generation is

67
00:04:00,560 --> 00:04:03,680
above skating

68
00:04:04,000 --> 00:04:07,360
its main feature is continuous mutation

69
00:04:07,360 --> 00:04:10,159
in the code

70
00:04:11,920 --> 00:04:17,438
and the second generation is encryption

71
00:04:17,600 --> 00:04:20,478
its main purpose is to evade static

72
00:04:20,478 --> 00:04:21,759
detection

73
00:04:21,759 --> 00:04:25,280
by hiding the payload

74
00:04:26,080 --> 00:04:29,120
the third generation is immersive

75
00:04:29,120 --> 00:04:31,120
milwaukee

76
00:04:31,120 --> 00:04:34,000
it tried to avoid being anonymized with

77
00:04:34,000 --> 00:04:37,880
sandbox anti-detection

78
00:04:39,840 --> 00:04:42,960
and the first generation is a targeted

79
00:04:42,960 --> 00:04:44,720
attack

80
00:04:44,720 --> 00:04:49,680
it tried to disclose only other target

81
00:04:52,160 --> 00:04:55,120
it can be seen from these trends

82
00:04:55,120 --> 00:04:57,919
that attacks are becoming more refined

83
00:04:57,919 --> 00:05:00,960
and more purposeful

84
00:05:00,960 --> 00:05:03,360
there are more and more judgments and

85
00:05:03,360 --> 00:05:07,199
constraints on the environment

86
00:05:08,080 --> 00:05:11,520
this phenomenon cannot help but cause us

87
00:05:11,520 --> 00:05:15,680
to think about intent hiding

88
00:05:19,039 --> 00:05:20,400
okay

89
00:05:20,400 --> 00:05:23,120
let's see the important role of target

90
00:05:23,120 --> 00:05:27,919
positioning in modern cyber security

91
00:05:29,280 --> 00:05:31,520
internet hiding

92
00:05:31,520 --> 00:05:33,280
simply put

93
00:05:33,280 --> 00:05:36,639
it means meeting the right person and

94
00:05:36,639 --> 00:05:40,000
doing the right things

95
00:05:42,880 --> 00:05:45,840
the most important goal is to hide one's

96
00:05:45,840 --> 00:05:48,479
key behaviors

97
00:05:48,479 --> 00:05:52,320
avoid being discovered by the public

98
00:05:52,320 --> 00:05:55,759
and exerts the greatest power at the

99
00:05:55,759 --> 00:05:59,360
most appropriate time

100
00:06:01,440 --> 00:06:04,319
target positioning is a core of internal

101
00:06:04,319 --> 00:06:07,319
hiding

102
00:06:07,759 --> 00:06:11,360
it can narrow the scope of influence

103
00:06:11,360 --> 00:06:15,280
avoid larger scale detection

104
00:06:15,280 --> 00:06:16,160
and

105
00:06:16,160 --> 00:06:18,840
increase the concealment of

106
00:06:18,840 --> 00:06:23,199
actions so it is often used in apt

107
00:06:23,199 --> 00:06:25,680
attacks

108
00:06:26,479 --> 00:06:31,520
the stuxnet attack is a very famous

109
00:06:32,840 --> 00:06:36,000
one just like the right finger

110
00:06:36,000 --> 00:06:38,240
illustrated

111
00:06:38,240 --> 00:06:43,120
in order to achieve target positioning

112
00:06:43,120 --> 00:06:47,360
we need to collect running time data

113
00:06:47,360 --> 00:06:48,479
such as

114
00:06:48,479 --> 00:06:51,759
physical hardware

115
00:06:51,759 --> 00:06:54,960
network connections

116
00:06:54,960 --> 00:06:57,440
documents

117
00:06:57,440 --> 00:06:58,880
pictures

118
00:06:58,880 --> 00:07:01,360
etc

119
00:07:01,360 --> 00:07:04,240
and later to make further decisions

120
00:07:04,240 --> 00:07:07,759
based on these findings

121
00:07:11,840 --> 00:07:13,840
in fact

122
00:07:13,840 --> 00:07:17,440
security researchers from ibm have

123
00:07:17,440 --> 00:07:20,319
proposed an intent concealment framework

124
00:07:20,319 --> 00:07:25,840
for target positioning as early as 2018

125
00:07:25,840 --> 00:07:28,319
which called the blocker

126
00:07:28,319 --> 00:07:31,759
it uses ai algorithms to identify the

127
00:07:31,759 --> 00:07:34,160
target

128
00:07:36,080 --> 00:07:38,960
as the finger shoes

129
00:07:38,960 --> 00:07:42,080
only the key generated by a specific

130
00:07:42,080 --> 00:07:45,199
person can decrypt the payload and

131
00:07:45,199 --> 00:07:48,080
release the attack

132
00:07:48,240 --> 00:07:51,599
it will not show any malicious behavior

133
00:07:51,599 --> 00:07:54,960
under other conditions

134
00:07:56,879 --> 00:08:00,800
this approach is quite shocking

135
00:08:00,800 --> 00:08:04,160
allowing people to see the power of ai

136
00:08:04,160 --> 00:08:06,560
attack

137
00:08:10,879 --> 00:08:15,039
this is key guaranteed security

138
00:08:15,039 --> 00:08:16,879
in their approach

139
00:08:16,879 --> 00:08:21,840
a face image is used as input

140
00:08:22,000 --> 00:08:24,879
a detection algorithm is used to

141
00:08:24,879 --> 00:08:29,360
generate high dimensional features

142
00:08:29,919 --> 00:08:33,120
and a generation model is also used to

143
00:08:33,120 --> 00:08:36,640
build a robust key

144
00:08:37,120 --> 00:08:40,080
then this key can unlock the payload and

145
00:08:40,080 --> 00:08:43,120
start the attack

146
00:08:44,480 --> 00:08:46,320
therefore

147
00:08:46,320 --> 00:08:48,640
the length of the key is critical

148
00:08:48,640 --> 00:08:50,959
important

149
00:08:50,959 --> 00:08:54,000
and it is directly related to the

150
00:08:54,000 --> 00:08:57,760
difficulty of cracking

151
00:09:02,800 --> 00:09:04,160
however

152
00:09:04,160 --> 00:09:06,720
this does not mean that the framework

153
00:09:06,720 --> 00:09:09,440
has no weakness

154
00:09:09,440 --> 00:09:13,600
especially for reverse analysts

155
00:09:13,600 --> 00:09:18,080
debugging will reveal everything

156
00:09:20,800 --> 00:09:24,000
the cracker analyzes the program

157
00:09:24,000 --> 00:09:27,200
and will soon find that the core of the

158
00:09:27,200 --> 00:09:29,120
entire framework

159
00:09:29,120 --> 00:09:31,440
lies in the key

160
00:09:31,440 --> 00:09:34,959
and the attribute features collected by

161
00:09:34,959 --> 00:09:39,359
the program will reveal this clue

162
00:09:39,920 --> 00:09:41,760
because the face attributes are

163
00:09:41,760 --> 00:09:43,680
collected

164
00:09:43,680 --> 00:09:46,399
the intention must be related to a

165
00:09:46,399 --> 00:09:49,200
specific person

166
00:09:49,200 --> 00:09:53,519
based on our normal reasoning

167
00:09:56,000 --> 00:09:57,279
therefore

168
00:09:57,279 --> 00:09:59,440
there are some possible methods for

169
00:09:59,440 --> 00:10:02,959
cracking this framework

170
00:10:03,760 --> 00:10:06,560
the first method is to elaborate the

171
00:10:06,560 --> 00:10:10,720
keys inside the program directly

172
00:10:10,720 --> 00:10:13,760
the second is to boot first the input

173
00:10:13,760 --> 00:10:16,480
attributes

174
00:10:16,480 --> 00:10:20,399
and the third is to input some deceptive

175
00:10:20,399 --> 00:10:22,959
attributes

176
00:10:23,440 --> 00:10:26,240
considering the shortcomings analyzed

177
00:10:26,240 --> 00:10:27,440
here

178
00:10:27,440 --> 00:10:32,920
new ideas popped up in our minds

179
00:10:38,480 --> 00:10:40,800
from attack to defend

180
00:10:40,800 --> 00:10:46,040
maybe it brings us different ideas

181
00:10:46,480 --> 00:10:50,399
just unlike the two sides of a coin

182
00:10:50,399 --> 00:10:53,839
these advantages and disadvantages

183
00:10:53,839 --> 00:10:57,920
inspire us that we may be able to design

184
00:10:57,920 --> 00:11:01,279
a balanced plan

185
00:11:01,279 --> 00:11:03,600
combining intent hiding and

186
00:11:03,600 --> 00:11:05,839
anti-debugging

187
00:11:05,839 --> 00:11:08,320
we will get better binary code

188
00:11:08,320 --> 00:11:10,959
protection

189
00:11:12,720 --> 00:11:14,880
for the attacker

190
00:11:14,880 --> 00:11:18,880
it can hide the attacker intent

191
00:11:19,120 --> 00:11:20,800
for the defender

192
00:11:20,800 --> 00:11:23,519
it can protect the car code from being

193
00:11:23,519 --> 00:11:26,519
reversed

194
00:11:28,160 --> 00:11:30,399
we have studied some possible

195
00:11:30,399 --> 00:11:33,200
improvements

196
00:11:35,519 --> 00:11:39,839
the motivations can be these

197
00:11:41,040 --> 00:11:45,279
the first is to perform multitasking

198
00:11:45,279 --> 00:11:47,920
so that some of the tasks can be

199
00:11:47,920 --> 00:11:50,079
anti-debuggit

200
00:11:50,079 --> 00:11:54,599
while the main work can continue

201
00:11:56,079 --> 00:12:00,800
the second is to use implicit features

202
00:12:00,800 --> 00:12:03,440
hide the intent in a large amount of

203
00:12:03,440 --> 00:12:05,680
playing data

204
00:12:05,680 --> 00:12:08,880
this will greatly increase the elaborate

205
00:12:08,880 --> 00:12:12,240
space for guessing

206
00:12:14,480 --> 00:12:19,519
the third point is generated payload

207
00:12:19,839 --> 00:12:25,440
disguised as an ordinary ai application

208
00:12:25,440 --> 00:12:28,160
the program does not store the payload

209
00:12:28,160 --> 00:12:30,959
directly

210
00:12:33,040 --> 00:12:36,959
the last is to use an end to end model

211
00:12:36,959 --> 00:12:39,760
to avoid the tempering and traversal of

212
00:12:39,760 --> 00:12:44,880
the intermediate value from the ai model

213
00:12:49,680 --> 00:12:52,800
after discussing these ideas

214
00:12:52,800 --> 00:12:55,920
we hope to design a powerful binary

215
00:12:55,920 --> 00:12:59,440
level called intention hiding framework

216
00:12:59,440 --> 00:13:04,560
to exert great power in actual combat

217
00:13:05,760 --> 00:13:06,639
now

218
00:13:06,639 --> 00:13:09,440
let's analyze the significance of this

219
00:13:09,440 --> 00:13:12,880
design for security

220
00:13:18,720 --> 00:13:20,880
let's first look at the boom of

221
00:13:20,880 --> 00:13:24,480
artificial intelligence

222
00:13:26,079 --> 00:13:28,880
with the rapid development of modern

223
00:13:28,880 --> 00:13:32,000
deep learning method

224
00:13:33,120 --> 00:13:37,920
ai has been widely used in many fields

225
00:13:37,920 --> 00:13:39,040
such as

226
00:13:39,040 --> 00:13:41,279
agriculture

227
00:13:41,279 --> 00:13:42,880
industry

228
00:13:42,880 --> 00:13:44,560
finance

229
00:13:44,560 --> 00:13:48,839
medicine and entertainment

230
00:13:49,519 --> 00:13:52,480
along with many other revolutionary

231
00:13:52,480 --> 00:13:54,720
applications

232
00:13:54,720 --> 00:14:00,120
it has profoundly changed our lifestyle

233
00:14:04,240 --> 00:14:09,360
it is no exception in network security

234
00:14:09,440 --> 00:14:12,320
we have witnessed too many sets for

235
00:14:12,320 --> 00:14:15,320
cases

236
00:14:18,560 --> 00:14:20,320
for the attacker

237
00:14:20,320 --> 00:14:23,360
we can use artificial intelligence

238
00:14:23,360 --> 00:14:26,320
to find vulnerabilities

239
00:14:26,320 --> 00:14:28,880
clutching award cleaning

240
00:14:28,880 --> 00:14:31,199
spare vision

241
00:14:31,199 --> 00:14:36,959
and even automatic panel testing testing

242
00:14:39,120 --> 00:14:41,440
and for the defender

243
00:14:41,440 --> 00:14:44,720
we can perform intrusion detection

244
00:14:44,720 --> 00:14:47,440
web application firewall

245
00:14:47,440 --> 00:14:50,800
manual detection and user behavior

246
00:14:50,800 --> 00:14:53,519
analysis

247
00:14:56,880 --> 00:14:58,880
the efficiency of artificial

248
00:14:58,880 --> 00:15:01,519
intelligence can complete these tasks

249
00:15:01,519 --> 00:15:05,360
quickly and realize intelligent decision

250
00:15:05,360 --> 00:15:09,160
to a certain extent

251
00:15:14,079 --> 00:15:16,800
the elements of the success of these

252
00:15:16,800 --> 00:15:18,560
applications

253
00:15:18,560 --> 00:15:21,199
can be summarized in the following two

254
00:15:21,199 --> 00:15:23,760
aspects

255
00:15:23,760 --> 00:15:25,360
massive data

256
00:15:25,360 --> 00:15:29,360
and the patterns behind them

257
00:15:31,279 --> 00:15:34,720
ai is very good at imitating

258
00:15:34,720 --> 00:15:37,360
and the massive parameters

259
00:15:37,360 --> 00:15:40,720
allow them to approximate any high order

260
00:15:40,720 --> 00:15:43,839
complex function

261
00:15:44,720 --> 00:15:46,720
and attempt to the conditional

262
00:15:46,720 --> 00:15:51,279
probabilities in different contexts

263
00:15:53,600 --> 00:15:56,480
at the same time

264
00:15:56,480 --> 00:15:59,600
the contrast of positive and negative

265
00:15:59,600 --> 00:16:01,040
examples

266
00:16:01,040 --> 00:16:04,079
allows the ai model to learn a better

267
00:16:04,079 --> 00:16:07,800
decision binary

268
00:16:08,240 --> 00:16:11,759
shown in the finger below

269
00:16:11,759 --> 00:16:14,880
the support generated by the generator

270
00:16:14,880 --> 00:16:16,880
and the original sample can be

271
00:16:16,880 --> 00:16:19,440
effectively distinguished by the

272
00:16:19,440 --> 00:16:22,440
discriminator

273
00:16:24,079 --> 00:16:27,279
which can guide the generation of

274
00:16:27,279 --> 00:16:31,680
more effective anniversary example

275
00:16:35,199 --> 00:16:37,920
here let's reveal some characteristics

276
00:16:37,920 --> 00:16:40,560
of ai

277
00:16:46,959 --> 00:16:49,120
in modern deep learning

278
00:16:49,120 --> 00:16:51,759
sequence generation plays an important

279
00:16:51,759 --> 00:16:53,680
role

280
00:16:53,680 --> 00:16:56,560
the core is the encoder decoder

281
00:16:56,560 --> 00:16:59,199
framework

282
00:17:00,480 --> 00:17:02,720
now let's learn the generative

283
00:17:02,720 --> 00:17:06,319
characteristic of ai

284
00:17:10,160 --> 00:17:12,880
the encoder decoder architecture can

285
00:17:12,880 --> 00:17:15,839
handle inputs and outputs that are both

286
00:17:15,839 --> 00:17:18,720
variable lens sequences

287
00:17:18,720 --> 00:17:20,880
thus is suitable for sequence

288
00:17:20,880 --> 00:17:23,119
transduction problems

289
00:17:23,119 --> 00:17:27,520
such as machine translation

290
00:17:29,919 --> 00:17:31,440
the encoder

291
00:17:31,440 --> 00:17:34,160
can take a very balanced sequence and

292
00:17:34,160 --> 00:17:35,600
the input

293
00:17:35,600 --> 00:17:39,280
and transforms it into a fixed shape

294
00:17:39,280 --> 00:17:41,760
heightened state

295
00:17:41,760 --> 00:17:43,679
in other words

296
00:17:43,679 --> 00:17:46,880
information of the input source sequence

297
00:17:46,880 --> 00:17:50,000
is encoded in the hidden state of the

298
00:17:50,000 --> 00:17:52,559
encoder

299
00:17:54,799 --> 00:17:58,840
to generate the output sequence token by

300
00:17:58,840 --> 00:18:02,480
token a separate decoder is used to

301
00:18:02,480 --> 00:18:05,280
predict the next token based on what

302
00:18:05,280 --> 00:18:08,000
tokens have been seen

303
00:18:08,000 --> 00:18:11,039
or generated

304
00:18:11,919 --> 00:18:15,200
together with the encoded information of

305
00:18:15,200 --> 00:18:18,480
the input sequence

306
00:18:24,320 --> 00:18:27,919
since many parameters in the original

307
00:18:27,919 --> 00:18:31,360
model are redundant

308
00:18:31,760 --> 00:18:34,480
generating ability naturally means

309
00:18:34,480 --> 00:18:36,960
memory

310
00:18:37,600 --> 00:18:40,240
and auto encoder is one of the

311
00:18:40,240 --> 00:18:43,840
successful applications

312
00:18:45,440 --> 00:18:48,240
an auto encoder is a type of artificial

313
00:18:48,240 --> 00:18:51,200
in your network used to learn efficient

314
00:18:51,200 --> 00:18:52,240
coding

315
00:18:52,240 --> 00:18:55,600
of on network data in an unsupervised

316
00:18:55,600 --> 00:18:58,240
learning way

317
00:18:59,280 --> 00:19:03,120
the encoding is validated and refined by

318
00:19:03,120 --> 00:19:06,320
attempting to regenerate the input from

319
00:19:06,320 --> 00:19:08,640
the encoding

320
00:19:08,640 --> 00:19:12,640
so it has the following features

321
00:19:12,960 --> 00:19:14,559
first

322
00:19:14,559 --> 00:19:18,080
no neighbors are needed

323
00:19:18,720 --> 00:19:20,320
second

324
00:19:20,320 --> 00:19:25,080
it means smaller model size

325
00:19:26,799 --> 00:19:32,600
these make them popular in real products

326
00:19:38,080 --> 00:19:41,840
while the ai model is powerful

327
00:19:41,840 --> 00:19:46,320
it also has some special properties

328
00:19:46,799 --> 00:19:49,200
here we study its black box

329
00:19:49,200 --> 00:19:52,200
characteristic

330
00:19:55,039 --> 00:19:57,520
traditional scientifical model based on

331
00:19:57,520 --> 00:20:01,280
logistical regression and decision trees

332
00:20:01,280 --> 00:20:05,480
usually have good interpretability

333
00:20:06,480 --> 00:20:10,880
we can see the future importance

334
00:20:12,000 --> 00:20:13,679
however

335
00:20:13,679 --> 00:20:17,039
ai based on deep learning method is very

336
00:20:17,039 --> 00:20:21,000
different from them

337
00:20:21,120 --> 00:20:22,799
first

338
00:20:22,799 --> 00:20:25,760
the ai model usually consists of a

339
00:20:25,760 --> 00:20:30,720
network structure and wet parameters

340
00:20:31,280 --> 00:20:36,320
just like the right fingers as showing

341
00:20:37,200 --> 00:20:40,320
the network structure defines the flow

342
00:20:40,320 --> 00:20:42,000
of the vector

343
00:20:42,000 --> 00:20:44,799
and the way the parameter determines the

344
00:20:44,799 --> 00:20:49,080
transformation of the input

345
00:20:51,360 --> 00:20:52,400
second

346
00:20:52,400 --> 00:20:55,120
it is usually difficult to explain

347
00:20:55,120 --> 00:20:57,120
whether a network structure can work

348
00:20:57,120 --> 00:20:58,799
well

349
00:20:58,799 --> 00:21:01,679
and in most cases

350
00:21:01,679 --> 00:21:06,159
it is designed based on experience

351
00:21:10,159 --> 00:21:11,280
third

352
00:21:11,280 --> 00:21:13,440
for the weather parameter

353
00:21:13,440 --> 00:21:17,200
we cannot explain its meaning

354
00:21:17,200 --> 00:21:20,240
only know that after the transformation

355
00:21:20,240 --> 00:21:22,559
of these parameters

356
00:21:22,559 --> 00:21:27,120
we can get expected output

357
00:21:29,760 --> 00:21:31,360
first

358
00:21:31,360 --> 00:21:34,400
it is urani difficult to explain which

359
00:21:34,400 --> 00:21:37,280
features of the original data that the

360
00:21:37,280 --> 00:21:40,080
ai model has learned

361
00:21:40,080 --> 00:21:42,799
we only know that it will calculate a

362
00:21:42,799 --> 00:21:44,400
reasonable output

363
00:21:44,400 --> 00:21:47,840
on similar data sets

364
00:21:50,159 --> 00:21:52,000
in general

365
00:21:52,000 --> 00:21:54,720
these characteristics make artificial

366
00:21:54,720 --> 00:21:57,280
intelligence a black box to a large

367
00:21:57,280 --> 00:21:58,799
extent

368
00:21:58,799 --> 00:22:02,640
due to the lack of theory guarantee

369
00:22:02,640 --> 00:22:03,679
knowing it

370
00:22:03,679 --> 00:22:07,880
but not knowing why

371
00:22:13,200 --> 00:22:16,880
what do these characteristics mean

372
00:22:16,880 --> 00:22:21,280
we summarize it as follows

373
00:22:22,080 --> 00:22:24,000
first

374
00:22:24,000 --> 00:22:26,799
powerful sequence generation ability

375
00:22:26,799 --> 00:22:30,240
means greater memory capacity

376
00:22:30,240 --> 00:22:33,280
it's easy to remember passage

377
00:22:33,280 --> 00:22:36,240
and it is able to adjust the decoding

378
00:22:36,240 --> 00:22:37,360
output

379
00:22:37,360 --> 00:22:41,799
according to the input of the encoder

380
00:22:43,760 --> 00:22:44,960
second

381
00:22:44,960 --> 00:22:47,600
advanced memorability means fault

382
00:22:47,600 --> 00:22:49,520
tolerance

383
00:22:49,520 --> 00:22:55,158
it is able to restore damaged data

384
00:22:56,240 --> 00:22:58,640
and last

385
00:22:58,640 --> 00:23:01,280
the uninterpretability characteristic of

386
00:23:01,280 --> 00:23:04,480
ai means is natural difficulty in

387
00:23:04,480 --> 00:23:08,200
reverse analysis

388
00:23:08,559 --> 00:23:11,840
it is almost impossible to modify model

389
00:23:11,840 --> 00:23:13,120
parameters

390
00:23:13,120 --> 00:23:16,399
in a brute force way

391
00:23:17,360 --> 00:23:19,520
the camera relationship

392
00:23:19,520 --> 00:23:22,720
between model input and output is not

393
00:23:22,720 --> 00:23:25,200
clear

394
00:23:26,080 --> 00:23:29,760
even if the ai model is obtained

395
00:23:29,760 --> 00:23:33,039
it is quite difficult to know which data

396
00:23:33,039 --> 00:23:37,840
and features are running at work

397
00:23:43,200 --> 00:23:46,480
considering the cognitions above

398
00:23:46,480 --> 00:23:49,679
we are the first to propose ai enabled

399
00:23:49,679 --> 00:23:52,320
security practices based on the

400
00:23:52,320 --> 00:23:54,840
generative ability and

401
00:23:54,840 --> 00:23:58,799
uninterpretability of the ai

402
00:24:01,279 --> 00:24:04,159
combining the characteristics of ai and

403
00:24:04,159 --> 00:24:07,120
security can give us a higher level

404
00:24:07,120 --> 00:24:08,400
perspective

405
00:24:08,400 --> 00:24:12,960
on the current security situation

406
00:24:15,600 --> 00:24:18,240
we hope to make full use of ai's

407
00:24:18,240 --> 00:24:20,240
discrimination power

408
00:24:20,240 --> 00:24:22,320
generation ability

409
00:24:22,320 --> 00:24:23,919
thought tolerance

410
00:24:23,919 --> 00:24:25,080
and

411
00:24:25,080 --> 00:24:28,960
interpretability characteristic

412
00:24:28,960 --> 00:24:32,080
so as to explore the possibility of

413
00:24:32,080 --> 00:24:34,880
artificial intelligence power attack and

414
00:24:34,880 --> 00:24:37,360
defense

415
00:24:42,799 --> 00:24:46,080
ok let's continue

416
00:24:46,080 --> 00:24:48,400
it's time to introduce the design

417
00:24:48,400 --> 00:24:53,200
details of the depositing framework

418
00:24:57,840 --> 00:25:00,880
the key idea of this framework is to

419
00:25:00,880 --> 00:25:04,080
avoid explicit conditional judgments

420
00:25:04,080 --> 00:25:07,600
during code execution

421
00:25:08,480 --> 00:25:13,400
such as if conditional judgments

422
00:25:14,400 --> 00:25:17,520
expression mentioned

423
00:25:18,559 --> 00:25:21,760
while conditional judgments

424
00:25:21,760 --> 00:25:22,799
and

425
00:25:22,799 --> 00:25:26,840
hash value matching

426
00:25:30,320 --> 00:25:33,440
all decisions are made by the artificial

427
00:25:33,440 --> 00:25:34,880
intelligence

428
00:25:34,880 --> 00:25:37,360
in order to take advantage of the

429
00:25:37,360 --> 00:25:38,880
uninterpretability

430
00:25:38,880 --> 00:25:42,000
of ai to make difficulties for the

431
00:25:42,000 --> 00:25:44,559
reverse

432
00:25:45,279 --> 00:25:47,440
let's keep in mind that

433
00:25:47,440 --> 00:25:52,840
we simulate everything with ai

434
00:25:57,840 --> 00:26:00,080
specifically

435
00:26:00,080 --> 00:26:03,440
the overall data flow of our framework

436
00:26:03,440 --> 00:26:06,640
has the following steps

437
00:26:09,120 --> 00:26:11,120
step 1

438
00:26:11,120 --> 00:26:14,400
obtain a large amount of plane data

439
00:26:14,400 --> 00:26:17,039
our intentions can be heightened in this

440
00:26:17,039 --> 00:26:21,879
data in some kind of back door

441
00:26:24,080 --> 00:26:28,240
step 2 pre-processing

442
00:26:28,720 --> 00:26:33,279
encoding this raw data into labels

443
00:26:33,520 --> 00:26:36,640
because the ai model cannot deal with

444
00:26:36,640 --> 00:26:39,840
charts directly

445
00:26:44,400 --> 00:26:46,880
third step

446
00:26:46,880 --> 00:26:49,600
use feature extraction and generation

447
00:26:49,600 --> 00:26:50,880
models

448
00:26:50,880 --> 00:26:53,919
to process the data path

449
00:26:53,919 --> 00:26:57,840
then output probabilities

450
00:27:02,159 --> 00:27:03,840
first

451
00:27:03,840 --> 00:27:06,080
decoding the probability to get

452
00:27:06,080 --> 00:27:09,039
preliminary output

453
00:27:09,039 --> 00:27:12,080
for instance a list of indices in the

454
00:27:12,080 --> 00:27:13,279
pictures

455
00:27:13,279 --> 00:27:17,159
named middle output

456
00:27:20,720 --> 00:27:22,480
fifth

457
00:27:22,480 --> 00:27:25,120
fix some error with an error creation

458
00:27:25,120 --> 00:27:27,520
model

459
00:27:28,799 --> 00:27:31,200
sixth step

460
00:27:31,200 --> 00:27:34,720
and then we will get the final output

461
00:27:34,720 --> 00:27:39,279
it contains our design intentions

462
00:27:42,720 --> 00:27:44,320
7.

463
00:27:44,320 --> 00:27:47,440
encode this data into binary code

464
00:27:47,440 --> 00:27:50,559
and exclude it

465
00:27:57,679 --> 00:28:00,320
the whole process is described in the

466
00:28:00,320 --> 00:28:03,840
way of data flow previously

467
00:28:04,240 --> 00:28:06,799
from the prosperity of running time

468
00:28:06,799 --> 00:28:11,120
it can also be viewed as three parts

469
00:28:11,120 --> 00:28:17,080
the first part is input data and feature

470
00:28:17,279 --> 00:28:21,360
the next part is ai model

471
00:28:21,440 --> 00:28:26,480
and the last one is exclusion code

472
00:28:29,679 --> 00:28:32,320
the first two stages are completed

473
00:28:32,320 --> 00:28:34,960
offline

474
00:28:35,440 --> 00:28:39,919
only the last one is exposed

475
00:28:40,320 --> 00:28:41,440
okay

476
00:28:41,440 --> 00:28:44,240
now let me introduce the details about

477
00:28:44,240 --> 00:28:46,880
the design

478
00:28:51,039 --> 00:28:52,799
first

479
00:28:52,799 --> 00:28:55,360
let's reveal the details of feature

480
00:28:55,360 --> 00:28:58,360
extraction

481
00:29:00,640 --> 00:29:03,039
in the ai algorithm

482
00:29:03,039 --> 00:29:05,919
feature extraction directly determines

483
00:29:05,919 --> 00:29:10,000
the final effect of the model

484
00:29:11,240 --> 00:29:14,559
statistics best methods often need to

485
00:29:14,559 --> 00:29:17,360
manual features

486
00:29:17,360 --> 00:29:20,320
so that the intention may be guessed by

487
00:29:20,320 --> 00:29:21,800
the reverse engineer

488
00:29:21,800 --> 00:29:24,480
[Music]

489
00:29:24,480 --> 00:29:27,279
while deep learning based methods only

490
00:29:27,279 --> 00:29:30,880
to encode the original data

491
00:29:30,880 --> 00:29:34,960
we use this blank box manner here

492
00:29:38,159 --> 00:29:41,279
in our scenery there are two main

493
00:29:41,279 --> 00:29:45,600
problems that need to be solved

494
00:29:45,760 --> 00:29:48,880
one is how to extract high dimension

495
00:29:48,880 --> 00:29:51,279
features from maximum raw data

496
00:29:51,279 --> 00:29:54,279
effectively

497
00:29:55,679 --> 00:29:58,559
here we use a network architecture

498
00:29:58,559 --> 00:30:02,240
similar to text cnn

499
00:30:02,240 --> 00:30:04,640
which is a network that uses

500
00:30:04,640 --> 00:30:09,840
convolutional block to extract features

501
00:30:10,960 --> 00:30:15,440
after encoding the original data

502
00:30:15,520 --> 00:30:18,080
one-dimensional combination block is

503
00:30:18,080 --> 00:30:19,840
used

504
00:30:19,840 --> 00:30:22,799
and then concatenate the output of these

505
00:30:22,799 --> 00:30:25,360
basic blocks together by dense

506
00:30:25,360 --> 00:30:28,000
connection

507
00:30:28,240 --> 00:30:32,799
and then the feature vector is formed

508
00:30:32,799 --> 00:30:35,520
the network connection is showing as a

509
00:30:35,520 --> 00:30:38,320
middle finger

510
00:30:38,399 --> 00:30:41,440
this network structure has been proven

511
00:30:41,440 --> 00:30:43,360
to help to improve the quality of

512
00:30:43,360 --> 00:30:45,520
feature extraction

513
00:30:45,520 --> 00:30:49,799
for better gradient propagation

514
00:30:52,799 --> 00:30:55,919
the other problem is how to ensure the

515
00:30:55,919 --> 00:30:58,880
robotness of the feature output

516
00:30:58,880 --> 00:31:03,559
and the different input data

517
00:31:04,559 --> 00:31:07,120
considering the scarcity of data

518
00:31:07,120 --> 00:31:09,760
resources

519
00:31:09,919 --> 00:31:12,960
our main solution is to supplement the

520
00:31:12,960 --> 00:31:15,120
training data through data argument

521
00:31:15,120 --> 00:31:16,880
methods

522
00:31:16,880 --> 00:31:18,559
such as crop

523
00:31:18,559 --> 00:31:20,000
reorder

524
00:31:20,000 --> 00:31:22,720
and changing upper and lower case to

525
00:31:22,720 --> 00:31:26,880
maintain the model's stubability

526
00:31:29,760 --> 00:31:32,559
here is a detailed illustration of the

527
00:31:32,559 --> 00:31:35,200
calculation process of convolution and

528
00:31:35,200 --> 00:31:39,440
pulling method in feature extraction

529
00:31:40,799 --> 00:31:44,480
let's see the convolutions

530
00:31:45,679 --> 00:31:50,080
the input is a two dimensional tensor

531
00:31:50,080 --> 00:31:53,039
with a height of three and the width of

532
00:31:53,039 --> 00:31:55,440
three

533
00:31:56,080 --> 00:31:58,799
the height and the width of the kernel

534
00:31:58,799 --> 00:32:01,840
are both two

535
00:32:02,000 --> 00:32:05,120
the shaded portions are the first output

536
00:32:05,120 --> 00:32:06,399
element

537
00:32:06,399 --> 00:32:09,200
as well as the input and kernel tensor

538
00:32:09,200 --> 00:32:14,240
elements used for the output computation

539
00:32:14,240 --> 00:32:17,039
and we will get the final result

540
00:32:17,039 --> 00:32:19,600
19.

541
00:32:23,120 --> 00:32:26,840
as for puming it is very similar to

542
00:32:26,840 --> 00:32:29,440
convolutions we can think of the pulling

543
00:32:29,440 --> 00:32:32,559
window as starting from the upper left

544
00:32:32,559 --> 00:32:34,799
of the input sensor

545
00:32:34,799 --> 00:32:38,000
and sliding across the input tensor from

546
00:32:38,000 --> 00:32:43,039
left to right and top to bottom

547
00:32:43,039 --> 00:32:45,840
at each location that the pulling window

548
00:32:45,840 --> 00:32:47,279
hits

549
00:32:47,279 --> 00:32:50,640
it computes the maximum or average value

550
00:32:50,640 --> 00:32:54,799
of the input sub-tensor in the window

551
00:32:54,799 --> 00:32:57,519
depending on whether max or average

552
00:32:57,519 --> 00:33:00,960
pulling is employed

553
00:33:09,200 --> 00:33:12,720
after the features generated above

554
00:33:12,720 --> 00:33:15,360
we passed it to the decoding part to

555
00:33:15,360 --> 00:33:18,480
generate the payload

556
00:33:18,480 --> 00:33:23,080
the whole steps are as follows

557
00:33:27,519 --> 00:33:28,880
step 1

558
00:33:28,880 --> 00:33:31,279
add the dimension to the n-dimensional

559
00:33:31,279 --> 00:33:32,320
features

560
00:33:32,320 --> 00:33:36,840
and expat it to m plus n-dimensions

561
00:33:36,840 --> 00:33:38,799
repeatedly

562
00:33:38,799 --> 00:33:41,919
where the m is the maximum of the

563
00:33:41,919 --> 00:33:45,039
decoded output

564
00:33:46,480 --> 00:33:48,480
step 2

565
00:33:48,480 --> 00:33:52,399
use a by astm network to further process

566
00:33:52,399 --> 00:33:54,480
the features to generate heightened

567
00:33:54,480 --> 00:33:56,880
features

568
00:33:58,159 --> 00:34:01,840
lstm network is a basic component of

569
00:34:01,840 --> 00:34:05,600
deep learning with good performance

570
00:34:05,600 --> 00:34:09,760
which processes the input text in order

571
00:34:09,760 --> 00:34:13,599
while via iostm is by direction node

572
00:34:13,599 --> 00:34:15,839
lstm

573
00:34:15,839 --> 00:34:18,560
which can process from front to back and

574
00:34:18,560 --> 00:34:22,800
from back to front at the same time

575
00:34:22,800 --> 00:34:27,280
and urani has better performance

576
00:34:29,520 --> 00:34:32,159
step 3

577
00:34:32,159 --> 00:34:35,119
use a fully connected nail to cross the

578
00:34:35,119 --> 00:34:37,760
hidden layer features

579
00:34:37,760 --> 00:34:40,639
this will give us the desired output

580
00:34:40,639 --> 00:34:43,280
dimension

581
00:34:45,040 --> 00:34:47,199
fourth step

582
00:34:47,199 --> 00:34:49,918
use a softer mass function to output the

583
00:34:49,918 --> 00:34:51,520
probability

584
00:34:51,520 --> 00:34:54,800
of each position character

585
00:34:54,800 --> 00:34:56,879
and take the one with the largest

586
00:34:56,879 --> 00:35:01,960
probability as a decoding result

587
00:35:05,359 --> 00:35:07,599
the generative model and the feature

588
00:35:07,599 --> 00:35:11,440
extraction model are cascaded together

589
00:35:11,440 --> 00:35:14,000
which means that they are optimized at

590
00:35:14,000 --> 00:35:16,560
the same time during the

591
00:35:16,560 --> 00:35:19,280
training phase

592
00:35:19,280 --> 00:35:25,240
and the payload is generated end to end

593
00:35:30,400 --> 00:35:31,920
in theory

594
00:35:31,920 --> 00:35:34,720
the payload has been generated after the

595
00:35:34,720 --> 00:35:37,839
first two steps

596
00:35:38,000 --> 00:35:40,640
but since the ai model is a

597
00:35:40,640 --> 00:35:43,680
probabilistic model

598
00:35:43,680 --> 00:35:46,160
which means all decisions

599
00:35:46,160 --> 00:35:49,440
are not precise

600
00:35:49,839 --> 00:35:52,480
even if the accuracy of the model is

601
00:35:52,480 --> 00:35:55,839
beyond 99

602
00:35:56,000 --> 00:36:00,640
there are still a few decoding errors

603
00:36:01,040 --> 00:36:03,040
for computers

604
00:36:03,040 --> 00:36:06,079
the slightest loss is a thousand miles

605
00:36:06,079 --> 00:36:07,359
away

606
00:36:07,359 --> 00:36:11,000
it is unaccessible

607
00:36:11,760 --> 00:36:13,040
therefore

608
00:36:13,040 --> 00:36:15,839
it is vital to fix the small number of

609
00:36:15,839 --> 00:36:18,240
errors

610
00:36:21,680 --> 00:36:24,480
here we use an auto encoder to achieve

611
00:36:24,480 --> 00:36:26,800
this goal

612
00:36:26,800 --> 00:36:29,680
the rule of this model is to try to

613
00:36:29,680 --> 00:36:33,759
restore the original input

614
00:36:34,560 --> 00:36:37,280
the input is part of the sharecode that

615
00:36:37,280 --> 00:36:40,640
may be wrong

616
00:36:40,640 --> 00:36:45,520
and the output is a cracked share code

617
00:36:45,520 --> 00:36:48,400
and the stupability of the data argument

618
00:36:48,400 --> 00:36:52,720
method is used at the same time

619
00:36:53,200 --> 00:36:56,320
so as to reduce the probability of

620
00:36:56,320 --> 00:36:58,800
failure

621
00:37:00,880 --> 00:37:03,440
the construction of the entire model is

622
00:37:03,440 --> 00:37:05,680
relatively simple

623
00:37:05,680 --> 00:37:10,480
and showing in the finger on the right

624
00:37:11,119 --> 00:37:13,920
the classification loss function is used

625
00:37:13,920 --> 00:37:16,160
to optimize the model

626
00:37:16,160 --> 00:37:18,800
and the model is forced to correct the

627
00:37:18,800 --> 00:37:21,800
errors

628
00:37:22,640 --> 00:37:25,119
in the finger we can see that

629
00:37:25,119 --> 00:37:30,160
the round number zero is created to 10

630
00:37:35,520 --> 00:37:38,800
based on the principles above

631
00:37:38,800 --> 00:37:42,320
i will introduce some of the experiments

632
00:37:42,320 --> 00:37:45,280
and the corresponding analysis we have

633
00:37:45,280 --> 00:37:48,280
conducted

634
00:37:52,640 --> 00:37:57,200
let's first look at the target setting

635
00:37:58,640 --> 00:38:00,720
there are three targets in the

636
00:38:00,720 --> 00:38:02,880
experiment

637
00:38:02,880 --> 00:38:06,400
nominee ordinary people

638
00:38:06,400 --> 00:38:08,320
developers

639
00:38:08,320 --> 00:38:12,400
and reverse analysts

640
00:38:13,040 --> 00:38:16,000
for these three groups of people

641
00:38:16,000 --> 00:38:19,839
different intentions are made

642
00:38:21,520 --> 00:38:23,599
for ordinary people

643
00:38:23,599 --> 00:38:26,400
the environment is characterized by a

644
00:38:26,400 --> 00:38:28,640
clean office system

645
00:38:28,640 --> 00:38:33,839
which excludes a message box code

646
00:38:34,560 --> 00:38:36,880
for developers

647
00:38:36,880 --> 00:38:39,839
the environment is catalyzed by the

648
00:38:39,839 --> 00:38:43,200
installation of development tools

649
00:38:43,200 --> 00:38:47,280
such as viral studio python

650
00:38:47,280 --> 00:38:49,680
ssh

651
00:38:49,680 --> 00:38:54,399
and a calculator code is excluded

652
00:38:56,480 --> 00:38:59,119
for reverse analysis

653
00:38:59,119 --> 00:39:01,200
the environment is catalyzed by

654
00:39:01,200 --> 00:39:04,560
debugging tools such as ida

655
00:39:04,560 --> 00:39:05,760
frida

656
00:39:05,760 --> 00:39:08,880
and when debug

657
00:39:09,280 --> 00:39:14,200
and no code is excluded

658
00:39:22,000 --> 00:39:24,320
there are three main steps in

659
00:39:24,320 --> 00:39:27,320
implementation

660
00:39:30,800 --> 00:39:34,960
step 1 make data set

661
00:39:35,839 --> 00:39:38,079
we collect elemental data when the

662
00:39:38,079 --> 00:39:40,400
program was running

663
00:39:40,400 --> 00:39:44,240
and then randomly sorted cropped it etc

664
00:39:44,240 --> 00:39:48,000
to form a string of about 20 000 charts

665
00:39:48,000 --> 00:39:50,480
in length

666
00:39:50,720 --> 00:39:54,000
the label is a type of target intent

667
00:39:54,000 --> 00:39:57,839
and the corresponding share code

668
00:39:59,359 --> 00:40:01,599
we have also made share code error

669
00:40:01,599 --> 00:40:03,280
crashing data

670
00:40:03,280 --> 00:40:06,800
which allows from 0 to 2 errors

671
00:40:06,800 --> 00:40:10,359
per 10 bytes

672
00:40:10,560 --> 00:40:13,599
it should be noticed that if the error

673
00:40:13,599 --> 00:40:17,760
rate of the input is very high

674
00:40:17,760 --> 00:40:19,950
the output is also the same

675
00:40:19,950 --> 00:40:21,839
[Music]

676
00:40:21,839 --> 00:40:26,319
so as to avoid recovering share code

677
00:40:26,319 --> 00:40:29,440
by many training

678
00:40:32,000 --> 00:40:33,760
step 2

679
00:40:33,760 --> 00:40:38,200
trend and convert models

680
00:40:39,359 --> 00:40:42,480
split a part of the data as validation

681
00:40:42,480 --> 00:40:44,800
set

682
00:40:45,280 --> 00:40:48,480
and use tensorflow to train the model to

683
00:40:48,480 --> 00:40:54,160
ensure that the accuracy is above 99

684
00:40:54,960 --> 00:40:57,119
when the model is trained

685
00:40:57,119 --> 00:41:01,680
the default storage format is hdf5

686
00:41:01,680 --> 00:41:04,480
we use tools to convert it into a json

687
00:41:04,480 --> 00:41:05,599
file

688
00:41:05,599 --> 00:41:08,720
and write it as a resource file into c

689
00:41:08,720 --> 00:41:12,160
plus plus project

690
00:41:14,160 --> 00:41:16,079
third step

691
00:41:16,079 --> 00:41:20,040
c plus class reasoning

692
00:41:22,720 --> 00:41:26,000
the exclusion flow is

693
00:41:26,000 --> 00:41:27,520
collect data

694
00:41:27,520 --> 00:41:28,960
load model

695
00:41:28,960 --> 00:41:30,960
decode share code

696
00:41:30,960 --> 00:41:32,319
fixed code

697
00:41:32,319 --> 00:41:36,160
and finally is good

698
00:41:41,359 --> 00:41:44,000
here is a detailed description of the

699
00:41:44,000 --> 00:41:47,520
input and output data

700
00:41:47,520 --> 00:41:49,839
the input data is the standard

701
00:41:49,839 --> 00:41:52,880
information when the program is running

702
00:41:52,880 --> 00:41:55,599
such as process name

703
00:41:55,599 --> 00:41:57,040
file pass

704
00:41:57,040 --> 00:41:58,960
start menu

705
00:41:58,960 --> 00:42:00,960
registry key

706
00:42:00,960 --> 00:42:03,520
etc

707
00:42:03,520 --> 00:42:05,920
most of which have nothing to do with

708
00:42:05,920 --> 00:42:08,640
the intention

709
00:42:12,079 --> 00:42:15,359
after processing by the ai model

710
00:42:15,359 --> 00:42:19,520
the output is between 0 and 255

711
00:42:19,520 --> 00:42:21,920
unsigned chart that can be easily

712
00:42:21,920 --> 00:42:25,680
converted into share code

713
00:42:25,680 --> 00:42:28,480
it should be noticed that the input and

714
00:42:28,480 --> 00:42:31,440
output here must be filled into a fixed

715
00:42:31,440 --> 00:42:32,720
length

716
00:42:32,720 --> 00:42:33,920
such as

717
00:42:33,920 --> 00:42:35,520
18

718
00:42:35,520 --> 00:42:37,359
300

719
00:42:37,359 --> 00:42:38,400
and

720
00:42:38,400 --> 00:42:41,440
irrelevant characters will be discarded

721
00:42:41,440 --> 00:42:44,839
during decoding

722
00:42:45,760 --> 00:42:49,920
so as to keep within bounds

723
00:42:55,760 --> 00:42:59,119
the main part of the ai model is a code

724
00:42:59,119 --> 00:43:01,440
generation model

725
00:43:01,440 --> 00:43:04,079
the details of the constructions are

726
00:43:04,079 --> 00:43:06,560
shown here

727
00:43:06,560 --> 00:43:08,480
from top to bottom

728
00:43:08,480 --> 00:43:12,400
in many includes data features generator

729
00:43:12,400 --> 00:43:14,319
and output

730
00:43:14,319 --> 00:43:18,560
we'll introduce them one by one

731
00:43:18,560 --> 00:43:21,440
after the data is input

732
00:43:21,440 --> 00:43:24,480
embedding is performed first

733
00:43:24,480 --> 00:43:26,800
so that the discrete value become

734
00:43:26,800 --> 00:43:30,160
continuous vectors

735
00:43:32,480 --> 00:43:35,280
then these vectors are processed by

736
00:43:35,280 --> 00:43:37,440
different compound d

737
00:43:37,440 --> 00:43:39,520
respectively

738
00:43:39,520 --> 00:43:42,079
followed by mouse pulling there

739
00:43:42,079 --> 00:43:44,800
and then newcomb 1d

740
00:43:44,800 --> 00:43:46,800
etc

741
00:43:46,800 --> 00:43:49,760
and finally these pulling vectors

742
00:43:49,760 --> 00:43:52,640
are concatenate together to form the

743
00:43:52,640 --> 00:43:55,839
final feature

744
00:43:59,200 --> 00:44:02,160
finally these features are processed

745
00:44:02,160 --> 00:44:05,440
using the bioistm model to generate a

746
00:44:05,440 --> 00:44:09,760
preliminary binary code

747
00:44:09,760 --> 00:44:13,520
which is illustrated before

748
00:44:17,599 --> 00:44:21,480
here comes the demonstration

749
00:44:23,200 --> 00:44:25,040
the following fingers

750
00:44:25,040 --> 00:44:27,280
show the exclusion result of this

751
00:44:27,280 --> 00:44:28,700
demonstration system

752
00:44:28,700 --> 00:44:31,779
[Music]

753
00:44:32,240 --> 00:44:35,119
for ordinary targets with no special

754
00:44:35,119 --> 00:44:37,839
software

755
00:44:38,000 --> 00:44:42,800
the system excludes a message box code

756
00:44:45,200 --> 00:44:47,040
and for developers

757
00:44:47,040 --> 00:44:50,480
with some developing tools

758
00:44:50,480 --> 00:44:53,359
the system recognizes and decodes the

759
00:44:53,359 --> 00:44:57,040
share code of the calculator

760
00:44:59,119 --> 00:45:01,520
the third pictures

761
00:45:01,520 --> 00:45:05,200
show that for debuggers the system does

762
00:45:05,200 --> 00:45:08,319
not execute any code

763
00:45:08,319 --> 00:45:13,480
which has a added debugging effect

764
00:45:19,520 --> 00:45:22,000
beyond the demonstration

765
00:45:22,000 --> 00:45:25,280
we also performed a reverse analysis of

766
00:45:25,280 --> 00:45:27,599
the code from the perspective of the

767
00:45:27,599 --> 00:45:29,280
cracker

768
00:45:29,280 --> 00:45:33,839
and we can get the following findings

769
00:45:35,280 --> 00:45:36,240
first

770
00:45:36,240 --> 00:45:39,440
we do not seek to use any techniques to

771
00:45:39,440 --> 00:45:42,319
obfuscate the source code

772
00:45:42,319 --> 00:45:47,400
as shown in the finger on the right

773
00:45:47,599 --> 00:45:50,000
the execution logic of the code has not

774
00:45:50,000 --> 00:45:53,920
been modified deliberately

775
00:45:56,560 --> 00:45:58,319
second

776
00:45:58,319 --> 00:46:00,720
it's not difficult to locate the code

777
00:46:00,720 --> 00:46:03,839
that runs the intent

778
00:46:03,839 --> 00:46:06,880
the difficulty lies in when it will be

779
00:46:06,880 --> 00:46:09,200
triggered

780
00:46:09,200 --> 00:46:11,680
the key point is that the address of the

781
00:46:11,680 --> 00:46:14,800
decrypt code is obtained in a dynamic

782
00:46:14,800 --> 00:46:17,040
way

783
00:46:23,920 --> 00:46:25,599
third

784
00:46:25,599 --> 00:46:27,760
if the ecx

785
00:46:27,760 --> 00:46:30,400
value here is not the input of our

786
00:46:30,400 --> 00:46:33,440
intended purpose

787
00:46:34,319 --> 00:46:36,800
it will be the run

788
00:46:36,800 --> 00:46:38,160
value

789
00:46:38,160 --> 00:46:43,000
and there will be no payload running

790
00:46:45,200 --> 00:46:47,520
we can see the important role of

791
00:46:47,520 --> 00:46:51,480
multitasking here

792
00:46:57,200 --> 00:47:00,640
and showing on the right

793
00:47:00,640 --> 00:47:03,440
the input we mentioned here is a high

794
00:47:03,440 --> 00:47:07,040
dimensional space vector

795
00:47:07,440 --> 00:47:09,920
it is difficult to infer the real

796
00:47:09,920 --> 00:47:13,200
purpose simply by modifying some of the

797
00:47:13,200 --> 00:47:15,119
data

798
00:47:15,119 --> 00:47:19,520
due to the rebalance of ai model

799
00:47:20,319 --> 00:47:24,200
it is fault tolerance

800
00:47:27,359 --> 00:47:32,000
here is the conclusion for analysis

801
00:47:32,079 --> 00:47:33,359
first

802
00:47:33,359 --> 00:47:36,880
if the trigger environment is not met

803
00:47:36,880 --> 00:47:41,520
the ecx value cannot be attained

804
00:47:42,000 --> 00:47:43,200
second

805
00:47:43,200 --> 00:47:45,440
finding rules in mass of data is

806
00:47:45,440 --> 00:47:48,720
extremely difficult

807
00:47:49,280 --> 00:47:50,480
third

808
00:47:50,480 --> 00:47:53,839
the ai model is neutral and does not

809
00:47:53,839 --> 00:47:58,400
contain any intent called directory

810
00:47:58,720 --> 00:48:01,440
this is very different from previous

811
00:48:01,440 --> 00:48:04,000
designs

812
00:48:04,319 --> 00:48:07,599
and shown in the code below

813
00:48:07,599 --> 00:48:11,040
the execution process is clear

814
00:48:11,040 --> 00:48:13,839
but the details are not

815
00:48:13,839 --> 00:48:18,200
it's hard to go inside

816
00:48:22,480 --> 00:48:26,559
the talk illustrated here is over

817
00:48:26,559 --> 00:48:30,480
let's summarize this speech

818
00:48:33,760 --> 00:48:36,480
we propose a binary called intention

819
00:48:36,480 --> 00:48:39,280
hiding framework based on deep sequence

820
00:48:39,280 --> 00:48:42,559
generation network

821
00:48:43,359 --> 00:48:45,839
we conduct an experiment to hide the

822
00:48:45,839 --> 00:48:48,559
message box and calculator to avoid

823
00:48:48,559 --> 00:48:50,800
being discovered in the debugging

824
00:48:50,800 --> 00:48:53,280
environment

825
00:48:55,760 --> 00:48:58,559
our experiment confirmed that due to the

826
00:48:58,559 --> 00:49:01,640
powerful distinguishing ability and

827
00:49:01,640 --> 00:49:04,480
uninterpretability of the ai

828
00:49:04,480 --> 00:49:07,440
it gradually increases the difficulty

829
00:49:07,440 --> 00:49:12,000
analysis for reverse engineers

830
00:49:13,119 --> 00:49:16,480
the combination of ai and security will

831
00:49:16,480 --> 00:49:19,040
magnify the offensive and defensive

832
00:49:19,040 --> 00:49:23,359
situation in cyber security

833
00:49:26,880 --> 00:49:29,200
here are some materials that may help

834
00:49:29,200 --> 00:49:31,920
you understand the technical participles

835
00:49:31,920 --> 00:49:33,760
and details

836
00:49:33,760 --> 00:49:37,200
such as fdeep crn network

837
00:49:37,200 --> 00:49:40,000
encoder decoder model

838
00:49:40,000 --> 00:49:43,359
and auto encoders

839
00:49:43,359 --> 00:49:46,079
if you are interested

840
00:49:46,079 --> 00:49:50,000
you can continue to read them

841
00:49:54,480 --> 00:49:56,880
my talk is over now

842
00:49:56,880 --> 00:50:00,319
thank you very much for watching

843
00:50:00,319 --> 00:50:02,720
if you have any questions

844
00:50:02,720 --> 00:50:05,200
you can contact me and g phone with

845
00:50:05,200 --> 00:50:06,880
email

846
00:50:06,880 --> 00:50:11,280
i'll continue on the discord channel

847
00:50:11,280 --> 00:50:13,839
thanks

