1
00:00:08,960 --> 00:00:11,440
thank you and hello everyone

2
00:00:11,440 --> 00:00:13,920
today me and bill benjamin will talk

3
00:00:13,920 --> 00:00:16,079
about azure active directory and some

4
00:00:16,079 --> 00:00:18,160
attack scenarios abusing it but before

5
00:00:18,160 --> 00:00:20,400
we start who are we

6
00:00:20,400 --> 00:00:22,960
so my name is turo lenitzke i'm the head

7
00:00:22,960 --> 00:00:25,840
of research at xm cyber and with me we

8
00:00:25,840 --> 00:00:27,599
have bill bernheim which is a senior

9
00:00:27,599 --> 00:00:30,240
security researcher in the team we have

10
00:00:30,240 --> 00:00:32,000
a lot of experience in penetration

11
00:00:32,000 --> 00:00:33,840
testing great teaming and in the

12
00:00:33,840 --> 00:00:35,680
research era

13
00:00:35,680 --> 00:00:37,440
when we were young

14
00:00:37,440 --> 00:00:39,120
bill ben haim and i

15
00:00:39,120 --> 00:00:40,960
have been practicing together in judo

16
00:00:40,960 --> 00:00:42,719
and represented

17
00:00:42,719 --> 00:00:44,640
the israeli national team in judo and

18
00:00:44,640 --> 00:00:47,360
they used to beat me actually

19
00:00:47,360 --> 00:00:49,680
these days we do a lot of bug bounties

20
00:00:49,680 --> 00:00:51,600
and we actually really love it

21
00:00:51,600 --> 00:00:53,840
so let's begin

22
00:00:53,840 --> 00:00:55,840
our agenda for today starts with some

23
00:00:55,840 --> 00:00:58,320
azure fundamentals because before we

24
00:00:58,320 --> 00:01:00,160
understand how to attack azure we need

25
00:01:00,160 --> 00:01:02,399
to understand some theory about how it

26
00:01:02,399 --> 00:01:03,520
works

27
00:01:03,520 --> 00:01:05,438
we will talk about some resource manager

28
00:01:05,438 --> 00:01:06,799
fundamentals

29
00:01:06,799 --> 00:01:08,479
and then we'll continue to azure active

30
00:01:08,479 --> 00:01:10,560
directory fundamentals

31
00:01:10,560 --> 00:01:12,880
we will then understand the relationship

32
00:01:12,880 --> 00:01:16,159
between them and how in the point of

33
00:01:16,159 --> 00:01:17,920
view of the attacker we can gain the

34
00:01:17,920 --> 00:01:20,159
initial foothold

35
00:01:20,159 --> 00:01:21,759
then bill will show you some attack

36
00:01:21,759 --> 00:01:23,840
scenarios in the azure environment

37
00:01:23,840 --> 00:01:25,040
itself

38
00:01:25,040 --> 00:01:27,920
and we will continue with best practices

39
00:01:27,920 --> 00:01:30,320
in order to secure the environment

40
00:01:30,320 --> 00:01:32,560
we will finish with xm goat which is a

41
00:01:32,560 --> 00:01:34,400
new open source tool we are releasing

42
00:01:34,400 --> 00:01:36,720
today and i will talk further about it

43
00:01:36,720 --> 00:01:38,079
during the session

44
00:01:38,079 --> 00:01:40,560
so let's begin

45
00:01:40,560 --> 00:01:43,040
as everyone probably knows azure provide

46
00:01:43,040 --> 00:01:45,360
many infrastructure services

47
00:01:45,360 --> 00:01:48,320
let's better understand them

48
00:01:48,320 --> 00:01:50,720
the resource manager is the service that

49
00:01:50,720 --> 00:01:52,960
manage all the resources within the

50
00:01:52,960 --> 00:01:54,479
azure environment

51
00:01:54,479 --> 00:01:57,040
and actually the resource manager

52
00:01:57,040 --> 00:02:00,799
provides four different levels of scopes

53
00:02:00,799 --> 00:02:03,280
let's better understand them

54
00:02:03,280 --> 00:02:04,560
the first scope

55
00:02:04,560 --> 00:02:06,880
is called the resources scope

56
00:02:06,880 --> 00:02:08,800
and probably as the name suggests it

57
00:02:08,800 --> 00:02:10,720
represents a resource that have been

58
00:02:10,720 --> 00:02:13,599
created within the environment itself

59
00:02:13,599 --> 00:02:15,440
we have many types of resources with

60
00:02:15,440 --> 00:02:17,920
virtual machines storage accounts

61
00:02:17,920 --> 00:02:19,850
databases and many more

62
00:02:19,850 --> 00:02:21,520
[Music]

63
00:02:21,520 --> 00:02:24,640
the next layer is the resource group

64
00:02:24,640 --> 00:02:26,879
and the resource group is a container of

65
00:02:26,879 --> 00:02:28,959
different resources

66
00:02:28,959 --> 00:02:30,959
whenever we create a new resource we

67
00:02:30,959 --> 00:02:33,440
must define which resource group will

68
00:02:33,440 --> 00:02:36,680
hold it

69
00:02:37,120 --> 00:02:39,280
next we have subscriptions

70
00:02:39,280 --> 00:02:41,280
let's see how microsoft defines

71
00:02:41,280 --> 00:02:42,959
a subscription

72
00:02:42,959 --> 00:02:45,280
a subscription is an agreement with

73
00:02:45,280 --> 00:02:48,000
microsoft to use one or more microsoft

74
00:02:48,000 --> 00:02:50,239
cloud platforms or services for

75
00:02:50,239 --> 00:02:52,640
recharges secure based on either a per

76
00:02:52,640 --> 00:02:55,440
user license fee or on cloud-based

77
00:02:55,440 --> 00:02:56,959
resource consumption

78
00:02:56,959 --> 00:02:58,879
so what does it actually means

79
00:02:58,879 --> 00:03:00,640
when we are going to get the bills for

80
00:03:00,640 --> 00:03:02,959
the resources that we have been created

81
00:03:02,959 --> 00:03:04,480
in the environment itself

82
00:03:04,480 --> 00:03:08,319
is going to be related per subscription

83
00:03:08,319 --> 00:03:11,280
the last layer is the management group

84
00:03:11,280 --> 00:03:13,519
and in general a management group is

85
00:03:13,519 --> 00:03:16,319
just another layer in the software layer

86
00:03:16,319 --> 00:03:18,959
of the resource manager usually we

87
00:03:18,959 --> 00:03:21,200
create different management groups

88
00:03:21,200 --> 00:03:22,800
in order to manage

89
00:03:22,800 --> 00:03:24,879
the multiple subscriptions or other

90
00:03:24,879 --> 00:03:26,959
management groups

91
00:03:26,959 --> 00:03:29,519
by default when we create a new azure

92
00:03:29,519 --> 00:03:32,319
active directory tenant behind the scene

93
00:03:32,319 --> 00:03:33,599
the default

94
00:03:33,599 --> 00:03:35,599
the route management group is created by

95
00:03:35,599 --> 00:03:38,000
default

96
00:03:38,000 --> 00:03:40,000
perfect let's see an example of

97
00:03:40,000 --> 00:03:41,440
architecture

98
00:03:41,440 --> 00:03:43,760
in this example we have the corporate id

99
00:03:43,760 --> 00:03:45,920
and we can see that the corporate id

100
00:03:45,920 --> 00:03:47,760
have three different environments the

101
00:03:47,760 --> 00:03:49,760
production environment the development

102
00:03:49,760 --> 00:03:52,560
environment and the qa environment

103
00:03:52,560 --> 00:03:54,959
each one of them is being represented as

104
00:03:54,959 --> 00:03:55,890
a management group

105
00:03:55,890 --> 00:03:57,280
[Music]

106
00:03:57,280 --> 00:03:59,599
next we have some sub environments each

107
00:03:59,599 --> 00:04:02,159
one of them is being represented as a

108
00:04:02,159 --> 00:04:03,680
subscription

109
00:04:03,680 --> 00:04:05,840
and last for each environment we have

110
00:04:05,840 --> 00:04:07,439
different applications

111
00:04:07,439 --> 00:04:10,000
each application is being represented as

112
00:04:10,000 --> 00:04:12,319
a resource group and all the resources

113
00:04:12,319 --> 00:04:14,799
that we are creating in each resource

114
00:04:14,799 --> 00:04:17,390
group is relevant for that application

115
00:04:17,390 --> 00:04:19,120
[Music]

116
00:04:19,120 --> 00:04:20,720
perfect so we finished with the

117
00:04:20,720 --> 00:04:22,960
different layers let's better understand

118
00:04:22,960 --> 00:04:24,880
the permission model related to the

119
00:04:24,880 --> 00:04:27,040
resource manager itself

120
00:04:27,040 --> 00:04:29,199
and when we talk about the permission

121
00:04:29,199 --> 00:04:30,800
model in azure

122
00:04:30,800 --> 00:04:33,199
we have three different types of objects

123
00:04:33,199 --> 00:04:34,880
we have the scope object the role

124
00:04:34,880 --> 00:04:37,280
definition object and a real assignment

125
00:04:37,280 --> 00:04:38,240
object

126
00:04:38,240 --> 00:04:41,280
let's better understand them

127
00:04:41,280 --> 00:04:42,880
role definition

128
00:04:42,880 --> 00:04:44,880
is a set of allowed and not allowed

129
00:04:44,880 --> 00:04:46,240
permissions

130
00:04:46,240 --> 00:04:48,240
we have two different types of rule

131
00:04:48,240 --> 00:04:50,479
definitions we have built-in definitions

132
00:04:50,479 --> 00:04:52,800
which are being created and managed by

133
00:04:52,800 --> 00:04:54,320
azure itself

134
00:04:54,320 --> 00:04:56,639
and we have custom definitions which is

135
00:04:56,639 --> 00:04:57,759
created

136
00:04:57,759 --> 00:05:00,320
by us and managed by us

137
00:05:00,320 --> 00:05:03,280
let's see the example in this example

138
00:05:03,280 --> 00:05:05,440
we have the pre-built role definition

139
00:05:05,440 --> 00:05:07,680
with the name of contributor

140
00:05:07,680 --> 00:05:10,240
we can see in the action sections that

141
00:05:10,240 --> 00:05:12,479
we have a wildcard which means that

142
00:05:12,479 --> 00:05:14,160
inside this definition all the

143
00:05:14,160 --> 00:05:16,800
permissions are allowed

144
00:05:16,800 --> 00:05:19,120
in the not action sections

145
00:05:19,120 --> 00:05:21,280
we see three different permissions

146
00:05:21,280 --> 00:05:23,520
related to authorizations

147
00:05:23,520 --> 00:05:26,479
so when we take the the actions and the

148
00:05:26,479 --> 00:05:29,440
not actions together it means that this

149
00:05:29,440 --> 00:05:31,759
role definition give

150
00:05:31,759 --> 00:05:33,840
the user that assigned to it all the

151
00:05:33,840 --> 00:05:37,360
permissions except those three

152
00:05:37,360 --> 00:05:40,160
in addition we have the assignable scope

153
00:05:40,160 --> 00:05:42,720
and we can see that we can assign this

154
00:05:42,720 --> 00:05:44,720
role definition on any scope that we

155
00:05:44,720 --> 00:05:46,639
want and we will better understand it

156
00:05:46,639 --> 00:05:47,759
now

157
00:05:47,759 --> 00:05:49,680
so what are the scopes

158
00:05:49,680 --> 00:05:51,520
if you remember we talked about the

159
00:05:51,520 --> 00:05:53,520
different layers within the resource

160
00:05:53,520 --> 00:05:54,560
manager

161
00:05:54,560 --> 00:05:57,039
so each one of those layers represents a

162
00:05:57,039 --> 00:05:58,639
different scope

163
00:05:58,639 --> 00:06:01,199
and actually access is inherited in a

164
00:06:01,199 --> 00:06:03,280
parent-child relationship

165
00:06:03,280 --> 00:06:05,199
so when we assign permission on the

166
00:06:05,199 --> 00:06:07,440
management group it's going to propagate

167
00:06:07,440 --> 00:06:09,440
all down the way to the subscriptions

168
00:06:09,440 --> 00:06:10,800
resource groups and finally the

169
00:06:10,800 --> 00:06:13,680
resources that are within that

170
00:06:13,680 --> 00:06:15,840
scope

171
00:06:15,840 --> 00:06:17,919
the last object and the most important

172
00:06:17,919 --> 00:06:18,800
one

173
00:06:18,800 --> 00:06:20,880
is called a role assignment

174
00:06:20,880 --> 00:06:23,440
and let's see how microsoft defines it

175
00:06:23,440 --> 00:06:26,000
a role assignment is the process of

176
00:06:26,000 --> 00:06:28,800
attaching a role definition to a user

177
00:06:28,800 --> 00:06:31,360
group service principle or managed

178
00:06:31,360 --> 00:06:34,160
identity at a particular scope for the

179
00:06:34,160 --> 00:06:36,720
purpose of granting access

180
00:06:36,720 --> 00:06:39,039
and as they define it this is what it

181
00:06:39,039 --> 00:06:41,440
represents it ties all the dots together

182
00:06:41,440 --> 00:06:43,199
and assign the permission to specific

183
00:06:43,199 --> 00:06:45,440
users on a specific scope

184
00:06:45,440 --> 00:06:47,360
let's see an example

185
00:06:47,360 --> 00:06:48,800
in this example we have a role

186
00:06:48,800 --> 00:06:50,160
assignment

187
00:06:50,160 --> 00:06:52,080
this real assignment is going to be

188
00:06:52,080 --> 00:06:54,639
applied to the marketing group

189
00:06:54,639 --> 00:06:55,440
and

190
00:06:55,440 --> 00:06:57,120
for the marketing group we're going to

191
00:06:57,120 --> 00:07:00,000
assign the contributor role definition

192
00:07:00,000 --> 00:07:01,759
and it's going to be on the former sales

193
00:07:01,759 --> 00:07:03,039
resource group

194
00:07:03,039 --> 00:07:05,919
so what does it mean that every member

195
00:07:05,919 --> 00:07:08,080
inside the marketing group going to

196
00:07:08,080 --> 00:07:10,319
receive the contributor roles role

197
00:07:10,319 --> 00:07:11,680
definition

198
00:07:11,680 --> 00:07:13,840
on the former sales resource group and

199
00:07:13,840 --> 00:07:16,240
all the resources that have been created

200
00:07:16,240 --> 00:07:17,820
within that resource group

201
00:07:17,820 --> 00:07:19,360
[Music]

202
00:07:19,360 --> 00:07:21,599
perfect so we finished with everything

203
00:07:21,599 --> 00:07:24,400
that is related to the infrastructure

204
00:07:24,400 --> 00:07:26,080
let's talk about some azure active

205
00:07:26,080 --> 00:07:27,440
directory fundamentals

206
00:07:27,440 --> 00:07:28,639
[Music]

207
00:07:28,639 --> 00:07:30,880
and actually if we will try to read on

208
00:07:30,880 --> 00:07:32,160
the web

209
00:07:32,160 --> 00:07:33,919
about some documentation provided by

210
00:07:33,919 --> 00:07:36,240
microsoft we will see a lot of times a

211
00:07:36,240 --> 00:07:38,639
lot of references to principles

212
00:07:38,639 --> 00:07:40,479
so let's understand what types of

213
00:07:40,479 --> 00:07:43,199
principles we have inside azure

214
00:07:43,199 --> 00:07:45,360
the first one and the most common one is

215
00:07:45,360 --> 00:07:48,319
users and usually users supposed to

216
00:07:48,319 --> 00:07:50,319
represent a human being which is going

217
00:07:50,319 --> 00:07:52,560
to use the tenant itself

218
00:07:52,560 --> 00:07:55,199
we have different types of principles

219
00:07:55,199 --> 00:07:58,560
we have cloud or synced users cloud

220
00:07:58,560 --> 00:08:00,960
users are users that have been created

221
00:08:00,960 --> 00:08:03,280
inside the tenant itself

222
00:08:03,280 --> 00:08:05,919
and synced users are users that have

223
00:08:05,919 --> 00:08:08,479
been synced from an on-prem environment

224
00:08:08,479 --> 00:08:10,080
to the cloud

225
00:08:10,080 --> 00:08:12,720
in addition we have member or guest

226
00:08:12,720 --> 00:08:14,400
which is pretty

227
00:08:14,400 --> 00:08:16,479
similar we have members that have been

228
00:08:16,479 --> 00:08:18,800
created in the tenant itself and we have

229
00:08:18,800 --> 00:08:22,639
guests we've been invited to the tenant

230
00:08:22,639 --> 00:08:24,960
the next principle is groups

231
00:08:24,960 --> 00:08:26,879
and probably as everyone know and the

232
00:08:26,879 --> 00:08:29,440
name suggests a group is just a set of

233
00:08:29,440 --> 00:08:30,800
members

234
00:08:30,800 --> 00:08:33,039
each group have the owners and their

235
00:08:33,039 --> 00:08:35,679
members and the owners of the group can

236
00:08:35,679 --> 00:08:37,120
actually

237
00:08:37,120 --> 00:08:39,039
manage and control everything related to

238
00:08:39,039 --> 00:08:41,120
the group they can change

239
00:08:41,120 --> 00:08:43,679
the membership of the group and so on

240
00:08:43,679 --> 00:08:45,440
in addition we have

241
00:08:45,440 --> 00:08:46,800
different types of groups we have

242
00:08:46,800 --> 00:08:49,519
assigned groups which means that a user

243
00:08:49,519 --> 00:08:52,160
need to manually assign members to the

244
00:08:52,160 --> 00:08:54,560
group and we have dynamic groups which

245
00:08:54,560 --> 00:08:55,680
means that

246
00:08:55,680 --> 00:08:57,120
a

247
00:08:57,120 --> 00:08:59,200
user is going to be related to a group

248
00:08:59,200 --> 00:09:02,880
based on a specific condition

249
00:09:02,880 --> 00:09:04,560
the next principle and the most

250
00:09:04,560 --> 00:09:07,200
confusing one is application and service

251
00:09:07,200 --> 00:09:08,880
principles

252
00:09:08,880 --> 00:09:11,680
applications or in microsoft terminology

253
00:09:11,680 --> 00:09:14,000
app registrations represent an

254
00:09:14,000 --> 00:09:15,600
application that have been created in

255
00:09:15,600 --> 00:09:16,800
the tenant

256
00:09:16,800 --> 00:09:19,200
we have two types of applications we

257
00:09:19,200 --> 00:09:21,279
have a single tenant application which

258
00:09:21,279 --> 00:09:23,360
means that the application can be used

259
00:09:23,360 --> 00:09:25,120
only in this tenant

260
00:09:25,120 --> 00:09:27,519
and we have multi-tenant application

261
00:09:27,519 --> 00:09:29,519
which means that the application can be

262
00:09:29,519 --> 00:09:32,640
shared across different tenants

263
00:09:32,640 --> 00:09:35,120
in addition whenever we create an

264
00:09:35,120 --> 00:09:38,000
application a single tenant application

265
00:09:38,000 --> 00:09:40,959
behind the scene a service principle is

266
00:09:40,959 --> 00:09:43,519
going to be created which represent that

267
00:09:43,519 --> 00:09:44,880
application

268
00:09:44,880 --> 00:09:46,480
when we create a multi-tenant

269
00:09:46,480 --> 00:09:48,000
application

270
00:09:48,000 --> 00:09:50,320
from tenant a and we want to share it to

271
00:09:50,320 --> 00:09:51,519
10 and b

272
00:09:51,519 --> 00:09:53,839
a service principle on tenant b is going

273
00:09:53,839 --> 00:09:56,000
to be created and it is going to

274
00:09:56,000 --> 00:09:57,839
represent that application

275
00:09:57,839 --> 00:10:00,720
and whenever we assign any resource

276
00:10:00,720 --> 00:10:03,519
manager permissions to applications we

277
00:10:03,519 --> 00:10:05,200
are going actually assigning the

278
00:10:05,200 --> 00:10:07,279
permission to the service principle that

279
00:10:07,279 --> 00:10:10,560
manage that application

280
00:10:10,640 --> 00:10:13,600
as i said application have permissions

281
00:10:13,600 --> 00:10:16,160
and we have two types of permissions

282
00:10:16,160 --> 00:10:18,000
we have delegated permissions which

283
00:10:18,000 --> 00:10:20,640
means the application required a signed

284
00:10:20,640 --> 00:10:23,360
in user through that application

285
00:10:23,360 --> 00:10:26,000
and we have application permissions

286
00:10:26,000 --> 00:10:30,640
which doesn't require a sign in user

287
00:10:30,640 --> 00:10:32,800
because applications have permission

288
00:10:32,800 --> 00:10:34,399
they need to gain access to different

289
00:10:34,399 --> 00:10:36,000
apis

290
00:10:36,000 --> 00:10:38,240
in order to authenticate we have two

291
00:10:38,240 --> 00:10:40,079
different types of

292
00:10:40,079 --> 00:10:42,480
passwords we have secrets which is

293
00:10:42,480 --> 00:10:44,560
similar to a password and we have

294
00:10:44,560 --> 00:10:46,720
certificates each one of them can be

295
00:10:46,720 --> 00:10:48,320
used in order to authenticate to

296
00:10:48,320 --> 00:10:52,800
different services provided by microsoft

297
00:10:53,360 --> 00:10:55,600
the last principle is called managed

298
00:10:55,600 --> 00:10:56,800
identity

299
00:10:56,800 --> 00:10:59,600
and actually behind the scene a managed

300
00:10:59,600 --> 00:11:02,000
identity is a service principle with a

301
00:11:02,000 --> 00:11:03,839
unique type

302
00:11:03,839 --> 00:11:06,399
when we want to give access between two

303
00:11:06,399 --> 00:11:08,720
different services within azure for

304
00:11:08,720 --> 00:11:11,360
example a virtual machine that would

305
00:11:11,360 --> 00:11:12,480
like to

306
00:11:12,480 --> 00:11:14,800
to ask a specific blob from a storage

307
00:11:14,800 --> 00:11:17,120
account we can do it we can't do it

308
00:11:17,120 --> 00:11:18,240
directly

309
00:11:18,240 --> 00:11:20,640
we must attach an identity to the

310
00:11:20,640 --> 00:11:22,000
virtual machine

311
00:11:22,000 --> 00:11:23,920
give the relevant permissions to the

312
00:11:23,920 --> 00:11:25,040
identity

313
00:11:25,040 --> 00:11:27,279
and then the virtual machine is going to

314
00:11:27,279 --> 00:11:29,200
use the identity to perform the

315
00:11:29,200 --> 00:11:32,560
operation on rb elf

316
00:11:32,640 --> 00:11:35,200
perfect so let's talk for a bit about

317
00:11:35,200 --> 00:11:37,120
the permission model within azure active

318
00:11:37,120 --> 00:11:38,240
directory

319
00:11:38,240 --> 00:11:41,040
and actually the permission model is

320
00:11:41,040 --> 00:11:42,399
really similar to the one in the

321
00:11:42,399 --> 00:11:43,760
resource manager

322
00:11:43,760 --> 00:11:46,240
we have role definitions and we have

323
00:11:46,240 --> 00:11:48,399
two types of definitions we have the

324
00:11:48,399 --> 00:11:50,959
pre-built definitions that again are

325
00:11:50,959 --> 00:11:53,600
being managed by microsoft themself

326
00:11:53,600 --> 00:11:55,279
in this example i mark the application

327
00:11:55,279 --> 00:11:57,920
administrator which is a pre-built role

328
00:11:57,920 --> 00:12:00,000
definition and we have customer

329
00:12:00,000 --> 00:12:02,880
definitions and as i speak they are not

330
00:12:02,880 --> 00:12:05,200
really mature so i won't continue to

331
00:12:05,200 --> 00:12:09,560
talk about them during this session

332
00:12:11,519 --> 00:12:13,120
perfect so we finished with all the

333
00:12:13,120 --> 00:12:14,560
fundamentals

334
00:12:14,560 --> 00:12:16,240
we can start talking about the

335
00:12:16,240 --> 00:12:18,000
relationship between them

336
00:12:18,000 --> 00:12:19,839
we can see in this example that the

337
00:12:19,839 --> 00:12:22,720
azure active directory tenant sits right

338
00:12:22,720 --> 00:12:24,880
above the route management group

339
00:12:24,880 --> 00:12:27,040
and just for recap the route management

340
00:12:27,040 --> 00:12:29,440
group is the default management group

341
00:12:29,440 --> 00:12:31,200
that is being created when we are

342
00:12:31,200 --> 00:12:33,440
creating a new tenant

343
00:12:33,440 --> 00:12:35,680
so whenever we assign permission to

344
00:12:35,680 --> 00:12:38,320
principles within the resource manager

345
00:12:38,320 --> 00:12:39,839
we are sending

346
00:12:39,839 --> 00:12:42,000
permissions to the principles that we

347
00:12:42,000 --> 00:12:43,600
are creating in the azure active

348
00:12:43,600 --> 00:12:47,200
directory tenant itself

349
00:12:48,000 --> 00:12:50,560
last year sean metcalf showed a nice

350
00:12:50,560 --> 00:12:53,680
attack vector which abuses an elevation

351
00:12:53,680 --> 00:12:57,040
feature provided by microsoft so if we

352
00:12:57,040 --> 00:13:00,399
compromise a global administrator user

353
00:13:00,399 --> 00:13:02,800
we can use this feature which behind the

354
00:13:02,800 --> 00:13:05,040
scene going to create a new role

355
00:13:05,040 --> 00:13:07,760
assignment on the root management group

356
00:13:07,760 --> 00:13:10,320
and give for the same user the user

357
00:13:10,320 --> 00:13:13,279
access administrator rule definition

358
00:13:13,279 --> 00:13:16,320
and using this role we can modify

359
00:13:16,320 --> 00:13:18,399
any role assignment that we would like

360
00:13:18,399 --> 00:13:20,079
and because it's on the root management

361
00:13:20,079 --> 00:13:22,399
group we can do it on any scope that we

362
00:13:22,399 --> 00:13:26,800
want so basically it means game over

363
00:13:27,040 --> 00:13:29,600
the next object is devices

364
00:13:29,600 --> 00:13:31,839
and device actually register a device

365
00:13:31,839 --> 00:13:34,000
that is being registered to the tenant

366
00:13:34,000 --> 00:13:35,200
itself

367
00:13:35,200 --> 00:13:37,519
we have three different types of devices

368
00:13:37,519 --> 00:13:40,000
we have an azure id registration device

369
00:13:40,000 --> 00:13:41,920
which means a device of a self employee

370
00:13:41,920 --> 00:13:43,680
or something like that

371
00:13:43,680 --> 00:13:45,839
we have azure 80 join device which

372
00:13:45,839 --> 00:13:47,920
represents a device that is joined to

373
00:13:47,920 --> 00:13:50,880
the azure active directory tenant

374
00:13:50,880 --> 00:13:54,480
and with hybrid azure adjoin device

375
00:13:54,480 --> 00:13:57,040
which represents a device that is joined

376
00:13:57,040 --> 00:13:58,880
both to the azure active directory

377
00:13:58,880 --> 00:13:59,920
tenant

378
00:13:59,920 --> 00:14:03,120
and to an on-prem domain

379
00:14:03,120 --> 00:14:04,320
in addition

380
00:14:04,320 --> 00:14:07,120
we have microsoft intune which is an mdm

381
00:14:07,120 --> 00:14:10,240
solution used to manage those devices

382
00:14:10,240 --> 00:14:13,199
last year spectrops showed a nice attack

383
00:14:13,199 --> 00:14:16,240
vector which abuses global administrator

384
00:14:16,240 --> 00:14:18,320
and intune administrator

385
00:14:18,320 --> 00:14:20,880
users and allow them to execute code

386
00:14:20,880 --> 00:14:22,880
from the cloud environment back to the

387
00:14:22,880 --> 00:14:25,199
devices that are being managed on the

388
00:14:25,199 --> 00:14:26,560
on-premise

389
00:14:26,560 --> 00:14:27,680
environment

390
00:14:27,680 --> 00:14:29,360
later on this talk

391
00:14:29,360 --> 00:14:31,360
bill will show you a similar attack

392
00:14:31,360 --> 00:14:33,120
vector which abuses

393
00:14:33,120 --> 00:14:35,120
a different

394
00:14:35,120 --> 00:14:37,830
with the use of a different technique

395
00:14:37,830 --> 00:14:39,440
[Music]

396
00:14:39,440 --> 00:14:40,399
perfect

397
00:14:40,399 --> 00:14:41,920
if you remember we talked in the

398
00:14:41,920 --> 00:14:43,920
beginning for a short time about ad

399
00:14:43,920 --> 00:14:46,560
connect so what it actually

400
00:14:46,560 --> 00:14:48,959
ad connect is a tool provided by

401
00:14:48,959 --> 00:14:51,600
microsoft that allow us to synchronize

402
00:14:51,600 --> 00:14:53,839
our own frame environment to the cloud

403
00:14:53,839 --> 00:14:56,560
for example it synchronize all the users

404
00:14:56,560 --> 00:14:58,480
and groups that we've been created in

405
00:14:58,480 --> 00:15:01,360
the on-premise domain to the cloud

406
00:15:01,360 --> 00:15:03,519
in addition it provides multiple

407
00:15:03,519 --> 00:15:04,560
features

408
00:15:04,560 --> 00:15:06,880
for example we can authenticate as those

409
00:15:06,880 --> 00:15:09,360
users to the tenant itself

410
00:15:09,360 --> 00:15:11,760
and actually there are three different

411
00:15:11,760 --> 00:15:14,160
types of authentication

412
00:15:14,160 --> 00:15:16,720
we have password asynchronization which

413
00:15:16,720 --> 00:15:18,800
means that the ashes of the password

414
00:15:18,800 --> 00:15:21,040
related to the on-prem users are being

415
00:15:21,040 --> 00:15:22,720
synced to the cloud

416
00:15:22,720 --> 00:15:24,880
we have pest authentication which means

417
00:15:24,880 --> 00:15:27,760
that whenever the on-prem user tries to

418
00:15:27,760 --> 00:15:29,600
authenticate to the tenant

419
00:15:29,600 --> 00:15:31,920
his credentials are going to be verified

420
00:15:31,920 --> 00:15:34,720
against the on-prem domain controller

421
00:15:34,720 --> 00:15:36,880
and we have federation integration

422
00:15:36,880 --> 00:15:38,800
which means that

423
00:15:38,800 --> 00:15:40,639
the authentication is going to be used

424
00:15:40,639 --> 00:15:41,760
with idfs

425
00:15:41,760 --> 00:15:43,519
[Music]

426
00:15:43,519 --> 00:15:46,000
perfect

427
00:15:53,600 --> 00:15:54,480
perfect

428
00:15:54,480 --> 00:15:56,160
so we talked a lot about different

429
00:15:56,160 --> 00:15:57,839
fundamentals both the azure active

430
00:15:57,839 --> 00:15:59,040
directory

431
00:15:59,040 --> 00:16:01,680
and the resource manager but

432
00:16:01,680 --> 00:16:03,279
one of the interesting question is how

433
00:16:03,279 --> 00:16:05,600
we can gain the initial footage and

434
00:16:05,600 --> 00:16:07,839
actually there are multiple ways achieve

435
00:16:07,839 --> 00:16:08,639
it

436
00:16:08,639 --> 00:16:10,880
we can use phishing brute force or even

437
00:16:10,880 --> 00:16:12,880
password spreading attacks in order to

438
00:16:12,880 --> 00:16:15,279
compromise a specific user

439
00:16:15,279 --> 00:16:16,480
in addition

440
00:16:16,480 --> 00:16:18,720
if we have been compromising a specific

441
00:16:18,720 --> 00:16:21,040
machine in the on-prem environment we

442
00:16:21,040 --> 00:16:23,199
can try to look on default paths or the

443
00:16:23,199 --> 00:16:25,600
certificate store for credentials

444
00:16:25,600 --> 00:16:27,040
related to users or different

445
00:16:27,040 --> 00:16:28,560
applications

446
00:16:28,560 --> 00:16:29,759
in addition

447
00:16:29,759 --> 00:16:32,320
we can abuse ad connect and we will see

448
00:16:32,320 --> 00:16:35,519
a demo about it just in a minute

449
00:16:35,519 --> 00:16:37,759
and we can abuse different sso features

450
00:16:37,759 --> 00:16:41,279
such as prt tokens or ad connect similar

451
00:16:41,279 --> 00:16:44,160
single sign-on

452
00:16:44,720 --> 00:16:48,320
so we have implemented

453
00:16:48,320 --> 00:16:50,800
we have implemented an attack which is

454
00:16:50,800 --> 00:16:52,160
going to exploit the pass-through

455
00:16:52,160 --> 00:16:54,800
authentication of ad connect and shown

456
00:16:54,800 --> 00:16:57,360
and showed by adam chester

457
00:16:57,360 --> 00:16:59,040
and during this attack we're going to

458
00:16:59,040 --> 00:17:01,920
perform a dll injection into the azure

459
00:17:01,920 --> 00:17:04,720
ad authentication agent service

460
00:17:04,720 --> 00:17:06,799
inside that the on-prem machine

461
00:17:06,799 --> 00:17:09,199
we're going to hook the look the logon

462
00:17:09,199 --> 00:17:12,079
user w win api using it a trampoline

463
00:17:12,079 --> 00:17:13,119
function

464
00:17:13,119 --> 00:17:16,160
and we will backdoor any user that will

465
00:17:16,160 --> 00:17:17,679
try to log in with the act password

466
00:17:17,679 --> 00:17:18,799
phrase

467
00:17:18,799 --> 00:17:21,439
in addition we're going to look to log

468
00:17:21,439 --> 00:17:24,000
every successful authentication request

469
00:17:24,000 --> 00:17:25,520
into a local file

470
00:17:25,520 --> 00:17:27,839
this might help us if a real user tries

471
00:17:27,839 --> 00:17:29,919
to authenticate to the tenant we can

472
00:17:29,919 --> 00:17:31,840
harvest his credentials in order to

473
00:17:31,840 --> 00:17:34,080
perform additional lateral movement in

474
00:17:34,080 --> 00:17:35,919
the on-prem environment

475
00:17:35,919 --> 00:17:37,100
so let's see it in action

476
00:17:37,100 --> 00:17:40,310
[Music]

477
00:17:42,240 --> 00:17:44,559
okay so this is a compromise on-prem

478
00:17:44,559 --> 00:17:45,600
machine

479
00:17:45,600 --> 00:17:47,360
and currently i'm going to show you the

480
00:17:47,360 --> 00:17:50,639
users in this tenant

481
00:17:51,200 --> 00:17:53,840
we can see many users and one of them is

482
00:17:53,840 --> 00:17:55,600
an on-prem user

483
00:17:55,600 --> 00:17:57,039
which currently we don't know his

484
00:17:57,039 --> 00:18:00,039
password

485
00:18:02,160 --> 00:18:03,200
next

486
00:18:03,200 --> 00:18:05,760
i'm going to show you the source code of

487
00:18:05,760 --> 00:18:09,280
the of the hooked function

488
00:18:09,280 --> 00:18:11,520
and we can see the trampoline itself the

489
00:18:11,520 --> 00:18:13,760
hooked function

490
00:18:13,760 --> 00:18:14,480
and

491
00:18:14,480 --> 00:18:16,960
a very interesting

492
00:18:16,960 --> 00:18:19,360
if statement that says

493
00:18:19,360 --> 00:18:22,240
if the user use the password act

494
00:18:22,240 --> 00:18:24,960
we're going to return true which means

495
00:18:24,960 --> 00:18:27,120
authenticating without even knowing his

496
00:18:27,120 --> 00:18:28,620
password

497
00:18:28,620 --> 00:18:31,679
[Music]

498
00:18:31,919 --> 00:18:34,799
in addition if a normal user wants to

499
00:18:34,799 --> 00:18:36,799
use the tenant itself we're going to

500
00:18:36,799 --> 00:18:39,280
forward the the same authentication to

501
00:18:39,280 --> 00:18:41,280
the domain controller in order to not

502
00:18:41,280 --> 00:18:44,960
interrupt the day-to-day business

503
00:18:45,200 --> 00:18:47,760
now i'm going to perform the injection

504
00:18:47,760 --> 00:18:49,840
into the process that is managing the

505
00:18:49,840 --> 00:18:55,000
authentication for the ad connect itself

506
00:18:57,840 --> 00:18:59,390
and we injected our dll

507
00:18:59,390 --> 00:19:02,499
[Music]

508
00:19:07,440 --> 00:19:08,240
now

509
00:19:08,240 --> 00:19:10,000
we are going to try to authenticate with

510
00:19:10,000 --> 00:19:12,799
the on-prem user which once again no one

511
00:19:12,799 --> 00:19:13,850
knows this password

512
00:19:13,850 --> 00:19:16,879
[Music]

513
00:19:18,799 --> 00:19:20,400
and if you remember our backdoor

514
00:19:20,400 --> 00:19:22,880
whenever we type the act password we are

515
00:19:22,880 --> 00:19:25,200
going to successfully authenticate

516
00:19:25,200 --> 00:19:26,340
so let's see it in action

517
00:19:26,340 --> 00:19:29,439
[Music]

518
00:19:36,000 --> 00:19:38,640
and bam were authenticated as the user

519
00:19:38,640 --> 00:19:40,960
without even knowing his password and we

520
00:19:40,960 --> 00:19:44,960
only compromised an on-prem machine

521
00:19:48,720 --> 00:19:50,400
perfect

522
00:19:50,400 --> 00:19:52,720
so thank you build the state zero is

523
00:19:52,720 --> 00:19:55,039
yours

524
00:19:56,200 --> 00:19:59,120
[Applause]

525
00:19:59,120 --> 00:20:01,919
thank you too for that great demo

526
00:20:01,919 --> 00:20:03,440
okay so

527
00:20:03,440 --> 00:20:06,000
before talking about any attack vectors

528
00:20:06,000 --> 00:20:08,240
we need to first understand the internal

529
00:20:08,240 --> 00:20:09,600
constants phase

530
00:20:09,600 --> 00:20:13,678
which will be crucial for the next steps

531
00:20:13,760 --> 00:20:15,679
for an attacker's perspective we want to

532
00:20:15,679 --> 00:20:18,080
gather as much information possible on

533
00:20:18,080 --> 00:20:20,960
both the resource manager and the azure

534
00:20:20,960 --> 00:20:22,400
id

535
00:20:22,400 --> 00:20:26,240
environment in order to gather and

536
00:20:26,240 --> 00:20:29,200
and search for potential vulnerabilities

537
00:20:29,200 --> 00:20:31,039
and misconfigurations

538
00:20:31,039 --> 00:20:33,600
in the current cloud setups

539
00:20:33,600 --> 00:20:34,960
we will enumerate the following

540
00:20:34,960 --> 00:20:37,039
principles groups

541
00:20:37,039 --> 00:20:38,080
users

542
00:20:38,080 --> 00:20:39,440
identities

543
00:20:39,440 --> 00:20:41,360
service principles and different

544
00:20:41,360 --> 00:20:43,600
resources

545
00:20:43,600 --> 00:20:47,280
let's take a deep dive on this

546
00:20:47,280 --> 00:20:50,080
first we're going to use the accli to

547
00:20:50,080 --> 00:20:51,840
enumerate the current outback

548
00:20:51,840 --> 00:20:54,400
permissions of the low privilege user

549
00:20:54,400 --> 00:20:55,919
user account

550
00:20:55,919 --> 00:20:58,720
and we discovered that that user has the

551
00:20:58,720 --> 00:21:03,799
reader permissions over the subscription

552
00:21:03,840 --> 00:21:06,400
next we're going to use the scli in

553
00:21:06,400 --> 00:21:08,080
order to find a group

554
00:21:08,080 --> 00:21:09,919
with owner permissions over the

555
00:21:09,919 --> 00:21:12,880
subscription and we can discover

556
00:21:12,880 --> 00:21:15,520
the resource manager administrator group

557
00:21:15,520 --> 00:21:17,520
as the subscription as the owner

558
00:21:17,520 --> 00:21:21,280
permission over the subscription

559
00:21:22,000 --> 00:21:25,520
so now let's understand how we can

560
00:21:25,520 --> 00:21:28,159
assess permissions and all definitions

561
00:21:28,159 --> 00:21:31,120
over azure active directory roles

562
00:21:31,120 --> 00:21:33,919
in this case we're using the uuid of a

563
00:21:33,919 --> 00:21:37,280
directory reader's role

564
00:21:37,280 --> 00:21:39,360
and in order to

565
00:21:39,360 --> 00:21:41,280
know all the members that have this

566
00:21:41,280 --> 00:21:43,840
specific role we added the slash members

567
00:21:43,840 --> 00:21:46,400
in the end of the rest api request

568
00:21:46,400 --> 00:21:48,240
and we can see that the low privileged

569
00:21:48,240 --> 00:21:52,400
user has this specific call

570
00:21:52,799 --> 00:21:54,880
and the last reconnaissance slide for

571
00:21:54,880 --> 00:21:56,640
today i promise you

572
00:21:56,640 --> 00:21:59,039
is the azure application registration

573
00:21:59,039 --> 00:22:02,240
graph apple's permissions

574
00:22:02,240 --> 00:22:04,559
we need to have the application id of

575
00:22:04,559 --> 00:22:07,440
the app that we want to enumerate

576
00:22:07,440 --> 00:22:09,440
and we can see two different crucial

577
00:22:09,440 --> 00:22:10,960
parameters in the request in the

578
00:22:10,960 --> 00:22:13,919
response first one is the resource app

579
00:22:13,919 --> 00:22:16,720
id the source provider which is in this

580
00:22:16,720 --> 00:22:18,240
case it's the microsoft graph

581
00:22:18,240 --> 00:22:20,000
application id

582
00:22:20,000 --> 00:22:22,480
this is where the the upload is taken

583
00:22:22,480 --> 00:22:23,520
from

584
00:22:23,520 --> 00:22:26,240
and above that we can see the id which

585
00:22:26,240 --> 00:22:29,200
is the actual group read write role

586
00:22:29,200 --> 00:22:31,520
id

587
00:22:32,559 --> 00:22:34,960
so today we're going to talk about three

588
00:22:34,960 --> 00:22:36,960
different attack vectors of quiver

589
00:22:36,960 --> 00:22:38,960
escalation or lateral movement

590
00:22:38,960 --> 00:22:40,480
techniques

591
00:22:40,480 --> 00:22:42,480
the first one the first scenario will be

592
00:22:42,480 --> 00:22:44,720
from azure active directory to the

593
00:22:44,720 --> 00:22:46,559
resource manager

594
00:22:46,559 --> 00:22:48,480
the second scenario will be from the

595
00:22:48,480 --> 00:22:50,720
resource manager back to azure active

596
00:22:50,720 --> 00:22:52,000
directory

597
00:22:52,000 --> 00:22:53,760
and the third and the last one for today

598
00:22:53,760 --> 00:22:56,320
will be form one on per machine

599
00:22:56,320 --> 00:22:58,640
back to azure active direct directory

600
00:22:58,640 --> 00:23:01,200
and go back to a different

601
00:23:01,200 --> 00:23:03,919
on-prem machine

602
00:23:05,440 --> 00:23:07,280
in the following demonstration i will be

603
00:23:07,280 --> 00:23:09,760
using different kind of tools i will use

604
00:23:09,760 --> 00:23:13,760
the accli az rest and the http proxy

605
00:23:13,760 --> 00:23:14,559
tool

606
00:23:14,559 --> 00:23:16,799
in order to demonstrate http requests

607
00:23:16,799 --> 00:23:18,400
that are being sent

608
00:23:18,400 --> 00:23:23,240
both to the management and the graph api

609
00:23:24,480 --> 00:23:26,400
before every attack scenario we will

610
00:23:26,400 --> 00:23:28,640
spend the necessary conditions in order

611
00:23:28,640 --> 00:23:31,200
to this attack to take place

612
00:23:31,200 --> 00:23:33,120
in this case we need three different

613
00:23:33,120 --> 00:23:36,480
principles as to explain again the first

614
00:23:36,480 --> 00:23:39,679
one is an azure 80 user account

615
00:23:39,679 --> 00:23:41,840
second will be an azure id application

616
00:23:41,840 --> 00:23:43,840
with one of the following graph apple

617
00:23:43,840 --> 00:23:45,279
permissions

618
00:23:45,279 --> 00:23:47,520
and lastly an azure edit group with

619
00:23:47,520 --> 00:23:49,600
elevated resource manager are back

620
00:23:49,600 --> 00:23:52,240
permissions

621
00:23:52,640 --> 00:23:54,640
let's start the attack

622
00:23:54,640 --> 00:23:55,600
so

623
00:23:55,600 --> 00:23:57,520
we are starting with an attacker that

624
00:23:57,520 --> 00:24:00,320
compromises a user account

625
00:24:00,320 --> 00:24:02,400
then starts the reconnaissance phase in

626
00:24:02,400 --> 00:24:04,400
order to better understand his current

627
00:24:04,400 --> 00:24:06,799
permissions and ownerships

628
00:24:06,799 --> 00:24:09,120
it then finds that this specific user

629
00:24:09,120 --> 00:24:11,360
account is an owner of a specific

630
00:24:11,360 --> 00:24:13,440
permission

631
00:24:13,440 --> 00:24:15,840
he then since he has the owner

632
00:24:15,840 --> 00:24:17,520
permissions he can now add an

633
00:24:17,520 --> 00:24:20,000
application secret to that password and

634
00:24:20,000 --> 00:24:23,520
authenticate on its behalf

635
00:24:23,679 --> 00:24:25,600
he then abuses the application

636
00:24:25,600 --> 00:24:28,720
permission in order to add himself to

637
00:24:28,720 --> 00:24:30,880
elevated group the elevated group of

638
00:24:30,880 --> 00:24:33,760
elevated permissions

639
00:24:33,760 --> 00:24:35,679
and since these permissions are

640
00:24:35,679 --> 00:24:38,000
inherited to that specific user it can

641
00:24:38,000 --> 00:24:41,679
now compromise all over the subscription

642
00:24:41,679 --> 00:24:44,240
meaning you can gain full

643
00:24:44,240 --> 00:24:46,400
full control over all the resources in

644
00:24:46,400 --> 00:24:48,640
that subscription

645
00:24:48,640 --> 00:24:51,679
let's see how it's done

646
00:24:52,400 --> 00:24:53,760
first

647
00:24:53,760 --> 00:24:55,520
the attacker needs to enumerate the

648
00:24:55,520 --> 00:24:57,679
owners of this specific application by

649
00:24:57,679 --> 00:24:59,360
using the app id of the application that

650
00:24:59,360 --> 00:25:01,679
he wants to enumerate and discovers that

651
00:25:01,679 --> 00:25:03,360
the compromised user account the low

652
00:25:03,360 --> 00:25:05,440
privileged user is the owner of that

653
00:25:05,440 --> 00:25:07,120
permission

654
00:25:07,120 --> 00:25:09,039
next

655
00:25:09,039 --> 00:25:12,320
he needs to list the current application

656
00:25:12,320 --> 00:25:14,799
permissions and discovers that this

657
00:25:14,799 --> 00:25:16,000
application

658
00:25:16,000 --> 00:25:19,200
as the group rewrite all permissions

659
00:25:19,200 --> 00:25:21,200
in order to better understand what this

660
00:25:21,200 --> 00:25:22,240
means

661
00:25:22,240 --> 00:25:24,559
it then took the apple id of this

662
00:25:24,559 --> 00:25:25,919
specific

663
00:25:25,919 --> 00:25:29,200
group reader at all

664
00:25:29,200 --> 00:25:31,360
and discovered that this

665
00:25:31,360 --> 00:25:32,799
allows them

666
00:25:32,799 --> 00:25:33,600
to

667
00:25:33,600 --> 00:25:35,679
update group properties and group

668
00:25:35,679 --> 00:25:37,760
memberships

669
00:25:37,760 --> 00:25:41,039
this is great for the attacker

670
00:25:41,039 --> 00:25:43,200
a compromised application with one of

671
00:25:43,200 --> 00:25:45,440
the following permissions will allow the

672
00:25:45,440 --> 00:25:49,360
attacker to add a member or a owner to

673
00:25:49,360 --> 00:25:52,559
any non-assignable azure ad group within

674
00:25:52,559 --> 00:25:56,039
their tenants

675
00:25:57,520 --> 00:26:00,400
that's great so the attacker then uses

676
00:26:00,400 --> 00:26:02,559
the ownership of the application

677
00:26:02,559 --> 00:26:06,400
to add a new application password

678
00:26:06,400 --> 00:26:08,720
and then uses the newly created

679
00:26:08,720 --> 00:26:11,679
credentials to authenticate on behalf of

680
00:26:11,679 --> 00:26:13,919
the service principle which is

681
00:26:13,919 --> 00:26:18,240
associated to that application

682
00:26:20,240 --> 00:26:22,320
great so now what

683
00:26:22,320 --> 00:26:24,559
the attacker needs to find an elevated

684
00:26:24,559 --> 00:26:28,000
group a group of elevated permissions

685
00:26:28,000 --> 00:26:31,360
so he wants the following hgcli query to

686
00:26:31,360 --> 00:26:33,200
search for a group with owner

687
00:26:33,200 --> 00:26:36,159
permissions over the subscription and he

688
00:26:36,159 --> 00:26:38,400
finds the resource manager administrator

689
00:26:38,400 --> 00:26:41,120
group as the owner permission

690
00:26:41,120 --> 00:26:42,880
on the subscription

691
00:26:42,880 --> 00:26:44,799
meaning this will be the objective of

692
00:26:44,799 --> 00:26:47,440
the attacker

693
00:26:48,799 --> 00:26:50,799
then the attacker enumerates the current

694
00:26:50,799 --> 00:26:52,720
owners of that specific group and

695
00:26:52,720 --> 00:26:55,279
discovers that only the admin resource

696
00:26:55,279 --> 00:26:56,320
account

697
00:26:56,320 --> 00:26:59,039
is the owner of that group

698
00:26:59,039 --> 00:27:01,279
okay

699
00:27:02,320 --> 00:27:05,039
the attacker then uses the group group

700
00:27:05,039 --> 00:27:07,679
id that he wants to add the owner to and

701
00:27:07,679 --> 00:27:11,520
the low privileged user account

702
00:27:11,840 --> 00:27:13,919
in order to add the raw previous user

703
00:27:13,919 --> 00:27:16,159
account user id in order to add this

704
00:27:16,159 --> 00:27:18,640
specific account to as an owner of that

705
00:27:18,640 --> 00:27:21,200
group

706
00:27:21,200 --> 00:27:23,679
he then verifies the specific group

707
00:27:23,679 --> 00:27:25,200
owners

708
00:27:25,200 --> 00:27:27,360
and discovers that it was successfully

709
00:27:27,360 --> 00:27:30,959
added as an owner of that group

710
00:27:32,080 --> 00:27:34,559
and since that group has the owner

711
00:27:34,559 --> 00:27:37,760
permissions on the subscription it

712
00:27:37,760 --> 00:27:40,080
automatically here inherits the

713
00:27:40,080 --> 00:27:41,279
permissions

714
00:27:41,279 --> 00:27:43,760
and can now compromise all the

715
00:27:43,760 --> 00:27:45,520
subscription and all the different

716
00:27:45,520 --> 00:27:49,720
resources in that subscription

717
00:27:50,559 --> 00:27:52,559
cool

718
00:27:52,559 --> 00:27:54,799
second attack scenario

719
00:27:54,799 --> 00:27:56,880
from the resource manager to azure

720
00:27:56,880 --> 00:27:59,520
active directory

721
00:27:59,520 --> 00:28:01,600
we are now starting with a comp with an

722
00:28:01,600 --> 00:28:03,360
attacker that compromises the user

723
00:28:03,360 --> 00:28:04,480
account

724
00:28:04,480 --> 00:28:06,559
it then starts to do a reconnaissance

725
00:28:06,559 --> 00:28:08,480
phase and discovers that that

726
00:28:08,480 --> 00:28:11,360
compromised account has permission over

727
00:28:11,360 --> 00:28:14,799
the azure function of service

728
00:28:14,799 --> 00:28:18,640
you can then update the function called

729
00:28:18,640 --> 00:28:21,360
and put a malicious code in it

730
00:28:21,360 --> 00:28:23,440
it then uses the malicious code in order

731
00:28:23,440 --> 00:28:24,720
to obtain

732
00:28:24,720 --> 00:28:27,440
the current access token which is

733
00:28:27,440 --> 00:28:28,640
uh

734
00:28:28,640 --> 00:28:30,640
with which are

735
00:28:30,640 --> 00:28:32,399
related to the managed identity this is

736
00:28:32,399 --> 00:28:34,320
attached to that function

737
00:28:34,320 --> 00:28:35,760
in this case it's the application

738
00:28:35,760 --> 00:28:38,159
administrator role

739
00:28:38,159 --> 00:28:39,360
since he has the application

740
00:28:39,360 --> 00:28:41,919
administrator it can add a password to

741
00:28:41,919 --> 00:28:44,240
any azure id application within the ad

742
00:28:44,240 --> 00:28:45,919
tenant

743
00:28:45,919 --> 00:28:48,000
it then recons on the application

744
00:28:48,000 --> 00:28:50,960
permissions and discovers that the

745
00:28:50,960 --> 00:28:52,880
the application has the

746
00:28:52,880 --> 00:28:55,279
specific drive

747
00:28:55,279 --> 00:28:57,520
permission onedrive permissions that

748
00:28:57,520 --> 00:29:00,720
will allow him to read and even write to

749
00:29:00,720 --> 00:29:03,600
every onedrive

750
00:29:03,600 --> 00:29:06,720
every onedrive id within the azure eddy

751
00:29:06,720 --> 00:29:09,039
tenant

752
00:29:10,320 --> 00:29:13,320
so

753
00:29:13,440 --> 00:29:15,760
for this scenario we need the following

754
00:29:15,760 --> 00:29:18,159
conditions first we need an azure id

755
00:29:18,159 --> 00:29:20,000
user with the following azure resource

756
00:29:20,000 --> 00:29:22,559
manager arbuck permissions

757
00:29:22,559 --> 00:29:24,559
then we need an azure function app

758
00:29:24,559 --> 00:29:26,399
application with an attach manager

759
00:29:26,399 --> 00:29:28,559
identity that doesn't be a application

760
00:29:28,559 --> 00:29:30,960
method or all

761
00:29:30,960 --> 00:29:33,520
and lastly for today and lastly we need

762
00:29:33,520 --> 00:29:35,600
the azure ready application with any of

763
00:29:35,600 --> 00:29:40,039
the following graph upholds permissions

764
00:29:40,559 --> 00:29:42,320
so

765
00:29:42,320 --> 00:29:44,000
the attacker compromises the user

766
00:29:44,000 --> 00:29:46,240
account in this case it's the function

767
00:29:46,240 --> 00:29:47,600
update user

768
00:29:47,600 --> 00:29:51,039
and the end list is current's permission

769
00:29:51,039 --> 00:29:53,520
it then discovers that this account has

770
00:29:53,520 --> 00:29:55,520
the custom world definition

771
00:29:55,520 --> 00:29:59,039
called update function up

772
00:29:59,440 --> 00:30:02,000
it then enumerates that update function

773
00:30:02,000 --> 00:30:04,080
up in order to discover its current

774
00:30:04,080 --> 00:30:05,200
permission

775
00:30:05,200 --> 00:30:07,039
and discovers that the permissions are

776
00:30:07,039 --> 00:30:11,039
related to the function of service

777
00:30:12,080 --> 00:30:13,279
so

778
00:30:13,279 --> 00:30:15,360
what is your function up

779
00:30:15,360 --> 00:30:17,840
basically azure function is a serverless

780
00:30:17,840 --> 00:30:20,240
solution that allows you to less write

781
00:30:20,240 --> 00:30:22,640
less code maintain less infrastructure

782
00:30:22,640 --> 00:30:24,320
and saves on costs

783
00:30:24,320 --> 00:30:28,320
basically it's a serverless solution

784
00:30:28,640 --> 00:30:30,399
let's give a brief overview about the

785
00:30:30,399 --> 00:30:34,399
azure function up architecture

786
00:30:35,039 --> 00:30:37,679
every function app has its own site it

787
00:30:37,679 --> 00:30:40,080
can and can also hold multiple sites

788
00:30:40,080 --> 00:30:42,640
which means a serverless website

789
00:30:42,640 --> 00:30:45,039
within every site there is the runtime

790
00:30:45,039 --> 00:30:46,960
stack

791
00:30:46,960 --> 00:30:50,000
which is the actual programming language

792
00:30:50,000 --> 00:30:55,840
it can hold java python node.js and more

793
00:30:55,840 --> 00:30:57,840
within every site you have the actual

794
00:30:57,840 --> 00:31:00,159
functions which run that code behind the

795
00:31:00,159 --> 00:31:02,480
scenes

796
00:31:02,720 --> 00:31:05,760
every site can can can work on both the

797
00:31:05,760 --> 00:31:09,919
operating systems windows and linux

798
00:31:11,120 --> 00:31:13,760
okay so the attacker

799
00:31:13,760 --> 00:31:16,880
needs to now find a potential uh

800
00:31:16,880 --> 00:31:18,080
function up

801
00:31:18,080 --> 00:31:20,240
within the subscription

802
00:31:20,240 --> 00:31:23,440
and discovers the function of xm

803
00:31:23,440 --> 00:31:25,760
site

804
00:31:26,559 --> 00:31:28,960
it then lists all the functions within

805
00:31:28,960 --> 00:31:32,159
the function of xm site and discover two

806
00:31:32,159 --> 00:31:34,720
crucial parameters

807
00:31:34,720 --> 00:31:37,600
the first one is the invoke url template

808
00:31:37,600 --> 00:31:40,880
which is the http api access of that

809
00:31:40,880 --> 00:31:42,960
functional

810
00:31:42,960 --> 00:31:46,159
secondly it needs the script href

811
00:31:46,159 --> 00:31:48,640
which is the path to the source code of

812
00:31:48,640 --> 00:31:51,360
that function

813
00:31:58,480 --> 00:32:00,399
it will need this specific

814
00:32:00,399 --> 00:32:04,000
information in later steps

815
00:32:04,960 --> 00:32:07,519
azure functions of offers three levels

816
00:32:07,519 --> 00:32:08,960
of authorization

817
00:32:08,960 --> 00:32:12,080
anonymous no key is required

818
00:32:12,080 --> 00:32:14,480
function the function up key or specific

819
00:32:14,480 --> 00:32:15,919
key is required

820
00:32:15,919 --> 00:32:19,279
and admin the master key is required

821
00:32:19,279 --> 00:32:22,000
the attacker then enumerates the current

822
00:32:22,000 --> 00:32:24,720
keys of this specific function up

823
00:32:24,720 --> 00:32:26,960
and discovers the master key

824
00:32:26,960 --> 00:32:29,760
the musketeer key also provides access

825
00:32:29,760 --> 00:32:32,480
to all functions within the function app

826
00:32:32,480 --> 00:32:35,039
and administrative access to the runtime

827
00:32:35,039 --> 00:32:37,200
rest api

828
00:32:37,200 --> 00:32:40,640
so ok what does it mean

829
00:32:40,960 --> 00:32:43,919
the attacker sends an http get request

830
00:32:43,919 --> 00:32:45,279
with the following with the obtained

831
00:32:45,279 --> 00:32:46,640
information

832
00:32:46,640 --> 00:32:49,279
first the x functions key header with

833
00:32:49,279 --> 00:32:51,120
the master key

834
00:32:51,120 --> 00:32:54,240
and secondly the path to the source code

835
00:32:54,240 --> 00:32:56,480
of that function which is the index.js

836
00:32:56,480 --> 00:32:57,919
file

837
00:32:57,919 --> 00:33:00,000
it then discovers the source code of the

838
00:33:00,000 --> 00:33:01,679
application

839
00:33:01,679 --> 00:33:04,240
but unfortunately it can't see any

840
00:33:04,240 --> 00:33:06,720
sensitive information within the code

841
00:33:06,720 --> 00:33:08,240
and it doesn't have any potential

842
00:33:08,240 --> 00:33:09,600
vulnerabilities

843
00:33:09,600 --> 00:33:12,960
that it can exploit

844
00:33:12,960 --> 00:33:14,880
so he needs to find a different way to

845
00:33:14,880 --> 00:33:17,519
bypass that

846
00:33:19,360 --> 00:33:22,559
he then uses a put http requests with

847
00:33:22,559 --> 00:33:25,039
the same content as before

848
00:33:25,039 --> 00:33:27,679
and adds in the body of the request

849
00:33:27,679 --> 00:33:30,880
the evil function

850
00:33:32,080 --> 00:33:34,559
it then checks again the current

851
00:33:34,559 --> 00:33:37,039
functions code as it did before and

852
00:33:37,039 --> 00:33:38,960
discovers

853
00:33:38,960 --> 00:33:41,279
that the evil function was successfully

854
00:33:41,279 --> 00:33:45,360
embedded within the function code

855
00:33:47,039 --> 00:33:50,480
so now what the attacker needs to find

856
00:33:50,480 --> 00:33:52,640
a way to enumerate the azure site's

857
00:33:52,640 --> 00:33:54,799
environment

858
00:33:54,799 --> 00:33:57,440
he uses the process global object in

859
00:33:57,440 --> 00:33:58,960
order to

860
00:33:58,960 --> 00:34:02,000
concatenate three different methods

861
00:34:02,000 --> 00:34:04,159
the process dot platform which will give

862
00:34:04,159 --> 00:34:05,360
him the

863
00:34:05,360 --> 00:34:07,919
operating system architecture which is

864
00:34:07,919 --> 00:34:09,918
windows 32-bit

865
00:34:09,918 --> 00:34:12,239
the node.js

866
00:34:12,239 --> 00:34:13,760
process title which is the current

867
00:34:13,760 --> 00:34:15,679
execution of the process

868
00:34:15,679 --> 00:34:16,879
and lastly

869
00:34:16,879 --> 00:34:17,639
the

870
00:34:17,639 --> 00:34:20,399
process.cwd which is the location of

871
00:34:20,399 --> 00:34:23,918
this specific execution

872
00:34:25,040 --> 00:34:26,800
that's great so we know it's a windows

873
00:34:26,800 --> 00:34:29,760
machine and you know how to exploit it

874
00:34:29,760 --> 00:34:31,599
in order to do that we can use the

875
00:34:31,599 --> 00:34:33,520
attacker can use two different node.js

876
00:34:33,520 --> 00:34:36,239
modules the file system module and the

877
00:34:36,239 --> 00:34:37,918
child process module

878
00:34:37,918 --> 00:34:40,159
those modules will

879
00:34:40,159 --> 00:34:42,480
allow him to execute

880
00:34:42,480 --> 00:34:44,320
read and write files within the

881
00:34:44,320 --> 00:34:47,879
operating system

882
00:34:50,320 --> 00:34:52,960
so the attacker executes the child

883
00:34:52,960 --> 00:34:55,440
process exec method

884
00:34:55,440 --> 00:34:58,640
and executes a script a python script

885
00:34:58,640 --> 00:35:01,680
and appends the data of the script to a

886
00:35:01,680 --> 00:35:03,440
separate text file

887
00:35:03,440 --> 00:35:06,160
test.txt

888
00:35:06,160 --> 00:35:08,880
it then uses the file system

889
00:35:08,880 --> 00:35:11,200
method the read file sync in order to

890
00:35:11,200 --> 00:35:13,760
create the content of that file

891
00:35:13,760 --> 00:35:16,640
and you can now access the access token

892
00:35:16,640 --> 00:35:18,960
of the manager identity

893
00:35:18,960 --> 00:35:21,040
which in this case is the application

894
00:35:21,040 --> 00:35:24,000
administrator all

895
00:35:25,839 --> 00:35:27,599
it then uses

896
00:35:27,599 --> 00:35:30,480
the application and mr all access token

897
00:35:30,480 --> 00:35:32,720
as the authorization editor in order to

898
00:35:32,720 --> 00:35:37,280
add a new secret to a vulnerable to a

899
00:35:37,280 --> 00:35:39,040
to that application

900
00:35:39,040 --> 00:35:43,240
as you can see in the server response

901
00:35:46,560 --> 00:35:49,839
okay great so it now enumerates the

902
00:35:49,839 --> 00:35:51,839
current onedrive application and

903
00:35:51,839 --> 00:35:53,680
discovers the following graph apple

904
00:35:53,680 --> 00:35:56,240
permissions

905
00:35:56,880 --> 00:35:58,880
a compromised application

906
00:35:58,880 --> 00:36:01,040
with the following permissions will

907
00:36:01,040 --> 00:36:02,640
allow the attacker

908
00:36:02,640 --> 00:36:06,480
to gain and discover every drive account

909
00:36:06,480 --> 00:36:08,320
and within every dive account you will

910
00:36:08,320 --> 00:36:11,520
be able to read every file and folder

911
00:36:11,520 --> 00:36:13,280
within the drive id

912
00:36:13,280 --> 00:36:17,200
and even modify those files

913
00:36:18,800 --> 00:36:21,040
microsoft cloud storage server onedrive

914
00:36:21,040 --> 00:36:23,599
is a microsoft cloud start service which

915
00:36:23,599 --> 00:36:27,040
allows users to upload files and access

916
00:36:27,040 --> 00:36:30,560
them from different devices

917
00:36:31,359 --> 00:36:33,760
for every drive account there is a

918
00:36:33,760 --> 00:36:35,839
unique drive id

919
00:36:35,839 --> 00:36:38,400
and for every file or folder within that

920
00:36:38,400 --> 00:36:43,359
drive account there's the drive items id

921
00:36:44,400 --> 00:36:47,920
let's start attacking onedrive

922
00:36:48,240 --> 00:36:49,599
first

923
00:36:49,599 --> 00:36:52,400
the attacker lists

924
00:36:52,400 --> 00:36:54,880
user account drives and discovers the

925
00:36:54,880 --> 00:36:57,920
following drive id

926
00:36:59,200 --> 00:37:02,000
it then uses the specific drive id in

927
00:37:02,000 --> 00:37:03,119
order to

928
00:37:03,119 --> 00:37:04,880
search for specific

929
00:37:04,880 --> 00:37:07,359
keys with sensitive information

930
00:37:07,359 --> 00:37:09,440
in this case he searched for

931
00:37:09,440 --> 00:37:13,440
files with the content keys in it

932
00:37:13,440 --> 00:37:15,720
it discovered the keys to the

933
00:37:15,720 --> 00:37:18,079
kingdom.txt file

934
00:37:18,079 --> 00:37:18,960
and

935
00:37:18,960 --> 00:37:22,320
that files drive item id

936
00:37:22,320 --> 00:37:25,680
okay so great what now

937
00:37:25,680 --> 00:37:27,359
the attacker then used the obtain

938
00:37:27,359 --> 00:37:30,800
information which is the user's drive id

939
00:37:30,800 --> 00:37:33,359
and the file drive item id

940
00:37:33,359 --> 00:37:36,400
and outputs the content of the file to

941
00:37:36,400 --> 00:37:38,560
his local drive

942
00:37:38,560 --> 00:37:39,920
he then

943
00:37:39,920 --> 00:37:41,920
exported the content of that file and

944
00:37:41,920 --> 00:37:43,599
discovered that

945
00:37:43,599 --> 00:37:45,599
the clear text password of a domain

946
00:37:45,599 --> 00:37:48,480
admin account

947
00:37:49,359 --> 00:37:51,440
great

948
00:37:51,440 --> 00:37:52,320
so

949
00:37:52,320 --> 00:37:54,800
the last attack scenario for today

950
00:37:54,800 --> 00:37:57,040
from one on-prem machine to another

951
00:37:57,040 --> 00:38:00,440
on-prem machine

952
00:38:08,640 --> 00:38:09,680
so

953
00:38:09,680 --> 00:38:11,520
the attacker compromised a windows

954
00:38:11,520 --> 00:38:13,920
machine

955
00:38:14,400 --> 00:38:17,040
and in this specific machine the victim

956
00:38:17,040 --> 00:38:19,920
regularly uses the azure cli in order to

957
00:38:19,920 --> 00:38:21,839
authenticate

958
00:38:21,839 --> 00:38:23,359
to azure

959
00:38:23,359 --> 00:38:24,480
he then

960
00:38:24,480 --> 00:38:26,720
harvests the access token of this

961
00:38:26,720 --> 00:38:29,359
specific user and discovers that

962
00:38:29,359 --> 00:38:32,000
specific user as the owner permission

963
00:38:32,000 --> 00:38:34,079
over an application as we discussed in

964
00:38:34,079 --> 00:38:36,960
the first scenario

965
00:38:36,960 --> 00:38:38,960
since he has the owner permission we can

966
00:38:38,960 --> 00:38:41,680
now add a new application password

967
00:38:41,680 --> 00:38:44,400
to that application

968
00:38:44,400 --> 00:38:45,599
and then

969
00:38:45,599 --> 00:38:48,000
use it to abuse the application

970
00:38:48,000 --> 00:38:50,320
permissions in this case it's the

971
00:38:50,320 --> 00:38:52,480
different permissions that are related

972
00:38:52,480 --> 00:38:55,200
to intune

973
00:38:58,560 --> 00:39:00,480
in this syntax scenario we will need the

974
00:39:00,480 --> 00:39:03,920
for the following conditions

975
00:39:04,079 --> 00:39:06,240
we will need an on-prem machine that is

976
00:39:06,240 --> 00:39:08,560
being used for azure authentication

977
00:39:08,560 --> 00:39:11,359
either by accli or azure powershell

978
00:39:11,359 --> 00:39:13,680
module

979
00:39:13,680 --> 00:39:16,079
we will need a user account with owner

980
00:39:16,079 --> 00:39:19,040
permission on the azure application

981
00:39:19,040 --> 00:39:21,680
and lastly an azure ad application with

982
00:39:21,680 --> 00:39:25,759
the following intune permissions

983
00:39:26,960 --> 00:39:30,000
so azure access tokens

984
00:39:30,000 --> 00:39:31,520
access tokens

985
00:39:31,520 --> 00:39:34,079
are used to call protected web api and

986
00:39:34,079 --> 00:39:35,760
to perform authentication and

987
00:39:35,760 --> 00:39:39,280
authorization on different environments

988
00:39:39,280 --> 00:39:41,440
the refresh token in this case

989
00:39:41,440 --> 00:39:43,920
use when the access token or the refresh

990
00:39:43,920 --> 00:39:45,920
token expires

991
00:39:45,920 --> 00:39:49,359
and the default expiration of access of

992
00:39:49,359 --> 00:39:51,040
this refresh token

993
00:39:51,040 --> 00:39:52,880
is 90 days

994
00:39:52,880 --> 00:39:54,720
and is longer than the access token

995
00:39:54,720 --> 00:39:57,720
itself

996
00:39:59,760 --> 00:40:00,800
so

997
00:40:00,800 --> 00:40:02,800
when the victim authenticates

998
00:40:02,800 --> 00:40:04,560
using azure cli

999
00:40:04,560 --> 00:40:08,880
to azure it a folder called dot azure is

1000
00:40:08,880 --> 00:40:11,680
created within the profiles

1001
00:40:11,680 --> 00:40:15,119
with the victim profiles directory

1002
00:40:15,119 --> 00:40:17,119
and the access token and the refresh

1003
00:40:17,119 --> 00:40:19,760
token are being saved within the access

1004
00:40:19,760 --> 00:40:23,440
tokens dot json file

1005
00:40:23,440 --> 00:40:25,839
great

1006
00:40:26,000 --> 00:40:28,400
this is the an example of a content of

1007
00:40:28,400 --> 00:40:30,319
the access token in the refresh token

1008
00:40:30,319 --> 00:40:33,359
that are saved within that file

1009
00:40:33,359 --> 00:40:34,880
in addition

1010
00:40:34,880 --> 00:40:37,040
when a user authenticates using a

1011
00:40:37,040 --> 00:40:38,720
service principle

1012
00:40:38,720 --> 00:40:40,160
and a secret

1013
00:40:40,160 --> 00:40:43,440
it will be also added to that file

1014
00:40:43,440 --> 00:40:46,319
in clear text

1015
00:40:49,760 --> 00:40:51,119
since the user

1016
00:40:51,119 --> 00:40:53,280
as the owner permissions as we talked

1017
00:40:53,280 --> 00:40:56,160
before he can now enable an application

1018
00:40:56,160 --> 00:40:58,160
password to a specific application that

1019
00:40:58,160 --> 00:41:00,560
he wants

1020
00:41:03,040 --> 00:41:05,040
then the attacker

1021
00:41:05,040 --> 00:41:06,640
enumerates the current application

1022
00:41:06,640 --> 00:41:08,720
permissions and discovers the following

1023
00:41:08,720 --> 00:41:12,000
graph apple permissions

1024
00:41:12,160 --> 00:41:14,319
a compromised application with one of

1025
00:41:14,319 --> 00:41:16,640
the following permissions will allow the

1026
00:41:16,640 --> 00:41:19,359
attacker to create a policy

1027
00:41:19,359 --> 00:41:22,079
and assign it to a group of devices

1028
00:41:22,079 --> 00:41:24,640
in this case we're going to abuse it and

1029
00:41:24,640 --> 00:41:26,880
to you and we will use it to execute

1030
00:41:26,880 --> 00:41:30,400
code on different devices

1031
00:41:32,079 --> 00:41:34,640
so first the attacker needs to enumerate

1032
00:41:34,640 --> 00:41:36,960
different devices within the azure edit

1033
00:41:36,960 --> 00:41:37,920
tenant

1034
00:41:37,920 --> 00:41:39,599
to better understand

1035
00:41:39,599 --> 00:41:41,280
and to adjust the payload of the

1036
00:41:41,280 --> 00:41:45,599
operating system that is going to attack

1037
00:41:45,599 --> 00:41:48,079
in this case he's going to choose the

1038
00:41:48,079 --> 00:41:50,160
windows machine will and this will be

1039
00:41:50,160 --> 00:41:54,078
the attacks attackers objective

1040
00:41:56,800 --> 00:41:58,800
it then uses

1041
00:41:58,800 --> 00:42:00,640
the following post request with the

1042
00:42:00,640 --> 00:42:03,680
script content which is base64 encoded

1043
00:42:03,680 --> 00:42:06,880
payload to create a user and to add it

1044
00:42:06,880 --> 00:42:09,119
to the local administrator group on the

1045
00:42:09,119 --> 00:42:12,000
victims machine

1046
00:42:12,720 --> 00:42:15,040
it then collects the script id from the

1047
00:42:15,040 --> 00:42:16,960
server response since you will need it

1048
00:42:16,960 --> 00:42:20,079
in the next steps

1049
00:42:22,240 --> 00:42:24,400
as you can see in the url and the body

1050
00:42:24,400 --> 00:42:26,400
of the request we are using the script

1051
00:42:26,400 --> 00:42:28,800
id from the last from the previous slide

1052
00:42:28,800 --> 00:42:31,760
and we assign it to a group of devices

1053
00:42:31,760 --> 00:42:34,800
in this case we have a special group

1054
00:42:34,800 --> 00:42:37,520
special group id which is basically all

1055
00:42:37,520 --> 00:42:41,359
the devices within the azure 80

1056
00:42:42,839 --> 00:42:45,839
tenants when the script executes on the

1057
00:42:45,839 --> 00:42:47,280
victim's machine

1058
00:42:47,280 --> 00:42:49,680
we can see that he creates a folder with

1059
00:42:49,680 --> 00:42:53,200
the script id content

1060
00:42:53,599 --> 00:42:54,880
in addition

1061
00:42:54,880 --> 00:42:57,680
he adds the result key

1062
00:42:57,680 --> 00:42:59,680
within that folder which is saying if

1063
00:42:59,680 --> 00:43:02,560
the if the commands were successfully

1064
00:43:02,560 --> 00:43:05,599
executed or not

1065
00:43:08,160 --> 00:43:10,160
since the attacker was able to

1066
00:43:10,160 --> 00:43:12,720
successfully execute that script it can

1067
00:43:12,720 --> 00:43:15,520
now authenticate to the windows

1068
00:43:15,520 --> 00:43:17,599
windows victim machine

1069
00:43:17,599 --> 00:43:20,880
as a as an elevated user

1070
00:43:20,880 --> 00:43:23,440
and can gain full control over that

1071
00:43:23,440 --> 00:43:26,440
machine

1072
00:43:27,040 --> 00:43:28,880
that's all for today regarding the

1073
00:43:28,880 --> 00:43:31,359
scenarios let's talk about best

1074
00:43:31,359 --> 00:43:34,000
practices

1075
00:43:34,319 --> 00:43:36,640
as security professionals we wanted to

1076
00:43:36,640 --> 00:43:39,440
be able to detect any acting intrusion

1077
00:43:39,440 --> 00:43:40,960
or attempts

1078
00:43:40,960 --> 00:43:43,440
in order to fi in order to

1079
00:43:43,440 --> 00:43:45,839
to better protect our clients cloud

1080
00:43:45,839 --> 00:43:48,400
environments

1081
00:43:48,880 --> 00:43:51,520
so in this case we can gather a couple

1082
00:43:51,520 --> 00:43:53,440
of logs

1083
00:43:53,440 --> 00:43:56,560
first log will be the activity logs

1084
00:43:56,560 --> 00:43:59,040
activity logs is referred to

1085
00:43:59,040 --> 00:44:01,119
any subscription level events for

1086
00:44:01,119 --> 00:44:02,160
example

1087
00:44:02,160 --> 00:44:06,160
if a machine was restarted or modified

1088
00:44:06,160 --> 00:44:08,319
and in addition we can use the azure

1089
00:44:08,319 --> 00:44:09,920
edit tenant logs

1090
00:44:09,920 --> 00:44:11,040
that can

1091
00:44:11,040 --> 00:44:14,000
give us information about

1092
00:44:14,000 --> 00:44:16,800
specific sign-in attempts

1093
00:44:16,800 --> 00:44:20,160
whether if it's a user an identity or

1094
00:44:20,160 --> 00:44:23,440
it's a service principle

1095
00:44:23,440 --> 00:44:26,240
in addition we have the network resource

1096
00:44:26,240 --> 00:44:29,040
dns and application hogs that can help

1097
00:44:29,040 --> 00:44:30,880
us to better detect those kind of

1098
00:44:30,880 --> 00:44:33,280
attacks

1099
00:44:34,160 --> 00:44:35,440
let's talk about the lease privilege

1100
00:44:35,440 --> 00:44:37,359
concept

1101
00:44:37,359 --> 00:44:39,760
there is previous concept refers to an

1102
00:44:39,760 --> 00:44:41,760
information security concept in which a

1103
00:44:41,760 --> 00:44:43,839
user is given the minimum levels of

1104
00:44:43,839 --> 00:44:46,560
access or permission needed to perform

1105
00:44:46,560 --> 00:44:50,119
its job functions

1106
00:44:50,880 --> 00:44:52,640
as sue said before in the beginning of

1107
00:44:52,640 --> 00:44:54,480
the lecture we can use the azure

1108
00:44:54,480 --> 00:44:56,800
resource manager arbuck permission in

1109
00:44:56,800 --> 00:44:58,560
order to enforce the lease privilege

1110
00:44:58,560 --> 00:45:00,560
concept

1111
00:45:00,560 --> 00:45:03,280
for example we can use custom walls and

1112
00:45:03,280 --> 00:45:06,160
not built-in rules and we can control

1113
00:45:06,160 --> 00:45:08,960
the specific diff definitions of actions

1114
00:45:08,960 --> 00:45:11,359
that a user will be able to do on a

1115
00:45:11,359 --> 00:45:14,319
specific resource

1116
00:45:14,480 --> 00:45:16,839
in addition we always meet

1117
00:45:16,839 --> 00:45:20,720
we we always want to use the whitelist

1118
00:45:20,720 --> 00:45:23,520
approach and not the blacklist approach

1119
00:45:23,520 --> 00:45:26,000
and the last thing is we can limit the

1120
00:45:26,000 --> 00:45:28,400
whole assignment scope instead of using

1121
00:45:28,400 --> 00:45:30,240
all the subscription we can use a

1122
00:45:30,240 --> 00:45:33,839
specific resource group for example

1123
00:45:35,359 --> 00:45:36,960
next we have the privilege identity

1124
00:45:36,960 --> 00:45:38,319
management

1125
00:45:38,319 --> 00:45:40,000
which is a service in azure active

1126
00:45:40,000 --> 00:45:42,480
directory that enables you to manage

1127
00:45:42,480 --> 00:45:44,880
control and monitor access to important

1128
00:45:44,880 --> 00:45:48,319
resources in your organization

1129
00:45:48,319 --> 00:45:50,400
for example it can provide just-in-time

1130
00:45:50,400 --> 00:45:53,040
privilege access to azure id and azuros

1131
00:45:53,040 --> 00:45:54,720
resources

1132
00:45:54,720 --> 00:45:57,599
it can assign time-bound access to

1133
00:45:57,599 --> 00:46:01,839
resources using start and end dates

1134
00:46:02,079 --> 00:46:04,000
it can require approval to activate

1135
00:46:04,000 --> 00:46:05,760
privilege roles

1136
00:46:05,760 --> 00:46:07,440
and you can enforce

1137
00:46:07,440 --> 00:46:11,839
a whole activation using mfa with it

1138
00:46:11,839 --> 00:46:15,200
in addition there are lots more

1139
00:46:15,200 --> 00:46:17,919
features in it

1140
00:46:19,520 --> 00:46:21,040
let's talk about administrative units

1141
00:46:21,040 --> 00:46:22,640
which is kind of different it's not

1142
00:46:22,640 --> 00:46:24,800
specifically to

1143
00:46:24,800 --> 00:46:26,319
security

1144
00:46:26,319 --> 00:46:28,319
it's a it's a unit an azure ready

1145
00:46:28,319 --> 00:46:30,319
resource that can can a container that

1146
00:46:30,319 --> 00:46:32,800
can be a container for other azure ready

1147
00:46:32,800 --> 00:46:34,160
resources

1148
00:46:34,160 --> 00:46:37,119
it can contain only users and groups

1149
00:46:37,119 --> 00:46:37,920
but

1150
00:46:37,920 --> 00:46:40,160
can use it you can use it to restrict

1151
00:46:40,160 --> 00:46:42,720
permission in a specific role to any

1152
00:46:42,720 --> 00:46:44,240
portion of your organization that you

1153
00:46:44,240 --> 00:46:45,520
define

1154
00:46:45,520 --> 00:46:48,480
let's see an example

1155
00:46:49,599 --> 00:46:52,160
by default an helpdesk administrator all

1156
00:46:52,160 --> 00:46:55,760
has the ability to reset every other ad

1157
00:46:55,760 --> 00:46:57,920
lds administrator users or

1158
00:46:57,920 --> 00:47:00,240
non-administrator users within the old

1159
00:47:00,240 --> 00:47:02,319
tenant

1160
00:47:02,319 --> 00:47:04,960
by using administrative units you can

1161
00:47:04,960 --> 00:47:07,839
use the specific role in order to

1162
00:47:07,839 --> 00:47:10,640
limit the scope of the of the people of

1163
00:47:10,640 --> 00:47:12,800
the user accounts that you can

1164
00:47:12,800 --> 00:47:15,920
reset their passwords

1165
00:47:17,440 --> 00:47:19,280
azure active directory identity

1166
00:47:19,280 --> 00:47:21,280
protection is a tool that allows the

1167
00:47:21,280 --> 00:47:23,200
organization to accomplish three key

1168
00:47:23,200 --> 00:47:25,680
tasks

1169
00:47:25,680 --> 00:47:27,920
first is to automate the detection and

1170
00:47:27,920 --> 00:47:32,319
remediation of specific identity risk

1171
00:47:32,400 --> 00:47:34,400
you can use it to investigate risk in

1172
00:47:34,400 --> 00:47:35,760
your data

1173
00:47:35,760 --> 00:47:38,559
investigate risk in your portal

1174
00:47:38,559 --> 00:47:41,440
and to export risk detection to your own

1175
00:47:41,440 --> 00:47:43,680
sim

1176
00:47:44,800 --> 00:47:46,640
and the last one for today regarding the

1177
00:47:46,640 --> 00:47:49,200
best practices i know it's boring but we

1178
00:47:49,200 --> 00:47:51,040
have to do it

1179
00:47:51,040 --> 00:47:53,760
is the conditional access policies

1180
00:47:53,760 --> 00:47:56,079
which there are other simplest

1181
00:47:56,079 --> 00:47:58,400
if and then statements

1182
00:47:58,400 --> 00:48:00,720
if a user wants to access a resource

1183
00:48:00,720 --> 00:48:03,119
then they must complete an action

1184
00:48:03,119 --> 00:48:05,760
for example if a payroll manager wants

1185
00:48:05,760 --> 00:48:08,880
to access the payroll application

1186
00:48:08,880 --> 00:48:10,960
she needs to uh

1187
00:48:10,960 --> 00:48:13,920
access to use the mfa in order to access

1188
00:48:13,920 --> 00:48:16,720
the the content

1189
00:48:16,720 --> 00:48:19,119
that said regarding the best mitigation

1190
00:48:19,119 --> 00:48:21,599
the best practices now two will explain

1191
00:48:21,599 --> 00:48:24,880
about the xm goals

1192
00:48:29,359 --> 00:48:31,040
thank you bill

1193
00:48:31,040 --> 00:48:33,760
today we are releasing xm goat which is

1194
00:48:33,760 --> 00:48:36,240
a very nice photo that you can use in

1195
00:48:36,240 --> 00:48:37,920
your twitter profiles

1196
00:48:37,920 --> 00:48:40,079
no i'm just kidding it's an open source

1197
00:48:40,079 --> 00:48:41,680
tool that consists of different

1198
00:48:41,680 --> 00:48:42,880
scenarios

1199
00:48:42,880 --> 00:48:45,040
being built with terraform

1200
00:48:45,040 --> 00:48:47,680
each scenario represents a different

1201
00:48:47,680 --> 00:48:50,079
attack vector that you can use in order

1202
00:48:50,079 --> 00:48:52,319
to learn how to exploit

1203
00:48:52,319 --> 00:48:53,359
different

1204
00:48:53,359 --> 00:48:55,119
misconfiguration in the azure

1205
00:48:55,119 --> 00:48:56,800
environment itself

1206
00:48:56,800 --> 00:48:59,680
currently we created three scenarios but

1207
00:48:59,680 --> 00:49:01,920
during the time we will continue to add

1208
00:49:01,920 --> 00:49:03,520
and with the help of the community we

1209
00:49:03,520 --> 00:49:06,240
can manage to have a large scenario

1210
00:49:06,240 --> 00:49:08,240
repository

1211
00:49:08,240 --> 00:49:11,040
let's see the scenarios

1212
00:49:11,040 --> 00:49:13,680
the first scenario

1213
00:49:13,680 --> 00:49:15,680
start the first scenario is named

1214
00:49:15,680 --> 00:49:17,359
compromise sensitive storage account

1215
00:49:17,359 --> 00:49:18,800
container

1216
00:49:18,800 --> 00:49:20,319
our bridge point

1217
00:49:20,319 --> 00:49:22,240
will be a specific user

1218
00:49:22,240 --> 00:49:24,400
we will start with him

1219
00:49:24,400 --> 00:49:26,880
when we will do the reconnaissance phase

1220
00:49:26,880 --> 00:49:29,520
we will see that the user have ownership

1221
00:49:29,520 --> 00:49:31,760
on a specific application

1222
00:49:31,760 --> 00:49:33,599
because of that it can reset the

1223
00:49:33,599 --> 00:49:35,599
password of that application as bill

1224
00:49:35,599 --> 00:49:38,000
showed you

1225
00:49:38,000 --> 00:49:38,800
then

1226
00:49:38,800 --> 00:49:41,359
we will understand that the application

1227
00:49:41,359 --> 00:49:44,000
have the permissions to execute commands

1228
00:49:44,000 --> 00:49:46,720
on virtual machines managed on the

1229
00:49:46,720 --> 00:49:49,520
resource manager

1230
00:49:50,160 --> 00:49:51,520
in addition

1231
00:49:51,520 --> 00:49:53,920
one of those virtual machines have an

1232
00:49:53,920 --> 00:49:56,400
attached identity which we can

1233
00:49:56,400 --> 00:50:00,000
request and and gain access to

1234
00:50:00,000 --> 00:50:02,800
the identity have the permissions to

1235
00:50:02,800 --> 00:50:04,720
read sensitive information from a

1236
00:50:04,720 --> 00:50:07,439
storage account

1237
00:50:08,880 --> 00:50:10,400
the next scenario

1238
00:50:10,400 --> 00:50:12,960
is compromise the subscription

1239
00:50:12,960 --> 00:50:15,119
our initial breach point

1240
00:50:15,119 --> 00:50:17,520
is a service account and our critical

1241
00:50:17,520 --> 00:50:19,760
asset our goal is to compromise all the

1242
00:50:19,760 --> 00:50:21,440
subscription

1243
00:50:21,440 --> 00:50:23,760
when we perform the reconnaissance phase

1244
00:50:23,760 --> 00:50:26,480
we see that this service principle

1245
00:50:26,480 --> 00:50:28,720
have permissions to read secrets from

1246
00:50:28,720 --> 00:50:30,640
the keyword

1247
00:50:30,640 --> 00:50:32,480
one of those secrets

1248
00:50:32,480 --> 00:50:35,920
is the credentials of a specific user

1249
00:50:35,920 --> 00:50:38,960
then we can authenticate as that user

1250
00:50:38,960 --> 00:50:41,359
and we identify that the user have the

1251
00:50:41,359 --> 00:50:42,559
permissions

1252
00:50:42,559 --> 00:50:44,880
to modify all assignments

1253
00:50:44,880 --> 00:50:46,319
because of that

1254
00:50:46,319 --> 00:50:47,280
he can

1255
00:50:47,280 --> 00:50:49,760
elevate his privileges with the owner or

1256
00:50:49,760 --> 00:50:50,960
definition

1257
00:50:50,960 --> 00:50:53,040
and by date compromising all the

1258
00:50:53,040 --> 00:50:55,839
subscription

1259
00:50:56,319 --> 00:50:58,400
the last scenario is compromising all

1260
00:50:58,400 --> 00:51:01,520
the tenant which is an account takeover

1261
00:51:01,520 --> 00:51:04,000
our critical asset is the old tenant

1262
00:51:04,000 --> 00:51:05,520
this is our goal

1263
00:51:05,520 --> 00:51:07,680
we start with a specific user

1264
00:51:07,680 --> 00:51:10,400
and when performing the recon phase

1265
00:51:10,400 --> 00:51:12,720
we see that the user have access to a

1266
00:51:12,720 --> 00:51:14,880
specific function up

1267
00:51:14,880 --> 00:51:17,839
and they also have the ability to update

1268
00:51:17,839 --> 00:51:20,720
the function of code

1269
00:51:20,720 --> 00:51:23,920
then we are going to accelerate

1270
00:51:23,920 --> 00:51:26,079
the attached identity

1271
00:51:26,079 --> 00:51:30,480
and abuse the permissions related to it

1272
00:51:30,800 --> 00:51:32,880
we see that the identity have an

1273
00:51:32,880 --> 00:51:35,440
application administrator or definition

1274
00:51:35,440 --> 00:51:37,839
inside azure active directory

1275
00:51:37,839 --> 00:51:40,319
and because of that we can reset the

1276
00:51:40,319 --> 00:51:42,480
password of old application in the

1277
00:51:42,480 --> 00:51:45,280
tenant itself

1278
00:51:45,520 --> 00:51:47,920
during the recon phase we identified a

1279
00:51:47,920 --> 00:51:50,319
specific service principle that have the

1280
00:51:50,319 --> 00:51:52,480
global administrator or definition

1281
00:51:52,480 --> 00:51:54,559
attached to it which means that if we

1282
00:51:54,559 --> 00:51:56,720
will reset the password for that service

1283
00:51:56,720 --> 00:51:58,880
principle we will take over all the

1284
00:51:58,880 --> 00:52:00,720
account

1285
00:52:00,720 --> 00:52:02,800
so now it's up to you to understand how

1286
00:52:02,800 --> 00:52:06,640
to exploit those misconfigurations

1287
00:52:06,640 --> 00:52:08,720
thank you very much if you have any

1288
00:52:08,720 --> 00:52:10,780
questions you can ask us

1289
00:52:10,780 --> 00:52:12,790
[Music]

1290
00:52:12,790 --> 00:52:16,219
[Applause]

