1
00:00:09,040 --> 00:00:11,440
hello greetings everyone

2
00:00:11,440 --> 00:00:14,960
so my name is zoltan balaj and i'm into

3
00:00:14,960 --> 00:00:17,680
offensive research mostly like i'm the

4
00:00:17,680 --> 00:00:20,160
developer of the zombie browser toolkit

5
00:00:20,160 --> 00:00:23,039
the hardware firewall bypass tool never

6
00:00:23,039 --> 00:00:26,080
analyzes sandbox tester tool

7
00:00:26,080 --> 00:00:28,720
i placed with some crappy iot devices in

8
00:00:28,720 --> 00:00:31,439
the past and my proof of concept remote

9
00:00:31,439 --> 00:00:33,920
code execution exploit code ended up

10
00:00:33,920 --> 00:00:37,200
running on 600 000 ip cameras i'm pretty

11
00:00:37,200 --> 00:00:39,280
proud about that because usually code i

12
00:00:39,280 --> 00:00:42,160
write only runs on my computer and this

13
00:00:42,160 --> 00:00:44,640
was a code compatible with six hundred

14
00:00:44,640 --> 00:00:47,200
thousand cameras

15
00:00:47,200 --> 00:00:50,079
uh i also invented the idea of encrypted

16
00:00:50,079 --> 00:00:52,719
exploit delivery via the defea monkey

17
00:00:52,719 --> 00:00:55,840
exchange and now this is uh recently

18
00:00:55,840 --> 00:00:56,800
used

19
00:00:56,800 --> 00:01:00,640
by the chinese apt protectors

20
00:01:00,640 --> 00:01:02,960
and i'm the co-organizer of the

21
00:01:02,960 --> 00:01:05,360
hackership meetup in hungary program

22
00:01:05,360 --> 00:01:07,200
committee member of the activity

23
00:01:07,200 --> 00:01:11,439
conference and volunteer at iot village

24
00:01:11,439 --> 00:01:12,400
and

25
00:01:12,400 --> 00:01:14,799
this is a research together with patrick

26
00:01:14,799 --> 00:01:17,759
ross and he's the co-founder of village

27
00:01:17,759 --> 00:01:19,200
idiot labs

28
00:01:19,200 --> 00:01:22,320
uh he's doing security research in iot

29
00:01:22,320 --> 00:01:25,600
content developer like labs ctfs stuff

30
00:01:25,600 --> 00:01:28,159
like that and he is also co-organizer of

31
00:01:28,159 --> 00:01:31,280
iot village and he's a defcon black

32
00:01:31,280 --> 00:01:32,720
batch holder

33
00:01:32,720 --> 00:01:33,520
and

34
00:01:33,520 --> 00:01:35,360
usually this is the part where he says

35
00:01:35,360 --> 00:01:38,479
something like the overdid

36
00:01:38,479 --> 00:01:40,799
so why should you listen to this

37
00:01:40,799 --> 00:01:42,320
presentation

38
00:01:42,320 --> 00:01:45,040
if you are into emulating iot devices

39
00:01:45,040 --> 00:01:47,119
this can be interesting for you or if

40
00:01:47,119 --> 00:01:49,280
you are interested in embedded device

41
00:01:49,280 --> 00:01:50,720
development

42
00:01:50,720 --> 00:01:53,520
or have you ever maybe tried to debug

43
00:01:53,520 --> 00:01:55,920
any mibs based assembly

44
00:01:55,920 --> 00:01:59,360
or you want to build yourself on lab

45
00:01:59,360 --> 00:02:01,680
with iot devices

46
00:02:01,680 --> 00:02:04,479
if the answer is yes to any of these

47
00:02:04,479 --> 00:02:05,840
questions

48
00:02:05,840 --> 00:02:09,919
then you might enjoy the show if not

49
00:02:09,919 --> 00:02:13,280
i recommend you stay for domains but

50
00:02:13,280 --> 00:02:15,920
i hope you will stay and you might want

51
00:02:15,920 --> 00:02:18,480
to you can find out how you can find

52
00:02:18,480 --> 00:02:22,720
zero-day vulnerabilities in iot devices

53
00:02:22,720 --> 00:02:23,760
so

54
00:02:23,760 --> 00:02:25,840
why are we doing this why we started

55
00:02:25,840 --> 00:02:28,480
this project

56
00:02:28,480 --> 00:02:32,400
if you are into doing labs or ctf

57
00:02:32,400 --> 00:02:35,280
by visiting conferences

58
00:02:35,280 --> 00:02:37,680
bringing all the iot devices to these

59
00:02:37,680 --> 00:02:40,160
different events can be messy

60
00:02:40,160 --> 00:02:41,360
and

61
00:02:41,360 --> 00:02:44,640
by messi i mean massively messy like

62
00:02:44,640 --> 00:02:46,720
there are a lot of cables a lot of

63
00:02:46,720 --> 00:02:48,879
things can go wrong

64
00:02:48,879 --> 00:02:50,879
and it's just a mess and it's a really

65
00:02:50,879 --> 00:02:52,800
pain to deal with it

66
00:02:52,800 --> 00:02:55,519
so that's why we figured why can't we do

67
00:02:55,519 --> 00:02:58,239
this with only one server where

68
00:02:58,239 --> 00:03:01,280
everything is emulated

69
00:03:01,280 --> 00:03:03,840
also when it comes to vulnerability

70
00:03:03,840 --> 00:03:06,560
research and the exploit development

71
00:03:06,560 --> 00:03:09,200
this is the traditional way how you can

72
00:03:09,200 --> 00:03:10,879
uh

73
00:03:10,879 --> 00:03:13,599
basically emulate uh not not emulate

74
00:03:13,599 --> 00:03:16,159
debug a device if you want to find any

75
00:03:16,159 --> 00:03:17,920
memory corruption vulnerabilities and

76
00:03:17,920 --> 00:03:20,480
what you want to figure out uh what is

77
00:03:20,480 --> 00:03:24,319
going wrong how you can make this

78
00:03:24,319 --> 00:03:27,280
code execution really work

79
00:03:27,280 --> 00:03:29,280
and first of all

80
00:03:29,280 --> 00:03:32,879
you somehow have to root on the device

81
00:03:32,879 --> 00:03:35,840
and that's just a quest 22 problem

82
00:03:35,840 --> 00:03:38,159
because uh you want

83
00:03:38,159 --> 00:03:39,920
root on the device so you can find

84
00:03:39,920 --> 00:03:41,519
vulnerabilities

85
00:03:41,519 --> 00:03:42,560
but

86
00:03:42,560 --> 00:03:45,280
which one is first so it can be hard

87
00:03:45,280 --> 00:03:48,640
and also if you are into

88
00:03:48,640 --> 00:03:51,040
debugging memory corruption exploits you

89
00:03:51,040 --> 00:03:53,519
need something like gdb server to be

90
00:03:53,519 --> 00:03:55,840
present on the device but

91
00:03:55,840 --> 00:03:58,560
usually there are no iot devices which

92
00:03:58,560 --> 00:04:01,200
have this binary and what happens if you

93
00:04:01,200 --> 00:04:04,720
try to download gdb server binary on the

94
00:04:04,720 --> 00:04:06,879
iot device well

95
00:04:06,879 --> 00:04:09,200
mostly these are read-only file systems

96
00:04:09,200 --> 00:04:12,080
and you cannot just do that

97
00:04:12,080 --> 00:04:13,360
so

98
00:04:13,360 --> 00:04:16,320
there has to be a solution to this

99
00:04:16,320 --> 00:04:20,000
and uh yeah this can be a lot of fun if

100
00:04:20,000 --> 00:04:22,800
you are into this but uh it can be very

101
00:04:22,800 --> 00:04:25,600
complicated

102
00:04:25,840 --> 00:04:27,600
so we checked

103
00:04:27,600 --> 00:04:30,160
what's on the internet uh maybe we are

104
00:04:30,160 --> 00:04:33,280
not the first one trying to emulate iot

105
00:04:33,280 --> 00:04:34,639
devices

106
00:04:34,639 --> 00:04:35,520
and

107
00:04:35,520 --> 00:04:38,160
first we found thermadyne which is cool

108
00:04:38,160 --> 00:04:41,759
but we find it a little bit bloated

109
00:04:41,759 --> 00:04:44,000
there are also a lot of outdated and

110
00:04:44,000 --> 00:04:46,639
incorrect blog posts how you can do this

111
00:04:46,639 --> 00:04:48,160
manually

112
00:04:48,160 --> 00:04:49,040
and

113
00:04:49,040 --> 00:04:50,960
we also found a very good great project

114
00:04:50,960 --> 00:04:52,880
called rmx

115
00:04:52,880 --> 00:04:54,400
actually the

116
00:04:54,400 --> 00:04:57,280
developer of our max showmill is one of

117
00:04:57,280 --> 00:04:59,919
the hosts of this event and he will have

118
00:04:59,919 --> 00:05:03,759
a workshop around his framework today so

119
00:05:03,759 --> 00:05:05,840
i highly recommend you to visit that

120
00:05:05,840 --> 00:05:09,120
workshop if you are into iot security

121
00:05:09,120 --> 00:05:12,880
but at the time armax was only for arm

122
00:05:12,880 --> 00:05:15,600
based cpus and it did not have any mips

123
00:05:15,600 --> 00:05:18,240
support and we really really needed the

124
00:05:18,240 --> 00:05:21,759
mips support so we figured okay let's

125
00:05:21,759 --> 00:05:24,560
use our max and let's add mips support

126
00:05:24,560 --> 00:05:26,479
to it

127
00:05:26,479 --> 00:05:29,360
so i'm going to talk about architectures

128
00:05:29,360 --> 00:05:31,199
the difference between virtualization

129
00:05:31,199 --> 00:05:32,960
and emulation

130
00:05:32,960 --> 00:05:36,720
some pain around leave sex development

131
00:05:36,720 --> 00:05:38,800
something some information about the

132
00:05:38,800 --> 00:05:43,840
kernel file systems mvram qmo and docker

133
00:05:43,840 --> 00:05:47,599
and there will be a demo as well

134
00:05:49,039 --> 00:05:50,800
so um

135
00:05:50,800 --> 00:05:53,039
most of you know there are different cpu

136
00:05:53,039 --> 00:05:54,960
architectures around like there's the

137
00:05:54,960 --> 00:05:57,840
intel or amd one which is using a

138
00:05:57,840 --> 00:06:00,560
complex instruction set uh under the

139
00:06:00,560 --> 00:06:02,960
hood is actually reduced one but we

140
00:06:02,960 --> 00:06:05,759
don't really care about that right now

141
00:06:05,759 --> 00:06:08,479
there's the arm cpu architecture which

142
00:06:08,479 --> 00:06:11,120
is a reduced instruction set

143
00:06:11,120 --> 00:06:12,880
you can mostly find it in embedded

144
00:06:12,880 --> 00:06:16,720
devices like smartphones also the latest

145
00:06:16,720 --> 00:06:20,479
macbooks m1 is using arm cpu there's the

146
00:06:20,479 --> 00:06:22,000
mips one

147
00:06:22,000 --> 00:06:24,160
which is again reduced

148
00:06:24,160 --> 00:06:26,720
you can find it in a lot of cheap iot

149
00:06:26,720 --> 00:06:29,840
devices like ip cameras

150
00:06:29,840 --> 00:06:32,880
there's a power pc cpu architecture this

151
00:06:32,880 --> 00:06:35,919
is again reduced one you can find it for

152
00:06:35,919 --> 00:06:38,720
example very old apple hardware there's

153
00:06:38,720 --> 00:06:40,800
the spark and there are many many

154
00:06:40,800 --> 00:06:43,759
different cpu architectures

155
00:06:43,759 --> 00:06:44,639
and

156
00:06:44,639 --> 00:06:46,639
if you try to debug

157
00:06:46,639 --> 00:06:51,120
these uh binaries in a tool like gdb

158
00:06:51,120 --> 00:06:53,440
then uh you can see some interesting

159
00:06:53,440 --> 00:06:55,599
differences between the different cpu

160
00:06:55,599 --> 00:06:57,599
architectures for example this is a

161
00:06:57,599 --> 00:07:01,199
hello world uh in intel assembly

162
00:07:01,199 --> 00:07:05,520
and because it's using a

163
00:07:05,520 --> 00:07:07,599
complex instruction set

164
00:07:07,599 --> 00:07:10,560
you don't see too many registers

165
00:07:10,560 --> 00:07:11,680
here

166
00:07:11,680 --> 00:07:13,520
these are the registers that's not too

167
00:07:13,520 --> 00:07:15,440
many compared to the

168
00:07:15,440 --> 00:07:18,479
others we will see very soon and also if

169
00:07:18,479 --> 00:07:21,680
you look at the assembly instructions uh

170
00:07:21,680 --> 00:07:23,680
if you have ever seen intel assembly

171
00:07:23,680 --> 00:07:26,960
these mnemonics might be familiar to you

172
00:07:26,960 --> 00:07:30,240
like there's a move called the pop rat

173
00:07:30,240 --> 00:07:33,039
knobs interactions these are very very

174
00:07:33,039 --> 00:07:35,440
familiar to you probably

175
00:07:35,440 --> 00:07:39,039
so here's a hello world uh in arm 64 bit

176
00:07:39,039 --> 00:07:42,160
as you can see now uh it has a lot more

177
00:07:42,160 --> 00:07:45,280
registers compared to the interval

178
00:07:45,280 --> 00:07:47,199
because it's using a reduced instruction

179
00:07:47,199 --> 00:07:48,560
set

180
00:07:48,560 --> 00:07:50,000
still the assembly is a little bit

181
00:07:50,000 --> 00:07:53,680
similar and familiar to the interval but

182
00:07:53,680 --> 00:07:56,720
there are some others like this rdr

183
00:07:56,720 --> 00:08:01,120
which is uh not available in intel

184
00:08:01,360 --> 00:08:03,680
this is a mips 32

185
00:08:03,680 --> 00:08:06,800
assembly under gdb again because this is

186
00:08:06,800 --> 00:08:09,599
a reduced instruction set you can see a

187
00:08:09,599 --> 00:08:12,240
lot of lot of registers and now the

188
00:08:12,240 --> 00:08:14,879
assembly instructions are not that

189
00:08:14,879 --> 00:08:17,680
intuitive like you can guess that add ui

190
00:08:17,680 --> 00:08:20,240
has something to do with add or this is

191
00:08:20,240 --> 00:08:22,400
a movie instruction but it's not that

192
00:08:22,400 --> 00:08:24,960
straightforward anymore

193
00:08:24,960 --> 00:08:27,599
just for fun uh i also created a hello

194
00:08:27,599 --> 00:08:30,160
world for power pc and this is how it

195
00:08:30,160 --> 00:08:32,320
looks like in gdb

196
00:08:32,320 --> 00:08:33,360
uh

197
00:08:33,360 --> 00:08:35,519
again the same story a lot of registers

198
00:08:35,519 --> 00:08:38,159
because it is a reduced instruction set

199
00:08:38,159 --> 00:08:40,958
but here the assembly instructions are i

200
00:08:40,958 --> 00:08:44,399
have no idea what these are good for

201
00:08:44,399 --> 00:08:47,200
anyway let's talk about virtualization

202
00:08:47,200 --> 00:08:48,880
and emulation

203
00:08:48,880 --> 00:08:50,560
the reason i was showing to you all

204
00:08:50,560 --> 00:08:53,920
these cpu architectures because most of

205
00:08:53,920 --> 00:08:56,800
the time most people only live on the

206
00:08:56,800 --> 00:08:58,800
intel amd

207
00:08:58,800 --> 00:09:01,760
architecture and for example

208
00:09:01,760 --> 00:09:04,240
if you want to run a new operating

209
00:09:04,240 --> 00:09:07,440
system uh on your notebook you just fire

210
00:09:07,440 --> 00:09:09,440
up a virtualization software like

211
00:09:09,440 --> 00:09:12,240
virtualbox or vmware and then you are

212
00:09:12,240 --> 00:09:13,920
good to go

213
00:09:13,920 --> 00:09:14,800
but

214
00:09:14,800 --> 00:09:18,000
if you are trying to emulate a different

215
00:09:18,000 --> 00:09:20,880
cpu architecture then this

216
00:09:20,880 --> 00:09:23,440
virtualization will not work for you

217
00:09:23,440 --> 00:09:25,040
because

218
00:09:25,040 --> 00:09:28,000
virtualization software will not emulate

219
00:09:28,000 --> 00:09:30,399
these cpu instruction sets which are

220
00:09:30,399 --> 00:09:34,240
different as you have seen previously

221
00:09:34,240 --> 00:09:37,519
qmo is the best option uh we have right

222
00:09:37,519 --> 00:09:42,080
now to emulate these uh different cpu uh

223
00:09:42,080 --> 00:09:44,720
architectures uh just a show of hands

224
00:09:44,720 --> 00:09:48,880
how many of you use qmo in the past

225
00:09:48,880 --> 00:09:51,839
okay thank you

226
00:09:51,920 --> 00:09:53,920
and uh what's uh

227
00:09:53,920 --> 00:09:57,760
really interesting if you are into uh

228
00:09:57,760 --> 00:10:01,519
iot emulation that qmo has this thing

229
00:10:01,519 --> 00:10:04,399
called development boards which are

230
00:10:04,399 --> 00:10:07,200
basically so-called virtual machines

231
00:10:07,200 --> 00:10:09,680
where the hardware and the bios is

232
00:10:09,680 --> 00:10:11,600
basically emulated

233
00:10:11,600 --> 00:10:14,160
i'm totally over simplifying things here

234
00:10:14,160 --> 00:10:16,399
so things are a lot more complicated but

235
00:10:16,399 --> 00:10:18,720
we don't have to go deep down there

236
00:10:18,720 --> 00:10:21,200
right now

237
00:10:21,360 --> 00:10:23,360
what's interesting that if you want to

238
00:10:23,360 --> 00:10:27,440
emulate an iot device in qmo and you

239
00:10:27,440 --> 00:10:28,320
grab

240
00:10:28,320 --> 00:10:31,200
both the file system of the iot device

241
00:10:31,200 --> 00:10:32,399
and the kernel

242
00:10:32,399 --> 00:10:35,440
used on it and you want to try to run

243
00:10:35,440 --> 00:10:38,480
the kernel in this emulated qmo

244
00:10:38,480 --> 00:10:41,600
environment it will not work

245
00:10:41,600 --> 00:10:43,839
why is that

246
00:10:43,839 --> 00:10:47,200
because the qmo hardware environment is

247
00:10:47,200 --> 00:10:49,200
different compared to the hardware

248
00:10:49,200 --> 00:10:52,880
enviro environment in the iot device and

249
00:10:52,880 --> 00:10:55,440
in an iot device you don't have too much

250
00:10:55,440 --> 00:10:58,000
storage space to add support for

251
00:10:58,000 --> 00:11:00,240
different hardware components right you

252
00:11:00,240 --> 00:11:02,560
only have storage for that very specific

253
00:11:02,560 --> 00:11:04,959
hardware and nothing else so it will

254
00:11:04,959 --> 00:11:07,120
instantly fail and

255
00:11:07,120 --> 00:11:08,959
this means that whenever you want to

256
00:11:08,959 --> 00:11:10,560
emulate

257
00:11:10,560 --> 00:11:13,440
any iot device in qmo

258
00:11:13,440 --> 00:11:16,399
you have to compile your own kernel and

259
00:11:16,399 --> 00:11:18,480
that's going to be pretty fun as you

260
00:11:18,480 --> 00:11:19,140
will see

261
00:11:19,140 --> 00:11:22,330
[Music]

262
00:11:22,880 --> 00:11:24,320
there was saying

263
00:11:24,320 --> 00:11:26,959
in the iot world that if you want to

264
00:11:26,959 --> 00:11:28,480
build your own kernel

265
00:11:28,480 --> 00:11:30,800
you have to do just use build root which

266
00:11:30,800 --> 00:11:33,040
is a great framework

267
00:11:33,040 --> 00:11:36,160
for creating uh kernels and

268
00:11:36,160 --> 00:11:40,800
host file systems for embedded devices

269
00:11:41,440 --> 00:11:44,880
if you want to emulate an iot device in

270
00:11:44,880 --> 00:11:49,680
qmo uh the best option is if you try to

271
00:11:49,680 --> 00:11:52,320
use the same kernel version

272
00:11:52,320 --> 00:11:55,680
like you can use a different one but

273
00:11:55,680 --> 00:11:57,519
at the end of the day there might be

274
00:11:57,519 --> 00:12:00,399
differences on how things work under the

275
00:12:00,399 --> 00:12:02,959
different kernel versions and your

276
00:12:02,959 --> 00:12:05,920
emulation will not be the same and if

277
00:12:05,920 --> 00:12:08,560
it's not the same maybe the exploit you

278
00:12:08,560 --> 00:12:09,920
develop

279
00:12:09,920 --> 00:12:12,000
for your iot device in the qmo

280
00:12:12,000 --> 00:12:14,800
environment will just not work in the

281
00:12:14,800 --> 00:12:17,920
real uh system so that's why you have to

282
00:12:17,920 --> 00:12:20,480
you have to try to be

283
00:12:20,480 --> 00:12:22,639
the same build the same environment in

284
00:12:22,639 --> 00:12:28,399
your qmo what's in the iot hardware

285
00:12:28,560 --> 00:12:30,240
luckily for us

286
00:12:30,240 --> 00:12:32,480
you can find some old

287
00:12:32,480 --> 00:12:35,120
working pre-built kernel binaries on the

288
00:12:35,120 --> 00:12:36,079
internet

289
00:12:36,079 --> 00:12:39,440
for example on this url

290
00:12:39,440 --> 00:12:41,760
and what's really nice that it is uh

291
00:12:41,760 --> 00:12:43,839
debian based uh

292
00:12:43,839 --> 00:12:46,399
kernels and host file systems and after

293
00:12:46,399 --> 00:12:48,399
a little bit of hacking uh object

294
00:12:48,399 --> 00:12:50,720
install just works on this

295
00:12:50,720 --> 00:12:53,519
and that's really good because uh

296
00:12:53,519 --> 00:12:55,839
now uh with build root you have the

297
00:12:55,839 --> 00:12:58,480
issue that once you build your host file

298
00:12:58,480 --> 00:12:59,519
system

299
00:12:59,519 --> 00:13:01,760
you cannot just add any new software

300
00:13:01,760 --> 00:13:04,000
packages to it with object or similar

301
00:13:04,000 --> 00:13:06,000
because there's no such thing you have

302
00:13:06,000 --> 00:13:08,399
to rebuild the whole again and that can

303
00:13:08,399 --> 00:13:09,680
be a pain

304
00:13:09,680 --> 00:13:12,399
but uh with this dbm one

305
00:13:12,399 --> 00:13:15,200
uh you just change your repository to

306
00:13:15,200 --> 00:13:19,200
the archive debian and it will just work

307
00:13:19,200 --> 00:13:23,279
but uh if you want to build your own uh

308
00:13:23,279 --> 00:13:26,240
kernel for example with build root

309
00:13:26,240 --> 00:13:27,600
well

310
00:13:27,600 --> 00:13:30,399
here be dragons

311
00:13:30,399 --> 00:13:32,480
uh what's the difference between these

312
00:13:32,480 --> 00:13:34,800
two options building your own or using

313
00:13:34,800 --> 00:13:37,920
the previous ones the previous ones

314
00:13:37,920 --> 00:13:40,480
are like almost 300 megabytes which can

315
00:13:40,480 --> 00:13:43,839
be a lot compared to the build root one

316
00:13:43,839 --> 00:13:46,000
as i already mentioned opt-get already

317
00:13:46,000 --> 00:13:48,399
works in the pre-built one but not in

318
00:13:48,399 --> 00:13:50,000
the build root one

319
00:13:50,000 --> 00:13:53,360
and uh here's a list how you can make it

320
00:13:53,360 --> 00:13:56,800
work for example in your uh

321
00:13:56,800 --> 00:13:58,399
prebuilt debian

322
00:13:58,399 --> 00:14:01,440
environment just you have to start your

323
00:14:01,440 --> 00:14:04,480
favorite proxy on the host machine uh

324
00:14:04,480 --> 00:14:07,839
you forward all the dns traffic uh from

325
00:14:07,839 --> 00:14:11,120
the guest to a known dns server you

326
00:14:11,120 --> 00:14:16,639
change uh the dns options in your uh

327
00:14:16,639 --> 00:14:19,360
debian host file system to point it to

328
00:14:19,360 --> 00:14:20,320
your

329
00:14:20,320 --> 00:14:22,079
host machine

330
00:14:22,079 --> 00:14:24,560
you change the proxy configuration in

331
00:14:24,560 --> 00:14:25,440
opt

332
00:14:25,440 --> 00:14:27,920
and as mentioned you have to change all

333
00:14:27,920 --> 00:14:30,399
the repositories to an archive debian

334
00:14:30,399 --> 00:14:35,279
org and that's all and it will just work

335
00:14:35,279 --> 00:14:37,040
uh

336
00:14:37,040 --> 00:14:40,800
when i was trying to build an old mips

337
00:14:40,800 --> 00:14:41,920
kernel

338
00:14:41,920 --> 00:14:44,320
for this project

339
00:14:44,320 --> 00:14:47,760
i have seen some errors during this

340
00:14:47,760 --> 00:14:49,199
process

341
00:14:49,199 --> 00:14:51,680
for example here you can see a 10 year

342
00:14:51,680 --> 00:14:52,959
old

343
00:14:52,959 --> 00:14:55,120
build route

344
00:14:55,120 --> 00:14:58,560
and this was working on a i guess 12

345
00:14:58,560 --> 00:15:01,120
years old ubuntu machine

346
00:15:01,120 --> 00:15:04,000
and clearly you will run into many

347
00:15:04,000 --> 00:15:07,120
unexpected issues like uh ssl connection

348
00:15:07,120 --> 00:15:10,160
was not working here because the support

349
00:15:10,160 --> 00:15:12,639
of cypher suits are totally different

350
00:15:12,639 --> 00:15:15,760
and they have changed like you cannot

351
00:15:15,760 --> 00:15:17,839
browse the internet anymore with these

352
00:15:17,839 --> 00:15:19,600
very old

353
00:15:19,600 --> 00:15:22,720
linux systems and you cannot just use a

354
00:15:22,720 --> 00:15:23,839
new

355
00:15:23,839 --> 00:15:26,560
linux system to build an old kernel this

356
00:15:26,560 --> 00:15:28,639
is this is this won't work you have to

357
00:15:28,639 --> 00:15:32,320
use old linux to build old kernel

358
00:15:32,320 --> 00:15:34,320
and you need the old kernel because all

359
00:15:34,320 --> 00:15:36,959
of these crappy iot devices are using

360
00:15:36,959 --> 00:15:39,600
really really old kernel like something

361
00:15:39,600 --> 00:15:42,399
from 2006

362
00:15:42,399 --> 00:15:45,360
also if you are using old

363
00:15:45,360 --> 00:15:48,000
stuff then all the repositories are

364
00:15:48,000 --> 00:15:50,240
pretty slow

365
00:15:50,240 --> 00:15:53,360
and during the compilation you can see a

366
00:15:53,360 --> 00:15:55,279
lot of errors and

367
00:15:55,279 --> 00:15:57,120
it's always up to you to try to figure

368
00:15:57,120 --> 00:15:59,759
out what went wrong

369
00:15:59,759 --> 00:16:02,320
it took me a lot of a lot of nights and

370
00:16:02,320 --> 00:16:05,920
weekends to finally make it work

371
00:16:05,920 --> 00:16:07,040
and

372
00:16:07,040 --> 00:16:09,120
there can be mismatches for example in

373
00:16:09,120 --> 00:16:12,639
the gdb versions that there's an old gdb

374
00:16:12,639 --> 00:16:14,880
server on the device but you are using a

375
00:16:14,880 --> 00:16:16,639
newer client

376
00:16:16,639 --> 00:16:20,240
there can be some errors and more errors

377
00:16:20,240 --> 00:16:22,480
and the missing tools

378
00:16:22,480 --> 00:16:26,079
and some errors and some errors and this

379
00:16:26,079 --> 00:16:28,320
is not the all uh i just started

380
00:16:28,320 --> 00:16:30,639
collecting these screenshots in the

381
00:16:30,639 --> 00:16:33,440
middle of my research so

382
00:16:33,440 --> 00:16:35,759
you might imagine how many errors i have

383
00:16:35,759 --> 00:16:36,800
seen

384
00:16:36,800 --> 00:16:39,600
while doing this research and there can

385
00:16:39,600 --> 00:16:42,320
be some errors and other errors i really

386
00:16:42,320 --> 00:16:44,639
like this one it's an internal compiler

387
00:16:44,639 --> 00:16:46,240
error i don't know whether it's

388
00:16:46,240 --> 00:16:49,440
exploitable or not but looks fun

389
00:16:49,440 --> 00:16:53,040
um here you can see the very old ubuntu

390
00:16:53,040 --> 00:16:55,199
i've guessed it's ubuntu

391
00:16:55,199 --> 00:16:56,480
8

392
00:16:56,480 --> 00:16:57,519
and

393
00:16:57,519 --> 00:16:59,759
it starts with a kernel panic which is

394
00:16:59,759 --> 00:17:02,000
uh not good news if you are into

395
00:17:02,000 --> 00:17:04,240
emulation

396
00:17:04,240 --> 00:17:07,439
and here still you can see some other

397
00:17:07,439 --> 00:17:09,839
errors and more errors

398
00:17:09,839 --> 00:17:11,679
and more errors

399
00:17:11,679 --> 00:17:12,559
and

400
00:17:12,559 --> 00:17:15,359
more errors and this is one of my

401
00:17:15,359 --> 00:17:18,240
favorite ones like the arrow states that

402
00:17:18,240 --> 00:17:20,400
cannot find ninja

403
00:17:20,400 --> 00:17:21,679
and

404
00:17:21,679 --> 00:17:23,679
i did not know at the time what ninja is

405
00:17:23,679 --> 00:17:26,240
but i found it pretty funny that

406
00:17:26,240 --> 00:17:28,079
this is now the errors i get that there

407
00:17:28,079 --> 00:17:30,840
is no ninja on my machine

408
00:17:30,840 --> 00:17:34,640
anyway so uh as you can see building a

409
00:17:34,640 --> 00:17:37,440
working and suitable mips kernel uh if

410
00:17:37,440 --> 00:17:40,559
you want to build an old version uh is a

411
00:17:40,559 --> 00:17:42,880
lot of uh challenge it has a lot of

412
00:17:42,880 --> 00:17:44,840
challenges

413
00:17:44,840 --> 00:17:46,559
um

414
00:17:46,559 --> 00:17:48,720
yes so let's talk a little bit about

415
00:17:48,720 --> 00:17:50,100
cross compilation

416
00:17:50,100 --> 00:17:51,280
[Music]

417
00:17:51,280 --> 00:17:55,120
uh i don't have any mips uh based

418
00:17:55,120 --> 00:17:57,760
desktops or notebooks at home

419
00:17:57,760 --> 00:18:00,720
right so if i want to compile any

420
00:18:00,720 --> 00:18:02,320
binaries

421
00:18:02,320 --> 00:18:05,520
for that target architecture then i have

422
00:18:05,520 --> 00:18:10,160
to use my intel or arm or whatever

423
00:18:10,160 --> 00:18:13,600
desktop or notebook in order to do that

424
00:18:13,600 --> 00:18:15,120
and there's something called cross

425
00:18:15,120 --> 00:18:17,200
compilation to do that

426
00:18:17,200 --> 00:18:19,600
which means that first uh i need a

427
00:18:19,600 --> 00:18:22,480
so-called tool chain like uh binaries

428
00:18:22,480 --> 00:18:24,080
like gcc

429
00:18:24,080 --> 00:18:27,440
uh and stuff like that uh which runs on

430
00:18:27,440 --> 00:18:30,480
my host machine like it's built for the

431
00:18:30,480 --> 00:18:33,600
intel instruction set but it can compile

432
00:18:33,600 --> 00:18:36,240
binaries for the target ones that's what

433
00:18:36,240 --> 00:18:39,200
is called cross compilation and most of

434
00:18:39,200 --> 00:18:40,960
the time it works

435
00:18:40,960 --> 00:18:43,360
but there will be some errors and issues

436
00:18:43,360 --> 00:18:47,360
you have to figure out by doing that

437
00:18:47,919 --> 00:18:49,760
you have also the option that if you

438
00:18:49,760 --> 00:18:52,720
have a working for example mips emulated

439
00:18:52,720 --> 00:18:55,120
environment in qmo you can try to

440
00:18:55,120 --> 00:18:57,919
compile natively something in it which

441
00:18:57,919 --> 00:19:00,640
does not involve cross compilation uh

442
00:19:00,640 --> 00:19:02,559
but i promise that it will be really

443
00:19:02,559 --> 00:19:05,120
really slow and if there is any error

444
00:19:05,120 --> 00:19:08,400
during compilation uh trying it again

445
00:19:08,400 --> 00:19:10,480
it's a lot of pain so i don't really

446
00:19:10,480 --> 00:19:13,919
recommend you to do that

447
00:19:14,640 --> 00:19:17,039
so as i already mentioned uh most of

448
00:19:17,039 --> 00:19:20,320
these crappy iot devices they use really

449
00:19:20,320 --> 00:19:22,720
really odd linux kernel for example a

450
00:19:22,720 --> 00:19:25,679
very popular kernel version in iot

451
00:19:25,679 --> 00:19:29,280
devices is 2.6.32

452
00:19:29,280 --> 00:19:30,400
uh

453
00:19:30,400 --> 00:19:32,880
maybe it's from 2006 or something like

454
00:19:32,880 --> 00:19:35,280
that so you can guess how many

455
00:19:35,280 --> 00:19:37,919
vulnerabilities are in those devices

456
00:19:37,919 --> 00:19:39,520
already

457
00:19:39,520 --> 00:19:40,640
but

458
00:19:40,640 --> 00:19:42,880
if you have a

459
00:19:42,880 --> 00:19:46,320
an iot device which has a really recent

460
00:19:46,320 --> 00:19:47,600
kernel

461
00:19:47,600 --> 00:19:49,919
running on the mips architecture then

462
00:19:49,919 --> 00:19:52,080
you are lucky because if you just follow

463
00:19:52,080 --> 00:19:54,320
for example this tutorial

464
00:19:54,320 --> 00:19:56,880
you can easily get one which is working

465
00:19:56,880 --> 00:19:59,440
right away

466
00:19:59,520 --> 00:20:02,320
uh yes and a little bit of note on

467
00:20:02,320 --> 00:20:07,760
static vessels dynamically binaries

468
00:20:07,760 --> 00:20:10,799
as i mentioned if you go down the build

469
00:20:10,799 --> 00:20:12,640
root way

470
00:20:12,640 --> 00:20:14,640
you you will not have anything like

471
00:20:14,640 --> 00:20:17,679
object install or similar

472
00:20:17,679 --> 00:20:20,960
but if you forgot to add any binary to

473
00:20:20,960 --> 00:20:22,480
the image

474
00:20:22,480 --> 00:20:25,200
you can still do that by statically

475
00:20:25,200 --> 00:20:27,280
compiling binaries

476
00:20:27,280 --> 00:20:28,880
which means there will be no

477
00:20:28,880 --> 00:20:31,600
dependencies all the dependencies and

478
00:20:31,600 --> 00:20:34,480
shared libraries are inside the binary

479
00:20:34,480 --> 00:20:36,480
itself so you can just drop your

480
00:20:36,480 --> 00:20:39,919
binaries and they will ready to go and

481
00:20:39,919 --> 00:20:41,760
you can use it

482
00:20:41,760 --> 00:20:43,679
already

483
00:20:43,679 --> 00:20:46,000
for example for this project we have

484
00:20:46,000 --> 00:20:49,440
compiled the gdb server netcat socad

485
00:20:49,440 --> 00:20:51,679
telnet demon stuff like that

486
00:20:51,679 --> 00:20:53,600
if you are into iot research you might

487
00:20:53,600 --> 00:20:56,799
need these tools

488
00:20:57,120 --> 00:20:58,799
so

489
00:20:58,799 --> 00:21:01,280
as i mentioned if you want to cross

490
00:21:01,280 --> 00:21:03,120
compile stuff uh

491
00:21:03,120 --> 00:21:05,360
you might you have a little bit of

492
00:21:05,360 --> 00:21:07,039
different options how you can do that

493
00:21:07,039 --> 00:21:08,720
for example there's build root as

494
00:21:08,720 --> 00:21:11,360
already mentioned open wrt which is

495
00:21:11,360 --> 00:21:14,840
based on build root cross tool ng

496
00:21:14,840 --> 00:21:18,320
muscle code sorcery code bench duck ross

497
00:21:18,320 --> 00:21:20,159
debian cross twos

498
00:21:20,159 --> 00:21:22,400
i have tried uh all these different

499
00:21:22,400 --> 00:21:23,600
options

500
00:21:23,600 --> 00:21:26,799
and what worked for us the best is uh

501
00:21:26,799 --> 00:21:29,280
beard root is uh really good for

502
00:21:29,280 --> 00:21:32,640
building the host fi system but

503
00:21:32,640 --> 00:21:34,320
if you want to cross compile static

504
00:21:34,320 --> 00:21:37,200
binaries i recommend the muscle

505
00:21:37,200 --> 00:21:38,720
cross compiler

506
00:21:38,720 --> 00:21:40,960
for that

507
00:21:40,960 --> 00:21:42,320
okay but

508
00:21:42,320 --> 00:21:44,559
after a lot of trial and error

509
00:21:44,559 --> 00:21:47,679
uh you can will be greeted with this

510
00:21:47,679 --> 00:21:51,039
nice login prompt that now i'm able to

511
00:21:51,039 --> 00:21:53,919
run uh mips based

512
00:21:53,919 --> 00:21:56,559
emulation under qmo

513
00:21:56,559 --> 00:21:57,600
and

514
00:21:57,600 --> 00:22:00,880
i only needed these uh

515
00:22:00,880 --> 00:22:04,480
was these six different vms in order to

516
00:22:04,480 --> 00:22:06,960
get there

517
00:22:07,280 --> 00:22:10,159
uh now a little bit about uh single

518
00:22:10,159 --> 00:22:14,640
binary and full system emulation

519
00:22:15,120 --> 00:22:17,840
this whole project i'm doing

520
00:22:17,840 --> 00:22:20,159
on top of our max is

521
00:22:20,159 --> 00:22:22,799
about full system emulation

522
00:22:22,799 --> 00:22:23,600
and

523
00:22:23,600 --> 00:22:25,360
usually you need the full system

524
00:22:25,360 --> 00:22:28,320
emulation to find vulnerabilities in iot

525
00:22:28,320 --> 00:22:29,440
devices

526
00:22:29,440 --> 00:22:33,120
but you might be lucky and it's possible

527
00:22:33,120 --> 00:22:36,799
that you just copy a single binary from

528
00:22:36,799 --> 00:22:40,400
the iot firmware and maybe you just copy

529
00:22:40,400 --> 00:22:43,679
some config files with it and you might

530
00:22:43,679 --> 00:22:46,960
be able to run this single binary on

531
00:22:46,960 --> 00:22:50,000
your host machine without this whole

532
00:22:50,000 --> 00:22:52,080
full system emulation and without the

533
00:22:52,080 --> 00:22:54,159
kernel and host file system and stuff

534
00:22:54,159 --> 00:22:56,559
like that

535
00:22:56,559 --> 00:22:58,880
for example uh you might know the

536
00:22:58,880 --> 00:23:01,520
researcher azaria she has a very nice

537
00:23:01,520 --> 00:23:04,400
tutorial on how you can do this on the

538
00:23:04,400 --> 00:23:05,360
arm

539
00:23:05,360 --> 00:23:07,360
framework and

540
00:23:07,360 --> 00:23:09,919
if i just i just changed basically in

541
00:23:09,919 --> 00:23:13,039
her tutorial the words arm to mips and

542
00:23:13,039 --> 00:23:15,280
everything just works so

543
00:23:15,280 --> 00:23:18,559
if you want to emulate just a single uh

544
00:23:18,559 --> 00:23:19,840
binary

545
00:23:19,840 --> 00:23:21,679
on your house machine

546
00:23:21,679 --> 00:23:23,120
you have to install all of these

547
00:23:23,120 --> 00:23:24,559
packages

548
00:23:24,559 --> 00:23:25,760
then

549
00:23:25,760 --> 00:23:28,559
using the gcc

550
00:23:28,559 --> 00:23:30,960
cross compiler built for the mips

551
00:23:30,960 --> 00:23:32,880
architecture

552
00:23:32,880 --> 00:23:35,600
i can build static binaries

553
00:23:35,600 --> 00:23:37,760
and i can also be a dynamic killing

554
00:23:37,760 --> 00:23:39,200
advance

555
00:23:39,200 --> 00:23:42,799
and what's really nice uh in this

556
00:23:42,799 --> 00:23:45,760
qmo user mode emulation that everything

557
00:23:45,760 --> 00:23:48,640
will just work as you can see

558
00:23:48,640 --> 00:23:52,720
on this screenshot so uh on the top

559
00:23:52,720 --> 00:23:56,480
uh you can see that uh this is uh the c

560
00:23:56,480 --> 00:23:59,840
source code uh for the hello world and

561
00:23:59,840 --> 00:24:02,320
uh here i'm using uh

562
00:24:02,320 --> 00:24:04,720
creating the static binary and the

563
00:24:04,720 --> 00:24:06,960
dynamically linked one

564
00:24:06,960 --> 00:24:08,880
as you can see the file command

565
00:24:08,880 --> 00:24:11,039
correctly tells me that uh this is a

566
00:24:11,039 --> 00:24:13,679
mips binary statically

567
00:24:13,679 --> 00:24:16,240
linked one and the dynamic linked one

568
00:24:16,240 --> 00:24:20,799
and i'm using uh intel amd architecture

569
00:24:20,799 --> 00:24:23,200
right now this is the host machine but

570
00:24:23,200 --> 00:24:24,159
still

571
00:24:24,159 --> 00:24:27,840
i can do this like executing the binary

572
00:24:27,840 --> 00:24:31,200
without uh knowing that it's a mips one

573
00:24:31,200 --> 00:24:34,640
it will just work and the qmo user mode

574
00:24:34,640 --> 00:24:37,440
package is doing this

575
00:24:37,440 --> 00:24:38,400
whole

576
00:24:38,400 --> 00:24:40,240
background task for you that it will

577
00:24:40,240 --> 00:24:41,840
just work

578
00:24:41,840 --> 00:24:44,240
unfortunately the dynamic linked one

579
00:24:44,240 --> 00:24:46,480
will not work by default

580
00:24:46,480 --> 00:24:47,200
but

581
00:24:47,200 --> 00:24:49,200
we are used to this that things just

582
00:24:49,200 --> 00:24:51,360
don't work luckily there's this very

583
00:24:51,360 --> 00:24:54,240
easy fix how you can resolve it but this

584
00:24:54,240 --> 00:24:56,720
is pretty nice i think that

585
00:24:56,720 --> 00:24:58,960
by default if you only are interested in

586
00:24:58,960 --> 00:25:03,440
emulating a single binary is that easy

587
00:25:03,520 --> 00:25:06,080
now let's talk a little bit about the

588
00:25:06,080 --> 00:25:08,960
phi systems

589
00:25:09,039 --> 00:25:11,520
for the mips architecture there are many

590
00:25:11,520 --> 00:25:12,559
many

591
00:25:12,559 --> 00:25:13,760
different

592
00:25:13,760 --> 00:25:15,840
cpu versions

593
00:25:15,840 --> 00:25:17,840
and historically some of them are

594
00:25:17,840 --> 00:25:20,559
compatible with each other some of them

595
00:25:20,559 --> 00:25:23,039
are not

596
00:25:24,720 --> 00:25:26,000
and

597
00:25:26,000 --> 00:25:27,200
regarding

598
00:25:27,200 --> 00:25:30,159
the file system

599
00:25:30,640 --> 00:25:34,000
when you are into the emulation

600
00:25:34,000 --> 00:25:37,039
of your iot device

601
00:25:37,039 --> 00:25:39,520
the way it works is that

602
00:25:39,520 --> 00:25:40,799
first

603
00:25:40,799 --> 00:25:44,640
you need the qmo emulation framework

604
00:25:44,640 --> 00:25:47,679
which will start the kernel for example

605
00:25:47,679 --> 00:25:50,320
for the mips architecture

606
00:25:50,320 --> 00:25:51,600
and then

607
00:25:51,600 --> 00:25:52,880
you will

608
00:25:52,880 --> 00:25:56,400
run the basic host file system

609
00:25:56,400 --> 00:25:59,520
which is just a basic uh linux image

610
00:25:59,520 --> 00:26:01,840
with all the tools you need

611
00:26:01,840 --> 00:26:03,760
and after that

612
00:26:03,760 --> 00:26:06,000
you have to copy

613
00:26:06,000 --> 00:26:08,640
the i o the firmware

614
00:26:08,640 --> 00:26:11,520
files from the iot device

615
00:26:11,520 --> 00:26:14,320
and once you have a running operating

616
00:26:14,320 --> 00:26:18,000
system uh with your generic host file

617
00:26:18,000 --> 00:26:19,039
system

618
00:26:19,039 --> 00:26:21,360
then what how you can

619
00:26:21,360 --> 00:26:24,799
basically start the iot device is that

620
00:26:24,799 --> 00:26:26,240
you

621
00:26:26,240 --> 00:26:30,080
change your directory into the

622
00:26:30,080 --> 00:26:34,000
directory where your iot firmware is

623
00:26:34,000 --> 00:26:36,320
you use siege root

624
00:26:36,320 --> 00:26:38,480
and then you can kick start the boot

625
00:26:38,480 --> 00:26:41,200
process um this is a

626
00:26:41,200 --> 00:26:43,360
little bit of uh

627
00:26:43,360 --> 00:26:46,400
confusing how this all are connected

628
00:26:46,400 --> 00:26:49,679
together uh i'm really sorry for that uh

629
00:26:49,679 --> 00:26:52,159
but uh basically what you do is that you

630
00:26:52,159 --> 00:26:55,760
first start your generic hosfi system

631
00:26:55,760 --> 00:26:59,279
and once it's uh up and running os then

632
00:26:59,279 --> 00:27:03,440
inside that you run your emulated uh iot

633
00:27:03,440 --> 00:27:07,840
firmware in a sage-rooted environment

634
00:27:09,200 --> 00:27:11,520
all right

635
00:27:11,520 --> 00:27:15,120
i also created uh some guides and notes

636
00:27:15,120 --> 00:27:18,399
on how you can build this post file

637
00:27:18,399 --> 00:27:19,679
system

638
00:27:19,679 --> 00:27:20,559
but

639
00:27:20,559 --> 00:27:24,159
i'm not going into details in to that uh

640
00:27:24,159 --> 00:27:26,159
if you are interested just download the

641
00:27:26,159 --> 00:27:28,640
slides afterwards

642
00:27:28,640 --> 00:27:31,679
uh and there's uh only one thing

643
00:27:31,679 --> 00:27:35,039
remaining uh i have to explain to you

644
00:27:35,039 --> 00:27:37,960
and this is called the nvram or the

645
00:27:37,960 --> 00:27:41,360
non-volatile ram

646
00:27:42,399 --> 00:27:43,919
traditionally

647
00:27:43,919 --> 00:27:47,360
iot devices have read only five systems

648
00:27:47,360 --> 00:27:50,240
and the reason behind that because

649
00:27:50,240 --> 00:27:52,720
it can be a lot cheaper to have a

650
00:27:52,720 --> 00:27:54,640
read-only file system

651
00:27:54,640 --> 00:27:55,360
and

652
00:27:55,360 --> 00:27:58,240
also the

653
00:27:59,520 --> 00:28:03,520
lifetime of the device can be a lot more

654
00:28:03,520 --> 00:28:06,320
by years uh if you are using using a

655
00:28:06,320 --> 00:28:10,080
read only file system like you know hdds

656
00:28:10,080 --> 00:28:14,320
are and ssds uh they usually fail after

657
00:28:14,320 --> 00:28:17,360
five or ten years and these iot devices

658
00:28:17,360 --> 00:28:22,320
are built for a much longer life spam

659
00:28:22,320 --> 00:28:24,720
but if you only have a read-only file

660
00:28:24,720 --> 00:28:28,159
system then how you can store any of

661
00:28:28,159 --> 00:28:30,399
these configurations for example

662
00:28:30,399 --> 00:28:34,159
let's say you have a home wifi router

663
00:28:34,159 --> 00:28:36,080
and you want to change some of the

664
00:28:36,080 --> 00:28:39,200
settings of it like the wi-fi ssid or

665
00:28:39,200 --> 00:28:43,840
the wi-fi password or the ip addresses

666
00:28:43,840 --> 00:28:45,679
in order to store

667
00:28:45,679 --> 00:28:48,159
those configuration options you will

668
00:28:48,159 --> 00:28:52,080
need these nvram

669
00:28:52,399 --> 00:28:53,760
and

670
00:28:53,760 --> 00:28:56,000
whenever you want to emulate an iot

671
00:28:56,000 --> 00:28:58,320
device you also have to take care of the

672
00:28:58,320 --> 00:29:00,399
emulation of this

673
00:29:00,399 --> 00:29:04,080
nvram device because by default qmo is

674
00:29:04,080 --> 00:29:06,720
not providing this for you

675
00:29:06,720 --> 00:29:08,159
and

676
00:29:08,159 --> 00:29:09,039
first

677
00:29:09,039 --> 00:29:10,799
if you already hacked

678
00:29:10,799 --> 00:29:13,440
the iot device you have to somehow

679
00:29:13,440 --> 00:29:16,880
extract all the nvram parameters like i

680
00:29:16,880 --> 00:29:20,080
mentioned the ssid and ip address and

681
00:29:20,080 --> 00:29:21,520
all these different configuration

682
00:29:21,520 --> 00:29:23,840
parameters and then you have to emulate

683
00:29:23,840 --> 00:29:27,120
them inside

684
00:29:27,120 --> 00:29:29,679
and uh just a little bit about

685
00:29:29,679 --> 00:29:33,200
the qmo vms

686
00:29:33,200 --> 00:29:36,320
things can be complicated uh if you are

687
00:29:36,320 --> 00:29:37,279
not

688
00:29:37,279 --> 00:29:39,600
used to qmo

689
00:29:39,600 --> 00:29:42,480
for example by default it will give you

690
00:29:42,480 --> 00:29:45,679
an interface a network interface which

691
00:29:45,679 --> 00:29:48,480
does not really work how you expect

692
00:29:48,480 --> 00:29:50,559
network interfaces

693
00:29:50,559 --> 00:29:51,600
but

694
00:29:51,600 --> 00:29:54,799
this is due to that qmo can be run

695
00:29:54,799 --> 00:29:57,440
without root privileges but if you run

696
00:29:57,440 --> 00:30:00,480
qr movie through privileges then you

697
00:30:00,480 --> 00:30:03,200
have the option to use for example tap

698
00:30:03,200 --> 00:30:06,000
interfaces which will work the way you

699
00:30:06,000 --> 00:30:09,120
will expect for example

700
00:30:09,120 --> 00:30:10,320
also

701
00:30:10,320 --> 00:30:12,240
as i mentioned

702
00:30:12,240 --> 00:30:14,000
whenever you are into vulnerability

703
00:30:14,000 --> 00:30:16,559
research and exploit development

704
00:30:16,559 --> 00:30:18,720
you want to achieve that

705
00:30:18,720 --> 00:30:21,200
the whole memory layout

706
00:30:21,200 --> 00:30:24,480
of the device is exactly the same

707
00:30:24,480 --> 00:30:26,799
as it is on the real device

708
00:30:26,799 --> 00:30:29,039
and

709
00:30:30,159 --> 00:30:31,520
for example

710
00:30:31,520 --> 00:30:33,840
what this practically means for you that

711
00:30:33,840 --> 00:30:36,640
whenever you compile your kernel

712
00:30:36,640 --> 00:30:39,039
you have to use the same kernel

713
00:30:39,039 --> 00:30:42,080
compilation options as it was used in

714
00:30:42,080 --> 00:30:45,918
the iot device itself

715
00:30:46,399 --> 00:30:49,679
also because you want to debug

716
00:30:49,679 --> 00:30:51,840
your iot device in this emulated

717
00:30:51,840 --> 00:30:54,320
environment a lot you have to take care

718
00:30:54,320 --> 00:30:57,200
about how you access this emulated

719
00:30:57,200 --> 00:30:59,200
environment for example you have to

720
00:30:59,200 --> 00:31:04,080
expose your ssh ports or gdb server and

721
00:31:04,080 --> 00:31:06,879
stuff like that

722
00:31:07,200 --> 00:31:10,159
okay and

723
00:31:10,799 --> 00:31:13,519
when we started this whole journey with

724
00:31:13,519 --> 00:31:15,840
the rmx project

725
00:31:15,840 --> 00:31:18,720
there was two options available

726
00:31:18,720 --> 00:31:21,600
there were some code on github which you

727
00:31:21,600 --> 00:31:24,399
can try and hack yourself onto your

728
00:31:24,399 --> 00:31:26,559
linux device but there were no

729
00:31:26,559 --> 00:31:28,799
instructions how you can do that and

730
00:31:28,799 --> 00:31:31,360
there was an alpine linux virtual

731
00:31:31,360 --> 00:31:32,480
machine

732
00:31:32,480 --> 00:31:36,399
and none of these options were

733
00:31:36,399 --> 00:31:39,120
user friendly i have to say so me and

734
00:31:39,120 --> 00:31:42,480
patrick figured out okay uh let's uh

735
00:31:42,480 --> 00:31:45,519
migrate this whole rmx framework into

736
00:31:45,519 --> 00:31:46,880
docker

737
00:31:46,880 --> 00:31:47,919
and

738
00:31:47,919 --> 00:31:50,159
this means that we are adding one more

739
00:31:50,159 --> 00:31:52,960
layer in top of everything so now we

740
00:31:52,960 --> 00:31:54,640
have the host machine

741
00:31:54,640 --> 00:31:58,080
then we have the docker container inside

742
00:31:58,080 --> 00:32:00,399
and the docker container will run the

743
00:32:00,399 --> 00:32:03,519
qmo emulation inside that

744
00:32:03,519 --> 00:32:06,159
and qmo will start the

745
00:32:06,159 --> 00:32:07,200
uh

746
00:32:07,200 --> 00:32:09,679
so-called host kernel

747
00:32:09,679 --> 00:32:12,960
and the phi system and as i already

748
00:32:12,960 --> 00:32:14,480
mentioned previously

749
00:32:14,480 --> 00:32:17,039
this already working uh

750
00:32:17,039 --> 00:32:19,200
emulated

751
00:32:19,200 --> 00:32:22,640
os and file system will kickstart the

752
00:32:22,640 --> 00:32:27,039
siege rooted uh iot environment

753
00:32:27,039 --> 00:32:30,080
which environment already includes your

754
00:32:30,080 --> 00:32:32,720
target binaries which you want to attack

755
00:32:32,720 --> 00:32:36,880
or research for example the web server

756
00:32:36,880 --> 00:32:40,399
and because you want to debug your stuff

757
00:32:40,399 --> 00:32:44,000
the ssh server and gdb server and all

758
00:32:44,000 --> 00:32:46,159
these uh

759
00:32:46,159 --> 00:32:48,399
servers to debug

760
00:32:48,399 --> 00:32:50,880
your application will be on the

761
00:32:50,880 --> 00:32:53,600
so-called host kernel file system but

762
00:32:53,600 --> 00:32:56,320
don't confuse this host to the top outer

763
00:32:56,320 --> 00:32:59,760
layer of host because we are so many uh

764
00:32:59,760 --> 00:33:02,399
layers deep down it's really hard to

765
00:33:02,399 --> 00:33:04,480
have what do you call a host and what's

766
00:33:04,480 --> 00:33:05,600
a guest

767
00:33:05,600 --> 00:33:08,799
you can get lost easily

768
00:33:08,799 --> 00:33:12,399
like i did many many times

769
00:33:12,399 --> 00:33:15,120
alrighty and

770
00:33:15,120 --> 00:33:18,880
let's see this in action

771
00:33:18,880 --> 00:33:20,240
luckily

772
00:33:20,240 --> 00:33:23,279
i already have a recorded video for you

773
00:33:23,279 --> 00:33:27,279
so i'm not going to do a live demo here

774
00:33:27,279 --> 00:33:28,159
so

775
00:33:28,159 --> 00:33:31,200
let's see how this works

776
00:33:31,200 --> 00:33:34,000
so on the top

777
00:33:34,000 --> 00:33:36,159
i'm starting the

778
00:33:36,159 --> 00:33:39,440
rmax docker binary

779
00:33:39,440 --> 00:33:41,360
which will

780
00:33:41,360 --> 00:33:44,080
kick start

781
00:33:44,320 --> 00:33:48,000
the qmo environment

782
00:33:48,000 --> 00:33:49,760
and on the bottom

783
00:33:49,760 --> 00:33:52,559
i'm starting the docker shell

784
00:33:52,559 --> 00:33:53,679
and here

785
00:33:53,679 --> 00:33:57,360
this is a camera i have at home

786
00:33:57,360 --> 00:33:58,159
and

787
00:33:58,159 --> 00:34:00,960
now the

788
00:34:00,960 --> 00:34:02,240
kernel

789
00:34:02,240 --> 00:34:04,799
and the host file system

790
00:34:04,799 --> 00:34:07,279
generic host file system

791
00:34:07,279 --> 00:34:09,359
matching to this camera

792
00:34:09,359 --> 00:34:11,839
starts

793
00:34:12,320 --> 00:34:16,960
this is still not the iot device itself

794
00:34:16,960 --> 00:34:18,560
and now

795
00:34:18,560 --> 00:34:22,000
i can start the siege rooted environment

796
00:34:22,000 --> 00:34:25,359
and kickstart the iot device as you can

797
00:34:25,359 --> 00:34:27,839
see there are a lot of error messages

798
00:34:27,839 --> 00:34:29,040
and it's

799
00:34:29,040 --> 00:34:30,560
sometimes really hard to figure out

800
00:34:30,560 --> 00:34:33,199
which arrow messages are interesting for

801
00:34:33,199 --> 00:34:35,280
us and which are not

802
00:34:35,280 --> 00:34:36,079
but

803
00:34:36,079 --> 00:34:38,159
as you can see uh

804
00:34:38,159 --> 00:34:41,199
stuff works right now for example if i'm

805
00:34:41,199 --> 00:34:44,879
checking the cpu info info you can see

806
00:34:44,879 --> 00:34:46,000
that

807
00:34:46,000 --> 00:34:50,000
i'm running uh mips emulated

808
00:34:50,000 --> 00:34:52,639
environment

809
00:34:55,359 --> 00:34:57,200
and i can also check what kind of

810
00:34:57,200 --> 00:35:00,160
services are running uh on this device

811
00:35:00,160 --> 00:35:03,520
and as you can see uh telnet is running

812
00:35:03,520 --> 00:35:06,800
on this iot firmware and uh

813
00:35:06,800 --> 00:35:09,839
as it quickly turned out uh this very

814
00:35:09,839 --> 00:35:12,800
cheap ip camera has a

815
00:35:12,800 --> 00:35:15,280
built-in telnet server uh with the

816
00:35:15,280 --> 00:35:17,520
username admin and very secure

817
00:35:17,520 --> 00:35:20,400
password12345

818
00:35:20,400 --> 00:35:22,400
so it's really hard for any type of

819
00:35:22,400 --> 00:35:24,880
hacker to hack this device but there are

820
00:35:24,880 --> 00:35:27,359
also other interesting ports which are

821
00:35:27,359 --> 00:35:30,720
running here

822
00:35:30,720 --> 00:35:34,160
and now that i have a running emulated

823
00:35:34,160 --> 00:35:37,119
iot environment what's really nice that

824
00:35:37,119 --> 00:35:38,079
i can

825
00:35:38,079 --> 00:35:41,119
very easily connect

826
00:35:41,119 --> 00:35:42,880
to any

827
00:35:42,880 --> 00:35:46,640
process inside the qmo environment and

828
00:35:46,640 --> 00:35:50,960
now i have a fully working gdb session

829
00:35:50,960 --> 00:35:53,280
where i can see the states of the

830
00:35:53,280 --> 00:35:57,119
register or the code execution flow and

831
00:35:57,119 --> 00:35:58,560
from now on it's

832
00:35:58,560 --> 00:36:00,400
a lot easier to

833
00:36:00,400 --> 00:36:03,119
develop any type of exploits

834
00:36:03,119 --> 00:36:06,720
if i'm interested into that

835
00:36:06,720 --> 00:36:09,200
all right

836
00:36:10,320 --> 00:36:13,520
so what are the next steps uh we want to

837
00:36:13,520 --> 00:36:16,960
achieve with this project uh the mv ram

838
00:36:16,960 --> 00:36:20,079
uh is a little bit buggy at the moment

839
00:36:20,079 --> 00:36:22,560
so we have to still work on the mvr

840
00:36:22,560 --> 00:36:24,240
emulation part

841
00:36:24,240 --> 00:36:25,119
uh

842
00:36:25,119 --> 00:36:27,119
if we have time we will implement some

843
00:36:27,119 --> 00:36:28,400
cicd

844
00:36:28,400 --> 00:36:32,000
solution where you only provide the

845
00:36:32,000 --> 00:36:34,000
firmware file to the framework and it

846
00:36:34,000 --> 00:36:36,240
will automatically build everything for

847
00:36:36,240 --> 00:36:38,079
you

848
00:36:38,079 --> 00:36:39,280
and

849
00:36:39,280 --> 00:36:42,079
we are doing this whole uh because we

850
00:36:42,079 --> 00:36:43,200
want to

851
00:36:43,200 --> 00:36:45,920
pay forward to the security community

852
00:36:45,920 --> 00:36:49,359
and uh we really do hope uh that uh

853
00:36:49,359 --> 00:36:51,839
frameworks like this

854
00:36:51,839 --> 00:36:54,000
can help

855
00:36:54,000 --> 00:36:56,720
to put pressure on the vendors to make

856
00:36:56,720 --> 00:37:00,560
their iot devices safer and we are

857
00:37:00,560 --> 00:37:03,440
releasing all of our code in open source

858
00:37:03,440 --> 00:37:05,200
so everyone can

859
00:37:05,200 --> 00:37:07,839
contribute and we also hope that for

860
00:37:07,839 --> 00:37:09,119
example

861
00:37:09,119 --> 00:37:11,520
bug bounty hunters can use these

862
00:37:11,520 --> 00:37:14,200
frameworks to find more and more uh

863
00:37:14,200 --> 00:37:18,879
vulnerabilities uh in the devices

864
00:37:19,119 --> 00:37:23,520
so uh you can find our project on the uh

865
00:37:23,520 --> 00:37:25,520
link on the top

866
00:37:25,520 --> 00:37:27,280
uh but uh

867
00:37:27,280 --> 00:37:28,320
due to

868
00:37:28,320 --> 00:37:32,079
how fast xiaomi works with his emulation

869
00:37:32,079 --> 00:37:34,400
framework i have to admit that our

870
00:37:34,400 --> 00:37:37,040
solution is uh already

871
00:37:37,040 --> 00:37:38,400
outdated

872
00:37:38,400 --> 00:37:42,320
uh we also push the pull request to the

873
00:37:42,320 --> 00:37:44,800
rmx framework but

874
00:37:44,800 --> 00:37:47,119
what really happened right now is that

875
00:37:47,119 --> 00:37:50,400
saumil implemented his solution to

876
00:37:50,400 --> 00:37:51,599
support

877
00:37:51,599 --> 00:37:55,280
mips emulation in his rmx framework and

878
00:37:55,280 --> 00:37:58,480
he renamed his project to mox

879
00:37:58,480 --> 00:38:00,400
so if you want

880
00:38:00,400 --> 00:38:03,119
the real deal right now the best option

881
00:38:03,119 --> 00:38:05,839
you have is to check out uh his uh

882
00:38:05,839 --> 00:38:08,800
project repository and uh use that

883
00:38:08,800 --> 00:38:12,160
version because uh that will be updated

884
00:38:12,160 --> 00:38:14,960
uh and supported more frequently

885
00:38:14,960 --> 00:38:17,280
and uh last but not least don't forget

886
00:38:17,280 --> 00:38:20,240
that showmill will show you his whole

887
00:38:20,240 --> 00:38:22,560
framework and

888
00:38:22,560 --> 00:38:25,359
he will go into the different details of

889
00:38:25,359 --> 00:38:26,800
this framework

890
00:38:26,800 --> 00:38:28,000
today

891
00:38:28,000 --> 00:38:30,480
you just have to visit the break track

892
00:38:30,480 --> 00:38:33,839
at two o'clock and you will see to our

893
00:38:33,839 --> 00:38:37,040
presentation about his framework

894
00:38:37,040 --> 00:38:37,839
so

895
00:38:37,839 --> 00:38:40,560
that's all folks that's all i wanted to

896
00:38:40,560 --> 00:38:42,480
share with you thank you for your

897
00:38:42,480 --> 00:38:44,560
attention and if you have any questions

898
00:38:44,560 --> 00:38:49,880
please use the app to do that thank you

