1
00:00:06,080 --> 00:00:08,960
so hi everybody

2
00:00:10,719 --> 00:00:13,920
so as mentioned uh my talk is about

3
00:00:13,920 --> 00:00:16,400
modern post exploitation and what to do

4
00:00:16,400 --> 00:00:18,560
once you gain access to any account or

5
00:00:18,560 --> 00:00:20,000
access

6
00:00:20,000 --> 00:00:21,920
now you're hearing me better

7
00:00:21,920 --> 00:00:22,800
great

8
00:00:22,800 --> 00:00:23,600
so

9
00:00:23,600 --> 00:00:25,680
my talk is about modern post-secondary

10
00:00:25,680 --> 00:00:27,599
exploitation and what to do once you

11
00:00:27,599 --> 00:00:30,000
gain any level of access and the inner

12
00:00:30,000 --> 00:00:32,159
homage to the classic anime ghost

13
00:00:32,159 --> 00:00:34,880
industrial i named it ghost in the cloud

14
00:00:34,880 --> 00:00:36,000
um

15
00:00:36,000 --> 00:00:38,640
so who am i why am i talking to you i'm

16
00:00:38,640 --> 00:00:40,239
i've been researching and hacking for

17
00:00:40,239 --> 00:00:42,000
many years i've been the city and

18
00:00:42,000 --> 00:00:44,239
co-founder of several companies in the

19
00:00:44,239 --> 00:00:47,120
cyber security domain and before anyone

20
00:00:47,120 --> 00:00:50,399
is running here i am happily married

21
00:00:50,399 --> 00:00:51,199
so

22
00:00:51,199 --> 00:00:53,360
to move on what am i going to talk about

23
00:00:53,360 --> 00:00:55,600
today i'm going to talk a little bit

24
00:00:55,600 --> 00:00:58,160
about introduction of what is iam and i

25
00:00:58,160 --> 00:01:01,359
am is not an aws mechanism iam is a

26
00:01:01,359 --> 00:01:03,600
identity and access management it's the

27
00:01:03,600 --> 00:01:05,600
infrastructure that manages the access

28
00:01:05,600 --> 00:01:08,000
in any application that you have i'm

29
00:01:08,000 --> 00:01:09,280
going to talk about how these

30
00:01:09,280 --> 00:01:12,159
architectures work in organizations and

31
00:01:12,159 --> 00:01:14,640
in applications and what's vulnerable

32
00:01:14,640 --> 00:01:16,799
there i'm going to talk about how access

33
00:01:16,799 --> 00:01:18,640
automation works how access is being

34
00:01:18,640 --> 00:01:20,960
provisioned and why this is vulnerable

35
00:01:20,960 --> 00:01:23,680
and then i'm going to show you a bonuses

36
00:01:23,680 --> 00:01:26,240
of how to troll open scheme servers to

37
00:01:26,240 --> 00:01:28,560
take over the organizations that are

38
00:01:28,560 --> 00:01:31,200
really not careful with their access

39
00:01:31,200 --> 00:01:33,520
following that i'll show an analysis and

40
00:01:33,520 --> 00:01:36,159
taxonomy of these type of attacks uh

41
00:01:36,159 --> 00:01:37,840
which is a growing attack surface we've

42
00:01:37,840 --> 00:01:39,439
seen the solar winds attackers for

43
00:01:39,439 --> 00:01:41,600
attackers for example the group that is

44
00:01:41,600 --> 00:01:44,720
sometimes called nubilium use it and

45
00:01:44,720 --> 00:01:46,799
i'm going to show how to analyze new

46
00:01:46,799 --> 00:01:48,799
applications how to perform a taxonomy

47
00:01:48,799 --> 00:01:51,280
of that and how security tools that are

48
00:01:51,280 --> 00:01:53,520
emerging in these domains work and how

49
00:01:53,520 --> 00:01:55,920
to evade them and lastly i will show you

50
00:01:55,920 --> 00:01:58,640
a demo of how all these ties up based on

51
00:01:58,640 --> 00:02:00,880
a reorganization which i reproduce their

52
00:02:00,880 --> 00:02:02,240
environment

53
00:02:02,240 --> 00:02:04,560
and how to get from an employee's gmail

54
00:02:04,560 --> 00:02:06,960
access to full control and the

55
00:02:06,960 --> 00:02:10,639
exfiltrating all the data about

56
00:02:10,639 --> 00:02:13,840
the customers of that organization

57
00:02:13,840 --> 00:02:16,720
so without further ado let's start

58
00:02:16,720 --> 00:02:19,120
um how do i enterprise im architectures

59
00:02:19,120 --> 00:02:21,040
look first and foremost they look

60
00:02:21,040 --> 00:02:23,200
terrible they are really really really

61
00:02:23,200 --> 00:02:24,319
messed up

62
00:02:24,319 --> 00:02:25,360
and

63
00:02:25,360 --> 00:02:27,760
as part of this um

64
00:02:27,760 --> 00:02:29,680
what you actually see is that an

65
00:02:29,680 --> 00:02:31,040
organization

66
00:02:31,040 --> 00:02:34,319
is similar to software program data or

67
00:02:34,319 --> 00:02:36,319
information is feeding into the

68
00:02:36,319 --> 00:02:39,200
organization different services which in

69
00:02:39,200 --> 00:02:41,920
the case of an organizational people are

70
00:02:41,920 --> 00:02:43,920
processing this data based on certain

71
00:02:43,920 --> 00:02:45,680
permissions that they have the data

72
00:02:45,680 --> 00:02:47,760
flows are defined by the authorizations

73
00:02:47,760 --> 00:02:50,800
and by the i am and let's that

74
00:02:50,800 --> 00:02:52,879
and i try to build this analogy a bit

75
00:02:52,879 --> 00:02:55,120
further so let's take this analogy a

76
00:02:55,120 --> 00:02:58,640
step further what we see now um is sort

77
00:02:58,640 --> 00:03:00,879
of an analogy to network security or

78
00:03:00,879 --> 00:03:03,920
software security it is limited and i am

79
00:03:03,920 --> 00:03:06,239
security what we see is for example a

80
00:03:06,239 --> 00:03:08,400
service or a class is similar to any

81
00:03:08,400 --> 00:03:10,560
actor that you have in your systems a

82
00:03:10,560 --> 00:03:12,959
firewall is similar to the authorization

83
00:03:12,959 --> 00:03:16,000
logic or the im controller an asset of

84
00:03:16,000 --> 00:03:18,080
an object that you protect through iam

85
00:03:18,080 --> 00:03:20,800
permissions is generally a server

86
00:03:20,800 --> 00:03:22,640
database and execution control in the

87
00:03:22,640 --> 00:03:25,040
traditional network world and the most

88
00:03:25,040 --> 00:03:26,720
interesting thing is

89
00:03:26,720 --> 00:03:29,599
self-modifying code or a buffer overflow

90
00:03:29,599 --> 00:03:31,680
is the equal to ability the ability to

91
00:03:31,680 --> 00:03:33,120
change permissions

92
00:03:33,120 --> 00:03:36,000
but in difference from modern software

93
00:03:36,000 --> 00:03:37,840
applications for example where you have

94
00:03:37,840 --> 00:03:39,519
dp

95
00:03:39,519 --> 00:03:41,440
read-only memory uh

96
00:03:41,440 --> 00:03:44,720
the job or protections and so on there

97
00:03:44,720 --> 00:03:47,599
are no protections in the i am domain

98
00:03:47,599 --> 00:03:48,640
mostly

99
00:03:48,640 --> 00:03:49,799
generally

100
00:03:49,799 --> 00:03:52,400
99.9 percent of the organizations that i

101
00:03:52,400 --> 00:03:53,519
have seen

102
00:03:53,519 --> 00:03:56,000
their im system acts as self-modifying

103
00:03:56,000 --> 00:03:58,879
code that means that you can literally

104
00:03:58,879 --> 00:04:01,120
see what's happening and modify the

105
00:04:01,120 --> 00:04:03,760
program as it works modify the behavior

106
00:04:03,760 --> 00:04:05,280
of the rules of access in the

107
00:04:05,280 --> 00:04:07,760
organization

108
00:04:07,760 --> 00:04:10,000
so let's talk a little bit about how

109
00:04:10,000 --> 00:04:12,319
these architectures look and start from

110
00:04:12,319 --> 00:04:14,959
the past once upon a time used to be

111
00:04:14,959 --> 00:04:18,000
that there were users connecting to an

112
00:04:18,000 --> 00:04:19,358
application

113
00:04:19,358 --> 00:04:21,759
this is not working well

114
00:04:21,759 --> 00:04:23,440
okay users were connecting to

115
00:04:23,440 --> 00:04:25,919
applications the applications were

116
00:04:25,919 --> 00:04:27,759
connecting to an ldap directory like

117
00:04:27,759 --> 00:04:30,320
active directory and that directory

118
00:04:30,320 --> 00:04:31,759
allowed you to

119
00:04:31,759 --> 00:04:35,600
define the access and the authorization

120
00:04:35,600 --> 00:04:37,919
then came hardware capital human capital

121
00:04:37,919 --> 00:04:40,639
management or human resource information

122
00:04:40,639 --> 00:04:43,919
systems and those started to provide

123
00:04:43,919 --> 00:04:46,479
attributes that control the access to

124
00:04:46,479 --> 00:04:49,440
those uh uh to to the ldap directory and

125
00:04:49,440 --> 00:04:51,120
the ldap directory control the access

126
00:04:51,120 --> 00:04:53,520
based on these attributes but there's

127
00:04:53,520 --> 00:04:54,960
one thing that you you need to pay

128
00:04:54,960 --> 00:04:56,479
attention to

129
00:04:56,479 --> 00:04:58,000
an hr

130
00:04:58,000 --> 00:05:00,479
information system or an hcm is an

131
00:05:00,479 --> 00:05:02,560
application in and of itself so it's

132
00:05:02,560 --> 00:05:04,479
controlling the access

133
00:05:04,479 --> 00:05:05,680
to the

134
00:05:05,680 --> 00:05:07,199
active directory but at the same time

135
00:05:07,199 --> 00:05:09,199
it's controlled by the active directory

136
00:05:09,199 --> 00:05:11,600
creating a cycle and these cycles are

137
00:05:11,600 --> 00:05:14,080
very dangerous because those are the

138
00:05:14,080 --> 00:05:16,960
places where potential escalation passes

139
00:05:16,960 --> 00:05:18,080
and the

140
00:05:18,080 --> 00:05:21,120
wall chaining attacks begin

141
00:05:21,120 --> 00:05:25,199
so to move a little bit further

142
00:05:25,199 --> 00:05:28,000
going more modern we started having ssos

143
00:05:28,000 --> 00:05:30,479
and directories and these were connected

144
00:05:30,479 --> 00:05:32,720
through federation to different

145
00:05:32,720 --> 00:05:35,280
applications now federation generally

146
00:05:35,280 --> 00:05:38,960
comes in two flavors one is well the

147
00:05:38,960 --> 00:05:42,400
application itself saves the users knows

148
00:05:42,400 --> 00:05:44,639
who is the person and the federation is

149
00:05:44,639 --> 00:05:47,360
only serves to identify the user that is

150
00:05:47,360 --> 00:05:49,680
saved within the application the other

151
00:05:49,680 --> 00:05:52,000
for example the way aws is commonly

152
00:05:52,000 --> 00:05:55,680
implementing this is based on uh

153
00:05:55,680 --> 00:05:57,919
granting access to the saml assertion

154
00:05:57,919 --> 00:06:00,400
arriving from the federation so the user

155
00:06:00,400 --> 00:06:02,560
itself is unknown to the application the

156
00:06:02,560 --> 00:06:04,800
application whatever assertion it got

157
00:06:04,800 --> 00:06:08,000
from the sso provider is trust is

158
00:06:08,000 --> 00:06:10,240
pricing of it and naturally summer is

159
00:06:10,240 --> 00:06:12,160
not the only federation method actually

160
00:06:12,160 --> 00:06:14,240
there are a lot of federation methods

161
00:06:14,240 --> 00:06:16,639
still in news even today while samuel is

162
00:06:16,639 --> 00:06:18,800
clearly the winner

163
00:06:18,800 --> 00:06:20,639
last thing to mention

164
00:06:20,639 --> 00:06:22,800
you don't only saw some hr applications

165
00:06:22,800 --> 00:06:25,039
sourcing attributes that control access

166
00:06:25,039 --> 00:06:26,720
is done for many other different

167
00:06:26,720 --> 00:06:29,360
applications

168
00:06:29,759 --> 00:06:31,600
but before we even talk about this

169
00:06:31,600 --> 00:06:33,680
further i just want to remind to

170
00:06:33,680 --> 00:06:35,840
everybody sso support is also very

171
00:06:35,840 --> 00:06:39,039
costly it's not free uh and this site is

172
00:06:39,039 --> 00:06:40,600
fairly cute this is

173
00:06:40,600 --> 00:06:43,440
sso.tax it's an open source gita project

174
00:06:43,440 --> 00:06:45,680
and i encourage everybody here to

175
00:06:45,680 --> 00:06:48,000
contribute to it i have no disclaimer i

176
00:06:48,000 --> 00:06:49,599
have no affiliation with that project i

177
00:06:49,599 --> 00:06:51,039
just like what they did

178
00:06:51,039 --> 00:06:52,160
um

179
00:06:52,160 --> 00:06:54,800
and what's really cool here is that they

180
00:06:54,800 --> 00:06:57,360
went and they priced what does it cost

181
00:06:57,360 --> 00:07:00,240
to get more to get the full ssl support

182
00:07:00,240 --> 00:07:02,560
from the vendor for example in github to

183
00:07:02,560 --> 00:07:05,039
get full ssl support you go from four

184
00:07:05,039 --> 00:07:08,160
dollar per user to 21 per user

185
00:07:08,160 --> 00:07:10,240
which makes it

186
00:07:10,240 --> 00:07:12,000
something that a lot of organizations

187
00:07:12,000 --> 00:07:13,520
won't spend the money on because it's

188
00:07:13,520 --> 00:07:15,840
not really worth it

189
00:07:15,840 --> 00:07:18,080
going back to the talk and assuming you

190
00:07:18,080 --> 00:07:20,960
really still have ssl for everything the

191
00:07:20,960 --> 00:07:23,759
and federation let's add a directory

192
00:07:23,759 --> 00:07:26,720
that is separate from the sso um

193
00:07:26,720 --> 00:07:28,639
in this case the directory is for

194
00:07:28,639 --> 00:07:30,960
example an ldap directory like active

195
00:07:30,960 --> 00:07:33,599
directory it syncs unless you are doing

196
00:07:33,599 --> 00:07:37,199
a really crappy job with your sso uh

197
00:07:37,199 --> 00:07:39,360
that might also have a directory and

198
00:07:39,360 --> 00:07:40,960
controlling the access and then the

199
00:07:40,960 --> 00:07:42,400
sourcing can happen both to the

200
00:07:42,400 --> 00:07:44,879
directory and to the

201
00:07:44,879 --> 00:07:47,599
ssl application itself and this creates

202
00:07:47,599 --> 00:07:50,240
a lot of mess and potential conflicts of

203
00:07:50,240 --> 00:07:52,960
attributes and problems in sync

204
00:07:52,960 --> 00:07:55,520
which tends to cause a lot a variety of

205
00:07:55,520 --> 00:07:57,199
problems

206
00:07:57,199 --> 00:07:58,720
as we move on

207
00:07:58,720 --> 00:08:01,120
uh provisioning became more prevalent

208
00:08:01,120 --> 00:08:02,400
and it's becoming more and more

209
00:08:02,400 --> 00:08:04,639
prevalent in this world all the time and

210
00:08:04,639 --> 00:08:06,479
provisioning our is protocols like

211
00:08:06,479 --> 00:08:07,520
scheme

212
00:08:07,520 --> 00:08:09,520
i don't know how much how familiar you

213
00:08:09,520 --> 00:08:11,120
is the skin protocol but the skin

214
00:08:11,120 --> 00:08:13,360
protocol is a protocol that is used to

215
00:08:13,360 --> 00:08:16,560
move the certain types of data

216
00:08:16,560 --> 00:08:18,639
into the application in particular it

217
00:08:18,639 --> 00:08:21,280
pushes groups users and attributes and

218
00:08:21,280 --> 00:08:23,360
it's a bidirectional protocol so it also

219
00:08:23,360 --> 00:08:25,840
supports pooling in certain cases not

220
00:08:25,840 --> 00:08:27,520
all applications support all the

221
00:08:27,520 --> 00:08:29,360
features of scheme even if they support

222
00:08:29,360 --> 00:08:31,759
scheme uh what you see on their screen

223
00:08:31,759 --> 00:08:34,000
right now are the statistics that i made

224
00:08:34,000 --> 00:08:35,919
based on the octa integration network

225
00:08:35,919 --> 00:08:37,839
and yes i skipped their site if this is

226
00:08:37,839 --> 00:08:39,599
a violation of the terms of service and

227
00:08:39,599 --> 00:08:42,399
i apologize uh but

228
00:08:42,399 --> 00:08:44,640
the point here is to show you that

229
00:08:44,640 --> 00:08:46,240
applications support different things

230
00:08:46,240 --> 00:08:47,839
and they are not in sync

231
00:08:47,839 --> 00:08:49,360
not all applications that support

232
00:08:49,360 --> 00:08:50,399
updates

233
00:08:50,399 --> 00:08:52,640
a user account support also deactivating

234
00:08:52,640 --> 00:08:55,440
the user account and vice versa

235
00:08:55,440 --> 00:08:58,000
and not all applications support group

236
00:08:58,000 --> 00:09:00,640
pushing or group linking which are

237
00:09:00,640 --> 00:09:02,880
to my personal opinion unclear why they

238
00:09:02,880 --> 00:09:05,519
are separate because group pushing is

239
00:09:05,519 --> 00:09:08,160
the act of adding a group from the ssl

240
00:09:08,160 --> 00:09:11,360
server into the application and managing

241
00:09:11,360 --> 00:09:14,480
the users group linking literally links

242
00:09:14,480 --> 00:09:16,959
the to a certain group from the ssl to

243
00:09:16,959 --> 00:09:18,720
the group in the application and updates

244
00:09:18,720 --> 00:09:21,600
the users based on the sso now this is

245
00:09:21,600 --> 00:09:23,519
first and foremost a source for

246
00:09:23,519 --> 00:09:26,800
confusion uh but in addition to that it

247
00:09:26,800 --> 00:09:29,040
doesn't necessarily cover all sorts of

248
00:09:29,040 --> 00:09:30,800
time of check time of use scenario as

249
00:09:30,800 --> 00:09:33,200
well a user was added in one end and

250
00:09:33,200 --> 00:09:35,279
don't on the other or was removed on one

251
00:09:35,279 --> 00:09:38,480
end and not on the other um

252
00:09:38,480 --> 00:09:39,279
so

253
00:09:39,279 --> 00:09:41,839
this is about provisioning and

254
00:09:41,839 --> 00:09:44,240
provisioning is not all that's happening

255
00:09:44,240 --> 00:09:46,320
right and enterprise applications are

256
00:09:46,320 --> 00:09:49,200
linked from one to the other

257
00:09:49,200 --> 00:09:51,839
for example uh in the here what we see

258
00:09:51,839 --> 00:09:55,600
is jenkins is connected to github where

259
00:09:55,600 --> 00:09:57,839
it reads the data from about

260
00:09:57,839 --> 00:10:00,000
repositories and then it pushes this

261
00:10:00,000 --> 00:10:03,360
data into aws but in most organizations

262
00:10:03,360 --> 00:10:05,600
it's also running inside the aws

263
00:10:05,600 --> 00:10:08,240
infrastructure that it is updating

264
00:10:08,240 --> 00:10:11,360
so it both controls it and is uh able to

265
00:10:11,360 --> 00:10:13,600
control it and it also creates an

266
00:10:13,600 --> 00:10:15,680
environment of permissions a user that

267
00:10:15,680 --> 00:10:18,320
has access to github might use jenkins

268
00:10:18,320 --> 00:10:21,120
to gain access to aws or will use it in

269
00:10:21,120 --> 00:10:23,760
many cases

270
00:10:24,880 --> 00:10:27,440
so let's add a little bit more

271
00:10:27,440 --> 00:10:29,360
complexity because organizations have to

272
00:10:29,360 --> 00:10:31,200
have complexity in their architecture

273
00:10:31,200 --> 00:10:33,760
let's let's add external applications in

274
00:10:33,760 --> 00:10:35,279
addition to the internal eclipse

275
00:10:35,279 --> 00:10:37,519
applications that you have within your

276
00:10:37,519 --> 00:10:40,000
organization uh that you bought there

277
00:10:40,000 --> 00:10:41,279
are external

278
00:10:41,279 --> 00:10:43,440
applications that are connected to those

279
00:10:43,440 --> 00:10:45,600
for example box is commonly connected to

280
00:10:45,600 --> 00:10:47,920
salesforce or

281
00:10:47,920 --> 00:10:50,000
calendar is commonly connected to office

282
00:10:50,000 --> 00:10:52,640
365 and google calendar

283
00:10:52,640 --> 00:10:54,560
and through these connections what

284
00:10:54,560 --> 00:10:57,040
happens is that additional permissions

285
00:10:57,040 --> 00:10:59,279
that you didn't necessarily intend to

286
00:10:59,279 --> 00:11:01,760
are created and potentially also data

287
00:11:01,760 --> 00:11:04,079
leaks

288
00:11:04,079 --> 00:11:04,880
but

289
00:11:04,880 --> 00:11:08,160
actually it gets worse because people

290
00:11:08,160 --> 00:11:10,079
the organizations are provisioning for

291
00:11:10,079 --> 00:11:13,040
multiple applications and this is where

292
00:11:13,040 --> 00:11:15,120
it becomes really really crazy you don't

293
00:11:15,120 --> 00:11:16,800
have to provision only from the hr

294
00:11:16,800 --> 00:11:18,560
application it's actually a fairly

295
00:11:18,560 --> 00:11:20,320
common practice to provision from

296
00:11:20,320 --> 00:11:22,000
salesforce and you don't have to

297
00:11:22,000 --> 00:11:23,519
provision to the same target you can

298
00:11:23,519 --> 00:11:25,680
provision to your directory and you can

299
00:11:25,680 --> 00:11:28,640
provision to your sso um and as you

300
00:11:28,640 --> 00:11:30,560
provision these attributes and they

301
00:11:30,560 --> 00:11:32,399
control the provisioning of access and

302
00:11:32,399 --> 00:11:33,839
the management of access in these

303
00:11:33,839 --> 00:11:37,360
applications it becomes and becomes

304
00:11:37,360 --> 00:11:39,360
the chaos that you see on screen right

305
00:11:39,360 --> 00:11:41,360
and the chaos doesn't really end here

306
00:11:41,360 --> 00:11:43,519
because a lot of organizations actually

307
00:11:43,519 --> 00:11:45,600
work with multiple sso vendors at the

308
00:11:45,600 --> 00:11:47,920
same time and multiple ldap directories

309
00:11:47,920 --> 00:11:50,720
at the same time and or any type of

310
00:11:50,720 --> 00:11:53,519
directory not necessarily eldar now

311
00:11:53,519 --> 00:11:56,800
when i say this you're probably thinking

312
00:11:56,800 --> 00:11:58,560
is bullshitting us right

313
00:11:58,560 --> 00:12:00,000
nobody would work with such in the

314
00:12:00,000 --> 00:12:02,720
complex architecture so i drew the

315
00:12:02,720 --> 00:12:05,279
architecture of a real customer

316
00:12:05,279 --> 00:12:08,639
that we had two years ago and this is

317
00:12:08,639 --> 00:12:11,600
also the drawing is taking

318
00:12:11,600 --> 00:12:13,760
some uh

319
00:12:13,760 --> 00:12:15,760
simplification still simplifying some of

320
00:12:15,760 --> 00:12:18,320
the stuff uh so for example what you see

321
00:12:18,320 --> 00:12:20,160
here there are 180 apps that i

322
00:12:20,160 --> 00:12:22,959
completely ignored uh for example slack

323
00:12:22,959 --> 00:12:24,639
that is literally connected to

324
00:12:24,639 --> 00:12:25,839
everything

325
00:12:25,839 --> 00:12:27,279
um but

326
00:12:27,279 --> 00:12:29,680
just to take a look at what we see

327
00:12:29,680 --> 00:12:32,000
they had three different ssl providers

328
00:12:32,000 --> 00:12:33,279
connected to three different

329
00:12:33,279 --> 00:12:35,440
environments

330
00:12:35,440 --> 00:12:37,200
all of those had a certain level of

331
00:12:37,200 --> 00:12:39,760
directory the directory sync between

332
00:12:39,760 --> 00:12:41,600
google which was the previous sso

333
00:12:41,600 --> 00:12:44,320
provider and octa which was their new

334
00:12:44,320 --> 00:12:47,360
ssl provider was broken meaning accounts

335
00:12:47,360 --> 00:12:49,760
that were shut down in octa the main sso

336
00:12:49,760 --> 00:12:52,000
provider and directory provider were not

337
00:12:52,000 --> 00:12:53,920
shut down in google

338
00:12:53,920 --> 00:12:55,600
and at the same time

339
00:12:55,600 --> 00:12:58,800
aws maintained two federation options at

340
00:12:58,800 --> 00:13:01,120
the same time you could log in federated

341
00:13:01,120 --> 00:13:03,279
through the google legacy method and sue

342
00:13:03,279 --> 00:13:05,920
the new federations of octa

343
00:13:05,920 --> 00:13:08,000
which created a lot of mess

344
00:13:08,000 --> 00:13:10,480
in their environment and in addition you

345
00:13:10,480 --> 00:13:12,720
had multiple applications like github

346
00:13:12,720 --> 00:13:15,120
which bring your own identity which is a

347
00:13:15,120 --> 00:13:17,360
complete problem for organizations

348
00:13:17,360 --> 00:13:19,760
because developers come with accounts

349
00:13:19,760 --> 00:13:21,680
that can't be correlated to a specific

350
00:13:21,680 --> 00:13:23,600
person in the organization and

351
00:13:23,600 --> 00:13:26,240
it creates a whole chaos of management

352
00:13:26,240 --> 00:13:28,320
in that sense

353
00:13:28,320 --> 00:13:30,160
uh and lastly they had of course

354
00:13:30,160 --> 00:13:32,160
external applications connected they

355
00:13:32,160 --> 00:13:33,920
were sourcing at the same time from

356
00:13:33,920 --> 00:13:36,880
salesforce and above to octa but that

357
00:13:36,880 --> 00:13:38,959
didn't necessarily translate to access

358
00:13:38,959 --> 00:13:41,519
in google and vice versa google access

359
00:13:41,519 --> 00:13:43,600
didn't necessarily have updated

360
00:13:43,600 --> 00:13:46,160
attributes from these applications

361
00:13:46,160 --> 00:13:47,680
meaning people that should have lost

362
00:13:47,680 --> 00:13:50,719
access didn't lose it

363
00:13:52,480 --> 00:13:53,360
so

364
00:13:53,360 --> 00:13:56,800
uh i'll take a puzzle and show you as a

365
00:13:56,800 --> 00:13:58,160
bonus

366
00:13:58,160 --> 00:13:59,600
item just

367
00:13:59,600 --> 00:14:02,160
sharing about how to troll open scheme

368
00:14:02,160 --> 00:14:05,600
servers so as i mentioned scheme is a

369
00:14:05,600 --> 00:14:07,680
protocol that is meant to assist

370
00:14:07,680 --> 00:14:12,399
provisioning of identities groups and

371
00:14:12,399 --> 00:14:14,720
attributes to from

372
00:14:14,720 --> 00:14:17,199
central directories to your applications

373
00:14:17,199 --> 00:14:20,480
but as you do this um you deci and i

374
00:14:20,480 --> 00:14:22,959
just scroll the internet fairly randomly

375
00:14:22,959 --> 00:14:25,120
or use chodan or use there some google

376
00:14:25,120 --> 00:14:28,000
docking to basically find potential

377
00:14:28,000 --> 00:14:29,920
scheme servers that would have either

378
00:14:29,920 --> 00:14:31,760
default authentication or no

379
00:14:31,760 --> 00:14:33,440
authentication at all

380
00:14:33,440 --> 00:14:35,920
uh and in july 20 when i was supposed to

381
00:14:35,920 --> 00:14:38,639
speak a little bit before that in

382
00:14:38,639 --> 00:14:40,560
hacking the box a previous

383
00:14:40,560 --> 00:14:41,760
presentation

384
00:14:41,760 --> 00:14:45,040
um there were 233 of those and after the

385
00:14:45,040 --> 00:14:46,720
presentation didn't happen because of

386
00:14:46,720 --> 00:14:49,760
kovid i decided to basically do what you

387
00:14:49,760 --> 00:14:52,000
see here in the jupiter notebook which

388
00:14:52,000 --> 00:14:55,040
is to basically post a request to all of

389
00:14:55,040 --> 00:14:57,600
these servers and let them know by

390
00:14:57,600 --> 00:15:01,360
creating a user uh that they have

391
00:15:01,360 --> 00:15:03,360
an open scheme server

392
00:15:03,360 --> 00:15:05,680
excuse me and as i

393
00:15:05,680 --> 00:15:06,959
did this

394
00:15:06,959 --> 00:15:07,839
what

395
00:15:07,839 --> 00:15:09,680
actually happened which is fairly nice

396
00:15:09,680 --> 00:15:12,240
is that in november 21 when i tested

397
00:15:12,240 --> 00:15:15,519
these uh same queries again only 26 uh

398
00:15:15,519 --> 00:15:17,519
results returned to my previous search

399
00:15:17,519 --> 00:15:20,000
as these 26 are still vulnerable i'm not

400
00:15:20,000 --> 00:15:22,160
giving you the search but you're smart

401
00:15:22,160 --> 00:15:23,839
people i'm sure that if you want to you

402
00:15:23,839 --> 00:15:25,360
will be able to

403
00:15:25,360 --> 00:15:29,199
find the same results or even better

404
00:15:29,680 --> 00:15:30,560
so

405
00:15:30,560 --> 00:15:33,199
let's talk a last topic about

406
00:15:33,199 --> 00:15:36,079
um automating access before we get to

407
00:15:36,079 --> 00:15:38,240
actually how to analyze applications and

408
00:15:38,240 --> 00:15:41,040
how to act them so automation is a good

409
00:15:41,040 --> 00:15:44,160
thing in general it's a it reduces the

410
00:15:44,160 --> 00:15:47,040
amount of human mistakes it saves effort

411
00:15:47,040 --> 00:15:49,600
but it also does an important thing in

412
00:15:49,600 --> 00:15:52,240
the area of access management which is

413
00:15:52,240 --> 00:15:54,000
providing us with a really fun attack

414
00:15:54,000 --> 00:15:55,600
surface

415
00:15:55,600 --> 00:15:56,639
and

416
00:15:56,639 --> 00:15:58,079
it starts from

417
00:15:58,079 --> 00:15:59,759
automating attribute based access

418
00:15:59,759 --> 00:16:00,800
control

419
00:16:00,800 --> 00:16:02,720
so attributes based access

420
00:16:02,720 --> 00:16:04,240
and there are different types of

421
00:16:04,240 --> 00:16:06,240
attribute based access control the

422
00:16:06,240 --> 00:16:08,959
dynamic groups uh which is a concept for

423
00:16:08,959 --> 00:16:11,279
microsoft but there are equivalents in

424
00:16:11,279 --> 00:16:13,040
many other places

425
00:16:13,040 --> 00:16:15,519
which is basically means that the group

426
00:16:15,519 --> 00:16:17,920
membership is set based on attributes of

427
00:16:17,920 --> 00:16:20,320
the identity and that means that

428
00:16:20,320 --> 00:16:21,759
controlling the attributes of that

429
00:16:21,759 --> 00:16:24,639
identity allows you to control

430
00:16:24,639 --> 00:16:26,720
all the access that this identity has

431
00:16:26,720 --> 00:16:29,040
for example if a certain access is

432
00:16:29,040 --> 00:16:31,040
assigned to someone that has the title

433
00:16:31,040 --> 00:16:34,399
co it's highly likely and i've seen it

434
00:16:34,399 --> 00:16:36,800
in about 95 percent of the organizations

435
00:16:36,800 --> 00:16:39,360
that i worked with uh that you can

436
00:16:39,360 --> 00:16:42,320
literally have some hr employee grant

437
00:16:42,320 --> 00:16:44,399
anyone the title co

438
00:16:44,399 --> 00:16:46,160
for him to have almost all the access

439
00:16:46,160 --> 00:16:47,759
that the ceo has

440
00:16:47,759 --> 00:16:50,399
it's no work it's not hard in some cases

441
00:16:50,399 --> 00:16:52,399
there is also self-service portals

442
00:16:52,399 --> 00:16:54,560
allowing the users to grant themselves

443
00:16:54,560 --> 00:16:58,240
the titles um and once they grant it

444
00:16:58,240 --> 00:17:00,079
they are basically granting themselves

445
00:17:00,079 --> 00:17:01,440
the access

446
00:17:01,440 --> 00:17:02,839
that comes with the

447
00:17:02,839 --> 00:17:07,359
title and in it is almost certain i i

448
00:17:07,359 --> 00:17:09,599
know of no company except mine and this

449
00:17:09,599 --> 00:17:12,720
is not an advertisement that literally

450
00:17:12,720 --> 00:17:13,520
uh

451
00:17:13,520 --> 00:17:16,799
monitors this so in 99.9 percent of the

452
00:17:16,799 --> 00:17:19,359
cases nobody is monitoring this access

453
00:17:19,359 --> 00:17:22,079
um and in addition to that there are

454
00:17:22,079 --> 00:17:24,000
other things that you can consider like

455
00:17:24,000 --> 00:17:26,400
how do people add manually a certain

456
00:17:26,400 --> 00:17:28,319
person that doesn't match the rule

457
00:17:28,319 --> 00:17:30,559
because they have an exception into that

458
00:17:30,559 --> 00:17:33,360
group uh and the interesting thing is

459
00:17:33,360 --> 00:17:36,480
usually they do it using um rules that

460
00:17:36,480 --> 00:17:38,880
are not really smart uh because for

461
00:17:38,880 --> 00:17:40,480
example they might rely on the phone

462
00:17:40,480 --> 00:17:43,120
number or they might rely on the fax

463
00:17:43,120 --> 00:17:44,960
number these are real examples that they

464
00:17:44,960 --> 00:17:48,000
saw in real organizations uh because

465
00:17:48,000 --> 00:17:50,480
it's a pain to find the object id in

466
00:17:50,480 --> 00:17:52,720
active directory for example or in octa

467
00:17:52,720 --> 00:17:56,160
there is no object id at all um

468
00:17:56,160 --> 00:17:57,039
and

469
00:17:57,039 --> 00:17:58,799
then there are also other changes like

470
00:17:58,799 --> 00:18:00,559
cascading rules

471
00:18:00,559 --> 00:18:03,120
for example your membership in certain

472
00:18:03,120 --> 00:18:04,960
type of group could depend on the

473
00:18:04,960 --> 00:18:07,280
membership in another type of group

474
00:18:07,280 --> 00:18:08,160
so

475
00:18:08,160 --> 00:18:09,919
before you know that the first group

476
00:18:09,919 --> 00:18:12,480
actually is provisioned you won't know

477
00:18:12,480 --> 00:18:14,559
that the person can only also access the

478
00:18:14,559 --> 00:18:17,039
second group based on that uh and this

479
00:18:17,039 --> 00:18:19,679
chain becomes invisible to any defender

480
00:18:19,679 --> 00:18:21,520
and only visible to you as detective

481
00:18:21,520 --> 00:18:24,320
attackers and lastly as i mentioned

482
00:18:24,320 --> 00:18:26,960
before attribute linking and sourcing is

483
00:18:26,960 --> 00:18:29,280
extremely dangerous because it provides

484
00:18:29,280 --> 00:18:31,679
people with a specific permission for

485
00:18:31,679 --> 00:18:33,760
example the person that can assign

486
00:18:33,760 --> 00:18:36,880
people a territory in salesforce because

487
00:18:36,880 --> 00:18:38,720
this territory is an attribute and

488
00:18:38,720 --> 00:18:40,080
because this attribute will be

489
00:18:40,080 --> 00:18:42,000
provisioned to act as and from octa

490
00:18:42,000 --> 00:18:45,200
control access to other applications it

491
00:18:45,200 --> 00:18:47,840
generates a huge vulnerability in a tech

492
00:18:47,840 --> 00:18:50,000
surface that is based on personnel that

493
00:18:50,000 --> 00:18:51,760
are not necessarily senior in the

494
00:18:51,760 --> 00:18:53,919
organization and that are very hard to

495
00:18:53,919 --> 00:18:56,720
identify

496
00:18:56,720 --> 00:18:57,679
so

497
00:18:57,679 --> 00:18:59,280
other than this we can also have fun

498
00:18:59,280 --> 00:19:01,679
with groups the i mentioned before group

499
00:19:01,679 --> 00:19:03,840
push and go blinking behave differently

500
00:19:03,840 --> 00:19:05,600
and this is a

501
00:19:05,600 --> 00:19:08,000
really interesting group linking doesn't

502
00:19:08,000 --> 00:19:10,480
have to match the names meaning i can

503
00:19:10,480 --> 00:19:12,720
choose a certain group that is not

504
00:19:12,720 --> 00:19:15,440
benign at all my personal group and

505
00:19:15,440 --> 00:19:18,880
connect it to a very malicious goal a

506
00:19:18,880 --> 00:19:21,200
very important group like

507
00:19:21,200 --> 00:19:23,039
my

508
00:19:23,039 --> 00:19:26,240
top managers in in the domains in github

509
00:19:26,240 --> 00:19:28,720
uh and this creates a again a situation

510
00:19:28,720 --> 00:19:30,480
where you can't see the access that was

511
00:19:30,480 --> 00:19:33,360
linked uh there are also challenges with

512
00:19:33,360 --> 00:19:34,799
time of check and time of use that i

513
00:19:34,799 --> 00:19:36,799
already mentioned there's a there are

514
00:19:36,799 --> 00:19:38,640
charges with prioritization of the

515
00:19:38,640 --> 00:19:41,440
access in groups and wars uh who wins

516
00:19:41,440 --> 00:19:43,440
when there are several uh

517
00:19:43,440 --> 00:19:45,919
permissions at the same time

518
00:19:45,919 --> 00:19:48,320
and group things which tends to fail in

519
00:19:48,320 --> 00:19:50,480
a lot of situations there are non-issues

520
00:19:50,480 --> 00:19:53,360
for example thinking google to octa octa

521
00:19:53,360 --> 00:19:56,000
to ad and so on

522
00:19:56,000 --> 00:19:58,480
and lastly very common

523
00:19:58,480 --> 00:20:00,400
are public groups or publicly

524
00:20:00,400 --> 00:20:02,799
administered this means that

525
00:20:02,799 --> 00:20:05,120
public group means that anyone can join

526
00:20:05,120 --> 00:20:07,760
this group voluntarily like you can just

527
00:20:07,760 --> 00:20:10,000
go in active directory or

528
00:20:10,000 --> 00:20:13,520
in office 365 or in octa and

529
00:20:13,520 --> 00:20:16,640
join the group and this surprisingly is

530
00:20:16,640 --> 00:20:18,720
a default setting in a lot of cases in

531
00:20:18,720 --> 00:20:21,120
office 365 when you create groups

532
00:20:21,120 --> 00:20:22,640
meaning that a lot of groups in office

533
00:20:22,640 --> 00:20:25,280
365 unintentionally are actually

534
00:20:25,280 --> 00:20:27,200
granting access not only to the people

535
00:20:27,200 --> 00:20:29,039
in the group but to anyone that will

536
00:20:29,039 --> 00:20:31,200
decide to join that group

537
00:20:31,200 --> 00:20:33,760
at the same time

538
00:20:33,760 --> 00:20:35,600
you can also have publicly administered

539
00:20:35,600 --> 00:20:38,480
groups this is common in google meaning

540
00:20:38,480 --> 00:20:40,960
anyone in the group can grant other

541
00:20:40,960 --> 00:20:42,559
people access to the group not

542
00:20:42,559 --> 00:20:44,240
necessarily the person that is supposed

543
00:20:44,240 --> 00:20:46,159
to grant it

544
00:20:46,159 --> 00:20:49,039
and i can go through other similar

545
00:20:49,039 --> 00:20:52,400
issues the most fun one in this slide is

546
00:20:52,400 --> 00:20:54,960
the just in time usual creation allowed

547
00:20:54,960 --> 00:20:57,360
for social logins in some applications

548
00:20:57,360 --> 00:20:59,520
octa for example supports this

549
00:20:59,520 --> 00:21:03,120
um and but it comes down to one very

550
00:21:03,120 --> 00:21:05,679
simple question who guards the guardians

551
00:21:05,679 --> 00:21:07,280
uh which is the motto that you see in

552
00:21:07,280 --> 00:21:09,120
latin hill nobody is guarding the

553
00:21:09,120 --> 00:21:12,480
guardians i am leo the access and

554
00:21:12,480 --> 00:21:14,799
authorization layer is the guardians of

555
00:21:14,799 --> 00:21:16,640
access to your critical assets in

556
00:21:16,640 --> 00:21:19,200
organizations but nobody is monitoring

557
00:21:19,200 --> 00:21:22,400
it nobody is guarding it

558
00:21:23,200 --> 00:21:24,080
so

559
00:21:24,080 --> 00:21:26,400
that concludes the first part let's talk

560
00:21:26,400 --> 00:21:28,559
a little bit about the taxonomy and

561
00:21:28,559 --> 00:21:30,799
analysis

562
00:21:30,799 --> 00:21:34,400
and it begins with uh trying to as any

563
00:21:34,400 --> 00:21:36,400
one of you tried to apply the miter

564
00:21:36,400 --> 00:21:39,919
attack matrix uh to uh something in sas

565
00:21:39,919 --> 00:21:42,640
orios because it feels a little bit like

566
00:21:42,640 --> 00:21:45,440
this animal i have no idea how to name

567
00:21:45,440 --> 00:21:48,320
it uh it's a shark it's a dog i don't

568
00:21:48,320 --> 00:21:50,480
know what is it but uh

569
00:21:50,480 --> 00:21:52,000
that's the way it feels

570
00:21:52,000 --> 00:21:53,200
so

571
00:21:53,200 --> 00:21:55,520
generally what i do want you to think

572
00:21:55,520 --> 00:21:57,679
whenever you face a new application that

573
00:21:57,679 --> 00:22:00,240
you need to analyze and understand how

574
00:22:00,240 --> 00:22:02,559
to attack or how to defend

575
00:22:02,559 --> 00:22:04,559
um the first question that you need to

576
00:22:04,559 --> 00:22:06,960
ask is it's a complex landscape just

577
00:22:06,960 --> 00:22:09,360
like this picture how to understand the

578
00:22:09,360 --> 00:22:11,440
landscape and to be to know what to do

579
00:22:11,440 --> 00:22:14,400
in it is a very challenging but you need

580
00:22:14,400 --> 00:22:16,559
to build a graph of how the permissions

581
00:22:16,559 --> 00:22:18,799
work there are two choices here you can

582
00:22:18,799 --> 00:22:20,640
build a graph that is dedicated to a

583
00:22:20,640 --> 00:22:22,880
specific target which is easier and you

584
00:22:22,880 --> 00:22:24,960
can build a generic graph that will

585
00:22:24,960 --> 00:22:26,799
cover the way the permissions in the

586
00:22:26,799 --> 00:22:28,559
application work

587
00:22:28,559 --> 00:22:30,640
um i'm going to try and explain a little

588
00:22:30,640 --> 00:22:32,400
bit the methodology that i use to build

589
00:22:32,400 --> 00:22:33,600
this graph

590
00:22:33,600 --> 00:22:35,679
so it begins with finding the asset of

591
00:22:35,679 --> 00:22:37,120
interest

592
00:22:37,120 --> 00:22:39,280
and once you find it

593
00:22:39,280 --> 00:22:41,360
an asset for me is anything that can be

594
00:22:41,360 --> 00:22:42,799
controlled

595
00:22:42,799 --> 00:22:44,480
you need to find the actors or

596
00:22:44,480 --> 00:22:46,880
identities anyone that can do actions

597
00:22:46,880 --> 00:22:48,720
within that application

598
00:22:48,720 --> 00:22:51,360
and find authentication methods that are

599
00:22:51,360 --> 00:22:53,360
supported for each analyze the

600
00:22:53,360 --> 00:22:55,600
federation methods if those exist

601
00:22:55,600 --> 00:22:57,600
and map the roles and the groups that

602
00:22:57,600 --> 00:22:59,919
exist eventually

603
00:22:59,919 --> 00:23:02,080
get to the point that you understand the

604
00:23:02,080 --> 00:23:04,480
the passage through the application it's

605
00:23:04,480 --> 00:23:06,880
very important to account to one thing

606
00:23:06,880 --> 00:23:09,200
there is a duality which i have talked

607
00:23:09,200 --> 00:23:11,280
about before the duality that creates

608
00:23:11,280 --> 00:23:14,000
the cycles the actors and the assets

609
00:23:14,000 --> 00:23:15,919
could be the same having permission to

610
00:23:15,919 --> 00:23:18,000
change an attribute is a permission to

611
00:23:18,000 --> 00:23:20,400
control an identity in a sense having

612
00:23:20,400 --> 00:23:22,080
permission to change the password of the

613
00:23:22,080 --> 00:23:25,039
identity is the most simple and the easy

614
00:23:25,039 --> 00:23:26,720
way to think about the permission to

615
00:23:26,720 --> 00:23:28,880
change an attribute right or to control

616
00:23:28,880 --> 00:23:32,400
an identity not to change in attributes

617
00:23:32,400 --> 00:23:34,080
uh and lastly there are a lot of

618
00:23:34,080 --> 00:23:36,320
automations before i leave this slide

619
00:23:36,320 --> 00:23:37,840
and it's very important to try and

620
00:23:37,840 --> 00:23:40,159
understand where are the automations

621
00:23:40,159 --> 00:23:43,039
that go that the iet department in that

622
00:23:43,039 --> 00:23:45,360
organization did in order to automate

623
00:23:45,360 --> 00:23:48,240
the granting of access

624
00:23:48,240 --> 00:23:50,240
so let's take this through an example so

625
00:23:50,240 --> 00:23:52,480
i don't just wave my hands in the air

626
00:23:52,480 --> 00:23:55,360
like i do in this talk and

627
00:23:55,360 --> 00:23:58,080
show you that it really is possible and

628
00:23:58,080 --> 00:23:59,919
i'm taking an example of analyzing

629
00:23:59,919 --> 00:24:02,400
github and i'm doing this for a specific

630
00:24:02,400 --> 00:24:04,799
target repository that i want to target

631
00:24:04,799 --> 00:24:06,799
now it's important to note i'm doing

632
00:24:06,799 --> 00:24:09,039
this

633
00:24:09,120 --> 00:24:11,440
as part of a context for the demo that i

634
00:24:11,440 --> 00:24:14,159
will show later of how to take over from

635
00:24:14,159 --> 00:24:16,640
a gmail account to compromise the

636
00:24:16,640 --> 00:24:18,720
customer data of an application

637
00:24:18,720 --> 00:24:20,880
so it begins with the very basic uh

638
00:24:20,880 --> 00:24:23,039
question i know of a target repo what

639
00:24:23,039 --> 00:24:24,880
grants me access to this target people

640
00:24:24,880 --> 00:24:27,760
accept direct access the first dancer to

641
00:24:27,760 --> 00:24:30,480
that is an organization a github

642
00:24:30,480 --> 00:24:32,720
organization grants access to all the

643
00:24:32,720 --> 00:24:35,679
reapers inside that organization

644
00:24:35,679 --> 00:24:38,080
the next question is who has access to

645
00:24:38,080 --> 00:24:40,080
those so i know the organization now

646
00:24:40,080 --> 00:24:41,440
knows can do anything to the

647
00:24:41,440 --> 00:24:43,760
organization and i know that the repo

648
00:24:43,760 --> 00:24:46,080
admins can disable branch protections or

649
00:24:46,080 --> 00:24:47,520
false push

650
00:24:47,520 --> 00:24:49,679
to different branches which is

651
00:24:49,679 --> 00:24:51,360
interesting because i want to push code

652
00:24:51,360 --> 00:24:53,840
eventually this is my core element in

653
00:24:53,840 --> 00:24:56,960
github and lastly i can find out which

654
00:24:56,960 --> 00:24:58,720
teams are assigned which users are

655
00:24:58,720 --> 00:25:01,760
assigned to this access and so on

656
00:25:01,760 --> 00:25:03,840
once i see i do this

657
00:25:03,840 --> 00:25:06,240
i can look at the federation automation

658
00:25:06,240 --> 00:25:07,840
like team sync

659
00:25:07,840 --> 00:25:10,320
personal tokens and other authentication

660
00:25:10,320 --> 00:25:12,960
methods like os apps that can grant me

661
00:25:12,960 --> 00:25:15,039
access to these identities and actors

662
00:25:15,039 --> 00:25:16,000
and

663
00:25:16,000 --> 00:25:19,039
the access that they have

664
00:25:19,120 --> 00:25:19,919
so

665
00:25:19,919 --> 00:25:22,720
um to take this a step further let's try

666
00:25:22,720 --> 00:25:25,039
to map this into a taxonomy the way i

667
00:25:25,039 --> 00:25:27,039
build the taxonomy is thinking about the

668
00:25:27,039 --> 00:25:28,960
graph that i just showed you and

669
00:25:28,960 --> 00:25:32,000
thinking about the nodes the edges and

670
00:25:32,000 --> 00:25:34,240
the automation edges that exist in this

671
00:25:34,240 --> 00:25:35,520
graph

672
00:25:35,520 --> 00:25:37,600
and for each one i'm thinking about the

673
00:25:37,600 --> 00:25:40,559
cloud elements that can be uh targeted

674
00:25:40,559 --> 00:25:42,640
so for exam i won't go through this

675
00:25:42,640 --> 00:25:44,799
table this is not the goal you i i'll

676
00:25:44,799 --> 00:25:46,480
publish the slides and anyone that is

677
00:25:46,480 --> 00:25:47,919
interested is that

678
00:25:47,919 --> 00:25:51,279
can happily use them uh and to take this

679
00:25:51,279 --> 00:25:53,760
further i hope i'm planning to make this

680
00:25:53,760 --> 00:25:56,000
an open source taxonomy that anyone can

681
00:25:56,000 --> 00:25:57,520
use

682
00:25:57,520 --> 00:26:00,159
but for example an identity node

683
00:26:00,159 --> 00:26:02,000
the ability to create it means the

684
00:26:02,000 --> 00:26:04,640
ability to add a user a service account

685
00:26:04,640 --> 00:26:06,559
or install an application because an

686
00:26:06,559 --> 00:26:07,760
application

687
00:26:07,760 --> 00:26:10,480
like an os application is an ecto in

688
00:26:10,480 --> 00:26:12,559
your system it sometimes easily

689
00:26:12,559 --> 00:26:14,559
sometimes is represented as a service

690
00:26:14,559 --> 00:26:16,240
account and sometimes as a different

691
00:26:16,240 --> 00:26:19,120
animal in some applications or platforms

692
00:26:19,120 --> 00:26:22,000
uh the ability for example to

693
00:26:22,000 --> 00:26:25,520
create any token is what's called

694
00:26:25,520 --> 00:26:27,440
the golden ticket type of attacks right

695
00:26:27,440 --> 00:26:29,600
it's the ability to generate tokens

696
00:26:29,600 --> 00:26:31,200
arbitrarily

697
00:26:31,200 --> 00:26:33,520
so i can take this uh talk about nodes i

698
00:26:33,520 --> 00:26:35,919
can talk about edges and talk about the

699
00:26:35,919 --> 00:26:37,600
high level types there is a membership

700
00:26:37,600 --> 00:26:40,000
edge granting access to a group overall

701
00:26:40,000 --> 00:26:41,919
there are permission edges granting

702
00:26:41,919 --> 00:26:44,480
certain privilege to a certain asset or

703
00:26:44,480 --> 00:26:46,159
set of assets and there are inheritance

704
00:26:46,159 --> 00:26:49,200
assets edges on which access flows from

705
00:26:49,200 --> 00:26:50,320
certain

706
00:26:50,320 --> 00:26:52,400
assets to other assets

707
00:26:52,400 --> 00:26:54,000
and lastly there are the automation

708
00:26:54,000 --> 00:26:56,880
edges which are very interesting because

709
00:26:56,880 --> 00:26:59,200
they automate the granting of access for

710
00:26:59,200 --> 00:27:01,679
example membership rules in groups

711
00:27:01,679 --> 00:27:04,000
for example user and group provisioning

712
00:27:04,000 --> 00:27:06,480
and data links and then there's one

713
00:27:06,480 --> 00:27:09,039
unique exception which is the ability to

714
00:27:09,039 --> 00:27:12,159
control an identity any asset or object

715
00:27:12,159 --> 00:27:14,000
that grants you the ability to control

716
00:27:14,000 --> 00:27:16,000
identities like the master key that

717
00:27:16,000 --> 00:27:18,880
grants you the ability to mint tokens is

718
00:27:18,880 --> 00:27:21,360
a controls identity type of edge and it

719
00:27:21,360 --> 00:27:23,520
represents a cycle in the graph and

720
00:27:23,520 --> 00:27:25,919
these cycles are what generates again

721
00:27:25,919 --> 00:27:27,840
the escalation passes and the weaknesses

722
00:27:27,840 --> 00:27:30,080
in these environments

723
00:27:30,080 --> 00:27:33,200
so to take this and try to map this to

724
00:27:33,200 --> 00:27:35,440
the wheeled mitral attack

725
00:27:35,440 --> 00:27:37,039
and tradition more traditional

726
00:27:37,039 --> 00:27:38,480
approaches

727
00:27:38,480 --> 00:27:40,159
when we look at the discovery and

728
00:27:40,159 --> 00:27:42,559
mapping i'm trying to take any attack

729
00:27:42,559 --> 00:27:44,480
here and

730
00:27:44,480 --> 00:27:46,399
give it a a

731
00:27:46,399 --> 00:27:48,720
a sign in the taxonomy that is based on

732
00:27:48,720 --> 00:27:49,520
the

733
00:27:49,520 --> 00:27:52,399
first letter is the node edge of a

734
00:27:52,399 --> 00:27:53,600
automation

735
00:27:53,600 --> 00:27:56,320
second letter is the type for example a

736
00:27:56,320 --> 00:28:00,320
membership edge would be em ah node

737
00:28:00,320 --> 00:28:01,440
whatever

738
00:28:01,440 --> 00:28:04,960
not the of identity would be an i um and

739
00:28:04,960 --> 00:28:06,960
so on

740
00:28:06,960 --> 00:28:09,039
and you can see for example enumeration

741
00:28:09,039 --> 00:28:12,080
apis grants us access to any type of

742
00:28:12,080 --> 00:28:16,000
a edge node or automation any type of

743
00:28:16,000 --> 00:28:18,159
access and they eventually

744
00:28:18,159 --> 00:28:20,480
read level access in the cloud which is

745
00:28:20,480 --> 00:28:23,600
the third letter and it's very very wide

746
00:28:23,600 --> 00:28:25,600
and it's worth noting because as you

747
00:28:25,600 --> 00:28:28,320
have these items you can look for the

748
00:28:28,320 --> 00:28:30,480
specific type of the next

749
00:28:30,480 --> 00:28:32,559
object that you need as you attack a

750
00:28:32,559 --> 00:28:34,480
certain organization if you know the

751
00:28:34,480 --> 00:28:36,480
enumeration of where you are you can

752
00:28:36,480 --> 00:28:38,399
understand where you're going and look

753
00:28:38,399 --> 00:28:39,840
for the next

754
00:28:39,840 --> 00:28:42,799
gadget or piece because in a sense all

755
00:28:42,799 --> 00:28:45,200
of these are gadgets similar to what

756
00:28:45,200 --> 00:28:48,240
gadgets that you need to be build up

757
00:28:48,240 --> 00:28:52,240
your exploit code in the organization

758
00:28:52,240 --> 00:28:53,520
um

759
00:28:53,520 --> 00:28:54,799
and

760
00:28:54,799 --> 00:28:56,799
when we start thinking about this we can

761
00:28:56,799 --> 00:28:59,679
also think about persistence and here

762
00:28:59,679 --> 00:29:03,360
for example i i drew the the

763
00:29:03,360 --> 00:29:05,679
illustration of how a golden ticket type

764
00:29:05,679 --> 00:29:09,039
of attack actually works and because the

765
00:29:09,039 --> 00:29:11,279
master key can generate access tokens it

766
00:29:11,279 --> 00:29:14,640
creates the cycle that they talked about

767
00:29:14,640 --> 00:29:16,480
and we can talk about other techniques

768
00:29:16,480 --> 00:29:18,960
here uh this is not the call that i'm

769
00:29:18,960 --> 00:29:22,640
going to talk about in this talk

770
00:29:23,200 --> 00:29:25,039
let's talk a little bit also about

771
00:29:25,039 --> 00:29:26,399
privilege escalation

772
00:29:26,399 --> 00:29:29,360
privilege escalation is very

773
00:29:29,360 --> 00:29:31,679
complex topic in iem

774
00:29:31,679 --> 00:29:34,320
security because if you look at its

775
00:29:34,320 --> 00:29:36,399
finding message to do privilege

776
00:29:36,399 --> 00:29:38,159
escalation grants you the ability to

777
00:29:38,159 --> 00:29:40,799
move laterally or escalate at the same

778
00:29:40,799 --> 00:29:43,679
time using these methods intentionally

779
00:29:43,679 --> 00:29:46,159
is the best way to hide your access

780
00:29:46,159 --> 00:29:48,240
for example building wall chains or

781
00:29:48,240 --> 00:29:51,279
building cascading rules of access

782
00:29:51,279 --> 00:29:53,600
intentionally grants you the ability to

783
00:29:53,600 --> 00:29:55,919
have invisible access if they are based

784
00:29:55,919 --> 00:29:57,840
on any attribute or anything that you

785
00:29:57,840 --> 00:29:59,440
control

786
00:29:59,440 --> 00:30:03,440
um which brings us to the analogy of i

787
00:30:03,440 --> 00:30:05,440
what i actually do and what i think i do

788
00:30:05,440 --> 00:30:08,000
are not as complex right

789
00:30:08,000 --> 00:30:09,360
and what

790
00:30:09,360 --> 00:30:11,039
is illustrated over here is an

791
00:30:11,039 --> 00:30:13,279
escalation test that is based on

792
00:30:13,279 --> 00:30:15,120
access to a service account and several

793
00:30:15,120 --> 00:30:16,640
wall chains uh

794
00:30:16,640 --> 00:30:18,960
granting us access to a certain target

795
00:30:18,960 --> 00:30:20,840
access

796
00:30:20,840 --> 00:30:24,159
asset finally we can also talk about how

797
00:30:24,159 --> 00:30:26,799
deciding access or escalate or lateral

798
00:30:26,799 --> 00:30:28,320
movement can work

799
00:30:28,320 --> 00:30:30,240
and you can make a group public for

800
00:30:30,240 --> 00:30:32,720
example uh we can you can control an

801
00:30:32,720 --> 00:30:35,679
attribute that affects the automation

802
00:30:35,679 --> 00:30:36,960
role chaining which you saw in the

803
00:30:36,960 --> 00:30:39,200
previous slide but also in interesting

804
00:30:39,200 --> 00:30:41,760
and we've seen it a lot inactive users

805
00:30:41,760 --> 00:30:44,720
inactive users is really cool because

806
00:30:44,720 --> 00:30:47,200
almost all organizations have them

807
00:30:47,200 --> 00:30:50,159
almost never been cleaned up and then

808
00:30:50,159 --> 00:30:53,039
the really fun part within active users

809
00:30:53,039 --> 00:30:55,840
is when you start looking at

810
00:30:55,840 --> 00:30:58,880
and we saw this uh literally um for

811
00:30:58,880 --> 00:31:00,640
example after the colonial pipeline

812
00:31:00,640 --> 00:31:02,480
attack in one of our customers and

813
00:31:02,480 --> 00:31:05,200
inactive user revived

814
00:31:05,200 --> 00:31:06,080
so

815
00:31:06,080 --> 00:31:08,399
this is a and the customer is an oil and

816
00:31:08,399 --> 00:31:10,559
gas company so not really surprising

817
00:31:10,559 --> 00:31:12,480
this is happening there this was an

818
00:31:12,480 --> 00:31:14,799
employee that moved from that company to

819
00:31:14,799 --> 00:31:16,480
colonial pipelines

820
00:31:16,480 --> 00:31:18,000
um

821
00:31:18,000 --> 00:31:20,240
and similarly we can see golden tickets

822
00:31:20,240 --> 00:31:22,159
we can see shadow admin shareholders is

823
00:31:22,159 --> 00:31:23,919
pretty cool it's

824
00:31:23,919 --> 00:31:26,640
building up an admin role for multiple

825
00:31:26,640 --> 00:31:28,240
pieces that are not privileged

826
00:31:28,240 --> 00:31:29,679
individually

827
00:31:29,679 --> 00:31:31,600
not highly privileged so it won't be

828
00:31:31,600 --> 00:31:32,640
monitored

829
00:31:32,640 --> 00:31:33,360
but

830
00:31:33,360 --> 00:31:35,279
piecing those pieces of the puzzle

831
00:31:35,279 --> 00:31:37,440
together can grant you the same level of

832
00:31:37,440 --> 00:31:40,799
access without the wall

833
00:31:40,799 --> 00:31:43,279
and empty rule groups are another nice

834
00:31:43,279 --> 00:31:45,279
way to do this

835
00:31:45,279 --> 00:31:47,600
when you have empty groups uh you can

836
00:31:47,600 --> 00:31:49,679
grant them access nobody will care about

837
00:31:49,679 --> 00:31:51,360
this access because there are no members

838
00:31:51,360 --> 00:31:53,039
in this group but

839
00:31:53,039 --> 00:31:55,519
if you are for example the owner of this

840
00:31:55,519 --> 00:31:57,279
group but not a member which is

841
00:31:57,279 --> 00:31:59,600
literally possible in active directory

842
00:31:59,600 --> 00:32:01,279
by design

843
00:32:01,279 --> 00:32:02,320
you can

844
00:32:02,320 --> 00:32:04,640
not be considered as having the access

845
00:32:04,640 --> 00:32:06,559
when somebody is scanning it but you can

846
00:32:06,559 --> 00:32:08,640
add yourself or anyone else at any given

847
00:32:08,640 --> 00:32:09,840
moment

848
00:32:09,840 --> 00:32:12,480
so there are a lot of fun elements like

849
00:32:12,480 --> 00:32:14,399
this and every app is different this is

850
00:32:14,399 --> 00:32:15,360
why

851
00:32:15,360 --> 00:32:17,039
it is important to understand how to

852
00:32:17,039 --> 00:32:19,039
analyze any new application that you're

853
00:32:19,039 --> 00:32:21,760
facing uh another cool thing that a lot

854
00:32:21,760 --> 00:32:23,600
of people don't know is our features

855
00:32:23,600 --> 00:32:26,000
like e-discovery e-discovery is a

856
00:32:26,000 --> 00:32:29,519
feature from office 365 compliance

857
00:32:29,519 --> 00:32:31,679
infrastructure and it allows you to

858
00:32:31,679 --> 00:32:34,080
search all mailboxes without having any

859
00:32:34,080 --> 00:32:36,399
direct access to the mailboxes as long

860
00:32:36,399 --> 00:32:39,360
as you compromise they need discovery

861
00:32:39,360 --> 00:32:42,159
permission you can literally access

862
00:32:42,159 --> 00:32:45,360
anything at the same time

863
00:32:45,360 --> 00:32:46,240
so

864
00:32:46,240 --> 00:32:48,240
finally we can talk about exfiltration

865
00:32:48,240 --> 00:32:49,600
there are a lot of methods for

866
00:32:49,600 --> 00:32:52,320
exfiltration uh we can talk about course

867
00:32:52,320 --> 00:32:55,200
organization permissions uh we can which

868
00:32:55,200 --> 00:32:57,919
is common in for example aws and azure

869
00:32:57,919 --> 00:33:00,320
where you can grant access to another

870
00:33:00,320 --> 00:33:03,519
organization that is a different tenant

871
00:33:03,519 --> 00:33:06,799
in that same service provider to your uh

872
00:33:06,799 --> 00:33:09,360
to a certain assets in your organization

873
00:33:09,360 --> 00:33:12,880
now in theory this is a valid use case

874
00:33:12,880 --> 00:33:15,440
for companies but at the same time it

875
00:33:15,440 --> 00:33:17,840
creates a very invalid

876
00:33:17,840 --> 00:33:19,600
potential

877
00:33:19,600 --> 00:33:23,200
use case of access where as an attacker

878
00:33:23,200 --> 00:33:25,279
i can create a policy that grants access

879
00:33:25,279 --> 00:33:27,279
to my fake organization

880
00:33:27,279 --> 00:33:28,880
and it's very hard to know which

881
00:33:28,880 --> 00:33:30,960
organization is granted the access and

882
00:33:30,960 --> 00:33:32,880
monitor it

883
00:33:32,880 --> 00:33:36,640
another tip applications applications a

884
00:33:36,640 --> 00:33:38,559
are not monitored even if users are

885
00:33:38,559 --> 00:33:40,880
monitored in most organizations so if

886
00:33:40,880 --> 00:33:42,960
you install an os app inside any

887
00:33:42,960 --> 00:33:45,679
platform like office 365 salesforce

888
00:33:45,679 --> 00:33:50,559
whatever it's 99 certain this osf is not

889
00:33:50,559 --> 00:33:52,399
monitored the activities the actions

890
00:33:52,399 --> 00:33:54,720
that he is taking on behalf of the user

891
00:33:54,720 --> 00:33:57,600
that installed it are not monitored and

892
00:33:57,600 --> 00:33:59,760
not validated because it's assumed that

893
00:33:59,760 --> 00:34:01,840
it's very hard to understand the actions

894
00:34:01,840 --> 00:34:04,399
of that app as those actions are not

895
00:34:04,399 --> 00:34:06,080
monitored it's very easy to use

896
00:34:06,080 --> 00:34:08,719
applications like os applications to do

897
00:34:08,719 --> 00:34:11,199
this and nobody's checking the names

898
00:34:11,199 --> 00:34:13,359
when you create an os application so you

899
00:34:13,359 --> 00:34:15,918
can just name your last application as

900
00:34:15,918 --> 00:34:18,079
something really benign i can name any

901
00:34:18,079 --> 00:34:20,399
os application as dropbox

902
00:34:20,399 --> 00:34:23,199
uh new app and

903
00:34:23,199 --> 00:34:25,040
everything installed in any target that

904
00:34:25,040 --> 00:34:26,960
i attack and it will work because nobody

905
00:34:26,960 --> 00:34:29,040
is actually checking the name and nobody

906
00:34:29,040 --> 00:34:30,879
can validate the name there is no even

907
00:34:30,879 --> 00:34:33,520
directory of valid app names and it is

908
00:34:33,520 --> 00:34:35,440
that you can as a

909
00:34:35,440 --> 00:34:37,599
responsible administrator validate based

910
00:34:37,599 --> 00:34:39,119
on

911
00:34:39,119 --> 00:34:41,440
lastly data links are very interesting

912
00:34:41,440 --> 00:34:44,239
because data links allow you to connect

913
00:34:44,239 --> 00:34:46,159
several assets and move data

914
00:34:46,159 --> 00:34:48,239
automatically between several assets

915
00:34:48,239 --> 00:34:49,679
preserving the access that was

916
00:34:49,679 --> 00:34:51,918
predefined

917
00:34:51,918 --> 00:34:52,879
um

918
00:34:52,879 --> 00:34:54,639
so

919
00:34:54,639 --> 00:34:56,480
last thing that i'm going to talk before

920
00:34:56,480 --> 00:35:00,320
i move and start talking about

921
00:35:00,800 --> 00:35:03,599
excuse me start talking about uh showing

922
00:35:03,599 --> 00:35:06,880
you the actual demo um so a little bit

923
00:35:06,880 --> 00:35:08,720
about the emerging classes of security

924
00:35:08,720 --> 00:35:12,960
tools that try to manage iam security so

925
00:35:12,960 --> 00:35:15,119
cloud entitle cloud infrastructure

926
00:35:15,119 --> 00:35:17,280
entitlement management uh our

927
00:35:17,280 --> 00:35:20,000
applications like cloud nox and dometic

928
00:35:20,000 --> 00:35:22,640
and awesome eyes my company uh they

929
00:35:22,640 --> 00:35:25,920
generally connect to aws azure and gcp

930
00:35:25,920 --> 00:35:27,839
they analyze the entitlement so the

931
00:35:27,839 --> 00:35:30,880
permissions there and based on that uh

932
00:35:30,880 --> 00:35:33,119
they try to

933
00:35:33,119 --> 00:35:34,560
make decisions

934
00:35:34,560 --> 00:35:36,800
such security partial managements are

935
00:35:36,800 --> 00:35:39,040
platforms that they try to do the same

936
00:35:39,040 --> 00:35:41,520
for sas applications but generally

937
00:35:41,520 --> 00:35:43,200
social security posture management is

938
00:35:43,200 --> 00:35:46,240
less about entitlements it mainly

939
00:35:46,240 --> 00:35:49,200
focuses on misconfigurations

940
00:35:49,200 --> 00:35:50,960
some of the vendors as part of the

941
00:35:50,960 --> 00:35:53,280
misconfigurations also try to identify

942
00:35:53,280 --> 00:35:55,040
misconfigurations that are related to

943
00:35:55,040 --> 00:35:58,079
privileged permissions sso settings and

944
00:35:58,079 --> 00:35:59,359
things like that

945
00:35:59,359 --> 00:36:01,599
and such management platforms try to do

946
00:36:01,599 --> 00:36:03,119
the same

947
00:36:03,119 --> 00:36:04,560
for uh

948
00:36:04,560 --> 00:36:06,640
and to automate certain access they are

949
00:36:06,640 --> 00:36:09,839
very similar to sspms in most cases but

950
00:36:09,839 --> 00:36:12,800
they tend to be more focused on getting

951
00:36:12,800 --> 00:36:14,720
the automation right rather than

952
00:36:14,720 --> 00:36:16,320
automating uh

953
00:36:16,320 --> 00:36:20,640
rather than monitoring the access um and

954
00:36:20,640 --> 00:36:22,720
how do those actually work and this is

955
00:36:22,720 --> 00:36:24,079
the question that you really should be

956
00:36:24,079 --> 00:36:27,359
asking yourself if you're an attacker

957
00:36:27,359 --> 00:36:29,520
they subscribe to events they connect to

958
00:36:29,520 --> 00:36:32,240
apis that means that they are limited by

959
00:36:32,240 --> 00:36:33,760
the type of events that they can

960
00:36:33,760 --> 00:36:35,839
subscribe to they are limited by the

961
00:36:35,839 --> 00:36:38,079
apis that they can rate limit to they

962
00:36:38,079 --> 00:36:40,560
are limited in the resolution sometimes

963
00:36:40,560 --> 00:36:43,839
sometimes they intentionally don't have

964
00:36:43,839 --> 00:36:45,920
deep resolution into the application

965
00:36:45,920 --> 00:36:48,000
they might only capture the assignment

966
00:36:48,000 --> 00:36:50,160
to the role and not modification so the

967
00:36:50,160 --> 00:36:52,079
actual access that the default access

968
00:36:52,079 --> 00:36:55,200
that this wall is granted and lastly

969
00:36:55,200 --> 00:36:57,200
many of them don't have reds across all

970
00:36:57,200 --> 00:37:00,000
the services though

971
00:37:00,000 --> 00:37:00,880
so

972
00:37:00,880 --> 00:37:03,280
lastly i'm going to

973
00:37:03,280 --> 00:37:06,400
give you a short demo

974
00:37:06,400 --> 00:37:08,640
the demo one does not

975
00:37:08,640 --> 00:37:11,680
expect the live demo to work so i'm not

976
00:37:11,680 --> 00:37:13,440
going to show a live demo and i

977
00:37:13,440 --> 00:37:15,680
apologize if there is time i will show

978
00:37:15,680 --> 00:37:18,000
you a little bit of live

979
00:37:18,000 --> 00:37:20,240
one part of the demo live and i will

980
00:37:20,240 --> 00:37:22,160
actually exfiltrate the data really

981
00:37:22,160 --> 00:37:23,920
really easily

982
00:37:23,920 --> 00:37:25,760
but please bear with me everything in

983
00:37:25,760 --> 00:37:28,160
this demo is based on a real customer

984
00:37:28,160 --> 00:37:29,359
environment

985
00:37:29,359 --> 00:37:30,240
that

986
00:37:30,240 --> 00:37:30,960
i

987
00:37:30,960 --> 00:37:33,520
i have reproduced because i can disclose

988
00:37:33,520 --> 00:37:35,839
the environment of my customer

989
00:37:35,839 --> 00:37:38,720
but it's a two enterprise uh that

990
00:37:38,720 --> 00:37:42,400
actually has millions of customers b2c

991
00:37:42,400 --> 00:37:43,440
um

992
00:37:43,440 --> 00:37:45,040
and what we're going to try to do in

993
00:37:45,040 --> 00:37:46,960
this demo is actually compromise the

994
00:37:46,960 --> 00:37:48,640
asset that they define as the most

995
00:37:48,640 --> 00:37:49,760
important

996
00:37:49,760 --> 00:37:50,640
the

997
00:37:50,640 --> 00:37:53,200
client database

998
00:37:53,200 --> 00:37:55,520
the emails and the passwords and all the

999
00:37:55,520 --> 00:37:57,760
information about all the customers

1000
00:37:57,760 --> 00:38:00,000
and it begins from the basic assumption

1001
00:38:00,000 --> 00:38:02,320
that we've gained some initial access to

1002
00:38:02,320 --> 00:38:05,520
a gmail account and this gmail account

1003
00:38:05,520 --> 00:38:08,000
is associated with a certain developer

1004
00:38:08,000 --> 00:38:08,880
in that

1005
00:38:08,880 --> 00:38:12,000
organization and these accounts

1006
00:38:12,000 --> 00:38:13,520
so

1007
00:38:13,520 --> 00:38:15,920
uh to start with this is what we know

1008
00:38:15,920 --> 00:38:18,160
rare echo man is the person that we

1009
00:38:18,160 --> 00:38:20,560
gained access to um

1010
00:38:20,560 --> 00:38:22,480
and really command has access to our

1011
00:38:22,480 --> 00:38:25,760
target repository that suits continuous

1012
00:38:25,760 --> 00:38:28,640
deployment process is deployed to gcp

1013
00:38:28,640 --> 00:38:31,119
and manages the access to the

1014
00:38:31,119 --> 00:38:33,839
to the customer data uh it's a service

1015
00:38:33,839 --> 00:38:36,240
that generates statistics and works on

1016
00:38:36,240 --> 00:38:36,960
it

1017
00:38:36,960 --> 00:38:39,680
um and to this repository as i mentioned

1018
00:38:39,680 --> 00:38:41,280
before there are two ways to get in

1019
00:38:41,280 --> 00:38:44,800
github one is to be repo admin uh and

1020
00:38:44,800 --> 00:38:46,800
either disable or false push because

1021
00:38:46,800 --> 00:38:49,200
this organization is very strict code

1022
00:38:49,200 --> 00:38:51,359
reviews are happening by two people two

1023
00:38:51,359 --> 00:38:53,040
additional people are looking at every

1024
00:38:53,040 --> 00:38:55,599
piece of code so you have to work around

1025
00:38:55,599 --> 00:38:58,960
this if you want to sneak code um and

1026
00:38:58,960 --> 00:39:00,240
i'm not uh

1027
00:39:00,240 --> 00:39:02,160
i know that there are other smart ways

1028
00:39:02,160 --> 00:39:04,160
to do this but

1029
00:39:04,160 --> 00:39:05,920
let's assume that that's not the way we

1030
00:39:05,920 --> 00:39:07,200
want to go

1031
00:39:07,200 --> 00:39:09,200
so the first thing we're going to do

1032
00:39:09,200 --> 00:39:11,839
when once we gain this access is to get

1033
00:39:11,839 --> 00:39:14,160
a new personal access token this is very

1034
00:39:14,160 --> 00:39:15,520
easy

1035
00:39:15,520 --> 00:39:16,320
to

1036
00:39:16,320 --> 00:39:18,240
give github full credits they are

1037
00:39:18,240 --> 00:39:19,760
emailing you on this but if you have

1038
00:39:19,760 --> 00:39:22,000
gmail access you can that just delete

1039
00:39:22,000 --> 00:39:23,200
the email

1040
00:39:23,200 --> 00:39:24,720
forever

1041
00:39:24,720 --> 00:39:25,920
hopefully

1042
00:39:25,920 --> 00:39:28,400
and once you do that

1043
00:39:28,400 --> 00:39:30,960
um now you have a fake token that you

1044
00:39:30,960 --> 00:39:34,079
control that can act as reali command

1045
00:39:34,079 --> 00:39:36,079
now you no longer need to sit on the

1046
00:39:36,079 --> 00:39:38,000
machine you no longer need to be visible

1047
00:39:38,000 --> 00:39:40,240
in any way because you can talk directly

1048
00:39:40,240 --> 00:39:42,480
to the github api never passing through

1049
00:39:42,480 --> 00:39:44,320
any place that the organization can

1050
00:39:44,320 --> 00:39:47,920
deploy any security software or

1051
00:39:47,920 --> 00:39:51,680
applications like an app

1052
00:39:51,839 --> 00:39:54,400
now that we have this

1053
00:39:54,400 --> 00:39:56,720
and i intentionally using coloring and

1054
00:39:56,720 --> 00:39:58,720
this is very useful if you work in this

1055
00:39:58,720 --> 00:40:00,079
type of manner

1056
00:40:00,079 --> 00:40:01,920
coloring is really helpful to understand

1057
00:40:01,920 --> 00:40:04,000
where you are and where you're going

1058
00:40:04,000 --> 00:40:07,760
so let's use this uh api key that we

1059
00:40:07,760 --> 00:40:10,640
have to enumerate the access and in this

1060
00:40:10,640 --> 00:40:12,560
particular case i'm enumerating the

1061
00:40:12,560 --> 00:40:16,079
accessor through the github api and as

1062
00:40:16,079 --> 00:40:17,839
you can see i found a group that has

1063
00:40:17,839 --> 00:40:20,560
admin access to this repo by the way i

1064
00:40:20,560 --> 00:40:22,960
also left the api key over here you're

1065
00:40:22,960 --> 00:40:25,359
welcome to try using it it's for a not

1066
00:40:25,359 --> 00:40:27,040
real non-real organization and it's

1067
00:40:27,040 --> 00:40:28,400
deleted but

1068
00:40:28,400 --> 00:40:29,839
for those of you bold enough you're

1069
00:40:29,839 --> 00:40:31,200
welcome to try

1070
00:40:31,200 --> 00:40:32,160
um

1071
00:40:32,160 --> 00:40:34,480
and let's agree that if we can push code

1072
00:40:34,480 --> 00:40:36,319
to github we can run code on the devs

1073
00:40:36,319 --> 00:40:39,200
computer because i can push the codes

1074
00:40:39,200 --> 00:40:41,760
for those that it's unclear to to the

1075
00:40:41,760 --> 00:40:44,960
devs own private branch and then get

1076
00:40:44,960 --> 00:40:47,680
they will run it all the time

1077
00:40:47,680 --> 00:40:49,760
so now what we know is that there is a

1078
00:40:49,760 --> 00:40:52,000
group called demo repo admins that we

1079
00:40:52,000 --> 00:40:54,560
found in the previous slide um

1080
00:40:54,560 --> 00:40:56,800
maybe i'll just make sure that you all

1081
00:40:56,800 --> 00:40:58,480
saw it this is the name of the group

1082
00:40:58,480 --> 00:41:01,040
right so demo repo admins

1083
00:41:01,040 --> 00:41:03,520
so now that we know that

1084
00:41:03,520 --> 00:41:06,079
we know that we can get access if we can

1085
00:41:06,079 --> 00:41:08,400
get assigned to this group

1086
00:41:08,400 --> 00:41:11,040
but how do we get assigned to the group

1087
00:41:11,040 --> 00:41:12,160
so

1088
00:41:12,160 --> 00:41:14,079
let's look at the active directory in

1089
00:41:14,079 --> 00:41:15,760
active directory we can find a group

1090
00:41:15,760 --> 00:41:17,680
with the same name

1091
00:41:17,680 --> 00:41:20,400
and here i also uh opened already the

1092
00:41:20,400 --> 00:41:24,319
rules in the inactive directory but um

1093
00:41:24,319 --> 00:41:26,000
let's assume we didn't know the rules

1094
00:41:26,000 --> 00:41:28,400
but we do know that in acti and this is

1095
00:41:28,400 --> 00:41:30,079
the situation that you will normally be

1096
00:41:30,079 --> 00:41:32,400
in we do know that all the engineering

1097
00:41:32,400 --> 00:41:35,040
managers on this group and one person

1098
00:41:35,040 --> 00:41:37,040
who is not an engineering manager it's

1099
00:41:37,040 --> 00:41:38,880
the engineering director's personal

1100
00:41:38,880 --> 00:41:40,000
assistant

1101
00:41:40,000 --> 00:41:41,040
and

1102
00:41:41,040 --> 00:41:43,200
now what we need to ask ourselves is the

1103
00:41:43,200 --> 00:41:44,960
question how did they grant the

1104
00:41:44,960 --> 00:41:47,040
exception because this is a dynamic

1105
00:41:47,040 --> 00:41:48,640
group that is meant for the engineering

1106
00:41:48,640 --> 00:41:49,760
managers

1107
00:41:49,760 --> 00:41:52,000
and this pa doesn't have the title

1108
00:41:52,000 --> 00:41:54,000
engineering manager how did she get

1109
00:41:54,000 --> 00:41:57,599
added to this group and the answer is

1110
00:41:57,599 --> 00:41:59,920
well the organizations use different

1111
00:41:59,920 --> 00:42:02,240
attributes to create an exception so the

1112
00:42:02,240 --> 00:42:04,079
attribute that you should actually be

1113
00:42:04,079 --> 00:42:06,800
using in the example of active directory

1114
00:42:06,800 --> 00:42:08,319
is object id

1115
00:42:08,319 --> 00:42:11,359
but object id is actually very hard to

1116
00:42:11,359 --> 00:42:13,040
extract and people feel that it's

1117
00:42:13,040 --> 00:42:15,680
complicated and it's unclear why it is

1118
00:42:15,680 --> 00:42:16,400
used

1119
00:42:16,400 --> 00:42:18,800
so what they actually tend to use are

1120
00:42:18,800 --> 00:42:20,720
attributes that they can set and are not

1121
00:42:20,720 --> 00:42:22,960
necessarily in use or might be in use

1122
00:42:22,960 --> 00:42:25,760
but not really like the facts phone

1123
00:42:25,760 --> 00:42:28,720
number little this is i've seen this

1124
00:42:28,720 --> 00:42:30,800
practice in at least five organizations

1125
00:42:30,800 --> 00:42:33,119
using the fox phone number to assign

1126
00:42:33,119 --> 00:42:35,280
people to dynamic groups

1127
00:42:35,280 --> 00:42:37,680
similarly you can look at the mobile

1128
00:42:37,680 --> 00:42:39,280
number and the telephone number which

1129
00:42:39,280 --> 00:42:41,119
i've also seen in other organizations

1130
00:42:41,119 --> 00:42:42,839
being used

1131
00:42:42,839 --> 00:42:46,160
um so under the assumption that this

1132
00:42:46,160 --> 00:42:48,720
person is actually um

1133
00:42:48,720 --> 00:42:51,200
using this and we're guessing that it's

1134
00:42:51,200 --> 00:42:52,880
either the office phone or the mobile

1135
00:42:52,880 --> 00:42:55,760
phone or the fax number that was used

1136
00:42:55,760 --> 00:42:57,599
there um

1137
00:42:57,599 --> 00:42:59,599
now we have this understanding of the

1138
00:42:59,599 --> 00:43:01,839
organization we know now that there is a

1139
00:43:01,839 --> 00:43:04,160
dynamic group that we are guessing is

1140
00:43:04,160 --> 00:43:07,200
team synced to the team in

1141
00:43:07,200 --> 00:43:10,079
github that is has the same name

1142
00:43:10,079 --> 00:43:12,400
and we know that samantha fox who is the

1143
00:43:12,400 --> 00:43:15,920
pa has access to this group probably saw

1144
00:43:15,920 --> 00:43:17,680
the office phone i'm cheating you

1145
00:43:17,680 --> 00:43:19,280
because i already know the answer so i

1146
00:43:19,280 --> 00:43:21,440
wrote the office phone but you're going

1147
00:43:21,440 --> 00:43:23,040
to assume it's one of the attributes

1148
00:43:23,040 --> 00:43:24,960
that you want to control

1149
00:43:24,960 --> 00:43:29,040
luckily this self-service um

1150
00:43:29,040 --> 00:43:30,960
the picture you see in the background is

1151
00:43:30,960 --> 00:43:32,880
managing engine

1152
00:43:32,880 --> 00:43:35,520
uh ad self self which is a very popular

1153
00:43:35,520 --> 00:43:37,280
application for active directory self

1154
00:43:37,280 --> 00:43:39,839
service there are also many many many

1155
00:43:39,839 --> 00:43:42,160
other options uh as you can see in the

1156
00:43:42,160 --> 00:43:44,640
example which is taken from their site

1157
00:43:44,640 --> 00:43:46,800
um because i didn't have access to this

1158
00:43:46,800 --> 00:43:49,920
application to reproduce it um the in

1159
00:43:49,920 --> 00:43:52,160
some cases users can even change their

1160
00:43:52,160 --> 00:43:54,480
own title so i could go ahead and change

1161
00:43:54,480 --> 00:43:56,560
my title to engineering manager and just

1162
00:43:56,560 --> 00:43:59,119
get the access but let's assume they can

1163
00:43:59,119 --> 00:44:01,440
change the title what they certainly can

1164
00:44:01,440 --> 00:44:03,119
change are attributes like their office

1165
00:44:03,119 --> 00:44:05,359
phone mobile phone and so on or request

1166
00:44:05,359 --> 00:44:07,119
it even for my team because it's not

1167
00:44:07,119 --> 00:44:09,200
really scary

1168
00:44:09,200 --> 00:44:11,040
to simulate this i did the same in

1169
00:44:11,040 --> 00:44:12,560
active directive which is what you see

1170
00:44:12,560 --> 00:44:15,040
on the right hand side of the slide and

1171
00:44:15,040 --> 00:44:17,040
i basically set my phone

1172
00:44:17,040 --> 00:44:19,040
the phone of this fake account intention

1173
00:44:19,040 --> 00:44:21,520
intentionally to that

1174
00:44:21,520 --> 00:44:23,200
now i know that the fake account has

1175
00:44:23,200 --> 00:44:25,440
this phone number and it takes about

1176
00:44:25,440 --> 00:44:27,359
three minutes or four minutes to see the

1177
00:44:27,359 --> 00:44:29,599
results in active directory and see that

1178
00:44:29,599 --> 00:44:32,079
is now a member of this group

1179
00:44:32,079 --> 00:44:34,240
the dynamic group that we call demo repo

1180
00:44:34,240 --> 00:44:37,680
admins but what is not yet is not a

1181
00:44:37,680 --> 00:44:41,040
member of this group in github and

1182
00:44:41,040 --> 00:44:43,520
waiting even 10 or 15 minutes you still

1183
00:44:43,520 --> 00:44:46,640
don't see a change because sync and

1184
00:44:46,640 --> 00:44:49,440
automation doesn't work that fast

1185
00:44:49,440 --> 00:44:52,240
but 51 minutes later or to be accurate

1186
00:44:52,240 --> 00:44:54,880
47 because it's this screenshot was

1187
00:44:54,880 --> 00:44:56,720
taken four minutes after the access was

1188
00:44:56,720 --> 00:44:57,760
granted

1189
00:44:57,760 --> 00:45:00,480
this thing is happening and once the

1190
00:45:00,480 --> 00:45:02,800
thing is has happened

1191
00:45:02,800 --> 00:45:05,040
what actually happens is that this

1192
00:45:05,040 --> 00:45:08,000
person the account that we control now

1193
00:45:08,000 --> 00:45:11,760
gained access as a repo admin to our

1194
00:45:11,760 --> 00:45:14,800
target repo which looks like this

1195
00:45:14,800 --> 00:45:17,359
um one thing to say in github's credits

1196
00:45:17,359 --> 00:45:19,119
they send a lot of emails about these

1197
00:45:19,119 --> 00:45:21,520
access changes and it takes a lot of

1198
00:45:21,520 --> 00:45:24,000
work to actually prevent the access

1199
00:45:24,000 --> 00:45:25,760
there are some configuration settings

1200
00:45:25,760 --> 00:45:26,800
but not

1201
00:45:26,800 --> 00:45:28,880
that much so now that we have the

1202
00:45:28,880 --> 00:45:30,720
teamsync we basically managed to

1203
00:45:30,720 --> 00:45:32,480
compromise the entire chain and we can

1204
00:45:32,480 --> 00:45:34,160
push our code

1205
00:45:34,160 --> 00:45:35,359
but we still

1206
00:45:35,359 --> 00:45:37,200
want this code to stay there for a long

1207
00:45:37,200 --> 00:45:39,440
time right and we want to exfiltrate the

1208
00:45:39,440 --> 00:45:43,760
data in a way that will be as an

1209
00:45:43,760 --> 00:45:46,640
as invisible as possible

1210
00:45:46,640 --> 00:45:47,599
so

1211
00:45:47,599 --> 00:45:49,920
and obviously similar to that between

1212
00:45:49,920 --> 00:45:51,520
the point that we push data to the

1213
00:45:51,520 --> 00:45:53,680
target repository and the point that it

1214
00:45:53,680 --> 00:45:56,400
arrived in gcp we need to wait for a cd

1215
00:45:56,400 --> 00:45:59,359
processor a release point in time that

1216
00:45:59,359 --> 00:46:01,520
the code will actually move

1217
00:46:01,520 --> 00:46:03,839
now when i looked at this target repo

1218
00:46:03,839 --> 00:46:05,599
and this is again based on the real

1219
00:46:05,599 --> 00:46:07,200
customer but the code that you see is

1220
00:46:07,200 --> 00:46:09,119
not the original code just similar code

1221
00:46:09,119 --> 00:46:10,960
that they found in the internet

1222
00:46:10,960 --> 00:46:12,800
basically it's very it's a very common

1223
00:46:12,800 --> 00:46:15,119
practice to push from gcp

1224
00:46:15,119 --> 00:46:17,359
to an application to

1225
00:46:17,359 --> 00:46:19,680
google sheets to worksheet in google

1226
00:46:19,680 --> 00:46:22,640
sheets information about them

1227
00:46:22,640 --> 00:46:25,839
what we actually

1228
00:46:26,000 --> 00:46:28,880
want to export from gcp to use you know

1229
00:46:28,880 --> 00:46:30,319
in the organization

1230
00:46:30,319 --> 00:46:32,960
uh and in this particular real world

1231
00:46:32,960 --> 00:46:35,280
example that i'm basing it on they push

1232
00:46:35,280 --> 00:46:39,599
the stats about the cost about the um

1233
00:46:39,599 --> 00:46:41,839
the customers that they had how many are

1234
00:46:41,839 --> 00:46:43,760
male how many are female how many are

1235
00:46:43,760 --> 00:46:45,599
young how many are old age groups all

1236
00:46:45,599 --> 00:46:47,760
this type of stuff

1237
00:46:47,760 --> 00:46:49,760
and as they pushed it

1238
00:46:49,760 --> 00:46:52,079
this is the picture that we have

1239
00:46:52,079 --> 00:46:54,079
now we can push the hidden

1240
00:46:54,079 --> 00:46:56,800
customer data is for example a hidden

1241
00:46:56,800 --> 00:46:59,040
worksheet to the same worksheet that is

1242
00:46:59,040 --> 00:47:01,920
anyways being created and updated in

1243
00:47:01,920 --> 00:47:04,000
google sheets for the stats for the

1244
00:47:04,000 --> 00:47:05,119
management

1245
00:47:05,119 --> 00:47:05,920
now

1246
00:47:05,920 --> 00:47:08,720
this is very easy uh to do but this is

1247
00:47:08,720 --> 00:47:11,119
not an easy way to exfiltrate the data

1248
00:47:11,119 --> 00:47:13,920
all the way to my personal area without

1249
00:47:13,920 --> 00:47:15,520
leaving any trace

1250
00:47:15,520 --> 00:47:17,760
so i can take a step further and this is

1251
00:47:17,760 --> 00:47:21,440
where data links like a rf uh really

1252
00:47:21,440 --> 00:47:22,319
free

1253
00:47:22,319 --> 00:47:24,240
exfiltration tools built into the

1254
00:47:24,240 --> 00:47:27,359
platforms um and in this particular case

1255
00:47:27,359 --> 00:47:29,680
the data link that i generated

1256
00:47:29,680 --> 00:47:31,119
is a data link

1257
00:47:31,119 --> 00:47:33,839
using import range function basically

1258
00:47:33,839 --> 00:47:36,400
what it means is that the user that has

1259
00:47:36,400 --> 00:47:40,160
access to a certain asset can

1260
00:47:40,160 --> 00:47:42,720
push pull information from one worksheet

1261
00:47:42,720 --> 00:47:44,160
into another

1262
00:47:44,160 --> 00:47:47,520
and that means that now i created three

1263
00:47:47,520 --> 00:47:50,000
worksheets one is the user stats for the

1264
00:47:50,000 --> 00:47:52,400
management that is written from gcp

1265
00:47:52,400 --> 00:47:55,839
the second is called results qa which is

1266
00:47:55,839 --> 00:47:56,880
used to

1267
00:47:56,880 --> 00:47:58,960
verify some results and is only

1268
00:47:58,960 --> 00:48:01,119
accessible to the user that we have

1269
00:48:01,119 --> 00:48:03,440
compromised uh who is responsible to

1270
00:48:03,440 --> 00:48:05,200
qa's work right

1271
00:48:05,200 --> 00:48:07,839
and the last one is called bills to pay

1272
00:48:07,839 --> 00:48:10,079
it's a private worksheet in his own

1273
00:48:10,079 --> 00:48:12,400
drive and the links go from one to

1274
00:48:12,400 --> 00:48:14,240
another to another so even if you find

1275
00:48:14,240 --> 00:48:16,960
the first link it doesn't look malicious

1276
00:48:16,960 --> 00:48:18,880
and the second link is unlikely to be

1277
00:48:18,880 --> 00:48:21,280
found

1278
00:48:21,280 --> 00:48:22,559
and

1279
00:48:22,559 --> 00:48:24,720
this basically looks like this now we

1280
00:48:24,720 --> 00:48:25,440
can

1281
00:48:25,440 --> 00:48:28,160
use two import ranges to go from one to

1282
00:48:28,160 --> 00:48:31,280
another and lastly the bills to pay is

1283
00:48:31,280 --> 00:48:33,440
something very valid to share externally

1284
00:48:33,440 --> 00:48:36,160
with your gmail with anything else

1285
00:48:36,160 --> 00:48:38,160
to complicate things further and how we

1286
00:48:38,160 --> 00:48:40,559
can utilize the ir mechanisms for our

1287
00:48:40,559 --> 00:48:43,359
advantage what we can do is also limit

1288
00:48:43,359 --> 00:48:46,000
the user stats for management to have

1289
00:48:46,000 --> 00:48:47,680
only view access

1290
00:48:47,680 --> 00:48:50,240
what that means is now the management

1291
00:48:50,240 --> 00:48:53,040
can can't view based on the permissions

1292
00:48:53,040 --> 00:48:55,680
that google uses they can't view hidden

1293
00:48:55,680 --> 00:48:58,000
worksheets so they can't even know that

1294
00:48:58,000 --> 00:48:59,760
they push more data into the same

1295
00:48:59,760 --> 00:49:03,839
worksheet and hide it in there

1296
00:49:03,839 --> 00:49:04,800
so

1297
00:49:04,800 --> 00:49:07,680
this is a fun and let's look

1298
00:49:07,680 --> 00:49:10,319
do we see the access that was granted to

1299
00:49:10,319 --> 00:49:13,599
import range yes but it's granted like

1300
00:49:13,599 --> 00:49:16,640
this as unknown can view

1301
00:49:16,640 --> 00:49:18,400
would you notice it would you know what

1302
00:49:18,400 --> 00:49:19,839
it means how would you actually

1303
00:49:19,839 --> 00:49:21,599
investigate it if you looked at the user

1304
00:49:21,599 --> 00:49:26,000
activity you probably wouldn't right

1305
00:49:26,160 --> 00:49:27,920
so

1306
00:49:27,920 --> 00:49:32,000
this is basically where we are uh and

1307
00:49:32,000 --> 00:49:34,480
how we can exfiltrate the data i'll go

1308
00:49:34,480 --> 00:49:36,960
back for a moment to this slide so this

1309
00:49:36,960 --> 00:49:39,040
is the entire process that we did right

1310
00:49:39,040 --> 00:49:41,280
we took over a fake okay

1311
00:49:41,280 --> 00:49:43,920
an account we used the access to gmail

1312
00:49:43,920 --> 00:49:46,640
to generate the fake token in github we

1313
00:49:46,640 --> 00:49:49,520
use that also to get to analyze the

1314
00:49:49,520 --> 00:49:51,760
github api found the group that we want

1315
00:49:51,760 --> 00:49:53,200
to compromise

1316
00:49:53,200 --> 00:49:55,440
found it in active directory

1317
00:49:55,440 --> 00:49:58,160
found the exception and wrote the

1318
00:49:58,160 --> 00:50:00,319
exception to gain access to that group

1319
00:50:00,319 --> 00:50:02,720
utilize the teamsync mechanism to gain

1320
00:50:02,720 --> 00:50:03,839
access

1321
00:50:03,839 --> 00:50:06,640
using that push data malicious data into

1322
00:50:06,640 --> 00:50:09,920
that gcp account and through that and

1323
00:50:09,920 --> 00:50:12,720
the series of import ranges managed to

1324
00:50:12,720 --> 00:50:16,480
push the data all the way to our target

1325
00:50:16,480 --> 00:50:18,880
very very covertly

1326
00:50:18,880 --> 00:50:22,000
and automatically without almost any

1327
00:50:22,000 --> 00:50:24,160
actions that we needed to take that

1328
00:50:24,160 --> 00:50:26,880
would allow anyone to know that well

1329
00:50:26,880 --> 00:50:29,200
interfering in the normal behavior of

1330
00:50:29,200 --> 00:50:31,760
that organization

1331
00:50:31,760 --> 00:50:35,040
so let me check the time okay i i'm

1332
00:50:35,040 --> 00:50:36,880
going to give up the live demo if anyone

1333
00:50:36,880 --> 00:50:38,400
is interested that you can catch me

1334
00:50:38,400 --> 00:50:40,319
afterwards and i'll show you a couple of

1335
00:50:40,319 --> 00:50:42,319
pieces of the live demo

1336
00:50:42,319 --> 00:50:43,680
um

1337
00:50:43,680 --> 00:50:45,040
to finish uh

1338
00:50:45,040 --> 00:50:47,280
and leave some time for questions some

1339
00:50:47,280 --> 00:50:49,440
takeaways

1340
00:50:49,440 --> 00:50:51,359
the modern enterprise at the attack

1341
00:50:51,359 --> 00:50:53,359
surface is mainly built around the

1342
00:50:53,359 --> 00:50:54,400
identity

1343
00:50:54,400 --> 00:50:57,599
perimeter or the iem controls

1344
00:50:57,599 --> 00:50:59,839
and im architectures are complex and

1345
00:50:59,839 --> 00:51:03,520
they rely heavily on automation uh

1346
00:51:03,520 --> 00:51:05,760
of granting access

1347
00:51:05,760 --> 00:51:08,559
the io mechanisms in general especially

1348
00:51:08,559 --> 00:51:10,960
around automation can be reused

1349
00:51:10,960 --> 00:51:12,960
just like you can reuse rope gadgets

1350
00:51:12,960 --> 00:51:14,559
when you're exploiting a binary

1351
00:51:14,559 --> 00:51:17,359
application you can reuse pieces of iam

1352
00:51:17,359 --> 00:51:19,040
applications when you are attacking an

1353
00:51:19,040 --> 00:51:21,440
organization and trying to move between

1354
00:51:21,440 --> 00:51:22,640
the all the applications the

1355
00:51:22,640 --> 00:51:25,040
organization has and the infrastructure

1356
00:51:25,040 --> 00:51:27,680
that it uses uh when you are analyzing

1357
00:51:27,680 --> 00:51:29,359
or classifying an app

1358
00:51:29,359 --> 00:51:32,480
think where the pieces fit in the

1359
00:51:32,480 --> 00:51:35,119
analysis graph and what are the cards

1360
00:51:35,119 --> 00:51:37,359
whether they disgrant wide access or

1361
00:51:37,359 --> 00:51:38,960
specific access

1362
00:51:38,960 --> 00:51:42,079
and security tools in this domain are

1363
00:51:42,079 --> 00:51:43,839
first of all emerging they are rare in

1364
00:51:43,839 --> 00:51:46,400
most applications and second even when

1365
00:51:46,400 --> 00:51:48,880
they exist they face certain limitations

1366
00:51:48,880 --> 00:51:50,800
because of the vandals themselves

1367
00:51:50,800 --> 00:51:53,839
limiting the access

1368
00:51:54,079 --> 00:51:55,040
thank you

1369
00:51:55,040 --> 00:51:56,880
and if you have any questions

1370
00:51:56,880 --> 00:51:59,200
i'm happy to answer them in the next

1371
00:51:59,200 --> 00:52:00,880
two minutes

1372
00:52:00,880 --> 00:52:01,839
thank you

1373
00:52:01,839 --> 00:52:04,559
i am looking online i see no incoming

1374
00:52:04,559 --> 00:52:06,720
questions at this point online so i'm

1375
00:52:06,720 --> 00:52:08,160
going to take you to the room any

1376
00:52:08,160 --> 00:52:11,118
questions from the room

1377
00:52:13,760 --> 00:52:14,640
okay

1378
00:52:14,640 --> 00:52:16,480
i think you go

1379
00:52:16,480 --> 00:52:19,280
there's one okay one moment i'll bring

1380
00:52:19,280 --> 00:52:20,960
you the microphone please speak up loud

1381
00:52:20,960 --> 00:52:22,960
so the speaker is also here

1382
00:52:22,960 --> 00:52:25,839
okay can you hear me

1383
00:52:25,839 --> 00:52:27,440
hi

1384
00:52:27,440 --> 00:52:29,839
okay so my question is is there an

1385
00:52:29,839 --> 00:52:32,960
absolute way

1386
00:52:32,960 --> 00:52:35,280
okay

1387
00:52:36,880 --> 00:52:38,640
is there a

1388
00:52:38,640 --> 00:52:41,760
full solution that properly shows you

1389
00:52:41,760 --> 00:52:44,160
everything that's going on with all your

1390
00:52:44,160 --> 00:52:46,800
iim solutions

1391
00:52:46,800 --> 00:52:48,800
so your question is whether there is a

1392
00:52:48,800 --> 00:52:51,359
full solution that you can look at all

1393
00:52:51,359 --> 00:52:54,559
the im architecture yes so and create

1394
00:52:54,559 --> 00:52:57,359
specific alerts where you can

1395
00:52:57,359 --> 00:52:59,599
find out things i i am

1396
00:52:59,599 --> 00:53:02,000
uncomfortable because i i'm not here to

1397
00:53:02,000 --> 00:53:04,800
advertise my company yeah but my company

1398
00:53:04,800 --> 00:53:07,040
is one of the solutions in this area

1399
00:53:07,040 --> 00:53:08,960
other than that there are a few

1400
00:53:08,960 --> 00:53:11,200
companies that are more specific for

1401
00:53:11,200 --> 00:53:13,040
example the ciem

1402
00:53:13,040 --> 00:53:15,680
that only looks at public cloud or this

1403
00:53:15,680 --> 00:53:18,800
sspm that only looks at sas applications

1404
00:53:18,800 --> 00:53:21,280
but the only company that i know that is

1405
00:53:21,280 --> 00:53:23,839
really cross the board is my company

1406
00:53:23,839 --> 00:53:26,240
so i apologize i didn't mean to

1407
00:53:26,240 --> 00:53:29,280
advertise but i happy to do it

1408
00:53:29,280 --> 00:53:31,760
does that also mean that if the design

1409
00:53:31,760 --> 00:53:34,160
of your identity management system is

1410
00:53:34,160 --> 00:53:36,400
flawed then

1411
00:53:36,400 --> 00:53:38,240
you always have problems but if it's

1412
00:53:38,240 --> 00:53:40,160
perfected in a way like if before you

1413
00:53:40,160 --> 00:53:41,599
design that

1414
00:53:41,599 --> 00:53:43,920
infrastructure the groups and everything

1415
00:53:43,920 --> 00:53:45,839
and assign them accordingly

1416
00:53:45,839 --> 00:53:47,599
will you be protected will you not need

1417
00:53:47,599 --> 00:53:49,119
this anymore

1418
00:53:49,119 --> 00:53:51,520
so i'm not sure i entirely held

1419
00:53:51,520 --> 00:53:53,839
everything but you asked if the design

1420
00:53:53,839 --> 00:53:56,319
is flawed in the way the infrastructure

1421
00:53:56,319 --> 00:53:58,880
is actually works because you can't

1422
00:53:58,880 --> 00:54:01,440
actually secure it well

1423
00:54:01,440 --> 00:54:03,200
yes so what i mean to say is if you

1424
00:54:03,200 --> 00:54:05,680
design it properly enough

1425
00:54:05,680 --> 00:54:08,640
can you be like fully protected

1426
00:54:08,640 --> 00:54:11,440
or will there always be a way of

1427
00:54:11,440 --> 00:54:12,880
selling around

1428
00:54:12,880 --> 00:54:14,800
there are two elements to this in my

1429
00:54:14,800 --> 00:54:18,400
opinion one and again this goes to what

1430
00:54:18,400 --> 00:54:19,520
we've seen

1431
00:54:19,520 --> 00:54:21,440
and nobilium is the best example for

1432
00:54:21,440 --> 00:54:24,240
that as an attacker but attackers are

1433
00:54:24,240 --> 00:54:27,280
utilizing this now because it's the easy

1434
00:54:27,280 --> 00:54:29,920
less costly and very very covert way to

1435
00:54:29,920 --> 00:54:31,599
do things

1436
00:54:31,599 --> 00:54:32,400
now

1437
00:54:32,400 --> 00:54:34,160
the one thing that i can recommend on

1438
00:54:34,160 --> 00:54:35,599
design is

1439
00:54:35,599 --> 00:54:40,160
make your iem architecture immutable

1440
00:54:40,160 --> 00:54:42,799
in code you wouldn't allow code to you

1441
00:54:42,799 --> 00:54:45,599
wouldn't allow self modifying code right

1442
00:54:45,599 --> 00:54:48,319
but in im self modifying permission

1443
00:54:48,319 --> 00:54:51,280
system is the de facto standard

1444
00:54:51,280 --> 00:54:53,760
why is it like that i have no idea

1445
00:54:53,760 --> 00:54:54,559
but

1446
00:54:54,559 --> 00:54:56,079
there are two things one make it

1447
00:54:56,079 --> 00:54:58,640
immutable two even if it's immutable you

1448
00:54:58,640 --> 00:55:00,880
can't validate that it's immutable this

1449
00:55:00,880 --> 00:55:01,920
is why

1450
00:55:01,920 --> 00:55:03,680
don't forget this is why i put this

1451
00:55:03,680 --> 00:55:05,760
statement here don't forget to guard the

1452
00:55:05,760 --> 00:55:08,480
guardians iam is your guardian of access

1453
00:55:08,480 --> 00:55:11,040
to anything in your organization but you

1454
00:55:11,040 --> 00:55:12,720
need to guard it meaning you need

1455
00:55:12,720 --> 00:55:14,400
something to monitor

1456
00:55:14,400 --> 00:55:16,960
that excess effective access at any

1457
00:55:16,960 --> 00:55:19,119
given moment and tell you if the change

1458
00:55:19,119 --> 00:55:21,280
doesn't match the architecture that you

1459
00:55:21,280 --> 00:55:23,280
designed

1460
00:55:23,280 --> 00:55:26,240
i hope that answered the question

1461
00:55:26,240 --> 00:55:28,720
thank you

1462
00:55:29,359 --> 00:55:32,720
okay thank you all i appreciate the time

1463
00:55:32,720 --> 00:55:35,440
and hope you enjoyed it

1464
00:55:35,440 --> 00:55:40,280
thank you as well it was a great talk

