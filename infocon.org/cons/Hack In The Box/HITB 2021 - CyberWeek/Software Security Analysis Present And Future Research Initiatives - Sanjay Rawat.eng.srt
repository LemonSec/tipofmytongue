1
00:00:07,200 --> 00:00:08,240
all right

2
00:00:08,240 --> 00:00:11,120
so good morning everyone and

3
00:00:11,120 --> 00:00:13,120
welcome to

4
00:00:13,120 --> 00:00:17,039
uh my talk on software analysis

5
00:00:17,039 --> 00:00:19,680
from security perspective and

6
00:00:19,680 --> 00:00:22,240
what we are doing and what we would like

7
00:00:22,240 --> 00:00:23,439
to do

8
00:00:23,439 --> 00:00:25,920
in the near

9
00:00:28,840 --> 00:00:31,679
future so about me

10
00:00:31,679 --> 00:00:35,200
so i joined uh technology uh innovation

11
00:00:35,200 --> 00:00:37,280
institute very recently

12
00:00:37,280 --> 00:00:40,000
uh and before that and there i lead a

13
00:00:40,000 --> 00:00:40,879
group

14
00:00:40,879 --> 00:00:42,879
uh called software

15
00:00:42,879 --> 00:00:44,480
security analysis

16
00:00:44,480 --> 00:00:46,800
and this is a very generic group which

17
00:00:46,800 --> 00:00:49,200
focuses on typical

18
00:00:49,200 --> 00:00:50,399
software

19
00:00:50,399 --> 00:00:52,399
programming a program analysis

20
00:00:52,399 --> 00:00:54,800
techniques and we kept it

21
00:00:54,800 --> 00:00:56,960
kind of like little bit generic on

22
00:00:56,960 --> 00:00:59,680
purpose because we would like to

23
00:00:59,680 --> 00:01:02,160
you know poke our nose everywhere

24
00:01:02,160 --> 00:01:03,920
all the project that we want to do

25
00:01:03,920 --> 00:01:06,240
because as i will try to convey that

26
00:01:06,240 --> 00:01:08,560
software program analysis remains a

27
00:01:08,560 --> 00:01:12,479
basis for most of the typical soft

28
00:01:12,479 --> 00:01:15,200
software security tasks that you see

29
00:01:15,200 --> 00:01:17,920
and before joining uh tii i was a

30
00:01:17,920 --> 00:01:20,400
professor at the university of bristol

31
00:01:20,400 --> 00:01:22,000
uk

32
00:01:22,000 --> 00:01:24,640
and there i was also part of a cyber

33
00:01:24,640 --> 00:01:28,159
security group and also

34
00:01:28,159 --> 00:01:31,680
conducted several few workshops at

35
00:01:31,680 --> 00:01:33,360
various levels there

36
00:01:33,360 --> 00:01:36,720
and before joining uh bristol i was part

37
00:01:36,720 --> 00:01:37,600
of

38
00:01:37,600 --> 00:01:40,960
susek freya university amsterdam and in

39
00:01:40,960 --> 00:01:43,439
fact currently as we i'm speaking my

40
00:01:43,439 --> 00:01:46,000
ex-colleagues are speaking on your left

41
00:01:46,000 --> 00:01:49,040
there about some work okay so i was also

42
00:01:49,040 --> 00:01:50,880
there at the the same group here which

43
00:01:50,880 --> 00:01:52,479
they are presenting

44
00:01:52,479 --> 00:01:55,439
and i also spent uh some time

45
00:01:55,439 --> 00:01:58,000
at very mac france uh which is a very

46
00:01:58,000 --> 00:02:00,960
good lab for program verification where

47
00:02:00,960 --> 00:02:03,280
basically i started doing a lot of uh

48
00:02:03,280 --> 00:02:05,600
program analysis from binary core

49
00:02:05,600 --> 00:02:06,799
perspective

50
00:02:06,799 --> 00:02:09,598
and so on

51
00:02:09,598 --> 00:02:11,760
so about the talk

52
00:02:11,760 --> 00:02:15,120
so as uh as i joined uh tii very

53
00:02:15,120 --> 00:02:18,160
recently and overseas center is a very

54
00:02:18,160 --> 00:02:20,800
new research center so we don't have

55
00:02:20,800 --> 00:02:23,599
actually a finished product to talk

56
00:02:23,599 --> 00:02:24,480
about

57
00:02:24,480 --> 00:02:26,879
but we all we have blueprints

58
00:02:26,879 --> 00:02:27,599
so

59
00:02:27,599 --> 00:02:29,760
most of the time in this talk i would i

60
00:02:29,760 --> 00:02:31,599
would be just talking about what we

61
00:02:31,599 --> 00:02:33,440
can't do here

62
00:02:33,440 --> 00:02:34,720
and

63
00:02:34,720 --> 00:02:37,360
basically i will be talking about some

64
00:02:37,360 --> 00:02:39,280
of the dimensions

65
00:02:39,280 --> 00:02:41,920
that allow us to to really

66
00:02:41,920 --> 00:02:44,959
build a secure software okay and i call

67
00:02:44,959 --> 00:02:47,760
them as automated star properties and

68
00:02:47,760 --> 00:02:50,400
then star means several things like

69
00:02:50,400 --> 00:02:52,959
vulnerability uh detection

70
00:02:52,959 --> 00:02:54,879
some mitigations

71
00:02:54,879 --> 00:02:55,840
and

72
00:02:55,840 --> 00:02:57,519
and i will discuss some of those

73
00:02:57,519 --> 00:03:00,480
divisions and during this talk i would

74
00:03:00,480 --> 00:03:02,239
i would like to uh i would like to

75
00:03:02,239 --> 00:03:05,440
emphasize or will write to convince you

76
00:03:05,440 --> 00:03:08,800
that there has to be a balance in all of

77
00:03:08,800 --> 00:03:11,040
these dimensions in order to really have

78
00:03:11,040 --> 00:03:14,000
a secure software focusing on just one

79
00:03:14,000 --> 00:03:15,040
may not

80
00:03:15,040 --> 00:03:18,800
yield a very fruitful result and i would

81
00:03:18,800 --> 00:03:20,959
also like to convince

82
00:03:20,959 --> 00:03:23,360
or would like to let's say

83
00:03:23,360 --> 00:03:25,519
give some ideas about how we should go

84
00:03:25,519 --> 00:03:27,519
about it and

85
00:03:27,519 --> 00:03:30,239
as a security community

86
00:03:30,239 --> 00:03:32,319
this is my experience also that we have

87
00:03:32,319 --> 00:03:34,400
to look at the neighboring research

88
00:03:34,400 --> 00:03:36,959
community also in order to take ideas

89
00:03:36,959 --> 00:03:39,280
and i have seen because i have worked in

90
00:03:39,280 --> 00:03:40,959
different communities focusing on the

91
00:03:40,959 --> 00:03:43,040
very very fundamental work theoretical

92
00:03:43,040 --> 00:03:46,560
work verification system communities and

93
00:03:46,560 --> 00:03:48,480
and i felt that sometimes they live in

94
00:03:48,480 --> 00:03:50,879
in isolation means the island the system

95
00:03:50,879 --> 00:03:52,959
community works its own way uh

96
00:03:52,959 --> 00:03:55,040
verification community works in own way

97
00:03:55,040 --> 00:03:56,879
but they are trying to achieve things

98
00:03:56,879 --> 00:03:59,120
which may help each other and sometimes

99
00:03:59,120 --> 00:04:00,640
that the dialogue is missing and that

100
00:04:00,640 --> 00:04:03,280
that that ends up and this result that i

101
00:04:03,280 --> 00:04:04,879
that we see that we tend to sometimes

102
00:04:04,879 --> 00:04:06,560
repeat research or sometimes we are not

103
00:04:06,560 --> 00:04:08,959
able to do things properly if you talk

104
00:04:08,959 --> 00:04:11,120
to each other things become pretty good

105
00:04:11,120 --> 00:04:13,439
this has been so i would like to also

106
00:04:13,439 --> 00:04:16,320
emphasize on this part

107
00:04:16,320 --> 00:04:17,680
okay

108
00:04:17,680 --> 00:04:19,519
so last year

109
00:04:19,519 --> 00:04:21,199
i happened to

110
00:04:21,199 --> 00:04:23,919
watch a keynote

111
00:04:23,919 --> 00:04:26,080
talk by alex

112
00:04:26,080 --> 00:04:28,400
and i think if you are working in

113
00:04:28,400 --> 00:04:30,400
security then you must be knowing this

114
00:04:30,400 --> 00:04:33,040
uh alex because he's also by the way

115
00:04:33,040 --> 00:04:34,160
author of

116
00:04:34,160 --> 00:04:36,240
fifth and fifth to seventh edition of

117
00:04:36,240 --> 00:04:38,240
windows internal he's a kind of like you

118
00:04:38,240 --> 00:04:40,720
know a kind of pillars of you know that

119
00:04:40,720 --> 00:04:42,800
generation of hackers who did a lot of

120
00:04:42,800 --> 00:04:44,560
fundamental work

121
00:04:44,560 --> 00:04:45,840
and

122
00:04:45,840 --> 00:04:49,600
and he presented a keynote at woot usnix

123
00:04:49,600 --> 00:04:52,000
which is offensive

124
00:04:52,000 --> 00:04:53,919
technology based

125
00:04:53,919 --> 00:04:55,360
conference

126
00:04:55,360 --> 00:04:57,840
and that was a very strong

127
00:04:57,840 --> 00:05:01,600
and very different keynote for me also

128
00:05:01,600 --> 00:05:03,600
and thanks to you know lockdown that

129
00:05:03,600 --> 00:05:06,080
that the talk was uh you know online so

130
00:05:06,080 --> 00:05:07,520
i could also attend otherwise it would

131
00:05:07,520 --> 00:05:09,280
have been difficult for me to to attend

132
00:05:09,280 --> 00:05:10,639
that talk

133
00:05:10,639 --> 00:05:12,000
and then what

134
00:05:12,000 --> 00:05:14,639
and what he mentioned there is

135
00:05:14,639 --> 00:05:16,720
basically that

136
00:05:16,720 --> 00:05:18,560
we are spending

137
00:05:18,560 --> 00:05:19,840
too much

138
00:05:19,840 --> 00:05:20,720
money

139
00:05:20,720 --> 00:05:22,080
and efforts

140
00:05:22,080 --> 00:05:23,360
on

141
00:05:23,360 --> 00:05:25,520
bug detection

142
00:05:25,520 --> 00:05:27,600
and he and he made this point that okay

143
00:05:27,600 --> 00:05:30,000
when he saw some of the

144
00:05:30,000 --> 00:05:31,919
thing coming up in bug detection for

145
00:05:31,919 --> 00:05:34,479
example you know uh fuzzing also and

146
00:05:34,479 --> 00:05:36,720
then people also working in bug bounties

147
00:05:36,720 --> 00:05:38,400
earning a lot of money he said that i

148
00:05:38,400 --> 00:05:40,800
have been seeing that for the last

149
00:05:40,800 --> 00:05:42,560
several years

150
00:05:42,560 --> 00:05:44,800
at that time also you were finding lot

151
00:05:44,800 --> 00:05:47,600
of bugs and today also we are finding

152
00:05:47,600 --> 00:05:49,039
lot of bugs

153
00:05:49,039 --> 00:05:51,360
but thing is that bug finding getting

154
00:05:51,360 --> 00:05:52,960
better but

155
00:05:52,960 --> 00:05:55,039
it's not that we do are not seeing bug

156
00:05:55,039 --> 00:05:56,479
you are still keep seeing

157
00:05:56,479 --> 00:05:58,319
vulnerabilities

158
00:05:58,319 --> 00:06:00,800
and this point was that okay because you

159
00:06:00,800 --> 00:06:03,280
have lot of incentives and you have to

160
00:06:03,280 --> 00:06:05,520
do something about it and then he went

161
00:06:05,520 --> 00:06:07,600
on seeing lot of things and basically he

162
00:06:07,600 --> 00:06:08,880
is trying to say that okay we have to

163
00:06:08,880 --> 00:06:10,880
change everything we have to start

164
00:06:10,880 --> 00:06:12,960
building software

165
00:06:12,960 --> 00:06:16,080
secure since you know when we start from

166
00:06:16,080 --> 00:06:18,400
the beginning itself that's the

167
00:06:18,400 --> 00:06:20,720
solution otherwise we are never going to

168
00:06:20,720 --> 00:06:22,319
end this this

169
00:06:22,319 --> 00:06:25,039
this dirty state of software development

170
00:06:25,039 --> 00:06:28,479
okay this resonates very well with what

171
00:06:28,479 --> 00:06:31,600
i was trying to uh you know do in my

172
00:06:31,600 --> 00:06:33,360
research career

173
00:06:33,360 --> 00:06:34,400
so i took

174
00:06:34,400 --> 00:06:36,720
some of the take away from this so he

175
00:06:36,720 --> 00:06:38,720
said that yes finding box automatic for

176
00:06:38,720 --> 00:06:40,479
me finding bus automatically is really

177
00:06:40,479 --> 00:06:42,000
important and it's played a very

178
00:06:42,000 --> 00:06:43,759
significant role so far because that's

179
00:06:43,759 --> 00:06:46,479
why we see now many many uh you know

180
00:06:46,479 --> 00:06:47,360
serious

181
00:06:47,360 --> 00:06:49,680
is coming up quickly and people are

182
00:06:49,680 --> 00:06:52,160
trying to do something about it okay but

183
00:06:52,160 --> 00:06:55,680
then the problem is as he said also that

184
00:06:55,680 --> 00:06:58,560
if you are just focusing on one side

185
00:06:58,560 --> 00:07:01,039
this is a imbalance means you just can't

186
00:07:01,039 --> 00:07:02,880
handle because you are getting too many

187
00:07:02,880 --> 00:07:04,960
bugs but you have no way of really

188
00:07:04,960 --> 00:07:07,199
fixing them quickly

189
00:07:07,199 --> 00:07:09,280
and that becomes imbalance

190
00:07:09,280 --> 00:07:10,880
so

191
00:07:10,880 --> 00:07:13,520
so then the point is here we have lot of

192
00:07:13,520 --> 00:07:15,440
incentives for finding bugs but we do

193
00:07:15,440 --> 00:07:18,160
not have equivalent for fixing bug for

194
00:07:18,160 --> 00:07:19,360
example

195
00:07:19,360 --> 00:07:20,479
okay

196
00:07:20,479 --> 00:07:22,720
shift left is techno i mean nowadays

197
00:07:22,720 --> 00:07:24,560
this is what people have proposed that

198
00:07:24,560 --> 00:07:25,680
okay bring

199
00:07:25,680 --> 00:07:26,960
everything

200
00:07:26,960 --> 00:07:29,199
uh related to security testing in your

201
00:07:29,199 --> 00:07:31,440
development itself yeah it works but the

202
00:07:31,440 --> 00:07:33,599
problem is that because you still it is

203
00:07:33,599 --> 00:07:35,440
still in the hand or the team who is

204
00:07:35,440 --> 00:07:38,000
developing that it's fine okay the

205
00:07:38,000 --> 00:07:40,560
problem is post release bug fixing is

206
00:07:40,560 --> 00:07:43,360
still a man versus machine effort you

207
00:07:43,360 --> 00:07:45,360
are you have a lot of lot of automated

208
00:07:45,360 --> 00:07:47,120
tool for finding but you can't do

209
00:07:47,120 --> 00:07:49,520
anything to fix them

210
00:07:49,520 --> 00:07:52,319
so we need more automation beyond the

211
00:07:52,319 --> 00:07:54,800
full pipeline of sdl okay so that's the

212
00:07:54,800 --> 00:07:57,039
one takeaway for me

213
00:07:57,039 --> 00:07:59,360
from the task

214
00:07:59,360 --> 00:08:01,039
so then

215
00:08:01,039 --> 00:08:02,960
what i i categorize as vulnerability

216
00:08:02,960 --> 00:08:05,520
research with everything that revolves

217
00:08:05,520 --> 00:08:06,879
around vulnerability finding

218
00:08:06,879 --> 00:08:09,280
vulnerability fixing vulnerability doing

219
00:08:09,280 --> 00:08:10,639
somehow mitigating the effect of

220
00:08:10,639 --> 00:08:12,400
vulnerability in all those things

221
00:08:12,400 --> 00:08:13,360
and

222
00:08:13,360 --> 00:08:15,919
so we need have some sort of balance

223
00:08:15,919 --> 00:08:19,919
there in all those aspects here okay so

224
00:08:19,919 --> 00:08:22,240
so at ti

225
00:08:22,240 --> 00:08:24,319
we are trying to do something in this

226
00:08:24,319 --> 00:08:25,360
direction

227
00:08:25,360 --> 00:08:28,319
okay and so so for example a program

228
00:08:28,319 --> 00:08:30,319
comprehension from a security property

229
00:08:30,319 --> 00:08:32,559
stand point of view this is exactly i

230
00:08:32,559 --> 00:08:34,240
was mentioning about our group because

231
00:08:34,240 --> 00:08:37,360
we really want to develop skills that

232
00:08:37,360 --> 00:08:40,159
allows us to to have a fantastic

233
00:08:40,159 --> 00:08:42,320
understanding of program whatever it is

234
00:08:42,320 --> 00:08:44,000
it may be source code it may be binary

235
00:08:44,000 --> 00:08:46,560
code small large we would like to have

236
00:08:46,560 --> 00:08:48,959
fundamental techniques inbuilt so that

237
00:08:48,959 --> 00:08:50,720
we can really understand what first of

238
00:08:50,720 --> 00:08:53,519
all what program is and i will show you

239
00:08:53,519 --> 00:08:55,200
tell you that okay this is fundamental

240
00:08:55,200 --> 00:08:57,440
for whatever task you want to achieve

241
00:08:57,440 --> 00:08:59,120
later on

242
00:08:59,120 --> 00:09:00,480
then in that we have vulnerability

243
00:09:00,480 --> 00:09:02,480
discovery and these are the kind of a

244
00:09:02,480 --> 00:09:04,160
blue area where you will see that okay

245
00:09:04,160 --> 00:09:08,399
we are focusing on a lot uh at cii

246
00:09:08,399 --> 00:09:10,480
and then attack mitigation this is i

247
00:09:10,480 --> 00:09:12,560
will go through one of the each of them

248
00:09:12,560 --> 00:09:14,880
in my subsequent slide

249
00:09:14,880 --> 00:09:16,800
and then you have

250
00:09:16,800 --> 00:09:18,959
attack patching automatic patching

251
00:09:18,959 --> 00:09:20,640
because as i said in the beginning if

252
00:09:20,640 --> 00:09:22,399
you are discovering too many bugs

253
00:09:22,399 --> 00:09:24,640
but you are not trying to do anything

254
00:09:24,640 --> 00:09:27,600
about them you are not going anywhere

255
00:09:27,600 --> 00:09:29,920
the program the software will remain

256
00:09:29,920 --> 00:09:32,160
insecure for decades to come unless

257
00:09:32,160 --> 00:09:34,080
until we do something fundamental about

258
00:09:34,080 --> 00:09:35,519
it

259
00:09:35,519 --> 00:09:37,600
then automatic spoil generation this

260
00:09:37,600 --> 00:09:40,399
seems kind of odd here because we are

261
00:09:40,399 --> 00:09:42,320
talking about building

262
00:09:42,320 --> 00:09:44,880
software secure software but certainly

263
00:09:44,880 --> 00:09:48,000
why the exploit generation i will touch

264
00:09:48,000 --> 00:09:50,240
something about it

265
00:09:50,240 --> 00:09:53,279
so vulnerability discovery part here

266
00:09:53,279 --> 00:09:56,000
so far we are mainly focusing on memory

267
00:09:56,000 --> 00:09:57,920
corruption bugs that are coming from

268
00:09:57,920 --> 00:09:59,600
memory and safe languages because we

269
00:09:59,600 --> 00:10:01,360
know there are there will be memory and

270
00:10:01,360 --> 00:10:02,720
safe languages

271
00:10:02,720 --> 00:10:05,519
i hope that after some time when we when

272
00:10:05,519 --> 00:10:07,600
we have more memory safe languages like

273
00:10:07,600 --> 00:10:10,240
rest go this thing will be

274
00:10:10,240 --> 00:10:11,680
uh better

275
00:10:11,680 --> 00:10:13,839
but it will take time a lot of time

276
00:10:13,839 --> 00:10:15,040
because

277
00:10:15,040 --> 00:10:17,360
i don't see that in the coming

278
00:10:17,360 --> 00:10:19,519
five years or more than five between

279
00:10:19,519 --> 00:10:21,839
five ten years we will replace

280
00:10:21,839 --> 00:10:24,000
memory and safe languages with memory

281
00:10:24,000 --> 00:10:26,959
safe languages it's gonna take time

282
00:10:26,959 --> 00:10:29,279
and then we have actually in this

283
00:10:29,279 --> 00:10:31,120
how we do vulnerability discovery

284
00:10:31,120 --> 00:10:32,959
automatically then we have static and

285
00:10:32,959 --> 00:10:35,440
dynamic program analysis techniques that

286
00:10:35,440 --> 00:10:36,480
we use

287
00:10:36,480 --> 00:10:38,959
fuzzing is one of such dynamic analysis

288
00:10:38,959 --> 00:10:41,360
technique but the problem here because

289
00:10:41,360 --> 00:10:43,680
it's a dynamic analysis it's precise

290
00:10:43,680 --> 00:10:46,880
it's fine but it's not complete

291
00:10:46,880 --> 00:10:49,760
okay and that is why you keep seeing

292
00:10:49,760 --> 00:10:51,040
many

293
00:10:51,040 --> 00:10:53,040
uh bugs being discovered now also

294
00:10:53,040 --> 00:10:55,200
because peop even though you rely on

295
00:10:55,200 --> 00:10:57,839
fuzzing which is effective but

296
00:10:57,839 --> 00:10:59,680
after all it's a dynamic analysis

297
00:10:59,680 --> 00:11:02,320
technique you are not sure how much

298
00:11:02,320 --> 00:11:03,360
coverage

299
00:11:03,360 --> 00:11:05,920
how much complete it is okay

300
00:11:05,920 --> 00:11:09,920
then you we can use static analysis okay

301
00:11:09,920 --> 00:11:12,880
but it's not precise and scalability is

302
00:11:12,880 --> 00:11:14,560
problematic

303
00:11:14,560 --> 00:11:16,560
so these are the fundamental problems in

304
00:11:16,560 --> 00:11:18,880
both of these techniques and if you use

305
00:11:18,880 --> 00:11:21,040
either of them you know fundamentally

306
00:11:21,040 --> 00:11:23,440
that okay there is a gap

307
00:11:23,440 --> 00:11:26,320
you just can't be sure about it

308
00:11:26,320 --> 00:11:28,480
so and then comes the part analyzing

309
00:11:28,480 --> 00:11:30,880
binding poses another

310
00:11:30,880 --> 00:11:32,640
problem whatever it is

311
00:11:32,640 --> 00:11:34,800
okay and there we see a lot of

312
00:11:34,800 --> 00:11:36,560
opportunity because

313
00:11:36,560 --> 00:11:38,720
we cannot avoid binary code analysis at

314
00:11:38,720 --> 00:11:41,839
all we have to we have to analyze binary

315
00:11:41,839 --> 00:11:43,920
code what even though we are

316
00:11:43,920 --> 00:11:44,959
working

317
00:11:44,959 --> 00:11:47,600
as a coder writing our own code and i

318
00:11:47,600 --> 00:11:48,880
will i will tell you a little bit more

319
00:11:48,880 --> 00:11:50,639
about it once we start this

320
00:11:50,639 --> 00:11:52,480
go in detail

321
00:11:52,480 --> 00:11:54,560
and we have definitely lot of lot of

322
00:11:54,560 --> 00:11:56,720
opportunities if we if

323
00:11:56,720 --> 00:11:59,519
if you look at this

324
00:11:59,519 --> 00:12:03,440
area of program analysis okay

325
00:12:03,440 --> 00:12:05,360
and then attack mitigation

326
00:12:05,360 --> 00:12:07,360
part as i talked about

327
00:12:07,360 --> 00:12:08,240
so

328
00:12:08,240 --> 00:12:10,639
we know that software will have bugs

329
00:12:10,639 --> 00:12:12,560
that's it a period we can we can't do

330
00:12:12,560 --> 00:12:15,279
anything about it and if there are bugs

331
00:12:15,279 --> 00:12:18,000
there will be exploit that that will you

332
00:12:18,000 --> 00:12:20,880
know exploit those vulnerabilities

333
00:12:20,880 --> 00:12:24,560
so there has to be some mechanism

334
00:12:24,560 --> 00:12:26,480
that allow us

335
00:12:26,480 --> 00:12:27,200
to

336
00:12:27,200 --> 00:12:29,040
mitigate those

337
00:12:29,040 --> 00:12:31,360
uh attacks exploits

338
00:12:31,360 --> 00:12:33,040
you can't avoid them

339
00:12:33,040 --> 00:12:35,920
okay then so last decade

340
00:12:35,920 --> 00:12:38,560
i would say sorry in my uh experience

341
00:12:38,560 --> 00:12:40,720
was dominated by control flow integrity

342
00:12:40,720 --> 00:12:43,360
solutions a lot people worked on control

343
00:12:43,360 --> 00:12:45,440
for integrity solution a lot

344
00:12:45,440 --> 00:12:46,480
and

345
00:12:46,480 --> 00:12:48,720
the effect was very good and you can see

346
00:12:48,720 --> 00:12:50,839
that now

347
00:12:50,839 --> 00:12:54,399
even the hardware or intel they have

348
00:12:54,399 --> 00:12:56,959
come up with their hardware

349
00:12:56,959 --> 00:12:59,839
feature that allows you to

350
00:12:59,839 --> 00:13:00,959
uh

351
00:13:00,959 --> 00:13:03,600
embed control for integrity in your

352
00:13:03,600 --> 00:13:06,399
software with the help of

353
00:13:06,399 --> 00:13:07,600
hardware

354
00:13:07,600 --> 00:13:10,160
earlier the problem was it's expensive

355
00:13:10,160 --> 00:13:12,000
if you want to have control to integrity

356
00:13:12,000 --> 00:13:15,760
directly in your software your software

357
00:13:15,760 --> 00:13:17,920
runs slower because of the performance

358
00:13:17,920 --> 00:13:20,800
overhead incurred by uh cfi control for

359
00:13:20,800 --> 00:13:22,560
integrity but now you see that the

360
00:13:22,560 --> 00:13:25,519
impact is super high it is like your

361
00:13:25,519 --> 00:13:27,519
hardware our vendors are thinking about

362
00:13:27,519 --> 00:13:28,800
oh no we should be we should do

363
00:13:28,800 --> 00:13:31,200
something about it

364
00:13:31,200 --> 00:13:33,920
okay and then source base control flow

365
00:13:33,920 --> 00:13:36,880
graph uh integ control uh flow integrity

366
00:13:36,880 --> 00:13:40,639
is definitely better than binary uh

367
00:13:40,639 --> 00:13:42,560
control for integrating for obvious

368
00:13:42,560 --> 00:13:45,519
reason because soft software has more i

369
00:13:45,519 --> 00:13:46,880
mean your source code has more

370
00:13:46,880 --> 00:13:49,519
information for you to analyze than the

371
00:13:49,519 --> 00:13:52,639
binary code but again if you just focus

372
00:13:52,639 --> 00:13:55,600
on software then it's not gonna help you

373
00:13:55,600 --> 00:13:57,040
much because

374
00:13:57,040 --> 00:14:00,000
at runtime your software depends on many

375
00:14:00,000 --> 00:14:02,880
libraries runtime libraries whose source

376
00:14:02,880 --> 00:14:04,560
code is not available to you so they are

377
00:14:04,560 --> 00:14:08,240
not enabled with cfi okay then again you

378
00:14:08,240 --> 00:14:11,920
are not going to win the price there

379
00:14:11,920 --> 00:14:14,639
so that is again a lot of uh opportunity

380
00:14:14,639 --> 00:14:17,279
uh to explore there in that particular

381
00:14:17,279 --> 00:14:19,279
part

382
00:14:19,279 --> 00:14:21,519
and then of course binary rewriting is

383
00:14:21,519 --> 00:14:23,600
fundamental for all these things because

384
00:14:23,600 --> 00:14:27,760
remember you are trying to

385
00:14:27,760 --> 00:14:30,240
change something in your in your

386
00:14:30,240 --> 00:14:32,079
application if it is binary that means

387
00:14:32,079 --> 00:14:34,240
you have to have way of changing your

388
00:14:34,240 --> 00:14:37,199
binary effectively so that's a one

389
00:14:37,199 --> 00:14:39,519
requirement if you want to go in this

390
00:14:39,519 --> 00:14:41,279
in this direction and we will see that

391
00:14:41,279 --> 00:14:42,800
what's happening in this

392
00:14:42,800 --> 00:14:44,480
so automatic exploit generation as i

393
00:14:44,480 --> 00:14:46,399
said that did this looks like a kind of

394
00:14:46,399 --> 00:14:48,160
odd uh

395
00:14:48,160 --> 00:14:50,800
member of this but all these dimensions

396
00:14:50,800 --> 00:14:54,959
but it is not actually in my opinion

397
00:14:54,959 --> 00:14:57,040
normally exploit generation is a really

398
00:14:57,040 --> 00:14:58,959
complex task because if you want to do

399
00:14:58,959 --> 00:15:01,360
automated exploit generation you have to

400
00:15:01,360 --> 00:15:04,480
consider several things including the

401
00:15:04,480 --> 00:15:06,320
environment of a particular victim

402
00:15:06,320 --> 00:15:07,279
machine

403
00:15:07,279 --> 00:15:10,000
there you may have lot of mitigation

404
00:15:10,000 --> 00:15:12,240
bringing brought up by your operating

405
00:15:12,240 --> 00:15:13,199
system

406
00:15:13,199 --> 00:15:15,839
okay you really do not know about that

407
00:15:15,839 --> 00:15:18,160
but you want to do everything

408
00:15:18,160 --> 00:15:20,800
automatically it's a super super complex

409
00:15:20,800 --> 00:15:23,519
task whatever we see currently is not

410
00:15:23,519 --> 00:15:26,320
like i mean it's really very trivial so

411
00:15:26,320 --> 00:15:28,079
it is very very complex first of all so

412
00:15:28,079 --> 00:15:29,920
if you really want to have a automatic

413
00:15:29,920 --> 00:15:31,440
generation which is full which is

414
00:15:31,440 --> 00:15:34,240
arbitrary for i mean it can take any any

415
00:15:34,240 --> 00:15:37,600
target and give you a new uh automatic

416
00:15:37,600 --> 00:15:39,759
exploit it's really not gonna happen in

417
00:15:39,759 --> 00:15:41,839
my opinion now okay

418
00:15:41,839 --> 00:15:43,199
so

419
00:15:43,199 --> 00:15:44,399
but then

420
00:15:44,399 --> 00:15:45,920
that's good actually

421
00:15:45,920 --> 00:15:47,040
because

422
00:15:47,040 --> 00:15:48,800
if we are

423
00:15:48,800 --> 00:15:50,720
trying to generate automatic

424
00:15:50,720 --> 00:15:54,000
exploits and we know that for many

425
00:15:54,000 --> 00:15:56,399
complex scenarios it will not be able to

426
00:15:56,399 --> 00:15:57,519
do so

427
00:15:57,519 --> 00:15:59,040
but however

428
00:15:59,040 --> 00:16:00,880
if it could

429
00:16:00,880 --> 00:16:03,759
then we know that definitely smart

430
00:16:03,759 --> 00:16:05,360
people out there

431
00:16:05,360 --> 00:16:07,120
will definitely write an exploit for

432
00:16:07,120 --> 00:16:09,040
that that's for sure because there are

433
00:16:09,040 --> 00:16:11,360
people who are super smart than the

434
00:16:11,360 --> 00:16:12,959
current state of automatics by

435
00:16:12,959 --> 00:16:15,279
generation so if your algorithm could do

436
00:16:15,279 --> 00:16:16,079
this

437
00:16:16,079 --> 00:16:17,680
definitely is going to be exploited in

438
00:16:17,680 --> 00:16:19,920
the wild so for you it's a good

439
00:16:19,920 --> 00:16:22,240
measurement of how to fix this bug

440
00:16:22,240 --> 00:16:24,800
quickly so you have a prioritization

441
00:16:24,800 --> 00:16:26,720
based on that so for me it's more of a

442
00:16:26,720 --> 00:16:29,199
prioritization you still get lot of bug

443
00:16:29,199 --> 00:16:30,639
but you really do not know which book to

444
00:16:30,639 --> 00:16:31,360
fix

445
00:16:31,360 --> 00:16:33,040
is fix first

446
00:16:33,040 --> 00:16:35,440
this gives you some sort of ranking and

447
00:16:35,440 --> 00:16:37,040
then you can prioritize your efforts

448
00:16:37,040 --> 00:16:39,759
accordingly so for me it's still a kind

449
00:16:39,759 --> 00:16:41,199
of a good member even though it looks

450
00:16:41,199 --> 00:16:43,040
like it's a function part why we are

451
00:16:43,040 --> 00:16:46,800
talking about but it's important for me

452
00:16:46,800 --> 00:16:49,360
and then automatic exploit generation

453
00:16:49,360 --> 00:16:52,079
i say that it's a it it's kind of like a

454
00:16:52,079 --> 00:16:54,399
rigorous testing software rigorous

455
00:16:54,399 --> 00:16:56,399
software testing so if you bring in this

456
00:16:56,399 --> 00:16:57,279
kind of

457
00:16:57,279 --> 00:16:58,560
uh

458
00:16:58,560 --> 00:17:00,639
feature or dimension in your in your

459
00:17:00,639 --> 00:17:02,800
overall secure development it becomes i

460
00:17:02,800 --> 00:17:05,439
think more rigorous than just relying on

461
00:17:05,439 --> 00:17:08,079
you know some uh

462
00:17:08,079 --> 00:17:10,959
static or dynamic analysis

463
00:17:10,959 --> 00:17:13,359
and then auto patching i said that

464
00:17:13,359 --> 00:17:16,559
this is relatively a new area now

465
00:17:16,559 --> 00:17:19,199
okay and then initially like

466
00:17:19,199 --> 00:17:21,679
in 90s people came up with the idea of

467
00:17:21,679 --> 00:17:24,079
autonomic computing there they were

468
00:17:24,079 --> 00:17:26,319
talking about lot of self properties of

469
00:17:26,319 --> 00:17:28,720
the software of course that was ahead of

470
00:17:28,720 --> 00:17:30,240
time proposal

471
00:17:30,240 --> 00:17:33,360
but now i think things are pretty good

472
00:17:33,360 --> 00:17:35,200
and we can really go forward in the

473
00:17:35,200 --> 00:17:36,480
direction

474
00:17:36,480 --> 00:17:40,960
uh of uh autonomic computing

475
00:17:40,960 --> 00:17:43,600
so basically what it says that okay

476
00:17:43,600 --> 00:17:45,760
you you once a bug is found or maybe

477
00:17:45,760 --> 00:17:48,400
perhaps exploited also patch can take

478
00:17:48,400 --> 00:17:50,640
time still right you you will you will

479
00:17:50,640 --> 00:17:52,880
file the bug and then depending on the

480
00:17:52,880 --> 00:17:55,440
availability people will try to patch it

481
00:17:55,440 --> 00:17:57,039
and

482
00:17:57,039 --> 00:17:59,840
also if the bug is in is in is in some

483
00:17:59,840 --> 00:18:02,480
third party library it is really out of

484
00:18:02,480 --> 00:18:04,400
your hand you can't do anything about it

485
00:18:04,400 --> 00:18:06,559
you have to just wait for that okay

486
00:18:06,559 --> 00:18:09,760
so so that's why now i feel that

487
00:18:09,760 --> 00:18:11,760
lot of emphasis is being given to this

488
00:18:11,760 --> 00:18:13,440
aspect and especially if you see there

489
00:18:13,440 --> 00:18:15,520
is a dharpa

490
00:18:15,520 --> 00:18:18,480
grand challenge also now for the same

491
00:18:18,480 --> 00:18:20,960
purpose and darpa keeps encouraging

492
00:18:20,960 --> 00:18:22,880
people while

493
00:18:22,880 --> 00:18:24,480
with coming up with uh

494
00:18:24,480 --> 00:18:26,880
coming up with new grand challenges

495
00:18:26,880 --> 00:18:29,600
so this is one of those run challenges

496
00:18:29,600 --> 00:18:31,120
there

497
00:18:31,120 --> 00:18:32,400
so now

498
00:18:32,400 --> 00:18:34,559
program comprehension i come back to now

499
00:18:34,559 --> 00:18:36,559
so whatever we saw earlier all these

500
00:18:36,559 --> 00:18:38,960
dimensions if you look at

501
00:18:38,960 --> 00:18:39,760
them

502
00:18:39,760 --> 00:18:40,880
closely

503
00:18:40,880 --> 00:18:43,600
then you will find that all of them

504
00:18:43,600 --> 00:18:45,039
involves

505
00:18:45,039 --> 00:18:47,679
a better analysis of the system

506
00:18:47,679 --> 00:18:49,679
if you do not have better analysis

507
00:18:49,679 --> 00:18:51,440
techniques for your system

508
00:18:51,440 --> 00:18:54,000
you cannot automate that that part and

509
00:18:54,000 --> 00:18:56,000
that's the main thing because you as an

510
00:18:56,000 --> 00:18:58,320
individual may look at a particular

511
00:18:58,320 --> 00:18:59,440
software

512
00:18:59,440 --> 00:19:01,200
you can analyze it

513
00:19:01,200 --> 00:19:03,360
with your own understanding you can do

514
00:19:03,360 --> 00:19:06,000
something about it but you cannot

515
00:19:06,000 --> 00:19:07,440
automate it

516
00:19:07,440 --> 00:19:10,160
in order to do automatic automated way

517
00:19:10,160 --> 00:19:12,559
of analysis you have to go back to

518
00:19:12,559 --> 00:19:14,400
program analysis part of program

519
00:19:14,400 --> 00:19:16,160
comprehension so that's why i said it's

520
00:19:16,160 --> 00:19:19,280
a it's a it's a fundamental for all

521
00:19:19,280 --> 00:19:22,799
these dimensions that we talked about

522
00:19:22,799 --> 00:19:25,280
and then from the security perspective

523
00:19:25,280 --> 00:19:28,799
we also have a kind of whole system

524
00:19:28,799 --> 00:19:30,799
whole program analysis

525
00:19:30,799 --> 00:19:32,960
and to make thing worse you have to

526
00:19:32,960 --> 00:19:35,039
sometimes deal with multi language

527
00:19:35,039 --> 00:19:37,360
analysis because nowadays your your

528
00:19:37,360 --> 00:19:40,480
programs are so so complex they are not

529
00:19:40,480 --> 00:19:43,280
written in one language only you can you

530
00:19:43,280 --> 00:19:46,640
know mix languages you can use c you can

531
00:19:46,640 --> 00:19:48,799
use c plus plus you can use rust with

532
00:19:48,799 --> 00:19:51,039
calling c function even other other

533
00:19:51,039 --> 00:19:53,200
combinations are possible in such

534
00:19:53,200 --> 00:19:54,400
scenarios

535
00:19:54,400 --> 00:19:56,559
you are talking about program analysis

536
00:19:56,559 --> 00:19:59,039
in a proper way it's really really hard

537
00:19:59,039 --> 00:20:01,600
now so we really require a lot of lot of

538
00:20:01,600 --> 00:20:03,200
you know effort new efforts in this

539
00:20:03,200 --> 00:20:06,000
direction

540
00:20:06,000 --> 00:20:07,520
then this is the part i already touched

541
00:20:07,520 --> 00:20:09,039
upon that what even though you are the

542
00:20:09,039 --> 00:20:10,720
owner of a particular project you have

543
00:20:10,720 --> 00:20:12,960
full access to source code you may still

544
00:20:12,960 --> 00:20:15,039
be using third party libraries whose

545
00:20:15,039 --> 00:20:16,559
source code is not i mean they are

546
00:20:16,559 --> 00:20:18,720
commercial so you only use them in

547
00:20:18,720 --> 00:20:22,320
binary form but your software depends on

548
00:20:22,320 --> 00:20:24,799
those libraries how you are sure that

549
00:20:24,799 --> 00:20:26,559
your everything is all right because

550
00:20:26,559 --> 00:20:28,159
there may be problem in those libraries

551
00:20:28,159 --> 00:20:30,240
so you have to have a way of you know

552
00:20:30,240 --> 00:20:32,159
mixing these two

553
00:20:32,159 --> 00:20:35,919
sources and mine binary base analysis

554
00:20:35,919 --> 00:20:38,400
so this is again a

555
00:20:38,400 --> 00:20:40,400
good part that

556
00:20:40,400 --> 00:20:41,919
nowadays actually

557
00:20:41,919 --> 00:20:44,480
you also have a

558
00:20:44,480 --> 00:20:46,080
hardware support that i talked about

559
00:20:46,080 --> 00:20:49,520
little bit and also some of the machine

560
00:20:49,520 --> 00:20:51,520
learning and artificial intelligence

561
00:20:51,520 --> 00:20:53,840
maybe i think it's a it's a good time to

562
00:20:53,840 --> 00:20:57,679
to try that reason is not that they are

563
00:20:57,679 --> 00:21:00,880
really magic it's not about this for me

564
00:21:00,880 --> 00:21:03,840
it's about like complex the softwares

565
00:21:03,840 --> 00:21:05,200
are very large

566
00:21:05,200 --> 00:21:06,799
very complex

567
00:21:06,799 --> 00:21:08,799
perhaps you may miss many things

568
00:21:08,799 --> 00:21:10,799
as a systematic analysis

569
00:21:10,799 --> 00:21:11,919
so

570
00:21:11,919 --> 00:21:13,600
bring in little bit of

571
00:21:13,600 --> 00:21:17,039
ai or ml to help you in order to get rid

572
00:21:17,039 --> 00:21:19,440
of all those complexities and let let

573
00:21:19,440 --> 00:21:21,760
let the ml analyze little bit for you

574
00:21:21,760 --> 00:21:25,360
and then you move forward okay

575
00:21:27,200 --> 00:21:30,159
so now we go little bit of ah in detail

576
00:21:30,159 --> 00:21:32,320
about like what i see

577
00:21:32,320 --> 00:21:33,919
what is happening and how we can do

578
00:21:33,919 --> 00:21:36,559
little bit more there so basically for

579
00:21:36,559 --> 00:21:38,960
me the program analysis means it is like

580
00:21:38,960 --> 00:21:41,120
is still assisting humans i think it's

581
00:21:41,120 --> 00:21:43,840
not about totally replacing human it's

582
00:21:43,840 --> 00:21:46,320
like it gives some more idea about the

583
00:21:46,320 --> 00:21:48,240
properties of the program in more

584
00:21:48,240 --> 00:21:50,720
automated way to human and then let

585
00:21:50,720 --> 00:21:52,799
human decide certain aspects very very

586
00:21:52,799 --> 00:21:54,720
difficult to take out human fully i

587
00:21:54,720 --> 00:21:56,880
think at this stage

588
00:21:56,880 --> 00:21:59,760
okay so question to ponder upon for me

589
00:21:59,760 --> 00:22:01,919
is like that what security aspects are

590
00:22:01,919 --> 00:22:04,159
important to address for example so what

591
00:22:04,159 --> 00:22:05,280
kind of

592
00:22:05,280 --> 00:22:07,679
security property we are interested in

593
00:22:07,679 --> 00:22:10,080
for example insecure

594
00:22:10,080 --> 00:22:12,159
information flow this is how your

595
00:22:12,159 --> 00:22:14,159
information leak happens if you really

596
00:22:14,159 --> 00:22:16,400
you are looking for those kind of

597
00:22:16,400 --> 00:22:18,400
vulnerabilities you have to think about

598
00:22:18,400 --> 00:22:21,520
okay what can i do about it okay some of

599
00:22:21,520 --> 00:22:24,400
the things are for example here in the

600
00:22:24,400 --> 00:22:26,559
second point like initialize read null

601
00:22:26,559 --> 00:22:29,120
pointer dereferencing use after free

602
00:22:29,120 --> 00:22:30,720
these are typical memory corruption

603
00:22:30,720 --> 00:22:31,679
books

604
00:22:31,679 --> 00:22:33,679
typical but little bit you know harder

605
00:22:33,679 --> 00:22:36,159
than the more known form of like stack

606
00:22:36,159 --> 00:22:38,000
overflow this kind of thing they are

607
00:22:38,000 --> 00:22:39,760
little bit more complex

608
00:22:39,760 --> 00:22:40,960
when

609
00:22:40,960 --> 00:22:42,720
but the point here is

610
00:22:42,720 --> 00:22:44,559
some of them

611
00:22:44,559 --> 00:22:46,559
can be detected

612
00:22:46,559 --> 00:22:49,679
by using just a classical classical

613
00:22:49,679 --> 00:22:52,000
program analysis or compiler back-end

614
00:22:52,000 --> 00:22:53,520
analysis

615
00:22:53,520 --> 00:22:55,280
if you are aware of some of them for

616
00:22:55,280 --> 00:22:57,600
example even the reaching definition

617
00:22:57,600 --> 00:22:58,480
can

618
00:22:58,480 --> 00:22:59,919
very easily

619
00:22:59,919 --> 00:23:02,720
uh detect

620
00:23:02,720 --> 00:23:05,520
oh it's been back here yes

621
00:23:05,520 --> 00:23:07,360
uninitialized read

622
00:23:07,360 --> 00:23:09,760
just you adopt classical

623
00:23:09,760 --> 00:23:12,080
compiler backhand technique and you can

624
00:23:12,080 --> 00:23:12,799
do

625
00:23:12,799 --> 00:23:14,960
uh some of the you can analyze some of

626
00:23:14,960 --> 00:23:16,640
these vulnerabilities very well the all

627
00:23:16,640 --> 00:23:18,240
we need is some sort of you know

628
00:23:18,240 --> 00:23:21,720
creative thinking

629
00:23:22,080 --> 00:23:23,840
all right

630
00:23:23,840 --> 00:23:25,760
so this is what i was talking about that

631
00:23:25,760 --> 00:23:28,159
compiler and so compiler backend they

632
00:23:28,159 --> 00:23:30,000
are working on very interesting

633
00:23:30,000 --> 00:23:32,400
techniques if you are really doing a

634
00:23:32,400 --> 00:23:34,320
software analysis but still just not

635
00:23:34,320 --> 00:23:36,559
software analysis the same techniques

636
00:23:36,559 --> 00:23:39,360
can be adopted to binary code also as

637
00:23:39,360 --> 00:23:41,360
well

638
00:23:41,360 --> 00:23:43,440
and then you have verification

639
00:23:43,440 --> 00:23:44,720
communities they are working on

640
00:23:44,720 --> 00:23:46,640
verification techniques but some of

641
00:23:46,640 --> 00:23:49,039
those techniques you can adopt we can

642
00:23:49,039 --> 00:23:51,039
adopt for our program and security

643
00:23:51,039 --> 00:23:53,200
program analysis and the venue to look

644
00:23:53,200 --> 00:23:56,000
for is like pldi purpose these are the

645
00:23:56,000 --> 00:23:58,400
top venues where you have fantastic work

646
00:23:58,400 --> 00:24:00,559
coming up okay

647
00:24:00,559 --> 00:24:02,880
i will give some examples of that

648
00:24:02,880 --> 00:24:05,760
the scalability that's uh i think

649
00:24:05,760 --> 00:24:07,120
main hurdle

650
00:24:07,120 --> 00:24:09,200
the security analysis often require

651
00:24:09,200 --> 00:24:11,520
whole program analysis that's a one

652
00:24:11,520 --> 00:24:13,120
thing so if you really want to do

653
00:24:13,120 --> 00:24:15,279
something meaningful you have to have

654
00:24:15,279 --> 00:24:16,960
really a hopeful

655
00:24:16,960 --> 00:24:18,559
uh program analysis

656
00:24:18,559 --> 00:24:21,039
and that is not that easy yet

657
00:24:21,039 --> 00:24:22,799
especially given the fact that we saw

658
00:24:22,799 --> 00:24:24,559
that okay environment is very very you

659
00:24:24,559 --> 00:24:25,360
know

660
00:24:25,360 --> 00:24:29,039
uh hit a heterogeneous

661
00:24:29,039 --> 00:24:31,039
so there are some very interesting

662
00:24:31,039 --> 00:24:32,799
things happening for example in abstract

663
00:24:32,799 --> 00:24:35,039
interpretation it's a very very and it's

664
00:24:35,039 --> 00:24:37,919
a it's a a static analysis but does a

665
00:24:37,919 --> 00:24:39,279
lot of runtime

666
00:24:39,279 --> 00:24:41,840
ah kind of infer

667
00:24:41,840 --> 00:24:44,799
infer of runtime inference of prop uh

668
00:24:44,799 --> 00:24:47,039
dynamic properties of your a program

669
00:24:47,039 --> 00:24:49,440
okay so it's a very powerful technique

670
00:24:49,440 --> 00:24:50,640
people are i will give you some

671
00:24:50,640 --> 00:24:53,279
reference at the in the next slide

672
00:24:53,279 --> 00:24:55,360
okay

673
00:24:55,360 --> 00:24:57,279
and this is something i put it green

674
00:24:57,279 --> 00:24:59,120
because this is very to me it's very

675
00:24:59,120 --> 00:25:00,880
very important area which is like teen

676
00:25:00,880 --> 00:25:02,880
flow analysis it's it's like

677
00:25:02,880 --> 00:25:05,279
it's it's it's very useful for

678
00:25:05,279 --> 00:25:07,840
several security related tasks

679
00:25:07,840 --> 00:25:09,600
unfortunately

680
00:25:09,600 --> 00:25:12,799
we are still uh we do not have

681
00:25:12,799 --> 00:25:15,440
very very you know interesting or good

682
00:25:15,440 --> 00:25:18,320
solution for it i mean there are dynamic

683
00:25:18,320 --> 00:25:20,480
inflow analysis techniques but they do

684
00:25:20,480 --> 00:25:22,480
have lot of lot of overhead

685
00:25:22,480 --> 00:25:24,880
now there is a possibility of maybe ah

686
00:25:24,880 --> 00:25:27,440
combining some of the recent development

687
00:25:27,440 --> 00:25:30,000
in in hardware also to come up with a

688
00:25:30,000 --> 00:25:32,240
very uh

689
00:25:32,240 --> 00:25:34,159
good info analysis technique you can

690
00:25:34,159 --> 00:25:36,960
combine static analysis

691
00:25:36,960 --> 00:25:38,640
kind of thing and then

692
00:25:38,640 --> 00:25:41,360
symbolic and concolic execution okay

693
00:25:41,360 --> 00:25:45,039
this is also a very good uh

694
00:25:45,039 --> 00:25:47,520
candidate that we should be exploring

695
00:25:47,520 --> 00:25:49,760
more i guess and it has got

696
00:25:49,760 --> 00:25:52,159
it has got application in almost every

697
00:25:52,159 --> 00:25:53,600
dimension that we talked about

698
00:25:53,600 --> 00:25:55,760
vulnerability detection

699
00:25:55,760 --> 00:25:58,559
mitigation part okay and automatic

700
00:25:58,559 --> 00:26:00,320
exploit generation it's it's kind of

701
00:26:00,320 --> 00:26:02,240
like a fundamental there i would say

702
00:26:02,240 --> 00:26:04,159
fundamental means it's so so important

703
00:26:04,159 --> 00:26:04,880
that

704
00:26:04,880 --> 00:26:07,440
if you if you do it properly i think you

705
00:26:07,440 --> 00:26:08,640
are good

706
00:26:08,640 --> 00:26:11,440
so there are some recent advancements in

707
00:26:11,440 --> 00:26:14,240
in this area for example sims easy if

708
00:26:14,240 --> 00:26:16,080
you are in this you might have seen that

709
00:26:16,080 --> 00:26:17,200
it changed

710
00:26:17,200 --> 00:26:19,760
the whole whole dialogue there okay

711
00:26:19,760 --> 00:26:21,760
because by nature symbolic execution is

712
00:26:21,760 --> 00:26:23,120
symbolically you are trying to

713
00:26:23,120 --> 00:26:25,679
understand interpreting and simply

714
00:26:25,679 --> 00:26:27,600
change that narrative at all it says

715
00:26:27,600 --> 00:26:29,039
that okay fine we can even do something

716
00:26:29,039 --> 00:26:30,559
with the compile time and then it gets

717
00:26:30,559 --> 00:26:33,039
you all the information that you want

718
00:26:33,039 --> 00:26:35,760
and then chop symbolic execution q sim

719
00:26:35,760 --> 00:26:37,520
okay there are many thing

720
00:26:37,520 --> 00:26:38,960
and

721
00:26:38,960 --> 00:26:41,360
so for example so this is the so this is

722
00:26:41,360 --> 00:26:43,520
the work that i did uh before joining

723
00:26:43,520 --> 00:26:45,840
tii so i will not talk about

724
00:26:45,840 --> 00:26:47,919
in this work here but

725
00:26:47,919 --> 00:26:50,000
this is also one attempt towards making

726
00:26:50,000 --> 00:26:51,679
symbolic or concolic education a little

727
00:26:51,679 --> 00:26:53,760
bit more usable okay

728
00:26:53,760 --> 00:26:56,080
and basically what it does is like again

729
00:26:56,080 --> 00:26:58,320
i am using 10 flow analysis to do some

730
00:26:58,320 --> 00:26:59,679
optimization

731
00:26:59,679 --> 00:27:02,240
to make it better and this is my

732
00:27:02,240 --> 00:27:03,919
main point here that we do have

733
00:27:03,919 --> 00:27:06,240
techniques now all we have to do use

734
00:27:06,240 --> 00:27:10,080
them creatively and then they can work

735
00:27:10,080 --> 00:27:14,320
in a better way for the given task

736
00:27:16,400 --> 00:27:17,919
so this is

737
00:27:17,919 --> 00:27:20,480
source and binary i touched upon it

738
00:27:20,480 --> 00:27:22,960
so you have to choose whether you want

739
00:27:22,960 --> 00:27:26,080
to do source code analysis source based

740
00:27:26,080 --> 00:27:29,279
analysis or binary base analysis fine

741
00:27:29,279 --> 00:27:30,320
but

742
00:27:30,320 --> 00:27:31,919
the point here is

743
00:27:31,919 --> 00:27:33,440
if you do

744
00:27:33,440 --> 00:27:35,760
binary based and program analysis it is

745
00:27:35,760 --> 00:27:37,440
still fun i mean we say that okay we

746
00:27:37,440 --> 00:27:39,679
have to get our hand dirty normally when

747
00:27:39,679 --> 00:27:42,000
you are talking about low level bind

748
00:27:42,000 --> 00:27:44,080
playing with assembly code this is

749
00:27:44,080 --> 00:27:46,000
people typically say that well we have

750
00:27:46,000 --> 00:27:48,000
to get our hand dirty but is this still

751
00:27:48,000 --> 00:27:51,360
fun like okay it's nice like you like it

752
00:27:51,360 --> 00:27:53,440
the problem comes that when we talk

753
00:27:53,440 --> 00:27:54,399
about

754
00:27:54,399 --> 00:27:58,000
real large complex applications then

755
00:27:58,000 --> 00:27:59,919
it's not always

756
00:27:59,919 --> 00:28:02,559
a fun i mean it's really really hard it

757
00:28:02,559 --> 00:28:03,919
is like okay

758
00:28:03,919 --> 00:28:05,760
i don't see that okay that is really

759
00:28:05,760 --> 00:28:07,440
really fun i am enjoying it no no after

760
00:28:07,440 --> 00:28:08,720
some time you really get frustrated

761
00:28:08,720 --> 00:28:10,480
because it's really really tough

762
00:28:10,480 --> 00:28:12,240
especially when you talk about binary

763
00:28:12,240 --> 00:28:14,320
code analysis and in order to make

764
00:28:14,320 --> 00:28:17,440
things even worse multi-language and now

765
00:28:17,440 --> 00:28:19,200
you have c

766
00:28:19,200 --> 00:28:20,640
c plus plus

767
00:28:20,640 --> 00:28:22,159
if you look at c plus plus code at

768
00:28:22,159 --> 00:28:24,880
binary level a it is like it's totally

769
00:28:24,880 --> 00:28:26,159
mess

770
00:28:26,159 --> 00:28:28,080
and it becomes really difficult to to

771
00:28:28,080 --> 00:28:30,080
analyze it so that's what i'm talking

772
00:28:30,080 --> 00:28:32,080
about here it's really really super

773
00:28:32,080 --> 00:28:33,360
challenging but

774
00:28:33,360 --> 00:28:36,959
lot of opportunities that's why

775
00:28:37,919 --> 00:28:39,600
right so and binary code unless

776
00:28:39,600 --> 00:28:41,679
basically a security community thing i

777
00:28:41,679 --> 00:28:43,600
would say because it's it's it's

778
00:28:43,600 --> 00:28:45,360
normally security community who is

779
00:28:45,360 --> 00:28:47,360
trying to work on it and this is my

780
00:28:47,360 --> 00:28:49,360
point i was trying to make because it's

781
00:28:49,360 --> 00:28:51,360
security community they are trying to

782
00:28:51,360 --> 00:28:53,520
work on a binary code analysis but on

783
00:28:53,520 --> 00:28:54,799
the same time

784
00:28:54,799 --> 00:28:56,399
it is only security committee but they

785
00:28:56,399 --> 00:28:57,679
are not trying to talk to other

786
00:28:57,679 --> 00:29:00,159
communities like verification people or

787
00:29:00,159 --> 00:29:02,559
some other people because they have nice

788
00:29:02,559 --> 00:29:04,640
techniques may be classical and you can

789
00:29:04,640 --> 00:29:07,120
adopt them but that communication is not

790
00:29:07,120 --> 00:29:08,960
happening much

791
00:29:08,960 --> 00:29:10,480
and if we have that communication i

792
00:29:10,480 --> 00:29:13,840
think this this is fantastic

793
00:29:15,039 --> 00:29:17,200
all right so i will move forward exploit

794
00:29:17,200 --> 00:29:18,880
mitigation

795
00:29:18,880 --> 00:29:21,440
so understanding holders in developing

796
00:29:21,440 --> 00:29:24,000
this is my objective like why i want to

797
00:29:24,000 --> 00:29:26,159
uh currently what what is what i want to

798
00:29:26,159 --> 00:29:28,399
study here first of all to understand

799
00:29:28,399 --> 00:29:31,440
that what are the hurdles in developing

800
00:29:31,440 --> 00:29:34,159
attack mitigation techniques

801
00:29:34,159 --> 00:29:36,480
so question to ponder upon is are we

802
00:29:36,480 --> 00:29:38,880
discovering new attack surfaces

803
00:29:38,880 --> 00:29:42,080
okay because automated exploit automatic

804
00:29:42,080 --> 00:29:43,919
exploit mitigation

805
00:29:43,919 --> 00:29:46,799
we need to understand what are the

806
00:29:46,799 --> 00:29:49,440
what are the new surfaces

807
00:29:49,440 --> 00:29:51,279
that we have to deal with

808
00:29:51,279 --> 00:29:53,120
that means new technologies for example

809
00:29:53,120 --> 00:29:55,919
nowadays you have like iots right lot of

810
00:29:55,919 --> 00:29:57,840
iit devices definitely they have lot of

811
00:29:57,840 --> 00:30:00,240
new attack surfaces coming up and now

812
00:30:00,240 --> 00:30:01,279
your

813
00:30:01,279 --> 00:30:03,039
attack mitigation you have to consider

814
00:30:03,039 --> 00:30:04,960
those things so that means of course if

815
00:30:04,960 --> 00:30:06,880
you just consider a typical desktop

816
00:30:06,880 --> 00:30:08,720
server kind of application it takes some

817
00:30:08,720 --> 00:30:10,559
input either from the network or your

818
00:30:10,559 --> 00:30:13,279
file and then does maybe you have to

819
00:30:13,279 --> 00:30:14,240
adopt

820
00:30:14,240 --> 00:30:16,480
in iot

821
00:30:16,480 --> 00:30:18,880
are there newer attack techniques which

822
00:30:18,880 --> 00:30:20,799
are fundamentally different that is also

823
00:30:20,799 --> 00:30:22,480
one important part that we have to

824
00:30:22,480 --> 00:30:24,880
understand other that's why you can do

825
00:30:24,880 --> 00:30:26,480
some mitigation

826
00:30:26,480 --> 00:30:27,840
if

827
00:30:27,840 --> 00:30:28,960
the attacks

828
00:30:28,960 --> 00:30:31,039
are fundamentally different your

829
00:30:31,039 --> 00:30:32,240
mitigation

830
00:30:32,240 --> 00:30:34,480
definitely may not work there and this

831
00:30:34,480 --> 00:30:37,760
is what we see a lot in the previous

832
00:30:37,760 --> 00:30:39,440
decade like we came up with

833
00:30:39,440 --> 00:30:43,600
new kind of attacks like for example

834
00:30:43,600 --> 00:30:46,320
coupe which is like counter feed object

835
00:30:46,320 --> 00:30:47,520
oriented

836
00:30:47,520 --> 00:30:49,840
programming okay and then people come up

837
00:30:49,840 --> 00:30:50,640
with

838
00:30:50,640 --> 00:30:53,200
print only programming data oriented

839
00:30:53,200 --> 00:30:54,559
attacks okay

840
00:30:54,559 --> 00:30:56,640
these are fundamentally different

841
00:30:56,640 --> 00:30:58,159
attacks

842
00:30:58,159 --> 00:31:01,440
and you really need to have a new way of

843
00:31:01,440 --> 00:31:03,679
i mean coming up a new way of uh

844
00:31:03,679 --> 00:31:05,760
defending against them okay

845
00:31:05,760 --> 00:31:08,080
so we saw already

846
00:31:08,080 --> 00:31:10,159
some of the techniques i talked about

847
00:31:10,159 --> 00:31:12,559
that source of binary code uh binary

848
00:31:12,559 --> 00:31:15,360
level control for integrity yes that's

849
00:31:15,360 --> 00:31:16,640
that's there and

850
00:31:16,640 --> 00:31:18,480
we we have lot of opportunities in

851
00:31:18,480 --> 00:31:22,000
binary uh cfi then code diversification

852
00:31:22,000 --> 00:31:24,320
that is a one more another technique but

853
00:31:24,320 --> 00:31:25,519
very very

854
00:31:25,519 --> 00:31:28,880
not much investigated so far there

855
00:31:28,880 --> 00:31:31,440
because it is it is it is also a little

856
00:31:31,440 --> 00:31:33,440
bit difficult because the idea about the

857
00:31:33,440 --> 00:31:36,080
idea behind code diversification is

858
00:31:36,080 --> 00:31:38,080
that each binary that you compile looks

859
00:31:38,080 --> 00:31:41,120
different each binary okay and still the

860
00:31:41,120 --> 00:31:42,880
functionality is same

861
00:31:42,880 --> 00:31:45,600
so it is it is not that easy

862
00:31:45,600 --> 00:31:48,240
but if you are able to do it pretty nice

863
00:31:48,240 --> 00:31:50,799
okay and then other thing is which is

864
00:31:50,799 --> 00:31:52,320
which i i am

865
00:31:52,320 --> 00:31:53,679
hoping a lot

866
00:31:53,679 --> 00:31:56,159
uh on this aspect like hardware support

867
00:31:56,159 --> 00:31:58,640
that's very very important here

868
00:31:58,640 --> 00:32:00,240
because

869
00:32:00,240 --> 00:32:02,480
attack mitigation means that you are

870
00:32:02,480 --> 00:32:04,320
changing your binary

871
00:32:04,320 --> 00:32:05,600
your program

872
00:32:05,600 --> 00:32:08,000
you are bringing in some new

873
00:32:08,000 --> 00:32:10,000
thing in your program which will look

874
00:32:10,000 --> 00:32:12,399
for something and react on something

875
00:32:12,399 --> 00:32:14,559
which means there are overhead

876
00:32:14,559 --> 00:32:17,840
involved with mitigation

877
00:32:17,840 --> 00:32:20,080
if you are going for only software only

878
00:32:20,080 --> 00:32:23,679
solution this overhead tends to be high

879
00:32:23,679 --> 00:32:26,000
that's why we do not see such uh

880
00:32:26,000 --> 00:32:27,840
mitigations in your

881
00:32:27,840 --> 00:32:29,039
in your

882
00:32:29,039 --> 00:32:31,519
typical application but now

883
00:32:31,519 --> 00:32:33,919
hardware people vendors are giving you

884
00:32:33,919 --> 00:32:36,799
interfaces that okay you you you

885
00:32:36,799 --> 00:32:38,799
implement your

886
00:32:38,799 --> 00:32:40,559
attack mitigation and we have

887
00:32:40,559 --> 00:32:42,880
specialized instructions in order to do

888
00:32:42,880 --> 00:32:44,960
some common tasks and then it becomes

889
00:32:44,960 --> 00:32:47,440
super super fast because your hardware

890
00:32:47,440 --> 00:32:48,720
is supporting you

891
00:32:48,720 --> 00:32:51,919
and i have a lot of hope uh from that

892
00:32:51,919 --> 00:32:53,440
perspective that

893
00:32:53,440 --> 00:32:55,279
with more hardware support we can do

894
00:32:55,279 --> 00:32:57,279
fantastic job i think

895
00:32:57,279 --> 00:32:58,640
they are

896
00:32:58,640 --> 00:33:01,120
mainly they they may be very specific

897
00:33:01,120 --> 00:33:03,200
for a particular task but we can we can

898
00:33:03,200 --> 00:33:05,519
be very creative and we can use the same

899
00:33:05,519 --> 00:33:07,519
facility

900
00:33:07,519 --> 00:33:09,600
to do something else

901
00:33:09,600 --> 00:33:13,120
and then the other part that i think is

902
00:33:13,120 --> 00:33:15,519
needs lot of lot of improvement is data

903
00:33:15,519 --> 00:33:18,720
flow integrity this is a very very

904
00:33:18,720 --> 00:33:21,519
strong property data flow if you are

905
00:33:21,519 --> 00:33:22,880
able to do it

906
00:33:22,880 --> 00:33:24,799
that is something like okay it's very

907
00:33:24,799 --> 00:33:26,480
very difficult to attack

908
00:33:26,480 --> 00:33:29,600
your application very very difficult

909
00:33:29,600 --> 00:33:32,720
but it's very very expensive also but

910
00:33:32,720 --> 00:33:34,880
because it has to do lot of lot of check

911
00:33:34,880 --> 00:33:37,279
lot of check at runtime

912
00:33:37,279 --> 00:33:39,279
and those checks with those checks in

913
00:33:39,279 --> 00:33:42,159
place i don't think your you would like

914
00:33:42,159 --> 00:33:43,760
to you would like to run your

915
00:33:43,760 --> 00:33:45,679
application with all those checks but

916
00:33:45,679 --> 00:33:47,840
then again the same thing my savior is

917
00:33:47,840 --> 00:33:49,279
this

918
00:33:49,279 --> 00:33:50,720
hardware

919
00:33:50,720 --> 00:33:52,480
because if we have better hardware

920
00:33:52,480 --> 00:33:53,840
support

921
00:33:53,840 --> 00:33:55,679
i think the next

922
00:33:55,679 --> 00:33:57,039
big

923
00:33:57,039 --> 00:33:59,440
change that we'll see will come from dfi

924
00:33:59,440 --> 00:34:01,279
and i'm pretty sure that in the next

925
00:34:01,279 --> 00:34:03,360
coming up in the coming years it will be

926
00:34:03,360 --> 00:34:05,919
dfi that is going to go into you know be

927
00:34:05,919 --> 00:34:08,239
a hot topic among

928
00:34:08,239 --> 00:34:10,879
mitigation

929
00:34:10,960 --> 00:34:12,000
all right

930
00:34:12,000 --> 00:34:14,879
so this is what i was talking about that

931
00:34:14,879 --> 00:34:16,800
so research and programming language

932
00:34:16,800 --> 00:34:18,079
community

933
00:34:18,079 --> 00:34:19,760
they are working

934
00:34:19,760 --> 00:34:21,040
separately

935
00:34:21,040 --> 00:34:23,839
not necessarily with the security

936
00:34:23,839 --> 00:34:26,079
community but they are coming off pretty

937
00:34:26,079 --> 00:34:28,879
nice techniques okay for example

938
00:34:28,879 --> 00:34:31,119
they these are the some of the paper

939
00:34:31,119 --> 00:34:33,359
that i saw in in programming language

940
00:34:33,359 --> 00:34:34,399
community

941
00:34:34,399 --> 00:34:35,359
okay

942
00:34:35,359 --> 00:34:38,079
complete formula semantics of x86

943
00:34:38,079 --> 00:34:39,440
instruction set

944
00:34:39,440 --> 00:34:42,879
it is really really very good because it

945
00:34:42,879 --> 00:34:45,280
allows you now to do a lot of thing

946
00:34:45,280 --> 00:34:47,280
automatically because you have formal

947
00:34:47,280 --> 00:34:49,440
semantics of each instruction you can do

948
00:34:49,440 --> 00:34:50,800
lot of analysis

949
00:34:50,800 --> 00:34:52,639
you know that what this instruction does

950
00:34:52,639 --> 00:34:53,918
you can understand this is this

951
00:34:53,918 --> 00:34:56,239
implication and all automatic

952
00:34:56,239 --> 00:34:58,720
so this is really nice similarly

953
00:34:58,720 --> 00:35:01,680
abstract into sorry

954
00:35:01,680 --> 00:35:04,000
similarly abstract integration under

955
00:35:04,000 --> 00:35:06,480
speculative execution fantastic because

956
00:35:06,480 --> 00:35:08,560
as i said that abstract interpretation

957
00:35:08,560 --> 00:35:10,640
is a is a technique

958
00:35:10,640 --> 00:35:12,560
which allows you to

959
00:35:12,560 --> 00:35:15,359
to to to reason about your runtime

960
00:35:15,359 --> 00:35:17,680
behavior of your program but statically

961
00:35:17,680 --> 00:35:20,560
very very very very powerful

962
00:35:20,560 --> 00:35:22,640
now what they have done they have done

963
00:35:22,640 --> 00:35:24,560
that okay we can even reason about

964
00:35:24,560 --> 00:35:26,640
speculative execution

965
00:35:26,640 --> 00:35:29,119
which you do not observe actually as a

966
00:35:29,119 --> 00:35:31,280
user level program but it happens

967
00:35:31,280 --> 00:35:33,760
internally and i think what they did is

968
00:35:33,760 --> 00:35:36,079
because of last year last to last year

969
00:35:36,079 --> 00:35:37,680
meltdown spectre

970
00:35:37,680 --> 00:35:39,760
uh attack if you might have heard about

971
00:35:39,760 --> 00:35:41,839
them they were based on speculative

972
00:35:41,839 --> 00:35:44,160
execution the the problem

973
00:35:44,160 --> 00:35:46,240
and now you have a way of you know even

974
00:35:46,240 --> 00:35:48,079
reasoning your program with speculative

975
00:35:48,079 --> 00:35:50,560
execution and this is coming from not

976
00:35:50,560 --> 00:35:53,520
from security community pldi purple

977
00:35:53,520 --> 00:35:56,320
community okay so that's what my

978
00:35:56,320 --> 00:35:58,880
ah effort was in the beginning that we

979
00:35:58,880 --> 00:36:00,079
need to connect

980
00:36:00,079 --> 00:36:02,079
if you are if you think that we can work

981
00:36:02,079 --> 00:36:04,560
iso in isolation as a island it's not

982
00:36:04,560 --> 00:36:07,040
gonna work

983
00:36:07,359 --> 00:36:09,280
okay so so research in software

984
00:36:09,280 --> 00:36:11,040
engineering and verification community

985
00:36:11,040 --> 00:36:13,280
definitely doing some work which we can

986
00:36:13,280 --> 00:36:16,720
definitely borrow ideas for

987
00:36:16,720 --> 00:36:17,760
all right

988
00:36:17,760 --> 00:36:20,000
so

989
00:36:20,240 --> 00:36:24,399
right automatic exploit generation

990
00:36:24,560 --> 00:36:26,960
why it is important how to do it this is

991
00:36:26,960 --> 00:36:28,560
what i think

992
00:36:28,560 --> 00:36:30,800
when i start looking at automatic

993
00:36:30,800 --> 00:36:33,839
exploit generation

994
00:36:34,160 --> 00:36:34,880
so

995
00:36:34,880 --> 00:36:37,040
one i already told that my views on

996
00:36:37,040 --> 00:36:38,800
automatic supply generation is not about

997
00:36:38,800 --> 00:36:41,359
okay we can generate uh exploit

998
00:36:41,359 --> 00:36:43,920
automatically because this is not what i

999
00:36:43,920 --> 00:36:46,240
i'm not a offensive uh researcher as

1000
00:36:46,240 --> 00:36:48,960
such uh security researcher so that's

1001
00:36:48,960 --> 00:36:51,520
not my research agenda so for me

1002
00:36:51,520 --> 00:36:53,599
automatic generation is more like a

1003
00:36:53,599 --> 00:36:55,520
little bit more rigorous rigorous

1004
00:36:55,520 --> 00:36:57,520
testing but then what's happening in

1005
00:36:57,520 --> 00:36:58,720
this space

1006
00:36:58,720 --> 00:37:00,400
so if you look at

1007
00:37:00,400 --> 00:37:02,320
that

1008
00:37:02,320 --> 00:37:07,520
you you had some work initially in 2005

1009
00:37:07,520 --> 00:37:08,640
some work

1010
00:37:08,640 --> 00:37:10,000
after that

1011
00:37:10,000 --> 00:37:13,040
cmu group did some work you see that but

1012
00:37:13,040 --> 00:37:15,839
that is very very you know sparse 2008

1013
00:37:15,839 --> 00:37:18,240
then 2011 12

1014
00:37:18,240 --> 00:37:20,400
after that you don't see much coming out

1015
00:37:20,400 --> 00:37:22,480
from there and then from

1016
00:37:22,480 --> 00:37:23,599
uh

1017
00:37:23,599 --> 00:37:26,480
sean helen from the oxford university he

1018
00:37:26,480 --> 00:37:28,400
did some work in 2009 and after that

1019
00:37:28,400 --> 00:37:31,760
2017 he did some interesting work on he

1020
00:37:31,760 --> 00:37:34,400
uh he based expert generation okay

1021
00:37:34,400 --> 00:37:37,359
automatic heavy uh heap

1022
00:37:37,359 --> 00:37:39,680
overflow for generation

1023
00:37:39,680 --> 00:37:41,280
and then i saw

1024
00:37:41,280 --> 00:37:44,480
some one or two papers recently

1025
00:37:44,480 --> 00:37:45,520
so

1026
00:37:45,520 --> 00:37:46,720
it tells

1027
00:37:46,720 --> 00:37:47,760
that

1028
00:37:47,760 --> 00:37:51,200
we are really not progressing very well

1029
00:37:51,200 --> 00:37:53,599
in automated exploit generation

1030
00:37:53,599 --> 00:37:55,680
and that also gives you an idea or some

1031
00:37:55,680 --> 00:37:57,920
hint that it is complex it is very very

1032
00:37:57,920 --> 00:37:59,599
complex

1033
00:37:59,599 --> 00:38:01,200
because as i said that you have to

1034
00:38:01,200 --> 00:38:04,079
understand the environment of the victim

1035
00:38:04,079 --> 00:38:06,320
machine properly in order to really

1036
00:38:06,320 --> 00:38:08,160
generate automatics for generation which

1037
00:38:08,160 --> 00:38:10,320
is not easy okay

1038
00:38:10,320 --> 00:38:11,680
and nowadays

1039
00:38:11,680 --> 00:38:14,240
and also pain flow analysis that plays

1040
00:38:14,240 --> 00:38:16,400
major role is not still

1041
00:38:16,400 --> 00:38:18,960
there means it it is like it takes time

1042
00:38:18,960 --> 00:38:20,960
and it's a very heavy computation

1043
00:38:20,960 --> 00:38:23,760
symbolic execution controlling execution

1044
00:38:23,760 --> 00:38:25,760
which are fundamental they are still a

1045
00:38:25,760 --> 00:38:28,320
little bit heavy for people to apply

1046
00:38:28,320 --> 00:38:31,320
okay

1047
00:38:32,079 --> 00:38:35,839
so and then i am coming to my

1048
00:38:36,800 --> 00:38:38,960
last part here

1049
00:38:38,960 --> 00:38:40,560
as far as those main dimensions are

1050
00:38:40,560 --> 00:38:41,680
concerned

1051
00:38:41,680 --> 00:38:42,640
so

1052
00:38:42,640 --> 00:38:44,560
automated patching

1053
00:38:44,560 --> 00:38:47,200
right so we saw in the beginning in fact

1054
00:38:47,200 --> 00:38:49,119
this is this is where all started like

1055
00:38:49,119 --> 00:38:51,839
okay you are finding bugs too quickly

1056
00:38:51,839 --> 00:38:54,480
but you are not fixing them at the same

1057
00:38:54,480 --> 00:38:56,800
rate and that's why things are not

1058
00:38:56,800 --> 00:38:59,599
moving you know smoothly you do not have

1059
00:38:59,599 --> 00:39:01,920
you you just keep discovering new

1060
00:39:01,920 --> 00:39:04,240
attacks but you do not fix them so

1061
00:39:04,240 --> 00:39:06,160
nothing changes nothing much changes

1062
00:39:06,160 --> 00:39:08,800
actually okay but

1063
00:39:08,800 --> 00:39:11,040
so there is a community separate

1064
00:39:11,040 --> 00:39:14,640
community working for decades called

1065
00:39:14,640 --> 00:39:17,040
program synthesis

1066
00:39:17,040 --> 00:39:19,440
automated program synthesis so the

1067
00:39:19,440 --> 00:39:21,359
community basically is a branch of

1068
00:39:21,359 --> 00:39:22,800
software engineering

1069
00:39:22,800 --> 00:39:24,320
what they try to what they have been

1070
00:39:24,320 --> 00:39:26,240
trying to do is given some

1071
00:39:26,240 --> 00:39:28,480
specifications can we really

1072
00:39:28,480 --> 00:39:29,920
generate

1073
00:39:29,920 --> 00:39:32,160
computer programs

1074
00:39:32,160 --> 00:39:34,800
so this is a very very challenging task

1075
00:39:34,800 --> 00:39:38,240
of course nowadays it's becoming reality

1076
00:39:38,240 --> 00:39:39,599
some of them

1077
00:39:39,599 --> 00:39:42,240
might seem already co-pilot okay which

1078
00:39:42,240 --> 00:39:46,720
is uh integrated in in in

1079
00:39:46,720 --> 00:39:50,320
github it allows you to to to do

1080
00:39:50,320 --> 00:39:52,880
lot of lot of you know program automated

1081
00:39:52,880 --> 00:39:55,040
program uh rewrite not rewriting but

1082
00:39:55,040 --> 00:39:57,680
synthesis but in a limited way still but

1083
00:39:57,680 --> 00:39:59,200
this community has been working for

1084
00:39:59,200 --> 00:40:00,480
decades

1085
00:40:00,480 --> 00:40:03,040
okay and then

1086
00:40:03,040 --> 00:40:05,920
a lighter form of program synthesis is

1087
00:40:05,920 --> 00:40:08,480
called automated program repair

1088
00:40:08,480 --> 00:40:10,960
this is also active community

1089
00:40:10,960 --> 00:40:13,440
and i s so for example you can see one

1090
00:40:13,440 --> 00:40:16,400
paper concolic program repair in pldi 21

1091
00:40:16,400 --> 00:40:17,599
again

1092
00:40:17,599 --> 00:40:20,800
i am i am pointing out pldi

1093
00:40:20,800 --> 00:40:24,000
not specifically a security community

1094
00:40:24,000 --> 00:40:26,640
but they are working on this also

1095
00:40:26,640 --> 00:40:27,920
they were not

1096
00:40:27,920 --> 00:40:30,079
focusing on as such

1097
00:40:30,079 --> 00:40:32,960
patching a security bug

1098
00:40:32,960 --> 00:40:35,839
but they are focusing on okay we can

1099
00:40:35,839 --> 00:40:38,480
generate some program given something we

1100
00:40:38,480 --> 00:40:41,760
can and repairs some program because

1101
00:40:41,760 --> 00:40:44,079
there was some mistake or some feature

1102
00:40:44,079 --> 00:40:46,240
was missing kind of thing right so they

1103
00:40:46,240 --> 00:40:48,560
are doing totally a kind of complete

1104
00:40:48,560 --> 00:40:50,079
software engineering perspective they

1105
00:40:50,079 --> 00:40:52,480
were developing techniques but now we

1106
00:40:52,480 --> 00:40:55,040
can take ideas from them because after

1107
00:40:55,040 --> 00:40:58,000
all patch is again a piece of code that

1108
00:40:58,000 --> 00:41:01,280
you want to fix and replace with

1109
00:41:01,280 --> 00:41:02,720
something

1110
00:41:02,720 --> 00:41:05,040
okay so whole program synthesis is not

1111
00:41:05,040 --> 00:41:07,119
easy so sure that's why you do not see

1112
00:41:07,119 --> 00:41:08,000
much

1113
00:41:08,000 --> 00:41:10,000
much coming out from there i mean you do

1114
00:41:10,000 --> 00:41:12,000
not i mean until recently you did not

1115
00:41:12,000 --> 00:41:15,200
see much coming out from that community

1116
00:41:15,200 --> 00:41:17,839
but then the good part is in my opinion

1117
00:41:17,839 --> 00:41:20,800
that security bugs especially bugs which

1118
00:41:20,800 --> 00:41:22,880
are memo which are related to memory

1119
00:41:22,880 --> 00:41:25,520
corruption perhaps not they are not very

1120
00:41:25,520 --> 00:41:28,560
huge patches huge piece of code

1121
00:41:28,560 --> 00:41:31,040
because that is small then we do have

1122
00:41:31,040 --> 00:41:32,480
actually a good

1123
00:41:32,480 --> 00:41:34,960
uh friends

1124
00:41:34,960 --> 00:41:36,079
because

1125
00:41:36,079 --> 00:41:38,319
they are what they they

1126
00:41:38,319 --> 00:41:40,800
the technique is working may not go in

1127
00:41:40,800 --> 00:41:43,760
very large code but then maybe we also

1128
00:41:43,760 --> 00:41:47,040
do not require a large code okay my just

1129
00:41:47,040 --> 00:41:49,359
idea i mean i'm thinking maybe

1130
00:41:49,359 --> 00:41:51,359
so this is what i so we have been

1131
00:41:51,359 --> 00:41:53,359
working on some research project so i we

1132
00:41:53,359 --> 00:41:55,119
were where we were trying to analyze

1133
00:41:55,119 --> 00:41:56,560
some of the patches

1134
00:41:56,560 --> 00:41:58,640
and in most of the time we found that

1135
00:41:58,640 --> 00:42:00,960
your patches in some of the open sources

1136
00:42:00,960 --> 00:42:02,800
are not really really

1137
00:42:02,800 --> 00:42:04,880
very big so this is your original

1138
00:42:04,880 --> 00:42:06,079
program

1139
00:42:06,079 --> 00:42:07,839
and the patch was because you bring in

1140
00:42:07,839 --> 00:42:10,000
some new condition here and that

1141
00:42:10,000 --> 00:42:12,400
condition does something and then carry

1142
00:42:12,400 --> 00:42:15,040
on here or it goes somewhere else so

1143
00:42:15,040 --> 00:42:17,119
most of the time these memory

1144
00:42:17,119 --> 00:42:19,760
related corruption memory corruption

1145
00:42:19,760 --> 00:42:22,640
related bugs they have this kind of fix

1146
00:42:22,640 --> 00:42:25,280
because out of outer bound access they

1147
00:42:25,280 --> 00:42:27,440
want to stop that so this these are not

1148
00:42:27,440 --> 00:42:30,000
very big in my opinion

1149
00:42:30,000 --> 00:42:32,960
okay so and things to solve for patching

1150
00:42:32,960 --> 00:42:34,480
that but these are the thing that we

1151
00:42:34,480 --> 00:42:36,400
have to really really think about so

1152
00:42:36,400 --> 00:42:37,599
first of all

1153
00:42:37,599 --> 00:42:39,920
we have to have some automated way of

1154
00:42:39,920 --> 00:42:43,119
knowing the root cause of a particular

1155
00:42:43,119 --> 00:42:45,440
bug okay if you do not know the root

1156
00:42:45,440 --> 00:42:47,920
cause of any bug then you are not going

1157
00:42:47,920 --> 00:42:50,480
to do anything but if you are and also

1158
00:42:50,480 --> 00:42:53,040
the sorry

1159
00:42:53,040 --> 00:42:55,119
and also this root cause analysis is

1160
00:42:55,119 --> 00:42:58,960
also useful for crash triaging and

1161
00:42:58,960 --> 00:43:01,040
yesterday night when i was fixing my

1162
00:43:01,040 --> 00:43:04,560
slide i just looked for some new uh i

1163
00:43:04,560 --> 00:43:06,319
research were coming up in this

1164
00:43:06,319 --> 00:43:07,760
direction

1165
00:43:07,760 --> 00:43:10,400
just one week ago in ccs

1166
00:43:10,400 --> 00:43:12,880
which is a prime premier security

1167
00:43:12,880 --> 00:43:13,920
conference

1168
00:43:13,920 --> 00:43:18,240
a team from epfl presented igor

1169
00:43:18,240 --> 00:43:20,079
and what they are doing root cause

1170
00:43:20,079 --> 00:43:23,920
analysis for christianity in ccs one

1171
00:43:23,920 --> 00:43:25,119
week ago

1172
00:43:25,119 --> 00:43:26,800
so people are really working and i was

1173
00:43:26,800 --> 00:43:28,720
super happy about it that okay yes

1174
00:43:28,720 --> 00:43:30,480
that's that's exactly the thing that we

1175
00:43:30,480 --> 00:43:32,160
need to do

1176
00:43:32,160 --> 00:43:33,599
and then of course because this is the

1177
00:43:33,599 --> 00:43:35,839
patching of binary code definitely you

1178
00:43:35,839 --> 00:43:37,440
you have we have to take care of binary

1179
00:43:37,440 --> 00:43:39,119
code analysis that we talked about

1180
00:43:39,119 --> 00:43:40,560
earlier

1181
00:43:40,560 --> 00:43:42,480
binary rewriting is the fundamental

1182
00:43:42,480 --> 00:43:44,720
because you are changing the binary okay

1183
00:43:44,720 --> 00:43:47,200
but but luckily we have nice candidates

1184
00:43:47,200 --> 00:43:49,680
nowadays so it is the right time to do

1185
00:43:49,680 --> 00:43:51,680
this kind of thing we can do it i think

1186
00:43:51,680 --> 00:43:53,760
and there is another community which is

1187
00:43:53,760 --> 00:43:55,839
riso venetian

1188
00:43:55,839 --> 00:43:57,839
so binary resume nation is a different

1189
00:43:57,839 --> 00:43:59,359
community which what they are trying to

1190
00:43:59,359 --> 00:44:01,359
do that given a binary

1191
00:44:01,359 --> 00:44:03,920
legacy binary it was written

1192
00:44:03,920 --> 00:44:06,480
in late 70s perhaps with some computer

1193
00:44:06,480 --> 00:44:07,680
compiler

1194
00:44:07,680 --> 00:44:10,160
now you want to rejuvenate that with the

1195
00:44:10,160 --> 00:44:12,240
modern features of that particular

1196
00:44:12,240 --> 00:44:14,560
language at binary level so this is

1197
00:44:14,560 --> 00:44:16,800
super hard but they are working we can

1198
00:44:16,800 --> 00:44:19,440
take some ideas perhaps

1199
00:44:19,440 --> 00:44:21,359
so i am going to just

1200
00:44:21,359 --> 00:44:23,119
finish in

1201
00:44:23,119 --> 00:44:25,119
five minutes or so

1202
00:44:25,119 --> 00:44:27,440
so so now so hybrid approaches of

1203
00:44:27,440 --> 00:44:28,960
vulnerability discovery so we have

1204
00:44:28,960 --> 00:44:32,240
already seen this kind of

1205
00:44:33,200 --> 00:44:35,599
some separate thing like i talked about

1206
00:44:35,599 --> 00:44:37,200
you have static analysis you have

1207
00:44:37,200 --> 00:44:38,880
dynamic analysis

1208
00:44:38,880 --> 00:44:42,160
and then you also have hardware assisted

1209
00:44:42,160 --> 00:44:44,720
features and perhaps some other machine

1210
00:44:44,720 --> 00:44:47,119
learning kind of thing but how we we can

1211
00:44:47,119 --> 00:44:49,040
combine them

1212
00:44:49,040 --> 00:44:50,480
okay

1213
00:44:50,480 --> 00:44:52,319
so one thing is that what type of

1214
00:44:52,319 --> 00:44:54,800
vulnerability again i am thinking about

1215
00:44:54,800 --> 00:44:56,720
so memory corruption

1216
00:44:56,720 --> 00:44:58,960
vulnerabilities are there for the last

1217
00:44:58,960 --> 00:45:01,280
several years but still you see that

1218
00:45:01,280 --> 00:45:03,440
okay new cve is for a typical

1219
00:45:03,440 --> 00:45:05,440
vulnerability memory corruption

1220
00:45:05,440 --> 00:45:07,200
vulnerability is assigned

1221
00:45:07,200 --> 00:45:09,920
so they are not going here

1222
00:45:09,920 --> 00:45:12,560
ah they are still there okay

1223
00:45:12,560 --> 00:45:14,480
now the co and even we are not even

1224
00:45:14,480 --> 00:45:17,040
talking about this logic box forget

1225
00:45:17,040 --> 00:45:19,040
about because what we are talking about

1226
00:45:19,040 --> 00:45:21,119
memory corruption work because we can

1227
00:45:21,119 --> 00:45:23,599
observe them clearly

1228
00:45:23,599 --> 00:45:25,599
logic bugs are even people not talking

1229
00:45:25,599 --> 00:45:26,800
about

1230
00:45:26,800 --> 00:45:29,839
so perhaps what it gives us that

1231
00:45:29,839 --> 00:45:32,720
maybe we definitely need some sort of

1232
00:45:32,720 --> 00:45:36,480
combination of several type of analysis

1233
00:45:36,480 --> 00:45:38,880
to to solve this problem because

1234
00:45:38,880 --> 00:45:40,319
individually

1235
00:45:40,319 --> 00:45:42,000
we are i think

1236
00:45:42,000 --> 00:45:47,359
not doing uh we are not yet there okay

1237
00:45:47,359 --> 00:45:50,079
so this is what i was talking about

1238
00:45:50,079 --> 00:45:51,520
application of

1239
00:45:51,520 --> 00:45:53,920
ai and machine learning so large complex

1240
00:45:53,920 --> 00:45:55,599
application

1241
00:45:55,599 --> 00:45:57,200
so it means that

1242
00:45:57,200 --> 00:45:59,280
difficult to comprehend so then we can

1243
00:45:59,280 --> 00:46:02,000
maybe perhaps take the help of some

1244
00:46:02,000 --> 00:46:04,720
machine learning or

1245
00:46:04,720 --> 00:46:06,560
artificial intelligence but in

1246
00:46:06,560 --> 00:46:08,640
a more creative way rather than like

1247
00:46:08,640 --> 00:46:11,040
okay just take whatever comes to your

1248
00:46:11,040 --> 00:46:11,920
mind

1249
00:46:11,920 --> 00:46:13,760
and just give it to machine learning it

1250
00:46:13,760 --> 00:46:15,599
will do some magic and you will get some

1251
00:46:15,599 --> 00:46:17,520
answer no i don't think that that's

1252
00:46:17,520 --> 00:46:19,119
approach we have to have a very

1253
00:46:19,119 --> 00:46:20,480
meaningful

1254
00:46:20,480 --> 00:46:23,040
way of combining them

1255
00:46:23,040 --> 00:46:23,920
but

1256
00:46:23,920 --> 00:46:26,720
and you see what's happening

1257
00:46:26,720 --> 00:46:30,000
first of all yes people did some work

1258
00:46:30,000 --> 00:46:34,000
to to use artificial ml to find binary

1259
00:46:34,000 --> 00:46:35,839
level function recognition

1260
00:46:35,839 --> 00:46:37,920
those who are working on binary label

1261
00:46:37,920 --> 00:46:39,520
you may be knowing that this

1262
00:46:39,520 --> 00:46:41,839
is not that easy all the time

1263
00:46:41,839 --> 00:46:43,920
okay sometimes highly optimized code or

1264
00:46:43,920 --> 00:46:46,079
handwritten code may not have the proper

1265
00:46:46,079 --> 00:46:47,920
signature for the functions at binary

1266
00:46:47,920 --> 00:46:49,599
level if you are not able to find

1267
00:46:49,599 --> 00:46:51,920
functions you can't do things actually

1268
00:46:51,920 --> 00:46:52,720
okay

1269
00:46:52,720 --> 00:46:55,839
and this is you see the use in

1270
00:46:55,839 --> 00:46:58,000
they are doing value set analysis with

1271
00:46:58,000 --> 00:46:59,680
deep learning this is one of the

1272
00:46:59,680 --> 00:47:02,720
fundamental thing in program in program

1273
00:47:02,720 --> 00:47:05,040
analysis community and they did nice

1274
00:47:05,040 --> 00:47:06,160
work

1275
00:47:06,160 --> 00:47:07,760
with deep learning

1276
00:47:07,760 --> 00:47:09,920
and then they did assisted alias

1277
00:47:09,920 --> 00:47:12,240
analysis so these are the very some of

1278
00:47:12,240 --> 00:47:14,880
the fundamental problems of program

1279
00:47:14,880 --> 00:47:16,400
analysis

1280
00:47:16,400 --> 00:47:17,839
people have been trying to do that

1281
00:47:17,839 --> 00:47:19,280
correctly

1282
00:47:19,280 --> 00:47:20,000
but

1283
00:47:20,000 --> 00:47:23,280
given the size and complexity of the of

1284
00:47:23,280 --> 00:47:25,200
the software

1285
00:47:25,200 --> 00:47:27,200
classical technique if you want to apply

1286
00:47:27,200 --> 00:47:28,960
them as it is

1287
00:47:28,960 --> 00:47:31,280
is not they are not scalable sometimes

1288
00:47:31,280 --> 00:47:32,480
they give up

1289
00:47:32,480 --> 00:47:34,400
but here people are

1290
00:47:34,400 --> 00:47:37,119
doing a kind of very creative use of

1291
00:47:37,119 --> 00:47:38,640
machine learning and this is exactly

1292
00:47:38,640 --> 00:47:39,920
what i was talking about the some

1293
00:47:39,920 --> 00:47:42,880
creative uh application the way you

1294
00:47:42,880 --> 00:47:45,599
combine these two different communities

1295
00:47:45,599 --> 00:47:47,839
it's it's i think if you can able to if

1296
00:47:47,839 --> 00:47:49,920
you are able to do it

1297
00:47:49,920 --> 00:47:53,760
we can do a very very interesting work

1298
00:47:53,760 --> 00:47:54,640
so

1299
00:47:54,640 --> 00:47:56,880
i am summing up so in nutshell for me

1300
00:47:56,880 --> 00:47:59,040
the secure software that i said that is

1301
00:47:59,040 --> 00:48:01,839
definitely you have to have a balance in

1302
00:48:01,839 --> 00:48:03,680
all these aspects

1303
00:48:03,680 --> 00:48:04,839
okay

1304
00:48:04,839 --> 00:48:06,480
and

1305
00:48:06,480 --> 00:48:08,319
so i say the balance across various

1306
00:48:08,319 --> 00:48:10,000
steps that we talked about if you are

1307
00:48:10,000 --> 00:48:13,040
just focusing only on one we are not

1308
00:48:13,040 --> 00:48:15,040
still we are not going to have that

1309
00:48:15,040 --> 00:48:16,960
really the secure software that we are

1310
00:48:16,960 --> 00:48:19,359
talking about just focusing on one is

1311
00:48:19,359 --> 00:48:21,599
not going to help

1312
00:48:21,599 --> 00:48:24,319
and we need to look at communities

1313
00:48:24,319 --> 00:48:25,200
for

1314
00:48:25,200 --> 00:48:27,680
recent advancement and then try to adopt

1315
00:48:27,680 --> 00:48:28,800
and adapt

1316
00:48:28,800 --> 00:48:30,880
solutions from them and then we can

1317
00:48:30,880 --> 00:48:34,480
maybe do some better job i guess

1318
00:48:34,480 --> 00:48:36,319
and then

1319
00:48:36,319 --> 00:48:38,240
as i said that i'm really really looking

1320
00:48:38,240 --> 00:48:39,920
forward for this that there is a very

1321
00:48:39,920 --> 00:48:41,440
interesting development in hardware

1322
00:48:41,440 --> 00:48:43,520
software interfaces and this may be a

1323
00:48:43,520 --> 00:48:45,599
game changer for all this classical but

1324
00:48:45,599 --> 00:48:47,200
heavy technique

1325
00:48:47,200 --> 00:48:48,720
to be

1326
00:48:48,720 --> 00:48:52,160
usable in your large complex

1327
00:48:52,160 --> 00:48:54,000
environment

1328
00:48:54,000 --> 00:48:56,559
all right so with that i finish my talk

1329
00:48:56,559 --> 00:48:58,240
thank you very much

1330
00:48:58,240 --> 00:49:00,319
and if you have any

1331
00:49:00,319 --> 00:49:04,839
questions you can ask

